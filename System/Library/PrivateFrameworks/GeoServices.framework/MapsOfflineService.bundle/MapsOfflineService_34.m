unsigned __int16 *sub_EC0534(unsigned __int16 *result, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  int64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned __int16 *v10;
  uint64_t v11;
  unsigned __int16 v12;
  unsigned __int8 *v13;
  unsigned __int16 *v14;
  uint64_t v15;
  unint64_t v16;
  unsigned __int16 *v17;
  unsigned __int16 v18;
  unsigned __int8 *v19;
  unsigned __int16 v20;
  unsigned __int16 *v21;
  unsigned __int8 *v22;
  char *v23;
  unsigned __int16 v25;

  if (a4 >= 2)
  {
    v23 = (char *)result;
    v6 = 0;
    v25 = *result;
    v7 = (unint64_t)(a4 - 2) >> 1;
    v8 = result;
    do
    {
      v9 = 2 * v6 + 2;
      v10 = (unsigned __int16 *)((char *)v8 + v9);
      v11 = (2 * v6) | 1;
      if (v9 < a4)
      {
        v12 = v10[1];
        v13 = (unsigned __int8 *)sub_EE0610(*a3, *v10);
        result = (unsigned __int16 *)sub_EE0610(*a3, v12);
        if (*v13 < *(unsigned __int8 *)result)
        {
          ++v10;
          v11 = v9;
        }
      }
      *v8 = *v10;
      v8 = v10;
      v6 = v11;
    }
    while (v11 <= v7);
    v14 = (unsigned __int16 *)(a2 - 2);
    if (v10 == (unsigned __int16 *)(a2 - 2))
    {
      *v10 = v25;
    }
    else
    {
      *v10 = *v14;
      *v14 = v25;
      v15 = (char *)v10 - v23 + 2;
      if (v15 >= 3)
      {
        v16 = (((unint64_t)v15 >> 1) - 2) >> 1;
        v17 = (unsigned __int16 *)&v23[2 * v16];
        v18 = *v10;
        v19 = (unsigned __int8 *)sub_EE0610(*a3, *v17);
        result = (unsigned __int16 *)sub_EE0610(*a3, v18);
        if (*v19 < *(unsigned __int8 *)result)
        {
          v20 = *v10;
          do
          {
            v21 = v17;
            *v10 = *v17;
            if (!v16) {
              break;
            }
            v16 = (v16 - 1) >> 1;
            v17 = (unsigned __int16 *)&v23[2 * v16];
            v22 = (unsigned __int8 *)sub_EE0610(*a3, *v17);
            result = (unsigned __int16 *)sub_EE0610(*a3, v20);
            v10 = v21;
          }
          while (*v22 < *(unsigned __int8 *)result);
          *v21 = v20;
        }
      }
    }
  }
  return result;
}

uint64_t sub_EC06EC(uint64_t result, unsigned int a2)
{
  if ((uint64_t)(*(void *)(result + 104) - *(void *)(result + 96)) >> 2 <= (unint64_t)a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v4, "vertex id out of range");
    v3 = (void *)sub_2F404((uint64_t)exception, &v4);
  }
  return result;
}

void sub_EC076C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_EC079C(uint64_t result, int a2)
{
  if ((a2 + 1) >= (unint64_t)((uint64_t)(*(void *)(result + 56) - *(void *)(result + 48)) >> 2))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v4, "vertex id out of range");
    v3 = (void *)sub_2F404((uint64_t)exception, &v4);
  }
  return result;
}

void sub_EC081C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_EC084C(unsigned int *a1, long long *a2, char *a3, long long *a4, uint64_t a5, uint64_t a6, char a7)
{
  while (2)
  {
    v257 = a4 - 10;
    v258 = (__n128 *)(a4 - 5);
    v256 = a4 - 15;
    v11 = a1;
    v12 = a2;
LABEL_2:
    v13 = v11;
    uint64_t v14 = (uint64_t)v12;
    while (1)
    {
      uint64_t v15 = a3 - (char *)v13;
      unint64_t v16 = (a3 - (char *)v13) >> 2;
      if (v8 || !v7)
      {
        switch(v16)
        {
          case 0uLL:
          case 1uLL:
            return result;
          case 2uLL:
            unsigned int v182 = *((_DWORD *)a3 - 1);
            unsigned int v183 = *v13;
            if (v182 < *v13)
            {
              unsigned int *v13 = v182;
              *((_DWORD *)a3 - 1) = v183;
              __n128 v296 = *(__n128 *)v14;
              __n128 result = *(__n128 *)(v14 + 16);
              long long v405 = *(_OWORD *)(v14 + 48);
              long long v442 = *(_OWORD *)(v14 + 64);
              long long v368 = *(_OWORD *)(v14 + 32);
              long long v184 = *(a4 - 1);
              long long v186 = *(a4 - 4);
              long long v185 = *(a4 - 3);
              *(_OWORD *)(v14 + 48) = *(a4 - 2);
              *(_OWORD *)(v14 + 64) = v184;
              *(_OWORD *)(v14 + 16) = v186;
              *(_OWORD *)(v14 + 32) = v185;
              *(_OWORD *)uint64_t v14 = *(a4 - 5);
              *(a4 - 2) = v405;
              *(a4 - 1) = v442;
              *(a4 - 4) = (__int128)result;
              *(a4 - 3) = v368;
              result.n128_u64[0] = v296.n128_u64[0];
              *(a4 - 5) = (__int128)v296;
            }
            break;
          case 3uLL:
            v187 = (__n128 *)(v14 + 80);
            unsigned int v189 = *v13;
            unsigned int v188 = v13[1];
            unsigned int v190 = *((_DWORD *)a3 - 1);
            if (v188 >= *v13)
            {
              if (v190 < v188)
              {
                v13[1] = v190;
                *((_DWORD *)a3 - 1) = v188;
                long long v374 = *(_OWORD *)(v14 + 112);
                long long v411 = *(_OWORD *)(v14 + 128);
                long long v448 = *(_OWORD *)(v14 + 144);
                __n128 v302 = *v187;
                __n128 v337 = *(__n128 *)(v14 + 96);
                long long v231 = *(a4 - 4);
                long long v230 = *(a4 - 3);
                long long v232 = *(a4 - 1);
                *(_OWORD *)(v14 + 128) = *(a4 - 2);
                *(_OWORD *)(v14 + 144) = v232;
                *(_OWORD *)(v14 + 96) = v231;
                *(_OWORD *)(v14 + 112) = v230;
                __n128 *v187 = *v258;
                __n128 *v258 = v302;
                __n128 result = v337;
                *(a4 - 2) = v411;
                *(a4 - 1) = v448;
                *(a4 - 4) = (__int128)v337;
                *(a4 - 3) = v374;
                unsigned int v234 = *v13;
                unsigned int v233 = v13[1];
                if (v233 < *v13)
                {
                  unsigned int *v13 = v233;
                  v13[1] = v234;
                  __n128 v303 = *(__n128 *)v14;
                  long long v412 = *(_OWORD *)(v14 + 48);
                  long long v449 = *(_OWORD *)(v14 + 64);
                  long long v338 = *(_OWORD *)(v14 + 16);
                  long long v375 = *(_OWORD *)(v14 + 32);
                  long long v235 = *(_OWORD *)(v14 + 144);
                  long long v236 = *(_OWORD *)(v14 + 112);
                  *(_OWORD *)(v14 + 48) = *(_OWORD *)(v14 + 128);
                  *(_OWORD *)(v14 + 64) = v235;
                  __n128 v237 = *v187;
                  *(_OWORD *)(v14 + 16) = *(_OWORD *)(v14 + 96);
                  *(_OWORD *)(v14 + 32) = v236;
                  *(__n128 *)uint64_t v14 = v237;
                  __n128 result = v303;
                  *(_OWORD *)(v14 + 128) = v412;
                  *(_OWORD *)(v14 + 144) = v449;
                  *(_OWORD *)(v14 + 96) = v338;
                  *(_OWORD *)(v14 + 112) = v375;
                  __n128 *v187 = v303;
                }
              }
            }
            else if (v190 >= v188)
            {
              unsigned int *v13 = v188;
              v13[1] = v189;
              __n128 v304 = *(__n128 *)v14;
              long long v413 = *(_OWORD *)(v14 + 48);
              long long v450 = *(_OWORD *)(v14 + 64);
              long long v339 = *(_OWORD *)(v14 + 16);
              long long v376 = *(_OWORD *)(v14 + 32);
              long long v248 = *(_OWORD *)(v14 + 144);
              long long v249 = *(_OWORD *)(v14 + 112);
              *(_OWORD *)(v14 + 48) = *(_OWORD *)(v14 + 128);
              *(_OWORD *)(v14 + 64) = v248;
              __n128 v250 = *v187;
              *(_OWORD *)(v14 + 16) = *(_OWORD *)(v14 + 96);
              *(_OWORD *)(v14 + 32) = v249;
              *(__n128 *)uint64_t v14 = v250;
              __n128 result = v304;
              *(_OWORD *)(v14 + 128) = v413;
              *(_OWORD *)(v14 + 144) = v450;
              *(_OWORD *)(v14 + 96) = v339;
              *(_OWORD *)(v14 + 112) = v376;
              __n128 *v187 = v304;
              unsigned int v251 = *((_DWORD *)a3 - 1);
              unsigned int v252 = v13[1];
              if (v251 < v252)
              {
                v13[1] = v251;
                *((_DWORD *)a3 - 1) = v252;
                long long v377 = *(_OWORD *)(v14 + 112);
                long long v414 = *(_OWORD *)(v14 + 128);
                long long v451 = *(_OWORD *)(v14 + 144);
                __n128 v305 = *v187;
                __n128 v340 = *(__n128 *)(v14 + 96);
                long long v254 = *(a4 - 4);
                long long v253 = *(a4 - 3);
                long long v255 = *(a4 - 1);
                *(_OWORD *)(v14 + 128) = *(a4 - 2);
                *(_OWORD *)(v14 + 144) = v255;
                *(_OWORD *)(v14 + 96) = v254;
                *(_OWORD *)(v14 + 112) = v253;
                __n128 *v187 = *v258;
                __n128 *v258 = v305;
                __n128 result = v340;
                *(a4 - 2) = v414;
                *(a4 - 1) = v451;
                *(a4 - 4) = (__int128)v340;
                *(a4 - 3) = v377;
              }
            }
            else
            {
              unsigned int *v13 = v190;
              *((_DWORD *)a3 - 1) = v189;
              __n128 v297 = *(__n128 *)v14;
              __n128 result = *(__n128 *)(v14 + 16);
              long long v406 = *(_OWORD *)(v14 + 48);
              long long v443 = *(_OWORD *)(v14 + 64);
              long long v369 = *(_OWORD *)(v14 + 32);
              long long v191 = *(a4 - 1);
              long long v193 = *(a4 - 4);
              long long v192 = *(a4 - 3);
              *(_OWORD *)(v14 + 48) = *(a4 - 2);
              *(_OWORD *)(v14 + 64) = v191;
              *(_OWORD *)(v14 + 16) = v193;
              *(_OWORD *)(v14 + 32) = v192;
              *(__n128 *)uint64_t v14 = *v258;
              *(a4 - 2) = v406;
              *(a4 - 1) = v443;
              *(a4 - 4) = (__int128)result;
              *(a4 - 3) = v369;
              result.n128_u64[0] = v297.n128_u64[0];
              __n128 *v258 = v297;
            }
            break;
          case 4uLL:
            result.n128_u64[0] = sub_EC24C8(v13, (__n128 *)v14, v13 + 1, (__n128 *)(v14 + 80), v13 + 2, (__n128 *)(v14 + 160), (unsigned int *)a3 - 1, v258).n128_u64[0];
            break;
          case 5uLL:
            v194 = (__n128 *)(v14 + 80);
            v195 = v13 + 2;
            v196 = (__n128 *)(v14 + 160);
            v197 = v13 + 3;
            v198 = (__n128 *)(v14 + 240);
            result.n128_u64[0] = sub_EC24C8(v13, (__n128 *)v14, v13 + 1, (__n128 *)(v14 + 80), v13 + 2, (__n128 *)(v14 + 160), v13 + 3, (__n128 *)(v14 + 240)).n128_u64[0];
            unsigned int v199 = *((_DWORD *)a3 - 1);
            unsigned int v200 = v13[3];
            if (v199 < v200)
            {
              unsigned int *v197 = v199;
              *((_DWORD *)a3 - 1) = v200;
              long long v370 = *(_OWORD *)(v14 + 272);
              long long v407 = *(_OWORD *)(v14 + 288);
              long long v444 = *(_OWORD *)(v14 + 304);
              long long v298 = (__int128)*v198;
              __n128 v333 = *(__n128 *)(v14 + 256);
              long long v202 = *(a4 - 4);
              long long v201 = *(a4 - 3);
              long long v203 = *(a4 - 1);
              *(_OWORD *)(v14 + 288) = *(a4 - 2);
              *(_OWORD *)(v14 + 304) = v203;
              *(_OWORD *)(v14 + 256) = v202;
              *(_OWORD *)(v14 + 272) = v201;
              __n128 *v198 = (__n128)*(a4 - 5);
              *(a4 - 5) = v298;
              __n128 result = v333;
              *(a4 - 2) = v407;
              *(a4 - 1) = v444;
              *(a4 - 4) = (__int128)v333;
              *(a4 - 3) = v370;
              unsigned int v204 = *v195;
              if (*v197 < *v195)
              {
                unsigned int *v195 = *v197;
                unsigned int *v197 = v204;
                long long v371 = *(_OWORD *)(v14 + 192);
                long long v408 = *(_OWORD *)(v14 + 208);
                long long v445 = *(_OWORD *)(v14 + 224);
                __n128 v299 = *v196;
                long long v334 = *(_OWORD *)(v14 + 176);
                long long v205 = *(_OWORD *)(v14 + 288);
                *(_OWORD *)(v14 + 192) = *(_OWORD *)(v14 + 272);
                *(_OWORD *)(v14 + 208) = v205;
                *(_OWORD *)(v14 + 224) = *(_OWORD *)(v14 + 304);
                long long v206 = *(_OWORD *)(v14 + 256);
                __n128 *v196 = *v198;
                *(_OWORD *)(v14 + 176) = v206;
                __n128 result = v299;
                *(_OWORD *)(v14 + 288) = v408;
                *(_OWORD *)(v14 + 304) = v445;
                *(_OWORD *)(v14 + 256) = v334;
                *(_OWORD *)(v14 + 272) = v371;
                __n128 *v198 = v299;
                unsigned int v207 = v13[1];
                if (*v195 < v207)
                {
                  v13[1] = *v195;
                  v13[2] = v207;
                  long long v372 = *(_OWORD *)(v14 + 112);
                  long long v409 = *(_OWORD *)(v14 + 128);
                  long long v446 = *(_OWORD *)(v14 + 144);
                  __n128 v300 = *v194;
                  long long v335 = *(_OWORD *)(v14 + 96);
                  long long v208 = *(_OWORD *)(v14 + 208);
                  *(_OWORD *)(v14 + 112) = *(_OWORD *)(v14 + 192);
                  *(_OWORD *)(v14 + 128) = v208;
                  *(_OWORD *)(v14 + 144) = *(_OWORD *)(v14 + 224);
                  long long v209 = *(_OWORD *)(v14 + 176);
                  __n128 *v194 = *v196;
                  *(_OWORD *)(v14 + 96) = v209;
                  __n128 result = v300;
                  *(_OWORD *)(v14 + 208) = v409;
                  *(_OWORD *)(v14 + 224) = v446;
                  *(_OWORD *)(v14 + 176) = v335;
                  *(_OWORD *)(v14 + 192) = v372;
                  __n128 *v196 = v300;
                  unsigned int v211 = *v13;
                  unsigned int v210 = v13[1];
                  if (v210 < *v13)
                  {
                    unsigned int *v13 = v210;
                    v13[1] = v211;
                    __n128 v301 = *(__n128 *)v14;
                    long long v410 = *(_OWORD *)(v14 + 48);
                    long long v447 = *(_OWORD *)(v14 + 64);
                    long long v336 = *(_OWORD *)(v14 + 16);
                    long long v373 = *(_OWORD *)(v14 + 32);
                    long long v212 = *(_OWORD *)(v14 + 144);
                    long long v213 = *(_OWORD *)(v14 + 112);
                    *(_OWORD *)(v14 + 48) = *(_OWORD *)(v14 + 128);
                    *(_OWORD *)(v14 + 64) = v212;
                    __n128 v214 = *v194;
                    *(_OWORD *)(v14 + 16) = *(_OWORD *)(v14 + 96);
                    *(_OWORD *)(v14 + 32) = v213;
                    *(__n128 *)uint64_t v14 = v214;
                    __n128 result = v301;
                    *(_OWORD *)(v14 + 128) = v410;
                    *(_OWORD *)(v14 + 144) = v447;
                    *(_OWORD *)(v14 + 96) = v336;
                    *(_OWORD *)(v14 + 112) = v373;
                    __n128 *v194 = v301;
                  }
                }
              }
            }
            break;
          default:
            JUMPOUT(0);
        }
        return result;
      }
      if (v15 <= 95)
      {
        if (a7)
        {
          if (v13 != (unsigned int *)a3)
          {
            v215 = v13 + 1;
            if (v13 + 1 != (unsigned int *)a3)
            {
              uint64_t v216 = 0;
              uint64_t v217 = 0;
              v218 = (__n128 *)v14;
              v219 = v13;
              do
              {
                v222 = v215;
                v218 += 5;
                unsigned int v223 = v219[1];
                if (v223 < *v219)
                {
                  __n128 v417 = v218[3];
                  __n128 v454 = v218[4];
                  __n128 v343 = v218[1];
                  __n128 v380 = v218[2];
                  __n128 v308 = *v218;
                  unsigned int v224 = *v219;
                  uint64_t v225 = v216;
                  uint64_t v226 = v217;
                  do
                  {
                    *(unsigned int *)((char *)v13 + v226 + 4) = v224;
                    v227 = (_OWORD *)(v14 + v225);
                    long long v228 = *(_OWORD *)(v14 + v225 + 48);
                    v227[7] = *(_OWORD *)(v14 + v225 + 32);
                    v227[8] = v228;
                    v227[9] = *(_OWORD *)(v14 + v225 + 64);
                    long long v229 = *(_OWORD *)(v14 + v225 + 16);
                    v227[5] = *(_OWORD *)(v14 + v225);
                    v227[6] = v229;
                    if (!v226)
                    {
                      v220 = v13;
                      v221 = (_OWORD *)v14;
                      goto LABEL_114;
                    }
                    unsigned int v224 = *(unsigned int *)((char *)v13 + v226 - 4);
                    v226 -= 4;
                    v225 -= 80;
                  }
                  while (v223 < v224);
                  v220 = (unsigned int *)((char *)v13 + v226 + 4);
                  v221 = (_OWORD *)(v14 + v225 + 80);
LABEL_114:
                  unsigned int *v220 = v223;
                  _OWORD *v221 = v308;
                  __n128 result = v343;
                  v221[3] = v417;
                  v221[4] = v454;
                  v221[1] = v343;
                  v221[2] = v380;
                }
                v215 = v222 + 1;
                v217 += 4;
                v216 += 80;
                v219 = v222;
              }
              while (v222 + 1 != (unsigned int *)a3);
            }
          }
        }
        else if (v13 != (unsigned int *)a3)
        {
          v238 = v13 + 1;
          if (v13 + 1 != (unsigned int *)a3)
          {
            v239 = (__n128 *)(v14 + 80);
            do
            {
              v240 = v238;
              v14 += 80;
              unsigned int v241 = v13[1];
              if (v241 < *v13)
              {
                __n128 v418 = *(__n128 *)(v14 + 48);
                __n128 v455 = *(__n128 *)(v14 + 64);
                __n128 v344 = *(__n128 *)(v14 + 16);
                __n128 v381 = *(__n128 *)(v14 + 32);
                __n128 v309 = *(__n128 *)v14;
                unsigned int v242 = *v13;
                v243 = v239;
                v244 = v240;
                do
                {
                  unsigned int *v244 = v242;
                  __n128 v245 = v243[-1];
                  __n128 v246 = v243[-3];
                  v243[3] = v243[-2];
                  v243[4] = v245;
                  __n128 v247 = v243[-4];
                  __n128 *v243 = v243[-5];
                  v243[1] = v247;
                  v243[2] = v246;
                  v243 -= 5;
                  unsigned int v242 = *(v244 - 2);
                  --v244;
                }
                while (v241 < v242);
                unsigned int *v244 = v241;
                __n128 *v243 = v309;
                __n128 result = v344;
                v243[3] = v418;
                v243[4] = v455;
                v243[1] = v344;
                v243[2] = v381;
              }
              v238 = v240 + 1;
              v239 += 5;
              v13 = v240;
            }
            while (v240 + 1 != (unsigned int *)a3);
          }
        }
        return result;
      }
      if (!a6)
      {
        if (v13 != (unsigned int *)a3)
        {
          sub_EC27B8((char *)v13, (long long *)v14, a3, a4, a3);
        }
        return result;
      }
      unint64_t v17 = v16 >> 1;
      v18 = (__n128 *)(v14 + 80 * (v16 >> 1));
      unsigned int v19 = *((_DWORD *)a3 - 1);
      if ((unint64_t)v15 >= 0x201)
      {
        unsigned int v20 = v13[v17];
        unsigned int v21 = *v13;
        uint64_t v22 = v17;
        if (v20 >= *v13)
        {
          if (v19 < v20)
          {
            v13[v17] = v19;
            *((_DWORD *)a3 - 1) = v20;
            __n128 v275 = *v18;
            long long v384 = (__int128)v18[3];
            long long v421 = (__int128)v18[4];
            long long v312 = (__int128)v18[1];
            long long v347 = (__int128)v18[2];
            __n128 v32 = (__n128)*(a4 - 1);
            __n128 v34 = (__n128)*(a4 - 4);
            __n128 v33 = (__n128)*(a4 - 3);
            v18[3] = (__n128)*(a4 - 2);
            v18[4] = v32;
            v18[1] = v34;
            v18[2] = v33;
            __n128 *v18 = *v258;
            *(a4 - 2) = v384;
            *(a4 - 1) = v421;
            *(a4 - 4) = v312;
            *(a4 - 3) = v347;
            __n128 *v258 = v275;
            unsigned int v35 = v13[v17];
            unsigned int v36 = *v13;
            if (v35 < *v13)
            {
              unsigned int *v13 = v35;
              v13[v17] = v36;
              __n128 v276 = *(__n128 *)v14;
              __n128 v385 = *(__n128 *)(v14 + 48);
              __n128 v422 = *(__n128 *)(v14 + 64);
              __n128 v313 = *(__n128 *)(v14 + 16);
              __n128 v348 = *(__n128 *)(v14 + 32);
              __n128 v37 = v18[4];
              __n128 v39 = v18[1];
              __n128 v38 = v18[2];
              *(__n128 *)(v14 + 48) = v18[3];
              *(__n128 *)(v14 + 64) = v37;
              *(__n128 *)(v14 + 16) = v39;
              *(__n128 *)(v14 + 32) = v38;
              *(__n128 *)uint64_t v14 = *v18;
              v18[3] = v385;
              v18[4] = v422;
              v18[1] = v313;
              v18[2] = v348;
              __n128 *v18 = v276;
            }
          }
        }
        else
        {
          if (v19 >= v20)
          {
            unsigned int *v13 = v20;
            v13[v17] = v21;
            __n128 v279 = *(__n128 *)v14;
            __n128 v388 = *(__n128 *)(v14 + 48);
            __n128 v425 = *(__n128 *)(v14 + 64);
            __n128 v316 = *(__n128 *)(v14 + 16);
            __n128 v351 = *(__n128 *)(v14 + 32);
            __n128 v47 = v18[4];
            __n128 v49 = v18[1];
            __n128 v48 = v18[2];
            *(__n128 *)(v14 + 48) = v18[3];
            *(__n128 *)(v14 + 64) = v47;
            *(__n128 *)(v14 + 16) = v49;
            *(__n128 *)(v14 + 32) = v48;
            *(__n128 *)uint64_t v14 = *v18;
            v18[3] = v388;
            v18[4] = v425;
            v18[1] = v316;
            v18[2] = v351;
            __n128 *v18 = v279;
            unsigned int v50 = *((_DWORD *)a3 - 1);
            unsigned int v51 = v13[v17];
            if (v50 >= v51) {
              goto LABEL_23;
            }
            v13[v17] = v50;
            *((_DWORD *)a3 - 1) = v51;
            __n128 v273 = *v18;
            __n128 v382 = v18[3];
            __n128 v419 = v18[4];
            __n128 v310 = v18[1];
            __n128 v345 = v18[2];
            v23 = (__n128 *)(a4 - 5);
            __n128 v52 = (__n128)*(a4 - 1);
            __n128 v54 = (__n128)*(a4 - 4);
            __n128 v53 = (__n128)*(a4 - 3);
            v18[3] = (__n128)*(a4 - 2);
            v18[4] = v52;
            v18[1] = v54;
            v18[2] = v53;
            __n128 *v18 = *v258;
          }
          else
          {
            unsigned int *v13 = v19;
            *((_DWORD *)a3 - 1) = v21;
            __n128 v273 = *(__n128 *)v14;
            __n128 v382 = *(__n128 *)(v14 + 48);
            __n128 v419 = *(__n128 *)(v14 + 64);
            __n128 v310 = *(__n128 *)(v14 + 16);
            __n128 v345 = *(__n128 *)(v14 + 32);
            v23 = (__n128 *)(a4 - 5);
            long long v24 = *(a4 - 1);
            long long v26 = *(a4 - 4);
            long long v25 = *(a4 - 3);
            *(_OWORD *)(v14 + 48) = *(a4 - 2);
            *(_OWORD *)(v14 + 64) = v24;
            *(_OWORD *)(v14 + 16) = v26;
            *(_OWORD *)(v14 + 32) = v25;
            *(__n128 *)uint64_t v14 = *v258;
          }
          v23[3] = v382;
          v23[4] = v419;
          v23[1] = v310;
          v23[2] = v345;
          __n128 *v23 = v273;
        }
LABEL_23:
        v55 = (long long *)(v14 + 80);
        unint64_t v56 = v17 - 1;
        v57 = (__n128 *)(v14 + 80 * (v17 - 1));
        unsigned int v58 = v13[v17 - 1];
        unsigned int v59 = v13[1];
        unsigned int v60 = *((_DWORD *)a3 - 2);
        if (v58 >= v59)
        {
          if (v60 < v58)
          {
            v13[v56] = v60;
            *((_DWORD *)a3 - 2) = v58;
            long long v281 = (__int128)*v57;
            long long v390 = (__int128)v57[3];
            long long v427 = (__int128)v57[4];
            long long v318 = (__int128)v57[1];
            long long v353 = (__int128)v57[2];
            __n128 v64 = (__n128)*(a4 - 6);
            __n128 v66 = (__n128)*(a4 - 9);
            __n128 v65 = (__n128)*(a4 - 8);
            v57[3] = (__n128)*(a4 - 7);
            v57[4] = v64;
            v57[1] = v66;
            v57[2] = v65;
            __n128 *v57 = (__n128)*v257;
            *(a4 - 7) = v390;
            *(a4 - 6) = v427;
            *(a4 - 9) = v318;
            *(a4 - 8) = v353;
            long long *v257 = v281;
            unsigned int v67 = v13[v56];
            unsigned int v68 = v13[1];
            if (v67 < v68)
            {
              v13[1] = v67;
              v13[v56] = v68;
              __n128 v354 = *(__n128 *)(v14 + 112);
              __n128 v391 = *(__n128 *)(v14 + 128);
              __n128 v428 = *(__n128 *)(v14 + 144);
              long long v282 = *v55;
              __n128 v319 = *(__n128 *)(v14 + 96);
              __n128 v70 = v57[1];
              __n128 v69 = v57[2];
              __n128 v71 = v57[4];
              *(__n128 *)(v14 + 128) = v57[3];
              *(__n128 *)(v14 + 144) = v71;
              *(__n128 *)(v14 + 96) = v70;
              *(__n128 *)(v14 + 112) = v69;
              long long *v55 = (__int128)*v57;
              __n128 *v57 = (__n128)v282;
              v57[3] = v391;
              v57[4] = v428;
              v57[1] = v319;
              v57[2] = v354;
            }
          }
        }
        else if (v60 >= v58)
        {
          v13[1] = v58;
          v13[v56] = v59;
          __n128 v357 = *(__n128 *)(v14 + 112);
          __n128 v394 = *(__n128 *)(v14 + 128);
          __n128 v431 = *(__n128 *)(v14 + 144);
          long long v285 = *v55;
          __n128 v322 = *(__n128 *)(v14 + 96);
          __n128 v78 = v57[1];
          __n128 v77 = v57[2];
          __n128 v79 = v57[4];
          *(__n128 *)(v14 + 128) = v57[3];
          *(__n128 *)(v14 + 144) = v79;
          *(__n128 *)(v14 + 96) = v78;
          *(__n128 *)(v14 + 112) = v77;
          long long *v55 = (__int128)*v57;
          __n128 *v57 = (__n128)v285;
          v57[3] = v394;
          v57[4] = v431;
          v57[1] = v322;
          v57[2] = v357;
          unsigned int v80 = *((_DWORD *)a3 - 2);
          unsigned int v81 = v13[v56];
          if (v80 < v81)
          {
            v13[v56] = v80;
            *((_DWORD *)a3 - 2) = v81;
            long long v286 = (__int128)*v57;
            long long v395 = (__int128)v57[3];
            long long v432 = (__int128)v57[4];
            long long v323 = (__int128)v57[1];
            long long v358 = (__int128)v57[2];
            __n128 v82 = (__n128)*(a4 - 6);
            __n128 v84 = (__n128)*(a4 - 9);
            __n128 v83 = (__n128)*(a4 - 8);
            v57[3] = (__n128)*(a4 - 7);
            v57[4] = v82;
            v57[1] = v84;
            v57[2] = v83;
            __n128 *v57 = (__n128)*v257;
            *(a4 - 7) = v395;
            *(a4 - 6) = v432;
            *(a4 - 9) = v323;
            *(a4 - 8) = v358;
            long long *v257 = v286;
          }
        }
        else
        {
          v13[1] = v60;
          *((_DWORD *)a3 - 2) = v59;
          long long v352 = *(_OWORD *)(v14 + 112);
          long long v389 = *(_OWORD *)(v14 + 128);
          long long v426 = *(_OWORD *)(v14 + 144);
          long long v280 = *v55;
          long long v317 = *(_OWORD *)(v14 + 96);
          long long v62 = *(a4 - 9);
          long long v61 = *(a4 - 8);
          long long v63 = *(a4 - 6);
          *(_OWORD *)(v14 + 128) = *(a4 - 7);
          *(_OWORD *)(v14 + 144) = v63;
          *(_OWORD *)(v14 + 96) = v62;
          *(_OWORD *)(v14 + 112) = v61;
          long long *v55 = *v257;
          long long *v257 = v280;
          *(a4 - 7) = v389;
          *(a4 - 6) = v426;
          *(a4 - 9) = v317;
          *(a4 - 8) = v352;
        }
        v85 = (long long *)(v14 + 160);
        unint64_t v86 = v17 + 1;
        v87 = (__n128 *)(v14 + 80 * (v17 + 1));
        unsigned int v88 = v13[v17 + 1];
        unsigned int v89 = v13[2];
        unsigned int v90 = *((_DWORD *)a3 - 3);
        if (v88 >= v89)
        {
          if (v90 < v88)
          {
            v13[v86] = v90;
            *((_DWORD *)a3 - 3) = v88;
            long long v288 = (__int128)*v87;
            long long v397 = (__int128)v87[3];
            long long v434 = (__int128)v87[4];
            long long v325 = (__int128)v87[1];
            long long v360 = (__int128)v87[2];
            __n128 v94 = (__n128)*(a4 - 11);
            __n128 v96 = (__n128)*(a4 - 14);
            __n128 v95 = (__n128)*(a4 - 13);
            v87[3] = (__n128)*(a4 - 12);
            v87[4] = v94;
            v87[1] = v96;
            v87[2] = v95;
            __n128 *v87 = (__n128)*v256;
            *(a4 - 12) = v397;
            *(a4 - 11) = v434;
            *(a4 - 14) = v325;
            *(a4 - 13) = v360;
            long long *v256 = v288;
            unsigned int v97 = v13[v86];
            unsigned int v98 = v13[2];
            if (v97 < v98)
            {
              v13[2] = v97;
              v13[v86] = v98;
              __n128 v361 = *(__n128 *)(v14 + 192);
              __n128 v398 = *(__n128 *)(v14 + 208);
              __n128 v435 = *(__n128 *)(v14 + 224);
              long long v289 = *v85;
              __n128 v326 = *(__n128 *)(v14 + 176);
              __n128 v100 = v87[1];
              __n128 v99 = v87[2];
              __n128 v101 = v87[4];
              *(__n128 *)(v14 + 208) = v87[3];
              *(__n128 *)(v14 + 224) = v101;
              *(__n128 *)(v14 + 176) = v100;
              *(__n128 *)(v14 + 192) = v99;
              long long *v85 = (__int128)*v87;
              __n128 *v87 = (__n128)v289;
              v87[3] = v398;
              v87[4] = v435;
              v87[1] = v326;
              v87[2] = v361;
            }
          }
        }
        else if (v90 >= v88)
        {
          v13[2] = v88;
          v13[v86] = v89;
          __n128 v362 = *(__n128 *)(v14 + 192);
          __n128 v399 = *(__n128 *)(v14 + 208);
          __n128 v436 = *(__n128 *)(v14 + 224);
          long long v290 = *v85;
          __n128 v327 = *(__n128 *)(v14 + 176);
          __n128 v103 = v87[1];
          __n128 v102 = v87[2];
          __n128 v104 = v87[4];
          *(__n128 *)(v14 + 208) = v87[3];
          *(__n128 *)(v14 + 224) = v104;
          *(__n128 *)(v14 + 176) = v103;
          *(__n128 *)(v14 + 192) = v102;
          long long *v85 = (__int128)*v87;
          __n128 *v87 = (__n128)v290;
          v87[3] = v399;
          v87[4] = v436;
          v87[1] = v327;
          v87[2] = v362;
          unsigned int v105 = *((_DWORD *)a3 - 3);
          unsigned int v106 = v13[v86];
          if (v105 < v106)
          {
            v13[v86] = v105;
            *((_DWORD *)a3 - 3) = v106;
            long long v291 = (__int128)*v87;
            long long v400 = (__int128)v87[3];
            long long v437 = (__int128)v87[4];
            long long v328 = (__int128)v87[1];
            long long v363 = (__int128)v87[2];
            __n128 v107 = (__n128)*(a4 - 11);
            __n128 v109 = (__n128)*(a4 - 14);
            __n128 v108 = (__n128)*(a4 - 13);
            v87[3] = (__n128)*(a4 - 12);
            v87[4] = v107;
            v87[1] = v109;
            v87[2] = v108;
            __n128 *v87 = (__n128)*v256;
            *(a4 - 12) = v400;
            *(a4 - 11) = v437;
            *(a4 - 14) = v328;
            *(a4 - 13) = v363;
            long long *v256 = v291;
          }
        }
        else
        {
          v13[2] = v90;
          *((_DWORD *)a3 - 3) = v89;
          long long v359 = *(_OWORD *)(v14 + 192);
          long long v396 = *(_OWORD *)(v14 + 208);
          long long v433 = *(_OWORD *)(v14 + 224);
          long long v287 = *v85;
          long long v324 = *(_OWORD *)(v14 + 176);
          long long v92 = *(a4 - 14);
          long long v91 = *(a4 - 13);
          long long v93 = *(a4 - 11);
          *(_OWORD *)(v14 + 208) = *(a4 - 12);
          *(_OWORD *)(v14 + 224) = v93;
          *(_OWORD *)(v14 + 176) = v92;
          *(_OWORD *)(v14 + 192) = v91;
          long long *v85 = *v256;
          long long *v256 = v287;
          *(a4 - 12) = v396;
          *(a4 - 11) = v433;
          *(a4 - 14) = v324;
          *(a4 - 13) = v359;
        }
        unsigned int v110 = v13[v17];
        unsigned int v111 = v13[v56];
        unsigned int v112 = v13[v86];
        if (v110 >= v111)
        {
          if (v112 < v110)
          {
            v13[v17] = v112;
            v13[v86] = v110;
            __n128 v293 = *v18;
            __n128 v402 = v18[3];
            __n128 v439 = v18[4];
            __n128 v330 = v18[1];
            __n128 v365 = v18[2];
            __n128 v116 = v87[4];
            __n128 v117 = v87[2];
            v18[3] = v87[3];
            v18[4] = v116;
            __n128 v118 = *v87;
            v18[1] = v87[1];
            v18[2] = v117;
            __n128 *v18 = v118;
            __n128 *v87 = v293;
            v87[3] = v402;
            v87[4] = v439;
            v87[1] = v330;
            v87[2] = v365;
            unsigned int v119 = v13[v17];
            unsigned int v120 = v13[v56];
            if (v119 < v120)
            {
              v13[v56] = v119;
              v13[v17] = v120;
              __n128 v294 = *v57;
              __n128 v403 = v57[3];
              __n128 v440 = v57[4];
              __n128 v331 = v57[1];
              __n128 v366 = v57[2];
              __n128 v121 = v18[4];
              __n128 v122 = v18[2];
              v57[3] = v18[3];
              v57[4] = v121;
              __n128 v123 = *v18;
              v57[1] = v18[1];
              v57[2] = v122;
              __n128 *v57 = v123;
              __n128 *v18 = v294;
              v18[3] = v403;
              v18[4] = v440;
              v18[1] = v331;
              v18[2] = v366;
            }
          }
          goto LABEL_50;
        }
        if (v112 >= v110)
        {
          v13[v56] = v110;
          v13[v17] = v111;
          __n128 v295 = *v57;
          __n128 v404 = v57[3];
          __n128 v441 = v57[4];
          __n128 v332 = v57[1];
          __n128 v367 = v57[2];
          __n128 v124 = v18[4];
          __n128 v125 = v18[2];
          v57[3] = v18[3];
          v57[4] = v124;
          __n128 v126 = *v18;
          v57[1] = v18[1];
          v57[2] = v125;
          __n128 *v57 = v126;
          __n128 *v18 = v295;
          v18[3] = v404;
          v18[4] = v441;
          v18[1] = v332;
          v18[2] = v367;
          unsigned int v127 = v13[v86];
          unsigned int v128 = v13[v17];
          if (v127 >= v128)
          {
LABEL_50:
            unsigned int v132 = *v13;
            unsigned int *v13 = v13[v22];
            v13[v22] = v132;
            __n128 v284 = *(__n128 *)v14;
            __n128 v393 = *(__n128 *)(v14 + 48);
            __n128 v430 = *(__n128 *)(v14 + 64);
            __n128 v321 = *(__n128 *)(v14 + 16);
            __n128 v356 = *(__n128 *)(v14 + 32);
            goto LABEL_51;
          }
          v13[v17] = v127;
          v13[v86] = v128;
          __n128 v292 = *v18;
          __n128 v401 = v18[3];
          __n128 v438 = v18[4];
          __n128 v329 = v18[1];
          __n128 v364 = v18[2];
          __n128 v129 = v87[4];
          __n128 v130 = v87[2];
          v18[3] = v87[3];
          v18[4] = v129;
          __n128 v131 = *v87;
          v18[1] = v87[1];
          v18[2] = v130;
          __n128 *v18 = v131;
        }
        else
        {
          v13[v56] = v112;
          v13[v86] = v111;
          __n128 v292 = *v57;
          __n128 v401 = v57[3];
          __n128 v438 = v57[4];
          __n128 v329 = v57[1];
          __n128 v364 = v57[2];
          __n128 v113 = v87[4];
          __n128 v114 = v87[2];
          v57[3] = v87[3];
          v57[4] = v113;
          __n128 v115 = *v87;
          v57[1] = v87[1];
          v57[2] = v114;
          __n128 *v57 = v115;
        }
        __n128 *v87 = v292;
        v87[3] = v401;
        v87[4] = v438;
        v87[1] = v329;
        v87[2] = v364;
        goto LABEL_50;
      }
      unsigned int v27 = *v13;
      unsigned int v28 = v13[v17];
      if (*v13 >= v28)
      {
        if (v19 < v27)
        {
          unsigned int *v13 = v19;
          *((_DWORD *)a3 - 1) = v27;
          __n128 v277 = *(__n128 *)v14;
          long long v386 = *(_OWORD *)(v14 + 48);
          long long v423 = *(_OWORD *)(v14 + 64);
          long long v314 = *(_OWORD *)(v14 + 16);
          long long v349 = *(_OWORD *)(v14 + 32);
          long long v40 = *(a4 - 1);
          long long v42 = *(a4 - 4);
          long long v41 = *(a4 - 3);
          *(_OWORD *)(v14 + 48) = *(a4 - 2);
          *(_OWORD *)(v14 + 64) = v40;
          *(_OWORD *)(v14 + 16) = v42;
          *(_OWORD *)(v14 + 32) = v41;
          *(__n128 *)uint64_t v14 = *v258;
          *(a4 - 2) = v386;
          *(a4 - 1) = v423;
          *(a4 - 4) = v314;
          *(a4 - 3) = v349;
          __n128 *v258 = v277;
          unsigned int v43 = v13[v17];
          if (*v13 < v43)
          {
            v13[v17] = *v13;
            unsigned int *v13 = v43;
            __n128 v278 = *v18;
            __n128 v387 = v18[3];
            __n128 v424 = v18[4];
            __n128 v315 = v18[1];
            __n128 v350 = v18[2];
            __n128 v44 = *(__n128 *)(v14 + 64);
            __n128 v46 = *(__n128 *)(v14 + 16);
            __n128 v45 = *(__n128 *)(v14 + 32);
            v18[3] = *(__n128 *)(v14 + 48);
            v18[4] = v44;
            v18[1] = v46;
            v18[2] = v45;
            __n128 *v18 = *(__n128 *)v14;
            *(__n128 *)(v14 + 48) = v387;
            *(__n128 *)(v14 + 64) = v424;
            *(__n128 *)(v14 + 16) = v315;
            *(__n128 *)(v14 + 32) = v350;
            *(__n128 *)uint64_t v14 = v278;
          }
        }
      }
      else if (v19 >= v27)
      {
        v13[v17] = v27;
        unsigned int *v13 = v28;
        __n128 v283 = *v18;
        __n128 v392 = v18[3];
        __n128 v429 = v18[4];
        __n128 v320 = v18[1];
        __n128 v355 = v18[2];
        __n128 v72 = *(__n128 *)(v14 + 64);
        __n128 v74 = *(__n128 *)(v14 + 16);
        __n128 v73 = *(__n128 *)(v14 + 32);
        v18[3] = *(__n128 *)(v14 + 48);
        v18[4] = v72;
        v18[1] = v74;
        v18[2] = v73;
        __n128 *v18 = *(__n128 *)v14;
        *(__n128 *)(v14 + 48) = v392;
        *(__n128 *)(v14 + 64) = v429;
        *(__n128 *)(v14 + 16) = v320;
        *(__n128 *)(v14 + 32) = v355;
        *(__n128 *)uint64_t v14 = v283;
        unsigned int v75 = *((_DWORD *)a3 - 1);
        unsigned int v76 = *v13;
        if (v75 < *v13)
        {
          unsigned int *v13 = v75;
          *((_DWORD *)a3 - 1) = v76;
          __n128 v284 = *(__n128 *)v14;
          __n128 v393 = *(__n128 *)(v14 + 48);
          __n128 v430 = *(__n128 *)(v14 + 64);
          __n128 v321 = *(__n128 *)(v14 + 16);
          __n128 v356 = *(__n128 *)(v14 + 32);
          v18 = (__n128 *)(a4 - 5);
LABEL_51:
          __n128 v133 = v18[4];
          __n128 v135 = v18[1];
          __n128 v134 = v18[2];
          *(__n128 *)(v14 + 48) = v18[3];
          *(__n128 *)(v14 + 64) = v133;
          *(__n128 *)(v14 + 16) = v135;
          *(__n128 *)(v14 + 32) = v134;
          *(__n128 *)uint64_t v14 = *v18;
          v18[3] = v393;
          v18[4] = v430;
          v18[1] = v321;
          v18[2] = v356;
          __n128 *v18 = v284;
        }
      }
      else
      {
        v13[v17] = v19;
        *((_DWORD *)a3 - 1) = v28;
        __n128 v274 = *v18;
        long long v383 = (__int128)v18[3];
        long long v420 = (__int128)v18[4];
        long long v311 = (__int128)v18[1];
        long long v346 = (__int128)v18[2];
        __n128 v29 = (__n128)*(a4 - 1);
        __n128 v31 = (__n128)*(a4 - 4);
        __n128 v30 = (__n128)*(a4 - 3);
        v18[3] = (__n128)*(a4 - 2);
        v18[4] = v29;
        v18[1] = v31;
        v18[2] = v30;
        __n128 *v18 = *v258;
        *(a4 - 2) = v383;
        *(a4 - 1) = v420;
        *(a4 - 4) = v311;
        *(a4 - 3) = v346;
        __n128 *v258 = v274;
      }
      --a6;
      unsigned int v136 = *v13;
      if ((a7 & 1) == 0 && *(v13 - 1) >= v136)
      {
        __n128 v307 = *(__n128 *)v14;
        long long v416 = *(_OWORD *)(v14 + 48);
        long long v453 = *(_OWORD *)(v14 + 64);
        __n128 v342 = *(__n128 *)(v14 + 16);
        long long v379 = *(_OWORD *)(v14 + 32);
        if (v136 < *((_DWORD *)a3 - 1))
        {
          v11 = v13;
          v12 = (long long *)v14;
          do
          {
            unsigned int v164 = v11[1];
            ++v11;
            v12 += 5;
          }
          while (v136 >= v164);
        }
        else
        {
          v165 = v13 + 1;
          v166 = (long long *)(v14 + 80);
          do
          {
            v11 = v165;
            v12 = v166;
            if (v165 >= (unsigned int *)a3) {
              break;
            }
            ++v165;
            v166 += 5;
          }
          while (v136 >= *v11);
        }
        v167 = a3;
        v168 = a4;
        if (v11 < (unsigned int *)a3)
        {
          v167 = a3;
          v168 = a4;
          do
          {
            unsigned int v169 = *((_DWORD *)v167 - 1);
            v167 -= 4;
            v168 -= 5;
          }
          while (v136 < v169);
        }
        if (v11 < (unsigned int *)v167)
        {
          unsigned int v170 = *v11;
          unsigned int v171 = *(_DWORD *)v167;
          do
          {
            unsigned int *v11 = v171;
            *(_DWORD *)v167 = v170;
            long long v264 = *v12;
            long long v270 = v12[3];
            long long v272 = v12[4];
            long long v266 = v12[1];
            long long v268 = v12[2];
            long long v172 = v168[4];
            long long v174 = v168[1];
            long long v173 = v168[2];
            v12[3] = v168[3];
            v12[4] = v172;
            v12[1] = v174;
            v12[2] = v173;
            long long *v12 = *v168;
            v168[3] = v270;
            v168[4] = v272;
            v168[1] = v266;
            v168[2] = v268;
            long long *v168 = v264;
            do
            {
              unsigned int v175 = v11[1];
              ++v11;
              unsigned int v170 = v175;
              v12 += 5;
            }
            while (v136 >= v175);
            do
            {
              unsigned int v176 = *((_DWORD *)v167 - 1);
              v167 -= 4;
              unsigned int v171 = v176;
              v168 -= 5;
            }
            while (v136 < v176);
          }
          while (v11 < (unsigned int *)v167);
        }
        v177 = v11 - 1;
        v178 = (__n128 *)(v12 - 5);
        BOOL v7 = v11 - 1 >= v13;
        BOOL v8 = v11 - 1 == v13;
        if (v11 - 1 != v13)
        {
          unsigned int *v13 = *v177;
          *(__n128 *)uint64_t v14 = *v178;
          long long v179 = *(v12 - 4);
          long long v180 = *(v12 - 3);
          long long v181 = *(v12 - 1);
          *(_OWORD *)(v14 + 48) = *(v12 - 2);
          *(_OWORD *)(v14 + 64) = v181;
          *(_OWORD *)(v14 + 16) = v179;
          *(_OWORD *)(v14 + 32) = v180;
        }
        a7 = 0;
        unsigned int *v177 = v136;
        __n128 *v178 = v307;
        __n128 result = v342;
        *(v12 - 2) = v416;
        *(v12 - 1) = v453;
        *(v12 - 4) = (__int128)v342;
        *(v12 - 3) = v379;
        goto LABEL_2;
      }
      uint64_t v137 = 0;
      v138 = v13;
      __n128 v306 = *(__n128 *)v14;
      long long v415 = *(_OWORD *)(v14 + 48);
      long long v452 = *(_OWORD *)(v14 + 64);
      long long v341 = *(_OWORD *)(v14 + 16);
      long long v378 = *(_OWORD *)(v14 + 32);
      v139 = (long long *)v14;
      do
      {
        v139 += 5;
        unsigned int v140 = v13[++v137];
      }
      while (v140 < v136);
      v141 = &v13[v137];
      v142 = a3;
      v143 = a4;
      if (v137 == 1)
      {
        v142 = a3;
        v143 = a4;
        do
        {
          if (v141 >= (unsigned int *)v142) {
            break;
          }
          unsigned int v145 = *((_DWORD *)v142 - 1);
          v142 -= 4;
          v143 -= 5;
        }
        while (v145 >= v136);
      }
      else
      {
        do
        {
          unsigned int v144 = *((_DWORD *)v142 - 1);
          v142 -= 4;
          v143 -= 5;
        }
        while (v144 >= v136);
      }
      if (v141 >= (unsigned int *)v142)
      {
        v154 = v141 - 1;
        v155 = v139 - 5;
        if (v141 - 1 == v13) {
          goto LABEL_72;
        }
LABEL_71:
        unsigned int *v13 = *v154;
        *(_OWORD *)uint64_t v14 = *v155;
        long long v156 = v155[1];
        long long v157 = v155[2];
        long long v158 = v155[4];
        *(_OWORD *)(v14 + 48) = v155[3];
        *(_OWORD *)(v14 + 64) = v158;
        *(_OWORD *)(v14 + 16) = v156;
        *(_OWORD *)(v14 + 32) = v157;
        goto LABEL_72;
      }
      unsigned int v146 = *(_DWORD *)v142;
      v147 = &v13[v137];
      v148 = (unsigned int *)v142;
      do
      {
        unsigned int *v147 = v146;
        unsigned int *v148 = v140;
        long long v267 = v139[2];
        long long v269 = v139[3];
        long long v271 = v139[4];
        long long v263 = *v139;
        long long v265 = v139[1];
        long long v150 = v143[1];
        long long v149 = v143[2];
        long long v151 = v143[4];
        v139[3] = v143[3];
        v139[4] = v151;
        v139[1] = v150;
        v139[2] = v149;
        long long *v139 = *v143;
        long long *v143 = v263;
        v143[3] = v269;
        v143[4] = v271;
        v143[1] = v265;
        v143[2] = v267;
        do
        {
          unsigned int v152 = v147[1];
          ++v147;
          unsigned int v140 = v152;
          v139 += 5;
        }
        while (v152 < v136);
        do
        {
          unsigned int v153 = *--v148;
          unsigned int v146 = v153;
          v143 -= 5;
        }
        while (v153 >= v136);
      }
      while (v147 < v148);
      v154 = v147 - 1;
      v155 = v139 - 5;
      if (v147 - 1 != v13) {
        goto LABEL_71;
      }
LABEL_72:
      unsigned int *v154 = v136;
      long long *v155 = (__int128)v306;
      v155[3] = v415;
      v155[4] = v452;
      v155[1] = v341;
      v155[2] = v378;
      uint64_t v159 = v14;
      if (v141 < (unsigned int *)v142) {
        goto LABEL_75;
      }
      v259 = v13;
      v160 = v13;
      uint64_t v161 = v14;
      BOOL v162 = sub_EC1D28(v13, v14, v154, (uint64_t)v155);
      v13 = v154 + 1;
      if (sub_EC1D28(v154 + 1, (uint64_t)(v155 + 5), (unsigned int *)a3, (uint64_t)a4)) {
        break;
      }
      uint64_t v14 = (uint64_t)(v155 + 5);
      v138 = v160;
      uint64_t v159 = v161;
      if (!v162)
      {
LABEL_75:
        sub_EC084C(v138, v159, v154, v155, a5, a6, a7 & 1);
        a7 = 0;
        v11 = v154 + 1;
        v12 = v155 + 5;
        goto LABEL_2;
      }
    }
    a3 = (char *)v154;
    a4 = v155;
    a2 = (long long *)v14;
    a1 = v259;
    if (!v162) {
      continue;
    }
    return result;
  }
}

BOOL sub_EC1D28(unsigned int *a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v7 = a3 - a1;
  BOOL result = 1;
  switch(v7)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned int v10 = *(a3 - 1);
      unsigned int v11 = *a1;
      if (v10 < *a1)
      {
        *a1 = v10;
        *(a3 - 1) = v11;
        long long v127 = *(_OWORD *)(a2 + 32);
        long long v142 = *(_OWORD *)(a2 + 48);
        long long v157 = *(_OWORD *)(a2 + 64);
        __n128 v97 = *(__n128 *)a2;
        long long v112 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a2 = *(_OWORD *)(a4 - 80);
        long long v12 = *(_OWORD *)(a4 - 16);
        long long v14 = *(_OWORD *)(a4 - 64);
        long long v13 = *(_OWORD *)(a4 - 48);
        *(_OWORD *)(a2 + 48) = *(_OWORD *)(a4 - 32);
        *(_OWORD *)(a2 + 64) = v12;
        *(_OWORD *)(a2 + 16) = v14;
        *(_OWORD *)(a2 + 32) = v13;
        *(_OWORD *)(a4 - 32) = v142;
        *(_OWORD *)(a4 - 16) = v157;
        *(__n128 *)(a4 - 80) = v97;
        *(_OWORD *)(a4 - 64) = v112;
        *(_OWORD *)(a4 - 48) = v127;
      }
      return result;
    case 3:
      long long v26 = (__n128 *)(a2 + 80);
      unsigned int v27 = (__n128 *)(a4 - 80);
      unsigned int v29 = *a1;
      unsigned int v28 = a1[1];
      unsigned int v30 = *(a3 - 1);
      if (v28 >= *a1)
      {
        if (v30 < v28)
        {
          a1[1] = v30;
          *(a3 - 1) = v28;
          long long v136 = *(_OWORD *)(a2 + 112);
          long long v151 = *(_OWORD *)(a2 + 128);
          long long v166 = *(_OWORD *)(a2 + 144);
          __n128 v106 = *v26;
          long long v121 = *(_OWORD *)(a2 + 96);
          *long long v26 = *v27;
          long long v62 = *(_OWORD *)(a4 - 16);
          long long v64 = *(_OWORD *)(a4 - 64);
          long long v63 = *(_OWORD *)(a4 - 48);
          *(_OWORD *)(a2 + 128) = *(_OWORD *)(a4 - 32);
          *(_OWORD *)(a2 + 144) = v62;
          *(_OWORD *)(a2 + 96) = v64;
          *(_OWORD *)(a2 + 112) = v63;
          *(_OWORD *)(a4 - 32) = v151;
          *(_OWORD *)(a4 - 16) = v166;
          *unsigned int v27 = v106;
          *(_OWORD *)(a4 - 64) = v121;
          *(_OWORD *)(a4 - 48) = v136;
          unsigned int v66 = *a1;
          unsigned int v65 = a1[1];
          if (v65 < *a1)
          {
            *a1 = v65;
            a1[1] = v66;
            long long v137 = *(_OWORD *)(a2 + 32);
            long long v152 = *(_OWORD *)(a2 + 48);
            long long v167 = *(_OWORD *)(a2 + 64);
            __n128 v107 = *(__n128 *)a2;
            long long v122 = *(_OWORD *)(a2 + 16);
            *(__n128 *)a2 = *v26;
            long long v67 = *(_OWORD *)(a2 + 144);
            long long v69 = *(_OWORD *)(a2 + 96);
            long long v68 = *(_OWORD *)(a2 + 112);
            *(_OWORD *)(a2 + 48) = *(_OWORD *)(a2 + 128);
            *(_OWORD *)(a2 + 64) = v67;
            *(_OWORD *)(a2 + 16) = v69;
            *(_OWORD *)(a2 + 32) = v68;
            *(_OWORD *)(a2 + 128) = v152;
            *(_OWORD *)(a2 + 144) = v167;
            *long long v26 = v107;
            *(_OWORD *)(a2 + 96) = v122;
            *(_OWORD *)(a2 + 112) = v137;
          }
        }
      }
      else
      {
        if (v30 >= v28)
        {
          *a1 = v28;
          a1[1] = v29;
          long long v140 = *(_OWORD *)(a2 + 32);
          long long v155 = *(_OWORD *)(a2 + 48);
          long long v170 = *(_OWORD *)(a2 + 64);
          __n128 v110 = *(__n128 *)a2;
          long long v125 = *(_OWORD *)(a2 + 16);
          *(__n128 *)a2 = *v26;
          long long v89 = *(_OWORD *)(a2 + 144);
          long long v91 = *(_OWORD *)(a2 + 96);
          long long v90 = *(_OWORD *)(a2 + 112);
          *(_OWORD *)(a2 + 48) = *(_OWORD *)(a2 + 128);
          *(_OWORD *)(a2 + 64) = v89;
          *(_OWORD *)(a2 + 16) = v91;
          *(_OWORD *)(a2 + 32) = v90;
          *(_OWORD *)(a2 + 128) = v155;
          *(_OWORD *)(a2 + 144) = v170;
          *long long v26 = v110;
          *(_OWORD *)(a2 + 96) = v125;
          *(_OWORD *)(a2 + 112) = v140;
          unsigned int v92 = *(a3 - 1);
          unsigned int v93 = a1[1];
          if (v92 >= v93) {
            return result;
          }
          a1[1] = v92;
          *(a3 - 1) = v93;
          long long v129 = *(_OWORD *)(a2 + 112);
          long long v144 = *(_OWORD *)(a2 + 128);
          long long v159 = *(_OWORD *)(a2 + 144);
          __n128 v99 = *v26;
          long long v114 = *(_OWORD *)(a2 + 96);
          *long long v26 = *v27;
          long long v94 = *(_OWORD *)(a4 - 16);
          long long v96 = *(_OWORD *)(a4 - 64);
          long long v95 = *(_OWORD *)(a4 - 48);
          *(_OWORD *)(a2 + 128) = *(_OWORD *)(a4 - 32);
          *(_OWORD *)(a2 + 144) = v94;
          *(_OWORD *)(a2 + 96) = v96;
          *(_OWORD *)(a2 + 112) = v95;
        }
        else
        {
          *a1 = v30;
          *(a3 - 1) = v29;
          long long v129 = *(_OWORD *)(a2 + 32);
          long long v144 = *(_OWORD *)(a2 + 48);
          long long v159 = *(_OWORD *)(a2 + 64);
          __n128 v99 = *(__n128 *)a2;
          long long v114 = *(_OWORD *)(a2 + 16);
          *(__n128 *)a2 = *v27;
          long long v31 = *(_OWORD *)(a4 - 16);
          long long v33 = *(_OWORD *)(a4 - 64);
          long long v32 = *(_OWORD *)(a4 - 48);
          *(_OWORD *)(a2 + 48) = *(_OWORD *)(a4 - 32);
          *(_OWORD *)(a2 + 64) = v31;
          *(_OWORD *)(a2 + 16) = v33;
          *(_OWORD *)(a2 + 32) = v32;
        }
        *(_OWORD *)(a4 - 32) = v144;
        *(_OWORD *)(a4 - 16) = v159;
        *unsigned int v27 = v99;
        *(_OWORD *)(a4 - 64) = v114;
        *(_OWORD *)(a4 - 48) = v129;
      }
      return result;
    case 4:
      sub_EC24C8(a1, (__n128 *)a2, a1 + 1, (__n128 *)(a2 + 80), a1 + 2, (__n128 *)(a2 + 160), a3 - 1, (__n128 *)(a4 - 80));
      return 1;
    case 5:
      __n128 v34 = (__n128 *)(a2 + 80);
      unsigned int v35 = a1 + 2;
      unsigned int v36 = (__n128 *)(a2 + 160);
      __n128 v37 = a1 + 3;
      __n128 v38 = (__n128 *)(a2 + 240);
      sub_EC24C8(a1, (__n128 *)a2, a1 + 1, (__n128 *)(a2 + 80), a1 + 2, (__n128 *)(a2 + 160), a1 + 3, (__n128 *)(a2 + 240));
      unsigned int v39 = *(a3 - 1);
      unsigned int v40 = a1[3];
      if (v39 >= v40) {
        return 1;
      }
      *__n128 v37 = v39;
      *(a3 - 1) = v40;
      long long v130 = *(_OWORD *)(a2 + 272);
      long long v145 = *(_OWORD *)(a2 + 288);
      long long v160 = *(_OWORD *)(a2 + 304);
      __n128 v100 = *v38;
      long long v115 = *(_OWORD *)(a2 + 256);
      *__n128 v38 = *(__n128 *)(a4 - 80);
      long long v41 = *(_OWORD *)(a4 - 16);
      long long v43 = *(_OWORD *)(a4 - 64);
      long long v42 = *(_OWORD *)(a4 - 48);
      *(_OWORD *)(a2 + 288) = *(_OWORD *)(a4 - 32);
      *(_OWORD *)(a2 + 304) = v41;
      *(_OWORD *)(a2 + 256) = v43;
      *(_OWORD *)(a2 + 272) = v42;
      *(_OWORD *)(a4 - 32) = v145;
      *(_OWORD *)(a4 - 16) = v160;
      *(__n128 *)(a4 - 80) = v100;
      *(_OWORD *)(a4 - 64) = v115;
      *(_OWORD *)(a4 - 48) = v130;
      unsigned int v44 = *v35;
      if (*v37 >= *v35) {
        return 1;
      }
      *unsigned int v35 = *v37;
      *__n128 v37 = v44;
      long long v131 = *(_OWORD *)(a2 + 192);
      long long v146 = *(_OWORD *)(a2 + 208);
      long long v161 = *(_OWORD *)(a2 + 224);
      __n128 v101 = *v36;
      long long v116 = *(_OWORD *)(a2 + 176);
      long long v45 = *(_OWORD *)(a2 + 288);
      *(_OWORD *)(a2 + 192) = *(_OWORD *)(a2 + 272);
      *(_OWORD *)(a2 + 208) = v45;
      *(_OWORD *)(a2 + 224) = *(_OWORD *)(a2 + 304);
      long long v46 = *(_OWORD *)(a2 + 256);
      *unsigned int v36 = *v38;
      *(_OWORD *)(a2 + 176) = v46;
      *(_OWORD *)(a2 + 288) = v146;
      *(_OWORD *)(a2 + 304) = v161;
      *(_OWORD *)(a2 + 256) = v116;
      *(_OWORD *)(a2 + 272) = v131;
      *__n128 v38 = v101;
      unsigned int v47 = a1[1];
      if (*v35 >= v47) {
        return 1;
      }
      a1[1] = *v35;
      a1[2] = v47;
      long long v132 = *(_OWORD *)(a2 + 112);
      long long v147 = *(_OWORD *)(a2 + 128);
      long long v162 = *(_OWORD *)(a2 + 144);
      __n128 v102 = *v34;
      long long v117 = *(_OWORD *)(a2 + 96);
      long long v48 = *(_OWORD *)(a2 + 208);
      *(_OWORD *)(a2 + 112) = *(_OWORD *)(a2 + 192);
      *(_OWORD *)(a2 + 128) = v48;
      *(_OWORD *)(a2 + 144) = *(_OWORD *)(a2 + 224);
      long long v49 = *(_OWORD *)(a2 + 176);
      *__n128 v34 = *v36;
      *(_OWORD *)(a2 + 96) = v49;
      *(_OWORD *)(a2 + 208) = v147;
      *(_OWORD *)(a2 + 224) = v162;
      *(_OWORD *)(a2 + 176) = v117;
      *(_OWORD *)(a2 + 192) = v132;
      *unsigned int v36 = v102;
      unsigned int v51 = *a1;
      unsigned int v50 = a1[1];
      if (v50 >= *a1) {
        return 1;
      }
      *a1 = v50;
      a1[1] = v51;
      long long v133 = *(_OWORD *)(a2 + 32);
      long long v148 = *(_OWORD *)(a2 + 48);
      long long v163 = *(_OWORD *)(a2 + 64);
      __n128 v103 = *(__n128 *)a2;
      long long v118 = *(_OWORD *)(a2 + 16);
      *(__n128 *)a2 = *v34;
      long long v52 = *(_OWORD *)(a2 + 144);
      long long v54 = *(_OWORD *)(a2 + 96);
      long long v53 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a2 + 48) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a2 + 64) = v52;
      *(_OWORD *)(a2 + 16) = v54;
      *(_OWORD *)(a2 + 32) = v53;
      *(_OWORD *)(a2 + 128) = v148;
      *(_OWORD *)(a2 + 144) = v163;
      BOOL result = 1;
      *__n128 v34 = v103;
      *(_OWORD *)(a2 + 96) = v118;
      *(_OWORD *)(a2 + 112) = v133;
      return result;
    default:
      uint64_t v15 = a1 + 2;
      unsigned int v16 = a1[2];
      unint64_t v17 = (__n128 *)(a2 + 160);
      v18 = (__n128 *)(a2 + 80);
      unsigned int v20 = *a1;
      unsigned int v19 = a1[1];
      if (v19 >= *a1)
      {
        if (v16 < v19)
        {
          a1[1] = v16;
          a1[2] = v19;
          long long v134 = *(_OWORD *)(a2 + 112);
          long long v149 = *(_OWORD *)(a2 + 128);
          long long v164 = *(_OWORD *)(a2 + 144);
          __n128 v104 = *v18;
          long long v119 = *(_OWORD *)(a2 + 96);
          long long v55 = *(_OWORD *)(a2 + 208);
          *(_OWORD *)(a2 + 112) = *(_OWORD *)(a2 + 192);
          *(_OWORD *)(a2 + 128) = v55;
          *(_OWORD *)(a2 + 144) = *(_OWORD *)(a2 + 224);
          long long v56 = *(_OWORD *)(a2 + 176);
          __n128 *v18 = *v17;
          *(_OWORD *)(a2 + 96) = v56;
          *(_OWORD *)(a2 + 208) = v149;
          *(_OWORD *)(a2 + 224) = v164;
          *(_OWORD *)(a2 + 176) = v119;
          *(_OWORD *)(a2 + 192) = v134;
          *unint64_t v17 = v104;
          unsigned int v58 = *a1;
          unsigned int v57 = a1[1];
          if (v57 < *a1)
          {
            *a1 = v57;
            a1[1] = v58;
            long long v135 = *(_OWORD *)(a2 + 32);
            long long v150 = *(_OWORD *)(a2 + 48);
            long long v165 = *(_OWORD *)(a2 + 64);
            __n128 v105 = *(__n128 *)a2;
            long long v120 = *(_OWORD *)(a2 + 16);
            *(__n128 *)a2 = *v18;
            long long v59 = *(_OWORD *)(a2 + 144);
            long long v61 = *(_OWORD *)(a2 + 96);
            long long v60 = *(_OWORD *)(a2 + 112);
            *(_OWORD *)(a2 + 48) = *(_OWORD *)(a2 + 128);
            *(_OWORD *)(a2 + 64) = v59;
            *(_OWORD *)(a2 + 16) = v61;
            *(_OWORD *)(a2 + 32) = v60;
            *(_OWORD *)(a2 + 128) = v150;
            *(_OWORD *)(a2 + 144) = v165;
            __n128 *v18 = v105;
            *(_OWORD *)(a2 + 96) = v120;
            *(_OWORD *)(a2 + 112) = v135;
          }
        }
      }
      else
      {
        if (v16 >= v19)
        {
          *a1 = v19;
          a1[1] = v20;
          long long v138 = *(_OWORD *)(a2 + 32);
          long long v153 = *(_OWORD *)(a2 + 48);
          long long v168 = *(_OWORD *)(a2 + 64);
          __n128 v108 = *(__n128 *)a2;
          long long v123 = *(_OWORD *)(a2 + 16);
          *(__n128 *)a2 = *v18;
          long long v70 = *(_OWORD *)(a2 + 144);
          long long v72 = *(_OWORD *)(a2 + 96);
          long long v71 = *(_OWORD *)(a2 + 112);
          *(_OWORD *)(a2 + 48) = *(_OWORD *)(a2 + 128);
          *(_OWORD *)(a2 + 64) = v70;
          *(_OWORD *)(a2 + 16) = v72;
          *(_OWORD *)(a2 + 32) = v71;
          *(_OWORD *)(a2 + 128) = v153;
          *(_OWORD *)(a2 + 144) = v168;
          __n128 *v18 = v108;
          *(_OWORD *)(a2 + 96) = v123;
          *(_OWORD *)(a2 + 112) = v138;
          unsigned int v74 = a1[1];
          unsigned int v73 = a1[2];
          if (v73 >= v74) {
            goto LABEL_25;
          }
          a1[1] = v73;
          a1[2] = v74;
          long long v139 = *(_OWORD *)(a2 + 112);
          long long v154 = *(_OWORD *)(a2 + 128);
          long long v169 = *(_OWORD *)(a2 + 144);
          __n128 v109 = *v18;
          long long v124 = *(_OWORD *)(a2 + 96);
          long long v75 = *(_OWORD *)(a2 + 208);
          *(_OWORD *)(a2 + 112) = *(_OWORD *)(a2 + 192);
          *(_OWORD *)(a2 + 128) = v75;
          *(_OWORD *)(a2 + 144) = *(_OWORD *)(a2 + 224);
          long long v76 = *(_OWORD *)(a2 + 176);
          __n128 *v18 = *v17;
          *(_OWORD *)(a2 + 96) = v76;
          __n128 v24 = v109;
          long long v25 = v124;
          *(_OWORD *)(a2 + 208) = v154;
          *(_OWORD *)(a2 + 224) = v169;
          *(_OWORD *)(a2 + 192) = v139;
        }
        else
        {
          *a1 = v16;
          a1[2] = v20;
          long long v128 = *(_OWORD *)(a2 + 32);
          long long v143 = *(_OWORD *)(a2 + 48);
          long long v158 = *(_OWORD *)(a2 + 64);
          __n128 v98 = *(__n128 *)a2;
          long long v113 = *(_OWORD *)(a2 + 16);
          *(__n128 *)a2 = *v17;
          long long v21 = *(_OWORD *)(a2 + 224);
          long long v23 = *(_OWORD *)(a2 + 176);
          long long v22 = *(_OWORD *)(a2 + 192);
          *(_OWORD *)(a2 + 48) = *(_OWORD *)(a2 + 208);
          *(_OWORD *)(a2 + 64) = v21;
          *(_OWORD *)(a2 + 16) = v23;
          *(_OWORD *)(a2 + 32) = v22;
          *(_OWORD *)(a2 + 208) = v143;
          *(_OWORD *)(a2 + 224) = v158;
          *(_OWORD *)(a2 + 192) = v128;
          __n128 v24 = v98;
          long long v25 = v113;
        }
        *unint64_t v17 = v24;
        *(_OWORD *)(a2 + 176) = v25;
      }
LABEL_25:
      __n128 v77 = a1 + 3;
      if (a1 + 3 == a3) {
        return 1;
      }
      int v78 = 0;
      __n128 v79 = (__n128 *)(a2 + 240);
      uint64_t v80 = 12;
      break;
  }
  while (1)
  {
    unsigned int v82 = *v77;
    if (*v77 < *v15)
    {
      __n128 v156 = v79[3];
      __n128 v171 = v79[4];
      __n128 v111 = *v79;
      __n128 v126 = v79[1];
      __n128 v141 = v79[2];
      unsigned int v83 = *v15;
      uint64_t v84 = v80;
      do
      {
        *(unsigned int *)((char *)a1 + v84) = v83;
        v85 = v17;
        __n128 v86 = v17[3];
        v17[7] = v17[2];
        v17[8] = v86;
        v17[9] = v17[4];
        __n128 v87 = v17[1];
        v17[5] = *v17;
        v17[6] = v87;
        uint64_t v88 = v84 - 4;
        if (v84 == 4)
        {
          unsigned int v81 = a1;
          goto LABEL_28;
        }
        v17 -= 5;
        unsigned int v83 = *(unsigned int *)((char *)a1 + v84 - 8);
        v84 -= 4;
      }
      while (v82 < v83);
      unsigned int v81 = (unsigned int *)((char *)a1 + v88);
LABEL_28:
      *unsigned int v81 = v82;
      __n128 *v85 = v111;
      v85[3] = v156;
      v85[4] = v171;
      v85[1] = v126;
      v85[2] = v141;
      if (++v78 == 8) {
        return v77 + 1 == a3;
      }
    }
    uint64_t v15 = v77;
    unint64_t v17 = v79;
    v79 += 5;
    v80 += 4;
    if (++v77 == a3) {
      return 1;
    }
  }
}

__n128 sub_EC24C8(unsigned int *a1, __n128 *a2, unsigned int *a3, __n128 *a4, unsigned int *a5, __n128 *a6, unsigned int *a7, __n128 *a8)
{
  unsigned int v8 = *a3;
  unsigned int v9 = *a1;
  unsigned int v10 = *a5;
  if (*a3 >= *a1)
  {
    if (v10 < v8)
    {
      *a3 = v10;
      *a5 = v8;
      __n128 v56 = a4[2];
      __n128 v63 = a4[3];
      __n128 v70 = a4[4];
      __n128 v42 = *a4;
      __n128 v49 = a4[1];
      *a4 = *a6;
      __n128 v14 = a6[4];
      __n128 v16 = a6[1];
      __n128 v15 = a6[2];
      a4[3] = a6[3];
      a4[4] = v14;
      a4[1] = v16;
      a4[2] = v15;
      a6[3] = v63;
      a6[4] = v70;
      __n128 result = v42;
      *a6 = v42;
      a6[1] = v49;
      a6[2] = v56;
      unsigned int v18 = *a1;
      if (*a3 < *a1)
      {
        *a1 = *a3;
        *a3 = v18;
        __n128 v57 = a2[2];
        __n128 v64 = a2[3];
        __n128 v71 = a2[4];
        __n128 v43 = *a2;
        __n128 v50 = a2[1];
        *a2 = *a4;
        __n128 v19 = a4[4];
        __n128 v21 = a4[1];
        __n128 v20 = a4[2];
        a2[3] = a4[3];
        a2[4] = v19;
        a2[1] = v21;
        a2[2] = v20;
        a4[3] = v64;
        a4[4] = v71;
        __n128 result = v43;
        *a4 = v43;
        a4[1] = v50;
        a4[2] = v57;
      }
    }
  }
  else
  {
    if (v10 < v8)
    {
      *a1 = v10;
      *a5 = v9;
      __n128 v55 = a2[2];
      __n128 v62 = a2[3];
      __n128 v69 = a2[4];
      __n128 v41 = *a2;
      __n128 v48 = a2[1];
      *a2 = *a6;
      __n128 v11 = a6[4];
      __n128 v13 = a6[1];
      __n128 v12 = a6[2];
      a2[3] = a6[3];
      a2[4] = v11;
      a2[1] = v13;
      a2[2] = v12;
LABEL_9:
      a6[3] = v62;
      a6[4] = v69;
      __n128 result = v41;
      *a6 = v41;
      a6[1] = v48;
      a6[2] = v55;
      goto LABEL_10;
    }
    *a1 = v8;
    *a3 = v9;
    __n128 v58 = a2[2];
    __n128 v65 = a2[3];
    __n128 v72 = a2[4];
    __n128 v44 = *a2;
    __n128 v51 = a2[1];
    *a2 = *a4;
    __n128 v22 = a4[4];
    __n128 v24 = a4[1];
    __n128 v23 = a4[2];
    a2[3] = a4[3];
    a2[4] = v22;
    a2[1] = v24;
    a2[2] = v23;
    a4[3] = v65;
    a4[4] = v72;
    __n128 result = v44;
    *a4 = v44;
    a4[1] = v51;
    a4[2] = v58;
    unsigned int v25 = *a3;
    if (*a5 < *a3)
    {
      *a3 = *a5;
      *a5 = v25;
      __n128 v55 = a4[2];
      __n128 v62 = a4[3];
      __n128 v69 = a4[4];
      __n128 v41 = *a4;
      __n128 v48 = a4[1];
      *a4 = *a6;
      __n128 v26 = a6[4];
      __n128 v28 = a6[1];
      __n128 v27 = a6[2];
      a4[3] = a6[3];
      a4[4] = v26;
      a4[1] = v28;
      a4[2] = v27;
      goto LABEL_9;
    }
  }
LABEL_10:
  unsigned int v29 = *a5;
  if (*a7 < *a5)
  {
    *a5 = *a7;
    *a7 = v29;
    __n128 v59 = a6[2];
    __n128 v66 = a6[3];
    __n128 v73 = a6[4];
    __n128 v45 = *a6;
    __n128 v52 = a6[1];
    *a6 = *a8;
    __n128 v30 = a8[4];
    __n128 v32 = a8[1];
    __n128 v31 = a8[2];
    a6[3] = a8[3];
    a6[4] = v30;
    a6[1] = v32;
    a6[2] = v31;
    a8[3] = v66;
    a8[4] = v73;
    __n128 result = v45;
    *a8 = v45;
    a8[1] = v52;
    a8[2] = v59;
    unsigned int v33 = *a3;
    if (*a5 < *a3)
    {
      *a3 = *a5;
      *a5 = v33;
      __n128 v60 = a4[2];
      __n128 v67 = a4[3];
      __n128 v74 = a4[4];
      __n128 v46 = *a4;
      __n128 v53 = a4[1];
      *a4 = *a6;
      __n128 v34 = a6[4];
      __n128 v36 = a6[1];
      __n128 v35 = a6[2];
      a4[3] = a6[3];
      a4[4] = v34;
      a4[1] = v36;
      a4[2] = v35;
      a6[3] = v67;
      a6[4] = v74;
      __n128 result = v46;
      *a6 = v46;
      a6[1] = v53;
      a6[2] = v60;
      unsigned int v37 = *a1;
      if (*a3 < *a1)
      {
        *a1 = *a3;
        *a3 = v37;
        __n128 v61 = a2[2];
        __n128 v68 = a2[3];
        __n128 v75 = a2[4];
        __n128 v47 = *a2;
        __n128 v54 = a2[1];
        *a2 = *a4;
        __n128 v38 = a4[4];
        __n128 v40 = a4[1];
        __n128 v39 = a4[2];
        a2[3] = a4[3];
        a2[4] = v38;
        a2[1] = v40;
        a2[2] = v39;
        a4[3] = v68;
        a4[4] = v75;
        __n128 result = v47;
        *a4 = v47;
        a4[1] = v54;
        a4[2] = v61;
      }
    }
  }
  return result;
}

char *sub_EC27B8(char *a1, long long *a2, char *a3, long long *a4, char *a5)
{
  if (a1 == a3) {
    return a5;
  }
  uint64_t v5 = a3 - a1;
  uint64_t v6 = (a3 - a1) >> 2;
  if (a3 - a1 >= 5 && (unint64_t)v5 >= 8)
  {
    int64_t v62 = (unint64_t)(v6 - 2) >> 1;
    int64_t v63 = v62;
    do
    {
      uint64_t v64 = 4 * v63;
      if (v62 >= (4 * v63) >> 2)
      {
        uint64_t v65 = (v64 >> 1) | 1;
        __n128 v66 = &a1[4 * v65];
        __n128 v67 = &a2[5 * v65];
        if ((v64 >> 1) + 2 < v6)
        {
          unsigned int v68 = *((_DWORD *)v66 + 1);
          unsigned int v69 = *(_DWORD *)v66;
          if (*(_DWORD *)v66 < v68)
          {
            v66 += 4;
            v67 += 5;
          }
          if (v69 < v68) {
            uint64_t v65 = (v64 >> 1) + 2;
          }
        }
        __n128 v70 = &a1[v64];
        unsigned int v71 = *(_DWORD *)v66;
        unsigned int v72 = *(_DWORD *)&a1[4 * v63];
        if (*(_DWORD *)v66 >= v72)
        {
          __n128 v73 = &a2[5 * v63];
          long long v100 = v73[2];
          long long v105 = v73[3];
          long long v110 = v73[4];
          long long v90 = *v73;
          long long v95 = v73[1];
          while (1)
          {
            long long v76 = v73;
            __n128 v73 = v67;
            *(_DWORD *)__n128 v70 = v71;
            __n128 v70 = v66;
            *long long v76 = *v67;
            long long v77 = v67[1];
            long long v78 = v67[2];
            long long v79 = v67[4];
            v76[3] = v67[3];
            v76[4] = v79;
            v76[1] = v77;
            v76[2] = v78;
            if (v62 < v65) {
              break;
            }
            uint64_t v80 = (2 * v65) | 1;
            __n128 v66 = &a1[4 * v80];
            __n128 v67 = &a2[5 * v80];
            uint64_t v65 = 2 * v65 + 2;
            if (v65 < v6)
            {
              unsigned int v74 = *((_DWORD *)v66 + 1);
              unsigned int v75 = *(_DWORD *)v66;
              if (*(_DWORD *)v66 < v74)
              {
                v66 += 4;
                v67 += 5;
              }
              if (v75 >= v74) {
                uint64_t v65 = v80;
              }
              unsigned int v71 = *(_DWORD *)v66;
              if (*(_DWORD *)v66 < v72) {
                break;
              }
            }
            else
            {
              uint64_t v65 = v80;
              unsigned int v71 = *(_DWORD *)v66;
              if (*(_DWORD *)v66 < v72) {
                break;
              }
            }
          }
          *(_DWORD *)__n128 v70 = v72;
          *__n128 v73 = v90;
          v73[3] = v105;
          v73[4] = v110;
          v73[1] = v95;
          v73[2] = v100;
        }
      }
      BOOL v14 = v63-- <= 0;
    }
    while (!v14);
  }
  if (a3 != a5)
  {
    if (v5 < 8)
    {
      uint64_t v7 = a4;
      unsigned int v8 = a3;
      do
      {
        int v9 = *(_DWORD *)v8;
        if (*(_DWORD *)v8 < *(_DWORD *)a1)
        {
          *(_DWORD *)unsigned int v8 = *(_DWORD *)a1;
          *(_DWORD *)a1 = v9;
          long long v101 = v7[3];
          long long v106 = v7[4];
          long long v91 = v7[1];
          long long v96 = v7[2];
          long long v86 = *v7;
          *uint64_t v7 = *a2;
          long long v10 = a2[4];
          long long v12 = a2[1];
          long long v11 = a2[2];
          v7[3] = a2[3];
          v7[4] = v10;
          v7[1] = v12;
          v7[2] = v11;
          a2[3] = v101;
          a2[4] = v106;
          a2[1] = v91;
          a2[2] = v96;
          *a2 = v86;
        }
        v8 += 4;
        v7 += 5;
      }
      while (v8 != a5);
      goto LABEL_11;
    }
    __n128 v40 = (int *)(a1 + 4);
    __n128 v41 = (int *)(a1 + 8);
    __n128 v42 = a4;
    __n128 v43 = a3;
    while (1)
    {
      int v44 = *(_DWORD *)v43;
      if (*(_DWORD *)v43 < *(_DWORD *)a1)
      {
        *(_DWORD *)__n128 v43 = *(_DWORD *)a1;
        *(_DWORD *)a1 = v44;
        long long v102 = v42[3];
        long long v107 = v42[4];
        long long v92 = v42[1];
        long long v97 = v42[2];
        long long v87 = *v42;
        *__n128 v42 = *a2;
        long long v45 = a2[4];
        long long v47 = a2[1];
        long long v46 = a2[2];
        v42[3] = a2[3];
        v42[4] = v45;
        v42[1] = v47;
        v42[2] = v46;
        a2[3] = v102;
        a2[4] = v107;
        a2[1] = v92;
        a2[2] = v97;
        *a2 = v87;
        if (v5 == 8 || *v40 >= *v41)
        {
          __n128 v48 = a1 + 4;
          __n128 v49 = a2 + 5;
          uint64_t v50 = 1;
          unsigned int v51 = *v40;
          unsigned int v52 = *(_DWORD *)a1;
          if (*v40 >= *(_DWORD *)a1)
          {
LABEL_40:
            long long v99 = a2[2];
            long long v104 = a2[3];
            long long v109 = a2[4];
            long long v89 = *a2;
            long long v94 = a2[1];
            __n128 v53 = a1;
            __n128 v54 = a2;
            while (1)
            {
              __n128 v57 = v54;
              __n128 v54 = v49;
              *(_DWORD *)__n128 v53 = v51;
              __n128 v53 = v48;
              long long *v57 = *v49;
              long long v58 = v49[1];
              long long v59 = v49[2];
              long long v60 = v49[4];
              v57[3] = v49[3];
              v57[4] = v60;
              v57[1] = v58;
              v57[2] = v59;
              if ((uint64_t)((unint64_t)(v6 - 2) >> 1) < v50) {
                break;
              }
              uint64_t v61 = (2 * v50) | 1;
              __n128 v48 = &a1[4 * v61];
              __n128 v49 = &a2[5 * v61];
              uint64_t v50 = 2 * v50 + 2;
              if (v50 < v6)
              {
                unsigned int v55 = *((_DWORD *)v48 + 1);
                unsigned int v56 = *(_DWORD *)v48;
                if (*(_DWORD *)v48 < v55)
                {
                  v48 += 4;
                  v49 += 5;
                }
                if (v56 >= v55) {
                  uint64_t v50 = v61;
                }
                unsigned int v51 = *(_DWORD *)v48;
                if (*(_DWORD *)v48 < v52) {
                  break;
                }
              }
              else
              {
                uint64_t v50 = v61;
                unsigned int v51 = *(_DWORD *)v48;
                if (*(_DWORD *)v48 < v52) {
                  break;
                }
              }
            }
            *(_DWORD *)__n128 v53 = v52;
            *__n128 v54 = v89;
            v54[3] = v104;
            v54[4] = v109;
            v54[1] = v94;
            v54[2] = v99;
          }
        }
        else
        {
          __n128 v48 = a1 + 8;
          __n128 v49 = a2 + 10;
          uint64_t v50 = 2;
          unsigned int v51 = *v41;
          unsigned int v52 = *(_DWORD *)a1;
          if (*v41 >= *(_DWORD *)a1) {
            goto LABEL_40;
          }
        }
      }
      v43 += 4;
      v42 += 5;
      if (v43 == a5) {
        goto LABEL_11;
      }
    }
  }
  a5 = a3;
LABEL_11:
  if (v5 >= 5)
  {
    uint64_t v13 = (unint64_t)v5 >> 2;
    do
    {
      uint64_t v15 = 0;
      unsigned int v16 = *(_DWORD *)a1;
      long long v83 = a2[2];
      long long v84 = a2[3];
      long long v85 = a2[4];
      unint64_t v17 = a1;
      unsigned int v18 = a2;
      long long v81 = *a2;
      long long v82 = a2[1];
      do
      {
        __n128 v21 = &v17[4 * v15 + 4];
        __n128 v22 = &v18[5 * v15 + 5];
        uint64_t v26 = (2 * v15) | 1;
        uint64_t v15 = 2 * v15 + 2;
        if (v15 < v13)
        {
          unsigned int v19 = *((_DWORD *)v21 + 1);
          unsigned int v20 = *(_DWORD *)v21;
          if (*(_DWORD *)v21 < v19)
          {
            v21 += 4;
            v22 += 5;
          }
          if (v20 >= v19) {
            uint64_t v15 = v26;
          }
        }
        else
        {
          uint64_t v15 = v26;
        }
        *(_DWORD *)unint64_t v17 = *(_DWORD *)v21;
        long long *v18 = *v22;
        long long v23 = v22[1];
        long long v24 = v22[2];
        long long v25 = v22[4];
        v18[3] = v22[3];
        v18[4] = v25;
        v18[1] = v23;
        v18[2] = v24;
        unint64_t v17 = v21;
        unsigned int v18 = v22;
      }
      while (v15 <= (uint64_t)((unint64_t)(v13 - 2) >> 1));
      a3 -= 4;
      if (v21 == a3)
      {
        *(_DWORD *)__n128 v21 = v16;
        *__n128 v22 = v81;
        v22[3] = v84;
        v22[4] = v85;
        v22[1] = v82;
        v22[2] = v83;
      }
      else
      {
        *(_DWORD *)__n128 v21 = *(_DWORD *)a3;
        *__n128 v22 = *(a4 - 5);
        long long v27 = *(a4 - 4);
        long long v28 = *(a4 - 3);
        long long v29 = *(a4 - 1);
        v22[3] = *(a4 - 2);
        v22[4] = v29;
        v22[1] = v27;
        v22[2] = v28;
        *(_DWORD *)a3 = v16;
        *(a4 - 3) = v83;
        *(a4 - 2) = v84;
        *(a4 - 1) = v85;
        *(a4 - 5) = v81;
        *(a4 - 4) = v82;
        uint64_t v30 = v21 - a1 + 4;
        if (v30 >= 5)
        {
          unint64_t v31 = (((unint64_t)v30 >> 2) - 2) >> 1;
          __n128 v32 = &a1[4 * v31];
          int v33 = *(_DWORD *)v32;
          unsigned int v34 = *(_DWORD *)v21;
          if (*(_DWORD *)v32 < *(_DWORD *)v21)
          {
            long long v88 = *v22;
            long long v103 = v22[3];
            long long v108 = v22[4];
            long long v93 = v22[1];
            long long v98 = v22[2];
            do
            {
              __n128 v35 = v22;
              *(_DWORD *)__n128 v21 = v33;
              __n128 v21 = v32;
              __n128 v22 = &a2[5 * v31];
              *__n128 v35 = *v22;
              long long v36 = v22[1];
              long long v37 = v22[2];
              long long v38 = v22[4];
              v35[3] = v22[3];
              v35[4] = v38;
              v35[1] = v36;
              v35[2] = v37;
              if (!v31) {
                break;
              }
              unint64_t v31 = (v31 - 1) >> 1;
              __n128 v32 = &a1[4 * v31];
              int v33 = *(_DWORD *)v32;
            }
            while (*(_DWORD *)v32 < v34);
            *(_DWORD *)__n128 v21 = v34;
            v22[2] = v98;
            v22[3] = v103;
            v22[4] = v108;
            *__n128 v22 = v88;
            v22[1] = v93;
          }
        }
      }
      a4 -= 5;
      BOOL v14 = v13-- <= 2;
    }
    while (!v14);
  }
  return a5;
}

void sub_EC2DFC(void **a1, unint64_t a2, long long *a3)
{
  uint64_t v7 = (char *)a1[1];
  uint64_t v6 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = &v7[24 * a2];
      uint64_t v14 = 24 * a2;
      do
      {
        long long v15 = *a3;
        *((void *)v7 + 2) = *((void *)a3 + 2);
        *(_OWORD *)uint64_t v7 = v15;
        v7 += 24;
        v14 -= 24;
      }
      while (v14);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)*a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_2E00();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v6 - (unsigned char *)*a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 > 0xAAAAAAAAAAAAAAALL) {
        sub_188D718();
      }
      long long v12 = (char *)operator new(24 * v11);
    }
    else
    {
      long long v12 = 0;
    }
    unsigned int v16 = &v12[24 * v8];
    uint64_t v17 = 24 * a2;
    unsigned int v18 = &v16[24 * a2];
    unsigned int v19 = v16;
    do
    {
      long long v20 = *a3;
      *((void *)v19 + 2) = *((void *)a3 + 2);
      *(_OWORD *)unsigned int v19 = v20;
      v19 += 24;
      v17 -= 24;
    }
    while (v17);
    __n128 v21 = (char *)*a1;
    if (v7 != *a1)
    {
      do
      {
        long long v22 = *(_OWORD *)(v7 - 24);
        *((void *)v16 - 1) = *((void *)v7 - 1);
        *(_OWORD *)(v16 - 24) = v22;
        v16 -= 24;
        v7 -= 24;
      }
      while (v7 != v21);
      uint64_t v7 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v18;
    a1[2] = &v12[24 * v11];
    if (v7)
    {
      operator delete(v7);
    }
  }
}

void sub_EC2FB0(char **a1)
{
  v1 = *a1;
  int64x2_t v2 = *(int64x2_t *)(a1 + 1);
  int64x2_t v3 = vsubq_s64(v2, vdupq_n_s64((unint64_t)*a1));
  int64x2_t v4 = vshrq_n_s64(v3, 4uLL);
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * v4.i64[0];
  if (0xAAAAAAAAAAAAAAABLL * v4.i64[1] <= v5) {
    return;
  }
  uint64_t v7 = a1[1];
  if ((char *)v2.i64[0] == v1)
  {
    *a1 = (char *)(48 * v5);
    a1[1] = (char *)(48 * v5);
    a1[2] = (char *)(48 * v5);
    if (!v1) {
      return;
    }
    goto LABEL_9;
  }
  if (v5 >= 0x555555555555556) {
    sub_188D718();
  }
  unint64_t v8 = (char *)operator new(v3.u64[0]) + 48 * v5;
  unint64_t v9 = v8;
  do
  {
    long long v10 = *((_OWORD *)v7 - 3);
    long long v11 = *((_OWORD *)v7 - 1);
    *((_OWORD *)v9 - 2) = *((_OWORD *)v7 - 2);
    *((_OWORD *)v9 - 1) = v11;
    *((_OWORD *)v9 - 3) = v10;
    v9 -= 48;
    v7 -= 48;
  }
  while (v7 != v1);
  v1 = *a1;
  *a1 = v9;
  a1[1] = v8;
  a1[2] = v8;
  if (v1)
  {
LABEL_9:
    operator delete(v1);
  }
}

uint64_t sub_EC30D4(uint64_t result, int a2)
{
  if ((a2 + 1) >= (unint64_t)((uint64_t)(*(void *)(result + 56) - *(void *)(result + 48)) >> 2))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v4, "vertex id out of range");
    int64x2_t v3 = (void *)sub_2F404((uint64_t)exception, &v4);
  }
  return result;
}

void sub_EC3154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_EC3184(uint64_t result, unsigned __int16 *a2, void **a3, uint64_t a4, int a5)
{
  long long v10 = (unsigned __int16 *)result;
LABEL_2:
  long long v11 = a2 - 1;
  long long v12 = v10;
LABEL_3:
  uint64_t v13 = 1 - a4;
  int v44 = a5;
  while (1)
  {
    long long v10 = v12;
    uint64_t v14 = (char *)a2 - (char *)v12;
    unint64_t v15 = v14 >> 1;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          unsigned __int16 v27 = *v10;
          long long v28 = (unsigned __int8 *)sub_EDC050(*a3, *(a2 - 1));
          __n128 result = sub_EDC050(*a3, v27);
          if (*v28 < *(unsigned __int8 *)result)
          {
            unsigned __int16 v29 = *v10;
            *long long v10 = *(a2 - 1);
            *(a2 - 1) = v29;
          }
          break;
        case 3uLL:
          __n128 result = sub_EC3730(v10, v10 + 1, v11, a3);
          break;
        case 4uLL:
          __n128 result = (uint64_t)sub_EC3E50(v10, v10 + 1, v10 + 2, v11, a3);
          break;
        case 5uLL:
          __n128 result = (uint64_t)sub_EC3F60(v10, v10 + 1, v10 + 2, v10 + 3, v11, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 47) {
      break;
    }
    uint64_t v16 = v13;
    if (v13 == 1)
    {
      if (v10 != a2)
      {
        unint64_t v30 = (v15 - 2) >> 1;
        unint64_t v31 = v30 + 1;
        __n128 v32 = &v10[v30];
        do
        {
          sub_EC40B4((char *)v10, a3, v14 >> 1, v32--);
          --v31;
        }
        while (v31);
        unint64_t v33 = (unint64_t)v14 >> 1;
        do
          __n128 result = (uint64_t)sub_EC4270(v10, (uint64_t)a2--, a3, v33);
        while (v33-- > 2);
      }
      return result;
    }
    unint64_t v17 = v15 >> 1;
    unsigned int v18 = &v10[v15 >> 1];
    if ((unint64_t)v14 < 0x101)
    {
      sub_EC3730(v18, v10, v11, a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      sub_EC3730(v10, v18, v11, a3);
      unsigned int v19 = v11;
      long long v20 = &v10[v17];
      sub_EC3730(v10 + 1, v20 - 1, a2 - 2, a3);
      sub_EC3730(v10 + 2, &v10[v17 + 1], a2 - 3, a3);
      sub_EC3730(v20 - 1, v18, &v10[v17 + 1], a3);
      unsigned __int16 v21 = *v10;
      *long long v10 = *v20;
      *long long v20 = v21;
      long long v11 = v19;
      a5 = v44;
      if (v44) {
        goto LABEL_13;
      }
    }
    unsigned __int16 v22 = *v10;
    long long v23 = (unsigned __int8 *)sub_EDC050(*a3, *(v10 - 1));
    if (*v23 >= *(unsigned __int8 *)sub_EDC050(*a3, v22))
    {
      __n128 result = (uint64_t)sub_EC38C8(v10, a2, a3);
      long long v12 = (unsigned __int16 *)result;
      goto LABEL_18;
    }
LABEL_13:
    long long v24 = sub_EC3A88(v10, a2, a3);
    if ((v25 & 1) == 0) {
      goto LABEL_16;
    }
    BOOL v26 = sub_EC3C1C(v10, v24, a3);
    long long v12 = v24 + 1;
    __n128 result = sub_EC3C1C(v24 + 1, a2, a3);
    if (result)
    {
      a4 = -v16;
      a2 = v24;
      if (v26) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v13 = v16 + 1;
    if (!v26)
    {
LABEL_16:
      __n128 result = sub_EC3184(v10, v24, a3, -v16, a5 & 1);
      long long v12 = v24 + 1;
LABEL_18:
      a5 = 0;
      a4 = -v16;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return (uint64_t)sub_EC3620(v10, a2, a3);
  }
  else if (v10 != a2)
  {
    while (v10 + 1 != a2)
    {
      unsigned __int16 v35 = v10[1];
      unsigned __int16 v36 = *v10++;
      long long v37 = (unsigned __int8 *)sub_EDC050(*a3, v35);
      __n128 result = sub_EDC050(*a3, v36);
      if (*v37 < *(unsigned __int8 *)result)
      {
        unsigned __int16 v38 = *v10;
        __n128 v39 = v10;
        do
        {
          __n128 v40 = v39;
          unsigned __int16 v41 = *--v39;
          *__n128 v40 = v41;
          unsigned __int16 v42 = *(v40 - 2);
          __n128 v43 = (unsigned __int8 *)sub_EDC050(*a3, v38);
          __n128 result = sub_EDC050(*a3, v42);
        }
        while (*v43 < *(unsigned __int8 *)result);
        *__n128 v39 = v38;
      }
    }
  }
  return result;
}

unsigned __int16 *sub_EC3620(unsigned __int16 *result, unsigned __int16 *a2, void **a3)
{
  if (result != a2)
  {
    long long v4 = result;
    char v5 = result + 1;
    if (result + 1 != a2)
    {
      uint64_t v7 = 0;
      unint64_t v8 = result;
      do
      {
        unsigned __int16 v10 = v8[1];
        unsigned __int16 v11 = *v8;
        unint64_t v8 = v5;
        long long v12 = (unsigned __int8 *)sub_EDC050(*a3, v10);
        __n128 result = (unsigned __int16 *)sub_EDC050(*a3, v11);
        if (*v12 < *(unsigned __int8 *)result)
        {
          unsigned __int16 v13 = *v8;
          uint64_t v14 = v7;
          do
          {
            *(unsigned __int16 *)((char *)v4 + v14 + 2) = *(unsigned __int16 *)((char *)v4 + v14);
            if (!v14)
            {
              unint64_t v9 = v4;
              goto LABEL_5;
            }
            unsigned __int16 v15 = *(unsigned __int16 *)((char *)v4 + v14 - 2);
            uint64_t v16 = (unsigned __int8 *)sub_EDC050(*a3, v13);
            __n128 result = (unsigned __int16 *)sub_EDC050(*a3, v15);
            v14 -= 2;
          }
          while (*v16 < *(unsigned __int8 *)result);
          unint64_t v9 = (unsigned __int16 *)((char *)v4 + v14 + 2);
LABEL_5:
          *unint64_t v9 = v13;
        }
        char v5 = v8 + 1;
        v7 += 2;
      }
      while (v8 + 1 != a2);
    }
  }
  return result;
}

uint64_t sub_EC3730(unsigned __int16 *a1, unsigned __int16 *a2, unsigned __int16 *a3, void **a4)
{
  unsigned __int16 v8 = *a1;
  unint64_t v9 = (unsigned __int8 *)sub_EDC050(*a4, *a2);
  unsigned __int16 v10 = (unsigned __int8 *)sub_EDC050(*a4, v8);
  unsigned int v11 = *v9;
  unsigned int v12 = *v10;
  unsigned __int16 v13 = *a2;
  uint64_t v14 = (unsigned __int8 *)sub_EDC050(*a4, *a3);
  unsigned __int16 v15 = (unsigned __int8 *)sub_EDC050(*a4, v13);
  unsigned int v16 = *v14;
  unsigned int v17 = *v15;
  if (v11 < v12)
  {
    unsigned __int16 v18 = *a1;
    if (v16 < v17)
    {
      *a1 = *a3;
      *a3 = v18;
      return 1;
    }
    *a1 = *a2;
    *a2 = v18;
    long long v23 = (unsigned __int8 *)sub_EDC050(*a4, *a3);
    if (*v23 >= *(unsigned __int8 *)sub_EDC050(*a4, v18)) {
      return 1;
    }
    unsigned __int16 v24 = *a2;
    *a2 = *a3;
    *a3 = v24;
    return 2;
  }
  if (v16 < v17)
  {
    unsigned __int16 v19 = *a2;
    *a2 = *a3;
    *a3 = v19;
    unsigned __int16 v20 = *a1;
    unsigned __int16 v21 = (unsigned __int8 *)sub_EDC050(*a4, *a2);
    if (*v21 >= *(unsigned __int8 *)sub_EDC050(*a4, v20)) {
      return 1;
    }
    unsigned __int16 v22 = *a1;
    *a1 = *a2;
    *a2 = v22;
    return 2;
  }
  return 0;
}

unsigned __int16 *sub_EC38C8(unsigned __int16 *a1, unsigned __int16 *a2, void **a3)
{
  long long v4 = a2;
  unsigned __int16 v6 = *a1;
  unsigned __int16 v7 = *(a2 - 1);
  unsigned __int16 v8 = (unsigned __int8 *)sub_EDC050(*a3, *a1);
  if (*v8 >= *(unsigned __int8 *)sub_EDC050(*a3, v7))
  {
    unsigned int v12 = a1 + 1;
    do
    {
      unint64_t v9 = v12;
      if (v12 >= v4) {
        break;
      }
      ++v12;
      unsigned __int16 v13 = *v9;
      uint64_t v14 = (unsigned __int8 *)sub_EDC050(*a3, v6);
    }
    while (*v14 >= *(unsigned __int8 *)sub_EDC050(*a3, v13));
  }
  else
  {
    unint64_t v9 = a1;
    do
    {
      unsigned __int16 v10 = v9[1];
      ++v9;
      unsigned int v11 = (unsigned __int8 *)sub_EDC050(*a3, v6);
    }
    while (*v11 >= *(unsigned __int8 *)sub_EDC050(*a3, v10));
  }
  if (v9 < v4)
  {
    do
    {
      unsigned __int16 v15 = *--v4;
      unsigned int v16 = (unsigned __int8 *)sub_EDC050(*a3, v6);
    }
    while (*v16 < *(unsigned __int8 *)sub_EDC050(*a3, v15));
  }
  while (v9 < v4)
  {
    unsigned __int16 v17 = *v9;
    *unint64_t v9 = *v4;
    *long long v4 = v17;
    do
    {
      unsigned __int16 v18 = v9[1];
      ++v9;
      unsigned __int16 v19 = (unsigned __int8 *)sub_EDC050(*a3, v6);
    }
    while (*v19 >= *(unsigned __int8 *)sub_EDC050(*a3, v18));
    do
    {
      unsigned __int16 v20 = *--v4;
      unsigned __int16 v21 = (unsigned __int8 *)sub_EDC050(*a3, v6);
    }
    while (*v21 < *(unsigned __int8 *)sub_EDC050(*a3, v20));
  }
  if (v9 - 1 != a1) {
    *a1 = *(v9 - 1);
  }
  *(v9 - 1) = v6;
  return v9;
}

unsigned __int16 *sub_EC3A88(unsigned __int16 *a1, unsigned __int16 *a2, void **a3)
{
  uint64_t v6 = 0;
  unsigned __int16 v7 = *a1;
  do
    unsigned __int16 v8 = (unsigned __int8 *)sub_EDC050(*a3, a1[++v6]);
  while (*v8 < *(unsigned __int8 *)sub_EDC050(*a3, v7));
  unint64_t v9 = &a1[v6];
  unsigned __int16 v10 = &a1[v6 - 1];
  if (v6 == 1)
  {
    do
    {
      if (v9 >= a2) {
        break;
      }
      unsigned __int16 v13 = *--a2;
      uint64_t v14 = (unsigned __int8 *)sub_EDC050(*a3, v13);
    }
    while (*v14 >= *(unsigned __int8 *)sub_EDC050(*a3, v7));
  }
  else
  {
    do
    {
      unsigned __int16 v11 = *--a2;
      unsigned int v12 = (unsigned __int8 *)sub_EDC050(*a3, v11);
    }
    while (*v12 >= *(unsigned __int8 *)sub_EDC050(*a3, v7));
  }
  if (v9 < a2)
  {
    unsigned __int16 v15 = v9;
    unsigned int v16 = a2;
    do
    {
      unsigned __int16 v17 = *v15;
      *unsigned __int16 v15 = *v16;
      *unsigned int v16 = v17;
      do
      {
        unsigned __int16 v18 = v15[1];
        ++v15;
        unsigned __int16 v19 = (unsigned __int8 *)sub_EDC050(*a3, v18);
      }
      while (*v19 < *(unsigned __int8 *)sub_EDC050(*a3, v7));
      do
      {
        unsigned __int16 v20 = *--v16;
        unsigned __int16 v21 = (unsigned __int8 *)sub_EDC050(*a3, v20);
      }
      while (*v21 >= *(unsigned __int8 *)sub_EDC050(*a3, v7));
    }
    while (v15 < v16);
    unsigned __int16 v10 = v15 - 1;
  }
  if (v10 != a1) {
    *a1 = *v10;
  }
  *unsigned __int16 v10 = v7;
  return v10;
}

BOOL sub_EC3C1C(unsigned __int16 *a1, unsigned __int16 *a2, void **a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned __int16 v8 = *a1;
      unint64_t v9 = (unsigned __int8 *)sub_EDC050(*a3, *(a2 - 1));
      if (*v9 < *(unsigned __int8 *)sub_EDC050(*a3, v8))
      {
        unsigned __int16 v10 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v10;
      }
      return 1;
    case 3:
      sub_EC3730(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_EC3E50(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_EC3F60(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      unsigned __int16 v11 = a1 + 2;
      sub_EC3730(a1, a1 + 1, a1 + 2, a3);
      unsigned int v12 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    unsigned __int16 v15 = *v11;
    unsigned int v16 = (unsigned __int8 *)sub_EDC050(*a3, *v12);
    if (*v16 < *(unsigned __int8 *)sub_EDC050(*a3, v15)) {
      break;
    }
LABEL_13:
    unsigned __int16 v11 = v12;
    v13 += 2;
    if (++v12 == a2) {
      return 1;
    }
  }
  unsigned __int16 v17 = *v12;
  uint64_t v18 = v13;
  do
  {
    *(unsigned __int16 *)((char *)a1 + v18 + 6) = *(unsigned __int16 *)((char *)a1 + v18 + 4);
    if (v18 == -4)
    {
      *a1 = v17;
      if (++v14 != 8) {
        goto LABEL_13;
      }
      return v12 + 1 == a2;
    }
    unsigned __int16 v19 = *(unsigned __int16 *)((char *)a1 + v18 + 2);
    unsigned __int16 v20 = (unsigned __int8 *)sub_EDC050(*a3, v17);
    v18 -= 2;
  }
  while (*v20 < *(unsigned __int8 *)sub_EDC050(*a3, v19));
  *(unsigned __int16 *)((char *)a1 + v18 + 6) = v17;
  if (++v14 != 8) {
    goto LABEL_13;
  }
  return v12 + 1 == a2;
}

unsigned __int8 *sub_EC3E50(unsigned __int16 *a1, unsigned __int16 *a2, unsigned __int16 *a3, unsigned __int16 *a4, void **a5)
{
  sub_EC3730(a1, a2, a3, a5);
  unsigned __int16 v10 = *a3;
  unsigned __int16 v11 = (unsigned __int8 *)sub_EDC050(*a5, *a4);
  BOOL result = (unsigned __int8 *)sub_EDC050(*a5, v10);
  if (*v11 < *result)
  {
    unsigned __int16 v13 = *a3;
    *a3 = *a4;
    *a4 = v13;
    unsigned __int16 v14 = *a2;
    unsigned __int16 v15 = (unsigned __int8 *)sub_EDC050(*a5, *a3);
    BOOL result = (unsigned __int8 *)sub_EDC050(*a5, v14);
    if (*v15 < *result)
    {
      unsigned __int16 v16 = *a2;
      *a2 = *a3;
      *a3 = v16;
      unsigned __int16 v17 = *a1;
      uint64_t v18 = (unsigned __int8 *)sub_EDC050(*a5, *a2);
      BOOL result = (unsigned __int8 *)sub_EDC050(*a5, v17);
      if (*v18 < *result)
      {
        unsigned __int16 v19 = *a1;
        *a1 = *a2;
        *a2 = v19;
      }
    }
  }
  return result;
}

unsigned __int8 *sub_EC3F60(unsigned __int16 *a1, unsigned __int16 *a2, unsigned __int16 *a3, unsigned __int16 *a4, unsigned __int16 *a5, void **a6)
{
  sub_EC3E50(a1, a2, a3, a4, a6);
  unsigned __int16 v12 = *a4;
  unsigned __int16 v13 = (unsigned __int8 *)sub_EDC050(*a6, *a5);
  BOOL result = (unsigned __int8 *)sub_EDC050(*a6, v12);
  if (*v13 < *result)
  {
    unsigned __int16 v15 = *a4;
    *a4 = *a5;
    *a5 = v15;
    unsigned __int16 v16 = *a3;
    unsigned __int16 v17 = (unsigned __int8 *)sub_EDC050(*a6, *a4);
    BOOL result = (unsigned __int8 *)sub_EDC050(*a6, v16);
    if (*v17 < *result)
    {
      unsigned __int16 v18 = *a3;
      *a3 = *a4;
      *a4 = v18;
      unsigned __int16 v19 = *a2;
      unsigned __int16 v20 = (unsigned __int8 *)sub_EDC050(*a6, *a3);
      BOOL result = (unsigned __int8 *)sub_EDC050(*a6, v19);
      if (*v20 < *result)
      {
        unsigned __int16 v21 = *a2;
        *a2 = *a3;
        *a3 = v21;
        unsigned __int16 v22 = *a1;
        long long v23 = (unsigned __int8 *)sub_EDC050(*a6, *a2);
        BOOL result = (unsigned __int8 *)sub_EDC050(*a6, v22);
        if (*v23 < *result)
        {
          unsigned __int16 v24 = *a1;
          *a1 = *a2;
          *a2 = v24;
        }
      }
    }
  }
  return result;
}

char *sub_EC40B4(char *result, void **a2, uint64_t a3, unsigned __int16 *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    char v5 = a4;
    uint64_t v6 = result;
    int64_t v7 = (char *)a4 - result;
    int64_t v8 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((char *)a4 - result) >> 1)
    {
      uint64_t v11 = v7 + 1;
      unsigned __int16 v12 = (unsigned __int16 *)&result[2 * v7 + 2];
      uint64_t v13 = v7 + 2;
      unint64_t v30 = result;
      if (v7 + 2 < a3)
      {
        unint64_t v14 = v4 >> 1;
        unsigned __int16 v15 = v12[1];
        unsigned __int16 v16 = (unsigned __int8 *)sub_EDC050(*a2, *v12);
        unsigned __int16 v17 = v15;
        int64_t v8 = v14;
        uint64_t v6 = v30;
        if (*v16 < *(unsigned __int8 *)sub_EDC050(*a2, v17))
        {
          ++v12;
          uint64_t v11 = v13;
        }
      }
      unsigned __int16 v18 = *v5;
      unsigned __int16 v19 = (unsigned __int8 *)sub_EDC050(*a2, *v12);
      BOOL result = (char *)sub_EDC050(*a2, v18);
      if (*v19 >= *result)
      {
        unsigned __int16 v31 = *v5;
        do
        {
          unsigned __int16 v22 = v12;
          *char v5 = *v12;
          if (v8 < v11) {
            break;
          }
          uint64_t v23 = (2 * v11) | 1;
          unsigned __int16 v12 = (unsigned __int16 *)&v6[2 * v23];
          uint64_t v24 = 2 * v11 + 2;
          if (v24 < a3)
          {
            unsigned __int16 v25 = v12[1];
            BOOL v26 = (unsigned __int8 *)sub_EDC050(*a2, *v12);
            unsigned __int16 v27 = (unsigned __int8 *)sub_EDC050(*a2, v25);
            unsigned int v28 = *v26;
            unsigned int v29 = *v27;
            if (v28 < v29) {
              ++v12;
            }
            uint64_t v6 = v30;
            if (v28 < v29) {
              uint64_t v23 = v24;
            }
          }
          unsigned __int16 v20 = (unsigned __int8 *)sub_EDC050(*a2, *v12);
          BOOL result = (char *)sub_EDC050(*a2, v31);
          unsigned int v21 = *v20;
          char v5 = v22;
          uint64_t v11 = v23;
        }
        while (v21 >= *result);
        *unsigned __int16 v22 = v31;
      }
    }
  }
  return result;
}

unsigned __int16 *sub_EC4270(unsigned __int16 *result, uint64_t a2, void **a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v23 = (char *)result;
    uint64_t v6 = 0;
    unsigned __int16 v25 = *result;
    int64_t v7 = (unint64_t)(a4 - 2) >> 1;
    int64_t v8 = result;
    do
    {
      uint64_t v9 = 2 * v6 + 2;
      unsigned __int16 v10 = (unsigned __int16 *)((char *)v8 + v9);
      uint64_t v11 = (2 * v6) | 1;
      if (v9 < a4)
      {
        unsigned __int16 v12 = v10[1];
        uint64_t v13 = (unsigned __int8 *)sub_EDC050(*a3, *v10);
        BOOL result = (unsigned __int16 *)sub_EDC050(*a3, v12);
        if (*v13 < *(unsigned __int8 *)result)
        {
          ++v10;
          uint64_t v11 = v9;
        }
      }
      *int64_t v8 = *v10;
      int64_t v8 = v10;
      uint64_t v6 = v11;
    }
    while (v11 <= v7);
    unint64_t v14 = (unsigned __int16 *)(a2 - 2);
    if (v10 == (unsigned __int16 *)(a2 - 2))
    {
      *unsigned __int16 v10 = v25;
    }
    else
    {
      *unsigned __int16 v10 = *v14;
      *unint64_t v14 = v25;
      uint64_t v15 = (char *)v10 - v23 + 2;
      if (v15 >= 3)
      {
        unint64_t v16 = (((unint64_t)v15 >> 1) - 2) >> 1;
        unsigned __int16 v17 = (unsigned __int16 *)&v23[2 * v16];
        unsigned __int16 v18 = *v10;
        unsigned __int16 v19 = (unsigned __int8 *)sub_EDC050(*a3, *v17);
        BOOL result = (unsigned __int16 *)sub_EDC050(*a3, v18);
        if (*v19 < *(unsigned __int8 *)result)
        {
          unsigned __int16 v20 = *v10;
          do
          {
            unsigned int v21 = v17;
            *unsigned __int16 v10 = *v17;
            if (!v16) {
              break;
            }
            unint64_t v16 = (v16 - 1) >> 1;
            unsigned __int16 v17 = (unsigned __int16 *)&v23[2 * v16];
            unsigned __int16 v22 = (unsigned __int8 *)sub_EDC050(*a3, *v17);
            BOOL result = (unsigned __int16 *)sub_EDC050(*a3, v20);
            unsigned __int16 v10 = v21;
          }
          while (*v22 < *(unsigned __int8 *)result);
          *unsigned int v21 = v20;
        }
      }
    }
  }
  return result;
}

__n128 sub_EC4428(unsigned int *a1, long long *a2, char *a3, long long *a4, uint64_t a5, uint64_t a6, char a7)
{
  while (2)
  {
    v257 = a4 - 10;
    v258 = (__n128 *)(a4 - 5);
    v256 = a4 - 15;
    uint64_t v11 = a1;
    unsigned __int16 v12 = a2;
LABEL_2:
    uint64_t v13 = v11;
    uint64_t v14 = (uint64_t)v12;
    while (1)
    {
      uint64_t v15 = a3 - (char *)v13;
      unint64_t v16 = (a3 - (char *)v13) >> 2;
      if (v8 || !v7)
      {
        switch(v16)
        {
          case 0uLL:
          case 1uLL:
            return result;
          case 2uLL:
            unsigned int v182 = *((_DWORD *)a3 - 1);
            unsigned int v183 = *v13;
            if (v182 < *v13)
            {
              unsigned int *v13 = v182;
              *((_DWORD *)a3 - 1) = v183;
              __n128 v296 = *(__n128 *)v14;
              __n128 result = *(__n128 *)(v14 + 16);
              long long v405 = *(_OWORD *)(v14 + 48);
              long long v442 = *(_OWORD *)(v14 + 64);
              long long v368 = *(_OWORD *)(v14 + 32);
              long long v184 = *(a4 - 1);
              long long v186 = *(a4 - 4);
              long long v185 = *(a4 - 3);
              *(_OWORD *)(v14 + 48) = *(a4 - 2);
              *(_OWORD *)(v14 + 64) = v184;
              *(_OWORD *)(v14 + 16) = v186;
              *(_OWORD *)(v14 + 32) = v185;
              *(_OWORD *)uint64_t v14 = *(a4 - 5);
              *(a4 - 2) = v405;
              *(a4 - 1) = v442;
              *(a4 - 4) = (__int128)result;
              *(a4 - 3) = v368;
              result.n128_u64[0] = v296.n128_u64[0];
              *(a4 - 5) = (__int128)v296;
            }
            break;
          case 3uLL:
            v187 = (__n128 *)(v14 + 80);
            unsigned int v189 = *v13;
            unsigned int v188 = v13[1];
            unsigned int v190 = *((_DWORD *)a3 - 1);
            if (v188 >= *v13)
            {
              if (v190 < v188)
              {
                v13[1] = v190;
                *((_DWORD *)a3 - 1) = v188;
                long long v374 = *(_OWORD *)(v14 + 112);
                long long v411 = *(_OWORD *)(v14 + 128);
                long long v448 = *(_OWORD *)(v14 + 144);
                __n128 v302 = *v187;
                __n128 v337 = *(__n128 *)(v14 + 96);
                long long v231 = *(a4 - 4);
                long long v230 = *(a4 - 3);
                long long v232 = *(a4 - 1);
                *(_OWORD *)(v14 + 128) = *(a4 - 2);
                *(_OWORD *)(v14 + 144) = v232;
                *(_OWORD *)(v14 + 96) = v231;
                *(_OWORD *)(v14 + 112) = v230;
                __n128 *v187 = *v258;
                __n128 *v258 = v302;
                __n128 result = v337;
                *(a4 - 2) = v411;
                *(a4 - 1) = v448;
                *(a4 - 4) = (__int128)v337;
                *(a4 - 3) = v374;
                unsigned int v234 = *v13;
                unsigned int v233 = v13[1];
                if (v233 < *v13)
                {
                  unsigned int *v13 = v233;
                  v13[1] = v234;
                  __n128 v303 = *(__n128 *)v14;
                  long long v412 = *(_OWORD *)(v14 + 48);
                  long long v449 = *(_OWORD *)(v14 + 64);
                  long long v338 = *(_OWORD *)(v14 + 16);
                  long long v375 = *(_OWORD *)(v14 + 32);
                  long long v235 = *(_OWORD *)(v14 + 144);
                  long long v236 = *(_OWORD *)(v14 + 112);
                  *(_OWORD *)(v14 + 48) = *(_OWORD *)(v14 + 128);
                  *(_OWORD *)(v14 + 64) = v235;
                  __n128 v237 = *v187;
                  *(_OWORD *)(v14 + 16) = *(_OWORD *)(v14 + 96);
                  *(_OWORD *)(v14 + 32) = v236;
                  *(__n128 *)uint64_t v14 = v237;
                  __n128 result = v303;
                  *(_OWORD *)(v14 + 128) = v412;
                  *(_OWORD *)(v14 + 144) = v449;
                  *(_OWORD *)(v14 + 96) = v338;
                  *(_OWORD *)(v14 + 112) = v375;
                  __n128 *v187 = v303;
                }
              }
            }
            else if (v190 >= v188)
            {
              unsigned int *v13 = v188;
              v13[1] = v189;
              __n128 v304 = *(__n128 *)v14;
              long long v413 = *(_OWORD *)(v14 + 48);
              long long v450 = *(_OWORD *)(v14 + 64);
              long long v339 = *(_OWORD *)(v14 + 16);
              long long v376 = *(_OWORD *)(v14 + 32);
              long long v248 = *(_OWORD *)(v14 + 144);
              long long v249 = *(_OWORD *)(v14 + 112);
              *(_OWORD *)(v14 + 48) = *(_OWORD *)(v14 + 128);
              *(_OWORD *)(v14 + 64) = v248;
              __n128 v250 = *v187;
              *(_OWORD *)(v14 + 16) = *(_OWORD *)(v14 + 96);
              *(_OWORD *)(v14 + 32) = v249;
              *(__n128 *)uint64_t v14 = v250;
              __n128 result = v304;
              *(_OWORD *)(v14 + 128) = v413;
              *(_OWORD *)(v14 + 144) = v450;
              *(_OWORD *)(v14 + 96) = v339;
              *(_OWORD *)(v14 + 112) = v376;
              __n128 *v187 = v304;
              unsigned int v251 = *((_DWORD *)a3 - 1);
              unsigned int v252 = v13[1];
              if (v251 < v252)
              {
                v13[1] = v251;
                *((_DWORD *)a3 - 1) = v252;
                long long v377 = *(_OWORD *)(v14 + 112);
                long long v414 = *(_OWORD *)(v14 + 128);
                long long v451 = *(_OWORD *)(v14 + 144);
                __n128 v305 = *v187;
                __n128 v340 = *(__n128 *)(v14 + 96);
                long long v254 = *(a4 - 4);
                long long v253 = *(a4 - 3);
                long long v255 = *(a4 - 1);
                *(_OWORD *)(v14 + 128) = *(a4 - 2);
                *(_OWORD *)(v14 + 144) = v255;
                *(_OWORD *)(v14 + 96) = v254;
                *(_OWORD *)(v14 + 112) = v253;
                __n128 *v187 = *v258;
                __n128 *v258 = v305;
                __n128 result = v340;
                *(a4 - 2) = v414;
                *(a4 - 1) = v451;
                *(a4 - 4) = (__int128)v340;
                *(a4 - 3) = v377;
              }
            }
            else
            {
              unsigned int *v13 = v190;
              *((_DWORD *)a3 - 1) = v189;
              __n128 v297 = *(__n128 *)v14;
              __n128 result = *(__n128 *)(v14 + 16);
              long long v406 = *(_OWORD *)(v14 + 48);
              long long v443 = *(_OWORD *)(v14 + 64);
              long long v369 = *(_OWORD *)(v14 + 32);
              long long v191 = *(a4 - 1);
              long long v193 = *(a4 - 4);
              long long v192 = *(a4 - 3);
              *(_OWORD *)(v14 + 48) = *(a4 - 2);
              *(_OWORD *)(v14 + 64) = v191;
              *(_OWORD *)(v14 + 16) = v193;
              *(_OWORD *)(v14 + 32) = v192;
              *(__n128 *)uint64_t v14 = *v258;
              *(a4 - 2) = v406;
              *(a4 - 1) = v443;
              *(a4 - 4) = (__int128)result;
              *(a4 - 3) = v369;
              result.n128_u64[0] = v297.n128_u64[0];
              __n128 *v258 = v297;
            }
            break;
          case 4uLL:
            result.n128_u64[0] = sub_EC24C8(v13, (__n128 *)v14, v13 + 1, (__n128 *)(v14 + 80), v13 + 2, (__n128 *)(v14 + 160), (unsigned int *)a3 - 1, v258).n128_u64[0];
            break;
          case 5uLL:
            v194 = (__n128 *)(v14 + 80);
            v195 = v13 + 2;
            v196 = (__n128 *)(v14 + 160);
            v197 = v13 + 3;
            v198 = (__n128 *)(v14 + 240);
            result.n128_u64[0] = sub_EC24C8(v13, (__n128 *)v14, v13 + 1, (__n128 *)(v14 + 80), v13 + 2, (__n128 *)(v14 + 160), v13 + 3, (__n128 *)(v14 + 240)).n128_u64[0];
            unsigned int v199 = *((_DWORD *)a3 - 1);
            unsigned int v200 = v13[3];
            if (v199 < v200)
            {
              unsigned int *v197 = v199;
              *((_DWORD *)a3 - 1) = v200;
              long long v370 = *(_OWORD *)(v14 + 272);
              long long v407 = *(_OWORD *)(v14 + 288);
              long long v444 = *(_OWORD *)(v14 + 304);
              long long v298 = (__int128)*v198;
              __n128 v333 = *(__n128 *)(v14 + 256);
              long long v202 = *(a4 - 4);
              long long v201 = *(a4 - 3);
              long long v203 = *(a4 - 1);
              *(_OWORD *)(v14 + 288) = *(a4 - 2);
              *(_OWORD *)(v14 + 304) = v203;
              *(_OWORD *)(v14 + 256) = v202;
              *(_OWORD *)(v14 + 272) = v201;
              __n128 *v198 = (__n128)*(a4 - 5);
              *(a4 - 5) = v298;
              __n128 result = v333;
              *(a4 - 2) = v407;
              *(a4 - 1) = v444;
              *(a4 - 4) = (__int128)v333;
              *(a4 - 3) = v370;
              unsigned int v204 = *v195;
              if (*v197 < *v195)
              {
                unsigned int *v195 = *v197;
                unsigned int *v197 = v204;
                long long v371 = *(_OWORD *)(v14 + 192);
                long long v408 = *(_OWORD *)(v14 + 208);
                long long v445 = *(_OWORD *)(v14 + 224);
                __n128 v299 = *v196;
                long long v334 = *(_OWORD *)(v14 + 176);
                long long v205 = *(_OWORD *)(v14 + 288);
                *(_OWORD *)(v14 + 192) = *(_OWORD *)(v14 + 272);
                *(_OWORD *)(v14 + 208) = v205;
                *(_OWORD *)(v14 + 224) = *(_OWORD *)(v14 + 304);
                long long v206 = *(_OWORD *)(v14 + 256);
                __n128 *v196 = *v198;
                *(_OWORD *)(v14 + 176) = v206;
                __n128 result = v299;
                *(_OWORD *)(v14 + 288) = v408;
                *(_OWORD *)(v14 + 304) = v445;
                *(_OWORD *)(v14 + 256) = v334;
                *(_OWORD *)(v14 + 272) = v371;
                __n128 *v198 = v299;
                unsigned int v207 = v13[1];
                if (*v195 < v207)
                {
                  v13[1] = *v195;
                  v13[2] = v207;
                  long long v372 = *(_OWORD *)(v14 + 112);
                  long long v409 = *(_OWORD *)(v14 + 128);
                  long long v446 = *(_OWORD *)(v14 + 144);
                  __n128 v300 = *v194;
                  long long v335 = *(_OWORD *)(v14 + 96);
                  long long v208 = *(_OWORD *)(v14 + 208);
                  *(_OWORD *)(v14 + 112) = *(_OWORD *)(v14 + 192);
                  *(_OWORD *)(v14 + 128) = v208;
                  *(_OWORD *)(v14 + 144) = *(_OWORD *)(v14 + 224);
                  long long v209 = *(_OWORD *)(v14 + 176);
                  __n128 *v194 = *v196;
                  *(_OWORD *)(v14 + 96) = v209;
                  __n128 result = v300;
                  *(_OWORD *)(v14 + 208) = v409;
                  *(_OWORD *)(v14 + 224) = v446;
                  *(_OWORD *)(v14 + 176) = v335;
                  *(_OWORD *)(v14 + 192) = v372;
                  __n128 *v196 = v300;
                  unsigned int v211 = *v13;
                  unsigned int v210 = v13[1];
                  if (v210 < *v13)
                  {
                    unsigned int *v13 = v210;
                    v13[1] = v211;
                    __n128 v301 = *(__n128 *)v14;
                    long long v410 = *(_OWORD *)(v14 + 48);
                    long long v447 = *(_OWORD *)(v14 + 64);
                    long long v336 = *(_OWORD *)(v14 + 16);
                    long long v373 = *(_OWORD *)(v14 + 32);
                    long long v212 = *(_OWORD *)(v14 + 144);
                    long long v213 = *(_OWORD *)(v14 + 112);
                    *(_OWORD *)(v14 + 48) = *(_OWORD *)(v14 + 128);
                    *(_OWORD *)(v14 + 64) = v212;
                    __n128 v214 = *v194;
                    *(_OWORD *)(v14 + 16) = *(_OWORD *)(v14 + 96);
                    *(_OWORD *)(v14 + 32) = v213;
                    *(__n128 *)uint64_t v14 = v214;
                    __n128 result = v301;
                    *(_OWORD *)(v14 + 128) = v410;
                    *(_OWORD *)(v14 + 144) = v447;
                    *(_OWORD *)(v14 + 96) = v336;
                    *(_OWORD *)(v14 + 112) = v373;
                    __n128 *v194 = v301;
                  }
                }
              }
            }
            break;
          default:
            JUMPOUT(0);
        }
        return result;
      }
      if (v15 <= 95)
      {
        if (a7)
        {
          if (v13 != (unsigned int *)a3)
          {
            v215 = v13 + 1;
            if (v13 + 1 != (unsigned int *)a3)
            {
              uint64_t v216 = 0;
              uint64_t v217 = 0;
              v218 = (__n128 *)v14;
              v219 = v13;
              do
              {
                v222 = v215;
                v218 += 5;
                unsigned int v223 = v219[1];
                if (v223 < *v219)
                {
                  __n128 v417 = v218[3];
                  __n128 v454 = v218[4];
                  __n128 v343 = v218[1];
                  __n128 v380 = v218[2];
                  __n128 v308 = *v218;
                  unsigned int v224 = *v219;
                  uint64_t v225 = v216;
                  uint64_t v226 = v217;
                  do
                  {
                    *(unsigned int *)((char *)v13 + v226 + 4) = v224;
                    v227 = (_OWORD *)(v14 + v225);
                    long long v228 = *(_OWORD *)(v14 + v225 + 48);
                    v227[7] = *(_OWORD *)(v14 + v225 + 32);
                    v227[8] = v228;
                    v227[9] = *(_OWORD *)(v14 + v225 + 64);
                    long long v229 = *(_OWORD *)(v14 + v225 + 16);
                    v227[5] = *(_OWORD *)(v14 + v225);
                    v227[6] = v229;
                    if (!v226)
                    {
                      v220 = v13;
                      v221 = (_OWORD *)v14;
                      goto LABEL_114;
                    }
                    unsigned int v224 = *(unsigned int *)((char *)v13 + v226 - 4);
                    v226 -= 4;
                    v225 -= 80;
                  }
                  while (v223 < v224);
                  v220 = (unsigned int *)((char *)v13 + v226 + 4);
                  v221 = (_OWORD *)(v14 + v225 + 80);
LABEL_114:
                  unsigned int *v220 = v223;
                  _OWORD *v221 = v308;
                  __n128 result = v343;
                  v221[3] = v417;
                  v221[4] = v454;
                  v221[1] = v343;
                  v221[2] = v380;
                }
                v215 = v222 + 1;
                v217 += 4;
                v216 += 80;
                v219 = v222;
              }
              while (v222 + 1 != (unsigned int *)a3);
            }
          }
        }
        else if (v13 != (unsigned int *)a3)
        {
          v238 = v13 + 1;
          if (v13 + 1 != (unsigned int *)a3)
          {
            v239 = (__n128 *)(v14 + 80);
            do
            {
              v240 = v238;
              v14 += 80;
              unsigned int v241 = v13[1];
              if (v241 < *v13)
              {
                __n128 v418 = *(__n128 *)(v14 + 48);
                __n128 v455 = *(__n128 *)(v14 + 64);
                __n128 v344 = *(__n128 *)(v14 + 16);
                __n128 v381 = *(__n128 *)(v14 + 32);
                __n128 v309 = *(__n128 *)v14;
                unsigned int v242 = *v13;
                v243 = v239;
                v244 = v240;
                do
                {
                  unsigned int *v244 = v242;
                  __n128 v245 = v243[-1];
                  __n128 v246 = v243[-3];
                  v243[3] = v243[-2];
                  v243[4] = v245;
                  __n128 v247 = v243[-4];
                  __n128 *v243 = v243[-5];
                  v243[1] = v247;
                  v243[2] = v246;
                  v243 -= 5;
                  unsigned int v242 = *(v244 - 2);
                  --v244;
                }
                while (v241 < v242);
                unsigned int *v244 = v241;
                __n128 *v243 = v309;
                __n128 result = v344;
                v243[3] = v418;
                v243[4] = v455;
                v243[1] = v344;
                v243[2] = v381;
              }
              v238 = v240 + 1;
              v239 += 5;
              uint64_t v13 = v240;
            }
            while (v240 + 1 != (unsigned int *)a3);
          }
        }
        return result;
      }
      if (!a6)
      {
        if (v13 != (unsigned int *)a3)
        {
          sub_EC27B8((char *)v13, (long long *)v14, a3, a4, a3);
        }
        return result;
      }
      unint64_t v17 = v16 >> 1;
      unsigned __int16 v18 = (__n128 *)(v14 + 80 * (v16 >> 1));
      unsigned int v19 = *((_DWORD *)a3 - 1);
      if ((unint64_t)v15 >= 0x201)
      {
        unsigned int v20 = v13[v17];
        unsigned int v21 = *v13;
        uint64_t v22 = v17;
        if (v20 >= *v13)
        {
          if (v19 < v20)
          {
            v13[v17] = v19;
            *((_DWORD *)a3 - 1) = v20;
            __n128 v275 = *v18;
            long long v384 = (__int128)v18[3];
            long long v421 = (__int128)v18[4];
            long long v312 = (__int128)v18[1];
            long long v347 = (__int128)v18[2];
            __n128 v32 = (__n128)*(a4 - 1);
            __n128 v34 = (__n128)*(a4 - 4);
            __n128 v33 = (__n128)*(a4 - 3);
            v18[3] = (__n128)*(a4 - 2);
            v18[4] = v32;
            v18[1] = v34;
            v18[2] = v33;
            __n128 *v18 = *v258;
            *(a4 - 2) = v384;
            *(a4 - 1) = v421;
            *(a4 - 4) = v312;
            *(a4 - 3) = v347;
            __n128 *v258 = v275;
            unsigned int v35 = v13[v17];
            unsigned int v36 = *v13;
            if (v35 < *v13)
            {
              unsigned int *v13 = v35;
              v13[v17] = v36;
              __n128 v276 = *(__n128 *)v14;
              __n128 v385 = *(__n128 *)(v14 + 48);
              __n128 v422 = *(__n128 *)(v14 + 64);
              __n128 v313 = *(__n128 *)(v14 + 16);
              __n128 v348 = *(__n128 *)(v14 + 32);
              __n128 v37 = v18[4];
              __n128 v39 = v18[1];
              __n128 v38 = v18[2];
              *(__n128 *)(v14 + 48) = v18[3];
              *(__n128 *)(v14 + 64) = v37;
              *(__n128 *)(v14 + 16) = v39;
              *(__n128 *)(v14 + 32) = v38;
              *(__n128 *)uint64_t v14 = *v18;
              v18[3] = v385;
              v18[4] = v422;
              v18[1] = v313;
              v18[2] = v348;
              __n128 *v18 = v276;
            }
          }
        }
        else
        {
          if (v19 >= v20)
          {
            unsigned int *v13 = v20;
            v13[v17] = v21;
            __n128 v279 = *(__n128 *)v14;
            __n128 v388 = *(__n128 *)(v14 + 48);
            __n128 v425 = *(__n128 *)(v14 + 64);
            __n128 v316 = *(__n128 *)(v14 + 16);
            __n128 v351 = *(__n128 *)(v14 + 32);
            __n128 v47 = v18[4];
            __n128 v49 = v18[1];
            __n128 v48 = v18[2];
            *(__n128 *)(v14 + 48) = v18[3];
            *(__n128 *)(v14 + 64) = v47;
            *(__n128 *)(v14 + 16) = v49;
            *(__n128 *)(v14 + 32) = v48;
            *(__n128 *)uint64_t v14 = *v18;
            v18[3] = v388;
            v18[4] = v425;
            v18[1] = v316;
            v18[2] = v351;
            __n128 *v18 = v279;
            unsigned int v50 = *((_DWORD *)a3 - 1);
            unsigned int v51 = v13[v17];
            if (v50 >= v51) {
              goto LABEL_23;
            }
            v13[v17] = v50;
            *((_DWORD *)a3 - 1) = v51;
            __n128 v273 = *v18;
            __n128 v382 = v18[3];
            __n128 v419 = v18[4];
            __n128 v310 = v18[1];
            __n128 v345 = v18[2];
            uint64_t v23 = (__n128 *)(a4 - 5);
            __n128 v52 = (__n128)*(a4 - 1);
            __n128 v54 = (__n128)*(a4 - 4);
            __n128 v53 = (__n128)*(a4 - 3);
            v18[3] = (__n128)*(a4 - 2);
            v18[4] = v52;
            v18[1] = v54;
            v18[2] = v53;
            __n128 *v18 = *v258;
          }
          else
          {
            unsigned int *v13 = v19;
            *((_DWORD *)a3 - 1) = v21;
            __n128 v273 = *(__n128 *)v14;
            __n128 v382 = *(__n128 *)(v14 + 48);
            __n128 v419 = *(__n128 *)(v14 + 64);
            __n128 v310 = *(__n128 *)(v14 + 16);
            __n128 v345 = *(__n128 *)(v14 + 32);
            uint64_t v23 = (__n128 *)(a4 - 5);
            long long v24 = *(a4 - 1);
            long long v26 = *(a4 - 4);
            long long v25 = *(a4 - 3);
            *(_OWORD *)(v14 + 48) = *(a4 - 2);
            *(_OWORD *)(v14 + 64) = v24;
            *(_OWORD *)(v14 + 16) = v26;
            *(_OWORD *)(v14 + 32) = v25;
            *(__n128 *)uint64_t v14 = *v258;
          }
          v23[3] = v382;
          v23[4] = v419;
          v23[1] = v310;
          v23[2] = v345;
          __n128 *v23 = v273;
        }
LABEL_23:
        unsigned int v55 = (long long *)(v14 + 80);
        unint64_t v56 = v17 - 1;
        __n128 v57 = (__n128 *)(v14 + 80 * (v17 - 1));
        unsigned int v58 = v13[v17 - 1];
        unsigned int v59 = v13[1];
        unsigned int v60 = *((_DWORD *)a3 - 2);
        if (v58 >= v59)
        {
          if (v60 < v58)
          {
            v13[v56] = v60;
            *((_DWORD *)a3 - 2) = v58;
            long long v281 = (__int128)*v57;
            long long v390 = (__int128)v57[3];
            long long v427 = (__int128)v57[4];
            long long v318 = (__int128)v57[1];
            long long v353 = (__int128)v57[2];
            __n128 v64 = (__n128)*(a4 - 6);
            __n128 v66 = (__n128)*(a4 - 9);
            __n128 v65 = (__n128)*(a4 - 8);
            v57[3] = (__n128)*(a4 - 7);
            v57[4] = v64;
            v57[1] = v66;
            v57[2] = v65;
            __n128 *v57 = (__n128)*v257;
            *(a4 - 7) = v390;
            *(a4 - 6) = v427;
            *(a4 - 9) = v318;
            *(a4 - 8) = v353;
            long long *v257 = v281;
            unsigned int v67 = v13[v56];
            unsigned int v68 = v13[1];
            if (v67 < v68)
            {
              v13[1] = v67;
              v13[v56] = v68;
              __n128 v354 = *(__n128 *)(v14 + 112);
              __n128 v391 = *(__n128 *)(v14 + 128);
              __n128 v428 = *(__n128 *)(v14 + 144);
              long long v282 = *v55;
              __n128 v319 = *(__n128 *)(v14 + 96);
              __n128 v70 = v57[1];
              __n128 v69 = v57[2];
              __n128 v71 = v57[4];
              *(__n128 *)(v14 + 128) = v57[3];
              *(__n128 *)(v14 + 144) = v71;
              *(__n128 *)(v14 + 96) = v70;
              *(__n128 *)(v14 + 112) = v69;
              long long *v55 = (__int128)*v57;
              __n128 *v57 = (__n128)v282;
              v57[3] = v391;
              v57[4] = v428;
              v57[1] = v319;
              v57[2] = v354;
            }
          }
        }
        else if (v60 >= v58)
        {
          v13[1] = v58;
          v13[v56] = v59;
          __n128 v357 = *(__n128 *)(v14 + 112);
          __n128 v394 = *(__n128 *)(v14 + 128);
          __n128 v431 = *(__n128 *)(v14 + 144);
          long long v285 = *v55;
          __n128 v322 = *(__n128 *)(v14 + 96);
          __n128 v78 = v57[1];
          __n128 v77 = v57[2];
          __n128 v79 = v57[4];
          *(__n128 *)(v14 + 128) = v57[3];
          *(__n128 *)(v14 + 144) = v79;
          *(__n128 *)(v14 + 96) = v78;
          *(__n128 *)(v14 + 112) = v77;
          long long *v55 = (__int128)*v57;
          __n128 *v57 = (__n128)v285;
          v57[3] = v394;
          v57[4] = v431;
          v57[1] = v322;
          v57[2] = v357;
          unsigned int v80 = *((_DWORD *)a3 - 2);
          unsigned int v81 = v13[v56];
          if (v80 < v81)
          {
            v13[v56] = v80;
            *((_DWORD *)a3 - 2) = v81;
            long long v286 = (__int128)*v57;
            long long v395 = (__int128)v57[3];
            long long v432 = (__int128)v57[4];
            long long v323 = (__int128)v57[1];
            long long v358 = (__int128)v57[2];
            __n128 v82 = (__n128)*(a4 - 6);
            __n128 v84 = (__n128)*(a4 - 9);
            __n128 v83 = (__n128)*(a4 - 8);
            v57[3] = (__n128)*(a4 - 7);
            v57[4] = v82;
            v57[1] = v84;
            v57[2] = v83;
            __n128 *v57 = (__n128)*v257;
            *(a4 - 7) = v395;
            *(a4 - 6) = v432;
            *(a4 - 9) = v323;
            *(a4 - 8) = v358;
            long long *v257 = v286;
          }
        }
        else
        {
          v13[1] = v60;
          *((_DWORD *)a3 - 2) = v59;
          long long v352 = *(_OWORD *)(v14 + 112);
          long long v389 = *(_OWORD *)(v14 + 128);
          long long v426 = *(_OWORD *)(v14 + 144);
          long long v280 = *v55;
          long long v317 = *(_OWORD *)(v14 + 96);
          long long v62 = *(a4 - 9);
          long long v61 = *(a4 - 8);
          long long v63 = *(a4 - 6);
          *(_OWORD *)(v14 + 128) = *(a4 - 7);
          *(_OWORD *)(v14 + 144) = v63;
          *(_OWORD *)(v14 + 96) = v62;
          *(_OWORD *)(v14 + 112) = v61;
          long long *v55 = *v257;
          long long *v257 = v280;
          *(a4 - 7) = v389;
          *(a4 - 6) = v426;
          *(a4 - 9) = v317;
          *(a4 - 8) = v352;
        }
        long long v85 = (long long *)(v14 + 160);
        unint64_t v86 = v17 + 1;
        long long v87 = (__n128 *)(v14 + 80 * (v17 + 1));
        unsigned int v88 = v13[v17 + 1];
        unsigned int v89 = v13[2];
        unsigned int v90 = *((_DWORD *)a3 - 3);
        if (v88 >= v89)
        {
          if (v90 < v88)
          {
            v13[v86] = v90;
            *((_DWORD *)a3 - 3) = v88;
            long long v288 = (__int128)*v87;
            long long v397 = (__int128)v87[3];
            long long v434 = (__int128)v87[4];
            long long v325 = (__int128)v87[1];
            long long v360 = (__int128)v87[2];
            __n128 v94 = (__n128)*(a4 - 11);
            __n128 v96 = (__n128)*(a4 - 14);
            __n128 v95 = (__n128)*(a4 - 13);
            v87[3] = (__n128)*(a4 - 12);
            v87[4] = v94;
            v87[1] = v96;
            v87[2] = v95;
            __n128 *v87 = (__n128)*v256;
            *(a4 - 12) = v397;
            *(a4 - 11) = v434;
            *(a4 - 14) = v325;
            *(a4 - 13) = v360;
            long long *v256 = v288;
            unsigned int v97 = v13[v86];
            unsigned int v98 = v13[2];
            if (v97 < v98)
            {
              v13[2] = v97;
              v13[v86] = v98;
              __n128 v361 = *(__n128 *)(v14 + 192);
              __n128 v398 = *(__n128 *)(v14 + 208);
              __n128 v435 = *(__n128 *)(v14 + 224);
              long long v289 = *v85;
              __n128 v326 = *(__n128 *)(v14 + 176);
              __n128 v100 = v87[1];
              __n128 v99 = v87[2];
              __n128 v101 = v87[4];
              *(__n128 *)(v14 + 208) = v87[3];
              *(__n128 *)(v14 + 224) = v101;
              *(__n128 *)(v14 + 176) = v100;
              *(__n128 *)(v14 + 192) = v99;
              long long *v85 = (__int128)*v87;
              __n128 *v87 = (__n128)v289;
              v87[3] = v398;
              v87[4] = v435;
              v87[1] = v326;
              v87[2] = v361;
            }
          }
        }
        else if (v90 >= v88)
        {
          v13[2] = v88;
          v13[v86] = v89;
          __n128 v362 = *(__n128 *)(v14 + 192);
          __n128 v399 = *(__n128 *)(v14 + 208);
          __n128 v436 = *(__n128 *)(v14 + 224);
          long long v290 = *v85;
          __n128 v327 = *(__n128 *)(v14 + 176);
          __n128 v103 = v87[1];
          __n128 v102 = v87[2];
          __n128 v104 = v87[4];
          *(__n128 *)(v14 + 208) = v87[3];
          *(__n128 *)(v14 + 224) = v104;
          *(__n128 *)(v14 + 176) = v103;
          *(__n128 *)(v14 + 192) = v102;
          long long *v85 = (__int128)*v87;
          __n128 *v87 = (__n128)v290;
          v87[3] = v399;
          v87[4] = v436;
          v87[1] = v327;
          v87[2] = v362;
          unsigned int v105 = *((_DWORD *)a3 - 3);
          unsigned int v106 = v13[v86];
          if (v105 < v106)
          {
            v13[v86] = v105;
            *((_DWORD *)a3 - 3) = v106;
            long long v291 = (__int128)*v87;
            long long v400 = (__int128)v87[3];
            long long v437 = (__int128)v87[4];
            long long v328 = (__int128)v87[1];
            long long v363 = (__int128)v87[2];
            __n128 v107 = (__n128)*(a4 - 11);
            __n128 v109 = (__n128)*(a4 - 14);
            __n128 v108 = (__n128)*(a4 - 13);
            v87[3] = (__n128)*(a4 - 12);
            v87[4] = v107;
            v87[1] = v109;
            v87[2] = v108;
            __n128 *v87 = (__n128)*v256;
            *(a4 - 12) = v400;
            *(a4 - 11) = v437;
            *(a4 - 14) = v328;
            *(a4 - 13) = v363;
            long long *v256 = v291;
          }
        }
        else
        {
          v13[2] = v90;
          *((_DWORD *)a3 - 3) = v89;
          long long v359 = *(_OWORD *)(v14 + 192);
          long long v396 = *(_OWORD *)(v14 + 208);
          long long v433 = *(_OWORD *)(v14 + 224);
          long long v287 = *v85;
          long long v324 = *(_OWORD *)(v14 + 176);
          long long v92 = *(a4 - 14);
          long long v91 = *(a4 - 13);
          long long v93 = *(a4 - 11);
          *(_OWORD *)(v14 + 208) = *(a4 - 12);
          *(_OWORD *)(v14 + 224) = v93;
          *(_OWORD *)(v14 + 176) = v92;
          *(_OWORD *)(v14 + 192) = v91;
          long long *v85 = *v256;
          long long *v256 = v287;
          *(a4 - 12) = v396;
          *(a4 - 11) = v433;
          *(a4 - 14) = v324;
          *(a4 - 13) = v359;
        }
        unsigned int v110 = v13[v17];
        unsigned int v111 = v13[v56];
        unsigned int v112 = v13[v86];
        if (v110 >= v111)
        {
          if (v112 < v110)
          {
            v13[v17] = v112;
            v13[v86] = v110;
            __n128 v293 = *v18;
            __n128 v402 = v18[3];
            __n128 v439 = v18[4];
            __n128 v330 = v18[1];
            __n128 v365 = v18[2];
            __n128 v116 = v87[4];
            __n128 v117 = v87[2];
            v18[3] = v87[3];
            v18[4] = v116;
            __n128 v118 = *v87;
            v18[1] = v87[1];
            v18[2] = v117;
            __n128 *v18 = v118;
            __n128 *v87 = v293;
            v87[3] = v402;
            v87[4] = v439;
            v87[1] = v330;
            v87[2] = v365;
            unsigned int v119 = v13[v17];
            unsigned int v120 = v13[v56];
            if (v119 < v120)
            {
              v13[v56] = v119;
              v13[v17] = v120;
              __n128 v294 = *v57;
              __n128 v403 = v57[3];
              __n128 v440 = v57[4];
              __n128 v331 = v57[1];
              __n128 v366 = v57[2];
              __n128 v121 = v18[4];
              __n128 v122 = v18[2];
              v57[3] = v18[3];
              v57[4] = v121;
              __n128 v123 = *v18;
              v57[1] = v18[1];
              v57[2] = v122;
              __n128 *v57 = v123;
              __n128 *v18 = v294;
              v18[3] = v403;
              v18[4] = v440;
              v18[1] = v331;
              v18[2] = v366;
            }
          }
          goto LABEL_50;
        }
        if (v112 >= v110)
        {
          v13[v56] = v110;
          v13[v17] = v111;
          __n128 v295 = *v57;
          __n128 v404 = v57[3];
          __n128 v441 = v57[4];
          __n128 v332 = v57[1];
          __n128 v367 = v57[2];
          __n128 v124 = v18[4];
          __n128 v125 = v18[2];
          v57[3] = v18[3];
          v57[4] = v124;
          __n128 v126 = *v18;
          v57[1] = v18[1];
          v57[2] = v125;
          __n128 *v57 = v126;
          __n128 *v18 = v295;
          v18[3] = v404;
          v18[4] = v441;
          v18[1] = v332;
          v18[2] = v367;
          unsigned int v127 = v13[v86];
          unsigned int v128 = v13[v17];
          if (v127 >= v128)
          {
LABEL_50:
            unsigned int v132 = *v13;
            unsigned int *v13 = v13[v22];
            v13[v22] = v132;
            __n128 v284 = *(__n128 *)v14;
            __n128 v393 = *(__n128 *)(v14 + 48);
            __n128 v430 = *(__n128 *)(v14 + 64);
            __n128 v321 = *(__n128 *)(v14 + 16);
            __n128 v356 = *(__n128 *)(v14 + 32);
            goto LABEL_51;
          }
          v13[v17] = v127;
          v13[v86] = v128;
          __n128 v292 = *v18;
          __n128 v401 = v18[3];
          __n128 v438 = v18[4];
          __n128 v329 = v18[1];
          __n128 v364 = v18[2];
          __n128 v129 = v87[4];
          __n128 v130 = v87[2];
          v18[3] = v87[3];
          v18[4] = v129;
          __n128 v131 = *v87;
          v18[1] = v87[1];
          v18[2] = v130;
          __n128 *v18 = v131;
        }
        else
        {
          v13[v56] = v112;
          v13[v86] = v111;
          __n128 v292 = *v57;
          __n128 v401 = v57[3];
          __n128 v438 = v57[4];
          __n128 v329 = v57[1];
          __n128 v364 = v57[2];
          __n128 v113 = v87[4];
          __n128 v114 = v87[2];
          v57[3] = v87[3];
          v57[4] = v113;
          __n128 v115 = *v87;
          v57[1] = v87[1];
          v57[2] = v114;
          __n128 *v57 = v115;
        }
        __n128 *v87 = v292;
        v87[3] = v401;
        v87[4] = v438;
        v87[1] = v329;
        v87[2] = v364;
        goto LABEL_50;
      }
      unsigned int v27 = *v13;
      unsigned int v28 = v13[v17];
      if (*v13 >= v28)
      {
        if (v19 < v27)
        {
          unsigned int *v13 = v19;
          *((_DWORD *)a3 - 1) = v27;
          __n128 v277 = *(__n128 *)v14;
          long long v386 = *(_OWORD *)(v14 + 48);
          long long v423 = *(_OWORD *)(v14 + 64);
          long long v314 = *(_OWORD *)(v14 + 16);
          long long v349 = *(_OWORD *)(v14 + 32);
          long long v40 = *(a4 - 1);
          long long v42 = *(a4 - 4);
          long long v41 = *(a4 - 3);
          *(_OWORD *)(v14 + 48) = *(a4 - 2);
          *(_OWORD *)(v14 + 64) = v40;
          *(_OWORD *)(v14 + 16) = v42;
          *(_OWORD *)(v14 + 32) = v41;
          *(__n128 *)uint64_t v14 = *v258;
          *(a4 - 2) = v386;
          *(a4 - 1) = v423;
          *(a4 - 4) = v314;
          *(a4 - 3) = v349;
          __n128 *v258 = v277;
          unsigned int v43 = v13[v17];
          if (*v13 < v43)
          {
            v13[v17] = *v13;
            unsigned int *v13 = v43;
            __n128 v278 = *v18;
            __n128 v387 = v18[3];
            __n128 v424 = v18[4];
            __n128 v315 = v18[1];
            __n128 v350 = v18[2];
            __n128 v44 = *(__n128 *)(v14 + 64);
            __n128 v46 = *(__n128 *)(v14 + 16);
            __n128 v45 = *(__n128 *)(v14 + 32);
            v18[3] = *(__n128 *)(v14 + 48);
            v18[4] = v44;
            v18[1] = v46;
            v18[2] = v45;
            __n128 *v18 = *(__n128 *)v14;
            *(__n128 *)(v14 + 48) = v387;
            *(__n128 *)(v14 + 64) = v424;
            *(__n128 *)(v14 + 16) = v315;
            *(__n128 *)(v14 + 32) = v350;
            *(__n128 *)uint64_t v14 = v278;
          }
        }
      }
      else if (v19 >= v27)
      {
        v13[v17] = v27;
        unsigned int *v13 = v28;
        __n128 v283 = *v18;
        __n128 v392 = v18[3];
        __n128 v429 = v18[4];
        __n128 v320 = v18[1];
        __n128 v355 = v18[2];
        __n128 v72 = *(__n128 *)(v14 + 64);
        __n128 v74 = *(__n128 *)(v14 + 16);
        __n128 v73 = *(__n128 *)(v14 + 32);
        v18[3] = *(__n128 *)(v14 + 48);
        v18[4] = v72;
        v18[1] = v74;
        v18[2] = v73;
        __n128 *v18 = *(__n128 *)v14;
        *(__n128 *)(v14 + 48) = v392;
        *(__n128 *)(v14 + 64) = v429;
        *(__n128 *)(v14 + 16) = v320;
        *(__n128 *)(v14 + 32) = v355;
        *(__n128 *)uint64_t v14 = v283;
        unsigned int v75 = *((_DWORD *)a3 - 1);
        unsigned int v76 = *v13;
        if (v75 < *v13)
        {
          unsigned int *v13 = v75;
          *((_DWORD *)a3 - 1) = v76;
          __n128 v284 = *(__n128 *)v14;
          __n128 v393 = *(__n128 *)(v14 + 48);
          __n128 v430 = *(__n128 *)(v14 + 64);
          __n128 v321 = *(__n128 *)(v14 + 16);
          __n128 v356 = *(__n128 *)(v14 + 32);
          unsigned __int16 v18 = (__n128 *)(a4 - 5);
LABEL_51:
          __n128 v133 = v18[4];
          __n128 v135 = v18[1];
          __n128 v134 = v18[2];
          *(__n128 *)(v14 + 48) = v18[3];
          *(__n128 *)(v14 + 64) = v133;
          *(__n128 *)(v14 + 16) = v135;
          *(__n128 *)(v14 + 32) = v134;
          *(__n128 *)uint64_t v14 = *v18;
          v18[3] = v393;
          v18[4] = v430;
          v18[1] = v321;
          v18[2] = v356;
          __n128 *v18 = v284;
        }
      }
      else
      {
        v13[v17] = v19;
        *((_DWORD *)a3 - 1) = v28;
        __n128 v274 = *v18;
        long long v383 = (__int128)v18[3];
        long long v420 = (__int128)v18[4];
        long long v311 = (__int128)v18[1];
        long long v346 = (__int128)v18[2];
        __n128 v29 = (__n128)*(a4 - 1);
        __n128 v31 = (__n128)*(a4 - 4);
        __n128 v30 = (__n128)*(a4 - 3);
        v18[3] = (__n128)*(a4 - 2);
        v18[4] = v29;
        v18[1] = v31;
        v18[2] = v30;
        __n128 *v18 = *v258;
        *(a4 - 2) = v383;
        *(a4 - 1) = v420;
        *(a4 - 4) = v311;
        *(a4 - 3) = v346;
        __n128 *v258 = v274;
      }
      --a6;
      unsigned int v136 = *v13;
      if ((a7 & 1) == 0 && *(v13 - 1) >= v136)
      {
        __n128 v307 = *(__n128 *)v14;
        long long v416 = *(_OWORD *)(v14 + 48);
        long long v453 = *(_OWORD *)(v14 + 64);
        __n128 v342 = *(__n128 *)(v14 + 16);
        long long v379 = *(_OWORD *)(v14 + 32);
        if (v136 < *((_DWORD *)a3 - 1))
        {
          uint64_t v11 = v13;
          unsigned __int16 v12 = (long long *)v14;
          do
          {
            unsigned int v164 = v11[1];
            ++v11;
            v12 += 5;
          }
          while (v136 >= v164);
        }
        else
        {
          long long v165 = v13 + 1;
          long long v166 = (long long *)(v14 + 80);
          do
          {
            uint64_t v11 = v165;
            unsigned __int16 v12 = v166;
            if (v165 >= (unsigned int *)a3) {
              break;
            }
            ++v165;
            v166 += 5;
          }
          while (v136 >= *v11);
        }
        long long v167 = a3;
        long long v168 = a4;
        if (v11 < (unsigned int *)a3)
        {
          long long v167 = a3;
          long long v168 = a4;
          do
          {
            unsigned int v169 = *((_DWORD *)v167 - 1);
            v167 -= 4;
            v168 -= 5;
          }
          while (v136 < v169);
        }
        if (v11 < (unsigned int *)v167)
        {
          unsigned int v170 = *v11;
          unsigned int v171 = *(_DWORD *)v167;
          do
          {
            unsigned int *v11 = v171;
            *(_DWORD *)long long v167 = v170;
            long long v264 = *v12;
            long long v270 = v12[3];
            long long v272 = v12[4];
            long long v266 = v12[1];
            long long v268 = v12[2];
            long long v172 = v168[4];
            long long v174 = v168[1];
            long long v173 = v168[2];
            v12[3] = v168[3];
            v12[4] = v172;
            v12[1] = v174;
            v12[2] = v173;
            long long *v12 = *v168;
            v168[3] = v270;
            v168[4] = v272;
            v168[1] = v266;
            v168[2] = v268;
            long long *v168 = v264;
            do
            {
              unsigned int v175 = v11[1];
              ++v11;
              unsigned int v170 = v175;
              v12 += 5;
            }
            while (v136 >= v175);
            do
            {
              unsigned int v176 = *((_DWORD *)v167 - 1);
              v167 -= 4;
              unsigned int v171 = v176;
              v168 -= 5;
            }
            while (v136 < v176);
          }
          while (v11 < (unsigned int *)v167);
        }
        v177 = v11 - 1;
        v178 = (__n128 *)(v12 - 5);
        BOOL v7 = v11 - 1 >= v13;
        BOOL v8 = v11 - 1 == v13;
        if (v11 - 1 != v13)
        {
          unsigned int *v13 = *v177;
          *(__n128 *)uint64_t v14 = *v178;
          long long v179 = *(v12 - 4);
          long long v180 = *(v12 - 3);
          long long v181 = *(v12 - 1);
          *(_OWORD *)(v14 + 48) = *(v12 - 2);
          *(_OWORD *)(v14 + 64) = v181;
          *(_OWORD *)(v14 + 16) = v179;
          *(_OWORD *)(v14 + 32) = v180;
        }
        a7 = 0;
        unsigned int *v177 = v136;
        __n128 *v178 = v307;
        __n128 result = v342;
        *(v12 - 2) = v416;
        *(v12 - 1) = v453;
        *(v12 - 4) = (__int128)v342;
        *(v12 - 3) = v379;
        goto LABEL_2;
      }
      uint64_t v137 = 0;
      long long v138 = v13;
      __n128 v306 = *(__n128 *)v14;
      long long v415 = *(_OWORD *)(v14 + 48);
      long long v452 = *(_OWORD *)(v14 + 64);
      long long v341 = *(_OWORD *)(v14 + 16);
      long long v378 = *(_OWORD *)(v14 + 32);
      long long v139 = (long long *)v14;
      do
      {
        v139 += 5;
        unsigned int v140 = v13[++v137];
      }
      while (v140 < v136);
      __n128 v141 = &v13[v137];
      long long v142 = a3;
      long long v143 = a4;
      if (v137 == 1)
      {
        long long v142 = a3;
        long long v143 = a4;
        do
        {
          if (v141 >= (unsigned int *)v142) {
            break;
          }
          unsigned int v145 = *((_DWORD *)v142 - 1);
          v142 -= 4;
          v143 -= 5;
        }
        while (v145 >= v136);
      }
      else
      {
        do
        {
          unsigned int v144 = *((_DWORD *)v142 - 1);
          v142 -= 4;
          v143 -= 5;
        }
        while (v144 >= v136);
      }
      if (v141 >= (unsigned int *)v142)
      {
        long long v154 = v141 - 1;
        long long v155 = v139 - 5;
        if (v141 - 1 == v13) {
          goto LABEL_72;
        }
LABEL_71:
        unsigned int *v13 = *v154;
        *(_OWORD *)uint64_t v14 = *v155;
        long long v156 = v155[1];
        long long v157 = v155[2];
        long long v158 = v155[4];
        *(_OWORD *)(v14 + 48) = v155[3];
        *(_OWORD *)(v14 + 64) = v158;
        *(_OWORD *)(v14 + 16) = v156;
        *(_OWORD *)(v14 + 32) = v157;
        goto LABEL_72;
      }
      unsigned int v146 = *(_DWORD *)v142;
      long long v147 = &v13[v137];
      long long v148 = (unsigned int *)v142;
      do
      {
        unsigned int *v147 = v146;
        unsigned int *v148 = v140;
        long long v267 = v139[2];
        long long v269 = v139[3];
        long long v271 = v139[4];
        long long v263 = *v139;
        long long v265 = v139[1];
        long long v150 = v143[1];
        long long v149 = v143[2];
        long long v151 = v143[4];
        v139[3] = v143[3];
        v139[4] = v151;
        v139[1] = v150;
        v139[2] = v149;
        long long *v139 = *v143;
        long long *v143 = v263;
        v143[3] = v269;
        v143[4] = v271;
        v143[1] = v265;
        v143[2] = v267;
        do
        {
          unsigned int v152 = v147[1];
          ++v147;
          unsigned int v140 = v152;
          v139 += 5;
        }
        while (v152 < v136);
        do
        {
          unsigned int v153 = *--v148;
          unsigned int v146 = v153;
          v143 -= 5;
        }
        while (v153 >= v136);
      }
      while (v147 < v148);
      long long v154 = v147 - 1;
      long long v155 = v139 - 5;
      if (v147 - 1 != v13) {
        goto LABEL_71;
      }
LABEL_72:
      unsigned int *v154 = v136;
      long long *v155 = (__int128)v306;
      v155[3] = v415;
      v155[4] = v452;
      v155[1] = v341;
      v155[2] = v378;
      uint64_t v159 = v14;
      if (v141 < (unsigned int *)v142) {
        goto LABEL_75;
      }
      v259 = v13;
      long long v160 = v13;
      uint64_t v161 = v14;
      BOOL v162 = sub_EC5904(v13, v14, v154, (uint64_t)v155);
      uint64_t v13 = v154 + 1;
      if (sub_EC5904(v154 + 1, (uint64_t)(v155 + 5), (unsigned int *)a3, (uint64_t)a4)) {
        break;
      }
      uint64_t v14 = (uint64_t)(v155 + 5);
      long long v138 = v160;
      uint64_t v159 = v161;
      if (!v162)
      {
LABEL_75:
        sub_EC4428(v138, v159, v154, v155, a5, a6, a7 & 1);
        a7 = 0;
        uint64_t v11 = v154 + 1;
        unsigned __int16 v12 = v155 + 5;
        goto LABEL_2;
      }
    }
    a3 = (char *)v154;
    a4 = v155;
    a2 = (long long *)v14;
    a1 = v259;
    if (!v162) {
      continue;
    }
    return result;
  }
}

BOOL sub_EC5904(unsigned int *a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v7 = a3 - a1;
  BOOL result = 1;
  switch(v7)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned int v10 = *(a3 - 1);
      unsigned int v11 = *a1;
      if (v10 < *a1)
      {
        *a1 = v10;
        *(a3 - 1) = v11;
        long long v127 = *(_OWORD *)(a2 + 32);
        long long v142 = *(_OWORD *)(a2 + 48);
        long long v157 = *(_OWORD *)(a2 + 64);
        __n128 v97 = *(__n128 *)a2;
        long long v112 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a2 = *(_OWORD *)(a4 - 80);
        long long v12 = *(_OWORD *)(a4 - 16);
        long long v14 = *(_OWORD *)(a4 - 64);
        long long v13 = *(_OWORD *)(a4 - 48);
        *(_OWORD *)(a2 + 48) = *(_OWORD *)(a4 - 32);
        *(_OWORD *)(a2 + 64) = v12;
        *(_OWORD *)(a2 + 16) = v14;
        *(_OWORD *)(a2 + 32) = v13;
        *(_OWORD *)(a4 - 32) = v142;
        *(_OWORD *)(a4 - 16) = v157;
        *(__n128 *)(a4 - 80) = v97;
        *(_OWORD *)(a4 - 64) = v112;
        *(_OWORD *)(a4 - 48) = v127;
      }
      return result;
    case 3:
      long long v26 = (__n128 *)(a2 + 80);
      unsigned int v27 = (__n128 *)(a4 - 80);
      unsigned int v29 = *a1;
      unsigned int v28 = a1[1];
      unsigned int v30 = *(a3 - 1);
      if (v28 >= *a1)
      {
        if (v30 < v28)
        {
          a1[1] = v30;
          *(a3 - 1) = v28;
          long long v136 = *(_OWORD *)(a2 + 112);
          long long v151 = *(_OWORD *)(a2 + 128);
          long long v166 = *(_OWORD *)(a2 + 144);
          __n128 v106 = *v26;
          long long v121 = *(_OWORD *)(a2 + 96);
          *long long v26 = *v27;
          long long v62 = *(_OWORD *)(a4 - 16);
          long long v64 = *(_OWORD *)(a4 - 64);
          long long v63 = *(_OWORD *)(a4 - 48);
          *(_OWORD *)(a2 + 128) = *(_OWORD *)(a4 - 32);
          *(_OWORD *)(a2 + 144) = v62;
          *(_OWORD *)(a2 + 96) = v64;
          *(_OWORD *)(a2 + 112) = v63;
          *(_OWORD *)(a4 - 32) = v151;
          *(_OWORD *)(a4 - 16) = v166;
          *unsigned int v27 = v106;
          *(_OWORD *)(a4 - 64) = v121;
          *(_OWORD *)(a4 - 48) = v136;
          unsigned int v66 = *a1;
          unsigned int v65 = a1[1];
          if (v65 < *a1)
          {
            *a1 = v65;
            a1[1] = v66;
            long long v137 = *(_OWORD *)(a2 + 32);
            long long v152 = *(_OWORD *)(a2 + 48);
            long long v167 = *(_OWORD *)(a2 + 64);
            __n128 v107 = *(__n128 *)a2;
            long long v122 = *(_OWORD *)(a2 + 16);
            *(__n128 *)a2 = *v26;
            long long v67 = *(_OWORD *)(a2 + 144);
            long long v69 = *(_OWORD *)(a2 + 96);
            long long v68 = *(_OWORD *)(a2 + 112);
            *(_OWORD *)(a2 + 48) = *(_OWORD *)(a2 + 128);
            *(_OWORD *)(a2 + 64) = v67;
            *(_OWORD *)(a2 + 16) = v69;
            *(_OWORD *)(a2 + 32) = v68;
            *(_OWORD *)(a2 + 128) = v152;
            *(_OWORD *)(a2 + 144) = v167;
            *long long v26 = v107;
            *(_OWORD *)(a2 + 96) = v122;
            *(_OWORD *)(a2 + 112) = v137;
          }
        }
      }
      else
      {
        if (v30 >= v28)
        {
          *a1 = v28;
          a1[1] = v29;
          long long v140 = *(_OWORD *)(a2 + 32);
          long long v155 = *(_OWORD *)(a2 + 48);
          long long v170 = *(_OWORD *)(a2 + 64);
          __n128 v110 = *(__n128 *)a2;
          long long v125 = *(_OWORD *)(a2 + 16);
          *(__n128 *)a2 = *v26;
          long long v89 = *(_OWORD *)(a2 + 144);
          long long v91 = *(_OWORD *)(a2 + 96);
          long long v90 = *(_OWORD *)(a2 + 112);
          *(_OWORD *)(a2 + 48) = *(_OWORD *)(a2 + 128);
          *(_OWORD *)(a2 + 64) = v89;
          *(_OWORD *)(a2 + 16) = v91;
          *(_OWORD *)(a2 + 32) = v90;
          *(_OWORD *)(a2 + 128) = v155;
          *(_OWORD *)(a2 + 144) = v170;
          *long long v26 = v110;
          *(_OWORD *)(a2 + 96) = v125;
          *(_OWORD *)(a2 + 112) = v140;
          unsigned int v92 = *(a3 - 1);
          unsigned int v93 = a1[1];
          if (v92 >= v93) {
            return result;
          }
          a1[1] = v92;
          *(a3 - 1) = v93;
          long long v129 = *(_OWORD *)(a2 + 112);
          long long v144 = *(_OWORD *)(a2 + 128);
          long long v159 = *(_OWORD *)(a2 + 144);
          __n128 v99 = *v26;
          long long v114 = *(_OWORD *)(a2 + 96);
          *long long v26 = *v27;
          long long v94 = *(_OWORD *)(a4 - 16);
          long long v96 = *(_OWORD *)(a4 - 64);
          long long v95 = *(_OWORD *)(a4 - 48);
          *(_OWORD *)(a2 + 128) = *(_OWORD *)(a4 - 32);
          *(_OWORD *)(a2 + 144) = v94;
          *(_OWORD *)(a2 + 96) = v96;
          *(_OWORD *)(a2 + 112) = v95;
        }
        else
        {
          *a1 = v30;
          *(a3 - 1) = v29;
          long long v129 = *(_OWORD *)(a2 + 32);
          long long v144 = *(_OWORD *)(a2 + 48);
          long long v159 = *(_OWORD *)(a2 + 64);
          __n128 v99 = *(__n128 *)a2;
          long long v114 = *(_OWORD *)(a2 + 16);
          *(__n128 *)a2 = *v27;
          long long v31 = *(_OWORD *)(a4 - 16);
          long long v33 = *(_OWORD *)(a4 - 64);
          long long v32 = *(_OWORD *)(a4 - 48);
          *(_OWORD *)(a2 + 48) = *(_OWORD *)(a4 - 32);
          *(_OWORD *)(a2 + 64) = v31;
          *(_OWORD *)(a2 + 16) = v33;
          *(_OWORD *)(a2 + 32) = v32;
        }
        *(_OWORD *)(a4 - 32) = v144;
        *(_OWORD *)(a4 - 16) = v159;
        *unsigned int v27 = v99;
        *(_OWORD *)(a4 - 64) = v114;
        *(_OWORD *)(a4 - 48) = v129;
      }
      return result;
    case 4:
      sub_EC24C8(a1, (__n128 *)a2, a1 + 1, (__n128 *)(a2 + 80), a1 + 2, (__n128 *)(a2 + 160), a3 - 1, (__n128 *)(a4 - 80));
      return 1;
    case 5:
      __n128 v34 = (__n128 *)(a2 + 80);
      unsigned int v35 = a1 + 2;
      unsigned int v36 = (__n128 *)(a2 + 160);
      __n128 v37 = a1 + 3;
      __n128 v38 = (__n128 *)(a2 + 240);
      sub_EC24C8(a1, (__n128 *)a2, a1 + 1, (__n128 *)(a2 + 80), a1 + 2, (__n128 *)(a2 + 160), a1 + 3, (__n128 *)(a2 + 240));
      unsigned int v39 = *(a3 - 1);
      unsigned int v40 = a1[3];
      if (v39 >= v40) {
        return 1;
      }
      *__n128 v37 = v39;
      *(a3 - 1) = v40;
      long long v130 = *(_OWORD *)(a2 + 272);
      long long v145 = *(_OWORD *)(a2 + 288);
      long long v160 = *(_OWORD *)(a2 + 304);
      __n128 v100 = *v38;
      long long v115 = *(_OWORD *)(a2 + 256);
      *__n128 v38 = *(__n128 *)(a4 - 80);
      long long v41 = *(_OWORD *)(a4 - 16);
      long long v43 = *(_OWORD *)(a4 - 64);
      long long v42 = *(_OWORD *)(a4 - 48);
      *(_OWORD *)(a2 + 288) = *(_OWORD *)(a4 - 32);
      *(_OWORD *)(a2 + 304) = v41;
      *(_OWORD *)(a2 + 256) = v43;
      *(_OWORD *)(a2 + 272) = v42;
      *(_OWORD *)(a4 - 32) = v145;
      *(_OWORD *)(a4 - 16) = v160;
      *(__n128 *)(a4 - 80) = v100;
      *(_OWORD *)(a4 - 64) = v115;
      *(_OWORD *)(a4 - 48) = v130;
      unsigned int v44 = *v35;
      if (*v37 >= *v35) {
        return 1;
      }
      *unsigned int v35 = *v37;
      *__n128 v37 = v44;
      long long v131 = *(_OWORD *)(a2 + 192);
      long long v146 = *(_OWORD *)(a2 + 208);
      long long v161 = *(_OWORD *)(a2 + 224);
      __n128 v101 = *v36;
      long long v116 = *(_OWORD *)(a2 + 176);
      long long v45 = *(_OWORD *)(a2 + 288);
      *(_OWORD *)(a2 + 192) = *(_OWORD *)(a2 + 272);
      *(_OWORD *)(a2 + 208) = v45;
      *(_OWORD *)(a2 + 224) = *(_OWORD *)(a2 + 304);
      long long v46 = *(_OWORD *)(a2 + 256);
      *unsigned int v36 = *v38;
      *(_OWORD *)(a2 + 176) = v46;
      *(_OWORD *)(a2 + 288) = v146;
      *(_OWORD *)(a2 + 304) = v161;
      *(_OWORD *)(a2 + 256) = v116;
      *(_OWORD *)(a2 + 272) = v131;
      *__n128 v38 = v101;
      unsigned int v47 = a1[1];
      if (*v35 >= v47) {
        return 1;
      }
      a1[1] = *v35;
      a1[2] = v47;
      long long v132 = *(_OWORD *)(a2 + 112);
      long long v147 = *(_OWORD *)(a2 + 128);
      long long v162 = *(_OWORD *)(a2 + 144);
      __n128 v102 = *v34;
      long long v117 = *(_OWORD *)(a2 + 96);
      long long v48 = *(_OWORD *)(a2 + 208);
      *(_OWORD *)(a2 + 112) = *(_OWORD *)(a2 + 192);
      *(_OWORD *)(a2 + 128) = v48;
      *(_OWORD *)(a2 + 144) = *(_OWORD *)(a2 + 224);
      long long v49 = *(_OWORD *)(a2 + 176);
      *__n128 v34 = *v36;
      *(_OWORD *)(a2 + 96) = v49;
      *(_OWORD *)(a2 + 208) = v147;
      *(_OWORD *)(a2 + 224) = v162;
      *(_OWORD *)(a2 + 176) = v117;
      *(_OWORD *)(a2 + 192) = v132;
      *unsigned int v36 = v102;
      unsigned int v51 = *a1;
      unsigned int v50 = a1[1];
      if (v50 >= *a1) {
        return 1;
      }
      *a1 = v50;
      a1[1] = v51;
      long long v133 = *(_OWORD *)(a2 + 32);
      long long v148 = *(_OWORD *)(a2 + 48);
      long long v163 = *(_OWORD *)(a2 + 64);
      __n128 v103 = *(__n128 *)a2;
      long long v118 = *(_OWORD *)(a2 + 16);
      *(__n128 *)a2 = *v34;
      long long v52 = *(_OWORD *)(a2 + 144);
      long long v54 = *(_OWORD *)(a2 + 96);
      long long v53 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a2 + 48) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a2 + 64) = v52;
      *(_OWORD *)(a2 + 16) = v54;
      *(_OWORD *)(a2 + 32) = v53;
      *(_OWORD *)(a2 + 128) = v148;
      *(_OWORD *)(a2 + 144) = v163;
      BOOL result = 1;
      *__n128 v34 = v103;
      *(_OWORD *)(a2 + 96) = v118;
      *(_OWORD *)(a2 + 112) = v133;
      return result;
    default:
      uint64_t v15 = a1 + 2;
      unsigned int v16 = a1[2];
      unint64_t v17 = (__n128 *)(a2 + 160);
      unsigned __int16 v18 = (__n128 *)(a2 + 80);
      unsigned int v20 = *a1;
      unsigned int v19 = a1[1];
      if (v19 >= *a1)
      {
        if (v16 < v19)
        {
          a1[1] = v16;
          a1[2] = v19;
          long long v134 = *(_OWORD *)(a2 + 112);
          long long v149 = *(_OWORD *)(a2 + 128);
          long long v164 = *(_OWORD *)(a2 + 144);
          __n128 v104 = *v18;
          long long v119 = *(_OWORD *)(a2 + 96);
          long long v55 = *(_OWORD *)(a2 + 208);
          *(_OWORD *)(a2 + 112) = *(_OWORD *)(a2 + 192);
          *(_OWORD *)(a2 + 128) = v55;
          *(_OWORD *)(a2 + 144) = *(_OWORD *)(a2 + 224);
          long long v56 = *(_OWORD *)(a2 + 176);
          __n128 *v18 = *v17;
          *(_OWORD *)(a2 + 96) = v56;
          *(_OWORD *)(a2 + 208) = v149;
          *(_OWORD *)(a2 + 224) = v164;
          *(_OWORD *)(a2 + 176) = v119;
          *(_OWORD *)(a2 + 192) = v134;
          *unint64_t v17 = v104;
          unsigned int v58 = *a1;
          unsigned int v57 = a1[1];
          if (v57 < *a1)
          {
            *a1 = v57;
            a1[1] = v58;
            long long v135 = *(_OWORD *)(a2 + 32);
            long long v150 = *(_OWORD *)(a2 + 48);
            long long v165 = *(_OWORD *)(a2 + 64);
            __n128 v105 = *(__n128 *)a2;
            long long v120 = *(_OWORD *)(a2 + 16);
            *(__n128 *)a2 = *v18;
            long long v59 = *(_OWORD *)(a2 + 144);
            long long v61 = *(_OWORD *)(a2 + 96);
            long long v60 = *(_OWORD *)(a2 + 112);
            *(_OWORD *)(a2 + 48) = *(_OWORD *)(a2 + 128);
            *(_OWORD *)(a2 + 64) = v59;
            *(_OWORD *)(a2 + 16) = v61;
            *(_OWORD *)(a2 + 32) = v60;
            *(_OWORD *)(a2 + 128) = v150;
            *(_OWORD *)(a2 + 144) = v165;
            __n128 *v18 = v105;
            *(_OWORD *)(a2 + 96) = v120;
            *(_OWORD *)(a2 + 112) = v135;
          }
        }
      }
      else
      {
        if (v16 >= v19)
        {
          *a1 = v19;
          a1[1] = v20;
          long long v138 = *(_OWORD *)(a2 + 32);
          long long v153 = *(_OWORD *)(a2 + 48);
          long long v168 = *(_OWORD *)(a2 + 64);
          __n128 v108 = *(__n128 *)a2;
          long long v123 = *(_OWORD *)(a2 + 16);
          *(__n128 *)a2 = *v18;
          long long v70 = *(_OWORD *)(a2 + 144);
          long long v72 = *(_OWORD *)(a2 + 96);
          long long v71 = *(_OWORD *)(a2 + 112);
          *(_OWORD *)(a2 + 48) = *(_OWORD *)(a2 + 128);
          *(_OWORD *)(a2 + 64) = v70;
          *(_OWORD *)(a2 + 16) = v72;
          *(_OWORD *)(a2 + 32) = v71;
          *(_OWORD *)(a2 + 128) = v153;
          *(_OWORD *)(a2 + 144) = v168;
          __n128 *v18 = v108;
          *(_OWORD *)(a2 + 96) = v123;
          *(_OWORD *)(a2 + 112) = v138;
          unsigned int v74 = a1[1];
          unsigned int v73 = a1[2];
          if (v73 >= v74) {
            goto LABEL_25;
          }
          a1[1] = v73;
          a1[2] = v74;
          long long v139 = *(_OWORD *)(a2 + 112);
          long long v154 = *(_OWORD *)(a2 + 128);
          long long v169 = *(_OWORD *)(a2 + 144);
          __n128 v109 = *v18;
          long long v124 = *(_OWORD *)(a2 + 96);
          long long v75 = *(_OWORD *)(a2 + 208);
          *(_OWORD *)(a2 + 112) = *(_OWORD *)(a2 + 192);
          *(_OWORD *)(a2 + 128) = v75;
          *(_OWORD *)(a2 + 144) = *(_OWORD *)(a2 + 224);
          long long v76 = *(_OWORD *)(a2 + 176);
          __n128 *v18 = *v17;
          *(_OWORD *)(a2 + 96) = v76;
          __n128 v24 = v109;
          long long v25 = v124;
          *(_OWORD *)(a2 + 208) = v154;
          *(_OWORD *)(a2 + 224) = v169;
          *(_OWORD *)(a2 + 192) = v139;
        }
        else
        {
          *a1 = v16;
          a1[2] = v20;
          long long v128 = *(_OWORD *)(a2 + 32);
          long long v143 = *(_OWORD *)(a2 + 48);
          long long v158 = *(_OWORD *)(a2 + 64);
          __n128 v98 = *(__n128 *)a2;
          long long v113 = *(_OWORD *)(a2 + 16);
          *(__n128 *)a2 = *v17;
          long long v21 = *(_OWORD *)(a2 + 224);
          long long v23 = *(_OWORD *)(a2 + 176);
          long long v22 = *(_OWORD *)(a2 + 192);
          *(_OWORD *)(a2 + 48) = *(_OWORD *)(a2 + 208);
          *(_OWORD *)(a2 + 64) = v21;
          *(_OWORD *)(a2 + 16) = v23;
          *(_OWORD *)(a2 + 32) = v22;
          *(_OWORD *)(a2 + 208) = v143;
          *(_OWORD *)(a2 + 224) = v158;
          *(_OWORD *)(a2 + 192) = v128;
          __n128 v24 = v98;
          long long v25 = v113;
        }
        *unint64_t v17 = v24;
        *(_OWORD *)(a2 + 176) = v25;
      }
LABEL_25:
      __n128 v77 = a1 + 3;
      if (a1 + 3 == a3) {
        return 1;
      }
      int v78 = 0;
      __n128 v79 = (__n128 *)(a2 + 240);
      uint64_t v80 = 12;
      break;
  }
  while (1)
  {
    unsigned int v82 = *v77;
    if (*v77 < *v15)
    {
      __n128 v156 = v79[3];
      __n128 v171 = v79[4];
      __n128 v111 = *v79;
      __n128 v126 = v79[1];
      __n128 v141 = v79[2];
      unsigned int v83 = *v15;
      uint64_t v84 = v80;
      do
      {
        *(unsigned int *)((char *)a1 + v84) = v83;
        long long v85 = v17;
        __n128 v86 = v17[3];
        v17[7] = v17[2];
        v17[8] = v86;
        v17[9] = v17[4];
        __n128 v87 = v17[1];
        v17[5] = *v17;
        v17[6] = v87;
        uint64_t v88 = v84 - 4;
        if (v84 == 4)
        {
          unsigned int v81 = a1;
          goto LABEL_28;
        }
        v17 -= 5;
        unsigned int v83 = *(unsigned int *)((char *)a1 + v84 - 8);
        v84 -= 4;
      }
      while (v82 < v83);
      unsigned int v81 = (unsigned int *)((char *)a1 + v88);
LABEL_28:
      *unsigned int v81 = v82;
      __n128 *v85 = v111;
      v85[3] = v156;
      v85[4] = v171;
      v85[1] = v126;
      v85[2] = v141;
      if (++v78 == 8) {
        return v77 + 1 == a3;
      }
    }
    uint64_t v15 = v77;
    unint64_t v17 = v79;
    v79 += 5;
    v80 += 4;
    if (++v77 == a3) {
      return 1;
    }
  }
}

uint64_t sub_EC60A4(uint64_t result, unsigned __int16 *a2, void **a3, uint64_t a4, int a5)
{
  unsigned int v10 = (unsigned __int16 *)result;
LABEL_2:
  unsigned int v11 = a2 - 1;
  long long v12 = v10;
LABEL_3:
  uint64_t v13 = 1 - a4;
  int v44 = a5;
  while (1)
  {
    unsigned int v10 = v12;
    uint64_t v14 = (char *)a2 - (char *)v12;
    unint64_t v15 = v14 >> 1;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          unsigned __int16 v27 = *v10;
          uint64_t v28 = sub_EDCFBC(*a3, *(a2 - 1));
          BOOL result = sub_EDCFBC(*a3, v27);
          if (*(unsigned __int8 *)(v28 + 16) < *(unsigned __int8 *)(result + 16))
          {
            unsigned __int16 v29 = *v10;
            *unsigned int v10 = *(a2 - 1);
            *(a2 - 1) = v29;
          }
          break;
        case 3uLL:
          BOOL result = sub_EC6650(v10, v10 + 1, v11, a3);
          break;
        case 4uLL:
          BOOL result = sub_EC6D70(v10, v10 + 1, v10 + 2, v11, a3);
          break;
        case 5uLL:
          BOOL result = sub_EC6E80(v10, v10 + 1, v10 + 2, v10 + 3, v11, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 47) {
      break;
    }
    uint64_t v16 = v13;
    if (v13 == 1)
    {
      if (v10 != a2)
      {
        unint64_t v30 = (v15 - 2) >> 1;
        unint64_t v31 = v30 + 1;
        long long v32 = &v10[v30];
        do
        {
          sub_EC6FD4((uint64_t)v10, a3, v14 >> 1, v32--);
          --v31;
        }
        while (v31);
        unint64_t v33 = (unint64_t)v14 >> 1;
        do
          BOOL result = sub_EC7190((uint64_t)v10, (uint64_t)a2--, a3, v33);
        while (v33-- > 2);
      }
      return result;
    }
    unint64_t v17 = v15 >> 1;
    unsigned __int16 v18 = &v10[v15 >> 1];
    if ((unint64_t)v14 < 0x101)
    {
      sub_EC6650(v18, v10, v11, a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      sub_EC6650(v10, v18, v11, a3);
      unsigned int v19 = v11;
      unsigned int v20 = &v10[v17];
      sub_EC6650(v10 + 1, v20 - 1, a2 - 2, a3);
      sub_EC6650(v10 + 2, &v10[v17 + 1], a2 - 3, a3);
      sub_EC6650(v20 - 1, v18, &v10[v17 + 1], a3);
      unsigned __int16 v21 = *v10;
      *unsigned int v10 = *v20;
      *unsigned int v20 = v21;
      unsigned int v11 = v19;
      a5 = v44;
      if (v44) {
        goto LABEL_13;
      }
    }
    unsigned __int16 v22 = *v10;
    uint64_t v23 = sub_EDCFBC(*a3, *(v10 - 1));
    if (*(unsigned __int8 *)(v23 + 16) >= *(unsigned __int8 *)(sub_EDCFBC(*a3, v22) + 16))
    {
      BOOL result = (uint64_t)sub_EC67E8(v10, a2, a3);
      long long v12 = (unsigned __int16 *)result;
      goto LABEL_18;
    }
LABEL_13:
    __n128 v24 = sub_EC69A8(v10, a2, a3);
    if ((v25 & 1) == 0) {
      goto LABEL_16;
    }
    BOOL v26 = sub_EC6B3C(v10, v24, a3);
    long long v12 = v24 + 1;
    BOOL result = sub_EC6B3C(v24 + 1, a2, a3);
    if (result)
    {
      a4 = -v16;
      a2 = v24;
      if (v26) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v13 = v16 + 1;
    if (!v26)
    {
LABEL_16:
      BOOL result = sub_EC60A4(v10, v24, a3, -v16, a5 & 1);
      long long v12 = v24 + 1;
LABEL_18:
      a5 = 0;
      a4 = -v16;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return sub_EC6540((uint64_t)v10, a2, a3);
  }
  else if (v10 != a2)
  {
    while (v10 + 1 != a2)
    {
      unsigned __int16 v35 = v10[1];
      unsigned __int16 v36 = *v10++;
      uint64_t v37 = sub_EDCFBC(*a3, v35);
      BOOL result = sub_EDCFBC(*a3, v36);
      if (*(unsigned __int8 *)(v37 + 16) < *(unsigned __int8 *)(result + 16))
      {
        unsigned __int16 v38 = *v10;
        unsigned int v39 = v10;
        do
        {
          unsigned int v40 = v39;
          unsigned __int16 v41 = *--v39;
          *unsigned int v40 = v41;
          unsigned __int16 v42 = *(v40 - 2);
          uint64_t v43 = sub_EDCFBC(*a3, v38);
          BOOL result = sub_EDCFBC(*a3, v42);
        }
        while (*(unsigned __int8 *)(v43 + 16) < *(unsigned __int8 *)(result + 16));
        *unsigned int v39 = v38;
      }
    }
  }
  return result;
}

uint64_t sub_EC6540(uint64_t result, unsigned __int16 *a2, void **a3)
{
  if ((unsigned __int16 *)result != a2)
  {
    unint64_t v4 = (unsigned __int16 *)result;
    char v5 = (unsigned __int16 *)(result + 2);
    if ((unsigned __int16 *)(result + 2) != a2)
    {
      uint64_t v7 = 0;
      BOOL v8 = (unsigned __int16 *)result;
      do
      {
        unsigned __int16 v10 = v8[1];
        unsigned __int16 v11 = *v8;
        BOOL v8 = v5;
        uint64_t v12 = sub_EDCFBC(*a3, v10);
        BOOL result = sub_EDCFBC(*a3, v11);
        if (*(unsigned __int8 *)(v12 + 16) < *(unsigned __int8 *)(result + 16))
        {
          unsigned __int16 v13 = *v8;
          uint64_t v14 = v7;
          do
          {
            *(unsigned __int16 *)((char *)v4 + v14 + 2) = *(unsigned __int16 *)((char *)v4 + v14);
            if (!v14)
            {
              uint64_t v9 = v4;
              goto LABEL_5;
            }
            unsigned __int16 v15 = *(unsigned __int16 *)((char *)v4 + v14 - 2);
            uint64_t v16 = sub_EDCFBC(*a3, v13);
            BOOL result = sub_EDCFBC(*a3, v15);
            v14 -= 2;
          }
          while (*(unsigned __int8 *)(v16 + 16) < *(unsigned __int8 *)(result + 16));
          uint64_t v9 = (unsigned __int16 *)((char *)v4 + v14 + 2);
LABEL_5:
          *uint64_t v9 = v13;
        }
        char v5 = v8 + 1;
        v7 += 2;
      }
      while (v8 + 1 != a2);
    }
  }
  return result;
}

uint64_t sub_EC6650(unsigned __int16 *a1, unsigned __int16 *a2, unsigned __int16 *a3, void **a4)
{
  unsigned __int16 v8 = *a1;
  uint64_t v9 = sub_EDCFBC(*a4, *a2);
  uint64_t v10 = sub_EDCFBC(*a4, v8);
  unsigned int v11 = *(unsigned __int8 *)(v9 + 16);
  unsigned int v12 = *(unsigned __int8 *)(v10 + 16);
  unsigned __int16 v13 = *a2;
  uint64_t v14 = sub_EDCFBC(*a4, *a3);
  uint64_t v15 = sub_EDCFBC(*a4, v13);
  unsigned int v16 = *(unsigned __int8 *)(v14 + 16);
  unsigned int v17 = *(unsigned __int8 *)(v15 + 16);
  if (v11 < v12)
  {
    unsigned __int16 v18 = *a1;
    if (v16 < v17)
    {
      *a1 = *a3;
      *a3 = v18;
      return 1;
    }
    *a1 = *a2;
    *a2 = v18;
    uint64_t v23 = sub_EDCFBC(*a4, *a3);
    if (*(unsigned __int8 *)(v23 + 16) >= *(unsigned __int8 *)(sub_EDCFBC(*a4, v18) + 16)) {
      return 1;
    }
    unsigned __int16 v24 = *a2;
    *a2 = *a3;
    *a3 = v24;
    return 2;
  }
  if (v16 < v17)
  {
    unsigned __int16 v19 = *a2;
    *a2 = *a3;
    *a3 = v19;
    unsigned __int16 v20 = *a1;
    uint64_t v21 = sub_EDCFBC(*a4, *a2);
    if (*(unsigned __int8 *)(v21 + 16) >= *(unsigned __int8 *)(sub_EDCFBC(*a4, v20) + 16)) {
      return 1;
    }
    unsigned __int16 v22 = *a1;
    *a1 = *a2;
    *a2 = v22;
    return 2;
  }
  return 0;
}

unsigned __int16 *sub_EC67E8(unsigned __int16 *a1, unsigned __int16 *a2, void **a3)
{
  unint64_t v4 = a2;
  unsigned __int16 v6 = *a1;
  unsigned __int16 v7 = *(a2 - 1);
  uint64_t v8 = sub_EDCFBC(*a3, *a1);
  if (*(unsigned __int8 *)(v8 + 16) >= *(unsigned __int8 *)(sub_EDCFBC(*a3, v7) + 16))
  {
    unsigned int v12 = a1 + 1;
    do
    {
      uint64_t v9 = v12;
      if (v12 >= v4) {
        break;
      }
      ++v12;
      unsigned __int16 v13 = *v9;
      uint64_t v14 = sub_EDCFBC(*a3, v6);
    }
    while (*(unsigned __int8 *)(v14 + 16) >= *(unsigned __int8 *)(sub_EDCFBC(*a3, v13) + 16));
  }
  else
  {
    uint64_t v9 = a1;
    do
    {
      unsigned __int16 v10 = v9[1];
      ++v9;
      uint64_t v11 = sub_EDCFBC(*a3, v6);
    }
    while (*(unsigned __int8 *)(v11 + 16) >= *(unsigned __int8 *)(sub_EDCFBC(*a3, v10) + 16));
  }
  if (v9 < v4)
  {
    do
    {
      unsigned __int16 v15 = *--v4;
      uint64_t v16 = sub_EDCFBC(*a3, v6);
    }
    while (*(unsigned __int8 *)(v16 + 16) < *(unsigned __int8 *)(sub_EDCFBC(*a3, v15) + 16));
  }
  while (v9 < v4)
  {
    unsigned __int16 v17 = *v9;
    *uint64_t v9 = *v4;
    *unint64_t v4 = v17;
    do
    {
      unsigned __int16 v18 = v9[1];
      ++v9;
      uint64_t v19 = sub_EDCFBC(*a3, v6);
    }
    while (*(unsigned __int8 *)(v19 + 16) >= *(unsigned __int8 *)(sub_EDCFBC(*a3, v18) + 16));
    do
    {
      unsigned __int16 v20 = *--v4;
      uint64_t v21 = sub_EDCFBC(*a3, v6);
    }
    while (*(unsigned __int8 *)(v21 + 16) < *(unsigned __int8 *)(sub_EDCFBC(*a3, v20) + 16));
  }
  if (v9 - 1 != a1) {
    *a1 = *(v9 - 1);
  }
  *(v9 - 1) = v6;
  return v9;
}

unsigned __int16 *sub_EC69A8(unsigned __int16 *a1, unsigned __int16 *a2, void **a3)
{
  uint64_t v6 = 0;
  unsigned __int16 v7 = *a1;
  do
    uint64_t v8 = sub_EDCFBC(*a3, a1[++v6]);
  while (*(unsigned __int8 *)(v8 + 16) < *(unsigned __int8 *)(sub_EDCFBC(*a3, v7) + 16));
  uint64_t v9 = &a1[v6];
  unsigned __int16 v10 = &a1[v6 - 1];
  if (v6 == 1)
  {
    do
    {
      if (v9 >= a2) {
        break;
      }
      unsigned __int16 v13 = *--a2;
      uint64_t v14 = sub_EDCFBC(*a3, v13);
    }
    while (*(unsigned __int8 *)(v14 + 16) >= *(unsigned __int8 *)(sub_EDCFBC(*a3, v7) + 16));
  }
  else
  {
    do
    {
      unsigned __int16 v11 = *--a2;
      uint64_t v12 = sub_EDCFBC(*a3, v11);
    }
    while (*(unsigned __int8 *)(v12 + 16) >= *(unsigned __int8 *)(sub_EDCFBC(*a3, v7) + 16));
  }
  if (v9 < a2)
  {
    unsigned __int16 v15 = v9;
    uint64_t v16 = a2;
    do
    {
      unsigned __int16 v17 = *v15;
      *unsigned __int16 v15 = *v16;
      *uint64_t v16 = v17;
      do
      {
        unsigned __int16 v18 = v15[1];
        ++v15;
        uint64_t v19 = sub_EDCFBC(*a3, v18);
      }
      while (*(unsigned __int8 *)(v19 + 16) < *(unsigned __int8 *)(sub_EDCFBC(*a3, v7) + 16));
      do
      {
        unsigned __int16 v20 = *--v16;
        uint64_t v21 = sub_EDCFBC(*a3, v20);
      }
      while (*(unsigned __int8 *)(v21 + 16) >= *(unsigned __int8 *)(sub_EDCFBC(*a3, v7) + 16));
    }
    while (v15 < v16);
    unsigned __int16 v10 = v15 - 1;
  }
  if (v10 != a1) {
    *a1 = *v10;
  }
  *unsigned __int16 v10 = v7;
  return v10;
}

BOOL sub_EC6B3C(unsigned __int16 *a1, unsigned __int16 *a2, void **a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned __int16 v8 = *a1;
      uint64_t v9 = sub_EDCFBC(*a3, *(a2 - 1));
      if (*(unsigned __int8 *)(v9 + 16) < *(unsigned __int8 *)(sub_EDCFBC(*a3, v8) + 16))
      {
        unsigned __int16 v10 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v10;
      }
      return 1;
    case 3:
      sub_EC6650(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_EC6D70(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_EC6E80(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      unsigned __int16 v11 = a1 + 2;
      sub_EC6650(a1, a1 + 1, a1 + 2, a3);
      uint64_t v12 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    unsigned __int16 v15 = *v11;
    uint64_t v16 = sub_EDCFBC(*a3, *v12);
    if (*(unsigned __int8 *)(v16 + 16) < *(unsigned __int8 *)(sub_EDCFBC(*a3, v15) + 16)) {
      break;
    }
LABEL_13:
    unsigned __int16 v11 = v12;
    v13 += 2;
    if (++v12 == a2) {
      return 1;
    }
  }
  unsigned __int16 v17 = *v12;
  uint64_t v18 = v13;
  do
  {
    *(unsigned __int16 *)((char *)a1 + v18 + 6) = *(unsigned __int16 *)((char *)a1 + v18 + 4);
    if (v18 == -4)
    {
      *a1 = v17;
      if (++v14 != 8) {
        goto LABEL_13;
      }
      return v12 + 1 == a2;
    }
    unsigned __int16 v19 = *(unsigned __int16 *)((char *)a1 + v18 + 2);
    uint64_t v20 = sub_EDCFBC(*a3, v17);
    v18 -= 2;
  }
  while (*(unsigned __int8 *)(v20 + 16) < *(unsigned __int8 *)(sub_EDCFBC(*a3, v19) + 16));
  *(unsigned __int16 *)((char *)a1 + v18 + 6) = v17;
  if (++v14 != 8) {
    goto LABEL_13;
  }
  return v12 + 1 == a2;
}

uint64_t sub_EC6D70(unsigned __int16 *a1, unsigned __int16 *a2, unsigned __int16 *a3, unsigned __int16 *a4, void **a5)
{
  sub_EC6650(a1, a2, a3, a5);
  unsigned __int16 v10 = *a3;
  uint64_t v11 = sub_EDCFBC(*a5, *a4);
  uint64_t result = sub_EDCFBC(*a5, v10);
  if (*(unsigned __int8 *)(v11 + 16) < *(unsigned __int8 *)(result + 16))
  {
    unsigned __int16 v13 = *a3;
    *a3 = *a4;
    *a4 = v13;
    unsigned __int16 v14 = *a2;
    uint64_t v15 = sub_EDCFBC(*a5, *a3);
    uint64_t result = sub_EDCFBC(*a5, v14);
    if (*(unsigned __int8 *)(v15 + 16) < *(unsigned __int8 *)(result + 16))
    {
      unsigned __int16 v16 = *a2;
      *a2 = *a3;
      *a3 = v16;
      unsigned __int16 v17 = *a1;
      uint64_t v18 = sub_EDCFBC(*a5, *a2);
      uint64_t result = sub_EDCFBC(*a5, v17);
      if (*(unsigned __int8 *)(v18 + 16) < *(unsigned __int8 *)(result + 16))
      {
        unsigned __int16 v19 = *a1;
        *a1 = *a2;
        *a2 = v19;
      }
    }
  }
  return result;
}

uint64_t sub_EC6E80(unsigned __int16 *a1, unsigned __int16 *a2, unsigned __int16 *a3, unsigned __int16 *a4, unsigned __int16 *a5, void **a6)
{
  sub_EC6D70(a1, a2, a3, a4, a6);
  unsigned __int16 v12 = *a4;
  uint64_t v13 = sub_EDCFBC(*a6, *a5);
  uint64_t result = sub_EDCFBC(*a6, v12);
  if (*(unsigned __int8 *)(v13 + 16) < *(unsigned __int8 *)(result + 16))
  {
    unsigned __int16 v15 = *a4;
    *a4 = *a5;
    *a5 = v15;
    unsigned __int16 v16 = *a3;
    uint64_t v17 = sub_EDCFBC(*a6, *a4);
    uint64_t result = sub_EDCFBC(*a6, v16);
    if (*(unsigned __int8 *)(v17 + 16) < *(unsigned __int8 *)(result + 16))
    {
      unsigned __int16 v18 = *a3;
      *a3 = *a4;
      *a4 = v18;
      unsigned __int16 v19 = *a2;
      uint64_t v20 = sub_EDCFBC(*a6, *a3);
      uint64_t result = sub_EDCFBC(*a6, v19);
      if (*(unsigned __int8 *)(v20 + 16) < *(unsigned __int8 *)(result + 16))
      {
        unsigned __int16 v21 = *a2;
        *a2 = *a3;
        *a3 = v21;
        unsigned __int16 v22 = *a1;
        uint64_t v23 = sub_EDCFBC(*a6, *a2);
        uint64_t result = sub_EDCFBC(*a6, v22);
        if (*(unsigned __int8 *)(v23 + 16) < *(unsigned __int8 *)(result + 16))
        {
          unsigned __int16 v24 = *a1;
          *a1 = *a2;
          *a2 = v24;
        }
      }
    }
  }
  return result;
}

uint64_t sub_EC6FD4(uint64_t result, void **a2, uint64_t a3, unsigned __int16 *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    char v5 = a4;
    uint64_t v6 = result;
    unsigned __int16 v7 = (char *)a4 - result;
    int64_t v8 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 1)
    {
      uint64_t v11 = (uint64_t)(v7 + 1);
      unsigned __int16 v12 = (unsigned __int16 *)(result + 2 * (void)(v7 + 1));
      uint64_t v13 = (uint64_t)(v7 + 2);
      uint64_t v30 = result;
      if ((uint64_t)(v7 + 2) < a3)
      {
        unint64_t v14 = v4 >> 1;
        unsigned __int16 v15 = v12[1];
        uint64_t v16 = sub_EDCFBC(*a2, *v12);
        unsigned __int16 v17 = v15;
        int64_t v8 = v14;
        uint64_t v6 = v30;
        if (*(unsigned __int8 *)(v16 + 16) < *(unsigned __int8 *)(sub_EDCFBC(*a2, v17) + 16))
        {
          ++v12;
          uint64_t v11 = v13;
        }
      }
      unsigned __int16 v18 = *v5;
      uint64_t v19 = sub_EDCFBC(*a2, *v12);
      uint64_t result = sub_EDCFBC(*a2, v18);
      if (*(unsigned __int8 *)(v19 + 16) >= *(unsigned __int8 *)(result + 16))
      {
        unsigned __int16 v31 = *v5;
        do
        {
          unsigned __int16 v22 = v12;
          *char v5 = *v12;
          if (v8 < v11) {
            break;
          }
          uint64_t v23 = (2 * v11) | 1;
          unsigned __int16 v12 = (unsigned __int16 *)(v6 + 2 * v23);
          uint64_t v24 = 2 * v11 + 2;
          if (v24 < a3)
          {
            unsigned __int16 v25 = v12[1];
            uint64_t v26 = sub_EDCFBC(*a2, *v12);
            uint64_t v27 = sub_EDCFBC(*a2, v25);
            unsigned int v28 = *(unsigned __int8 *)(v26 + 16);
            unsigned int v29 = *(unsigned __int8 *)(v27 + 16);
            if (v28 < v29) {
              ++v12;
            }
            uint64_t v6 = v30;
            if (v28 < v29) {
              uint64_t v23 = v24;
            }
          }
          uint64_t v20 = sub_EDCFBC(*a2, *v12);
          uint64_t result = sub_EDCFBC(*a2, v31);
          unsigned int v21 = *(unsigned __int8 *)(v20 + 16);
          char v5 = v22;
          uint64_t v11 = v23;
        }
        while (v21 >= *(unsigned __int8 *)(result + 16));
        *unsigned __int16 v22 = v31;
      }
    }
  }
  return result;
}

uint64_t sub_EC7190(uint64_t result, uint64_t a2, void **a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v23 = result;
    uint64_t v6 = 0;
    unsigned __int16 v25 = *(_WORD *)result;
    int64_t v7 = (unint64_t)(a4 - 2) >> 1;
    int64_t v8 = (_WORD *)result;
    do
    {
      uint64_t v9 = 2 * v6 + 2;
      unsigned __int16 v10 = (_WORD *)((char *)v8 + v9);
      uint64_t v11 = (2 * v6) | 1;
      if (v9 < a4)
      {
        unsigned __int16 v12 = v10[1];
        uint64_t v13 = sub_EDCFBC(*a3, *v10);
        uint64_t result = sub_EDCFBC(*a3, v12);
        if (*(unsigned __int8 *)(v13 + 16) < *(unsigned __int8 *)(result + 16))
        {
          ++v10;
          uint64_t v11 = v9;
        }
      }
      *int64_t v8 = *v10;
      int64_t v8 = v10;
      uint64_t v6 = v11;
    }
    while (v11 <= v7);
    unint64_t v14 = (unsigned __int16 *)(a2 - 2);
    if (v10 == (unsigned __int16 *)(a2 - 2))
    {
      *unsigned __int16 v10 = v25;
    }
    else
    {
      *unsigned __int16 v10 = *v14;
      *unint64_t v14 = v25;
      uint64_t v15 = (uint64_t)v10 - v23 + 2;
      if (v15 >= 3)
      {
        unint64_t v16 = (((unint64_t)v15 >> 1) - 2) >> 1;
        unsigned __int16 v17 = (unsigned __int16 *)(v23 + 2 * v16);
        unsigned __int16 v18 = *v10;
        uint64_t v19 = sub_EDCFBC(*a3, *v17);
        uint64_t result = sub_EDCFBC(*a3, v18);
        if (*(unsigned __int8 *)(v19 + 16) < *(unsigned __int8 *)(result + 16))
        {
          unsigned __int16 v20 = *v10;
          do
          {
            unsigned int v21 = v17;
            *unsigned __int16 v10 = *v17;
            if (!v16) {
              break;
            }
            unint64_t v16 = (v16 - 1) >> 1;
            unsigned __int16 v17 = (unsigned __int16 *)(v23 + 2 * v16);
            uint64_t v22 = sub_EDCFBC(*a3, *v17);
            uint64_t result = sub_EDCFBC(*a3, v20);
            unsigned __int16 v10 = v21;
          }
          while (*(unsigned __int8 *)(v22 + 16) < *(unsigned __int8 *)(result + 16));
          *unsigned int v21 = v20;
        }
      }
    }
  }
  return result;
}

__n128 sub_EC7348(unsigned int *a1, long long *a2, char *a3, long long *a4, uint64_t a5, uint64_t a6, char a7, __n128 result)
{
  while (2)
  {
    long long v229 = a4 - 6;
    long long v230 = (__n128 *)(a4 - 3);
    long long v228 = a4 - 9;
    unsigned __int16 v12 = a1;
    uint64_t v13 = a2;
LABEL_2:
    unint64_t v14 = v12;
    uint64_t v15 = (uint64_t)v13;
    while (1)
    {
      uint64_t v16 = a3 - (char *)v14;
      unint64_t v17 = (a3 - (char *)v14) >> 2;
      if (v9 || !v8)
      {
        switch(v17)
        {
          case 0uLL:
          case 1uLL:
            return result;
          case 2uLL:
            unsigned int v163 = *((_DWORD *)a3 - 1);
            unsigned int v164 = *v14;
            if (v163 < *v14)
            {
              *unint64_t v14 = v163;
              *((_DWORD *)a3 - 1) = v164;
              long long v288 = *(_OWORD *)(v15 + 16);
              long long v317 = *(_OWORD *)(v15 + 32);
              __n128 v256 = *(__n128 *)v15;
              long long v165 = *(a4 - 3);
              long long v166 = *(a4 - 1);
              *(_OWORD *)(v15 + 16) = *(a4 - 2);
              *(_OWORD *)(v15 + 32) = v166;
              *(_OWORD *)uint64_t v15 = v165;
              uint64_t result = v256;
              *(a4 - 2) = v288;
              *(a4 - 1) = v317;
              *(a4 - 3) = (__int128)v256;
            }
            break;
          case 3uLL:
            long long v167 = (__n128 *)(v15 + 48);
            unsigned int v169 = *v14;
            unsigned int v168 = v14[1];
            unsigned int v170 = *((_DWORD *)a3 - 1);
            if (v168 >= *v14)
            {
              if (v170 < v168)
              {
                v14[1] = v170;
                *((_DWORD *)a3 - 1) = v168;
                uint64_t result = *v167;
                long long v292 = *(_OWORD *)(v15 + 64);
                long long v208 = *(_OWORD *)(v15 + 80);
                __n128 v209 = *v230;
                long long v210 = *(a4 - 1);
                *(_OWORD *)(v15 + 64) = *(a4 - 2);
                *(_OWORD *)(v15 + 80) = v210;
                __n128 *v167 = v209;
                *(a4 - 2) = v292;
                *(a4 - 1) = v208;
                *long long v230 = result;
                unsigned int v212 = *v14;
                unsigned int v211 = v14[1];
                if (v211 < *v14)
                {
                  *unint64_t v14 = v211;
                  v14[1] = v212;
                  uint64_t result = *(__n128 *)v15;
                  long long v293 = *(_OWORD *)(v15 + 16);
                  long long v320 = *(_OWORD *)(v15 + 32);
                  __n128 v259 = *(__n128 *)v15;
                  long long v213 = *(_OWORD *)(v15 + 64);
                  *(__n128 *)uint64_t v15 = *v167;
                  *(_OWORD *)(v15 + 16) = v213;
                  *(_OWORD *)(v15 + 32) = *(_OWORD *)(v15 + 80);
                  __n128 *v167 = v259;
                  *(_OWORD *)(v15 + 64) = v293;
                  result.n128_u64[0] = v320;
                  *(_OWORD *)(v15 + 80) = v320;
                }
              }
            }
            else if (v170 >= v168)
            {
              *unint64_t v14 = v168;
              v14[1] = v169;
              uint64_t result = *(__n128 *)v15;
              long long v294 = *(_OWORD *)(v15 + 16);
              long long v321 = *(_OWORD *)(v15 + 32);
              __n128 v260 = *(__n128 *)v15;
              long long v222 = *(_OWORD *)(v15 + 64);
              *(__n128 *)uint64_t v15 = *v167;
              *(_OWORD *)(v15 + 16) = v222;
              *(_OWORD *)(v15 + 32) = *(_OWORD *)(v15 + 80);
              __n128 *v167 = v260;
              *(_OWORD *)(v15 + 64) = v294;
              result.n128_u64[0] = v321;
              *(_OWORD *)(v15 + 80) = v321;
              unsigned int v223 = *((_DWORD *)a3 - 1);
              unsigned int v224 = v14[1];
              if (v223 < v224)
              {
                v14[1] = v223;
                *((_DWORD *)a3 - 1) = v224;
                uint64_t result = *v167;
                long long v295 = *(_OWORD *)(v15 + 64);
                long long v225 = *(_OWORD *)(v15 + 80);
                __n128 v226 = *v230;
                long long v227 = *(a4 - 1);
                *(_OWORD *)(v15 + 64) = *(a4 - 2);
                *(_OWORD *)(v15 + 80) = v227;
                __n128 *v167 = v226;
                *(a4 - 2) = v295;
                *(a4 - 1) = v225;
                *long long v230 = result;
              }
            }
            else
            {
              *unint64_t v14 = v170;
              *((_DWORD *)a3 - 1) = v169;
              long long v289 = *(_OWORD *)(v15 + 16);
              long long v318 = *(_OWORD *)(v15 + 32);
              __n128 v257 = *(__n128 *)v15;
              __n128 v171 = *v230;
              long long v172 = *(a4 - 1);
              *(_OWORD *)(v15 + 16) = *(a4 - 2);
              *(_OWORD *)(v15 + 32) = v172;
              *(__n128 *)uint64_t v15 = v171;
              uint64_t result = v257;
              *(a4 - 2) = v289;
              *(a4 - 1) = v318;
              *long long v230 = v257;
            }
            break;
          case 4uLL:
            result.n128_u64[0] = sub_EC8930(v14, v15, v14 + 1, v15 + 48, v14 + 2, (_OWORD *)(v15 + 96), (unsigned int *)a3 - 1, v230, result).n128_u64[0];
            break;
          case 5uLL:
            long long v173 = (__n128 *)(v15 + 48);
            long long v174 = v14 + 2;
            unsigned int v175 = (__n128 *)(v15 + 96);
            unsigned int v176 = v14 + 3;
            v177 = (__n128 *)(v15 + 144);
            result.n128_u64[0] = sub_EC8930(v14, v15, v14 + 1, v15 + 48, v14 + 2, (_OWORD *)(v15 + 96), v14 + 3, (_OWORD *)(v15 + 144), result).n128_u64[0];
            unsigned int v178 = *((_DWORD *)a3 - 1);
            unsigned int v179 = v14[3];
            if (v178 < v179)
            {
              *unsigned int v176 = v178;
              *((_DWORD *)a3 - 1) = v179;
              uint64_t result = *v177;
              long long v290 = *(_OWORD *)(v15 + 160);
              long long v180 = *(_OWORD *)(v15 + 176);
              __n128 v181 = (__n128)*(a4 - 3);
              long long v182 = *(a4 - 1);
              *(_OWORD *)(v15 + 160) = *(a4 - 2);
              *(_OWORD *)(v15 + 176) = v182;
              __n128 *v177 = v181;
              *(a4 - 2) = v290;
              *(a4 - 1) = v180;
              *(a4 - 3) = (__int128)result;
              unsigned int v183 = *v174;
              if (*v176 < *v174)
              {
                *long long v174 = *v176;
                *unsigned int v176 = v183;
                long long v184 = *(_OWORD *)(v15 + 112);
                uint64_t result = *(__n128 *)(v15 + 128);
                __n128 v185 = *v175;
                long long v186 = *(_OWORD *)(v15 + 160);
                *unsigned int v175 = *v177;
                *(_OWORD *)(v15 + 112) = v186;
                *(_OWORD *)(v15 + 128) = *(_OWORD *)(v15 + 176);
                __n128 *v177 = v185;
                *(_OWORD *)(v15 + 160) = v184;
                *(__n128 *)(v15 + 176) = result;
                unsigned int v187 = v14[1];
                if (*v174 < v187)
                {
                  v14[1] = *v174;
                  v14[2] = v187;
                  long long v188 = *(_OWORD *)(v15 + 64);
                  uint64_t result = *(__n128 *)(v15 + 80);
                  __n128 v189 = *v173;
                  long long v190 = *(_OWORD *)(v15 + 112);
                  *long long v173 = *v175;
                  *(_OWORD *)(v15 + 64) = v190;
                  *(_OWORD *)(v15 + 80) = *(_OWORD *)(v15 + 128);
                  *unsigned int v175 = v189;
                  *(_OWORD *)(v15 + 112) = v188;
                  *(__n128 *)(v15 + 128) = result;
                  unsigned int v192 = *v14;
                  unsigned int v191 = v14[1];
                  if (v191 < *v14)
                  {
                    *unint64_t v14 = v191;
                    v14[1] = v192;
                    uint64_t result = *(__n128 *)v15;
                    long long v291 = *(_OWORD *)(v15 + 16);
                    long long v319 = *(_OWORD *)(v15 + 32);
                    __n128 v258 = *(__n128 *)v15;
                    long long v193 = *(_OWORD *)(v15 + 64);
                    *(__n128 *)uint64_t v15 = *v173;
                    *(_OWORD *)(v15 + 16) = v193;
                    *(_OWORD *)(v15 + 32) = *(_OWORD *)(v15 + 80);
                    *long long v173 = v258;
                    *(_OWORD *)(v15 + 64) = v291;
                    result.n128_u64[0] = v319;
                    *(_OWORD *)(v15 + 80) = v319;
                  }
                }
              }
            }
            break;
          default:
            JUMPOUT(0);
        }
        return result;
      }
      if (v16 <= 95)
      {
        if (a7)
        {
          if (v14 != (unsigned int *)a3)
          {
            v194 = v14 + 1;
            if (v14 + 1 != (unsigned int *)a3)
            {
              uint64_t v195 = 0;
              uint64_t v196 = 0;
              v197 = (__n128 *)v15;
              v198 = v14;
              do
              {
                long long v201 = v194;
                v197 += 3;
                unsigned int v202 = v198[1];
                if (v202 < *v198)
                {
                  __n128 v263 = *v197;
                  __n128 v298 = v197[1];
                  __n128 v324 = v197[2];
                  unsigned int v203 = *v198;
                  uint64_t v204 = v195;
                  uint64_t v205 = v196;
                  do
                  {
                    long long v206 = (_OWORD *)(v15 + v204);
                    *(unsigned int *)((char *)v14 + v205 + 4) = v203;
                    long long v207 = *(_OWORD *)(v15 + v204 + 16);
                    v206[3] = *(_OWORD *)(v15 + v204);
                    v206[4] = v207;
                    v206[5] = *(_OWORD *)(v15 + v204 + 32);
                    if (!v205)
                    {
                      unsigned int v199 = v14;
                      unsigned int v200 = (_OWORD *)v15;
                      goto LABEL_114;
                    }
                    unsigned int v203 = *(unsigned int *)((char *)v14 + v205 - 4);
                    v205 -= 4;
                    v204 -= 48;
                  }
                  while (v202 < v203);
                  unsigned int v199 = (unsigned int *)((char *)v14 + v205 + 4);
                  unsigned int v200 = (_OWORD *)(v15 + v204 + 48);
LABEL_114:
                  *unsigned int v199 = v202;
                  uint64_t result = v263;
                  v200[1] = v298;
                  v200[2] = v324;
                  *unsigned int v200 = v263;
                }
                v194 = v201 + 1;
                v196 += 4;
                v195 += 48;
                v198 = v201;
              }
              while (v201 + 1 != (unsigned int *)a3);
            }
          }
        }
        else if (v14 != (unsigned int *)a3)
        {
          __n128 v214 = v14 + 1;
          if (v14 + 1 != (unsigned int *)a3)
          {
            v215 = (__n128 *)(v15 + 48);
            do
            {
              uint64_t v216 = v214;
              v15 += 48;
              unsigned int v217 = v14[1];
              if (v217 < *v14)
              {
                __n128 v264 = *(__n128 *)v15;
                __n128 v299 = *(__n128 *)(v15 + 16);
                __n128 v325 = *(__n128 *)(v15 + 32);
                unsigned int v218 = *v14;
                v219 = v215;
                v220 = v216;
                do
                {
                  unsigned int *v220 = v218;
                  __n128 v221 = v219[-2];
                  __n128 *v219 = v219[-3];
                  v219[1] = v221;
                  v219[2] = v219[-1];
                  v219 -= 3;
                  unsigned int v218 = *(v220 - 2);
                  --v220;
                }
                while (v217 < v218);
                unsigned int *v220 = v217;
                uint64_t result = v264;
                v219[1] = v299;
                v219[2] = v325;
                __n128 *v219 = v264;
              }
              __n128 v214 = v216 + 1;
              v215 += 3;
              unint64_t v14 = v216;
            }
            while (v216 + 1 != (unsigned int *)a3);
          }
        }
        return result;
      }
      if (!a6)
      {
        if (v14 != (unsigned int *)a3)
        {
          sub_EC8AF8((char *)v14, (long long *)v15, a3, a4, a3);
        }
        return result;
      }
      unint64_t v18 = v17 >> 1;
      uint64_t v19 = (long long *)(v15 + 48 * (v17 >> 1));
      unsigned int v20 = *((_DWORD *)a3 - 1);
      if ((unint64_t)v16 >= 0x201)
      {
        unsigned int v21 = v14[v18];
        unsigned int v22 = *v14;
        uint64_t v23 = v18;
        if (v21 >= *v14)
        {
          if (v20 < v21)
          {
            v14[v18] = v20;
            *((_DWORD *)a3 - 1) = v21;
            long long v267 = v19[1];
            long long v302 = v19[2];
            long long v241 = *v19;
            __n128 v31 = *v230;
            long long v32 = *(a4 - 1);
            v19[1] = *(a4 - 2);
            v19[2] = v32;
            *uint64_t v19 = (__int128)v31;
            *(a4 - 2) = v267;
            *(a4 - 1) = v302;
            *long long v230 = (__n128)v241;
            unsigned int v33 = v14[v18];
            unsigned int v34 = *v14;
            if (v33 < *v14)
            {
              *unint64_t v14 = v33;
              v14[v18] = v34;
              long long v268 = *(_OWORD *)(v15 + 16);
              long long v303 = *(_OWORD *)(v15 + 32);
              long long v242 = *(_OWORD *)v15;
              long long v35 = *v19;
              long long v36 = v19[2];
              *(_OWORD *)(v15 + 16) = v19[1];
              *(_OWORD *)(v15 + 32) = v36;
              *(_OWORD *)uint64_t v15 = v35;
              v19[1] = v268;
              v19[2] = v303;
              *uint64_t v19 = v242;
            }
          }
        }
        else
        {
          if (v20 >= v21)
          {
            *unint64_t v14 = v21;
            v14[v18] = v22;
            long long v271 = *(_OWORD *)(v15 + 16);
            long long v306 = *(_OWORD *)(v15 + 32);
            long long v245 = *(_OWORD *)v15;
            long long v42 = *v19;
            long long v43 = v19[2];
            *(_OWORD *)(v15 + 16) = v19[1];
            *(_OWORD *)(v15 + 32) = v43;
            *(_OWORD *)uint64_t v15 = v42;
            v19[1] = v271;
            v19[2] = v306;
            *uint64_t v19 = v245;
            unsigned int v44 = *((_DWORD *)a3 - 1);
            unsigned int v45 = v14[v18];
            if (v44 >= v45) {
              goto LABEL_23;
            }
            v14[v18] = v44;
            *((_DWORD *)a3 - 1) = v45;
            long long v265 = v19[1];
            long long v300 = v19[2];
            long long v239 = *v19;
            uint64_t v24 = a4 - 3;
            __n128 v46 = *v230;
            long long v47 = *(a4 - 1);
            v19[1] = *(a4 - 2);
            v19[2] = v47;
            *uint64_t v19 = (__int128)v46;
          }
          else
          {
            *unint64_t v14 = v20;
            *((_DWORD *)a3 - 1) = v22;
            long long v265 = *(_OWORD *)(v15 + 16);
            long long v300 = *(_OWORD *)(v15 + 32);
            long long v239 = *(_OWORD *)v15;
            uint64_t v24 = a4 - 3;
            __n128 v25 = *v230;
            long long v26 = *(a4 - 1);
            *(_OWORD *)(v15 + 16) = *(a4 - 2);
            *(_OWORD *)(v15 + 32) = v26;
            *(__n128 *)uint64_t v15 = v25;
          }
          v24[1] = v265;
          v24[2] = v300;
          *uint64_t v24 = v239;
        }
LABEL_23:
        long long v48 = (long long *)(v15 + 48);
        unint64_t v49 = v18 - 1;
        unsigned int v50 = (long long *)(v15 + 48 * (v18 - 1));
        unsigned int v51 = v14[v18 - 1];
        unsigned int v52 = v14[1];
        unsigned int v53 = *((_DWORD *)a3 - 2);
        if (v51 >= v52)
        {
          if (v53 < v51)
          {
            v14[v49] = v53;
            *((_DWORD *)a3 - 2) = v51;
            long long v273 = v50[1];
            long long v307 = v50[2];
            long long v246 = *v50;
            long long v58 = *v229;
            long long v59 = *(a4 - 4);
            v50[1] = *(a4 - 5);
            v50[2] = v59;
            *unsigned int v50 = v58;
            *(a4 - 5) = v273;
            *(a4 - 4) = v307;
            *long long v229 = v246;
            unsigned int v60 = v14[v49];
            unsigned int v61 = v14[1];
            if (v60 < v61)
            {
              v14[1] = v60;
              v14[v49] = v61;
              long long v62 = *v48;
              long long v274 = *(_OWORD *)(v15 + 64);
              long long v63 = *(_OWORD *)(v15 + 80);
              long long v64 = *v50;
              long long v65 = v50[2];
              *(_OWORD *)(v15 + 64) = v50[1];
              *(_OWORD *)(v15 + 80) = v65;
              *long long v48 = v64;
              v50[1] = v274;
              v50[2] = v63;
              *unsigned int v50 = v62;
            }
          }
        }
        else if (v53 >= v51)
        {
          v14[1] = v51;
          v14[v49] = v52;
          long long v70 = *v48;
          long long v277 = *(_OWORD *)(v15 + 64);
          long long v71 = *(_OWORD *)(v15 + 80);
          long long v72 = *v50;
          long long v73 = v50[2];
          *(_OWORD *)(v15 + 64) = v50[1];
          *(_OWORD *)(v15 + 80) = v73;
          *long long v48 = v72;
          v50[1] = v277;
          v50[2] = v71;
          *unsigned int v50 = v70;
          unsigned int v74 = *((_DWORD *)a3 - 2);
          unsigned int v75 = v14[v49];
          if (v74 < v75)
          {
            v14[v49] = v74;
            *((_DWORD *)a3 - 2) = v75;
            long long v278 = v50[1];
            long long v310 = v50[2];
            long long v249 = *v50;
            long long v76 = *v229;
            long long v77 = *(a4 - 4);
            v50[1] = *(a4 - 5);
            v50[2] = v77;
            *unsigned int v50 = v76;
            *(a4 - 5) = v278;
            *(a4 - 4) = v310;
            *long long v229 = v249;
          }
        }
        else
        {
          v14[1] = v53;
          *((_DWORD *)a3 - 2) = v52;
          long long v54 = *v48;
          long long v272 = *(_OWORD *)(v15 + 64);
          long long v55 = *(_OWORD *)(v15 + 80);
          long long v56 = *v229;
          long long v57 = *(a4 - 4);
          *(_OWORD *)(v15 + 64) = *(a4 - 5);
          *(_OWORD *)(v15 + 80) = v57;
          *long long v48 = v56;
          *(a4 - 5) = v272;
          *(a4 - 4) = v55;
          *long long v229 = v54;
        }
        int v78 = (long long *)(v15 + 96);
        unint64_t v79 = v18 + 1;
        uint64_t v80 = (long long *)(v15 + 48 * (v18 + 1));
        unsigned int v81 = v14[v18 + 1];
        unsigned int v82 = v14[2];
        unsigned int v83 = *((_DWORD *)a3 - 3);
        if (v81 >= v82)
        {
          if (v83 < v81)
          {
            v14[v79] = v83;
            *((_DWORD *)a3 - 3) = v81;
            long long v280 = v80[1];
            long long v311 = v80[2];
            long long v250 = *v80;
            long long v88 = *v228;
            long long v89 = *(a4 - 7);
            v80[1] = *(a4 - 8);
            v80[2] = v89;
            *uint64_t v80 = v88;
            *(a4 - 8) = v280;
            *(a4 - 7) = v311;
            *long long v228 = v250;
            unsigned int v90 = v14[v79];
            unsigned int v91 = v14[2];
            if (v90 < v91)
            {
              v14[2] = v90;
              v14[v79] = v91;
              long long v92 = *v78;
              long long v281 = *(_OWORD *)(v15 + 112);
              long long v93 = *(_OWORD *)(v15 + 128);
              long long v94 = *v80;
              long long v95 = v80[2];
              *(_OWORD *)(v15 + 112) = v80[1];
              *(_OWORD *)(v15 + 128) = v95;
              *int v78 = v94;
              v80[1] = v281;
              v80[2] = v93;
              *uint64_t v80 = v92;
            }
          }
        }
        else if (v83 >= v81)
        {
          v14[2] = v81;
          v14[v79] = v82;
          long long v96 = *v78;
          long long v282 = *(_OWORD *)(v15 + 112);
          long long v97 = *(_OWORD *)(v15 + 128);
          long long v98 = *v80;
          long long v99 = v80[2];
          *(_OWORD *)(v15 + 112) = v80[1];
          *(_OWORD *)(v15 + 128) = v99;
          *int v78 = v98;
          v80[1] = v282;
          v80[2] = v97;
          *uint64_t v80 = v96;
          unsigned int v100 = *((_DWORD *)a3 - 3);
          unsigned int v101 = v14[v79];
          if (v100 < v101)
          {
            v14[v79] = v100;
            *((_DWORD *)a3 - 3) = v101;
            long long v283 = v80[1];
            long long v312 = v80[2];
            long long v251 = *v80;
            long long v102 = *v228;
            long long v103 = *(a4 - 7);
            v80[1] = *(a4 - 8);
            v80[2] = v103;
            *uint64_t v80 = v102;
            *(a4 - 8) = v283;
            *(a4 - 7) = v312;
            *long long v228 = v251;
          }
        }
        else
        {
          v14[2] = v83;
          *((_DWORD *)a3 - 3) = v82;
          long long v84 = *v78;
          long long v279 = *(_OWORD *)(v15 + 112);
          long long v85 = *(_OWORD *)(v15 + 128);
          long long v86 = *v228;
          long long v87 = *(a4 - 7);
          *(_OWORD *)(v15 + 112) = *(a4 - 8);
          *(_OWORD *)(v15 + 128) = v87;
          *int v78 = v86;
          *(a4 - 8) = v279;
          *(a4 - 7) = v85;
          *long long v228 = v84;
        }
        unsigned int v104 = v14[v18];
        unsigned int v105 = v14[v49];
        unsigned int v106 = v14[v79];
        if (v104 >= v105)
        {
          if (v106 < v104)
          {
            v14[v18] = v106;
            v14[v79] = v104;
            long long v285 = v19[1];
            long long v314 = v19[2];
            long long v253 = *v19;
            long long v108 = v80[1];
            *uint64_t v19 = *v80;
            v19[1] = v108;
            v19[2] = v80[2];
            v80[1] = v285;
            v80[2] = v314;
            *uint64_t v80 = v253;
            unsigned int v109 = v14[v18];
            unsigned int v110 = v14[v49];
            if (v109 < v110)
            {
              v14[v49] = v109;
              v14[v18] = v110;
              long long v286 = v50[1];
              long long v315 = v50[2];
              long long v254 = *v50;
              long long v111 = v19[1];
              *unsigned int v50 = *v19;
              v50[1] = v111;
              v50[2] = v19[2];
              v19[1] = v286;
              v19[2] = v315;
              *uint64_t v19 = v254;
            }
          }
          goto LABEL_50;
        }
        if (v106 >= v104)
        {
          v14[v49] = v104;
          v14[v18] = v105;
          long long v287 = v50[1];
          long long v316 = v50[2];
          long long v255 = *v50;
          long long v112 = v19[1];
          *unsigned int v50 = *v19;
          v50[1] = v112;
          v50[2] = v19[2];
          v19[1] = v287;
          v19[2] = v316;
          *uint64_t v19 = v255;
          unsigned int v113 = v14[v79];
          unsigned int v114 = v14[v18];
          if (v113 >= v114)
          {
LABEL_50:
            unsigned int v116 = *v14;
            *unint64_t v14 = v14[v23];
            v14[v23] = v116;
            long long v276 = *(_OWORD *)(v15 + 16);
            long long v309 = *(_OWORD *)(v15 + 32);
            long long v248 = *(_OWORD *)v15;
            goto LABEL_51;
          }
          v14[v18] = v113;
          v14[v79] = v114;
          long long v284 = v19[1];
          long long v313 = v19[2];
          long long v252 = *v19;
          long long v115 = v80[1];
          *uint64_t v19 = *v80;
          v19[1] = v115;
          v19[2] = v80[2];
        }
        else
        {
          v14[v49] = v106;
          v14[v79] = v105;
          long long v284 = v50[1];
          long long v313 = v50[2];
          long long v252 = *v50;
          long long v107 = v80[1];
          *unsigned int v50 = *v80;
          v50[1] = v107;
          v50[2] = v80[2];
        }
        v80[1] = v284;
        v80[2] = v313;
        *uint64_t v80 = v252;
        goto LABEL_50;
      }
      unsigned int v27 = *v14;
      unsigned int v28 = v14[v18];
      if (*v14 >= v28)
      {
        if (v20 < v27)
        {
          *unint64_t v14 = v20;
          *((_DWORD *)a3 - 1) = v27;
          long long v269 = *(_OWORD *)(v15 + 16);
          long long v304 = *(_OWORD *)(v15 + 32);
          long long v243 = *(_OWORD *)v15;
          __n128 v37 = *v230;
          long long v38 = *(a4 - 1);
          *(_OWORD *)(v15 + 16) = *(a4 - 2);
          *(_OWORD *)(v15 + 32) = v38;
          *(__n128 *)uint64_t v15 = v37;
          *(a4 - 2) = v269;
          *(a4 - 1) = v304;
          *long long v230 = (__n128)v243;
          unsigned int v39 = v14[v18];
          if (*v14 < v39)
          {
            v14[v18] = *v14;
            *unint64_t v14 = v39;
            long long v270 = v19[1];
            long long v305 = v19[2];
            long long v244 = *v19;
            long long v40 = *(_OWORD *)v15;
            long long v41 = *(_OWORD *)(v15 + 32);
            v19[1] = *(_OWORD *)(v15 + 16);
            v19[2] = v41;
            *uint64_t v19 = v40;
            *(_OWORD *)(v15 + 16) = v270;
            *(_OWORD *)(v15 + 32) = v305;
            *(_OWORD *)uint64_t v15 = v244;
          }
        }
      }
      else if (v20 >= v27)
      {
        v14[v18] = v27;
        *unint64_t v14 = v28;
        long long v275 = v19[1];
        long long v308 = v19[2];
        long long v247 = *v19;
        long long v66 = *(_OWORD *)v15;
        long long v67 = *(_OWORD *)(v15 + 32);
        v19[1] = *(_OWORD *)(v15 + 16);
        v19[2] = v67;
        *uint64_t v19 = v66;
        *(_OWORD *)(v15 + 16) = v275;
        *(_OWORD *)(v15 + 32) = v308;
        *(_OWORD *)uint64_t v15 = v247;
        unsigned int v68 = *((_DWORD *)a3 - 1);
        unsigned int v69 = *v14;
        if (v68 < *v14)
        {
          *unint64_t v14 = v68;
          *((_DWORD *)a3 - 1) = v69;
          long long v276 = *(_OWORD *)(v15 + 16);
          long long v309 = *(_OWORD *)(v15 + 32);
          long long v248 = *(_OWORD *)v15;
          uint64_t v19 = a4 - 3;
LABEL_51:
          long long v117 = *v19;
          long long v118 = v19[2];
          *(_OWORD *)(v15 + 16) = v19[1];
          *(_OWORD *)(v15 + 32) = v118;
          *(_OWORD *)uint64_t v15 = v117;
          v19[1] = v276;
          v19[2] = v309;
          *uint64_t v19 = v248;
        }
      }
      else
      {
        v14[v18] = v20;
        *((_DWORD *)a3 - 1) = v28;
        long long v266 = v19[1];
        long long v301 = v19[2];
        long long v240 = *v19;
        __n128 v29 = *v230;
        long long v30 = *(a4 - 1);
        v19[1] = *(a4 - 2);
        v19[2] = v30;
        *uint64_t v19 = (__int128)v29;
        *(a4 - 2) = v266;
        *(a4 - 1) = v301;
        *long long v230 = (__n128)v240;
      }
      --a6;
      unsigned int v119 = *v14;
      if ((a7 & 1) == 0 && *(v14 - 1) >= v119)
      {
        long long v297 = *(_OWORD *)(v15 + 16);
        long long v323 = *(_OWORD *)(v15 + 32);
        __n128 v262 = *(__n128 *)v15;
        if (v119 < *((_DWORD *)a3 - 1))
        {
          unsigned __int16 v12 = v14;
          uint64_t v13 = (long long *)v15;
          do
          {
            unsigned int v147 = v12[1];
            ++v12;
            v13 += 3;
          }
          while (v119 >= v147);
        }
        else
        {
          long long v148 = v14 + 1;
          long long v149 = (long long *)(v15 + 48);
          do
          {
            unsigned __int16 v12 = v148;
            uint64_t v13 = v149;
            if (v148 >= (unsigned int *)a3) {
              break;
            }
            ++v148;
            v149 += 3;
          }
          while (v119 >= *v12);
        }
        long long v150 = a3;
        long long v151 = a4;
        if (v12 < (unsigned int *)a3)
        {
          long long v150 = a3;
          long long v151 = a4;
          do
          {
            unsigned int v152 = *((_DWORD *)v150 - 1);
            v150 -= 4;
            v151 -= 3;
          }
          while (v119 < v152);
        }
        if (v12 < (unsigned int *)v150)
        {
          unsigned int v153 = *v12;
          unsigned int v154 = *(_DWORD *)v150;
          do
          {
            unsigned int *v12 = v154;
            *(_DWORD *)long long v150 = v153;
            long long v237 = v13[1];
            long long v238 = v13[2];
            long long v235 = *v13;
            long long v155 = *v151;
            long long v156 = v151[2];
            v13[1] = v151[1];
            v13[2] = v156;
            long long *v13 = v155;
            v151[1] = v237;
            v151[2] = v238;
            *long long v151 = v235;
            do
            {
              unsigned int v157 = v12[1];
              ++v12;
              unsigned int v153 = v157;
              v13 += 3;
            }
            while (v119 >= v157);
            do
            {
              unsigned int v158 = *((_DWORD *)v150 - 1);
              v150 -= 4;
              unsigned int v154 = v158;
              v151 -= 3;
            }
            while (v119 < v158);
          }
          while (v12 < (unsigned int *)v150);
        }
        long long v159 = v12 - 1;
        long long v160 = (__n128 *)(v13 - 3);
        BOOL v8 = v12 - 1 >= v14;
        BOOL v9 = v12 - 1 == v14;
        if (v12 - 1 != v14)
        {
          *unint64_t v14 = *v159;
          __n128 v161 = *v160;
          long long v162 = *(v13 - 1);
          *(_OWORD *)(v15 + 16) = *(v13 - 2);
          *(_OWORD *)(v15 + 32) = v162;
          *(__n128 *)uint64_t v15 = v161;
        }
        a7 = 0;
        *long long v159 = v119;
        uint64_t result = v262;
        *(v13 - 2) = v297;
        *(v13 - 1) = v323;
        __n128 *v160 = v262;
        goto LABEL_2;
      }
      uint64_t v120 = 0;
      long long v121 = v14;
      long long v296 = *(_OWORD *)(v15 + 16);
      long long v322 = *(_OWORD *)(v15 + 32);
      __n128 v261 = *(__n128 *)v15;
      long long v122 = (long long *)v15;
      do
      {
        v122 += 3;
        unsigned int v123 = v14[++v120];
      }
      while (v123 < v119);
      long long v124 = &v14[v120];
      long long v125 = a3;
      __n128 v126 = a4;
      if (v120 == 1)
      {
        long long v125 = a3;
        __n128 v126 = a4;
        do
        {
          if (v124 >= (unsigned int *)v125) {
            break;
          }
          unsigned int v128 = *((_DWORD *)v125 - 1);
          v125 -= 4;
          v126 -= 3;
        }
        while (v128 >= v119);
      }
      else
      {
        do
        {
          unsigned int v127 = *((_DWORD *)v125 - 1);
          v125 -= 4;
          v126 -= 3;
        }
        while (v127 >= v119);
      }
      if (v124 >= (unsigned int *)v125)
      {
        long long v138 = v124 - 1;
        long long v139 = v122 - 3;
        if (v124 - 1 == v14) {
          goto LABEL_72;
        }
LABEL_71:
        *unint64_t v14 = *v138;
        long long v140 = *v139;
        long long v141 = v139[2];
        *(_OWORD *)(v15 + 16) = v139[1];
        *(_OWORD *)(v15 + 32) = v141;
        *(_OWORD *)uint64_t v15 = v140;
        goto LABEL_72;
      }
      unsigned int v129 = *(_DWORD *)v125;
      long long v130 = &v14[v120];
      long long v131 = (unsigned int *)v125;
      do
      {
        *long long v130 = v129;
        *long long v131 = v123;
        long long v132 = *v122;
        long long v236 = v122[1];
        long long v133 = v122[2];
        long long v134 = *v126;
        long long v135 = v126[2];
        v122[1] = v126[1];
        v122[2] = v135;
        *long long v122 = v134;
        v126[1] = v236;
        v126[2] = v133;
        *__n128 v126 = v132;
        do
        {
          unsigned int v136 = v130[1];
          ++v130;
          unsigned int v123 = v136;
          v122 += 3;
        }
        while (v136 < v119);
        do
        {
          unsigned int v137 = *--v131;
          unsigned int v129 = v137;
          v126 -= 3;
        }
        while (v137 >= v119);
      }
      while (v130 < v131);
      long long v138 = v130 - 1;
      long long v139 = v122 - 3;
      if (v130 - 1 != v14) {
        goto LABEL_71;
      }
LABEL_72:
      unsigned int *v138 = v119;
      v139[1] = v296;
      v139[2] = v322;
      long long *v139 = (__int128)v261;
      uint64_t v142 = v15;
      if (v124 < (unsigned int *)v125) {
        goto LABEL_75;
      }
      uint64_t v231 = v15;
      long long v143 = v14;
      uint64_t v144 = v15;
      BOOL v145 = sub_EC83EC(v14, (long long *)v15, v138, (uint64_t)v139, v261);
      uint64_t v15 = (uint64_t)(v139 + 3);
      if (sub_EC83EC(v138 + 1, v139 + 3, (unsigned int *)a3, (uint64_t)a4, v146)) {
        break;
      }
      unint64_t v14 = v138 + 1;
      long long v121 = v143;
      uint64_t v142 = v144;
      if (!v145)
      {
LABEL_75:
        sub_EC7348(v121, v142, v138, v139, a5, a6, a7 & 1);
        a7 = 0;
        unsigned __int16 v12 = v138 + 1;
        uint64_t v13 = v139 + 3;
        goto LABEL_2;
      }
    }
    a3 = (char *)v138;
    a4 = v139;
    a2 = (long long *)v231;
    a1 = v14;
    if (!v145) {
      continue;
    }
    return result;
  }
}

BOOL sub_EC83EC(unsigned int *a1, long long *a2, unsigned int *a3, uint64_t a4, __n128 a5)
{
  uint64_t v8 = a3 - a1;
  BOOL result = 1;
  switch(v8)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned int v11 = *(a3 - 1);
      unsigned int v12 = *a1;
      if (v11 < *a1)
      {
        *a1 = v11;
        *(a3 - 1) = v12;
        long long v13 = *a2;
        long long v14 = a2[1];
        long long v15 = a2[2];
        long long v17 = *(_OWORD *)(a4 - 32);
        long long v16 = *(_OWORD *)(a4 - 16);
        *a2 = *(_OWORD *)(a4 - 48);
        a2[1] = v17;
        a2[2] = v16;
        *(_OWORD *)(a4 - 32) = v14;
        *(_OWORD *)(a4 - 16) = v15;
        *(_OWORD *)(a4 - 48) = v13;
      }
      return result;
    case 3:
      __n128 v29 = a2 + 3;
      long long v30 = (long long *)(a4 - 48);
      unsigned int v32 = *a1;
      unsigned int v31 = a1[1];
      unsigned int v33 = *(a3 - 1);
      if (v31 >= *a1)
      {
        if (v33 < v31)
        {
          a1[1] = v33;
          *(a3 - 1) = v31;
          long long v79 = *v29;
          long long v80 = a2[4];
          long long v81 = a2[5];
          long long v83 = *(_OWORD *)(a4 - 32);
          long long v82 = *(_OWORD *)(a4 - 16);
          *__n128 v29 = *v30;
          a2[4] = v83;
          a2[5] = v82;
          *(_OWORD *)(a4 - 32) = v80;
          *(_OWORD *)(a4 - 16) = v81;
          *long long v30 = v79;
          unsigned int v85 = *a1;
          unsigned int v84 = a1[1];
          if (v84 < *a1)
          {
            *a1 = v84;
            a1[1] = v85;
            long long v86 = *a2;
            long long v87 = a2[1];
            long long v88 = a2[2];
            long long v90 = a2[4];
            long long v89 = a2[5];
            *a2 = *v29;
            a2[1] = v90;
            a2[2] = v89;
            a2[4] = v87;
            a2[5] = v88;
            *__n128 v29 = v86;
          }
        }
      }
      else
      {
        if (v33 >= v31)
        {
          *a1 = v31;
          a1[1] = v32;
          long long v113 = *a2;
          long long v114 = a2[1];
          long long v115 = a2[2];
          long long v117 = a2[4];
          long long v116 = a2[5];
          *a2 = *v29;
          a2[1] = v117;
          a2[2] = v116;
          a2[4] = v114;
          a2[5] = v115;
          *__n128 v29 = v113;
          unsigned int v118 = *(a3 - 1);
          unsigned int v119 = a1[1];
          if (v118 >= v119) {
            return result;
          }
          a1[1] = v118;
          *(a3 - 1) = v119;
          long long v34 = *v29;
          long long v35 = a2[4];
          long long v36 = a2[5];
          long long v121 = *(_OWORD *)(a4 - 32);
          long long v120 = *(_OWORD *)(a4 - 16);
          *__n128 v29 = *v30;
          a2[4] = v121;
          a2[5] = v120;
        }
        else
        {
          *a1 = v33;
          *(a3 - 1) = v32;
          long long v34 = *a2;
          long long v35 = a2[1];
          long long v36 = a2[2];
          long long v38 = *(_OWORD *)(a4 - 32);
          long long v37 = *(_OWORD *)(a4 - 16);
          *a2 = *v30;
          a2[1] = v38;
          a2[2] = v37;
        }
        *(_OWORD *)(a4 - 32) = v35;
        *(_OWORD *)(a4 - 16) = v36;
        *long long v30 = v34;
      }
      return result;
    case 4:
      sub_EC8930(a1, (uint64_t)a2, a1 + 1, (uint64_t)(a2 + 3), a1 + 2, a2 + 6, a3 - 1, (_OWORD *)(a4 - 48), a5);
      return 1;
    case 5:
      unsigned int v39 = a2 + 3;
      long long v40 = a1 + 2;
      long long v41 = a2 + 6;
      long long v42 = a1 + 3;
      long long v43 = a2 + 9;
      sub_EC8930(a1, (uint64_t)a2, a1 + 1, (uint64_t)(a2 + 3), a1 + 2, a2 + 6, a1 + 3, a2 + 9, a5);
      unsigned int v44 = *(a3 - 1);
      unsigned int v45 = a1[3];
      if (v44 >= v45) {
        return 1;
      }
      *long long v42 = v44;
      *(a3 - 1) = v45;
      long long v46 = *v43;
      long long v47 = a2[10];
      long long v48 = a2[11];
      long long v50 = *(_OWORD *)(a4 - 32);
      long long v49 = *(_OWORD *)(a4 - 16);
      *long long v43 = *(_OWORD *)(a4 - 48);
      a2[10] = v50;
      a2[11] = v49;
      *(_OWORD *)(a4 - 32) = v47;
      *(_OWORD *)(a4 - 16) = v48;
      *(_OWORD *)(a4 - 48) = v46;
      unsigned int v51 = *v40;
      if (*v42 >= *v40) {
        return 1;
      }
      *long long v40 = *v42;
      *long long v42 = v51;
      long long v53 = a2[7];
      long long v52 = a2[8];
      long long v54 = *v41;
      long long v55 = a2[10];
      *long long v41 = *v43;
      a2[7] = v55;
      a2[8] = a2[11];
      *long long v43 = v54;
      a2[10] = v53;
      a2[11] = v52;
      unsigned int v56 = a1[1];
      if (*v40 >= v56) {
        return 1;
      }
      a1[1] = *v40;
      a1[2] = v56;
      long long v58 = a2[4];
      long long v57 = a2[5];
      long long v59 = *v39;
      long long v60 = a2[7];
      *unsigned int v39 = *v41;
      a2[4] = v60;
      a2[5] = a2[8];
      *long long v41 = v59;
      a2[7] = v58;
      a2[8] = v57;
      unsigned int v62 = *a1;
      unsigned int v61 = a1[1];
      if (v61 >= *a1) {
        return 1;
      }
      *a1 = v61;
      a1[1] = v62;
      long long v63 = *a2;
      long long v64 = a2[1];
      long long v65 = a2[2];
      long long v67 = a2[4];
      long long v66 = a2[5];
      *a2 = *v39;
      a2[1] = v67;
      a2[2] = v66;
      a2[4] = v64;
      a2[5] = v65;
      BOOL result = 1;
      *unsigned int v39 = v63;
      return result;
    default:
      unint64_t v18 = a1 + 2;
      unsigned int v19 = a1[2];
      unsigned int v20 = a2 + 6;
      unsigned int v21 = a2 + 3;
      unsigned int v23 = *a1;
      unsigned int v22 = a1[1];
      if (v22 >= *a1)
      {
        if (v19 < v22)
        {
          a1[1] = v19;
          a1[2] = v22;
          long long v69 = a2[4];
          long long v68 = a2[5];
          long long v70 = *v21;
          long long v71 = a2[7];
          *unsigned int v21 = *v20;
          a2[4] = v71;
          a2[5] = a2[8];
          *unsigned int v20 = v70;
          a2[7] = v69;
          a2[8] = v68;
          unsigned int v73 = *a1;
          unsigned int v72 = a1[1];
          if (v72 < *a1)
          {
            *a1 = v72;
            a1[1] = v73;
            long long v74 = *a2;
            long long v75 = a2[1];
            long long v76 = a2[2];
            long long v78 = a2[4];
            long long v77 = a2[5];
            *a2 = *v21;
            a2[1] = v78;
            a2[2] = v77;
            a2[4] = v75;
            a2[5] = v76;
            *unsigned int v21 = v74;
          }
        }
      }
      else if (v19 >= v22)
      {
        *a1 = v22;
        a1[1] = v23;
        long long v91 = *a2;
        long long v92 = a2[1];
        long long v93 = a2[2];
        long long v95 = a2[4];
        long long v94 = a2[5];
        *a2 = *v21;
        a2[1] = v95;
        a2[2] = v94;
        a2[4] = v92;
        a2[5] = v93;
        *unsigned int v21 = v91;
        unsigned int v97 = a1[1];
        unsigned int v96 = a1[2];
        if (v96 < v97)
        {
          a1[1] = v96;
          a1[2] = v97;
          long long v99 = a2[4];
          long long v98 = a2[5];
          long long v100 = *v21;
          long long v101 = a2[7];
          *unsigned int v21 = *v20;
          a2[4] = v101;
          a2[5] = a2[8];
          *unsigned int v20 = v100;
          a2[7] = v99;
          a2[8] = v98;
        }
      }
      else
      {
        *a1 = v19;
        a1[2] = v23;
        long long v24 = *a2;
        long long v25 = a2[1];
        long long v26 = a2[2];
        long long v28 = a2[7];
        long long v27 = a2[8];
        *a2 = *v20;
        a2[1] = v28;
        a2[2] = v27;
        a2[7] = v25;
        a2[8] = v26;
        *unsigned int v20 = v24;
      }
      long long v102 = a1 + 3;
      if (a1 + 3 == a3) {
        return 1;
      }
      int v103 = 0;
      unsigned int v104 = a2 + 9;
      uint64_t v105 = 12;
      break;
  }
  while (1)
  {
    unsigned int v107 = *v102;
    if (*v102 < *v18)
    {
      long long v122 = *v104;
      long long v123 = v104[1];
      long long v124 = v104[2];
      unsigned int v108 = *v18;
      uint64_t v109 = v105;
      do
      {
        unsigned int v110 = v20;
        *(unsigned int *)((char *)a1 + v109) = v108;
        long long v111 = v20[1];
        v20[3] = *v20;
        v20[4] = v111;
        v20[5] = v20[2];
        uint64_t v112 = v109 - 4;
        if (v109 == 4)
        {
          unsigned int v106 = a1;
          goto LABEL_27;
        }
        v20 -= 3;
        unsigned int v108 = *(unsigned int *)((char *)a1 + v109 - 8);
        v109 -= 4;
      }
      while (v107 < v108);
      unsigned int v106 = (unsigned int *)((char *)a1 + v112);
LABEL_27:
      *unsigned int v106 = v107;
      v110[1] = v123;
      v110[2] = v124;
      *unsigned int v110 = v122;
      if (++v103 == 8) {
        return v102 + 1 == a3;
      }
    }
    unint64_t v18 = v102;
    unsigned int v20 = v104;
    v104 += 3;
    v105 += 4;
    if (++v102 == a3) {
      return 1;
    }
  }
}

__n128 sub_EC8930(unsigned int *a1, uint64_t a2, unsigned int *a3, uint64_t a4, unsigned int *a5, _OWORD *a6, unsigned int *a7, _OWORD *a8, __n128 result)
{
  unsigned int v9 = *a3;
  unsigned int v10 = *a1;
  unsigned int v11 = *a5;
  if (*a3 >= *a1)
  {
    if (v11 < v9)
    {
      *a3 = v11;
      *a5 = v9;
      BOOL result = *(__n128 *)a4;
      long long v16 = *(_OWORD *)(a4 + 16);
      long long v17 = *(_OWORD *)(a4 + 32);
      long long v19 = a6[1];
      long long v18 = a6[2];
      *(_OWORD *)a4 = *a6;
      *(_OWORD *)(a4 + 16) = v19;
      *(_OWORD *)(a4 + 32) = v18;
      a6[1] = v16;
      a6[2] = v17;
      *a6 = result;
      unsigned int v20 = *a1;
      if (*a3 < *a1)
      {
        *a1 = *a3;
        *a3 = v20;
        BOOL result = *(__n128 *)a2;
        long long v21 = *(_OWORD *)(a2 + 16);
        long long v22 = *(_OWORD *)(a2 + 32);
        long long v24 = *(_OWORD *)(a4 + 16);
        long long v23 = *(_OWORD *)(a4 + 32);
        *(_OWORD *)a2 = *(_OWORD *)a4;
        *(_OWORD *)(a2 + 16) = v24;
        *(_OWORD *)(a2 + 32) = v23;
        *(_OWORD *)(a4 + 16) = v21;
        *(_OWORD *)(a4 + 32) = v22;
        *(__n128 *)a4 = result;
      }
    }
  }
  else
  {
    if (v11 < v9)
    {
      *a1 = v11;
      *a5 = v10;
      BOOL result = *(__n128 *)a2;
      long long v12 = *(_OWORD *)(a2 + 16);
      long long v13 = *(_OWORD *)(a2 + 32);
      long long v15 = a6[1];
      long long v14 = a6[2];
      *(_OWORD *)a2 = *a6;
      *(_OWORD *)(a2 + 16) = v15;
      *(_OWORD *)(a2 + 32) = v14;
LABEL_9:
      a6[1] = v12;
      a6[2] = v13;
      *a6 = result;
      goto LABEL_10;
    }
    *a1 = v9;
    *a3 = v10;
    BOOL result = *(__n128 *)a2;
    long long v25 = *(_OWORD *)(a2 + 16);
    long long v26 = *(_OWORD *)(a2 + 32);
    long long v28 = *(_OWORD *)(a4 + 16);
    long long v27 = *(_OWORD *)(a4 + 32);
    *(_OWORD *)a2 = *(_OWORD *)a4;
    *(_OWORD *)(a2 + 16) = v28;
    *(_OWORD *)(a2 + 32) = v27;
    *(_OWORD *)(a4 + 16) = v25;
    *(_OWORD *)(a4 + 32) = v26;
    *(__n128 *)a4 = result;
    unsigned int v29 = *a3;
    if (*a5 < *a3)
    {
      *a3 = *a5;
      *a5 = v29;
      BOOL result = *(__n128 *)a4;
      long long v12 = *(_OWORD *)(a4 + 16);
      long long v13 = *(_OWORD *)(a4 + 32);
      long long v31 = a6[1];
      long long v30 = a6[2];
      *(_OWORD *)a4 = *a6;
      *(_OWORD *)(a4 + 16) = v31;
      *(_OWORD *)(a4 + 32) = v30;
      goto LABEL_9;
    }
  }
LABEL_10:
  unsigned int v32 = *a5;
  if (*a7 < *a5)
  {
    *a5 = *a7;
    *a7 = v32;
    BOOL result = *(__n128 *)a6;
    long long v33 = a6[1];
    long long v34 = a6[2];
    long long v36 = a8[1];
    long long v35 = a8[2];
    *a6 = *a8;
    a6[1] = v36;
    a6[2] = v35;
    a8[1] = v33;
    a8[2] = v34;
    *a8 = result;
    unsigned int v37 = *a3;
    if (*a5 < *a3)
    {
      *a3 = *a5;
      *a5 = v37;
      BOOL result = *(__n128 *)a4;
      long long v38 = *(_OWORD *)(a4 + 16);
      long long v39 = *(_OWORD *)(a4 + 32);
      long long v41 = a6[1];
      long long v40 = a6[2];
      *(_OWORD *)a4 = *a6;
      *(_OWORD *)(a4 + 16) = v41;
      *(_OWORD *)(a4 + 32) = v40;
      a6[1] = v38;
      a6[2] = v39;
      *a6 = result;
      unsigned int v42 = *a1;
      if (*a3 < *a1)
      {
        *a1 = *a3;
        *a3 = v42;
        BOOL result = *(__n128 *)a2;
        long long v43 = *(_OWORD *)(a2 + 16);
        long long v44 = *(_OWORD *)(a2 + 32);
        long long v46 = *(_OWORD *)(a4 + 16);
        long long v45 = *(_OWORD *)(a4 + 32);
        *(_OWORD *)a2 = *(_OWORD *)a4;
        *(_OWORD *)(a2 + 16) = v46;
        *(_OWORD *)(a2 + 32) = v45;
        *(_OWORD *)(a4 + 16) = v43;
        *(_OWORD *)(a4 + 32) = v44;
        *(__n128 *)a4 = result;
      }
    }
  }
  return result;
}

char *sub_EC8AF8(char *a1, long long *a2, char *a3, long long *a4, char *a5)
{
  if (a1 == a3) {
    return a5;
  }
  uint64_t v5 = a3 - a1;
  uint64_t v6 = (a3 - a1) >> 2;
  if (a3 - a1 >= 5 && (unint64_t)v5 >= 8)
  {
    int64_t v62 = (unint64_t)(v6 - 2) >> 1;
    int64_t v63 = v62;
    do
    {
      uint64_t v64 = 4 * v63;
      if (v62 >= (4 * v63) >> 2)
      {
        uint64_t v65 = (v64 >> 1) | 1;
        long long v66 = &a1[4 * v65];
        long long v67 = &a2[3 * v65];
        if ((v64 >> 1) + 2 < v6)
        {
          unsigned int v68 = *((_DWORD *)v66 + 1);
          unsigned int v69 = *(_DWORD *)v66;
          if (*(_DWORD *)v66 < v68)
          {
            v66 += 4;
            v67 += 3;
          }
          if (v69 < v68) {
            uint64_t v65 = (v64 >> 1) + 2;
          }
        }
        long long v70 = &a1[v64];
        unsigned int v71 = *(_DWORD *)v66;
        unsigned int v72 = *(_DWORD *)&a1[4 * v63];
        if (*(_DWORD *)v66 >= v72)
        {
          unsigned int v73 = &a2[3 * v63];
          long long v85 = *v73;
          long long v88 = v73[1];
          long long v91 = v73[2];
          while (1)
          {
            long long v76 = v73;
            unsigned int v73 = v67;
            *(_DWORD *)long long v70 = v71;
            long long v70 = v66;
            long long v77 = *v67;
            long long v78 = v67[2];
            v76[1] = v67[1];
            v76[2] = v78;
            *long long v76 = v77;
            if (v62 < v65) {
              break;
            }
            uint64_t v79 = (2 * v65) | 1;
            long long v66 = &a1[4 * v79];
            long long v67 = &a2[3 * v79];
            uint64_t v65 = 2 * v65 + 2;
            if (v65 < v6)
            {
              unsigned int v74 = *((_DWORD *)v66 + 1);
              unsigned int v75 = *(_DWORD *)v66;
              if (*(_DWORD *)v66 < v74)
              {
                v66 += 4;
                v67 += 3;
              }
              if (v75 >= v74) {
                uint64_t v65 = v79;
              }
              unsigned int v71 = *(_DWORD *)v66;
              if (*(_DWORD *)v66 < v72) {
                break;
              }
            }
            else
            {
              uint64_t v65 = v79;
              unsigned int v71 = *(_DWORD *)v66;
              if (*(_DWORD *)v66 < v72) {
                break;
              }
            }
          }
          *(_DWORD *)long long v70 = v72;
          v73[1] = v88;
          v73[2] = v91;
          *unsigned int v73 = v85;
        }
      }
      BOOL v16 = v63-- <= 0;
    }
    while (!v16);
  }
  if (a3 != a5)
  {
    if (v5 < 8)
    {
      int64_t v7 = a4;
      uint64_t v8 = a3;
      do
      {
        int v9 = *(_DWORD *)v8;
        if (*(_DWORD *)v8 < *(_DWORD *)a1)
        {
          *(_DWORD *)uint64_t v8 = *(_DWORD *)a1;
          *(_DWORD *)a1 = v9;
          long long v10 = *v7;
          long long v11 = v7[1];
          long long v12 = v7[2];
          long long v14 = a2[1];
          long long v13 = a2[2];
          *int64_t v7 = *a2;
          v7[1] = v14;
          v7[2] = v13;
          a2[1] = v11;
          a2[2] = v12;
          *a2 = v10;
        }
        v8 += 4;
        v7 += 3;
      }
      while (v8 != a5);
      goto LABEL_11;
    }
    long long v39 = (int *)(a1 + 4);
    long long v40 = (int *)(a1 + 8);
    long long v41 = a4;
    unsigned int v42 = a3;
    while (1)
    {
      int v43 = *(_DWORD *)v42;
      if (*(_DWORD *)v42 < *(_DWORD *)a1)
      {
        *(_DWORD *)unsigned int v42 = *(_DWORD *)a1;
        *(_DWORD *)a1 = v43;
        long long v44 = *v41;
        long long v45 = v41[1];
        long long v46 = v41[2];
        long long v48 = a2[1];
        long long v47 = a2[2];
        *long long v41 = *a2;
        v41[1] = v48;
        v41[2] = v47;
        a2[1] = v45;
        a2[2] = v46;
        *a2 = v44;
        if (v5 == 8 || *v39 >= *v40)
        {
          long long v49 = a1 + 4;
          long long v50 = a2 + 3;
          uint64_t v51 = 1;
          unsigned int v52 = *v39;
          unsigned int v53 = *(_DWORD *)a1;
          if (*v39 >= *(_DWORD *)a1)
          {
LABEL_40:
            long long v84 = *a2;
            long long v87 = a2[1];
            long long v90 = a2[2];
            long long v54 = a1;
            long long v55 = a2;
            while (1)
            {
              long long v58 = v55;
              long long v55 = v50;
              *(_DWORD *)long long v54 = v52;
              long long v54 = v49;
              long long v59 = *v50;
              long long v60 = v50[2];
              v58[1] = v50[1];
              v58[2] = v60;
              *long long v58 = v59;
              if ((uint64_t)((unint64_t)(v6 - 2) >> 1) < v51) {
                break;
              }
              uint64_t v61 = (2 * v51) | 1;
              long long v49 = &a1[4 * v61];
              long long v50 = &a2[3 * v61];
              uint64_t v51 = 2 * v51 + 2;
              if (v51 < v6)
              {
                unsigned int v56 = *((_DWORD *)v49 + 1);
                unsigned int v57 = *(_DWORD *)v49;
                if (*(_DWORD *)v49 < v56)
                {
                  v49 += 4;
                  v50 += 3;
                }
                if (v57 >= v56) {
                  uint64_t v51 = v61;
                }
                unsigned int v52 = *(_DWORD *)v49;
                if (*(_DWORD *)v49 < v53) {
                  break;
                }
              }
              else
              {
                uint64_t v51 = v61;
                unsigned int v52 = *(_DWORD *)v49;
                if (*(_DWORD *)v49 < v53) {
                  break;
                }
              }
            }
            *(_DWORD *)long long v54 = v53;
            v55[1] = v87;
            v55[2] = v90;
            long long *v55 = v84;
          }
        }
        else
        {
          long long v49 = a1 + 8;
          long long v50 = a2 + 6;
          uint64_t v51 = 2;
          unsigned int v52 = *v40;
          unsigned int v53 = *(_DWORD *)a1;
          if (*v40 >= *(_DWORD *)a1) {
            goto LABEL_40;
          }
        }
      }
      v42 += 4;
      v41 += 3;
      if (v42 == a5) {
        goto LABEL_11;
      }
    }
  }
  a5 = a3;
LABEL_11:
  if (v5 >= 5)
  {
    uint64_t v15 = (unint64_t)v5 >> 2;
    do
    {
      uint64_t v17 = 0;
      unsigned int v18 = *(_DWORD *)a1;
      long long v80 = *a2;
      long long v81 = a2[1];
      long long v82 = a2[2];
      long long v19 = a1;
      unsigned int v20 = a2;
      do
      {
        long long v23 = &v19[4 * v17 + 4];
        long long v24 = &v20[3 * v17 + 3];
        uint64_t v27 = (2 * v17) | 1;
        uint64_t v17 = 2 * v17 + 2;
        if (v17 < v15)
        {
          unsigned int v21 = *((_DWORD *)v23 + 1);
          unsigned int v22 = *(_DWORD *)v23;
          if (*(_DWORD *)v23 < v21)
          {
            v23 += 4;
            v24 += 3;
          }
          if (v22 >= v21) {
            uint64_t v17 = v27;
          }
        }
        else
        {
          uint64_t v17 = v27;
        }
        *(_DWORD *)long long v19 = *(_DWORD *)v23;
        long long v25 = *v24;
        long long v26 = v24[2];
        v20[1] = v24[1];
        v20[2] = v26;
        *unsigned int v20 = v25;
        long long v19 = v23;
        unsigned int v20 = v24;
      }
      while (v17 <= (uint64_t)((unint64_t)(v15 - 2) >> 1));
      a3 -= 4;
      if (v23 == a3)
      {
        *(_DWORD *)long long v23 = v18;
        v24[1] = v81;
        v24[2] = v82;
        *long long v24 = v80;
      }
      else
      {
        *(_DWORD *)long long v23 = *(_DWORD *)a3;
        long long v28 = *(a4 - 3);
        long long v29 = *(a4 - 1);
        v24[1] = *(a4 - 2);
        v24[2] = v29;
        *long long v24 = v28;
        *(_DWORD *)a3 = v18;
        *(a4 - 3) = v80;
        *(a4 - 2) = v81;
        *(a4 - 1) = v82;
        uint64_t v30 = v23 - a1 + 4;
        if (v30 >= 5)
        {
          unint64_t v31 = (((unint64_t)v30 >> 2) - 2) >> 1;
          unsigned int v32 = &a1[4 * v31];
          int v33 = *(_DWORD *)v32;
          unsigned int v34 = *(_DWORD *)v23;
          if (*(_DWORD *)v32 < *(_DWORD *)v23)
          {
            long long v86 = v24[1];
            long long v89 = v24[2];
            long long v83 = *v24;
            do
            {
              long long v35 = v24;
              *(_DWORD *)long long v23 = v33;
              long long v23 = v32;
              long long v24 = &a2[3 * v31];
              long long v36 = *v24;
              long long v37 = v24[2];
              v35[1] = v24[1];
              v35[2] = v37;
              *long long v35 = v36;
              if (!v31) {
                break;
              }
              unint64_t v31 = (v31 - 1) >> 1;
              unsigned int v32 = &a1[4 * v31];
              int v33 = *(_DWORD *)v32;
            }
            while (*(_DWORD *)v32 < v34);
            *(_DWORD *)long long v23 = v34;
            *long long v24 = v83;
            v24[1] = v86;
            v24[2] = v89;
          }
        }
      }
      a4 -= 3;
      BOOL v16 = v15-- <= 2;
    }
    while (!v16);
  }
  return a5;
}

void sub_EC9070()
{
  unk_25FC6C7 = 16641;
  word_25FC6B0 = 65;
  byte_25FC6DF = 1;
  byte_25FC6C9 = 0;
}

BOOL sub_EC9098(uint64_t a1, unsigned int a2, unsigned int *a3, int a4)
{
  if (a4) {
    unsigned int v5 = *a3;
  }
  else {
    unsigned int v5 = a2;
  }
  if (a4) {
    unsigned int v6 = a2;
  }
  else {
    unsigned int v6 = *a3;
  }
  if (sub_EB9330(a1, v5))
  {
    BOOL v7 = *(unsigned __int8 *)sub_EB935C(a1, v5) == 3;
    if (!sub_EB9330(a1, v6)) {
      return v7;
    }
    goto LABEL_11;
  }
  BOOL v7 = 0;
  if (sub_EB9330(a1, v6)) {
LABEL_11:
  }
    sub_EB935C(a1, v6);
  return v7;
}

void *sub_EC912C(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0x2127599BF4325C37 * (*a2 ^ ((unint64_t)*a2 >> 23));
  unint64_t v8 = v7 ^ (v7 >> 47);
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7 ^ (v7 >> 47);
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    long long v11 = *(void **)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      long long v12 = (void *)*v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v14 = v12[1];
            if (v14 == v8)
            {
              if (v12[2] == v6) {
                return v12;
              }
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_23;
            }
            long long v12 = (void *)*v12;
            if (!v12) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == v6) {
              return v12;
            }
          }
          else
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
            if (v13 != v3) {
              break;
            }
          }
          long long v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_23:
  BOOL v16 = operator new(0x18uLL);
  *BOOL v16 = 0;
  v16[1] = v8;
  v16[2] = *a3;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (v9 && (float)(v18 * (float)v9) >= v17)
  {
    uint64_t v19 = *(void *)a1;
    unsigned int v20 = *(void **)(*(void *)a1 + 8 * v3);
    if (v20)
    {
LABEL_26:
      *BOOL v16 = *v20;
LABEL_61:
      *unsigned int v20 = v16;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v21 = 1;
    if (v9 >= 3) {
      BOOL v21 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v9);
    unint64_t v23 = vcvtps_u32_f32(v17 / v18);
    if (v22 <= v23) {
      size_t prime = v23;
    }
    else {
      size_t prime = v22;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v9 = *(void *)(a1 + 8);
    }
    if (prime > v9) {
      goto LABEL_37;
    }
    if (prime < v9)
    {
      unint64_t v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        unint64_t v25 = std::__next_prime(v25);
      }
      else
      {
        uint64_t v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2) {
          unint64_t v25 = v27;
        }
      }
      if (prime <= v25) {
        size_t prime = v25;
      }
      if (prime < v9) {
LABEL_37:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    unint64_t v28 = v9 - 1;
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
      {
        unint64_t v3 = v8 % v9;
        uint64_t v19 = *(void *)a1;
        unsigned int v20 = *(void **)(*(void *)a1 + 8 * (v8 % v9));
        if (v20) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v8;
        uint64_t v19 = *(void *)a1;
        unsigned int v20 = *(void **)(*(void *)a1 + 8 * v8);
        if (v20) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = v28 & v8;
      uint64_t v19 = *(void *)a1;
      unsigned int v20 = *(void **)(*(void *)a1 + 8 * (v28 & v8));
      if (v20) {
        goto LABEL_26;
      }
    }
  }
  *BOOL v16 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v16;
  *(void *)(v19 + 8 * v3) = a1 + 16;
  if (*v16)
  {
    unint64_t v29 = *(void *)(*v16 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v29 >= v9) {
        v29 %= v9;
      }
    }
    else
    {
      v29 &= v9 - 1;
    }
    unsigned int v20 = (void *)(*(void *)a1 + 8 * v29);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v16;
}

void sub_EC9458(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_EC946C()
{
  unk_25FC6F7 = 16641;
  word_25FC6E0 = 65;
  byte_25FC70F = 1;
  byte_25FC6F9 = 0;
}

char *sub_EC9494(char **a1, unsigned int a2, void *a3, uint64_t a4)
{
  uint64_t v7 = sub_3766F8(a3);
  double v8 = (double)a2 / 1000000000.0;
  BOOL result = sub_32A458(v7, (uint64_t)a1[4]);
  if (!result)
  {
    double v18 = 0.0;
    goto LABEL_15;
  }
  long long v11 = &result[-*(int *)result];
  unsigned int v12 = *(unsigned __int16 *)v11;
  if (v12 >= 0xB && *((_WORD *)v11 + 5))
  {
    unsigned int v13 = *(unsigned __int16 *)&result[*((unsigned __int16 *)v11 + 5)];
    unsigned int v14 = *(unsigned __int16 *)(v7 + 3880);
    if (!*(_WORD *)(v7 + 3880)) {
      goto LABEL_11;
    }
  }
  else
  {
    unsigned int v13 = 0xFFFF;
    unsigned int v14 = *(unsigned __int16 *)(v7 + 3880);
    if (!*(_WORD *)(v7 + 3880)) {
      goto LABEL_11;
    }
  }
  if (v12 >= 0x11)
  {
    uint64_t v15 = *((unsigned __int16 *)v11 + 8);
    if (v15)
    {
      BOOL v16 = &result[v15 + *(unsigned int *)&result[v15]];
      if (*(_DWORD *)v16 >= v14)
      {
        unsigned int v17 = *(unsigned __int16 *)&v16[2 * v14 + 2];
        if ((unsigned __int16)(v17 + 1) > 1u)
        {
          HIDWORD(v10) = 1083129856;
          double v18 = (double)v17 / 1000.0;
          goto LABEL_15;
        }
      }
    }
  }
LABEL_11:
  double v18 = 0.3;
  double v10 = (double)v13 / 1000.0;
  if (v13 != 0xFFFF) {
    double v18 = (double)v13 / 1000.0;
  }
LABEL_15:
  double v19 = v8 * v18;
  unsigned int v20 = *a1;
  uint64_t v21 = *(int *)*a1;
  uint64_t v22 = -v21;
  unint64_t v23 = &(*a1)[-v21];
  unsigned int v24 = *(unsigned __int16 *)v23;
  if (v24 <= 8)
  {
    double v26 = v19 * 0.0 + *(double *)(a4 + 24);
    *(double *)(a4 + 24) = v26;
    goto LABEL_20;
  }
  uint64_t v25 = *((unsigned __int16 *)v23 + 4);
  if (*((_WORD *)v23 + 4))
  {
    LODWORD(v10) = *(_DWORD *)&v20[v25];
    double v26 = *(double *)(a4 + 24) + v19 * (double)*(unint64_t *)&v10;
    *(double *)(a4 + 24) = v26;
    if (v24 < 0x2F) {
      goto LABEL_20;
    }
  }
  else
  {
    double v26 = *(double *)(a4 + 24) + v19 * 0.0;
    *(double *)(a4 + 24) = v26;
    if (v24 < 0x2F) {
      goto LABEL_20;
    }
  }
  uint64_t v35 = *((unsigned __int16 *)v23 + 23);
  if (!v35 || v20[v35]) {
    goto LABEL_20;
  }
  if (v25)
  {
    LODWORD(v26) = *(_DWORD *)&v20[v25];
    double v26 = v8 * (double)*(unint64_t *)&v26;
    if (v26 < 0.0) {
      goto LABEL_37;
    }
  }
  else
  {
    double v26 = v8 * 0.0;
    if (v8 * 0.0 < 0.0)
    {
LABEL_37:
      if (v26 > -4.50359963e15)
      {
        uint64_t v36 = (uint64_t)(v26 + v26);
        if (v36 >= 1) {
          --v36;
        }
        goto LABEL_51;
      }
      goto LABEL_52;
    }
  }
  if (v26 < 4.50359963e15)
  {
    uint64_t v36 = (uint64_t)(v26 + v26) + 1;
LABEL_51:
    double v26 = (double)(v36 >> 1);
  }
LABEL_52:
  *(void *)(a4 + 32) += (uint64_t)v26;
  unsigned int v20 = *a1;
  uint64_t v22 = -(uint64_t)*(int *)*a1;
LABEL_20:
  uint64_t v27 = &v20[v22];
  if (*(unsigned __int16 *)v27 >= 0x2Fu && *((_WORD *)v27 + 23))
  {
    unsigned int v28 = v20[*((unsigned __int16 *)v27 + 23)];
    BOOL v29 = v28 > 0x1A;
    int v30 = (1 << v28) & 0x4810000;
    if (!v29 && v30 != 0)
    {
      uint64_t v32 = *((unsigned __int16 *)v27 + 4);
      if (v32)
      {
        LODWORD(v26) = *(_DWORD *)&v20[v32];
        double v33 = v8 * (double)*(unint64_t *)&v26;
        if (v33 < 0.0) {
          goto LABEL_28;
        }
      }
      else
      {
        double v33 = v8 * 0.0;
        if (v8 * 0.0 < 0.0)
        {
LABEL_28:
          if (v33 > -4.50359963e15)
          {
            uint64_t v34 = (uint64_t)(v33 + v33);
            if (v34 >= 1) {
              --v34;
            }
            goto LABEL_44;
          }
          goto LABEL_45;
        }
      }
      if (v33 < 4.50359963e15)
      {
        uint64_t v34 = (uint64_t)(v33 + v33) + 1;
LABEL_44:
        double v33 = (double)(v34 >> 1);
      }
LABEL_45:
      *(void *)(a4 + 40) += (uint64_t)v33;
    }
  }
  return result;
}

void sub_EC9798(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
}

BOOL sub_EC97AC(uint64_t a1)
{
  return *(_DWORD *)a1 != -1
      && *(_DWORD *)(a1 + 4) != 0x7FFFFFFF
      && *(void *)(a1 + 8) != 0x7FFFFFFFFFFFFFFFLL
      && *(double *)(a1 + 24) >= 0.0
      && *(void *)(a1 + 32) != 0x7FFFFFFFFFFFFFFFLL
      && *(void *)(a1 + 40) != 0x7FFFFFFFFFFFFFFFLL;
}

unint64_t sub_EC980C(uint64_t a1, unsigned __int8 *a2, int a3, uint64_t a4, uint64_t a5, double a6, double a7)
{
  unint64_t v9 = (uint64_t *)(a2 + 88);
  if (a3) {
    unint64_t v9 = (uint64_t *)(a2 + 8);
  }
  uint64_t v19 = *v9;
  if (a3) {
    uint64_t v10 = (uint64_t)(a2 + 16);
  }
  else {
    uint64_t v10 = (uint64_t)(a2 + 96);
  }
  unint64_t result = sub_EC98F8(a6, a7, a4, (uint64_t)&v19, v10, a5, 0);
  v20[0] = result;
  v20[1] = v12;
  uint64_t v14 = 0x7FFFFFFFLL;
  unsigned int v15 = -1;
  uint64_t v16 = 0x7FFFFFFFFFFFFFFFLL;
  if (result != -1 && HIDWORD(result) != 0x7FFFFFFF && v12 != 0x7FFFFFFFFFFFFFFFLL)
  {
    if (*a2 - 3 > 1)
    {
      unsigned int v15 = *(_DWORD *)a1 + result;
      uint64_t v14 = (*(_DWORD *)(a1 + 4) + HIDWORD(result));
      uint64_t v18 = *(void *)(a1 + 8);
    }
    else
    {
      unint64_t result = sub_EC9AAC(v20, 2.0, v13);
      uint64_t v18 = v17;
      unsigned int v15 = *(_DWORD *)a1 + result;
      uint64_t v14 = (*(_DWORD *)(a1 + 4) + HIDWORD(result));
      uint64_t v12 = *(void *)(a1 + 8);
    }
    uint64_t v16 = v12 + v18;
  }
  *(void *)a1 = v15 | (unint64_t)(v14 << 32);
  *(void *)(a1 + 8) = v16;
  return result;
}

uint64_t sub_EC98F8(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  BOOL v8 = 0;
  if (a7) {
    int v9 = *(_DWORD *)(a5 + 48);
  }
  else {
    int v9 = 0;
  }
  if (a7) {
    int v10 = *(_DWORD *)(a5 + 52);
  }
  else {
    int v10 = 0;
  }
  LODWORD(a2) = *(_DWORD *)(a6 + 1176);
  double v11 = (double)*(unint64_t *)&a2;
  unsigned int v12 = *(unsigned __int16 *)(a5 + 66);
  if (v12 >> 5 <= 0x464)
  {
    unsigned int v13 = *(unsigned __int16 *)(a6 + 1180);
    BOOL v8 = v13 >> 5 < 0x465 && v12 < v13;
  }
  if (*(double *)(a5 + 16) > v11) {
    BOOL v8 = 1;
  }
  if (*(unsigned char *)(a5 + 64)) {
    BOOL v15 = !v8;
  }
  else {
    BOOL v15 = 1;
  }
  if (!v15 && *(void *)(a5 + 8) <= *(void *)(a6 + 1184))
  {
    v9 += *(_DWORD *)(a6 + 1160);
    v10 += *(_DWORD *)(a6 + 1164);
  }
  if (*(unsigned char *)(a5 + 24))
  {
    uint64_t v16 = *(void *)(a5 + 8);
    if (v16 >= *(void *)(a6 + 1152))
    {
      v9 += *(_DWORD *)(a6 + 1136);
      v10 += *(_DWORD *)(a6 + 1140);
    }
  }
  else
  {
    uint64_t v16 = *(void *)(a5 + 8);
  }
  v31[0] = 0.1 / (*(double *)(a6 + 56) / 3.6);
  v31[1] = 0.0;
  v31[2] = 0.0;
  double v17 = *(double *)(a5 + 32);
  v27[0] = v16;
  v27[1] = 0;
  uint64_t v28 = 0;
  if (v17 <= 0.95)
  {
    unint64_t v29 = sub_ECA2D8(v27, v31, v17);
    uint64_t v30 = v23;
    unint64_t v25 = sub_ECA2D8(&v29, (double *)(a6 + 1208), v24);
    uint64_t v21 = (*(_DWORD *)(a6 + 1192) + v9 + v25);
    uint64_t v22 = (*(_DWORD *)(a6 + 1196) + v10 + HIDWORD(v25));
  }
  else
  {
    unint64_t v29 = sub_ECA2D8(v27, v31, v17);
    uint64_t v30 = v18;
    unint64_t v20 = sub_ECA2D8(&v29, (double *)(a6 + 1232), v19);
    uint64_t v21 = (v9 + v20);
    uint64_t v22 = (v10 + HIDWORD(v20));
  }
  return v21 | (v22 << 32);
}

unint64_t sub_EC9AAC(_DWORD *a1, double a2, double a3)
{
  LODWORD(a3) = *a1;
  double v3 = (double)*(unint64_t *)&a3 / a2;
  if (v3 >= 0.0)
  {
    if (v3 >= 4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v4 = (uint64_t)(v3 + v3) + 1;
  }
  else
  {
    if (v3 <= -4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v4 = (uint64_t)(v3 + v3);
    if (v4 >= 1) {
      --v4;
    }
  }
  double v3 = (double)(v4 >> 1);
LABEL_9:
  double v5 = (double)(int)a1[1] / a2;
  if (v5 >= 0.0)
  {
    if (v5 < 4.50359963e15)
    {
      uint64_t v6 = (uint64_t)(v5 + v5) + 1;
LABEL_16:
      double v5 = (double)(v6 >> 1);
    }
  }
  else if (v5 > -4.50359963e15)
  {
    uint64_t v6 = (uint64_t)(v5 + v5);
    if (v6 >= 1) {
      --v6;
    }
    goto LABEL_16;
  }
  return v3 | ((unint64_t)(int)v5 << 32);
}

char *sub_EC9BD8(uint64_t a1, int **a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6, void **a7)
{
  double v14 = sub_ECA6AC(a4, a2, a5, 0x7FFFFFFF, a6);
  unint64_t v15 = sub_ECA410(a4, a2, a3, a5, 0x7FFFFFFF, a6, v14);
  uint64_t v17 = 0x7FFFFFFFFFFFFFFFLL;
  BOOL v19 = v15 == -1 || (v15 & 0xFFFFFFFF00000000) == 0x7FFFFFFF00000000 || v16 == 0x7FFFFFFFFFFFFFFFLL;
  unint64_t v20 = 0x7FFFFFFFFFFFFFFFLL;
  if (!v19)
  {
    uint64_t v17 = *(void *)(a1 + 8) + v16;
    unint64_t v20 = (*(_DWORD *)a1 + v15) | ((unint64_t)(*(_DWORD *)(a1 + 4) + HIDWORD(v15)) << 32);
  }
  *(void *)a1 = v20;
  *(void *)(a1 + 8) = v17;
  *(_DWORD *)(a1 + 16) |= sub_C73DB0(a2);
  return sub_EC9494((char **)a2, a3, *a7, a1);
}

char *sub_EC9CCC(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6, void **a7)
{
  unsigned int v13 = (int **)(a2 + 8);
  sub_42A0((uint64_t)v20);
  unint64_t v14 = sub_EC9DF4(a4, v13, a3, a5, v20, a6);
  uint64_t v16 = v15;
  sub_4814((uint64_t)v20);
  uint64_t v17 = 0x7FFFFFFFFFFFFFFFLL;
  if (v14 == -1 || (v14 & 0xFFFFFFFF00000000) == 0x7FFFFFFF00000000)
  {
    unint64_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    unint64_t v18 = 0x7FFFFFFFFFFFFFFFLL;
    if (v16 != 0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v17 = *(void *)(a1 + 8) + v16;
      unint64_t v18 = (*(_DWORD *)a1 + v14) | ((unint64_t)(*(_DWORD *)(a1 + 4) + HIDWORD(v14)) << 32);
    }
  }
  *(void *)a1 = v18;
  *(void *)(a1 + 8) = v17;
  *(_DWORD *)(a1 + 16) |= sub_EB0B40(v13);
  return sub_EC9494((char **)v13, 0x3B9ACA00u, *a7, a1);
}

void sub_EC9DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_4814((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_EC9DF4(uint64_t a1, int **a2, unsigned int a3, uint64_t a4, unsigned int *a5, int a6)
{
  sub_ECBC00(a1, a2, a4, a5, a6);
  double v13 = v12;
  int v14 = sub_4F44(a5);
  unint64_t v15 = sub_ECA410(a1, a2, a3, a4, v14, a6, v13);
  int v17 = v15;
  unint64_t v18 = HIDWORD(v15);
  if (v15 == -1 || v18 == 0x7FFFFFFF || v16 == 0x7FFFFFFFFFFFFFFFLL)
  {
    unint64_t v21 = 0x7FFFFFFF00000000;
    LODWORD(v22) = -1;
  }
  else
  {
    unint64_t v22 = sub_ECC250(a1, a2, a4, v14, a6);
    if (v22 == -1 || HIDWORD(v22) == 0x7FFFFFFF || v23 == 0x7FFFFFFFFFFFFFFFLL)
    {
      unint64_t v21 = v22 & 0xFFFFFFFF00000000;
    }
    else
    {
      if ((v22 + v17) <= 1) {
        LODWORD(v22) = 1;
      }
      else {
        LODWORD(v22) = v22 + v17;
      }
      unint64_t v21 = (unint64_t)(HIDWORD(v22) + v18) << 32;
    }
  }
  return v21 | v22;
}

unint64_t sub_EC9F28(uint64_t a1, unint64_t a2, unsigned int *a3, unint64_t a4, unsigned int *a5, uint64_t a6)
{
  unint64_t result = sub_ED4F5C(a6, a2, a3, a4, a5);
  uint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
  if (result == -1 || (result & 0xFFFFFFFF00000000) == 0x7FFFFFFF00000000)
  {
    *(void *)a1 = 0x7FFFFFFFFFFFFFFFLL;
    *(void *)(a1 + 8) = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    unint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    if (v8 != 0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v9 = *(void *)(a1 + 8) + v8;
      unint64_t v10 = (*(_DWORD *)a1 + result) | ((unint64_t)(*(_DWORD *)(a1 + 4)
                                                                                     + HIDWORD(result)) << 32);
    }
    *(void *)a1 = v10;
    *(void *)(a1 + 8) = v9;
  }
  return result;
}

double sub_EC9FB0(uint64_t a1, uint64_t a2)
{
  *(int32x2_t *)a1 = vadd_s32(*(int32x2_t *)a2, *(int32x2_t *)a1);
  *(void *)(a1 + 8) += *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) |= *(_DWORD *)(a2 + 16);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a2 + 32) + *(void *)(a1 + 32);
  double result = *(double *)(a2 + 24) + *(double *)(a1 + 24);
  *(double *)(a1 + 24) = result;
  *(void *)(a1 + 32) = v3;
  *(void *)(a1 + 40) = *(void *)(a2 + 40) + v2;
  return result;
}

uint64_t sub_ECA010(_DWORD *a1, unsigned __int8 *a2, int a3, uint64_t a4, uint64_t a5, double a6, double a7)
{
  uint64_t v9 = (uint64_t *)(a2 + 88);
  if (a3) {
    uint64_t v9 = (uint64_t *)(a2 + 8);
  }
  uint64_t v18 = *v9;
  if (a3) {
    uint64_t v10 = (uint64_t)(a2 + 16);
  }
  else {
    uint64_t v10 = (uint64_t)(a2 + 96);
  }
  uint64_t v11 = sub_EC98F8(a6, a7, a4, (uint64_t)&v18, v10, a5, 0);
  unint64_t v13 = v11;
  if (v11 == -1)
  {
    uint64_t result = 0x7FFFFFFFLL;
    goto LABEL_16;
  }
  if ((v11 & 0xFFFFFFFF00000000) != 0x7FFFFFFF00000000)
  {
    uint64_t result = 0x7FFFFFFFLL;
    if (v12 != 0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t result = HIDWORD(v13);
      unint64_t v15 = HIDWORD(v13);
      if (*a2 - 3 > 1)
      {
LABEL_21:
        *a1 += v15;
        return result;
      }
      double v16 = (double)(int)result * 0.5;
      if (v16 >= 0.0)
      {
        if (v16 < 4.50359963e15)
        {
          uint64_t v17 = (uint64_t)(v16 + v16) + 1;
LABEL_19:
          double v16 = (double)(v17 >> 1);
        }
      }
      else if (v16 > -4.50359963e15)
      {
        uint64_t v17 = (uint64_t)(v16 + v16);
        if (v17 >= 1) {
          --v17;
        }
        goto LABEL_19;
      }
      LODWORD(v15) = (int)v16;
      goto LABEL_21;
    }
LABEL_16:
    *a1 = 0x7FFFFFFF;
    return result;
  }
  uint64_t result = 0x7FFFFFFFLL;
  *a1 = 0x7FFFFFFF;
  return result;
}

unint64_t sub_ECA158(int *a1, int **a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6, unsigned int *a7)
{
  sub_ECBC00(a4, a2, a5, a7, a6);
  double v15 = v14;
  int v16 = sub_4F44(a7);
  unint64_t result = sub_ECA410(a4, a2, a3, a5, v16, a6, v15) >> 32;
  int v18 = 0x7FFFFFFF;
  if (result != 0x7FFFFFFF) {
    int v18 = *a1 + result;
  }
  *a1 = v18;
  return result;
}

unint64_t sub_ECA218(int *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6, unsigned int *a7)
{
  unint64_t result = sub_EC9DF4(a4, (int **)(a2 + 8), a3, a5, a7, a6) >> 32;
  int v9 = 0x7FFFFFFF;
  if (result != 0x7FFFFFFF) {
    int v9 = *a1 + result;
  }
  *a1 = v9;
  return result;
}

unint64_t sub_ECA280(int *a1, unint64_t a2, unsigned int *a3, unint64_t a4, unsigned int *a5, uint64_t a6)
{
  unint64_t result = sub_ED4F5C(a6, a2, a3, a4, a5) >> 32;
  int v8 = 0x7FFFFFFF;
  if (result != 0x7FFFFFFF) {
    int v8 = *a1 + result;
  }
  *a1 = v8;
  return result;
}

_DWORD *sub_ECA2C4(_DWORD *result, _DWORD *a2)
{
  *result += *a2;
  return result;
}

unint64_t sub_ECA2D8(_DWORD *a1, double *a2, double a3)
{
  LODWORD(a3) = *a1;
  double v3 = *a2 * (double)*(unint64_t *)&a3;
  if (v3 >= 0.0)
  {
    if (v3 >= 4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v4 = (uint64_t)(v3 + v3) + 1;
  }
  else
  {
    if (v3 <= -4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v4 = (uint64_t)(v3 + v3);
    if (v4 >= 1) {
      --v4;
    }
  }
  double v3 = (double)(v4 >> 1);
LABEL_9:
  double v5 = a2[1] * (double)(int)a1[1];
  if (v5 >= 0.0)
  {
    if (v5 < 4.50359963e15)
    {
      uint64_t v6 = (uint64_t)(v5 + v5) + 1;
LABEL_16:
      double v5 = (double)(v6 >> 1);
    }
  }
  else if (v5 > -4.50359963e15)
  {
    uint64_t v6 = (uint64_t)(v5 + v5);
    if (v6 >= 1) {
      --v6;
    }
    goto LABEL_16;
  }
  return v3 | ((unint64_t)(int)v5 << 32);
}

unint64_t sub_ECA410(uint64_t a1, int **a2, unsigned int a3, uint64_t a4, int a5, int a6, double a7)
{
  if (a6 != 2 || !*(unsigned char *)(a4 + 177)) {
    goto LABEL_18;
  }
  if (*(unsigned char *)(a4 + 178))
  {
    if (a5 == 0x7FFFFFFF) {
      goto LABEL_18;
    }
    int v14 = *(_DWORD *)(a1 + 48);
    if (v14 == 0x7FFFFFFF) {
      goto LABEL_18;
    }
    int v15 = *(_DWORD *)(a4 + 172);
    char v16 = v15 < 0 ? -5 : 5;
    if ((int)(v15 / -10
             + v14
             + (((-103 * (char)(v16 + v15 % 10)) >> 15) & 1)
             + ((-103 * (char)(v16 + v15 % 10)) >> 10)) > a5)
      goto LABEL_18;
    int v17 = *(_DWORD *)(a4 + 168);
    char v18 = v17 < 0 ? -5 : 5;
    if ((int)(v17 / 10
             + v14
             + (((103 * (char)(v18 + v17 % 10)) >> 15) & 1)
             + ((103 * (char)(v18 + v17 % 10)) >> 10)) < a5)
      goto LABEL_18;
  }
  char v42 = *(unsigned char *)(a4 + 179);
  long long v40 = a2;
  unint64_t v41 = (unint64_t)&v42;
  uint64_t v19 = *(void *)(a1 + 16);
  unint64_t v20 = (unint64_t)a2[4];
  if (*(unsigned char *)(a1 + 52))
  {
    sub_ECB238(v19, v20, &v40, 0, &v37);
    double v21 = v37;
    double v22 = v38;
    if (v37 == 0.0) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  sub_ECB238(v19, v20, &v40, *(_DWORD *)(v19 + 48), &v37);
  double v21 = v37;
  double v22 = v38;
  if (v37 != 0.0)
  {
LABEL_16:
    double v38 = v21;
    operator delete(*(void **)&v21);
  }
LABEL_17:
  if (*(void *)&v21 != *(void *)&v22)
  {
LABEL_27:
    unint64_t v28 = 0x7FFFFFFF00000000;
    unsigned int v29 = -1;
    return v28 & 0xFFFFFFFF00000000 | v29;
  }
LABEL_18:
  if (!a3)
  {
    unsigned int v29 = 0;
    unint64_t v28 = 0;
    return v28 & 0xFFFFFFFF00000000 | v29;
  }
  sub_ECAAF4(a1, a2, a4, a5, a6);
  if (v23 == INFINITY || v24 == INFINITY || v25 == INFINITY) {
    goto LABEL_27;
  }
  double v30 = (double)a3 / 1000000000.0;
  double v31 = v30 * 0.1 / (a7 / 3.6);
  double v37 = v23 * v31;
  double v38 = v24 * v31;
  double v39 = v25 * v30;
  uint64_t v32 = (unsigned __int16 *)((char *)*a2 - **a2);
  if (*v32 >= 9u && (uint64_t v33 = v32[4]) != 0) {
    unsigned int v34 = *(int *)((char *)*a2 + v33);
  }
  else {
    unsigned int v34 = 0;
  }
  LODWORD(v40) = v34;
  HIDWORD(v40) = v34;
  unint64_t v41 = v34;
  unint64_t v35 = sub_ECA2D8(&v40, &v37, v25 * v30);
  unsigned int v29 = v35;
  unint64_t v28 = v35 & 0xFFFFFFFF00000000;
  return v28 & 0xFFFFFFFF00000000 | v29;
}

double sub_ECA6AC(uint64_t a1, int **a2, uint64_t a3, signed int a4, int a5)
{
  uint64_t v8 = (uint64_t)*a2;
  int v9 = *((unsigned __int8 *)a2 + 38);
  uint64_t v10 = (unsigned __int16 *)((char *)*a2 - **a2);
  unsigned int v11 = *v10;
  if (*((unsigned char *)a2 + 38))
  {
    if (v11 < 0xB || !v10[5] || (*(_DWORD *)(v8 + v10[5]) & 0xA) == 0) {
      return *(double *)(a3 + 56);
    }
  }
  else if (v11 < 0xB || !v10[5] || (*(_DWORD *)(v8 + v10[5]) & 9) == 0)
  {
    return *(double *)(a3 + 56);
  }
  if (*(unsigned char *)(a3 + 152) && v11 >= 0x2F && v10[23])
  {
    unsigned int v12 = *(unsigned __int8 *)(v8 + v10[23]);
    BOOL v13 = v12 > 0x2D;
    uint64_t v14 = (1 << v12) & 0x208040000000;
    if (!v13 && v14 != 0) {
      return *(double *)(a3 + 160);
    }
  }
  if (a5 != 2) {
    goto LABEL_73;
  }
  if (a4 == 0x7FFFFFFF) {
    goto LABEL_73;
  }
  if (!*(unsigned char *)(a3 + 176)) {
    goto LABEL_73;
  }
  int v18 = *(_DWORD *)(a1 + 48);
  if (v18 == 0x7FFFFFFF) {
    goto LABEL_73;
  }
  int v19 = *(_DWORD *)(a3 + 172);
  char v20 = v19 < 0 ? -5 : 5;
  if ((int)(v19 / -10
           + v18
           + (((-103 * (char)(v20 + v19 % 10)) >> 15) & 1)
           + ((-103 * (char)(v20 + v19 % 10)) >> 10)) > a4)
    goto LABEL_73;
  int v21 = *(_DWORD *)(a3 + 168);
  char v22 = v21 < 0 ? -5 : 5;
  if ((int)(v21 / 10
           + v18
           + (((103 * (char)(v22 + v21 % 10)) >> 15) & 1)
           + ((103 * (char)(v22 + v21 % 10)) >> 10)) < a4)
    goto LABEL_73;
  double v23 = *(uint64_t **)(a1 + 16);
  if (*(unsigned char *)(a1 + 52))
  {
    if (v11 >= 0x1D && (uint64_t v24 = v10[14]) != 0) {
      uint64_t v25 = *(void *)(v8 + v24);
    }
    else {
      uint64_t v25 = 0;
    }
    uint64_t v26 = v9 ? -v25 : v25;
    double v27 = sub_299E44(v23, v26, 0);
  }
  else
  {
    if (v11 >= 0x1D && (uint64_t v28 = v10[14]) != 0) {
      uint64_t v29 = *(void *)(v8 + v28);
    }
    else {
      uint64_t v29 = 0;
    }
    uint64_t v30 = v9 ? -v29 : v29;
    double v27 = sub_299D78(v23, v30);
  }
  BOOL v31 = *(uint64_t *)&v27 <= -1 || ((*(void *)&v27 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF;
  BOOL v32 = v31 && (unint64_t)(*(void *)&v27 - 1) >= 0xFFFFFFFFFFFFFLL;
  BOOL v33 = !v32 || (*(void *)&v27 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (!v33 || v27 <= 0.0)
  {
LABEL_73:
    double v38 = sub_45A4DC(*(void *)a1, (uint64_t)a2);
    BOOL v41 = *(uint64_t *)&v38 > -1 && ((*(void *)&v38 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF
       || (unint64_t)(*(void *)&v38 - 1) < 0xFFFFFFFFFFFFFLL
       || (*(void *)&v38 & 0x7FFFFFFFFFFFFFFFLL) == 0;
    if (v41 && v38 > 0.0) {
      return v38 * (1.0 - *(double *)(a3 + 40)) + *(double *)(a3 + 40) * *(double *)(a3 + 48);
    }
    uint64_t v42 = (uint64_t)*a2;
    int v43 = (unsigned __int16 *)((char *)*a2 - **a2);
    unsigned int v44 = *v43;
    if (v44 < 0xB) {
      goto LABEL_92;
    }
    if (v43[5] && (*(unsigned char *)(v42 + v43[5]) & 8) != 0) {
      return *(double *)(a3 + 64);
    }
    if (v44 >= 0x1B && (uint64_t v45 = v43[13]) != 0) {
      uint64_t v46 = *(unsigned __int8 *)(v42 + v45);
    }
    else {
LABEL_92:
    }
      uint64_t v46 = 0;
    return *(double *)(a3 + 8 * v46 + 72);
  }
  double v16 = v27 * (1.0 - *(double *)(a3 + 40)) + *(double *)(a3 + 40) * *(double *)(a3 + 48);
  double v34 = sub_45A4DC(*(void *)a1, (uint64_t)a2);
  BOOL v37 = *(uint64_t *)&v34 > -1 && ((*(void *)&v34 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF
     || (unint64_t)(*(void *)&v34 - 1) < 0xFFFFFFFFFFFFFLL
     || (*(void *)&v34 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (v37 && v34 > 0.0) {
    return v16 * *(double *)(a3 + 184) + v34 * (1.0 - *(double *)(a3 + 184));
  }
  long long v47 = (unsigned __int16 *)((char *)*a2 - **a2);
  if (*v47 >= 0xBu)
  {
    uint64_t v48 = v47[5];
    if (v48)
    {
      if ((*(int *)((char *)*a2 + v48) & 8) != 0) {
        return *(double *)(a3 + 64);
      }
    }
  }
  return v16;
}

void sub_ECAAF4(uint64_t a1, int **a2, uint64_t a3, int a4, int a5)
{
  uint64_t v6 = (unsigned __int16 *)((char *)*a2 - **a2);
  if (*v6 < 0xBu) {
    return;
  }
  uint64_t v7 = v6[5];
  if (!v7) {
    return;
  }
  unsigned int v8 = *(int *)((char *)*a2 + v7);
  if ((v8 & 8) != 0) {
    return;
  }
  int v10 = *((unsigned char *)a2 + 38) ? 2 : 1;
  if ((v8 & v10) == 0) {
    return;
  }
  unint64_t v14 = (v8 & 0x400000) != 0 ? 2 : (v8 >> 21) & 1;
  int v15 = (double *)sub_ECB82C((void *)(a3 + 288), v14);
  BOOL v16 = *v15 == INFINITY || v15[1] == INFINITY;
  if (v16 || v15[2] == INFINITY) {
    return;
  }
  int v18 = (unsigned __int16 *)((char *)*a2 - **a2);
  float64x2_t v60 = *(float64x2_t *)v15;
  if (*v18 >= 0x2Fu && (uint64_t v19 = v18[23]) != 0) {
    unsigned int v20 = *((unsigned __int8 *)*a2 + v19);
  }
  else {
    unsigned int v20 = 32;
  }
  int v21 = (float64x2_t *)sub_ECB82C((void *)(a3 + 728), v20);
  BOOL v22 = v21->f64[0] == INFINITY || v21->f64[1] == INFINITY;
  if (v22 || v21[1].f64[0] == INFINITY) {
    return;
  }
  float64x2_t v24 = vmulq_f64(v60, *v21);
  if (*(unsigned char *)(a3 + 483)
    || (uint64_t v25 = (unsigned __int16 *)((char *)*a2 - **a2), *v25 < 0x2Fu)
    || (uint64_t v26 = v25[23]) == 0
    || ((unsigned int v27 = *((unsigned __int8 *)*a2 + v26), v28 = v27 > 0x2A, v29 = (1 << v27) & 0x50426810004, !v28)
      ? (BOOL v30 = v29 == 0)
      : (BOOL v30 = 1),
        v30))
  {
    if (*(unsigned char *)(a3 + 484)
      || (uint64_t v36 = a2[1]) == 0
      || (BOOL v37 = (unsigned __int16 *)((char *)v36 - *v36), *v37 < 0x11u)
      || (uint64_t v38 = v37[8]) == 0
      || (*(_WORD *)((unsigned char *)v36 + v38) & 4) == 0)
    {
      BOOL v31 = (char *)*a2;
      BOOL v32 = (unsigned __int16 *)((char *)*a2 - **a2);
      unsigned int v33 = *v32;
      if (v33 < 0xB)
      {
        float64x2_t v61 = v24;
      }
      else
      {
        if (v32[5] && (v31[v32[5] + 3] & 2) != 0)
        {
LABEL_57:
          if (*(void *)(a3 + 208) != *(void *)(a3 + 216))
          {
            if (!sub_ECBA5C(a1, a3, a4, a5))
            {
              int v39 = 1;
              goto LABEL_64;
            }
            unint64_t v40 = sub_3A5DDC(*(void *)(a1 + 24), (uint64_t)a2[4]);
            BOOL v41 = *(uint64_t **)(a1 + 16);
            if (*(unsigned char *)(a1 + 52)) {
              sub_29A394(v41, v40, 0);
            }
            else {
              sub_29A290((uint64_t)v41, v40);
            }
          }
          int v39 = 1;
          goto LABEL_64;
        }
        float64x2_t v61 = v24;
        if (v33 >= 0x1B)
        {
          uint64_t v34 = v32[13];
          if (v34)
          {
            unint64_t v35 = v31[v34];
LABEL_50:
            vmulq_f64(v61, *(float64x2_t *)sub_ECB82C((void *)(a3 + 240), v35));
            goto LABEL_57;
          }
        }
      }
      unint64_t v35 = 0;
      goto LABEL_50;
    }
  }
  int v39 = 0;
LABEL_64:
  uint64_t v42 = (char *)*a2;
  int v43 = (unsigned __int16 *)((char *)*a2 - **a2);
  unsigned int v44 = *v43;
  if (v44 < 0xB) {
    goto LABEL_87;
  }
  uint64_t v45 = v43[5];
  if (v43[5]
    && (v42[v45 + 1] & 1) != 0
    && (*(double *)(a3 + 336) == INFINITY || *(double *)(a3 + 344) == INFINITY || *(double *)(a3 + 352) == INFINITY))
  {
    return;
  }
  if (v44 < 0x2F)
  {
LABEL_87:
    if (*(__int16 *)(a3 + 480) == -1)
    {
LABEL_90:
      BOOL v50 = 0;
      goto LABEL_91;
    }
    long long v47 = (unsigned __int16 *)(a3 + 480);
  }
  else
  {
    uint64_t v46 = v43[23];
    if (v43[23]
      && (!v42[v46]
       && (*(double *)(a3 + 360) == INFINITY || *(double *)(a3 + 368) == INFINITY || *(double *)(a3 + 376) == INFINITY)
       || v42[v46] == 22
       && (!v43[5] || (v42[v45 + 3] & 2) == 0 || *(unsigned char *)(a3 + 482))
       && (*(double *)(a3 + 384) == INFINITY || *(double *)(a3 + 392) == INFINITY || *(double *)(a3 + 400) == INFINITY)))
    {
      return;
    }
    if (*(__int16 *)(a3 + 480) == -1) {
      goto LABEL_90;
    }
    long long v47 = (unsigned __int16 *)(a3 + 480);
    uint64_t v48 = v43[23];
    if (v48)
    {
      if (v42[v48] != 32) {
        goto LABEL_90;
      }
    }
  }
  __int16 v49 = sub_ECBB58((uint64_t)a2);
  BOOL v50 = *v47 >= (unsigned __int16)(sub_ECBBAC((uint64_t)a2) + v49);
LABEL_91:
  if (!v39 || !sub_6561B0(a2)) {
    goto LABEL_101;
  }
  uint64_t v51 = (unsigned __int16 *)((char *)*a2 - **a2);
  if (*v51 < 0xBu || (uint64_t v52 = v51[5]) == 0)
  {
    if (!v50) {
      goto LABEL_101;
    }
LABEL_98:
    if (*(double *)(a3 + 432) == INFINITY || *(double *)(a3 + 440) == INFINITY || *(double *)(a3 + 448) == INFINITY) {
      return;
    }
    goto LABEL_101;
  }
  if ((v50 | (*((unsigned __int8 *)*a2 + v52 + 2) >> 7))) {
    goto LABEL_98;
  }
LABEL_101:
  if (*(unsigned char *)(a3 + 485))
  {
    unsigned __int16 v53 = sub_ECBB58((uint64_t)a2);
    if (v53) {
      pow(1.0 / (double)v53, *(long double *)(a3 + 488));
    }
  }
  if (*(unsigned char *)(a3 + 496))
  {
    unsigned int v54 = sub_2E35CC(a2);
    if (v54 <= 1) {
      unsigned int v55 = 1;
    }
    else {
      unsigned int v55 = v54;
    }
    pow(1.0 / (double)v55, *(long double *)(a3 + 504));
  }
  if (*(unsigned char *)(a3 + 512))
  {
    unsigned int v56 = a2[1];
    unsigned int v57 = (unsigned __int16 *)((char *)v56 - *v56);
    double v58 = 0.0;
    if (*v57 >= 0x13u)
    {
      uint64_t v59 = v57[9];
      if (v59)
      {
        LOWORD(v58) = *(_WORD *)((char *)v56 + v59);
        double v58 = (double)*(unint64_t *)&v58;
      }
    }
    pow(fmax(v58, 1.0), *(long double *)(a3 + 520));
  }
}

uint64_t sub_ECB238@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, int ***a3@<X2>, char a4@<W3>, void *a5@<X8>)
{
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  uint64_t v6 = *(void *)result;
  if (*(void *)result)
  {
    uint64_t v9 = result;
    int v10 = *(unsigned int **)(v6 + 176);
    unsigned int v11 = *(unsigned int **)(v6 + 184);
    uint64_t v12 = (char *)v11 - (char *)v10;
    if ((char *)v11 - (char *)v10 >= 24)
    {
      uint64_t v13 = (a2 >> 16) & 0xFFFF0000 | (a2 << 32);
      uint64_t v14 = a2 & 0xFF000000000000;
      if (v12 != 24)
      {
        unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (v12 >> 3);
        do
        {
          uint64_t v16 = 6 * (v15 >> 2);
          _X17 = &v10[v16];
          __asm { PRFM            #0, [X17] }
          double v23 = &v10[6 * (v15 >> 1)];
          _X16 = &v23[v16];
          __asm { PRFM            #0, [X16] }
          unint64_t result = *((unsigned __int16 *)v23 + 2);
          if ((((unint64_t)*v23 << 32) | (result << 16) | (*((unsigned char *)v23 + 6) == 0)) >= (v13 | (unint64_t)(v14 == 0))) {
            unint64_t v26 = 0;
          }
          else {
            unint64_t v26 = v15 >> 1;
          }
          v10 += 6 * v26;
          v15 -= v15 >> 1;
        }
        while ((uint64_t)v15 > 1);
      }
      v10 += 6
           * ((((unint64_t)*v10 << 32) | ((unint64_t)*((unsigned __int16 *)v10 + 2) << 16) | (*((unsigned char *)v10 + 6) == 0)) < (v13 | (unint64_t)(v14 == 0)));
    }
    if (v10 != v11)
    {
      int v27 = 1 << a4;
      int v28 = WORD2(a2);
      uint64_t v29 = (uint64_t *)(v10 + 4);
      uint64_t v30 = HIWORD(a2) & 1;
      do
      {
        BOOL v31 = v29 - 2;
        if (*((_DWORD *)v29 - 4) != a2
          || *((unsigned __int16 *)v29 - 6) != v28
          || ((v30 ^ (*((unsigned char *)v29 - 10) == 0)) & 1) == 0)
        {
          break;
        }
        if ((*(_DWORD *)(v29 - 1) & v27) - 1 <= 0xFFFFFFFD)
        {
          unint64_t result = sub_ECB55C(a3, *(void *)(*(void *)v9 + 152) + 424 * *v29);
          if (result)
          {
            unint64_t result = sub_3588EC(*(void *)(*(void *)v9 + 152) + 424 * *v29);
            if ((result & 1) == 0)
            {
              BOOL v32 = (uint64_t (**)())(*(void *)v9 + 152);
              unint64_t result = (uint64_t)sub_29AC28((uint64_t)a5, &v32, v29);
            }
          }
        }
        v29 += 3;
      }
      while (v31 + 3 != *(uint64_t **)(v6 + 184));
    }
    if (*(unsigned char *)(v9 + 32))
    {
      BOOL v32 = off_243EF60;
      long long v33 = *(_OWORD *)a3;
      uint64_t v34 = &v32;
      sub_29BE60((uint64_t *)v9, a2, a5, (uint64_t)&v32);
      unint64_t result = (uint64_t)v34;
      if (v34 == &v32)
      {
        return ((uint64_t (*)(uint64_t (***)()))v32[4])(&v32);
      }
      else if (v34)
      {
        return (*v34)[5]();
      }
    }
  }
  return result;
}

void sub_ECB528(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3EA7D8((uint64_t *)va);
  uint64_t v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

BOOL sub_ECB55C(int ***a1, uint64_t a2)
{
  uint64_t v4 = **a1;
  uint64_t v5 = *v4;
  uint64_t v6 = (unsigned __int16 *)((char *)v4 - v5);
  unsigned int v7 = *(unsigned __int16 *)((char *)v4 - v5);
  if (!*((unsigned char *)*a1 + 38))
  {
    if (v7 < 0xB || !v6[5])
    {
      unsigned int v9 = *v6;
      if (v9 <= 0xA) {
        goto LABEL_36;
      }
      goto LABEL_27;
    }
    if (*(int *)((char *)v4 + v6[5])) {
      goto LABEL_5;
    }
LABEL_13:
    uint64_t v6 = (unsigned __int16 *)((char *)v4 - v5);
    unsigned int v9 = *(unsigned __int16 *)((char *)v4 - v5);
    BOOL v10 = v9 >= 0xB;
    if (!*((unsigned char *)*a1 + 38)) {
      goto LABEL_25;
    }
    goto LABEL_14;
  }
  if (v7 < 0xB || !v6[5])
  {
    unsigned int v9 = *v6;
    if (v9 <= 0xA) {
      goto LABEL_36;
    }
    goto LABEL_16;
  }
  if ((*(int *)((char *)v4 + v6[5]) & 2) == 0) {
    goto LABEL_13;
  }
LABEL_5:
  if (sub_35870C(a2)) {
    return 1;
  }
  uint64_t v4 = **a1;
  uint64_t v6 = (unsigned __int16 *)((char *)v4 - *v4);
  unsigned int v9 = *v6;
  BOOL v10 = v9 >= 0xB;
  if (*((unsigned char *)*a1 + 38))
  {
LABEL_14:
    if (!v10) {
      goto LABEL_36;
    }
LABEL_16:
    if (v6[5] && (*((unsigned char *)v4 + v6[5]) & 2) != 0) {
      goto LABEL_36;
    }
    if (v9 <= 0x38) {
      goto LABEL_36;
    }
    uint64_t v11 = v6[28];
    if (!v11) {
      goto LABEL_36;
    }
    int v12 = *(int *)((char *)v4 + v11);
    if ((v12 & 2) == 0) {
      goto LABEL_32;
    }
LABEL_34:
    if (sub_35873C(a2)) {
      return 1;
    }
    goto LABEL_36;
  }
LABEL_25:
  if (!v10) {
    goto LABEL_36;
  }
LABEL_27:
  if (v6[5] && (*((unsigned char *)v4 + v6[5]) & 1) != 0) {
    goto LABEL_36;
  }
  if (v9 <= 0x38) {
    goto LABEL_36;
  }
  uint64_t v13 = v6[28];
  if (!v13) {
    goto LABEL_36;
  }
  int v12 = *(int *)((char *)v4 + v13);
  if (v12) {
    goto LABEL_34;
  }
LABEL_32:
  if ((v12 & 7) == 4 || (v12 & 0x23) == 0x20) {
    goto LABEL_34;
  }
LABEL_36:
  int v14 = sub_358690(a2, 0);
  BOOL result = 0;
  if (v14)
  {
    if (*(_DWORD *)(a2 + 88) == 14) {
      return *(unsigned char *)a1[1] != 0;
    }
  }
  return result;
}

void sub_ECB718()
{
}

__n128 sub_ECB72C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_243EF60;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_ECB778(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_243EF60;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_ECB7A8(uint64_t a1, uint64_t a2)
{
  return sub_ECB55C((int ***)(a1 + 8), a2);
}

uint64_t sub_ECB7B0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK3msl7routing16DrivingEvaluator10is_blockedERKNS_4data19DirectedRoadSegmentERKNS0_19DrivingCostFu"
                     "nctionEEUlRKNS2_8IncidentEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK3msl7routing16DrivingEvaluator10is_blockedERKNS_4data19DirectedRoadSegmentERKNS0_19Dr"
                                "ivingCostFunctionEEUlRKNS2_8IncidentEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK3msl7routing16DrivingEvaluator10is_blockedERKNS_4data19DirectedRoadSegmentERKNS0_19DrivingCostFunctionEEUlRKNS2_8IncidentEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK3msl7routing16DrivingEvaluator10is_blockedERKNS_4data19DirectedRoadSegmentERKNS0_19DrivingCostFunctionEEUlRKNS2_8IncidentEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_ECB820()
{
}

uint64_t sub_ECB82C(void *a1, unint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    uint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    unsigned int v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      BOOL v10 = &v15;
    }
    else {
      BOOL v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    int v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    int v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 24 * a2;
}

void sub_ECB97C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

BOOL sub_ECBA5C(uint64_t a1, uint64_t a2, int a3, int a4)
{
  if (a4 != 2) {
    return 0;
  }
  BOOL result = 0;
  if (a3 != 0x7FFFFFFF && *(unsigned char *)(a2 + 176))
  {
    int v6 = *(_DWORD *)(a1 + 48);
    if (v6 == 0x7FFFFFFF) {
      return 0;
    }
    int v7 = *(_DWORD *)(a2 + 172);
    char v8 = v7 < 0 ? -5 : 5;
    if ((int)(v7 / -10
             + v6
             + (((-103 * (char)(v8 + v7 % 10)) >> 15) & 1)
             + ((-103 * (char)(v8 + v7 % 10)) >> 10)) > a3)
      return 0;
    int v9 = *(_DWORD *)(a2 + 168);
    if (v9 < 0) {
      char v10 = -5;
    }
    else {
      char v10 = 5;
    }
    return (int)(v9 / 10
               + v6
               + (((103 * (char)(v10 + v9 % 10)) >> 15) & 1)
               + ((103 * (char)(v10 + v9 % 10)) >> 10)) >= a3;
  }
  return result;
}

uint64_t sub_ECBB58(uint64_t a1)
{
  uint64_t v1 = 24;
  if (!*(unsigned char *)(a1 + 38)) {
    uint64_t v1 = 16;
  }
  uint64_t v2 = *(int **)(a1 + v1);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = (unsigned __int16 *)((char *)v2 - *v2);
  if (*v3 < 7u) {
    return 0;
  }
  uint64_t v4 = v3[3];
  if (!v4) {
    return 0;
  }
  uint64_t result = *(unsigned __int16 *)((char *)v2 + v4);
  if ((_WORD)result == 0xFFFF) {
    return 0;
  }
  return result;
}

uint64_t sub_ECBBAC(uint64_t a1)
{
  uint64_t v1 = 16;
  if (!*(unsigned char *)(a1 + 38)) {
    uint64_t v1 = 24;
  }
  uint64_t v2 = *(int **)(a1 + v1);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = (unsigned __int16 *)((char *)v2 - *v2);
  if (*v3 < 7u) {
    return 0;
  }
  uint64_t v4 = v3[3];
  if (!v4) {
    return 0;
  }
  uint64_t result = *(unsigned __int16 *)((char *)v2 + v4);
  if ((_WORD)result == 0xFFFF) {
    return 0;
  }
  return result;
}

void sub_ECBC00(uint64_t a1, int **a2, uint64_t a3, unsigned int *a4, int a5)
{
  if (!*(unsigned char *)(a3 + 232) || !sub_488C(a4))
  {
    signed int v13 = sub_4F44(a4);
    sub_ECA6AC(a1, a2, a3, v13, a5);
    return;
  }
  char v10 = *a2;
  uint64_t v11 = (unsigned __int16 *)((char *)*a2 - **a2);
  unsigned int v12 = *v11;
  if (*((unsigned char *)a2 + 38))
  {
    if (v12 < 0xB || !v11[5] || (*(int *)((char *)v10 + v11[5]) & 0xA) == 0) {
      return;
    }
  }
  else if (v12 < 0xB || !v11[5] || (*(int *)((char *)v10 + v11[5]) & 9) == 0)
  {
    return;
  }
  if (!*(unsigned char *)(a3 + 152)
    || v12 < 0x2F
    || (uint64_t v14 = v11[23]) == 0
    || ((unsigned int v15 = *((unsigned __int8 *)v10 + v14), v16 = v15 > 0x2D, v17 = (1 << v15) & 0x208040000000, !v16)
      ? (BOOL v18 = v17 == 0)
      : (BOOL v18 = 1),
        v18))
  {
    double v19 = sub_45A4DC(*(void *)a1, (uint64_t)a2);
    BOOL v20 = *(uint64_t *)&v19 <= -1 || ((*(void *)&v19 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF;
    BOOL v21 = v20 && (unint64_t)(*(void *)&v19 - 1) >= 0xFFFFFFFFFFFFFLL;
    BOOL v22 = !v21 || (*(void *)&v19 & 0x7FFFFFFFFFFFFFFFLL) == 0;
    if (v22 && v19 > 0.0)
    {
      if (a5)
      {
        if (*(unsigned char *)(a3 + 233))
        {
          uint64_t v23 = *(void *)(a1 + 8);
          uint64_t v24 = (uint64_t)a2[4];
          int v25 = sub_506C((uint64_t)a4);
          unsigned __int16 v26 = sub_51B4((uint64_t)a4);
          unsigned int v57 = 0;
          uint64_t v58 = 0;
          int v27 = (int *)sub_3AF660(v23, v24);
          if (v27)
          {
            int v28 = (_DWORD *)sub_3AF78C(v23, v27, 0, &v57);
            if (v28)
            {
              if (*v28 > 1u)
              {
                uint64_t v29 = (unsigned __int16 *)(v28 + 1);
                unint64_t v30 = *v28;
                do
                {
                  BOOL v31 = (unsigned __int16 *)((char *)v29 + ((2 * v30) & 0x3FFFFFFFCLL));
                  unsigned int v33 = *v31;
                  BOOL v32 = v31 + 2;
                  unint64_t v34 = v30 >> 1;
                  v30 += ~(v30 >> 1);
                  if ((unsigned __int16)(1440 * (v25 + 6 - 7 * ((9363 * (v25 + 6)) >> 16)))
                     + v26 < v33)
                    unint64_t v30 = v34;
                  else {
                    uint64_t v29 = v32;
                  }
                }
                while (v30);
              }
            }
          }
        }
      }
      signed int v35 = sub_4F44(a4);
      if (a5 == 2 && v35 != 0x7FFFFFFF)
      {
        if (*(unsigned char *)(a3 + 176))
        {
          int v36 = *(_DWORD *)(a1 + 48);
          if (v36 != 0x7FFFFFFF)
          {
            int v37 = *(_DWORD *)(a3 + 172);
            char v38 = v37 < 0 ? -5 : 5;
            if ((int)(v37 / -10
                     + v36
                     + (((-103 * (char)(v38 + v37 % 10)) >> 15) & 1)
                     + ((-103 * (char)(v38 + v37 % 10)) >> 10)) <= v35)
            {
              int v39 = *(_DWORD *)(a3 + 168);
              char v40 = v39 < 0 ? -5 : 5;
              if ((int)(v39 / 10
                       + v36
                       + (((103 * (char)(v40 + v39 % 10)) >> 15) & 1)
                       + ((103 * (char)(v40 + v39 % 10)) >> 10)) >= v35)
              {
                uint64_t v41 = *(void *)(a1 + 16);
                unint64_t v42 = sub_3A5DDC(*(void *)(a1 + 24), (uint64_t)a2[4]);
                unsigned int v57 = 0;
                uint64_t v58 = 0;
                double v43 = sub_299F0C(v41, v42, (uint64_t)&v57, 0);
                BOOL v44 = *(uint64_t *)&v43 <= -1
                   || ((*(void *)&v43 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF;
                BOOL v45 = v44 && (unint64_t)(*(void *)&v43 - 1) >= 0xFFFFFFFFFFFFFLL;
                if ((!v45 || (*(void *)&v43 & 0x7FFFFFFFFFFFFFFFLL) == 0) && v43 > 0.0)
                {
                  int v47 = sub_4F44(a4) - *(_DWORD *)(a1 + 48);
                  int v48 = *(_DWORD *)(a3 + 236);
                  if (10 * v47 >= v48)
                  {
                    int v49 = *(_DWORD *)(a3 + 168);
                    if (10 * v47 < v49)
                    {
                      if (v48 < 0) {
                        char v50 = -5;
                      }
                      else {
                        char v50 = 5;
                      }
                      double v51 = (double)(int)(v48 / 10
                                        + (((103 * (char)(v50 + v48 % 10)) >> 15) & 1)
                                        + ((103 * (char)(v50 + v48 % 10)) >> 10));
                      int v52 = v49 / 10;
                      int v53 = v49 % 10;
                      if (v49 < 0) {
                        char v54 = -5;
                      }
                      else {
                        char v54 = 5;
                      }
                      double v55 = (double)v47 - v51;
                      double v56 = (double)(int)(v52
                                        + (((103 * (char)(v54 + v53)) >> 15) & 1)
                                        + ((103 * (char)(v54 + v53)) >> 10))
                          - v51;
                      exp((v55 + v56 * -0.5) * (2.0 / v56 * -4.59511985));
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

unint64_t sub_ECC250(uint64_t a1, int **a2, uint64_t a3, signed int a4, int a5)
{
  if (a5 == 2 && *(unsigned char *)(a3 + 177))
  {
    if (!*(unsigned char *)(a3 + 178)
      || a4 != 0x7FFFFFFF
      && (int v9 = *(_DWORD *)(a1 + 48), v9 != 0x7FFFFFFF)
      && ((int v10 = *(_DWORD *)(a3 + 172), v10 < 0) ? (v11 = -5) : (v11 = 5),
          (int)(v10 / -10
              + v9
              + (((-103 * (char)(v11 + v10 % 10)) >> 15) & 1)
              + ((-103 * (char)(v11 + v10 % 10)) >> 10)) <= a4
       && ((int v12 = *(_DWORD *)(a3 + 168), v12 < 0) ? (v13 = -5) : (v13 = 5),
           (int)(v12 / 10
               + v9
               + (((103 * (char)(v13 + v12 % 10)) >> 15) & 1)
               + ((103 * (char)(v13 + v12 % 10)) >> 10)) >= a4)))
    {
      if (sub_ECDBB8(a1, (unint64_t)a2[4], (unint64_t)a2[9]))
      {
        uint64_t v14 = 0x7FFFFFFFLL;
        unsigned int v15 = -1;
        return v15 | (unint64_t)(v14 << 32);
      }
    }
  }
  if (((_BYTE)a2[11] & 0x10) != 0 && !*((_WORD *)a2 + 40))
  {
    unsigned int v16 = *(_DWORD *)(a3 + 664);
    unsigned int v17 = *(_DWORD *)(a3 + 668);
  }
  else
  {
    unsigned int v16 = 0;
    unsigned int v17 = 0;
  }
  if ((*((unsigned char *)a2 + 38) != 0) != (*((unsigned char *)a2 + 78) != 0)
    && *((_DWORD *)a2 + 8) == *((_DWORD *)a2 + 18)
    && *((unsigned __int16 *)a2 + 18) == *((unsigned __int16 *)a2 + 38))
  {
    BOOL v18 = (unsigned __int16 *)((char *)*a2 - **a2);
    unsigned int v19 = *v18;
    if (*((unsigned char *)a2 + 38))
    {
      if (v19 < 0xB) {
        goto LABEL_32;
      }
      unsigned int v20 = v18[5];
      if (!v18[5]) {
        goto LABEL_32;
      }
      int v21 = 10;
    }
    else
    {
      if (v19 < 0xB) {
        goto LABEL_32;
      }
      unsigned int v20 = v18[5];
      if (!v18[5]) {
        goto LABEL_32;
      }
      int v21 = 9;
    }
    if ((*(int *)((char *)*a2 + v20) & v21) != 0)
    {
      unsigned int v15 = *(_DWORD *)(a3 + 1072);
      uint64_t v14 = *(unsigned int *)(a3 + 1076);
      return v15 | (unint64_t)(v14 << 32);
    }
  }
LABEL_32:
  BOOL v22 = a2 + 5;
  uint64_t v23 = (unsigned __int16 *)((char *)*a2 - **a2);
  if (*v23 >= 0xDu && (uint64_t v24 = v23[6]) != 0) {
    int v25 = *(unsigned __int16 *)((char *)*a2 + v24);
  }
  else {
    int v25 = 0;
  }
  unsigned __int16 v26 = *v22;
  uint64_t v27 = **v22;
  uint64_t v28 = -v27;
  uint64_t v29 = (unsigned __int16 *)((char *)*v22 - v27);
  if (*v29 < 0xDu)
  {
    if (!v25) {
      goto LABEL_40;
    }
LABEL_43:
    unsigned int v33 = sub_3D2C3C(*(void *)(a1 + 40), a2, (char **)a2 + 5);
    uint64_t v34 = sub_ECDD38((void *)(a3 + 704), v33);
    int v35 = *(_DWORD *)(v34 + 4);
    uint64_t v14 = 0x7FFFFFFFLL;
    if (*(_DWORD *)v34 == -1 || v35 == 0x7FFFFFFF || *(void *)(v34 + 8) == 0x7FFFFFFFFFFFFFFFLL)
    {
      unsigned int v15 = -1;
      return v15 | (unint64_t)(v14 << 32);
    }
    v16 += *(_DWORD *)v34;
    v17 += v35;
    unsigned __int16 v26 = *v22;
    BOOL v31 = (unsigned __int16 *)((char *)*v22 - **v22);
    unsigned int v32 = *v31;
    if (v32 < 0x2F) {
      goto LABEL_59;
    }
    goto LABEL_53;
  }
  uint64_t v30 = v29[6];
  if (v30) {
    LODWORD(v30) = *(unsigned __int16 *)&v26[v30];
  }
  if (v30 != v25) {
    goto LABEL_43;
  }
LABEL_40:
  BOOL v31 = (unsigned __int16 *)&v26[v28];
  unsigned int v32 = *v31;
  if (v32 < 0x2F) {
    goto LABEL_59;
  }
LABEL_53:
  if (v31[23])
  {
    unsigned int v38 = v26[v31[23]];
    char v39 = v38 > 0x2D;
    unint64_t v40 = (0x208040000000uLL >> v38) & 1;
    if (v39) {
      int v41 = 0;
    }
    else {
      int v41 = v40;
    }
    unint64_t v42 = *a2;
    double v43 = (unsigned __int16 *)((char *)*a2 - **a2);
    unsigned int v44 = *v43;
    if (v44 < 0x2F) {
      goto LABEL_72;
    }
LABEL_60:
    if (v43[23])
    {
      unsigned int v45 = *((unsigned __int8 *)v42 + v43[23]);
      char v39 = v45 > 0x2D;
      uint64_t v46 = (1 << v45) & 0x208040000000;
      BOOL v47 = v39 || v46 == 0;
      if (!v47 && v32 >= 0x2F && v31[23])
      {
        unsigned int v48 = v26[v31[23]];
        char v39 = v48 > 0x2D;
        uint64_t v49 = (1 << v48) & 0x208040000000;
        if (!v39 && v49 != 0) {
          goto LABEL_116;
        }
      }
    }
    goto LABEL_72;
  }
LABEL_59:
  int v41 = 0;
  unint64_t v42 = *a2;
  double v43 = (unsigned __int16 *)((char *)*a2 - **a2);
  unsigned int v44 = *v43;
  if (v44 >= 0x2F) {
    goto LABEL_60;
  }
LABEL_72:
  if (((_BYTE)a2[11] & 8) == 0)
  {
    if (*(unsigned char *)(a3 + 625)) {
      goto LABEL_519;
    }
    if (v44 >= 0x2F)
    {
      uint64_t v64 = v43[23];
      if (v64)
      {
        unsigned int v65 = *((unsigned __int8 *)v42 + v64);
        char v39 = v65 > 0x36;
        uint64_t v66 = (1 << v65) & 0x44000000000008;
        if (!v39 && v66 != 0) {
          goto LABEL_519;
        }
      }
    }
    if (v32 >= 0x2F
      && (uint64_t v68 = v31[23]) != 0
      && ((v69 = v26[v68], char v39 = v69 > 0x36, v70 = (1 << v69) & 0x44000000000008, !v39)
        ? (BOOL v71 = v70 == 0)
        : (BOOL v71 = 1),
          !v71)
      || (*((_WORD *)a2 + 42) & 0x4000) == 0)
    {
LABEL_519:
      if (*(unsigned char *)(a3 + 626))
      {
        unsigned int v51 = *((unsigned __int16 *)a2 + 43);
        if (*((_WORD *)a2 + 43))
        {
          if (*((unsigned char *)a2 + 38)) {
            int v52 = a2 + 3;
          }
          else {
            int v52 = a2 + 2;
          }
          int v53 = *v52;
          if (v53)
          {
            char v54 = (unsigned __int16 *)((char *)v53 - *v53);
            if (*v54 < 7u || (uint64_t v55 = v54[3]) == 0 || (LOWORD(v53) = *(_WORD *)((char *)v53 + v55), (_WORD)v53 == 0xFFFF)) {
              LOWORD(v53) = 0;
            }
          }
          if (*((unsigned char *)a2 + 78)) {
            double v56 = a2 + 8;
          }
          else {
            double v56 = a2 + 7;
          }
          unsigned int v57 = *v56;
          if (v57)
          {
            uint64_t v58 = (unsigned __int16 *)((char *)v57 - *v57);
            if (*v58 < 7u || (uint64_t v59 = v58[3]) == 0 || (LOWORD(v57) = *(_WORD *)((char *)v57 + v59), (_WORD)v57 == 0xFFFF)) {
              LOWORD(v57) = 0;
            }
          }
          LODWORD(v53) = (unsigned __int16)v53;
          if ((unsigned __int16)v53 >= (unsigned __int16)v57) {
            LODWORD(v53) = (unsigned __int16)v57;
          }
          if (v53 <= 1) {
            LODWORD(v53) = 1;
          }
          double v237 = (double)v51 / (double)v53;
          unint64_t v238 = sub_ECDF48(&v237, (double **)(a3 + 632));
          long long v239 = v60;
          unsigned int v61 = (__clz(v51) - 16) ^ 0xF;
          int v62 = 1 << -(char)__clz(v51 - 1);
          if (v51 < 2) {
            LOWORD(v62) = 1;
          }
          unint64_t v63 = sub_ECE090(&v238, *(double *)(a3 + 656)* ((double)(unsigned __int16)v61 + 1.0 - (double)(int)((unsigned __int16)v62 - v51) / (double)(1 << v61)), *(double *)(a3 + 656));
          v16 += v63;
          v17 += HIDWORD(v63);
        }
      }
      else
      {
        unsigned int v72 = sub_ECE1BC(a1, a2);
        unsigned int v73 = (_DWORD *)sub_ECDD38((void *)(a3 + 600), v72);
        v16 += *v73;
        v17 += v73[1];
      }
    }
  }
LABEL_116:
  unsigned int v74 = *a2;
  unsigned int v75 = (unsigned __int16 *)((char *)*a2 - **a2);
  unsigned int v76 = *v75;
  if (*((unsigned char *)a2 + 38))
  {
    if (v76 < 0xB
      || !v75[5]
      || (*((unsigned char *)v74 + v75[5]) & 2) == 0
      || v76 <= 0x4E
      || !v75[39]
      || (*(_WORD *)((unsigned char *)v74 + v75[39]) & 8) == 0)
    {
      goto LABEL_131;
    }
LABEL_130:
    v16 += *(_DWORD *)(a3 + 768);
    v17 += *(_DWORD *)(a3 + 772);
    goto LABEL_131;
  }
  if (v76 >= 0xB
    && v75[5]
    && (*((unsigned char *)v74 + v75[5]) & 1) != 0
    && v76 > 0x4E
    && v75[39]
    && (*(_WORD *)((unsigned char *)v74 + v75[39]) & 0x80) != 0)
  {
    goto LABEL_130;
  }
LABEL_131:
  long long v77 = a2[5];
  long long v78 = (unsigned __int16 *)((char *)v77 - *v77);
  unsigned int v79 = *v78;
  if (*((unsigned char *)a2 + 78))
  {
    if (v79 < 0xB
      || !v78[5]
      || (*((unsigned char *)v77 + v78[5]) & 2) == 0
      || v79 <= 0x4E
      || !v78[39]
      || (*(_WORD *)((unsigned char *)v77 + v78[39]) & 0x20) == 0)
    {
      goto LABEL_146;
    }
LABEL_145:
    v16 += *(_DWORD *)(a3 + 768);
    v17 += *(_DWORD *)(a3 + 772);
    goto LABEL_146;
  }
  if (v79 >= 0xB
    && v78[5]
    && (*((unsigned char *)v77 + v78[5]) & 1) != 0
    && v79 > 0x4E
    && v78[39]
    && (*(_WORD *)((unsigned char *)v77 + v78[39]) & 2) != 0)
  {
    goto LABEL_145;
  }
LABEL_146:
  if (*((unsigned char *)a2 + 38))
  {
    if (v76 < 0xB
      || !v75[5]
      || (*((unsigned char *)v74 + v75[5]) & 2) == 0
      || v76 <= 0x4E
      || !v75[39]
      || (*(_WORD *)((unsigned char *)v74 + v75[39]) & 4) == 0)
    {
      goto LABEL_164;
    }
  }
  else if (v76 < 0xB {
         || !v75[5]
  }
         || (*((unsigned char *)v74 + v75[5]) & 1) == 0
         || v76 <= 0x4E
         || !v75[39]
         || (*(_WORD *)((unsigned char *)v74 + v75[39]) & 0x40) == 0)
  {
    goto LABEL_164;
  }
  int v80 = *(_DWORD *)(a3 + 784);
  uint64_t v14 = 0x7FFFFFFFLL;
  unsigned int v15 = -1;
  if (v80 == -1) {
    return v15 | (unint64_t)(v14 << 32);
  }
  int v81 = *(_DWORD *)(a3 + 788);
  if (v81 == 0x7FFFFFFF || *(void *)(a3 + 792) == 0x7FFFFFFFFFFFFFFFLL) {
    return v15 | (unint64_t)(v14 << 32);
  }
  v16 += v80;
  v17 += v81;
LABEL_164:
  if (*((unsigned char *)a2 + 78))
  {
    if (v79 < 0xB
      || !v78[5]
      || (*((unsigned char *)v77 + v78[5]) & 2) == 0
      || v79 <= 0x4E
      || !v78[39]
      || (*(_WORD *)((unsigned char *)v77 + v78[39]) & 0x10) == 0)
    {
      goto LABEL_182;
    }
  }
  else if (v79 < 0xB {
         || !v78[5]
  }
         || (*((unsigned char *)v77 + v78[5]) & 1) == 0
         || v79 <= 0x4E
         || !v78[39]
         || (*(_WORD *)((unsigned char *)v77 + v78[39]) & 1) == 0)
  {
LABEL_182:
    if (((_BYTE)a2[11] & 4) != 0
      || v76 >= 0x2F
      && v75[23]
      && (unsigned int v84 = *((unsigned __int8 *)v74 + v75[23]), v84 <= 0x36)
      && ((1 << v84) & 0x44000000000008) != 0
      && v79 >= 0x2F
      && (uint64_t v85 = v78[23]) != 0
      && (unsigned int v86 = *((unsigned __int8 *)v77 + v85), v86 <= 0x36)
      && ((1 << v86) & 0x44000000000008) != 0)
    {
LABEL_223:
      uint64_t v105 = *a2;
      uint64_t v106 = **a2;
      unsigned int v107 = (unsigned __int16 *)((char *)*a2 - v106);
      unsigned int v108 = *v107;
      if (v108 >= 0x1B && v107[13])
      {
        int v109 = *((unsigned __int8 *)v105 + v107[13]);
        unsigned int v110 = *v22;
        long long v111 = (unsigned __int16 *)((char *)*v22 - **v22);
        unsigned int v112 = *v111;
        if (v112 < 0x1B) {
          goto LABEL_226;
        }
      }
      else
      {
        int v109 = 0;
        unsigned int v110 = *v22;
        long long v111 = (unsigned __int16 *)((char *)*v22 - **v22);
        unsigned int v112 = *v111;
        if (v112 < 0x1B)
        {
LABEL_226:
          if (!v109) {
            goto LABEL_233;
          }
          goto LABEL_232;
        }
      }
      uint64_t v113 = v111[13];
      if (v111[13]) {
        LODWORD(v113) = v110[v113];
      }
      if (v109 == v113)
      {
LABEL_233:
        if (*((unsigned char *)a2 + 38))
        {
          if (v108 >= 0x4D)
          {
            if (!v107[38]) {
              goto LABEL_250;
            }
            uint64_t v114 = v107[38];
            if ((*(int *)((char *)v105 + v114) & 8) == 0) {
              goto LABEL_238;
            }
            goto LABEL_237;
          }
          if (v108 > 0xA) {
            goto LABEL_250;
          }
        }
        else
        {
          if (v108 >= 0x4D)
          {
            if (!v107[38]) {
              goto LABEL_255;
            }
            uint64_t v114 = v107[38];
            if ((*(int *)((char *)v105 + v114) & 4) == 0)
            {
LABEL_238:
              if (*((unsigned char *)a2 + 38)) {
                int v115 = 2;
              }
              else {
                int v115 = 1;
              }
              if ((*(int *)((char *)v105 + v114) & v115) != 0)
              {
                v16 += *(_DWORD *)(a3 + 976);
                v17 += *(_DWORD *)(a3 + 980);
              }
              if (!*((unsigned char *)a2 + 38))
              {
LABEL_255:
                if (v107[5])
                {
                  unsigned int v116 = *(int *)((char *)v105 + v107[5]);
                  if ((v116 & 1) != 0 || (v116 & 2) != 0) {
                    goto LABEL_258;
                  }
LABEL_275:
                  if ((v116 & 0x40000) != 0)
                  {
                    int v118 = 1;
                    LOBYTE(v117) = 1;
                    uint64_t v119 = -v106;
                    unsigned __int8 v236 = 1;
                    if (!*((unsigned char *)a2 + 78)) {
                      goto LABEL_266;
                    }
                    goto LABEL_280;
                  }
                  if ((v116 & 0xA0000) != 0)
                  {
                    int v117 = (v116 >> 25) & 1;
                    int v118 = 1;
                    uint64_t v119 = -v106;
                    unsigned __int8 v236 = v117;
                    if (!*((unsigned char *)a2 + 78)) {
                      goto LABEL_266;
                    }
                    goto LABEL_280;
                  }
                  goto LABEL_279;
                }
                goto LABEL_279;
              }
LABEL_250:
              if (v107[5])
              {
                unsigned int v116 = *(int *)((char *)v105 + v107[5]);
                if (v116 & 2) != 0 || (v116)
                {
LABEL_258:
                  if ((v116 & 0x40000) != 0)
                  {
                    LOBYTE(v117) = 3;
                    int v118 = 1;
                    uint64_t v119 = -v106;
                    unsigned __int8 v236 = 3;
                    if (!*((unsigned char *)a2 + 78)) {
                      goto LABEL_266;
                    }
                  }
                  else if ((v116 & 0xA0000) != 0)
                  {
                    if ((v116 & 0x2000000) != 0) {
                      LOBYTE(v117) = 3;
                    }
                    else {
                      LOBYTE(v117) = 4;
                    }
                    int v118 = 1;
                    uint64_t v119 = -v106;
                    unsigned __int8 v236 = v117;
                    if (!*((unsigned char *)a2 + 78))
                    {
LABEL_266:
                      if (v112 >= 0xB)
                      {
                        uint64_t v120 = v111[5];
                        if (v120)
                        {
                          unsigned int v121 = *(_DWORD *)&v110[v120];
                          if ((v121 & 1) == 0 && (v121 & 2) == 0)
                          {
LABEL_292:
                            if ((v121 & 0x40000) == 0)
                            {
                              if ((v121 & 0xA0000) != 0)
                              {
                                int v123 = (v121 >> 25) & 1;
                                goto LABEL_296;
                              }
                              goto LABEL_295;
                            }
                            LOBYTE(v123) = 1;
LABEL_296:
                            unsigned __int8 v235 = v123;
                            if (v117 != v123)
                            {
                              if (v118 && (uint64_t v124 = v107[5]) != 0)
                              {
                                if ((*(int *)((char *)v105 + v124) & 0x2000000) != 0) {
                                  long long v125 = (void *)(a3 + 1280);
                                }
                                else {
                                  long long v125 = (void *)(a3 + 1256);
                                }
                              }
                              else
                              {
                                long long v125 = (void *)(a3 + 1256);
                              }
                              unsigned int v126 = sub_F71F98(v125, &v236, &v235, (_BYTE)a2[11] & 1, (*((unsigned __int8 *)a2 + 88) >> 1) & 1);
                              uint64_t v127 = sub_ECDD38((void *)(a3 + 680), v126);
                              int32x2_t v128 = (int32x2_t)0x7FFFFFFFFFFFFFFFLL;
                              if (*(_DWORD *)v127 == -1) {
                                goto LABEL_496;
                              }
                              int v129 = *(_DWORD *)(v127 + 4);
                              if (v129 == 0x7FFFFFFF || *(void *)(v127 + 8) == 0x7FFFFFFFFFFFFFFFLL) {
                                goto LABEL_496;
                              }
                              v16 += *(_DWORD *)v127;
                              v17 += v129;
                              uint64_t v105 = *a2;
                              uint64_t v119 = -(uint64_t)**a2;
                            }
                            long long v130 = (unsigned __int16 *)((char *)v105 + v119);
                            unsigned int v131 = *v130;
                            if (v131 >= 0xB && v130[5] && (*((unsigned char *)v105 + v130[5]) & 8) != 0)
                            {
                              long long v132 = *v22;
                              unsigned int v137 = (unsigned __int16 *)((char *)*v22 - **v22);
                              unsigned int v138 = *v137;
                              int32x2_t v128 = (int32x2_t)__PAIR64__(v17, v16);
                              if (v138 < 0x2F) {
                                goto LABEL_322;
                              }
                            }
                            else
                            {
                              long long v132 = *v22;
                              uint64_t v133 = **v22;
                              uint64_t v134 = -v133;
                              long long v135 = (unsigned __int16 *)((char *)*v22 - v133);
                              if (*v135 >= 0xBu)
                              {
                                uint64_t v136 = v135[5];
                                if (v136)
                                {
                                  if ((v132[v136] & 8) != 0)
                                  {
                                    v16 += *(_DWORD *)(a3 + 912);
                                    v17 += *(_DWORD *)(a3 + 916);
                                  }
                                }
                              }
                              unsigned int v137 = (unsigned __int16 *)&v132[v134];
                              unsigned int v138 = *v137;
                              int32x2_t v128 = (int32x2_t)__PAIR64__(v17, v16);
                              if (v138 < 0x2F) {
                                goto LABEL_322;
                              }
                            }
                            if (v137[23] && v132[v137[23]] == 21)
                            {
                              if (v131 >= 0x2F)
                              {
                                uint64_t v139 = v130[23];
                                if (v130[23])
                                {
                                  if (*((unsigned char *)v105 + v139) == 21) {
                                    goto LABEL_324;
                                  }
                                }
                              }
                              v128.i32[0] = *(_DWORD *)(a3 + 928) + v16;
                              v128.i32[1] = *(_DWORD *)(a3 + 932) + v17;
                            }
LABEL_322:
                            if (v131 < 0x2F)
                            {
                              int v141 = 0;
                              goto LABEL_327;
                            }
                            LODWORD(v139) = v130[23];
                            if (!v130[23])
                            {
                              int v141 = 1;
                              if (v138 < 0x2F) {
                                goto LABEL_332;
                              }
                              goto LABEL_328;
                            }
LABEL_324:
                            int v140 = *((unsigned __int8 *)v105 + v139);
                            int v141 = 1;
                            if (!v140) {
                              goto LABEL_333;
                            }
LABEL_327:
                            if (v138 < 0x2F) {
                              goto LABEL_332;
                            }
LABEL_328:
                            if (v137[23] && !v132[v137[23]]) {
                              int32x2_t v128 = vadd_s32(*(int32x2_t *)(a3 + 848), v128);
                            }
LABEL_332:
                            if (v131 < 0xB)
                            {
LABEL_335:
                              if (v138 >= 0xB && v137[5] && (v132[v137[5] + 1] & 1) != 0) {
                                int32x2_t v128 = vadd_s32(*(int32x2_t *)(a3 + 816), v128);
                              }
LABEL_339:
                              uint64_t v142 = a2[6];
                              long long v143 = (unsigned __int16 *)((char *)v142 - *v142);
                              unsigned int v144 = *v143;
                              if (v144 >= 0x11)
                              {
                                if (v143[8])
                                {
                                  if ((*(_WORD *)((unsigned char *)v142 + v143[8]) & 0x10) != 0)
                                  {
                                    BOOL v145 = a2[1];
                                    __n128 v146 = (unsigned __int16 *)((char *)v145 - *v145);
                                    if (*v146 < 0x11u
                                      || (uint64_t v147 = v146[8]) == 0
                                      || (*(_WORD *)((unsigned char *)v145 + v147) & 0x10) == 0)
                                    {
                                      int32x2_t v128 = vadd_s32(*(int32x2_t *)(a3 + 832), v128);
                                    }
                                  }
                                }
                              }
                              if (v131 < 0xB || (uint64_t v148 = v130[5]) == 0 || (*((unsigned char *)v105 + v148 + 1) & 0x10) == 0)
                              {
                                if (v138 >= 0xB && v137[5] && (v132[v137[5] + 1] & 0x10) != 0) {
                                  int32x2_t v128 = vadd_s32(*(int32x2_t *)(a3 + 880), v128);
                                }
                                if (v131 < 0xB) {
                                  goto LABEL_358;
                                }
                                LODWORD(v148) = v130[5];
                                if (!v130[5]) {
                                  goto LABEL_358;
                                }
                              }
                              if ((*((unsigned char *)v105 + v148 + 1) & 0x20) == 0)
                              {
LABEL_358:
                                if (v138 >= 0xB && v137[5] && (v132[v137[5] + 1] & 0x20) != 0) {
                                  int32x2_t v128 = vadd_s32(*(int32x2_t *)(a3 + 896), v128);
                                }
                              }
                              if (v141 && v130[23])
                              {
                                if (v138 < 0x2F || *((unsigned char *)v105 + v130[23]) == 28) {
                                  goto LABEL_369;
                                }
                              }
                              else if (v138 < 0x2F)
                              {
                                goto LABEL_369;
                              }
                              if (v137[23] && v132[v137[23]] == 28) {
                                int32x2_t v128 = vadd_s32(*(int32x2_t *)(a3 + 864), v128);
                              }
LABEL_369:
                              if (v144 >= 0x11)
                              {
                                if (v143[8])
                                {
                                  if ((*(_WORD *)((unsigned char *)v142 + v143[8]) & 0x20) != 0)
                                  {
                                    long long v149 = a2[1];
                                    long long v150 = (unsigned __int16 *)((char *)v149 - *v149);
                                    if (*v150 < 0x11u
                                      || (uint64_t v151 = v150[8]) == 0
                                      || (*(_WORD *)((unsigned char *)v149 + v151) & 0x20) == 0)
                                    {
                                      int32x2_t v128 = vadd_s32(*(int32x2_t *)(a3 + 944), v128);
                                    }
                                  }
                                }
                              }
                              if ((*((_WORD *)a2 + 42) & 0x400) != 0)
                              {
                                unsigned int v152 = a2[1];
                                if (v152
                                  && (unsigned int v153 = (unsigned __int16 *)((char *)v152 - *v152), *v153 >= 0x11u)
                                  && (uint64_t v154 = v153[8]) != 0
                                  && (*(_WORD *)((unsigned char *)v152 + v154) & 4) != 0
                                  || v144 >= 0x11
                                  && (uint64_t v155 = v143[8]) != 0
                                  && (*(_WORD *)((unsigned char *)v142 + v155) & 4) != 0)
                                {
                                  long long v156 = (int32x2_t *)(a3 + 1008);
                                }
                                else
                                {
                                  long long v156 = (int32x2_t *)(a3 + 992);
                                }
                                int32x2_t v128 = vadd_s32(*v156, v128);
                              }
                              if (*(unsigned char *)(a3 + 625)
                                || v141
                                && (uint64_t v157 = v130[23]) != 0
                                && (unsigned int v158 = *((unsigned __int8 *)v105 + v157), v158 <= 0x36)
                                && ((1 << v158) & 0x44000000000008) != 0
                                || v138 >= 0x2F
                                && v137[23]
                                && (unsigned int v159 = v132[v137[23]], v159 <= 0x36)
                                && ((1 << v159) & 0x44000000000008) != 0
                                || (*((_WORD *)a2 + 42) & 0x4000) == 0)
                              {
                                int32x2_t v230 = v128;
                                if (sub_EB46A0(a2))
                                {
                                  int32x2_t v128 = vadd_s32(*(int32x2_t *)(a3 + 1024), v230);
                                }
                                else if (sub_EB4794(a2))
                                {
                                  int32x2_t v128 = vadd_s32(*(int32x2_t *)(a3 + 1040), v230);
                                }
                                else
                                {
                                  int32x2_t v128 = v230;
                                }
                              }
                              if (*(_DWORD *)(a3 + 1088) || *(_DWORD *)(a3 + 1092) || *(void *)(a3 + 1096))
                              {
                                if (a5 != 2) {
                                  goto LABEL_434;
                                }
                              }
                              else
                              {
                                if (*(void *)(a3 + 1104))
                                {
                                  BOOL v160 = 0;
                                  if (a5 != 2) {
                                    goto LABEL_434;
                                  }
                                }
                                else
                                {
                                  BOOL v160 = *(void *)(a3 + 1112) == 0;
                                  if (a5 != 2) {
                                    goto LABEL_434;
                                  }
                                }
                                if (v160) {
                                  goto LABEL_434;
                                }
                              }
                              uint64_t v161 = *(void *)(a1 + 16);
                              unint64_t v162 = (unint64_t)a2[4];
                              int32x2_t v231 = v128;
                              if (*(unsigned char *)(a1 + 52))
                              {
                                sub_ECE7B4(v161, v162, 0, &v238);
                                unsigned int v163 = (char *)v238;
                                if ((char *)v238 != v239)
                                {
LABEL_415:
                                  uint64_t v164 = **(void **)v163 + 424 * *((void *)v163 + 1);
LABEL_418:
                                  long long v239 = v163;
                                  operator delete(v163);
                                  uint64_t v165 = v164;
LABEL_419:
                                  uint64_t v166 = *(void *)(a1 + 16);
                                  unint64_t v167 = (unint64_t)a2[9];
                                  if (*(unsigned char *)(a1 + 52))
                                  {
                                    sub_ECE7B4(v166, v167, 0, &v238);
                                    unsigned int v168 = (char *)v238;
                                    if ((char *)v238 != v239) {
                                      goto LABEL_421;
                                    }
                                  }
                                  else
                                  {
                                    sub_ECE7B4(v166, v167, *(_DWORD *)(v166 + 48), &v238);
                                    unsigned int v168 = (char *)v238;
                                    if ((char *)v238 != v239)
                                    {
LABEL_421:
                                      uint64_t v169 = **(void **)v168 + 424 * *((void *)v168 + 1);
                                      long long v239 = v168;
                                      operator delete(v168);
                                      if (!v165)
                                      {
LABEL_422:
                                        int32x2_t v128 = v231;
                                        if (v169)
                                        {
                                          if (*(unsigned char *)(a1 + 5232)
                                            && (*(_DWORD *)(a3 + 1104)
                                             || *(_DWORD *)(a3 + 1108)
                                             || *(void *)(a3 + 1112)))
                                          {
                                            uint64_t v172 = sub_ECE2D8(a1 + 56);
                                            int v170 = sub_104011C(v172, v169);
                                          }
                                          else
                                          {
                                            int v170 = 0;
                                          }
                                          int32x2_t v128 = vadd_s32(vadd_s32(*(int32x2_t *)(a3 + 1088), v231), (int32x2_t)sub_ECE090((_DWORD *)(a3 + 1104), (double)v170, *(double *)&v128));
                                          if (!*(void *)(a3 + 1120))
                                          {
LABEL_435:
                                            BOOL v171 = *(void *)(a3 + 1128) == 0;
                                            if (a5 != 2)
                                            {
LABEL_448:
                                              v177 = *a2;
                                              unsigned int v178 = (unsigned __int16 *)((char *)*a2 - **a2);
                                              if (*v178 < 0x2Fu) {
                                                goto LABEL_454;
                                              }
                                              goto LABEL_452;
                                            }
LABEL_440:
                                            if (v171) {
                                              goto LABEL_448;
                                            }
                                            int32x2_t v232 = v128;
                                            long long v173 = *(uint64_t **)(a1 + 16);
                                            unint64_t v174 = (unint64_t)a2[4];
                                            if (*(unsigned char *)(a1 + 52))
                                            {
                                              if (sub_29AD58(v173, v174, 0))
                                              {
LABEL_451:
                                                int32x2_t v128 = v232;
                                                v177 = *a2;
                                                unsigned int v178 = (unsigned __int16 *)((char *)*a2 - **a2);
                                                if (*v178 < 0x2Fu) {
                                                  goto LABEL_454;
                                                }
LABEL_452:
                                                uint64_t v179 = v178[23];
                                                if (v179 && *((unsigned char *)v177 + v179) == 17) {
                                                  goto LABEL_496;
                                                }
LABEL_454:
                                                long long v180 = (unsigned __int16 *)((char *)*v22 - **v22);
                                                if (*v180 < 0x2Fu) {
                                                  goto LABEL_496;
                                                }
                                                uint64_t v181 = v180[23];
                                                if (!v181 || *((unsigned char *)*v22 + v181) != 17) {
                                                  goto LABEL_496;
                                                }
                                                int32x2_t v233 = v128;
                                                unint64_t v182 = (unint64_t)a2[4];
                                                unsigned int v183 = (unsigned int *)sub_2E4738(a2);
                                                uint64_t v184 = *(void *)(a1 + 32);
                                                sub_2D5904(v184, v183, 0, (char **)(v184 + 7800));
                                                long long v239 = 0;
                                                long long v240 = 0;
                                                unint64_t v238 = 0;
                                                __n128 v185 = *(unsigned char **)(v184 + 7800);
                                                long long v186 = *(unsigned char **)(v184 + 7808);
                                                uint64_t v187 = v186 - v185;
                                                if (v186 == v185)
                                                {
                                                  long long v188 = 0;
                                                  int32x2_t v128 = v233;
                                                  goto LABEL_494;
                                                }
                                                if (v187 < 0) {
                                                  sub_2E00();
                                                }
                                                long long v188 = (char *)operator new(v186 - v185);
                                                __n128 v189 = &v188[8 * (v187 >> 3)];
                                                unint64_t v238 = (unint64_t)v188;
                                                long long v240 = v189;
                                                memcpy(v188, v185, v187 - 1);
                                                long long v239 = v189;
                                                int32x2_t v128 = v233;
                                                if (8 * (v187 >> 3) != 24)
                                                {
LABEL_494:
                                                  if (!v188)
                                                  {
LABEL_496:
                                                    unsigned int v15 = v128.i32[0];
                                                    uint64_t v14 = v128.u32[1];
                                                    return v15 | (unint64_t)(v14 << 32);
                                                  }
LABEL_495:
                                                  int32x2_t v234 = v128;
                                                  long long v239 = v188;
                                                  operator delete(v188);
                                                  int32x2_t v128 = v234;
                                                  goto LABEL_496;
                                                }
                                                long long v190 = (unsigned __int16 *)((char *)*a2 - **a2);
                                                if (*v190 >= 0xBu)
                                                {
                                                  uint64_t v191 = v190[5];
                                                  if (v191)
                                                  {
                                                    if ((*((unsigned char *)*a2 + v191 + 1) & 0x80) != 0 && v188 != v189)
                                                    {
                                                      unsigned int v192 = v189 - 8;
                                                      if (v189 - 8 > v188)
                                                      {
                                                        long long v193 = v188 + 8;
                                                        do
                                                        {
                                                          uint64_t v194 = *(v193 - 1);
                                                          int v195 = *(_DWORD *)v192;
                                                          *(_DWORD *)((char *)v193 - 5) = *(_DWORD *)(v192 + 3);
                                                          *((_DWORD *)v193 - 2) = v195;
                                                          *(_DWORD *)unsigned int v192 = v194;
                                                          v192[6] = BYTE6(v194);
                                                          *((_WORD *)v192 + 2) = WORD2(v194);
                                                          v192 -= 8;
                                                        }
                                                        while (v193++ < (void *)v192);
                                                        long long v188 = (char *)v238;
                                                      }
                                                    }
                                                  }
                                                }
                                                if (v188 == v189)
                                                {
LABEL_480:
                                                  v197 = v189;
                                                  v198 = v189;
                                                }
                                                else
                                                {
                                                  v197 = v188;
                                                  v198 = v188;
                                                  while (__PAIR64__(*((unsigned __int16 *)v198 + 2), *(_DWORD *)v198) != __PAIR64__(WORD2(v182), v182)
                                                       || ((v182 & 0x1000000000000) == 0) == (v198[6] == 0))
                                                  {
                                                    v198 += 8;
                                                    v197 += 8;
                                                    if (v198 == v189) {
                                                      goto LABEL_480;
                                                    }
                                                  }
                                                }
                                                if (v198 != v188 && v197 != v189)
                                                {
                                                  if (v197 - v188 == 8)
                                                  {
                                                    uint64_t v199 = *(void *)v188;
                                                    int64_t v200 = v189 - v197;
                                                    memmove(v188, v197, v189 - v197 - 1);
                                                    int32x2_t v128 = v233;
                                                    v188 += v200;
LABEL_485:
                                                    *(_DWORD *)long long v188 = v199;
                                                    v188[6] = BYTE6(v199);
                                                    *((_WORD *)v188 + 2) = WORD2(v199);
                                                    goto LABEL_486;
                                                  }
                                                  if (v197 + 8 == v189)
                                                  {
                                                    uint64_t v199 = *((void *)v189 - 1);
                                                    if (v189 - 8 != v188)
                                                    {
                                                      memmove(v188 + 8, v188, v189 - 8 - v188 - 1);
                                                      int32x2_t v128 = v233;
                                                    }
                                                    goto LABEL_485;
                                                  }
                                                  uint64_t v207 = (v197 - v188) >> 3;
                                                  uint64_t v208 = (v189 - v197) >> 3;
                                                  if (v207 == v208)
                                                  {
                                                    unint64_t v209 = 0;
                                                    uint64_t v210 = 8 * v207;
                                                    uint64_t v211 = 8 * v207 - 8;
                                                    unsigned int v212 = &v188[v210];
                                                    do
                                                    {
                                                      long long v213 = &v188[v209];
                                                      __n128 v214 = &v212[v209];
                                                      uint64_t v215 = *(void *)&v188[v209];
                                                      int v216 = *(_DWORD *)&v212[v209];
                                                      *(_DWORD *)(v213 + 3) = *(_DWORD *)&v212[v209 + 3];
                                                      *(_DWORD *)long long v213 = v216;
                                                      *(_DWORD *)__n128 v214 = v215;
                                                      v214[6] = BYTE6(v215);
                                                      *((_WORD *)v214 + 2) = WORD2(v215);
                                                      if (v211 == v209) {
                                                        break;
                                                      }
                                                      v209 += 8;
                                                    }
                                                    while (v214 + 8 != v189);
                                                  }
                                                  else
                                                  {
                                                    uint64_t v217 = (v197 - v188) >> 3;
                                                    do
                                                    {
                                                      uint64_t v218 = v217;
                                                      uint64_t v217 = v208;
                                                      uint64_t v208 = v218 % v208;
                                                    }
                                                    while (v208);
                                                    if (v217)
                                                    {
                                                      v219 = &v188[8 * v217];
                                                      do
                                                      {
                                                        uint64_t v221 = *((void *)v219 - 1);
                                                        v219 -= 8;
                                                        uint64_t v220 = v221;
                                                        long long v222 = &v219[8 * v207];
                                                        unsigned int v223 = v219;
                                                        do
                                                        {
                                                          unsigned int v224 = v222;
                                                          int v225 = *(_DWORD *)v222;
                                                          *(_DWORD *)((char *)v223 + 3) = *(_DWORD *)((char *)v224 + 3);
                                                          *unsigned int v223 = v225;
                                                          uint64_t v226 = (v189 - (char *)v224) >> 3;
                                                          long long v222 = (char *)&v224[2 * v207];
                                                          BOOL v227 = __OFSUB__(v207, v226);
                                                          uint64_t v228 = v207 - v226;
                                                          char v39 = (v228 < 0) ^ v227;
                                                          long long v229 = &v188[8 * v228];
                                                          if (!v39) {
                                                            long long v222 = v229;
                                                          }
                                                          unsigned int v223 = v224;
                                                        }
                                                        while (v222 != v219);
                                                        *unsigned int v224 = v220;
                                                        *((unsigned char *)v224 + 6) = BYTE6(v220);
                                                        *((_WORD *)v224 + 2) = WORD2(v220);
                                                      }
                                                      while (v219 != v188);
                                                    }
                                                  }
                                                }
LABEL_486:
                                                unint64_t v201 = (unint64_t)a2[9];
                                                unint64_t v202 = *((void *)v239 - 1);
                                                if ((v201 & 0xFFFFFFFFFFFFLL) == (v202 & 0xFFFFFFFFFFFFLL))
                                                {
                                                  long long v188 = (char *)v238;
                                                  if (((v201 & 0xFF000000000000) == 0) != (HIWORD(v202) & 1))
                                                  {
                                                    unsigned int v203 = (int *)sub_2D5D58(*(void *)(a1 + 32), *(unsigned int *)(v238 + 8) | ((unint64_t)*(unsigned __int16 *)(v238 + 12) << 32));
                                                    uint64_t v204 = (unsigned __int16 *)((char *)v203 - *v203);
                                                    int32x2_t v128 = v233;
                                                    if (*v204 >= 0x2Fu)
                                                    {
                                                      uint64_t v205 = v204[23];
                                                      if (v205)
                                                      {
                                                        if (*((unsigned char *)v203 + v205) == 17) {
                                                          int32x2_t v128 = vadd_s32(*(int32x2_t *)(a3 + 752), v233);
                                                        }
                                                      }
                                                    }
                                                    goto LABEL_495;
                                                  }
                                                }
                                                else
                                                {
                                                  long long v188 = (char *)v238;
                                                }
                                                goto LABEL_494;
                                              }
                                            }
                                            else if (sub_29AD50((uint64_t)v173, v174))
                                            {
                                              goto LABEL_451;
                                            }
                                            unsigned int v175 = *(uint64_t **)(a1 + 16);
                                            unint64_t v176 = (unint64_t)a2[9];
                                            if (*(unsigned char *)(a1 + 52))
                                            {
                                              if ((sub_29AD58(v175, v176, 0) & 1) == 0) {
                                                goto LABEL_451;
                                              }
                                            }
                                            else if (!sub_29AD50((uint64_t)v175, v176))
                                            {
                                              goto LABEL_451;
                                            }
                                            int32x2_t v128 = vadd_s32(*(int32x2_t *)(a3 + 1120), v232);
                                            goto LABEL_448;
                                          }
LABEL_439:
                                          BOOL v171 = 0;
                                          if (a5 != 2) {
                                            goto LABEL_448;
                                          }
                                          goto LABEL_440;
                                        }
LABEL_434:
                                        if (!*(void *)(a3 + 1120)) {
                                          goto LABEL_435;
                                        }
                                        goto LABEL_439;
                                      }
LABEL_431:
                                      int32x2_t v128 = v231;
                                      if (!*(void *)(a3 + 1120)) {
                                        goto LABEL_435;
                                      }
                                      goto LABEL_439;
                                    }
                                  }
                                  if (!v168)
                                  {
                                    int32x2_t v128 = v231;
                                    goto LABEL_434;
                                  }
                                  uint64_t v169 = 0;
                                  long long v239 = v168;
                                  operator delete(v168);
                                  if (!v165) {
                                    goto LABEL_422;
                                  }
                                  goto LABEL_431;
                                }
                              }
                              else
                              {
                                sub_ECE7B4(v161, v162, *(_DWORD *)(v161 + 48), &v238);
                                unsigned int v163 = (char *)v238;
                                if ((char *)v238 != v239) {
                                  goto LABEL_415;
                                }
                              }
                              uint64_t v164 = 0;
                              uint64_t v165 = 0;
                              if (!v163) {
                                goto LABEL_419;
                              }
                              goto LABEL_418;
                            }
LABEL_333:
                            if (v130[5] && (*((unsigned char *)v105 + v130[5] + 1) & 1) != 0) {
                              goto LABEL_339;
                            }
                            goto LABEL_335;
                          }
LABEL_284:
                          if ((v121 & 0x40000) != 0)
                          {
                            LOBYTE(v123) = 3;
                          }
                          else if ((v121 & 0xA0000) != 0)
                          {
                            if ((v121 & 0x2000000) != 0) {
                              LOBYTE(v123) = 3;
                            }
                            else {
                              LOBYTE(v123) = 4;
                            }
                          }
                          else
                          {
                            LOBYTE(v123) = 5;
                          }
                          goto LABEL_296;
                        }
                      }
                      goto LABEL_295;
                    }
                  }
                  else
                  {
                    LOBYTE(v117) = 5;
                    int v118 = 1;
                    uint64_t v119 = -v106;
                    unsigned __int8 v236 = 5;
                    if (!*((unsigned char *)a2 + 78)) {
                      goto LABEL_266;
                    }
                  }
LABEL_280:
                  if (v112 >= 0xB)
                  {
                    uint64_t v122 = v111[5];
                    if (v122)
                    {
                      unsigned int v121 = *(_DWORD *)&v110[v122];
                      if ((v121 & 2) == 0 && (v121 & 1) == 0) {
                        goto LABEL_292;
                      }
                      goto LABEL_284;
                    }
                  }
LABEL_295:
                  LOBYTE(v123) = 2;
                  goto LABEL_296;
                }
                goto LABEL_275;
              }
LABEL_279:
              LOBYTE(v117) = 2;
              int v118 = 1;
              uint64_t v119 = -v106;
              unsigned __int8 v236 = 2;
              if (!*((unsigned char *)a2 + 78)) {
                goto LABEL_266;
              }
              goto LABEL_280;
            }
LABEL_237:
            v16 += *(_DWORD *)(a3 + 960);
            v17 += *(_DWORD *)(a3 + 964);
            goto LABEL_238;
          }
          if (v108 > 0xA) {
            goto LABEL_255;
          }
        }
        int v118 = 0;
        LOBYTE(v117) = 2;
        uint64_t v119 = -v106;
        unsigned __int8 v236 = 2;
        if (!*((unsigned char *)a2 + 78)) {
          goto LABEL_266;
        }
        goto LABEL_280;
      }
LABEL_232:
      v16 += *(_DWORD *)(a3 + 800);
      v17 += *(_DWORD *)(a3 + 804);
      goto LABEL_233;
    }
    long long v87 = a2[1];
    long long v88 = (unsigned __int16 *)((char *)v87 - *v87);
    unsigned int v89 = *v88;
    if (*((unsigned char *)a2 + 38))
    {
      if (v89 < 5)
      {
        LOWORD(v90) = 0;
        goto LABEL_202;
      }
      unsigned int v90 = v88[2];
      if (!v88[2])
      {
LABEL_202:
        long long v91 = a2[6];
        long long v92 = (unsigned __int16 *)((char *)v91 - *v91);
        unsigned int v93 = *v92;
        if (*((unsigned char *)a2 + 78)) {
          goto LABEL_203;
        }
        goto LABEL_198;
      }
    }
    else
    {
      if (v89 < 9)
      {
        LOWORD(v90) = 0;
        long long v91 = a2[6];
        long long v92 = (unsigned __int16 *)((char *)v91 - *v91);
        unsigned int v93 = *v92;
        if (*((unsigned char *)a2 + 78))
        {
LABEL_203:
          if (v93 >= 9)
          {
            unsigned int v94 = v92[4];
            if (!v92[4]) {
              goto LABEL_207;
            }
            goto LABEL_205;
          }
          goto LABEL_206;
        }
LABEL_198:
        if (v93 >= 5)
        {
          unsigned int v94 = v92[2];
          if (v92[2]) {
LABEL_205:
          }
            unsigned int v94 = *(unsigned __int16 *)((char *)v91 + v94);
LABEL_207:
          unsigned __int16 v95 = v90 + 18000;
          unsigned int v96 = (unsigned __int16)(v90 + 18000) >> 5;
          unsigned __int16 v97 = v90 - 18000;
          if (v96 < 0x465) {
            unsigned __int16 v97 = v95;
          }
          int v98 = v94 - v97;
          if (v98 > 18000) {
            v98 -= 36000;
          }
          if (v98 < -17999) {
            v98 += 36000;
          }
          double v99 = (double)v98 / 100.0;
          double v100 = fabs(v99);
          if (v41)
          {
            long long v101 = (void *)(a3 + 576);
            unint64_t v102 = vcvtad_u64_f64(v100);
LABEL_222:
            unsigned int v104 = (_DWORD *)sub_ECDD38(v101, v102);
            v16 += *v104;
            v17 += v104[1];
            goto LABEL_223;
          }
          if (v76 >= 0xB && (uint64_t v103 = v75[5]) != 0)
          {
            if (v99 < 0.0 == *((unsigned __int8 *)v74 + v103 + 1) >> 7)
            {
LABEL_218:
              long long v101 = (void *)(a3 + 528);
LABEL_221:
              unint64_t v102 = (unint64_t)v100;
              goto LABEL_222;
            }
          }
          else if (v99 >= 0.0)
          {
            goto LABEL_218;
          }
          long long v101 = (void *)(a3 + 552);
          goto LABEL_221;
        }
LABEL_206:
        unsigned int v94 = 0;
        goto LABEL_207;
      }
      unsigned int v90 = v88[4];
      if (!v88[4]) {
        goto LABEL_202;
      }
    }
    LOWORD(v90) = *(_WORD *)((char *)v87 + v90);
    long long v91 = a2[6];
    long long v92 = (unsigned __int16 *)((char *)v91 - *v91);
    unsigned int v93 = *v92;
    if (*((unsigned char *)a2 + 78)) {
      goto LABEL_203;
    }
    goto LABEL_198;
  }
  int v82 = *(_DWORD *)(a3 + 784);
  uint64_t v14 = 0x7FFFFFFFLL;
  unsigned int v15 = -1;
  if (v82 != -1)
  {
    int v83 = *(_DWORD *)(a3 + 788);
    if (v83 != 0x7FFFFFFF && *(void *)(a3 + 792) != 0x7FFFFFFFFFFFFFFFLL)
    {
      v16 += v82;
      v17 += v83;
      goto LABEL_182;
    }
  }
  return v15 | (unint64_t)(v14 << 32);
}

void sub_ECDB90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  operator delete(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_ECDBB8(uint64_t a1, unint64_t a2, unint64_t a3)
{
  int v6 = *(unsigned __int8 *)(a1 + 52);
  uint64_t v7 = *(void *)(a1 + 16);
  if (v6)
  {
    sub_ECE338(v7, a2, 0, &v17);
    if (*(unsigned char *)(a1 + 52)) {
      goto LABEL_7;
    }
  }
  else
  {
    sub_ECE338(v7, a2, *(_DWORD *)(v7 + 48), &v17);
    if (*(unsigned char *)(a1 + 52)) {
      goto LABEL_7;
    }
  }
  if (sub_29A88C(*(void *)(a1 + 16), a2, a3))
  {
    uint64_t v8 = 1;
    int v9 = v17;
    goto LABEL_18;
  }
LABEL_7:
  int v9 = v17;
  if (v17 == v18)
  {
LABEL_17:
    uint64_t v8 = 0;
  }
  else
  {
    int v10 = v17;
    while (1)
    {
      uint64_t v11 = *(void *)*v10 + 424 * v10[1];
      if (*(void *)(v11 + 8) - *(void *)v11 == 24)
      {
        char v13 = **(unint64_t ***)v11;
        uint64_t v12 = *(void *)(*(void *)v11 + 8);
        if (v12 - (void)v13 == 16)
        {
          unint64_t v14 = *v13;
          if ((a2 & 0xFFFFFFFFFFFFLL) == (v14 & 0xFFFFFFFFFFFFLL)
            && ((a2 & 0xFF000000000000) == 0) != (HIWORD(v14) & 1))
          {
            unint64_t v15 = *(void *)(v12 - 8);
            if ((a3 & 0xFFFFFFFFFFFFLL) == (v15 & 0xFFFFFFFFFFFFLL)
              && ((a3 & 0xFF000000000000) == 0) != (HIWORD(v15) & 1))
            {
              break;
            }
          }
        }
      }
      v10 += 2;
      if (v10 == v18) {
        goto LABEL_17;
      }
    }
    uint64_t v8 = 1;
  }
LABEL_18:
  if (v9)
  {
    BOOL v18 = v9;
    operator delete(v9);
  }
  return v8;
}

void sub_ECDD1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_ECDD38(void *a1, unint64_t a2)
{
  if (a2 >= (uint64_t)(a1[1] - *a1) >> 4)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    int v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, (uint64_t)(a1[1] - *a1) >> 4);
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v10 = &v15;
    }
    else {
      int v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    uint64_t v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    unint64_t v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 16 * a2;
}

void sub_ECDE68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

unint64_t sub_ECDF48(double *a1, double **a2)
{
  double v2 = *a1;
  unint64_t v3 = *a2;
  double v4 = **a2;
  if (*a1 <= v4) {
    return *((void *)v3 + 1);
  }
  uint64_t v5 = a2[1];
  if ((char *)v5 - (char *)v3 >= 24)
  {
    if ((char *)v5 - (char *)v3 != 24)
    {
      unint64_t v6 = ((char *)v5 - (char *)v3) / 0x18uLL;
      do
      {
        uint64_t v7 = 3 * (v6 >> 2);
        _X13 = &v3[v7];
        __asm { PRFM            #0, [X13] }
        unint64_t v14 = &v3[3 * (v6 >> 1)];
        _X12 = &v14[v7];
        __asm { PRFM            #0, [X12] }
        if (*v14 >= v2) {
          unint64_t v17 = 0;
        }
        else {
          unint64_t v17 = v6 >> 1;
        }
        v3 += 3 * v17;
        v6 -= v6 >> 1;
      }
      while ((uint64_t)v6 > 1);
      double v4 = *v3;
    }
    v3 += 3 * (v4 < v2);
  }
  if (v3 == v5) {
    return *((void *)v5 - 2);
  }
  double v18 = *(v3 - 3);
  double v19 = *v3;
  if (v18 == *v3) {
    return *((void *)v3 + 1);
  }
  uint64_t v21 = *((void *)v3 + 2) - *((void *)v3 - 1);
  v23[0] = (*((_DWORD *)v3 + 2) - *((_DWORD *)v3 - 4)) | ((unint64_t)(*((_DWORD *)v3 + 3) - *((_DWORD *)v3 - 3)) << 32);
  v23[1] = v21;
  unint64_t v22 = sub_ECE090(v23, (v2 - v18) / (v19 - v18), v19 - v18);
  return (*((_DWORD *)v3 - 4) + v22) | ((unint64_t)(*((_DWORD *)v3 - 3) + HIDWORD(v22)) << 32);
}

unint64_t sub_ECE090(_DWORD *a1, double a2, double a3)
{
  LODWORD(a3) = *a1;
  double v3 = (double)*(unint64_t *)&a3 * a2;
  if (v3 >= 0.0)
  {
    if (v3 >= 4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v4 = (uint64_t)(v3 + v3) + 1;
  }
  else
  {
    if (v3 <= -4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v4 = (uint64_t)(v3 + v3);
    if (v4 >= 1) {
      --v4;
    }
  }
  double v3 = (double)(v4 >> 1);
LABEL_9:
  double v5 = (double)(int)a1[1] * a2;
  if (v5 >= 0.0)
  {
    if (v5 < 4.50359963e15)
    {
      uint64_t v6 = (uint64_t)(v5 + v5) + 1;
LABEL_16:
      double v5 = (double)(v6 >> 1);
    }
  }
  else if (v5 > -4.50359963e15)
  {
    uint64_t v6 = (uint64_t)(v5 + v5);
    if (v6 >= 1) {
      --v6;
    }
    goto LABEL_16;
  }
  return v3 | ((unint64_t)(int)v5 << 32);
}

uint64_t sub_ECE1BC(uint64_t a1, int **a2)
{
  double v2 = (char *)*a2;
  double v3 = (unsigned __int16 *)((char *)*a2 - **a2);
  unsigned int v4 = *v3;
  if (*((unsigned char *)a2 + 38))
  {
    if (v4 < 0xB || !v3[5] || (*(_DWORD *)&v2[v3[5]] & 0xA) == 0) {
      return 0;
    }
  }
  else if (v4 < 0xB || !v3[5] || (*(_DWORD *)&v2[v3[5]] & 9) == 0)
  {
    return 0;
  }
  unsigned int v5 = *((unsigned __int16 *)a2 + 42);
  int v6 = v5 & 7;
  if (v4 >= 0x1B && (uint64_t v7 = v3[13]) != 0)
  {
    unsigned int v8 = v2[v7];
    unsigned int v9 = (v6 + 1) >> 1;
    if (v8 <= 5) {
      unsigned int v9 = v5 & 7;
    }
    unsigned int v10 = v9 + ((v5 >> 2) & 0xE);
    uint64_t v11 = a2[5];
    uint64_t v12 = (unsigned __int16 *)((char *)v11 - *v11);
    if (*v12 < 0x1Bu) {
      goto LABEL_24;
    }
  }
  else
  {
    unsigned int v8 = 0;
    unsigned int v10 = ((v5 >> 2) & 0xE) + v6;
    uint64_t v11 = a2[5];
    uint64_t v12 = (unsigned __int16 *)((char *)v11 - *v11);
    if (*v12 < 0x1Bu)
    {
LABEL_24:
      if (v8) {
        unsigned int v16 = v10 + 1;
      }
      else {
        unsigned int v16 = v10;
      }
      if (v16 >= 3) {
        return 3;
      }
      else {
        return v16;
      }
    }
  }
  uint64_t v14 = v12[13];
  if (!v14) {
    goto LABEL_24;
  }
  if (v8 == *((unsigned __int8 *)v11 + v14)) {
    unsigned int v15 = v10;
  }
  else {
    unsigned int v15 = v10 + 1;
  }
  if (v15 >= 3) {
    return 3;
  }
  else {
    return v15;
  }
}

uint64_t sub_ECE2D8(uint64_t result)
{
  if (!*(unsigned char *)(result + 5176))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  return result;
}

uint64_t sub_ECE338@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, char a3@<W3>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v4 = *(void *)result;
  if (*(void *)result)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(unsigned int **)(v4 + 176);
    unsigned int v8 = *(unsigned int **)(v4 + 184);
    uint64_t v9 = (char *)v8 - (char *)v7;
    if ((char *)v8 - (char *)v7 >= 24)
    {
      uint64_t v10 = (a2 >> 16) & 0xFFFF0000 | (a2 << 32);
      uint64_t v11 = a2 & 0xFF000000000000;
      if (v9 != 24)
      {
        unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 3);
        do
        {
          uint64_t v13 = 6 * (v12 >> 2);
          _X17 = &v7[v13];
          __asm { PRFM            #0, [X17] }
          std::string::size_type v20 = &v7[6 * (v12 >> 1)];
          _X16 = &v20[v13];
          __asm { PRFM            #0, [X16] }
          uint64_t result = *((unsigned __int16 *)v20 + 2);
          if ((((unint64_t)*v20 << 32) | (result << 16) | (*((unsigned char *)v20 + 6) == 0)) >= (v10 | (unint64_t)(v11 == 0))) {
            unint64_t v23 = 0;
          }
          else {
            unint64_t v23 = v12 >> 1;
          }
          v7 += 6 * v23;
          v12 -= v12 >> 1;
        }
        while ((uint64_t)v12 > 1);
      }
      v7 += 6
          * ((((unint64_t)*v7 << 32) | ((unint64_t)*((unsigned __int16 *)v7 + 2) << 16) | (*((unsigned char *)v7 + 6) == 0)) < (v10 | (unint64_t)(v11 == 0)));
    }
    if (v7 != v8)
    {
      int v24 = 1 << a3;
      int v25 = WORD2(a2);
      unsigned __int16 v26 = (uint64_t *)(v7 + 4);
      uint64_t v27 = HIWORD(a2) & 1;
      do
      {
        uint64_t v28 = v26 - 2;
        if (*((_DWORD *)v26 - 4) != a2
          || *((unsigned __int16 *)v26 - 6) != v25
          || ((v27 ^ (*((unsigned char *)v26 - 10) == 0)) & 1) == 0)
        {
          break;
        }
        if ((*(_DWORD *)(v26 - 1) & v24) - 1 <= 0xFFFFFFFD)
        {
          unint64_t v29 = a2;
          uint64_t v30 = v6;
          uint64_t v31 = *(void *)v6;
          uint64_t v32 = *v26;
          uint64_t v33 = *(void *)(v31 + 152);
          uint64_t result = sub_358690(v33 + 424 * *v26, 0);
          int v34 = *(_DWORD *)(v33 + 424 * v32 + 88) == 9 ? result : 0;
          uint64_t v6 = v30;
          a2 = v29;
          if (v34 == 1)
          {
            uint64_t result = sub_3588EC(*(void *)(*(void *)v6 + 152) + 424 * *v26);
            if ((result & 1) == 0)
            {
              v36[0] = *(void *)v6 + 152;
              uint64_t result = (uint64_t)sub_29AC28((uint64_t)a4, v36, v26);
            }
          }
        }
        v26 += 3;
      }
      while (v28 + 3 != *(uint64_t **)(v4 + 184));
    }
    if (*(unsigned char *)(v6 + 32))
    {
      v36[0] = off_243EFE0;
      int v37 = v36;
      sub_29BE60((uint64_t *)v6, a2, a4, (uint64_t)v36);
      uint64_t result = (uint64_t)v37;
      if (v37 == v36)
      {
        return (*(uint64_t (**)(void *))(v36[0] + 32))(v36);
      }
      else if (v37)
      {
        return (*(uint64_t (**)(void))(*v37 + 40))();
      }
    }
  }
  return result;
}

void sub_ECE64C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3EA7D8((uint64_t *)va);
  double v3 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

void sub_ECE68C()
{
}

void *sub_ECE6A0()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_243EFE0;
  return result;
}

void sub_ECE6D8(uint64_t a1, void *a2)
{
  *a2 = off_243EFE0;
}

uint64_t sub_ECE700(uint64_t a1, uint64_t a2)
{
  LODWORD(result) = sub_358690(a2, 0);
  if (*(_DWORD *)(a2 + 88) == 9) {
    return result;
  }
  else {
    return 0;
  }
}

uint64_t sub_ECE738(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK3msl7routing16DrivingEvaluator31has_simple_maneuver_restrictionENS_4data21DirectedRoadSegmentIdE"
                     "S3_EUlRKNS2_8IncidentEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK3msl7routing16DrivingEvaluator31has_simple_maneuver_restrictionENS_4data21DirectedRoa"
                                "dSegmentIdES3_EUlRKNS2_8IncidentEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK3msl7routing16DrivingEvaluator31has_simple_maneuver_restrictionENS_4data21DirectedRoadSegmentIdES3_EUlRKNS2_8IncidentEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK3msl7routing16DrivingEvaluator31has_simple_maneuver_restrictionENS_4data21DirectedRoadSegmentIdES3_EUlRKNS2_8IncidentEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_ECE7A8()
{
}

uint64_t sub_ECE7B4@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, char a3@<W3>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v5 = *(void *)result;
  if (*(void *)result)
  {
    uint64_t v7 = result;
    unsigned int v8 = *(unsigned int **)(v5 + 176);
    uint64_t v9 = *(unsigned int **)(v5 + 184);
    uint64_t v10 = (char *)v9 - (char *)v8;
    if ((char *)v9 - (char *)v8 >= 24)
    {
      uint64_t v11 = (a2 >> 16) & 0xFFFF0000 | (a2 << 32);
      uint64_t v12 = a2 & 0xFF000000000000;
      if (v10 != 24)
      {
        unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (v10 >> 3);
        do
        {
          uint64_t v14 = 6 * (v13 >> 2);
          _X17 = &v8[v14];
          __asm { PRFM            #0, [X17] }
          uint64_t v21 = &v8[6 * (v13 >> 1)];
          _X16 = &v21[v14];
          __asm { PRFM            #0, [X16] }
          uint64_t result = *((unsigned __int16 *)v21 + 2);
          if ((((unint64_t)*v21 << 32) | (result << 16) | (*((unsigned char *)v21 + 6) == 0)) >= (v11 | (unint64_t)(v12 == 0))) {
            unint64_t v24 = 0;
          }
          else {
            unint64_t v24 = v13 >> 1;
          }
          v8 += 6 * v24;
          v13 -= v13 >> 1;
        }
        while ((uint64_t)v13 > 1);
      }
      v8 += 6
          * ((((unint64_t)*v8 << 32) | ((unint64_t)*((unsigned __int16 *)v8 + 2) << 16) | (*((unsigned char *)v8 + 6) == 0)) < (v11 | (unint64_t)(v12 == 0)));
    }
    if (v8 != v9)
    {
      int v25 = 1 << a3;
      int v26 = WORD2(a2);
      uint64_t v27 = (uint64_t *)(v8 + 4);
      uint64_t v28 = HIWORD(a2) & 1;
      do
      {
        unint64_t v29 = v27 - 2;
        if (*((_DWORD *)v27 - 4) != a2
          || *((unsigned __int16 *)v27 - 6) != v26
          || ((v28 ^ (*((unsigned char *)v27 - 10) == 0)) & 1) == 0)
        {
          break;
        }
        if ((*(_DWORD *)(v27 - 1) & v25) - 1 <= 0xFFFFFFFD)
        {
          uint64_t result = sub_358820(*(void *)(*(void *)v7 + 152) + 424 * *v27);
          if (result)
          {
            uint64_t result = sub_3588EC(*(void *)(*(void *)v7 + 152) + 424 * *v27);
            if ((result & 1) == 0)
            {
              v30[0] = *(void *)v7 + 152;
              uint64_t result = (uint64_t)sub_29AC28((uint64_t)a4, v30, v27);
            }
          }
        }
        v27 += 3;
      }
      while (v29 + 3 != *(uint64_t **)(v5 + 184));
    }
    if (*(unsigned char *)(v7 + 32))
    {
      v30[0] = off_243F060;
      uint64_t v31 = v30;
      sub_29BE60((uint64_t *)v7, a2, a4, (uint64_t)v30);
      uint64_t result = (uint64_t)v31;
      if (v31 == v30)
      {
        return (*(uint64_t (**)(void *))(v30[0] + 32))(v30);
      }
      else if (v31)
      {
        return (*(uint64_t (**)(void))(*v31 + 40))();
      }
    }
  }
  return result;
}

void sub_ECEA90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3EA7D8((uint64_t *)va);
  uint64_t v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void sub_ECEAC8()
{
}

void *sub_ECEADC()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_243F060;
  return result;
}

void sub_ECEB14(uint64_t a1, void *a2)
{
  *a2 = off_243F060;
}

BOOL sub_ECEB3C(uint64_t a1, uint64_t a2)
{
  return sub_358820(a2);
}

uint64_t sub_ECEB44(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZZNK3msl7routing16DrivingEvaluator19get_transition_costERKNS0_17DrivingRoutingArcERKNS0_19DrivingCo"
                     "stFunctionENS_6common9TimeStampENS0_18RequestTrafficTypeEENKUlRKNS_4data19DirectedRoadSegmentEE_clE"
                     "SE_EUlRKNSB_8IncidentEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZNK3msl7routing16DrivingEvaluator19get_transition_costERKNS0_17DrivingRoutingArcERKNS0_"
                                "19DrivingCostFunctionENS_6common9TimeStampENS0_18RequestTrafficTypeEENKUlRKNS_4data19Dir"
                                "ectedRoadSegmentEE_clESE_EUlRKNSB_8IncidentEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZNK3msl7routing16DrivingEvaluator19get_transition_costERKNS0_17DrivingRoutingArcERKNS0_19DrivingCostFunctionENS_6common9TimeStampENS0_18RequestTrafficTypeEENKUlRKNS_4data19DirectedRoadSegmentEE_clESE_EUlRKNSB_8IncidentEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZNK3msl7routing16DrivingEvaluator19get_transition_costERKNS0_17DrivingRoutingArcERKNS0_19DrivingCostFunctionENS_6common9TimeStampENS0_18RequestTrafficTypeEENKUlRKNS_4data19DirectedRoadSegmentEE_clESE_EUlRKNSB_8IncidentEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_ECEBB4()
{
}

void sub_ECEBC0()
{
  unk_25FC727 = 16641;
  word_25FC710 = 65;
  byte_25FC73F = 1;
  byte_25FC729 = 0;
}

double *sub_ECEBE8(double *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, void **a6)
{
  *a1 = 0.0;
  if (a2) {
    a3 = a2;
  }
  unsigned int v8 = (uint64_t *)sub_3766F8(*a6);
  uint64_t v9 = (std::__shared_weak_count *)v8[1];
  uint64_t v21 = *v8;
  unint64_t v22 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memcpy(v23, v8 + 2, sizeof(v23));
  uint64_t v10 = sub_32A458((uint64_t)&v21, (HIDWORD(a3) & 0xFFFE0000FFFFFFFFLL | ((unint64_t)WORD1(a3) << 32) & 0xFFFEFFFFFFFFFFFFLL | (((a3 >> 1) & 1) << 48)) ^ 0x1000000000000);
  if (!v10)
  {
    *a1 = 0.0;
    double v19 = v22;
    if (!v22) {
      return a1;
    }
    goto LABEL_23;
  }
  uint64_t v11 = &v10[-*(int *)v10];
  unsigned int v12 = *(unsigned __int16 *)v11;
  if (v12 >= 0xB && *((_WORD *)v11 + 5))
  {
    unsigned int v13 = *(unsigned __int16 *)&v10[*((unsigned __int16 *)v11 + 5)];
    unsigned int v14 = WORD4(v23[241]);
    if (!WORD4(v23[241])) {
      goto LABEL_16;
    }
  }
  else
  {
    unsigned int v13 = 0xFFFF;
    unsigned int v14 = WORD4(v23[241]);
    if (!WORD4(v23[241])) {
      goto LABEL_16;
    }
  }
  if (v12 >= 0x11)
  {
    uint64_t v15 = *((unsigned __int16 *)v11 + 8);
    if (v15)
    {
      unsigned int v16 = &v10[v15 + *(unsigned int *)&v10[v15]];
      if (*(_DWORD *)v16 >= v14)
      {
        unsigned int v17 = *(unsigned __int16 *)&v16[2 * v14 + 2];
        if ((unsigned __int16)(v17 + 1) > 1u)
        {
          double v18 = (double)v17;
LABEL_18:
          *a1 = v18 / 1000.0;
          double v19 = v22;
          if (!v22) {
            return a1;
          }
          goto LABEL_23;
        }
      }
    }
  }
LABEL_16:
  if (v13 != 0xFFFF)
  {
    double v18 = (double)v13;
    goto LABEL_18;
  }
  *a1 = 0.3;
  double v19 = v22;
  if (!v22) {
    return a1;
  }
LABEL_23:
  if (atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
  std::__shared_weak_count::__release_weak(v19);
  return a1;
}

void sub_ECEDC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_ECEDDC()
{
  unk_25FC757 = 16641;
  word_25FC740 = 65;
  byte_25FC76F = 1;
  byte_25FC759 = 0;
}

uint64_t sub_ECEE04(unsigned int *a1, uint64_t a2, _DWORD *a3)
{
  if (sub_3FAFBC((uint64_t)a1)
    && (uint64_t v6 = nullsub_1(*(void *)(a2 + 8)),
        uint64_t v13 = sub_40A454(v6),
        uint64_t v7 = (unsigned int *)sub_37D0C0((uint64_t)a1),
        uint64_t v11 = sub_40A6A0(v7, &v13),
        int v12 = v8,
        sub_40A820(&v11)))
  {
    *a3 += sub_4F44(a1);
    a3[1] += sub_53FA4((uint64_t)a1);
    uint64_t v9 = a3 + 2;
    sub_40A864(v9, &v11);
    if (sub_40A820(v9)) {
      return sub_53FA4((uint64_t)a1);
    }
    else {
      return 0x7FFFFFFFLL;
    }
  }
  else
  {
    *(_OWORD *)a3 = xmmword_20EC810;
    uint64_t result = 0x7FFFFFFFLL;
    a3[4] = 0x7FFFFFFF;
  }
  return result;
}

uint64_t sub_ECEF04(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, void **a7)
{
  *a1 |= sub_C73DB0((int **)a2);
  uint64_t result = sub_374D14(*a7);
  if (a6 == 2)
  {
    uint64_t result = sub_29AD50(result, *(void *)(a2 + 32));
    if (result) {
      int v12 = 0x200000;
    }
    else {
      int v12 = 0;
    }
  }
  else
  {
    int v12 = 0;
  }
  *a1 |= v12;
  return result;
}

uint64_t sub_ECEF84(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, void **a7)
{
  *a1 |= sub_C73DB0((int **)(a2 + 8));
  uint64_t result = sub_374D14(*a7);
  if (a6 == 2)
  {
    uint64_t result = sub_29AD50(result, *(void *)(a2 + 40));
    if (result) {
      int v12 = 0x200000;
    }
    else {
      int v12 = 0;
    }
  }
  else
  {
    int v12 = 0;
  }
  *a1 |= v12;
  return result;
}

BOOL sub_ECF004(_DWORD *a1)
{
  return *a1 != -1 && a1[1] != 0x7FFFFFFF && sub_40A820(a1 + 2);
}

uint64_t sub_ECF030@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = nullsub_1(*(void *)(a1 + 8));
  uint64_t v6 = sub_40A454(v3);
  *(_DWORD *)(a2 + 16) = 0x7FFFFFFF;
  *(_OWORD *)a2 = xmmword_20F0F40;
  uint64_t result = sub_40A674((uint64_t)&v6);
  *(void *)(a2 + 8) = result;
  *(_DWORD *)(a2 + 16) = v5;
  return result;
}

uint64_t sub_ECF08C(uint64_t a1, unsigned __int8 *a2, int a3, uint64_t a4, uint64_t a5, double a6, double a7)
{
  uint64_t v9 = (uint64_t *)(a2 + 88);
  if (a3)
  {
    uint64_t v9 = (uint64_t *)(a2 + 8);
    uint64_t v10 = (uint64_t)(a2 + 16);
  }
  else
  {
    uint64_t v10 = (uint64_t)(a2 + 96);
  }
  sub_FE56E0(a4, *v9, v10, a5, 0, v18, a6, a7);
  if (!sub_3FAFBC((uint64_t)v18))
  {
    *(_OWORD *)a1 = xmmword_20EC810;
    uint64_t result = 0x7FFFFFFFLL;
    *(_DWORD *)(a1 + 16) = 0x7FFFFFFF;
    return result;
  }
  unsigned int v11 = *a2 - 3;
  unsigned int v12 = sub_4F44((unsigned int *)v18);
  unsigned int v13 = v12;
  if (v11 <= 1)
  {
    unsigned int v13 = v12 >> 1;
    double v14 = (double)(int)sub_53FA4((uint64_t)v18) * 0.5;
    if (v14 >= 0.0)
    {
      if (v14 < 4.50359963e15)
      {
        uint64_t v15 = (uint64_t)(v14 + v14) + 1;
LABEL_15:
        double v14 = (double)(v15 >> 1);
      }
    }
    else if (v14 > -4.50359963e15)
    {
      uint64_t v15 = (uint64_t)(v14 + v14);
      if (v15 >= 1) {
        --v15;
      }
      goto LABEL_15;
    }
    uint64_t result = (int)v14;
    goto LABEL_17;
  }
  uint64_t result = sub_53FA4((uint64_t)v18);
LABEL_17:
  int v17 = *(_DWORD *)(a1 + 4) + result;
  *(_DWORD *)a1 += v13;
  *(_DWORD *)(a1 + 4) = v17;
  return result;
}

uint64_t sub_ECF1CC(_DWORD *a1, uint64_t a2, unsigned int a3, uint64_t *a4, uint64_t a5, int a6, unsigned int *a7, int a8, uint64_t a9)
{
  uint64_t v17 = *(void *)(a9 + 8);
  v22[0].n128_u32[0] = 0x7FFFFFFF;
  *(unint64_t *)((char *)v22[0].n128_u64 + 4) = 0x7FFFFFFF7FFFFFFFLL;
  if (sub_401FE4(v17))
  {
    uint64_t v18 = nullsub_1(v17);
    uint64_t v23 = sub_40A454(v18);
    uint64_t v19 = sub_40A3AC(0x32u, &v23);
  }
  else
  {
    int v20 = 0x7FFFFFFF;
    uint64_t v19 = v22[0].n128_u64[0];
  }
  uint64_t v23 = v19;
  int v24 = v20;
  sub_FE52EC(a4, a2, a3, a5, a7, a6, (unsigned int *)&v23, a8, v22);
  return sub_ECEE04((unsigned int *)v22, a9, a1);
}

uint64_t sub_ECF2BC(_DWORD *a1, uint64_t a2, unsigned int a3, uint64_t *a4, uint64_t a5, int a6, unsigned int *a7, int a8, uint64_t a9)
{
  uint64_t v17 = *(void *)(a9 + 8);
  v22[0].n128_u32[0] = 0x7FFFFFFF;
  *(unint64_t *)((char *)v22[0].n128_u64 + 4) = 0x7FFFFFFF7FFFFFFFLL;
  if (sub_401FE4(v17))
  {
    uint64_t v18 = nullsub_1(v17);
    uint64_t v23 = sub_40A454(v18);
    uint64_t v19 = sub_40A3AC(0x32u, &v23);
  }
  else
  {
    int v20 = 0x7FFFFFFF;
    uint64_t v19 = v22[0].n128_u64[0];
  }
  uint64_t v23 = v19;
  int v24 = v20;
  sub_FE5480(a4, a2 + 8, a3, a5, a7, a6, (unsigned int *)&v23, a8, v22);
  return sub_ECEE04((unsigned int *)v22, a9, a1);
}

uint64_t sub_ECF3AC(_DWORD *a1, unint64_t a2, unsigned int *a3, unint64_t a4, unsigned int *a5, uint64_t a6, uint64_t a7)
{
  sub_ED5668(a6, a2, a3, a4, a5, v10);
  return sub_ECEE04((unsigned int *)v10, a7, a1);
}

unsigned int *sub_ECF3F4(int32x2_t *a1, int32x2_t *a2)
{
  *a1 = vadd_s32(*a2, *a1);
  return sub_40A864((unsigned int *)&a1[1], &a2[1]);
}

void sub_ECF408()
{
  unk_25FC787 = 16641;
  word_25FC770 = 65;
  byte_25FC79F = 1;
  byte_25FC789 = 0;
}

uint64_t sub_ECF430(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  *(_WORD *)uint64_t result = -1;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0xFFFFFFFF7FFFFFFFLL;
  if (*(unsigned char *)(a4 + 16))
  {
    if (*(_DWORD *)(a4 + 20) != -1 || *(_DWORD *)(a4 + 96) != -1)
    {
      *(_WORD *)uint64_t result = *(_WORD *)a4;
      *(void *)(result + 8) = *(void *)(a4 + 8);
      *(_DWORD *)(result + 16) = 0;
      *(_DWORD *)(result + 20) = a5;
    }
  }
  return result;
}

void sub_ECF47C()
{
  unk_25FC7B7 = 16641;
  word_25FC7A0 = 65;
  byte_25FC7CF = 1;
  byte_25FC7B9 = 0;
}

uint64_t sub_ECF4A4(uint64_t a1, _OWORD *a2, void **a3)
{
  *(_OWORD *)a1 = *a2;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = sub_3750CC(*a3);
  return a1;
}

void sub_ECF4E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_OWORD *)unint64_t v22 = *(_OWORD *)(a5 + 24);
  *(_OWORD *)int v35 = *(_OWORD *)(a5 + 72);
  sub_ED1B8C(v22, v35, (uint64_t)v36);
  sub_ED4F58(v35, *(void *)(a1 + 16));
  int v10 = *(_DWORD *)(a1 + 4);
  int v34 = *(_DWORD *)a1;
  int v33 = 10 * (v34 - v10);
  unsigned __int8 v11 = *(unsigned char *)(a1 + 13);
  if (v11) {
    unsigned __int8 v11 = *(_DWORD *)(a1 + 8) == 1;
  }
  unsigned __int8 v32 = v11;
  v31[0] = a5;
  v31[1] = a1;
  v31[2] = v35;
  double v31[3] = &v32;
  v31[4] = &v34;
  v31[5] = &v33;
  v31[6] = a2;
  v31[7] = a3;
  v31[8] = a4;
  BOOL v12 = sub_EB94C0(a5);
  unsigned int v13 = ((*(void *)(a5 + 56) - *(void *)(a5 + 48)) >> 2) - 1;
  v22[0] = a5;
  sub_ED1FF8(&v22[1], v13);
  sub_EB9370(a5, &v21);
  unint64_t v15 = v21.n128_u64[1];
  double v14 = (unsigned __int8 *)v21.n128_u64[0];
  if (v21.n128_u64[0] != v21.n128_u64[1])
  {
    if (v12)
    {
      unsigned int v16 = 0;
      while (1)
      {
        int v17 = *v14;
        if ((v17 - 1) > 1) {
          goto LABEL_22;
        }
        if (v32)
        {
          if (v17 != 2) {
            goto LABEL_7;
          }
        }
        else if (v17 != 1)
        {
          goto LABEL_7;
        }
        uint64_t v20 = 0x7FFFFFFF00000000;
        unsigned int v45 = v16;
        sub_ED2990((uint64_t)&v22[1], &v45, (unsigned int *)&v20);
LABEL_7:
        ++v16;
        v14 += 168;
        if (v14 == (unsigned __int8 *)v15) {
          goto LABEL_22;
        }
      }
    }
    unsigned int v18 = 0;
    do
    {
      int v19 = *v14;
      if (v32)
      {
        if (v19 != 2) {
          goto LABEL_16;
        }
      }
      else if (v19 != 1)
      {
        goto LABEL_16;
      }
      uint64_t v20 = 0x7FFFFFFF00000000;
      unsigned int v45 = v18;
      sub_ED2990((uint64_t)&v22[1], &v45, (unsigned int *)&v20);
LABEL_16:
      ++v18;
      v14 += 168;
    }
    while (v14 != (unsigned __int8 *)v15);
  }
LABEL_22:
  if (v32) {
    sub_ECF930((uint64_t)v22, (uint64_t)&v21, (uint64_t)&v20, (uint64_t)v31);
  }
  else {
    sub_ECF814((uint64_t)v22, (uint64_t)&v21, (uint64_t)&v20, (uint64_t)v31);
  }
  sub_ECFA4C(a1, (void *)a5, v32);
  if (__p)
  {
    uint64_t v30 = __p;
    operator delete(__p);
  }
  if (v27)
  {
    uint64_t v28 = v27;
    operator delete(v27);
  }
  if (v25)
  {
    int v26 = v25;
    operator delete(v25);
  }
  if (v23)
  {
    int v24 = v23;
    operator delete(v23);
  }
  sub_328138((uint64_t)&v22[1]);
  if (v43)
  {
    unsigned int v44 = v43;
    operator delete(v43);
  }
  if (v41)
  {
    unint64_t v42 = v41;
    operator delete(v41);
  }
  if (v39)
  {
    unint64_t v40 = v39;
    operator delete(v39);
  }
  if (v37)
  {
    unsigned int v38 = v37;
    operator delete(v37);
  }
}

void sub_ECF7A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_ECFCF0((uint64_t *)va);
  sub_2FC97C((void *)(v5 - 216));
  _Unwind_Resume(a1);
}

uint64_t sub_ECF814(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_DWORD *)(result + 880))
  {
    uint64_t v5 = result;
    uint64_t v6 = result + 8;
    do
    {
      uint64_t v7 = (unsigned int *)(*(void *)(v5 + 776) + 12 * **(unsigned int **)(v5 + 832));
      uint64_t v8 = *v7;
      uint64_t v14 = *(void *)(v7 + 1);
      sub_ED37DC(v6);
      uint64_t v9 = *(void *)v5;
      sub_EC079C(*(void *)v5, v8);
      int v10 = (unsigned int *)(*(void *)(v9 + 72) + 80 * *(unsigned int *)(*(void *)(v9 + 48) + 4 * v8));
      uint64_t result = sub_EC079C(v9, v8);
      uint64_t v11 = *(void *)(v9 + 72) + 80 * *(unsigned int *)(*(void *)(v9 + 48) + 4 * (v8 + 1));
      while (v10 != (unsigned int *)v11)
      {
        uint64_t result = sub_ED3A58(a4, v8, (int *)&v14, v10);
        if ((result & 1) == 0)
        {
          unsigned int v13 = *v10;
          uint64_t v12 = (HIDWORD(v14) + v14) | 0x7FFFFFFF00000000;
          uint64_t result = sub_ED3CE0(v6, &v13, (unsigned int *)&v12);
        }
        v10 += 20;
      }
    }
    while (*(_DWORD *)(v5 + 880));
  }
  return result;
}

uint64_t sub_ECF930(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_DWORD *)(result + 880))
  {
    uint64_t v5 = result;
    uint64_t v6 = result + 8;
    do
    {
      uint64_t v7 = (unsigned int *)(*(void *)(v5 + 776) + 12 * **(unsigned int **)(v5 + 832));
      uint64_t v8 = *v7;
      uint64_t v14 = *(void *)(v7 + 1);
      sub_ED37DC(v6);
      uint64_t v9 = *(void **)v5;
      sub_EC079C(*(void *)v5, v8);
      int v10 = (unsigned int *)(v9[3] + 80 * *(unsigned int *)(*v9 + 4 * v8));
      uint64_t result = sub_EC079C((uint64_t)v9, v8);
      uint64_t v11 = v9[3] + 80 * *(unsigned int *)(*v9 + 4 * (v8 + 1));
      while (v10 != (unsigned int *)v11)
      {
        uint64_t result = sub_ED3A58(a4, v8, (int *)&v14, v10);
        if ((result & 1) == 0)
        {
          unsigned int v13 = *v10;
          uint64_t v12 = (HIDWORD(v14) + v14) | 0x7FFFFFFF00000000;
          uint64_t result = sub_ED3CE0(v6, &v13, (unsigned int *)&v12);
        }
        v10 += 20;
      }
    }
    while (*(_DWORD *)(v5 + 880));
  }
  return result;
}

void sub_ECFA4C(uint64_t a1, void *a2, int a3)
{
  uint64_t v3 = a2 + 3;
  uint64_t v4 = a2 + 4;
  if (a3) {
    uint64_t v4 = a2 + 10;
  }
  uint64_t v5 = *v4;
  if (a3) {
    uint64_t v3 = a2 + 9;
  }
  if (*v3 != v5)
  {
    unint64_t v7 = (unint64_t)(((a2[7] - a2[6]) << 30) - 0x100000000) >> 32;
    if (v7)
    {
      uint64_t v8 = 0;
      if (a3)
      {
        do
        {
          sub_EC079C((uint64_t)a2, v8);
          uint64_t v9 = (unsigned int *)(a2[3] + 80 * *(unsigned int *)(*a2 + 4 * v8));
          sub_EC079C((uint64_t)a2, v8);
          uint64_t v10 = v8 + 1;
          uint64_t v11 = a2[3] + 80 * *(unsigned int *)(*a2 + 4 * (v8 + 1));
          while (v9 != (unsigned int *)v11)
          {
            uint64_t v13 = *v9;
            unint64_t v14 = (v13 + 1);
            uint64_t v15 = a2[6];
            if (v14 >= (a2[7] - v15) >> 2)
            {
LABEL_34:
              exception = __cxa_allocate_exception(0x40uLL);
              strcpy((char *)v34, "vertex id out of range");
              BYTE7(v34[1]) = 22;
              int v33 = (void *)sub_2F404((uint64_t)exception, v34);
            }
            uint64_t v16 = a2[9];
            unsigned int v17 = *(_DWORD *)(v15 + 4 * v13);
            uint64_t v12 = (_DWORD *)(v16 + 80 * v17);
            unsigned int v18 = *(_DWORD *)(v15 + 4 * v14);
            if (v17 != v18)
            {
              int v19 = (_DWORD *)(v16 + 80 * v18);
              uint64_t v20 = 80 * v18 - 80 * v17;
              while (*v12 != v8 || sub_488C(v12 + 14))
              {
                v12 += 20;
                v20 -= 80;
                if (!v20)
                {
                  uint64_t v12 = v19;
                  break;
                }
              }
            }
            v12[14] = v9[14];
            v9 += 20;
          }
          ++v8;
        }
        while (v10 != v7);
      }
      else
      {
        do
        {
          sub_EC079C((uint64_t)a2, v8);
          __n128 v21 = (unsigned int *)(a2[9] + 80 * *(unsigned int *)(a2[6] + 4 * v8));
          sub_EC079C((uint64_t)a2, v8);
          uint64_t v22 = v8 + 1;
          uint64_t v23 = a2[9] + 80 * *(unsigned int *)(a2[6] + 4 * (v8 + 1));
          while (v21 != (unsigned int *)v23)
          {
            uint64_t v25 = *v21;
            unint64_t v26 = (v25 + 1);
            if (v26 >= (uint64_t)(a2[7] - a2[6]) >> 2) {
              goto LABEL_34;
            }
            uint64_t v27 = a2[3];
            unsigned int v28 = *(_DWORD *)(*a2 + 4 * v25);
            int v24 = (_DWORD *)(v27 + 80 * v28);
            unsigned int v29 = *(_DWORD *)(*a2 + 4 * v26);
            if (v28 != v29)
            {
              uint64_t v30 = (_DWORD *)(v27 + 80 * v29);
              uint64_t v31 = 80 * v29 - 80 * v28;
              while (*v24 != v8 || sub_488C(v24 + 14))
              {
                v24 += 20;
                v31 -= 80;
                if (!v31)
                {
                  int v24 = v30;
                  break;
                }
              }
            }
            v24[14] = v21[14];
            v21 += 20;
          }
          ++v8;
        }
        while (v22 != v7);
      }
    }
  }
}

void sub_ECFCD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_ECFCF0(void *a1)
{
  uint64_t v2 = (void *)a1[107];
  if (v2)
  {
    a1[108] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[104];
  if (v3)
  {
    a1[105] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[100];
  if (v4)
  {
    a1[101] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[97];
  if (v5)
  {
    a1[98] = v5;
    operator delete(v5);
  }
  sub_328138((uint64_t)(a1 + 1));
  return a1;
}

uint64_t sub_ECFD5C(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, int a8, int a9, int a10, int a11, int a12, unsigned int a13)
{
  unsigned int v21 = *(_DWORD *)a3;
  int v70 = sub_35E640();
  if (sub_EB9330(a4, a2))
  {
    uint64_t v22 = (unsigned __int8 *)sub_EB935C(a4, a2);
    int v25 = sub_ECA010(&v70, v22, 0, a6, a7, v23, v24);
    uint64_t v26 = 0x7FFFFFFFLL;
    if (v25 == 0x7FFFFFFF) {
      return v26;
    }
  }
  else
  {
    int v25 = 0;
  }
  unsigned int v27 = *(_DWORD *)(a3 + 60);
  int v28 = *(_DWORD *)(a3 + 64);
  BOOL v29 = v27 == v28;
  uint64_t v30 = *(void *)(a3 + 72);
  if (!v30) {
    BOOL v29 = 0;
  }
  if (v27 != v28 || v29)
  {
    uint64_t v40 = *(void *)(a1 + 16);
    v65[0] = a6;
    v65[1] = v40;
    float64x2_t v60 = a5;
    unsigned int v61 = v27;
    uint64_t v62 = v30;
    BOOL v63 = v29;
    double v56 = a5;
    int v57 = v28;
    uint64_t v58 = 0;
    char v59 = 0;
    unint64_t v41 = sub_35E640();
    if (v25 < 0) {
      char v42 = -5;
    }
    else {
      char v42 = 5;
    }
    v66[0] = (int *)sub_107F8D8((uint64_t)&v60, (uint64_t)&v56, v41, v65, a7, *(unsigned __int8 *)(a1 + 12), v25 / 10+ a8+ (((103 * (char)(v42 + v25 % 10)) >> 15) & 1)+ ((103 * (char)(v42 + v25 % 10)) >> 10), a9, 1000000000 - a11, 0, a13, (uint64_t)v71, **(void ***)(a1 + 16));
    uint64_t v26 = 0x7FFFFFFFLL;
    if (sub_488C(v66) && HIDWORD(v66[0]) != 0x7FFFFFFF)
    {
      uint64_t v43 = (HIDWORD(v66[0]) + v25);
      sub_ECA2C4(&v70, v66);
      if (sub_EB9330(a4, v21))
      {
        unsigned int v44 = (unsigned __int8 *)sub_EB935C(a4, v21);
        int v47 = sub_ECA010(&v70, v44, 1, a6, a7, v45, v46);
        if (v47 == 0x7FFFFFFF) {
          return v26;
        }
        uint64_t v43 = (v47 + v43);
      }
      *(_DWORD *)(a3 + 56) = v70;
      return v43;
    }
  }
  else
  {
    uint64_t v54 = a6;
    unint64_t v31 = sub_EE02F4(a5, v27);
    unint64_t v32 = HIDWORD(v31);
    unint64_t v33 = HIDWORD(v31) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(v31) << 32);
    unint64_t v34 = (HIDWORD(v31) & 0xFFFE0000FFFFFFFFLL | ((unint64_t)WORD1(v31) << 32) & 0xFFFEFFFFFFFFFFFFLL | (((v31 >> 1) & 1) << 48)) ^ 0x1000000000000;
    uint64_t v35 = *(void *)(a1 + 24);
    int v36 = (int *)sub_2D5D58(v35, v33);
    uint64_t v55 = a7;
    if (*(unsigned char *)(v35 + 7772))
    {
      int v37 = sub_2DB8E0(v35 + 3896, v32, 0);
      unsigned int v38 = &v37[-*(int *)v37];
      if (*(unsigned __int16 *)v38 < 5u)
      {
        uint64_t v39 = 0;
      }
      else
      {
        uint64_t v39 = *((unsigned __int16 *)v38 + 2);
        if (v39) {
          v39 += (uint64_t)&v37[*(unsigned int *)&v37[v39]];
        }
      }
      unsigned int v48 = (int *)(v39 + 4 * WORD2(v34) + 4 + *(unsigned int *)(v39 + 4 * WORD2(v34) + 4));
    }
    else
    {
      unsigned int v48 = 0;
    }
    v66[0] = v36;
    v66[1] = v48;
    v66[2] = (int *)sub_2E5C38(v35, v33, 1);
    v66[3] = v49;
    int v67 = v32;
    __int16 v68 = WORD2(v34);
    char v69 = BYTE6(v34);
    if (v25 < 0) {
      char v50 = -5;
    }
    else {
      char v50 = 5;
    }
    sub_456C((uint64_t)v65, v25 / 10+ a8+ (((103 * (char)(v50 + v25 % 10)) >> 15) & 1)+ ((103 * (char)(v50 + v25 % 10)) >> 10));
    sub_3BDCD8(*(void *)(a1 + 24), v33, v71);
    unint64_t v51 = v72;
    if ((v72 & 0x80u) != 0) {
      unint64_t v51 = (unint64_t)v71[1];
    }
    if (v51) {
      sub_26A18((uint64_t)v64, (const char *)v71);
    }
    else {
      sub_26908((uint64_t)v64);
    }
    if ((char)v72 < 0) {
      operator delete(v71[0]);
    }
    sub_48B4((uint64_t)v65, v64);
    sub_26C4C((const void **)v64);
    int v52 = sub_ECA158(&v70, v66, a13 - a11, v54, v55, *(unsigned __int8 *)(a1 + 12), (unsigned int *)v65);
    uint64_t v26 = 0x7FFFFFFFLL;
    if (v52 != 0x7FFFFFFF)
    {
      uint64_t v26 = (v52 + v25);
      *(_DWORD *)(a3 + 56) = v70;
    }
    sub_4814((uint64_t)v65);
  }
  return v26;
}

void sub_ED019C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_ED01F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_OWORD *)uint64_t v22 = *(_OWORD *)(a5 + 24);
  *(_OWORD *)uint64_t v35 = *(_OWORD *)(a5 + 72);
  sub_ED1B8C(v22, v35, (uint64_t)v36);
  sub_ED4F58(v35, *(void *)(a1 + 16));
  int v10 = *(_DWORD *)(a1 + 4);
  int v34 = *(_DWORD *)a1;
  int v33 = 10 * (v34 - v10);
  unsigned __int8 v11 = *(unsigned char *)(a1 + 13);
  if (v11) {
    unsigned __int8 v11 = *(_DWORD *)(a1 + 8) == 1;
  }
  unsigned __int8 v32 = v11;
  v31[0] = a5;
  v31[1] = a1;
  v31[2] = v35;
  double v31[3] = &v32;
  v31[4] = &v34;
  v31[5] = &v33;
  v31[6] = a2;
  v31[7] = a3;
  v31[8] = a4;
  BOOL v12 = sub_EB94C0(a5);
  unsigned int v13 = ((*(void *)(a5 + 56) - *(void *)(a5 + 48)) >> 2) - 1;
  v22[0] = a5;
  sub_ED3F38(&v22[1], v13);
  sub_EB9370(a5, &v21);
  unint64_t v15 = v21.n128_u64[1];
  unint64_t v14 = (unsigned __int8 *)v21.n128_u64[0];
  if (v21.n128_u64[0] != v21.n128_u64[1])
  {
    if (v12)
    {
      unsigned int v16 = 0;
      while (1)
      {
        int v17 = *v14;
        if ((v17 - 1) > 1) {
          goto LABEL_22;
        }
        if (v32)
        {
          if (v17 != 2) {
            goto LABEL_7;
          }
        }
        else if (v17 != 1)
        {
          goto LABEL_7;
        }
        uint64_t v20 = 0x7FFFFFFF00000000;
        unsigned int v45 = v16;
        sub_ED2990((uint64_t)&v22[1], &v45, (unsigned int *)&v20);
LABEL_7:
        ++v16;
        v14 += 168;
        if (v14 == (unsigned __int8 *)v15) {
          goto LABEL_22;
        }
      }
    }
    unsigned int v18 = 0;
    do
    {
      int v19 = *v14;
      if (v32)
      {
        if (v19 != 2) {
          goto LABEL_16;
        }
      }
      else if (v19 != 1)
      {
        goto LABEL_16;
      }
      uint64_t v20 = 0x7FFFFFFF00000000;
      unsigned int v45 = v18;
      sub_ED2990((uint64_t)&v22[1], &v45, (unsigned int *)&v20);
LABEL_16:
      ++v18;
      v14 += 168;
    }
    while (v14 != (unsigned __int8 *)v15);
  }
LABEL_22:
  if (v32) {
    sub_ED0644((uint64_t)v22, (uint64_t)&v21, (uint64_t)&v20, (uint64_t)v31);
  }
  else {
    sub_ED0528((uint64_t)v22, (uint64_t)&v21, (uint64_t)&v20, (uint64_t)v31);
  }
  sub_ED0760(a1, (void *)a5, v32);
  if (__p)
  {
    uint64_t v30 = __p;
    operator delete(__p);
  }
  if (v27)
  {
    int v28 = v27;
    operator delete(v27);
  }
  if (v25)
  {
    uint64_t v26 = v25;
    operator delete(v25);
  }
  if (v23)
  {
    double v24 = v23;
    operator delete(v23);
  }
  sub_328138((uint64_t)&v22[1]);
  if (v43)
  {
    unsigned int v44 = v43;
    operator delete(v43);
  }
  if (v41)
  {
    char v42 = v41;
    operator delete(v41);
  }
  if (v39)
  {
    uint64_t v40 = v39;
    operator delete(v39);
  }
  if (v37)
  {
    unsigned int v38 = v37;
    operator delete(v37);
  }
}

void sub_ED04BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_ECFCF0((uint64_t *)va);
  sub_2FC97C((void *)(v5 - 216));
  _Unwind_Resume(a1);
}

uint64_t sub_ED0528(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_DWORD *)(result + 880))
  {
    uint64_t v5 = result;
    uint64_t v6 = result + 8;
    do
    {
      unint64_t v7 = (unsigned int *)(*(void *)(v5 + 776) + 12 * **(unsigned int **)(v5 + 832));
      uint64_t v8 = *v7;
      uint64_t v14 = *(void *)(v7 + 1);
      sub_ED37DC(v6);
      uint64_t v9 = *(void *)v5;
      sub_EC079C(*(void *)v5, v8);
      int v10 = (unsigned int *)(*(void *)(v9 + 72) + 80 * *(unsigned int *)(*(void *)(v9 + 48) + 4 * v8));
      uint64_t result = sub_EC079C(v9, v8);
      uint64_t v11 = *(void *)(v9 + 72) + 80 * *(unsigned int *)(*(void *)(v9 + 48) + 4 * (v8 + 1));
      while (v10 != (unsigned int *)v11)
      {
        uint64_t result = sub_ED40A4(a4, v8, (int *)&v14, v10);
        if ((result & 1) == 0)
        {
          unsigned int v13 = *v10;
          uint64_t v12 = (HIDWORD(v14) + v14) | 0x7FFFFFFF00000000;
          uint64_t result = sub_ED3CE0(v6, &v13, (unsigned int *)&v12);
        }
        v10 += 20;
      }
    }
    while (*(_DWORD *)(v5 + 880));
  }
  return result;
}

uint64_t sub_ED0644(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_DWORD *)(result + 880))
  {
    uint64_t v5 = result;
    uint64_t v6 = result + 8;
    do
    {
      unint64_t v7 = (unsigned int *)(*(void *)(v5 + 776) + 12 * **(unsigned int **)(v5 + 832));
      uint64_t v8 = *v7;
      uint64_t v14 = *(void *)(v7 + 1);
      sub_ED37DC(v6);
      uint64_t v9 = *(void **)v5;
      sub_EC079C(*(void *)v5, v8);
      int v10 = (unsigned int *)(v9[3] + 80 * *(unsigned int *)(*v9 + 4 * v8));
      uint64_t result = sub_EC079C((uint64_t)v9, v8);
      uint64_t v11 = v9[3] + 80 * *(unsigned int *)(*v9 + 4 * (v8 + 1));
      while (v10 != (unsigned int *)v11)
      {
        uint64_t result = sub_ED40A4(a4, v8, (int *)&v14, v10);
        if ((result & 1) == 0)
        {
          unsigned int v13 = *v10;
          uint64_t v12 = (HIDWORD(v14) + v14) | 0x7FFFFFFF00000000;
          uint64_t result = sub_ED3CE0(v6, &v13, (unsigned int *)&v12);
        }
        v10 += 20;
      }
    }
    while (*(_DWORD *)(v5 + 880));
  }
  return result;
}

void sub_ED0760(uint64_t a1, void *a2, int a3)
{
  uint64_t v3 = a2 + 3;
  uint64_t v4 = a2 + 4;
  if (a3) {
    uint64_t v4 = a2 + 10;
  }
  uint64_t v5 = *v4;
  if (a3) {
    uint64_t v3 = a2 + 9;
  }
  if (*v3 != v5)
  {
    unint64_t v7 = (unint64_t)(((a2[7] - a2[6]) << 30) - 0x100000000) >> 32;
    if (v7)
    {
      uint64_t v8 = 0;
      if (a3)
      {
        do
        {
          sub_EC079C((uint64_t)a2, v8);
          uint64_t v9 = (unsigned int *)(a2[3] + 80 * *(unsigned int *)(*a2 + 4 * v8));
          sub_EC079C((uint64_t)a2, v8);
          uint64_t v10 = v8 + 1;
          uint64_t v11 = a2[3] + 80 * *(unsigned int *)(*a2 + 4 * (v8 + 1));
          while (v9 != (unsigned int *)v11)
          {
            uint64_t v13 = *v9;
            unint64_t v14 = (v13 + 1);
            uint64_t v15 = a2[6];
            if (v14 >= (a2[7] - v15) >> 2)
            {
LABEL_34:
              exception = __cxa_allocate_exception(0x40uLL);
              strcpy((char *)v34, "vertex id out of range");
              BYTE7(v34[1]) = 22;
              int v33 = (void *)sub_2F404((uint64_t)exception, v34);
            }
            uint64_t v16 = a2[9];
            unsigned int v17 = *(_DWORD *)(v15 + 4 * v13);
            uint64_t v12 = (_DWORD *)(v16 + 80 * v17);
            unsigned int v18 = *(_DWORD *)(v15 + 4 * v14);
            if (v17 != v18)
            {
              int v19 = (_DWORD *)(v16 + 80 * v18);
              uint64_t v20 = 80 * v18 - 80 * v17;
              while (*v12 != v8 || sub_488C(v12 + 14))
              {
                v12 += 20;
                v20 -= 80;
                if (!v20)
                {
                  uint64_t v12 = v19;
                  break;
                }
              }
            }
            v12[14] = v9[14];
            v9 += 20;
          }
          ++v8;
        }
        while (v10 != v7);
      }
      else
      {
        do
        {
          sub_EC079C((uint64_t)a2, v8);
          __n128 v21 = (unsigned int *)(a2[9] + 80 * *(unsigned int *)(a2[6] + 4 * v8));
          sub_EC079C((uint64_t)a2, v8);
          uint64_t v22 = v8 + 1;
          uint64_t v23 = a2[9] + 80 * *(unsigned int *)(a2[6] + 4 * (v8 + 1));
          while (v21 != (unsigned int *)v23)
          {
            uint64_t v25 = *v21;
            unint64_t v26 = (v25 + 1);
            if (v26 >= (uint64_t)(a2[7] - a2[6]) >> 2) {
              goto LABEL_34;
            }
            uint64_t v27 = a2[3];
            unsigned int v28 = *(_DWORD *)(*a2 + 4 * v25);
            double v24 = (_DWORD *)(v27 + 80 * v28);
            unsigned int v29 = *(_DWORD *)(*a2 + 4 * v26);
            if (v28 != v29)
            {
              uint64_t v30 = (_DWORD *)(v27 + 80 * v29);
              uint64_t v31 = 80 * v29 - 80 * v28;
              while (*v24 != v8 || sub_488C(v24 + 14))
              {
                v24 += 20;
                v31 -= 80;
                if (!v31)
                {
                  double v24 = v30;
                  break;
                }
              }
            }
            v24[14] = v21[14];
            v21 += 20;
          }
          ++v8;
        }
        while (v22 != v7);
      }
    }
  }
}

void sub_ED09E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_ED0A04(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, int a8, int a9, int a10, int a11, int a12, unsigned int a13)
{
  unsigned int v21 = *(_DWORD *)a3;
  int v70 = sub_35E640();
  if (sub_EB9330(a4, a2))
  {
    uint64_t v22 = (unsigned __int8 *)sub_EB935C(a4, a2);
    int v25 = sub_ECA010(&v70, v22, 0, a6, a7, v23, v24);
    uint64_t v26 = 0x7FFFFFFFLL;
    if (v25 == 0x7FFFFFFF) {
      return v26;
    }
  }
  else
  {
    int v25 = 0;
  }
  unsigned int v27 = *(_DWORD *)(a3 + 60);
  int v28 = *(_DWORD *)(a3 + 64);
  BOOL v29 = v27 == v28;
  uint64_t v30 = *(void *)(a3 + 72);
  if (!v30) {
    BOOL v29 = 0;
  }
  if (v27 != v28 || v29)
  {
    uint64_t v40 = *(void *)(a1 + 16);
    v65[0] = a6;
    v65[1] = v40;
    float64x2_t v60 = a5;
    unsigned int v61 = v27;
    uint64_t v62 = v30;
    BOOL v63 = v29;
    double v56 = a5;
    int v57 = v28;
    uint64_t v58 = 0;
    char v59 = 0;
    unint64_t v41 = sub_35E640();
    if (v25 < 0) {
      char v42 = -5;
    }
    else {
      char v42 = 5;
    }
    v66[0] = (int *)sub_107FEC0((uint64_t)&v60, (uint64_t)&v56, v41, v65, a7, *(unsigned __int8 *)(a1 + 12), v25 / 10+ a8+ (((103 * (char)(v42 + v25 % 10)) >> 15) & 1)+ ((103 * (char)(v42 + v25 % 10)) >> 10), a9, 1000000000 - a11, 0, a13, (uint64_t)v71, **(void ***)(a1 + 16));
    uint64_t v26 = 0x7FFFFFFFLL;
    if (sub_488C(v66) && HIDWORD(v66[0]) != 0x7FFFFFFF)
    {
      uint64_t v43 = (HIDWORD(v66[0]) + v25);
      sub_ECA2C4(&v70, v66);
      if (sub_EB9330(a4, v21))
      {
        unsigned int v44 = (unsigned __int8 *)sub_EB935C(a4, v21);
        int v47 = sub_ECA010(&v70, v44, 1, a6, a7, v45, v46);
        if (v47 == 0x7FFFFFFF) {
          return v26;
        }
        uint64_t v43 = (v47 + v43);
      }
      *(_DWORD *)(a3 + 56) = v70;
      return v43;
    }
  }
  else
  {
    uint64_t v54 = a6;
    unint64_t v31 = sub_EDBFB0(a5, v27);
    unint64_t v32 = HIDWORD(v31);
    unint64_t v33 = HIDWORD(v31) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(v31) << 32);
    unint64_t v34 = (HIDWORD(v31) & 0xFFFE0000FFFFFFFFLL | ((unint64_t)WORD1(v31) << 32) & 0xFFFEFFFFFFFFFFFFLL | (((v31 >> 1) & 1) << 48)) ^ 0x1000000000000;
    uint64_t v35 = *(void *)(a1 + 24);
    int v36 = (int *)sub_2D5D58(v35, v33);
    uint64_t v55 = a7;
    if (*(unsigned char *)(v35 + 7772))
    {
      int v37 = sub_2DB8E0(v35 + 3896, v32, 0);
      unsigned int v38 = &v37[-*(int *)v37];
      if (*(unsigned __int16 *)v38 < 5u)
      {
        uint64_t v39 = 0;
      }
      else
      {
        uint64_t v39 = *((unsigned __int16 *)v38 + 2);
        if (v39) {
          v39 += (uint64_t)&v37[*(unsigned int *)&v37[v39]];
        }
      }
      unsigned int v48 = (int *)(v39 + 4 * WORD2(v34) + 4 + *(unsigned int *)(v39 + 4 * WORD2(v34) + 4));
    }
    else
    {
      unsigned int v48 = 0;
    }
    v66[0] = v36;
    v66[1] = v48;
    v66[2] = (int *)sub_2E5C38(v35, v33, 1);
    v66[3] = v49;
    int v67 = v32;
    __int16 v68 = WORD2(v34);
    char v69 = BYTE6(v34);
    if (v25 < 0) {
      char v50 = -5;
    }
    else {
      char v50 = 5;
    }
    sub_456C((uint64_t)v65, v25 / 10+ a8+ (((103 * (char)(v50 + v25 % 10)) >> 15) & 1)+ ((103 * (char)(v50 + v25 % 10)) >> 10));
    sub_3BDCD8(*(void *)(a1 + 24), v33, v71);
    unint64_t v51 = v72;
    if ((v72 & 0x80u) != 0) {
      unint64_t v51 = (unint64_t)v71[1];
    }
    if (v51) {
      sub_26A18((uint64_t)v64, (const char *)v71);
    }
    else {
      sub_26908((uint64_t)v64);
    }
    if ((char)v72 < 0) {
      operator delete(v71[0]);
    }
    sub_48B4((uint64_t)v65, v64);
    sub_26C4C((const void **)v64);
    int v52 = sub_ECA158(&v70, v66, a13 - a11, v54, v55, *(unsigned __int8 *)(a1 + 12), (unsigned int *)v65);
    uint64_t v26 = 0x7FFFFFFFLL;
    if (v52 != 0x7FFFFFFF)
    {
      uint64_t v26 = (v52 + v25);
      *(_DWORD *)(a3 + 56) = v70;
    }
    sub_4814((uint64_t)v65);
  }
  return v26;
}

void sub_ED0E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_ED0E9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_OWORD *)uint64_t v22 = *(_OWORD *)(a5 + 24);
  *(_OWORD *)uint64_t v35 = *(_OWORD *)(a5 + 72);
  sub_ED432C(v22, v35, (uint64_t)v36);
  sub_ED4F58(v35, *(void *)(a1 + 16));
  int v10 = *(_DWORD *)(a1 + 4);
  int v34 = *(_DWORD *)a1;
  int v33 = 10 * (v34 - v10);
  unsigned __int8 v11 = *(unsigned char *)(a1 + 13);
  if (v11) {
    unsigned __int8 v11 = *(_DWORD *)(a1 + 8) == 1;
  }
  unsigned __int8 v32 = v11;
  v31[0] = a5;
  v31[1] = a1;
  v31[2] = v35;
  double v31[3] = &v32;
  v31[4] = &v34;
  v31[5] = &v33;
  v31[6] = a2;
  v31[7] = a3;
  v31[8] = a4;
  BOOL v12 = sub_EB94C0(a5);
  unsigned int v13 = ((*(void *)(a5 + 56) - *(void *)(a5 + 48)) >> 2) - 1;
  v22[0] = a5;
  sub_ED4798(&v22[1], v13);
  sub_EB9370(a5, &v21);
  unint64_t v15 = v21.n128_u64[1];
  unint64_t v14 = (unsigned __int8 *)v21.n128_u64[0];
  if (v21.n128_u64[0] != v21.n128_u64[1])
  {
    if (v12)
    {
      unsigned int v16 = 0;
      while (1)
      {
        int v17 = *v14;
        if ((v17 - 1) > 1) {
          goto LABEL_22;
        }
        if (v32)
        {
          if (v17 != 2) {
            goto LABEL_7;
          }
        }
        else if (v17 != 1)
        {
          goto LABEL_7;
        }
        uint64_t v20 = 0x7FFFFFFF00000000;
        unsigned int v45 = v16;
        sub_ED2990((uint64_t)&v22[1], &v45, (unsigned int *)&v20);
LABEL_7:
        ++v16;
        v14 += 168;
        if (v14 == (unsigned __int8 *)v15) {
          goto LABEL_22;
        }
      }
    }
    unsigned int v18 = 0;
    do
    {
      int v19 = *v14;
      if (v32)
      {
        if (v19 != 2) {
          goto LABEL_16;
        }
      }
      else if (v19 != 1)
      {
        goto LABEL_16;
      }
      uint64_t v20 = 0x7FFFFFFF00000000;
      unsigned int v45 = v18;
      sub_ED2990((uint64_t)&v22[1], &v45, (unsigned int *)&v20);
LABEL_16:
      ++v18;
      v14 += 168;
    }
    while (v14 != (unsigned __int8 *)v15);
  }
LABEL_22:
  if (v32) {
    sub_ED12EC((uint64_t)v22, (uint64_t)&v21, (uint64_t)&v20, (uint64_t)v31);
  }
  else {
    sub_ED11D0((uint64_t)v22, (uint64_t)&v21, (uint64_t)&v20, (uint64_t)v31);
  }
  sub_ED1408(a1, (void *)a5, v32);
  if (__p)
  {
    uint64_t v30 = __p;
    operator delete(__p);
  }
  if (v27)
  {
    int v28 = v27;
    operator delete(v27);
  }
  if (v25)
  {
    uint64_t v26 = v25;
    operator delete(v25);
  }
  if (v23)
  {
    double v24 = v23;
    operator delete(v23);
  }
  sub_328138((uint64_t)&v22[1]);
  if (v43)
  {
    unsigned int v44 = v43;
    operator delete(v43);
  }
  if (v41)
  {
    char v42 = v41;
    operator delete(v41);
  }
  if (v39)
  {
    uint64_t v40 = v39;
    operator delete(v39);
  }
  if (v37)
  {
    unsigned int v38 = v37;
    operator delete(v37);
  }
}

void sub_ED1164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_ECFCF0((uint64_t *)va);
  sub_2FC97C((void *)(v5 - 216));
  _Unwind_Resume(a1);
}

uint64_t sub_ED11D0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_DWORD *)(result + 880))
  {
    uint64_t v5 = result;
    uint64_t v6 = result + 8;
    do
    {
      unint64_t v7 = (unsigned int *)(*(void *)(v5 + 776) + 12 * **(unsigned int **)(v5 + 832));
      uint64_t v8 = *v7;
      uint64_t v14 = *(void *)(v7 + 1);
      sub_ED37DC(v6);
      uint64_t v9 = *(void *)v5;
      sub_EC30D4(*(void *)v5, v8);
      int v10 = (unsigned int *)(*(void *)(v9 + 72) + 48 * *(unsigned int *)(*(void *)(v9 + 48) + 4 * v8));
      uint64_t result = sub_EC30D4(v9, v8);
      uint64_t v11 = *(void *)(v9 + 72) + 48 * *(unsigned int *)(*(void *)(v9 + 48) + 4 * (v8 + 1));
      while (v10 != (unsigned int *)v11)
      {
        uint64_t result = sub_ED4904(a4, v8, (int *)&v14, (uint64_t)v10);
        if ((result & 1) == 0)
        {
          unsigned int v13 = *v10;
          uint64_t v12 = (HIDWORD(v14) + v14) | 0x7FFFFFFF00000000;
          uint64_t result = sub_ED3CE0(v6, &v13, (unsigned int *)&v12);
        }
        v10 += 12;
      }
    }
    while (*(_DWORD *)(v5 + 880));
  }
  return result;
}

uint64_t sub_ED12EC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_DWORD *)(result + 880))
  {
    uint64_t v5 = result;
    uint64_t v6 = result + 8;
    do
    {
      unint64_t v7 = (unsigned int *)(*(void *)(v5 + 776) + 12 * **(unsigned int **)(v5 + 832));
      uint64_t v8 = *v7;
      uint64_t v14 = *(void *)(v7 + 1);
      sub_ED37DC(v6);
      uint64_t v9 = *(void **)v5;
      sub_EC30D4(*(void *)v5, v8);
      int v10 = (unsigned int *)(v9[3] + 48 * *(unsigned int *)(*v9 + 4 * v8));
      uint64_t result = sub_EC30D4((uint64_t)v9, v8);
      uint64_t v11 = v9[3] + 48 * *(unsigned int *)(*v9 + 4 * (v8 + 1));
      while (v10 != (unsigned int *)v11)
      {
        uint64_t result = sub_ED4904(a4, v8, (int *)&v14, (uint64_t)v10);
        if ((result & 1) == 0)
        {
          unsigned int v13 = *v10;
          uint64_t v12 = (HIDWORD(v14) + v14) | 0x7FFFFFFF00000000;
          uint64_t result = sub_ED3CE0(v6, &v13, (unsigned int *)&v12);
        }
        v10 += 12;
      }
    }
    while (*(_DWORD *)(v5 + 880));
  }
  return result;
}

void sub_ED1408(uint64_t a1, void *a2, int a3)
{
  uint64_t v3 = a2 + 3;
  uint64_t v4 = a2 + 4;
  if (a3) {
    uint64_t v4 = a2 + 10;
  }
  uint64_t v5 = *v4;
  if (a3) {
    uint64_t v3 = a2 + 9;
  }
  if (*v3 != v5)
  {
    unint64_t v7 = (unint64_t)(((a2[7] - a2[6]) << 30) - 0x100000000) >> 32;
    if (v7)
    {
      uint64_t v8 = 0;
      if (a3)
      {
        do
        {
          sub_EC30D4((uint64_t)a2, v8);
          uint64_t v9 = (unsigned int *)(a2[3] + 48 * *(unsigned int *)(*a2 + 4 * v8));
          sub_EC30D4((uint64_t)a2, v8);
          uint64_t v10 = v8 + 1;
          uint64_t v11 = a2[3] + 48 * *(unsigned int *)(*a2 + 4 * (v8 + 1));
          while (v9 != (unsigned int *)v11)
          {
            uint64_t v14 = *v9;
            unint64_t v15 = (v14 + 1);
            uint64_t v16 = a2[6];
            if (v15 >= (a2[7] - v16) >> 2)
            {
LABEL_34:
              exception = __cxa_allocate_exception(0x40uLL);
              strcpy((char *)v36, "vertex id out of range");
              BYTE7(v36[1]) = 22;
              uint64_t v35 = (void *)sub_2F404((uint64_t)exception, v36);
            }
            uint64_t v17 = a2[9];
            unsigned int v18 = *(_DWORD *)(v16 + 4 * v14);
            uint64_t v12 = (_DWORD *)(v17 + 48 * v18);
            unsigned int v19 = *(_DWORD *)(v16 + 4 * v15);
            if (v18 != v19)
            {
              uint64_t v20 = (_DWORD *)(v17 + 48 * v19);
              uint64_t v21 = 48 * v19 - 48 * v18;
              while (*v12 != v8 || sub_ECF004(v12 + 2))
              {
                v12 += 12;
                v21 -= 48;
                if (!v21)
                {
                  uint64_t v12 = v20;
                  break;
                }
              }
            }
            long long v13 = *(_OWORD *)(v9 + 2);
            v12[6] = v9[6];
            *(_OWORD *)(v12 + 2) = v13;
            v9 += 12;
          }
          ++v8;
        }
        while (v10 != v7);
      }
      else
      {
        do
        {
          sub_EC30D4((uint64_t)a2, v8);
          uint64_t v22 = (unsigned int *)(a2[9] + 48 * *(unsigned int *)(a2[6] + 4 * v8));
          sub_EC30D4((uint64_t)a2, v8);
          uint64_t v23 = v8 + 1;
          uint64_t v24 = a2[9] + 48 * *(unsigned int *)(a2[6] + 4 * (v8 + 1));
          while (v22 != (unsigned int *)v24)
          {
            uint64_t v27 = *v22;
            unint64_t v28 = (v27 + 1);
            if (v28 >= (uint64_t)(a2[7] - a2[6]) >> 2) {
              goto LABEL_34;
            }
            uint64_t v29 = a2[3];
            unsigned int v30 = *(_DWORD *)(*a2 + 4 * v27);
            int v25 = (_DWORD *)(v29 + 48 * v30);
            unsigned int v31 = *(_DWORD *)(*a2 + 4 * v28);
            if (v30 != v31)
            {
              unsigned __int8 v32 = (_DWORD *)(v29 + 48 * v31);
              uint64_t v33 = 48 * v31 - 48 * v30;
              while (*v25 != v8 || sub_ECF004(v25 + 2))
              {
                v25 += 12;
                v33 -= 48;
                if (!v33)
                {
                  int v25 = v32;
                  break;
                }
              }
            }
            long long v26 = *(_OWORD *)(v22 + 2);
            v25[6] = v22[6];
            *(_OWORD *)(v25 + 2) = v26;
            v22 += 12;
          }
          ++v8;
        }
        while (v23 != v7);
      }
    }
  }
}

void sub_ED16A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_ED16BC(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, int a8, int a9, int a10, int a11, int a12, unsigned int a13)
{
  unsigned int v21 = *(_DWORD *)a3;
  sub_ECF030(*(void *)(a1 + 16), (uint64_t)&v76);
  if (sub_EB9330(a4, a2))
  {
    uint64_t v22 = (unsigned __int8 *)sub_EB935C(a4, a2);
    int v25 = sub_ECF08C((uint64_t)&v76, v22, 0, a6, a7, v23, v24);
    uint64_t v26 = 0x7FFFFFFFLL;
    if (v25 == 0x7FFFFFFF) {
      return v26;
    }
  }
  else
  {
    int v25 = 0;
  }
  unsigned int v27 = *(_DWORD *)(a3 + 28);
  int v28 = *(_DWORD *)(a3 + 32);
  BOOL v29 = v27 == v28;
  uint64_t v30 = *(void *)(a3 + 40);
  if (!v30) {
    BOOL v29 = 0;
  }
  if (v27 != v28 || v29)
  {
    uint64_t v40 = *(void *)(a1 + 16);
    uint64_t v69 = a6;
    uint64_t v70 = v40;
    uint64_t v62 = a5;
    unsigned int v63 = v27;
    uint64_t v64 = v30;
    BOOL v65 = v29;
    uint64_t v58 = a5;
    int v59 = v28;
    uint64_t v60 = 0;
    char v61 = 0;
    sub_ECF030(v40, (uint64_t)&v56);
    int v57 = 0;
    int v41 = *(unsigned __int8 *)(a1 + 12);
    if (v25 < 0) {
      char v42 = -5;
    }
    else {
      char v42 = 5;
    }
    uint64_t v26 = 0x7FFFFFFFLL;
    LODWORD(v78) = 0x7FFFFFFF;
    *(void *)((char *)&v78 + 4) = 0x7FFFFFFF7FFFFFFFLL;
    sub_10804B8((uint64_t)&v62, (uint64_t)&v58, &v56, (uint64_t)&v69, a7, v41, v25 / 10+ a8+ (((103 * (char)(v42 + v25 % 10)) >> 15) & 1)+ ((103 * (char)(v42 + v25 % 10)) >> 10), a9, &v67, 1000000000 - a11, 0, a13, (uint64_t)&v78, **(void ***)(a1 + 16));
    if (sub_ECF004(&v67) && v68 != 0x7FFFFFFF)
    {
      uint64_t v43 = (v68 + v25);
      sub_ECF3F4((int32x2_t *)&v76, (int32x2_t *)&v67);
      if (sub_EB9330(a4, v21))
      {
        unsigned int v44 = (unsigned __int8 *)sub_EB935C(a4, v21);
        int v47 = sub_ECF08C((uint64_t)&v76, v44, 1, a6, a7, v45, v46);
        if (v47 == 0x7FFFFFFF) {
          return v26;
        }
        uint64_t v43 = (v47 + v43);
      }
      *(_OWORD *)(a3 + 8) = v76;
      *(_DWORD *)(a3 + 24) = v77;
      return v43;
    }
  }
  else
  {
    uint64_t v54 = (uint64_t *)a6;
    unint64_t v31 = sub_EDBFB0(a5, v27);
    unint64_t v32 = HIDWORD(v31);
    unint64_t v33 = HIDWORD(v31) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(v31) << 32);
    unint64_t v34 = (HIDWORD(v31) & 0xFFFE0000FFFFFFFFLL | ((unint64_t)WORD1(v31) << 32) & 0xFFFEFFFFFFFFFFFFLL | (((v31 >> 1) & 1) << 48)) ^ 0x1000000000000;
    uint64_t v35 = *(void *)(a1 + 24);
    uint64_t v36 = sub_2D5D58(v35, v33);
    uint64_t v55 = a7;
    if (*(unsigned char *)(v35 + 7772))
    {
      int v37 = sub_2DB8E0(v35 + 3896, v32, 0);
      unsigned int v38 = &v37[-*(int *)v37];
      if (*(unsigned __int16 *)v38 < 5u)
      {
        uint64_t v39 = 0;
      }
      else
      {
        uint64_t v39 = *((unsigned __int16 *)v38 + 2);
        if (v39) {
          v39 += (uint64_t)&v37[*(unsigned int *)&v37[v39]];
        }
      }
      uint64_t v48 = v39 + 4 * WORD2(v34) + 4 + *(unsigned int *)(v39 + 4 * WORD2(v34) + 4);
    }
    else
    {
      uint64_t v48 = 0;
    }
    uint64_t v69 = v36;
    uint64_t v70 = v48;
    uint64_t v71 = sub_2E5C38(v35, v33, 1);
    uint64_t v72 = v49;
    int v73 = v32;
    __int16 v74 = WORD2(v34);
    char v75 = BYTE6(v34);
    if (v25 < 0) {
      char v50 = -5;
    }
    else {
      char v50 = 5;
    }
    sub_456C((uint64_t)&v67, v25 / 10+ a8+ (((103 * (char)(v50 + v25 % 10)) >> 15) & 1)+ ((103 * (char)(v50 + v25 % 10)) >> 10));
    sub_3BDCD8(*(void *)(a1 + 24), v33, &v78);
    uint64_t v51 = v79;
    if ((v79 & 0x80u) != 0) {
      uint64_t v51 = *((void *)&v78 + 1);
    }
    if (v51) {
      sub_26A18((uint64_t)v66, (const char *)&v78);
    }
    else {
      sub_26908((uint64_t)v66);
    }
    if ((char)v79 < 0) {
      operator delete((void *)v78);
    }
    sub_48B4((uint64_t)&v67, v66);
    sub_26C4C((const void **)v66);
    int v52 = sub_ECF1CC(&v76, (uint64_t)&v69, a13 - a11, v54, v55, *(unsigned __int8 *)(a1 + 12), (unsigned int *)&v67, a9, *(void *)(a1 + 16));
    uint64_t v26 = 0x7FFFFFFFLL;
    if (v52 != 0x7FFFFFFF)
    {
      uint64_t v26 = (v52 + v25);
      *(_OWORD *)(a3 + 8) = v76;
      *(_DWORD *)(a3 + 24) = v77;
    }
    sub_4814((uint64_t)&v67);
  }
  return v26;
}

void sub_ED1B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_ED1B8C(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v7 = *a2;
  uint64_t v8 = operator new(0x10uLL);
  uint64_t v26 = v8 + 2;
  unsigned int v27 = v8 + 2;
  *uint64_t v8 = v6;
  v8[1] = v7;
  int v25 = v8;
  uint64_t v9 = a1[1];
  uint64_t v10 = a2[1];
  uint64_t v11 = operator new(0x10uLL);
  double v23 = v11 + 2;
  double v24 = v11 + 2;
  void *v11 = v9;
  v11[1] = v10;
  uint64_t v22 = v11;
  sub_ED1E20((uint64_t)&v17, (uint64_t)&v25, (uint64_t)&v22, 0);
  sub_ED1E20((uint64_t)&v12, (uint64_t)&v25, (uint64_t)&v22, 1);
  sub_ED1D0C(a3, &v17);
  sub_ED1D0C(a3 + 64, &v12);
  if (__p)
  {
    uint64_t v16 = __p;
    operator delete(__p);
  }
  if (v13)
  {
    uint64_t v14 = v13;
    operator delete(v13);
  }
  if (v20)
  {
    unsigned int v21 = v20;
    operator delete(v20);
  }
  if (v18)
  {
    unsigned int v19 = v18;
    operator delete(v18);
  }
  if (v22)
  {
    double v23 = v22;
    operator delete(v22);
  }
  if (v25)
  {
    uint64_t v26 = v25;
    operator delete(v25);
  }
}

void sub_ED1CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_2FC938((uint64_t *)va);
  uint64_t v11 = *(void **)(v9 - 96);
  if (v11)
  {
    *(void *)(v9 - 88) = v11;
    operator delete(v11);
    long long v12 = *(void **)(v9 - 72);
    if (!v12) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    long long v12 = *(void **)(v9 - 72);
    if (!v12) {
      goto LABEL_3;
    }
  }
  *(void *)(v9 - 64) = v12;
  operator delete(v12);
  _Unwind_Resume(a1);
}

uint64_t sub_ED1D0C(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = (unsigned char *)*((void *)a2 + 2);
  uint64_t v5 = (unsigned char *)*((void *)a2 + 3);
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      sub_2E00();
    }
    uint64_t v8 = (char *)operator new(v5 - v6);
    *(void *)(a1 + 16) = v8;
    *(void *)(a1 + 24) = v8;
    uint64_t v9 = &v8[8 * (v7 >> 3)];
    *(void *)(a1 + 32) = v9;
    memcpy(v8, v6, v7);
    *(void *)(a1 + 24) = v9;
  }
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  uint64_t v11 = (unsigned char *)*((void *)a2 + 5);
  uint64_t v10 = (unsigned char *)*((void *)a2 + 6);
  int64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0) {
      sub_2E00();
    }
    long long v13 = (char *)operator new(v10 - v11);
    *(void *)(a1 + 40) = v13;
    *(void *)(a1 + 48) = v13;
    uint64_t v14 = &v13[8 * (v12 >> 3)];
    *(void *)(a1 + 56) = v14;
    memcpy(v13, v11, v12);
    *(void *)(a1 + 48) = v14;
  }
  return a1;
}

void sub_ED1DEC(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 48) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_ED1E20(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  uint64_t v8 = *(const void **)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  int64_t v9 = v7 - *(void *)a2;
  if (v7 == *(void *)a2)
  {
    uint64_t v11 = 0;
    uint64_t v10 = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    long long v13 = *(const void **)a3;
    uint64_t v17 = *(void *)(a3 + 8);
    int64_t v14 = v17 - *(void *)a3;
    if (v17 != *(void *)a3) {
      goto LABEL_4;
    }
  }
  else
  {
    if (v9 < 0) {
      sub_2E00();
    }
    uint64_t v10 = (char *)operator new(v7 - *(void *)a2);
    *(void *)(a1 + 16) = v10;
    *(void *)(a1 + 24) = v10;
    uint64_t v11 = &v10[8 * (v9 >> 3)];
    *(void *)(a1 + 32) = v11;
    memcpy(v10, v8, v9);
    *(void *)(a1 + 24) = v11;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    long long v13 = *(const void **)a3;
    uint64_t v12 = *(void *)(a3 + 8);
    int64_t v14 = v12 - *(void *)a3;
    if (v12 != *(void *)a3)
    {
LABEL_4:
      if (v14 < 0) {
        sub_2E00();
      }
      unint64_t v15 = (char *)operator new(v14);
      *(void *)(a1 + 40) = v15;
      *(void *)(a1 + 48) = v15;
      uint64_t v16 = &v15[8 * (v14 >> 3)];
      *(void *)(a1 + 56) = v16;
      memcpy(v15, v13, v14);
      *(void *)(a1 + 48) = v16;
      if (v10 == v11) {
        return a1;
      }
      goto LABEL_9;
    }
  }
  uint64_t v16 = 0;
  unint64_t v15 = 0;
  if (v10 == v11) {
    return a1;
  }
LABEL_9:
  if (a4)
  {
    uint64_t v18 = ((v16 - v15) >> 3) - 1;
    *(void *)(a1 + 8) = v18;
    unsigned int v19 = &v15[8 * v18];
  }
  else
  {
    uint64_t v20 = (v11 - v10) >> 3;
    uint64_t v21 = v20 - 1;
    if (v20 == 1)
    {
      uint64_t v22 = 0;
    }
    else
    {
      uint64_t v22 = 0;
      while (*(void *)&v10[8 * v22] == *(void *)&v15[8 * v22])
      {
        *(void *)(a1 + 8) = ++v22;
        if (v21 == v22)
        {
          uint64_t v22 = v21;
          break;
        }
      }
    }
    unsigned int v19 = &v10[8 * v22];
  }
  *(void *)a1 = *(void *)v19;
  return a1;
}

void sub_ED1FC4(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 48) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void *sub_ED1FF8(void *a1, unsigned int a2)
{
  uint64_t v4 = a2;
  v13[0] = a2;
  v13[1] = (unint64_t)&v12;
  v13[2] = (unint64_t)&v11;
  v13[3] = (unint64_t)&v10;
  uint64_t v5 = sub_ED2164(a1, v13);
  *((_DWORD *)v5 + 218) = 0;
  *(_OWORD *)(v5 + 105) = 0u;
  *(_OWORD *)(v5 + 107) = 0u;
  *(_OWORD *)(v5 + 103) = 0u;
  *((_OWORD *)v5 + 48) = 0u;
  *((_OWORD *)v5 + 49) = 0u;
  *((_OWORD *)v5 + 50) = 0u;
  *((_DWORD *)v5 + 204) = 0;
  if (a2)
  {
    uint64_t v6 = (char *)operator new(4 * v4);
    a1[106] = v6;
    a1[107] = v6;
    a1[108] = &v6[4 * v4];
  }
  uint64_t v7 = (char *)operator new(0x3F8uLL);
  a1[103] = v7;
  a1[104] = v7;
  a1[105] = v7 + 1016;
  if (a2)
  {
    uint64_t v8 = (char *)operator new(12 * v4);
    a1[96] = v8;
    a1[97] = v8;
    a1[98] = &v8[12 * v4];
  }
  return a1;
}

void sub_ED20DC(_Unwind_Exception *a1)
{
  sub_3310C(v2);
  uint64_t v4 = (void **)(v1 + 96);
  uint64_t v5 = (void *)v1[99];
  if (v5)
  {
    v1[100] = v5;
    operator delete(v5);
    uint64_t v6 = *v4;
    if (!*v4)
    {
LABEL_3:
      sub_328138((uint64_t)v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v6 = *v4;
    if (!*v4) {
      goto LABEL_3;
    }
  }
  v1[97] = v6;
  operator delete(v6);
  sub_328138((uint64_t)v1);
  _Unwind_Resume(a1);
}

void *sub_ED2164(void *a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  a1[5] = 0;
  *a1 = &unk_20E1710;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  if (v4)
  {
    unint64_t v5 = __clz(v4);
    unint64_t v6 = 0xFFFFFFFFFFFFFFFFLL >> v5;
    if (v5 == 61) {
      unint64_t v7 = 6;
    }
    else {
      unint64_t v7 = (0xFFFFFFFFFFFFFFFFLL >> v5) - (0x1FFFFFFFFFFFFFFFuLL >> v5);
    }
    a1[5] = v7;
    unint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFFCLL) + 12;
    int64_t v9 = (char *)operator new(v8 + 8 * v6);
    *a1 = v9;
    a1[1] = &v9[v8];
    memset(v9, 128, v6 + 8);
    v9[v6] = -1;
    a1[5] = v7;
    a1[3] = v6;
  }
  a1[6] = &unk_20E1710;
  unint64_t v10 = *a2;
  a1[11] = 0;
  a1[8] = 0;
  a1[9] = 0;
  a1[7] = 0;
  if (v10)
  {
    unint64_t v11 = __clz(v10);
    unint64_t v12 = 0xFFFFFFFFFFFFFFFFLL >> v11;
    if (v11 == 61) {
      unint64_t v13 = 6;
    }
    else {
      unint64_t v13 = (0xFFFFFFFFFFFFFFFFLL >> v11) - (0x1FFFFFFFFFFFFFFFuLL >> v11);
    }
    a1[11] = v13;
    unint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFFCLL) + 12;
    unint64_t v15 = (char *)operator new(v14 + 8 * v12);
    a1[6] = v15;
    a1[7] = &v15[v14];
    memset(v15, 128, v12 + 8);
    v15[v12] = -1;
    a1[11] = v13;
    a1[9] = v12;
  }
  a1[12] = &unk_20E1710;
  unint64_t v16 = *a2;
  a1[17] = 0;
  a1[14] = 0;
  a1[15] = 0;
  a1[13] = 0;
  if (v16)
  {
    unint64_t v17 = __clz(v16);
    unint64_t v18 = 0xFFFFFFFFFFFFFFFFLL >> v17;
    if (v17 == 61) {
      unint64_t v19 = 6;
    }
    else {
      unint64_t v19 = (0xFFFFFFFFFFFFFFFFLL >> v17) - (0x1FFFFFFFFFFFFFFFuLL >> v17);
    }
    a1[17] = v19;
    unint64_t v20 = (v18 & 0xFFFFFFFFFFFFFFFCLL) + 12;
    uint64_t v21 = (char *)operator new(v20 + 8 * v18);
    a1[12] = v21;
    a1[13] = &v21[v20];
    memset(v21, 128, v18 + 8);
    v21[v18] = -1;
    a1[17] = v19;
    a1[15] = v18;
  }
  a1[18] = &unk_20E1710;
  unint64_t v22 = *a2;
  a1[23] = 0;
  a1[20] = 0;
  a1[21] = 0;
  a1[19] = 0;
  if (v22)
  {
    unint64_t v23 = __clz(v22);
    unint64_t v24 = 0xFFFFFFFFFFFFFFFFLL >> v23;
    if (v23 == 61) {
      unint64_t v25 = 6;
    }
    else {
      unint64_t v25 = (0xFFFFFFFFFFFFFFFFLL >> v23) - (0x1FFFFFFFFFFFFFFFuLL >> v23);
    }
    a1[23] = v25;
    unint64_t v26 = (v24 & 0xFFFFFFFFFFFFFFFCLL) + 12;
    unsigned int v27 = (char *)operator new(v26 + 8 * v24);
    a1[18] = v27;
    a1[19] = &v27[v26];
    memset(v27, 128, v24 + 8);
    v27[v24] = -1;
    a1[23] = v25;
    a1[21] = v24;
  }
  a1[24] = &unk_20E1710;
  unint64_t v28 = *a2;
  a1[29] = 0;
  a1[26] = 0;
  a1[27] = 0;
  a1[25] = 0;
  if (v28)
  {
    unint64_t v29 = __clz(v28);
    unint64_t v30 = 0xFFFFFFFFFFFFFFFFLL >> v29;
    if (v29 == 61) {
      unint64_t v31 = 6;
    }
    else {
      unint64_t v31 = (0xFFFFFFFFFFFFFFFFLL >> v29) - (0x1FFFFFFFFFFFFFFFuLL >> v29);
    }
    a1[29] = v31;
    unint64_t v32 = (v30 & 0xFFFFFFFFFFFFFFFCLL) + 12;
    unint64_t v33 = (char *)operator new(v32 + 8 * v30);
    a1[24] = v33;
    a1[25] = &v33[v32];
    memset(v33, 128, v30 + 8);
    v33[v30] = -1;
    a1[29] = v31;
    a1[27] = v30;
  }
  a1[30] = &unk_20E1710;
  unint64_t v34 = *a2;
  a1[35] = 0;
  a1[32] = 0;
  a1[33] = 0;
  a1[31] = 0;
  if (v34)
  {
    unint64_t v35 = __clz(v34);
    unint64_t v36 = 0xFFFFFFFFFFFFFFFFLL >> v35;
    if (v35 == 61) {
      unint64_t v37 = 6;
    }
    else {
      unint64_t v37 = (0xFFFFFFFFFFFFFFFFLL >> v35) - (0x1FFFFFFFFFFFFFFFuLL >> v35);
    }
    a1[35] = v37;
    unint64_t v38 = (v36 & 0xFFFFFFFFFFFFFFFCLL) + 12;
    uint64_t v39 = (char *)operator new(v38 + 8 * v36);
    a1[30] = v39;
    a1[31] = &v39[v38];
    memset(v39, 128, v36 + 8);
    v39[v36] = -1;
    a1[35] = v37;
    a1[33] = v36;
  }
  unint64_t v40 = *a2;
  a1[41] = 0;
  a1[36] = &unk_20E1710;
  a1[37] = 0;
  a1[38] = 0;
  a1[39] = 0;
  if (v40)
  {
    unint64_t v41 = __clz(v40);
    unint64_t v42 = 0xFFFFFFFFFFFFFFFFLL >> v41;
    if (v41 == 61) {
      unint64_t v43 = 6;
    }
    else {
      unint64_t v43 = (0xFFFFFFFFFFFFFFFFLL >> v41) - (0x1FFFFFFFFFFFFFFFuLL >> v41);
    }
    a1[41] = v43;
    unint64_t v44 = (v42 & 0xFFFFFFFFFFFFFFFCLL) + 12;
    double v45 = (char *)operator new(v44 + 8 * v42);
    a1[36] = v45;
    a1[37] = &v45[v44];
    memset(v45, 128, v42 + 8);
    v45[v42] = -1;
    a1[41] = v43;
    a1[39] = v42;
  }
  unint64_t v46 = *a2;
  a1[47] = 0;
  a1[42] = &unk_20E1710;
  a1[43] = 0;
  a1[44] = 0;
  a1[45] = 0;
  if (v46)
  {
    unint64_t v47 = __clz(v46);
    unint64_t v48 = 0xFFFFFFFFFFFFFFFFLL >> v47;
    if (v47 == 61) {
      unint64_t v49 = 6;
    }
    else {
      unint64_t v49 = (0xFFFFFFFFFFFFFFFFLL >> v47) - (0x1FFFFFFFFFFFFFFFuLL >> v47);
    }
    a1[47] = v49;
    unint64_t v50 = (v48 & 0xFFFFFFFFFFFFFFFCLL) + 12;
    uint64_t v51 = (char *)operator new(v50 + 8 * v48);
    a1[42] = v51;
    a1[43] = &v51[v50];
    memset(v51, 128, v48 + 8);
    v51[v48] = -1;
    a1[47] = v49;
    a1[45] = v48;
  }
  unint64_t v52 = *a2;
  a1[53] = 0;
  a1[48] = &unk_20E1710;
  a1[49] = 0;
  a1[50] = 0;
  a1[51] = 0;
  if (v52)
  {
    unint64_t v53 = __clz(v52);
    unint64_t v54 = 0xFFFFFFFFFFFFFFFFLL >> v53;
    if (v53 == 61) {
      unint64_t v55 = 6;
    }
    else {
      unint64_t v55 = (0xFFFFFFFFFFFFFFFFLL >> v53) - (0x1FFFFFFFFFFFFFFFuLL >> v53);
    }
    a1[53] = v55;
    unint64_t v56 = (v54 & 0xFFFFFFFFFFFFFFFCLL) + 12;
    int v57 = (char *)operator new(v56 + 8 * v54);
    a1[48] = v57;
    a1[49] = &v57[v56];
    memset(v57, 128, v54 + 8);
    v57[v54] = -1;
    a1[53] = v55;
    a1[51] = v54;
  }
  unint64_t v58 = *a2;
  a1[59] = 0;
  a1[54] = &unk_20E1710;
  a1[55] = 0;
  a1[56] = 0;
  a1[57] = 0;
  if (v58)
  {
    unint64_t v59 = __clz(v58);
    unint64_t v60 = 0xFFFFFFFFFFFFFFFFLL >> v59;
    if (v59 == 61) {
      unint64_t v61 = 6;
    }
    else {
      unint64_t v61 = (0xFFFFFFFFFFFFFFFFLL >> v59) - (0x1FFFFFFFFFFFFFFFuLL >> v59);
    }
    a1[59] = v61;
    unint64_t v62 = (v60 & 0xFFFFFFFFFFFFFFFCLL) + 12;
    unsigned int v63 = (char *)operator new(v62 + 8 * v60);
    a1[54] = v63;
    a1[55] = &v63[v62];
    memset(v63, 128, v60 + 8);
    v63[v60] = -1;
    a1[59] = v61;
    a1[57] = v60;
  }
  unint64_t v64 = *a2;
  a1[65] = 0;
  a1[60] = &unk_20E1710;
  a1[61] = 0;
  a1[62] = 0;
  a1[63] = 0;
  if (v64)
  {
    unint64_t v65 = __clz(v64);
    unint64_t v66 = 0xFFFFFFFFFFFFFFFFLL >> v65;
    if (v65 == 61) {
      unint64_t v67 = 6;
    }
    else {
      unint64_t v67 = (0xFFFFFFFFFFFFFFFFLL >> v65) - (0x1FFFFFFFFFFFFFFFuLL >> v65);
    }
    a1[65] = v67;
    unint64_t v68 = (v66 & 0xFFFFFFFFFFFFFFFCLL) + 12;
    uint64_t v69 = (char *)operator new(v68 + 8 * v66);
    a1[60] = v69;
    a1[61] = &v69[v68];
    memset(v69, 128, v66 + 8);
    v69[v66] = -1;
    a1[65] = v67;
    a1[63] = v66;
  }
  unint64_t v70 = *a2;
  a1[66] = &unk_20E1710;
  a1[71] = 0;
  a1[67] = 0;
  a1[69] = 0;
  a1[68] = 0;
  if (v70)
  {
    unint64_t v71 = __clz(v70);
    unint64_t v72 = 0xFFFFFFFFFFFFFFFFLL >> v71;
    if (v71 == 61) {
      unint64_t v73 = 6;
    }
    else {
      unint64_t v73 = (0xFFFFFFFFFFFFFFFFLL >> v71) - (0x1FFFFFFFFFFFFFFFuLL >> v71);
    }
    a1[71] = v73;
    unint64_t v74 = (v72 & 0xFFFFFFFFFFFFFFFCLL) + 12;
    char v75 = (char *)operator new(v74 + 8 * v72);
    a1[66] = v75;
    a1[67] = &v75[v74];
    memset(v75, 128, v72 + 8);
    v75[v72] = -1;
    a1[71] = v73;
    a1[69] = v72;
  }
  unint64_t v76 = *a2;
  a1[72] = &unk_20E1710;
  a1[77] = 0;
  a1[73] = 0;
  a1[75] = 0;
  a1[74] = 0;
  if (v76)
  {
    unint64_t v77 = __clz(v76);
    unint64_t v78 = 0xFFFFFFFFFFFFFFFFLL >> v77;
    if (v77 == 61) {
      unint64_t v79 = 6;
    }
    else {
      unint64_t v79 = (0xFFFFFFFFFFFFFFFFLL >> v77) - (0x1FFFFFFFFFFFFFFFuLL >> v77);
    }
    a1[77] = v79;
    unint64_t v80 = (v78 & 0xFFFFFFFFFFFFFFFCLL) + 12;
    int v81 = (char *)operator new(v80 + 8 * v78);
    a1[72] = v81;
    a1[73] = &v81[v80];
    memset(v81, 128, v78 + 8);
    v81[v78] = -1;
    a1[77] = v79;
    a1[75] = v78;
  }
  unint64_t v82 = *a2;
  a1[78] = &unk_20E1710;
  a1[83] = 0;
  a1[79] = 0;
  a1[81] = 0;
  a1[80] = 0;
  if (v82)
  {
    unint64_t v83 = __clz(v82);
    unint64_t v84 = 0xFFFFFFFFFFFFFFFFLL >> v83;
    if (v83 == 61) {
      unint64_t v85 = 6;
    }
    else {
      unint64_t v85 = (0xFFFFFFFFFFFFFFFFLL >> v83) - (0x1FFFFFFFFFFFFFFFuLL >> v83);
    }
    a1[83] = v85;
    unint64_t v86 = (v84 & 0xFFFFFFFFFFFFFFFCLL) + 12;
    long long v87 = (char *)operator new(v86 + 8 * v84);
    a1[78] = v87;
    a1[79] = &v87[v86];
    memset(v87, 128, v84 + 8);
    v87[v84] = -1;
    a1[83] = v85;
    a1[81] = v84;
  }
  unint64_t v88 = *a2;
  a1[84] = &unk_20E1710;
  a1[89] = 0;
  a1[85] = 0;
  a1[87] = 0;
  a1[86] = 0;
  if (v88)
  {
    unint64_t v89 = __clz(v88);
    unint64_t v90 = 0xFFFFFFFFFFFFFFFFLL >> v89;
    if (v89 == 61) {
      unint64_t v91 = 6;
    }
    else {
      unint64_t v91 = (0xFFFFFFFFFFFFFFFFLL >> v89) - (0x1FFFFFFFFFFFFFFFuLL >> v89);
    }
    a1[89] = v91;
    unint64_t v92 = (v90 & 0xFFFFFFFFFFFFFFFCLL) + 12;
    unsigned int v93 = (char *)operator new(v92 + 8 * v90);
    a1[84] = v93;
    a1[85] = &v93[v92];
    memset(v93, 128, v90 + 8);
    v93[v90] = -1;
    a1[89] = v91;
    a1[87] = v90;
  }
  unint64_t v94 = *a2;
  a1[90] = &unk_20E1710;
  a1[95] = 0;
  a1[91] = 0;
  a1[93] = 0;
  a1[92] = 0;
  if (v94)
  {
    unint64_t v95 = __clz(v94);
    unint64_t v96 = 0xFFFFFFFFFFFFFFFFLL >> v95;
    if (v95 == 61) {
      unint64_t v97 = 6;
    }
    else {
      unint64_t v97 = (0xFFFFFFFFFFFFFFFFLL >> v95) - (0x1FFFFFFFFFFFFFFFuLL >> v95);
    }
    a1[95] = v97;
    unint64_t v98 = (v96 & 0xFFFFFFFFFFFFFFFCLL) + 12;
    double v99 = (char *)operator new(v98 + 8 * v96);
    a1[90] = v99;
    a1[91] = &v99[v98];
    memset(v99, 128, v96 + 8);
    v99[v96] = -1;
    a1[95] = v97;
    a1[93] = v96;
  }
  return a1;
}

void sub_ED2978(_Unwind_Exception *a1)
{
  sub_20B14B4(v2, v1);
  _Unwind_Resume(a1);
}

void sub_ED2990(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v6 = 0;
  ++*(_DWORD *)(a1 + 816);
  uint64_t v7 = *a2;
  unint64_t v8 = 265 * ((~v7 + (v7 << 21)) ^ ((unint64_t)(~v7 + (v7 << 21)) >> 24));
  unint64_t v9 = 2147483649u * ((21 * (v8 ^ (v8 >> 14))) ^ ((21 * (v8 ^ (v8 >> 14))) >> 28));
  unint64_t v10 = (void *)(a1 + 48 * (((BYTE1(v9) ^ BYTE2(v9)) ^ BYTE3(v9)) & 0xF));
  unint64_t v11 = v9 >> 7;
  uint64_t v12 = v10[3];
  uint64_t v13 = 0x101010101010101 * (v9 & 0x7F);
  while (1)
  {
    unint64_t v14 = v11 & v12;
    uint64_t v15 = *(void *)(*v10 + v14);
    unint64_t v16 = ((v15 ^ v13) - 0x101010101010101) & ~(v15 ^ v13) & 0x8080808080808080;
    if (v16) {
      break;
    }
LABEL_6:
    if ((v15 & (~v15 << 6) & 0x8080808080808080) != 0) {
      goto LABEL_9;
    }
    v6 += 8;
    unint64_t v11 = v6 + v14;
  }
  uint64_t v17 = v10[1];
  while (1)
  {
    unint64_t v18 = (v14 + (__clz(__rbit64(v16)) >> 3)) & v12;
    if (*(_DWORD *)(v17 + 8 * v18) == v7) {
      break;
    }
    v16 &= v16 - 1;
    if (!v16) {
      goto LABEL_6;
    }
  }
  if (v12 == v18)
  {
LABEL_9:
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 776) - *(void *)(a1 + 768)) >> 2);
    sub_ED2D48(a1, a2, (uint64_t)&v28);
    uint64_t v20 = v29;
    uint64_t v21 = *(void *)(v28 + 8);
    if (v30) {
      *(_DWORD *)(v21 + 8 * v29) = *a2;
    }
    *(_DWORD *)(v21 + 8 * v20 + 4) = v19;
    sub_ED2C10(a1 + 768, a2, a3);
    unint64_t v22 = (uint64_t *)(a1 + 824);
    uint64_t v23 = *(void *)(a1 + 848);
    if (v19 >= (unint64_t)((*(void *)(a1 + 856) - v23) >> 2)
      || *(_DWORD *)(v23 + 4 * v19) == -1)
    {
      sub_ED33A0((uint64_t)v22, v19, a3);
    }
    else
    {
      sub_ED3660(v22, v19, a3);
    }
    return;
  }
  uint64_t v24 = v17 + 8 * v18;
  *(void *)(*(void *)(a1 + 768) + 12 * *(unsigned int *)(v24 + 4) + 4) = *(void *)a3;
  unint64_t v25 = (uint64_t *)(a1 + 824);
  unint64_t v26 = *(unsigned int *)(v24 + 4);
  uint64_t v27 = *(void *)(a1 + 848);
  if (v26 >= (*(void *)(a1 + 856) - v27) >> 2 || *(_DWORD *)(v27 + 4 * v26) == -1)
  {
    sub_ED33A0((uint64_t)v25, v26, a3);
  }
  else
  {
    sub_ED3660(v25, v26, a3);
  }
}

char *sub_ED2C10(uint64_t a1, _DWORD *a2, void *a3)
{
  uint64_t v7 = *(_DWORD **)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = *(_DWORD **)a1;
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *(void *)a1) >> 2);
    unint64_t v11 = v10 + 1;
    if (v10 + 1 > 0x1555555555555555) {
      sub_2E00();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)v9) >> 2);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v13 = 0x1555555555555555;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13 > 0x1555555555555555) {
      sub_188D718();
    }
    uint64_t v14 = 12 * v13;
    uint64_t v15 = (char *)operator new(12 * v13);
    unint64_t v16 = &v15[12 * v10];
    *(_DWORD *)unint64_t v16 = *a2;
    *(void *)(v16 + 4) = *a3;
    for (i = v16 + 12; v7 != v9; *((_DWORD *)v16 + 2) = v18)
    {
      uint64_t v17 = *(void *)(v7 - 3);
      v7 -= 3;
      int v18 = v7[2];
      *(void *)(v16 - 12) = v17;
      v16 -= 12;
    }
    *(void *)a1 = v16;
    *(void *)(a1 + 8) = i;
    *(void *)(a1 + 16) = &v15[v14];
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    *uint64_t v7 = *a2;
    *(void *)(v7 + 1) = *a3;
    i = (char *)(v7 + 3);
  }
  *(void *)(a1 + 8) = i;
  return i - 12;
}

unint64_t sub_ED2D48@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = 0;
  uint64_t v5 = *a2;
  unint64_t v6 = 265 * ((~v5 + (v5 << 21)) ^ ((unint64_t)(~v5 + (v5 << 21)) >> 24));
  unint64_t v7 = 2147483649u * ((21 * (v6 ^ (v6 >> 14))) ^ ((21 * (v6 ^ (v6 >> 14))) >> 28));
  unint64_t v8 = (uint64_t *)(a1 + 48 * (((BYTE1(v7) ^ BYTE2(v7)) ^ BYTE3(v7)) & 0xF));
  unint64_t v9 = v7 >> 7;
  uint64_t v10 = v8[3];
  while (1)
  {
    unint64_t v11 = v9 & v10;
    uint64_t v12 = *(void *)(*v8 + v11);
    unint64_t v13 = ((v12 ^ (0x101010101010101 * (v7 & 0x7F))) - 0x101010101010101) & ~(v12 ^ (0x101010101010101
                                                                                       * (v7 & 0x7F))) & 0x8080808080808080;
    if (v13) {
      break;
    }
LABEL_5:
    if ((v12 & (~v12 << 6) & 0x8080808080808080) != 0)
    {
      unint64_t result = sub_ED2E64(v8, v7);
      *(void *)a3 = v8;
      *(void *)(a3 + 8) = result;
      *(unsigned char *)(a3 + 16) = 1;
      return result;
    }
    v4 += 8;
    unint64_t v9 = v4 + v11;
  }
  while (1)
  {
    unint64_t result = (v11 + (__clz(__rbit64(v13)) >> 3)) & v10;
    if (*(_DWORD *)(v8[1] + 8 * result) == v5) {
      break;
    }
    v13 &= v13 - 1;
    if (!v13) {
      goto LABEL_5;
    }
  }
  *(void *)a3 = v8;
  *(void *)(a3 + 8) = result;
  *(unsigned char *)(a3 + 16) = 0;
  return result;
}

unint64_t sub_ED2E64(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = *a1;
  unint64_t v6 = v4 & (a2 >> 7);
  unint64_t v7 = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
  if (!v7)
  {
    uint64_t v8 = 8;
    do
    {
      unint64_t v6 = (v6 + v8) & v4;
      v8 += 8;
      unint64_t v7 = *(void *)(v5 + v6) & (~*(void *)(v5 + v6) << 7) & 0x8080808080808080;
    }
    while (!v7);
  }
  unint64_t result = (v6 + (__clz(__rbit64(v7)) >> 3)) & v4;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v5 + result) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      sub_ED2F5C((uint64_t)a1);
      unint64_t result = sub_2D7FC4(a1, a2);
      uint64_t v5 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v5 + result) == 128);
  *(unsigned char *)(v5 + result) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (result - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  return result;
}

void sub_ED2F5C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    uint64_t v2 = (unsigned char *)(&def_332C + 1);
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    uint64_t v2 = (char *)((2 * v1) | 1);
LABEL_4:
    sub_ED2F8C((char **)a1, v2);
    return;
  }
  sub_ED312C(a1);
}

void sub_ED2F8C(char **a1, char *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[3];
  unint64_t v7 = ((unint64_t)a2 & 0xFFFFFFFFFFFFFFFCLL) + 12;
  uint64_t v8 = (char *)operator new(v7 + 8 * (void)a2);
  *a1 = v8;
  a1[1] = &v8[v7];
  memset(v8, 128, (size_t)(a2 + 8));
  a2[(void)v8] = -1;
  uint64_t v9 = (uint64_t)&a2[-((unint64_t)a2 >> 3)];
  if (a2 == (unsigned char *)dword_4 + 3) {
    uint64_t v9 = 6;
  }
  a1[5] = (char *)(v9 - (void)a1[2]);
  a1[3] = a2;
  if (v6)
  {
    for (i = 0; i != v6; ++i)
    {
      if ((i[(void)v4] & 0x80000000) == 0)
      {
        unint64_t v13 = &v5[8 * (void)i];
        unint64_t v14 = ~(unint64_t)*(unsigned int *)v13 + ((unint64_t)*(unsigned int *)v13 << 21);
        unint64_t v15 = 21 * ((265 * (v14 ^ (v14 >> 24))) ^ ((265 * (v14 ^ (v14 >> 24))) >> 14));
        unint64_t v16 = 2147483649u * (v15 ^ (v15 >> 28));
        uint64_t v17 = a1[3];
        int v18 = *a1;
        unint64_t v19 = (unint64_t)v17 & (v16 >> 7);
        unint64_t v20 = *(void *)&(*a1)[v19] & (~*(void *)&(*a1)[v19] << 7) & 0x8080808080808080;
        if (!v20)
        {
          uint64_t v21 = 8;
          do
          {
            unint64_t v19 = (v19 + v21) & (unint64_t)v17;
            v21 += 8;
            unint64_t v20 = *(void *)&v18[v19] & (~*(void *)&v18[v19] << 7) & 0x8080808080808080;
          }
          while (!v20);
        }
        unint64_t v11 = (v19 + (__clz(__rbit64(v20)) >> 3)) & (unint64_t)v17;
        char v12 = v16 & 0x7F;
        v18[v11] = v12;
        (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v11 - 8) & (unint64_t)a1[3])] = v12;
        *(void *)&a1[1][8 * v11] = *(void *)v13;
      }
    }
    operator delete(v4);
  }
}

uint64_t sub_ED312C(uint64_t result)
{
  unint64_t v1 = *(int8x16_t **)result;
  uint64_t v2 = *(void *)(result + 24);
  uint64_t v3 = *(void *)result + v2;
  if (v3 + 1 != *(void *)result)
  {
    unint64_t v4 = v2 - 7;
    uint64_t v5 = *(unint64_t **)result;
    if (v4 < 0x18) {
      goto LABEL_27;
    }
    uint64_t v6 = (v4 >> 3) + 1;
    uint64_t v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    uint64_t v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      int8x16_t v11 = vandq_s8(v7[-1], v8);
      int8x16_t v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      *unint64_t v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_27:
      do
      {
        *uint64_t v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(void *)(v3 + 1) = v1->i64[0];
  *(unsigned char *)uint64_t v3 = -1;
  uint64_t v13 = *(void *)(result + 24);
  if (v13)
  {
    for (unint64_t i = 0; i != v13; ++i)
    {
      uint64_t v17 = *(int8x16_t **)result;
      if (*(unsigned __int8 *)(*(void *)result + i) == 254)
      {
        uint64_t v18 = *(unsigned int *)(*(void *)(result + 8) + 8 * i);
        unint64_t v19 = 265 * ((~v18 + (v18 << 21)) ^ ((unint64_t)(~v18 + (v18 << 21)) >> 24));
        unint64_t v20 = 2147483649u * ((21 * (v19 ^ (v19 >> 14))) ^ ((21 * (v19 ^ (v19 >> 14))) >> 28));
        unint64_t v21 = v13 & (v20 >> 7);
        unint64_t v22 = *(uint64_t *)((unsigned char *)v17->i64 + v21) & (~*(uint64_t *)((char *)v17->i64 + v21) << 7) & 0x8080808080808080;
        if (v22)
        {
          unint64_t v15 = v13 & (v20 >> 7);
        }
        else
        {
          uint64_t v23 = 8;
          unint64_t v15 = v13 & (v20 >> 7);
          do
          {
            unint64_t v15 = (v15 + v23) & v13;
            v23 += 8;
            unint64_t v22 = *(uint64_t *)((unsigned char *)v17->i64 + v15) & (~*(uint64_t *)((char *)v17->i64 + v15) << 7) & 0x8080808080808080;
          }
          while (!v22);
        }
        unint64_t v16 = (v15 + (__clz(__rbit64(v22)) >> 3)) & v13;
        if ((((v16 - v21) ^ (i - v21)) & v13) > 7)
        {
          int v24 = v17->u8[v16];
          v17->i8[v16] = v20 & 0x7F;
          *(unsigned char *)((*(void *)(result + 24) & (v16 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v20 & 0x7F;
          uint64_t v25 = *(void *)(result + 8);
          if (v24 == 128)
          {
            *(void *)(v25 + 8 * v16) = *(void *)(v25 + 8 * i);
            *(unsigned char *)(*(void *)result + i) = 0x80;
            *(unsigned char *)((*(void *)(result + 24) & (i - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = 0x80;
          }
          else
          {
            uint64_t v26 = *(void *)(v25 + 8 * i);
            *(void *)(v25 + 8 * i) = *(void *)(v25 + 8 * v16);
            *(void *)(*(void *)(result + 8) + 8 * v16) = v26;
            --i;
          }
        }
        else
        {
          v17->i8[i] = v20 & 0x7F;
          *(unsigned char *)((*(void *)(result + 24) & (i - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v20 & 0x7F;
        }
      }
      uint64_t v13 = *(void *)(result + 24);
    }
    uint64_t v27 = i - (i >> 3);
    BOOL v28 = i == 7;
    uint64_t v29 = 6;
    if (!v28) {
      uint64_t v29 = v27;
    }
    *(void *)(result + 40) = v29 - *(void *)(result + 16);
  }
  else
  {
    *(void *)(result + 40) = -*(void *)(result + 16);
  }
  return result;
}

void sub_ED33A0(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  unint64_t v5 = a2;
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v6 = a1 + 24;
  uint64_t v9 = v8 - v7;
  unint64_t v10 = (v8 - v7) >> 2;
  if (v10 <= a2)
  {
    do
    {
      unint64_t v15 = (v9 >> 1) | 1;
      if (v15 <= v10)
      {
        if (v15 < v10)
        {
          uint64_t v8 = v7 + 4 * v15;
          *(void *)(a1 + 32) = v8;
          uint64_t v9 = 4 * v15;
          unint64_t v16 = (uint64_t)(4 * v15) >> 2;
          if (v10 < v16) {
LABEL_12:
          }
            memset((void *)(v7 + 4 * v10), 255, v9 - 4 * v10);
        }
        else
        {
          uint64_t v9 = v8 - v7;
          unint64_t v16 = (v8 - v7) >> 2;
          if (v10 < v16) {
            goto LABEL_12;
          }
        }
      }
      else
      {
        sub_4394C(v6, v15 - v10);
        uint64_t v7 = *(void *)(a1 + 24);
        uint64_t v8 = *(void *)(a1 + 32);
        uint64_t v9 = v8 - v7;
        unint64_t v16 = (v8 - v7) >> 2;
        if (v10 < v16) {
          goto LABEL_12;
        }
      }
      unint64_t v10 = v16;
    }
    while (v16 <= v5);
  }
  unint64_t v11 = v5 | ((unint64_t)*a3 << 32);
  uint64_t v13 = *(char **)(a1 + 8);
  unint64_t v12 = *(void *)(a1 + 16);
  if ((unint64_t)v13 < v12)
  {
    *(void *)uint64_t v13 = v11;
    uint64_t v14 = (uint64_t)(v13 + 8);
    goto LABEL_33;
  }
  uint64_t v17 = *(char **)a1;
  uint64_t v18 = (uint64_t)&v13[-*(void *)a1];
  uint64_t v19 = v18 >> 3;
  unint64_t v20 = (v18 >> 3) + 1;
  if (v20 >> 61) {
    sub_2E00();
  }
  uint64_t v21 = v12 - (void)v17;
  if (v21 >> 2 > v20) {
    unint64_t v20 = v21 >> 2;
  }
  if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v22 = v20;
  }
  if (v22)
  {
    if (v22 >> 61) {
      sub_188D718();
    }
    uint64_t v23 = operator new(8 * v22);
    int v24 = (unint64_t *)&v23[8 * v19];
    uint64_t v25 = &v23[8 * v22];
    *int v24 = v11;
    uint64_t v14 = (uint64_t)(v24 + 1);
    uint64_t v26 = (char *)(v13 - v17);
    if (v13 == v17) {
      goto LABEL_31;
    }
    goto LABEL_24;
  }
  uint64_t v23 = 0;
  int v24 = (unint64_t *)(8 * v19);
  uint64_t v25 = 0;
  *(void *)(8 * v19) = v11;
  uint64_t v14 = 8 * v19 + 8;
  uint64_t v26 = (char *)(v13 - v17);
  if (v13 != v17)
  {
LABEL_24:
    unint64_t v27 = (unint64_t)(v26 - 8);
    if (v27 < 0x58) {
      goto LABEL_42;
    }
    if ((unint64_t)(v13 - v23 - v18) < 0x20) {
      goto LABEL_42;
    }
    uint64_t v28 = (v27 >> 3) + 1;
    uint64_t v29 = 8 * (v28 & 0x3FFFFFFFFFFFFFFCLL);
    char v30 = &v13[-v29];
    int v24 = (unint64_t *)((char *)v24 - v29);
    unint64_t v31 = &v23[8 * v19 - 16];
    unint64_t v32 = v13 - 16;
    uint64_t v33 = v28 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v34 = *(_OWORD *)v32;
      *(v31 - 1) = *((_OWORD *)v32 - 1);
      *unint64_t v31 = v34;
      v31 -= 2;
      v32 -= 32;
      v33 -= 4;
    }
    while (v33);
    uint64_t v13 = v30;
    if (v28 != (v28 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_42:
      do
      {
        unint64_t v35 = *((void *)v13 - 1);
        v13 -= 8;
        *--int v24 = v35;
      }
      while (v13 != v17);
    }
    uint64_t v13 = *(char **)a1;
  }
LABEL_31:
  *(void *)a1 = v24;
  *(void *)(a1 + 8) = v14;
  *(void *)(a1 + 16) = v25;
  if (v13) {
    operator delete(v13);
  }
LABEL_33:
  *(void *)(a1 + 8) = v14;
  *(_DWORD *)(*(void *)(a1 + 24) + 4 * v5) = *(_DWORD *)(a1 + 48);
  unsigned int v36 = *(_DWORD *)(a1 + 48);
  *(_DWORD *)(a1 + 48) = v36 + 1;
  if (v36)
  {
    unint64_t v37 = *(char **)a1;
    do
    {
      unsigned int v38 = v36 - 1;
      uint64_t v39 = (v36 - 1) >> 2;
      unint64_t v40 = &v37[8 * v39];
      int v43 = *((_DWORD *)v40 + 1);
      unint64_t v41 = v40 + 4;
      int v42 = v43;
      unint64_t v44 = &v37[8 * v36];
      int v47 = *((_DWORD *)v44 + 1);
      double v45 = v44 + 4;
      int v46 = v47;
      if (v42 < v47) {
        break;
      }
      uint64_t v48 = 8 * v36;
      int v49 = *(_DWORD *)&v37[v48];
      *(_DWORD *)&v37[v48] = *(_DWORD *)&v37[8 * v39];
      *(_DWORD *)&v37[8 * v39] = v49;
      *double v45 = v42;
      *unint64_t v41 = v46;
      unint64_t v37 = *(char **)a1;
      uint64_t v50 = *(void *)(a1 + 24);
      uint64_t v51 = 4 * *(unsigned int *)(*(void *)a1 + v48);
      uint64_t v52 = 4 * *(unsigned int *)(*(void *)a1 + 8 * v39);
      int v53 = *(_DWORD *)(v50 + v51);
      *(_DWORD *)(v50 + v51) = *(_DWORD *)(v50 + v52);
      *(_DWORD *)(v50 + v52) = v53;
      unsigned int v36 = v38 >> 2;
    }
    while (v38 > 3);
  }
}

double sub_ED3660(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v3 = *(unsigned int *)(a1[3] + 4 * a2);
  uint64_t v4 = *a1 + 8 * v3;
  int v5 = *(_DWORD *)(v4 + 4);
  *(_DWORD *)(v4 + 4) = *a3;
  if (*a3 >= v5)
  {
    unsigned int v22 = (4 * v3) | 1;
    unsigned int v23 = *((_DWORD *)a1 + 12);
    if (v22 < v23)
    {
      int v24 = 4 * v3;
      do
      {
        unsigned int v25 = v24 + 5;
        if (v25 >= v23) {
          unsigned int v26 = v23;
        }
        else {
          unsigned int v26 = v25;
        }
        if (v22 >= v26) {
          break;
        }
        uint64_t v27 = *a1;
        uint64_t v28 = v3;
        int v29 = *(_DWORD *)(*a1 + 8 * v3 + 4);
        char v30 = (int *)(*a1 + 8 * v22 + 4);
        LODWORD(v3) = -1;
        int v31 = v29;
        do
        {
          int v33 = *v30;
          v30 += 2;
          int v32 = v33;
          if (v33 < v31)
          {
            int v31 = v32;
            LODWORD(v3) = v22;
          }
          ++v22;
        }
        while (v26 != v22);
        if (v3 >= v23) {
          break;
        }
        uint64_t v34 = 8 * v3;
        unint64_t v35 = (_DWORD *)(v27 + v34);
        uint64_t v36 = 8 * v28;
        double result = *(double *)(v27 + v34);
        *unint64_t v35 = *(_DWORD *)(v27 + v36);
        v35[1] = v29;
        *(double *)(v27 + v36) = result;
        uint64_t v38 = a1[3];
        uint64_t v39 = 4 * *(unsigned int *)(*a1 + v34);
        uint64_t v40 = 4 * *(unsigned int *)(*a1 + v36);
        int v41 = *(_DWORD *)(v38 + v39);
        *(_DWORD *)(v38 + v39) = *(_DWORD *)(v38 + v40);
        *(_DWORD *)(v38 + v40) = v41;
        int v24 = 4 * v3;
        unsigned int v22 = (4 * v3) | 1;
        unsigned int v23 = *((_DWORD *)a1 + 12);
      }
      while (v22 < v23);
    }
  }
  else if (v3)
  {
    uint64_t v6 = *a1;
    do
    {
      unsigned int v7 = v3 - 1;
      uint64_t v8 = (v3 - 1) >> 2;
      uint64_t v9 = v6 + 8 * v8;
      int v12 = *(_DWORD *)(v9 + 4);
      unint64_t v10 = (_DWORD *)(v9 + 4);
      int v11 = v12;
      uint64_t v13 = v6 + 8 * v3;
      int v16 = *(_DWORD *)(v13 + 4);
      uint64_t v14 = (_DWORD *)(v13 + 4);
      int v15 = v16;
      if (v11 < v16) {
        break;
      }
      uint64_t v17 = 8 * v3;
      int v18 = *(_DWORD *)(v6 + v17);
      *(_DWORD *)(v6 + v17) = *(_DWORD *)(v6 + 8 * v8);
      *(_DWORD *)(v6 + 8 * v8) = v18;
      *uint64_t v14 = v11;
      *unint64_t v10 = v15;
      uint64_t v6 = *a1;
      uint64_t v19 = a1[3];
      uint64_t v3 = 4 * *(unsigned int *)(*a1 + v17);
      uint64_t v20 = 4 * *(unsigned int *)(*a1 + 8 * v8);
      int v21 = *(_DWORD *)(v19 + v3);
      *(_DWORD *)(v19 + v3) = *(_DWORD *)(v19 + v20);
      *(_DWORD *)(v19 + v20) = v21;
      LODWORD(v3) = v7 >> 2;
    }
    while (v7 >= 4);
  }
  return result;
}

void sub_ED37DC(uint64_t a1)
{
  uint64_t v2 = *(_DWORD **)(a1 + 824);
  uint64_t v3 = *(char **)(a1 + 800);
  uint64_t v4 = v3;
  unint64_t v5 = *(void *)(a1 + 808);
  if ((unint64_t)v3 >= v5)
  {
    unsigned int v7 = *(char **)(a1 + 792);
    uint64_t v8 = (v3 - v7) >> 2;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 62) {
      sub_2E00();
    }
    uint64_t v10 = v5 - (void)v7;
    if (v10 >> 1 > v9) {
      unint64_t v9 = v10 >> 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >> 62) {
        sub_188D718();
      }
      int v12 = operator new(4 * v11);
    }
    else
    {
      int v12 = 0;
    }
    uint64_t v13 = &v12[4 * v8];
    uint64_t v14 = &v12[4 * v11];
    _DWORD *v13 = *v2;
    uint64_t v6 = v13 + 1;
    if (v3 != v7)
    {
      unint64_t v15 = v3 - v7 - 4;
      if (v15 < 0x2C) {
        goto LABEL_40;
      }
      if ((unint64_t)(v7 - v12) < 0x20) {
        goto LABEL_40;
      }
      uint64_t v16 = (v15 >> 2) + 1;
      uint64_t v17 = 4 * (v16 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v4 = &v3[-v17];
      uint64_t v13 = (_DWORD *)((char *)v13 - v17);
      int v18 = &v12[4 * v8 - 16];
      uint64_t v19 = v3 - 16;
      uint64_t v20 = v16 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v21 = *(_OWORD *)v19;
        *(v18 - 1) = *((_OWORD *)v19 - 1);
        _OWORD *v18 = v21;
        v18 -= 2;
        v19 -= 32;
        v20 -= 8;
      }
      while (v20);
      if (v16 != (v16 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_40:
        do
        {
          int v22 = *((_DWORD *)v4 - 1);
          v4 -= 4;
          *--uint64_t v13 = v22;
        }
        while (v4 != v7);
      }
    }
    *(void *)(a1 + 792) = v13;
    *(void *)(a1 + 800) = v6;
    *(void *)(a1 + 808) = v14;
    if (v7)
    {
      operator delete(v7);
      uint64_t v2 = *(_DWORD **)(a1 + 824);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v3 = *v2;
    uint64_t v6 = v3 + 4;
  }
  *(void *)(a1 + 800) = v6;
  *(_DWORD *)(*(void *)(a1 + 848) + 4 * *v2) = -1;
  unsigned int v23 = *(_DWORD *)(a1 + 872) - 1;
  *(_DWORD *)(a1 + 872) = v23;
  if (v23)
  {
    *(void *)uint64_t v2 = *(void *)&v2[2 * v23];
    int v24 = *(unsigned int **)(a1 + 824);
    *(_DWORD *)(*(void *)(a1 + 848) + 4 * *v24) = 0;
    unsigned int v25 = *(_DWORD *)(a1 + 872);
    if (v25 >= 2)
    {
      int v26 = 0;
      unsigned int v27 = 0;
      unsigned int v28 = 1;
      do
      {
        unsigned int v29 = v26 + 5;
        if (v29 >= v25) {
          unsigned int v30 = v25;
        }
        else {
          unsigned int v30 = v29;
        }
        if (v28 >= v30) {
          break;
        }
        uint64_t v31 = v27;
        unsigned int v32 = v24[2 * v27 + 1];
        int v33 = &v24[2 * v28 + 1];
        unsigned int v27 = -1;
        signed int v34 = v32;
        do
        {
          signed int v36 = *v33;
          v33 += 2;
          signed int v35 = v36;
          if (v36 < v34)
          {
            signed int v34 = v35;
            unsigned int v27 = v28;
          }
          ++v28;
        }
        while (v30 != v28);
        if (v27 >= v25) {
          break;
        }
        uint64_t v37 = 2 * v27;
        uint64_t v38 = &v24[v37];
        uint64_t v39 = 8 * v31;
        uint64_t v40 = *(void *)&v24[v37];
        *uint64_t v38 = *(unsigned int *)((char *)v24 + v39);
        v38[1] = v32;
        *(void *)((char *)v24 + v39) = v40;
        int v24 = *(unsigned int **)(a1 + 824);
        uint64_t v41 = *(void *)(a1 + 848);
        uint64_t v42 = 4 * v24[v37];
        uint64_t v43 = 4 * *(unsigned int *)((char *)v24 + v39);
        LODWORD(v39) = *(_DWORD *)(v41 + v42);
        *(_DWORD *)(v41 + v42) = *(_DWORD *)(v41 + v43);
        *(_DWORD *)(v41 + v43) = v39;
        int v26 = 4 * v27;
        unsigned int v28 = (4 * v27) | 1;
        unsigned int v25 = *(_DWORD *)(a1 + 872);
      }
      while (v28 < v25);
    }
  }
  *(void *)(a1 + 832) -= 8;
}

BOOL sub_ED3A58(uint64_t a1, unsigned int a2, int *a3, unsigned int *a4)
{
  unsigned int v7 = *a4;
  uint64_t v8 = *(void *)(a1 + 8);
  if (sub_EB9330(*(void *)a1, a2) && *(unsigned char *)sub_EB935C(*(void *)a1, a2) == 3)
  {
    unint64_t v10 = *(void *)(sub_EB935C(*(void *)a1, a2) + 8);
    uint64_t v11 = sub_EB935C(*(void *)a1, a2);
    long long v12 = *(_OWORD *)(v11 + 48);
    v33[3] = *(_OWORD *)(v11 + 64);
    uint64_t v34 = *(void *)(v11 + 80);
    long long v13 = *(_OWORD *)(v11 + 16);
    v33[1] = *(_OWORD *)(v11 + 32);
    v33[2] = v12;
    v33[0] = v13;
    unint64_t v14 = *(void *)(sub_EB935C(*(void *)a1, v7) + 88);
    uint64_t v15 = sub_EB935C(*(void *)a1, v7);
    long long v16 = *(_OWORD *)(v15 + 144);
    v31[2] = *(_OWORD *)(v15 + 128);
    double v31[3] = v16;
    uint64_t v32 = *(void *)(v15 + 160);
    long long v17 = *(_OWORD *)(v15 + 112);
    v31[0] = *(_OWORD *)(v15 + 96);
    v31[1] = v17;
    unsigned int v30 = sub_35E640();
    int v18 = sub_ECA280((int *)&v30, v10, (unsigned int *)v33, v14, (unsigned int *)v31, *(void *)(a1 + 16));
    a4[14] = v30;
    goto LABEL_15;
  }
  int v19 = **(_DWORD **)(a1 + 32);
  int v20 = *a3;
  if (*a3 < 0) {
    char v21 = -5;
  }
  else {
    char v21 = 5;
  }
  char v22 = v21 + *a3 % 10;
  if (**(unsigned char **)(a1 + 24))
  {
    int v23 = v20 / -10 + v19 + (((-103 * v22) >> 15) & 1) + ((-103 * v22) >> 10);
    int v20 = (**(_DWORD **)(a1 + 40) - v20) & ~((**(_DWORD **)(a1 + 40) - v20) >> 31);
    if (sub_EB9330(*(void *)a1, a2)) {
      goto LABEL_9;
    }
LABEL_12:
    uint64_t v24 = 0;
    if (!sub_EB9330(*(void *)a1, v7)) {
      goto LABEL_10;
    }
LABEL_13:
    unsigned int v25 = *(_DWORD *)(sub_EB935C(*(void *)a1, v7) + 16);
    goto LABEL_14;
  }
  int v23 = *a3 / 10 + v19 + (((103 * v22) >> 15) & 1) + ((103 * v22) >> 10);
  if (!sub_EB9330(*(void *)a1, a2)) {
    goto LABEL_12;
  }
LABEL_9:
  uint64_t v24 = *(unsigned int *)(sub_EB935C(*(void *)a1, a2) + 96);
  if (sub_EB9330(*(void *)a1, v7)) {
    goto LABEL_13;
  }
LABEL_10:
  unsigned int v25 = 0;
LABEL_14:
  int v18 = sub_ECFD5C(v8, a2, (uint64_t)a4, *(void *)a1, *(void **)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), v23, v20, 0, v24, SHIDWORD(v24), v25);
LABEL_15:
  a3[1] = v18;
  return *a4 == -1 || a4[15] == -1 || a4[16] == -1 || v18 == 0x7FFFFFFF;
}

uint64_t sub_ED3CE0(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = *a2;
  unint64_t v8 = 265 * ((~v7 + (v7 << 21)) ^ ((unint64_t)(~v7 + (v7 << 21)) >> 24));
  unint64_t v9 = 2147483649u * ((21 * (v8 ^ (v8 >> 14))) ^ ((21 * (v8 ^ (v8 >> 14))) >> 28));
  unint64_t v10 = (void *)(a1 + 48 * (((BYTE1(v9) ^ BYTE2(v9)) ^ BYTE3(v9)) & 0xF));
  unint64_t v11 = v9 >> 7;
  uint64_t v12 = v10[3];
  uint64_t v13 = 0x101010101010101 * (v9 & 0x7F);
  while (1)
  {
    unint64_t v14 = v11 & v12;
    uint64_t v15 = *(void *)(*v10 + v14);
    unint64_t v16 = ((v15 ^ v13) - 0x101010101010101) & ~(v15 ^ v13) & 0x8080808080808080;
    if (v16) {
      break;
    }
LABEL_6:
    if ((v15 & (~v15 << 6) & 0x8080808080808080) != 0) {
      goto LABEL_9;
    }
    v6 += 8;
    unint64_t v11 = v6 + v14;
  }
  uint64_t v17 = v10[1];
  while (1)
  {
    unint64_t v18 = (v14 + (__clz(__rbit64(v16)) >> 3)) & v12;
    if (*(_DWORD *)(v17 + 8 * v18) == v7) {
      break;
    }
    v16 &= v16 - 1;
    if (!v16) {
      goto LABEL_6;
    }
  }
  if (v12 == v18)
  {
LABEL_9:
    ++*(_DWORD *)(a1 + 816);
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 776) - *(void *)(a1 + 768)) >> 2);
    sub_ED2D48(a1, a2, (uint64_t)&v33);
    uint64_t v20 = v34;
    uint64_t v21 = *(void *)(v33 + 8);
    if (v35) {
      *(_DWORD *)(v21 + 8 * v34) = *a2;
    }
    *(_DWORD *)(v21 + 8 * v20 + 4) = v19;
    sub_ED2C10(a1 + 768, a2, a3);
    char v22 = (uint64_t *)(a1 + 824);
    uint64_t v23 = *(void *)(a1 + 848);
    if (v19 < (unint64_t)((*(void *)(a1 + 856) - v23) >> 2)
      && *(_DWORD *)(v23 + 4 * v19) != -1)
    {
      LODWORD(v24) = v19;
LABEL_14:
      sub_ED3660(v22, v24, a3);
      return 1;
    }
    LODWORD(v24) = v19;
LABEL_16:
    sub_ED33A0((uint64_t)v22, v24, a3);
    return 1;
  }
  uint64_t v26 = v17 + 8 * v18;
  unsigned int v28 = *(_DWORD *)(v26 + 4);
  unsigned int v27 = (unsigned int *)(v26 + 4);
  uint64_t v29 = *(void *)(a1 + 768) + 12 * v28;
  signed int v31 = *(_DWORD *)(v29 + 4);
  unsigned int v30 = (void *)(v29 + 4);
  if ((int)*a3 < v31)
  {
    ++*(_DWORD *)(a1 + 816);
    *unsigned int v30 = *(void *)a3;
    char v22 = (uint64_t *)(a1 + 824);
    unint64_t v24 = *v27;
    uint64_t v32 = *(void *)(a1 + 848);
    if (v24 < (*(void *)(a1 + 856) - v32) >> 2 && *(_DWORD *)(v32 + 4 * v24) != -1) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
  return 0;
}

void *sub_ED3F38(void *a1, unsigned int a2)
{
  uint64_t v4 = a2;
  v13[0] = a2;
  v13[1] = (unint64_t)&v12;
  v13[2] = (unint64_t)&v11;
  v13[3] = (unint64_t)&v10;
  unint64_t v5 = sub_ED2164(a1, v13);
  *((_DWORD *)v5 + 218) = 0;
  *(_OWORD *)(v5 + 105) = 0u;
  *(_OWORD *)(v5 + 107) = 0u;
  *(_OWORD *)(v5 + 103) = 0u;
  *((_OWORD *)v5 + 48) = 0u;
  *((_OWORD *)v5 + 49) = 0u;
  *((_OWORD *)v5 + 50) = 0u;
  *((_DWORD *)v5 + 204) = 0;
  if (a2)
  {
    uint64_t v6 = (char *)operator new(4 * v4);
    a1[106] = v6;
    a1[107] = v6;
    a1[108] = &v6[4 * v4];
  }
  uint64_t v7 = (char *)operator new(0x3F8uLL);
  a1[103] = v7;
  a1[104] = v7;
  a1[105] = v7 + 1016;
  if (a2)
  {
    unint64_t v8 = (char *)operator new(12 * v4);
    a1[96] = v8;
    a1[97] = v8;
    a1[98] = &v8[12 * v4];
  }
  return a1;
}

void sub_ED401C(_Unwind_Exception *a1)
{
  sub_3310C(v2);
  uint64_t v4 = (void **)(v1 + 96);
  unint64_t v5 = (void *)v1[99];
  if (v5)
  {
    v1[100] = v5;
    operator delete(v5);
    uint64_t v6 = *v4;
    if (!*v4)
    {
LABEL_3:
      sub_328138((uint64_t)v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v6 = *v4;
    if (!*v4) {
      goto LABEL_3;
    }
  }
  v1[97] = v6;
  operator delete(v6);
  sub_328138((uint64_t)v1);
  _Unwind_Resume(a1);
}

BOOL sub_ED40A4(uint64_t a1, unsigned int a2, int *a3, unsigned int *a4)
{
  unsigned int v7 = *a4;
  uint64_t v8 = *(void *)(a1 + 8);
  if (sub_EB9330(*(void *)a1, a2) && *(unsigned char *)sub_EB935C(*(void *)a1, a2) == 3)
  {
    unint64_t v10 = *(void *)(sub_EB935C(*(void *)a1, a2) + 8);
    uint64_t v11 = sub_EB935C(*(void *)a1, a2);
    long long v12 = *(_OWORD *)(v11 + 48);
    v33[3] = *(_OWORD *)(v11 + 64);
    uint64_t v34 = *(void *)(v11 + 80);
    long long v13 = *(_OWORD *)(v11 + 16);
    v33[1] = *(_OWORD *)(v11 + 32);
    v33[2] = v12;
    v33[0] = v13;
    unint64_t v14 = *(void *)(sub_EB935C(*(void *)a1, v7) + 88);
    uint64_t v15 = sub_EB935C(*(void *)a1, v7);
    long long v16 = *(_OWORD *)(v15 + 144);
    v31[2] = *(_OWORD *)(v15 + 128);
    double v31[3] = v16;
    uint64_t v32 = *(void *)(v15 + 160);
    long long v17 = *(_OWORD *)(v15 + 112);
    v31[0] = *(_OWORD *)(v15 + 96);
    v31[1] = v17;
    unsigned int v30 = sub_35E640();
    int v18 = sub_ECA280((int *)&v30, v10, (unsigned int *)v33, v14, (unsigned int *)v31, *(void *)(a1 + 16));
    a4[14] = v30;
    goto LABEL_15;
  }
  int v19 = **(_DWORD **)(a1 + 32);
  int v20 = *a3;
  if (*a3 < 0) {
    char v21 = -5;
  }
  else {
    char v21 = 5;
  }
  char v22 = v21 + *a3 % 10;
  if (**(unsigned char **)(a1 + 24))
  {
    int v23 = v20 / -10 + v19 + (((-103 * v22) >> 15) & 1) + ((-103 * v22) >> 10);
    int v20 = (**(_DWORD **)(a1 + 40) - v20) & ~((**(_DWORD **)(a1 + 40) - v20) >> 31);
    if (sub_EB9330(*(void *)a1, a2)) {
      goto LABEL_9;
    }
LABEL_12:
    uint64_t v24 = 0;
    if (!sub_EB9330(*(void *)a1, v7)) {
      goto LABEL_10;
    }
LABEL_13:
    unsigned int v25 = *(_DWORD *)(sub_EB935C(*(void *)a1, v7) + 16);
    goto LABEL_14;
  }
  int v23 = *a3 / 10 + v19 + (((103 * v22) >> 15) & 1) + ((103 * v22) >> 10);
  if (!sub_EB9330(*(void *)a1, a2)) {
    goto LABEL_12;
  }
LABEL_9:
  uint64_t v24 = *(unsigned int *)(sub_EB935C(*(void *)a1, a2) + 96);
  if (sub_EB9330(*(void *)a1, v7)) {
    goto LABEL_13;
  }
LABEL_10:
  unsigned int v25 = 0;
LABEL_14:
  int v18 = sub_ED0A04(v8, a2, (uint64_t)a4, *(void *)a1, *(void **)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), v23, v20, 0, v24, SHIDWORD(v24), v25);
LABEL_15:
  a3[1] = v18;
  return *a4 == -1 || a4[15] == -1 || a4[16] == -1 || v18 == 0x7FFFFFFF;
}

void sub_ED432C(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v7 = *a2;
  uint64_t v8 = operator new(0x10uLL);
  uint64_t v26 = v8 + 2;
  unsigned int v27 = v8 + 2;
  *uint64_t v8 = v6;
  v8[1] = v7;
  unsigned int v25 = v8;
  uint64_t v9 = a1[1];
  uint64_t v10 = a2[1];
  uint64_t v11 = operator new(0x10uLL);
  int v23 = v11 + 2;
  uint64_t v24 = v11 + 2;
  void *v11 = v9;
  v11[1] = v10;
  char v22 = v11;
  sub_ED45C0((uint64_t)&v17, (uint64_t)&v25, (uint64_t)&v22, 0);
  sub_ED45C0((uint64_t)&v12, (uint64_t)&v25, (uint64_t)&v22, 1);
  sub_ED44AC(a3, &v17);
  sub_ED44AC(a3 + 64, &v12);
  if (__p)
  {
    long long v16 = __p;
    operator delete(__p);
  }
  if (v13)
  {
    unint64_t v14 = v13;
    operator delete(v13);
  }
  if (v20)
  {
    char v21 = v20;
    operator delete(v20);
  }
  if (v18)
  {
    int v19 = v18;
    operator delete(v18);
  }
  if (v22)
  {
    int v23 = v22;
    operator delete(v22);
  }
  if (v25)
  {
    uint64_t v26 = v25;
    operator delete(v25);
  }
}

void sub_ED444C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_2FC938((uint64_t *)va);
  uint64_t v11 = *(void **)(v9 - 96);
  if (v11)
  {
    *(void *)(v9 - 88) = v11;
    operator delete(v11);
    long long v12 = *(void **)(v9 - 72);
    if (!v12) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    long long v12 = *(void **)(v9 - 72);
    if (!v12) {
      goto LABEL_3;
    }
  }
  *(void *)(v9 - 64) = v12;
  operator delete(v12);
  _Unwind_Resume(a1);
}

uint64_t sub_ED44AC(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = (unsigned char *)*((void *)a2 + 2);
  unint64_t v5 = (unsigned char *)*((void *)a2 + 3);
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      sub_2E00();
    }
    uint64_t v8 = (char *)operator new(v5 - v6);
    *(void *)(a1 + 16) = v8;
    *(void *)(a1 + 24) = v8;
    uint64_t v9 = &v8[8 * (v7 >> 3)];
    *(void *)(a1 + 32) = v9;
    memcpy(v8, v6, v7);
    *(void *)(a1 + 24) = v9;
  }
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  uint64_t v11 = (unsigned char *)*((void *)a2 + 5);
  uint64_t v10 = (unsigned char *)*((void *)a2 + 6);
  int64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0) {
      sub_2E00();
    }
    long long v13 = (char *)operator new(v10 - v11);
    *(void *)(a1 + 40) = v13;
    *(void *)(a1 + 48) = v13;
    unint64_t v14 = &v13[8 * (v12 >> 3)];
    *(void *)(a1 + 56) = v14;
    memcpy(v13, v11, v12);
    *(void *)(a1 + 48) = v14;
  }
  return a1;
}

void sub_ED458C(_Unwind_Exception *exception_object)
{
  unint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 48) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_ED45C0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  uint64_t v8 = *(const void **)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  int64_t v9 = v7 - *(void *)a2;
  if (v7 == *(void *)a2)
  {
    uint64_t v11 = 0;
    uint64_t v10 = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    long long v13 = *(const void **)a3;
    uint64_t v17 = *(void *)(a3 + 8);
    int64_t v14 = v17 - *(void *)a3;
    if (v17 != *(void *)a3) {
      goto LABEL_4;
    }
  }
  else
  {
    if (v9 < 0) {
      sub_2E00();
    }
    uint64_t v10 = (char *)operator new(v7 - *(void *)a2);
    *(void *)(a1 + 16) = v10;
    *(void *)(a1 + 24) = v10;
    uint64_t v11 = &v10[8 * (v9 >> 3)];
    *(void *)(a1 + 32) = v11;
    memcpy(v10, v8, v9);
    *(void *)(a1 + 24) = v11;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    long long v13 = *(const void **)a3;
    uint64_t v12 = *(void *)(a3 + 8);
    int64_t v14 = v12 - *(void *)a3;
    if (v12 != *(void *)a3)
    {
LABEL_4:
      if (v14 < 0) {
        sub_2E00();
      }
      uint64_t v15 = (char *)operator new(v14);
      *(void *)(a1 + 40) = v15;
      *(void *)(a1 + 48) = v15;
      long long v16 = &v15[8 * (v14 >> 3)];
      *(void *)(a1 + 56) = v16;
      memcpy(v15, v13, v14);
      *(void *)(a1 + 48) = v16;
      if (v10 == v11) {
        return a1;
      }
      goto LABEL_9;
    }
  }
  long long v16 = 0;
  uint64_t v15 = 0;
  if (v10 == v11) {
    return a1;
  }
LABEL_9:
  if (a4)
  {
    uint64_t v18 = ((v16 - v15) >> 3) - 1;
    *(void *)(a1 + 8) = v18;
    int v19 = &v15[8 * v18];
  }
  else
  {
    uint64_t v20 = (v11 - v10) >> 3;
    uint64_t v21 = v20 - 1;
    if (v20 == 1)
    {
      uint64_t v22 = 0;
    }
    else
    {
      uint64_t v22 = 0;
      while (*(void *)&v10[8 * v22] == *(void *)&v15[8 * v22])
      {
        *(void *)(a1 + 8) = ++v22;
        if (v21 == v22)
        {
          uint64_t v22 = v21;
          break;
        }
      }
    }
    int v19 = &v10[8 * v22];
  }
  *(void *)a1 = *(void *)v19;
  return a1;
}

void sub_ED4764(_Unwind_Exception *exception_object)
{
  unint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 48) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void *sub_ED4798(void *a1, unsigned int a2)
{
  uint64_t v4 = a2;
  v13[0] = a2;
  v13[1] = (unint64_t)&v12;
  v13[2] = (unint64_t)&v11;
  v13[3] = (unint64_t)&v10;
  unint64_t v5 = sub_ED2164(a1, v13);
  *((_DWORD *)v5 + 218) = 0;
  *(_OWORD *)(v5 + 105) = 0u;
  *(_OWORD *)(v5 + 107) = 0u;
  *(_OWORD *)(v5 + 103) = 0u;
  *((_OWORD *)v5 + 48) = 0u;
  *((_OWORD *)v5 + 49) = 0u;
  *((_OWORD *)v5 + 50) = 0u;
  *((_DWORD *)v5 + 204) = 0;
  if (a2)
  {
    uint64_t v6 = (char *)operator new(4 * v4);
    a1[106] = v6;
    a1[107] = v6;
    a1[108] = &v6[4 * v4];
  }
  uint64_t v7 = (char *)operator new(0x3F8uLL);
  a1[103] = v7;
  a1[104] = v7;
  a1[105] = v7 + 1016;
  if (a2)
  {
    uint64_t v8 = (char *)operator new(12 * v4);
    a1[96] = v8;
    a1[97] = v8;
    a1[98] = &v8[12 * v4];
  }
  return a1;
}

void sub_ED487C(_Unwind_Exception *a1)
{
  sub_3310C(v2);
  uint64_t v4 = (void **)(v1 + 96);
  unint64_t v5 = (void *)v1[99];
  if (v5)
  {
    v1[100] = v5;
    operator delete(v5);
    uint64_t v6 = *v4;
    if (!*v4)
    {
LABEL_3:
      sub_328138((uint64_t)v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v6 = *v4;
    if (!*v4) {
      goto LABEL_3;
    }
  }
  v1[97] = v6;
  operator delete(v6);
  sub_328138((uint64_t)v1);
  _Unwind_Resume(a1);
}

BOOL sub_ED4904(uint64_t a1, unsigned int a2, int *a3, uint64_t a4)
{
  unsigned int v7 = *(_DWORD *)a4;
  uint64_t v8 = *(void *)(a1 + 8);
  if (sub_EB9330(*(void *)a1, a2) && *(unsigned char *)sub_EB935C(*(void *)a1, a2) == 3)
  {
    unint64_t v10 = *(void *)(sub_EB935C(*(void *)a1, a2) + 8);
    uint64_t v11 = sub_EB935C(*(void *)a1, a2);
    long long v12 = *(_OWORD *)(v11 + 64);
    long long v34[2] = *(_OWORD *)(v11 + 48);
    v34[3] = v12;
    uint64_t v35 = *(void *)(v11 + 80);
    long long v13 = *(_OWORD *)(v11 + 32);
    v34[0] = *(_OWORD *)(v11 + 16);
    v34[1] = v13;
    unint64_t v14 = *(void *)(sub_EB935C(*(void *)a1, v7) + 88);
    uint64_t v15 = sub_EB935C(*(void *)a1, v7);
    long long v16 = *(_OWORD *)(v15 + 144);
    v32[2] = *(_OWORD *)(v15 + 128);
    v32[3] = v16;
    uint64_t v33 = *(void *)(v15 + 160);
    long long v17 = *(_OWORD *)(v15 + 112);
    v32[0] = *(_OWORD *)(v15 + 96);
    v32[1] = v17;
    sub_ECF030(*(void *)(v8 + 16), (uint64_t)&v30);
    int v18 = sub_ECF3AC(&v30, v10, (unsigned int *)v34, v14, (unsigned int *)v32, *(void *)(a1 + 16), *(void *)(v8 + 16));
    *(_OWORD *)(a4 + 8) = v30;
    *(_DWORD *)(a4 + 24) = v31;
    goto LABEL_15;
  }
  int v19 = **(_DWORD **)(a1 + 32);
  int v20 = *a3;
  if (*a3 < 0) {
    char v21 = -5;
  }
  else {
    char v21 = 5;
  }
  char v22 = v21 + *a3 % 10;
  if (**(unsigned char **)(a1 + 24))
  {
    int v23 = v20 / -10 + v19 + (((-103 * v22) >> 15) & 1) + ((-103 * v22) >> 10);
    int v20 = (**(_DWORD **)(a1 + 40) - v20) & ~((**(_DWORD **)(a1 + 40) - v20) >> 31);
    if (sub_EB9330(*(void *)a1, a2)) {
      goto LABEL_9;
    }
LABEL_12:
    uint64_t v24 = 0;
    if (!sub_EB9330(*(void *)a1, v7)) {
      goto LABEL_10;
    }
LABEL_13:
    unsigned int v25 = *(_DWORD *)(sub_EB935C(*(void *)a1, v7) + 16);
    goto LABEL_14;
  }
  int v23 = *a3 / 10 + v19 + (((103 * v22) >> 15) & 1) + ((103 * v22) >> 10);
  if (!sub_EB9330(*(void *)a1, a2)) {
    goto LABEL_12;
  }
LABEL_9:
  uint64_t v24 = *(unsigned int *)(sub_EB935C(*(void *)a1, a2) + 96);
  if (sub_EB9330(*(void *)a1, v7)) {
    goto LABEL_13;
  }
LABEL_10:
  unsigned int v25 = 0;
LABEL_14:
  int v18 = sub_ED16BC(v8, a2, a4, *(void *)a1, *(void **)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), v23, v20, 0, v24, SHIDWORD(v24), v25);
LABEL_15:
  a3[1] = v18;
  return *(_DWORD *)a4 == -1 || *(_DWORD *)(a4 + 28) == -1 || *(_DWORD *)(a4 + 32) == -1 || v18 == 0x7FFFFFFF;
}

void sub_ED4B90()
{
  unk_25FC7E7 = 16641;
  word_25FC7D0 = 65;
  byte_25FC7FF = 1;
  byte_25FC7E9 = 0;
}

double *sub_ED4BB8(double *a1, void *a2)
{
  __p = operator new(0x28uLL);
  long long v12 = xmmword_20B8FD0;
  strcpy((char *)__p, "disconnected_transition_base_penalty");
  if (sub_58070(a2, (uint64_t)&__p))
  {
    uint64_t v4 = (void *)sub_560F4(a2, (uint64_t)&__p);
    *(void *)a1 = sub_ED57A0(v4);
    *((void *)a1 + 1) = v5;
    if ((SHIBYTE(v12) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    *a1 = NAN;
    a1[1] = NAN;
    if ((SHIBYTE(v12) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  operator delete(__p);
LABEL_3:
  __p = operator new(0x19uLL);
  long long v12 = xmmword_20B9250;
  strcpy((char *)__p, "waypoint_u_turn_penalty");
  if (sub_58070(a2, (uint64_t)&__p))
  {
    uint64_t v6 = (void *)sub_560F4(a2, (uint64_t)&__p);
    *((void *)a1 + 2) = sub_ED57A0(v6);
    *((void *)a1 + 3) = v7;
    if ((SHIBYTE(v12) & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  else
  {
    a1[2] = NAN;
    a1[3] = NAN;
    if ((SHIBYTE(v12) & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  operator delete(__p);
LABEL_5:
  __p = operator new(0x30uLL);
  long long v12 = xmmword_20B9380;
  strcpy((char *)__p, "disconnected_transition_distance_penalty_factor");
  double v8 = sub_5C7E8(a2, (uint64_t)&__p);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p);
  }
  a1[4] = v8;
  __p = operator new(0x30uLL);
  long long v12 = xmmword_20B93B0;
  strcpy((char *)__p, "disconnected_transition_ev_consumption_factor");
  double v9 = sub_5C7E8(a2, (uint64_t)&__p);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p);
  }
  a1[5] = v9;
  __p = operator new(0x28uLL);
  long long v12 = xmmword_20E12D0;
  strcpy((char *)__p, "disconnected_transition_max_distance_m");
  *((void *)a1 + 6) = sub_5CDE0(a2, &__p);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p);
  }
  return a1;
}

void sub_ED4E10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_ED4E3C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v12 = 0;
  long long v13 = operator new(0x20uLL);
  long long v14 = xmmword_20B91A0;
  strcpy((char *)v13, "WaypointTransitionEvaluator");
  __p = 0;
  uint64_t v11 = 0;
  uint64_t v5 = sub_374CDC(v4, (uint64_t)&v13, (uint64_t *)&__p);
  sub_ED4BB8((double *)a1, v5);
  uint64_t v6 = (void **)__p;
  if (__p)
  {
    uint64_t v7 = v11;
    double v8 = __p;
    if (v11 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0) {
          operator delete(*(v7 - 3));
        }
        v7 -= 3;
      }
      while (v7 != v6);
      double v8 = __p;
    }
    uint64_t v11 = v6;
    operator delete(v8);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(v13);
  }
  *(void *)(a1 + 56) = a2;
  *(void *)(a1 + 64) = sub_3750CC((void *)*a2);
  return a1;
}

void sub_ED4F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

unint64_t sub_ED4F5C(uint64_t a1, unint64_t a2, unsigned int *a3, unint64_t a4, unsigned int *a5)
{
  unint64_t v7 = HIDWORD(a2);
  unint64_t v8 = (HIDWORD(a2) & 0xFFFE0000FFFFFFFFLL | (((a2 >> 1) & 1) << 48) | ((unint64_t)WORD1(a2) << 32)) ^ 0x1000000000000;
  unsigned int v9 = *a3;
  unint64_t v10 = (HIDWORD(a4) & 0xFFFE0000FFFFFFFFLL | (((a4 >> 1) & 1) << 48) | ((unint64_t)WORD1(a4) << 32)) ^ 0x1000000000000;
  unsigned int v11 = *a5;
  if (v7 == HIDWORD(a4) && (unsigned __int16)WORD1(a2) == (unsigned __int16)WORD1(a4))
  {
    if ((HIWORD(v8) == 0) != (HIWORD(v10) != 0) && v11 == v9)
    {
      unsigned int v12 = 0;
      uint64_t v13 = 0;
      return v12 | (unint64_t)(v13 << 32);
    }
    if ((((a2 << 47) & 0x1000000000000) == 0) != (HIWORD(v10) != 0) && v11 == 1000000000 - v9)
    {
      unsigned int v12 = *(_DWORD *)(a1 + 16);
      uint64_t v13 = *(unsigned int *)(a1 + 20);
      return v12 | (unint64_t)(v13 << 32);
    }
  }
  sub_2954EC(*(void *)(a1 + 64), v8, (uint64_t)v58);
  unint64_t v54 = sub_2E1AA4((uint64_t)v58);
  int v55 = v14;
  unint64_t v56 = sub_2E40A4((uint64_t)v58);
  int v57 = v15;
  uint64_t v16 = sub_ED554C((uint64_t)&v54, 0, (double)v9 / 1000000000.0);
  sub_2954EC(*(void *)(a1 + 64), v10, (uint64_t)v51);
  unint64_t v47 = sub_2E1AA4((uint64_t)v51);
  int v48 = v17;
  unint64_t v49 = sub_2E40A4((uint64_t)v51);
  int v50 = v18;
  unint64_t v19 = sub_ED554C((uint64_t)&v47, 0, (double)v11 / 1000000000.0);
  BOOL v20 = v16 == -1 && HIDWORD(v16) == -1;
  if (v20 || (unsigned int v21 = v19, v22 = HIDWORD(v19), (HIDWORD(v19) & v19) == 0xFFFFFFFF))
  {
    uint64_t v38 = 0x7FFFFFFFFFFFFFFFLL;
    if (*(void *)(a1 + 48) == 0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_41;
    }
    goto LABEL_20;
  }
  long double v23 = exp(3.14159265 - (double)HIDWORD(v16) * 6.28318531 / 4294967300.0);
  long double v24 = atan((v23 - 1.0 / v23) * 0.5) * 57.2957795 * 0.0174532925;
  v25.i64[0] = v16;
  v25.i64[1] = v21;
  long double v26 = exp(3.14159265 - (double)v22 * 6.28318531 / 4294967300.0);
  long double v27 = atan((v26 - 1.0 / v26) * 0.5) * 57.2957795 * 0.0174532925;
  int64x2_t v28 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v25), (float64x2_t)vdupq_n_s64(0x4076800000000000uLL)), (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL)), (float64x2_t)vdupq_n_s64(0xC066800000000000)), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
  double v46 = vsubq_f64((float64x2_t)v28, (float64x2_t)vdupq_laneq_s64(v28, 1)).f64[0];
  long double v29 = sin((v24 - v27) * 0.5);
  long double v30 = v29 * v29;
  double v31 = cos(v24);
  long double v32 = v31 * cos(v27);
  long double v33 = sin(0.5 * v46);
  long double v34 = atan2(sqrt(v33 * v33 * v32 + v30), sqrt(1.0 - (v33 * v33 * v32 + v30)));
  double v35 = (v34 + v34) * 6372797.56 * 100.0;
  if (v35 >= 0.0)
  {
    double v36 = v35;
    if (v35 >= 4.50359963e15) {
      goto LABEL_28;
    }
    uint64_t v37 = (uint64_t)(v35 + v35) + 1;
  }
  else
  {
    double v36 = v35;
    if (v35 <= -4.50359963e15) {
      goto LABEL_28;
    }
    uint64_t v37 = (uint64_t)(v35 + v35);
    if (v37 >= 1) {
      --v37;
    }
  }
  double v36 = (double)(v37 >> 1);
LABEL_28:
  if (v36 < 9.22337204e18)
  {
    if (v35 >= 0.0)
    {
      if (v35 >= 4.50359963e15) {
        goto LABEL_40;
      }
      uint64_t v41 = (uint64_t)(v35 + v35) + 1;
    }
    else
    {
      if (v35 <= -4.50359963e15) {
        goto LABEL_40;
      }
      uint64_t v41 = (uint64_t)(v35 + v35);
      if (v41 >= 1) {
        --v41;
      }
    }
    double v35 = (double)(v41 >> 1);
LABEL_40:
    uint64_t v38 = (uint64_t)v35;
    if ((uint64_t)v35 <= *(void *)(a1 + 48)) {
      goto LABEL_41;
    }
LABEL_20:
    uint64_t v13 = 0x7FFFFFFFLL;
    unsigned int v12 = -1;
    uint64_t v39 = __p;
    if (!__p) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  uint64_t v38 = 0x7FFFFFFFFFFFFFFELL;
  if (*(void *)(a1 + 48) != 0x7FFFFFFFFFFFFFFFLL && *(void *)(a1 + 48) != 0x7FFFFFFFFFFFFFFELL) {
    goto LABEL_20;
  }
LABEL_41:
  double v42 = (double)v38 / 100000.0 / 20.0 * 60.0 * 60.0 * 10.0;
  if (v42 >= 0.0)
  {
    if (v42 >= 4.50359963e15) {
      goto LABEL_49;
    }
    uint64_t v43 = (uint64_t)(v42 + v42) + 1;
  }
  else
  {
    if (v42 <= -4.50359963e15) {
      goto LABEL_49;
    }
    uint64_t v43 = (uint64_t)(v42 + v42);
    if (v43 >= 1) {
      --v43;
    }
  }
  double v42 = (double)(v43 >> 1);
LABEL_49:
  double v44 = *(double *)(a1 + 32) * (double)(int)v42;
  if (v44 >= 0.0)
  {
    if (v44 >= 4.50359963e15) {
      goto LABEL_57;
    }
    uint64_t v45 = (uint64_t)(v44 + v44) + 1;
  }
  else
  {
    if (v44 <= -4.50359963e15) {
      goto LABEL_57;
    }
    uint64_t v45 = (uint64_t)(v44 + v44);
    if (v45 >= 1) {
      --v45;
    }
  }
  double v44 = (double)(v45 >> 1);
LABEL_57:
  uint64_t v13 = (*(_DWORD *)(a1 + 4) + (int)v44);
  unsigned int v12 = *(_DWORD *)a1 + (int)v44;
  uint64_t v39 = __p;
  if (__p)
  {
LABEL_21:
    int v53 = v39;
    operator delete(v39);
  }
LABEL_22:
  if (v59)
  {
    unint64_t v60 = v59;
    operator delete(v59);
  }
  return v12 | (unint64_t)(v13 << 32);
}

void sub_ED54DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  if (__p)
  {
    operator delete(__p);
    uint64x2_t v25 = a23;
    if (!a23) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64x2_t v25 = a23;
    if (!a23) {
      goto LABEL_3;
    }
  }
  operator delete(v25);
  _Unwind_Resume(exception_object);
}

uint64_t sub_ED554C(uint64_t a1, char a2, double a3)
{
  char v16 = a2;
  uint64_t v15 = 0;
  *(_OWORD *)unsigned int v9 = 0u;
  *(_OWORD *)__p = 0u;
  long long v11 = 0u;
  char v14 = 0;
  uint64_t v5 = (unsigned int *)(a1 + 12);
  sub_33150(a1, (unsigned int *)(a1 + 12), 0.0);
  double v13 = (v6 + 0.0) * a3;
  v12[0] = &v14;
  v12[1] = v9;
  v12[2] = &v16;
  v12[3] = &v15;
  v12[4] = &v13;
  sub_33350((uint64_t)v12, a1, v5);
  uint64_t v7 = *(void *)((char *)v9[1] - 12);
  if (__p[1])
  {
    *(void **)&long long v11 = __p[1];
    operator delete(__p[1]);
  }
  if (v9[0])
  {
    v9[1] = v9[0];
    operator delete(v9[0]);
  }
  return v7;
}

void sub_ED561C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    operator delete(__p);
    char v14 = a9;
    if (!a9) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    char v14 = a9;
    if (!a9) {
      goto LABEL_3;
    }
  }
  operator delete(v14);
  _Unwind_Resume(exception_object);
}

void sub_ED5668(uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned int *a3@<X2>, unint64_t a4@<X3>, unsigned int *a5@<X4>, __n128 *a6@<X8>)
{
  unint64_t v8 = sub_ED4F5C(a1, a2, a3, a4, a5);
  *(void *)&long long v17 = v8;
  *((void *)&v17 + 1) = v9;
  if (v8 != -1 && (v8 & 0xFFFFFFFF00000000) != 0x7FFFFFFF00000000 && v9 != 0x7FFFFFFFFFFFFFFFLL)
  {
    if (!v9)
    {
      uint64_t v13 = sub_40AB18();
LABEL_18:
      v16.n128_u64[0] = v13;
      v16.n128_u64[1] = v14;
      sub_3FAF7C(a6, &v17, &v16);
      return;
    }
    double v10 = (double)v9 / 100000.0 * *(double *)(a1 + 40);
    double v11 = v10 * (double)(int)sub_3FD94C(*(void *)(*(void *)(a1 + 56) + 8));
    if (v11 >= 0.0)
    {
      if (v11 < 4.50359963e15)
      {
        uint64_t v12 = (uint64_t)(v11 + v11) + 1;
LABEL_16:
        double v11 = (double)(v12 >> 1);
      }
    }
    else if (v11 > -4.50359963e15)
    {
      uint64_t v12 = (uint64_t)(v11 + v11);
      if (v12 >= 1) {
        --v12;
      }
      goto LABEL_16;
    }
    int v15 = (int)v11;
    uint64_t v13 = sub_40AB04(&v15);
    goto LABEL_18;
  }

  sub_3FAF3C(a6);
}

unint64_t sub_ED57A0(void *a1)
{
  char v8 = 4;
  strcpy((char *)__p, "cost");
  double v2 = sub_5C7E8(a1, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  char v8 = 4;
  strcpy((char *)__p, "time");
  double v3 = sub_5C7E8(a1, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  char v8 = 6;
  strcpy((char *)__p, "length");
  double v4 = sub_5C7E8(a1, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  BOOL v5 = v2 < 0.0;
  if (v3 < 0.0) {
    BOOL v5 = 1;
  }
  if (v4 < 0.0) {
    BOOL v5 = 1;
  }
  if (v5) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    return v2 | ((unint64_t)(int)v3 << 32);
  }
}

void sub_ED58BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_ED58E0()
{
  unk_25FC817 = 16641;
  word_25FC800 = 65;
  byte_25FC82F = 1;
  byte_25FC819 = 0;
}

BOOL *sub_ED5908(BOOL *a1, void *a2)
{
  strcpy((char *)__p, "obey_turn_restrictions");
  HIBYTE(__p[2]) = 22;
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *a1 = v4;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9800;
  strcpy((char *)__p[0], "allow_single_digitized_u_turns");
  BOOL v5 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  a1[1] = v5;
  return a1;
}

void sub_ED59DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_ED59FC(uint64_t a1, unsigned __int16 a2, int **a3, int **a4, int a5, uint64_t a6, int a7, int a8, char a9, char a10, uint64_t a11)
{
  if (a7) {
    uint64_t v12 = a3;
  }
  else {
    uint64_t v12 = a4;
  }
  int v13 = a2 >> 2;
  if (a7) {
    int v14 = a2 >> 2;
  }
  else {
    int v14 = a5;
  }
  if (a7) {
    int v15 = a4;
  }
  else {
    int v15 = a3;
  }
  if (a7) {
    int v13 = a5;
  }
  if ((a2 & 1) == 0) {
    goto LABEL_31;
  }
  __n128 v16 = *a4;
  long long v17 = (unsigned __int16 *)((char *)*a4 - **a4);
  unsigned int v18 = *v17;
  if (*((unsigned char *)a4 + 38))
  {
    if (v18 < 0x47)
    {
      if (v18 <= 0x38) {
        goto LABEL_31;
      }
      goto LABEL_23;
    }
    if (!v17[35] || (unsigned int v19 = *(int *)((char *)v16 + v17[35]), (v19 & 2) == 0))
    {
LABEL_23:
      uint64_t v21 = v17[28];
      if (!v21) {
        goto LABEL_31;
      }
      unsigned int v22 = *(int *)((char *)v16 + v21);
      if ((v22 & 2) != 0) {
        goto LABEL_143;
      }
      goto LABEL_29;
    }
LABEL_21:
    int v20 = (v19 >> 2) & 1;
    goto LABEL_32;
  }
  if (v18 < 0x47)
  {
    if (v18 <= 0x38) {
      goto LABEL_31;
    }
  }
  else if (v17[35])
  {
    unsigned int v19 = *(int *)((char *)v16 + v17[35]);
    if (v19) {
      goto LABEL_21;
    }
  }
  uint64_t v23 = v17[28];
  if (!v23) {
    goto LABEL_31;
  }
  unsigned int v22 = *(int *)((char *)v16 + v23);
  if ((v22 & 1) == 0)
  {
LABEL_29:
    if ((v22 & 7) == 4 || (v22 & 0x23) == 0x20) {
      goto LABEL_143;
    }
LABEL_31:
    LOBYTE(v20) = 0;
    goto LABEL_32;
  }
LABEL_143:
  int v20 = (v22 >> 8) & 1;
LABEL_32:
  long long v24 = *((_OWORD *)v12 + 1);
  long long v59 = *(_OWORD *)v12;
  long long v60 = v24;
  long long v25 = *((_OWORD *)v15 + 1);
  *(_OWORD *)&v61[8] = *(_OWORD *)v15;
  if (a7) {
    char v26 = a2;
  }
  else {
    char v26 = v20;
  }
  if (!a7) {
    LOBYTE(v20) = a2;
  }
  *(void *)unint64_t v61 = v12[4];
  *(_OWORD *)&v61[24] = v25;
  *(void *)&v61[40] = v15[4];
  LODWORD(v62) = v14 | (v13 << 16);
  if (v20) {
    char v27 = 2;
  }
  else {
    char v27 = 0;
  }
  if (a8) {
    char v28 = 4;
  }
  else {
    char v28 = 0;
  }
  BYTE4(v62) = v28 & 0xFE | v26 & 1 | v27;
  double result = sub_3DB530((char **)a11, (uint64_t)&v59);
  long double v30 = (char *)*v12;
  double v31 = (unsigned __int16 *)((char *)*v12 - **v12);
  unsigned int v32 = *v31;
  if (!*((unsigned char *)v12 + 38))
  {
    if (v32 < 0x47)
    {
      if (v32 <= 0x38) {
        goto LABEL_61;
      }
    }
    else if (v31[35])
    {
      unsigned int v33 = *(_DWORD *)&v30[v31[35]];
      if (v33) {
        goto LABEL_51;
      }
    }
    uint64_t v34 = v31[28];
    if (!v31[28]) {
      goto LABEL_63;
    }
    unsigned int v35 = *(_DWORD *)&v30[v34];
    if (v35) {
      goto LABEL_62;
    }
    goto LABEL_59;
  }
  if (v32 < 0x47)
  {
    if (v32 > 0x38) {
      goto LABEL_53;
    }
LABEL_61:
    LOBYTE(v34) = 0;
    goto LABEL_63;
  }
  if (v31[35])
  {
    unsigned int v33 = *(_DWORD *)&v30[v31[35]];
    if ((v33 & 2) != 0)
    {
LABEL_51:
      LODWORD(v34) = (v33 >> 2) & 1;
      goto LABEL_63;
    }
  }
LABEL_53:
  uint64_t v34 = v31[28];
  if (!v31[28]) {
    goto LABEL_63;
  }
  unsigned int v35 = *(_DWORD *)&v30[v34];
  if ((v35 & 2) != 0) {
    goto LABEL_62;
  }
LABEL_59:
  if ((v35 & 7) != 4 && (v35 & 0x23) != 0x20) {
    goto LABEL_61;
  }
LABEL_62:
  LODWORD(v34) = (v35 >> 8) & 1;
LABEL_63:
  double v36 = (char *)*v15;
  uint64_t v37 = (unsigned __int16 *)((char *)*v15 - **v15);
  unsigned int v38 = *v37;
  if (!*((unsigned char *)v15 + 38))
  {
    if (v38 < 0x47)
    {
      if (v38 <= 0x38) {
        goto LABEL_82;
      }
    }
    else if (v37[35])
    {
      unsigned int v39 = *(_DWORD *)&v36[v37[35]];
      if (v39) {
        goto LABEL_71;
      }
    }
    uint64_t v40 = v37[28];
    if (!v37[28]) {
      goto LABEL_83;
    }
    unsigned int v42 = *(_DWORD *)&v36[v40];
    if (v42) {
      goto LABEL_93;
    }
    goto LABEL_80;
  }
  if (v38 >= 0x47)
  {
    if (!v37[35]) {
      goto LABEL_74;
    }
    unsigned int v39 = *(_DWORD *)&v36[v37[35]];
    if ((v39 & 2) == 0) {
      goto LABEL_74;
    }
LABEL_71:
    LODWORD(v40) = (v39 >> 2) & 1;
    BOOL v41 = v32 >= 0x47;
    if (!*((unsigned char *)v12 + 38)) {
      goto LABEL_94;
    }
    goto LABEL_84;
  }
  if (v38 > 0x38)
  {
LABEL_74:
    uint64_t v40 = v37[28];
    if (!v37[28]) {
      goto LABEL_83;
    }
    unsigned int v42 = *(_DWORD *)&v36[v40];
    if ((v42 & 2) != 0) {
      goto LABEL_93;
    }
LABEL_80:
    double result = (char *)(v42 & 7);
    if (result == 4 || (double result = (char *)(v42 & 0x23), result == 32))
    {
LABEL_93:
      LODWORD(v40) = (v42 >> 8) & 1;
      BOOL v41 = v32 >= 0x47;
      if (!*((unsigned char *)v12 + 38)) {
        goto LABEL_94;
      }
LABEL_84:
      if (v41)
      {
        if (v31[35])
        {
          unsigned int v43 = *(_DWORD *)&v30[v31[35]];
          if ((v43 & 2) != 0) {
            goto LABEL_98;
          }
        }
      }
      else if (v32 <= 0x38)
      {
        goto LABEL_105;
      }
      uint64_t v44 = v31[28];
      if (!v44) {
        goto LABEL_105;
      }
      unsigned int v45 = *(_DWORD *)&v30[v44];
      if ((v45 & 2) != 0) {
        goto LABEL_115;
      }
      goto LABEL_103;
    }
  }
LABEL_82:
  LODWORD(v40) = 0;
LABEL_83:
  BOOL v41 = v32 >= 0x47;
  if (*((unsigned char *)v12 + 38)) {
    goto LABEL_84;
  }
LABEL_94:
  if (!v41)
  {
    if (v32 <= 0x38) {
      goto LABEL_105;
    }
LABEL_101:
    uint64_t v48 = v31[28];
    if (!v48) {
      goto LABEL_105;
    }
    unsigned int v45 = *(_DWORD *)&v30[v48];
    if (v45)
    {
LABEL_115:
      int v46 = (v45 >> 8) & 1;
      BOOL v47 = v38 >= 0x47;
      if (*((unsigned char *)v15 + 38)) {
        goto LABEL_106;
      }
      goto LABEL_116;
    }
LABEL_103:
    if ((v45 & 7) != 4 && (v45 & 0x23) != 0x20)
    {
LABEL_105:
      int v46 = 0;
      BOOL v47 = v38 >= 0x47;
      if (*((unsigned char *)v15 + 38)) {
        goto LABEL_106;
      }
      goto LABEL_116;
    }
    goto LABEL_115;
  }
  if (!v31[35]) {
    goto LABEL_101;
  }
  unsigned int v43 = *(_DWORD *)&v30[v31[35]];
  if ((v43 & 1) == 0) {
    goto LABEL_101;
  }
LABEL_98:
  int v46 = (v43 >> 2) & 1;
  BOOL v47 = v38 >= 0x47;
  if (*((unsigned char *)v15 + 38))
  {
LABEL_106:
    if (!v47)
    {
      if (v38 <= 0x38) {
        goto LABEL_127;
      }
LABEL_112:
      if (!v37[28]) {
        goto LABEL_127;
      }
      int v50 = *(_DWORD *)&v36[v37[28]];
      if ((v50 & 2) != 0) {
        goto LABEL_129;
      }
      goto LABEL_125;
    }
    if (!v37[35]) {
      goto LABEL_112;
    }
    int v49 = *(_DWORD *)&v36[v37[35]];
    if ((v49 & 2) == 0) {
      goto LABEL_112;
    }
LABEL_120:
    if (v46 == ((v49 & 4) != 0)) {
      return result;
    }
    goto LABEL_130;
  }
LABEL_116:
  if (v47)
  {
    if (v37[35])
    {
      int v49 = *(_DWORD *)&v36[v37[35]];
      if (v49) {
        goto LABEL_120;
      }
    }
  }
  else if (v38 <= 0x38)
  {
    goto LABEL_127;
  }
  if (!v37[28]) {
    goto LABEL_127;
  }
  int v50 = *(_DWORD *)&v36[v37[28]];
  if ((v50 & 1) == 0)
  {
LABEL_125:
    if ((v50 & 7) != 4 && (v50 & 0x23) != 0x20)
    {
LABEL_127:
      if ((v46 & 1) == 0) {
        return result;
      }
      goto LABEL_130;
    }
  }
LABEL_129:
  if (v46 == ((v50 & 0x100) != 0)) {
    return result;
  }
LABEL_130:
  if (v40 & a7)
  {
    if (!a10) {
      return result;
    }
  }
  else if (v34 & a10) != 1 || (a7)
  {
    return result;
  }
  uint64_t v51 = *(void *)(a11 + 8);
  long long v52 = *(_OWORD *)(v51 - 72);
  long long v59 = *(_OWORD *)(v51 - 88);
  long long v60 = v52;
  long long v53 = *(_OWORD *)(v51 - 40);
  long long v54 = *(_OWORD *)(v51 - 24);
  long long v55 = *(_OWORD *)(v51 - 56);
  uint64_t v62 = *(void *)(v51 - 8);
  *(_OWORD *)&v61[16] = v53;
  *(_OWORD *)&v61[32] = v54;
  *(_OWORD *)unint64_t v61 = v55;
  char v56 = *(unsigned char *)(v51 - 4);
  if (a7) {
    char v57 = 2;
  }
  else {
    char v57 = 1;
  }
  if (a7) {
    char v58 = -3;
  }
  else {
    char v58 = -2;
  }
  BYTE4(v62) = (BYTE4(v62) & v58 | v56 & v57) ^ v57;
  return sub_3DB530((char **)a11, (uint64_t)&v59);
}

uint64_t sub_ED5EC0(int **a1, int **a2, int ***a3, int a4, char a5, int a6)
{
  double v6 = *a1;
  if (*((_DWORD *)a1 + 8)) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)&v158);
      sub_188FC78(&v158, (uint64_t)"The from_segment is invalid. Returning early without valid crossing information.", 80);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 3u);
LABEL_15:
      if (v157 < 0) {
        operator delete(__p[0]);
      }
      if (v161 < 0) {
        operator delete(v160);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
LABEL_20:
    unsigned __int16 v11 = 0;
    LOWORD(v12) = 640;
    return (unsigned __int16)v12 | (v11 << 16);
  }
  uint64_t v9 = *a2;
  if (*((_DWORD *)a2 + 8)) {
    BOOL v10 = v9 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10)
  {
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)&v158);
      sub_188FC78(&v158, (uint64_t)"The to_segment is invalid. Returning early without valid crossing information.", 78);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 3u);
      goto LABEL_15;
    }
    goto LABEL_20;
  }
  unint64_t v16 = (unint64_t)a1[4] ^ 0x1000000000000;
  if (a4)
  {
    unint64_t v16 = (unint64_t)a1[4];
    unint64_t v17 = (unint64_t)a2[4] ^ 0x1000000000000;
  }
  else
  {
    unint64_t v17 = (unint64_t)a2[4];
  }
  unsigned int v18 = (unsigned __int16 *)((char *)v6 - *v6);
  unsigned int v19 = *v18;
  if (v19 < 0xB)
  {
    LODWORD(v20) = 0;
    goto LABEL_32;
  }
  uint64_t v20 = v18[5];
  if (v18[5]) {
    LODWORD(v20) = *((unsigned __int8 *)v6 + v20 + 1) >> 7;
  }
  if (v19 < 0x1B || (uint64_t v21 = v18[13]) == 0)
  {
LABEL_32:
    unsigned int v22 = 0;
    uint64_t v23 = (unsigned __int16 *)((char *)v9 - *v9);
    if (*v23 < 0x1Bu) {
      goto LABEL_38;
    }
    goto LABEL_33;
  }
  unsigned int v22 = *((unsigned __int8 *)v6 + v21);
  uint64_t v23 = (unsigned __int16 *)((char *)v9 - *v9);
  if (*v23 < 0x1Bu)
  {
LABEL_38:
    unsigned int v12 = 0;
    char v27 = *a3;
    char v26 = a3[1];
    if (!a6) {
      goto LABEL_48;
    }
    goto LABEL_39;
  }
LABEL_33:
  uint64_t v24 = v23[13];
  if (!v24) {
    goto LABEL_38;
  }
  unsigned int v25 = *((unsigned __int8 *)v9 + v24);
  if (v25 >= v22) {
    LOBYTE(v25) = v22;
  }
  unsigned int v12 = (v25 & 0xF) << 6;
  char v27 = *a3;
  char v26 = a3[1];
  if (!a6) {
    goto LABEL_48;
  }
LABEL_39:
  if (v27 == v26) {
    goto LABEL_60;
  }
  char v28 = v27;
  do
  {
    long double v30 = (unsigned __int16 *)((char *)*v28 - **v28);
    if (*v30 >= 0x1Bu && (uint64_t v31 = v30[13]) != 0) {
      unsigned int v29 = *((unsigned __int8 *)*v28 + v31);
    }
    else {
      unsigned int v29 = 0;
    }
    if (v29 >= ((v12 >> 6) & 0xF)) {
      unsigned int v29 = (v12 >> 6) & 0xF;
    }
    unsigned int v12 = v12 & 0xFFFFFC3F | (v29 << 6);
    v28 += 5;
  }
  while (v28 != v26);
LABEL_48:
  if (v27 == v26) {
    goto LABEL_60;
  }
  uint64_t v32 = v16 & 0xFFFFFFFFFFFFLL;
  uint64_t v33 = HIWORD(v16) & 1;
  uint64_t v34 = v27;
  while (1)
  {
    unint64_t v35 = (unint64_t)v34[4];
    if (v35 & 0xFFFFFFFFFFFFLL) == v32 && ((v33 ^ ((v35 & 0xFF000000000000) == 0))) {
      break;
    }
    v34 += 5;
    if (v34 == v26) {
      goto LABEL_60;
    }
  }
  uint64_t v155 = v34;
  if (v34 == v26)
  {
LABEL_60:
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)&v158);
      BOOL v41 = sub_188FC78(&v158, (uint64_t)"The from_segment (", 18);
LABEL_62:
      std::ostream::operator<<();
      sub_188FC78(v41, (uint64_t)") could not be found in the sorted junction segments.", 53);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 3u);
      if (v157 < 0) {
        operator delete(__p[0]);
      }
      if (v161 < 0) {
        operator delete(v160);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
LABEL_67:
    unsigned __int16 v11 = 0;
    return (unsigned __int16)v12 | (v11 << 16);
  }
  uint64_t v36 = v17 & 0xFFFFFFFFFFFFLL;
  uint64_t v37 = HIWORD(v17) & 1;
  unsigned int v38 = v27;
  while (1)
  {
    unsigned int v39 = v38[4];
    if (((unint64_t)v39 & 0xFFFFFFFFFFFFLL) == v36
      && ((v37 ^ (((unint64_t)v39 & 0xFF000000000000) == 0)) & 1) != 0)
    {
      break;
    }
    v38 += 5;
    if (v38 == v26) {
      goto LABEL_69;
    }
  }
  uint64_t v154 = v38;
  if (v38 == v26)
  {
LABEL_69:
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)&v158);
      BOOL v41 = sub_188FC78(&v158, (uint64_t)"The to_segment (", 16);
      goto LABEL_62;
    }
    goto LABEL_67;
  }
  int v40 = v12 | 0x800;
  int v152 = v37;
  uint64_t v153 = v36;
  while (1)
  {
    unsigned int v43 = *v27;
    int v44 = *((unsigned __int8 *)v27 + 38);
    unsigned int v45 = (unsigned __int16 *)((char *)*v27 - **v27);
    unsigned int v46 = *v45;
    if (a4) {
      break;
    }
    if (*((unsigned char *)v27 + 38))
    {
      if (v46 < 0x4D)
      {
LABEL_83:
        int v44 = 1;
        if (v46 < 0x1B) {
          goto LABEL_102;
        }
        goto LABEL_96;
      }
      unsigned int v47 = v45[38];
      if (!v45[38])
      {
LABEL_82:
        int v44 = 1;
        goto LABEL_96;
      }
LABEL_87:
      int v48 = 4;
      goto LABEL_91;
    }
    if (v46 < 0x4D)
    {
LABEL_93:
      int v44 = 0;
      if (v46 < 0x1B) {
        goto LABEL_102;
      }
      goto LABEL_96;
    }
    unsigned int v47 = v45[38];
    if (v45[38]) {
      goto LABEL_90;
    }
LABEL_95:
    int v44 = 0;
LABEL_96:
    if (v45[13])
    {
      if (*((unsigned __int8 *)v43 + v45[13]) > 5u || (v40 & 0x800) == 0) {
        goto LABEL_73;
      }
      goto LABEL_103;
    }
LABEL_102:
    if ((v40 & 0x800) == 0) {
      goto LABEL_73;
    }
LABEL_103:
    if (a4)
    {
      if (!v44) {
        goto LABEL_109;
      }
    }
    else if (v44)
    {
LABEL_109:
      if (v46 < 0xB) {
        goto LABEL_73;
      }
      unsigned int v50 = v45[5];
      if (!v50) {
        goto LABEL_73;
      }
      int v51 = 1;
      goto LABEL_112;
    }
    if (v46 < 0xB) {
      goto LABEL_73;
    }
    unsigned int v50 = v45[5];
    if (!v50) {
      goto LABEL_73;
    }
    int v51 = 2;
LABEL_112:
    int v52 = *(int *)((char *)v43 + v50);
    if ((v52 & v51) == 0) {
      goto LABEL_73;
    }
    long long v53 = v27[1];
    if (v53 && (long long v54 = (unsigned __int16 *)((char *)v53 - *v53), *v54 >= 0x11u) && (v55 = v54[8]) != 0)
    {
      if (*(_WORD *)((unsigned char *)v53 + v55) & 4 | v52 & 0x10000) {
        goto LABEL_73;
      }
    }
    else if ((v52 & 0x10000) != 0)
    {
      goto LABEL_73;
    }
    if ((v52 & 0x4000000) != 0) {
      goto LABEL_73;
    }
    int v150 = v20;
    if (a4)
    {
      if (sub_ED8D5C(v27)) {
        goto LABEL_72;
      }
    }
    else if (sub_ED8DC0(v27))
    {
      goto LABEL_72;
    }
    v40 &= ~0x800u;
LABEL_72:
    uint64_t v36 = v153;
    LODWORD(v20) = v150;
LABEL_73:
    v27 += 5;
    if (v27 == v26) {
      goto LABEL_125;
    }
  }
  if (!*((unsigned char *)v27 + 38))
  {
    if (v46 < 0x4D) {
      goto LABEL_93;
    }
    unsigned int v47 = v45[38];
    if (v45[38]) {
      goto LABEL_87;
    }
    goto LABEL_95;
  }
  if (v46 < 0x4D) {
    goto LABEL_83;
  }
  unsigned int v47 = v45[38];
  if (!v45[38]) {
    goto LABEL_82;
  }
LABEL_90:
  int v48 = 8;
LABEL_91:
  if ((*(int *)((char *)v43 + v47) & v48) == 0) {
    goto LABEL_96;
  }
  v40 |= 0x800u;
LABEL_125:
  unsigned int v56 = v40 | 0x7000;
  char v58 = *a3;
  char v57 = a3[1];
  if (v20)
  {
    long long v59 = a3[1];
    if (v57 != v58)
    {
      do
      {
        uint64_t v60 = (uint64_t)*(v59 - 1);
        if (v60 & 0xFFFFFFFFFFFFLL) == v32 && ((v33 ^ ((v60 & 0xFF000000000000) == 0))) {
          goto LABEL_232;
        }
        v59 -= 5;
      }
      while (v59 != v58);
      long long v59 = *a3;
    }
LABEL_232:
    unsigned __int16 v11 = 0;
    while (2)
    {
      while (2)
      {
        unsigned int v61 = v56;
        v59 -= 5;
        if (v59 == v58) {
          long long v59 = a3[1];
        }
        uint64_t v94 = (uint64_t)*(v59 - 1);
        if (v94 & 0xFFFFFFFFFFFFLL) == v153 && ((v152 ^ ((v94 & 0xFF000000000000) == 0))) {
          goto LABEL_329;
        }
        uint64_t v95 = v94 & 0xFF000000000000;
        if (a4)
        {
          if ((v94 & 0xFF000000000000) != 0) {
            uint64_t v96 = 0x1FFFFFFFFFFFFFFELL;
          }
          else {
            uint64_t v96 = 0x1FFFFFFFFFFFFFFDLL;
          }
          unint64_t v97 = v59[v96];
          if (!v97) {
            goto LABEL_251;
          }
LABEL_248:
          double v99 = (unsigned __int16 *)((char *)v97 - *v97);
          if (*v99 < 7u) {
            goto LABEL_251;
          }
          uint64_t v100 = v99[3];
          if (!v100) {
            goto LABEL_251;
          }
          __int16 v101 = *(_WORD *)((char *)v97 + v100);
          if (v101 == -1) {
            goto LABEL_251;
          }
        }
        else
        {
          if ((v94 & 0xFF000000000000) != 0) {
            uint64_t v98 = 0x1FFFFFFFFFFFFFFDLL;
          }
          else {
            uint64_t v98 = 0x1FFFFFFFFFFFFFFELL;
          }
          unint64_t v97 = v59[v98];
          if (v97) {
            goto LABEL_248;
          }
LABEL_251:
          __int16 v101 = 0;
        }
        unint64_t v102 = *(v59 - 5);
        uint64_t v103 = (unsigned __int16 *)((char *)v102 - *v102);
        unsigned int v104 = *v103;
        if (v104 < 0x1B)
        {
          LODWORD(v105) = 0;
        }
        else
        {
          uint64_t v105 = v103[13];
          if (v103[13]) {
            LODWORD(v105) = *((unsigned __int8 *)v102 + v105);
          }
        }
        v11 += v101;
        unsigned int v106 = (v61 >> 6) & 0xF;
        if (v106 >= v105) {
          unsigned int v106 = v105;
        }
        unsigned int v56 = v61 & 0xFFFFFC3F | (v106 << 6);
        if ((a5 & 1) == 0)
        {
          if (v95)
          {
            if (v104 >= 0xB)
            {
              uint64_t v107 = v103[5];
              if (v103[5])
              {
                if ((*((unsigned char *)v102 + v107) & 1) == 0)
                {
                  int v108 = 2;
LABEL_268:
                  if ((*(int *)((char *)v102 + v107) & v108) != 0) {
                    continue;
                  }
                }
              }
            }
          }
          else if (v104 >= 0xB)
          {
            uint64_t v107 = v103[5];
            if (v103[5])
            {
              if ((*((unsigned char *)v102 + v107) & 2) == 0)
              {
                int v108 = 1;
                goto LABEL_268;
              }
            }
          }
        }
        break;
      }
      if (v105 <= v22) {
        unsigned __int16 v109 = v56 & 0xFFF8 | (v61 + 1) & 7;
      }
      else {
        unsigned __int16 v109 = v56;
      }
      unsigned int v110 = v56 & 0xFFFFFFC7 | (8 * (((v61 + 8) >> 3) & 7));
      if ((int)v105 + 1 < v22) {
        unsigned __int16 v111 = v110;
      }
      else {
        unsigned __int16 v111 = v109;
      }
      if (v105 > v22) {
        goto LABEL_320;
      }
      if (a4)
      {
        if (v95)
        {
          if (v104 >= 0x39)
          {
            unsigned int v112 = v103[28];
            if (v103[28])
            {
              int v113 = 0x2000;
              goto LABEL_288;
            }
LABEL_295:
            uint64_t v116 = v103[28];
            if (v103[28])
            {
              if ((*((unsigned char *)v102 + v116) & 2) == 0)
              {
                int v117 = 1;
                goto LABEL_301;
              }
              goto LABEL_303;
            }
          }
LABEL_302:
          v111 &= ~0x1000u;
          goto LABEL_303;
        }
        if (v104 < 0x39) {
          goto LABEL_302;
        }
        unsigned int v112 = v103[28];
        if (v103[28])
        {
          int v113 = 0x4000;
LABEL_288:
          if ((*(int *)((char *)v102 + v112) & v113) == 0) {
            goto LABEL_294;
          }
LABEL_304:
          BOOL v118 = v104 >= 0x4D;
          if (v95)
          {
LABEL_305:
            if (!v118) {
              goto LABEL_319;
            }
            if (!v103[38] || (*((unsigned char *)v102 + v103[38]) & 2) == 0)
            {
              unsigned int v119 = v103[38];
              if (!v103[38]) {
                goto LABEL_319;
              }
              int v120 = 8;
LABEL_318:
              if ((*(int *)((char *)v102 + v119) & v120) == 0) {
                goto LABEL_319;
              }
            }
            goto LABEL_321;
          }
LABEL_312:
          if (v118)
          {
            if (!v103[38] || (*((unsigned char *)v102 + v103[38]) & 1) == 0)
            {
              unsigned int v119 = v103[38];
              if (!v103[38]) {
                goto LABEL_319;
              }
              int v120 = 4;
              goto LABEL_318;
            }
LABEL_321:
            uint64_t v121 = v103[23];
            if (v121)
            {
              unsigned int v122 = *((unsigned __int8 *)v102 + v121);
              BOOL v91 = v122 > 0x36;
              uint64_t v123 = (1 << v122) & 0x44000000000008;
              if (v91 || v123 == 0) {
                unsigned int v56 = v111 & 0xBFFF;
              }
              else {
                unsigned int v56 = v111;
              }
            }
            else
            {
              unsigned int v56 = v111 & 0xBFFF;
            }
            continue;
          }
LABEL_319:
          v111 &= ~0x2000u;
LABEL_320:
          if (v104 < 0x2F)
          {
            unsigned int v56 = v111 & 0xBFFF;
            continue;
          }
          goto LABEL_321;
        }
LABEL_298:
        uint64_t v116 = v103[28];
        if (!v103[28]) {
          goto LABEL_302;
        }
        if ((*((unsigned char *)v102 + v116) & 1) == 0)
        {
          int v117 = 2;
LABEL_301:
          if ((*(int *)((char *)v102 + v116) & v117) == 0) {
            goto LABEL_302;
          }
        }
LABEL_303:
        if (a4) {
          goto LABEL_304;
        }
      }
      else
      {
        if (v95)
        {
          if (v104 < 0x39) {
            goto LABEL_302;
          }
          unsigned int v114 = v103[28];
          if (!v103[28]) {
            goto LABEL_295;
          }
          int v115 = 0x4000;
        }
        else
        {
          if (v104 < 0x39) {
            goto LABEL_302;
          }
          unsigned int v114 = v103[28];
          if (!v103[28]) {
            goto LABEL_298;
          }
          int v115 = 0x2000;
        }
        if ((*(int *)((char *)v102 + v114) & v115) == 0)
        {
LABEL_294:
          if (v95) {
            goto LABEL_295;
          }
          goto LABEL_298;
        }
      }
      break;
    }
    BOOL v118 = v104 >= 0x4D;
    if (!v95) {
      goto LABEL_305;
    }
    goto LABEL_312;
  }
  unsigned __int16 v11 = 0;
  while (1)
  {
    unsigned int v61 = v56;
    if (v34 + 5 == v57) {
      uint64_t v34 = *a3;
    }
    else {
      v34 += 5;
    }
    unint64_t v62 = (unint64_t)v34[4];
    if (v62 & 0xFFFFFFFFFFFFLL) == v36 && ((v152 ^ ((v62 & 0xFF000000000000) == 0))) {
      break;
    }
    uint64_t v63 = v62 & 0xFF000000000000;
    if (a4)
    {
      if ((v62 & 0xFF000000000000) != 0) {
        uint64_t v64 = 3;
      }
      else {
        uint64_t v64 = 2;
      }
      unint64_t v65 = v34[v64];
      if (!v65) {
        goto LABEL_152;
      }
    }
    else
    {
      if ((v62 & 0xFF000000000000) != 0) {
        uint64_t v66 = 2;
      }
      else {
        uint64_t v66 = 3;
      }
      unint64_t v65 = v34[v66];
      if (!v65)
      {
LABEL_152:
        __int16 v69 = 0;
        goto LABEL_153;
      }
    }
    unint64_t v67 = (unsigned __int16 *)((char *)v65 - *v65);
    if (*v67 < 7u) {
      goto LABEL_152;
    }
    uint64_t v68 = v67[3];
    if (!v68) {
      goto LABEL_152;
    }
    __int16 v69 = *(_WORD *)((char *)v65 + v68);
    if (v69 == -1) {
      goto LABEL_152;
    }
LABEL_153:
    unint64_t v70 = *v34;
    unint64_t v71 = (unsigned __int16 *)((char *)*v34 - **v34);
    unsigned int v72 = *v71;
    if (v72 < 0x1B)
    {
      LODWORD(v73) = 0;
    }
    else
    {
      uint64_t v73 = v71[13];
      if (v71[13]) {
        LODWORD(v73) = *((unsigned __int8 *)v70 + v73);
      }
    }
    v11 += v69;
    unsigned int v74 = (v61 >> 6) & 0xF;
    if (v74 >= v73) {
      unsigned int v74 = v73;
    }
    unsigned int v56 = v61 & 0xFFFFFC3F | (v74 << 6);
    if (a5)
    {
LABEL_170:
      if (v73 <= v22) {
        unsigned __int16 v77 = v56 & 0xFFF8 | (v61 + 1) & 7;
      }
      else {
        unsigned __int16 v77 = v56;
      }
      unsigned int v78 = v56 & 0xFFFFFFC7 | (8 * (((v61 + 8) >> 3) & 7));
      if ((int)v73 + 1 < v22) {
        unsigned __int16 v79 = v78;
      }
      else {
        unsigned __int16 v79 = v77;
      }
      if (v73 > v22)
      {
        uint64_t v36 = v153;
        if (v72 >= 0x2F) {
          goto LABEL_223;
        }
LABEL_133:
        unsigned int v56 = v79 & 0xBFFF;
        continue;
      }
      if (a4)
      {
        uint64_t v36 = v153;
        if (v63)
        {
          if (v72 >= 0x39)
          {
            unsigned int v80 = v71[28];
            if (v71[28])
            {
              int v81 = 0x2000;
              goto LABEL_191;
            }
LABEL_198:
            uint64_t v84 = v71[28];
            if (v71[28])
            {
              if ((*((unsigned char *)v70 + v84) & 2) == 0)
              {
                int v85 = 1;
                goto LABEL_204;
              }
              goto LABEL_206;
            }
          }
LABEL_205:
          v79 &= ~0x1000u;
          goto LABEL_206;
        }
        if (v72 < 0x39) {
          goto LABEL_205;
        }
        unsigned int v80 = v71[28];
        if (v71[28])
        {
          int v81 = 0x4000;
LABEL_191:
          if ((*(int *)((char *)v70 + v80) & v81) == 0) {
            goto LABEL_197;
          }
LABEL_207:
          BOOL v86 = v72 >= 0x4D;
          if (v63)
          {
LABEL_208:
            if (v86)
            {
              if (v71[38] && (*((unsigned char *)v70 + v71[38]) & 2) != 0) {
                goto LABEL_223;
              }
              unsigned int v87 = v71[38];
              if (v71[38])
              {
                int v88 = 8;
LABEL_221:
                if ((*(int *)((char *)v70 + v87) & v88) != 0) {
                  goto LABEL_223;
                }
              }
            }
            goto LABEL_222;
          }
LABEL_215:
          if (v86)
          {
            if (v71[38] && (*((unsigned char *)v70 + v71[38]) & 1) != 0)
            {
LABEL_223:
              uint64_t v89 = v71[23];
              if (v89)
              {
                unsigned int v90 = *((unsigned __int8 *)v70 + v89);
                BOOL v91 = v90 > 0x36;
                uint64_t v92 = (1 << v90) & 0x44000000000008;
                if (v91 || v92 == 0) {
                  unsigned int v56 = v79 & 0xBFFF;
                }
                else {
                  unsigned int v56 = v79;
                }
              }
              else
              {
                unsigned int v56 = v79 & 0xBFFF;
              }
              continue;
            }
            unsigned int v87 = v71[38];
            if (v71[38])
            {
              int v88 = 4;
              goto LABEL_221;
            }
          }
LABEL_222:
          v79 &= ~0x2000u;
          if (v72 >= 0x2F) {
            goto LABEL_223;
          }
          goto LABEL_133;
        }
LABEL_201:
        uint64_t v84 = v71[28];
        if (!v71[28]) {
          goto LABEL_205;
        }
        if ((*((unsigned char *)v70 + v84) & 1) == 0)
        {
          int v85 = 2;
LABEL_204:
          if ((*(int *)((char *)v70 + v84) & v85) == 0) {
            goto LABEL_205;
          }
        }
LABEL_206:
        if (a4) {
          goto LABEL_207;
        }
      }
      else
      {
        uint64_t v36 = v153;
        if (v63)
        {
          if (v72 < 0x39) {
            goto LABEL_205;
          }
          unsigned int v82 = v71[28];
          if (!v71[28]) {
            goto LABEL_198;
          }
          int v83 = 0x4000;
        }
        else
        {
          if (v72 < 0x39) {
            goto LABEL_205;
          }
          unsigned int v82 = v71[28];
          if (!v71[28]) {
            goto LABEL_201;
          }
          int v83 = 0x2000;
        }
        if ((*(int *)((char *)v70 + v82) & v83) == 0)
        {
LABEL_197:
          if (v63) {
            goto LABEL_198;
          }
          goto LABEL_201;
        }
      }
      BOOL v86 = v72 >= 0x4D;
      if (!v63) {
        goto LABEL_208;
      }
      goto LABEL_215;
    }
    if (v63)
    {
      if (v72 < 0xB) {
        goto LABEL_170;
      }
      uint64_t v75 = v71[5];
      if (!v71[5] || (*((unsigned char *)v70 + v75) & 1) != 0) {
        goto LABEL_170;
      }
      int v76 = 2;
    }
    else
    {
      if (v72 < 0xB) {
        goto LABEL_170;
      }
      uint64_t v75 = v71[5];
      if (!v71[5] || (*((unsigned char *)v70 + v75) & 2) != 0) {
        goto LABEL_170;
      }
      int v76 = 1;
    }
    if ((*(int *)((char *)v70 + v75) & v76) == 0) {
      goto LABEL_170;
    }
  }
LABEL_329:
  if ((v61 & 0x3F) != 0) {
    LOWORD(v12) = v61;
  }
  else {
    LOWORD(v12) = v61 & 0xBFFF;
  }
  long long v125 = (char *)*a1;
  unsigned int v126 = (unsigned __int16 *)((char *)*a1 - **a1);
  unsigned int v127 = *v126;
  if (!*((unsigned char *)a1 + 38))
  {
    if (v127 < 0xB) {
      return (unsigned __int16)v12 | (v11 << 16);
    }
    uint64_t v128 = v126[5];
    if (!v126[5]) {
      return (unsigned __int16)v12 | (v11 << 16);
    }
    int v129 = *(_DWORD *)&v125[v128];
    if (v129) {
      goto LABEL_342;
    }
    int v130 = 2;
LABEL_341:
    if ((v130 & v129) != 0)
    {
LABEL_342:
      if ((v129 & 0x40000) != 0) {
        goto LABEL_358;
      }
      int v131 = v129 & 0xA0000;
      int v132 = v129 & 0x2000000;
      if (v131 && v132 != 0) {
        goto LABEL_358;
      }
    }
    int v134 = *(_DWORD *)&v125[v128];
    if (*((unsigned char *)a1 + 38))
    {
      if ((v134 & 2) != 0) {
        goto LABEL_354;
      }
      int v135 = 1;
    }
    else
    {
      if (v134) {
        goto LABEL_354;
      }
      int v135 = 2;
    }
    if ((v135 & v134) == 0) {
      return (unsigned __int16)v12 | (v11 << 16);
    }
LABEL_354:
    if ((v134 & 0x2040000) != 0 || (v134 & 0xA0000) == 0) {
      return (unsigned __int16)v12 | (v11 << 16);
    }
LABEL_358:
    unsigned int v137 = (char *)*a2;
    unsigned int v138 = (unsigned __int16 *)((char *)*a2 - **a2);
    unsigned int v139 = *v138;
    if (*((unsigned char *)a2 + 38))
    {
      if (v139 < 0xB) {
        return (unsigned __int16)v12 | (v11 << 16);
      }
      uint64_t v140 = v138[5];
      if (!v138[5]) {
        return (unsigned __int16)v12 | (v11 << 16);
      }
      int v141 = *(_DWORD *)&v137[v140];
      if ((v141 & 2) == 0)
      {
        int v142 = 1;
        goto LABEL_367;
      }
    }
    else
    {
      if (v139 < 0xB) {
        return (unsigned __int16)v12 | (v11 << 16);
      }
      uint64_t v140 = v138[5];
      if (!v138[5]) {
        return (unsigned __int16)v12 | (v11 << 16);
      }
      int v141 = *(_DWORD *)&v137[v140];
      if ((v141 & 1) == 0)
      {
        int v142 = 2;
LABEL_367:
        if ((v142 & v141) == 0) {
          goto LABEL_374;
        }
      }
    }
    if ((v141 & 0x40000) != 0) {
      goto LABEL_384;
    }
    int v143 = v141 & 0xA0000;
    int v144 = v141 & 0x2000000;
    if (v143 && v144 != 0) {
      goto LABEL_384;
    }
LABEL_374:
    int v146 = *(_DWORD *)&v137[v140];
    if (*((unsigned char *)a2 + 38))
    {
      if ((v146 & 2) != 0) {
        goto LABEL_380;
      }
      int v147 = 1;
    }
    else
    {
      if (v146) {
        goto LABEL_380;
      }
      int v147 = 2;
    }
    if ((v147 & v146) == 0) {
      return (unsigned __int16)v12 | (v11 << 16);
    }
LABEL_380:
    if ((v146 & 0x2040000) != 0 || (v146 & 0xA0000) == 0) {
      return (unsigned __int16)v12 | (v11 << 16);
    }
LABEL_384:
    unsigned int v158 = a3;
    if (sub_ED8E24(&v158, &v155, &v154))
    {
      if (sub_ED8E24(&v158, &v154, &v155)) {
        __int16 v149 = 1024;
      }
      else {
        __int16 v149 = 0;
      }
    }
    else
    {
      __int16 v149 = 0;
    }
    LOWORD(v12) = v149 | v12 & 0xFBFF;
    return (unsigned __int16)v12 | (v11 << 16);
  }
  if (v127 >= 0xB)
  {
    uint64_t v128 = v126[5];
    if (v126[5])
    {
      int v129 = *(_DWORD *)&v125[v128];
      if ((v129 & 2) == 0)
      {
        int v130 = 1;
        goto LABEL_341;
      }
      goto LABEL_342;
    }
  }
  return (unsigned __int16)v12 | (v11 << 16);
}

void sub_ED6E34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a22);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t sub_ED6F04(uint64_t a1, void *a2)
{
  HIBYTE(v14[2]) = 19;
  strcpy((char *)v14, "CyclingRoutingGraph");
  __p = 0;
  unsigned int v12 = 0;
  uint64_t v13 = 0;
  BOOL v4 = sub_374CDC((uint64_t)a2, (uint64_t)v14, (uint64_t *)&__p);
  sub_ED5908((BOOL *)a1, v4);
  BOOL v5 = (void **)__p;
  if (__p)
  {
    double v6 = v12;
    BOOL v7 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0) {
          operator delete(*(v6 - 3));
        }
        v6 -= 3;
      }
      while (v6 != v5);
      BOOL v7 = __p;
    }
    unsigned int v12 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v14[2]) < 0) {
    operator delete(v14[0]);
  }
  uint64_t v8 = sub_3750CC(a2);
  uint64_t v9 = sub_375E28(a2);
  sub_2D93FC(a1 + 8, v8, v9, 3);
  *(_OWORD *)(a1 + 4136) = 0u;
  *(void *)(a1 + 4152) = 0;
  return a1;
}

void sub_ED701C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_ED7040@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 4160);
  unint64_t v6 = HIDWORD(a2);
  unint64_t v7 = a2 & 0xFFFFFFFFFFFFLL;
  uint64_t v8 = sub_2D5D58(v5, a2 & 0xFFFFFFFFFFFFLL);
  if (*(unsigned char *)(v5 + 7772))
  {
    uint64_t v9 = sub_2DB8E0(v5 + 3896, a2, 0);
    BOOL v10 = &v9[-*(int *)v9];
    if (*(unsigned __int16 *)v10 < 5u)
    {
      uint64_t v11 = 0;
    }
    else
    {
      uint64_t v11 = *((unsigned __int16 *)v10 + 2);
      if (v11) {
        v11 += (uint64_t)&v9[*(unsigned int *)&v9[v11]];
      }
    }
    uint64_t v12 = v11 + 4 * (unsigned __int16)v6 + 4 + *(unsigned int *)(v11 + 4 * (unsigned __int16)v6 + 4);
  }
  else
  {
    uint64_t v12 = 0;
  }
  uint64_t result = sub_2E5C38(v5, v7, 1);
  *(void *)a3 = v8;
  *(void *)(a3 + 8) = v12;
  *(void *)(a3 + 16) = result;
  *(void *)(a3 + 24) = v14;
  *(_DWORD *)(a3 + 32) = a2;
  *(_WORD *)(a3 + 36) = v6;
  *(unsigned char *)(a3 + 38) = (a2 & 0xFF000000000000) != 0;
  return result;
}

void sub_ED712C(uint64_t a1, uint64_t a2, void *a3)
{
  v35[2] = a3;
  uint64_t v36 = a2;
  a3[1] = *a3;
  v35[0] = a1;
  v35[1] = &v36;
  sub_ED73BC((uint64_t)v35, 0);
  sub_ED73BC((uint64_t)v35, 1);
  uint64_t v5 = a3[1] - *a3;
  if (v5)
  {
    uint64_t v6 = 0;
    uint64_t v32 = v5 >> 3;
    uint64_t v33 = a1 + 8;
    while (1)
    {
      uint64_t v34 = v6;
      unint64_t v7 = *(void *)(*a3 + 8 * v6);
      unsigned __int16 v8 = (unsigned __int16)sub_2D9400(v33, (HIDWORD(v7) & 0xFFFE0000FFFFFFFFLL | ((unint64_t)WORD1(v7) << 32) & 0xFFFEFFFFFFFFFFFFLL | (((v7 >> 1) & 1) << 48)) ^ 0x1000000000000);
      uint64_t v9 = v8;
      if (v8) {
        break;
      }
LABEL_3:
      uint64_t v6 = v34 + 1;
      if (v34 + 1 == v32) {
        return;
      }
    }
    uint64_t v10 = 0;
    uint64_t v11 = v7 & 3;
    uint64_t v12 = (char *)a3[1];
    while (1)
    {
      ++v10;
      unint64_t v14 = a3[2];
      if ((unint64_t)v12 >= v14) {
        break;
      }
      *(void *)uint64_t v12 = ((4 * v10) | ((unint64_t)v36 << 32) | v11)
                     + ((unint64_t)HIDWORD(v36) << 16);
      uint64_t v13 = v12 + 8;
LABEL_7:
      a3[1] = v13;
      uint64_t v12 = v13;
      if (v10 == v9) {
        goto LABEL_3;
      }
    }
    int v15 = (char *)*a3;
    uint64_t v16 = (uint64_t)&v12[-*a3];
    uint64_t v17 = v16 >> 3;
    unint64_t v18 = (v16 >> 3) + 1;
    if (v18 >> 61) {
      sub_2E00();
    }
    uint64_t v19 = v14 - (void)v15;
    if (v19 >> 2 > v18) {
      unint64_t v18 = v19 >> 2;
    }
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v20 = v18;
    }
    if (v20)
    {
      if (v20 >> 61) {
        sub_188D718();
      }
      uint64_t v21 = operator new(8 * v20);
    }
    else
    {
      uint64_t v21 = 0;
    }
    unsigned int v22 = &v21[8 * v17];
    *unsigned int v22 = ((4 * v10) | ((unint64_t)v36 << 32) | v11) + ((unint64_t)HIDWORD(v36) << 16);
    uint64_t v13 = (char *)(v22 + 1);
    if (v12 != v15)
    {
      unint64_t v23 = v12 - 8 - v15;
      if (v23 >= 0x168)
      {
        if (&v21[v16 - 8 - (v23 & 0xFFFFFFFFFFFFFFF8)] > &v21[v16 - 8])
        {
          uint64_t v24 = v12;
        }
        else if (&v12[-(v23 & 0xFFFFFFFFFFFFFFF8) - 8] > v12 - 8)
        {
          uint64_t v24 = v12;
        }
        else if ((unint64_t)(v12 - v21 - v16) >= 0x20)
        {
          uint64_t v26 = (v23 >> 3) + 1;
          uint64_t v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v24 = &v12[-v27];
          unsigned int v22 = (void *)((char *)v22 - v27);
          char v28 = &v21[8 * v17 - 16];
          unsigned int v29 = v12 - 16;
          uint64_t v30 = v26 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v31 = *(_OWORD *)v29;
            *(v28 - 1) = *((_OWORD *)v29 - 1);
            *char v28 = v31;
            v28 -= 2;
            v29 -= 32;
            v30 -= 4;
          }
          while (v30);
          if (v26 == (v26 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_23;
          }
        }
        else
        {
          uint64_t v24 = v12;
        }
      }
      else
      {
        uint64_t v24 = v12;
      }
      do
      {
        uint64_t v25 = *((void *)v24 - 1);
        v24 -= 8;
        *--unsigned int v22 = v25;
      }
      while (v24 != v15);
    }
LABEL_23:
    *a3 = v22;
    a3[1] = v13;
    a3[2] = &v21[8 * v20];
    if (v15) {
      operator delete(v15);
    }
    goto LABEL_7;
  }
}

void *sub_ED73BC(uint64_t a1, char a2)
{
  char v25 = a2;
  BOOL v4 = *(unsigned int **)(a1 + 8);
  uint64_t v5 = *(void *)(*(void *)a1 + 4160);
  uint64_t v6 = *v4;
  unint64_t v7 = v6 | ((unint64_t)*((unsigned __int16 *)v4 + 2) << 32);
  unsigned __int16 v8 = (int *)sub_2D5D58(v5, v7);
  if (*(unsigned char *)(v5 + 7772)) {
    sub_2DB8E0(v5 + 3896, v6, 0);
  }
  uint64_t result = (void *)sub_2E5C38(v5, v7, 1);
  uint64_t v10 = (unsigned __int16 *)((char *)v8 - *v8);
  unsigned int v11 = *v10;
  if (a2)
  {
    if (v11 < 0x47)
    {
      if (v11 <= 0x38) {
        return result;
      }
    }
    else if (v10[35] && (*((unsigned char *)v8 + v10[35]) & 2) != 0)
    {
      goto LABEL_22;
    }
    uint64_t v12 = v10[28];
    if (!v12) {
      return result;
    }
    int v13 = *(int *)((char *)v8 + v12);
    if ((v13 & 2) != 0) {
      goto LABEL_22;
    }
LABEL_19:
    if ((v13 & 7) != 4 && (v13 & 0x23) != 0x20) {
      return result;
    }
    goto LABEL_22;
  }
  if (v11 < 0x47)
  {
    if (v11 <= 0x38) {
      return result;
    }
  }
  else if (v10[35] && (*((unsigned char *)v8 + v10[35]) & 1) != 0)
  {
    goto LABEL_22;
  }
  uint64_t v14 = v10[28];
  if (!v14) {
    return result;
  }
  int v13 = *(int *)((char *)v8 + v14);
  if ((v13 & 1) == 0) {
    goto LABEL_19;
  }
LABEL_22:
  uint64_t result = sub_ED8F18(*(void *)(a1 + 16), *(unsigned int **)(a1 + 8), &v25);
  int v15 = (unsigned __int16 *)((char *)v8 - *v8);
  unsigned int v16 = *v15;
  if ((a2 & 1) == 0)
  {
    if (v16 < 0x47)
    {
      if (v16 <= 0x38) {
        return result;
      }
    }
    else if (v15[35])
    {
      int v17 = *(int *)((char *)v8 + v15[35]);
      if (v17) {
        goto LABEL_30;
      }
    }
    uint64_t v20 = v15[28];
    if (!v20) {
      return result;
    }
    int v19 = *(int *)((char *)v8 + v20);
    if (v19) {
      goto LABEL_41;
    }
LABEL_39:
    if ((v19 & 7) != 4 && (v19 & 0x23) != 0x20) {
      return result;
    }
    goto LABEL_41;
  }
  if (v16 >= 0x47)
  {
    if (!v15[35]) {
      goto LABEL_33;
    }
    int v17 = *(int *)((char *)v8 + v15[35]);
    if ((v17 & 2) == 0) {
      goto LABEL_33;
    }
LABEL_30:
    if ((v17 & 4) != 0) {
      goto LABEL_42;
    }
    return result;
  }
  if (v16 <= 0x38) {
    return result;
  }
LABEL_33:
  uint64_t v18 = v15[28];
  if (!v18) {
    return result;
  }
  int v19 = *(int *)((char *)v8 + v18);
  if ((v19 & 2) == 0) {
    goto LABEL_39;
  }
LABEL_41:
  if ((v19 & 0x100) != 0)
  {
LABEL_42:
    unsigned int v22 = *(unsigned int **)(a1 + 8);
    uint64_t v21 = *(void *)(a1 + 16);
    int v24 = 0;
    unsigned __int8 v23 = 1;
    return sub_ED90BC(v21, v22, &v25, &v24, &v23);
  }
  return result;
}

double sub_ED75C0(uint64_t a1, unint64_t a2, int a3, void *a4, int a5)
{
  unsigned __int16 v7 = a2;
  unint64_t v87 = a2;
  char v86 = a5;
  a4[1] = *a4;
  uint64_t v9 = *(void *)(a1 + 4160);
  unint64_t v10 = HIDWORD(a2);
  unint64_t v11 = HIDWORD(a2) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(a2) << 32);
  unint64_t v12 = (HIDWORD(a2) & 0xFFFE0000FFFFFFFFLL | ((unint64_t)WORD1(a2) << 32) & 0xFFFEFFFFFFFFFFFFLL | (((a2 >> 1) & 1) << 48)) ^ 0x1000000000000;
  int v13 = (int *)sub_2D5D58(v9, v11);
  int v72 = a5;
  if (*(unsigned char *)(v9 + 7772))
  {
    uint64_t v14 = sub_2DB8E0(v9 + 3896, v10, 0);
    int v15 = &v14[-*(int *)v14];
    if (*(unsigned __int16 *)v15 < 5u)
    {
      int v17 = a3;
      uint64_t v16 = 0;
    }
    else
    {
      uint64_t v16 = *((unsigned __int16 *)v15 + 2);
      int v17 = a3;
      if (v16) {
        v16 += (uint64_t)&v14[*(unsigned int *)&v14[v16]];
      }
    }
    uint64_t v18 = (int *)(v16 + 4 * WORD2(v12) + 4 + *(unsigned int *)(v16 + 4 * WORD2(v12) + 4));
  }
  else
  {
    int v17 = a3;
    uint64_t v18 = 0;
  }
  v82[0] = v13;
  v82[1] = v18;
  v82[2] = (int *)sub_2E5C38(v9, v11, 1);
  v82[3] = v19;
  int v83 = v10;
  unsigned __int16 v84 = WORD2(v12);
  uint64_t v21 = v12;
  char v85 = BYTE6(v12);
  unsigned int v22 = (unsigned __int16 *)((char *)v13 - *v13);
  unsigned int v23 = *v22;
  if (!HIWORD(v12))
  {
    if (v23 < 0x47)
    {
      if (v23 <= 0x38) {
        return result;
      }
    }
    else if (v22[35] && (*((unsigned char *)v13 + v22[35]) & 1) != 0)
    {
      goto LABEL_26;
    }
    uint64_t v26 = v22[28];
    if (!v26) {
      return result;
    }
    int v25 = *(int *)((char *)v13 + v26);
    if (v25) {
      goto LABEL_26;
    }
LABEL_24:
    if ((v25 & 7) != 4 && (v25 & 0x23) != 0x20) {
      return result;
    }
    goto LABEL_26;
  }
  if (v23 < 0x47)
  {
    if (v23 <= 0x38) {
      return result;
    }
  }
  else if (v22[35] && (*((unsigned char *)v13 + v22[35]) & 2) != 0)
  {
    goto LABEL_26;
  }
  uint64_t v24 = v22[28];
  if (!v24) {
    return result;
  }
  int v25 = *(int *)((char *)v13 + v24);
  if ((v25 & 2) == 0) {
    goto LABEL_24;
  }
LABEL_26:
  int v71 = v17 ^ 1;
  char v81 = v17 ^ 1;
  uint64_t v27 = *(void *)(a1 + 4160);
  if (v17) {
    char v28 = (unsigned int *)sub_2E48C4(v82);
  }
  else {
    char v28 = (unsigned int *)sub_2E4738(v82);
  }
  unsigned int v29 = (uint64_t *)(a1 + 4136);
  BOOL v30 = sub_2E45D4(v27, v28, a1 + 4136, v17, 1, 1);
  long long v31 = *(char **)(a1 + 4144);
  uint64_t v32 = *(int ***)(a1 + 4136);
  BOOL v80 = v31 - (char *)v32 == 80;
  int64_t v70 = v31 - (char *)v32;
  if (v31 - (char *)v32 != 120) {
    goto LABEL_68;
  }
  if (v32 != (int **)v31)
  {
    uint64_t v33 = v32;
    while (1)
    {
      uint64_t v34 = (unsigned __int16 *)((char *)*v33 - **v33);
      if (*v34 < 0xBu) {
        break;
      }
      uint64_t v35 = v34[5];
      if (!v35 || ((*(int *)((char *)*v33 + v35) ^ ((*(int *)((char *)*v33 + v35) & 2u) >> 1)) & 1) == 0) {
        break;
      }
      v33 += 5;
      if (v33 == (int **)v31) {
        goto LABEL_36;
      }
    }
LABEL_68:
    char v36 = 0;
    char v79 = 0;
    if (v32 != (int **)v31) {
      goto LABEL_69;
    }
LABEL_37:
    BOOL v37 = *(unsigned char *)(a1 + 1) != 0;
    BOOL v78 = v37;
    if ((v7 & 0xFFFC) != 0) {
      goto LABEL_89;
    }
    goto LABEL_38;
  }
LABEL_36:
  char v36 = 1;
  char v79 = 1;
  if (v32 == (int **)v31) {
    goto LABEL_37;
  }
LABEL_69:
  uint64_t v52 = 0;
  do
  {
    long long v53 = *v32;
    long long v54 = (unsigned __int16 *)((char *)*v32 - **v32);
    unsigned int v55 = *v54;
    if (*((unsigned char *)v32 + 38))
    {
      if (v55 >= 0x47)
      {
        uint64_t v56 = v54[35];
        if (v56)
        {
          int v57 = *(int *)((char *)v53 + v56);
          if (v57 & 2) != 0 || (v57) {
            goto LABEL_70;
          }
        }
      }
    }
    else if (v55 >= 0x47)
    {
      uint64_t v58 = v54[35];
      if (v58)
      {
        int v59 = *(int *)((char *)v53 + v58);
        if ((v59 & 1) != 0 || (v59 & 2) != 0) {
LABEL_70:
        }
          ++v52;
      }
    }
    v32 += 5;
  }
  while (v32 != (int **)v31);
  char v60 = 3;
  if (v52 < 3) {
    char v60 = v52;
  }
  BOOL v61 = v60 != 2;
  if (*(unsigned char *)(a1 + 1)) {
    BOOL v37 = v61;
  }
  else {
    BOOL v37 = 0;
  }
  BOOL v78 = v37;
  if ((v7 & 0xFFFC) == 0)
  {
LABEL_38:
    char v69 = v36;
    double result = sub_2D97C4(a1 + 8, v21, v17, v72 == 0, (uint64_t *)&v74);
    uint64_t v38 = (-51 * ((*(_DWORD *)(a1 + 4144) - *(_DWORD *)(a1 + 4136)) >> 3));
    if (!(-51 * ((*(_DWORD *)(a1 + 4144) - *(_DWORD *)(a1 + 4136)) >> 3)))
    {
LABEL_99:
      if (*(unsigned char *)a1)
      {
        if (v72 != 1)
        {
          long long v100 = v74;
          __int16 v101 = v75;
          long long v98 = v76;
          uint64_t v99 = v77;
          *(void *)&long long v90 = a1;
          *((void *)&v90 + 1) = &v78;
          BOOL v91 = v82;
          uint64_t v92 = (uint64_t *)&v87;
          unsigned int v93 = &v81;
          uint64_t v94 = &v80;
          uint64_t v95 = &v79;
          uint64_t v96 = &v86;
          unint64_t v97 = a4;
          *(void *)&double result = sub_ED95AC((uint64_t)&v100, &v98, (uint64_t)&v90, (uint64_t)&v88).n128_u64[0];
        }
      }
      return result;
    }
    uint64_t v39 = 0;
    uint64_t v40 = 32;
    while (1)
    {
      uint64_t v41 = *v29;
      uint64_t v42 = *v29 + v40;
      unsigned int v45 = *(int **)(v42 - 32);
      uint64_t v44 = v42 - 32;
      unsigned int v43 = v45;
      unsigned int v46 = (unsigned __int16 *)((char *)v45 - *v45);
      unsigned int v47 = *v46;
      if (*(unsigned char *)(v44 + 38))
      {
        if (v47 < 0x47)
        {
          if (v47 <= 0x38) {
            goto LABEL_41;
          }
        }
        else if (v46[35] && (*((unsigned char *)v43 + v46[35]) & 2) != 0)
        {
          goto LABEL_60;
        }
        uint64_t v48 = v46[28];
        if (!v48) {
          goto LABEL_41;
        }
        int v49 = *(int *)((char *)v43 + v48);
        if ((v49 & 2) != 0) {
          goto LABEL_60;
        }
      }
      else
      {
        if (v47 < 0x47)
        {
          if (v47 <= 0x38) {
            goto LABEL_41;
          }
        }
        else if (v46[35] && (*((unsigned char *)v43 + v46[35]) & 1) != 0)
        {
LABEL_60:
          if (v83 != *(_DWORD *)(v41 + v40)) {
            goto LABEL_104;
          }
          BOOL v68 = v84 == *(unsigned __int16 *)(v41 + v40 + 4);
          BOOL v51 = !v37;
          if (!v68) {
            BOOL v51 = 0;
          }
          if (!v51)
          {
LABEL_104:
            if (!*(unsigned char *)a1
              || v72 == 1
              || (v90 = v74, v91 = v75, long long v88 = v76, v89 = v77, (sub_ED9368((uint64_t)&v90, &v88, v39) & 1) == 0))
            {
              sub_ED59FC(a1, v7, v82, (int **)v44, 0, 0, v71, v70 == 80, v69, v72 == 0, (uint64_t)a4);
            }
          }
          goto LABEL_41;
        }
        uint64_t v50 = v46[28];
        if (!v50) {
          goto LABEL_41;
        }
        int v49 = *(int *)((char *)v43 + v50);
        if (v49) {
          goto LABEL_60;
        }
      }
      if ((v49 & 7) == 4 || (v49 & 0x23) == 0x20) {
        goto LABEL_60;
      }
LABEL_41:
      ++v39;
      v40 += 40;
      if (v38 == v39) {
        goto LABEL_99;
      }
    }
  }
LABEL_89:
  unsigned int v62 = sub_2D98EC(a1 + 8, v21, v7 >> 2, v17, v72 == 0);
  if ((~v62 & 0xFF0000) != 0 && v30)
  {
    uint64_t v64 = *v29;
    if (v37
      || ((uint64_t v65 = v64 + 40 * BYTE2(v62), v66 = *(unsigned __int16 *)(v65 + 36), v67 = *(_DWORD *)(v65 + 32), v66 == v84)
        ? (BOOL v68 = v67 == v83)
        : (BOOL v68 = 0),
          !v68))
    {
      sub_ED59FC(a1, v7, v82, (int **)(v64 + 40 * BYTE2(v62)), (unsigned __int16)v62, (v62 >> 25) & 1, v71, v70 == 80, v36, v72 == 0, (uint64_t)a4);
    }
  }
  return result;
}

BOOL sub_ED7C38(uint64_t a1, uint64_t *a2)
{
  return sub_2D9A48(a1 + 8, a2);
}

void sub_ED7C40(uint64_t a1)
{
}

uint64_t sub_ED7C48(uint64_t a1)
{
  return sub_2DB7B4(a1 + 8);
}

uint64_t sub_ED7C50(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unsigned __int16 v7 = sub_ED7CB0((BOOL *)a1, a4);
  sub_2D93FC((uint64_t)(v7 + 8), a2, a3, 0);
  *(_OWORD *)(a1 + 4136) = 0u;
  *(void *)(a1 + 4152) = 0;
  return a1;
}

BOOL *sub_ED7CB0(BOOL *a1, void *a2)
{
  strcpy((char *)__p, "obey_turn_restrictions");
  HIBYTE(__p[2]) = 22;
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *a1 = v4;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9800;
  strcpy((char *)__p[0], "allow_single_digitized_u_turns");
  BOOL v5 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  a1[1] = v5;
  return a1;
}

void sub_ED7D84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_ED7DA4(uint64_t a1, unsigned __int16 a2, int **a3, int **a4, int a5, int a6, int a7, int a8, char a9, unsigned __int8 a10, uint64_t a11)
{
  if (a7) {
    unint64_t v11 = a3;
  }
  else {
    unint64_t v11 = a4;
  }
  if (a7) {
    int v12 = a2 >> 2;
  }
  else {
    int v12 = a5;
  }
  if (a7) {
    int v13 = a4;
  }
  else {
    int v13 = a3;
  }
  if (a7) {
    int v14 = a5;
  }
  else {
    int v14 = a2 >> 2;
  }
  if ((a2 & 1) == 0)
  {
    int v20 = a8;
    int v21 = a6;
    BOOL v22 = 0;
    goto LABEL_30;
  }
  int v15 = *a4;
  uint64_t v16 = (unsigned __int16 *)((char *)*a4 - **a4);
  unsigned int v17 = *v16;
  if (*((unsigned char *)a4 + 38))
  {
    if (v17 >= 0xB)
    {
      uint64_t v18 = v16[5];
      if (v18)
      {
        int v19 = *(int *)((char *)v15 + v18);
        if ((v19 & 2) == 0)
        {
          int v20 = a8;
          if ((v19 & 1) == 0) {
            goto LABEL_28;
          }
          goto LABEL_25;
        }
LABEL_119:
        int v20 = a8;
        int v21 = a6;
        if ((v19 & 0x40000) != 0) {
          goto LABEL_29;
        }
        goto LABEL_120;
      }
    }
    goto LABEL_27;
  }
  if (v17 < 0xB || (uint64_t v23 = v16[5]) == 0)
  {
LABEL_27:
    int v20 = a8;
    goto LABEL_28;
  }
  int v19 = *(int *)((char *)v15 + v23);
  if (v19) {
    goto LABEL_119;
  }
  int v20 = a8;
  if ((v19 & 2) == 0)
  {
LABEL_28:
    int v21 = a6;
    goto LABEL_29;
  }
LABEL_25:
  int v21 = a6;
  if ((v19 & 0x40000) != 0)
  {
LABEL_29:
    BOOL v22 = 1;
    goto LABEL_30;
  }
LABEL_120:
  BOOL v22 = (v19 & 0xA0000) != 0;
LABEL_30:
  if (a7) {
    BOOL v24 = a2;
  }
  else {
    BOOL v24 = v22;
  }
  if (a7) {
    BOOL v25 = v22;
  }
  else {
    BOOL v25 = a2;
  }
  int v26 = sub_ED5EC0(v11, v13, (int ***)(a1 + 4136), a7 ^ 1u, 1, 0);
  long long v27 = *((_OWORD *)v11 + 1);
  long long v65 = *(_OWORD *)v11;
  long long v66 = v27;
  long long v28 = *((_OWORD *)v13 + 1);
  *(_OWORD *)&v67[8] = *(_OWORD *)v13;
  *(void *)int v67 = v11[4];
  *(_OWORD *)&v67[24] = v28;
  *(void *)&v67[40] = v13[4];
  LODWORD(v68) = v12 | (v14 << 16);
  DWORD1(v68) = v26;
  if (v25) {
    char v29 = 2;
  }
  else {
    char v29 = 0;
  }
  if (v20) {
    char v30 = 4;
  }
  else {
    char v30 = 0;
  }
  if (a9) {
    char v31 = 8;
  }
  else {
    char v31 = 0;
  }
  if (v21) {
    char v32 = 16;
  }
  else {
    char v32 = 0;
  }
  BYTE8(v68) = (v30 | v32 | v31) & 0xFE | v24 | v29;
  double result = sub_3DEE84((char **)a11, &v65);
  uint64_t v34 = *v11;
  uint64_t v35 = (unsigned __int16 *)((char *)*v11 - **v11);
  unsigned int v36 = *v35;
  if (!*((unsigned char *)v11 + 38))
  {
    if (v36 >= 0xB && v35[5])
    {
      int v37 = *(int *)((char *)v34 + v35[5]);
      if ((v37 & 1) == 0)
      {
        int v38 = a7;
        if ((v37 & 2) == 0)
        {
LABEL_58:
          BOOL v39 = 1;
          goto LABEL_64;
        }
        goto LABEL_61;
      }
      goto LABEL_60;
    }
LABEL_59:
    BOOL v39 = 1;
    int v38 = a7;
    goto LABEL_64;
  }
  if (v36 < 0xB || !v35[5]) {
    goto LABEL_59;
  }
  int v37 = *(int *)((char *)v34 + v35[5]);
  if ((v37 & 2) == 0)
  {
    int v38 = a7;
    if ((v37 & 1) == 0) {
      goto LABEL_58;
    }
    goto LABEL_61;
  }
LABEL_60:
  int v38 = a7;
LABEL_61:
  BOOL v39 = (v37 & 0x40000) != 0 || (v37 & 0xA0000) != 0;
LABEL_64:
  uint64_t v40 = *v13;
  uint64_t v41 = (unsigned __int16 *)((char *)*v13 - **v13);
  unsigned int v42 = *v41;
  if (*((unsigned char *)v13 + 38))
  {
    if (v42 < 0xB) {
      goto LABEL_84;
    }
    if (!v41[5]) {
      goto LABEL_84;
    }
    int v43 = *(int *)((char *)v40 + v41[5]);
    if ((v43 & 2) == 0)
    {
      double result = (unsigned char *)(&def_332C + 1);
      if ((v43 & 1) == 0) {
        goto LABEL_84;
      }
    }
  }
  else if (v42 < 0xB {
         || !v41[5]
  }
         || (int v43 = *(int *)((char *)v40 + v41[5]), (v43 & 1) == 0)
         && (double result = (unsigned char *)(&def_332C + 2), (v43 & 2) == 0))
  {
LABEL_84:
    BOOL v44 = 1;
    BOOL v45 = v36 >= 0xB;
    if (*((unsigned char *)v11 + 38)) {
      goto LABEL_85;
    }
    goto LABEL_78;
  }
  double result = (unsigned char *)(&def_332C + 1);
  BOOL v44 = (v43 & 0x40000) != 0 || (v43 & 0xA0000) != 0;
  BOOL v45 = v36 >= 0xB;
  if (*((unsigned char *)v11 + 38))
  {
LABEL_85:
    if (v45)
    {
      uint64_t v48 = v35[5];
      if (v48)
      {
        unsigned int v47 = *(int *)((char *)v34 + v48);
        if (v47 & 2) != 0 || (v47) {
          goto LABEL_90;
        }
        goto LABEL_121;
      }
    }
LABEL_97:
    LOBYTE(v49) = 2;
    BOOL v50 = v42 >= 0xB;
    if (!*((unsigned char *)v13 + 38)) {
      goto LABEL_105;
    }
    goto LABEL_98;
  }
LABEL_78:
  if (!v45) {
    goto LABEL_97;
  }
  uint64_t v46 = v35[5];
  if (!v46) {
    goto LABEL_97;
  }
  unsigned int v47 = *(int *)((char *)v34 + v46);
  if ((v47 & 1) != 0 || (v47 & 2) != 0)
  {
LABEL_90:
    if ((v47 & 0x40000) != 0)
    {
      LOBYTE(v49) = 3;
      BOOL v50 = v42 >= 0xB;
      if (!*((unsigned char *)v13 + 38)) {
        goto LABEL_105;
      }
    }
    else if ((v47 & 0xA0000) != 0)
    {
      if ((v47 & 0x2000000) != 0) {
        LOBYTE(v49) = 3;
      }
      else {
        LOBYTE(v49) = 4;
      }
      BOOL v50 = v42 >= 0xB;
      if (!*((unsigned char *)v13 + 38)) {
        goto LABEL_105;
      }
    }
    else
    {
      LOBYTE(v49) = 5;
      BOOL v50 = v42 >= 0xB;
      if (!*((unsigned char *)v13 + 38)) {
        goto LABEL_105;
      }
    }
LABEL_98:
    if (!v50) {
      goto LABEL_130;
    }
    uint64_t v51 = v41[5];
    if (!v51) {
      goto LABEL_130;
    }
    int v52 = *(int *)((char *)v40 + v51);
    if (v52 & 2) != 0 || (v52) {
      goto LABEL_110;
    }
    goto LABEL_126;
  }
LABEL_121:
  if ((v47 & 0x40000) != 0)
  {
    LOBYTE(v49) = 1;
    BOOL v50 = v42 >= 0xB;
    if (!*((unsigned char *)v13 + 38)) {
      goto LABEL_105;
    }
    goto LABEL_98;
  }
  BOOL v55 = (v47 & 0xA0000) == 0;
  int v49 = (v47 >> 25) & 1;
  if (v55) {
    LOBYTE(v49) = 2;
  }
  BOOL v50 = v42 >= 0xB;
  if (*((unsigned char *)v13 + 38)) {
    goto LABEL_98;
  }
LABEL_105:
  if (!v50) {
    goto LABEL_130;
  }
  uint64_t v53 = v41[5];
  if (!v53) {
    goto LABEL_130;
  }
  int v52 = *(int *)((char *)v40 + v53);
  if ((v52 & 1) == 0 && (v52 & 2) == 0)
  {
LABEL_126:
    if ((v52 & 0x40000) != 0)
    {
      if (v49 == 1) {
        return result;
      }
      goto LABEL_131;
    }
    if ((v52 & 0xA0000) != 0)
    {
      if (v49 == ((v52 & 0x2000000) != 0)) {
        return result;
      }
      goto LABEL_131;
    }
LABEL_130:
    if (v49 == 2) {
      return result;
    }
    goto LABEL_131;
  }
LABEL_110:
  if ((v52 & 0x40000) != 0)
  {
    if (v49 == 3) {
      return result;
    }
  }
  else if ((v52 & 0xA0000) != 0)
  {
    if ((v52 & 0x2000000) != 0) {
      unsigned __int8 v54 = 3;
    }
    else {
      unsigned __int8 v54 = 4;
    }
    if (v49 == v54) {
      return result;
    }
  }
  else if (v49 == 5)
  {
    return result;
  }
LABEL_131:
  if (v44 & v38)
  {
    if (!a10) {
      return result;
    }
  }
  else if (v39 & a10) != 1 || (v38)
  {
    return result;
  }
  uint64_t v56 = *(void *)(a11 + 8);
  long long v57 = *(_OWORD *)(v56 - 80);
  long long v65 = *(_OWORD *)(v56 - 96);
  long long v66 = v57;
  long long v59 = *(_OWORD *)(v56 - 64);
  long long v58 = *(_OWORD *)(v56 - 48);
  long long v60 = *(_OWORD *)(v56 - 16);
  *(_OWORD *)&v67[32] = *(_OWORD *)(v56 - 32);
  long long v68 = v60;
  *(_OWORD *)int v67 = v59;
  *(_OWORD *)&v67[16] = v58;
  char v61 = *(unsigned char *)(v56 - 8);
  if (v38) {
    char v62 = 2;
  }
  else {
    char v62 = 1;
  }
  if (v38) {
    char v63 = -3;
  }
  else {
    char v63 = -2;
  }
  BYTE8(v68) = (BYTE8(v60) & v63 | v61 & v62) ^ v62;
  return sub_3DEE84((char **)a11, &v65);
}

uint64_t sub_ED82AC(uint64_t a1, void *a2)
{
  HIBYTE(v14[2]) = 19;
  strcpy((char *)v14, "DrivingRoutingGraph");
  __p = 0;
  int v12 = 0;
  uint64_t v13 = 0;
  BOOL v4 = sub_374CDC((uint64_t)a2, (uint64_t)v14, (uint64_t *)&__p);
  sub_ED7CB0((BOOL *)a1, v4);
  BOOL v5 = (void **)__p;
  if (__p)
  {
    uint64_t v6 = v12;
    unsigned __int16 v7 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0) {
          operator delete(*(v6 - 3));
        }
        v6 -= 3;
      }
      while (v6 != v5);
      unsigned __int16 v7 = __p;
    }
    int v12 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v14[2]) < 0) {
    operator delete(v14[0]);
  }
  uint64_t v8 = sub_3750CC(a2);
  uint64_t v9 = sub_375E28(a2);
  sub_2D93FC(a1 + 8, v8, v9, 0);
  *(_OWORD *)(a1 + 4136) = 0u;
  *(void *)(a1 + 4152) = 0;
  return a1;
}

void sub_ED83C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_ED83E8(uint64_t a1, uint64_t a2, void *a3)
{
  v35[2] = a3;
  uint64_t v36 = a2;
  a3[1] = *a3;
  v35[0] = a1;
  v35[1] = &v36;
  sub_ED8678((uint64_t)v35, 0);
  sub_ED8678((uint64_t)v35, 1);
  uint64_t v5 = a3[1] - *a3;
  if (v5)
  {
    uint64_t v6 = 0;
    uint64_t v32 = v5 >> 3;
    uint64_t v33 = a1 + 8;
    while (1)
    {
      uint64_t v34 = v6;
      unint64_t v7 = *(void *)(*a3 + 8 * v6);
      unsigned __int16 v8 = (unsigned __int16)sub_2D9400(v33, (HIDWORD(v7) & 0xFFFE0000FFFFFFFFLL | ((unint64_t)WORD1(v7) << 32) & 0xFFFEFFFFFFFFFFFFLL | (((v7 >> 1) & 1) << 48)) ^ 0x1000000000000);
      uint64_t v9 = v8;
      if (v8) {
        break;
      }
LABEL_3:
      uint64_t v6 = v34 + 1;
      if (v34 + 1 == v32) {
        return;
      }
    }
    uint64_t v10 = 0;
    uint64_t v11 = v7 & 3;
    int v12 = (char *)a3[1];
    while (1)
    {
      ++v10;
      unint64_t v14 = a3[2];
      if ((unint64_t)v12 >= v14) {
        break;
      }
      *(void *)int v12 = ((4 * v10) | ((unint64_t)v36 << 32) | v11)
                     + ((unint64_t)HIDWORD(v36) << 16);
      uint64_t v13 = v12 + 8;
LABEL_7:
      a3[1] = v13;
      int v12 = v13;
      if (v10 == v9) {
        goto LABEL_3;
      }
    }
    int v15 = (char *)*a3;
    uint64_t v16 = (uint64_t)&v12[-*a3];
    uint64_t v17 = v16 >> 3;
    unint64_t v18 = (v16 >> 3) + 1;
    if (v18 >> 61) {
      sub_2E00();
    }
    uint64_t v19 = v14 - (void)v15;
    if (v19 >> 2 > v18) {
      unint64_t v18 = v19 >> 2;
    }
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v20 = v18;
    }
    if (v20)
    {
      if (v20 >> 61) {
        sub_188D718();
      }
      int v21 = operator new(8 * v20);
    }
    else
    {
      int v21 = 0;
    }
    BOOL v22 = &v21[8 * v17];
    *BOOL v22 = ((4 * v10) | ((unint64_t)v36 << 32) | v11) + ((unint64_t)HIDWORD(v36) << 16);
    uint64_t v13 = (char *)(v22 + 1);
    if (v12 != v15)
    {
      unint64_t v23 = v12 - 8 - v15;
      if (v23 >= 0x168)
      {
        if (&v21[v16 - 8 - (v23 & 0xFFFFFFFFFFFFFFF8)] > &v21[v16 - 8])
        {
          BOOL v24 = v12;
        }
        else if (&v12[-(v23 & 0xFFFFFFFFFFFFFFF8) - 8] > v12 - 8)
        {
          BOOL v24 = v12;
        }
        else if ((unint64_t)(v12 - v21 - v16) >= 0x20)
        {
          uint64_t v26 = (v23 >> 3) + 1;
          uint64_t v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
          BOOL v24 = &v12[-v27];
          BOOL v22 = (void *)((char *)v22 - v27);
          long long v28 = &v21[8 * v17 - 16];
          char v29 = v12 - 16;
          uint64_t v30 = v26 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v31 = *(_OWORD *)v29;
            *(v28 - 1) = *((_OWORD *)v29 - 1);
            *long long v28 = v31;
            v28 -= 2;
            v29 -= 32;
            v30 -= 4;
          }
          while (v30);
          if (v26 == (v26 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_23;
          }
        }
        else
        {
          BOOL v24 = v12;
        }
      }
      else
      {
        BOOL v24 = v12;
      }
      do
      {
        uint64_t v25 = *((void *)v24 - 1);
        v24 -= 8;
        *--BOOL v22 = v25;
      }
      while (v24 != v15);
    }
LABEL_23:
    *a3 = v22;
    a3[1] = v13;
    a3[2] = &v21[8 * v20];
    if (v15) {
      operator delete(v15);
    }
    goto LABEL_7;
  }
}

void *sub_ED8678(uint64_t a1, char a2)
{
  char v28 = a2;
  BOOL v4 = *(unsigned int **)(a1 + 8);
  uint64_t v5 = *(void *)(*(void *)a1 + 4160);
  uint64_t v6 = *v4;
  uint64_t v7 = *((unsigned __int16 *)v4 + 2);
  unsigned __int16 v8 = (int *)sub_2D5D58(v5, v6 | (v7 << 32));
  if (*(unsigned char *)(v5 + 7772))
  {
    uint64_t v9 = sub_2DB8E0(v5 + 3896, v6, 0);
    uint64_t v10 = &v9[-*(int *)v9];
    if (*(unsigned __int16 *)v10 < 5u)
    {
      uint64_t v11 = 0;
    }
    else
    {
      uint64_t v11 = *((unsigned __int16 *)v10 + 2);
      if (v11) {
        v11 += (uint64_t)&v9[*(unsigned int *)&v9[v11]];
      }
    }
    int v12 = (int *)(v11 + 4 * v7 + 4 + *(unsigned int *)(v11 + 4 * v7 + 4));
  }
  else
  {
    int v12 = 0;
  }
  v24[0] = v8;
  v24[1] = v12;
  v24[2] = (int *)sub_2E5C38(v5, v6 | (v7 << 32), 1);
  v24[3] = v13;
  int v25 = v6;
  __int16 v26 = v7;
  char v27 = a2;
  double result = (void *)sub_ED9298(v24);
  if (result)
  {
    double result = sub_ED8F18(*(void *)(a1 + 16), *(unsigned int **)(a1 + 8), &v28);
    int v15 = (unsigned __int16 *)((char *)v24[0] - *v24[0]);
    unsigned int v16 = *v15;
    if (v27)
    {
      if (v16 < 0xB || (uint64_t v17 = v15[5]) == 0 || (v18 = *(int *)((char *)v24[0] + v17), (v18 & 2) == 0) && (v18 & 1) == 0)
      {
LABEL_20:
        int v21 = *(unsigned int **)(a1 + 8);
        uint64_t v20 = *(void *)(a1 + 16);
        int v23 = 0;
        unsigned __int8 v22 = 1;
        return sub_ED90BC(v20, v21, &v28, &v23, &v22);
      }
    }
    else
    {
      if (v16 < 0xB) {
        goto LABEL_20;
      }
      uint64_t v19 = v15[5];
      if (!v19) {
        goto LABEL_20;
      }
      int v18 = *(int *)((char *)v24[0] + v19);
      if ((v18 & 1) == 0 && (v18 & 2) == 0) {
        goto LABEL_20;
      }
    }
    if ((v18 & 0xE0000) == 0) {
      return result;
    }
    goto LABEL_20;
  }
  return result;
}

double sub_ED8808(uint64_t a1, unint64_t a2, int a3, void *a4, int a5)
{
  unsigned __int16 v6 = a2;
  unint64_t v71 = a2;
  char v70 = a5;
  a4[1] = *a4;
  uint64_t v8 = *(void *)(a1 + 4160);
  unint64_t v9 = HIDWORD(a2);
  unint64_t v10 = HIDWORD(a2) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(a2) << 32);
  unint64_t v11 = (HIDWORD(a2) & 0xFFFE0000FFFFFFFFLL | ((unint64_t)WORD1(a2) << 32) & 0xFFFEFFFFFFFFFFFFLL | (((a2 >> 1) & 1) << 48)) ^ 0x1000000000000;
  int v12 = (int *)sub_2D5D58(v8, v10);
  if (*(unsigned char *)(v8 + 7772))
  {
    uint64_t v13 = sub_2DB8E0(v8 + 3896, v9, 0);
    unint64_t v14 = &v13[-*(int *)v13];
    if (*(unsigned __int16 *)v14 < 5u)
    {
      uint64_t v15 = 0;
    }
    else
    {
      uint64_t v15 = *((unsigned __int16 *)v14 + 2);
      if (v15) {
        v15 += (uint64_t)&v13[*(unsigned int *)&v13[v15]];
      }
    }
    unsigned int v16 = (int *)(v15 + 4 * WORD2(v11) + 4 + *(unsigned int *)(v15 + 4 * WORD2(v11) + 4));
  }
  else
  {
    unsigned int v16 = 0;
  }
  v66[0] = v12;
  v66[1] = v16;
  CFTimeZoneRef v66[2] = (int *)sub_2E5C38(v8, v10, 1);
  v66[3] = v17;
  int v67 = v9;
  unsigned __int16 v68 = WORD2(v11);
  char v69 = BYTE6(v11);
  if (sub_ED9298(v66))
  {
    int v55 = a3 ^ 1;
    char v65 = a3 ^ 1;
    uint64_t v19 = *(void *)(a1 + 4160);
    if (a3) {
      uint64_t v20 = (unsigned int *)sub_2E48C4(v66);
    }
    else {
      uint64_t v20 = (unsigned int *)sub_2E4738(v66);
    }
    int v21 = (uint64_t *)(a1 + 4136);
    BOOL v22 = sub_2E45D4(v19, v20, a1 + 4136, a3, 1, 1);
    int v23 = *(int ***)(a1 + 4144);
    BOOL v24 = *(int ***)(a1 + 4136);
    BOOL v64 = (char *)v23 - (char *)v24 == 80;
    int64_t v54 = (char *)v23 - (char *)v24;
    if ((char *)v23 - (char *)v24 == 120)
    {
      if (v24 == v23)
      {
LABEL_19:
        char v28 = 1;
        char v63 = 1;
        if (v24 != v23)
        {
LABEL_35:
          uint64_t v36 = 0;
          while (1)
          {
            int v37 = *v24;
            int v38 = (unsigned __int16 *)((char *)*v24 - **v24);
            unsigned int v39 = *v38;
            if (*((unsigned char *)v24 + 38))
            {
              if (v39 < 0xB) {
                goto LABEL_37;
              }
              uint64_t v40 = v38[5];
              if (!v40) {
                goto LABEL_37;
              }
              int v41 = *(int *)((char *)v37 + v40);
              if ((v41 & 2) == 0 && (v41 & 1) == 0) {
                goto LABEL_37;
              }
            }
            else
            {
              if (v39 < 0xB) {
                goto LABEL_37;
              }
              uint64_t v42 = v38[5];
              if (!v42) {
                goto LABEL_37;
              }
              int v43 = *(int *)((char *)v37 + v42);
              if ((v43 & 1) == 0 && (v43 & 2) == 0) {
                goto LABEL_37;
              }
            }
            ++v36;
LABEL_37:
            v24 += 5;
            if (v24 == v23)
            {
              char v44 = 3;
              if (v36 < 3) {
                char v44 = v36;
              }
              BOOL v45 = v44 != 2;
              if (*(unsigned char *)(a1 + 1)) {
                BOOL v29 = v45;
              }
              else {
                BOOL v29 = 0;
              }
              BOOL v62 = v29;
              if ((v6 & 0xFFFC) != 0)
              {
LABEL_55:
                unsigned int v46 = sub_2D98EC(a1 + 8, v11, v6 >> 2, a3, a5 == 0);
                if ((~v46 & 0xFF0000) != 0 && v22)
                {
                  uint64_t v48 = *v21;
                  if (v29
                    || ((uint64_t v49 = v48 + 40 * BYTE2(v46),
                         int v50 = *(unsigned __int16 *)(v49 + 36),
                         int v51 = *(_DWORD *)(v49 + 32),
                         v50 == v68)
                      ? (BOOL v52 = v51 == v67)
                      : (BOOL v52 = 0),
                        !v52))
                  {
                    sub_ED7DA4(a1, v6, v66, (int **)(v48 + 40 * BYTE2(v46)), (unsigned __int16)v46, (v46 >> 25) & 1, v55, v54 == 80, v28, a5 == 0, (uint64_t)a4);
                  }
                }
                return result;
              }
LABEL_21:
              char v53 = v28;
              double result = sub_2D97C4(a1 + 8, v11, a3, a5 == 0, (uint64_t *)&v58);
              uint64_t v30 = (-51 * ((*(_DWORD *)(a1 + 4144) - *(_DWORD *)(a1 + 4136)) >> 3));
              if (-51 * ((*(_DWORD *)(a1 + 4144) - *(_DWORD *)(a1 + 4136)) >> 3))
              {
                uint64_t v31 = 0;
                uint64_t v32 = 32;
                do
                {
                  uint64_t v33 = *v21;
                  uint64_t v34 = (int **)(*v21 + v32 - 32);
                  if (sub_ED9298(v34))
                  {
                    if (v67 != *(_DWORD *)(v33 + v32)) {
                      goto LABEL_70;
                    }
                    BOOL v35 = !v29;
                    if (v68 != *(unsigned __int16 *)(v33 + v32 + 4)) {
                      BOOL v35 = 0;
                    }
                    if (!v35)
                    {
LABEL_70:
                      if (!*(unsigned char *)a1
                        || a5 == 1
                        || (v74 = v58, v75 = v59, long long v72 = v60, v73 = v61, (sub_ED9368((uint64_t)&v74, &v72, v31) & 1) == 0))
                      {
                        sub_ED7DA4(a1, v6, v66, v34, 0, 0, v55, v54 == 80, v53, a5 == 0, (uint64_t)a4);
                      }
                    }
                  }
                  ++v31;
                  v32 += 40;
                }
                while (v30 != v31);
              }
              if (*(unsigned char *)a1)
              {
                if (a5 != 1)
                {
                  long long v84 = v58;
                  char v85 = v59;
                  long long v82 = v60;
                  uint64_t v83 = v61;
                  *(void *)&long long v74 = a1;
                  *((void *)&v74 + 1) = &v62;
                  uint64_t v75 = v66;
                  long long v76 = (uint64_t *)&v71;
                  uint64_t v77 = &v65;
                  BOOL v78 = &v64;
                  char v79 = &v63;
                  BOOL v80 = &v70;
                  char v81 = a4;
                  *(void *)&double result = sub_ED9730((uint64_t)&v84, &v82, (uint64_t)&v74, (uint64_t)&v72).n128_u64[0];
                }
              }
              return result;
            }
          }
        }
LABEL_20:
        BOOL v29 = *(unsigned char *)(a1 + 1) != 0;
        BOOL v62 = v29;
        if ((v6 & 0xFFFC) != 0) {
          goto LABEL_55;
        }
        goto LABEL_21;
      }
      int v25 = v24;
      while (1)
      {
        __int16 v26 = (unsigned __int16 *)((char *)*v25 - **v25);
        if (*v26 < 0xBu) {
          break;
        }
        uint64_t v27 = v26[5];
        if (!v27 || ((*(int *)((char *)*v25 + v27) ^ ((*(int *)((char *)*v25 + v27) & 2u) >> 1)) & 1) == 0) {
          break;
        }
        v25 += 5;
        if (v25 == v23) {
          goto LABEL_19;
        }
      }
    }
    char v28 = 0;
    char v63 = 0;
    if (v24 != v23) {
      goto LABEL_35;
    }
    goto LABEL_20;
  }
  return result;
}

BOOL sub_ED8D5C(int **a1)
{
  uint64_t v1 = (char *)*a1;
  double v2 = (unsigned __int16 *)((char *)*a1 - **a1);
  unsigned int v3 = *v2;
  if (*((unsigned char *)a1 + 38))
  {
    if (v3 >= 0x4D)
    {
      unsigned int v4 = v2[38];
      if (v4) {
        return (*(_DWORD *)&v1[v4] & 2) != 0;
      }
    }
  }
  else if (v3 >= 0x4D)
  {
    unsigned int v6 = v2[38];
    if (v6) {
      return (*(_DWORD *)&v1[v6] & 1) != 0;
    }
  }
  return 0;
}

BOOL sub_ED8DC0(int **a1)
{
  uint64_t v1 = (char *)*a1;
  double v2 = (unsigned __int16 *)((char *)*a1 - **a1);
  unsigned int v3 = *v2;
  if (*((unsigned char *)a1 + 38))
  {
    if (v3 >= 0x4D)
    {
      unsigned int v4 = v2[38];
      if (v4) {
        return (*(_DWORD *)&v1[v4] & 1) != 0;
      }
    }
  }
  else if (v3 >= 0x4D)
  {
    unsigned int v6 = v2[38];
    if (v6) {
      return (*(_DWORD *)&v1[v6] & 2) != 0;
    }
  }
  return 0;
}

uint64_t sub_ED8E24(int ****a1, int ***a2, int ***a3)
{
  unsigned int v3 = *a2;
  unsigned int v4 = *a3;
  if (*a3 != *a2)
  {
    while (1)
    {
      unsigned int v6 = *v3;
      uint64_t v7 = (unsigned __int16 *)((char *)*v3 - **v3);
      unsigned int v8 = *v7;
      if (*((unsigned char *)v3 + 38))
      {
        if (v8 < 0xB) {
          goto LABEL_4;
        }
        if (!v7[5]) {
          goto LABEL_4;
        }
        int v9 = *(int *)((char *)v6 + v7[5]);
        if ((v9 & 2) == 0 && (v9 & 1) == 0) {
          goto LABEL_4;
        }
      }
      else
      {
        if (v8 < 0xB) {
          goto LABEL_4;
        }
        if (!v7[5]) {
          goto LABEL_4;
        }
        int v9 = *(int *)((char *)v6 + v7[5]);
        if ((v9 & 1) == 0 && (v9 & 2) == 0) {
          goto LABEL_4;
        }
      }
      if ((v9 & 0xE0000) == 0)
      {
        if (v8 < 0x2F) {
          return 1;
        }
        uint64_t v10 = v7[23];
        if (!v10) {
          return 1;
        }
        unsigned int v11 = *((unsigned __int8 *)v6 + v10);
        BOOL v12 = v11 > 0x2A;
        uint64_t v13 = (1 << v11) & 0x50426810004;
        if (v12 || v13 == 0) {
          return 1;
        }
      }
LABEL_4:
      v3 += 5;
      uint64_t v5 = *a1;
      if (v3 == (*a1)[1])
      {
        unsigned int v3 = *v5;
        if (*v5 == v4) {
          return 0;
        }
      }
      else if (v3 == v4)
      {
        return 0;
      }
    }
  }
  return 0;
}

void *sub_ED8F18(uint64_t a1, unsigned int *a2, unsigned char *a3)
{
  uint64_t v7 = *(char **)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  unsigned int v8 = v7;
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = *(char **)a1;
    uint64_t v11 = (uint64_t)&v7[-*(void *)a1];
    uint64_t v12 = v11 >> 3;
    unint64_t v13 = (v11 >> 3) + 1;
    if (v13 >> 61) {
      sub_2E00();
    }
    uint64_t v14 = v6 - (void)v10;
    if (v14 >> 2 > v13) {
      unint64_t v13 = v14 >> 2;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      if (v15 >> 61) {
        sub_188D718();
      }
      unsigned int v16 = operator new(8 * v15);
    }
    else
    {
      unsigned int v16 = 0;
    }
    uint64_t v17 = &v16[8 * v12];
    *uint64_t v17 = ((2 * (*a3 == 0)) | ((unint64_t)*a2 << 32)) + ((unint64_t)a2[1] << 16);
    int v9 = v17 + 1;
    if (v7 != v10)
    {
      unint64_t v18 = v7 - v10 - 8;
      if (v18 < 0x58) {
        goto LABEL_27;
      }
      if ((unint64_t)(v7 - &v16[v11]) < 0x20) {
        goto LABEL_27;
      }
      uint64_t v19 = (v18 >> 3) + 1;
      uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      unsigned int v8 = &v7[-v20];
      uint64_t v17 = (void *)((char *)v17 - v20);
      int v21 = &v16[8 * v12 - 16];
      BOOL v22 = v7 - 16;
      uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *int v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_27:
        do
        {
          uint64_t v25 = *((void *)v8 - 1);
          v8 -= 8;
          *--uint64_t v17 = v25;
        }
        while (v8 != v10);
      }
    }
    *(void *)a1 = v17;
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = &v16[8 * v15];
    if (v10) {
      operator delete(v10);
    }
  }
  else
  {
    *(void *)uint64_t v7 = ((2 * (*a3 == 0)) | ((unint64_t)*a2 << 32)) + ((unint64_t)a2[1] << 16);
    int v9 = v7 + 8;
  }
  *(void *)(a1 + 8) = v9;
  return v9 - 1;
}

void *sub_ED90BC(uint64_t a1, unsigned int *a2, unsigned char *a3, _DWORD *a4, unsigned __int8 *a5)
{
  uint64_t v11 = *(char **)(a1 + 8);
  unint64_t v10 = *(void *)(a1 + 16);
  uint64_t v12 = v11;
  if ((unint64_t)v11 >= v10)
  {
    uint64_t v14 = *(char **)a1;
    uint64_t v15 = (uint64_t)&v11[-*(void *)a1];
    uint64_t v16 = v15 >> 3;
    unint64_t v17 = (v15 >> 3) + 1;
    if (v17 >> 61) {
      sub_2E00();
    }
    uint64_t v18 = v10 - (void)v14;
    if (v18 >> 2 > v17) {
      unint64_t v17 = v18 >> 2;
    }
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v19 = v17;
    }
    if (v19)
    {
      if (v19 >> 61) {
        sub_188D718();
      }
      uint64_t v20 = operator new(8 * v19);
      uint64_t v16 = v15 >> 3;
    }
    else
    {
      uint64_t v20 = 0;
    }
    int v21 = &v20[8 * v16];
    *int v21 = (*a5 | (2 * (*a3 == 0)) | (4 * (unsigned __int16)*a4) | ((unint64_t)*a2 << 32))
         + ((unint64_t)a2[1] << 16);
    unint64_t v13 = v21 + 1;
    if (v11 != v14)
    {
      unint64_t v22 = v11 - v14 - 8;
      if (v22 < 0x58) {
        goto LABEL_27;
      }
      if ((unint64_t)(v11 - v20 - v15) < 0x20) {
        goto LABEL_27;
      }
      uint64_t v23 = (v22 >> 3) + 1;
      uint64_t v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v12 = &v11[-v24];
      int v21 = (void *)((char *)v21 - v24);
      uint64_t v25 = &v20[8 * v16 - 16];
      __int16 v26 = v11 - 16;
      uint64_t v27 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v28 = *(_OWORD *)v26;
        *(v25 - 1) = *((_OWORD *)v26 - 1);
        *uint64_t v25 = v28;
        v25 -= 2;
        v26 -= 32;
        v27 -= 4;
      }
      while (v27);
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_27:
        do
        {
          uint64_t v29 = *((void *)v12 - 1);
          v12 -= 8;
          *--int v21 = v29;
        }
        while (v12 != v14);
      }
    }
    *(void *)a1 = v21;
    *(void *)(a1 + 8) = v13;
    *(void *)(a1 + 16) = &v20[8 * v19];
    if (v14) {
      operator delete(v14);
    }
  }
  else
  {
    *(void *)uint64_t v11 = (*a5 | (2 * (*a3 == 0)) | (4 * (unsigned __int16)*a4) | ((unint64_t)*a2 << 32))
                   + ((unint64_t)a2[1] << 16);
    unint64_t v13 = v11 + 8;
  }
  *(void *)(a1 + 8) = v13;
  return v13 - 1;
}

uint64_t sub_ED9298(int **a1)
{
  uint64_t v1 = (char *)*a1;
  double v2 = (unsigned __int16 *)((char *)*a1 - **a1);
  unsigned int v3 = *v2;
  if (*((unsigned char *)a1 + 38))
  {
    if (v3 < 0xB) {
      return 0;
    }
    if (!v2[5])
    {
      if (v3 <= 0x38) {
        return 0;
      }
      goto LABEL_15;
    }
    int v4 = *(_DWORD *)&v1[v2[5]];
    if ((v4 & 2) == 0)
    {
      uint64_t result = 0;
      if ((v4 & 1) != 0 || v3 <= 0x38) {
        return result;
      }
LABEL_15:
      uint64_t v7 = v2[28];
      if (!v7) {
        return 0;
      }
      unsigned int v8 = *(_DWORD *)&v1[v7];
      if ((v8 & 2) != 0) {
        return 1;
      }
      goto LABEL_21;
    }
    return 1;
  }
  if (v3 < 0xB) {
    return 0;
  }
  if (!v2[5])
  {
    if (v3 <= 0x38) {
      return 0;
    }
LABEL_19:
    uint64_t v9 = v2[28];
    if (!v9) {
      return 0;
    }
    unsigned int v8 = *(_DWORD *)&v1[v9];
    if ((v8 & 1) == 0)
    {
LABEL_21:
      if ((v8 & 7) == 4) {
        return 1;
      }
      if ((v8 & 3) == 0) {
        return (v8 >> 5) & 1;
      }
      return 0;
    }
    return 1;
  }
  int v6 = *(_DWORD *)&v1[v2[5]];
  if (v6) {
    return 1;
  }
  uint64_t result = 0;
  if ((v6 & 2) == 0 && v3 > 0x38) {
    goto LABEL_19;
  }
  return result;
}

uint64_t sub_ED9368(uint64_t a1, void *a2, unsigned __int8 a3)
{
  unsigned int v3 = *(uint64_t **)a1;
  if (*(void *)a1 != *a2)
  {
    if (v3)
    {
      uint64_t v4 = *v3;
      uint64_t v5 = *(void *)(a1 + 16);
      int v6 = (unsigned __int8 *)(v4 + 4 * v5);
      if (v6[2] == a3 && (v6[3] & 1) != 0) {
        return 1;
      }
      unsigned int v8 = (char *)(v6 + 7);
      do
      {
        ++v5;
        int v9 = *(v8 - 1);
        char v10 = *v8;
        v8 += 4;
        int v11 = v10 & 1;
      }
      while (v9 != a3 || v11 == 0);
    }
    else
    {
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v23 = *(void *)(a1 + 8) + 4;
      uint64_t v24 = v23 + 4 * v5;
      int v25 = *(unsigned __int8 *)(v24 + 2);
      int v26 = *(unsigned char *)(v24 + 3) & 1;
      if (v25 == a3 && v26 != 0) {
        return 1;
      }
      uint64_t v28 = 4 * v5 + 4;
      do
      {
        ++v5;
        uint64_t v29 = v23 + (v28 & 0x3FFFFFFFCLL);
        int v30 = *(unsigned __int8 *)(v29 + 2);
        int v31 = *(unsigned char *)(v29 + 3) & 1;
        v28 += 4;
      }
      while (v30 != a3 || v31 == 0);
    }
LABEL_49:
    *(void *)(a1 + 16) = v5;
    return 1;
  }
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = a2[1];
  if (v3)
  {
    if (v13 != v14)
    {
      uint64_t v15 = *v3;
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v16 = (unsigned __int8 *)(v15 + 4 * v5);
      if (v16[2] == a3 && (v16[3] & 1) != 0) {
        return 1;
      }
      uint64_t v18 = (char *)(v16 + 7);
      do
      {
        ++v5;
        int v19 = *(v18 - 1);
        char v20 = *v18;
        v18 += 4;
        int v21 = v20 & 1;
      }
      while (v19 != a3 || v21 == 0);
      goto LABEL_49;
    }
    uint64_t v45 = *(void *)(a1 + 16);
    if (v45 != a2[2])
    {
      unsigned int v47 = (unsigned char *)(*v3 + 4 * v45 + 3);
      do
      {
        uint64_t v43 = (*(v47 - 1) == a3) & *v47;
        if (((*(v47 - 1) == a3) & *v47) != 0) {
          break;
        }
        uint64_t v43 = 0;
        v47 += 4;
        *(void *)(a1 + 16) = ++v45;
      }
      while (v45 != a2[2]);
      return v43;
    }
    return 0;
  }
  else
  {
    if (v13 != v14)
    {
      uint64_t v33 = v13 + 4;
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v34 = v13 + 4 + 4 * v5;
      int v35 = *(unsigned __int8 *)(v34 + 2);
      int v36 = *(unsigned char *)(v34 + 3) & 1;
      if (v35 == a3 && v36 != 0) {
        return 1;
      }
      uint64_t v38 = 4 * v5 + 4;
      do
      {
        ++v5;
        uint64_t v39 = v33 + (v38 & 0x3FFFFFFFCLL);
        int v40 = *(unsigned __int8 *)(v39 + 2);
        int v41 = *(unsigned char *)(v39 + 3) & 1;
        v38 += 4;
      }
      while (v40 != a3 || v41 == 0);
      goto LABEL_49;
    }
    uint64_t v46 = *(void *)(a1 + 16);
    if (v46 != a2[2])
    {
      uint64_t v48 = v13 + 4;
      uint64_t v49 = 4 * v46;
      do
      {
        uint64_t v43 = (*(unsigned __int8 *)(v48 + (v49 & 0x3FFFFFFFCLL) + 2) == a3) & *(unsigned char *)(v48 + (v49 & 0x3FFFFFFFCLL) + 3);
        if (((*(unsigned __int8 *)(v48 + (v49 & 0x3FFFFFFFCLL) + 2) == a3) & *(unsigned char *)(v48 + (v49 & 0x3FFFFFFFCLL) + 3)) != 0) {
          break;
        }
        uint64_t v43 = 0;
        *(void *)(a1 + 16) = ++v46;
        v49 += 4;
      }
      while (v46 != a2[2]);
      return v43;
    }
    return 0;
  }
}

__n128 sub_ED95AC@<Q0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  while (1)
  {
    char v10 = *(void **)a1;
    if (*(void *)a1 == *a2 && *(void *)(a1 + 8) == a2[1] && *(void *)(a1 + 16) == a2[2]) {
      break;
    }
    if (v10)
    {
      uint64_t v9 = *(void *)(a1 + 16);
      int v11 = (unsigned __int16 *)(*v10 + 4 * v9);
      unsigned int v12 = *((unsigned __int8 *)v11 + 3);
      if (v12) {
        goto LABEL_3;
      }
    }
    else
    {
      uint64_t v9 = *(void *)(a1 + 16);
      uint64_t v13 = 4 * v9;
      int v11 = (unsigned __int16 *)(*(void *)(a1 + 8) + v13 + 4);
      unsigned int v12 = *(unsigned __int8 *)(*(void *)(a1 + 8) + v13 + 7);
      if (v12) {
        goto LABEL_3;
      }
    }
    unint64_t v14 = *((unsigned __int8 *)v11 + 2);
    uint64_t v15 = *(void *)(*(void *)a3 + 4136);
    if (0xCCCCCCCCCCCCCCCDLL * ((*(void *)(*(void *)a3 + 4144) - v15) >> 3) > v14)
    {
      int v16 = *v11;
      if (*v11) {
        BOOL v17 = **(unsigned char **)(a3 + 8) == 0;
      }
      else {
        BOOL v17 = 0;
      }
      if (!v17)
      {
        uint64_t v8 = *(void *)(a3 + 16);
LABEL_2:
        sub_ED59FC(*(void *)a3, **(void **)(a3 + 24), (int **)v8, (int **)(v15 + 40 * v14), v16, (v12 >> 1) & 1, **(unsigned __int8 **)(a3 + 32), **(unsigned __int8 **)(a3 + 40), **(unsigned char **)(a3 + 48), **(unsigned char **)(a3 + 56) == 0, *(void *)(a3 + 64));
        uint64_t v9 = *(void *)(a1 + 16);
        goto LABEL_3;
      }
      uint64_t v18 = v15 + 40 * *((unsigned __int8 *)v11 + 2);
      int v19 = *(unsigned __int16 *)(v18 + 36);
      int v20 = *(_DWORD *)(v18 + 32);
      uint64_t v8 = *(void *)(a3 + 16);
      if (v19 != *(unsigned __int16 *)(v8 + 36) || v20 != *(_DWORD *)(v8 + 32)) {
        goto LABEL_2;
      }
    }
LABEL_3:
    *(void *)(a1 + 16) = v9 + 1;
  }
  long long v22 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a4 + 32) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a4 + 48) = v22;
  *(void *)(a4 + 64) = *(void *)(a3 + 64);
  __n128 result = *(__n128 *)(a3 + 16);
  *(_OWORD *)a4 = *(_OWORD *)a3;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_ED9730@<Q0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  while (1)
  {
    char v10 = *(void **)a1;
    if (*(void *)a1 == *a2 && *(void *)(a1 + 8) == a2[1] && *(void *)(a1 + 16) == a2[2]) {
      break;
    }
    if (v10)
    {
      uint64_t v9 = *(void *)(a1 + 16);
      int v11 = (unsigned __int16 *)(*v10 + 4 * v9);
      unsigned int v12 = *((unsigned __int8 *)v11 + 3);
      if (v12) {
        goto LABEL_3;
      }
    }
    else
    {
      uint64_t v9 = *(void *)(a1 + 16);
      uint64_t v13 = 4 * v9;
      int v11 = (unsigned __int16 *)(*(void *)(a1 + 8) + v13 + 4);
      unsigned int v12 = *(unsigned __int8 *)(*(void *)(a1 + 8) + v13 + 7);
      if (v12) {
        goto LABEL_3;
      }
    }
    unint64_t v14 = *((unsigned __int8 *)v11 + 2);
    uint64_t v15 = *(void *)(*(void *)a3 + 4136);
    if (0xCCCCCCCCCCCCCCCDLL * ((*(void *)(*(void *)a3 + 4144) - v15) >> 3) > v14)
    {
      int v16 = *v11;
      if (*v11) {
        BOOL v17 = **(unsigned char **)(a3 + 8) == 0;
      }
      else {
        BOOL v17 = 0;
      }
      if (!v17)
      {
        uint64_t v8 = *(void *)(a3 + 16);
LABEL_2:
        sub_ED7DA4(*(void *)a3, **(void **)(a3 + 24), (int **)v8, (int **)(v15 + 40 * v14), v16, (v12 >> 1) & 1, **(unsigned __int8 **)(a3 + 32), **(unsigned __int8 **)(a3 + 40), **(unsigned char **)(a3 + 48), **(unsigned char **)(a3 + 56) == 0, *(void *)(a3 + 64));
        uint64_t v9 = *(void *)(a1 + 16);
        goto LABEL_3;
      }
      uint64_t v18 = v15 + 40 * *((unsigned __int8 *)v11 + 2);
      int v19 = *(unsigned __int16 *)(v18 + 36);
      int v20 = *(_DWORD *)(v18 + 32);
      uint64_t v8 = *(void *)(a3 + 16);
      if (v19 != *(unsigned __int16 *)(v8 + 36) || v20 != *(_DWORD *)(v8 + 32)) {
        goto LABEL_2;
      }
    }
LABEL_3:
    *(void *)(a1 + 16) = v9 + 1;
  }
  long long v22 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a4 + 32) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a4 + 48) = v22;
  *(void *)(a4 + 64) = *(void *)(a3 + 64);
  __n128 result = *(__n128 *)(a3 + 16);
  *(_OWORD *)a4 = *(_OWORD *)a3;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

void sub_ED98B4()
{
  unk_25FC847 = 16641;
  word_25FC830 = 65;
  byte_25FC85F = 1;
  byte_25FC849 = 0;
}

uint64_t sub_ED98DC(uint64_t a1, uint64_t a2, char a3)
{
  *(unsigned char *)a1 = a3;
  sub_F72610((void *)(a1 + 8));
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 1065353216;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = 0;
  return a1;
}

uint64_t sub_ED9920(uint64_t a1)
{
  *(unsigned char *)a1 = 1;
  sub_F72610((void *)(a1 + 8));
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 1065353216;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_ED9968(uint64_t a1, long long *a2, int a3, uint64_t a4, int a5, int a6, char **a7)
{
  uint64_t v13 = **(void **)a4 + 40 * *(void *)(a4 + 24);
  uint64_t v14 = *(void *)(v13 + 32);
  uint64_t v30 = v14;
  long long v15 = *(_OWORD *)(v13 + 16);
  v29[0] = *(_OWORD *)v13;
  v29[1] = v15;
  int v16 = *(unsigned __int8 *)(a4 + 32);
  if (*(unsigned char *)(a4 + 34))
  {
    int v17 = ((v16 == 2) << 30) | ((v16 == 0) << 31) | ((BYTE6(v14) != 0) << 29);
    uint64_t v32 = *(void *)(v13 + 32);
    long long v18 = *(_OWORD *)(v13 + 16);
    v31[0] = *(_OWORD *)v13;
    v31[1] = v18;
    BYTE6(v32) ^= 1u;
    int v19 = v31;
  }
  else
  {
    int v17 = ((v16 == 2) << 30) | ((v16 == 1) << 31) | ((BYTE6(v14) == 0) << 29);
    int v19 = v29;
  }
  v25[0] = v14;
  v25[1] = v17 | WORD2(v14);
  long long v20 = v19[1];
  long long v26 = *v19;
  long long v27 = v20;
  uint64_t v28 = *((void *)v19 + 4);
  uint64_t v21 = *(void *)(a4 + 40);
  sub_ED9B18(a1, a2, a3, (long long *)v25, 0, v21, a5, a6, a7);
  long long v22 = (unsigned __int16 *)(v26 - *(int *)v26);
  unsigned int v23 = *v22;
  if (v23 < 0x39)
  {
    if (v23 < 0xB) {
      return;
    }
  }
  else if (v22[28] && (*(unsigned char *)(v26 + v22[28] + 1) & 1) != 0)
  {
    goto LABEL_11;
  }
  uint64_t v24 = v22[5];
  if (v24 && (*(_DWORD *)(v26 + v24) & 0x1000000) != 0) {
LABEL_11:
  }
    sub_ED9B18(a1, a2, a3, (long long *)v25, 1, v21, a5, a6, a7);
}

void sub_ED9B18(uint64_t a1, long long *a2, int a3, long long *a4, int a5, int a6, int a7, int a8, char **a9)
{
  if (a8) {
    int v11 = a4;
  }
  else {
    int v11 = a2;
  }
  if (a8) {
    int v12 = a5;
  }
  else {
    int v12 = a3;
  }
  if (a8) {
    uint64_t v13 = a2;
  }
  else {
    uint64_t v13 = a4;
  }
  if (a8) {
    int v14 = a3;
  }
  else {
    int v14 = a5;
  }
  long long v15 = (int *)*((void *)v11 + 1);
  int v16 = (unsigned __int16 *)((char *)v15 - *v15);
  unsigned int v17 = *v16;
  if (v17 < 0x39)
  {
    if (v17 < 0xB)
    {
LABEL_22:
      char v18 = 2;
      goto LABEL_23;
    }
  }
  else if (v16[28] && (*((unsigned char *)v15 + v16[28] + 1) & 1) != 0)
  {
    char v18 = 0;
    goto LABEL_23;
  }
  uint64_t v19 = v16[5];
  if (!v19) {
    goto LABEL_22;
  }
  if ((*(int *)((char *)v15 + v19) & 0x1000000) != 0) {
    char v18 = 1;
  }
  else {
    char v18 = 2;
  }
LABEL_23:
  char v61 = v18;
  long long v20 = (int *)*((void *)v13 + 1);
  uint64_t v21 = (unsigned __int16 *)((char *)v20 - *v20);
  unsigned int v22 = *v21;
  if (v22 >= 0x39)
  {
    if (v21[28] && (*((unsigned char *)v20 + v21[28] + 1) & 1) != 0)
    {
      char v23 = 0;
      char v60 = 0;
      if (v12 == v14) {
        goto LABEL_37;
      }
      goto LABEL_36;
    }
    goto LABEL_29;
  }
  if (v22 >= 0xB)
  {
LABEL_29:
    uint64_t v24 = v21[5];
    if (v24)
    {
      if ((*(int *)((char *)v20 + v24) & 0x1000000) != 0) {
        char v23 = 1;
      }
      else {
        char v23 = 2;
      }
      char v60 = v23;
      if (v12 == v14) {
        goto LABEL_37;
      }
      goto LABEL_36;
    }
  }
  char v23 = 2;
  char v60 = 2;
  if (v12 == v14) {
    goto LABEL_37;
  }
LABEL_36:
  if (v18 == v23) {
    return;
  }
LABEL_37:
  int v25 = sub_F726B0((void *)(a1 + 8), (unsigned __int8 *)&v61, (unsigned __int8 *)&v60, v12, v14);
  long long v27 = a9[1];
  unint64_t v26 = (unint64_t)a9[2];
  if ((unint64_t)v27 < v26)
  {
    long long v28 = *v11;
    long long v29 = v11[2];
    *((_OWORD *)v27 + 1) = v11[1];
    *((_OWORD *)v27 + 2) = v29;
    *(_OWORD *)long long v27 = v28;
    long long v30 = *v13;
    long long v31 = v13[2];
    *((_OWORD *)v27 + 4) = v13[1];
    *((_OWORD *)v27 + 5) = v31;
    *((_OWORD *)v27 + 3) = v30;
    if (v12) {
      int v32 = 0x8000000;
    }
    else {
      int v32 = 0;
    }
    if (v14) {
      int v33 = 0x10000000;
    }
    else {
      int v33 = 0;
    }
    if (a7) {
      int v34 = 0x20000000;
    }
    else {
      int v34 = 0;
    }
    *((_DWORD *)v27 + 24) = v34 & 0xF8000000 | a6 & 0x7FFFFFF | v32 | v33 | (v25 << 30);
    int v35 = v27 + 104;
    goto LABEL_68;
  }
  int v36 = *a9;
  uint64_t v37 = 0x4EC4EC4EC4EC4EC5 * ((v27 - *a9) >> 3);
  unint64_t v38 = v37 + 1;
  if ((unint64_t)(v37 + 1) > 0x276276276276276) {
    sub_2E00();
  }
  int v58 = v25;
  int v59 = a7;
  unint64_t v39 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v26 - (void)v36) >> 3);
  if (2 * v39 > v38) {
    unint64_t v38 = 2 * v39;
  }
  if (v39 >= 0x13B13B13B13B13BLL) {
    unint64_t v40 = 0x276276276276276;
  }
  else {
    unint64_t v40 = v38;
  }
  if (v40 > 0x276276276276276) {
    sub_188D718();
  }
  uint64_t v41 = 104 * v40;
  uint64_t v42 = (char *)operator new(104 * v40);
  uint64_t v43 = &v42[104 * v37];
  char v44 = &v42[v41];
  long long v45 = v11[1];
  *(_OWORD *)uint64_t v43 = *v11;
  *((_OWORD *)v43 + 1) = v45;
  long long v46 = *v13;
  long long v47 = v13[1];
  *((_OWORD *)v43 + 2) = v11[2];
  *((_OWORD *)v43 + 3) = v46;
  long long v48 = v13[2];
  *((_OWORD *)v43 + 4) = v47;
  *((_OWORD *)v43 + 5) = v48;
  if (v12) {
    int v49 = 0x8000000;
  }
  else {
    int v49 = 0;
  }
  if (v14) {
    int v50 = 0x10000000;
  }
  else {
    int v50 = 0;
  }
  if (v59) {
    int v51 = 0x20000000;
  }
  else {
    int v51 = 0;
  }
  *((_DWORD *)v43 + 24) = v51 & 0xF8000000 | a6 & 0x7FFFFFF | v49 | v50 | (v58 << 30);
  int v35 = v43 + 104;
  if (v27 == v36)
  {
    *a9 = v43;
    a9[1] = v35;
    a9[2] = v44;
    if (!v36) {
      goto LABEL_68;
    }
  }
  else
  {
    do
    {
      long long v52 = *(_OWORD *)(v27 - 104);
      long long v53 = *(_OWORD *)(v27 - 88);
      *(_OWORD *)(v43 - 72) = *(_OWORD *)(v27 - 72);
      *(_OWORD *)(v43 - 88) = v53;
      *(_OWORD *)(v43 - 104) = v52;
      long long v54 = *(_OWORD *)(v27 - 56);
      long long v55 = *(_OWORD *)(v27 - 40);
      long long v56 = *(_OWORD *)(v27 - 24);
      long long v57 = v43 - 104;
      *((_DWORD *)v43 - 2) = *((_DWORD *)v27 - 2);
      *(_OWORD *)(v43 - 24) = v56;
      *(_OWORD *)(v43 - 40) = v55;
      *(_OWORD *)(v43 - 56) = v54;
      v27 -= 104;
      v43 -= 104;
    }
    while (v27 != v36);
    *a9 = v57;
    a9[1] = v35;
    a9[2] = v44;
    if (!v36) {
      goto LABEL_68;
    }
  }
  operator delete(v36);
LABEL_68:
  a9[1] = v35;
}

uint64_t sub_ED9E74@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_ED9E88(*((void *)a1 + 12), a2, *a1, 0, a3);
}

uint64_t sub_ED9E88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  unint64_t v9 = ((unint64_t)a2 >> 13) & 0x1000000000000;
  unint64_t v10 = a2 & 0xFFFFFFFFFFFFLL;
  uint64_t v11 = v9 | a2 & 0xFFFFFFFFFFFFLL;
  uint64_t v12 = sub_2D5D58(a1, a2 & 0xFFFFFFFFFFFFLL);
  if (a3 && *(unsigned char *)(a1 + 7772))
  {
    uint64_t v13 = sub_2DB8E0(a1 + 3896, a2, 0);
    int v14 = &v13[-*(int *)v13];
    if (*(unsigned __int16 *)v14 < 5u)
    {
      uint64_t v15 = 0;
    }
    else
    {
      uint64_t v15 = *((unsigned __int16 *)v14 + 2);
      if (v15) {
        v15 += (uint64_t)&v13[*(unsigned int *)&v13[v15]];
      }
    }
    int v17 = a4;
    uint64_t v16 = v15 + 4 * WORD2(v11) + 4 + *(unsigned int *)(v15 + 4 * WORD2(v11) + 4);
  }
  else
  {
    uint64_t v16 = 0;
    int v17 = a4;
  }
  uint64_t result = sub_2E5C38(a1, v10, v17);
  int v20 = HIDWORD(a2) & 0x40000000;
  if (a2 < 0 && v20 == 0) {
    unsigned int v22 = 0x80000000;
  }
  else {
    unsigned int v22 = 0;
  }
  *(_DWORD *)a5 = a2;
  *(_DWORD *)(a5 + 4) = v22 | (v9 >> 19) | WORD2(v11) | v20;
  *(void *)(a5 + 8) = v12;
  *(void *)(a5 + 16) = v16;
  *(void *)(a5 + 24) = result;
  *(void *)(a5 + 32) = v19;
  *(_DWORD *)(a5 + 40) = a2;
  *(_WORD *)(a5 + 44) = WORD2(v11);
  *(unsigned char *)(a5 + 46) = v9 == 0;
  return result;
}

_DWORD *sub_ED9FD0(unsigned __int8 *a1, unint64_t a2, void *a3)
{
  uint64_t v5 = 0;
  a3[1] = *a3;
  uint64_t v6 = HIDWORD(a2) & 0x1FFFFFFF;
  int8x8_t v7 = (int8x8_t)vdup_n_s32(v6);
  int8x16_t v8 = (int8x16_t)vdupq_n_s64(a2);
  int8x16_t v24 = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vorr_s8(v7, (int8x8_t)0x8000000020000000), 0x20uLL), v8);
  unint64_t v25 = a2 | ((unint64_t)(v6 | 0xA0000000) << 32);
  uint64_t v26 = a2 & 0x1FFFFFFFFFFFFFFFLL;
  int8x16_t v27 = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vorr_s8(v7, (int8x8_t)0x4000000060000000), 0x20uLL), v8);
  do
  {
    unint64_t v10 = &v24.i64[v5];
    sub_ED9E88(*((void *)a1 + 12), v24.i64[v5], *a1, 0, (uint64_t)v21);
    if ((v22 & 0x40000000) != 0) {
      int v11 = 2;
    }
    else {
      int v11 = v22 >> 31;
    }
    uint64_t result = (_DWORD *)sub_3F4FC8(&v23, v11);
    if (!result) {
      goto LABEL_4;
    }
    uint64_t result = sub_EDACB0((uint64_t)a3, &v24.i64[v5]);
    uint64_t v12 = (_DWORD *)a3[1];
    uint64_t v13 = (unsigned __int16 *)((char *)v23 - *v23);
    unsigned int v14 = *v13;
    if (v14 < 0x39)
    {
      if (v14 < 0xB) {
        goto LABEL_4;
      }
LABEL_14:
      uint64_t v15 = v13[5];
      if (!v15 || (*(int *)((char *)v23 + v15) & 0x1000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
    if (!v13[28] || (*((unsigned char *)v23 + v13[28] + 1) & 1) == 0) {
      goto LABEL_14;
    }
LABEL_16:
    char v20 = 1;
    if ((unint64_t)v12 >= a3[2])
    {
      uint64_t result = sub_EDAE70((uint64_t)a3, &v24.i64[v5], &v20);
    }
    else
    {
      unsigned int v16 = HIDWORD(*v10) & 0x40000000;
      BOOL v17 = *v10 < 0 && v16 == 0;
      int v18 = HIDWORD(*v10) & 0xFFFFFFF | ((unint64_t)*v10 >> 33) & 0x10000000;
      if (v17) {
        int v19 = 0x40000000;
      }
      else {
        int v19 = 0;
      }
      _DWORD *v12 = *v10;
      v12[1] = v18 | (v16 >> 1) | v19 | 0x80000000;
      uint64_t result = v12 + 2;
    }
    a3[1] = result;
LABEL_4:
    ++v5;
  }
  while (v5 != 6);
  return result;
}

void sub_EDA198(unsigned __int8 *a1, unint64_t a2, int a3, uint64_t a4)
{
  *(void *)(a4 + 8) = *(void *)a4;
  uint64_t v8 = a2;
  sub_ED9E88(*((void *)a1 + 12), a2 | ((HIDWORD(a2) & 0xFFFFFFF | (a2 >> 31) & 0x60000000 | (((a2 & 0x6000000000000000) == 0x4000000000000000) << 31)) << 32), *a1, 0, (uint64_t)v76);
  if ((DWORD1(v76[0]) & 0x40000000) != 0) {
    int v9 = 2;
  }
  else {
    int v9 = DWORD1(v76[0]) >> 31;
  }
  if (sub_3F4FC8((int **)v76 + 1, v9))
  {
    unint64_t v10 = (unsigned int *)((a3 & 1) != 0 ? sub_2E48C4((int **)v76 + 1) : sub_2E4738((int **)v76 + 1));
    sub_2E45D4(*((void *)a1 + 12), v10, (uint64_t)(a1 + 72), 0, *a1, 0);
    uint64_t v12 = *((void *)a1 + 9);
    uint64_t v11 = *((void *)a1 + 10);
    int v13 = HIDWORD(a2) & 0xFFFFFFF | (((HIDWORD(a2) >> 28) & 3) << 29);
    LODWORD(v14) = v13 | (((HIDWORD(a2) & 0x60000000) == 0x40000000) << 31);
    int v15 = (v13 | ((v14 >> 30 == 0) << 31)) ^ 0x20000000;
    uint64_t v14 = a3 ? v14 : v15;
    uint64_t v16 = v11 - v12;
    if (v11 != v12)
    {
      uint64_t v17 = 0;
      while (1)
      {
        uint64_t v18 = *(void *)(v12 + v17 + 32);
        if ((v18 & 0xFFFFFFFFFFFFLL) == ((v8 | (v14 << 32)) & 0xFFFFFFFFFFFFLL)
          && ((v14 & 0x20000000) == 0) != ((v18 & 0xFF000000000000) == 0))
        {
          break;
        }
        v17 += 40;
        if (v12 + v17 == v11) {
          return;
        }
      }
      unint64_t v19 = 0xCCCCCCCCCCCCCCCDLL * (v17 >> 3);
      if (v19 != 0xCCCCCCCCCCCCCCCDLL * (v16 >> 3))
      {
        v68[0] = a1 + 72;
        v68[1] = 0xCCCCCCCCCCCCCCCDLL * (v17 >> 3);
        if ((v14 & 0x40000000) != 0) {
          char v20 = 2;
        }
        else {
          char v20 = (int)v14 < 0;
        }
        char v69 = v20;
        unint64_t v70 = 0xCCCCCCCCCCCCCCCDLL * (v17 >> 3);
        char v71 = v20;
        char v72 = 1;
        char v73 = a3;
        char v74 = 1;
        uint64_t v75 = 0;
        do
          sub_EDA748((uint64_t)v68);
        while (!sub_EDA934((uint64_t)v68) && v74);
        v60[0] = a1 + 72;
        v60[1] = v19;
        char v61 = v20;
        unint64_t v62 = v19;
        char v63 = v20;
        char v64 = 0;
        char v65 = a3;
        char v66 = 1;
        uint64_t v67 = 0;
        do
          sub_EDA748((uint64_t)v60);
        while (!sub_EDA934((uint64_t)v60) && v66);
        unint64_t v21 = a2 >> 63;
        do
        {
LABEL_28:
          if (v74)
          {
            if (v66)
            {
              if (v67 >= v75) {
                unsigned int v22 = v68;
              }
              else {
                unsigned int v22 = v60;
              }
            }
            else
            {
              unsigned int v22 = v68;
            }
          }
          else
          {
            if (!v66) {
              return;
            }
            unsigned int v22 = v60;
          }
          sub_ED9968((uint64_t)a1, v76, v21, (uint64_t)v22, v16 == 80, a3, (char **)a4);
          if (v62 == v70 && v63 == v71) {
            return;
          }
        }
        while (!*((unsigned char *)v22 + 35));
        LOBYTE(v23) = *((unsigned char *)v22 + 32);
        while (1)
        {
          int v24 = *((unsigned __int8 *)v22 + 33);
          if (v23 == 2 || (v24 ^ 1) == v23) {
            break;
          }
          int v23 = v23 == 0;
          *((unsigned char *)v22 + 32) = v23;
          unint64_t v25 = v22[3];
          uint64_t v26 = (int **)(*(void *)*v22 + 40 * v25);
          int v27 = *((unsigned __int8 *)v26 + 38);
          long long v28 = *v26;
          long long v29 = (unsigned __int16 *)((char *)*v26 - **v26);
          unsigned int v30 = *v29;
          if (v27)
          {
            if (v30 < 0x39) {
              goto LABEL_56;
            }
            unsigned int v31 = v29[28];
            if (!v31 || (*(int *)((char *)v28 + v31) & 0x4000) == 0) {
              goto LABEL_56;
            }
          }
          else if (v30 < 0x39 || (unsigned int v35 = v29[28]) == 0 || (*(int *)((char *)v28 + v35) & 0x2000) == 0)
          {
LABEL_56:
            *((unsigned char *)v22 + 35) = 0;
            if (v25 != v22[1]) {
              goto LABEL_76;
            }
            goto LABEL_74;
          }
          v22[5] += sub_EDAAAC(v28);
          unint64_t v25 = v22[3];
          int v23 = *((unsigned __int8 *)v22 + 32);
          if (v25 != v22[1]) {
            goto LABEL_76;
          }
LABEL_74:
          if (v23 == *((unsigned __int8 *)v22 + 16)) {
            *((unsigned char *)v22 + 35) = 0;
          }
LABEL_76:
          if (v23 == 2)
          {
            uint64_t v50 = *(void *)*v22 + 40 * v25;
            int v51 = *(unsigned __int8 *)(v50 + 38);
            long long v52 = *(int **)v50;
            long long v53 = (unsigned __int16 *)((char *)v52 - *v52);
            unsigned int v54 = *v53;
            if (*((unsigned char *)v22 + 34))
            {
              if (v51) {
                goto LABEL_87;
              }
            }
            else if (!v51)
            {
LABEL_87:
              if (v54 >= 0x39)
              {
                unsigned int v55 = v53[28];
                if (v55)
                {
                  int v56 = 1;
                  goto LABEL_40;
                }
              }
              goto LABEL_41;
            }
            if (v54 >= 0x39)
            {
              unsigned int v55 = v53[28];
              if (v55)
              {
                int v56 = 2;
LABEL_40:
                if ((*(int *)((char *)v52 + v55) & v56) != 0) {
                  goto LABEL_28;
                }
              }
            }
          }
          else
          {
            if (v23 == 1)
            {
              uint64_t v57 = *(void *)*v22 + 40 * v25;
              int v58 = *(unsigned __int8 *)(v57 + 38);
              long long v46 = *(int **)v57;
              long long v47 = (unsigned __int16 *)((char *)v46 - *v46);
              BOOL v48 = *v47 >= 0x39u;
              if (!v58) {
                goto LABEL_80;
              }
            }
            else
            {
              if (v23) {
                goto LABEL_41;
              }
              uint64_t v44 = *(void *)*v22 + 40 * v25;
              int v45 = *(unsigned __int8 *)(v44 + 38);
              long long v46 = *(int **)v44;
              long long v47 = (unsigned __int16 *)((char *)v46 - *v46);
              BOOL v48 = *v47 >= 0x39u;
              if (v45)
              {
LABEL_80:
                if (v48)
                {
                  uint64_t v49 = v47[28];
                  if (v49)
                  {
                    if ((*(int *)((char *)v46 + v49) & 0x23) == 0x20) {
                      goto LABEL_28;
                    }
                  }
                }
                goto LABEL_41;
              }
            }
            if (v48)
            {
              uint64_t v59 = v47[28];
              if (v59)
              {
                if ((*(int *)((char *)v46 + v59) & 7) == 4) {
                  goto LABEL_28;
                }
              }
            }
          }
LABEL_41:
          if (!*((unsigned char *)v22 + 35)) {
            goto LABEL_28;
          }
        }
        unint64_t v32 = v22[3];
        int v33 = (uint64_t *)*v22;
        if (*((unsigned char *)v22 + 33))
        {
          uint64_t v34 = *v33;
          unint64_t v25 = (v32 + 1) % (0xCCCCCCCCCCCCCCCDLL * ((v33[1] - *v33) >> 3));
        }
        else
        {
          uint64_t v34 = *v33;
          if (!v32) {
            unint64_t v32 = 0xCCCCCCCCCCCCCCCDLL * ((v33[1] - v34) >> 3);
          }
          unint64_t v25 = v32 - 1;
        }
        v22[3] = v25;
        int v36 = (int **)(v34 + 40 * v25);
        int v37 = *((unsigned __int8 *)v36 + 38);
        unint64_t v38 = *v36;
        unint64_t v39 = (unsigned __int16 *)((char *)v38 - *v38);
        unsigned int v40 = *v39;
        if (v37)
        {
          if (v40 >= 0x39)
          {
            uint64_t v41 = v39[28];
            if (v41)
            {
              int v42 = *(int *)((char *)v38 + v41);
              if ((v42 & 2) != 0) {
                goto LABEL_70;
              }
              int v23 = 1;
LABEL_69:
              if ((v23 & v42) != 0)
              {
LABEL_70:
                int v23 = 2;
                *((unsigned char *)v22 + 32) = 2;
                if (v25 != v22[1]) {
                  goto LABEL_76;
                }
                goto LABEL_74;
              }
            }
          }
        }
        else if (v40 >= 0x39)
        {
          uint64_t v43 = v39[28];
          if (v43)
          {
            int v42 = *(int *)((char *)v38 + v43);
            int v23 = 2;
            if (v42) {
              goto LABEL_73;
            }
            goto LABEL_69;
          }
        }
        int v23 = v24;
LABEL_73:
        *((unsigned char *)v22 + 32) = v23;
        if (v25 != v22[1]) {
          goto LABEL_76;
        }
        goto LABEL_74;
      }
    }
  }
}

uint64_t sub_EDA748(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(unsigned __int8 *)(result + 32);
  int v3 = *(unsigned __int8 *)(result + 33);
  if (v2 == 2 || v2 == (v3 ^ 1))
  {
    unint64_t v5 = *(void *)(result + 24);
    uint64_t v6 = *(uint64_t **)result;
    if (*(unsigned char *)(result + 33))
    {
      uint64_t v7 = *v6;
      unint64_t v8 = (v5 + 1) % (0xCCCCCCCCCCCCCCCDLL * ((v6[1] - *v6) >> 3));
    }
    else
    {
      uint64_t v7 = *v6;
      if (!v5) {
        unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((v6[1] - v7) >> 3);
      }
      unint64_t v8 = v5 - 1;
    }
    *(void *)(result + 24) = v8;
    int v15 = (int **)(v7 + 40 * v8);
    int v16 = *((unsigned __int8 *)v15 + 38);
    uint64_t v17 = *v15;
    uint64_t v18 = (unsigned __int16 *)((char *)v17 - *v17);
    unsigned int v19 = *v18;
    if (v16)
    {
      if (v19 >= 0x39)
      {
        uint64_t v20 = v18[28];
        if (v20)
        {
          int v21 = *(int *)((char *)v17 + v20);
          if ((v21 & 2) != 0) {
            goto LABEL_32;
          }
          int v22 = 1;
LABEL_31:
          if ((v21 & v22) != 0)
          {
LABEL_32:
            *(unsigned char *)(result + 32) = 2;
            if (v8 != *(void *)(result + 8)) {
              return result;
            }
            goto LABEL_36;
          }
        }
      }
    }
    else if (v19 >= 0x39)
    {
      uint64_t v24 = v18[28];
      if (v24)
      {
        int v21 = *(int *)((char *)v17 + v24);
        int v22 = 2;
        if (v21) {
          goto LABEL_35;
        }
        goto LABEL_31;
      }
    }
    LOBYTE(v22) = v3;
LABEL_35:
    *(unsigned char *)(result + 32) = v22;
    if (v8 != *(void *)(result + 8)) {
      return result;
    }
    goto LABEL_36;
  }
  *(unsigned char *)(result + 32) = v2 == 0;
  uint64_t v9 = *(void *)(result + 24);
  unint64_t v10 = (uint64_t *)(**(void **)result + 40 * v9);
  int v11 = *((unsigned __int8 *)v10 + 38);
  uint64_t result = *v10;
  uint64_t v12 = (unsigned __int16 *)(*v10 - *(int *)*v10);
  unsigned int v13 = *v12;
  if (v11)
  {
    if (v13 < 0x39) {
      goto LABEL_26;
    }
    unsigned int v14 = v12[28];
    if (!v14 || (*(_DWORD *)(result + v14) & 0x4000) == 0) {
      goto LABEL_26;
    }
  }
  else if (v13 < 0x39 || (unsigned int v23 = v12[28]) == 0 || (*(_DWORD *)(result + v23) & 0x2000) == 0)
  {
LABEL_26:
    *(unsigned char *)(v1 + 35) = 0;
    if (v9 != *(void *)(v1 + 8)) {
      return result;
    }
    goto LABEL_36;
  }
  uint64_t result = sub_EDAAAC((int *)result);
  *(void *)(v1 + 40) += result;
  if (*(void *)(v1 + 24) != *(void *)(v1 + 8)) {
    return result;
  }
LABEL_36:
  if (*(unsigned __int8 *)(v1 + 32) == *(unsigned __int8 *)(v1 + 16)) {
    *(unsigned char *)(v1 + 35) = 0;
  }
  return result;
}

BOOL sub_EDA934(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 32);
  if (v1 == 2)
  {
    uint64_t v10 = **(void **)a1 + 40 * *(void *)(a1 + 24);
    int v11 = *(unsigned __int8 *)(v10 + 38);
    uint64_t v12 = *(int **)v10;
    unsigned int v13 = (unsigned __int16 *)((char *)v12 - *v12);
    unsigned int v14 = *v13;
    if (*(unsigned char *)(a1 + 34))
    {
      if (!v11)
      {
        if (v14 >= 0x39)
        {
          unsigned int v15 = v13[28];
          if (v15) {
            return (*(int *)((char *)v12 + v15) & 2) != 0;
          }
        }
        return 0;
      }
    }
    else if (v11)
    {
      if (v14 >= 0x39)
      {
        unsigned int v23 = v13[28];
        if (v23) {
          return (*(int *)((char *)v12 + v23) & 2) != 0;
        }
      }
      return 0;
    }
    if (v14 >= 0x39)
    {
      unsigned int v24 = v13[28];
      if (v24) {
        return (*(int *)((char *)v12 + v24) & 1) != 0;
      }
    }
  }
  else if (v1 == 1)
  {
    uint64_t v17 = **(void **)a1 + 40 * *(void *)(a1 + 24);
    int v18 = *(unsigned __int8 *)(v17 + 38);
    uint64_t v4 = *(int **)v17;
    unint64_t v5 = (unsigned __int16 *)((char *)v4 - *v4);
    unsigned int v19 = *v5;
    BOOL v7 = v19 >= 0x39;
    if (!v18) {
      goto LABEL_19;
    }
    if (v19 >= 0x39)
    {
      uint64_t v20 = v5[28];
      if (v20)
      {
        unsigned int v9 = *(int *)((char *)v4 + v20);
        if ((v9 & 3) == 0) {
          return (v9 >> 2) & 1;
        }
      }
    }
  }
  else if (!*(unsigned char *)(a1 + 32))
  {
    uint64_t v2 = **(void **)a1 + 40 * *(void *)(a1 + 24);
    int v3 = *(unsigned __int8 *)(v2 + 38);
    uint64_t v4 = *(int **)v2;
    unint64_t v5 = (unsigned __int16 *)((char *)v4 - *v4);
    unsigned int v6 = *v5;
    BOOL v7 = v6 >= 0x39;
    if (!v3)
    {
      if (v6 >= 0x39)
      {
        uint64_t v8 = v5[28];
        if (v8)
        {
          unsigned int v9 = *(int *)((char *)v4 + v8);
          if ((v9 & 3) == 0) {
            return (v9 >> 2) & 1;
          }
        }
      }
      return 0;
    }
LABEL_19:
    if (v7)
    {
      uint64_t v21 = v5[28];
      if (v21)
      {
        unsigned int v22 = *(int *)((char *)v4 + v21);
        if ((v22 & 3) == 0) {
          return (v22 >> 5) & 1;
        }
      }
    }
  }
  return 0;
}

uint64_t sub_EDAAAC(int *a1)
{
  int v1 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v2 = *v1;
  if (v2 >= 0x39)
  {
    if (v1[28] && (*((unsigned char *)a1 + v1[28]) & 3) != 0) {
      return 0;
    }
LABEL_6:
    if (v1[13])
    {
      unsigned int v4 = *((unsigned __int8 *)a1 + v1[13]);
      if (v4 > 7) {
        return 0;
      }
      if (v4 == 7) {
        return 200;
      }
LABEL_13:
      if (v1[10])
      {
        uint64_t v5 = *((unsigned __int8 *)a1 + v1[10]);
        if (*((unsigned char *)a1 + v1[10])) {
          goto LABEL_21;
        }
      }
      uint64_t v6 = v1[5];
      if (v1[5])
      {
LABEL_16:
        int v7 = *(int *)((char *)a1 + v6);
        uint64_t v8 = 1;
        if ((v7 & 2) != 0) {
          uint64_t v8 = 2;
        }
        if (v7) {
          uint64_t v5 = v8;
        }
        else {
          uint64_t v5 = 1;
        }
LABEL_21:
        uint64_t v9 = 200 * v5;
        if (v2 >= 0x2F)
        {
LABEL_22:
          if (v1[23])
          {
            unsigned int v10 = *((unsigned __int8 *)a1 + v1[23]);
            BOOL v11 = v10 > 0x2A;
            uint64_t v12 = (1 << v10) & 0x50426810004;
            if (!v11 && v12 != 0) {
              return v9;
            }
          }
          uint64_t v14 = 1500;
          if (v4 < 4) {
            uint64_t v14 = 3000;
          }
          if (v4 >= 6) {
            uint64_t v14 = 500;
          }
          if (v1[23] && *((unsigned char *)a1 + v1[23]) == 23) {
            goto LABEL_44;
          }
          goto LABEL_35;
        }
LABEL_31:
        uint64_t v14 = 1500;
        if (v4 < 4) {
          uint64_t v14 = 3000;
        }
        if (v4 >= 6) {
          uint64_t v14 = 500;
        }
LABEL_35:
        uint64_t v15 = v1[5];
        double v16 = 1.0;
        if (!v15 || (*(int *)((char *)a1 + v15) & 4) == 0)
        {
LABEL_45:
          double v17 = v16 * (double)v14;
          if (v17 < 0.0) {
            goto LABEL_46;
          }
          goto LABEL_51;
        }
LABEL_44:
        double v16 = 0.5;
        goto LABEL_45;
      }
LABEL_30:
      uint64_t v9 = 200;
      if (v2 >= 0x2F) {
        goto LABEL_22;
      }
      goto LABEL_31;
    }
LABEL_10:
    unsigned int v4 = 0;
    goto LABEL_13;
  }
  if (v2 >= 0x1B) {
    goto LABEL_6;
  }
  if (v2 >= 0x15) {
    goto LABEL_10;
  }
  if (v2 >= 0xB)
  {
    unsigned int v4 = 0;
    uint64_t v6 = v1[5];
    if (v1[5]) {
      goto LABEL_16;
    }
    goto LABEL_30;
  }
  uint64_t v9 = 200;
  double v17 = 1.0 * (double)3000;
  if (v17 < 0.0)
  {
LABEL_46:
    if (v17 > -4.50359963e15)
    {
      uint64_t v18 = (uint64_t)(v17 + v17);
      if (v18 >= 1) {
        --v18;
      }
      goto LABEL_53;
    }
    return v9 + (uint64_t)v17;
  }
LABEL_51:
  if (v17 < 4.50359963e15)
  {
    uint64_t v18 = (uint64_t)(v17 + v17) + 1;
LABEL_53:
    double v17 = (double)(v18 >> 1);
  }
  return v9 + (uint64_t)v17;
}

_DWORD *sub_EDACB0(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *(char **)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v12 = *(char **)a1;
    uint64_t v13 = (uint64_t)&v5[-*(void *)a1];
    uint64_t v14 = v13 >> 3;
    unint64_t v15 = (v13 >> 3) + 1;
    if (v15 >> 61) {
      sub_2E00();
    }
    uint64_t v16 = v4 - (void)v12;
    if (v16 >> 2 > v15) {
      unint64_t v15 = v16 >> 2;
    }
    BOOL v17 = (unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8;
    unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v17) {
      unint64_t v18 = v15;
    }
    if (v18 >> 61) {
      sub_188D718();
    }
    uint64_t v19 = 8 * v18;
    uint64_t v20 = operator new(8 * v18);
    uint64_t v21 = &v20[8 * v14];
    unsigned int v22 = HIDWORD(*a2) & 0x40000000;
    BOOL v23 = *a2 < 0 && v22 == 0;
    int v24 = ((unint64_t)*a2 >> 33) & 0x10000000 | HIDWORD(*a2) & 0xFFFFFFF;
    if (v23) {
      int v25 = 0x40000000;
    }
    else {
      int v25 = 0;
    }
    *uint64_t v21 = *a2;
    v21[1] = v24 | (v22 >> 1) | v25;
    BOOL v11 = v21 + 2;
    if (v5 != v12)
    {
      unint64_t v26 = v5 - v12 - 8;
      if (v26 < 0x58) {
        goto LABEL_35;
      }
      if ((unint64_t)(v5 - &v20[v13]) < 0x20) {
        goto LABEL_35;
      }
      uint64_t v27 = (v26 >> 3) + 1;
      uint64_t v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v6 = &v5[-v28];
      uint64_t v21 = (_DWORD *)((char *)v21 - v28);
      long long v29 = &v20[8 * v14 - 16];
      unsigned int v30 = v5 - 16;
      uint64_t v31 = v27 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v32 = *(_OWORD *)v30;
        *(v29 - 1) = *((_OWORD *)v30 - 1);
        *long long v29 = v32;
        v29 -= 2;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      if (v27 != (v27 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_35:
        do
        {
          uint64_t v33 = *((void *)v6 - 1);
          v6 -= 8;
          *((void *)v21 - 1) = v33;
          v21 -= 2;
        }
        while (v6 != v12);
      }
    }
    *(void *)a1 = v21;
    *(void *)(a1 + 8) = v11;
    *(void *)(a1 + 16) = &v20[v19];
    if (v12) {
      operator delete(v12);
    }
  }
  else
  {
    unsigned int v7 = HIDWORD(*a2) & 0x40000000;
    BOOL v8 = *a2 < 0 && v7 == 0;
    int v9 = ((unint64_t)*a2 >> 33) & 0x10000000 | HIDWORD(*a2) & 0xFFFFFFF;
    if (v8) {
      int v10 = 0x40000000;
    }
    else {
      int v10 = 0;
    }
    *(_DWORD *)uint64_t v5 = *a2;
    *((_DWORD *)v5 + 1) = v9 | (v7 >> 1) | v10;
    BOOL v11 = v5 + 8;
  }
  *(void *)(a1 + 8) = v11;
  return v11 - 2;
}

_DWORD *sub_EDAE70(uint64_t a1, uint64_t *a2, unsigned char *a3)
{
  unint64_t v4 = *(unsigned char **)a1;
  uint64_t v5 = *(unsigned char **)(a1 + 8);
  uint64_t v6 = (uint64_t)&v5[-*(void *)a1];
  uint64_t v7 = v6 >> 3;
  unint64_t v8 = (v6 >> 3) + 1;
  if (v8 >> 61) {
    sub_2E00();
  }
  uint64_t v9 = *(void *)(a1 + 16) - (void)v4;
  if (v9 >> 2 > v8) {
    unint64_t v8 = v9 >> 2;
  }
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
  }
  if (v8 >> 61) {
    sub_188D718();
  }
  uint64_t v12 = 8 * v8;
  uint64_t v13 = (char *)operator new(8 * v8);
  uint64_t v14 = &v13[8 * v7];
  uint64_t v15 = ((unint64_t)*a2 >> 33) & 0x10000000;
  unsigned int v16 = HIDWORD(*a2) & 0x40000000;
  BOOL v17 = *a2 < 0 && v16 == 0;
  int v18 = HIDWORD(*a2) & 0xFFFFFFF | ((*a3 != 0) << 31);
  if (v17) {
    int v19 = 0x40000000;
  }
  else {
    int v19 = 0;
  }
  *(_DWORD *)uint64_t v14 = *a2;
  *((_DWORD *)v14 + 1) = v18 | v15 | (v16 >> 1) | v19;
  uint64_t v20 = v14 + 8;
  if (v5 != v4)
  {
    unint64_t v21 = v5 - v4 - 8;
    if (v21 < 0x58) {
      goto LABEL_27;
    }
    if ((unint64_t)(&v5[-v6] - v13) < 0x20) {
      goto LABEL_27;
    }
    uint64_t v22 = (v21 >> 3) + 1;
    uint64_t v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
    int v24 = &v5[-v23];
    v14 -= v23;
    int v25 = &v13[8 * v7 - 16];
    unint64_t v26 = (long long *)(v5 - 16);
    uint64_t v27 = v22 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v28 = *v26;
      *((_OWORD *)v25 - 1) = *(v26 - 1);
      *(_OWORD *)int v25 = v28;
      v25 -= 32;
      v26 -= 2;
      v27 -= 4;
    }
    while (v27);
    uint64_t v5 = v24;
    if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_27:
      do
      {
        uint64_t v29 = *((void *)v5 - 1);
        v5 -= 8;
        *((void *)v14 - 1) = v29;
        v14 -= 8;
      }
      while (v5 != v4);
    }
  }
  *(void *)a1 = v14;
  *(void *)(a1 + 8) = v20;
  *(void *)(a1 + 16) = &v13[v12];
  if (v4) {
    operator delete(v4);
  }
  return v20;
}

void sub_EDAFF8()
{
  unk_25FC877 = 16641;
  word_25FC860 = 65;
  byte_25FC88F = 1;
  byte_25FC879 = 0;
}

void *sub_EDB020(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = (void *)a1;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)(a1 + 72) = xmmword_20B98A0;
  uint64_t v3 = a1 + 72;
  *(_OWORD *)(v3 - 48) = 0u;
  uint64_t v67 = v3 - 48;
  uint64_t v66 = v3 - 24;
  *(unsigned char *)(v3 + 26) = 0;
  *(_DWORD *)(v3 + 28) = 0;
  *(_OWORD *)(v3 - 32) = 0u;
  *(_OWORD *)(v3 - 16) = 0u;
  *(void *)(v3 + 16) = 0x3E4CCCCD3F000000;
  *(_WORD *)(v3 + 32) = -1;
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 48) = 0;
  *(void *)(v3 + 56) = 32;
  *(_WORD *)(v3 + 64) = -1;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_WORD *)(v3 + 24) = 0;
  LOWORD(v82) = -1;
  long long v84 = 0;
  uint64_t v85 = 0;
  uint64_t v83 = 0;
  uint64_t v79 = v3;
  char v73 = v2;
  sub_EDD398(v3, (uint64_t)&v82);
  if (v83)
  {
    long long v84 = v83;
    operator delete(v83);
  }
  LODWORD(v82) = 0;
  sub_745A4(v67, &v82);
  LOWORD(v82) = 0;
  sub_32B600(v66, &v82);
  uint64_t v4 = v2[1];
  if (v4 != *v2)
  {
    unint64_t v5 = 0;
    BOOL v80 = 0;
    __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    unint64_t v65 = 0xB195E8EFDB195E8FLL * ((v4 - *v2) >> 4);
    while (1)
    {
      char v72 = __p;
      unsigned __int16 v68 = (char *)v5;
      unint64_t v70 = (unint64_t)v7;
      uint64_t v83 = (char *)v6;
      long long v84 = v7;
      long long v82 = v6;
      uint64_t v9 = (void *)(*v2 + 1776 * v8);
      int v10 = *(_DWORD *)(v2[4] - 4);
      uint64_t v77 = *(unsigned __int16 *)(v2[7] - 2);
      uint64_t v12 = (char *)v9[15];
      BOOL v11 = (char *)v9[16];
      if (v12 == v11) {
        goto LABEL_12;
      }
      unint64_t v13 = v11 - v12 - 104;
      if (v13 < 0x68) {
        break;
      }
      unint64_t v15 = v13 / 0x68 + 1;
      uint64_t v14 = &v12[104 * (v15 & 0x7FFFFFFFFFFFFFELL)];
      uint64_t v16 = v15 & 0x7FFFFFFFFFFFFFELL;
      do
      {
        int v17 = *((_DWORD *)v12 + 26) + v10;
        *(_DWORD *)v12 += v10;
        *((_DWORD *)v12 + 26) = v17;
        v12 += 208;
        v16 -= 2;
      }
      while (v16);
      if (v15 != (v15 & 0x7FFFFFFFFFFFFFELL)) {
        goto LABEL_11;
      }
LABEL_12:
      char v69 = v6;
      sub_EE0640((uint64_t)v9, &v81);
      unint64_t v18 = v81.n128_u64[0];
      __p = v69;
      unint64_t v74 = v81.n128_u64[1];
      uint64_t v78 = v8;
      long long v76 = v9;
      for (int i = v10; v18 != v74; v18 += 160)
      {
        sub_EE0640((uint64_t)v9, &v81);
        unint64_t v19 = v81.n128_u64[0];
        int v20 = *(_DWORD *)(v18 + 4);
        if (v20 != -1) {
          *(_DWORD *)(v18 + 4) = *(_DWORD *)(v2[4] - 4) + v20;
        }
        int v21 = *(_DWORD *)(v18 + 80);
        if (v21 != -1) {
          *(_DWORD *)(v18 + 80) = *(_DWORD *)(v2[4] - 4) + v21;
        }
        uint64_t v22 = v77 - 0x3333333333333333 * ((uint64_t)(v18 - v19) >> 5);
        if (v8)
        {
          if (*(unsigned char *)v18 == 1)
          {
            *(unsigned char *)unint64_t v18 = 4;
            if (v72 != v80)
            {
              uint64_t v23 = v72;
              while (1)
              {
                v81.n128_u16[0] = *v23;
                int v25 = (void *)sub_EDD5CC(v79, (unsigned __int16 *)&v81);
                uint64_t v27 = (char *)v25[2];
                unint64_t v26 = v25[3];
                if ((unint64_t)v27 >= v26) {
                  break;
                }
                *(_WORD *)uint64_t v27 = v22;
                uint64_t v24 = (uint64_t)(v27 + 2);
LABEL_26:
                _DWORD v25[2] = v24;
                if (++v23 == v80) {
                  goto LABEL_48;
                }
              }
              long long v28 = (char *)v25[1];
              uint64_t v29 = v27 - v28;
              if (v27 - v28 <= -3) {
                sub_2E00();
              }
              uint64_t v30 = v29 >> 1;
              unint64_t v31 = v26 - (void)v28;
              if (v31 <= (v29 >> 1) + 1) {
                unint64_t v32 = v30 + 1;
              }
              else {
                unint64_t v32 = v31;
              }
              if (v31 >= 0x7FFFFFFFFFFFFFFELL) {
                uint64_t v33 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                uint64_t v33 = v32;
              }
              if (v33)
              {
                if (v33 < 0) {
                  sub_188D718();
                }
                uint64_t v34 = operator new(2 * v33);
                unsigned int v35 = &v34[2 * v30];
                *unsigned int v35 = v22;
                uint64_t v24 = (uint64_t)(v35 + 1);
                if (v27 == v28) {
                  goto LABEL_46;
                }
LABEL_40:
                unint64_t v36 = v27 - 2 - v28;
                if (v36 < 0x1E) {
                  goto LABEL_87;
                }
                if ((unint64_t)(v27 - &v34[v29 & 0xFFFFFFFFFFFFFFFELL]) < 0x20) {
                  goto LABEL_87;
                }
                uint64_t v37 = (v36 >> 1) + 1;
                unint64_t v38 = 2 * (v37 & 0xFFFFFFFFFFFFFFF0);
                unint64_t v39 = &v27[-v38];
                unsigned int v35 = (_WORD *)((char *)v35 - v38);
                unsigned int v40 = &v34[2 * v30 - 16];
                uint64_t v41 = v27 - 16;
                unint64_t v42 = v37 & 0xFFFFFFFFFFFFFFF0;
                do
                {
                  long long v43 = *(_OWORD *)v41;
                  *(v40 - 1) = *((_OWORD *)v41 - 1);
                  *unsigned int v40 = v43;
                  v40 -= 2;
                  v41 -= 32;
                  v42 -= 16;
                }
                while (v42);
                uint64_t v27 = v39;
                if (v37 != (v37 & 0xFFFFFFFFFFFFFFF0))
                {
LABEL_87:
                  do
                  {
                    __int16 v44 = *((_WORD *)v27 - 1);
                    v27 -= 2;
                    *--unsigned int v35 = v44;
                  }
                  while (v27 != v28);
                }
              }
              else
              {
                uint64_t v34 = 0;
                unsigned int v35 = (_WORD *)(2 * v30);
                *(_WORD *)(2 * v30) = v22;
                uint64_t v24 = 2 * v30 + 2;
                if (v27 != v28) {
                  goto LABEL_40;
                }
              }
LABEL_46:
              v25[1] = v35;
              _DWORD v25[2] = v24;
              v25[3] = &v34[2 * v33];
              if (v28) {
                operator delete(v28);
              }
              goto LABEL_26;
            }
          }
        }
LABEL_48:
        uint64_t v8 = v78;
        if (v78 == v65 - 1)
        {
          unsigned int v2 = v73;
        }
        else
        {
          if (*(unsigned char *)v18 == 2)
          {
            *(unsigned char *)unint64_t v18 = 3;
            int v45 = v83;
            if ((unint64_t)v83 < v70)
            {
              *(_WORD *)uint64_t v83 = v22;
              long long v46 = v45 + 2;
              unsigned int v2 = v73;
              uint64_t v8 = v78;
LABEL_75:
              char v69 = (unsigned __int16 *)v46;
              uint64_t v83 = v46;
              goto LABEL_16;
            }
            uint64_t v47 = v83 - (char *)__p;
            unsigned int v2 = v73;
            if (v83 - (char *)__p <= -3) {
              sub_2E00();
            }
            uint64_t v48 = v47 >> 1;
            if (v70 - (unint64_t)__p <= (v47 >> 1) + 1) {
              uint64_t v49 = v48 + 1;
            }
            else {
              uint64_t v49 = v70 - (void)__p;
            }
            if (v70 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFFELL) {
              uint64_t v50 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              uint64_t v50 = v49;
            }
            if (v50)
            {
              if (v50 < 0) {
                sub_188D718();
              }
              int v51 = operator new(2 * v50);
            }
            else
            {
              int v51 = 0;
            }
            long long v52 = &v51[2 * v48];
            *(_WORD *)long long v52 = v22;
            long long v53 = v52 + 2;
            unsigned int v54 = (char *)__p;
            if (v45 != (char *)__p)
            {
              unint64_t v55 = v45 - 2 - (char *)__p;
              if (v55 < 0x1E)
              {
                unsigned int v54 = (char *)__p;
                goto LABEL_71;
              }
              unsigned int v54 = (char *)__p;
              if (v45 - v51 - (v47 & 0xFFFFFFFFFFFFFFFELL) < 0x20) {
                goto LABEL_88;
              }
              uint64_t v56 = (v55 >> 1) + 1;
              unint64_t v57 = 2 * (v56 & 0xFFFFFFFFFFFFFFF0);
              int v58 = &v45[-v57];
              v52 -= v57;
              uint64_t v59 = &v51[2 * v48 - 16];
              char v60 = v45 - 16;
              unint64_t v61 = v56 & 0xFFFFFFFFFFFFFFF0;
              do
              {
                long long v62 = *(_OWORD *)v60;
                *(v59 - 1) = *((_OWORD *)v60 - 1);
                *uint64_t v59 = v62;
                v59 -= 2;
                v60 -= 32;
                v61 -= 16;
              }
              while (v61);
              int v45 = v58;
              unsigned int v54 = (char *)__p;
              if (v56 != (v56 & 0xFFFFFFFFFFFFFFF0))
              {
LABEL_88:
                do
                {
LABEL_71:
                  __int16 v63 = *((_WORD *)v45 - 1);
                  v45 -= 2;
                  *((_WORD *)v52 - 1) = v63;
                  v52 -= 2;
                }
                while (v45 != v54);
              }
            }
            long long v82 = v52;
            uint64_t v83 = v53;
            unint64_t v70 = (unint64_t)&v51[2 * v50];
            long long v84 = (char *)v70;
            if (v54) {
              operator delete(v54);
            }
            __p = (unsigned __int16 *)v52;
            uint64_t v8 = v78;
            long long v46 = v53;
            goto LABEL_75;
          }
          unsigned int v2 = v73;
        }
LABEL_16:
        uint64_t v9 = v76;
        int v10 = i;
      }
      v81.n128_u32[0] = v10 + ((v9[13] - v9[12]) >> 2);
      sub_745A4(v67, &v81);
      v81.n128_u64[0] = sub_EE0624((uint64_t)v9) + v77;
      sub_EDB84C(v66, &v81);
      ++v8;
      unint64_t v5 = v70;
      BOOL v80 = v69;
      uint64_t v6 = v72;
      uint64_t v7 = v68;
      if (v8 == v65)
      {
        if (v82) {
          operator delete(v82);
        }
        if (v72) {
          operator delete(v72);
        }
        return v2;
      }
    }
    uint64_t v14 = (char *)v9[15];
    do
    {
LABEL_11:
      *(_DWORD *)v14 += v10;
      v14 += 104;
    }
    while (v14 != v11);
    goto LABEL_12;
  }
  return v2;
}

void sub_EDB6B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, uint64_t a10, void **a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v23 = v20[21];
  if (v23)
  {
    long long v28 = (char *)v20[16];
    if (v28)
    {
      uint64_t v29 = 0;
      do
      {
        uint64_t v30 = (char *)v20[21] + v29;
        unint64_t v31 = (void *)*((void *)v30 + 1);
        if (v31)
        {
          *((void *)v30 + 2) = v31;
          operator delete(v31);
        }
        v29 += 32;
        --v28;
      }
      while (v28);
      uint64_t v23 = v20[21];
    }
    free(v23);
    uint64_t v24 = *a9;
    if (!*a9)
    {
LABEL_3:
      int v25 = *a11;
      if (!*a11) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v24 = *a9;
    if (!*a9) {
      goto LABEL_3;
    }
  }
  v20[19] = v24;
  operator delete(v24);
  int v25 = *a11;
  if (!*a11)
  {
LABEL_4:
    unint64_t v26 = *a12;
    if (!*a12) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  v20[7] = v25;
  operator delete(v25);
  unint64_t v26 = *a12;
  if (!*a12)
  {
LABEL_5:
    uint64_t v27 = *v20;
    if (!*v20) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  v20[4] = v26;
  operator delete(v26);
  uint64_t v27 = *v20;
  if (!*v20) {
LABEL_6:
  }
    _Unwind_Resume(exception_object);
LABEL_17:
  uint64_t v32 = (uint64_t)v20[1];
  uint64_t v33 = v27;
  if ((void *)v32 != v27)
  {
    do
    {
      v32 -= 1776;
      sub_EDD1F0(v21, v32);
    }
    while ((void *)v32 != v27);
    uint64_t v33 = *v20;
  }
  v20[1] = v27;
  operator delete(v33);
  _Unwind_Resume(exception_object);
}

_WORD *sub_EDB84C(uint64_t a1, void *a2)
{
  unint64_t v5 = *(char **)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v8 = *(char **)a1;
    uint64_t v9 = (uint64_t)&v5[-*(void *)a1];
    if (v9 <= -3) {
      sub_2E00();
    }
    uint64_t v10 = v9 >> 1;
    unint64_t v11 = v4 - (void)v8;
    if (v11 <= (v9 >> 1) + 1) {
      unint64_t v12 = v10 + 1;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v11 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v13 = v12;
    }
    if (v13)
    {
      if (v13 < 0) {
        sub_188D718();
      }
      uint64_t v14 = operator new(2 * v13);
    }
    else
    {
      uint64_t v14 = 0;
    }
    unint64_t v15 = &v14[2 * v10];
    *unint64_t v15 = *a2;
    uint64_t v7 = v15 + 1;
    if (v5 != v8)
    {
      unint64_t v16 = v5 - v8 - 2;
      if (v16 < 0x1E) {
        goto LABEL_28;
      }
      if (v5 - v14 - (v9 & 0xFFFFFFFFFFFFFFFELL) < 0x20) {
        goto LABEL_28;
      }
      uint64_t v17 = (v16 >> 1) + 1;
      unint64_t v18 = 2 * (v17 & 0xFFFFFFFFFFFFFFF0);
      uint64_t v6 = &v5[-v18];
      unint64_t v15 = (_WORD *)((char *)v15 - v18);
      unint64_t v19 = &v14[2 * v10 - 16];
      int v20 = v5 - 16;
      unint64_t v21 = v17 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        long long v22 = *(_OWORD *)v20;
        *(v19 - 1) = *((_OWORD *)v20 - 1);
        *unint64_t v19 = v22;
        v19 -= 2;
        v20 -= 32;
        v21 -= 16;
      }
      while (v21);
      if (v17 != (v17 & 0xFFFFFFFFFFFFFFF0))
      {
LABEL_28:
        do
        {
          __int16 v23 = *((_WORD *)v6 - 1);
          v6 -= 2;
          *--unint64_t v15 = v23;
        }
        while (v6 != v8);
      }
    }
    *(void *)a1 = v15;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = &v14[2 * v13];
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(_WORD *)unint64_t v5 = *a2;
    uint64_t v7 = v5 + 2;
  }
  *(void *)(a1 + 8) = v7;
  return v7 - 1;
}

char *sub_EDB9B4@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_EDB9DC(a1, a2);
}

char *sub_EDB9DC@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v21 = 0;
  long long v22 = 0uLL;
  uint64_t v4 = *(void *)result;
  uint64_t v3 = *((void *)result + 1);
  if (v3 == *(void *)result)
  {
    uint64_t v13 = 0;
    long long v11 = 0uLL;
  }
  else
  {
    unint64_t v5 = 0xB195E8EFDB195E8FLL * ((v3 - *(void *)result) >> 4);
    if (v5 >> 61) {
      sub_2E00();
    }
    uint64_t v6 = result;
    uint64_t v7 = operator new(0x8CAF477ED8CAF478 * ((v3 - *(void *)result) >> 4));
    unint64_t v21 = v7;
    *(void *)&long long v22 = v7;
    *((void *)&v22 + 1) = &v7[v5];
    do
    {
      *(void *)&long long v19 = *(void *)(v4 + 120);
      uint64_t result = sub_EDE5E4((unint64_t *)&v21, v7, &v19);
      uint64_t v7 = result + 8;
      v4 += 1776;
    }
    while (v4 != v3);
    uint64_t v10 = v6;
    uint64_t v8 = *(void *)v6;
    uint64_t v9 = *((void *)v10 + 1);
    int v20 = 0;
    long long v11 = 0uLL;
    long long v19 = 0u;
    if (v9 == v8)
    {
      uint64_t v13 = 0;
    }
    else
    {
      if ((0xB195E8EFDB195E8FLL * ((v9 - v8) >> 4)) >> 61) {
        sub_2E00();
      }
      unint64_t v12 = operator new(0x8CAF477ED8CAF478 * ((v9 - v8) >> 4));
      *(void *)&long long v19 = v12;
      *((void *)&v19 + 1) = v12;
      int v20 = &v12[0xF195E8EFDB195E8FLL * ((v9 - v8) >> 4)];
      do
      {
        uint64_t v23 = *(void *)(v8 + 128);
        uint64_t result = sub_EDE5E4((unint64_t *)&v19, v12, &v23);
        unint64_t v12 = result + 8;
        v8 += 1776;
      }
      while (v8 != v9);
      long long v11 = v19;
      uint64_t v13 = v20;
    }
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  unint64_t v14 = (unint64_t)v21;
  *(void *)(a2 + 16) = v21;
  uint64_t v15 = v22;
  *(_OWORD *)(a2 + 24) = v22;
  unint64_t v21 = 0;
  long long v22 = 0uLL;
  *(_OWORD *)(a2 + 40) = v11;
  *(void *)(a2 + 56) = v13;
  int v20 = 0;
  long long v19 = 0uLL;
  if (v14 != v15)
  {
    uint64_t v16 = (uint64_t)(v15 - v14) >> 3;
    uint64_t v17 = v16 - 1;
    if (v16 == 1)
    {
      uint64_t v18 = 0;
    }
    else
    {
      uint64_t v18 = 0;
      while (*(void *)(v14 + 8 * v18) == *(void *)(v11 + 8 * v18))
      {
        *(void *)(a2 + 8) = ++v18;
        if (v17 == v18)
        {
          uint64_t v18 = v17;
          break;
        }
      }
    }
    *(void *)a2 = *(void *)(v14 + 8 * v18);
  }
  return result;
}

void sub_EDBBB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

char *sub_EDBBF4@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_EDBC1C(a1, a2);
}

char *sub_EDBC1C@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  long long v19 = 0;
  long long v20 = 0uLL;
  uint64_t v4 = *(void *)result;
  uint64_t v3 = *((void *)result + 1);
  uint64_t v5 = v3 - *(void *)result;
  if (v3 == *(void *)result)
  {
    long long v12 = 0uLL;
  }
  else
  {
    unint64_t v6 = 0xB195E8EFDB195E8FLL * (v5 >> 4);
    if (v6 >> 61) {
      sub_2E00();
    }
    uint64_t v7 = result;
    uint64_t v8 = operator new(0x8CAF477ED8CAF478 * (v5 >> 4));
    long long v19 = v8;
    *(void *)&long long v20 = v8;
    *((void *)&v20 + 1) = &v8[v6];
    do
    {
      *(void *)uint64_t v18 = *(void *)(v4 + 120);
      uint64_t result = sub_EDE5E4((unint64_t *)&v19, v8, v18);
      uint64_t v8 = result + 8;
      v4 += 1776;
    }
    while (v4 != v3);
    long long v11 = v7;
    uint64_t v9 = *(void *)v7;
    uint64_t v10 = *((void *)v11 + 1);
    long long v12 = 0uLL;
    memset(v18, 0, sizeof(v18));
    uint64_t v5 = v10 - v9;
    if (v10 != v9)
    {
      unint64_t v13 = 0xB195E8EFDB195E8FLL * (v5 >> 4);
      if (v13 >> 61) {
        sub_2E00();
      }
      unint64_t v14 = operator new(0x8CAF477ED8CAF478 * (v5 >> 4));
      *(void *)uint64_t v18 = v14;
      *(void *)&v18[8] = v14;
      *(void *)&v18[16] = &v14[v13];
      do
      {
        uint64_t v21 = *(void *)(v9 + 128);
        uint64_t result = sub_EDE5E4((unint64_t *)v18, v14, &v21);
        unint64_t v14 = result + 8;
        v9 += 1776;
      }
      while (v9 != v10);
      uint64_t v5 = *(void *)v18;
      long long v12 = *(_OWORD *)&v18[8];
    }
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  unint64_t v15 = (unint64_t)v19;
  *(void *)(a2 + 16) = v19;
  uint64_t v16 = v20;
  *(_OWORD *)(a2 + 24) = v20;
  long long v19 = 0;
  long long v20 = 0uLL;
  *(void *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 48) = v12;
  memset(v18, 0, sizeof(v18));
  if (v15 != v16)
  {
    uint64_t v17 = (((uint64_t)v12 - v5) >> 3) - 1;
    *(void *)a2 = *(void *)(v5 + 8 * v17);
    *(void *)(a2 + 8) = v17;
  }
  return result;
}

void sub_EDBDB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_EDBDF0@<X0>(void *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = (unsigned int *)a1[4];
  unint64_t v6 = (unsigned int *)(v4 + 4);
  if ((unsigned int *)(v4 + 4) != v5)
  {
    while (*v6 <= a2)
    {
      if (++v6 == v5)
      {
        unint64_t v6 = (unsigned int *)a1[4];
        break;
      }
    }
  }
  uint64_t v7 = (unsigned __int16)((unint64_t)(v6 - v4 - 4) >> 2);
  unsigned int v8 = a2 - *(_DWORD *)(v4 + 4 * v7);
  uint64_t v9 = *a1 + 1776 * v7;
  uint64_t result = sub_EC06EC(v9, v8);
  int v11 = *(_DWORD *)(*(void *)(v9 + 96) + 4 * v8);
  *(void *)a3 = v9 + 120;
  *(void *)(a3 + 8) = v9 + 144;
  *(_DWORD *)(a3 + 16) = v11;
  return result;
}

unint64_t sub_EDBE88(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(unsigned int **)(a1 + 32);
  uint64_t v4 = (unsigned int *)(v2 + 4);
  if ((unsigned int *)(v2 + 4) != v3)
  {
    while (*v4 <= a2)
    {
      if (++v4 == v3)
      {
        uint64_t v4 = *(unsigned int **)(a1 + 32);
        return ((unint64_t)v4 - v2 - 4) >> 2;
      }
    }
  }
  return ((unint64_t)v4 - v2 - 4) >> 2;
}

uint64_t sub_EDBEC4@<X0>(void *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = (unsigned int *)a1[4];
  unint64_t v6 = (unsigned int *)(v4 + 4);
  if ((unsigned int *)(v4 + 4) != v5)
  {
    while (*v6 <= a2)
    {
      if (++v6 == v5)
      {
        unint64_t v6 = (unsigned int *)a1[4];
        break;
      }
    }
  }
  uint64_t v7 = (unsigned __int16)((unint64_t)(v6 - v4 - 4) >> 2);
  uint64_t v8 = *a1 + 1776 * v7;
  uint64_t result = sub_EC06EC(v8, a2 - *(_DWORD *)(v4 + 4 * v7));
  *(void *)a3 = v8 + 120;
  *(void *)(a3 + 8) = v8 + 144;
  *(_DWORD *)(a3 + 16) = -1;
  return result;
}

uint64_t sub_EDBF4C(void *a1, unsigned int a2)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = (unsigned int *)a1[4];
  uint64_t v4 = (unsigned int *)(v2 + 4);
  if ((unsigned int *)(v2 + 4) != v3)
  {
    while (*v4 <= a2)
    {
      if (++v4 == v3)
      {
        uint64_t v4 = (unsigned int *)a1[4];
        break;
      }
    }
  }
  uint64_t v5 = (unsigned __int16)((unint64_t)(v4 - v2 - 4) >> 2);
  return *(unsigned int *)(*(void *)(*a1 + 1776 * v5 + 168) + 4 * (a2 - *(_DWORD *)(v2 + 4 * v5)));
}

uint64_t sub_EDBFA4(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 32) - 4);
}

uint64_t sub_EDBFB0(void *a1, unsigned int a2)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = (unsigned int *)a1[4];
  uint64_t v4 = (unsigned int *)(v2 + 4);
  if ((unsigned int *)(v2 + 4) != v3)
  {
    while (*v4 <= a2)
    {
      if (++v4 == v3)
      {
        uint64_t v4 = (unsigned int *)a1[4];
        break;
      }
    }
  }
  uint64_t v5 = (unsigned __int16)((unint64_t)(v4 - v2 - 4) >> 2);
  return sub_EE02F4((void *)(*a1 + 1776 * v5), a2 - *(_DWORD *)(v2 + 4 * v5));
}

BOOL sub_EDC000(void *a1, unsigned int a2)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = (unsigned int *)a1[4];
  uint64_t v4 = (unsigned int *)(v2 + 4);
  if ((unsigned int *)(v2 + 4) != v3)
  {
    while (*v4 <= a2)
    {
      if (++v4 == v3)
      {
        uint64_t v4 = (unsigned int *)a1[4];
        break;
      }
    }
  }
  uint64_t v5 = (unsigned __int16)((unint64_t)(v4 - v2 - 4) >> 2);
  return sub_EE0528(*a1 + 1776 * v5, a2 - *(_DWORD *)(v2 + 4 * v5));
}

uint64_t sub_EDC050(void *a1, unsigned __int16 a2)
{
  uint64_t v2 = a1[6];
  uint64_t v3 = (unsigned __int16 *)a1[7];
  uint64_t v4 = (unsigned __int16 *)(v2 + 2);
  if ((unsigned __int16 *)(v2 + 2) != v3)
  {
    while (*v4 <= a2)
    {
      if (++v4 == v3)
      {
        uint64_t v4 = (unsigned __int16 *)a1[7];
        break;
      }
    }
  }
  uint64_t v5 = (unsigned __int16)((unint64_t)(v4 - v2 - 2) >> 1);
  return sub_EE0610(*a1 + 1776 * v5, a2 - *(_WORD *)(v2 + 2 * v5));
}

uint64_t sub_EDC0A4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 0;
  }
  uint64_t v3 = 0;
  do
  {
    v3 += sub_EE0624(v1);
    v1 += 1776;
  }
  while (v1 != v2);
  return v3;
}

uint64_t sub_EDC10C@<X0>(void *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = (unsigned int *)a1[4];
  uint64_t v5 = (unsigned int *)(v3 + 4);
  if ((unsigned int *)(v3 + 4) != v4)
  {
    while (*v5 <= a2)
    {
      if (++v5 == v4)
      {
        uint64_t v5 = (unsigned int *)a1[4];
        break;
      }
    }
  }
  uint64_t v6 = (unsigned __int16)((unint64_t)(v5 - v3 - 4) >> 2);
  return sub_EE064C(*a1 + 1776 * v6, a2 - *(_DWORD *)(v3 + 4 * v6), a3);
}

void sub_EDC15C(void *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = (unsigned int *)a1[4];
  uint64_t v7 = (unsigned int *)(v5 + 4);
  if ((unsigned int *)(v5 + 4) != v6)
  {
    while (*v7 <= a2)
    {
      if (++v7 == v6)
      {
        uint64_t v7 = (unsigned int *)a1[4];
        break;
      }
    }
  }
  uint64_t v8 = (unsigned __int16)((unint64_t)(v7 - v5 - 4) >> 2);
  sub_EE07B0(*a1 + 1776 * v8, a2 - *(_DWORD *)(v5 + 4 * v8), &v12);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  unint64_t v10 = v12.n128_u64[1];
  uint64_t v9 = (_WORD *)v12.n128_u64[0];
  if (v12.n128_u64[0] != v12.n128_u64[1])
  {
    int v11 = 0;
    do
    {
      __int16 v13 = *v9 + *(_WORD *)(a1[6] + 2 * v8);
      int v11 = sub_EDE954((void **)a3, v11, &v13) + 2;
      ++v9;
    }
    while (v9 != (_WORD *)v10);
  }
}

void sub_EDC234(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_EDC250@<X0>(uint64_t result@<X0>, unsigned __int16 a2@<W1>, void *a3@<X8>)
{
  uint64_t v3 = *(void *)(result + 112);
  if (*(void *)(result + 120) == v3) {
    goto LABEL_12;
  }
  uint64_t v4 = *(void *)(result + 128);
  uint64_t v5 = v4 - 1;
  uint64_t v6 = (unsigned __int16)(a2 & (v4 - 1));
  uint64_t v7 = *(void *)(result + 168);
  int v8 = *(unsigned __int16 *)(result + 136);
  int v9 = *(unsigned __int16 *)(v7 + 32 * v6);
  if (v9 == v8) {
    goto LABEL_12;
  }
  if (v3)
  {
    uint64_t v10 = 1;
    while (v9 == *(unsigned __int16 *)(result + 104) || v9 != a2)
    {
      uint64_t v6 = (v6 + v10) & v5;
      int v9 = *(unsigned __int16 *)(v7 + 32 * v6);
      ++v10;
      if (v9 == v8) {
        goto LABEL_12;
      }
    }
  }
  else
  {
    uint64_t v12 = 1;
    while (v9 != a2)
    {
      uint64_t v6 = (v6 + v12) & v5;
      int v9 = *(unsigned __int16 *)(v7 + 32 * v6);
      ++v12;
      if (v9 == v8) {
        goto LABEL_12;
      }
    }
  }
  if (v6 == -1 || (uint64_t v11 = v7 + 32 * v6, v11 == v7 + 32 * v4))
  {
LABEL_12:
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)(v11 + 8);
  }
  return result;
}

void *sub_EDC348(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)a1;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)(a1 + 72) = xmmword_20B98A0;
  uint64_t v3 = a1 + 72;
  *(_OWORD *)(v3 - 48) = 0u;
  uint64_t v66 = v3 - 48;
  uint64_t v65 = v3 - 24;
  *(unsigned char *)(v3 + 26) = 0;
  *(_DWORD *)(v3 + 28) = 0;
  *(_OWORD *)(v3 - 32) = 0u;
  *(_OWORD *)(v3 - 16) = 0u;
  *(void *)(v3 + 16) = 0x3E4CCCCD3F000000;
  *(_WORD *)(v3 + 32) = -1;
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 48) = 0;
  *(void *)(v3 + 56) = 32;
  *(_WORD *)(v3 + 64) = -1;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_WORD *)(v3 + 24) = 0;
  LOWORD(v81) = -1;
  uint64_t v83 = 0;
  uint64_t v84 = 0;
  long long v82 = 0;
  uint64_t v78 = v3;
  char v72 = v2;
  sub_EDD398(v3, (uint64_t)&v81);
  if (v82)
  {
    uint64_t v83 = v82;
    operator delete(v82);
  }
  LODWORD(v81) = 0;
  sub_745A4(v66, &v81);
  LOWORD(v81) = 0;
  sub_32B600(v65, &v81);
  uint64_t v4 = v2[1];
  if (v4 != *v2)
  {
    unint64_t v5 = 0;
    uint64_t v79 = 0;
    __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    unint64_t v64 = 0xB195E8EFDB195E8FLL * ((v4 - *v2) >> 4);
    while (1)
    {
      char v71 = __p;
      uint64_t v67 = (char *)v5;
      unint64_t v69 = (unint64_t)v7;
      long long v82 = (char *)v6;
      uint64_t v83 = v7;
      __n128 v81 = v6;
      int v9 = (void *)(*v2 + 1776 * v8);
      int v10 = *(_DWORD *)(v2[4] - 4);
      uint64_t v76 = *(unsigned __int16 *)(v2[7] - 2);
      uint64_t v12 = (char *)v9[15];
      uint64_t v11 = (char *)v9[16];
      if (v12 == v11) {
        goto LABEL_12;
      }
      unint64_t v13 = v11 - v12 - 104;
      if (v13 < 0x68) {
        break;
      }
      unint64_t v15 = v13 / 0x68 + 1;
      unint64_t v14 = &v12[104 * (v15 & 0x7FFFFFFFFFFFFFELL)];
      uint64_t v16 = v15 & 0x7FFFFFFFFFFFFFELL;
      do
      {
        int v17 = *((_DWORD *)v12 + 26) + v10;
        *(_DWORD *)v12 += v10;
        *((_DWORD *)v12 + 26) = v17;
        v12 += 208;
        v16 -= 2;
      }
      while (v16);
      if (v15 != (v15 & 0x7FFFFFFFFFFFFFELL)) {
        goto LABEL_11;
      }
LABEL_12:
      unsigned __int16 v68 = v6;
      sub_EE0640((uint64_t)v9, &v80);
      unint64_t v18 = v80.n128_u64[0];
      __p = v68;
      unint64_t v73 = v80.n128_u64[1];
      uint64_t v77 = v8;
      uint64_t v75 = v9;
      for (int i = v10; v18 != v73; v18 += 176)
      {
        sub_EE0640((uint64_t)v9, &v80);
        int v19 = *(_DWORD *)(v18 + 20);
        if (v19 != -1) {
          *(_DWORD *)(v18 + 20) = *(_DWORD *)(v2[4] - 4) + v19;
        }
        int v20 = *(_DWORD *)(v18 + 96);
        if (v20 != -1) {
          *(_DWORD *)(v18 + 96) = *(_DWORD *)(v2[4] - 4) + v20;
        }
        uint64_t v21 = v76 + 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v18 - v80.n128_u64[0]) >> 4);
        if (v8)
        {
          if (*(unsigned char *)(v18 + 16) == 1)
          {
            *(unsigned char *)(v18 + 16) = 4;
            if (v71 != v79)
            {
              long long v22 = v71;
              while (1)
              {
                v80.n128_u16[0] = *v22;
                uint64_t v24 = (void *)sub_EDD5CC(v78, (unsigned __int16 *)&v80);
                unint64_t v26 = (char *)v24[2];
                unint64_t v25 = v24[3];
                if ((unint64_t)v26 >= v25) {
                  break;
                }
                *(_WORD *)unint64_t v26 = v21;
                uint64_t v23 = (uint64_t)(v26 + 2);
LABEL_26:
                v24[2] = v23;
                if (++v22 == v79) {
                  goto LABEL_48;
                }
              }
              uint64_t v27 = (char *)v24[1];
              uint64_t v28 = v26 - v27;
              if (v26 - v27 <= -3) {
                sub_2E00();
              }
              uint64_t v29 = v28 >> 1;
              unint64_t v30 = v25 - (void)v27;
              if (v30 <= (v28 >> 1) + 1) {
                unint64_t v31 = v29 + 1;
              }
              else {
                unint64_t v31 = v30;
              }
              if (v30 >= 0x7FFFFFFFFFFFFFFELL) {
                uint64_t v32 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                uint64_t v32 = v31;
              }
              if (v32)
              {
                if (v32 < 0) {
                  sub_188D718();
                }
                uint64_t v33 = operator new(2 * v32);
                uint64_t v34 = &v33[2 * v29];
                *uint64_t v34 = v21;
                uint64_t v23 = (uint64_t)(v34 + 1);
                if (v26 == v27) {
                  goto LABEL_46;
                }
LABEL_40:
                unint64_t v35 = v26 - 2 - v27;
                if (v35 < 0x1E) {
                  goto LABEL_87;
                }
                if ((unint64_t)(v26 - &v33[v28 & 0xFFFFFFFFFFFFFFFELL]) < 0x20) {
                  goto LABEL_87;
                }
                uint64_t v36 = (v35 >> 1) + 1;
                unint64_t v37 = 2 * (v36 & 0xFFFFFFFFFFFFFFF0);
                unint64_t v38 = &v26[-v37];
                uint64_t v34 = (_WORD *)((char *)v34 - v37);
                unint64_t v39 = &v33[2 * v29 - 16];
                unsigned int v40 = v26 - 16;
                unint64_t v41 = v36 & 0xFFFFFFFFFFFFFFF0;
                do
                {
                  long long v42 = *(_OWORD *)v40;
                  *(v39 - 1) = *((_OWORD *)v40 - 1);
                  *unint64_t v39 = v42;
                  v39 -= 2;
                  v40 -= 32;
                  v41 -= 16;
                }
                while (v41);
                unint64_t v26 = v38;
                if (v36 != (v36 & 0xFFFFFFFFFFFFFFF0))
                {
LABEL_87:
                  do
                  {
                    __int16 v43 = *((_WORD *)v26 - 1);
                    v26 -= 2;
                    *--uint64_t v34 = v43;
                  }
                  while (v26 != v27);
                }
              }
              else
              {
                uint64_t v33 = 0;
                uint64_t v34 = (_WORD *)(2 * v29);
                *(_WORD *)(2 * v29) = v21;
                uint64_t v23 = 2 * v29 + 2;
                if (v26 != v27) {
                  goto LABEL_40;
                }
              }
LABEL_46:
              v24[1] = v34;
              v24[2] = v23;
              v24[3] = &v33[2 * v32];
              if (v27) {
                operator delete(v27);
              }
              goto LABEL_26;
            }
          }
        }
LABEL_48:
        uint64_t v8 = v77;
        if (v77 == v64 - 1)
        {
          uint64_t v2 = v72;
        }
        else
        {
          if (*(unsigned char *)(v18 + 16) == 2)
          {
            *(unsigned char *)(v18 + 16) = 3;
            __int16 v44 = v82;
            if ((unint64_t)v82 < v69)
            {
              *(_WORD *)long long v82 = v21;
              int v45 = v44 + 2;
              uint64_t v2 = v72;
              uint64_t v8 = v77;
LABEL_75:
              unsigned __int16 v68 = (unsigned __int16 *)v45;
              long long v82 = v45;
              goto LABEL_16;
            }
            uint64_t v46 = v82 - (char *)__p;
            uint64_t v2 = v72;
            if (v82 - (char *)__p <= -3) {
              sub_2E00();
            }
            uint64_t v47 = v46 >> 1;
            if (v69 - (unint64_t)__p <= (v46 >> 1) + 1) {
              uint64_t v48 = v47 + 1;
            }
            else {
              uint64_t v48 = v69 - (void)__p;
            }
            if (v69 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFFELL) {
              uint64_t v49 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              uint64_t v49 = v48;
            }
            if (v49)
            {
              if (v49 < 0) {
                sub_188D718();
              }
              uint64_t v50 = operator new(2 * v49);
            }
            else
            {
              uint64_t v50 = 0;
            }
            int v51 = &v50[2 * v47];
            *(_WORD *)int v51 = v21;
            long long v52 = v51 + 2;
            long long v53 = (char *)__p;
            if (v44 != (char *)__p)
            {
              unint64_t v54 = v44 - 2 - (char *)__p;
              if (v54 < 0x1E)
              {
                long long v53 = (char *)__p;
                goto LABEL_71;
              }
              long long v53 = (char *)__p;
              if (v44 - v50 - (v46 & 0xFFFFFFFFFFFFFFFELL) < 0x20) {
                goto LABEL_88;
              }
              uint64_t v55 = (v54 >> 1) + 1;
              unint64_t v56 = 2 * (v55 & 0xFFFFFFFFFFFFFFF0);
              unint64_t v57 = &v44[-v56];
              v51 -= v56;
              int v58 = &v50[2 * v47 - 16];
              uint64_t v59 = v44 - 16;
              unint64_t v60 = v55 & 0xFFFFFFFFFFFFFFF0;
              do
              {
                long long v61 = *(_OWORD *)v59;
                *(v58 - 1) = *((_OWORD *)v59 - 1);
                *int v58 = v61;
                v58 -= 2;
                v59 -= 32;
                v60 -= 16;
              }
              while (v60);
              __int16 v44 = v57;
              long long v53 = (char *)__p;
              if (v55 != (v55 & 0xFFFFFFFFFFFFFFF0))
              {
LABEL_88:
                do
                {
LABEL_71:
                  __int16 v62 = *((_WORD *)v44 - 1);
                  v44 -= 2;
                  *((_WORD *)v51 - 1) = v62;
                  v51 -= 2;
                }
                while (v44 != v53);
              }
            }
            __n128 v81 = v51;
            long long v82 = v52;
            unint64_t v69 = (unint64_t)&v50[2 * v49];
            uint64_t v83 = (char *)v69;
            if (v53) {
              operator delete(v53);
            }
            __p = (unsigned __int16 *)v51;
            uint64_t v8 = v77;
            int v45 = v52;
            goto LABEL_75;
          }
          uint64_t v2 = v72;
        }
LABEL_16:
        int v9 = v75;
        int v10 = i;
      }
      v80.n128_u32[0] = v10 + ((v9[13] - v9[12]) >> 2);
      sub_745A4(v66, &v80);
      v80.n128_u64[0] = sub_EE1820((uint64_t)v9) + v76;
      sub_EDB84C(v65, &v80);
      ++v8;
      unint64_t v5 = v69;
      uint64_t v79 = v68;
      uint64_t v6 = v71;
      uint64_t v7 = v67;
      if (v8 == v64)
      {
        if (v81) {
          operator delete(v81);
        }
        if (v71) {
          operator delete(v71);
        }
        return v2;
      }
    }
    unint64_t v14 = (char *)v9[15];
    do
    {
LABEL_11:
      *(_DWORD *)v14 += v10;
      v14 += 104;
    }
    while (v14 != v11);
    goto LABEL_12;
  }
  return v2;
}

void sub_EDC9E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, uint64_t a10, void **a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v23 = v20[21];
  if (v23)
  {
    uint64_t v28 = (char *)v20[16];
    if (v28)
    {
      uint64_t v29 = 0;
      do
      {
        unint64_t v30 = (char *)v20[21] + v29;
        unint64_t v31 = (void *)*((void *)v30 + 1);
        if (v31)
        {
          *((void *)v30 + 2) = v31;
          operator delete(v31);
        }
        v29 += 32;
        --v28;
      }
      while (v28);
      uint64_t v23 = v20[21];
    }
    free(v23);
    uint64_t v24 = *a9;
    if (!*a9)
    {
LABEL_3:
      unint64_t v25 = *a11;
      if (!*a11) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v24 = *a9;
    if (!*a9) {
      goto LABEL_3;
    }
  }
  v20[19] = v24;
  operator delete(v24);
  unint64_t v25 = *a11;
  if (!*a11)
  {
LABEL_4:
    unint64_t v26 = *a12;
    if (!*a12) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  v20[7] = v25;
  operator delete(v25);
  unint64_t v26 = *a12;
  if (!*a12)
  {
LABEL_5:
    uint64_t v27 = *v20;
    if (!*v20) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  v20[4] = v26;
  operator delete(v26);
  uint64_t v27 = *v20;
  if (!*v20) {
LABEL_6:
  }
    _Unwind_Resume(exception_object);
LABEL_17:
  uint64_t v32 = (uint64_t)v20[1];
  uint64_t v33 = v27;
  if ((void *)v32 != v27)
  {
    do
    {
      v32 -= 1776;
      sub_EDD1F0(v21, v32);
    }
    while ((void *)v32 != v27);
    uint64_t v33 = *v20;
  }
  v20[1] = v27;
  operator delete(v33);
  _Unwind_Resume(exception_object);
}

char *sub_EDCB80@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_EDCBA8(a1, a2);
}

char *sub_EDCBA8@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = 0;
  long long v22 = 0uLL;
  uint64_t v4 = *(void *)result;
  uint64_t v3 = *((void *)result + 1);
  if (v3 == *(void *)result)
  {
    unint64_t v13 = 0;
    long long v11 = 0uLL;
  }
  else
  {
    unint64_t v5 = 0xB195E8EFDB195E8FLL * ((v3 - *(void *)result) >> 4);
    if (v5 >> 61) {
      sub_2E00();
    }
    uint64_t v6 = result;
    uint64_t v7 = operator new(0x8CAF477ED8CAF478 * ((v3 - *(void *)result) >> 4));
    uint64_t v21 = v7;
    *(void *)&long long v22 = v7;
    *((void *)&v22 + 1) = &v7[v5];
    do
    {
      *(void *)&long long v19 = *(void *)(v4 + 120);
      uint64_t result = sub_EDE5E4((unint64_t *)&v21, v7, &v19);
      uint64_t v7 = result + 8;
      v4 += 1776;
    }
    while (v4 != v3);
    int v10 = v6;
    uint64_t v8 = *(void *)v6;
    uint64_t v9 = *((void *)v10 + 1);
    int v20 = 0;
    long long v11 = 0uLL;
    long long v19 = 0u;
    if (v9 == v8)
    {
      unint64_t v13 = 0;
    }
    else
    {
      if ((0xB195E8EFDB195E8FLL * ((v9 - v8) >> 4)) >> 61) {
        sub_2E00();
      }
      uint64_t v12 = operator new(0x8CAF477ED8CAF478 * ((v9 - v8) >> 4));
      *(void *)&long long v19 = v12;
      *((void *)&v19 + 1) = v12;
      int v20 = &v12[0xF195E8EFDB195E8FLL * ((v9 - v8) >> 4)];
      do
      {
        uint64_t v23 = *(void *)(v8 + 128);
        uint64_t result = sub_EDE5E4((unint64_t *)&v19, v12, &v23);
        uint64_t v12 = result + 8;
        v8 += 1776;
      }
      while (v8 != v9);
      long long v11 = v19;
      unint64_t v13 = v20;
    }
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  unint64_t v14 = (unint64_t)v21;
  *(void *)(a2 + 16) = v21;
  uint64_t v15 = v22;
  *(_OWORD *)(a2 + 24) = v22;
  uint64_t v21 = 0;
  long long v22 = 0uLL;
  *(_OWORD *)(a2 + 40) = v11;
  *(void *)(a2 + 56) = v13;
  int v20 = 0;
  long long v19 = 0uLL;
  if (v14 != v15)
  {
    uint64_t v16 = (uint64_t)(v15 - v14) >> 3;
    uint64_t v17 = v16 - 1;
    if (v16 == 1)
    {
      uint64_t v18 = 0;
    }
    else
    {
      uint64_t v18 = 0;
      while (*(void *)(v14 + 8 * v18) == *(void *)(v11 + 8 * v18))
      {
        *(void *)(a2 + 8) = ++v18;
        if (v17 == v18)
        {
          uint64_t v18 = v17;
          break;
        }
      }
    }
    *(void *)a2 = *(void *)(v14 + 8 * v18);
  }
  return result;
}

void sub_EDCD84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

char *sub_EDCDC0@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_EDCDE8(a1, a2);
}

char *sub_EDCDE8@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  long long v19 = 0;
  long long v20 = 0uLL;
  uint64_t v4 = *(void *)result;
  uint64_t v3 = *((void *)result + 1);
  uint64_t v5 = v3 - *(void *)result;
  if (v3 == *(void *)result)
  {
    long long v12 = 0uLL;
  }
  else
  {
    unint64_t v6 = 0xB195E8EFDB195E8FLL * (v5 >> 4);
    if (v6 >> 61) {
      sub_2E00();
    }
    uint64_t v7 = result;
    uint64_t v8 = operator new(0x8CAF477ED8CAF478 * (v5 >> 4));
    long long v19 = v8;
    *(void *)&long long v20 = v8;
    *((void *)&v20 + 1) = &v8[v6];
    do
    {
      *(void *)uint64_t v18 = *(void *)(v4 + 120);
      uint64_t result = sub_EDE5E4((unint64_t *)&v19, v8, v18);
      uint64_t v8 = result + 8;
      v4 += 1776;
    }
    while (v4 != v3);
    long long v11 = v7;
    uint64_t v9 = *(void *)v7;
    uint64_t v10 = *((void *)v11 + 1);
    long long v12 = 0uLL;
    memset(v18, 0, sizeof(v18));
    uint64_t v5 = v10 - v9;
    if (v10 != v9)
    {
      unint64_t v13 = 0xB195E8EFDB195E8FLL * (v5 >> 4);
      if (v13 >> 61) {
        sub_2E00();
      }
      unint64_t v14 = operator new(0x8CAF477ED8CAF478 * (v5 >> 4));
      *(void *)uint64_t v18 = v14;
      *(void *)&v18[8] = v14;
      *(void *)&v18[16] = &v14[v13];
      do
      {
        uint64_t v21 = *(void *)(v9 + 128);
        uint64_t result = sub_EDE5E4((unint64_t *)v18, v14, &v21);
        unint64_t v14 = result + 8;
        v9 += 1776;
      }
      while (v9 != v10);
      uint64_t v5 = *(void *)v18;
      long long v12 = *(_OWORD *)&v18[8];
    }
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  unint64_t v15 = (unint64_t)v19;
  *(void *)(a2 + 16) = v19;
  uint64_t v16 = v20;
  *(_OWORD *)(a2 + 24) = v20;
  long long v19 = 0;
  long long v20 = 0uLL;
  *(void *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 48) = v12;
  memset(v18, 0, sizeof(v18));
  if (v15 != v16)
  {
    uint64_t v17 = (((uint64_t)v12 - v5) >> 3) - 1;
    *(void *)a2 = *(void *)(v5 + 8 * v17);
    *(void *)(a2 + 8) = v17;
  }
  return result;
}

void sub_EDCF80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_EDCFBC(void *a1, unsigned __int16 a2)
{
  uint64_t v2 = a1[6];
  uint64_t v3 = (unsigned __int16 *)a1[7];
  uint64_t v4 = (unsigned __int16 *)(v2 + 2);
  if ((unsigned __int16 *)(v2 + 2) != v3)
  {
    while (*v4 <= a2)
    {
      if (++v4 == v3)
      {
        uint64_t v4 = (unsigned __int16 *)a1[7];
        break;
      }
    }
  }
  uint64_t v5 = (unsigned __int16)((unint64_t)(v4 - v2 - 2) >> 1);
  return sub_EE180C(*a1 + 1776 * v5, a2 - *(_WORD *)(v2 + 2 * v5));
}

uint64_t sub_EDD010(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 0;
  }
  uint64_t v3 = 0;
  do
  {
    v3 += sub_EE1820(v1);
    v1 += 1776;
  }
  while (v1 != v2);
  return v3;
}

void sub_EDD078(void *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1[3];
  unint64_t v6 = (unsigned int *)a1[4];
  uint64_t v7 = (unsigned int *)(v5 + 4);
  if ((unsigned int *)(v5 + 4) != v6)
  {
    while (*v7 <= a2)
    {
      if (++v7 == v6)
      {
        uint64_t v7 = (unsigned int *)a1[4];
        break;
      }
    }
  }
  uint64_t v8 = (unsigned __int16)((unint64_t)(v7 - v5 - 4) >> 2);
  sub_EE07B0(*a1 + 1776 * v8, a2 - *(_DWORD *)(v5 + 4 * v8), &v12);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  unint64_t v10 = v12.n128_u64[1];
  uint64_t v9 = (_WORD *)v12.n128_u64[0];
  if (v12.n128_u64[0] != v12.n128_u64[1])
  {
    long long v11 = 0;
    do
    {
      __int16 v13 = *v9 + *(_WORD *)(a1[6] + 2 * v8);
      long long v11 = sub_EDE954((void **)a3, v11, &v13) + 2;
      ++v9;
    }
    while (v9 != (_WORD *)v10);
  }
}

void sub_EDD150(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_EDD16C(void *a1)
{
  uint64_t v2 = (void *)a1[12];
  if (v2)
  {
    uint64_t v3 = a1[7];
    if (v3)
    {
      uint64_t v4 = 0;
      do
      {
        uint64_t v5 = a1[12] + v4;
        unint64_t v6 = *(void **)(v5 + 8);
        if (v6)
        {
          *(void *)(v5 + 16) = v6;
          operator delete(v6);
        }
        v4 += 32;
        --v3;
      }
      while (v3);
      uint64_t v2 = (void *)a1[12];
    }
    free(v2);
  }
  uint64_t v7 = (void *)a1[9];
  if (v7)
  {
    a1[10] = v7;
    operator delete(v7);
  }
  return a1;
}

uint64_t sub_EDD1F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 1008;
  sub_328138(a2 + 1008);
  do
  {
    uint64_t v4 = (void *)(v3 - 48);
    uint64_t v5 = *(void *)(v3 - 24);
    if (v5)
    {
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      uint64_t v8 = (void *)(v3 - 40);
      do
      {
        if ((*(char *)(*v4 + v7) & 0x80000000) == 0)
        {
          uint64_t v9 = *v8 + v6;
          unint64_t v10 = *(void **)(v9 + 8);
          if (v10)
          {
            *(void *)(v9 + 16) = v10;
            operator delete(v10);
            uint64_t v5 = *(void *)(v3 - 24);
          }
        }
        ++v7;
        v6 += 32;
      }
      while (v7 != v5);
      operator delete(*(void **)(v3 - 48));
      *(void *)(v3 - 48) = &unk_20E1710;
      *(void *)(v3 - 8) = 0;
      *(void *)(v3 - 32) = 0;
      *(void *)(v3 - 24) = 0;
      *uint64_t v8 = 0;
    }
    v3 -= 48;
  }
  while (v4 != (void *)(a2 + 240));
  long long v11 = *(void **)(a2 + 216);
  if (v11)
  {
    *(void *)(a2 + 224) = v11;
    operator delete(v11);
  }

  return sub_EDD2E4(a2);
}

uint64_t sub_EDD2E4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 192);
  if (v2)
  {
    *(void *)(a1 + 200) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 168);
  if (v3)
  {
    *(void *)(a1 + 176) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 144);
  if (v4)
  {
    *(void *)(a1 + 152) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 120);
  if (v5)
  {
    *(void *)(a1 + 128) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(a1 + 96);
  if (v6)
  {
    *(void *)(a1 + 104) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)(a1 + 72);
  if (v7)
  {
    *(void *)(a1 + 80) = v7;
    operator delete(v7);
  }
  uint64_t v8 = *(void **)(a1 + 48);
  if (v8)
  {
    *(void *)(a1 + 56) = v8;
    operator delete(v8);
  }
  uint64_t v9 = *(void **)(a1 + 24);
  if (v9)
  {
    *(void *)(a1 + 32) = v9;
    operator delete(v9);
  }
  unint64_t v10 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v10;
    operator delete(v10);
  }
  return a1;
}

uint64_t sub_EDD398(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(a1 + 72);
  uint64_t v4 = *(void **)(a1 + 72);
  *((unsigned char *)v5 - 47) = 1;
  if (v4)
  {
    *(void *)(a1 + 80) = v4;
    operator delete(v4);
  }
  *(_WORD *)(a1 + 64) = *(_WORD *)a2;
  v5[1] = 0;
  v5[2] = 0;
  *uint64_t v5 = 0;
  uint64_t v7 = *(unsigned char **)(a2 + 8);
  uint64_t v6 = *(unsigned char **)(a2 + 16);
  int64_t v8 = v6 - v7;
  if (v6 != v7)
  {
    if (v8 < 0) {
      sub_2E00();
    }
    uint64_t v9 = (char *)operator new(v6 - v7);
    *(void *)(a1 + 72) = v9;
    *(void *)(a1 + 80) = v9;
    unint64_t v10 = &v9[2 * (v8 >> 1)];
    *(void *)(a1 + 88) = v10;
    memcpy(v9, v7, v8);
    *(void *)(a1 + 80) = v10;
  }
  long long v11 = malloc_type_malloc(32 * *(void *)(a1 + 56), 0x102004084B5A0ACuLL);
  *(void *)(a1 + 96) = v11;
  uint64_t v12 = (uint64_t)v11 + 32 * *(void *)(a1 + 56);

  return sub_EDD498((uint64_t)v11, v12, (uint64_t)(v5 - 1));
}

void sub_EDD47C(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 80) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_EDD498(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = v3 + v6;
      *(_WORD *)uint64_t v7 = *(_WORD *)a3;
      *(void *)(v7 + 16) = 0;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 8) = 0;
      uint64_t v9 = *(unsigned char **)(a3 + 8);
      int64_t v8 = *(unsigned char **)(a3 + 16);
      int64_t v10 = v8 - v9;
      if (v8 != v9)
      {
        if (v10 < 0) {
          sub_2E00();
        }
        long long v11 = (char *)operator new(v8 - v9);
        *(void *)(v7 + 8) = v11;
        *(void *)(v7 + 16) = v11;
        uint64_t v12 = &v11[2 * (v10 >> 1)];
        *(void *)(v7 + 24) = v12;
        memcpy(v11, v9, v10);
        *(void *)(v7 + 16) = v12;
      }
      v6 += 32;
    }
    while (v3 + v6 != a2);
    return a2;
  }
  return v3;
}

void sub_EDD55C()
{
}

void sub_EDD5B8(_Unwind_Exception *a1)
{
}

uint64_t sub_EDD5CC(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v4 = *(void *)(a1 + 56) - 1;
  uint64_t v5 = *a2;
  uint64_t v6 = v4 & v5;
  uint64_t v7 = *(void *)(a1 + 96);
  int v8 = *(unsigned __int16 *)(a1 + 64);
  int v9 = *(unsigned __int16 *)(v7 + 32 * (v4 & v5));
  if (v9 == v8)
  {
LABEL_2:
    uint64_t v10 = v6;
    goto LABEL_3;
  }
  if (*(void *)(a1 + 40))
  {
    uint64_t v10 = -1;
    uint64_t v15 = 1;
    do
    {
      if (v9 == *(unsigned __int16 *)(a1 + 32))
      {
        if (v10 == -1) {
          uint64_t v10 = v6;
        }
      }
      else if (v9 == v5)
      {
        goto LABEL_14;
      }
      uint64_t v6 = (v6 + v15) & v4;
      int v9 = *(unsigned __int16 *)(v7 + 32 * v6);
      ++v15;
    }
    while (v9 != v8);
    if (v10 == -1) {
      goto LABEL_2;
    }
  }
  else
  {
    uint64_t v19 = 1;
    while (v9 != v5)
    {
      uint64_t v6 = (v6 + v19) & v4;
      int v9 = *(unsigned __int16 *)(v7 + 32 * v6);
      ++v19;
      if (v9 == v8) {
        goto LABEL_2;
      }
    }
LABEL_14:
    if (v6 != -1) {
      return v7 + 32 * v6;
    }
    uint64_t v10 = -1;
  }
LABEL_3:
  if (!sub_EDD828(a1, 1))
  {
    unsigned __int16 v21 = *a2;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    __p = 0;
    sub_EDDADC(a1, (uint64_t)&v21, v10, v25);
    goto LABEL_17;
  }
  unsigned __int16 v21 = *a2;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  __p = 0;
  uint64_t v11 = *(void *)(a1 + 56) - 1;
  uint64_t v6 = (unsigned __int16)(v11 & v21);
  uint64_t v7 = *(void *)(a1 + 96);
  int v12 = *(unsigned __int16 *)(a1 + 64);
  int v13 = *(unsigned __int16 *)(v7 + 32 * v6);
  if (v13 != v12)
  {
    if (*(void *)(a1 + 40))
    {
      uint64_t v14 = -1;
      uint64_t v18 = 1;
      do
      {
        if (v13 == *(unsigned __int16 *)(a1 + 32))
        {
          if (v14 == -1) {
            uint64_t v14 = v6;
          }
        }
        else if (v13 == v21)
        {
          goto LABEL_27;
        }
        uint64_t v6 = (v6 + v18) & v11;
        int v13 = *(unsigned __int16 *)(v7 + 32 * v6);
        ++v18;
      }
      while (v13 != v12);
      if (v14 != -1) {
        goto LABEL_6;
      }
      goto LABEL_5;
    }
    uint64_t v20 = 1;
    while (v13 != v21)
    {
      uint64_t v6 = (v6 + v20) & v11;
      int v13 = *(unsigned __int16 *)(v7 + 32 * v6);
      ++v20;
      if (v13 == v12) {
        goto LABEL_5;
      }
    }
LABEL_27:
    if (v6 == -1)
    {
      uint64_t v14 = -1;
      goto LABEL_6;
    }
    return v7 + 32 * v6;
  }
LABEL_5:
  uint64_t v14 = v6;
LABEL_6:
  sub_EDDADC(a1, (uint64_t)&v21, v14, v25);
LABEL_17:
  uint64_t v16 = v25[1];
  if (__p)
  {
    uint64_t v23 = __p;
    operator delete(__p);
  }
  return v16;
}

void sub_EDD808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_EDD828(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t result = sub_EDDC74(a1);
    unint64_t v5 = *(void *)(a1 + 48);
    if (v5 >= ~a2) {
      goto LABEL_35;
    }
  }
  else
  {
    uint64_t result = 0;
    unint64_t v5 = *(void *)(a1 + 48);
    if (v5 >= ~a2) {
      goto LABEL_35;
    }
  }
  unint64_t v6 = *(void *)(a1 + 56);
  unint64_t v7 = v5 + a2;
  if (v6 < 4 || v7 > *(void *)a1)
  {
    float v8 = *(float *)(a1 + 16);
    unint64_t v9 = vcvts_n_u32_f32(v8, 2uLL);
    unint64_t v10 = 4;
    if (v7 >= v9)
    {
      while ((v10 & 0x8000000000000000) == 0)
      {
        v10 *= 2;
        if (v7 < (unint64_t)(float)(v8 * (float)v10)) {
          goto LABEL_8;
        }
      }
LABEL_35:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_2E18(exception, "resize overflow");
    }
LABEL_8:
    if (v10 > v6)
    {
      unint64_t v11 = *(void *)(a1 + 40);
      unint64_t v12 = v5 - v11 + a2;
      unint64_t v13 = 4;
      if (v6 > 4) {
        goto LABEL_11;
      }
LABEL_10:
      if (v12 >= (unint64_t)(float)(v8 * (float)v13))
      {
LABEL_11:
        while ((v13 & 0x8000000000000000) == 0)
        {
          v13 *= 2;
          if (v13 >= v6) {
            goto LABEL_10;
          }
        }
        goto LABEL_35;
      }
      unint64_t v14 = v7 - (v11 >> 2);
      unint64_t v15 = 4;
      if (v14 >= v9)
      {
        while ((v15 & 0x8000000000000000) == 0)
        {
          v15 *= 2;
          if (v14 < (unint64_t)(float)(v8 * (float)v15)) {
            goto LABEL_19;
          }
        }
        goto LABEL_35;
      }
LABEL_19:
      if (v13 <= 0x7FFFFFFFFFFFFFFELL
        && v13 < v15
        && v12 >= (unint64_t)(float)(*(float *)(a1 + 20) * (float)(2 * v13)))
      {
        v13 *= 2;
      }
      sub_EDE028((uint64_t)v21, a1, v13);
      sub_EDDD98(a1, (uint64_t)v21);
      uint64_t v16 = v25;
      if (v25)
      {
        uint64_t v17 = v22;
        if (v22)
        {
          uint64_t v18 = 0;
          do
          {
            uint64_t v19 = *(void **)((char *)v25 + v18 + 8);
            if (v19)
            {
              *(void *)((char *)v25 + v18 + 16) = v19;
              operator delete(v19);
            }
            v18 += 32;
            --v17;
          }
          while (v17);
          uint64_t v16 = v25;
        }
        free(v16);
      }
      if (__p)
      {
        uint64_t v24 = __p;
        operator delete(__p);
      }
      return 1;
    }
  }
  return result;
}

void sub_EDDA78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_EDD16C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_EDDA8C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_EDDAA0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_EDDAB4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_EDDAC8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_EDDADC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  if ((unint64_t)(v5 - v6) >= 0x7FFFFFFFFFFFFFFLL)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2E18(exception, "insert overflow");
  }
  uint64_t v10 = *(void *)(a1 + 96);
  if (!v6 || *(unsigned __int16 *)(v10 + 32 * a3) != *(unsigned __int16 *)(a1 + 32))
  {
    *(void *)(a1 + 48) = v5 + 1;
    uint64_t v11 = v10 + 32 * a3;
    unint64_t v13 = (void *)(v11 + 8);
    unint64_t v12 = *(void **)(v11 + 8);
    if (!v12) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  *(void *)(a1 + 40) = v6 - 1;
  uint64_t v11 = v10 + 32 * a3;
  unint64_t v13 = (void *)(v11 + 8);
  unint64_t v12 = *(void **)(v11 + 8);
  if (v12)
  {
LABEL_7:
    *(void *)(v11 + 16) = v12;
    operator delete(v12);
  }
LABEL_8:
  *(_WORD *)uint64_t v11 = *(_WORD *)a2;
  v13[1] = 0;
  v13[2] = 0;
  void *v13 = 0;
  unint64_t v15 = *(unsigned char **)(a2 + 8);
  unint64_t v14 = *(unsigned char **)(a2 + 16);
  int64_t v16 = v14 - v15;
  if (v14 != v15)
  {
    uint64_t v17 = (char **)(v11 + 16);
    if (v16 < 0) {
      sub_2E00();
    }
    uint64_t v18 = (char *)operator new(v14 - v15);
    void *v13 = v18;
    *uint64_t v17 = v18;
    uint64_t v19 = &v18[2 * (v16 >> 1)];
    *(void *)(v11 + 24) = v19;
    memcpy(v18, v15, v16);
    *uint64_t v17 = v19;
  }
  uint64_t v20 = *(void *)(a1 + 96);
  uint64_t v21 = v20 + 32 * a3;
  uint64_t v22 = v20 + 32 * *(void *)(a1 + 56);
  *a4 = a1;
  a4[1] = v21;
  a4[2] = v22;
}

void sub_EDDC3C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_EDDC50(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v1;
  if (!*v1) {
    _Unwind_Resume(exception_object);
  }
  *uint64_t v2 = v4;
  operator delete(v4);
  _Unwind_Resume(exception_object);
}

uint64_t sub_EDDC74(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 48) - *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    BOOL v4 = v2 >= v3;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4 || (unint64_t v5 = *(void *)(a1 + 56), v5 < 0x21))
  {
    uint64_t result = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    float v6 = (float)v2;
    do
    {
      unint64_t v7 = v5;
      v5 >>= 1;
    }
    while (v7 >= 0x42 && (float)(*(float *)(a1 + 20) * (float)v5) > v6);
    sub_EDE028((uint64_t)v13, a1, v5);
    sub_EDDD98(a1, (uint64_t)v13);
    float v8 = v17;
    if (v17)
    {
      uint64_t v9 = v14;
      if (v14)
      {
        uint64_t v10 = 0;
        do
        {
          uint64_t v11 = *(void **)((char *)v17 + v10 + 8);
          if (v11)
          {
            *(void *)((char *)v17 + v10 + 16) = v11;
            operator delete(v11);
          }
          v10 += 32;
          --v9;
        }
        while (v9);
        float v8 = v17;
      }
      free(v8);
    }
    if (__p)
    {
      int64_t v16 = __p;
      operator delete(__p);
    }
    uint64_t result = 1;
    *(unsigned char *)(a1 + 24) = 0;
  }
  return result;
}

void sub_EDDD84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_EDD16C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64x2_t sub_EDDD98(uint64_t a1, uint64_t a2)
{
  uint64x2_t v5 = *(uint64x2_t *)a1;
  long long v4 = *(_OWORD *)(a1 + 16);
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(uint64x2_t *)a2 = v5;
  *(_OWORD *)(a2 + 16) = v4;
  __int16 v7 = *(_WORD *)(a1 + 32);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(_WORD *)(a2 + 32) = v7;
  uint64_t v8 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = v8;
  uint64_t v9 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = v9;
  uint64_t v10 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = v10;
  uint64_t v11 = (void *)(a1 + 72);
  unint64_t v12 = *(unsigned char **)(a1 + 72);
  __int16 v13 = *(_WORD *)(a1 + 64);
  uint64_t v14 = *(unsigned char **)(a1 + 80);
  int64_t v15 = v14 - v12;
  if (v14 == v12)
  {
    uint64_t v17 = 0;
    int64_t v16 = 0;
    if (v12)
    {
LABEL_4:
      *(void *)(a1 + 80) = v12;
      operator delete(v12);
    }
  }
  else
  {
    if (v15 < 0) {
      sub_2E00();
    }
    int64_t v16 = (char *)operator new(v14 - v12);
    uint64_t v17 = &v16[2 * (v15 >> 1)];
    memcpy(v16, v12, v15);
    if (v12) {
      goto LABEL_4;
    }
  }
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  v11[1] = 0;
  v11[2] = 0;
  void *v11 = 0;
  uint64_t v20 = *(unsigned char **)(a2 + 72);
  uint64_t v18 = *(unsigned char **)(a2 + 80);
  uint64_t v19 = (void **)(a2 + 72);
  int64_t v21 = v18 - v20;
  if (v18 != v20)
  {
    if (v21 < 0) {
      sub_2E00();
    }
    uint64_t v22 = (char *)operator new(v18 - v20);
    *(void *)(a1 + 72) = v22;
    *(void *)(a1 + 80) = v22;
    uint64_t v23 = &v22[2 * (v21 >> 1)];
    *(void *)(a1 + 88) = v23;
    memcpy(v22, v20, v21);
    *(void *)(a1 + 80) = v23;
    uint64_t v20 = *v19;
  }
  if (v20)
  {
    *(void *)(a2 + 80) = v20;
    operator delete(v20);
  }
  *(_WORD *)(a2 + 64) = v13;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *uint64_t v19 = 0;
  uint64_t v24 = v17 - v16;
  if (v17 != v16)
  {
    if (v24 < 0) {
      sub_2E00();
    }
    unint64_t v25 = (char *)operator new(v17 - v16);
    *(void *)(a2 + 72) = v25;
    unint64_t v26 = &v25[2 * (v24 >> 1)];
    *(void *)(a2 + 88) = v26;
    memcpy(v25, v16, v17 - v16);
    *(void *)(a2 + 80) = v26;
  }
  if (v16) {
    operator delete(v16);
  }
  uint64_t v27 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a2 + 96) = v27;
  *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)*(unint64_t *)(a1 + 56))));
  *(unsigned char *)(a1 + 24) = 0;
  uint64x2_t result = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a2 + 16), (float)*(unint64_t *)(a2 + 56))));
  *(uint64x2_t *)a2 = result;
  *(unsigned char *)(a2 + 24) = 0;
  return result;
}

void sub_EDDFCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  int64_t v15 = *v13;
  if (*v13)
  {
    *(void *)(v11 + 80) = v15;
    operator delete(v15);
  }
  if (v12) {
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_EDE028(uint64_t a1, uint64_t a2, unint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0;
  __int16 v7 = *(_WORD *)(a2 + 64);
  *(void *)(a1 + 72) = 0;
  *(_WORD *)(a1 + 64) = v7;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  uint64_t v9 = *(unsigned char **)(a2 + 72);
  uint64_t v8 = *(unsigned char **)(a2 + 80);
  int64_t v10 = v8 - v9;
  if (v8 != v9)
  {
    if (v10 < 0) {
      sub_2E00();
    }
    uint64_t v11 = (char *)operator new(v8 - v9);
    *(void *)(a1 + 72) = v11;
    *(void *)(a1 + 80) = v11;
    unint64_t v12 = &v11[2 * (v10 >> 1)];
    *(void *)(a1 + 88) = v12;
    memcpy(v11, v9, v10);
    *(void *)(a1 + 80) = v12;
  }
  *(void *)(a1 + 96) = 0;
  if (*(unsigned char *)(a2 + 25))
  {
    *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_f32(*(float32x2_t *)(a1 + 16), 0)));
    *(unsigned char *)(a1 + 24) = 0;
    sub_EDE1F8(a1, a2, a3);
  }
  else
  {
    unint64_t v13 = 4;
    if (a3 > 4) {
      goto LABEL_8;
    }
    while (1)
    {
      float v14 = *(float *)(a1 + 16) * (float)v13;
      if (*(void *)(a2 + 48) - *(void *)(a2 + 40) < (unint64_t)v14) {
        break;
      }
      do
      {
LABEL_8:
        if ((v13 & 0x8000000000000000) != 0)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "resize overflow");
        }
        v13 *= 2;
      }
      while (v13 < a3);
    }
    *(void *)(a1 + 56) = v13;
    float v15 = *(float *)(a1 + 20) * (float)v13;
    *(void *)a1 = (unint64_t)v14;
    *(void *)(a1 + 8) = (unint64_t)v15;
    *(unsigned char *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_EDE1C8(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 80) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_EDE1F8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5 = *(void *)(a2 + 48) - *(void *)(a2 + 40);
  unint64_t v6 = 4;
  if (a3 <= 4) {
    goto LABEL_4;
  }
  do
  {
    do
    {
      if ((v6 & 0x8000000000000000) != 0)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_2E18(exception, "resize overflow");
      }
      v6 *= 2;
    }
    while (v6 < a3);
LABEL_4:
    ;
  }
  while (v5 >= (unint64_t)(float)(*(float *)(a1 + 16) * (float)v6));
  sub_EDE4B4(a1, v6);
  uint64_t v7 = *(void *)(a2 + 56);
  if (v7)
  {
    int v8 = *(unsigned __int16 *)(a2 + 64);
    if (*(void *)(a2 + 40))
    {
      uint64_t v9 = 32 * v7;
      int64_t v10 = *(unsigned __int16 **)(a2 + 96);
      while (1)
      {
        int v11 = *v10;
        if (v11 != v8 && v11 != *(unsigned __int16 *)(a2 + 32)) {
          break;
        }
        v10 += 16;
        v9 -= 32;
        if (!v9) {
          goto LABEL_43;
        }
      }
    }
    else
    {
      uint64_t v33 = 32 * v7;
      int64_t v10 = *(unsigned __int16 **)(a2 + 96);
      while (*v10 == v8)
      {
        v10 += 16;
        v33 -= 32;
        if (!v33) {
          goto LABEL_43;
        }
      }
    }
  }
  else
  {
    int64_t v10 = *(unsigned __int16 **)(a2 + 96);
  }
  uint64_t v13 = *(void *)(a2 + 96) + 32 * v7;
  if (v10 != (unsigned __int16 *)v13)
  {
    do
    {
      uint64_t v14 = *(void *)(a1 + 56) - 1;
      uint64_t v15 = *v10;
      uint64_t v16 = *(void *)(a1 + 96);
      int v17 = *(unsigned __int16 *)(a1 + 64);
      uint64_t v18 = v14 & v15;
      if (*(unsigned __int16 *)(v16 + 32 * (v14 & v15)) != v17)
      {
        uint64_t v19 = 1;
        do
          uint64_t v18 = (v18 + v19++) & v14;
        while (*(unsigned __int16 *)(v16 + 32 * v18) != v17);
      }
      uint64_t v20 = v16 + 32 * v18;
      uint64_t v22 = (void *)(v20 + 8);
      int64_t v21 = *(void **)(v20 + 8);
      if (v21)
      {
        *(void *)(v20 + 16) = v21;
        operator delete(v21);
        LOWORD(v15) = *v10;
      }
      *(_WORD *)uint64_t v20 = v15;
      *(void *)(v20 + 16) = 0;
      *(void *)(v20 + 24) = 0;
      *uint64_t v22 = 0;
      uint64_t v24 = (unsigned char *)*((void *)v10 + 1);
      uint64_t v23 = (unsigned char *)*((void *)v10 + 2);
      int64_t v25 = v23 - v24;
      if (v23 != v24)
      {
        unint64_t v26 = (char **)(v20 + 16);
        if (v25 < 0) {
          sub_2E00();
        }
        uint64_t v27 = (char *)operator new(v23 - v24);
        *uint64_t v22 = v27;
        *unint64_t v26 = v27;
        uint64_t v28 = &v27[2 * (v25 >> 1)];
        *(void *)(v20 + 24) = v28;
        memcpy(v27, v24, v25);
        *unint64_t v26 = v28;
      }
      ++*(void *)(a1 + 48);
      uint64_t v29 = v10 + 16;
      int64_t v10 = (unsigned __int16 *)v13;
      if (v29 != (unsigned __int16 *)v13)
      {
        int v30 = *(unsigned __int16 *)(a2 + 64);
        if (*(void *)(a2 + 40))
        {
          while (1)
          {
            int v31 = *v29;
            if (v31 != v30 && v31 != *(unsigned __int16 *)(a2 + 32)) {
              break;
            }
            v29 += 16;
            if (v29 == (unsigned __int16 *)v13) {
              goto LABEL_39;
            }
          }
        }
        else
        {
          while (*v29 == v30)
          {
            v29 += 16;
            if (v29 == (unsigned __int16 *)v13)
            {
LABEL_39:
              int64_t v10 = (unsigned __int16 *)v13;
              goto LABEL_19;
            }
          }
        }
        int64_t v10 = v29;
      }
LABEL_19:
      ;
    }
    while (v10 != (unsigned __int16 *)(*(void *)(a2 + 96) + 32 * *(void *)(a2 + 56)));
  }
LABEL_43:
  ++*(_DWORD *)(a1 + 28);
}

void sub_EDE480(_Unwind_Exception *exception_object)
{
  long long v4 = *v1;
  if (*v1)
  {
    *unint64_t v2 = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_EDE4A0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64x2_t sub_EDE4B4(uint64_t a1, unint64_t a2)
{
  long long v4 = *(void **)(a1 + 96);
  if (!v4)
  {
    uint64_t v9 = malloc_type_malloc(32 * a2, 0x102004084B5A0ACuLL);
LABEL_12:
    *(void *)(a1 + 96) = v9;
    long long v4 = v9;
    goto LABEL_13;
  }
  uint64_t v5 = *(void *)(a1 + 56);
  if (!v5)
  {
    if (!a2) {
      goto LABEL_13;
    }
    goto LABEL_11;
  }
  uint64_t v6 = 0;
  do
  {
    uint64_t v7 = *(void *)(a1 + 96) + v6;
    int v8 = *(void **)(v7 + 8);
    if (v8)
    {
      *(void *)(v7 + 16) = v8;
      operator delete(v8);
    }
    v6 += 32;
    --v5;
  }
  while (v5);
  long long v4 = *(void **)(a1 + 96);
  if (*(void *)(a1 + 56) != a2)
  {
LABEL_11:
    uint64_t v9 = malloc_type_realloc(v4, 32 * a2, 0x102004084B5A0ACuLL);
    if (!v9)
    {
      fprintf(__stderrp, "sparsehash: FATAL ERROR: failed to reallocate %lu elements for ptr %p", a2, v4);
      exit(1);
    }
    goto LABEL_12;
  }
LABEL_13:
  sub_EDD498((uint64_t)v4, (uint64_t)v4 + 32 * a2, a1 + 64);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = a2;
  uint64x2_t result = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)a2)));
  *(uint64x2_t *)a1 = result;
  *(unsigned char *)(a1 + 24) = 0;
  return result;
}

char *sub_EDE5E4(unint64_t *a1, void *a2, void *a3)
{
  unint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v7 = (uint64_t)a2 - *a1;
  uint64_t v8 = v7 >> 3;
  uint64_t v9 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  unint64_t v10 = a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(void *)uint64_t v9 = *a3;
      a1[1] = (unint64_t)(v9 + 8);
      return v9;
    }
    int64_t v11 = v5 - (void)(v9 + 8);
    uint64_t v12 = v11 >> 3;
    uint64_t v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      uint64_t v19 = (void *)a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      uint64_t v15 = (char *)(v14 + v6);
      unint64_t v16 = v14 + v6 + 8;
      if (v5 > v16) {
        unint64_t v16 = a1[1];
      }
      unint64_t v17 = v16 + ~v6 - v14;
      if (v17 < 0x58)
      {
        uint64_t v19 = (void *)a1[1];
      }
      else
      {
        unint64_t v18 = v5 - (void)v15;
        uint64_t v19 = (void *)a1[1];
        if (v18 >= 0x20)
        {
          uint64_t v20 = (v17 >> 3) + 1;
          uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v13 = (uint64_t *)((char *)v13 + v21);
          uint64_t v19 = (void *)(v5 + v21);
          uint64_t v22 = (_OWORD *)(v5 + 16);
          uint64_t v23 = (long long *)(8 * v12 + 8 * v8 + v6 + 16);
          uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            *uint64_t v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 4;
          }
          while (v24);
          if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_50;
          }
        }
      }
      do
      {
        uint64_t v56 = *v13++;
        *v19++ = v56;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_50:
    a1[1] = (unint64_t)v19;
    if ((char *)v5 != v9 + 8) {
      memmove((void *)(v5 - 8 * v12), v9, v11);
    }
    *(void *)uint64_t v9 = *a3;
    return v9;
  }
  unint64_t v26 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v26 >> 61) {
    sub_2E00();
  }
  uint64_t v28 = v10 - v6;
  if (v28 >> 2 > v26) {
    unint64_t v26 = v28 >> 2;
  }
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v29 = v26;
  }
  if (v29)
  {
    if (v29 >> 61) {
      sub_188D718();
    }
    int v30 = (char *)operator new(8 * v29);
    int v31 = &v30[8 * v8];
    uint64_t v32 = &v30[8 * v29];
    if (v8 != v29) {
      goto LABEL_28;
    }
  }
  else
  {
    int v30 = 0;
    int v31 = (char *)(8 * v8);
    uint64_t v32 = 0;
    if (v8) {
      goto LABEL_28;
    }
  }
  if (v7 < 1)
  {
    if ((void *)v6 == a2) {
      unint64_t v53 = 1;
    }
    else {
      unint64_t v53 = v7 >> 2;
    }
    if (v53 >> 61) {
      sub_188D718();
    }
    unint64_t v54 = (char *)operator new(8 * v53);
    int v31 = &v54[8 * (v53 >> 2)];
    uint64_t v32 = &v54[8 * v53];
    if (v30)
    {
      uint64_t v55 = &v54[8 * v53];
      operator delete(v30);
      uint64_t v32 = v55;
      uint64_t v34 = (char *)*a1;
      *(void *)int v31 = *a3;
      unint64_t v35 = v31 + 8;
      uint64_t v36 = v31;
      if (v34 != v9) {
        goto LABEL_29;
      }
      goto LABEL_35;
    }
  }
  else
  {
    unint64_t v33 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v33 = v8 + 1;
    }
    v31 -= 8 * (v33 >> 1);
  }
LABEL_28:
  uint64_t v34 = (char *)v6;
  *(void *)int v31 = *a3;
  unint64_t v35 = v31 + 8;
  uint64_t v36 = v31;
  if ((char *)v6 != v9)
  {
LABEL_29:
    unint64_t v37 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    unint64_t v38 = v37 - v34 - 8;
    unint64_t v39 = v9;
    uint64_t v36 = v31;
    if (v38 < 0x58) {
      goto LABEL_59;
    }
    unint64_t v39 = v9;
    uint64_t v36 = v31;
    if ((unint64_t)(v37 - v31) < 0x20) {
      goto LABEL_59;
    }
    uint64_t v40 = (v38 >> 3) + 1;
    uint64_t v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v39 = &v9[-v41];
    uint64_t v36 = &v31[-v41];
    long long v42 = v31 - 16;
    __int16 v43 = (long long *)(v6 + 8 * v8 - 16);
    uint64_t v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)long long v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 4;
    }
    while (v44);
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_59:
      do
      {
        uint64_t v46 = *((void *)v39 - 1);
        v39 -= 8;
        *((void *)v36 - 1) = v46;
        v36 -= 8;
      }
      while (v39 != v34);
    }
  }
LABEL_35:
  uint64_t v47 = (char *)a1[1];
  int64_t v48 = v47 - v9;
  if (v47 != v9)
  {
    uint64_t v49 = v9;
    size_t v50 = v47 - v9;
    int v51 = v32;
    memmove(v35, v49, v50);
    uint64_t v32 = v51;
  }
  long long v52 = (void *)*a1;
  *a1 = (unint64_t)v36;
  a1[1] = (unint64_t)&v35[v48];
  a1[2] = (unint64_t)v32;
  if (v52) {
    operator delete(v52);
  }
  return v31;
}

void sub_EDE93C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_EDE954(void **a1, unsigned char *a2, _WORD *a3)
{
  unint64_t v6 = (unint64_t)*a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = a2 - (unsigned char *)*a1;
  uint64_t v8 = v7 >> 1;
  uint64_t v9 = (char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(_WORD *)uint64_t v9 = *a3;
      a1[1] = v9 + 2;
      return v9;
    }
    int64_t v11 = v5 - (void)(v9 + 2);
    uint64_t v12 = v11 >> 1;
    uint64_t v13 = (__int16 *)(v5 - 2);
    if (v5 < 2)
    {
      uint64_t v19 = a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFFELL) + v11;
      uint64_t v15 = (char *)(v14 + v6);
      unint64_t v16 = v14 + v6 + 2;
      if (v5 > v16) {
        unint64_t v16 = (unint64_t)a1[1];
      }
      unint64_t v17 = v16 + ~v6 - v14;
      if (v17 < 0x1E)
      {
        uint64_t v19 = a1[1];
      }
      else
      {
        unint64_t v18 = v5 - (void)v15;
        uint64_t v19 = a1[1];
        if (v18 >= 0x20)
        {
          uint64_t v20 = (v17 >> 1) + 1;
          unint64_t v21 = 2 * (v20 & 0xFFFFFFFFFFFFFFF0);
          uint64_t v13 = (__int16 *)((char *)v13 + v21);
          uint64_t v19 = (_WORD *)(v5 + v21);
          uint64_t v22 = (_OWORD *)(v5 + 16);
          uint64_t v23 = (long long *)(2 * v12 + 2 * v8 + v6 + 16);
          unint64_t v24 = v20 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            long long v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            *uint64_t v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 16;
          }
          while (v24);
          if (v20 == (v20 & 0xFFFFFFFFFFFFFFF0)) {
            goto LABEL_51;
          }
        }
      }
      do
      {
        __int16 v57 = *v13++;
        *v19++ = v57;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_51:
    a1[1] = v19;
    if ((char *)v5 != v9 + 2) {
      memmove((void *)(v5 - 2 * v12), v9, v11);
    }
    *(_WORD *)uint64_t v9 = *a3;
    return v9;
  }
  uint64_t v26 = v5 - v6;
  if (v26 <= -3) {
    sub_2E00();
  }
  uint64_t v28 = v26 >> 1;
  unint64_t v29 = v10 - v6;
  if (v29 <= v28 + 1) {
    unint64_t v30 = v28 + 1;
  }
  else {
    unint64_t v30 = v29;
  }
  if (v29 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v31 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v31 = v30;
  }
  if (v31)
  {
    if (v31 < 0) {
      sub_188D718();
    }
    uint64_t v32 = (char *)operator new(2 * v31);
    unint64_t v33 = &v32[2 * v8];
    uint64_t v34 = &v32[2 * v31];
    if (v8 != v31) {
      goto LABEL_29;
    }
  }
  else
  {
    uint64_t v32 = 0;
    unint64_t v33 = (char *)(2 * v8);
    uint64_t v34 = 0;
    if (v8) {
      goto LABEL_29;
    }
  }
  if (v7 < 1)
  {
    if ((unsigned char *)v6 == a2) {
      unint64_t v54 = 1;
    }
    else {
      unint64_t v54 = v7;
    }
    if ((v54 & 0x8000000000000000) != 0) {
      sub_188D718();
    }
    uint64_t v55 = (char *)operator new(2 * v54);
    unint64_t v33 = &v55[2 * (v54 >> 2)];
    uint64_t v34 = &v55[2 * v54];
    if (v32)
    {
      uint64_t v56 = &v55[2 * v54];
      operator delete(v32);
      uint64_t v34 = v56;
      uint64_t v36 = (char *)*a1;
      *(_WORD *)unint64_t v33 = *a3;
      unint64_t v37 = v33 + 2;
      unint64_t v38 = v33;
      if (v36 != v9) {
        goto LABEL_30;
      }
      goto LABEL_36;
    }
  }
  else
  {
    uint64_t v35 = v8 + 2;
    if (v8 >= -1) {
      uint64_t v35 = v8 + 1;
    }
    v33 -= v35 & 0xFFFFFFFFFFFFFFFELL;
  }
LABEL_29:
  uint64_t v36 = (char *)v6;
  *(_WORD *)unint64_t v33 = *a3;
  unint64_t v37 = v33 + 2;
  unint64_t v38 = v33;
  if ((char *)v6 != v9)
  {
LABEL_30:
    unint64_t v39 = (char *)((v7 & 0xFFFFFFFFFFFFFFFELL) + v6);
    unint64_t v40 = v39 - v36 - 2;
    uint64_t v41 = v9;
    unint64_t v38 = v33;
    if (v40 < 0x1E) {
      goto LABEL_60;
    }
    uint64_t v41 = v9;
    unint64_t v38 = v33;
    if ((unint64_t)(v39 - v33) < 0x20) {
      goto LABEL_60;
    }
    uint64_t v42 = (v40 >> 1) + 1;
    unint64_t v43 = 2 * (v42 & 0xFFFFFFFFFFFFFFF0);
    uint64_t v41 = &v9[-v43];
    unint64_t v38 = &v33[-v43];
    uint64_t v44 = v33 - 16;
    long long v45 = (long long *)(v6 + 2 * v8 - 16);
    unint64_t v46 = v42 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      long long v47 = *v45;
      *((_OWORD *)v44 - 1) = *(v45 - 1);
      *(_OWORD *)uint64_t v44 = v47;
      v44 -= 32;
      v45 -= 2;
      v46 -= 16;
    }
    while (v46);
    if (v42 != (v42 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_60:
      do
      {
        __int16 v48 = *((_WORD *)v41 - 1);
        v41 -= 2;
        *((_WORD *)v38 - 1) = v48;
        v38 -= 2;
      }
      while (v41 != v36);
    }
  }
LABEL_36:
  uint64_t v49 = (char *)a1[1];
  int64_t v50 = v49 - v9;
  if (v49 != v9)
  {
    int v51 = v9;
    size_t v52 = v49 - v9;
    unint64_t v53 = v34;
    memmove(v37, v51, v52);
    uint64_t v34 = v53;
    uint64_t v36 = (char *)*a1;
  }
  *a1 = v38;
  a1[1] = &v37[v50];
  a1[2] = v34;
  if (v36) {
    operator delete(v36);
  }
  return v33;
}

void sub_EDEC9C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_EDECB4()
{
  unk_25FC8A7 = 16641;
  word_25FC890 = 65;
  byte_25FC8BF = 1;
  byte_25FC8A9 = 0;
}

double sub_EDECDC(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(void *)(a1 + 240) = &unk_20E1710;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = &unk_20E1710;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = &unk_20E1710;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = &unk_20E1710;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = &unk_20E1710;
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = &unk_20E1710;
  *(void *)(a1 + 520) = 0;
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 528) = &unk_20E1710;
  *(void *)(a1 + 568) = 0;
  *(void *)(a1 + 544) = 0;
  *(void *)(a1 + 536) = 0;
  *(void *)(a1 + 552) = 0;
  *(void *)(a1 + 576) = &unk_20E1710;
  *(void *)(a1 + 616) = 0;
  *(void *)(a1 + 592) = 0;
  *(void *)(a1 + 584) = 0;
  *(void *)(a1 + 600) = 0;
  *(void *)(a1 + 624) = &unk_20E1710;
  *(void *)(a1 + 664) = 0;
  *(void *)(a1 + 640) = 0;
  *(void *)(a1 + 632) = 0;
  *(void *)(a1 + 648) = 0;
  *(void *)(a1 + 672) = &unk_20E1710;
  *(void *)(a1 + 712) = 0;
  *(void *)(a1 + 688) = 0;
  *(void *)(a1 + 680) = 0;
  *(void *)(a1 + 696) = 0;
  *(void *)(a1 + 720) = &unk_20E1710;
  *(void *)(a1 + 760) = 0;
  *(void *)(a1 + 736) = 0;
  *(void *)(a1 + 728) = 0;
  *(void *)(a1 + 744) = 0;
  *(void *)(a1 + 768) = &unk_20E1710;
  *(void *)(a1 + 808) = 0;
  *(void *)(a1 + 784) = 0;
  *(void *)(a1 + 776) = 0;
  *(void *)(a1 + 792) = 0;
  *(void *)(a1 + 816) = &unk_20E1710;
  *(void *)(a1 + 856) = 0;
  *(void *)(a1 + 832) = 0;
  *(void *)(a1 + 824) = 0;
  *(void *)(a1 + 840) = 0;
  *(void *)(a1 + 864) = &unk_20E1710;
  *(void *)(a1 + 904) = 0;
  *(void *)(a1 + 880) = 0;
  *(void *)(a1 + 872) = 0;
  *(void *)(a1 + 888) = 0;
  *(void *)(a1 + 912) = &unk_20E1710;
  *(void *)(a1 + 952) = 0;
  *(void *)(a1 + 928) = 0;
  *(void *)(a1 + 920) = 0;
  *(void *)(a1 + 936) = 0;
  *(void *)(a1 + 960) = &unk_20E1710;
  *(void *)(a1 + 1000) = 0;
  *(void *)(a1 + 976) = 0;
  *(void *)(a1 + 968) = 0;
  *(void *)(a1 + 984) = 0;
  *(void *)(a1 + 1008) = &unk_20E1710;
  *(void *)(a1 + 1048) = 0;
  *(void *)(a1 + 1024) = 0;
  *(void *)(a1 + 1016) = 0;
  *(void *)(a1 + 1032) = 0;
  *(void *)(a1 + 1056) = &unk_20E1710;
  *(void *)(a1 + 1096) = 0;
  *(void *)(a1 + 1072) = 0;
  *(void *)(a1 + 1064) = 0;
  *(void *)(a1 + 1080) = 0;
  *(void *)(a1 + 1104) = &unk_20E1710;
  *(void *)(a1 + 1144) = 0;
  *(void *)(a1 + 1120) = 0;
  *(void *)(a1 + 1112) = 0;
  *(void *)(a1 + 1128) = 0;
  *(void *)(a1 + 1152) = &unk_20E1710;
  *(void *)(a1 + 1192) = 0;
  *(void *)(a1 + 1168) = 0;
  *(void *)(a1 + 1160) = 0;
  *(void *)(a1 + 1176) = 0;
  *(void *)(a1 + 1200) = &unk_20E1710;
  *(void *)(a1 + 1240) = 0;
  *(void *)(a1 + 1216) = 0;
  *(void *)(a1 + 1208) = 0;
  *(void *)(a1 + 1224) = 0;
  *(void *)(a1 + 1248) = &unk_20E1710;
  *(void *)(a1 + 1288) = 0;
  *(void *)(a1 + 1264) = 0;
  *(void *)(a1 + 1256) = 0;
  *(void *)(a1 + 1272) = 0;
  *(void *)(a1 + 1296) = &unk_20E1710;
  *(void *)(a1 + 1336) = 0;
  *(void *)(a1 + 1312) = 0;
  *(void *)(a1 + 1304) = 0;
  *(void *)(a1 + 1320) = 0;
  *(void *)(a1 + 1344) = &unk_20E1710;
  *(void *)(a1 + 1384) = 0;
  *(void *)(a1 + 1360) = 0;
  *(void *)(a1 + 1352) = 0;
  *(void *)(a1 + 1368) = 0;
  *(void *)(a1 + 1392) = &unk_20E1710;
  *(void *)(a1 + 1432) = 0;
  *(void *)(a1 + 1408) = 0;
  *(void *)(a1 + 1400) = 0;
  *(void *)(a1 + 1416) = 0;
  *(void *)(a1 + 1440) = &unk_20E1710;
  *(void *)(a1 + 1480) = 0;
  *(void *)(a1 + 1456) = 0;
  *(void *)(a1 + 1448) = 0;
  *(void *)(a1 + 1464) = 0;
  *(void *)(a1 + 1488) = &unk_20E1710;
  *(void *)(a1 + 1528) = 0;
  *(void *)(a1 + 1504) = 0;
  *(void *)(a1 + 1496) = 0;
  *(void *)(a1 + 1512) = 0;
  *(void *)(a1 + 1536) = &unk_20E1710;
  *(void *)(a1 + 1576) = 0;
  *(void *)(a1 + 1552) = 0;
  *(void *)(a1 + 1544) = 0;
  *(void *)(a1 + 1560) = 0;
  *(void *)(a1 + 1584) = &unk_20E1710;
  *(void *)(a1 + 1624) = 0;
  *(void *)(a1 + 1600) = 0;
  *(void *)(a1 + 1592) = 0;
  *(void *)(a1 + 1608) = 0;
  *(void *)(a1 + 1632) = &unk_20E1710;
  *(void *)(a1 + 1672) = 0;
  *(void *)(a1 + 1648) = 0;
  *(void *)(a1 + 1640) = 0;
  *(void *)(a1 + 1656) = 0;
  *(void *)(a1 + 1680) = &unk_20E1710;
  *(void *)(a1 + 1720) = 0;
  *(void *)(a1 + 1696) = 0;
  *(void *)(a1 + 1688) = 0;
  *(void *)(a1 + 1704) = 0;
  *(void *)(a1 + 1728) = &unk_20E1710;
  *(void *)(a1 + 1768) = 0;
  *(void *)(a1 + 1744) = 0;
  *(void *)(a1 + 1736) = 0;
  *(void *)(a1 + 1752) = 0;
  return result;
}

void sub_EDEF5C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = (uint64_t *)a2;
  sub_EDECDC(a2);
  uint64_t v4 = *(void *)(sub_1005964(a1) + 120);
  uint64_t v5 = *(void *)(sub_1005964(a1) + 128);
  uint64_t v93 = (uint64_t)v3;
  if (v4 != v5)
  {
    int v6 = 0;
    uint64_t v97 = (uint64_t)(v3 + 126);
    do
    {
      if (sub_10022FC(v4))
      {
        uint64_t v7 = sub_100231C(v4);
        long long v8 = *(_OWORD *)(v7 + 16);
        long long v113 = *(_OWORD *)v7;
        long long v114 = v8;
        unint64_t v9 = *(void *)(v7 + 32);
        long long v111 = *(_OWORD *)(v7 + 40);
        long long v112 = *(_OWORD *)(v7 + 56);
        unint64_t v10 = *(void *)(v7 + 72);
        uint64_t v11 = *(void *)(v7 + 80);
        unint64_t v12 = *(unsigned __int8 *)(v7 + 88);
        v110[0] = *(_DWORD *)(v7 + 89);
        *(_DWORD *)((char *)v110 + 3) = *(_DWORD *)(v7 + 92);
        uint64_t v94 = v11;
        unsigned int v13 = v11;
        uint64_t v95 = (char *)v9;
        unint64_t v96 = v12;
        unint64_t v14 = (((v9 >> 16) & 0xFFFF0000 | (v9 << 32) | (2 * ((v9 & 0xFF000000000000) == 0)))
             + 4 * (unsigned __int16)v11) & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
        v99[0] = v14;
        sub_EE03E4(v97, v99, &v100);
        if (v100)
        {
          sub_EE1844(v97, v99, (uint64_t)&v100);
          if (BYTE8(v101))
          {
            uint64_t v15 = *(void *)(v100 + 8) + 16 * v101;
            *(void *)uint64_t v15 = v99[0];
            *(_DWORD *)(v15 + 8) = -1;
          }
        }
        else
        {
          sub_EE1844(v97, v99, (uint64_t)&v100);
          uint64_t v17 = v101;
          uint64_t v18 = *(void *)(v100 + 8);
          if (BYTE8(v101))
          {
            uint64_t v19 = v18 + 16 * v101;
            *(void *)uint64_t v19 = v99[0];
            *(_DWORD *)(v19 + 8) = -1;
          }
          *(_DWORD *)(v18 + 16 * v17 + 8) = v6++;
        }
        unint64_t v20 = (((v10 >> 16) & 0xFFFF0000 | (v10 << 32) | (2 * ((v10 & 0xFF000000000000) == 0)))
             + ((v13 >> 14) & 0x3FFFC)) & 0xFFFFFFFFFFFFFFFELL | (v96 >> 1) & 1;
        v99[0] = v20;
        sub_EE03E4(v97, v99, &v100);
        if (v100)
        {
          sub_EE1844(v97, v99, (uint64_t)&v100);
          if (BYTE8(v101))
          {
            uint64_t v21 = *(void *)(v100 + 8) + 16 * v101;
            *(void *)uint64_t v21 = v99[0];
            *(_DWORD *)(v21 + 8) = -1;
          }
        }
        else
        {
          sub_EE1844(v97, v99, (uint64_t)&v100);
          uint64_t v25 = v101;
          uint64_t v26 = *(void *)(v100 + 8);
          if (BYTE8(v101))
          {
            uint64_t v27 = v26 + 16 * v101;
            *(void *)uint64_t v27 = v99[0];
            *(_DWORD *)(v27 + 8) = -1;
          }
          *(_DWORD *)(v26 + 16 * v25 + 8) = v6++;
        }
        v99[0] = v14;
        sub_EE1844(v97, v99, (uint64_t)&v100);
        uint64_t v28 = v101;
        uint64_t v29 = *(void *)(v100 + 8);
        if (BYTE8(v101))
        {
          uint64_t v30 = v29 + 16 * v101;
          *(void *)uint64_t v30 = v99[0];
          *(_DWORD *)(v30 + 8) = -1;
        }
        uint64_t v31 = *(unsigned int *)(v29 + 16 * v28 + 8);
        v99[0] = v20;
        sub_EE1844(v97, v99, (uint64_t)&v100);
        uint64_t v32 = v101;
        uint64_t v33 = *(void *)(v100 + 8);
        if (BYTE8(v101))
        {
          uint64_t v34 = v33 + 16 * v101;
          *(void *)uint64_t v34 = v99[0];
          *(_DWORD *)(v34 + 8) = -1;
        }
        unsigned int v35 = *(_DWORD *)(v33 + 16 * v32 + 8);
        unint64_t v36 = (unint64_t)(v3[13] - v3[12]) >> 2;
        if (v31 >= v36 || v35 >= v36) {
          goto LABEL_3;
        }
        uint64_t v37 = a1;
        sub_EC06EC((uint64_t)v3, v31);
        uint64_t v38 = *(unsigned int *)(v3[12] + 4 * v31);
        sub_EC06EC((uint64_t)v3, v31);
        uint64_t v39 = 0xFFFFFFFFLL;
        if (v38 != 0xFFFFFFFFLL)
        {
          while (*(_DWORD *)(*(void *)(v93 + 120) + 104 * v38) != v35)
          {
            uint64_t v38 = *(unsigned int *)(*(void *)(v93 + 144) + 4 * v38);
            if (v38 == -1)
            {
              uint64_t v39 = 0xFFFFFFFFLL;
              goto LABEL_35;
            }
          }
          uint64_t v39 = v38;
        }
LABEL_35:
        unint64_t v3 = (uint64_t *)v93;
        sub_EC06EC(v93, v31);
        sub_EC06EC(v93, v31);
        a1 = v37;
        if (v39 == 0xFFFFFFFFLL)
        {
LABEL_3:
          LODWORD(v100) = v35;
          long long v101 = v113;
          long long v102 = v114;
          long long v104 = v111;
          long long v105 = v112;
          uint64_t v103 = v95;
          unint64_t v106 = v10;
          uint64_t v107 = v94;
          char v108 = v96;
          *(_DWORD *)unsigned __int16 v109 = v110[0];
          *(_DWORD *)&v109[3] = *(_DWORD *)((char *)v110 + 3);
          sub_EDFAEC(v3, v31, (uint64_t)&v100, (uint64_t)v99);
        }
      }
      else
      {
        *(void *)&long long v113 = *(void *)sub_100237C(v4);
        sub_EE03E4(v97, (uint64_t *)&v113, &v100);
        if (v100)
        {
          sub_EE1844(v97, (uint64_t *)&v113, (uint64_t)&v100);
          if (BYTE8(v101))
          {
            uint64_t v16 = *(void *)(v100 + 8) + 16 * v101;
            *(void *)uint64_t v16 = v113;
            *(_DWORD *)(v16 + 8) = -1;
          }
        }
        else
        {
          sub_EE1844(v97, (uint64_t *)&v113, (uint64_t)&v100);
          uint64_t v22 = v101;
          uint64_t v23 = *(void *)(v100 + 8);
          if (BYTE8(v101))
          {
            uint64_t v24 = v23 + 16 * v101;
            *(void *)uint64_t v24 = v113;
            *(_DWORD *)(v24 + 8) = -1;
          }
          *(_DWORD *)(v23 + 16 * v22 + 8) = v6++;
        }
      }
      v4 += 152;
    }
    while (v4 != v5);
  }
  unint64_t v40 = (uint64_t *)sub_100596C(a1);
  sub_EDFC1C((char *)v3, a1, v40, 1);
  uint64_t v41 = (uint64_t *)sub_1005974(a1);
  sub_EDFC1C((char *)v3, a1, v41, 2);
  uint64_t v42 = (void *)sub_BED898(a1);
  sub_EDFD5C((char *)v3, a1, v42, 5);
  uint64_t v43 = v3[28] - v3[27];
  if (v43)
  {
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    uint64_t v46 = v43 / 160;
    do
    {
      *(void *)&long long v113 = v45;
      uint64_t v47 = v3[27] + v44;
      int v48 = *(_DWORD *)(v47 + 4);
      LODWORD(v111) = v48;
      int v49 = *(_DWORD *)(v47 + 80);
      LODWORD(v99[0]) = v49;
      if (v48 != -1)
      {
        sub_EE2264((uint64_t)(v3 + 30), (unsigned int *)&v111, (uint64_t)&v100);
        unint64_t v50 = v100;
        if (BYTE8(v101))
        {
          uint64_t v51 = *(void *)(v100 + 8) + 32 * v101;
          *(_DWORD *)uint64_t v51 = v111;
          *(void *)(v51 + 16) = 0;
          *(void *)(v51 + 24) = 0;
          *(void *)(v51 + 8) = 0;
        }
        sub_EDB84C(*(void *)(v50 + 8) + 32 * v101 + 8, &v113);
        int v49 = v99[0];
        int v48 = v111;
      }
      if (v49 != -1 && v49 != v48)
      {
        sub_EE2264((uint64_t)(v3 + 30), (unsigned int *)v99, (uint64_t)&v100);
        unint64_t v53 = v100;
        if (BYTE8(v101))
        {
          uint64_t v54 = *(void *)(v100 + 8) + 32 * v101;
          *(_DWORD *)uint64_t v54 = v99[0];
          *(void *)(v54 + 16) = 0;
          *(void *)(v54 + 24) = 0;
          *(void *)(v54 + 8) = 0;
        }
        sub_EDB84C(*(void *)(v53 + 8) + 32 * v101 + 8, &v113);
      }
      ++v45;
      v44 += 160;
    }
    while (v46 != v45);
  }
  long long v113 = 0uLL;
  *(void *)&long long v114 = 0;
  uint64_t v55 = v3 + 126;
  uint64_t v56 = (char *)v3[126];
  uint64_t v57 = v3[127];
  int v58 = *v56;
  uint64_t v59 = (char *)v57;
  unint64_t v60 = v56;
  if (v58 <= -2)
  {
    uint64_t v59 = (char *)v3[127];
    unint64_t v60 = (void *)v3[126];
    do
    {
      unint64_t v61 = (__clz(__rbit64(((*v60 >> 7) & ~*v60 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      unint64_t v60 = (void *)((char *)v60 + v61);
      v59 += 16 * v61;
    }
    while (*(char *)v60 < -1);
  }
  __int16 v62 = (char **)(v3 + 222);
  __int16 v63 = &v56[v3[129]];
  unint64_t v64 = (char **)(v3 + 126);
  if (v60 == (void *)v63)
  {
    unint64_t v64 = (char **)(v3 + 132);
    uint64_t v86 = 1;
    unint64_t v87 = v3 + 126;
    while (1)
    {
      uint64_t v59 = (char *)v87[7];
      unint64_t v60 = *v64;
      if (**v64 <= -2)
      {
        do
        {
          unint64_t v88 = (__clz(__rbit64(((*v60 >> 7) & ~*v60 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          unint64_t v60 = (void *)((char *)v60 + v88);
          v59 += 16 * v88;
        }
        while (*(char *)v60 < -1);
      }
      __int16 v63 = &(*v64)[v87[9]];
      if (v60 != (void *)v63) {
        break;
      }
      unint64_t v87 = &v55[6 * v86++];
      unint64_t v64 = (char **)(v87 + 6);
      if (v86 == 16)
      {
        __n128 v80 = 0;
        __n128 v81 = 0;
        if ((char)v58 <= -2) {
          goto LABEL_78;
        }
        goto LABEL_88;
      }
    }
  }
  long long v98 = (void **)(v3 + 24);
  do
  {
    while (1)
    {
      uint64_t v65 = *(void *)v59;
      unint64_t v66 = *((unsigned int *)v59 + 2);
      LODWORD(v111) = *((_DWORD *)v59 + 2);
      uint64_t v67 = (void *)v3[24];
      uint64_t v68 = v3[13] - v3[12];
      unint64_t v69 = (unint64_t)v68 >> 2;
      unint64_t v70 = v68 >> 2;
      if ((v3[25] - (uint64_t)v67) >> 4 < (unint64_t)v69 || v70 <= v66)
      {
        sub_EE01BC(v3, v66);
        unint64_t v72 = (v3[13] - v3[12]) >> 2;
        unint64_t v100 = 0;
        *(void *)&long long v101 = 0;
        uint64_t v67 = (void *)v3[24];
        unint64_t v73 = (v3[25] - (uint64_t)v67) >> 4;
        if (v72 <= v73)
        {
          if (v72 < v73) {
            v3[25] = (uint64_t)&v67[2 * v72];
          }
        }
        else
        {
          sub_EE2954(v98, v72 - v73, &v100);
          uint64_t v67 = *v98;
        }
      }
      v67[2 * v66] = v65;
      unint64_t v100 = v65 & 0xFFFFFFFFFFFF0002;
      if (v65 != (v65 & 0xFFFFFFFFFFFF0002)) {
        sub_EDFF98((char **)&v113, &v100, &v111);
      }
      int v74 = *((char *)v60 + 1);
      unint64_t v60 = (void *)((char *)v60 + 1);
      v59 += 16;
      if (v74 <= -2)
      {
        do
        {
          unint64_t v75 = (__clz(__rbit64(((*v60 >> 7) & ~*v60 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          unint64_t v60 = (void *)((char *)v60 + v75);
          v59 += 16 * v75;
        }
        while (*(char *)v60 < -1);
      }
      if (v60 == (void *)v63) {
        break;
      }
      if (!v64) {
        goto LABEL_77;
      }
    }
    uint64_t v76 = v64 + 6;
    if (v64 + 6 == v62) {
      break;
    }
    while (1)
    {
      uint64_t v77 = v76;
      uint64_t v78 = v64[6];
      uint64_t v59 = v64[7];
      unint64_t v60 = v78;
      if (*v78 <= -2)
      {
        do
        {
          unint64_t v79 = (__clz(__rbit64(((*v60 >> 7) & ~*v60 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          unint64_t v60 = (void *)((char *)v60 + v79);
          v59 += 16 * v79;
        }
        while (*(char *)v60 < -1);
      }
      __int16 v63 = &v64[9][(void)v78];
      if (v60 != (void *)v63) {
        break;
      }
      uint64_t v76 = v77 + 6;
      unint64_t v64 = v77;
      if (v77 + 6 == v62) {
        goto LABEL_77;
      }
    }
    unint64_t v64 = v77;
  }
  while (v77);
LABEL_77:
  __n128 v80 = (_DWORD *)*((void *)&v113 + 1);
  __n128 v81 = (_DWORD *)v113;
  uint64_t v56 = (char *)v3[126];
  uint64_t v57 = v3[127];
  if (*v56 > -2)
  {
LABEL_88:
    long long v82 = v56;
    uint64_t v84 = &v56[v3[129]];
    uint64_t v85 = (char **)(v3 + 126);
    if (v82 != v84) {
      goto LABEL_98;
    }
  }
  else
  {
LABEL_78:
    long long v82 = v56;
    do
    {
      unint64_t v83 = (__clz(__rbit64(((*(void *)v82 >> 7) & ~*(void *)v82 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      v82 += v83;
      v57 += 16 * v83;
    }
    while (*v82 < -1);
    uint64_t v84 = &v56[v3[129]];
    uint64_t v85 = (char **)(v3 + 126);
    if (v82 != v84) {
      goto LABEL_98;
    }
  }
  uint64_t v85 = (char **)(v3 + 132);
  uint64_t v89 = 1;
  long long v90 = v3 + 126;
  do
  {
    BOOL v91 = *v85;
    uint64_t v57 = v90[7];
    if (**v85 > -2)
    {
      long long v82 = *v85;
      uint64_t v84 = &v91[v90[9]];
      if (v91 != v84) {
        goto LABEL_98;
      }
    }
    else
    {
      long long v82 = *v85;
      do
      {
        unint64_t v92 = (__clz(__rbit64(((*(void *)v82 >> 7) & ~*(void *)v82 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        v82 += v92;
        v57 += 16 * v92;
      }
      while (*v82 < -1);
      uint64_t v84 = &v91[v90[9]];
      if (v82 != v84) {
        goto LABEL_98;
      }
    }
    long long v90 = &v55[6 * v89++];
    uint64_t v85 = (char **)(v90 + 6);
  }
  while (v89 != 16);
  uint64_t v85 = 0;
  uint64_t v84 = v82;
LABEL_98:
  unint64_t v100 = (unint64_t)(v3 + 126);
  *(void *)&long long v101 = v85;
  *((void *)&v101 + 1) = v3 + 222;
  *(void *)&long long v102 = v82;
  *((void *)&v102 + 1) = v57;
  uint64_t v103 = v84;
  if (v81 != v80)
  {
    do
    {
      *(void *)&long long v111 = *(void *)v81;
      DWORD2(v111) = v81[2];
      sub_EE2AA4((uint64_t)&v100, (uint64_t *)&v111);
      v81 += 4;
    }
    while (v81 != v80);
    __n128 v80 = (_DWORD *)v113;
  }
  if (v80)
  {
    *((void *)&v113 + 1) = v80;
    operator delete(v80);
  }
}

void sub_EDF9F4(_Unwind_Exception *a1)
{
  sub_EE00C8(v1);
  _Unwind_Resume(a1);
}

void sub_EDFA08(_Unwind_Exception *a1)
{
  sub_EE00C8(v1);
  _Unwind_Resume(a1);
}

void sub_EDFA1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  unint64_t v14 = *(void **)(v12 - 144);
  if (v14)
  {
    *(void *)(v12 - 136) = v14;
    operator delete(v14);
  }
  sub_EE00C8(a12);
  _Unwind_Resume(a1);
}

void sub_EDFA9C(_Unwind_Exception *a1)
{
  sub_EE00C8(v1);
  _Unwind_Resume(a1);
}

void sub_EDFAB0(_Unwind_Exception *a1)
{
  sub_EE00C8(v1);
  _Unwind_Resume(a1);
}

void sub_EDFAC4(_Unwind_Exception *a1)
{
  sub_EE00C8(v1);
  _Unwind_Resume(a1);
}

void sub_EDFAD8(_Unwind_Exception *a1)
{
  sub_EE00C8(v1);
  _Unwind_Resume(a1);
}

char *sub_EDFAEC@<X0>(uint64_t *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v5 = a2;
  if (*(_DWORD *)a3 > a2) {
    a2 = *(_DWORD *)a3;
  }
  sub_EE01BC(a1, a2);
  long long v8 = *(_OWORD *)(a3 + 80);
  v22[4] = *(_OWORD *)(a3 + 64);
  v22[5] = v8;
  uint64_t v23 = *(void *)(a3 + 96);
  long long v9 = *(_OWORD *)(a3 + 16);
  v22[0] = *(_OWORD *)a3;
  v22[1] = v9;
  long long v10 = *(_OWORD *)(a3 + 48);
  __n128 v22[2] = *(_OWORD *)(a3 + 32);
  v22[3] = v10;
  uint64_t v11 = a1[12];
  unint64_t v12 = (a1[13] - v11) >> 2;
  if (v12 <= v5)
  {
    unint64_t v13 = v5 + 1;
    int v24 = -1;
    if (v13 <= v12)
    {
      if (v13 < v12) {
        a1[13] = v11 + 4 * v13;
      }
    }
    else
    {
      sub_500DC((uint64_t)(a1 + 12), v13 - v12, (const float *)&v24);
      uint64_t v11 = a1[12];
    }
  }
  uint64_t v14 = 4 * v5;
  uint64_t v15 = (_DWORD *)(v11 + v14);
  uint64_t v16 = a1 + 18;
  sub_745A4((uint64_t)(a1 + 18), (_DWORD *)(v11 + v14));
  uint64_t v17 = a1[15];
  uint64_t v18 = a1[16];
  uint64_t v19 = a1 + 15;
  *uint64_t v15 = -991146299 * ((unint64_t)(v18 - v17) >> 3);
  double result = sub_EE1F2C((char **)v19, v22);
  int v21 = -991146299 * ((unint64_t)(v19[1] - *v19) >> 3) - 1;
  *(void *)a4 = v19;
  *(void *)(a4 + 8) = v16;
  *(_DWORD *)(a4 + 16) = v21;
  ++*(_DWORD *)(v19[6] + v14);
  return result;
}

char *sub_EDFC1C(char *result, uint64_t a2, uint64_t *a3, char a4)
{
  uint64_t v4 = *a3;
  uint64_t v5 = a3[1];
  if (*a3 != v5)
  {
    uint64_t v7 = (uint64_t)(result + 1008);
    long long v8 = (char **)(result + 216);
    do
    {
      if (*(void *)(v4 + 8) && (uint64_t v33 = *(void *)(v4 + 8), sub_EE03E4(v7, &v33, v31), v31[0]))
      {
        int v16 = *(_DWORD *)(v32 + 8);
        uint64_t v17 = *(void *)(v4 + 88);
        if (!v17) {
          goto LABEL_3;
        }
      }
      else
      {
        int v16 = -1;
        uint64_t v17 = *(void *)(v4 + 88);
        if (!v17) {
          goto LABEL_3;
        }
      }
      uint64_t v33 = v17;
      sub_EE03E4(v7, &v33, v31);
      if (v31[0])
      {
        int v9 = *(_DWORD *)(v32 + 8);
        goto LABEL_4;
      }
LABEL_3:
      int v9 = -1;
LABEL_4:
      int v19 = v16;
      long long v20 = *(_OWORD *)(v4 + 16);
      long long v10 = *(_OWORD *)(v4 + 32);
      long long v11 = *(_OWORD *)(v4 + 48);
      long long v12 = *(_OWORD *)(v4 + 64);
      uint64_t v24 = *(void *)(v4 + 80);
      long long v22 = v11;
      long long v23 = v12;
      long long v21 = v10;
      int v25 = v9;
      long long v26 = *(_OWORD *)(v4 + 96);
      long long v13 = *(_OWORD *)(v4 + 112);
      long long v14 = *(_OWORD *)(v4 + 128);
      long long v15 = *(_OWORD *)(v4 + 144);
      uint64_t v30 = *(void *)(v4 + 160);
      long long v28 = v14;
      long long v29 = v15;
      long long v27 = v13;
      char v18 = a4;
      double result = sub_EE20D8(v8, (long long *)&v18);
      v4 += 168;
    }
    while (v4 != v5);
  }
  return result;
}

char *sub_EDFD5C(char *result, uint64_t a2, void *a3, char a4)
{
  uint64_t v5 = result;
  uint64_t v6 = a3[49];
  uint64_t v7 = a3[27];
  uint64_t v8 = v6 + 168 * v7;
  if (v7)
  {
    uint64_t v9 = 168 * v7;
    while (1)
    {
      double result = (char *)sub_1024810((uint64_t)(a3 + 28), v6);
      if ((result & 1) == 0)
      {
        if (!a3[25]) {
          break;
        }
        double result = (char *)sub_1024810((uint64_t)(a3 + 4), v6);
        if (!result) {
          break;
        }
      }
      v6 += 168;
      v9 -= 168;
      if (!v9)
      {
        uint64_t v6 = v8;
        break;
      }
    }
    uint64_t v10 = v6;
    uint64_t v23 = a3[49] + 168 * a3[27];
    if (v6 != v23)
    {
      uint64_t v11 = (uint64_t)(v5 + 1008);
      long long v12 = (char **)(v5 + 216);
      do
      {
        if (*(void *)(v10 + 8) && (v40[0] = *(void *)(v10 + 8), sub_EE03E4(v11, v40, v38), v38[0]))
        {
          int v13 = *(_DWORD *)(v39 + 8);
          uint64_t v14 = *(void *)(v10 + 88);
          if (!v14) {
            goto LABEL_21;
          }
        }
        else
        {
          int v13 = -1;
          uint64_t v14 = *(void *)(v10 + 88);
          if (!v14) {
            goto LABEL_21;
          }
        }
        v40[0] = v14;
        sub_EE03E4(v11, v40, v38);
        if (!v38[0])
        {
LABEL_21:
          int v15 = -1;
          goto LABEL_22;
        }
        int v15 = *(_DWORD *)(v39 + 8);
LABEL_22:
        long long v27 = *(_OWORD *)(v10 + 16);
        long long v16 = *(_OWORD *)(v10 + 32);
        long long v17 = *(_OWORD *)(v10 + 48);
        long long v18 = *(_OWORD *)(v10 + 64);
        uint64_t v31 = *(void *)(v10 + 80);
        long long v29 = v17;
        long long v30 = v18;
        long long v28 = v16;
        int v26 = v13;
        int v32 = v15;
        long long v33 = *(_OWORD *)(v10 + 96);
        long long v19 = *(_OWORD *)(v10 + 112);
        long long v20 = *(_OWORD *)(v10 + 128);
        long long v21 = *(_OWORD *)(v10 + 144);
        uint64_t v37 = *(void *)(v10 + 160);
        long long v35 = v20;
        long long v36 = v21;
        long long v34 = v19;
        char v25 = a4;
        double result = sub_EE20D8(v12, (long long *)&v25);
        uint64_t v22 = v10 + 168;
        uint64_t v10 = v8;
        if (v22 != v8)
        {
          uint64_t v10 = v22;
          while (1)
          {
            double result = (char *)sub_1024810((uint64_t)(a3 + 28), v10);
            if ((result & 1) == 0)
            {
              if (!a3[25]) {
                break;
              }
              double result = (char *)sub_1024810((uint64_t)(a3 + 4), v10);
              if (!result) {
                break;
              }
            }
            v10 += 168;
            if (v10 == v8)
            {
              uint64_t v10 = v8;
              break;
            }
          }
        }
      }
      while (v10 != v23);
    }
  }
  return result;
}

char *sub_EDFF98(char **a1, void *a2, _DWORD *a3)
{
  uint64_t v7 = a1[1];
  unint64_t v6 = (unint64_t)a1[2];
  if ((unint64_t)v7 < v6)
  {
    *(void *)uint64_t v7 = *a2;
    *((_DWORD *)v7 + 2) = *a3;
    uint64_t v8 = v7 + 16;
    goto LABEL_13;
  }
  uint64_t v9 = *a1;
  uint64_t v10 = (v7 - *a1) >> 4;
  unint64_t v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 60) {
    sub_2E00();
  }
  uint64_t v12 = v6 - (void)v9;
  if (v12 >> 3 > v11) {
    unint64_t v11 = v12 >> 3;
  }
  BOOL v13 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0;
  unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
  if (!v13) {
    unint64_t v14 = v11;
  }
  if (v14 >> 60) {
    sub_188D718();
  }
  uint64_t v15 = 16 * v14;
  long long v16 = (char *)operator new(16 * v14);
  long long v17 = &v16[16 * v10];
  long long v18 = &v16[v15];
  *(void *)long long v17 = *a2;
  *((_DWORD *)v17 + 2) = *a3;
  uint64_t v8 = v17 + 16;
  if (v7 == v9)
  {
    *a1 = v17;
    a1[1] = v8;
    a1[2] = v18;
    if (!v9) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  do
  {
    long long v19 = v17 - 16;
    *((_OWORD *)v17 - 1) = *((_OWORD *)v7 - 1);
    v7 -= 16;
    v17 -= 16;
  }
  while (v7 != v9);
  *a1 = v19;
  a1[1] = v8;
  a1[2] = v18;
  if (v9) {
LABEL_12:
  }
    operator delete(v9);
LABEL_13:
  a1[1] = v8;
  return v8 - 16;
}

uint64_t sub_EE00C8(uint64_t a1)
{
  uint64_t v2 = a1 + 1008;
  sub_328138(a1 + 1008);
  do
  {
    unint64_t v3 = (void *)(v2 - 48);
    uint64_t v4 = *(void *)(v2 - 24);
    if (v4)
    {
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      uint64_t v7 = (void *)(v2 - 40);
      do
      {
        if ((*(char *)(*v3 + v6) & 0x80000000) == 0)
        {
          uint64_t v8 = *v7 + v5;
          uint64_t v9 = *(void **)(v8 + 8);
          if (v9)
          {
            *(void *)(v8 + 16) = v9;
            operator delete(v9);
            uint64_t v4 = *(void *)(v2 - 24);
          }
        }
        ++v6;
        v5 += 32;
      }
      while (v6 != v4);
      operator delete(*(void **)(v2 - 48));
      *(void *)(v2 - 48) = &unk_20E1710;
      *(void *)(v2 - 8) = 0;
      *(void *)(v2 - 32) = 0;
      *(void *)(v2 - 24) = 0;
      *uint64_t v7 = 0;
    }
    v2 -= 48;
  }
  while (v3 != (void *)(a1 + 240));
  uint64_t v10 = *(void **)(a1 + 216);
  if (v10)
  {
    *(void *)(a1 + 224) = v10;
    operator delete(v10);
  }

  return sub_EDD2E4(a1);
}

void sub_EE01BC(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = a1[12];
  uint64_t v5 = a1[13];
  uint64_t v3 = (uint64_t)(a1 + 12);
  uint64_t v6 = v5 - v4;
  if (a2 >= ((unint64_t)v6 >> 2))
  {
    unint64_t v7 = a2;
    unint64_t v8 = v6 >> 2;
    unint64_t v9 = a2 + 1;
    if (v8 <= a2)
    {
      int v18 = -1;
      if (v9 <= v8)
      {
        if (v9 < v8) {
          a1[13] = v4 + 4 * v9;
        }
      }
      else
      {
        sub_500DC(v3, v9 - v8, (const float *)&v18);
      }
    }
    uint64_t v10 = a1[21];
    uint64_t v11 = a1[22];
    int v18 = 0;
    unint64_t v12 = (v11 - v10) >> 2;
    if (v9 <= v12)
    {
      if (v9 < v12) {
        a1[22] = v10 + 4 * v9;
      }
    }
    else
    {
      sub_500DC((uint64_t)(a1 + 21), v9 - v12, (const float *)&v18);
    }
    uint64_t v13 = *a1;
    unint64_t v14 = (a1[1] - *a1) >> 2;
    if (v14 <= v7)
    {
      int v18 = -1;
      if (v9 <= v14)
      {
        if (v9 < v14) {
          a1[1] = v13 + 4 * v9;
        }
      }
      else
      {
        sub_500DC((uint64_t)a1, v9 - v14, (const float *)&v18);
      }
    }
    uint64_t v15 = a1[9];
    uint64_t v16 = a1[10];
    int v18 = 0;
    unint64_t v17 = (v16 - v15) >> 2;
    if (v9 <= v17)
    {
      if (v9 < v17) {
        a1[10] = v15 + 4 * v9;
      }
    }
    else
    {
      sub_500DC((uint64_t)(a1 + 9), v9 - v17, (const float *)&v18);
    }
  }
}

uint64_t sub_EE02F4(void *a1, unsigned int a2)
{
  return *(void *)sub_EE0314(a1, a2);
}

uint64_t sub_EE0314(void *a1, unsigned int a2)
{
  uint64_t v3 = a2;
  sub_EC06EC((uint64_t)a1, a2);
  uint64_t v4 = a1[24];
  if ((a1[25] - v4) >> 4 < (unint64_t)((a1[13] - a1[12]) >> 2))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v8, "no or incomplete vertex data stored");
    unint64_t v7 = (void *)sub_2F404((uint64_t)exception, &v8);
  }
  return v4 + 16 * v3;
}

void sub_EE03B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_EE03E4@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = 0;
  uint64_t v4 = *a2;
  unint64_t v5 = 0x2127599BF4325C37 * (*a2 ^ ((unint64_t)*a2 >> 23));
  unint64_t v6 = (v5 ^ ~(v5 >> 47)) + ((v5 ^ (v5 >> 47)) << 21);
  unint64_t v7 = 21 * ((265 * (v6 ^ (v6 >> 24))) ^ ((265 * (v6 ^ (v6 >> 24))) >> 14));
  unint64_t v8 = 2147483649u * (v7 ^ (v7 >> 28));
  unint64_t v9 = (void *)(result
                + 48
                * (((((unsigned __int16)(v7 ^ (v7 >> 28)) >> 8) ^ ((-2147483647
                                                                                   * (v7 ^ (v7 >> 28))) >> 16)) ^ ((-2147483647 * (v7 ^ (v7 >> 28))) >> 24)) & 0xF));
  unint64_t v10 = v8 >> 7;
  uint64_t v11 = v9[3];
  uint64_t v12 = *v9;
  uint64_t v13 = 0x101010101010101 * (v8 & 0x7F);
  while (1)
  {
    unint64_t v14 = v10 & v11;
    uint64_t v15 = *(void *)(v12 + v14);
    unint64_t v16 = ((v15 ^ v13) - 0x101010101010101) & ~(v15 ^ v13) & 0x8080808080808080;
    if (v16) {
      break;
    }
LABEL_6:
    if ((v15 & (~v15 << 6) & 0x8080808080808080) != 0)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      a3[3] = v11;
      a3[4] = 0;
      return result;
    }
    v3 += 8;
    unint64_t v10 = v3 + v14;
  }
  uint64_t v17 = v9[1];
  while (1)
  {
    unint64_t v18 = (v14 + (__clz(__rbit64(v16)) >> 3)) & v11;
    if (*(void *)(v17 + 16 * v18) == v4) {
      break;
    }
    v16 &= v16 - 1;
    if (!v16) {
      goto LABEL_6;
    }
  }
  BOOL v19 = v11 == v18;
  uint64_t v20 = v12 + v18;
  uint64_t v21 = v12 + v11;
  uint64_t v22 = result + 768;
  if (v11 == v18)
  {
    uint64_t v20 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
  }
  else
  {
    uint64_t v23 = v9;
  }
  if (v11 == v18) {
    uint64_t v24 = a3;
  }
  else {
    uint64_t v24 = (void *)(v17 + 16 * v18);
  }
  if (v19) {
    uint64_t v25 = 0;
  }
  else {
    uint64_t v25 = v21;
  }
  *a3 = v23;
  a3[1] = v22;
  a3[2] = v20;
  a3[3] = v24;
  a3[4] = v25;
  return result;
}

BOOL sub_EE0528(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = 0;
  unint64_t v3 = ~(unint64_t)a2 + ((unint64_t)a2 << 21);
  unint64_t v4 = 21 * ((265 * (v3 ^ (v3 >> 24))) ^ ((265 * (v3 ^ (v3 >> 24))) >> 14));
  unint64_t v5 = 2147483649u * (v4 ^ (v4 >> 28));
  uint64_t v6 = a1
     + 48
     * (((((unsigned __int16)(v4 ^ (v4 >> 28)) >> 8) ^ ((-2147483647
                                                                        * (v4 ^ (v4 >> 28))) >> 16)) ^ ((-2147483647 * (v4 ^ (v4 >> 28))) >> 24)) & 0xF);
  uint64_t v9 = *(void *)(v6 + 240);
  uint64_t v7 = v6 + 240;
  uint64_t v8 = v9;
  unint64_t v10 = v5 >> 7;
  uint64_t v11 = *(void *)(v7 + 24);
  uint64_t v12 = 0x101010101010101 * (v5 & 0x7F);
  while (1)
  {
    unint64_t v13 = v10 & v11;
    uint64_t v14 = *(void *)(v8 + v13);
    unint64_t v15 = ((v14 ^ v12) - 0x101010101010101) & ~(v14 ^ v12) & 0x8080808080808080;
    if (v15) {
      break;
    }
LABEL_5:
    if ((v14 & (~v14 << 6) & 0x8080808080808080) != 0) {
      return 0;
    }
    v2 += 8;
    unint64_t v10 = v2 + v13;
  }
  while (1)
  {
    unint64_t v16 = (v13 + (__clz(__rbit64(v15)) >> 3)) & v11;
    if (*(_DWORD *)(*(void *)(v7 + 8) + 32 * v16) == a2) {
      break;
    }
    v15 &= v15 - 1;
    if (!v15) {
      goto LABEL_5;
    }
  }
  return v11 != v16;
}

uint64_t sub_EE0610(uint64_t a1, unsigned __int16 a2)
{
  return *(void *)(a1 + 216) + 160 * a2;
}

unint64_t sub_EE0624(uint64_t a1)
{
  return 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 224) - *(void *)(a1 + 216)) >> 5);
}

__n128 sub_EE0640@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *(__n128 *)(a1 + 216);
  *a2 = result;
  return result;
}

uint64_t sub_EE064C@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  if (a2 == -1) {
    goto LABEL_10;
  }
  uint64_t v3 = 0;
  unint64_t v4 = ~(unint64_t)a2 + ((unint64_t)a2 << 21);
  unint64_t v5 = 21 * ((265 * (v4 ^ (v4 >> 24))) ^ ((265 * (v4 ^ (v4 >> 24))) >> 14));
  unint64_t v6 = 2147483649u * (v5 ^ (v5 >> 28));
  uint64_t v7 = result
     + 48
     * (((((unsigned __int16)(v5 ^ (v5 >> 28)) >> 8) ^ ((-2147483647
                                                                        * (v5 ^ (v5 >> 28))) >> 16)) ^ ((-2147483647 * (v5 ^ (v5 >> 28))) >> 24)) & 0xF);
  uint64_t v10 = *(void *)(v7 + 240);
  uint64_t v9 = v7 + 240;
  uint64_t v8 = v10;
  unint64_t v11 = v6 >> 7;
  uint64_t v12 = *(void *)(v9 + 24);
  uint64_t v13 = 0x101010101010101 * (v6 & 0x7F);
  for (unint64_t i = v11; ; unint64_t i = v3 + v15)
  {
    unint64_t v15 = i & v12;
    uint64_t v16 = *(void *)(v8 + (i & v12));
    unint64_t v17 = ((v16 ^ v13) - 0x101010101010101) & ~(v16 ^ v13) & 0x8080808080808080;
    if (v17) {
      break;
    }
LABEL_7:
    if ((v16 & (~v16 << 6) & 0x8080808080808080) != 0) {
      goto LABEL_10;
    }
    v3 += 8;
  }
  uint64_t v18 = *(void *)(v9 + 8);
  while (1)
  {
    unint64_t v19 = (v15 + (__clz(__rbit64(v17)) >> 3)) & v12;
    if (*(_DWORD *)(v18 + 32 * v19) == a2) {
      break;
    }
    v17 &= v17 - 1;
    if (!v17) {
      goto LABEL_7;
    }
  }
  if (v12 == v19)
  {
LABEL_10:
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  else
  {
    for (j = 0; ; unint64_t v11 = j + v21)
    {
      unint64_t v21 = v11 & v12;
      unint64_t v22 = ((*(void *)(v8 + v21) ^ v13) - 0x101010101010101) & ~(*(void *)(v8 + v21) ^ v13) & 0x8080808080808080;
      if (v22) {
        break;
      }
LABEL_12:
      j += 8;
    }
    while (1)
    {
      unint64_t v23 = (v21 + (__clz(__rbit64(v22)) >> 3)) & v12;
      if (*(_DWORD *)(v18 + 32 * v23) == a2) {
        break;
      }
      v22 &= v22 - 1;
      if (!v22) {
        goto LABEL_12;
      }
    }
    uint64_t v24 = v18 + 32 * v23;
    uint64_t v26 = *(void *)(v24 + 8);
    uint64_t v25 = *(void *)(v24 + 16);
    *(void *)a3 = v26;
    *(void *)(a3 + 8) = result + 216;
    *(void *)(a3 + 16) = v25;
    *(void *)(a3 + 24) = result + 216;
  }
  return result;
}

__n128 sub_EE07B0@<Q0>(uint64_t a1@<X0>, unsigned int a2@<W1>, __n128 *a3@<X8>)
{
  uint64_t v3 = 0;
  unint64_t v4 = ~(unint64_t)a2 + ((unint64_t)a2 << 21);
  unint64_t v5 = 21 * ((265 * (v4 ^ (v4 >> 24))) ^ ((265 * (v4 ^ (v4 >> 24))) >> 14));
  unint64_t v6 = 2147483649u * (v5 ^ (v5 >> 28));
  uint64_t v7 = a1
     + 48
     * (((((unsigned __int16)(v5 ^ (v5 >> 28)) >> 8) ^ ((-2147483647
                                                                        * (v5 ^ (v5 >> 28))) >> 16)) ^ ((-2147483647 * (v5 ^ (v5 >> 28))) >> 24)) & 0xF);
  uint64_t v10 = *(void *)(v7 + 240);
  uint64_t v8 = v7 + 240;
  uint64_t v9 = v10;
  unint64_t v11 = v6 >> 7;
  uint64_t v12 = *(void *)(v8 + 24);
  uint64_t v13 = 0x101010101010101 * (v6 & 0x7F);
  while (1)
  {
    unint64_t v14 = v11 & v12;
    uint64_t v15 = *(void *)(v9 + v14);
    unint64_t v16 = ((v15 ^ v13) - 0x101010101010101) & ~(v15 ^ v13) & 0x8080808080808080;
    if (v16) {
      break;
    }
LABEL_6:
    if ((v15 & (~v15 << 6) & 0x8080808080808080) != 0) {
      goto LABEL_9;
    }
    v3 += 8;
    unint64_t v11 = v3 + v14;
  }
  uint64_t v17 = *(void *)(v8 + 8);
  while (1)
  {
    unint64_t v18 = (v14 + (__clz(__rbit64(v16)) >> 3)) & v12;
    if (*(_DWORD *)(v17 + 32 * v18) == a2) {
      break;
    }
    v16 &= v16 - 1;
    if (!v16) {
      goto LABEL_6;
    }
  }
  if (v12 == v18)
  {
LABEL_9:
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    return result;
  }
  __n128 result = *(__n128 *)(v17 + 32 * v18 + 8);
  *a3 = result;
  return result;
}

uint64_t sub_EE08A0()
{
  return 0;
}

void sub_EE08A8(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void sub_EE08B0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (uint64_t *)a2;
  sub_EDECDC(a2);
  uint64_t v4 = *(void *)(sub_1005964(a1) + 120);
  uint64_t v5 = *(void *)(sub_1005964(a1) + 128);
  uint64_t v93 = (uint64_t)v3;
  if (v4 != v5)
  {
    int v6 = 0;
    uint64_t v97 = (uint64_t)(v3 + 126);
    do
    {
      if (sub_10022FC(v4))
      {
        uint64_t v7 = sub_100231C(v4);
        long long v8 = *(_OWORD *)(v7 + 16);
        long long v113 = *(_OWORD *)v7;
        long long v114 = v8;
        unint64_t v9 = *(void *)(v7 + 32);
        long long v111 = *(_OWORD *)(v7 + 40);
        long long v112 = *(_OWORD *)(v7 + 56);
        unint64_t v10 = *(void *)(v7 + 72);
        uint64_t v11 = *(void *)(v7 + 80);
        unint64_t v12 = *(unsigned __int8 *)(v7 + 88);
        v110[0] = *(_DWORD *)(v7 + 89);
        *(_DWORD *)((char *)v110 + 3) = *(_DWORD *)(v7 + 92);
        uint64_t v94 = v11;
        unsigned int v13 = v11;
        uint64_t v95 = (char *)v9;
        unint64_t v96 = v12;
        unint64_t v14 = (((v9 >> 16) & 0xFFFF0000 | (v9 << 32) | (2 * ((v9 & 0xFF000000000000) == 0)))
             + 4 * (unsigned __int16)v11) & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
        v99[0] = v14;
        sub_EE03E4(v97, v99, &v100);
        if (v100)
        {
          sub_EE1844(v97, v99, (uint64_t)&v100);
          if (BYTE8(v101))
          {
            uint64_t v15 = *(void *)(v100 + 8) + 16 * v101;
            *(void *)uint64_t v15 = v99[0];
            *(_DWORD *)(v15 + 8) = -1;
          }
        }
        else
        {
          sub_EE1844(v97, v99, (uint64_t)&v100);
          uint64_t v17 = v101;
          uint64_t v18 = *(void *)(v100 + 8);
          if (BYTE8(v101))
          {
            uint64_t v19 = v18 + 16 * v101;
            *(void *)uint64_t v19 = v99[0];
            *(_DWORD *)(v19 + 8) = -1;
          }
          *(_DWORD *)(v18 + 16 * v17 + 8) = v6++;
        }
        unint64_t v20 = (((v10 >> 16) & 0xFFFF0000 | (v10 << 32) | (2 * ((v10 & 0xFF000000000000) == 0)))
             + ((v13 >> 14) & 0x3FFFC)) & 0xFFFFFFFFFFFFFFFELL | (v96 >> 1) & 1;
        v99[0] = v20;
        sub_EE03E4(v97, v99, &v100);
        if (v100)
        {
          sub_EE1844(v97, v99, (uint64_t)&v100);
          if (BYTE8(v101))
          {
            uint64_t v21 = *(void *)(v100 + 8) + 16 * v101;
            *(void *)uint64_t v21 = v99[0];
            *(_DWORD *)(v21 + 8) = -1;
          }
        }
        else
        {
          sub_EE1844(v97, v99, (uint64_t)&v100);
          uint64_t v25 = v101;
          uint64_t v26 = *(void *)(v100 + 8);
          if (BYTE8(v101))
          {
            uint64_t v27 = v26 + 16 * v101;
            *(void *)uint64_t v27 = v99[0];
            *(_DWORD *)(v27 + 8) = -1;
          }
          *(_DWORD *)(v26 + 16 * v25 + 8) = v6++;
        }
        v99[0] = v14;
        sub_EE1844(v97, v99, (uint64_t)&v100);
        uint64_t v28 = v101;
        uint64_t v29 = *(void *)(v100 + 8);
        if (BYTE8(v101))
        {
          uint64_t v30 = v29 + 16 * v101;
          *(void *)uint64_t v30 = v99[0];
          *(_DWORD *)(v30 + 8) = -1;
        }
        uint64_t v31 = *(unsigned int *)(v29 + 16 * v28 + 8);
        v99[0] = v20;
        sub_EE1844(v97, v99, (uint64_t)&v100);
        uint64_t v32 = v101;
        uint64_t v33 = *(void *)(v100 + 8);
        if (BYTE8(v101))
        {
          uint64_t v34 = v33 + 16 * v101;
          *(void *)uint64_t v34 = v99[0];
          *(_DWORD *)(v34 + 8) = -1;
        }
        unsigned int v35 = *(_DWORD *)(v33 + 16 * v32 + 8);
        unint64_t v36 = (unint64_t)(v3[13] - v3[12]) >> 2;
        if (v31 >= v36 || v35 >= v36) {
          goto LABEL_3;
        }
        uint64_t v37 = a1;
        sub_EC06EC((uint64_t)v3, v31);
        uint64_t v38 = *(unsigned int *)(v3[12] + 4 * v31);
        sub_EC06EC((uint64_t)v3, v31);
        uint64_t v39 = 0xFFFFFFFFLL;
        if (v38 != 0xFFFFFFFFLL)
        {
          while (*(_DWORD *)(*(void *)(v93 + 120) + 104 * v38) != v35)
          {
            uint64_t v38 = *(unsigned int *)(*(void *)(v93 + 144) + 4 * v38);
            if (v38 == -1)
            {
              uint64_t v39 = 0xFFFFFFFFLL;
              goto LABEL_35;
            }
          }
          uint64_t v39 = v38;
        }
LABEL_35:
        uint64_t v3 = (uint64_t *)v93;
        sub_EC06EC(v93, v31);
        sub_EC06EC(v93, v31);
        a1 = v37;
        if (v39 == 0xFFFFFFFFLL)
        {
LABEL_3:
          LODWORD(v100) = v35;
          long long v101 = v113;
          long long v102 = v114;
          long long v104 = v111;
          long long v105 = v112;
          uint64_t v103 = v95;
          unint64_t v106 = v10;
          uint64_t v107 = v94;
          char v108 = v96;
          *(_DWORD *)unsigned __int16 v109 = v110[0];
          *(_DWORD *)&v109[3] = *(_DWORD *)((char *)v110 + 3);
          sub_EDFAEC(v3, v31, (uint64_t)&v100, (uint64_t)v99);
        }
      }
      else
      {
        *(void *)&long long v113 = *(void *)sub_100237C(v4);
        sub_EE03E4(v97, (uint64_t *)&v113, &v100);
        if (v100)
        {
          sub_EE1844(v97, (uint64_t *)&v113, (uint64_t)&v100);
          if (BYTE8(v101))
          {
            uint64_t v16 = *(void *)(v100 + 8) + 16 * v101;
            *(void *)uint64_t v16 = v113;
            *(_DWORD *)(v16 + 8) = -1;
          }
        }
        else
        {
          sub_EE1844(v97, (uint64_t *)&v113, (uint64_t)&v100);
          uint64_t v22 = v101;
          uint64_t v23 = *(void *)(v100 + 8);
          if (BYTE8(v101))
          {
            uint64_t v24 = v23 + 16 * v101;
            *(void *)uint64_t v24 = v113;
            *(_DWORD *)(v24 + 8) = -1;
          }
          *(_DWORD *)(v23 + 16 * v22 + 8) = v6++;
        }
      }
      v4 += 152;
    }
    while (v4 != v5);
  }
  unint64_t v40 = (uint64_t *)sub_100596C(a1);
  sub_EE1448((char *)v3, a1, v40, 1);
  uint64_t v41 = (uint64_t *)sub_1005974(a1);
  sub_EE1448((char *)v3, a1, v41, 2);
  uint64_t v42 = (void *)sub_BED898(a1);
  sub_EE15AC((char *)v3, a1, v42, 5);
  uint64_t v43 = v3[28] - v3[27];
  if (v43)
  {
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    uint64_t v46 = v43 / 176;
    do
    {
      *(void *)&long long v113 = v45;
      uint64_t v47 = v3[27] + v44;
      int v48 = *(_DWORD *)(v47 + 20);
      LODWORD(v111) = v48;
      int v49 = *(_DWORD *)(v47 + 96);
      LODWORD(v99[0]) = v49;
      if (v48 != -1)
      {
        sub_EE2264((uint64_t)(v3 + 30), (unsigned int *)&v111, (uint64_t)&v100);
        unint64_t v50 = v100;
        if (BYTE8(v101))
        {
          uint64_t v51 = *(void *)(v100 + 8) + 32 * v101;
          *(_DWORD *)uint64_t v51 = v111;
          *(void *)(v51 + 16) = 0;
          *(void *)(v51 + 24) = 0;
          *(void *)(v51 + 8) = 0;
        }
        sub_EDB84C(*(void *)(v50 + 8) + 32 * v101 + 8, &v113);
        int v49 = v99[0];
        int v48 = v111;
      }
      if (v49 != -1 && v49 != v48)
      {
        sub_EE2264((uint64_t)(v3 + 30), (unsigned int *)v99, (uint64_t)&v100);
        unint64_t v53 = v100;
        if (BYTE8(v101))
        {
          uint64_t v54 = *(void *)(v100 + 8) + 32 * v101;
          *(_DWORD *)uint64_t v54 = v99[0];
          *(void *)(v54 + 16) = 0;
          *(void *)(v54 + 24) = 0;
          *(void *)(v54 + 8) = 0;
        }
        sub_EDB84C(*(void *)(v53 + 8) + 32 * v101 + 8, &v113);
      }
      ++v45;
      v44 += 176;
    }
    while (v46 != v45);
  }
  long long v113 = 0uLL;
  *(void *)&long long v114 = 0;
  uint64_t v55 = v3 + 126;
  uint64_t v56 = (char *)v3[126];
  uint64_t v57 = v3[127];
  int v58 = *v56;
  uint64_t v59 = (char *)v57;
  unint64_t v60 = v56;
  if (v58 <= -2)
  {
    uint64_t v59 = (char *)v3[127];
    unint64_t v60 = (void *)v3[126];
    do
    {
      unint64_t v61 = (__clz(__rbit64(((*v60 >> 7) & ~*v60 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      unint64_t v60 = (void *)((char *)v60 + v61);
      v59 += 16 * v61;
    }
    while (*(char *)v60 < -1);
  }
  __int16 v62 = (char **)(v3 + 222);
  __int16 v63 = &v56[v3[129]];
  unint64_t v64 = (char **)(v3 + 126);
  if (v60 == (void *)v63)
  {
    unint64_t v64 = (char **)(v3 + 132);
    uint64_t v86 = 1;
    unint64_t v87 = v3 + 126;
    while (1)
    {
      uint64_t v59 = (char *)v87[7];
      unint64_t v60 = *v64;
      if (**v64 <= -2)
      {
        do
        {
          unint64_t v88 = (__clz(__rbit64(((*v60 >> 7) & ~*v60 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          unint64_t v60 = (void *)((char *)v60 + v88);
          v59 += 16 * v88;
        }
        while (*(char *)v60 < -1);
      }
      __int16 v63 = &(*v64)[v87[9]];
      if (v60 != (void *)v63) {
        break;
      }
      unint64_t v87 = &v55[6 * v86++];
      unint64_t v64 = (char **)(v87 + 6);
      if (v86 == 16)
      {
        __n128 v80 = 0;
        __n128 v81 = 0;
        if ((char)v58 <= -2) {
          goto LABEL_78;
        }
        goto LABEL_88;
      }
    }
  }
  long long v98 = (void **)(v3 + 24);
  do
  {
    while (1)
    {
      uint64_t v65 = *(void *)v59;
      unint64_t v66 = *((unsigned int *)v59 + 2);
      LODWORD(v111) = *((_DWORD *)v59 + 2);
      uint64_t v67 = (void *)v3[24];
      uint64_t v68 = v3[13] - v3[12];
      unint64_t v69 = (unint64_t)v68 >> 2;
      unint64_t v70 = v68 >> 2;
      if ((v3[25] - (uint64_t)v67) >> 4 < (unint64_t)v69 || v70 <= v66)
      {
        sub_EE01BC(v3, v66);
        unint64_t v72 = (v3[13] - v3[12]) >> 2;
        unint64_t v100 = 0;
        *(void *)&long long v101 = 0;
        uint64_t v67 = (void *)v3[24];
        unint64_t v73 = (v3[25] - (uint64_t)v67) >> 4;
        if (v72 <= v73)
        {
          if (v72 < v73) {
            v3[25] = (uint64_t)&v67[2 * v72];
          }
        }
        else
        {
          sub_EE2954(v98, v72 - v73, &v100);
          uint64_t v67 = *v98;
        }
      }
      v67[2 * v66] = v65;
      unint64_t v100 = v65 & 0xFFFFFFFFFFFF0002;
      if (v65 != (v65 & 0xFFFFFFFFFFFF0002)) {
        sub_EDFF98((char **)&v113, &v100, &v111);
      }
      int v74 = *((char *)v60 + 1);
      unint64_t v60 = (void *)((char *)v60 + 1);
      v59 += 16;
      if (v74 <= -2)
      {
        do
        {
          unint64_t v75 = (__clz(__rbit64(((*v60 >> 7) & ~*v60 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          unint64_t v60 = (void *)((char *)v60 + v75);
          v59 += 16 * v75;
        }
        while (*(char *)v60 < -1);
      }
      if (v60 == (void *)v63) {
        break;
      }
      if (!v64) {
        goto LABEL_77;
      }
    }
    uint64_t v76 = v64 + 6;
    if (v64 + 6 == v62) {
      break;
    }
    while (1)
    {
      uint64_t v77 = v76;
      uint64_t v78 = v64[6];
      uint64_t v59 = v64[7];
      unint64_t v60 = v78;
      if (*v78 <= -2)
      {
        do
        {
          unint64_t v79 = (__clz(__rbit64(((*v60 >> 7) & ~*v60 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          unint64_t v60 = (void *)((char *)v60 + v79);
          v59 += 16 * v79;
        }
        while (*(char *)v60 < -1);
      }
      __int16 v63 = &v64[9][(void)v78];
      if (v60 != (void *)v63) {
        break;
      }
      uint64_t v76 = v77 + 6;
      unint64_t v64 = v77;
      if (v77 + 6 == v62) {
        goto LABEL_77;
      }
    }
    unint64_t v64 = v77;
  }
  while (v77);
LABEL_77:
  __n128 v80 = (_DWORD *)*((void *)&v113 + 1);
  __n128 v81 = (_DWORD *)v113;
  uint64_t v56 = (char *)v3[126];
  uint64_t v57 = v3[127];
  if (*v56 > -2)
  {
LABEL_88:
    long long v82 = v56;
    uint64_t v84 = &v56[v3[129]];
    uint64_t v85 = (char **)(v3 + 126);
    if (v82 != v84) {
      goto LABEL_98;
    }
  }
  else
  {
LABEL_78:
    long long v82 = v56;
    do
    {
      unint64_t v83 = (__clz(__rbit64(((*(void *)v82 >> 7) & ~*(void *)v82 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      v82 += v83;
      v57 += 16 * v83;
    }
    while (*v82 < -1);
    uint64_t v84 = &v56[v3[129]];
    uint64_t v85 = (char **)(v3 + 126);
    if (v82 != v84) {
      goto LABEL_98;
    }
  }
  uint64_t v85 = (char **)(v3 + 132);
  uint64_t v89 = 1;
  long long v90 = v3 + 126;
  do
  {
    BOOL v91 = *v85;
    uint64_t v57 = v90[7];
    if (**v85 > -2)
    {
      long long v82 = *v85;
      uint64_t v84 = &v91[v90[9]];
      if (v91 != v84) {
        goto LABEL_98;
      }
    }
    else
    {
      long long v82 = *v85;
      do
      {
        unint64_t v92 = (__clz(__rbit64(((*(void *)v82 >> 7) & ~*(void *)v82 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        v82 += v92;
        v57 += 16 * v92;
      }
      while (*v82 < -1);
      uint64_t v84 = &v91[v90[9]];
      if (v82 != v84) {
        goto LABEL_98;
      }
    }
    long long v90 = &v55[6 * v89++];
    uint64_t v85 = (char **)(v90 + 6);
  }
  while (v89 != 16);
  uint64_t v85 = 0;
  uint64_t v84 = v82;
LABEL_98:
  unint64_t v100 = (unint64_t)(v3 + 126);
  *(void *)&long long v101 = v85;
  *((void *)&v101 + 1) = v3 + 222;
  *(void *)&long long v102 = v82;
  *((void *)&v102 + 1) = v57;
  uint64_t v103 = v84;
  if (v81 != v80)
  {
    do
    {
      *(void *)&long long v111 = *(void *)v81;
      DWORD2(v111) = v81[2];
      sub_EE2AA4((uint64_t)&v100, (uint64_t *)&v111);
      v81 += 4;
    }
    while (v81 != v80);
    __n128 v80 = (_DWORD *)v113;
  }
  if (v80)
  {
    *((void *)&v113 + 1) = v80;
    operator delete(v80);
  }
}

void sub_EE1350(_Unwind_Exception *a1)
{
  sub_EE00C8(v1);
  _Unwind_Resume(a1);
}

void sub_EE1364(_Unwind_Exception *a1)
{
  sub_EE00C8(v1);
  _Unwind_Resume(a1);
}

void sub_EE1378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  unint64_t v14 = *(void **)(v12 - 144);
  if (v14)
  {
    *(void *)(v12 - 136) = v14;
    operator delete(v14);
  }
  sub_EE00C8(a12);
  _Unwind_Resume(a1);
}

void sub_EE13F8(_Unwind_Exception *a1)
{
  sub_EE00C8(v1);
  _Unwind_Resume(a1);
}

void sub_EE140C(_Unwind_Exception *a1)
{
  sub_EE00C8(v1);
  _Unwind_Resume(a1);
}

void sub_EE1420(_Unwind_Exception *a1)
{
  sub_EE00C8(v1);
  _Unwind_Resume(a1);
}

void sub_EE1434(_Unwind_Exception *a1)
{
  sub_EE00C8(v1);
  _Unwind_Resume(a1);
}

char *sub_EE1448(char *result, uint64_t a2, uint64_t *a3, char a4)
{
  uint64_t v4 = *a3;
  uint64_t v5 = a3[1];
  if (*a3 != v5)
  {
    uint64_t v8 = (uint64_t)(result + 1008);
    unint64_t v9 = (char **)(result + 216);
    do
    {
      if (*(void *)(v4 + 8) && (v36[0] = *(void *)(v4 + 8), sub_EE03E4(v8, v36, v34), v34[0]))
      {
        int v18 = *(_DWORD *)(v35 + 8);
        uint64_t v19 = *(void *)(v4 + 88);
        if (!v19) {
          goto LABEL_3;
        }
      }
      else
      {
        int v18 = -1;
        uint64_t v19 = *(void *)(v4 + 88);
        if (!v19) {
          goto LABEL_3;
        }
      }
      v36[0] = v19;
      sub_EE03E4(v8, v36, v34);
      if (v34[0])
      {
        int v10 = *(_DWORD *)(v35 + 8);
        goto LABEL_4;
      }
LABEL_3:
      int v10 = -1;
LABEL_4:
      *(void *)&long long v20 = 0xFFFFLL;
      char v21 = 0;
      int v22 = v18;
      long long v23 = *(_OWORD *)(v4 + 16);
      long long v11 = *(_OWORD *)(v4 + 32);
      long long v12 = *(_OWORD *)(v4 + 48);
      long long v13 = *(_OWORD *)(v4 + 64);
      uint64_t v27 = *(void *)(v4 + 80);
      long long v25 = v12;
      long long v26 = v13;
      long long v24 = v11;
      int v28 = v10;
      long long v29 = *(_OWORD *)(v4 + 96);
      long long v14 = *(_OWORD *)(v4 + 112);
      long long v15 = *(_OWORD *)(v4 + 128);
      long long v16 = *(_OWORD *)(v4 + 144);
      uint64_t v33 = *(void *)(v4 + 160);
      long long v31 = v15;
      long long v32 = v16;
      long long v30 = v14;
      LOWORD(v20) = sub_1005864(a2, (unsigned int *)v4);
      *((void *)&v20 + 1) = v17;
      char v21 = a4;
      __n128 result = sub_EE2DAC(v9, &v20);
      v4 += 168;
    }
    while (v4 != v5);
  }
  return result;
}

char *sub_EE15AC(char *result, uint64_t a2, void *a3, char a4)
{
  uint64_t v5 = result;
  uint64_t v6 = a3[49];
  uint64_t v7 = a3[27];
  uint64_t v8 = v6 + 168 * v7;
  if (v7)
  {
    uint64_t v9 = 168 * v7;
    while (1)
    {
      __n128 result = (char *)sub_1024810((uint64_t)(a3 + 28), v6);
      if ((result & 1) == 0)
      {
        if (!a3[25]) {
          break;
        }
        __n128 result = (char *)sub_1024810((uint64_t)(a3 + 4), v6);
        if (!result) {
          break;
        }
      }
      v6 += 168;
      v9 -= 168;
      if (!v9)
      {
        uint64_t v6 = v8;
        break;
      }
    }
    uint64_t v10 = v6;
    uint64_t v24 = a3[49] + 168 * a3[27];
    if (v6 != v24)
    {
      uint64_t v11 = (uint64_t)(v5 + 1008);
      long long v12 = (char **)(v5 + 216);
      do
      {
        if (*(void *)(v10 + 8) && (v43[0] = *(void *)(v10 + 8), sub_EE03E4(v11, v43, v41), v41[0]))
        {
          int v13 = *(_DWORD *)(v42 + 8);
          uint64_t v14 = *(void *)(v10 + 88);
          if (!v14) {
            goto LABEL_21;
          }
        }
        else
        {
          int v13 = -1;
          uint64_t v14 = *(void *)(v10 + 88);
          if (!v14) {
            goto LABEL_21;
          }
        }
        v43[0] = v14;
        sub_EE03E4(v11, v43, v41);
        if (!v41[0])
        {
LABEL_21:
          int v15 = -1;
          goto LABEL_22;
        }
        int v15 = *(_DWORD *)(v42 + 8);
LABEL_22:
        *(void *)&long long v27 = 0xFFFFLL;
        char v28 = 0;
        int v29 = v13;
        long long v30 = *(_OWORD *)(v10 + 16);
        long long v16 = *(_OWORD *)(v10 + 32);
        long long v17 = *(_OWORD *)(v10 + 48);
        long long v18 = *(_OWORD *)(v10 + 64);
        uint64_t v34 = *(void *)(v10 + 80);
        long long v32 = v17;
        long long v33 = v18;
        long long v31 = v16;
        int v35 = v15;
        long long v19 = *(_OWORD *)(v10 + 112);
        long long v20 = *(_OWORD *)(v10 + 128);
        long long v21 = *(_OWORD *)(v10 + 144);
        uint64_t v40 = *(void *)(v10 + 160);
        long long v38 = v20;
        long long v39 = v21;
        long long v37 = v19;
        long long v36 = *(_OWORD *)(v10 + 96);
        LOWORD(v27) = sub_1005864(a2, (unsigned int *)v10);
        *((void *)&v27 + 1) = v22;
        char v28 = a4;
        __n128 result = sub_EE2DAC(v12, &v27);
        uint64_t v23 = v10 + 168;
        uint64_t v10 = v8;
        if (v23 != v8)
        {
          uint64_t v10 = v23;
          while (1)
          {
            __n128 result = (char *)sub_1024810((uint64_t)(a3 + 28), v10);
            if ((result & 1) == 0)
            {
              if (!a3[25]) {
                break;
              }
              __n128 result = (char *)sub_1024810((uint64_t)(a3 + 4), v10);
              if (!result) {
                break;
              }
            }
            v10 += 168;
            if (v10 == v8)
            {
              uint64_t v10 = v8;
              break;
            }
          }
        }
      }
      while (v10 != v24);
    }
  }
  return result;
}

uint64_t sub_EE180C(uint64_t a1, unsigned __int16 a2)
{
  return *(void *)(a1 + 216) + 176 * a2;
}

uint64_t sub_EE1820(uint64_t a1)
{
  return 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a1 + 224) - *(void *)(a1 + 216)) >> 4);
}

unint64_t sub_EE1844@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = 0;
  uint64_t v5 = *a2;
  unint64_t v6 = 0x2127599BF4325C37 * (*a2 ^ ((unint64_t)*a2 >> 23));
  unint64_t v7 = (v6 ^ ~(v6 >> 47)) + ((v6 ^ (v6 >> 47)) << 21);
  unint64_t v8 = 21 * ((265 * (v7 ^ (v7 >> 24))) ^ ((265 * (v7 ^ (v7 >> 24))) >> 14));
  unint64_t v9 = 2147483649u * (v8 ^ (v8 >> 28));
  uint64_t v10 = (uint64_t *)(a1
                  + 48
                  * (((((unsigned __int16)(v8 ^ (v8 >> 28)) >> 8) ^ ((-2147483647
                                                                                     * (v8 ^ (v8 >> 28))) >> 16)) ^ ((-2147483647 * (v8 ^ (v8 >> 28))) >> 24)) & 0xF));
  unint64_t v11 = v9 >> 7;
  uint64_t v12 = v10[3];
  while (1)
  {
    unint64_t v13 = v11 & v12;
    uint64_t v14 = *(void *)(*v10 + v13);
    unint64_t v15 = ((v14 ^ (0x101010101010101 * (v9 & 0x7F))) - 0x101010101010101) & ~(v14 ^ (0x101010101010101
                                                                                       * (v9 & 0x7F))) & 0x8080808080808080;
    if (v15) {
      break;
    }
LABEL_5:
    if ((v14 & (~v14 << 6) & 0x8080808080808080) != 0)
    {
      unint64_t result = sub_EE197C(v10, v9);
      *(void *)a3 = v10;
      *(void *)(a3 + 8) = result;
      *(unsigned char *)(a3 + 16) = 1;
      return result;
    }
    v4 += 8;
    unint64_t v11 = v4 + v13;
  }
  while (1)
  {
    unint64_t result = (v13 + (__clz(__rbit64(v15)) >> 3)) & v12;
    if (*(void *)(v10[1] + 16 * result) == v5) {
      break;
    }
    v15 &= v15 - 1;
    if (!v15) {
      goto LABEL_5;
    }
  }
  *(void *)a3 = v10;
  *(void *)(a3 + 8) = result;
  *(unsigned char *)(a3 + 16) = 0;
  return result;
}

unint64_t sub_EE197C(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = *a1;
  unint64_t v6 = v4 & (a2 >> 7);
  unint64_t v7 = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
  if (!v7)
  {
    uint64_t v8 = 8;
    do
    {
      unint64_t v6 = (v6 + v8) & v4;
      v8 += 8;
      unint64_t v7 = *(void *)(v5 + v6) & (~*(void *)(v5 + v6) << 7) & 0x8080808080808080;
    }
    while (!v7);
  }
  unint64_t result = (v6 + (__clz(__rbit64(v7)) >> 3)) & v4;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v5 + result) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      sub_EE1A74((uint64_t)a1);
      unint64_t result = sub_2D7FC4(a1, a2);
      uint64_t v5 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v5 + result) == 128);
  *(unsigned char *)(v5 + result) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (result - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  return result;
}

void sub_EE1A74(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    uint64_t v2 = (unsigned char *)(&def_332C + 1);
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    uint64_t v2 = (char *)((2 * v1) | 1);
LABEL_4:
    sub_EE1AA4((char **)a1, v2);
    return;
  }
  sub_EE1C60(a1);
}

void sub_EE1AA4(char **a1, char *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[3];
  unint64_t v7 = ((unint64_t)a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v8 = (char *)operator new(v7 + 16 * (void)a2);
  *a1 = v8;
  a1[1] = &v8[v7];
  memset(v8, 128, (size_t)(a2 + 8));
  a2[(void)v8] = -1;
  uint64_t v9 = (uint64_t)&a2[-((unint64_t)a2 >> 3)];
  if (a2 == (unsigned char *)dword_4 + 3) {
    uint64_t v9 = 6;
  }
  a1[5] = (char *)(v9 - (void)a1[2]);
  a1[3] = a2;
  if (v6)
  {
    for (unint64_t i = 0; i != v6; ++i)
    {
      if ((i[(void)v4] & 0x80000000) == 0)
      {
        unint64_t v13 = &v5[16 * (void)i];
        unint64_t v14 = 0x2127599BF4325C37 * (*(void *)v13 ^ (*(void *)v13 >> 23));
        unint64_t v15 = (v14 ^ ~(v14 >> 47)) + ((v14 ^ (v14 >> 47)) << 21);
        unint64_t v16 = 21 * ((265 * (v15 ^ (v15 >> 24))) ^ ((265 * (v15 ^ (v15 >> 24))) >> 14));
        unint64_t v17 = 2147483649u * (v16 ^ (v16 >> 28));
        long long v18 = a1[3];
        long long v19 = *a1;
        unint64_t v20 = (unint64_t)v18 & (v17 >> 7);
        unint64_t v21 = *(void *)&(*a1)[v20] & (~*(void *)&(*a1)[v20] << 7) & 0x8080808080808080;
        if (!v21)
        {
          uint64_t v22 = 8;
          do
          {
            unint64_t v20 = (v20 + v22) & (unint64_t)v18;
            v22 += 8;
            unint64_t v21 = *(void *)&v19[v20] & (~*(void *)&v19[v20] << 7) & 0x8080808080808080;
          }
          while (!v21);
        }
        unint64_t v11 = (v20 + (__clz(__rbit64(v21)) >> 3)) & (unint64_t)v18;
        char v12 = v17 & 0x7F;
        v19[v11] = v12;
        (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v11 - 8) & (unint64_t)a1[3])] = v12;
        *(_OWORD *)&a1[1][16 * v11] = *(_OWORD *)v13;
      }
    }
    operator delete(v4);
  }
}

uint64_t sub_EE1C60(uint64_t result)
{
  unint64_t v1 = *(int8x16_t **)result;
  uint64_t v2 = *(void *)(result + 24);
  uint64_t v3 = *(void *)result + v2;
  if (v3 + 1 != *(void *)result)
  {
    unint64_t v4 = v2 - 7;
    uint64_t v5 = *(unint64_t **)result;
    if (v4 < 0x18) {
      goto LABEL_28;
    }
    uint64_t v6 = (v4 >> 3) + 1;
    uint64_t v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    uint64_t v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      int8x16_t v11 = vandq_s8(v7[-1], v8);
      int8x16_t v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      *unint64_t v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        *uint64_t v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(void *)(v3 + 1) = v1->i64[0];
  *(unsigned char *)uint64_t v3 = -1;
  uint64_t v13 = *(void *)(result + 24);
  if (v13)
  {
    for (unint64_t i = 0; i != v13; ++i)
    {
      unint64_t v17 = *(int8x16_t **)result;
      if (*(unsigned __int8 *)(*(void *)result + i) == 254)
      {
        unint64_t v18 = *(void *)(*(void *)(result + 8) + 16 * i);
        unint64_t v19 = ((0x2127599BF4325C37 * (v18 ^ (v18 >> 23))) ^ ~((0x2127599BF4325C37 * (v18 ^ (v18 >> 23))) >> 47))
            + (((0x2127599BF4325C37 * (v18 ^ (v18 >> 23))) ^ ((0x2127599BF4325C37 * (v18 ^ (v18 >> 23))) >> 47)) << 21);
        unint64_t v20 = 21 * ((265 * (v19 ^ (v19 >> 24))) ^ ((265 * (v19 ^ (v19 >> 24))) >> 14));
        unint64_t v21 = 2147483649u * (v20 ^ (v20 >> 28));
        unint64_t v22 = v13 & (v21 >> 7);
        unint64_t v23 = *(uint64_t *)((unsigned char *)v17->i64 + v22) & (~*(uint64_t *)((char *)v17->i64 + v22) << 7) & 0x8080808080808080;
        if (v23)
        {
          unint64_t v15 = v13 & (v21 >> 7);
        }
        else
        {
          uint64_t v24 = 8;
          unint64_t v15 = v13 & (v21 >> 7);
          do
          {
            unint64_t v15 = (v15 + v24) & v13;
            v24 += 8;
            unint64_t v23 = *(uint64_t *)((unsigned char *)v17->i64 + v15) & (~*(uint64_t *)((char *)v17->i64 + v15) << 7) & 0x8080808080808080;
          }
          while (!v23);
        }
        unint64_t v16 = (v15 + (__clz(__rbit64(v23)) >> 3)) & v13;
        if ((((v16 - v22) ^ (i - v22)) & v13) > 7)
        {
          int v25 = v17->u8[v16];
          v17->i8[v16] = v21 & 0x7F;
          *(unsigned char *)((*(void *)(result + 24) & (v16 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v21 & 0x7F;
          uint64_t v26 = *(void *)(result + 8);
          if (v25 == 128)
          {
            *(_OWORD *)(v26 + 16 * v16) = *(_OWORD *)(v26 + 16 * i);
            *(unsigned char *)(*(void *)result + i) = 0x80;
            *(unsigned char *)((*(void *)(result + 24) & (i - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = 0x80;
          }
          else
          {
            long long v27 = *(_OWORD *)(v26 + 16 * i);
            *(_OWORD *)(v26 + 16 * i) = *(_OWORD *)(v26 + 16 * v16);
            *(_OWORD *)(*(void *)(result + 8) + 16 * v16) = v27;
            --i;
          }
        }
        else
        {
          v17->i8[i] = v21 & 0x7F;
          *(unsigned char *)((*(void *)(result + 24) & (i - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v21 & 0x7F;
        }
      }
      uint64_t v13 = *(void *)(result + 24);
    }
    uint64_t v28 = i - (i >> 3);
    BOOL v29 = i == 7;
    uint64_t v30 = 6;
    if (!v29) {
      uint64_t v30 = v28;
    }
  }
  else
  {
    uint64_t v30 = 0;
  }
  *(void *)(result + 40) = v30 - *(void *)(result + 16);
  return result;
}

char *sub_EE1F2C(char **a1, long long *a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    int8x16_t v12 = *a1;
    uint64_t v13 = 0x4EC4EC4EC4EC4EC5 * ((v5 - *a1) >> 3);
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) > 0x276276276276276) {
      sub_2E00();
    }
    unint64_t v15 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v4 - (void)v12) >> 3);
    if (2 * v15 > v14) {
      unint64_t v14 = 2 * v15;
    }
    if (v15 >= 0x13B13B13B13B13BLL) {
      unint64_t v16 = 0x276276276276276;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      if (v16 > 0x276276276276276) {
        sub_188D718();
      }
      unint64_t v17 = (char *)operator new(104 * v16);
    }
    else
    {
      unint64_t v17 = 0;
    }
    long long v18 = a2[5];
    unint64_t v19 = &v17[104 * v13];
    *((_OWORD *)v19 + 4) = a2[4];
    *((_OWORD *)v19 + 5) = v18;
    *((void *)v19 + 12) = *((void *)a2 + 12);
    long long v20 = a2[1];
    *(_OWORD *)unint64_t v19 = *a2;
    *((_OWORD *)v19 + 1) = v20;
    long long v21 = a2[3];
    *((_OWORD *)v19 + 2) = a2[2];
    *((_OWORD *)v19 + 3) = v21;
    int8x16_t v11 = v19 + 104;
    if (v5 != v12)
    {
      do
      {
        long long v22 = *(_OWORD *)(v5 - 104);
        long long v23 = *(_OWORD *)(v5 - 88);
        *(_OWORD *)(v19 - 72) = *(_OWORD *)(v5 - 72);
        *(_OWORD *)(v19 - 88) = v23;
        *(_OWORD *)(v19 - 104) = v22;
        long long v24 = *(_OWORD *)(v5 - 56);
        long long v25 = *(_OWORD *)(v5 - 40);
        long long v26 = *(_OWORD *)(v5 - 24);
        *((void *)v19 - 1) = *((void *)v5 - 1);
        *(_OWORD *)(v19 - 24) = v26;
        *(_OWORD *)(v19 - 40) = v25;
        *(_OWORD *)(v19 - 56) = v24;
        v19 -= 104;
        v5 -= 104;
      }
      while (v5 != v12);
      uint64_t v5 = *a1;
    }
    *a1 = v19;
    a1[1] = v11;
    a1[2] = &v17[104 * v16];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    long long v6 = *a2;
    long long v7 = a2[2];
    *((_OWORD *)v5 + 1) = a2[1];
    *((_OWORD *)v5 + 2) = v7;
    *(_OWORD *)uint64_t v5 = v6;
    long long v8 = a2[3];
    long long v9 = a2[4];
    long long v10 = a2[5];
    *((void *)v5 + 12) = *((void *)a2 + 12);
    *((_OWORD *)v5 + 4) = v9;
    *((_OWORD *)v5 + 5) = v10;
    *((_OWORD *)v5 + 3) = v8;
    int8x16_t v11 = v5 + 104;
  }
  a1[1] = v11;
  return v11 - 104;
}

char *sub_EE20D8(char **a1, long long *a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v14 = *a1;
    unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 5);
    unint64_t v16 = v15 + 1;
    if (v15 + 1 > 0x199999999999999) {
      sub_2E00();
    }
    unint64_t v17 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - (void)v14) >> 5);
    if (2 * v17 > v16) {
      unint64_t v16 = 2 * v17;
    }
    if (v17 >= 0xCCCCCCCCCCCCCCLL) {
      unint64_t v18 = 0x199999999999999;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 > 0x199999999999999) {
        sub_188D718();
      }
      unint64_t v19 = (char *)operator new(160 * v18);
    }
    else
    {
      unint64_t v19 = 0;
    }
    long long v20 = a2[7];
    long long v21 = &v19[160 * v15];
    *((_OWORD *)v21 + 6) = a2[6];
    *((_OWORD *)v21 + 7) = v20;
    long long v22 = a2[9];
    *((_OWORD *)v21 + 8) = a2[8];
    *((_OWORD *)v21 + 9) = v22;
    long long v23 = a2[3];
    *((_OWORD *)v21 + 2) = a2[2];
    *((_OWORD *)v21 + 3) = v23;
    long long v24 = a2[5];
    *((_OWORD *)v21 + 4) = a2[4];
    *((_OWORD *)v21 + 5) = v24;
    long long v25 = *a2;
    long long v26 = a2[1];
    uint64_t v13 = v21 + 160;
    *(_OWORD *)long long v21 = v25;
    *((_OWORD *)v21 + 1) = v26;
    if (v5 != v14)
    {
      do
      {
        long long v27 = *((_OWORD *)v5 - 9);
        *((_OWORD *)v21 - 10) = *((_OWORD *)v5 - 10);
        *((_OWORD *)v21 - 9) = v27;
        long long v28 = *((_OWORD *)v5 - 8);
        long long v29 = *((_OWORD *)v5 - 7);
        long long v30 = *((_OWORD *)v5 - 5);
        *((_OWORD *)v21 - 6) = *((_OWORD *)v5 - 6);
        *((_OWORD *)v21 - 5) = v30;
        *((_OWORD *)v21 - 8) = v28;
        *((_OWORD *)v21 - 7) = v29;
        long long v31 = *((_OWORD *)v5 - 4);
        long long v32 = *((_OWORD *)v5 - 3);
        long long v33 = *((_OWORD *)v5 - 1);
        *((_OWORD *)v21 - 2) = *((_OWORD *)v5 - 2);
        *((_OWORD *)v21 - 1) = v33;
        *((_OWORD *)v21 - 4) = v31;
        *((_OWORD *)v21 - 3) = v32;
        v21 -= 160;
        v5 -= 160;
      }
      while (v5 != v14);
      uint64_t v5 = *a1;
    }
    *a1 = v21;
    a1[1] = v13;
    a1[2] = &v19[160 * v18];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    long long v6 = a2[1];
    *(_OWORD *)uint64_t v5 = *a2;
    *((_OWORD *)v5 + 1) = v6;
    long long v7 = a2[2];
    long long v8 = a2[3];
    long long v9 = a2[5];
    *((_OWORD *)v5 + 4) = a2[4];
    *((_OWORD *)v5 + 5) = v9;
    *((_OWORD *)v5 + 2) = v7;
    *((_OWORD *)v5 + 3) = v8;
    long long v10 = a2[6];
    long long v11 = a2[7];
    long long v12 = a2[9];
    *((_OWORD *)v5 + 8) = a2[8];
    *((_OWORD *)v5 + 9) = v12;
    *((_OWORD *)v5 + 6) = v10;
    *((_OWORD *)v5 + 7) = v11;
    uint64_t v13 = v5 + 160;
  }
  a1[1] = v13;
  return v13 - 160;
}

unint64_t sub_EE2264@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = 0;
  uint64_t v5 = *a2;
  unint64_t v6 = 265 * ((~v5 + (v5 << 21)) ^ ((unint64_t)(~v5 + (v5 << 21)) >> 24));
  unint64_t v7 = 2147483649u * ((21 * (v6 ^ (v6 >> 14))) ^ ((21 * (v6 ^ (v6 >> 14))) >> 28));
  long long v8 = (uint64_t *)(a1 + 48 * (((BYTE1(v7) ^ BYTE2(v7)) ^ BYTE3(v7)) & 0xF));
  unint64_t v9 = v7 >> 7;
  uint64_t v10 = v8[3];
  while (1)
  {
    unint64_t v11 = v9 & v10;
    uint64_t v12 = *(void *)(*v8 + v11);
    unint64_t v13 = ((v12 ^ (0x101010101010101 * (v7 & 0x7F))) - 0x101010101010101) & ~(v12 ^ (0x101010101010101
                                                                                       * (v7 & 0x7F))) & 0x8080808080808080;
    if (v13) {
      break;
    }
LABEL_5:
    if ((v12 & (~v12 << 6) & 0x8080808080808080) != 0)
    {
      unint64_t result = sub_EE2380(v8, v7);
      *(void *)a3 = v8;
      *(void *)(a3 + 8) = result;
      *(unsigned char *)(a3 + 16) = 1;
      return result;
    }
    v4 += 8;
    unint64_t v9 = v4 + v11;
  }
  while (1)
  {
    unint64_t result = (v11 + (__clz(__rbit64(v13)) >> 3)) & v10;
    if (*(_DWORD *)(v8[1] + 32 * result) == v5) {
      break;
    }
    v13 &= v13 - 1;
    if (!v13) {
      goto LABEL_5;
    }
  }
  *(void *)a3 = v8;
  *(void *)(a3 + 8) = result;
  *(unsigned char *)(a3 + 16) = 0;
  return result;
}

unint64_t sub_EE2380(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = *a1;
  unint64_t v6 = v4 & (a2 >> 7);
  unint64_t v7 = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
  if (!v7)
  {
    uint64_t v8 = 8;
    do
    {
      unint64_t v6 = (v6 + v8) & v4;
      v8 += 8;
      unint64_t v7 = *(void *)(v5 + v6) & (~*(void *)(v5 + v6) << 7) & 0x8080808080808080;
    }
    while (!v7);
  }
  unint64_t result = (v6 + (__clz(__rbit64(v7)) >> 3)) & v4;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v5 + result) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      sub_EE2478((uint64_t)a1);
      unint64_t result = sub_2D7FC4(a1, a2);
      uint64_t v5 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v5 + result) == 128);
  *(unsigned char *)(v5 + result) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (result - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  return result;
}

void sub_EE2478(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    uint64_t v2 = (unsigned char *)(&def_332C + 1);
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    uint64_t v2 = (char *)((2 * v1) | 1);
LABEL_4:
    sub_EE24A8((char **)a1, v2);
    return;
  }
  sub_EE266C(a1);
}

void sub_EE24A8(char **a1, char *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[3];
  unint64_t v7 = ((unint64_t)a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v8 = (char *)operator new(v7 + 32 * (void)a2);
  *a1 = v8;
  a1[1] = &v8[v7];
  memset(v8, 128, (size_t)(a2 + 8));
  a2[(void)v8] = -1;
  uint64_t v9 = (uint64_t)&a2[-((unint64_t)a2 >> 3)];
  if (a2 == (unsigned char *)dword_4 + 3) {
    uint64_t v9 = 6;
  }
  a1[5] = (char *)(v9 - (void)a1[2]);
  a1[3] = a2;
  if (v6)
  {
    for (unint64_t i = 0; i != v6; ++i)
    {
      if ((i[(void)v4] & 0x80000000) == 0)
      {
        unint64_t v14 = &v5[32 * (void)i];
        unint64_t v15 = ~(unint64_t)*(unsigned int *)v14 + ((unint64_t)*(unsigned int *)v14 << 21);
        unint64_t v16 = 21 * ((265 * (v15 ^ (v15 >> 24))) ^ ((265 * (v15 ^ (v15 >> 24))) >> 14));
        unint64_t v17 = 2147483649u * (v16 ^ (v16 >> 28));
        unint64_t v18 = a1[3];
        unint64_t v19 = *a1;
        unint64_t v20 = (unint64_t)v18 & (v17 >> 7);
        unint64_t v21 = *(void *)&(*a1)[v20] & (~*(void *)&(*a1)[v20] << 7) & 0x8080808080808080;
        if (!v21)
        {
          uint64_t v22 = 8;
          do
          {
            unint64_t v20 = (v20 + v22) & (unint64_t)v18;
            v22 += 8;
            unint64_t v21 = *(void *)&v19[v20] & (~*(void *)&v19[v20] << 7) & 0x8080808080808080;
          }
          while (!v21);
        }
        unint64_t v11 = (v20 + (__clz(__rbit64(v21)) >> 3)) & (unint64_t)v18;
        char v12 = v17 & 0x7F;
        v19[v11] = v12;
        (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v11 - 8) & (unint64_t)a1[3])] = v12;
        uint64_t v13 = (uint64_t)&a1[1][32 * v11];
        *(_DWORD *)uint64_t v13 = *(_DWORD *)v14;
        *(void *)(v13 + 16) = 0;
        *(void *)(v13 + 24) = 0;
        *(void *)(v13 + 8) = 0;
        *(_OWORD *)(v13 + 8) = *(_OWORD *)(v14 + 8);
        *(void *)(v13 + 24) = *((void *)v14 + 3);
        *((void *)v14 + 1) = 0;
        *((void *)v14 + 2) = 0;
        *((void *)v14 + 3) = 0;
      }
    }
    operator delete(v4);
  }
}

uint64_t sub_EE266C(uint64_t result)
{
  unint64_t v1 = *(int8x16_t **)result;
  uint64_t v2 = *(void *)(result + 24);
  uint64_t v3 = *(void *)result + v2;
  if (v3 + 1 != *(void *)result)
  {
    unint64_t v4 = v2 - 7;
    uint64_t v5 = *(unint64_t **)result;
    if (v4 < 0x18) {
      goto LABEL_27;
    }
    uint64_t v6 = (v4 >> 3) + 1;
    uint64_t v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    uint64_t v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      int8x16_t v11 = vandq_s8(v7[-1], v8);
      int8x16_t v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      *unint64_t v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_27:
      do
      {
        *uint64_t v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(void *)(v3 + 1) = v1->i64[0];
  *(unsigned char *)uint64_t v3 = -1;
  uint64_t v13 = *(void *)(result + 24);
  if (v13)
  {
    for (unint64_t i = 0; i != v13; ++i)
    {
      unint64_t v17 = *(int8x16_t **)result;
      if (*(unsigned __int8 *)(*(void *)result + i) == 254)
      {
        uint64_t v18 = 32 * i;
        uint64_t v19 = *(unsigned int *)(*(void *)(result + 8) + 32 * i);
        unint64_t v20 = 265 * ((~v19 + (v19 << 21)) ^ ((unint64_t)(~v19 + (v19 << 21)) >> 24));
        unint64_t v21 = 2147483649u * ((21 * (v20 ^ (v20 >> 14))) ^ ((21 * (v20 ^ (v20 >> 14))) >> 28));
        unint64_t v22 = v13 & (v21 >> 7);
        unint64_t v23 = *(uint64_t *)((unsigned char *)v17->i64 + v22) & (~*(uint64_t *)((char *)v17->i64 + v22) << 7) & 0x8080808080808080;
        if (v23)
        {
          unint64_t v15 = v13 & (v21 >> 7);
        }
        else
        {
          uint64_t v24 = 8;
          unint64_t v15 = v13 & (v21 >> 7);
          do
          {
            unint64_t v15 = (v15 + v24) & v13;
            v24 += 8;
            unint64_t v23 = *(uint64_t *)((unsigned char *)v17->i64 + v15) & (~*(uint64_t *)((char *)v17->i64 + v15) << 7) & 0x8080808080808080;
          }
          while (!v23);
        }
        unint64_t v16 = (v15 + (__clz(__rbit64(v23)) >> 3)) & v13;
        if ((((v16 - v22) ^ (i - v22)) & v13) > 7)
        {
          int v25 = v17->u8[v16];
          v17->i8[v16] = v21 & 0x7F;
          *(unsigned char *)((*(void *)(result + 24) & (v16 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v21 & 0x7F;
          uint64_t v26 = *(void *)(result + 8);
          if (v25 == 128)
          {
            uint64_t v27 = v26 + 32 * v16;
            uint64_t v28 = v26 + 32 * i;
            *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
            *(void *)(v27 + 16) = 0;
            *(void *)(v27 + 24) = 0;
            *(void *)(v27 + 8) = 0;
            *(_OWORD *)(v27 + 8) = *(_OWORD *)(v28 + 8);
            *(void *)(v27 + 24) = *(void *)(v28 + 24);
            *(void *)(v28 + 16) = 0;
            *(void *)(v28 + 24) = 0;
            *(void *)(v28 + 8) = 0;
            *(unsigned char *)(*(void *)result + i) = 0x80;
            *(unsigned char *)((*(void *)(result + 24) & (i - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = 0x80;
          }
          else
          {
            long long v29 = (int *)(v26 + v18);
            int v30 = *v29;
            uint64_t v31 = *((void *)v29 + 3);
            long long v32 = *(_OWORD *)(v29 + 2);
            *((void *)v29 + 2) = 0;
            *((void *)v29 + 3) = 0;
            *((void *)v29 + 1) = 0;
            uint64_t v33 = *(void *)(result + 8);
            uint64_t v34 = v33 + v18;
            uint64_t v35 = v33 + 32 * v16;
            *(_DWORD *)uint64_t v34 = *(_DWORD *)v35;
            *(void *)(v34 + 8) = 0;
            *(void *)(v34 + 16) = 0;
            *(void *)(v34 + 24) = 0;
            *(_OWORD *)(v34 + 8) = *(_OWORD *)(v35 + 8);
            *(void *)(v34 + 24) = *(void *)(v35 + 24);
            *(void *)(v35 + 16) = 0;
            *(void *)(v35 + 24) = 0;
            *(void *)(v35 + 8) = 0;
            uint64_t v36 = *(void *)(result + 8) + 32 * v16;
            *(_DWORD *)uint64_t v36 = v30;
            *(_OWORD *)(v36 + 8) = v32;
            *(void *)(v36 + 24) = v31;
            --i;
          }
        }
        else
        {
          v17->i8[i] = v21 & 0x7F;
          *(unsigned char *)((*(void *)(result + 24) & (i - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v21 & 0x7F;
        }
      }
      uint64_t v13 = *(void *)(result + 24);
    }
    uint64_t v37 = i - (i >> 3);
    BOOL v38 = i == 7;
    uint64_t v39 = 6;
    if (!v38) {
      uint64_t v39 = v37;
    }
    *(void *)(result + 40) = v39 - *(void *)(result + 16);
  }
  else
  {
    *(void *)(result + 40) = -*(void *)(result + 16);
  }
  return result;
}

void sub_EE2954(void **a1, unint64_t a2, _OWORD *a3)
{
  unint64_t v7 = a1[1];
  uint64_t v6 = a1[2];
  if (a2 <= (v6 - (unsigned char *)v7) >> 4)
  {
    if (a2)
    {
      uint64_t v13 = 16 * a2;
      unint64_t v14 = (char *)&v7[2 * a2];
      do
      {
        *(_OWORD *)unint64_t v7 = *a3;
        v7 += 2;
        v13 -= 16;
      }
      while (v13);
      unint64_t v7 = v14;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = ((char *)v7 - (unsigned char *)*a1) >> 4;
    if ((v8 + a2) >> 60) {
      sub_2E00();
    }
    uint64_t v9 = v6 - (unsigned char *)*a1;
    uint64_t v10 = v9 >> 3;
    if (v9 >> 3 <= v8 + a2) {
      uint64_t v10 = v8 + a2;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11)
    {
      if (v11 >> 60) {
        sub_188D718();
      }
      int8x16_t v12 = (char *)operator new(16 * v11);
    }
    else
    {
      int8x16_t v12 = 0;
    }
    unint64_t v15 = &v12[16 * v8];
    uint64_t v16 = 16 * a2;
    unint64_t v17 = &v15[16 * a2];
    uint64_t v18 = v15;
    do
    {
      *(_OWORD *)uint64_t v18 = *a3;
      v18 += 16;
      v16 -= 16;
    }
    while (v16);
    uint64_t v19 = *a1;
    if (v7 != *a1)
    {
      do
      {
        uint64_t v20 = *(v7 - 2);
        v7 -= 2;
        int v21 = *((_DWORD *)v7 + 2);
        *((void *)v15 - 2) = v20;
        v15 -= 16;
        *((_DWORD *)v15 + 2) = v21;
      }
      while (v7 != v19);
      unint64_t v7 = *a1;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = &v12[16 * v11];
    if (v7)
    {
      operator delete(v7);
    }
  }
}

uint64_t sub_EE2AA4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)a1;
  *(void *)&v17[0] = a2;
  *((void *)&v17[0] + 1) = a2 + 1;
  sub_EE2C2C(v3, a2, (void **)v17, (_DWORD **)v17 + 1, (uint64_t)&v18);
  long long v4 = v20;
  long long v5 = v19;
  v17[1] = v19;
  v17[2] = v20;
  v17[0] = v18;
  *(_OWORD *)(a1 + 8) = v18;
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 40) = v4;
  uint64_t v6 = (void *)(*(void *)(a1 + 24) + 1);
  uint64_t v7 = *(void *)(a1 + 32) + 16;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  if (*(char *)v6 <= -2)
  {
    do
    {
      unint64_t v8 = (__clz(__rbit64(((*v6 >> 7) & ~*v6 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      uint64_t v6 = (void *)((char *)v6 + v8);
      v7 += 16 * v8;
      *(void *)(a1 + 24) = v6;
      *(void *)(a1 + 32) = v7;
    }
    while (*(char *)v6 < -1);
  }
  if (v6 != *(void **)(a1 + 40)) {
    return a1;
  }
  uint64_t v10 = (void *)(a1 + 8);
  int8x16_t v12 = *(void **)(a1 + 8);
  unint64_t v11 = *(void **)(a1 + 16);
  while (1)
  {
    *uint64_t v10 = v12 + 6;
    if (v12 + 6 == v11) {
      break;
    }
    unint64_t v14 = (void *)v12[6];
    uint64_t v15 = v12[7];
    if (*(char *)v14 <= -2)
    {
      do
      {
        unint64_t v16 = (__clz(__rbit64(((*v14 >> 7) & ~*v14 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        unint64_t v14 = (void *)((char *)v14 + v16);
        v15 += 16 * v16;
      }
      while (*(char *)v14 < -1);
    }
    *(void *)(a1 + 24) = v14;
    *(void *)(a1 + 32) = v15;
    uint64_t v13 = (void *)(v12[6] + v12[9]);
    *(void *)(a1 + 40) = v13;
    v12 += 6;
    if (v14 != v13) {
      return a1;
    }
  }
  *uint64_t v10 = 0;
  return a1;
}

unint64_t sub_EE2C2C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void **a3@<X3>, _DWORD **a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v9 = 0;
  uint64_t v10 = *a2;
  unint64_t v11 = 0x2127599BF4325C37 * (*a2 ^ ((unint64_t)*a2 >> 23));
  unint64_t v12 = (v11 ^ ~(v11 >> 47)) + ((v11 ^ (v11 >> 47)) << 21);
  unint64_t v13 = 21 * ((265 * (v12 ^ (v12 >> 24))) ^ ((265 * (v12 ^ (v12 >> 24))) >> 14));
  unint64_t v14 = 2147483649u * (v13 ^ (v13 >> 28));
  uint64_t v15 = (uint64_t *)(a1
                  + 48
                  * (((((unsigned __int16)(v13 ^ (v13 >> 28)) >> 8) ^ ((-2147483647
                                                                                       * (v13 ^ (v13 >> 28))) >> 16)) ^ ((-2147483647 * (v13 ^ (v13 >> 28))) >> 24)) & 0xF));
  unint64_t v16 = v14 >> 7;
  uint64_t v17 = v15[3];
  uint64_t v18 = *v15;
  while (1)
  {
    unint64_t v19 = v16 & v17;
    uint64_t v20 = *(void *)(v18 + (v16 & v17));
    unint64_t v21 = ((v20 ^ (0x101010101010101 * (v14 & 0x7F))) - 0x101010101010101) & ~(v20 ^ (0x101010101010101
                                                                                        * (v14 & 0x7F))) & 0x8080808080808080;
    if (v21) {
      break;
    }
LABEL_6:
    if ((v20 & (~v20 << 6) & 0x8080808080808080) != 0)
    {
      unint64_t result = sub_EE197C(v15, v14);
      uint64_t v18 = *v15;
      uint64_t v22 = v15[1];
      unint64_t v25 = v22 + 16 * result;
      uint64_t v26 = *a4;
      *(void *)unint64_t v25 = **a3;
      *(_DWORD *)(v25 + 8) = *v26;
      uint64_t v17 = v15[3];
      char v24 = 1;
      goto LABEL_10;
    }
    v9 += 8;
    unint64_t v16 = v9 + v19;
  }
  uint64_t v22 = v15[1];
  while (1)
  {
    unint64_t result = (v19 + (__clz(__rbit64(v21)) >> 3)) & v17;
    if (*(void *)(v22 + 16 * result) == v10) {
      break;
    }
    v21 &= v21 - 1;
    if (!v21) {
      goto LABEL_6;
    }
  }
  char v24 = 0;
LABEL_10:
  *(void *)a5 = v15;
  *(void *)(a5 + 8) = a1 + 768;
  *(void *)(a5 + 16) = v18 + result;
  *(void *)(a5 + 24) = v22 + 16 * result;
  *(void *)(a5 + 32) = v18 + v17;
  *(unsigned char *)(a5 + 48) = v24;
  return result;
}

char *sub_EE2DAC(char **a1, _OWORD *a2)
{
  long long v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v15 = *a1;
    uint64_t v16 = 0x2E8BA2E8BA2E8BA3 * ((v5 - *a1) >> 4);
    unint64_t v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) > 0x1745D1745D1745DLL) {
      sub_2E00();
    }
    unint64_t v18 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v4 - (void)v15) >> 4);
    if (2 * v18 > v17) {
      unint64_t v17 = 2 * v18;
    }
    if (v18 >= 0xBA2E8BA2E8BA2ELL) {
      unint64_t v19 = 0x1745D1745D1745DLL;
    }
    else {
      unint64_t v19 = v17;
    }
    if (v19)
    {
      if (v19 > 0x1745D1745D1745DLL) {
        sub_188D718();
      }
      uint64_t v20 = (char *)operator new(176 * v19);
    }
    else
    {
      uint64_t v20 = 0;
    }
    long long v21 = a2[9];
    uint64_t v22 = &v20[176 * v16];
    *((_OWORD *)v22 + 8) = a2[8];
    *((_OWORD *)v22 + 9) = v21;
    *((_OWORD *)v22 + 10) = a2[10];
    long long v23 = a2[5];
    *((_OWORD *)v22 + 4) = a2[4];
    *((_OWORD *)v22 + 5) = v23;
    long long v24 = a2[7];
    *((_OWORD *)v22 + 6) = a2[6];
    *((_OWORD *)v22 + 7) = v24;
    long long v25 = a2[1];
    *(_OWORD *)uint64_t v22 = *a2;
    *((_OWORD *)v22 + 1) = v25;
    long long v27 = a2[2];
    long long v26 = a2[3];
    unint64_t v14 = v22 + 176;
    *((_OWORD *)v22 + 2) = v27;
    *((_OWORD *)v22 + 3) = v26;
    if (v5 != v15)
    {
      do
      {
        long long v28 = *((_OWORD *)v5 - 11);
        long long v29 = *((_OWORD *)v5 - 9);
        *((_OWORD *)v22 - 10) = *((_OWORD *)v5 - 10);
        *((_OWORD *)v22 - 9) = v29;
        *((_OWORD *)v22 - 11) = v28;
        long long v30 = *((_OWORD *)v5 - 8);
        long long v31 = *((_OWORD *)v5 - 7);
        long long v32 = *((_OWORD *)v5 - 5);
        *((_OWORD *)v22 - 6) = *((_OWORD *)v5 - 6);
        *((_OWORD *)v22 - 5) = v32;
        *((_OWORD *)v22 - 8) = v30;
        *((_OWORD *)v22 - 7) = v31;
        long long v33 = *((_OWORD *)v5 - 4);
        long long v34 = *((_OWORD *)v5 - 3);
        long long v35 = *((_OWORD *)v5 - 1);
        *((_OWORD *)v22 - 2) = *((_OWORD *)v5 - 2);
        *((_OWORD *)v22 - 1) = v35;
        *((_OWORD *)v22 - 4) = v33;
        *((_OWORD *)v22 - 3) = v34;
        v22 -= 176;
        v5 -= 176;
      }
      while (v5 != v15);
      long long v5 = *a1;
    }
    *a1 = v22;
    a1[1] = v14;
    a1[2] = &v20[176 * v19];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    long long v6 = *a2;
    long long v7 = a2[2];
    *((_OWORD *)v5 + 1) = a2[1];
    *((_OWORD *)v5 + 2) = v7;
    *(_OWORD *)long long v5 = v6;
    long long v8 = a2[3];
    long long v9 = a2[4];
    long long v10 = a2[6];
    *((_OWORD *)v5 + 5) = a2[5];
    *((_OWORD *)v5 + 6) = v10;
    *((_OWORD *)v5 + 3) = v8;
    *((_OWORD *)v5 + 4) = v9;
    long long v11 = a2[7];
    long long v12 = a2[8];
    long long v13 = a2[10];
    *((_OWORD *)v5 + 9) = a2[9];
    *((_OWORD *)v5 + 10) = v13;
    *((_OWORD *)v5 + 7) = v11;
    *((_OWORD *)v5 + 8) = v12;
    unint64_t v14 = v5 + 176;
  }
  a1[1] = v14;
  return v14 - 176;
}

void sub_EE2F68()
{
  unk_25FC8D7 = 16641;
  word_25FC8C0 = 65;
  byte_25FC8EF = 1;
  byte_25FC8D9 = 0;
}

void sub_EE2F90()
{
  unk_25FC907 = 16641;
  word_25FC8F0 = 65;
  byte_25FC91F = 1;
  byte_25FC909 = 0;
}

uint64_t *sub_EE2FB8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  sub_F170F0(a1, a2);
  a1[6] = sub_374DFC(a2, a3);
  __p = 0;
  long long v12 = 0;
  uint64_t v13 = 0;
  long long v6 = sub_374CDC((uint64_t)a2, (uint64_t)&qword_25FC950, (uint64_t *)&__p);
  sub_EE50BC((uint64_t)(a1 + 7), v6);
  long long v7 = (void **)__p;
  if (__p)
  {
    long long v8 = v12;
    long long v9 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      long long v9 = __p;
    }
    long long v12 = v7;
    operator delete(v9);
  }
  return a1;
}

void sub_EE307C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  long long v12 = *(void **)(v10 + 24);
  if (v12)
  {
    *(void *)(v10 + 32) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

double sub_EE30AC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  long long v55 = 0uLL;
  unint64_t v56 = 0;
  if (a4)
  {
    long long v7 = (uint64_t *)nullsub_1(a2);
    uint64_t v8 = v7[1];
    uint64_t v28 = *v7;
    while (v8 != v28)
    {
      v8 -= 472;
      if (*(unsigned char *)(a1 + 56)) {
        sub_EE36E4(a1, v8, a3, a4, (uint64_t)&v31);
      }
      else {
        sub_EE3A10((uint64_t *)a1, v8, a3, a4, (uint64_t)&v31);
      }
      int v13 = HIDWORD(v31);
      if (v31 < 0) {
        char v14 = -5;
      }
      else {
        char v14 = 5;
      }
      uint64_t v15 = *((void *)&v55 + 1);
      if (*((void *)&v55 + 1) < v56)
      {
        uint64_t v9 = v31;
        *(_DWORD *)(*((void *)&v55 + 1) + 8) = v32;
        *(void *)uint64_t v15 = v9;
        *(void *)(v15 + 16) = 0;
        *(void *)(v15 + 24) = 0;
        *(void *)(v15 + 32) = 0;
        *(void *)(v15 + 40) = 0;
        *(_OWORD *)(v15 + 16) = v33;
        *(void *)(v15 + 32) = v34;
        long long v33 = 0uLL;
        uint64_t v34 = 0;
        *(void *)(v15 + 48) = 0;
        *(void *)(v15 + 56) = 0;
        *(_OWORD *)(v15 + 40) = v35;
        long long v35 = 0uLL;
        *(void *)(v15 + 56) = v36;
        *(void *)(v15 + 64) = 0;
        uint64_t v36 = 0;
        *(void *)(v15 + 72) = 0;
        *(void *)(v15 + 80) = 0;
        *(_OWORD *)(v15 + 64) = v37;
        long long v37 = 0uLL;
        *(void *)(v15 + 80) = v38;
        *(void *)(v15 + 88) = 0;
        uint64_t v38 = 0;
        *(void *)(v15 + 96) = 0;
        *(void *)(v15 + 104) = 0;
        *(_OWORD *)(v15 + 88) = v39;
        long long v39 = 0uLL;
        *(void *)(v15 + 104) = v40;
        *(void *)(v15 + 112) = 0;
        uint64_t v40 = 0;
        *(void *)(v15 + 120) = 0;
        *(void *)(v15 + 128) = 0;
        *(_OWORD *)(v15 + 112) = v41;
        long long v41 = 0uLL;
        *(void *)(v15 + 128) = v42;
        *(void *)(v15 + 136) = 0;
        uint64_t v42 = 0;
        *(void *)(v15 + 144) = 0;
        *(void *)(v15 + 152) = 0;
        *(_OWORD *)(v15 + 136) = v43;
        long long v43 = 0uLL;
        *(void *)(v15 + 152) = v44;
        *(void *)(v15 + 160) = 0;
        uint64_t v44 = 0;
        *(void *)(v15 + 168) = 0;
        *(void *)(v15 + 176) = 0;
        *(_OWORD *)(v15 + 160) = v45;
        long long v45 = 0uLL;
        *(void *)(v15 + 176) = v46;
        *(void *)(v15 + 184) = 0;
        uint64_t v46 = 0;
        *(void *)(v15 + 192) = 0;
        *(void *)(v15 + 200) = 0;
        *(_OWORD *)(v15 + 184) = v47;
        long long v47 = 0uLL;
        *(void *)(v15 + 200) = v48;
        *(void *)(v15 + 208) = 0;
        uint64_t v48 = 0;
        *(void *)(v15 + 216) = 0;
        *(void *)(v15 + 224) = 0;
        *(_OWORD *)(v15 + 208) = v49;
        long long v49 = 0uLL;
        *(void *)(v15 + 224) = v50;
        *(void *)(v15 + 232) = 0;
        uint64_t v50 = 0;
        *(void *)(v15 + 240) = 0;
        *(void *)(v15 + 248) = 0;
        *(_OWORD *)(v15 + 232) = v51;
        *(void *)(v15 + 248) = v52;
        long long v51 = 0uLL;
        uint64_t v52 = 0;
        long long v10 = v54;
        *(_OWORD *)(v15 + 256) = v53;
        *(_OWORD *)(v15 + 272) = v10;
        uint64_t v11 = v15 + 288;
      }
      else
      {
        uint64_t v11 = sub_EE6BB8((uint64_t *)&v55, (uint64_t)&v31);
      }
      int v12 = -103 * (char)(v14 + v13 - 10 * (((1717986919 * v13) >> 34) + (1717986919 * v13 < 0)));
      a3 += v13 / -10 + ((v12 >> 15) & 1) + (v12 >> 10);
      *((void *)&v55 + 1) = v11;
      sub_3B0290(&v31);
    }
    uint64_t v31 = v55;
    if ((void)v55 != *((void *)&v55 + 1))
    {
      uint64_t v57 = (uint64_t *)(*((void *)&v55 + 1) - 288);
      if (*((void *)&v55 + 1) - 288 > (unint64_t)v55)
      {
        do
        {
          sub_EE7018(&v31, &v57);
          v31 += 288;
          v57 -= 36;
        }
        while (v31 < (unint64_t)v57);
      }
    }
  }
  else
  {
    uint64_t v16 = (uint64_t *)nullsub_1(a2);
    uint64_t v17 = *v16;
    uint64_t v30 = v16[1];
    if (*v16 != v30)
    {
      do
      {
        int v22 = a3;
        if (*(unsigned char *)(a1 + 56)) {
          sub_EE36E4(a1, v17, a3, 0, (uint64_t)&v31);
        }
        else {
          sub_EE3A10((uint64_t *)a1, v17, a3, 0, (uint64_t)&v31);
        }
        int v23 = HIDWORD(v31);
        if (v31 < 0) {
          char v24 = -5;
        }
        else {
          char v24 = 5;
        }
        uint64_t v25 = *((void *)&v55 + 1);
        if (*((void *)&v55 + 1) < v56)
        {
          uint64_t v18 = v31;
          *(_DWORD *)(*((void *)&v55 + 1) + 8) = v32;
          *(void *)uint64_t v25 = v18;
          *(void *)(v25 + 16) = 0;
          *(void *)(v25 + 24) = 0;
          *(void *)(v25 + 32) = 0;
          *(void *)(v25 + 40) = 0;
          *(_OWORD *)(v25 + 16) = v33;
          *(void *)(v25 + 32) = v34;
          long long v33 = 0uLL;
          uint64_t v34 = 0;
          *(void *)(v25 + 48) = 0;
          *(void *)(v25 + 56) = 0;
          *(_OWORD *)(v25 + 40) = v35;
          long long v35 = 0uLL;
          *(void *)(v25 + 56) = v36;
          *(void *)(v25 + 64) = 0;
          uint64_t v36 = 0;
          *(void *)(v25 + 72) = 0;
          *(void *)(v25 + 80) = 0;
          *(_OWORD *)(v25 + 64) = v37;
          long long v37 = 0uLL;
          *(void *)(v25 + 80) = v38;
          *(void *)(v25 + 88) = 0;
          uint64_t v38 = 0;
          *(void *)(v25 + 96) = 0;
          *(void *)(v25 + 104) = 0;
          *(_OWORD *)(v25 + 88) = v39;
          long long v39 = 0uLL;
          *(void *)(v25 + 104) = v40;
          *(void *)(v25 + 112) = 0;
          uint64_t v40 = 0;
          *(void *)(v25 + 120) = 0;
          *(void *)(v25 + 128) = 0;
          *(_OWORD *)(v25 + 112) = v41;
          long long v41 = 0uLL;
          *(void *)(v25 + 128) = v42;
          *(void *)(v25 + 136) = 0;
          uint64_t v42 = 0;
          *(void *)(v25 + 144) = 0;
          *(void *)(v25 + 152) = 0;
          *(_OWORD *)(v25 + 136) = v43;
          long long v43 = 0uLL;
          *(void *)(v25 + 152) = v44;
          *(void *)(v25 + 160) = 0;
          uint64_t v44 = 0;
          *(void *)(v25 + 168) = 0;
          *(void *)(v25 + 176) = 0;
          *(_OWORD *)(v25 + 160) = v45;
          long long v45 = 0uLL;
          *(void *)(v25 + 176) = v46;
          *(void *)(v25 + 184) = 0;
          uint64_t v46 = 0;
          *(void *)(v25 + 192) = 0;
          *(void *)(v25 + 200) = 0;
          *(_OWORD *)(v25 + 184) = v47;
          long long v47 = 0uLL;
          *(void *)(v25 + 200) = v48;
          *(void *)(v25 + 208) = 0;
          uint64_t v48 = 0;
          *(void *)(v25 + 216) = 0;
          *(void *)(v25 + 224) = 0;
          *(_OWORD *)(v25 + 208) = v49;
          long long v49 = 0uLL;
          *(void *)(v25 + 224) = v50;
          *(void *)(v25 + 232) = 0;
          uint64_t v50 = 0;
          *(void *)(v25 + 240) = 0;
          *(void *)(v25 + 248) = 0;
          *(_OWORD *)(v25 + 232) = v51;
          *(void *)(v25 + 248) = v52;
          long long v51 = 0uLL;
          uint64_t v52 = 0;
          long long v19 = v54;
          *(_OWORD *)(v25 + 256) = v53;
          *(_OWORD *)(v25 + 272) = v19;
          uint64_t v20 = v25 + 288;
        }
        else
        {
          uint64_t v20 = sub_EE6BB8((uint64_t *)&v55, (uint64_t)&v31);
        }
        int v21 = 103 * (char)(v24 + v23 % 10);
        a3 = v23 / 10 + v22 + ((v21 >> 15) & 1) + (v21 >> 10);
        *((void *)&v55 + 1) = v20;
        sub_3B0290(&v31);
        v17 += 472;
      }
      while (v17 != v30);
    }
  }
  double result = *(double *)&v55;
  *(_OWORD *)a5 = v55;
  *(void *)(a5 + 16) = v56;
  return result;
}

void sub_EE3674(_Unwind_Exception *a1)
{
  sub_3C7768((void **)(v1 - 128));
  _Unwind_Resume(a1);
}

void sub_EE3688(_Unwind_Exception *a1)
{
  sub_3C7768((void **)(v1 - 128));
  _Unwind_Resume(a1);
}

void sub_EE369C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_3B0290((uint64_t *)va);
  sub_3C7768((void **)(v11 - 128));
  _Unwind_Resume(a1);
}

void sub_EE36BC(_Unwind_Exception *a1)
{
  sub_3C7768((void **)(v1 - 128));
  _Unwind_Resume(a1);
}

void sub_EE36D0(_Unwind_Exception *a1)
{
  sub_3C7768((void **)(v1 - 128));
  _Unwind_Resume(a1);
}

void *sub_EE36E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  *(void *)a5 = 0x8000000080000000;
  *(_OWORD *)(a5 + 16) = 0u;
  long long v10 = (void **)(a5 + 16);
  *(_DWORD *)(a5 + 8) = 0x7FFFFFFF;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 128) = 0u;
  *(_OWORD *)(a5 + 144) = 0u;
  *(_OWORD *)(a5 + 160) = 0u;
  *(_OWORD *)(a5 + 176) = 0u;
  *(_OWORD *)(a5 + 192) = 0u;
  *(_OWORD *)(a5 + 208) = 0u;
  *(_OWORD *)(a5 + 224) = 0u;
  *(_OWORD *)(a5 + 240) = 0u;
  *(void *)&long long v11 = 0x8000000080000000;
  *((void *)&v11 + 1) = 0x8000000080000000;
  *(_OWORD *)(a5 + 256) = v11;
  *(_OWORD *)(a5 + 272) = v11;
  unint64_t v32 = sub_EADC88(a2);
  uint64_t v12 = sub_69134(a2);
  int v13 = sub_F17140((uint64_t *)a1, (uint64_t *)&v32, v12, *(void *)(a1 + 48)) >> 32;
  unint64_t v32 = sub_EADCD0(a2);
  uint64_t v14 = sub_EADAD0(a2);
  unint64_t v15 = sub_F17140((uint64_t *)a1, (uint64_t *)&v32, v14, *(void *)(a1 + 48));
  *(_DWORD *)(a5 + 256) = v13;
  *(_DWORD *)(a5 + 260) = HIDWORD(v15);
  *(_DWORD *)(a5 + 4) = HIDWORD(v15) + v13;
  if (sub_EADC78(a2))
  {
    uint64_t v16 = (int **)sub_EADD1C(a2);
    unsigned int v17 = sub_EAE418(a2);
    LODWORD(v32) = sub_EE3ECC(a1, v16, v17);
    *(_DWORD *)(a5 + 4) += v32;
    sub_3B79D0(v10, &v32);
  }
  else
  {
    uint64_t v18 = sub_5231C(a2);
    long long v19 = *(int ***)v18;
    uint64_t v20 = *(int ***)(v18 + 8);
    if (*(int ***)v18 != v20)
    {
      unsigned int v21 = sub_EAE428(a2);
      int v22 = sub_EE3ECC(a1, v19, v21);
      if (*(unsigned char *)(a1 + 216))
      {
        int v23 = sub_EE4760(a1, v19);
        if (v23 == 0x7FFFFFFF || v22 == 0x7FFFFFFF) {
          int v22 = 0x7FFFFFFF;
        }
        else {
          v22 += v23;
        }
      }
      LODWORD(v32) = v22;
      *(_DWORD *)(a5 + 4) += v22;
      sub_3B79D0(v10, &v32);
      for (unint64_t i = v19 + 11; i != v20; i += 11)
      {
        int v26 = sub_EE3ECC(a1, i, 0x3B9ACA00u);
        if (*(unsigned char *)(a1 + 216))
        {
          int v27 = sub_EE4760(a1, i);
          if (v27 == 0x7FFFFFFF || v26 == 0x7FFFFFFF) {
            int v26 = 0x7FFFFFFF;
          }
          else {
            v26 += v27;
          }
        }
        LODWORD(v32) = v26;
        *(_DWORD *)(a5 + 4) += v26;
        sub_3B79D0(v10, &v32);
      }
    }
    long long v29 = (int **)sub_EADD34(a2);
    unsigned int v30 = sub_486A4C(a2);
    LODWORD(v32) = sub_EE3ECC(a1, v29, v30);
    *(_DWORD *)(a5 + 4) += v32;
    sub_3B79D0(v10, &v32);
  }
  return sub_EE3D74(a1, a3, a4, a5);
}

void sub_EE3984(_Unwind_Exception *a1)
{
  sub_3B0290(v1);
  _Unwind_Resume(a1);
}

void sub_EE3998(_Unwind_Exception *a1)
{
  sub_3B0290(v1);
  _Unwind_Resume(a1);
}

void sub_EE39AC(_Unwind_Exception *a1)
{
  sub_3B0290(v1);
  _Unwind_Resume(a1);
}

void sub_EE39C0(_Unwind_Exception *a1)
{
  sub_3B0290(v1);
  _Unwind_Resume(a1);
}

void sub_EE39D4(_Unwind_Exception *a1)
{
  sub_3B0290(v1);
  _Unwind_Resume(a1);
}

void sub_EE39E8(_Unwind_Exception *a1)
{
  sub_3B0290(v1);
  _Unwind_Resume(a1);
}

void sub_EE39FC(_Unwind_Exception *a1)
{
  sub_3B0290(v1);
  _Unwind_Resume(a1);
}

void *sub_EE3A10@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  *(void *)a5 = 0x8000000080000000;
  *(_OWORD *)(a5 + 16) = 0u;
  long long v10 = (void **)(a5 + 16);
  *(_DWORD *)(a5 + 8) = 0x7FFFFFFF;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 128) = 0u;
  *(_OWORD *)(a5 + 144) = 0u;
  *(_OWORD *)(a5 + 160) = 0u;
  *(_OWORD *)(a5 + 176) = 0u;
  *(_OWORD *)(a5 + 192) = 0u;
  *(_OWORD *)(a5 + 208) = 0u;
  *(_OWORD *)(a5 + 224) = 0u;
  *(_OWORD *)(a5 + 240) = 0u;
  *(void *)&long long v11 = 0x8000000080000000;
  *((void *)&v11 + 1) = 0x8000000080000000;
  *(_OWORD *)(a5 + 256) = v11;
  *(_OWORD *)(a5 + 272) = v11;
  unint64_t v25 = sub_EADC88(a2);
  uint64_t v12 = sub_69134(a2);
  int v13 = sub_F17140(a1, (uint64_t *)&v25, v12, a1[6]) >> 32;
  unint64_t v25 = sub_EADCD0(a2);
  uint64_t v14 = sub_EADAD0(a2);
  unint64_t v15 = sub_F17140(a1, (uint64_t *)&v25, v14, a1[6]);
  *(_DWORD *)(a5 + 256) = v13;
  *(_DWORD *)(a5 + 260) = HIDWORD(v15);
  *(_DWORD *)(a5 + 4) = HIDWORD(v15) + v13;
  if (sub_EADC78(a2))
  {
    uint64_t v16 = (int **)sub_EADD1C(a2);
    unsigned int v17 = sub_EAE418(a2);
    LODWORD(v25) = sub_F17510(a1, v16, v17, a1[6]) >> 32;
    *(_DWORD *)(a5 + 4) += v25;
    sub_3B79D0(v10, &v25);
  }
  else
  {
    uint64_t v18 = sub_5231C(a2);
    long long v19 = *(int ***)v18;
    uint64_t v20 = *(int ***)(v18 + 8);
    if (*(int ***)v18 != v20)
    {
      unsigned int v21 = sub_EAE428(a2);
      LODWORD(v25) = sub_F178C0(a1, v19, v21, a1[6]) >> 32;
      *(_DWORD *)(a5 + 4) += v25;
      sub_3B79D0(v10, &v25);
      while (1)
      {
        v19 += 11;
        if (v19 == v20) {
          break;
        }
        LODWORD(v25) = sub_F178C0(a1, v19, 0x3B9ACA00u, a1[6]) >> 32;
        *(_DWORD *)(a5 + 4) += v25;
        sub_3B79D0(v10, &v25);
      }
    }
    int v22 = (int **)sub_EADD34(a2);
    unsigned int v23 = sub_486A4C(a2);
    LODWORD(v25) = sub_F17510(a1, v22, v23, a1[6]) >> 32;
    *(_DWORD *)(a5 + 4) += v25;
    sub_3B79D0(v10, &v25);
  }
  return sub_EE3D74((uint64_t)a1, a3, a4, a5);
}

void sub_EE3C98(_Unwind_Exception *a1)
{
  sub_3B0290(v1);
  _Unwind_Resume(a1);
}

void sub_EE3CAC(_Unwind_Exception *a1)
{
  sub_3B0290(v1);
  _Unwind_Resume(a1);
}

void sub_EE3CC0(_Unwind_Exception *a1)
{
  sub_3B0290(v1);
  _Unwind_Resume(a1);
}

void sub_EE3CD4(_Unwind_Exception *a1)
{
  sub_3B0290(v1);
  _Unwind_Resume(a1);
}

void sub_EE3CE8(_Unwind_Exception *a1)
{
  sub_3B0290(v1);
  _Unwind_Resume(a1);
}

void sub_EE3CFC(_Unwind_Exception *a1)
{
  sub_3B0290(v1);
  _Unwind_Resume(a1);
}

void sub_EE3D10(_Unwind_Exception *a1)
{
  sub_3B0290(v1);
  _Unwind_Resume(a1);
}

void sub_EE3D24(_Unwind_Exception *a1)
{
  sub_3B0290(v1);
  _Unwind_Resume(a1);
}

void sub_EE3D38(_Unwind_Exception *a1)
{
  sub_3B0290(v1);
  _Unwind_Resume(a1);
}

void sub_EE3D4C(_Unwind_Exception *a1)
{
  sub_3B0290(v1);
  _Unwind_Resume(a1);
}

void sub_EE3D60(_Unwind_Exception *a1)
{
  sub_3B0290(v1);
  _Unwind_Resume(a1);
}

void *sub_EE3D74(uint64_t a1, int a2, int a3, uint64_t a4)
{
  *(_DWORD *)(a4 + 264) = *(_DWORD *)(a4 + 4);
  sub_147D0((void *)(a4 + 40), *(char **)(a4 + 16), *(char **)(a4 + 24), (uint64_t)(*(void *)(a4 + 24) - *(void *)(a4 + 16)) >> 2);
  *(_DWORD *)(a4 + 268) = *(_DWORD *)(a4 + 4);
  double result = sub_147D0((void *)(a4 + 64), *(char **)(a4 + 16), *(char **)(a4 + 24), (uint64_t)(*(void *)(a4 + 24) - *(void *)(a4 + 16)) >> 2);
  int v9 = *(_DWORD *)(a4 + 4);
  *(_DWORD *)(a4 + 272) = v9;
  *(_DWORD *)(a4 + 280) = v9;
  double v10 = *(double *)(a1 + 64) * (double)v9;
  if (v10 >= 0.0)
  {
    if (v10 < 4.50359963e15)
    {
      uint64_t v11 = (uint64_t)(v10 + v10) + 1;
LABEL_8:
      double v10 = (double)(v11 >> 1);
    }
  }
  else if (v10 > -4.50359963e15)
  {
    uint64_t v11 = (uint64_t)(v10 + v10);
    if (v11 >= 1) {
      --v11;
    }
    goto LABEL_8;
  }
  *(_DWORD *)(a4 + 276) = (int)v10;
  if (a3 == 1 && a2 != 0x7FFFFFFF)
  {
    int v12 = v9 / -10;
    int v13 = v9 % 10;
    if (v9 < 0) {
      char v14 = -5;
    }
    else {
      char v14 = 5;
    }
    a2 += v12 + (((-103 * (char)(v14 + v13)) >> 15) & 1) + ((-103 * (char)(v14 + v13)) >> 10);
  }
  *(_DWORD *)a4 = a2;
  return result;
}

uint64_t sub_EE3ECC(uint64_t a1, int **a2, unsigned int a3)
{
  long long v6 = *a2;
  long long v7 = (unsigned __int16 *)((char *)*a2 - **a2);
  unsigned int v8 = *v7;
  if (v8 >= 0xB && v7[5] && (*((unsigned char *)v6 + v7[5]) & 8) != 0)
  {
    int v10 = 1;
    goto LABEL_14;
  }
  if (!*((unsigned char *)a2 + 38))
  {
    if (v8 >= 0x47)
    {
      unsigned int v9 = v7[35];
      if (v9)
      {
        int v10 = 1;
        goto LABEL_11;
      }
    }
LABEL_12:
    int v10 = 2;
    goto LABEL_14;
  }
  if (v8 < 0x47) {
    goto LABEL_12;
  }
  unsigned int v9 = v7[35];
  int v10 = 2;
  if (v9) {
LABEL_11:
  }
    int v10 = 2 * ((*(int *)((char *)v6 + v9) & v10) == 0);
LABEL_14:
  double v11 = sub_EE4D10(a1, a2, v10);
  char v14 = *a2;
  unint64_t v15 = (unsigned __int16 *)((char *)*a2 - **a2);
  unsigned int v16 = *v15;
  if (*((unsigned char *)a2 + 38))
  {
    if (v16 >= 0x57)
    {
      if (v15[43])
      {
        unsigned int v17 = (unsigned int *)((char *)v14 + v15[43]);
        uint64_t v18 = (int *)((char *)v17 + *v17);
        long long v19 = (unsigned __int16 *)((char *)v18 - *v18);
        double v20 = 0.0;
        double v21 = 0.0;
        if (*v19 >= 7u)
        {
          uint64_t v22 = v19[3];
          if (v22)
          {
            LOWORD(v21) = *(_WORD *)((char *)v18 + v22);
            double v21 = ((double)*(unint64_t *)&v21 + (double)*(unint64_t *)&v21) / 65535.0;
          }
        }
        double v23 = v11 * v21 + 1.0;
        char v24 = (int *)((char *)v17 + *v17);
        unint64_t v25 = (unsigned __int16 *)((char *)v24 - *v24);
        if (*v25 < 5u) {
          goto LABEL_46;
        }
        unsigned int v26 = v25[2];
        if (!v26) {
          goto LABEL_46;
        }
LABEL_45:
        LOWORD(v20) = *(_WORD *)((char *)v24 + v26);
        double v20 = (double)*(unint64_t *)&v20 + (double)*(unint64_t *)&v20;
        goto LABEL_46;
      }
      if (v16 < 0x7D)
      {
        double v20 = 0.0;
        double v23 = v11 * 0.0 + 1.0;
        if (v16 < 0x7B) {
          goto LABEL_46;
        }
        unsigned int v26 = v15[61];
        if (!v15[61]) {
          goto LABEL_35;
        }
      }
      else if (v15[62])
      {
        LOWORD(v13) = *(_WORD *)((char *)v14 + v15[62]);
        double v33 = v11 * (((double)v13 + (double)v13) / 65535.0);
        double v20 = 1.0;
        double v23 = v33 + 1.0;
        unsigned int v26 = v15[61];
        if (!v15[61])
        {
LABEL_35:
          double v20 = 0.0;
          goto LABEL_46;
        }
      }
      else
      {
        double v20 = 1.0;
        double v23 = v11 * 0.0 + 1.0;
        unsigned int v26 = v15[61];
        if (!v15[61]) {
          goto LABEL_35;
        }
      }
      char v24 = *a2;
      goto LABEL_45;
    }
LABEL_31:
    double v20 = 0.0;
    double v23 = v11 * 0.0 + 1.0;
    goto LABEL_46;
  }
  if (v16 < 0x57) {
    goto LABEL_31;
  }
  if (v15[43])
  {
    int v27 = (unsigned int *)((char *)v14 + v15[43]);
    uint64_t v28 = (int *)((char *)v27 + *v27);
    long long v29 = (unsigned __int16 *)((char *)v28 - *v28);
    double v20 = 0.0;
    double v30 = 0.0;
    if (*v29 >= 5u)
    {
      uint64_t v31 = v29[2];
      if (v31)
      {
        LOWORD(v30) = *(_WORD *)((char *)v28 + v31);
        double v30 = ((double)*(unint64_t *)&v30 + (double)*(unint64_t *)&v30) / 65535.0;
      }
    }
    double v23 = v11 * v30 + 1.0;
    char v24 = (int *)((char *)v27 + *v27);
    unint64_t v32 = (unsigned __int16 *)((char *)v24 - *v24);
    if (*v32 >= 7u)
    {
      unsigned int v26 = v32[3];
      if (v26) {
        goto LABEL_45;
      }
    }
  }
  else
  {
    double v20 = 0.0;
    double v34 = 0.0;
    if (v16 >= 0x7B && v15[61])
    {
      LOWORD(v34) = *(_WORD *)((char *)v14 + v15[61]);
      double v34 = ((double)*(unint64_t *)&v34 + (double)*(unint64_t *)&v34) / 65535.0;
    }
    double v23 = v11 * v34 + 1.0;
    if (v16 >= 0x7D)
    {
      unsigned int v26 = v15[62];
      char v24 = *a2;
      if (v15[62]) {
        goto LABEL_45;
      }
    }
  }
LABEL_46:
  double v35 = v23 / (v12 * (v20 / 65535.0) + 1.0);
  if (v10 == 2 && v16 >= 0x2F && v15[23] && *((unsigned char *)v14 + v15[23]) == 9) {
    double v35 = v35 * *(double *)(a1 + 96);
  }
  if (!*(unsigned char *)(a1 + 352)) {
    goto LABEL_63;
  }
  if (*((unsigned char *)a2 + 38))
  {
    if (v16 >= 0x47)
    {
      if (v15[35])
      {
        int v36 = *(int *)((char *)v14 + v15[35]);
        if ((v36 & 0x141510) != 0 || (v36 & 0x40) != 0) {
          goto LABEL_80;
        }
      }
      goto LABEL_64;
    }
LABEL_63:
    if (v16 < 0x2F) {
      goto LABEL_69;
    }
    goto LABEL_64;
  }
  if (v16 < 0x47) {
    goto LABEL_63;
  }
  if (v15[35])
  {
    int v37 = *(int *)((char *)v14 + v15[35]);
    if ((v37 & 0xA0A88) != 0 || (v37 & 0x20) != 0) {
      goto LABEL_80;
    }
  }
LABEL_64:
  uint64_t v38 = v15[23];
  if (v38)
  {
    unint64_t v39 = *((unsigned __int8 *)v14 + v38);
    if (!v10) {
      goto LABEL_66;
    }
    goto LABEL_70;
  }
LABEL_69:
  unint64_t v39 = 32;
  if (!v10)
  {
LABEL_66:
    uint64_t v40 = *(void *)(a1 + 304);
    if (v39 >= (*(void *)(a1 + 312) - v40) >> 3)
    {
      if (!sub_723EC(1u)) {
        goto LABEL_80;
      }
      sub_6BAC((uint64_t)v65);
      sub_188FC78(v65, (uint64_t)"Invalid FOW factor access for form_of_way_idx: ", 47);
      long long v41 = (void *)std::ostream::operator<<();
      sub_188FC78(v41, (uint64_t)" and fow_factors_cycling size: ", 31);
      std::ostream::operator<<();
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 1u);
      goto LABEL_75;
    }
LABEL_72:
    double v35 = v35 * *(double *)(v40 + 8 * v39);
    goto LABEL_80;
  }
LABEL_70:
  if (v10 != 2) {
    goto LABEL_80;
  }
  uint64_t v40 = *(void *)(a1 + 328);
  if (v39 < (*(void *)(a1 + 336) - v40) >> 3) {
    goto LABEL_72;
  }
  if (!sub_723EC(1u)) {
    goto LABEL_80;
  }
  sub_6BAC((uint64_t)v65);
  sub_188FC78(v65, (uint64_t)"Invalid FOW factor access for form_of_way_idx: ", 47);
  uint64_t v42 = (void *)std::ostream::operator<<();
  sub_188FC78(v42, (uint64_t)" and fow_factors_walking size: ", 31);
  std::ostream::operator<<();
  std::stringbuf::str();
  sub_7246C((uint64_t *)__p, 1u);
LABEL_75:
  if (v64 < 0) {
    operator delete(__p[0]);
  }
  if (v66 < 0) {
    operator delete((void *)v65[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
LABEL_80:
  long long v43 = (unsigned __int16 *)((char *)*a2 - **a2);
  double v44 = 0.0;
  if (*v43 >= 9u)
  {
    uint64_t v45 = v43[4];
    if (v45)
    {
      LODWORD(v44) = *(int *)((char *)*a2 + v45);
      double v44 = (double)*(unint64_t *)&v44;
    }
  }
  double v46 = (double)a3 / 1000000000.0 * v44;
  if (v46 >= 0.0)
  {
    if (v46 >= 4.50359963e15) {
      goto LABEL_91;
    }
    uint64_t v47 = (uint64_t)(v46 + v46) + 1;
  }
  else
  {
    if (v46 <= -4.50359963e15) {
      goto LABEL_91;
    }
    uint64_t v47 = (uint64_t)(v46 + v46);
    if (v47 >= 1) {
      --v47;
    }
  }
  double v46 = (double)(v47 >> 1);
LABEL_91:
  uint64_t v48 = (uint64_t)v46;
  if (v10 == 2)
  {
    long long v49 = (double *)(a1 + 80);
LABEL_114:
    double v52 = *v49;
    goto LABEL_115;
  }
  if (v10 != 1)
  {
    long long v49 = (double *)(a1 + 80);
    if (!v10) {
      long long v49 = (double *)(a1 + 72);
    }
    goto LABEL_114;
  }
  if (*((unsigned char *)a2 + 38)) {
    uint64_t v50 = a2 + 3;
  }
  else {
    uint64_t v50 = a2 + 2;
  }
  long long v51 = *v50;
  double v52 = -1.0;
  if (v51)
  {
    long long v53 = (unsigned __int16 *)((char *)v51 - *v51);
    if (*v53 >= 9u)
    {
      uint64_t v54 = v53[4];
      if (v54)
      {
        unsigned int v55 = *(unsigned __int16 *)((char *)v51 + v54);
        if ((unsigned __int16)(v55 - 1) <= 0xFFFDu) {
          double v52 = (double)v55 / 100.0;
        }
      }
    }
  }
  if ((*(uint64_t *)&v52 <= -1 || ((*(void *)&v52 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
    && (unint64_t)(*(void *)&v52 - 1) >= 0xFFFFFFFFFFFFFLL)
  {
    long long v49 = (double *)(a1 + 88);
    goto LABEL_114;
  }
LABEL_115:
  double v58 = (double)v48 / (v52 / 3.6) / 10.0;
  if (v58 >= 0.0)
  {
    if (v58 >= 4.50359963e15) {
      goto LABEL_123;
    }
    uint64_t v59 = (uint64_t)(v58 + v58) + 1;
  }
  else
  {
    if (v58 <= -4.50359963e15) {
      goto LABEL_123;
    }
    uint64_t v59 = (uint64_t)(v58 + v58);
    if (v59 >= 1) {
      --v59;
    }
  }
  double v58 = (double)(v59 >> 1);
LABEL_123:
  double v60 = v35 * (double)(int)v58;
  if (v60 >= 0.0)
  {
    if (v60 < 4.50359963e15)
    {
      uint64_t v61 = (uint64_t)(v60 + v60) + 1;
LABEL_130:
      double v60 = (double)(v61 >> 1);
    }
  }
  else if (v60 > -4.50359963e15)
  {
    uint64_t v61 = (uint64_t)(v60 + v60);
    if (v61 >= 1) {
      --v61;
    }
    goto LABEL_130;
  }
  return (int)v60;
}

void sub_EE46E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_EE4760(uint64_t a1, int **a2)
{
  uint64_t v2 = (char *)*a2;
  uint64_t v3 = (unsigned __int16 *)((char *)*a2 - **a2);
  unsigned int v4 = *v3;
  if (*((unsigned char *)a2 + 38))
  {
    if (v4 >= 0x47 && v3[35])
    {
      uint64_t v5 = v3[35];
      if ((*(_DWORD *)&v2[v5] & 2) == 0) {
        goto LABEL_27;
      }
      goto LABEL_9;
    }
LABEL_14:
    uint64_t v10 = 0;
    goto LABEL_15;
  }
  if (v4 < 0x47 || !v3[35]) {
    goto LABEL_14;
  }
  uint64_t v5 = v3[35];
  if ((*(_DWORD *)&v2[v5] & 1) == 0)
  {
LABEL_27:
    uint64_t v10 = 0;
    goto LABEL_29;
  }
LABEL_9:
  long long v6 = a2[5];
  long long v7 = (unsigned __int16 *)((char *)v6 - *v6);
  unsigned int v8 = *v7;
  if (*((unsigned char *)a2 + 78))
  {
    if (v8 >= 0x47)
    {
      unsigned int v9 = v7[35];
      if (v9)
      {
        if ((*(int *)((char *)v6 + v9) & 2) != 0) {
          goto LABEL_27;
        }
      }
    }
  }
  else if (v8 >= 0x47)
  {
    unsigned int v16 = v7[35];
    if (v16)
    {
      if (*(int *)((char *)v6 + v16)) {
        goto LABEL_27;
      }
    }
  }
  uint64_t v10 = *(unsigned int *)(a1 + 220);
LABEL_29:
  if (*((unsigned char *)a2 + 38)) {
    int v17 = 2;
  }
  else {
    int v17 = 1;
  }
  if ((*(_DWORD *)&v2[v5] & v17) == 0)
  {
LABEL_15:
    double v11 = a2[5];
    double v12 = (unsigned __int16 *)((char *)v11 - *v11);
    unsigned int v13 = *v12;
    if (*((unsigned char *)a2 + 78))
    {
      if (v13 < 0x47) {
        goto LABEL_33;
      }
      unsigned int v14 = v12[35];
      if (!v14 || (*(int *)((char *)v11 + v14) & 2) == 0) {
        goto LABEL_33;
      }
    }
    else
    {
      if (v13 < 0x47) {
        goto LABEL_33;
      }
      unsigned int v15 = v12[35];
      if (!v15 || (*(int *)((char *)v11 + v15) & 1) == 0) {
        goto LABEL_33;
      }
    }
    uint64_t v10 = (*(_DWORD *)(a1 + 224) + v10);
  }
LABEL_33:
  if (*((unsigned char *)a2 + 38))
  {
    if (v4 >= 0x4D)
    {
      if (!v3[38]) {
        goto LABEL_49;
      }
      if ((v2[v3[38]] & 8) == 0)
      {
        if ((*(_DWORD *)&v2[v3[38]] & 2) == 0) {
          goto LABEL_49;
        }
        goto LABEL_43;
      }
      goto LABEL_47;
    }
  }
  else if (v4 >= 0x4D)
  {
    if (!v3[38]) {
      goto LABEL_49;
    }
    if ((v2[v3[38]] & 4) == 0)
    {
      if ((*(_DWORD *)&v2[v3[38]] & 1) == 0) {
        goto LABEL_49;
      }
LABEL_43:
      uint64_t v18 = (_DWORD *)(a1 + 232);
LABEL_48:
      uint64_t v10 = (*v18 + v10);
      goto LABEL_49;
    }
LABEL_47:
    uint64_t v18 = (_DWORD *)(a1 + 228);
    goto LABEL_48;
  }
  if (v4 <= 0xA)
  {
    int v19 = 0;
    double v20 = a2[5];
    double v21 = (unsigned __int16 *)((char *)v20 - *v20);
    if (*v21 < 0xBu) {
      goto LABEL_57;
    }
    goto LABEL_54;
  }
LABEL_49:
  if (v3[5])
  {
    int v19 = 1;
    if ((v2[v3[5]] & 8) != 0) {
      goto LABEL_57;
    }
    double v20 = a2[5];
    double v21 = (unsigned __int16 *)((char *)v20 - *v20);
    if (*v21 < 0xBu) {
      goto LABEL_57;
    }
  }
  else
  {
    int v19 = 1;
    double v20 = a2[5];
    double v21 = (unsigned __int16 *)((char *)v20 - *v20);
    if (*v21 < 0xBu) {
      goto LABEL_57;
    }
  }
LABEL_54:
  uint64_t v22 = v21[5];
  if (v22 && (*((unsigned char *)v20 + v22) & 8) != 0) {
    uint64_t v10 = (*(_DWORD *)(a1 + 104) + v10);
  }
LABEL_57:
  if ((*((unsigned char *)a2 + 84) & 4) != 0) {
    return v10;
  }
  if (v4 >= 0x2F && v3[23])
  {
    unsigned int v23 = v2[v3[23]];
    BOOL v55 = v23 > 0x36;
    uint64_t v24 = (1 << v23) & 0x44000000000008;
    if (!v55 && v24 != 0)
    {
      unsigned int v26 = a2[5];
      int v27 = (unsigned __int16 *)((char *)v26 - *v26);
      if (*v27 >= 0x2Fu)
      {
        uint64_t v28 = v27[23];
        if (v28)
        {
          unsigned int v29 = *((unsigned __int8 *)v26 + v28);
          BOOL v55 = v29 > 0x36;
          uint64_t v30 = (1 << v29) & 0x44000000000008;
          if (!v55 && v30 != 0) {
            return v10;
          }
        }
      }
    }
  }
  if (!*((unsigned char *)a2 + 38))
  {
    if (v4 < 0x4B) {
      goto LABEL_78;
    }
    unsigned int v32 = v3[37];
    if (!v3[37]) {
      goto LABEL_78;
    }
LABEL_77:
    __int16 v33 = *(_WORD *)&v2[v32];
    goto LABEL_79;
  }
  if (v4 >= 0x49)
  {
    unsigned int v32 = v3[36];
    if (v3[36]) {
      goto LABEL_77;
    }
  }
LABEL_78:
  __int16 v33 = -1;
LABEL_79:
  unsigned __int16 v34 = v33 + 18000;
  unsigned __int16 v35 = v33 - 18000;
  if ((unsigned __int16)(v34 >> 5) < 0x465u) {
    unsigned __int16 v35 = v34;
  }
  int v36 = a2[5];
  int v37 = (unsigned __int16 *)((char *)v36 - *v36);
  unsigned int v38 = *v37;
  if (!*((unsigned char *)a2 + 78))
  {
    if (v38 < 0x49) {
      goto LABEL_88;
    }
    unsigned int v39 = v37[36];
    if (!v39) {
      goto LABEL_88;
    }
LABEL_87:
    int v40 = *(unsigned __int16 *)((char *)v36 + v39);
    goto LABEL_89;
  }
  if (v38 >= 0x4B)
  {
    unsigned int v39 = v37[37];
    if (v39) {
      goto LABEL_87;
    }
  }
LABEL_88:
  int v40 = 0xFFFF;
LABEL_89:
  int v41 = v40 - v35;
  if (v41 > 18000) {
    v41 -= 36000;
  }
  if (v41 < -17999) {
    v41 += 36000;
  }
  double v42 = round((double)v41 / 100.0);
  if (v19 && v3[5])
  {
    if (v42 < 0.0 == v2[v3[5] + 1] >> 7) {
      return (*(_DWORD *)sub_71CC9C((void *)(a1 + 240), (unint64_t)fabs(v42)) + v10);
    }
  }
  else if (v42 >= 0.0)
  {
    return (*(_DWORD *)sub_71CC9C((void *)(a1 + 240), (unint64_t)fabs(v42)) + v10);
  }
  double v44 = a2 + 2;
  if (*((unsigned char *)a2 + 38)) {
    double v44 = a2 + 3;
  }
  uint64_t v45 = *v44;
  double v46 = -1.0;
  if (*((unsigned char *)a2 + 38))
  {
    if (v4 < 0x11) {
      goto LABEL_109;
    }
    unsigned int v47 = v3[8];
    if (!v47) {
      goto LABEL_109;
    }
  }
  else
  {
    if (v4 < 0xF) {
      goto LABEL_109;
    }
    unsigned int v47 = v3[7];
    if (!v47) {
      goto LABEL_109;
    }
  }
  unsigned int v48 = v2[v47];
  double v46 = (double)v48;
  if (!v48) {
    double v46 = -1.0;
  }
LABEL_109:
  double v49 = -1.0;
  if (v45)
  {
    uint64_t v50 = (unsigned __int16 *)((char *)v45 - *v45);
    if (*v50 >= 9u)
    {
      uint64_t v51 = v50[4];
      if (v51)
      {
        unsigned int v52 = *(unsigned __int16 *)((char *)v45 + v51);
        if ((unsigned __int16)(v52 - 1) <= 0xFFFDu) {
          double v49 = (double)v52 / 100.0;
        }
      }
    }
  }
  BOOL v55 = (*(uint64_t *)&v46 <= -1 || ((*(void *)&v46 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
     && *(void *)&v46 != 0
     || v46 <= 0.0;
  if (v55) {
    double v46 = 0.0;
  }
  if ((*(uint64_t *)&v49 <= -1 || ((*(void *)&v49 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
    && (unint64_t)(*(void *)&v49 - 1) >= 0xFFFFFFFFFFFFFLL)
  {
    double v49 = 0.0;
  }
  if (v46 < v49) {
    double v46 = v49;
  }
  double v58 = 1.0;
  if (*(void *)&v46 >> 52 <= 0x7FEuLL && v46 > 0.0 && v46 >= *(double *)(a1 + 288)) {
    double v58 = *(double *)(a1 + 296);
  }
  double v59 = v58 * (double)*(int *)sub_71CC9C((void *)(a1 + 264), (unint64_t)fabs(v42));
  if (v59 >= 0.0)
  {
    if (v59 < 4.50359963e15)
    {
      uint64_t v60 = (uint64_t)(v59 + v59) + 1;
LABEL_148:
      double v59 = (double)(v60 >> 1);
    }
  }
  else if (v59 > -4.50359963e15)
  {
    uint64_t v60 = (uint64_t)(v59 + v59);
    if (v60 >= 1) {
      --v60;
    }
    goto LABEL_148;
  }
  return (v10 + (int)v59);
}

double sub_EE4D10(uint64_t a1, int **a2, int a3)
{
  uint64_t v3 = *a2;
  unsigned int v4 = (unsigned __int16 *)((char *)*a2 - **a2);
  unsigned int v5 = *v4;
  if (v5 >= 0x2F && v4[23] && *((unsigned char *)v3 + v4[23]) == 9) {
    return *(double *)(a1 + 120);
  }
  if (a3 == 2) {
    return *(double *)(a1 + 128);
  }
  double result = 0.0;
  double v7 = 0.0;
  if (a3) {
    return result;
  }
  if (!*(unsigned char *)(a1 + 160)) {
    return *(double *)(a1 + 112);
  }
  if (*((unsigned char *)a2 + 38))
  {
    if (v5 >= 0x57)
    {
      if (v4[43])
      {
        unsigned int v8 = (unsigned int *)((char *)v3 + v4[43]);
        unsigned int v9 = (int *)((char *)v8 + *v8);
        uint64_t v10 = (unsigned __int16 *)((char *)v9 - *v9);
        if (*v10 >= 7u)
        {
          uint64_t v11 = v10[3];
          if (v11)
          {
            LOWORD(result) = *(_WORD *)((char *)v9 + v11);
            double result = ((double)*(unint64_t *)&result + (double)*(unint64_t *)&result) / 65535.0;
          }
        }
        uint64_t v3 = (int *)((char *)v8 + *v8);
        double v12 = (unsigned __int16 *)((char *)v3 - *v3);
        if (*v12 < 5u) {
          goto LABEL_40;
        }
        unsigned int v13 = v12[2];
        if (!v13) {
          goto LABEL_40;
        }
        goto LABEL_39;
      }
      if (v5 < 0x7D)
      {
        if (v5 < 0x7B) {
          goto LABEL_40;
        }
      }
      else if (v4[62])
      {
        LOWORD(result) = *(_WORD *)((char *)v3 + v4[62]);
        double result = ((double)*(unint64_t *)&result + (double)*(unint64_t *)&result) / 65535.0;
      }
      unsigned int v13 = v4[61];
      double v7 = 0.0;
      if (v13)
      {
LABEL_39:
        LOWORD(v7) = *(_WORD *)((char *)v3 + v13);
        double v7 = (double)*(unint64_t *)&v7 + (double)*(unint64_t *)&v7;
      }
    }
  }
  else if (v5 >= 0x57)
  {
    if (v4[43])
    {
      unsigned int v14 = (unsigned int *)((char *)v3 + v4[43]);
      unsigned int v15 = (int *)((char *)v14 + *v14);
      unsigned int v16 = (unsigned __int16 *)((char *)v15 - *v15);
      if (*v16 >= 5u)
      {
        uint64_t v17 = v16[2];
        if (v17)
        {
          LOWORD(result) = *(_WORD *)((char *)v15 + v17);
          double result = ((double)*(unint64_t *)&result + (double)*(unint64_t *)&result) / 65535.0;
        }
      }
      uint64_t v3 = (int *)((char *)v14 + *v14);
      uint64_t v18 = (unsigned __int16 *)((char *)v3 - *v3);
      if (*v18 < 7u) {
        goto LABEL_40;
      }
      unsigned int v13 = v18[3];
      if (!v13) {
        goto LABEL_40;
      }
    }
    else
    {
      if (v5 < 0x7B) {
        goto LABEL_40;
      }
      if (v4[61])
      {
        LOWORD(result) = *(_WORD *)((char *)v3 + v4[61]);
        double result = ((double)*(unint64_t *)&result + (double)*(unint64_t *)&result) / 65535.0;
      }
      if (v5 < 0x7D) {
        goto LABEL_40;
      }
      unsigned int v13 = v4[62];
      if (!v13) {
        goto LABEL_40;
      }
    }
    goto LABEL_39;
  }
LABEL_40:
  double v19 = v7 / 65535.0;
  double v20 = *(double **)(a1 + 168);
  double v21 = *v20;
  if (result <= *v20) {
    goto LABEL_52;
  }
  uint64_t v22 = *(double **)(a1 + 176);
  if ((char *)v22 - (char *)v20 >= 16)
  {
    if ((char *)v22 - (char *)v20 != 16)
    {
      unint64_t v23 = (unint64_t)((char *)v22 - (char *)v20) >> 4;
      do
      {
        unint64_t v24 = (4 * v23) & 0xFFFFFFFFFFFFFFF0;
        _X13 = (char *)v20 + v24;
        __asm { PRFM            #0, [X13] }
        uint64_t v31 = &v20[2 * (v23 >> 1)];
        _X12 = (char *)v31 + v24;
        __asm { PRFM            #0, [X12] }
        if (*v31 >= result) {
          unint64_t v34 = 0;
        }
        else {
          unint64_t v34 = v23 >> 1;
        }
        v20 += 2 * v34;
        v23 -= v23 >> 1;
      }
      while ((uint64_t)v23 > 1);
      double v21 = *v20;
    }
    v20 += 2 * (v21 < result);
  }
  if (v20 == v22)
  {
    double result = *(v22 - 1);
    int v36 = *(double **)(a1 + 192);
    if (v19 <= *v36) {
      return result;
    }
    goto LABEL_53;
  }
  double v35 = *(v20 - 2);
  if (v35 == *v20)
  {
LABEL_52:
    double result = v20[1];
    int v36 = *(double **)(a1 + 192);
    if (v19 <= *v36) {
      return result;
    }
  }
  else
  {
    double result = *(v20 - 1) + (result - v35) / (*v20 - v35) * (v20[1] - *(v20 - 1));
    int v36 = *(double **)(a1 + 192);
    if (v19 <= *v36) {
      return result;
    }
  }
LABEL_53:
  uint64_t v37 = *(void *)(a1 + 200);
  if (v37 - (uint64_t)v36 > 16)
  {
    unint64_t v38 = (unint64_t)(v37 - (void)v36) >> 4;
    do
    {
      unint64_t v39 = (4 * v38) & 0xFFFFFFFFFFFFFFF0;
      _X13 = (char *)v36 + v39;
      __asm { PRFM            #0, [X13] }
      double v42 = &v36[2 * (v38 >> 1)];
      _X12 = (char *)v42 + v39;
      __asm { PRFM            #0, [X12] }
      if (*v42 >= v19) {
        unint64_t v45 = 0;
      }
      else {
        unint64_t v45 = v38 >> 1;
      }
      v36 += 2 * v45;
      v38 -= v38 >> 1;
    }
    while ((uint64_t)v38 > 1);
  }
  return result;
}

uint64_t sub_EE50BC(uint64_t a1, void *a2)
{
  *(unsigned char *)a1 = 0;
  *(_OWORD *)(a1 + 8) = xmmword_20F0F60;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 24) = _Q0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  double v7 = (double *)(a1 + 56);
  *(_DWORD *)(a1 + 48) = 0x7FFFFFFF;
  *(_OWORD *)(a1 + 112) = 0u;
  uint64_t v62 = a1 + 112;
  uint64_t v61 = a1 + 136;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(unsigned char *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(unsigned char *)(a1 + 160) = 0;
  *(void *)&_Q0 = 0x8000000080000000;
  *((void *)&_Q0 + 1) = 0x8000000080000000;
  *(_OWORD *)(a1 + 164) = _Q0;
  *(void *)(a1 + 184) = 0;
  uint64_t v8 = a1 + 184;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  unsigned int v9 = (char *)operator new(0x2D4uLL);
  *(void *)(a1 + 184) = v9;
  uint64_t v10 = v9 + 724;
  *(void *)(a1 + 200) = v9 + 724;
  bzero(v9, 0x2D4uLL);
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 192) = v10;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  uint64_t v11 = (char *)operator new(0x2D4uLL);
  *(void *)(a1 + 208) = v11;
  double v12 = v11 + 724;
  *(void *)(a1 + 224) = v11 + 724;
  bzero(v11, 0x2D4uLL);
  *(_OWORD *)(a1 + 248) = 0u;
  *(void *)(a1 + 216) = v12;
  *(_OWORD *)(a1 + 232) = xmmword_20F0F70;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(unsigned char *)(a1 + 296) = 0;
  HIBYTE(v66[2]) = 13;
  strcpy((char *)v66, "parameter_set");
  uint64_t v13 = sub_561B0(a2, (uint64_t)v66);
  if (SHIBYTE(v66[2]) < 0) {
    operator delete(v66[0]);
  }
  unsigned int v14 = (void *)sub_560F4(a2, v13);
  unsigned int v15 = v14;
  int v16 = *(char *)(v13 + 23);
  if ((v16 & 0x80000000) == 0)
  {
    if (v16 != 8) {
      goto LABEL_9;
    }
LABEL_8:
    BOOL v17 = *(void *)v13 != 0x647261646E617473;
    goto LABEL_10;
  }
  if (*(void *)(v13 + 8) == 8)
  {
    uint64_t v13 = *(void *)v13;
    goto LABEL_8;
  }
LABEL_9:
  BOOL v17 = 1;
LABEL_10:
  *(unsigned char *)a1 = v17;
  HIBYTE(v66[2]) = 21;
  strcpy((char *)v66, "aggressive_eta_factor");
  *(double *)(a1 + 8) = sub_5C7E8(v14, (uint64_t)v66);
  if (SHIBYTE(v66[2]) < 0)
  {
    operator delete(v66[0]);
    if (!*(unsigned char *)a1) {
      return a1;
    }
  }
  else if (!*(unsigned char *)a1)
  {
    return a1;
  }
  HIBYTE(v66[2]) = 17;
  strcpy((char *)v66, "cycling_speed_kph");
  *(double *)(a1 + 16) = sub_5D138(v15, v66);
  if (SHIBYTE(v66[2]) < 0) {
    operator delete(v66[0]);
  }
  HIBYTE(v66[2]) = 17;
  strcpy((char *)v66, "walking_speed_kph");
  *(double *)(a1 + 24) = sub_5D138(v15, v66);
  if (SHIBYTE(v66[2]) < 0) {
    operator delete(v66[0]);
  }
  v66[0] = (unsigned int *)operator new(0x20uLL);
  *(_OWORD *)&v66[1] = xmmword_20B91C0;
  strcpy((char *)v66[0], "fallback_ferry_speed_kph");
  __p[0] = (void *)0x4041800000000000;
  uint64_t v18 = sub_58070(v15, (uint64_t)v66);
  if (v18)
  {
    double v19 = (void **)(v18 + 5);
    if (*((_DWORD *)v18 + 12) != 1) {
      double v19 = __p;
    }
    *(void *)(a1 + 32) = *v19;
    if (SHIBYTE(v66[2]) < 0) {
      goto LABEL_22;
    }
  }
  else
  {
    *(void *)(a1 + 32) = 0x4041800000000000;
    if (SHIBYTE(v66[2]) < 0) {
LABEL_22:
    }
      operator delete(v66[0]);
  }
  HIBYTE(v66[2]) = 13;
  strcpy((char *)v66, "stairs_factor");
  *(double *)(a1 + 40) = sub_5C7E8(v15, (uint64_t)v66);
  if (SHIBYTE(v66[2]) < 0) {
    operator delete(v66[0]);
  }
  HIBYTE(v66[2]) = 21;
  strcpy((char *)v66, "ferry_entry_penalty_s");
  *(_DWORD *)(a1 + 48) = sub_5D2EC(v15, v66);
  if (SHIBYTE(v66[2]) < 0) {
    operator delete(v66[0]);
  }
  v66[0] = (unsigned int *)operator new(0x20uLL);
  *(_OWORD *)&v66[1] = xmmword_20B8890;
  strcpy((char *)v66[0], "elevation_gain_factor_cycling");
  *double v7 = sub_5C7E8(v15, (uint64_t)v66);
  if (SHIBYTE(v66[2]) < 0) {
    operator delete(v66[0]);
  }
  v66[0] = (unsigned int *)operator new(0x20uLL);
  *(_OWORD *)&v66[1] = xmmword_20B91B0;
  strcpy((char *)v66[0], "elevation_gain_factor_stairs");
  *(double *)(a1 + 64) = sub_5C7E8(v15, (uint64_t)v66);
  if (SHIBYTE(v66[2]) < 0) {
    operator delete(v66[0]);
  }
  v66[0] = (unsigned int *)operator new(0x20uLL);
  *(_OWORD *)&v66[1] = xmmword_20B8890;
  strcpy((char *)v66[0], "elevation_gain_factor_walking");
  *(double *)(a1 + 72) = sub_5C7E8(v15, (uint64_t)v66);
  if (SHIBYTE(v66[2]) < 0) {
    operator delete(v66[0]);
  }
  v66[0] = (unsigned int *)operator new(0x20uLL);
  *(_OWORD *)&v66[1] = xmmword_20B8890;
  strcpy((char *)v66[0], "elevation_loss_factor_cycling");
  *(double *)(a1 + 80) = sub_5C7E8(v15, (uint64_t)v66);
  if (SHIBYTE(v66[2]) < 0) {
    operator delete(v66[0]);
  }
  v66[0] = (unsigned int *)operator new(0x20uLL);
  *(_OWORD *)&v66[1] = xmmword_20B91B0;
  strcpy((char *)v66[0], "elevation_loss_factor_stairs");
  *(double *)(a1 + 88) = sub_5C7E8(v15, (uint64_t)v66);
  if (SHIBYTE(v66[2]) < 0) {
    operator delete(v66[0]);
  }
  v66[0] = (unsigned int *)operator new(0x20uLL);
  *(_OWORD *)&v66[1] = xmmword_20B8890;
  strcpy((char *)v66[0], "elevation_loss_factor_walking");
  *(double *)(a1 + 96) = sub_5C7E8(v15, (uint64_t)v66);
  if (SHIBYTE(v66[2]) < 0) {
    operator delete(v66[0]);
  }
  v66[0] = (unsigned int *)operator new(0x30uLL);
  *(_OWORD *)&v66[1] = xmmword_20B9A40;
  strcpy((char *)v66[0], "use_interpolated_elevation_factors_cycling");
  *(unsigned char *)(a1 + 104) = sub_29D62C(v15, (uint64_t)v66);
  if (SHIBYTE(v66[2]) < 0) {
    operator delete(v66[0]);
  }
  v66[0] = (unsigned int *)operator new(0x20uLL);
  *(_OWORD *)&v66[1] = xmmword_20B9800;
  strcpy((char *)v66[0], "elevation_gain_factors_cycling");
  double v20 = (uint64_t *)sub_5C4AC(v15, (uint64_t)v66);
  double v58 = (void **)(a1 + 272);
  double v59 = (void **)(a1 + 248);
  uint64_t v60 = (void **)(a1 + 208);
  if (SHIBYTE(v66[2]) < 0) {
    operator delete(v66[0]);
  }
  uint64_t v22 = *v20;
  uint64_t v21 = v20[1];
  if (*v20 != v21)
  {
    while (1)
    {
      if (*(_DWORD *)(v22 + 8) != 2)
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_23FDF58;
      }
      unint64_t v23 = *(void **)v22;
      HIBYTE(v66[2]) = 8;
      strcpy((char *)v66, "gradient");
      v63[0] = COERCE_VOID_(sub_5C7E8(v23, (uint64_t)v66));
      HIBYTE(__p[2]) = 6;
      strcpy((char *)__p, "factor");
      double v65 = sub_5C7E8(v23, (uint64_t)__p);
      sub_D4EC6C(v62, v63, &v65);
      if (SHIBYTE(__p[2]) < 0)
      {
        operator delete(__p[0]);
        if ((SHIBYTE(v66[2]) & 0x80000000) == 0) {
          goto LABEL_46;
        }
LABEL_50:
        operator delete(v66[0]);
        v22 += 16;
        if (v22 == v21) {
          break;
        }
      }
      else
      {
        if (SHIBYTE(v66[2]) < 0) {
          goto LABEL_50;
        }
LABEL_46:
        v22 += 16;
        if (v22 == v21) {
          break;
        }
      }
    }
  }
  v66[0] = (unsigned int *)operator new(0x20uLL);
  *(_OWORD *)&v66[1] = xmmword_20B9800;
  strcpy((char *)v66[0], "elevation_loss_factors_cycling");
  unint64_t v24 = (uint64_t *)sub_5C4AC(v15, (uint64_t)v66);
  unint64_t v25 = v24;
  if ((SHIBYTE(v66[2]) & 0x80000000) == 0)
  {
    uint64_t v27 = *v24;
    uint64_t v26 = v24[1];
    if (*v24 != v26) {
      goto LABEL_60;
    }
    goto LABEL_64;
  }
  operator delete(v66[0]);
  uint64_t v27 = *v25;
  uint64_t v26 = v25[1];
  if (*v25 != v26)
  {
    while (1)
    {
LABEL_60:
      if (*(_DWORD *)(v27 + 8) != 2)
      {
        uint64_t v57 = __cxa_allocate_exception(8uLL);
        void *v57 = &off_23FDF58;
      }
      uint64_t v28 = *(void **)v27;
      HIBYTE(v66[2]) = 8;
      strcpy((char *)v66, "gradient");
      v63[0] = COERCE_VOID_(sub_5C7E8(v28, (uint64_t)v66));
      HIBYTE(__p[2]) = 6;
      strcpy((char *)__p, "factor");
      double v65 = sub_5C7E8(v28, (uint64_t)__p);
      sub_D4EC6C(v61, v63, &v65);
      if (SHIBYTE(__p[2]) < 0)
      {
        operator delete(__p[0]);
        if ((SHIBYTE(v66[2]) & 0x80000000) == 0) {
          goto LABEL_59;
        }
LABEL_63:
        operator delete(v66[0]);
        v27 += 16;
        if (v27 == v26) {
          break;
        }
      }
      else
      {
        if (SHIBYTE(v66[2]) < 0) {
          goto LABEL_63;
        }
LABEL_59:
        v27 += 16;
        if (v27 == v26) {
          break;
        }
      }
    }
  }
LABEL_64:
  HIBYTE(v66[2]) = 19;
  strcpy((char *)v66, "include_transitions");
  *(unsigned char *)(a1 + 160) = sub_29D62C(v15, (uint64_t)v66);
  if (SHIBYTE(v66[2]) < 0) {
    operator delete(v66[0]);
  }
  HIBYTE(v66[2]) = 18;
  strcpy((char *)v66, "dismount_penalty_s");
  *(_DWORD *)(a1 + 164) = sub_5D2EC(v15, v66);
  if (SHIBYTE(v66[2]) < 0) {
    operator delete(v66[0]);
  }
  HIBYTE(v66[2]) = 17;
  strcpy((char *)v66, "remount_penalty_s");
  *(_DWORD *)(a1 + 168) = sub_5D2EC(v15, v66);
  if (SHIBYTE(v66[2]) < 0) {
    operator delete(v66[0]);
  }
  v66[0] = (unsigned int *)operator new(0x19uLL);
  *(_OWORD *)&v66[1] = xmmword_20B9250;
  strcpy((char *)v66[0], "traffic_light_penalty_s");
  *(_DWORD *)(a1 + 172) = sub_5D2EC(v15, v66);
  if (SHIBYTE(v66[2]) < 0) {
    operator delete(v66[0]);
  }
  HIBYTE(v66[2]) = 19;
  strcpy((char *)v66, "stop_sign_penalty_s");
  *(_DWORD *)(a1 + 176) = sub_5D2EC(v15, v66);
  if (SHIBYTE(v66[2]) < 0) {
    operator delete(v66[0]);
  }
  v66[0] = (unsigned int *)operator new(0x20uLL);
  *(_OWORD *)&v66[1] = xmmword_20B91C0;
  strcpy((char *)v66[0], "high_speed_threshold_kph");
  *(double *)(a1 + 232) = sub_5D138(v15, v66);
  if (SHIBYTE(v66[2]) < 0) {
    operator delete(v66[0]);
  }
  v66[0] = (unsigned int *)operator new(0x38uLL);
  *(_OWORD *)&v66[1] = xmmword_20B9A20;
  strcpy((char *)v66[0], "high_speed_road_factor_turn_against_traffic_factor");
  *(double *)(a1 + 240) = sub_5C7E8(v15, (uint64_t)v66);
  if (SHIBYTE(v66[2]) < 0) {
    operator delete(v66[0]);
  }
  memset(v66, 0, 24);
  HIBYTE(__p[2]) = 10;
  strcpy((char *)__p, "turn_times");
  sub_EE67B0(v15, (uint64_t)__p, v66);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  sub_EE62D8(v66, 1, 0, (unint64_t *)__p);
  unsigned int v29 = *(void **)v8;
  if (*(void *)v8)
  {
    *(void *)(a1 + 192) = v29;
    operator delete(v29);
    *(void *)uint64_t v8 = 0;
    *(void *)(v8 + 8) = 0;
    *(void *)(v8 + 16) = 0;
  }
  *(_OWORD *)(a1 + 184) = *(_OWORD *)__p;
  *(void **)(a1 + 200) = __p[2];
  v66[1] = v66[0];
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B5EB0;
  strcpy((char *)__p[0], "turn_times_against_traffic");
  sub_EE67B0(v15, (uint64_t)__p, v66);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  sub_EE62D8(v66, 1, 0, (unint64_t *)__p);
  uint64_t v30 = *v60;
  if (*v60)
  {
    *(void *)(a1 + 216) = v30;
    operator delete(v30);
    *uint64_t v60 = 0;
    *(void *)(a1 + 216) = 0;
    *(void *)(a1 + 224) = 0;
  }
  *(_OWORD *)(a1 + 208) = *(_OWORD *)__p;
  *(void **)(a1 + 224) = __p[2];
  HIBYTE(v63[2]) = 19;
  strcpy((char *)v63, "fow_factors_cycling");
  sub_EE6520(v15, (uint64_t)v63, (uint64_t)&off_243F0D0, (int64x2_t **)__p, 0);
  uint64_t v31 = *v59;
  if (*v59)
  {
    *(void *)(a1 + 256) = v31;
    operator delete(v31);
    *double v59 = 0;
    *(void *)(a1 + 256) = 0;
    *(void *)(a1 + 264) = 0;
  }
  *(_OWORD *)(a1 + 248) = *(_OWORD *)__p;
  *(void **)(a1 + 264) = __p[2];
  memset(__p, 0, sizeof(__p));
  if (SHIBYTE(v63[2]) < 0) {
    operator delete(v63[0]);
  }
  HIBYTE(v63[2]) = 19;
  strcpy((char *)v63, "fow_factors_walking");
  sub_EE6520(v15, (uint64_t)v63, (uint64_t)&off_243F0D0, (int64x2_t **)__p, 0);
  unsigned int v32 = *v58;
  if (*v58)
  {
    *(void *)(a1 + 280) = v32;
    operator delete(v32);
    *double v58 = 0;
    *(void *)(a1 + 280) = 0;
    *(void *)(a1 + 288) = 0;
  }
  *(_OWORD *)(a1 + 272) = *(_OWORD *)__p;
  *(void **)(a1 + 288) = __p[2];
  memset(__p, 0, sizeof(__p));
  if (SHIBYTE(v63[2]) < 0) {
    operator delete(v63[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20E12D0;
  strcpy((char *)__p[0], "ignore_fow_factors_if_cycling_friendly");
  *(unsigned char *)(a1 + 296) = sub_29D62C(v15, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v33 = *(void *)(a1 + 16);
  if ((v33 <= -1 || ((v33 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
    && (unint64_t)(v33 - 1) >= 0xFFFFFFFFFFFFFLL
    && (v33 & 0x7FFFFFFFFFFFFFFFLL) != 0)
  {
    goto LABEL_155;
  }
  uint64_t v37 = *(void *)(a1 + 24);
  BOOL v38 = v37 <= -1 || ((v37 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF;
  BOOL v39 = v38 && (unint64_t)(v37 - 1) >= 0xFFFFFFFFFFFFFLL;
  if (v39 && (v37 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    goto LABEL_155;
  }
  uint64_t v41 = *(void *)(a1 + 32);
  BOOL v42 = v41 <= -1 || ((v41 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF;
  BOOL v43 = v42 && (unint64_t)(v41 - 1) >= 0xFFFFFFFFFFFFFLL;
  BOOL v44 = !v43 || (v41 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (!v44
    || *(double *)(a1 + 32) <= 0.0
    || *(_DWORD *)(a1 + 48) == 0x7FFFFFFF
    || *(_DWORD *)(a1 + 164) == 0x7FFFFFFF
    || *(_DWORD *)(a1 + 168) == 0x7FFFFFFF
    || *(_DWORD *)(a1 + 172) == 0x7FFFFFFF
    || *(_DWORD *)(a1 + 176) == 0x7FFFFFFF)
  {
    goto LABEL_155;
  }
  unint64_t v45 = *(_DWORD **)(a1 + 184);
  double v46 = *(_DWORD **)(a1 + 192);
  if (v45 != v46)
  {
    while (*v45 != 0x7FFFFFFF)
    {
      if (++v45 == v46) {
        goto LABEL_138;
      }
    }
LABEL_155:
    uint64_t v54 = __cxa_allocate_exception(0x40uLL);
    BOOL v55 = (void *)sub_2F480((uint64_t)v54, 8u);
  }
LABEL_138:
  unsigned int v47 = *(_DWORD **)(a1 + 208);
  unsigned int v48 = *(_DWORD **)(a1 + 216);
  if (v47 != v48)
  {
    while (*v47 != 0x7FFFFFFF)
    {
      if (++v47 == v48) {
        goto LABEL_141;
      }
    }
    goto LABEL_155;
  }
LABEL_141:
  uint64_t v49 = *(void *)(a1 + 232);
  if ((v49 <= -1 || ((v49 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
    && (unint64_t)(v49 - 1) >= 0xFFFFFFFFFFFFFLL
    && (v49 & 0x7FFFFFFFFFFFFFFFLL) != 0)
  {
    goto LABEL_155;
  }
  if (v66[0])
  {
    v66[1] = v66[0];
    operator delete(v66[0]);
  }
  return a1;
}

void sub_EE5FF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, void **a14, void **a15, uint64_t a16, void **a17, uint64_t a18, void **a19, void **a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  uint64_t v41 = *(void **)(v34 - 112);
  if (v41)
  {
    *(void *)(v34 - 104) = v41;
    operator delete(v41);
  }
  BOOL v42 = *a13;
  if (*a13)
  {
    v33[35] = v42;
    operator delete(v42);
    int v36 = *a14;
    if (*a14)
    {
LABEL_13:
      v33[32] = v36;
      operator delete(v36);
      uint64_t v37 = *a15;
      if (*a15)
      {
LABEL_14:
        v33[27] = v37;
        operator delete(v37);
        BOOL v38 = *a17;
        if (*a17)
        {
LABEL_15:
          v33[24] = v38;
          operator delete(v38);
          BOOL v39 = *a19;
          if (*a19)
          {
LABEL_16:
            v33[18] = v39;
            operator delete(v39);
            int v40 = *a20;
            if (*a20)
            {
LABEL_17:
              v33[15] = v40;
              operator delete(v40);
              _Unwind_Resume(exception_object);
            }
LABEL_8:
            _Unwind_Resume(exception_object);
          }
LABEL_7:
          int v40 = *a20;
          if (*a20) {
            goto LABEL_17;
          }
          goto LABEL_8;
        }
LABEL_6:
        BOOL v39 = *a19;
        if (*a19) {
          goto LABEL_16;
        }
        goto LABEL_7;
      }
LABEL_5:
      BOOL v38 = *a17;
      if (*a17) {
        goto LABEL_15;
      }
      goto LABEL_6;
    }
  }
  else
  {
    int v36 = *a14;
    if (*a14) {
      goto LABEL_13;
    }
  }
  uint64_t v37 = *a15;
  if (*a15) {
    goto LABEL_14;
  }
  goto LABEL_5;
}

void sub_EE62D8(unsigned int **a1@<X0>, char a2@<W1>, unsigned int a3@<W2>, unint64_t *a4@<X8>)
{
  unsigned int v41 = a3;
  unsigned int v5 = *a1;
  long long v6 = a1[1];
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  if (v5 != v6)
  {
    int v8 = *(v6 - 2);
    if (v8 != -1)
    {
      sub_EE6948(a4, (v8 + 1), (const float *)&v41);
      unsigned int v5 = *a1;
      long long v6 = a1[1];
    }
    if (v5 != v6)
    {
      if (a2)
      {
        LODWORD(v10) = 0;
        unsigned int v11 = v41;
        unint64_t v13 = *a4;
        unint64_t v12 = a4[1];
        while (1)
        {
          unsigned int v14 = v10 ? v10 - 1 : 0;
          unsigned int v16 = *v5;
          unsigned int v15 = v5[1];
          unint64_t v17 = v10;
          if (v10 < (unint64_t)((uint64_t)(v12 - v13) >> 2) && v10 <= v16) {
            break;
          }
LABEL_7:
          v5 += 2;
          unsigned int v11 = v15;
          if (v5 == v6) {
            return;
          }
        }
        double v19 = (double)(int)(v15 - v11);
        BOOL v20 = v16 >= v14;
        unsigned int v21 = v16 - v14;
        if (v21 == 0 || !v20)
        {
          double v26 = v19 + v19;
          uint64_t v27 = (uint64_t)v26;
          if (((v15 - v11) & 0x80000000) != 0)
          {
            unint64_t v30 = v27 - 1;
            if (v27 < 1) {
              unint64_t v30 = (uint64_t)v26;
            }
            int v31 = v11 + (v30 >> 1);
            do
            {
              unint64_t v10 = (v10 + 1);
              *(_DWORD *)(v13 + 4 * v17) = v31;
              unint64_t v13 = *a4;
              unint64_t v12 = a4[1];
              BOOL v32 = v10 >= (uint64_t)(v12 - *a4) >> 2 || v10 > v16;
              unint64_t v17 = v10;
            }
            while (!v32);
          }
          else
          {
            int v28 = v11 + ((unint64_t)(v27 + 1) >> 1);
            do
            {
              unint64_t v10 = (v10 + 1);
              *(_DWORD *)(v13 + 4 * v17) = v28;
              unint64_t v13 = *a4;
              unint64_t v12 = a4[1];
              BOOL v29 = v10 >= (uint64_t)(v12 - *a4) >> 2 || v10 > v16;
              unint64_t v17 = v10;
            }
            while (!v29);
          }
          goto LABEL_7;
        }
        double v22 = (double)v21;
        unsigned int v23 = v10 != 0;
        while (1)
        {
          double v24 = (double)v23 / v22 * v19;
          if (v24 >= 0.0)
          {
            if (v24 >= 4.50359963e15) {
              goto LABEL_26;
            }
            uint64_t v25 = (uint64_t)(v24 + v24) + 1;
          }
          else
          {
            if (v24 <= -4.50359963e15) {
              goto LABEL_26;
            }
            uint64_t v25 = (uint64_t)(v24 + v24);
            if (v25 >= 1) {
              --v25;
            }
          }
          double v24 = (double)(v25 >> 1);
LABEL_26:
          unint64_t v10 = (v10 + 1);
          *(_DWORD *)(v13 + 4 * v17) = v11 + (int)v24;
          unint64_t v13 = *a4;
          unint64_t v12 = a4[1];
          if (v10 < (uint64_t)(v12 - *a4) >> 2)
          {
            ++v23;
            unint64_t v17 = v10;
            if (v10 <= v16) {
              continue;
            }
          }
          goto LABEL_7;
        }
      }
      LODWORD(v33) = 0;
      unint64_t v34 = *a4;
      unint64_t v35 = a4[1];
      do
      {
        unsigned int v36 = *v5;
        unint64_t v37 = v33;
        if (v33 < (unint64_t)((uint64_t)(v35 - v34) >> 2) && v33 <= v36)
        {
          unsigned int v39 = v5[1];
          do
          {
            unint64_t v33 = (v33 + 1);
            *(_DWORD *)(v34 + 4 * v37) = v39;
            unint64_t v34 = *a4;
            unint64_t v35 = a4[1];
            BOOL v40 = v33 >= (uint64_t)(v35 - *a4) >> 2 || v33 > v36;
            unint64_t v37 = v33;
          }
          while (!v40);
        }
        v5 += 2;
      }
      while (v5 != v6);
    }
  }
}

void sub_EE6504(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_EE6520(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int64x2_t **a4@<X8>, uint64_t a5@<D0>)
{
  unsigned int v9 = (char *)operator new(0x528uLL);
  unint64_t v10 = (void **)(v9 + 1320);
  __p = v9;
  unsigned int v36 = v9 + 1320;
  bzero(v9, 0x528uLL);
  uint64_t v11 = 0;
  unint64_t v35 = v10;
  do
  {
    unint64_t v13 = *(const char **)(a3 + 8 * v11);
    size_t v14 = strlen(v13);
    if (v14 >= 0x7FFFFFFFFFFFFFF8) {
      sub_188D690();
    }
    unint64_t v15 = v14;
    if (v14 >= 0x17)
    {
      uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17) {
        uint64_t v17 = v14 | 7;
      }
      uint64_t v18 = v17 + 1;
      unsigned int v16 = (long long *)operator new(v17 + 1);
      *((void *)&v32 + 1) = v15;
      int64_t v33 = v18 | 0x8000000000000000;
      *(void *)&long long v32 = v16;
      if (v15 < 0x20) {
        goto LABEL_16;
      }
    }
    else
    {
      HIBYTE(v33) = v14;
      if (!v14)
      {
        LOBYTE(v32) = 0;
        uint64_t v27 = (char *)__p + 24 * v11;
        if (v27[23] < 0) {
          goto LABEL_24;
        }
        goto LABEL_2;
      }
      unsigned int v16 = &v32;
      if (v15 < 0x20)
      {
LABEL_16:
        double v19 = v13;
        BOOL v20 = v16;
        do
        {
LABEL_17:
          char v25 = *v19++;
          *(unsigned char *)BOOL v20 = v25;
          BOOL v20 = (long long *)((char *)v20 + 1);
        }
        while (v19 != &v13[v15]);
        goto LABEL_18;
      }
    }
    if ((unint64_t)((char *)v16 - v13) < 0x20) {
      goto LABEL_16;
    }
    double v19 = &v13[v15 & 0xFFFFFFFFFFFFFFE0];
    BOOL v20 = (long long *)((char *)v16 + (v15 & 0xFFFFFFFFFFFFFFE0));
    unsigned int v21 = v16 + 1;
    double v22 = (long long *)(v13 + 16);
    unint64_t v23 = v15 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v24 = *v22;
      *(v21 - 1) = *(v22 - 1);
      *unsigned int v21 = v24;
      v21 += 2;
      v22 += 2;
      v23 -= 32;
    }
    while (v23);
    if (v15 != (v15 & 0x7FFFFFFFFFFFFFE0)) {
      goto LABEL_17;
    }
LABEL_18:
    *(unsigned char *)BOOL v20 = 0;
    if (v15)
    {
      if (v33 >= 0) {
        double v26 = &v32;
      }
      else {
        double v26 = (long long *)v32;
      }
      do
      {
        *(unsigned char *)double v26 = __tolower(*v13);
        double v26 = (long long *)((char *)v26 + 1);
        ++v13;
        --v15;
      }
      while (v15);
    }
    uint64_t v27 = (char *)__p + 24 * v11;
    if (v27[23] < 0) {
LABEL_24:
    }
      operator delete(*(void **)v27);
LABEL_2:
    long long v12 = v32;
    *((void *)v27 + 2) = v33;
    *(_OWORD *)uint64_t v27 = v12;
    ++v11;
  }
  while (v11 != 55);
  sub_5CA7C(a1, a2, (uint64_t *)&__p, a4, a5);
  int v28 = (void **)__p;
  if (__p)
  {
    BOOL v29 = v35;
    unint64_t v30 = __p;
    if (v35 != __p)
    {
      do
      {
        if (*((char *)v29 - 1) < 0) {
          operator delete(*(v29 - 3));
        }
        v29 -= 3;
      }
      while (v29 != v28);
      unint64_t v30 = __p;
    }
    unint64_t v35 = v28;
    operator delete(v30);
  }
}

void sub_EE6770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1A668((void **)va);
  _Unwind_Resume(a1);
}

void sub_EE678C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_1A668(&a17);
  _Unwind_Resume(a1);
}

uint64_t *sub_EE67B0(void *a1, uint64_t a2, void *a3)
{
  double result = sub_58070(a1, a2);
  if (result)
  {
    a3[1] = *a3;
    double result = (uint64_t *)sub_5C4AC(a1, a2);
    uint64_t v7 = *result;
    uint64_t v8 = result[1];
    if (*result != v8)
    {
      do
      {
        if (*(_DWORD *)(v7 + 8) != 2)
        {
          exception = __cxa_allocate_exception(8uLL);
          void *exception = &off_23FDF58;
        }
        unsigned int v9 = *(void **)v7;
        char v15 = 9;
        strcpy((char *)__p, "threshold");
        int v10 = sub_31AC04(v9, (uint64_t)__p);
        if (v15 < 0) {
          operator delete(__p[0]);
        }
        int v13 = v10;
        strcpy((char *)__p, "time_s");
        char v15 = 6;
        int v11 = sub_319F48(v9, (uint64_t)__p);
        if (v15 < 0) {
          operator delete(__p[0]);
        }
        LODWORD(__p[0]) = 10 * v11;
        double result = (uint64_t *)sub_3EC418((uint64_t)a3, &v13, (int *)__p);
        v7 += 16;
      }
      while (v7 != v8);
    }
  }
  return result;
}

void sub_EE6928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_EE6948(unint64_t *a1, unint64_t a2, const float *a3)
{
  unint64_t v7 = a1[1];
  unint64_t v6 = a1[2];
  uint64_t v8 = (_DWORD *)v7;
  if (a2 <= (uint64_t)(v6 - v7) >> 2)
  {
    if (a2)
    {
      unint64_t v16 = (a2 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v16 < 0xF || v7 < (unint64_t)(a3 + 1) && v7 + 4 * a2 > (unint64_t)a3) {
        goto LABEL_46;
      }
      unint64_t v17 = v16 + 1;
      uint64_t v8 = (_DWORD *)(v7 + 4 * (v17 & 0x7FFFFFFFFFFFFFF8));
      float32x4_t v18 = vld1q_dup_f32(a3);
      double v19 = (float32x4_t *)(v7 + 16);
      uint64_t v20 = v17 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v19[-1] = v18;
        *double v19 = v18;
        v19 += 2;
        v20 -= 8;
      }
      while (v20);
      if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_46:
        do
          *v8++ = *(_DWORD *)a3;
        while (v8 != (_DWORD *)(v7 + 4 * a2));
      }
      uint64_t v8 = (_DWORD *)(v7 + 4 * a2);
    }
    a1[1] = (unint64_t)v8;
  }
  else
  {
    uint64_t v9 = v7 - *a1;
    uint64_t v10 = v9 >> 2;
    unint64_t v11 = (v9 >> 2) + a2;
    if (v11 >> 62) {
      sub_2E00();
    }
    uint64_t v12 = v6 - *a1;
    uint64_t v13 = v12 >> 1;
    if (v12 >> 1 <= v11) {
      uint64_t v13 = (v9 >> 2) + a2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14)
    {
      if (v14 >> 62) {
        sub_188D718();
      }
      char v15 = (char *)operator new(4 * v14);
    }
    else
    {
      char v15 = 0;
    }
    unint64_t v21 = (unint64_t)&v15[4 * v10];
    double v22 = (char *)(v21 + 4 * a2);
    unint64_t v23 = (a2 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    long long v24 = (char *)v21;
    if (v23 < 0x13) {
      goto LABEL_47;
    }
    if (v21 < (unint64_t)(a3 + 1))
    {
      long long v24 = &v15[4 * v10];
      if (&v15[4 * a2 + v9] > (char *)a3) {
        goto LABEL_47;
      }
    }
    unint64_t v25 = v23 + 1;
    long long v24 = (char *)(v21 + 4 * (v25 & 0x7FFFFFFFFFFFFFF8));
    float32x4_t v26 = vld1q_dup_f32(a3);
    uint64_t v27 = (float32x4_t *)&v15[4 * v10 + 16];
    uint64_t v28 = v25 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v27[-1] = v26;
      *uint64_t v27 = v26;
      v27 += 2;
      v28 -= 8;
    }
    while (v28);
    if (v25 != (v25 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_47:
      do
      {
        *(float *)long long v24 = *a3;
        v24 += 4;
      }
      while (v24 != v22);
    }
    BOOL v29 = (_DWORD *)*a1;
    if (v7 != *a1)
    {
      unint64_t v30 = v7 - *a1 - 4;
      if (v30 < 0x2C) {
        goto LABEL_48;
      }
      if (v7 - (unint64_t)&v15[v9] < 0x20) {
        goto LABEL_48;
      }
      uint64_t v31 = (v30 >> 2) + 1;
      uint64_t v32 = 4 * (v31 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v8 = (_DWORD *)(v7 - v32);
      v21 -= v32;
      int64_t v33 = &v15[4 * v10 - 16];
      unint64_t v34 = (long long *)(v7 - 16);
      uint64_t v35 = v31 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v36 = *v34;
        *((_OWORD *)v33 - 1) = *(v34 - 1);
        *(_OWORD *)int64_t v33 = v36;
        v33 -= 32;
        v34 -= 2;
        v35 -= 8;
      }
      while (v35);
      if (v31 != (v31 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_48:
        do
        {
          int v37 = *--v8;
          *(_DWORD *)(v21 - 4) = v37;
          v21 -= 4;
        }
        while (v8 != v29);
      }
      uint64_t v8 = (_DWORD *)*a1;
    }
    *a1 = v21;
    a1[1] = (unint64_t)v22;
    a1[2] = (unint64_t)&v15[4 * v14];
    if (v8)
    {
      operator delete(v8);
    }
  }
}

uint64_t sub_EE6BB8(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 5);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xE38E38E38E38E3) {
    sub_2E00();
  }
  if (0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 5) > v4) {
    unint64_t v4 = 0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 5);
  }
  if (0x8E38E38E38E38E39 * ((a1[2] - *a1) >> 5) >= 0x71C71C71C71C71) {
    unint64_t v6 = 0xE38E38E38E38E3;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xE38E38E38E38E3) {
      sub_188D718();
    }
    unint64_t v7 = (char *)operator new(288 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  uint64_t v8 = (uint64_t)&v7[288 * v3];
  *(void *)uint64_t v8 = *(void *)a2;
  *(_DWORD *)(v8 + 8) = *(_DWORD *)(a2 + 8);
  *(_OWORD *)(v8 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(v8 + 32) = *(void *)(a2 + 32);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_OWORD *)(v8 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(v8 + 56) = *(void *)(a2 + 56);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(_OWORD *)(v8 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(v8 + 80) = *(void *)(a2 + 80);
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(_OWORD *)(v8 + 88) = *(_OWORD *)(a2 + 88);
  *(void *)(v8 + 104) = *(void *)(a2 + 104);
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(v8 + 128) = 0;
  *(_OWORD *)(v8 + 112) = *(_OWORD *)(a2 + 112);
  *(void *)(v8 + 128) = *(void *)(a2 + 128);
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  *(void *)(v8 + 144) = 0;
  *(void *)(v8 + 152) = 0;
  *(_OWORD *)(v8 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(v8 + 152) = *(void *)(a2 + 152);
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  *(void *)(v8 + 168) = 0;
  *(void *)(v8 + 176) = 0;
  *(_OWORD *)(v8 + 160) = *(_OWORD *)(a2 + 160);
  *(void *)(v8 + 176) = *(void *)(a2 + 176);
  *(void *)(a2 + 160) = 0;
  *(void *)(a2 + 168) = 0;
  *(void *)(v8 + 192) = 0;
  *(void *)(v8 + 200) = 0;
  *(_OWORD *)(v8 + 184) = *(_OWORD *)(a2 + 184);
  *(void *)(v8 + 200) = *(void *)(a2 + 200);
  *(void *)(a2 + 176) = 0;
  *(void *)(a2 + 184) = 0;
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 200) = 0;
  *(void *)(v8 + 216) = 0;
  *(void *)(v8 + 224) = 0;
  *(_OWORD *)(v8 + 208) = *(_OWORD *)(a2 + 208);
  *(void *)(v8 + 224) = *(void *)(a2 + 224);
  *(void *)(a2 + 208) = 0;
  *(void *)(a2 + 216) = 0;
  *(void *)(v8 + 240) = 0;
  *(void *)(v8 + 248) = 0;
  *(_OWORD *)(v8 + 232) = *(_OWORD *)(a2 + 232);
  *(void *)(v8 + 248) = *(void *)(a2 + 248);
  *(void *)(a2 + 224) = 0;
  *(void *)(a2 + 232) = 0;
  *(void *)(a2 + 240) = 0;
  *(void *)(a2 + 248) = 0;
  long long v9 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(v8 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(v8 + 272) = v9;
  uint64_t v10 = v8 + 288;
  char v15 = &v7[288 * v6];
  sub_EE6E74((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, v8, v8);
  uint64_t v12 = (void *)*a1;
  unint64_t v11 = (void *)a1[1];
  *a1 = v13;
  a1[1] = v10;
  for (a1[2] = (uint64_t)v15; v11 != v12; unint64_t v11 = sub_3B0290(v11 - 36))
    ;
  if (v12) {
    operator delete(v12);
  }
  return v10;
}

void sub_EE6E0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_EE6E20((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_EE6E20(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 288;
    sub_3B0290((void *)(i - 288));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

__n128 sub_EE6E74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a7 + v7;
      uint64_t v9 = a3 + v7;
      uint64_t v10 = a7 + v7 - 288;
      uint64_t v11 = *(void *)(a3 + v7 - 288);
      *(_DWORD *)(v10 + 8) = *(_DWORD *)(a3 + v7 - 280);
      uint64_t v12 = (void *)(a7 + v7 - 272);
      uint64_t v13 = (_OWORD *)(a3 + v7 - 272);
      *(void *)uint64_t v10 = v11;
      *(void *)(v8 - 256) = 0;
      void *v12 = 0;
      v12[1] = 0;
      *(_OWORD *)uint64_t v12 = *v13;
      *(void *)(v8 - 256) = *(void *)(a3 + v7 - 256);
      *(void *)(a3 + v7 - 264) = 0;
      *(void *)uint64_t v13 = 0;
      *(void *)(v9 - 256) = 0;
      *(void *)(v8 - 248) = 0;
      *(void *)(v8 - 240) = 0;
      *(void *)(v8 - 232) = 0;
      *(_OWORD *)(v8 - 248) = *(_OWORD *)(a3 + v7 - 248);
      *(void *)(v8 - 232) = *(void *)(a3 + v7 - 232);
      *(void *)(v9 - 248) = 0;
      *(void *)(v9 - 240) = 0;
      *(void *)(v9 - 232) = 0;
      *(void *)(v8 - 224) = 0;
      *(void *)(v8 - 216) = 0;
      *(void *)(v8 - 208) = 0;
      *(_OWORD *)(v8 - 224) = *(_OWORD *)(a3 + v7 - 224);
      *(void *)(v8 - 208) = *(void *)(a3 + v7 - 208);
      *(void *)(v9 - 224) = 0;
      *(void *)(v9 - 216) = 0;
      *(void *)(v9 - 208) = 0;
      *(void *)(v8 - 200) = 0;
      *(void *)(v8 - 192) = 0;
      *(void *)(v8 - 184) = 0;
      *(_OWORD *)(v8 - 200) = *(_OWORD *)(a3 + v7 - 200);
      *(void *)(v8 - 184) = *(void *)(a3 + v7 - 184);
      *(void *)(v9 - 200) = 0;
      *(void *)(v9 - 192) = 0;
      *(void *)(v9 - 184) = 0;
      *(void *)(v8 - 176) = 0;
      *(void *)(v8 - 168) = 0;
      *(void *)(v8 - 160) = 0;
      *(_OWORD *)(v8 - 176) = *(_OWORD *)(a3 + v7 - 176);
      *(void *)(v8 - 160) = *(void *)(a3 + v7 - 160);
      *(void *)(v9 - 176) = 0;
      *(void *)(v9 - 168) = 0;
      *(void *)(v9 - 160) = 0;
      *(void *)(v8 - 152) = 0;
      *(void *)(v8 - 144) = 0;
      *(void *)(v8 - 136) = 0;
      *(_OWORD *)(v8 - 152) = *(_OWORD *)(a3 + v7 - 152);
      *(void *)(v8 - 136) = *(void *)(a3 + v7 - 136);
      *(void *)(v9 - 152) = 0;
      *(void *)(v9 - 144) = 0;
      *(void *)(v9 - 136) = 0;
      *(void *)(v8 - 128) = 0;
      *(void *)(v8 - 120) = 0;
      *(void *)(v8 - 112) = 0;
      *(_OWORD *)(v8 - 128) = *(_OWORD *)(a3 + v7 - 128);
      *(void *)(v8 - 112) = *(void *)(a3 + v7 - 112);
      *(void *)(v9 - 128) = 0;
      *(void *)(v9 - 120) = 0;
      *(void *)(v9 - 112) = 0;
      *(void *)(v8 - 104) = 0;
      *(void *)(v8 - 96) = 0;
      *(void *)(v8 - 88) = 0;
      *(_OWORD *)(v8 - 104) = *(_OWORD *)(a3 + v7 - 104);
      *(void *)(v8 - 88) = *(void *)(a3 + v7 - 88);
      *(void *)(v9 - 104) = 0;
      *(void *)(v9 - 96) = 0;
      *(void *)(v9 - 88) = 0;
      *(void *)(v8 - 80) = 0;
      *(void *)(v8 - 72) = 0;
      *(void *)(v8 - 64) = 0;
      *(_OWORD *)(v8 - 80) = *(_OWORD *)(a3 + v7 - 80);
      *(void *)(v8 - 64) = *(void *)(a3 + v7 - 64);
      *(void *)(v9 - 80) = 0;
      *(void *)(v9 - 72) = 0;
      *(void *)(v9 - 64) = 0;
      *(void *)(v8 - 56) = 0;
      *(void *)(v8 - 48) = 0;
      *(void *)(v8 - 40) = 0;
      *(_OWORD *)(v8 - 56) = *(_OWORD *)(a3 + v7 - 56);
      *(void *)(v8 - 40) = *(void *)(a3 + v7 - 40);
      *(void *)(v9 - 56) = 0;
      *(void *)(v9 - 48) = 0;
      *(void *)(v9 - 40) = 0;
      __n128 result = *(__n128 *)(a3 + v7 - 32);
      long long v15 = *(_OWORD *)(a3 + v7 - 16);
      *(__n128 *)(v8 - 32) = result;
      *(_OWORD *)(v8 - 16) = v15;
      v7 -= 288;
    }
    while (a3 + v7 != a5);
  }
  return result;
}

void *sub_EE7018(uint64_t *a1, uint64_t **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)v2;
  int v8 = *(_DWORD *)(v2 + 8);
  uint64_t v7 = v4;
  long long v9 = *(_OWORD *)(v2 + 16);
  uint64_t v10 = *(void *)(v2 + 32);
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 16) = 0;
  long long v11 = *(_OWORD *)(v2 + 40);
  uint64_t v12 = *(void *)(v2 + 56);
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 48) = 0;
  *(void *)(v2 + 56) = 0;
  long long v13 = *(_OWORD *)(v2 + 64);
  uint64_t v14 = *(void *)(v2 + 80);
  *(void *)(v2 + 64) = 0;
  *(void *)(v2 + 72) = 0;
  *(void *)(v2 + 80) = 0;
  long long v15 = *(_OWORD *)(v2 + 88);
  uint64_t v16 = *(void *)(v2 + 104);
  *(void *)(v2 + 88) = 0;
  *(void *)(v2 + 96) = 0;
  *(void *)(v2 + 104) = 0;
  long long v17 = *(_OWORD *)(v2 + 112);
  uint64_t v18 = *(void *)(v2 + 128);
  *(void *)(v2 + 112) = 0;
  *(void *)(v2 + 120) = 0;
  *(void *)(v2 + 128) = 0;
  long long v19 = *(_OWORD *)(v2 + 136);
  uint64_t v20 = *(void *)(v2 + 152);
  *(void *)(v2 + 136) = 0;
  *(void *)(v2 + 144) = 0;
  *(void *)(v2 + 152) = 0;
  long long v21 = *(_OWORD *)(v2 + 160);
  uint64_t v22 = *(void *)(v2 + 176);
  *(void *)(v2 + 160) = 0;
  *(void *)(v2 + 168) = 0;
  *(void *)(v2 + 176) = 0;
  long long v23 = *(_OWORD *)(v2 + 184);
  uint64_t v24 = *(void *)(v2 + 200);
  *(void *)(v2 + 184) = 0;
  *(void *)(v2 + 192) = 0;
  *(void *)(v2 + 200) = 0;
  long long v25 = *(_OWORD *)(v2 + 208);
  uint64_t v26 = *(void *)(v2 + 224);
  *(void *)(v2 + 208) = 0;
  *(void *)(v2 + 216) = 0;
  *(void *)(v2 + 224) = 0;
  long long v27 = *(_OWORD *)(v2 + 232);
  uint64_t v28 = *(void *)(v2 + 248);
  *(void *)(v2 + 232) = 0;
  *(void *)(v2 + 240) = 0;
  *(void *)(v2 + 248) = 0;
  long long v5 = *(_OWORD *)(v2 + 272);
  long long v29 = *(_OWORD *)(v2 + 256);
  long long v30 = v5;
  sub_8E5E5C(v2, v3);
  sub_8E5E5C((uint64_t)v3, &v7);
  return sub_3B0290(&v7);
}

double sub_EE716C()
{
  unk_25FC937 = 16641;
  word_25FC920 = 65;
  byte_25FC94F = 1;
  byte_25FC939 = 0;
  qword_25FC950 = (uint64_t)operator new(0x38uLL);
  unk_25FC958 = xmmword_20B9A20;
  strcpy((char *)qword_25FC950, "routing/route-planning/eta/CyclingBaselineETA.json");
  return *(double *)"ngBaselineETA.json";
}

uint64_t sub_EE71E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_37B3A8(a2);
  int v5 = *(_DWORD *)(v4 + 8);
  *(void *)a1 = *(void *)v4;
  *(_DWORD *)(a1 + 8) = v5;
  HIBYTE(v14[2]) = 19;
  strcpy((char *)v14, "DisplayETAEvaluator");
  __p = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  unint64_t v6 = sub_374CDC(a2, (uint64_t)v14, (uint64_t *)&__p);
  sub_EE7684(a1 + 16, v6);
  uint64_t v7 = (void **)__p;
  if (__p)
  {
    int v8 = v12;
    long long v9 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      long long v9 = __p;
    }
    uint64_t v12 = v7;
    operator delete(v9);
  }
  if (SHIBYTE(v14[2]) < 0) {
    operator delete(v14[0]);
  }
  return a1;
}

void sub_EE72F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_EE731C@<X0>(uint64_t result@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, int *a6@<X5>, uint64_t a7@<X8>)
{
  if (*(_DWORD *)(result + 8) == 1 || a2 == 0x7FFFFFFF || a3 == 0x7FFFFFFF || a5 == 0x7FFFFFFFFFFFFFFFLL)
  {
    *(void *)a7 = 0x8000000080000000;
    *(_OWORD *)(a7 + 8) = xmmword_20E8160;
    *(_DWORD *)(a7 + 8) = 0x7FFFFFFF;
  }
  else
  {
    uint64_t v11 = result;
    if (*(unsigned char *)(result + 44)) {
      int v12 = a4;
    }
    else {
      int v12 = a3;
    }
    if (v12 >= *(_DWORD *)(result + 40))
    {
      if (a3 < 0) {
        char v13 = -5;
      }
      else {
        char v13 = 5;
      }
      signed int v14 = a3 / 10
          + a2
          + (((103 * (char)(v13 + a3 % 10)) >> 15) & 1)
          + ((103 * (char)(v13 + a3 % 10)) >> 10);
      int v15 = *(unsigned __int8 *)(result + 16);
      int v16 = v14;
      if (*(unsigned char *)(result + 16)) {
        int v16 = *(_DWORD *)(result + 20) + 60 * (v14 / 60);
      }
      int v17 = *(_DWORD *)result;
      *(_DWORD *)a7 = v16;
      *(_DWORD *)(a7 + 4) = v14;
      *(_DWORD *)(a7 + 8) = v17;
      *(void *)(a7 + 16) = a5;
      if (*(unsigned char *)(result + 24))
      {
        int v18 = *a6;
        if (*a6 != 0x7FFFFFFF && a6[1] != 0x7FFFFFFF)
        {
          uint64_t v19 = *((void *)a6 + 2);
          if (v19 != 0x7FFFFFFFFFFFFFFFLL)
          {
            int v20 = a6[2];
            if (v20 != 0x7FFFFFFF)
            {
              BOOL v21 = v19 < a5;
              uint64_t v22 = v19 - a5;
              if (v21 || v20 > v17)
              {
                __n128 result = sub_723EC(1u);
                if (result)
                {
                  sub_6BAC((uint64_t)v26);
                  sub_188FC78(v26, (uint64_t)"Retrieved a display ETA message with incorrect data.", 52);
                  std::stringbuf::str();
                  sub_7246C((uint64_t *)&__p, 1u);
                  if (v25 < 0) {
                    operator delete(__p);
                  }
                  return sub_111ECAC((uint64_t)v26);
                }
              }
              else if (v22 > *(void *)(result + 32))
              {
                int v23 = (int)fabs((double)(10 * (v18 - v16)));
                __n128 result = sub_EE760C(result, a3, a4);
                if ((int)result > v23)
                {
                  *(_DWORD *)a7 = v18;
                  if (v15) {
                    *(_DWORD *)a7 = *(_DWORD *)(v11 + 20) + 60 * (v18 / 60);
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      *(void *)a7 = 0x8000000080000000;
      *(_OWORD *)(a7 + 8) = xmmword_20E8160;
      *(_DWORD *)(a7 + 8) = 0x7FFFFFFF;
    }
  }
  return result;
}

void sub_EE75C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_EE760C(uint64_t a1, int a2, int a3)
{
  uint64_t v3 = a1 + 80;
  uint64_t v4 = 80;
  if ((double)a2 / (double)a3 > *(double *)(a1 + 72))
  {
    uint64_t v4 = 48;
    uint64_t v3 = a1 + 48;
  }
  int v5 = *(char **)(a1 + v4);
  unint64_t v6 = *(char **)(v3 + 8);
  if (v6 != v5)
  {
    unint64_t v7 = (v6 - v5) >> 3;
    do
    {
      unint64_t v8 = v7 >> 1;
      long long v9 = (int *)&v5[8 * (v7 >> 1)];
      int v11 = *v9;
      uint64_t v10 = (char *)(v9 + 2);
      v7 += ~(v7 >> 1);
      if (v11 < a2) {
        int v5 = v10;
      }
      else {
        unint64_t v7 = v8;
      }
    }
    while (v7);
  }
  if (v5 == v6) {
    int v5 = v6 - 8;
  }
  return *((unsigned int *)v5 + 1);
}

uint64_t sub_EE7684(uint64_t a1, void *a2)
{
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9250;
  strcpy((char *)__p[0], "enable_round_to_seconds");
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)a1 = v4;
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "round_to_seconds");
  unsigned int v5 = sub_31AC04(a2, (uint64_t)__p) % 0x3C;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 4) = v5;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9960;
  strcpy((char *)__p[0], "enable_adjustment_based_on_previous_eta");
  BOOL v6 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 8) = v6;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8890;
  strcpy((char *)__p[0], "min_traversed_distance_meters");
  double v7 = sub_5C7E8(a2, (uint64_t)__p) * 100.0;
  if (v7 >= 0.0)
  {
    double v8 = v7;
    if (v7 >= 4.50359963e15) {
      goto LABEL_15;
    }
    uint64_t v9 = (uint64_t)(v7 + v7) + 1;
  }
  else
  {
    double v8 = v7;
    if (v7 <= -4.50359963e15) {
      goto LABEL_15;
    }
    uint64_t v9 = (uint64_t)(v7 + v7);
    if (v9 >= 1) {
      --v9;
    }
  }
  double v8 = (double)(v9 >> 1);
LABEL_15:
  if (v8 < 9.22337204e18)
  {
    if (v7 >= 0.0)
    {
      if (v7 >= 4.50359963e15) {
        goto LABEL_26;
      }
      uint64_t v10 = (uint64_t)(v7 + v7) + 1;
    }
    else
    {
      if (v7 <= -4.50359963e15) {
        goto LABEL_26;
      }
      uint64_t v10 = (uint64_t)(v7 + v7);
      if (v10 >= 1) {
        --v10;
      }
    }
    double v7 = (double)(v10 >> 1);
LABEL_26:
    *(void *)(a1 + 16) = (uint64_t)v7;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  *(void *)(a1 + 16) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
    goto LABEL_28;
  }
LABEL_27:
  operator delete(__p[0]);
LABEL_28:
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8FD0;
  strcpy((char *)__p[0], "minimum_remaining_drive_time_seconds");
  *(_DWORD *)(a1 + 24) = 10 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9240;
  strcpy((char *)__p[0], "use_freeflow_for_remaining_drive_time");
  BOOL v11 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 28) = v11;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v26 = a1;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91B0;
  strcpy((char *)__p[0], "high_traffic_level_threshold");
  double v12 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 64) = 0;
  uint64_t v13 = a1 + 64;
  *(double *)(a1 + 56) = v12;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9280;
  strcpy((char *)__p[0], "high_traffic_eta_update_thresholds");
  signed int v14 = (uint64_t *)sub_5C4AC(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v15 = *v14;
  uint64_t v16 = v14[1];
  if (*v14 != v16)
  {
    do
    {
      if (*(_DWORD *)(v15 + 8) != 2)
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_23FDF58;
      }
      int v17 = *(void **)v15;
      strcpy((char *)__p, "remaining_driving_time");
      HIBYTE(__p[2]) = 22;
      int v30 = 600 * sub_319F48(v17, (uint64_t)__p);
      char v28 = 8;
      strcpy((char *)v27, "eta_diff");
      int v29 = 600 * sub_319F48(v17, (uint64_t)v27);
      sub_3EC418(a1 + 32, &v30, &v29);
      if (v28 < 0)
      {
        operator delete(v27[0]);
        if (SHIBYTE(__p[2]) < 0) {
LABEL_44:
        }
          operator delete(__p[0]);
      }
      else if (SHIBYTE(__p[2]) < 0)
      {
        goto LABEL_44;
      }
      v15 += 16;
    }
    while (v15 != v16);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9260;
  strcpy((char *)__p[0], "low_traffic_eta_update_thresholds");
  int v18 = (uint64_t *)sub_5C4AC(a2, (uint64_t)__p);
  uint64_t v19 = v18;
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    if (*v19 == v21) {
      return v26;
    }
    while (1)
    {
LABEL_51:
      if (*(_DWORD *)(v20 + 8) != 2)
      {
        char v25 = __cxa_allocate_exception(8uLL);
        *char v25 = &off_23FDF58;
      }
      uint64_t v22 = *(void **)v20;
      strcpy((char *)__p, "remaining_driving_time");
      HIBYTE(__p[2]) = 22;
      int v30 = 600 * sub_319F48(v22, (uint64_t)__p);
      char v28 = 8;
      strcpy((char *)v27, "eta_diff");
      int v29 = 600 * sub_319F48(v22, (uint64_t)v27);
      sub_3EC418(v13, &v30, &v29);
      if (v28 < 0)
      {
        operator delete(v27[0]);
        if (SHIBYTE(__p[2]) < 0) {
LABEL_56:
        }
          operator delete(__p[0]);
      }
      else if (SHIBYTE(__p[2]) < 0)
      {
        goto LABEL_56;
      }
      v20 += 16;
      if (v20 == v21) {
        return v26;
      }
    }
  }
  uint64_t v20 = *v18;
  uint64_t v21 = v18[1];
  if (*v18 != v21) {
    goto LABEL_51;
  }
  return v26;
}

void sub_EE7D1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
  {
    operator delete(__p);
    uint64_t v26 = *v24;
    if (!*v24) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v26 = *v24;
    if (!*v24)
    {
LABEL_6:
      long long v27 = *v23;
      if (*v23)
      {
        *(void *)(a10 + 40) = v27;
        operator delete(v27);
      }
      _Unwind_Resume(exception_object);
    }
  }
  *(void *)(a10 + 72) = v26;
  operator delete(v26);
  goto LABEL_6;
}

void sub_EE7E4C()
{
  unk_25FC97F = 16641;
  word_25FC968 = 65;
  byte_25FC997 = 1;
  byte_25FC981 = 0;
}

uint64_t sub_EE7E74(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_EFAB60();
  sub_EF25B8(v4 + 1032, a2);
  *(void *)(a1 + 1536) = sub_3750CC(a2);
  *(void *)(a1 + 1544) = sub_376B90(a2);
  *(void *)(a1 + 1552) = sub_376594(a2);
  BYTE7(v25[1]) = 19;
  strcpy(v21, "DrivingETAEvaluastart_with_u_turn");
  strcpy((char *)v25, "DrivingETAEvaluator");
  uint64_t v22 = 0;
  int v23 = 0;
  uint64_t v24 = 0;
  unsigned int v5 = sub_374CDC((uint64_t)a2, (uint64_t)v25, (uint64_t *)&v22);
  v21[39] = 17;
  BOOL v6 = (void *)sub_560F4(v5, (uint64_t)&v21[16]);
  sub_EEA54C(a1 + 1560, v6);
  if ((v21[39] & 0x80000000) != 0) {
    operator delete(*(void **)&v21[16]);
  }
  double v7 = (void **)v22;
  if (v22)
  {
    double v8 = v23;
    uint64_t v9 = v22;
    if (v23 != v22)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      uint64_t v9 = v22;
    }
    int v23 = v7;
    operator delete(v9);
  }
  if (SBYTE7(v25[1]) < 0) {
    operator delete(*(void **)&v25[0]);
  }
  sub_EEA76C((_DWORD *)(a1 + 1584), (uint64_t)a2);
  BYTE7(v25[1]) = 19;
  strcpy((char *)v25 + 15, "ator");
  v25[0] = *(_OWORD *)v21;
  uint64_t v22 = 0;
  int v23 = 0;
  uint64_t v24 = 0;
  uint64_t v10 = sub_374CDC((uint64_t)a2, (uint64_t)v25, (uint64_t *)&v22);
  v21[39] = 21;
  strcpy(&v21[16], "aggressive_eta_factor");
  double v11 = sub_5C7E8(v10, (uint64_t)&v21[16]);
  if ((v21[39] & 0x80000000) != 0) {
    operator delete(*(void **)&v21[16]);
  }
  double v12 = (void **)v22;
  if (v22)
  {
    uint64_t v13 = v23;
    signed int v14 = v22;
    if (v23 != v22)
    {
      do
      {
        if (*((char *)v13 - 1) < 0) {
          operator delete(*(v13 - 3));
        }
        v13 -= 3;
      }
      while (v13 != v12);
      signed int v14 = v22;
    }
    int v23 = v12;
    operator delete(v14);
  }
  if (SBYTE7(v25[1]) < 0) {
    operator delete(*(void **)&v25[0]);
  }
  *(double *)(a1 + 1592) = v11;
  BYTE7(v25[1]) = 19;
  strcpy((char *)v25 + 15, "ator");
  v25[0] = *(_OWORD *)v21;
  uint64_t v22 = 0;
  int v23 = 0;
  uint64_t v24 = 0;
  uint64_t v15 = sub_374CDC((uint64_t)a2, (uint64_t)v25, (uint64_t *)&v22);
  *(void *)&v21[16] = operator new(0x30uLL);
  *(_OWORD *)&v21[24] = xmmword_20B9A80;
  strcpy(*(char **)&v21[16], "apply_transition_time_for_turn_dependent_speed");
  BOOL v16 = sub_29D62C(v15, (uint64_t)&v21[16]);
  if ((v21[39] & 0x80000000) != 0) {
    operator delete(*(void **)&v21[16]);
  }
  int v17 = (void **)v22;
  if (v22)
  {
    int v18 = v23;
    uint64_t v19 = v22;
    if (v23 != v22)
    {
      do
      {
        if (*((char *)v18 - 1) < 0) {
          operator delete(*(v18 - 3));
        }
        v18 -= 3;
      }
      while (v18 != v17);
      uint64_t v19 = v22;
    }
    int v23 = v17;
    operator delete(v19);
  }
  if (SBYTE7(v25[1]) < 0) {
    operator delete(*(void **)&v25[0]);
  }
  *(unsigned char *)(a1 + 1600) = v16;
  *(_WORD *)(a1 + 1602) = -1;
  return a1;
}

void sub_EE81A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_1A668(&a17);
  if (a25 < 0)
  {
    operator delete(a20);
    sub_39E6F0(v26);
    sub_3C7904(v25);
    _Unwind_Resume(a1);
  }
  sub_39E6F0(v26);
  sub_3C7904(v25);
  _Unwind_Resume(a1);
}

void *sub_EE8248@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int *a3@<X2>, int a4@<W4>, unint64_t *a5@<X8>)
{
  int v26 = *a3;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  if (!a4)
  {
    __n128 result = (void *)nullsub_1(a2);
    if (result[1] == *result) {
      return result;
    }
    signed int v14 = *(void **)nullsub_1(a2);
    unsigned int v15 = *(_DWORD *)sub_EADA60((uint64_t)v14);
    if (v15 > 0x7FFFFFFE) {
      unsigned int v15 = 0;
    }
    if (v15)
    {
      double v16 = (double)*(int *)(a1 + 1584) * 0.5;
      if (v16 < 0.0)
      {
LABEL_18:
        if (v16 <= -4.50359963e15) {
          goto LABEL_26;
        }
        uint64_t v17 = (uint64_t)(v16 + v16);
        if (v17 >= 1) {
          --v17;
        }
        goto LABEL_25;
      }
    }
    else
    {
      double v16 = (double)0 * 0.5;
      if (v16 < 0.0) {
        goto LABEL_18;
      }
    }
    if (v16 >= 4.50359963e15) {
      goto LABEL_26;
    }
    uint64_t v17 = (uint64_t)(v16 + v16) + 1;
LABEL_25:
    double v16 = (double)(v17 >> 1);
LABEL_26:
    BOOL v18 = __OFADD__((int)v16, v15);
    int v20 = (int)v16 + v15;
    char v19 = (v20 < 0) ^ v18;
    int v21 = v20 / 10;
    int v22 = v20 % 10;
    if (v19) {
      char v23 = -5;
    }
    else {
      char v23 = 5;
    }
    v26 += v21 + (((103 * (char)(v23 + v22)) >> 15) & 1) + ((103 * (char)(v23 + v22)) >> 10);
    sub_EE8AC4(a1, v14, &v26);
  }
  __n128 result = (void *)nullsub_1(a2);
  uint64_t v8 = result[1];
  if (v8 != *result)
  {
    uint64_t v9 = (void *)(v8 - 472);
    sub_EADA60((uint64_t)v9);
    sub_EE9C5C(a1, v9, &v26);
  }
  unint64_t v10 = *a5;
  unint64_t v11 = a5[1];
  unint64_t v25 = v10;
  if (v10 != v11)
  {
    long long v27 = (uint64_t *)(v11 - 288);
    if (v11 - 288 > v10)
    {
      do
      {
        __n128 result = sub_EE7018((uint64_t *)&v25, &v27);
        v25 += 288;
        v27 -= 36;
      }
      while (v25 < (unint64_t)v27);
      unint64_t v10 = *a5;
    }
  }
  double v12 = (double)*(int *)(v10 + 8) * 0.5;
  if (v12 >= 0.0)
  {
    if (v12 < 4.50359963e15)
    {
      uint64_t v13 = (uint64_t)(v12 + v12) + 1;
LABEL_32:
      double v12 = (double)(v13 >> 1);
    }
  }
  else if (v12 > -4.50359963e15)
  {
    uint64_t v13 = (uint64_t)(v12 + v12);
    if (v13 >= 1) {
      --v13;
    }
    goto LABEL_32;
  }
  *(_DWORD *)(v10 + 8) = (int)v12;
  return result;
}

void sub_EE8A18(_Unwind_Exception *a1)
{
  sub_3C7768(v1);
  _Unwind_Resume(a1);
}

void sub_EE8A2C(_Unwind_Exception *a1)
{
  sub_3C7768(v1);
  _Unwind_Resume(a1);
}

void sub_EE8A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  sub_3B0290((uint64_t *)va);
  sub_3C7768(v16);
  _Unwind_Resume(a1);
}

void sub_EE8A60(_Unwind_Exception *a1)
{
  sub_3C7768(v1);
  _Unwind_Resume(a1);
}

void sub_EE8A74(_Unwind_Exception *a1)
{
  sub_3C7768(v1);
  _Unwind_Resume(a1);
}

void sub_EE8A88(_Unwind_Exception *a1)
{
  sub_3C7768(v1);
  _Unwind_Resume(a1);
}

void sub_EE8A9C(_Unwind_Exception *a1)
{
  sub_3C7768(v1);
  _Unwind_Resume(a1);
}

void sub_EE8AB0(_Unwind_Exception *a1)
{
  sub_3C7768(v1);
  _Unwind_Resume(a1);
}

void sub_EE8AC4(uint64_t a1, void *a2, int *a3)
{
  uint64_t v5 = sub_EB0624(a2, 0);
  int v6 = *a3;
  sub_3BDCD8(*(void *)(a1 + 1536), *(unsigned int *)(v5 + 32) | ((unint64_t)*(unsigned __int16 *)(v5 + 36) << 32), v10);
  unint64_t v7 = v11;
  if ((v11 & 0x80u) != 0) {
    unint64_t v7 = (unint64_t)v10[1];
  }
  if (v7) {
    sub_26A18((uint64_t)&__p, (const char *)v10);
  }
  else {
    sub_26908((uint64_t)&__p);
  }
  if ((char)v11 < 0) {
    operator delete(v10[0]);
  }
  sub_480C((uint64_t)v9, v6);
}

void sub_EE9B40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,const void *a21,uint64_t a22,char a23)
{
  sub_26C4C(&a21);
  if (__p) {
    operator delete(__p);
  }
  sub_3B0290(v23);
  sub_4814((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void sub_EE9C5C(uint64_t a1, void *a2, int *a3)
{
  uint64_t v5 = sub_EB0624(a2, 0);
  int v6 = *a3;
  sub_3BDCD8(*(void *)(a1 + 1536), *(unsigned int *)(v5 + 32) | ((unint64_t)*(unsigned __int16 *)(v5 + 36) << 32), v10);
  unint64_t v7 = v11;
  if ((v11 & 0x80u) != 0) {
    unint64_t v7 = (unint64_t)v10[1];
  }
  if (v7) {
    sub_26A18((uint64_t)&__p, (const char *)v10);
  }
  else {
    sub_26908((uint64_t)&__p);
  }
  if ((char)v11 < 0) {
    operator delete(v10[0]);
  }
  sub_480C((uint64_t)v9, v6);
}

void sub_EEA410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23)
{
  if (__p) {
    operator delete(__p);
  }
  sub_3B0290(a13);
  sub_4814((uint64_t)&a23);
  _Unwind_Resume(a1);
}

double sub_EEA50C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int *a3@<X2>, int a4@<W4>, uint64_t a5@<X8>)
{
  sub_EE8248(a1, a2, a3, a4, (unint64_t *)&v7);
  double result = *(double *)&v7;
  *(_OWORD *)a5 = v7;
  *(void *)(a5 + 16) = v8;
  return result;
}

uint64_t sub_EEA54C(uint64_t a1, void *a2)
{
  __p[23] = 7;
  strcpy(__p, "penalty");
  *(_DWORD *)a1 = sub_319F48(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  __p[23] = 15;
  strcpy(__p, "speed_threshold");
  *(double *)(a1 + 8) = sub_5C7E8(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(void *)__p = operator new(0x20uLL);
  *(_OWORD *)&__p[8] = xmmword_20B5EB0;
  strcpy(*(char **)__p, "offroad_distance_threshold");
  double v4 = sub_5C7E8(a2, (uint64_t)__p) * 100.0;
  if (v4 >= 0.0)
  {
    double v5 = v4;
    if (v4 >= 4.50359963e15) {
      goto LABEL_13;
    }
    uint64_t v6 = (uint64_t)(v4 + v4) + 1;
  }
  else
  {
    double v5 = v4;
    if (v4 <= -4.50359963e15) {
      goto LABEL_13;
    }
    uint64_t v6 = (uint64_t)(v4 + v4);
    if (v6 >= 1) {
      --v6;
    }
  }
  double v5 = (double)(v6 >> 1);
LABEL_13:
  if (v5 < 9.22337204e18)
  {
    if (v4 >= 0.0)
    {
      if (v4 >= 4.50359963e15) {
        goto LABEL_24;
      }
      uint64_t v7 = (uint64_t)(v4 + v4) + 1;
    }
    else
    {
      if (v4 <= -4.50359963e15) {
        goto LABEL_24;
      }
      uint64_t v7 = (uint64_t)(v4 + v4);
      if (v7 >= 1) {
        --v7;
      }
    }
    double v4 = (double)(v7 >> 1);
LABEL_24:
    *(void *)(a1 + 16) = (uint64_t)v4;
    if ((__p[23] & 0x80000000) == 0) {
      return a1;
    }
    goto LABEL_26;
  }
  *(void *)(a1 + 16) = 0x7FFFFFFFFFFFFFFELL;
  if ((__p[23] & 0x80000000) == 0) {
    return a1;
  }
LABEL_26:
  operator delete(*(void **)__p);
  return a1;
}

void sub_EEA748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_EEA76C(_DWORD *a1, uint64_t a2)
{
  char v14 = 9;
  uint64_t v12 = 0;
  strcpy((char *)v13, "EVRouting");
  unint64_t v10 = 0;
  unsigned __int8 v11 = 0;
  uint64_t v3 = sub_374CDC(a2, (uint64_t)v13, (uint64_t *)&v10);
  __p = operator new(0x20uLL);
  long long v9 = xmmword_20B91B0;
  strcpy((char *)__p, "charging_stop_waiting_time_s");
  *a1 = sub_5D2EC(v3, &__p);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
  double v4 = (void **)v10;
  if (v10)
  {
    double v5 = v11;
    uint64_t v6 = v10;
    if (v11 != v10)
    {
      do
      {
        if (*((char *)v5 - 1) < 0) {
          operator delete(*(v5 - 3));
        }
        v5 -= 3;
      }
      while (v5 != v4);
      uint64_t v6 = v10;
    }
    unsigned __int8 v11 = v4;
    operator delete(v6);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  return a1;
}

void sub_EEA8A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_1A668(&a16);
    if ((a24 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    sub_1A668(&a16);
    if ((a24 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  operator delete(a19);
  _Unwind_Resume(a1);
}

unint64_t sub_EEA91C(uint64_t a1, unint64_t *a2, unsigned int *a3, uint64_t **a4, uint64_t **a5)
{
  uint64_t v8 = a2[5];
  uint64_t v9 = v8 / 100;
  __int16 v10 = v8 % 100;
  if (v8 < 0) {
    __int16 v11 = -50;
  }
  else {
    __int16 v11 = 50;
  }
  unint64_t v12 = *a2;
  uint64_t v13 = a1 + 1032;
  double v14 = (double)(v9 + (int)(((5243 * (__int16)(v11 + v10)) >> 19) + ((5243 * (__int16)(v11 + v10)) >> 31)));
  double v15 = v14 / (sub_EF37F0(a1 + 1032, *a2) / 3.6) * 10.0;
  if (v15 >= 0.0)
  {
    if (v15 >= 4.50359963e15) {
      goto LABEL_12;
    }
    uint64_t v16 = (uint64_t)(v15 + v15) + 1;
  }
  else
  {
    if (v15 <= -4.50359963e15) {
      goto LABEL_12;
    }
    uint64_t v16 = (uint64_t)(v15 + v15);
    if (v16 >= 1) {
      --v16;
    }
  }
  double v15 = (double)(v16 >> 1);
LABEL_12:
  double v17 = v14 / (sub_EF4078(v13, v12, a3, a4) / 3.6) * 10.0;
  if (v17 >= 0.0)
  {
    if (v17 < 4.50359963e15)
    {
      uint64_t v18 = (uint64_t)(v17 + v17) + 1;
LABEL_19:
      double v17 = (double)(v18 >> 1);
    }
  }
  else if (v17 > -4.50359963e15)
  {
    uint64_t v18 = (uint64_t)(v17 + v17);
    if (v18 >= 1) {
      --v18;
    }
    goto LABEL_19;
  }
  sub_EF4794(v13, v12, a3, a4, a5);
  sub_EF34EC(v13, v12, (uint64_t *)a5);
  return (int)v15 | ((unint64_t)(int)v17 << 32);
}

_DWORD *sub_EEABFC(uint64_t a1, void *a2, void *a3, int *a4, _DWORD *a5, unint64_t a6, unsigned int a7, uint64_t a8, uint64_t a9)
{
  *(_DWORD *)(a9 + 264) += *a5 + *a4;
  uint64_t v54 = a4 + 1;
  uint64_t v49 = a5 + 1;
  *(_DWORD *)(a9 + 268) += a5[1] + a4[1];
  *(_DWORD *)(a9 + 272) += a5[2] + a4[2];
  uint64_t v13 = a7;
  long long v53 = &a4[v13];
  *(_DWORD *)(a9 + 4) += a5[v13] + a4[v13];
  uint64_t v50 = &a5[v13];
  *(_DWORD *)(a9 + 284) += a5[v13];
  sub_EB04C4(a2);
  sub_EB04C4(a2);
  unint64_t v14 = a3[3];
  sub_EB04C4(a2);
  unint64_t v15 = a3[4];
  unint64_t v16 = v15 - 1;
  if (v14 > v15 - 1) {
    unint64_t v16 = v14;
  }
  unint64_t v51 = a6;
  if (v16 <= a6) {
    unint64_t v17 = a6;
  }
  else {
    unint64_t v17 = v16;
  }
  uint64_t v18 = *(void *)(a9 + 40);
  unint64_t v19 = (*(void *)(a9 + 48) - v18) >> 2;
  if (v19 <= v17)
  {
    unint64_t v20 = v17 + 1;
    int v57 = 0;
    if (v17 + 1 <= v19)
    {
      if (v17 + 1 < v19) {
        *(void *)(a9 + 48) = v18 + 4 * v20;
      }
    }
    else
    {
      sub_EE6948((unint64_t *)(a9 + 40), v17 + 1 - v19, (const float *)&v57);
    }
    uint64_t v21 = *(void *)(a9 + 64);
    uint64_t v22 = *(void *)(a9 + 72);
    int v56 = 0;
    unint64_t v23 = (v22 - v21) >> 2;
    if (v20 <= v23)
    {
      if (v20 < v23) {
        *(void *)(a9 + 72) = v21 + 4 * v20;
      }
    }
    else
    {
      sub_EE6948((unint64_t *)(a9 + 64), v20 - v23, (const float *)&v56);
    }
    uint64_t v24 = *(void *)(a9 + 16);
    uint64_t v25 = *(void *)(a9 + 24);
    int v55 = 0;
    unint64_t v26 = (v25 - v24) >> 2;
    if (v20 <= v26)
    {
      if (v20 < v26) {
        *(void *)(a9 + 24) = v24 + 4 * v20;
      }
    }
    else
    {
      sub_EE6948((unint64_t *)(a9 + 16), v20 - v26, (const float *)&v55);
    }
    unint64_t v15 = a3[4];
  }
  long long v27 = a3;
  unint64_t v28 = a3[3];
  if (v28 <= v15) {
    unint64_t v29 = v15;
  }
  else {
    unint64_t v29 = a3[3];
  }
  if (v28 < v15)
  {
    int v30 = 0;
    int v31 = 0;
    int v32 = 0;
    while (1)
    {
      sub_EB04C4(a2);
      uint64_t v35 = sub_EB0698((uint64_t)a2, v28);
      uint64_t v36 = v27[5];
      if ((unint64_t)v36 <= 1) {
        uint64_t v36 = 1;
      }
      double v37 = (double)v35 / (double)v36;
      double v38 = v37 * (double)*a4;
      if (v38 >= 0.0)
      {
        if (v38 >= 4.50359963e15) {
          goto LABEL_37;
        }
        uint64_t v39 = (uint64_t)(v38 + v38) + 1;
      }
      else
      {
        if (v38 <= -4.50359963e15) {
          goto LABEL_37;
        }
        uint64_t v39 = (uint64_t)(v38 + v38);
        if (v39 >= 1) {
          --v39;
        }
      }
      double v38 = (double)(v39 >> 1);
LABEL_37:
      double v40 = v37 * (double)(int)*v54;
      if (v40 >= 0.0)
      {
        if (v40 >= 4.50359963e15) {
          goto LABEL_45;
        }
        uint64_t v41 = (uint64_t)(v40 + v40) + 1;
      }
      else
      {
        if (v40 <= -4.50359963e15) {
          goto LABEL_45;
        }
        uint64_t v41 = (uint64_t)(v40 + v40);
        if (v41 >= 1) {
          --v41;
        }
      }
      double v40 = (double)(v41 >> 1);
LABEL_45:
      double v33 = v37 * (double)*v53;
      if (v33 >= 0.0)
      {
        if (v33 >= 4.50359963e15) {
          goto LABEL_26;
        }
        uint64_t v42 = (uint64_t)(v33 + v33) + 1;
      }
      else
      {
        if (v33 <= -4.50359963e15) {
          goto LABEL_26;
        }
        uint64_t v42 = (uint64_t)(v33 + v33);
        if (v42 >= 1) {
          --v42;
        }
      }
      double v33 = (double)(v42 >> 1);
LABEL_26:
      uint64_t v34 = 4 * v28;
      *(_DWORD *)(*(void *)(a9 + 40) + v34) = *(_DWORD *)(*(void *)(a9 + 40) + 4 * v28) + (int)v38;
      *(_DWORD *)(*(void *)(a9 + 64) + v34) = *(_DWORD *)(*(void *)(a9 + 64) + 4 * v28) + (int)v40;
      *(_DWORD *)(*(void *)(a9 + 16) + v34) = *(_DWORD *)(*(void *)(a9 + 16) + 4 * v28) + (int)v33;
      v30 += (int)v38;
      v31 += (int)v40;
      v32 += (int)v33;
      if (v29 == ++v28) {
        goto LABEL_53;
      }
    }
  }
  int v32 = 0;
  int v31 = 0;
  int v30 = 0;
LABEL_53:
  int v43 = *a4 - v30;
  int v44 = a4[1] - v31;
  int v45 = *v53 - v32;
  sub_EB04C4(a2);
  uint64_t v46 = 4 * v27[4] - 4;
  *(_DWORD *)(*(void *)(a9 + 40) + v46) += v43;
  *(_DWORD *)(*(void *)(a9 + 64) + v46) += v44;
  *(_DWORD *)(*(void *)(a9 + 16) + v46) += v45;
  sub_3B79D0((void **)(a9 + 112), a4);
  sub_3B79D0((void **)(a9 + 136), v54);
  sub_3B79D0((void **)(a9 + 88), v53);
  double result = sub_3B79D0((void **)(a9 + 160), a4 + 3);
  uint64_t v48 = 4 * v51;
  *(_DWORD *)(*(void *)(a9 + 40) + v48) = *a5 + *(_DWORD *)(*(void *)(a9 + 40) + 4 * v51);
  *(_DWORD *)(*(void *)(a9 + 64) + v48) += a5[1];
  *(_DWORD *)(*(void *)(a9 + 16) + v48) = *v50 + *(_DWORD *)(*(void *)(a9 + 16) + 4 * v51);
  if (v27[3])
  {
    sub_3B79D0((void **)(a9 + 184), v50);
    sub_3B79D0((void **)(a9 + 232), v49);
    return sub_3B79D0((void **)(a9 + 208), a5);
  }
  return result;
}

uint64_t sub_EEB0A4(uint64_t result, int *a2, int a3, uint64_t a4)
{
  int v4 = *(_DWORD *)(a4 + 4);
  double v5 = *(double *)(result + 1592) * (double)v4;
  if (v5 >= 0.0)
  {
    if (v5 >= 4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v6 = (uint64_t)(v5 + v5) + 1;
  }
  else
  {
    if (v5 <= -4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v6 = (uint64_t)(v5 + v5);
    if (v6 >= 1) {
      --v6;
    }
  }
  double v5 = (double)(v6 >> 1);
LABEL_9:
  *(_DWORD *)(a4 + 276) = (int)v5;
  int v7 = *(_DWORD *)(a4 + 268);
  if (v7 <= *(_DWORD *)(a4 + 272)) {
    int v7 = *(_DWORD *)(a4 + 272);
  }
  *(_DWORD *)(a4 + 280) = v7;
  int v8 = *a2;
  *(_DWORD *)a4 = *a2;
  if (a3 == 1)
  {
    int v9 = v4 / -10;
    int v10 = v4 % 10;
    if (v4 < 0) {
      char v11 = -5;
    }
    else {
      char v11 = 5;
    }
    *(_DWORD *)a4 = v9
                  + v8
                  + (((-103 * (char)(v11 + v10)) >> 15) & 1)
                  + ((-103 * (char)(v11 + v10)) >> 10);
    unint64_t v13 = *(void *)(a4 + 16);
    uint64_t v12 = *(void *)(a4 + 24);
    if (v13 != v12)
    {
      unint64_t v14 = (_DWORD *)(v12 - 4);
      if ((unint64_t)v14 > v13)
      {
        unint64_t v15 = v13 + 4;
        do
        {
          int v16 = *(_DWORD *)(v15 - 4);
          *(_DWORD *)(v15 - 4) = *v14;
          *v14-- = v16;
          BOOL v17 = v15 >= (unint64_t)v14;
          v15 += 4;
        }
        while (!v17);
      }
    }
    unint64_t v18 = *(void *)(a4 + 40);
    uint64_t v19 = *(void *)(a4 + 48);
    unint64_t v20 = (_DWORD *)(v19 - 4);
    if (v18 != v19 && (unint64_t)v20 > v18)
    {
      unint64_t v22 = v18 + 4;
      do
      {
        int v23 = *(_DWORD *)(v22 - 4);
        *(_DWORD *)(v22 - 4) = *v20;
        *v20-- = v23;
        BOOL v17 = v22 >= (unint64_t)v20;
        v22 += 4;
      }
      while (!v17);
    }
    unint64_t v24 = *(void *)(a4 + 64);
    uint64_t v25 = *(void *)(a4 + 72);
    unint64_t v26 = (_DWORD *)(v25 - 4);
    if (v24 != v25 && (unint64_t)v26 > v24)
    {
      unint64_t v28 = v24 + 4;
      do
      {
        int v29 = *(_DWORD *)(v28 - 4);
        *(_DWORD *)(v28 - 4) = *v26;
        *v26-- = v29;
        BOOL v17 = v28 >= (unint64_t)v26;
        v28 += 4;
      }
      while (!v17);
    }
    unint64_t v30 = *(void *)(a4 + 88);
    uint64_t v31 = *(void *)(a4 + 96);
    int v32 = (_DWORD *)(v31 - 4);
    if (v30 != v31 && (unint64_t)v32 > v30)
    {
      unint64_t v34 = v30 + 4;
      do
      {
        int v35 = *(_DWORD *)(v34 - 4);
        *(_DWORD *)(v34 - 4) = *v32;
        *v32-- = v35;
        BOOL v17 = v34 >= (unint64_t)v32;
        v34 += 4;
      }
      while (!v17);
    }
    unint64_t v36 = *(void *)(a4 + 112);
    uint64_t v37 = *(void *)(a4 + 120);
    double v38 = (_DWORD *)(v37 - 4);
    if (v36 != v37 && (unint64_t)v38 > v36)
    {
      unint64_t v40 = v36 + 4;
      do
      {
        int v41 = *(_DWORD *)(v40 - 4);
        *(_DWORD *)(v40 - 4) = *v38;
        *v38-- = v41;
        BOOL v17 = v40 >= (unint64_t)v38;
        v40 += 4;
      }
      while (!v17);
    }
    unint64_t v42 = *(void *)(a4 + 64);
    uint64_t v43 = *(void *)(a4 + 72);
    int v44 = (_DWORD *)(v43 - 4);
    if (v42 != v43 && (unint64_t)v44 > v42)
    {
      unint64_t v46 = v42 + 4;
      do
      {
        int v47 = *(_DWORD *)(v46 - 4);
        *(_DWORD *)(v46 - 4) = *v44;
        *v44-- = v47;
        BOOL v17 = v46 >= (unint64_t)v44;
        v46 += 4;
      }
      while (!v17);
    }
    unint64_t v48 = *(void *)(a4 + 160);
    uint64_t v49 = *(void *)(a4 + 168);
    uint64_t v50 = (_DWORD *)(v49 - 4);
    if (v48 != v49 && (unint64_t)v50 > v48)
    {
      unint64_t v52 = v48 + 4;
      do
      {
        int v53 = *(_DWORD *)(v52 - 4);
        *(_DWORD *)(v52 - 4) = *v50;
        *v50-- = v53;
        BOOL v17 = v52 >= (unint64_t)v50;
        v52 += 4;
      }
      while (!v17);
    }
    unint64_t v54 = *(void *)(a4 + 184);
    uint64_t v55 = *(void *)(a4 + 192);
    int v56 = (_DWORD *)(v55 - 4);
    if (v54 != v55 && (unint64_t)v56 > v54)
    {
      unint64_t v58 = v54 + 4;
      do
      {
        int v59 = *(_DWORD *)(v58 - 4);
        *(_DWORD *)(v58 - 4) = *v56;
        *v56-- = v59;
        BOOL v17 = v58 >= (unint64_t)v56;
        v58 += 4;
      }
      while (!v17);
    }
    unint64_t v60 = *(void *)(a4 + 232);
    uint64_t v61 = *(void *)(a4 + 240);
    uint64_t v62 = (_DWORD *)(v61 - 4);
    if (v60 != v61 && (unint64_t)v62 > v60)
    {
      unint64_t v64 = v60 + 4;
      do
      {
        int v65 = *(_DWORD *)(v64 - 4);
        *(_DWORD *)(v64 - 4) = *v62;
        *v62-- = v65;
        BOOL v17 = v64 >= (unint64_t)v62;
        v64 += 4;
      }
      while (!v17);
    }
    unint64_t v66 = *(void *)(a4 + 208);
    uint64_t v67 = *(void *)(a4 + 216);
    uint64_t v68 = (_DWORD *)(v67 - 4);
    if (v66 != v67 && (unint64_t)v68 > v66)
    {
      unint64_t v70 = v66 + 4;
      do
      {
        int v71 = *(_DWORD *)(v70 - 4);
        *(_DWORD *)(v70 - 4) = *v68;
        *v68-- = v71;
        BOOL v17 = v70 >= (unint64_t)v68;
        v70 += 4;
      }
      while (!v17);
    }
  }
  return result;
}

unint64_t sub_EEB3D0(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = HIDWORD(a2);
  if ((a2 & 0x8000000000000000) != 0)
  {
    uint64_t v7 = HIDWORD(a2) & 0x3FFFFFFF;
    uint64_t v4 = (a2 & 0x4000000000000000) == 0;
  }
  else
  {
    uint64_t v4 = 1;
    double v5 = sub_2E5E08(a1 + 16, a2, 1);
    if (v5)
    {
      uint64_t v6 = &v5[-*(int *)v5];
      if (*(unsigned __int16 *)v6 < 5u) {
        goto LABEL_24;
      }
      uint64_t v7 = *((unsigned __int16 *)v6 + 2);
      if (!v7) {
        goto LABEL_25;
      }
      int v8 = (unsigned int *)&v5[v7 + *(unsigned int *)&v5[v7]];
      if (*v8 <= (v2 & 0x3FFFFFFF)) {
        goto LABEL_24;
      }
      int v9 = (int *)((char *)v8 + (4 * v2) + *(unsigned int *)((char *)v8 + (4 * v2) + 4) + 4);
      int v10 = (unsigned __int16 *)((char *)v9 - *v9);
      unsigned int v11 = *v10;
      if (v11 >= 0xB)
      {
        if (!v10[5] || (int v12 = *(unsigned __int8 *)(a1 + 3889), v12 == 254))
        {
LABEL_17:
          uint64_t v7 = v10[2];
          if (v10[2])
          {
            BOOL v17 = (char *)v9 + v7 + *(unsigned int *)((char *)v9 + v7);
            if (*(_DWORD *)v17)
            {
              if ((v2 & 0x40000000) != 0)
              {
                a2 = *(void *)(v17 + 4);
                uint64_t v7 = HIDWORD(a2);
                uint64_t v4 = (a2 & 0xFF000000000000) == 0;
                return a2 | ((unint64_t)(unsigned __int16)v7 << 32) | (v4 << 48);
              }
              if (v11 < 0xD || (uint64_t v18 = v10[6]) == 0 || (*((unsigned char *)v9 + v18) & 1) == 0)
              {
                uint64_t v19 = *(void *)&v17[8 * (*(_DWORD *)v17 - 1) + 4];
                a2 = (v19 & 0xFFFFFFFFFFFFLL | ((unint64_t)((v19 & 0xFF000000000000) == 0) << 48)) ^ 0x1000000000000;
                uint64_t v7 = HIDWORD(a2);
                uint64_t v4 = HIWORD(a2);
                return a2 | ((unint64_t)(unsigned __int16)v7 << 32) | (v4 << 48);
              }
            }
            goto LABEL_24;
          }
LABEL_25:
          LODWORD(a2) = 0;
          goto LABEL_26;
        }
        unint64_t v13 = (int *)((char *)v9 + v10[5] + *(unsigned int *)((char *)v9 + v10[5]));
        unsigned int v16 = *v13;
        unint64_t v14 = (unsigned __int8 *)(v13 + 1);
        uint64_t v15 = v16;
        if (!v16)
        {
LABEL_24:
          LODWORD(a2) = 0;
          LOWORD(v7) = 0;
LABEL_26:
          uint64_t v4 = 1;
          return a2 | ((unint64_t)(unsigned __int16)v7 << 32) | (v4 << 48);
        }
        uint64_t v4 = 1;
        while (v12 != *v14)
        {
          LODWORD(a2) = 0;
          LOWORD(v7) = 0;
          ++v14;
          if (!--v15) {
            return a2 | ((unint64_t)(unsigned __int16)v7 << 32) | (v4 << 48);
          }
        }
      }
      if (v11 >= 5) {
        goto LABEL_17;
      }
      goto LABEL_24;
    }
    LODWORD(a2) = 0;
    LOWORD(v7) = 0;
  }
  return a2 | ((unint64_t)(unsigned __int16)v7 << 32) | (v4 << 48);
}

unint64_t sub_EEB580@<X0>(unint64_t result@<X0>, void *a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X3>, unsigned int *a5@<X4>, void *a6@<X5>, uint64_t a7@<X8>)
{
  unint64_t v8 = *(void *)(a4 + 24);
  if (!v8) {
    goto LABEL_58;
  }
  uint64_t v12 = result;
  if (*(_DWORD *)a3 && !*(unsigned char *)(result + 1600))
  {
    unint64_t v15 = *a3;
    uint64_t v16 = a6[1];
    v42[0] = *a6 - 8;
    v42[1] = v16;
    double result = (unint64_t)sub_EF44A0(result + 1032, v15, a5, v42);
    if (result) {
      goto LABEL_58;
    }
    unint64_t v8 = *(void *)(a4 + 24);
    unint64_t v13 = *(void *)(a4 + 32);
    uint64_t v14 = v8 <= v13 ? *(void *)(a4 + 32) : *(void *)(a4 + 24);
    if (v8 >= v13) {
      goto LABEL_58;
    }
  }
  else
  {
    unint64_t v13 = *(void *)(a4 + 32);
    if (v8 <= v13) {
      uint64_t v14 = *(void *)(a4 + 32);
    }
    else {
      uint64_t v14 = *(void *)(a4 + 24);
    }
    if (v8 >= v13) {
      goto LABEL_58;
    }
  }
  while (1)
  {
    double result = sub_EB0624(a2, v8);
    uint64_t v17 = *(void *)result;
    uint64_t v18 = (unsigned __int16 *)(*(void *)result - **(int **)result);
    unsigned int v19 = *v18;
    if (v19 >= 0xB)
    {
      if (v18[5])
      {
        int v20 = *(_DWORD *)(v17 + v18[5]);
        if ((v20 & 0x2000000) != 0)
        {
          if ((v20 & 0x4000000) == 0) {
            goto LABEL_32;
          }
          goto LABEL_16;
        }
      }
    }
    uint64_t v21 = *(int **)(result + 8);
    if (!v21) {
      break;
    }
    unint64_t v22 = (unsigned __int16 *)((char *)v21 - *v21);
    if (*v22 < 0x11u) {
      break;
    }
    uint64_t v23 = v22[8];
    if (!v23) {
      break;
    }
    __int16 v24 = *(_WORD *)((char *)v21 + v23);
    if (v19 >= 0xB && (v24 & 4) == 0) {
      goto LABEL_30;
    }
    if ((v24 & 4) == 0) {
      goto LABEL_32;
    }
LABEL_16:
    if (v14 == ++v8) {
      goto LABEL_58;
    }
  }
  if (v19 < 0xB) {
    goto LABEL_32;
  }
LABEL_30:
  uint64_t v26 = v18[5];
  if (v26 && (*(unsigned char *)(v17 + v26 + 2) & 1) != 0) {
    goto LABEL_16;
  }
LABEL_32:
  if (v13 == v8) {
    goto LABEL_58;
  }
  double result = sub_9CD338(v8 - 1);
  int v27 = (int)result >= -1 ? -1 : result;
  if ((result & 0x80000000) != 0) {
    goto LABEL_58;
  }
  unint64_t v28 = result;
  int v29 = v27 - result;
  while (2)
  {
    double result = sub_EB0624(a2, v28);
    uint64_t v31 = *(void *)result;
    int v32 = (unsigned __int16 *)(*(void *)result - **(int **)result);
    unsigned int v33 = *v32;
    if (v33 >= 0xB)
    {
      if (v32[5])
      {
        int v34 = *(_DWORD *)(v31 + v32[5]);
        if ((v34 & 0x2000000) != 0)
        {
          if ((v34 & 0x4000000) == 0) {
            break;
          }
          goto LABEL_39;
        }
      }
    }
    int v35 = *(int **)(result + 8);
    if (v35 && (unint64_t v36 = (unsigned __int16 *)((char *)v35 - *v35), *v36 >= 0x11u) && (v37 = v36[8]) != 0)
    {
      __int16 v38 = *(_WORD *)((char *)v35 + v37);
      if (v33 < 0xB || (v38 & 4) != 0)
      {
        if ((v38 & 4) == 0) {
          break;
        }
        goto LABEL_39;
      }
    }
    else if (v33 < 0xB)
    {
      break;
    }
    uint64_t v40 = v32[5];
    if (v40 && (*(unsigned char *)(v31 + v40 + 2) & 1) != 0)
    {
LABEL_39:
      --v28;
      if (__CFADD__(v29++, 1)) {
        goto LABEL_58;
      }
      continue;
    }
    break;
  }
  if (v28 != -1 && *(void *)(a4 + 24) > v28)
  {
    sub_46C8E0((uint64_t)a2, v28, v8, v42);
    double result = sub_EFAB64(v12, (uint64_t)v42, a5);
    *(void *)a7 = v28;
    *(void *)(a7 + 8) = result;
    *(_DWORD *)(a7 + 16) = v41;
    return result;
  }
LABEL_58:
  *(void *)a7 = 0;
  *(void *)(a7 + 8) = 0;
  *(_DWORD *)(a7 + 16) = 0;
  return result;
}

_DWORD *sub_EEB7E8(uint64_t a1, void *a2, void *a3, int *a4, _DWORD *a5, uint64_t a6, unsigned int a7, uint64_t a8, uint64_t a9)
{
  *(_DWORD *)(a9 + 264) += *a5 + *a4;
  uint64_t v55 = a4 + 1;
  uint64_t v50 = a5 + 1;
  *(_DWORD *)(a9 + 268) += a5[1] + a4[1];
  *(_DWORD *)(a9 + 272) += a5[2] + a4[2];
  uint64_t v11 = a7;
  unint64_t v54 = &a4[v11];
  *(_DWORD *)(a9 + 4) += a5[v11] + a4[v11];
  unint64_t v52 = &a5[v11];
  *(_DWORD *)(a9 + 284) += a5[v11];
  unint64_t v12 = sub_EB04C4(a2) + ~a6;
  unint64_t v13 = sub_EB04C4(a2) + ~a3[3];
  unint64_t v14 = sub_EB04C4(a2);
  unint64_t v15 = a3[4];
  unint64_t v16 = v14 - v15;
  if (v13 > v14 - v15) {
    unint64_t v16 = v13;
  }
  unint64_t v51 = v12;
  if (v16 <= v12) {
    unint64_t v17 = v12;
  }
  else {
    unint64_t v17 = v16;
  }
  uint64_t v18 = *(void *)(a9 + 40);
  unint64_t v19 = (*(void *)(a9 + 48) - v18) >> 2;
  if (v19 <= v17)
  {
    unint64_t v20 = v17 + 1;
    int v59 = 0;
    if (v17 + 1 <= v19)
    {
      if (v17 + 1 < v19) {
        *(void *)(a9 + 48) = v18 + 4 * v20;
      }
    }
    else
    {
      sub_EE6948((unint64_t *)(a9 + 40), v17 + 1 - v19, (const float *)&v59);
    }
    uint64_t v21 = *(void *)(a9 + 64);
    uint64_t v22 = *(void *)(a9 + 72);
    int v58 = 0;
    unint64_t v23 = (v22 - v21) >> 2;
    if (v20 <= v23)
    {
      if (v20 < v23) {
        *(void *)(a9 + 72) = v21 + 4 * v20;
      }
    }
    else
    {
      sub_EE6948((unint64_t *)(a9 + 64), v20 - v23, (const float *)&v58);
    }
    uint64_t v24 = *(void *)(a9 + 16);
    uint64_t v25 = *(void *)(a9 + 24);
    int v57 = 0;
    unint64_t v26 = (v25 - v24) >> 2;
    if (v20 <= v26)
    {
      if (v20 < v26) {
        *(void *)(a9 + 24) = v24 + 4 * v20;
      }
    }
    else
    {
      sub_EE6948((unint64_t *)(a9 + 16), v20 - v26, (const float *)&v57);
    }
    unint64_t v15 = a3[4];
  }
  int v27 = a3;
  unint64_t v28 = a3[3];
  if (v28 <= v15) {
    unint64_t v29 = v15;
  }
  else {
    unint64_t v29 = a3[3];
  }
  if (v28 < v15)
  {
    int v30 = 0;
    int v31 = 0;
    int v32 = 0;
    while (1)
    {
      unint64_t v35 = sub_EB04C4(a2);
      uint64_t v36 = sub_EB0698((uint64_t)a2, v28);
      uint64_t v37 = v27[5];
      if ((unint64_t)v37 <= 1) {
        uint64_t v37 = 1;
      }
      double v38 = (double)v36 / (double)v37;
      double v39 = v38 * (double)*a4;
      if (v39 >= 0.0)
      {
        if (v39 >= 4.50359963e15) {
          goto LABEL_37;
        }
        uint64_t v40 = (uint64_t)(v39 + v39) + 1;
      }
      else
      {
        if (v39 <= -4.50359963e15) {
          goto LABEL_37;
        }
        uint64_t v40 = (uint64_t)(v39 + v39);
        if (v40 >= 1) {
          --v40;
        }
      }
      double v39 = (double)(v40 >> 1);
LABEL_37:
      double v41 = v38 * (double)(int)*v55;
      if (v41 >= 0.0)
      {
        if (v41 >= 4.50359963e15) {
          goto LABEL_45;
        }
        uint64_t v42 = (uint64_t)(v41 + v41) + 1;
      }
      else
      {
        if (v41 <= -4.50359963e15) {
          goto LABEL_45;
        }
        uint64_t v42 = (uint64_t)(v41 + v41);
        if (v42 >= 1) {
          --v42;
        }
      }
      double v41 = (double)(v42 >> 1);
LABEL_45:
      double v33 = v38 * (double)*v54;
      if (v33 >= 0.0)
      {
        if (v33 >= 4.50359963e15) {
          goto LABEL_26;
        }
        uint64_t v43 = (uint64_t)(v33 + v33) + 1;
      }
      else
      {
        if (v33 <= -4.50359963e15) {
          goto LABEL_26;
        }
        uint64_t v43 = (uint64_t)(v33 + v33);
        if (v43 >= 1) {
          --v43;
        }
      }
      double v33 = (double)(v43 >> 1);
LABEL_26:
      uint64_t v34 = 4 * (v35 + ~v28);
      *(_DWORD *)(*(void *)(a9 + 40) + v34) += (int)v39;
      *(_DWORD *)(*(void *)(a9 + 64) + v34) += (int)v41;
      *(_DWORD *)(*(void *)(a9 + 16) + v34) += (int)v33;
      v30 += (int)v39;
      v31 += (int)v41;
      v32 += (int)v33;
      if (++v28 == v29) {
        goto LABEL_53;
      }
    }
  }
  int v32 = 0;
  int v31 = 0;
  int v30 = 0;
LABEL_53:
  int v44 = *a4 - v30;
  int v45 = a4[1] - v31;
  int v46 = *v54 - v32;
  unint64_t v47 = 4 * (sub_EB04C4(a2) - v27[4]);
  *(_DWORD *)(*(void *)(a9 + 40) + v47) += v44;
  *(_DWORD *)(*(void *)(a9 + 64) + v47) += v45;
  *(_DWORD *)(*(void *)(a9 + 16) + v47) += v46;
  sub_3B79D0((void **)(a9 + 112), a4);
  sub_3B79D0((void **)(a9 + 136), v55);
  sub_3B79D0((void **)(a9 + 88), v54);
  double result = sub_3B79D0((void **)(a9 + 160), a4 + 3);
  uint64_t v49 = 4 * v51;
  *(_DWORD *)(*(void *)(a9 + 40) + v49) = *a5 + *(_DWORD *)(*(void *)(a9 + 40) + 4 * v51);
  *(_DWORD *)(*(void *)(a9 + 64) + v49) += a5[1];
  *(_DWORD *)(*(void *)(a9 + 16) + v49) = *v52 + *(_DWORD *)(*(void *)(a9 + 16) + 4 * v51);
  if (v27[3])
  {
    sub_3B79D0((void **)(a9 + 184), v52);
    sub_3B79D0((void **)(a9 + 232), v50);
    return sub_3B79D0((void **)(a9 + 208), a5);
  }
  return result;
}

uint64_t sub_EEBCB0(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_EFCDBC();
  sub_EF25B8(v4 + 1032, a2);
  *(void *)(a1 + 1536) = sub_3750CC(a2);
  *(void *)(a1 + 1544) = sub_376B90(a2);
  *(void *)(a1 + 1552) = sub_376594(a2);
  BYTE7(v25[1]) = 19;
  strcpy(v21, "DrivingETAEvaluastart_with_u_turn");
  strcpy((char *)v25, "DrivingETAEvaluator");
  uint64_t v22 = 0;
  unint64_t v23 = 0;
  uint64_t v24 = 0;
  double v5 = sub_374CDC((uint64_t)a2, (uint64_t)v25, (uint64_t *)&v22);
  v21[39] = 17;
  uint64_t v6 = (void *)sub_560F4(v5, (uint64_t)&v21[16]);
  sub_EEE384(a1 + 1560, v6);
  if ((v21[39] & 0x80000000) != 0) {
    operator delete(*(void **)&v21[16]);
  }
  uint64_t v7 = (void **)v22;
  if (v22)
  {
    unint64_t v8 = v23;
    int v9 = v22;
    if (v23 != v22)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      int v9 = v22;
    }
    unint64_t v23 = v7;
    operator delete(v9);
  }
  if (SBYTE7(v25[1]) < 0) {
    operator delete(*(void **)&v25[0]);
  }
  sub_EEE5A4((_DWORD *)(a1 + 1584), (uint64_t)a2);
  BYTE7(v25[1]) = 19;
  strcpy((char *)v25 + 15, "ator");
  v25[0] = *(_OWORD *)v21;
  uint64_t v22 = 0;
  unint64_t v23 = 0;
  uint64_t v24 = 0;
  int v10 = sub_374CDC((uint64_t)a2, (uint64_t)v25, (uint64_t *)&v22);
  v21[39] = 21;
  strcpy(&v21[16], "aggressive_eta_factor");
  double v11 = sub_5C7E8(v10, (uint64_t)&v21[16]);
  if ((v21[39] & 0x80000000) != 0) {
    operator delete(*(void **)&v21[16]);
  }
  unint64_t v12 = (void **)v22;
  if (v22)
  {
    unint64_t v13 = v23;
    unint64_t v14 = v22;
    if (v23 != v22)
    {
      do
      {
        if (*((char *)v13 - 1) < 0) {
          operator delete(*(v13 - 3));
        }
        v13 -= 3;
      }
      while (v13 != v12);
      unint64_t v14 = v22;
    }
    unint64_t v23 = v12;
    operator delete(v14);
  }
  if (SBYTE7(v25[1]) < 0) {
    operator delete(*(void **)&v25[0]);
  }
  *(double *)(a1 + 1592) = v11;
  BYTE7(v25[1]) = 19;
  strcpy((char *)v25 + 15, "ator");
  v25[0] = *(_OWORD *)v21;
  uint64_t v22 = 0;
  unint64_t v23 = 0;
  uint64_t v24 = 0;
  unint64_t v15 = sub_374CDC((uint64_t)a2, (uint64_t)v25, (uint64_t *)&v22);
  *(void *)&v21[16] = operator new(0x30uLL);
  *(_OWORD *)&v21[24] = xmmword_20B9A80;
  strcpy(*(char **)&v21[16], "apply_transition_time_for_turn_dependent_speed");
  BOOL v16 = sub_29D62C(v15, (uint64_t)&v21[16]);
  if ((v21[39] & 0x80000000) != 0) {
    operator delete(*(void **)&v21[16]);
  }
  unint64_t v17 = (void **)v22;
  if (v22)
  {
    uint64_t v18 = v23;
    unint64_t v19 = v22;
    if (v23 != v22)
    {
      do
      {
        if (*((char *)v18 - 1) < 0) {
          operator delete(*(v18 - 3));
        }
        v18 -= 3;
      }
      while (v18 != v17);
      unint64_t v19 = v22;
    }
    unint64_t v23 = v17;
    operator delete(v19);
  }
  if (SBYTE7(v25[1]) < 0) {
    operator delete(*(void **)&v25[0]);
  }
  *(unsigned char *)(a1 + 1600) = v16;
  *(_WORD *)(a1 + 1602) = -1;
  return a1;
}

void sub_EEBFE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_1A668(&a17);
  if (a25 < 0)
  {
    operator delete(a20);
    sub_39E6F0(v26);
    sub_3C7904(v25);
    _Unwind_Resume(a1);
  }
  sub_39E6F0(v26);
  sub_3C7904(v25);
  _Unwind_Resume(a1);
}

void *sub_EEC084@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int *a3@<X2>, int a4@<W4>, unint64_t *a5@<X8>)
{
  int v26 = *a3;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  if (!a4)
  {
    double result = (void *)nullsub_1(a2);
    if (result[1] == *result) {
      return result;
    }
    unint64_t v14 = *(void **)nullsub_1(a2);
    unsigned int v15 = *(_DWORD *)sub_374DF4((uint64_t)v14);
    if (v15 > 0x7FFFFFFE) {
      unsigned int v15 = 0;
    }
    if (v15)
    {
      double v16 = (double)*(int *)(a1 + 1584) * 0.5;
      if (v16 < 0.0)
      {
LABEL_18:
        if (v16 <= -4.50359963e15) {
          goto LABEL_26;
        }
        uint64_t v17 = (uint64_t)(v16 + v16);
        if (v17 >= 1) {
          --v17;
        }
        goto LABEL_25;
      }
    }
    else
    {
      double v16 = (double)0 * 0.5;
      if (v16 < 0.0) {
        goto LABEL_18;
      }
    }
    if (v16 >= 4.50359963e15) {
      goto LABEL_26;
    }
    uint64_t v17 = (uint64_t)(v16 + v16) + 1;
LABEL_25:
    double v16 = (double)(v17 >> 1);
LABEL_26:
    BOOL v18 = __OFADD__((int)v16, v15);
    int v20 = (int)v16 + v15;
    char v19 = (v20 < 0) ^ v18;
    int v21 = v20 / 10;
    int v22 = v20 % 10;
    if (v19) {
      char v23 = -5;
    }
    else {
      char v23 = 5;
    }
    v26 += v21 + (((103 * (char)(v23 + v22)) >> 15) & 1) + ((103 * (char)(v23 + v22)) >> 10);
    sub_EEC8FC(a1, v14, &v26);
  }
  double result = (void *)nullsub_1(a2);
  uint64_t v8 = result[1];
  if (v8 != *result)
  {
    int v9 = (void *)(v8 - 1056);
    sub_374DF4((uint64_t)v9);
    sub_EEDA94(a1, v9, &v26);
  }
  unint64_t v10 = *a5;
  unint64_t v11 = a5[1];
  unint64_t v25 = v10;
  if (v10 != v11)
  {
    int v27 = (uint64_t *)(v11 - 288);
    if (v11 - 288 > v10)
    {
      do
      {
        double result = sub_EE7018((uint64_t *)&v25, &v27);
        v25 += 288;
        v27 -= 36;
      }
      while (v25 < (unint64_t)v27);
      unint64_t v10 = *a5;
    }
  }
  double v12 = (double)*(int *)(v10 + 8) * 0.5;
  if (v12 >= 0.0)
  {
    if (v12 < 4.50359963e15)
    {
      uint64_t v13 = (uint64_t)(v12 + v12) + 1;
LABEL_32:
      double v12 = (double)(v13 >> 1);
    }
  }
  else if (v12 > -4.50359963e15)
  {
    uint64_t v13 = (uint64_t)(v12 + v12);
    if (v13 >= 1) {
      --v13;
    }
    goto LABEL_32;
  }
  *(_DWORD *)(v10 + 8) = (int)v12;
  return result;
}

void sub_EEC850(_Unwind_Exception *a1)
{
  sub_3C7768(v1);
  _Unwind_Resume(a1);
}

void sub_EEC864(_Unwind_Exception *a1)
{
  sub_3C7768(v1);
  _Unwind_Resume(a1);
}

void sub_EEC878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  sub_3B0290((uint64_t *)va);
  sub_3C7768(v16);
  _Unwind_Resume(a1);
}

void sub_EEC898(_Unwind_Exception *a1)
{
  sub_3C7768(v1);
  _Unwind_Resume(a1);
}

void sub_EEC8AC(_Unwind_Exception *a1)
{
  sub_3C7768(v1);
  _Unwind_Resume(a1);
}

void sub_EEC8C0(_Unwind_Exception *a1)
{
  sub_3C7768(v1);
  _Unwind_Resume(a1);
}

void sub_EEC8D4(_Unwind_Exception *a1)
{
  sub_3C7768(v1);
  _Unwind_Resume(a1);
}

void sub_EEC8E8(_Unwind_Exception *a1)
{
  sub_3C7768(v1);
  _Unwind_Resume(a1);
}

void sub_EEC8FC(uint64_t a1, void *a2, int *a3)
{
  uint64_t v5 = sub_46C8EC(a2, 0);
  int v6 = *a3;
  sub_3BDCD8(*(void *)(a1 + 1536), *(unsigned int *)(v5 + 32) | ((unint64_t)*(unsigned __int16 *)(v5 + 36) << 32), v10);
  unint64_t v7 = v11;
  if ((v11 & 0x80u) != 0) {
    unint64_t v7 = (unint64_t)v10[1];
  }
  if (v7) {
    sub_26A18((uint64_t)&__p, (const char *)v10);
  }
  else {
    sub_26908((uint64_t)&__p);
  }
  if ((char)v11 < 0) {
    operator delete(v10[0]);
  }
  sub_480C((uint64_t)v9, v6);
}

void sub_EED978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,const void *a21,uint64_t a22,char a23)
{
  sub_26C4C(&a21);
  if (__p) {
    operator delete(__p);
  }
  sub_3B0290(v23);
  sub_4814((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void sub_EEDA94(uint64_t a1, void *a2, int *a3)
{
  uint64_t v5 = sub_46C8EC(a2, 0);
  int v6 = *a3;
  sub_3BDCD8(*(void *)(a1 + 1536), *(unsigned int *)(v5 + 32) | ((unint64_t)*(unsigned __int16 *)(v5 + 36) << 32), v10);
  unint64_t v7 = v11;
  if ((v11 & 0x80u) != 0) {
    unint64_t v7 = (unint64_t)v10[1];
  }
  if (v7) {
    sub_26A18((uint64_t)&__p, (const char *)v10);
  }
  else {
    sub_26908((uint64_t)&__p);
  }
  if ((char)v11 < 0) {
    operator delete(v10[0]);
  }
  sub_480C((uint64_t)v9, v6);
}

void sub_EEE248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23)
{
  if (__p) {
    operator delete(__p);
  }
  sub_3B0290(a13);
  sub_4814((uint64_t)&a23);
  _Unwind_Resume(a1);
}

double sub_EEE344@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int *a3@<X2>, int a4@<W4>, uint64_t a5@<X8>)
{
  sub_EEC084(a1, a2, a3, a4, (unint64_t *)&v7);
  double result = *(double *)&v7;
  *(_OWORD *)a5 = v7;
  *(void *)(a5 + 16) = v8;
  return result;
}

uint64_t sub_EEE384(uint64_t a1, void *a2)
{
  __p[23] = 7;
  strcpy(__p, "penalty");
  *(_DWORD *)a1 = sub_319F48(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  __p[23] = 15;
  strcpy(__p, "speed_threshold");
  *(double *)(a1 + 8) = sub_5C7E8(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(void *)__p = operator new(0x20uLL);
  *(_OWORD *)&__p[8] = xmmword_20B5EB0;
  strcpy(*(char **)__p, "offroad_distance_threshold");
  double v4 = sub_5C7E8(a2, (uint64_t)__p) * 100.0;
  if (v4 >= 0.0)
  {
    double v5 = v4;
    if (v4 >= 4.50359963e15) {
      goto LABEL_13;
    }
    uint64_t v6 = (uint64_t)(v4 + v4) + 1;
  }
  else
  {
    double v5 = v4;
    if (v4 <= -4.50359963e15) {
      goto LABEL_13;
    }
    uint64_t v6 = (uint64_t)(v4 + v4);
    if (v6 >= 1) {
      --v6;
    }
  }
  double v5 = (double)(v6 >> 1);
LABEL_13:
  if (v5 < 9.22337204e18)
  {
    if (v4 >= 0.0)
    {
      if (v4 >= 4.50359963e15) {
        goto LABEL_24;
      }
      uint64_t v7 = (uint64_t)(v4 + v4) + 1;
    }
    else
    {
      if (v4 <= -4.50359963e15) {
        goto LABEL_24;
      }
      uint64_t v7 = (uint64_t)(v4 + v4);
      if (v7 >= 1) {
        --v7;
      }
    }
    double v4 = (double)(v7 >> 1);
LABEL_24:
    *(void *)(a1 + 16) = (uint64_t)v4;
    if ((__p[23] & 0x80000000) == 0) {
      return a1;
    }
    goto LABEL_26;
  }
  *(void *)(a1 + 16) = 0x7FFFFFFFFFFFFFFELL;
  if ((__p[23] & 0x80000000) == 0) {
    return a1;
  }
LABEL_26:
  operator delete(*(void **)__p);
  return a1;
}

void sub_EEE580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_EEE5A4(_DWORD *a1, uint64_t a2)
{
  char v14 = 9;
  uint64_t v12 = 0;
  strcpy((char *)v13, "EVRouting");
  unint64_t v10 = 0;
  unsigned __int8 v11 = 0;
  uint64_t v3 = sub_374CDC(a2, (uint64_t)v13, (uint64_t *)&v10);
  __p = operator new(0x20uLL);
  long long v9 = xmmword_20B91B0;
  strcpy((char *)__p, "charging_stop_waiting_time_s");
  *a1 = sub_5D2EC(v3, &__p);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
  double v4 = (void **)v10;
  if (v10)
  {
    double v5 = v11;
    uint64_t v6 = v10;
    if (v11 != v10)
    {
      do
      {
        if (*((char *)v5 - 1) < 0) {
          operator delete(*(v5 - 3));
        }
        v5 -= 3;
      }
      while (v5 != v4);
      uint64_t v6 = v10;
    }
    unsigned __int8 v11 = v4;
    operator delete(v6);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  return a1;
}

void sub_EEE6D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_1A668(&a16);
    if ((a24 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    sub_1A668(&a16);
    if ((a24 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  operator delete(a19);
  _Unwind_Resume(a1);
}

_DWORD *sub_EEE754(uint64_t a1, void *a2, void *a3, int *a4, _DWORD *a5, unint64_t a6, unsigned int a7, uint64_t a8, uint64_t a9)
{
  *(_DWORD *)(a9 + 264) += *a5 + *a4;
  uint64_t v55 = a4 + 1;
  uint64_t v50 = a5 + 1;
  *(_DWORD *)(a9 + 268) += a5[1] + a4[1];
  *(_DWORD *)(a9 + 272) += a5[2] + a4[2];
  uint64_t v13 = a7;
  unint64_t v54 = &a4[v13];
  *(_DWORD *)(a9 + 4) += a5[v13] + a4[v13];
  unint64_t v51 = &a5[v13];
  *(_DWORD *)(a9 + 284) += a5[v13];
  sub_46C760(a2);
  sub_46C760(a2);
  unint64_t v14 = a3[3];
  sub_46C760(a2);
  unint64_t v15 = a3[4];
  unint64_t v16 = v15 - 1;
  if (v14 > v15 - 1) {
    unint64_t v16 = v14;
  }
  unint64_t v52 = a6;
  if (v16 <= a6) {
    unint64_t v17 = a6;
  }
  else {
    unint64_t v17 = v16;
  }
  uint64_t v18 = *(void *)(a9 + 40);
  unint64_t v19 = (*(void *)(a9 + 48) - v18) >> 2;
  if (v19 <= v17)
  {
    unint64_t v20 = v17 + 1;
    int v58 = 0;
    if (v17 + 1 <= v19)
    {
      if (v17 + 1 < v19) {
        *(void *)(a9 + 48) = v18 + 4 * v20;
      }
    }
    else
    {
      sub_EE6948((unint64_t *)(a9 + 40), v17 + 1 - v19, (const float *)&v58);
    }
    uint64_t v21 = *(void *)(a9 + 64);
    uint64_t v22 = *(void *)(a9 + 72);
    int v57 = 0;
    unint64_t v23 = (v22 - v21) >> 2;
    if (v20 <= v23)
    {
      if (v20 < v23) {
        *(void *)(a9 + 72) = v21 + 4 * v20;
      }
    }
    else
    {
      sub_EE6948((unint64_t *)(a9 + 64), v20 - v23, (const float *)&v57);
    }
    uint64_t v24 = *(void *)(a9 + 16);
    uint64_t v25 = *(void *)(a9 + 24);
    int v56 = 0;
    unint64_t v26 = (v25 - v24) >> 2;
    if (v20 <= v26)
    {
      if (v20 < v26) {
        *(void *)(a9 + 24) = v24 + 4 * v20;
      }
    }
    else
    {
      sub_EE6948((unint64_t *)(a9 + 16), v20 - v26, (const float *)&v56);
    }
    unint64_t v15 = a3[4];
  }
  int v27 = a3;
  unint64_t v28 = a3[3];
  if (v28 <= v15) {
    unint64_t v29 = v15;
  }
  else {
    unint64_t v29 = a3[3];
  }
  if (v28 < v15)
  {
    int v30 = 0;
    int v31 = 0;
    int v32 = 0;
    while (1)
    {
      sub_46C760(a2);
      uint64_t v36 = sub_46CCC8(a2, v28, v35);
      uint64_t v37 = v27[5];
      if ((unint64_t)v37 <= 1) {
        uint64_t v37 = 1;
      }
      double v38 = (double)v36 / (double)v37;
      double v39 = v38 * (double)*a4;
      if (v39 >= 0.0)
      {
        if (v39 >= 4.50359963e15) {
          goto LABEL_37;
        }
        uint64_t v40 = (uint64_t)(v39 + v39) + 1;
      }
      else
      {
        if (v39 <= -4.50359963e15) {
          goto LABEL_37;
        }
        uint64_t v40 = (uint64_t)(v39 + v39);
        if (v40 >= 1) {
          --v40;
        }
      }
      double v39 = (double)(v40 >> 1);
LABEL_37:
      double v41 = v38 * (double)(int)*v55;
      if (v41 >= 0.0)
      {
        if (v41 >= 4.50359963e15) {
          goto LABEL_45;
        }
        uint64_t v42 = (uint64_t)(v41 + v41) + 1;
      }
      else
      {
        if (v41 <= -4.50359963e15) {
          goto LABEL_45;
        }
        uint64_t v42 = (uint64_t)(v41 + v41);
        if (v42 >= 1) {
          --v42;
        }
      }
      double v41 = (double)(v42 >> 1);
LABEL_45:
      double v33 = v38 * (double)*v54;
      if (v33 >= 0.0)
      {
        if (v33 >= 4.50359963e15) {
          goto LABEL_26;
        }
        uint64_t v43 = (uint64_t)(v33 + v33) + 1;
      }
      else
      {
        if (v33 <= -4.50359963e15) {
          goto LABEL_26;
        }
        uint64_t v43 = (uint64_t)(v33 + v33);
        if (v43 >= 1) {
          --v43;
        }
      }
      double v33 = (double)(v43 >> 1);
LABEL_26:
      uint64_t v34 = 4 * v28;
      *(_DWORD *)(*(void *)(a9 + 40) + v34) = *(_DWORD *)(*(void *)(a9 + 40) + 4 * v28) + (int)v39;
      *(_DWORD *)(*(void *)(a9 + 64) + v34) = *(_DWORD *)(*(void *)(a9 + 64) + 4 * v28) + (int)v41;
      *(_DWORD *)(*(void *)(a9 + 16) + v34) = *(_DWORD *)(*(void *)(a9 + 16) + 4 * v28) + (int)v33;
      v30 += (int)v39;
      v31 += (int)v41;
      v32 += (int)v33;
      if (v29 == ++v28) {
        goto LABEL_53;
      }
    }
  }
  int v32 = 0;
  int v31 = 0;
  int v30 = 0;
LABEL_53:
  int v44 = *a4 - v30;
  int v45 = a4[1] - v31;
  int v46 = *v54 - v32;
  sub_46C760(a2);
  uint64_t v47 = 4 * v27[4] - 4;
  *(_DWORD *)(*(void *)(a9 + 40) + v47) += v44;
  *(_DWORD *)(*(void *)(a9 + 64) + v47) += v45;
  *(_DWORD *)(*(void *)(a9 + 16) + v47) += v46;
  sub_3B79D0((void **)(a9 + 112), a4);
  sub_3B79D0((void **)(a9 + 136), v55);
  sub_3B79D0((void **)(a9 + 88), v54);
  double result = sub_3B79D0((void **)(a9 + 160), a4 + 3);
  uint64_t v49 = 4 * v52;
  *(_DWORD *)(*(void *)(a9 + 40) + v49) = *a5 + *(_DWORD *)(*(void *)(a9 + 40) + 4 * v52);
  *(_DWORD *)(*(void *)(a9 + 64) + v49) += a5[1];
  *(_DWORD *)(*(void *)(a9 + 16) + v49) = *v51 + *(_DWORD *)(*(void *)(a9 + 16) + 4 * v52);
  if (v27[3])
  {
    sub_3B79D0((void **)(a9 + 184), v51);
    sub_3B79D0((void **)(a9 + 232), v50);
    return sub_3B79D0((void **)(a9 + 208), a5);
  }
  return result;
}

unint64_t sub_EEEBFC@<X0>(unint64_t result@<X0>, void *a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X3>, unsigned int *a5@<X4>, void *a6@<X5>, uint64_t a7@<X8>)
{
  unint64_t v8 = *(void *)(a4 + 24);
  if (!v8) {
    goto LABEL_58;
  }
  uint64_t v12 = result;
  if (*(_DWORD *)a3 && !*(unsigned char *)(result + 1600))
  {
    unint64_t v15 = *a3;
    uint64_t v16 = a6[1];
    v42[0] = *a6 - 8;
    v42[1] = v16;
    double result = (unint64_t)sub_EF44A0(result + 1032, v15, a5, v42);
    if (result) {
      goto LABEL_58;
    }
    unint64_t v8 = *(void *)(a4 + 24);
    unint64_t v13 = *(void *)(a4 + 32);
    uint64_t v14 = v8 <= v13 ? *(void *)(a4 + 32) : *(void *)(a4 + 24);
    if (v8 >= v13) {
      goto LABEL_58;
    }
  }
  else
  {
    unint64_t v13 = *(void *)(a4 + 32);
    if (v8 <= v13) {
      uint64_t v14 = *(void *)(a4 + 32);
    }
    else {
      uint64_t v14 = *(void *)(a4 + 24);
    }
    if (v8 >= v13) {
      goto LABEL_58;
    }
  }
  while (1)
  {
    double result = sub_46C8EC(a2, v8);
    uint64_t v17 = *(void *)result;
    uint64_t v18 = (unsigned __int16 *)(*(void *)result - **(int **)result);
    unsigned int v19 = *v18;
    if (v19 >= 0xB)
    {
      if (v18[5])
      {
        int v20 = *(_DWORD *)(v17 + v18[5]);
        if ((v20 & 0x2000000) != 0)
        {
          if ((v20 & 0x4000000) == 0) {
            goto LABEL_32;
          }
          goto LABEL_16;
        }
      }
    }
    uint64_t v21 = *(int **)(result + 8);
    if (!v21) {
      break;
    }
    uint64_t v22 = (unsigned __int16 *)((char *)v21 - *v21);
    if (*v22 < 0x11u) {
      break;
    }
    uint64_t v23 = v22[8];
    if (!v23) {
      break;
    }
    __int16 v24 = *(_WORD *)((char *)v21 + v23);
    if (v19 >= 0xB && (v24 & 4) == 0) {
      goto LABEL_30;
    }
    if ((v24 & 4) == 0) {
      goto LABEL_32;
    }
LABEL_16:
    if (v14 == ++v8) {
      goto LABEL_58;
    }
  }
  if (v19 < 0xB) {
    goto LABEL_32;
  }
LABEL_30:
  uint64_t v26 = v18[5];
  if (v26 && (*(unsigned char *)(v17 + v26 + 2) & 1) != 0) {
    goto LABEL_16;
  }
LABEL_32:
  if (v13 == v8) {
    goto LABEL_58;
  }
  double result = sub_9CD338(v8 - 1);
  int v27 = (int)result >= -1 ? -1 : result;
  if ((result & 0x80000000) != 0) {
    goto LABEL_58;
  }
  unint64_t v28 = result;
  int v29 = v27 - result;
  while (2)
  {
    double result = sub_46C8EC(a2, v28);
    uint64_t v31 = *(void *)result;
    int v32 = (unsigned __int16 *)(*(void *)result - **(int **)result);
    unsigned int v33 = *v32;
    if (v33 >= 0xB)
    {
      if (v32[5])
      {
        int v34 = *(_DWORD *)(v31 + v32[5]);
        if ((v34 & 0x2000000) != 0)
        {
          if ((v34 & 0x4000000) == 0) {
            break;
          }
          goto LABEL_39;
        }
      }
    }
    double v35 = *(int **)(result + 8);
    if (v35 && (uint64_t v36 = (unsigned __int16 *)((char *)v35 - *v35), *v36 >= 0x11u) && (v37 = v36[8]) != 0)
    {
      __int16 v38 = *(_WORD *)((char *)v35 + v37);
      if (v33 < 0xB || (v38 & 4) != 0)
      {
        if ((v38 & 4) == 0) {
          break;
        }
        goto LABEL_39;
      }
    }
    else if (v33 < 0xB)
    {
      break;
    }
    uint64_t v40 = v32[5];
    if (v40 && (*(unsigned char *)(v31 + v40 + 2) & 1) != 0)
    {
LABEL_39:
      --v28;
      if (__CFADD__(v29++, 1)) {
        goto LABEL_58;
      }
      continue;
    }
    break;
  }
  if (v28 != -1 && *(void *)(a4 + 24) > v28)
  {
    sub_46C8E0((uint64_t)a2, v28, v8, v42);
    double result = sub_EFCDC0(v12, (uint64_t)v42, a5);
    *(void *)a7 = v28;
    *(void *)(a7 + 8) = result;
    *(_DWORD *)(a7 + 16) = v41;
    return result;
  }
LABEL_58:
  *(void *)a7 = 0;
  *(void *)(a7 + 8) = 0;
  *(_DWORD *)(a7 + 16) = 0;
  return result;
}

_DWORD *sub_EEEE64(uint64_t a1, void *a2, void *a3, int *a4, _DWORD *a5, uint64_t a6, unsigned int a7, uint64_t a8, uint64_t a9)
{
  *(_DWORD *)(a9 + 264) += *a5 + *a4;
  int v56 = a4 + 1;
  unint64_t v51 = a5 + 1;
  *(_DWORD *)(a9 + 268) += a5[1] + a4[1];
  *(_DWORD *)(a9 + 272) += a5[2] + a4[2];
  uint64_t v11 = a7;
  uint64_t v55 = &a4[v11];
  *(_DWORD *)(a9 + 4) += a5[v11] + a4[v11];
  int v53 = &a5[v11];
  *(_DWORD *)(a9 + 284) += a5[v11];
  unint64_t v12 = sub_46C760(a2) + ~a6;
  unint64_t v13 = sub_46C760(a2) + ~a3[3];
  unint64_t v14 = sub_46C760(a2);
  unint64_t v15 = a3[4];
  unint64_t v16 = v14 - v15;
  if (v13 > v14 - v15) {
    unint64_t v16 = v13;
  }
  unint64_t v52 = v12;
  if (v16 <= v12) {
    unint64_t v17 = v12;
  }
  else {
    unint64_t v17 = v16;
  }
  uint64_t v18 = *(void *)(a9 + 40);
  unint64_t v19 = (*(void *)(a9 + 48) - v18) >> 2;
  if (v19 <= v17)
  {
    unint64_t v20 = v17 + 1;
    int v60 = 0;
    if (v17 + 1 <= v19)
    {
      if (v17 + 1 < v19) {
        *(void *)(a9 + 48) = v18 + 4 * v20;
      }
    }
    else
    {
      sub_EE6948((unint64_t *)(a9 + 40), v17 + 1 - v19, (const float *)&v60);
    }
    uint64_t v21 = *(void *)(a9 + 64);
    uint64_t v22 = *(void *)(a9 + 72);
    int v59 = 0;
    unint64_t v23 = (v22 - v21) >> 2;
    if (v20 <= v23)
    {
      if (v20 < v23) {
        *(void *)(a9 + 72) = v21 + 4 * v20;
      }
    }
    else
    {
      sub_EE6948((unint64_t *)(a9 + 64), v20 - v23, (const float *)&v59);
    }
    uint64_t v24 = *(void *)(a9 + 16);
    uint64_t v25 = *(void *)(a9 + 24);
    int v58 = 0;
    unint64_t v26 = (v25 - v24) >> 2;
    if (v20 <= v26)
    {
      if (v20 < v26) {
        *(void *)(a9 + 24) = v24 + 4 * v20;
      }
    }
    else
    {
      sub_EE6948((unint64_t *)(a9 + 16), v20 - v26, (const float *)&v58);
    }
    unint64_t v15 = a3[4];
  }
  int v27 = a3;
  unint64_t v28 = a3[3];
  if (v28 <= v15) {
    unint64_t v29 = v15;
  }
  else {
    unint64_t v29 = a3[3];
  }
  if (v28 < v15)
  {
    int v30 = 0;
    int v31 = 0;
    int v32 = 0;
    while (1)
    {
      unint64_t v35 = sub_46C760(a2);
      uint64_t v37 = sub_46CCC8(a2, v28, v36);
      uint64_t v38 = v27[5];
      if ((unint64_t)v38 <= 1) {
        uint64_t v38 = 1;
      }
      double v39 = (double)v37 / (double)v38;
      double v40 = v39 * (double)*a4;
      if (v40 >= 0.0)
      {
        if (v40 >= 4.50359963e15) {
          goto LABEL_37;
        }
        uint64_t v41 = (uint64_t)(v40 + v40) + 1;
      }
      else
      {
        if (v40 <= -4.50359963e15) {
          goto LABEL_37;
        }
        uint64_t v41 = (uint64_t)(v40 + v40);
        if (v41 >= 1) {
          --v41;
        }
      }
      double v40 = (double)(v41 >> 1);
LABEL_37:
      double v42 = v39 * (double)(int)*v56;
      if (v42 >= 0.0)
      {
        if (v42 >= 4.50359963e15) {
          goto LABEL_45;
        }
        uint64_t v43 = (uint64_t)(v42 + v42) + 1;
      }
      else
      {
        if (v42 <= -4.50359963e15) {
          goto LABEL_45;
        }
        uint64_t v43 = (uint64_t)(v42 + v42);
        if (v43 >= 1) {
          --v43;
        }
      }
      double v42 = (double)(v43 >> 1);
LABEL_45:
      double v33 = v39 * (double)*v55;
      if (v33 >= 0.0)
      {
        if (v33 >= 4.50359963e15) {
          goto LABEL_26;
        }
        uint64_t v44 = (uint64_t)(v33 + v33) + 1;
      }
      else
      {
        if (v33 <= -4.50359963e15) {
          goto LABEL_26;
        }
        uint64_t v44 = (uint64_t)(v33 + v33);
        if (v44 >= 1) {
          --v44;
        }
      }
      double v33 = (double)(v44 >> 1);
LABEL_26:
      uint64_t v34 = 4 * (v35 + ~v28);
      *(_DWORD *)(*(void *)(a9 + 40) + v34) += (int)v40;
      *(_DWORD *)(*(void *)(a9 + 64) + v34) += (int)v42;
      *(_DWORD *)(*(void *)(a9 + 16) + v34) += (int)v33;
      v30 += (int)v40;
      v31 += (int)v42;
      v32 += (int)v33;
      if (++v28 == v29) {
        goto LABEL_53;
      }
    }
  }
  int v32 = 0;
  int v31 = 0;
  int v30 = 0;
LABEL_53:
  int v45 = *a4 - v30;
  int v46 = a4[1] - v31;
  int v47 = *v55 - v32;
  unint64_t v48 = 4 * (sub_46C760(a2) - v27[4]);
  *(_DWORD *)(*(void *)(a9 + 40) + v48) += v45;
  *(_DWORD *)(*(void *)(a9 + 64) + v48) += v46;
  *(_DWORD *)(*(void *)(a9 + 16) + v48) += v47;
  sub_3B79D0((void **)(a9 + 112), a4);
  sub_3B79D0((void **)(a9 + 136), v56);
  sub_3B79D0((void **)(a9 + 88), v55);
  double result = sub_3B79D0((void **)(a9 + 160), a4 + 3);
  uint64_t v50 = 4 * v52;
  *(_DWORD *)(*(void *)(a9 + 40) + v50) = *a5 + *(_DWORD *)(*(void *)(a9 + 40) + 4 * v52);
  *(_DWORD *)(*(void *)(a9 + 64) + v50) += a5[1];
  *(_DWORD *)(*(void *)(a9 + 16) + v50) = *v53 + *(_DWORD *)(*(void *)(a9 + 16) + 4 * v52);
  if (v27[3])
  {
    sub_3B79D0((void **)(a9 + 184), v53);
    sub_3B79D0((void **)(a9 + 232), v51);
    return sub_3B79D0((void **)(a9 + 208), a5);
  }
  return result;
}

void sub_EEF32C()
{
  unk_25FC9AF = 16641;
  word_25FC998 = 65;
  byte_25FC9C7 = 1;
  byte_25FC9B1 = 0;
  byte_25FC9DF = 3;
  dword_25FC9C8 = 7105633;
  byte_25FC9F7 = 7;
  strcpy((char *)&dword_25FC9E0, "default");
}

double sub_EEF38C(uint64_t a1)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = xmmword_20B8F70;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  return result;
}

uint64_t sub_EEF3AC(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = xmmword_20B8F70;
  *(_OWORD *)(a1 + 32) = 0u;
  unint64_t v8 = (uint64_t *)(a1 + 32);
  *(_OWORD *)(a1 + 48) = 0u;
  if (!sub_401FE4(a4)) {
    return a1;
  }
  uint64_t v9 = nullsub_1(a4);
  uint64_t v39 = sub_40A454(v9);
  *(_DWORD *)a1 = sub_3FCE64(a2, &v39);
  __p = operator new(0x28uLL);
  long long v38 = xmmword_20E12D0;
  strcpy((char *)__p, "min_remaining_energy_threshold_percent");
  unsigned int v10 = sub_31AC04(a3, (uint64_t)&__p);
  if (SHIBYTE(v38) < 0) {
    operator delete(__p);
  }
  sub_3FB2AC(v10, *(void *)(a4 + 288), (uint64_t)&__p);
  uint64_t v34 = operator new(0x28uLL);
  long long v35 = xmmword_20B9260;
  strcpy((char *)v34, "min_remaining_energy_threshold_wh");
  int v36 = sub_5CC34(a3, &v34);
  if (SHIBYTE(v35) < 0) {
    operator delete(v34);
  }
  sub_3FB190((uint64_t *)(a4 + 288), (uint64_t)&v32);
  sub_3FB448((uint64_t)&v32, &v36, (uint64_t)&v34);
  if (sub_40A52C(&v34, &__p)) {
    p_p = &v34;
  }
  else {
    p_p = &__p;
  }
  long long v32 = *(_OWORD *)p_p;
  double v33 = p_p[2];
  int v12 = sub_40A440(&v32);
  int v13 = sub_40A440((_DWORD *)(a4 + 336));
  if (v13 >= v12) {
    int v14 = v12;
  }
  else {
    int v14 = v13;
  }
  *(_DWORD *)(a1 + 4) = v14;
  int v30 = operator new(0x20uLL);
  long long v31 = xmmword_20B5EB0;
  strcpy((char *)v30, "max_time_at_slow_charger_s");
  *(_DWORD *)(a1 + 8) = sub_5D2EC(a3, &v30);
  if (SHIBYTE(v31) < 0) {
    operator delete(v30);
  }
  int v30 = operator new(0x20uLL);
  long long v31 = xmmword_20B5EB0;
  strcpy((char *)v30, "min_relative_energy_buffer");
  *(double *)(a1 + 16) = sub_5C7E8(a3, (uint64_t)&v30);
  if (SHIBYTE(v31) < 0) {
    operator delete(v30);
  }
  int v30 = operator new(0x20uLL);
  long long v31 = xmmword_20B8890;
  strcpy((char *)v30, "charging_power_scaling_factor");
  *(double *)(a1 + 24) = sub_5C7E8(a2, (uint64_t)&v30);
  if (SHIBYTE(v31) < 0) {
    operator delete(v30);
  }
  int v30 = operator new(0x30uLL);
  long long v31 = xmmword_20B93E0;
  strcpy((char *)v30, "min_segment_length_for_unpacking_geometry_m");
  double v15 = sub_5C7E8(a3, (uint64_t)&v30);
  double v16 = v15;
  if (SHIBYTE(v31) < 0)
  {
    operator delete(v30);
    double v17 = v16 * 100.0;
    if (v16 * 100.0 < 0.0) {
      goto LABEL_20;
    }
  }
  else
  {
    double v17 = v15 * 100.0;
    if (v16 * 100.0 < 0.0)
    {
LABEL_20:
      double v18 = v17;
      if (v17 <= -4.50359963e15) {
        goto LABEL_28;
      }
      uint64_t v19 = (uint64_t)(v17 + v17);
      if (v19 >= 1) {
        --v19;
      }
      goto LABEL_27;
    }
  }
  double v18 = v17;
  if (v17 >= 4.50359963e15) {
    goto LABEL_28;
  }
  uint64_t v19 = (uint64_t)(v17 + v17) + 1;
LABEL_27:
  double v18 = (double)(v19 >> 1);
LABEL_28:
  if (v18 >= 9.22337204e18)
  {
    uint64_t v21 = 0x7FFFFFFFFFFFFFFELL;
    goto LABEL_39;
  }
  if (v17 >= 0.0)
  {
    if (v17 < 4.50359963e15)
    {
      uint64_t v20 = (uint64_t)(v17 + v17) + 1;
LABEL_37:
      double v17 = (double)(v20 >> 1);
    }
  }
  else if (v17 > -4.50359963e15)
  {
    uint64_t v20 = (uint64_t)(v17 + v17);
    if (v20 >= 1) {
      --v20;
    }
    goto LABEL_37;
  }
  uint64_t v21 = (uint64_t)v17;
LABEL_39:
  *unint64_t v8 = v21;
  int v30 = operator new(0x38uLL);
  long long v31 = xmmword_20B99E0;
  strcpy((char *)v30, "min_segment_elevation_change_for_unpacking_geometry_m");
  double v22 = sub_5C7E8(a3, (uint64_t)&v30);
  double v23 = v22;
  if (SHIBYTE(v31) < 0)
  {
    operator delete(v30);
    double v24 = v23 * 100.0;
    if (v23 * 100.0 < 0.0) {
      goto LABEL_41;
    }
  }
  else
  {
    double v24 = v22 * 100.0;
    if (v23 * 100.0 < 0.0)
    {
LABEL_41:
      double v25 = v24;
      if (v24 <= -4.50359963e15) {
        goto LABEL_49;
      }
      uint64_t v26 = (uint64_t)(v24 + v24);
      if (v26 >= 1) {
        --v26;
      }
      goto LABEL_48;
    }
  }
  double v25 = v24;
  if (v24 >= 4.50359963e15) {
    goto LABEL_49;
  }
  uint64_t v26 = (uint64_t)(v24 + v24) + 1;
LABEL_48:
  double v25 = (double)(v26 >> 1);
LABEL_49:
  if (v25 < 9.22337204e18)
  {
    if (v24 >= 0.0)
    {
      if (v24 < 4.50359963e15)
      {
        uint64_t v27 = (uint64_t)(v24 + v24) + 1;
LABEL_58:
        double v24 = (double)(v27 >> 1);
      }
    }
    else if (v24 > -4.50359963e15)
    {
      uint64_t v27 = (uint64_t)(v24 + v24);
      if (v27 >= 1) {
        --v27;
      }
      goto LABEL_58;
    }
    uint64_t v28 = (uint64_t)v24;
    goto LABEL_60;
  }
  uint64_t v28 = 0x7FFFFFFFFFFFFFFELL;
LABEL_60:
  *(void *)(a1 + 40) = v28;
  int v30 = operator new(0x28uLL);
  long long v31 = xmmword_20B93A0;
  strcpy((char *)v30, "max_num_legs_with_unpacked_geometry");
  *(_DWORD *)(a1 + 48) = sub_31AC04(a3, (uint64_t)&v30);
  if (SHIBYTE(v31) < 0) {
    operator delete(v30);
  }
  int v30 = operator new(0x30uLL);
  long long v31 = xmmword_20E1380;
  strcpy((char *)v30, "round_charging_target_soc_to_nearest_percent");
  *(_DWORD *)(a1 + 52) = sub_31AC04(a3, (uint64_t)&v30);
  if (SHIBYTE(v31) < 0) {
    operator delete(v30);
  }
  int v30 = operator new(0x20uLL);
  long long v31 = xmmword_20B91B0;
  strcpy((char *)v30, "max_rounding_time_overhead_s");
  *(_DWORD *)(a1 + 56) = sub_5D2EC(a3, &v30);
  if (SHIBYTE(v31) < 0) {
    operator delete(v30);
  }
  int v30 = operator new(0x28uLL);
  long long v31 = xmmword_20B9390;
  strcpy((char *)v30, "round_charging_time_to_nearest_s");
  *(_DWORD *)(a1 + 60) = sub_5D2EC(a3, &v30);
  if (SHIBYTE(v31) < 0) {
    operator delete(v30);
  }
  return a1;
}

void sub_EEFA3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_EEFA78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    JUMPOUT(0xEEFA6CLL);
  }
  JUMPOUT(0xEEFA70);
}

void sub_EEFA8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    JUMPOUT(0xEEFA6CLL);
  }
  JUMPOUT(0xEEFA70);
}

uint64_t sub_EEFAA4(uint64_t a1, void *a2, void *a3, _OWORD *a4)
{
  *(void *)a1 = a3[35];
  *(void *)(a1 + 8) = a3[37];
  *(void *)(a1 + 16) = a3[36];
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = sub_3750CC(a2);
  *(void *)(a1 + 40) = sub_376408(a2);
  *(void *)(a1 + 48) = a3;
  long long v8 = a4[2];
  long long v9 = a4[3];
  long long v10 = a4[1];
  *(_OWORD *)(a1 + 56) = *a4;
  *(_OWORD *)(a1 + 104) = v9;
  *(_OWORD *)(a1 + 88) = v8;
  *(_OWORD *)(a1 + 72) = v10;
  return a1;
}

void sub_EEFB24(uint64_t a1@<X0>, char **a2@<X1>, uint64_t a3@<X2>, int *a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v6 = (uint64_t *)a2;
  if (sub_EA80FC(a2))
  {
    sub_47E0E4(a5);
    return;
  }
  __n128 v134 = 0uLL;
  unint64_t v135 = 0;
  int v132 = 0;
  int v131 = 0;
  unint64_t v133 = 0;
  unint64_t v8 = sub_EA8440(v6);
  unint64_t v9 = v8;
  uint64_t v129 = 0;
  uint64_t v128 = 0;
  unint64_t v130 = 0;
  if (v8)
  {
    if ((v8 & 0x8000000000000000) != 0) {
      sub_2E00();
    }
    unint64_t v10 = ((v8 - 1) >> 6) + 1;
    uint64_t v128 = operator new(8 * v10);
    uint64_t v129 = 0;
    unint64_t v130 = v10;
    sub_43284(&v128, v9, 0);
  }
  unint64_t v125 = 0x8000000080000000;
  int v126 = -1;
  uint64_t v127 = 0;
  if (*(void *)a3 == *(void *)(a3 + 8)) {
    int v11 = 0x7FFFFFFF;
  }
  else {
    int v11 = **(_DWORD **)a3;
  }
  uint64_t v12 = sub_EA8438(v6);
  unsigned int v13 = sub_2AACDC(*(uint64_t **)(a1 + 40), *(void *)(v12 + 32), v11);
  uint64_t v14 = sub_EA82B8(v6);
  unint64_t v125 = 0;
  int v126 = v13;
  uint64_t v127 = *(void *)(a1 + 80);
  uint64_t v124 = sub_40A454((uint64_t)a4);
  unsigned int v122 = 0;
  uint64_t v121 = 0;
  uint64_t v123 = 0;
  uint64_t v116 = sub_40A674((uint64_t)&v124);
  int v117 = v15;
  sub_30C0C((char **)&v121, &v116);
  double v16 = (char **)sub_37D0C0(*(void *)(a1 + 48));
  int v17 = *(unsigned __int8 *)(*(void *)(a1 + 48) + 408);
  int v118 = sub_89DD4(v16);
  __int16 v119 = 512;
  uint64_t v18 = 1 << v17;
  if (v17 == 255) {
    uint64_t v18 = 0;
  }
  uint64_t v120 = v18;
  sub_10815EC((uint64_t)v6, (uint64_t)&v118, *(void **)(a1 + 24), &v136);
  sub_40B950((uint64_t)&v116, v136.i64, *(void *)(a1 + 48), *(void *)(a1 + 24));
  if (v136.i64[0])
  {
    sub_28F794((uint64_t)&v136, (void **)v136.i64[0]);
    operator delete((void *)v136.i64[0]);
  }
  char v100 = BYTE6(v14);
  uint64_t v104 = a1;
  uint64_t v114 = *(void *)a4;
  int v115 = a4[2];
  unint64_t v19 = sub_EA8440(v6);
  uint64_t v103 = v6;
  if (v19)
  {
    uint64_t v20 = 0;
    unint64_t v21 = 0;
    while (1)
    {
      uint64_t v22 = sub_40C7F4((uint64_t)&v116, v21, v124, SHIDWORD(v124));
      unint64_t v24 = v22 & 0xFFFFFFFF00000000;
      uint64_t v25 = v23;
      unint64_t v26 = v23 & 0xFFFFFFFF00000000;
      if (!v21) {
        break;
      }
      BOOL v27 = v24 == 0x7FFFFFFF00000000 || v23 == 0x7FFFFFFFLL;
      if (v27 || v26 == 0x7FFFFFFF00000000) {
        break;
      }
      unint64_t v29 = (char *)v128 + 8 * (v21 >> 6);
      uint64_t v30 = 1 << v21;
      if (!(_BYTE)v22)
      {
        uint64_t v32 = 0;
        goto LABEL_30;
      }
      *v29 |= v30;
      v136.i64[0] = sub_40A674((uint64_t)&v124);
      v136.i32[2] = v31;
      sub_30C0C((char **)&v121, v136.i64);
      uint64_t v32 = 1;
LABEL_31:
      BOOL v33 = -1 - 0x5555555555555555 * (((char *)v122 - (unsigned char *)v121) >> 2) < (unint64_t)*(unsigned int *)(v104 + 104);
      BOOL v27 = v24 == 0x7FFFFFFF00000000;
      uint64_t v6 = v103;
      if (!v27 && v25 != 0x7FFFFFFF && v26 != 0x7FFFFFFF00000000 && v32)
      {
        uint64_t v34 = sub_EA8060(v103, v21);
        long long v35 = (_DWORD *)sub_EADA60(v34);
        int v36 = v35;
        if (*v35 == 0x7FFFFFFF) {
          goto LABEL_46;
        }
        if (v35[9] == 0x7FFFFFFF) {
          goto LABEL_46;
        }
        if (!sub_40A45C(v35 + 2)) {
          goto LABEL_46;
        }
        int v37 = v36[28];
        if (v37 == -1) {
          goto LABEL_46;
        }
        if (v37 == 1)
        {
          if (*((void *)v36 + 13) > 0xFFFFFFFEFFFFFFFFLL || !*((void *)v36 + 13)) {
            goto LABEL_46;
          }
        }
        else
        {
          if (v37)
          {
            exception = __cxa_allocate_exception(8uLL);
            void *exception = &off_23FDF58;
          }
          if (*((void *)v36 + 13) == -1)
          {
LABEL_46:
            v136.i64[0] = sub_40A454((uint64_t)a4);
            uint64_t v114 = sub_40A3AC(0x50u, &v136);
            int v115 = v40;
            goto LABEL_47;
          }
        }
        uint64_t v38 = sub_EA8060(v103, v21);
        uint64_t v39 = sub_EADA60(v38);
        uint64_t v114 = *(void *)(v39 + 8);
        int v115 = *(_DWORD *)(v39 + 16);
      }
LABEL_47:
      uint64_t v41 = (void *)sub_EA8060(v103, v21);
      sub_EF08B4((uint64_t *)v104, v41, (int *)(*(void *)a3 + v20), (uint64_t)&v114, v33, (uint64_t)&v136);
      double v42 = (signed int *)sub_475100((uint64_t)&v136);
      if (sub_40A820(v122 - 3))
      {
        if (sub_40A820(v42))
        {
          uint64_t v43 = sub_40AAA0(v122 - 3, v42);
          unint64_t v45 = v43 & 0xFFFFFFFF00000000;
        }
        else
        {
          unint64_t v45 = 0x7FFFFFFF00000000;
          LODWORD(v43) = 0x7FFFFFFF;
          int v44 = 0x7FFFFFFF;
        }
      }
      else
      {
        unint64_t v45 = 0x7FFFFFFF00000000;
        int v44 = 0x7FFFFFFF;
        LODWORD(v43) = 0x7FFFFFFF;
      }
      int v46 = v122;
      *(void *)(v122 - 3) = v43 | v45;
      *(v46 - 1) = v44;
      unint64_t v47 = v134.n128_u64[1];
      if (v134.n128_u64[1] >= v135)
      {
        uint64_t v49 = sub_EF180C((void **)&v134, (uint64_t)&v136);
      }
      else
      {
        uint64_t v48 = v136.i64[0];
        *(_DWORD *)(v134.n128_u64[1] + 8) = v136.i32[2];
        *(void *)unint64_t v47 = v48;
        *(void *)(v47 + 24) = 0;
        *(void *)(v47 + 32) = 0;
        *(void *)(v47 + 16) = 0;
        *(int64x2_t *)(v47 + 16) = v137;
        *(void *)(v47 + 32) = v138;
        int64x2_t v137 = 0uLL;
        uint64_t v138 = 0;
        LODWORD(v48) = v139.i32[2];
        *(void *)(v47 + 40) = v139.i64[0];
        *(_DWORD *)(v47 + 48) = v48;
        uint64_t v49 = (char *)(v47 + 56);
      }
      v134.n128_u64[1] = (unint64_t)v49;
      uint64_t v114 = sub_475024((uint64_t)(v49 - 56));
      int v115 = v50;
      if (v137.i64[0])
      {
        v137.i64[1] = v137.i64[0];
        operator delete((void *)v137.i64[0]);
      }
      ++v21;
      v20 += 288;
      if (v19 == v21) {
        goto LABEL_57;
      }
    }
    unint64_t v29 = (char *)v128 + 8 * (v21 >> 6);
    uint64_t v30 = 1 << v21;
    uint64_t v32 = v22;
LABEL_30:
    *v29 &= ~v30;
    goto LABEL_31;
  }
LABEL_57:
  uint64_t v51 = sub_40EFE8((uint64_t)v6);
  uint64_t v52 = sub_EADA60(v51);
  uint64_t v112 = *(void *)(v52 + 8);
  int v113 = *(_DWORD *)(v52 + 16);
  if (sub_40A45C(a4))
  {
    if (sub_40A45C((int *)&v112) && !sub_40A52C(a4, &v112)) {
      a4 = (int *)&v112;
    }
  }
  else
  {
    a4 = (int *)&v112;
  }
  uint64_t v110 = *(void *)a4;
  int v111 = a4[2];
  int v53 = (int *)v121;
  unint64_t v54 = sub_EA8440(v6);
  if (v54)
  {
    uint64_t v55 = 0;
    uint64_t v56 = 0;
    for (unint64_t i = 0; i != v54; ++i)
    {
      uint64_t v58 = sub_EA8060(v103, i);
      int v59 = *(_DWORD *)sub_EADD50(v58);
      if (i && v59 == -1)
      {
        int v60 = *(_DWORD *)(v104 + 56);
      }
      else
      {
        int v60 = 0;
        if (!i) {
          goto LABEL_71;
        }
      }
      v53 += 3 * ((*(void *)((char *)v128 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) >> i) & 1);
LABEL_71:
      if (sub_40A45C((int *)&v110)) {
        signed int v61 = sub_4F44((unsigned int *)&v110);
      }
      else {
        signed int v61 = v124;
      }
      BOOL v62 = sub_40A45C((int *)&v110);
      __int16 v63 = (int64x2_t *)((char *)&v124 + 4);
      if (v62)
      {
        int v64 = *v53;
        __int16 v63 = (int64x2_t *)((char *)&v124 + 4);
        if (*v53 != 0x7FFFFFFF)
        {
          v136.i32[0] = *v53;
          LODWORD(__p[0]) = sub_4F44((unsigned int *)&v110) + v60;
          __int16 v63 = &v136;
          if (v64 < SLODWORD(__p[0])) {
            __int16 v63 = (int64x2_t *)__p;
          }
        }
      }
      v109[0] = sub_40C7F4((uint64_t)&v116, i, v61, v63->i32[0]);
      v109[1] = v65;
      if (v53 + 3 == v122) {
        char v66 = v100 & 1;
      }
      else {
        char v66 = 1;
      }
      uint64_t v67 = sub_EA8060(v103, i);
      uint64_t v68 = (_DWORD *)sub_475100(v134.n128_u64[0] + v56);
      sub_EF0974(v104, v67, &v110, v68, v53, v59 != -1, v66, v60, (uint64_t)&v136, (int *)v109, (uint64_t)&v125);
      unsigned __int32 v69 = v136.i32[0];
      if (v136.i32[0] == 0x7FFFFFFF || HIDWORD(v138) == 0x7FFFFFFF || !sub_40A45C(&v136.i32[2]) || v145 == -1) {
        goto LABEL_99;
      }
      if (v145 != 1)
      {
        if (v145)
        {
          long long v98 = __cxa_allocate_exception(8uLL);
          *long long v98 = &off_23FDF58;
        }
        if (v144 == -1) {
          goto LABEL_99;
        }
LABEL_91:
        if (v139.i64[0] == v139.i64[1] || !*(unsigned char *)v139.i64[0])
        {
          signed int v70 = sub_4F44((unsigned int *)&v110);
          signed int v71 = sub_4F44(&v136.u32[2]);
          sub_40B9FC(&v116, i, v70, v71, (uint64_t *)__p);
          sub_40C21C((uint64_t)&v116, i, v105.i64);
          if (v139.i64[0])
          {
            v139.i64[1] = v139.i64[0];
            operator delete((void *)v139.i64[0]);
          }
          int64x2_t v139 = *(int64x2_t *)__p;
          uint64_t v140 = v108;
          __p[1] = 0;
          uint64_t v108 = 0;
          __p[0] = 0;
          unint64_t v72 = (void *)v141.i64[0];
          if (v141.i64[0])
          {
            v141.i64[1] = v141.i64[0];
            operator delete((void *)v141.i64[0]);
            unint64_t v72 = __p[0];
          }
          int64x2_t v141 = v105;
          uint64_t v142 = v106;
          if (v72)
          {
            __p[1] = v72;
            operator delete(v72);
          }
        }
        goto LABEL_99;
      }
      if (v144 <= 0xFFFFFFFEFFFFFFFFLL && v144) {
        goto LABEL_91;
      }
LABEL_99:
      sub_475128(v134.n128_u64[0] + v56, &v136.i64[1]);
      uint64_t v110 = sub_475024(v134.n128_u64[0] + v56);
      int v111 = v73;
      int v74 = v132;
      if ((unint64_t)v132 >= v133)
      {
        uint64_t v77 = sub_EF19D8(&v131, (uint64_t)&v136);
      }
      else
      {
        int64x2_t v75 = v137;
        uint64_t v76 = v138;
        *int v132 = v136;
        v74[1] = v75;
        v74[2].i64[0] = v76;
        v74[2].i64[1] = 0;
        v74[3].i64[0] = 0;
        v74[3].i64[1] = 0;
        *(int64x2_t *)((char *)v74 + 40) = v139;
        int64x2_t v139 = 0uLL;
        v74[3].i64[1] = v140;
        v74[4].i64[0] = 0;
        uint64_t v140 = 0;
        v74[4].i64[1] = 0;
        v74[5].i64[0] = 0;
        v74[4] = v141;
        v74[5].i64[0] = v142;
        int64x2_t v141 = 0uLL;
        uint64_t v142 = 0;
        *(int64x2_t *)((char *)v74 + 88) = v143;
        v74[7].i32[0] = v145;
        if (v145 <= 1) {
          v74[6].i64[1] = v144;
        }
        *(int64x2_t *)((char *)v74 + 120) = v146;
        uint64_t v77 = &v74[8].i8[8];
      }
      int v132 = (int64x2_t *)v77;
      uint64_t v78 = (int *)(*(void *)a3 + v55);
      int v79 = *v78;
      if (v78[1] <= 0x7FFFFFFE) {
        int v80 = v78[1];
      }
      else {
        int v80 = 0;
      }
      if (v69 <= 0x7FFFFFFE) {
        unsigned __int32 v81 = v69;
      }
      else {
        unsigned __int32 v81 = 0;
      }
      unsigned int v82 = v78[2];
      if (v82 <= 0x7FFFFFFE) {
        unsigned int v83 = v82;
      }
      else {
        unsigned int v83 = 0;
      }
      int v84 = 0x7FFFFFFF;
      if (v79 != 0x7FFFFFFF)
      {
        unsigned int v85 = 103 * (char)(v80 % 10 + 5);
        int v84 = v80 / 10 + v79 + (((v85 & 0x8000) != 0) + (v85 >> 10));
      }
      uint64_t v86 = sub_EA8060(v103, i);
      uint64_t v87 = sub_EAFF60(v86);
      unsigned int v88 = sub_2AACDC(*(uint64_t **)(v104 + 40), *(void *)(v87 + 32), v84);
      LODWORD(v125) = v80;
      HIDWORD(v125) += v80 + v81 + v83;
      int v126 = v88;
      if (v141.i64[0])
      {
        v141.i64[1] = v141.i64[0];
        operator delete((void *)v141.i64[0]);
      }
      if (v139.i64[0])
      {
        v139.i64[1] = v139.i64[0];
        operator delete((void *)v139.i64[0]);
      }
      v56 += 56;
      v55 += 288;
    }
  }
  sub_47E0F4(a5, (uint64_t)&v131, &v134);
  sub_EF175C((uint64_t)&v116);
  if (v121)
  {
    unsigned int v122 = (int *)v121;
    operator delete(v121);
  }
  if (v128) {
    operator delete(v128);
  }
  uint64_t v89 = (int64x2_t *)v131;
  if (v131)
  {
    long long v90 = v132;
    BOOL v91 = v131;
    if (v132 != v131)
    {
      do
      {
        unint64_t v92 = (void *)v90[-5].i64[1];
        if (v92)
        {
          v90[-4].i64[0] = (uint64_t)v92;
          operator delete(v92);
        }
        uint64_t v93 = (void *)v90[-6].i64[0];
        if (v93)
        {
          v90[-6].i64[1] = (uint64_t)v93;
          operator delete(v93);
        }
        long long v90 = (int64x2_t *)((char *)v90 - 136);
      }
      while (v90 != v89);
      BOOL v91 = v131;
    }
    int v132 = v89;
    operator delete(v91);
  }
  unint64_t v94 = v134.n128_u64[0];
  if (v134.n128_u64[0])
  {
    unint64_t v95 = v134.n128_u64[1];
    unint64_t v96 = (void *)v134.n128_u64[0];
    if (v134.n128_u64[1] != v134.n128_u64[0])
    {
      do
      {
        uint64_t v97 = *(void **)(v95 - 40);
        if (v97)
        {
          *(void *)(v95 - 32) = v97;
          operator delete(v97);
        }
        v95 -= 56;
      }
      while (v95 != v94);
      unint64_t v96 = (void *)v134.n128_u64[0];
    }
    v134.n128_u64[1] = v94;
    operator delete(v96);
  }
}

void sub_EF0720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_EF175C((uint64_t)&a39);
  int v40 = (void *)STACK[0x2B0];
  if (STACK[0x2B0])
  {
    STACK[0x2B8] = (unint64_t)v40;
    operator delete(v40);
    uint64_t v41 = (void *)STACK[0x2E8];
    if (!STACK[0x2E8])
    {
LABEL_3:
      sub_47E060((void **)&STACK[0x300]);
      sub_EF0DA0((void **)&STACK[0x318]);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v41 = (void *)STACK[0x2E8];
    if (!STACK[0x2E8]) {
      goto LABEL_3;
    }
  }
  operator delete(v41);
  sub_47E060((void **)&STACK[0x300]);
  sub_EF0DA0((void **)&STACK[0x318]);
  _Unwind_Resume(a1);
}

void sub_EF08B4(uint64_t *a1@<X0>, void *a2@<X1>, int *a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  sub_EF0E14(a1, a2, a3, a5, a4, (char **)&__p);
  unint64_t v8 = (int *)__p;
  unint64_t v9 = v18;
  uint64_t v12 = sub_40A454(a4);
  uint64_t v13 = sub_40A674((uint64_t)&v12);
  int v14 = v10;
  uint64_t v15 = sub_40A72C(v8, v9, &v13);
  int v16 = v11;
  sub_474E74(a6, a4, &__p, &v15);
  if (__p)
  {
    uint64_t v18 = (int *)__p;
    operator delete(__p);
  }
}

void sub_EF0954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_EF0974@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _DWORD *a4@<X3>, int *a5@<X4>, int a6@<W5>, char a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, int *a10, uint64_t a11)
{
  int v51 = a8;
  if (sub_40A45C((int *)a3)) {
    sub_3FB100((uint64_t)v50, a3, *(void *)(a1 + 16));
  }
  else {
    sub_3FB134(*(void *)(a1 + 16), (uint64_t)v50);
  }
  sub_4F44(v50);
  sub_4F44(v50);
  if (a10[1] == 0x7FFFFFFF || a10[2] == 0x7FFFFFFF || a10[3] == 0x7FFFFFFF || *(unsigned char *)a10 == 0)
  {
    sub_3FB100((uint64_t)&v46, a3, *(void *)(a1 + 16));
    uint64_t result = sub_EADA60(a2);
    unsigned int v24 = *(_DWORD *)(result + 112);
    if (v24 <= 1) {
      uint64_t v23 = *(void *)(result + 104);
    }
    *(_DWORD *)a9 = 0x7FFFFFFF;
    *(_OWORD *)(a9 + 8) = v46;
    *(void *)(a9 + 24) = v47;
    *(void *)(a9 + 32) = 0x8000000080000000;
    *(_OWORD *)(a9 + 40) = 0u;
    *(_OWORD *)(a9 + 56) = 0u;
    *(_OWORD *)(a9 + 72) = 0u;
    *(_DWORD *)(a9 + 88) = 0;
    *(void *)(a9 + 92) = 0x8000000080000000;
    *(_DWORD *)(a9 + 100) = 0x7FFFFFFF;
    *(_DWORD *)(a9 + 112) = v24;
    if (v24 <= 1) {
      *(void *)(a9 + 104) = v23;
    }
    *(void *)(a9 + 120) = 0;
    *(void *)(a9 + 128) = 0x7FFFFFFFFFFFFFFFLL;
    return result;
  }
  uint64_t v25 = (_DWORD *)sub_EADA60(a2);
  unint64_t v48 = sub_EF14B8(a1, v25, a5, a6, a7);
  int v49 = v26;
  sub_3FB448((uint64_t)v50, &v51, (uint64_t)v45);
  sub_3FB100((uint64_t)v44, (uint64_t *)&v48, *(void *)(a1 + 16));
  if (sub_40A52C(v45, v44)) {
    uint64_t v28 = v44;
  }
  else {
    uint64_t v28 = v45;
  }
  long long v46 = *(_OWORD *)v28;
  uint64_t v47 = *((void *)v28 + 2);
  int v29 = sub_4F44(v50);
  int v30 = sub_4F44(v50);
  int v31 = sub_4F44((unsigned int *)&v46);
  unint64_t v32 = sub_40514C(v29, v30, v31, a10, a11, *(void *)(a1 + 48));
  uint64_t v33 = v32;
  if (a6 && (unint64_t v34 = HIDWORD(v32), sub_4F44(v50) == HIDWORD(v32)))
  {
    int v35 = 0x7FFFFFFF;
  }
  else
  {
    unint64_t v36 = sub_EF1660(a1, v33, &v46);
    int v35 = v36;
    unint64_t v34 = HIDWORD(v36);
  }
  sub_3FB048((uint64_t)&v46, v34, *(void *)(a1 + 16));
  if (sub_40A820(a4))
  {
    unsigned int v37 = v34 - *a4;
    if (v37 <= 0x7FFFFFFE)
    {
      int v38 = sub_53FA4((uint64_t)a3) + v37;
      uint64_t v39 = sub_EADA60(a2);
      unsigned int v40 = *(_DWORD *)(v39 + 112);
      if (v40 == 1) {
        goto LABEL_34;
      }
LABEL_33:
      if (v40) {
        goto LABEL_35;
      }
      goto LABEL_34;
    }
  }
  int v38 = 0x7FFFFFFF;
  uint64_t v39 = sub_EADA60(a2);
  unsigned int v40 = *(_DWORD *)(v39 + 112);
  if (v40 != 1) {
    goto LABEL_33;
  }
LABEL_34:
  a1 = *(void *)(v39 + 104);
LABEL_35:
  uint64_t result = sub_EADA60(a2);
  *(_DWORD *)a9 = v35;
  *(_OWORD *)(a9 + 8) = v46;
  *(void *)(a9 + 24) = v47;
  *(_DWORD *)(a9 + 32) = v38;
  *(_DWORD *)(a9 + 36) = v33;
  *(_OWORD *)(a9 + 40) = 0u;
  *(_OWORD *)(a9 + 56) = 0u;
  *(_OWORD *)(a9 + 72) = 0u;
  *(_OWORD *)(a9 + 88) = *(_OWORD *)a10;
  *(_DWORD *)(a9 + 112) = v40;
  if (v40 <= 1) {
    *(void *)(a9 + 104) = a1;
  }
  *(_OWORD *)(a9 + 120) = *(_OWORD *)(result + 120);
  if (v35 != 0x7FFFFFFF && v33 != 0x7FFFFFFF)
  {
    uint64_t result = sub_40A45C((int *)(a9 + 8));
    if (result)
    {
      int v41 = *(_DWORD *)(a9 + 112);
      if (v41 != -1)
      {
        if (v41 == 1)
        {
          if (*(void *)(a9 + 104) > 0xFFFFFFFEFFFFFFFFLL || !*(void *)(a9 + 104)) {
            return result;
          }
        }
        else
        {
          if (v41)
          {
            exception = __cxa_allocate_exception(8uLL);
            void *exception = &off_23FDF58;
          }
          if (*(void *)(a9 + 104) == -1) {
            return result;
          }
        }
        uint64_t v42 = sub_EADA60(a2);
        if (v42 != a9) {
          sub_472BC8((void *)(a9 + 40), *(char **)(v42 + 40), *(char **)(v42 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v42 + 48) - *(void *)(v42 + 40)) >> 2));
        }
        uint64_t result = sub_EADA60(a2);
        if (result != a9) {
          return (uint64_t)sub_472BC8((void *)(a9 + 64), *(char **)(result + 64), *(char **)(result + 72), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(result + 72) - *(void *)(result + 64)) >> 2));
        }
      }
    }
  }
  return result;
}

void sub_EF0D8C(_Unwind_Exception *a1)
{
  sub_45E914(v1);
  _Unwind_Resume(a1);
}

void **sub_EF0DA0(void **a1)
{
  unint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    double v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        double v5 = (void *)*((void *)v3 - 5);
        if (v5)
        {
          *((void *)v3 - 4) = v5;
          operator delete(v5);
        }
        v3 -= 56;
      }
      while (v3 != v2);
      double v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

unint64_t sub_EF0E14@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, int *a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, char **a6@<X8>)
{
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  int v9 = a3[64];
  unint64_t v70 = *(void *)a5;
  int v71 = *(_DWORD *)(a5 + 8);
  *(_DWORD *)unsigned __int32 v69 = 0x7FFFFFFF;
  *(void *)&v69[4] = 0x7FFFFFFF7FFFFFFFLL;
  unint64_t result = sub_EB04C4(a2);
  unint64_t v11 = result;
  if (result)
  {
    unint64_t v12 = 0;
    uint64_t v58 = a6;
    do
    {
      uint64_t v13 = (int **)sub_EB0624(a2, v12);
      uint64_t v14 = sub_EB0698((uint64_t)a2, v12);
      if (v14 <= 10) {
        uint64_t v15 = 10;
      }
      else {
        uint64_t v15 = v14;
      }
      if (*(int *)(*((void *)a3 + 2) + 4 * v12) <= 1) {
        int v16 = 1;
      }
      else {
        int v16 = *(_DWORD *)(*((void *)a3 + 2) + 4 * v12);
      }
      int v17 = *(_DWORD *)(*((void *)a3 + 5) + 4 * v12);
      if (v17 <= 1) {
        int v17 = 1;
      }
      int v62 = v17;
      if (v12) {
        unsigned int v61 = 0;
      }
      else {
        unsigned int v61 = *(_DWORD *)sub_69134((uint64_t)a2);
      }
      if (v12 == sub_EB04C4(a2) - 1) {
        int v18 = *(_DWORD *)sub_EADAD0((uint64_t)a2);
      }
      else {
        int v18 = 1000000000;
      }
      unint64_t v19 = *v13;
      uint64_t v20 = (unsigned __int16 *)((char *)*v13 - **v13);
      unsigned int v21 = *v20;
      unsigned int v60 = v18;
      if (*((unsigned char *)v13 + 38))
      {
        if (v21 >= 0x57)
        {
          if (v20[43])
          {
            uint64_t v22 = (int *)((char *)v19 + v20[43] + *(unsigned int *)((char *)v19 + v20[43]));
            uint64_t v23 = (unsigned __int16 *)((char *)v22 - *v22);
            double v24 = 0.0;
            if (*v23 >= 7u)
            {
              unsigned int v25 = v23[3];
              if (v25) {
                goto LABEL_37;
              }
            }
          }
          else
          {
            double v24 = 0.0;
            if (v21 >= 0x7D)
            {
              unsigned int v25 = v20[62];
              uint64_t v22 = *v13;
              if (v20[62]) {
                goto LABEL_37;
              }
            }
          }
          goto LABEL_38;
        }
      }
      else if (v21 >= 0x57)
      {
        if (v20[43])
        {
          uint64_t v22 = (int *)((char *)v19 + v20[43] + *(unsigned int *)((char *)v19 + v20[43]));
          int v26 = (unsigned __int16 *)((char *)v22 - *v22);
          double v24 = 0.0;
          if (*v26 < 5u) {
            goto LABEL_38;
          }
          unsigned int v25 = v26[2];
          if (!v25) {
            goto LABEL_38;
          }
        }
        else
        {
          double v24 = 0.0;
          if (v21 < 0x7B) {
            goto LABEL_38;
          }
          unsigned int v25 = v20[61];
          uint64_t v22 = *v13;
          if (!v20[61]) {
            goto LABEL_38;
          }
        }
LABEL_37:
        LOWORD(v24) = *(_WORD *)((char *)v22 + v25);
        double v24 = (double)*(unint64_t *)&v24 + (double)*(unint64_t *)&v24;
LABEL_38:
        double v27 = v24 / 65535.0;
        goto LABEL_39;
      }
      double v27 = 0.0;
      if (v21 < 9)
      {
        int v28 = 0;
        double v29 = 0.0 * (double)0;
        if (v29 < 0.0) {
          goto LABEL_41;
        }
        goto LABEL_53;
      }
LABEL_39:
      if (v20[4])
      {
        int v28 = 1;
        double v29 = v27 * (double)*(unsigned int *)((char *)v19 + v20[4]);
        if (v29 < 0.0) {
          goto LABEL_41;
        }
      }
      else
      {
        int v28 = 1;
        double v29 = v27 * (double)0;
        if (v29 < 0.0)
        {
LABEL_41:
          uint64_t v30 = (uint64_t)(v29 + v29);
          if (v30 >= 1) {
            --v30;
          }
          if (v29 > -4.50359963e15) {
            double v29 = (double)(v30 >> 1);
          }
          double v31 = 0.0;
          BOOL v32 = v21 >= 0x57;
          if (!*((unsigned char *)v13 + 38)) {
            goto LABEL_46;
          }
          goto LABEL_56;
        }
      }
LABEL_53:
      if (v29 < 4.50359963e15) {
        double v29 = (double)(((uint64_t)(v29 + v29) + 1) >> 1);
      }
      double v31 = 0.0;
      BOOL v32 = v21 >= 0x57;
      if (!*((unsigned char *)v13 + 38))
      {
LABEL_46:
        if (v32)
        {
          if (v20[43])
          {
            uint64_t v33 = (int *)((char *)v19 + v20[43] + *(unsigned int *)((char *)v19 + v20[43]));
            unint64_t v34 = (unsigned __int16 *)((char *)v33 - *v33);
            if (*v34 < 7u) {
              goto LABEL_68;
            }
            unsigned int v35 = v34[3];
            if (!v35) {
              goto LABEL_68;
            }
          }
          else
          {
            if (v21 < 0x7D) {
              goto LABEL_68;
            }
            unsigned int v35 = v20[62];
            uint64_t v33 = *v13;
            if (!v20[62]) {
              goto LABEL_68;
            }
          }
          goto LABEL_67;
        }
        goto LABEL_68;
      }
LABEL_56:
      if (v32)
      {
        if (v20[43])
        {
          uint64_t v33 = (int *)((char *)v19 + v20[43] + *(unsigned int *)((char *)v19 + v20[43]));
          unint64_t v36 = (unsigned __int16 *)((char *)v33 - *v33);
          if (*v36 < 5u) {
            goto LABEL_68;
          }
          unsigned int v35 = v36[2];
          if (!v35) {
            goto LABEL_68;
          }
        }
        else
        {
          if (v21 < 0x7B) {
            goto LABEL_68;
          }
          unsigned int v35 = v20[61];
          uint64_t v33 = *v13;
          if (!v20[61]) {
            goto LABEL_68;
          }
        }
LABEL_67:
        LOWORD(v31) = *(_WORD *)((char *)v33 + v35);
        double v31 = (double)*(unint64_t *)&v31 + (double)*(unint64_t *)&v31;
      }
LABEL_68:
      if (v28 && (uint64_t v37 = v20[4]) != 0) {
        uint64_t v38 = *(unsigned int *)((char *)v19 + v37);
      }
      else {
        uint64_t v38 = 0;
      }
      double v39 = v31 / 65535.0 * (double)v38;
      if (v39 >= 0.0)
      {
        if (v39 < 4.50359963e15) {
          double v39 = (double)(((uint64_t)(v39 + v39) + 1) >> 1);
        }
      }
      else
      {
        uint64_t v40 = (uint64_t)(v39 + v39);
        if (v40 >= 1) {
          --v40;
        }
        if (v39 > -4.50359963e15) {
          double v39 = (double)(v40 >> 1);
        }
      }
      if (a4 == 1 && v15 > a1[11])
      {
        uint64_t v41 = (uint64_t)v29;
        if ((uint64_t)v29 <= (uint64_t)v39) {
          uint64_t v41 = (uint64_t)v39;
        }
        BOOL v42 = v41 > a1[12];
      }
      else
      {
        BOOL v42 = 0;
      }
      if (sub_4F44((unsigned int *)&v70) == 0x7FFFFFFF) {
        int v43 = sub_53FA4((uint64_t)&v70);
      }
      else {
        int v43 = sub_4F44((unsigned int *)&v70);
      }
      int v44 = v43;
      uint64_t v65 = sub_40A454((uint64_t)&v70);
      sub_40A2E4((uint64_t)&v67, v44, &v65);
      *(void *)unsigned __int32 v69 = v67;
      *(_DWORD *)&v69[8] = v68;
      int v45 = *a3;
      if (v9 < 0) {
        char v46 = -5;
      }
      else {
        char v46 = 5;
      }
      if (v45 == 0x7FFFFFFF) {
        int v47 = 0x7FFFFFFF;
      }
      else {
        int v47 = v9 / 10
      }
            + v45
            + (((103 * (char)(v46 + v9 % 10)) >> 15) & 1)
            + ((103 * (char)(v46 + v9 % 10)) >> 10);
      unsigned int v48 = sub_2AACDC((uint64_t *)a1[5], (uint64_t)v13[4], v47);
      double v49 = (double)v15 * 0.1;
      double v50 = v49 / (double)v16 * 3.6;
      double v51 = v49 / (double)v62 * 3.6;
      uint64_t v52 = a1[4];
      if (v42)
      {
        int v53 = v58;
        uint64_t v54 = sub_403680(v52, v13, v16, v48, v9, (unsigned int *)v69, (void *)*a1, v50, v51, (double)v61 / 1000000000.0, (double)v60 / 1000000000.0);
      }
      else
      {
        uint64_t v54 = sub_402EC4(v52, v13, v16, v48, v9, (unsigned int *)v69, *a1, v50, v51, (double)(v60 - v61) / 1000000000.0);
        int v53 = v58;
      }
      uint64_t v67 = v54;
      uint64_t v68 = v55;
      uint64_t v64 = sub_40A454((uint64_t)&v70);
      uint64_t v65 = sub_40A6A0((unsigned int *)&v67, &v64);
      int v66 = v56;
      sub_30C0C(v53, &v65);
      unint64_t result = sub_40A45C((int *)&v70);
      if (result)
      {
        unint64_t result = sub_40A918((int *)v53[1] - 3, (unsigned int *)&v70);
        unint64_t v70 = result;
        int v71 = v57;
      }
      v9 += v16;
      ++v12;
    }
    while (v11 != v12);
  }
  return result;
}

void sub_EF1468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  unint64_t v12 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_EF14B8(uint64_t a1, _DWORD *a2, int *a3, int a4, char a5)
{
  uint64_t v10 = a2 + 2;
  uint64_t v11 = sub_40A454((uint64_t)(a2 + 2));
  uint64_t v25 = v11;
  if (sub_40A820(a3))
  {
    if (a2[8] == 0x7FFFFFFF)
    {
      if (SHIDWORD(v11) >= *(_DWORD *)(a1 + 60) + *a3) {
        int v12 = *(_DWORD *)(a1 + 60) + *a3;
      }
      else {
        int v12 = HIDWORD(v11);
      }
      int v13 = sub_4F44(v10);
      if (v12 <= v13) {
        int v14 = v13;
      }
      else {
        int v14 = v12;
      }
LABEL_32:
      sub_40A2E4((uint64_t)&v26, v14, &v25);
      return v26;
    }
    int v16 = sub_4F44((unsigned int *)(*(void *)(a1 + 48) + 312));
    int v17 = a2[8];
    if (a4) {
      int v18 = *(_DWORD *)(a1 + 56);
    }
    else {
      int v18 = 0;
    }
    int v19 = v17 - v11 - v18;
    if (a5)
    {
      int v20 = *a3;
      if (*a2 > *(_DWORD *)(a1 + 64) && v17 <= *(_DWORD *)(a1 + 56) + v16)
      {
        double v21 = *(double *)(a1 + 72) * (double)(v20 - (int)v11);
        if (v21 >= 0.0)
        {
          if (v21 >= 4.50359963e15) {
            goto LABEL_25;
          }
          uint64_t v22 = (uint64_t)(v21 + v21) + 1;
        }
        else
        {
          if (v21 <= -4.50359963e15) {
            goto LABEL_25;
          }
          uint64_t v22 = (uint64_t)(v21 + v21);
          if (v22 >= 1) {
            --v22;
          }
        }
        double v21 = (double)(v22 >> 1);
LABEL_25:
        if (v19 >= (int)v21) {
          int v19 = (int)v21;
        }
      }
    }
    else
    {
      int v20 = *a3;
    }
    if (v19 <= *(_DWORD *)(a1 + 60)) {
      int v19 = *(_DWORD *)(a1 + 60);
    }
    int v23 = v19 + v20;
    if (SHIDWORD(v11) >= v23) {
      int v14 = v23;
    }
    else {
      int v14 = HIDWORD(v11);
    }
    goto LABEL_32;
  }
  unint64_t v26 = sub_40A300((unsigned int *)&v25);
  int v27 = v15;
  return v26;
}

unint64_t sub_EF1660(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3 = a2;
  if (*(_DWORD *)(a1 + 108))
  {
    unsigned int v6 = sub_3FB38C((uint64_t)a3);
    unsigned int v7 = *(_DWORD *)(a1 + 108);
    int v8 = v6 % v7;
    int v9 = v7 + v6 - v6 % v7;
    if (v8) {
      unsigned int v6 = v9;
    }
    sub_3FB2AC(v6, *(void *)(a1 + 16), (uint64_t)v19);
    if (sub_40A52C(a3, v19)) {
      uint64_t v10 = v19;
    }
    else {
      uint64_t v10 = a3;
    }
    long long v20 = *(_OWORD *)v10;
    uint64_t v21 = *((void *)v10 + 2);
    uint64_t v11 = *(void *)(a1 + 8);
    int v12 = sub_4F44((unsigned int *)&v20);
    sub_9208C(v11, v12);
    uint64_t v13 = sub_986E8(*(void *)(a1 + 8));
    int v15 = *(_DWORD *)(a1 + 112);
    int v14 = *(_DWORD *)(a1 + 116);
    if ((int)v13 - (int)v3 <= v15) {
      uint64_t v16 = v13;
    }
    else {
      uint64_t v16 = v3;
    }
    if ((int)v13 - (int)v3 <= v15) {
      LODWORD(v3) = v13;
    }
    if (v14)
    {
      int v17 = (int)v3 / v14 * v14;
      if ((int)v3 % v14 <= 0) {
        int v14 = 0;
      }
      LODWORD(v3) = v17 + v14;
    }
  }
  else
  {
    uint64_t v16 = a2;
  }
  return v16 & 0xFFFFFFFF00000000 | v3;
}

uint64_t sub_EF175C(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 200);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 152);
    if (v3)
    {
      uint64_t v4 = 0;
      do
      {
        uint64_t v5 = *(void *)(a1 + 200) + v4;
        unsigned int v6 = *(void **)(v5 + 16);
        if (v6)
        {
          *(void *)(v5 + 24) = v6;
          operator delete(v6);
        }
        v4 += 40;
        --v3;
      }
      while (v3);
      unint64_t v2 = *(void **)(a1 + 200);
    }
    free(v2);
  }
  unsigned int v7 = *(void **)(a1 + 176);
  if (v7)
  {
    *(void *)(a1 + 184) = v7;
    operator delete(v7);
  }
  int v8 = *(void **)(a1 + 64);
  if (v8)
  {
    *(void *)(a1 + 72) = v8;
    operator delete(v8);
  }
  int v9 = *(void ***)(a1 + 16);
  if (v9)
  {
    sub_40CAE4(a1 + 16, v9);
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

char *sub_EF180C(void **a1, uint64_t a2)
{
  uint64_t v3 = 0x6DB6DB6DB6DB6DB7 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x492492492492492) {
    sub_2E00();
  }
  if (0xDB6DB6DB6DB6DB6ELL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0xDB6DB6DB6DB6DB6ELL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3)) >= 0x249249249249249) {
    unint64_t v6 = 0x492492492492492;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x492492492492492) {
      sub_188D718();
    }
    unsigned int v7 = (char *)operator new(56 * v6);
  }
  else
  {
    unsigned int v7 = 0;
  }
  int v8 = &v7[56 * v3];
  *(void *)int v8 = *(void *)a2;
  *((_DWORD *)v8 + 2) = *(_DWORD *)(a2 + 8);
  int v9 = &v7[56 * v6];
  *((_OWORD *)v8 + 1) = *(_OWORD *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  uint64_t v10 = *(void *)(a2 + 32);
  uint64_t v11 = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *((void *)v8 + 4) = v10;
  *((void *)v8 + 5) = v11;
  *((_DWORD *)v8 + 12) = *(_DWORD *)(a2 + 48);
  int v12 = v8 + 56;
  uint64_t v13 = (char *)*a1;
  int v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = v8;
    a1[1] = v12;
    a1[2] = v9;
    if (!v14) {
      return v12;
    }
    goto LABEL_21;
  }
  uint64_t v15 = 0;
  do
  {
    uint64_t v16 = &v8[v15];
    int v17 = &v14[v15];
    uint64_t v18 = *(void *)&v14[v15 - 56];
    *((_DWORD *)v16 - 12) = *(_DWORD *)&v14[v15 - 48];
    *((void *)v16 - 7) = v18;
    *((void *)v16 - 4) = 0;
    *((void *)v16 - 3) = 0;
    *(_OWORD *)(v16 - 40) = *(_OWORD *)&v14[v15 - 40];
    *((void *)v16 - 3) = *(void *)&v14[v15 - 24];
    *((void *)v17 - 5) = 0;
    *((void *)v17 - 4) = 0;
    *((void *)v17 - 3) = 0;
    uint64_t v19 = *(void *)&v14[v15 - 16];
    *((_DWORD *)v16 - 2) = *(_DWORD *)&v14[v15 - 8];
    *((void *)v16 - 2) = v19;
    v15 -= 56;
  }
  while (&v14[v15] != v13);
  long long v20 = (char *)*a1;
  int v14 = (char *)a1[1];
  *a1 = &v8[v15];
  a1[1] = v12;
  a1[2] = v9;
  if (v14 != v20)
  {
    do
    {
      uint64_t v21 = (void *)*((void *)v14 - 5);
      if (v21)
      {
        *((void *)v14 - 4) = v21;
        operator delete(v21);
      }
      v14 -= 56;
    }
    while (v14 != v20);
    int v14 = v20;
  }
  if (v14) {
LABEL_21:
  }
    operator delete(v14);
  return v12;
}

char *sub_EF19D8(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xF0F0F0F0F0F0F0F1 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x1E1E1E1E1E1E1E1) {
    sub_2E00();
  }
  if (0xE1E1E1E1E1E1E1E2 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0xE1E1E1E1E1E1E1E2 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xF0F0F0F0F0F0F0F1 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0xF0F0F0F0F0F0F0) {
    unint64_t v6 = 0x1E1E1E1E1E1E1E1;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x1E1E1E1E1E1E1E1) {
      sub_188D718();
    }
    unsigned int v7 = (char *)operator new(136 * v6);
  }
  else
  {
    unsigned int v7 = 0;
  }
  long long v8 = *(_OWORD *)(a2 + 16);
  int v9 = &v7[136 * v3];
  *(_OWORD *)int v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  *((void *)v9 + 4) = *(void *)(a2 + 32);
  *(_OWORD *)(v9 + 40) = *(_OWORD *)(a2 + 40);
  *((void *)v9 + 7) = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *((_OWORD *)v9 + 4) = *(_OWORD *)(a2 + 64);
  *((void *)v9 + 10) = *(void *)(a2 + 80);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(_OWORD *)(v9 + 88) = *(_OWORD *)(a2 + 88);
  unsigned int v10 = *(_DWORD *)(a2 + 112);
  *((_DWORD *)v9 + 28) = v10;
  if (v10 <= 1) {
    *((void *)v9 + 13) = *(void *)(a2 + 104);
  }
  uint64_t v11 = &v7[136 * v6];
  *(_OWORD *)&v7[136 * v3 + 120] = *(_OWORD *)(a2 + 120);
  int v12 = v9 + 136;
  uint64_t v13 = (char *)*a1;
  int v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = v9;
    a1[1] = v12;
    a1[2] = v11;
    if (!v14) {
      return v12;
    }
    goto LABEL_28;
  }
  uint64_t v15 = 0;
  do
  {
    uint64_t v16 = &v9[v15];
    int v17 = &v14[v15];
    long long v18 = *(_OWORD *)&v14[v15 - 136];
    long long v19 = *(_OWORD *)&v14[v15 - 120];
    *((void *)v16 - 13) = *(void *)&v14[v15 - 104];
    *(_OWORD *)(v16 - 120) = v19;
    *(_OWORD *)(v16 - 136) = v18;
    *((void *)v16 - 11) = 0;
    *((void *)v16 - 10) = 0;
    *((_OWORD *)v16 - 6) = *(_OWORD *)&v14[v15 - 96];
    *((void *)v16 - 10) = *(void *)&v14[v15 - 80];
    *((void *)v17 - 12) = 0;
    *((void *)v17 - 11) = 0;
    *((void *)v17 - 10) = 0;
    *((void *)v16 - 8) = 0;
    *((void *)v16 - 7) = 0;
    *(_OWORD *)(v16 - 72) = *(_OWORD *)&v14[v15 - 72];
    *((void *)v16 - 7) = *(void *)&v14[v15 - 56];
    *((void *)v17 - 9) = 0;
    *((void *)v17 - 8) = 0;
    *((void *)v17 - 7) = 0;
    *((_OWORD *)v16 - 3) = *(_OWORD *)&v14[v15 - 48];
    unsigned int v20 = *(_DWORD *)&v14[v15 - 24];
    *((_DWORD *)v16 - 6) = v20;
    if (v20 < 2) {
      *((void *)v16 - 4) = *((void *)v17 - 4);
    }
    *(_OWORD *)&v9[v15 - 16] = *(_OWORD *)&v14[v15 - 16];
    v15 -= 136;
  }
  while (&v14[v15] != v13);
  uint64_t v21 = (char *)*a1;
  int v14 = (char *)a1[1];
  *a1 = &v9[v15];
  a1[1] = v12;
  a1[2] = v11;
  if (v14 != v21)
  {
    do
    {
      uint64_t v22 = (void *)*((void *)v14 - 9);
      if (v22)
      {
        *((void *)v14 - 8) = v22;
        operator delete(v22);
      }
      int v23 = (void *)*((void *)v14 - 12);
      if (v23)
      {
        *((void *)v14 - 11) = v23;
        operator delete(v23);
      }
      v14 -= 136;
    }
    while (v14 != v21);
    int v14 = v21;
  }
  if (v14) {
LABEL_28:
  }
    operator delete(v14);
  return v12;
}

void sub_EF1C30()
{
  unk_25FCA0F = 16641;
  word_25FC9F8 = 65;
  byte_25FCA27 = 1;
  byte_25FCA11 = 0;
}

uint64_t sub_EF1C58(uint64_t a1, void *a2)
{
  *(unsigned char *)a1 = 0;
  *(_WORD *)(a1 + 4) = 0;
  *(void *)(a1 + 8) = 0x8000000080000000;
  *(_WORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 18) = 0;
  *(void *)(a1 + 24) = 0xBFF0000000000000;
  *(void *)(a1 + 32) = 0;
  *(_WORD *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  __asm { FMOV            V1.2D, #1.0 }
  *(_OWORD *)(a1 + 72) = _Q1;
  *(unsigned char *)(a1 + 88) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 120) = -1;
  *(unsigned char *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 136) = xmmword_20F0F80;
  *(_DWORD *)(a1 + 152) = 0x7FFFFFFF;
  *(_OWORD *)(a1 + 160) = xmmword_20F0F60;
  *(void *)(a1 + 176) = 0x8000000080000000;
  *(_OWORD *)(a1 + 184) = xmmword_20F0F80;
  *(_DWORD *)(a1 + 200) = 0x7FFFFFFF;
  *(_OWORD *)(a1 + 208) = xmmword_20F0F60;
  *(void *)(a1 + 224) = 0x8000000080000000;
  memset_pattern16((void *)(a1 + 232), &unk_20F0F90, 0x48uLL);
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 304) = _Q0;
  *(void *)(a1 + 320) = 0xBFF0000000000000;
  *(void *)(a1 + 328) = sub_374D14(a2);
  *(void *)(a1 + 336) = sub_376B90(a2);
  *(void *)(a1 + 344) = sub_3766F8(a2);
  *(void *)(a1 + 352) = sub_3750CC(a2);
  *(void *)(a1 + 360) = sub_376594(a2);
  sub_42A0(a1 + 368);
  *(_WORD *)(a1 + 416) = -1;
  HIBYTE(v26[2]) = 19;
  strcpy((char *)v26, "TrafficDayOverrides");
  memset(__p, 0, 24);
  unsigned int v10 = sub_374CDC((uint64_t)a2, (uint64_t)v26, (uint64_t *)__p);
  uint64_t v11 = *(void *)(a1 + 352);
  *(_OWORD *)(a1 + 424) = *(_OWORD *)(a1 + 328);
  *(void *)(a1 + 440) = v11;
  *(_WORD *)(a1 + 448) = 0;
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 456) = 0;
  *(_WORD *)(a1 + 480) = -1;
  *(void *)(a1 + 488) = 0;
  *(_DWORD *)(a1 + 496) = -1;
  sub_EF56F4(a1 + 424, v10);
  int v12 = (void **)__p[0];
  if (__p[0])
  {
    uint64_t v13 = (void **)__p[1];
    int v14 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        if (*((char *)v13 - 1) < 0) {
          operator delete(*(v13 - 3));
        }
        v13 -= 3;
      }
      while (v13 != v12);
      int v14 = __p[0];
    }
    __p[1] = v12;
    operator delete(v14);
  }
  if (SHIBYTE(v26[2]) < 0) {
    operator delete(v26[0]);
  }
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "PathletSpeedPredictor");
  int v23 = 0;
  double v24 = 0;
  uint64_t v25 = 0;
  uint64_t v15 = sub_374CDC((uint64_t)a2, (uint64_t)__p, (uint64_t *)&v23);
  sub_54214((uint64_t)v26, (uint64_t)v15);
  uint64_t v16 = (void **)v23;
  if (v23)
  {
    int v17 = v24;
    long long v18 = v23;
    if (v24 != v23)
    {
      do
      {
        if (*((char *)v17 - 1) < 0) {
          operator delete(*(v17 - 3));
        }
        v17 -= 3;
      }
      while (v17 != v16);
      long long v18 = v23;
    }
    double v24 = v16;
    operator delete(v18);
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  sub_EF2080((BOOL *)a1, v26);
  sub_EF2298(a1, v26);
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "parking_lot_speed");
  *(double *)(a1 + 320) = sub_5C7E8(v26, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  if (sub_299C38(*(void *)(a1 + 328)) == 0x7FFFFFFF) {
    *(unsigned char *)(a1 + 4) = 0;
  }
  long long v19 = (char *)v26[2];
  if (v26[2])
  {
    do
    {
      uint64_t v22 = *(char **)v19;
      sub_57AC8((uint64_t *)v19 + 5);
      if (v19[39] < 0) {
        operator delete(*((void **)v19 + 2));
      }
      operator delete(v19);
      long long v19 = v22;
    }
    while (v22);
  }
  unsigned int v20 = v26[0];
  v26[0] = 0;
  if (v20) {
    operator delete(v20);
  }
  return a1;
}

void sub_EF1FC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  sub_5450C((uint64_t)&a13);
  sub_EF24F0(v29);
  sub_4814(v28);
  sub_EF2574(v27);
  _Unwind_Resume(a1);
}

void sub_EF206C(_Unwind_Exception *a1)
{
  sub_EF2574(v1);
  _Unwind_Resume(a1);
}

void sub_EF2080(BOOL *a1, void *a2)
{
  HIBYTE(__p[2]) = 7;
  strcpy((char *)__p, "use_hsp");
  *a1 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 9;
  strcpy((char *)__p, "live_feed");
  unint64_t v4 = (void *)sub_560F4(a2, (uint64_t)__p);
  sub_EF25BC((uint64_t)(a1 + 4), v4);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "turn_based_speeds");
  uint64_t v5 = (void *)sub_560F4(a2, (uint64_t)__p);
  sub_EF2760((uint64_t)(a1 + 16), v5);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 3;
  LODWORD(__p[0]) = 7761768;
  unint64_t v6 = (void *)sub_560F4(a2, (uint64_t)__p);
  sub_EF297C(a1 + 40, v6);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 8;
  strcpy((char *)__p, "blending");
  unsigned int v7 = (void *)sub_560F4(a2, (uint64_t)__p);
  sub_EF2A70((uint64_t)(a1 + 48), v7);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9390;
  strcpy((char *)__p[0], "rush_hour_flank_prediction_logic");
  long long v8 = (void *)sub_560F4(a2, (uint64_t)__p);
  sub_EF31B4(a1 + 128, v8);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_EF2268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_EF2298(uint64_t a1, void *a2)
{
  char v13 = 15;
  strcpy(__p, "fallback_speeds");
  unint64_t v4 = (uint64_t *)sub_5C4AC(a2, (uint64_t)__p);
  uint64_t v5 = v4;
  if (v13 < 0)
  {
    operator delete(*(void **)__p);
    uint64_t v6 = *v5;
    uint64_t v7 = v5[1];
    if (*v5 == v7) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v6 = *v4;
    uint64_t v7 = v4[1];
    if (*v4 == v7) {
      goto LABEL_12;
    }
  }
  do
  {
    if (*(_DWORD *)(v6 + 8) != 2)
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_23FDF58;
    }
    long long v8 = *(void **)v6;
    char v13 = 3;
    strcpy(__p, "frc");
    unsigned int v9 = sub_31AB44(v8, (uint64_t)__p);
    if (v13 < 0) {
      operator delete(*(void **)__p);
    }
    char v13 = 5;
    strcpy(__p, "speed");
    double v10 = sub_5C7E8(v8, (uint64_t)__p);
    if (v13 < 0) {
      operator delete(*(void **)__p);
    }
    *(double *)(a1 + 232 + 8 * v9) = v10;
    v6 += 16;
  }
  while (v6 != v7);
LABEL_12:
  char v13 = 13;
  strcpy(__p, "walking_speed");
  *(double *)(a1 + 304) = sub_5C7E8(a2, (uint64_t)__p);
  if (v13 < 0) {
    operator delete(*(void **)__p);
  }
  char v13 = 20;
  strcpy(__p, "ferry_fallback_speed");
  *(double *)(a1 + 312) = sub_5C7E8(a2, (uint64_t)__p);
  if (v13 < 0) {
    operator delete(*(void **)__p);
  }
}

void sub_EF24C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_EF24F0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    unint64_t v4 = *(void **)(a1 + 32);
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(void **)(v3 - 24);
        if (v5)
        {
          *(void *)(v3 - 16) = v5;
          operator delete(v5);
        }
        if (*(char *)(v3 - 25) < 0) {
          operator delete(*(void **)(v3 - 48));
        }
        v3 -= 48;
      }
      while (v3 != v2);
      unint64_t v4 = *(void **)(a1 + 32);
    }
    *(void *)(a1 + 40) = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_EF2574(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_EF25BC(uint64_t a1, void *a2)
{
  HIBYTE(__p[2]) = 7;
  strcpy((char *)__p, "enabled");
  *(unsigned char *)a1 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B5EB0;
  strcpy((char *)__p[0], "use_segment_based_fallback");
  *(unsigned char *)(a1 + 1) = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "old_traffic_cutoff");
  *(_DWORD *)(a1 + 4) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9250;
  strcpy((char *)__p[0], "snapshot_offset_minutes");
  *(_DWORD *)(a1 + 8) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_EF2738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_EF2760(uint64_t a1, void *a2)
{
  __p = operator new(0x20uLL);
  long long v5 = xmmword_20B8870;
  strcpy((char *)__p, "use_turn_based_hsp_speeds");
  *(unsigned char *)a1 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v5) < 0) {
    operator delete(__p);
  }
  __p = operator new(0x20uLL);
  long long v5 = xmmword_20B5EB0;
  strcpy((char *)__p, "use_turn_based_live_speeds");
  *(unsigned char *)(a1 + 1) = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v5) < 0) {
    operator delete(__p);
  }
  __p = operator new(0x50uLL);
  long long v5 = xmmword_20B99B0;
  strcpy((char *)__p, "adjust_live_speeds_based_on_turn_based_hsp_speeds_max_absolute_deviation");
  *(double *)(a1 + 8) = sub_5C7E8(a2, (uint64_t)&__p);
  if (SHIBYTE(v5) < 0) {
    operator delete(__p);
  }
  __p = operator new(0x38uLL);
  long long v5 = xmmword_20B9A20;
  strcpy((char *)__p, "number_of_pathlets_to_search_for_turn_based_speeds");
  *(void *)(a1 + 16) = sub_5C9BC(a2, (uint64_t)&__p);
  if (SHIBYTE(v5) < 0) {
    operator delete(__p);
  }
  __p = operator new(0x48uLL);
  long long v5 = xmmword_20B9A00;
  strcpy((char *)__p, "adjust_non_turn_based_live_speeds_based_on_turn_based_hsp_speeds");
  *(unsigned char *)(a1 + 2) = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v5) < 0) {
    operator delete(__p);
  }
}

void sub_EF2950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_EF297C(BOOL *a1, void *a2)
{
  *(void *)__p = operator new(0x19uLL);
  *(_OWORD *)&__p[8] = xmmword_20B9250;
  strcpy(*(char **)__p, "prefer_non_hov_profiles");
  *a1 = sub_29D62C(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  __p[23] = 14;
  strcpy(__p, "obey_hov_hours");
  a1[1] = sub_29D62C(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
}

void sub_EF2A50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_EF2A70(uint64_t a1, void *a2)
{
  *(void *)__p = operator new(0x28uLL);
  *(_OWORD *)&__p[8] = xmmword_20B93A0;
  strcpy(*(char **)__p, "live_follows_hsp_in_blending_window");
  unint64_t v4 = sub_58070(a2, (uint64_t)__p);
  if (v4 && (int v5 = *((_DWORD *)v4 + 12), (v5 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 40) = v5 == 4;
    if ((__p[23] & 0x80000000) != 0) {
      goto LABEL_6;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 40) = *(unsigned char *)(a1 + 40) != 0;
    if ((__p[23] & 0x80000000) != 0) {
LABEL_6:
    }
      operator delete(*(void **)__p);
  }
  *(void *)__p = operator new(0x20uLL);
  *(_OWORD *)&__p[8] = xmmword_20B8890;
  strcpy(*(char **)__p, "max_speed_factor_over_live_ff");
  uint64_t v6 = sub_58070(a2, (uint64_t)__p);
  uint64_t v7 = (void *)(a1 + 32);
  if (v6)
  {
    uint64_t v7 = v6 + 5;
    if (*((_DWORD *)v6 + 12) != 1) {
      uint64_t v7 = (void *)(a1 + 32);
    }
  }
  *(void *)(a1 + 32) = *v7;
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(void *)__p = operator new(0x20uLL);
  *(_OWORD *)&__p[8] = xmmword_20B91C0;
  strcpy(*(char **)__p, "live_prediction_exponent");
  long long v8 = sub_58070(a2, (uint64_t)__p);
  unsigned int v9 = (void *)(a1 + 24);
  if (v8)
  {
    unsigned int v9 = v8 + 5;
    if (*((_DWORD *)v8 + 12) != 1) {
      unsigned int v9 = (void *)(a1 + 24);
    }
  }
  *(void *)(a1 + 24) = *v9;
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(void *)__p = operator new(0x28uLL);
  *(_OWORD *)&__p[8] = xmmword_20B9390;
  strcpy(*(char **)__p, "live_observation_count_min_trips");
  double v10 = sub_58070(a2, (uint64_t)__p);
  if (v10 && *((_DWORD *)v10 + 12) == 1)
  {
    *(_WORD *)(a1 + 72) = (int)*((double *)v10 + 5);
    if ((__p[23] & 0x80000000) != 0) {
      goto LABEL_22;
    }
  }
  else
  {
    *(_WORD *)(a1 + 72) = *(_WORD *)(a1 + 72);
    if ((__p[23] & 0x80000000) != 0) {
LABEL_22:
    }
      operator delete(*(void **)__p);
  }
  *(void *)__p = operator new(0x28uLL);
  *(_OWORD *)&__p[8] = xmmword_20B9390;
  strcpy(*(char **)__p, "live_observation_count_max_count");
  uint64_t v11 = sub_58070(a2, (uint64_t)__p);
  if (v11 && *((_DWORD *)v11 + 12) == 1)
  {
    *(_WORD *)(a1 + 74) = (int)*((double *)v11 + 5);
    if ((__p[23] & 0x80000000) == 0) {
      goto LABEL_29;
    }
  }
  else
  {
    *(_WORD *)(a1 + 74) = *(_WORD *)(a1 + 74);
    if ((__p[23] & 0x80000000) == 0) {
      goto LABEL_29;
    }
  }
  operator delete(*(void **)__p);
LABEL_29:
  __p[23] = 7;
  strcpy(__p, "windows");
  int v12 = (uint64_t *)sub_5C4AC(a2, (uint64_t)__p);
  BOOL v42 = 0;
  int v43 = 0;
  uint64_t v44 = 0;
  sub_54DE8(&v42, *v12, v12[1], (v12[1] - *v12) >> 4);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  char v13 = *(__n128 **)a1;
  *(void *)(a1 + 8) = *(void *)a1;
  uint64_t v15 = v42;
  int v14 = v43;
  size_t v16 = v43 - (unsigned char *)v42;
  unint64_t v17 = (v43 - (unsigned char *)v42) >> 4;
  if (v17 <= (uint64_t)(*(void *)(a1 + 16) - (void)v13) >> 4)
  {
    long long v18 = v13;
    if (v42 == v43) {
      goto LABEL_43;
    }
    goto LABEL_38;
  }
  if ((v16 & 0x8000000000000000) != 0) {
    sub_2E00();
  }
  long long v18 = (__n128 *)operator new(v16);
  *(void *)a1 = v18;
  *(void *)(a1 + 8) = v18;
  *(void *)(a1 + 16) = &v18[v17];
  if (v13)
  {
    operator delete(v13);
    uint64_t v15 = v42;
    int v14 = v43;
    long long v18 = *(__n128 **)(a1 + 8);
  }
  if (v15 != (_DWORD *)v14)
  {
    do
    {
LABEL_38:
      if (v15[2] != 2)
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_23FDF58;
      }
      long long v19 = *(void **)v15;
      __p[23] = 13;
      strcpy(__p, "traffic_level");
      double v20 = sub_5C7E8(v19, (uint64_t)__p);
      sub_EF7AF4(&v39, v19);
      uint64_t v21 = v39;
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      *(double *)__p = v20;
      *(void *)&__p[8] = v21;
      long long v18 = sub_EF83AC((__n128 **)a1, (uint64_t)v18, (__n128 *)__p) + 1;
      v15 += 4;
    }
    while (v15 != (_DWORD *)v14);
    long long v18 = *(__n128 **)(a1 + 8);
  }
LABEL_43:
  unint64_t v22 = 126 - 2 * __clz(((uint64_t)v18 - *(void *)a1) >> 4);
  if (v18 == *(__n128 **)a1) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = v22;
  }
  sub_EF88C8(*(void *)a1, (unint64_t)v18, v23, 1);
  *(void *)__p = operator new(0x30uLL);
  *(_OWORD *)&__p[8] = xmmword_20B93C0;
  strcpy(*(char **)__p, "live_observation_count_dependent_windows");
  double v24 = (uint64_t *)sub_5C4AC(a2, (uint64_t)__p);
  double v39 = 0;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  sub_54DE8(&v39, *v24, v24[1], (v24[1] - *v24) >> 4);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  uint64_t v25 = (uint64_t *)(a1 + 48);
  unint64_t v26 = *(__n128 **)(a1 + 48);
  *(void *)(a1 + 56) = v26;
  uint64_t v28 = v39;
  uint64_t v27 = v40;
  size_t v29 = v40 - (unsigned char *)v39;
  unint64_t v30 = (v40 - (unsigned char *)v39) >> 4;
  if (v30 <= (uint64_t)(*(void *)(a1 + 64) - (void)v26) >> 4)
  {
    double v31 = v26;
    if (v39 == v40) {
      goto LABEL_60;
    }
    goto LABEL_55;
  }
  if ((v29 & 0x8000000000000000) != 0) {
    sub_2E00();
  }
  double v31 = (__n128 *)operator new(v29);
  *(void *)(a1 + 48) = v31;
  *(void *)(a1 + 56) = v31;
  *(void *)(a1 + 64) = &v31[v30];
  if (v26)
  {
    operator delete(v26);
    uint64_t v28 = v39;
    uint64_t v27 = v40;
    double v31 = *(__n128 **)(a1 + 56);
  }
  if (v28 != (_DWORD *)v27)
  {
    do
    {
LABEL_55:
      if (v28[2] != 2)
      {
        uint64_t v38 = __cxa_allocate_exception(8uLL);
        *uint64_t v38 = &off_23FDF58;
      }
      BOOL v32 = *(void **)v28;
      __p[23] = 10;
      strcpy(__p, "live_count");
      double v33 = sub_5C7E8(v32, (uint64_t)__p);
      sub_EF7AF4(&v45, v32);
      uint64_t v34 = v45;
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      *(double *)__p = v33;
      *(void *)&__p[8] = v34;
      double v31 = sub_EF83AC((__n128 **)(a1 + 48), (uint64_t)v31, (__n128 *)__p) + 1;
      v28 += 4;
    }
    while (v28 != (_DWORD *)v27);
    double v31 = *(__n128 **)(a1 + 56);
  }
LABEL_60:
  unint64_t v35 = 126 - 2 * __clz(((uint64_t)v31 - *v25) >> 4);
  if (v31 == (__n128 *)*v25) {
    uint64_t v36 = 0;
  }
  else {
    uint64_t v36 = v35;
  }
  sub_EF9938(*v25, (unint64_t)v31, v36, 1);
  if (v39)
  {
    sub_5B788((uint64_t *)&v39);
    operator delete(v39);
  }
  if (v42)
  {
    sub_5B788((uint64_t *)&v42);
    operator delete(v42);
  }
}

void sub_EF3110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
}

void sub_EF31B4(BOOL *a1, void *a2)
{
  char v7 = 7;
  strcpy(__p, "enabled");
  *a1 = sub_29D62C(a2, (uint64_t)__p);
  if (v7 < 0) {
    operator delete(*(void **)__p);
  }
  char v7 = 11;
  strcpy(__p, "onset_flank");
  unint64_t v4 = (void *)sub_560F4(a2, (uint64_t)__p);
  sub_EF32F0((uint64_t)(a1 + 8), v4);
  if (v7 < 0) {
    operator delete(*(void **)__p);
  }
  char v7 = 17;
  strcpy(__p, "dissipation_flank");
  int v5 = (void *)sub_560F4(a2, (uint64_t)__p);
  sub_EF32F0((uint64_t)(a1 + 56), v5);
  if (v7 < 0) {
    operator delete(*(void **)__p);
  }
}

void sub_EF32CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_EF32F0(uint64_t a1, void *a2)
{
  HIBYTE(__p[2]) = 9;
  strcpy((char *)__p, "tolerance");
  *(double *)a1 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  strcpy((char *)__p, "acceleration_threshold");
  HIBYTE(__p[2]) = 22;
  *(double *)(a1 + 8) = sub_5C7E8(a2, (uint64_t)__p) * 60.0;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8870;
  strcpy((char *)__p[0], "hsp_identification_window");
  *(_DWORD *)(a1 + 16) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91C0;
  strcpy((char *)__p[0], "hsp_identification_ratio");
  *(double *)(a1 + 24) = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8E90;
  strcpy((char *)__p[0], "hsp_identification_speed_change");
  *(double *)(a1 + 32) = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  unint64_t result = sub_EF7AF4(__p, a2);
  *(void **)(a1 + 40) = __p[0];
  return result;
}

void sub_EF34C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_EF34EC(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  if (!*(unsigned char *)(a1 + 4)) {
    return -1.0;
  }
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  if (*a3 != v6)
  {
    unint64_t v7 = (v6 - v5) >> 3;
    if (*(void *)(a1 + 32) < v7) {
      unint64_t v7 = *(void *)(a1 + 32);
    }
    uint64_t v6 = v5 + 8 * v7;
  }
  uint64_t v8 = *(void *)(a1 + 328);
  if (*(unsigned char *)(a1 + 17))
  {
    uint64_t v13 = *a3;
    uint64_t v14 = v6;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
  }
  double result = sub_299F0C(v8, a2, (uint64_t)&v13, 0);
  BOOL v12 = *(uint64_t *)&result > -1 && ((*(void *)&result & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF
     || (unint64_t)(*(void *)&result - 1) < 0xFFFFFFFFFFFFFLL
     || (*(void *)&result & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (!v12 || result <= 0.0)
  {
    if (*(unsigned char *)(a1 + 5)) {
      return sub_EF35D0(a1, a2);
    }
  }
  return result;
}

double sub_EF35D0(uint64_t a1, unint64_t a2)
{
  if (!*(unsigned char *)(a1 + 4)) {
    return -1.0;
  }
  __p = 0;
  unint64_t v26 = 0;
  uint64_t v27 = 0;
  sub_318C48(*(void *)(a1 + 336), a2, (unint64_t *)&__p);
  double v3 = -1.0;
  if (v26 != __p)
  {
    uint64_t v4 = 0;
    unsigned __int8 v5 = 0;
    uint64_t v6 = (v26 - (unsigned char *)__p) >> 3;
    double v7 = 0.0;
    double v8 = 0.0;
    do
    {
      unint64_t v11 = sub_3A5DDC(*(void *)(a1 + 336), *(void *)((char *)__p + v4));
      uint64_t v12 = *(void *)(a1 + 328);
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      double v13 = sub_299F0C(v12, v11, (uint64_t)&v23, 0);
      double v14 = v13;
      BOOL v15 = (*(void *)&v13 & 0x7FFFFFFFFFFFFFFFLL) == 0;
      if ((unint64_t)(*(void *)&v13 - 1) < 0xFFFFFFFFFFFFFLL) {
        BOOL v15 = 1;
      }
      char v17 = ((*(void *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF && v13 >= 0.0 || v15;
      if (v13 > 0.0) {
        char v18 = v17;
      }
      else {
        char v18 = 0;
      }
      if ((v18 & 1) == 0)
      {
        unint64_t v19 = sub_3A5DDC(*(void *)(a1 + 336), *(void *)((char *)__p + v4));
        uint64_t v23 = 0;
        uint64_t v24 = 0;
        double v14 = sub_EF4078(a1, v19, (_DWORD *)(a1 + 368), &v23);
      }
      double v20 = (int *)sub_2D5D58(*(void *)(a1 + 352), *(unsigned int *)((char *)__p + v4) | ((unint64_t)*(unsigned __int16 *)((char *)__p + v4 + 4) << 32));
      uint64_t v21 = (unsigned __int16 *)((char *)v20 - *v20);
      if (*v21 < 9u)
      {
        uint64_t v9 = 0;
      }
      else
      {
        uint64_t v9 = v21[4];
        if (v9) {
          uint64_t v9 = *(unsigned int *)((char *)v20 + v9);
        }
      }
      v5 |= v18;
      double v10 = (double)v9 / 100.0;
      double v7 = v7 + v10 / (v14 / 3.6);
      double v8 = v8 + v10;
      v4 += 8;
      --v6;
    }
    while (v6);
    if (((v7 != 0.0) & v5) != 0) {
      double v3 = v8 / v7 * 3.6;
    }
  }
  if (__p)
  {
    unint64_t v26 = __p;
    operator delete(__p);
  }
  return v3;
}

void sub_EF37C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_EF37F0(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    unint64_t v5 = a2 & 0xFFFFFFFFFFFFLL;
    uint64_t v6 = (int *)sub_2D5D58(*(void *)(a1 + 352), a2 & 0xFFFFFFFFFFFFLL);
    double v7 = (unsigned __int16 *)((char *)v6 - *v6);
    unsigned int v8 = *v7;
    if ((a2 & 0x4000000000000000) != 0)
    {
      if (v8 < 0xB) {
        return *(double *)(a1 + 304);
      }
      unsigned int v13 = v7[5];
      if (!v13 || (*(int *)((char *)v6 + v13) & 1) == 0) {
        return *(double *)(a1 + 304);
      }
    }
    else
    {
      if (v8 < 0xB) {
        return *(double *)(a1 + 304);
      }
      unsigned int v9 = v7[5];
      if (!v9 || (*(int *)((char *)v6 + v9) & 2) == 0) {
        return *(double *)(a1 + 304);
      }
    }
    double v14 = (int *)sub_2D5D58(*(void *)(a1 + 352), a2 & 0xFFFFFFFFFFFFLL);
    BOOL v15 = (unsigned __int16 *)((char *)v14 - *v14);
    if (*v15 >= 0x2Fu)
    {
      uint64_t v16 = v15[23];
      if (v16)
      {
        unsigned int v17 = *((unsigned __int8 *)v14 + v16);
        BOOL v18 = v17 > 0x2D;
        uint64_t v19 = (1 << v17) & 0x208040000000;
        if (!v18 && v19 != 0) {
          return *(double *)(a1 + 320);
        }
      }
    }
    unint64_t v26 = (int *)sub_2D5D58(*(void *)(a1 + 352), a2 & 0xFFFFFFFFFFFFLL);
    uint64_t v27 = (unsigned __int16 *)((char *)v26 - *v26);
    if (*v27 >= 0xBu)
    {
      uint64_t v28 = v27[5];
      if (v28)
      {
        if ((*((unsigned char *)v26 + v28) & 8) != 0) {
          return *(double *)(a1 + 312);
        }
      }
    }
    double result = sub_327854(*(void *)(a1 + 344), a2);
    BOOL v31 = *(uint64_t *)&result > -1 && ((*(void *)&result & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF
       || (unint64_t)(*(void *)&result - 1) < 0xFFFFFFFFFFFFFLL
       || (*(void *)&result & 0x7FFFFFFFFFFFFFFFLL) == 0;
    if (v31 && result > 0.0) {
      return result;
    }
    uint64_t v22 = a1 + 232;
    uint64_t v23 = (int *)sub_2D5D58(*(void *)(a1 + 352), v5);
    uint64_t v24 = (unsigned __int16 *)((char *)v23 - *v23);
    if (*v24 < 0x1Bu) {
      return *(double *)v22;
    }
    goto LABEL_53;
  }
  if (sub_EF3AC4(*(void *)(a1 + 336), a2)) {
    return *(double *)(a1 + 320);
  }
  double result = sub_327854(*(void *)(a1 + 344), a2);
  BOOL v12 = *(uint64_t *)&result > -1 && ((*(void *)&result & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF
     || (unint64_t)(*(void *)&result - 1) < 0xFFFFFFFFFFFFFLL
     || (*(void *)&result & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (!v12 || result <= 0.0)
  {
    if (sub_EF3B9C(*(void *)(a1 + 336), a2)) {
      return *(double *)(a1 + 312);
    }
    unint64_t v21 = sub_EEB3D0(*(void *)(a1 + 336), a2);
    uint64_t v22 = a1 + 232;
    uint64_t v23 = (int *)sub_2D5D58(*(void *)(a1 + 352), v21 & 0xFFFFFFFFFFFFLL);
    uint64_t v24 = (unsigned __int16 *)((char *)v23 - *v23);
    if (*v24 < 0x1Bu)
    {
      uint64_t v25 = 0;
      return *(double *)(v22 + 8 * v25);
    }
LABEL_53:
    uint64_t v25 = v24[13];
    if (v25) {
      return *(double *)(v22 + 8 * *((unsigned __int8 *)v23 + v25));
    }
    return *(double *)(v22 + 8 * v25);
  }
  return result;
}

BOOL sub_EF3AC4(uint64_t a1, unint64_t a2)
{
  unint64_t v9 = a2;
  unint64_t v3 = 0x2127599BF4325C37
     * (((a2 >> 61) & 2 | (a2 >> 63) | (a2 >> 30) & 0xFFFFFFFC | (a2 << 32)) ^ (((a2 >> 30) & 0xFFFFFFFC | (a2 << 32)) >> 23));
  unint64_t v4 = (v3 ^ ~(v3 >> 47)) + ((v3 ^ (v3 >> 47)) << 21);
  unint64_t v5 = 21 * ((265 * (v4 ^ (v4 >> 24))) ^ ((265 * (v4 ^ (v4 >> 24))) >> 14));
  sub_32AC3C(a1 + 3896, &v9, 2147483649u * (v5 ^ (v5 >> 28)), v8);
  if (v8[0]) {
    return *((unsigned char *)v8[3] + 18) != 0;
  }
  sub_32A6F4(a1, v9);
  return (v7 >> 16) & 1;
}

BOOL sub_EF3B9C(uint64_t a1, unint64_t a2)
{
  unint64_t v9 = a2;
  unint64_t v3 = 0x2127599BF4325C37
     * (((a2 >> 61) & 2 | (a2 >> 63) | (a2 >> 30) & 0xFFFFFFFC | (a2 << 32)) ^ (((a2 >> 30) & 0xFFFFFFFC | (a2 << 32)) >> 23));
  unint64_t v4 = (v3 ^ ~(v3 >> 47)) + ((v3 ^ (v3 >> 47)) << 21);
  unint64_t v5 = 21 * ((265 * (v4 ^ (v4 >> 24))) ^ ((265 * (v4 ^ (v4 >> 24))) >> 14));
  sub_32AC3C(a1 + 3896, &v9, 2147483649u * (v5 ^ (v5 >> 28)), v8);
  if (v8[0]) {
    return *((unsigned char *)v8[3] + 19) != 0;
  }
  sub_32A6F4(a1, v9);
  return (v7 >> 24) & 1;
}

unint64_t sub_EF3C74(uint64_t a1, unint64_t a2)
{
  if (*(unsigned __int16 *)(a1 + 120) > (unsigned __int16)sub_3AC590(*(void *)(a1 + 344), a2)
    || (unsigned __int16 v4 = sub_29A160(*(void *)(a1 + 328), a2), *(unsigned __int16 *)(a1 + 122) <= v4))
  {
    sub_EF3EA4(a1, a2);
    double v7 = v6;
    return sub_EF3D20(&v7, (double **)(a1 + 48));
  }
  else
  {
    double v7 = (double)v4;
    return sub_EF3D20(&v7, (double **)(a1 + 96));
  }
}

unint64_t sub_EF3D20(double *a1, double **a2)
{
  double v2 = *a1;
  unint64_t v3 = *a2;
  double v4 = **a2;
  if (*a1 <= v4) {
    return *((void *)v3 + 1);
  }
  unint64_t v5 = a2[1];
  if ((char *)v5 - (char *)v3 >= 16)
  {
    if ((char *)v5 - (char *)v3 != 16)
    {
      unint64_t v6 = (unint64_t)((char *)v5 - (char *)v3) >> 4;
      do
      {
        unint64_t v7 = (4 * v6) & 0xFFFFFFFFFFFFFFF0;
        _X13 = (char *)v3 + v7;
        __asm { PRFM            #0, [X13] }
        double v14 = &v3[2 * (v6 >> 1)];
        _X12 = (char *)v14 + v7;
        __asm { PRFM            #0, [X12] }
        if (*v14 >= v2) {
          unint64_t v17 = 0;
        }
        else {
          unint64_t v17 = v6 >> 1;
        }
        v3 += 2 * v17;
        v6 -= v6 >> 1;
      }
      while ((uint64_t)v6 > 1);
      double v4 = *v3;
    }
    v3 += 2 * (v4 < v2);
  }
  if (v3 == v5) {
    return *((void *)v5 - 1);
  }
  double v18 = *(v3 - 2);
  if (v18 == *v3) {
    return *((void *)v3 + 1);
  }
  double v20 = (v2 - v18) / (*v3 - v18);
  int v21 = *((_DWORD *)v3 + 2);
  int v22 = *((_DWORD *)v3 + 3);
  int v24 = *((_DWORD *)v3 - 2);
  int v23 = *((_DWORD *)v3 - 1);
  int v25 = v21 - v24;
  int v26 = v22 - v23;
  double v27 = v20 * (double)v25;
  if (v27 >= 0.0)
  {
    if (v27 >= 4.50359963e15) {
      goto LABEL_23;
    }
    uint64_t v28 = (uint64_t)(v27 + v27) + 1;
  }
  else
  {
    if (v27 <= -4.50359963e15) {
      goto LABEL_23;
    }
    uint64_t v28 = (uint64_t)(v27 + v27);
    if (v28 >= 1) {
      --v28;
    }
  }
  double v27 = (double)(v28 >> 1);
LABEL_23:
  double v29 = v20 * (double)v26;
  if (v29 >= 0.0)
  {
    if (v29 < 4.50359963e15)
    {
      uint64_t v30 = (uint64_t)(v29 + v29) + 1;
LABEL_30:
      double v29 = (double)(v30 >> 1);
    }
  }
  else if (v29 > -4.50359963e15)
  {
    uint64_t v30 = (uint64_t)(v29 + v29);
    if (v30 >= 1) {
      --v30;
    }
    goto LABEL_30;
  }
  return (v24 + (int)v27) | ((unint64_t)(v23 + (int)v29) << 32);
}

void sub_EF3EA4(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = a1 + 368;
  if (sub_488C((_DWORD *)(a1 + 368)) && (a2 & 0x8000000000000000) == 0)
  {
    sub_EF37F0(a1, a2);
    BOOL v5 = *(unsigned char *)(a1 + 40) && sub_EF42D0(*(void *)(a1 + 336), a2);
    uint64_t v6 = *(void *)(a1 + 360);
    v14[0] = sub_EF41EC(a1 + 424, a2, v4);
    unsigned __int16 v7 = sub_51B4(v4);
    v15[0] = 0;
    v15[1] = 0;
    sub_EF43A8(v6, a2, v14, v7, v5, v15);
    if (*(unsigned char *)(a1 + 4))
    {
      uint64_t v8 = *(void *)(a1 + 328);
      if (*(unsigned char *)(a1 + 17)) {
        unint64_t v9 = (unsigned __int8 *)v15;
      }
      else {
        unint64_t v9 = v14;
      }
      *(void *)unint64_t v9 = 0;
      *((void *)v9 + 1) = 0;
      double v10 = sub_299F0C(v8, a2, (uint64_t)v9, 0);
      BOOL v13 = *(uint64_t *)&v10 > -1 && ((*(void *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF
         || (unint64_t)(*(void *)&v10 - 1) < 0xFFFFFFFFFFFFFLL
         || (*(void *)&v10 & 0x7FFFFFFFFFFFFFFFLL) == 0;
      if (!v13 || v10 <= 0.0)
      {
        if (*(unsigned char *)(a1 + 5)) {
          sub_EF35D0(a1, a2);
        }
      }
    }
  }
}

double sub_EF4078(uint64_t a1, unint64_t a2, _DWORD *a3, uint64_t **a4)
{
  if ((a2 & 0x8000000000000000) != 0 || !sub_488C(a3) || !*(unsigned char *)a1) {
    return sub_EF37F0(a1, a2);
  }
  if (sub_EF3AC4(*(void *)(a1 + 336), a2)) {
    return *(double *)(a1 + 320);
  }
  int v9 = sub_EF41EC(a1 + 424, a2, (uint64_t)a3);
  unsigned __int8 v22 = v9;
  if (*(unsigned char *)(a1 + 40))
  {
    if (!*(unsigned char *)(a1 + 41) || (BOOL v10 = 0, v9) && v9 != 6) {
      BOOL v10 = sub_EF42D0(*(void *)(a1 + 336), a2);
    }
  }
  else
  {
    BOOL v10 = 0;
  }
  unint64_t v11 = *a4;
  BOOL v12 = a4[1];
  if (*a4 != v12)
  {
    unint64_t v13 = v12 - v11;
    if (*(void *)(a1 + 32) < v13) {
      unint64_t v13 = *(void *)(a1 + 32);
    }
    BOOL v12 = &v11[v13];
  }
  int v14 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 360);
  int v16 = (unsigned __int16)sub_51B4((uint64_t)a3);
  if (v14)
  {
    double v20 = *a4;
    int v21 = v12;
  }
  else
  {
    double v20 = 0;
    int v21 = 0;
  }
  double result = sub_EF43A8(v15, a2, &v22, v16, v10, &v20);
  BOOL v17 = *(uint64_t *)&result <= -1 || ((*(void *)&result & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF;
  BOOL v18 = v17 && (unint64_t)(*(void *)&result - 1) >= 0xFFFFFFFFFFFFFLL;
  BOOL v19 = !v18 || (*(void *)&result & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (!v19 || result <= 0.0) {
    return sub_EF37F0(a1, a2);
  }
  return result;
}

uint64_t sub_EF41EC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5 = sub_EEB3D0(*(void *)(a1 + 8), a2);
  unsigned int v6 = v5;
  sub_EF7BF0(a1, v5 & 0xFFFFFFFFFFFFLL);
  if (*(unsigned char *)(a1 + 24)) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 25))
  {
    uint64_t v8 = *(unsigned __int16 *)(a1 + 56);
    if (v8 != 0xFFFF)
    {
      int v9 = (unsigned __int8 *)sub_29C830(*(void *)a1, v6, v8);
      if (sub_359194((uint64_t)v9)) {
        return v9[6];
      }
    }
  }
  BOOL v10 = sub_EF7DB8(a1, a3);
  if (*(_DWORD *)v10 != -1) {
    return *((unsigned __int8 *)v10 + 4);
  }

  return sub_506C(a3);
}

BOOL sub_EF42D0(uint64_t a1, unint64_t a2)
{
  unint64_t v9 = a2;
  unint64_t v3 = 0x2127599BF4325C37
     * (((a2 >> 61) & 2 | (a2 >> 63) | (a2 >> 30) & 0xFFFFFFFC | (a2 << 32)) ^ (((a2 >> 30) & 0xFFFFFFFC | (a2 << 32)) >> 23));
  unint64_t v4 = (v3 ^ ~(v3 >> 47)) + ((v3 ^ (v3 >> 47)) << 21);
  unint64_t v5 = 21 * ((265 * (v4 ^ (v4 >> 24))) ^ ((265 * (v4 ^ (v4 >> 24))) >> 14));
  sub_32AC3C(a1 + 3896, &v9, 2147483649u * (v5 ^ (v5 >> 28)), v8);
  if (v8[0]) {
    return *((unsigned char *)v8[3] + 17) != 0;
  }
  sub_32A6F4(a1, v9);
  return (v7 >> 8) & 1;
}

double sub_EF43A8(uint64_t a1, uint64_t a2, unsigned __int8 *a3, int a4, int a5, uint64_t **a6)
{
  double v6 = -1.0;
  if ((a2 & 0x8000000000000000) == 0)
  {
    int v7 = HIDWORD(a2);
    if (a2)
    {
      unint64_t v13 = sub_2E5F98(a1, a2, 1);
      if (v13)
      {
        int v14 = &v13[-*(int *)v13];
        unsigned int v15 = *(unsigned __int16 *)v14;
        if ((v7 & 0x40000000) != 0)
        {
          if (v15 < 5) {
            return v6;
          }
          int v16 = *((unsigned __int16 *)v14 + 2);
          if (!v16) {
            return v6;
          }
        }
        else
        {
          if (v15 < 7) {
            return v6;
          }
          int v16 = *((unsigned __int16 *)v14 + 3);
          if (!v16) {
            return v6;
          }
        }
        BOOL v17 = (unsigned int *)&v13[v16 + *(unsigned int *)&v13[v16]];
        if (*v17 > (v7 & 0x3FFFFFFFu))
        {
          BOOL v18 = (unsigned int *)sub_3AF78C(a1, (int *)((char *)v17+ 4 * v7+ *(unsigned int *)((char *)v17 + (4 * v7) + 4)+ 4), a5, a6);
          return sub_EF8274(a1, v18, a3, a4, v19, v20, v21);
        }
      }
    }
  }
  return v6;
}

char *sub_EF44A0(uint64_t a1, unint64_t a2, _DWORD *a3, uint64_t *a4)
{
  double result = (char *)sub_488C(a3);
  if (result)
  {
    double result = 0;
    if (*(unsigned char *)a1)
    {
      if ((a2 & 0x8000000000000000) == 0)
      {
        if (sub_EF3AC4(*(void *)(a1 + 336), a2))
        {
          return 0;
        }
        else
        {
          uint64_t v8 = *a4;
          uint64_t v9 = a4[1];
          uint64_t v13 = v9;
          if (v8 != v9)
          {
            unint64_t v10 = (v9 - v8) >> 3;
            if (*(void *)(a1 + 32) < v10) {
              unint64_t v10 = *(void *)(a1 + 32);
            }
            uint64_t v13 = v8 + 8 * v10;
          }
          uint64_t v11 = *(void *)(a1 + 360);
          uint64_t v12 = v8;
          return sub_EF4560(v11, a2, &v12, &v13);
        }
      }
    }
  }
  return result;
}

char *sub_EF4560(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  double result = 0;
  if (a2 < 0) {
    return result;
  }
  int v6 = HIDWORD(a2);
  if (!a2) {
    return result;
  }
  double result = sub_2E5F98(a1, a2, 1);
  if (!result) {
    return result;
  }
  uint64_t v9 = &result[-*(int *)result];
  unsigned int v10 = *(unsigned __int16 *)v9;
  if ((v6 & 0x40000000) != 0)
  {
    if (v10 < 5) {
      return 0;
    }
    unsigned int v11 = *((unsigned __int16 *)v9 + 2);
    if (!v11) {
      return 0;
    }
  }
  else
  {
    if (v10 < 7) {
      return 0;
    }
    unsigned int v11 = *((unsigned __int16 *)v9 + 3);
    if (!v11) {
      return 0;
    }
  }
  uint64_t v12 = v11;
  uint64_t v13 = &result[v11];
  uint64_t v14 = *(unsigned int *)v13;
  unsigned int v15 = (unsigned int *)&v13[v14];
  if (*v15 <= (v6 & 0x3FFFFFFFu)) {
    return 0;
  }
  uint64_t v16 = (4 * v6);
  uint64_t v17 = *(unsigned int *)((char *)v15 + v16 + 4);
  BOOL v18 = (int *)((char *)v15 + v16 + v17 + 4);
  double v19 = (unsigned __int16 *)((char *)v18 - *v18);
  if (*v19 < 0xDu) {
    return 0;
  }
  uint64_t v20 = v19[6];
  if (!v19[6]) {
    return 0;
  }
  double v21 = (unsigned int *)((char *)v18 + v20);
  uint64_t v22 = *v21;
  int v23 = (unsigned int *)((char *)v21 + v22 + 4);
  uint64_t v24 = *(unsigned int *)((char *)v21 + v22);
  int v25 = (char *)&v23[v24];
  if (v24)
  {
    int v26 = (void *)*a4;
    if (*a3 == *a4) {
      return (char *)(&result[4 * v24 + 8 + v12 + v22 + v20 + v17 + v14 + v16] != v25);
    }
    while (1)
    {
      double v27 = (int *)((char *)v23 + *v23);
      uint64_t v28 = (unsigned __int16 *)((char *)v27 - *v27);
      unsigned int v29 = *v28;
      if (v29 < 9)
      {
        LODWORD(v30) = 0;
      }
      else
      {
        uint64_t v30 = v28[4];
        if (v28[4]) {
          LODWORD(v30) = *((unsigned __int8 *)v27 + v30);
        }
      }
      if (*(unsigned __int16 *)(a1 + 3872) == v30 && (v29 < 0xB || !v28[5] || !*((unsigned char *)v27 + v28[5])))
      {
        BOOL v31 = (char *)v27 + v28[6];
        BOOL v32 = (void *)*a3;
        while (__PAIR64__(*((unsigned __int16 *)v31 + 2), *(_DWORD *)v31) != __PAIR64__((unsigned __int16)WORD2(*v32), *v32)|| ((*v32 & 0x4000000000000000) == 0) == (v31[6] != 0))
        {
          if (++v32 == v26) {
            goto LABEL_19;
          }
        }
        if (v32 != v26) {
          break;
        }
      }
LABEL_19:
      if (++v23 == (unsigned int *)v25)
      {
        int v23 = (unsigned int *)v25;
        return (char *)(v23 != (unsigned int *)v25);
      }
    }
  }
  return (char *)(v23 != (unsigned int *)v25);
}

void sub_EF4794(uint64_t a1, unint64_t a2, unsigned int *a3, uint64_t **a4, uint64_t **a5)
{
  double v10 = sub_EF37F0(a1, a2);
  if ((a2 & 0x8000000000000000) == 0 && sub_488C(a3))
  {
    if (*(unsigned char *)a1)
    {
      double v10 = sub_EF4078(a1, a2, a3, a4);
      if (!*(unsigned char *)(a1 + 4)) {
        return;
      }
    }
    else if (!*(unsigned char *)(a1 + 4))
    {
      return;
    }
    if (sub_299C38(*(void *)(a1 + 328)) == 0x7FFFFFFF) {
      return;
    }
    unint64_t v11 = sub_EEB3D0(*(void *)(a1 + 336), a2) & 0xFFFFFFFFFFFFLL;
    uint64_t v12 = (int *)sub_2D5D58(*(void *)(a1 + 352), v11);
    uint64_t v13 = (unsigned __int16 *)((char *)v12 - *v12);
    if (*v13 >= 0xDu && (uint64_t v14 = v13[6]) != 0)
    {
      int v15 = *(unsigned __int16 *)((char *)v12 + v14);
      uint64_t v16 = (unsigned int *)(a1 + 368);
      if (!sub_488C((_DWORD *)(a1 + 368))) {
        goto LABEL_11;
      }
    }
    else
    {
      int v15 = 0;
      uint64_t v16 = (unsigned int *)(a1 + 368);
      if (!sub_488C((_DWORD *)(a1 + 368)))
      {
LABEL_11:
        int v17 = sub_299C38(*(void *)(a1 + 328));
        int v18 = *(_DWORD *)(a1 + 12);
        if (v18 < 0) {
          char v19 = -5;
        }
        else {
          char v19 = 5;
        }
        sub_3BDCD8(*(void *)(a1 + 352), v11, __p);
        unint64_t v20 = v68;
        if ((v68 & 0x80u) != 0) {
          unint64_t v20 = (unint64_t)__p[1];
        }
        if (v20) {
          sub_26A18((uint64_t)v64, (const char *)__p);
        }
        else {
          sub_26908((uint64_t)v64);
        }
        int v21 = 103 * (char)(v19 + v18 % 10);
        int v22 = v18 / 10 + v17 + ((v21 >> 15) & 1) + (v21 >> 10);
        if ((char)v68 < 0) {
          operator delete(__p[0]);
        }
        sub_480C((uint64_t)&v65, v22);
      }
    }
    if (v15 != *(unsigned __int16 *)(a1 + 416))
    {
      sub_EF4E90(*(void *)(a1 + 352), v11, (uint64_t)&v65);
      sub_48B4((uint64_t)v16, (CFTimeZoneRef *)&v65);
      sub_26C4C((const void **)&v65);
      *(_WORD *)(a1 + 416) = v15;
    }
    int v23 = sub_4F44(a3);
    int v24 = sub_4F44(v16);
    if (*(unsigned char *)(a1 + 4))
    {
      int v25 = v24;
      uint64_t v26 = *(void *)(a1 + 328);
      if (*(unsigned char *)(a1 + 17)) {
        double v27 = (void **)&v65;
      }
      else {
        double v27 = __p;
      }
      *double v27 = 0;
      v27[1] = 0;
      double v28 = sub_299F0C(v26, a2, (uint64_t)v27, 0);
      double v29 = v28;
      BOOL v32 = *(uint64_t *)&v28 > -1 && ((*(void *)&v28 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF
         || (unint64_t)(*(void *)&v28 - 1) < 0xFFFFFFFFFFFFFLL
         || (*(void *)&v28 & 0x7FFFFFFFFFFFFFFFLL) == 0;
      if ((!v32 || v28 <= 0.0) && *(unsigned char *)(a1 + 5)) {
        double v29 = sub_EF35D0(a1, a2);
      }
      if (*(unsigned char *)(a1 + 4))
      {
        double v33 = *a5;
        uint64_t v34 = a5[1];
        if (*a5 != v34)
        {
          unint64_t v35 = v34 - v33;
          if (*(void *)(a1 + 32) < v35) {
            unint64_t v35 = *(void *)(a1 + 32);
          }
          uint64_t v34 = &v33[v35];
        }
        uint64_t v36 = *(void *)(a1 + 328);
        if (*(unsigned char *)(a1 + 17))
        {
          uint64_t v65 = *a5;
          int v66 = v34;
        }
        else
        {
          uint64_t v65 = 0;
          int v66 = 0;
        }
        double v37 = sub_299F0C(v36, a2, (uint64_t)&v65, 0);
        BOOL v40 = *(uint64_t *)&v37 > -1 && ((*(void *)&v37 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF
           || (unint64_t)(*(void *)&v37 - 1) < 0xFFFFFFFFFFFFFLL
           || (*(void *)&v37 & 0x7FFFFFFFFFFFFFFFLL) == 0;
        if ((!v40 || v37 <= 0.0) && *(unsigned char *)(a1 + 5)) {
          double v37 = sub_EF35D0(a1, a2);
        }
      }
      else
      {
        double v37 = -1.0;
      }
      BOOL v43 = *(uint64_t *)&v29 > -1 && ((*(void *)&v29 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF
         || (unint64_t)(*(void *)&v29 - 1) < 0xFFFFFFFFFFFFFLL
         || (*(void *)&v29 & 0x7FFFFFFFFFFFFFFFLL) == 0;
      if (v43 && v29 > 0.0)
      {
        BOOL v44 = *(uint64_t *)&v37 <= -1 || ((*(void *)&v37 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF;
        BOOL v45 = v44 && (unint64_t)(*(void *)&v37 - 1) >= 0xFFFFFFFFFFFFFLL;
        BOOL v46 = !v45 || (*(void *)&v37 & 0x7FFFFFFFFFFFFFFFLL) == 0;
        BOOL v47 = !v46 || v37 <= 0.0;
        double v48 = v47 ? v29 : v37;
        double v49 = sub_EF4F2C(a1, a2, a3, v48, v10);
        BOOL v50 = *(uint64_t *)&v49 <= -1 || ((*(void *)&v49 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF;
        BOOL v51 = v50 && (unint64_t)(*(void *)&v49 - 1) >= 0xFFFFFFFFFFFFFLL;
        if (v51 && (*(void *)&v49 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        {
          int64_t v53 = sub_EF3C74(a1, a2);
          int v54 = sub_299C38(*(void *)(a1 + 328));
          int v55 = *(_DWORD *)(a1 + 8);
          int v56 = v55 / -10;
          int v57 = v55 % 10;
          char v58 = v55 < 0 ? -5 : 5;
          if ((int)sub_4F44(a3) >= (int)(v56
                                        + v54
                                        + (((-103 * (char)(v58 + v57)) >> 15) & 1)
                                        + ((-103 * (char)(v58 + v57)) >> 10)))
          {
            int v59 = v23 - v25;
            int v60 = 10 * (v23 - v25);
            if (v60 < SHIDWORD(v53))
            {
              uint64_t v65 = 0;
              int v66 = 0;
              sub_EF4078(a1, a2, v16, &v65);
              sub_EF4078(a1, a2, v16, a4);
              if (v60 > (int)v53)
              {
                if ((int)v53 < 0) {
                  char v61 = -5;
                }
                else {
                  char v61 = 5;
                }
                if (v53 < 0) {
                  char v63 = -5;
                }
                else {
                  char v63 = 5;
                }
                double v62 = (double)(int)((int)v53 / 10
                                  + (((103 * (char)(v61 + (int)v53 % 10)) >> 15) & 1)
                                  + ((103 * (char)(v61 + (int)v53 % 10)) >> 10));
                pow(1.0- ((double)v59 - v62)/ ((double)(int)(SHIDWORD(v53) / 10+ (((103 * (char)(SHIDWORD(v53) % 10 + v63)) >> 15) & 1)+ ((103 * (char)(SHIDWORD(v53) % 10 + v63)) >> 10))- v62), *(long double *)(a1 + 72));
              }
            }
          }
        }
      }
    }
  }
}

void sub_EF4E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_26C4C((const void **)va);
  _Unwind_Resume(a1);
}

void sub_EF4E44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  unint64_t v3 = va_arg(va1, const void *);
  uint64_t v5 = va_arg(va1, void);
  sub_4814((uint64_t)va1);
  sub_26C4C((const void **)va);
  _Unwind_Resume(a1);
}

void sub_EF4E60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_26C4C((const void **)va);
  _Unwind_Resume(a1);
}

void sub_EF4E74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_EF4E90(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_3BDCD8(a1, a2, __p);
  unint64_t v4 = v6;
  if ((v6 & 0x80u) != 0) {
    unint64_t v4 = (unint64_t)__p[1];
  }
  if (v4) {
    sub_26A18(a3, (const char *)__p);
  }
  else {
    sub_26908(a3);
  }
  if ((char)v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_EF4F10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

long double sub_EF4F2C(uint64_t a1, unint64_t a2, unsigned int *a3, double a4, double a5)
{
  if (!*(unsigned char *)(a1 + 128)) {
    return -1.0;
  }
  unint64_t v10 = HIDWORD(a2);
  double v11 = -1.0;
  double v12 = -1.0;
  if ((a2 & 0x8000000000000000) == 0)
  {
    uint64_t v13 = sub_2E5F98(*(void *)(a1 + 344), a2, 1);
    if (v13)
    {
      uint64_t v14 = &v13[-*(int *)v13];
      unsigned int v15 = *(unsigned __int16 *)v14;
      if ((v10 & 0x40000000) != 0)
      {
        if (v15 < 5) {
          goto LABEL_16;
        }
        int v16 = *((unsigned __int16 *)v14 + 2);
        if (!v16) {
          goto LABEL_16;
        }
      }
      else
      {
        if (v15 < 7) {
          goto LABEL_16;
        }
        int v16 = *((unsigned __int16 *)v14 + 3);
        if (!v16) {
          goto LABEL_16;
        }
      }
      int v17 = (unsigned int *)&v13[v16 + *(unsigned int *)&v13[v16]];
      if (*v17 > (v10 & 0x3FFFFFFF))
      {
        int v18 = (int *)((char *)v17
                    + (4 * v10)
                    + *(unsigned int *)((char *)v17 + (4 * v10) + 4)
                    + 4);
        char v19 = (unsigned __int16 *)((char *)v18 - *v18);
        if (*v19 >= 0x15u)
        {
          uint64_t v20 = v19[10];
          if (v20)
          {
            unsigned int v21 = *(unsigned __int16 *)((char *)v18 + v20);
            if ((unsigned __int16)(v21 - 1) <= 0xFFFDu) {
              double v12 = (double)v21 / 100.0;
            }
          }
        }
      }
    }
  }
LABEL_16:
  if (v12 < 0.0 && ((*(void *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF
    || *(void *)&v12 == 0x7FF0000000000000
    || a4 < v12)
  {
    return v11;
  }
  double v25 = sub_29A02C(*(void *)(a1 + 328), a2);
  if (v25 == -9.22337204e18) {
    return v11;
  }
  double v26 = *(double *)(a1 + 144);
  if (v25 >= v26)
  {
    if (v25 <= *(double *)(a1 + 192)) {
      return v11;
    }
    uint64_t v27 = a1 + 184;
    double v28 = sub_327854(*(void *)(a1 + 344), a2);
    goto LABEL_43;
  }
  uint64_t v27 = a1 + 136;
  double v28 = -1.0;
  if ((a2 & 0x8000000000000000) == 0)
  {
    double v29 = sub_2E5F98(*(void *)(a1 + 344), a2, 1);
    if (v29)
    {
      uint64_t v30 = &v29[-*(int *)v29];
      unsigned int v31 = *(unsigned __int16 *)v30;
      if ((v10 & 0x40000000) == 0)
      {
        if (v31 < 7) {
          goto LABEL_43;
        }
        int v32 = *((unsigned __int16 *)v30 + 3);
        if (!v32) {
          goto LABEL_43;
        }
LABEL_38:
        double v33 = (unsigned int *)&v29[v32 + *(unsigned int *)&v29[v32]];
        if (*v33 > (v10 & 0x3FFFFFFF))
        {
          uint64_t v34 = (int *)((char *)v33
                      + (4 * v10)
                      + *(unsigned int *)((char *)v33 + (4 * v10) + 4)
                      + 4);
          unint64_t v35 = (unsigned __int16 *)((char *)v34 - *v34);
          if (*v35 >= 0x13u)
          {
            uint64_t v36 = v35[9];
            if (v36)
            {
              unsigned int v37 = *(unsigned __int16 *)((char *)v34 + v36);
              if ((unsigned __int16)(v37 - 1) <= 0xFFFDu) {
                double v28 = (double)v37 / 100.0;
              }
            }
          }
        }
        goto LABEL_43;
      }
      if (v31 >= 5)
      {
        int v32 = *((unsigned __int16 *)v30 + 2);
        if (v32) {
          goto LABEL_38;
        }
      }
    }
  }
LABEL_43:
  if (a4 <= v28 * (*(double *)v27 + 1.0))
  {
    int v38 = (int)(sub_4F4C(a1 + 368) - *(_DWORD *)(v27 + 16)) % 6048000;
    int v39 = v38 + (v38 < 0 ? 0x5C4900 : 0);
    uint64_t v40 = *(void *)(a1 + 360);
    unsigned __int8 v67 = v39 / 864000;
    uint64_t v65 = 0;
    uint64_t v66 = 0;
    double v41 = sub_EF43A8(v40, a2, &v67, v39 % 864000 / 600, 0, &v65);
    int v42 = (int)(*(_DWORD *)(v27 + 16) + sub_4F4C(a1 + 368)) % 6048000;
    int v43 = v42 + (v42 < 0 ? 0x5C4900 : 0);
    uint64_t v44 = *(void *)(a1 + 360);
    unsigned __int8 v67 = v43 / 864000;
    uint64_t v65 = 0;
    uint64_t v66 = 0;
    double v45 = sub_EF43A8(v44, a2, &v67, v43 % 864000 / 600, 0, &v65);
    BOOL v46 = v45 < v41;
    if (v25 >= v26) {
      BOOL v46 = v45 > v41;
    }
    if (v46)
    {
      double v47 = v45;
      if (v41 >= v45) {
        double v48 = v41;
      }
      else {
        double v48 = v45;
      }
      if (v45 >= v41) {
        double v47 = v41;
      }
      if (v48 - v47 / v48 >= *(double *)(v27 + 24) && v48 - v47 >= *(double *)(v27 + 32))
      {
        int v49 = sub_4F44(a3);
        int v50 = *(_DWORD *)(a1 + 12) + 10 * (v49 - sub_4F44((unsigned int *)(a1 + 368)));
        double v11 = a5;
        if (v50 <= *(_DWORD *)(v27 + 44))
        {
          uint64_t v51 = *(void *)(a1 + 344);
          double v52 = v25 < v26 ? sub_EF54FC(v51, a2) : sub_EF55F8(v51, a2);
          double v11 = -1.0;
          if (v52 != -9.22337204e18)
          {
            double v53 = fmax(a4 + (double)v50 / 36000.0 * v52, 0.0);
            double v54 = sub_327854(*(void *)(a1 + 344), a2);
            if (v54 >= v53) {
              double v54 = v53;
            }
            if (v53 >= v12) {
              double v11 = v54;
            }
            else {
              double v11 = v12;
            }
            int v55 = *(_DWORD *)(v27 + 40);
            if (v50 > v55)
            {
              if (v55 < 0) {
                char v56 = -5;
              }
              else {
                char v56 = 5;
              }
              double v57 = (double)(int)(v55 / 10
                                + (((103 * (char)(v56 + v55 % 10)) >> 15) & 1)
                                + ((103 * (char)(v56 + v55 % 10)) >> 10));
              int v58 = *(_DWORD *)(v27 + 44);
              int v59 = v58 / 10;
              int v60 = v58 % 10;
              if (v58 < 0) {
                char v61 = -5;
              }
              else {
                char v61 = 5;
              }
              if (v50 < 0) {
                char v62 = -5;
              }
              else {
                char v62 = 5;
              }
              long double v63 = pow(1.0- ((double)(int)(v50 / 10+ (((103 * (char)(v62 + v50 % 10)) >> 15) & 1)+ ((103 * (char)(v62 + v50 % 10)) >> 10))- v57)/ ((double)(int)(v59+ (((103 * (char)(v61 + v60)) >> 15) & 1)+ ((103 * (char)(v61 + v60)) >> 10))- v57), *(long double *)(a1 + 72));
              return v11 * v63 + a5 * (1.0 - v63);
            }
          }
        }
      }
    }
  }
  return v11;
}

double sub_EF54FC(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    return -9.22337204e18;
  }
  int v2 = HIDWORD(a2);
  unint64_t v3 = sub_2E5F98(a1, a2, 1);
  if (!v3) {
    return -9.22337204e18;
  }
  unint64_t v4 = &v3[-*(int *)v3];
  unsigned int v5 = *(unsigned __int16 *)v4;
  if ((v2 & 0x40000000) != 0)
  {
    if (v5 < 5) {
      return -9.22337204e18;
    }
    int v6 = *((unsigned __int16 *)v4 + 2);
    if (!v6) {
      return -9.22337204e18;
    }
  }
  else
  {
    if (v5 < 7) {
      return -9.22337204e18;
    }
    int v6 = *((unsigned __int16 *)v4 + 3);
    if (!v6) {
      return -9.22337204e18;
    }
  }
  uint64_t v8 = (unsigned int *)&v3[v6 + *(unsigned int *)&v3[v6]];
  if (*v8 <= (v2 & 0x3FFFFFFFu)) {
    return -9.22337204e18;
  }
  uint64_t v9 = (int *)((char *)v8 + 4 * v2 + *(unsigned int *)((char *)v8 + (4 * v2) + 4) + 4);
  unint64_t v10 = (unsigned __int16 *)((char *)v9 - *v9);
  if (*v10 < 0x17u) {
    return -9.22337204e18;
  }
  uint64_t v11 = v10[11];
  if (!v11) {
    return -9.22337204e18;
  }
  int v12 = *(unsigned __int16 *)((char *)v9 + v11);
  if (v12 == 0x7FFF) {
    return -9.22337204e18;
  }
  return (double)(__int16)v12 / 5.0;
}

double sub_EF55F8(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    return -9.22337204e18;
  }
  int v2 = HIDWORD(a2);
  unint64_t v3 = sub_2E5F98(a1, a2, 1);
  if (!v3) {
    return -9.22337204e18;
  }
  unint64_t v4 = &v3[-*(int *)v3];
  unsigned int v5 = *(unsigned __int16 *)v4;
  if ((v2 & 0x40000000) != 0)
  {
    if (v5 < 5) {
      return -9.22337204e18;
    }
    int v6 = *((unsigned __int16 *)v4 + 2);
    if (!v6) {
      return -9.22337204e18;
    }
  }
  else
  {
    if (v5 < 7) {
      return -9.22337204e18;
    }
    int v6 = *((unsigned __int16 *)v4 + 3);
    if (!v6) {
      return -9.22337204e18;
    }
  }
  uint64_t v8 = (unsigned int *)&v3[v6 + *(unsigned int *)&v3[v6]];
  if (*v8 <= (v2 & 0x3FFFFFFFu)) {
    return -9.22337204e18;
  }
  uint64_t v9 = (int *)((char *)v8 + 4 * v2 + *(unsigned int *)((char *)v8 + (4 * v2) + 4) + 4);
  unint64_t v10 = (unsigned __int16 *)((char *)v9 - *v9);
  if (*v10 < 0x19u) {
    return -9.22337204e18;
  }
  uint64_t v11 = v10[12];
  if (!v11) {
    return -9.22337204e18;
  }
  int v12 = *(unsigned __int16 *)((char *)v9 + v11);
  if (v12 == 0x7FFF) {
    return -9.22337204e18;
  }
  return (double)(__int16)v12 / 5.0;
}

void sub_EF56F4(uint64_t a1, void *a2)
{
  uint64_t v3 = a1;
  HIBYTE(__p[2]) = 10;
  strcpy((char *)__p, "use_sunday");
  *(unsigned char *)(a1 + 24) = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9280;
  strcpy((char *)__p[0], "use_live_traffic_hsp_day_overrides");
  *(unsigned char *)(v3 + 25) = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    unint64_t v4 = *(long long **)(v3 + 32);
    long long v98 = (void **)(v3 + 32);
    unsigned int v5 = *(long long **)(v3 + 40);
    if (v5 == v4) {
      goto LABEL_7;
    }
    do
    {
LABEL_11:
      int v7 = (void *)*((void *)v5 - 3);
      if (v7)
      {
        *((void *)v5 - 2) = v7;
        operator delete(v7);
      }
      if (*((char *)v5 - 25) < 0) {
        operator delete(*((void **)v5 - 6));
      }
      v5 -= 3;
    }
    while (v5 != v4);
    unsigned int v5 = (long long *)*v98;
    *(void *)(v3 + 40) = v4;
    memset(__p, 0, 24);
    if ((unint64_t)v4 < *(void *)(v3 + 48)) {
      goto LABEL_8;
    }
    goto LABEL_16;
  }
  unint64_t v4 = *(long long **)(v3 + 32);
  long long v98 = (void **)(v3 + 32);
  unsigned int v5 = *(long long **)(v3 + 40);
  if (v5 != v4) {
    goto LABEL_11;
  }
LABEL_7:
  *(void *)(v3 + 40) = v4;
  memset(__p, 0, 24);
  if ((unint64_t)v4 < *(void *)(v3 + 48))
  {
LABEL_8:
    if (byte_25FCA6F < 0)
    {
      sub_4200(v4, (void *)xmmword_25FCA58, *((unint64_t *)&xmmword_25FCA58 + 1));
    }
    else
    {
      long long v6 = xmmword_25FCA58;
      *((void *)v4 + 2) = unk_25FCA68;
      *unint64_t v4 = v6;
    }
    *(long long *)((char *)v4 + 24) = *(_OWORD *)__p;
    *((void **)v4 + 5) = __p[2];
    *(void *)(v3 + 40) = v4 + 3;
    goto LABEL_20;
  }
LABEL_16:
  uint64_t v8 = sub_EF6224(v98, (uint64_t)&xmmword_25FCA58, (uint64_t)__p);
  uint64_t v9 = __p[0];
  *(void *)(v3 + 40) = v8;
  if (v9)
  {
    __p[1] = v9;
    operator delete(v9);
  }
LABEL_20:
  memset(__p, 0, sizeof(__p));
  int v107 = 1065353216;
  BYTE7(v108[1]) = 17;
  strcpy((char *)v108, "country_overrides");
  unint64_t v10 = sub_58070(a2, (uint64_t)v108);
  uint64_t v11 = (char *)v4 - (char *)v5;
  if (v10 && *((_DWORD *)v10 + 12) == 2)
  {
    unint64_t v96 = (void **)v10[5];
    uint64_t v12 = v11 >> 4;
    if (SBYTE7(v108[1]) < 0) {
      goto LABEL_23;
    }
  }
  else
  {
    unint64_t v96 = __p;
    uint64_t v12 = v11 >> 4;
    if (SBYTE7(v108[1]) < 0)
    {
LABEL_23:
      operator delete(*(void **)&v108[0]);
      unint64_t v97 = 0xAAAAAAAAAAAAAAABLL * v12;
      uint64_t v13 = v96[2];
      if (!v13) {
        goto LABEL_113;
      }
      goto LABEL_27;
    }
  }
  unint64_t v97 = 0xAAAAAAAAAAAAAAABLL * v12;
  uint64_t v13 = v96[2];
  if (v13)
  {
LABEL_27:
    uint64_t v95 = v3;
    while (1)
    {
      uint64_t v99 = v13;
      int v16 = (char *)v13[2];
      uint64_t v15 = (uint64_t)(v13 + 2);
      uint64_t v14 = v16;
      int v17 = *(char *)(v15 + 23);
      if (v17 >= 0) {
        int v18 = (char *)v15;
      }
      else {
        int v18 = v14;
      }
      if (v17 >= 0) {
        size_t v19 = *(unsigned __int8 *)(v15 + 23);
      }
      else {
        size_t v19 = *(void *)(v15 + 8);
      }
      if (v19 >= 0x7FFFFFFFFFFFFFF8) {
        sub_188D690();
      }
      if (v19 < 0x17) {
        break;
      }
      uint64_t v21 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v19 | 7) != 0x17) {
        uint64_t v21 = v19 | 7;
      }
      uint64_t v22 = v21 + 1;
      uint64_t v20 = (char *)operator new(v21 + 1);
      __n[1] = v19;
      int64_t v105 = v22 | 0x8000000000000000;
      __n[0] = (size_t)v20;
      if (v19 < 0x20 || (unint64_t)(v20 - v18) < 0x20) {
        goto LABEL_47;
      }
      int v23 = &v18[v19 & 0xFFFFFFFFFFFFFFE0];
      int v24 = &v20[v19 & 0xFFFFFFFFFFFFFFE0];
      double v25 = v20 + 16;
      double v26 = (long long *)(v18 + 16);
      unint64_t v27 = v19 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v28 = *v26;
        *(v25 - 1) = *(v26 - 1);
        *double v25 = v28;
        v25 += 2;
        v26 += 2;
        v27 -= 32;
      }
      while (v27);
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFE0)) {
        goto LABEL_48;
      }
LABEL_49:
      *int v24 = 0;
      if (v105 >= 0) {
        uint64_t v30 = __n;
      }
      else {
        uint64_t v30 = (size_t *)__n[0];
      }
      do
      {
        *(unsigned char *)uint64_t v30 = __tolower(*v18);
        uint64_t v30 = (size_t *)((char *)v30 + 1);
        ++v18;
        --v19;
      }
      while (v19);
LABEL_55:
      unsigned int v31 = (uint64_t *)sub_5C4AC(v96, v15);
      v102[0] = 0;
      v102[1] = 0;
      uint64_t v103 = 0;
      uint64_t v32 = *v31;
      uint64_t v33 = v31[1];
      if (*v31 != v33)
      {
        while (1)
        {
          if (*(_DWORD *)(v32 + 8) != 2)
          {
            exception = __cxa_allocate_exception(8uLL);
            void *exception = &off_23FDF58;
          }
          unint64_t v35 = *(void **)v32;
          char v101 = 4;
          strcpy((char *)v100, "date");
          uint64_t v36 = sub_58070(v35, (uint64_t)v100);
          if (!v36 || *((_DWORD *)v36 + 12) != 1)
          {
            unint64_t v92 = __cxa_allocate_exception(0x40uLL);
            std::operator+<char>();
            uint64_t v93 = (void *)sub_2F404((uint64_t)v92, v108);
          }
          double v37 = *((double *)v36 + 5);
          if (v101 < 0) {
            operator delete(v100[0]);
          }
          char v101 = 7;
          strcpy((char *)v100, "weekday");
          int v38 = sub_58070(v35, (uint64_t)v100);
          if (!v38 || *((_DWORD *)v38 + 12) != 1)
          {
            long long v90 = __cxa_allocate_exception(0x40uLL);
            std::operator+<char>();
            BOOL v91 = (void *)sub_2F404((uint64_t)v90, v108);
          }
          double v39 = *((double *)v38 + 5);
          if (v101 < 0)
          {
            operator delete(v100[0]);
            unsigned int v40 = v37;
            unsigned int v41 = v39;
            int v43 = (char *)v102[1];
            int v42 = v103;
            if (v102[1] < v103) {
              goto LABEL_57;
            }
LABEL_69:
            uint64_t v44 = (char *)v102[0];
            uint64_t v45 = (v43 - (char *)v102[0]) >> 3;
            unint64_t v46 = v45 + 1;
            if ((unint64_t)(v45 + 1) >> 61) {
              sub_2E00();
            }
            uint64_t v47 = v42 - (char *)v102[0];
            if (v47 >> 2 > v46) {
              unint64_t v46 = v47 >> 2;
            }
            if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v48 = v46;
            }
            if (v48 >> 61) {
              sub_188D718();
            }
            int v49 = (char *)operator new(8 * v48);
            int v50 = &v49[8 * v45];
            *(_DWORD *)int v50 = v40;
            v50[4] = v41;
            for (unint64_t i = v50; v43 != v44; i[4] = v53)
            {
              int v52 = *((_DWORD *)v43 - 2);
              v43 -= 8;
              char v53 = v43[4];
              *((_DWORD *)i - 2) = v52;
              i -= 8;
            }
            uint64_t v34 = v50 + 8;
            v102[0] = i;
            v102[1] = v50 + 8;
            uint64_t v103 = &v49[8 * v48];
            if (v44) {
              operator delete(v44);
            }
            v102[1] = v34;
            v32 += 16;
            if (v32 == v33) {
              goto LABEL_81;
            }
          }
          else
          {
            unsigned int v40 = v37;
            unsigned int v41 = v39;
            int v43 = (char *)v102[1];
            int v42 = v103;
            if (v102[1] >= v103) {
              goto LABEL_69;
            }
LABEL_57:
            *(_DWORD *)int v43 = v40;
            v43[4] = v41;
            uint64_t v34 = v43 + 8;
            v102[1] = v34;
            v32 += 16;
            if (v32 == v33) {
              goto LABEL_81;
            }
          }
        }
      }
      uint64_t v34 = 0;
LABEL_81:
      unint64_t v54 = __n[1];
      if (v105 >= 0) {
        size_t v55 = HIBYTE(v105);
      }
      else {
        size_t v55 = __n[1];
      }
      uint64_t v56 = byte_25FCA6F;
      if (byte_25FCA6F < 0) {
        uint64_t v56 = *((void *)&xmmword_25FCA58 + 1);
      }
      if (v55 == v56)
      {
        if (byte_25FCA6F >= 0) {
          double v57 = &xmmword_25FCA58;
        }
        else {
          double v57 = (long long *)xmmword_25FCA58;
        }
        if (v105 < 0)
        {
          char v62 = (void *)__n[0];
          if (memcmp((const void *)__n[0], v57, __n[1]))
          {
            uint64_t v3 = v95;
            unint64_t v60 = *(void *)(v95 + 40);
            if (v60 < *(void *)(v95 + 48)) {
              goto LABEL_110;
            }
            goto LABEL_101;
          }
        }
        else if (HIBYTE(v105))
        {
          int v58 = __n;
          uint64_t v59 = HIBYTE(v105);
          while (*(unsigned __int8 *)v58 == *(unsigned __int8 *)v57)
          {
            int v58 = (size_t *)((char *)v58 + 1);
            double v57 = (long long *)((char *)v57 + 1);
            if (!--v59) {
              goto LABEL_104;
            }
          }
          goto LABEL_96;
        }
LABEL_104:
        uint64_t v65 = (uint64_t)*v98 + 48 * v97;
        unsigned __int8 v68 = *(void **)(v65 + 24);
        unsigned __int8 v67 = (void *)(v65 + 24);
        uint64_t v66 = v68;
        if (v68)
        {
          v67[1] = v66;
          operator delete(v66);
          *unsigned __int8 v67 = 0;
          v67[1] = 0;
          v67[2] = 0;
          uint64_t v34 = v102[1];
        }
        *unsigned __int8 v67 = v102[0];
        v67[1] = v34;
        v67[2] = v103;
        uint64_t v3 = v95;
        goto LABEL_107;
      }
LABEL_96:
      uint64_t v3 = v95;
      unint64_t v60 = *(void *)(v95 + 40);
      if (v60 >= *(void *)(v95 + 48))
      {
LABEL_101:
        long double v63 = sub_EF6224(v98, (uint64_t)__n, (uint64_t)v102);
        uint64_t v64 = v102[0];
        *(void *)(v3 + 40) = v63;
        if (v64)
        {
          v102[1] = v64;
          operator delete(v64);
          if (SHIBYTE(v105) < 0) {
            goto LABEL_112;
          }
          goto LABEL_28;
        }
LABEL_107:
        if (SHIBYTE(v105) < 0) {
          goto LABEL_112;
        }
        goto LABEL_28;
      }
      if ((v105 & 0x8000000000000000) == 0)
      {
        long long v61 = *(_OWORD *)__n;
        *(void *)(v60 + 16) = v105;
        *(_OWORD *)unint64_t v60 = v61;
        goto LABEL_111;
      }
      char v62 = (void *)__n[0];
LABEL_110:
      sub_4200((unsigned char *)v60, v62, v54);
LABEL_111:
      *(_OWORD *)(v60 + 24) = *(_OWORD *)v102;
      *(void *)(v60 + 40) = v103;
      *(void *)(v3 + 40) = v60 + 48;
      if (SHIBYTE(v105) < 0) {
LABEL_112:
      }
        operator delete((void *)__n[0]);
LABEL_28:
      uint64_t v13 = (void *)*v99;
      if (!*v99) {
        goto LABEL_113;
      }
    }
    HIBYTE(v105) = v19;
    if (!v19)
    {
      LOBYTE(__n[0]) = 0;
      goto LABEL_55;
    }
    uint64_t v20 = (char *)__n;
LABEL_47:
    int v23 = v18;
    int v24 = v20;
    do
    {
LABEL_48:
      char v29 = *v23++;
      *v24++ = v29;
    }
    while (v23 != &v18[v19]);
    goto LABEL_49;
  }
LABEL_113:
  uint64_t v69 = *(void *)(v3 + 32);
  uint64_t v70 = *(void *)(v3 + 40);
  if (v69 != v70)
  {
    uint64_t v71 = v69 + 24;
    do
    {
      sub_913EAC(v71, *(void *)(v71 + 8), *((char **)*v98 + 6 * v97 + 3), *((char **)*v98 + 6 * v97 + 4), (uint64_t)(*((void *)*v98 + 6 * v97 + 4) - *((void *)*v98 + 6 * v97 + 3)) >> 3);
      uint64_t v72 = v71 + 24;
      v71 += 48;
    }
    while (v72 != v70);
    uint64_t v73 = *(void *)(v3 + 32);
    for (uint64_t j = *(void *)(v3 + 40); v73 != j; v73 += 48)
    {
      unint64_t v75 = *(void *)(v73 + 24);
      uint64_t v76 = *(uint64_t **)(v73 + 32);
      unint64_t v77 = 126 - 2 * __clz((uint64_t)((uint64_t)v76 - v75) >> 3);
      if (v76 == (uint64_t *)v75) {
        uint64_t v78 = 0;
      }
      else {
        uint64_t v78 = v77;
      }
      sub_EF6444(v75, v76, (uint64_t)v108, v78, 1);
      int v80 = *(int **)(v73 + 24);
      int v79 = *(int **)(v73 + 32);
      if (v80 != v79)
      {
        unsigned __int32 v81 = v80 + 2;
        do
        {
          if (v81 == v79) {
            goto LABEL_118;
          }
          int v82 = *(v81 - 2);
          int v83 = *v81;
          v81 += 2;
        }
        while (v82 != v83);
        int v84 = v81 - 4;
        if (v81 == v79)
        {
          unsigned int v85 = v81 - 2;
          if (v81 - 2 == v79) {
            continue;
          }
LABEL_133:
          *(void *)(v73 + 32) = v85;
          continue;
        }
        do
        {
          if (*v84 != *v81)
          {
            char v86 = *((unsigned char *)v81 + 4);
            v84[2] = *v81;
            v84 += 2;
            *((unsigned char *)v84 + 4) = v86;
          }
          v81 += 2;
        }
        while (v81 != v79);
        unsigned int v85 = v84 + 2;
        if (v84 + 2 != *(int **)(v73 + 32)) {
          goto LABEL_133;
        }
      }
LABEL_118:
      ;
    }
  }
  uint64_t v87 = (char *)__p[2];
  if (__p[2])
  {
    do
    {
      uint64_t v89 = *(char **)v87;
      sub_57AC8((uint64_t *)v87 + 5);
      if (v87[39] < 0) {
        operator delete(*((void **)v87 + 2));
      }
      operator delete(v87);
      uint64_t v87 = v89;
    }
    while (v89);
  }
  unsigned int v88 = __p[0];
  __p[0] = 0;
  if (v88) {
    operator delete(v88);
  }
}

void sub_EF60C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  *(void *)(v35 + 40) = v34;
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *sub_EF6224(void **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v5) {
    unint64_t v5 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v8 = 0x555555555555555;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v9 = (char *)operator new(48 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  unint64_t v10 = &v9[48 * v4];
  size_t v19 = &v9[48 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_4200(v10, *(void **)a2, *(void *)(a2 + 8));
    unint64_t v10 = &v9[48 * v4];
  }
  else
  {
    *(_OWORD *)unint64_t v10 = *(_OWORD *)a2;
    *((void *)v10 + 2) = *(void *)(a2 + 16);
  }
  uint64_t v11 = &v9[48 * v4];
  *(_OWORD *)(v11 + 24) = *(_OWORD *)a3;
  *((void *)v11 + 5) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v12 = v11 + 48;
  uint64_t v13 = (char *)*a1;
  uint64_t v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = v10;
    a1[1] = v12;
    a1[2] = v19;
  }
  else
  {
    do
    {
      long long v15 = *((_OWORD *)v14 - 3);
      *((void *)v10 - 4) = *((void *)v14 - 4);
      *((_OWORD *)v10 - 3) = v15;
      *((void *)v14 - 5) = 0;
      *((void *)v14 - 4) = 0;
      *((void *)v14 - 6) = 0;
      *((void *)v10 - 3) = 0;
      *((void *)v10 - 2) = 0;
      *((void *)v10 - 1) = 0;
      *(_OWORD *)(v10 - 24) = *(_OWORD *)(v14 - 24);
      *((void *)v10 - 1) = *((void *)v14 - 1);
      v10 -= 48;
      *((void *)v14 - 3) = 0;
      *((void *)v14 - 2) = 0;
      *((void *)v14 - 1) = 0;
      v14 -= 48;
    }
    while (v14 != v13);
    int v16 = (char *)*a1;
    uint64_t v14 = (char *)a1[1];
    uint64_t v12 = v11 + 48;
    *a1 = v10;
    a1[1] = v11 + 48;
    a1[2] = v19;
    if (v14 != v16)
    {
      do
      {
        int v17 = (void *)*((void *)v14 - 3);
        if (v17)
        {
          *((void *)v14 - 2) = v17;
          operator delete(v17);
        }
        if (*(v14 - 25) < 0) {
          operator delete(*((void **)v14 - 6));
        }
        v14 -= 48;
      }
      while (v14 != v16);
      uint64_t v14 = v16;
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v12;
}

void sub_EF6430(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_987260((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_EF6444(unint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v10 = result;
  while (2)
  {
    uint64_t v11 = a2 - 1;
    uint64_t v12 = a2 - 2;
    uint64_t v13 = a2 - 3;
    unint64_t v14 = v10;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v10 = v14;
          uint64_t v15 = (uint64_t)a2 - v14;
          unint64_t v16 = (uint64_t)((uint64_t)a2 - v14) >> 3;
          if (v6 || !v5)
          {
            switch(v16)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                unsigned int v106 = *((_DWORD *)a2 - 2);
                int64_t v105 = a2 - 1;
                if (v106 < *(_DWORD *)v14)
                {
                  uint64_t v107 = *(void *)v14;
                  int v108 = *(_DWORD *)v105;
                  *(unsigned char *)(v14 + 4) = *((unsigned char *)v105 + 4);
                  *(_DWORD *)unint64_t v14 = v108;
                  *(_DWORD *)int64_t v105 = v107;
                  *((unsigned char *)v105 + 4) = BYTE4(v107);
                }
                return result;
              case 3uLL:
                unint64_t v109 = v14 + 8;
                unsigned int v110 = *(_DWORD *)(v14 + 8);
                unsigned int v113 = *((_DWORD *)a2 - 2);
                uint64_t v112 = a2 - 1;
                unsigned int v111 = v113;
                if (v110 >= *(_DWORD *)v14)
                {
                  if (v111 < v110)
                  {
                    uint64_t v132 = *(void *)(v14 + 8);
                    int v133 = *(_DWORD *)v112;
                    *(unsigned char *)(v14 + 12) = *((unsigned char *)v112 + 4);
                    *(_DWORD *)unint64_t v109 = v133;
                    *(_DWORD *)uint64_t v112 = v132;
                    *((unsigned char *)v112 + 4) = BYTE4(v132);
LABEL_146:
                    if (*(_DWORD *)(v14 + 8) < *(_DWORD *)v14)
                    {
                      uint64_t v147 = *(void *)v14;
                      *(_DWORD *)unint64_t v14 = *(_DWORD *)v109;
                      *(unsigned char *)(v14 + 4) = *(unsigned char *)(v109 + 4);
                      *(_DWORD *)(v14 + 8) = v147;
                      *(unsigned char *)(v14 + 12) = BYTE4(v147);
                    }
                  }
                }
                else
                {
                  uint64_t v114 = *(void *)v14;
                  if (v111 >= v110)
                  {
                    *(_DWORD *)unint64_t v14 = *(_DWORD *)v109;
                    *(unsigned char *)(v14 + 4) = *(unsigned char *)(v14 + 12);
                    *(_DWORD *)(v14 + 8) = v114;
                    *(unsigned char *)(v14 + 12) = BYTE4(v114);
                    if (*(_DWORD *)v112 < v114)
                    {
                      uint64_t v142 = *(void *)v109;
                      int v143 = *(_DWORD *)v112;
                      *(unsigned char *)(v14 + 12) = *((unsigned char *)v112 + 4);
                      *(_DWORD *)unint64_t v109 = v143;
                      *(_DWORD *)uint64_t v112 = v142;
                      *((unsigned char *)v112 + 4) = BYTE4(v142);
                    }
                  }
                  else
                  {
                    int v115 = *(_DWORD *)v112;
                    *(unsigned char *)(v14 + 4) = *((unsigned char *)v112 + 4);
                    *(_DWORD *)unint64_t v14 = v115;
                    *((unsigned char *)v112 + 4) = BYTE4(v114);
                    *(_DWORD *)uint64_t v112 = v114;
                  }
                }
                break;
              case 4uLL:
                unint64_t v109 = v14 + 8;
                unsigned int v116 = *(_DWORD *)(v14 + 8);
                int v117 = (unsigned int *)(v14 + 16);
                LODWORD(v118) = *(_DWORD *)(v14 + 16);
                unsigned int v119 = *(_DWORD *)v14;
                if (v116 >= *(_DWORD *)v14)
                {
                  if (v118 < v116)
                  {
                    uint64_t v118 = *(void *)v109;
                    unsigned int v134 = *v117;
                    *(_DWORD *)unint64_t v109 = *v117;
                    *(unsigned char *)(v14 + 12) = *(unsigned char *)(v14 + 20);
                    *int v117 = v118;
                    *(unsigned char *)(v14 + 20) = BYTE4(v118);
                    if (v134 < v119)
                    {
                      uint64_t v135 = *(void *)v14;
                      *(_DWORD *)unint64_t v14 = *(_DWORD *)v109;
                      *(unsigned char *)(v14 + 4) = *(unsigned char *)(v14 + 12);
                      *(_DWORD *)(v14 + 8) = v135;
                      *(unsigned char *)(v14 + 12) = BYTE4(v135);
                    }
                  }
                }
                else
                {
                  uint64_t v120 = *(void *)v14;
                  if (v118 >= v116)
                  {
                    *(_DWORD *)unint64_t v14 = *(_DWORD *)v109;
                    *(unsigned char *)(v14 + 4) = *(unsigned char *)(v14 + 12);
                    *(_DWORD *)(v14 + 8) = v120;
                    *(unsigned char *)(v14 + 12) = BYTE4(v120);
                    if (v118 < v120)
                    {
                      uint64_t v118 = *(void *)v109;
                      *(_DWORD *)unint64_t v109 = *v117;
                      *(unsigned char *)(v14 + 12) = *(unsigned char *)(v14 + 20);
                      *int v117 = v118;
                      *(unsigned char *)(v14 + 20) = BYTE4(v118);
                    }
                  }
                  else
                  {
                    *(_DWORD *)unint64_t v14 = *v117;
                    *(unsigned char *)(v14 + 4) = *(unsigned char *)(v14 + 20);
                    *(_DWORD *)(v14 + 16) = v120;
                    *(unsigned char *)(v14 + 20) = BYTE4(v120);
                    LODWORD(v118) = v120;
                  }
                }
                if (*(_DWORD *)v11 >= v118) {
                  return result;
                }
                uint64_t v144 = *(void *)v117;
                unsigned int v145 = *(_DWORD *)v11;
                *(unsigned char *)(v14 + 20) = *((unsigned char *)a2 - 4);
                *int v117 = v145;
                *(_DWORD *)uint64_t v11 = v144;
                *((unsigned char *)a2 - 4) = BYTE4(v144);
                if (*v117 >= *(_DWORD *)v109) {
                  return result;
                }
                uint64_t v146 = *(void *)(v14 + 8);
                *(unsigned char *)(v14 + 12) = *(unsigned char *)(v14 + 20);
                *(_DWORD *)unint64_t v109 = *v117;
                *(_DWORD *)(v14 + 16) = v146;
                *(unsigned char *)(v14 + 20) = BYTE4(v146);
                goto LABEL_146;
              case 5uLL:
                return (unint64_t)sub_EF74B8((uint64_t *)v14, (unsigned int *)(v14 + 8), (unsigned int *)(v14 + 16), (unsigned int *)(v14 + 24), (unsigned int *)a2 - 2);
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v15 <= 191)
          {
            uint64_t v121 = (uint64_t *)(v14 + 8);
            BOOL v123 = (uint64_t *)v14 == a2 || v121 == a2;
            if (a5)
            {
              if (!v123)
              {
                uint64_t v124 = 0;
                unint64_t v125 = (_DWORD *)v14;
                do
                {
                  unsigned int v127 = *v125;
                  unsigned int v128 = v125[2];
                  unint64_t v125 = v121;
                  if (v128 < v127)
                  {
                    uint64_t v129 = *v121;
                    uint64_t v130 = v124;
                    do
                    {
                      uint64_t v131 = v14 + v130;
                      *(_DWORD *)(v131 + 8) = *(_DWORD *)(v14 + v130);
                      *(unsigned char *)(v131 + 12) = *(unsigned char *)(v14 + v130 + 4);
                      if (!v130)
                      {
                        uint64_t v126 = v14;
                        goto LABEL_116;
                      }
                      v130 -= 8;
                    }
                    while (*(_DWORD *)(v131 - 8) > v129);
                    uint64_t v126 = v14 + v130 + 8;
LABEL_116:
                    *(_DWORD *)uint64_t v126 = v129;
                    *(unsigned char *)(v126 + 4) = BYTE4(v129);
                  }
                  uint64_t v121 = (uint64_t *)(v125 + 2);
                  v124 += 8;
                }
                while (v125 + 2 != (_DWORD *)a2);
              }
            }
            else if (!v123)
            {
              do
              {
                unsigned int v136 = *(_DWORD *)v10;
                unsigned int v137 = *(_DWORD *)(v10 + 8);
                unint64_t v10 = (unint64_t)v121;
                if (v137 < v136)
                {
                  uint64_t v138 = *v121;
                  int64x2_t v139 = v121;
                  do
                  {
                    uint64_t v140 = v139;
                    int v141 = *((_DWORD *)v139-- - 2);
                    *(_DWORD *)uint64_t v140 = v141;
                    *((unsigned char *)v140 + 4) = *((unsigned char *)v140 - 4);
                  }
                  while (*((_DWORD *)v140 - 4) > v138);
                  *(_DWORD *)int64x2_t v139 = v138;
                  *((unsigned char *)v139 + 4) = BYTE4(v138);
                }
                uint64_t v121 = (uint64_t *)(v10 + 8);
              }
              while ((uint64_t *)(v10 + 8) != a2);
            }
            return result;
          }
          if (!a4)
          {
            if ((uint64_t *)v14 != a2)
            {
              return (unint64_t)sub_EF76F8(v14, a2, a2);
            }
            return result;
          }
          unint64_t v17 = v16 >> 1;
          unint64_t v18 = v14 + 8 * (v16 >> 1);
          unsigned int v19 = *(_DWORD *)v11;
          if ((unint64_t)v15 >= 0x401) {
            break;
          }
          unsigned int v23 = *(_DWORD *)v14;
          if (*(_DWORD *)v14 >= *(_DWORD *)v18)
          {
            if (v19 >= v23) {
              goto LABEL_32;
            }
            uint64_t v30 = *(void *)v14;
            unsigned int v31 = *(_DWORD *)v11;
            *(unsigned char *)(v14 + 4) = *((unsigned char *)a2 - 4);
            *(_DWORD *)unint64_t v14 = v31;
            *(_DWORD *)uint64_t v11 = v30;
            *((unsigned char *)a2 - 4) = BYTE4(v30);
            if (*(_DWORD *)v14 >= *(_DWORD *)v18) {
              goto LABEL_32;
            }
            uint64_t v32 = *(void *)v18;
            int v33 = *(_DWORD *)v14;
            *(unsigned char *)(v18 + 4) = *(unsigned char *)(v14 + 4);
            *(_DWORD *)unint64_t v18 = v33;
            *(_DWORD *)unint64_t v14 = v32;
            *(unsigned char *)(v14 + 4) = BYTE4(v32);
            --a4;
            if (a5) {
              goto LABEL_55;
            }
          }
          else
          {
            uint64_t v24 = *(void *)v18;
            if (v19 >= v23)
            {
              int v49 = *(_DWORD *)v14;
              *(unsigned char *)(v18 + 4) = *(unsigned char *)(v14 + 4);
              *(_DWORD *)unint64_t v18 = v49;
              *(unsigned char *)(v14 + 4) = BYTE4(v24);
              *(_DWORD *)unint64_t v14 = v24;
              if (*(_DWORD *)v11 < v24)
              {
                uint64_t v50 = *(void *)v14;
                unsigned int v51 = *(_DWORD *)v11;
                *(unsigned char *)(v14 + 4) = *((unsigned char *)a2 - 4);
                *(_DWORD *)unint64_t v14 = v51;
                *(_DWORD *)uint64_t v11 = v50;
                *((unsigned char *)a2 - 4) = BYTE4(v50);
              }
LABEL_32:
              --a4;
              if (a5) {
                goto LABEL_55;
              }
              goto LABEL_54;
            }
            unsigned int v25 = *(_DWORD *)v11;
            *(unsigned char *)(v18 + 4) = *((unsigned char *)a2 - 4);
            *(_DWORD *)unint64_t v18 = v25;
            *((unsigned char *)a2 - 4) = BYTE4(v24);
            *(_DWORD *)uint64_t v11 = v24;
            --a4;
            if (a5) {
              goto LABEL_55;
            }
          }
LABEL_54:
          if (*(_DWORD *)(v14 - 8) < *(_DWORD *)v14) {
            goto LABEL_55;
          }
          uint64_t v95 = *(void *)v14;
          if (*(_DWORD *)v11 > *(void *)v14)
          {
            do
            {
              unsigned int v96 = *(_DWORD *)(v14 + 8);
              v14 += 8;
            }
            while (v96 <= v95);
          }
          else
          {
            unint64_t v97 = v14 + 8;
            do
            {
              unint64_t v14 = v97;
              if (v97 >= (unint64_t)a2) {
                break;
              }
              v97 += 8;
            }
            while (*(_DWORD *)v14 <= v95);
          }
          long long v98 = a2;
          if (v14 < (unint64_t)a2)
          {
            long long v98 = a2;
            do
              unsigned int v99 = *((_DWORD *)v98-- - 2);
            while (v99 > v95);
          }
          while (v14 < (unint64_t)v98)
          {
            uint64_t v100 = *(void *)v14;
            int v101 = *(_DWORD *)v98;
            *(unsigned char *)(v14 + 4) = *((unsigned char *)v98 + 4);
            *(_DWORD *)unint64_t v14 = v101;
            *(_DWORD *)long long v98 = v100;
            *((unsigned char *)v98 + 4) = BYTE4(v100);
            do
            {
              unsigned int v102 = *(_DWORD *)(v14 + 8);
              v14 += 8;
            }
            while (v102 <= v95);
            do
              unsigned int v103 = *((_DWORD *)v98-- - 2);
            while (v103 > v95);
          }
          BOOL v5 = v14 - 8 >= v10;
          BOOL v6 = v14 - 8 == v10;
          if (v14 - 8 != v10)
          {
            int v104 = *(_DWORD *)(v14 - 8);
            *(unsigned char *)(v10 + 4) = *(unsigned char *)(v14 - 4);
            *(_DWORD *)unint64_t v10 = v104;
          }
          a5 = 0;
          *(_DWORD *)(v14 - 8) = v95;
          *(unsigned char *)(v14 - 4) = BYTE4(v95);
        }
        unsigned int v20 = *(_DWORD *)v18;
        if (*(_DWORD *)v18 >= *(_DWORD *)v14)
        {
          if (v19 < v20)
          {
            uint64_t v26 = *(void *)v18;
            unsigned int v27 = *(_DWORD *)v11;
            *(unsigned char *)(v18 + 4) = *((unsigned char *)a2 - 4);
            *(_DWORD *)unint64_t v18 = v27;
            *(_DWORD *)uint64_t v11 = v26;
            *((unsigned char *)a2 - 4) = BYTE4(v26);
            if (*(_DWORD *)v18 < *(_DWORD *)v14)
            {
              uint64_t v28 = *(void *)v14;
              unsigned int v29 = *(_DWORD *)v18;
              *(unsigned char *)(v14 + 4) = *(unsigned char *)(v18 + 4);
              *(_DWORD *)unint64_t v14 = v29;
              *(_DWORD *)unint64_t v18 = v28;
              *(unsigned char *)(v18 + 4) = BYTE4(v28);
            }
          }
        }
        else
        {
          uint64_t v21 = *(void *)v14;
          if (v19 >= v20)
          {
            unsigned int v34 = *(_DWORD *)v18;
            *(unsigned char *)(v14 + 4) = *(unsigned char *)(v18 + 4);
            *(_DWORD *)unint64_t v14 = v34;
            *(unsigned char *)(v18 + 4) = BYTE4(v21);
            *(_DWORD *)unint64_t v18 = v21;
            if (*(_DWORD *)v11 < v21)
            {
              uint64_t v35 = *(void *)v18;
              unsigned int v36 = *(_DWORD *)v11;
              *(unsigned char *)(v18 + 4) = *((unsigned char *)a2 - 4);
              *(_DWORD *)unint64_t v18 = v36;
              *(_DWORD *)uint64_t v11 = v35;
              *((unsigned char *)a2 - 4) = BYTE4(v35);
            }
          }
          else
          {
            unsigned int v22 = *(_DWORD *)v11;
            *(unsigned char *)(v14 + 4) = *((unsigned char *)a2 - 4);
            *(_DWORD *)unint64_t v14 = v22;
            *((unsigned char *)a2 - 4) = BYTE4(v21);
            *(_DWORD *)uint64_t v11 = v21;
          }
        }
        double v37 = (uint64_t *)(v14 + 8);
        unint64_t v38 = v14 + 8 * v17;
        unsigned int v41 = *(_DWORD *)(v38 - 8);
        unint64_t v39 = v38 - 8;
        unsigned int v40 = v41;
        unsigned int v42 = *(_DWORD *)v12;
        if (v41 >= *(_DWORD *)(v14 + 8))
        {
          if (v42 < v40)
          {
            uint64_t v45 = *(void *)v39;
            unsigned int v46 = *(_DWORD *)v12;
            *(unsigned char *)(v39 + 4) = *((unsigned char *)a2 - 12);
            *(_DWORD *)unint64_t v39 = v46;
            *(_DWORD *)uint64_t v12 = v45;
            *((unsigned char *)a2 - 12) = BYTE4(v45);
            if (*(_DWORD *)v39 < *(_DWORD *)v37)
            {
              uint64_t v47 = *v37;
              int v48 = *(_DWORD *)v39;
              *(unsigned char *)(v14 + 12) = *(unsigned char *)(v39 + 4);
              *(_DWORD *)double v37 = v48;
              *(_DWORD *)unint64_t v39 = v47;
              *(unsigned char *)(v39 + 4) = BYTE4(v47);
            }
          }
        }
        else
        {
          uint64_t v43 = *v37;
          if (v42 >= v40)
          {
            int v52 = *(_DWORD *)v39;
            *(unsigned char *)(v14 + 12) = *(unsigned char *)(v39 + 4);
            *(_DWORD *)double v37 = v52;
            *(unsigned char *)(v39 + 4) = BYTE4(v43);
            *(_DWORD *)unint64_t v39 = v43;
            if (*(_DWORD *)v12 < v43)
            {
              uint64_t v53 = *(void *)v39;
              unsigned int v54 = *(_DWORD *)v12;
              *(unsigned char *)(v39 + 4) = *((unsigned char *)a2 - 12);
              *(_DWORD *)unint64_t v39 = v54;
              *(_DWORD *)uint64_t v12 = v53;
              *((unsigned char *)a2 - 12) = BYTE4(v53);
            }
          }
          else
          {
            unsigned int v44 = *(_DWORD *)v12;
            *(unsigned char *)(v14 + 12) = *((unsigned char *)a2 - 12);
            *(_DWORD *)double v37 = v44;
            *((unsigned char *)a2 - 12) = BYTE4(v43);
            *(_DWORD *)uint64_t v12 = v43;
          }
        }
        size_t v55 = (uint64_t *)(v14 + 16);
        unint64_t v56 = v14 + 8 * v17;
        unsigned int v59 = *(_DWORD *)(v56 + 8);
        unint64_t v57 = v56 + 8;
        unsigned int v58 = v59;
        unsigned int v60 = *(_DWORD *)v13;
        if (v59 >= *(_DWORD *)(v14 + 16))
        {
          if (v60 < v58)
          {
            uint64_t v63 = *(void *)v57;
            unsigned int v64 = *(_DWORD *)v13;
            *(unsigned char *)(v57 + 4) = *((unsigned char *)a2 - 20);
            *(_DWORD *)unint64_t v57 = v64;
            *(_DWORD *)uint64_t v13 = v63;
            *((unsigned char *)a2 - 20) = BYTE4(v63);
            if (*(_DWORD *)v57 < *(_DWORD *)v55)
            {
              uint64_t v65 = *v55;
              int v66 = *(_DWORD *)v57;
              *(unsigned char *)(v14 + 20) = *(unsigned char *)(v57 + 4);
              *(_DWORD *)size_t v55 = v66;
              *(_DWORD *)unint64_t v57 = v65;
              *(unsigned char *)(v57 + 4) = BYTE4(v65);
            }
          }
        }
        else
        {
          uint64_t v61 = *v55;
          if (v60 >= v58)
          {
            int v67 = *(_DWORD *)v57;
            *(unsigned char *)(v14 + 20) = *(unsigned char *)(v57 + 4);
            *(_DWORD *)size_t v55 = v67;
            *(unsigned char *)(v57 + 4) = BYTE4(v61);
            *(_DWORD *)unint64_t v57 = v61;
            if (*(_DWORD *)v13 < v61)
            {
              uint64_t v68 = *(void *)v57;
              unsigned int v69 = *(_DWORD *)v13;
              *(unsigned char *)(v57 + 4) = *((unsigned char *)a2 - 20);
              *(_DWORD *)unint64_t v57 = v69;
              *(_DWORD *)uint64_t v13 = v68;
              *((unsigned char *)a2 - 20) = BYTE4(v68);
            }
          }
          else
          {
            unsigned int v62 = *(_DWORD *)v13;
            *(unsigned char *)(v14 + 20) = *((unsigned char *)a2 - 20);
            *(_DWORD *)size_t v55 = v62;
            *((unsigned char *)a2 - 20) = BYTE4(v61);
            *(_DWORD *)uint64_t v13 = v61;
          }
        }
        unsigned int v70 = *(_DWORD *)v39;
        unsigned int v71 = *(_DWORD *)v18;
        unsigned int v72 = *(_DWORD *)v57;
        if (*(_DWORD *)v18 >= *(_DWORD *)v39)
        {
          if (v72 < v71)
          {
            uint64_t v75 = *(void *)v18;
            unsigned int v76 = *(_DWORD *)v57;
            *(_DWORD *)unint64_t v18 = *(_DWORD *)v57;
            *(unsigned char *)(v18 + 4) = *(unsigned char *)(v57 + 4);
            *(_DWORD *)unint64_t v57 = v75;
            *(unsigned char *)(v57 + 4) = BYTE4(v75);
            if (v76 < v70)
            {
              uint64_t v77 = *(void *)v39;
              *(_DWORD *)unint64_t v39 = *(_DWORD *)v18;
              *(unsigned char *)(v39 + 4) = *(unsigned char *)(v18 + 4);
              *(_DWORD *)unint64_t v18 = v77;
              *(unsigned char *)(v18 + 4) = BYTE4(v77);
            }
          }
        }
        else
        {
          unint64_t v73 = *(void *)v39;
          if (v72 >= v71)
          {
            *(_DWORD *)unint64_t v39 = *(_DWORD *)v18;
            *(unsigned char *)(v39 + 4) = *(unsigned char *)(v18 + 4);
            *(_DWORD *)unint64_t v18 = v73;
            *(unsigned char *)(v18 + 4) = BYTE4(v73);
            if (v72 >= v73) {
              goto LABEL_53;
            }
            unint64_t v78 = *(void *)v18;
            *(_DWORD *)unint64_t v18 = *(_DWORD *)v57;
            *(unsigned char *)(v18 + 4) = *(unsigned char *)(v57 + 4);
            *(_DWORD *)unint64_t v57 = v78;
            unint64_t v74 = HIDWORD(v78);
          }
          else
          {
            *(_DWORD *)unint64_t v39 = *(_DWORD *)v57;
            *(unsigned char *)(v39 + 4) = *(unsigned char *)(v57 + 4);
            *(_DWORD *)unint64_t v57 = v73;
            unint64_t v74 = HIDWORD(v73);
          }
          *(unsigned char *)(v57 + 4) = v74;
        }
LABEL_53:
        uint64_t v79 = *(void *)v14;
        unsigned int v80 = *(_DWORD *)v18;
        *(unsigned char *)(v14 + 4) = *(unsigned char *)(v18 + 4);
        *(_DWORD *)unint64_t v14 = v80;
        *(_DWORD *)unint64_t v18 = v79;
        *(unsigned char *)(v18 + 4) = BYTE4(v79);
        --a4;
        if ((a5 & 1) == 0) {
          goto LABEL_54;
        }
LABEL_55:
        uint64_t v81 = 0;
        uint64_t v82 = *(void *)v14;
        do
        {
          unsigned int v83 = *(_DWORD *)(v14 + v81 + 8);
          v81 += 8;
        }
        while (v83 < v82);
        unint64_t v84 = v14 + v81;
        unsigned int v85 = a2;
        if (v81 == 8)
        {
          unsigned int v85 = a2;
          do
          {
            if (v84 >= (unint64_t)v85) {
              break;
            }
            unsigned int v87 = *((_DWORD *)v85-- - 2);
          }
          while (v87 >= v82);
        }
        else
        {
          do
            unsigned int v86 = *((_DWORD *)v85-- - 2);
          while (v86 >= v82);
        }
        v14 += v81;
        if (v84 < (unint64_t)v85)
        {
          unint64_t v88 = (unint64_t)v85;
          do
          {
            uint64_t v89 = *(void *)v14;
            int v90 = *(_DWORD *)v88;
            *(unsigned char *)(v14 + 4) = *(unsigned char *)(v88 + 4);
            *(_DWORD *)unint64_t v14 = v90;
            *(_DWORD *)unint64_t v88 = v89;
            *(unsigned char *)(v88 + 4) = BYTE4(v89);
            do
            {
              unsigned int v91 = *(_DWORD *)(v14 + 8);
              v14 += 8;
            }
            while (v91 < v82);
            do
            {
              unsigned int v92 = *(_DWORD *)(v88 - 8);
              v88 -= 8;
            }
            while (v92 >= v82);
          }
          while (v14 < v88);
        }
        if (v14 - 8 != v10)
        {
          int v93 = *(_DWORD *)(v14 - 8);
          *(unsigned char *)(v10 + 4) = *(unsigned char *)(v14 - 4);
          *(_DWORD *)unint64_t v10 = v93;
        }
        *(_DWORD *)(v14 - 8) = v82;
        *(unsigned char *)(v14 - 4) = BYTE4(v82);
        if (v84 >= (unint64_t)v85) {
          break;
        }
LABEL_74:
        double result = sub_EF6444(v10, v14 - 8, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v94 = sub_EF6FD4((unsigned int *)v10, (int *)(v14 - 8));
      double result = sub_EF6FD4((unsigned int *)v14, (int *)a2);
      if (result) {
        break;
      }
      if (!v94) {
        goto LABEL_74;
      }
    }
    a2 = (uint64_t *)(v14 - 8);
    if (!v94) {
      continue;
    }
    return result;
  }
}

BOOL sub_EF6FD4(unsigned int *a1, int *a2)
{
  switch(((char *)a2 - (char *)a1) >> 3)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      unsigned int v10 = *(a2 - 2);
      uint64_t v9 = a2 - 2;
      if (v10 < *a1)
      {
        uint64_t v11 = *(void *)a1;
        unsigned int v12 = *v9;
        *((unsigned char *)a1 + 4) = *((unsigned char *)v9 + 4);
        *a1 = v12;
        *uint64_t v9 = v11;
        *((unsigned char *)v9 + 4) = BYTE4(v11);
      }
      return 1;
    case 3:
      uint64_t v13 = (uint64_t *)(a1 + 2);
      unsigned int v14 = a1[2];
      unsigned int v17 = *(a2 - 2);
      uint64_t v15 = a2 - 2;
      unsigned int v16 = v17;
      if (v14 >= *a1)
      {
        if (v16 < v14)
        {
          uint64_t v29 = *((void *)a1 + 1);
          int v30 = *v15;
          *((unsigned char *)a1 + 12) = *((unsigned char *)v15 + 4);
          *(_DWORD *)uint64_t v13 = v30;
          *uint64_t v15 = v29;
          *((unsigned char *)v15 + 4) = BYTE4(v29);
          if (a1[2] < *a1)
          {
LABEL_45:
            uint64_t v46 = *(void *)a1;
            *a1 = *(_DWORD *)v13;
            *((unsigned char *)a1 + 4) = *((unsigned char *)v13 + 4);
            a1[2] = v46;
            *((unsigned char *)a1 + 12) = BYTE4(v46);
            return 1;
          }
        }
      }
      else
      {
        uint64_t v18 = *(void *)a1;
        if (v16 < v14)
        {
          unsigned int v19 = *v15;
          *((unsigned char *)a1 + 4) = *((unsigned char *)v15 + 4);
          *a1 = v19;
          *((unsigned char *)v15 + 4) = BYTE4(v18);
          *uint64_t v15 = v18;
          return 1;
        }
        *a1 = *(_DWORD *)v13;
        *((unsigned char *)a1 + 4) = *((unsigned char *)a1 + 12);
        a1[2] = v18;
        *((unsigned char *)a1 + 12) = BYTE4(v18);
        if (*v15 < v18)
        {
          uint64_t v41 = *v13;
          int v42 = *v15;
          *((unsigned char *)a1 + 12) = *((unsigned char *)v15 + 4);
          *(_DWORD *)uint64_t v13 = v42;
          *uint64_t v15 = v41;
          *((unsigned char *)v15 + 4) = BYTE4(v41);
          return 1;
        }
      }
      return 1;
    case 4:
      uint64_t v13 = (uint64_t *)(a1 + 2);
      unsigned int v20 = a1[2];
      uint64_t v21 = a1 + 4;
      LODWORD(v22) = a1[4];
      unsigned int v23 = a2 - 2;
      unsigned int v24 = *a1;
      if (v20 >= *a1)
      {
        if (v22 < v20)
        {
          uint64_t v22 = *v13;
          unsigned int v31 = *v21;
          *(_DWORD *)uint64_t v13 = *v21;
          *((unsigned char *)a1 + 12) = *((unsigned char *)a1 + 20);
          *uint64_t v21 = v22;
          *((unsigned char *)a1 + 20) = BYTE4(v22);
          if (v31 < v24)
          {
            uint64_t v32 = *(void *)a1;
            *a1 = *(_DWORD *)v13;
            *((unsigned char *)a1 + 4) = *((unsigned char *)a1 + 12);
            a1[2] = v32;
            *((unsigned char *)a1 + 12) = BYTE4(v32);
          }
        }
      }
      else
      {
        uint64_t v25 = *(void *)a1;
        if (v22 >= v20)
        {
          *a1 = *(_DWORD *)v13;
          *((unsigned char *)a1 + 4) = *((unsigned char *)a1 + 12);
          a1[2] = v25;
          *((unsigned char *)a1 + 12) = BYTE4(v25);
          if (v22 < v25)
          {
            uint64_t v22 = *v13;
            *(_DWORD *)uint64_t v13 = *v21;
            *((unsigned char *)a1 + 12) = *((unsigned char *)a1 + 20);
            *uint64_t v21 = v22;
            *((unsigned char *)a1 + 20) = BYTE4(v22);
          }
        }
        else
        {
          *a1 = *v21;
          *((unsigned char *)a1 + 4) = *((unsigned char *)a1 + 20);
          a1[4] = v25;
          *((unsigned char *)a1 + 20) = BYTE4(v25);
          LODWORD(v22) = v25;
        }
      }
      if (*v23 < v22)
      {
        uint64_t v43 = *(void *)v21;
        unsigned int v44 = *v23;
        *((unsigned char *)a1 + 20) = *((unsigned char *)a2 - 4);
        *uint64_t v21 = v44;
        int *v23 = v43;
        *((unsigned char *)a2 - 4) = BYTE4(v43);
        if (*v21 < *(_DWORD *)v13)
        {
          uint64_t v45 = *((void *)a1 + 1);
          *((unsigned char *)a1 + 12) = *((unsigned char *)a1 + 20);
          *(_DWORD *)uint64_t v13 = *v21;
          a1[4] = v45;
          *((unsigned char *)a1 + 20) = BYTE4(v45);
          if (a1[2] < *a1) {
            goto LABEL_45;
          }
        }
      }
      return 1;
    case 5:
      sub_EF74B8((uint64_t *)a1, a1 + 2, a1 + 4, a1 + 6, (unsigned int *)a2 - 2);
      return 1;
    default:
      uint64_t v3 = a1 + 4;
      unsigned int v4 = a1[4];
      BOOL v5 = (uint64_t *)(a1 + 2);
      unsigned int v6 = a1[2];
      unsigned int v7 = *a1;
      if (v6 >= *a1)
      {
        if (v4 < v6)
        {
          uint64_t v26 = *v5;
          unsigned int v27 = *v3;
          *(_DWORD *)BOOL v5 = *v3;
          *((unsigned char *)a1 + 12) = *((unsigned char *)a1 + 20);
          unsigned int *v3 = v26;
          *((unsigned char *)a1 + 20) = BYTE4(v26);
          if (v27 < v7)
          {
            uint64_t v28 = *(void *)a1;
            *a1 = *(_DWORD *)v5;
            *((unsigned char *)a1 + 4) = *((unsigned char *)a1 + 12);
            a1[2] = v28;
            *((unsigned char *)a1 + 12) = BYTE4(v28);
          }
        }
      }
      else
      {
        uint64_t v8 = *(void *)a1;
        if (v4 >= v6)
        {
          *a1 = *(_DWORD *)v5;
          *((unsigned char *)a1 + 4) = *((unsigned char *)a1 + 12);
          a1[2] = v8;
          *((unsigned char *)a1 + 12) = BYTE4(v8);
          if (v4 < v8)
          {
            uint64_t v33 = *v5;
            *(_DWORD *)BOOL v5 = *v3;
            *((unsigned char *)a1 + 12) = *((unsigned char *)a1 + 20);
            unsigned int *v3 = v33;
            *((unsigned char *)a1 + 20) = BYTE4(v33);
          }
        }
        else
        {
          *a1 = *v3;
          *((unsigned char *)a1 + 4) = *((unsigned char *)a1 + 20);
          a1[4] = v8;
          *((unsigned char *)a1 + 20) = BYTE4(v8);
        }
      }
      unsigned int v34 = a1 + 6;
      if (a1 + 6 == (unsigned int *)a2) {
        return 1;
      }
      uint64_t v35 = 0;
      int v36 = 0;
      break;
  }
  while (*v34 >= *v3)
  {
LABEL_36:
    uint64_t v3 = v34;
    v35 += 8;
    v34 += 2;
    if (v34 == (unsigned int *)a2) {
      return 1;
    }
  }
  uint64_t v37 = *(void *)v34;
  uint64_t v38 = v35;
  do
  {
    uint64_t v39 = (uint64_t)a1 + v38;
    *(_DWORD *)(v39 + 24) = *(unsigned int *)((char *)a1 + v38 + 16);
    *(unsigned char *)(v39 + 28) = *((unsigned char *)a1 + v38 + 20);
    if (v38 == -16)
    {
      *a1 = v37;
      *((unsigned char *)a1 + 4) = BYTE4(v37);
      if (++v36 != 8) {
        goto LABEL_36;
      }
      return v34 + 2 == (unsigned int *)a2;
    }
    v38 -= 8;
  }
  while (*(_DWORD *)(v39 + 8) > v37);
  uint64_t v40 = (uint64_t)a1 + v38;
  *(_DWORD *)(v40 + 24) = v37;
  *(unsigned char *)(v40 + 28) = BYTE4(v37);
  if (++v36 != 8) {
    goto LABEL_36;
  }
  return v34 + 2 == (unsigned int *)a2;
}

uint64_t *sub_EF74B8(uint64_t *result, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  unsigned int v5 = *a2;
  unsigned int v6 = *a3;
  if (*a2 >= *(_DWORD *)result)
  {
    LODWORD(v7) = *a3;
    if (v6 < v5)
    {
      uint64_t v7 = *(void *)a2;
      unsigned int v9 = *a3;
      *((unsigned char *)a2 + 4) = *((unsigned char *)a3 + 4);
      *a2 = v9;
      *a3 = v7;
      *((unsigned char *)a3 + 4) = BYTE4(v7);
      if (*a2 < *(_DWORD *)result)
      {
        uint64_t v7 = *result;
        unsigned int v10 = *a2;
        *((unsigned char *)result + 4) = *((unsigned char *)a2 + 4);
        *(_DWORD *)double result = v10;
        *a2 = v7;
        *((unsigned char *)a2 + 4) = BYTE4(v7);
        LODWORD(v7) = *a3;
      }
    }
  }
  else
  {
    uint64_t v7 = *result;
    if (v6 >= v5)
    {
      unsigned int v11 = *a2;
      *((unsigned char *)result + 4) = *((unsigned char *)a2 + 4);
      *(_DWORD *)double result = v11;
      *((unsigned char *)a2 + 4) = BYTE4(v7);
      *a2 = v7;
      BOOL v12 = *a3 >= v7;
      LODWORD(v7) = *a3;
      if (!v12)
      {
        uint64_t v7 = *(void *)a2;
        unsigned int v13 = *a3;
        *((unsigned char *)a2 + 4) = *((unsigned char *)a3 + 4);
        *a2 = v13;
        *a3 = v7;
        *((unsigned char *)a3 + 4) = BYTE4(v7);
      }
    }
    else
    {
      unsigned int v8 = *a3;
      *((unsigned char *)result + 4) = *((unsigned char *)a3 + 4);
      *(_DWORD *)double result = v8;
      *((unsigned char *)a3 + 4) = BYTE4(v7);
      *a3 = v7;
    }
  }
  if (*a4 < v7)
  {
    uint64_t v14 = *(void *)a3;
    unsigned int v15 = *a4;
    *((unsigned char *)a3 + 4) = *((unsigned char *)a4 + 4);
    *a3 = v15;
    *a4 = v14;
    *((unsigned char *)a4 + 4) = BYTE4(v14);
    if (*a3 < *a2)
    {
      uint64_t v16 = *(void *)a2;
      unsigned int v17 = *a3;
      *((unsigned char *)a2 + 4) = *((unsigned char *)a3 + 4);
      *a2 = v17;
      *a3 = v16;
      *((unsigned char *)a3 + 4) = BYTE4(v16);
      if (*a2 < *(_DWORD *)result)
      {
        uint64_t v18 = *result;
        unsigned int v19 = *a2;
        *((unsigned char *)result + 4) = *((unsigned char *)a2 + 4);
        *(_DWORD *)double result = v19;
        *a2 = v18;
        *((unsigned char *)a2 + 4) = BYTE4(v18);
      }
    }
  }
  if (*a5 < *a4)
  {
    uint64_t v20 = *(void *)a4;
    unsigned int v21 = *a5;
    *((unsigned char *)a4 + 4) = *((unsigned char *)a5 + 4);
    *a4 = v21;
    *a5 = v20;
    *((unsigned char *)a5 + 4) = BYTE4(v20);
    if (*a4 < *a3)
    {
      uint64_t v22 = *(void *)a3;
      unsigned int v23 = *a4;
      *((unsigned char *)a3 + 4) = *((unsigned char *)a4 + 4);
      *a3 = v23;
      *a4 = v22;
      *((unsigned char *)a4 + 4) = BYTE4(v22);
      if (*a3 < *a2)
      {
        uint64_t v24 = *(void *)a2;
        unsigned int v25 = *a3;
        *((unsigned char *)a2 + 4) = *((unsigned char *)a3 + 4);
        *a2 = v25;
        *a3 = v24;
        *((unsigned char *)a3 + 4) = BYTE4(v24);
        if (*a2 < *(_DWORD *)result)
        {
          uint64_t v26 = *result;
          unsigned int v27 = *a2;
          *((unsigned char *)result + 4) = *((unsigned char *)a2 + 4);
          *(_DWORD *)double result = v27;
          *a2 = v26;
          *((unsigned char *)a2 + 4) = BYTE4(v26);
        }
      }
    }
  }
  return result;
}

uint64_t *sub_EF76F8(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  if ((uint64_t *)a1 == a2) {
    return a3;
  }
  uint64_t v3 = (uint64_t)a2 - a1;
  uint64_t v4 = ((uint64_t)a2 - a1) >> 3;
  if ((uint64_t)a2 - a1 >= 9 && (unint64_t)v3 >= 0x10)
  {
    int64_t v43 = (unint64_t)(v4 - 2) >> 1;
    int64_t v44 = v43;
    do
    {
      if (v43 >= v44)
      {
        uint64_t v45 = (2 * v44) | 1;
        uint64_t v46 = (unsigned int *)(a1 + 8 * v45);
        if (2 * v44 + 2 >= v4)
        {
          int v49 = (unsigned int *)(a1 + 8 * v44);
          if (*v46 >= *v49) {
            goto LABEL_70;
          }
        }
        else
        {
          unsigned int v47 = v46[2];
          BOOL v48 = *v46 >= v47;
          if (*v46 > v47) {
            unsigned int v47 = *v46;
          }
          if (!v48)
          {
            v46 += 2;
            uint64_t v45 = 2 * v44 + 2;
          }
          int v49 = (unsigned int *)(a1 + 8 * v44);
          if (v47 >= *v49)
          {
LABEL_70:
            uint64_t v50 = *(void *)v49;
            while (1)
            {
              uint64_t v53 = v49;
              int v49 = v46;
              unsigned int v54 = *v46;
              *((unsigned char *)v53 + 4) = *((unsigned char *)v49 + 4);
              *uint64_t v53 = v54;
              if (v43 < v45) {
                break;
              }
              uint64_t v55 = (2 * v45) | 1;
              uint64_t v46 = (unsigned int *)(a1 + 8 * v55);
              uint64_t v45 = 2 * v45 + 2;
              if (v45 < v4)
              {
                unsigned int v51 = v46[2];
                BOOL v52 = *v46 >= v51;
                if (*v46 > v51) {
                  unsigned int v51 = *v46;
                }
                if (v52) {
                  uint64_t v45 = v55;
                }
                else {
                  v46 += 2;
                }
                if (v51 < v50) {
                  break;
                }
              }
              else
              {
                uint64_t v45 = v55;
                if (*v46 < v50) {
                  break;
                }
              }
            }
            *int v49 = v50;
            *((unsigned char *)v49 + 4) = BYTE4(v50);
          }
        }
      }
      BOOL v27 = v44-- <= 0;
    }
    while (!v27);
  }
  unsigned int v5 = a2;
  if (a2 != a3)
  {
    if (v3 < 16)
    {
      LODWORD(v6) = *(_DWORD *)a1;
      uint64_t v7 = a2;
      do
      {
        if (*(_DWORD *)v7 < v6)
        {
          uint64_t v6 = *v7;
          int v8 = *(_DWORD *)a1;
          *((unsigned char *)v7 + 4) = *(unsigned char *)(a1 + 4);
          *(_DWORD *)uint64_t v7 = v8;
          *(_DWORD *)a1 = v6;
          *(unsigned char *)(a1 + 4) = BYTE4(v6);
        }
        ++v7;
      }
      while (v7 != a3);
LABEL_37:
      unsigned int v5 = a3;
      goto LABEL_38;
    }
    unsigned int v9 = (unsigned int *)(a1 + 8);
    unsigned int v10 = a2;
    while (1)
    {
      if (*(_DWORD *)v10 < *(_DWORD *)a1)
      {
        uint64_t v11 = *v10;
        int v12 = *(_DWORD *)a1;
        *((unsigned char *)v10 + 4) = *(unsigned char *)(a1 + 4);
        *(_DWORD *)unsigned int v10 = v12;
        *(_DWORD *)a1 = v11;
        *(unsigned char *)(a1 + 4) = BYTE4(v11);
        if (v3 == 16)
        {
          unsigned int v13 = (unsigned int *)(a1 + 8);
          uint64_t v14 = 1;
          if (*v9 >= v11) {
            goto LABEL_26;
          }
        }
        else
        {
          unsigned int v15 = *(_DWORD *)(a1 + 16);
          unsigned int v16 = *v9;
          BOOL v17 = *v9 >= v15;
          if (*v9 <= v15) {
            unsigned int v16 = *(_DWORD *)(a1 + 16);
          }
          if (*v9 >= v15) {
            unsigned int v13 = (unsigned int *)(a1 + 8);
          }
          else {
            unsigned int v13 = (unsigned int *)(a1 + 16);
          }
          if (v17) {
            uint64_t v14 = 1;
          }
          else {
            uint64_t v14 = 2;
          }
          if (v16 >= v11)
          {
LABEL_26:
            uint64_t v18 = *(void *)a1;
            unsigned int v19 = (unsigned int *)a1;
            while (1)
            {
              uint64_t v22 = v19;
              unsigned int v19 = v13;
              unsigned int v23 = *v13;
              *((unsigned char *)v22 + 4) = *((unsigned char *)v19 + 4);
              *uint64_t v22 = v23;
              if ((uint64_t)((unint64_t)(v4 - 2) >> 1) < v14) {
                break;
              }
              uint64_t v24 = (2 * v14) | 1;
              unsigned int v13 = (unsigned int *)(a1 + 8 * v24);
              uint64_t v14 = 2 * v14 + 2;
              if (v14 < v4)
              {
                unsigned int v20 = v13[2];
                BOOL v21 = *v13 >= v20;
                if (*v13 > v20) {
                  unsigned int v20 = *v13;
                }
                if (v21) {
                  uint64_t v14 = v24;
                }
                else {
                  v13 += 2;
                }
                if (v20 < v18) {
                  break;
                }
              }
              else
              {
                uint64_t v14 = v24;
                if (*v13 < v18) {
                  break;
                }
              }
            }
            *unsigned int v19 = v18;
            *((unsigned char *)v19 + 4) = BYTE4(v18);
          }
        }
      }
      if (++v10 == a3) {
        goto LABEL_37;
      }
    }
  }
LABEL_38:
  if (v3 >= 9)
  {
    uint64_t v25 = (unint64_t)v3 >> 3;
    do
    {
      uint64_t v28 = 0;
      unint64_t v29 = *(void *)a1;
      uint64_t v30 = a1;
      do
      {
        uint64_t v32 = v30 + 8 * v28 + 8;
        uint64_t v33 = (2 * v28) | 1;
        uint64_t v34 = 2 * v28 + 2;
        if (v34 < v25 && *(_DWORD *)v32 < *(_DWORD *)(v32 + 8))
        {
          v32 += 8;
          uint64_t v33 = v34;
        }
        int v31 = *(_DWORD *)v32;
        *(unsigned char *)(v30 + 4) = *(unsigned char *)(v32 + 4);
        *(_DWORD *)uint64_t v30 = v31;
        uint64_t v30 = v32;
        uint64_t v28 = v33;
      }
      while (v33 <= (uint64_t)((unint64_t)(v25 - 2) >> 1));
      if ((uint64_t *)v32 == --a2)
      {
        *(_DWORD *)uint64_t v32 = v29;
        unint64_t v26 = HIDWORD(v29);
      }
      else
      {
        int v35 = *(_DWORD *)a2;
        *(unsigned char *)(v32 + 4) = *((unsigned char *)a2 + 4);
        *(_DWORD *)uint64_t v32 = v35;
        *((unsigned char *)a2 + 4) = BYTE4(v29);
        *(_DWORD *)a2 = v29;
        uint64_t v36 = v32 - a1 + 8;
        if (v36 < 9) {
          goto LABEL_42;
        }
        unint64_t v37 = (((unint64_t)v36 >> 3) - 2) >> 1;
        uint64_t v38 = (int *)(a1 + 8 * v37);
        if (*v38 >= *(_DWORD *)v32) {
          goto LABEL_42;
        }
        unint64_t v39 = *(void *)v32;
        do
        {
          uint64_t v40 = v32;
          uint64_t v32 = (uint64_t)v38;
          int v41 = *v38;
          *(unsigned char *)(v40 + 4) = *(unsigned char *)(v32 + 4);
          *(_DWORD *)uint64_t v40 = v41;
          if (!v37) {
            break;
          }
          unint64_t v37 = (v37 - 1) >> 1;
          uint64_t v38 = (int *)(a1 + 8 * v37);
        }
        while (*v38 < v39);
        unint64_t v26 = HIDWORD(v39);
        *(_DWORD *)uint64_t v32 = v39;
      }
      *(unsigned char *)(v32 + 4) = v26;
LABEL_42:
      BOOL v27 = v25-- <= 2;
    }
    while (!v27);
  }
  return v5;
}

_DWORD *sub_EF7AF4(_DWORD *a1, void *a2)
{
  char v6 = 11;
  strcpy((char *)__p, "blend_start");
  *a1 = 600 * sub_319F48(a2, (uint64_t)__p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  char v6 = 9;
  strcpy((char *)__p, "blend_end");
  a1[1] = 600 * sub_319F48(a2, (uint64_t)__p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_EF7BD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_EF7BF0(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = (int *)sub_2D5D58(*(void *)(a1 + 16), a2);
  uint64_t v4 = (unsigned __int16 *)((char *)v3 - *v3);
  if (*v4 < 0xDu)
  {
    LODWORD(v5) = 0;
    int v8 = *(unsigned __int16 *)(a1 + 56);
    if (v8 == 0xFFFF || v8 != 0) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v5 = v4[6];
    if (v5) {
      LODWORD(v5) = *(unsigned __int16 *)((char *)v3 + v5);
    }
    int v6 = *(unsigned __int16 *)(a1 + 56);
    if (v6 == 0xFFFF || v5 != v6)
    {
LABEL_14:
      *(_WORD *)(a1 + 56) = v5;
      uint64_t v10 = v5;
      uint64_t v11 = sub_290DEC(*(void *)(a1 + 16) + 3896, 1u, 0);
      int v12 = &v11[-*(int *)v11];
      if (*(unsigned __int16 *)v12 < 0xBu)
      {
        uint64_t v13 = 0;
      }
      else
      {
        uint64_t v13 = *((unsigned __int16 *)v12 + 5);
        if (v13) {
          v13 += (uint64_t)&v11[*(unsigned int *)&v11[v13]];
        }
      }
      uint64_t v14 = (int *)(v13 + 4 * v10 + 4 + *(unsigned int *)(v13 + 4 * v10 + 4));
      unsigned int v15 = (unsigned __int16 *)((char *)v14 - *v14);
      if (*v15 < 5u || (uint64_t v16 = v15[2]) == 0)
      {
        HIBYTE(v24) = 0;
        LOBYTE(__dst[0]) = 0;
        goto LABEL_30;
      }
      BOOL v17 = (unsigned int *)((char *)v14 + v16);
      uint64_t v18 = *v17;
      unsigned int v20 = (char *)v17 + v18 + 4;
      size_t v19 = *(unsigned int *)((char *)v17 + v18);
      if (v19 >= 0x17)
      {
        if ((v19 | 7) == 0x17) {
          uint64_t v22 = (v19 & 0xFFFFFFF8) + 8;
        }
        else {
          uint64_t v22 = v19 | 7;
        }
        BOOL v21 = (void **)operator new(v22 + 1);
        __dst[1] = (void *)v19;
        uint64_t v24 = v22 - 0x7FFFFFFFFFFFFFFFLL;
        __dst[0] = v21;
      }
      else
      {
        HIBYTE(v24) = *(unsigned int *)((char *)v17 + v18);
        BOOL v21 = __dst;
        if (!v19) {
          goto LABEL_29;
        }
      }
      memcpy(v21, v20, v19);
LABEL_29:
      *((unsigned char *)v21 + v19) = 0;
LABEL_30:
      sub_EF7F34(a1, (char *)__dst);
      if (SHIBYTE(v24) < 0) {
        operator delete(__dst[0]);
      }
    }
  }
}

void sub_EF7D9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_EF7DB8(uint64_t a1, uint64_t a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7390, memory_order_acquire) & 1) == 0)
  {
    uint64_t v23 = a2;
    int v22 = __cxa_guard_acquire(&qword_24F7390);
    a2 = v23;
    if (v22)
    {
      qword_24F7388 = 0xFFFFFFFFLL;
      __cxa_guard_release(&qword_24F7390);
      a2 = v23;
    }
  }
  if (*(void *)(a1 + 64) >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 4)) {
    return &qword_24F7388;
  }
  unsigned int v3 = sub_5094(a2);
  double result = (uint64_t *)(a1 + 72);
  int v5 = *(_DWORD *)(a1 + 72);
  if (v5 == -1 || v3 != v5)
  {
    uint64_t v6 = *(void *)(a1 + 32) + 48 * *(void *)(a1 + 64);
    uint64_t v7 = *(unsigned int **)(v6 + 24);
    int v8 = *(int **)(v6 + 32);
    if ((char *)v8 - (char *)v7 >= 8)
    {
      if ((char *)v8 - (char *)v7 != 8)
      {
        unint64_t v9 = (unint64_t)((char *)v8 - (char *)v7) >> 3;
        do
        {
          unint64_t v10 = (2 * v9) & 0xFFFFFFFFFFFFFFF8;
          _X14 = (uint64_t)v7 + v10;
          __asm { PRFM            #0, [X14] }
          BOOL v17 = &v7[2 * (v9 >> 1)];
          _X13 = (char *)v17 + v10;
          __asm { PRFM            #0, [X13] }
          if (*v17 >= v3) {
            unint64_t v20 = 0;
          }
          else {
            unint64_t v20 = v9 >> 1;
          }
          v7 += 2 * v20;
          v9 -= v9 >> 1;
        }
        while ((uint64_t)v9 > 1);
      }
      v7 += 2 * (*v7 < v3);
    }
    if (v7 != (unsigned int *)v8 && v3 == *v7)
    {
      unsigned int v21 = *v7;
      *(unsigned char *)(a1 + 76) = *((unsigned char *)v7 + 4);
      *(_DWORD *)double result = v21;
      return result;
    }
    return &qword_24F7388;
  }
  return result;
}

void sub_EF7F34(uint64_t a1, char *a2)
{
  int v2 = a2[23];
  if (v2 >= 0) {
    unsigned int v3 = a2;
  }
  else {
    unsigned int v3 = *(char **)a2;
  }
  if (v2 >= 0) {
    std::string::size_type v4 = a2[23];
  }
  else {
    std::string::size_type v4 = *((void *)a2 + 1);
  }
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v4 < 0x17)
  {
    *((unsigned char *)&v19.__r_.__value_.__s + 23) = v4;
    if (!v4)
    {
      v19.__r_.__value_.__s.__data_[0] = 0;
      goto LABEL_27;
    }
    uint64_t v6 = (char *)&v19;
    goto LABEL_19;
  }
  uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v4 | 7) != 0x17) {
    uint64_t v7 = v4 | 7;
  }
  uint64_t v8 = v7 + 1;
  uint64_t v6 = (char *)operator new(v7 + 1);
  v19.__r_.__value_.__l.__size_ = v4;
  v19.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
  v19.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
  if (v4 < 0x20 || (unint64_t)(v6 - v3) < 0x20)
  {
LABEL_19:
    unint64_t v9 = v3;
    unint64_t v10 = v6;
    do
    {
LABEL_20:
      char v15 = *v9++;
      *v10++ = v15;
    }
    while (v9 != &v3[v4]);
    goto LABEL_21;
  }
  unint64_t v9 = &v3[v4 & 0xFFFFFFFFFFFFFFE0];
  unint64_t v10 = &v6[v4 & 0xFFFFFFFFFFFFFFE0];
  uint64_t v11 = v6 + 16;
  int v12 = (long long *)(v3 + 16);
  unint64_t v13 = v4 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    long long v14 = *v12;
    *(v11 - 1) = *(v12 - 1);
    _OWORD *v11 = v14;
    v11 += 2;
    v12 += 2;
    v13 -= 32;
  }
  while (v13);
  if (v4 != (v4 & 0x7FFFFFFFFFFFFFE0)) {
    goto LABEL_20;
  }
LABEL_21:
  *unint64_t v10 = 0;
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v16 = &v19;
  }
  else {
    uint64_t v16 = (std::string *)v19.__r_.__value_.__r.__words[0];
  }
  do
  {
    v16->__r_.__value_.__s.__data_[0] = __tolower(*v3);
    uint64_t v16 = (std::string *)((char *)v16 + 1);
    ++v3;
    --v4;
  }
  while (v4);
LABEL_27:
  uint64_t v18 = &v19;
  uint64_t v17 = sub_EF8140((uint64_t *)(a1 + 32), (const void ***)&v18);
  if (*(void *)(a1 + 40) == v17)
  {
    std::string::operator=(&v19, (const std::string *)&xmmword_25FCA58);
    uint64_t v18 = &v19;
    uint64_t v17 = sub_EF8140((uint64_t *)(a1 + 32), (const void ***)&v18);
  }
  *(void *)(a1 + 64) = 0xAAAAAAAAAAAAAAABLL * ((v17 - *(void *)(a1 + 32)) >> 4);
  *(_DWORD *)(a1 + 72) = -1;
  *(unsigned char *)(a1 + 76) = 0;
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
}

void sub_EF8118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_EF8140(uint64_t *a1, const void ***a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 == v3) {
    return v2;
  }
  std::string::size_type v4 = *a2;
  if (*((char *)*a2 + 23) >= 0) {
    int v5 = (const void *)*((unsigned __int8 *)*a2 + 23);
  }
  else {
    int v5 = (*a2)[1];
  }
  if ((*((unsigned char *)*a2 + 23) & 0x80) != 0)
  {
    while (1)
    {
      uint64_t v10 = *(unsigned __int8 *)(v2 + 23);
      if ((v10 & 0x80u) == 0) {
        uint64_t v11 = (const void *)*(unsigned __int8 *)(v2 + 23);
      }
      else {
        uint64_t v11 = *(const void **)(v2 + 8);
      }
      if (v11 == v5)
      {
        int v12 = (unsigned __int8 *)*v4;
        if ((v10 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v2, v12, *(void *)(v2 + 8))) {
            return v2;
          }
        }
        else
        {
          if (!*(unsigned char *)(v2 + 23)) {
            return v2;
          }
          uint64_t v13 = 0;
          while (*(unsigned __int8 *)(v2 + v13) == v12[v13])
          {
            if (v10 == ++v13) {
              return v2;
            }
          }
        }
      }
      v2 += 48;
      if (v2 == v3) {
        return v3;
      }
    }
  }
  do
  {
    uint64_t v6 = *(unsigned __int8 *)(v2 + 23);
    if ((v6 & 0x80u) == 0) {
      uint64_t v7 = (const void *)*(unsigned __int8 *)(v2 + 23);
    }
    else {
      uint64_t v7 = *(const void **)(v2 + 8);
    }
    if (v7 == v5)
    {
      if ((v6 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)v2, v4, *(void *)(v2 + 8))) {
          return v2;
        }
      }
      else
      {
        if (!*(unsigned char *)(v2 + 23)) {
          return v2;
        }
        uint64_t v8 = 0;
        while (*(unsigned __int8 *)(v2 + v8) == *((unsigned __int8 *)v4 + v8))
        {
          if (v6 == ++v8) {
            return v2;
          }
        }
      }
    }
    v2 += 48;
  }
  while (v2 != v3);
  return v3;
}

double sub_EF8274(uint64_t a1, unsigned int *a2, unsigned __int8 *a3, int a4, double a5, double a6, double a7)
{
  double result = -1.0;
  if (!a2) {
    return result;
  }
  unint64_t v8 = *a2;
  if (!v8) {
    return result;
  }
  if (v8 == 1)
  {
    if (!*(unsigned char *)(a1 + 3874))
    {
      LOWORD(result) = *((_WORD *)a2 + 3);
      return (double)*(unint64_t *)&result / 100.0;
    }
    return result;
  }
  signed int v9 = (unsigned __int16)(1440 * (*a3 + 6 - 7 * ((9363 * (*a3 + 6)) >> 16))) + a4;
  uint64_t v10 = (unsigned __int16 *)(a2 + 1);
  uint64_t v11 = 2 * v8;
  int v12 = (unsigned __int16 *)(a2 + 1);
  do
  {
    uint64_t v13 = (unsigned __int16 *)((char *)v12 + ((2 * v8) & 0x3FFFFFFFCLL));
    unsigned int v15 = *v13;
    long long v14 = v13 + 2;
    unint64_t v16 = v8 >> 1;
    v8 += ~(v8 >> 1);
    if (v9 < v15) {
      unint64_t v8 = v16;
    }
    else {
      int v12 = v14;
    }
  }
  while (v8);
  uint64_t v17 = &v10[v11];
  if (v12 == &v10[v11])
  {
    uint64_t v18 = v12 - 2;
  }
  else
  {
    if (v12 != v10) {
      uint64_t v17 = v12;
    }
    uint64_t v18 = v17 - 2;
    if (v12 != v10) {
      goto LABEL_19;
    }
  }
  int v12 = (unsigned __int16 *)(a2 + 1);
LABEL_19:
  int v19 = *v18;
  if (v9 < v19) {
    v19 -= 10080;
  }
  int v20 = *v12;
  if (v9 > v20) {
    v20 += 10080;
  }
  LOWORD(result) = v18[1];
  LOWORD(a7) = v12[1];
  return (double)*(unint64_t *)&result / 100.0
       + ((double)*(unint64_t *)&a7 / 100.0 - (double)*(unint64_t *)&result / 100.0)
       * (double)(v9 - v19)
       / (double)(v20 - v19);
}

__n128 *sub_EF83AC(__n128 **a1, uint64_t a2, __n128 *a3)
{
  int v5 = *a1;
  unint64_t v6 = (unint64_t)a1[1];
  uint64_t v7 = a2 - (void)*a1;
  uint64_t v8 = v7 >> 4;
  signed int v9 = (__n128 *)((char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFF0));
  unint64_t v10 = (unint64_t)a1[2];
  if (v6 >= v10)
  {
    unint64_t v30 = ((uint64_t)(v6 - (void)v5) >> 4) + 1;
    if (v30 >> 60) {
      sub_2E00();
    }
    uint64_t v31 = v10 - (void)v5;
    if (v31 >> 3 > v30) {
      unint64_t v30 = v31 >> 3;
    }
    if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v32 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v32 = v30;
    }
    int v49 = a1 + 2;
    if (v32)
    {
      if (v32 >> 60) {
        sub_188D718();
      }
      uint64_t v33 = (__n128 *)operator new(16 * v32);
    }
    else
    {
      uint64_t v33 = 0;
    }
    uint64_t v45 = v33;
    uint64_t v46 = &v33[v8];
    unsigned int v47 = v46;
    BOOL v48 = (char *)&v33[v32];
    sub_EF8694((uint64_t)&v45, a3);
    uint64_t v34 = v46;
    int v35 = *a1;
    uint64_t v36 = v46;
    if (*a1 != v9)
    {
      unint64_t v37 = v9;
      uint64_t v38 = v46;
      do
      {
        uint64_t v36 = v38 - 1;
        v38[-1] = v37[-1];
        --v37;
        --v38;
      }
      while (v37 != v35);
    }
    uint64_t v46 = v36;
    unint64_t v39 = a1[1];
    uint64_t v40 = v47;
    if (v39 != v9)
    {
      do
      {
        __n128 v41 = *v9++;
        *v40++ = v41;
      }
      while (v9 != v39);
      uint64_t v36 = v46;
      signed int v9 = a1[1];
    }
    int v42 = *a1;
    *a1 = v36;
    a1[1] = v40;
    int64_t v43 = (char *)a1[2];
    a1[2] = (__n128 *)v48;
    unsigned int v47 = v9;
    BOOL v48 = v43;
    uint64_t v45 = v42;
    uint64_t v46 = v42;
    if (v9 != v42) {
      unsigned int v47 = (__n128 *)((char *)v9 + (((char *)v42 - (char *)v9 + 15) & 0xFFFFFFFFFFFFFFF0));
    }
    if (v42) {
      operator delete(v42);
    }
    return v34;
  }
  else if (v9 == (__n128 *)v6)
  {
    *signed int v9 = *a3;
    a1[1] = v9 + 1;
  }
  else
  {
    uint64_t v11 = v9 + 1;
    unint64_t v12 = v6 - 16;
    uint64_t v13 = a1[1];
    if (v6 >= 0x10)
    {
      long long v14 = (long long *)(v6 - 16);
      uint64_t v13 = a1[1];
      do
      {
        __n128 v15 = (__n128)*v14++;
        *v13++ = v15;
      }
      while ((unint64_t)v14 < v6);
    }
    a1[1] = v13;
    if ((__n128 *)v6 != v11)
    {
      unint64_t v16 = v6 - (void)v11;
      unint64_t v17 = v6 - (void)v11 - 16;
      if (v17 < 0xD0
        || v6 - (v16 & 0xFFFFFFFFFFFFFFF0) < v12
        && (unint64_t)v5->n128_u64 + v16 + (v7 & 0xFFFFFFFFFFFFFFF0) - (v16 & 0xFFFFFFFFFFFFFFF0) < v6)
      {
        goto LABEL_13;
      }
      uint64_t v18 = (v17 >> 4) + 1;
      uint64_t v19 = 16 * (v18 & 0x1FFFFFFFFFFFFFFCLL);
      unint64_t v20 = v6 - v19;
      unint64_t v21 = v12 - v19;
      int v22 = (_OWORD *)(v6 - 48);
      uint64_t v23 = (_OWORD *)(v6 - 32);
      uint64_t v24 = v18 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        long long v25 = v22[1];
        long long v27 = *(v22 - 2);
        long long v26 = *(v22 - 1);
        _OWORD *v23 = *v22;
        v23[1] = v25;
        *(v23 - 2) = v27;
        *(v23 - 1) = v26;
        v23 -= 4;
        v22 -= 4;
        v24 -= 4;
      }
      while (v24);
      unint64_t v6 = v20;
      unint64_t v12 = v21;
      if (v18 != (v18 & 0x1FFFFFFFFFFFFFFCLL))
      {
LABEL_13:
        uint64_t v28 = (void *)(v6 - 8);
        do
        {
          uint64_t v29 = *(void *)(v12 - 16);
          v12 -= 16;
          *(v28 - 1) = v29;
          *uint64_t v28 = *(void *)(v12 + 8);
          v28 -= 2;
        }
        while ((__n128 *)v12 != v9);
      }
    }
    v9->n128_u64[0] = a3->n128_u64[0];
    v5[v8].n128_u64[1] = a3->n128_u64[1];
  }
  return v9;
}

void sub_EF864C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (a12 == a11)
  {
    uint64_t v13 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v13 = __p;
    if (!__p) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

__n128 sub_EF8694(uint64_t a1, __n128 *a2)
{
  std::string::size_type v4 = *(__n128 **)(a1 + 16);
  if (v4 == *(__n128 **)(a1 + 24))
  {
    int v5 = *(__n128 **)a1;
    unint64_t v6 = *(char **)(a1 + 8);
    if ((unint64_t)v6 > *(void *)a1)
    {
      uint64_t v7 = (uint64_t)&v6[-*(void *)a1] >> 4;
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = v8 >> 1;
      uint64_t v10 = -v9;
      uint64_t v11 = (__n128 *)&v6[-16 * v9];
      if (v6 == (char *)v4) {
        goto LABEL_61;
      }
      unint64_t v12 = (char *)v4 - v6 - 16;
      if (v12 >= 0x210)
      {
        unint64_t v22 = 16 * v10 + (v12 & 0xFFFFFFFFFFFFFFF0);
        uint64_t v23 = v6 + 8;
        uint64_t v24 = &v6[v22 + 8];
        unint64_t v25 = (unint64_t)&v6[16 * v10 + 8];
        unint64_t v26 = (unint64_t)&v6[v22 + 16];
        unint64_t v27 = (unint64_t)&v6[(v12 & 0xFFFFFFFFFFFFFFF0) + 8];
        unint64_t v28 = (unint64_t)&v6[(v12 & 0xFFFFFFFFFFFFFFF0) + 16];
        BOOL v30 = (unint64_t)v11 < v27 && v6 < v24;
        BOOL v32 = (unint64_t)v11 < v28 && v23 < v24;
        BOOL v34 = v25 < v27 && (unint64_t)v6 < v26;
        BOOL v36 = v25 < v28 && (unint64_t)v23 < v26;
        if (v25 >= (unint64_t)v24 || (unint64_t)v11 >= v26)
        {
          if (v30)
          {
            uint64_t v13 = *(__n128 **)(a1 + 8);
          }
          else if (v32)
          {
            uint64_t v13 = *(__n128 **)(a1 + 8);
          }
          else if (v34)
          {
            uint64_t v13 = *(__n128 **)(a1 + 8);
          }
          else if (v36)
          {
            uint64_t v13 = *(__n128 **)(a1 + 8);
          }
          else
          {
            uint64_t v38 = (v12 >> 4) + 1;
            uint64_t v39 = 16 * (v38 & 0x1FFFFFFFFFFFFFFCLL);
            uint64_t v11 = (__n128 *)((char *)v11 + v39);
            uint64_t v13 = (__n128 *)&v6[v39];
            uint64_t v40 = v38 & 0x1FFFFFFFFFFFFFFCLL;
            do
            {
              __n128 v41 = &v6[16 * v10];
              long long v42 = *((_OWORD *)v6 + 1);
              long long v44 = *((_OWORD *)v6 + 2);
              long long v43 = *((_OWORD *)v6 + 3);
              *(_OWORD *)__n128 v41 = *(_OWORD *)v6;
              *((_OWORD *)v41 + 1) = v42;
              *((_OWORD *)v41 + 2) = v44;
              *((_OWORD *)v41 + 3) = v43;
              v6 += 64;
              v40 -= 4;
            }
            while (v40);
            if (v38 == (v38 & 0x1FFFFFFFFFFFFFFCLL)) {
              goto LABEL_60;
            }
          }
        }
        else
        {
          uint64_t v13 = *(__n128 **)(a1 + 8);
        }
      }
      else
      {
        uint64_t v13 = *(__n128 **)(a1 + 8);
      }
      do
      {
        v11->n128_u64[0] = v13->n128_u64[0];
        v11->n128_u64[1] = v13->n128_u64[1];
        ++v11;
        ++v13;
      }
      while (v13 != v4);
LABEL_60:
      std::string::size_type v4 = *(__n128 **)(a1 + 8);
LABEL_61:
      *(void *)(a1 + 8) = &v4[v10];
      *(void *)(a1 + 16) = v11;
      std::string::size_type v4 = v11;
      goto LABEL_62;
    }
    if (v4 == v5) {
      unint64_t v14 = 1;
    }
    else {
      unint64_t v14 = ((char *)v4 - (char *)v5) >> 3;
    }
    if (v14 >> 60) {
      sub_188D718();
    }
    __n128 v15 = (char *)operator new(16 * v14);
    unint64_t v16 = (__n128 *)&v15[16 * (v14 >> 2)];
    uint64_t v18 = (char *)v4 - v6;
    BOOL v17 = v4 == (__n128 *)v6;
    std::string::size_type v4 = v16;
    if (!v17)
    {
      std::string::size_type v4 = (__n128 *)((char *)v16 + (v18 & 0xFFFFFFFFFFFFFFF0));
      uint64_t v19 = 16 * (v18 >> 4);
      unint64_t v20 = &v15[16 * (v14 >> 2)];
      do
      {
        long long v21 = *(_OWORD *)v6;
        v6 += 16;
        *(_OWORD *)unint64_t v20 = v21;
        v20 += 16;
        v19 -= 16;
      }
      while (v19);
    }
    *(void *)a1 = v15;
    *(void *)(a1 + 8) = v16;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = &v15[16 * v14];
    if (v5)
    {
      operator delete(v5);
      std::string::size_type v4 = *(__n128 **)(a1 + 16);
    }
  }
LABEL_62:
  __n128 result = *a2;
  *std::string::size_type v4 = *a2;
  *(void *)(a1 + 16) += 16;
  return result;
}

uint64_t sub_EF88C8(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v9 = result;
LABEL_2:
  uint64_t v10 = (uint64_t *)(a2 - 8);
  unint64_t v11 = v9;
  while (1)
  {
    unint64_t v9 = v11;
    uint64_t v12 = a2 - v11;
    uint64_t v13 = (uint64_t)(a2 - v11) >> 4;
    if (v5 || !v4)
    {
      switch(v13)
      {
        case 0:
        case 1:
          return result;
        case 2:
          double v105 = *(double *)(a2 - 16);
          double v106 = *(double *)v11;
          if (v105 < *(double *)v11)
          {
            *(double *)unint64_t v11 = v105;
            *(double *)(a2 - 16) = v106;
            uint64_t v107 = *(void *)(v11 + 8);
            *(void *)(v11 + 8) = *(void *)(a2 - 8);
            *(void *)(a2 - 8) = v107;
          }
          return result;
        case 3:
          double v108 = *(double *)(v11 + 16);
          double v109 = *(double *)v11;
          double v110 = *(double *)(a2 - 16);
          if (v108 >= *(double *)v11)
          {
            if (v110 >= v108) {
              return result;
            }
            *(double *)(v11 + 16) = v110;
            *(double *)(a2 - 16) = v108;
            uint64_t v10 = (uint64_t *)(v11 + 24);
            uint64_t v162 = *(void *)(v11 + 24);
            *(void *)(v11 + 24) = *(void *)(a2 - 8);
            *(void *)(a2 - 8) = v162;
            double v163 = *(double *)(v11 + 16);
            double v164 = *(double *)v11;
            if (v163 >= *(double *)v11) {
              return result;
            }
            *(double *)unint64_t v11 = v163;
            *(double *)(v11 + 16) = v164;
            unsigned int v111 = (uint64_t *)(v11 + 8);
          }
          else
          {
            if (v110 >= v108)
            {
              *(double *)unint64_t v11 = v108;
              unsigned int v111 = (uint64_t *)(v11 + 24);
              uint64_t v173 = *(void *)(v11 + 24);
              *(double *)(v11 + 16) = v109;
              uint64_t v174 = *(void *)(v11 + 8);
              *(void *)(v11 + 8) = v173;
              *(void *)(v11 + 24) = v174;
              double v175 = *(double *)(a2 - 16);
              if (v175 >= v109) {
                return result;
              }
              *(double *)(v11 + 16) = v175;
            }
            else
            {
              unsigned int v111 = (uint64_t *)(v11 + 8);
              *(double *)unint64_t v11 = v110;
            }
            *(double *)(a2 - 16) = v109;
          }
          uint64_t v176 = *v111;
          *unsigned int v111 = *v10;
          *uint64_t v10 = v176;
          return result;
        case 4:
          return (uint64_t)sub_EF9800((void *)v11, v11 + 16, v11 + 32, (void *)(a2 - 16));
        case 5:
          __n128 result = (uint64_t)sub_EF9800((void *)v11, v11 + 16, v11 + 32, (void *)(v11 + 48));
          double v112 = *(double *)(a2 - 16);
          double v113 = *(double *)(v11 + 48);
          if (v112 < v113)
          {
            *(double *)(v11 + 48) = v112;
            *(double *)(a2 - 16) = v113;
            uint64_t v114 = *(void *)(v11 + 56);
            *(void *)(v11 + 56) = *(void *)(a2 - 8);
            *(void *)(a2 - 8) = v114;
            double v115 = *(double *)(v11 + 48);
            double v116 = *(double *)(v11 + 32);
            if (v115 < v116)
            {
              *(double *)(v11 + 32) = v115;
              *(double *)(v11 + 48) = v116;
              uint64_t v117 = *(void *)(v11 + 40);
              uint64_t v118 = *(void *)(v11 + 56);
              *(void *)(v11 + 40) = v118;
              *(void *)(v11 + 56) = v117;
              double v119 = *(double *)(v11 + 16);
              if (v115 < v119)
              {
                *(double *)(v11 + 16) = v115;
                *(double *)(v11 + 32) = v119;
                uint64_t v120 = *(void *)(v11 + 24);
                *(void *)(v11 + 24) = v118;
                *(void *)(v11 + 40) = v120;
                double v121 = *(double *)v11;
                if (v115 < *(double *)v11)
                {
                  *(double *)unint64_t v11 = v115;
                  *(double *)(v11 + 16) = v121;
                  uint64_t v122 = *(void *)(v11 + 8);
                  *(void *)(v11 + 8) = v118;
                  *(void *)(v11 + 24) = v122;
                }
              }
            }
          }
          return result;
        default:
          JUMPOUT(0);
      }
    }
    if (v12 <= 383) {
      break;
    }
    if (!a3)
    {
      if (v11 != a2)
      {
        int64_t v135 = (unint64_t)(v13 - 2) >> 1;
        int64_t v136 = v135;
        do
        {
          if (v135 >= v136)
          {
            uint64_t v138 = (2 * v136) | 1;
            unint64_t v139 = v11 + 16 * v138;
            if (2 * v136 + 2 < v13 && *(double *)v139 < *(double *)(v139 + 16))
            {
              v139 += 16;
              uint64_t v138 = 2 * v136 + 2;
            }
            unint64_t v140 = v11 + 16 * v136;
            double v141 = *(double *)v139;
            double v142 = *(double *)v140;
            if (*(double *)v139 >= *(double *)v140)
            {
              uint64_t v143 = *(void *)(v140 + 8);
              do
              {
                uint64_t v144 = (double *)v140;
                unint64_t v140 = v139;
                *uint64_t v144 = v141;
                v144[1] = *(double *)(v139 + 8);
                if (v135 < v138) {
                  break;
                }
                uint64_t v145 = 2 * v138;
                uint64_t v138 = (2 * v138) | 1;
                unint64_t v139 = v11 + 16 * v138;
                uint64_t v146 = v145 + 2;
                if (v146 < v13 && *(double *)v139 < *(double *)(v139 + 16))
                {
                  v139 += 16;
                  uint64_t v138 = v146;
                }
                double v141 = *(double *)v139;
              }
              while (*(double *)v139 >= v142);
              *(double *)unint64_t v140 = v142;
              *(void *)(v140 + 8) = v143;
            }
          }
          BOOL v137 = v136-- <= 0;
        }
        while (!v137);
        uint64_t v147 = (unint64_t)v12 >> 4;
        do
        {
          uint64_t v148 = 0;
          double v149 = *(double *)v11;
          uint64_t v150 = *(void *)(v11 + 8);
          uint64_t v151 = (void *)v11;
          do
          {
            int v152 = v151;
            v151 += 2 * v148 + 2;
            uint64_t v153 = 2 * v148;
            uint64_t v148 = (2 * v148) | 1;
            uint64_t v154 = v153 + 2;
            if (v154 < v147 && *(double *)v151 < *((double *)v151 + 2))
            {
              v151 += 2;
              uint64_t v148 = v154;
            }
            *int v152 = *v151;
            v152[1] = v151[1];
          }
          while (v148 <= (uint64_t)((unint64_t)(v147 - 2) >> 1));
          if (v151 == (void *)(a2 - 16))
          {
            *(double *)uint64_t v151 = v149;
            v151[1] = v150;
          }
          else
          {
            *uint64_t v151 = *(void *)(a2 - 16);
            v151[1] = *(void *)(a2 - 8);
            *(double *)(a2 - 16) = v149;
            *(void *)(a2 - 8) = v150;
            uint64_t v155 = (uint64_t)v151 - v11 + 16;
            if (v155 >= 17)
            {
              unint64_t v156 = (((unint64_t)v155 >> 4) - 2) >> 1;
              char v157 = (double *)(v11 + 16 * v156);
              double v158 = *v157;
              double v159 = *(double *)v151;
              if (*v157 < *(double *)v151)
              {
                uint64_t v160 = v151[1];
                do
                {
                  char v161 = (double *)v151;
                  uint64_t v151 = v157;
                  *char v161 = v158;
                  v161[1] = v157[1];
                  if (!v156) {
                    break;
                  }
                  unint64_t v156 = (v156 - 1) >> 1;
                  char v157 = (double *)(v11 + 16 * v156);
                  double v158 = *v157;
                }
                while (*v157 < v159);
                *(double *)uint64_t v151 = v159;
                v151[1] = v160;
              }
            }
          }
          a2 -= 16;
          BOOL v137 = v147-- <= 2;
        }
        while (!v137);
      }
      return result;
    }
    unint64_t v14 = (unint64_t)v13 >> 1;
    __n128 v15 = (double *)(v11 + 16 * ((unint64_t)v13 >> 1));
    double v16 = *(double *)(a2 - 16);
    if ((unint64_t)v12 >= 0x801)
    {
      double v17 = *v15;
      double v18 = *(double *)v11;
      if (*v15 >= *(double *)v11)
      {
        if (v16 < v17)
        {
          *__n128 v15 = v16;
          *(double *)(a2 - 16) = v17;
          unint64_t v23 = v11 + 16 * v14;
          uint64_t v25 = *(void *)(v23 + 8);
          uint64_t v24 = (void *)(v23 + 8);
          *uint64_t v24 = *(void *)(a2 - 8);
          *(void *)(a2 - 8) = v25;
          double v26 = *(double *)v11;
          if (*v15 < *(double *)v11)
          {
            *(double *)unint64_t v11 = *v15;
            uint64_t v19 = (void *)(v11 + 8);
            *__n128 v15 = v26;
            goto LABEL_23;
          }
        }
      }
      else
      {
        if (v16 < v17)
        {
          uint64_t v19 = (void *)(v11 + 8);
          *(double *)unint64_t v11 = v16;
          goto LABEL_22;
        }
        *(double *)unint64_t v11 = v17;
        *__n128 v15 = v18;
        uint64_t v30 = *(void *)(v11 + 8);
        uint64_t v19 = (void *)(v11 + 8 + 16 * v14);
        *(void *)(v11 + 8) = *v19;
        *uint64_t v19 = v30;
        double v31 = *(double *)(a2 - 16);
        if (v31 < v18)
        {
          *__n128 v15 = v31;
LABEL_22:
          *(double *)(a2 - 16) = v18;
          uint64_t v24 = (void *)(a2 - 8);
LABEL_23:
          uint64_t v32 = *v19;
          *uint64_t v19 = *v24;
          *uint64_t v24 = v32;
        }
      }
      unint64_t v33 = v14 - 1;
      BOOL v34 = (double *)(v11 + 16 * (v14 - 1));
      double v35 = *v34;
      double v36 = *(double *)(v11 + 16);
      double v37 = *(double *)(a2 - 32);
      if (*v34 >= v36)
      {
        if (v37 < v35)
        {
          *BOOL v34 = v37;
          *(double *)(a2 - 32) = v35;
          unint64_t v39 = v11 + 16 * v33;
          uint64_t v41 = *(void *)(v39 + 8);
          uint64_t v40 = (uint64_t *)(v39 + 8);
          *uint64_t v40 = *(void *)(a2 - 24);
          *(void *)(a2 - 24) = v41;
          double v42 = *(double *)(v11 + 16);
          if (*v34 < v42)
          {
            *(double *)(v11 + 16) = *v34;
            *BOOL v34 = v42;
            uint64_t v38 = (uint64_t *)(v11 + 24);
            goto LABEL_36;
          }
        }
      }
      else
      {
        if (v37 < v35)
        {
          uint64_t v38 = (uint64_t *)(v11 + 24);
          *(double *)(v11 + 16) = v37;
          goto LABEL_35;
        }
        *(double *)(v11 + 16) = v35;
        unint64_t v46 = v11 + 16 * v33;
        uint64_t v47 = *(void *)(v46 + 8);
        uint64_t v38 = (uint64_t *)(v46 + 8);
        *BOOL v34 = v36;
        uint64_t v48 = *(void *)(v11 + 24);
        *(void *)(v11 + 24) = v47;
        *uint64_t v38 = v48;
        double v49 = *(double *)(a2 - 32);
        if (v49 < v36)
        {
          *BOOL v34 = v49;
LABEL_35:
          *(double *)(a2 - 32) = v36;
          uint64_t v40 = (uint64_t *)(a2 - 24);
LABEL_36:
          uint64_t v50 = *v38;
          *uint64_t v38 = *v40;
          *uint64_t v40 = v50;
        }
      }
      unint64_t v51 = v14 + 1;
      BOOL v52 = (double *)(v11 + 16 * (v14 + 1));
      double v53 = *v52;
      double v54 = *(double *)(v11 + 32);
      double v55 = *(double *)(a2 - 48);
      if (*v52 >= v54)
      {
        if (v55 < v53)
        {
          *BOOL v52 = v55;
          *(double *)(a2 - 48) = v53;
          unint64_t v57 = v11 + 16 * v51;
          uint64_t v59 = *(void *)(v57 + 8);
          unsigned int v58 = (uint64_t *)(v57 + 8);
          *unsigned int v58 = *(void *)(a2 - 40);
          *(void *)(a2 - 40) = v59;
          double v53 = *v52;
          double v60 = *(double *)(v11 + 32);
          if (*v52 < v60)
          {
            *(double *)(v11 + 32) = v53;
            *BOOL v52 = v60;
            unint64_t v56 = (uint64_t *)(v11 + 40);
            goto LABEL_46;
          }
        }
LABEL_47:
        double v66 = *v15;
        double v67 = *v34;
        if (*v15 >= *v34) {
          goto LABEL_54;
        }
      }
      else
      {
        if (v55 < v53)
        {
          unint64_t v56 = (uint64_t *)(v11 + 40);
          *(double *)(v11 + 32) = v55;
          goto LABEL_45;
        }
        *(double *)(v11 + 32) = v53;
        unint64_t v61 = v11 + 16 * v51;
        uint64_t v62 = *(void *)(v61 + 8);
        unint64_t v56 = (uint64_t *)(v61 + 8);
        *BOOL v52 = v54;
        uint64_t v63 = *(void *)(v11 + 40);
        *(void *)(v11 + 40) = v62;
        *unint64_t v56 = v63;
        double v64 = *(double *)(a2 - 48);
        if (v64 < v54)
        {
          *BOOL v52 = v64;
LABEL_45:
          *(double *)(a2 - 48) = v54;
          unsigned int v58 = (uint64_t *)(a2 - 40);
LABEL_46:
          uint64_t v65 = *v56;
          *unint64_t v56 = *v58;
          *unsigned int v58 = v65;
          double v53 = *v52;
          goto LABEL_47;
        }
        double v53 = v54;
        double v66 = *v15;
        double v67 = *v34;
        if (*v15 >= *v34)
        {
LABEL_54:
          if (v53 < v66)
          {
            *__n128 v15 = v53;
            unint64_t v74 = v11 + 16 * v14;
            uint64_t v75 = *(void *)(v74 + 8);
            unsigned int v69 = (uint64_t *)(v74 + 8);
            *BOOL v52 = v66;
            unint64_t v76 = v11 + 16 * v51;
            *unsigned int v69 = *(void *)(v76 + 8);
            *(void *)(v76 + 8) = v75;
            if (v53 >= v67)
            {
              double v66 = v53;
              goto LABEL_59;
            }
            *BOOL v34 = v53;
            *__n128 v15 = v67;
            uint64_t v68 = (uint64_t *)(v11 + 16 * v33 + 8);
LABEL_58:
            uint64_t v77 = *v68;
            *uint64_t v68 = *v69;
            *unsigned int v69 = v77;
            double v66 = *v15;
            goto LABEL_59;
          }
          goto LABEL_59;
        }
      }
      uint64_t v68 = (uint64_t *)(v11 + 16 * v33 + 8);
      if (v53 < v66)
      {
        *BOOL v34 = v53;
        *BOOL v52 = v67;
        unsigned int v69 = (uint64_t *)(v11 + 16 * v51 + 8);
        goto LABEL_58;
      }
      *BOOL v34 = v66;
      *__n128 v15 = v67;
      unint64_t v70 = v11 + 16 * v14;
      uint64_t v72 = *(void *)(v70 + 8);
      unsigned int v71 = (uint64_t *)(v70 + 8);
      uint64_t v73 = *v68;
      *uint64_t v68 = v72;
      *unsigned int v71 = v73;
      if (v53 < v67)
      {
        *__n128 v15 = v53;
        *BOOL v52 = v67;
        unsigned int v69 = (uint64_t *)(v11 + 16 * v51 + 8);
        uint64_t v68 = v71;
        goto LABEL_58;
      }
      double v66 = v67;
LABEL_59:
      double v78 = *(double *)v11;
      *(double *)unint64_t v11 = v66;
      unint64_t v22 = (uint64_t *)(v11 + 8);
      *__n128 v15 = v78;
      unint64_t v28 = (uint64_t *)(v11 + 8 + 16 * v14);
      goto LABEL_60;
    }
    double v20 = *(double *)v11;
    double v21 = *v15;
    if (*(double *)v11 >= *v15)
    {
      if (v16 >= v20) {
        goto LABEL_61;
      }
      *(double *)unint64_t v11 = v16;
      *(double *)(a2 - 16) = v20;
      unint64_t v28 = (uint64_t *)(v11 + 8);
      uint64_t v27 = *(void *)(v11 + 8);
      *(void *)(v11 + 8) = *(void *)(a2 - 8);
      *(void *)(a2 - 8) = v27;
      double v29 = *v15;
      if (*(double *)v11 >= *v15) {
        goto LABEL_61;
      }
      *__n128 v15 = *(double *)v11;
      *(double *)unint64_t v11 = v29;
      unint64_t v22 = (uint64_t *)(v11 + 16 * v14 + 8);
    }
    else
    {
      unint64_t v22 = (uint64_t *)(v11 + 16 * v14 + 8);
      if (v16 >= v20)
      {
        *__n128 v15 = v20;
        uint64_t v43 = *(void *)(v11 + 8);
        *(double *)unint64_t v11 = v21;
        uint64_t v44 = *v22;
        *unint64_t v22 = v43;
        *(void *)(v11 + 8) = v44;
        double v45 = *(double *)(a2 - 16);
        if (v45 >= v21) {
          goto LABEL_61;
        }
        *(double *)unint64_t v11 = v45;
        *(double *)(a2 - 16) = v21;
        unint64_t v22 = (uint64_t *)(v11 + 8);
      }
      else
      {
        *__n128 v15 = v16;
        *(double *)(a2 - 16) = v21;
      }
      unint64_t v28 = (uint64_t *)(a2 - 8);
    }
LABEL_60:
    uint64_t v79 = *v22;
    *unint64_t v22 = *v28;
    *unint64_t v28 = v79;
LABEL_61:
    --a3;
    double v80 = *(double *)v11;
    if ((a4 & 1) != 0 || *(double *)(v11 - 16) < v80)
    {
      uint64_t v81 = 0;
      uint64_t v82 = *(void *)(v11 + 8);
      do
      {
        double v83 = *(double *)(v11 + v81 + 16);
        v81 += 16;
      }
      while (v83 < v80);
      unint64_t v84 = v11 + v81;
      unsigned int v85 = (double *)a2;
      if (v81 == 16)
      {
        unsigned int v85 = (double *)a2;
        do
        {
          if (v84 >= (unint64_t)v85) {
            break;
          }
          double v87 = *(v85 - 2);
          v85 -= 2;
        }
        while (v87 >= v80);
      }
      else
      {
        do
        {
          double v86 = *(v85 - 2);
          v85 -= 2;
        }
        while (v86 >= v80);
      }
      if (v84 >= (unint64_t)v85)
      {
        v11 += v81;
        uint64_t v93 = v84 - 16;
        if (v84 - 16 != v9) {
          goto LABEL_78;
        }
      }
      else
      {
        double v88 = *v85;
        v11 += v81;
        uint64_t v89 = v85;
        do
        {
          *(double *)unint64_t v11 = v88;
          *uint64_t v89 = v83;
          uint64_t v90 = *(void *)(v11 + 8);
          *(double *)(v11 + 8) = v89[1];
          *((void *)v89 + 1) = v90;
          do
          {
            double v91 = *(double *)(v11 + 16);
            v11 += 16;
            double v83 = v91;
          }
          while (v91 < v80);
          do
          {
            double v92 = *(v89 - 2);
            v89 -= 2;
            double v88 = v92;
          }
          while (v92 >= v80);
        }
        while (v11 < (unint64_t)v89);
        uint64_t v93 = v11 - 16;
        if (v11 - 16 != v9)
        {
LABEL_78:
          *(void *)unint64_t v9 = *(void *)(v11 - 16);
          *(void *)(v9 + 8) = *(void *)(v11 - 8);
        }
      }
      *(double *)(v11 - 16) = v80;
      *(void *)(v11 - 8) = v82;
      if (v84 < (unint64_t)v85) {
        goto LABEL_82;
      }
      BOOL v94 = sub_EF9460(v9, v93);
      __n128 result = sub_EF9460(v11, a2);
      if (result)
      {
        a2 = v93;
        if (v94) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v94)
      {
LABEL_82:
        __n128 result = sub_EF88C8(v9, v93, a3, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      if (v80 < *(double *)(a2 - 16))
      {
        do
        {
          double v95 = *(double *)(v11 + 16);
          v11 += 16;
        }
        while (v80 >= v95);
      }
      else
      {
        unint64_t v96 = v11 + 16;
        do
        {
          unint64_t v11 = v96;
          if (v96 >= a2) {
            break;
          }
          v96 += 16;
        }
        while (v80 >= *(double *)v11);
      }
      unint64_t v97 = (double *)a2;
      if (v11 < a2)
      {
        unint64_t v97 = (double *)a2;
        do
        {
          double v98 = *(v97 - 2);
          v97 -= 2;
        }
        while (v80 < v98);
      }
      uint64_t v99 = *(void *)(v9 + 8);
      if (v11 < (unint64_t)v97)
      {
        double v100 = *(double *)v11;
        double v101 = *v97;
        do
        {
          *(double *)unint64_t v11 = v101;
          *unint64_t v97 = v100;
          uint64_t v102 = *(void *)(v11 + 8);
          *(double *)(v11 + 8) = v97[1];
          *((void *)v97 + 1) = v102;
          do
          {
            double v103 = *(double *)(v11 + 16);
            v11 += 16;
            double v100 = v103;
          }
          while (v80 >= v103);
          do
          {
            double v104 = *(v97 - 2);
            v97 -= 2;
            double v101 = v104;
          }
          while (v80 < v104);
        }
        while (v11 < (unint64_t)v97);
      }
      BOOL v4 = v11 - 16 >= v9;
      BOOL v5 = v11 - 16 == v9;
      if (v11 - 16 != v9)
      {
        *(void *)unint64_t v9 = *(void *)(v11 - 16);
        *(void *)(v9 + 8) = *(void *)(v11 - 8);
      }
      a4 = 0;
      *(double *)(v11 - 16) = v80;
      *(void *)(v11 - 8) = v99;
    }
  }
  unint64_t v123 = v11 + 16;
  BOOL v125 = v11 == a2 || v123 == a2;
  if (a4)
  {
    if (!v125)
    {
      uint64_t v126 = 0;
      unint64_t v127 = v11;
      do
      {
        unint64_t v129 = v123;
        double v130 = *(double *)(v127 + 16);
        double v131 = *(double *)v127;
        if (v130 < *(double *)v127)
        {
          uint64_t v132 = *(void *)(v127 + 24);
          uint64_t v133 = v126;
          do
          {
            uint64_t v134 = v11 + v133;
            *(double *)(v134 + 16) = v131;
            *(void *)(v134 + 24) = *(void *)(v11 + v133 + 8);
            if (!v133)
            {
              uint64_t v128 = v11;
              goto LABEL_129;
            }
            double v131 = *(double *)(v134 - 16);
            v133 -= 16;
          }
          while (v130 < v131);
          uint64_t v128 = v11 + v133 + 16;
LABEL_129:
          *(double *)uint64_t v128 = v130;
          *(void *)(v128 + 8) = v132;
        }
        unint64_t v123 = v129 + 16;
        v126 += 16;
        unint64_t v127 = v129;
      }
      while (v129 + 16 != a2);
    }
  }
  else if (!v125)
  {
    uint64_t v165 = (double *)(v11 + 24);
    do
    {
      unint64_t v166 = v123;
      double v167 = *(double *)(v9 + 16);
      double v168 = *(double *)v9;
      if (v167 < *(double *)v9)
      {
        uint64_t v169 = *(void *)(v9 + 24);
        int v170 = v165;
        do
        {
          BOOL v171 = v170;
          *(v170 - 1) = v168;
          uint64_t v172 = *((void *)v170 - 2);
          v170 -= 2;
          *(void *)BOOL v171 = v172;
          double v168 = *(v171 - 5);
        }
        while (v167 < v168);
        *(v170 - 1) = v167;
        *(void *)int v170 = v169;
      }
      unint64_t v123 = v166 + 16;
      v165 += 2;
      unint64_t v9 = v166;
    }
    while (v166 + 16 != a2);
  }
  return result;
}

BOOL sub_EF9460(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      double v6 = *(double *)(a2 - 16);
      double v7 = *(double *)a1;
      if (v6 < *(double *)a1)
      {
        *(double *)a1 = v6;
        *(double *)(a2 - 16) = v7;
        uint64_t v8 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = *(void *)(a2 - 8);
        *(void *)(a2 - 8) = v8;
      }
      return result;
    case 3:
      double v9 = *(double *)(a1 + 16);
      double v10 = *(double *)a1;
      double v11 = *(double *)(a2 - 16);
      if (v9 < *(double *)a1)
      {
        if (v11 >= v9)
        {
          *(double *)a1 = v9;
          uint64_t v12 = (uint64_t *)(a1 + 24);
          uint64_t v35 = *(void *)(a1 + 24);
          *(double *)(a1 + 16) = v10;
          uint64_t v36 = *(void *)(a1 + 8);
          *(void *)(a1 + 8) = v35;
          *(void *)(a1 + 24) = v36;
          double v37 = *(double *)(a2 - 16);
          if (v37 >= v10) {
            return result;
          }
          *(double *)(a1 + 16) = v37;
        }
        else
        {
          uint64_t v12 = (uint64_t *)(a1 + 8);
          *(double *)a1 = v11;
        }
        *(double *)(a2 - 16) = v10;
        uint64_t v30 = (uint64_t *)(a2 - 8);
        goto LABEL_27;
      }
      if (v11 < v9)
      {
        *(double *)(a1 + 16) = v11;
        *(double *)(a2 - 16) = v9;
        uint64_t v30 = (uint64_t *)(a1 + 24);
        uint64_t v29 = *(void *)(a1 + 24);
        *(void *)(a1 + 24) = *(void *)(a2 - 8);
        *(void *)(a2 - 8) = v29;
        double v31 = *(double *)(a1 + 16);
        double v32 = *(double *)a1;
        if (v31 < *(double *)a1)
        {
          *(double *)a1 = v31;
          *(double *)(a1 + 16) = v32;
          uint64_t v12 = (uint64_t *)(a1 + 8);
LABEL_27:
          uint64_t v38 = *v12;
          uint64_t *v12 = *v30;
          *uint64_t v30 = v38;
          return result;
        }
      }
      return result;
    case 4:
      sub_EF9800((void *)a1, a1 + 16, a1 + 32, (void *)(a2 - 16));
      return 1;
    case 5:
      sub_EF9800((void *)a1, a1 + 16, a1 + 32, (void *)(a1 + 48));
      double v18 = *(double *)(a2 - 16);
      double v19 = *(double *)(a1 + 48);
      if (v18 >= v19) {
        return 1;
      }
      *(double *)(a1 + 48) = v18;
      *(double *)(a2 - 16) = v19;
      uint64_t v20 = *(void *)(a1 + 56);
      *(void *)(a1 + 56) = *(void *)(a2 - 8);
      *(void *)(a2 - 8) = v20;
      double v21 = *(double *)(a1 + 48);
      double v22 = *(double *)(a1 + 32);
      if (v21 >= v22) {
        return 1;
      }
      *(double *)(a1 + 32) = v21;
      *(double *)(a1 + 48) = v22;
      uint64_t v23 = *(void *)(a1 + 40);
      uint64_t v24 = *(void *)(a1 + 56);
      *(void *)(a1 + 40) = v24;
      *(void *)(a1 + 56) = v23;
      double v25 = *(double *)(a1 + 16);
      if (v21 >= v25) {
        return 1;
      }
      *(double *)(a1 + 16) = v21;
      *(double *)(a1 + 32) = v25;
      uint64_t v26 = *(void *)(a1 + 24);
      *(void *)(a1 + 24) = v24;
      *(void *)(a1 + 40) = v26;
      double v27 = *(double *)a1;
      if (v21 >= *(double *)a1) {
        return 1;
      }
      *(double *)a1 = v21;
      *(double *)(a1 + 16) = v27;
      uint64_t v28 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = v24;
      *(void *)(a1 + 24) = v28;
      return 1;
    default:
      uint64_t v13 = (double *)(a1 + 32);
      double v14 = *(double *)(a1 + 32);
      double v15 = *(double *)(a1 + 16);
      double v16 = *(double *)a1;
      if (v15 < *(double *)a1)
      {
        if (v14 >= v15)
        {
          *(double *)a1 = v15;
          *(double *)(a1 + 16) = v16;
          double v17 = (uint64_t *)(a1 + 24);
          uint64_t v39 = *(void *)(a1 + 8);
          *(void *)(a1 + 8) = *(void *)(a1 + 24);
          *(void *)(a1 + 24) = v39;
          if (v14 >= v16) {
            goto LABEL_32;
          }
          *(double *)(a1 + 16) = v14;
        }
        else
        {
          double v17 = (uint64_t *)(a1 + 8);
          *(double *)a1 = v14;
        }
        *(double *)(a1 + 32) = v16;
        BOOL v34 = (uint64_t *)(a1 + 40);
        goto LABEL_31;
      }
      if (v14 < v15)
      {
        BOOL v34 = (uint64_t *)(a1 + 24);
        uint64_t v33 = *(void *)(a1 + 24);
        *(double *)(a1 + 16) = v14;
        *(double *)(a1 + 32) = v15;
        *(void *)(a1 + 24) = *(void *)(a1 + 40);
        *(void *)(a1 + 40) = v33;
        if (v14 < v16)
        {
          *(double *)a1 = v14;
          *(double *)(a1 + 16) = v16;
          double v17 = (uint64_t *)(a1 + 8);
LABEL_31:
          uint64_t v40 = *v17;
          *double v17 = *v34;
          *BOOL v34 = v40;
        }
      }
LABEL_32:
      uint64_t v41 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v42 = 0;
      int v43 = 0;
      while (1)
      {
        double v44 = *(double *)v41;
        double v45 = *v13;
        if (*(double *)v41 < *v13) {
          break;
        }
LABEL_41:
        uint64_t v13 = (double *)v41;
        v42 += 16;
        v41 += 16;
        if (v41 == a2) {
          return 1;
        }
      }
      uint64_t v46 = *(void *)(v41 + 8);
      uint64_t v47 = v42;
      do
      {
        uint64_t v48 = a1 + v47;
        *(double *)(v48 + 48) = v45;
        *(void *)(v48 + 56) = *(void *)(a1 + v47 + 40);
        if (v47 == -32)
        {
          *(double *)a1 = v44;
          *(void *)(a1 + 8) = v46;
          if (++v43 != 8) {
            goto LABEL_41;
          }
          return v41 + 16 == a2;
        }
        double v45 = *(double *)(v48 + 16);
        v47 -= 16;
      }
      while (v44 < v45);
      uint64_t v49 = a1 + v47;
      *(double *)(v49 + 48) = v44;
      *(void *)(v49 + 56) = v46;
      if (++v43 != 8) {
        goto LABEL_41;
      }
      return v41 + 16 == a2;
  }
}

void *sub_EF9800(void *result, uint64_t a2, uint64_t a3, void *a4)
{
  double v4 = *(double *)a2;
  double v5 = *(double *)result;
  double v6 = *(double *)a3;
  if (*(double *)a2 >= *(double *)result)
  {
    if (v6 < v4)
    {
      *(double *)a2 = v6;
      *(double *)a3 = v4;
      uint64_t v8 = (uint64_t *)(a2 + 8);
      uint64_t v9 = *(void *)(a2 + 8);
      *(void *)(a2 + 8) = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = v9;
      double v10 = *(double *)result;
      if (*(double *)a2 < *(double *)result)
      {
        *BOOL result = *(void *)a2;
        double v7 = result + 1;
        *(double *)a2 = v10;
        goto LABEL_9;
      }
    }
  }
  else
  {
    if (v6 < v4)
    {
      double v7 = result + 1;
      *(double *)BOOL result = v6;
      *(double *)a3 = v5;
      uint64_t v8 = (uint64_t *)(a3 + 8);
LABEL_9:
      uint64_t v13 = *v7;
      *double v7 = *v8;
      *uint64_t v8 = v13;
      goto LABEL_10;
    }
    *(double *)BOOL result = v4;
    *(double *)a2 = v5;
    double v7 = (uint64_t *)(a2 + 8);
    uint64_t v11 = result[1];
    result[1] = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = v11;
    double v12 = *(double *)a2;
    if (*(double *)a3 < *(double *)a2)
    {
      *(void *)a2 = *(void *)a3;
      *(double *)a3 = v12;
      uint64_t v8 = (uint64_t *)(a3 + 8);
      goto LABEL_9;
    }
  }
LABEL_10:
  double v14 = *(double *)a3;
  if (*(double *)a4 < *(double *)a3)
  {
    *(void *)a3 = *a4;
    *(double *)a4 = v14;
    uint64_t v15 = *(void *)(a3 + 8);
    *(void *)(a3 + 8) = a4[1];
    a4[1] = v15;
    double v16 = *(double *)a2;
    if (*(double *)a3 < *(double *)a2)
    {
      *(void *)a2 = *(void *)a3;
      *(double *)a3 = v16;
      uint64_t v17 = *(void *)(a2 + 8);
      *(void *)(a2 + 8) = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = v17;
      double v18 = *(double *)result;
      if (*(double *)a2 < *(double *)result)
      {
        *BOOL result = *(void *)a2;
        *(double *)a2 = v18;
        uint64_t v19 = result[1];
        result[1] = *(void *)(a2 + 8);
        *(void *)(a2 + 8) = v19;
      }
    }
  }
  return result;
}

uint64_t sub_EF9938(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v9 = result;
LABEL_2:
  double v10 = (uint64_t *)(a2 - 8);
  unint64_t v11 = v9;
  while (1)
  {
    unint64_t v9 = v11;
    uint64_t v12 = a2 - v11;
    uint64_t v13 = (uint64_t)(a2 - v11) >> 4;
    if (v5 || !v4)
    {
      switch(v13)
      {
        case 0:
        case 1:
          return result;
        case 2:
          double v105 = *(double *)(a2 - 16);
          double v106 = *(double *)v11;
          if (v105 < *(double *)v11)
          {
            *(double *)unint64_t v11 = v105;
            *(double *)(a2 - 16) = v106;
            uint64_t v107 = *(void *)(v11 + 8);
            *(void *)(v11 + 8) = *(void *)(a2 - 8);
            *(void *)(a2 - 8) = v107;
          }
          return result;
        case 3:
          double v108 = *(double *)(v11 + 16);
          double v109 = *(double *)v11;
          double v110 = *(double *)(a2 - 16);
          if (v108 >= *(double *)v11)
          {
            if (v110 >= v108) {
              return result;
            }
            *(double *)(v11 + 16) = v110;
            *(double *)(a2 - 16) = v108;
            double v10 = (uint64_t *)(v11 + 24);
            uint64_t v162 = *(void *)(v11 + 24);
            *(void *)(v11 + 24) = *(void *)(a2 - 8);
            *(void *)(a2 - 8) = v162;
            double v163 = *(double *)(v11 + 16);
            double v164 = *(double *)v11;
            if (v163 >= *(double *)v11) {
              return result;
            }
            *(double *)unint64_t v11 = v163;
            *(double *)(v11 + 16) = v164;
            unsigned int v111 = (uint64_t *)(v11 + 8);
          }
          else
          {
            if (v110 >= v108)
            {
              *(double *)unint64_t v11 = v108;
              unsigned int v111 = (uint64_t *)(v11 + 24);
              uint64_t v173 = *(void *)(v11 + 24);
              *(double *)(v11 + 16) = v109;
              uint64_t v174 = *(void *)(v11 + 8);
              *(void *)(v11 + 8) = v173;
              *(void *)(v11 + 24) = v174;
              double v175 = *(double *)(a2 - 16);
              if (v175 >= v109) {
                return result;
              }
              *(double *)(v11 + 16) = v175;
            }
            else
            {
              unsigned int v111 = (uint64_t *)(v11 + 8);
              *(double *)unint64_t v11 = v110;
            }
            *(double *)(a2 - 16) = v109;
          }
          uint64_t v176 = *v111;
          *unsigned int v111 = *v10;
          *double v10 = v176;
          return result;
        case 4:
          return (uint64_t)sub_EF9800((void *)v11, v11 + 16, v11 + 32, (void *)(a2 - 16));
        case 5:
          BOOL result = (uint64_t)sub_EF9800((void *)v11, v11 + 16, v11 + 32, (void *)(v11 + 48));
          double v112 = *(double *)(a2 - 16);
          double v113 = *(double *)(v11 + 48);
          if (v112 < v113)
          {
            *(double *)(v11 + 48) = v112;
            *(double *)(a2 - 16) = v113;
            uint64_t v114 = *(void *)(v11 + 56);
            *(void *)(v11 + 56) = *(void *)(a2 - 8);
            *(void *)(a2 - 8) = v114;
            double v115 = *(double *)(v11 + 48);
            double v116 = *(double *)(v11 + 32);
            if (v115 < v116)
            {
              *(double *)(v11 + 32) = v115;
              *(double *)(v11 + 48) = v116;
              uint64_t v117 = *(void *)(v11 + 40);
              uint64_t v118 = *(void *)(v11 + 56);
              *(void *)(v11 + 40) = v118;
              *(void *)(v11 + 56) = v117;
              double v119 = *(double *)(v11 + 16);
              if (v115 < v119)
              {
                *(double *)(v11 + 16) = v115;
                *(double *)(v11 + 32) = v119;
                uint64_t v120 = *(void *)(v11 + 24);
                *(void *)(v11 + 24) = v118;
                *(void *)(v11 + 40) = v120;
                double v121 = *(double *)v11;
                if (v115 < *(double *)v11)
                {
                  *(double *)unint64_t v11 = v115;
                  *(double *)(v11 + 16) = v121;
                  uint64_t v122 = *(void *)(v11 + 8);
                  *(void *)(v11 + 8) = v118;
                  *(void *)(v11 + 24) = v122;
                }
              }
            }
          }
          return result;
        default:
          JUMPOUT(0);
      }
    }
    if (v12 <= 383) {
      break;
    }
    if (!a3)
    {
      if (v11 != a2)
      {
        int64_t v135 = (unint64_t)(v13 - 2) >> 1;
        int64_t v136 = v135;
        do
        {
          if (v135 >= v136)
          {
            uint64_t v138 = (2 * v136) | 1;
            unint64_t v139 = v11 + 16 * v138;
            if (2 * v136 + 2 < v13 && *(double *)v139 < *(double *)(v139 + 16))
            {
              v139 += 16;
              uint64_t v138 = 2 * v136 + 2;
            }
            unint64_t v140 = v11 + 16 * v136;
            double v141 = *(double *)v139;
            double v142 = *(double *)v140;
            if (*(double *)v139 >= *(double *)v140)
            {
              uint64_t v143 = *(void *)(v140 + 8);
              do
              {
                uint64_t v144 = (double *)v140;
                unint64_t v140 = v139;
                *uint64_t v144 = v141;
                v144[1] = *(double *)(v139 + 8);
                if (v135 < v138) {
                  break;
                }
                uint64_t v145 = 2 * v138;
                uint64_t v138 = (2 * v138) | 1;
                unint64_t v139 = v11 + 16 * v138;
                uint64_t v146 = v145 + 2;
                if (v146 < v13 && *(double *)v139 < *(double *)(v139 + 16))
                {
                  v139 += 16;
                  uint64_t v138 = v146;
                }
                double v141 = *(double *)v139;
              }
              while (*(double *)v139 >= v142);
              *(double *)unint64_t v140 = v142;
              *(void *)(v140 + 8) = v143;
            }
          }
          BOOL v137 = v136-- <= 0;
        }
        while (!v137);
        uint64_t v147 = (unint64_t)v12 >> 4;
        do
        {
          uint64_t v148 = 0;
          double v149 = *(double *)v11;
          uint64_t v150 = *(void *)(v11 + 8);
          uint64_t v151 = (void *)v11;
          do
          {
            int v152 = v151;
            v151 += 2 * v148 + 2;
            uint64_t v153 = 2 * v148;
            uint64_t v148 = (2 * v148) | 1;
            uint64_t v154 = v153 + 2;
            if (v154 < v147 && *(double *)v151 < *((double *)v151 + 2))
            {
              v151 += 2;
              uint64_t v148 = v154;
            }
            *int v152 = *v151;
            v152[1] = v151[1];
          }
          while (v148 <= (uint64_t)((unint64_t)(v147 - 2) >> 1));
          if (v151 == (void *)(a2 - 16))
          {
            *(double *)uint64_t v151 = v149;
            v151[1] = v150;
          }
          else
          {
            *uint64_t v151 = *(void *)(a2 - 16);
            v151[1] = *(void *)(a2 - 8);
            *(double *)(a2 - 16) = v149;
            *(void *)(a2 - 8) = v150;
            uint64_t v155 = (uint64_t)v151 - v11 + 16;
            if (v155 >= 17)
            {
              unint64_t v156 = (((unint64_t)v155 >> 4) - 2) >> 1;
              char v157 = (double *)(v11 + 16 * v156);
              double v158 = *v157;
              double v159 = *(double *)v151;
              if (*v157 < *(double *)v151)
              {
                uint64_t v160 = v151[1];
                do
                {
                  char v161 = (double *)v151;
                  uint64_t v151 = v157;
                  *char v161 = v158;
                  v161[1] = v157[1];
                  if (!v156) {
                    break;
                  }
                  unint64_t v156 = (v156 - 1) >> 1;
                  char v157 = (double *)(v11 + 16 * v156);
                  double v158 = *v157;
                }
                while (*v157 < v159);
                *(double *)uint64_t v151 = v159;
                v151[1] = v160;
              }
            }
          }
          a2 -= 16;
          BOOL v137 = v147-- <= 2;
        }
        while (!v137);
      }
      return result;
    }
    unint64_t v14 = (unint64_t)v13 >> 1;
    uint64_t v15 = (double *)(v11 + 16 * ((unint64_t)v13 >> 1));
    double v16 = *(double *)(a2 - 16);
    if ((unint64_t)v12 >= 0x801)
    {
      double v17 = *v15;
      double v18 = *(double *)v11;
      if (*v15 >= *(double *)v11)
      {
        if (v16 < v17)
        {
          *uint64_t v15 = v16;
          *(double *)(a2 - 16) = v17;
          unint64_t v23 = v11 + 16 * v14;
          uint64_t v25 = *(void *)(v23 + 8);
          uint64_t v24 = (void *)(v23 + 8);
          *uint64_t v24 = *(void *)(a2 - 8);
          *(void *)(a2 - 8) = v25;
          double v26 = *(double *)v11;
          if (*v15 < *(double *)v11)
          {
            *(double *)unint64_t v11 = *v15;
            uint64_t v19 = (void *)(v11 + 8);
            *uint64_t v15 = v26;
            goto LABEL_23;
          }
        }
      }
      else
      {
        if (v16 < v17)
        {
          uint64_t v19 = (void *)(v11 + 8);
          *(double *)unint64_t v11 = v16;
          goto LABEL_22;
        }
        *(double *)unint64_t v11 = v17;
        *uint64_t v15 = v18;
        uint64_t v30 = *(void *)(v11 + 8);
        uint64_t v19 = (void *)(v11 + 8 + 16 * v14);
        *(void *)(v11 + 8) = *v19;
        *uint64_t v19 = v30;
        double v31 = *(double *)(a2 - 16);
        if (v31 < v18)
        {
          *uint64_t v15 = v31;
LABEL_22:
          *(double *)(a2 - 16) = v18;
          uint64_t v24 = (void *)(a2 - 8);
LABEL_23:
          uint64_t v32 = *v19;
          *uint64_t v19 = *v24;
          *uint64_t v24 = v32;
        }
      }
      unint64_t v33 = v14 - 1;
      BOOL v34 = (double *)(v11 + 16 * (v14 - 1));
      double v35 = *v34;
      double v36 = *(double *)(v11 + 16);
      double v37 = *(double *)(a2 - 32);
      if (*v34 >= v36)
      {
        if (v37 < v35)
        {
          *BOOL v34 = v37;
          *(double *)(a2 - 32) = v35;
          unint64_t v39 = v11 + 16 * v33;
          uint64_t v41 = *(void *)(v39 + 8);
          uint64_t v40 = (uint64_t *)(v39 + 8);
          *uint64_t v40 = *(void *)(a2 - 24);
          *(void *)(a2 - 24) = v41;
          double v42 = *(double *)(v11 + 16);
          if (*v34 < v42)
          {
            *(double *)(v11 + 16) = *v34;
            *BOOL v34 = v42;
            uint64_t v38 = (uint64_t *)(v11 + 24);
            goto LABEL_36;
          }
        }
      }
      else
      {
        if (v37 < v35)
        {
          uint64_t v38 = (uint64_t *)(v11 + 24);
          *(double *)(v11 + 16) = v37;
          goto LABEL_35;
        }
        *(double *)(v11 + 16) = v35;
        unint64_t v46 = v11 + 16 * v33;
        uint64_t v47 = *(void *)(v46 + 8);
        uint64_t v38 = (uint64_t *)(v46 + 8);
        *BOOL v34 = v36;
        uint64_t v48 = *(void *)(v11 + 24);
        *(void *)(v11 + 24) = v47;
        *uint64_t v38 = v48;
        double v49 = *(double *)(a2 - 32);
        if (v49 < v36)
        {
          *BOOL v34 = v49;
LABEL_35:
          *(double *)(a2 - 32) = v36;
          uint64_t v40 = (uint64_t *)(a2 - 24);
LABEL_36:
          uint64_t v50 = *v38;
          *uint64_t v38 = *v40;
          *uint64_t v40 = v50;
        }
      }
      unint64_t v51 = v14 + 1;
      BOOL v52 = (double *)(v11 + 16 * (v14 + 1));
      double v53 = *v52;
      double v54 = *(double *)(v11 + 32);
      double v55 = *(double *)(a2 - 48);
      if (*v52 >= v54)
      {
        if (v55 < v53)
        {
          *BOOL v52 = v55;
          *(double *)(a2 - 48) = v53;
          unint64_t v57 = v11 + 16 * v51;
          uint64_t v59 = *(void *)(v57 + 8);
          unsigned int v58 = (uint64_t *)(v57 + 8);
          *unsigned int v58 = *(void *)(a2 - 40);
          *(void *)(a2 - 40) = v59;
          double v53 = *v52;
          double v60 = *(double *)(v11 + 32);
          if (*v52 < v60)
          {
            *(double *)(v11 + 32) = v53;
            *BOOL v52 = v60;
            unint64_t v56 = (uint64_t *)(v11 + 40);
            goto LABEL_46;
          }
        }
LABEL_47:
        double v66 = *v15;
        double v67 = *v34;
        if (*v15 >= *v34) {
          goto LABEL_54;
        }
      }
      else
      {
        if (v55 < v53)
        {
          unint64_t v56 = (uint64_t *)(v11 + 40);
          *(double *)(v11 + 32) = v55;
          goto LABEL_45;
        }
        *(double *)(v11 + 32) = v53;
        unint64_t v61 = v11 + 16 * v51;
        uint64_t v62 = *(void *)(v61 + 8);
        unint64_t v56 = (uint64_t *)(v61 + 8);
        *BOOL v52 = v54;
        uint64_t v63 = *(void *)(v11 + 40);
        *(void *)(v11 + 40) = v62;
        *unint64_t v56 = v63;
        double v64 = *(double *)(a2 - 48);
        if (v64 < v54)
        {
          *BOOL v52 = v64;
LABEL_45:
          *(double *)(a2 - 48) = v54;
          unsigned int v58 = (uint64_t *)(a2 - 40);
LABEL_46:
          uint64_t v65 = *v56;
          *unint64_t v56 = *v58;
          *unsigned int v58 = v65;
          double v53 = *v52;
          goto LABEL_47;
        }
        double v53 = v54;
        double v66 = *v15;
        double v67 = *v34;
        if (*v15 >= *v34)
        {
LABEL_54:
          if (v53 < v66)
          {
            *uint64_t v15 = v53;
            unint64_t v74 = v11 + 16 * v14;
            uint64_t v75 = *(void *)(v74 + 8);
            unsigned int v69 = (uint64_t *)(v74 + 8);
            *BOOL v52 = v66;
            unint64_t v76 = v11 + 16 * v51;
            *unsigned int v69 = *(void *)(v76 + 8);
            *(void *)(v76 + 8) = v75;
            if (v53 >= v67)
            {
              double v66 = v53;
              goto LABEL_59;
            }
            *BOOL v34 = v53;
            *uint64_t v15 = v67;
            uint64_t v68 = (uint64_t *)(v11 + 16 * v33 + 8);
LABEL_58:
            uint64_t v77 = *v68;
            *uint64_t v68 = *v69;
            *unsigned int v69 = v77;
            double v66 = *v15;
            goto LABEL_59;
          }
          goto LABEL_59;
        }
      }
      uint64_t v68 = (uint64_t *)(v11 + 16 * v33 + 8);
      if (v53 < v66)
      {
        *BOOL v34 = v53;
        *BOOL v52 = v67;
        unsigned int v69 = (uint64_t *)(v11 + 16 * v51 + 8);
        goto LABEL_58;
      }
      *BOOL v34 = v66;
      *uint64_t v15 = v67;
      unint64_t v70 = v11 + 16 * v14;
      uint64_t v72 = *(void *)(v70 + 8);
      unsigned int v71 = (uint64_t *)(v70 + 8);
      uint64_t v73 = *v68;
      *uint64_t v68 = v72;
      *unsigned int v71 = v73;
      if (v53 < v67)
      {
        *uint64_t v15 = v53;
        *BOOL v52 = v67;
        unsigned int v69 = (uint64_t *)(v11 + 16 * v51 + 8);
        uint64_t v68 = v71;
        goto LABEL_58;
      }
      double v66 = v67;
LABEL_59:
      double v78 = *(double *)v11;
      *(double *)unint64_t v11 = v66;
      double v22 = (uint64_t *)(v11 + 8);
      *uint64_t v15 = v78;
      uint64_t v28 = (uint64_t *)(v11 + 8 + 16 * v14);
      goto LABEL_60;
    }
    double v20 = *(double *)v11;
    double v21 = *v15;
    if (*(double *)v11 >= *v15)
    {
      if (v16 >= v20) {
        goto LABEL_61;
      }
      *(double *)unint64_t v11 = v16;
      *(double *)(a2 - 16) = v20;
      uint64_t v28 = (uint64_t *)(v11 + 8);
      uint64_t v27 = *(void *)(v11 + 8);
      *(void *)(v11 + 8) = *(void *)(a2 - 8);
      *(void *)(a2 - 8) = v27;
      double v29 = *v15;
      if (*(double *)v11 >= *v15) {
        goto LABEL_61;
      }
      *uint64_t v15 = *(double *)v11;
      *(double *)unint64_t v11 = v29;
      double v22 = (uint64_t *)(v11 + 16 * v14 + 8);
    }
    else
    {
      double v22 = (uint64_t *)(v11 + 16 * v14 + 8);
      if (v16 >= v20)
      {
        *uint64_t v15 = v20;
        uint64_t v43 = *(void *)(v11 + 8);
        *(double *)unint64_t v11 = v21;
        uint64_t v44 = *v22;
        *double v22 = v43;
        *(void *)(v11 + 8) = v44;
        double v45 = *(double *)(a2 - 16);
        if (v45 >= v21) {
          goto LABEL_61;
        }
        *(double *)unint64_t v11 = v45;
        *(double *)(a2 - 16) = v21;
        double v22 = (uint64_t *)(v11 + 8);
      }
      else
      {
        *uint64_t v15 = v16;
        *(double *)(a2 - 16) = v21;
      }
      uint64_t v28 = (uint64_t *)(a2 - 8);
    }
LABEL_60:
    uint64_t v79 = *v22;
    *double v22 = *v28;
    *uint64_t v28 = v79;
LABEL_61:
    --a3;
    double v80 = *(double *)v11;
    if ((a4 & 1) != 0 || *(double *)(v11 - 16) < v80)
    {
      uint64_t v81 = 0;
      uint64_t v82 = *(void *)(v11 + 8);
      do
      {
        double v83 = *(double *)(v11 + v81 + 16);
        v81 += 16;
      }
      while (v83 < v80);
      unint64_t v84 = v11 + v81;
      unsigned int v85 = (double *)a2;
      if (v81 == 16)
      {
        unsigned int v85 = (double *)a2;
        do
        {
          if (v84 >= (unint64_t)v85) {
            break;
          }
          double v87 = *(v85 - 2);
          v85 -= 2;
        }
        while (v87 >= v80);
      }
      else
      {
        do
        {
          double v86 = *(v85 - 2);
          v85 -= 2;
        }
        while (v86 >= v80);
      }
      if (v84 >= (unint64_t)v85)
      {
        v11 += v81;
        uint64_t v93 = v84 - 16;
        if (v84 - 16 != v9) {
          goto LABEL_78;
        }
      }
      else
      {
        double v88 = *v85;
        v11 += v81;
        uint64_t v89 = v85;
        do
        {
          *(double *)unint64_t v11 = v88;
          *uint64_t v89 = v83;
          uint64_t v90 = *(void *)(v11 + 8);
          *(double *)(v11 + 8) = v89[1];
          *((void *)v89 + 1) = v90;
          do
          {
            double v91 = *(double *)(v11 + 16);
            v11 += 16;
            double v83 = v91;
          }
          while (v91 < v80);
          do
          {
            double v92 = *(v89 - 2);
            v89 -= 2;
            double v88 = v92;
          }
          while (v92 >= v80);
        }
        while (v11 < (unint64_t)v89);
        uint64_t v93 = v11 - 16;
        if (v11 - 16 != v9)
        {
LABEL_78:
          *(void *)unint64_t v9 = *(void *)(v11 - 16);
          *(void *)(v9 + 8) = *(void *)(v11 - 8);
        }
      }
      *(double *)(v11 - 16) = v80;
      *(void *)(v11 - 8) = v82;
      if (v84 < (unint64_t)v85) {
        goto LABEL_82;
      }
      BOOL v94 = sub_EFA4D0(v9, v93);
      BOOL result = sub_EFA4D0(v11, a2);
      if (result)
      {
        a2 = v93;
        if (v94) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v94)
      {
LABEL_82:
        BOOL result = sub_EF9938(v9, v93, a3, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      if (v80 < *(double *)(a2 - 16))
      {
        do
        {
          double v95 = *(double *)(v11 + 16);
          v11 += 16;
        }
        while (v80 >= v95);
      }
      else
      {
        unint64_t v96 = v11 + 16;
        do
        {
          unint64_t v11 = v96;
          if (v96 >= a2) {
            break;
          }
          v96 += 16;
        }
        while (v80 >= *(double *)v11);
      }
      unint64_t v97 = (double *)a2;
      if (v11 < a2)
      {
        unint64_t v97 = (double *)a2;
        do
        {
          double v98 = *(v97 - 2);
          v97 -= 2;
        }
        while (v80 < v98);
      }
      uint64_t v99 = *(void *)(v9 + 8);
      if (v11 < (unint64_t)v97)
      {
        double v100 = *(double *)v11;
        double v101 = *v97;
        do
        {
          *(double *)unint64_t v11 = v101;
          *unint64_t v97 = v100;
          uint64_t v102 = *(void *)(v11 + 8);
          *(double *)(v11 + 8) = v97[1];
          *((void *)v97 + 1) = v102;
          do
          {
            double v103 = *(double *)(v11 + 16);
            v11 += 16;
            double v100 = v103;
          }
          while (v80 >= v103);
          do
          {
            double v104 = *(v97 - 2);
            v97 -= 2;
            double v101 = v104;
          }
          while (v80 < v104);
        }
        while (v11 < (unint64_t)v97);
      }
      BOOL v4 = v11 - 16 >= v9;
      BOOL v5 = v11 - 16 == v9;
      if (v11 - 16 != v9)
      {
        *(void *)unint64_t v9 = *(void *)(v11 - 16);
        *(void *)(v9 + 8) = *(void *)(v11 - 8);
      }
      a4 = 0;
      *(double *)(v11 - 16) = v80;
      *(void *)(v11 - 8) = v99;
    }
  }
  unint64_t v123 = v11 + 16;
  BOOL v125 = v11 == a2 || v123 == a2;
  if (a4)
  {
    if (!v125)
    {
      uint64_t v126 = 0;
      unint64_t v127 = v11;
      do
      {
        unint64_t v129 = v123;
        double v130 = *(double *)(v127 + 16);
        double v131 = *(double *)v127;
        if (v130 < *(double *)v127)
        {
          uint64_t v132 = *(void *)(v127 + 24);
          uint64_t v133 = v126;
          do
          {
            uint64_t v134 = v11 + v133;
            *(double *)(v134 + 16) = v131;
            *(void *)(v134 + 24) = *(void *)(v11 + v133 + 8);
            if (!v133)
            {
              uint64_t v128 = v11;
              goto LABEL_129;
            }
            double v131 = *(double *)(v134 - 16);
            v133 -= 16;
          }
          while (v130 < v131);
          uint64_t v128 = v11 + v133 + 16;
LABEL_129:
          *(double *)uint64_t v128 = v130;
          *(void *)(v128 + 8) = v132;
        }
        unint64_t v123 = v129 + 16;
        v126 += 16;
        unint64_t v127 = v129;
      }
      while (v129 + 16 != a2);
    }
  }
  else if (!v125)
  {
    uint64_t v165 = (double *)(v11 + 24);
    do
    {
      unint64_t v166 = v123;
      double v167 = *(double *)(v9 + 16);
      double v168 = *(double *)v9;
      if (v167 < *(double *)v9)
      {
        uint64_t v169 = *(void *)(v9 + 24);
        int v170 = v165;
        do
        {
          BOOL v171 = v170;
          *(v170 - 1) = v168;
          uint64_t v172 = *((void *)v170 - 2);
          v170 -= 2;
          *(void *)BOOL v171 = v172;
          double v168 = *(v171 - 5);
        }
        while (v167 < v168);
        *(v170 - 1) = v167;
        *(void *)int v170 = v169;
      }
      unint64_t v123 = v166 + 16;
      v165 += 2;
      unint64_t v9 = v166;
    }
    while (v166 + 16 != a2);
  }
  return result;
}

BOOL sub_EFA4D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      double v6 = *(double *)(a2 - 16);
      double v7 = *(double *)a1;
      if (v6 < *(double *)a1)
      {
        *(double *)a1 = v6;
        *(double *)(a2 - 16) = v7;
        uint64_t v8 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = *(void *)(a2 - 8);
        *(void *)(a2 - 8) = v8;
      }
      return result;
    case 3:
      double v9 = *(double *)(a1 + 16);
      double v10 = *(double *)a1;
      double v11 = *(double *)(a2 - 16);
      if (v9 < *(double *)a1)
      {
        if (v11 >= v9)
        {
          *(double *)a1 = v9;
          uint64_t v12 = (uint64_t *)(a1 + 24);
          uint64_t v35 = *(void *)(a1 + 24);
          *(double *)(a1 + 16) = v10;
          uint64_t v36 = *(void *)(a1 + 8);
          *(void *)(a1 + 8) = v35;
          *(void *)(a1 + 24) = v36;
          double v37 = *(double *)(a2 - 16);
          if (v37 >= v10) {
            return result;
          }
          *(double *)(a1 + 16) = v37;
        }
        else
        {
          uint64_t v12 = (uint64_t *)(a1 + 8);
          *(double *)a1 = v11;
        }
        *(double *)(a2 - 16) = v10;
        uint64_t v30 = (uint64_t *)(a2 - 8);
        goto LABEL_27;
      }
      if (v11 < v9)
      {
        *(double *)(a1 + 16) = v11;
        *(double *)(a2 - 16) = v9;
        uint64_t v30 = (uint64_t *)(a1 + 24);
        uint64_t v29 = *(void *)(a1 + 24);
        *(void *)(a1 + 24) = *(void *)(a2 - 8);
        *(void *)(a2 - 8) = v29;
        double v31 = *(double *)(a1 + 16);
        double v32 = *(double *)a1;
        if (v31 < *(double *)a1)
        {
          *(double *)a1 = v31;
          *(double *)(a1 + 16) = v32;
          uint64_t v12 = (uint64_t *)(a1 + 8);
LABEL_27:
          uint64_t v38 = *v12;
          uint64_t *v12 = *v30;
          *uint64_t v30 = v38;
          return result;
        }
      }
      return result;
    case 4:
      sub_EF9800((void *)a1, a1 + 16, a1 + 32, (void *)(a2 - 16));
      return 1;
    case 5:
      sub_EF9800((void *)a1, a1 + 16, a1 + 32, (void *)(a1 + 48));
      double v18 = *(double *)(a2 - 16);
      double v19 = *(double *)(a1 + 48);
      if (v18 >= v19) {
        return 1;
      }
      *(double *)(a1 + 48) = v18;
      *(double *)(a2 - 16) = v19;
      uint64_t v20 = *(void *)(a1 + 56);
      *(void *)(a1 + 56) = *(void *)(a2 - 8);
      *(void *)(a2 - 8) = v20;
      double v21 = *(double *)(a1 + 48);
      double v22 = *(double *)(a1 + 32);
      if (v21 >= v22) {
        return 1;
      }
      *(double *)(a1 + 32) = v21;
      *(double *)(a1 + 48) = v22;
      uint64_t v23 = *(void *)(a1 + 40);
      uint64_t v24 = *(void *)(a1 + 56);
      *(void *)(a1 + 40) = v24;
      *(void *)(a1 + 56) = v23;
      double v25 = *(double *)(a1 + 16);
      if (v21 >= v25) {
        return 1;
      }
      *(double *)(a1 + 16) = v21;
      *(double *)(a1 + 32) = v25;
      uint64_t v26 = *(void *)(a1 + 24);
      *(void *)(a1 + 24) = v24;
      *(void *)(a1 + 40) = v26;
      double v27 = *(double *)a1;
      if (v21 >= *(double *)a1) {
        return 1;
      }
      *(double *)a1 = v21;
      *(double *)(a1 + 16) = v27;
      uint64_t v28 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = v24;
      *(void *)(a1 + 24) = v28;
      return 1;
    default:
      uint64_t v13 = (double *)(a1 + 32);
      double v14 = *(double *)(a1 + 32);
      double v15 = *(double *)(a1 + 16);
      double v16 = *(double *)a1;
      if (v15 < *(double *)a1)
      {
        if (v14 >= v15)
        {
          *(double *)a1 = v15;
          *(double *)(a1 + 16) = v16;
          double v17 = (uint64_t *)(a1 + 24);
          uint64_t v39 = *(void *)(a1 + 8);
          *(void *)(a1 + 8) = *(void *)(a1 + 24);
          *(void *)(a1 + 24) = v39;
          if (v14 >= v16) {
            goto LABEL_32;
          }
          *(double *)(a1 + 16) = v14;
        }
        else
        {
          double v17 = (uint64_t *)(a1 + 8);
          *(double *)a1 = v14;
        }
        *(double *)(a1 + 32) = v16;
        BOOL v34 = (uint64_t *)(a1 + 40);
        goto LABEL_31;
      }
      if (v14 < v15)
      {
        BOOL v34 = (uint64_t *)(a1 + 24);
        uint64_t v33 = *(void *)(a1 + 24);
        *(double *)(a1 + 16) = v14;
        *(double *)(a1 + 32) = v15;
        *(void *)(a1 + 24) = *(void *)(a1 + 40);
        *(void *)(a1 + 40) = v33;
        if (v14 < v16)
        {
          *(double *)a1 = v14;
          *(double *)(a1 + 16) = v16;
          double v17 = (uint64_t *)(a1 + 8);
LABEL_31:
          uint64_t v40 = *v17;
          *double v17 = *v34;
          *BOOL v34 = v40;
        }
      }
LABEL_32:
      uint64_t v41 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v42 = 0;
      int v43 = 0;
      while (1)
      {
        double v44 = *(double *)v41;
        double v45 = *v13;
        if (*(double *)v41 < *v13) {
          break;
        }
LABEL_41:
        uint64_t v13 = (double *)v41;
        v42 += 16;
        v41 += 16;
        if (v41 == a2) {
          return 1;
        }
      }
      uint64_t v46 = *(void *)(v41 + 8);
      uint64_t v47 = v42;
      do
      {
        uint64_t v48 = a1 + v47;
        *(double *)(v48 + 48) = v45;
        *(void *)(v48 + 56) = *(void *)(a1 + v47 + 40);
        if (v47 == -32)
        {
          *(double *)a1 = v44;
          *(void *)(a1 + 8) = v46;
          if (++v43 != 8) {
            goto LABEL_41;
          }
          return v41 + 16 == a2;
        }
        double v45 = *(double *)(v48 + 16);
        v47 -= 16;
      }
      while (v44 < v45);
      uint64_t v49 = a1 + v47;
      *(double *)(v49 + 48) = v44;
      *(void *)(v49 + 56) = v46;
      if (++v43 != 8) {
        goto LABEL_41;
      }
      return v41 + 16 == a2;
  }
}

void sub_EFA870()
{
  unk_25FCA3F = 16641;
  word_25FCA28 = 65;
  byte_25FCA57 = 1;
  byte_25FCA41 = 0;
  byte_25FCA6F = 3;
  LODWORD(xmmword_25FCA58) = 7105633;
}

uint64_t sub_EFA8AC(uint64_t a1, void *a2)
{
  *(void *)a1 = sub_3750CC(a2);
  *(void *)(a1 + 8) = sub_3766F8(a2);
  *(void *)(a1 + 16) = sub_376594(a2);
  *(void *)(a1 + 24) = sub_376B90(a2);
  uint64_t v15 = 0;
  v16[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v16[1] = xmmword_20B8870;
  strcpy(v16[0], "DrivingTransitionAnalyzer");
  __p = 0;
  double v14 = 0;
  uint64_t v4 = sub_374CDC((uint64_t)a2, (uint64_t)v16, (uint64_t *)&__p);
  sub_F6492C(a1 + 32, a2, v4);
  BOOL v5 = (void **)__p;
  if (__p)
  {
    double v6 = v14;
    double v7 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0) {
          operator delete(*(v6 - 3));
        }
        v6 -= 3;
      }
      while (v6 != v5);
      double v7 = __p;
    }
    double v14 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v16[2]) < 0) {
    operator delete(v16[0]);
  }
  sub_EF25B8(a1 + 304, a2);
  HIBYTE(v16[2]) = 19;
  strcpy((char *)v16, "TransitionEvaluator");
  __p = 0;
  double v14 = 0;
  uint64_t v15 = 0;
  uint64_t v8 = sub_374CDC((uint64_t)a2, (uint64_t)v16, (uint64_t *)&__p);
  sub_EFB718(a1 + 808, v8);
  double v9 = (void **)__p;
  if (__p)
  {
    double v10 = v14;
    double v11 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v9);
      double v11 = __p;
    }
    double v14 = v9;
    operator delete(v11);
  }
  if (SHIBYTE(v16[2]) < 0) {
    operator delete(v16[0]);
  }
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  return a1;
}

void sub_EFAA94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_EFAAF4(v18);
  _Unwind_Resume(a1);
}

void sub_EFAAD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_EFAAF4(void *a1)
{
  sub_3C7A68((uint64_t)(a1 + 28));
  uint64_t v2 = (void *)a1[25];
  if (v2)
  {
    a1[26] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[22];
  if (v3)
  {
    a1[23] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[19];
  if (v4)
  {
    a1[20] = v4;
    operator delete(v4);
  }
  BOOL v5 = (void *)a1[16];
  if (v5)
  {
    a1[17] = v5;
    operator delete(v5);
  }
  return a1;
}

unint64_t sub_EFAB64(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  if (!*(unsigned char *)(a1 + 808)) {
    goto LABEL_82;
  }
  uint64_t v4 = a2;
  double v6 = (int **)sub_EB0624(*(void **)a2, *(void *)(a2 + 8));
  double v7 = (void *)sub_EB0624(*(void **)(v4 + 16), *(void *)(v4 + 24));
  uint64_t v8 = (uint64_t)v7;
  double v9 = (unsigned __int16 *)((char *)*v6 - **v6);
  if (*v9 < 0xBu || (uint64_t v10 = v9[5]) == 0 || (*((unsigned char *)*v6 + v10) & 8) == 0)
  {
    double v11 = (unsigned __int16 *)(*v7 - *(int *)*v7);
    if (*v11 >= 0xBu)
    {
      uint64_t v12 = v11[5];
      if (v12)
      {
        if ((*(unsigned char *)(*v7 + v12) & 8) != 0)
        {
          uint64_t v4 = *(unsigned int *)(a1 + 944);
          goto LABEL_21;
        }
      }
    }
  }
  if (!sub_F65158(a1 + 32, v4)
    && *((unsigned __int16 *)v6 + 18) == *(unsigned __int16 *)(v8 + 36)
    && *((_DWORD *)v6 + 8) == *(_DWORD *)(v8 + 32))
  {
    uint64_t v4 = *(unsigned int *)(a1 + 948);
LABEL_21:
    uint64_t v18 = v4;
    return v4 | (unint64_t)(v18 << 32);
  }
  if (sub_F649B4(a1 + 32, v4))
  {
    double v14 = v6[1];
    uint64_t v15 = (unsigned __int16 *)((char *)v14 - *v14);
    unsigned int v16 = *v15;
    if (*((unsigned char *)v6 + 38))
    {
      if (v16 < 5 || (unsigned int v17 = v15[2]) == 0)
      {
LABEL_25:
        __int16 v19 = 0;
LABEL_26:
        unsigned __int16 v20 = v19 + 18000;
        unsigned __int16 v21 = v19 - 18000;
        if ((unsigned __int16)(v20 >> 5) < 0x465u) {
          unsigned __int16 v21 = v20;
        }
        double v22 = *(int **)(v8 + 8);
        uint64_t v23 = (unsigned __int16 *)((char *)v22 - *v22);
        unsigned int v24 = *v23;
        if (*(unsigned char *)(v8 + 38))
        {
          if (v24 < 9 || (unsigned int v25 = v23[4]) == 0)
          {
LABEL_35:
            int v26 = 0;
LABEL_36:
            int v27 = v26 - v21;
            if (v27 > 18000) {
              v27 -= 36000;
            }
            if (v27 < -17999) {
              v27 += 36000;
            }
            double v28 = fabs((double)v27 / 100.0);
            double v73 = v28;
            int v29 = sub_F64D5C(a1 + 32, v4);
            uint64_t v31 = 812;
            if (v29) {
              uint64_t v31 = 810;
            }
            LOWORD(v30) = *(_WORD *)(a1 + v31);
            if (v28 < (double)v30) {
              goto LABEL_82;
            }
            unsigned __int16 v32 = sub_F64CB4((uint64_t *)(a1 + 32), v4);
            if (*(unsigned __int16 *)(a1 + 814) > v32) {
              goto LABEL_82;
            }
            unsigned __int16 v33 = v32;
            unsigned __int16 v34 = sub_F65308((uint64_t *)(a1 + 32), v4);
            if (!v34) {
              goto LABEL_82;
            }
            double v35 = log((double)v34);
            double v36 = v35 / log(*(long double *)(a1 + 936));
            double v72 = v36;
            int v37 = sub_EFB0C8(&v73, (double **)(a1 + 816));
            uint64_t v38 = *(double **)(a1 + 840);
            double v39 = *v38;
            if (v36 <= *v38) {
              goto LABEL_57;
            }
            uint64_t v40 = *(double **)(a1 + 848);
            if ((char *)v40 - (char *)v38 >= 16)
            {
              if ((char *)v40 - (char *)v38 != 16)
              {
                unint64_t v41 = (unint64_t)((char *)v40 - (char *)v38) >> 4;
                do
                {
                  unint64_t v42 = (4 * v41) & 0xFFFFFFFFFFFFFFF0;
                  _X13 = (char *)v38 + v42;
                  __asm { PRFM            #0, [X13] }
                  uint64_t v48 = &v38[2 * (v41 >> 1)];
                  _X12 = (char *)v48 + v42;
                  __asm { PRFM            #0, [X12] }
                  if (*v48 >= v36) {
                    unint64_t v51 = 0;
                  }
                  else {
                    unint64_t v51 = v41 >> 1;
                  }
                  v38 += 2 * v51;
                  v41 -= v41 >> 1;
                }
                while ((uint64_t)v41 > 1);
                double v39 = *v38;
              }
              v38 += 2 * (v39 < v36);
            }
            if (v38 == v40)
            {
              double v53 = *(v40 - 1);
            }
            else
            {
              double v52 = *(v38 - 2);
              if (v52 == *v38)
              {
LABEL_57:
                double v53 = v38[1];
                goto LABEL_60;
              }
              double v53 = *(v38 - 1) + (v36 - v52) / (*v38 - v52) * (v38[1] - *(v38 - 1));
            }
LABEL_60:
            double v54 = v53 * (double)v37;
            if (v54 >= 0.0)
            {
              if (v54 < 4.50359963e15)
              {
                uint64_t v55 = (uint64_t)(v54 + v54) + 1;
LABEL_67:
                double v54 = (double)(v55 >> 1);
              }
            }
            else if (v54 > -4.50359963e15)
            {
              uint64_t v55 = (uint64_t)(v54 + v54);
              if (v55 >= 1) {
                --v55;
              }
              goto LABEL_67;
            }
            int v56 = (int)v54;
            unsigned int v71 = (int)v54;
            if (v33)
            {
              double v57 = (double)v33;
              unsigned int v58 = (unsigned __int16)sub_ECBB58((uint64_t)v6);
              unsigned int v59 = (unsigned __int16)sub_ECBB58(v8);
              if (v58 < v59) {
                unsigned int v59 = v58;
              }
              if (v59 <= 1) {
                unsigned int v59 = 1;
              }
              double v68 = v57 / (double)v59;
              if (*(unsigned char *)(a1 + 912))
              {
                double v60 = log(v57 / (double)v59);
                double v68 = v60 / log(*(long double *)(a1 + 936));
              }
              int v70 = sub_EFB0C8(&v68, (double **)(a1 + 864));
              double v61 = sub_EFB1E4(&v72, (double **)(a1 + 888));
              unsigned int v71 = sub_EFB060(&v70, v61) + v56;
            }
            if (sub_F64BF4(a1 + 32, v4))
            {
              sub_EFB2A8((int *)&v71, *(double *)(a1 + 928));
              uint64_t v4 = v71;
              goto LABEL_21;
            }
            if (sub_F650DC(a1 + 32, v4)) {
              sub_EFB2A8((int *)&v71, *(double *)(a1 + 920));
            }
            if (v71)
            {
              sub_EFB314(a1, v4, a3);
              double v68 = v62;
              uint64_t v69 = v63;
              LODWORD(v4) = v71;
              double v64 = (double **)(a1 + 960);
              double v65 = sub_EFB1E4((double *)&v69, (double **)(a1 + 960));
              uint64_t v18 = sub_EFB060((int *)&v71, v65);
              double v66 = sub_EFB1E4(&v68, v64);
              sub_EFB060((int *)&v71, v66);
              return v4 | (unint64_t)(v18 << 32);
            }
LABEL_82:
            LODWORD(v4) = 0;
            uint64_t v18 = 0;
            return v4 | (unint64_t)(v18 << 32);
          }
        }
        else
        {
          if (v24 < 5) {
            goto LABEL_35;
          }
          unsigned int v25 = v23[2];
          if (!v25) {
            goto LABEL_35;
          }
        }
        int v26 = *(unsigned __int16 *)((char *)v22 + v25);
        goto LABEL_36;
      }
    }
    else
    {
      if (v16 < 9) {
        goto LABEL_25;
      }
      unsigned int v17 = v15[4];
      if (!v17) {
        goto LABEL_25;
      }
    }
    __int16 v19 = *(_WORD *)((char *)v14 + v17);
    goto LABEL_26;
  }
  LODWORD(v4) = 0;
  uint64_t v18 = 0;
  return v4 | (unint64_t)(v18 << 32);
}

uint64_t sub_EFB060(int *a1, double a2)
{
  double v2 = (double)*a1 * a2;
  if (v2 >= 0.0)
  {
    if (v2 < 4.50359963e15)
    {
      uint64_t v3 = (uint64_t)(v2 + v2) + 1;
LABEL_8:
      double v2 = (double)(v3 >> 1);
    }
  }
  else if (v2 > -4.50359963e15)
  {
    uint64_t v3 = (uint64_t)(v2 + v2);
    if (v3 >= 1) {
      --v3;
    }
    goto LABEL_8;
  }
  return (int)v2;
}

uint64_t sub_EFB0C8(double *a1, double **a2)
{
  double v2 = *a1;
  uint64_t v3 = *a2;
  double v4 = **a2;
  if (*a1 <= v4) {
    return *((unsigned int *)v3 + 2);
  }
  BOOL v5 = a2[1];
  if ((char *)v5 - (char *)v3 >= 16)
  {
    if ((char *)v5 - (char *)v3 != 16)
    {
      unint64_t v6 = (unint64_t)((char *)v5 - (char *)v3) >> 4;
      do
      {
        unint64_t v7 = (4 * v6) & 0xFFFFFFFFFFFFFFF0;
        _X13 = (char *)v3 + v7;
        __asm { PRFM            #0, [X13] }
        double v14 = &v3[2 * (v6 >> 1)];
        _X12 = (char *)v14 + v7;
        __asm { PRFM            #0, [X12] }
        if (*v14 >= v2) {
          unint64_t v17 = 0;
        }
        else {
          unint64_t v17 = v6 >> 1;
        }
        v3 += 2 * v17;
        v6 -= v6 >> 1;
      }
      while ((uint64_t)v6 > 1);
      double v4 = *v3;
    }
    v3 += 2 * (v4 < v2);
  }
  if (v3 == v5) {
    return *((unsigned int *)v5 - 2);
  }
  double v18 = *(v3 - 2);
  double v19 = *v3;
  if (v18 == *v3) {
    return *((unsigned int *)v3 + 2);
  }
  int v21 = *((_DWORD *)v3 + 2);
  int v22 = *((_DWORD *)v3 - 2);
  double v23 = (v2 - v18) / (v19 - v18) * (double)(v21 - v22);
  if (v23 >= 0.0)
  {
    if (v23 < 4.50359963e15)
    {
      uint64_t v24 = (uint64_t)(v23 + v23) + 1;
LABEL_22:
      double v23 = (double)(v24 >> 1);
    }
  }
  else if (v23 > -4.50359963e15)
  {
    uint64_t v24 = (uint64_t)(v23 + v23);
    if (v24 >= 1) {
      --v24;
    }
    goto LABEL_22;
  }
  return (v22 + (int)v23);
}

double sub_EFB1E4(double *a1, double **a2)
{
  double v2 = *a1;
  uint64_t v3 = *a2;
  double v4 = **a2;
  if (*a1 <= v4) {
    return v3[1];
  }
  BOOL v5 = a2[1];
  if ((char *)v5 - (char *)v3 >= 16)
  {
    if ((char *)v5 - (char *)v3 != 16)
    {
      unint64_t v6 = (unint64_t)((char *)v5 - (char *)v3) >> 4;
      do
      {
        unint64_t v7 = (4 * v6) & 0xFFFFFFFFFFFFFFF0;
        _X13 = (char *)v3 + v7;
        __asm { PRFM            #0, [X13] }
        double v14 = &v3[2 * (v6 >> 1)];
        _X12 = (char *)v14 + v7;
        __asm { PRFM            #0, [X12] }
        if (*v14 >= v2) {
          unint64_t v17 = 0;
        }
        else {
          unint64_t v17 = v6 >> 1;
        }
        v3 += 2 * v17;
        v6 -= v6 >> 1;
      }
      while ((uint64_t)v6 > 1);
      double v4 = *v3;
    }
    v3 += 2 * (v4 < v2);
  }
  if (v3 == v5) {
    return *(v5 - 1);
  }
  double v18 = *(v3 - 2);
  if (v18 == *v3) {
    return v3[1];
  }
  return *(v3 - 1) + (v2 - v18) / (*v3 - v18) * (v3[1] - *(v3 - 1));
}

int *sub_EFB2A8(int *result, double a2)
{
  double v2 = (double)*result * a2;
  if (v2 >= 0.0)
  {
    if (v2 < 4.50359963e15)
    {
      uint64_t v3 = (uint64_t)(v2 + v2) + 1;
LABEL_8:
      double v2 = (double)(v3 >> 1);
    }
  }
  else if (v2 > -4.50359963e15)
  {
    uint64_t v3 = (uint64_t)(v2 + v2);
    if (v3 >= 1) {
      --v3;
    }
    goto LABEL_8;
  }
  *BOOL result = (int)v2;
  return result;
}

void sub_EFB314(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  sub_EFC860((char *)a1, a2, a1 + 1008);
  BOOL v5 = *(uint64_t **)(a1 + 1008);
  unint64_t v6 = *(uint64_t **)(a1 + 1016);
  if (v5 != v6)
  {
    double v7 = 0.0;
    double v8 = 0.0;
    double v9 = 0.0;
    double v10 = 0.0;
    while (1)
    {
      double v11 = sub_32A35C(*(void *)(a1 + 8), *v5, 0);
      double v12 = v11;
      BOOL v13 = *(uint64_t *)&v11 <= -1 || ((*(void *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF;
      BOOL v14 = v13 && (unint64_t)(*(void *)&v11 - 1) >= 0xFFFFFFFFFFFFFLL;
      BOOL v15 = !v14 || (*(void *)&v11 & 0x7FFFFFFFFFFFFFFFLL) == 0;
      if (v15 && v11 > 0.0) {
        break;
      }
LABEL_7:
      if (++v5 == v6) {
        return;
      }
    }
    if (*(unsigned char *)(a1 + 956))
    {
      double v16 = fmax((double)(unsigned __int16)sub_3AC808(*(void *)(a1 + 8), *v5), 1.0);
    }
    else if (*(unsigned char *)(a1 + 957))
    {
      double v17 = (double)(unsigned __int16)sub_3AC808(*(void *)(a1 + 8), *v5);
      if (v17 < 1.0) {
        double v17 = 1.0;
      }
      double v18 = log(v17);
      double v16 = fmax(v18 / log(*(long double *)(a1 + 936)), 0.1);
    }
    else
    {
      double v16 = 1.0;
    }
    uint64_t v19 = *(void *)(a1 + 16);
    uint64_t v20 = *v5;
    int v21 = sub_506C((uint64_t)a3);
    unsigned __int16 v22 = sub_51B4((uint64_t)a3);
    double v54 = 0;
    uint64_t v55 = 0;
    double v23 = (int *)sub_3AF660(v19, v20);
    double v24 = -1.0;
    if (!v23 || (unsigned int v25 = (unsigned int *)sub_3AF78C(v19, v23, 0, &v54)) == 0 || (v28 = *v25, !v28))
    {
LABEL_33:
      if ((*(uint64_t *)&v24 <= -1 || ((*(void *)&v24 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
        && (unint64_t)(*(void *)&v24 - 1) >= 0xFFFFFFFFFFFFFLL
        && (*(void *)&v24 & 0x7FFFFFFFFFFFFFFFLL) != 0
        || v24 <= 0.0)
      {
        double v33 = 1.0;
      }
      else
      {
        double v33 = v12 / v24;
      }
      unint64_t v34 = sub_3A5DDC(*(void *)(a1 + 24), *v5);
      double v54 = 0;
      uint64_t v55 = 0;
      v53[0] = 0;
      v53[1] = 0;
      sub_EF4794(a1 + 304, v34, a3, &v54, v53);
      BOOL v38 = *(uint64_t *)&v35 > -1 && ((*(void *)&v35 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF
         || (unint64_t)(*(void *)&v35 - 1) < 0xFFFFFFFFFFFFFLL
         || (*(void *)&v35 & 0x7FFFFFFFFFFFFFFFLL) == 0;
      double v39 = v8;
      if (v38)
      {
        double v39 = v8;
        if (v35 > 0.0) {
          double v39 = v16 * (v12 / v35);
        }
      }
      double v40 = v16 * v33;
      if (*(unsigned char *)(a1 + 958))
      {
        if (v40 > v8)
        {
          double v10 = v16;
          double v8 = v16 * v33;
        }
        if (v39 > v7)
        {
          double v9 = v16;
          double v7 = v39;
        }
      }
      else
      {
        double v8 = v8 + v40;
        double v7 = v7 + v39;
        double v9 = v9 + v16;
        double v10 = v10 + v16;
      }
      goto LABEL_7;
    }
    if (v28 == 1)
    {
      if (!*(unsigned char *)(v19 + 3874))
      {
        LOWORD(v26) = *((_WORD *)v25 + 3);
        double v24 = (double)v26 / 100.0;
      }
      goto LABEL_33;
    }
    unsigned int v41 = (unsigned __int16)(1440 * (v21 + 6 - 7 * ((9363 * (v21 + 6)) >> 16))) + v22;
    unint64_t v42 = (unsigned __int16 *)(v25 + 1);
    int v43 = (unsigned __int16 *)(v25 + 1);
    unint64_t v44 = *v25;
    do
    {
      double v45 = (unsigned __int16 *)((char *)v43 + ((2 * v44) & 0x3FFFFFFFCLL));
      unsigned int v47 = *v45;
      uint64_t v46 = v45 + 2;
      unint64_t v48 = v44 >> 1;
      v44 += ~(v44 >> 1);
      if (v41 < v47) {
        unint64_t v44 = v48;
      }
      else {
        int v43 = v46;
      }
    }
    while (v44);
    uint64_t v49 = &v42[2 * v28];
    if (v43 == v49)
    {
      uint64_t v50 = v43 - 2;
    }
    else
    {
      if (v43 != v42) {
        uint64_t v49 = v43;
      }
      uint64_t v50 = v49 - 2;
      if (v43 != v42) {
        goto LABEL_75;
      }
    }
    int v43 = (unsigned __int16 *)(v25 + 1);
LABEL_75:
    unsigned int v51 = *v50;
    if (v41 < v51) {
      v51 -= 10080;
    }
    unsigned int v52 = *v43;
    if (v41 > v52) {
      v52 += 10080;
    }
    LOWORD(v26) = v50[1];
    LOWORD(v27) = v43[1];
    double v24 = (double)v26 / 100.0
        + ((double)v27 / 100.0 - (double)v26 / 100.0) * (double)(int)(v41 - v51) / (double)(int)(v52 - v51);
    goto LABEL_33;
  }
}

uint64_t sub_EFB718(uint64_t a1, void *a2)
{
  *(unsigned char *)a1 = 1;
  *(_OWORD *)(a1 + 2) = 0u;
  double v4 = (_WORD *)(a1 + 2);
  *(_OWORD *)(a1 + 18) = 0u;
  *(_OWORD *)(a1 + 34) = 0u;
  double v65 = (char **)(a1 + 56);
  double v66 = (char **)(a1 + 8);
  *(_OWORD *)(a1 + 50) = 0u;
  uint64_t v67 = a1 + 80;
  uint64_t v68 = a1 + 32;
  *(_OWORD *)(a1 + 66) = 0u;
  *(_OWORD *)(a1 + 82) = 0u;
  *(void *)(a1 + 97) = 0;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(a1 + 112) = _Q0;
  *(void *)(a1 + 128) = 0x4024000000000000;
  *(void *)(a1 + 136) = 0x8000000080000000;
  *(_DWORD *)(a1 + 144) = 0;
  double v10 = (BOOL *)(a1 + 144);
  *(void *)(a1 + 152) = 0;
  uint64_t v64 = a1 + 152;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 147) = 0;
  HIBYTE(v73[2]) = 7;
  strcpy((char *)v73, "enabled");
  *(unsigned char *)a1 = sub_29D62C(a2, (uint64_t)v73);
  if (SHIBYTE(v73[2]) < 0) {
    operator delete(v73[0]);
  }
  v73[0] = (char *)operator new(0x38uLL);
  *(_WORD *)&v63[50] = 0;
  *(_DWORD *)&v63[52] = 0;
  *(void *)&v63[56] = 0x8000000000000038;
  *(_OWORD *)&v73[1] = xmmword_20B99E0;
  strcpy(v73[0], "min_deviation_from_straight_against_driving_side_turn");
  strcpy(v63, "nst_driving_sideom_straight_agaimin_deviation_fr5");
  if (sub_58070(a2, (uint64_t)v73))
  {
    double v11 = (char *)operator new(0x38uLL);
    __p = v11;
    long long v72 = *(_OWORD *)&v63[48];
    *(_OWORD *)double v11 = *(_OWORD *)&v63[32];
    *((_OWORD *)v11 + 1) = *(_OWORD *)&v63[16];
    *((_OWORD *)v11 + 2) = *(_OWORD *)v63;
    strcpy(v11 + 45, "ide_turn");
  }
  else
  {
    __p = operator new(0x20uLL);
    long long v72 = xmmword_20B91A0;
    strcpy((char *)__p, "min_deviation_from_straight");
  }
  *double v4 = sub_376928(a2, (uint64_t)&__p);
  if (SHIBYTE(v72) < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v73[2]) & 0x80000000) == 0) {
      goto LABEL_8;
    }
  }
  else if ((SHIBYTE(v73[2]) & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(v73[0]);
LABEL_8:
  v73[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v73[1] = xmmword_20B93B0;
  strcpy(v73[0], "min_deviation_from_straight_driving_side_turn");
  *(_WORD *)(a1 + 4) = sub_376928(a2, (uint64_t)v73);
  if (SHIBYTE(v73[2]) < 0) {
    operator delete(v73[0]);
  }
  v73[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v63[48] = xmmword_20B91A0;
  *(_OWORD *)&v73[1] = xmmword_20B91A0;
  strcpy(v73[0], "min_number_of_crossed_trips");
  *(_WORD *)(a1 + 6) = sub_376928(a2, (uint64_t)v73);
  if (SHIBYTE(v73[2]) < 0) {
    operator delete(v73[0]);
  }
  v73[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v73[1] = *(_OWORD *)&v63[48];
  strcpy(v73[0], "use_trip_crossing_ratio_log");
  *(unsigned char *)(a1 + 104) = sub_29D62C(a2, (uint64_t)v73);
  if (SHIBYTE(v73[2]) < 0) {
    operator delete(v73[0]);
  }
  HIBYTE(v73[2]) = 18;
  strcpy((char *)v73, "num_trips_log_base");
  *(double *)(a1 + 128) = sub_5C7E8(a2, (uint64_t)v73);
  if (SHIBYTE(v73[2]) < 0) {
    operator delete(v73[0]);
  }
  HIBYTE(v73[2]) = 19;
  strcpy((char *)v73, "uncontrolled_factor");
  *(double *)(a1 + 112) = sub_5C7E8(a2, (uint64_t)v73);
  if (SHIBYTE(v73[2]) < 0) {
    operator delete(v73[0]);
  }
  v73[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v73[1] = xmmword_20B8890;
  strcpy(v73[0], "parking_lot_transition_factor");
  *(double *)(a1 + 120) = sub_5C7E8(a2, (uint64_t)v73);
  if (SHIBYTE(v73[2]) < 0) {
    operator delete(v73[0]);
  }
  HIBYTE(v73[2]) = 19;
  strcpy((char *)v73, "ferry_entry_penalty");
  *(_DWORD *)(a1 + 136) = sub_319F48(a2, (uint64_t)v73);
  if (SHIBYTE(v73[2]) < 0) {
    operator delete(v73[0]);
  }
  v73[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v73[1] = xmmword_20B9260;
  strcpy(v73[0], "single_carriageway_u_turn_penalty");
  *(_DWORD *)(a1 + 140) = sub_319F48(a2, (uint64_t)v73);
  if (SHIBYTE(v73[2]) < 0) {
    operator delete(v73[0]);
  }
  HIBYTE(v73[2]) = 20;
  strcpy((char *)v73, "use_ahead_congestion");
  *double v10 = sub_29D62C(a2, (uint64_t)v73);
  if (SHIBYTE(v73[2]) < 0) {
    operator delete(v73[0]);
  }
  HIBYTE(v73[2]) = 21;
  strcpy((char *)v73, "use_before_congestion");
  *(unsigned char *)(a1 + 145) = sub_29D62C(a2, (uint64_t)v73);
  if (SHIBYTE(v73[2]) < 0) {
    operator delete(v73[0]);
  }
  v73[0] = (char *)operator new(0x19uLL);
  *(_OWORD *)&v63[48] = xmmword_20B9250;
  *(_OWORD *)&v73[1] = xmmword_20B9250;
  strcpy(v73[0], "use_incoming_congestion");
  *(unsigned char *)(a1 + 146) = sub_29D62C(a2, (uint64_t)v73);
  if (SHIBYTE(v73[2]) < 0) {
    operator delete(v73[0]);
  }
  v73[0] = (char *)operator new(0x19uLL);
  *(_OWORD *)&v73[1] = *(_OWORD *)&v63[48];
  strcpy(v73[0], "use_outgoing_congestion");
  *(unsigned char *)(a1 + 147) = sub_29D62C(a2, (uint64_t)v73);
  if (SHIBYTE(v73[2]) < 0) {
    operator delete(v73[0]);
  }
  v73[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v73[1] = xmmword_20B91B0;
  strcpy(v73[0], "use_trip_weighted_congestion");
  *(unsigned char *)(a1 + 148) = sub_29D62C(a2, (uint64_t)v73);
  if (SHIBYTE(v73[2]) < 0) {
    operator delete(v73[0]);
  }
  v73[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v73[1] = xmmword_20B9390;
  strcpy(v73[0], "use_trip_log_weighted_congestion");
  *(unsigned char *)(a1 + 149) = sub_29D62C(a2, (uint64_t)v73);
  if (SHIBYTE(v73[2]) < 0) {
    operator delete(v73[0]);
  }
  strcpy((char *)v73, "use_maximum_congestion");
  HIBYTE(v73[2]) = 22;
  *(unsigned char *)(a1 + 150) = sub_29D62C(a2, (uint64_t)v73);
  if (SHIBYTE(v73[2]) < 0) {
    operator delete(v73[0]);
  }
  HIBYTE(v73[2]) = 17;
  strcpy((char *)v73, "angle_trip_factor");
  double v12 = (uint64_t *)sub_5C4AC(a2, (uint64_t)v73);
  BOOL v13 = v12;
  *(void *)&v63[48] = a2;
  if (SHIBYTE(v73[2]) < 0)
  {
    operator delete(v73[0]);
    uint64_t v14 = *v13;
    uint64_t v15 = v13[1];
    if (*v13 == v15) {
      goto LABEL_52;
    }
    while (1)
    {
LABEL_46:
      if (*(_DWORD *)(v14 + 8) != 2)
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_23FDF58;
      }
      double v16 = *(void **)v14;
      HIBYTE(v73[2]) = 9;
      strcpy((char *)v73, "threshold");
      double v70 = sub_5C7E8(v16, (uint64_t)v73);
      HIBYTE(v72) = 6;
      strcpy((char *)&__p, "factor");
      double v69 = sub_5C7E8(v16, (uint64_t)&__p);
      sub_D4EC6C(v68, &v70, &v69);
      if (SHIBYTE(v72) < 0)
      {
        operator delete(__p);
        if (SHIBYTE(v73[2]) < 0) {
LABEL_51:
        }
          operator delete(v73[0]);
      }
      else if (SHIBYTE(v73[2]) < 0)
      {
        goto LABEL_51;
      }
      v14 += 16;
      if (v14 == v15) {
        goto LABEL_52;
      }
    }
  }
  uint64_t v14 = *v12;
  uint64_t v15 = v12[1];
  if (*v12 != v15) {
    goto LABEL_46;
  }
LABEL_52:
  uint64_t v17 = *(void *)(a1 + 32);
  double v18 = *(double **)(a1 + 40);
  unint64_t v19 = 126 - 2 * __clz(((uint64_t)v18 - v17) >> 4);
  if (v18 == (double *)v17) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = v19;
  }
  sub_EFE7E8(v17, v18, (uint64_t)v73, v20, 1);
  HIBYTE(v73[2]) = 20;
  strcpy((char *)v73, "crossing_trip_factor");
  int v21 = (uint64_t *)sub_5C4AC(*(void **)&v63[48], (uint64_t)v73);
  unsigned __int16 v22 = v21;
  if (SHIBYTE(v73[2]) < 0)
  {
    operator delete(v73[0]);
    uint64_t v23 = *v22;
    uint64_t v24 = v22[1];
    if (*v22 == v24) {
      goto LABEL_67;
    }
    while (1)
    {
LABEL_61:
      if (*(_DWORD *)(v23 + 8) != 2)
      {
        unsigned int v59 = __cxa_allocate_exception(8uLL);
        *unsigned int v59 = &off_23FDF58;
      }
      unsigned int v25 = *(void **)v23;
      HIBYTE(v73[2]) = 9;
      strcpy((char *)v73, "threshold");
      double v70 = sub_5C7E8(v25, (uint64_t)v73);
      HIBYTE(v72) = 6;
      strcpy((char *)&__p, "factor");
      double v69 = sub_5C7E8(v25, (uint64_t)&__p);
      sub_D4EC6C(v67, &v70, &v69);
      if (SHIBYTE(v72) < 0)
      {
        operator delete(__p);
        if (SHIBYTE(v73[2]) < 0) {
LABEL_66:
        }
          operator delete(v73[0]);
      }
      else if (SHIBYTE(v73[2]) < 0)
      {
        goto LABEL_66;
      }
      v23 += 16;
      if (v23 == v24) {
        goto LABEL_67;
      }
    }
  }
  uint64_t v23 = *v21;
  uint64_t v24 = v21[1];
  if (*v21 != v24) {
    goto LABEL_61;
  }
LABEL_67:
  uint64_t v26 = *(void *)(a1 + 80);
  unint64_t v27 = *(double **)(a1 + 88);
  unint64_t v28 = 126 - 2 * __clz(((uint64_t)v27 - v26) >> 4);
  if (v27 == (double *)v26) {
    uint64_t v29 = 0;
  }
  else {
    uint64_t v29 = v28;
  }
  sub_EFE7E8(v26, v27, (uint64_t)v73, v29, 1);
  HIBYTE(v73[2]) = 11;
  strcpy((char *)v73, "angle_times");
  unint64_t v30 = (uint64_t *)sub_5C4AC(*(void **)&v63[48], (uint64_t)v73);
  uint64_t v31 = v30;
  if (SHIBYTE(v73[2]) < 0)
  {
    operator delete(v73[0]);
    uint64_t v33 = *v31;
    uint64_t v32 = v31[1];
    if (*v31 == v32) {
      goto LABEL_82;
    }
    while (1)
    {
LABEL_76:
      if (*(_DWORD *)(v33 + 8) != 2)
      {
        double v60 = __cxa_allocate_exception(8uLL);
        *double v60 = &off_23FDF58;
      }
      unint64_t v34 = *(void **)v33;
      HIBYTE(v73[2]) = 9;
      strcpy((char *)v73, "threshold");
      double v70 = sub_5C7E8(v34, (uint64_t)v73);
      HIBYTE(v72) = 4;
      strcpy((char *)&__p, "time");
      LODWORD(v69) = sub_319F48(v34, (uint64_t)&__p);
      sub_EFC730(v66, &v70, &v69);
      if (SHIBYTE(v72) < 0)
      {
        operator delete(__p);
        if (SHIBYTE(v73[2]) < 0) {
LABEL_81:
        }
          operator delete(v73[0]);
      }
      else if (SHIBYTE(v73[2]) < 0)
      {
        goto LABEL_81;
      }
      v33 += 16;
      if (v33 == v32) {
        goto LABEL_82;
      }
    }
  }
  uint64_t v33 = *v30;
  uint64_t v32 = v30[1];
  if (*v30 != v32) {
    goto LABEL_76;
  }
LABEL_82:
  uint64_t v35 = *(void *)(a1 + 8);
  unint64_t v36 = *(void *)(a1 + 16);
  unint64_t v37 = 126 - 2 * __clz((uint64_t)(v36 - v35) >> 4);
  if (v36 == v35) {
    uint64_t v38 = 0;
  }
  else {
    uint64_t v38 = v37;
  }
  sub_EFF9D8(v35, v36, (uint64_t)v73, v38, 1);
  HIBYTE(v73[2]) = 19;
  strcpy((char *)v73, "trip_crossing_times");
  double v39 = (uint64_t *)sub_5C4AC(*(void **)&v63[48], (uint64_t)v73);
  double v40 = v39;
  if (SHIBYTE(v73[2]) < 0)
  {
    operator delete(v73[0]);
    uint64_t v42 = *v40;
    uint64_t v41 = v40[1];
    if (*v40 == v41) {
      goto LABEL_97;
    }
    while (1)
    {
LABEL_91:
      if (*(_DWORD *)(v42 + 8) != 2)
      {
        double v61 = __cxa_allocate_exception(8uLL);
        *double v61 = &off_23FDF58;
      }
      int v43 = *(void **)v42;
      HIBYTE(v73[2]) = 9;
      strcpy((char *)v73, "threshold");
      double v70 = sub_5C7E8(v43, (uint64_t)v73);
      HIBYTE(v72) = 4;
      strcpy((char *)&__p, "time");
      LODWORD(v69) = sub_319F48(v43, (uint64_t)&__p);
      sub_EFC730(v65, &v70, &v69);
      if (SHIBYTE(v72) < 0)
      {
        operator delete(__p);
        if (SHIBYTE(v73[2]) < 0) {
LABEL_96:
        }
          operator delete(v73[0]);
      }
      else if (SHIBYTE(v73[2]) < 0)
      {
        goto LABEL_96;
      }
      v42 += 16;
      if (v42 == v41) {
        goto LABEL_97;
      }
    }
  }
  uint64_t v42 = *v39;
  uint64_t v41 = v39[1];
  if (*v39 != v41) {
    goto LABEL_91;
  }
LABEL_97:
  uint64_t v44 = *(void *)(a1 + 56);
  unint64_t v45 = *(void *)(a1 + 64);
  unint64_t v46 = 126 - 2 * __clz((uint64_t)(v45 - v44) >> 4);
  if (v45 == v44) {
    uint64_t v47 = 0;
  }
  else {
    uint64_t v47 = v46;
  }
  sub_EFF9D8(v44, v45, (uint64_t)v73, v47, 1);
  HIBYTE(v73[2]) = 18;
  strcpy((char *)v73, "congestion_factors");
  unint64_t v48 = (uint64_t *)sub_5C4AC(*(void **)&v63[48], (uint64_t)v73);
  uint64_t v49 = v48;
  if (SHIBYTE(v73[2]) < 0)
  {
    operator delete(v73[0]);
    uint64_t v50 = *v49;
    uint64_t v51 = v49[1];
    if (*v49 == v51) {
      goto LABEL_112;
    }
    while (1)
    {
LABEL_106:
      if (*(_DWORD *)(v50 + 8) != 2)
      {
        double v62 = __cxa_allocate_exception(8uLL);
        *double v62 = &off_23FDF58;
      }
      unsigned int v52 = *(void **)v50;
      HIBYTE(v73[2]) = 9;
      strcpy((char *)v73, "threshold");
      double v70 = sub_5C7E8(v52, (uint64_t)v73);
      HIBYTE(v72) = 6;
      strcpy((char *)&__p, "factor");
      double v69 = sub_5C7E8(v52, (uint64_t)&__p);
      sub_D4EC6C(v64, &v70, &v69);
      if (SHIBYTE(v72) < 0)
      {
        operator delete(__p);
        if (SHIBYTE(v73[2]) < 0) {
LABEL_111:
        }
          operator delete(v73[0]);
      }
      else if (SHIBYTE(v73[2]) < 0)
      {
        goto LABEL_111;
      }
      v50 += 16;
      if (v50 == v51) {
        goto LABEL_112;
      }
    }
  }
  uint64_t v50 = *v48;
  uint64_t v51 = v48[1];
  if (*v48 != v51) {
    goto LABEL_106;
  }
LABEL_112:
  uint64_t v53 = *(void *)(a1 + 152);
  double v54 = *(double **)(a1 + 160);
  unint64_t v55 = 126 - 2 * __clz(((uint64_t)v54 - v53) >> 4);
  if (v54 == (double *)v53) {
    uint64_t v56 = 0;
  }
  else {
    uint64_t v56 = v55;
  }
  sub_EFE7E8(v53, v54, (uint64_t)v73, v56, 1);
  return a1;
}

void sub_EFC57C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, void **a18, void **a19, void **a20,void **a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v30 - 89) < 0)
  {
    operator delete(*(void **)(v30 - 112));
    uint64_t v32 = *a17;
    if (!*a17)
    {
LABEL_5:
      uint64_t v33 = *a20;
      if (!*a20) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v32 = *a17;
    if (!*a17) {
      goto LABEL_5;
    }
  }
  v29[20] = v32;
  operator delete(v32);
  uint64_t v33 = *a20;
  if (!*a20)
  {
LABEL_6:
    unint64_t v34 = *a18;
    if (!*a18) {
      goto LABEL_7;
    }
    goto LABEL_13;
  }
LABEL_12:
  v29[11] = v33;
  operator delete(v33);
  unint64_t v34 = *a18;
  if (!*a18)
  {
LABEL_7:
    uint64_t v35 = *a21;
    if (!*a21) {
      goto LABEL_8;
    }
    goto LABEL_14;
  }
LABEL_13:
  v29[8] = v34;
  operator delete(v34);
  uint64_t v35 = *a21;
  if (!*a21)
  {
LABEL_8:
    unint64_t v36 = *a19;
    if (!*a19) {
      goto LABEL_9;
    }
    goto LABEL_15;
  }
LABEL_14:
  v29[5] = v35;
  operator delete(v35);
  unint64_t v36 = *a19;
  if (!*a19) {
LABEL_9:
  }
    _Unwind_Resume(exception_object);
LABEL_15:
  _OWORD v29[2] = v36;
  operator delete(v36);
  _Unwind_Resume(exception_object);
}

char *sub_EFC730(char **a1, void *a2, _DWORD *a3)
{
  double v7 = a1[1];
  unint64_t v6 = (unint64_t)a1[2];
  if ((unint64_t)v7 < v6)
  {
    *(void *)double v7 = *a2;
    *((_DWORD *)v7 + 2) = *a3;
    double v8 = v7 + 16;
    goto LABEL_13;
  }
  double v9 = *a1;
  uint64_t v10 = (v7 - *a1) >> 4;
  unint64_t v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 60) {
    sub_2E00();
  }
  uint64_t v12 = v6 - (void)v9;
  if (v12 >> 3 > v11) {
    unint64_t v11 = v12 >> 3;
  }
  BOOL v13 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0;
  unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
  if (!v13) {
    unint64_t v14 = v11;
  }
  if (v14 >> 60) {
    sub_188D718();
  }
  uint64_t v15 = 16 * v14;
  double v16 = (char *)operator new(16 * v14);
  uint64_t v17 = &v16[16 * v10];
  double v18 = &v16[v15];
  *(void *)uint64_t v17 = *a2;
  *((_DWORD *)v17 + 2) = *a3;
  double v8 = v17 + 16;
  if (v7 == v9)
  {
    *a1 = v17;
    a1[1] = v8;
    a1[2] = v18;
    if (!v9) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  do
  {
    unint64_t v19 = v17 - 16;
    *((_OWORD *)v17 - 1) = *((_OWORD *)v7 - 1);
    v7 -= 16;
    v17 -= 16;
  }
  while (v7 != v9);
  *a1 = v19;
  a1[1] = v8;
  a1[2] = v18;
  if (v9) {
LABEL_12:
  }
    operator delete(v9);
LABEL_13:
  a1[1] = v8;
  return v8 - 16;
}

char *sub_EFC860(char *result, uint64_t a2, uint64_t a3)
{
  BOOL v5 = result;
  unint64_t v6 = (char **)(result + 1008);
  *((void *)result + 127) = *((void *)result + 126);
  if (result[952])
  {
    uint64_t v12 = *(void *)(sub_EB0624(*(void **)(a2 + 16), *(void *)(a2 + 24)) + 32);
    BOOL result = sub_2D5B74(v6, &v12);
  }
  if (v5[953])
  {
    uint64_t v12 = *(void *)(sub_EB0624(*(void **)a2, *(void *)(a2 + 8)) + 32);
    BOOL result = sub_2D5B74(v6, &v12);
  }
  if (v5[954] || v5[955])
  {
    sub_F65434((uint64_t *)v5 + 4, a2, 0, (uint64_t *)v5 + 123);
    double v7 = (uint64_t *)*((void *)v5 + 123);
    for (unint64_t i = (uint64_t *)*((void *)v5 + 124); v7 != i; ++v7)
      sub_EFC970(v5, v7, (char **)a3);
    double v9 = *(int **)(a3 + 8);
    unint64_t v10 = 126 - 2 * __clz(((uint64_t)v9 - *(void *)a3) >> 3);
    if (v9 == *(int **)a3) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = v10;
    }
    sub_303770(*(void *)a3, v9, (uint64_t)&v12, v11, 1);
    return (char *)sub_30361C(a3);
  }
  return result;
}

char *sub_EFC970(char *result, uint64_t *a2, char **a3)
{
  BOOL v5 = result;
  if (result[955])
  {
    uint64_t v6 = *a2 & 0xFF000000000000;
    BOOL result = (char *)sub_2D5D58(*(void *)result, *a2 & 0xFFFFFFFFFFFFLL);
    double v7 = &result[-*(int *)result];
    unsigned int v8 = *(unsigned __int16 *)v7;
    if (v6)
    {
      if (v8 < 0xB) {
        goto LABEL_19;
      }
      int v9 = *((unsigned __int16 *)v7 + 5);
      if (!v9 || (*(_DWORD *)&result[v9] & 2) == 0) {
        goto LABEL_19;
      }
    }
    else
    {
      if (v8 < 0xB) {
        goto LABEL_19;
      }
      int v10 = *((unsigned __int16 *)v7 + 5);
      if (!v10 || (*(_DWORD *)&result[v10] & 1) == 0) {
        goto LABEL_19;
      }
    }
    uint64_t v11 = *a3;
    uint64_t v12 = a3[1];
    if (*a3 != v12)
    {
      while (__PAIR64__(*((unsigned __int16 *)v11 + 2), *(_DWORD *)v11) != __PAIR64__((unsigned __int16)WORD2(*a2), *a2)|| (HIWORD(*a2) & 1) == (v11[6] == 0))
      {
        v11 += 8;
        if (v11 == v12)
        {
          uint64_t v11 = a3[1];
          break;
        }
      }
    }
    if (v11 != v12) {
      BOOL result = sub_2D5B74(a3, a2);
    }
  }
LABEL_19:
  uint64_t v13 = *a2;
  unint64_t v14 = v13 ^ 0x1000000000000;
  uint64_t v21 = v13 ^ 0x1000000000000;
  if (!v5[954]) {
    return result;
  }
  BOOL result = (char *)sub_2D5D58(*(void *)v5, v13 & 0xFFFFFFFFFFFFLL);
  uint64_t v15 = &result[-*(int *)result];
  unsigned int v16 = *(unsigned __int16 *)v15;
  if ((v14 & 0xFF000000000000) != 0)
  {
    if (v16 < 0xB) {
      return result;
    }
    int v17 = *((unsigned __int16 *)v15 + 5);
    if (!v17 || (*(_DWORD *)&result[v17] & 2) == 0) {
      return result;
    }
  }
  else
  {
    if (v16 < 0xB) {
      return result;
    }
    int v18 = *((unsigned __int16 *)v15 + 5);
    if (!v18 || (*(_DWORD *)&result[v18] & 1) == 0) {
      return result;
    }
  }
  unint64_t v19 = *a3;
  uint64_t v20 = a3[1];
  if (*a3 != v20)
  {
    while (__PAIR64__(*((unsigned __int16 *)v19 + 2), *(_DWORD *)v19) != __PAIR64__(WORD2(v13), v13)
         || (HIWORD(v14) & 1) == (v19[6] == 0))
    {
      v19 += 8;
      if (v19 == v20)
      {
        unint64_t v19 = a3[1];
        break;
      }
    }
  }
  if (v19 != v20) {
    return sub_2D5B74(a3, &v21);
  }
  return result;
}

uint64_t sub_EFCB74(uint64_t a1, void *a2)
{
  *(void *)a1 = sub_3750CC(a2);
  *(void *)(a1 + 8) = sub_3766F8(a2);
  *(void *)(a1 + 16) = sub_376594(a2);
  *(void *)(a1 + 24) = sub_376B90(a2);
  uint64_t v15 = 0;
  v16[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v16[1] = xmmword_20B8870;
  strcpy(v16[0], "DrivingTransitionAnalyzer");
  __p = 0;
  unint64_t v14 = 0;
  double v4 = sub_374CDC((uint64_t)a2, (uint64_t)v16, (uint64_t *)&__p);
  sub_F66510(a1 + 32, a2, v4);
  BOOL v5 = (void **)__p;
  if (__p)
  {
    uint64_t v6 = v14;
    double v7 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0) {
          operator delete(*(v6 - 3));
        }
        v6 -= 3;
      }
      while (v6 != v5);
      double v7 = __p;
    }
    unint64_t v14 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v16[2]) < 0) {
    operator delete(v16[0]);
  }
  sub_EF25B8(a1 + 304, a2);
  HIBYTE(v16[2]) = 19;
  strcpy((char *)v16, "TransitionEvaluator");
  __p = 0;
  unint64_t v14 = 0;
  uint64_t v15 = 0;
  unsigned int v8 = sub_374CDC((uint64_t)a2, (uint64_t)v16, (uint64_t *)&__p);
  sub_EFD6C0(a1 + 808, v8);
  int v9 = (void **)__p;
  if (__p)
  {
    int v10 = v14;
    uint64_t v11 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v9);
      uint64_t v11 = __p;
    }
    unint64_t v14 = v9;
    operator delete(v11);
  }
  if (SHIBYTE(v16[2]) < 0) {
    operator delete(v16[0]);
  }
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  return a1;
}

void sub_EFCD5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_EFAAF4(v18);
  _Unwind_Resume(a1);
}

void sub_EFCD98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

unint64_t sub_EFCDC0(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  if (!*(unsigned char *)(a1 + 808)) {
    goto LABEL_82;
  }
  uint64_t v4 = a2;
  uint64_t v6 = (int **)sub_46C8EC(*(void **)a2, *(void *)(a2 + 8));
  double v7 = (void *)sub_46C8EC(*(void **)(v4 + 16), *(void *)(v4 + 24));
  uint64_t v8 = (uint64_t)v7;
  int v9 = (unsigned __int16 *)((char *)*v6 - **v6);
  if (*v9 < 0xBu || (uint64_t v10 = v9[5]) == 0 || (*((unsigned char *)*v6 + v10) & 8) == 0)
  {
    uint64_t v11 = (unsigned __int16 *)(*v7 - *(int *)*v7);
    if (*v11 >= 0xBu)
    {
      uint64_t v12 = v11[5];
      if (v12)
      {
        if ((*(unsigned char *)(*v7 + v12) & 8) != 0)
        {
          uint64_t v4 = *(unsigned int *)(a1 + 944);
          goto LABEL_21;
        }
      }
    }
  }
  if (!sub_F672F0(a1 + 32, v4)
    && *((unsigned __int16 *)v6 + 18) == *(unsigned __int16 *)(v8 + 36)
    && *((_DWORD *)v6 + 8) == *(_DWORD *)(v8 + 32))
  {
    uint64_t v4 = *(unsigned int *)(a1 + 948);
LABEL_21:
    uint64_t v18 = v4;
    return v4 | (unint64_t)(v18 << 32);
  }
  if (sub_F66598(a1 + 32, v4))
  {
    unint64_t v14 = v6[1];
    uint64_t v15 = (unsigned __int16 *)((char *)v14 - *v14);
    unsigned int v16 = *v15;
    if (*((unsigned char *)v6 + 38))
    {
      if (v16 < 5 || (unsigned int v17 = v15[2]) == 0)
      {
LABEL_25:
        __int16 v19 = 0;
LABEL_26:
        unsigned __int16 v20 = v19 + 18000;
        unsigned __int16 v21 = v19 - 18000;
        if ((unsigned __int16)(v20 >> 5) < 0x465u) {
          unsigned __int16 v21 = v20;
        }
        unsigned __int16 v22 = *(int **)(v8 + 8);
        uint64_t v23 = (unsigned __int16 *)((char *)v22 - *v22);
        unsigned int v24 = *v23;
        if (*(unsigned char *)(v8 + 38))
        {
          if (v24 < 9 || (unsigned int v25 = v23[4]) == 0)
          {
LABEL_35:
            int v26 = 0;
LABEL_36:
            int v27 = v26 - v21;
            if (v27 > 18000) {
              v27 -= 36000;
            }
            if (v27 < -17999) {
              v27 += 36000;
            }
            double v28 = fabs((double)v27 / 100.0);
            double v73 = v28;
            int v29 = sub_F66B44(a1 + 32, v4);
            uint64_t v31 = 812;
            if (v29) {
              uint64_t v31 = 810;
            }
            LOWORD(v30) = *(_WORD *)(a1 + v31);
            if (v28 < (double)v30) {
              goto LABEL_82;
            }
            unsigned __int16 v32 = sub_F66A9C((uint64_t *)(a1 + 32), v4);
            if (*(unsigned __int16 *)(a1 + 814) > v32) {
              goto LABEL_82;
            }
            unsigned __int16 v33 = v32;
            unsigned __int16 v34 = sub_F674A0((uint64_t *)(a1 + 32), v4);
            if (!v34) {
              goto LABEL_82;
            }
            double v35 = log((double)v34);
            double v36 = v35 / log(*(long double *)(a1 + 936));
            double v72 = v36;
            int v37 = sub_EFB0C8(&v73, (double **)(a1 + 816));
            uint64_t v38 = *(double **)(a1 + 840);
            double v39 = *v38;
            if (v36 <= *v38) {
              goto LABEL_57;
            }
            double v40 = *(double **)(a1 + 848);
            if ((char *)v40 - (char *)v38 >= 16)
            {
              if ((char *)v40 - (char *)v38 != 16)
              {
                unint64_t v41 = (unint64_t)((char *)v40 - (char *)v38) >> 4;
                do
                {
                  unint64_t v42 = (4 * v41) & 0xFFFFFFFFFFFFFFF0;
                  _X13 = (char *)v38 + v42;
                  __asm { PRFM            #0, [X13] }
                  unint64_t v48 = &v38[2 * (v41 >> 1)];
                  _X12 = (char *)v48 + v42;
                  __asm { PRFM            #0, [X12] }
                  if (*v48 >= v36) {
                    unint64_t v51 = 0;
                  }
                  else {
                    unint64_t v51 = v41 >> 1;
                  }
                  v38 += 2 * v51;
                  v41 -= v41 >> 1;
                }
                while ((uint64_t)v41 > 1);
                double v39 = *v38;
              }
              v38 += 2 * (v39 < v36);
            }
            if (v38 == v40)
            {
              double v53 = *(v40 - 1);
            }
            else
            {
              double v52 = *(v38 - 2);
              if (v52 == *v38)
              {
LABEL_57:
                double v53 = v38[1];
                goto LABEL_60;
              }
              double v53 = *(v38 - 1) + (v36 - v52) / (*v38 - v52) * (v38[1] - *(v38 - 1));
            }
LABEL_60:
            double v54 = v53 * (double)v37;
            if (v54 >= 0.0)
            {
              if (v54 < 4.50359963e15)
              {
                uint64_t v55 = (uint64_t)(v54 + v54) + 1;
LABEL_67:
                double v54 = (double)(v55 >> 1);
              }
            }
            else if (v54 > -4.50359963e15)
            {
              uint64_t v55 = (uint64_t)(v54 + v54);
              if (v55 >= 1) {
                --v55;
              }
              goto LABEL_67;
            }
            int v56 = (int)v54;
            unsigned int v71 = (int)v54;
            if (v33)
            {
              double v57 = (double)v33;
              unsigned int v58 = (unsigned __int16)sub_ECBB58((uint64_t)v6);
              unsigned int v59 = (unsigned __int16)sub_ECBB58(v8);
              if (v58 < v59) {
                unsigned int v59 = v58;
              }
              if (v59 <= 1) {
                unsigned int v59 = 1;
              }
              double v68 = v57 / (double)v59;
              if (*(unsigned char *)(a1 + 912))
              {
                double v60 = log(v57 / (double)v59);
                double v68 = v60 / log(*(long double *)(a1 + 936));
              }
              int v70 = sub_EFB0C8(&v68, (double **)(a1 + 864));
              double v61 = sub_EFB1E4(&v72, (double **)(a1 + 888));
              unsigned int v71 = sub_EFB060(&v70, v61) + v56;
            }
            if (sub_F667D8(a1 + 32, v4))
            {
              sub_EFB2A8((int *)&v71, *(double *)(a1 + 928));
              uint64_t v4 = v71;
              goto LABEL_21;
            }
            if (sub_F67274(a1 + 32, v4)) {
              sub_EFB2A8((int *)&v71, *(double *)(a1 + 920));
            }
            if (v71)
            {
              sub_EFD2BC(a1, v4, a3);
              double v68 = v62;
              uint64_t v69 = v63;
              LODWORD(v4) = v71;
              uint64_t v64 = (double **)(a1 + 960);
              double v65 = sub_EFB1E4((double *)&v69, (double **)(a1 + 960));
              uint64_t v18 = sub_EFB060((int *)&v71, v65);
              double v66 = sub_EFB1E4(&v68, v64);
              sub_EFB060((int *)&v71, v66);
              return v4 | (unint64_t)(v18 << 32);
            }
LABEL_82:
            LODWORD(v4) = 0;
            uint64_t v18 = 0;
            return v4 | (unint64_t)(v18 << 32);
          }
        }
        else
        {
          if (v24 < 5) {
            goto LABEL_35;
          }
          unsigned int v25 = v23[2];
          if (!v25) {
            goto LABEL_35;
          }
        }
        int v26 = *(unsigned __int16 *)((char *)v22 + v25);
        goto LABEL_36;
      }
    }
    else
    {
      if (v16 < 9) {
        goto LABEL_25;
      }
      unsigned int v17 = v15[4];
      if (!v17) {
        goto LABEL_25;
      }
    }
    __int16 v19 = *(_WORD *)((char *)v14 + v17);
    goto LABEL_26;
  }
  LODWORD(v4) = 0;
  uint64_t v18 = 0;
  return v4 | (unint64_t)(v18 << 32);
}

void sub_EFD2BC(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  sub_EFE6D8((char *)a1, a2, a1 + 1008);
  BOOL v5 = *(uint64_t **)(a1 + 1008);
  uint64_t v6 = *(uint64_t **)(a1 + 1016);
  if (v5 != v6)
  {
    double v7 = 0.0;
    double v8 = 0.0;
    double v9 = 0.0;
    double v10 = 0.0;
    while (1)
    {
      double v11 = sub_32A35C(*(void *)(a1 + 8), *v5, 0);
      double v12 = v11;
      BOOL v13 = *(uint64_t *)&v11 <= -1 || ((*(void *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF;
      BOOL v14 = v13 && (unint64_t)(*(void *)&v11 - 1) >= 0xFFFFFFFFFFFFFLL;
      BOOL v15 = !v14 || (*(void *)&v11 & 0x7FFFFFFFFFFFFFFFLL) == 0;
      if (v15 && v11 > 0.0) {
        break;
      }
LABEL_7:
      if (++v5 == v6) {
        return;
      }
    }
    if (*(unsigned char *)(a1 + 956))
    {
      double v16 = fmax((double)(unsigned __int16)sub_3AC808(*(void *)(a1 + 8), *v5), 1.0);
    }
    else if (*(unsigned char *)(a1 + 957))
    {
      double v17 = (double)(unsigned __int16)sub_3AC808(*(void *)(a1 + 8), *v5);
      if (v17 < 1.0) {
        double v17 = 1.0;
      }
      double v18 = log(v17);
      double v16 = fmax(v18 / log(*(long double *)(a1 + 936)), 0.1);
    }
    else
    {
      double v16 = 1.0;
    }
    uint64_t v19 = *(void *)(a1 + 16);
    uint64_t v20 = *v5;
    int v21 = sub_506C((uint64_t)a3);
    unsigned __int16 v22 = sub_51B4((uint64_t)a3);
    double v54 = 0;
    uint64_t v55 = 0;
    uint64_t v23 = (int *)sub_3AF660(v19, v20);
    double v24 = -1.0;
    if (!v23 || (unsigned int v25 = (unsigned int *)sub_3AF78C(v19, v23, 0, &v54)) == 0 || (v28 = *v25, !v28))
    {
LABEL_33:
      if ((*(uint64_t *)&v24 <= -1 || ((*(void *)&v24 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
        && (unint64_t)(*(void *)&v24 - 1) >= 0xFFFFFFFFFFFFFLL
        && (*(void *)&v24 & 0x7FFFFFFFFFFFFFFFLL) != 0
        || v24 <= 0.0)
      {
        double v33 = 1.0;
      }
      else
      {
        double v33 = v12 / v24;
      }
      unint64_t v34 = sub_3A5DDC(*(void *)(a1 + 24), *v5);
      double v54 = 0;
      uint64_t v55 = 0;
      v53[0] = 0;
      v53[1] = 0;
      sub_EF4794(a1 + 304, v34, a3, &v54, v53);
      BOOL v38 = *(uint64_t *)&v35 > -1 && ((*(void *)&v35 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF
         || (unint64_t)(*(void *)&v35 - 1) < 0xFFFFFFFFFFFFFLL
         || (*(void *)&v35 & 0x7FFFFFFFFFFFFFFFLL) == 0;
      double v39 = v8;
      if (v38)
      {
        double v39 = v8;
        if (v35 > 0.0) {
          double v39 = v16 * (v12 / v35);
        }
      }
      double v40 = v16 * v33;
      if (*(unsigned char *)(a1 + 958))
      {
        if (v40 > v8)
        {
          double v10 = v16;
          double v8 = v16 * v33;
        }
        if (v39 > v7)
        {
          double v9 = v16;
          double v7 = v39;
        }
      }
      else
      {
        double v8 = v8 + v40;
        double v7 = v7 + v39;
        double v9 = v9 + v16;
        double v10 = v10 + v16;
      }
      goto LABEL_7;
    }
    if (v28 == 1)
    {
      if (!*(unsigned char *)(v19 + 3874))
      {
        LOWORD(v26) = *((_WORD *)v25 + 3);
        double v24 = (double)v26 / 100.0;
      }
      goto LABEL_33;
    }
    unsigned int v41 = (unsigned __int16)(1440 * (v21 + 6 - 7 * ((9363 * (v21 + 6)) >> 16))) + v22;
    unint64_t v42 = (unsigned __int16 *)(v25 + 1);
    int v43 = (unsigned __int16 *)(v25 + 1);
    unint64_t v44 = *v25;
    do
    {
      unint64_t v45 = (unsigned __int16 *)((char *)v43 + ((2 * v44) & 0x3FFFFFFFCLL));
      unsigned int v47 = *v45;
      unint64_t v46 = v45 + 2;
      unint64_t v48 = v44 >> 1;
      v44 += ~(v44 >> 1);
      if (v41 < v47) {
        unint64_t v44 = v48;
      }
      else {
        int v43 = v46;
      }
    }
    while (v44);
    uint64_t v49 = &v42[2 * v28];
    if (v43 == v49)
    {
      uint64_t v50 = v43 - 2;
    }
    else
    {
      if (v43 != v42) {
        uint64_t v49 = v43;
      }
      uint64_t v50 = v49 - 2;
      if (v43 != v42) {
        goto LABEL_75;
      }
    }
    int v43 = (unsigned __int16 *)(v25 + 1);
LABEL_75:
    unsigned int v51 = *v50;
    if (v41 < v51) {
      v51 -= 10080;
    }
    unsigned int v52 = *v43;
    if (v41 > v52) {
      v52 += 10080;
    }
    LOWORD(v26) = v50[1];
    LOWORD(v27) = v43[1];
    double v24 = (double)v26 / 100.0
        + ((double)v27 / 100.0 - (double)v26 / 100.0) * (double)(int)(v41 - v51) / (double)(int)(v52 - v51);
    goto LABEL_33;
  }
}

uint64_t sub_EFD6C0(uint64_t a1, void *a2)
{
  *(unsigned char *)a1 = 1;
  *(_OWORD *)(a1 + 2) = 0u;
  uint64_t v4 = (_WORD *)(a1 + 2);
  *(_OWORD *)(a1 + 18) = 0u;
  *(_OWORD *)(a1 + 34) = 0u;
  double v65 = (char **)(a1 + 56);
  double v66 = (char **)(a1 + 8);
  *(_OWORD *)(a1 + 50) = 0u;
  uint64_t v67 = a1 + 80;
  uint64_t v68 = a1 + 32;
  *(_OWORD *)(a1 + 66) = 0u;
  *(_OWORD *)(a1 + 82) = 0u;
  *(void *)(a1 + 97) = 0;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(a1 + 112) = _Q0;
  *(void *)(a1 + 128) = 0x4024000000000000;
  *(void *)(a1 + 136) = 0x8000000080000000;
  *(_DWORD *)(a1 + 144) = 0;
  double v10 = (BOOL *)(a1 + 144);
  *(void *)(a1 + 152) = 0;
  uint64_t v64 = a1 + 152;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 147) = 0;
  HIBYTE(v73[2]) = 7;
  strcpy((char *)v73, "enabled");
  *(unsigned char *)a1 = sub_29D62C(a2, (uint64_t)v73);
  if (SHIBYTE(v73[2]) < 0) {
    operator delete(v73[0]);
  }
  v73[0] = (char *)operator new(0x38uLL);
  *(_WORD *)&v63[50] = 0;
  *(_DWORD *)&v63[52] = 0;
  *(void *)&v63[56] = 0x8000000000000038;
  *(_OWORD *)&v73[1] = xmmword_20B99E0;
  strcpy(v73[0], "min_deviation_from_straight_against_driving_side_turn");
  strcpy(v63, "nst_driving_sideom_straight_agaimin_deviation_fr5");
  if (sub_58070(a2, (uint64_t)v73))
  {
    double v11 = (char *)operator new(0x38uLL);
    __p = v11;
    long long v72 = *(_OWORD *)&v63[48];
    *(_OWORD *)double v11 = *(_OWORD *)&v63[32];
    *((_OWORD *)v11 + 1) = *(_OWORD *)&v63[16];
    *((_OWORD *)v11 + 2) = *(_OWORD *)v63;
    strcpy(v11 + 45, "ide_turn");
  }
  else
  {
    __p = operator new(0x20uLL);
    long long v72 = xmmword_20B91A0;
    strcpy((char *)__p, "min_deviation_from_straight");
  }
  *uint64_t v4 = sub_376928(a2, (uint64_t)&__p);
  if (SHIBYTE(v72) < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v73[2]) & 0x80000000) == 0) {
      goto LABEL_8;
    }
  }
  else if ((SHIBYTE(v73[2]) & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(v73[0]);
LABEL_8:
  v73[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v73[1] = xmmword_20B93B0;
  strcpy(v73[0], "min_deviation_from_straight_driving_side_turn");
  *(_WORD *)(a1 + 4) = sub_376928(a2, (uint64_t)v73);
  if (SHIBYTE(v73[2]) < 0) {
    operator delete(v73[0]);
  }
  v73[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v63[48] = xmmword_20B91A0;
  *(_OWORD *)&v73[1] = xmmword_20B91A0;
  strcpy(v73[0], "min_number_of_crossed_trips");
  *(_WORD *)(a1 + 6) = sub_376928(a2, (uint64_t)v73);
  if (SHIBYTE(v73[2]) < 0) {
    operator delete(v73[0]);
  }
  v73[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v73[1] = *(_OWORD *)&v63[48];
  strcpy(v73[0], "use_trip_crossing_ratio_log");
  *(unsigned char *)(a1 + 104) = sub_29D62C(a2, (uint64_t)v73);
  if (SHIBYTE(v73[2]) < 0) {
    operator delete(v73[0]);
  }
  HIBYTE(v73[2]) = 18;
  strcpy((char *)v73, "num_trips_log_base");
  *(double *)(a1 + 128) = sub_5C7E8(a2, (uint64_t)v73);
  if (SHIBYTE(v73[2]) < 0) {
    operator delete(v73[0]);
  }
  HIBYTE(v73[2]) = 19;
  strcpy((char *)v73, "uncontrolled_factor");
  *(double *)(a1 + 112) = sub_5C7E8(a2, (uint64_t)v73);
  if (SHIBYTE(v73[2]) < 0) {
    operator delete(v73[0]);
  }
  v73[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v73[1] = xmmword_20B8890;
  strcpy(v73[0], "parking_lot_transition_factor");
  *(double *)(a1 + 120) = sub_5C7E8(a2, (uint64_t)v73);
  if (SHIBYTE(v73[2]) < 0) {
    operator delete(v73[0]);
  }
  HIBYTE(v73[2]) = 19;
  strcpy((char *)v73, "ferry_entry_penalty");
  *(_DWORD *)(a1 + 136) = sub_319F48(a2, (uint64_t)v73);
  if (SHIBYTE(v73[2]) < 0) {
    operator delete(v73[0]);
  }
  v73[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v73[1] = xmmword_20B9260;
  strcpy(v73[0], "single_carriageway_u_turn_penalty");
  *(_DWORD *)(a1 + 140) = sub_319F48(a2, (uint64_t)v73);
  if (SHIBYTE(v73[2]) < 0) {
    operator delete(v73[0]);
  }
  HIBYTE(v73[2]) = 20;
  strcpy((char *)v73, "use_ahead_congestion");
  *double v10 = sub_29D62C(a2, (uint64_t)v73);
  if (SHIBYTE(v73[2]) < 0) {
    operator delete(v73[0]);
  }
  HIBYTE(v73[2]) = 21;
  strcpy((char *)v73, "use_before_congestion");
  *(unsigned char *)(a1 + 145) = sub_29D62C(a2, (uint64_t)v73);
  if (SHIBYTE(v73[2]) < 0) {
    operator delete(v73[0]);
  }
  v73[0] = (char *)operator new(0x19uLL);
  *(_OWORD *)&v63[48] = xmmword_20B9250;
  *(_OWORD *)&v73[1] = xmmword_20B9250;
  strcpy(v73[0], "use_incoming_congestion");
  *(unsigned char *)(a1 + 146) = sub_29D62C(a2, (uint64_t)v73);
  if (SHIBYTE(v73[2]) < 0) {
    operator delete(v73[0]);
  }
  v73[0] = (char *)operator new(0x19uLL);
  *(_OWORD *)&v73[1] = *(_OWORD *)&v63[48];
  strcpy(v73[0], "use_outgoing_congestion");
  *(unsigned char *)(a1 + 147) = sub_29D62C(a2, (uint64_t)v73);
  if (SHIBYTE(v73[2]) < 0) {
    operator delete(v73[0]);
  }
  v73[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v73[1] = xmmword_20B91B0;
  strcpy(v73[0], "use_trip_weighted_congestion");
  *(unsigned char *)(a1 + 148) = sub_29D62C(a2, (uint64_t)v73);
  if (SHIBYTE(v73[2]) < 0) {
    operator delete(v73[0]);
  }
  v73[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v73[1] = xmmword_20B9390;
  strcpy(v73[0], "use_trip_log_weighted_congestion");
  *(unsigned char *)(a1 + 149) = sub_29D62C(a2, (uint64_t)v73);
  if (SHIBYTE(v73[2]) < 0) {
    operator delete(v73[0]);
  }
  strcpy((char *)v73, "use_maximum_congestion");
  HIBYTE(v73[2]) = 22;
  *(unsigned char *)(a1 + 150) = sub_29D62C(a2, (uint64_t)v73);
  if (SHIBYTE(v73[2]) < 0) {
    operator delete(v73[0]);
  }
  HIBYTE(v73[2]) = 17;
  strcpy((char *)v73, "angle_trip_factor");
  double v12 = (uint64_t *)sub_5C4AC(a2, (uint64_t)v73);
  BOOL v13 = v12;
  *(void *)&v63[48] = a2;
  if (SHIBYTE(v73[2]) < 0)
  {
    operator delete(v73[0]);
    uint64_t v14 = *v13;
    uint64_t v15 = v13[1];
    if (*v13 == v15) {
      goto LABEL_52;
    }
    while (1)
    {
LABEL_46:
      if (*(_DWORD *)(v14 + 8) != 2)
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_23FDF58;
      }
      double v16 = *(void **)v14;
      HIBYTE(v73[2]) = 9;
      strcpy((char *)v73, "threshold");
      double v70 = sub_5C7E8(v16, (uint64_t)v73);
      HIBYTE(v72) = 6;
      strcpy((char *)&__p, "factor");
      double v69 = sub_5C7E8(v16, (uint64_t)&__p);
      sub_D4EC6C(v68, &v70, &v69);
      if (SHIBYTE(v72) < 0)
      {
        operator delete(__p);
        if (SHIBYTE(v73[2]) < 0) {
LABEL_51:
        }
          operator delete(v73[0]);
      }
      else if (SHIBYTE(v73[2]) < 0)
      {
        goto LABEL_51;
      }
      v14 += 16;
      if (v14 == v15) {
        goto LABEL_52;
      }
    }
  }
  uint64_t v14 = *v12;
  uint64_t v15 = v12[1];
  if (*v12 != v15) {
    goto LABEL_46;
  }
LABEL_52:
  uint64_t v17 = *(void *)(a1 + 32);
  double v18 = *(double **)(a1 + 40);
  unint64_t v19 = 126 - 2 * __clz(((uint64_t)v18 - v17) >> 4);
  if (v18 == (double *)v17) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = v19;
  }
  sub_EFE7E8(v17, v18, (uint64_t)v73, v20, 1);
  HIBYTE(v73[2]) = 20;
  strcpy((char *)v73, "crossing_trip_factor");
  int v21 = (uint64_t *)sub_5C4AC(*(void **)&v63[48], (uint64_t)v73);
  unsigned __int16 v22 = v21;
  if (SHIBYTE(v73[2]) < 0)
  {
    operator delete(v73[0]);
    uint64_t v23 = *v22;
    uint64_t v24 = v22[1];
    if (*v22 == v24) {
      goto LABEL_67;
    }
    while (1)
    {
LABEL_61:
      if (*(_DWORD *)(v23 + 8) != 2)
      {
        unsigned int v59 = __cxa_allocate_exception(8uLL);
        *unsigned int v59 = &off_23FDF58;
      }
      unsigned int v25 = *(void **)v23;
      HIBYTE(v73[2]) = 9;
      strcpy((char *)v73, "threshold");
      double v70 = sub_5C7E8(v25, (uint64_t)v73);
      HIBYTE(v72) = 6;
      strcpy((char *)&__p, "factor");
      double v69 = sub_5C7E8(v25, (uint64_t)&__p);
      sub_D4EC6C(v67, &v70, &v69);
      if (SHIBYTE(v72) < 0)
      {
        operator delete(__p);
        if (SHIBYTE(v73[2]) < 0) {
LABEL_66:
        }
          operator delete(v73[0]);
      }
      else if (SHIBYTE(v73[2]) < 0)
      {
        goto LABEL_66;
      }
      v23 += 16;
      if (v23 == v24) {
        goto LABEL_67;
      }
    }
  }
  uint64_t v23 = *v21;
  uint64_t v24 = v21[1];
  if (*v21 != v24) {
    goto LABEL_61;
  }
LABEL_67:
  uint64_t v26 = *(void *)(a1 + 80);
  unint64_t v27 = *(double **)(a1 + 88);
  unint64_t v28 = 126 - 2 * __clz(((uint64_t)v27 - v26) >> 4);
  if (v27 == (double *)v26) {
    uint64_t v29 = 0;
  }
  else {
    uint64_t v29 = v28;
  }
  sub_EFE7E8(v26, v27, (uint64_t)v73, v29, 1);
  HIBYTE(v73[2]) = 11;
  strcpy((char *)v73, "angle_times");
  unint64_t v30 = (uint64_t *)sub_5C4AC(*(void **)&v63[48], (uint64_t)v73);
  uint64_t v31 = v30;
  if (SHIBYTE(v73[2]) < 0)
  {
    operator delete(v73[0]);
    uint64_t v33 = *v31;
    uint64_t v32 = v31[1];
    if (*v31 == v32) {
      goto LABEL_82;
    }
    while (1)
    {
LABEL_76:
      if (*(_DWORD *)(v33 + 8) != 2)
      {
        double v60 = __cxa_allocate_exception(8uLL);
        *double v60 = &off_23FDF58;
      }
      unint64_t v34 = *(void **)v33;
      HIBYTE(v73[2]) = 9;
      strcpy((char *)v73, "threshold");
      double v70 = sub_5C7E8(v34, (uint64_t)v73);
      HIBYTE(v72) = 4;
      strcpy((char *)&__p, "time");
      LODWORD(v69) = sub_319F48(v34, (uint64_t)&__p);
      sub_EFC730(v66, &v70, &v69);
      if (SHIBYTE(v72) < 0)
      {
        operator delete(__p);
        if (SHIBYTE(v73[2]) < 0) {
LABEL_81:
        }
          operator delete(v73[0]);
      }
      else if (SHIBYTE(v73[2]) < 0)
      {
        goto LABEL_81;
      }
      v33 += 16;
      if (v33 == v32) {
        goto LABEL_82;
      }
    }
  }
  uint64_t v33 = *v30;
  uint64_t v32 = v30[1];
  if (*v30 != v32) {
    goto LABEL_76;
  }
LABEL_82:
  uint64_t v35 = *(void *)(a1 + 8);
  unint64_t v36 = *(void *)(a1 + 16);
  unint64_t v37 = 126 - 2 * __clz((uint64_t)(v36 - v35) >> 4);
  if (v36 == v35) {
    uint64_t v38 = 0;
  }
  else {
    uint64_t v38 = v37;
  }
  sub_EFF9D8(v35, v36, (uint64_t)v73, v38, 1);
  HIBYTE(v73[2]) = 19;
  strcpy((char *)v73, "trip_crossing_times");
  double v39 = (uint64_t *)sub_5C4AC(*(void **)&v63[48], (uint64_t)v73);
  double v40 = v39;
  if (SHIBYTE(v73[2]) < 0)
  {
    operator delete(v73[0]);
    uint64_t v42 = *v40;
    uint64_t v41 = v40[1];
    if (*v40 == v41) {
      goto LABEL_97;
    }
    while (1)
    {
LABEL_91:
      if (*(_DWORD *)(v42 + 8) != 2)
      {
        double v61 = __cxa_allocate_exception(8uLL);
        *double v61 = &off_23FDF58;
      }
      int v43 = *(void **)v42;
      HIBYTE(v73[2]) = 9;
      strcpy((char *)v73, "threshold");
      double v70 = sub_5C7E8(v43, (uint64_t)v73);
      HIBYTE(v72) = 4;
      strcpy((char *)&__p, "time");
      LODWORD(v69) = sub_319F48(v43, (uint64_t)&__p);
      sub_EFC730(v65, &v70, &v69);
      if (SHIBYTE(v72) < 0)
      {
        operator delete(__p);
        if (SHIBYTE(v73[2]) < 0) {
LABEL_96:
        }
          operator delete(v73[0]);
      }
      else if (SHIBYTE(v73[2]) < 0)
      {
        goto LABEL_96;
      }
      v42 += 16;
      if (v42 == v41) {
        goto LABEL_97;
      }
    }
  }
  uint64_t v42 = *v39;
  uint64_t v41 = v39[1];
  if (*v39 != v41) {
    goto LABEL_91;
  }
LABEL_97:
  uint64_t v44 = *(void *)(a1 + 56);
  unint64_t v45 = *(void *)(a1 + 64);
  unint64_t v46 = 126 - 2 * __clz((uint64_t)(v45 - v44) >> 4);
  if (v45 == v44) {
    uint64_t v47 = 0;
  }
  else {
    uint64_t v47 = v46;
  }
  sub_EFF9D8(v44, v45, (uint64_t)v73, v47, 1);
  HIBYTE(v73[2]) = 18;
  strcpy((char *)v73, "congestion_factors");
  unint64_t v48 = (uint64_t *)sub_5C4AC(*(void **)&v63[48], (uint64_t)v73);
  uint64_t v49 = v48;
  if (SHIBYTE(v73[2]) < 0)
  {
    operator delete(v73[0]);
    uint64_t v50 = *v49;
    uint64_t v51 = v49[1];
    if (*v49 == v51) {
      goto LABEL_112;
    }
    while (1)
    {
LABEL_106:
      if (*(_DWORD *)(v50 + 8) != 2)
      {
        double v62 = __cxa_allocate_exception(8uLL);
        *double v62 = &off_23FDF58;
      }
      unsigned int v52 = *(void **)v50;
      HIBYTE(v73[2]) = 9;
      strcpy((char *)v73, "threshold");
      double v70 = sub_5C7E8(v52, (uint64_t)v73);
      HIBYTE(v72) = 6;
      strcpy((char *)&__p, "factor");
      double v69 = sub_5C7E8(v52, (uint64_t)&__p);
      sub_D4EC6C(v64, &v70, &v69);
      if (SHIBYTE(v72) < 0)
      {
        operator delete(__p);
        if (SHIBYTE(v73[2]) < 0) {
LABEL_111:
        }
          operator delete(v73[0]);
      }
      else if (SHIBYTE(v73[2]) < 0)
      {
        goto LABEL_111;
      }
      v50 += 16;
      if (v50 == v51) {
        goto LABEL_112;
      }
    }
  }
  uint64_t v50 = *v48;
  uint64_t v51 = v48[1];
  if (*v48 != v51) {
    goto LABEL_106;
  }
LABEL_112:
  uint64_t v53 = *(void *)(a1 + 152);
  double v54 = *(double **)(a1 + 160);
  unint64_t v55 = 126 - 2 * __clz(((uint64_t)v54 - v53) >> 4);
  if (v54 == (double *)v53) {
    uint64_t v56 = 0;
  }
  else {
    uint64_t v56 = v55;
  }
  sub_EFE7E8(v53, v54, (uint64_t)v73, v56, 1);
  return a1;
}

void sub_EFE524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, void **a18, void **a19, void **a20,void **a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v30 - 89) < 0)
  {
    operator delete(*(void **)(v30 - 112));
    uint64_t v32 = *a17;
    if (!*a17)
    {
LABEL_5:
      uint64_t v33 = *a20;
      if (!*a20) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v32 = *a17;
    if (!*a17) {
      goto LABEL_5;
    }
  }
  v29[20] = v32;
  operator delete(v32);
  uint64_t v33 = *a20;
  if (!*a20)
  {
LABEL_6:
    unint64_t v34 = *a18;
    if (!*a18) {
      goto LABEL_7;
    }
    goto LABEL_13;
  }
LABEL_12:
  v29[11] = v33;
  operator delete(v33);
  unint64_t v34 = *a18;
  if (!*a18)
  {
LABEL_7:
    uint64_t v35 = *a21;
    if (!*a21) {
      goto LABEL_8;
    }
    goto LABEL_14;
  }
LABEL_13:
  v29[8] = v34;
  operator delete(v34);
  uint64_t v35 = *a21;
  if (!*a21)
  {
LABEL_8:
    unint64_t v36 = *a19;
    if (!*a19) {
      goto LABEL_9;
    }
    goto LABEL_15;
  }
LABEL_14:
  v29[5] = v35;
  operator delete(v35);
  unint64_t v36 = *a19;
  if (!*a19) {
LABEL_9:
  }
    _Unwind_Resume(exception_object);
LABEL_15:
  _OWORD v29[2] = v36;
  operator delete(v36);
  _Unwind_Resume(exception_object);
}

char *sub_EFE6D8(char *result, uint64_t a2, uint64_t a3)
{
  BOOL v5 = result;
  uint64_t v6 = (char **)(result + 1008);
  *((void *)result + 127) = *((void *)result + 126);
  if (result[952])
  {
    uint64_t v12 = *(void *)(sub_46C8EC(*(void **)(a2 + 16), *(void *)(a2 + 24)) + 32);
    BOOL result = sub_2D5B74(v6, &v12);
  }
  if (v5[953])
  {
    uint64_t v12 = *(void *)(sub_46C8EC(*(void **)a2, *(void *)(a2 + 8)) + 32);
    BOOL result = sub_2D5B74(v6, &v12);
  }
  if (v5[954] || v5[955])
  {
    sub_F675CC((uint64_t *)v5 + 4, a2, 0, (uint64_t *)v5 + 123);
    double v7 = (uint64_t *)*((void *)v5 + 123);
    for (unint64_t i = (uint64_t *)*((void *)v5 + 124); v7 != i; ++v7)
      sub_EFC970(v5, v7, (char **)a3);
    double v9 = *(int **)(a3 + 8);
    unint64_t v10 = 126 - 2 * __clz(((uint64_t)v9 - *(void *)a3) >> 3);
    if (v9 == *(int **)a3) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = v10;
    }
    sub_303770(*(void *)a3, v9, (uint64_t)&v12, v11, 1);
    return (char *)sub_30361C(a3);
  }
  return result;
}

void sub_EFE7E8(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, int a5)
{
uint64_t sub_EFEDA4(double *a1, uint64_t a2, uint64_t a3)
{
  double v3 = *(double *)a2;
  double v4 = *a1;
  if (*(double *)a2 >= *a1 && (v4 < v3 || *(double *)(a2 + 8) >= a1[1]))
  {
    double v9 = *(double *)a3;
    if (*(double *)a3 < v3) {
      goto LABEL_7;
    }
    if (v3 < v9) {
      return 0;
    }
    if (*(double *)(a3 + 8) < *(double *)(a2 + 8))
    {
LABEL_7:
      *(double *)a2 = v9;
      *(double *)a3 = v3;
      unint64_t v10 = (uint64_t *)(a2 + 8);
      uint64_t v11 = *(void *)(a2 + 8);
      *(void *)(a2 + 8) = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = v11;
      double v12 = *(double *)a2;
      double v13 = *a1;
      if (*(double *)a2 < *a1) {
        goto LABEL_8;
      }
      if (v13 < v12) {
        return 1;
      }
      if (*(double *)v10 < a1[1])
      {
LABEL_8:
        *a1 = v12;
        uint64_t v14 = (uint64_t *)(a1 + 1);
        *(double *)a2 = v13;
        uint64_t v15 = *v14;
        *uint64_t v14 = *v10;
        *unint64_t v10 = v15;
        return 2;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    double v5 = *(double *)a3;
    if (*(double *)a3 < v3 || v3 >= v5 && *(double *)(a3 + 8) < *(double *)(a2 + 8))
    {
      *a1 = v5;
      char v6 = (uint64_t *)(a1 + 1);
      *(double *)a3 = v4;
      double v7 = (uint64_t *)(a3 + 8);
      uint64_t v8 = 1;
LABEL_13:
      uint64_t v20 = *v6;
      *char v6 = *v7;
      *double v7 = v20;
      return v8;
    }
    *a1 = v3;
    *(double *)a2 = v4;
    double v17 = a1[1];
    a1[1] = *(double *)(a2 + 8);
    *(double *)(a2 + 8) = v17;
    double v18 = *(double *)a3;
    double v19 = *(double *)a2;
    if (*(double *)a3 < *(double *)a2)
    {
LABEL_12:
      *(double *)a2 = v18;
      *(double *)a3 = v19;
      double v7 = (uint64_t *)(a3 + 8);
      uint64_t v8 = 2;
      char v6 = (uint64_t *)(a2 + 8);
      goto LABEL_13;
    }
    if (v19 >= v18)
    {
      if (*(double *)(a3 + 8) < v17) {
        goto LABEL_12;
      }
      return 1;
    }
    else
    {
      return 1;
    }
  }
}

double *sub_EFEF24(double *a1, double *a2)
{
  double v2 = *a1;
  double v3 = a1[1];
  double v4 = *(a2 - 2);
  if (*a1 >= v4 && (v4 < v2 || v3 >= *(a2 - 1)))
  {
    for (uint64_t i = a1 + 2; i < a2 && v2 >= *i && (*i < v2 || v3 >= i[1]); i += 2)
      ;
  }
  else
  {
    uint64_t i = a1;
    do
    {
      double v6 = i[2];
      i += 2;
      double v7 = v6;
    }
    while (v2 >= v6 && (v7 < v2 || v3 >= i[1]));
  }
  if (i < a2)
  {
    for (a2 -= 2; v2 < v4 || v4 >= v2 && v3 < a2[1]; a2 -= 2)
    {
      double v8 = *(a2 - 2);
      double v4 = v8;
    }
  }
  if (i < a2)
  {
    double v9 = *i;
    double v10 = *a2;
    do
    {
      double *i = v10;
      *a2 = v9;
      uint64_t v11 = *((void *)i + 1);
      i[1] = a2[1];
      *((void *)a2 + 1) = v11;
      do
      {
        double v12 = i[2];
        i += 2;
        double v9 = v12;
      }
      while (v2 >= v12 && (v9 < v2 || v3 >= i[1]));
      do
      {
        do
        {
          double v13 = *(a2 - 2);
          a2 -= 2;
          double v10 = v13;
        }
        while (v2 < v13);
      }
      while (v10 >= v2 && v3 < a2[1]);
    }
    while (i < a2);
  }
  if (i - 2 != a1)
  {
    *a1 = *(i - 2);
    a1[1] = *(i - 1);
  }
  *(i - 2) = v2;
  *(i - 1) = v3;
  return i;
}

unint64_t sub_EFF074(double *a1, double *a2)
{
  uint64_t v2 = 0;
  double v3 = *a1;
  double v4 = a1[1];
  while (1)
  {
    double v5 = a1[v2 + 2];
    if (v5 >= v3 && (v3 < v5 || a1[v2 + 3] >= v4)) {
      break;
    }
    v2 += 2;
  }
  unint64_t v6 = (unint64_t)&a1[v2 + 2];
  if (v2 * 8)
  {
    do
    {
      double v7 = *(a2 - 2);
      a2 -= 2;
      double v8 = v7;
    }
    while (v7 >= v3 && (v3 < v8 || a2[1] >= v4));
  }
  else
  {
LABEL_19:
    if (v6 < (unint64_t)a2)
    {
      do
      {
        double v9 = *(a2 - 2);
        a2 -= 2;
        double v10 = v9;
        if (v9 < v3) {
          break;
        }
        if (v3 < v10) {
          goto LABEL_19;
        }
      }
      while (a2[1] >= v4 && v6 < (unint64_t)a2);
    }
  }
  if (v6 >= (unint64_t)a2)
  {
    unint64_t v13 = (unint64_t)&a1[v2 + 2];
  }
  else
  {
    double v12 = *a2;
    unint64_t v13 = (unint64_t)&a1[v2 + 2];
    uint64_t v14 = a2;
    do
    {
      *(double *)unint64_t v13 = v12;
      *uint64_t v14 = v5;
      uint64_t v15 = *(void *)(v13 + 8);
      *(double *)(v13 + 8) = v14[1];
      *((void *)v14 + 1) = v15;
      do
      {
        do
        {
          double v16 = *(double *)(v13 + 16);
          v13 += 16;
          double v5 = v16;
        }
        while (v16 < v3);
      }
      while (v3 >= v5 && *(double *)(v13 + 8) < v4);
      do
      {
        double v17 = *(v14 - 2);
        v14 -= 2;
        double v12 = v17;
      }
      while (v17 >= v3 && (v3 < v12 || v14[1] >= v4));
    }
    while (v13 < (unint64_t)v14);
  }
  if ((double *)(v13 - 16) != a1)
  {
    *a1 = *(double *)(v13 - 16);
    a1[1] = *(double *)(v13 - 8);
  }
  *(double *)(v13 - 16) = v3;
  *(double *)(v13 - 8) = v4;
  return v13 - 16;
}

BOOL sub_EFF1BC(uint64_t a1, double *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      double v18 = *(a2 - 2);
      double v19 = *(double *)a1;
      if (v18 < *(double *)a1 || v19 >= v18 && *(a2 - 1) < *(double *)(a1 + 8))
      {
        *(double *)a1 = v18;
        *(a2 - 2) = v19;
        uint64_t v20 = *(void *)(a1 + 8);
        *(double *)(a1 + 8) = *(a2 - 1);
        *((void *)a2 - 1) = v20;
      }
      return result;
    case 3:
      sub_EFEDA4((double *)a1, a1 + 16, (uint64_t)(a2 - 2));
      return 1;
    case 4:
      sub_EFEDA4((double *)a1, a1 + 16, a1 + 32);
      double v21 = *(a2 - 2);
      double v22 = *(double *)(a1 + 32);
      if (v21 >= v22 && (v22 < v21 || *(a2 - 1) >= *(double *)(a1 + 40))) {
        return 1;
      }
      *(double *)(a1 + 32) = v21;
      *(a2 - 2) = v22;
      uint64_t v23 = *(void *)(a1 + 40);
      *(double *)(a1 + 40) = *(a2 - 1);
      *((void *)a2 - 1) = v23;
      double v24 = *(double *)(a1 + 32);
      double v25 = *(double *)(a1 + 16);
      if (v24 >= v25)
      {
        if (v25 < v24) {
          return 1;
        }
        double v27 = *(double *)(a1 + 40);
        double v26 = *(double *)(a1 + 24);
        if (v27 >= v26) {
          return 1;
        }
      }
      else
      {
        double v26 = *(double *)(a1 + 24);
        double v27 = *(double *)(a1 + 40);
      }
      *(double *)(a1 + 16) = v24;
      *(double *)(a1 + 24) = v27;
      *(double *)(a1 + 32) = v25;
      *(double *)(a1 + 40) = v26;
      double v28 = *(double *)a1;
      if (v24 < *(double *)a1)
      {
        double v29 = *(double *)(a1 + 8);
LABEL_44:
        *(double *)a1 = v24;
        *(double *)(a1 + 8) = v27;
        BOOL result = 1;
        *(double *)(a1 + 16) = v28;
        *(double *)(a1 + 24) = v29;
        return result;
      }
      if (v28 >= v24)
      {
        double v29 = *(double *)(a1 + 8);
        if (v27 < v29) {
          goto LABEL_44;
        }
      }
      return 1;
    case 5:
      sub_EFF4D8(a1, a1 + 16, a1 + 32, a1 + 48, (uint64_t)(a2 - 2));
      return 1;
    default:
      unint64_t v6 = (double *)(a1 + 32);
      sub_EFEDA4((double *)a1, a1 + 16, a1 + 32);
      double v7 = (double *)(a1 + 48);
      if ((double *)(a1 + 48) == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      while (2)
      {
        double v11 = *v7;
        double v12 = *v6;
        if (*v7 >= *v6)
        {
          if (v12 < v11) {
            goto LABEL_7;
          }
          double v13 = v7[1];
          if (v13 >= v6[1]) {
            goto LABEL_7;
          }
        }
        else
        {
          double v13 = v7[1];
        }
        *double v7 = v12;
        v7[1] = v6[1];
        double v10 = (double *)a1;
        if (v6 == (double *)a1) {
          goto LABEL_6;
        }
        uint64_t v14 = v8;
        while (2)
        {
          uint64_t v16 = a1 + v14;
          double v17 = *(double *)(a1 + v14 + 16);
          if (v11 < v17)
          {
            double v15 = *(double *)(v16 + 24);
LABEL_13:
            v6 -= 2;
            *(double *)(v16 + 32) = v17;
            *(double *)(a1 + v14 + 40) = v15;
            v14 -= 16;
            if (v14 == -32)
            {
              double v10 = (double *)a1;
              goto LABEL_6;
            }
            continue;
          }
          break;
        }
        if (v17 >= v11)
        {
          double v15 = *(double *)(a1 + v14 + 24);
          if (v13 >= v15)
          {
            double v10 = (double *)(a1 + v14 + 32);
            goto LABEL_6;
          }
          goto LABEL_13;
        }
        double v10 = v6;
LABEL_6:
        *double v10 = v11;
        v10[1] = v13;
        if (++v9 == 8) {
          return v7 + 2 == a2;
        }
LABEL_7:
        unint64_t v6 = v7;
        v8 += 16;
        v7 += 2;
        if (v7 != a2) {
          continue;
        }
        return 1;
      }
  }
}

double sub_EFF4D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_EFEDA4((double *)a1, a2, a3);
  double v10 = *(double *)a4;
  double v11 = *(double *)a3;
  if (*(double *)a4 < *(double *)a3 || v11 >= v10 && *(double *)(a4 + 8) < *(double *)(a3 + 8))
  {
    *(double *)a3 = v10;
    *(double *)a4 = v11;
    uint64_t v12 = *(void *)(a3 + 8);
    *(void *)(a3 + 8) = *(void *)(a4 + 8);
    *(void *)(a4 + 8) = v12;
    double v13 = *(double *)a3;
    double v14 = *(double *)a2;
    if (*(double *)a3 < *(double *)a2 || v14 >= v13 && *(double *)(a3 + 8) < *(double *)(a2 + 8))
    {
      *(double *)a2 = v13;
      *(double *)a3 = v14;
      uint64_t v15 = *(void *)(a2 + 8);
      *(void *)(a2 + 8) = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = v15;
      double v16 = *(double *)a2;
      double v17 = *(double *)a1;
      if (*(double *)a2 < *(double *)a1 || v17 >= v16 && *(double *)(a2 + 8) < *(double *)(a1 + 8))
      {
        *(double *)a1 = v16;
        *(double *)a2 = v17;
        uint64_t v18 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a2 + 8) = v18;
      }
    }
  }
  double result = *(double *)a5;
  double v20 = *(double *)a4;
  if (*(double *)a5 < *(double *)a4 || v20 >= result && *(double *)(a5 + 8) < *(double *)(a4 + 8))
  {
    *(double *)a4 = result;
    *(double *)a5 = v20;
    uint64_t v21 = *(void *)(a4 + 8);
    *(void *)(a4 + 8) = *(void *)(a5 + 8);
    *(void *)(a5 + 8) = v21;
    double result = *(double *)a4;
    double v22 = *(double *)a3;
    if (*(double *)a4 < *(double *)a3 || v22 >= result && *(double *)(a4 + 8) < *(double *)(a3 + 8))
    {
      *(double *)a3 = result;
      *(double *)a4 = v22;
      uint64_t v23 = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = *(void *)(a4 + 8);
      *(void *)(a4 + 8) = v23;
      double result = *(double *)a3;
      double v24 = *(double *)a2;
      if (*(double *)a3 < *(double *)a2 || v24 >= result && *(double *)(a3 + 8) < *(double *)(a2 + 8))
      {
        *(double *)a2 = result;
        *(double *)a3 = v24;
        uint64_t v25 = *(void *)(a2 + 8);
        *(void *)(a2 + 8) = *(void *)(a3 + 8);
        *(void *)(a3 + 8) = v25;
        double result = *(double *)a2;
        double v26 = *(double *)a1;
        if (*(double *)a2 < *(double *)a1 || v26 >= result && *(double *)(a2 + 8) < *(double *)(a1 + 8))
        {
          *(double *)a1 = result;
          *(double *)a2 = v26;
          double result = *(double *)(a1 + 8);
          *(void *)(a1 + 8) = *(void *)(a2 + 8);
          *(double *)(a2 + 8) = result;
        }
      }
    }
  }
  return result;
}

uint64_t sub_EFF70C(uint64_t result, uint64_t a2, uint64_t a3, double *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = (double *)(result + 16 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3)
      {
        double v10 = v8[2];
        if (*v8 < v10 || v10 >= *v8 && *(double *)(result + 16 * v7 + 8) < v8[3])
        {
          v8 += 2;
          uint64_t v7 = v9;
        }
      }
      double v11 = *v8;
      double v12 = *a4;
      if (*v8 >= *a4)
      {
        if (v12 >= v11)
        {
          double v13 = a4[1];
          if (v8[1] < v13) {
            return result;
          }
        }
        else
        {
          double v13 = a4[1];
        }
        *a4 = v11;
        a4[1] = v8[1];
        if (v5 >= v7)
        {
          while (1)
          {
            uint64_t v15 = 2 * v7;
            uint64_t v7 = (2 * v7) | 1;
            double v14 = (double *)(result + 16 * v7);
            uint64_t v16 = v15 + 2;
            if (v16 < a3)
            {
              double v17 = v14[2];
              if (*v14 < v17 || v17 >= *v14 && *(double *)(result + 16 * v7 + 8) < v14[3])
              {
                v14 += 2;
                uint64_t v7 = v16;
              }
            }
            double v18 = *v14;
            if (*v14 < v12 || v12 >= v18 && v14[1] < v13) {
              break;
            }
            *uint64_t v8 = v18;
            v8[1] = v14[1];
            uint64_t v8 = v14;
            if (v5 < v7) {
              goto LABEL_14;
            }
          }
        }
        double v14 = v8;
LABEL_14:
        *double v14 = v12;
        v14[1] = v13;
      }
    }
  }
  return result;
}

void *sub_EFF858(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v4 = 0;
    uint64_t v6 = *result;
    uint64_t v5 = result[1];
    uint64_t v7 = result;
    do
    {
      uint64_t v8 = v7;
      uint64_t v9 = v4 + 1;
      v7 += 2 * v4 + 2;
      uint64_t v10 = 2 * v4;
      uint64_t v4 = (2 * v4) | 1;
      uint64_t v11 = v10 + 2;
      if (v11 < a4)
      {
        double v12 = *((double *)v7 + 2);
        if (*(double *)v7 < v12 || v12 >= *(double *)v7 && *(double *)&v8[2 * v9 + 1] < *((double *)v7 + 3))
        {
          v7 += 2;
          uint64_t v4 = v11;
        }
      }
      *uint64_t v8 = *v7;
      v8[1] = v7[1];
    }
    while (v4 <= (uint64_t)((unint64_t)(a4 - 2) >> 1));
    if (v7 == (void *)(a2 - 16))
    {
      *uint64_t v7 = v6;
      v7[1] = v5;
      return result;
    }
    *uint64_t v7 = *(void *)(a2 - 16);
    v7[1] = *(void *)(a2 - 8);
    *(void *)(a2 - 16) = v6;
    *(void *)(a2 - 8) = v5;
    uint64_t v13 = (char *)v7 - (char *)result + 16;
    if (v13 >= 17)
    {
      unint64_t v14 = ((unint64_t)v13 >> 4) - 2;
      unint64_t v15 = v14 >> 1;
      uint64_t v16 = (double *)&result[2 * (v14 >> 1)];
      double v17 = *v16;
      double v18 = *(double *)v7;
      if (*v16 >= *(double *)v7)
      {
        if (v18 < v17) {
          return result;
        }
        double v19 = *((double *)v7 + 1);
        if (*(double *)&result[2 * v15 + 1] >= v19) {
          return result;
        }
      }
      else
      {
        double v19 = *((double *)v7 + 1);
      }
      *(double *)uint64_t v7 = v17;
      v7[1] = result[2 * v15 + 1];
      if (v14 >= 2)
      {
        while (1)
        {
          unint64_t v22 = v15 - 1;
          unint64_t v15 = (v15 - 1) >> 1;
          double v20 = (double *)&result[2 * v15];
          double v23 = *v20;
          if (*v20 < v18)
          {
            double v21 = v20[1];
          }
          else
          {
            if (v18 < v23) {
              break;
            }
            double v21 = *(double *)&result[2 * v15 + 1];
            if (v21 >= v19) {
              break;
            }
          }
          *uint64_t v16 = v23;
          v16[1] = v21;
          uint64_t v16 = (double *)&result[2 * v15];
          if (v22 <= 1) {
            goto LABEL_19;
          }
        }
      }
      double v20 = v16;
LABEL_19:
      *double v20 = v18;
      v20[1] = v19;
    }
  }
  return result;
}

uint64_t sub_EFF9D8(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  unint64_t v10 = result;
LABEL_2:
  uint64_t v11 = a2 - 16;
  unint64_t v12 = v10;
LABEL_3:
  uint64_t v13 = 1 - a4;
  int v64 = a5;
  while (1)
  {
    unint64_t v10 = v12;
    uint64_t v14 = a2 - v12;
    unint64_t v15 = v14 >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          double v27 = *(double *)(a2 - 16);
          double v28 = *(double *)v10;
          if (v27 < *(double *)v10 || v28 >= v27 && *(_DWORD *)(a2 - 8) < *(_DWORD *)(v10 + 8))
          {
            *(double *)unint64_t v10 = v27;
            *(double *)(a2 - 16) = v28;
            int v29 = *(_DWORD *)(v10 + 8);
            *(_DWORD *)(v10 + 8) = *(_DWORD *)(a2 - 8);
            *(_DWORD *)(a2 - 8) = v29;
          }
          return result;
        case 3uLL:
          return sub_EFFFC4(v10, v10 + 16, v11);
        case 4uLL:
          double result = sub_EFFFC4(v10, v10 + 16, v10 + 32);
          double v30 = *(double *)(a2 - 16);
          double v31 = *(double *)(v10 + 32);
          if (v30 >= v31 && (v31 < v30 || *(_DWORD *)(a2 - 8) >= *(_DWORD *)(v10 + 40))) {
            return result;
          }
          *(double *)(v10 + 32) = v30;
          *(double *)(a2 - 16) = v31;
          int v32 = *(_DWORD *)(v10 + 40);
          *(_DWORD *)(v10 + 40) = *(_DWORD *)(a2 - 8);
          *(_DWORD *)(a2 - 8) = v32;
          double v33 = *(double *)(v10 + 32);
          double v34 = *(double *)(v10 + 16);
          if (v33 >= v34)
          {
            if (v34 < v33) {
              return result;
            }
            int v36 = *(_DWORD *)(v10 + 40);
            int v35 = *(_DWORD *)(v10 + 24);
            if (v36 >= v35) {
              return result;
            }
          }
          else
          {
            int v35 = *(_DWORD *)(v10 + 24);
            int v36 = *(_DWORD *)(v10 + 40);
          }
          *(double *)(v10 + 16) = v33;
          *(double *)(v10 + 32) = v34;
          *(_DWORD *)(v10 + 24) = v36;
          *(_DWORD *)(v10 + 40) = v35;
          double v37 = *(double *)v10;
          if (v33 >= *(double *)v10)
          {
            if (v37 < v33) {
              return result;
            }
            int v38 = *(_DWORD *)(v10 + 8);
            if (v36 >= v38) {
              return result;
            }
          }
          else
          {
            int v38 = *(_DWORD *)(v10 + 8);
          }
          *(double *)unint64_t v10 = v33;
          *(double *)(v10 + 16) = v37;
          *(_DWORD *)(v10 + 8) = v36;
          *(_DWORD *)(v10 + 24) = v38;
          return result;
        case 5uLL:
          return sub_F0071C(v10, v10 + 16, v10 + 32, v10 + 48, v11);
        default:
          JUMPOUT(0);
      }
    }
    if (v14 <= 383) {
      break;
    }
    uint64_t v16 = v13;
    if (v13 == 1)
    {
      if (v10 != a2)
      {
        unint64_t v53 = (v15 - 2) >> 1;
        unint64_t v54 = v53 + 1;
        uint64_t v55 = v10 + 16 * v53;
        do
        {
          sub_F00950(v10, a3, v14 >> 4, v55);
          v55 -= 16;
          --v54;
        }
        while (v54);
        unint64_t v56 = (unint64_t)v14 >> 4;
        do
        {
          double result = (uint64_t)sub_F00AA0((uint64_t *)v10, a2, a3, v56);
          a2 -= 16;
        }
        while (v56-- > 2);
      }
      return result;
    }
    unint64_t v17 = v15 >> 1;
    double v18 = (uint64_t *)(v10 + 16 * (v15 >> 1));
    if ((unint64_t)v14 < 0x801)
    {
      sub_EFFFC4((uint64_t)v18, v10, v11);
      if (a5) {
        goto LABEL_15;
      }
    }
    else
    {
      sub_EFFFC4(v10, (uint64_t)v18, v11);
      uint64_t v19 = v11;
      unint64_t v20 = v10 + 16 * v17;
      sub_EFFFC4(v10 + 16, v20 - 16, a2 - 32);
      sub_EFFFC4(v10 + 32, v10 + 16 + 16 * v17, a2 - 48);
      sub_EFFFC4(v20 - 16, (uint64_t)v18, v10 + 16 + 16 * v17);
      uint64_t v21 = *(void *)v10;
      *(void *)unint64_t v10 = *v18;
      uint64_t *v18 = v21;
      int v22 = *(_DWORD *)(v10 + 8);
      *(_DWORD *)(v10 + 8) = *(_DWORD *)(v20 + 8);
      *(_DWORD *)(v20 + 8) = v22;
      uint64_t v11 = v19;
      a5 = v64;
      if (v64) {
        goto LABEL_15;
      }
    }
    double v23 = *(double *)(v10 - 16);
    if (v23 >= *(double *)v10 && (*(double *)v10 < v23 || *(_DWORD *)(v10 - 8) >= *(_DWORD *)(v10 + 8)))
    {
      double result = sub_F00144(v10, a2);
      unint64_t v12 = result;
LABEL_20:
      a5 = 0;
      a4 = -v16;
      goto LABEL_3;
    }
LABEL_15:
    unint64_t v24 = sub_F0029C(v10, a2);
    if ((v25 & 1) == 0) {
      goto LABEL_18;
    }
    BOOL v26 = sub_F003EC(v10, v24);
    unint64_t v12 = v24 + 16;
    double result = sub_F003EC(v24 + 16, a2);
    if (result)
    {
      a4 = -v16;
      a2 = v24;
      if (v26) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v13 = v16 + 1;
    if (!v26)
    {
LABEL_18:
      double result = sub_EFF9D8(v10, v24, a3, -v16, a5 & 1);
      unint64_t v12 = v24 + 16;
      goto LABEL_20;
    }
  }
  unint64_t v39 = v10 + 16;
  BOOL v41 = v10 == a2 || v39 == a2;
  if (a5)
  {
    if (v41) {
      return result;
    }
    uint64_t v42 = 0;
    unint64_t v43 = v10;
LABEL_48:
    unint64_t v44 = v43;
    unint64_t v43 = v39;
    double v45 = *(double *)(v44 + 16);
    double v46 = *(double *)v44;
    if (v45 >= *(double *)v44)
    {
      if (v46 < v45) {
        goto LABEL_47;
      }
      int v47 = *(_DWORD *)(v44 + 24);
      if (v47 >= *(_DWORD *)(v44 + 8)) {
        goto LABEL_47;
      }
    }
    else
    {
      int v47 = *(_DWORD *)(v44 + 24);
    }
    *(double *)(v44 + 16) = v46;
    *(_DWORD *)(v43 + 8) = *(_DWORD *)(v44 + 8);
    unint64_t v48 = v10;
    if (v44 == v10) {
      goto LABEL_46;
    }
    uint64_t v49 = v42;
    while (1)
    {
      double v52 = *(double *)(v10 + v49 - 16);
      if (v45 >= v52)
      {
        if (v52 < v45)
        {
          unint64_t v48 = v10 + v49;
          goto LABEL_46;
        }
        int v50 = *(_DWORD *)(v10 + v49 - 8);
        if (v47 >= v50)
        {
          unint64_t v48 = v44;
LABEL_46:
          *(double *)unint64_t v48 = v45;
          *(_DWORD *)(v48 + 8) = v47;
LABEL_47:
          unint64_t v39 = v43 + 16;
          v42 += 16;
          if (v43 + 16 == a2) {
            return result;
          }
          goto LABEL_48;
        }
      }
      else
      {
        int v50 = *(_DWORD *)(v10 + v49 - 8);
      }
      v44 -= 16;
      uint64_t v51 = v10 + v49;
      *(double *)uint64_t v51 = v52;
      *(_DWORD *)(v51 + 8) = v50;
      v49 -= 16;
      if (!v49)
      {
        unint64_t v48 = v10;
        goto LABEL_46;
      }
    }
  }
  if (!v41)
  {
    for (unint64_t i = v10 + 8; ; i += 16)
    {
      unint64_t v59 = v10;
      unint64_t v10 = v39;
      double v60 = *(double *)(v59 + 16);
      double v61 = *(double *)v59;
      if (v60 < *(double *)v59) {
        break;
      }
      if (v61 >= v60)
      {
        int v62 = *(_DWORD *)(v59 + 24);
        if (v62 < *(_DWORD *)(v59 + 8)) {
          goto LABEL_82;
        }
      }
LABEL_77:
      v39 += 16;
      if (v10 + 16 == a2) {
        return result;
      }
    }
    int v62 = *(_DWORD *)(v59 + 24);
LABEL_82:
    for (unint64_t j = i; ; j -= 16)
    {
      *(double *)(j + 8) = v61;
      *(_DWORD *)(j + 16) = *(_DWORD *)j;
      double v61 = *(double *)(j - 24);
      if (v60 >= v61 && (v61 < v60 || v62 >= *(_DWORD *)(j - 16))) {
        break;
      }
    }
    *(double *)(j - 8) = v60;
    *(_DWORD *)unint64_t j = v62;
    goto LABEL_77;
  }
  return result;
}

uint64_t sub_EFFFC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v3 = *(double *)a2;
  double v4 = *(double *)a1;
  if (*(double *)a2 >= *(double *)a1 && (v4 < v3 || *(_DWORD *)(a2 + 8) >= *(_DWORD *)(a1 + 8)))
  {
    double v9 = *(double *)a3;
    if (*(double *)a3 < v3) {
      goto LABEL_7;
    }
    if (v3 < v9) {
      return 0;
    }
    if (*(_DWORD *)(a3 + 8) < *(_DWORD *)(a2 + 8))
    {
LABEL_7:
      *(double *)a2 = v9;
      *(double *)a3 = v3;
      uint64_t v11 = (int *)(a2 + 8);
      int v10 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = v10;
      double v12 = *(double *)a2;
      double v13 = *(double *)a1;
      if (*(double *)a2 < *(double *)a1) {
        goto LABEL_8;
      }
      if (v13 < v12) {
        return 1;
      }
      if (*v11 < *(_DWORD *)(a1 + 8))
      {
LABEL_8:
        *(double *)a1 = v12;
        uint64_t v14 = (int *)(a1 + 8);
        *(double *)a2 = v13;
        int v15 = *v14;
        *uint64_t v14 = *v11;
        int *v11 = v15;
        return 2;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    double v5 = *(double *)a3;
    if (*(double *)a3 < v3 || v3 >= v5 && *(_DWORD *)(a3 + 8) < *(_DWORD *)(a2 + 8))
    {
      *(double *)a1 = v5;
      char v6 = (int *)(a1 + 8);
      *(double *)a3 = v4;
      uint64_t v7 = (int *)(a3 + 8);
      uint64_t v8 = 1;
LABEL_13:
      int v20 = *v6;
      *char v6 = *v7;
      *uint64_t v7 = v20;
      return v8;
    }
    *(double *)a1 = v3;
    *(double *)a2 = v4;
    int v17 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = v17;
    double v18 = *(double *)a3;
    double v19 = *(double *)a2;
    if (*(double *)a3 < *(double *)a2)
    {
LABEL_12:
      *(double *)a2 = v18;
      *(double *)a3 = v19;
      uint64_t v7 = (int *)(a3 + 8);
      uint64_t v8 = 2;
      char v6 = (int *)(a2 + 8);
      goto LABEL_13;
    }
    if (v19 >= v18)
    {
      if (*(_DWORD *)(a3 + 8) < v17) {
        goto LABEL_12;
      }
      return 1;
    }
    else
    {
      return 1;
    }
  }
}

unint64_t sub_F00144(unint64_t a1, unint64_t a2)
{
  double v2 = *(double *)a1;
  int v3 = *(_DWORD *)(a1 + 8);
  double v4 = *(double *)(a2 - 16);
  if (*(double *)a1 >= v4 && (v4 < v2 || v3 >= *(_DWORD *)(a2 - 8)))
  {
    for (unint64_t i = a1 + 16; i < a2 && v2 >= *(double *)i && (*(double *)i < v2 || v3 >= *(_DWORD *)(i + 8)); i += 16)
      ;
  }
  else
  {
    unint64_t i = a1;
    do
    {
      double v6 = *(double *)(i + 16);
      i += 16;
      double v7 = v6;
    }
    while (v2 >= v6 && (v7 < v2 || v3 >= *(_DWORD *)(i + 8)));
  }
  if (i < a2)
  {
    for (a2 -= 16; v2 < v4 || v4 >= v2 && v3 < *(_DWORD *)(a2 + 8); a2 -= 16)
    {
      double v8 = *(double *)(a2 - 16);
      double v4 = v8;
    }
  }
  if (i < a2)
  {
    double v9 = *(double *)i;
    double v10 = *(double *)a2;
    do
    {
      *(double *)unint64_t i = v10;
      *(double *)a2 = v9;
      int v11 = *(_DWORD *)(i + 8);
      *(_DWORD *)(i + 8) = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = v11;
      do
      {
        double v12 = *(double *)(i + 16);
        i += 16;
        double v9 = v12;
      }
      while (v2 >= v12 && (v9 < v2 || v3 >= *(_DWORD *)(i + 8)));
      do
      {
        do
        {
          double v13 = *(double *)(a2 - 16);
          a2 -= 16;
          double v10 = v13;
        }
        while (v2 < v13);
      }
      while (v10 >= v2 && v3 < *(_DWORD *)(a2 + 8));
    }
    while (i < a2);
  }
  if (i - 16 != a1)
  {
    *(void *)a1 = *(void *)(i - 16);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(i - 8);
  }
  *(double *)(i - 16) = v2;
  *(_DWORD *)(i - 8) = v3;
  return i;
}

unint64_t sub_F0029C(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = 0;
  double v3 = *(double *)a1;
  int v4 = *(_DWORD *)(a1 + 8);
  while (1)
  {
    double v5 = *(double *)(a1 + v2 + 16);
    if (v5 >= v3 && (v3 < v5 || *(_DWORD *)(a1 + v2 + 24) >= v4)) {
      break;
    }
    v2 += 16;
  }
  unint64_t v6 = a1 + v2 + 16;
  if (v2)
  {
    do
    {
      double v7 = *(double *)(a2 - 16);
      a2 -= 16;
      double v8 = v7;
    }
    while (v7 >= v3 && (v3 < v8 || *(_DWORD *)(a2 + 8) >= v4));
  }
  else
  {
LABEL_19:
    if (v6 < a2)
    {
      do
      {
        double v9 = *(double *)(a2 - 16);
        a2 -= 16;
        double v10 = v9;
        if (v9 < v3) {
          break;
        }
        if (v3 < v10) {
          goto LABEL_19;
        }
      }
      while (*(_DWORD *)(a2 + 8) >= v4 && v6 < a2);
    }
  }
  if (v6 >= a2)
  {
    unint64_t v13 = a1 + v2 + 16;
  }
  else
  {
    double v12 = *(double *)a2;
    unint64_t v13 = a1 + v2 + 16;
    unint64_t v14 = a2;
    do
    {
      *(double *)unint64_t v13 = v12;
      *(double *)unint64_t v14 = v5;
      int v15 = *(_DWORD *)(v13 + 8);
      *(_DWORD *)(v13 + 8) = *(_DWORD *)(v14 + 8);
      *(_DWORD *)(v14 + 8) = v15;
      do
      {
        do
        {
          double v16 = *(double *)(v13 + 16);
          v13 += 16;
          double v5 = v16;
        }
        while (v16 < v3);
      }
      while (v3 >= v5 && *(_DWORD *)(v13 + 8) < v4);
      do
      {
        double v17 = *(double *)(v14 - 16);
        v14 -= 16;
        double v12 = v17;
      }
      while (v17 >= v3 && (v3 < v12 || *(_DWORD *)(v14 + 8) >= v4));
    }
    while (v13 < v14);
  }
  if (v13 - 16 != a1)
  {
    *(void *)a1 = *(void *)(v13 - 16);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(v13 - 8);
  }
  *(double *)(v13 - 16) = v3;
  *(_DWORD *)(v13 - 8) = v4;
  return v13 - 16;
}

BOOL sub_F003EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      double v18 = *(double *)(a2 - 16);
      double v19 = *(double *)a1;
      if (v18 < *(double *)a1 || v19 >= v18 && *(_DWORD *)(a2 - 8) < *(_DWORD *)(a1 + 8))
      {
        *(double *)a1 = v18;
        *(double *)(a2 - 16) = v19;
        int v20 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v20;
      }
      return result;
    case 3:
      sub_EFFFC4(a1, a1 + 16, a2 - 16);
      return 1;
    case 4:
      sub_EFFFC4(a1, a1 + 16, a1 + 32);
      double v21 = *(double *)(a2 - 16);
      double v22 = *(double *)(a1 + 32);
      if (v21 >= v22 && (v22 < v21 || *(_DWORD *)(a2 - 8) >= *(_DWORD *)(a1 + 40))) {
        return 1;
      }
      *(double *)(a1 + 32) = v21;
      *(double *)(a2 - 16) = v22;
      int v23 = *(_DWORD *)(a1 + 40);
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 - 8);
      *(_DWORD *)(a2 - 8) = v23;
      double v24 = *(double *)(a1 + 32);
      double v25 = *(double *)(a1 + 16);
      if (v24 >= v25)
      {
        if (v25 < v24) {
          return 1;
        }
        int v27 = *(_DWORD *)(a1 + 40);
        int v26 = *(_DWORD *)(a1 + 24);
        if (v27 >= v26) {
          return 1;
        }
      }
      else
      {
        int v26 = *(_DWORD *)(a1 + 24);
        int v27 = *(_DWORD *)(a1 + 40);
      }
      *(double *)(a1 + 16) = v24;
      *(double *)(a1 + 32) = v25;
      *(_DWORD *)(a1 + 24) = v27;
      *(_DWORD *)(a1 + 40) = v26;
      double v28 = *(double *)a1;
      if (v24 < *(double *)a1)
      {
        int v29 = *(_DWORD *)(a1 + 8);
LABEL_44:
        *(double *)a1 = v24;
        *(double *)(a1 + 16) = v28;
        *(_DWORD *)(a1 + 8) = v27;
        BOOL result = 1;
        *(_DWORD *)(a1 + 24) = v29;
        return result;
      }
      if (v28 >= v24)
      {
        int v29 = *(_DWORD *)(a1 + 8);
        if (v27 < v29) {
          goto LABEL_44;
        }
      }
      return 1;
    case 5:
      sub_F0071C(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16);
      return 1;
    default:
      uint64_t v6 = a1 + 32;
      sub_EFFFC4(a1, a1 + 16, a1 + 32);
      uint64_t v7 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      while (2)
      {
        double v11 = *(double *)v7;
        double v12 = *(double *)v6;
        if (*(double *)v7 >= *(double *)v6)
        {
          if (v12 < v11) {
            goto LABEL_7;
          }
          int v13 = *(_DWORD *)(v7 + 8);
          if (v13 >= *(_DWORD *)(v6 + 8)) {
            goto LABEL_7;
          }
        }
        else
        {
          int v13 = *(_DWORD *)(v7 + 8);
        }
        *(double *)uint64_t v7 = v12;
        *(_DWORD *)(v7 + 8) = *(_DWORD *)(v6 + 8);
        uint64_t v10 = a1;
        if (v6 == a1) {
          goto LABEL_6;
        }
        uint64_t v14 = v8;
        while (2)
        {
          uint64_t v16 = a1 + v14;
          double v17 = *(double *)(a1 + v14 + 16);
          if (v11 < v17)
          {
            int v15 = *(_DWORD *)(v16 + 24);
LABEL_13:
            v6 -= 16;
            *(double *)(v16 + 32) = v17;
            *(_DWORD *)(a1 + v14 + 40) = v15;
            v14 -= 16;
            if (v14 == -32)
            {
              uint64_t v10 = a1;
              goto LABEL_6;
            }
            continue;
          }
          break;
        }
        if (v17 >= v11)
        {
          int v15 = *(_DWORD *)(a1 + v14 + 24);
          if (v13 >= v15)
          {
            uint64_t v10 = a1 + v14 + 32;
            goto LABEL_6;
          }
          goto LABEL_13;
        }
        uint64_t v10 = v6;
LABEL_6:
        *(double *)uint64_t v10 = v11;
        *(_DWORD *)(v10 + 8) = v13;
        if (++v9 == 8) {
          return v7 + 16 == a2;
        }
LABEL_7:
        uint64_t v6 = v7;
        v8 += 16;
        v7 += 16;
        if (v7 != a2) {
          continue;
        }
        return 1;
      }
  }
}

uint64_t sub_F0071C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = sub_EFFFC4(a1, a2, a3);
  double v11 = *(double *)a4;
  double v12 = *(double *)a3;
  if (*(double *)a4 < *(double *)a3 || v12 >= v11 && *(_DWORD *)(a4 + 8) < *(_DWORD *)(a3 + 8))
  {
    *(double *)a3 = v11;
    *(double *)a4 = v12;
    int v13 = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(a4 + 8);
    *(_DWORD *)(a4 + 8) = v13;
    double v14 = *(double *)a3;
    double v15 = *(double *)a2;
    if (*(double *)a3 < *(double *)a2 || v15 >= v14 && *(_DWORD *)(a3 + 8) < *(_DWORD *)(a2 + 8))
    {
      *(double *)a2 = v14;
      *(double *)a3 = v15;
      int v16 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = v16;
      double v17 = *(double *)a2;
      double v18 = *(double *)a1;
      if (*(double *)a2 < *(double *)a1 || v18 >= v17 && *(_DWORD *)(a2 + 8) < *(_DWORD *)(a1 + 8))
      {
        *(double *)a1 = v17;
        *(double *)a2 = v18;
        int v19 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
        *(_DWORD *)(a2 + 8) = v19;
      }
    }
  }
  double v20 = *(double *)a5;
  double v21 = *(double *)a4;
  if (*(double *)a5 < *(double *)a4 || v21 >= v20 && *(_DWORD *)(a5 + 8) < *(_DWORD *)(a4 + 8))
  {
    *(double *)a4 = v20;
    *(double *)a5 = v21;
    int v22 = *(_DWORD *)(a4 + 8);
    *(_DWORD *)(a4 + 8) = *(_DWORD *)(a5 + 8);
    *(_DWORD *)(a5 + 8) = v22;
    double v23 = *(double *)a4;
    double v24 = *(double *)a3;
    if (*(double *)a4 < *(double *)a3 || v24 >= v23 && *(_DWORD *)(a4 + 8) < *(_DWORD *)(a3 + 8))
    {
      *(double *)a3 = v23;
      *(double *)a4 = v24;
      int v25 = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = *(_DWORD *)(a4 + 8);
      *(_DWORD *)(a4 + 8) = v25;
      double v26 = *(double *)a3;
      double v27 = *(double *)a2;
      if (*(double *)a3 < *(double *)a2 || v27 >= v26 && *(_DWORD *)(a3 + 8) < *(_DWORD *)(a2 + 8))
      {
        *(double *)a2 = v26;
        *(double *)a3 = v27;
        int v28 = *(_DWORD *)(a2 + 8);
        *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
        *(_DWORD *)(a3 + 8) = v28;
        double v29 = *(double *)a2;
        double v30 = *(double *)a1;
        if (*(double *)a2 < *(double *)a1 || v30 >= v29 && *(_DWORD *)(a2 + 8) < *(_DWORD *)(a1 + 8))
        {
          *(double *)a1 = v29;
          *(double *)a2 = v30;
          int v31 = *(_DWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
          *(_DWORD *)(a2 + 8) = v31;
        }
      }
    }
  }
  return result;
}

uint64_t sub_F00950(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= (a4 - result) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = result + 16 * v7;
      uint64_t v9 = v6 + 2;
      if (v9 < a3)
      {
        double v10 = *(double *)(v8 + 16);
        if (*(double *)v8 < v10 || v10 >= *(double *)v8 && *(_DWORD *)(result + 16 * v7 + 8) < *(_DWORD *)(v8 + 24))
        {
          v8 += 16;
          uint64_t v7 = v9;
        }
      }
      double v11 = *(double *)v8;
      double v12 = *(double *)a4;
      if (*(double *)v8 >= *(double *)a4)
      {
        if (v12 >= v11)
        {
          int v13 = *(_DWORD *)(a4 + 8);
          if (*(_DWORD *)(v8 + 8) < v13) {
            return result;
          }
        }
        else
        {
          int v13 = *(_DWORD *)(a4 + 8);
        }
        *(double *)a4 = v11;
        *(_DWORD *)(a4 + 8) = *(_DWORD *)(v8 + 8);
        if (v5 >= v7)
        {
          while (1)
          {
            uint64_t v15 = 2 * v7;
            uint64_t v7 = (2 * v7) | 1;
            uint64_t v14 = result + 16 * v7;
            uint64_t v16 = v15 + 2;
            if (v16 < a3)
            {
              double v17 = *(double *)(v14 + 16);
              if (*(double *)v14 < v17
                || v17 >= *(double *)v14 && *(_DWORD *)(result + 16 * v7 + 8) < *(_DWORD *)(v14 + 24))
              {
                v14 += 16;
                uint64_t v7 = v16;
              }
            }
            double v18 = *(double *)v14;
            if (*(double *)v14 < v12 || v12 >= v18 && *(_DWORD *)(v14 + 8) < v13) {
              break;
            }
            *(double *)uint64_t v8 = v18;
            *(_DWORD *)(v8 + 8) = *(_DWORD *)(v14 + 8);
            uint64_t v8 = v14;
            if (v5 < v7) {
              goto LABEL_14;
            }
          }
        }
        uint64_t v14 = v8;
LABEL_14:
        *(double *)uint64_t v14 = v12;
        *(_DWORD *)(v14 + 8) = v13;
      }
    }
  }
  return result;
}

uint64_t *sub_F00AA0(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *result;
    int v6 = *((_DWORD *)result + 2);
    uint64_t v7 = (double *)result;
    do
    {
      uint64_t v8 = v7;
      uint64_t v9 = v4 + 1;
      v7 += 2 * v4 + 2;
      uint64_t v10 = 2 * v4;
      uint64_t v4 = (2 * v4) | 1;
      uint64_t v11 = v10 + 2;
      if (v11 < a4)
      {
        double v12 = v7[2];
        if (*v7 < v12 || v12 >= *v7 && SLODWORD(v8[2 * v9 + 1]) < *((_DWORD *)v7 + 6))
        {
          v7 += 2;
          uint64_t v4 = v11;
        }
      }
      *uint64_t v8 = *v7;
      *((_DWORD *)v8 + 2) = *((_DWORD *)v7 + 2);
    }
    while (v4 <= (uint64_t)((unint64_t)(a4 - 2) >> 1));
    if (v7 == (double *)(a2 - 16))
    {
      *(void *)uint64_t v7 = v5;
      *((_DWORD *)v7 + 2) = v6;
      return result;
    }
    *uint64_t v7 = *(double *)(a2 - 16);
    *((_DWORD *)v7 + 2) = *(_DWORD *)(a2 - 8);
    *(void *)(a2 - 16) = v5;
    *(_DWORD *)(a2 - 8) = v6;
    uint64_t v13 = (char *)v7 - (char *)result + 16;
    if (v13 >= 17)
    {
      unint64_t v14 = ((unint64_t)v13 >> 4) - 2;
      unint64_t v15 = v14 >> 1;
      uint64_t v16 = &result[2 * (v14 >> 1)];
      double v17 = *(double *)v16;
      double v18 = *v7;
      if (*(double *)v16 >= *v7)
      {
        if (v18 < v17) {
          return result;
        }
        int v19 = *((_DWORD *)v7 + 2);
        if (SLODWORD(result[2 * v15 + 1]) >= v19) {
          return result;
        }
      }
      else
      {
        int v19 = *((_DWORD *)v7 + 2);
      }
      *uint64_t v7 = v17;
      *((_DWORD *)v7 + 2) = result[2 * v15 + 1];
      if (v14 >= 2)
      {
        while (1)
        {
          unint64_t v22 = v15 - 1;
          unint64_t v15 = (v15 - 1) >> 1;
          double v20 = &result[2 * v15];
          double v23 = *(double *)v20;
          if (*(double *)v20 < v18)
          {
            int v21 = *((_DWORD *)v20 + 2);
          }
          else
          {
            if (v18 < v23) {
              break;
            }
            int v21 = result[2 * v15 + 1];
            if (v21 >= v19) {
              break;
            }
          }
          *(double *)uint64_t v16 = v23;
          *((_DWORD *)v16 + 2) = v21;
          uint64_t v16 = &result[2 * v15];
          if (v22 <= 1) {
            goto LABEL_19;
          }
        }
      }
      double v20 = v16;
LABEL_19:
      *(double *)double v20 = v18;
      *((_DWORD *)v20 + 2) = v19;
    }
  }
  return result;
}

void sub_F00C34()
{
  unk_25FCA87 = 16641;
  word_25FCA70 = 65;
  byte_25FCA9F = 1;
  byte_25FCA89 = 0;
  byte_25FCAB7 = 3;
  dword_25FCAA0 = 7105633;
}

void *sub_F00C70(void *a1)
{
  uint64_t v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  double v3 = (void *)a1[17];
  if (v3)
  {
    a1[18] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[14];
  if (v4)
  {
    a1[15] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[11];
  if (v5)
  {
    do
    {
      int v6 = (void *)*v5;
      operator delete(v5);
      uint64_t v5 = v6;
    }
    while (v6);
  }
  uint64_t v7 = (void *)a1[9];
  a1[9] = 0;
  if (v7) {
    operator delete(v7);
  }
  return a1;
}

uint64_t *sub_F00CEC(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  *a1 = sub_3750CC(a2);
  sub_F6DA28(a1 + 1, a2);
  sub_F02A2C((uint64_t)(a1 + 5), a3);
  a1[28] = a4;
  a1[29] = sub_3769E8(a2);
  return a1;
}

void sub_F00D5C(_Unwind_Exception *a1)
{
  double v3 = (void *)v1[25];
  if (v3)
  {
    v1[26] = v3;
    operator delete(v3);
  }
  sub_20B1588(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_F00D80(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  sub_F037E8((uint64_t)v11, (uint64_t)a2, a3);
  sub_F00CEC(a1, a2, (uint64_t)v11, a4);
  if (__p)
  {
    int v19 = __p;
    operator delete(__p);
  }
  if (v16)
  {
    double v17 = v16;
    operator delete(v16);
  }
  if (v14)
  {
    unint64_t v15 = v14;
    operator delete(v14);
  }
  uint64_t v7 = v13;
  if (v13)
  {
    do
    {
      uint64_t v8 = (void *)*v7;
      operator delete(v7);
      uint64_t v7 = v8;
    }
    while (v8);
  }
  uint64_t v9 = v12;
  double v12 = 0;
  if (v9) {
    operator delete(v9);
  }
  return a1;
}

void sub_F00E30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_F00C70((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_F00E44(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_374E2C(a2, a4);

  return sub_F00D80(a1, a2, a3, v7);
}

uint64_t *sub_F00EA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  double v57 = 0;
  unsigned int v58 = 0;
  unint64_t v59 = 0;
  uint64_t v11 = (uint64_t *)nullsub_1(a2);
  uint64_t v12 = *v11;
  uint64_t v32 = v11[1];
  if (*v11 != v32)
  {
    do
    {
      if (*(unsigned char *)(a1 + 40)) {
        sub_F013A4(a1, v12, a3, (uint64_t)&v33);
      }
      else {
        sub_F01700((void *)a1, v12, a3, a5, (uint64_t)&v33);
      }
      int v17 = HIDWORD(v33);
      if (v33 < 0) {
        char v18 = -5;
      }
      else {
        char v18 = 5;
      }
      int v19 = v58;
      if ((unint64_t)v58 < v59)
      {
        uint64_t v13 = v33;
        *((_DWORD *)v58 + 2) = v34;
        *(void *)int v19 = v13;
        *((void *)v19 + 2) = 0;
        *((void *)v19 + 3) = 0;
        *((void *)v19 + 4) = 0;
        *((void *)v19 + 5) = 0;
        *((_OWORD *)v19 + 1) = v35;
        *((void *)v19 + 4) = v36;
        long long v35 = 0uLL;
        uint64_t v36 = 0;
        *((void *)v19 + 6) = 0;
        *((void *)v19 + 7) = 0;
        *(_OWORD *)(v19 + 40) = v37;
        long long v37 = 0uLL;
        *((void *)v19 + 7) = v38;
        *((void *)v19 + 8) = 0;
        uint64_t v38 = 0;
        *((void *)v19 + 9) = 0;
        *((void *)v19 + 10) = 0;
        *((_OWORD *)v19 + 4) = v39;
        long long v39 = 0uLL;
        *((void *)v19 + 10) = v40;
        *((void *)v19 + 11) = 0;
        uint64_t v40 = 0;
        *((void *)v19 + 12) = 0;
        *((void *)v19 + 13) = 0;
        *(_OWORD *)(v19 + 88) = v41;
        long long v41 = 0uLL;
        *((void *)v19 + 13) = v42;
        *((void *)v19 + 14) = 0;
        uint64_t v42 = 0;
        *((void *)v19 + 15) = 0;
        *((void *)v19 + 16) = 0;
        *((_OWORD *)v19 + 7) = v43;
        long long v43 = 0uLL;
        *((void *)v19 + 16) = v44;
        *((void *)v19 + 17) = 0;
        uint64_t v44 = 0;
        *((void *)v19 + 18) = 0;
        *((void *)v19 + 19) = 0;
        *(_OWORD *)(v19 + 136) = v45;
        long long v45 = 0uLL;
        *((void *)v19 + 19) = v46;
        *((void *)v19 + 20) = 0;
        uint64_t v46 = 0;
        *((void *)v19 + 21) = 0;
        *((void *)v19 + 22) = 0;
        *((_OWORD *)v19 + 10) = v47;
        long long v47 = 0uLL;
        *((void *)v19 + 22) = v48;
        *((void *)v19 + 23) = 0;
        uint64_t v48 = 0;
        *((void *)v19 + 24) = 0;
        *((void *)v19 + 25) = 0;
        *(_OWORD *)(v19 + 184) = v49;
        long long v49 = 0uLL;
        *((void *)v19 + 25) = v50;
        *((void *)v19 + 26) = 0;
        uint64_t v50 = 0;
        *((void *)v19 + 27) = 0;
        *((void *)v19 + 28) = 0;
        *((_OWORD *)v19 + 13) = v51;
        long long v51 = 0uLL;
        *((void *)v19 + 28) = v52;
        *((void *)v19 + 29) = 0;
        uint64_t v52 = 0;
        *((void *)v19 + 30) = 0;
        *((void *)v19 + 31) = 0;
        *(_OWORD *)(v19 + 232) = v53;
        *((void *)v19 + 31) = v54;
        long long v53 = 0uLL;
        uint64_t v54 = 0;
        long long v14 = v56;
        *((_OWORD *)v19 + 16) = v55;
        *((_OWORD *)v19 + 17) = v14;
        uint64_t v15 = (uint64_t)(v19 + 288);
      }
      else
      {
        uint64_t v15 = sub_EE6BB8((uint64_t *)&v57, (uint64_t)&v33);
      }
      a5 += v17;
      int v16 = 103 * (char)(v18 + v17 % 10);
      a3 += v17 / 10 + ((v16 >> 15) & 1) + (v16 >> 10);
      unsigned int v58 = (char *)v15;
      sub_3B0290(&v33);
      v12 += 480;
    }
    while (v12 != v32);
  }
  uint64_t v20 = (uint64_t)v57;
  uint64_t v21 = (uint64_t)v58;
  uint64_t result = a6;
  if (a4 != 1) {
    goto LABEL_23;
  }
  uint64_t v23 = (uint64_t)v57;
  if (v58 != v57)
  {
    if (a5 < 0) {
      char v24 = -5;
    }
    else {
      char v24 = 5;
    }
    unsigned int v25 = a5 / -10 + (((-103 * (char)(v24 + a5 % 10)) >> 15) & 1) + ((-103 * (char)(v24 + a5 % 10)) >> 10);
    unint64_t v26 = v58 - v57 - 288;
    double v27 = v58;
    if (v26 < 0x120) {
      goto LABEL_27;
    }
    unint64_t v28 = v26 / 0x120 + 1;
    double v27 = &v58[-288 * (v28 & 0x1FFFFFFFFFFFFFELL)];
    double v29 = (unsigned int *)(v58 - 576);
    uint64_t v30 = v28 & 0x1FFFFFFFFFFFFFELL;
    do
    {
      unsigned int v31 = v25 + *v29;
      v29[72] += v25;
      *double v29 = v31;
      v29 -= 144;
      v30 -= 2;
    }
    while (v30);
    if (v28 != (v28 & 0x1FFFFFFFFFFFFFELL))
    {
LABEL_27:
      do
      {
        v27 -= 288;
        *(_DWORD *)v27 += v25;
      }
      while (v27 != (char *)v20);
    }
LABEL_23:
    uint64_t v23 = v21;
  }
  *a6 = v20;
  a6[1] = v23;
  a6[2] = v59;
  return result;
}

void sub_F01294(_Unwind_Exception *a1)
{
  sub_3C7768((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_F012A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_3B0290((uint64_t *)va);
  sub_3C7768((void **)(v11 - 112));
  _Unwind_Resume(a1);
}

void sub_F012C4(_Unwind_Exception *a1)
{
  sub_3C7768((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void *sub_F012D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, _DWORD *a6@<X8>)
{
  if (*(unsigned char *)(a1 + 40))
  {
    uint64_t result = sub_F013A4(a1, a2, a3, (uint64_t)a6);
    if (a4 != 1) {
      return result;
    }
  }
  else
  {
    uint64_t result = sub_F01700((void *)a1, a2, a3, a5, (uint64_t)a6);
    if (a4 != 1) {
      return result;
    }
  }
  int v9 = a6[1];
  int v10 = v9 / -10;
  int v11 = v9 % 10;
  if (v9 < 0) {
    char v12 = -5;
  }
  else {
    char v12 = 5;
  }
  *a6 += v10 + (((-103 * (char)(v12 + v11)) >> 15) & 1) + ((-103 * (char)(v12 + v11)) >> 10);
  return result;
}

void *sub_F013A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0x8000000080000000;
  *(_OWORD *)(a4 + 16) = 0u;
  uint64_t v8 = (void **)(a4 + 16);
  *(_DWORD *)(a4 + 8) = 0x7FFFFFFF;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 128) = 0u;
  *(_OWORD *)(a4 + 144) = 0u;
  *(_OWORD *)(a4 + 160) = 0u;
  *(_OWORD *)(a4 + 176) = 0u;
  *(_OWORD *)(a4 + 192) = 0u;
  *(_OWORD *)(a4 + 208) = 0u;
  *(_OWORD *)(a4 + 224) = 0u;
  *(_OWORD *)(a4 + 240) = 0u;
  *(void *)&long long v9 = 0x8000000080000000;
  *((void *)&v9 + 1) = 0x8000000080000000;
  *(_OWORD *)(a4 + 256) = v9;
  *(_OWORD *)(a4 + 272) = v9;
  unint64_t v22 = sub_EB29EC(a2);
  uint64_t v10 = sub_EB22DC(a2);
  *(_DWORD *)(a4 + 256) = sub_F6DA8C((uint64_t *)(a1 + 8), (unsigned int *)&v22, v10, *(void *)(a1 + 224), 0, 0) >> 32;
  unint64_t v22 = sub_EB2A48(a2);
  uint64_t v11 = sub_486CB4(a2);
  *(_DWORD *)(a4 + 260) = sub_F6DA8C((uint64_t *)(a1 + 8), (unsigned int *)&v22, v11, *(void *)(a1 + 224), 0, 0) >> 32;
  if (sub_EB29DC(a2))
  {
    unsigned int v12 = sub_EB3204(a2);
    uint64_t v13 = (unsigned int *)sub_EB2AA4(a2);
    LODWORD(v22) = sub_F6D9F4((uint64_t *)(a1 + 8), v13, v12, *(void *)(a1 + 224)) >> 32;
    sub_3B79D0(v8, &v22);
  }
  else
  {
    uint64_t v14 = sub_EB2E60(a2);
    if (v14)
    {
      uint64_t v15 = sub_EB25CC(a2, 0);
      unsigned int v16 = sub_EB3214(a2);
      LODWORD(v22) = sub_F6D3B4((uint64_t *)(a1 + 8), v15, v16, *(void *)(a1 + 224)) >> 32;
      sub_3B79D0(v8, &v22);
      if (v14 != 1)
      {
        for (unint64_t i = 1; i != v14; ++i)
        {
          uint64_t v18 = sub_EB25CC(a2, i);
          LODWORD(v22) = sub_F6D3B4((uint64_t *)(a1 + 8), v18, 0x3B9ACA00u, *(void *)(a1 + 224)) >> 32;
          sub_3B79D0(v8, &v22);
        }
      }
    }
    unsigned int v19 = sub_EB3228(a2);
    uint64_t v20 = (unsigned int *)sub_EB2ABC(a2);
    LODWORD(v22) = sub_F6D9F4((uint64_t *)(a1 + 8), v20, v19, *(void *)(a1 + 224)) >> 32;
    sub_3B79D0(v8, &v22);
  }
  return sub_F019FC(a1, a4, a3);
}

void sub_F015FC(_Unwind_Exception *a1)
{
  sub_3B0290(v1);
  _Unwind_Resume(a1);
}

void sub_F01610(_Unwind_Exception *a1)
{
  sub_3B0290(v1);
  _Unwind_Resume(a1);
}

void sub_F01624(_Unwind_Exception *a1)
{
  sub_3B0290(v1);
  _Unwind_Resume(a1);
}

void sub_F01638(_Unwind_Exception *a1)
{
  sub_3B0290(v1);
  _Unwind_Resume(a1);
}

void sub_F0164C(_Unwind_Exception *a1)
{
  sub_3B0290(v1);
  _Unwind_Resume(a1);
}

void sub_F01660(_Unwind_Exception *a1)
{
  sub_3B0290(v1);
  _Unwind_Resume(a1);
}

void sub_F01674(_Unwind_Exception *a1)
{
  sub_3B0290(v1);
  _Unwind_Resume(a1);
}

void sub_F01688(_Unwind_Exception *a1)
{
  sub_3B0290(v1);
  _Unwind_Resume(a1);
}

void sub_F0169C(_Unwind_Exception *a1)
{
  sub_3B0290(v1);
  _Unwind_Resume(a1);
}

void sub_F016B0(_Unwind_Exception *a1)
{
  sub_3B0290(v1);
  _Unwind_Resume(a1);
}

void sub_F016C4(_Unwind_Exception *a1)
{
  sub_3B0290(v1);
  _Unwind_Resume(a1);
}

void sub_F016D8(_Unwind_Exception *a1)
{
  sub_3B0290(v1);
  _Unwind_Resume(a1);
}

void sub_F016EC(_Unwind_Exception *a1)
{
  sub_3B0290(v1);
  _Unwind_Resume(a1);
}

void *sub_F01700@<X0>(void *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  *(void *)a5 = 0x8000000080000000;
  *(_OWORD *)(a5 + 16) = 0u;
  long long v9 = (void **)(a5 + 16);
  *(_DWORD *)(a5 + 8) = 0x7FFFFFFF;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 128) = 0u;
  *(_OWORD *)(a5 + 144) = 0u;
  *(_OWORD *)(a5 + 160) = 0u;
  *(_OWORD *)(a5 + 176) = 0u;
  *(_OWORD *)(a5 + 192) = 0u;
  *(_OWORD *)(a5 + 208) = 0u;
  *(_OWORD *)(a5 + 224) = 0u;
  *(_OWORD *)(a5 + 240) = 0u;
  *(void *)&long long v10 = 0x8000000080000000;
  *((void *)&v10 + 1) = 0x8000000080000000;
  *(_OWORD *)(a5 + 256) = v10;
  *(_OWORD *)(a5 + 272) = v10;
  unint64_t v28 = sub_EB29EC(a2);
  uint64_t v11 = sub_EB22DC(a2);
  *(_DWORD *)(a5 + 256) = sub_F01B78((uint64_t)a1, (unsigned int *)&v28, v11);
  unint64_t v28 = sub_EB2A48(a2);
  uint64_t v12 = sub_486CB4(a2);
  *(_DWORD *)(a5 + 260) = sub_F01B78((uint64_t)a1, (unsigned int *)&v28, v12);
  if (sub_EB29DC(a2))
  {
    unsigned int v13 = sub_EB3204(a2);
    uint64_t v14 = (unsigned int *)sub_EB2AA4(a2);
    LODWORD(v28) = sub_F01D94((uint64_t)a1, v14, v13);
    sub_3B79D0(v9, &v28);
  }
  else
  {
    unsigned int v15 = sub_EB3214(a2);
    unsigned int v16 = (unsigned int *)sub_EB2AA4(a2);
    LODWORD(v28) = sub_F01D94((uint64_t)a1, v16, v15);
    sub_3B79D0(v9, &v28);
    uint64_t v17 = sub_EB2E60(a2);
    if (v17)
    {
      unint64_t v18 = 0;
      do
      {
        uint64_t v19 = sub_EB25CC(a2, v18++);
        if (v18 == sub_EB2E60(a2)) {
          unsigned int v20 = sub_EB3228(a2);
        }
        else {
          unsigned int v20 = 1000000000;
        }
        int v21 = sub_F01D94((uint64_t)a1, (unsigned int *)(v19 + 48), v20);
        int v22 = sub_F022F8((uint64_t)a1, v19);
        BOOL v23 = v22 == 0x7FFFFFFF || v21 == 0x7FFFFFFF;
        int v24 = v22 + v21;
        if (v23) {
          int v24 = 0x7FFFFFFF;
        }
        int v27 = v24;
        sub_3B79D0(v9, &v27);
      }
      while (v17 != v18);
    }
  }
  sub_F02210(a1, a5, a2, a4);
  return sub_F019FC((uint64_t)a1, a5, a3);
}

void sub_F01920(_Unwind_Exception *a1)
{
  sub_3B0290(v1);
  _Unwind_Resume(a1);
}

void sub_F01934(_Unwind_Exception *a1)
{
  sub_3B0290(v1);
  _Unwind_Resume(a1);
}

void sub_F01948(_Unwind_Exception *a1)
{
  sub_3B0290(v1);
  _Unwind_Resume(a1);
}

void sub_F0195C(_Unwind_Exception *a1)
{
  sub_3B0290(v1);
  _Unwind_Resume(a1);
}

void sub_F01970(_Unwind_Exception *a1)
{
  sub_3B0290(v1);
  _Unwind_Resume(a1);
}

void sub_F01984(_Unwind_Exception *a1)
{
  sub_3B0290(v1);
  _Unwind_Resume(a1);
}

void sub_F01998(_Unwind_Exception *a1)
{
  sub_3B0290(v1);
  _Unwind_Resume(a1);
}

void sub_F019AC(_Unwind_Exception *a1)
{
  sub_3B0290(v1);
  _Unwind_Resume(a1);
}

void sub_F019C0(_Unwind_Exception *a1)
{
  sub_3B0290(v1);
  _Unwind_Resume(a1);
}

void sub_F019D4(_Unwind_Exception *a1)
{
  sub_3B0290(v1);
  _Unwind_Resume(a1);
}

void sub_F019E8(_Unwind_Exception *a1)
{
  sub_3B0290(v1);
  _Unwind_Resume(a1);
}

void *sub_F019FC(uint64_t a1, uint64_t a2, int a3)
{
  int v6 = *(_DWORD *)(a2 + 256);
  *(_DWORD *)(a2 + 4) = v6;
  uint64_t v7 = *(char **)(a2 + 16);
  uint64_t v8 = *(char **)(a2 + 24);
  if (v7 == v8)
  {
    int v10 = 0;
    goto LABEL_9;
  }
  unint64_t v9 = v8 - v7 - 4;
  if (v9 < 0x1C)
  {
    int v10 = 0;
    uint64_t v11 = v7;
    do
    {
LABEL_8:
      int v17 = *(_DWORD *)v11;
      v11 += 4;
      v10 += v17;
    }
    while (v11 != v8);
    goto LABEL_9;
  }
  uint64_t v12 = (v9 >> 2) + 1;
  uint64_t v11 = &v7[4 * (v12 & 0x7FFFFFFFFFFFFFF8)];
  unsigned int v13 = (int32x4_t *)(v7 + 16);
  int32x4_t v14 = 0uLL;
  uint64_t v15 = v12 & 0x7FFFFFFFFFFFFFF8;
  int32x4_t v16 = 0uLL;
  do
  {
    int32x4_t v14 = vaddq_s32(v13[-1], v14);
    int32x4_t v16 = vaddq_s32(*v13, v16);
    v13 += 2;
    v15 -= 8;
  }
  while (v15);
  int v10 = vaddvq_s32(vaddq_s32(v16, v14));
  if (v12 != (v12 & 0x7FFFFFFFFFFFFFF8)) {
    goto LABEL_8;
  }
LABEL_9:
  int v18 = *(_DWORD *)(a2 + 260) + v10 + v6;
  *(_DWORD *)(a2 + 4) = v18;
  *(_DWORD *)(a2 + 264) = v18;
  sub_147D0((void *)(a2 + 40), v7, v8, (v8 - v7) >> 2);
  *(_DWORD *)(a2 + 268) = *(_DWORD *)(a2 + 4);
  uint64_t result = sub_147D0((void *)(a2 + 64), *(char **)(a2 + 16), *(char **)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2);
  int v20 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a2 + 272) = v20;
  *(_DWORD *)(a2 + 280) = v20;
  double v21 = *(double *)(a1 + 48) * (double)v20;
  if (v21 >= 0.0)
  {
    if (v21 < 4.50359963e15)
    {
      uint64_t v22 = (uint64_t)(v21 + v21) + 1;
LABEL_16:
      double v21 = (double)(v22 >> 1);
    }
  }
  else if (v21 > -4.50359963e15)
  {
    uint64_t v22 = (uint64_t)(v21 + v21);
    if (v22 >= 1) {
      --v22;
    }
    goto LABEL_16;
  }
  *(_DWORD *)(a2 + 276) = (int)v21;
  *(_DWORD *)a2 = a3;
  return result;
}

uint64_t sub_F01B78(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 8);
  double v5 = (double)v4 / 100000.0 / *(double *)(a1 + 56) * 60.0 * 60.0 * 10.0;
  if (v5 >= 0.0)
  {
    if (v5 < 4.50359963e15)
    {
      uint64_t v6 = (uint64_t)(v5 + v5) + 1;
LABEL_8:
      double v5 = (double)(v6 >> 1);
    }
  }
  else if (v5 > -4.50359963e15)
  {
    uint64_t v6 = (uint64_t)(v5 + v5);
    if (v6 >= 1) {
      --v6;
    }
    goto LABEL_8;
  }
  uint64_t v7 = (int)v5;
  if (*(unsigned char *)(a3 + 24) && v4 > *(void *)(a1 + 96))
  {
    uint64_t v8 = *(void *)a1;
    uint64_t v9 = *a2;
    unint64_t v10 = v9 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32);
    uint64_t v11 = (int *)sub_2D5D58(*(void *)a1, v10);
    if (*(unsigned char *)(v8 + 7772)) {
      sub_2DB8E0(v8 + 3896, v9, 0);
    }
    sub_2E5C38(v8, v10, 1);
    double v12 = *(double *)(a1 + 104);
    double v13 = v12 * (double)sub_EDAAAC(v11);
    if (v13 >= 0.0)
    {
      if (v13 >= 4.50359963e15) {
        goto LABEL_21;
      }
      uint64_t v14 = (uint64_t)(v13 + v13) + 1;
    }
    else
    {
      if (v13 <= -4.50359963e15) {
        goto LABEL_21;
      }
      uint64_t v14 = (uint64_t)(v13 + v13);
      if (v14 >= 1) {
        --v14;
      }
    }
    double v13 = (double)(v14 >> 1);
LABEL_21:
    double v15 = (double)(uint64_t)v13 / 100000.0 / *(double *)(a1 + 56) * 60.0 * 60.0 * 10.0;
    if (v15 >= 0.0)
    {
      if (v15 < 4.50359963e15)
      {
        uint64_t v16 = (uint64_t)(v15 + v15) + 1;
LABEL_28:
        double v15 = (double)(v16 >> 1);
      }
    }
    else if (v15 > -4.50359963e15)
    {
      uint64_t v16 = (uint64_t)(v15 + v15);
      if (v16 >= 1) {
        --v16;
      }
      goto LABEL_28;
    }
    return ((int)v15 + v7);
  }
  return v7;
}

uint64_t sub_F01D94(uint64_t a1, unsigned int *a2, unsigned int a3)
{
  uint64_t v6 = (int *)*((void *)a2 + 1);
  uint64_t v7 = *v6;
  uint64_t v8 = (char *)v6 - v7;
  unsigned int v9 = *(unsigned __int16 *)((char *)v6 - v7);
  if (v9 >= 0x2F && *((_WORD *)v8 + 23))
  {
    unsigned int v10 = *((unsigned __int8 *)v6 + *((unsigned __int16 *)v8 + 23));
    unint64_t v11 = *(void *)(a1 + 120);
    double v12 = 1.0;
    double v13 = 1.0;
    if (!v11) {
      goto LABEL_30;
    }
  }
  else
  {
    unsigned int v10 = 32;
    unint64_t v11 = *(void *)(a1 + 120);
    double v12 = 1.0;
    double v13 = 1.0;
    if (!v11) {
      goto LABEL_30;
    }
  }
  uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v15 = v10;
    if (v11 <= v10) {
      unint64_t v15 = v10 % v11;
    }
  }
  else
  {
    unint64_t v15 = (v11 - 1) & v10;
  }
  uint64_t v16 = *(void *)(a1 + 112);
  int v17 = *(uint64_t ****)(v16 + 8 * v15);
  if (!v17 || (int v18 = *v17) == 0)
  {
LABEL_30:
    if (v9 < 0xB) {
      goto LABEL_46;
    }
    goto LABEL_31;
  }
  unint64_t v19 = v11 - 1;
  if (v14.u32[0] < 2uLL)
  {
    while (1)
    {
      int v20 = v18[1];
      if (v20 == (uint64_t *)v10)
      {
        if (*((unsigned __int8 *)v18 + 16) == v10) {
          goto LABEL_27;
        }
      }
      else if (((unint64_t)v20 & v19) != v15)
      {
        goto LABEL_25;
      }
      int v18 = (uint64_t **)*v18;
      if (!v18) {
        goto LABEL_25;
      }
    }
  }
  while (1)
  {
    unint64_t v21 = (unint64_t)v18[1];
    if (v21 != v10)
    {
      if (v21 >= v11) {
        v21 %= v11;
      }
      if (v21 != v15)
      {
LABEL_25:
        double v13 = 1.0;
        if (v9 >= 0xB) {
          goto LABEL_31;
        }
LABEL_46:
        double v13 = v13 * v12 * sub_F02448((uint64_t)a2, (double **)(a1 + 152), v12);
        uint64_t v6 = (int *)*((void *)a2 + 1);
        uint64_t v7 = *v6;
        goto LABEL_47;
      }
      goto LABEL_20;
    }
    if (*((unsigned __int8 *)v18 + 16) == v10) {
      break;
    }
LABEL_20:
    int v18 = (uint64_t **)*v18;
    if (!v18)
    {
      double v13 = 1.0;
      goto LABEL_30;
    }
  }
LABEL_27:
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v22 = v10;
    if (v11 <= v10) {
      unint64_t v22 = v10 % v11;
    }
  }
  else
  {
    unint64_t v22 = (v11 - 1) & v10;
  }
  unsigned int v25 = *(double ***)(v16 + 8 * v22);
  if (!v25 || (unint64_t v26 = *v25) == 0) {
LABEL_96:
  }
    sub_5AE8("unordered_map::at: key not found");
  if (v14.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v27 = *((void *)v26 + 1);
      if (v27 == v10)
      {
        if (*((unsigned __int8 *)v26 + 16) == v10) {
          goto LABEL_45;
        }
      }
      else if ((v27 & v19) != v22)
      {
        goto LABEL_96;
      }
      unint64_t v26 = *(double **)v26;
      if (!v26) {
        goto LABEL_96;
      }
    }
  }
  while (2)
  {
    unint64_t v38 = *((void *)v26 + 1);
    if (v38 != v10)
    {
      if (v38 >= v11) {
        v38 %= v11;
      }
      if (v38 != v22) {
        goto LABEL_96;
      }
      goto LABEL_61;
    }
    if (*((unsigned __int8 *)v26 + 16) != v10)
    {
LABEL_61:
      unint64_t v26 = *(double **)v26;
      if (!v26) {
        goto LABEL_96;
      }
      continue;
    }
    break;
  }
LABEL_45:
  double v13 = v26[3];
  if (v9 < 0xB) {
    goto LABEL_46;
  }
LABEL_31:
  uint64_t v23 = *((unsigned __int16 *)v8 + 5);
  if (!v23) {
    goto LABEL_46;
  }
  int v24 = *(int *)((char *)v6 + v23);
  if ((v24 & 8) == 0)
  {
    if ((v24 & 0x200000) != 0) {
      double v12 = *(double *)(a1 + 80);
    }
    goto LABEL_46;
  }
LABEL_47:
  unint64_t v28 = (unsigned __int16 *)((char *)v6 - v7);
  if (*v28 < 0xBu || (uint64_t v29 = v28[5]) == 0 || (*((unsigned char *)v6 + v29) & 8) == 0)
  {
    uint64_t v30 = (double *)(a1 + 56);
    goto LABEL_51;
  }
  uint64_t v42 = *(void *)(a1 + 232);
  unint64_t v43 = (((unint64_t)(a2[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)a2[1] << 32) | *a2) ^ 0x1000000000000;
  uint64_t v44 = sub_32A458(v42, v43);
  if (v44)
  {
    long long v45 = &v44[-*(int *)v44];
    double v31 = -1.0;
    if (*(unsigned __int16 *)v45 >= 9u)
    {
      uint64_t v46 = *((unsigned __int16 *)v45 + 4);
      if (v46)
      {
        unsigned int v47 = *(unsigned __int16 *)&v44[v46];
        if ((unsigned __int16)(v47 - 1) <= 0xFFFDu) {
          double v31 = (double)v47 / 100.0;
        }
      }
    }
  }
  else
  {
    double v31 = sub_32A584(v42, v43);
  }
  if ((*(uint64_t *)&v31 <= -1 || ((*(void *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
    && (unint64_t)(*(void *)&v31 - 1) >= 0xFFFFFFFFFFFFFLL
    && (*(void *)&v31 & 0x7FFFFFFFFFFFFFFFLL) != 0)
  {
    uint64_t v30 = (double *)(a1 + 64);
LABEL_51:
    double v31 = *v30;
  }
  uint64_t v32 = (int *)*((void *)a2 + 1);
  uint64_t v33 = (unsigned __int16 *)((char *)v32 - *v32);
  double v34 = 0.0;
  if (*v33 >= 9u)
  {
    uint64_t v35 = v33[4];
    if (v35)
    {
      LODWORD(v34) = *(int *)((char *)v32 + v35);
      double v34 = (double)*(unint64_t *)&v34;
    }
  }
  double v36 = (double)a3 / 1000000000.0 * v13 * v34;
  if (v36 >= 0.0)
  {
    if (v36 < 4.50359963e15)
    {
      uint64_t v37 = (uint64_t)(v36 + v36) + 1;
      goto LABEL_69;
    }
  }
  else if (v36 > -4.50359963e15)
  {
    uint64_t v37 = (uint64_t)(v36 + v36);
    if (v37 >= 1) {
      --v37;
    }
LABEL_69:
    double v36 = (double)(v37 >> 1);
  }
  double v39 = (double)(uint64_t)v36 / 100000.0 / v31 * 60.0 * 60.0 * 10.0;
  if (v39 >= 0.0)
  {
    if (v39 < 4.50359963e15)
    {
      uint64_t v40 = (uint64_t)(v39 + v39) + 1;
      goto LABEL_77;
    }
  }
  else if (v39 > -4.50359963e15)
  {
    uint64_t v40 = (uint64_t)(v39 + v39);
    if (v40 >= 1) {
      --v40;
    }
LABEL_77:
    double v39 = (double)(v40 >> 1);
  }
  return (int)v39;
}

uint64_t sub_F02210(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  int v8 = sub_F0281C(a1, *(_DWORD *)(a2 + 256), a4);
  *(_DWORD *)(a2 + 256) = v8;
  int v9 = v8 + a4;
  uint64_t v10 = *(void *)(a2 + 24) - *(void *)(a2 + 16);
  if (v10)
  {
    unint64_t v11 = 0;
    uint64_t v12 = v10 >> 2;
    do
    {
      unint64_t v15 = *(int **)(sub_EB2F38(a3, v11) + 8);
      uint64_t v16 = (unsigned __int16 *)((char *)v15 - *v15);
      if (*v16 < 0xBu || (uint64_t v17 = v16[5]) == 0 || (*((unsigned char *)v15 + v17) & 8) == 0)
      {
        uint64_t v13 = *(void *)(a2 + 16);
        int v14 = sub_F0281C(a1, *(_DWORD *)(v13 + 4 * v11), v9);
        *(_DWORD *)(v13 + 4 * v11) = v14;
        v9 += v14;
      }
      ++v11;
    }
    while (v12 != v11);
  }
  uint64_t result = sub_F0281C(a1, *(_DWORD *)(a2 + 260), v9);
  *(_DWORD *)(a2 + 260) = result;
  return result;
}

uint64_t sub_F022F8(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(a1 + 88) * (double)(*(_DWORD *)(a2 + 96) & 0x7FFFFFF);
  if (v2 >= 0.0)
  {
    if (v2 >= 4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v3 = (uint64_t)(v2 + v2) + 1;
  }
  else
  {
    if (v2 <= -4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v3 = (uint64_t)(v2 + v2);
    if (v3 >= 1) {
      --v3;
    }
  }
  double v2 = (double)(v3 >> 1);
LABEL_9:
  double v4 = (double)(uint64_t)v2 / 100000.0 / *(double *)(a1 + 56) * 60.0 * 60.0 * 10.0;
  if (v4 >= 0.0)
  {
    if (v4 < 4.50359963e15)
    {
      uint64_t v5 = (uint64_t)(v4 + v4) + 1;
LABEL_16:
      double v4 = (double)(v5 >> 1);
    }
  }
  else if (v4 > -4.50359963e15)
  {
    uint64_t v5 = (uint64_t)(v4 + v4);
    if (v5 >= 1) {
      --v5;
    }
    goto LABEL_16;
  }
  uint64_t v6 = (int)v4;
  uint64_t v7 = *(int **)(a2 + 8);
  int v8 = (unsigned __int16 *)((char *)v7 - *v7);
  if (*v8 < 0xBu || (uint64_t v9 = v8[5]) == 0 || (*((unsigned char *)v7 + v9) & 8) == 0)
  {
    uint64_t v10 = *(int **)(a2 + 56);
    unint64_t v11 = (unsigned __int16 *)((char *)v10 - *v10);
    if (*v11 >= 0xBu)
    {
      uint64_t v12 = v11[5];
      if (v12)
      {
        if ((*((unsigned char *)v10 + v12) & 8) != 0) {
          return (*(_DWORD *)(a1 + 72) + v6);
        }
      }
    }
  }
  return v6;
}

double sub_F02448(uint64_t a1, double **a2, double a3)
{
  uint64_t v3 = *(int **)(a1 + 8);
  double v4 = (unsigned __int16 *)((char *)v3 - *v3);
  unsigned int v5 = *v4;
  double v6 = 0.0;
  if (!*(unsigned char *)(a1 + 46))
  {
    if (v5 >= 0x57)
    {
      if (v4[43])
      {
        int v14 = (unsigned int *)((char *)v3 + v4[43]);
        unint64_t v15 = (int *)((char *)v14 + *v14);
        uint64_t v16 = (unsigned __int16 *)((char *)v15 - *v15);
        double v10 = 0.0;
        if (*v16 >= 5u)
        {
          uint64_t v17 = v16[2];
          if (v17)
          {
            LOWORD(v6) = *(_WORD *)((char *)v15 + v17);
            double v6 = ((double)*(unint64_t *)&v6 + (double)*(unint64_t *)&v6) / 65535.0;
          }
        }
        uint64_t v3 = (int *)((char *)v14 + *v14);
        int v18 = (unsigned __int16 *)((char *)v3 - *v3);
        if (*v18 >= 7u)
        {
          unsigned int v13 = v18[3];
          if (v13) {
            goto LABEL_30;
          }
        }
      }
      else
      {
        double v10 = 0.0;
        if (v5 >= 0x7B)
        {
          if (v4[61])
          {
            LOWORD(v6) = *(_WORD *)((char *)v3 + v4[61]);
            double v6 = ((double)*(unint64_t *)&v6 + (double)*(unint64_t *)&v6) / 65535.0;
          }
          if (v5 >= 0x7D)
          {
            unsigned int v13 = v4[62];
            if (v13) {
              goto LABEL_30;
            }
          }
        }
      }
      goto LABEL_31;
    }
LABEL_18:
    double v10 = 0.0;
    goto LABEL_31;
  }
  if (v5 < 0x57) {
    goto LABEL_18;
  }
  if (v4[43])
  {
    uint64_t v7 = (unsigned int *)((char *)v3 + v4[43]);
    int v8 = (int *)((char *)v7 + *v7);
    uint64_t v9 = (unsigned __int16 *)((char *)v8 - *v8);
    double v10 = 0.0;
    if (*v9 >= 7u)
    {
      uint64_t v11 = v9[3];
      if (v11)
      {
        LOWORD(v6) = *(_WORD *)((char *)v8 + v11);
        double v6 = ((double)*(unint64_t *)&v6 + (double)*(unint64_t *)&v6) / 65535.0;
      }
    }
    uint64_t v3 = (int *)((char *)v7 + *v7);
    uint64_t v12 = (unsigned __int16 *)((char *)v3 - *v3);
    if (*v12 < 5u) {
      goto LABEL_31;
    }
    unsigned int v13 = v12[2];
    if (!v13) {
      goto LABEL_31;
    }
LABEL_30:
    LOWORD(v10) = *(_WORD *)((char *)v3 + v13);
    double v10 = (double)*(unint64_t *)&v10 + (double)*(unint64_t *)&v10;
    goto LABEL_31;
  }
  if (v5 < 0x7D)
  {
    double v10 = 0.0;
    if (v5 < 0x7B) {
      goto LABEL_31;
    }
  }
  else if (v4[62])
  {
    LOWORD(a3) = *(_WORD *)((char *)v3 + v4[62]);
    double v6 = ((double)*(unint64_t *)&a3 + (double)*(unint64_t *)&a3) / 65535.0;
  }
  unsigned int v13 = v4[61];
  double v10 = 0.0;
  if (v13) {
    goto LABEL_30;
  }
LABEL_31:
  double v19 = v10 / 65535.0;
  double v20 = v6 + v10 / 65535.0;
  double result = 1.0;
  if (v20 == 0.0) {
    return result;
  }
  unint64_t v22 = *a2;
  double v23 = **a2;
  if (v20 <= v23)
  {
    double v41 = v22[1];
    double v42 = -v20;
    if (v23 >= -v20) {
      return (v6 * v41 + v19 * v22[1]) / v20;
    }
  }
  else
  {
    int v24 = a2[1];
    unsigned int v25 = *a2;
    if ((char *)v24 - (char *)v22 >= 16)
    {
      double v26 = **a2;
      uint64_t v27 = *a2;
      if ((char *)v24 - (char *)v22 != 16)
      {
        unint64_t v28 = (unint64_t)((char *)v24 - (char *)v22) >> 4;
        uint64_t v27 = *a2;
        do
        {
          unint64_t v29 = (4 * v28) & 0xFFFFFFFFFFFFFFF0;
          _X14 = (char *)v27 + v29;
          __asm { PRFM            #0, [X14] }
          double v36 = &v27[2 * (v28 >> 1)];
          _X13 = (char *)v36 + v29;
          __asm { PRFM            #0, [X13] }
          if (*v36 >= v20) {
            unint64_t v39 = 0;
          }
          else {
            unint64_t v39 = v28 >> 1;
          }
          v27 += 2 * v39;
          v28 -= v28 >> 1;
        }
        while ((uint64_t)v28 > 1);
        double v26 = *v27;
      }
      unsigned int v25 = &v27[2 * (v26 < v20)];
    }
    if (v25 == v24)
    {
      double v41 = *(v24 - 1);
      double v42 = -v20;
      if (v23 >= -v20) {
        return (v6 * v41 + v19 * v22[1]) / v20;
      }
    }
    else
    {
      double v40 = *(v25 - 2);
      if (v40 == *v25)
      {
        double v41 = v25[1];
        double v42 = -v20;
        if (v23 >= -v20) {
          return (v6 * v41 + v19 * v22[1]) / v20;
        }
      }
      else
      {
        double v41 = *(v25 - 1) + (v20 - v40) / (*v25 - v40) * (v25[1] - *(v25 - 1));
        double v42 = -v20;
        if (v23 >= -v20) {
          return (v6 * v41 + v19 * v22[1]) / v20;
        }
      }
    }
  }
  unint64_t v43 = a2[1];
  if ((char *)v43 - (char *)v22 >= 16)
  {
    if ((char *)v43 - (char *)v22 != 16)
    {
      unint64_t v44 = (unint64_t)((char *)v43 - (char *)v22) >> 4;
      do
      {
        unint64_t v45 = (4 * v44) & 0xFFFFFFFFFFFFFFF0;
        _X13 = (char *)v22 + v45;
        __asm { PRFM            #0, [X13] }
        uint64_t v48 = &v22[2 * (v44 >> 1)];
        _X12 = (char *)v48 + v45;
        __asm { PRFM            #0, [X12] }
        if (*v48 >= v42) {
          unint64_t v51 = 0;
        }
        else {
          unint64_t v51 = v44 >> 1;
        }
        v22 += 2 * v51;
        v44 -= v44 >> 1;
      }
      while ((uint64_t)v44 > 1);
      double v23 = *v22;
    }
    v22 += 2 * (v23 < v42);
  }
  if (v22 == v43) {
    return (v6 * v41 + v19 * *(v43 - 1)) / v20;
  }
  double v52 = *(v22 - 2);
  if (v52 == *v22) {
    return (v6 * v41 + v19 * v22[1]) / v20;
  }
  else {
    return (v6 * v41 + v19 * (*(v22 - 1) + (v42 - v52) / (*v22 - v52) * (v22[1] - *(v22 - 1)))) / v20;
  }
}

uint64_t sub_F0281C(void *a1, int a2, int a3)
{
  uint64_t v3 = (_DWORD *)(a1[25] + 8);
  uint64_t v4 = a1[26] - (void)v3 - 8;
  if (v4 >= 8)
  {
    if (a1[26] - (void)v3 != 16)
    {
      unint64_t v5 = (unint64_t)v4 >> 3;
      do
      {
        unint64_t v6 = (2 * v5) & 0xFFFFFFFFFFFFFFF8;
        _X12 = (char *)v3 + v6;
        __asm { PRFM            #0, [X12] }
        unsigned int v13 = &v3[2 * (v5 >> 1)];
        _X11 = (char *)v13 + v6;
        __asm { PRFM            #0, [X11] }
        if (*v13 >= a3) {
          unint64_t v16 = 0;
        }
        else {
          unint64_t v16 = v5 >> 1;
        }
        v3 += 2 * v16;
        v5 -= v5 >> 1;
      }
      while ((uint64_t)v5 > 1);
    }
    v3 += 2 * (*v3 < a3);
  }
  int v17 = *(v3 - 2);
  int v18 = *v3 - v17;
  if (*v3 == v17)
  {
    int v19 = *(v3 - 1);
    goto LABEL_20;
  }
  int v20 = v3[1];
  int v21 = *(v3 - 1);
  double v22 = (double)(a3 - v17) / (double)v18 * (double)(v20 - v21);
  if (v22 >= 0.0)
  {
    if (v22 < 4.50359963e15)
    {
      uint64_t v23 = (uint64_t)(v22 + v22) + 1;
LABEL_18:
      double v22 = (double)(v23 >> 1);
    }
  }
  else if (v22 > -4.50359963e15)
  {
    uint64_t v23 = (uint64_t)(v22 + v22);
    if (v23 >= 1) {
      --v23;
    }
    goto LABEL_18;
  }
  int v19 = v21 + (int)v22;
LABEL_20:
  int v24 = v19 + a2;
  unsigned int v25 = (_DWORD *)(a1[22] + 8);
  uint64_t v26 = a1[23] - (void)v25 - 8;
  if (v26 >= 8)
  {
    if (a1[23] - (void)v25 != 16)
    {
      unint64_t v27 = (unint64_t)v26 >> 3;
      do
      {
        unint64_t v28 = (2 * v27) & 0xFFFFFFFFFFFFFFF8;
        _X13 = (char *)v25 + v28;
        __asm { PRFM            #0, [X13] }
        double v31 = &v25[2 * (v27 >> 1)];
        _X12 = (char *)v31 + v28;
        __asm { PRFM            #0, [X12] }
        if (*v31 >= v24) {
          unint64_t v34 = 0;
        }
        else {
          unint64_t v34 = v27 >> 1;
        }
        v25 += 2 * v34;
        v27 -= v27 >> 1;
      }
      while ((uint64_t)v27 > 1);
    }
    v25 += 2 * (*v25 < v24);
  }
  int v35 = *(v25 - 2);
  int v36 = *v25 - v35;
  if (*v25 == v35) {
    return (*(v25 - 1) - a3);
  }
  int v38 = v25[1];
  int v39 = *(v25 - 1);
  double v40 = (double)(v24 - v35) / (double)v36 * (double)(v38 - v39);
  if (v40 >= 0.0)
  {
    if (v40 < 4.50359963e15)
    {
      uint64_t v41 = (uint64_t)(v40 + v40) + 1;
LABEL_37:
      double v40 = (double)(v41 >> 1);
    }
  }
  else if (v40 > -4.50359963e15)
  {
    uint64_t v41 = (uint64_t)(v40 + v40);
    if (v41 >= 1) {
      --v41;
    }
    goto LABEL_37;
  }
  return (v39 + (int)v40 - a3);
}

uint64_t sub_F02A2C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  sub_F02C34(a1 + 72, a2 + 72);
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  int v8 = *(unsigned char **)(a2 + 112);
  uint64_t v7 = *(unsigned char **)(a2 + 120);
  uint64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if (v9 < 0) {
      sub_2E00();
    }
    double v10 = (char *)operator new(v7 - v8);
    *(void *)(a1 + 112) = v10;
    *(void *)(a1 + 120) = v10;
    *(void *)(a1 + 128) = &v10[16 * (v9 >> 4)];
    size_t v11 = v9 & 0xFFFFFFFFFFFFFFF0;
    memcpy(v10, v8, v11);
    *(void *)(a1 + 120) = &v10[v11];
  }
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  unsigned int v13 = *(unsigned char **)(a2 + 136);
  uint64_t v12 = *(unsigned char **)(a2 + 144);
  uint64_t v14 = v12 - v13;
  if (v12 != v13)
  {
    if (v14 < 0) {
      sub_2E00();
    }
    unint64_t v15 = (char *)operator new(v12 - v13);
    *(void *)(a1 + 136) = v15;
    *(void *)(a1 + 144) = v15;
    *(void *)(a1 + 152) = &v15[8 * (v14 >> 3)];
    size_t v16 = v14 & 0xFFFFFFFFFFFFFFF8;
    memcpy(v15, v13, v16);
    *(void *)(a1 + 144) = &v15[v16];
  }
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  int v18 = *(unsigned char **)(a2 + 160);
  int v17 = *(unsigned char **)(a2 + 168);
  uint64_t v19 = v17 - v18;
  if (v17 != v18)
  {
    if (v19 < 0) {
      sub_2E00();
    }
    int v20 = (char *)operator new(v17 - v18);
    *(void *)(a1 + 160) = v20;
    *(void *)(a1 + 168) = v20;
    *(void *)(a1 + 176) = &v20[8 * (v19 >> 3)];
    memcpy(v20, v18, v19 & 0xFFFFFFFFFFFFFFF8);
    *(void *)(a1 + 168) = &v20[v19 & 0xFFFFFFFFFFFFFFF8];
  }
  return a1;
}

void sub_F02BB0(_Unwind_Exception *a1)
{
  uint64_t v7 = *v5;
  if (*v5)
  {
    v1[21] = v7;
    operator delete(v7);
    int v8 = *v4;
    if (!*v4)
    {
LABEL_3:
      uint64_t v9 = *v3;
      if (!*v3) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    int v8 = *v4;
    if (!*v4) {
      goto LABEL_3;
    }
  }
  v1[18] = v8;
  operator delete(v8);
  uint64_t v9 = *v3;
  if (!*v3)
  {
LABEL_4:
    sub_12168(v2);
    _Unwind_Resume(a1);
  }
LABEL_7:
  v1[15] = v9;
  operator delete(v9);
  sub_12168(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_F02C34(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    sub_B6C0(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (unint64_t i = *(unsigned __int8 **)(a2 + 16); i; unint64_t i = *(unsigned __int8 **)i)
    sub_F02D78(a1, i + 16, (_OWORD *)i + 1);
  return a1;
}

void sub_F02D50(_Unwind_Exception *a1)
{
  sub_12168(v1);
  _Unwind_Resume(a1);
}

void sub_F02D64(_Unwind_Exception *a1)
{
  sub_12168(v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_F02D78(uint64_t a1, unsigned __int8 *a2, _OWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(uint64_t ****)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      double v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == (uint64_t *)v6)
            {
              if (*((unsigned __int8 *)v10 + 16) == v6) {
                return v10;
              }
            }
            else if (((unint64_t)v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            double v10 = (uint64_t **)*v10;
            if (!v10) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v11 = (unint64_t)v10[1];
          if (v11 == v6)
          {
            if (*((unsigned __int8 *)v10 + 16) == v6) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          double v10 = (uint64_t **)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  uint64_t v14 = operator new(0x20uLL);
  *uint64_t v14 = 0;
  v14[1] = v6;
  *((_OWORD *)v14 + 1) = *a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    unint64_t v6 = v3;
  }
  else
  {
    BOOL v17 = 1;
    if (v7 >= 3) {
      BOOL v17 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v7);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t prime = v19;
    }
    else {
      size_t prime = v18;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_36;
    }
    if (prime < v7)
    {
      unint64_t v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v22 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        unint64_t v21 = std::__next_prime(v21);
      }
      else
      {
        uint64_t v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2) {
          unint64_t v21 = v23;
        }
      }
      if (prime <= v21) {
        size_t prime = v21;
      }
      if (prime < v7) {
LABEL_36:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        v6 %= v7;
      }
    }
    else
    {
      unint64_t v6 = (v7 - 1) & v6;
    }
  }
  uint64_t v24 = *(void *)a1;
  unsigned int v25 = *(void **)(*(void *)a1 + 8 * v6);
  if (v25)
  {
    *uint64_t v14 = *v25;
LABEL_59:
    *unsigned int v25 = v14;
    goto LABEL_60;
  }
  *uint64_t v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v24 + 8 * v6) = a1 + 16;
  if (*v14)
  {
    unint64_t v26 = *(void *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v26 >= v7) {
        v26 %= v7;
      }
    }
    else
    {
      v26 &= v7 - 1;
    }
    unsigned int v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_59;
  }
LABEL_60:
  ++*(void *)(a1 + 24);
  return (uint64_t **)v14;
}

void sub_F03068(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_F0307C()
{
  unk_25FCACF = 16641;
  word_25FCAB8 = 65;
  byte_25FCAE7 = 1;
  byte_25FCAD1 = 0;
}

uint64_t sub_F030A4(uint64_t a1, void *a2, uint64_t a3)
{
  *(unsigned char *)a1 = 1;
  *(_OWORD *)(a1 + 8) = xmmword_20F0FA0;
  *(void *)(a1 + 24) = 0x4041800000000000;
  *(_DWORD *)(a1 + 32) = 9000;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(a1 + 40) = _Q0;
  *(void *)(a1 + 56) = 675;
  *(void *)(a1 + 64) = 0x4008000000000000;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 1065353216;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  unint64_t v11 = operator new(0x10uLL);
  *(_OWORD *)(a1 + 136) = 0u;
  *(void *)(a1 + 112) = v11;
  *v11++ = xmmword_20B8F70;
  *(void *)(a1 + 120) = v11;
  *(void *)(a1 + 128) = v11;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  sub_3CB660(a2, a3, __p);
  sub_F0331C(a1, __p);
  uint64_t v12 = v21;
  if (v21)
  {
    do
    {
      unint64_t v19 = *(char **)v12;
      sub_57AC8((uint64_t *)v12 + 5);
      if (v12[39] < 0) {
        operator delete(*((void **)v12 + 2));
      }
      operator delete(v12);
      uint64_t v12 = v19;
    }
    while (v19);
  }
  unsigned int v13 = __p[0];
  __p[0] = 0;
  if (v13) {
    operator delete(v13);
  }
  *(void *)(a1 + 168) = *(void *)(a1 + 160);
  uint64_t v14 = *(char **)(a1 + 136);
  float v15 = *(char **)(a1 + 144);
  if ((unint64_t)(v15 - v14) <= 0xF)
  {
    *(_OWORD *)__p = xmmword_20E1750;
    sub_F03C90((void *)(a1 + 136), (char *)__p, (char *)&v21, 2uLL);
    uint64_t v14 = *(char **)(a1 + 136);
    float v15 = *(char **)(a1 + 144);
  }
  if (v14 != v15)
  {
    float v16 = v14 + 4;
    do
    {
      *v16 += *(v16 - 1);
      sub_3EC418(a1 + 160, v16, v16 - 1);
      BOOL v17 = (char *)(v16 + 1);
      v16 += 2;
    }
    while (v17 != v15);
  }
  return a1;
}

void sub_F0328C(_Unwind_Exception *a1)
{
  unint64_t v7 = *v4;
  if (*v4)
  {
    v1[21] = v7;
    operator delete(v7);
    uint8x8_t v8 = *v3;
    if (!*v3)
    {
LABEL_3:
      uint64_t v9 = *v5;
      if (!*v5) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    uint8x8_t v8 = *v3;
    if (!*v3) {
      goto LABEL_3;
    }
  }
  v1[18] = v8;
  operator delete(v8);
  uint64_t v9 = *v5;
  if (!*v5)
  {
LABEL_4:
    sub_12168(v2);
    _Unwind_Resume(a1);
  }
LABEL_7:
  v1[15] = v9;
  operator delete(v9);
  sub_12168(v2);
  _Unwind_Resume(a1);
}

void sub_F0331C(uint64_t a1, void *a2)
{
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91A0;
  strcpy((char *)__p[0], "use_cost_function_evaluator");
  long long v4 = sub_58070(a2, (uint64_t)__p);
  if (v4 && (int v5 = *((_DWORD *)v4 + 12), (v5 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)a1 = v5 == 4;
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_6;
    }
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a1 != 0;
    if (SHIBYTE(__p[2]) < 0) {
LABEL_6:
    }
      operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "aggressive_eta_factor");
  unint64_t v6 = sub_58070(a2, (uint64_t)__p);
  unint64_t v7 = (void *)(a1 + 8);
  if (v6)
  {
    unint64_t v7 = v6 + 5;
    if (*((_DWORD *)v6 + 12) != 1) {
      unint64_t v7 = (void *)(a1 + 8);
    }
  }
  *(void *)(a1 + 8) = *v7;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 13;
  strcpy((char *)__p, "walking_speed");
  sub_F038AC(a2, (uint64_t)__p, (double *)(a1 + 16));
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "fallback_ferry_speed");
  sub_F038AC(a2, (uint64_t)__p, (double *)(a1 + 24));
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "ferry_entry_penalty");
  sub_F0397C(a2, (uint64_t)__p, (_DWORD *)(a1 + 32));
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 14;
  strcpy((char *)__p, "unpaved_factor");
  uint8x8_t v8 = sub_58070(a2, (uint64_t)__p);
  uint64_t v9 = (void *)(a1 + 40);
  if (v8)
  {
    uint64_t v9 = v8 + 5;
    if (*((_DWORD *)v8 + 12) != 1) {
      uint64_t v9 = (void *)(a1 + 40);
    }
  }
  *(void *)(a1 + 40) = *v9;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B5EB0;
  strcpy((char *)__p[0], "transition_crossing_factor");
  double v10 = sub_58070(a2, (uint64_t)__p);
  unint64_t v11 = (void *)(a1 + 48);
  if (v10)
  {
    unint64_t v11 = v10 + 5;
    if (*((_DWORD *)v10 + 12) != 1) {
      unint64_t v11 = (void *)(a1 + 48);
    }
  }
  *(void *)(a1 + 48) = *v11;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9280;
  strcpy((char *)__p[0], "min_distance_for_terminal_crossing");
  sub_D85214(a2, (uint64_t)__p, (uint64_t *)(a1 + 56));
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91C0;
  strcpy((char *)__p[0], "terminal_crossing_factor");
  uint64_t v12 = sub_58070(a2, (uint64_t)__p);
  unsigned int v13 = (void *)(a1 + 64);
  if (v12)
  {
    unsigned int v13 = v12 + 5;
    if (*((_DWORD *)v12 + 12) != 1) {
      unsigned int v13 = (void *)(a1 + 64);
    }
  }
  *(void *)(a1 + 64) = *v13;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "form_of_way_factors");
  sub_F03A4C(a2, (uint64_t)__p, a1 + 72, (uint64_t)&off_243F0D0);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "elevation_factors");
  sub_D4EAD4(a2, (uint64_t)__p, (void *)(a1 + 112));
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "fatigue_offsets");
  sub_F04520(a2, (uint64_t)__p, (void *)(a1 + 136));
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_F037A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F037E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __p = 0;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  int v5 = sub_374CDC(a2, (uint64_t)&qword_254E4E8, (uint64_t *)&__p);
  sub_F030A4(a1, v5, a3);
  unint64_t v6 = (void **)__p;
  if (__p)
  {
    unint64_t v7 = v11;
    uint8x8_t v8 = __p;
    if (v11 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0) {
          operator delete(*(v7 - 3));
        }
        v7 -= 3;
      }
      while (v7 != v6);
      uint8x8_t v8 = __p;
    }
    unint64_t v11 = v6;
    operator delete(v8);
  }
  return a1;
}

void sub_F03898(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1A668((void **)va);
  _Unwind_Resume(a1);
}

void sub_F038AC(void *a1, uint64_t a2, double *a3)
{
  long long v4 = sub_58070(a1, a2);
  if (v4 && !*((_DWORD *)v4 + 12))
  {
    uint64_t v7 = v4[5];
    if (*(char *)(v7 + 23) < 0)
    {
      sub_4200(__p, *(void **)v7, *(void *)(v7 + 8));
    }
    else
    {
      long long v8 = *(_OWORD *)v7;
      uint64_t v10 = *(void *)(v7 + 16);
      *(_OWORD *)__p = v8;
    }
  }
  else
  {
    __p[0] = 0;
    HIBYTE(v10) = 0;
  }
  int v5 = __p[1];
  char v6 = HIBYTE(v10);
  if (v10 >= 0) {
    int v5 = (void *)HIBYTE(v10);
  }
  if (v5)
  {
    *a3 = sub_F03FA4((uint64_t)__p);
    char v6 = HIBYTE(v10);
  }
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_F03960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_F0397C(void *a1, uint64_t a2, _DWORD *a3)
{
  long long v4 = sub_58070(a1, a2);
  if (v4 && !*((_DWORD *)v4 + 12))
  {
    uint64_t v7 = v4[5];
    if (*(char *)(v7 + 23) < 0)
    {
      sub_4200(__p, *(void **)v7, *(void *)(v7 + 8));
    }
    else
    {
      long long v8 = *(_OWORD *)v7;
      uint64_t v10 = *(void *)(v7 + 16);
      *(_OWORD *)__p = v8;
    }
  }
  else
  {
    __p[0] = 0;
    HIBYTE(v10) = 0;
  }
  int v5 = __p[1];
  char v6 = HIBYTE(v10);
  if (v10 >= 0) {
    int v5 = (void *)HIBYTE(v10);
  }
  if (v5)
  {
    *a3 = sub_F040E4((uint64_t)__p);
    char v6 = HIBYTE(v10);
  }
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_F03A30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

size_t sub_F03A4C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  size_t result = (size_t)sub_58070(a1, a2);
  if (result)
  {
    size_t result = sub_5C4AC(a1, a2);
    uint64_t v9 = *(_DWORD **)result;
    long long v8 = *(_DWORD **)(result + 8);
    unsigned int v25 = v8;
    while (v9 != v8)
    {
      if (v9[2] != 2)
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_23FDF58;
      }
      unint64_t v26 = v9;
      uint64_t v10 = *(void **)v9;
      for (unint64_t i = *(uint64_t **)(*(void *)v9 + 16); i; unint64_t i = (uint64_t *)*i)
      {
        for (uint64_t j = 0; j != 55; ++j)
        {
          uint64_t v14 = *(const char **)(a4 + 8 * j);
          size_t result = strlen(v14);
          uint64_t v15 = *((unsigned __int8 *)i + 39);
          int v16 = (char)v15;
          if ((v15 & 0x80u) != 0) {
            uint64_t v15 = i[3];
          }
          if (result == v15)
          {
            size_t v17 = result;
            if (v16 >= 0) {
              unint64_t v18 = (char *)(i + 2);
            }
            else {
              unint64_t v18 = (char *)i[2];
            }
            if (result)
            {
              while (1)
              {
                __darwin_ct_rune_t v19 = *v14;
                __darwin_ct_rune_t v20 = __toupper(*v18);
                size_t result = __toupper(v19);
                if (v20 != result) {
                  break;
                }
                ++v18;
                ++v14;
                if (!--v17) {
                  goto LABEL_21;
                }
              }
            }
            else
            {
LABEL_21:
              unint64_t v21 = sub_58070(v10, (uint64_t)(i + 2));
              if (!v21 || *((_DWORD *)v21 + 12) != 1)
              {
                uint8x8_t v22 = __cxa_allocate_exception(0x40uLL);
                std::operator+<char>();
                uint64_t v23 = (void *)sub_2F404((uint64_t)v22, &v29);
              }
              uint64_t v13 = v21[5];
              unsigned __int8 v28 = j;
              *(void *)&long long v29 = &v28;
              size_t result = (size_t)sub_F04214(a3, &v28, (uint64_t)&unk_20F06E0, (unsigned char **)&v29);
              *(void *)(result + 24) = v13;
            }
          }
        }
      }
      long long v8 = v25;
      uint64_t v9 = v26 + 4;
    }
  }
  return result;
}

void sub_F03C5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_F03C90(void *result, char *a2, char *a3, size_t __sz)
{
  uint64_t v7 = result;
  uint64_t v8 = result[2];
  unint64_t v9 = *result;
  unint64_t v10 = *result;
  if (__sz <= (v8 - *result) >> 3)
  {
    size_t v17 = result + 1;
    uint64_t v18 = result[1];
    uint64_t v19 = v18 - v9;
    unint64_t v20 = (uint64_t)(v18 - v9) >> 3;
    if (v20 < __sz)
    {
      unint64_t v21 = &a2[8 * v20];
      if (v18 == v9) {
        goto LABEL_34;
      }
      if ((unint64_t)(v19 - 8) >= 0x58)
      {
        BOOL v27 = v9 < (unint64_t)&a2[v19 & 0xFFFFFFFFFFFFFFF8]
           && v9 + (v19 & 0xFFFFFFFFFFFFFFF8) > (unint64_t)a2;
        uint8x8_t v22 = a2;
        if (!v27)
        {
          unint64_t v28 = ((unint64_t)(v19 - 8) >> 3) + 1;
          uint64_t v29 = 8 * (v28 & 0x3FFFFFFFFFFFFFF8);
          unint64_t v10 = v9 + v29;
          uint8x8_t v22 = &a2[v29];
          uint64_t v30 = (long long *)(a2 + 32);
          double v31 = (_OWORD *)(v9 + 32);
          uint64_t v32 = v28 & 0x3FFFFFFFFFFFFFF8;
          do
          {
            long long v34 = *(v30 - 2);
            long long v33 = *(v30 - 1);
            long long v36 = *v30;
            long long v35 = v30[1];
            v30 += 4;
            *(v31 - 2) = v34;
            *(v31 - 1) = v33;
            *double v31 = v36;
            v31[1] = v35;
            v31 += 4;
            v32 -= 8;
          }
          while (v32);
          if (v28 == (v28 & 0x3FFFFFFFFFFFFFF8)) {
            goto LABEL_33;
          }
        }
      }
      else
      {
        uint8x8_t v22 = a2;
      }
      do
      {
        *(_DWORD *)unint64_t v10 = *(_DWORD *)v22;
        *(_DWORD *)(v10 + 4) = *((_DWORD *)v22 + 1);
        v22 += 8;
        v10 += 8;
      }
      while (v22 != v21);
LABEL_33:
      unint64_t v10 = *v17;
LABEL_34:
      uint64_t v37 = (char *)v10;
      if (v21 != a3)
      {
        int v38 = &a2[v19];
        unint64_t v39 = a3 - &a2[v19] - 8;
        if (v39 < 0x38)
        {
          uint64_t v37 = (char *)v10;
        }
        else
        {
          unint64_t v40 = v10 - (void)v38;
          uint64_t v37 = (char *)v10;
          if (v40 >= 0x20)
          {
            uint64_t v41 = (v39 >> 3) + 1;
            uint64_t v42 = 8 * (v41 & 0x3FFFFFFFFFFFFFFCLL);
            v21 += v42;
            uint64_t v37 = (char *)(v10 + v42);
            unint64_t v43 = (_OWORD *)(v10 + 16);
            unint64_t v44 = &a2[8 * v20 + 16];
            uint64_t v45 = v41 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v46 = *(_OWORD *)v44;
              *(v43 - 1) = *((_OWORD *)v44 - 1);
              *unint64_t v43 = v46;
              v43 += 2;
              v44 += 32;
              v45 -= 4;
            }
            while (v45);
            if (v41 == (v41 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_47;
            }
          }
        }
        do
        {
          uint64_t v56 = *(void *)v21;
          v21 += 8;
          *(void *)uint64_t v37 = v56;
          v37 += 8;
        }
        while (v21 != a3);
      }
LABEL_47:
      int v16 = &v37[-v10];
      goto LABEL_48;
    }
    if (a2 == a3)
    {
      int v16 = (char *)(v10 - v9);
      goto LABEL_48;
    }
    unint64_t v23 = a3 - a2 - 8;
    if (v23 >= 0x58
      && ((unint64_t v24 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8, v9 >= (unint64_t)&a2[v24]) || v9 + v24 <= (unint64_t)a2))
    {
      uint64_t v47 = (v23 >> 3) + 1;
      uint64_t v48 = 8 * (v47 & 0x3FFFFFFFFFFFFFF8);
      unsigned int v25 = (_DWORD *)(v9 + v48);
      unint64_t v26 = &a2[v48];
      long long v49 = (long long *)(a2 + 32);
      uint64_t v50 = (_OWORD *)(v9 + 32);
      uint64_t v51 = v47 & 0x3FFFFFFFFFFFFFF8;
      do
      {
        long long v53 = *(v49 - 2);
        long long v52 = *(v49 - 1);
        long long v55 = *v49;
        long long v54 = v49[1];
        v49 += 4;
        *(v50 - 2) = v53;
        *(v50 - 1) = v52;
        *uint64_t v50 = v55;
        v50[1] = v54;
        v50 += 4;
        v51 -= 8;
      }
      while (v51);
      if (v47 == (v47 & 0x3FFFFFFFFFFFFFF8)) {
        goto LABEL_23;
      }
    }
    else
    {
      unsigned int v25 = (_DWORD *)*result;
      unint64_t v26 = a2;
    }
    do
    {
      *unsigned int v25 = *(_DWORD *)v26;
      v25[1] = *((_DWORD *)v26 + 1);
      v25 += 2;
      v26 += 8;
    }
    while (v26 != a3);
LABEL_23:
    int v16 = (char *)v25 - v9;
    goto LABEL_48;
  }
  if (v10)
  {
    result[1] = v10;
    operator delete((void *)v10);
    uint64_t v8 = 0;
    *uint64_t v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
  }
  if (__sz >> 61) {
    goto LABEL_49;
  }
  uint64_t v11 = v8 >> 2;
  if (v8 >> 2 <= __sz) {
    uint64_t v11 = __sz;
  }
  BOOL v12 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
  unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v12) {
    unint64_t v13 = v11;
  }
  if (v13 >> 61) {
LABEL_49:
  }
    sub_2E00();
  uint64_t v14 = v13;
  size_t result = operator new(8 * v13);
  unint64_t v10 = (unint64_t)result;
  *uint64_t v7 = result;
  v7[1] = result;
  v7[2] = &result[v14];
  uint64_t v15 = (char *)result;
  if (a2 != a3)
  {
    size_t result = memcpy(result, a2, ((a3 - a2 - 8) & 0xFFFFFFFFFFFFFFF8) + 8);
    uint64_t v15 = (char *)(v10 + ((a3 - a2 - 8) & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  int v16 = &v15[-v10];
  size_t v17 = v7 + 1;
LABEL_48:
  *size_t v17 = (unint64_t)&v16[v10];
  return result;
}

double sub_F03FA4(uint64_t a1)
{
  int v1 = *(char *)(a1 + 23);
  if (v1 < 0)
  {
    if (*(void *)(a1 + 8) == 7)
    {
      unint64_t v3 = *(int **)a1;
      if (**(_DWORD **)a1 == 1635151465 && *(_DWORD *)(*(void *)a1 + 3) == 1684630625) {
        return -1.0;
      }
LABEL_14:
      int v5 = *v3;
      int v6 = *(int *)((char *)v3 + 3);
      if (v5 != 1096175177 || v6 != 1145654337) {
        goto LABEL_18;
      }
      return -1.0;
    }
  }
  else if (v1 == 7)
  {
    BOOL v2 = *(_DWORD *)a1 == 1635151465 && *(_DWORD *)(a1 + 3) == 1684630625;
    unint64_t v3 = (int *)a1;
    if (v2) {
      return -1.0;
    }
    goto LABEL_14;
  }
LABEL_18:
  sub_67170(a1, &v10);
  double result = sub_5E828((uint64_t)&__p, v10);
  double v9 = result;
  if (v12 < 0)
  {
    operator delete(__p);
    return v9;
  }
  return result;
}

void sub_F040C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F040E4(uint64_t a1)
{
  int v1 = *(char *)(a1 + 23);
  if (v1 < 0)
  {
    if (*(void *)(a1 + 8) == 7)
    {
      unint64_t v3 = *(int **)a1;
      if (**(_DWORD **)a1 == 1635151465 && *(_DWORD *)(*(void *)a1 + 3) == 1684630625) {
        return 0x7FFFFFFFLL;
      }
LABEL_14:
      int v5 = *v3;
      int v6 = *(int *)((char *)v3 + 3);
      if (v5 != 1096175177 || v6 != 1145654337) {
        goto LABEL_18;
      }
      return 0x7FFFFFFFLL;
    }
  }
  else if (v1 == 7)
  {
    BOOL v2 = *(_DWORD *)a1 == 1635151465 && *(_DWORD *)(a1 + 3) == 1684630625;
    unint64_t v3 = (int *)a1;
    if (v2) {
      return 0x7FFFFFFFLL;
    }
    goto LABEL_14;
  }
LABEL_18:
  sub_67170(a1, &v10);
  uint64_t result = sub_5E9BC((unsigned __int16 **)&__p, v10);
  uint64_t v9 = result;
  if (v12 < 0)
  {
    operator delete(__p);
    return v9;
  }
  return result;
}

void sub_F041F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **sub_F04214(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned char **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    double v10 = *(uint64_t ****)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            unint64_t v13 = v11[1];
            if (v13 == (uint64_t *)v7)
            {
              if (*((unsigned __int8 *)v11 + 16) == v7) {
                return v11;
              }
            }
            else if (((unint64_t)v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            uint64_t v11 = (uint64_t **)*v11;
            if (!v11) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v12 = (unint64_t)v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int8 *)v11 + 16) == v7) {
              return v11;
            }
          }
          else
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (uint64_t **)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  uint64_t v15 = operator new(0x20uLL);
  *uint64_t v15 = 0;
  v15[1] = v7;
  *((unsigned char *)v15 + 16) = **a4;
  v15[3] = 0;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    unint64_t v7 = v4;
  }
  else
  {
    BOOL v18 = 1;
    if (v8 >= 3) {
      BOOL v18 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v8);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t prime = v20;
    }
    else {
      size_t prime = v19;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v8 = *(void *)(a1 + 8);
    }
    if (prime > v8) {
      goto LABEL_36;
    }
    if (prime < v8)
    {
      unint64_t v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (uint8x8_t v23 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        unint64_t v22 = std::__next_prime(v22);
      }
      else
      {
        uint64_t v24 = 1 << -(char)__clz(v22 - 1);
        if (v22 >= 2) {
          unint64_t v22 = v24;
        }
      }
      if (prime <= v22) {
        size_t prime = v22;
      }
      if (prime < v8) {
LABEL_36:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        v7 %= v8;
      }
    }
    else
    {
      unint64_t v7 = (v8 - 1) & v7;
    }
  }
  uint64_t v25 = *(void *)a1;
  unint64_t v26 = *(void **)(*(void *)a1 + 8 * v7);
  if (v26)
  {
    *uint64_t v15 = *v26;
LABEL_59:
    *unint64_t v26 = v15;
    goto LABEL_60;
  }
  *uint64_t v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  *(void *)(v25 + 8 * v7) = a1 + 16;
  if (*v15)
  {
    unint64_t v27 = *(void *)(*v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8) {
        v27 %= v8;
      }
    }
    else
    {
      v27 &= v8 - 1;
    }
    unint64_t v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_59;
  }
LABEL_60:
  ++*(void *)(a1 + 24);
  return (uint64_t **)v15;
}

void sub_F0450C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_F04520(void *a1, uint64_t a2, void *a3)
{
  uint64_t result = sub_58070(a1, a2);
  if (result)
  {
    a3[1] = *a3;
    uint64_t result = (uint64_t *)sub_5C4AC(a1, a2);
    uint64_t v7 = *result;
    uint64_t v8 = result[1];
    if (*result != v8)
    {
      do
      {
        if (*(_DWORD *)(v7 + 8) != 2)
        {
          exception = __cxa_allocate_exception(8uLL);
          void *exception = &off_23FDF58;
        }
        uint8x8_t v9 = *(void **)v7;
        char v17 = 9;
        strcpy((char *)__p, "threshold");
        uint64_t v10 = sub_561B0(v9, (uint64_t)__p);
        int v11 = sub_F040E4(v10);
        if (v17 < 0) {
          operator delete(__p[0]);
        }
        int v15 = v11;
        strcpy((char *)__p, "value");
        char v17 = 5;
        uint64_t v12 = sub_561B0(v9, (uint64_t)__p);
        int v13 = sub_F040E4(v12);
        if (v17 < 0) {
          operator delete(__p[0]);
        }
        LODWORD(__p[0]) = v13;
        uint64_t result = (uint64_t *)sub_3EC418((uint64_t)a3, &v15, (int *)__p);
        v7 += 16;
      }
      while (v7 != v8);
    }
  }
  return result;
}

void sub_F04694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_F046B4()
{
  unk_25FCAFF = 16641;
  word_25FCAE8 = 65;
  byte_25FCB17 = 1;
  byte_25FCB01 = 0;
  byte_25FCB2F = 8;
  strcpy((char *)&qword_25FCB18, "any_mode");
  byte_25FCB47 = 7;
  strcpy((char *)&dword_25FCB30, "cycling");
  byte_25FCB5F = 7;
  strcpy((char *)&dword_25FCB48, "driving");
  byte_25FCB77 = 7;
  strcpy((char *)&dword_25FCB60, "walking");
  qword_254E4E8 = (uint64_t)operator new(0x40uLL);
  *(_OWORD *)algn_254E4F0 = xmmword_20B9810;
  strcpy((char *)qword_254E4E8, "routing/route-planning/eta/WalkingETAEvaluatorParameters.json");
  return *(double *)"rParameters.json";
}

double sub_F047B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, char a7)
{
  *(void *)a1 = a3;
  *(void *)(a1 + 8) = a4;
  *(void *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 24) = a5;
  *(_DWORD *)(a1 + 28) = a6;
  *(_OWORD *)(a1 + 32) = xmmword_20B8E30;
  double result = NAN;
  *(void *)(a1 + 48) = 0x7FFFFFFFFFFFFFFFLL;
  *(unsigned char *)(a1 + 56) = a7;
  *(unsigned char *)(a1 + 57) = 0;
  *(_DWORD *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  return result;
}

uint64_t sub_F047E8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 56);
}

uint64_t sub_F047F0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 57);
}

uint64_t sub_F047F8(uint64_t a1)
{
  return a1 + 60;
}

uint64_t sub_F04800(uint64_t result)
{
  *(_DWORD *)(result + 60) = 0;
  *(_DWORD *)(result + 64) = 0;
  *(unsigned char *)(result + 57) = 0;
  return result;
}

__n128 sub_F0480C@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = a1[2];
  *a2 = result;
  a2[1].n128_u64[0] = a1[3].n128_u64[0];
  return result;
}

void sub_F04820()
{
  unk_25FCB8F = 16641;
  word_25FCB78 = 65;
  byte_25FCBA7 = 1;
  byte_25FCB91 = 0;
}

uint64_t sub_F04848(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v68 = (void **)(a1 + 40);
  *(_OWORD *)(a1 + 104) = 0u;
  uint64_t v7 = (void *)(a1 + 104);
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 136) = 1065353216;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  double v69 = (void *)(a1 + 104);
  if (!a3[3])
  {
    sub_F054B8(a1, a2, a4, (uint64_t)v88);
    __dst[0] = v88;
    sub_F0CDB4((void ***)__dst);
    *(void *)(a1 + 88) = 0;
    sub_F05B50(a1);
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)__dst);
      sub_188FC78(__dst, (uint64_t)"No preprocessed cost functions in the data. Registered ", 55);
      uint64_t v10 = (void *)std::ostream::operator<<();
      sub_188FC78(v10, (uint64_t)" cost functions from the current cost function JSON config.", 59);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 1u);
      if (SHIBYTE(v81[0]) < 0) {
        operator delete(__p[0]);
      }
      if (v87 < 0) {
        operator delete(v86);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    return a1;
  }
  sub_F054B8(a1, a3, a4, (uint64_t)&v83);
  *(void *)(a1 + 88) = 0x8FD8FD8FD8FD8FD9 * ((uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 4);
  __dst[0] = operator new(0x28uLL);
  *(_OWORD *)&__dst[1] = xmmword_20B9280;
  strcpy((char *)__dst[0], "override_data_build_cost_functions");
  uint64_t v8 = sub_58070(a2, (uint64_t)__dst);
  if (v8)
  {
    BOOL v9 = *((_DWORD *)v8 + 12) == 4;
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0) {
      goto LABEL_4;
    }
  }
  else
  {
    BOOL v9 = 0;
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
    {
LABEL_4:
      *(_OWORD *)__p = 0u;
      *(_OWORD *)uint64_t v81 = 0u;
      int v82 = 1065353216;
      if (v9) {
        goto LABEL_19;
      }
      goto LABEL_14;
    }
  }
  operator delete(__dst[0]);
  *(_OWORD *)__p = 0u;
  *(_OWORD *)uint64_t v81 = 0u;
  int v82 = 1065353216;
  if (v9) {
    goto LABEL_19;
  }
LABEL_14:
  int v11 = v84;
  if (v83 != v84)
  {
    uint64_t v12 = (uint64_t **)(v83 + 10);
    do
    {
      __dst[0] = (char *)*v68 + 1680 * *((unsigned int *)v12 - 10) + 8;
      int v13 = sub_7FCB8((uint64_t)__p, (uint64_t)__dst[0], (uint64_t)&unk_20F06E0, (long long **)__dst);
      uint64_t v14 = v12 - 4;
      if (v13 + 5 != (uint64_t *)(v12 - 4))
      {
        *((_DWORD *)v13 + 18) = *(_DWORD *)v12;
        sub_5A4DC(v13 + 5, *(v12 - 2), 0);
      }
      v12 += 6;
    }
    while (v14 + 5 != (uint64_t **)v11);
  }
LABEL_19:
  HIBYTE(__dst[2]) = 14;
  strcpy((char *)__dst, "cost_functions");
  int v15 = (void *)sub_560F4(a2, (uint64_t)__dst);
  if (SHIBYTE(__dst[2]) < 0) {
    operator delete(__dst[0]);
  }
  int v71 = 0;
  double v70 = v15;
  while (v81[1] < (void *)v15[3])
  {
    float v16 = (uint64_t *)v15[2];
    if (v16)
    {
      while (!v9 && sub_E2886C(v7, (uint64_t)(v16 + 2)))
      {
LABEL_26:
        float v16 = (uint64_t *)*v16;
        if (!v16) {
          goto LABEL_22;
        }
      }
      sub_F05C7C((uint64_t)(v16 + 2), v15, __p, (uint64_t)&v75);
      if (v78)
      {
        unsigned int v17 = sub_F05FDC(v4, &v75);
        BOOL v18 = v9;
        uint64_t v19 = v4;
        unsigned int v74 = v17;
        unsigned int v20 = *(_DWORD *)(a1 + 96);
        if (v20 <= v17) {
          unsigned int v20 = v17;
        }
        *(_DWORD *)(a1 + 96) = v20;
        unint64_t v21 = v83;
        unint64_t v22 = v84;
        if (v83 != v84)
        {
          while (1)
          {
            if (*((void *)v21 + 4) == v78)
            {
              uint64_t v25 = (uint64_t *)*((void *)v21 + 3);
              if (!v25)
              {
LABEL_58:
                uint64_t v7 = v69;
                uint64_t v4 = v19;
                if (v21 == v84) {
                  goto LABEL_59;
                }
LABEL_34:
                uint64_t v23 = *v21;
                __dst[0] = &v74;
                BOOL v9 = v18;
                sub_F0D964(a1, &v74, (uint64_t)&unk_20F06E0, (_DWORD **)__dst)[3] = v23;
                uint64_t v24 = *v21;
                __dst[0] = v16 + 2;
                sub_E28A9C((uint64_t)v7, (uint64_t)(v16 + 2), (uint64_t)&unk_20F06E0, (long long **)__dst)[5] = v24;
                goto LABEL_85;
              }
              while (1)
              {
                unint64_t v26 = (const void **)(v25 + 2);
                unint64_t v27 = sub_58070(&v75, (uint64_t)(v25 + 2));
                unint64_t v28 = v27;
                if (!v27) {
                  break;
                }
                uint64_t v29 = *((unsigned __int8 *)v25 + 39);
                if ((v29 & 0x80u) == 0) {
                  uint64_t v30 = *((unsigned __int8 *)v25 + 39);
                }
                else {
                  uint64_t v30 = v25[3];
                }
                uint64_t v31 = *((unsigned __int8 *)v27 + 39);
                int v32 = (char)v31;
                if ((v31 & 0x80u) != 0) {
                  uint64_t v31 = v27[3];
                }
                if (v30 != v31) {
                  break;
                }
                if (v32 >= 0) {
                  long long v33 = (unsigned __int8 *)(v27 + 2);
                }
                else {
                  long long v33 = (unsigned __int8 *)v27[2];
                }
                if ((v29 & 0x80) != 0)
                {
                  if (memcmp(*v26, v33, v25[3])) {
                    break;
                  }
                }
                else if (*((unsigned char *)v25 + 39))
                {
                  while (*(unsigned __int8 *)v26 == *v33)
                  {
                    unint64_t v26 = (const void **)((char *)v26 + 1);
                    ++v33;
                    if (!--v29) {
                      goto LABEL_54;
                    }
                  }
                  break;
                }
LABEL_54:
                int v34 = *((_DWORD *)v25 + 12);
                if (v34 != *((_DWORD *)v28 + 12)
                  || v34 != -1 && !sub_4027D0(v34, (double *)v25 + 5, (double *)v28 + 5))
                {
                  break;
                }
                uint64_t v25 = (uint64_t *)*v25;
                if (!v25) {
                  goto LABEL_58;
                }
              }
            }
            v21 += 12;
            if (v21 == v22)
            {
              unint64_t v21 = v22;
              uint64_t v7 = v69;
              BOOL v47 = v22 == v84;
              uint64_t v4 = v19;
              if (v47) {
                goto LABEL_59;
              }
              goto LABEL_34;
            }
          }
        }
        uint64_t v4 = v19;
LABEL_59:
        BOOL v9 = v18;
        if (sub_723EC(2u))
        {
          sub_6BAC((uint64_t)__dst);
          long long v35 = sub_188FC78(__dst, (uint64_t)"Cost function ", 14);
          int v36 = *((char *)v16 + 39);
          if (v36 >= 0) {
            uint64_t v37 = (uint64_t)(v16 + 2);
          }
          else {
            uint64_t v37 = v16[2];
          }
          if (v36 >= 0) {
            uint64_t v38 = *((unsigned __int8 *)v16 + 39);
          }
          else {
            uint64_t v38 = v16[3];
          }
          unint64_t v39 = sub_188FC78(v35, v37, v38);
          unint64_t v40 = sub_188FC78(v39, (uint64_t)" (", 2);
          std::ostream::operator<<();
          sub_188FC78(v40, (uint64_t)") not preprocessed.", 19);
          std::stringbuf::str();
          sub_7246C((uint64_t *)&v72, 2u);
          if (v73 < 0) {
            operator delete(v72);
          }
          __dst[0] = v67;
          *(void **)((char *)__dst + *((void *)v67 - 3)) = v66;
          if (v87 < 0) {
            operator delete(v86);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        uint64_t v42 = *(void *)(a1 + 40);
        uint64_t v41 = *(void *)(a1 + 48);
        __dst[0] = &v74;
        sub_F0D964(a1, &v74, (uint64_t)&unk_20F06E0, (_DWORD **)__dst)[3] = 0x8FD8FD8FD8FD8FD9 * ((v41 - v42) >> 4);
        uint64_t v44 = *(void *)(a1 + 40);
        uint64_t v43 = *(void *)(a1 + 48);
        __dst[0] = v16 + 2;
        sub_E28A9C((uint64_t)v7, (uint64_t)(v16 + 2), (uint64_t)&unk_20F06E0, (long long **)__dst)[5] = 0x8FD8FD8FD8FD8FD9 * ((v43 - v44) >> 4);
        unint64_t v45 = *(void *)(a1 + 48);
        if (v45 >= *(void *)(a1 + 56))
        {
          uint64_t v48 = sub_F0DC70(v68, &v75, (uint64_t)(v16 + 2), (int *)&v74);
        }
        else
        {
          if (*((char *)v16 + 39) < 0)
          {
            sub_4200(__dst, (void *)v16[2], v16[3]);
          }
          else
          {
            *(_OWORD *)__dst = *((_OWORD *)v16 + 1);
            __dst[2] = (void *)v16[4];
          }
          sub_F10670(v45, &v75, (uint64_t *)__dst, v74);
          if (SHIBYTE(__dst[2]) < 0) {
            operator delete(__dst[0]);
          }
          uint64_t v48 = v45 + 1680;
          *(void *)(a1 + 48) = v45 + 1680;
        }
        *(void *)(a1 + 48) = v48;
LABEL_85:
        __dst[0] = v16 + 2;
        long long v49 = sub_7FCB8((uint64_t)__p, (uint64_t)(v16 + 2), (uint64_t)&unk_20F06E0, (long long **)__dst);
        uint64_t v50 = v49;
        if (v49[8])
        {
          uint64_t v51 = (void **)v49[7];
          if (v51)
          {
            do
            {
              unint64_t v59 = (void **)*v51;
              sub_55198((uint64_t)(v51 + 5));
              if (*((char *)v51 + 39) < 0) {
                operator delete(v51[2]);
              }
              operator delete(v51);
              uint64_t v51 = v59;
            }
            while (v59);
          }
          unsigned int v50[7] = 0;
          uint64_t v52 = v50[6];
          if (v52)
          {
            for (uint64_t i = 0; i != v52; ++i)
              *(void *)(v50[5] + 8 * i) = 0;
          }
          v50[8] = 0;
        }
        long long v54 = v75;
        uint64_t v75 = 0;
        long long v55 = (void *)v50[5];
        v50[5] = (uint64_t)v54;
        if (v55) {
          operator delete(v55);
        }
        unint64_t v56 = v76;
        long long v46 = v77;
        unsigned int v50[7] = (uint64_t)v77;
        v50[6] = v56;
        unint64_t v76 = 0;
        uint64_t v57 = v78;
        v50[8] = v78;
        *((_DWORD *)v50 + 18) = v79;
        int v15 = v70;
        if (v57)
        {
          unint64_t v58 = *((void *)v46 + 1);
          if ((v56 & (v56 - 1)) != 0)
          {
            if (v58 >= v56) {
              v58 %= v56;
            }
          }
          else
          {
            v58 &= v56 - 1;
          }
          long long v46 = 0;
          *(void *)(v50[5] + 8 * v58) = v50 + 7;
          uint64_t v77 = 0;
          uint64_t v78 = 0;
        }
        ++v71;
        if (!v46) {
          goto LABEL_103;
        }
        do
        {
LABEL_106:
          double v61 = *(char **)v46;
          sub_55198((uint64_t)(v46 + 40));
          if (v46[39] < 0) {
            operator delete(*((void **)v46 + 2));
          }
          operator delete(v46);
          long long v46 = v61;
        }
        while (v61);
      }
      else
      {
        long long v46 = v77;
        if (v77) {
          goto LABEL_106;
        }
      }
LABEL_103:
      double v60 = v75;
      uint64_t v75 = 0;
      if (v60) {
        operator delete(v60);
      }
      goto LABEL_26;
    }
LABEL_22:
    if (!v71)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      sub_5E5C(__dst, "processing of cost functions json failed, parents inconsistent");
      double v65 = (void *)sub_2F404((uint64_t)exception, (long long *)__dst);
    }
  }
  sub_F05B50(a1);
  sub_80150((int)__p, (char *)v81[0]);
  int v62 = __p[0];
  __p[0] = 0;
  if (v62) {
    operator delete(v62);
  }
  __dst[0] = &v83;
  sub_F0CDB4((void ***)__dst);
  return a1;
}

void sub_F052F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a37 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a43);
  uint64_t v50 = *a10;
  if (*a10)
  {
    v48[19] = v50;
    operator delete(v50);
    sub_3A4C2C(a17);
    uint64_t v51 = (void *)v48[8];
    if (!v51)
    {
LABEL_5:
      sub_F06150(a15);
      sub_12168((uint64_t)v48);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    sub_3A4C2C(a17);
    uint64_t v51 = (void *)v48[8];
    if (!v51) {
      goto LABEL_5;
    }
  }
  v48[9] = v51;
  operator delete(v51);
  sub_F06150(a15);
  sub_12168((uint64_t)v48);
  _Unwind_Resume(a1);
}

void sub_F054B8(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = a2;
  BYTE7(v71) = 14;
  strcpy((char *)__p, "cost_functions");
  int v5 = sub_58070(a2, (uint64_t)__p);
  if (v5 && *((_DWORD *)v5 + 12) == 2) {
    uint64_t v4 = (void *)v5[5];
  }
  if (SBYTE7(v71) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  if (v7 != v6)
  {
    uint64_t v8 = v7 - 1672;
    do
    {
      sub_381444((void *)(v8 + 24));
      if (*(char *)(v8 + 23) < 0) {
        operator delete(*(void **)v8);
      }
      uint64_t v9 = v8 - 8;
      v8 -= 1680;
    }
    while (v9 != v6);
  }
  *(void *)(a1 + 48) = v6;
  *(_OWORD *)__p = 0u;
  long long v71 = 0u;
  int v72 = 1065353216;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  unint64_t v69 = 0;
  uint64_t v68 = sub_6E6EC((char **)&v67, (uint64_t)&xmmword_25FCBD8);
LABEL_13:
  if (*((void *)&v71 + 1) < v4[3])
  {
    uint64_t v10 = (uint64_t *)v4[2];
    if (!v10) {
      goto LABEL_89;
    }
    int v11 = 0;
    while (1)
    {
      uint64_t v12 = (const void **)(v10 + 2);
      sub_F05C7C((uint64_t)(v10 + 2), v4, __p, (uint64_t)&v63);
      if (v65) {
        break;
      }
LABEL_61:
      long long v35 = v64;
      if (v64)
      {
        do
        {
          uint64_t v37 = (void **)*v35;
          sub_55198((uint64_t)(v35 + 5));
          if (*((char *)v35 + 39) < 0) {
            operator delete(v35[2]);
          }
          operator delete(v35);
          long long v35 = v37;
        }
        while (v37);
      }
      int v36 = (void *)v63;
      *(void *)&long long v63 = 0;
      if (v36) {
        operator delete(v36);
      }
      uint64_t v10 = (uint64_t *)*v10;
      if (!v10)
      {
        if (v11) {
          goto LABEL_13;
        }
LABEL_89:
        exception = __cxa_allocate_exception(0x40uLL);
        sub_5E5C(&v63, "initial processing of cost functions json failed, parents inconsistent");
        unint64_t v59 = (void *)sub_2F404((uint64_t)exception, &v63);
      }
    }
    v73[0] = (long long *)(v10 + 2);
    int v13 = sub_7FCB8((uint64_t)__p, (uint64_t)(v10 + 2), (uint64_t)&unk_20F06E0, v73);
    uint64_t v14 = v13;
    if (v13[8])
    {
      int v15 = (void **)v13[7];
      if (v15)
      {
        do
        {
          uint64_t v24 = (void **)*v15;
          sub_55198((uint64_t)(v15 + 5));
          if (*((char *)v15 + 39) < 0) {
            operator delete(v15[2]);
          }
          operator delete(v15);
          int v15 = v24;
        }
        while (v24);
      }
      v14[7] = 0;
      uint64_t v16 = v14[6];
      if (v16)
      {
        for (uint64_t i = 0; i != v16; ++i)
          *(void *)(v14[5] + 8 * i) = 0;
      }
      v14[8] = 0;
    }
    uint64_t v18 = v63;
    *(void *)&long long v63 = 0;
    uint64_t v19 = (void *)v14[5];
    v14[5] = v18;
    if (v19) {
      operator delete(v19);
    }
    unint64_t v20 = *((void *)&v63 + 1);
    unint64_t v21 = v64;
    v14[7] = (uint64_t)v64;
    v14[6] = v20;
    *((void *)&v63 + 1) = 0;
    uint64_t v22 = v65;
    v14[8] = v65;
    *((_DWORD *)v14 + 18) = v66;
    if (v22)
    {
      unint64_t v23 = (unint64_t)v21[1];
      if ((v20 & (v20 - 1)) != 0)
      {
        if (v23 >= v20) {
          v23 %= v20;
        }
      }
      else
      {
        v23 &= v20 - 1;
      }
      *(void *)(v14[5] + 8 * v23) = v14 + 7;
      int v64 = 0;
      uint64_t v65 = 0;
    }
    unint64_t v25 = v10[3];
    if (*((char *)v10 + 39) >= 0) {
      uint64_t v26 = *((unsigned __int8 *)v10 + 39);
    }
    else {
      uint64_t v26 = v10[3];
    }
    uint64_t v27 = byte_25FCBEF;
    if (byte_25FCBEF < 0) {
      uint64_t v27 = *((void *)&xmmword_25FCBD8 + 1);
    }
    if (v26 == v27)
    {
      if (byte_25FCBEF >= 0) {
        unint64_t v28 = &xmmword_25FCBD8;
      }
      else {
        unint64_t v28 = (long long *)xmmword_25FCBD8;
      }
      if ((*((unsigned char *)v10 + 39) & 0x80) != 0)
      {
        long long v33 = (void *)*v12;
        if (memcmp(*v12, v28, v10[3]))
        {
          uint64_t v31 = v68;
          if ((unint64_t)v68 < v69) {
            goto LABEL_57;
          }
          goto LABEL_55;
        }
      }
      else if (*((unsigned char *)v10 + 39))
      {
        uint64_t v29 = (unsigned __int8 *)(v10 + 2);
        uint64_t v30 = *((unsigned __int8 *)v10 + 39);
        while (*v29 == *(unsigned __int8 *)v28)
        {
          ++v29;
          unint64_t v28 = (long long *)((char *)v28 + 1);
          if (!--v30) {
            goto LABEL_60;
          }
        }
        goto LABEL_50;
      }
LABEL_60:
      ++v11;
      goto LABEL_61;
    }
LABEL_50:
    uint64_t v31 = v68;
    if ((unint64_t)v68 < v69)
    {
      if ((*((unsigned char *)v10 + 39) & 0x80) == 0)
      {
        long long v32 = *(_OWORD *)v12;
        *((void *)v68 + 2) = v10[4];
        *(_OWORD *)uint64_t v31 = v32;
LABEL_58:
        int v34 = v31 + 24;
        goto LABEL_59;
      }
      long long v33 = (void *)*v12;
LABEL_57:
      sub_4200(v31, v33, v25);
      goto LABEL_58;
    }
LABEL_55:
    int v34 = sub_6E6EC((char **)&v67, (uint64_t)(v10 + 2));
LABEL_59:
    uint64_t v68 = v34;
    goto LABEL_60;
  }
  uint64_t v38 = (const void **)v68;
  unint64_t v39 = (char *)v67 + 24;
  unint64_t v40 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((v68 - ((unsigned char *)v67 + 24)) >> 3));
  BOOL v41 = v68 == (char *)v67 + 24;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if (v41) {
    uint64_t v42 = 0;
  }
  else {
    uint64_t v42 = v40;
  }
  sub_6EA30((uint64_t)v39, v38, (uint64_t)v73, v42, 1);
  uint64_t v44 = (long long *)v67;
  uint64_t v43 = (long long *)v68;
  if (v67 != v68)
  {
    do
    {
      unint64_t v45 = sub_7F5D8(__p, (uint64_t)v44) + 5;
      unsigned int v46 = sub_F05FDC(a3, v45);
      LODWORD(v63) = v46;
      unsigned int v47 = *(_DWORD *)(a1 + 96);
      if (v47 <= v46) {
        unsigned int v47 = v46;
      }
      *(_DWORD *)(a1 + 96) = v47;
      uint64_t v48 = *(unsigned int **)(a4 + 8);
      if ((unint64_t)v48 >= *(void *)(a4 + 16))
      {
        long long v49 = sub_F0E4A0((void **)a4, &v63, (uint64_t)v45);
        uint64_t v50 = a4;
      }
      else
      {
        *uint64_t v48 = v46;
        sub_54214((uint64_t)(v48 + 2), (uint64_t)v45);
        long long v49 = (char *)(v48 + 12);
        uint64_t v50 = a4;
        *(void *)(a4 + 8) = v48 + 12;
      }
      *(void *)(v50 + 8) = v49;
      uint64_t v52 = *(void *)(a1 + 40);
      uint64_t v51 = *(void *)(a1 + 48);
      v73[0] = v44;
      sub_E28A9C(a1 + 104, (uint64_t)v44, (uint64_t)&unk_20F06E0, v73)[5] = 0x8FD8FD8FD8FD8FD9 * ((v51 - v52) >> 4);
      uint64_t v54 = *(void *)(a1 + 40);
      uint64_t v53 = *(void *)(a1 + 48);
      v73[0] = &v63;
      sub_F0D964(a1, (unsigned int *)&v63, (uint64_t)&unk_20F06E0, (_DWORD **)v73)[3] = 0x8FD8FD8FD8FD8FD9
                                                                                     * ((v53 - v54) >> 4);
      sub_F06840(a1 + 40, v45, (uint64_t)v44, (int *)&v63);
      uint64_t v44 = (long long *)((char *)v44 + 24);
    }
    while (v44 != v43);
    uint64_t v44 = (long long *)v67;
  }
  if (v44)
  {
    long long v55 = (long long *)v68;
    unint64_t v56 = v44;
    if (v68 != (char *)v44)
    {
      do
      {
        if (*((char *)v55 - 1) < 0) {
          operator delete(*((void **)v55 - 3));
        }
        long long v55 = (long long *)((char *)v55 - 24);
      }
      while (v55 != v44);
      unint64_t v56 = v67;
    }
    uint64_t v68 = (char *)v44;
    operator delete(v56);
  }
  sub_80150((int)__p, (char *)v71);
  uint64_t v57 = __p[0];
  __p[0] = 0;
  if (v57) {
    operator delete(v57);
  }
}

void sub_F05AA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  a13 = a11;
  sub_F0CDB4((void ***)&a13);
  sub_1A668(&a21);
  sub_7EC38((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void sub_F05B50(uint64_t a1)
{
  for (uint64_t i = *(uint64_t **)(a1 + 16); i; uint64_t i = (uint64_t *)*i)
    sub_745A4(a1 + 64, (_DWORD *)i + 4);
  unint64_t v3 = *(unsigned int **)(a1 + 64);
  uint64_t v4 = *(char **)(a1 + 72);
  unint64_t v5 = 126 - 2 * __clz((v4 - (char *)v3) >> 2);
  if (v4 == (char *)v3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v5;
  }
  sub_F0E98C(v3, v4, (uint64_t)&v15, v6, 1);
  uint64_t v7 = *(void *)(a1 + 144);
  unint64_t v8 = ((*(_DWORD *)(a1 + 96) + 1) * (*(_DWORD *)(a1 + 96) + 1));
  unint64_t v9 = (*(void *)(a1 + 152) - v7) >> 2;
  if (v8 <= v9)
  {
    if (v8 < v9) {
      *(void *)(a1 + 152) = v7 + 4 * v8;
    }
  }
  else
  {
    sub_4394C(a1 + 144, v8 - v9);
  }
  uint64_t v10 = *(_DWORD **)(a1 + 40);
  int v11 = *(_DWORD **)(a1 + 48);
  while (v10 != v11)
  {
    uint64_t v12 = *(_DWORD **)(a1 + 40);
    for (uint64_t j = *(_DWORD **)(a1 + 48); v12 != j; v12 += 420)
    {
      int v14 = sub_F0691C((uint64_t)v10, (uint64_t)v12);
      *(_DWORD *)sub_F07928((void *)(a1 + 144), (*v10 + *v10 * *(_DWORD *)(a1 + 96) + *v12)) = v14;
    }
    v10 += 420;
  }
}

void sub_F05C7C(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  if (sub_7F3A8(a3, a1))
  {
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_DWORD *)(a4 + 32) = 1065353216;
    return;
  }
  uint64_t v8 = *(unsigned __int8 *)(a1 + 23);
  if ((v8 & 0x80u) == 0) {
    uint64_t v9 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v9 = *(void *)(a1 + 8);
  }
  uint64_t v10 = *((void *)&xmmword_25FCBD8 + 1);
  if (byte_25FCBEF >= 0) {
    uint64_t v10 = byte_25FCBEF;
  }
  if (v9 == v10)
  {
    if (byte_25FCBEF >= 0) {
      int v11 = &xmmword_25FCBD8;
    }
    else {
      int v11 = (long long *)xmmword_25FCBD8;
    }
    if ((v8 & 0x80) != 0)
    {
      if (memcmp(*(const void **)a1, v11, *(void *)(a1 + 8))) {
        goto LABEL_19;
      }
    }
    else if (*(unsigned char *)(a1 + 23))
    {
      uint64_t v12 = (unsigned __int8 *)a1;
      while (*v12 == *(unsigned __int8 *)v11)
      {
        ++v12;
        int v11 = (long long *)((char *)v11 + 1);
        if (!--v8) {
          goto LABEL_21;
        }
      }
      goto LABEL_19;
    }
LABEL_21:
    uint64_t v14 = sub_560F4(a2, a1);
    char v15 = (void *)sub_54214(a4, v14);
    sub_F0CCE0(v15);
    return;
  }
LABEL_19:
  int v13 = (void *)sub_560F4(a2, a1);
  char v28 = 6;
  strcpy((char *)v27, "parent");
  if (byte_25FCBEF < 0)
  {
    sub_4200(__p, (void *)xmmword_25FCBD8, *((unint64_t *)&xmmword_25FCBD8 + 1));
  }
  else
  {
    *(_OWORD *)__p = xmmword_25FCBD8;
    uint64_t v25 = unk_25FCBE8;
  }
  uint64_t v16 = __p[0];
  unsigned int v17 = __p[1];
  v26[0] = v25;
  *(_DWORD *)((char *)v26 + 3) = *(_DWORD *)((char *)&v25 + 3);
  int v18 = SHIBYTE(v25);
  __p[1] = 0;
  uint64_t v25 = 0;
  __p[0] = 0;
  uint64_t v19 = sub_58070(v13, (uint64_t)v27);
  if (v19 && !*((_DWORD *)v19 + 12))
  {
    uint64_t v20 = v19[5];
    if (*(char *)(v20 + 23) < 0)
    {
      sub_4200(__dst, *(void **)v20, *(void *)(v20 + 8));
    }
    else
    {
      long long v21 = *(_OWORD *)v20;
      uint64_t v30 = *(void *)(v20 + 16);
      *(_OWORD *)__dst = v21;
    }
    if ((v18 & 0x80000000) == 0)
    {
      if ((SHIBYTE(v25) & 0x80000000) == 0) {
        goto LABEL_35;
      }
      goto LABEL_27;
    }
LABEL_39:
    operator delete(v16);
    if ((SHIBYTE(v25) & 0x80000000) == 0) {
      goto LABEL_35;
    }
LABEL_27:
    operator delete(__p[0]);
    if ((v28 & 0x80000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_28;
  }
  if (v18 < 0)
  {
    sub_4200(__dst, v16, (unint64_t)v17);
    goto LABEL_39;
  }
  __dst[0] = v16;
  __dst[1] = v17;
  LODWORD(v30) = v26[0];
  *(_DWORD *)((char *)&v30 + 3) = *(_DWORD *)((char *)v26 + 3);
  HIBYTE(v30) = v18;
  if (SHIBYTE(v25) < 0) {
    goto LABEL_27;
  }
LABEL_35:
  if (v28 < 0) {
LABEL_28:
  }
    operator delete(v27[0]);
LABEL_36:
  uint64_t v22 = sub_7F3A8(a3, (uint64_t)__dst);
  if (v22)
  {
    sub_54214(a4, (uint64_t)(v22 + 5));
    uint64_t v23 = sub_560F4(a2, a1);
    sub_59234((void *)a4, v23);
    sub_F0CCE0((void *)a4);
    if ((SHIBYTE(v30) & 0x80000000) == 0) {
      return;
    }
LABEL_42:
    operator delete(__dst[0]);
    return;
  }
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_DWORD *)(a4 + 32) = 1065353216;
  if (SHIBYTE(v30) < 0) {
    goto LABEL_42;
  }
}

void sub_F05F38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  operator delete(v28);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
  else if ((a22 & 0x80000000) == 0)
  {
LABEL_6:
    _Unwind_Resume(a1);
  }
  operator delete(a17);
  _Unwind_Resume(a1);
}

unint64_t sub_F05FDC(uint64_t a1, void *a2)
{
  std::mutex::lock((std::mutex *)a1);
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v5 = *(void *)(a1 + 72);
  if (v4 == v5) {
    goto LABEL_7;
  }
  while ((sub_F0CE8C(v4, a2) & 1) == 0)
  {
    v4 += 40;
    if (v4 == v5)
    {
      uint64_t v4 = v5;
      break;
    }
  }
  if (v4 == *(void *)(a1 + 72))
  {
LABEL_7:
    uint64_t v7 = *((void *)sub_69510() + 2);
    *((void *)sub_69510() + 2) = 0;
    unint64_t v8 = *(void *)(a1 + 72);
    if (v8 >= *(void *)(a1 + 80))
    {
      uint64_t v9 = sub_87B7C((void **)(a1 + 64), (uint64_t)a2);
    }
    else
    {
      sub_54214(*(void *)(a1 + 72), (uint64_t)a2);
      uint64_t v9 = v8 + 40;
      *(void *)(a1 + 72) = v8 + 40;
    }
    *(void *)(a1 + 72) = v9;
    *((void *)sub_69510() + 2) = v7;
    unint64_t v6 = sub_2D0F10(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 3) - 1);
  }
  else
  {
    unint64_t v6 = sub_2E2964(0xCCCCCCCCCCCCCCCDLL * ((v4 - *(void *)(a1 + 64)) >> 3));
  }
  unint64_t v10 = v6;
  std::mutex::unlock((std::mutex *)a1);
  return v10;
}

void sub_F060FC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v2;
  std::mutex::unlock((std::mutex *)v1);
  _Unwind_Resume(a1);
}

void sub_F06114(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_F06128(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_F0613C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void **sub_F06150(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    unint64_t v3 = a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      uint64_t v5 = (uint64_t)v3 - 1672;
      do
      {
        sub_381444((void *)(v5 + 24));
        if (*(char *)(v5 + 23) < 0) {
          operator delete(*(void **)v5);
        }
        unint64_t v6 = (void *)(v5 - 8);
        v5 -= 1680;
      }
      while (v6 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_F061D8(void *a1, unsigned int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    goto LABEL_24;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (v2.i32[0] - 1) & v3;
  }
  unint64_t v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6 || (uint64_t v7 = *v6) == 0) {
LABEL_24:
  }
    sub_5AE8("unordered_map::at: key not found");
  if (v4.u32[0] < 2uLL)
  {
    uint64_t v8 = *(void *)&v2 - 1;
    while (1)
    {
      uint64_t v10 = v7[1];
      if (v10 == v3)
      {
        if (*((_DWORD *)v7 + 4) == v3) {
          goto LABEL_21;
        }
      }
      else if ((v10 & v8) != v5)
      {
        goto LABEL_24;
      }
      uint64_t v7 = (uint64_t *)*v7;
      if (!v7) {
        goto LABEL_24;
      }
    }
  }
  while (1)
  {
    unint64_t v9 = v7[1];
    if (v9 == v3) {
      break;
    }
    if (v9 >= *(void *)&v2) {
      v9 %= *(void *)&v2;
    }
    if (v9 != v5) {
      goto LABEL_24;
    }
LABEL_11:
    uint64_t v7 = (uint64_t *)*v7;
    if (!v7) {
      goto LABEL_24;
    }
  }
  if (*((_DWORD *)v7 + 4) != v3) {
    goto LABEL_11;
  }
LABEL_21:
  int v11 = a1 + 5;
  unint64_t v12 = v7[3];

  return sub_F062E4(v11, v12);
}

uint64_t sub_F062E4(void *a1, unint64_t a2)
{
  if (0x8FD8FD8FD8FD8FD9 * ((uint64_t)(a1[1] - *a1) >> 4) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    unint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, 0x8FD8FD8FD8FD8FD9 * ((uint64_t)(a1[1] - *a1) >> 4));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v10 = &v15;
    }
    else {
      uint64_t v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    unint64_t v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    uint64_t v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 1680 * a2;
}

void sub_F06444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

uint64_t sub_F06524(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = sub_E2886C((void *)(a1 + 104), a2);
  if (!v3) {
    return *(void *)(a1 + 40);
  }
  unint64_t v4 = v3[5];

  return sub_F062E4((void *)(a1 + 40), v4);
}

uint64_t sub_F0657C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unint64_t v4 = *(unsigned int **)(a1 + 64);
  unint64_t v5 = *(unsigned int **)(a1 + 72);
  if (v4 != v5)
  {
    uint64_t v8 = (void *)(a1 + 144);
    while (*v4 != a2)
    {
      if ((*a3 & *(_DWORD *)sub_F06630(v8, a2 + a2 * *(_DWORD *)(a1 + 96) + *v4)) == 0) {
        return *v4;
      }
      if (++v4 == v5) {
        return a2;
      }
    }
  }
  return a2;
}

BOOL sub_F06620(uint64_t a1, unsigned int a2)
{
  return *(void *)(a1 + 88) > (unint64_t)a2;
}

uint64_t sub_F06630(void *a1, unint64_t a2)
{
  if (a2 >= (uint64_t)(a1[1] - *a1) >> 2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    unint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, (uint64_t)(a1[1] - *a1) >> 2);
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v10 = &v15;
    }
    else {
      uint64_t v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    unint64_t v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    uint64_t v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 4 * a2;
}

void sub_F06760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

uint64_t sub_F06840(uint64_t a1, void *a2, uint64_t a3, int *a4)
{
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7 >= *(void *)(a1 + 16))
  {
    uint64_t v8 = sub_F0E6FC((void **)a1, a2, a3, a4);
  }
  else
  {
    if (*(char *)(a3 + 23) < 0)
    {
      sub_4200(__p, *(void **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a3;
      uint64_t v11 = *(void *)(a3 + 16);
    }
    sub_F10670(v7, a2, (uint64_t *)__p, *a4);
    if (SHIBYTE(v11) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v8 = v7 + 1680;
    *(void *)(a1 + 8) = v7 + 1680;
  }
  *(void *)(a1 + 8) = v8;
  return v8 - 1680;
}

void sub_F068F4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_F068FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  *(void *)(v14 + 8) = v15;
  _Unwind_Resume(exception_object);
}

uint64_t sub_F0691C(uint64_t a1, uint64_t a2)
{
  double v4 = *(double *)(a1 + 344);
  double v5 = *(double *)(a2 + 344);
  double v6 = vabdd_f64(v4, v5);
  if (v4 != v5 && v6 >= 2.22044605e-16) {
    goto LABEL_82;
  }
  long long v9 = *(double **)(a1 + 352);
  uint64_t v8 = *(double **)(a1 + 360);
  uint64_t v10 = *(double **)(a2 + 352);
  if ((char *)v8 - (char *)v9 != *(void *)(a2 + 360) - (void)v10) {
    goto LABEL_82;
  }
  if (v9 != v8)
  {
    while (1)
    {
      double v11 = vabdd_f64(*v9, *v10);
      if (*v9 != *v10 && v11 >= 2.22044605e-16) {
        break;
      }
      double v13 = v9[1];
      double v14 = v10[1];
      double v15 = vabdd_f64(v13, v14);
      if (v13 != v14 && v15 >= 2.22044605e-16) {
        break;
      }
      double v17 = v9[2];
      double v18 = v10[2];
      double v19 = vabdd_f64(v17, v18);
      if (v17 != v18 && v19 >= 2.22044605e-16) {
        break;
      }
      v9 += 3;
      v10 += 3;
      if (v9 == v8) {
        goto LABEL_24;
      }
    }
LABEL_82:
    uint64_t v64 = 2;
    if (*(_DWORD *)(a1 + 1168) == *(_DWORD *)(a2 + 1168)) {
      goto LABEL_83;
    }
LABEL_99:
    uint64_t v64 = v64 | 4;
    goto LABEL_100;
  }
LABEL_24:
  uint64_t v22 = *(void *)(a1 + 376);
  uint64_t v21 = *(void *)(a1 + 384);
  uint64_t v23 = *(void *)(a2 + 376);
  if (v21 - v22 != *(void *)(a2 + 384) - v23) {
    goto LABEL_82;
  }
  if (v22 != v21)
  {
    while (*(_DWORD *)v22 == *(_DWORD *)v23)
    {
      double v24 = *(double *)(v22 + 8);
      double v25 = *(double *)(v23 + 8);
      double v26 = vabdd_f64(v24, v25);
      if (v24 != v25 && v26 >= 2.22044605e-16) {
        break;
      }
      double v28 = *(double *)(v22 + 16);
      double v29 = *(double *)(v23 + 16);
      double v30 = vabdd_f64(v28, v29);
      if (v28 != v29 && v30 >= 2.22044605e-16) {
        break;
      }
      double v32 = *(double *)(v22 + 24);
      double v33 = *(double *)(v23 + 24);
      double v34 = vabdd_f64(v32, v33);
      if (v32 != v33 && v34 >= 2.22044605e-16) {
        break;
      }
      v22 += 32;
      v23 += 32;
      if (v22 == v21) {
        goto LABEL_43;
      }
    }
    goto LABEL_82;
  }
LABEL_43:
  uint64_t v37 = *(double **)(a1 + 400);
  int v36 = *(double **)(a1 + 408);
  uint64_t v38 = *(double **)(a2 + 400);
  if ((char *)v36 - (char *)v37 != *(void *)(a2 + 408) - (void)v38) {
    goto LABEL_82;
  }
  if (v37 != v36)
  {
    while (*v37 == *v38)
    {
      double v39 = v37[1];
      double v40 = v38[1];
      double v41 = vabdd_f64(v39, v40);
      if (v39 != v40 && v41 >= 2.22044605e-16) {
        break;
      }
      double v43 = v37[2];
      double v44 = v38[2];
      double v45 = vabdd_f64(v43, v44);
      if (v43 != v44 && v45 >= 2.22044605e-16) {
        break;
      }
      double v47 = v37[3];
      double v48 = v38[3];
      double v49 = vabdd_f64(v47, v48);
      if (v47 != v48 && v49 >= 2.22044605e-16) {
        break;
      }
      v37 += 4;
      v38 += 4;
      if (v37 == v36) {
        goto LABEL_62;
      }
    }
    goto LABEL_82;
  }
LABEL_62:
  uint64_t v51 = *(void *)(a1 + 984);
  uint64_t v52 = *(void *)(a1 + 976);
  uint64_t v53 = *(void *)(a2 + 976);
  if (v51 - v52 != *(void *)(a2 + 984) - v53) {
    goto LABEL_82;
  }
  if (v52 != v51)
  {
    while (*(double *)v52 == *(double *)v53
         && *(_DWORD *)(v52 + 8) == *(_DWORD *)(v53 + 8)
         && *(_DWORD *)(v52 + 12) == *(_DWORD *)(v53 + 12)
         && *(void *)(v52 + 16) == *(void *)(v53 + 16))
    {
      v52 += 24;
      v53 += 24;
      if (v52 == v51) {
        goto LABEL_69;
      }
    }
    goto LABEL_82;
  }
LABEL_69:
  double v54 = *(double *)(a1 + 736);
  double v55 = *(double *)(a2 + 736);
  double v56 = vabdd_f64(v54, v55);
  if (v54 != v55 && v56 >= 2.22044605e-16) {
    goto LABEL_82;
  }
  double v58 = *(double *)(a1 + 744);
  double v59 = *(double *)(a2 + 744);
  double v60 = vabdd_f64(v58, v59);
  if (v58 != v59 && v60 >= 2.22044605e-16) {
    goto LABEL_82;
  }
  double v62 = *(double *)(a1 + 752);
  double v63 = *(double *)(a2 + 752);
  if (v62 != v63 && vabdd_f64(v62, v63) >= 2.22044605e-16) {
    goto LABEL_82;
  }
  if (sub_F0D17C((double *)(a1 + 760), (double *)(a2 + 760))) {
    goto LABEL_82;
  }
  uint64_t v64 = 0;
  if (*(_DWORD *)(a1 + 1168) != *(_DWORD *)(a2 + 1168)) {
    goto LABEL_99;
  }
LABEL_83:
  if (*(_DWORD *)(a1 + 1172) != *(_DWORD *)(a2 + 1172) || *(void *)(a1 + 1176) != *(void *)(a2 + 1176)) {
    goto LABEL_99;
  }
  double v65 = *(double *)(a1 + 88);
  double v66 = *(double *)(a2 + 88);
  double v67 = vabdd_f64(v65, v66);
  if (v65 != v66 && v67 >= 2.22044605e-16) {
    goto LABEL_99;
  }
  double v69 = *(double *)(a1 + 96);
  double v70 = *(double *)(a2 + 96);
  double v71 = vabdd_f64(v69, v70);
  if (v69 != v70 && v71 >= 2.22044605e-16) {
    goto LABEL_99;
  }
  double v73 = *(double *)(a1 + 104);
  double v74 = *(double *)(a2 + 104);
  double v75 = vabdd_f64(v73, v74);
  if (v73 != v74 && v75 >= 2.22044605e-16) {
    goto LABEL_99;
  }
LABEL_100:
  double v77 = *(double *)(a1 + 112);
  double v78 = *(double *)(a2 + 112);
  double v79 = vabdd_f64(v77, v78);
  if (v77 != v78 && v79 >= 2.22044605e-16) {
    goto LABEL_154;
  }
  double v81 = *(double *)(a1 + 120);
  double v82 = *(double *)(a2 + 120);
  double v83 = vabdd_f64(v81, v82);
  if (v81 != v82 && v83 >= 2.22044605e-16) {
    goto LABEL_154;
  }
  double v85 = *(double *)(a1 + 128);
  double v86 = *(double *)(a2 + 128);
  double v87 = vabdd_f64(v85, v86);
  if (v85 != v86 && v87 >= 2.22044605e-16) {
    goto LABEL_154;
  }
  double v89 = *(double *)(a1 + 136);
  double v90 = *(double *)(a2 + 136);
  double v91 = vabdd_f64(v89, v90);
  if (v89 != v90 && v91 >= 2.22044605e-16) {
    goto LABEL_154;
  }
  double v93 = *(double *)(a1 + 144);
  double v94 = *(double *)(a2 + 144);
  if (v93 != v94 && vabdd_f64(v93, v94) >= 2.22044605e-16) {
    goto LABEL_154;
  }
  double v95 = *(double *)(a1 + 152);
  double v96 = *(double *)(a2 + 152);
  if (v95 != v96 && vabdd_f64(v95, v96) >= 2.22044605e-16) {
    goto LABEL_154;
  }
  double v97 = *(double *)(a1 + 160);
  double v98 = *(double *)(a2 + 160);
  if (v97 != v98 && vabdd_f64(v97, v98) >= 2.22044605e-16) {
    goto LABEL_154;
  }
  double v99 = *(double *)(a1 + 168);
  double v100 = *(double *)(a2 + 168);
  if (v99 != v100 && vabdd_f64(v99, v100) >= 2.22044605e-16) {
    goto LABEL_154;
  }
  double v101 = *(double *)(a1 + 176);
  double v102 = *(double *)(a2 + 176);
  if (v101 != v102 && vabdd_f64(v101, v102) >= 2.22044605e-16) {
    goto LABEL_154;
  }
  double v103 = *(double *)(a1 + 184);
  double v104 = *(double *)(a2 + 184);
  if (v103 != v104 && vabdd_f64(v103, v104) >= 2.22044605e-16) {
    goto LABEL_154;
  }
  double v105 = *(double *)(a1 + 192);
  double v106 = *(double *)(a2 + 192);
  if (v105 != v106 && vabdd_f64(v105, v106) >= 2.22044605e-16) {
    goto LABEL_154;
  }
  double v107 = *(double *)(a1 + 200);
  double v108 = *(double *)(a2 + 200);
  if (v107 != v108 && vabdd_f64(v107, v108) >= 2.22044605e-16) {
    goto LABEL_154;
  }
  double v109 = *(double *)(a1 + 208);
  double v110 = *(double *)(a2 + 208);
  if (v109 != v110 && vabdd_f64(v109, v110) >= 2.22044605e-16) {
    goto LABEL_154;
  }
  double v111 = *(double *)(a1 + 216);
  double v112 = *(double *)(a2 + 216);
  if (v111 != v112 && vabdd_f64(v111, v112) >= 2.22044605e-16) {
    goto LABEL_154;
  }
  double v113 = *(double *)(a1 + 224);
  double v114 = *(double *)(a2 + 224);
  if (v113 != v114 && vabdd_f64(v113, v114) >= 2.22044605e-16) {
    goto LABEL_154;
  }
  if ((double v115 = *(double *)(a1 + 232), v116 = *(double *)(a2 + 232), v115 != v116)
    && vabdd_f64(v115, v116) >= 2.22044605e-16
    || (double v117 = *(double *)(a1 + 240), v118 = *(double *)(a2 + 240), v117 != v118)
    && vabdd_f64(v117, v118) >= 2.22044605e-16
    || (double v119 = *(double *)(a1 + 248), v120 = *(double *)(a2 + 248), v119 != v120)
    && vabdd_f64(v119, v120) >= 2.22044605e-16
    || (sub_F0D054((double **)(a1 + 256), a2 + 256) & 1) != 0
    || (sub_F0D054((double **)(a1 + 280), a2 + 280) & 1) != 0
    || (sub_F0D054((double **)(a1 + 304), a2 + 304) & 1) != 0
    || *(_DWORD *)(a1 + 328) != *(_DWORD *)(a2 + 328)
    || *(_DWORD *)(a1 + 332) != *(_DWORD *)(a2 + 332)
    || *(void *)(a1 + 336) != *(void *)(a2 + 336))
  {
LABEL_154:
    uint64_t v64 = v64 | 8;
  }
  if (!sub_F71AD8((uint64_t *)(a1 + 1480), (unsigned __int8 **)(a2 + 1480)))
  {
    uint64_t v121 = *(void *)(a1 + 1512);
    uint64_t v122 = *(void *)(a1 + 1504);
    uint64_t v123 = *(void *)(a2 + 1504);
    if (v121 - v122 == *(void *)(a2 + 1512) - v123)
    {
      if (v122 == v121) {
        goto LABEL_164;
      }
      while (*(_DWORD *)v122 == *(_DWORD *)v123
           && *(_DWORD *)(v122 + 4) == *(_DWORD *)(v123 + 4)
           && *(void *)(v122 + 8) == *(void *)(v123 + 8))
      {
        v122 += 16;
        v123 += 16;
        if (v122 == v121) {
          goto LABEL_164;
        }
      }
    }
  }
  uint64_t v64 = v64 | 0x10;
LABEL_164:
  uint64_t v124 = *(void *)(a1 + 1536);
  uint64_t v125 = *(void *)(a1 + 1528);
  uint64_t v126 = *(void *)(a2 + 1528);
  if (v124 - v125 != *(void *)(a2 + 1536) - v126) {
    goto LABEL_172;
  }
  if (v125 != v124)
  {
    while (*(_DWORD *)v125 == *(_DWORD *)v126
         && *(_DWORD *)(v125 + 4) == *(_DWORD *)(v126 + 4)
         && *(void *)(v125 + 8) == *(void *)(v126 + 8))
    {
      v125 += 16;
      v126 += 16;
      if (v125 == v124) {
        goto LABEL_170;
      }
    }
LABEL_172:
    uint64_t v64 = v64 | 0x800;
    if (*(_DWORD *)(a1 + 1216) == *(_DWORD *)(a2 + 1216)) {
      goto LABEL_173;
    }
LABEL_175:
    uint64_t v64 = v64 | 0x20;
    goto LABEL_176;
  }
LABEL_170:
  if (*(_DWORD *)(a1 + 1216) != *(_DWORD *)(a2 + 1216)) {
    goto LABEL_175;
  }
LABEL_173:
  if (*(_DWORD *)(a1 + 1220) != *(_DWORD *)(a2 + 1220) || *(void *)(a1 + 1224) != *(void *)(a2 + 1224)) {
    goto LABEL_175;
  }
LABEL_176:
  if (*(_DWORD *)(a1 + 1232) != *(_DWORD *)(a2 + 1232)
    || *(_DWORD *)(a1 + 1236) != *(_DWORD *)(a2 + 1236)
    || *(void *)(a1 + 1240) != *(void *)(a2 + 1240))
  {
    uint64_t v64 = v64 | 0x40;
  }
  double v127 = *(double *)(a1 + 448);
  double v128 = *(double *)(a2 + 448);
  double v129 = vabdd_f64(v127, v128);
  if (v127 != v128 && v129 >= 2.22044605e-16) {
    goto LABEL_233;
  }
  double v131 = *(double *)(a1 + 456);
  double v132 = *(double *)(a2 + 456);
  double v133 = vabdd_f64(v131, v132);
  if (v131 != v132 && v133 >= 2.22044605e-16) {
    goto LABEL_233;
  }
  double v135 = *(double *)(a1 + 464);
  double v136 = *(double *)(a2 + 464);
  double v137 = vabdd_f64(v135, v136);
  if (v135 != v136 && v137 >= 2.22044605e-16) {
    goto LABEL_233;
  }
  double v139 = *(double *)(a1 + 472);
  double v140 = *(double *)(a2 + 472);
  double v141 = vabdd_f64(v139, v140);
  if (v139 != v140 && v141 >= 2.22044605e-16) {
    goto LABEL_233;
  }
  double v143 = *(double *)(a1 + 480);
  double v144 = *(double *)(a2 + 480);
  if (v143 != v144 && vabdd_f64(v143, v144) >= 2.22044605e-16) {
    goto LABEL_233;
  }
  double v145 = *(double *)(a1 + 488);
  double v146 = *(double *)(a2 + 488);
  if (v145 != v146 && vabdd_f64(v145, v146) >= 2.22044605e-16) {
    goto LABEL_233;
  }
  double v147 = *(double *)(a1 + 496);
  double v148 = *(double *)(a2 + 496);
  if (v147 != v148 && vabdd_f64(v147, v148) >= 2.22044605e-16) {
    goto LABEL_233;
  }
  double v149 = *(double *)(a1 + 504);
  double v150 = *(double *)(a2 + 504);
  if (v149 != v150 && vabdd_f64(v149, v150) >= 2.22044605e-16) {
    goto LABEL_233;
  }
  double v151 = *(double *)(a1 + 512);
  double v152 = *(double *)(a2 + 512);
  if (v151 != v152 && vabdd_f64(v151, v152) >= 2.22044605e-16) {
    goto LABEL_233;
  }
  double v153 = *(double *)(a1 + 520);
  double v154 = *(double *)(a2 + 520);
  if (v153 != v154 && vabdd_f64(v153, v154) >= 2.22044605e-16) {
    goto LABEL_233;
  }
  double v155 = *(double *)(a1 + 528);
  double v156 = *(double *)(a2 + 528);
  if (v155 != v156 && vabdd_f64(v155, v156) >= 2.22044605e-16) {
    goto LABEL_233;
  }
  double v157 = *(double *)(a1 + 536);
  double v158 = *(double *)(a2 + 536);
  if (v157 != v158 && vabdd_f64(v157, v158) >= 2.22044605e-16) {
    goto LABEL_233;
  }
  double v159 = *(double *)(a1 + 544);
  double v160 = *(double *)(a2 + 544);
  if (v159 != v160 && vabdd_f64(v159, v160) >= 2.22044605e-16) {
    goto LABEL_233;
  }
  double v161 = *(double *)(a1 + 552);
  double v162 = *(double *)(a2 + 552);
  if (v161 != v162 && vabdd_f64(v161, v162) >= 2.22044605e-16) {
    goto LABEL_233;
  }
  double v163 = *(double *)(a1 + 560);
  double v164 = *(double *)(a2 + 560);
  if (v163 != v164 && vabdd_f64(v163, v164) >= 2.22044605e-16) {
    goto LABEL_233;
  }
  if ((double v165 = *(double *)(a1 + 568), v166 = *(double *)(a2 + 568), v165 != v166)
    && vabdd_f64(v165, v166) >= 2.22044605e-16
    || (double v167 = *(double *)(a1 + 576), v168 = *(double *)(a2 + 576), v167 != v168)
    && vabdd_f64(v167, v168) >= 2.22044605e-16
    || (double v169 = *(double *)(a1 + 584), v170 = *(double *)(a2 + 584), v169 != v170)
    && vabdd_f64(v169, v170) >= 2.22044605e-16
    || sub_F0D17C((double *)(a1 + 784), (double *)(a2 + 784))
    || sub_F0D17C((double *)(a1 + 592), (double *)(a2 + 592))
    || sub_F0D17C((double *)(a1 + 616), (double *)(a2 + 616))
    || sub_F0D17C((double *)(a1 + 640), (double *)(a2 + 640))
    || sub_F0D17C((double *)(a1 + 664), (double *)(a2 + 664)))
  {
LABEL_233:
    uint64_t v64 = v64 | 1;
  }
  if (*(unsigned __int8 *)(a1 + 930) != *(unsigned __int8 *)(a2 + 930)
    || *(_DWORD *)(a1 + 960) != *(_DWORD *)(a2 + 960)
    || *(_DWORD *)(a1 + 964) != *(_DWORD *)(a2 + 964)
    || *(void *)(a1 + 968) != *(void *)(a2 + 968))
  {
    uint64_t v64 = v64 | 0x100;
  }
  if (*(_DWORD *)(a1 + 1248) != *(_DWORD *)(a2 + 1248)
    || *(_DWORD *)(a1 + 1252) != *(_DWORD *)(a2 + 1252)
    || *(void *)(a1 + 1256) != *(void *)(a2 + 1256)
    || (double v171 = *(double *)(a1 + 808), v172 = *(double *)(a2 + 808), v171 != v172)
    && vabdd_f64(v171, v172) >= 2.22044605e-16
    || (double v173 = *(double *)(a1 + 816), v174 = *(double *)(a2 + 816), v173 != v174)
    && vabdd_f64(v173, v174) >= 2.22044605e-16
    || (double v175 = *(double *)(a1 + 824), v176 = *(double *)(a2 + 824), v175 != v176)
    && vabdd_f64(v175, v176) >= 2.22044605e-16)
  {
    uint64_t v64 = v64 | 0x200;
  }
  if (*(_DWORD *)(a1 + 1264) != *(_DWORD *)(a2 + 1264)
    || *(_DWORD *)(a1 + 1268) != *(_DWORD *)(a2 + 1268)
    || *(void *)(a1 + 1272) != *(void *)(a2 + 1272)
    || (v177 = *(double **)(a1 + 840),
        unsigned int v178 = *(double **)(a1 + 832),
        uint64_t v179 = *(double **)(a2 + 832),
        (char *)v177 - (char *)v178 != *(void *)(a2 + 840) - (void)v179))
  {
LABEL_271:
    uint64_t v64 = v64 | 0x400;
    goto LABEL_272;
  }
  for (; v178 != v177; v179 += 3)
  {
    double v180 = vabdd_f64(*v178, *v179);
    if (*v178 != *v179 && v180 >= 2.22044605e-16) {
      goto LABEL_271;
    }
    double v182 = v178[1];
    double v183 = v179[1];
    double v184 = vabdd_f64(v182, v183);
    if (v182 != v183 && v184 >= 2.22044605e-16) {
      goto LABEL_271;
    }
    double v186 = v178[2];
    double v187 = v179[2];
    double v188 = vabdd_f64(v186, v187);
    if (v186 != v187 && v188 >= 2.22044605e-16) {
      goto LABEL_271;
    }
    v178 += 3;
  }
LABEL_272:
  uint64_t v190 = *(void *)(a1 + 1288);
  uint64_t v191 = *(void *)(a1 + 1280);
  uint64_t v192 = *(void *)(a2 + 1280);
  if (v190 - v191 != *(void *)(a2 + 1288) - v192) {
    return v64 | 1;
  }
  if (v191 != v190)
  {
    while (*(_DWORD *)v191 == *(_DWORD *)v192
         && *(_DWORD *)(v191 + 4) == *(_DWORD *)(v192 + 4)
         && *(void *)(v191 + 8) == *(void *)(v192 + 8))
    {
      v191 += 16;
      v192 += 16;
      if (v191 == v190) {
        goto LABEL_278;
      }
    }
    return v64 | 1;
  }
LABEL_278:
  uint64_t v193 = *(void *)(a1 + 1312);
  uint64_t v194 = *(void *)(a1 + 1304);
  uint64_t v195 = *(void *)(a2 + 1304);
  if (v193 - v194 != *(void *)(a2 + 1312) - v195) {
    return v64 | 1;
  }
  if (v194 != v193)
  {
    while (*(_DWORD *)v194 == *(_DWORD *)v195
         && *(_DWORD *)(v194 + 4) == *(_DWORD *)(v195 + 4)
         && *(void *)(v194 + 8) == *(void *)(v195 + 8))
    {
      v194 += 16;
      v195 += 16;
      if (v194 == v193) {
        goto LABEL_284;
      }
    }
    return v64 | 1;
  }
LABEL_284:
  if (*(double *)(a1 + 1328) != *(double *)(a2 + 1328)) {
    return v64 | 1;
  }
  v207[0] = a1 + 1336;
  v207[1] = a1 + 1337;
  v207[2] = a1 + 1338;
  v207[3] = a1 + 1339;
  v207[4] = a1 + 1340;
  v207[5] = a1 + 1341;
  v207[6] = a1 + 1342;
  v207[7] = a1 + 1343;
  v207[8] = a1 + 1344;
  v207[9] = a1 + 1345;
  v207[10] = a1 + 1346;
  v207[11] = a1 + 1347;
  v207[12] = a1 + 1348;
  v207[13] = a1 + 1352;
  v207[14] = a1 + 1376;
  v207[15] = a1 + 1400;
  v207[16] = a1 + 1424;
  v206[0] = a2 + 1336;
  v206[1] = a2 + 1337;
  v206[2] = a2 + 1338;
  v206[3] = a2 + 1339;
  v206[4] = a2 + 1340;
  v206[5] = a2 + 1341;
  v206[6] = a2 + 1342;
  v206[7] = a2 + 1343;
  v206[8] = a2 + 1344;
  v206[9] = a2 + 1345;
  v206[10] = a2 + 1346;
  v206[11] = a2 + 1347;
  v206[12] = a2 + 1348;
  v206[13] = a2 + 1352;
  v206[14] = a2 + 1376;
  v206[15] = a2 + 1400;
  v206[16] = a2 + 1424;
  if (!sub_F0D3E4((uint64_t)&v208, (uint64_t)v207, (uint64_t)v206)) {
    return v64 | 1;
  }
  if (*(unsigned __int8 *)(a1 + 1448) != *(unsigned __int8 *)(a2 + 1448)) {
    return v64 | 1;
  }
  uint64_t v196 = *(void *)(a1 + 1464);
  uint64_t v197 = *(void *)(a1 + 1456);
  uint64_t v198 = *(void *)(a2 + 1456);
  if (v196 - v197 != *(void *)(a2 + 1464) - v198) {
    return v64 | 1;
  }
  if (v197 != v196)
  {
    while (*(double *)v197 == *(double *)v198
         && *(_DWORD *)(v197 + 8) == *(_DWORD *)(v198 + 8)
         && *(_DWORD *)(v197 + 12) == *(_DWORD *)(v198 + 12)
         && *(void *)(v197 + 16) == *(void *)(v198 + 16))
    {
      v197 += 24;
      v198 += 24;
      if (v197 == v196) {
        goto LABEL_294;
      }
    }
    return v64 | 1;
  }
LABEL_294:
  if (*(unsigned __int8 *)(a1 + 1450) != *(unsigned __int8 *)(a2 + 1450)) {
    return v64 | 1;
  }
  if (*(unsigned __int8 *)(a1 + 1449) != *(unsigned __int8 *)(a2 + 1449)) {
    return v64 | 1;
  }
  double v199 = *(double *)(a1 + 40);
  double v200 = *(double *)(a2 + 40);
  if (v199 != v200 && vabdd_f64(v199, v200) >= 2.22044605e-16) {
    return v64 | 1;
  }
  double v201 = *(double *)(a1 + 48);
  double v202 = *(double *)(a2 + 48);
  if (v201 != v202 && vabdd_f64(v201, v202) >= 2.22044605e-16) {
    return v64 | 1;
  }
  double v203 = *(double *)(a1 + 56);
  double v204 = *(double *)(a2 + 56);
  if (v203 != v204 && vabdd_f64(v203, v204) >= 2.22044605e-16) {
    return v64 | 1;
  }
  if ((*(unsigned int *)(a1 + 32) | ((unint64_t)*(unsigned __int8 *)(a1 + 36) << 32)) != (*(unsigned int *)(a2 + 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 36) << 32))
    || sub_F0D17C((double *)(a1 + 64), (double *)(a2 + 64))
    || (sub_F0CFBC((double **)(a1 + 856), a2 + 856) & 1) != 0
    || (sub_F0CFBC((double **)(a1 + 880), a2 + 880) & 1) != 0
    || *(unsigned __int8 *)(a1 + 928) != *(unsigned __int8 *)(a2 + 928)
    || *(unsigned __int8 *)(a1 + 929) != *(unsigned __int8 *)(a2 + 929)
    || *(_DWORD *)(a1 + 1000) != *(_DWORD *)(a2 + 1000)
    || *(_DWORD *)(a1 + 1004) != *(_DWORD *)(a2 + 1004)
    || *(void *)(a1 + 1008) != *(void *)(a2 + 1008)
    || (sub_F0D258(a1 + 1072, a2 + 1072) & 1) != 0
    || sub_F0D310((double *)(a1 + 1016), (double *)(a2 + 1016))
    || (sub_F3DA1C((unsigned __int8 **)(a1 + 904), (unsigned __int8 **)(a2 + 904)) & 1) != 0
    || *(_DWORD *)(a1 + 1184) != *(_DWORD *)(a2 + 1184)
    || *(_DWORD *)(a1 + 1188) != *(_DWORD *)(a2 + 1188)
    || *(void *)(a1 + 1192) != *(void *)(a2 + 1192)
    || *(_DWORD *)(a1 + 1200) != *(_DWORD *)(a2 + 1200)
    || *(_DWORD *)(a1 + 1204) != *(_DWORD *)(a2 + 1204)
    || *(void *)(a1 + 1208) != *(void *)(a2 + 1208)
    || sub_F0D17C((double *)(a1 + 688), (double *)(a2 + 688))
    || sub_F0D17C((double *)(a1 + 712), (double *)(a2 + 712))
    || sub_F0D054((double **)(a1 + 424), a2 + 424))
  {
    return v64 | 1;
  }
  return v64;
}

uint64_t sub_F07928(void *a1, unint64_t a2)
{
  if (a2 >= (uint64_t)(a1[1] - *a1) >> 2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    double v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, (uint64_t)(a1[1] - *a1) >> 2);
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v10 = &v15;
    }
    else {
      uint64_t v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    unint64_t v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    double v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 4 * a2;
}

void sub_F07A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

uint64_t sub_F07B38(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v68 = (uint64_t *)(a1 + 40);
  *(_OWORD *)(a1 + 104) = 0u;
  long long v7 = (void *)(a1 + 104);
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 136) = 1065353216;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  double v69 = (void *)(a1 + 104);
  if (!a3[3])
  {
    sub_F08788(a1, a2, a4, (uint64_t)v88);
    __dst[0] = v88;
    sub_F0CDB4((void ***)__dst);
    *(void *)(a1 + 88) = 0;
    sub_F08E40(a1);
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)__dst);
      sub_188FC78(__dst, (uint64_t)"No preprocessed cost functions in the data. Registered ", 55);
      uint64_t v10 = (void *)std::ostream::operator<<();
      sub_188FC78(v10, (uint64_t)" cost functions from the current cost function JSON config.", 59);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 1u);
      if (SHIBYTE(v81[0]) < 0) {
        operator delete(__p[0]);
      }
      if (v87 < 0) {
        operator delete(v86);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    return a1;
  }
  sub_F08788(a1, a3, a4, (uint64_t)&v83);
  *(void *)(a1 + 88) = 0x1F693A1C451AB30BLL * ((uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 3);
  __dst[0] = operator new(0x28uLL);
  *(_OWORD *)&__dst[1] = xmmword_20B9280;
  strcpy((char *)__dst[0], "override_data_build_cost_functions");
  uint64_t v8 = sub_58070(a2, (uint64_t)__dst);
  if (v8)
  {
    BOOL v9 = *((_DWORD *)v8 + 12) == 4;
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0) {
      goto LABEL_4;
    }
  }
  else
  {
    BOOL v9 = 0;
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
    {
LABEL_4:
      *(_OWORD *)__p = 0u;
      *(_OWORD *)double v81 = 0u;
      int v82 = 1065353216;
      if (v9) {
        goto LABEL_19;
      }
      goto LABEL_14;
    }
  }
  operator delete(__dst[0]);
  *(_OWORD *)__p = 0u;
  *(_OWORD *)double v81 = 0u;
  int v82 = 1065353216;
  if (v9) {
    goto LABEL_19;
  }
LABEL_14:
  double v11 = v84;
  if (v83 != v84)
  {
    unint64_t v12 = (uint64_t **)(v83 + 10);
    do
    {
      __dst[0] = (void *)(*v68 + 1304 * *((unsigned int *)v12 - 10) + 8);
      long long v13 = sub_7FCB8((uint64_t)__p, (uint64_t)__dst[0], (uint64_t)&unk_20F06E0, (long long **)__dst);
      double v14 = v12 - 4;
      if (v13 + 5 != (uint64_t *)(v12 - 4))
      {
        *((_DWORD *)v13 + 18) = *(_DWORD *)v12;
        sub_5A4DC(v13 + 5, *(v12 - 2), 0);
      }
      v12 += 6;
    }
    while (v14 + 5 != (uint64_t **)v11);
  }
LABEL_19:
  HIBYTE(__dst[2]) = 14;
  strcpy((char *)__dst, "cost_functions");
  std::string v15 = (void *)sub_560F4(a2, (uint64_t)__dst);
  if (SHIBYTE(__dst[2]) < 0) {
    operator delete(__dst[0]);
  }
  int v71 = 0;
  double v70 = v15;
  while (v81[1] < (void *)v15[3])
  {
    std::string v16 = (uint64_t *)v15[2];
    if (v16)
    {
      while (!v9 && sub_E2886C(v7, (uint64_t)(v16 + 2)))
      {
LABEL_26:
        std::string v16 = (uint64_t *)*v16;
        if (!v16) {
          goto LABEL_22;
        }
      }
      sub_F05C7C((uint64_t)(v16 + 2), v15, __p, (uint64_t)&v75);
      if (v78)
      {
        unsigned int v17 = sub_F05FDC(v4, &v75);
        BOOL v18 = v9;
        uint64_t v19 = v4;
        unsigned int v74 = v17;
        unsigned int v20 = *(_DWORD *)(a1 + 96);
        if (v20 <= v17) {
          unsigned int v20 = v17;
        }
        *(_DWORD *)(a1 + 96) = v20;
        uint64_t v21 = v83;
        uint64_t v22 = v84;
        if (v83 != v84)
        {
          while (1)
          {
            if (*((void *)v21 + 4) == v78)
            {
              double v25 = (uint64_t *)*((void *)v21 + 3);
              if (!v25)
              {
LABEL_58:
                long long v7 = v69;
                uint64_t v4 = v19;
                if (v21 == v84) {
                  goto LABEL_59;
                }
LABEL_34:
                uint64_t v23 = *v21;
                __dst[0] = &v74;
                BOOL v9 = v18;
                sub_F0D964(a1, &v74, (uint64_t)&unk_20F06E0, (_DWORD **)__dst)[3] = v23;
                uint64_t v24 = *v21;
                __dst[0] = v16 + 2;
                sub_E28A9C((uint64_t)v7, (uint64_t)(v16 + 2), (uint64_t)&unk_20F06E0, (long long **)__dst)[5] = v24;
                goto LABEL_85;
              }
              while (1)
              {
                double v26 = (const void **)(v25 + 2);
                uint64_t v27 = sub_58070(&v75, (uint64_t)(v25 + 2));
                double v28 = v27;
                if (!v27) {
                  break;
                }
                uint64_t v29 = *((unsigned __int8 *)v25 + 39);
                if ((v29 & 0x80u) == 0) {
                  uint64_t v30 = *((unsigned __int8 *)v25 + 39);
                }
                else {
                  uint64_t v30 = v25[3];
                }
                uint64_t v31 = *((unsigned __int8 *)v27 + 39);
                int v32 = (char)v31;
                if ((v31 & 0x80u) != 0) {
                  uint64_t v31 = v27[3];
                }
                if (v30 != v31) {
                  break;
                }
                if (v32 >= 0) {
                  uint64_t v33 = (unsigned __int8 *)(v27 + 2);
                }
                else {
                  uint64_t v33 = (unsigned __int8 *)v27[2];
                }
                if ((v29 & 0x80) != 0)
                {
                  if (memcmp(*v26, v33, v25[3])) {
                    break;
                  }
                }
                else if (*((unsigned char *)v25 + 39))
                {
                  while (*(unsigned __int8 *)v26 == *v33)
                  {
                    double v26 = (const void **)((char *)v26 + 1);
                    ++v33;
                    if (!--v29) {
                      goto LABEL_54;
                    }
                  }
                  break;
                }
LABEL_54:
                int v34 = *((_DWORD *)v25 + 12);
                if (v34 != *((_DWORD *)v28 + 12)
                  || v34 != -1 && !sub_4027D0(v34, (double *)v25 + 5, (double *)v28 + 5))
                {
                  break;
                }
                double v25 = (uint64_t *)*v25;
                if (!v25) {
                  goto LABEL_58;
                }
              }
            }
            v21 += 12;
            if (v21 == v22)
            {
              uint64_t v21 = v22;
              long long v7 = v69;
              BOOL v47 = v22 == v84;
              uint64_t v4 = v19;
              if (v47) {
                goto LABEL_59;
              }
              goto LABEL_34;
            }
          }
        }
        uint64_t v4 = v19;
LABEL_59:
        BOOL v9 = v18;
        if (sub_723EC(2u))
        {
          sub_6BAC((uint64_t)__dst);
          long long v35 = sub_188FC78(__dst, (uint64_t)"Cost function ", 14);
          int v36 = *((char *)v16 + 39);
          if (v36 >= 0) {
            uint64_t v37 = (uint64_t)(v16 + 2);
          }
          else {
            uint64_t v37 = v16[2];
          }
          if (v36 >= 0) {
            uint64_t v38 = *((unsigned __int8 *)v16 + 39);
          }
          else {
            uint64_t v38 = v16[3];
          }
          double v39 = sub_188FC78(v35, v37, v38);
          double v40 = sub_188FC78(v39, (uint64_t)" (", 2);
          std::ostream::operator<<();
          sub_188FC78(v40, (uint64_t)") not preprocessed.", 19);
          std::stringbuf::str();
          sub_7246C((uint64_t *)&v72, 2u);
          if (v73 < 0) {
            operator delete(v72);
          }
          __dst[0] = v67;
          *(void **)((char *)__dst + *((void *)v67 - 3)) = v66;
          if (v87 < 0) {
            operator delete(v86);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        uint64_t v42 = *(void *)(a1 + 40);
        uint64_t v41 = *(void *)(a1 + 48);
        __dst[0] = &v74;
        sub_F0D964(a1, &v74, (uint64_t)&unk_20F06E0, (_DWORD **)__dst)[3] = 0x1F693A1C451AB30BLL * ((v41 - v42) >> 3);
        uint64_t v44 = *(void *)(a1 + 40);
        uint64_t v43 = *(void *)(a1 + 48);
        __dst[0] = v16 + 2;
        sub_E28A9C((uint64_t)v7, (uint64_t)(v16 + 2), (uint64_t)&unk_20F06E0, (long long **)__dst)[5] = 0x1F693A1C451AB30BLL * ((v43 - v44) >> 3);
        unint64_t v45 = *(void *)(a1 + 48);
        if (v45 >= *(void *)(a1 + 56))
        {
          uint64_t v48 = sub_F0F488(v68, &v75, (uint64_t)(v16 + 2), (int *)&v74);
        }
        else
        {
          if (*((char *)v16 + 39) < 0)
          {
            sub_4200(__dst, (void *)v16[2], v16[3]);
          }
          else
          {
            *(_OWORD *)__dst = *((_OWORD *)v16 + 1);
            __dst[2] = (void *)v16[4];
          }
          sub_F25F9C(v45, &v75, (uint64_t *)__dst, v74);
          if (SHIBYTE(__dst[2]) < 0) {
            operator delete(__dst[0]);
          }
          uint64_t v48 = v45 + 1304;
          *(void *)(a1 + 48) = v45 + 1304;
        }
        *(void *)(a1 + 48) = v48;
LABEL_85:
        __dst[0] = v16 + 2;
        double v49 = sub_7FCB8((uint64_t)__p, (uint64_t)(v16 + 2), (uint64_t)&unk_20F06E0, (long long **)__dst);
        uint64_t v50 = v49;
        if (v49[8])
        {
          uint64_t v51 = (void **)v49[7];
          if (v51)
          {
            do
            {
              double v59 = (void **)*v51;
              sub_55198((uint64_t)(v51 + 5));
              if (*((char *)v51 + 39) < 0) {
                operator delete(v51[2]);
              }
              operator delete(v51);
              uint64_t v51 = v59;
            }
            while (v59);
          }
          unsigned int v50[7] = 0;
          uint64_t v52 = v50[6];
          if (v52)
          {
            for (uint64_t i = 0; i != v52; ++i)
              *(void *)(v50[5] + 8 * i) = 0;
          }
          v50[8] = 0;
        }
        double v54 = v75;
        double v75 = 0;
        double v55 = (void *)v50[5];
        v50[5] = (uint64_t)v54;
        if (v55) {
          operator delete(v55);
        }
        unint64_t v56 = v76;
        unsigned int v46 = v77;
        unsigned int v50[7] = (uint64_t)v77;
        v50[6] = v56;
        unint64_t v76 = 0;
        uint64_t v57 = v78;
        v50[8] = v78;
        *((_DWORD *)v50 + 18) = v79;
        std::string v15 = v70;
        if (v57)
        {
          unint64_t v58 = *((void *)v46 + 1);
          if ((v56 & (v56 - 1)) != 0)
          {
            if (v58 >= v56) {
              v58 %= v56;
            }
          }
          else
          {
            v58 &= v56 - 1;
          }
          unsigned int v46 = 0;
          *(void *)(v50[5] + 8 * v58) = v50 + 7;
          double v77 = 0;
          uint64_t v78 = 0;
        }
        ++v71;
        if (!v46) {
          goto LABEL_103;
        }
        do
        {
LABEL_106:
          double v61 = *(char **)v46;
          sub_55198((uint64_t)(v46 + 40));
          if (v46[39] < 0) {
            operator delete(*((void **)v46 + 2));
          }
          operator delete(v46);
          unsigned int v46 = v61;
        }
        while (v61);
      }
      else
      {
        unsigned int v46 = v77;
        if (v77) {
          goto LABEL_106;
        }
      }
LABEL_103:
      double v60 = v75;
      double v75 = 0;
      if (v60) {
        operator delete(v60);
      }
      goto LABEL_26;
    }
LABEL_22:
    if (!v71)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      sub_5E5C(__dst, "processing of cost functions json failed, parents inconsistent");
      double v65 = (void *)sub_2F404((uint64_t)exception, (long long *)__dst);
    }
  }
  sub_F08E40(a1);
  sub_80150((int)__p, (char *)v81[0]);
  double v62 = __p[0];
  __p[0] = 0;
  if (v62) {
    operator delete(v62);
  }
  __dst[0] = &v83;
  sub_F0CDB4((void ***)__dst);
  return a1;
}

void sub_F085E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a37 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a43);
  uint64_t v50 = *a10;
  if (*a10)
  {
    v48[19] = v50;
    operator delete(v50);
  }
  sub_3A4C2C(a17);
  uint64_t v51 = (void *)v48[8];
  if (v51)
  {
    v48[9] = v51;
    operator delete(v51);
  }
  __p = a15;
  sub_381734((void ***)&__p);
  sub_12168((uint64_t)v48);
  _Unwind_Resume(a1);
}

void sub_F08788(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = a2;
  BYTE7(v73) = 14;
  strcpy((char *)__p, "cost_functions");
  double v5 = sub_58070(a2, (uint64_t)__p);
  if (v5 && *((_DWORD *)v5 + 12) == 2) {
    uint64_t v4 = (void *)v5[5];
  }
  if (SBYTE7(v73) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  if (v7 != v6)
  {
    uint64_t v8 = v7 - 1296;
    do
    {
      uint64_t v10 = *(void **)(v8 + 1272);
      if (v10)
      {
        *(void *)(v8 + 1280) = v10;
        operator delete(v10);
      }
      double v11 = *(void **)(v8 + 1248);
      if (v11)
      {
        *(void *)(v8 + 1256) = v11;
        operator delete(v11);
      }
      sub_3817F8((void *)(v8 + 24));
      if (*(char *)(v8 + 23) < 0) {
        operator delete(*(void **)v8);
      }
      uint64_t v9 = v8 - 8;
      v8 -= 1304;
    }
    while (v9 != v6);
  }
  *(void *)(a1 + 48) = v6;
  *(_OWORD *)__p = 0u;
  long long v73 = 0u;
  int v74 = 1065353216;
  double v69 = 0;
  double v70 = 0;
  unint64_t v71 = 0;
  double v70 = sub_6E6EC((char **)&v69, (uint64_t)&xmmword_25FCBD8);
LABEL_17:
  if (*((void *)&v73 + 1) < v4[3])
  {
    unint64_t v12 = (uint64_t *)v4[2];
    if (!v12) {
      goto LABEL_93;
    }
    int v13 = 0;
    while (1)
    {
      double v14 = (const void **)(v12 + 2);
      sub_F05C7C((uint64_t)(v12 + 2), v4, __p, (uint64_t)&v65);
      if (v67) {
        break;
      }
LABEL_65:
      uint64_t v37 = v66;
      if (v66)
      {
        do
        {
          double v39 = (void **)*v37;
          sub_55198((uint64_t)(v37 + 5));
          if (*((char *)v37 + 39) < 0) {
            operator delete(v37[2]);
          }
          operator delete(v37);
          uint64_t v37 = v39;
        }
        while (v39);
      }
      uint64_t v38 = (void *)v65;
      *(void *)&long long v65 = 0;
      if (v38) {
        operator delete(v38);
      }
      unint64_t v12 = (uint64_t *)*v12;
      if (!v12)
      {
        if (v13) {
          goto LABEL_17;
        }
LABEL_93:
        exception = __cxa_allocate_exception(0x40uLL);
        sub_5E5C(&v65, "initial processing of cost functions json failed, parents inconsistent");
        double v61 = (void *)sub_2F404((uint64_t)exception, &v65);
      }
    }
    v75[0] = (long long *)(v12 + 2);
    std::string v15 = sub_7FCB8((uint64_t)__p, (uint64_t)(v12 + 2), (uint64_t)&unk_20F06E0, v75);
    std::string v16 = v15;
    if (v15[8])
    {
      unsigned int v17 = (void **)v15[7];
      if (v17)
      {
        do
        {
          double v26 = (void **)*v17;
          sub_55198((uint64_t)(v17 + 5));
          if (*((char *)v17 + 39) < 0) {
            operator delete(v17[2]);
          }
          operator delete(v17);
          unsigned int v17 = v26;
        }
        while (v26);
      }
      v16[7] = 0;
      uint64_t v18 = v16[6];
      if (v18)
      {
        for (uint64_t i = 0; i != v18; ++i)
          *(void *)(v16[5] + 8 * i) = 0;
      }
      v16[8] = 0;
    }
    uint64_t v20 = v65;
    *(void *)&long long v65 = 0;
    uint64_t v21 = (void *)v16[5];
    v16[5] = v20;
    if (v21) {
      operator delete(v21);
    }
    unint64_t v22 = *((void *)&v65 + 1);
    uint64_t v23 = v66;
    v16[7] = (uint64_t)v66;
    v16[6] = v22;
    *((void *)&v65 + 1) = 0;
    uint64_t v24 = v67;
    v16[8] = v67;
    *((_DWORD *)v16 + 18) = v68;
    if (v24)
    {
      unint64_t v25 = (unint64_t)v23[1];
      if ((v22 & (v22 - 1)) != 0)
      {
        if (v25 >= v22) {
          v25 %= v22;
        }
      }
      else
      {
        v25 &= v22 - 1;
      }
      *(void *)(v16[5] + 8 * v25) = v16 + 7;
      double v66 = 0;
      uint64_t v67 = 0;
    }
    unint64_t v27 = v12[3];
    if (*((char *)v12 + 39) >= 0) {
      uint64_t v28 = *((unsigned __int8 *)v12 + 39);
    }
    else {
      uint64_t v28 = v12[3];
    }
    uint64_t v29 = byte_25FCBEF;
    if (byte_25FCBEF < 0) {
      uint64_t v29 = *((void *)&xmmword_25FCBD8 + 1);
    }
    if (v28 == v29)
    {
      if (byte_25FCBEF >= 0) {
        uint64_t v30 = &xmmword_25FCBD8;
      }
      else {
        uint64_t v30 = (long long *)xmmword_25FCBD8;
      }
      if ((*((unsigned char *)v12 + 39) & 0x80) != 0)
      {
        long long v35 = (void *)*v14;
        if (memcmp(*v14, v30, v12[3]))
        {
          uint64_t v33 = v70;
          if ((unint64_t)v70 < v71) {
            goto LABEL_61;
          }
          goto LABEL_59;
        }
      }
      else if (*((unsigned char *)v12 + 39))
      {
        uint64_t v31 = (unsigned __int8 *)(v12 + 2);
        uint64_t v32 = *((unsigned __int8 *)v12 + 39);
        while (*v31 == *(unsigned __int8 *)v30)
        {
          ++v31;
          uint64_t v30 = (long long *)((char *)v30 + 1);
          if (!--v32) {
            goto LABEL_64;
          }
        }
        goto LABEL_54;
      }
LABEL_64:
      ++v13;
      goto LABEL_65;
    }
LABEL_54:
    uint64_t v33 = v70;
    if ((unint64_t)v70 < v71)
    {
      if ((*((unsigned char *)v12 + 39) & 0x80) == 0)
      {
        long long v34 = *(_OWORD *)v14;
        *((void *)v70 + 2) = v12[4];
        *(_OWORD *)uint64_t v33 = v34;
LABEL_62:
        int v36 = v33 + 24;
        goto LABEL_63;
      }
      long long v35 = (void *)*v14;
LABEL_61:
      sub_4200(v33, v35, v27);
      goto LABEL_62;
    }
LABEL_59:
    int v36 = sub_6E6EC((char **)&v69, (uint64_t)(v12 + 2));
LABEL_63:
    double v70 = v36;
    goto LABEL_64;
  }
  double v40 = (const void **)v70;
  uint64_t v41 = (char *)v69 + 24;
  unint64_t v42 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((v70 - ((unsigned char *)v69 + 24)) >> 3));
  BOOL v43 = v70 == (char *)v69 + 24;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if (v43) {
    uint64_t v44 = 0;
  }
  else {
    uint64_t v44 = v42;
  }
  sub_6EA30((uint64_t)v41, v40, (uint64_t)v75, v44, 1);
  unsigned int v46 = (long long *)v69;
  unint64_t v45 = (long long *)v70;
  if (v69 != v70)
  {
    do
    {
      BOOL v47 = sub_7F5D8(__p, (uint64_t)v46) + 5;
      unsigned int v48 = sub_F05FDC(a3, v47);
      LODWORD(v65) = v48;
      unsigned int v49 = *(_DWORD *)(a1 + 96);
      if (v49 <= v48) {
        unsigned int v49 = v48;
      }
      *(_DWORD *)(a1 + 96) = v49;
      uint64_t v50 = *(unsigned int **)(a4 + 8);
      if ((unint64_t)v50 >= *(void *)(a4 + 16))
      {
        uint64_t v51 = sub_F0E4A0((void **)a4, &v65, (uint64_t)v47);
        uint64_t v52 = a4;
      }
      else
      {
        *uint64_t v50 = v48;
        sub_54214((uint64_t)(v50 + 2), (uint64_t)v47);
        uint64_t v51 = (char *)(v50 + 12);
        uint64_t v52 = a4;
        *(void *)(a4 + 8) = v50 + 12;
      }
      *(void *)(v52 + 8) = v51;
      uint64_t v54 = *(void *)(a1 + 40);
      uint64_t v53 = *(void *)(a1 + 48);
      v75[0] = v46;
      sub_E28A9C(a1 + 104, (uint64_t)v46, (uint64_t)&unk_20F06E0, v75)[5] = 0x1F693A1C451AB30BLL * ((v53 - v54) >> 3);
      uint64_t v56 = *(void *)(a1 + 40);
      uint64_t v55 = *(void *)(a1 + 48);
      v75[0] = &v65;
      sub_F0D964(a1, (unsigned int *)&v65, (uint64_t)&unk_20F06E0, (_DWORD **)v75)[3] = 0x1F693A1C451AB30BLL
                                                                                     * ((v55 - v56) >> 3);
      sub_F095C8((uint64_t *)(a1 + 40), v47, (uint64_t)v46, (int *)&v65);
      unsigned int v46 = (long long *)((char *)v46 + 24);
    }
    while (v46 != v45);
    unsigned int v46 = (long long *)v69;
  }
  if (v46)
  {
    uint64_t v57 = (long long *)v70;
    unint64_t v58 = v46;
    if (v70 != (char *)v46)
    {
      do
      {
        if (*((char *)v57 - 1) < 0) {
          operator delete(*((void **)v57 - 3));
        }
        uint64_t v57 = (long long *)((char *)v57 - 24);
      }
      while (v57 != v46);
      unint64_t v58 = v69;
    }
    double v70 = (char *)v46;
    operator delete(v58);
  }
  sub_80150((int)__p, (char *)v73);
  double v59 = __p[0];
  __p[0] = 0;
  if (v59) {
    operator delete(v59);
  }
}

void sub_F08D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  a13 = a11;
  sub_F0CDB4((void ***)&a13);
  sub_1A668(&a21);
  sub_7EC38((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void sub_F08E40(uint64_t a1)
{
  for (uint64_t i = *(uint64_t **)(a1 + 16); i; uint64_t i = (uint64_t *)*i)
    sub_745A4(a1 + 64, (_DWORD *)i + 4);
  unint64_t v3 = *(unsigned int **)(a1 + 64);
  uint64_t v4 = *(char **)(a1 + 72);
  unint64_t v5 = 126 - 2 * __clz((v4 - (char *)v3) >> 2);
  if (v4 == (char *)v3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v5;
  }
  sub_F0E98C(v3, v4, (uint64_t)&v15, v6, 1);
  uint64_t v7 = *(void *)(a1 + 144);
  unint64_t v8 = ((*(_DWORD *)(a1 + 96) + 1) * (*(_DWORD *)(a1 + 96) + 1));
  unint64_t v9 = (*(void *)(a1 + 152) - v7) >> 2;
  if (v8 <= v9)
  {
    if (v8 < v9) {
      *(void *)(a1 + 152) = v7 + 4 * v8;
    }
  }
  else
  {
    sub_4394C(a1 + 144, v8 - v9);
  }
  uint64_t v10 = *(_DWORD **)(a1 + 40);
  double v11 = *(_DWORD **)(a1 + 48);
  while (v10 != v11)
  {
    unint64_t v12 = *(_DWORD **)(a1 + 40);
    for (uint64_t j = *(_DWORD **)(a1 + 48); v12 != j; v12 += 326)
    {
      int v14 = sub_F096A4((uint64_t)v10, (uint64_t)v12);
      *(_DWORD *)sub_F0A580((void *)(a1 + 144), (*v10 + *v10 * *(_DWORD *)(a1 + 96) + *v12)) = v14;
    }
    v10 += 326;
  }
}

uint64_t sub_F08F70(void *a1, unsigned int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    goto LABEL_24;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (v2.i32[0] - 1) & v3;
  }
  uint64_t v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6 || (uint64_t v7 = *v6) == 0) {
LABEL_24:
  }
    sub_5AE8("unordered_map::at: key not found");
  if (v4.u32[0] < 2uLL)
  {
    uint64_t v8 = *(void *)&v2 - 1;
    while (1)
    {
      uint64_t v10 = v7[1];
      if (v10 == v3)
      {
        if (*((_DWORD *)v7 + 4) == v3) {
          goto LABEL_21;
        }
      }
      else if ((v10 & v8) != v5)
      {
        goto LABEL_24;
      }
      uint64_t v7 = (uint64_t *)*v7;
      if (!v7) {
        goto LABEL_24;
      }
    }
  }
  while (1)
  {
    unint64_t v9 = v7[1];
    if (v9 == v3) {
      break;
    }
    if (v9 >= *(void *)&v2) {
      v9 %= *(void *)&v2;
    }
    if (v9 != v5) {
      goto LABEL_24;
    }
LABEL_11:
    uint64_t v7 = (uint64_t *)*v7;
    if (!v7) {
      goto LABEL_24;
    }
  }
  if (*((_DWORD *)v7 + 4) != v3) {
    goto LABEL_11;
  }
LABEL_21:
  double v11 = a1 + 5;
  unint64_t v12 = v7[3];

  return sub_F0907C(v11, v12);
}

uint64_t sub_F0907C(void *a1, unint64_t a2)
{
  if (0x1F693A1C451AB30BLL * ((uint64_t)(a1[1] - *a1) >> 3) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    uint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, 0x1F693A1C451AB30BLL * ((uint64_t)(a1[1] - *a1) >> 3));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v10 = &v15;
    }
    else {
      uint64_t v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    unint64_t v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    int v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 1304 * a2;
}

void sub_F091DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

uint64_t sub_F092BC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = sub_E2886C((void *)(a1 + 104), a2);
  if (!v3) {
    return *(void *)(a1 + 40);
  }
  unint64_t v4 = v3[5];

  return sub_F0907C((void *)(a1 + 40), v4);
}

uint64_t sub_F09314(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unint64_t v4 = *(unsigned int **)(a1 + 64);
  unint64_t v5 = *(unsigned int **)(a1 + 72);
  if (v4 != v5)
  {
    uint64_t v8 = (void *)(a1 + 144);
    while (*v4 != a2)
    {
      if ((*a3 & *(_DWORD *)sub_F093B8(v8, a2 + a2 * *(_DWORD *)(a1 + 96) + *v4)) == 0) {
        return *v4;
      }
      if (++v4 == v5) {
        return a2;
      }
    }
  }
  return a2;
}

uint64_t sub_F093B8(void *a1, unint64_t a2)
{
  if (a2 >= (uint64_t)(a1[1] - *a1) >> 2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    uint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, (uint64_t)(a1[1] - *a1) >> 2);
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v10 = &v15;
    }
    else {
      uint64_t v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    unint64_t v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    int v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 4 * a2;
}

void sub_F094E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

uint64_t sub_F095C8(uint64_t *a1, void *a2, uint64_t a3, int *a4)
{
  unint64_t v7 = a1[1];
  if (v7 >= a1[2])
  {
    uint64_t v8 = sub_F0FAC4(a1, a2, a3, a4);
  }
  else
  {
    if (*(char *)(a3 + 23) < 0)
    {
      sub_4200(__p, *(void **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a3;
      uint64_t v11 = *(void *)(a3 + 16);
    }
    sub_F25F9C(v7, a2, (uint64_t *)__p, *a4);
    if (SHIBYTE(v11) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v8 = v7 + 1304;
    a1[1] = v7 + 1304;
  }
  a1[1] = v8;
  return v8 - 1304;
}

void sub_F0967C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_F09684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  *(void *)(v14 + 8) = v15;
  _Unwind_Resume(exception_object);
}

uint64_t sub_F096A4(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 912) != *(_DWORD *)(a2 + 912)
    || *(_DWORD *)(a1 + 916) != *(_DWORD *)(a2 + 916)
    || *(void *)(a1 + 920) != *(void *)(a2 + 920))
  {
    goto LABEL_20;
  }
  double v4 = *(double *)(a1 + 408);
  double v5 = *(double *)(a2 + 408);
  double v6 = vabdd_f64(v4, v5);
  if (v4 != v5 && v6 >= 2.22044605e-16) {
    goto LABEL_20;
  }
  double v8 = *(double *)(a1 + 416);
  double v9 = *(double *)(a2 + 416);
  double v10 = vabdd_f64(v8, v9);
  BOOL v11 = v8 == v9 || v10 < 2.22044605e-16;
  if (v11
    && ((v12 = *(double *)(a1 + 424), v13 = *(double *)(a2 + 424), double v14 = vabdd_f64(v12, v13), v12 != v13)
      ? (BOOL v15 = v14 < 2.22044605e-16)
      : (BOOL v15 = 1),
        v15))
  {
    int v16 = 0;
  }
  else
  {
LABEL_20:
    int v16 = 4;
  }
  if (*(_DWORD *)(a1 + 928) != *(_DWORD *)(a2 + 928)
    || *(_DWORD *)(a1 + 932) != *(_DWORD *)(a2 + 932)
    || *(void *)(a1 + 936) != *(void *)(a2 + 936))
  {
    v16 |= 0x400000u;
  }
  if (*(_DWORD *)(a1 + 816) != *(_DWORD *)(a2 + 816)
    || *(_DWORD *)(a1 + 820) != *(_DWORD *)(a2 + 820)
    || *(void *)(a1 + 824) != *(void *)(a2 + 824))
  {
    goto LABEL_40;
  }
  double v17 = *(double *)(a1 + 336);
  double v18 = *(double *)(a2 + 336);
  double v19 = vabdd_f64(v17, v18);
  BOOL v20 = v17 == v18 || v19 < 2.22044605e-16;
  if (!v20
    || ((double v21 = *(double *)(a1 + 344), v22 = *(double *)(a2 + 344), v23 = vabdd_f64(v21, v22), v21 != v22)
      ? (BOOL v24 = v23 < 2.22044605e-16)
      : (BOOL v24 = 1),
        !v24
     || (double v25 = *(double *)(a1 + 352), v26 = *(double *)(a2 + 352), v25 != v26) && vabdd_f64(v25, v26) >= 2.22044605e-16))
  {
LABEL_40:
    v16 |= 1u;
  }
  if (*(_DWORD *)(a1 + 848) != *(_DWORD *)(a2 + 848)
    || *(_DWORD *)(a1 + 852) != *(_DWORD *)(a2 + 852)
    || *(void *)(a1 + 856) != *(void *)(a2 + 856))
  {
    goto LABEL_53;
  }
  double v27 = *(double *)(a1 + 360);
  double v28 = *(double *)(a2 + 360);
  double v29 = vabdd_f64(v27, v28);
  BOOL v30 = v27 == v28 || v29 < 2.22044605e-16;
  if (!v30
    || (double v31 = *(double *)(a1 + 368), v32 = *(double *)(a2 + 368), v31 != v32) && vabdd_f64(v31, v32) >= 2.22044605e-16
    || (double v33 = *(double *)(a1 + 376), v34 = *(double *)(a2 + 376), v33 != v34) && vabdd_f64(v33, v34) >= 2.22044605e-16)
  {
LABEL_53:
    v16 |= 2u;
  }
  if (*(_DWORD *)(a1 + 768) != *(_DWORD *)(a2 + 768)
    || *(_DWORD *)(a1 + 772) != *(_DWORD *)(a2 + 772)
    || *(void *)(a1 + 776) != *(void *)(a2 + 776)
    || *(_DWORD *)(a1 + 784) != *(_DWORD *)(a2 + 784)
    || *(_DWORD *)(a1 + 788) != *(_DWORD *)(a2 + 788)
    || *(void *)(a1 + 792) != *(void *)(a2 + 792))
  {
    v16 |= 8u;
  }
  double v35 = *(double *)(a1 + 40);
  double v36 = *(double *)(a2 + 40);
  double v37 = vabdd_f64(v35, v36);
  if (v35 == v36 || v37 < 2.22044605e-16)
  {
    double v39 = *(double *)(a1 + 48);
    double v40 = *(double *)(a2 + 48);
    double v41 = vabdd_f64(v39, v40);
    if (v39 == v40 || v41 < 2.22044605e-16)
    {
      uint64_t v44 = *(double **)(a1 + 240);
      BOOL v43 = *(double **)(a1 + 248);
      unint64_t v45 = *(double **)(a2 + 240);
      if ((char *)v43 - (char *)v44 == *(void *)(a2 + 248) - (void)v45)
      {
        if (v44 == v43) {
          goto LABEL_91;
        }
        while (1)
        {
          double v46 = vabdd_f64(*v44, *v45);
          if (*v44 != *v45 && v46 >= 2.22044605e-16) {
            break;
          }
          double v48 = v44[1];
          double v49 = v45[1];
          double v50 = vabdd_f64(v48, v49);
          if (v48 != v49 && v50 >= 2.22044605e-16) {
            break;
          }
          double v52 = v44[2];
          double v53 = v45[2];
          double v54 = vabdd_f64(v52, v53);
          if (v52 != v53 && v54 >= 2.22044605e-16) {
            break;
          }
          v44 += 3;
          v45 += 3;
          if (v44 == v43) {
            goto LABEL_91;
          }
        }
      }
    }
  }
  v16 |= 0x10u;
LABEL_91:
  if (*(unsigned __int8 *)(a1 + 233) == *(unsigned __int8 *)(a2 + 233)) {
    int v56 = v16;
  }
  else {
    int v56 = v16 | 0x20;
  }
  if (*(unsigned __int8 *)(a1 + 624) == *(unsigned __int8 *)(a2 + 624))
  {
    uint64_t v57 = *(void *)(a1 + 536);
    uint64_t v58 = *(void *)(a1 + 528);
    uint64_t v59 = *(void *)(a2 + 528);
    if (v57 - v58 == *(void *)(a2 + 536) - v59)
    {
      if (v58 == v57)
      {
LABEL_101:
        uint64_t v60 = *(void *)(a1 + 608);
        uint64_t v61 = *(void *)(a1 + 600);
        uint64_t v62 = *(void *)(a2 + 600);
        if (v60 - v61 == *(void *)(a2 + 608) - v62)
        {
          if (v61 == v60)
          {
LABEL_107:
            uint64_t v63 = *(void *)(a1 + 560);
            uint64_t v64 = *(void *)(a1 + 552);
            uint64_t v65 = *(void *)(a2 + 552);
            if (v63 - v64 == *(void *)(a2 + 560) - v65)
            {
              if (v64 == v63)
              {
LABEL_113:
                if (*(_DWORD *)(a1 + 800) == *(_DWORD *)(a2 + 800)
                  && *(_DWORD *)(a1 + 804) == *(_DWORD *)(a2 + 804)
                  && *(void *)(a1 + 808) == *(void *)(a2 + 808)
                  && *(unsigned __int8 *)(a1 + 626) == *(unsigned __int8 *)(a2 + 626)
                  && *(double *)(a1 + 656) == *(double *)(a2 + 656)
                  && !sub_F0D0FC((uint64_t *)(a1 + 632), (uint64_t *)(a2 + 632)))
                {
                  goto LABEL_120;
                }
              }
              else
              {
                while (*(_DWORD *)v64 == *(_DWORD *)v65
                     && *(_DWORD *)(v64 + 4) == *(_DWORD *)(v65 + 4)
                     && *(void *)(v64 + 8) == *(void *)(v65 + 8))
                {
                  v64 += 16;
                  v65 += 16;
                  if (v64 == v63) {
                    goto LABEL_113;
                  }
                }
              }
            }
          }
          else
          {
            while (*(_DWORD *)v61 == *(_DWORD *)v62
                 && *(_DWORD *)(v61 + 4) == *(_DWORD *)(v62 + 4)
                 && *(void *)(v61 + 8) == *(void *)(v62 + 8))
            {
              v61 += 16;
              v62 += 16;
              if (v61 == v60) {
                goto LABEL_107;
              }
            }
          }
        }
      }
      else
      {
        while (*(_DWORD *)v58 == *(_DWORD *)v59
             && *(_DWORD *)(v58 + 4) == *(_DWORD *)(v59 + 4)
             && *(void *)(v58 + 8) == *(void *)(v59 + 8))
        {
          v58 += 16;
          v59 += 16;
          if (v58 == v57) {
            goto LABEL_101;
          }
        }
      }
    }
  }
  v56 |= 0x40u;
LABEL_120:
  uint64_t v66 = *(void *)(a1 + 584);
  uint64_t v67 = *(void *)(a1 + 576);
  uint64_t v68 = *(void *)(a2 + 576);
  if (v66 - v67 != *(void *)(a2 + 584) - v68) {
    goto LABEL_131;
  }
  if (v67 != v66)
  {
    while (*(_DWORD *)v67 == *(_DWORD *)v68
         && *(_DWORD *)(v67 + 4) == *(_DWORD *)(v68 + 4)
         && *(void *)(v67 + 8) == *(void *)(v68 + 8))
    {
      v67 += 16;
      v68 += 16;
      if (v67 == v66) {
        goto LABEL_126;
      }
    }
    goto LABEL_131;
  }
LABEL_126:
  if (*(unsigned __int8 *)(a1 + 152) != *(unsigned __int8 *)(a2 + 152)
    || ((double v69 = *(double *)(a1 + 160), v70 = *(double *)(a2 + 160), v71 = vabdd_f64(v69, v70), v69 != v70)
      ? (BOOL v72 = v71 < 2.22044605e-16)
      : (BOOL v72 = 1),
        !v72))
  {
LABEL_131:
    v56 |= 0x1000u;
  }
  if (*(unsigned __int8 *)(a1 + 496) != *(unsigned __int8 *)(a2 + 496)
    || ((double v73 = *(double *)(a1 + 504), v74 = *(double *)(a2 + 504), v75 = vabdd_f64(v73, v74), v73 != v74)
      ? (BOOL v76 = v75 < 2.22044605e-16)
      : (BOOL v76 = 1),
        !v76))
  {
    v56 |= 0x80u;
  }
  if (*(unsigned __int8 *)(a1 + 485) != *(unsigned __int8 *)(a2 + 485)
    || ((double v77 = *(double *)(a1 + 488), v78 = *(double *)(a2 + 488), v79 = vabdd_f64(v77, v78), v77 != v78)
      ? (BOOL v80 = v79 < 2.22044605e-16)
      : (BOOL v80 = 1),
        !v80))
  {
    v56 |= 0x100u;
  }
  int v81 = *(unsigned __int16 *)(a1 + 480);
  BOOL v82 = v81 != 0xFFFF;
  int v83 = *(unsigned __int16 *)(a2 + 480);
  BOOL v84 = v83 != v81 && v81 != 0xFFFF;
  if (v82 ^ (v83 != 0xFFFF) | v84) {
    v56 |= 0x100u;
  }
  if (*(_DWORD *)(a1 + 960) != *(_DWORD *)(a2 + 960)
    || *(_DWORD *)(a1 + 964) != *(_DWORD *)(a2 + 964)
    || *(void *)(a1 + 968) != *(void *)(a2 + 968)
    || *(_DWORD *)(a1 + 976) != *(_DWORD *)(a2 + 976)
    || *(_DWORD *)(a1 + 980) != *(_DWORD *)(a2 + 980)
    || *(void *)(a1 + 984) != *(void *)(a2 + 984))
  {
    v56 |= 0x800u;
  }
  double v86 = *(double **)(a1 + 288);
  double v85 = *(double **)(a1 + 296);
  char v87 = *(double **)(a2 + 288);
  if ((char *)v85 - (char *)v86 != *(void *)(a2 + 296) - (void)v87) {
    goto LABEL_176;
  }
  if (v86 != v85)
  {
    while (1)
    {
      double v88 = vabdd_f64(*v86, *v87);
      if (*v86 != *v87 && v88 >= 2.22044605e-16) {
        break;
      }
      double v90 = v86[1];
      double v91 = v87[1];
      double v92 = vabdd_f64(v90, v91);
      if (v90 != v91 && v92 >= 2.22044605e-16) {
        break;
      }
      double v94 = v86[2];
      double v95 = v87[2];
      double v96 = vabdd_f64(v94, v95);
      if (v94 != v95 && v96 >= 2.22044605e-16) {
        break;
      }
      v86 += 3;
      v87 += 3;
      if (v86 == v85) {
        goto LABEL_174;
      }
    }
LABEL_176:
    v56 |= 0x80000u;
    if (*(_DWORD *)(a1 + 664) == *(_DWORD *)(a2 + 664)) {
      goto LABEL_177;
    }
LABEL_179:
    v56 |= 0x100000u;
    goto LABEL_180;
  }
LABEL_174:
  if (*(_DWORD *)(a1 + 664) != *(_DWORD *)(a2 + 664)) {
    goto LABEL_179;
  }
LABEL_177:
  if (*(_DWORD *)(a1 + 668) != *(_DWORD *)(a2 + 668) || *(void *)(a1 + 672) != *(void *)(a2 + 672)) {
    goto LABEL_179;
  }
LABEL_180:
  if (*(unsigned __int8 *)(a1 + 625) != *(unsigned __int8 *)(a2 + 625)) {
    goto LABEL_272;
  }
  double v98 = *(double **)(a1 + 736);
  double v99 = *(double **)(a1 + 728);
  double v100 = *(double **)(a2 + 728);
  if ((char *)v98 - (char *)v99 != *(void *)(a2 + 736) - (void)v100) {
    goto LABEL_272;
  }
  for (; v99 != v98; v100 += 3)
  {
    double v101 = vabdd_f64(*v99, *v100);
    if (*v99 != *v100 && v101 >= 2.22044605e-16) {
      goto LABEL_272;
    }
    double v103 = v99[1];
    double v104 = v100[1];
    double v105 = vabdd_f64(v103, v104);
    if (v103 != v104 && v105 >= 2.22044605e-16) {
      goto LABEL_272;
    }
    double v107 = v99[2];
    double v108 = v100[2];
    double v109 = vabdd_f64(v107, v108);
    if (v107 != v108 && v109 >= 2.22044605e-16) {
      goto LABEL_272;
    }
    v99 += 3;
  }
  double v111 = *(double *)(a1 + 56);
  double v112 = *(double *)(a2 + 56);
  double v113 = vabdd_f64(v111, v112);
  if (v111 != v112 && v113 >= 2.22044605e-16) {
    goto LABEL_272;
  }
  double v115 = *(double *)(a1 + 64);
  double v116 = *(double *)(a2 + 64);
  double v117 = vabdd_f64(v115, v116);
  if (v115 != v116 && v117 >= 2.22044605e-16) {
    goto LABEL_272;
  }
  uint64_t v119 = 0;
  do
  {
    double v120 = *(double *)(a1 + 72 + v119);
    double v121 = *(double *)(a2 + 72 + v119);
    BOOL v122 = v120 == v121;
    if (vabdd_f64(v120, v121) < 2.22044605e-16) {
      BOOL v122 = 1;
    }
    if (!v122) {
      break;
    }
    BOOL v156 = v119 == 72;
    v119 += 8;
  }
  while (!v156);
  if (!v122) {
    goto LABEL_272;
  }
  uint64_t v124 = *(double **)(a1 + 264);
  uint64_t v123 = *(double **)(a1 + 272);
  uint64_t v125 = *(double **)(a2 + 264);
  if ((char *)v123 - (char *)v124 != *(void *)(a2 + 272) - (void)v125) {
    goto LABEL_272;
  }
  for (; v124 != v123; v125 += 3)
  {
    double v126 = vabdd_f64(*v124, *v125);
    if (*v124 != *v125 && v126 >= 2.22044605e-16) {
      goto LABEL_272;
    }
    double v128 = v124[1];
    double v129 = v125[1];
    double v130 = vabdd_f64(v128, v129);
    if (v128 != v129 && v130 >= 2.22044605e-16) {
      goto LABEL_272;
    }
    double v132 = v124[2];
    double v133 = v125[2];
    double v134 = vabdd_f64(v132, v133);
    if (v132 != v133 && v134 >= 2.22044605e-16) {
      goto LABEL_272;
    }
    v124 += 3;
  }
  if (sub_F0D17C((double *)(a1 + 312), (double *)(a2 + 312))
    || sub_F0D17C((double *)(a1 + 384), (double *)(a2 + 384))
    || sub_F0D17C((double *)(a1 + 432), (double *)(a2 + 432))
    || *(unsigned __int16 *)(a2 + 480) != *(unsigned __int16 *)(a1 + 480)
    || sub_F0D17C((double *)(a1 + 456), (double *)(a2 + 456))
    || *(unsigned __int8 *)(a1 + 483) != *(unsigned __int8 *)(a2 + 483)
    || *(unsigned __int8 *)(a1 + 484) != *(unsigned __int8 *)(a2 + 484)
    || (sub_F0D1E8((uint64_t *)(a1 + 680), (uint64_t *)(a2 + 680)) & 1) != 0
    || (sub_F0D1E8((uint64_t *)(a1 + 704), (uint64_t *)(a2 + 704)) & 1) != 0
    || *(_DWORD *)(a1 + 1072) != *(_DWORD *)(a2 + 1072)
    || *(_DWORD *)(a1 + 1076) != *(_DWORD *)(a2 + 1076)
    || *(void *)(a1 + 1080) != *(void *)(a2 + 1080)
    || *(_DWORD *)(a1 + 864) != *(_DWORD *)(a2 + 864)
    || *(_DWORD *)(a1 + 868) != *(_DWORD *)(a2 + 868)
    || *(void *)(a1 + 872) != *(void *)(a2 + 872)
    || *(_DWORD *)(a1 + 880) != *(_DWORD *)(a2 + 880)
    || *(_DWORD *)(a1 + 884) != *(_DWORD *)(a2 + 884)
    || *(void *)(a1 + 888) != *(void *)(a2 + 888)
    || *(_DWORD *)(a1 + 896) != *(_DWORD *)(a2 + 896)
    || *(_DWORD *)(a1 + 900) != *(_DWORD *)(a2 + 900)
    || *(void *)(a1 + 904) != *(void *)(a2 + 904)
    || *(_DWORD *)(a1 + 992) != *(_DWORD *)(a2 + 992)
    || *(_DWORD *)(a1 + 996) != *(_DWORD *)(a2 + 996)
    || *(void *)(a1 + 1000) != *(void *)(a2 + 1000)
    || *(_DWORD *)(a1 + 1008) != *(_DWORD *)(a2 + 1008)
    || *(_DWORD *)(a1 + 1012) != *(_DWORD *)(a2 + 1012)
    || *(void *)(a1 + 1016) != *(void *)(a2 + 1016)
    || *(unsigned __int8 *)(a1 + 232) != *(unsigned __int8 *)(a2 + 232)
    || *(_DWORD *)(a1 + 236) != *(_DWORD *)(a2 + 236)
    || *(unsigned __int8 *)(a1 + 512) != *(unsigned __int8 *)(a2 + 512)
    || (double v136 = *(double *)(a1 + 520), v137 = *(double *)(a2 + 520), v136 != v137)
    && vabdd_f64(v136, v137) >= 2.22044605e-16
    || *(_DWORD *)(a1 + 1088) != *(_DWORD *)(a2 + 1088)
    || *(_DWORD *)(a1 + 1092) != *(_DWORD *)(a2 + 1092)
    || *(void *)(a1 + 1096) != *(void *)(a2 + 1096)
    || *(_DWORD *)(a1 + 1104) != *(_DWORD *)(a2 + 1104)
    || *(_DWORD *)(a1 + 1108) != *(_DWORD *)(a2 + 1108)
    || *(void *)(a1 + 1112) != *(void *)(a2 + 1112))
  {
LABEL_272:
    v56 |= 0x200u;
  }
  if (sub_F71AD8((uint64_t *)(a1 + 1256), (unsigned __int8 **)(a2 + 1256))) {
    goto LABEL_283;
  }
  if (sub_F71AD8((uint64_t *)(a1 + 1280), (unsigned __int8 **)(a2 + 1280))) {
    goto LABEL_283;
  }
  uint64_t v138 = *(void *)(a1 + 688);
  uint64_t v139 = *(void *)(a1 + 680);
  uint64_t v140 = *(void *)(a2 + 680);
  if (v138 - v139 != *(void *)(a2 + 688) - v140) {
    goto LABEL_283;
  }
  if (v139 != v138)
  {
    while (*(_DWORD *)v139 == *(_DWORD *)v140
         && *(_DWORD *)(v139 + 4) == *(_DWORD *)(v140 + 4)
         && *(void *)(v139 + 8) == *(void *)(v140 + 8))
    {
      v139 += 16;
      v140 += 16;
      if (v139 == v138) {
        goto LABEL_281;
      }
    }
LABEL_283:
    v56 |= 0x400u;
    if (*(_DWORD *)(a1 + 944) == *(_DWORD *)(a2 + 944)) {
      goto LABEL_284;
    }
LABEL_286:
    v56 |= 0x10000u;
    goto LABEL_287;
  }
LABEL_281:
  if (*(_DWORD *)(a1 + 944) != *(_DWORD *)(a2 + 944)) {
    goto LABEL_286;
  }
LABEL_284:
  if (*(_DWORD *)(a1 + 948) != *(_DWORD *)(a2 + 948) || *(void *)(a1 + 952) != *(void *)(a2 + 952)) {
    goto LABEL_286;
  }
LABEL_287:
  if (*(_DWORD *)(a1 + 832) != *(_DWORD *)(a2 + 832)
    || *(_DWORD *)(a1 + 836) != *(_DWORD *)(a2 + 836)
    || *(void *)(a1 + 840) != *(void *)(a2 + 840))
  {
    v56 |= 0x20000u;
  }
  if (*(_DWORD *)(a1 + 1024) != *(_DWORD *)(a2 + 1024)
    || *(_DWORD *)(a1 + 1028) != *(_DWORD *)(a2 + 1028)
    || *(void *)(a1 + 1032) != *(void *)(a2 + 1032)
    || *(_DWORD *)(a1 + 1040) != *(_DWORD *)(a2 + 1040)
    || *(_DWORD *)(a1 + 1044) != *(_DWORD *)(a2 + 1044)
    || *(void *)(a1 + 1048) != *(void *)(a2 + 1048))
  {
    v56 |= 0x40000u;
  }
  if ((*(unsigned char *)(a1 + 176) != 0) != (*(unsigned char *)(a2 + 176) != 0)) {
    unsigned int v141 = v56 | 0x2000;
  }
  else {
    unsigned int v141 = v56;
  }
  if (*(unsigned char *)(a1 + 176) && *(unsigned char *)(a2 + 176))
  {
    if (*(double *)(a1 + 184) == *(double *)(a2 + 184))
    {
      double v143 = *(double **)(a1 + 208);
      double v142 = *(double **)(a1 + 216);
      double v144 = *(double **)(a2 + 208);
      if ((char *)v142 - (char *)v143 == *(void *)(a2 + 216) - (void)v144)
      {
        if (v143 == v142) {
          goto LABEL_324;
        }
        while (1)
        {
          double v145 = vabdd_f64(*v143, *v144);
          if (*v143 != *v144 && v145 >= 2.22044605e-16) {
            break;
          }
          double v147 = v143[1];
          double v148 = v144[1];
          double v149 = vabdd_f64(v147, v148);
          if (v147 != v148 && v149 >= 2.22044605e-16) {
            break;
          }
          double v151 = v143[2];
          double v152 = v144[2];
          double v153 = vabdd_f64(v151, v152);
          if (v151 != v152 && v153 >= 2.22044605e-16) {
            break;
          }
          v143 += 3;
          v144 += 3;
          if (v143 == v142) {
            goto LABEL_324;
          }
        }
      }
    }
    unsigned int v141 = v56 | 0x2000;
  }
LABEL_324:
  if ((*(unsigned char *)(a1 + 177) != 0) != (*(unsigned char *)(a2 + 177) != 0)) {
    uint64_t result = v141 | 0x4000;
  }
  else {
    uint64_t result = v141;
  }
  if (*(unsigned char *)(a1 + 177)) {
    BOOL v156 = *(unsigned char *)(a2 + 177) == 0;
  }
  else {
    BOOL v156 = 1;
  }
  if (!v156
    && (*(unsigned __int8 *)(a1 + 179) != *(unsigned __int8 *)(a2 + 179)
     || *(unsigned __int8 *)(a1 + 178) != *(unsigned __int8 *)(a2 + 178)))
  {
    uint64_t result = v141 | 0x4000;
  }
  int v157 = *(_DWORD *)(a1 + 1120);
  if (v157 || *(_DWORD *)(a1 + 1124))
  {
    BOOL v158 = 1;
    int v159 = *(_DWORD *)(a2 + 1120);
    int v160 = *(_DWORD *)(a2 + 1124);
    if (!*(void *)(a2 + 1120)) {
      goto LABEL_337;
    }
  }
  else
  {
    BOOL v158 = *(void *)(a1 + 1128) != 0;
    int v159 = *(_DWORD *)(a2 + 1120);
    int v160 = *(_DWORD *)(a2 + 1124);
    if (!*(void *)(a2 + 1120))
    {
LABEL_337:
      if ((v158 ^ (*(void *)(a2 + 1128) != 0))) {
        return result | 0x200000;
      }
      goto LABEL_341;
    }
  }
  if (!v158) {
    return result | 0x200000;
  }
LABEL_341:
  if (v157 || *(_DWORD *)(a1 + 1124) || *(void *)(a1 + 1128))
  {
    uint64_t v161 = *(void *)(a2 + 1128);
    if ((v159 || v160 || v161) && (v157 != v159 || *(_DWORD *)(a1 + 1124) != v160 || *(void *)(a1 + 1128) != v161)) {
      return result | 0x200000;
    }
  }
  return result;
}

uint64_t sub_F0A580(void *a1, unint64_t a2)
{
  if (a2 >= (uint64_t)(a1[1] - *a1) >> 2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    double v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    double v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, (uint64_t)(a1[1] - *a1) >> 2);
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      double v10 = &v15;
    }
    else {
      double v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    double v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    double v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 4 * a2;
}

void sub_F0A6B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

uint64_t sub_F0A790(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v68 = (uint64_t *)(a1 + 40);
  *(_OWORD *)(a1 + 104) = 0u;
  long long v7 = (void *)(a1 + 104);
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 136) = 1065353216;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  double v69 = (void *)(a1 + 104);
  if (!a3[3])
  {
    sub_F0B400(a1, a2, a4, (uint64_t)v88);
    __dst[0] = v88;
    sub_F0CDB4((void ***)__dst);
    *(void *)(a1 + 88) = 0;
    sub_F0BA98(a1);
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)__dst);
      sub_188FC78(__dst, (uint64_t)"No preprocessed cost functions in the data. Registered ", 55);
      double v10 = (void *)std::ostream::operator<<();
      sub_188FC78(v10, (uint64_t)" cost functions from the current cost function JSON config.", 59);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 1u);
      if (SHIBYTE(v81[0]) < 0) {
        operator delete(__p[0]);
      }
      if (v87 < 0) {
        operator delete(v86);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    return a1;
  }
  sub_F0B400(a1, a3, a4, (uint64_t)&v83);
  *(void *)(a1 + 88) = 0xA3A0FD5C5F02A3A1 * ((uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 3);
  __dst[0] = operator new(0x28uLL);
  *(_OWORD *)&__dst[1] = xmmword_20B9280;
  strcpy((char *)__dst[0], "override_data_build_cost_functions");
  double v8 = sub_58070(a2, (uint64_t)__dst);
  if (v8)
  {
    BOOL v9 = *((_DWORD *)v8 + 12) == 4;
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0) {
      goto LABEL_4;
    }
  }
  else
  {
    BOOL v9 = 0;
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
    {
LABEL_4:
      *(_OWORD *)__p = 0u;
      *(_OWORD *)int v81 = 0u;
      int v82 = 1065353216;
      if (v9) {
        goto LABEL_19;
      }
      goto LABEL_14;
    }
  }
  operator delete(__dst[0]);
  *(_OWORD *)__p = 0u;
  *(_OWORD *)int v81 = 0u;
  int v82 = 1065353216;
  if (v9) {
    goto LABEL_19;
  }
LABEL_14:
  BOOL v11 = v84;
  if (v83 != v84)
  {
    double v12 = (uint64_t **)(v83 + 10);
    do
    {
      __dst[0] = (void *)(*v68 + 776 * *((unsigned int *)v12 - 10) + 8);
      long long v13 = sub_7FCB8((uint64_t)__p, (uint64_t)__dst[0], (uint64_t)&unk_20F06E0, (long long **)__dst);
      double v14 = v12 - 4;
      if (v13 + 5 != (uint64_t *)(v12 - 4))
      {
        *((_DWORD *)v13 + 18) = *(_DWORD *)v12;
        sub_5A4DC(v13 + 5, *(v12 - 2), 0);
      }
      v12 += 6;
    }
    while (v14 + 5 != (uint64_t **)v11);
  }
LABEL_19:
  HIBYTE(__dst[2]) = 14;
  strcpy((char *)__dst, "cost_functions");
  std::string v15 = (void *)sub_560F4(a2, (uint64_t)__dst);
  if (SHIBYTE(__dst[2]) < 0) {
    operator delete(__dst[0]);
  }
  int v71 = 0;
  double v70 = v15;
  while (v81[1] < (void *)v15[3])
  {
    std::string v16 = (uint64_t *)v15[2];
    if (v16)
    {
      while (!v9 && sub_E2886C(v7, (uint64_t)(v16 + 2)))
      {
LABEL_26:
        std::string v16 = (uint64_t *)*v16;
        if (!v16) {
          goto LABEL_22;
        }
      }
      sub_F05C7C((uint64_t)(v16 + 2), v15, __p, (uint64_t)&v75);
      if (v78)
      {
        unsigned int v17 = sub_F05FDC(v4, &v75);
        BOOL v18 = v9;
        uint64_t v19 = v4;
        unsigned int v74 = v17;
        unsigned int v20 = *(_DWORD *)(a1 + 96);
        if (v20 <= v17) {
          unsigned int v20 = v17;
        }
        *(_DWORD *)(a1 + 96) = v20;
        double v21 = v83;
        double v22 = v84;
        if (v83 != v84)
        {
          while (1)
          {
            if (*((void *)v21 + 4) == v78)
            {
              double v25 = (uint64_t *)*((void *)v21 + 3);
              if (!v25)
              {
LABEL_58:
                long long v7 = v69;
                uint64_t v4 = v19;
                if (v21 == v84) {
                  goto LABEL_59;
                }
LABEL_34:
                uint64_t v23 = *v21;
                __dst[0] = &v74;
                BOOL v9 = v18;
                sub_F0D964(a1, &v74, (uint64_t)&unk_20F06E0, (_DWORD **)__dst)[3] = v23;
                uint64_t v24 = *v21;
                __dst[0] = v16 + 2;
                sub_E28A9C((uint64_t)v7, (uint64_t)(v16 + 2), (uint64_t)&unk_20F06E0, (long long **)__dst)[5] = v24;
                goto LABEL_85;
              }
              while (1)
              {
                double v26 = (const void **)(v25 + 2);
                double v27 = sub_58070(&v75, (uint64_t)(v25 + 2));
                double v28 = v27;
                if (!v27) {
                  break;
                }
                uint64_t v29 = *((unsigned __int8 *)v25 + 39);
                if ((v29 & 0x80u) == 0) {
                  uint64_t v30 = *((unsigned __int8 *)v25 + 39);
                }
                else {
                  uint64_t v30 = v25[3];
                }
                uint64_t v31 = *((unsigned __int8 *)v27 + 39);
                int v32 = (char)v31;
                if ((v31 & 0x80u) != 0) {
                  uint64_t v31 = v27[3];
                }
                if (v30 != v31) {
                  break;
                }
                if (v32 >= 0) {
                  uint64_t v33 = (unsigned __int8 *)(v27 + 2);
                }
                else {
                  uint64_t v33 = (unsigned __int8 *)v27[2];
                }
                if ((v29 & 0x80) != 0)
                {
                  if (memcmp(*v26, v33, v25[3])) {
                    break;
                  }
                }
                else if (*((unsigned char *)v25 + 39))
                {
                  while (*(unsigned __int8 *)v26 == *v33)
                  {
                    double v26 = (const void **)((char *)v26 + 1);
                    ++v33;
                    if (!--v29) {
                      goto LABEL_54;
                    }
                  }
                  break;
                }
LABEL_54:
                int v34 = *((_DWORD *)v25 + 12);
                if (v34 != *((_DWORD *)v28 + 12)
                  || v34 != -1 && !sub_4027D0(v34, (double *)v25 + 5, (double *)v28 + 5))
                {
                  break;
                }
                double v25 = (uint64_t *)*v25;
                if (!v25) {
                  goto LABEL_58;
                }
              }
            }
            v21 += 12;
            if (v21 == v22)
            {
              double v21 = v22;
              long long v7 = v69;
              BOOL v47 = v22 == v84;
              uint64_t v4 = v19;
              if (v47) {
                goto LABEL_59;
              }
              goto LABEL_34;
            }
          }
        }
        uint64_t v4 = v19;
LABEL_59:
        BOOL v9 = v18;
        if (sub_723EC(2u))
        {
          sub_6BAC((uint64_t)__dst);
          double v35 = sub_188FC78(__dst, (uint64_t)"Cost function ", 14);
          int v36 = *((char *)v16 + 39);
          if (v36 >= 0) {
            uint64_t v37 = (uint64_t)(v16 + 2);
          }
          else {
            uint64_t v37 = v16[2];
          }
          if (v36 >= 0) {
            uint64_t v38 = *((unsigned __int8 *)v16 + 39);
          }
          else {
            uint64_t v38 = v16[3];
          }
          double v39 = sub_188FC78(v35, v37, v38);
          double v40 = sub_188FC78(v39, (uint64_t)" (", 2);
          std::ostream::operator<<();
          sub_188FC78(v40, (uint64_t)") not preprocessed.", 19);
          std::stringbuf::str();
          sub_7246C((uint64_t *)&v72, 2u);
          if (v73 < 0) {
            operator delete(v72);
          }
          __dst[0] = v67;
          *(void **)((char *)__dst + *((void *)v67 - 3)) = v66;
          if (v87 < 0) {
            operator delete(v86);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        uint64_t v42 = *(void *)(a1 + 40);
        uint64_t v41 = *(void *)(a1 + 48);
        __dst[0] = &v74;
        sub_F0D964(a1, &v74, (uint64_t)&unk_20F06E0, (_DWORD **)__dst)[3] = 0xA3A0FD5C5F02A3A1 * ((v41 - v42) >> 3);
        uint64_t v44 = *(void *)(a1 + 40);
        uint64_t v43 = *(void *)(a1 + 48);
        __dst[0] = v16 + 2;
        sub_E28A9C((uint64_t)v7, (uint64_t)(v16 + 2), (uint64_t)&unk_20F06E0, (long long **)__dst)[5] = 0xA3A0FD5C5F02A3A1 * ((v43 - v44) >> 3);
        unint64_t v45 = *(void *)(a1 + 48);
        if (v45 >= *(void *)(a1 + 56))
        {
          uint64_t v48 = sub_F0FD34(v68, &v75, (uint64_t)(v16 + 2), (int *)&v74);
        }
        else
        {
          if (*((char *)v16 + 39) < 0)
          {
            sub_4200(__dst, (void *)v16[2], v16[3]);
          }
          else
          {
            *(_OWORD *)__dst = *((_OWORD *)v16 + 1);
            __dst[2] = (void *)v16[4];
          }
          sub_F6CDC4(v45, &v75, (uint64_t *)__dst, v74);
          if (SHIBYTE(__dst[2]) < 0) {
            operator delete(__dst[0]);
          }
          uint64_t v48 = v45 + 776;
          *(void *)(a1 + 48) = v45 + 776;
        }
        *(void *)(a1 + 48) = v48;
LABEL_85:
        __dst[0] = v16 + 2;
        double v49 = sub_7FCB8((uint64_t)__p, (uint64_t)(v16 + 2), (uint64_t)&unk_20F06E0, (long long **)__dst);
        double v50 = v49;
        if (v49[8])
        {
          uint64_t v51 = (void **)v49[7];
          if (v51)
          {
            do
            {
              uint64_t v59 = (void **)*v51;
              sub_55198((uint64_t)(v51 + 5));
              if (*((char *)v51 + 39) < 0) {
                operator delete(v51[2]);
              }
              operator delete(v51);
              uint64_t v51 = v59;
            }
            while (v59);
          }
          unsigned int v50[7] = 0;
          uint64_t v52 = v50[6];
          if (v52)
          {
            for (uint64_t i = 0; i != v52; ++i)
              *(void *)(v50[5] + 8 * i) = 0;
          }
          v50[8] = 0;
        }
        double v54 = v75;
        double v75 = 0;
        uint64_t v55 = (void *)v50[5];
        v50[5] = (uint64_t)v54;
        if (v55) {
          operator delete(v55);
        }
        unint64_t v56 = v76;
        double v46 = v77;
        unsigned int v50[7] = (uint64_t)v77;
        v50[6] = v56;
        unint64_t v76 = 0;
        uint64_t v57 = v78;
        v50[8] = v78;
        *((_DWORD *)v50 + 18) = v79;
        std::string v15 = v70;
        if (v57)
        {
          unint64_t v58 = *((void *)v46 + 1);
          if ((v56 & (v56 - 1)) != 0)
          {
            if (v58 >= v56) {
              v58 %= v56;
            }
          }
          else
          {
            v58 &= v56 - 1;
          }
          double v46 = 0;
          *(void *)(v50[5] + 8 * v58) = v50 + 7;
          double v77 = 0;
          uint64_t v78 = 0;
        }
        ++v71;
        if (!v46) {
          goto LABEL_103;
        }
        do
        {
LABEL_106:
          uint64_t v61 = *(char **)v46;
          sub_55198((uint64_t)(v46 + 40));
          if (v46[39] < 0) {
            operator delete(*((void **)v46 + 2));
          }
          operator delete(v46);
          double v46 = v61;
        }
        while (v61);
      }
      else
      {
        double v46 = v77;
        if (v77) {
          goto LABEL_106;
        }
      }
LABEL_103:
      uint64_t v60 = v75;
      double v75 = 0;
      if (v60) {
        operator delete(v60);
      }
      goto LABEL_26;
    }
LABEL_22:
    if (!v71)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      sub_5E5C(__dst, "processing of cost functions json failed, parents inconsistent");
      uint64_t v65 = (void *)sub_2F404((uint64_t)exception, (long long *)__dst);
    }
  }
  sub_F0BA98(a1);
  sub_80150((int)__p, (char *)v81[0]);
  uint64_t v62 = __p[0];
  __p[0] = 0;
  if (v62) {
    operator delete(v62);
  }
  __dst[0] = &v83;
  sub_F0CDB4((void ***)__dst);
  return a1;
}

void sub_F0B23C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a37 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a43);
  double v50 = *a10;
  if (*a10)
  {
    v48[19] = v50;
    operator delete(v50);
    sub_3A4C2C(a17);
    uint64_t v51 = (void *)v48[8];
    if (!v51)
    {
LABEL_5:
      sub_F0BBC4(a15);
      sub_12168((uint64_t)v48);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    sub_3A4C2C(a17);
    uint64_t v51 = (void *)v48[8];
    if (!v51) {
      goto LABEL_5;
    }
  }
  v48[9] = v51;
  operator delete(v51);
  sub_F0BBC4(a15);
  sub_12168((uint64_t)v48);
  _Unwind_Resume(a1);
}

void sub_F0B400(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = a2;
  BYTE7(v71) = 14;
  strcpy((char *)__p, "cost_functions");
  double v5 = sub_58070(a2, (uint64_t)__p);
  if (v5 && *((_DWORD *)v5 + 12) == 2) {
    uint64_t v4 = (void *)v5[5];
  }
  if (SBYTE7(v71) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  if (v7 != v6)
  {
    uint64_t v8 = v7 - 768;
    do
    {
      sub_381A68((void *)(v8 + 24));
      if (*(char *)(v8 + 23) < 0) {
        operator delete(*(void **)v8);
      }
      uint64_t v9 = v8 - 8;
      v8 -= 776;
    }
    while (v9 != v6);
  }
  *(void *)(a1 + 48) = v6;
  *(_OWORD *)__p = 0u;
  long long v71 = 0u;
  int v72 = 1065353216;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  unint64_t v69 = 0;
  uint64_t v68 = sub_6E6EC((char **)&v67, (uint64_t)&xmmword_25FCBD8);
LABEL_13:
  if (*((void *)&v71 + 1) < v4[3])
  {
    double v10 = (uint64_t *)v4[2];
    if (!v10) {
      goto LABEL_89;
    }
    int v11 = 0;
    while (1)
    {
      double v12 = (const void **)(v10 + 2);
      sub_F05C7C((uint64_t)(v10 + 2), v4, __p, (uint64_t)&v63);
      if (v65) {
        break;
      }
LABEL_61:
      double v35 = v64;
      if (v64)
      {
        do
        {
          uint64_t v37 = (void **)*v35;
          sub_55198((uint64_t)(v35 + 5));
          if (*((char *)v35 + 39) < 0) {
            operator delete(v35[2]);
          }
          operator delete(v35);
          double v35 = v37;
        }
        while (v37);
      }
      int v36 = (void *)v63;
      *(void *)&long long v63 = 0;
      if (v36) {
        operator delete(v36);
      }
      double v10 = (uint64_t *)*v10;
      if (!v10)
      {
        if (v11) {
          goto LABEL_13;
        }
LABEL_89:
        exception = __cxa_allocate_exception(0x40uLL);
        sub_5E5C(&v63, "initial processing of cost functions json failed, parents inconsistent");
        uint64_t v59 = (void *)sub_2F404((uint64_t)exception, &v63);
      }
    }
    v73[0] = (long long *)(v10 + 2);
    long long v13 = sub_7FCB8((uint64_t)__p, (uint64_t)(v10 + 2), (uint64_t)&unk_20F06E0, v73);
    double v14 = v13;
    if (v13[8])
    {
      std::string v15 = (void **)v13[7];
      if (v15)
      {
        do
        {
          uint64_t v24 = (void **)*v15;
          sub_55198((uint64_t)(v15 + 5));
          if (*((char *)v15 + 39) < 0) {
            operator delete(v15[2]);
          }
          operator delete(v15);
          std::string v15 = v24;
        }
        while (v24);
      }
      v14[7] = 0;
      uint64_t v16 = v14[6];
      if (v16)
      {
        for (uint64_t i = 0; i != v16; ++i)
          *(void *)(v14[5] + 8 * i) = 0;
      }
      v14[8] = 0;
    }
    uint64_t v18 = v63;
    *(void *)&long long v63 = 0;
    uint64_t v19 = (void *)v14[5];
    v14[5] = v18;
    if (v19) {
      operator delete(v19);
    }
    unint64_t v20 = *((void *)&v63 + 1);
    double v21 = v64;
    v14[7] = (uint64_t)v64;
    v14[6] = v20;
    *((void *)&v63 + 1) = 0;
    uint64_t v22 = v65;
    v14[8] = v65;
    *((_DWORD *)v14 + 18) = v66;
    if (v22)
    {
      unint64_t v23 = (unint64_t)v21[1];
      if ((v20 & (v20 - 1)) != 0)
      {
        if (v23 >= v20) {
          v23 %= v20;
        }
      }
      else
      {
        v23 &= v20 - 1;
      }
      *(void *)(v14[5] + 8 * v23) = v14 + 7;
      uint64_t v64 = 0;
      uint64_t v65 = 0;
    }
    unint64_t v25 = v10[3];
    if (*((char *)v10 + 39) >= 0) {
      uint64_t v26 = *((unsigned __int8 *)v10 + 39);
    }
    else {
      uint64_t v26 = v10[3];
    }
    uint64_t v27 = byte_25FCBEF;
    if (byte_25FCBEF < 0) {
      uint64_t v27 = *((void *)&xmmword_25FCBD8 + 1);
    }
    if (v26 == v27)
    {
      if (byte_25FCBEF >= 0) {
        double v28 = &xmmword_25FCBD8;
      }
      else {
        double v28 = (long long *)xmmword_25FCBD8;
      }
      if ((*((unsigned char *)v10 + 39) & 0x80) != 0)
      {
        uint64_t v33 = (void *)*v12;
        if (memcmp(*v12, v28, v10[3]))
        {
          uint64_t v31 = v68;
          if ((unint64_t)v68 < v69) {
            goto LABEL_57;
          }
          goto LABEL_55;
        }
      }
      else if (*((unsigned char *)v10 + 39))
      {
        uint64_t v29 = (unsigned __int8 *)(v10 + 2);
        uint64_t v30 = *((unsigned __int8 *)v10 + 39);
        while (*v29 == *(unsigned __int8 *)v28)
        {
          ++v29;
          double v28 = (long long *)((char *)v28 + 1);
          if (!--v30) {
            goto LABEL_60;
          }
        }
        goto LABEL_50;
      }
LABEL_60:
      ++v11;
      goto LABEL_61;
    }
LABEL_50:
    uint64_t v31 = v68;
    if ((unint64_t)v68 < v69)
    {
      if ((*((unsigned char *)v10 + 39) & 0x80) == 0)
      {
        long long v32 = *(_OWORD *)v12;
        *((void *)v68 + 2) = v10[4];
        *(_OWORD *)uint64_t v31 = v32;
LABEL_58:
        int v34 = v31 + 24;
        goto LABEL_59;
      }
      uint64_t v33 = (void *)*v12;
LABEL_57:
      sub_4200(v31, v33, v25);
      goto LABEL_58;
    }
LABEL_55:
    int v34 = sub_6E6EC((char **)&v67, (uint64_t)(v10 + 2));
LABEL_59:
    uint64_t v68 = v34;
    goto LABEL_60;
  }
  uint64_t v38 = (const void **)v68;
  double v39 = (char *)v67 + 24;
  unint64_t v40 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((v68 - ((unsigned char *)v67 + 24)) >> 3));
  BOOL v41 = v68 == (char *)v67 + 24;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if (v41) {
    uint64_t v42 = 0;
  }
  else {
    uint64_t v42 = v40;
  }
  sub_6EA30((uint64_t)v39, v38, (uint64_t)v73, v42, 1);
  uint64_t v44 = (long long *)v67;
  uint64_t v43 = (long long *)v68;
  if (v67 != v68)
  {
    do
    {
      unint64_t v45 = sub_7F5D8(__p, (uint64_t)v44) + 5;
      unsigned int v46 = sub_F05FDC(a3, v45);
      LODWORD(v63) = v46;
      unsigned int v47 = *(_DWORD *)(a1 + 96);
      if (v47 <= v46) {
        unsigned int v47 = v46;
      }
      *(_DWORD *)(a1 + 96) = v47;
      uint64_t v48 = *(unsigned int **)(a4 + 8);
      if ((unint64_t)v48 >= *(void *)(a4 + 16))
      {
        double v49 = sub_F0E4A0((void **)a4, &v63, (uint64_t)v45);
        uint64_t v50 = a4;
      }
      else
      {
        *uint64_t v48 = v46;
        sub_54214((uint64_t)(v48 + 2), (uint64_t)v45);
        double v49 = (char *)(v48 + 12);
        uint64_t v50 = a4;
        *(void *)(a4 + 8) = v48 + 12;
      }
      *(void *)(v50 + 8) = v49;
      uint64_t v52 = *(void *)(a1 + 40);
      uint64_t v51 = *(void *)(a1 + 48);
      v73[0] = v44;
      sub_E28A9C(a1 + 104, (uint64_t)v44, (uint64_t)&unk_20F06E0, v73)[5] = 0xA3A0FD5C5F02A3A1 * ((v51 - v52) >> 3);
      uint64_t v54 = *(void *)(a1 + 40);
      uint64_t v53 = *(void *)(a1 + 48);
      v73[0] = &v63;
      sub_F0D964(a1, (unsigned int *)&v63, (uint64_t)&unk_20F06E0, (_DWORD **)v73)[3] = 0xA3A0FD5C5F02A3A1
                                                                                     * ((v53 - v54) >> 3);
      sub_F0C2A4((uint64_t *)(a1 + 40), v45, (uint64_t)v44, (int *)&v63);
      uint64_t v44 = (long long *)((char *)v44 + 24);
    }
    while (v44 != v43);
    uint64_t v44 = (long long *)v67;
  }
  if (v44)
  {
    uint64_t v55 = (long long *)v68;
    unint64_t v56 = v44;
    if (v68 != (char *)v44)
    {
      do
      {
        if (*((char *)v55 - 1) < 0) {
          operator delete(*((void **)v55 - 3));
        }
        uint64_t v55 = (long long *)((char *)v55 - 24);
      }
      while (v55 != v44);
      unint64_t v56 = v67;
    }
    uint64_t v68 = (char *)v44;
    operator delete(v56);
  }
  sub_80150((int)__p, (char *)v71);
  uint64_t v57 = __p[0];
  __p[0] = 0;
  if (v57) {
    operator delete(v57);
  }
}

void sub_F0B9E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  a13 = a11;
  sub_F0CDB4((void ***)&a13);
  sub_1A668(&a21);
  sub_7EC38((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void sub_F0BA98(uint64_t a1)
{
  for (uint64_t i = *(uint64_t **)(a1 + 16); i; uint64_t i = (uint64_t *)*i)
    sub_745A4(a1 + 64, (_DWORD *)i + 4);
  unint64_t v3 = *(unsigned int **)(a1 + 64);
  uint64_t v4 = *(char **)(a1 + 72);
  unint64_t v5 = 126 - 2 * __clz((v4 - (char *)v3) >> 2);
  if (v4 == (char *)v3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v5;
  }
  sub_F0E98C(v3, v4, (uint64_t)&v15, v6, 1);
  uint64_t v7 = *(void *)(a1 + 144);
  unint64_t v8 = ((*(_DWORD *)(a1 + 96) + 1) * (*(_DWORD *)(a1 + 96) + 1));
  unint64_t v9 = (*(void *)(a1 + 152) - v7) >> 2;
  if (v8 <= v9)
  {
    if (v8 < v9) {
      *(void *)(a1 + 152) = v7 + 4 * v8;
    }
  }
  else
  {
    sub_4394C(a1 + 144, v8 - v9);
  }
  double v10 = *(_DWORD **)(a1 + 40);
  int v11 = *(_DWORD **)(a1 + 48);
  while (v10 != v11)
  {
    double v12 = *(_DWORD **)(a1 + 40);
    for (uint64_t j = *(_DWORD **)(a1 + 48); v12 != j; v12 += 194)
    {
      int v14 = sub_F0C380((uint64_t)v10, (uint64_t)v12);
      *(_DWORD *)sub_F0CAD0((void *)(a1 + 144), (*v10 + *v10 * *(_DWORD *)(a1 + 96) + *v12)) = v14;
    }
    v10 += 194;
  }
}

void **sub_F0BBC4(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    unint64_t v3 = a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      uint64_t v5 = (uint64_t)v3 - 768;
      do
      {
        sub_381A68((void *)(v5 + 24));
        if (*(char *)(v5 + 23) < 0) {
          operator delete(*(void **)v5);
        }
        uint64_t v6 = (void *)(v5 - 8);
        v5 -= 776;
      }
      while (v6 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_F0BC4C(void *a1, unsigned int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    goto LABEL_24;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (v2.i32[0] - 1) & v3;
  }
  uint64_t v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6 || (uint64_t v7 = *v6) == 0) {
LABEL_24:
  }
    sub_5AE8("unordered_map::at: key not found");
  if (v4.u32[0] < 2uLL)
  {
    uint64_t v8 = *(void *)&v2 - 1;
    while (1)
    {
      uint64_t v10 = v7[1];
      if (v10 == v3)
      {
        if (*((_DWORD *)v7 + 4) == v3) {
          goto LABEL_21;
        }
      }
      else if ((v10 & v8) != v5)
      {
        goto LABEL_24;
      }
      uint64_t v7 = (uint64_t *)*v7;
      if (!v7) {
        goto LABEL_24;
      }
    }
  }
  while (1)
  {
    unint64_t v9 = v7[1];
    if (v9 == v3) {
      break;
    }
    if (v9 >= *(void *)&v2) {
      v9 %= *(void *)&v2;
    }
    if (v9 != v5) {
      goto LABEL_24;
    }
LABEL_11:
    uint64_t v7 = (uint64_t *)*v7;
    if (!v7) {
      goto LABEL_24;
    }
  }
  if (*((_DWORD *)v7 + 4) != v3) {
    goto LABEL_11;
  }
LABEL_21:
  int v11 = a1 + 5;
  unint64_t v12 = v7[3];

  return sub_F0BD58(v11, v12);
}

uint64_t sub_F0BD58(void *a1, unint64_t a2)
{
  if (0xA3A0FD5C5F02A3A1 * ((uint64_t)(a1[1] - *a1) >> 3) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    uint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, 0xA3A0FD5C5F02A3A1 * ((uint64_t)(a1[1] - *a1) >> 3));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v10 = &v15;
    }
    else {
      uint64_t v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    unint64_t v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    int v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 776 * a2;
}

void sub_F0BEB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

uint64_t sub_F0BF98(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = sub_E2886C((void *)(a1 + 104), a2);
  if (!v3) {
    return *(void *)(a1 + 40);
  }
  unint64_t v4 = v3[5];

  return sub_F0BD58((void *)(a1 + 40), v4);
}

uint64_t sub_F0BFF0(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unint64_t v4 = *(unsigned int **)(a1 + 64);
  unint64_t v5 = *(unsigned int **)(a1 + 72);
  if (v4 != v5)
  {
    uint64_t v8 = (void *)(a1 + 144);
    while (*v4 != a2)
    {
      if ((*a3 & *(_DWORD *)sub_F0C094(v8, a2 + a2 * *(_DWORD *)(a1 + 96) + *v4)) == 0) {
        return *v4;
      }
      if (++v4 == v5) {
        return a2;
      }
    }
  }
  return a2;
}

uint64_t sub_F0C094(void *a1, unint64_t a2)
{
  if (a2 >= (uint64_t)(a1[1] - *a1) >> 2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    uint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, (uint64_t)(a1[1] - *a1) >> 2);
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v10 = &v15;
    }
    else {
      uint64_t v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    unint64_t v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    int v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 4 * a2;
}

void sub_F0C1C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

uint64_t sub_F0C2A4(uint64_t *a1, void *a2, uint64_t a3, int *a4)
{
  unint64_t v7 = a1[1];
  if (v7 >= a1[2])
  {
    uint64_t v8 = sub_F102F0(a1, a2, a3, a4);
  }
  else
  {
    if (*(char *)(a3 + 23) < 0)
    {
      sub_4200(__p, *(void **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a3;
      uint64_t v11 = *(void *)(a3 + 16);
    }
    sub_F6CDC4(v7, a2, (uint64_t *)__p, *a4);
    if (SHIBYTE(v11) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v8 = v7 + 776;
    a1[1] = v7 + 776;
  }
  a1[1] = v8;
  return v8 - 776;
}

void sub_F0C358(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_F0C360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  *(void *)(v14 + 8) = v15;
  _Unwind_Resume(exception_object);
}

uint64_t sub_F0C380(uint64_t a1, uint64_t a2)
{
  double v4 = *(double *)(a1 + 128);
  double v5 = *(double *)(a2 + 128);
  double v6 = vabdd_f64(v4, v5);
  if (v4 != v5 && v6 >= 2.22044605e-16) {
    goto LABEL_23;
  }
  double v8 = *(double *)(a1 + 136);
  double v9 = *(double *)(a2 + 136);
  double v10 = vabdd_f64(v8, v9);
  BOOL v11 = v8 == v9 || v10 < 2.22044605e-16;
  if (!v11
    || ((v12 = *(double *)(a1 + 144), v13 = *(double *)(a2 + 144), double v14 = vabdd_f64(v12, v13), v12 != v13)
      ? (BOOL v15 = v14 < 2.22044605e-16)
      : (BOOL v15 = 1),
        !v15
     || *(_DWORD *)(a1 + 448) != *(_DWORD *)(a2 + 448)
     || *(_DWORD *)(a1 + 452) != *(_DWORD *)(a2 + 452)
     || *(void *)(a1 + 456) != *(void *)(a2 + 456)
     || *(unsigned __int8 *)(a1 + 570) != *(unsigned __int8 *)(a2 + 570)
     || (uint64_t v16 = 0, *(unsigned char *)(a1 + 570))
     && (double v17 = *(double *)(a1 + 576), v18 = *(double *)(a2 + 576), v17 != v18)
     && vabdd_f64(v17, v18) >= 2.22044605e-16))
  {
LABEL_23:
    uint64_t v16 = 1;
  }
  uint64_t v20 = *(void *)(a1 + 504);
  uint64_t v19 = *(void *)(a1 + 512);
  uint64_t v21 = *(void *)(a2 + 504);
  uint64_t v22 = *(void *)(a2 + 512) - v21;
  if (v19 - v20 != v22)
  {
LABEL_32:
    uint64_t v16 = v16 | 2;
    goto LABEL_33;
  }
  if (v20 != v19)
  {
    uint64_t v23 = *(void *)(a2 + 504);
    uint64_t v24 = *(void *)(a1 + 504);
    while (*(_DWORD *)v24 == *(_DWORD *)v23
         && *(_DWORD *)(v24 + 4) == *(_DWORD *)(v23 + 4)
         && *(void *)(v24 + 8) == *(void *)(v23 + 8))
    {
      v24 += 16;
      v23 += 16;
      if (v24 == v19) {
        goto LABEL_33;
      }
    }
    goto LABEL_32;
  }
LABEL_33:
  double v25 = *(double *)(a1 + 224);
  double v26 = *(double *)(a2 + 224);
  double v27 = vabdd_f64(v25, v26);
  if (v25 != v26 && v27 >= 2.22044605e-16) {
    goto LABEL_49;
  }
  double v29 = *(double *)(a1 + 232);
  double v30 = *(double *)(a2 + 232);
  double v31 = vabdd_f64(v29, v30);
  BOOL v32 = v29 == v30 || v31 < 2.22044605e-16;
  if (!v32
    || ((double v33 = *(double *)(a1 + 240), v34 = *(double *)(a2 + 240), v35 = vabdd_f64(v33, v34), v33 != v34)
      ? (BOOL v36 = v35 < 2.22044605e-16)
      : (BOOL v36 = 1),
        !v36 || *(unsigned __int8 *)(a1 + 416) != *(unsigned __int8 *)(a2 + 416)))
  {
LABEL_49:
    uint64_t v16 = v16 | 0x20;
  }
  if (v19 - v20 != v22) {
    goto LABEL_70;
  }
  if (v20 != v19)
  {
    while (*(_DWORD *)v20 == *(_DWORD *)v21
         && *(_DWORD *)(v20 + 4) == *(_DWORD *)(v21 + 4)
         && *(void *)(v20 + 8) == *(void *)(v21 + 8))
    {
      v20 += 16;
      v21 += 16;
      if (v20 == v19) {
        goto LABEL_56;
      }
    }
    goto LABEL_70;
  }
LABEL_56:
  double v37 = *(double *)(a1 + 200);
  double v38 = *(double *)(a2 + 200);
  double v39 = vabdd_f64(v37, v38);
  if (v37 != v38 && v39 >= 2.22044605e-16) {
    goto LABEL_70;
  }
  double v41 = *(double *)(a1 + 208);
  double v42 = *(double *)(a2 + 208);
  double v43 = vabdd_f64(v41, v42);
  BOOL v44 = v41 == v42 || v43 < 2.22044605e-16;
  if (!v44
    || ((double v45 = *(double *)(a1 + 216), v46 = *(double *)(a2 + 216), v47 = vabdd_f64(v45, v46), v45 != v46)
      ? (BOOL v48 = v47 < 2.22044605e-16)
      : (BOOL v48 = 1),
        !v48))
  {
LABEL_70:
    uint64_t v16 = v16 | 4;
  }
  if (*(unsigned __int8 *)(a1 + 752) != *(unsigned __int8 *)(a2 + 752)
    || *(unsigned __int8 *)(a1 + 753) != *(unsigned __int8 *)(a2 + 753)
    || *(_DWORD *)(a1 + 760) != *(_DWORD *)(a2 + 760)
    || *(_DWORD *)(a1 + 764) != *(_DWORD *)(a2 + 764)
    || *(void *)(a1 + 768) != *(void *)(a2 + 768))
  {
    uint64_t v16 = v16 | 8;
  }
  double v49 = *(double *)(a1 + 40);
  double v50 = *(double *)(a2 + 40);
  double v51 = vabdd_f64(v49, v50);
  if (v49 != v50 && v51 >= 2.22044605e-16) {
    goto LABEL_124;
  }
  double v53 = *(double *)(a1 + 48);
  double v54 = *(double *)(a2 + 48);
  double v55 = vabdd_f64(v53, v54);
  if (v53 != v54 && v55 >= 2.22044605e-16) {
    goto LABEL_124;
  }
  double v57 = *(double *)(a1 + 56);
  double v58 = *(double *)(a2 + 56);
  double v59 = vabdd_f64(v57, v58);
  if (v57 != v58 && v59 >= 2.22044605e-16) {
    goto LABEL_124;
  }
  double v61 = *(double *)(a1 + 64);
  double v62 = *(double *)(a2 + 64);
  double v63 = vabdd_f64(v61, v62);
  BOOL v64 = v61 == v62 || v63 < 2.22044605e-16;
  if (!v64
    || (double v65 = *(double *)(a1 + 72), v66 = *(double *)(a2 + 72), v65 != v66) && vabdd_f64(v65, v66) >= 2.22044605e-16
    || (double v67 = *(double *)(a1 + 80), v68 = *(double *)(a2 + 80), v67 != v68) && vabdd_f64(v67, v68) >= 2.22044605e-16
    || *(_DWORD *)(a1 + 112) != *(_DWORD *)(a2 + 112)
    || *(_DWORD *)(a1 + 116) != *(_DWORD *)(a2 + 116)
    || *(void *)(a1 + 120) != *(void *)(a2 + 120)
    || (double v70 = *(double **)(a1 + 88),
        unint64_t v69 = *(double **)(a1 + 96),
        long long v71 = *(double **)(a2 + 88),
        (char *)v69 - (char *)v70 != *(void *)(a2 + 96) - (void)v71))
  {
LABEL_124:
    uint64_t v16 = v16 | 0x40;
    goto LABEL_125;
  }
  if (v70 != v69)
  {
    while (*v70 == *v71)
    {
      double v72 = v70[1];
      double v73 = v71[1];
      double v74 = vabdd_f64(v72, v73);
      if (v72 != v73 && v74 >= 2.22044605e-16) {
        break;
      }
      double v76 = v70[2];
      double v77 = v71[2];
      double v78 = vabdd_f64(v76, v77);
      if (v76 != v77 && v78 >= 2.22044605e-16) {
        break;
      }
      double v80 = v70[3];
      double v81 = v71[3];
      double v82 = vabdd_f64(v80, v81);
      if (v80 != v81 && v82 >= 2.22044605e-16) {
        break;
      }
      v70 += 4;
      v71 += 4;
      if (v70 == v69) {
        goto LABEL_125;
      }
    }
    goto LABEL_124;
  }
LABEL_125:
  double v84 = *(double *)(a1 + 296);
  double v85 = *(double *)(a2 + 296);
  double v86 = vabdd_f64(v84, v85);
  if (v84 != v85 && v86 >= 2.22044605e-16) {
    goto LABEL_143;
  }
  double v88 = *(double *)(a1 + 304);
  double v89 = *(double *)(a2 + 304);
  double v90 = vabdd_f64(v88, v89);
  BOOL v91 = v88 == v89 || v90 < 2.22044605e-16;
  if (!v91
    || ((double v92 = *(double *)(a1 + 312), v93 = *(double *)(a2 + 312), v94 = vabdd_f64(v92, v93), v92 != v93)
      ? (BOOL v95 = v94 < 2.22044605e-16)
      : (BOOL v95 = 1),
        !v95
     || *(_DWORD *)(a1 + 464) != *(_DWORD *)(a2 + 464)
     || *(_DWORD *)(a1 + 468) != *(_DWORD *)(a2 + 468)
     || *(void *)(a1 + 472) != *(void *)(a2 + 472)))
  {
LABEL_143:
    uint64_t v16 = v16 | 0x100;
  }
  double v96 = *(double *)(a1 + 32);
  double v97 = *(double *)(a2 + 32);
  double v98 = vabdd_f64(v96, v97);
  if (v96 != v97 && v98 >= 2.22044605e-16) {
    return v16 | 0x10;
  }
  uint64_t v101 = *(void *)(a1 + 424);
  uint64_t v100 = *(void *)(a1 + 432);
  uint64_t v102 = *(void *)(a2 + 424);
  if (v100 - v101 != *(void *)(a2 + 432) - v102) {
    return v16 | 0x10;
  }
  if (v101 != v100)
  {
    while (*(_DWORD *)v101 == *(_DWORD *)v102
         && *(_DWORD *)(v101 + 8) == *(_DWORD *)(v102 + 8)
         && *(_DWORD *)(v101 + 12) == *(_DWORD *)(v102 + 12)
         && *(void *)(v101 + 16) == *(void *)(v102 + 16))
    {
      v101 += 24;
      v102 += 24;
      if (v101 == v100) {
        goto LABEL_156;
      }
    }
    return v16 | 0x10;
  }
LABEL_156:
  double v104 = *(double **)(a1 + 272);
  double v103 = *(double **)(a1 + 280);
  double v105 = *(double **)(a2 + 272);
  if ((char *)v103 - (char *)v104 != *(void *)(a2 + 280) - (void)v105) {
    return v16 | 0x10;
  }
  if (v104 != v103)
  {
    while (1)
    {
      double v106 = vabdd_f64(*v104, *v105);
      if (*v104 != *v105 && v106 >= 2.22044605e-16) {
        break;
      }
      double v108 = v104[1];
      double v109 = v105[1];
      double v110 = vabdd_f64(v108, v109);
      if (v108 != v109 && v110 >= 2.22044605e-16) {
        break;
      }
      double v112 = v104[2];
      double v113 = v105[2];
      double v114 = vabdd_f64(v112, v113);
      if (v112 != v113 && v114 >= 2.22044605e-16) {
        break;
      }
      v104 += 3;
      v105 += 3;
      if (v104 == v103) {
        goto LABEL_174;
      }
    }
    return v16 | 0x10;
  }
LABEL_174:
  uint64_t v117 = *(void *)(a1 + 480);
  uint64_t v116 = *(void *)(a1 + 488);
  uint64_t v118 = *(void *)(a2 + 480);
  if (v116 - v117 != *(void *)(a2 + 488) - v118) {
    return v16 | 0x10;
  }
  if (v117 != v116)
  {
    while (*(_DWORD *)v117 == *(_DWORD *)v118
         && *(_DWORD *)(v117 + 4) == *(_DWORD *)(v118 + 4)
         && *(void *)(v117 + 8) == *(void *)(v118 + 8))
    {
      v117 += 16;
      v118 += 16;
      if (v117 == v116) {
        goto LABEL_180;
      }
    }
    return v16 | 0x10;
  }
LABEL_180:
  if (*(unsigned __int8 *)(a1 + 568) != *(unsigned __int8 *)(a2 + 568)
    || *(unsigned __int8 *)(a1 + 569) != *(unsigned __int8 *)(a2 + 569)
    || (sub_F0D054((double **)(a1 + 320), a2 + 320) & 1) != 0
    || (sub_F0D054((double **)(a1 + 344), a2 + 344) & 1) != 0
    || (sub_F0D054((double **)(a1 + 368), a2 + 368) & 1) != 0
    || (sub_F0D0FC((uint64_t *)(a1 + 528), (uint64_t *)(a2 + 528)) & 1) != 0
    || sub_F0D17C((double *)(a1 + 664), (double *)(a2 + 664))
    || *(_DWORD *)(a1 + 736) != *(_DWORD *)(a2 + 736)
    || *(_DWORD *)(a1 + 740) != *(_DWORD *)(a2 + 740)
    || *(void *)(a1 + 744) != *(void *)(a2 + 744)
    || sub_F0D17C((double *)(a1 + 392), (double *)(a2 + 392))
    || *(_DWORD *)(a1 + 552) != *(_DWORD *)(a2 + 552)
    || *(_DWORD *)(a1 + 556) != *(_DWORD *)(a2 + 556)
    || *(void *)(a1 + 560) != *(void *)(a2 + 560)
    || sub_F0D17C((double *)(a1 + 176), (double *)(a2 + 176)))
  {
    return v16 | 0x10;
  }
  return v16;
}

uint64_t sub_F0CAD0(void *a1, unint64_t a2)
{
  if (a2 >= (uint64_t)(a1[1] - *a1) >> 2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    double v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    double v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, (uint64_t)(a1[1] - *a1) >> 2);
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      double v10 = &v15;
    }
    else {
      double v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    double v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    double v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 4 * a2;
}

void sub_F0CC00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

void sub_F0CCE0(void *a1)
{
  char v5 = 6;
  strcpy((char *)v4, "parent");
  uint64_t v2 = sub_57E40(a1, (uint64_t)v4);
  if (v2)
  {
    sub_256F0(a1, v2, (uint64_t)&__p);
    unint64_t v3 = (void **)__p;
    __p = 0;
    if (v3)
    {
      if (v7)
      {
        sub_55198((uint64_t)(v3 + 5));
        if (*((char *)v3 + 39) < 0) {
          operator delete(v3[2]);
        }
      }
      operator delete(v3);
    }
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_F0CD98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_F0CDB4(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    double v4 = (char *)v1[1];
    char v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        double v6 = (void **)*((void *)v4 - 3);
        if (v6)
        {
          do
          {
            double v8 = (void **)*v6;
            sub_55198((uint64_t)(v6 + 5));
            if (*((char *)v6 + 39) < 0) {
              operator delete(v6[2]);
            }
            operator delete(v6);
            double v6 = v8;
          }
          while (v8);
        }
        char v7 = (void *)*((void *)v4 - 5);
        *((void *)v4 - 5) = 0;
        if (v7) {
          operator delete(v7);
        }
        v4 -= 48;
      }
      while (v4 != v2);
      char v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_F0CE8C(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 24) != a2[3]) {
    return 0;
  }
  uint64_t v2 = *(uint64_t **)(a1 + 16);
  if (!v2) {
    return 1;
  }
  while (1)
  {
    double v4 = (const void **)(v2 + 2);
    uint64_t result = (uint64_t)sub_58070(a2, (uint64_t)(v2 + 2));
    if (!result) {
      return result;
    }
    uint64_t v6 = result;
    uint64_t v7 = *((unsigned __int8 *)v2 + 39);
    if ((v7 & 0x80u) == 0) {
      uint64_t v8 = *((unsigned __int8 *)v2 + 39);
    }
    else {
      uint64_t v8 = v2[3];
    }
    uint64_t v9 = *(unsigned __int8 *)(result + 39);
    int v10 = (char)v9;
    if ((v9 & 0x80u) != 0) {
      uint64_t v9 = *(void *)(result + 24);
    }
    if (v8 != v9) {
      return 0;
    }
    if (v10 >= 0) {
      BOOL v11 = (unsigned __int8 *)(result + 16);
    }
    else {
      BOOL v11 = *(unsigned __int8 **)(result + 16);
    }
    if ((v7 & 0x80) != 0)
    {
      if (memcmp(*v4, v11, v2[3])) {
        return 0;
      }
    }
    else if (*((unsigned char *)v2 + 39))
    {
      while (*(unsigned __int8 *)v4 == *v11)
      {
        double v4 = (const void **)((char *)v4 + 1);
        ++v11;
        if (!--v7) {
          goto LABEL_19;
        }
      }
      return 0;
    }
LABEL_19:
    int v12 = *((_DWORD *)v2 + 12);
    if (v12 != *(_DWORD *)(v6 + 48)) {
      return 0;
    }
    if (v12 == -1 || (uint64_t result = sub_4027D0(v12, (double *)v2 + 5, (double *)(v6 + 40)), result))
    {
      uint64_t v2 = (uint64_t *)*v2;
      uint64_t result = 1;
      if (v2) {
        continue;
      }
    }
    return result;
  }
}

uint64_t sub_F0CFBC(double **a1, uint64_t a2)
{
  unint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  double v4 = *(double **)a2;
  if ((char *)v2 - (char *)*a1 == *(void *)(a2 + 8) - *(void *)a2)
  {
    if (v3 == v2) {
      return 0;
    }
    while (1)
    {
      double v5 = vabdd_f64(*v3, *v4);
      if (*v3 != *v4 && v5 >= 2.22044605e-16) {
        break;
      }
      double v7 = v3[1];
      double v8 = v4[1];
      double v9 = vabdd_f64(v7, v8);
      if (v7 != v8 && v9 >= 2.22044605e-16) {
        break;
      }
      double v11 = v3[2];
      double v12 = v4[2];
      double v13 = vabdd_f64(v11, v12);
      if (v11 != v12 && v13 >= 2.22044605e-16) {
        break;
      }
      v3 += 3;
      v4 += 3;
      if (v3 == v2) {
        return 0;
      }
    }
  }
  return 1;
}

uint64_t sub_F0D054(double **a1, uint64_t a2)
{
  unint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  double v4 = *(double **)a2;
  if ((char *)v2 - (char *)*a1 == *(void *)(a2 + 8) - *(void *)a2)
  {
    if (v3 == v2) {
      return 0;
    }
    while (*v3 == *v4)
    {
      double v5 = v3[1];
      double v6 = v4[1];
      double v7 = vabdd_f64(v5, v6);
      if (v5 != v6 && v7 >= 2.22044605e-16) {
        break;
      }
      double v9 = v3[2];
      double v10 = v4[2];
      double v11 = vabdd_f64(v9, v10);
      if (v9 != v10 && v11 >= 2.22044605e-16) {
        break;
      }
      double v13 = v3[3];
      double v14 = v4[3];
      double v15 = vabdd_f64(v13, v14);
      if (v13 != v14 && v15 >= 2.22044605e-16) {
        break;
      }
      v3 += 4;
      v4 += 4;
      if (v3 == v2) {
        return 0;
      }
    }
  }
  return 1;
}

uint64_t sub_F0D0FC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = *a2;
  if (v2 - *a1 == a2[1] - *a2)
  {
    if (v3 == v2) {
      return 0;
    }
    while (*(double *)v3 == *(double *)v4
         && *(_DWORD *)(v3 + 8) == *(_DWORD *)(v4 + 8)
         && *(_DWORD *)(v3 + 12) == *(_DWORD *)(v4 + 12)
         && *(void *)(v3 + 16) == *(void *)(v4 + 16))
    {
      v3 += 24;
      v4 += 24;
      if (v3 == v2) {
        return 0;
      }
    }
  }
  return 1;
}

BOOL sub_F0D17C(double *a1, double *a2)
{
  double v2 = vabdd_f64(*a1, *a2);
  if (*a1 != *a2 && v2 >= 2.22044605e-16) {
    return 1;
  }
  double v4 = a1[1];
  double v5 = a2[1];
  double v6 = vabdd_f64(v4, v5);
  if (v4 != v5 && v6 >= 2.22044605e-16) {
    return 1;
  }
  double v8 = a1[2];
  double v9 = a2[2];
  return vabdd_f64(v8, v9) >= 2.22044605e-16 && v8 != v9;
}

uint64_t sub_F0D1E8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = *a2;
  if (v2 - *a1 == a2[1] - *a2)
  {
    if (v3 == v2) {
      return 0;
    }
    while (*(_DWORD *)v3 == *(_DWORD *)v4
         && *(_DWORD *)(v3 + 4) == *(_DWORD *)(v4 + 4)
         && *(void *)(v3 + 8) == *(void *)(v4 + 8))
    {
      v3 += 16;
      v4 += 16;
      if (v3 == v2) {
        return 0;
      }
    }
  }
  return 1;
}

uint64_t sub_F0D258(uint64_t a1, uint64_t a2)
{
  v4[0] = a1;
  v4[1] = a1 + 1;
  v4[2] = a1 + 2;
  v4[3] = a1 + 3;
  v4[4] = a1 + 4;
  v4[5] = a1 + 8;
  v4[6] = a1 + 16;
  v4[7] = a1 + 24;
  v4[8] = a1 + 32;
  v4[9] = a1 + 40;
  v4[10] = a1 + 48;
  v4[11] = a1 + 72;
  v3[0] = a2;
  v3[1] = a2 + 1;
  v3[2] = a2 + 2;
  v3[3] = a2 + 3;
  v3[4] = a2 + 4;
  v3[5] = a2 + 8;
  v3[6] = a2 + 16;
  v3[7] = a2 + 24;
  v3[8] = a2 + 32;
  v3[9] = a2 + 40;
  v3[10] = a2 + 48;
  v3[11] = a2 + 72;
  return sub_F0D748((uint64_t)&v5, (uint64_t)v4, (uint64_t)v3) ^ 1;
}

BOOL sub_F0D310(double *a1, double *a2)
{
  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2) {
    return 1;
  }
  double v2 = a1[1];
  double v3 = a2[1];
  double v4 = vabdd_f64(v2, v3);
  if (v2 != v3 && v4 >= 2.22044605e-16) {
    return 1;
  }
  double v6 = a1[2];
  double v7 = a2[2];
  double v8 = vabdd_f64(v6, v7);
  if (v6 != v7 && v8 >= 2.22044605e-16) {
    return 1;
  }
  double v10 = a1[3];
  double v11 = a2[3];
  double v12 = vabdd_f64(v10, v11);
  if (v10 != v11 && v12 >= 2.22044605e-16) {
    return 1;
  }
  double v14 = a1[4];
  double v15 = a2[4];
  double v16 = vabdd_f64(v14, v15);
  if (v14 != v15 && v16 >= 2.22044605e-16) {
    return 1;
  }
  double v18 = a1[5];
  double v19 = a2[5];
  if (v18 != v19 && vabdd_f64(v18, v19) >= 2.22044605e-16) {
    return 1;
  }
  double v21 = a1[6];
  double v22 = a2[6];
  return vabdd_f64(v21, v22) >= 2.22044605e-16 && v21 != v22;
}

uint64_t sub_F0D3E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!sub_F0D4F8((uint64_t)&v13, a2, a3)) {
    return 0;
  }
  double v6 = **(double ***)(a2 + 120);
  char v5 = *(double **)(*(void *)(a2 + 120) + 8);
  double v7 = **(double ***)(a3 + 120);
  if ((char *)v5 - (char *)v6 != *(void *)(*(void *)(a3 + 120) + 8) - (void)v7) {
    return 0;
  }
  if (v6 != v5)
  {
    while (*v6 == *v7 && v6[1] == v7[1])
    {
      v6 += 2;
      v7 += 2;
      if (v6 == v5) {
        goto LABEL_10;
      }
    }
    return 0;
  }
LABEL_10:
  uint64_t v10 = **(void **)(a2 + 128);
  uint64_t v9 = *(void *)(*(void *)(a2 + 128) + 8);
  uint64_t v11 = **(void **)(a3 + 128);
  if (v9 - v10 != *(void *)(*(void *)(a3 + 128) + 8) - v11) {
    return 0;
  }
  uint64_t result = 1;
  if (v10 != v9)
  {
    while (*(double *)v10 == *(double *)v11
         && *(_DWORD *)(v10 + 8) == *(_DWORD *)(v11 + 8)
         && *(_DWORD *)(v10 + 12) == *(_DWORD *)(v11 + 12)
         && *(void *)(v10 + 16) == *(void *)(v11 + 16))
    {
      v10 += 24;
      v11 += 24;
      if (v10 == v9) {
        return result;
      }
    }
    return 0;
  }
  return result;
}

BOOL sub_F0D4F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!sub_F0D64C((uint64_t)&v15, (unsigned __int8 **)a2, (unsigned __int8 **)a3)) {
    return 0;
  }
  if (**(unsigned __int8 **)(a2 + 80) != **(unsigned __int8 **)(a3 + 80)) {
    return 0;
  }
  if (**(unsigned __int8 **)(a2 + 88) != **(unsigned __int8 **)(a3 + 88)) {
    return 0;
  }
  if (**(unsigned __int8 **)(a2 + 96) != **(unsigned __int8 **)(a3 + 96)) {
    return 0;
  }
  double v6 = **(double ***)(a2 + 104);
  char v5 = *(double **)(*(void *)(a2 + 104) + 8);
  double v7 = **(double ***)(a3 + 104);
  if ((char *)v5 - (char *)v6 != *(void *)(*(void *)(a3 + 104) + 8) - (void)v7) {
    return 0;
  }
  if (v6 != v5)
  {
    while (*v6 == *v7 && v6[1] == v7[1])
    {
      v6 += 2;
      v7 += 2;
      if (v6 == v5) {
        goto LABEL_13;
      }
    }
    return 0;
  }
LABEL_13:
  uint64_t v10 = **(void **)(a2 + 112);
  uint64_t v9 = *(void *)(*(void *)(a2 + 112) + 8);
  uint64_t v11 = **(void **)(a3 + 112);
  if (v9 - v10 != *(void *)(*(void *)(a3 + 112) + 8) - v11) {
    return 0;
  }
  if (v10 == v9) {
    return 1;
  }
  do
  {
    BOOL result = *(double *)(v10 + 8) == *(double *)(v11 + 8) && *(_DWORD *)v10 == *(_DWORD *)v11;
    v10 += 16;
    v11 += 16;
  }
  while (result && v10 != v9);
  return result;
}

BOOL sub_F0D64C(uint64_t a1, unsigned __int8 **a2, unsigned __int8 **a3)
{
  return **a2 == **a3
      && *a2[1] == *a3[1]
      && *a2[2] == *a3[2]
      && *a2[3] == *a3[3]
      && *a2[4] == *a3[4]
      && *a2[5] == *a3[5]
      && *a2[6] == *a3[6]
      && *a2[7] == *a3[7]
      && *a2[8] == *a3[8]
      && *a2[9] == *a3[9];
}

uint64_t sub_F0D748(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!sub_F0D868((uint64_t)&v12, (unsigned __int8 **)a2, (unsigned __int8 **)a3)) {
    return 0;
  }
  uint64_t v6 = **(void **)(a2 + 80);
  uint64_t v5 = *(void *)(*(void *)(a2 + 80) + 8);
  uint64_t v7 = **(void **)(a3 + 80);
  if (v5 - v6 != *(void *)(*(void *)(a3 + 80) + 8) - v7) {
    return 0;
  }
  if (v6 != v5)
  {
    while (*(_DWORD *)v6 == *(_DWORD *)v7
         && *(_DWORD *)(v6 + 4) == *(_DWORD *)(v7 + 4)
         && *(void *)(v6 + 8) == *(void *)(v7 + 8))
    {
      v6 += 16;
      v7 += 16;
      if (v6 == v5) {
        goto LABEL_8;
      }
    }
    return 0;
  }
LABEL_8:
  uint64_t v9 = **(void **)(a2 + 88);
  uint64_t v8 = *(void *)(*(void *)(a2 + 88) + 8);
  uint64_t v10 = **(void **)(a3 + 88);
  if (v8 - v9 != *(void *)(*(void *)(a3 + 88) + 8) - v10) {
    return 0;
  }
  uint64_t result = 1;
  if (v9 != v8)
  {
    while (*(_DWORD *)v9 == *(_DWORD *)v10
         && *(_DWORD *)(v9 + 4) == *(_DWORD *)(v10 + 4)
         && *(void *)(v9 + 8) == *(void *)(v10 + 8))
    {
      v9 += 16;
      v10 += 16;
      if (v9 == v8) {
        return result;
      }
    }
    return 0;
  }
  return result;
}

BOOL sub_F0D868(uint64_t a1, unsigned __int8 **a2, unsigned __int8 **a3)
{
  return **a2 == **a3
      && *a2[1] == *a3[1]
      && *a2[2] == *a3[2]
      && *a2[3] == *a3[3]
      && *a2[4] == *a3[4]
      && *(double *)a2[5] == *(double *)a3[5]
      && *(double *)a2[6] == *(double *)a3[6]
      && *(double *)a2[7] == *(double *)a3[7]
      && *(double *)a2[8] == *(double *)a3[8]
      && *(double *)a2[9] == *(double *)a3[9];
}

uint64_t *sub_F0D964(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v13 = v11[1];
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == v7) {
                return v11;
              }
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            uint64_t v11 = (uint64_t *)*v11;
            if (!v11) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  char v15 = operator new(0x20uLL);
  *char v15 = 0;
  v15[1] = v7;
  *((_DWORD *)v15 + 4) = **a4;
  v15[3] = 0;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    unint64_t v7 = v4;
  }
  else
  {
    BOOL v18 = 1;
    if (v8 >= 3) {
      BOOL v18 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v8);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t prime = v20;
    }
    else {
      size_t prime = v19;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v8 = *(void *)(a1 + 8);
    }
    if (prime > v8) {
      goto LABEL_36;
    }
    if (prime < v8)
    {
      unint64_t v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (uint8x8_t v23 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        unint64_t v22 = std::__next_prime(v22);
      }
      else
      {
        uint64_t v24 = 1 << -(char)__clz(v22 - 1);
        if (v22 >= 2) {
          unint64_t v22 = v24;
        }
      }
      if (prime <= v22) {
        size_t prime = v22;
      }
      if (prime < v8) {
LABEL_36:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        v7 %= v8;
      }
    }
    else
    {
      unint64_t v7 = (v8 - 1) & v7;
    }
  }
  uint64_t v25 = *(void *)a1;
  double v26 = *(void **)(*(void *)a1 + 8 * v7);
  if (v26)
  {
    *char v15 = *v26;
LABEL_59:
    *double v26 = v15;
    goto LABEL_60;
  }
  *char v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  *(void *)(v25 + 8 * v7) = a1 + 16;
  if (*v15)
  {
    unint64_t v27 = *(void *)(*v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8) {
        v27 %= v8;
      }
    }
    else
    {
      v27 &= v8 - 1;
    }
    double v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_59;
  }
LABEL_60:
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_F0DC5C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_F0DC70(void **a1, void *a2, uint64_t a3, int *a4)
{
  unint64_t v5 = 0x8FD8FD8FD8FD8FD9 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x27027027027027) {
    sub_2E00();
  }
  if (0x1FB1FB1FB1FB1FB2 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v6) {
    unint64_t v6 = 0x1FB1FB1FB1FB1FB2 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if (0x8FD8FD8FD8FD8FD9 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) >= 0x13813813813813) {
    unint64_t v10 = 0x27027027027027;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x27027027027027) {
      sub_188D718();
    }
    uint64_t v11 = (char *)operator new(1680 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v12 = (uint64_t)&v11[1680 * v5];
  uint64_t v25 = &v11[1680 * v10];
  if (*(char *)(a3 + 23) < 0)
  {
    sub_4200(__p, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a3;
    uint64_t v27 = *(void *)(a3 + 16);
  }
  sub_F10670(v12, a2, (uint64_t *)__p, *a4);
  if ((SHIBYTE(v27) & 0x80000000) == 0)
  {
    uint64_t v13 = v12;
    uint64_t v14 = v12 + 1680;
    uint64_t v23 = v12 + 1680;
    float v16 = (char *)*a1;
    char v15 = (char *)a1[1];
    if (v15 != *a1) {
      goto LABEL_16;
    }
LABEL_20:
    double v21 = v15;
    goto LABEL_21;
  }
  operator delete(__p[0]);
  uint64_t v13 = v12;
  uint64_t v14 = v12 + 1680;
  uint64_t v23 = v12 + 1680;
  float v16 = (char *)*a1;
  char v15 = (char *)a1[1];
  if (v15 == *a1) {
    goto LABEL_20;
  }
LABEL_16:
  uint64_t v17 = 0;
  do
  {
    *(_DWORD *)(v13 + v17 - 1680) = *(_DWORD *)&v15[v17 - 1680];
    uint64_t v18 = v13 + v17 - 1672;
    uint64_t v19 = (uint64_t)&v15[v17 - 1672];
    long long v20 = *(_OWORD *)v19;
    *(void *)(v18 + 16) = *(void *)&v15[v17 - 1656];
    *(_OWORD *)uint64_t v18 = v20;
    *(void *)(v19 + 8) = 0;
    *(void *)(v19 + 16) = 0;
    *(void *)uint64_t v19 = 0;
    sub_F0DF78(v13 + v17 - 1648, (uint64_t)&v15[v17 - 1648]);
    v17 -= 1680;
  }
  while (&v15[v17] != v16);
  double v21 = (char *)*a1;
  char v15 = (char *)a1[1];
  v13 += v17;
  uint64_t v14 = v23;
LABEL_21:
  *a1 = (void *)v13;
  a1[1] = (void *)v14;
  a1[2] = v25;
  if (v15 == v21)
  {
    if (v15) {
LABEL_23:
    }
      operator delete(v15);
  }
  else
  {
    do
    {
      uint64_t v24 = v15 - 1680;
      sub_381444((void *)v15 - 206);
      if (*(v15 - 1649) < 0) {
        operator delete(*((void **)v15 - 209));
      }
      v15 -= 1680;
    }
    while (v24 != v21);
    char v15 = v21;
    if (v21) {
      goto LABEL_23;
    }
  }
  return v14;
}

void sub_F0DEC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_F0DF00((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_F0DEDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_F0DF00((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_F0DF00(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 1680;
    sub_381444((void *)(i - 1648));
    if (*(char *)(i - 1649) < 0) {
      operator delete(*(void **)(i - 1672));
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_F0DF78(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 48);
  long long v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  long long v8 = *(_OWORD *)(a2 + 96);
  long long v9 = *(_OWORD *)(a2 + 112);
  long long v10 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v10;
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 112) = v9;
  long long v11 = *(_OWORD *)(a2 + 160);
  long long v12 = *(_OWORD *)(a2 + 176);
  long long v13 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v13;
  *(_OWORD *)(a1 + 160) = v11;
  *(_OWORD *)(a1 + 176) = v12;
  *(void *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a2 + 240) = 0;
  *(_OWORD *)(a2 + 224) = 0u;
  *(void *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a2 + 264) = 0;
  *(_OWORD *)(a2 + 248) = 0u;
  *(void *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(void *)(a2 + 288) = 0;
  *(_OWORD *)(a2 + 272) = 0u;
  uint64_t v14 = *(void *)(a2 + 312);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
  *(void *)(a1 + 312) = v14;
  *(void *)(a1 + 320) = 0;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  *(void *)(a2 + 336) = 0;
  *(_OWORD *)(a2 + 320) = 0u;
  *(void *)(a1 + 360) = 0;
  *(_OWORD *)(a1 + 344) = 0u;
  uint64_t v15 = *(void *)(a2 + 352);
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  *(void *)(a1 + 352) = v15;
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  *(void *)(a2 + 360) = 0;
  *(_OWORD *)(a2 + 344) = 0u;
  *(void *)(a1 + 384) = 0;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
  *(void *)(a1 + 384) = *(void *)(a2 + 384);
  *(void *)(a2 + 384) = 0;
  *(_OWORD *)(a2 + 368) = 0u;
  *(void *)(a1 + 408) = 0;
  *(_OWORD *)(a1 + 392) = 0u;
  uint64_t v16 = *(void *)(a2 + 400);
  *(void *)(a1 + 392) = *(void *)(a2 + 392);
  *(void *)(a1 + 400) = v16;
  *(void *)(a1 + 408) = *(void *)(a2 + 408);
  *(void *)(a2 + 408) = 0;
  *(_OWORD *)(a2 + 392) = 0u;
  memcpy((void *)(a1 + 416), (const void *)(a2 + 416), 0x180uLL);
  *(void *)(a1 + 800) = 0;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 800) = *(_OWORD *)(a2 + 800);
  *(void *)(a1 + 816) = *(void *)(a2 + 816);
  *(_OWORD *)(a2 + 800) = 0u;
  *(void *)(a2 + 816) = 0;
  *(void *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 824) = 0u;
  *(void *)(a1 + 824) = *(void *)(a2 + 824);
  *(void *)(a1 + 832) = *(void *)(a2 + 832);
  *(void *)(a1 + 840) = *(void *)(a2 + 840);
  *(_OWORD *)(a2 + 824) = 0u;
  *(void *)(a2 + 840) = 0;
  *(void *)(a1 + 864) = 0;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 848) = *(_OWORD *)(a2 + 848);
  *(void *)(a1 + 864) = *(void *)(a2 + 864);
  *(_OWORD *)(a2 + 848) = 0u;
  *(void *)(a2 + 864) = 0;
  *(void *)(a1 + 888) = 0;
  *(_OWORD *)(a1 + 872) = 0u;
  *(void *)(a1 + 872) = *(void *)(a2 + 872);
  *(void *)(a1 + 880) = *(void *)(a2 + 880);
  *(void *)(a1 + 888) = *(void *)(a2 + 888);
  *(_OWORD *)(a2 + 872) = 0u;
  *(void *)(a2 + 888) = 0;
  long long v18 = *(_OWORD *)(a2 + 912);
  long long v17 = *(_OWORD *)(a2 + 928);
  *(_OWORD *)(a1 + 896) = *(_OWORD *)(a2 + 896);
  *(_OWORD *)(a1 + 912) = v18;
  *(_OWORD *)(a1 + 928) = v17;
  *(_OWORD *)(a1 + 952) = 0u;
  *(void *)(a1 + 944) = 0;
  *(_OWORD *)(a1 + 944) = *(_OWORD *)(a2 + 944);
  *(void *)(a1 + 960) = *(void *)(a2 + 960);
  *(void *)(a2 + 960) = 0;
  *(_OWORD *)(a2 + 944) = 0u;
  *(_OWORD *)(a1 + 968) = *(_OWORD *)(a2 + 968);
  long long v20 = *(_OWORD *)(a2 + 984);
  long long v19 = *(_OWORD *)(a2 + 1000);
  long long v21 = *(_OWORD *)(a2 + 1016);
  *(void *)(a1 + 1032) = *(void *)(a2 + 1032);
  *(_OWORD *)(a1 + 1000) = v19;
  *(_OWORD *)(a1 + 1016) = v21;
  *(_OWORD *)(a1 + 984) = v20;
  long long v22 = *(_OWORD *)(a2 + 1056);
  long long v23 = *(_OWORD *)(a2 + 1072);
  *(_OWORD *)(a1 + 1040) = *(_OWORD *)(a2 + 1040);
  *(_OWORD *)(a1 + 1072) = v23;
  *(_OWORD *)(a1 + 1056) = v22;
  *(void *)(a1 + 1088) = 0;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1088) = *(_OWORD *)(a2 + 1088);
  *(void *)(a1 + 1104) = *(void *)(a2 + 1104);
  *(_OWORD *)(a2 + 1088) = 0u;
  *(void *)(a2 + 1104) = 0;
  *(void *)(a1 + 1128) = 0;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(void *)(a1 + 1112) = *(void *)(a2 + 1112);
  *(void *)(a1 + 1120) = *(void *)(a2 + 1120);
  *(void *)(a1 + 1128) = *(void *)(a2 + 1128);
  *(_OWORD *)(a2 + 1112) = 0u;
  *(void *)(a2 + 1128) = 0;
  long long v24 = *(_OWORD *)(a2 + 1136);
  long long v25 = *(_OWORD *)(a2 + 1152);
  *(_OWORD *)(a1 + 1168) = *(_OWORD *)(a2 + 1168);
  *(_OWORD *)(a1 + 1152) = v25;
  *(_OWORD *)(a1 + 1136) = v24;
  long long v26 = *(_OWORD *)(a2 + 1184);
  long long v27 = *(_OWORD *)(a2 + 1200);
  long long v28 = *(_OWORD *)(a2 + 1216);
  *(_OWORD *)(a1 + 1232) = *(_OWORD *)(a2 + 1232);
  *(_OWORD *)(a1 + 1216) = v28;
  *(_OWORD *)(a1 + 1200) = v27;
  *(_OWORD *)(a1 + 1184) = v26;
  *(void *)(a1 + 1248) = 0;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(_OWORD *)(a1 + 1248) = *(_OWORD *)(a2 + 1248);
  *(void *)(a1 + 1264) = *(void *)(a2 + 1264);
  *(void *)(a2 + 1264) = 0;
  *(_OWORD *)(a2 + 1248) = 0u;
  *(void *)(a1 + 1288) = 0;
  *(_OWORD *)(a1 + 1272) = 0u;
  *(void *)(a1 + 1272) = *(void *)(a2 + 1272);
  *(void *)(a1 + 1280) = *(void *)(a2 + 1280);
  *(void *)(a1 + 1288) = *(void *)(a2 + 1288);
  *(void *)(a2 + 1288) = 0;
  *(_OWORD *)(a2 + 1272) = 0u;
  *(void *)(a1 + 1296) = *(void *)(a2 + 1296);
  uint64_t v29 = *(void *)(a2 + 1304);
  *(void *)(a1 + 1309) = *(void *)(a2 + 1309);
  *(void *)(a1 + 1304) = v29;
  *(void *)(a1 + 1320) = 0;
  *(_OWORD *)(a1 + 1328) = 0u;
  *(void *)(a1 + 1320) = *(void *)(a2 + 1320);
  *(void *)(a1 + 1328) = *(void *)(a2 + 1328);
  *(void *)(a1 + 1336) = *(void *)(a2 + 1336);
  *(void *)(a2 + 1336) = 0;
  *(_OWORD *)(a2 + 1320) = 0u;
  *(void *)(a1 + 1360) = 0;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(_OWORD *)(a1 + 1344) = *(_OWORD *)(a2 + 1344);
  *(void *)(a1 + 1360) = *(void *)(a2 + 1360);
  *(void *)(a2 + 1360) = 0;
  *(_OWORD *)(a2 + 1344) = 0u;
  *(void *)(a1 + 1384) = 0;
  *(_OWORD *)(a1 + 1368) = 0u;
  *(void *)(a1 + 1368) = *(void *)(a2 + 1368);
  *(void *)(a1 + 1376) = *(void *)(a2 + 1376);
  *(void *)(a1 + 1384) = *(void *)(a2 + 1384);
  *(void *)(a2 + 1384) = 0;
  *(_OWORD *)(a2 + 1368) = 0u;
  *(void *)(a1 + 1408) = 0;
  *(_OWORD *)(a1 + 1392) = 0u;
  *(_OWORD *)(a1 + 1392) = *(_OWORD *)(a2 + 1392);
  *(void *)(a1 + 1408) = *(void *)(a2 + 1408);
  *(void *)(a2 + 1408) = 0;
  *(_OWORD *)(a2 + 1392) = 0u;
  __int16 v30 = *(_WORD *)(a2 + 1416);
  *(unsigned char *)(a1 + 1418) = *(unsigned char *)(a2 + 1418);
  *(_WORD *)(a1 + 1416) = v30;
  *(void *)(a1 + 1424) = 0;
  *(_OWORD *)(a1 + 1432) = 0u;
  *(_OWORD *)(a1 + 1424) = *(_OWORD *)(a2 + 1424);
  *(void *)(a1 + 1440) = *(void *)(a2 + 1440);
  *(void *)(a2 + 1440) = 0;
  *(_OWORD *)(a2 + 1424) = 0u;
  *(void *)(a1 + 1464) = 0;
  *(_OWORD *)(a1 + 1448) = 0u;
  *(void *)(a1 + 1448) = *(void *)(a2 + 1448);
  *(void *)(a1 + 1456) = *(void *)(a2 + 1456);
  *(void *)(a1 + 1464) = *(void *)(a2 + 1464);
  *(void *)(a2 + 1464) = 0;
  *(_OWORD *)(a2 + 1448) = 0u;
  *(void *)(a1 + 1488) = 0;
  *(_OWORD *)(a1 + 1472) = 0u;
  *(_OWORD *)(a1 + 1472) = *(_OWORD *)(a2 + 1472);
  *(void *)(a1 + 1488) = *(void *)(a2 + 1488);
  *(void *)(a2 + 1488) = 0;
  *(_OWORD *)(a2 + 1472) = 0u;
  *(void *)(a1 + 1512) = 0;
  *(_OWORD *)(a1 + 1496) = 0u;
  *(void *)(a1 + 1496) = *(void *)(a2 + 1496);
  *(void *)(a1 + 1504) = *(void *)(a2 + 1504);
  *(void *)(a1 + 1512) = *(void *)(a2 + 1512);
  *(void *)(a2 + 1512) = 0;
  *(_OWORD *)(a2 + 1496) = 0u;
  long long v31 = *(_OWORD *)(a2 + 1600);
  long long v32 = *(_OWORD *)(a2 + 1616);
  long long v33 = *(_OWORD *)(a2 + 1632);
  *(_OWORD *)(a1 + 1584) = *(_OWORD *)(a2 + 1584);
  *(_OWORD *)(a1 + 1632) = v33;
  *(_OWORD *)(a1 + 1616) = v32;
  *(_OWORD *)(a1 + 1600) = v31;
  long long v34 = *(_OWORD *)(a2 + 1520);
  long long v35 = *(_OWORD *)(a2 + 1536);
  long long v36 = *(_OWORD *)(a2 + 1552);
  *(_OWORD *)(a1 + 1568) = *(_OWORD *)(a2 + 1568);
  *(_OWORD *)(a1 + 1552) = v36;
  *(_OWORD *)(a1 + 1536) = v35;
  *(_OWORD *)(a1 + 1520) = v34;
  return a1;
}

char *sub_F0E4A0(void **a1, _DWORD *a2, uint64_t a3)
{
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v5) {
    unint64_t v5 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v8 = 0x555555555555555;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 > 0x555555555555555) {
      sub_188D718();
    }
    long long v9 = (char *)operator new(48 * v8);
  }
  else
  {
    long long v9 = 0;
  }
  long long v26 = &v9[48 * v4];
  long long v28 = &v9[48 * v8];
  *(_DWORD *)long long v26 = *a2;
  sub_54214((uint64_t)(v26 + 8), a3);
  long long v10 = v26;
  long long v11 = (char *)*a1;
  long long v12 = (char *)a1[1];
  if (v12 == *a1)
  {
    long long v21 = (char *)a1[1];
  }
  else
  {
    uint64_t v13 = 0;
    do
    {
      uint64_t v15 = &v26[v13];
      uint64_t v16 = &v12[v13];
      *((_DWORD *)v15 - 12) = *(_DWORD *)&v12[v13 - 48];
      uint64_t v17 = *(void *)&v12[v13 - 40];
      *((void *)v16 - 5) = 0;
      *((void *)v15 - 5) = v17;
      *((void *)v15 - 4) = *(void *)&v12[v13 - 32];
      *((void *)v16 - 4) = 0;
      uint64_t v18 = *(void *)&v12[v13 - 24];
      *(void *)&v26[v13 - 24] = v18;
      uint64_t v19 = *(void *)&v12[v13 - 16];
      *((void *)v15 - 2) = v19;
      *((_DWORD *)v15 - 2) = *(_DWORD *)&v12[v13 - 8];
      if (v19)
      {
        unint64_t v14 = *(void *)(v18 + 8);
        unint64_t v20 = *((void *)v15 - 4);
        if ((v20 & (v20 - 1)) != 0)
        {
          if (v14 >= v20) {
            v14 %= v20;
          }
        }
        else
        {
          v14 &= v20 - 1;
        }
        *(void *)(v17 + 8 * v14) = &v26[v13 - 24];
        *(void *)&v12[v13 - 24] = 0;
        *(void *)&v12[v13 - 16] = 0;
      }
      v13 -= 48;
    }
    while (&v12[v13] != v11);
    long long v21 = (char *)*a1;
    long long v12 = (char *)a1[1];
    long long v10 = &v26[v13];
  }
  *a1 = v10;
  a1[1] = v26 + 48;
  a1[2] = v28;
  if (v12 == v21)
  {
    if (v12) {
LABEL_24:
    }
      operator delete(v12);
  }
  else
  {
    do
    {
      long long v27 = v12 - 48;
      long long v23 = (void **)*((void *)v12 - 3);
      if (v23)
      {
        do
        {
          long long v25 = (void **)*v23;
          sub_55198((uint64_t)(v23 + 5));
          if (*((char *)v23 + 39) < 0) {
            operator delete(v23[2]);
          }
          operator delete(v23);
          long long v23 = v25;
        }
        while (v25);
      }
      long long v24 = (void *)*((void *)v12 - 5);
      *((void *)v12 - 5) = 0;
      if (v24) {
        operator delete(v24);
      }
      v12 -= 48;
    }
    while (v27 != v21);
    long long v12 = v21;
    if (v21) {
      goto LABEL_24;
    }
  }
  return v26 + 48;
}

void sub_F0E6E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3C87D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_F0E6FC(void **a1, void *a2, uint64_t a3, int *a4)
{
  unint64_t v5 = 0x8FD8FD8FD8FD8FD9 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x27027027027027) {
    sub_2E00();
  }
  if (0x1FB1FB1FB1FB1FB2 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v6) {
    unint64_t v6 = 0x1FB1FB1FB1FB1FB2 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if (0x8FD8FD8FD8FD8FD9 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) >= 0x13813813813813) {
    unint64_t v10 = 0x27027027027027;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x27027027027027) {
      sub_188D718();
    }
    long long v11 = (char *)operator new(1680 * v10);
  }
  else
  {
    long long v11 = 0;
  }
  uint64_t v12 = (uint64_t)&v11[1680 * v5];
  long long v25 = &v11[1680 * v10];
  if (*(char *)(a3 + 23) < 0)
  {
    sub_4200(__p, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a3;
    uint64_t v27 = *(void *)(a3 + 16);
  }
  sub_F10670(v12, a2, (uint64_t *)__p, *a4);
  if ((SHIBYTE(v27) & 0x80000000) == 0)
  {
    uint64_t v13 = v12;
    uint64_t v14 = v12 + 1680;
    uint64_t v23 = v12 + 1680;
    uint64_t v16 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    if (v15 != *a1) {
      goto LABEL_16;
    }
LABEL_20:
    long long v21 = v15;
    goto LABEL_21;
  }
  operator delete(__p[0]);
  uint64_t v13 = v12;
  uint64_t v14 = v12 + 1680;
  uint64_t v23 = v12 + 1680;
  uint64_t v16 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == *a1) {
    goto LABEL_20;
  }
LABEL_16:
  uint64_t v17 = 0;
  do
  {
    *(_DWORD *)(v13 + v17 - 1680) = *(_DWORD *)&v15[v17 - 1680];
    uint64_t v18 = v13 + v17 - 1672;
    uint64_t v19 = (uint64_t)&v15[v17 - 1672];
    long long v20 = *(_OWORD *)v19;
    *(void *)(v18 + 16) = *(void *)&v15[v17 - 1656];
    *(_OWORD *)uint64_t v18 = v20;
    *(void *)(v19 + 8) = 0;
    *(void *)(v19 + 16) = 0;
    *(void *)uint64_t v19 = 0;
    sub_F0DF78(v13 + v17 - 1648, (uint64_t)&v15[v17 - 1648]);
    v17 -= 1680;
  }
  while (&v15[v17] != v16);
  long long v21 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  v13 += v17;
  uint64_t v14 = v23;
LABEL_21:
  *a1 = (void *)v13;
  a1[1] = (void *)v14;
  a1[2] = v25;
  if (v15 == v21)
  {
    if (v15) {
LABEL_23:
    }
      operator delete(v15);
  }
  else
  {
    do
    {
      long long v24 = v15 - 1680;
      sub_381444((void *)v15 - 206);
      if (*(v15 - 1649) < 0) {
        operator delete(*((void **)v15 - 209));
      }
      v15 -= 1680;
    }
    while (v24 != v21);
    uint64_t v15 = v21;
    if (v21) {
      goto LABEL_23;
    }
  }
  return v14;
}

void sub_F0E954(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_F0DF00((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_F0E968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_F0DF00((uint64_t)&a10);
  _Unwind_Resume(a1);
}

unsigned int *sub_F0E98C(unsigned int *result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  long long v11 = result;
LABEL_2:
  uint64_t v12 = v11;
  while (1)
  {
    long long v11 = v12;
    uint64_t v13 = a2 - (char *)v12;
    unint64_t v14 = (a2 - (char *)v12) >> 2;
    if (v6 || !v5)
    {
      switch(v14)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          unsigned int v71 = *v12;
          unsigned int v72 = *((_DWORD *)a2 - 1);
          if (v72 >= *v12) {
            return result;
          }
          unsigned int *v12 = v72;
          goto LABEL_155;
        case 3uLL:
          unsigned int v71 = *v12;
          unsigned int v73 = v12[1];
          unsigned int v74 = *((_DWORD *)a2 - 1);
          if (v73 >= *v12)
          {
            if (v74 < v73)
            {
              v12[1] = v74;
              *((_DWORD *)a2 - 1) = v73;
              unsigned int v91 = *v12;
              unsigned int v92 = v12[1];
              if (v92 < *v12)
              {
                unsigned int *v12 = v92;
                v12[1] = v91;
              }
            }
          }
          else
          {
            if (v74 >= v73)
            {
              unsigned int *v12 = v73;
              v12[1] = v71;
              unsigned int v99 = *((_DWORD *)a2 - 1);
              if (v99 >= v71) {
                return result;
              }
              v12[1] = v99;
            }
            else
            {
              unsigned int *v12 = v74;
            }
LABEL_155:
            *((_DWORD *)a2 - 1) = v71;
          }
          return result;
        case 4uLL:
          double v75 = v12 + 1;
          double v76 = (unsigned int *)v12[1];
          double v77 = v12 + 2;
          unsigned int v78 = v12[2];
          int v79 = (unsigned int *)*v12;
          if (v76 >= v79)
          {
            if (v78 >= v76)
            {
LABEL_149:
              LODWORD(v76) = v78;
              unsigned int v93 = *((_DWORD *)a2 - 1);
              if (v93 >= v76) {
                return result;
              }
LABEL_150:
              *double v77 = v93;
              *((_DWORD *)a2 - 1) = v76;
              unsigned int v96 = *v75;
              unsigned int v97 = *v77;
              if (*v77 < v96)
              {
                v12[1] = v97;
                v12[2] = v96;
                unsigned int v98 = *v12;
                if (v97 < *v12)
                {
                  unsigned int *v12 = v97;
                  v12[1] = v98;
                }
              }
              return result;
            }
            *double v75 = v78;
            *double v77 = v76;
            double v80 = v12;
            double v81 = v12 + 1;
            uint64_t result = v76;
            if (v78 >= v79)
            {
LABEL_141:
              unsigned int v93 = *((_DWORD *)a2 - 1);
              if (v93 >= v76) {
                return result;
              }
              goto LABEL_150;
            }
          }
          else
          {
            double v80 = v12;
            double v81 = v12 + 2;
            uint64_t result = (unsigned int *)*v12;
            if (v78 >= v76)
            {
              unsigned int *v12 = v76;
              v12[1] = v79;
              double v80 = v12 + 1;
              double v81 = v12 + 2;
              uint64_t result = v79;
              if (v78 >= v79) {
                goto LABEL_149;
              }
            }
          }
          *double v80 = v78;
          *double v81 = v79;
          LODWORD(v76) = result;
          goto LABEL_141;
        case 5uLL:
          return sub_3948(v12, v12 + 1, v12 + 2, v12 + 3, (unsigned int *)a2 - 1);
        default:
          JUMPOUT(0);
      }
    }
    if (v13 <= 95) {
      break;
    }
    if (!a4)
    {
      if (v12 != (unsigned int *)a2)
      {
        return (unsigned int *)sub_3A84((char *)v12, a2, a2);
      }
      return result;
    }
    unint64_t v15 = v14 >> 1;
    uint64_t v16 = &v12[v14 >> 1];
    unsigned int v17 = *((_DWORD *)a2 - 1);
    if ((unint64_t)v13 < 0x201)
    {
      unsigned int v20 = *v16;
      unsigned int v21 = *v12;
      if (*v12 < *v16)
      {
        if (v17 < v21)
        {
          *uint64_t v16 = v17;
          goto LABEL_32;
        }
        *uint64_t v16 = v21;
        unsigned int *v12 = v20;
        unsigned int v33 = *((_DWORD *)a2 - 1);
        if (v33 < v20)
        {
          unsigned int *v12 = v33;
LABEL_32:
          *((_DWORD *)a2 - 1) = v20;
        }
LABEL_33:
        --a4;
        unsigned int v24 = *v12;
        if (a5) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      if (v17 >= v21) {
        goto LABEL_33;
      }
      unsigned int *v12 = v17;
      *((_DWORD *)a2 - 1) = v21;
      unsigned int v23 = *v16;
      if (*v12 >= *v16) {
        goto LABEL_33;
      }
      *uint64_t v16 = *v12;
      unsigned int *v12 = v23;
      --a4;
      unsigned int v24 = v23;
      if (a5) {
        goto LABEL_57;
      }
LABEL_56:
      if (*(v12 - 1) < v24) {
        goto LABEL_57;
      }
      if (v24 < *((_DWORD *)a2 - 1))
      {
        do
        {
          unsigned int v62 = v12[1];
          ++v12;
        }
        while (v24 >= v62);
      }
      else
      {
        double v63 = v12 + 1;
        do
        {
          uint64_t v12 = v63;
          if (v63 >= (unsigned int *)a2) {
            break;
          }
          ++v63;
        }
        while (v24 >= *v12);
      }
      BOOL v64 = (unsigned int *)a2;
      if (v12 < (unsigned int *)a2)
      {
        BOOL v64 = (unsigned int *)a2;
        do
          unsigned int v65 = *--v64;
        while (v24 < v65);
      }
      if (v12 < v64)
      {
        unsigned int v66 = *v12;
        unsigned int v67 = *v64;
        do
        {
          unsigned int *v12 = v67;
          *BOOL v64 = v66;
          do
          {
            unsigned int v68 = v12[1];
            ++v12;
            unsigned int v66 = v68;
          }
          while (v24 >= v68);
          do
          {
            unsigned int v69 = *--v64;
            unsigned int v67 = v69;
          }
          while (v24 < v69);
        }
        while (v12 < v64);
      }
      double v70 = v12 - 1;
      BOOL v5 = v12 - 1 >= v11;
      BOOL v6 = v12 - 1 == v11;
      if (v12 - 1 != v11) {
        unsigned int *v11 = *v70;
      }
      a5 = 0;
      *double v70 = v24;
    }
    else
    {
      unsigned int v18 = *v12;
      unsigned int v19 = *v16;
      if (*v16 >= *v12)
      {
        if (v17 < v19)
        {
          *uint64_t v16 = v17;
          *((_DWORD *)a2 - 1) = v19;
          unsigned int v22 = *v12;
          if (*v16 < *v12)
          {
            unsigned int *v12 = *v16;
            *uint64_t v16 = v22;
          }
        }
      }
      else
      {
        if (v17 >= v19)
        {
          unsigned int *v12 = v19;
          *uint64_t v16 = v18;
          unsigned int v25 = *((_DWORD *)a2 - 1);
          if (v25 >= v18) {
            goto LABEL_24;
          }
          *uint64_t v16 = v25;
        }
        else
        {
          unsigned int *v12 = v17;
        }
        *((_DWORD *)a2 - 1) = v18;
      }
LABEL_24:
      long long v26 = &v12[v15];
      unsigned int v29 = *(v26 - 1);
      uint64_t v27 = v26 - 1;
      unsigned int v28 = v29;
      unsigned int v30 = v12[1];
      unsigned int v31 = *((_DWORD *)a2 - 2);
      if (v29 >= v30)
      {
        if (v31 < v28)
        {
          *uint64_t v27 = v31;
          *((_DWORD *)a2 - 2) = v28;
          unsigned int v32 = v12[1];
          if (*v27 < v32)
          {
            v12[1] = *v27;
            *uint64_t v27 = v32;
          }
        }
      }
      else
      {
        if (v31 >= v28)
        {
          v12[1] = v28;
          *uint64_t v27 = v30;
          unsigned int v34 = *((_DWORD *)a2 - 2);
          if (v34 >= v30) {
            goto LABEL_38;
          }
          *uint64_t v27 = v34;
        }
        else
        {
          v12[1] = v31;
        }
        *((_DWORD *)a2 - 2) = v30;
      }
LABEL_38:
      long long v35 = &v12[v15];
      unsigned int v38 = v35[1];
      long long v36 = v35 + 1;
      unsigned int v37 = v38;
      unsigned int v39 = v12[2];
      unsigned int v40 = *((_DWORD *)a2 - 3);
      if (v38 >= v39)
      {
        if (v40 < v37)
        {
          *long long v36 = v40;
          *((_DWORD *)a2 - 3) = v37;
          unsigned int v41 = v12[2];
          if (*v36 < v41)
          {
            v12[2] = *v36;
            *long long v36 = v41;
          }
        }
      }
      else
      {
        if (v40 >= v37)
        {
          v12[2] = v37;
          *long long v36 = v39;
          unsigned int v42 = *((_DWORD *)a2 - 3);
          if (v42 >= v39) {
            goto LABEL_47;
          }
          *long long v36 = v42;
        }
        else
        {
          v12[2] = v40;
        }
        *((_DWORD *)a2 - 3) = v39;
      }
LABEL_47:
      unsigned int v43 = *v27;
      unsigned int v44 = *v16;
      unsigned int v45 = *v36;
      if (*v16 >= *v27)
      {
        if (v45 >= v44) {
          goto LABEL_55;
        }
        *uint64_t v16 = v45;
        *long long v36 = v44;
        long long v36 = &v12[v14 >> 1];
        unsigned int v44 = v43;
        if (v45 < v43)
        {
LABEL_54:
          *uint64_t v27 = v45;
          *long long v36 = v43;
LABEL_55:
          unsigned int v47 = *v12;
          unsigned int *v12 = v44;
          *uint64_t v16 = v47;
          --a4;
          unsigned int v24 = *v12;
          if ((a5 & 1) == 0) {
            goto LABEL_56;
          }
          goto LABEL_57;
        }
        unsigned int v61 = *v12;
        unsigned int *v12 = v45;
        *uint64_t v16 = v61;
        --a4;
        unsigned int v24 = *v12;
        if (a5) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      if (v45 < v44) {
        goto LABEL_54;
      }
      *uint64_t v27 = v44;
      *uint64_t v16 = v43;
      uint64_t v27 = &v12[v14 >> 1];
      unsigned int v44 = v45;
      if (v45 < v43) {
        goto LABEL_54;
      }
      unsigned int v46 = *v12;
      unsigned int *v12 = v43;
      *uint64_t v16 = v46;
      --a4;
      unsigned int v24 = *v12;
      if ((a5 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_57:
      uint64_t v48 = 0;
      do
        unsigned int v49 = v12[++v48];
      while (v49 < v24);
      double v50 = &v12[v48];
      double v51 = a2;
      if (v48 == 1)
      {
        double v51 = a2;
        do
        {
          if (v50 >= (unsigned int *)v51) {
            break;
          }
          unsigned int v53 = *((_DWORD *)v51 - 1);
          v51 -= 4;
        }
        while (v53 >= v24);
      }
      else
      {
        do
        {
          unsigned int v52 = *((_DWORD *)v51 - 1);
          v51 -= 4;
        }
        while (v52 >= v24);
      }
      if (v50 >= (unsigned int *)v51)
      {
        double v59 = v50 - 1;
        if (v50 - 1 == v12) {
          goto LABEL_75;
        }
LABEL_74:
        unsigned int *v12 = *v59;
        goto LABEL_75;
      }
      unsigned int v54 = *(_DWORD *)v51;
      double v55 = &v12[v48];
      unint64_t v56 = (unsigned int *)v51;
      do
      {
        unsigned int *v55 = v54;
        *unint64_t v56 = v49;
        do
        {
          unsigned int v57 = v55[1];
          ++v55;
          unsigned int v49 = v57;
        }
        while (v57 < v24);
        do
        {
          unsigned int v58 = *--v56;
          unsigned int v54 = v58;
        }
        while (v58 >= v24);
      }
      while (v55 < v56);
      double v59 = v55 - 1;
      if (v55 - 1 != v12) {
        goto LABEL_74;
      }
LABEL_75:
      *double v59 = v24;
      if (v50 < (unsigned int *)v51) {
        goto LABEL_78;
      }
      BOOL v60 = sub_F0F15C(v12, v59);
      uint64_t v12 = v59 + 1;
      uint64_t result = (unsigned int *)sub_F0F15C(v59 + 1, (unsigned int *)a2);
      if (result)
      {
        a2 = (char *)v59;
        if (v60) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v60)
      {
LABEL_78:
        uint64_t result = (unsigned int *)sub_F0E98C(v11, v59, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t v12 = v59 + 1;
      }
    }
  }
  double v82 = (char *)(v12 + 1);
  BOOL v84 = v12 == (unsigned int *)a2 || v82 == a2;
  if (a5)
  {
    if (!v84)
    {
      uint64_t v85 = 0;
      double v86 = v12;
      do
      {
        unsigned int v89 = *v86;
        unsigned int v88 = v86[1];
        double v86 = (unsigned int *)v82;
        if (v88 < v89)
        {
          uint64_t v90 = v85;
          do
          {
            *(unsigned int *)((char *)v12 + v90 + 4) = v89;
            if (!v90)
            {
              char v87 = v12;
              goto LABEL_124;
            }
            unsigned int v89 = *(unsigned int *)((char *)v12 + v90 - 4);
            v90 -= 4;
          }
          while (v88 < v89);
          char v87 = (unsigned int *)((char *)v12 + v90 + 4);
LABEL_124:
          unsigned int *v87 = v88;
        }
        double v82 = (char *)(v86 + 1);
        v85 += 4;
      }
      while (v86 + 1 != (unsigned int *)a2);
    }
  }
  else if (!v84)
  {
    do
    {
      unsigned int v95 = *v11;
      unsigned int v94 = v11[1];
      long long v11 = (unsigned int *)v82;
      if (v94 < v95)
      {
        do
        {
          *(_DWORD *)double v82 = v95;
          unsigned int v95 = *((_DWORD *)v82 - 2);
          v82 -= 4;
        }
        while (v94 < v95);
        *(_DWORD *)double v82 = v94;
      }
      double v82 = (char *)(v11 + 1);
    }
    while (v11 + 1 != (unsigned int *)a2);
  }
  return result;
}

BOOL sub_F0F15C(unsigned int *a1, unsigned int *a2)
{
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      unsigned int v9 = *a1;
      unsigned int v10 = *(a2 - 1);
      if (v10 >= *a1) {
        return 1;
      }
      *a1 = v10;
      *(a2 - 1) = v9;
      return 1;
    case 3:
      unsigned int v11 = *a1;
      unsigned int v12 = a1[1];
      unsigned int v13 = *(a2 - 1);
      if (v12 >= *a1)
      {
        if (v13 >= v12) {
          return 1;
        }
        a1[1] = v13;
        *(a2 - 1) = v12;
        unsigned int v29 = *a1;
        unsigned int v30 = a1[1];
        if (v30 >= *a1) {
          return 1;
        }
        *a1 = v30;
        a1[1] = v29;
        return 1;
      }
      else if (v13 >= v12)
      {
        *a1 = v12;
        a1[1] = v11;
        unsigned int v35 = *(a2 - 1);
        if (v35 >= v11) {
          return 1;
        }
        a1[1] = v35;
        *(a2 - 1) = v11;
        return 1;
      }
      else
      {
        *a1 = v13;
        *(a2 - 1) = v11;
        return 1;
      }
    case 4:
      unint64_t v14 = a1 + 1;
      unsigned int v15 = a1[1];
      uint64_t v16 = a1 + 2;
      unsigned int v17 = a1[2];
      unsigned int v18 = *a1;
      if (v15 < *a1)
      {
        unsigned int v19 = a1;
        unsigned int v20 = a1 + 2;
        unsigned int v21 = *a1;
        if (v17 >= v15)
        {
          *a1 = v15;
          a1[1] = v18;
          unsigned int v19 = a1 + 1;
          unsigned int v20 = a1 + 2;
          unsigned int v21 = v18;
          if (v17 >= v18) {
            goto LABEL_38;
          }
        }
LABEL_35:
        *unsigned int v19 = v17;
        *unsigned int v20 = v18;
        unsigned int v15 = v21;
LABEL_36:
        unsigned int v31 = *(a2 - 1);
        if (v31 >= v15) {
          return 1;
        }
        goto LABEL_39;
      }
      if (v17 < v15)
      {
        *unint64_t v14 = v17;
        *uint64_t v16 = v15;
        unsigned int v19 = a1;
        unsigned int v20 = a1 + 1;
        unsigned int v21 = v15;
        if (v17 >= v18) {
          goto LABEL_36;
        }
        goto LABEL_35;
      }
LABEL_38:
      unsigned int v15 = v17;
      unsigned int v31 = *(a2 - 1);
      if (v31 >= v15) {
        return 1;
      }
LABEL_39:
      *uint64_t v16 = v31;
      *(a2 - 1) = v15;
      unsigned int v32 = *v14;
      unsigned int v33 = *v16;
      if (*v16 >= v32) {
        return 1;
      }
      a1[1] = v33;
      a1[2] = v32;
      unsigned int v34 = *a1;
      if (v33 >= *a1) {
        return 1;
      }
      *a1 = v33;
      a1[1] = v34;
      return 1;
    case 5:
      sub_3948(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      unint64_t v4 = a1 + 2;
      unsigned int v3 = a1[2];
      unsigned int v5 = a1[1];
      unsigned int v6 = *a1;
      if (v5 >= *a1)
      {
        if (v3 >= v5) {
          goto LABEL_20;
        }
        a1[1] = v3;
        *unint64_t v4 = v5;
        long long v7 = a1;
        unint64_t v8 = a1 + 1;
      }
      else
      {
        long long v7 = a1;
        unint64_t v8 = a1 + 2;
        if (v3 < v5) {
          goto LABEL_19;
        }
        *a1 = v5;
        a1[1] = v6;
        long long v7 = a1 + 1;
        unint64_t v8 = a1 + 2;
      }
      if (v3 >= v6) {
        goto LABEL_20;
      }
LABEL_19:
      *long long v7 = v3;
      *unint64_t v8 = v6;
LABEL_20:
      unsigned int v22 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v23 = 0;
      for (uint64_t i = 12; ; i += 4)
      {
        unsigned int v25 = *v4;
        unsigned int v26 = *v22;
        if (*v22 < v25) {
          break;
        }
LABEL_23:
        unint64_t v4 = v22++;
        if (v22 == a2) {
          return 1;
        }
      }
      uint64_t v27 = i;
      do
      {
        *(unsigned int *)((char *)a1 + v27) = v25;
        uint64_t v28 = v27 - 4;
        if (v27 == 4)
        {
          *a1 = v26;
          if (++v23 != 8) {
            goto LABEL_23;
          }
          return v22 + 1 == a2;
        }
        unsigned int v25 = *(unsigned int *)((char *)a1 + v27 - 8);
        v27 -= 4;
      }
      while (v26 < v25);
      *(unsigned int *)((char *)a1 + v28) = v26;
      if (++v23 != 8) {
        goto LABEL_23;
      }
      return v22 + 1 == a2;
  }
}

uint64_t sub_F0F488(uint64_t *a1, void *a2, uint64_t a3, int *a4)
{
  uint64_t v5 = 0x1F693A1C451AB30BLL * ((a1[1] - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) > 0x3241F693A1C451) {
    sub_2E00();
  }
  if (0x3ED274388A356616 * ((a1[2] - *a1) >> 3) > v6) {
    unint64_t v6 = 0x3ED274388A356616 * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x1F693A1C451AB30BLL * ((a1[2] - *a1) >> 3)) >= 0x1920FB49D0E228) {
    unint64_t v10 = 0x3241F693A1C451;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x3241F693A1C451) {
      sub_188D718();
    }
    unsigned int v11 = (char *)operator new(1304 * v10);
  }
  else
  {
    unsigned int v11 = 0;
  }
  uint64_t v12 = (uint64_t)&v11[1304 * v5];
  int v23 = &v11[1304 * v10];
  if (*(char *)(a3 + 23) < 0)
  {
    sub_4200(__p, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a3;
    uint64_t v25 = *(void *)(a3 + 16);
  }
  sub_F25F9C(v12, a2, (uint64_t *)__p, *a4);
  if (SHIBYTE(v25) < 0)
  {
    operator delete(__p[0]);
    uint64_t v13 = v12;
    uint64_t v14 = v12 + 1304;
    uint64_t v21 = v12 + 1304;
    uint64_t v16 = (char *)*a1;
    unsigned int v15 = (char *)a1[1];
    if (v15 == (char *)*a1)
    {
LABEL_20:
      unsigned int v17 = v15;
      goto LABEL_21;
    }
  }
  else
  {
    uint64_t v13 = v12;
    uint64_t v14 = v12 + 1304;
    uint64_t v21 = v12 + 1304;
    uint64_t v16 = (char *)*a1;
    unsigned int v15 = (char *)a1[1];
    if (v15 == (char *)*a1) {
      goto LABEL_20;
    }
  }
  do
  {
    v15 -= 1304;
    uint64_t v13 = sub_F0F6F8(v13 - 1304, (uint64_t)v15);
  }
  while (v15 != v16);
  unsigned int v17 = (char *)*a1;
  unsigned int v15 = (char *)a1[1];
  uint64_t v14 = v21;
LABEL_21:
  *a1 = v13;
  a1[1] = v14;
  a1[2] = (uint64_t)v23;
  if (v15 == v17)
  {
    if (v15) {
LABEL_23:
    }
      operator delete(v15);
  }
  else
  {
    do
    {
      unsigned int v22 = v15 - 1304;
      unsigned int v19 = (void *)*((void *)v15 - 3);
      if (v19)
      {
        *((void *)v15 - 2) = v19;
        operator delete(v19);
      }
      unsigned int v20 = (void *)*((void *)v15 - 6);
      if (v20)
      {
        *((void *)v15 - 5) = v20;
        operator delete(v20);
      }
      sub_3817F8((void *)v15 - 159);
      if (*(v15 - 1273) < 0) {
        operator delete(*((void **)v15 - 162));
      }
      v15 -= 1304;
    }
    while (v22 != v17);
    unsigned int v15 = v17;
    if (v17) {
      goto LABEL_23;
    }
  }
  return v14;
}

void sub_F0F6C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_F0FA2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_F0F6D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_F0FA2C((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_F0F6F8(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  long long v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v4;
  *(_OWORD *)(a2 + 16) = 0u;
  *(void *)(a2 + 8) = 0;
  long long v5 = *(_OWORD *)(a2 + 144);
  long long v6 = *(_OWORD *)(a2 + 160);
  long long v7 = *(_OWORD *)(a2 + 189);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  long long v8 = *(_OWORD *)(a2 + 32);
  long long v9 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v9;
  *(_OWORD *)(a1 + 32) = v8;
  long long v10 = *(_OWORD *)(a2 + 80);
  long long v11 = *(_OWORD *)(a2 + 96);
  long long v12 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v12;
  *(_OWORD *)(a1 + 80) = v10;
  *(_OWORD *)(a1 + 96) = v11;
  *(_OWORD *)(a1 + 189) = v7;
  *(_OWORD *)(a1 + 144) = v5;
  *(_OWORD *)(a1 + 160) = v6;
  *(void *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a2 + 224) = 0;
  *(_OWORD *)(a2 + 208) = 0u;
  uint64_t v13 = *(void *)(a2 + 232);
  *(_OWORD *)(a1 + 248) = 0u;
  *(void *)(a1 + 232) = v13;
  *(void *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a2 + 256) = 0;
  *(_OWORD *)(a2 + 240) = 0u;
  *(void *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(void *)(a2 + 280) = 0;
  *(_OWORD *)(a2 + 264) = 0u;
  *(void *)(a1 + 304) = 0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  *(void *)(a2 + 304) = 0;
  *(_OWORD *)(a2 + 288) = 0u;
  long long v14 = *(_OWORD *)(a2 + 328);
  *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 328) = v14;
  long long v15 = *(_OWORD *)(a2 + 344);
  long long v16 = *(_OWORD *)(a2 + 360);
  long long v17 = *(_OWORD *)(a2 + 392);
  *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 392) = v17;
  *(_OWORD *)(a1 + 344) = v15;
  *(_OWORD *)(a1 + 360) = v16;
  long long v18 = *(_OWORD *)(a2 + 408);
  long long v19 = *(_OWORD *)(a2 + 424);
  long long v20 = *(_OWORD *)(a2 + 456);
  *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
  *(_OWORD *)(a1 + 456) = v20;
  *(_OWORD *)(a1 + 408) = v18;
  *(_OWORD *)(a1 + 424) = v19;
  long long v21 = *(_OWORD *)(a2 + 472);
  long long v22 = *(_OWORD *)(a2 + 488);
  long long v23 = *(_OWORD *)(a2 + 504);
  *(void *)(a1 + 520) = *(void *)(a2 + 520);
  *(_OWORD *)(a1 + 488) = v22;
  *(_OWORD *)(a1 + 504) = v23;
  *(_OWORD *)(a1 + 472) = v21;
  *(void *)(a1 + 544) = 0;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
  *(void *)(a1 + 544) = *(void *)(a2 + 544);
  *(void *)(a2 + 544) = 0;
  *(_OWORD *)(a2 + 528) = 0u;
  *(void *)(a1 + 568) = 0;
  *(_OWORD *)(a1 + 552) = 0u;
  *(void *)(a1 + 552) = *(void *)(a2 + 552);
  *(void *)(a1 + 560) = *(void *)(a2 + 560);
  *(void *)(a1 + 568) = *(void *)(a2 + 568);
  *(void *)(a2 + 568) = 0;
  *(_OWORD *)(a2 + 552) = 0u;
  *(void *)(a1 + 592) = 0;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 576) = *(_OWORD *)(a2 + 576);
  *(void *)(a1 + 592) = *(void *)(a2 + 592);
  *(void *)(a2 + 592) = 0;
  *(_OWORD *)(a2 + 576) = 0u;
  *(void *)(a1 + 616) = 0;
  *(_OWORD *)(a1 + 600) = 0u;
  *(void *)(a1 + 600) = *(void *)(a2 + 600);
  *(void *)(a1 + 608) = *(void *)(a2 + 608);
  *(void *)(a1 + 616) = *(void *)(a2 + 616);
  *(void *)(a2 + 616) = 0;
  *(_OWORD *)(a2 + 600) = 0u;
  __int16 v24 = *(_WORD *)(a2 + 624);
  *(unsigned char *)(a1 + 626) = *(unsigned char *)(a2 + 626);
  *(_WORD *)(a1 + 624) = v24;
  *(void *)(a1 + 632) = 0;
  *(_OWORD *)(a1 + 640) = 0u;
  *(void *)(a1 + 632) = *(void *)(a2 + 632);
  *(void *)(a1 + 640) = *(void *)(a2 + 640);
  *(void *)(a1 + 648) = *(void *)(a2 + 648);
  *(void *)(a2 + 648) = 0;
  *(_OWORD *)(a2 + 632) = 0u;
  long long v25 = *(_OWORD *)(a2 + 656);
  *(void *)(a1 + 672) = *(void *)(a2 + 672);
  *(_OWORD *)(a1 + 656) = v25;
  *(void *)(a1 + 680) = 0;
  *(_OWORD *)(a1 + 688) = 0u;
  *(void *)(a1 + 680) = *(void *)(a2 + 680);
  *(void *)(a1 + 688) = *(void *)(a2 + 688);
  *(void *)(a1 + 696) = *(void *)(a2 + 696);
  *(void *)(a2 + 696) = 0;
  *(_OWORD *)(a2 + 680) = 0u;
  *(void *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 704) = *(_OWORD *)(a2 + 704);
  *(void *)(a1 + 720) = *(void *)(a2 + 720);
  *(void *)(a2 + 720) = 0;
  *(_OWORD *)(a2 + 704) = 0u;
  *(void *)(a1 + 744) = 0;
  *(_OWORD *)(a1 + 728) = 0u;
  *(void *)(a1 + 728) = *(void *)(a2 + 728);
  *(void *)(a1 + 736) = *(void *)(a2 + 736);
  *(void *)(a1 + 744) = *(void *)(a2 + 744);
  *(void *)(a2 + 744) = 0;
  *(_OWORD *)(a2 + 728) = 0u;
  memcpy((void *)(a1 + 752), (const void *)(a2 + 752), 0x1F8uLL);
  *(void *)(a1 + 1256) = 0;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(void *)(a1 + 1256) = *(void *)(a2 + 1256);
  *(void *)(a1 + 1264) = *(void *)(a2 + 1264);
  *(void *)(a1 + 1272) = *(void *)(a2 + 1272);
  *(_OWORD *)(a2 + 1256) = 0u;
  *(void *)(a2 + 1272) = 0;
  *(void *)(a1 + 1296) = 0;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1280) = *(_OWORD *)(a2 + 1280);
  *(void *)(a1 + 1296) = *(void *)(a2 + 1296);
  *(_OWORD *)(a2 + 1280) = 0u;
  *(void *)(a2 + 1296) = 0;
  return a1;
}

uint64_t sub_F0FA2C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 1304;
    long long v4 = *(void **)(i - 24);
    if (v4)
    {
      *(void *)(i - 16) = v4;
      operator delete(v4);
    }
    long long v5 = *(void **)(i - 48);
    if (v5)
    {
      *(void *)(i - 40) = v5;
      operator delete(v5);
    }
    sub_3817F8((void *)(i - 1272));
    if (*(char *)(i - 1273) < 0) {
      operator delete(*(void **)(i - 1296));
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_F0FAC4(uint64_t *a1, void *a2, uint64_t a3, int *a4)
{
  uint64_t v5 = 0x1F693A1C451AB30BLL * ((a1[1] - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) > 0x3241F693A1C451) {
    sub_2E00();
  }
  if (0x3ED274388A356616 * ((a1[2] - *a1) >> 3) > v6) {
    unint64_t v6 = 0x3ED274388A356616 * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x1F693A1C451AB30BLL * ((a1[2] - *a1) >> 3)) >= 0x1920FB49D0E228) {
    unint64_t v10 = 0x3241F693A1C451;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x3241F693A1C451) {
      sub_188D718();
    }
    long long v11 = (char *)operator new(1304 * v10);
  }
  else
  {
    long long v11 = 0;
  }
  uint64_t v12 = (uint64_t)&v11[1304 * v5];
  long long v23 = &v11[1304 * v10];
  if (*(char *)(a3 + 23) < 0)
  {
    sub_4200(__p, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a3;
    uint64_t v25 = *(void *)(a3 + 16);
  }
  sub_F25F9C(v12, a2, (uint64_t *)__p, *a4);
  if (SHIBYTE(v25) < 0)
  {
    operator delete(__p[0]);
    uint64_t v13 = v12;
    uint64_t v14 = v12 + 1304;
    uint64_t v21 = v12 + 1304;
    long long v16 = (char *)*a1;
    long long v15 = (char *)a1[1];
    if (v15 == (char *)*a1)
    {
LABEL_20:
      long long v17 = v15;
      goto LABEL_21;
    }
  }
  else
  {
    uint64_t v13 = v12;
    uint64_t v14 = v12 + 1304;
    uint64_t v21 = v12 + 1304;
    long long v16 = (char *)*a1;
    long long v15 = (char *)a1[1];
    if (v15 == (char *)*a1) {
      goto LABEL_20;
    }
  }
  do
  {
    v15 -= 1304;
    uint64_t v13 = sub_F0F6F8(v13 - 1304, (uint64_t)v15);
  }
  while (v15 != v16);
  long long v17 = (char *)*a1;
  long long v15 = (char *)a1[1];
  uint64_t v14 = v21;
LABEL_21:
  *a1 = v13;
  a1[1] = v14;
  a1[2] = (uint64_t)v23;
  if (v15 == v17)
  {
    if (v15) {
LABEL_23:
    }
      operator delete(v15);
  }
  else
  {
    do
    {
      long long v22 = v15 - 1304;
      long long v19 = (void *)*((void *)v15 - 3);
      if (v19)
      {
        *((void *)v15 - 2) = v19;
        operator delete(v19);
      }
      long long v20 = (void *)*((void *)v15 - 6);
      if (v20)
      {
        *((void *)v15 - 5) = v20;
        operator delete(v20);
      }
      sub_3817F8((void *)v15 - 159);
      if (*(v15 - 1273) < 0) {
        operator delete(*((void **)v15 - 162));
      }
      v15 -= 1304;
    }
    while (v22 != v17);
    long long v15 = v17;
    if (v17) {
      goto LABEL_23;
    }
  }
  return v14;
}

void sub_F0FCFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_F0FA2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_F0FD10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_F0FA2C((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_F0FD34(uint64_t *a1, void *a2, uint64_t a3, int *a4)
{
  unint64_t v5 = 0xA3A0FD5C5F02A3A1 * ((a1[1] - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x54741FAB8BE054) {
    sub_2E00();
  }
  if (0x4741FAB8BE054742 * ((a1[2] - *a1) >> 3) > v6) {
    unint64_t v6 = 0x4741FAB8BE054742 * ((a1[2] - *a1) >> 3);
  }
  if (0xA3A0FD5C5F02A3A1 * ((a1[2] - *a1) >> 3) >= 0x2A3A0FD5C5F02ALL) {
    unint64_t v10 = 0x54741FAB8BE054;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x54741FAB8BE054) {
      sub_188D718();
    }
    long long v11 = (char *)operator new(776 * v10);
  }
  else
  {
    long long v11 = 0;
  }
  uint64_t v12 = (uint64_t)&v11[776 * v5];
  long long v18 = &v11[776 * v10];
  if (*(char *)(a3 + 23) < 0)
  {
    sub_4200(__p, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a3;
    uint64_t v20 = *(void *)(a3 + 16);
  }
  sub_F6CDC4(v12, a2, (uint64_t *)__p, *a4);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p[0]);
  }
  sub_F0FFD0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, v12, v12);
  uint64_t v13 = (char *)*a1;
  uint64_t v14 = (char *)a1[1];
  *a1 = v15;
  a1[1] = v12 + 776;
  a1[2] = (uint64_t)v18;
  if (v14 == v13)
  {
    if (v13) {
LABEL_18:
    }
      operator delete(v13);
  }
  else
  {
    do
    {
      long long v17 = v14 - 776;
      sub_381A68((void *)v14 - 93);
      if (*(v14 - 745) < 0) {
        operator delete(*((void **)v14 - 96));
      }
      v14 -= 776;
    }
    while (v17 != v13);
    if (v13) {
      goto LABEL_18;
    }
  }
  return v12 + 776;
}

void sub_F0FF20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
  {
    operator delete(__p);
    sub_F0FF58((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  sub_F0FF58((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_F0FF58(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 776;
    sub_381A68((void *)(i - 744));
    if (*(char *)(i - 745) < 0) {
      operator delete(*(void **)(i - 768));
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_F0FFD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = a6;
  if (a3 != a5)
  {
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = a7 + v8;
      uint64_t v10 = a3 + v8;
      *(_DWORD *)(a7 + v8 - 776) = *(_DWORD *)(a3 + v8 - 776);
      long long v11 = (long long *)(a3 + v8 - 768);
      uint64_t v12 = a7 + v8 - 768;
      long long v13 = *v11;
      *(void *)(v12 + 16) = *(void *)(a3 + v8 - 752);
      *(_OWORD *)uint64_t v12 = v13;
      uint64_t v14 = a7 + v8 - 744;
      *(long long *)((char *)v11 + 8) = 0uLL;
      long long v15 = *(_OWORD *)(a3 + v8 - 744);
      long long v16 = *(_OWORD *)(a3 + v8 - 728);
      long long v17 = *(_OWORD *)(a3 + v8 - 712);
      uint64_t v18 = *(void *)(a3 + v8 - 696);
      *(void *)long long v11 = 0;
      *(void *)(v14 + 48) = v18;
      *(_OWORD *)(v14 + 16) = v16;
      *(_OWORD *)(v14 + 32) = v17;
      uint64_t v19 = a7 + v8 - 688;
      uint64_t v20 = a3 + v8 - 688;
      *(_OWORD *)uint64_t v14 = v15;
      *(void *)uint64_t v19 = 0;
      *(_OWORD *)(v19 + 8) = 0uLL;
      *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
      *(void *)(a7 + v8 - 672) = *(void *)(a3 + v8 - 672);
      *(void *)(v20 + 16) = 0;
      uint64_t v21 = (_OWORD *)(a7 + v8 - 664);
      *(_OWORD *)uint64_t v20 = 0uLL;
      long long v22 = *(_OWORD *)(a3 + v8 - 648);
      *uint64_t v21 = *(_OWORD *)(a3 + v8 - 664);
      v21[1] = v22;
      long long v23 = *(_OWORD *)(a3 + v8 - 632);
      long long v24 = *(_OWORD *)(a3 + v8 - 616);
      long long v25 = *(_OWORD *)(a3 + v8 - 584);
      unsigned char v21[4] = *(_OWORD *)(a3 + v8 - 600);
      v21[5] = v25;
      v21[2] = v23;
      v21[3] = v24;
      long long v26 = *(_OWORD *)(a3 + v8 - 568);
      long long v27 = *(_OWORD *)(a3 + v8 - 552);
      long long v28 = *(_OWORD *)(a3 + v8 - 520);
      v21[8] = *(_OWORD *)(a3 + v8 - 536);
      v21[9] = v28;
      unsigned int v29 = (void *)(a7 + v8 - 504);
      uint64_t v30 = a3 + v8 - 504;
      _OWORD v29[2] = 0;
      *unsigned int v29 = 0;
      v21[6] = v26;
      v21[7] = v27;
      *(void *)(a7 + v8 - 496) = 0;
      *(_OWORD *)unsigned int v29 = *(_OWORD *)v30;
      *(void *)(a7 + v8 - 488) = *(void *)(a3 + v8 - 488);
      *(void *)(a3 + v8 - 496) = 0;
      *(void *)uint64_t v30 = 0;
      *(void *)(v30 + 16) = 0;
      uint64_t v31 = a7 + v8 - 480;
      long long v32 = *(_OWORD *)(a3 + v8 - 480);
      *(void *)(v31 + 16) = *(void *)(a3 + v8 - 464);
      *(_OWORD *)uint64_t v31 = v32;
      unsigned int v33 = (void *)(a7 + v8 - 456);
      uint64_t v34 = a3 + v8 - 456;
      v33[1] = 0;
      v33[2] = 0;
      *unsigned int v33 = 0;
      *(_OWORD *)unsigned int v33 = *(_OWORD *)v34;
      *(void *)(a7 + v8 - 440) = *(void *)(a3 + v8 - 440);
      *(void *)(a3 + v8 - 448) = 0;
      *(void *)uint64_t v34 = 0;
      unsigned int v35 = (void *)(a7 + v8 - 432);
      uint64_t v36 = a3 + v8 - 432;
      *(void *)(v34 + 16) = 0;
      *(void *)(a7 + v8 - 424) = 0;
      *unsigned int v35 = 0;
      v35[2] = 0;
      *(_OWORD *)unsigned int v35 = *(_OWORD *)v36;
      *(void *)(a7 + v8 - 416) = *(void *)(a3 + v8 - 416);
      *(void *)(a3 + v8 - 424) = 0;
      *(void *)uint64_t v36 = 0;
      *(void *)(v36 + 16) = 0;
      unsigned int v37 = (void *)(a7 + v8 - 408);
      uint64_t v38 = a3 + v8 - 408;
      *(void *)(a7 + v8 - 400) = 0;
      *unsigned int v37 = 0;
      v37[2] = 0;
      *(_OWORD *)unsigned int v37 = *(_OWORD *)v38;
      *(void *)(a7 + v8 - 392) = *(void *)(a3 + v8 - 392);
      *(void *)(a3 + v8 - 400) = 0;
      *(void *)uint64_t v38 = 0;
      unsigned int v39 = (_OWORD *)(a7 + v8 - 384);
      *(void *)(v38 + 16) = 0;
      long long v40 = *(_OWORD *)(a3 + v8 - 384);
      *(_OWORD *)((char *)v39 + 9) = *(_OWORD *)(a3 + v8 - 375);
      unsigned int v41 = (void *)(a7 + v8 - 352);
      *unsigned int v39 = v40;
      uint64_t v42 = a3 + v8 - 352;
      v41[1] = 0;
      v41[2] = 0;
      *unsigned int v41 = 0;
      *(_OWORD *)unsigned int v41 = *(_OWORD *)v42;
      *(void *)(a7 + v8 - 336) = *(void *)(a3 + v8 - 336);
      *(void *)(a3 + v8 - 344) = 0;
      *(void *)uint64_t v42 = 0;
      unsigned int v43 = (_OWORD *)(a7 + v8 - 328);
      long long v44 = *(_OWORD *)(a3 + v8 - 328);
      long long v45 = *(_OWORD *)(a3 + v8 - 312);
      *(void *)(v42 + 16) = 0;
      unsigned int v46 = (void *)(a7 + v8 - 296);
      uint64_t v47 = a3 + v8 - 296;
      *unsigned int v46 = 0;
      v46[1] = 0;
      v46[2] = 0;
      *unsigned int v43 = v44;
      v43[1] = v45;
      *(_OWORD *)unsigned int v46 = *(_OWORD *)v47;
      *(void *)(a7 + v8 - 280) = *(void *)(a3 + v8 - 280);
      *(void *)(a3 + v8 - 288) = 0;
      *(void *)uint64_t v47 = 0;
      uint64_t v48 = (void *)(a7 + v8 - 272);
      *(void *)(v47 + 16) = 0;
      unsigned int v49 = (_OWORD *)(a3 + v8 - 272);
      *(void *)(a7 + v8 - 264) = 0;
      *uint64_t v48 = 0;
      *(void *)(v9 - 256) = 0;
      *(_OWORD *)uint64_t v48 = *v49;
      *(void *)(v9 - 256) = *(void *)(a3 + v8 - 256);
      *(void *)(a3 + v8 - 264) = 0;
      *(void *)unsigned int v49 = 0;
      *(void *)(v10 - 256) = 0;
      *(void *)(v9 - 248) = 0;
      *(void *)(v9 - 240) = 0;
      *(void *)(v9 - 232) = 0;
      *(_OWORD *)(v9 - 248) = *(_OWORD *)(a3 + v8 - 248);
      *(void *)(v9 - 232) = *(void *)(a3 + v8 - 232);
      *(void *)(v10 - 240) = 0;
      *(void *)(v10 - 232) = 0;
      *(void *)(v10 - 248) = 0;
      long long v50 = *(_OWORD *)(a3 + v8 - 144);
      long long v52 = *(_OWORD *)(a3 + v8 - 192);
      long long v51 = *(_OWORD *)(a3 + v8 - 176);
      *(_OWORD *)(v9 - 160) = *(_OWORD *)(a3 + v8 - 160);
      *(_OWORD *)(v9 - 144) = v50;
      *(_OWORD *)(v9 - 192) = v52;
      *(_OWORD *)(v9 - 176) = v51;
      long long v53 = *(_OWORD *)(a3 + v8 - 80);
      long long v55 = *(_OWORD *)(a3 + v8 - 128);
      long long v54 = *(_OWORD *)(a3 + v8 - 112);
      *(_OWORD *)(v9 - 96) = *(_OWORD *)(a3 + v8 - 96);
      *(_OWORD *)(v9 - 80) = v53;
      *(_OWORD *)(v9 - 128) = v55;
      *(_OWORD *)(v9 - 112) = v54;
      long long v56 = *(_OWORD *)(a3 + v8 - 16);
      long long v58 = *(_OWORD *)(a3 + v8 - 64);
      long long v57 = *(_OWORD *)(a3 + v8 - 48);
      *(_OWORD *)(v9 - 32) = *(_OWORD *)(a3 + v8 - 32);
      *(_OWORD *)(v9 - 16) = v56;
      *(_OWORD *)(v9 - 64) = v58;
      *(_OWORD *)(v9 - 48) = v57;
      long long v59 = *(_OWORD *)(a3 + v8 - 208);
      *(_OWORD *)(v9 - 224) = *(_OWORD *)(a3 + v8 - 224);
      *(_OWORD *)(v9 - 208) = v59;
      v8 -= 776;
    }
    while (a3 + v8 != a5);
  }
  return result;
}

uint64_t sub_F102F0(uint64_t *a1, void *a2, uint64_t a3, int *a4)
{
  unint64_t v5 = 0xA3A0FD5C5F02A3A1 * ((a1[1] - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x54741FAB8BE054) {
    sub_2E00();
  }
  if (0x4741FAB8BE054742 * ((a1[2] - *a1) >> 3) > v6) {
    unint64_t v6 = 0x4741FAB8BE054742 * ((a1[2] - *a1) >> 3);
  }
  if (0xA3A0FD5C5F02A3A1 * ((a1[2] - *a1) >> 3) >= 0x2A3A0FD5C5F02ALL) {
    unint64_t v10 = 0x54741FAB8BE054;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x54741FAB8BE054) {
      sub_188D718();
    }
    long long v11 = (char *)operator new(776 * v10);
  }
  else
  {
    long long v11 = 0;
  }
  uint64_t v12 = (uint64_t)&v11[776 * v5];
  uint64_t v18 = &v11[776 * v10];
  if (*(char *)(a3 + 23) < 0)
  {
    sub_4200(__p, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a3;
    uint64_t v20 = *(void *)(a3 + 16);
  }
  sub_F6CDC4(v12, a2, (uint64_t *)__p, *a4);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p[0]);
  }
  sub_F0FFD0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, v12, v12);
  long long v13 = (char *)*a1;
  uint64_t v14 = (char *)a1[1];
  *a1 = v15;
  a1[1] = v12 + 776;
  a1[2] = (uint64_t)v18;
  if (v14 == v13)
  {
    if (v13) {
LABEL_18:
    }
      operator delete(v13);
  }
  else
  {
    do
    {
      long long v17 = v14 - 776;
      sub_381A68((void *)v14 - 93);
      if (*(v14 - 745) < 0) {
        operator delete(*((void **)v14 - 96));
      }
      v14 -= 776;
    }
    while (v17 != v13);
    if (v13) {
      goto LABEL_18;
    }
  }
  return v12 + 776;
}

void sub_F104DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
  {
    operator delete(__p);
    sub_F0FF58((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  sub_F0FF58((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_F10514()
{
  unk_25FCBBF = 16641;
  word_25FCBA8 = 65;
  byte_25FCBD7 = 1;
  byte_25FCBC1 = 0;
  byte_25FCBEF = 8;
  strcpy((char *)&xmmword_25FCBD8, "standard");
}

uint64_t sub_F1055C(uint64_t a1, void *a2, uint64_t *a3, int a4)
{
  uint64_t v5 = *a3;
  *(void *)&long long v10 = a3[1];
  *(void *)((char *)&v10 + 7) = *(uint64_t *)((char *)a3 + 15);
  char v6 = *((unsigned char *)a3 + 23);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  *(_DWORD *)a1 = a4;
  *(void *)(a1 + 23) = *(void *)((char *)&v10 + 7);
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v10;
  *(unsigned char *)(a1 + 31) = v6;
  sub_F10C28(a1 + 32, a2);
  if (*(_DWORD *)a1 == -1 || *(void *)(a1 + 376) == *(void *)(a1 + 384))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    uint64_t v9 = (void *)sub_2F480((uint64_t)exception, 8u);
  }
  return a1;
}

void sub_F10644(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F10670(uint64_t a1, void *a2, uint64_t *a3, int a4)
{
  return sub_F1055C(a1, a2, a3, a4);
}

void sub_F10678(unsigned char *a1, void *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_25FCBF0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_25FCBF0))
  {
    sub_5E5C(qword_25FCC50, "feature_flags");
    __cxa_guard_release(&qword_25FCBF0);
  }
  if (sub_58070(a2, (uint64_t)qword_25FCC50))
  {
    long long v4 = (uint64_t *)sub_5C4AC(a2, (uint64_t)qword_25FCC50);
    uint64_t v5 = *v4;
    uint64_t v6 = v4[1];
    if (*v4 != v6)
    {
      do
      {
        if (*(_DWORD *)(v5 + 8))
        {
          exception = __cxa_allocate_exception(8uLL);
          void *exception = &off_23FDF58;
        }
        long long v7 = *(unsigned __int8 **)v5;
        v5 += 16;
        sub_F1078C(a1, v7);
      }
      while (v5 != v6);
    }
  }
}

void sub_F10774(_Unwind_Exception *a1)
{
}

void sub_F1078C(unsigned char *a1, unsigned __int8 *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_25FCBF8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_25FCBF8))
  {
    sub_5E5C(&qword_25FCC68, "penalize_sidewalks_by_car_traffic");
    __cxa_guard_release(&qword_25FCBF8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_25FCC00, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_25FCC00))
  {
    sub_5E5C(&qword_25FCC80, "penalize_sidewalk_name_changes");
    __cxa_guard_release(&qword_25FCC00);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_25FCC08, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_25FCC08))
  {
    sub_5E5C(&qword_25FCC98, "use_only_primary_name");
    __cxa_guard_release(&qword_25FCC08);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_25FCC10, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_25FCC10))
  {
    sub_5E5C(&qword_25FCCB0, "check_sidewalk_cyclability_first");
    __cxa_guard_release(&qword_25FCC10);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_25FCC18, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_25FCC18))
  {
    sub_5E5C(&qword_25FCCC8, "detect_high_bf_crosswalk_transitions");
    __cxa_guard_release(&qword_25FCC18);
  }
  uint64_t v4 = a2[23];
  size_t v5 = *((void *)a2 + 1);
  if ((v4 & 0x80u) == 0) {
    uint64_t v6 = a2[23];
  }
  else {
    uint64_t v6 = *((void *)a2 + 1);
  }
  uint64_t v7 = qword_25FCC70;
  if (byte_25FCC7F >= 0) {
    uint64_t v7 = byte_25FCC7F;
  }
  if (v6 != v7) {
    goto LABEL_22;
  }
  if (byte_25FCC7F >= 0) {
    uint64_t v8 = &qword_25FCC68;
  }
  else {
    uint64_t v8 = (uint64_t *)qword_25FCC68;
  }
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v8, *((void *)a2 + 1))) {
      goto LABEL_22;
    }
LABEL_77:
    *a1 = 1;
    return;
  }
  if (!a2[23]) {
    goto LABEL_77;
  }
  uint64_t v9 = a2;
  uint64_t v10 = a2[23];
  while (*v9 == *(unsigned __int8 *)v8)
  {
    ++v9;
    uint64_t v8 = (uint64_t *)((char *)v8 + 1);
    if (!--v10) {
      goto LABEL_77;
    }
  }
LABEL_22:
  uint64_t v11 = qword_25FCC88;
  if (byte_25FCC97 >= 0) {
    uint64_t v11 = byte_25FCC97;
  }
  if (v6 != v11) {
    goto LABEL_35;
  }
  if (byte_25FCC97 >= 0) {
    uint64_t v12 = &qword_25FCC80;
  }
  else {
    uint64_t v12 = (uint64_t *)qword_25FCC80;
  }
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v12, v5)) {
      goto LABEL_35;
    }
    goto LABEL_47;
  }
  if (!v4)
  {
LABEL_47:
    ++a1;
    goto LABEL_77;
  }
  long long v13 = a2;
  uint64_t v14 = v4;
  while (*v13 == *(unsigned __int8 *)v12)
  {
    ++v13;
    uint64_t v12 = (uint64_t *)((char *)v12 + 1);
    if (!--v14) {
      goto LABEL_47;
    }
  }
LABEL_35:
  uint64_t v15 = qword_25FCCA0;
  if (byte_25FCCAF >= 0) {
    uint64_t v15 = byte_25FCCAF;
  }
  if (v6 != v15) {
    goto LABEL_49;
  }
  if (byte_25FCCAF >= 0) {
    long long v16 = &qword_25FCC98;
  }
  else {
    long long v16 = (uint64_t *)qword_25FCC98;
  }
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v16, v5)) {
      goto LABEL_49;
    }
    goto LABEL_61;
  }
  if (!v4)
  {
LABEL_61:
    a1 += 2;
    goto LABEL_77;
  }
  long long v17 = a2;
  uint64_t v18 = v4;
  while (*v17 == *(unsigned __int8 *)v16)
  {
    ++v17;
    long long v16 = (uint64_t *)((char *)v16 + 1);
    if (!--v18) {
      goto LABEL_61;
    }
  }
LABEL_49:
  uint64_t v19 = qword_25FCCB8;
  if (byte_25FCCC7 >= 0) {
    uint64_t v19 = byte_25FCCC7;
  }
  if (v6 != v19) {
    goto LABEL_63;
  }
  if (byte_25FCCC7 >= 0) {
    uint64_t v20 = &qword_25FCCB0;
  }
  else {
    uint64_t v20 = (uint64_t *)qword_25FCCB0;
  }
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v20, v5)) {
      goto LABEL_63;
    }
    goto LABEL_74;
  }
  if (!v4)
  {
LABEL_74:
    a1 += 3;
    goto LABEL_77;
  }
  uint64_t v21 = a2;
  uint64_t v22 = v4;
  while (*v21 == *(unsigned __int8 *)v20)
  {
    ++v21;
    uint64_t v20 = (uint64_t *)((char *)v20 + 1);
    if (!--v22) {
      goto LABEL_74;
    }
  }
LABEL_63:
  uint64_t v23 = qword_25FCCD0;
  if (byte_25FCCDF >= 0) {
    uint64_t v23 = byte_25FCCDF;
  }
  if (v6 != v23) {
    return;
  }
  if (byte_25FCCDF >= 0) {
    long long v24 = &qword_25FCCC8;
  }
  else {
    long long v24 = (uint64_t *)qword_25FCCC8;
  }
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v24, v5)) {
      return;
    }
    goto LABEL_76;
  }
  if (!v4)
  {
LABEL_76:
    a1 += 4;
    goto LABEL_77;
  }
  while (*a2 == *(unsigned __int8 *)v24)
  {
    ++a2;
    long long v24 = (uint64_t *)((char *)v24 + 1);
    if (!--v4) {
      goto LABEL_76;
    }
  }
}

void sub_F10BB0(_Unwind_Exception *a1)
{
}

void sub_F10BC8(_Unwind_Exception *a1)
{
}

void sub_F10BE0(_Unwind_Exception *a1)
{
}

void sub_F10BF8(_Unwind_Exception *a1)
{
}

void sub_F10C10(_Unwind_Exception *a1)
{
}

uint64_t sub_F10C28(uint64_t a1, void *a2)
{
  *(unsigned char *)(a1 + 4) = 0;
  *(_DWORD *)a1 = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 8) = _Q0;
  *(_OWORD *)(a1 + 24) = xmmword_20F0F70;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(a1 + 40) = _Q0;
  long long v290 = _Q0;
  *(_OWORD *)(a1 + 56) = _Q0;
  *(void *)(a1 + 72) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 224) = 0u;
  uint64_t v10 = a1 + 224;
  uint64_t v288 = a1 + 272;
  uint64_t v289 = a1 + 248;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(void *)(a1 + 336) = 0;
  uint64_t v11 = operator new(0x18uLL);
  *(_OWORD *)uint64_t v11 = v290;
  v11[2] = 0x3FF0000000000000;
  *(void *)(a1 + 320) = v11;
  *(void *)(a1 + 328) = v11 + 3;
  *(void *)(a1 + 336) = v11 + 3;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  uint64_t v12 = (char *)operator new(0x20uLL);
  *(_DWORD *)uint64_t v12 = 0;
  *(_OWORD *)(v12 + 8) = v290;
  *((void *)v12 + 3) = 0x3FF0000000000000;
  *(void *)(a1 + 344) = v12;
  *(void *)(a1 + 352) = v12 + 32;
  *(void *)(a1 + 360) = v12 + 32;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  long long v13 = operator new(0x20uLL);
  _OWORD *v13 = xmmword_20B8F70;
  v13[1] = v290;
  *(void *)(a1 + 368) = v13;
  *(void *)(a1 + 376) = v13 + 2;
  *(void *)(a1 + 384) = v13 + 2;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  uint64_t v14 = operator new(0x20uLL);
  *(void *)(a1 + 400) = v14 + 2;
  *(void *)(a1 + 408) = v14 + 2;
  *uint64_t v14 = xmmword_20B8F70;
  v14[1] = v290;
  *(void *)(a1 + 392) = v14;
  *(_OWORD *)(a1 + 416) = v290;
  *(_OWORD *)(a1 + 432) = v290;
  *(_OWORD *)(a1 + 448) = v290;
  *(_OWORD *)(a1 + 464) = v290;
  *(_OWORD *)(a1 + 480) = v290;
  *(_OWORD *)(a1 + 496) = v290;
  *(_OWORD *)(a1 + 512) = v290;
  *(_OWORD *)(a1 + 528) = v290;
  *(_OWORD *)(a1 + 544) = v290;
  *(_OWORD *)(a1 + 560) = v290;
  *(_OWORD *)(a1 + 576) = v290;
  *(_OWORD *)(a1 + 592) = v290;
  *(_OWORD *)(a1 + 608) = v290;
  *(_OWORD *)(a1 + 624) = v290;
  *(_OWORD *)(a1 + 640) = v290;
  *(_OWORD *)(a1 + 656) = v290;
  *(_OWORD *)(a1 + 672) = v290;
  *(_OWORD *)(a1 + 688) = v290;
  *(_OWORD *)(a1 + 704) = v290;
  *(_OWORD *)(a1 + 720) = v290;
  *(_OWORD *)(a1 + 736) = v290;
  *(_OWORD *)(a1 + 752) = v290;
  *(_OWORD *)(a1 + 768) = v290;
  *(_OWORD *)(a1 + 784) = v290;
  *(void *)(a1 + 816) = 0;
  *(_OWORD *)(a1 + 800) = 0u;
  uint64_t v15 = (char *)operator new(0x48uLL);
  long long v16 = (void **)(a1 + 824);
  *(void *)(a1 + 800) = v15;
  long long v17 = v15 + 72;
  *(void *)(a1 + 816) = v15 + 72;
  memset_pattern16(v15, &unk_20F0FB0, 0x48uLL);
  *(void *)(a1 + 808) = v17;
  long long v287 = (void **)(a1 + 848);
  *(_OWORD *)(a1 + 872) = 0u;
  uint64_t v18 = (void **)(a1 + 872);
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 883) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  uint64_t v19 = (char *)operator new(0x18uLL);
  *(void *)(a1 + 944) = v19;
  *(void *)(a1 + 960) = v19 + 24;
  *(void *)uint64_t v19 = 0;
  *(_OWORD *)(v19 + 8) = 0u;
  *(void *)(a1 + 952) = v19 + 24;
  *(unsigned char *)(a1 + 984) = 0;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 992) = v290;
  *(_OWORD *)(a1 + 1008) = v290;
  *(_OWORD *)(a1 + 1024) = v290;
  uint64_t v20 = (BOOL *)(a1 + 1040);
  *(_DWORD *)(a1 + 1040) = 256;
  *(unsigned char *)(a1 + 1044) = 1;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  uint64_t v21 = operator new(0x10uLL);
  uint64_t v22 = (void **)(a1 + 1112);
  *(void *)(a1 + 1088) = v21;
  *(void *)(a1 + 1104) = v21 + 2;
  *uint64_t v21 = 0;
  v21[1] = 0;
  *(void *)(a1 + 1096) = v21 + 2;
  *(void *)(a1 + 1120) = 0;
  *(void *)(a1 + 1128) = 0;
  *(void *)(a1 + 1112) = 0;
  uint64_t v23 = operator new(0x10uLL);
  *(void *)(a1 + 1112) = v23;
  *(void *)(a1 + 1128) = v23 + 2;
  void *v23 = 0;
  v23[1] = 0;
  *(void *)(a1 + 1120) = v23 + 2;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1152) = 0u;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(void *)(a1 + 1264) = 0;
  long long v24 = (char *)operator new(0xB50uLL);
  long long v285 = (void **)(a1 + 1248);
  *(void *)(a1 + 1248) = v24;
  long long v25 = v24 + 2896;
  *(void *)(a1 + 1264) = v24 + 2896;
  bzero(v24, 0xB50uLL);
  *(void *)(a1 + 1256) = v25;
  *(void *)(a1 + 1272) = 0;
  long long v26 = (void **)(a1 + 1272);
  *(void *)(a1 + 1280) = 0;
  *(void *)(a1 + 1288) = 0;
  long long v27 = (char *)operator new(0xB50uLL);
  *(void *)(a1 + 1272) = v27;
  long long v28 = v27 + 2896;
  *(void *)(a1 + 1288) = v27 + 2896;
  bzero(v27, 0xB50uLL);
  *(void *)(a1 + 1280) = v28;
  *(void *)(a1 + 1296) = 0x3FF0000000000000;
  long long v284 = (BOOL *)(a1 + 1304);
  sub_F159E4((void *)(a1 + 1304));
  *(_WORD *)(a1 + 1416) = 0;
  *(unsigned char *)(a1 + 1418) = 0;
  *(void *)(a1 + 1424) = 0;
  *(void *)(a1 + 1440) = 0;
  *(void *)(a1 + 1432) = 0;
  unsigned int v29 = operator new(0x18uLL);
  *(void *)(a1 + 1424) = v29;
  *(void *)(a1 + 1440) = v29 + 3;
  v29[1] = 0;
  _OWORD v29[2] = 0;
  *unsigned int v29 = 0;
  *(void *)(a1 + 1432) = v29 + 3;
  sub_F716CC((void *)(a1 + 1448));
  *(void *)(a1 + 1488) = 0;
  *(_OWORD *)(a1 + 1472) = 0u;
  uint64_t v30 = operator new(0x40uLL);
  *(void *)(a1 + 1472) = v30;
  *(void *)(a1 + 1488) = v30 + 4;
  *uint64_t v30 = 0u;
  v30[1] = 0u;
  v30[2] = 0u;
  void v30[3] = 0u;
  *(void *)(a1 + 1480) = v30 + 4;
  *(void *)(a1 + 1496) = 0;
  *(void *)(a1 + 1512) = 0;
  *(void *)(a1 + 1504) = 0;
  uint64_t v31 = operator new(0x60uLL);
  *(void *)(a1 + 1496) = v31;
  *(void *)(a1 + 1512) = v31 + 6;
  *uint64_t v31 = 0u;
  v31[1] = 0u;
  _OWORD v31[2] = 0u;
  void v31[3] = 0u;
  _OWORD v31[4] = 0u;
  v31[5] = 0u;
  *(void *)(a1 + 1504) = v31 + 6;
  *(_OWORD *)(a1 + 1520) = 0u;
  *(_OWORD *)(a1 + 1536) = 0u;
  *(_OWORD *)(a1 + 1552) = 0u;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_OWORD *)(a1 + 1600) = 0u;
  *(_OWORD *)(a1 + 1616) = 0u;
  *(_OWORD *)(a1 + 1632) = 0u;
  sub_F10678((unsigned char *)a1, a2);
  BYTE7(v295[1]) = 17;
  strcpy((char *)v295, "cycling_speed_kph");
  *(void *)&v294[0] = 0x4030000000000000;
  long long v32 = sub_58070(a2, (uint64_t)v295);
  if (v32)
  {
    unsigned int v33 = v32 + 5;
    if (*((_DWORD *)v32 + 12) != 1) {
      unsigned int v33 = v294;
    }
    *(void *)(a1 + 8) = *v33;
    if (SBYTE7(v295[1]) < 0) {
      goto LABEL_5;
    }
  }
  else
  {
    *(double *)(a1 + 8) = 16.0;
    if (SBYTE7(v295[1]) < 0) {
LABEL_5:
    }
      operator delete(*(void **)&v295[0]);
  }
  BYTE7(v295[1]) = 17;
  strcpy((char *)v295, "walking_speed_kph");
  *(void *)&v294[0] = 0x4012CCCCCCCCCCCDLL;
  uint64_t v34 = sub_58070(a2, (uint64_t)v295);
  if (v34)
  {
    unsigned int v35 = v34 + 5;
    if (*((_DWORD *)v34 + 12) != 1) {
      unsigned int v35 = v294;
    }
    *(void *)(a1 + 16) = *v35;
    if (SBYTE7(v295[1]) < 0) {
      goto LABEL_10;
    }
  }
  else
  {
    *(void *)(a1 + 16) = 0x4012CCCCCCCCCCCDLL;
    if (SBYTE7(v295[1]) < 0) {
LABEL_10:
    }
      operator delete(*(void **)&v295[0]);
  }
  *(void *)&v295[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v295 + 8) = xmmword_20B91C0;
  strcpy(*(char **)&v295[0], "fallback_ferry_speed_kph");
  *(void *)&v294[0] = 0x4041800000000000;
  uint64_t v36 = sub_58070(a2, (uint64_t)v295);
  if (v36)
  {
    unsigned int v37 = v36 + 5;
    if (*((_DWORD *)v36 + 12) != 1) {
      unsigned int v37 = v294;
    }
    *(void *)(a1 + 24) = *v37;
    if (SBYTE7(v295[1]) < 0) {
      goto LABEL_15;
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0x4041800000000000;
    if (SBYTE7(v295[1]) < 0) {
LABEL_15:
    }
      operator delete(*(void **)&v295[0]);
  }
  BYTE7(v295[1]) = 14;
  strcpy((char *)v295, "walking_factor");
  if (sub_58070(a2, (uint64_t)v295))
  {
    uint64_t v38 = (void *)sub_560F4(a2, (uint64_t)v295);
    sub_F15B20(v38);
    *(void *)(a1 + 32) = v39;
    *(void *)(a1 + 40) = v40;
    *(void *)(a1 + 48) = v41;
  }
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  BYTE7(v295[1]) = 13;
  strcpy((char *)v295, "stairs_factor");
  if (sub_58070(a2, (uint64_t)v295))
  {
    uint64_t v42 = (void *)sub_560F4(a2, (uint64_t)v295);
    sub_F15B20(v42);
    *(void *)(a1 + 56) = v43;
    *(void *)(a1 + 64) = v44;
    *(void *)(a1 + 72) = v45;
  }
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  *(void *)&v295[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v295 + 8) = xmmword_20B8890;
  strcpy(*(char **)&v295[0], "elevation_gain_factor_cycling");
  if (sub_58070(a2, (uint64_t)v295))
  {
    unsigned int v46 = (void *)sub_560F4(a2, (uint64_t)v295);
    sub_F15B20(v46);
    *(void *)(a1 + 80) = v47;
    *(void *)(a1 + 88) = v48;
    *(void *)(a1 + 96) = v49;
  }
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  *(void *)&v295[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v295 + 8) = xmmword_20B91B0;
  strcpy(*(char **)&v295[0], "elevation_gain_factor_stairs");
  if (sub_58070(a2, (uint64_t)v295))
  {
    long long v50 = (void *)sub_560F4(a2, (uint64_t)v295);
    sub_F15B20(v50);
    *(void *)(a1 + 104) = v51;
    *(void *)(a1 + 112) = v52;
    *(void *)(a1 + 120) = v53;
  }
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  *(void *)&v295[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v295 + 8) = xmmword_20B8890;
  strcpy(*(char **)&v295[0], "elevation_gain_factor_walking");
  if (sub_58070(a2, (uint64_t)v295))
  {
    long long v54 = (void *)sub_560F4(a2, (uint64_t)v295);
    sub_F15B20(v54);
    *(void *)(a1 + 128) = v55;
    *(void *)(a1 + 136) = v56;
    *(void *)(a1 + 144) = v57;
  }
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  *(void *)&v295[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v295 + 8) = xmmword_20B8890;
  strcpy(*(char **)&v295[0], "elevation_loss_factor_cycling");
  if (sub_58070(a2, (uint64_t)v295))
  {
    long long v58 = (void *)sub_560F4(a2, (uint64_t)v295);
    sub_F15B20(v58);
    *(void *)(a1 + 152) = v59;
    *(void *)(a1 + 160) = v60;
    *(void *)(a1 + 168) = v61;
  }
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  *(void *)&v295[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v295 + 8) = xmmword_20B91B0;
  strcpy(*(char **)&v295[0], "elevation_loss_factor_stairs");
  if (sub_58070(a2, (uint64_t)v295))
  {
    unsigned int v62 = (void *)sub_560F4(a2, (uint64_t)v295);
    sub_F15B20(v62);
    *(void *)(a1 + 176) = v63;
    *(void *)(a1 + 184) = v64;
    *(void *)(a1 + 192) = v65;
  }
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  *(void *)&v295[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v295 + 8) = xmmword_20B8890;
  strcpy(*(char **)&v295[0], "elevation_loss_factor_walking");
  if (sub_58070(a2, (uint64_t)v295))
  {
    unsigned int v66 = (void *)sub_560F4(a2, (uint64_t)v295);
    sub_F15B20(v66);
    *(void *)(a1 + 200) = v67;
    *(void *)(a1 + 208) = v68;
    *(void *)(a1 + 216) = v69;
  }
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  *(void *)&v295[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v295 + 8) = xmmword_20B8870;
  strcpy(*(char **)&v295[0], "elevation_factors_cycling");
  sub_F15C54(a2, (uint64_t)v295, v10);
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  *(void *)&v295[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v295 + 8) = xmmword_20B91C0;
  strcpy(*(char **)&v295[0], "elevation_factors_stairs");
  sub_F15C54(a2, (uint64_t)v295, v289);
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  *(void *)&v295[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v295 + 8) = xmmword_20B8870;
  strcpy(*(char **)&v295[0], "elevation_factors_walking");
  sub_F15C54(a2, (uint64_t)v295, v288);
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  strcpy((char *)v295, "elevation_gain_penalty");
  BYTE7(v295[1]) = 22;
  if (sub_58070(a2, (uint64_t)v295))
  {
    double v70 = (void *)sub_560F4(a2, (uint64_t)v295);
    *(void *)(a1 + 296) = sub_ED57A0(v70);
    *(void *)(a1 + 304) = v71;
  }
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  *(void *)&v295[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v295 + 8) = xmmword_20B91C0;
  strcpy(*(char **)&v295[0], "high_speed_threshold_kph");
  sub_5D63C(a2, (uint64_t)v295, (uint64_t *)(a1 + 312));
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  BYTE7(v295[1]) = 16;
  strcpy((char *)v295, "car_lane_factors");
  sub_F14F1C(a2, (uint64_t)v295, a1 + 320);
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  BYTE7(v295[1]) = 17;
  strcpy((char *)v295, "car_speed_factors");
  unsigned int v72 = sub_58070(a2, (uint64_t)v295);
  unsigned int v73 = v72;
  if (SBYTE7(v295[1]) < 0)
  {
    operator delete(*(void **)&v295[0]);
    if (!v73) {
      goto LABEL_74;
    }
  }
  else if (!v72)
  {
    goto LABEL_74;
  }
  BYTE7(v295[1]) = 17;
  strcpy((char *)v295, "car_speed_factors");
  sub_F160A0(a2, (uint64_t)v295, a1 + 344);
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
LABEL_74:
  *(void *)&v295[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v295 + 8) = xmmword_20B91B0;
  strcpy(*(char **)&v295[0], "normalized_car_trips_factors");
  sub_F15C54(a2, (uint64_t)v295, a1 + 368);
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  *(void *)&v295[0] = operator new(0x28uLL);
  *(_OWORD *)((char *)v295 + 8) = xmmword_20B9280;
  strcpy(*(char **)&v295[0], "normalized_car_trips_entry_penalty");
  sub_F16324(a2, (uint64_t)v295, a1 + 944);
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  *(void *)&v295[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v295 + 8) = xmmword_20B9800;
  strcpy(*(char **)&v295[0], "normalized_probe_count_factors");
  sub_F15C54(a2, (uint64_t)v295, a1 + 392);
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  *(void *)&v295[0] = operator new(0x19uLL);
  *(_OWORD *)((char *)v295 + 8) = xmmword_20B9250;
  strcpy(*(char **)&v295[0], "designated_route_factor");
  if (sub_58070(a2, (uint64_t)v295))
  {
    unsigned int v74 = (void *)sub_560F4(a2, (uint64_t)v295);
    sub_F15B20(v74);
    *(void *)(a1 + 416) = v75;
    *(void *)(a1 + 424) = v76;
    *(void *)(a1 + 432) = v77;
  }
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  BYTE7(v295[1]) = 18;
  strcpy((char *)v295, "shared_lane_factor");
  if (sub_58070(a2, (uint64_t)v295))
  {
    unsigned int v78 = (void *)sub_560F4(a2, (uint64_t)v295);
    sub_F15B20(v78);
    *(void *)(a1 + 440) = v79;
    *(void *)(a1 + 448) = v80;
    *(void *)(a1 + 456) = v81;
  }
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  BYTE7(v295[1]) = 21;
  strcpy((char *)v295, "dedicated_lane_factor");
  if (sub_58070(a2, (uint64_t)v295))
  {
    double v82 = (void *)sub_560F4(a2, (uint64_t)v295);
    sub_F15B20(v82);
    *(void *)(a1 + 464) = v83;
    *(void *)(a1 + 472) = v84;
    *(void *)(a1 + 480) = v85;
  }
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  *(void *)&v295[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v295 + 8) = xmmword_20B5EB0;
  strcpy(*(char **)&v295[0], "semi_dedicated_lane_factor");
  if (sub_58070(a2, (uint64_t)v295))
  {
    double v86 = (void *)sub_560F4(a2, (uint64_t)v295);
    sub_F15B20(v86);
    *(void *)(a1 + 536) = v87;
    *(void *)(a1 + 544) = v88;
    *(void *)(a1 + 552) = v89;
  }
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  BYTE7(v295[1]) = 21;
  strcpy((char *)v295, "protected_lane_factor");
  if (sub_58070(a2, (uint64_t)v295))
  {
    uint64_t v90 = (void *)sub_560F4(a2, (uint64_t)v295);
    sub_F15B20(v90);
    *(void *)(a1 + 488) = v91;
    *(void *)(a1 + 496) = v92;
    *(void *)(a1 + 504) = v93;
  }
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  BYTE7(v295[1]) = 21;
  strcpy((char *)v295, "legal_priority_factor");
  if (sub_58070(a2, (uint64_t)v295))
  {
    unsigned int v94 = (void *)sub_560F4(a2, (uint64_t)v295);
    sub_F15B20(v94);
    *(void *)(a1 + 512) = v95;
    *(void *)(a1 + 520) = v96;
    *(void *)(a1 + 528) = v97;
  }
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  *(void *)&v295[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v295 + 8) = xmmword_20B5EB0;
  strcpy(*(char **)&v295[0], "upgraded_expressway_factor");
  if (sub_58070(a2, (uint64_t)v295))
  {
    unsigned int v98 = (void *)sub_560F4(a2, (uint64_t)v295);
    sub_F15B20(v98);
    *(void *)(a1 + 560) = v99;
    *(void *)(a1 + 568) = v100;
    *(void *)(a1 + 576) = v101;
  }
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  *(void *)&v295[0] = operator new(0x28uLL);
  *(_OWORD *)((char *)v295 + 8) = xmmword_20B9390;
  strcpy(*(char **)&v295[0], "hindered_by_embedded_rail_factor");
  if (sub_58070(a2, (uint64_t)v295))
  {
    uint64_t v102 = (void *)sub_560F4(a2, (uint64_t)v295);
    sub_F15B20(v102);
    *(void *)(a1 + 584) = v103;
    *(void *)(a1 + 592) = v104;
    *(void *)(a1 + 600) = v105;
  }
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  *(void *)&v295[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v295 + 8) = xmmword_20B9800;
  strcpy(*(char **)&v295[0], "hindered_by_pedestrians_factor");
  if (sub_58070(a2, (uint64_t)v295))
  {
    double v106 = (void *)sub_560F4(a2, (uint64_t)v295);
    sub_F15B20(v106);
    *(void *)(a1 + 608) = v107;
    *(void *)(a1 + 616) = v108;
    *(void *)(a1 + 624) = v109;
  }
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  *(void *)&v295[0] = operator new(0x38uLL);
  *(_OWORD *)((char *)v295 + 8) = xmmword_20B9A10;
  strcpy(*(char **)&v295[0], "uncomfortably_counterflow_to_motor_traffic_factor");
  if (sub_58070(a2, (uint64_t)v295))
  {
    double v110 = (void *)sub_560F4(a2, (uint64_t)v295);
    sub_F15B20(v110);
    *(void *)(a1 + 632) = v111;
    *(void *)(a1 + 640) = v112;
    *(void *)(a1 + 648) = v113;
  }
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  *(void *)&v295[0] = operator new(0x28uLL);
  *(_OWORD *)((char *)v295 + 8) = xmmword_20B9280;
  strcpy(*(char **)&v295[0], "poor_road_condition_factor_cycling");
  if (sub_58070(a2, (uint64_t)v295))
  {
    double v114 = (void *)sub_560F4(a2, (uint64_t)v295);
    sub_F15B20(v114);
    *(void *)(a1 + 656) = v115;
    *(void *)(a1 + 664) = v116;
    *(void *)(a1 + 672) = v117;
  }
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  strcpy((char *)v295, "unpaved_factor_cycling");
  BYTE7(v295[1]) = 22;
  if (sub_58070(a2, (uint64_t)v295))
  {
    uint64_t v118 = (void *)sub_560F4(a2, (uint64_t)v295);
    sub_F15B20(v118);
    *(void *)(a1 + 680) = v119;
    *(void *)(a1 + 688) = v120;
    *(void *)(a1 + 696) = v121;
  }
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  BYTE7(v295[1]) = 19;
  strcpy((char *)v295, "not_drivable_factor");
  if (sub_58070(a2, (uint64_t)v295))
  {
    BOOL v122 = (void *)sub_560F4(a2, (uint64_t)v295);
    sub_F15B20(v122);
    *(void *)(a1 + 704) = v123;
    *(void *)(a1 + 712) = v124;
    *(void *)(a1 + 720) = v125;
  }
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  *(void *)&v295[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v295 + 8) = xmmword_20B91A0;
  strcpy(*(char **)&v295[0], "non_drivable_factor_walking");
  if (sub_58070(a2, (uint64_t)v295))
  {
    double v126 = (void *)sub_560F4(a2, (uint64_t)v295);
    sub_F15B20(v126);
    *(void *)(a1 + 728) = v127;
    *(void *)(a1 + 736) = v128;
    *(void *)(a1 + 744) = v129;
  }
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  *(void *)&v295[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v295 + 8) = xmmword_20B9800;
  strcpy(*(char **)&v295[0], "shared_with_pedestrians_factor");
  if (sub_58070(a2, (uint64_t)v295))
  {
    double v130 = (void *)sub_560F4(a2, (uint64_t)v295);
    sub_F15B20(v130);
    *(void *)(a1 + 752) = v131;
    *(void *)(a1 + 760) = v132;
    *(void *)(a1 + 768) = v133;
  }
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  BYTE7(v295[1]) = 12;
  strcpy((char *)v295, "ferry_factor");
  if (sub_58070(a2, (uint64_t)v295))
  {
    double v134 = (void *)sub_560F4(a2, (uint64_t)v295);
    sub_F15B20(v134);
    *(void *)(a1 + 776) = v135;
    *(void *)(a1 + 784) = v136;
    *(void *)(a1 + 792) = v137;
  }
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  BYTE7(v295[1]) = 14;
  strcpy((char *)v295, "tunnel_factors");
  sub_F14F1C(a2, (uint64_t)v295, a1 + 800);
  long long v138 = v290;
  if (SBYTE7(v295[1]) < 0)
  {
    operator delete(*(void **)&v295[0]);
    long long v138 = v290;
  }
  BYTE7(v294[1]) = 19;
  strcpy((char *)v294, "fow_factors_cycling");
  long long v292 = v138;
  uint64_t v293 = 0x3FF0000000000000;
  sub_F150C8(a2, (uint64_t)v294, (uint64_t)&off_243F0D0, (uint64_t)&v292, v295);
  uint64_t v139 = *v16;
  if (*v16)
  {
    *(void *)(a1 + 832) = v139;
    operator delete(v139);
    *long long v16 = 0;
    *(void *)(a1 + 832) = 0;
    *(void *)(a1 + 840) = 0;
  }
  *(_OWORD *)long long v16 = v295[0];
  *(void *)(a1 + 840) = *(void *)&v295[1];
  memset(v295, 0, 24);
  if (SBYTE7(v294[1]) < 0) {
    operator delete(*(void **)&v294[0]);
  }
  BYTE7(v294[1]) = 19;
  strcpy((char *)v294, "fow_factors_walking");
  long long v292 = v290;
  uint64_t v293 = 0x3FF0000000000000;
  sub_F150C8(a2, (uint64_t)v294, (uint64_t)&off_243F0D0, (uint64_t)&v292, v295);
  uint64_t v140 = *v287;
  if (*v287)
  {
    *(void *)(a1 + 856) = v140;
    operator delete(v140);
    *long long v287 = 0;
    *(void *)(a1 + 856) = 0;
    *(void *)(a1 + 864) = 0;
  }
  *(_OWORD *)(a1 + 848) = v295[0];
  *(void *)(a1 + 864) = *(void *)&v295[1];
  memset(v295, 0, 24);
  if (SBYTE7(v294[1]) < 0) {
    operator delete(*(void **)&v294[0]);
  }
  *(void *)&v295[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v295 + 8) = xmmword_20B91C0;
  strcpy(*(char **)&v295[0], "fow_transition_penalties");
  unsigned int v141 = sub_58070(a2, (uint64_t)v295);
  double v142 = v141;
  if (SBYTE7(v295[1]) < 0)
  {
    operator delete(*(void **)&v295[0]);
    if (!v142) {
      goto LABEL_162;
    }
  }
  else if (!v141)
  {
    goto LABEL_162;
  }
  *(void *)&v294[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v294 + 8) = xmmword_20B91C0;
  strcpy(*(char **)&v294[0], "fow_transition_penalties");
  double v143 = (uint64_t *)sub_5C4AC(a2, (uint64_t)v294);
  sub_F3DAA8(v143, (uint64_t)v295);
  double v144 = *v18;
  if (*v18)
  {
    *(void *)(a1 + 880) = v144;
    operator delete(v144);
    char *v18 = 0;
    *(void *)(a1 + 880) = 0;
    *(void *)(a1 + 888) = 0;
  }
  *(_OWORD *)uint64_t v18 = v295[0];
  *(void *)(a1 + 888) = *(void *)&v295[1];
  memset(v295, 0, 24);
  if (SBYTE7(v294[1]) < 0) {
    operator delete(*(void **)&v294[0]);
  }
LABEL_162:
  *(void *)&v295[0] = operator new(0x28uLL);
  *(_OWORD *)((char *)v295 + 8) = xmmword_20E12D0;
  strcpy(*(char **)&v295[0], "ignore_fow_factors_if_cycling_friendly");
  double v145 = sub_58070(a2, (uint64_t)v295);
  if (v145 && (int v146 = *((_DWORD *)v145 + 12), (v146 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 896) = v146 == 4;
    if (SBYTE7(v295[1]) < 0) {
      goto LABEL_167;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 896) = *(unsigned char *)(a1 + 896) != 0;
    if (SBYTE7(v295[1]) < 0) {
LABEL_167:
    }
      operator delete(*(void **)&v295[0]);
  }
  *(void *)&v295[0] = operator new(0x30uLL);
  *(_OWORD *)((char *)v295 + 8) = xmmword_20B93C0;
  strcpy(*(char **)&v295[0], "ignore_non_drivable_turn_against_traffic");
  double v147 = sub_58070(a2, (uint64_t)v295);
  if (v147 && (int v148 = *((_DWORD *)v147 + 12), (v148 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 897) = v148 == 4;
    if (SBYTE7(v295[1]) < 0) {
      goto LABEL_173;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 897) = *(unsigned char *)(a1 + 897) != 0;
    if (SBYTE7(v295[1]) < 0) {
LABEL_173:
    }
      operator delete(*(void **)&v295[0]);
  }
  BYTE7(v295[1]) = 15;
  strcpy((char *)v295, "enable_barriers");
  double v149 = sub_58070(a2, (uint64_t)v295);
  if (v149 && (int v150 = *((_DWORD *)v149 + 12), (v150 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 898) = v150 == 4;
    if ((SBYTE7(v295[1]) & 0x80000000) == 0) {
      goto LABEL_180;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 898) = *(unsigned char *)(a1 + 898) != 0;
    if ((SBYTE7(v295[1]) & 0x80000000) == 0) {
      goto LABEL_180;
    }
  }
  operator delete(*(void **)&v295[0]);
LABEL_180:
  *(void *)&v295[0] = operator new(0x28uLL);
  *(_OWORD *)((char *)v295 + 8) = xmmword_20B93A0;
  strcpy(*(char **)&v295[0], "unsafe_crosswalk_transition_penalty");
  if (sub_58070(a2, (uint64_t)v295))
  {
    double v151 = (void *)sub_560F4(a2, (uint64_t)v295);
    *(void *)(a1 + 904) = sub_ED57A0(v151);
    *(void *)(a1 + 912) = v152;
  }
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  strcpy((char *)v295, "tcd_lookahead_distance");
  BYTE7(v295[1]) = 22;
  sub_D85214(a2, (uint64_t)v295, (uint64_t *)(a1 + 920));
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  *(void *)&v295[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v295 + 8) = xmmword_20B91C0;
  strcpy(*(char **)&v295[0], "impeding_barrier_penalty");
  if (sub_58070(a2, (uint64_t)v295))
  {
    double v153 = (void *)sub_560F4(a2, (uint64_t)v295);
    *(void *)(a1 + 928) = sub_ED57A0(v153);
    *(void *)(a1 + 936) = v154;
  }
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  *(void *)&v295[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v295 + 8) = xmmword_20B8890;
  strcpy(*(char **)&v295[0], "unpaved_entry_penalty_cycling");
  if (sub_58070(a2, (uint64_t)v295))
  {
    double v155 = (void *)sub_560F4(a2, (uint64_t)v295);
    *(void *)(a1 + 968) = sub_ED57A0(v155);
    *(void *)(a1 + 976) = v156;
  }
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  *(void *)&v295[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v295 + 8) = xmmword_20B8890;
  strcpy(*(char **)&v295[0], "sidewalk_deviation_correction");
  int v157 = sub_58070(a2, (uint64_t)v295);
  BOOL v158 = v157;
  if (SBYTE7(v295[1]) < 0)
  {
    operator delete(*(void **)&v295[0]);
    if (!v158) {
      goto LABEL_214;
    }
  }
  else if (!v157)
  {
    goto LABEL_214;
  }
  *(void *)&v295[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v295 + 8) = xmmword_20B8890;
  strcpy(*(char **)&v295[0], "sidewalk_deviation_correction");
  int v159 = (void *)sub_560F4(a2, (uint64_t)v295);
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  *(void *)&v295[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v295 + 8) = xmmword_20B91C0;
  strcpy(*(char **)&v295[0], "enable_for_all_car_costs");
  int v160 = sub_58070(v159, (uint64_t)v295);
  if (v160 && (int v161 = *((_DWORD *)v160 + 12), (v161 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 984) = v161 == 4;
    if (SBYTE7(v295[1]) < 0) {
      goto LABEL_205;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 984) = *(unsigned char *)(a1 + 984) != 0;
    if (SBYTE7(v295[1]) < 0) {
LABEL_205:
    }
      operator delete(*(void **)&v295[0]);
  }
  BYTE7(v295[1]) = 16;
  strcpy((char *)v295, "sidewalk_penalty");
  if (sub_58070(v159, (uint64_t)v295))
  {
    double v162 = (void *)sub_560F4(v159, (uint64_t)v295);
    sub_F15B20(v162);
    *(void *)(a1 + 992) = v163;
    *(void *)(a1 + 1000) = v164;
    *(void *)(a1 + 1008) = v165;
  }
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  *(void *)&v295[0] = operator new(0x19uLL);
  *(_OWORD *)((char *)v295 + 8) = xmmword_20B9250;
  strcpy(*(char **)&v295[0], "bike_nav_sidewalk_boost");
  if (sub_58070(v159, (uint64_t)v295))
  {
    double v166 = (void *)sub_560F4(v159, (uint64_t)v295);
    sub_F15B20(v166);
    *(void *)(a1 + 1016) = v167;
    *(void *)(a1 + 1024) = v168;
    *(void *)(a1 + 1032) = v169;
  }
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
LABEL_214:
  *(void *)&v295[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v295 + 8) = xmmword_20B8890;
  strcpy(*(char **)&v295[0], "mode_transition_protectedness");
  double v170 = sub_58070(a2, (uint64_t)v295);
  double v171 = v170;
  if (SBYTE7(v295[1]) < 0)
  {
    operator delete(*(void **)&v295[0]);
    double v172 = &unk_20B8000;
    if (!v171) {
      goto LABEL_295;
    }
  }
  else
  {
    double v172 = (_OWORD *)&unk_20B8000;
    if (!v170) {
      goto LABEL_295;
    }
  }
  *(void *)&v295[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v295 + 8) = xmmword_20B8890;
  strcpy(*(char **)&v295[0], "mode_transition_protectedness");
  double v173 = (void *)sub_560F4(a2, (uint64_t)v295);
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  BYTE7(v295[1]) = 6;
  strcpy((char *)v295, "enable");
  double v174 = sub_58070(v173, (uint64_t)v295);
  if (v174 && (int v175 = *((_DWORD *)v174 + 12), (v175 & 0xFFFFFFFE) == 4))
  {
    *uint64_t v20 = v175 == 4;
    if (SBYTE7(v295[1]) < 0) {
      goto LABEL_225;
    }
  }
  else
  {
    *uint64_t v20 = *v20;
    if (SBYTE7(v295[1]) < 0) {
LABEL_225:
    }
      operator delete(*(void **)&v295[0]);
  }
  BYTE7(v295[1]) = 14;
  strcpy((char *)v295, "check_ped_xing");
  double v176 = sub_58070(v173, (uint64_t)v295);
  if (v176 && (int v177 = *((_DWORD *)v176 + 12), (v177 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 1044) = v177 == 4;
    if (SBYTE7(v295[1]) < 0) {
      goto LABEL_231;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 1044) = *(unsigned char *)(a1 + 1044) != 0;
    if (SBYTE7(v295[1]) < 0) {
LABEL_231:
    }
      operator delete(*(void **)&v295[0]);
  }
  *(void *)&v295[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v295 + 8) = xmmword_20B5EB0;
  strcpy(*(char **)&v295[0], "ignore_t_driving_junctions");
  unsigned int v178 = sub_58070(v173, (uint64_t)v295);
  if (v178 && (int v179 = *((_DWORD *)v178 + 12), (v179 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 1041) = v179 == 4;
    if (SBYTE7(v295[1]) < 0) {
      goto LABEL_237;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 1041) = *(unsigned char *)(a1 + 1041) != 0;
    if (SBYTE7(v295[1]) < 0) {
LABEL_237:
    }
      operator delete(*(void **)&v295[0]);
  }
  *(void *)&v295[0] = operator new(0x20uLL);
  long long v286 = v172[233];
  *(_OWORD *)((char *)v295 + 8) = v286;
  strcpy(*(char **)&v295[0], "check_for_opposite_side_remount");
  double v180 = sub_58070(v173, (uint64_t)v295);
  if (v180 && (int v181 = *((_DWORD *)v180 + 12), (v181 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 1042) = v181 == 4;
    if (SBYTE7(v295[1]) < 0) {
      goto LABEL_243;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 1042) = *(unsigned char *)(a1 + 1042) != 0;
    if (SBYTE7(v295[1]) < 0) {
LABEL_243:
    }
      operator delete(*(void **)&v295[0]);
  }
  *(void *)&v295[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v295 + 8) = v286;
  strcpy(*(char **)&v295[0], "check_for_unsafe_side_of_street");
  double v182 = sub_58070(v173, (uint64_t)v295);
  if (v182 && (int v183 = *((_DWORD *)v182 + 12), (v183 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 1043) = v183 == 4;
    if (SBYTE7(v295[1]) < 0) {
      goto LABEL_249;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 1043) = *(unsigned char *)(a1 + 1043) != 0;
    if (SBYTE7(v295[1]) < 0) {
LABEL_249:
    }
      operator delete(*(void **)&v295[0]);
  }
  BYTE7(v295[1]) = 16;
  strcpy((char *)v295, "stop_sign_factor");
  double v184 = sub_58070(v173, (uint64_t)v295);
  __n128 v185 = (void *)(a1 + 1048);
  if (v184)
  {
    __n128 v185 = v184 + 5;
    if (*((_DWORD *)v184 + 12) != 1) {
      __n128 v185 = (void *)(a1 + 1048);
    }
  }
  *(void *)(a1 + 1048) = *v185;
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  *(void *)&v295[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v295 + 8) = v286;
  strcpy(*(char **)&v295[0], "ped_xing_explicit_at_end_factor");
  double v186 = sub_58070(v173, (uint64_t)v295);
  double v187 = (void *)(a1 + 1056);
  if (v186)
  {
    double v187 = v186 + 5;
    if (*((_DWORD *)v186 + 12) != 1) {
      double v187 = (void *)(a1 + 1056);
    }
  }
  *(void *)(a1 + 1056) = *v187;
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  BYTE7(v295[1]) = 16;
  strcpy((char *)v295, "crosswalk_factor");
  double v188 = sub_58070(v173, (uint64_t)v295);
  __n128 v189 = (void *)(a1 + 1064);
  if (v188)
  {
    __n128 v189 = v188 + 5;
    if (*((_DWORD *)v188 + 12) != 1) {
      __n128 v189 = (void *)(a1 + 1064);
    }
  }
  *(void *)(a1 + 1064) = *v189;
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  *(void *)&v295[0] = operator new(0x19uLL);
  *(_OWORD *)((char *)v295 + 8) = xmmword_20B9250;
  strcpy(*(char **)&v295[0], "railway_crossing_factor");
  uint64_t v190 = sub_58070(v173, (uint64_t)v295);
  uint64_t v191 = (void *)(a1 + 1072);
  if (v190)
  {
    uint64_t v191 = v190 + 5;
    if (*((_DWORD *)v190 + 12) != 1) {
      uint64_t v191 = (void *)(a1 + 1072);
    }
  }
  *(void *)(a1 + 1072) = *v191;
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  BYTE7(v295[1]) = 20;
  strcpy((char *)v295, "traffic_light_factor");
  uint64_t v192 = sub_58070(v173, (uint64_t)v295);
  uint64_t v193 = (void *)(a1 + 1080);
  if (v192)
  {
    uint64_t v193 = v192 + 5;
    if (*((_DWORD *)v192 + 12) != 1) {
      uint64_t v193 = (void *)(a1 + 1080);
    }
  }
  *(void *)(a1 + 1080) = *v193;
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  BYTE7(v295[1]) = 18;
  strcpy((char *)v295, "dismount_penalties");
  uint64_t v194 = sub_58070(v173, (uint64_t)v295);
  uint64_t v195 = v194;
  if (SBYTE7(v295[1]) < 0)
  {
    operator delete(*(void **)&v295[0]);
    if (!v195) {
      goto LABEL_285;
    }
  }
  else if (!v194)
  {
    goto LABEL_285;
  }
  memset(v295, 0, 24);
  BYTE7(v294[1]) = 18;
  strcpy((char *)v294, "dismount_penalties");
  sub_F1675C(v173, (uint64_t)v294, (uint64_t)v295);
  if (SBYTE7(v294[1]) < 0) {
    operator delete(*(void **)&v294[0]);
  }
  sub_F15348((uint64_t *)v295, 1, 0, 0, (uint64_t)v294);
  uint64_t v196 = *(void **)(a1 + 1088);
  if (v196)
  {
    *(void *)(a1 + 1096) = v196;
    operator delete(v196);
    *(void *)(a1 + 1088) = 0;
    *(void *)(a1 + 1096) = 0;
    *(void *)(a1 + 1104) = 0;
  }
  *(_OWORD *)(a1 + 1088) = v294[0];
  *(void *)(a1 + 1104) = *(void *)&v294[1];
  if (*(void *)&v295[0])
  {
    *((void *)&v295[0] + 1) = *(void *)&v295[0];
    operator delete(*(void **)&v295[0]);
  }
LABEL_285:
  BYTE7(v295[1]) = 17;
  strcpy((char *)v295, "remount_penalties");
  uint64_t v197 = sub_58070(v173, (uint64_t)v295);
  uint64_t v198 = v197;
  if (SBYTE7(v295[1]) < 0)
  {
    operator delete(*(void **)&v295[0]);
    if (!v198) {
      goto LABEL_295;
    }
  }
  else if (!v197)
  {
    goto LABEL_295;
  }
  memset(v295, 0, 24);
  BYTE7(v294[1]) = 17;
  strcpy((char *)v294, "remount_penalties");
  sub_F1675C(v173, (uint64_t)v294, (uint64_t)v295);
  if (SBYTE7(v294[1]) < 0) {
    operator delete(*(void **)&v294[0]);
  }
  sub_F15348((uint64_t *)v295, 1, 0, 0, (uint64_t)v294);
  double v199 = *v22;
  if (*v22)
  {
    *(void *)(a1 + 1120) = v199;
    operator delete(v199);
    *uint64_t v22 = 0;
    *(void *)(a1 + 1120) = 0;
    *(void *)(a1 + 1128) = 0;
  }
  *(_OWORD *)uint64_t v22 = v294[0];
  *(void *)(a1 + 1128) = *(void *)&v294[1];
  if (*(void *)&v295[0])
  {
    *((void *)&v295[0] + 1) = *(void *)&v295[0];
    operator delete(*(void **)&v295[0]);
  }
LABEL_295:
  BYTE7(v295[1]) = 20;
  strcpy((char *)v295, "stairs_entry_penalty");
  if (sub_58070(a2, (uint64_t)v295))
  {
    double v200 = (void *)sub_560F4(a2, (uint64_t)v295);
    *(void *)(a1 + 1136) = sub_ED57A0(v200);
    *(void *)(a1 + 1144) = v201;
  }
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  *(void *)&v295[0] = operator new(0x19uLL);
  *(_OWORD *)((char *)v295 + 8) = xmmword_20B9250;
  strcpy(*(char **)&v295[0], "name_idx_change_penalty");
  if (sub_58070(a2, (uint64_t)v295))
  {
    double v202 = (void *)sub_560F4(a2, (uint64_t)v295);
    *(void *)(a1 + 1152) = sub_ED57A0(v202);
    *(void *)(a1 + 1160) = v203;
  }
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  *(void *)&v295[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v295 + 8) = xmmword_20B8890;
  strcpy(*(char **)&v295[0], "drivable_non_drivable_penalty");
  if (sub_58070(a2, (uint64_t)v295))
  {
    double v204 = (void *)sub_560F4(a2, (uint64_t)v295);
    *(void *)(a1 + 1168) = sub_ED57A0(v204);
    *(void *)(a1 + 1176) = v205;
  }
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  BYTE7(v295[1]) = 21;
  strcpy((char *)v295, "traffic_light_penalty");
  if (sub_58070(a2, (uint64_t)v295))
  {
    long long v206 = (void *)sub_560F4(a2, (uint64_t)v295);
    *(void *)(a1 + 1184) = sub_ED57A0(v206);
    *(void *)(a1 + 1192) = v207;
  }
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  BYTE7(v295[1]) = 17;
  strcpy((char *)v295, "stop_sign_penalty");
  if (sub_58070(a2, (uint64_t)v295))
  {
    char v208 = (void *)sub_560F4(a2, (uint64_t)v295);
    *(void *)(a1 + 1200) = sub_ED57A0(v208);
    *(void *)(a1 + 1208) = v209;
  }
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  BYTE7(v295[1]) = 19;
  strcpy((char *)v295, "ferry_entry_penalty");
  if (sub_58070(a2, (uint64_t)v295))
  {
    uint64_t v210 = (void *)sub_560F4(a2, (uint64_t)v295);
    *(void *)(a1 + 1216) = sub_ED57A0(v210);
    *(void *)(a1 + 1224) = v211;
  }
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  *(void *)&v295[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v295 + 8) = xmmword_20B91C0;
  strcpy(*(char **)&v295[0], "car_tunnel_entry_penalty");
  if (sub_58070(a2, (uint64_t)v295))
  {
    unsigned int v212 = (void *)sub_560F4(a2, (uint64_t)v295);
    *(void *)(a1 + 1232) = sub_ED57A0(v212);
    *(void *)(a1 + 1240) = v213;
  }
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  BYTE7(v295[1]) = 10;
  strcpy((char *)v295, "turn_costs");
  __n128 v214 = sub_58070(a2, (uint64_t)v295);
  uint64_t v215 = v214;
  if (SBYTE7(v295[1]) < 0)
  {
    operator delete(*(void **)&v295[0]);
    if (!v215) {
      goto LABEL_333;
    }
  }
  else if (!v214)
  {
    goto LABEL_333;
  }
  memset(v295, 0, 24);
  BYTE7(v294[1]) = 10;
  strcpy((char *)v294, "turn_costs");
  sub_F1675C(a2, (uint64_t)v294, (uint64_t)v295);
  if (SBYTE7(v294[1]) < 0) {
    operator delete(*(void **)&v294[0]);
  }
  sub_F15348((uint64_t *)v295, 1, 0, 0, (uint64_t)v294);
  int v216 = *v285;
  if (*v285)
  {
    *(void *)(a1 + 1256) = v216;
    operator delete(v216);
    *long long v285 = 0;
    *(void *)(a1 + 1256) = 0;
    *(void *)(a1 + 1264) = 0;
  }
  *(_OWORD *)(a1 + 1248) = v294[0];
  *(void *)(a1 + 1264) = *(void *)&v294[1];
  if (*(void *)&v295[0])
  {
    *((void *)&v295[0] + 1) = *(void *)&v295[0];
    operator delete(*(void **)&v295[0]);
  }
LABEL_333:
  *(void *)&v295[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v295 + 8) = xmmword_20B5EB0;
  strcpy(*(char **)&v295[0], "turn_costs_against_traffic");
  uint64_t v217 = sub_58070(a2, (uint64_t)v295);
  uint64_t v218 = v217;
  if (SBYTE7(v295[1]) < 0)
  {
    operator delete(*(void **)&v295[0]);
    if (!v218) {
      goto LABEL_343;
    }
  }
  else if (!v217)
  {
    goto LABEL_343;
  }
  memset(v295, 0, 24);
  *(void *)&v294[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v294 + 8) = xmmword_20B5EB0;
  strcpy(*(char **)&v294[0], "turn_costs_against_traffic");
  sub_F1675C(a2, (uint64_t)v294, (uint64_t)v295);
  if (SBYTE7(v294[1]) < 0) {
    operator delete(*(void **)&v294[0]);
  }
  sub_F15348((uint64_t *)v295, 1, 0, 0, (uint64_t)v294);
  v219 = *v26;
  if (*v26)
  {
    *(void *)(a1 + 1280) = v219;
    operator delete(v219);
    *long long v26 = 0;
    *(void *)(a1 + 1280) = 0;
    *(void *)(a1 + 1288) = 0;
  }
  *(_OWORD *)long long v26 = v294[0];
  *(void *)(a1 + 1288) = *(void *)&v294[1];
  if (*(void *)&v295[0])
  {
    *((void *)&v295[0] + 1) = *(void *)&v295[0];
    operator delete(*(void **)&v295[0]);
  }
LABEL_343:
  *(void *)&v295[0] = operator new(0x38uLL);
  *(_OWORD *)((char *)v295 + 8) = xmmword_20B9A20;
  strcpy(*(char **)&v295[0], "high_speed_road_factor_turn_against_traffic_factor");
  uint64_t v220 = sub_58070(a2, (uint64_t)v295);
  uint64_t v221 = (void *)(a1 + 1296);
  if (v220)
  {
    uint64_t v221 = v220 + 5;
    if (*((_DWORD *)v220 + 12) != 1) {
      uint64_t v221 = (void *)(a1 + 1296);
    }
  }
  *(void *)(a1 + 1296) = *v221;
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  strcpy((char *)v295, "unprotected_turn_costs");
  BYTE7(v295[1]) = 22;
  long long v222 = sub_58070(a2, (uint64_t)v295);
  unsigned int v223 = v222;
  if (SBYTE7(v295[1]) < 0)
  {
    operator delete(*(void **)&v295[0]);
    if (!v223) {
      goto LABEL_440;
    }
  }
  else if (!v222)
  {
    goto LABEL_440;
  }
  strcpy((char *)v295, "unprotected_turn_costs");
  BYTE7(v295[1]) = 22;
  unsigned int v224 = (void *)sub_560F4(a2, (uint64_t)v295);
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  BYTE7(v295[1]) = 6;
  strcpy((char *)v295, "enable");
  int v225 = sub_58070(v224, (uint64_t)v295);
  if (v225 && (int v226 = *((_DWORD *)v225 + 12), (v226 & 0xFFFFFFFE) == 4))
  {
    *long long v284 = v226 == 4;
    if (SBYTE7(v295[1]) < 0) {
      goto LABEL_359;
    }
  }
  else
  {
    *long long v284 = *v284;
    if (SBYTE7(v295[1]) < 0) {
LABEL_359:
    }
      operator delete(*(void **)&v295[0]);
  }
  *(void *)&v295[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v295 + 8) = xmmword_20B91A0;
  strcpy(*(char **)&v295[0], "disable_if_cycling_friendly");
  BOOL v227 = sub_58070(v224, (uint64_t)v295);
  if (v227 && (int v228 = *((_DWORD *)v227 + 12), (v228 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 1305) = v228 == 4;
    if (SBYTE7(v295[1]) < 0) {
      goto LABEL_365;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 1305) = *(unsigned char *)(a1 + 1305) != 0;
    if (SBYTE7(v295[1]) < 0) {
LABEL_365:
    }
      operator delete(*(void **)&v295[0]);
  }
  BYTE7(v295[1]) = 20;
  strcpy((char *)v295, "disable_if_crosswalk");
  long long v229 = sub_58070(v224, (uint64_t)v295);
  if (v229 && (int v230 = *((_DWORD *)v229 + 12), (v230 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 1306) = v230 == 4;
    if (SBYTE7(v295[1]) < 0) {
      goto LABEL_371;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 1306) = *(unsigned char *)(a1 + 1306) != 0;
    if (SBYTE7(v295[1]) < 0) {
LABEL_371:
    }
      operator delete(*(void **)&v295[0]);
  }
  BYTE7(v295[1]) = 21;
  strcpy((char *)v295, "disable_if_roundabout");
  int32x2_t v231 = sub_58070(v224, (uint64_t)v295);
  if (v231 && (int v232 = *((_DWORD *)v231 + 12), (v232 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 1307) = v232 == 4;
    if (SBYTE7(v295[1]) < 0) {
      goto LABEL_377;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 1307) = *(unsigned char *)(a1 + 1307) != 0;
    if (SBYTE7(v295[1]) < 0) {
LABEL_377:
    }
      operator delete(*(void **)&v295[0]);
  }
  *(void *)&v295[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v295 + 8) = xmmword_20B5EB0;
  strcpy(*(char **)&v295[0], "disable_if_mini_roundabout");
  int32x2_t v233 = sub_58070(v224, (uint64_t)v295);
  if (v233 && (int v234 = *((_DWORD *)v233 + 12), (v234 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 1308) = v234 == 4;
    if (SBYTE7(v295[1]) < 0) {
      goto LABEL_383;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 1308) = *(unsigned char *)(a1 + 1308) != 0;
    if (SBYTE7(v295[1]) < 0) {
LABEL_383:
    }
      operator delete(*(void **)&v295[0]);
  }
  *(void *)&v295[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v295 + 8) = xmmword_20B91B0;
  strcpy(*(char **)&v295[0], "disable_if_any_traffic_light");
  unsigned __int8 v235 = sub_58070(v224, (uint64_t)v295);
  if (v235 && (int v236 = *((_DWORD *)v235 + 12), (v236 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 1309) = v236 == 4;
    if (SBYTE7(v295[1]) < 0) {
      goto LABEL_389;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 1309) = *(unsigned char *)(a1 + 1309) != 0;
    if (SBYTE7(v295[1]) < 0) {
LABEL_389:
    }
      operator delete(*(void **)&v295[0]);
  }
  *(void *)&v295[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v295 + 8) = xmmword_20B5EB0;
  strcpy(*(char **)&v295[0], "disregard_if_traffic_light");
  double v237 = sub_58070(v224, (uint64_t)v295);
  if (v237 && (int v238 = *((_DWORD *)v237 + 12), (v238 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 1310) = v238 == 4;
    if (SBYTE7(v295[1]) < 0) {
      goto LABEL_395;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 1310) = *(unsigned char *)(a1 + 1310) != 0;
    if (SBYTE7(v295[1]) < 0) {
LABEL_395:
    }
      operator delete(*(void **)&v295[0]);
  }
  strcpy((char *)v295, "disregard_if_stop_sign");
  BYTE7(v295[1]) = 22;
  long long v239 = sub_58070(v224, (uint64_t)v295);
  if (v239 && (int v240 = *((_DWORD *)v239 + 12), (v240 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 1311) = v240 == 4;
    if (SBYTE7(v295[1]) < 0) {
      goto LABEL_401;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 1311) = *(unsigned char *)(a1 + 1311) != 0;
    if (SBYTE7(v295[1]) < 0) {
LABEL_401:
    }
      operator delete(*(void **)&v295[0]);
  }
  BYTE7(v295[1]) = 21;
  strcpy((char *)v295, "disregard_if_ped_xing");
  long long v241 = sub_58070(v224, (uint64_t)v295);
  if (v241 && (int v242 = *((_DWORD *)v241 + 12), (v242 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 1312) = v242 == 4;
    if (SBYTE7(v295[1]) < 0) {
      goto LABEL_407;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 1312) = *(unsigned char *)(a1 + 1312) != 0;
    if (SBYTE7(v295[1]) < 0) {
LABEL_407:
    }
      operator delete(*(void **)&v295[0]);
  }
  *(void *)&v295[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v295 + 8) = xmmword_20B8870;
  strcpy(*(char **)&v295[0], "disregard_if_turn_channel");
  long long v243 = sub_58070(v224, (uint64_t)v295);
  if (v243 && (int v244 = *((_DWORD *)v243 + 12), (v244 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 1313) = v244 == 4;
    if (SBYTE7(v295[1]) < 0) {
      goto LABEL_413;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 1313) = *(unsigned char *)(a1 + 1313) != 0;
    if (SBYTE7(v295[1]) < 0) {
LABEL_413:
    }
      operator delete(*(void **)&v295[0]);
  }
  *(void *)&v295[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v295 + 8) = xmmword_20B5EB0;
  strcpy(*(char **)&v295[0], "disregard_if_lane_internal");
  long long v245 = sub_58070(v224, (uint64_t)v295);
  if (v245 && (int v246 = *((_DWORD *)v245 + 12), (v246 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 1314) = v246 == 4;
    if (SBYTE7(v295[1]) < 0) {
      goto LABEL_419;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 1314) = *(unsigned char *)(a1 + 1314) != 0;
    if (SBYTE7(v295[1]) < 0) {
LABEL_419:
    }
      operator delete(*(void **)&v295[0]);
  }
  *(void *)&v295[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v295 + 8) = xmmword_20B91C0;
  strcpy(*(char **)&v295[0], "disregard_if_routing_i2i");
  long long v247 = sub_58070(v224, (uint64_t)v295);
  if (v247 && (int v248 = *((_DWORD *)v247 + 12), (v248 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 1315) = v248 == 4;
    if (SBYTE7(v295[1]) < 0) {
      goto LABEL_425;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 1315) = *(unsigned char *)(a1 + 1315) != 0;
    if (SBYTE7(v295[1]) < 0) {
LABEL_425:
    }
      operator delete(*(void **)&v295[0]);
  }
  *(void *)&v295[0] = operator new(0x19uLL);
  *(_OWORD *)((char *)v295 + 8) = xmmword_20B9250;
  strcpy(*(char **)&v295[0], "disregard_if_vendor_i2i");
  long long v249 = sub_58070(v224, (uint64_t)v295);
  if (v249 && (int v250 = *((_DWORD *)v249 + 12), (v250 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 1316) = v250 == 4;
    if (SBYTE7(v295[1]) < 0) {
      goto LABEL_431;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 1316) = *(unsigned char *)(a1 + 1316) != 0;
    if (SBYTE7(v295[1]) < 0) {
LABEL_431:
    }
      operator delete(*(void **)&v295[0]);
  }
  BYTE7(v295[1]) = 16;
  strcpy((char *)v295, "car_speed_factor");
  sub_D4EAD4(v224, (uint64_t)v295, (void *)(a1 + 1320));
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  BYTE7(v295[1]) = 16;
  strcpy((char *)v295, "car_lanes_factor");
  sub_F16B50(v224, (uint64_t)v295, a1 + 1344);
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  *(void *)&v295[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v295 + 8) = xmmword_20B91A0;
  strcpy(*(char **)&v295[0], "normalized_car_trips_factor");
  sub_D4EAD4(v224, (uint64_t)v295, (void *)(a1 + 1368));
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  BYTE7(v295[1]) = 15;
  strcpy((char *)v295, "derived_penalty");
  sub_F16324(v224, (uint64_t)v295, a1 + 1392);
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
LABEL_440:
  BYTE7(v295[1]) = 20;
  strcpy((char *)v295, "protected_turn_costs");
  long long v251 = sub_58070(a2, (uint64_t)v295);
  long long v252 = v251;
  if (SBYTE7(v295[1]) < 0)
  {
    operator delete(*(void **)&v295[0]);
    if (!v252) {
      goto LABEL_466;
    }
  }
  else if (!v251)
  {
    goto LABEL_466;
  }
  BYTE7(v295[1]) = 20;
  strcpy((char *)v295, "protected_turn_costs");
  long long v253 = (void *)sub_560F4(a2, (uint64_t)v295);
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  BYTE7(v295[1]) = 6;
  strcpy((char *)v295, "enable");
  long long v254 = sub_58070(v253, (uint64_t)v295);
  if (v254 && (int v255 = *((_DWORD *)v254 + 12), (v255 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 1416) = v255 == 4;
    if (SBYTE7(v295[1]) < 0) {
      goto LABEL_451;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 1416) = *(unsigned char *)(a1 + 1416) != 0;
    if (SBYTE7(v295[1]) < 0) {
LABEL_451:
    }
      operator delete(*(void **)&v295[0]);
  }
  *(void *)&v295[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v295 + 8) = xmmword_20B5EB0;
  strcpy(*(char **)&v295[0], "disregard_if_tail_internal");
  __n128 v256 = sub_58070(v253, (uint64_t)v295);
  if (v256 && (int v257 = *((_DWORD *)v256 + 12), (v257 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 1417) = v257 == 4;
    if (SBYTE7(v295[1]) < 0) {
      goto LABEL_457;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 1417) = *(unsigned char *)(a1 + 1417) != 0;
    if (SBYTE7(v295[1]) < 0) {
LABEL_457:
    }
      operator delete(*(void **)&v295[0]);
  }
  *(void *)&v295[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v295 + 8) = xmmword_20B8870;
  strcpy(*(char **)&v295[0], "disregard_if_not_cyclable");
  __n128 v258 = sub_58070(v253, (uint64_t)v295);
  if (v258 && (int v259 = *((_DWORD *)v258 + 12), (v259 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 1418) = v259 == 4;
    if ((SBYTE7(v295[1]) & 0x80000000) == 0) {
      goto LABEL_464;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 1418) = *(unsigned char *)(a1 + 1418) != 0;
    if ((SBYTE7(v295[1]) & 0x80000000) == 0) {
      goto LABEL_464;
    }
  }
  operator delete(*(void **)&v295[0]);
LABEL_464:
  BYTE7(v295[1]) = 15;
  strcpy((char *)v295, "derived_penalty");
  sub_F16324(v253, (uint64_t)v295, a1 + 1424);
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
LABEL_466:
  BYTE7(v295[1]) = 20;
  strcpy((char *)v295, "zone_violation_costs");
  sub_F15604(a2, (uint64_t)v295, (uint64_t *)(a1 + 1472));
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  BYTE7(v295[1]) = 21;
  strcpy((char *)v295, "border_crossing_costs");
  sub_F15604(a2, (uint64_t)v295, (uint64_t *)(a1 + 1496));
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  *(void *)&v295[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v295 + 8) = xmmword_20B9800;
  strcpy(*(char **)&v295[0], "zone_transition_classification");
  __n128 v260 = sub_58070(a2, (uint64_t)v295);
  __n128 v261 = v260;
  if (SBYTE7(v295[1]) < 0)
  {
    operator delete(*(void **)&v295[0]);
    if (!v261) {
      goto LABEL_482;
    }
  }
  else if (!v260)
  {
    goto LABEL_482;
  }
  memset(v295, 0, 24);
  *(void *)&v294[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v294 + 8) = xmmword_20B9800;
  strcpy(*(char **)&v294[0], "zone_transition_classification");
  __n128 v262 = (uint64_t *)sub_5C4AC(a2, (uint64_t)v294);
  sub_F71778((uint64_t *)(a1 + 1448), v262, (uint64_t *)v295);
  if (SBYTE7(v294[1]) < 0)
  {
    operator delete(*(void **)&v294[0]);
    __n128 v263 = *(char **)&v295[0];
    if (!*(void *)&v295[0]) {
      goto LABEL_482;
    }
  }
  else
  {
    __n128 v263 = *(char **)&v295[0];
    if (!*(void *)&v295[0]) {
      goto LABEL_482;
    }
  }
  __n128 v264 = (uint64_t *)*((void *)&v295[0] + 1);
  long long v265 = v263;
  if (*((char **)&v295[0] + 1) != v263)
  {
    do
    {
      long long v266 = v264 - 2;
      sub_5521C((uint64_t *)*((unsigned int *)v264 - 2), v264 - 2);
      __n128 v264 = v266;
    }
    while (v266 != (uint64_t *)v263);
    long long v265 = *(char **)&v295[0];
  }
  *((void *)&v295[0] + 1) = v263;
  operator delete(v265);
LABEL_482:
  *(void *)&v295[0] = operator new(0x20uLL);
  long long v291 = v172[233];
  *(_OWORD *)((char *)v295 + 8) = v291;
  strcpy(*(char **)&v295[0], "primary_offroad_distance_factor");
  if (sub_58070(a2, (uint64_t)v295))
  {
    long long v267 = (void *)sub_560F4(a2, (uint64_t)v295);
    sub_F15B20(v267);
    *(void *)(a1 + 1520) = v268;
    *(void *)(a1 + 1528) = v269;
    *(void *)(a1 + 1536) = v270;
  }
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  *(void *)&v295[0] = operator new(0x28uLL);
  *(_OWORD *)((char *)v295 + 8) = xmmword_20B93A0;
  strcpy(*(char **)&v295[0], "contingency_offroad_distance_factor");
  if (sub_58070(a2, (uint64_t)v295))
  {
    long long v271 = (void *)sub_560F4(a2, (uint64_t)v295);
    sub_F15B20(v271);
    *(void *)(a1 + 1544) = v272;
    *(void *)(a1 + 1552) = v273;
    *(void *)(a1 + 1560) = v274;
  }
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  BYTE7(v295[1]) = 19;
  strcpy((char *)v295, "contingency_penalty");
  if (sub_58070(a2, (uint64_t)v295))
  {
    long long v275 = (void *)sub_560F4(a2, (uint64_t)v295);
    *(void *)(a1 + 1568) = sub_ED57A0(v275);
    *(void *)(a1 + 1576) = v276;
  }
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  BYTE7(v295[1]) = 20;
  strcpy((char *)v295, "non_cyclable_penalty");
  if (sub_58070(a2, (uint64_t)v295))
  {
    long long v277 = (void *)sub_560F4(a2, (uint64_t)v295);
    *(void *)(a1 + 1584) = sub_ED57A0(v277);
    *(void *)(a1 + 1592) = v278;
  }
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  BYTE7(v295[1]) = 14;
  strcpy((char *)v295, "stairs_penalty");
  if (sub_58070(a2, (uint64_t)v295))
  {
    long long v279 = (void *)sub_560F4(a2, (uint64_t)v295);
    *(void *)(a1 + 1600) = sub_ED57A0(v279);
    *(void *)(a1 + 1608) = v280;
  }
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  BYTE7(v295[1]) = 19;
  strcpy((char *)v295, "turn_around_penalty");
  if (sub_58070(a2, (uint64_t)v295))
  {
    long long v281 = (void *)sub_560F4(a2, (uint64_t)v295);
    *(void *)(a1 + 1616) = sub_ED57A0(v281);
    *(void *)(a1 + 1624) = v282;
  }
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  *(void *)&v295[0] = operator new(0x28uLL);
  *(_OWORD *)((char *)v295 + 8) = xmmword_20B9390;
  strcpy(*(char **)&v295[0], "turn_around_distance_threshold_m");
  sub_5C8A4(a2, (uint64_t)v295, (uint64_t *)(a1 + 1632));
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  *(void *)&v295[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v295 + 8) = v291;
  strcpy(*(char **)&v295[0], "turn_around_speed_threshold_kph");
  sub_5D63C(a2, (uint64_t)v295, (uint64_t *)(a1 + 1640));
  if (SBYTE7(v295[1]) < 0) {
    operator delete(*(void **)&v295[0]);
  }
  return a1;
}

void sub_F1423C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, void **a15, void *a16, void **a17, void **a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23,void **a24,void **a25,void **a26,void **a27,void **a28,void **a29,void **a30,void **a31,void **a32)
{
  uint64_t v39 = *(void **)(v37 - 128);
  if (v39)
  {
    *(void *)(v37 - 120) = v39;
    operator delete(v39);
  }
  uint64_t v40 = *a23;
  if (*a23)
  {
    v32[188] = v40;
    operator delete(v40);
  }
  uint64_t v41 = *a24;
  if (*a24)
  {
    v32[185] = v41;
    operator delete(v41);
    uint64_t v42 = *a14;
    if (!*a14)
    {
LABEL_7:
      uint64_t v43 = *a15;
      if (!*a15) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v42 = *a14;
    if (!*a14) {
      goto LABEL_7;
    }
  }
  v32[182] = v42;
  operator delete(v42);
  uint64_t v43 = *a15;
  if (!*a15)
  {
LABEL_9:
    sub_F15790(a16);
    uint64_t v44 = *v33;
    if (*v33)
    {
      v32[160] = v44;
      operator delete(v44);
    }
    uint64_t v45 = *a17;
    if (*a17)
    {
      v32[157] = v45;
      operator delete(v45);
    }
    sub_F157F4(v36);
    unsigned int v46 = *a26;
    if (*a26)
    {
      v32[119] = v46;
      operator delete(v46);
      uint64_t v47 = *v34;
      if (!*v34)
      {
LABEL_15:
        uint64_t v48 = *a28;
        if (!*a28) {
          goto LABEL_16;
        }
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v47 = *v34;
      if (!*v34) {
        goto LABEL_15;
      }
    }
    v32[110] = v47;
    operator delete(v47);
    uint64_t v48 = *a28;
    if (!*a28)
    {
LABEL_16:
      uint64_t v49 = *v35;
      if (!*v35) {
        goto LABEL_17;
      }
      goto LABEL_29;
    }
LABEL_28:
    v32[107] = v48;
    operator delete(v48);
    uint64_t v49 = *v35;
    if (!*v35)
    {
LABEL_17:
      long long v50 = *a25;
      if (!*a25) {
        goto LABEL_18;
      }
      goto LABEL_30;
    }
LABEL_29:
    v32[104] = v49;
    operator delete(v49);
    long long v50 = *a25;
    if (!*a25)
    {
LABEL_18:
      uint64_t v51 = *a27;
      if (!*a27) {
        goto LABEL_19;
      }
      goto LABEL_31;
    }
LABEL_30:
    v32[101] = v50;
    operator delete(v50);
    uint64_t v51 = *a27;
    if (!*a27)
    {
LABEL_19:
      uint64_t v52 = *a29;
      if (!*a29) {
        goto LABEL_20;
      }
      goto LABEL_32;
    }
LABEL_31:
    v32[50] = v51;
    operator delete(v51);
    uint64_t v52 = *a29;
    if (!*a29)
    {
LABEL_20:
      uint64_t v53 = *a18;
      if (!*a18) {
        goto LABEL_21;
      }
      goto LABEL_33;
    }
LABEL_32:
    v32[47] = v52;
    operator delete(v52);
    uint64_t v53 = *a18;
    if (!*a18)
    {
LABEL_21:
      long long v54 = *a30;
      if (!*a30) {
        goto LABEL_22;
      }
      goto LABEL_34;
    }
LABEL_33:
    v32[44] = v53;
    operator delete(v53);
    long long v54 = *a30;
    if (!*a30)
    {
LABEL_22:
      uint64_t v55 = *a31;
      if (!*a31) {
        goto LABEL_23;
      }
      goto LABEL_35;
    }
LABEL_34:
    v32[41] = v54;
    operator delete(v54);
    uint64_t v55 = *a31;
    if (!*a31)
    {
LABEL_23:
      uint64_t v56 = *a32;
      if (!*a32) {
        goto LABEL_24;
      }
      goto LABEL_36;
    }
LABEL_35:
    v32[35] = v55;
    operator delete(v55);
    uint64_t v56 = *a32;
    if (!*a32)
    {
LABEL_24:
      uint64_t v57 = *a10;
      if (!*a10) {
        goto LABEL_25;
      }
      goto LABEL_37;
    }
LABEL_36:
    v32[32] = v56;
    operator delete(v56);
    uint64_t v57 = *a10;
    if (!*a10) {
LABEL_25:
    }
      _Unwind_Resume(a1);
LABEL_37:
    v32[29] = v57;
    operator delete(v57);
    _Unwind_Resume(a1);
  }
LABEL_8:
  v32[179] = v43;
  operator delete(v43);
  goto LABEL_9;
}

void sub_F14F1C(void *a1, uint64_t a2, uint64_t a3)
{
  if (sub_58070(a1, a2))
  {
    *(void *)(a3 + 8) = *(void *)a3;
    uint64_t v6 = (uint64_t *)sub_5C4AC(a1, a2);
    uint64_t v7 = *v6;
    uint64_t v8 = v6[1];
    if (*v6 != v8)
    {
      do
      {
        if (*(_DWORD *)(v7 + 8) != 2)
        {
          exception = __cxa_allocate_exception(8uLL);
          void *exception = &off_23FDF58;
        }
        long long v13 = *(void **)v7;
        char v20 = 5;
        strcpy((char *)__p, "index");
        unint64_t v14 = sub_5C9BC(v13, (uint64_t)__p);
        unint64_t v15 = v14;
        if (v20 < 0)
        {
          operator delete(__p[0]);
          long long v16 = *(char **)a3;
          unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
          if (v15 >= v17)
          {
LABEL_11:
            if (v15 + 1 > v17)
            {
              sub_F15EE0((char **)a3, v15 + 1 - v17);
            }
            else if (v15 + 1 < v17)
            {
              *(void *)(a3 + 8) = &v16[24 * v15 + 24];
            }
          }
        }
        else
        {
          long long v16 = *(char **)a3;
          unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
          if (v14 >= v17) {
            goto LABEL_11;
          }
        }
        sub_F15B20(v13);
        uint64_t v9 = (void *)(*(void *)a3 + 24 * v15);
        *uint64_t v9 = v10;
        v9[1] = v11;
        v9[2] = v12;
        v7 += 16;
      }
      while (v7 != v8);
    }
  }
}

void sub_F150AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_F150C8(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v8 = (char *)operator new(0x528uLL);
  uint64_t v9 = (void **)(v8 + 1320);
  __p = v8;
  uint64_t v36 = v8 + 1320;
  bzero(v8, 0x528uLL);
  uint64_t v10 = 0;
  unsigned int v35 = v9;
  do
  {
    uint64_t v12 = *(const char **)(a3 + 8 * v10);
    size_t v13 = strlen(v12);
    if (v13 >= 0x7FFFFFFFFFFFFFF8) {
      sub_188D690();
    }
    unint64_t v14 = v13;
    if (v13 >= 0x17)
    {
      uint64_t v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17) {
        uint64_t v16 = v13 | 7;
      }
      uint64_t v17 = v16 + 1;
      unint64_t v15 = (long long *)operator new(v16 + 1);
      *((void *)&v32 + 1) = v14;
      int64_t v33 = v17 | 0x8000000000000000;
      *(void *)&long long v32 = v15;
      if (v14 < 0x20) {
        goto LABEL_16;
      }
    }
    else
    {
      HIBYTE(v33) = v13;
      if (!v13)
      {
        LOBYTE(v32) = 0;
        long long v26 = (char *)__p + 24 * v10;
        if (v26[23] < 0) {
          goto LABEL_24;
        }
        goto LABEL_2;
      }
      unint64_t v15 = &v32;
      if (v14 < 0x20)
      {
LABEL_16:
        uint64_t v18 = v12;
        uint64_t v19 = v15;
        do
        {
LABEL_17:
          char v24 = *v18++;
          *(unsigned char *)uint64_t v19 = v24;
          uint64_t v19 = (long long *)((char *)v19 + 1);
        }
        while (v18 != &v12[v14]);
        goto LABEL_18;
      }
    }
    if ((unint64_t)((char *)v15 - v12) < 0x20) {
      goto LABEL_16;
    }
    uint64_t v18 = &v12[v14 & 0xFFFFFFFFFFFFFFE0];
    uint64_t v19 = (long long *)((char *)v15 + (v14 & 0xFFFFFFFFFFFFFFE0));
    char v20 = v15 + 1;
    uint64_t v21 = (long long *)(v12 + 16);
    unint64_t v22 = v14 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v23 = *v21;
      *(v20 - 1) = *(v21 - 1);
      *char v20 = v23;
      v20 += 2;
      v21 += 2;
      v22 -= 32;
    }
    while (v22);
    if (v14 != (v14 & 0x7FFFFFFFFFFFFFE0)) {
      goto LABEL_17;
    }
LABEL_18:
    *(unsigned char *)uint64_t v19 = 0;
    if (v14)
    {
      if (v33 >= 0) {
        long long v25 = &v32;
      }
      else {
        long long v25 = (long long *)v32;
      }
      do
      {
        *(unsigned char *)long long v25 = __tolower(*v12);
        long long v25 = (long long *)((char *)v25 + 1);
        ++v12;
        --v14;
      }
      while (v14);
    }
    long long v26 = (char *)__p + 24 * v10;
    if (v26[23] < 0) {
LABEL_24:
    }
      operator delete(*(void **)v26);
LABEL_2:
    long long v11 = v32;
    *((void *)v26 + 2) = v33;
    *(_OWORD *)long long v26 = v11;
    ++v10;
  }
  while (v10 != 55);
  sub_F165CC(a1, a2, (uint64_t *)&__p, a4, a5);
  long long v27 = (void **)__p;
  if (__p)
  {
    long long v28 = v35;
    unsigned int v29 = __p;
    if (v35 != __p)
    {
      do
      {
        if (*((char *)v28 - 1) < 0) {
          operator delete(*(v28 - 3));
        }
        v28 -= 3;
      }
      while (v28 != v27);
      unsigned int v29 = __p;
    }
    unsigned int v35 = v27;
    operator delete(v29);
  }
}

void sub_F15308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1A668((void **)va);
  _Unwind_Resume(a1);
}

void sub_F15324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_1A668(&a17);
  _Unwind_Resume(a1);
}

void sub_F15348(uint64_t *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)&long long v44 = a3;
  *((void *)&v44 + 1) = a4;
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  *(void *)a5 = 0;
  if (v6 != v7)
  {
    int v9 = *(_DWORD *)(v7 - 24);
    if (v9 != -1)
    {
      sub_F169FC((char **)a5, (v9 + 1), &v44);
      uint64_t v6 = *a1;
      uint64_t v7 = a1[1];
    }
    if (v6 != v7)
    {
      LODWORD(v11) = 0;
      if (a2)
      {
        int v12 = v44;
        int v13 = DWORD1(v44);
        uint64_t v14 = *((void *)&v44 + 1);
        uint64_t v16 = *(char **)a5;
        uint64_t v15 = *(void *)(a5 + 8);
        while (1)
        {
          unsigned int v17 = v11 ? v11 - 1 : 0;
          unsigned int v18 = *(_DWORD *)v6;
          int v20 = *(_DWORD *)(v6 + 8);
          int v19 = *(_DWORD *)(v6 + 12);
          uint64_t v21 = *(void *)(v6 + 16);
          unint64_t v22 = v11;
          if (v11 < (unint64_t)((v15 - (uint64_t)v16) >> 4) && v11 <= v18) {
            break;
          }
LABEL_7:
          v6 += 24;
          uint64_t v14 = v21;
          int v13 = v19;
          int v12 = v20;
          if (v6 == v7) {
            return;
          }
        }
        double v24 = (double)(v20 - v12);
        double v25 = (double)(v19 - v13);
        unsigned int v26 = v11 != 0;
        while (1)
        {
          double v27 = 1.0;
          if (v18 > v17) {
            double v27 = (double)v26 / (double)(v18 - v17);
          }
          double v28 = v27 * v24;
          if (v27 * v24 >= 0.0)
          {
            if (v28 >= 4.50359963e15) {
              goto LABEL_26;
            }
            uint64_t v29 = (uint64_t)(v28 + v28) + 1;
          }
          else
          {
            if (v28 <= -4.50359963e15) {
              goto LABEL_26;
            }
            uint64_t v29 = (uint64_t)(v28 + v28);
            if (v29 >= 1) {
              --v29;
            }
          }
          double v28 = (double)(v29 >> 1);
LABEL_26:
          double v30 = v27 * v25;
          if (v27 * v25 >= 0.0)
          {
            if (v30 >= 4.50359963e15) {
              goto LABEL_34;
            }
            uint64_t v31 = (uint64_t)(v30 + v30) + 1;
          }
          else
          {
            if (v30 <= -4.50359963e15) {
              goto LABEL_34;
            }
            uint64_t v31 = (uint64_t)(v30 + v30);
            if (v31 >= 1) {
              --v31;
            }
          }
          double v30 = (double)(v31 >> 1);
LABEL_34:
          double v32 = v27 * (double)(v21 - v14);
          if (v32 >= 0.0)
          {
            if (v32 >= 4.50359963e15) {
              goto LABEL_42;
            }
            uint64_t v33 = (uint64_t)(v32 + v32) + 1;
          }
          else
          {
            if (v32 <= -4.50359963e15) {
              goto LABEL_42;
            }
            uint64_t v33 = (uint64_t)(v32 + v32);
            if (v33 >= 1) {
              --v33;
            }
          }
          double v32 = (double)(v33 >> 1);
LABEL_42:
          unint64_t v11 = (v11 + 1);
          uint64_t v34 = (unint64_t *)&v16[16 * v22];
          *uint64_t v34 = (v12 + v28) | ((unint64_t)(v13 + (int)v30) << 32);
          v34[1] = v14 + (uint64_t)v32;
          uint64_t v16 = *(char **)a5;
          uint64_t v15 = *(void *)(a5 + 8);
          if (v11 < (v15 - *(void *)a5) >> 4)
          {
            ++v26;
            unint64_t v22 = v11;
            if (v11 <= v18) {
              continue;
            }
          }
          goto LABEL_7;
        }
      }
      unsigned int v35 = *(char **)a5;
      uint64_t v36 = *(void *)(a5 + 8);
      do
      {
        unsigned int v37 = *(_DWORD *)v6;
        unint64_t v38 = v11;
        if (v11 < (unint64_t)((v36 - (uint64_t)v35) >> 4) && v11 <= v37)
        {
          uint64_t v40 = *(void *)(v6 + 8);
          uint64_t v41 = *(void *)(v6 + 16);
          do
          {
            unint64_t v11 = (v11 + 1);
            uint64_t v42 = &v35[16 * v38];
            *(void *)uint64_t v42 = v40;
            *((void *)v42 + 1) = v41;
            unsigned int v35 = *(char **)a5;
            uint64_t v36 = *(void *)(a5 + 8);
            BOOL v43 = v11 >= (v36 - *(void *)a5) >> 4 || v11 > v37;
            unint64_t v38 = v11;
          }
          while (!v43);
        }
        v6 += 24;
      }
      while (v6 != v7);
    }
  }
}

void sub_F155E8(_Unwind_Exception *exception_object)
{
  unsigned int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_F15604(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result = sub_58070(a1, a2);
  if (result)
  {
    a3[1] = *a3;
    uint64_t result = (uint64_t *)sub_5C4AC(a1, a2);
    uint64_t v7 = *result;
    uint64_t v8 = result[1];
    if (*result != v8)
    {
      do
      {
        if (*(_DWORD *)(v7 + 8) != 2)
        {
          exception = __cxa_allocate_exception(8uLL);
          void *exception = &off_23FDF58;
        }
        unint64_t v11 = *(void **)v7;
        char v18 = 5;
        strcpy((char *)__p, "index");
        unint64_t v12 = sub_5C9BC(v11, (uint64_t)__p);
        unint64_t v13 = v12;
        if (v18 < 0)
        {
          operator delete(__p[0]);
          uint64_t v14 = *a3;
          unint64_t v15 = (a3[1] - *a3) >> 4;
          if (v13 >= v15)
          {
LABEL_11:
            if (v13 + 1 > v15)
            {
              sub_F16E14(a3, v13 + 1 - v15);
            }
            else if (v13 + 1 < v15)
            {
              a3[1] = v14 + 16 * (v13 + 1);
            }
          }
        }
        else
        {
          uint64_t v14 = *a3;
          unint64_t v15 = (a3[1] - *a3) >> 4;
          if (v12 >= v15) {
            goto LABEL_11;
          }
        }
        uint64_t result = (uint64_t *)sub_ED57A0(v11);
        int v9 = (uint64_t **)(*a3 + 16 * v13);
        *int v9 = result;
        v9[1] = v10;
        v7 += 16;
      }
      while (v7 != v8);
    }
  }
  return result;
}

void sub_F15774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_F15790(void *a1)
{
  uint64_t v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  unsigned int v3 = (void *)a1[8];
  if (v3)
  {
    a1[9] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[5];
  if (v4)
  {
    a1[6] = v4;
    operator delete(v4);
  }
  size_t v5 = (void *)a1[2];
  if (v5)
  {
    a1[3] = v5;
    operator delete(v5);
  }
  return a1;
}

void *sub_F157F4(void *a1)
{
  uint64_t v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  unsigned int v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_F15838(uint64_t *a1, unsigned char *a2, void *a3)
{
  if (*a2) {
    BOOL v5 = a2[1] == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    if (*a2)
    {
      HIBYTE(__p[2]) = 19;
      strcpy((char *)__p, "avoid_busy_roads_cf");
      uint64_t v6 = sub_561B0(a3, (uint64_t)__p);
      uint64_t result = sub_374DFC(a1, v6);
    }
    else
    {
      if (a2[1])
      {
        HIBYTE(__p[2]) = 14;
        strcpy((char *)__p, "avoid_hills_cf");
      }
      else
      {
        HIBYTE(__p[2]) = 13;
        strcpy((char *)__p, "cost_function");
      }
      uint64_t v10 = sub_561B0(a3, (uint64_t)__p);
      uint64_t result = sub_374DFC(a1, v10);
    }
  }
  else
  {
    __p[0] = operator new(0x20uLL);
    *(_OWORD *)&__p[1] = xmmword_20B8870;
    strcpy((char *)__p[0], "avoid_busy_roads_hills_cf");
    uint64_t v7 = sub_561B0(a3, (uint64_t)__p);
    uint64_t result = sub_374DFC(a1, v7);
  }
  uint64_t v9 = result;
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    return v9;
  }
  return result;
}

void sub_F159BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_F159E4(void *a1)
{
  a1[2] = 0;
  uint64_t v2 = a1 + 2;
  a1[3] = 0;
  a1[4] = 0;
  *a1 = 0;
  *(void *)((char *)a1 + 5) = 0;
  unsigned int v3 = operator new(0x10uLL);
  *uint64_t v2 = v3;
  *v3++ = xmmword_20B8F70;
  a1[3] = v3;
  a1[4] = v3;
  a1[6] = 0;
  a1[7] = 0;
  a1[5] = 0;
  uint64_t v4 = operator new(0x10uLL);
  *(_DWORD *)uint64_t v4 = 0;
  v4[1] = 0x3FF0000000000000;
  a1[5] = v4;
  a1[6] = v4 + 2;
  a1[7] = v4 + 2;
  a1[8] = 0;
  a1[9] = 0;
  a1[10] = 0;
  BOOL v5 = operator new(0x10uLL);
  *BOOL v5 = xmmword_20B8F70;
  a1[8] = v5;
  a1[9] = v5 + 1;
  a1[10] = v5 + 1;
  a1[11] = 0;
  a1[12] = 0;
  a1[13] = 0;
  uint64_t v6 = operator new(0x18uLL);
  a1[12] = v6 + 3;
  a1[13] = v6 + 3;
  v6[1] = 0;
  v6[2] = 0;
  *uint64_t v6 = 0;
  a1[11] = v6;
  return a1;
}

void sub_F15ABC(_Unwind_Exception *a1)
{
  uint64_t v4 = v2;
  v1[9] = v4;
  operator delete(v4);
  uint64_t v6 = (void *)v1[5];
  if (v6)
  {
    v1[6] = v6;
    operator delete(v6);
    uint64_t v7 = *v3;
    if (!*v3) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    uint64_t v7 = *v3;
    if (!*v3) {
      goto LABEL_3;
    }
  }
  v1[3] = v7;
  operator delete(v7);
  _Unwind_Resume(a1);
}

void sub_F15B20(void *a1)
{
  char v3 = 4;
  strcpy((char *)__p, "cost");
  sub_5C7E8(a1, (uint64_t)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  char v3 = 4;
  strcpy((char *)__p, "time");
  sub_5C7E8(a1, (uint64_t)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  char v3 = 6;
  strcpy((char *)__p, "length");
  sub_5C7E8(a1, (uint64_t)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_F15C30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_F15C54(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_58070(a1, a2);
  if (result)
  {
    *(void *)(a3 + 8) = *(void *)a3;
    uint64_t result = (uint64_t *)sub_5C4AC(a1, a2);
    uint64_t v7 = *result;
    uint64_t v8 = result[1];
    if (*result != v8)
    {
      do
      {
        if (*(_DWORD *)(v7 + 8) != 2)
        {
          exception = __cxa_allocate_exception(8uLL);
          void *exception = &off_23FDF58;
        }
        unint64_t v12 = *(void **)v7;
        HIBYTE(v17) = 9;
        strcpy((char *)&__p, "threshold");
        double v13 = sub_5C7E8(v12, (uint64_t)&__p);
        if (SHIBYTE(v17) < 0) {
          operator delete((void *)__p);
        }
        double v15 = v13;
        sub_F15B20(v12);
        *(void *)&long long __p = v9;
        *((void *)&__p + 1) = v10;
        uint64_t v17 = v11;
        uint64_t result = (uint64_t *)sub_F15DB0((char **)a3, &v15, &__p);
        v7 += 16;
      }
      while (v7 != v8);
    }
  }
  return result;
}

void sub_F15D94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_F15DB0(char **a1, void *a2, long long *a3)
{
  uint64_t v7 = a1[1];
  unint64_t v6 = (unint64_t)a1[2];
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = *a1;
    uint64_t v11 = (v7 - *a1) >> 5;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 59) {
      sub_2E00();
    }
    uint64_t v13 = v6 - (void)v10;
    if (v13 >> 4 > v12) {
      unint64_t v12 = v13 >> 4;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v14 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 59) {
        sub_188D718();
      }
      double v15 = (char *)operator new(32 * v14);
    }
    else
    {
      double v15 = 0;
    }
    uint64_t v16 = &v15[32 * v11];
    *(void *)uint64_t v16 = *a2;
    *(_OWORD *)(v16 + 8) = *a3;
    *((void *)v16 + 3) = *((void *)a3 + 2);
    uint64_t v9 = v16 + 32;
    if (v7 != v10)
    {
      do
      {
        long long v17 = *((_OWORD *)v7 - 1);
        *((_OWORD *)v16 - 2) = *((_OWORD *)v7 - 2);
        *((_OWORD *)v16 - 1) = v17;
        v16 -= 32;
        v7 -= 32;
      }
      while (v7 != v10);
      uint64_t v7 = *a1;
    }
    *a1 = v16;
    a1[1] = v9;
    a1[2] = &v15[32 * v14];
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    *(void *)uint64_t v7 = *a2;
    long long v8 = *a3;
    *((void *)v7 + 3) = *((void *)a3 + 2);
    *(_OWORD *)(v7 + 8) = v8;
    uint64_t v9 = v7 + 32;
  }
  a1[1] = v9;
  return v9 - 32;
}

void sub_F15EE0(char **a1, unint64_t a2)
{
  BOOL v5 = a1[1];
  uint64_t v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      memset_pattern16(a1[1], &unk_20F0FB0, v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    unint64_t v6 = *a1;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_2E00();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v6) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL) {
        sub_188D718();
      }
      uint64_t v11 = (char *)operator new(24 * v10);
    }
    else
    {
      uint64_t v11 = 0;
    }
    uint64_t v13 = &v11[24 * v7];
    unint64_t v14 = &v11[24 * v10];
    size_t v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    memset_pattern16(v13, &unk_20F0FB0, v15);
    uint64_t v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        long long v17 = *(_OWORD *)(v5 - 24);
        *((void *)v13 - 1) = *((void *)v5 - 1);
        *(_OWORD *)(v13 - 24) = v17;
        v13 -= 24;
        v5 -= 24;
      }
      while (v5 != v6);
      BOOL v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

uint64_t *sub_F160A0(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_58070(a1, a2);
  if (result)
  {
    *(void *)(a3 + 8) = *(void *)a3;
    uint64_t result = (uint64_t *)sub_5C4AC(a1, a2);
    uint64_t v7 = *result;
    uint64_t v8 = result[1];
    if (*result != v8)
    {
      do
      {
        if (*(_DWORD *)(v7 + 8) != 2)
        {
          exception = __cxa_allocate_exception(8uLL);
          void *exception = &off_23FDF58;
        }
        size_t v12 = *(void **)v7;
        HIBYTE(v17) = 9;
        strcpy((char *)&__p, "threshold");
        int v13 = sub_31AC04(v12, (uint64_t)&__p);
        if (SHIBYTE(v17) < 0) {
          operator delete((void *)__p);
        }
        int v15 = v13;
        sub_F15B20(v12);
        *(void *)&long long __p = v9;
        *((void *)&__p + 1) = v10;
        uint64_t v17 = v11;
        uint64_t result = (uint64_t *)sub_F161F4((char **)a3, &v15, &__p);
        v7 += 16;
      }
      while (v7 != v8);
    }
  }
  return result;
}

void sub_F161D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_F161F4(char **a1, _DWORD *a2, long long *a3)
{
  uint64_t v7 = a1[1];
  unint64_t v6 = (unint64_t)a1[2];
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = *a1;
    uint64_t v11 = (v7 - *a1) >> 5;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 59) {
      sub_2E00();
    }
    uint64_t v13 = v6 - (void)v10;
    if (v13 >> 4 > v12) {
      unint64_t v12 = v13 >> 4;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v14 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 59) {
        sub_188D718();
      }
      int v15 = (char *)operator new(32 * v14);
    }
    else
    {
      int v15 = 0;
    }
    uint64_t v16 = &v15[32 * v11];
    *(_DWORD *)uint64_t v16 = *a2;
    *(_OWORD *)(v16 + 8) = *a3;
    *((void *)v16 + 3) = *((void *)a3 + 2);
    uint64_t v9 = v16 + 32;
    if (v7 != v10)
    {
      do
      {
        long long v17 = *((_OWORD *)v7 - 1);
        *((_OWORD *)v16 - 2) = *((_OWORD *)v7 - 2);
        *((_OWORD *)v16 - 1) = v17;
        v16 -= 32;
        v7 -= 32;
      }
      while (v7 != v10);
      uint64_t v7 = *a1;
    }
    *a1 = v16;
    a1[1] = v9;
    a1[2] = &v15[32 * v14];
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v7 = *a2;
    long long v8 = *a3;
    *((void *)v7 + 3) = *((void *)a3 + 2);
    *(_OWORD *)(v7 + 8) = v8;
    uint64_t v9 = v7 + 32;
  }
  a1[1] = v9;
  return v9 - 32;
}

uint64_t *sub_F16324(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_58070(a1, a2);
  if (result)
  {
    *(void *)(a3 + 8) = *(void *)a3;
    uint64_t result = (uint64_t *)sub_5C4AC(a1, a2);
    uint64_t v7 = *result;
    uint64_t v8 = result[1];
    if (*result != v8)
    {
      do
      {
        if (*(_DWORD *)(v7 + 8) != 2)
        {
          exception = __cxa_allocate_exception(8uLL);
          void *exception = &off_23FDF58;
        }
        uint64_t v10 = *(void **)v7;
        char v15 = 9;
        strcpy((char *)__p, "threshold");
        double v11 = sub_5C7E8(v10, (uint64_t)__p);
        if (v15 < 0) {
          operator delete(__p[0]);
        }
        double v13 = v11;
        __p[0] = (void *)sub_ED57A0(v10);
        __p[1] = v9;
        uint64_t result = (uint64_t *)sub_F1647C((char **)a3, &v13, __p);
        v7 += 16;
      }
      while (v7 != v8);
    }
  }
  return result;
}

void sub_F16460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_F1647C(char **a1, void *a2, _OWORD *a3)
{
  uint64_t v7 = a1[1];
  unint64_t v6 = (unint64_t)a1[2];
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = *a1;
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v11 = v10 + 1;
    if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_2E00();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)v9) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 > 0xAAAAAAAAAAAAAAALL) {
        sub_188D718();
      }
      unint64_t v14 = (char *)operator new(24 * v13);
    }
    else
    {
      unint64_t v14 = 0;
    }
    char v15 = &v14[24 * v10];
    *(void *)char v15 = *a2;
    *(_OWORD *)(v15 + 8) = *a3;
    uint64_t v8 = v15 + 24;
    if (v7 != v9)
    {
      do
      {
        long long v16 = *(_OWORD *)(v7 - 24);
        *((void *)v15 - 1) = *((void *)v7 - 1);
        *(_OWORD *)(v15 - 24) = v16;
        v15 -= 24;
        v7 -= 24;
      }
      while (v7 != v9);
      uint64_t v7 = *a1;
    }
    *a1 = v15;
    a1[1] = v8;
    a1[2] = &v14[24 * v13];
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    *(void *)uint64_t v7 = *a2;
    *(_OWORD *)(v7 + 8) = *a3;
    uint64_t v8 = v7 + 24;
  }
  a1[1] = v8;
  return v8 - 24;
}

void sub_F165CC(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = *a3;
  uint64_t v9 = a3[1];
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  int64_t v11 = v9 - v10;
  if (v9 == v10)
  {
    char v15 = 0;
  }
  else
  {
    uint64_t v12 = v11 / 24;
    if ((unint64_t)(v11 / 24) >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    unint64_t v14 = (char *)operator new(v11);
    char v15 = v14;
    uint64_t v16 = 0;
    *a5 = v14;
    a5[1] = v14;
    long long v17 = &v14[24 * v12];
    a5[2] = v17;
    do
    {
      char v18 = &v14[v16];
      *(_OWORD *)char v18 = *(_OWORD *)a4;
      *((void *)v18 + 2) = *(void *)(a4 + 16);
      v16 += 24;
    }
    while (24 * v12 != v16);
    a5[1] = v17;
  }
  if (sub_58070(a1, a2))
  {
    uint64_t v19 = sub_560F4(a1, a2);
    uint64_t v20 = a3[1] - *a3;
    if (v20)
    {
      uint64_t v21 = (void *)v19;
      uint64_t v22 = 0;
      uint64_t v23 = v20 / 24;
      do
      {
        uint64_t v24 = *a3 + v22;
        if (sub_58070(v21, v24))
        {
          double v25 = (void *)sub_560F4(v21, v24);
          sub_F15B20(v25);
          unsigned int v26 = &v15[v22];
          *(void *)unsigned int v26 = v27;
          *((void *)v26 + 1) = v28;
          *((void *)v26 + 2) = v29;
        }
        v22 += 24;
        --v23;
      }
      while (v23);
    }
  }
}

void sub_F16738(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_F1675C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_58070(a1, a2);
  if (result)
  {
    *(void *)(a3 + 8) = *(void *)a3;
    uint64_t result = (uint64_t *)sub_5C4AC(a1, a2);
    uint64_t v7 = *result;
    uint64_t v8 = result[1];
    if (*result != v8)
    {
      do
      {
        if (*(_DWORD *)(v7 + 8) != 2)
        {
          exception = __cxa_allocate_exception(8uLL);
          void *exception = &off_23FDF58;
        }
        uint64_t v10 = *(void **)v7;
        char v15 = 9;
        strcpy((char *)__p, "threshold");
        int v11 = sub_31AC04(v10, (uint64_t)__p);
        if (v15 < 0) {
          operator delete(__p[0]);
        }
        int v13 = v11;
        __p[0] = (void *)sub_ED57A0(v10);
        __p[1] = v9;
        uint64_t result = (uint64_t *)sub_F168AC((char **)a3, &v13, __p);
        v7 += 16;
      }
      while (v7 != v8);
    }
  }
  return result;
}

void sub_F16890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_F168AC(char **a1, _DWORD *a2, _OWORD *a3)
{
  uint64_t v7 = a1[1];
  unint64_t v6 = (unint64_t)a1[2];
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = *a1;
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v11 = v10 + 1;
    if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_2E00();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)v9) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 > 0xAAAAAAAAAAAAAAALL) {
        sub_188D718();
      }
      unint64_t v14 = (char *)operator new(24 * v13);
    }
    else
    {
      unint64_t v14 = 0;
    }
    char v15 = &v14[24 * v10];
    *(_DWORD *)char v15 = *a2;
    *(_OWORD *)(v15 + 8) = *a3;
    uint64_t v8 = v15 + 24;
    if (v7 != v9)
    {
      do
      {
        long long v16 = *(_OWORD *)(v7 - 24);
        *((void *)v15 - 1) = *((void *)v7 - 1);
        *(_OWORD *)(v15 - 24) = v16;
        v15 -= 24;
        v7 -= 24;
      }
      while (v7 != v9);
      uint64_t v7 = *a1;
    }
    *a1 = v15;
    a1[1] = v8;
    a1[2] = &v14[24 * v13];
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v7 = *a2;
    *(_OWORD *)(v7 + 8) = *a3;
    uint64_t v8 = v7 + 24;
  }
  a1[1] = v8;
  return v8 - 24;
}

void sub_F169FC(char **a1, unint64_t a2, _OWORD *a3)
{
  uint64_t v7 = a1[1];
  unint64_t v6 = a1[2];
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      uint64_t v13 = 16 * a2;
      unint64_t v14 = &v7[16 * a2];
      do
      {
        *(_OWORD *)uint64_t v7 = *a3;
        v7 += 16;
        v13 -= 16;
      }
      while (v13);
      uint64_t v7 = v14;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = (v7 - *a1) >> 4;
    if ((v8 + a2) >> 60) {
      sub_2E00();
    }
    uint64_t v9 = v6 - *a1;
    uint64_t v10 = v9 >> 3;
    if (v9 >> 3 <= v8 + a2) {
      uint64_t v10 = v8 + a2;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11)
    {
      if (v11 >> 60) {
        sub_188D718();
      }
      unint64_t v12 = (char *)operator new(16 * v11);
    }
    else
    {
      unint64_t v12 = 0;
    }
    char v15 = &v12[16 * v8];
    uint64_t v16 = 16 * a2;
    long long v17 = &v15[16 * a2];
    char v18 = v15;
    do
    {
      *(_OWORD *)char v18 = *a3;
      v18 += 16;
      v16 -= 16;
    }
    while (v16);
    uint64_t v19 = *a1;
    if (v7 != *a1)
    {
      do
      {
        *((_OWORD *)v15 - 1) = *((_OWORD *)v7 - 1);
        v15 -= 16;
        v7 -= 16;
      }
      while (v7 != v19);
      uint64_t v7 = *a1;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = &v12[16 * v11];
    if (v7)
    {
      operator delete(v7);
    }
  }
}

uint64_t *sub_F16B50(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_58070(a1, a2);
  if (result)
  {
    *(void *)(a3 + 8) = *(void *)a3;
    uint64_t result = (uint64_t *)sub_5C4AC(a1, a2);
    uint64_t v7 = *result;
    uint64_t v8 = result[1];
    if (*result != v8)
    {
      do
      {
        if (*(_DWORD *)(v7 + 8) != 2)
        {
          exception = __cxa_allocate_exception(8uLL);
          void *exception = &off_23FDF58;
        }
        uint64_t v9 = *(void **)v7;
        char v15 = 9;
        strcpy((char *)__p, "threshold");
        int v10 = sub_31AC04(v9, (uint64_t)__p);
        if (v15 < 0) {
          operator delete(__p[0]);
        }
        int v13 = v10;
        strcpy((char *)__p, "value");
        char v15 = 5;
        double v11 = sub_5C7E8(v9, (uint64_t)__p);
        if (v15 < 0) {
          operator delete(__p[0]);
        }
        __p[0] = *(void **)&v11;
        uint64_t result = (uint64_t *)sub_F16CE4((char **)a3, &v13, __p);
        v7 += 16;
      }
      while (v7 != v8);
    }
  }
  return result;
}

void sub_F16CC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_F16CE4(char **a1, _DWORD *a2, void *a3)
{
  uint64_t v7 = a1[1];
  unint64_t v6 = (unint64_t)a1[2];
  if ((unint64_t)v7 < v6)
  {
    *(_DWORD *)uint64_t v7 = *a2;
    *((void *)v7 + 1) = *a3;
    uint64_t v8 = v7 + 16;
    goto LABEL_13;
  }
  uint64_t v9 = *a1;
  uint64_t v10 = (v7 - *a1) >> 4;
  unint64_t v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 60) {
    sub_2E00();
  }
  uint64_t v12 = v6 - (void)v9;
  if (v12 >> 3 > v11) {
    unint64_t v11 = v12 >> 3;
  }
  BOOL v13 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0;
  unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
  if (!v13) {
    unint64_t v14 = v11;
  }
  if (v14 >> 60) {
    sub_188D718();
  }
  uint64_t v15 = 16 * v14;
  uint64_t v16 = (char *)operator new(16 * v14);
  long long v17 = &v16[16 * v10];
  char v18 = &v16[v15];
  *(_DWORD *)long long v17 = *a2;
  *((void *)v17 + 1) = *a3;
  uint64_t v8 = v17 + 16;
  if (v7 == v9)
  {
    *a1 = v17;
    a1[1] = v8;
    a1[2] = v18;
    if (!v9) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  do
  {
    uint64_t v19 = v17 - 16;
    *((_OWORD *)v17 - 1) = *((_OWORD *)v7 - 1);
    v7 -= 16;
    v17 -= 16;
  }
  while (v7 != v9);
  *a1 = v19;
  a1[1] = v8;
  a1[2] = v18;
  if (v9) {
LABEL_12:
  }
    operator delete(v9);
LABEL_13:
  a1[1] = v8;
  return v8 - 16;
}

void sub_F16E14(uint64_t *a1, unint64_t a2)
{
  BOOL v5 = (void *)a1[1];
  uint64_t v4 = a1[2];
  unint64_t v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 4)
  {
    if (a2)
    {
      if (((a2 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0) {
        goto LABEL_37;
      }
      uint64_t v17 = ((a2 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      unint64_t v6 = &v5[2 * (v17 & 0x1FFFFFFFFFFFFFFELL)];
      char v18 = v5 + 2;
      uint64_t v19 = v17 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(v18 - 2) = 0x7FFFFFFFFFFFFFFFLL;
        void *v18 = 0x7FFFFFFFFFFFFFFFLL;
        *(v18 - 1) = 0x7FFFFFFFFFFFFFFFLL;
        v18[1] = 0x7FFFFFFFFFFFFFFFLL;
        v18 += 4;
        v19 -= 2;
      }
      while (v19);
      if (v17 != (v17 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_37:
        do
        {
          *unint64_t v6 = 0x7FFFFFFFFFFFFFFFLL;
          v6[1] = 0x7FFFFFFFFFFFFFFFLL;
          v6 += 2;
        }
        while (v6 != &v5[2 * a2]);
      }
      unint64_t v6 = &v5[2 * a2];
    }
    a1[1] = (uint64_t)v6;
    return;
  }
  uint64_t v7 = (void *)*a1;
  uint64_t v8 = ((uint64_t)v5 - *a1) >> 4;
  unint64_t v9 = v8 + a2;
  if ((v8 + a2) >> 60) {
    sub_2E00();
  }
  uint64_t v10 = v4 - (void)v7;
  if (v10 >> 3 > v9) {
    unint64_t v9 = v10 >> 3;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v9;
  }
  if (v11)
  {
    if (v11 >> 60) {
      sub_188D718();
    }
    uint64_t v12 = (char *)operator new(16 * v11);
    uint64_t v13 = (uint64_t)&v12[16 * v8];
    uint64_t v14 = v13 + 16 * a2;
    uint64_t v15 = (void *)v13;
    uint64_t v16 = (a2 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (!v16) {
      goto LABEL_24;
    }
LABEL_21:
    uint64_t v20 = v16 + 1;
    uint64_t v15 = (void *)(v13 + 16 * (v20 & 0x1FFFFFFFFFFFFFFELL));
    uint64_t v21 = (void *)(v13 + 16);
    uint64_t v22 = v20 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v21 - 2) = 0x7FFFFFFFFFFFFFFFLL;
      *uint64_t v21 = 0x7FFFFFFFFFFFFFFFLL;
      *(v21 - 1) = 0x7FFFFFFFFFFFFFFFLL;
      v21[1] = 0x7FFFFFFFFFFFFFFFLL;
      v21 += 4;
      v22 -= 2;
    }
    while (v22);
    if (v20 == (v20 & 0x1FFFFFFFFFFFFFFELL)) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  uint64_t v12 = 0;
  uint64_t v13 = 16 * v8;
  uint64_t v14 = 16 * v8 + 16 * a2;
  uint64_t v15 = (void *)(16 * v8);
  uint64_t v16 = (a2 - 1) & 0xFFFFFFFFFFFFFFFLL;
  if (v16) {
    goto LABEL_21;
  }
  do
  {
LABEL_24:
    *uint64_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    v15[1] = 0x7FFFFFFFFFFFFFFFLL;
    v15 += 2;
  }
  while (v15 != (void *)v14);
LABEL_25:
  uint64_t v23 = &v12[16 * v11];
  if (v5 == v7)
  {
    double v25 = (void *)*a1;
    *a1 = v13;
    a1[1] = v14;
    a1[2] = (uint64_t)v23;
    if (!v25) {
      return;
    }
    goto LABEL_28;
  }
  do
  {
    uint64_t v24 = v13 - 16;
    *(_OWORD *)(v13 - 16) = *((_OWORD *)v6 - 1);
    v6 -= 2;
    v13 -= 16;
  }
  while (v6 != v7);
  double v25 = (void *)*a1;
  *a1 = v24;
  a1[1] = v14;
  a1[2] = (uint64_t)v23;
  if (v25)
  {
LABEL_28:
    operator delete(v25);
  }
}

double sub_F17064()
{
  unk_25FCC37 = 16641;
  word_25FCC20 = 65;
  byte_25FCC4F = 1;
  byte_25FCC39 = 0;
  qword_254E500 = (uint64_t)operator new(0x40uLL);
  unk_254E508 = xmmword_20B9810;
  strcpy((char *)qword_254E500, "routing/route-planning/path-finding/CyclingCostFunctions.json");
  return *(double *)"stFunctions.json";
}

void *sub_F170E0(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *uint64_t result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = 0;
  result[4] = 0;
  result[5] = 0;
  return result;
}

uint64_t *sub_F170F0(uint64_t *a1, void *a2)
{
  *a1 = sub_3750CC(a2);
  a1[1] = sub_3766F8(a2);
  a1[2] = sub_3777C0(a2);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  return a1;
}

unint64_t sub_F17140(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  v6[0] = 0x7FFFFFFFFFFFFFFFLL;
  v6[1] = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v8 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
  int v4 = sub_F17214(a1, a2, a3, a4, (uint64_t)v6);
  unint64_t result = 0x7FFFFFFFFFFFFFFFLL;
  if (v4) {
    return (v13 + v11 + v9 + v7 + LODWORD(v6[0])) | ((unint64_t)(HIDWORD(v13)
  }
                                                                                                  + HIDWORD(v11)
                                                                                                  + HIDWORD(v9)
                                                                                                  + HIDWORD(v7)
                                                                                                  + HIDWORD(v6[0])) << 32);
  return result;
}

uint64_t sub_F17214(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *a1;
  uint64_t v9 = *a2;
  unint64_t v10 = HIDWORD(*a2);
  unint64_t v11 = v10 & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(*a2) << 32);
  uint64_t v12 = (int *)sub_2D5D58(*a1, v11);
  if (*(unsigned char *)(v8 + 7772)) {
    sub_2DB8E0(v8 + 3896, v10, 0);
  }
  sub_2E5C38(v8, v11, 1);
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  if (*(double *)(a3 + 32) <= 0.95) {
    *(_OWORD *)a5 = *(_OWORD *)(a4 + 1600);
  }
  uint64_t v13 = *v12;
  uint64_t v14 = -v13;
  uint64_t v15 = (unsigned __int16 *)((char *)v12 - v13);
  unsigned int v16 = *v15;
  if ((v9 & 2) != 0)
  {
    if (v16 < 0x47) {
      goto LABEL_15;
    }
    uint64_t v18 = v15[35];
    if (!v18 || (*((unsigned char *)v12 + v18) & 1) == 0 && (*(int *)((char *)v12 + v18) & 2) == 0) {
      goto LABEL_15;
    }
  }
  else if (v16 < 0x47 {
         || (uint64_t v17 = v15[35], !v17)
  }
         || (*((unsigned char *)v12 + v17) & 2) == 0 && (*(int *)((char *)v12 + v17) & 1) == 0)
  {
LABEL_15:
    *(_OWORD *)(a5 + 16) = *(_OWORD *)(a4 + 1616);
    uint64_t v14 = -(uint64_t)*v12;
  }
  uint64_t v19 = (unsigned __int16 *)((char *)v12 + v14);
  if (*v19 >= 0x2Fu)
  {
    uint64_t v20 = v19[23];
    if (v20)
    {
      if (*((unsigned char *)v12 + v20) == 9) {
        *(_OWORD *)(a5 + 32) = *(_OWORD *)(a4 + 1632);
      }
    }
  }
  double v21 = *(double *)(a4 + 48);
  BOOL v22 = (*(void *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) - 1 < 0xFFFFFFFFFFFFFLL;
  BOOL v23 = v21 < 0.0 && ((*(void *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF;
  if (v21 >= 0.0) {
    BOOL v22 = 0;
  }
  char v24 = (*(void *)&v21 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000 || v22;
  if ((*(void *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FF0000000000000) {
    char v24 = 1;
  }
  if (((v24 | v23) & 1) == 0 && v21 > 0.0)
  {
    uint64_t v25 = *(void *)(a3 + 8);
    uint64_t v26 = 0x7FFFFFFFFFFFFFFFLL;
    unint64_t v27 = 0x7FFFFFFFFFFFFFFFLL;
    if (v25 == 0x7FFFFFFFFFFFFFFFLL || v25 < 0) {
      goto LABEL_43;
    }
    double v28 = (double)v25 / 100000.0 / v21 * 60.0 * 60.0 * 10.0;
    if (v28 >= 0.0)
    {
      if (v28 < 4.50359963e15)
      {
        uint64_t v29 = (uint64_t)(v28 + v28) + 1;
LABEL_41:
        double v28 = (double)(v29 >> 1);
      }
    }
    else if (v28 > -4.50359963e15)
    {
      uint64_t v29 = (uint64_t)(v28 + v28);
      if (v29 >= 1) {
        --v29;
      }
      goto LABEL_41;
    }
    unint64_t v27 = (int)v28 | ((unint64_t)(int)v28 << 32);
    uint64_t v26 = *(void *)(a3 + 8);
    goto LABEL_43;
  }
  uint64_t v26 = 0x7FFFFFFFFFFFFFFFLL;
  unint64_t v27 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_43:
  v37[0] = v27;
  v37[1] = v26;
  BOOL v31 = v27 == -1 || HIDWORD(v27) == 0x7FFFFFFF || v26 == 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v32 = !v31;
  if (!v31)
  {
    double v33 = *(double *)(a3 + 32);
    if (v33 <= 0.95) {
      uint64_t v34 = (double *)(a4 + 1576);
    }
    else {
      uint64_t v34 = (double *)(a4 + 1552);
    }
    *(void *)(a5 + 48) = sub_ECA2D8(v37, v34, v33);
    *(void *)(a5 + 56) = v35;
    if (*(unsigned char *)(a3 + 64)
      && *(double *)(a3 + 16) >= *(double *)(a4 + 1672)
      && *(void *)(a3 + 8) <= *(void *)(a4 + 1664))
    {
      *(_OWORD *)(a5 + 64) = *(_OWORD *)(a4 + 1648);
    }
  }
  return v32;
}

unint64_t sub_F17510(uint64_t *a1, int **a2, unsigned int a3, uint64_t a4)
{
  int v10 = -1;
  int v11 = -1;
  int v12 = -1;
  int v13 = -1;
  int v14 = -1;
  int v15 = -1;
  int v16 = -1;
  int v17 = -1;
  int v18 = -1;
  int v19 = -1;
  int v20 = -1;
  int v21 = -1;
  int v22 = -1;
  int v23 = -1;
  int v24 = -1;
  int v25 = -1;
  int v26 = -1;
  int v27 = -1;
  int v28 = -1;
  int v29 = -1;
  int v30 = -1;
  int v31 = -1;
  int v34 = -1;
  int v37 = -1;
  int v40 = -1;
  int v43 = -1;
  int v46 = -1;
  int v49 = -1;
  int v52 = -1;
  int v55 = -1;
  int v58 = -1;
  int v61 = -1;
  int v64 = -1;
  int v67 = -1;
  int v70 = -1;
  int v73 = -1;
  int v76 = -1;
  int v79 = -1;
  int v82 = -1;
  int v85 = -1;
  int v88 = -1;
  int v91 = -1;
  int v94 = -1;
  int v97 = -1;
  int v100 = -1;
  int v103 = -1;
  int v106 = -1;
  int v109 = -1;
  int v112 = -1;
  int v115 = -1;
  int v118 = -1;
  int v121 = -1;
  int v124 = -1;
  int v127 = -1;
  int v130 = -1;
  int v133 = -1;
  int v136 = -1;
  int v139 = -1;
  int v142 = -1;
  if (!sub_F17F00(a1, a2, a3, a4, (uint64_t)&v9)) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  long long v8 = v9;
  float64x2_t v6 = vmulq_f64(vmulq_f64(vmulq_f64(vmulq_f64(vmulq_f64(vmulq_f64(vmulq_f64(vmulq_f64(vmulq_f64(vmulq_f64(vmulq_f64(vmulq_f64(vmulq_f64(vmulq_f64(vmulq_f64(vmulq_f64(vmulq_f64(vmulq_f64(vmulq_f64(vmulq_f64(
                                               vmulq_f64(vmulq_f64(vmulq_f64(vmulq_f64(vmulq_f64(vmulq_f64(vmulq_f64(vmulq_f64(vmulq_f64(vmulq_f64(vmulq_f64(vmulq_f64(vmulq_f64(vmulq_f64(vmulq_f64(v35, v38), v41), v44), v47), v50), v53), v56), v59),
                                                             v62),
                                                           v65),
                                                         v68),
                                                       v71),
                                                     v74),
                                                   v77),
                                                 v80),
                                               v83),
                                             v86),
                                           v89),
                                         v92),
                                       v95),
                                     v98),
                                   v101),
                                 v104),
                               v107),
                             v110),
                           v113),
                         v116),
                       v119),
                     v122),
                   v125),
                 v128),
               v131),
             v134),
           v137),
         v140);
  double v7 = v36
     * v39
     * v42
     * v45
     * v48
     * v51
     * v54
     * v57
     * v60
     * v63
     * v66
     * v69
     * v72
     * v75
     * v78
     * v81
     * v84
     * v87
     * v90
     * v93
     * v96
     * v99
     * v102
     * v105
     * v108
     * v111
     * v114
     * v117
     * v120
     * v123
     * v126
     * v129
     * v132
     * v135
     * v138
     * v141;
  unint64_t v4 = sub_ECA2D8(&v8, v6.f64, v7);
  return (v32 + v4) | ((unint64_t)(v33 + HIDWORD(v4)) << 32);
}

unint64_t sub_F178C0(uint64_t *a1, int **a2, unsigned int a3, uint64_t a4)
{
  int v13 = -1;
  int v16 = -1;
  int v19 = -1;
  int v22 = -1;
  int v25 = -1;
  int v28 = -1;
  int v31 = -1;
  int v34 = -1;
  int v37 = -1;
  int v40 = -1;
  int v43 = -1;
  int v46 = -1;
  int v49 = -1;
  int v52 = -1;
  int v55 = -1;
  int v58 = -1;
  int v61 = -1;
  int v64 = -1;
  int v67 = -1;
  int v70 = -1;
  int v73 = -1;
  int v76 = -1;
  int v79 = -1;
  int v82 = -1;
  int v85 = -1;
  int v88 = -1;
  int v91 = -1;
  int v94 = -1;
  int v97 = -1;
  int v100 = -1;
  int v103 = -1;
  int v106 = -1;
  int v109 = -1;
  int v112 = -1;
  int v115 = -1;
  int v118 = -1;
  int v121 = -1;
  int v124 = -1;
  int v127 = -1;
  int v130 = -1;
  int v133 = -1;
  int v136 = -1;
  int v139 = -1;
  int v142 = -1;
  int v145 = -1;
  int v148 = -1;
  int v151 = -1;
  int v154 = -1;
  int v157 = -1;
  int v160 = -1;
  int v163 = -1;
  int v166 = -1;
  int v169 = -1;
  int v172 = -1;
  int v175 = -1;
  int v178 = -1;
  int v181 = -1;
  int v184 = -1;
  int v187 = -1;
  if ((sub_F17F00(a1, a2, a3, a4, (uint64_t)&v12) & 1) == 0 || !sub_F19870(a1, a2, a4, (uint64_t)&v12)) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  long long v11 = v12;
  float64x2_t v9 = vmulq_f64(vmulq_f64(vmulq_f64(vmulq_f64(vmulq_f64(vmulq_f64(vmulq_f64(vmulq_f64(vmulq_f64(vmulq_f64(vmulq_f64(vmulq_f64(vmulq_f64(vmulq_f64(vmulq_f64(vmulq_f64(vmulq_f64(vmulq_f64(vmulq_f64(vmulq_f64(
                                               vmulq_f64(vmulq_f64(vmulq_f64(vmulq_f64(vmulq_f64(vmulq_f64(vmulq_f64(vmulq_f64(vmulq_f64(vmulq_f64(vmulq_f64(vmulq_f64(vmulq_f64(vmulq_f64(vmulq_f64(v80, v83), v86), v89), v92), v95), v98), v101), v104),
                                                             v107),
                                                           v110),
                                                         v113),
                                                       v116),
                                                     v119),
                                                   v122),
                                                 v125),
                                               v128),
                                             v131),
                                           v134),
                                         v137),
                                       v140),
                                     v143),
                                   v146),
                                 v149),
                               v152),
                             v155),
                           v158),
                         v161),
                       v164),
                     v167),
                   v170),
                 v173),
               v176),
             v179),
           v182),
         v185);
  double v10 = v81
      * v84
      * v87
      * v90
      * v93
      * v96
      * v99
      * v102
      * v105
      * v108
      * v111
      * v114
      * v117
      * v120
      * v123
      * v126
      * v129
      * v132
      * v135
      * v138
      * v141
      * v144
      * v147
      * v150
      * v153
      * v156
      * v159
      * v162
      * v165
      * v168
      * v171
      * v174
      * v177
      * v180
      * v183
      * v186;
  unint64_t v7 = sub_ECA2D8(&v11, v9.f64, v10);
  return ((unint64_t)(v78
                                         + v75
                                         + v72
                                         + v69
                                         + v66
                                         + v63
                                         + v60
                                         + v57
                                         + v54
                                         + v51
                                         + v48
                                         + v45
                                         + v42
                                         + v39
                                         + v36
                                         + v33
                                         + v30
                                         + v27
                                         + v24
                                         + v21
                                         + v18
                                         + v15
                                         + HIDWORD(v7)) << 32) | (v77
                                                                              + v74
                                                                              + v71
                                                                              + v68
                                                                              + v65
                                                                              + v62
                                                                              + v59
                                                                              + v56
                                                                              + v53
                                                                              + v50
                                                                              + v47
                                                                              + v44
                                                                              + v41
                                                                              + v38
                                                                              + v35
                                                                              + v32
                                                                              + v29
                                                                              + v26
                                                                              + v23
                                                                              + v20
                                                                              + v17
                                                                              + v14
                                                                              + v7);
}

uint64_t sub_F17E8C(uint64_t *a1, int **a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = sub_F17F00(a1, a2, a3, a4, a6);
  if (result)
  {
    return sub_F19870(a1, a2, a4, a6);
  }
  return result;
}

uint64_t sub_F17F00(uint64_t *a1, int **a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  if (*(_DWORD *)(a5 + 24)) {
    *(_DWORD *)(a5 + 24) = 0;
  }
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  int v9 = *(_DWORD *)(a5 + 728);
  *(_OWORD *)(a5 + 704) = 0u;
  if (v9) {
    *(_DWORD *)(a5 + 728) = 0;
  }
  int v10 = *(_DWORD *)(a5 + 760);
  __asm { FMOV            V0.2D, #1.0 }
  *(float64x2_t *)(a5 + 736) = _Q0;
  *(void *)(a5 + 752) = 0x3FF0000000000000;
  if (v10 == 1)
  {
    int v15 = *(_DWORD *)(a5 + 792);
    *(float64x2_t *)(a5 + 768) = _Q0;
    *(void *)(a5 + 784) = 0x3FF0000000000000;
    if (v15 == 1) {
      goto LABEL_7;
    }
  }
  else
  {
    *(_DWORD *)(a5 + 760) = 1;
    int v53 = *(_DWORD *)(a5 + 792);
    *(float64x2_t *)(a5 + 768) = _Q0;
    *(void *)(a5 + 784) = 0x3FF0000000000000;
    if (v53 == 1)
    {
LABEL_7:
      int v16 = *(_DWORD *)(a5 + 824);
      *(float64x2_t *)(a5 + 800) = _Q0;
      *(void *)(a5 + 816) = 0x3FF0000000000000;
      if (v16 == 1) {
        goto LABEL_8;
      }
      goto LABEL_50;
    }
  }
  *(_DWORD *)(a5 + 792) = 1;
  int v54 = *(_DWORD *)(a5 + 824);
  *(float64x2_t *)(a5 + 800) = _Q0;
  *(void *)(a5 + 816) = 0x3FF0000000000000;
  if (v54 == 1)
  {
LABEL_8:
    int v17 = *(_DWORD *)(a5 + 856);
    *(float64x2_t *)(a5 + 832) = _Q0;
    *(void *)(a5 + 848) = 0x3FF0000000000000;
    if (v17 == 1) {
      goto LABEL_9;
    }
    goto LABEL_51;
  }
LABEL_50:
  *(_DWORD *)(a5 + 824) = 1;
  int v55 = *(_DWORD *)(a5 + 856);
  *(float64x2_t *)(a5 + 832) = _Q0;
  *(void *)(a5 + 848) = 0x3FF0000000000000;
  if (v55 == 1)
  {
LABEL_9:
    int v18 = *(_DWORD *)(a5 + 888);
    *(float64x2_t *)(a5 + 864) = _Q0;
    *(void *)(a5 + 880) = 0x3FF0000000000000;
    if (v18 == 1) {
      goto LABEL_10;
    }
    goto LABEL_52;
  }
LABEL_51:
  *(_DWORD *)(a5 + 856) = 1;
  int v56 = *(_DWORD *)(a5 + 888);
  *(float64x2_t *)(a5 + 864) = _Q0;
  *(void *)(a5 + 880) = 0x3FF0000000000000;
  if (v56 == 1)
  {
LABEL_10:
    int v19 = *(_DWORD *)(a5 + 920);
    *(float64x2_t *)(a5 + 896) = _Q0;
    *(void *)(a5 + 912) = 0x3FF0000000000000;
    if (v19 == 1) {
      goto LABEL_11;
    }
    goto LABEL_53;
  }
LABEL_52:
  *(_DWORD *)(a5 + 888) = 1;
  int v57 = *(_DWORD *)(a5 + 920);
  *(float64x2_t *)(a5 + 896) = _Q0;
  *(void *)(a5 + 912) = 0x3FF0000000000000;
  if (v57 == 1)
  {
LABEL_11:
    int v20 = *(_DWORD *)(a5 + 952);
    *(float64x2_t *)(a5 + 928) = _Q0;
    *(void *)(a5 + 944) = 0x3FF0000000000000;
    if (v20 == 1) {
      goto LABEL_12;
    }
    goto LABEL_54;
  }
LABEL_53:
  *(_DWORD *)(a5 + 920) = 1;
  int v58 = *(_DWORD *)(a5 + 952);
  *(float64x2_t *)(a5 + 928) = _Q0;
  *(void *)(a5 + 944) = 0x3FF0000000000000;
  if (v58 == 1)
  {
LABEL_12:
    int v21 = *(_DWORD *)(a5 + 984);
    *(float64x2_t *)(a5 + 960) = _Q0;
    *(void *)(a5 + 976) = 0x3FF0000000000000;
    if (v21 == 1) {
      goto LABEL_13;
    }
    goto LABEL_55;
  }
LABEL_54:
  *(_DWORD *)(a5 + 952) = 1;
  int v59 = *(_DWORD *)(a5 + 984);
  *(float64x2_t *)(a5 + 960) = _Q0;
  *(void *)(a5 + 976) = 0x3FF0000000000000;
  if (v59 == 1)
  {
LABEL_13:
    int v22 = *(_DWORD *)(a5 + 1016);
    *(float64x2_t *)(a5 + 992) = _Q0;
    *(void *)(a5 + 1008) = 0x3FF0000000000000;
    if (v22 == 1) {
      goto LABEL_14;
    }
    goto LABEL_56;
  }
LABEL_55:
  *(_DWORD *)(a5 + 984) = 1;
  int v60 = *(_DWORD *)(a5 + 1016);
  *(float64x2_t *)(a5 + 992) = _Q0;
  *(void *)(a5 + 1008) = 0x3FF0000000000000;
  if (v60 == 1)
  {
LABEL_14:
    int v23 = *(_DWORD *)(a5 + 1048);
    *(float64x2_t *)(a5 + 1024) = _Q0;
    *(void *)(a5 + 1040) = 0x3FF0000000000000;
    if (v23 == 1) {
      goto LABEL_15;
    }
    goto LABEL_57;
  }
LABEL_56:
  *(_DWORD *)(a5 + 1016) = 1;
  int v61 = *(_DWORD *)(a5 + 1048);
  *(float64x2_t *)(a5 + 1024) = _Q0;
  *(void *)(a5 + 1040) = 0x3FF0000000000000;
  if (v61 == 1)
  {
LABEL_15:
    int v24 = *(_DWORD *)(a5 + 1080);
    *(float64x2_t *)(a5 + 1056) = _Q0;
    *(void *)(a5 + 1072) = 0x3FF0000000000000;
    if (v24 == 1) {
      goto LABEL_16;
    }
    goto LABEL_58;
  }
LABEL_57:
  *(_DWORD *)(a5 + 1048) = 1;
  int v62 = *(_DWORD *)(a5 + 1080);
  *(float64x2_t *)(a5 + 1056) = _Q0;
  *(void *)(a5 + 1072) = 0x3FF0000000000000;
  if (v62 == 1)
  {
LABEL_16:
    int v25 = *(_DWORD *)(a5 + 1112);
    *(float64x2_t *)(a5 + 1088) = _Q0;
    *(void *)(a5 + 1104) = 0x3FF0000000000000;
    if (v25 == 1) {
      goto LABEL_17;
    }
    goto LABEL_59;
  }
LABEL_58:
  *(_DWORD *)(a5 + 1080) = 1;
  int v63 = *(_DWORD *)(a5 + 1112);
  *(float64x2_t *)(a5 + 1088) = _Q0;
  *(void *)(a5 + 1104) = 0x3FF0000000000000;
  if (v63 == 1)
  {
LABEL_17:
    int v26 = *(_DWORD *)(a5 + 1144);
    *(float64x2_t *)(a5 + 1120) = _Q0;
    *(void *)(a5 + 1136) = 0x3FF0000000000000;
    if (v26 == 1) {
      goto LABEL_18;
    }
    goto LABEL_60;
  }
LABEL_59:
  *(_DWORD *)(a5 + 1112) = 1;
  int v64 = *(_DWORD *)(a5 + 1144);
  *(float64x2_t *)(a5 + 1120) = _Q0;
  *(void *)(a5 + 1136) = 0x3FF0000000000000;
  if (v64 == 1)
  {
LABEL_18:
    int v27 = *(_DWORD *)(a5 + 1176);
    *(float64x2_t *)(a5 + 1152) = _Q0;
    *(void *)(a5 + 1168) = 0x3FF0000000000000;
    if (v27 == 1) {
      goto LABEL_19;
    }
    goto LABEL_61;
  }
LABEL_60:
  *(_DWORD *)(a5 + 1144) = 1;
  int v65 = *(_DWORD *)(a5 + 1176);
  *(float64x2_t *)(a5 + 1152) = _Q0;
  *(void *)(a5 + 1168) = 0x3FF0000000000000;
  if (v65 == 1)
  {
LABEL_19:
    int v28 = *(_DWORD *)(a5 + 1208);
    *(float64x2_t *)(a5 + 1184) = _Q0;
    *(void *)(a5 + 1200) = 0x3FF0000000000000;
    if (v28 == 1) {
      goto LABEL_20;
    }
    goto LABEL_62;
  }
LABEL_61:
  *(_DWORD *)(a5 + 1176) = 1;
  int v66 = *(_DWORD *)(a5 + 1208);
  *(float64x2_t *)(a5 + 1184) = _Q0;
  *(void *)(a5 + 1200) = 0x3FF0000000000000;
  if (v66 == 1)
  {
LABEL_20:
    int v29 = *(_DWORD *)(a5 + 1240);
    *(float64x2_t *)(a5 + 1216) = _Q0;
    *(void *)(a5 + 1232) = 0x3FF0000000000000;
    if (v29 == 1) {
      goto LABEL_21;
    }
    goto LABEL_63;
  }
LABEL_62:
  *(_DWORD *)(a5 + 1208) = 1;
  int v67 = *(_DWORD *)(a5 + 1240);
  *(float64x2_t *)(a5 + 1216) = _Q0;
  *(void *)(a5 + 1232) = 0x3FF0000000000000;
  if (v67 == 1)
  {
LABEL_21:
    int v30 = *(_DWORD *)(a5 + 1272);
    *(float64x2_t *)(a5 + 1248) = _Q0;
    *(void *)(a5 + 1264) = 0x3FF0000000000000;
    if (v30 == 1) {
      goto LABEL_22;
    }
    goto LABEL_64;
  }
LABEL_63:
  *(_DWORD *)(a5 + 1240) = 1;
  int v68 = *(_DWORD *)(a5 + 1272);
  *(float64x2_t *)(a5 + 1248) = _Q0;
  *(void *)(a5 + 1264) = 0x3FF0000000000000;
  if (v68 == 1)
  {
LABEL_22:
    int v31 = *(_DWORD *)(a5 + 1304);
    *(float64x2_t *)(a5 + 1280) = _Q0;
    *(void *)(a5 + 1296) = 0x3FF0000000000000;
    if (v31 == 1) {
      goto LABEL_23;
    }
    goto LABEL_65;
  }
LABEL_64:
  *(_DWORD *)(a5 + 1272) = 1;
  int v69 = *(_DWORD *)(a5 + 1304);
  *(float64x2_t *)(a5 + 1280) = _Q0;
  *(void *)(a5 + 1296) = 0x3FF0000000000000;
  if (v69 == 1)
  {
LABEL_23:
    int v32 = *(_DWORD *)(a5 + 1336);
    *(float64x2_t *)(a5 + 1312) = _Q0;
    *(void *)(a5 + 1328) = 0x3FF0000000000000;
    if (v32 == 1) {
      goto LABEL_24;
    }
    goto LABEL_66;
  }
LABEL_65:
  *(_DWORD *)(a5 + 1304) = 1;
  int v70 = *(_DWORD *)(a5 + 1336);
  *(float64x2_t *)(a5 + 1312) = _Q0;
  *(void *)(a5 + 1328) = 0x3FF0000000000000;
  if (v70 == 1)
  {
LABEL_24:
    int v33 = *(_DWORD *)(a5 + 1368);
    *(float64x2_t *)(a5 + 1344) = _Q0;
    *(void *)(a5 + 1360) = 0x3FF0000000000000;
    if (v33 == 1) {
      goto LABEL_25;
    }
    goto LABEL_67;
  }
LABEL_66:
  *(_DWORD *)(a5 + 1336) = 1;
  int v71 = *(_DWORD *)(a5 + 1368);
  *(float64x2_t *)(a5 + 1344) = _Q0;
  *(void *)(a5 + 1360) = 0x3FF0000000000000;
  if (v71 == 1)
  {
LABEL_25:
    int v34 = *(_DWORD *)(a5 + 1400);
    *(float64x2_t *)(a5 + 1376) = _Q0;
    *(void *)(a5 + 1392) = 0x3FF0000000000000;
    if (v34 == 1) {
      goto LABEL_26;
    }
    goto LABEL_68;
  }
LABEL_67:
  *(_DWORD *)(a5 + 1368) = 1;
  int v72 = *(_DWORD *)(a5 + 1400);
  *(float64x2_t *)(a5 + 1376) = _Q0;
  *(void *)(a5 + 1392) = 0x3FF0000000000000;
  if (v72 == 1)
  {
LABEL_26:
    int v35 = *(_DWORD *)(a5 + 1432);
    *(float64x2_t *)(a5 + 1408) = _Q0;
    *(void *)(a5 + 1424) = 0x3FF0000000000000;
    if (v35 == 1) {
      goto LABEL_27;
    }
    goto LABEL_69;
  }
LABEL_68:
  *(_DWORD *)(a5 + 1400) = 1;
  int v73 = *(_DWORD *)(a5 + 1432);
  *(float64x2_t *)(a5 + 1408) = _Q0;
  *(void *)(a5 + 1424) = 0x3FF0000000000000;
  if (v73 == 1)
  {
LABEL_27:
    int v36 = *(_DWORD *)(a5 + 1464);
    *(float64x2_t *)(a5 + 1440) = _Q0;
    *(void *)(a5 + 1456) = 0x3FF0000000000000;
    if (v36 == 1) {
      goto LABEL_28;
    }
    goto LABEL_70;
  }
LABEL_69:
  *(_DWORD *)(a5 + 1432) = 1;
  int v74 = *(_DWORD *)(a5 + 1464);
  *(float64x2_t *)(a5 + 1440) = _Q0;
  *(void *)(a5 + 1456) = 0x3FF0000000000000;
  if (v74 == 1)
  {
LABEL_28:
    int v37 = *(_DWORD *)(a5 + 1496);
    *(float64x2_t *)(a5 + 1472) = _Q0;
    *(void *)(a5 + 1488) = 0x3FF0000000000000;
    if (v37 == 1) {
      goto LABEL_29;
    }
    goto LABEL_71;
  }
LABEL_70:
  *(_DWORD *)(a5 + 1464) = 1;
  int v75 = *(_DWORD *)(a5 + 1496);
  *(float64x2_t *)(a5 + 1472) = _Q0;
  *(void *)(a5 + 1488) = 0x3FF0000000000000;
  if (v75 == 1)
  {
LABEL_29:
    int v38 = *(_DWORD *)(a5 + 1528);
    *(float64x2_t *)(a5 + 1504) = _Q0;
    *(void *)(a5 + 1520) = 0x3FF0000000000000;
    if (v38 == 1) {
      goto LABEL_30;
    }
    goto LABEL_72;
  }
LABEL_71:
  *(_DWORD *)(a5 + 1496) = 1;
  int v76 = *(_DWORD *)(a5 + 1528);
  *(float64x2_t *)(a5 + 1504) = _Q0;
  *(void *)(a5 + 1520) = 0x3FF0000000000000;
  if (v76 == 1)
  {
LABEL_30:
    int v39 = *(_DWORD *)(a5 + 1560);
    *(float64x2_t *)(a5 + 1536) = _Q0;
    *(void *)(a5 + 1552) = 0x3FF0000000000000;
    if (v39 == 1) {
      goto LABEL_31;
    }
    goto LABEL_73;
  }
LABEL_72:
  *(_DWORD *)(a5 + 1528) = 1;
  int v77 = *(_DWORD *)(a5 + 1560);
  *(float64x2_t *)(a5 + 1536) = _Q0;
  *(void *)(a5 + 1552) = 0x3FF0000000000000;
  if (v77 == 1)
  {
LABEL_31:
    int v40 = *(_DWORD *)(a5 + 1592);
    *(float64x2_t *)(a5 + 1568) = _Q0;
    *(void *)(a5 + 1584) = 0x3FF0000000000000;
    if (v40 == 1) {
      goto LABEL_32;
    }
    goto LABEL_74;
  }
LABEL_73:
  *(_DWORD *)(a5 + 1560) = 1;
  int v78 = *(_DWORD *)(a5 + 1592);
  *(float64x2_t *)(a5 + 1568) = _Q0;
  *(void *)(a5 + 1584) = 0x3FF0000000000000;
  if (v78 == 1)
  {
LABEL_32:
    int v41 = *(_DWORD *)(a5 + 1624);
    *(float64x2_t *)(a5 + 1600) = _Q0;
    *(void *)(a5 + 1616) = 0x3FF0000000000000;
    if (v41 == 1) {
      goto LABEL_33;
    }
    goto LABEL_75;
  }
LABEL_74:
  *(_DWORD *)(a5 + 1592) = 1;
  int v79 = *(_DWORD *)(a5 + 1624);
  *(float64x2_t *)(a5 + 1600) = _Q0;
  *(void *)(a5 + 1616) = 0x3FF0000000000000;
  if (v79 == 1)
  {
LABEL_33:
    int v42 = *(_DWORD *)(a5 + 1656);
    *(float64x2_t *)(a5 + 1632) = _Q0;
    *(void *)(a5 + 1648) = 0x3FF0000000000000;
    if (v42 == 1) {
      goto LABEL_34;
    }
    goto LABEL_76;
  }
LABEL_75:
  *(_DWORD *)(a5 + 1624) = 1;
  int v80 = *(_DWORD *)(a5 + 1656);
  *(float64x2_t *)(a5 + 1632) = _Q0;
  *(void *)(a5 + 1648) = 0x3FF0000000000000;
  if (v80 == 1)
  {
LABEL_34:
    int v43 = *(_DWORD *)(a5 + 1688);
    *(float64x2_t *)(a5 + 1664) = _Q0;
    *(void *)(a5 + 1680) = 0x3FF0000000000000;
    if (v43 == 1) {
      goto LABEL_35;
    }
    goto LABEL_77;
  }
LABEL_76:
  *(_DWORD *)(a5 + 1656) = 1;
  int v81 = *(_DWORD *)(a5 + 1688);
  *(float64x2_t *)(a5 + 1664) = _Q0;
  *(void *)(a5 + 1680) = 0x3FF0000000000000;
  if (v81 == 1)
  {
LABEL_35:
    int v44 = *(_DWORD *)(a5 + 1720);
    *(float64x2_t *)(a5 + 1696) = _Q0;
    *(void *)(a5 + 1712) = 0x3FF0000000000000;
    if (v44 == 1) {
      goto LABEL_36;
    }
    goto LABEL_78;
  }
LABEL_77:
  *(_DWORD *)(a5 + 1688) = 1;
  int v82 = *(_DWORD *)(a5 + 1720);
  *(float64x2_t *)(a5 + 1696) = _Q0;
  *(void *)(a5 + 1712) = 0x3FF0000000000000;
  if (v82 == 1)
  {
LABEL_36:
    int v45 = *(_DWORD *)(a5 + 1752);
    *(float64x2_t *)(a5 + 1728) = _Q0;
    *(void *)(a5 + 1744) = 0x3FF0000000000000;
    if (v45 == 1) {
      goto LABEL_37;
    }
    goto LABEL_79;
  }
LABEL_78:
  *(_DWORD *)(a5 + 1720) = 1;
  int v83 = *(_DWORD *)(a5 + 1752);
  *(float64x2_t *)(a5 + 1728) = _Q0;
  *(void *)(a5 + 1744) = 0x3FF0000000000000;
  if (v83 == 1)
  {
LABEL_37:
    int v46 = *(_DWORD *)(a5 + 1784);
    *(float64x2_t *)(a5 + 1760) = _Q0;
    *(void *)(a5 + 1776) = 0x3FF0000000000000;
    if (v46 == 1) {
      goto LABEL_38;
    }
    goto LABEL_80;
  }
LABEL_79:
  *(_DWORD *)(a5 + 1752) = 1;
  int v84 = *(_DWORD *)(a5 + 1784);
  *(float64x2_t *)(a5 + 1760) = _Q0;
  *(void *)(a5 + 1776) = 0x3FF0000000000000;
  if (v84 == 1)
  {
LABEL_38:
    int v47 = *(_DWORD *)(a5 + 1816);
    *(float64x2_t *)(a5 + 1792) = _Q0;
    *(void *)(a5 + 1808) = 0x3FF0000000000000;
    if (v47 == 1) {
      goto LABEL_39;
    }
    goto LABEL_81;
  }
LABEL_80:
  *(_DWORD *)(a5 + 1784) = 1;
  int v85 = *(_DWORD *)(a5 + 1816);
  *(float64x2_t *)(a5 + 1792) = _Q0;
  *(void *)(a5 + 1808) = 0x3FF0000000000000;
  if (v85 == 1)
  {
LABEL_39:
    int v48 = *(_DWORD *)(a5 + 1848);
    *(float64x2_t *)(a5 + 1824) = _Q0;
    *(void *)(a5 + 1840) = 0x3FF0000000000000;
    if (v48 == 1) {
      goto LABEL_40;
    }
    goto LABEL_82;
  }
LABEL_81:
  *(_DWORD *)(a5 + 1816) = 1;
  int v86 = *(_DWORD *)(a5 + 1848);
  *(float64x2_t *)(a5 + 1824) = _Q0;
  *(void *)(a5 + 1840) = 0x3FF0000000000000;
  if (v86 == 1)
  {
LABEL_40:
    int v49 = *(_DWORD *)(a5 + 1880);
    *(float64x2_t *)(a5 + 1856) = _Q0;
    *(void *)(a5 + 1872) = 0x3FF0000000000000;
    if (v49 == 1) {
      goto LABEL_42;
    }
    goto LABEL_41;
  }
LABEL_82:
  *(_DWORD *)(a5 + 1848) = 1;
  int v87 = *(_DWORD *)(a5 + 1880);
  *(float64x2_t *)(a5 + 1856) = _Q0;
  *(void *)(a5 + 1872) = 0x3FF0000000000000;
  if (v87 != 1) {
LABEL_41:
  }
    *(_DWORD *)(a5 + 1880) = 1;
LABEL_42:
  int v50 = *a2;
  int v51 = (unsigned __int16 *)((char *)*a2 - **a2);
  unsigned int v52 = *v51;
  if (!*((unsigned char *)a2 + 38))
  {
    if (v52 < 0x47)
    {
      if (v52 <= 0x38) {
        return 0;
      }
    }
    else
    {
      uint64_t v88 = v51[35];
      if (v51[35] && (*((unsigned char *)v50 + v88) & 1) != 0)
      {
LABEL_104:
        if ((*(int *)((char *)v50 + v88) & 0x20000000) != 0) {
          return 0;
        }
        goto LABEL_107;
      }
    }
    if (!v51[28]
      || (*(int *)((char *)v50 + v51[28]) & 1) == 0
      && (*(int *)((char *)v50 + v51[28]) & 7) != 4
      && (*(int *)((char *)v50 + v51[28]) & 0x23) != 0x20)
    {
      return 0;
    }
    if (v52 < 0x47) {
      goto LABEL_107;
    }
    LODWORD(v88) = v51[35];
    if (!v51[35]) {
      goto LABEL_107;
    }
    goto LABEL_104;
  }
  if (v52 < 0x47)
  {
    if (v52 <= 0x38) {
      return 0;
    }
  }
  else if (v51[35] && (*((unsigned char *)v50 + v51[35]) & 2) != 0)
  {
    if ((*(int *)((char *)v50 + v51[35]) & 0x40000000) == 0) {
      goto LABEL_107;
    }
    return 0;
  }
  if (!v51[28]
    || (*(int *)((char *)v50 + v51[28]) & 2) == 0
    && (*(int *)((char *)v50 + v51[28]) & 7) != 4
    && (*(int *)((char *)v50 + v51[28]) & 0x23) != 0x20
    || v52 >= 0x47 && v51[35] && (*(int *)((char *)v50 + v51[35]) & 0x40000000) != 0)
  {
    return 0;
  }
LABEL_107:
  if (!v51[5] || (*((unsigned char *)v50 + v51[5]) & 8) == 0)
  {
    if (*((unsigned char *)a2 + 38))
    {
      if (v52 >= 0x47)
      {
        unsigned int v90 = v51[35];
        int v91 = 2;
        if (!v51[35])
        {
LABEL_123:
          uint64_t v92 = v51[4];
          float64x2_t v240 = _Q0;
          if (v92) {
            goto LABEL_124;
          }
LABEL_114:
          uint64_t v93 = 0;
          goto LABEL_125;
        }
        goto LABEL_119;
      }
    }
    else
    {
      if (v52 < 0x47)
      {
        int v91 = 2;
        goto LABEL_123;
      }
      unsigned int v90 = v51[35];
      if (v51[35])
      {
        int v91 = 1;
LABEL_119:
        int v91 = 2 * ((*(int *)((char *)v50 + v90) & v91) == 0);
        uint64_t v92 = v51[4];
        float64x2_t v240 = _Q0;
        if (!v92) {
          goto LABEL_114;
        }
        goto LABEL_124;
      }
    }
    int v91 = 2;
    uint64_t v92 = v51[4];
    float64x2_t v240 = _Q0;
    if (!v92) {
      goto LABEL_114;
    }
    goto LABEL_124;
  }
  int v91 = 1;
  uint64_t v92 = v51[4];
  float64x2_t v240 = _Q0;
  if (!v92) {
    goto LABEL_114;
  }
LABEL_124:
  uint64_t v93 = *(unsigned int *)((char *)v50 + v92);
LABEL_125:
  double v94 = (double)a3 / 1000000000.0 * (double)v93;
  if (v94 >= 0.0)
  {
    if (v94 >= 4.50359963e15) {
      goto LABEL_133;
    }
    uint64_t v95 = (uint64_t)(v94 + v94) + 1;
  }
  else
  {
    if (v94 <= -4.50359963e15) {
      goto LABEL_133;
    }
    uint64_t v95 = (uint64_t)(v94 + v94);
    if (v95 >= 1) {
      --v95;
    }
  }
  double v94 = (double)(v95 >> 1);
LABEL_133:
  if (v91 == 2)
  {
LABEL_137:
    double v96 = *(double *)(a4 + 48);
    goto LABEL_155;
  }
  if (v91 != 1)
  {
    if (!v91)
    {
      double v96 = *(double *)(a4 + 40);
      goto LABEL_155;
    }
    goto LABEL_137;
  }
  if (*((unsigned char *)a2 + 38)) {
    int v97 = a2 + 3;
  }
  else {
    int v97 = a2 + 2;
  }
  float64x2_t v98 = *v97;
  double v96 = -1.0;
  if (v98)
  {
    double v99 = (unsigned __int16 *)((char *)v98 - *v98);
    if (*v99 >= 9u)
    {
      uint64_t v100 = v99[4];
      if (v100)
      {
        unsigned int v101 = *(unsigned __int16 *)((char *)v98 + v100);
        if ((unsigned __int16)(v101 - 1) <= 0xFFFDu) {
          double v96 = (double)v101 / 100.0;
        }
      }
    }
  }
  if ((*(uint64_t *)&v96 <= -1 || ((*(void *)&v96 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
    && (unint64_t)(*(void *)&v96 - 1) >= 0xFFFFFFFFFFFFFLL)
  {
    double v96 = *(double *)(a4 + 56);
  }
LABEL_155:
  uint64_t v104 = (uint64_t)v94;
  BOOL v105 = (*(void *)&v96 & 0x7FFFFFFFFFFFFFFFuLL) - 1 < 0xFFFFFFFFFFFFFLL;
  BOOL v106 = v96 < 0.0 && ((*(void *)&v96 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF;
  if (v96 >= 0.0) {
    BOOL v105 = 0;
  }
  char v107 = (*(void *)&v96 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000 || v105;
  if ((*(void *)&v96 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FF0000000000000) {
    char v107 = 1;
  }
  char v108 = v107 | v106;
  uint64_t v109 = 0x7FFFFFFFFFFFFFFFLL;
  if (v108)
  {
    unint64_t v110 = 0x7FFFFFFFFFFFFFFFLL;
    if (!*(_DWORD *)(a5 + 24)) {
      goto LABEL_180;
    }
    goto LABEL_179;
  }
  unint64_t v110 = 0x7FFFFFFFFFFFFFFFLL;
  if (v96 > 0.0 && v104 != 0x7FFFFFFFFFFFFFFFLL && (v104 & 0x8000000000000000) == 0)
  {
    double v111 = (double)v104 / 100000.0 / v96 * 60.0 * 60.0 * 10.0;
    if (v111 >= 0.0)
    {
      if (v111 < 4.50359963e15)
      {
        uint64_t v112 = (uint64_t)(v111 + v111) + 1;
LABEL_176:
        double v111 = (double)(v112 >> 1);
      }
    }
    else if (v111 > -4.50359963e15)
    {
      uint64_t v112 = (uint64_t)(v111 + v111);
      if (v112 >= 1) {
        --v112;
      }
      goto LABEL_176;
    }
    unint64_t v110 = (int)v111 | ((unint64_t)(int)v111 << 32);
    uint64_t v109 = v104;
  }
  if (*(_DWORD *)(a5 + 24)) {
LABEL_179:
  }
    *(_DWORD *)(a5 + 24) = 0;
LABEL_180:
  uint64_t result = 0;
  *(void *)a5 = v110;
  *(void *)(a5 + 8) = v109;
  if (v110 != -1 && (v110 & 0xFFFFFFFF00000000) != 0x7FFFFFFF00000000 && v109 != 0x7FFFFFFFFFFFFFFFLL)
  {
    if (v91 == 1)
    {
      int v113 = *(_DWORD *)(a5 + 760);
      uint64_t v114 = *(void *)(a4 + 824);
      *(_OWORD *)(a5 + 736) = *(_OWORD *)(a4 + 808);
      *(void *)(a5 + 752) = v114;
      uint64_t result = 1;
      if (v113 != 1) {
        *(_DWORD *)(a5 + 760) = 1;
      }
      return result;
    }
    if (v91 == 2)
    {
      int v115 = *(_DWORD *)(a5 + 792);
      uint64_t v116 = *(void *)(a4 + 80);
      *(_OWORD *)(a5 + 768) = *(_OWORD *)(a4 + 64);
      *(void *)(a5 + 784) = v116;
      if (v115 != 1) {
        *(_DWORD *)(a5 + 792) = 1;
      }
      double v117 = (unsigned __int16 *)((char *)*a2 - **a2);
      if (*v117 >= 0x2Fu)
      {
        uint64_t v118 = v117[23];
        if (v118)
        {
          if (*((unsigned char *)*a2 + v118) == 9)
          {
            float64x2_t v246 = *(float64x2_t *)(a4 + 88);
            double v247 = *(double *)(a4 + 104);
            int v248 = 1;
            sub_F1B648(a5 + 800, (long long *)&v246);
          }
        }
      }
    }
    float64x2_t v119 = *a2;
    double v120 = (unsigned __int16 *)((char *)*a2 - **a2);
    unsigned int v121 = *v120;
    if (v121 < 0xB)
    {
      LODWORD(v122) = 0;
      BOOL v125 = 0;
      BOOL v126 = v121 >= 0x47;
      if (!*((unsigned char *)a2 + 38)) {
        goto LABEL_198;
      }
    }
    else
    {
      uint64_t v122 = v120[5];
      if (!v120[5]
        || ((int v123 = *(int *)((char *)v119 + v122), (v123 & 0x800) != 0)
          ? (!*((unsigned char *)a2 + 38) ? (v130 = 1) : (v130 = 2), BOOL v124 = (v130 & v123) != 0)
          : (BOOL v124 = 0),
            int v131 = *(int *)((char *)v119 + v122),
            LODWORD(v122) = v124,
            (v131 & 0x800) == 0))
      {
        BOOL v125 = 0;
        BOOL v126 = v121 >= 0x47;
        if (*((unsigned char *)a2 + 38)) {
          goto LABEL_211;
        }
LABEL_198:
        if (v126)
        {
          uint64_t v127 = v120[35];
          if (v127)
          {
            int v128 = *(int *)((char *)v119 + v127);
            if ((v128 & 0xA0A88) != 0)
            {
LABEL_215:
              BOOL v133 = 1;
              goto LABEL_217;
            }
            int v129 = 32;
            goto LABEL_278;
          }
        }
LABEL_216:
        BOOL v133 = 0;
        goto LABEL_217;
      }
      if (*((unsigned char *)a2 + 38)) {
        int v177 = 2;
      }
      else {
        int v177 = 1;
      }
      BOOL v125 = (v177 & v131) != 0;
      BOOL v126 = v121 >= 0x47;
      if (!*((unsigned char *)a2 + 38)) {
        goto LABEL_198;
      }
    }
LABEL_211:
    if (v126)
    {
      uint64_t v132 = v120[35];
      if (v132)
      {
        int v128 = *(int *)((char *)v119 + v132);
        if ((v128 & 0x141510) != 0) {
          goto LABEL_215;
        }
        int v129 = 64;
LABEL_278:
        BOOL v133 = (v129 & v128) != 0;
LABEL_217:
        uint64_t v134 = *(void *)(a4 + 832) + 24 * (v122 + (v125 && v133));
        int v135 = *(_DWORD *)(a5 + 856);
        uint64_t v136 = *(void *)(v134 + 16);
        *(_OWORD *)(a5 + 832) = *(_OWORD *)v134;
        *(void *)(a5 + 848) = v136;
        if (v135 != 1) {
          *(_DWORD *)(a5 + 856) = 1;
        }
        sub_657AC4(*a1, (uint64_t)a2, (uint64_t)&v243);
        float64x2_t v137 = *a2;
        uint64_t v138 = **a2;
        uint64_t v139 = -v138;
        float64x2_t v140 = (unsigned __int16 *)((char *)*a2 - v138);
        unsigned int v141 = *v140;
        if (v141 >= 0x2F)
        {
          if (!v140[23] || *((unsigned char *)v137 + v140[23]) != 44) {
            goto LABEL_225;
          }
          if (sub_F1CF38(a1, a2, (unsigned char *)(a4 + 32))) {
            goto LABEL_236;
          }
          float64x2_t v137 = *a2;
          uint64_t v142 = **a2;
          uint64_t v139 = -v142;
          unsigned int v141 = *(unsigned __int16 *)((char *)*a2 - v142);
        }
        if (v141 < 0xB) {
          goto LABEL_231;
        }
LABEL_225:
        uint64_t v143 = *(unsigned __int16 *)((char *)v137 + v139 + 10);
        if (!v143 || (*((unsigned char *)v137 + v143) & 3) == 0 || v245 && v243 && v244 && *(unsigned char *)(a4 + 1016))
        {
LABEL_231:
          if (v91)
          {
            if (v91 != 2)
            {
LABEL_237:
              uint64_t v145 = sub_F1E0E0(a1, a2, a4 + 32);
              if (v145)
              {
                int v146 = *(_DWORD *)(a5 + 1752);
                uint64_t v147 = *(void *)(a4 + 1040);
                *(_OWORD *)(a5 + 1728) = *(_OWORD *)(a4 + 1024);
                *(void *)(a5 + 1744) = v147;
                if (v146 != 1) {
                  *(_DWORD *)(a5 + 1752) = 1;
                }
              }
              if (v245 && v243 && v244)
              {
                double v148 = *(double *)(a4 + 1064);
                int32x2_t v149 = vdup_n_s32(*(unsigned char *)(a4 + 1016) == 0);
                v150.i64[0] = v149.u32[0];
                v150.i64[1] = v149.u32[1];
                int8x16_t v151 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v150, 0x3FuLL)), (int8x16_t)v240, *(int8x16_t *)(a4 + 1048));
                if (!*(unsigned char *)(a4 + 1016)) {
                  double v148 = 1.0;
                }
                if (*(_DWORD *)(a5 + 1784) != 1) {
                  *(_DWORD *)(a5 + 1784) = 1;
                }
                *(int8x16_t *)(a5 + 1760) = v151;
                *(double *)(a5 + 1776) = v148;
                double v152 = sub_F1B8AC(v145, (double *)(a4 + 32), &v243);
                if (*(_DWORD *)(a5 + 1816) != 1) {
                  *(_DWORD *)(a5 + 1816) = 1;
                }
                *(double *)(a5 + 1792) = v152;
                *(void *)(a5 + 1800) = v153;
                *(void *)(a5 + 1808) = v154;
              }
              float64x2_t v155 = *a2;
              uint64_t v156 = **a2;
              uint64_t v157 = -v156;
              float64x2_t v158 = (unsigned __int16 *)((char *)*a2 - v156);
              unsigned int v159 = *v158;
              if (*((unsigned char *)a2 + 38))
              {
                if (v159 >= 0x47)
                {
                  uint64_t v160 = v158[35];
                  if (v160)
                  {
                    int v161 = *(int *)((char *)v155 + v160);
                    if ((v161 & 0x141510) != 0) {
                      goto LABEL_262;
                    }
                    int v162 = 64;
                    goto LABEL_259;
                  }
                }
              }
              else if (v159 >= 0x47)
              {
                uint64_t v163 = v158[35];
                if (v163)
                {
                  int v161 = *(int *)((char *)v155 + v163);
                  if ((v161 & 0xA0A88) != 0) {
                    goto LABEL_262;
                  }
                  int v162 = 32;
LABEL_259:
                  if ((v162 & v161) != 0) {
                    goto LABEL_262;
                  }
                }
              }
              if (*(void *)(a4 + 424) != *(void *)(a4 + 432))
              {
                __p[0] = 0;
                __p[0] = COERCE_VOID_(sub_F1D960(*a1, (uint64_t)a2[4]));
                v246.f64[0] = sub_F1DAF8((double *)__p, (double **)(a4 + 424));
                v246.f64[1] = v164;
                double v247 = v165;
                int v248 = 1;
                uint64_t v145 = sub_F1B648(a5 + 960, (long long *)&v246);
                float64x2_t v155 = *a2;
                uint64_t v157 = -(uint64_t)**a2;
              }
LABEL_262:
              int v166 = (unsigned __int16 *)((char *)v155 + v157);
              if (*v166 >= 0x2Fu)
              {
                uint64_t v167 = v166[23];
                if (v167)
                {
                  if (*((unsigned char *)v155 + v167) == 9 && *(void *)(a4 + 280) == *(void *)(a4 + 288))
                  {
                    double v178 = sub_F1DBE4(a2);
                    double v179 = v178 * *(double *)(a4 + 152) + 1.0;
                    float64x2_t v246 = vaddq_f64(vmulq_n_f64(*(float64x2_t *)(a4 + 136), v178), v240);
                    double v247 = v179;
                    int v248 = 1;
                    sub_F1B648(a5 + 1056, (long long *)&v246);
                    double v180 = sub_F1DCC8(a2);
                    double v181 = v180 * *(double *)(a4 + 224) + 1.0;
                    float64x2_t v246 = vdivq_f64(v240, vaddq_f64(vmulq_n_f64(*(float64x2_t *)(a4 + 208), v180), v240));
                    double v247 = 1.0 / v181;
                    int v248 = 1;
                    uint64_t v172 = a5 + 1088;
                    goto LABEL_280;
                  }
                }
              }
              if (v91)
              {
                if (v91 == 2 && *(void *)(a4 + 304) == *(void *)(a4 + 312))
                {
                  double v168 = sub_F1DBE4(a2);
                  double v169 = v168 * *(double *)(a4 + 176) + 1.0;
                  float64x2_t v246 = vaddq_f64(vmulq_n_f64(*(float64x2_t *)(a4 + 160), v168), v240);
                  double v247 = v169;
                  int v248 = 1;
                  sub_F1B648(a5 + 1184, (long long *)&v246);
                  double v170 = sub_F1DCC8(a2);
                  double v171 = v170 * *(double *)(a4 + 248) + 1.0;
                  float64x2_t v246 = vdivq_f64(v240, vaddq_f64(vmulq_n_f64(*(float64x2_t *)(a4 + 232), v170), v240));
                  double v247 = 1.0 / v171;
                  int v248 = 1;
                  uint64_t v172 = a5 + 1216;
LABEL_280:
                  uint64_t v145 = sub_F1B648(v172, (long long *)&v246);
                }
              }
              else if (*(void *)(a4 + 256) == *(void *)(a4 + 264))
              {
                double v173 = sub_F1DBE4(a2);
                double v174 = v173 * *(double *)(a4 + 128) + 1.0;
                float64x2_t v246 = vaddq_f64(vmulq_n_f64(*(float64x2_t *)(a4 + 112), v173), v240);
                double v247 = v174;
                int v248 = 1;
                sub_F1B648(a5 + 1120, (long long *)&v246);
                double v175 = sub_F1DCC8(a2);
                double v176 = v175 * *(double *)(a4 + 200) + 1.0;
                float64x2_t v246 = vdivq_f64(v240, vaddq_f64(vmulq_n_f64(*(float64x2_t *)(a4 + 184), v175), v240));
                double v247 = 1.0 / v176;
                int v248 = 1;
                uint64_t v172 = a5 + 1152;
                goto LABEL_280;
              }
              float64x2_t v182 = *a2;
              double v183 = (unsigned __int16 *)((char *)*a2 - **a2);
              unsigned int v184 = *v183;
              if (v184 >= 0x2F && v183[23])
              {
                BOOL v185 = v91 == 0;
                uint64_t v186 = a4 + 256;
                if (v91) {
                  uint64_t v186 = a4 + 304;
                }
                if (*((unsigned char *)v182 + v183[23]) == 9) {
                  uint64_t v187 = a4 + 280;
                }
                else {
                  uint64_t v187 = v186;
                }
              }
              else
              {
                BOOL v185 = v91 == 0;
                if (v91) {
                  uint64_t v187 = a4 + 304;
                }
                else {
                  uint64_t v187 = a4 + 256;
                }
              }
              if (*(void *)v187 == *(void *)(v187 + 8))
              {
LABEL_331:
                if (v185) {
                  sub_F1B038(v145, (long long *)(a4 + 32), a2, a5);
                }
                uint64_t v205 = *a2;
                uint64_t v206 = **a2;
                uint64_t v207 = (unsigned __int16 *)((char *)*a2 - v206);
                if (*v207 >= 0xBu)
                {
                  uint64_t v208 = v207[5];
                  if (v208)
                  {
                    if ((*((unsigned char *)v205 + v208 + 2) & 0x20) != 0)
                    {
                      int v209 = *(_DWORD *)(a5 + 1720);
                      uint64_t v210 = *(void *)(a4 + 728);
                      *(_OWORD *)(a5 + 1696) = *(_OWORD *)(a4 + 712);
                      *(void *)(a5 + 1712) = v210;
                      if (v209 != 1) {
                        *(_DWORD *)(a5 + 1720) = 1;
                      }
                      uint64_t v205 = *a2;
                      LODWORD(v206) = **a2;
                    }
                  }
                }
                if (!*(unsigned char *)(a4 + 928))
                {
                  uint64_t v212 = -(uint64_t)(int)v206;
                  goto LABEL_351;
                }
                uint64_t v211 = (int)v206;
                uint64_t v212 = -(uint64_t)(int)v206;
                uint64_t v213 = (unsigned __int16 *)((char *)v205 - v211);
                unsigned int v214 = *v213;
                if (*((unsigned char *)a2 + 38))
                {
                  if (v214 < 0x47) {
                    goto LABEL_351;
                  }
                  uint64_t v215 = v213[35];
                  if (!v215) {
                    goto LABEL_351;
                  }
                  int v216 = *(int *)((char *)v205 + v215);
                  if ((v216 & 0x141510) != 0) {
                    goto LABEL_368;
                  }
                  int v217 = 64;
                }
                else
                {
                  if (v214 < 0x47) {
                    goto LABEL_351;
                  }
                  uint64_t v218 = v213[35];
                  if (!v218) {
                    goto LABEL_351;
                  }
                  int v216 = *(int *)((char *)v205 + v218);
                  if ((v216 & 0xA0A88) != 0) {
                    goto LABEL_368;
                  }
                  int v217 = 32;
                }
                if ((v217 & v216) != 0) {
                  goto LABEL_368;
                }
LABEL_351:
                v219 = (unsigned __int16 *)((char *)v205 + v212);
                if (*v219 >= 0x2Fu && (uint64_t v220 = v219[23]) != 0)
                {
                  unint64_t v221 = *((unsigned __int8 *)v205 + v220);
                  if (!v185)
                  {
LABEL_354:
                    if (v91 != 2) {
                      goto LABEL_368;
                    }
                    uint64_t v222 = *(void *)(a4 + 880);
                    if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a4 + 888) - v222) >> 3) > v221)
                    {
                      unsigned int v223 = (float64x2_t *)(v222 + 24 * v221);
                      float64x2_t v224 = *v223;
                      double v247 = v223[1].f64[0];
                      float64x2_t v246 = v224;
                      int v248 = 1;
                      uint64_t v225 = a5 + 1856;
LABEL_360:
                      sub_F1B648(v225, (long long *)&v246);
                      goto LABEL_368;
                    }
                    if (!sub_723EC(1u)) {
                      goto LABEL_368;
                    }
                    sub_6BAC((uint64_t)&v246);
                    sub_188FC78(&v246, (uint64_t)"Invalid FOW factor access for form_of_way_idx: ", 47);
                    int v230 = (void *)std::ostream::operator<<();
                    sub_188FC78(v230, (uint64_t)" and fow_factors_walking size: ", 31);
                    std::ostream::operator<<();
                    std::stringbuf::str();
                    sub_7246C((uint64_t *)__p, 1u);
                    goto LABEL_365;
                  }
                }
                else
                {
                  unint64_t v221 = 32;
                  if (!v185) {
                    goto LABEL_354;
                  }
                }
                uint64_t v226 = *(void *)(a4 + 856);
                if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a4 + 864) - v226) >> 3) > v221)
                {
                  BOOL v227 = (float64x2_t *)(v226 + 24 * v221);
                  float64x2_t v228 = *v227;
                  double v247 = v227[1].f64[0];
                  float64x2_t v246 = v228;
                  int v248 = 1;
                  uint64_t v225 = a5 + 1824;
                  goto LABEL_360;
                }
                if (!sub_723EC(1u)) {
                  goto LABEL_368;
                }
                sub_6BAC((uint64_t)&v246);
                sub_188FC78(&v246, (uint64_t)"Invalid FOW factor access for form_of_way_idx: ", 47);
                long long v229 = (void *)std::ostream::operator<<();
                sub_188FC78(v229, (uint64_t)" and fow_factors_cycling size: ", 31);
                std::ostream::operator<<();
                std::stringbuf::str();
                sub_7246C((uint64_t *)__p, 1u);
LABEL_365:
                if (v242 < 0) {
                  operator delete(__p[0]);
                }
                sub_111ECAC((uint64_t)&v246);
LABEL_368:
                if (!*(_DWORD *)(a4 + 328) && !*(_DWORD *)(a4 + 332) && !*(void *)(a4 + 336)) {
                  return 1;
                }
                int32x2_t v231 = *a2;
                int v232 = (unsigned __int16 *)((char *)*a2 - **a2);
                unsigned int v233 = *v232;
                double v234 = 0.0;
                if (*((unsigned char *)a2 + 38))
                {
                  if (v233 >= 0x57)
                  {
                    if (v232[43])
                    {
                      int32x2_t v231 = (int *)((char *)v231
                                   + v232[43]
                                   + (unint64_t)*(unsigned int *)((char *)v231 + v232[43]));
                      unsigned __int8 v235 = (unsigned __int16 *)((char *)v231 - *v231);
                      if (*v235 < 7u) {
                        goto LABEL_388;
                      }
                      unsigned int v236 = v235[3];
                      if (!v236) {
                        goto LABEL_388;
                      }
                    }
                    else
                    {
                      if (v233 < 0x7D) {
                        goto LABEL_388;
                      }
                      unsigned int v236 = v232[62];
                      if (!v236) {
                        goto LABEL_388;
                      }
                    }
                    goto LABEL_387;
                  }
                }
                else if (v233 >= 0x57)
                {
                  if (v232[43])
                  {
                    int32x2_t v231 = (int *)((char *)v231 + v232[43]
                                                + (unint64_t)*(unsigned int *)((char *)v231 + v232[43]));
                    double v237 = (unsigned __int16 *)((char *)v231 - *v231);
                    if (*v237 < 5u) {
                      goto LABEL_388;
                    }
                    unsigned int v236 = v237[2];
                    if (!v236) {
                      goto LABEL_388;
                    }
                  }
                  else
                  {
                    if (v233 < 0x7B) {
                      goto LABEL_388;
                    }
                    unsigned int v236 = v232[61];
                    if (!v236) {
                      goto LABEL_388;
                    }
                  }
LABEL_387:
                  LOWORD(v234) = *(_WORD *)((char *)v231 + v236);
                  double v234 = (double)*(unint64_t *)&v234 + (double)*(unint64_t *)&v234;
                }
LABEL_388:
                unint64_t v238 = sub_ECE090((_DWORD *)(a4 + 328), (double)v104 / 100.0 * (v234 / 65535.0), (double)v104 / 100.0);
                if (*(_DWORD *)(a5 + 728)) {
                  *(_DWORD *)(a5 + 728) = 0;
                }
                *(void *)(a5 + 704) = v238;
                *(void *)(a5 + 712) = v239;
                return 1;
              }
              if (*((unsigned char *)a2 + 38))
              {
                double v188 = 0.0;
                if (v184 < 0x57) {
                  goto LABEL_309;
                }
                if (v183[43])
                {
                  float64x2_t v182 = (int *)((char *)v182 + v183[43] + (unint64_t)*(unsigned int *)((char *)v182 + v183[43]));
                  __n128 v189 = (unsigned __int16 *)((char *)v182 - *v182);
                  if (*v189 < 7u) {
                    goto LABEL_309;
                  }
                  unsigned int v190 = v189[3];
                  if (!v190) {
                    goto LABEL_309;
                  }
LABEL_308:
                  LOWORD(v188) = *(_WORD *)((char *)v182 + v190);
                  double v188 = (double)*(unint64_t *)&v188 + (double)*(unint64_t *)&v188;
                  goto LABEL_309;
                }
                if (v184 >= 0x7D)
                {
                  unsigned int v190 = v183[62];
                  if (v190) {
                    goto LABEL_308;
                  }
                }
              }
              else
              {
                double v188 = 0.0;
                if (v184 < 0x57) {
                  goto LABEL_309;
                }
                if (v183[43])
                {
                  float64x2_t v182 = (int *)((char *)v182 + v183[43] + (unint64_t)*(unsigned int *)((char *)v182 + v183[43]));
                  uint64_t v191 = (unsigned __int16 *)((char *)v182 - *v182);
                  if (*v191 >= 5u)
                  {
                    unsigned int v190 = v191[2];
                    if (v190) {
                      goto LABEL_308;
                    }
                  }
                }
                else if (v184 >= 0x7B)
                {
                  unsigned int v190 = v183[61];
                  if (v190) {
                    goto LABEL_308;
                  }
                }
              }
LABEL_309:
              v246.f64[0] = v188 / 65535.0;
              double v192 = sub_F1DAF8(v246.f64, (double **)v187);
              if (*(_DWORD *)(a5 + 1272) != 1) {
                *(_DWORD *)(a5 + 1272) = 1;
              }
              *(double *)(a5 + 1248) = v192;
              *(void *)(a5 + 1256) = v193;
              *(void *)(a5 + 1264) = v194;
              uint64_t v195 = *a2;
              uint64_t v196 = (unsigned __int16 *)((char *)*a2 - **a2);
              unsigned int v197 = *v196;
              double v198 = 0.0;
              if (*((unsigned char *)a2 + 38))
              {
                if (v197 >= 0x57)
                {
                  if (v196[43])
                  {
                    uint64_t v195 = (int *)((char *)v195 + v196[43]
                                                + (unint64_t)*(unsigned int *)((char *)v195 + v196[43]));
                    double v199 = (unsigned __int16 *)((char *)v195 - *v195);
                    if (*v199 < 5u) {
                      goto LABEL_328;
                    }
                    unsigned int v200 = v199[2];
                    if (!v200) {
                      goto LABEL_328;
                    }
                  }
                  else
                  {
                    if (v197 < 0x7B) {
                      goto LABEL_328;
                    }
                    unsigned int v200 = v196[61];
                    if (!v200) {
                      goto LABEL_328;
                    }
                  }
                  goto LABEL_327;
                }
              }
              else if (v197 >= 0x57)
              {
                if (v196[43])
                {
                  uint64_t v195 = (int *)((char *)v195 + v196[43] + (unint64_t)*(unsigned int *)((char *)v195 + v196[43]));
                  uint64_t v201 = (unsigned __int16 *)((char *)v195 - *v195);
                  if (*v201 < 7u) {
                    goto LABEL_328;
                  }
                  unsigned int v200 = v201[3];
                  if (!v200) {
                    goto LABEL_328;
                  }
                }
                else
                {
                  if (v197 < 0x7D) {
                    goto LABEL_328;
                  }
                  unsigned int v200 = v196[62];
                  if (!v200) {
                    goto LABEL_328;
                  }
                }
LABEL_327:
                LOWORD(v198) = *(_WORD *)((char *)v195 + v200);
                double v198 = (double)*(unint64_t *)&v198 + (double)*(unint64_t *)&v198;
              }
LABEL_328:
              v246.f64[0] = v198 / -65535.0;
              double v202 = sub_F1DAF8(v246.f64, (double **)v187);
              if (*(_DWORD *)(a5 + 1304) != 1) {
                *(_DWORD *)(a5 + 1304) = 1;
              }
              *(double *)(a5 + 1280) = v202;
              *(void *)(a5 + 1288) = v203;
              *(void *)(a5 + 1296) = v204;
              goto LABEL_331;
            }
            double v247 = *(double *)(a4 + 776);
            float64x2_t v246 = *(float64x2_t *)(a4 + 760);
            int v248 = 1;
            uint64_t v144 = a5 + 1024;
          }
          else
          {
            float64x2_t v246 = *(float64x2_t *)(a4 + 736);
            double v247 = *(double *)(a4 + 752);
            int v248 = 1;
            uint64_t v144 = a5 + 992;
          }
          sub_F1B648(v144, (long long *)&v246);
          goto LABEL_237;
        }
LABEL_236:
        sub_F1D538(a1, a2, (unsigned __int8 *)(a4 + 32), a5);
        goto LABEL_237;
      }
    }
    goto LABEL_216;
  }
  return result;
}

void sub_F197F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a16 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a22);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t sub_F19870(uint64_t *a1, int **a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a4 + 32) = 0;
  long long v8 = (_OWORD *)(a4 + 32);
  int v9 = *(_DWORD *)(a4 + 56);
  *(void *)(a4 + 40) = 0;
  if (v9) {
    *(_DWORD *)(a4 + 56) = 0;
  }
  int v10 = *(_DWORD *)(a4 + 88);
  *(void *)(a4 + 64) = 0;
  *(void *)(a4 + 72) = 0;
  if (v10) {
    *(_DWORD *)(a4 + 88) = 0;
  }
  int v11 = *(_DWORD *)(a4 + 120);
  *(void *)(a4 + 96) = 0;
  *(void *)(a4 + 104) = 0;
  if (v11) {
    *(_DWORD *)(a4 + 120) = 0;
  }
  int v12 = *(_DWORD *)(a4 + 152);
  *(void *)(a4 + 128) = 0;
  *(void *)(a4 + 136) = 0;
  if (v12) {
    *(_DWORD *)(a4 + 152) = 0;
  }
  int v13 = *(_DWORD *)(a4 + 184);
  *(void *)(a4 + 160) = 0;
  *(void *)(a4 + 168) = 0;
  if (v13) {
    *(_DWORD *)(a4 + 184) = 0;
  }
  int v14 = *(_DWORD *)(a4 + 216);
  *(void *)(a4 + 192) = 0;
  *(void *)(a4 + 200) = 0;
  if (v14) {
    *(_DWORD *)(a4 + 216) = 0;
  }
  int v15 = *(_DWORD *)(a4 + 248);
  *(void *)(a4 + 224) = 0;
  *(void *)(a4 + 232) = 0;
  if (v15) {
    *(_DWORD *)(a4 + 248) = 0;
  }
  int v16 = *(_DWORD *)(a4 + 280);
  *(void *)(a4 + 256) = 0;
  *(void *)(a4 + 264) = 0;
  if (v16) {
    *(_DWORD *)(a4 + 280) = 0;
  }
  int v17 = *(_DWORD *)(a4 + 312);
  *(void *)(a4 + 288) = 0;
  *(void *)(a4 + 296) = 0;
  if (v17) {
    *(_DWORD *)(a4 + 312) = 0;
  }
  int v18 = *(_DWORD *)(a4 + 344);
  *(void *)(a4 + 320) = 0;
  *(void *)(a4 + 328) = 0;
  if (v18) {
    *(_DWORD *)(a4 + 344) = 0;
  }
  int v19 = *(_DWORD *)(a4 + 376);
  *(void *)(a4 + 352) = 0;
  *(void *)(a4 + 360) = 0;
  if (v19) {
    *(_DWORD *)(a4 + 376) = 0;
  }
  int v20 = *(_DWORD *)(a4 + 408);
  *(void *)(a4 + 384) = 0;
  *(void *)(a4 + 392) = 0;
  if (v20) {
    *(_DWORD *)(a4 + 408) = 0;
  }
  int v21 = *(_DWORD *)(a4 + 440);
  *(void *)(a4 + 416) = 0;
  *(void *)(a4 + 424) = 0;
  if (v21) {
    *(_DWORD *)(a4 + 440) = 0;
  }
  int v22 = *(_DWORD *)(a4 + 472);
  *(void *)(a4 + 448) = 0;
  *(void *)(a4 + 456) = 0;
  if (v22) {
    *(_DWORD *)(a4 + 472) = 0;
  }
  int v23 = *(_DWORD *)(a4 + 504);
  *(void *)(a4 + 480) = 0;
  *(void *)(a4 + 488) = 0;
  if (v23) {
    *(_DWORD *)(a4 + 504) = 0;
  }
  int v24 = *(_DWORD *)(a4 + 536);
  *(_OWORD *)(a4 + 512) = 0u;
  if (v24) {
    *(_DWORD *)(a4 + 536) = 0;
  }
  int v25 = *(_DWORD *)(a4 + 568);
  *(_OWORD *)(a4 + 544) = 0uLL;
  if (v25) {
    *(_DWORD *)(a4 + 568) = 0;
  }
  int v26 = *(_DWORD *)(a4 + 600);
  *(_OWORD *)(a4 + 576) = 0uLL;
  if (v26) {
    *(_DWORD *)(a4 + 600) = 0;
  }
  int v27 = *(_DWORD *)(a4 + 632);
  *(_OWORD *)(a4 + 608) = 0uLL;
  if (v27) {
    *(_DWORD *)(a4 + 632) = 0;
  }
  int v28 = *(_DWORD *)(a4 + 664);
  *(_OWORD *)(a4 + 640) = 0uLL;
  if (v28) {
    *(_DWORD *)(a4 + 664) = 0;
  }
  int v29 = *(_DWORD *)(a4 + 696);
  *(_OWORD *)(a4 + 672) = 0uLL;
  if (v29) {
    *(_DWORD *)(a4 + 696) = 0;
  }
  int v31 = a2 + 5;
  int v30 = a2[5];
  int v32 = (unsigned __int16 *)((char *)v30 - *v30);
  unsigned int v33 = *v32;
  if (*((unsigned char *)a2 + 78))
  {
    if (v33 < 0x47)
    {
      if (v33 <= 0x38) {
        return 0;
      }
    }
    else if (v32[35] && (*((unsigned char *)v30 + v32[35]) & 2) != 0)
    {
      goto LABEL_61;
    }
    uint64_t v34 = v32[28];
    if (v34)
    {
      int v35 = *(int *)((char *)v30 + v34);
      if ((v35 & 2) != 0) {
        goto LABEL_61;
      }
      goto LABEL_59;
    }
    return 0;
  }
  if (v33 < 0x47)
  {
    if (v33 <= 0x38) {
      return 0;
    }
  }
  else if (v32[35] && (*((unsigned char *)v30 + v32[35]) & 1) != 0)
  {
    goto LABEL_61;
  }
  uint64_t v36 = v32[28];
  if (!v36) {
    return 0;
  }
  int v35 = *(int *)((char *)v30 + v36);
  if (v35) {
    goto LABEL_61;
  }
LABEL_59:
  if ((v35 & 7) != 4 && (v35 & 0x23) != 0x20) {
    return 0;
  }
LABEL_61:
  if (*(unsigned char *)(a3 + 930))
  {
    if (sub_F1EB04(a2) || sub_F1EC50(a2 + 5)) {
      return 0;
    }
    if (sub_F1ED9C(a2))
    {
      int v38 = *(_DWORD *)(a4 + 88);
      *(_OWORD *)(a4 + 64) = *(_OWORD *)(a3 + 960);
      if (v38) {
        *(_DWORD *)(a4 + 88) = 0;
      }
    }
    if (sub_F1EEE8(a2 + 5))
    {
      int v39 = *(_DWORD *)(a4 + 56);
      *long long v8 = *(_OWORD *)(a3 + 960);
      if (v39) {
        *(_DWORD *)(a4 + 56) = 0;
      }
    }
  }
  int v40 = *a2;
  uint64_t v41 = **a2;
  uint64_t v42 = -v41;
  int v43 = (unsigned __int16 *)((char *)*a2 - v41);
  if (*v43 < 0xBu || (uint64_t v44 = v43[5]) == 0 || (*((unsigned char *)v40 + v44 + 2) & 0x20) == 0)
  {
    int v45 = (unsigned __int16 *)((char *)*v31 - **v31);
    if (*v45 >= 0xBu)
    {
      uint64_t v46 = v45[5];
      if (v46)
      {
        if ((*((unsigned char *)*v31 + v46 + 2) & 0x20) != 0)
        {
          int v47 = *(_DWORD *)(a4 + 120);
          *(_OWORD *)(a4 + 96) = *(_OWORD *)(a3 + 1000);
          if (v47) {
            *(_DWORD *)(a4 + 120) = 0;
          }
          int v40 = *a2;
          uint64_t v42 = -(uint64_t)**a2;
        }
      }
    }
  }
  int v48 = *((unsigned __int8 *)a2 + 38);
  int v49 = (unsigned __int16 *)((char *)v40 + v42);
  unsigned int v50 = *(unsigned __int16 *)((char *)v40 + v42);
  if (*((unsigned char *)a2 + 38))
  {
    if (v50 < 0x47 || !v49[35])
    {
      if (*v49 <= 0x46u) {
        goto LABEL_112;
      }
      goto LABEL_106;
    }
    if ((*(int *)((char *)v40 + v49[35]) & 2) == 0) {
      goto LABEL_104;
    }
LABEL_91:
    int v51 = a2[5];
    unsigned int v52 = (unsigned __int16 *)((char *)v51 - *v51);
    unsigned int v53 = *v52;
    if (*((unsigned char *)a2 + 78))
    {
      if (v53 >= 0x47)
      {
        unsigned int v54 = v52[35];
        if (v54)
        {
          int v55 = 2;
          goto LABEL_100;
        }
      }
    }
    else if (v53 >= 0x47)
    {
      unsigned int v54 = v52[35];
      if (v54)
      {
        int v55 = 1;
LABEL_100:
        if ((*(int *)((char *)v51 + v54) & v55) != 0) {
          goto LABEL_104;
        }
      }
    }
    uint64_t v56 = sub_F1BAB8((uint64_t)a1, a2, (uint64_t)(a2 + 5), a3);
    if (*(_DWORD *)(a4 + 152)) {
      *(_DWORD *)(a4 + 152) = 0;
    }
    *(void *)(a4 + 128) = v56;
    *(void *)(a4 + 136) = v57;
    int v40 = *a2;
    int v48 = *((unsigned __int8 *)a2 + 38);
    uint64_t v42 = -(uint64_t)**a2;
    goto LABEL_104;
  }
  if (v50 < 0x47 || !v49[35])
  {
    if (*v49 <= 0x46u) {
      goto LABEL_112;
    }
    goto LABEL_110;
  }
  if (*(int *)((char *)v40 + v49[35])) {
    goto LABEL_91;
  }
LABEL_104:
  int v49 = (unsigned __int16 *)((char *)v40 + v42);
  unsigned int v58 = *(unsigned __int16 *)((char *)v40 + v42);
  if (!v48)
  {
    if (v58 < 0x47) {
      goto LABEL_112;
    }
LABEL_110:
    if (v49[35] && (*(int *)((char *)v40 + v49[35]) & 1) != 0) {
      goto LABEL_123;
    }
    goto LABEL_112;
  }
  if (v58 < 0x47) {
    goto LABEL_112;
  }
LABEL_106:
  if (v49[35] && (*(int *)((char *)v40 + v49[35]) & 2) != 0) {
    goto LABEL_123;
  }
LABEL_112:
  int v59 = a2[5];
  int v60 = (unsigned __int16 *)((char *)v59 - *v59);
  unsigned int v61 = *v60;
  if (*((unsigned char *)a2 + 78))
  {
    if (v61 < 0x47) {
      goto LABEL_123;
    }
    unsigned int v62 = v60[35];
    if (!v62 || (*(int *)((char *)v59 + v62) & 2) == 0) {
      goto LABEL_123;
    }
  }
  else
  {
    if (v61 < 0x47) {
      goto LABEL_123;
    }
    unsigned int v63 = v60[35];
    if (!v63 || (*(int *)((char *)v59 + v63) & 1) == 0) {
      goto LABEL_123;
    }
  }
  uint64_t v64 = sub_F1C474((uint64_t)a1, a2, a2 + 5, a3);
  if (*(_DWORD *)(a4 + 184)) {
    *(_DWORD *)(a4 + 184) = 0;
  }
  *(void *)(a4 + 160) = v64;
  *(void *)(a4 + 168) = v65;
  int v40 = *a2;
  uint64_t v42 = -(uint64_t)**a2;
LABEL_123:
  if (*(unsigned __int16 *)((char *)v40 + v42) < 0xBu
    || !*(_WORD *)((char *)v40 + v42 + 10)
    || (*((unsigned char *)v40 + *(unsigned __int16 *)((char *)v40 + v42 + 10)) & 8) == 0)
  {
    int v66 = (unsigned __int16 *)((char *)*v31 - **v31);
    if (*v66 >= 0xBu)
    {
      uint64_t v67 = v66[5];
      if (v67)
      {
        if ((*((unsigned char *)*v31 + v67) & 8) != 0)
        {
          int v68 = *(_DWORD *)(a4 + 248);
          *(_OWORD *)(a4 + 224) = *(_OWORD *)(a3 + 1248);
          if (v68) {
            *(_DWORD *)(a4 + 248) = 0;
          }
          int v40 = *a2;
          uint64_t v42 = -(uint64_t)**a2;
        }
      }
    }
  }
  int v69 = (unsigned __int16 *)((char *)v40 + v42);
  if (*v69 < 0xBu
    || (uint64_t v70 = v69[5]) == 0
    || (int v71 = *(int *)((char *)v40 + v70), (v71 & 0x800) == 0)
    || (!*((unsigned char *)a2 + 38) ? (int v72 = 1) : (int v72 = 2), (v72 & v71) == 0))
  {
    int v73 = (unsigned __int16 *)((char *)*v31 - **v31);
    if (*v73 >= 0xBu)
    {
      uint64_t v74 = v73[5];
      if (v74)
      {
        int v75 = *(int *)((char *)*v31 + v74);
        if ((v75 & 0x800) != 0)
        {
          int v76 = *((unsigned char *)a2 + 78) ? 2 : 1;
          if ((v76 & v75) != 0)
          {
            int v77 = *(_DWORD *)(a4 + 280);
            *(_OWORD *)(a4 + 256) = *(_OWORD *)(a3 + 1264);
            if (v77) {
              *(_DWORD *)(a4 + 280) = 0;
            }
          }
        }
      }
    }
  }
  sub_F1DDAC(a1, a2, a2 + 5, a3 + 32, a4);
  if (sub_F1D00C(a1, (char **)a2, a2 + 5, a3 + 32))
  {
    int v78 = *(_DWORD *)(a4 + 344);
    *(_OWORD *)(a4 + 320) = *(_OWORD *)(a3 + 1184);
    if (v78) {
      *(_DWORD *)(a4 + 344) = 0;
    }
    sub_657AC4(*a1, (uint64_t)(a2 + 5), (uint64_t)v190);
    int v79 = *v31;
    uint64_t v80 = **v31;
    uint64_t v81 = -v80;
    int v82 = (unsigned __int16 *)((char *)*v31 - v80);
    unsigned int v83 = *v82;
    if (v83 >= 0x2F)
    {
      if (!v82[23] || *((unsigned char *)v79 + v82[23]) != 44) {
        goto LABEL_157;
      }
      if (sub_F1CF38(a1, a2 + 5, (unsigned char *)(a3 + 32)))
      {
LABEL_163:
        unint64_t v86 = sub_F1DFD8(a1, a2 + 5, (double **)(a3 + 976), *(unsigned __int8 *)(a3 + 32));
        if (*(_DWORD *)(a4 + 376)) {
          *(_DWORD *)(a4 + 376) = 0;
        }
        *(void *)(a4 + 352) = v86;
        *(void *)(a4 + 360) = v87;
        goto LABEL_166;
      }
      int v79 = *v31;
      uint64_t v84 = **v31;
      uint64_t v81 = -v84;
      unsigned int v83 = *(unsigned __int16 *)((char *)*v31 - v84);
    }
    if (v83 < 0xB) {
      goto LABEL_166;
    }
LABEL_157:
    uint64_t v85 = *(unsigned __int16 *)((char *)v79 + v81 + 10);
    if (!v85
      || (*((unsigned char *)v79 + v85) & 3) == 0
      || v191 && *(void *)&v190[0] && *(void *)&v190[1] && *(unsigned char *)(a3 + 1016))
    {
      goto LABEL_166;
    }
    goto LABEL_163;
  }
LABEL_166:
  uint64_t v88 = *a2;
  int v89 = *((unsigned __int8 *)a2 + 38);
  uint64_t v90 = **a2;
  uint64_t v91 = -v90;
  uint64_t v92 = (unsigned __int16 *)((char *)*a2 - v90);
  unsigned int v93 = *v92;
  if (*((unsigned char *)a2 + 38))
  {
    if (v93 >= 0xB)
    {
      uint64_t v94 = v92[5];
      if (v92[5])
      {
        int v95 = 1;
        if ((*((unsigned char *)v88 + v94) & 2) != 0) {
          goto LABEL_177;
        }
        goto LABEL_175;
      }
    }
    goto LABEL_176;
  }
  if (v93 < 0xB || (uint64_t v94 = v92[5]) == 0)
  {
LABEL_176:
    int v95 = 0;
    goto LABEL_177;
  }
  if ((*((unsigned char *)v88 + v94) & 1) == 0)
  {
    int v95 = 2;
LABEL_175:
    int v95 = (*(int *)((char *)v88 + v94) & v95) != 0;
    goto LABEL_177;
  }
  int v95 = 1;
LABEL_177:
  double v96 = a2[5];
  int v97 = (unsigned __int16 *)((char *)v96 - *v96);
  unsigned int v98 = *v97;
  if (*((unsigned char *)a2 + 78))
  {
    if (v98 >= 0xB)
    {
      uint64_t v99 = v97[5];
      if (v99)
      {
        if ((*((unsigned char *)v96 + v99) & 2) == 0)
        {
          int v100 = 1;
          goto LABEL_186;
        }
        goto LABEL_204;
      }
    }
  }
  else if (v98 >= 0xB)
  {
    uint64_t v99 = v97[5];
    if (v99)
    {
      if ((*((unsigned char *)v96 + v99) & 1) == 0)
      {
        int v100 = 2;
LABEL_186:
        if (v95 == ((*(int *)((char *)v96 + v99) & v100) != 0)) {
          goto LABEL_192;
        }
        goto LABEL_189;
      }
LABEL_204:
      if (v95) {
        goto LABEL_192;
      }
      goto LABEL_189;
    }
  }
  if ((v95 & 1) == 0) {
    goto LABEL_192;
  }
LABEL_189:
  int v101 = *(_DWORD *)(a4 + 408);
  *(_OWORD *)(a4 + 384) = *(_OWORD *)(a3 + 1200);
  if (v101) {
    *(_DWORD *)(a4 + 408) = 0;
  }
  uint64_t v88 = *a2;
  int v89 = *((unsigned __int8 *)a2 + 38);
  uint64_t v91 = -(uint64_t)**a2;
LABEL_192:
  double v102 = (unsigned __int16 *)((char *)v88 + v91);
  unsigned int v103 = *v102;
  if (v89)
  {
    if (v103 < 0x4D) {
      goto LABEL_209;
    }
    uint64_t v104 = v102[38];
    if (!v102[38]) {
      goto LABEL_209;
    }
    if ((*((unsigned char *)v88 + v104) & 8) == 0)
    {
      int v105 = 2;
LABEL_201:
      if ((*(int *)((char *)v88 + v104) & v105) != 0)
      {
        int v106 = *(_DWORD *)(a4 + 472);
        *(_OWORD *)(a4 + 448) = *(_OWORD *)(a3 + 1232);
        if (v106)
        {
          char v107 = (_DWORD *)(a4 + 472);
LABEL_208:
          *char v107 = 0;
          goto LABEL_209;
        }
      }
      goto LABEL_209;
    }
  }
  else
  {
    if (v103 < 0x4D) {
      goto LABEL_209;
    }
    uint64_t v104 = v102[38];
    if (!v102[38]) {
      goto LABEL_209;
    }
    if ((*((unsigned char *)v88 + v104) & 4) == 0)
    {
      int v105 = 1;
      goto LABEL_201;
    }
  }
  int v108 = *(_DWORD *)(a4 + 440);
  *(_OWORD *)(a4 + 416) = *(_OWORD *)(a3 + 1216);
  if (v108)
  {
    char v107 = (_DWORD *)(a4 + 440);
    goto LABEL_208;
  }
LABEL_209:
  if ((*((unsigned char *)a2 + 84) & 4) != 0) {
    goto LABEL_258;
  }
  uint64_t v109 = *a2;
  unint64_t v110 = (unsigned __int16 *)((char *)*a2 - **a2);
  unsigned int v111 = *v110;
  if (v111 >= 0x2F)
  {
    if (v110[23])
    {
      unsigned int v112 = *((unsigned __int8 *)v109 + v110[23]);
      if (v112 <= 0x36 && ((1 << v112) & 0x44000000000008) != 0)
      {
        int v113 = (unsigned __int16 *)((char *)*v31 - **v31);
        if (*v113 >= 0x2Fu)
        {
          uint64_t v114 = v113[23];
          if (v114)
          {
            unsigned int v115 = *((unsigned __int8 *)*v31 + v114);
            if (v115 <= 0x36 && ((1 << v115) & 0x44000000000008) != 0) {
              goto LABEL_258;
            }
          }
        }
      }
    }
  }
  if (!*((unsigned char *)a2 + 38))
  {
    if (v111 < 0x4B) {
      goto LABEL_225;
    }
    unsigned int v116 = v110[37];
    if (!v110[37]) {
      goto LABEL_225;
    }
LABEL_224:
    __int16 v117 = *(_WORD *)((char *)v109 + v116);
    goto LABEL_226;
  }
  if (v111 >= 0x49)
  {
    unsigned int v116 = v110[36];
    if (v110[36]) {
      goto LABEL_224;
    }
  }
LABEL_225:
  __int16 v117 = -1;
LABEL_226:
  unsigned __int16 v118 = v117 + 18000;
  unsigned __int16 v119 = v117 - 18000;
  if ((unsigned __int16)(v118 >> 5) >= 0x465u) {
    unsigned __int16 v120 = v119;
  }
  else {
    unsigned __int16 v120 = v118;
  }
  unsigned int v121 = a2[5];
  uint64_t v122 = (unsigned __int16 *)((char *)v121 - *v121);
  unsigned int v123 = *v122;
  if (!*((unsigned char *)a2 + 78))
  {
    if (v123 < 0x49) {
      goto LABEL_236;
    }
    unsigned int v124 = v122[36];
    if (!v122[36]) {
      goto LABEL_236;
    }
LABEL_235:
    int v125 = *(unsigned __int16 *)((char *)v121 + v124);
    goto LABEL_237;
  }
  if (v123 >= 0x4B)
  {
    unsigned int v124 = v122[37];
    if (v122[37]) {
      goto LABEL_235;
    }
  }
LABEL_236:
  int v125 = 0xFFFF;
LABEL_237:
  int v126 = v125 - v120;
  if (v126 > 18000) {
    v126 -= 36000;
  }
  if (v126 < -17999) {
    v126 += 36000;
  }
  double v127 = round((double)v126 / 100.0);
  double v128 = fabs(v127);
  if (v111 >= 0xB && (uint64_t v129 = v110[5]) != 0)
  {
    if (v127 < 0.0 == *((unsigned __int8 *)v109 + v129 + 1) >> 7) {
      goto LABEL_256;
    }
  }
  else if (v127 >= 0.0)
  {
    goto LABEL_256;
  }
  if (*((unsigned char *)a2 + 78))
  {
    if (v123 < 0xB) {
      goto LABEL_254;
    }
    unsigned int v130 = v122[5];
    if (!v122[5]) {
      goto LABEL_254;
    }
    int v131 = 2;
  }
  else
  {
    if (v123 < 0xB) {
      goto LABEL_254;
    }
    unsigned int v130 = v122[5];
    if (!v122[5]) {
      goto LABEL_254;
    }
    int v131 = 1;
  }
  if ((*(int *)((char *)v121 + v130) & v131) != 0) {
    goto LABEL_266;
  }
LABEL_254:
  if (sub_6561B0(a2) || !*(unsigned char *)(a3 + 929))
  {
LABEL_266:
    double v141 = sub_3E6EAC(a2);
    BOOL v142 = (*(void *)&v141 & 0x7FFFFFFFFFFFFFFFLL) == 0;
    if ((unint64_t)(*(void *)&v141 - 1) < 0xFFFFFFFFFFFFFLL) {
      BOOL v142 = 1;
    }
    char v144 = ((*(void *)&v141 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF && v141 >= 0.0 || v142;
    if (v141 <= 0.0) {
      char v144 = 0;
    }
    if ((v144 & (v141 >= *(double *)(a3 + 344))) != 0) {
      double v145 = *(double *)(a3 + 1328);
    }
    else {
      double v145 = 1.0;
    }
    int v146 = (_DWORD *)sub_ECDD38((void *)(a3 + 1304), (unint64_t)v128);
    unint64_t v148 = sub_ECE090(v146, v145, v147);
    if (*(_DWORD *)(a4 + 504)) {
      *(_DWORD *)(a4 + 504) = 0;
    }
    *(void *)(a4 + 480) = v148;
    *(void *)(a4 + 488) = v149;
    if (sub_F1A898(a1, a2, a2 + 5, (unsigned char *)a3)) {
      goto LABEL_259;
    }
    goto LABEL_282;
  }
LABEL_256:
  uint64_t v132 = (_OWORD *)sub_ECDD38((void *)(a3 + 1280), (unint64_t)v128);
  int v133 = *(_DWORD *)(a4 + 536);
  *(_OWORD *)(a4 + 512) = *v132;
  if (v133) {
    *(_DWORD *)(a4 + 536) = 0;
  }
LABEL_258:
  if (sub_F1A898(a1, a2, a2 + 5, (unsigned char *)a3))
  {
LABEL_259:
    if (!*(unsigned char *)(a3 + 1336) || (*((unsigned char *)a2 + 84) & 4) != 0)
    {
      uint64_t v136 = 0;
      unint64_t v137 = 0;
      uint64_t v138 = 0;
    }
    else
    {
      sub_F1ABB4(a1, a2, (uint64_t)(a2 + 5), a3, 1);
      v190[0] = v134;
      unint64_t v135 = sub_ECDF48(v190, (double **)(a3 + 1424));
      unint64_t v137 = v135 & 0xFFFFFFFF00000000;
      uint64_t v138 = v135;
    }
    unint64_t v139 = v138 | v137;
    if (*(_DWORD *)(a4 + 568)) {
      *(_DWORD *)(a4 + 568) = 0;
    }
    *(void *)(a4 + 544) = v139;
    uint64_t v140 = 17;
    goto LABEL_285;
  }
LABEL_282:
  unint64_t v150 = sub_F1CB44(a1, a2, a3);
  if (*(_DWORD *)(a4 + 600)) {
    *(_DWORD *)(a4 + 600) = 0;
  }
  *(void *)(a4 + 576) = v150;
  uint64_t v140 = 18;
LABEL_285:
  *(void *)(a4 + 32 * v140 + 8) = v136;
  int8x16_t v151 = *a2;
  uint64_t v152 = **a2;
  uint64_t v153 = -v152;
  uint64_t v154 = (unsigned __int16 *)((char *)*a2 - v152);
  unsigned int v155 = *v154;
  if (*((unsigned char *)a2 + 38))
  {
    if (v155 < 0x47)
    {
      if (v155 <= 0x38) {
        goto LABEL_303;
      }
      goto LABEL_295;
    }
    if (!v154[35] || (unsigned int v156 = *(int *)((char *)v151 + v154[35]), (v156 & 2) == 0))
    {
LABEL_295:
      if (!v154[28]) {
        goto LABEL_303;
      }
      unsigned int v158 = *(int *)((char *)v151 + v154[28]);
      if ((v158 & 2) != 0) {
        goto LABEL_304;
      }
      goto LABEL_301;
    }
LABEL_293:
    int v157 = (v156 >> 2) & 1;
    goto LABEL_305;
  }
  if (v155 < 0x47)
  {
    if (v155 <= 0x38) {
      goto LABEL_303;
    }
  }
  else if (v154[35])
  {
    unsigned int v156 = *(int *)((char *)v151 + v154[35]);
    if (v156) {
      goto LABEL_293;
    }
  }
  if (!v154[28]) {
    goto LABEL_303;
  }
  unsigned int v158 = *(int *)((char *)v151 + v154[28]);
  if ((v158 & 1) == 0)
  {
LABEL_301:
    if ((v158 & 7) == 4 || (v158 & 0x23) == 0x20) {
      goto LABEL_304;
    }
LABEL_303:
    int v157 = 0;
    goto LABEL_305;
  }
LABEL_304:
  int v157 = (v158 >> 8) & 1;
LABEL_305:
  unsigned int v159 = a2[5];
  int v160 = *((unsigned __int8 *)a2 + 78);
  int v161 = (unsigned __int16 *)((char *)v159 - *v159);
  unsigned int v162 = *v161;
  if (!*((unsigned char *)a2 + 78))
  {
    if (v162 < 0x47)
    {
      if (v162 <= 0x38) {
        goto LABEL_324;
      }
    }
    else if (v161[35])
    {
      int v163 = *(int *)((char *)v159 + v161[35]);
      if (v163) {
        goto LABEL_313;
      }
    }
    if (!v161[28]) {
      goto LABEL_324;
    }
    int v164 = *(int *)((char *)v159 + v161[28]);
    if (v164) {
      goto LABEL_330;
    }
LABEL_322:
    if ((v164 & 7) == 4 || (v164 & 0x23) == 0x20)
    {
LABEL_330:
      if (v157 == ((v164 & 0x100) != 0)) {
        goto LABEL_331;
      }
LABEL_325:
      if (*((unsigned char *)a2 + 38))
      {
        if (v155 < 0x47)
        {
          if (v155 <= 0x38) {
            goto LABEL_347;
          }
          goto LABEL_339;
        }
        if (!v154[35] || (int v165 = *(int *)((char *)v151 + v154[35]), (v165 & 2) == 0))
        {
LABEL_339:
          uint64_t v168 = v154[28];
          if (!v168) {
            goto LABEL_347;
          }
          int v169 = *(int *)((char *)v151 + v168);
          if ((v169 & 2) != 0) {
            goto LABEL_357;
          }
          goto LABEL_345;
        }
LABEL_336:
        LOBYTE(v190[0]) = (v165 & 4) != 0;
        BOOL v167 = v162 >= 0x47;
        if (!v160) {
          goto LABEL_358;
        }
        goto LABEL_348;
      }
      if (v155 < 0x47)
      {
        if (v155 <= 0x38) {
          goto LABEL_347;
        }
      }
      else if (v154[35])
      {
        int v165 = *(int *)((char *)v151 + v154[35]);
        if (v165) {
          goto LABEL_336;
        }
      }
      uint64_t v170 = v154[28];
      if (!v170) {
        goto LABEL_347;
      }
      int v169 = *(int *)((char *)v151 + v170);
      if (v169) {
        goto LABEL_357;
      }
LABEL_345:
      if ((v169 & 7) == 4 || (v169 & 0x23) == 0x20)
      {
LABEL_357:
        LOBYTE(v190[0]) = BYTE1(v169) & 1;
        BOOL v167 = v162 >= 0x47;
        if (!v160) {
          goto LABEL_358;
        }
        goto LABEL_348;
      }
LABEL_347:
      LOBYTE(v190[0]) = 0;
      BOOL v167 = v162 >= 0x47;
      if (!v160)
      {
LABEL_358:
        if (!v167)
        {
          if (v162 > 0x38) {
            goto LABEL_364;
          }
LABEL_368:
          LOBYTE(v172) = 0;
          goto LABEL_370;
        }
        if (!v161[35] || (unsigned int v171 = *(int *)((char *)v159 + v161[35]), (v171 & 1) == 0))
        {
LABEL_364:
          uint64_t v172 = v161[28];
          if (v161[28])
          {
            unsigned int v173 = *(int *)((char *)v159 + v172);
            if (v173) {
              goto LABEL_369;
            }
            goto LABEL_366;
          }
          goto LABEL_370;
        }
LABEL_362:
        LODWORD(v172) = (v171 >> 2) & 1;
        goto LABEL_370;
      }
LABEL_348:
      if (v167)
      {
        if (v161[35])
        {
          unsigned int v171 = *(int *)((char *)v159 + v161[35]);
          if ((v171 & 2) != 0) {
            goto LABEL_362;
          }
        }
      }
      else if (v162 <= 0x38)
      {
        goto LABEL_368;
      }
      uint64_t v172 = v161[28];
      if (v161[28])
      {
        unsigned int v173 = *(int *)((char *)v159 + v172);
        if ((v173 & 2) != 0) {
          goto LABEL_369;
        }
LABEL_366:
        if ((v173 & 7) != 4 && (v173 & 0x23) != 0x20) {
          goto LABEL_368;
        }
LABEL_369:
        LODWORD(v172) = (v173 >> 8) & 1;
      }
LABEL_370:
      unsigned __int8 v189 = v172;
      unsigned int v174 = sub_F7173C((void *)(a3 + 1480), (unsigned __int8 *)v190, &v189, *((unsigned char *)a2 + 84) & 1, (*((unsigned __int8 *)a2 + 84) >> 1) & 1);
      uint64_t v175 = sub_ECDD38((void *)(a3 + 1504), v174);
      uint64_t result = 0;
      int v176 = *(_DWORD *)v175;
      if (*(_DWORD *)v175 == -1) {
        return result;
      }
      int v177 = *(_DWORD *)(v175 + 4);
      if (v177 == 0x7FFFFFFF) {
        return result;
      }
      uint64_t v178 = *(void *)(v175 + 8);
      if (v178 == 0x7FFFFFFFFFFFFFFFLL) {
        return result;
      }
      if (*(_DWORD *)(a4 + 664)) {
        *(_DWORD *)(a4 + 664) = 0;
      }
      *(_DWORD *)(a4 + 640) = v176;
      *(_DWORD *)(a4 + 644) = v177;
      *(void *)(a4 + 648) = v178;
      int8x16_t v151 = *a2;
      int v166 = (unsigned __int16 *)((char *)*a2 - **a2);
      if (*v166 < 0xDu) {
        goto LABEL_379;
      }
      goto LABEL_376;
    }
LABEL_324:
    if ((v157 & 1) == 0) {
      goto LABEL_331;
    }
    goto LABEL_325;
  }
  if (v162 < 0x47)
  {
    if (v162 <= 0x38) {
      goto LABEL_324;
    }
    goto LABEL_316;
  }
  if (!v161[35] || (int v163 = *(int *)((char *)v159 + v161[35]), (v163 & 2) == 0))
  {
LABEL_316:
    if (!v161[28]) {
      goto LABEL_324;
    }
    int v164 = *(int *)((char *)v159 + v161[28]);
    if ((v164 & 2) != 0) {
      goto LABEL_330;
    }
    goto LABEL_322;
  }
LABEL_313:
  if (v157 != ((v163 & 4) != 0)) {
    goto LABEL_325;
  }
LABEL_331:
  int v166 = (unsigned __int16 *)((char *)v151 + v153);
  if (*(unsigned __int16 *)((char *)v151 + v153) < 0xDu) {
    goto LABEL_379;
  }
LABEL_376:
  uint64_t v179 = v166[6];
  if (v179)
  {
    uint64_t v180 = *(unsigned __int16 *)((char *)v151 + v179);
    double v181 = *v31;
    float64x2_t v182 = (unsigned __int16 *)((char *)*v31 - **v31);
    if (*v182 < 0xDu) {
      goto LABEL_388;
    }
    goto LABEL_380;
  }
LABEL_379:
  uint64_t v180 = 0;
  double v181 = *v31;
  float64x2_t v182 = (unsigned __int16 *)((char *)*v31 - **v31);
  if (*v182 < 0xDu) {
    goto LABEL_388;
  }
LABEL_380:
  uint64_t v183 = v182[6];
  if (!v183)
  {
LABEL_388:
    if (v180) {
      goto LABEL_382;
    }
    return 1;
  }
  if (*(unsigned __int16 *)((char *)v181 + v183) == v180) {
    return 1;
  }
LABEL_382:
  unsigned int v184 = sub_3D2C3C(a1[2], a2, (char **)a2 + 5);
  uint64_t v185 = sub_ECDD38((void *)(a3 + 1528), v184);
  uint64_t result = 0;
  int v186 = *(_DWORD *)v185;
  if (*(_DWORD *)v185 != -1)
  {
    int v187 = *(_DWORD *)(v185 + 4);
    if (v187 != 0x7FFFFFFF)
    {
      uint64_t v188 = *(void *)(v185 + 8);
      if (v188 != 0x7FFFFFFFFFFFFFFFLL)
      {
        if (*(_DWORD *)(a4 + 696)) {
          *(_DWORD *)(a4 + 696) = 0;
        }
        *(_DWORD *)(a4 + 672) = v186;
        *(_DWORD *)(a4 + 676) = v187;
        uint64_t result = 1;
        *(void *)(a4 + 680) = v188;
      }
    }
  }
  return result;
}

uint64_t sub_F1A898(uint64_t *a1, int **a2, int **a3, unsigned char *a4)
{
  if (a4[1337])
  {
    float64x2_t v6 = *a2;
    unint64_t v7 = (unsigned __int16 *)((char *)*a2 - **a2);
    unsigned int v8 = *v7;
    if (*((unsigned char *)a2 + 38))
    {
      if (v8 < 0x47) {
        goto LABEL_23;
      }
      uint64_t v9 = v7[35];
      if (!v9) {
        goto LABEL_23;
      }
      int v10 = *(int *)((char *)v6 + v9);
      if ((v10 & 0x141510) == 0 && (v10 & 0x40) == 0) {
        goto LABEL_23;
      }
    }
    else
    {
      if (v8 < 0x47) {
        goto LABEL_23;
      }
      uint64_t v11 = v7[35];
      if (!v11) {
        goto LABEL_23;
      }
      int v12 = *(int *)((char *)v6 + v11);
      if ((v12 & 0xA0A88) == 0 && (v12 & 0x20) == 0) {
        goto LABEL_23;
      }
    }
    int v13 = (char *)*a3;
    int v14 = (unsigned __int16 *)((char *)*a3 - **a3);
    unsigned int v15 = *v14;
    if (*((unsigned char *)a3 + 38))
    {
      if (v15 < 0x47) {
        goto LABEL_23;
      }
      uint64_t v16 = v14[35];
      if (!v16) {
        goto LABEL_23;
      }
      int v17 = *(_DWORD *)&v13[v16];
      if ((v17 & 0x141510) != 0) {
        return 0;
      }
      int v20 = 64;
    }
    else
    {
      if (v15 < 0x47) {
        goto LABEL_23;
      }
      uint64_t v19 = v14[35];
      if (!v19) {
        goto LABEL_23;
      }
      int v17 = *(_DWORD *)&v13[v19];
      if ((v17 & 0xA0A88) != 0) {
        return 0;
      }
      int v20 = 32;
    }
    if ((v20 & v17) != 0) {
      return 0;
    }
  }
LABEL_23:
  if (a4[1338])
  {
    int v21 = (unsigned __int16 *)((char *)*a2 - **a2);
    if (*v21 >= 0x2Fu)
    {
      uint64_t v22 = v21[23];
      if (v22)
      {
        if (*((unsigned char *)*a2 + v22) == 14) {
          return 0;
        }
      }
    }
    int v23 = (unsigned __int16 *)((char *)*a3 - **a3);
    if (*v23 >= 0x2Fu)
    {
      uint64_t v24 = v23[23];
      if (v24)
      {
        if (*((unsigned char *)*a3 + v24) == 14) {
          return 0;
        }
      }
    }
  }
  if (a4[1339])
  {
    int v25 = (unsigned __int16 *)((char *)*a2 - **a2);
    if (*v25 >= 0x2Fu)
    {
      uint64_t v26 = v25[23];
      if (v26)
      {
        unsigned int v27 = *((unsigned __int8 *)*a2 + v26);
        BOOL v28 = v27 > 0x36;
        uint64_t v29 = (1 << v27) & 0x44000000000008;
        if (!v28 && v29 != 0) {
          return 0;
        }
      }
    }
  }
  if (a4[1340])
  {
    int v31 = *a2;
    int v32 = (unsigned __int16 *)((char *)*a2 - **a2);
    unsigned int v33 = *v32;
    if (*((unsigned char *)a2 + 38))
    {
      if (v33 >= 0xB)
      {
        unsigned int v34 = v32[5];
        if (v34)
        {
          if ((*(int *)((char *)v31 + v34) & 0x40) != 0) {
            return 0;
          }
        }
      }
    }
    else if (v33 >= 0xB)
    {
      unsigned int v35 = v32[5];
      if (v35)
      {
        if ((*(int *)((char *)v31 + v35) & 0x80) != 0) {
          return 0;
        }
      }
    }
  }
  uint64_t v36 = *a1;
  int v37 = (unsigned int *)sub_2E4738(a2);
  sub_2E45D4(v36, v37, (uint64_t)(a1 + 3), 1, 1, 1);
  int v39 = (int **)a1[3];
  int v38 = (int **)a1[4];
  if (0xCCCCCCCCCCCCCCCDLL * (v38 - v39) < 3) {
    return 0;
  }
  uint64_t result = 1;
  if (a4[1341] && v39 != v38)
  {
    while (1)
    {
      int v40 = (unsigned __int16 *)((char *)*v39 - **v39);
      unsigned int v41 = *v40;
      if (*((unsigned char *)v39 + 38))
      {
        if (v41 >= 0x4D)
        {
          unsigned int v42 = v40[38];
          if (v42)
          {
            int v43 = 8;
            goto LABEL_52;
          }
        }
      }
      else if (v41 >= 0x4D)
      {
        unsigned int v42 = v40[38];
        if (v42)
        {
          int v43 = 4;
LABEL_52:
          if ((*(int *)((char *)*v39 + v42) & v43) != 0) {
            return 0;
          }
        }
      }
      v39 += 5;
      if (v39 == v38) {
        return 1;
      }
    }
  }
  return result;
}

void sub_F1ABB4(uint64_t *a1, int **a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9 = (unsigned char *)(a4 + 1336);
  uint64_t v10 = *a1;
  uint64_t v11 = (unsigned int *)sub_2E4738(a2);
  sub_2E45D4(v10, v11, (uint64_t)(a1 + 3), 1, 1, 1);
  int v12 = (int **)a1[3];
  int v13 = (int **)a1[4];
  double v14 = 0.0;
  if (v12 != v13)
  {
    if (a5)
    {
      do
      {
        char v22 = sub_F1AE18(v9, v12);
        double v23 = 0.0;
        if ((v22 & 1) == 0) {
          double v23 = sub_F1C098((uint64_t)a1, v12, v9);
        }
        double v14 = v14 + v23;
        v12 += 5;
      }
      while (v12 != v13);
    }
    else
    {
      do
      {
        double v14 = v14 + sub_F1C098((uint64_t)a1, v12, v9);
        v12 += 5;
      }
      while (v12 != v13);
    }
  }
  unsigned int v15 = (unsigned __int16 *)((char *)*a2 - **a2);
  if (*v15 >= 0xBu && (uint64_t v16 = v15[5]) != 0)
  {
    int v17 = *((unsigned __int8 *)*a2 + v16 + 1) >> 7;
    uint64_t v18 = *(void *)(a3 + 32);
    uint64_t v19 = a1[3];
    uint64_t v20 = a1[4];
    if (v19 == v20)
    {
LABEL_7:
      uint64_t v21 = v19;
      goto LABEL_18;
    }
  }
  else
  {
    int v17 = 0;
    uint64_t v18 = *(void *)(a3 + 32);
    uint64_t v19 = a1[3];
    uint64_t v20 = a1[4];
    if (v19 == v20) {
      goto LABEL_7;
    }
  }
  unint64_t v24 = (unint64_t)a2[4];
  uint64_t v25 = v24 & 0xFFFFFFFFFFFFLL;
  uint64_t v26 = HIWORD(v24) & 1;
  uint64_t v21 = v19;
  while (1)
  {
    uint64_t v27 = *(void *)(v21 + 32);
    if (v27 & 0xFFFFFFFFFFFFLL) == v25 && ((v26 ^ ((v27 & 0xFF000000000000) == 0))) {
      break;
    }
    v21 += 40;
    if (v21 == v20)
    {
      uint64_t v21 = v20;
      break;
    }
  }
LABEL_18:
  double v28 = 0.0;
  while (1)
  {
    if (v21 == v19) {
      uint64_t v33 = v20;
    }
    else {
      uint64_t v33 = v21;
    }
    uint64_t v34 = v33 - 40;
    uint64_t v35 = v21 + 40;
    if (v21 + 40 == v20) {
      uint64_t v35 = v19;
    }
    uint64_t v21 = v17 ? v34 : v35;
    uint64_t v36 = *(void *)(v21 + 32);
    if ((v36 & 0xFFFFFFFFFFFFLL) == (v18 & 0xFFFFFFFFFFFFLL)
      && ((v18 & 0x1000000000000) == 0) != ((v36 & 0xFF000000000000) == 0))
    {
      break;
    }
    if (!a5 || (sub_F1AE18(v9, (int **)v21) & 1) == 0)
    {
      double v29 = sub_F1C098((uint64_t)a1, (int **)v21, v9);
      long long v30 = *(_OWORD *)v21;
      long long v31 = *(_OWORD *)(v21 + 16);
      uint64_t v38 = *(void *)(v21 + 32);
      v37[0] = v30;
      v37[1] = v31;
      BYTE6(v38) ^= 1u;
      double v32 = v29 + sub_F1C098((uint64_t)a1, (int **)v37, v9);
      if (v28 < v32) {
        double v28 = v32;
      }
    }
  }
}

uint64_t sub_F1AE18(unsigned char *a1, int **a2)
{
  if (a1[6])
  {
    uint64_t v2 = (char *)*a2;
    char v3 = (unsigned __int16 *)((char *)*a2 - **a2);
    unsigned int v4 = *v3;
    if (*((unsigned char *)a2 + 38))
    {
      if (v4 >= 0x4D)
      {
        unsigned int v5 = v3[38];
        if (v5)
        {
          if ((*(_DWORD *)&v2[v5] & 8) != 0) {
            return 1;
          }
        }
      }
    }
    else if (v4 >= 0x4D)
    {
      unsigned int v6 = v3[38];
      if (v6)
      {
        if ((*(_DWORD *)&v2[v6] & 4) != 0) {
          return 1;
        }
      }
    }
  }
  if (a1[7])
  {
    unint64_t v7 = (char *)*a2;
    unsigned int v8 = (unsigned __int16 *)((char *)*a2 - **a2);
    unsigned int v9 = *v8;
    if (*((unsigned char *)a2 + 38))
    {
      if (v9 >= 0x4D)
      {
        unsigned int v10 = v8[38];
        if (v10)
        {
          if ((*(_DWORD *)&v7[v10] & 2) != 0) {
            return 1;
          }
        }
      }
    }
    else if (v9 >= 0x4D)
    {
      unsigned int v11 = v8[38];
      if (v11)
      {
        if (*(_DWORD *)&v7[v11]) {
          return 1;
        }
      }
    }
  }
  if (a1[8])
  {
    int v12 = (char *)*a2;
    int v13 = (unsigned __int16 *)((char *)*a2 - **a2);
    unsigned int v14 = *v13;
    if (*((unsigned char *)a2 + 38))
    {
      if (v14 >= 0x39)
      {
        uint64_t v15 = v13[28];
        if (v15)
        {
          int v16 = *(_DWORD *)&v12[v15];
          if ((v16 & 0x2000) != 0 && (v16 & 0x800) == 0) {
            return 1;
          }
        }
      }
    }
    else if (v14 >= 0x39)
    {
      uint64_t v17 = v13[28];
      if (v17)
      {
        int v18 = *(_DWORD *)&v12[v17];
        if ((v18 & 0x4000) != 0 && (v18 & 0x1000) == 0) {
          return 1;
        }
      }
    }
  }
  if (a1[9])
  {
    uint64_t v19 = (unsigned __int16 *)((char *)*a2 - **a2);
    if (*v19 >= 0x2Fu)
    {
      uint64_t v20 = v19[23];
      if (v20)
      {
        unsigned int v21 = *((unsigned __int8 *)*a2 + v20);
        BOOL v22 = v21 > 0x2A;
        uint64_t v23 = (1 << v21) & 0x50400000000;
        if (!v22 && v23 != 0) {
          return 1;
        }
      }
    }
  }
  if (a1[10])
  {
    uint64_t v25 = (unsigned __int16 *)((char *)*a2 - **a2);
    if (*v25 >= 0xBu)
    {
      uint64_t v26 = v25[5];
      if (v26)
      {
        if ((*((unsigned char *)*a2 + v26 + 3) & 4) != 0) {
          return 1;
        }
      }
    }
  }
  if (a1[11])
  {
    uint64_t v27 = a2[1];
    if (v27)
    {
      double v28 = (unsigned __int16 *)((char *)v27 - *v27);
      if (*v28 >= 0x11u)
      {
        uint64_t v29 = v28[8];
        if (v29)
        {
          if ((*(_WORD *)((unsigned char *)v27 + v29) & 4) != 0) {
            return 1;
          }
        }
      }
    }
  }
  if (a1[12] && (long long v30 = (unsigned __int16 *)((char *)*a2 - **a2), *v30 >= 0xBu) && (v31 = v30[5]) != 0) {
    return *((unsigned char *)*a2 + v31 + 2) & 1;
  }
  else {
    return 0;
  }
}

void sub_F1B038(uint64_t a1, long long *a2, int **a3, uint64_t a4)
{
  __asm { FMOV            V0.2D, #1.0 }
  uint64_t v93 = 0x3FF0000000000000;
  unsigned int v9 = (unsigned __int16 *)((char *)*a3 - **a3);
  unsigned int v10 = *v9;
  if (*((unsigned char *)a3 + 38))
  {
    if (v10 >= 0x47)
    {
      unsigned int v11 = v9[35];
      if (v11)
      {
        int v12 = 1024;
        goto LABEL_8;
      }
    }
LABEL_11:
    int v13 = &v92;
    goto LABEL_12;
  }
  if (v10 < 0x47) {
    goto LABEL_11;
  }
  unsigned int v11 = v9[35];
  if (!v11) {
    goto LABEL_11;
  }
  int v12 = 512;
LABEL_8:
  int v13 = &v92;
  if ((*(int *)((char *)*a3 + v11) & v12) != 0) {
    int v13 = a2 + 26;
  }
LABEL_12:
  int v14 = *(_DWORD *)(a4 + 1336);
  uint64_t v15 = *((void *)v13 + 2);
  *(_OWORD *)(a4 + 1312) = *v13;
  *(void *)(a4 + 1328) = v15;
  if (v14 != 1) {
    *(_DWORD *)(a4 + 1336) = 1;
  }
  int v16 = (char *)*a3;
  uint64_t v17 = (unsigned __int16 *)((char *)*a3 - **a3);
  unsigned int v18 = *v17;
  if (!*((unsigned char *)a3 + 38))
  {
    if (v18 < 0x47) {
      goto LABEL_25;
    }
    uint64_t v20 = v17[35];
    if (!v20 || (v16[v20] & 8) == 0 && (*(_DWORD *)&v16[v20] & 0x80000) == 0) {
      goto LABEL_25;
    }
LABEL_24:
    unsigned int v21 = (long long *)((char *)a2 + 440);
    goto LABEL_26;
  }
  if (v18 >= 0x47)
  {
    uint64_t v19 = v17[35];
    if (v19)
    {
      if ((v16[v19] & 0x10) != 0 || (*(_DWORD *)&v16[v19] & 0x100000) != 0) {
        goto LABEL_24;
      }
    }
  }
LABEL_25:
  unsigned int v21 = &v92;
LABEL_26:
  int v22 = *(_DWORD *)(a4 + 1368);
  uint64_t v23 = *((void *)v21 + 2);
  *(_OWORD *)(a4 + 1344) = *v21;
  *(void *)(a4 + 1360) = v23;
  if (v22 != 1) {
    *(_DWORD *)(a4 + 1368) = 1;
  }
  unint64_t v24 = (unsigned __int16 *)((char *)*a3 - **a3);
  unsigned int v25 = *v24;
  if (*((unsigned char *)a3 + 38))
  {
    if (v25 >= 0x47)
    {
      unsigned int v26 = v24[35];
      if (v26)
      {
        int v27 = 256;
        goto LABEL_35;
      }
    }
LABEL_38:
    double v28 = &v92;
    goto LABEL_39;
  }
  if (v25 < 0x47) {
    goto LABEL_38;
  }
  unsigned int v26 = v24[35];
  if (!v26) {
    goto LABEL_38;
  }
  int v27 = 128;
LABEL_35:
  double v28 = &v92;
  if ((*(int *)((char *)*a3 + v26) & v27) != 0) {
    double v28 = a2 + 29;
  }
LABEL_39:
  int v29 = *(_DWORD *)(a4 + 1400);
  uint64_t v30 = *((void *)v28 + 2);
  *(_OWORD *)(a4 + 1376) = *v28;
  *(void *)(a4 + 1392) = v30;
  if (v29 != 1) {
    *(_DWORD *)(a4 + 1400) = 1;
  }
  uint64_t v31 = (unsigned __int16 *)((char *)*a3 - **a3);
  unsigned int v32 = *v31;
  if (*((unsigned char *)a3 + 38))
  {
    if (v32 >= 0x47)
    {
      unsigned int v33 = v31[35];
      if (v33)
      {
        int v34 = 0x40000;
        goto LABEL_48;
      }
    }
LABEL_51:
    uint64_t v35 = &v92;
    goto LABEL_52;
  }
  if (v32 < 0x47) {
    goto LABEL_51;
  }
  unsigned int v33 = v31[35];
  if (!v33) {
    goto LABEL_51;
  }
  int v34 = 0x20000;
LABEL_48:
  uint64_t v35 = &v92;
  if ((*(int *)((char *)*a3 + v33) & v34) != 0) {
    uint64_t v35 = (long long *)((char *)a2 + 536);
  }
LABEL_52:
  int v36 = *(_DWORD *)(a4 + 1496);
  uint64_t v37 = *((void *)v35 + 2);
  *(_OWORD *)(a4 + 1472) = *v35;
  *(void *)(a4 + 1488) = v37;
  if (v36 != 1) {
    *(_DWORD *)(a4 + 1496) = 1;
  }
  uint64_t v38 = (unsigned __int16 *)((char *)*a3 - **a3);
  unsigned int v39 = *v38;
  if (*((unsigned char *)a3 + 38))
  {
    if (v39 >= 0x47)
    {
      unsigned int v40 = v38[35];
      if (v40)
      {
        int v41 = 4096;
        goto LABEL_61;
      }
    }
LABEL_64:
    unsigned int v42 = &v92;
    goto LABEL_65;
  }
  if (v39 < 0x47) {
    goto LABEL_64;
  }
  unsigned int v40 = v38[35];
  if (!v40) {
    goto LABEL_64;
  }
  int v41 = 2048;
LABEL_61:
  unsigned int v42 = &v92;
  if ((*(int *)((char *)*a3 + v40) & v41) != 0) {
    unsigned int v42 = (long long *)((char *)a2 + 488);
  }
LABEL_65:
  int v43 = *(_DWORD *)(a4 + 1432);
  uint64_t v44 = *((void *)v42 + 2);
  *(_OWORD *)(a4 + 1408) = *v42;
  *(void *)(a4 + 1424) = v44;
  if (v43 != 1) {
    *(_DWORD *)(a4 + 1432) = 1;
  }
  int v45 = (unsigned __int16 *)((char *)*a3 - **a3);
  unsigned int v46 = *v45;
  if (*((unsigned char *)a3 + 38))
  {
    if (v46 >= 0x47)
    {
      unsigned int v47 = v45[35];
      if (v47)
      {
        int v48 = 64;
        goto LABEL_74;
      }
    }
LABEL_77:
    int v49 = &v92;
    goto LABEL_78;
  }
  if (v46 < 0x47) {
    goto LABEL_77;
  }
  unsigned int v47 = v45[35];
  if (!v47) {
    goto LABEL_77;
  }
  int v48 = 32;
LABEL_74:
  int v49 = &v92;
  if ((*(int *)((char *)*a3 + v47) & v48) != 0) {
    int v49 = a2 + 32;
  }
LABEL_78:
  int v50 = *(_DWORD *)(a4 + 1464);
  uint64_t v51 = *((void *)v49 + 2);
  *(_OWORD *)(a4 + 1440) = *v49;
  *(void *)(a4 + 1456) = v51;
  if (v50 != 1) {
    *(_DWORD *)(a4 + 1464) = 1;
  }
  unsigned int v52 = (unsigned __int16 *)((char *)*a3 - **a3);
  unsigned int v53 = *v52;
  if (*((unsigned char *)a3 + 38))
  {
    if (v53 >= 0x47)
    {
      unsigned int v54 = v52[35];
      if (v54)
      {
        int v55 = 0x10000;
        goto LABEL_87;
      }
    }
LABEL_90:
    uint64_t v56 = &v92;
    goto LABEL_91;
  }
  if (v53 < 0x47) {
    goto LABEL_90;
  }
  unsigned int v54 = v52[35];
  if (!v54) {
    goto LABEL_90;
  }
  int v55 = 0x8000;
LABEL_87:
  uint64_t v56 = &v92;
  if ((*(int *)((char *)*a3 + v54) & v55) != 0) {
    uint64_t v56 = a2 + 47;
  }
LABEL_91:
  int v57 = *(_DWORD *)(a4 + 1528);
  uint64_t v58 = *((void *)v56 + 2);
  *(_OWORD *)(a4 + 1504) = *v56;
  *(void *)(a4 + 1520) = v58;
  if (v57 != 1) {
    *(_DWORD *)(a4 + 1528) = 1;
  }
  int v59 = (unsigned __int16 *)((char *)*a3 - **a3);
  unsigned int v60 = *v59;
  if (*((unsigned char *)a3 + 38))
  {
    if (v60 >= 0x47)
    {
      unsigned int v61 = v59[35];
      if (v61)
      {
        int v62 = 0x400000;
        goto LABEL_100;
      }
    }
LABEL_103:
    unsigned int v63 = &v92;
    goto LABEL_104;
  }
  if (v60 < 0x47) {
    goto LABEL_103;
  }
  unsigned int v61 = v59[35];
  if (!v61) {
    goto LABEL_103;
  }
  int v62 = 0x200000;
LABEL_100:
  unsigned int v63 = &v92;
  if ((*(int *)((char *)*a3 + v61) & v62) != 0) {
    unsigned int v63 = a2 + 35;
  }
LABEL_104:
  int v64 = *(_DWORD *)(a4 + 1560);
  uint64_t v65 = *((void *)v63 + 2);
  *(_OWORD *)(a4 + 1536) = *v63;
  *(void *)(a4 + 1552) = v65;
  if (v64 != 1) {
    *(_DWORD *)(a4 + 1560) = 1;
  }
  int v66 = (unsigned __int16 *)((char *)*a3 - **a3);
  unsigned int v67 = *v66;
  if (*((unsigned char *)a3 + 38))
  {
    if (v67 >= 0x47)
    {
      unsigned int v68 = v66[35];
      if (v68)
      {
        int v69 = 0x1000000;
        goto LABEL_113;
      }
    }
LABEL_116:
    uint64_t v70 = &v92;
    goto LABEL_117;
  }
  if (v67 < 0x47) {
    goto LABEL_116;
  }
  unsigned int v68 = v66[35];
  if (!v68) {
    goto LABEL_116;
  }
  int v69 = 0x800000;
LABEL_113:
  uint64_t v70 = &v92;
  if ((*(int *)((char *)*a3 + v68) & v69) != 0) {
    uint64_t v70 = (long long *)((char *)a2 + 584);
  }
LABEL_117:
  int v71 = *(_DWORD *)(a4 + 1592);
  uint64_t v72 = *((void *)v70 + 2);
  *(_OWORD *)(a4 + 1568) = *v70;
  *(void *)(a4 + 1584) = v72;
  if (v71 != 1) {
    *(_DWORD *)(a4 + 1592) = 1;
  }
  int v73 = (unsigned __int16 *)((char *)*a3 - **a3);
  unsigned int v74 = *v73;
  if (*((unsigned char *)a3 + 38))
  {
    if (v74 >= 0x47)
    {
      unsigned int v75 = v73[35];
      if (v75)
      {
        int v76 = 0x4000000;
        goto LABEL_126;
      }
    }
LABEL_129:
    int v77 = &v92;
    goto LABEL_130;
  }
  if (v74 < 0x47) {
    goto LABEL_129;
  }
  unsigned int v75 = v73[35];
  if (!v75) {
    goto LABEL_129;
  }
  int v76 = 0x2000000;
LABEL_126:
  int v77 = &v92;
  if ((*(int *)((char *)*a3 + v75) & v76) != 0) {
    int v77 = a2 + 38;
  }
LABEL_130:
  int v78 = *(_DWORD *)(a4 + 1624);
  uint64_t v79 = *((void *)v77 + 2);
  *(_OWORD *)(a4 + 1600) = *v77;
  *(void *)(a4 + 1616) = v79;
  if (v78 != 1) {
    *(_DWORD *)(a4 + 1624) = 1;
  }
  uint64_t v80 = (unsigned __int16 *)((char *)*a3 - **a3);
  unsigned int v81 = *v80;
  if (*((unsigned char *)a3 + 38))
  {
    if (v81 >= 0x47)
    {
      unsigned int v82 = v80[35];
      if (v82)
      {
        int v83 = 0x10000000;
        goto LABEL_139;
      }
    }
LABEL_142:
    uint64_t v84 = &v92;
    goto LABEL_143;
  }
  if (v81 < 0x47) {
    goto LABEL_142;
  }
  unsigned int v82 = v80[35];
  if (!v82) {
    goto LABEL_142;
  }
  int v83 = 0x8000000;
LABEL_139:
  uint64_t v84 = &v92;
  if ((*(int *)((char *)*a3 + v82) & v83) != 0) {
    uint64_t v84 = (long long *)((char *)a2 + 632);
  }
LABEL_143:
  int v85 = *(_DWORD *)(a4 + 1656);
  uint64_t v86 = *((void *)v84 + 2);
  *(_OWORD *)(a4 + 1632) = *v84;
  *(void *)(a4 + 1648) = v86;
  if (v85 != 1) {
    *(_DWORD *)(a4 + 1656) = 1;
  }
  uint64_t v87 = (unsigned __int16 *)((char *)*a3 - **a3);
  if (*v87 < 0xBu)
  {
    int v89 = &v92;
  }
  else
  {
    uint64_t v88 = v87[5];
    int v89 = &v92;
    if (v88 && (*(int *)((char *)*a3 + v88) & 0x400000) != 0) {
      int v89 = a2 + 41;
    }
  }
  int v90 = *(_DWORD *)(a4 + 1688);
  uint64_t v91 = *((void *)v89 + 2);
  *(_OWORD *)(a4 + 1664) = *v89;
  *(void *)(a4 + 1680) = v91;
  if (v90 != 1) {
    *(_DWORD *)(a4 + 1688) = 1;
  }
}

uint64_t sub_F1B648(uint64_t result, long long *a2)
{
  if ((long long *)result == a2) {
    return result;
  }
  int v2 = *(_DWORD *)(result + 24);
  int v3 = *((_DWORD *)a2 + 6);
  if (v2 != v3)
  {
    if (v3 == 1)
    {
      long long v5 = *a2;
      *(void *)(result + 16) = *((void *)a2 + 2);
    }
    else
    {
      if (v3)
      {
LABEL_14:
        *(_DWORD *)(result + 24) = *((_DWORD *)a2 + 6);
        return result;
      }
      long long v5 = *a2;
    }
    *(_OWORD *)uint64_t result = v5;
    goto LABEL_14;
  }
  if (v2 == 1)
  {
    long long v4 = *a2;
    *(void *)(result + 16) = *((void *)a2 + 2);
  }
  else
  {
    if (v2) {
      return result;
    }
    long long v4 = *a2;
  }
  *(_OWORD *)uint64_t result = v4;
  return result;
}

BOOL sub_F1B6B8(int **a1)
{
  uint64_t v1 = (char *)*a1;
  int v2 = (unsigned __int16 *)((char *)*a1 - **a1);
  unsigned int v3 = *v2;
  if (*((unsigned char *)a1 + 38))
  {
    if (v3 >= 0x47)
    {
      unsigned int v4 = v2[35];
      if (v4) {
        return (*(_DWORD *)&v1[v4] & 0x40) != 0;
      }
    }
  }
  else if (v3 >= 0x47)
  {
    unsigned int v6 = v2[35];
    if (v6) {
      return (*(_DWORD *)&v1[v6] & 0x20) != 0;
    }
  }
  return 0;
}

BOOL sub_F1B71C(int **a1)
{
  uint64_t v1 = (char *)*a1;
  int v2 = (unsigned __int16 *)((char *)*a1 - **a1);
  unsigned int v3 = *v2;
  if (*((unsigned char *)a1 + 38))
  {
    if (v3 >= 0x47)
    {
      unsigned int v4 = v2[35];
      if (v4) {
        return (*(_DWORD *)&v1[v4] & 0x400000) != 0;
      }
    }
  }
  else if (v3 >= 0x47)
  {
    unsigned int v6 = v2[35];
    if (v6) {
      return (*(_DWORD *)&v1[v6] & 0x200000) != 0;
    }
  }
  return 0;
}

BOOL sub_F1B780(int **a1)
{
  uint64_t v1 = (char *)*a1;
  int v2 = (unsigned __int16 *)((char *)*a1 - **a1);
  unsigned int v3 = *v2;
  if (*((unsigned char *)a1 + 38))
  {
    if (v3 >= 0x47)
    {
      unsigned int v4 = v2[35];
      if (v4) {
        return (*(_DWORD *)&v1[v4] & 0x1000000) != 0;
      }
    }
  }
  else if (v3 >= 0x47)
  {
    unsigned int v6 = v2[35];
    if (v6) {
      return (*(_DWORD *)&v1[v6] & 0x800000) != 0;
    }
  }
  return 0;
}

BOOL sub_F1B7E4(int **a1)
{
  uint64_t v1 = (char *)*a1;
  int v2 = (unsigned __int16 *)((char *)*a1 - **a1);
  unsigned int v3 = *v2;
  if (*((unsigned char *)a1 + 38))
  {
    if (v3 >= 0x47)
    {
      unsigned int v4 = v2[35];
      if (v4) {
        return (*(_DWORD *)&v1[v4] & 0x4000000) != 0;
      }
    }
  }
  else if (v3 >= 0x47)
  {
    unsigned int v6 = v2[35];
    if (v6) {
      return (*(_DWORD *)&v1[v6] & 0x2000000) != 0;
    }
  }
  return 0;
}

BOOL sub_F1B848(int **a1)
{
  uint64_t v1 = (char *)*a1;
  int v2 = (unsigned __int16 *)((char *)*a1 - **a1);
  unsigned int v3 = *v2;
  if (*((unsigned char *)a1 + 38))
  {
    if (v3 >= 0x47)
    {
      unsigned int v4 = v2[35];
      if (v4) {
        return (*(_DWORD *)&v1[v4] & 0x10000000) != 0;
      }
    }
  }
  else if (v3 >= 0x47)
  {
    unsigned int v6 = v2[35];
    if (v6) {
      return (*(_DWORD *)&v1[v6] & 0x8000000) != 0;
    }
  }
  return 0;
}

double sub_F1B8AC(uint64_t a1, double *a2, int **a3)
{
  long long v5 = *a3;
  unsigned int v6 = (unsigned __int16 *)((char *)*a3 - **a3);
  unsigned int v7 = *v6;
  if (*((unsigned char *)a3 + 38))
  {
    if (v7 >= 0x47)
    {
      uint64_t v8 = v6[35];
      if (v8)
      {
        int v9 = *(int *)((char *)v5 + v8);
        if ((v9 & 0x400) == 0)
        {
          if ((v9 & 0x100010) == 0)
          {
            if ((v9 & 0x100) == 0)
            {
              if ((v9 & 0x40000) == 0)
              {
                int v10 = 4096;
                goto LABEL_18;
              }
              return a2[67];
            }
            return a2[58];
          }
          return a2[55];
        }
        return a2[52];
      }
    }
  }
  else if (v7 >= 0x47)
  {
    uint64_t v8 = v6[35];
    if (v8)
    {
      int v11 = *(int *)((char *)v5 + v8);
      if ((v11 & 0x200) == 0)
      {
        if ((v11 & 0x80008) == 0)
        {
          if ((v11 & 0x80) == 0)
          {
            if ((v11 & 0x20000) == 0)
            {
              int v10 = 2048;
LABEL_18:
              if ((*(int *)((char *)v5 + v8) & v10) != 0) {
                return a2[61];
              }
              goto LABEL_20;
            }
            return a2[67];
          }
          return a2[58];
        }
        return a2[55];
      }
      return a2[52];
    }
  }
LABEL_20:
  if (sub_F1B6B8(a3)) {
    return a2[64];
  }
  if (sub_F1B71C(a3)) {
    return a2[70];
  }
  if (sub_F1B780(a3)) {
    return a2[73];
  }
  if (sub_F1B7E4(a3)) {
    return a2[76];
  }
  if (sub_F1B848(a3)) {
    return a2[79];
  }
  __asm { FMOV            V1.2D, #1.0 }
  return 1.0;
}

uint64_t sub_F1BAB8(uint64_t a1, int **a2, uint64_t a3, uint64_t a4)
{
  unsigned int v7 = *a2;
  if (!*(unsigned char *)(a4 + 1075)) {
    goto LABEL_14;
  }
  uint64_t v8 = *(int **)a3;
  int v9 = (unsigned __int16 *)((char *)v7 - *v7);
  unsigned int v10 = *v9;
  if (*((unsigned char *)a2 + 38))
  {
    if (v10 >= 0x39)
    {
      unsigned int v11 = v9[28];
      if (v11)
      {
        if ((*(int *)((char *)v7 + v11) & 0x2000) != 0) {
          goto LABEL_14;
        }
      }
    }
  }
  else if (v10 >= 0x39)
  {
    unsigned int v12 = v9[28];
    if (v12)
    {
      if ((*(int *)((char *)v7 + v12) & 0x4000) != 0) {
        goto LABEL_14;
      }
    }
  }
  int v13 = (unsigned __int16 *)((char *)v8 - *v8);
  unsigned int v14 = *v13;
  if (!*(unsigned char *)(a3 + 38))
  {
    if (v14 < 0x39 || !v13[28] || (*(int *)((char *)v8 + v13[28]) & 0x2000) == 0) {
      goto LABEL_19;
    }
LABEL_14:
    uint64_t v15 = (unsigned __int16 *)((char *)v7 - *v7);
    if (*v15 < 0xBu) {
      goto LABEL_24;
    }
LABEL_22:
    uint64_t v17 = v15[5];
    if (v17 && (*((unsigned char *)v7 + v17 + 1) & 0x80) != 0)
    {
      int v20 = 5;
      unsigned int v18 = operator new(5uLL);
      int v19 = 1;
      unsigned char *v18 = 1;
      int v21 = 3;
      int v22 = 7;
      int v23 = 10;
LABEL_25:
      v18[1] = v23;
      _OWORD v18[2] = v22;
      v18[3] = v21;
      v18[4] = v20;
      unint64_t v24 = (unsigned __int16 *)((char *)v7 - *v7);
      unsigned int v25 = *v24;
      if (*((unsigned char *)a2 + 38))
      {
        if (v25 < 0xB || !v24[5] || (*((unsigned char *)v7 + v24[5]) & 2) == 0) {
          goto LABEL_44;
        }
        if (v25 > 0x4C)
        {
          if (v24[38] && (*(int *)((char *)v7 + v24[38]) & 2) != 0) {
            goto LABEL_44;
          }
LABEL_42:
          if (v24[23] && *((unsigned char *)v7 + v24[23]) == 14) {
            goto LABEL_44;
          }
LABEL_47:
          if (*((unsigned char *)a2 + 38))
          {
            if (v25 < 0x39)
            {
              if (v25 < 0x29) {
                goto LABEL_98;
              }
            }
            else if (v24[28])
            {
              int v28 = *(int *)((char *)v7 + v24[28]);
              if ((v28 & 0x2000) != 0 && (v28 & 0x800) == 0 && *(unsigned char *)(a4 + 1076)) {
                goto LABEL_44;
              }
            }
            unsigned int v30 = v24[20];
            if (!v24[20])
            {
              if (v25 <= 0x46) {
                goto LABEL_98;
              }
LABEL_88:
              if (v24[35])
              {
                int v46 = *(int *)((char *)v7 + v24[35]);
                if ((v46 & 0x141510) != 0) {
                  goto LABEL_44;
                }
                int v47 = 64;
LABEL_97:
                if ((v47 & v46) == 0) {
                  goto LABEL_98;
                }
LABEL_44:
                unsigned int v26 = (uint64_t *)sub_ECDD38((void *)(a4 + 1120), 0);
LABEL_45:
                uint64_t v16 = *v26;
                operator delete(v18);
                return v16;
              }
              goto LABEL_98;
            }
          }
          else
          {
            if (v25 < 0x39)
            {
              if (v25 < 0x27) {
                goto LABEL_98;
              }
            }
            else if (v24[28])
            {
              int v29 = *(int *)((char *)v7 + v24[28]);
              if ((v29 & 0x4000) != 0 && (v29 & 0x1000) == 0 && *(unsigned char *)(a4 + 1076)) {
                goto LABEL_44;
              }
            }
            unsigned int v30 = v24[19];
            if (!v24[19])
            {
              if (v25 <= 0x46) {
                goto LABEL_98;
              }
              goto LABEL_94;
            }
          }
          uint64_t v31 = (unsigned int *)((char *)v7 + v30 + *(int *)((char *)v7 + v30));
          unsigned int v34 = *v31;
          unsigned int v32 = v31 + 1;
          uint64_t v33 = v34;
          if (v34)
          {
            uint64_t v35 = &v32[v33];
            while (1)
            {
              int v36 = (int *)((char *)v32 + *v32);
              uint64_t v37 = (unsigned __int16 *)((char *)v36 - *v36);
              if (*v37 >= 0xBu)
              {
                uint64_t v38 = v37[5];
                if (v38)
                {
                  unsigned int v39 = (int *)((char *)v36 + v38 + *(unsigned int *)((char *)v36 + v38));
                  unsigned int v42 = *v39;
                  unsigned int v40 = (unsigned __int8 *)(v39 + 1);
                  uint64_t v41 = v42;
                  if (v42) {
                    break;
                  }
                }
              }
LABEL_68:
              if (++v32 == v35) {
                goto LABEL_86;
              }
            }
            while (1)
            {
              int v43 = *v40;
              if (v19 == v43) {
                break;
              }
              if (v23 == v43)
              {
                uint64_t v44 = 1;
                goto LABEL_82;
              }
              if (v22 == v43)
              {
                uint64_t v44 = 2;
                goto LABEL_82;
              }
              if (v21 == v43)
              {
                uint64_t v44 = 3;
                goto LABEL_82;
              }
              int v45 = v18 + 5;
              if (v20 == v43)
              {
                uint64_t v44 = 4;
                goto LABEL_82;
              }
LABEL_83:
              if (v45 - v18 != 5) {
                goto LABEL_44;
              }
              ++v40;
              if (!--v41) {
                goto LABEL_68;
              }
            }
            uint64_t v44 = 0;
LABEL_82:
            int v45 = &v18[v44];
            goto LABEL_83;
          }
LABEL_86:
          if (*((unsigned char *)a2 + 38))
          {
            if (v25 < 0x47) {
              goto LABEL_98;
            }
            goto LABEL_88;
          }
          if (v25 < 0x47) {
            goto LABEL_98;
          }
LABEL_94:
          if (v24[35])
          {
            int v46 = *(int *)((char *)v7 + v24[35]);
            if ((v46 & 0xA0A88) != 0) {
              goto LABEL_44;
            }
            int v47 = 32;
            goto LABEL_97;
          }
LABEL_98:
          unint64_t v48 = vcvtpd_u64_f64(sub_F1C098(a1, a2, (void *)(a4 + 1336)));
          if (((uint64_t)(*(void *)(a4 + 1128) - *(void *)(a4 + 1120)) >> 4) - 1 >= v48) {
            unint64_t v49 = v48;
          }
          else {
            unint64_t v49 = ((uint64_t)(*(void *)(a4 + 1128) - *(void *)(a4 + 1120)) >> 4) - 1;
          }
          unsigned int v26 = (uint64_t *)sub_ECDD38((void *)(a4 + 1120), v49);
          goto LABEL_45;
        }
      }
      else
      {
        if (v25 < 0xB || !v24[5] || (*((unsigned char *)v7 + v24[5]) & 1) == 0) {
          goto LABEL_44;
        }
        if (v25 >= 0x4D)
        {
          if (v24[38] && (*(int *)((char *)v7 + v24[38]) & 1) != 0) {
            goto LABEL_44;
          }
          goto LABEL_42;
        }
      }
      if (v25 < 0x2F) {
        goto LABEL_47;
      }
      goto LABEL_42;
    }
LABEL_24:
    unsigned int v18 = operator new(5uLL);
    int v19 = 2;
    unsigned char *v18 = 2;
    int v20 = 6;
    int v21 = 4;
    int v22 = 9;
    int v23 = 11;
    goto LABEL_25;
  }
  if (v14 >= 0x39 && v13[28] && (*(int *)((char *)v8 + v13[28]) & 0x4000) != 0) {
    goto LABEL_14;
  }
LABEL_19:
  if ((sub_F1BF60(a2, (int **)a3) & 1) == 0)
  {
    unsigned int v7 = *a2;
    uint64_t v15 = (unsigned __int16 *)((char *)*a2 - **a2);
    if (*v15 < 0xBu) {
      goto LABEL_24;
    }
    goto LABEL_22;
  }
  return *(void *)sub_ECDD38((void *)(a4 + 1120), 0x190uLL);
}

void sub_F1BF24(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_F1BF38(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_F1BF4C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_F1BF60(int **a1, int **a2)
{
  int v2 = a1[1];
  if (v2)
  {
    unsigned int v3 = (unsigned __int16 *)((char *)v2 - *v2);
    if (*v3 >= 0x11u)
    {
      uint64_t v4 = v3[8];
      if (v4)
      {
        if ((*(_WORD *)((unsigned char *)v2 + v4) & 4) != 0) {
          return 0;
        }
      }
    }
  }
  long long v5 = (char *)*a1;
  unsigned int v6 = (unsigned __int16 *)((char *)*a1 - **a1);
  unsigned int v7 = *v6;
  if (v7 < 0xB) {
    return 0;
  }
  if (!v6[5]) {
    return 0;
  }
  int v8 = *(_DWORD *)&v5[v6[5]];
  if ((v8 & 0x10003) != 3) {
    return 0;
  }
  if (*((unsigned char *)a1 + 38))
  {
    if (v7 >= 0x47)
    {
      unsigned int v9 = v6[35];
      if (v9)
      {
        if ((*(_DWORD *)&v5[v9] & 0x1000) != 0) {
          return 0;
        }
      }
    }
  }
  else if (v7 >= 0x47)
  {
    unsigned int v10 = v6[35];
    if (v10)
    {
      if ((*(_DWORD *)&v5[v10] & 0x800) != 0) {
        return 0;
      }
    }
  }
  unsigned int v11 = (unsigned __int16 *)((char *)*a2 - **a2);
  unsigned int v12 = *v11;
  if (*((unsigned char *)a2 + 38))
  {
    if (v12 < 0x39) {
      return 0;
    }
    unsigned int v13 = v11[28];
    if (!v13) {
      return 0;
    }
    int v14 = 2;
  }
  else
  {
    if (v12 < 0x39) {
      return 0;
    }
    unsigned int v13 = v11[28];
    if (!v13) {
      return 0;
    }
    int v14 = 1;
  }
  if ((*(int *)((char *)*a2 + v13) & v14) == 0) {
    return 0;
  }
  if ((v8 & 0x8000) != 0) {
    return sub_F1CA7C(a2) ^ 1;
  }
  else {
    return sub_F1CAE0(a2) ^ 1;
  }
}

double sub_F1C098(uint64_t a1, int **a2, void *a3)
{
  unsigned int v6 = *a2;
  unsigned int v7 = (unsigned __int16 *)((char *)*a2 - **a2);
  unsigned int v8 = *v7;
  double result = 0.0;
  if (*((unsigned char *)a2 + 38))
  {
    if (v8 < 0xB) {
      return result;
    }
    unsigned int v10 = v7[5];
    if (!v10 || (*(int *)((char *)v6 + v10) & 2) == 0) {
      return result;
    }
LABEL_9:
    double v12 = sub_3E6EAC(a2);
    unsigned int v13 = (double *)a3[2];
    double v14 = *v13;
    if (v12 <= *v13) {
      goto LABEL_21;
    }
    uint64_t v15 = (double *)a3[3];
    if ((char *)v15 - (char *)v13 >= 16)
    {
      if ((char *)v15 - (char *)v13 != 16)
      {
        unint64_t v16 = (unint64_t)((char *)v15 - (char *)v13) >> 4;
        do
        {
          unint64_t v17 = (4 * v16) & 0xFFFFFFFFFFFFFFF0;
          _X13 = (char *)v13 + v17;
          __asm { PRFM            #0, [X13] }
          unint64_t v24 = &v13[2 * (v16 >> 1)];
          _X12 = (char *)v24 + v17;
          __asm { PRFM            #0, [X12] }
          if (*v24 >= v12) {
            unint64_t v27 = 0;
          }
          else {
            unint64_t v27 = v16 >> 1;
          }
          v13 += 2 * v27;
          v16 -= v16 >> 1;
        }
        while ((uint64_t)v16 > 1);
        double v14 = *v13;
      }
      v13 += 2 * (v14 < v12);
    }
    if (v13 == v15)
    {
      double v29 = *(v15 - 1);
      unsigned int v30 = sub_2E35CC(a2);
      uint64_t v31 = (unsigned int *)a3[5];
      unsigned int v32 = *v31;
      if (v30 > *v31) {
        goto LABEL_27;
      }
    }
    else
    {
      double v28 = *(v13 - 2);
      if (v28 == *v13)
      {
LABEL_21:
        double v29 = v13[1];
        unsigned int v30 = sub_2E35CC(a2);
        uint64_t v31 = (unsigned int *)a3[5];
        unsigned int v32 = *v31;
        if (v30 <= *v31) {
          goto LABEL_38;
        }
LABEL_27:
        uint64_t v33 = (int *)a3[6];
        if ((char *)v33 - (char *)v31 >= 16)
        {
          if ((char *)v33 - (char *)v31 != 16)
          {
            unint64_t v34 = (unint64_t)((char *)v33 - (char *)v31) >> 4;
            do
            {
              unint64_t v35 = (4 * v34) & 0xFFFFFFFFFFFFFFF0;
              _X13 = (uint64_t)v31 + v35;
              __asm { PRFM            #0, [X13] }
              uint64_t v38 = &v31[4 * (v34 >> 1)];
              _X12 = (char *)v38 + v35;
              __asm { PRFM            #0, [X12] }
              if (*v38 >= v30) {
                unint64_t v41 = 0;
              }
              else {
                unint64_t v41 = v34 >> 1;
              }
              v31 += 4 * v41;
              v34 -= v34 >> 1;
            }
            while ((uint64_t)v34 > 1);
            unsigned int v32 = *v31;
          }
          v31 += 4 * (v32 < v30);
        }
        if (v31 == (unsigned int *)v33)
        {
          double v43 = *((double *)v33 - 1);
        }
        else
        {
          int v42 = *(v31 - 4);
          if (*v31 == v42) {
            goto LABEL_38;
          }
          double v43 = *((double *)v31 - 1)
              + (double)(v30 - v42) / (double)(*v31 - v42) * (*((double *)v31 + 1) - *((double *)v31 - 1));
        }
LABEL_41:
        uint64_t v44 = *(void *)(a1 + 8);
        if (*((unsigned char *)a2 + 38)) {
          int v45 = a2 + 3;
        }
        else {
          int v45 = a2 + 2;
        }
        int v46 = *v45;
        if (!v46
          || (int v47 = (unsigned __int16 *)((char *)v46 - *v46), *v47 < 7u)
          || (uint64_t v48 = v47[3]) == 0
          || (unsigned __int16 v49 = *(_WORD *)((char *)v46 + v48), v49 == 0xFFFF))
        {
          unsigned __int16 v49 = 0;
        }
        uint64_t v50 = (uint64_t)a2[4];
        unsigned int v51 = (unsigned __int16)sub_3E73C4(v44, v50);
        unsigned int v52 = (unsigned __int16)sub_3E73C4(v44, v50 ^ 0x1000000000000);
        if (v52 <= v51) {
          unsigned int v52 = v51;
        }
        if (v52)
        {
          double v53 = (double)v49 / (double)v52;
          unsigned int v54 = (double *)a3[8];
          double v55 = *v54;
          if (v53 <= *v54) {
            goto LABEL_66;
          }
        }
        else
        {
          double v53 = 0.0;
          unsigned int v54 = (double *)a3[8];
          double v55 = *v54;
          if (*v54 >= 0.0) {
            goto LABEL_66;
          }
        }
        uint64_t v56 = (double *)a3[9];
        if ((char *)v56 - (char *)v54 >= 16)
        {
          if ((char *)v56 - (char *)v54 != 16)
          {
            unint64_t v57 = (unint64_t)((char *)v56 - (char *)v54) >> 4;
            do
            {
              unint64_t v58 = (4 * v57) & 0xFFFFFFFFFFFFFFF0;
              _X13 = (char *)v54 + v58;
              __asm { PRFM            #0, [X13] }
              unsigned int v61 = &v54[2 * (v57 >> 1)];
              _X12 = (char *)v61 + v58;
              __asm { PRFM            #0, [X12] }
              if (*v61 >= v53) {
                unint64_t v64 = 0;
              }
              else {
                unint64_t v64 = v57 >> 1;
              }
              v54 += 2 * v64;
              v57 -= v57 >> 1;
            }
            while ((uint64_t)v57 > 1);
            double v55 = *v54;
          }
          v54 += 2 * (v55 < v53);
        }
        if (v54 == v56)
        {
          double v66 = *(v56 - 1);
          return v29 * v43 * v66;
        }
        double v65 = *(v54 - 2);
        if (v65 != *v54)
        {
          double v66 = *(v54 - 1) + (v53 - v65) / (*v54 - v65) * (v54[1] - *(v54 - 1));
          return v29 * v43 * v66;
        }
LABEL_66:
        double v66 = v54[1];
        return v29 * v43 * v66;
      }
      double v29 = *(v13 - 1) + (v12 - v28) / (*v13 - v28) * (v13[1] - *(v13 - 1));
      unsigned int v30 = sub_2E35CC(a2);
      uint64_t v31 = (unsigned int *)a3[5];
      unsigned int v32 = *v31;
      if (v30 > *v31) {
        goto LABEL_27;
      }
    }
LABEL_38:
    double v43 = *((double *)v31 + 1);
    goto LABEL_41;
  }
  if (v8 >= 0xB)
  {
    unsigned int v11 = v7[5];
    if (v11)
    {
      if (*(int *)((char *)v6 + v11)) {
        goto LABEL_9;
      }
    }
  }
  return result;
}

uint64_t sub_F1C474(uint64_t a1, int **a2, int **a3, uint64_t a4)
{
  if (*(unsigned char *)(a4 + 1075))
  {
    unsigned int v8 = *a2;
    unsigned int v9 = *a3;
    unsigned int v10 = (unsigned __int16 *)((char *)*a2 - **a2);
    unsigned int v11 = *v10;
    if (*((unsigned char *)a2 + 38))
    {
      if (v11 >= 0x39)
      {
        unsigned int v12 = v10[28];
        if (v12)
        {
          if ((*(int *)((char *)v8 + v12) & 0x2000) != 0) {
            goto LABEL_19;
          }
        }
      }
    }
    else if (v11 >= 0x39)
    {
      unsigned int v13 = v10[28];
      if (v13)
      {
        if ((*(int *)((char *)v8 + v13) & 0x4000) != 0) {
          goto LABEL_19;
        }
      }
    }
    double v14 = (unsigned __int16 *)((char *)v9 - *v9);
    unsigned int v15 = *v14;
    if (*((unsigned char *)a3 + 38))
    {
      if (v15 >= 0x39 && v14[28] && (*(int *)((char *)v9 + v14[28]) & 0x4000) != 0) {
        goto LABEL_19;
      }
    }
    else if (v15 >= 0x39 && v14[28] && (*(int *)((char *)v9 + v14[28]) & 0x2000) != 0)
    {
      goto LABEL_19;
    }
    if (sub_F1BF60(a3, a2)) {
      return *(void *)sub_ECDD38((void *)(a4 + 1144), 0xFAuLL);
    }
  }
LABEL_19:
  unint64_t v16 = a3[1];
  if (v16)
  {
    unint64_t v17 = (unsigned __int16 *)((char *)v16 - *v16);
    if (*v17 >= 0x11u)
    {
      uint64_t v18 = v17[8];
      if (v18)
      {
        if ((*(_WORD *)((unsigned char *)v16 + v18) & 4) != 0)
        {
          int v19 = *a3;
          int v24 = 1;
          unsigned int v25 = (unsigned __int16 *)((char *)*a3 - **a3);
          unsigned int v26 = *v25;
          BOOL v27 = v26 >= 0x47;
          if (!*((unsigned char *)a3 + 38)) {
            goto LABEL_26;
          }
          goto LABEL_32;
        }
      }
    }
  }
  int v19 = *a3;
  uint64_t v20 = **a3;
  uint64_t v21 = -v20;
  int v22 = (unsigned __int16 *)((char *)*a3 - v20);
  if (*v22 < 0xBu || (uint64_t v23 = v22[5]) == 0)
  {
    int v24 = 0;
    unsigned int v25 = (unsigned __int16 *)((char *)v19 + v21);
    unsigned int v26 = *(unsigned __int16 *)((char *)v19 + v21);
    BOOL v27 = v26 >= 0x47;
    if (!*((unsigned char *)a3 + 38)) {
      goto LABEL_26;
    }
LABEL_32:
    if (!v27 || !v25[35] || (*(int *)((char *)v19 + v25[35]) & 0x1000) == 0) {
      goto LABEL_39;
    }
LABEL_36:
    double v28 = *a2;
    double v29 = (unsigned __int16 *)((char *)*a2 - **a2);
    unsigned int v30 = *v29;
    if (*((unsigned char *)a2 + 38))
    {
      if (v30 < 0x39)
      {
        if (v30 <= 0xA) {
          return *(void *)sub_ECDD38((void *)(a4 + 1144), 0);
        }
        int v33 = 0;
        goto LABEL_122;
      }
      BOOL v31 = 1;
      goto LABEL_78;
    }
    if (v30 <= 0x38)
    {
      if (v30 <= 0xA) {
        return *(void *)sub_ECDD38((void *)(a4 + 1144), 0);
      }
      int v33 = 0;
      uint64_t v41 = v29[5];
      if (!v29[5]) {
        return *(void *)sub_ECDD38((void *)(a4 + 1144), 0);
      }
      goto LABEL_117;
    }
    BOOL v31 = 1;
    goto LABEL_98;
  }
  int v24 = *((unsigned char *)v19 + v23 + 2) & 1;
  unsigned int v25 = (unsigned __int16 *)((char *)v19 + v21);
  unsigned int v26 = *(unsigned __int16 *)((char *)v19 + v21);
  BOOL v27 = v26 >= 0x47;
  if (*((unsigned char *)a3 + 38)) {
    goto LABEL_32;
  }
LABEL_26:
  if (v27 && v25[35] && (*(int *)((char *)v19 + v25[35]) & 0x800) != 0) {
    goto LABEL_36;
  }
LABEL_39:
  double v28 = *a2;
  double v29 = (unsigned __int16 *)((char *)*a2 - **a2);
  unsigned int v32 = *v29;
  if (*((unsigned char *)a2 + 38))
  {
    if (v32 >= 0x39 && v29[28] && (*(int *)((char *)v28 + v29[28]) & 0x27) == 0x24)
    {
      BOOL v31 = 1;
      unsigned int v30 = *v29;
      if (v30 <= 0x38) {
        goto LABEL_60;
      }
LABEL_78:
      uint64_t v36 = v29[28];
      if (!v29[28])
      {
        int v34 = 0;
        BOOL v35 = 0;
        int v33 = 1;
        if (v31) {
          goto LABEL_114;
        }
        goto LABEL_106;
      }
      int v34 = 0;
      if ((*((unsigned char *)v28 + v36 + 1) & 0x20) == 0)
      {
        int v37 = 2048;
        goto LABEL_101;
      }
LABEL_103:
      int v33 = 1;
      BOOL v35 = 1;
      if (v31) {
        goto LABEL_114;
      }
      goto LABEL_106;
    }
  }
  else if (v32 >= 0x39 && v29[28] && (*(int *)((char *)v28 + v29[28]) & 0x27) == 0x24)
  {
    BOOL v31 = 1;
    unsigned int v30 = *v29;
    if (v30 > 0x38) {
      goto LABEL_98;
    }
    goto LABEL_95;
  }
  if (v26 < 0xB || !v25[5] || (*((unsigned char *)v19 + v25[5] + 1) & 0x80) == 0)
  {
    if (*((unsigned char *)a2 + 38))
    {
      if (v32 >= 0x39 && v29[28])
      {
        BOOL v31 = (*(int *)((char *)v28 + v29[28]) & 3) == 0 && (*(int *)((char *)v28 + v29[28]) & 4) != 0;
        unsigned int v30 = *v29;
        if (v30 > 0x38) {
          goto LABEL_78;
        }
        goto LABEL_60;
      }
      goto LABEL_77;
    }
    if (v32 >= 0x39 && v29[28])
    {
      BOOL v31 = (*(int *)((char *)v28 + v29[28]) & 3) == 0 && (*(int *)((char *)v28 + v29[28]) & 0x20) != 0;
      unsigned int v30 = *v29;
      if (v30 > 0x38) {
        goto LABEL_98;
      }
LABEL_95:
      int v33 = 0;
      BOOL v35 = 0;
      int v34 = 1;
      if (v31) {
        goto LABEL_114;
      }
      goto LABEL_106;
    }
LABEL_97:
    BOOL v31 = 0;
    unsigned int v30 = *v29;
    if (v30 > 0x38) {
      goto LABEL_98;
    }
    goto LABEL_95;
  }
  if (*((unsigned char *)a2 + 38))
  {
    if (v32 >= 0x39 && v29[28])
    {
      BOOL v31 = (*(int *)((char *)v28 + v29[28]) & 3) == 0 && (*(int *)((char *)v28 + v29[28]) & 0x20) != 0;
      unsigned int v30 = *v29;
      if (v30 > 0x38) {
        goto LABEL_78;
      }
LABEL_60:
      int v33 = 0;
      int v34 = 0;
      BOOL v35 = 0;
      if (v31) {
        goto LABEL_114;
      }
      goto LABEL_106;
    }
LABEL_77:
    BOOL v31 = 0;
    unsigned int v30 = *v29;
    if (v30 <= 0x38) {
      goto LABEL_60;
    }
    goto LABEL_78;
  }
  if (v32 < 0x39 || !v29[28]) {
    goto LABEL_97;
  }
  BOOL v31 = (*(int *)((char *)v28 + v29[28]) & 3) == 0 && (*(int *)((char *)v28 + v29[28]) & 4) != 0;
  unsigned int v30 = *v29;
  if (v30 <= 0x38) {
    goto LABEL_95;
  }
LABEL_98:
  uint64_t v36 = v29[28];
  if (v29[28])
  {
    int v34 = 1;
    if ((*((unsigned char *)v28 + v36 + 1) & 0x40) == 0)
    {
      int v37 = 4096;
LABEL_101:
      BOOL v35 = (*(int *)((char *)v28 + v36) & v37) != 0;
      int v33 = 1;
      if (v31) {
        goto LABEL_114;
      }
      goto LABEL_106;
    }
    goto LABEL_103;
  }
  BOOL v35 = 0;
  int v33 = 1;
  int v34 = 1;
  if (!v31)
  {
LABEL_106:
    if (!*(unsigned char *)(a4 + 1074)) {
      goto LABEL_114;
    }
    if (v26 < 0xB) {
      goto LABEL_114;
    }
    uint64_t v38 = v25[5];
    if (!v38) {
      goto LABEL_114;
    }
    int v39 = *(int *)((char *)v19 + v38);
    if ((v39 & 1) == 0) {
      goto LABEL_114;
    }
    int v40 = (v39 & 2) != 0 ? v24 : 1;
    if ((v40 | v35)) {
      goto LABEL_114;
    }
    return *(void *)sub_ECDD38((void *)(a4 + 1144), 0xFAuLL);
  }
LABEL_114:
  if (v34)
  {
    if (v30 < 0xB) {
      return *(void *)sub_ECDD38((void *)(a4 + 1144), 0);
    }
    uint64_t v41 = v29[5];
    if (!v29[5]) {
      return *(void *)sub_ECDD38((void *)(a4 + 1144), 0);
    }
LABEL_117:
    if ((*((unsigned char *)v28 + v41) & 1) == 0) {
      return *(void *)sub_ECDD38((void *)(a4 + 1144), 0);
    }
    if (v30 < 0x4D)
    {
      int v43 = 1;
      if (v30 < 0x2F) {
        goto LABEL_138;
      }
      goto LABEL_136;
    }
    unsigned int v42 = v29[38];
    int v43 = 1;
    if (v29[38])
    {
      int v44 = 1;
      goto LABEL_127;
    }
    goto LABEL_136;
  }
  if (v30 < 0xB) {
    return *(void *)sub_ECDD38((void *)(a4 + 1144), 0);
  }
LABEL_122:
  if (!v29[5] || (*((unsigned char *)v28 + v29[5]) & 2) == 0) {
    return *(void *)sub_ECDD38((void *)(a4 + 1144), 0);
  }
  if (v30 <= 0x4C)
  {
    int v43 = 0;
    if (v30 < 0x2F) {
      goto LABEL_138;
    }
    goto LABEL_136;
  }
  int v43 = 0;
  unsigned int v42 = v29[38];
  if (v29[38])
  {
    int v44 = 2;
LABEL_127:
    if ((*(int *)((char *)v28 + v42) & v44) == 0) {
      goto LABEL_136;
    }
    return *(void *)sub_ECDD38((void *)(a4 + 1144), 0);
  }
LABEL_136:
  if (v29[23] && *((unsigned char *)v28 + v29[23]) == 14) {
    return *(void *)sub_ECDD38((void *)(a4 + 1144), 0);
  }
LABEL_138:
  if (v43)
  {
    if (!v33) {
      goto LABEL_150;
    }
    uint64_t v46 = v29[28];
    if (!v46) {
      goto LABEL_150;
    }
    int v47 = *(int *)((char *)v28 + v46);
    if ((v47 & 0x4000) == 0) {
      goto LABEL_150;
    }
    int v48 = 4096;
  }
  else
  {
    if (!v33) {
      goto LABEL_150;
    }
    uint64_t v49 = v29[28];
    if (!v49) {
      goto LABEL_150;
    }
    int v47 = *(int *)((char *)v28 + v49);
    if ((v47 & 0x2000) == 0) {
      goto LABEL_150;
    }
    int v48 = 2048;
  }
  if ((v48 & v47) == 0 && *(unsigned char *)(a4 + 1076)) {
    return *(void *)sub_ECDD38((void *)(a4 + 1144), 0);
  }
LABEL_150:
  unint64_t v50 = vcvtpd_u64_f64(sub_F1C098(a1, a2, (void *)(a4 + 1336)));
  if (((uint64_t)(*(void *)(a4 + 1152) - *(void *)(a4 + 1144)) >> 4) - 1 >= v50) {
    unint64_t v51 = v50;
  }
  else {
    unint64_t v51 = ((uint64_t)(*(void *)(a4 + 1152) - *(void *)(a4 + 1144)) >> 4) - 1;
  }
  return *(void *)sub_ECDD38((void *)(a4 + 1144), v51);
}

uint64_t sub_F1CA7C(int **a1)
{
  uint64_t v1 = (char *)*a1;
  int v2 = (unsigned __int16 *)((char *)*a1 - **a1);
  unsigned int v3 = *v2;
  if (*((unsigned char *)a1 + 38))
  {
    if (v3 >= 0x39)
    {
      uint64_t v4 = v2[28];
      if (v4)
      {
        unsigned int v5 = *(_DWORD *)&v1[v4];
        if ((v5 & 3) == 0) {
          return (v5 >> 5) & 1;
        }
      }
    }
    return 0;
  }
  if (v3 < 0x39) {
    return 0;
  }
  uint64_t v7 = v2[28];
  if (!v7) {
    return 0;
  }
  unsigned int v8 = *(_DWORD *)&v1[v7];
  if ((v8 & 3) != 0) {
    return 0;
  }
  return (v8 >> 2) & 1;
}

uint64_t sub_F1CAE0(int **a1)
{
  uint64_t v1 = (char *)*a1;
  int v2 = (unsigned __int16 *)((char *)*a1 - **a1);
  unsigned int v3 = *v2;
  if (*((unsigned char *)a1 + 38))
  {
    if (v3 >= 0x39)
    {
      uint64_t v4 = v2[28];
      if (v4)
      {
        unsigned int v5 = *(_DWORD *)&v1[v4];
        if ((v5 & 3) == 0) {
          return (v5 >> 2) & 1;
        }
      }
    }
    return 0;
  }
  if (v3 < 0x39) {
    return 0;
  }
  uint64_t v7 = v2[28];
  if (!v7) {
    return 0;
  }
  unsigned int v8 = *(_DWORD *)&v1[v7];
  if ((v8 & 3) != 0) {
    return 0;
  }
  return (v8 >> 5) & 1;
}

unint64_t sub_F1CB44(uint64_t *a1, int **a2, uint64_t a3)
{
  if (!*(unsigned char *)(a3 + 1448) || (*((unsigned char *)a2 + 84) & 4) != 0) {
    return 0;
  }
  if (!*(unsigned char *)(a3 + 1450)) {
    goto LABEL_27;
  }
  uint64_t v4 = *a2;
  unsigned int v5 = (unsigned __int16 *)((char *)*a2 - **a2);
  unsigned int v6 = *v5;
  if (*((unsigned char *)a2 + 38))
  {
    if (v6 < 0x47) {
      return 0;
    }
    unsigned int v7 = v5[35];
    if (!v7 || (*(int *)((char *)v4 + v7) & 2) == 0) {
      return 0;
    }
  }
  else
  {
    if (v6 < 0x47) {
      return 0;
    }
    unsigned int v8 = v5[35];
    if (!v8 || (*(int *)((char *)v4 + v8) & 1) == 0) {
      return 0;
    }
  }
  unsigned int v9 = a2[5];
  unsigned int v10 = (unsigned __int16 *)((char *)v9 - *v9);
  unsigned int v11 = *v10;
  if (*((unsigned char *)a2 + 78))
  {
    if (v11 < 0x47) {
      return 0;
    }
    unsigned int v12 = v10[35];
    if (!v12) {
      return 0;
    }
    int v13 = 2;
  }
  else
  {
    if (v11 < 0x47) {
      return 0;
    }
    unsigned int v12 = v10[35];
    if (!v12) {
      return 0;
    }
    int v13 = 1;
  }
  if ((*(int *)((char *)v9 + v12) & v13) != 0)
  {
LABEL_27:
    if (!*(unsigned char *)(a3 + 1449)
      || ((double v14 = a2[1]) == 0
       || (unsigned int v15 = (unsigned __int16 *)((char *)v14 - *v14), *v15 < 0x11u)
       || (uint64_t v16 = v15[8]) == 0
       || (*(_WORD *)((unsigned char *)v14 + v16) & 4) == 0)
      && ((unint64_t v17 = (unsigned __int16 *)((char *)*a2 - **a2), *v17 < 0xBu)
       || (uint64_t v18 = v17[5]) == 0
       || (*((unsigned char *)*a2 + v18 + 2) & 1) == 0))
    {
      sub_F1ABB4(a1, a2, (uint64_t)(a2 + 5), a3, 0);
      uint64_t v21 = v19;
      return sub_ECDF48((double *)&v21, (double **)(a3 + 1456));
    }
  }
  return 0;
}

uint64_t sub_F1CCD4(uint64_t *a1, int **a2, int **a3, uint64_t a4)
{
  uint64_t v4 = *a2;
  unsigned int v5 = (unsigned __int16 *)((char *)*a2 - **a2);
  unsigned int v6 = *v5;
  if (v6 < 0xB || !v5[5] || (*((unsigned char *)v4 + v5[5]) & 3) == 0) {
    return 0;
  }
  if (*((unsigned char *)a2 + 38))
  {
    if (v6 < 0x47) {
      goto LABEL_14;
    }
    uint64_t v11 = v5[35];
    if (!v11) {
      goto LABEL_14;
    }
    if (*((unsigned char *)v4 + v11 + 1)) {
      return 0;
    }
    int v12 = 4096;
  }
  else
  {
    if (v6 < 0x47) {
      goto LABEL_14;
    }
    uint64_t v11 = v5[35];
    if (!v11) {
      goto LABEL_14;
    }
    if ((*((unsigned char *)v4 + v11) & 0x80) != 0) {
      return 0;
    }
    int v12 = 2048;
  }
  if ((*(int *)((char *)v4 + v11) & v12) != 0) {
    return 0;
  }
LABEL_14:
  int v13 = *a3;
  double v14 = (unsigned __int16 *)((char *)*a3 - **a3);
  unsigned int v15 = *v14;
  if (*((unsigned char *)a3 + 38))
  {
    if (v15 < 0x47) {
      goto LABEL_24;
    }
    uint64_t v16 = v14[35];
    if (!v16) {
      goto LABEL_24;
    }
    if ((*((unsigned char *)v13 + v16 + 1) & 1) == 0)
    {
      int v17 = 4096;
      goto LABEL_23;
    }
    return 0;
  }
  if (v15 < 0x47) {
    goto LABEL_24;
  }
  uint64_t v16 = v14[35];
  if (!v16) {
    goto LABEL_24;
  }
  if ((*((unsigned char *)v13 + v16) & 0x80) != 0) {
    return 0;
  }
  int v17 = 2048;
LABEL_23:
  if ((*(int *)((char *)v13 + v16) & v17) != 0) {
    return 0;
  }
LABEL_24:
  if (*(unsigned char *)(a4 + 4) && (sub_F1CEA4(a2) || sub_F1CEA4(a3))) {
    return 0;
  }
  sub_657AC4(*a1, (uint64_t)a2, (uint64_t)v22);
  if (v23)
  {
    if (v22[0] && v22[1] && sub_69BA5C(v22)) {
      return 0;
    }
  }
  uint64_t v19 = (unsigned __int16 *)((char *)*a2 - **a2);
  if (*v19 >= 9u && (uint64_t v20 = v19[4]) != 0) {
    uint64_t v21 = *(unsigned int *)((char *)*a2 + v20);
  }
  else {
    uint64_t v21 = 0;
  }
  return sub_45E400(*a1, (uint64_t)a2[4], *(void *)(a4 + 920) + v21, 0) ^ 1;
}

BOOL sub_F1CEA4(int **a1)
{
  uint64_t v1 = (char *)*a1;
  int v2 = (unsigned __int16 *)((char *)*a1 - **a1);
  unsigned int v3 = *v2;
  if (*((unsigned char *)a1 + 38))
  {
    if (v3 >= 0x47)
    {
      uint64_t v4 = v2[35];
      if (v4) {
        return (v1[v4 + 1] & 0x11) != 0 || (*(_DWORD *)&v1[v4] & 0x400) != 0;
      }
    }
    return 0;
  }
  if (v3 < 0x47) {
    return 0;
  }
  uint64_t v6 = v2[35];
  if (!v6) {
    return 0;
  }
  return (*(_WORD *)&v1[v6] & 0x880) != 0 || (*(_DWORD *)&v1[v6] & 0x200) != 0;
}

BOOL sub_F1CF38(uint64_t *a1, int **a2, unsigned char *a3)
{
  if (!*a3) {
    return 0;
  }
  unsigned int v3 = (unsigned __int16 *)((char *)*a2 - **a2);
  if (*v3 < 0x2Fu) {
    return 0;
  }
  uint64_t v4 = v3[23];
  if (!v4 || *((unsigned char *)*a2 + v4) != 44) {
    return 0;
  }
  uint64_t v5 = *a1;
  unint64_t v6 = *((unsigned int *)a2 + 8) | ((unint64_t)*((unsigned __int16 *)a2 + 18) << 32);
  unsigned int v10 = 0;
  uint64_t v11 = 0;
  unsigned int v9 = 0;
  int v12 = &v9;
  sub_2E719C(v5, v6, 8, (uint64_t)&v12);
  BOOL v7 = v9 != v10;
  if (v9)
  {
    unsigned int v10 = v9;
    operator delete(v9);
  }
  return v7;
}

void sub_F1CFF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F1D00C(uint64_t *a1, char **a2, int **a3, uint64_t a4)
{
  if (!*(unsigned char *)(a4 + 2)) {
    goto LABEL_5;
  }
  if (!sub_2E79EC(*a1, (uint64_t)a2[4], (uint64_t)a3[4])) {
    return 1;
  }
  if (!*(unsigned char *)(a4 + 2))
  {
LABEL_5:
    unsigned int v8 = *a2;
    uint64_t v10 = *(int *)*a2;
    uint64_t v11 = &(*a2)[-v10];
    if (*(unsigned __int16 *)v11 >= 0x1Fu && (uint64_t v12 = *((unsigned __int16 *)v11 + 15)) != 0) {
      int v13 = *(_DWORD *)&v8[v12];
    }
    else {
      int v13 = -1;
    }
    uint64_t v9 = -v10;
    double v14 = (unsigned __int16 *)((char *)*a3 - **a3);
    if (*v14 >= 0x1Fu && (uint64_t v15 = v14[15]) != 0)
    {
      if (v13 == *(int *)((char *)*a3 + v15)) {
        goto LABEL_14;
      }
    }
    else if (v13 == -1)
    {
      goto LABEL_14;
    }
    return 1;
  }
  unsigned int v8 = *a2;
  uint64_t v9 = -(uint64_t)*(int *)*a2;
LABEL_14:
  if (*(unsigned __int16 *)&v8[v9] < 0x2Fu) {
    return 0;
  }
  if (!*(_WORD *)&v8[v9 + 46]) {
    return 0;
  }
  if (v8[*(unsigned __int16 *)&v8[v9 + 46]] != 44) {
    return 0;
  }
  int v17 = (unsigned __int16 *)((char *)*a3 - **a3);
  if (*v17 < 0x2Fu) {
    return 0;
  }
  uint64_t v18 = v17[23];
  if (!v18) {
    return 0;
  }
  if (*((unsigned char *)*a3 + v18) != 44 || *(unsigned char *)(a4 + 1) == 0) {
    return 0;
  }
  uint64_t v21 = *a1;
  unint64_t v22 = *((unsigned int *)a2 + 8) | ((unint64_t)*((unsigned __int16 *)a2 + 18) << 32);
  unsigned int v68 = 0;
  uint64_t v69 = 0;
  unsigned int v67 = 0;
  long long __p = &v67;
  sub_2E719C(v21, v22, 8, (uint64_t)&__p);
  uint64_t v23 = *a1;
  unint64_t v24 = *((unsigned int *)a3 + 8) | ((unint64_t)*((unsigned __int16 *)a3 + 18) << 32);
  double v65 = 0;
  uint64_t v66 = 0;
  long long __p = 0;
  v70[0] = (int *)&__p;
  sub_2E719C(v23, v24, 8, (uint64_t)v70);
  unsigned int v25 = v67;
  unsigned int v26 = v68;
  int v59 = v68;
  while (1)
  {
    if (v25 == v26)
    {
      uint64_t v16 = 0;
      goto LABEL_77;
    }
    unsigned int v60 = v25;
    uint64_t v27 = *v25;
    uint64_t v28 = *a1;
    unint64_t v29 = *v25 & 0xFFFFFFFFFFFFLL;
    unsigned int v61 = (int *)sub_2D5D58(*a1, v29);
    if (*(unsigned char *)(v28 + 7772)) {
      sub_2DB8E0(v28 + 3896, v27, 0);
    }
    sub_2E5C38(v28, v29, 1);
    unsigned int v30 = (uint64_t *)__p;
    unsigned int v63 = v65;
    if (__p != v65) {
      break;
    }
LABEL_26:
    unsigned int v26 = v59;
    unsigned int v25 = v60 + 3;
  }
  unint64_t v62 = v29 | ((unint64_t)((v27 & 0xFF000000000000) != 0) << 48);
  while (1)
  {
    uint64_t v31 = *v30;
    uint64_t v32 = *a1;
    unint64_t v33 = *v30 & 0xFFFFFFFFFFFFLL;
    int v34 = (int *)sub_2D5D58(*a1, v33);
    if (!*(unsigned char *)(v32 + 7772)) {
      goto LABEL_45;
    }
    int v71 = 0;
    int v72 = v31;
    v70[0] = &v71;
    v70[1] = &v72;
    unint64_t v35 = *(void *)(v32 + 7752) + 1;
    *(void *)(v32 + 7752) = v35;
    uint64_t v36 = *(void *)(v32 + 3896);
    if (!v36) {
      goto LABEL_74;
    }
    uint64_t v37 = v32 + 3912;
    if (*(_DWORD *)(v32 + 4680) == v31)
    {
      unsigned int v38 = 32;
      goto LABEL_44;
    }
    if (*(_DWORD *)(v32 + 4704) == v31)
    {
      unsigned int v38 = 33;
      goto LABEL_44;
    }
    if (*(_DWORD *)(v32 + 4728) == v31)
    {
      unsigned int v38 = 34;
      goto LABEL_44;
    }
    if (*(_DWORD *)(v32 + 4752) != v31) {
      break;
    }
    unsigned int v38 = 35;
LABEL_44:
    ++*(void *)(v32 + 7760);
    uint64_t v39 = v37 + 24 * v38;
    *(void *)(v39 + 8) = v35;
    if (!*(void *)(v39 + 16)) {
      goto LABEL_74;
    }
LABEL_45:
    if (*(unsigned char *)(v32 + 7773))
    {
      uint64_t v40 = v32 + 3896;
      uint64_t v41 = sub_2E5E08(v40, v31, 1);
      if (v41)
      {
        unsigned int v42 = &v41[-*(int *)v41];
        if (*(unsigned __int16 *)v42 >= 0xBu)
        {
          if (*((_WORD *)v42 + 5))
          {
            int v43 = &v41[*((unsigned __int16 *)v42 + 5) + *(unsigned int *)&v41[*((unsigned __int16 *)v42 + 5)]];
            if (*(_DWORD *)v43 > HIDWORD(v33))
            {
              unsigned int v44 = *(_DWORD *)&v43[8 * HIDWORD(v33) + 4];
              if (v44) {
                sub_2E5F98(v40, v44, 1);
              }
            }
          }
        }
      }
    }
    if (*(unsigned char *)(a4 + 2))
    {
      if ((sub_2E79EC(*a1, v62, v33 | ((unint64_t)((v31 & 0xFF000000000000) != 0) << 48)) & 1) == 0) {
        goto LABEL_75;
      }
    }
    else
    {
      int v45 = (unsigned __int16 *)((char *)v61 - *v61);
      if (*v45 >= 0x1Fu && (uint64_t v46 = v45[15]) != 0)
      {
        int v47 = *(int *)((char *)v61 + v46);
        int v48 = (unsigned __int16 *)((char *)v34 - *v34);
        if (*v48 < 0x1Fu) {
          goto LABEL_32;
        }
      }
      else
      {
        int v47 = -1;
        int v48 = (unsigned __int16 *)((char *)v34 - *v34);
        if (*v48 < 0x1Fu) {
          goto LABEL_32;
        }
      }
      uint64_t v49 = v48[15];
      if (!v49)
      {
LABEL_32:
        if (v47 != -1) {
          goto LABEL_75;
        }
        goto LABEL_33;
      }
      if (v47 != *(int *)((char *)v34 + v49)) {
        goto LABEL_75;
      }
    }
LABEL_33:
    v30 += 3;
    if (v30 == v63) {
      goto LABEL_26;
    }
  }
  unint64_t v55 = *(void *)(v32 + 4688);
  unint64_t v56 = *(void *)(v32 + 4712);
  unint64_t v57 = *(void *)(v32 + 4760);
  unint64_t v58 = *(void *)(v32 + 4736);
  uint64_t v50 = sub_2AB884(v36, 8, v31, 1);
  unint64_t v51 = v55;
  if (v55 >= v35) {
    unint64_t v51 = v35;
  }
  BOOL v52 = v56 >= v51;
  if (v56 < v51) {
    unint64_t v51 = v56;
  }
  unsigned int v53 = 32 * (v55 < v35);
  if (!v52) {
    unsigned int v53 = 33;
  }
  if (v58 < v51)
  {
    unsigned int v53 = 34;
    unint64_t v51 = v58;
  }
  if (v57 < v51) {
    unsigned int v53 = 35;
  }
  uint64_t v54 = v37 + 24 * v53;
  *(_DWORD *)uint64_t v54 = v72;
  *(void *)(v54 + 8) = *(void *)(v32 + 7752);
  *(void *)(v54 + 16) = v50;
  if (v50) {
    goto LABEL_45;
  }
LABEL_74:
  sub_2DBA70(v70);
  __break(1u);
LABEL_75:
  uint64_t v16 = 1;
LABEL_77:
  if (__p)
  {
    double v65 = (uint64_t *)__p;
    operator delete(__p);
  }
  if (v67)
  {
    unsigned int v68 = v67;
    operator delete(v67);
  }
  return v16;
}

void sub_F1D4F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  if (a21) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

void sub_F1D538(uint64_t *a1, int **a2, unsigned __int8 *a3, uint64_t a4)
{
  unsigned int v8 = *a2;
  uint64_t v9 = (unsigned __int16 *)((char *)*a2 - **a2);
  unsigned int v10 = *v9;
  if (*((unsigned char *)a2 + 38))
  {
    if (v10 < 0xB) {
      goto LABEL_11;
    }
    unsigned int v11 = v9[5];
    if (!v11 || (*(int *)((char *)v8 + v11) & 2) == 0) {
      goto LABEL_11;
    }
LABEL_9:
    unsigned int v13 = sub_2E35CC(a2);
    uint64_t v14 = *((void *)a3 + 40);
    uint64_t v15 = *((void *)a3 + 41);
    if (v14 == v15) {
      goto LABEL_17;
    }
    goto LABEL_12;
  }
  if (v10 >= 0xB)
  {
    unsigned int v12 = v9[5];
    if (v12)
    {
      if (*(int *)((char *)v8 + v12)) {
        goto LABEL_9;
      }
    }
  }
LABEL_11:
  unsigned int v13 = sub_3E70B4(a2);
  uint64_t v14 = *((void *)a3 + 40);
  uint64_t v15 = *((void *)a3 + 41);
  if (v14 == v15) {
    goto LABEL_17;
  }
LABEL_12:
  unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v14) >> 3) - 1;
  if (v16 >= v13) {
    unint64_t v17 = v13;
  }
  else {
    unint64_t v17 = v16;
  }
  uint64_t v18 = sub_ECB82C((void *)a3 + 40, v17);
  int v19 = *(_DWORD *)(a4 + 888);
  uint64_t v20 = *(void *)(v18 + 16);
  *(_OWORD *)(a4 + 864) = *(_OWORD *)v18;
  *(void *)(a4 + 880) = v20;
  if (v19 != 1) {
    *(_DWORD *)(a4 + 888) = 1;
  }
LABEL_17:
  double v21 = sub_F1D6A8(a1, a2, (uint64_t)a3);
  if (*(_DWORD *)(a4 + 920) != 1) {
    *(_DWORD *)(a4 + 920) = 1;
  }
  *(double *)(a4 + 896) = v21;
  *(void *)(a4 + 904) = v22;
  *(void *)(a4 + 912) = v23;
  double v24 = sub_F1D858(a1, a2, (double **)a3 + 46, *a3);
  if (*(_DWORD *)(a4 + 952) != 1) {
    *(_DWORD *)(a4 + 952) = 1;
  }
  *(double *)(a4 + 928) = v24;
  *(void *)(a4 + 936) = v25;
  *(void *)(a4 + 944) = v26;
}

double sub_F1D6A8(uint64_t *a1, int **a2, uint64_t a3)
{
  if (*(unsigned char *)a3
    && (uint64_t v4 = (unsigned __int16 *)((char *)*a2 - **a2), *v4 >= 0x2Fu)
    && (uint64_t v5 = v4[23]) != 0
    && *((unsigned char *)*a2 + v5) == 44)
  {
    uint64_t v6 = *a1;
    unint64_t v7 = *((unsigned int *)a2 + 8) | ((unint64_t)*((unsigned __int16 *)a2 + 18) << 32);
    v22[0] = a1;
    v22[1] = &v23;
    double v23 = 0.0;
    char v25 = 8;
    unsigned int v8 = (int *)sub_2D5D58(v6, v7);
    uint64_t v9 = v8;
    unsigned int v10 = 0;
    v24[0] = (unsigned __int8 *)&v25;
    v24[1] = (unsigned __int8 *)v22;
    unsigned int v11 = (unsigned __int16 *)((char *)v8 - *v8);
    if (*v11 >= 0x5Fu)
    {
      uint64_t v12 = v11[47];
      if (v12) {
        unsigned int v10 = (unsigned int *)((char *)v8 + v12 + *(unsigned int *)((char *)v8 + v12));
      }
      else {
        unsigned int v10 = 0;
      }
    }
    sub_F1F3EC(v6, v10, v24);
    int v19 = (unsigned __int16 *)((char *)v9 - *v9);
    if (*v19 >= 0x61u && (uint64_t v20 = v19[48]) != 0) {
      double v21 = (unsigned int *)((char *)v9 + v20 + *(unsigned int *)((char *)v9 + v20));
    }
    else {
      double v21 = 0;
    }
    sub_F1F3EC(v6, v21, v24);
    double v13 = v23;
  }
  else
  {
    double v13 = sub_3E6EAC(a2);
  }
  if ((*(uint64_t *)&v13 <= -1 || ((*(void *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
    && (unint64_t)(*(void *)&v13 - 1) >= 0xFFFFFFFFFFFFFLL
    && (*(void *)&v13 & 0x7FFFFFFFFFFFFFFFLL) != 0)
  {
    return 1.0;
  }
  double v17 = 1.0;
  if (v13 > 0.0)
  {
    LODWORD(v24[0]) = vcvtad_u64_f64(v13);
    return sub_F1E3F4((unsigned int *)v24, (char **)(a3 + 344));
  }
  return v17;
}

double sub_F1D858(uint64_t *a1, int **a2, double **a3, int a4)
{
  if (a4
    && (uint64_t v6 = (unsigned __int16 *)((char *)*a2 - **a2), *v6 >= 0x2Fu)
    && (uint64_t v7 = v6[23]) != 0
    && *((unsigned char *)*a2 + v7) == 44)
  {
    uint64_t v8 = *a1;
    unint64_t v9 = *((unsigned int *)a2 + 8) | ((unint64_t)*((unsigned __int16 *)a2 + 18) << 32);
    *(void *)&v17[0] = a1;
    *(void *)&v17[1] = &v18;
    double v18 = 0.0;
    sub_F1F034(v8, v9, 8, (unsigned __int8 *)v17);
    double v10 = v18;
  }
  else
  {
    uint64_t v11 = a1[1];
    unsigned __int16 v12 = sub_2E5B50(a2);
    uint64_t v13 = (uint64_t)a2[4];
    unsigned int v14 = (unsigned __int16)sub_3E73C4(v11, v13);
    unsigned int v15 = (unsigned __int16)sub_3E73C4(v11, v13 ^ 0x1000000000000);
    if (v15 <= v14) {
      unsigned int v15 = v14;
    }
    if (v15) {
      double v10 = (double)v12 / (double)v15;
    }
    else {
      double v10 = 0.0;
    }
  }
  v17[0] = v10;
  return sub_F1DAF8(v17, a3);
}

double sub_F1D960(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0.0;
  }
  uint64_t v4 = sub_290DEC(a1 + 3896, a2, 1);
  if (!v4) {
    return 0.0;
  }
  uint64_t v5 = &v4[-*(int *)v4];
  if (*(unsigned __int16 *)v5 < 0xDu) {
    return 0.0;
  }
  uint64_t v6 = *((unsigned __int16 *)v5 + 6);
  if (!v6) {
    return 0.0;
  }
  float v7 = *(float *)&v4[v6];
  if (v7 == 0.0) {
    return 0.0;
  }
  unint64_t v9 = (int *)sub_2D5D58(a1, a2 & 0xFFFFFFFFFFFFLL);
  double v10 = (unsigned __int16 *)((char *)v9 - *v9);
  float v11 = 0.0;
  if (*v10 >= 0x6Du)
  {
    uint64_t v12 = v10[54];
    if (v10[54])
    {
      uint64_t v13 = *(unsigned int *)((char *)v9 + v12);
      unsigned int v14 = (int *)((char *)v9 + v12 + v13);
      unsigned int v15 = v14 + 1;
      uint64_t v16 = 4 * *v14;
      if (*v14)
      {
        unint64_t v17 = 0;
        double v18 = (char *)v9 + v12 + v13;
        while (1)
        {
          uint64_t v19 = v14[v17 / 4 + 1];
          uint64_t v20 = &v18[v17 + v19 - *(int *)((char *)&v14[v17 / 4 + 1] + v19)];
          if (*((unsigned __int16 *)v20 + 2) < 5u) {
            break;
          }
          uint64_t v21 = *((unsigned __int16 *)v20 + 4);
          if (!v21 || v18[v17 + 4 + v19 + v21] == 4) {
            break;
          }
          v17 += 4;
          if (v16 == v17) {
            return (float)(v11 / v7);
          }
        }
        uint64_t v22 = &v14[v17 / 4 + 1];
      }
      else
      {
        uint64_t v22 = v14 + 1;
      }
      if (v22 != &v15[(unint64_t)v16 / 4])
      {
        double v23 = (int *)((char *)v22 + *v22);
        double v24 = (unsigned __int16 *)((char *)v23 - *v23);
        unsigned int v25 = *v24;
        if ((a2 & 0xFF000000000000) != 0)
        {
          if (v25 < 0xD) {
            return (float)(v11 / v7);
          }
          unsigned int v26 = v24[6];
          if (!v26) {
            return (float)(v11 / v7);
          }
        }
        else
        {
          if (v25 < 0xB) {
            return (float)(v11 / v7);
          }
          unsigned int v26 = v24[5];
          if (!v26) {
            return (float)(v11 / v7);
          }
        }
        float v11 = *(float *)((char *)v23 + v26);
      }
    }
  }
  return (float)(v11 / v7);
}

double sub_F1DAF8(double *a1, double **a2)
{
  double v2 = *a1;
  unsigned int v3 = *a2;
  double v4 = **a2;
  if (*a1 > v4)
  {
    uint64_t v5 = a2[1];
    if ((char *)v5 - (char *)v3 >= 32)
    {
      if ((char *)v5 - (char *)v3 != 32)
      {
        unint64_t v6 = (unint64_t)((char *)v5 - (char *)v3) >> 5;
        do
        {
          unint64_t v7 = (8 * v6) & 0xFFFFFFFFFFFFFFE0;
          _X13 = (char *)v3 + v7;
          __asm { PRFM            #0, [X13] }
          unsigned int v14 = &v3[4 * (v6 >> 1)];
          _X12 = (char *)v14 + v7;
          __asm { PRFM            #0, [X12] }
          if (*v14 >= v2) {
            unint64_t v17 = 0;
          }
          else {
            unint64_t v17 = v6 >> 1;
          }
          v3 += 4 * v17;
          v6 -= v6 >> 1;
        }
        while ((uint64_t)v6 > 1);
        double v4 = *v3;
      }
      v3 += 4 * (v4 < v2);
    }
    if (v3 == v5)
    {
      long long v19 = *(_OWORD *)(v5 - 3);
      return *(double *)&v19;
    }
    double v18 = *(v3 - 4);
    if (v18 != *v3)
    {
      *(void *)&long long v19 = *(_OWORD *)&vaddq_f64(*(float64x2_t *)(v3 - 3), vmulq_n_f64(vsubq_f64(*(float64x2_t *)(v3 + 1), *(float64x2_t *)(v3 - 3)), (v2 - v18) / (*v3 - v18)));
      return *(double *)&v19;
    }
  }
  long long v19 = *(_OWORD *)(v3 + 1);
  return *(double *)&v19;
}

double sub_F1DBE4(int **a1)
{
  uint64_t v1 = *a1;
  double v2 = (unsigned __int16 *)((char *)*a1 - **a1);
  unsigned int v3 = *v2;
  unint64_t v4 = 0;
  if (!*((unsigned char *)a1 + 38))
  {
    if (v3 >= 0x57)
    {
      if (v2[43])
      {
        uint64_t v1 = (int *)((char *)v1 + v2[43] + (unint64_t)*(unsigned int *)((char *)v1 + v2[43]));
        uint64_t v8 = (unsigned __int16 *)((char *)v1 - *v1);
        if (*v8 < 5u) {
          return 0.0 / 65535.0;
        }
        unsigned int v6 = v8[2];
        if (!v6) {
          return 0.0 / 65535.0;
        }
      }
      else
      {
        if (v3 < 0x7B) {
          return 0.0 / 65535.0;
        }
        unsigned int v6 = v2[61];
        if (!v6) {
          return 0.0 / 65535.0;
        }
      }
      goto LABEL_17;
    }
    return 0.0 / 65535.0;
  }
  if (v3 < 0x57) {
    return 0.0 / 65535.0;
  }
  if (v2[43])
  {
    uint64_t v1 = (int *)((char *)v1 + v2[43] + (unint64_t)*(unsigned int *)((char *)v1 + v2[43]));
    uint64_t v5 = (unsigned __int16 *)((char *)v1 - *v1);
    if (*v5 < 7u) {
      return 0.0 / 65535.0;
    }
    unsigned int v6 = v5[3];
    if (!v6) {
      return 0.0 / 65535.0;
    }
  }
  else
  {
    if (v3 < 0x7D) {
      return 0.0 / 65535.0;
    }
    unsigned int v6 = v2[62];
    if (!v6) {
      return 0.0 / 65535.0;
    }
  }
LABEL_17:
  LOWORD(v4) = *(_WORD *)((char *)v1 + v6);
  return ((double)v4 + (double)v4) / 65535.0;
}

double sub_F1DCC8(int **a1)
{
  uint64_t v1 = *a1;
  double v2 = (unsigned __int16 *)((char *)*a1 - **a1);
  unsigned int v3 = *v2;
  unint64_t v4 = 0;
  if (!*((unsigned char *)a1 + 38))
  {
    if (v3 >= 0x57)
    {
      if (v2[43])
      {
        uint64_t v1 = (int *)((char *)v1 + v2[43] + (unint64_t)*(unsigned int *)((char *)v1 + v2[43]));
        uint64_t v8 = (unsigned __int16 *)((char *)v1 - *v1);
        if (*v8 < 7u) {
          return 0.0 / 65535.0;
        }
        unsigned int v6 = v8[3];
        if (!v6) {
          return 0.0 / 65535.0;
        }
      }
      else
      {
        if (v3 < 0x7D) {
          return 0.0 / 65535.0;
        }
        unsigned int v6 = v2[62];
        if (!v6) {
          return 0.0 / 65535.0;
        }
      }
      goto LABEL_17;
    }
    return 0.0 / 65535.0;
  }
  if (v3 < 0x57) {
    return 0.0 / 65535.0;
  }
  if (v2[43])
  {
    uint64_t v1 = (int *)((char *)v1 + v2[43] + (unint64_t)*(unsigned int *)((char *)v1 + v2[43]));
    uint64_t v5 = (unsigned __int16 *)((char *)v1 - *v1);
    if (*v5 < 5u) {
      return 0.0 / 65535.0;
    }
    unsigned int v6 = v5[2];
    if (!v6) {
      return 0.0 / 65535.0;
    }
  }
  else
  {
    if (v3 < 0x7B) {
      return 0.0 / 65535.0;
    }
    unsigned int v6 = v2[61];
    if (!v6) {
      return 0.0 / 65535.0;
    }
  }
LABEL_17:
  LOWORD(v4) = *(_WORD *)((char *)v1 + v6);
  return ((double)v4 + (double)v4) / 65535.0;
}

uint64_t *sub_F1DDAC(uint64_t *result, int **a2, int **a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = (unsigned __int16 *)((char *)*a2 - **a2);
  if (*v7 >= 0x2Fu && (uint64_t v8 = v7[23]) != 0)
  {
    unsigned int v9 = *((unsigned __int8 *)*a2 + v8);
    double v10 = *a3;
    float v11 = (unsigned __int16 *)((char *)*a3 - **a3);
    if (*v11 < 0x2Fu) {
      goto LABEL_9;
    }
  }
  else
  {
    unsigned int v9 = 32;
    double v10 = *a3;
    float v11 = (unsigned __int16 *)((char *)*a3 - **a3);
    if (*v11 < 0x2Fu) {
      goto LABEL_9;
    }
  }
  uint64_t v12 = v11[23];
  if (v12)
  {
    unsigned int v13 = *((unsigned __int8 *)v10 + v12);
    if (v9 == v13) {
      return result;
    }
    goto LABEL_10;
  }
LABEL_9:
  unsigned int v13 = 32;
  if (v9 == 32) {
    return result;
  }
LABEL_10:
  unsigned int v14 = *(unsigned __int8 **)(a4 + 872);
  unsigned int v15 = *(unsigned __int8 **)(a4 + 880);
  if (v15 - v14 >= 24)
  {
    if (v15 - v14 != 24)
    {
      int64_t v16 = (v15 - v14) / 0x18uLL;
      do
      {
        while (1)
        {
          unint64_t v17 = (unint64_t)v16 >> 1;
          uint64_t v18 = 24 * ((unint64_t)v16 >> 2);
          _X15 = &v14[v18];
          __asm { PRFM            #0, [X15] }
          double v24 = &v14[24 * ((unint64_t)v16 >> 1)];
          _X16 = &v24[v18];
          __asm { PRFM            #0, [X16] }
          unsigned int v27 = *v24;
          if (v27 >= v9 && (v27 > v9 || v13 <= v24[1])) {
            break;
          }
          v14 += 24 * v17;
          v16 -= v17;
          if (v16 <= 1) {
            goto LABEL_18;
          }
        }
        v16 -= v17;
      }
      while (v16 > 1);
    }
LABEL_18:
    unsigned int v28 = *v14;
    if (v28 >= v9) {
      BOOL v29 = v28 <= v9 && v14[1] < v13;
    }
    else {
      BOOL v29 = 1;
    }
    v14 += 24 * v29;
  }
  if (v14 == v15 || (*v14 == v9 ? (_ZF = v14[1] == v13) : (_ZF = 0), !_ZF))
  {
    uint64_t v31 = 0;
    unint64_t v32 = 0;
    if (!*(_DWORD *)(a5 + 312)) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  uint64_t v31 = *((void *)v14 + 2);
  unint64_t v32 = *((void *)v14 + 1) & 0xFFFFFFFF00000000 | *((void *)v14 + 1);
  if (*(_DWORD *)(a5 + 312)) {
LABEL_30:
  }
    *(_DWORD *)(a5 + 312) = 0;
LABEL_31:
  *(void *)(a5 + 288) = v32;
  *(void *)(a5 + 296) = v31;
  if (v13 == 9)
  {
    int v34 = *(_DWORD *)(a5 + 216);
    *(_OWORD *)(a5 + 192) = *(_OWORD *)(a4 + 1136);
    if (v34) {
      *(_DWORD *)(a5 + 216) = 0;
    }
  }
  else if (v13 == 14)
  {
    double result = (uint64_t *)sub_F1CCD4(result, a2, a3, a4);
    if (result)
    {
      int v33 = *(_DWORD *)(a5 + 632);
      *(_OWORD *)(a5 + 608) = *(_OWORD *)(a4 + 904);
      if (v33) {
        *(_DWORD *)(a5 + 632) = 0;
      }
    }
  }
  return result;
}

unint64_t sub_F1DFD8(uint64_t *a1, int **a2, double **a3, int a4)
{
  if (a4
    && (unsigned int v6 = (unsigned __int16 *)((char *)*a2 - **a2), *v6 >= 0x2Fu)
    && (uint64_t v7 = v6[23]) != 0
    && *((unsigned char *)*a2 + v7) == 44)
  {
    uint64_t v8 = *a1;
    unint64_t v9 = *((unsigned int *)a2 + 8) | ((unint64_t)*((unsigned __int16 *)a2 + 18) << 32);
    *(void *)&v17[0] = a1;
    *(void *)&v17[1] = &v18;
    double v18 = 0.0;
    sub_F1F034(v8, v9, 8, (unsigned __int8 *)v17);
    double v10 = v18;
  }
  else
  {
    uint64_t v11 = a1[1];
    unsigned __int16 v12 = sub_2E5B50(a2);
    uint64_t v13 = (uint64_t)a2[4];
    unsigned int v14 = (unsigned __int16)sub_3E73C4(v11, v13);
    unsigned int v15 = (unsigned __int16)sub_3E73C4(v11, v13 ^ 0x1000000000000);
    if (v15 <= v14) {
      unsigned int v15 = v14;
    }
    if (v15) {
      double v10 = (double)v12 / (double)v15;
    }
    else {
      double v10 = 0.0;
    }
  }
  v17[0] = v10;
  return sub_ECDF48(v17, a3);
}

uint64_t sub_F1E0E0(uint64_t *a1, int **a2, uint64_t a3)
{
  unsigned int v3 = (char *)*a2;
  unint64_t v4 = (unsigned __int16 *)((char *)*a2 - **a2);
  unsigned int v5 = *v4;
  if (v5 < 0x2F || !v4[23] || v3[v4[23]] != 44) {
    return 0;
  }
  if (!*(unsigned char *)(a3 + 3)) {
    goto LABEL_13;
  }
  if (*((unsigned char *)a2 + 38))
  {
    if (v5 < 0x47) {
      return 0;
    }
    unsigned int v8 = v4[35];
    if (!v8) {
      return 0;
    }
    int v9 = 2;
  }
  else
  {
    if (v5 < 0x47) {
      return 0;
    }
    unsigned int v8 = v4[35];
    if (!v8) {
      return 0;
    }
    int v9 = 1;
  }
  if ((*(_DWORD *)&v3[v8] & v9) == 0) {
    return 0;
  }
LABEL_13:
  uint64_t v10 = *a1;
  unint64_t v11 = *((unsigned int *)a2 + 8) | ((unint64_t)*((unsigned __int16 *)a2 + 18) << 32);
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  long long __p = 0;
  v42[0] = &__p;
  sub_2E719C(v10, v11, 8, (uint64_t)v42);
  unsigned __int16 v12 = __p;
  uint64_t v13 = v40;
  if (__p == v40)
  {
    uint64_t v14 = 0;
    if (__p) {
      goto LABEL_65;
    }
    return v14;
  }
  while (1)
  {
    uint64_t v16 = *v12;
    uint64_t v17 = *a1;
    uint64_t v18 = *v12 & 0xFFFFFFFFFFFFLL;
    sub_2D5D58(*a1, v18);
    if (*(unsigned char *)(v17 + 7772)) {
      sub_2DB8E0(v17 + 3896, v16, 0);
    }
    sub_2E5C38(v17, v18, 1);
    sub_2E3BB0(*a1, (uint64_t)a2, v18, (uint64_t)v42);
    if (v43) {
      BOOL v19 = v42[0] == 0;
    }
    else {
      BOOL v19 = 1;
    }
    BOOL v20 = v19 || v42[1] == 0;
    char v21 = !v20;
    if (v20) {
      goto LABEL_39;
    }
    uint64_t v22 = (unsigned __int16 *)(v42[0] - *(int *)v42[0]);
    unsigned int v23 = *v22;
    if (!v44) {
      break;
    }
    if (v23 >= 0x47)
    {
      unsigned int v24 = v22[35];
      if (v24)
      {
        if ((*(_DWORD *)(v42[0] + v24) & 2) != 0) {
          goto LABEL_64;
        }
      }
    }
LABEL_39:
    uint64_t v26 = (uint64_t)*a2;
    unsigned int v27 = (unsigned __int16 *)((char *)*a2 - **a2);
    unsigned int v28 = *v27;
    if (*((unsigned char *)a2 + 38))
    {
      if (v28 < 0x47) {
        goto LABEL_18;
      }
      uint64_t v29 = v27[35];
      if (!v29) {
        goto LABEL_18;
      }
      int v30 = *(_DWORD *)(v26 + v29);
      if ((v30 & 0x141512) != 2) {
        goto LABEL_18;
      }
      char v31 = v21 ^ 1;
      if ((v30 & 0x40) != 0) {
        char v31 = 1;
      }
      if (v31) {
        goto LABEL_18;
      }
    }
    else
    {
      if (v28 < 0x47) {
        goto LABEL_18;
      }
      uint64_t v32 = v27[35];
      if (!v32) {
        goto LABEL_18;
      }
      int v33 = *(_DWORD *)(v26 + v32);
      if ((v33 & 0xA0A89) != 1) {
        goto LABEL_18;
      }
      char v34 = v21 ^ 1;
      if ((v33 & 0x20) != 0) {
        char v34 = 1;
      }
      if (v34) {
        goto LABEL_18;
      }
    }
    unint64_t v35 = (unsigned __int16 *)(v42[0] - *(int *)v42[0]);
    unsigned int v36 = *v35;
    if (v44 == 1)
    {
      if (v36 < 0x47) {
        goto LABEL_18;
      }
      unsigned int v37 = v35[35];
      if (!v37) {
        goto LABEL_18;
      }
      int v38 = 1;
    }
    else
    {
      if (v36 < 0x47) {
        goto LABEL_18;
      }
      unsigned int v37 = v35[35];
      if (!v37) {
        goto LABEL_18;
      }
      int v38 = 2;
    }
    if ((*(_DWORD *)(v42[0] + v37) & v38) != 0) {
      goto LABEL_64;
    }
LABEL_18:
    v12 += 3;
    if (v12 == v13)
    {
      uint64_t v14 = 0;
      unsigned __int16 v12 = __p;
      if (__p) {
        goto LABEL_65;
      }
      return v14;
    }
  }
  if (v23 < 0x47) {
    goto LABEL_39;
  }
  unsigned int v25 = v22[35];
  if (!v25 || (*(_DWORD *)(v42[0] + v25) & 1) == 0) {
    goto LABEL_39;
  }
LABEL_64:
  uint64_t v14 = 1;
  unsigned __int16 v12 = __p;
  if (!__p) {
    return v14;
  }
LABEL_65:
  uint64_t v40 = v12;
  operator delete(v12);
  return v14;
}

void sub_F1E3D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_F1E3F4(unsigned int *a1, char **a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = *a2;
  unsigned int v4 = *(_DWORD *)*a2;
  if (*a1 > v4)
  {
    unsigned int v5 = a2[1];
    if (v5 - v3 >= 32)
    {
      if (v5 - v3 != 32)
      {
        unint64_t v6 = (unint64_t)(v5 - v3) >> 5;
        do
        {
          unint64_t v7 = (8 * v6) & 0xFFFFFFFFFFFFFFE0;
          _X14 = &v3[v7];
          __asm { PRFM            #0, [X14] }
          uint64_t v14 = &v3[32 * (v6 >> 1)];
          _X13 = &v14[v7];
          __asm { PRFM            #0, [X13] }
          if (*(_DWORD *)v14 >= v2) {
            unint64_t v17 = 0;
          }
          else {
            unint64_t v17 = v6 >> 1;
          }
          v3 += 32 * v17;
          v6 -= v6 >> 1;
        }
        while ((uint64_t)v6 > 1);
        unsigned int v4 = *(_DWORD *)v3;
      }
      v3 += 32 * (v4 < v2);
    }
    if (v3 == v5)
    {
      long long v19 = *(_OWORD *)(v5 - 24);
      return *(double *)&v19;
    }
    int v18 = *((_DWORD *)v3 - 8);
    if (*(_DWORD *)v3 != v18)
    {
      *(void *)&long long v19 = *(_OWORD *)&vaddq_f64(*(float64x2_t *)(v3 - 24), vmulq_n_f64(vsubq_f64(*(float64x2_t *)(v3 + 8), *(float64x2_t *)(v3 - 24)), (double)(v2 - v18) / (double)(*(_DWORD *)v3 - v18)));
      return *(double *)&v19;
    }
  }
  long long v19 = *(_OWORD *)(v3 + 8);
  return *(double *)&v19;
}

uint64_t sub_F1E4E4(int **a1)
{
  unsigned int v2 = *a1;
  unsigned int v3 = (unsigned __int16 *)((char *)*a1 - **a1);
  unsigned int v4 = *v3;
  if (v4 < 0x2F || !v3[23] || *((unsigned char *)v2 + v3[23]) != 9)
  {
    unsigned int v5 = 2;
    int v6 = *((unsigned __int8 *)a1 + 38);
    if (!*((unsigned char *)a1 + 38)) {
      goto LABEL_5;
    }
LABEL_11:
    double v7 = 0.0;
    if (v4 < 0x57) {
      goto LABEL_22;
    }
    if (v3[43])
    {
      unsigned int v8 = (int *)((char *)v2 + v3[43] + *(unsigned int *)((char *)v2 + v3[43]));
      unint64_t v11 = (unsigned __int16 *)((char *)v8 - *v8);
      if (*v11 >= 7u)
      {
        unsigned int v10 = v11[3];
        if (v10) {
          goto LABEL_21;
        }
      }
    }
    else if (v4 >= 0x7D)
    {
      unsigned int v10 = v3[62];
      unsigned int v8 = *a1;
      if (v3[62]) {
        goto LABEL_21;
      }
    }
    goto LABEL_22;
  }
  unsigned int v5 = 6;
  int v6 = *((unsigned __int8 *)a1 + 38);
  if (*((unsigned char *)a1 + 38)) {
    goto LABEL_11;
  }
LABEL_5:
  double v7 = 0.0;
  if (v4 < 0x57) {
    goto LABEL_22;
  }
  if (v3[43])
  {
    unsigned int v8 = (int *)((char *)v2 + v3[43] + *(unsigned int *)((char *)v2 + v3[43]));
    int v9 = (unsigned __int16 *)((char *)v8 - *v8);
    if (*v9 < 5u) {
      goto LABEL_22;
    }
    unsigned int v10 = v9[2];
    if (!v10) {
      goto LABEL_22;
    }
LABEL_21:
    LOWORD(v7) = *(_WORD *)((char *)v8 + v10);
    double v7 = (double)*(unint64_t *)&v7 + (double)*(unint64_t *)&v7;
    goto LABEL_22;
  }
  if (v4 >= 0x7B)
  {
    unsigned int v10 = v3[61];
    unsigned int v8 = *a1;
    if (v3[61]) {
      goto LABEL_21;
    }
  }
LABEL_22:
  if (v7 / 65535.0 <= 0.0)
  {
    double v12 = 0.0;
    if (v6)
    {
      if (v4 < 0x57) {
        goto LABEL_40;
      }
      if (v3[43])
      {
        uint64_t v13 = (int *)((char *)v2 + v3[43] + *(unsigned int *)((char *)v2 + v3[43]));
        uint64_t v14 = (unsigned __int16 *)((char *)v13 - *v13);
        if (*v14 < 5u) {
          goto LABEL_40;
        }
        unsigned int v15 = v14[2];
        if (!v15) {
          goto LABEL_40;
        }
        goto LABEL_39;
      }
      if (v4 < 0x7B) {
        goto LABEL_40;
      }
      unsigned int v15 = v3[61];
    }
    else
    {
      if (v4 < 0x57) {
        goto LABEL_40;
      }
      if (v3[43])
      {
        uint64_t v13 = (int *)((char *)v2 + v3[43] + *(unsigned int *)((char *)v2 + v3[43]));
        uint64_t v16 = (unsigned __int16 *)((char *)v13 - *v13);
        if (*v16 < 7u || (unsigned int v15 = v16[3]) == 0)
        {
LABEL_40:
          if (v12 / 65535.0 <= 0.0) {
            goto LABEL_42;
          }
          goto LABEL_41;
        }
LABEL_39:
        LOWORD(v12) = *(_WORD *)((char *)v13 + v15);
        double v12 = (double)*(unint64_t *)&v12 + (double)*(unint64_t *)&v12;
        goto LABEL_40;
      }
      if (v4 < 0x7D) {
        goto LABEL_40;
      }
      unsigned int v15 = v3[62];
    }
    uint64_t v13 = *a1;
    if (!v15) {
      goto LABEL_40;
    }
    goto LABEL_39;
  }
LABEL_41:
  v5 |= 8u;
LABEL_42:
  if (v6)
  {
    if (v4 >= 0x47)
    {
      uint64_t v17 = v3[35];
      if (v17)
      {
        unsigned int v18 = *(int *)((char *)v2 + v17);
        if ((vmaxv_u16((uint16x4_t)vmovn_s32(vtstq_s32(vdupq_n_s32(v18), (int32x4_t)xmmword_20F0FD0))) & 1) != 0
          || (v18 & 0x1000) != 0
          || (*(int *)((char *)v2 + v17) & 0x400000) != 0)
        {
          goto LABEL_57;
        }
      }
    }
  }
  else if (v4 >= 0x47)
  {
    uint64_t v19 = v3[35];
    if (v19)
    {
      unsigned int v20 = *(int *)((char *)v2 + v19);
      if ((vmaxv_u16((uint16x4_t)vmovn_s32(vtstq_s32(vdupq_n_s32(v20), (int32x4_t)xmmword_20F0FE0))) & 1) != 0
        || (v20 & 0x800) != 0
        || (*(int *)((char *)v2 + v19) & 0x200000) != 0)
      {
        goto LABEL_57;
      }
    }
  }
  if (sub_F1B780(a1) || sub_F1B7E4(a1) || sub_F1B848(a1)) {
LABEL_57:
  }
    v5 |= 0x80u;
  char v21 = (unsigned __int16 *)((char *)*a1 - **a1);
  if (*v21 >= 0xBu)
  {
    uint64_t v22 = v21[5];
    if (v22)
    {
      unsigned int v23 = *(int *)((char *)*a1 + v22);
      unsigned int v5 = v5 & 0xFFFFFDFF | (((v23 >> 3) & 1) << 9);
      if ((v23 & 0x800) != 0)
      {
        if (*((unsigned char *)a1 + 38)) {
          int v24 = 2;
        }
        else {
          int v24 = 1;
        }
        if ((v24 & v23) != 0) {
          v5 |= 0x400u;
        }
      }
    }
  }
  return v5 | 1;
}

uint64_t sub_F1E7EC(int **a1)
{
  int v2 = sub_F1E4E4(a1);
  unsigned int v3 = a1[5];
  unsigned int v4 = (unsigned __int16 *)((char *)v3 - *v3);
  unsigned int v5 = *v4;
  if (v5 < 0x2F)
  {
    int v6 = 0;
    if (v5 < 0xB) {
      goto LABEL_10;
    }
    uint64_t v7 = v4[5];
    if (!v4[5]) {
      goto LABEL_10;
    }
  }
  else if (v4[23])
  {
    int v6 = 4 * (*((unsigned char *)v3 + v4[23]) == 9);
    uint64_t v7 = v4[5];
    if (!v4[5]) {
      goto LABEL_10;
    }
  }
  else
  {
    int v6 = 0;
    uint64_t v7 = v4[5];
    if (!v4[5]) {
      goto LABEL_10;
    }
  }
  if ((*((unsigned char *)v3 + v7) & 8) != 0) {
    v6 |= 0x200u;
  }
LABEL_10:
  unsigned int v8 = *a1;
  int v9 = (unsigned __int16 *)((char *)*a1 - **a1);
  unsigned int v10 = *v9;
  if (!*((unsigned char *)a1 + 38))
  {
    if (v10 < 0x47)
    {
      if (v10 <= 0x38) {
        goto LABEL_29;
      }
    }
    else if (v9[35])
    {
      unsigned int v11 = *(int *)((char *)v8 + v9[35]);
      if (v11) {
        goto LABEL_18;
      }
    }
    uint64_t v12 = v9[28];
    if (!v9[28]) {
      goto LABEL_30;
    }
    unsigned int v13 = *(int *)((char *)v8 + v12);
    if (v13) {
      goto LABEL_39;
    }
    goto LABEL_27;
  }
  if (v10 >= 0x47)
  {
    if (!v9[35]) {
      goto LABEL_21;
    }
    unsigned int v11 = *(int *)((char *)v8 + v9[35]);
    if ((v11 & 2) == 0) {
      goto LABEL_21;
    }
LABEL_18:
    LODWORD(v12) = (v11 >> 2) & 1;
    if (!*((unsigned char *)a1 + 78)) {
      goto LABEL_40;
    }
    goto LABEL_31;
  }
  if (v10 > 0x38)
  {
LABEL_21:
    uint64_t v12 = v9[28];
    if (!v9[28]) {
      goto LABEL_30;
    }
    unsigned int v13 = *(int *)((char *)v8 + v12);
    if ((v13 & 2) != 0) {
      goto LABEL_39;
    }
LABEL_27:
    if ((v13 & 7) == 4 || (v13 & 0x23) == 0x20)
    {
LABEL_39:
      LODWORD(v12) = (v13 >> 8) & 1;
      if (!*((unsigned char *)a1 + 78)) {
        goto LABEL_40;
      }
      goto LABEL_31;
    }
  }
LABEL_29:
  LODWORD(v12) = 0;
LABEL_30:
  if (!*((unsigned char *)a1 + 78))
  {
LABEL_40:
    if (v5 < 0x47)
    {
      if (v5 <= 0x38) {
        goto LABEL_49;
      }
    }
    else if (v4[35])
    {
      unsigned int v14 = *(int *)((char *)v3 + v4[35]);
      if (v14)
      {
LABEL_43:
        int v17 = (v14 >> 2) & 1;
        goto LABEL_51;
      }
    }
    uint64_t v18 = v4[28];
    if (v18)
    {
      unsigned int v16 = *(int *)((char *)v3 + v18);
      if (v16) {
        goto LABEL_50;
      }
      goto LABEL_47;
    }
LABEL_49:
    int v17 = 0;
    goto LABEL_51;
  }
LABEL_31:
  if (v5 < 0x47)
  {
    if (v5 <= 0x38) {
      goto LABEL_49;
    }
  }
  else if (v4[35])
  {
    unsigned int v14 = *(int *)((char *)v3 + v4[35]);
    if ((v14 & 2) != 0) {
      goto LABEL_43;
    }
  }
  uint64_t v15 = v4[28];
  if (!v15) {
    goto LABEL_49;
  }
  unsigned int v16 = *(int *)((char *)v3 + v15);
  if ((v16 & 2) != 0) {
    goto LABEL_50;
  }
LABEL_47:
  if ((v16 & 7) != 4 && (v16 & 0x23) != 0x20) {
    goto LABEL_49;
  }
LABEL_50:
  int v17 = (v16 >> 8) & 1;
LABEL_51:
  unsigned int v19 = v6 & 0xFFFFFFEF;
  if (v12 != v17) {
    int v20 = 16;
  }
  else {
    int v20 = 0;
  }
  int v21 = v20 | v19;
  if (!*((unsigned char *)a1 + 38))
  {
    if (v10 >= 0x4D)
    {
      uint64_t v25 = v9[38];
      if (v25)
      {
        if ((*((unsigned char *)v8 + v25) & 4) != 0)
        {
          unsigned int v23 = v21 | 0x20;
          if (*(int *)((char *)v8 + v25)) {
            goto LABEL_71;
          }
        }
        else
        {
          unsigned int v23 = v21 & 0xFFFFFFDF;
          if (*(int *)((char *)v8 + v25)) {
            goto LABEL_71;
          }
        }
LABEL_59:
        unsigned int v24 = v23 & 0xFFFFFFBF;
        if (sub_F1EB04(a1)) {
          return v24 | 0x100 | v2;
        }
        goto LABEL_72;
      }
    }
LABEL_66:
    unsigned int v24 = v21 & 0xFFFFFF9F;
    if (sub_F1EB04(a1)) {
      return v24 | 0x100 | v2;
    }
    goto LABEL_72;
  }
  if (v10 < 0x4D) {
    goto LABEL_66;
  }
  uint64_t v22 = v9[38];
  if (!v22) {
    goto LABEL_66;
  }
  if ((*((unsigned char *)v8 + v22) & 8) != 0)
  {
    unsigned int v23 = v21 | 0x20;
    if ((*(int *)((char *)v8 + v22) & 2) != 0) {
      goto LABEL_71;
    }
    goto LABEL_59;
  }
  unsigned int v23 = v21 & 0xFFFFFFDF;
  if ((*(int *)((char *)v8 + v22) & 2) == 0) {
    goto LABEL_59;
  }
LABEL_71:
  unsigned int v24 = v23 | 0x40;
  if (sub_F1EB04(a1)) {
    return v24 | 0x100 | v2;
  }
LABEL_72:
  if (sub_F1EC50(a1 + 5) || sub_F1ED9C(a1) || sub_F1EEE8(a1 + 5)) {
    return v24 | 0x100 | v2;
  }
  return v24 & 0xFFFFFEFF | v2;
}

BOOL sub_F1EB04(int **a1)
{
  uint64_t v1 = (char *)*a1;
  int v2 = (unsigned __int16 *)((char *)*a1 - **a1);
  unsigned int v3 = *v2;
  if (*((unsigned char *)a1 + 38))
  {
    if (v3 < 0x47)
    {
      if (v3 <= 0x38) {
        return 0;
      }
    }
    else if (v2[35] && (v1[v2[35]] & 2) != 0)
    {
      if (v3 >= 0x59)
      {
        unsigned int v4 = v2[44];
        if (v4) {
          return (*(_WORD *)&v1[v4] & 4) != 0;
        }
      }
      return 0;
    }
    if (v2[28])
    {
      if ((*(_DWORD *)&v1[v2[28]] & 2) == 0)
      {
        BOOL result = 0;
        BOOL v7 = (*(_DWORD *)&v1[v2[28]] & 0x23) == 0x20 || (*(_DWORD *)&v1[v2[28]] & 7) == 4;
        if (!v7 || v3 <= 0x50) {
          return result;
        }
LABEL_35:
        unsigned int v9 = v2[40];
        if (v9) {
          return (*(_WORD *)&v1[v9] & 4) != 0;
        }
        return 0;
      }
      if (v3 >= 0x51) {
        goto LABEL_35;
      }
    }
    return 0;
  }
  if (v3 < 0x47)
  {
    if (v3 <= 0x38) {
      return 0;
    }
  }
  else if (v2[35] && (v1[v2[35]] & 1) != 0)
  {
    if (v3 < 0x59) {
      return 0;
    }
    unsigned int v6 = v2[44];
    if (!v6) {
      return 0;
    }
    return (*(_WORD *)&v1[v6] & 0x40) != 0;
  }
  if (!v2[28]) {
    return 0;
  }
  if (*(_DWORD *)&v1[v2[28]])
  {
    if (v3 < 0x51) {
      return 0;
    }
    goto LABEL_38;
  }
  BOOL result = 0;
  BOOL v8 = (*(_DWORD *)&v1[v2[28]] & 0x23) == 0x20 || (*(_DWORD *)&v1[v2[28]] & 7) == 4;
  if (v8 && v3 > 0x50)
  {
LABEL_38:
    unsigned int v6 = v2[40];
    if (!v6) {
      return 0;
    }
    return (*(_WORD *)&v1[v6] & 0x40) != 0;
  }
  return result;
}

BOOL sub_F1EC50(int **a1)
{
  uint64_t v1 = (char *)*a1;
  int v2 = (unsigned __int16 *)((char *)*a1 - **a1);
  unsigned int v3 = *v2;
  if (*((unsigned char *)a1 + 38))
  {
    if (v3 < 0x47)
    {
      if (v3 <= 0x38) {
        return 0;
      }
    }
    else if (v2[35] && (v1[v2[35]] & 2) != 0)
    {
      if (v3 >= 0x59)
      {
        unsigned int v4 = v2[44];
        if (v4) {
          return (*(_WORD *)&v1[v4] & 0x10) != 0;
        }
      }
      return 0;
    }
    if (v2[28])
    {
      if ((*(_DWORD *)&v1[v2[28]] & 2) == 0)
      {
        BOOL result = 0;
        BOOL v7 = (*(_DWORD *)&v1[v2[28]] & 0x23) == 0x20 || (*(_DWORD *)&v1[v2[28]] & 7) == 4;
        if (!v7 || v3 <= 0x50) {
          return result;
        }
LABEL_35:
        unsigned int v9 = v2[40];
        if (v9) {
          return (*(_WORD *)&v1[v9] & 0x10) != 0;
        }
        return 0;
      }
      if (v3 >= 0x51) {
        goto LABEL_35;
      }
    }
    return 0;
  }
  if (v3 < 0x47)
  {
    if (v3 <= 0x38) {
      return 0;
    }
  }
  else if (v2[35] && (v1[v2[35]] & 1) != 0)
  {
    if (v3 < 0x59) {
      return 0;
    }
    unsigned int v6 = v2[44];
    if (!v6) {
      return 0;
    }
    return (*(_WORD *)&v1[v6] & 1) != 0;
  }
  if (!v2[28]) {
    return 0;
  }
  if (*(_DWORD *)&v1[v2[28]])
  {
    if (v3 < 0x51) {
      return 0;
    }
    goto LABEL_38;
  }
  BOOL result = 0;
  BOOL v8 = (*(_DWORD *)&v1[v2[28]] & 0x23) == 0x20 || (*(_DWORD *)&v1[v2[28]] & 7) == 4;
  if (v8 && v3 > 0x50)
  {
LABEL_38:
    unsigned int v6 = v2[40];
    if (!v6) {
      return 0;
    }
    return (*(_WORD *)&v1[v6] & 1) != 0;
  }
  return result;
}

BOOL sub_F1ED9C(int **a1)
{
  uint64_t v1 = (char *)*a1;
  int v2 = (unsigned __int16 *)((char *)*a1 - **a1);
  unsigned int v3 = *v2;
  if (*((unsigned char *)a1 + 38))
  {
    if (v3 < 0x47)
    {
      if (v3 <= 0x38) {
        return 0;
      }
    }
    else if (v2[35] && (v1[v2[35]] & 2) != 0)
    {
      if (v3 >= 0x59)
      {
        unsigned int v4 = v2[44];
        if (v4) {
          return (*(_WORD *)&v1[v4] & 8) != 0;
        }
      }
      return 0;
    }
    if (v2[28])
    {
      if ((*(_DWORD *)&v1[v2[28]] & 2) == 0)
      {
        BOOL result = 0;
        BOOL v7 = (*(_DWORD *)&v1[v2[28]] & 0x23) == 0x20 || (*(_DWORD *)&v1[v2[28]] & 7) == 4;
        if (!v7 || v3 <= 0x50) {
          return result;
        }
LABEL_35:
        unsigned int v9 = v2[40];
        if (v9) {
          return (*(_WORD *)&v1[v9] & 8) != 0;
        }
        return 0;
      }
      if (v3 >= 0x51) {
        goto LABEL_35;
      }
    }
    return 0;
  }
  if (v3 < 0x47)
  {
    if (v3 <= 0x38) {
      return 0;
    }
  }
  else if (v2[35] && (v1[v2[35]] & 1) != 0)
  {
    if (v3 < 0x59) {
      return 0;
    }
    unsigned int v6 = v2[44];
    if (!v6) {
      return 0;
    }
    return (*(_WORD *)&v1[v6] & 0x80) != 0;
  }
  if (!v2[28]) {
    return 0;
  }
  if (*(_DWORD *)&v1[v2[28]])
  {
    if (v3 < 0x51) {
      return 0;
    }
    goto LABEL_38;
  }
  BOOL result = 0;
  BOOL v8 = (*(_DWORD *)&v1[v2[28]] & 0x23) == 0x20 || (*(_DWORD *)&v1[v2[28]] & 7) == 4;
  if (v8 && v3 > 0x50)
  {
LABEL_38:
    unsigned int v6 = v2[40];
    if (!v6) {
      return 0;
    }
    return (*(_WORD *)&v1[v6] & 0x80) != 0;
  }
  return result;
}

BOOL sub_F1EEE8(int **a1)
{
  uint64_t v1 = (char *)*a1;
  int v2 = (unsigned __int16 *)((char *)*a1 - **a1);
  unsigned int v3 = *v2;
  if (*((unsigned char *)a1 + 38))
  {
    if (v3 < 0x47)
    {
      if (v3 <= 0x38) {
        return 0;
      }
    }
    else if (v2[35] && (v1[v2[35]] & 2) != 0)
    {
      if (v3 >= 0x59)
      {
        unsigned int v4 = v2[44];
        if (v4) {
          return (*(_WORD *)&v1[v4] & 0x20) != 0;
        }
      }
      return 0;
    }
    if (v2[28])
    {
      if ((*(_DWORD *)&v1[v2[28]] & 2) == 0)
      {
        BOOL result = 0;
        BOOL v7 = (*(_DWORD *)&v1[v2[28]] & 0x23) == 0x20 || (*(_DWORD *)&v1[v2[28]] & 7) == 4;
        if (!v7 || v3 <= 0x50) {
          return result;
        }
LABEL_35:
        unsigned int v9 = v2[40];
        if (v9) {
          return (*(_WORD *)&v1[v9] & 0x20) != 0;
        }
        return 0;
      }
      if (v3 >= 0x51) {
        goto LABEL_35;
      }
    }
    return 0;
  }
  if (v3 < 0x47)
  {
    if (v3 <= 0x38) {
      return 0;
    }
  }
  else if (v2[35] && (v1[v2[35]] & 1) != 0)
  {
    if (v3 < 0x59) {
      return 0;
    }
    unsigned int v6 = v2[44];
    if (!v6) {
      return 0;
    }
    return (*(_WORD *)&v1[v6] & 2) != 0;
  }
  if (!v2[28]) {
    return 0;
  }
  if (*(_DWORD *)&v1[v2[28]])
  {
    if (v3 < 0x51) {
      return 0;
    }
    goto LABEL_38;
  }
  BOOL result = 0;
  BOOL v8 = (*(_DWORD *)&v1[v2[28]] & 0x23) == 0x20 || (*(_DWORD *)&v1[v2[28]] & 7) == 4;
  if (v8 && v3 > 0x50)
  {
LABEL_38:
    unsigned int v6 = v2[40];
    if (!v6) {
      return 0;
    }
    return (*(_WORD *)&v1[v6] & 2) != 0;
  }
  return result;
}

int *sub_F1F034(uint64_t a1, unint64_t a2, char a3, unsigned __int8 *a4)
{
  char v19 = a3;
  BOOL result = (int *)sub_2D5D58(a1, a2);
  BOOL v7 = result;
  v18[0] = (unsigned __int8 *)&v19;
  v18[1] = a4;
  uint64_t v8 = *result;
  uint64_t v9 = -v8;
  unsigned int v10 = (unsigned __int16 *)((char *)result - v8);
  if (*v10 >= 0x5Fu)
  {
    uint64_t v11 = v10[47];
    if (v11)
    {
      uint64_t v12 = (unsigned int *)((char *)result + v11 + *(unsigned int *)((char *)result + v11));
      uint64_t v13 = *v12;
      int v21 = v12 + 1;
      int v20 = &v12[v13 + 1];
      BOOL result = (int *)sub_F1F11C(&v21, &v20, a1, v18);
      uint64_t v9 = -(uint64_t)*v7;
    }
  }
  unsigned int v14 = (unsigned __int16 *)((char *)v7 + v9);
  if (*v14 >= 0x61u)
  {
    uint64_t v15 = v14[48];
    if (v15)
    {
      unsigned int v16 = (unsigned int *)((char *)v7 + v15 + *(unsigned int *)((char *)v7 + v15));
      uint64_t v17 = *v16;
      int v21 = v16 + 1;
      int v20 = &v16[v17 + 1];
      return (int *)sub_F1F11C(&v21, &v20, a1, v18);
    }
  }
  return result;
}

uint64_t sub_F1F11C(unsigned int **a1, unsigned int **a2, uint64_t a3, unsigned __int8 **a4)
{
  unsigned int v6 = *a1;
  if (*a1 != *a2)
  {
    uint64_t v9 = (unsigned char *)(a3 + 7774);
    do
    {
      unsigned int v10 = (int *)((char *)v6 + *v6);
      uint64_t v11 = (unsigned __int16 *)((char *)v10 - *v10);
      if (*v11 >= 7u && v11[3]) {
        int v12 = *((unsigned __int8 *)v10 + v11[3]);
      }
      else {
        int v12 = 0;
      }
      uint64_t v13 = *(void *)((char *)v10 + v11[2]);
      v18[0] = v13 & 0xFFFFFFFFFFFFLL | ((unint64_t)((v13 & 0xFF000000000000) == 0) << 48);
      v18[1] = 0x7FFFFFFFFFFFFFFFLL;
      char v19 = v12;
      if (!*v9
        || (unsigned int v14 = sub_290DEC(a3 + 3896, v13, 1)) != 0
        && (uint64_t v15 = &v14[-*(int *)v14], *(unsigned __int16 *)v15 >= 5u)
        && (uint64_t v16 = *((unsigned __int16 *)v15 + 2)) != 0
        && *(_DWORD *)&v14[v16 + *(unsigned int *)&v14[v16]] > WORD2(v13)
        && sub_295DB4(a3, v13 & 0xFFFFFFFFFFFFLL))
      {
        if (v12 == **a4) {
          sub_F1F288((uint64_t)a4[1], v18);
        }
      }
      unsigned int v6 = *a1 + 1;
      *a1 = v6;
    }
    while (v6 != *a2);
  }
  return a3;
}

char *sub_F1F288(uint64_t a1, uint64_t *a2)
{
  unsigned int v3 = *(uint64_t **)a1;
  uint64_t v4 = **(void **)a1;
  uint64_t v5 = *a2;
  unint64_t v6 = HIDWORD(*a2);
  unint64_t v7 = *a2 & 0xFFFFFFFFFFFFLL;
  uint64_t v8 = (int *)sub_2D5D58(v4, v7);
  if (*(unsigned char *)(v4 + 7772))
  {
    uint64_t v9 = sub_2DB8E0(v4 + 3896, v5, 0);
    unsigned int v10 = &v9[-*(int *)v9];
    if (*(unsigned __int16 *)v10 < 5u)
    {
      uint64_t v11 = 0;
    }
    else
    {
      uint64_t v11 = *((unsigned __int16 *)v10 + 2);
      if (v11) {
        v11 += (uint64_t)&v9[*(unsigned int *)&v9[v11]];
      }
    }
    int v12 = (int *)(v11 + 4 * (unsigned __int16)v6 + 4 + *(unsigned int *)(v11 + 4 * (unsigned __int16)v6 + 4));
  }
  else
  {
    int v12 = 0;
  }
  v22[0] = v8;
  v22[1] = v12;
  void v22[2] = (int *)sub_2E5C38(v4, v7, 1);
  v22[3] = v13;
  LODWORD(v23) = v5;
  WORD2(v23) = v6;
  BYTE6(v23) = (v5 & 0xFF000000000000) != 0;
  uint64_t v14 = v3[1];
  unsigned __int16 v15 = sub_2E5B50(v22);
  uint64_t v16 = v23;
  unsigned int v17 = (unsigned __int16)sub_3E73C4(v14, v23);
  BOOL result = sub_3E73C4(v14, v16 ^ 0x1000000000000);
  unsigned int v19 = (unsigned __int16)result;
  if ((unsigned __int16)result <= v17) {
    unsigned int v19 = v17;
  }
  if (v19) {
    double v20 = (double)v15 / (double)v19;
  }
  else {
    double v20 = 0.0;
  }
  int v21 = *(double **)(a1 + 8);
  if (v20 < *v21) {
    double v20 = *v21;
  }
  *int v21 = v20;
  return result;
}

void sub_F1F3EC(uint64_t a1, unsigned int *a2, unsigned __int8 **a3)
{
  if (a2)
  {
    uint64_t v4 = *a2;
    if (v4)
    {
      unint64_t v5 = 0;
      uint64_t v31 = 4 * v4;
      do
      {
        uint64_t v6 = a2[v5 / 4 + 1];
        unint64_t v7 = (unsigned __int16 *)((char *)&a2[v5 / 4] + v6 - *(int *)((char *)&a2[v5 / 4 + 1] + v6));
        if (v7[2] >= 7u && v7[5]) {
          int v8 = *((unsigned __int8 *)&a2[v5 / 4 + 1] + v6 + v7[5]);
        }
        else {
          int v8 = 0;
        }
        uint64_t v9 = *(void *)((char *)&a2[v5 / 4 + 1] + v6 + v7[4]);
        unint64_t v10 = v9 & 0xFFFFFFFFFFFFLL | ((unint64_t)((v9 & 0xFF000000000000) == 0) << 48);
        unint64_t v11 = HIDWORD(v10);
        if (!*(unsigned char *)(a1 + 7774)
          || (int v12 = sub_290DEC(a1 + 3896, v9, 1)) != 0
          && (uint64_t v13 = &v12[-*(int *)v12], *(unsigned __int16 *)v13 >= 5u)
          && (uint64_t v14 = *((unsigned __int16 *)v13 + 2)) != 0
          && *(_DWORD *)&v12[v14 + *(unsigned int *)&v12[v14]] > WORD2(v10)
          && sub_295DB4(a1, v9 | ((unint64_t)WORD2(v10) << 32)))
        {
          if (**a3 == v8)
          {
            uint64_t v29 = a3[1];
            uint64_t v15 = **(void **)v29;
            uint64_t v16 = (int *)sub_2D5D58(v15, v9 & 0xFFFFFFFFFFFFLL);
            if (*(unsigned char *)(v15 + 7772))
            {
              unsigned int v17 = sub_2DB8E0(v15 + 3896, v9, 0);
              uint64_t v18 = &v17[-*(int *)v17];
              if (*(unsigned __int16 *)v18 < 5u)
              {
                uint64_t v19 = 0;
              }
              else
              {
                uint64_t v19 = *((unsigned __int16 *)v18 + 2);
                if (v19) {
                  v19 += (uint64_t)&v17[*(unsigned int *)&v17[v19]];
                }
              }
              double v20 = (int *)(v19
                          + 4 * (unsigned __int16)v11
                          + 4
                          + *(unsigned int *)(v19 + 4 * (unsigned __int16)v11 + 4));
            }
            else
            {
              double v20 = 0;
            }
            int v21 = (int *)sub_2E5C38(v15, v9 & 0xFFFFFFFFFFFFLL, 1);
            v32[0] = v16;
            v32[1] = v20;
            v32[2] = v21;
            v32[3] = v22;
            int v33 = v9;
            __int16 v34 = v11;
            BOOL v35 = (v9 & 0xFF000000000000) == 0;
            double v23 = sub_3E6EAC(v32);
            BOOL v26 = *(uint64_t *)&v23 > -1
               && ((*(void *)&v23 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF
               || (unint64_t)(*(void *)&v23 - 1) < 0xFFFFFFFFFFFFFLL
               || (*(void *)&v23 & 0x7FFFFFFFFFFFFFFFLL) == 0;
            if (v26 && v23 > 0.0)
            {
              unsigned int v27 = (double *)*((void *)v29 + 1);
              if (v23 > *v27) {
                *unsigned int v27 = v23;
              }
            }
          }
        }
        v5 += 4;
      }
      while (v31 != v5);
    }
  }
}

void sub_F1F678()
{
  unk_25FCCF7 = 16641;
  word_25FCCE0 = 65;
  byte_25FCD0F = 1;
  byte_25FCCF9 = 0;
}

uint64_t sub_F1F6A0(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  strcpy((char *)v16, "DecisionPointDetection");
  HIBYTE(v16[2]) = 22;
  long long __p = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  unint64_t v7 = sub_374CDC(a2, (uint64_t)v16, (uint64_t *)&__p);
  sub_F20134((BOOL *)a1, v7);
  int v8 = (void **)__p;
  if (__p)
  {
    uint64_t v9 = v14;
    unint64_t v10 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      unint64_t v10 = __p;
    }
    uint64_t v14 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v16[2]) < 0) {
    operator delete(v16[0]);
  }
  *(unsigned char *)(a1 + 104) = a3;
  if (a4 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = a4;
  }
  *(void *)(a1 + 112) = v11;
  return a1;
}

void sub_F1F798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

double sub_F1F7C0@<D0>(int *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>, double result@<D0>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  if (*(unsigned char *)a1)
  {
    sub_F1F884(a1, (uint64_t)a2, (char **)a3);
    sub_F1FA5C((char *)a1, a2, (char **)a3);
    sub_F1FDB4((uint64_t)a1, (uint64_t)a2, (char **)a3);
    int v8 = *(long long **)(a3 + 8);
    unint64_t v9 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v8 - *(void *)a3) >> 3));
    if (v8 == *(long long **)a3) {
      uint64_t v10 = 0;
    }
    else {
      uint64_t v10 = v9;
    }
    *(void *)&BOOL result = sub_F208A8((void *)*(void *)a3, v8, (uint64_t)&v11, v10, 1, v7).n128_u64[0];
  }
  return result;
}

void sub_F1F868(_Unwind_Exception *exception_object)
{
  unsigned int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

int *sub_F1F884(int *result, uint64_t a2, char **a3)
{
  if (*((unsigned char *)result + 8))
  {
    unint64_t v5 = result;
    uint64_t v34 = 0;
    BOOL result = (int *)sub_5231C(a2);
    uint64_t v6 = *((void *)result + 1) - *(void *)result;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = 0;
      uint64_t v9 = v6 / 96;
      while (1)
      {
        uint64_t v10 = sub_EB0698(a2, v8);
        v34 += v10;
        BOOL result = (int *)sub_5231C(a2);
        uint64_t v11 = *(void *)result;
        int v12 = *(int **)(*(void *)result + v7);
        uint64_t v13 = (unsigned __int16 *)((char *)v12 - *v12);
        if (*v13 < 0x2Fu) {
          goto LABEL_14;
        }
        uint64_t v14 = v13[23];
        if (!v14) {
          goto LABEL_14;
        }
        if (*((unsigned char *)v12 + v14)) {
          break;
        }
        unsigned int v27 = *(int **)(v11 + v7 + 40);
        unsigned int v28 = (unsigned __int16 *)((char *)v27 - *v27);
        if (*v28 >= 0x2Fu)
        {
          uint64_t v29 = v28[23];
          if (v29)
          {
            if (!*((unsigned char *)v27 + v29)) {
              break;
            }
          }
        }
        uint64_t v30 = *((void *)v5 + 3);
        uint64_t v31 = *((void *)v5 + 4);
        uint64_t v32 = v34 - v30;
        if (v34 <= v30) {
          uint64_t v32 = 0;
        }
        uint64_t v33 = v32;
        if (v32 < v31) {
          goto LABEL_5;
        }
LABEL_4:
        BOOL result = (int *)sub_F1FFCC(a3, &v34, &v33, v5 + 10);
LABEL_5:
        ++v8;
        v7 += 96;
        if (v9 == v8) {
          return result;
        }
      }
      unsigned int v15 = *((unsigned __int8 *)v12 + v14);
      BOOL v16 = v15 > 0x1A;
      int v17 = (1 << v15) & 0x4810001;
      if (!v16 && v17 != 0) {
        goto LABEL_5;
      }
LABEL_14:
      uint64_t v19 = *(int **)(v11 + v7 + 40);
      double v20 = (unsigned __int16 *)((char *)v19 - *v19);
      if (*v20 < 0x2Fu) {
        goto LABEL_5;
      }
      uint64_t v21 = v20[23];
      if (!v21) {
        goto LABEL_5;
      }
      unsigned int v22 = *((unsigned __int8 *)v19 + v21);
      BOOL v16 = v22 > 0x1A;
      int v23 = (1 << v22) & 0x4810001;
      if (v16 || v23 == 0) {
        goto LABEL_5;
      }
      uint64_t v25 = *((void *)v5 + 2);
      uint64_t v26 = v34 - v25;
      if (v34 <= v25) {
        uint64_t v26 = 0;
      }
      uint64_t v33 = v26;
      if (v26 < *((void *)v5 + 4)) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  return result;
}

char *sub_F1FA5C(char *result, void *a2, char **a3)
{
  if (!result[48]) {
    return result;
  }
  unint64_t v5 = result;
  BOOL result = (char *)sub_EB15DC((uint64_t)a2);
  if ((uint64_t)result < *((void *)v5 + 7)) {
    return result;
  }
  sub_EB058C(a2, v42);
  uint64_t v7 = v43;
  unint64_t v6 = v44;
  unint64_t v8 = v45;
  unint64_t v9 = v46;
  if (v43)
  {
    for (uint64_t i = 0; ; i += sub_EB0698((uint64_t)v7, v6))
    {
      unint64_t v11 = sub_EB04C4(v7);
      unint64_t v12 = v11;
      if (v8)
      {
        unint64_t v13 = sub_EB04C4(v8);
        if (v6 >= v12 || v9 >= v13)
        {
          if (v6 < v12 == v9 < v13) {
            goto LABEL_53;
          }
        }
        else
        {
          uint64_t v14 = sub_EB0624(v7, v6);
          if (v14 == sub_EB0624(v8, v9)) {
            goto LABEL_53;
          }
        }
      }
      else if (v6 >= v11)
      {
        goto LABEL_53;
      }
      unsigned int v15 = (int **)sub_EB0624(v7, --v6);
      BOOL v16 = (char *)*v15;
      int v17 = (unsigned __int16 *)((char *)*v15 - **v15);
      unsigned int v18 = *v17;
      if (*((unsigned char *)v15 + 38))
      {
        if (v18 < 0xB) {
          continue;
        }
        unsigned int v19 = v17[5];
        if (!v19 || (*(_DWORD *)&v16[v19] & 2) == 0) {
          continue;
        }
      }
      else
      {
        if (v18 < 0xB) {
          continue;
        }
        unsigned int v20 = v17[5];
        if (!v20 || (*(_DWORD *)&v16[v20] & 1) == 0) {
          continue;
        }
      }
      if (!v5[49]) {
        goto LABEL_53;
      }
      uint64_t v21 = (void *)sub_EB0624(v7, v6);
      unsigned int v22 = (unsigned __int16 *)(*v21 - *(int *)*v21);
      if (*v22 < 0x2Fu) {
        goto LABEL_53;
      }
      uint64_t v23 = v22[23];
      if (!v23) {
        goto LABEL_53;
      }
      unsigned int v24 = *(unsigned __int8 *)(*v21 + v23);
      BOOL v25 = v24 > 0x2F;
      uint64_t v26 = (1 << v24) & 0xE2E040048000;
      if (v25 || v26 == 0) {
        goto LABEL_53;
      }
    }
  }
  if (!v45)
  {
    uint64_t i = 0;
LABEL_53:
    BOOL result = (char *)sub_EB15DC((uint64_t)a2);
    if ((uint64_t)result < *((void *)v5 + 8) + i) {
      return result;
    }
LABEL_54:
    v42[0] = sub_EB15DC((uint64_t)a2) - i;
    uint64_t v41 = sub_EB15DC((uint64_t)a2) - i - *((void *)v5 + 8);
    return sub_F1FFCC(a3, v42, &v41, (int *)v5 + 18);
  }
  if (v9 < sub_EB04C4(v45))
  {
    uint64_t i = 0;
    unint64_t v28 = v6 - 1;
    while (1)
    {
      uint64_t v29 = (int **)sub_EB0624(0, v28);
      uint64_t v30 = (char *)*v29;
      uint64_t v31 = (unsigned __int16 *)((char *)*v29 - **v29);
      unsigned int v32 = *v31;
      if (*((unsigned char *)v29 + 38))
      {
        if (v32 < 0xB) {
          goto LABEL_34;
        }
        unsigned int v33 = v31[5];
        if (!v33 || (*(_DWORD *)&v30[v33] & 2) == 0) {
          goto LABEL_34;
        }
      }
      else
      {
        if (v32 < 0xB) {
          goto LABEL_34;
        }
        unsigned int v34 = v31[5];
        if (!v34 || (*(_DWORD *)&v30[v34] & 1) == 0) {
          goto LABEL_34;
        }
      }
      if (!v5[49]) {
        goto LABEL_53;
      }
      BOOL v35 = (void *)sub_EB0624(0, v28);
      unsigned int v36 = (unsigned __int16 *)(*v35 - *(int *)*v35);
      if (*v36 < 0x2Fu) {
        goto LABEL_53;
      }
      uint64_t v37 = v36[23];
      if (!v37) {
        goto LABEL_53;
      }
      unsigned int v38 = *(unsigned __int8 *)(*v35 + v37);
      BOOL v25 = v38 > 0x2F;
      uint64_t v39 = (1 << v38) & 0xE2E040048000;
      if (v25 || v39 == 0) {
        goto LABEL_53;
      }
LABEL_34:
      i += sub_EB0698(0, v28--);
      if (v9 >= sub_EB04C4(v8)) {
        goto LABEL_53;
      }
    }
  }
  uint64_t i = 0;
  BOOL result = (char *)sub_EB15DC((uint64_t)a2);
  if ((uint64_t)result >= *((void *)v5 + 8)) {
    goto LABEL_54;
  }
  return result;
}

uint64_t sub_F1FDB4(uint64_t result, uint64_t a2, char **a3)
{
  if (*(unsigned char *)(result + 104) == 12)
  {
    uint64_t v3 = result;
    if (*(unsigned char *)(result + 80))
    {
      BOOL result = sub_EB15DC(a2);
      unint64_t v6 = (uint64_t *)(v3 + 88);
      if (result >= *(void *)(v3 + 88))
      {
        BOOL result = sub_10815C8(a2);
        if (result)
        {
          double v7 = sub_EB1860(a2);
          BOOL v10 = *(uint64_t *)&v7 > -1 && ((*(void *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF
             || (unint64_t)(*(void *)&v7 - 1) < 0xFFFFFFFFFFFFFLL
             || (*(void *)&v7 & 0x7FFFFFFFFFFFFFFFLL) == 0;
          if (!v10 || v7 <= 0.0)
          {
            uint64_t v19 = 0x7FFFFFFFFFFFFFFFLL;
            uint64_t v14 = (void *)(v3 + 112);
            goto LABEL_43;
          }
          double v11 = sub_EB1860(a2) * ((double)*(int *)(v3 + 96) / 36000.0) * 100000.0;
          if (v11 >= 0.0)
          {
            double v12 = v11;
            if (v11 >= 4.50359963e15) {
              goto LABEL_26;
            }
            uint64_t v13 = (uint64_t)(v11 + v11) + 1;
          }
          else
          {
            double v12 = v11;
            if (v11 <= -4.50359963e15) {
              goto LABEL_26;
            }
            uint64_t v13 = (uint64_t)(v11 + v11);
            if (v13 >= 1) {
              --v13;
            }
          }
          double v12 = (double)(v13 >> 1);
LABEL_26:
          if (v12 >= 9.22337204e18)
          {
            uint64_t v16 = 0x7FFFFFFFFFFFFFFELL;
            uint64_t v19 = 0x7FFFFFFFFFFFFFFELL;
            uint64_t v14 = (void *)(v3 + 112);
LABEL_37:
            if (v16 >= *v6) {
              int v17 = (uint64_t *)(v3 + 88);
            }
            else {
              int v17 = &v19;
            }
            if (*v6 == 0x7FFFFFFFFFFFFFFFLL) {
              unint64_t v6 = &v19;
            }
            else {
              unint64_t v6 = v17;
            }
            goto LABEL_43;
          }
          if (v11 >= 0.0)
          {
            if (v11 >= 4.50359963e15) {
              goto LABEL_36;
            }
            uint64_t v15 = (uint64_t)(v11 + v11) + 1;
          }
          else
          {
            if (v11 <= -4.50359963e15) {
              goto LABEL_36;
            }
            uint64_t v15 = (uint64_t)(v11 + v11);
            if (v15 >= 1) {
              --v15;
            }
          }
          double v11 = (double)(v15 >> 1);
LABEL_36:
          uint64_t v16 = (uint64_t)v11;
          uint64_t v19 = (uint64_t)v11;
          uint64_t v14 = (void *)(v3 + 112);
          if ((uint64_t)v11 != 0x7FFFFFFFFFFFFFFFLL) {
            goto LABEL_37;
          }
LABEL_43:
          uint64_t v18 = *v6 + *(void *)(v3 + 112);
          return (uint64_t)sub_F1FFCC(a3, v14, &v18, (int *)(v3 + 100));
        }
      }
    }
  }
  return result;
}

char *sub_F1FFCC(char **a1, void *a2, uint64_t *a3, int *a4)
{
  unint64_t v9 = a1[1];
  unint64_t v8 = (unint64_t)a1[2];
  if ((unint64_t)v9 < v8)
  {
    uint64_t v10 = *a3;
    int v11 = *a4;
    *(void *)unint64_t v9 = *a2;
    *((void *)v9 + 1) = v10;
    *((_DWORD *)v9 + 4) = v11;
    double v12 = v9 + 24;
    goto LABEL_14;
  }
  uint64_t v13 = *a1;
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v9 - *a1) >> 3);
  unint64_t v15 = v14 + 1;
  if (v14 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (void)v13) >> 3);
  if (2 * v16 > v15) {
    unint64_t v15 = 2 * v16;
  }
  if (v16 >= 0x555555555555555) {
    unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v17 = v15;
  }
  if (v17 > 0xAAAAAAAAAAAAAAALL) {
    sub_188D718();
  }
  uint64_t v18 = 24 * v17;
  uint64_t v19 = (char *)operator new(24 * v17);
  unsigned int v20 = &v19[24 * v14];
  uint64_t v21 = &v19[v18];
  uint64_t v22 = *a3;
  int v23 = *a4;
  *(void *)unsigned int v20 = *a2;
  *((void *)v20 + 1) = v22;
  *((_DWORD *)v20 + 4) = v23;
  double v12 = v20 + 24;
  if (v9 == v13)
  {
    *a1 = v20;
    a1[1] = v12;
    a1[2] = v21;
    if (!v13) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  do
  {
    long long v24 = *(_OWORD *)(v9 - 24);
    BOOL v25 = v20 - 24;
    *((_DWORD *)v20 - 2) = *((_DWORD *)v9 - 2);
    *(_OWORD *)(v20 - 24) = v24;
    v9 -= 24;
    v20 -= 24;
  }
  while (v9 != v13);
  *a1 = v25;
  a1[1] = v12;
  a1[2] = v21;
  if (v13) {
LABEL_13:
  }
    operator delete(v13);
LABEL_14:
  a1[1] = v12;
  return v12 - 24;
}

BOOL *sub_F20134(BOOL *a1, void *a2)
{
  HIBYTE(__p[2]) = 6;
  strcpy((char *)__p, "enable");
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *a1 = v4;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8870;
  strcpy((char *)__p[0], "freeway_entry_exit_points");
  unint64_t v5 = (void *)sub_560F4(a2, (uint64_t)__p);
  sub_F202F0((uint64_t)(a1 + 8), v5);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "destination_point");
  unint64_t v6 = (void *)sub_560F4(a2, (uint64_t)__p);
  sub_F20500((uint64_t)(a1 + 48), v6);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8E90;
  strcpy((char *)__p[0], "offline_online_transition_point");
  double v7 = (void *)sub_560F4(a2, (uint64_t)__p);
  sub_F206F8((uint64_t)(a1 + 80), v7);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_F202C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F202F0(uint64_t a1, void *a2)
{
  HIBYTE(v7) = 6;
  strcpy((char *)&__p, "enable");
  BOOL v4 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)a1 = v4;
  long long __p = operator new(0x20uLL);
  long long v7 = xmmword_20B8870;
  strcpy((char *)__p, "entry_pullback_distance_m");
  *(void *)(a1 + 8) = sub_5CDE0(a2, &__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
  long long __p = operator new(0x20uLL);
  long long v7 = xmmword_20B91C0;
  strcpy((char *)__p, "exit_pullback_distance_m");
  *(void *)(a1 + 16) = sub_5CDE0(a2, &__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
  long long __p = operator new(0x20uLL);
  long long v7 = xmmword_20B5EB0;
  strcpy((char *)__p, "min_distance_from_origin_m");
  *(void *)(a1 + 24) = sub_5CDE0(a2, &__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
  long long __p = operator new(0x20uLL);
  long long v7 = xmmword_20B5EB0;
  strcpy((char *)__p, "min_time_since_last_etau_s");
  *(_DWORD *)(a1 + 32) = sub_5D2EC(a2, &__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
  return a1;
}

void sub_F204D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F20500(uint64_t a1, void *a2)
{
  HIBYTE(__p[2]) = 6;
  strcpy((char *)__p, "enable");
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)a1 = v4;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8870;
  strcpy((char *)__p[0], "ignore_terminal_fow_roads");
  BOOL v5 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 1) = v5;
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "min_route_length_m");
  *(void *)(a1 + 8) = sub_5CDE0(a2, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "pullback_distance_m");
  *(void *)(a1 + 16) = sub_5CDE0(a2, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B5EB0;
  strcpy((char *)__p[0], "min_time_since_last_etau_s");
  *(_DWORD *)(a1 + 24) = sub_5D2EC(a2, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_F206CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F206F8(uint64_t a1, void *a2)
{
  HIBYTE(v7) = 6;
  strcpy((char *)&__p, "enable");
  BOOL v4 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)a1 = v4;
  long long __p = operator new(0x28uLL);
  long long v7 = xmmword_20B9390;
  strcpy((char *)__p, "distance_from_current_location_m");
  *(void *)(a1 + 8) = sub_5CDE0(a2, &__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
  long long __p = operator new(0x19uLL);
  long long v7 = xmmword_20B9250;
  strcpy((char *)__p, "max_time_to_next_etau_s");
  *(_DWORD *)(a1 + 16) = sub_5D2EC(a2, &__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
  long long __p = operator new(0x20uLL);
  long long v7 = xmmword_20B5EB0;
  strcpy((char *)__p, "min_time_since_last_etau_s");
  *(_DWORD *)(a1 + 20) = sub_5D2EC(a2, &__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
  return a1;
}

void sub_F20880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_F208A8(void *n128_u64, long long *a2, uint64_t a3, uint64_t a4, char a5, __n128 result)
{
  while (2)
  {
    uint64_t v13 = (__n128 *)((char *)a2 - 24);
    unint64_t v137 = (__n128 *)((char *)a2 - 72);
    uint64_t v138 = a2 - 3;
    unint64_t v14 = (unint64_t)n128_u64;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          n128_u64 = (void *)v14;
          uint64_t v15 = (uint64_t)a2 - v14;
          unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v14) >> 3);
          if (v7 || !v6)
          {
            switch(v16)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                if (*((void *)a2 - 2) < *(void *)(v14 + 8))
                {
                  uint64_t v184 = *(void *)(v14 + 16);
                  __n128 v158 = *(__n128 *)v14;
                  long long v102 = *(long long *)((char *)a2 - 24);
                  *(_DWORD *)(v14 + 16) = *((_DWORD *)a2 - 2);
                  *(_OWORD *)unint64_t v14 = v102;
                  BOOL result = v158;
                  *((_DWORD *)a2 - 2) = v184;
                  *(long long *)((char *)a2 - 24) = (__int128)v158;
                }
                return result;
              case 3uLL:
                unsigned int v103 = (__n128 *)(v14 + 24);
                uint64_t v104 = *(void *)(v14 + 32);
                uint64_t v105 = *((void *)a2 - 2);
                if (v104 >= *(void *)(v14 + 8))
                {
                  if (v105 < v104)
                  {
                    BOOL result = *v103;
                    uint64_t v122 = *(void *)(v14 + 40);
                    int v123 = *((_DWORD *)a2 - 2);
                    *unsigned int v103 = *v13;
                    *(_DWORD *)(v14 + 40) = v123;
                    *((_DWORD *)a2 - 2) = v122;
                    __n128 *v13 = result;
LABEL_149:
                    if (*(void *)(v14 + 32) < *(void *)(v14 + 8))
                    {
                      uint64_t v190 = *(void *)(v14 + 16);
                      __n128 v164 = *(__n128 *)v14;
                      *(__n128 *)unint64_t v14 = *v103;
                      *(_DWORD *)(v14 + 16) = v103[1].n128_u32[0];
                      BOOL result = v164;
                      *unsigned int v103 = v164;
                      v103[1].n128_u32[0] = v190;
                    }
                  }
                }
                else if (v105 >= v104)
                {
                  uint64_t v188 = *(void *)(v14 + 16);
                  __n128 v162 = *(__n128 *)v14;
                  *(__n128 *)unint64_t v14 = *v103;
                  *(_DWORD *)(v14 + 16) = *(_DWORD *)(v14 + 40);
                  BOOL result = v162;
                  *unsigned int v103 = v162;
                  *(_DWORD *)(v14 + 40) = v188;
                  if (*((void *)a2 - 2) < *(void *)(v14 + 32))
                  {
                    BOOL result = *v103;
                    uint64_t v131 = *(void *)(v14 + 40);
                    int v132 = *((_DWORD *)a2 - 2);
                    *unsigned int v103 = *v13;
                    *(_DWORD *)(v14 + 40) = v132;
                    *((_DWORD *)a2 - 2) = v131;
                    __n128 *v13 = result;
                  }
                }
                else
                {
                  uint64_t v185 = *(void *)(v14 + 16);
                  __n128 v159 = *(__n128 *)v14;
                  __n128 v106 = *v13;
                  *(_DWORD *)(v14 + 16) = *((_DWORD *)a2 - 2);
                  *(__n128 *)unint64_t v14 = v106;
                  BOOL result = v159;
                  *((_DWORD *)a2 - 2) = v185;
                  __n128 *v13 = v159;
                }
                break;
              case 4uLL:
                unsigned int v103 = (__n128 *)(v14 + 24);
                char v107 = (__n128 *)(v14 + 48);
                uint64_t v108 = *(void *)(v14 + 32);
                uint64_t v109 = *(void *)(v14 + 56);
                if (v108 >= *(void *)(v14 + 8))
                {
                  if (v109 < v108)
                  {
                    uint64_t v124 = *(void *)(v14 + 40);
                    BOOL result = *v103;
                    *unsigned int v103 = *v107;
                    *(_DWORD *)(v14 + 40) = *(_DWORD *)(v14 + 64);
                    *char v107 = result;
                    *(_DWORD *)(v14 + 64) = v124;
                    if (*(void *)(v14 + 32) < *(void *)(v14 + 8))
                    {
                      uint64_t v187 = *(void *)(v14 + 16);
                      __n128 v161 = *(__n128 *)v14;
                      *(__n128 *)unint64_t v14 = *v103;
                      *(_DWORD *)(v14 + 16) = *(_DWORD *)(v14 + 40);
                      BOOL result = v161;
                      *unsigned int v103 = v161;
                      *(_DWORD *)(v14 + 40) = v187;
                    }
                  }
                }
                else if (v109 >= v108)
                {
                  uint64_t v189 = *(void *)(v14 + 16);
                  __n128 v163 = *(__n128 *)v14;
                  *(__n128 *)unint64_t v14 = *v103;
                  *(_DWORD *)(v14 + 16) = *(_DWORD *)(v14 + 40);
                  BOOL result = v163;
                  *unsigned int v103 = v163;
                  *(_DWORD *)(v14 + 40) = v189;
                  if (v109 < *(void *)(v14 + 32))
                  {
                    uint64_t v133 = *(void *)(v14 + 40);
                    BOOL result = *v103;
                    *unsigned int v103 = *v107;
                    *(_DWORD *)(v14 + 40) = *(_DWORD *)(v14 + 64);
                    *char v107 = result;
                    *(_DWORD *)(v14 + 64) = v133;
                  }
                }
                else
                {
                  uint64_t v186 = *(void *)(v14 + 16);
                  __n128 v160 = *(__n128 *)v14;
                  *(__n128 *)unint64_t v14 = *v107;
                  *(_DWORD *)(v14 + 16) = *(_DWORD *)(v14 + 64);
                  BOOL result = v160;
                  *char v107 = v160;
                  *(_DWORD *)(v14 + 64) = v186;
                }
                if (*((void *)a2 - 2) >= *(void *)(v14 + 56)) {
                  return result;
                }
                BOOL result = *v107;
                int v134 = *(void *)(v14 + 64);
                int v135 = *((_DWORD *)a2 - 2);
                *char v107 = *v13;
                *(_DWORD *)(v14 + 64) = v135;
                *((_DWORD *)a2 - 2) = v134;
                __n128 *v13 = result;
                if (*(void *)(v14 + 56) >= *(void *)(v14 + 32)) {
                  return result;
                }
                uint64_t v136 = *(void *)(v14 + 40);
                BOOL result = *v103;
                *unsigned int v103 = *v107;
                *(_DWORD *)(v14 + 40) = *(_DWORD *)(v14 + 64);
                *char v107 = result;
                *(_DWORD *)(v14 + 64) = v136;
                goto LABEL_149;
              case 5uLL:
                result.n128_u64[0] = sub_F21C10((__n128 *)v14, (__n128 *)(v14 + 24), (__n128 *)(v14 + 48), (__n128 *)(v14 + 72), (__n128 *)((char *)a2 - 24), result).n128_u64[0];
                return result;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v15 <= 575)
          {
            unint64_t v110 = (long long *)(v14 + 24);
            BOOL v112 = (long long *)v14 == a2 || v110 == a2;
            if (a5)
            {
              if (!v112)
              {
                uint64_t v113 = 0;
                uint64_t v114 = (void *)v14;
                do
                {
                  unsigned int v116 = v110;
                  uint64_t v117 = v114[4];
                  if (v117 < v114[1])
                  {
                    uint64_t v118 = *(void *)v116;
                    int v119 = *((_DWORD *)v114 + 10);
                    uint64_t v120 = v113;
                    do
                    {
                      uint64_t v121 = v14 + v120;
                      BOOL result = *(__n128 *)(v14 + v120);
                      *(__n128 *)(v121 + 24) = result;
                      *(_DWORD *)(v121 + 40) = *(_DWORD *)(v14 + v120 + 16);
                      if (!v120)
                      {
                        uint64_t v115 = v14;
                        goto LABEL_119;
                      }
                      v120 -= 24;
                    }
                    while (v117 < *(void *)(v121 - 16));
                    uint64_t v115 = v14 + v120 + 24;
LABEL_119:
                    *(void *)uint64_t v115 = v118;
                    *(void *)(v115 + 8) = v117;
                    *(_DWORD *)(v115 + 16) = v119;
                  }
                  unint64_t v110 = (long long *)((char *)v116 + 24);
                  v113 += 24;
                  uint64_t v114 = v116;
                }
                while ((long long *)((char *)v116 + 24) != a2);
              }
            }
            else if (!v112)
            {
              do
              {
                int v125 = (__n128 *)v110;
                int64_t v126 = n128_u64[4];
                if (v126 < n128_u64[1])
                {
                  unint64_t v127 = *(void *)v110;
                  uint64_t v128 = n128_u64[5];
                  uint64_t v129 = v125;
                  do
                  {
                    BOOL result = *(__n128 *)((char *)v129 - 24);
                    *uint64_t v129 = result;
                    v129[1].n128_u32[0] = v129[-1].n128_u32[2];
                    int64_t v130 = v129[-3].n128_i64[1];
                    uint64_t v129 = (__n128 *)((char *)v129 - 24);
                  }
                  while (v126 < v130);
                  v129->n128_u64[0] = v127;
                  v129->n128_u64[1] = v126;
                  v129[1].n128_u32[0] = v128;
                }
                unint64_t v110 = (long long *)&v125[1].n128_i8[8];
                n128_u64 = v125->n128_u64;
              }
              while (&v125[1].n128_i8[8] != (__int8 *)a2);
            }
            return result;
          }
          if (!a4)
          {
            if ((long long *)v14 != a2)
            {
              sub_F21E58(v14, a2, a2);
            }
            return result;
          }
          unint64_t v17 = v16 >> 1;
          uint64_t v18 = (__n128 *)(v14 + 24 * (v16 >> 1));
          uint64_t v19 = *((void *)a2 - 2);
          if ((unint64_t)v15 >= 0xC01) {
            break;
          }
          uint64_t v23 = *(void *)(v14 + 8);
          long long v24 = (void *)(v14 + 8 + 24 * v17);
          if (v23 < *v24)
          {
            if (v19 >= v23)
            {
              unint64_t v173 = v18[1].n128_u64[0];
              __n128 v147 = *v18;
              __n128 v46 = *(__n128 *)v14;
              v18[1].n128_u32[0] = *(_DWORD *)(v14 + 16);
              __n128 *v18 = v46;
              BOOL result = v147;
              *(_DWORD *)(v14 + 16) = v173;
              *(__n128 *)unint64_t v14 = v147;
              if (*((void *)a2 - 2) >= *(void *)(v14 + 8)) {
                goto LABEL_32;
              }
              unint64_t v166 = *(void *)(v14 + 16);
              __n128 v140 = *(__n128 *)v14;
              __n128 v47 = *v13;
              *(_DWORD *)(v14 + 16) = *((_DWORD *)a2 - 2);
              *(__n128 *)unint64_t v14 = v47;
            }
            else
            {
              unint64_t v166 = v18[1].n128_u64[0];
              __n128 v140 = *v18;
              __n128 v25 = *v13;
              v18[1].n128_u32[0] = *((_DWORD *)a2 - 2);
              __n128 *v18 = v25;
            }
            BOOL result = v140;
            *((_DWORD *)a2 - 2) = v166;
            __n128 *v13 = v140;
LABEL_32:
            --a4;
            if ((a5 & 1) == 0) {
              goto LABEL_54;
            }
            goto LABEL_33;
          }
          if (v19 >= v23) {
            goto LABEL_32;
          }
          uint64_t v169 = *(void *)(v14 + 16);
          __n128 v143 = *(__n128 *)v14;
          __n128 v28 = *v13;
          *(_DWORD *)(v14 + 16) = *((_DWORD *)a2 - 2);
          *(__n128 *)unint64_t v14 = v28;
          BOOL result = v143;
          *((_DWORD *)a2 - 2) = v169;
          __n128 *v13 = v143;
          if (*(void *)(v14 + 8) >= *v24) {
            goto LABEL_32;
          }
          unint64_t v170 = v18[1].n128_u64[0];
          __n128 v144 = *v18;
          __n128 v29 = *(__n128 *)v14;
          v18[1].n128_u32[0] = *(_DWORD *)(v14 + 16);
          __n128 *v18 = v29;
          BOOL result = v144;
          *(_DWORD *)(v14 + 16) = v170;
          *(__n128 *)unint64_t v14 = v144;
          --a4;
          if (a5) {
            goto LABEL_33;
          }
LABEL_54:
          uint64_t v48 = *(void *)(v14 + 8);
          if (*(void *)(v14 - 16) < v48) {
            goto LABEL_55;
          }
          if (v48 < *((void *)a2 - 2))
          {
            unint64_t v90 = v14;
            do
            {
              unint64_t v14 = v90 + 24;
              uint64_t v91 = *(void *)(v90 + 32);
              v90 += 24;
            }
            while (v48 >= v91);
          }
          else
          {
            unint64_t v92 = v14 + 24;
            do
            {
              unint64_t v14 = v92;
              if (v92 >= (unint64_t)a2) {
                break;
              }
              uint64_t v93 = *(void *)(v92 + 8);
              v92 += 24;
            }
            while (v48 >= v93);
          }
          uint64_t v94 = a2;
          if (v14 < (unint64_t)a2)
          {
            int v95 = a2;
            do
            {
              uint64_t v94 = (long long *)((char *)v95 - 24);
              uint64_t v96 = *((void *)v95 - 2);
              int v95 = (long long *)((char *)v95 - 24);
            }
            while (v48 < v96);
          }
          uint64_t v97 = *n128_u64;
          uint64_t v98 = n128_u64[2];
          while (v14 < (unint64_t)v94)
          {
            uint64_t v183 = *(void *)(v14 + 16);
            __n128 v157 = *(__n128 *)v14;
            __n128 v99 = (__n128)*v94;
            *(_DWORD *)(v14 + 16) = *((_DWORD *)v94 + 4);
            *(__n128 *)unint64_t v14 = v99;
            BOOL result = v157;
            *((_DWORD *)v94 + 4) = v183;
            *uint64_t v94 = (__int128)v157;
            do
            {
              uint64_t v100 = *(void *)(v14 + 32);
              v14 += 24;
            }
            while (v48 >= v100);
            do
            {
              uint64_t v101 = *((void *)v94 - 2);
              uint64_t v94 = (long long *)((char *)v94 - 24);
            }
            while (v48 < v101);
          }
          BOOL v6 = v14 - 24 >= (unint64_t)n128_u64;
          BOOL v7 = v14 - 24 == (void)n128_u64;
          if ((void *)(v14 - 24) != n128_u64)
          {
            BOOL result = *(__n128 *)(v14 - 24);
            *((_DWORD *)n128_u64 + 4) = *(_DWORD *)(v14 - 8);
            *(__n128 *)n128_u64 = result;
          }
          a5 = 0;
          *(void *)(v14 - 24) = v97;
          *(void *)(v14 - 16) = v48;
          *(_DWORD *)(v14 - 8) = v98;
        }
        unsigned int v20 = (uint64_t *)(v14 + 8 + 24 * v17);
        uint64_t v21 = *v20;
        if (*v20 >= *(void *)(v14 + 8))
        {
          if (v19 < v21)
          {
            unint64_t v167 = v18[1].n128_u64[0];
            __n128 v141 = *v18;
            __n128 v26 = *v13;
            v18[1].n128_u32[0] = *((_DWORD *)a2 - 2);
            __n128 *v18 = v26;
            *((_DWORD *)a2 - 2) = v167;
            __n128 *v13 = v141;
            if (*v20 < *(void *)(v14 + 8))
            {
              uint64_t v168 = *(void *)(v14 + 16);
              __n128 v142 = *(__n128 *)v14;
              __n128 v27 = *v18;
              *(_DWORD *)(v14 + 16) = v18[1].n128_u32[0];
              *(__n128 *)unint64_t v14 = v27;
              v18[1].n128_u32[0] = v168;
              __n128 *v18 = v142;
            }
          }
        }
        else
        {
          if (v19 >= v21)
          {
            uint64_t v171 = *(void *)(v14 + 16);
            __n128 v145 = *(__n128 *)v14;
            __n128 v30 = *v18;
            *(_DWORD *)(v14 + 16) = v18[1].n128_u32[0];
            *(__n128 *)unint64_t v14 = v30;
            v18[1].n128_u32[0] = v171;
            __n128 *v18 = v145;
            if (*((void *)a2 - 2) >= *v20) {
              goto LABEL_23;
            }
            unint64_t v165 = v18[1].n128_u64[0];
            __n128 v139 = *v18;
            __n128 v31 = *v13;
            v18[1].n128_u32[0] = *((_DWORD *)a2 - 2);
            __n128 *v18 = v31;
          }
          else
          {
            unint64_t v165 = *(void *)(v14 + 16);
            __n128 v139 = *(__n128 *)v14;
            __n128 v22 = *v13;
            *(_DWORD *)(v14 + 16) = *((_DWORD *)a2 - 2);
            *(__n128 *)unint64_t v14 = v22;
          }
          *((_DWORD *)a2 - 2) = v165;
          __n128 *v13 = v139;
        }
LABEL_23:
        unsigned int v32 = (long long *)(v14 + 24);
        unint64_t v33 = v14 + 24 * v17;
        uint64_t v36 = *(void *)(v33 - 16);
        unsigned int v34 = (uint64_t *)(v33 - 16);
        uint64_t v35 = v36;
        uint64_t v37 = (__n128 *)(v34 - 1);
        uint64_t v38 = *((void *)a2 - 5);
        if (v36 >= *(void *)(v14 + 32))
        {
          if (v38 < v35)
          {
            uint64_t v172 = v34[1];
            long long v146 = (__int128)*v37;
            long long v42 = *v138;
            *((_DWORD *)v34 + 2) = *((_DWORD *)a2 - 8);
            *uint64_t v37 = (__n128)v42;
            *((_DWORD *)a2 - 8) = v172;
            long long *v138 = v146;
            if (*v34 < *(void *)(v14 + 32))
            {
              long long v43 = *v32;
              uint64_t v44 = *(void *)(v14 + 40);
              int v45 = *((_DWORD *)v34 + 2);
              *unsigned int v32 = (__int128)*v37;
              *(_DWORD *)(v14 + 40) = v45;
              *((_DWORD *)v34 + 2) = v44;
              *uint64_t v37 = (__n128)v43;
            }
          }
        }
        else if (v38 >= v35)
        {
          long long v49 = *v32;
          int v50 = *(void *)(v14 + 40);
          int v51 = *((_DWORD *)v34 + 2);
          *unsigned int v32 = (__int128)*v37;
          *(_DWORD *)(v14 + 40) = v51;
          *((_DWORD *)v34 + 2) = v50;
          *uint64_t v37 = (__n128)v49;
          if (*((void *)a2 - 5) < *v34)
          {
            uint64_t v174 = v34[1];
            long long v148 = (__int128)*v37;
            long long v52 = *v138;
            *((_DWORD *)v34 + 2) = *((_DWORD *)a2 - 8);
            *uint64_t v37 = (__n128)v52;
            *((_DWORD *)a2 - 8) = v174;
            long long *v138 = v148;
          }
        }
        else
        {
          long long v39 = *v32;
          uint64_t v40 = *(void *)(v14 + 40);
          int v41 = *((_DWORD *)a2 - 8);
          *unsigned int v32 = *v138;
          *(_DWORD *)(v14 + 40) = v41;
          *((_DWORD *)a2 - 8) = v40;
          long long *v138 = v39;
        }
        unsigned int v53 = (__n128 *)(v14 + 48);
        unint64_t v54 = v14 + 24 * v17;
        uint64_t v57 = *(void *)(v54 + 32);
        unint64_t v55 = (uint64_t *)(v54 + 32);
        uint64_t v56 = v57;
        unint64_t v58 = (__n128 *)(v55 - 1);
        uint64_t v59 = *((void *)a2 - 8);
        if (v57 >= *(void *)(v14 + 56))
        {
          if (v59 < v56)
          {
            uint64_t v175 = v55[1];
            __n128 v149 = *v58;
            __n128 v63 = *v137;
            *((_DWORD *)v55 + 2) = *((_DWORD *)a2 - 14);
            *unint64_t v58 = v63;
            *((_DWORD *)a2 - 14) = v175;
            *unint64_t v137 = v149;
            if (*v55 < *(void *)(v14 + 56))
            {
              __n128 v64 = *v53;
              uint64_t v65 = *(void *)(v14 + 64);
              int v66 = *((_DWORD *)v55 + 2);
              *unsigned int v53 = *v58;
              *(_DWORD *)(v14 + 64) = v66;
              *((_DWORD *)v55 + 2) = v65;
              *unint64_t v58 = v64;
            }
          }
        }
        else if (v59 >= v56)
        {
          __n128 v67 = *v53;
          int v68 = *(void *)(v14 + 64);
          int v69 = *((_DWORD *)v55 + 2);
          *unsigned int v53 = *v58;
          *(_DWORD *)(v14 + 64) = v69;
          *((_DWORD *)v55 + 2) = v68;
          *unint64_t v58 = v67;
          if (*((void *)a2 - 8) < *v55)
          {
            uint64_t v176 = v55[1];
            __n128 v150 = *v58;
            __n128 v70 = *v137;
            *((_DWORD *)v55 + 2) = *((_DWORD *)a2 - 14);
            *unint64_t v58 = v70;
            *((_DWORD *)a2 - 14) = v176;
            *unint64_t v137 = v150;
          }
        }
        else
        {
          __n128 v60 = *v53;
          uint64_t v61 = *(void *)(v14 + 64);
          int v62 = *((_DWORD *)a2 - 14);
          *unsigned int v53 = *v137;
          *(_DWORD *)(v14 + 64) = v62;
          *((_DWORD *)a2 - 14) = v61;
          *unint64_t v137 = v60;
        }
        uint64_t v71 = *v20;
        uint64_t v72 = *v55;
        if (*v20 >= *v34)
        {
          if (v72 < v71)
          {
            unint64_t v178 = v18[1].n128_u64[0];
            __n128 v152 = *v18;
            __n128 *v18 = *v58;
            v18[1].n128_u32[0] = *((_DWORD *)v55 + 2);
            *((_DWORD *)v55 + 2) = v178;
            *unint64_t v58 = v152;
            if (*v20 < *v34)
            {
              uint64_t v179 = v34[1];
              __n128 v153 = *v37;
              *uint64_t v37 = *v18;
              *((_DWORD *)v34 + 2) = v18[1].n128_u32[0];
              v18[1].n128_u32[0] = v179;
              __n128 *v18 = v153;
            }
          }
        }
        else
        {
          if (v72 >= v71)
          {
            uint64_t v180 = v34[1];
            __n128 v154 = *v37;
            *uint64_t v37 = *v18;
            *((_DWORD *)v34 + 2) = v18[1].n128_u32[0];
            v18[1].n128_u32[0] = v180;
            __n128 *v18 = v154;
            if (*v55 >= *v20) {
              goto LABEL_53;
            }
            unint64_t v177 = v18[1].n128_u64[0];
            __n128 v151 = *v18;
            __n128 *v18 = *v58;
            v18[1].n128_u32[0] = *((_DWORD *)v55 + 2);
          }
          else
          {
            unint64_t v177 = v34[1];
            __n128 v151 = *v37;
            *uint64_t v37 = *v58;
            *((_DWORD *)v34 + 2) = *((_DWORD *)v55 + 2);
          }
          *((_DWORD *)v55 + 2) = v177;
          *unint64_t v58 = v151;
        }
LABEL_53:
        uint64_t v181 = *(void *)(v14 + 16);
        __n128 v155 = *(__n128 *)v14;
        __n128 v73 = *v18;
        *(_DWORD *)(v14 + 16) = v18[1].n128_u32[0];
        *(__n128 *)unint64_t v14 = v73;
        BOOL result = v155;
        v18[1].n128_u32[0] = v181;
        __n128 *v18 = v155;
        --a4;
        if ((a5 & 1) == 0) {
          goto LABEL_54;
        }
LABEL_33:
        uint64_t v48 = *(void *)(v14 + 8);
LABEL_55:
        uint64_t v74 = 0;
        uint64_t v75 = *(void *)v14;
        uint64_t v76 = *(void *)(v14 + 16);
        do
        {
          uint64_t v77 = *(void *)(v14 + v74 + 32);
          v74 += 24;
        }
        while (v77 < v48);
        unint64_t v78 = v14 + v74;
        uint64_t v79 = a2;
        if (v74 == 24)
        {
          unsigned int v82 = a2;
          while (v78 < (unint64_t)v82)
          {
            uint64_t v80 = (long long *)((char *)v82 - 24);
            uint64_t v83 = *((void *)v82 - 2);
            unsigned int v82 = (long long *)((char *)v82 - 24);
            if (v83 < v48) {
              goto LABEL_63;
            }
          }
          uint64_t v80 = v82;
          unint64_t v14 = v78;
        }
        else
        {
          do
          {
            uint64_t v80 = (long long *)((char *)v79 - 24);
            uint64_t v81 = *((void *)v79 - 2);
            uint64_t v79 = (long long *)((char *)v79 - 24);
          }
          while (v81 >= v48);
LABEL_63:
          unint64_t v14 = v78;
          if (v78 < (unint64_t)v80)
          {
            unint64_t v84 = (unint64_t)v80;
            do
            {
              uint64_t v182 = *(void *)(v14 + 16);
              __n128 v156 = *(__n128 *)v14;
              __n128 v85 = *(__n128 *)v84;
              *(_DWORD *)(v14 + 16) = *(_DWORD *)(v84 + 16);
              *(__n128 *)unint64_t v14 = v85;
              BOOL result = v156;
              *(_DWORD *)(v84 + 16) = v182;
              *(__n128 *)unint64_t v84 = v156;
              do
              {
                uint64_t v86 = *(void *)(v14 + 32);
                v14 += 24;
              }
              while (v86 < v48);
              do
              {
                uint64_t v87 = *(void *)(v84 - 16);
                v84 -= 24;
              }
              while (v87 >= v48);
            }
            while (v14 < v84);
          }
        }
        if ((void *)(v14 - 24) != n128_u64)
        {
          BOOL result = *(__n128 *)(v14 - 24);
          *((_DWORD *)n128_u64 + 4) = *(_DWORD *)(v14 - 8);
          *(__n128 *)n128_u64 = result;
        }
        *(void *)(v14 - 24) = v75;
        *(void *)(v14 - 16) = v48;
        *(_DWORD *)(v14 - 8) = v76;
        if (v78 >= (unint64_t)v80) {
          break;
        }
LABEL_74:
        sub_F208A8(n128_u64, v14 - 24, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v88 = sub_F216E4((uint64_t)n128_u64, (__n128 *)(v14 - 24), result);
      if (sub_F216E4(v14, (__n128 *)a2, v89)) {
        break;
      }
      if (!v88) {
        goto LABEL_74;
      }
    }
    a2 = (long long *)(v14 - 24);
    if (!v88) {
      continue;
    }
    return result;
  }
}

BOOL sub_F216E4(uint64_t a1, __n128 *a2, __n128 a3)
{
  switch(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1) >> 3))
  {
    case 0uLL:
    case 1uLL:
      return 1;
    case 2uLL:
      if ((int64_t)a2[-1].n128_u64[0] < *(void *)(a1 + 8))
      {
        __n128 v11 = *(__n128 *)a1;
        uint64_t v12 = *(void *)(a1 + 16);
        int v13 = a2[-1].n128_i32[2];
        *(__n128 *)a1 = *(__n128 *)((char *)a2 - 24);
        *(_DWORD *)(a1 + 16) = v13;
        a2[-1].n128_u32[2] = v12;
        *(__n128 *)((char *)a2 - 24) = v11;
      }
      return 1;
    case 3uLL:
      unint64_t v14 = (__n128 *)(a1 + 24);
      uint64_t v15 = (__n128 *)((char *)a2 - 24);
      uint64_t v16 = *(void *)(a1 + 32);
      uint64_t v17 = a2[-1].n128_i64[0];
      if (v16 < *(void *)(a1 + 8))
      {
        if (v17 >= v16)
        {
          uint64_t v51 = *(void *)(a1 + 16);
          __n128 v52 = *(__n128 *)a1;
          *(__n128 *)a1 = *v14;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 40);
          *unint64_t v14 = v52;
          *(_DWORD *)(a1 + 40) = v51;
          if ((int64_t)a2[-1].n128_u64[0] >= *(void *)(a1 + 32)) {
            return 1;
          }
          __n128 v18 = *v14;
          uint64_t v53 = *(void *)(a1 + 40);
          int v54 = a2[-1].n128_i32[2];
          *unint64_t v14 = *v15;
          *(_DWORD *)(a1 + 40) = v54;
          a2[-1].n128_u32[2] = v53;
        }
        else
        {
          __n128 v18 = *(__n128 *)a1;
          uint64_t v19 = *(void *)(a1 + 16);
          int v20 = a2[-1].n128_i32[2];
          *(__n128 *)a1 = *v15;
          *(_DWORD *)(a1 + 16) = v20;
          a2[-1].n128_u32[2] = v19;
        }
        *uint64_t v15 = v18;
        return 1;
      }
      if (v17 >= v16) {
        return 1;
      }
      __n128 v31 = *v14;
      uint64_t v32 = *(void *)(a1 + 40);
      int v33 = a2[-1].n128_i32[2];
      *unint64_t v14 = *v15;
      *(_DWORD *)(a1 + 40) = v33;
      a2[-1].n128_u32[2] = v32;
      *uint64_t v15 = v31;
      if (*(void *)(a1 + 32) >= *(void *)(a1 + 8)) {
        return 1;
      }
      goto LABEL_45;
    case 4uLL:
      unint64_t v14 = (__n128 *)(a1 + 24);
      uint64_t v21 = (__n128 *)(a1 + 48);
      uint64_t v22 = *(void *)(a1 + 32);
      uint64_t v23 = *(void *)(a1 + 8);
      uint64_t v24 = *(void *)(a1 + 56);
      if (v22 >= v23)
      {
        if (v24 < v22)
        {
          uint64_t v34 = *(void *)(a1 + 40);
          __n128 v35 = *v14;
          *unint64_t v14 = *v21;
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 64);
          *uint64_t v21 = v35;
          *(_DWORD *)(a1 + 64) = v34;
          if (*(void *)(a1 + 32) < v23)
          {
            uint64_t v36 = *(void *)(a1 + 16);
            __n128 v37 = *(__n128 *)a1;
            *(__n128 *)a1 = *v14;
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 40);
            *unint64_t v14 = v37;
            *(_DWORD *)(a1 + 40) = v36;
          }
        }
      }
      else
      {
        if (v24 >= v22)
        {
          uint64_t v55 = *(void *)(a1 + 16);
          __n128 v56 = *(__n128 *)a1;
          *(__n128 *)a1 = *v14;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 40);
          *unint64_t v14 = v56;
          *(_DWORD *)(a1 + 40) = v55;
          if (v24 >= *(void *)(a1 + 32)) {
            goto LABEL_42;
          }
          uint64_t v25 = *(void *)(a1 + 40);
          __n128 v26 = *v14;
          *unint64_t v14 = *v21;
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 64);
        }
        else
        {
          uint64_t v25 = *(void *)(a1 + 16);
          __n128 v26 = *(__n128 *)a1;
          *(__n128 *)a1 = *v21;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 64);
        }
        *uint64_t v21 = v26;
        *(_DWORD *)(a1 + 64) = v25;
      }
LABEL_42:
      if ((int64_t)a2[-1].n128_u64[0] >= *(void *)(a1 + 56)) {
        return 1;
      }
      uint64_t v57 = (__n128 *)((char *)a2 - 24);
      __n128 v58 = *v21;
      uint64_t v59 = *(void *)(a1 + 64);
      int v60 = a2[-1].n128_i32[2];
      *uint64_t v21 = *(__n128 *)((char *)a2 - 24);
      *(_DWORD *)(a1 + 64) = v60;
      v57[1].n128_u32[0] = v59;
      __n128 *v57 = v58;
      if (*(void *)(a1 + 56) >= *(void *)(a1 + 32)) {
        return 1;
      }
      uint64_t v61 = *(void *)(a1 + 40);
      __n128 v62 = *v14;
      *unint64_t v14 = *v21;
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 64);
      *uint64_t v21 = v62;
      *(_DWORD *)(a1 + 64) = v61;
      if (*(void *)(a1 + 32) >= *(void *)(a1 + 8)) {
        return 1;
      }
LABEL_45:
      uint64_t v63 = *(void *)(a1 + 16);
      __n128 v64 = *(__n128 *)a1;
      *(__n128 *)a1 = *v14;
      *(_DWORD *)(a1 + 16) = v14[1].n128_u32[0];
      *unint64_t v14 = v64;
      v14[1].n128_u32[0] = v63;
      return 1;
    case 5uLL:
      sub_F21C10((__n128 *)a1, (__n128 *)(a1 + 24), (__n128 *)(a1 + 48), (__n128 *)(a1 + 72), (__n128 *)((char *)a2 - 24), a3);
      return 1;
    default:
      BOOL v4 = (__n128 *)(a1 + 48);
      BOOL v5 = (__n128 *)(a1 + 24);
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v7 = *(void *)(a1 + 8);
      uint64_t v8 = *(void *)(a1 + 56);
      if (v6 >= v7)
      {
        if (v8 < v6)
        {
          uint64_t v27 = *(void *)(a1 + 40);
          __n128 v28 = *v5;
          *BOOL v5 = *v4;
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 64);
          *BOOL v4 = v28;
          *(_DWORD *)(a1 + 64) = v27;
          if (*(void *)(a1 + 32) < v7)
          {
            uint64_t v29 = *(void *)(a1 + 16);
            __n128 v30 = *(__n128 *)a1;
            *(__n128 *)a1 = *v5;
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 40);
            *BOOL v5 = v30;
            *(_DWORD *)(a1 + 40) = v29;
          }
        }
      }
      else if (v8 >= v6)
      {
        uint64_t v38 = *(void *)(a1 + 16);
        __n128 v39 = *(__n128 *)a1;
        *(__n128 *)a1 = *v5;
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 40);
        *BOOL v5 = v39;
        *(_DWORD *)(a1 + 40) = v38;
        if (v8 < *(void *)(a1 + 32))
        {
          uint64_t v40 = *(void *)(a1 + 40);
          __n128 v41 = *v5;
          *BOOL v5 = *v4;
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 64);
          *BOOL v4 = v41;
          *(_DWORD *)(a1 + 64) = v40;
        }
      }
      else
      {
        uint64_t v9 = *(void *)(a1 + 16);
        __n128 v10 = *(__n128 *)a1;
        *(__n128 *)a1 = *v4;
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 64);
        *BOOL v4 = v10;
        *(_DWORD *)(a1 + 64) = v9;
      }
      long long v42 = (__n128 *)(a1 + 72);
      if ((__n128 *)(a1 + 72) == a2) {
        return 1;
      }
      uint64_t v43 = 0;
      int v44 = 0;
      break;
  }
  while (1)
  {
    int64_t v45 = v42->n128_i64[1];
    if (v45 < (int64_t)v4->n128_u64[1]) {
      break;
    }
LABEL_29:
    BOOL v4 = v42;
    v43 += 24;
    long long v42 = (__n128 *)((char *)v42 + 24);
    if (v42 == a2) {
      return 1;
    }
  }
  unint64_t v46 = v42->n128_u64[0];
  int v47 = v42[1].n128_i32[0];
  uint64_t v48 = v43;
  do
  {
    uint64_t v49 = a1 + v48;
    *(_OWORD *)(v49 + 72) = *(_OWORD *)(a1 + v48 + 48);
    *(_DWORD *)(v49 + 88) = *(_DWORD *)(a1 + v48 + 64);
    if (v48 == -48)
    {
      *(void *)a1 = v46;
      *(void *)(a1 + 8) = v45;
      *(_DWORD *)(a1 + 16) = v47;
      if (++v44 != 8) {
        goto LABEL_29;
      }
      return &v42[1].n128_i8[8] == (__int8 *)a2;
    }
    v48 -= 24;
  }
  while (v45 < *(void *)(v49 + 32));
  uint64_t v50 = a1 + v48;
  *(void *)(v50 + 72) = v46;
  *(void *)(v50 + 80) = v45;
  *(_DWORD *)(v50 + 88) = v47;
  if (++v44 != 8) {
    goto LABEL_29;
  }
  return &v42[1].n128_i8[8] == (__int8 *)a2;
}

__n128 sub_F21C10(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5, __n128 result)
{
  int64_t v6 = a2->n128_i64[1];
  int64_t v7 = a3->n128_i64[1];
  if (v6 >= (int64_t)a1->n128_u64[1])
  {
    if (v7 < v6)
    {
      BOOL result = *a2;
      unint64_t v10 = a2[1].n128_u64[0];
      unsigned __int32 v11 = a3[1].n128_u32[0];
      *a2 = *a3;
      a2[1].n128_u32[0] = v11;
      a3[1].n128_u32[0] = v10;
      *a3 = result;
      if ((int64_t)a2->n128_u64[1] < (int64_t)a1->n128_u64[1])
      {
        BOOL result = *a1;
        unint64_t v12 = a1[1].n128_u64[0];
        unsigned __int32 v13 = a2[1].n128_u32[0];
        *a1 = *a2;
        a1[1].n128_u32[0] = v13;
        a2[1].n128_u32[0] = v12;
        *a2 = result;
      }
    }
  }
  else
  {
    if (v7 < v6)
    {
      BOOL result = *a1;
      unint64_t v8 = a1[1].n128_u64[0];
      unsigned __int32 v9 = a3[1].n128_u32[0];
      *a1 = *a3;
      a1[1].n128_u32[0] = v9;
LABEL_9:
      a3[1].n128_u32[0] = v8;
      *a3 = result;
      goto LABEL_10;
    }
    BOOL result = *a1;
    unint64_t v14 = a1[1].n128_u64[0];
    unsigned __int32 v15 = a2[1].n128_u32[0];
    *a1 = *a2;
    a1[1].n128_u32[0] = v15;
    a2[1].n128_u32[0] = v14;
    *a2 = result;
    if ((int64_t)a3->n128_u64[1] < (int64_t)a2->n128_u64[1])
    {
      BOOL result = *a2;
      unint64_t v8 = a2[1].n128_u64[0];
      unsigned __int32 v16 = a3[1].n128_u32[0];
      *a2 = *a3;
      a2[1].n128_u32[0] = v16;
      goto LABEL_9;
    }
  }
LABEL_10:
  if ((int64_t)a4->n128_u64[1] < (int64_t)a3->n128_u64[1])
  {
    BOOL result = *a3;
    unint64_t v17 = a3[1].n128_u64[0];
    unsigned __int32 v18 = a4[1].n128_u32[0];
    *a3 = *a4;
    a3[1].n128_u32[0] = v18;
    a4[1].n128_u32[0] = v17;
    *a4 = result;
    if ((int64_t)a3->n128_u64[1] < (int64_t)a2->n128_u64[1])
    {
      BOOL result = *a2;
      unint64_t v19 = a2[1].n128_u64[0];
      unsigned __int32 v20 = a3[1].n128_u32[0];
      *a2 = *a3;
      a2[1].n128_u32[0] = v20;
      a3[1].n128_u32[0] = v19;
      *a3 = result;
      if ((int64_t)a2->n128_u64[1] < (int64_t)a1->n128_u64[1])
      {
        BOOL result = *a1;
        unint64_t v21 = a1[1].n128_u64[0];
        unsigned __int32 v22 = a2[1].n128_u32[0];
        *a1 = *a2;
        a1[1].n128_u32[0] = v22;
        a2[1].n128_u32[0] = v21;
        *a2 = result;
      }
    }
  }
  if ((int64_t)a5->n128_u64[1] < (int64_t)a4->n128_u64[1])
  {
    BOOL result = *a4;
    uint64_t v23 = a4[1].n128_i64[0];
    unsigned __int32 v24 = a5[1].n128_u32[0];
    *a4 = *a5;
    a4[1].n128_u32[0] = v24;
    a5[1].n128_u32[0] = v23;
    *a5 = result;
    if ((int64_t)a4->n128_u64[1] < (int64_t)a3->n128_u64[1])
    {
      BOOL result = *a3;
      unint64_t v25 = a3[1].n128_u64[0];
      unsigned __int32 v26 = a4[1].n128_u32[0];
      *a3 = *a4;
      a3[1].n128_u32[0] = v26;
      a4[1].n128_u32[0] = v25;
      *a4 = result;
      if ((int64_t)a3->n128_u64[1] < (int64_t)a2->n128_u64[1])
      {
        BOOL result = *a2;
        unint64_t v27 = a2[1].n128_u64[0];
        unsigned __int32 v28 = a3[1].n128_u32[0];
        *a2 = *a3;
        a2[1].n128_u32[0] = v28;
        a3[1].n128_u32[0] = v27;
        *a3 = result;
        if ((int64_t)a2->n128_u64[1] < (int64_t)a1->n128_u64[1])
        {
          BOOL result = *a1;
          unint64_t v29 = a1[1].n128_u64[0];
          unsigned __int32 v30 = a2[1].n128_u32[0];
          *a1 = *a2;
          a1[1].n128_u32[0] = v30;
          a2[1].n128_u32[0] = v29;
          *a2 = result;
        }
      }
    }
  }
  return result;
}

long long *sub_F21E58(uint64_t a1, long long *a2, long long *a3)
{
  if ((long long *)a1 == a2) {
    return a3;
  }
  uint64_t v3 = (uint64_t)a2 - a1;
  uint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1) >> 3);
  if ((uint64_t)a2 - a1 >= 25 && (unint64_t)v3 >= 0x30)
  {
    int64_t v46 = (unint64_t)(v4 - 2) >> 1;
    int64_t v47 = v46;
    do
    {
      if (v46 >= v47)
      {
        uint64_t v48 = (2 * v47) | 1;
        uint64_t v49 = (long long *)(a1 + 24 * v48);
        if (2 * v47 + 2 < v4)
        {
          uint64_t v50 = *(void *)(a1 + 24 * v48 + 8);
          uint64_t v51 = *((void *)v49 + 4);
          uint64_t v49 = (long long *)((char *)v49 + 24 * (v50 < v51));
          if (v50 < v51) {
            uint64_t v48 = 2 * v47 + 2;
          }
        }
        uint64_t v52 = *(void *)(a1 + 24 * v47 + 8);
        if (*((void *)v49 + 1) >= v52)
        {
          uint64_t v53 = (uint64_t *)(a1 + 24 * v47);
          uint64_t v54 = *v53;
          int v55 = *((_DWORD *)v53 + 4);
          do
          {
            __n128 v56 = v53;
            uint64_t v53 = (uint64_t *)v49;
            long long v57 = *v49;
            *((_DWORD *)v56 + 4) = *((_DWORD *)v49 + 4);
            *(_OWORD *)__n128 v56 = v57;
            if (v46 < v48) {
              break;
            }
            uint64_t v58 = (2 * v48) | 1;
            uint64_t v49 = (long long *)(a1 + 24 * v58);
            uint64_t v59 = 2 * v48 + 2;
            if (v59 < v4)
            {
              uint64_t v60 = *(void *)(a1 + 24 * v58 + 8);
              uint64_t v61 = *((void *)v49 + 4);
              uint64_t v49 = (long long *)((char *)v49 + 24 * (v60 < v61));
              if (v60 < v61) {
                uint64_t v58 = v59;
              }
            }
            uint64_t v48 = v58;
          }
          while (*((void *)v49 + 1) >= v52);
          *uint64_t v53 = v54;
          v53[1] = v52;
          *((_DWORD *)v53 + 4) = v55;
        }
      }
      BOOL v27 = v47-- <= 0;
    }
    while (!v27);
  }
  BOOL v5 = a2;
  if (a2 != a3)
  {
    if (v3 < 48)
    {
      int64_t v6 = a2;
      do
      {
        if (*((void *)v6 + 1) < *(void *)(a1 + 8))
        {
          long long v7 = *v6;
          uint64_t v8 = *((void *)v6 + 2);
          int v9 = *(_DWORD *)(a1 + 16);
          *int64_t v6 = *(_OWORD *)a1;
          *((_DWORD *)v6 + 4) = v9;
          *(_DWORD *)(a1 + 16) = v8;
          *(_OWORD *)a1 = v7;
        }
        int64_t v6 = (long long *)((char *)v6 + 24);
      }
      while (v6 != a3);
LABEL_28:
      BOOL v5 = a3;
      goto LABEL_29;
    }
    unint64_t v10 = a2;
    while (1)
    {
      if (*((void *)v10 + 1) < *(void *)(a1 + 8))
      {
        long long v11 = *v10;
        uint64_t v12 = *((void *)v10 + 2);
        int v13 = *(_DWORD *)(a1 + 16);
        *unint64_t v10 = *(_OWORD *)a1;
        *((_DWORD *)v10 + 4) = v13;
        *(_DWORD *)(a1 + 16) = v12;
        *(_OWORD *)a1 = v11;
        if ((unint64_t)v4 < 3)
        {
          uint64_t v14 = a1 + 24;
          int64_t v15 = 1;
          uint64_t v16 = *(void *)(a1 + 8);
          if (*(void *)(a1 + 32) >= v16) {
            goto LABEL_21;
          }
        }
        else
        {
          uint64_t v14 = a1 + 24 + 24 * (*(void *)(a1 + 32) < *(void *)(a1 + 56));
          if (*(void *)(a1 + 32) >= *(void *)(a1 + 56)) {
            int64_t v15 = 1;
          }
          else {
            int64_t v15 = 2;
          }
          uint64_t v16 = *(void *)(a1 + 8);
          if (*(void *)(v14 + 8) >= v16)
          {
LABEL_21:
            uint64_t v17 = *(void *)a1;
            int v18 = *(_DWORD *)(a1 + 16);
            uint64_t v19 = a1;
            do
            {
              uint64_t v20 = v19;
              uint64_t v19 = v14;
              long long v21 = *(_OWORD *)v14;
              *(_DWORD *)(v20 + 16) = *(_DWORD *)(v14 + 16);
              *(_OWORD *)uint64_t v20 = v21;
              if ((uint64_t)((unint64_t)(v4 - 2) >> 1) < v15) {
                break;
              }
              uint64_t v22 = (2 * v15) | 1;
              uint64_t v14 = a1 + 24 * v22;
              uint64_t v23 = 2 * v15 + 2;
              if (v23 < v4)
              {
                uint64_t v24 = *(void *)(a1 + 24 * v22 + 8);
                uint64_t v25 = *(void *)(v14 + 32);
                v14 += 24 * (v24 < v25);
                if (v24 < v25) {
                  uint64_t v22 = v23;
                }
              }
              int64_t v15 = v22;
            }
            while (*(void *)(v14 + 8) >= v16);
            *(void *)uint64_t v19 = v17;
            *(void *)(v19 + 8) = v16;
            *(_DWORD *)(v19 + 16) = v18;
          }
        }
      }
      unint64_t v10 = (long long *)((char *)v10 + 24);
      if (v10 == a3) {
        goto LABEL_28;
      }
    }
  }
LABEL_29:
  if (v3 >= 25)
  {
    int64_t v26 = v3 / 0x18uLL;
    do
    {
      uint64_t v28 = 0;
      long long v62 = *(_OWORD *)a1;
      uint64_t v63 = *(void *)(a1 + 16);
      unint64_t v29 = (long long *)a1;
      do
      {
        uint64_t v31 = v28 + 1;
        uint64_t v32 = (long long *)((char *)v29 + 24 * v28 + 24);
        uint64_t v33 = (2 * v28) | 1;
        uint64_t v34 = 2 * v28 + 2;
        if (v34 < v26)
        {
          uint64_t v35 = *((void *)v29 + 3 * v31 + 1);
          uint64_t v36 = *((void *)v32 + 4);
          uint64_t v32 = (long long *)((char *)v32 + 24 * (v35 < v36));
          if (v35 < v36) {
            uint64_t v33 = v34;
          }
        }
        long long v30 = *v32;
        *((_DWORD *)v29 + 4) = *((_DWORD *)v32 + 4);
        *unint64_t v29 = v30;
        unint64_t v29 = v32;
        uint64_t v28 = v33;
      }
      while (v33 <= (uint64_t)((unint64_t)(v26 - 2) >> 1));
      a2 = (long long *)((char *)a2 - 24);
      if (v32 == a2)
      {
        *((_DWORD *)v32 + 4) = v63;
        *uint64_t v32 = v62;
      }
      else
      {
        long long v37 = *a2;
        *((_DWORD *)v32 + 4) = *((_DWORD *)a2 + 4);
        *uint64_t v32 = v37;
        *a2 = v62;
        *((_DWORD *)a2 + 4) = v63;
        uint64_t v38 = (uint64_t)v32 - a1 + 24;
        if (v38 >= 25)
        {
          unint64_t v39 = (v38 / 0x18uLL - 2) >> 1;
          uint64_t v40 = *((void *)v32 + 1);
          if (*(void *)(a1 + 24 * v39 + 8) < v40)
          {
            uint64_t v41 = *(void *)v32;
            int v42 = *((_DWORD *)v32 + 4);
            do
            {
              uint64_t v43 = v32;
              uint64_t v32 = (long long *)(a1 + 24 * v39);
              long long v44 = *v32;
              *((_DWORD *)v43 + 4) = *((_DWORD *)v32 + 4);
              *uint64_t v43 = v44;
              if (!v39) {
                break;
              }
              unint64_t v39 = (v39 - 1) >> 1;
            }
            while (*(void *)(a1 + 24 * v39 + 8) < v40);
            *(void *)uint64_t v32 = v41;
            *((void *)v32 + 1) = v40;
            *((_DWORD *)v32 + 4) = v42;
          }
        }
      }
      BOOL v27 = v26-- <= 2;
    }
    while (!v27);
  }
  return v5;
}

void sub_F22290()
{
  unk_25FCD27 = 16641;
  word_25FCD10 = 65;
  byte_25FCD3F = 1;
  byte_25FCD29 = 0;
}

uint64_t sub_F222B8(uint64_t a1, void *a2, uint64_t *a3, int a4)
{
  uint64_t v6 = *a3;
  *(void *)&long long v11 = a3[1];
  *(void *)((char *)&v11 + 7) = *(uint64_t *)((char *)a3 + 15);
  char v7 = *((unsigned char *)a3 + 23);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  *(_DWORD *)a1 = a4;
  *(void *)(a1 + 23) = *(void *)((char *)&v11 + 7);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v11;
  *(unsigned char *)(a1 + 31) = v7;
  sub_F261A8(a1 + 32);
  sub_F71E98((void *)(a1 + 1256));
  sub_F71E98((void *)(a1 + 1280));
  sub_F22420((void *)a1, a2);
  if (*(_DWORD *)a1 == -1)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    unint64_t v10 = (void *)sub_2F480((uint64_t)exception, 8u);
  }
  return a1;
}

void sub_F223C4(_Unwind_Exception *a1)
{
  BOOL v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 1264) = v5;
    operator delete(v5);
  }
  sub_3817F8(v2);
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(a1);
}

void sub_F22420(void *a1, void *a2)
{
  BYTE7(v291[1]) = 13;
  strcpy((char *)v291, "walking_speed");
  v290[0] = 0x4012CCCCCCCCCCCDLL;
  uint64_t v4 = sub_58070(a2, (uint64_t)v291);
  if (v4)
  {
    BOOL v5 = v4 + 5;
    if (*((_DWORD *)v4 + 12) != 1) {
      BOOL v5 = v290;
    }
    a1[7] = *v5;
    if (SBYTE7(v291[1]) < 0) {
      goto LABEL_5;
    }
  }
  else
  {
    a1[7] = 0x4012CCCCCCCCCCCDLL;
    if (SBYTE7(v291[1]) < 0) {
LABEL_5:
    }
      operator delete(*(void **)&v291[0]);
  }
  *(void *)&v291[0] = operator new(0x20uLL);
  v286[1] = xmmword_20B91C0;
  *(_OWORD *)((char *)v291 + 8) = xmmword_20B91C0;
  strcpy(*(char **)&v291[0], "fallback_ferry_speed_kph");
  v290[0] = 0x4041800000000000;
  uint64_t v6 = sub_58070(a2, (uint64_t)v291);
  if (!v6)
  {
    a1[8] = 0x4041800000000000;
    if ((SBYTE7(v291[1]) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  char v7 = v6 + 5;
  if (*((_DWORD *)v6 + 12) != 1) {
    char v7 = v290;
  }
  a1[8] = *v7;
  if (SBYTE7(v291[1]) < 0) {
LABEL_10:
  }
    operator delete(*(void **)&v291[0]);
LABEL_11:
  *(void *)&v291[0] = operator new(0x28uLL);
  v283[0] = xmmword_20B9280;
  *(_OWORD *)((char *)v291 + 8) = xmmword_20B9280;
  strcpy(*(char **)&v291[0], "fixed_driving_speed_scaling_factor");
  uint64_t v8 = sub_58070(a2, (uint64_t)v291);
  int v9 = a1 + 5;
  if (v8)
  {
    int v9 = v8 + 5;
    if (*((_DWORD *)v8 + 12) != 1) {
      int v9 = a1 + 5;
    }
  }
  a1[5] = *v9;
  if (SBYTE7(v291[1]) < 0) {
    operator delete(*(void **)&v291[0]);
  }
  BYTE7(v291[1]) = 19;
  strcpy((char *)v291, "fixed_driving_speed");
  v290[0] = 0x405C29DC725C3DEFLL;
  unint64_t v10 = sub_58070(a2, (uint64_t)v291);
  if (v10)
  {
    long long v11 = v10 + 5;
    if (*((_DWORD *)v10 + 12) != 1) {
      long long v11 = v290;
    }
    a1[6] = *v11;
    if (SBYTE7(v291[1]) < 0) {
      goto LABEL_20;
    }
  }
  else
  {
    a1[6] = 0x405C29DC725C3DEFLL;
    if (SBYTE7(v291[1]) < 0) {
LABEL_20:
    }
      operator delete(*(void **)&v291[0]);
  }
  BYTE7(v291[1]) = 14;
  strcpy((char *)v291, "fallback_speed");
  uint64_t v12 = sub_58070(a2, (uint64_t)v291);
  int v13 = v12;
  uint64_t v280 = a1;
  if (SBYTE7(v291[1]) < 0)
  {
    operator delete(*(void **)&v291[0]);
    if (!v13) {
      goto LABEL_42;
    }
  }
  else if (!v12)
  {
    goto LABEL_42;
  }
  BYTE7(v291[1]) = 14;
  strcpy((char *)v291, "fallback_speed");
  uint64_t v14 = (uint64_t *)sub_5C4AC(a2, (uint64_t)v291);
  int64_t v15 = v14;
  if (SBYTE7(v291[1]) < 0)
  {
    operator delete(*(void **)&v291[0]);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    if (*v15 == v17) {
      goto LABEL_42;
    }
    goto LABEL_35;
  }
  uint64_t v16 = *v14;
  uint64_t v17 = v14[1];
  if (*v14 != v17)
  {
LABEL_35:
    int v18 = v280 + 9;
    while (1)
    {
      if (*(_DWORD *)(v16 + 8) != 2)
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_23FDF58;
      }
      uint64_t v19 = *(void **)v16;
      BYTE7(v291[1]) = 5;
      strcpy((char *)v291, "speed");
      double v20 = sub_5C7E8(v19, (uint64_t)v291);
      HIBYTE(v290[2]) = 3;
      strcpy((char *)v290, "frc");
      *(double *)&v18[sub_31AC04(v19, (uint64_t)v290)] = v20;
      if (SHIBYTE(v290[2]) < 0)
      {
        operator delete((void *)v290[0]);
        if ((SBYTE7(v291[1]) & 0x80000000) == 0) {
          goto LABEL_37;
        }
LABEL_41:
        operator delete(*(void **)&v291[0]);
        v16 += 16;
        if (v16 == v17) {
          break;
        }
      }
      else
      {
        if (SBYTE7(v291[1]) < 0) {
          goto LABEL_41;
        }
LABEL_37:
        v16 += 16;
        if (v16 == v17) {
          break;
        }
      }
    }
  }
LABEL_42:
  *(void *)&v291[0] = operator new(0x19uLL);
  long long v285 = xmmword_20B9250;
  *(_OWORD *)((char *)v291 + 8) = xmmword_20B9250;
  strcpy(*(char **)&v291[0], "use_fixed_parking_speed");
  long long v21 = sub_58070(a2, (uint64_t)v291);
  uint64_t v22 = v280;
  if (v21)
  {
    BOOL v23 = *((_DWORD *)v21 + 12) == 4;
    *((unsigned char *)v280 + 152) = v23;
    if ((SBYTE7(v291[1]) & 0x80000000) == 0) {
      goto LABEL_44;
    }
  }
  else
  {
    BOOL v23 = 0;
    *((unsigned char *)v280 + 152) = 0;
    if ((SBYTE7(v291[1]) & 0x80000000) == 0)
    {
LABEL_44:
      if (!v23) {
        goto LABEL_50;
      }
      goto LABEL_48;
    }
  }
  operator delete(*(void **)&v291[0]);
  if (!*((unsigned char *)v22 + 152)) {
    goto LABEL_50;
  }
LABEL_48:
  BYTE7(v291[1]) = 13;
  strcpy((char *)v291, "parking_speed");
  *((double *)v22 + 20) = sub_5C7E8(a2, (uint64_t)v291);
  if (SBYTE7(v291[1]) < 0) {
    operator delete(*(void **)&v291[0]);
  }
LABEL_50:
  *(void *)&v291[0] = operator new(0x20uLL);
  v283[1] = xmmword_20B8E90;
  *(_OWORD *)((char *)v291 + 8) = xmmword_20B8E90;
  v286[0] = *(_OWORD *)"live_old_traffic_cutoff_minutes";
  strcpy(*(char **)&v291[0], "live_old_traffic_cutoff_minutes");
  long long v284 = *(_OWORD *)"c_cutoff_minutes";
  uint64_t v24 = sub_58070(a2, (uint64_t)v291);
  uint64_t v25 = v24;
  if (SBYTE7(v291[1]) < 0)
  {
    operator delete(*(void **)&v291[0]);
    if (!v25) {
      goto LABEL_56;
    }
  }
  else if (!v24)
  {
    goto LABEL_56;
  }
  int64_t v26 = (char *)operator new(0x20uLL);
  *(void *)&v291[0] = v26;
  *(_OWORD *)((char *)v291 + 8) = v283[1];
  *(_OWORD *)int64_t v26 = v286[0];
  *(_OWORD *)(v26 + 15) = v284;
  v26[31] = 0;
  *((_DWORD *)v22 + 43) = 600 * sub_319F48(a2, (uint64_t)v291);
  if (SBYTE7(v291[1]) < 0) {
    operator delete(*(void **)&v291[0]);
  }
LABEL_56:
  *(void *)&v291[0] = operator new(0x20uLL);
  long long v284 = xmmword_20B8870;
  *(_OWORD *)((char *)v291 + 8) = xmmword_20B8870;
  v286[0] = *(_OWORD *)"live_time_horizon_minutes";
  strcpy(*(char **)&v291[0], "live_time_horizon_minutes");
  v283[2] = *(_OWORD *)"_horizon_minutes";
  BOOL v27 = sub_58070(a2, (uint64_t)v291);
  uint64_t v28 = v27;
  if (SBYTE7(v291[1]) < 0)
  {
    operator delete(*(void **)&v291[0]);
    if (!v28) {
      goto LABEL_62;
    }
  }
  else if (!v27)
  {
    goto LABEL_62;
  }
  unint64_t v29 = (char *)operator new(0x20uLL);
  *(void *)&v291[0] = v29;
  *(_OWORD *)((char *)v291 + 8) = v284;
  *(_OWORD *)unint64_t v29 = v286[0];
  *(_OWORD *)(v29 + 9) = v283[2];
  v29[25] = 0;
  *((_DWORD *)v22 + 42) = 600 * sub_319F48(a2, (uint64_t)v291);
  if (SBYTE7(v291[1]) < 0) {
    operator delete(*(void **)&v291[0]);
  }
LABEL_62:
  BYTE7(v291[1]) = 18;
  v286[0] = *(_OWORD *)"live_max_cbr_level";
  strcpy((char *)v291, "live_max_cbr_level");
  long long v30 = sub_58070(a2, (uint64_t)v291);
  uint64_t v31 = v30;
  if (SBYTE7(v291[1]) < 0)
  {
    operator delete(*(void **)&v291[0]);
    if (!v31) {
      goto LABEL_72;
    }
  }
  else if (!v30)
  {
    goto LABEL_72;
  }
  BYTE7(v291[1]) = 18;
  strcpy((char *)&v291[1], "el");
  v291[0] = v286[0];
  int v32 = sub_319F48(a2, (uint64_t)v291);
  if (SBYTE7(v291[1]) < 0) {
    operator delete(*(void **)&v291[0]);
  }
  if (v32 < 0) {
    int v33 = -1;
  }
  else {
    int v33 = v32;
  }
  *((_DWORD *)v22 + 48) = v33;
LABEL_72:
  *(void *)&v291[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v291 + 8) = v284;
  v286[0] = *(_OWORD *)"live_speeds_max_cbr_level";
  strcpy(*(char **)&v291[0], "live_speeds_max_cbr_level");
  v283[2] = *(_OWORD *)"ds_max_cbr_level";
  uint64_t v34 = sub_58070(a2, (uint64_t)v291);
  uint64_t v35 = v34;
  if (SBYTE7(v291[1]) < 0)
  {
    operator delete(*(void **)&v291[0]);
    if (!v35) {
      goto LABEL_82;
    }
  }
  else if (!v34)
  {
    goto LABEL_82;
  }
  uint64_t v36 = (char *)operator new(0x20uLL);
  *(void *)&v291[0] = v36;
  *(_OWORD *)((char *)v291 + 8) = v284;
  *(_OWORD *)uint64_t v36 = v286[0];
  *(_OWORD *)(v36 + 9) = v283[2];
  v36[25] = 0;
  int v37 = sub_319F48(a2, (uint64_t)v291);
  if (SBYTE7(v291[1]) < 0) {
    operator delete(*(void **)&v291[0]);
  }
  if (v37 < 0) {
    int v38 = -1;
  }
  else {
    int v38 = v37;
  }
  *((_DWORD *)v22 + 48) = v38;
LABEL_82:
  *(void *)&v291[0] = operator new(0x28uLL);
  long long v281 = xmmword_20B9240;
  *(_OWORD *)((char *)v291 + 8) = xmmword_20B9240;
  v286[0] = *(_OWORD *)"live_incident_blockages_max_cbr_level";
  strcpy(*(char **)&v291[0], "live_incident_blockages_max_cbr_level");
  v283[2] = *(_OWORD *)"ockages_max_cbr_level";
  unint64_t v39 = sub_58070(a2, (uint64_t)v291);
  uint64_t v40 = v39;
  if (SBYTE7(v291[1]) < 0)
  {
    operator delete(*(void **)&v291[0]);
    if (!v40) {
      goto LABEL_92;
    }
  }
  else if (!v39)
  {
    goto LABEL_92;
  }
  uint64_t v41 = operator new(0x28uLL);
  *(void *)&v291[0] = v41;
  *(_OWORD *)((char *)v291 + 8) = v281;
  *(_OWORD *)uint64_t v41 = v286[0];
  *((_OWORD *)v41 + 1) = v283[2];
  strcpy((char *)v41 + 29, "br_level");
  int v42 = sub_319F48(a2, (uint64_t)v291);
  if (SBYTE7(v291[1]) < 0) {
    operator delete(*(void **)&v291[0]);
  }
  if (v42 < 0) {
    int v43 = -1;
  }
  else {
    int v43 = v42;
  }
  *((_DWORD *)v22 + 49) = v43;
LABEL_92:
  BYTE7(v291[1]) = 19;
  v286[0] = *(_OWORD *)"max_on_demand_level";
  strcpy((char *)v291, "max_on_demand_level");
  long long v44 = sub_58070(a2, (uint64_t)v291);
  int64_t v45 = v44;
  if (SBYTE7(v291[1]) < 0)
  {
    operator delete(*(void **)&v291[0]);
    if (!v45) {
      goto LABEL_102;
    }
  }
  else if (!v44)
  {
    goto LABEL_102;
  }
  BYTE7(v291[1]) = 19;
  strcpy((char *)v291 + 15, "evel");
  v291[0] = v286[0];
  int v46 = sub_319F48(a2, (uint64_t)v291);
  if (SBYTE7(v291[1]) < 0) {
    operator delete(*(void **)&v291[0]);
  }
  if (v46 < 0) {
    int v47 = -1;
  }
  else {
    int v47 = v46;
  }
  *((_DWORD *)v22 + 50) = v47;
LABEL_102:
  BYTE7(v291[1]) = 15;
  strcpy((char *)v291, "use_live_speeds");
  uint64_t v48 = sub_58070(a2, (uint64_t)v291);
  uint64_t v49 = v48;
  if (SBYTE7(v291[1]) < 0)
  {
    operator delete(*(void **)&v291[0]);
    if (!v49) {
      goto LABEL_108;
    }
  }
  else if (!v48)
  {
    goto LABEL_108;
  }
  BYTE7(v291[1]) = 15;
  strcpy((char *)v291, "use_live_speeds");
  *((unsigned char *)v22 + 176) = sub_29D62C(a2, (uint64_t)v291);
  if (SBYTE7(v291[1]) < 0) {
    operator delete(*(void **)&v291[0]);
  }
LABEL_108:
  BYTE7(v291[1]) = 10;
  strcpy((char *)v291, "live_ratio");
  uint64_t v50 = sub_58070(a2, (uint64_t)v291);
  uint64_t v51 = (double *)(v22 + 23);
  if (v50)
  {
    uint64_t v51 = (double *)(v50 + 5);
    if (*((_DWORD *)v50 + 12) != 1) {
      uint64_t v51 = (double *)(v22 + 23);
    }
  }
  *((double *)v22 + 23) = fmax(fmin(*v51, 1.0), 0.0);
  if (SBYTE7(v291[1]) < 0) {
    operator delete(*(void **)&v291[0]);
  }
  *(void *)&v291[0] = operator new(0x20uLL);
  v283[2] = xmmword_20B91A0;
  *(_OWORD *)((char *)v291 + 8) = xmmword_20B91A0;
  v286[0] = *(_OWORD *)"use_live_incident_blockages";
  strcpy(*(char **)&v291[0], "use_live_incident_blockages");
  v282[1] = *(_OWORD *)"cident_blockages";
  uint64_t v52 = sub_58070(a2, (uint64_t)v291);
  uint64_t v53 = v52;
  if (SBYTE7(v291[1]) < 0)
  {
    operator delete(*(void **)&v291[0]);
    if (!v53) {
      goto LABEL_119;
    }
  }
  else if (!v52)
  {
    goto LABEL_119;
  }
  uint64_t v54 = (char *)operator new(0x20uLL);
  *(void *)&v291[0] = v54;
  *(_OWORD *)((char *)v291 + 8) = v283[2];
  *(_OWORD *)uint64_t v54 = v286[0];
  *(_OWORD *)(v54 + 11) = v282[1];
  v54[27] = 0;
  *((unsigned char *)v22 + 177) = sub_29D62C(a2, (uint64_t)v291);
  if (SBYTE7(v291[1]) < 0) {
    operator delete(*(void **)&v291[0]);
  }
LABEL_119:
  *(void *)&v291[0] = operator new(0x19uLL);
  *(_OWORD *)((char *)v291 + 8) = v285;
  v286[0] = *(_OWORD *)"use_regional_live_cells";
  strcpy(*(char **)&v291[0], "use_regional_live_cells");
  int v55 = sub_58070(a2, (uint64_t)v291);
  __n128 v56 = v55;
  if (SBYTE7(v291[1]) < 0)
  {
    operator delete(*(void **)&v291[0]);
    if (!v56) {
      goto LABEL_125;
    }
  }
  else if (!v55)
  {
    goto LABEL_125;
  }
  long long v57 = (char *)operator new(0x19uLL);
  *(void *)&v291[0] = v57;
  *(_OWORD *)((char *)v291 + 8) = v285;
  *(_OWORD *)long long v57 = v286[0];
  strcpy(v57 + 15, "ve_cells");
  *((unsigned char *)v22 + 204) = sub_29D62C(a2, (uint64_t)v291);
  if (SBYTE7(v291[1]) < 0) {
    operator delete(*(void **)&v291[0]);
  }
LABEL_125:
  *(void *)&v291[0] = operator new(0x28uLL);
  v286[0] = xmmword_20B93A0;
  *(_OWORD *)((char *)v291 + 8) = xmmword_20B93A0;
  qmemcpy(v282, "cidents_as_blocktreat_live_nt_in", sizeof(v282));
  strcpy(*(char **)&v291[0], "treat_live_nt_incidents_as_blocking");
  uint64_t v58 = sub_58070(a2, (uint64_t)v291);
  uint64_t v59 = v58;
  if (SBYTE7(v291[1]) < 0)
  {
    operator delete(*(void **)&v291[0]);
    if (!v59) {
      goto LABEL_131;
    }
  }
  else if (!v58)
  {
    goto LABEL_131;
  }
  uint64_t v60 = (char *)operator new(0x28uLL);
  *(void *)&v291[0] = v60;
  *(_OWORD *)((char *)v291 + 8) = v286[0];
  strcpy(v60 + 31, "king");
  *(_OWORD *)uint64_t v60 = v282[1];
  *((_OWORD *)v60 + 1) = v282[0];
  *((unsigned char *)v22 + 179) = sub_29D62C(a2, (uint64_t)v291);
  if (SBYTE7(v291[1]) < 0) {
    operator delete(*(void **)&v291[0]);
  }
LABEL_131:
  *(void *)&v291[0] = operator new(0x28uLL);
  *(_OWORD *)((char *)v291 + 8) = v286[0];
  qmemcpy(v282, "n_live_time_horiblockages_only_i", sizeof(v282));
  strcpy(*(char **)&v291[0], "blockages_only_in_live_time_horizon");
  uint64_t v61 = sub_58070(a2, (uint64_t)v291);
  long long v62 = v61;
  if (SBYTE7(v291[1]) < 0)
  {
    operator delete(*(void **)&v291[0]);
    if (!v62) {
      goto LABEL_137;
    }
  }
  else if (!v61)
  {
    goto LABEL_137;
  }
  uint64_t v63 = (char *)operator new(0x28uLL);
  *(void *)&v291[0] = v63;
  *(_OWORD *)((char *)v291 + 8) = v286[0];
  strcpy(v63 + 31, "izon");
  *(_OWORD *)uint64_t v63 = v282[1];
  *((_OWORD *)v63 + 1) = v282[0];
  *((unsigned char *)v22 + 178) = sub_29D62C(a2, (uint64_t)v291);
  if (SBYTE7(v291[1]) < 0) {
    operator delete(*(void **)&v291[0]);
  }
LABEL_137:
  BYTE7(v291[1]) = 15;
  strcpy((char *)v291, "time_dependency");
  __n128 v64 = sub_58070(a2, (uint64_t)v291);
  uint64_t v65 = v64;
  if (SBYTE7(v291[1]) < 0)
  {
    operator delete(*(void **)&v291[0]);
    if (!v65) {
      goto LABEL_161;
    }
  }
  else if (!v64)
  {
    goto LABEL_161;
  }
  BYTE7(v291[1]) = 15;
  strcpy((char *)v291, "time_dependency");
  int v66 = (void *)sub_560F4(a2, (uint64_t)v291);
  if (SBYTE7(v291[1]) < 0) {
    operator delete(*(void **)&v291[0]);
  }
  BYTE7(v291[1]) = 19;
  strcpy((char *)v291, "use_time_dependency");
  __n128 v67 = sub_58070(v66, (uint64_t)v291);
  if (v67 && (int v68 = *((_DWORD *)v67 + 12), (v68 & 0xFFFFFFFE) == 4))
  {
    *((unsigned char *)v22 + 232) = v68 == 4;
    if (SBYTE7(v291[1]) < 0) {
      goto LABEL_148;
    }
  }
  else
  {
    *((unsigned char *)v22 + 232) = *((unsigned char *)v22 + 232) != 0;
    if (SBYTE7(v291[1]) < 0) {
LABEL_148:
    }
      operator delete(*(void **)&v291[0]);
  }
  BYTE7(v291[1]) = 7;
  strcpy((char *)v291, "use_hsp");
  int v69 = sub_58070(v66, (uint64_t)v291);
  if (v69 && (int v70 = *((_DWORD *)v69 + 12), (v70 & 0xFFFFFFFE) == 4))
  {
    *((unsigned char *)v22 + 233) = v70 == 4;
    if (SBYTE7(v291[1]) < 0) {
      goto LABEL_154;
    }
  }
  else
  {
    *((unsigned char *)v22 + 233) = *((unsigned char *)v22 + 233) != 0;
    if (SBYTE7(v291[1]) < 0) {
LABEL_154:
    }
      operator delete(*(void **)&v291[0]);
  }
  v282[1] = *(_OWORD *)"blending_start_minutes";
  strcpy((char *)v291, "blending_start_minutes");
  BYTE7(v291[1]) = 22;
  uint64_t v71 = sub_58070(v66, (uint64_t)v291);
  uint64_t v72 = v71;
  if (SBYTE7(v291[1]) < 0)
  {
    operator delete(*(void **)&v291[0]);
    if (!v72) {
      goto LABEL_161;
    }
  }
  else if (!v71)
  {
    goto LABEL_161;
  }
  v291[0] = v282[1];
  strcpy((char *)v291 + 14, "_minutes");
  BYTE7(v291[1]) = 22;
  *((_DWORD *)v22 + 59) = 600 * sub_319F48(v66, (uint64_t)v291);
  if (SBYTE7(v291[1]) < 0) {
    operator delete(*(void **)&v291[0]);
  }
LABEL_161:
  strcpy((char *)v291, "interpolate_turn_costs");
  BYTE7(v291[1]) = 22;
  __n128 v73 = sub_58070(a2, (uint64_t)v291);
  if (v73 && (int v74 = *((_DWORD *)v73 + 12), (v74 & 0xFFFFFFFE) == 4))
  {
    *((unsigned char *)v22 + 624) = v74 == 4;
    if ((SBYTE7(v291[1]) & 0x80000000) == 0) {
      goto LABEL_167;
    }
  }
  else
  {
    *((unsigned char *)v22 + 624) = *((unsigned char *)v22 + 624) != 0;
    if ((SBYTE7(v291[1]) & 0x80000000) == 0) {
      goto LABEL_167;
    }
  }
  operator delete(*(void **)&v291[0]);
LABEL_167:
  memset(v291, 0, 24);
  HIBYTE(v290[2]) = 10;
  strcpy((char *)v290, "turn_costs");
  sub_F1675C(a2, (uint64_t)v290, (uint64_t)v291);
  if (SHIBYTE(v290[2]) < 0) {
    operator delete((void *)v290[0]);
  }
  sub_F15348((uint64_t *)v291, *((unsigned char *)v22 + 624), 0, 0, (uint64_t)v290);
  uint64_t v75 = (void **)(v22 + 69);
  uint64_t v76 = (void **)(v22 + 33);
  uint64_t v77 = (void *)v22[66];
  if (v77)
  {
    v22[67] = v77;
    operator delete(v77);
    v22[66] = 0;
    v22[67] = 0;
    v22[68] = 0;
  }
  unint64_t v78 = (char *)v290[0];
  v22[66] = v290[0];
  uint64_t v79 = (char *)v290[1];
  *(_OWORD *)(v22 + 67) = *(_OWORD *)&v290[1];
  sub_457964(v22 + 69, v78, v79, (v79 - v78) >> 4);
  memset(v290, 0, sizeof(v290));
  strcpy(v289, "parking_lot_turn_costs");
  v289[23] = 22;
  sub_F1675C(a2, (uint64_t)v289, (uint64_t)v290);
  if ((v289[23] & 0x80000000) != 0) {
    operator delete(*(void **)v289);
  }
  sub_F15348(v290, *((unsigned char *)v22 + 624), 0, 0, (uint64_t)v289);
  uint64_t v80 = (void *)v22[72];
  if (v80)
  {
    v22[73] = v80;
    operator delete(v80);
    v22[72] = 0;
    v22[73] = 0;
    v22[74] = 0;
  }
  *((_OWORD *)v22 + 36) = *(_OWORD *)v289;
  v22[74] = *(void *)&v289[16];
  *(void *)uint64_t v289 = operator new(0x20uLL);
  v282[1] = xmmword_20B5EB0;
  *(_OWORD *)&v289[8] = xmmword_20B5EB0;
  v282[0] = *(_OWORD *)"turn_costs_against_traffic";
  strcpy(*(char **)v289, "turn_costs_against_traffic");
  v279[3] = *(_OWORD *)"_against_traffic";
  uint64_t v81 = sub_58070(a2, (uint64_t)v289);
  unsigned int v82 = v81;
  if ((v289[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v289);
    if (!v82) {
      goto LABEL_185;
    }
  }
  else if (!v81)
  {
    goto LABEL_185;
  }
  memset(v289, 0, sizeof(v289));
  uint64_t v83 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v288 = v83;
  *(_OWORD *)&v288[8] = v282[1];
  *(_OWORD *)uint64_t v83 = v282[0];
  *(_OWORD *)(v83 + 10) = v279[3];
  v83[26] = 0;
  sub_F1675C(a2, (uint64_t)v288, (uint64_t)v289);
  if ((v288[23] & 0x80000000) != 0) {
    operator delete(*(void **)v288);
  }
  sub_F15348((uint64_t *)v289, *((unsigned char *)v22 + 624), 0, 0, (uint64_t)v288);
  unint64_t v84 = *v75;
  if (*v75)
  {
    v22[70] = v84;
    operator delete(v84);
    *uint64_t v75 = 0;
    v22[70] = 0;
    v22[71] = 0;
  }
  *(_OWORD *)uint64_t v75 = *(_OWORD *)v288;
  v22[71] = *(void *)&v288[16];
  if (*(void *)v289)
  {
    *(void *)&v289[8] = *(void *)v289;
    operator delete(*(void **)v289);
  }
LABEL_185:
  v289[23] = 11;
  strcpy(v289, "delay_costs");
  sub_F15604(a2, (uint64_t)v289, v22 + 75);
  if ((v289[23] & 0x80000000) != 0) {
    operator delete(*(void **)v289);
  }
  v289[23] = 21;
  strcpy(v289, "border_crossing_costs");
  sub_F15604(a2, (uint64_t)v289, v22 + 88);
  if ((v289[23] & 0x80000000) != 0) {
    operator delete(*(void **)v289);
  }
  v289[23] = 20;
  strcpy(v289, "zone_violation_costs");
  sub_F15604(a2, (uint64_t)v289, v22 + 85);
  if ((v289[23] & 0x80000000) != 0) {
    operator delete(*(void **)v289);
  }
  v288[23] = 11;
  strcpy(v288, "fow_factors");
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)long long __p = _Q0;
  *(void *)&__p[16] = 0x3FF0000000000000;
  sub_F150C8(a2, (uint64_t)v288, (uint64_t)&off_243F0D0, (uint64_t)__p, v289);
  uint64_t v91 = v22 + 91;
  unint64_t v90 = (void *)v22[91];
  if (v90)
  {
    v22[92] = v90;
    operator delete(v90);
    *uint64_t v91 = 0;
    v22[92] = 0;
    v22[93] = 0;
  }
  *(_OWORD *)uint64_t v91 = *(_OWORD *)v289;
  v22[93] = *(void *)&v289[16];
  memset(v289, 0, sizeof(v289));
  if ((v288[23] & 0x80000000) != 0) {
    operator delete(*(void **)v288);
  }
  *(void *)uint64_t v289 = operator new(0x20uLL);
  *(_OWORD *)&v289[8] = v286[1];
  strcpy(*(char **)v289, "cul_de_sac_entry_penalty");
  if (sub_58070(a2, (uint64_t)v289))
  {
    unint64_t v92 = (void *)sub_560F4(a2, (uint64_t)v289);
    v22[94] = sub_ED57A0(v92);
    v22[95] = v93;
  }
  if ((v289[23] & 0x80000000) != 0) {
    operator delete(*(void **)v289);
  }
  *(void *)uint64_t v289 = operator new(0x20uLL);
  *(_OWORD *)&v289[8] = v286[1];
  strcpy(*(char **)v289, "impeding_barrier_penalty");
  if (sub_58070(a2, (uint64_t)v289))
  {
    uint64_t v94 = (void *)sub_560F4(a2, (uint64_t)v289);
    v22[96] = sub_ED57A0(v94);
    uint64_t v22[97] = v95;
  }
  if ((v289[23] & 0x80000000) != 0) {
    operator delete(*(void **)v289);
  }
  *(void *)uint64_t v289 = operator new(0x20uLL);
  *(_OWORD *)&v289[8] = v286[1];
  strcpy(*(char **)v289, "blocking_barrier_penalty");
  if (sub_58070(a2, (uint64_t)v289))
  {
    uint64_t v96 = (void *)sub_560F4(a2, (uint64_t)v289);
    v22[98] = sub_ED57A0(v96);
    v22[99] = v97;
  }
  if ((v289[23] & 0x80000000) != 0) {
    operator delete(*(void **)v289);
  }
  v289[23] = 18;
  strcpy(v289, "frc_change_penalty");
  if (sub_58070(a2, (uint64_t)v289))
  {
    uint64_t v98 = (void *)sub_560F4(a2, (uint64_t)v289);
    v22[100] = sub_ED57A0(v98);
    v22[101] = v99;
  }
  if ((v289[23] & 0x80000000) != 0) {
    operator delete(*(void **)v289);
  }
  v289[23] = 18;
  strcpy(v289, "toll_entry_penalty");
  if (sub_58070(a2, (uint64_t)v289))
  {
    uint64_t v100 = (void *)sub_560F4(a2, (uint64_t)v289);
    v22[102] = sub_ED57A0(v100);
    v22[103] = v101;
  }
  if ((v289[23] & 0x80000000) != 0) {
    operator delete(*(void **)v289);
  }
  *(void *)uint64_t v289 = operator new(0x28uLL);
  *(_OWORD *)&v289[8] = v283[0];
  strcpy(*(char **)v289, "toll_congestion_zone_entry_penalty");
  if (sub_58070(a2, (uint64_t)v289))
  {
    long long v102 = (void *)sub_560F4(a2, (uint64_t)v289);
    v22[104] = sub_ED57A0(v102);
    v22[105] = v103;
  }
  if ((v289[23] & 0x80000000) != 0) {
    operator delete(*(void **)v289);
  }
  v289[23] = 21;
  strcpy(v289, "highway_entry_penalty");
  if (sub_58070(a2, (uint64_t)v289))
  {
    uint64_t v104 = (void *)sub_560F4(a2, (uint64_t)v289);
    v22[106] = sub_ED57A0(v104);
    v22[107] = v105;
  }
  if ((v289[23] & 0x80000000) != 0) {
    operator delete(*(void **)v289);
  }
  *(void *)uint64_t v289 = operator new(0x19uLL);
  *(_OWORD *)&v289[8] = v285;
  strcpy(*(char **)v289, "connector_entry_penalty");
  if (sub_58070(a2, (uint64_t)v289))
  {
    __n128 v106 = (void *)sub_560F4(a2, (uint64_t)v289);
    v22[108] = sub_ED57A0(v106);
    v22[109] = v107;
  }
  if ((v289[23] & 0x80000000) != 0) {
    operator delete(*(void **)v289);
  }
  v289[23] = 17;
  strcpy(v289, "hov_entry_penalty");
  if (sub_58070(a2, (uint64_t)v289))
  {
    uint64_t v108 = (void *)sub_560F4(a2, (uint64_t)v289);
    v22[110] = sub_ED57A0(v108);
    v22[111] = v109;
  }
  if ((v289[23] & 0x80000000) != 0) {
    operator delete(*(void **)v289);
  }
  *(void *)uint64_t v289 = operator new(0x28uLL);
  *(_OWORD *)&v289[8] = xmmword_20B8FD0;
  strcpy(*(char **)v289, "dynamic_directionality_entry_penalty");
  if (sub_58070(a2, (uint64_t)v289))
  {
    unint64_t v110 = (void *)sub_560F4(a2, (uint64_t)v289);
    v22[112] = sub_ED57A0(v110);
    v22[113] = v111;
  }
  if ((v289[23] & 0x80000000) != 0) {
    operator delete(*(void **)v289);
  }
  v289[23] = 19;
  strcpy(v289, "ferry_entry_penalty");
  if (sub_58070(a2, (uint64_t)v289))
  {
    BOOL v112 = (void *)sub_560F4(a2, (uint64_t)v289);
    v22[114] = sub_ED57A0(v112);
    v22[115] = v113;
  }
  if ((v289[23] & 0x80000000) != 0) {
    operator delete(*(void **)v289);
  }
  v289[23] = 18;
  strcpy(v289, "ford_entry_penalty");
  if (sub_58070(a2, (uint64_t)v289))
  {
    uint64_t v114 = (void *)sub_560F4(a2, (uint64_t)v289);
    v22[116] = sub_ED57A0(v114);
    v22[117] = v115;
  }
  if ((v289[23] & 0x80000000) != 0) {
    operator delete(*(void **)v289);
  }
  *(void *)uint64_t v289 = operator new(0x30uLL);
  *(_OWORD *)&v289[8] = xmmword_20B93E0;
  strcpy(*(char **)v289, "environmental_congestion_zone_entry_penalty");
  if (sub_58070(a2, (uint64_t)v289))
  {
    unsigned int v116 = (void *)sub_560F4(a2, (uint64_t)v289);
    v22[118] = sub_ED57A0(v116);
    v22[119] = v117;
  }
  if ((v289[23] & 0x80000000) != 0) {
    operator delete(*(void **)v289);
  }
  v289[23] = 21;
  strcpy(v289, "traffic_light_penalty");
  if (sub_58070(a2, (uint64_t)v289))
  {
    uint64_t v118 = (void *)sub_560F4(a2, (uint64_t)v289);
    v22[120] = sub_ED57A0(v118);
    v22[121] = v119;
  }
  if ((v289[23] & 0x80000000) != 0) {
    operator delete(*(void **)v289);
  }
  v289[23] = 17;
  strcpy(v289, "stop_sign_penalty");
  if (sub_58070(a2, (uint64_t)v289))
  {
    uint64_t v120 = (void *)sub_560F4(a2, (uint64_t)v289);
    v22[122] = sub_ED57A0(v120);
    v22[123] = v121;
  }
  if ((v289[23] & 0x80000000) != 0) {
    operator delete(*(void **)v289);
  }
  *(void *)uint64_t v289 = operator new(0x30uLL);
  *(_OWORD *)&v289[8] = xmmword_20B93D0;
  strcpy(*(char **)v289, "restricted_crosses_non_restricted_penalty");
  if (sub_58070(a2, (uint64_t)v289))
  {
    uint64_t v122 = (void *)sub_560F4(a2, (uint64_t)v289);
    v22[124] = sub_ED57A0(v122);
    v22[125] = v123;
  }
  if ((v289[23] & 0x80000000) != 0) {
    operator delete(*(void **)v289);
  }
  *(void *)uint64_t v289 = operator new(0x40uLL);
  v282[0] = xmmword_20F0510;
  *(_OWORD *)&v289[8] = xmmword_20F0510;
  strcpy(*(char **)v289, "restricted_crosses_non_restricted_penalty_intersection_internal");
  qmemcpy(v279, "section_internald_penalty_interses_non_restricterestricted_cross", sizeof(v279));
  uint64_t v124 = sub_58070(a2, (uint64_t)v289);
  int v125 = v124;
  if ((v289[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v289);
    if (v125) {
      goto LABEL_261;
    }
LABEL_266:
    *((_OWORD *)v22 + 63) = *((_OWORD *)v22 + 62);
    goto LABEL_267;
  }
  if (!v124) {
    goto LABEL_266;
  }
LABEL_261:
  int64_t v126 = operator new(0x40uLL);
  *(void *)uint64_t v289 = v126;
  *(_OWORD *)&v289[8] = v282[0];
  *int64_t v126 = v279[3];
  v126[1] = v279[2];
  v126[2] = v279[1];
  *(_OWORD *)((char *)v126 + 47) = v279[0];
  *((unsigned char *)v126 + 63) = 0;
  if (sub_58070(a2, (uint64_t)v289))
  {
    unint64_t v127 = (void *)sub_560F4(a2, (uint64_t)v289);
    v22[126] = sub_ED57A0(v127);
    v22[127] = v128;
  }
  if ((v289[23] & 0x80000000) != 0) {
    operator delete(*(void **)v289);
  }
LABEL_267:
  *(void *)uint64_t v289 = operator new(0x20uLL);
  *(_OWORD *)&v289[8] = v283[1];
  v282[0] = *(_OWORD *)"single_digitized_u_turn_penalty";
  strcpy(*(char **)v289, "single_digitized_u_turn_penalty");
  v279[3] = *(_OWORD *)"d_u_turn_penalty";
  uint64_t v129 = sub_58070(a2, (uint64_t)v289);
  int64_t v130 = v129;
  if ((v289[23] & 0x80000000) == 0)
  {
    if (v129) {
      goto LABEL_269;
    }
LABEL_272:
    v289[23] = 20;
    strcpy(v289, "magic_u_turn_penalty");
    if (!sub_58070(a2, (uint64_t)v289)) {
      goto LABEL_274;
    }
    goto LABEL_273;
  }
  operator delete(*(void **)v289);
  if (!v130) {
    goto LABEL_272;
  }
LABEL_269:
  uint64_t v131 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v289 = v131;
  *(_OWORD *)&v289[8] = v283[1];
  *(_OWORD *)uint64_t v131 = v282[0];
  *(_OWORD *)(v131 + 15) = v279[3];
  v131[31] = 0;
  if (!sub_58070(a2, (uint64_t)v289)) {
    goto LABEL_274;
  }
LABEL_273:
  int v132 = (void *)sub_560F4(a2, (uint64_t)v289);
  v22[134] = sub_ED57A0(v132);
  v22[135] = v133;
LABEL_274:
  if ((v289[23] & 0x80000000) != 0) {
    operator delete(*(void **)v289);
  }
  v289[23] = 14;
  strcpy(v289, "u_turn_penalty");
  if (sub_58070(a2, (uint64_t)v289))
  {
    int v134 = (void *)sub_560F4(a2, (uint64_t)v289);
    v22[132] = sub_ED57A0(v134);
    v22[133] = v135;
  }
  if ((v289[23] & 0x80000000) != 0) {
    operator delete(*(void **)v289);
  }
  *(void *)uint64_t v289 = operator new(0x28uLL);
  v282[0] = xmmword_20B9260;
  *(_OWORD *)&v289[8] = xmmword_20B9260;
  qmemcpy(&v279[2], "aled_turn_penaltdangerous_unsign", 32);
  strcpy(*(char **)v289, "dangerous_unsignaled_turn_penalty");
  uint64_t v136 = sub_58070(a2, (uint64_t)v289);
  unint64_t v137 = v136;
  if ((v289[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v289);
    if (!v137) {
      goto LABEL_288;
    }
  }
  else if (!v136)
  {
    goto LABEL_288;
  }
  uint64_t v138 = operator new(0x28uLL);
  *(void *)uint64_t v289 = v138;
  *(_OWORD *)&v289[8] = v282[0];
  v138[16] = 121;
  *(_OWORD *)uint64_t v138 = v279[3];
  *((_OWORD *)v138 + 1) = v279[2];
  if (sub_58070(a2, (uint64_t)v289))
  {
    __n128 v139 = (void *)sub_560F4(a2, (uint64_t)v289);
    v22[128] = sub_ED57A0(v139);
    v22[129] = v140;
  }
  if ((v289[23] & 0x80000000) != 0) {
    operator delete(*(void **)v289);
  }
LABEL_288:
  *(void *)uint64_t v289 = operator new(0x30uLL);
  WORD1(v279[3]) = 0;
  DWORD1(v279[3]) = 0;
  *((void *)&v279[3] + 1) = 0x8000000000000030;
  *(_OWORD *)&v289[8] = xmmword_20B9A40;
  strcpy(*(char **)v289, "dangerous_turn_to_unimportant_road_penalty");
  strcpy((char *)v279, "ant_road_penaltyo_unimportant_rodangerous_turn_t*");
  __n128 v141 = sub_58070(a2, (uint64_t)v289);
  __n128 v142 = v141;
  if ((v289[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v289);
    if (!v142) {
      goto LABEL_296;
    }
  }
  else if (!v141)
  {
    goto LABEL_296;
  }
  __n128 v143 = operator new(0x30uLL);
  *(void *)uint64_t v289 = v143;
  *(_OWORD *)&v289[8] = v279[3];
  _OWORD *v143 = v279[2];
  v143[1] = v279[1];
  *(_OWORD *)((char *)v143 + 26) = v279[0];
  *((unsigned char *)v143 + 42) = 0;
  if (sub_58070(a2, (uint64_t)v289))
  {
    __n128 v144 = (void *)sub_560F4(a2, (uint64_t)v289);
    v22[130] = sub_ED57A0(v144);
    v22[131] = v145;
  }
  if ((v289[23] & 0x80000000) != 0) {
    operator delete(*(void **)v289);
  }
LABEL_296:
  *(void *)uint64_t v289 = operator new(0x20uLL);
  *(_OWORD *)&v289[8] = v282[1];
  strcpy(*(char **)v289, "dangerous_sequence_penalty");
  if (sub_58070(a2, (uint64_t)v289))
  {
    long long v146 = (void *)sub_560F4(a2, (uint64_t)v289);
    v22[83] = sub_ED57A0(v146);
    v22[84] = v147;
  }
  if ((v289[23] & 0x80000000) != 0) {
    operator delete(*(void **)v289);
  }
  *(void *)uint64_t v289 = operator new(0x20uLL);
  *(_OWORD *)&v289[8] = v282[1];
  strcpy(*(char **)v289, "soft_closure_entry_penalty");
  if (sub_58070(a2, (uint64_t)v289))
  {
    long long v148 = (void *)sub_560F4(a2, (uint64_t)v289);
    v22[136] = sub_ED57A0(v148);
    v22[137] = v149;
  }
  if ((v289[23] & 0x80000000) != 0) {
    operator delete(*(void **)v289);
  }
  *(void *)uint64_t v289 = operator new(0x20uLL);
  *(_OWORD *)&v289[8] = v284;
  strcpy(*(char **)v289, "soft_closure_entry_factor");
  if (sub_58070(a2, (uint64_t)v289))
  {
    __n128 v150 = (void *)sub_560F4(a2, (uint64_t)v289);
    v22[138] = sub_ED57A0(v150);
    v22[139] = v151;
  }
  if ((v289[23] & 0x80000000) != 0) {
    operator delete(*(void **)v289);
  }
  *(void *)uint64_t v289 = operator new(0x20uLL);
  *(_OWORD *)&v289[8] = v283[2];
  strcpy(*(char **)v289, "area_incident_entry_penalty");
  if (sub_58070(a2, (uint64_t)v289))
  {
    __n128 v152 = (void *)sub_560F4(a2, (uint64_t)v289);
    v22[140] = sub_ED57A0(v152);
    v22[141] = v153;
  }
  if ((v289[23] & 0x80000000) != 0) {
    operator delete(*(void **)v289);
  }
  v289[23] = 15;
  strcpy(v289, "is_conservative");
  __n128 v154 = sub_58070(a2, (uint64_t)v289);
  if (v154 && (int v155 = *((_DWORD *)v154 + 12), (v155 & 0xFFFFFFFE) == 4))
  {
    *((unsigned char *)v22 + 32) = v155 == 4;
    if ((v289[23] & 0x80000000) != 0) {
      goto LABEL_317;
    }
  }
  else
  {
    *((unsigned char *)v22 + 32) = *((unsigned char *)v22 + 32) != 0;
    if ((v289[23] & 0x80000000) != 0) {
LABEL_317:
    }
      operator delete(*(void **)v289);
  }
  v289[23] = 21;
  strcpy(v289, "warmup_unwinder_cache");
  __n128 v156 = sub_58070(a2, (uint64_t)v289);
  if (v156 && (int v157 = *((_DWORD *)v156 + 12), (v157 & 0xFFFFFFFE) == 4))
  {
    *((unsigned char *)v22 + 33) = v157 == 4;
    if ((v289[23] & 0x80000000) != 0) {
      goto LABEL_323;
    }
  }
  else
  {
    *((unsigned char *)v22 + 33) = *((unsigned char *)v22 + 33) != 0;
    if ((v289[23] & 0x80000000) != 0) {
LABEL_323:
    }
      operator delete(*(void **)v289);
  }
  *(void *)uint64_t v289 = operator new(0x28uLL);
  *(_OWORD *)&v289[8] = v283[0];
  strcpy(*(char **)v289, "apply_penalty_factor_for_slip_road");
  __n128 v158 = sub_58070(a2, (uint64_t)v289);
  if (v158 && (int v159 = *((_DWORD *)v158 + 12), (v159 & 0xFFFFFFFE) == 4))
  {
    *((unsigned char *)v22 + 483) = v159 == 4;
    if ((v289[23] & 0x80000000) != 0) {
      goto LABEL_329;
    }
  }
  else
  {
    *((unsigned char *)v22 + 483) = *((unsigned char *)v22 + 483) != 0;
    if ((v289[23] & 0x80000000) != 0) {
LABEL_329:
    }
      operator delete(*(void **)v289);
  }
  *(void *)uint64_t v289 = operator new(0x30uLL);
  *(_OWORD *)&v289[8] = xmmword_20B9A80;
  strcpy(*(char **)v289, "apply_penalty_factor_for_intersection_internal");
  __n128 v160 = sub_58070(a2, (uint64_t)v289);
  if (v160 && (int v161 = *((_DWORD *)v160 + 12), (v161 & 0xFFFFFFFE) == 4))
  {
    *((unsigned char *)v22 + 484) = v161 == 4;
    if ((v289[23] & 0x80000000) != 0) {
      goto LABEL_335;
    }
  }
  else
  {
    *((unsigned char *)v22 + 484) = *((unsigned char *)v22 + 484) != 0;
    if ((v289[23] & 0x80000000) != 0) {
LABEL_335:
    }
      operator delete(*(void **)v289);
  }
  *(void *)uint64_t v289 = operator new(0x20uLL);
  *(_OWORD *)&v289[8] = v284;
  strcpy(*(char **)v289, "max_num_trips_as_backroad");
  LOWORD(v162) = *((_WORD *)v22 + 240);
  __n128 v163 = sub_58070(a2, (uint64_t)v289);
  if (v163 && *((_DWORD *)v163 + 12) == 1) {
    int v162 = (int)*((double *)v163 + 5);
  }
  *((_WORD *)v22 + 240) = v162;
  if ((v289[23] & 0x80000000) != 0) {
    operator delete(*(void **)v289);
  }
  *(void *)uint64_t v289 = operator new(0x38uLL);
  *(_OWORD *)&v289[8] = xmmword_20B9AC0;
  strcpy(*(char **)v289, "apply_delays_and_penalties_when_crossing_roundabouts");
  __n128 v164 = sub_58070(a2, (uint64_t)v289);
  if (v164 && (int v165 = *((_DWORD *)v164 + 12), (v165 & 0xFFFFFFFE) == 4))
  {
    *((unsigned char *)v22 + 625) = v165 == 4;
    if ((v289[23] & 0x80000000) != 0) {
      goto LABEL_346;
    }
  }
  else
  {
    *((unsigned char *)v22 + 625) = *((unsigned char *)v22 + 625) != 0;
    if ((v289[23] & 0x80000000) != 0) {
LABEL_346:
    }
      operator delete(*(void **)v289);
  }
  *(void *)uint64_t v289 = operator new(0x20uLL);
  *(_OWORD *)&v289[8] = v286[1];
  strcpy(*(char **)v289, "apply_daily_trips_factor");
  unint64_t v166 = sub_58070(a2, (uint64_t)v289);
  if (v166 && (int v167 = *((_DWORD *)v166 + 12), (v167 & 0xFFFFFFFE) == 4))
  {
    *((unsigned char *)v22 + 485) = v167 == 4;
    if ((v289[23] & 0x80000000) != 0) {
      goto LABEL_352;
    }
  }
  else
  {
    *((unsigned char *)v22 + 485) = *((unsigned char *)v22 + 485) != 0;
    if ((v289[23] & 0x80000000) != 0) {
LABEL_352:
    }
      operator delete(*(void **)v289);
  }
  v289[23] = 20;
  strcpy(v289, "daily_trips_exponent");
  uint64_t v168 = sub_58070(a2, (uint64_t)v289);
  uint64_t v169 = v22 + 61;
  if (v168)
  {
    uint64_t v169 = v168 + 5;
    if (*((_DWORD *)v168 + 12) != 1) {
      uint64_t v169 = v22 + 61;
    }
  }
  v22[61] = *v169;
  if ((v289[23] & 0x80000000) != 0) {
    operator delete(*(void **)v289);
  }
  v289[23] = 18;
  strcpy(v289, "apply_lanes_factor");
  unint64_t v170 = sub_58070(a2, (uint64_t)v289);
  if (v170 && (int v171 = *((_DWORD *)v170 + 12), (v171 & 0xFFFFFFFE) == 4))
  {
    *((unsigned char *)v22 + 496) = v171 == 4;
    if ((v289[23] & 0x80000000) != 0) {
      goto LABEL_363;
    }
  }
  else
  {
    *((unsigned char *)v22 + 496) = *((unsigned char *)v22 + 496) != 0;
    if ((v289[23] & 0x80000000) != 0) {
LABEL_363:
    }
      operator delete(*(void **)v289);
  }
  v289[23] = 14;
  strcpy(v289, "lanes_exponent");
  uint64_t v172 = sub_58070(a2, (uint64_t)v289);
  unint64_t v173 = v22 + 63;
  if (v172)
  {
    unint64_t v173 = v172 + 5;
    if (*((_DWORD *)v172 + 12) != 1) {
      unint64_t v173 = v22 + 63;
    }
  }
  v22[63] = *v173;
  if ((v289[23] & 0x80000000) != 0) {
    operator delete(*(void **)v289);
  }
  *(void *)uint64_t v289 = operator new(0x20uLL);
  *(_OWORD *)&v289[8] = v283[2];
  strcpy(*(char **)v289, "apply_road_curviness_factor");
  uint64_t v174 = sub_58070(a2, (uint64_t)v289);
  if (v174 && (int v175 = *((_DWORD *)v174 + 12), (v175 & 0xFFFFFFFE) == 4))
  {
    *((unsigned char *)v22 + 512) = v175 == 4;
    if ((v289[23] & 0x80000000) != 0) {
      goto LABEL_374;
    }
  }
  else
  {
    *((unsigned char *)v22 + 512) = *((unsigned char *)v22 + 512) != 0;
    if ((v289[23] & 0x80000000) != 0) {
LABEL_374:
    }
      operator delete(*(void **)v289);
  }
  *(void *)uint64_t v289 = operator new(0x19uLL);
  *(_OWORD *)&v289[8] = v285;
  strcpy(*(char **)v289, "road_curviness_exponent");
  uint64_t v176 = sub_58070(a2, (uint64_t)v289);
  unint64_t v177 = v22 + 65;
  if (v176)
  {
    unint64_t v177 = v176 + 5;
    if (*((_DWORD *)v176 + 12) != 1) {
      unint64_t v177 = v22 + 65;
    }
  }
  v22[65] = *v177;
  if ((v289[23] & 0x80000000) != 0) {
    operator delete(*(void **)v289);
  }
  *(void *)uint64_t v289 = operator new(0x28uLL);
  *(_OWORD *)&v289[8] = v286[0];
  long long v284 = *(_OWORD *)"normalized_capacity_penalty_factors";
  strcpy(*(char **)v289, "normalized_capacity_penalty_factors");
  v282[1] = *(_OWORD *)"ity_penalty_factors";
  unint64_t v178 = sub_58070(a2, (uint64_t)v289);
  uint64_t v179 = v178;
  if ((v289[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v289);
    if (!v179) {
      goto LABEL_390;
    }
  }
  else if (!v178)
  {
    goto LABEL_390;
  }
  memset(v289, 0, sizeof(v289));
  uint64_t v180 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v288 = v180;
  *(_OWORD *)&v288[8] = v286[0];
  strcpy(v180 + 31, "tors");
  *(_OWORD *)uint64_t v180 = v284;
  *((_OWORD *)v180 + 1) = v282[1];
  sub_F160A0(a2, (uint64_t)v288, (uint64_t)v289);
  if ((v288[23] & 0x80000000) != 0) {
    operator delete(*(void **)v288);
  }
  sub_F25FA4((uint64_t *)v289, 1, (void **)v288, *(double *)(*(void *)v289 + 8), *(double *)(*(void *)v289 + 16), *(double *)(*(void *)v289 + 24));
  uint64_t v181 = *v76;
  if (*v76)
  {
    v22[34] = v181;
    operator delete(v181);
    *uint64_t v76 = 0;
    v22[34] = 0;
    v22[35] = 0;
  }
  *(_OWORD *)uint64_t v76 = *(_OWORD *)v288;
  v22[35] = *(void *)&v288[16];
  if (*(void *)v289)
  {
    *(void *)&v289[8] = *(void *)v289;
    operator delete(*(void **)v289);
  }
LABEL_390:
  *(void *)uint64_t v289 = operator new(0x30uLL);
  long long v284 = xmmword_20B93B0;
  *(_OWORD *)&v289[8] = xmmword_20B93B0;
  v282[1] = *(_OWORD *)"remaining_normalized_capacity_penalty_factors";
  strcpy(*(char **)v289, "remaining_normalized_capacity_penalty_factors");
  qmemcpy(&v279[2], "_penalty_factorsized_capacity_pe", 32);
  uint64_t v182 = sub_58070(a2, (uint64_t)v289);
  uint64_t v183 = v182;
  if ((v289[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v289);
    if (!v183) {
      goto LABEL_400;
    }
  }
  else if (!v182)
  {
    goto LABEL_400;
  }
  memset(v289, 0, sizeof(v289));
  uint64_t v184 = operator new(0x30uLL);
  *(void *)uint64_t v288 = v184;
  *(_OWORD *)&v288[8] = v284;
  *uint64_t v184 = v282[1];
  v184[1] = v279[3];
  *(_OWORD *)((char *)v184 + 29) = v279[2];
  *((unsigned char *)v184 + 45) = 0;
  sub_F160A0(a2, (uint64_t)v288, (uint64_t)v289);
  if ((v288[23] & 0x80000000) != 0) {
    operator delete(*(void **)v288);
  }
  sub_F25FA4((uint64_t *)v289, 1, (void **)v288, *(double *)(*(void *)v289 + 8), *(double *)(*(void *)v289 + 16), *(double *)(*(void *)v289 + 24));
  uint64_t v185 = (void *)v22[26];
  if (v185)
  {
    v22[27] = v185;
    operator delete(v185);
    v22[26] = 0;
    v22[27] = 0;
    v22[28] = 0;
  }
  *((_OWORD *)v22 + 13) = *(_OWORD *)v288;
  v22[28] = *(void *)&v288[16];
  if (*(void *)v289)
  {
    *(void *)&v289[8] = *(void *)v289;
    operator delete(*(void **)v289);
  }
LABEL_400:
  *(void *)uint64_t v289 = operator new(0x28uLL);
  *(_OWORD *)&v289[8] = v281;
  strcpy(*(char **)v289, "functional_road_class_penalty_factors");
  sub_F14F1C(a2, (uint64_t)v289, (uint64_t)(v22 + 30));
  if ((v289[23] & 0x80000000) != 0) {
    operator delete(*(void **)v289);
  }
  *(void *)uint64_t v289 = operator new(0x20uLL);
  long long v284 = xmmword_20B9800;
  *(_OWORD *)&v289[8] = xmmword_20B9800;
  strcpy(*(char **)v289, "road_condition_penalty_factors");
  sub_F14F1C(a2, (uint64_t)v289, (uint64_t)(v22 + 36));
  if ((v289[23] & 0x80000000) != 0) {
    operator delete(*(void **)v289);
  }
  *(void *)uint64_t v289 = operator new(0x20uLL);
  v282[1] = xmmword_20B91B0;
  *(_OWORD *)&v289[8] = xmmword_20B91B0;
  strcpy(*(char **)v289, "frontage_road_penalty_factor");
  if (sub_58070(a2, (uint64_t)v289))
  {
    uint64_t v186 = (void *)sub_560F4(a2, (uint64_t)v289);
    sub_F15B20(v186);
    v22[48] = v187;
    v22[49] = v188;
    v22[50] = v189;
  }
  if ((v289[23] & 0x80000000) != 0) {
    operator delete(*(void **)v289);
  }
  v289[23] = 20;
  strcpy(v289, "ferry_penalty_factor");
  if (sub_58070(a2, (uint64_t)v289))
  {
    uint64_t v190 = (void *)sub_560F4(a2, (uint64_t)v289);
    sub_F15B20(v190);
    v22[51] = v191;
    v22[52] = v192;
    v22[53] = v193;
  }
  if ((v289[23] & 0x80000000) != 0) {
    operator delete(*(void **)v289);
  }
  *(void *)uint64_t v289 = operator new(0x20uLL);
  *(_OWORD *)&v289[8] = v286[1];
  strcpy(*(char **)v289, "toll_road_penalty_factor");
  if (sub_58070(a2, (uint64_t)v289))
  {
    uint64_t v194 = (void *)sub_560F4(a2, (uint64_t)v289);
    sub_F15B20(v194);
    v22[42] = v195;
    v22[43] = v196;
    v22[44] = v197;
  }
  if ((v289[23] & 0x80000000) != 0) {
    operator delete(*(void **)v289);
  }
  *(void *)uint64_t v289 = operator new(0x20uLL);
  *(_OWORD *)&v289[8] = v283[2];
  strcpy(*(char **)v289, "highway_road_penalty_factor");
  if (sub_58070(a2, (uint64_t)v289))
  {
    double v198 = (void *)sub_560F4(a2, (uint64_t)v289);
    sub_F15B20(v198);
    v22[45] = v199;
    v22[46] = v200;
    v22[47] = v201;
  }
  if ((v289[23] & 0x80000000) != 0) {
    operator delete(*(void **)v289);
  }
  *(void *)uint64_t v289 = operator new(0x19uLL);
  *(_OWORD *)&v289[8] = v285;
  strcpy(*(char **)v289, "backroad_penalty_factor");
  if (sub_58070(a2, (uint64_t)v289))
  {
    double v202 = (void *)sub_560F4(a2, (uint64_t)v289);
    sub_F15B20(v202);
    v22[54] = v203;
    v22[55] = v204;
    v22[56] = v205;
  }
  if ((v289[23] & 0x80000000) != 0) {
    operator delete(*(void **)v289);
  }
  strcpy(v289, "walking_penalty_factor");
  v289[23] = 22;
  if (sub_58070(a2, (uint64_t)v289))
  {
    uint64_t v206 = (void *)sub_560F4(a2, (uint64_t)v289);
    sub_F15B20(v206);
    v22[39] = v207;
    v22[40] = v208;
    v22[41] = v209;
  }
  if ((v289[23] & 0x80000000) != 0) {
    operator delete(*(void **)v289);
  }
  strcpy(v289, "parking_penalty_factor");
  v289[23] = 22;
  if (sub_58070(a2, (uint64_t)v289))
  {
    uint64_t v210 = (void *)sub_560F4(a2, (uint64_t)v289);
    sub_F15B20(v210);
    v22[57] = v211;
    v22[58] = v212;
    v22[59] = v213;
  }
  if ((v289[23] & 0x80000000) != 0) {
    operator delete(*(void **)v289);
  }
  *(void *)uint64_t v289 = operator new(0x28uLL);
  *(_OWORD *)&v289[8] = v283[0];
  strcpy(*(char **)v289, "apply_frontage_factor_to_kittyhawk");
  unsigned int v214 = sub_58070(a2, (uint64_t)v289);
  if (v214 && (int v215 = *((_DWORD *)v214 + 12), (v215 & 0xFFFFFFFE) == 4))
  {
    *((unsigned char *)v22 + 482) = v215 == 4;
    if ((v289[23] & 0x80000000) == 0) {
      goto LABEL_438;
    }
  }
  else
  {
    *((unsigned char *)v22 + 482) = *((unsigned char *)v22 + 482) != 0;
    if ((v289[23] & 0x80000000) == 0) {
      goto LABEL_438;
    }
  }
  operator delete(*(void **)v289);
LABEL_438:
  v289[23] = 21;
  strcpy(v289, "opposite_side_penalty");
  if (sub_58070(a2, (uint64_t)v289))
  {
    int v216 = (void *)sub_560F4(a2, (uint64_t)v289);
    v22[142] = sub_ED57A0(v216);
    v22[143] = v217;
  }
  if ((v289[23] & 0x80000000) != 0) {
    operator delete(*(void **)v289);
  }
  *(void *)uint64_t v289 = operator new(0x30uLL);
  *(_OWORD *)&v289[8] = xmmword_20B93C0;
  strcpy(*(char **)v289, "opposite_side_penalty_distance_threshold");
  uint64_t v218 = v22[144];
  uint64_t v219 = v218 / 100;
  __int16 v220 = v218 % 100;
  if (v218 < 0) {
    __int16 v221 = -50;
  }
  else {
    __int16 v221 = 50;
  }
  double v222 = (double)(v219
                + (int)(((5243 * (__int16)(v221 + v220)) >> 19) + ((5243 * (__int16)(v221 + v220)) >> 31)));
  *(double *)uint64_t v288 = v222;
  unsigned int v223 = sub_58070(a2, (uint64_t)v289);
  if (v223)
  {
    float64x2_t v224 = (double *)(v223 + 5);
    if (*((_DWORD *)v223 + 12) != 1) {
      float64x2_t v224 = (double *)v288;
    }
    double v222 = *v224;
  }
  double v225 = v222 * 100.0;
  if (v222 * 100.0 >= 0.0)
  {
    double v226 = v222 * 100.0;
    if (v225 >= 4.50359963e15) {
      goto LABEL_457;
    }
    uint64_t v227 = (uint64_t)(v225 + v225) + 1;
  }
  else
  {
    double v226 = v222 * 100.0;
    if (v225 <= -4.50359963e15) {
      goto LABEL_457;
    }
    uint64_t v227 = (uint64_t)(v225 + v225);
    if (v227 >= 1) {
      --v227;
    }
  }
  double v226 = (double)(v227 >> 1);
LABEL_457:
  if (v226 < 9.22337204e18)
  {
    if (v225 >= 0.0)
    {
      if (v225 >= 4.50359963e15) {
        goto LABEL_468;
      }
      uint64_t v228 = (uint64_t)(v225 + v225) + 1;
    }
    else
    {
      if (v225 <= -4.50359963e15) {
        goto LABEL_468;
      }
      uint64_t v228 = (uint64_t)(v225 + v225);
      if (v228 >= 1) {
        --v228;
      }
    }
    double v225 = (double)(v228 >> 1);
LABEL_468:
    v22[144] = (uint64_t)v225;
    if ((v289[23] & 0x80000000) == 0) {
      goto LABEL_470;
    }
    goto LABEL_469;
  }
  v22[144] = 0x7FFFFFFFFFFFFFFELL;
  if ((v289[23] & 0x80000000) == 0) {
    goto LABEL_470;
  }
LABEL_469:
  operator delete(*(void **)v289);
LABEL_470:
  v289[23] = 20;
  strcpy(v289, "u_turn_start_penalty");
  if (sub_58070(a2, (uint64_t)v289))
  {
    long long v229 = (void *)sub_560F4(a2, (uint64_t)v289);
    v22[145] = sub_ED57A0(v229);
    v22[146] = v230;
  }
  if ((v289[23] & 0x80000000) != 0) {
    operator delete(*(void **)v289);
  }
  strcpy(v289, "u_turn_speed_threshold");
  v289[23] = 22;
  int32x2_t v231 = sub_58070(a2, (uint64_t)v289);
  if (v231 && *((_DWORD *)v231 + 12) == 1)
  {
    *((_DWORD *)v22 + 294) = *((double *)v231 + 5);
    if ((v289[23] & 0x80000000) == 0) {
      goto LABEL_480;
    }
  }
  else
  {
    *((_DWORD *)v22 + 294) = *((_DWORD *)v22 + 294);
    if ((v289[23] & 0x80000000) == 0) {
      goto LABEL_480;
    }
  }
  operator delete(*(void **)v289);
LABEL_480:
  *(void *)uint64_t v289 = operator new(0x28uLL);
  *(_OWORD *)&v289[8] = v282[0];
  unint64_t v232 = *(void *)"course_accuracy_threshold_degrees";
  strcpy(*(char **)v289, "course_accuracy_threshold_degrees");
  LOWORD(v232) = *((_WORD *)v22 + 590);
  double v233 = (double)v232 / 100.0;
  *(double *)uint64_t v288 = v233;
  double v234 = sub_58070(a2, (uint64_t)v289);
  if (v234)
  {
    unsigned __int8 v235 = (double *)(v234 + 5);
    if (*((_DWORD *)v234 + 12) != 1) {
      unsigned __int8 v235 = (double *)v288;
    }
    double v233 = *v235;
  }
  unsigned int v236 = (int)llround(v233 * 100.0) % 36000;
  if (v236 > 0xFFFF735F) {
    LOWORD(v236) = v236 - 29536;
  }
  *((_WORD *)v22 + 590) = v236;
  if ((v289[23] & 0x80000000) != 0) {
    operator delete(*(void **)v289);
  }
  *(void *)uint64_t v289 = operator new(0x28uLL);
  *(_OWORD *)&v289[8] = v282[0];
  strcpy(*(char **)v289, "u_turn_offroad_distance_threshold");
  uint64_t v237 = v22[148];
  uint64_t v238 = v237 / 100;
  __int16 v239 = v237 % 100;
  if (v237 < 0) {
    __int16 v240 = -50;
  }
  else {
    __int16 v240 = 50;
  }
  double v241 = (double)(v238
                + (int)(((5243 * (__int16)(v240 + v239)) >> 19) + ((5243 * (__int16)(v240 + v239)) >> 31)));
  *(double *)uint64_t v288 = v241;
  char v242 = sub_58070(a2, (uint64_t)v289);
  if (v242)
  {
    long long v243 = (double *)(v242 + 5);
    if (*((_DWORD *)v242 + 12) != 1) {
      long long v243 = (double *)v288;
    }
    double v241 = *v243;
  }
  double v244 = v241 * 100.0;
  if (v241 * 100.0 >= 0.0)
  {
    double v245 = v241 * 100.0;
    if (v244 >= 4.50359963e15) {
      goto LABEL_503;
    }
    uint64_t v246 = (uint64_t)(v244 + v244) + 1;
  }
  else
  {
    double v245 = v241 * 100.0;
    if (v244 <= -4.50359963e15) {
      goto LABEL_503;
    }
    uint64_t v246 = (uint64_t)(v244 + v244);
    if (v246 >= 1) {
      --v246;
    }
  }
  double v245 = (double)(v246 >> 1);
LABEL_503:
  if (v245 < 9.22337204e18)
  {
    if (v244 >= 0.0)
    {
      if (v244 >= 4.50359963e15) {
        goto LABEL_514;
      }
      uint64_t v247 = (uint64_t)(v244 + v244) + 1;
    }
    else
    {
      if (v244 <= -4.50359963e15) {
        goto LABEL_514;
      }
      uint64_t v247 = (uint64_t)(v244 + v244);
      if (v247 >= 1) {
        --v247;
      }
    }
    double v244 = (double)(v247 >> 1);
LABEL_514:
    v22[148] = (uint64_t)v244;
    if ((v289[23] & 0x80000000) == 0) {
      goto LABEL_516;
    }
    goto LABEL_515;
  }
  v22[148] = 0x7FFFFFFFFFFFFFFELL;
  if ((v289[23] & 0x80000000) == 0) {
    goto LABEL_516;
  }
LABEL_515:
  operator delete(*(void **)v289);
LABEL_516:
  *(void *)uint64_t v289 = operator new(0x20uLL);
  *(_OWORD *)&v289[8] = v282[1];
  strcpy(*(char **)v289, "contingency_terminal_penalty");
  if (sub_58070(a2, (uint64_t)v289))
  {
    int v248 = (void *)sub_560F4(a2, (uint64_t)v289);
    v22[149] = sub_ED57A0(v248);
    v22[150] = v249;
  }
  if ((v289[23] & 0x80000000) != 0) {
    operator delete(*(void **)v289);
  }
  *(void *)uint64_t v289 = operator new(0x28uLL);
  *(_OWORD *)&v289[8] = v286[0];
  strcpy(*(char **)v289, "contingency_distance_penalty_factor");
  if (sub_58070(a2, (uint64_t)v289))
  {
    int v250 = (void *)sub_560F4(a2, (uint64_t)v289);
    sub_F15B20(v250);
    v22[151] = v251;
    v22[152] = v252;
    v22[153] = v253;
  }
  if ((v289[23] & 0x80000000) != 0) {
    operator delete(*(void **)v289);
  }
  *(void *)uint64_t v289 = operator new(0x20uLL);
  *(_OWORD *)&v289[8] = v283[1];
  strcpy(*(char **)v289, "primary_distance_penalty_factor");
  if (sub_58070(a2, (uint64_t)v289))
  {
    long long v254 = (void *)sub_560F4(a2, (uint64_t)v289);
    sub_F15B20(v254);
    v22[154] = v255;
    v22[155] = v256;
    v22[156] = v257;
  }
  if ((v289[23] & 0x80000000) != 0) {
    operator delete(*(void **)v289);
  }
  *(void *)uint64_t v289 = operator new(0x20uLL);
  *(_OWORD *)&v289[8] = v284;
  strcpy(*(char **)v289, "zone_transition_classification");
  qmemcpy(v286, "n_classificationzone_transition_", sizeof(v286));
  __n128 v258 = sub_58070(a2, (uint64_t)v289);
  int v259 = v258;
  if ((v289[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v289);
    if (!v259) {
      goto LABEL_548;
    }
  }
  else if (!v258)
  {
    goto LABEL_548;
  }
  memset(v289, 0, sizeof(v289));
  __n128 v260 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v288 = v260;
  *(_OWORD *)&v288[8] = v284;
  *(_OWORD *)__n128 v260 = v286[1];
  *(_OWORD *)(v260 + 14) = v286[0];
  v260[30] = 0;
  __n128 v261 = (uint64_t *)sub_5C4AC(a2, (uint64_t)v288);
  sub_F71FD4(v22 + 157, v261, (uint64_t *)v289);
  if ((v288[23] & 0x80000000) != 0) {
    operator delete(*(void **)v288);
  }
  *(void *)uint64_t v288 = operator new(0x38uLL);
  long long v285 = xmmword_20B9A20;
  *(_OWORD *)&v288[8] = xmmword_20B9A20;
  strcpy(*(char **)v288, "kittyhawk_zone_transition_classification_overrides");
  qmemcpy(v283, "fication_overridransition_classikittyhawk_zone_t", sizeof(v283));
  __n128 v262 = sub_58070(a2, (uint64_t)v288);
  __n128 v263 = v262;
  if ((v288[23] & 0x80000000) == 0)
  {
    __n128 v264 = v22 + 160;
    if (v262) {
      goto LABEL_536;
    }
LABEL_539:
    uint64_t v269 = (char *)operator new(0x20uLL);
    *(void *)uint64_t v288 = v269;
    *(_OWORD *)&v288[8] = v284;
    *(_OWORD *)uint64_t v269 = v286[1];
    *(_OWORD *)(v269 + 14) = v286[0];
    v269[30] = 0;
    uint64_t v270 = (uint64_t *)sub_5C4AC(a2, (uint64_t)v288);
    sub_F71FD4(v264, v270, (uint64_t *)v289);
    goto LABEL_540;
  }
  operator delete(*(void **)v288);
  __n128 v264 = v22 + 160;
  if (!v263) {
    goto LABEL_539;
  }
LABEL_536:
  long long v265 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v288 = v265;
  *(_OWORD *)&v288[8] = v284;
  *(_OWORD *)long long v265 = v286[1];
  *(_OWORD *)(v265 + 14) = v286[0];
  v265[30] = 0;
  long long v266 = (uint64_t *)sub_5C4AC(a2, (uint64_t)v288);
  long long v267 = (char *)operator new(0x38uLL);
  *(void *)long long __p = v267;
  *(_OWORD *)&__p[8] = v285;
  strcpy(v267 + 48, "es");
  *(_OWORD *)long long v267 = v283[2];
  *((_OWORD *)v267 + 1) = v283[1];
  *((_OWORD *)v267 + 2) = v283[0];
  uint64_t v268 = (uint64_t *)sub_5C4AC(a2, (uint64_t)__p);
  sub_F71FD4(v264, v266, v268);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
LABEL_540:
  if ((v288[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v288);
    long long v271 = *(char **)v289;
    if (!*(void *)v289) {
      goto LABEL_548;
    }
  }
  else
  {
    long long v271 = *(char **)v289;
    if (!*(void *)v289) {
      goto LABEL_548;
    }
  }
  uint64_t v272 = *(uint64_t **)&v289[8];
  uint64_t v273 = v271;
  if (*(char **)&v289[8] != v271)
  {
    do
    {
      uint64_t v274 = v272 - 2;
      sub_5521C((uint64_t *)*((unsigned int *)v272 - 2), v272 - 2);
      uint64_t v272 = v274;
    }
    while (v274 != (uint64_t *)v271);
    uint64_t v273 = *(char **)v289;
  }
  *(void *)&v289[8] = v271;
  operator delete(v273);
LABEL_548:
  v289[23] = 19;
  v286[1] = *(_OWORD *)"trip_crossing_costs";
  strcpy(v289, "trip_crossing_costs");
  long long v275 = sub_58070(a2, (uint64_t)v289);
  uint64_t v276 = v275;
  if ((v289[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v289);
    if (!v276) {
      goto LABEL_560;
    }
  }
  else if (!v275)
  {
    goto LABEL_560;
  }
  v289[23] = 19;
  strcpy(&v289[15], "osts");
  *(_OWORD *)uint64_t v289 = v286[1];
  long long v277 = (void *)sub_560F4(a2, (uint64_t)v289);
  if ((v289[23] & 0x80000000) != 0) {
    operator delete(*(void **)v289);
  }
  v289[23] = 7;
  strcpy(v289, "enabled");
  *((unsigned char *)v22 + 626) = sub_29D62C(v277, (uint64_t)v289);
  if ((v289[23] & 0x80000000) != 0) {
    operator delete(*(void **)v289);
  }
  v289[23] = 6;
  strcpy(v289, "factor");
  *((double *)v22 + 82) = sub_5C7E8(v277, (uint64_t)v289);
  if ((v289[23] & 0x80000000) != 0) {
    operator delete(*(void **)v289);
  }
  v289[23] = 11;
  strcpy(v289, "ratio_times");
  sub_F16324(v277, (uint64_t)v289, (uint64_t)(v22 + 79));
  if ((v289[23] & 0x80000000) != 0) {
    operator delete(*(void **)v289);
  }
LABEL_560:
  if (v290[0])
  {
    v290[1] = v290[0];
    operator delete((void *)v290[0]);
  }
  if (*(void *)&v291[0])
  {
    *((void *)&v291[0] + 1) = *(void *)&v291[0];
    operator delete(*(void **)&v291[0]);
  }
}