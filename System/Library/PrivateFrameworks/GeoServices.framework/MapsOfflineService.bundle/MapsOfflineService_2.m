void sub_C37A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_C385C(uint64_t a1)
{
  uint64_t v201 = 0;
  uint64_t v202 = 0;
  uint64_t v2 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v2) {
    uint64_t v2 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v2 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v2;
  v3 = (uint64_t *)(a1 + 112);
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v2 + 8));
  *(void *)(a1 + 136) = *(void *)(v2 + 32);
  long long v199 = 0uLL;
  v200 = 0;
  v196 = 0;
  unint64_t v197 = 0;
  uint64_t v198 = 0;
  v193[0] = 1;
  uint64_t v194 = a1;
  v195 = &v199;
  unint64_t v4 = *(void *)(a1 + 632);
  if (!v4)
  {
    sub_1C2568(a1 + 600);
    unint64_t v4 = *(void *)(a1 + 632);
  }
  v175 = (int64x2_t *)(a1 + 632);
  uint64_t v5 = *(void *)(a1 + 608);
  v6 = (void *)(v5 + 8 * (v4 >> 12));
  if (*(void *)(a1 + 616) == v5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *v6 + (v4 & 0xFFF);
  }
  if (v7 == *v6) {
    uint64_t v7 = *(v6 - 1) + 4096;
  }
  *(unsigned char *)(v7 - 1) = 0;
  *(void *)(a1 + 632) = v4 - 1;
  ++*(void *)(a1 + 640);
  v183.__r_.__value_.__s.__data_[15] = 5;
  strcpy((char *)v182, "until");
  BOOL v8 = *(char *)(a1 + 135) < 0;
  uint64_t v9 = *(unsigned __int8 *)(a1 + 135);
  if ((v9 & 0x80u) != 0) {
    uint64_t v9 = *(void *)(a1 + 120);
  }
  if (v9 == 5)
  {
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = v8 ? *v3 : a1 + 112;
      __darwin_ct_rune_t v12 = __tolower(*(char *)(v11 + v10));
      if (v12 != __tolower(*((char *)v182 + v10))) {
        break;
      }
      ++v10;
      BOOL v8 = *(char *)(a1 + 135) < 0;
      unint64_t v13 = *(unsigned __int8 *)(a1 + 135);
      if ((v13 & 0x80u) != 0) {
        unint64_t v13 = *(void *)(a1 + 120);
      }
      if (v10 >= v13)
      {
        uint64_t v14 = *(void *)(a1 + 24);
        if (*(void *)(a1 + 8) == v14) {
          uint64_t v14 = a1 + 40;
        }
        else {
          *(void *)(a1 + 24) = v14 + 40;
        }
        *(_DWORD *)(a1 + 104) = *(_DWORD *)v14;
        std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v14 + 8));
        *(void *)(a1 + 136) = *(void *)(v14 + 32);
        operator new();
      }
    }
  }
  v192 = (void *)a1;
  ++*(void *)(a1 + 656);
  uint64_t v176 = a1 + 40;
  char v174 = *(unsigned char *)(a1 + 651);
  while (1)
  {
    *(unsigned char *)(a1 + 651) = 0;
    uint64_t v15 = sub_B7FE4(a1, 0);
    uint64_t v16 = v15;
    if (!v15) {
      break;
    }
    v17 = (char *)*((void *)&v199 + 1);
    if (*((void *)&v199 + 1) < (unint64_t)v200)
    {
      **((void **)&v199 + 1) = v15;
      uint64_t v18 = (uint64_t)(v17 + 8);
      goto LABEL_48;
    }
    v19 = (char *)v199;
    uint64_t v20 = (uint64_t)(*((void *)&v199 + 1) - v199) >> 3;
    unint64_t v21 = v20 + 1;
    if ((unint64_t)(v20 + 1) >> 61) {
      sub_2E00();
    }
    uint64_t v22 = (uint64_t)&v200[-v199];
    if ((uint64_t)&v200[-v199] >> 2 > v21) {
      unint64_t v21 = v22 >> 2;
    }
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v23 = v21;
    }
    if (v23)
    {
      if (v23 >> 61) {
        sub_188D718();
      }
      v24 = (char *)operator new(8 * v23);
      v25 = (uint64_t *)&v24[8 * v20];
      uint64_t *v25 = v16;
      uint64_t v18 = (uint64_t)(v25 + 1);
      if (v17 == v19)
      {
LABEL_46:
        *(void *)&long long v199 = v25;
        *((void *)&v199 + 1) = v18;
        v200 = &v24[8 * v23];
        if (!v17) {
          goto LABEL_48;
        }
LABEL_47:
        operator delete(v17);
        goto LABEL_48;
      }
    }
    else
    {
      v24 = 0;
      v25 = (uint64_t *)(8 * v20);
      *(void *)(8 * v20) = v16;
      uint64_t v18 = 8 * v20 + 8;
      if (v17 == v19) {
        goto LABEL_46;
      }
    }
    unint64_t v26 = v17 - 8 - v19;
    if (v26 < 0x58) {
      goto LABEL_387;
    }
    if ((unint64_t)(v19 - v24) < 0x20) {
      goto LABEL_387;
    }
    uint64_t v27 = (v26 >> 3) + 1;
    uint64_t v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
    v29 = &v17[-v28];
    v25 = (uint64_t *)((char *)v25 - v28);
    v30 = &v24[8 * v20 - 16];
    v31 = v17 - 16;
    uint64_t v32 = v27 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v33 = *(_OWORD *)v31;
      *((_OWORD *)v30 - 1) = *((_OWORD *)v31 - 1);
      *(_OWORD *)v30 = v33;
      v30 -= 32;
      v31 -= 32;
      v32 -= 4;
    }
    while (v32);
    v17 = v29;
    if (v27 != (v27 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_387:
      do
      {
        uint64_t v34 = *((void *)v17 - 1);
        v17 -= 8;
        *--v25 = v34;
      }
      while (v17 != v19);
    }
    v17 = (char *)v199;
    *(void *)&long long v199 = v25;
    *((void *)&v199 + 1) = v18;
    v200 = &v24[8 * v23];
    if (v17) {
      goto LABEL_47;
    }
LABEL_48:
    *((void *)&v199 + 1) = v18;
    unint64_t v35 = v197;
    if (v197 == v198 << 6)
    {
      if ((uint64_t)(v197 + 1) < 0) {
        sub_2E00();
      }
      unint64_t v36 = v198 << 7;
      if (v198 << 7 <= (v197 & 0xFFFFFFFFFFFFFFC0) + 64) {
        unint64_t v36 = (v197 & 0xFFFFFFFFFFFFFFC0) + 64;
      }
      if (v197 <= 0x3FFFFFFFFFFFFFFELL) {
        unint64_t v37 = v36;
      }
      else {
        unint64_t v37 = 0x7FFFFFFFFFFFFFFFLL;
      }
      sub_3D110((uint64_t)&v196, v37);
      unint64_t v35 = v197;
    }
    unint64_t v197 = v35 + 1;
    unint64_t v38 = v35 >> 6;
    uint64_t v39 = 1 << v35;
    if (*(unsigned char *)(a1 + 651)) {
      uint64_t v40 = v196[v38] | v39;
    }
    else {
      uint64_t v40 = v196[v38] & ~v39;
    }
    uint64_t v41 = v176;
    v196[v38] = v40;
    v183.__r_.__value_.__s.__data_[15] = 5;
    strcpy((char *)v182, "until");
    BOOL v42 = *(char *)(a1 + 135) < 0;
    uint64_t v43 = *(unsigned __int8 *)(a1 + 135);
    if ((v43 & 0x80u) != 0) {
      uint64_t v43 = *(void *)(a1 + 120);
    }
    if (v43 == 5)
    {
      unint64_t v44 = 0;
      do
      {
        if (v42) {
          uint64_t v45 = *v3;
        }
        else {
          uint64_t v45 = a1 + 112;
        }
        __darwin_ct_rune_t v46 = __tolower(*(char *)(v45 + v44));
        if (v46 != __tolower(*((char *)v182 + v44))) {
          goto LABEL_71;
        }
        ++v44;
        BOOL v42 = *(char *)(a1 + 135) < 0;
        unint64_t v47 = *(unsigned __int8 *)(a1 + 135);
        if ((v47 & 0x80u) != 0) {
          unint64_t v47 = *(void *)(a1 + 120);
        }
      }
      while (v44 < v47);
      uint64_t v66 = *(void *)(a1 + 24);
      if (*(void *)(a1 + 8) != v66)
      {
        *(void *)(a1 + 24) = v66 + 40;
        uint64_t v41 = v66;
      }
LABEL_112:
      *(_DWORD *)(a1 + 104) = *(_DWORD *)v41;
      std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v41 + 8));
      v67 = (int64x2_t *)(a1 + 632);
      *(void *)(a1 + 136) = *(void *)(v41 + 32);
      uint64_t v201 = sub_BA554(a1, &v199, &v196, 0);
      v193[0] = v201 == 0;
      if (v201)
      {
        char v68 = 1;
        goto LABEL_150;
      }
      v69 = *(void ***)(a1 + 608);
      int64x2_t v70 = vaddq_s64(*v175, (int64x2_t)xmmword_20B8D90);
      int64x2_t *v175 = v70;
      if (v70.i64[0] >= 0x2000uLL)
      {
        operator delete(*v69);
        *(void *)(a1 + 608) += 8;
        *(void *)(a1 + 632) -= 4096;
      }
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
      *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_20B9A20;
      strcpy(__str.__r_.__value_.__l.__data_, "ERR058 - Failed to parse body of repeat until loop");
      memset(&v179, 0, sizeof(v179));
      std::string::push_back(&v179, 54);
      std::string::push_back(&v179, 52);
      std::string::push_back(&v179, 57);
      std::string::push_back(&v179, 49);
      std::string::push_back(&v179, 50);
      std::string::size_type size = HIBYTE(v179.__r_.__value_.__r.__words[2]);
      if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v72 = &v179;
      }
      else {
        v72 = (std::string *)v179.__r_.__value_.__r.__words[0];
      }
      if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v179.__r_.__value_.__l.__size_;
      }
      if (size)
      {
        v73 = (std::string *)((char *)v72 + size - 1);
        if (v73 > v72)
        {
          v74 = &v72->__r_.__value_.__s.__data_[1];
          do
          {
            std::string::value_type v75 = *(v74 - 1);
            *(v74 - 1) = v73->__r_.__value_.__s.__data_[0];
            v73->__r_.__value_.__s.__data_[0] = v75;
            v73 = (std::string *)((char *)v73 - 1);
            BOOL v76 = v74++ >= (char *)v73;
          }
          while (!v76);
        }
      }
      v77 = std::string::insert(&v179, 0, "exprtk.hpp:");
      long long v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
      v180.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v180.__r_.__value_.__l.__data_ = v78;
      v77->__r_.__value_.__l.__size_ = 0;
      v77->__r_.__value_.__r.__words[2] = 0;
      v77->__r_.__value_.__r.__words[0] = 0;
      *((unsigned char *)&v183.__r_.__value_.__s + 23) = 0;
      v183.__r_.__value_.__s.__data_[0] = 0;
      uint64_t v184 = -1;
      *(_OWORD *)v186 = 0u;
      *(_OWORD *)v187 = 0u;
      long long v188 = 0u;
      *(_OWORD *)__p = 0u;
      long long v190 = 0u;
      uint64_t v191 = 0;
      int v185 = 1;
      v182[0] = *(_DWORD *)(a1 + 104);
      std::string::operator=(&v183, (const std::string *)(a1 + 112));
      uint64_t v184 = *(void *)(a1 + 136);
      std::string::operator=((std::string *)v186, &__str);
      std::string::operator=((std::string *)&v187[1], &v180);
      uint64_t v79 = *(void *)(a1 + 568);
      uint64_t v80 = *(void *)(a1 + 560);
      uint64_t v81 = 30 * ((v79 - v80) >> 3) - 1;
      if (v79 == v80) {
        uint64_t v81 = 0;
      }
      if (v81 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
      {
        sub_B4B88(a1 + 552);
        uint64_t v80 = *(void *)(a1 + 560);
        uint64_t v79 = *(void *)(a1 + 568);
      }
      if (v79 == v80)
      {
        uint64_t v83 = 0;
      }
      else
      {
        unint64_t v82 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
        uint64_t v83 = *(void *)(v80 + 8 * (v82 / 0x1E)) + 136 * (v82 % 0x1E);
      }
      sub_B5158(v83, (uint64_t)v182);
      ++*(void *)(a1 + 592);
      if (SBYTE7(v190) < 0)
      {
        operator delete(__p[0]);
        if (SHIBYTE(v188) < 0) {
          goto LABEL_142;
        }
LABEL_135:
        if ((SHIBYTE(v187[0]) & 0x80000000) == 0) {
          goto LABEL_136;
        }
LABEL_143:
        operator delete(v186[0]);
        if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_144;
        }
LABEL_137:
        if ((SHIBYTE(v180.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_138;
        }
LABEL_145:
        operator delete(v180.__r_.__value_.__l.__data_);
        if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_146;
        }
LABEL_139:
        if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_149;
        }
      }
      else
      {
        if ((SHIBYTE(v188) & 0x80000000) == 0) {
          goto LABEL_135;
        }
LABEL_142:
        operator delete(v187[1]);
        if (SHIBYTE(v187[0]) < 0) {
          goto LABEL_143;
        }
LABEL_136:
        if ((SHIBYTE(v183.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_137;
        }
LABEL_144:
        operator delete(v183.__r_.__value_.__l.__data_);
        if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_145;
        }
LABEL_138:
        if ((SHIBYTE(v179.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_139;
        }
LABEL_146:
        operator delete(v179.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_149;
        }
      }
      v84 = (void *)__str.__r_.__value_.__r.__words[0];
      goto LABEL_148;
    }
LABEL_71:
    if (*(void *)(a1 + 8) == *(void *)(a1 + 24)) {
      uint64_t v48 = v41;
    }
    else {
      uint64_t v48 = *(void *)(a1 + 24);
    }
    if (*(_DWORD *)v48 == 8)
    {
      v183.__r_.__value_.__s.__data_[15] = 5;
      strcpy((char *)v182, "until");
      BOOL v49 = *(char *)(v48 + 31) < 0;
      uint64_t v50 = *(unsigned __int8 *)(v48 + 31);
      if ((v50 & 0x80u) != 0) {
        uint64_t v50 = *(void *)(v48 + 16);
      }
      if (v50 == 5)
      {
        unint64_t v51 = 0;
        while (1)
        {
          uint64_t v52 = v49 ? *(void *)(v48 + 8) : v48 + 8;
          __darwin_ct_rune_t v53 = __tolower(*(char *)(v52 + v51));
          __darwin_ct_rune_t v54 = __tolower(*((char *)v182 + v51));
          BOOL v55 = v53 == v54;
          if (v53 != v54) {
            break;
          }
          ++v51;
          BOOL v49 = *(char *)(v48 + 31) < 0;
          unint64_t v56 = *(unsigned __int8 *)(v48 + 31);
          if ((v56 & 0x80u) != 0) {
            unint64_t v56 = *(void *)(v48 + 16);
          }
          if (v51 >= v56)
          {
            BOOL v55 = 1;
            break;
          }
        }
        if (*(_DWORD *)(a1 + 104) == 6)
        {
LABEL_92:
          uint64_t v57 = *(void *)(a1 + 24);
          uint64_t v58 = v41;
          if (*(void *)(a1 + 8) != v57)
          {
            *(void *)(a1 + 24) = v57 + 40;
            uint64_t v58 = v57;
          }
          *(_DWORD *)(a1 + 104) = *(_DWORD *)v58;
          std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v58 + 8));
          *(void *)(a1 + 136) = *(void *)(v58 + 32);
          goto LABEL_96;
        }
      }
      else
      {
        BOOL v55 = 0;
        if (*(_DWORD *)(a1 + 104) == 6) {
          goto LABEL_92;
        }
      }
      if (v55)
      {
        *((unsigned char *)&v179.__r_.__value_.__s + 23) = 3;
        LODWORD(v179.__r_.__value_.__l.__data_) = 4607813;
        v158 = std::string::insert(&v179, 0, "ERR057 - Expected '");
        long long v159 = *(_OWORD *)&v158->__r_.__value_.__l.__data_;
        v180.__r_.__value_.__r.__words[2] = v158->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v180.__r_.__value_.__l.__data_ = v159;
        v158->__r_.__value_.__l.__size_ = 0;
        v158->__r_.__value_.__r.__words[2] = 0;
        v158->__r_.__value_.__r.__words[0] = 0;
        v160 = std::string::append(&v180, "' in body of repeat until loop");
        v67 = (int64x2_t *)(a1 + 632);
        long long v161 = *(_OWORD *)&v160->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v160->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v161;
        v160->__r_.__value_.__l.__size_ = 0;
        v160->__r_.__value_.__r.__words[2] = 0;
        v160->__r_.__value_.__r.__words[0] = 0;
        memset(&v177, 0, sizeof(v177));
        std::string::push_back(&v177, 50);
        std::string::push_back(&v177, 50);
        std::string::push_back(&v177, 57);
        std::string::push_back(&v177, 49);
        std::string::push_back(&v177, 50);
        std::string::size_type v162 = HIBYTE(v177.__r_.__value_.__r.__words[2]);
        if ((v177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v163 = &v177;
        }
        else {
          v163 = (std::string *)v177.__r_.__value_.__r.__words[0];
        }
        if ((v177.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v162 = v177.__r_.__value_.__l.__size_;
        }
        if (v162)
        {
          v164 = (std::string *)((char *)v163 + v162 - 1);
          if (v164 > v163)
          {
            v165 = &v163->__r_.__value_.__s.__data_[1];
            do
            {
              std::string::value_type v166 = *(v165 - 1);
              *(v165 - 1) = v164->__r_.__value_.__s.__data_[0];
              v164->__r_.__value_.__s.__data_[0] = v166;
              v164 = (std::string *)((char *)v164 - 1);
              BOOL v76 = v165++ >= (char *)v164;
            }
            while (!v76);
          }
        }
        v167 = std::string::insert(&v177, 0, "exprtk.hpp:");
        long long v168 = *(_OWORD *)&v167->__r_.__value_.__l.__data_;
        v178.__r_.__value_.__r.__words[2] = v167->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v178.__r_.__value_.__l.__data_ = v168;
        v167->__r_.__value_.__l.__size_ = 0;
        v167->__r_.__value_.__r.__words[2] = 0;
        v167->__r_.__value_.__r.__words[0] = 0;
        *((unsigned char *)&v183.__r_.__value_.__s + 23) = 0;
        v183.__r_.__value_.__s.__data_[0] = 0;
        uint64_t v184 = -1;
        *(_OWORD *)v186 = 0u;
        *(_OWORD *)v187 = 0u;
        long long v188 = 0u;
        *(_OWORD *)__p = 0u;
        long long v190 = 0u;
        uint64_t v191 = 0;
        int v185 = 1;
        v182[0] = *(_DWORD *)(a1 + 104);
        std::string::operator=(&v183, (const std::string *)(a1 + 112));
        uint64_t v184 = *(void *)(a1 + 136);
        std::string::operator=((std::string *)v186, &__str);
        std::string::operator=((std::string *)&v187[1], &v178);
        uint64_t v169 = *(void *)(a1 + 568);
        uint64_t v170 = *(void *)(a1 + 560);
        uint64_t v171 = 30 * ((v169 - v170) >> 3) - 1;
        if (v169 == v170) {
          uint64_t v171 = 0;
        }
        if (v171 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
        {
          sub_B4B88(a1 + 552);
          uint64_t v170 = *(void *)(a1 + 560);
          uint64_t v169 = *(void *)(a1 + 568);
        }
        if (v169 == v170)
        {
          uint64_t v173 = 0;
        }
        else
        {
          unint64_t v172 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
          uint64_t v173 = *(void *)(v170 + 8 * (v172 / 0x1E)) + 136 * (v172 % 0x1E);
        }
        sub_B5158(v173, (uint64_t)v182);
        ++*(void *)(a1 + 592);
        if (SBYTE7(v190) < 0)
        {
          operator delete(__p[0]);
          if (SHIBYTE(v188) < 0) {
            goto LABEL_374;
          }
LABEL_365:
          if ((SHIBYTE(v187[0]) & 0x80000000) == 0) {
            goto LABEL_366;
          }
LABEL_375:
          operator delete(v186[0]);
          if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_376;
          }
LABEL_367:
          if ((SHIBYTE(v178.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_368;
          }
LABEL_377:
          operator delete(v178.__r_.__value_.__l.__data_);
          if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_378;
          }
LABEL_369:
          if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_370;
          }
LABEL_379:
          operator delete(__str.__r_.__value_.__l.__data_);
          if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_380;
          }
LABEL_371:
          if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0)
          {
LABEL_381:
            v84 = (void *)v179.__r_.__value_.__r.__words[0];
LABEL_148:
            operator delete(v84);
          }
        }
        else
        {
          if ((SHIBYTE(v188) & 0x80000000) == 0) {
            goto LABEL_365;
          }
LABEL_374:
          operator delete(v187[1]);
          if (SHIBYTE(v187[0]) < 0) {
            goto LABEL_375;
          }
LABEL_366:
          if ((SHIBYTE(v183.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_367;
          }
LABEL_376:
          operator delete(v183.__r_.__value_.__l.__data_);
          if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_377;
          }
LABEL_368:
          if ((SHIBYTE(v177.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_369;
          }
LABEL_378:
          operator delete(v177.__r_.__value_.__l.__data_);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_379;
          }
LABEL_370:
          if ((SHIBYTE(v180.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_371;
          }
LABEL_380:
          operator delete(v180.__r_.__value_.__l.__data_);
          if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_381;
          }
        }
LABEL_149:
        char v68 = 0;
        goto LABEL_150;
      }
    }
    else if (*(_DWORD *)(a1 + 104) == 6)
    {
      goto LABEL_92;
    }
LABEL_96:
    v183.__r_.__value_.__s.__data_[15] = 5;
    strcpy((char *)v182, "until");
    BOOL v59 = *(char *)(a1 + 135) < 0;
    uint64_t v60 = *(unsigned __int8 *)(a1 + 135);
    if ((v60 & 0x80u) != 0) {
      uint64_t v60 = *(void *)(a1 + 120);
    }
    if (v60 == 5)
    {
      unint64_t v61 = 0;
      while (1)
      {
        uint64_t v62 = v59 ? *v3 : a1 + 112;
        __darwin_ct_rune_t v63 = __tolower(*(char *)(v62 + v61));
        if (v63 != __tolower(*((char *)v182 + v61))) {
          break;
        }
        ++v61;
        BOOL v59 = *(char *)(a1 + 135) < 0;
        unint64_t v64 = *(unsigned __int8 *)(a1 + 135);
        if ((v64 & 0x80u) != 0) {
          unint64_t v64 = *(void *)(a1 + 120);
        }
        if (v61 >= v64)
        {
          uint64_t v65 = *(void *)(a1 + 24);
          if (*(void *)(a1 + 8) != v65)
          {
            *(void *)(a1 + 24) = v65 + 40;
            uint64_t v41 = v65;
          }
          goto LABEL_112;
        }
      }
    }
  }
  char v68 = 0;
  v67 = (int64x2_t *)(a1 + 632);
LABEL_150:
  *(unsigned char *)(a1 + 651) |= v174;
  v85 = v192;
  uint64_t v86 = v192[110];
  unint64_t v87 = v192[82];
  uint64_t v88 = v192[111] - v86;
  if (v88)
  {
    unint64_t v89 = v88 / 96;
    if (v89 <= 1) {
      unint64_t v89 = 1;
    }
    v90 = (unsigned char *)(v86 + 68);
    do
    {
      if (*v90 && *(void *)(v90 - 28) >= v87) {
        unsigned char *v90 = 0;
      }
      v90 += 96;
      --v89;
    }
    while (v89);
  }
  v85[82] = v87 - 1;
  if ((v68 & 1) == 0)
  {
LABEL_337:
    uint64_t v136 = 0;
    goto LABEL_338;
  }
  if (*(_DWORD *)(a1 + 104) != 40)
  {
    v119 = *(void ***)(a1 + 608);
    int64x2_t v120 = vaddq_s64(*v67, (int64x2_t)xmmword_20B8D90);
    int64x2_t *v67 = v120;
    if (v120.i64[0] >= 0x2000uLL)
    {
      operator delete(*v119);
      *(void *)(a1 + 608) += 8;
      *(void *)(a1 + 632) -= 4096;
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_20B9820;
    strcpy(__str.__r_.__value_.__l.__data_, "ERR059 - Expected '(' before condition statement of repeat until loop");
    memset(&v179, 0, sizeof(v179));
    std::string::push_back(&v179, 48);
    std::string::push_back(&v179, 54);
    std::string::push_back(&v179, 57);
    std::string::push_back(&v179, 49);
    std::string::push_back(&v179, 50);
    std::string::size_type v121 = HIBYTE(v179.__r_.__value_.__r.__words[2]);
    if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v122 = &v179;
    }
    else {
      v122 = (std::string *)v179.__r_.__value_.__r.__words[0];
    }
    if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v121 = v179.__r_.__value_.__l.__size_;
    }
    if (v121)
    {
      v123 = (std::string *)((char *)v122 + v121 - 1);
      if (v123 > v122)
      {
        v124 = &v122->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v125 = *(v124 - 1);
          *(v124 - 1) = v123->__r_.__value_.__s.__data_[0];
          v123->__r_.__value_.__s.__data_[0] = v125;
          v123 = (std::string *)((char *)v123 - 1);
          BOOL v76 = v124++ >= (char *)v123;
        }
        while (!v76);
      }
    }
    v126 = std::string::insert(&v179, 0, "exprtk.hpp:");
    long long v127 = *(_OWORD *)&v126->__r_.__value_.__l.__data_;
    v180.__r_.__value_.__r.__words[2] = v126->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v180.__r_.__value_.__l.__data_ = v127;
    v126->__r_.__value_.__l.__size_ = 0;
    v126->__r_.__value_.__r.__words[2] = 0;
    v126->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v183.__r_.__value_.__s + 23) = 0;
    v183.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v184 = -1;
    *(_OWORD *)v186 = 0u;
    *(_OWORD *)v187 = 0u;
    long long v188 = 0u;
    *(_OWORD *)__p = 0u;
    long long v190 = 0u;
    uint64_t v191 = 0;
    int v185 = 1;
    v182[0] = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v183, (const std::string *)(a1 + 112));
    uint64_t v184 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)v186, &__str);
    std::string::operator=((std::string *)&v187[1], &v180);
    uint64_t v128 = *(void *)(a1 + 568);
    uint64_t v129 = *(void *)(a1 + 560);
    uint64_t v130 = 30 * ((v128 - v129) >> 3) - 1;
    if (v128 == v129) {
      uint64_t v130 = 0;
    }
    if (v130 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v129 = *(void *)(a1 + 560);
      uint64_t v128 = *(void *)(a1 + 568);
    }
    if (v128 == v129)
    {
      uint64_t v132 = 0;
    }
    else
    {
      unint64_t v131 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v132 = *(void *)(v129 + 8 * (v131 / 0x1E)) + 136 * (v131 % 0x1E);
    }
    sub_B5158(v132, (uint64_t)v182);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v190) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v188) & 0x80000000) == 0)
      {
LABEL_224:
        if ((SHIBYTE(v187[0]) & 0x80000000) == 0) {
          goto LABEL_225;
        }
        goto LABEL_233;
      }
    }
    else if ((SHIBYTE(v188) & 0x80000000) == 0)
    {
      goto LABEL_224;
    }
    operator delete(v187[1]);
    if ((SHIBYTE(v187[0]) & 0x80000000) == 0)
    {
LABEL_225:
      if ((SHIBYTE(v183.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_226;
      }
      goto LABEL_234;
    }
LABEL_233:
    operator delete(v186[0]);
    if ((SHIBYTE(v183.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_226:
      if ((SHIBYTE(v180.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_227;
      }
      goto LABEL_235;
    }
LABEL_234:
    operator delete(v183.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v180.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_227:
      if ((SHIBYTE(v179.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_228;
      }
      goto LABEL_236;
    }
LABEL_235:
    operator delete(v180.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v179.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_228:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_229;
      }
      goto LABEL_237;
    }
LABEL_236:
    operator delete(v179.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_229:
      uint64_t v133 = v201;
      if (!v201) {
        goto LABEL_337;
      }
      goto LABEL_238;
    }
LABEL_237:
    operator delete(__str.__r_.__value_.__l.__data_);
    uint64_t v133 = v201;
    if (!v201) {
      goto LABEL_337;
    }
LABEL_238:
    if ((*(unsigned int (**)(uint64_t))(*(void *)v133 + 32))(v133) == 17) {
      goto LABEL_337;
    }
    uint64_t v134 = v201;
    if (v201) {
      goto LABEL_261;
    }
    goto LABEL_264;
  }
  uint64_t v91 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v91) {
    uint64_t v91 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v91 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v91;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v91 + 8));
  *(void *)(a1 + 136) = *(void *)(v91 + 32);
  uint64_t v202 = sub_B7FE4(a1, 0);
  if (!v202)
  {
    v93 = *(void ***)(a1 + 608);
    int64x2_t v94 = vaddq_s64(*v67, (int64x2_t)xmmword_20B8D90);
    int64x2_t *v67 = v94;
    if (v94.i64[0] >= 0x2000uLL)
    {
      operator delete(*v93);
      *(void *)(a1 + 608) += 8;
      *(void *)(a1 + 632) -= 4096;
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_20B98C0;
    strcpy(__str.__r_.__value_.__l.__data_, "ERR060 - Failed to parse condition for repeat until loop");
    memset(&v179, 0, sizeof(v179));
    std::string::push_back(&v179, 52);
    std::string::push_back(&v179, 55);
    std::string::push_back(&v179, 57);
    std::string::push_back(&v179, 49);
    std::string::push_back(&v179, 50);
    std::string::size_type v95 = HIBYTE(v179.__r_.__value_.__r.__words[2]);
    if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v96 = &v179;
    }
    else {
      v96 = (std::string *)v179.__r_.__value_.__r.__words[0];
    }
    if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v95 = v179.__r_.__value_.__l.__size_;
    }
    if (v95)
    {
      v97 = (std::string *)((char *)v96 + v95 - 1);
      if (v97 > v96)
      {
        v98 = &v96->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v99 = *(v98 - 1);
          *(v98 - 1) = v97->__r_.__value_.__s.__data_[0];
          v97->__r_.__value_.__s.__data_[0] = v99;
          v97 = (std::string *)((char *)v97 - 1);
          BOOL v76 = v98++ >= (char *)v97;
        }
        while (!v76);
      }
    }
    v100 = std::string::insert(&v179, 0, "exprtk.hpp:");
    long long v101 = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
    v180.__r_.__value_.__r.__words[2] = v100->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v180.__r_.__value_.__l.__data_ = v101;
    v100->__r_.__value_.__l.__size_ = 0;
    v100->__r_.__value_.__r.__words[2] = 0;
    v100->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v183.__r_.__value_.__s + 23) = 0;
    v183.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v184 = -1;
    *(_OWORD *)v186 = 0u;
    *(_OWORD *)v187 = 0u;
    long long v188 = 0u;
    *(_OWORD *)__p = 0u;
    long long v190 = 0u;
    uint64_t v191 = 0;
    int v185 = 1;
    v182[0] = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v183, (const std::string *)(a1 + 112));
    uint64_t v184 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)v186, &__str);
    std::string::operator=((std::string *)&v187[1], &v180);
    uint64_t v102 = *(void *)(a1 + 568);
    uint64_t v103 = *(void *)(a1 + 560);
    uint64_t v104 = 30 * ((v102 - v103) >> 3) - 1;
    if (v102 == v103) {
      uint64_t v104 = 0;
    }
    if (v104 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v103 = *(void *)(a1 + 560);
      uint64_t v102 = *(void *)(a1 + 568);
    }
    if (v102 == v103)
    {
      uint64_t v106 = 0;
    }
    else
    {
      unint64_t v105 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v106 = *(void *)(v103 + 8 * (v105 / 0x1E)) + 136 * (v105 % 0x1E);
    }
    sub_B5158(v106, (uint64_t)v182);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v190) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v188) & 0x80000000) == 0)
      {
LABEL_245:
        if ((SHIBYTE(v187[0]) & 0x80000000) == 0) {
          goto LABEL_246;
        }
        goto LABEL_254;
      }
    }
    else if ((SHIBYTE(v188) & 0x80000000) == 0)
    {
      goto LABEL_245;
    }
    operator delete(v187[1]);
    if ((SHIBYTE(v187[0]) & 0x80000000) == 0)
    {
LABEL_246:
      if ((SHIBYTE(v183.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_247;
      }
      goto LABEL_255;
    }
LABEL_254:
    operator delete(v186[0]);
    if ((SHIBYTE(v183.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_247:
      if ((SHIBYTE(v180.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_248;
      }
      goto LABEL_256;
    }
LABEL_255:
    operator delete(v183.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v180.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_248:
      if ((SHIBYTE(v179.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_249;
      }
      goto LABEL_257;
    }
LABEL_256:
    operator delete(v180.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v179.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_249:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_250;
      }
      goto LABEL_258;
    }
LABEL_257:
    operator delete(v179.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_250:
      uint64_t v135 = v201;
      if (!v201) {
        goto LABEL_337;
      }
      goto LABEL_259;
    }
LABEL_258:
    operator delete(__str.__r_.__value_.__l.__data_);
    uint64_t v135 = v201;
    if (!v201) {
      goto LABEL_337;
    }
LABEL_259:
    if ((*(unsigned int (**)(uint64_t))(*(void *)v135 + 32))(v135) == 17) {
      goto LABEL_337;
    }
    uint64_t v134 = v201;
    if (v201)
    {
LABEL_261:
      if ((*(unsigned int (**)(uint64_t))(*(void *)v201 + 32))(v134) == 18) {
        goto LABEL_337;
      }
      if (v201) {
        (*(void (**)(uint64_t))(*(void *)v201 + 8))(v201);
      }
    }
LABEL_264:
    uint64_t v136 = 0;
    uint64_t v201 = 0;
    sub_22094C((uint64_t)v193);
    v137 = v196;
    if (v196) {
      goto LABEL_339;
    }
    goto LABEL_340;
  }
  if (*(_DWORD *)(a1 + 104) != 41)
  {
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_20B9A30;
    strcpy(__str.__r_.__value_.__l.__data_, "ERR061 - Expected ')' after condition of repeat until loop");
    memset(&v179, 0, sizeof(v179));
    std::string::push_back(&v179, 54);
    std::string::push_back(&v179, 56);
    std::string::push_back(&v179, 57);
    std::string::push_back(&v179, 49);
    std::string::push_back(&v179, 50);
    std::string::size_type v107 = HIBYTE(v179.__r_.__value_.__r.__words[2]);
    if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v108 = &v179;
    }
    else {
      v108 = (std::string *)v179.__r_.__value_.__r.__words[0];
    }
    if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v107 = v179.__r_.__value_.__l.__size_;
    }
    if (v107)
    {
      v109 = (std::string *)((char *)v108 + v107 - 1);
      if (v109 > v108)
      {
        v110 = &v108->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v111 = *(v110 - 1);
          *(v110 - 1) = v109->__r_.__value_.__s.__data_[0];
          v109->__r_.__value_.__s.__data_[0] = v111;
          v109 = (std::string *)((char *)v109 - 1);
          BOOL v76 = v110++ >= (char *)v109;
        }
        while (!v76);
      }
    }
    v112 = std::string::insert(&v179, 0, "exprtk.hpp:");
    long long v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
    v180.__r_.__value_.__r.__words[2] = v112->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v180.__r_.__value_.__l.__data_ = v113;
    v112->__r_.__value_.__l.__size_ = 0;
    v112->__r_.__value_.__r.__words[2] = 0;
    v112->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v183.__r_.__value_.__s + 23) = 0;
    v183.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v184 = -1;
    *(_OWORD *)v186 = 0u;
    *(_OWORD *)v187 = 0u;
    long long v188 = 0u;
    *(_OWORD *)__p = 0u;
    long long v190 = 0u;
    uint64_t v191 = 0;
    int v185 = 1;
    v182[0] = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v183, (const std::string *)(a1 + 112));
    uint64_t v184 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)v186, &__str);
    std::string::operator=((std::string *)&v187[1], &v180);
    uint64_t v114 = *(void *)(a1 + 568);
    uint64_t v115 = *(void *)(a1 + 560);
    uint64_t v116 = 30 * ((v114 - v115) >> 3) - 1;
    if (v114 == v115) {
      uint64_t v116 = 0;
    }
    if (v116 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v115 = *(void *)(a1 + 560);
      uint64_t v114 = *(void *)(a1 + 568);
    }
    if (v114 == v115)
    {
      uint64_t v118 = 0;
    }
    else
    {
      unint64_t v117 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v118 = *(void *)(v115 + 8 * (v117 / 0x1E)) + 136 * (v117 % 0x1E);
    }
    sub_B5158(v118, (uint64_t)v182);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v190) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v188) & 0x80000000) == 0)
      {
LABEL_289:
        if ((SHIBYTE(v187[0]) & 0x80000000) == 0) {
          goto LABEL_290;
        }
        goto LABEL_298;
      }
    }
    else if ((SHIBYTE(v188) & 0x80000000) == 0)
    {
      goto LABEL_289;
    }
    operator delete(v187[1]);
    if ((SHIBYTE(v187[0]) & 0x80000000) == 0)
    {
LABEL_290:
      if ((SHIBYTE(v183.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_291;
      }
      goto LABEL_299;
    }
LABEL_298:
    operator delete(v186[0]);
    if ((SHIBYTE(v183.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_291:
      if ((SHIBYTE(v180.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_292;
      }
      goto LABEL_300;
    }
LABEL_299:
    operator delete(v183.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v180.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_292:
      if ((SHIBYTE(v179.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_293;
      }
      goto LABEL_301;
    }
LABEL_300:
    operator delete(v180.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v179.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_293:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_294;
      }
      goto LABEL_302;
    }
LABEL_301:
    operator delete(v179.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_294:
      uint64_t v152 = v201;
      if (!v201) {
        goto LABEL_309;
      }
LABEL_303:
      if ((*(unsigned int (**)(uint64_t))(*(void *)v152 + 32))(v152) != 17)
      {
        if (!v201)
        {
LABEL_308:
          uint64_t v201 = 0;
          goto LABEL_309;
        }
        if ((*(unsigned int (**)(uint64_t))(*(void *)v201 + 32))(v201) != 18)
        {
          if (v201) {
            (*(void (**)(uint64_t))(*(void *)v201 + 8))(v201);
          }
          goto LABEL_308;
        }
      }
LABEL_309:
      if (!v202 || (*(unsigned int (**)(uint64_t))(*(void *)v202 + 32))(v202) == 17)
      {
LABEL_336:
        v155 = *(void ***)(a1 + 608);
        int64x2_t v156 = vaddq_s64(*v67, (int64x2_t)xmmword_20B8D90);
        int64x2_t *v67 = v156;
        if (v156.i64[0] >= 0x2000uLL)
        {
          operator delete(*v155);
          uint64_t v136 = 0;
LABEL_344:
          *(void *)(a1 + 608) += 8;
          *(void *)(a1 + 632) -= 4096;
          sub_22094C((uint64_t)v193);
          v137 = v196;
          if (v196) {
            goto LABEL_339;
          }
          goto LABEL_340;
        }
        goto LABEL_337;
      }
      uint64_t v153 = v202;
      if (v202) {
        goto LABEL_332;
      }
      goto LABEL_335;
    }
LABEL_302:
    operator delete(__str.__r_.__value_.__l.__data_);
    uint64_t v152 = v201;
    if (!v201) {
      goto LABEL_309;
    }
    goto LABEL_303;
  }
  uint64_t v92 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v92) {
    uint64_t v92 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v92 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v92;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v92 + 8));
  *(void *)(a1 + 136) = *(void *)(v92 + 32);
  uint64_t v136 = sub_1C2B84(a1 + 344, &v202, &v201, *(unsigned char *)(*(void *)(*(void *)(a1 + 608) + ((*(void *)(a1 + 632) >> 9) & 0x7FFFFFFFFFFFF8))+ (*(void *)(a1 + 632) & 0xFFFLL)));
  if (!v136)
  {
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_20B9380;
    strcpy(__str.__r_.__value_.__l.__data_, "ERR062 - Failed to synthesize repeat until loop");
    memset(&v179, 0, sizeof(v179));
    std::string::push_back(&v179, 55);
    std::string::push_back(&v179, 48);
    std::string::push_back(&v179, 48);
    std::string::push_back(&v179, 50);
    std::string::push_back(&v179, 50);
    std::string::size_type v140 = HIBYTE(v179.__r_.__value_.__r.__words[2]);
    if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v141 = &v179;
    }
    else {
      v141 = (std::string *)v179.__r_.__value_.__r.__words[0];
    }
    if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v140 = v179.__r_.__value_.__l.__size_;
    }
    if (v140)
    {
      v142 = (std::string *)((char *)v141 + v140 - 1);
      if (v142 > v141)
      {
        v143 = &v141->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v144 = *(v143 - 1);
          *(v143 - 1) = v142->__r_.__value_.__s.__data_[0];
          v142->__r_.__value_.__s.__data_[0] = v144;
          v142 = (std::string *)((char *)v142 - 1);
          BOOL v76 = v143++ >= (char *)v142;
        }
        while (!v76);
      }
    }
    v145 = std::string::insert(&v179, 0, "exprtk.hpp:");
    long long v146 = *(_OWORD *)&v145->__r_.__value_.__l.__data_;
    v180.__r_.__value_.__r.__words[2] = v145->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v180.__r_.__value_.__l.__data_ = v146;
    v145->__r_.__value_.__l.__size_ = 0;
    v145->__r_.__value_.__r.__words[2] = 0;
    v145->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v183.__r_.__value_.__s + 23) = 0;
    v183.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v184 = -1;
    *(_OWORD *)v186 = 0u;
    *(_OWORD *)v187 = 0u;
    long long v188 = 0u;
    *(_OWORD *)__p = 0u;
    long long v190 = 0u;
    uint64_t v191 = 0;
    int v185 = 1;
    v182[0] = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v183, (const std::string *)(a1 + 112));
    uint64_t v184 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)v186, &__str);
    std::string::operator=((std::string *)&v187[1], &v180);
    uint64_t v147 = *(void *)(a1 + 568);
    uint64_t v148 = *(void *)(a1 + 560);
    uint64_t v149 = 30 * ((v147 - v148) >> 3) - 1;
    if (v147 == v148) {
      uint64_t v149 = 0;
    }
    if (v149 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v148 = *(void *)(a1 + 560);
      uint64_t v147 = *(void *)(a1 + 568);
    }
    if (v147 == v148)
    {
      uint64_t v151 = 0;
    }
    else
    {
      unint64_t v150 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v151 = *(void *)(v148 + 8 * (v150 / 0x1E)) + 136 * (v150 % 0x1E);
    }
    sub_B5158(v151, (uint64_t)v182);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v190) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v188) & 0x80000000) == 0)
      {
LABEL_316:
        if ((SHIBYTE(v187[0]) & 0x80000000) == 0) {
          goto LABEL_317;
        }
        goto LABEL_325;
      }
    }
    else if ((SHIBYTE(v188) & 0x80000000) == 0)
    {
      goto LABEL_316;
    }
    operator delete(v187[1]);
    if ((SHIBYTE(v187[0]) & 0x80000000) == 0)
    {
LABEL_317:
      if ((SHIBYTE(v183.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_318;
      }
      goto LABEL_326;
    }
LABEL_325:
    operator delete(v186[0]);
    if ((SHIBYTE(v183.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_318:
      if ((SHIBYTE(v180.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_319;
      }
      goto LABEL_327;
    }
LABEL_326:
    operator delete(v183.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v180.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_319:
      if ((SHIBYTE(v179.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_320;
      }
      goto LABEL_328;
    }
LABEL_327:
    operator delete(v180.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v179.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_320:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_321;
      }
      goto LABEL_329;
    }
LABEL_328:
    operator delete(v179.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_321:
      uint64_t v154 = v202;
      if (!v202) {
        goto LABEL_336;
      }
LABEL_330:
      if ((*(unsigned int (**)(uint64_t))(*(void *)v154 + 32))(v154) == 17) {
        goto LABEL_336;
      }
      uint64_t v153 = v202;
      if (v202)
      {
LABEL_332:
        if ((*(unsigned int (**)(uint64_t))(*(void *)v202 + 32))(v153) == 18) {
          goto LABEL_336;
        }
        if (v202) {
          (*(void (**)(uint64_t))(*(void *)v202 + 8))(v202);
        }
      }
LABEL_335:
      uint64_t v202 = 0;
      goto LABEL_336;
    }
LABEL_329:
    operator delete(__str.__r_.__value_.__l.__data_);
    uint64_t v154 = v202;
    if (!v202) {
      goto LABEL_336;
    }
    goto LABEL_330;
  }
  v138 = *(void ***)(a1 + 608);
  int64x2_t v139 = vaddq_s64(*v67, (int64x2_t)xmmword_20B8D90);
  int64x2_t *v67 = v139;
  if (v139.i64[0] >= 0x2000uLL)
  {
    operator delete(*v138);
    goto LABEL_344;
  }
LABEL_338:
  sub_22094C((uint64_t)v193);
  v137 = v196;
  if (v196) {
LABEL_339:
  }
    operator delete(v137);
LABEL_340:
  if ((void)v199)
  {
    *((void *)&v199 + 1) = v199;
    operator delete((void *)v199);
  }
  return v136;
}

void sub_C5584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,char a45)
{
  if (a18 < 0)
  {
    operator delete(__p);
    if ((a43 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a43 & 0x80000000) == 0)
  {
LABEL_3:
    if (a36 < 0) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  operator delete(a38);
  if (a36 < 0)
  {
LABEL_4:
    operator delete(a31);
    if ((a30 & 0x80000000) == 0) {
      goto LABEL_12;
    }
LABEL_9:
    operator delete(a25);
LABEL_12:
    *(unsigned char *)(v45 + 651) |= a10;
    sub_D218C((uint64_t *)(v46 - 184));
    sub_22094C(v46 - 176);
    BOOL v49 = *(void **)(v46 - 152);
    if (v49)
    {
      operator delete(v49);
      uint64_t v48 = *(void **)(v46 - 128);
      if (v48)
      {
LABEL_14:
        *(void *)(v46 - 120) = v48;
        operator delete(v48);
        _Unwind_Resume(a1);
      }
    }
    else
    {
      uint64_t v48 = *(void **)(v46 - 128);
      if (v48) {
        goto LABEL_14;
      }
    }
    _Unwind_Resume(a1);
  }
LABEL_8:
  if ((a30 & 0x80000000) == 0) {
    goto LABEL_12;
  }
  goto LABEL_9;
}

uint64_t sub_C5884(std::string::size_type a1)
{
  uint64_t v212 = 0;
  v213[0] = 0;
  uint64_t v210 = 0;
  uint64_t v211 = 0;
  std::string::size_type v2 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v2) {
    std::string::size_type v2 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v2 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v2;
  v3 = (_DWORD *)(a1 + 104);
  unint64_t v4 = (std::string::size_type *)(a1 + 112);
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v2 + 8));
  *(void *)(a1 + 136) = *(void *)(v2 + 32);
  v209 = (void *)a1;
  ++*(void *)(a1 + 656);
  if (*v3 != 40)
  {
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_20B9A40;
    strcpy(__str.__r_.__value_.__l.__data_, "ERR063 - Expected '(' at start of for-loop");
    memset(&v196, 0, sizeof(v196));
    std::string::push_back(&v196, 50);
    std::string::push_back(&v196, 52);
    std::string::push_back(&v196, 48);
    std::string::push_back(&v196, 50);
    std::string::push_back(&v196, 50);
    std::string::size_type size = HIBYTE(v196.__r_.__value_.__r.__words[2]);
    if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v7 = &v196;
    }
    else {
      uint64_t v7 = (std::string *)v196.__r_.__value_.__r.__words[0];
    }
    if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v196.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      BOOL v8 = (std::string *)((char *)v7 + size - 1);
      if (v8 > v7)
      {
        uint64_t v9 = &v7->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v10 = *(v9 - 1);
          *(v9 - 1) = v8->__r_.__value_.__s.__data_[0];
          v8->__r_.__value_.__s.__data_[0] = v10;
          BOOL v8 = (std::string *)((char *)v8 - 1);
          BOOL v11 = v9++ >= (char *)v8;
        }
        while (!v11);
      }
    }
    __darwin_ct_rune_t v12 = std::string::insert(&v196, 0, "exprtk.hpp:");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    char v200 = 0;
    LOBYTE(v198[1]) = 0;
    uint64_t v201 = -1;
    long long v203 = 0u;
    long long v204 = 0u;
    long long v205 = 0u;
    long long __p = 0u;
    long long v207 = 0u;
    uint64_t v208 = 0;
    int v202 = 1;
    LODWORD(v198[0]) = *v3;
    std::string::operator=((std::string *)&v198[1], (const std::string *)(a1 + 112));
    uint64_t v201 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v203, &__str);
    std::string::operator=((std::string *)((char *)&v204 + 8), &__dst);
    uint64_t v14 = *(void *)(a1 + 568);
    uint64_t v15 = *(void *)(a1 + 560);
    uint64_t v16 = 30 * ((v14 - v15) >> 3) - 1;
    if (v14 == v15) {
      uint64_t v16 = 0;
    }
    if (v16 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v15 = *(void *)(a1 + 560);
      uint64_t v14 = *(void *)(a1 + 568);
    }
    if (v14 == v15)
    {
      uint64_t v18 = 0;
    }
    else
    {
      unint64_t v17 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v18 = *(void *)(v15 + 8 * (v17 / 0x1E)) + 136 * (v17 % 0x1E);
    }
LABEL_29:
    sub_B5158(v18, (uint64_t)v198);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v207) < 0)
    {
      operator delete((void *)__p);
      if ((SHIBYTE(v205) & 0x80000000) == 0)
      {
LABEL_31:
        if ((SBYTE7(v204) & 0x80000000) == 0) {
          goto LABEL_32;
        }
        goto LABEL_39;
      }
    }
    else if ((SHIBYTE(v205) & 0x80000000) == 0)
    {
      goto LABEL_31;
    }
    operator delete(*((void **)&v204 + 1));
    if ((SBYTE7(v204) & 0x80000000) == 0)
    {
LABEL_32:
      if ((v200 & 0x80000000) == 0) {
        goto LABEL_33;
      }
      goto LABEL_40;
    }
LABEL_39:
    operator delete((void *)v203);
    if ((v200 & 0x80000000) == 0)
    {
LABEL_33:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_34;
      }
      goto LABEL_41;
    }
LABEL_40:
    operator delete(v198[1]);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_34:
      if ((SHIBYTE(v196.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_35;
      }
      goto LABEL_42;
    }
LABEL_41:
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v196.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_35:
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_43;
      }
      goto LABEL_292;
    }
LABEL_42:
    operator delete(v196.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
LABEL_43:
    }
      operator delete(__str.__r_.__value_.__l.__data_);
LABEL_292:
    uint64_t v111 = 0;
LABEL_293:
    uint64_t v132 = v209;
    uint64_t v133 = v209[110];
    unint64_t v134 = v209[82];
    uint64_t v135 = v209[111] - v133;
    if (!v135) {
      goto LABEL_303;
    }
    goto LABEL_294;
  }
  std::string::size_type v5 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v5) {
    std::string::size_type v5 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v5 + 40;
  }
  _DWORD *v3 = *(_DWORD *)v5;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v5 + 8));
  *(void *)(a1 + 136) = *(void *)(v5 + 32);
  int v19 = *(_DWORD *)(a1 + 104);
  if (v19 != 8)
  {
    if (v19 == 6)
    {
      std::string::size_type v20 = *(void *)(a1 + 24);
      if (*(void *)(a1 + 8) == v20) {
        std::string::size_type v20 = a1 + 40;
      }
      else {
        *(void *)(a1 + 24) = v20 + 40;
      }
      _DWORD *v3 = *(_DWORD *)v20;
      std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v20 + 8));
      uint64_t v28 = 0;
      *(void *)(a1 + 136) = *(void *)(v20 + 32);
      int v29 = 1;
      if (*v3 != 6) {
        goto LABEL_96;
      }
      goto LABEL_160;
    }
    char v199 = 3;
    strcpy((char *)v198, "var");
    BOOL v21 = *(char *)(a1 + 135) < 0;
    uint64_t v22 = *(unsigned __int8 *)(a1 + 135);
    if ((v22 & 0x80u) != 0) {
      uint64_t v22 = *(void *)(a1 + 120);
    }
    if (v22 == 3)
    {
      unint64_t v23 = 0;
      do
      {
        if (v21) {
          std::string::size_type v24 = *v4;
        }
        else {
          std::string::size_type v24 = a1 + 112;
        }
        __darwin_ct_rune_t v25 = __tolower(*(char *)(v24 + v23));
        if (v25 != __tolower(*((char *)v198 + v23))) {
          goto LABEL_57;
        }
        ++v23;
        BOOL v21 = *(char *)(a1 + 135) < 0;
        unint64_t v26 = *(unsigned __int8 *)(a1 + 135);
        if ((v26 & 0x80u) != 0) {
          unint64_t v26 = *(void *)(a1 + 120);
        }
      }
      while (v23 < v26);
      std::string::size_type v27 = *(void *)(a1 + 24);
      if (*(void *)(a1 + 8) == v27) {
        std::string::size_type v27 = a1 + 40;
      }
      else {
        *(void *)(a1 + 24) = v27 + 40;
      }
      _DWORD *v3 = *(_DWORD *)v27;
      std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v27 + 8));
      *(void *)(a1 + 136) = *(void *)(v27 + 32);
      if (*(_DWORD *)(a1 + 104) != 8)
      {
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x50uLL);
        *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_20B9A50;
        strcpy(__str.__r_.__value_.__l.__data_, "ERR064 - Expected a variable at the start of initialiser section of for-loop");
        memset(&v196, 0, sizeof(v196));
        std::string::push_back(&v196, 50);
        std::string::push_back(&v196, 54);
        std::string::push_back(&v196, 48);
        std::string::push_back(&v196, 50);
        std::string::push_back(&v196, 50);
        std::string::size_type v140 = HIBYTE(v196.__r_.__value_.__r.__words[2]);
        if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v141 = &v196;
        }
        else {
          v141 = (std::string *)v196.__r_.__value_.__r.__words[0];
        }
        if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v140 = v196.__r_.__value_.__l.__size_;
        }
        if (v140)
        {
          v142 = (std::string *)((char *)v141 + v140 - 1);
          if (v142 > v141)
          {
            v143 = &v141->__r_.__value_.__s.__data_[1];
            do
            {
              std::string::value_type v144 = *(v143 - 1);
              *(v143 - 1) = v142->__r_.__value_.__s.__data_[0];
              v142->__r_.__value_.__s.__data_[0] = v144;
              v142 = (std::string *)((char *)v142 - 1);
              BOOL v11 = v143++ >= (char *)v142;
            }
            while (!v11);
          }
        }
        v145 = std::string::insert(&v196, 0, "exprtk.hpp:");
        long long v146 = *(_OWORD *)&v145->__r_.__value_.__l.__data_;
        __dst.__r_.__value_.__r.__words[2] = v145->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v146;
        v145->__r_.__value_.__l.__size_ = 0;
        v145->__r_.__value_.__r.__words[2] = 0;
        v145->__r_.__value_.__r.__words[0] = 0;
        char v200 = 0;
        LOBYTE(v198[1]) = 0;
        uint64_t v201 = -1;
        long long v203 = 0u;
        long long v204 = 0u;
        long long v205 = 0u;
        long long __p = 0u;
        long long v207 = 0u;
        uint64_t v208 = 0;
        int v202 = 1;
        LODWORD(v198[0]) = *v3;
        std::string::operator=((std::string *)&v198[1], (const std::string *)(a1 + 112));
        uint64_t v201 = *(void *)(a1 + 136);
        std::string::operator=((std::string *)&v203, &__str);
        std::string::operator=((std::string *)((char *)&v204 + 8), &__dst);
        uint64_t v147 = *(void *)(a1 + 568);
        uint64_t v148 = *(void *)(a1 + 560);
        uint64_t v149 = 30 * ((v147 - v148) >> 3) - 1;
        if (v147 == v148) {
          uint64_t v149 = 0;
        }
        if (v149 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
        {
          sub_B4B88(a1 + 552);
          uint64_t v148 = *(void *)(a1 + 560);
          uint64_t v147 = *(void *)(a1 + 568);
        }
        if (v147 == v148)
        {
          uint64_t v18 = 0;
        }
        else
        {
          unint64_t v150 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
          uint64_t v18 = *(void *)(v148 + 8 * (v150 / 0x1E)) + 136 * (v150 % 0x1E);
        }
        goto LABEL_29;
      }
      if (*(void *)(a1 + 8) == *(void *)(a1 + 24)) {
        int64x2_t v139 = (_DWORD *)(a1 + 40);
      }
      else {
        int64x2_t v139 = *(_DWORD **)(a1 + 24);
      }
      if (*v139 != 10)
      {
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x50uLL);
        *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_20B99B0;
        strcpy(__str.__r_.__value_.__l.__data_, "ERR065 - Expected variable assignment of initialiser section of for-loop");
        memset(&v196, 0, sizeof(v196));
        std::string::push_back(&v196, 50);
        std::string::push_back(&v196, 55);
        std::string::push_back(&v196, 48);
        std::string::push_back(&v196, 50);
        std::string::push_back(&v196, 50);
        std::string::size_type v151 = HIBYTE(v196.__r_.__value_.__r.__words[2]);
        if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v152 = &v196;
        }
        else {
          uint64_t v152 = (std::string *)v196.__r_.__value_.__r.__words[0];
        }
        if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v151 = v196.__r_.__value_.__l.__size_;
        }
        if (v151)
        {
          uint64_t v153 = (std::string *)((char *)v152 + v151 - 1);
          if (v153 > v152)
          {
            uint64_t v154 = &v152->__r_.__value_.__s.__data_[1];
            do
            {
              std::string::value_type v155 = *(v154 - 1);
              *(v154 - 1) = v153->__r_.__value_.__s.__data_[0];
              v153->__r_.__value_.__s.__data_[0] = v155;
              uint64_t v153 = (std::string *)((char *)v153 - 1);
              BOOL v11 = v154++ >= (char *)v153;
            }
            while (!v11);
          }
        }
        int64x2_t v156 = std::string::insert(&v196, 0, "exprtk.hpp:");
        long long v157 = *(_OWORD *)&v156->__r_.__value_.__l.__data_;
        __dst.__r_.__value_.__r.__words[2] = v156->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v157;
        v156->__r_.__value_.__l.__size_ = 0;
        v156->__r_.__value_.__r.__words[2] = 0;
        v156->__r_.__value_.__r.__words[0] = 0;
        char v200 = 0;
        LOBYTE(v198[1]) = 0;
        uint64_t v201 = -1;
        long long v203 = 0u;
        long long v204 = 0u;
        long long v205 = 0u;
        long long __p = 0u;
        long long v207 = 0u;
        uint64_t v208 = 0;
        int v202 = 1;
        LODWORD(v198[0]) = *v3;
        std::string::operator=((std::string *)&v198[1], (const std::string *)(a1 + 112));
        uint64_t v201 = *(void *)(a1 + 136);
        std::string::operator=((std::string *)&v203, &__str);
        std::string::operator=((std::string *)((char *)&v204 + 8), &__dst);
        uint64_t v158 = *(void *)(a1 + 568);
        uint64_t v159 = *(void *)(a1 + 560);
        uint64_t v160 = 30 * ((v158 - v159) >> 3) - 1;
        if (v158 == v159) {
          uint64_t v160 = 0;
        }
        if (v160 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
        {
          sub_B4B88(a1 + 552);
          uint64_t v159 = *(void *)(a1 + 560);
          uint64_t v158 = *(void *)(a1 + 568);
        }
        if (v158 == v159)
        {
          uint64_t v18 = 0;
        }
        else
        {
          unint64_t v161 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
          uint64_t v18 = *(void *)(v159 + 8 * (v161 / 0x1E)) + 136 * (v161 % 0x1E);
        }
        goto LABEL_29;
      }
      if (*(char *)(a1 + 135) < 0)
      {
        sub_4200(&__dst, *(void **)(a1 + 112), *(void *)(a1 + 120));
      }
      else
      {
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)v4;
        __dst.__r_.__value_.__r.__words[2] = *(void *)(a1 + 128);
      }
      uint64_t v162 = *(void *)(a1 + 880);
      if (*(void *)(a1 + 888) != v162)
      {
        unint64_t v163 = 0;
        unint64_t v164 = *(void *)(*(void *)(a1 + 872) + 656);
        do
        {
          uint64_t v28 = (unsigned __int8 *)(v162 + 96 * v163);
          if (*((void *)v28 + 5) <= v164)
          {
            int v166 = (char)v28[23];
            uint64_t v167 = v28[23];
            BOOL v168 = v166 < 0;
            size_t v169 = *((void *)v28 + 1);
            if (v166 < 0) {
              uint64_t v167 = *((void *)v28 + 1);
            }
            std::string::size_type v170 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v170 = __dst.__r_.__value_.__l.__size_;
            }
            if (v167 == v170)
            {
              if (v167)
              {
                unint64_t v171 = 0;
                unint64_t v172 = (void *)(v162 + 96 * v163);
                while (1)
                {
                  uint64_t v173 = v168 ? (void *)*v172 : v172;
                  __darwin_ct_rune_t v174 = __tolower(*((char *)v173 + v171));
                  v175 = (__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                       ? &__dst
                       : (std::string *)__dst.__r_.__value_.__r.__words[0];
                  if (v174 != __tolower(v175->__r_.__value_.__s.__data_[v171])) {
                    break;
                  }
                  ++v171;
                  unint64_t v172 = (void *)(v162 + 96 * v163);
                  int v166 = (char)v28[23];
                  unint64_t v176 = v28[23];
                  BOOL v168 = v166 < 0;
                  size_t v169 = *((void *)v28 + 1);
                  if (v166 < 0) {
                    unint64_t v176 = *((void *)v28 + 1);
                  }
                  if (v171 >= v176) {
                    goto LABEL_356;
                  }
                }
              }
              else
              {
LABEL_356:
                LODWORD(v165) = v166;
                if (*(void *)(v162 + 96 * v163 + 32) == -1) {
                  goto LABEL_378;
                }
              }
            }
          }
          ++v163;
          uint64_t v162 = *(void *)(a1 + 880);
        }
        while (v163 < 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 888) - v162) >> 5));
      }
      uint64_t v28 = (unsigned __int8 *)(a1 + 904);
      LODWORD(v165) = *(unsigned __int8 *)(a1 + 927);
      size_t v169 = *(void *)(a1 + 912);
LABEL_378:
      uint64_t v165 = v165;
      if ((v165 & 0x80u) == 0) {
        size_t v177 = v165;
      }
      else {
        size_t v177 = v169;
      }
      std::string::size_type v178 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v178 = __dst.__r_.__value_.__l.__size_;
      }
      if (v177 != v178) {
        goto LABEL_393;
      }
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_dst = &__dst;
      }
      else {
        p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
      }
      if ((v165 & 0x80) != 0)
      {
        BOOL v181 = memcmp(*(const void **)v28, p_dst, v169) == 0;
      }
      else
      {
        if (v165)
        {
          std::string v180 = v28;
          while (*v180 == p_dst->__r_.__value_.__s.__data_[0])
          {
            ++v180;
            p_dst = (std::string *)((char *)p_dst + 1);
            if (!--v165) {
              goto LABEL_392;
            }
          }
LABEL_393:
          v182 = v28 + 68;
LABEL_394:
          if (sub_1C344C((uint64_t *)(a1 + 440), (uint64_t)&__dst))
          {
            int v29 = 1;
          }
          else
          {
            if (*v182 || !sub_A938C(v28, (unsigned __int8 *)&__dst) || *((_DWORD *)v28 + 16) != 1)
            {
              *((unsigned char *)&__str.__r_.__value_.__s + 23) = 3;
              LODWORD(__str.__r_.__value_.__l.__data_) = 4144959;
              uint64_t v189 = -1;
              uint64_t v190 = -1;
              uint64_t v191 = -1;
              uint64_t v192 = 0;
              memset(v193, 0, 13);
              memset(&v193[2], 0, 24);
              std::string::operator=(&__str, &__dst);
              BYTE4(v193[1]) = 1;
              LODWORD(v193[1]) = 1;
              uint64_t v191 = *(void *)(a1 + 656);
              uint64_t v192 = 1;
              operator new();
            }
            int v29 = 1;
            v28[68] = 1;
            ++*((void *)v28 + 6);
          }
          char v187 = 1;
LABEL_411:
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          if ((v187 & 1) == 0) {
            goto LABEL_292;
          }
          goto LABEL_58;
        }
LABEL_392:
        BOOL v181 = 1;
      }
      v182 = v28 + 68;
      if (!v181 || !v28[68]) {
        goto LABEL_394;
      }
      std::operator+<char>();
      std::string v183 = std::string::append(&v196, "' is being shadowed by a previous declaration");
      long long v184 = *(_OWORD *)&v183->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v183->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v184;
      v183->__r_.__value_.__l.__size_ = 0;
      v183->__r_.__value_.__r.__words[2] = 0;
      v183->__r_.__value_.__r.__words[0] = 0;
      sub_B1D70(0x5647u, (unint64_t)&v194);
      int v185 = std::string::insert(&v194, 0, "exprtk.hpp:");
      long long v186 = *(_OWORD *)&v185->__r_.__value_.__l.__data_;
      v195.__r_.__value_.__r.__words[2] = v185->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v195.__r_.__value_.__l.__data_ = v186;
      v185->__r_.__value_.__l.__size_ = 0;
      v185->__r_.__value_.__r.__words[2] = 0;
      v185->__r_.__value_.__r.__words[0] = 0;
      sub_B49F0(1, a1 + 104, &__str, &v195, (uint64_t)v198);
      sub_B1CB0((void *)a1, (uint64_t)v198);
      sub_B1ED4((uint64_t)v198);
      if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v195.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v194.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_404:
          if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_405;
          }
          goto LABEL_417;
        }
      }
      else if ((SHIBYTE(v194.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_404;
      }
      operator delete(v194.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_405:
        if ((SHIBYTE(v196.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_406:
          char v187 = 0;
          int v29 = 1;
          goto LABEL_411;
        }
LABEL_418:
        operator delete(v196.__r_.__value_.__l.__data_);
        goto LABEL_406;
      }
LABEL_417:
      operator delete(__str.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v196.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_406;
      }
      goto LABEL_418;
    }
  }
LABEL_57:
  uint64_t v28 = 0;
  int v29 = 1;
LABEL_58:
  v213[0] = sub_B7FE4(a1, 0);
  if (!v213[0])
  {
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_20B9A60;
    strcpy(__str.__r_.__value_.__l.__data_, "ERR068 - Failed to parse initialiser of for-loop");
    memset(&v196, 0, sizeof(v196));
    std::string::push_back(&v196, 49);
    std::string::push_back(&v196, 52);
    std::string::push_back(&v196, 49);
    std::string::push_back(&v196, 50);
    std::string::push_back(&v196, 50);
    std::string::size_type v31 = HIBYTE(v196.__r_.__value_.__r.__words[2]);
    if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v32 = &v196;
    }
    else {
      uint64_t v32 = (std::string *)v196.__r_.__value_.__r.__words[0];
    }
    if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v31 = v196.__r_.__value_.__l.__size_;
    }
    if (v31)
    {
      long long v33 = (std::string *)((char *)v32 + v31 - 1);
      if (v33 > v32)
      {
        uint64_t v34 = &v32->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v35 = *(v34 - 1);
          *(v34 - 1) = v33->__r_.__value_.__s.__data_[0];
          v33->__r_.__value_.__s.__data_[0] = v35;
          long long v33 = (std::string *)((char *)v33 - 1);
          BOOL v11 = v34++ >= (char *)v33;
        }
        while (!v11);
      }
    }
    unint64_t v36 = std::string::insert(&v196, 0, "exprtk.hpp:");
    long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    char v200 = 0;
    LOBYTE(v198[1]) = 0;
    uint64_t v201 = -1;
    long long v203 = 0u;
    long long v204 = 0u;
    long long v205 = 0u;
    long long __p = 0u;
    long long v207 = 0u;
    uint64_t v208 = 0;
    int v202 = 1;
    LODWORD(v198[0]) = *v3;
    std::string::operator=((std::string *)&v198[1], (const std::string *)(a1 + 112));
    uint64_t v201 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v203, &__str);
    std::string::operator=((std::string *)((char *)&v204 + 8), &__dst);
    uint64_t v38 = *(void *)(a1 + 568);
    uint64_t v39 = *(void *)(a1 + 560);
    uint64_t v40 = 30 * ((v38 - v39) >> 3) - 1;
    if (v38 == v39) {
      uint64_t v40 = 0;
    }
    if (v40 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v39 = *(void *)(a1 + 560);
      uint64_t v38 = *(void *)(a1 + 568);
    }
    if (v38 == v39)
    {
      uint64_t v42 = 0;
    }
    else
    {
      unint64_t v41 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v42 = *(void *)(v39 + 8 * (v41 / 0x1E)) + 136 * (v41 % 0x1E);
    }
    sub_B5158(v42, (uint64_t)v198);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v207) < 0)
    {
      operator delete((void *)__p);
      if ((SHIBYTE(v205) & 0x80000000) == 0)
      {
LABEL_135:
        if ((SBYTE7(v204) & 0x80000000) == 0) {
          goto LABEL_136;
        }
        goto LABEL_143;
      }
    }
    else if ((SHIBYTE(v205) & 0x80000000) == 0)
    {
      goto LABEL_135;
    }
    operator delete(*((void **)&v204 + 1));
    if ((SBYTE7(v204) & 0x80000000) == 0)
    {
LABEL_136:
      if ((v200 & 0x80000000) == 0) {
        goto LABEL_137;
      }
      goto LABEL_144;
    }
LABEL_143:
    operator delete((void *)v203);
    if ((v200 & 0x80000000) == 0)
    {
LABEL_137:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_138;
      }
      goto LABEL_145;
    }
LABEL_144:
    operator delete(v198[1]);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_138:
      if ((SHIBYTE(v196.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_139;
      }
      goto LABEL_146;
    }
LABEL_145:
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v196.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_139:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_159;
      }
LABEL_147:
      operator delete(__str.__r_.__value_.__l.__data_);
      goto LABEL_159;
    }
LABEL_146:
    operator delete(v196.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_159;
    }
    goto LABEL_147;
  }
  if (*v3 != 6)
  {
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_20B99F0;
    strcpy(__str.__r_.__value_.__l.__data_, "ERR069 - Expected ';' after initialiser of for-loop");
    memset(&v196, 0, sizeof(v196));
    std::string::push_back(&v196, 49);
    std::string::push_back(&v196, 53);
    std::string::push_back(&v196, 49);
    std::string::push_back(&v196, 50);
    std::string::push_back(&v196, 50);
    std::string::size_type v43 = HIBYTE(v196.__r_.__value_.__r.__words[2]);
    if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v44 = &v196;
    }
    else {
      unint64_t v44 = (std::string *)v196.__r_.__value_.__r.__words[0];
    }
    if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v43 = v196.__r_.__value_.__l.__size_;
    }
    if (v43)
    {
      uint64_t v45 = (std::string *)((char *)v44 + v43 - 1);
      if (v45 > v44)
      {
        uint64_t v46 = &v44->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v47 = *(v46 - 1);
          *(v46 - 1) = v45->__r_.__value_.__s.__data_[0];
          v45->__r_.__value_.__s.__data_[0] = v47;
          uint64_t v45 = (std::string *)((char *)v45 - 1);
          BOOL v11 = v46++ >= (char *)v45;
        }
        while (!v11);
      }
    }
    uint64_t v48 = std::string::insert(&v196, 0, "exprtk.hpp:");
    long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v49;
    v48->__r_.__value_.__l.__size_ = 0;
    v48->__r_.__value_.__r.__words[2] = 0;
    v48->__r_.__value_.__r.__words[0] = 0;
    char v200 = 0;
    LOBYTE(v198[1]) = 0;
    uint64_t v201 = -1;
    long long v203 = 0u;
    long long v204 = 0u;
    long long v205 = 0u;
    long long __p = 0u;
    long long v207 = 0u;
    uint64_t v208 = 0;
    int v202 = 1;
    LODWORD(v198[0]) = *v3;
    std::string::operator=((std::string *)&v198[1], (const std::string *)(a1 + 112));
    uint64_t v201 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v203, &__str);
    std::string::operator=((std::string *)((char *)&v204 + 8), &__dst);
    uint64_t v50 = *(void *)(a1 + 568);
    uint64_t v51 = *(void *)(a1 + 560);
    uint64_t v52 = 30 * ((v50 - v51) >> 3) - 1;
    if (v50 == v51) {
      uint64_t v52 = 0;
    }
    if (v52 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v51 = *(void *)(a1 + 560);
      uint64_t v50 = *(void *)(a1 + 568);
    }
    if (v50 == v51)
    {
      uint64_t v54 = 0;
    }
    else
    {
      unint64_t v53 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v54 = *(void *)(v51 + 8 * (v53 / 0x1E)) + 136 * (v53 % 0x1E);
    }
    sub_B5158(v54, (uint64_t)v198);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v207) < 0)
    {
      operator delete((void *)__p);
      if ((SHIBYTE(v205) & 0x80000000) == 0)
      {
LABEL_154:
        if ((SBYTE7(v204) & 0x80000000) == 0) {
          goto LABEL_155;
        }
        goto LABEL_165;
      }
    }
    else if ((SHIBYTE(v205) & 0x80000000) == 0)
    {
      goto LABEL_154;
    }
    operator delete(*((void **)&v204 + 1));
    if ((SBYTE7(v204) & 0x80000000) == 0)
    {
LABEL_155:
      if ((v200 & 0x80000000) == 0) {
        goto LABEL_156;
      }
      goto LABEL_166;
    }
LABEL_165:
    operator delete((void *)v203);
    if ((v200 & 0x80000000) == 0)
    {
LABEL_156:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_157;
      }
      goto LABEL_167;
    }
LABEL_166:
    operator delete(v198[1]);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_157:
      if ((SHIBYTE(v196.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_158;
      }
      goto LABEL_168;
    }
LABEL_167:
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v196.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_158:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_159;
      }
      goto LABEL_169;
    }
LABEL_168:
    operator delete(v196.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_159:
      int v29 = 0;
      if (*v3 != 6) {
        goto LABEL_96;
      }
      goto LABEL_160;
    }
LABEL_169:
    operator delete(__str.__r_.__value_.__l.__data_);
    int v29 = 0;
    if (*v3 != 6) {
      goto LABEL_96;
    }
    goto LABEL_160;
  }
  std::string::size_type v30 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v30) {
    std::string::size_type v30 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v30 + 40;
  }
  _DWORD *v3 = *(_DWORD *)v30;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v30 + 8));
  *(void *)(a1 + 136) = *(void *)(v30 + 32);
  if (*v3 != 6)
  {
LABEL_96:
    uint64_t v212 = sub_B7FE4(a1, 0);
    if (v212)
    {
      if (*v3 == 6)
      {
        std::string::size_type v55 = *(void *)(a1 + 24);
        if (*(void *)(a1 + 8) == v55) {
          std::string::size_type v55 = a1 + 40;
        }
        else {
          *(void *)(a1 + 24) = v55 + 40;
        }
        goto LABEL_173;
      }
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
      *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_20B9A70;
      strcpy(__str.__r_.__value_.__l.__data_, "ERR071 - Expected ';' after condition section of for-loop");
      memset(&v196, 0, sizeof(v196));
      std::string::push_back(&v196, 53);
      std::string::push_back(&v196, 55);
      std::string::push_back(&v196, 49);
      std::string::push_back(&v196, 50);
      std::string::push_back(&v196, 50);
      std::string::size_type v68 = HIBYTE(v196.__r_.__value_.__r.__words[2]);
      if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v69 = &v196;
      }
      else {
        v69 = (std::string *)v196.__r_.__value_.__r.__words[0];
      }
      if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v68 = v196.__r_.__value_.__l.__size_;
      }
      if (v68)
      {
        int64x2_t v70 = (std::string *)((char *)v69 + v68 - 1);
        if (v70 > v69)
        {
          v71 = &v69->__r_.__value_.__s.__data_[1];
          do
          {
            std::string::value_type v72 = *(v71 - 1);
            *(v71 - 1) = v70->__r_.__value_.__s.__data_[0];
            v70->__r_.__value_.__s.__data_[0] = v72;
            int64x2_t v70 = (std::string *)((char *)v70 - 1);
            BOOL v11 = v71++ >= (char *)v70;
          }
          while (!v11);
        }
      }
      v73 = std::string::insert(&v196, 0, "exprtk.hpp:");
      long long v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
      __dst.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v74;
      v73->__r_.__value_.__l.__size_ = 0;
      v73->__r_.__value_.__r.__words[2] = 0;
      v73->__r_.__value_.__r.__words[0] = 0;
      char v200 = 0;
      LOBYTE(v198[1]) = 0;
      uint64_t v201 = -1;
      long long v203 = 0u;
      long long v204 = 0u;
      long long v205 = 0u;
      long long __p = 0u;
      long long v207 = 0u;
      uint64_t v208 = 0;
      int v202 = 1;
      LODWORD(v198[0]) = *v3;
      std::string::operator=((std::string *)&v198[1], (const std::string *)(a1 + 112));
      uint64_t v201 = *(void *)(a1 + 136);
      std::string::operator=((std::string *)&v203, &__str);
      std::string::operator=((std::string *)((char *)&v204 + 8), &__dst);
      uint64_t v75 = *(void *)(a1 + 568);
      uint64_t v76 = *(void *)(a1 + 560);
      uint64_t v77 = 30 * ((v75 - v76) >> 3) - 1;
      if (v75 == v76) {
        uint64_t v77 = 0;
      }
      if (v77 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
      {
        sub_B4B88(a1 + 552);
        uint64_t v76 = *(void *)(a1 + 560);
        uint64_t v75 = *(void *)(a1 + 568);
      }
      if (v75 == v76)
      {
        uint64_t v67 = 0;
      }
      else
      {
        unint64_t v78 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
        uint64_t v67 = *(void *)(v76 + 8 * (v78 / 0x1E)) + 136 * (v78 % 0x1E);
      }
    }
    else
    {
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
      *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_20B9A80;
      strcpy(__str.__r_.__value_.__l.__data_, "ERR070 - Failed to parse condition of for-loop");
      memset(&v196, 0, sizeof(v196));
      std::string::push_back(&v196, 53);
      std::string::push_back(&v196, 54);
      std::string::push_back(&v196, 49);
      std::string::push_back(&v196, 50);
      std::string::push_back(&v196, 50);
      std::string::size_type v56 = HIBYTE(v196.__r_.__value_.__r.__words[2]);
      if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v57 = &v196;
      }
      else {
        uint64_t v57 = (std::string *)v196.__r_.__value_.__r.__words[0];
      }
      if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v56 = v196.__r_.__value_.__l.__size_;
      }
      if (v56)
      {
        uint64_t v58 = (std::string *)((char *)v57 + v56 - 1);
        if (v58 > v57)
        {
          BOOL v59 = &v57->__r_.__value_.__s.__data_[1];
          do
          {
            std::string::value_type v60 = *(v59 - 1);
            *(v59 - 1) = v58->__r_.__value_.__s.__data_[0];
            v58->__r_.__value_.__s.__data_[0] = v60;
            uint64_t v58 = (std::string *)((char *)v58 - 1);
            BOOL v11 = v59++ >= (char *)v58;
          }
          while (!v11);
        }
      }
      unint64_t v61 = std::string::insert(&v196, 0, "exprtk.hpp:");
      long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
      __dst.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v62;
      v61->__r_.__value_.__l.__size_ = 0;
      v61->__r_.__value_.__r.__words[2] = 0;
      v61->__r_.__value_.__r.__words[0] = 0;
      char v200 = 0;
      LOBYTE(v198[1]) = 0;
      uint64_t v201 = -1;
      long long v203 = 0u;
      long long v204 = 0u;
      long long v205 = 0u;
      long long __p = 0u;
      long long v207 = 0u;
      uint64_t v208 = 0;
      int v202 = 1;
      LODWORD(v198[0]) = *v3;
      std::string::operator=((std::string *)&v198[1], (const std::string *)(a1 + 112));
      uint64_t v201 = *(void *)(a1 + 136);
      std::string::operator=((std::string *)&v203, &__str);
      std::string::operator=((std::string *)((char *)&v204 + 8), &__dst);
      uint64_t v63 = *(void *)(a1 + 568);
      uint64_t v64 = *(void *)(a1 + 560);
      uint64_t v65 = 30 * ((v63 - v64) >> 3) - 1;
      if (v63 == v64) {
        uint64_t v65 = 0;
      }
      if (v65 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
      {
        sub_B4B88(a1 + 552);
        uint64_t v64 = *(void *)(a1 + 560);
        uint64_t v63 = *(void *)(a1 + 568);
      }
      if (v63 == v64)
      {
        uint64_t v67 = 0;
      }
      else
      {
        unint64_t v66 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
        uint64_t v67 = *(void *)(v64 + 8 * (v66 / 0x1E)) + 136 * (v66 % 0x1E);
      }
    }
    sub_B5158(v67, (uint64_t)v198);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v207) < 0)
    {
      operator delete((void *)__p);
      if ((SHIBYTE(v205) & 0x80000000) == 0)
      {
LABEL_182:
        if ((SBYTE7(v204) & 0x80000000) == 0) {
          goto LABEL_183;
        }
        goto LABEL_226;
      }
    }
    else if ((SHIBYTE(v205) & 0x80000000) == 0)
    {
      goto LABEL_182;
    }
    operator delete(*((void **)&v204 + 1));
    if ((SBYTE7(v204) & 0x80000000) == 0)
    {
LABEL_183:
      if ((v200 & 0x80000000) == 0) {
        goto LABEL_184;
      }
      goto LABEL_227;
    }
LABEL_226:
    operator delete((void *)v203);
    if ((v200 & 0x80000000) == 0)
    {
LABEL_184:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_185;
      }
      goto LABEL_228;
    }
LABEL_227:
    operator delete(v198[1]);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_185:
      if ((SHIBYTE(v196.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_186;
      }
      goto LABEL_229;
    }
LABEL_228:
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v196.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_186:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_187;
      }
      goto LABEL_230;
    }
LABEL_229:
    operator delete(v196.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_187:
      int v29 = 0;
      if (*v3 != 41) {
        goto LABEL_188;
      }
LABEL_174:
      std::string::size_type v79 = *(void *)(a1 + 24);
      if (*(void *)(a1 + 8) == v79) {
        std::string::size_type v79 = a1 + 40;
      }
      else {
        *(void *)(a1 + 24) = v79 + 40;
      }
      _DWORD *v3 = *(_DWORD *)v79;
      std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v79 + 8));
      *(void *)(a1 + 136) = *(void *)(v79 + 32);
      if ((v29 & 1) == 0) {
        goto LABEL_272;
      }
      goto LABEL_235;
    }
LABEL_230:
    operator delete(__str.__r_.__value_.__l.__data_);
    int v29 = 0;
    if (*v3 != 41) {
      goto LABEL_188;
    }
    goto LABEL_174;
  }
LABEL_160:
  std::string::size_type v55 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v55) {
    std::string::size_type v55 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v55 + 40;
  }
LABEL_173:
  _DWORD *v3 = *(_DWORD *)v55;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v55 + 8));
  *(void *)(a1 + 136) = *(void *)(v55 + 32);
  if (*v3 == 41) {
    goto LABEL_174;
  }
LABEL_188:
  uint64_t v211 = sub_B7FE4(a1, 0);
  if (!v211)
  {
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_20B9A60;
    strcpy(__str.__r_.__value_.__l.__data_, "ERR072 - Failed to parse incrementor of for-loop");
    memset(&v196, 0, sizeof(v196));
    std::string::push_back(&v196, 57);
    std::string::push_back(&v196, 56);
    std::string::push_back(&v196, 49);
    std::string::push_back(&v196, 50);
    std::string::push_back(&v196, 50);
    std::string::size_type v81 = HIBYTE(v196.__r_.__value_.__r.__words[2]);
    if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v82 = &v196;
    }
    else {
      unint64_t v82 = (std::string *)v196.__r_.__value_.__r.__words[0];
    }
    if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v81 = v196.__r_.__value_.__l.__size_;
    }
    if (v81)
    {
      uint64_t v83 = (std::string *)((char *)v82 + v81 - 1);
      if (v83 > v82)
      {
        v84 = &v82->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v85 = *(v84 - 1);
          *(v84 - 1) = v83->__r_.__value_.__s.__data_[0];
          v83->__r_.__value_.__s.__data_[0] = v85;
          uint64_t v83 = (std::string *)((char *)v83 - 1);
          BOOL v11 = v84++ >= (char *)v83;
        }
        while (!v11);
      }
    }
    uint64_t v86 = std::string::insert(&v196, 0, "exprtk.hpp:");
    long long v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v87;
    v86->__r_.__value_.__l.__size_ = 0;
    v86->__r_.__value_.__r.__words[2] = 0;
    v86->__r_.__value_.__r.__words[0] = 0;
    char v200 = 0;
    LOBYTE(v198[1]) = 0;
    uint64_t v201 = -1;
    long long v203 = 0u;
    long long v204 = 0u;
    long long v205 = 0u;
    long long __p = 0u;
    long long v207 = 0u;
    uint64_t v208 = 0;
    int v202 = 1;
    LODWORD(v198[0]) = *v3;
    std::string::operator=((std::string *)&v198[1], (const std::string *)(a1 + 112));
    uint64_t v201 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v203, &__str);
    std::string::operator=((std::string *)((char *)&v204 + 8), &__dst);
    uint64_t v88 = *(void *)(a1 + 568);
    uint64_t v89 = *(void *)(a1 + 560);
    uint64_t v90 = 30 * ((v88 - v89) >> 3) - 1;
    if (v88 == v89) {
      uint64_t v90 = 0;
    }
    if (v90 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v89 = *(void *)(a1 + 560);
      uint64_t v88 = *(void *)(a1 + 568);
    }
    if (v88 == v89)
    {
      uint64_t v92 = 0;
    }
    else
    {
      unint64_t v91 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v92 = *(void *)(v89 + 8 * (v91 / 0x1E)) + 136 * (v91 % 0x1E);
    }
    goto LABEL_265;
  }
  if (*v3 != 41)
  {
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_20B9A90;
    strcpy(__str.__r_.__value_.__l.__data_, "ERR073 - Expected ')' after incrementor section of for-loop");
    memset(&v196, 0, sizeof(v196));
    std::string::push_back(&v196, 57);
    std::string::push_back(&v196, 57);
    std::string::push_back(&v196, 49);
    std::string::push_back(&v196, 50);
    std::string::push_back(&v196, 50);
    std::string::size_type v93 = HIBYTE(v196.__r_.__value_.__r.__words[2]);
    if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int64x2_t v94 = &v196;
    }
    else {
      int64x2_t v94 = (std::string *)v196.__r_.__value_.__r.__words[0];
    }
    if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v93 = v196.__r_.__value_.__l.__size_;
    }
    if (v93)
    {
      std::string::size_type v95 = (std::string *)((char *)v94 + v93 - 1);
      if (v95 > v94)
      {
        v96 = &v94->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v97 = *(v96 - 1);
          *(v96 - 1) = v95->__r_.__value_.__s.__data_[0];
          v95->__r_.__value_.__s.__data_[0] = v97;
          std::string::size_type v95 = (std::string *)((char *)v95 - 1);
          BOOL v11 = v96++ >= (char *)v95;
        }
        while (!v11);
      }
    }
    v98 = std::string::insert(&v196, 0, "exprtk.hpp:");
    long long v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v98->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v99;
    v98->__r_.__value_.__l.__size_ = 0;
    v98->__r_.__value_.__r.__words[2] = 0;
    v98->__r_.__value_.__r.__words[0] = 0;
    char v200 = 0;
    LOBYTE(v198[1]) = 0;
    uint64_t v201 = -1;
    long long v203 = 0u;
    long long v204 = 0u;
    long long v205 = 0u;
    long long __p = 0u;
    long long v207 = 0u;
    uint64_t v208 = 0;
    int v202 = 1;
    LODWORD(v198[0]) = *v3;
    std::string::operator=((std::string *)&v198[1], (const std::string *)(a1 + 112));
    uint64_t v201 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v203, &__str);
    std::string::operator=((std::string *)((char *)&v204 + 8), &__dst);
    uint64_t v100 = *(void *)(a1 + 568);
    uint64_t v101 = *(void *)(a1 + 560);
    uint64_t v102 = 30 * ((v100 - v101) >> 3) - 1;
    if (v100 == v101) {
      uint64_t v102 = 0;
    }
    if (v102 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v101 = *(void *)(a1 + 560);
      uint64_t v100 = *(void *)(a1 + 568);
    }
    if (v100 == v101)
    {
      uint64_t v92 = 0;
    }
    else
    {
      unint64_t v103 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v92 = *(void *)(v101 + 8 * (v103 / 0x1E)) + 136 * (v103 % 0x1E);
    }
    goto LABEL_265;
  }
  std::string::size_type v80 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v80) {
    std::string::size_type v80 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v80 + 40;
  }
  _DWORD *v3 = *(_DWORD *)v80;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v80 + 8));
  *(void *)(a1 + 136) = *(void *)(v80 + 32);
  if (!v29)
  {
LABEL_272:
    if (!v28) {
      goto LABEL_274;
    }
    goto LABEL_273;
  }
LABEL_235:
  uint64_t v104 = (int64x2_t *)(a1 + 632);
  unint64_t v105 = *(void *)(a1 + 632);
  if (!v105)
  {
    sub_1C2568(a1 + 600);
    unint64_t v105 = v104->i64[0];
  }
  uint64_t v106 = *(void *)(a1 + 608);
  std::string::size_type v107 = (void *)(v106 + 8 * (v105 >> 12));
  if (*(void *)(a1 + 616) == v106) {
    uint64_t v108 = 0;
  }
  else {
    uint64_t v108 = *v107 + (v105 & 0xFFF);
  }
  if (v108 == *v107) {
    uint64_t v108 = *(v107 - 1) + 4096;
  }
  *(unsigned char *)(v108 - 1) = 0;
  *(void *)(a1 + 632) = v105 - 1;
  ++*(void *)(a1 + 640);
  char v199 = 8;
  strcpy((char *)v198, "for-loop");
  uint64_t v109 = sub_CF240(a1, (uint64_t)v198);
  uint64_t v110 = v109;
  uint64_t v210 = v109;
  if (v199 < 0)
  {
    operator delete(v198[0]);
    if (v110) {
      goto LABEL_244;
    }
  }
  else if (v109)
  {
LABEL_244:
    uint64_t v111 = sub_1C3744(a1 + 344, v213, &v212, &v211, &v210, *(unsigned char *)(*(void *)(*(void *)(a1 + 608) + ((*(void *)(a1 + 632) >> 9) & 0x7FFFFFFFFFFFF8))+ (*(void *)(a1 + 632) & 0xFFFLL)));
    v112 = *(void ***)(a1 + 608);
    int64x2_t v113 = vaddq_s64(*v104, (int64x2_t)xmmword_20B8D90);
    *uint64_t v104 = v113;
    if (v113.i64[0] < 0x2000uLL) {
      goto LABEL_293;
    }
    operator delete(*v112);
    goto LABEL_302;
  }
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_20B93D0;
  strcpy(__str.__r_.__value_.__l.__data_, "ERR074 - Failed to parse body of for-loop");
  memset(&v196, 0, sizeof(v196));
  std::string::push_back(&v196, 53);
  std::string::push_back(&v196, 49);
  std::string::push_back(&v196, 50);
  std::string::push_back(&v196, 50);
  std::string::push_back(&v196, 50);
  std::string::size_type v114 = HIBYTE(v196.__r_.__value_.__r.__words[2]);
  if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v115 = &v196;
  }
  else {
    uint64_t v115 = (std::string *)v196.__r_.__value_.__r.__words[0];
  }
  if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v114 = v196.__r_.__value_.__l.__size_;
  }
  if (v114)
  {
    uint64_t v116 = (std::string *)((char *)v115 + v114 - 1);
    if (v116 > v115)
    {
      unint64_t v117 = &v115->__r_.__value_.__s.__data_[1];
      do
      {
        std::string::value_type v118 = *(v117 - 1);
        *(v117 - 1) = v116->__r_.__value_.__s.__data_[0];
        v116->__r_.__value_.__s.__data_[0] = v118;
        uint64_t v116 = (std::string *)((char *)v116 - 1);
        BOOL v11 = v117++ >= (char *)v116;
      }
      while (!v11);
    }
  }
  v119 = std::string::insert(&v196, 0, "exprtk.hpp:");
  long long v120 = *(_OWORD *)&v119->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v119->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v120;
  v119->__r_.__value_.__l.__size_ = 0;
  v119->__r_.__value_.__r.__words[2] = 0;
  v119->__r_.__value_.__r.__words[0] = 0;
  char v200 = 0;
  LOBYTE(v198[1]) = 0;
  uint64_t v201 = -1;
  long long v203 = 0u;
  long long v204 = 0u;
  long long v205 = 0u;
  long long __p = 0u;
  long long v207 = 0u;
  uint64_t v208 = 0;
  int v202 = 1;
  LODWORD(v198[0]) = *v3;
  std::string::operator=((std::string *)&v198[1], (const std::string *)(a1 + 112));
  uint64_t v201 = *(void *)(a1 + 136);
  std::string::operator=((std::string *)&v203, &__str);
  std::string::operator=((std::string *)((char *)&v204 + 8), &__dst);
  uint64_t v121 = *(void *)(a1 + 568);
  uint64_t v122 = *(void *)(a1 + 560);
  uint64_t v123 = 30 * ((v121 - v122) >> 3) - 1;
  if (v121 == v122) {
    uint64_t v123 = 0;
  }
  if (v123 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
  {
    sub_B4B88(a1 + 552);
    uint64_t v122 = *(void *)(a1 + 560);
    uint64_t v121 = *(void *)(a1 + 568);
  }
  if (v121 == v122)
  {
    uint64_t v92 = 0;
  }
  else
  {
    unint64_t v124 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
    uint64_t v92 = *(void *)(v122 + 8 * (v124 / 0x1E)) + 136 * (v124 % 0x1E);
  }
LABEL_265:
  sub_B5158(v92, (uint64_t)v198);
  ++*(void *)(a1 + 592);
  if (SBYTE7(v207) < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v205) & 0x80000000) == 0)
    {
LABEL_267:
      if ((SBYTE7(v204) & 0x80000000) == 0) {
        goto LABEL_268;
      }
      goto LABEL_306;
    }
  }
  else if ((SHIBYTE(v205) & 0x80000000) == 0)
  {
    goto LABEL_267;
  }
  operator delete(*((void **)&v204 + 1));
  if ((SBYTE7(v204) & 0x80000000) == 0)
  {
LABEL_268:
    if ((v200 & 0x80000000) == 0) {
      goto LABEL_269;
    }
    goto LABEL_307;
  }
LABEL_306:
  operator delete((void *)v203);
  if ((v200 & 0x80000000) == 0)
  {
LABEL_269:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_270;
    }
    goto LABEL_308;
  }
LABEL_307:
  operator delete(v198[1]);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_270:
    if ((SHIBYTE(v196.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_271;
    }
    goto LABEL_309;
  }
LABEL_308:
  operator delete(__dst.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v196.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_271:
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_272;
    }
    goto LABEL_310;
  }
LABEL_309:
  operator delete(v196.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_272;
  }
LABEL_310:
  operator delete(__str.__r_.__value_.__l.__data_);
  if (v28) {
LABEL_273:
  }
    --*((void *)v28 + 6);
LABEL_274:
  uint64_t v125 = v213[0];
  if (v213[0]
    && (*(unsigned int (**)(uint64_t))(*(void *)v213[0] + 32))(v213[0]) != 17
    && (*(unsigned int (**)(uint64_t))(*(void *)v125 + 32))(v125) != 18)
  {
    (*(void (**)(uint64_t))(*(void *)v125 + 8))(v125);
    v213[0] = 0;
  }
  uint64_t v126 = v212;
  if (v212
    && (*(unsigned int (**)(uint64_t))(*(void *)v212 + 32))(v212) != 17
    && (*(unsigned int (**)(uint64_t))(*(void *)v126 + 32))(v126) != 18)
  {
    (*(void (**)(uint64_t))(*(void *)v126 + 8))(v126);
    uint64_t v212 = 0;
  }
  uint64_t v127 = v211;
  if (v211
    && (*(unsigned int (**)(uint64_t))(*(void *)v211 + 32))(v211) != 17
    && (*(unsigned int (**)(uint64_t))(*(void *)v127 + 32))(v127) != 18)
  {
    (*(void (**)(uint64_t))(*(void *)v127 + 8))(v127);
    uint64_t v211 = 0;
  }
  uint64_t v128 = v210;
  if (v210
    && (*(unsigned int (**)(uint64_t))(*(void *)v210 + 32))(v210) != 17
    && (*(unsigned int (**)(uint64_t))(*(void *)v128 + 32))(v128) != 18)
  {
    (*(void (**)(uint64_t))(*(void *)v128 + 8))(v128);
  }
  uint64_t v129 = *(void *)(a1 + 640);
  if (!v129) {
    goto LABEL_292;
  }
  uint64_t v130 = *(void ***)(a1 + 608);
  uint64_t v131 = *(void *)(a1 + 632);
  *(void *)(a1 + 640) = v129 - 1;
  *(void *)(a1 + 632) = v131 + 1;
  if ((unint64_t)(v131 + 1) < 0x2000) {
    goto LABEL_292;
  }
  operator delete(*v130);
  uint64_t v111 = 0;
LABEL_302:
  *(void *)(a1 + 608) += 8;
  *(void *)(a1 + 632) -= 4096;
  uint64_t v132 = v209;
  uint64_t v133 = v209[110];
  unint64_t v134 = v209[82];
  uint64_t v135 = v209[111] - v133;
  if (!v135) {
    goto LABEL_303;
  }
LABEL_294:
  unint64_t v136 = v135 / 96;
  if (v136 <= 1) {
    unint64_t v136 = 1;
  }
  v137 = (unsigned char *)(v133 + 68);
  do
  {
    if (*v137 && *(void *)(v137 - 28) >= v134) {
      unsigned char *v137 = 0;
    }
    v137 += 96;
    --v136;
  }
  while (v136);
LABEL_303:
  v132[82] = v134 - 1;
  return v111;
}

void sub_C7DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,void *a59)
{
  sub_B1ED4((uint64_t)&a59);
  if (a36 < 0)
  {
    operator delete(__p);
    if (a15 < 0)
    {
LABEL_5:
      operator delete(a10);
      if ((a50 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if (a15 < 0)
  {
    goto LABEL_5;
  }
  if ((a50 & 0x80000000) == 0)
  {
LABEL_6:
    if (a43 < 0) {
      goto LABEL_7;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a45);
  if (a43 < 0)
  {
LABEL_7:
    operator delete(a38);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_13:
      if (a57 < 0)
      {
        operator delete(a52);
        sub_D218C((uint64_t *)(v59 - 136));
        _Unwind_Resume(a1);
      }
      sub_D218C((uint64_t *)(v59 - 136));
      _Unwind_Resume(a1);
    }
LABEL_12:
    operator delete(a16);
    goto LABEL_13;
  }
LABEL_11:
  if ((a21 & 0x80000000) == 0) {
    goto LABEL_13;
  }
  goto LABEL_12;
}

uint64_t sub_C81E0(std::string::size_type a1)
{
  v221 = 0;
  v222 = 0;
  v223 = 0;
  char v211 = 6;
  strcpy((char *)v210, "switch");
  std::string::size_type v2 = (std::string *)(a1 + 112);
  BOOL v3 = *(char *)(a1 + 135) < 0;
  uint64_t v4 = *(unsigned __int8 *)(a1 + 135);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a1 + 120);
  }
  if (v4 == 6)
  {
    unint64_t v5 = 0;
    do
    {
      if (v3) {
        v6 = (std::string *)v2->__r_.__value_.__r.__words[0];
      }
      else {
        v6 = v2;
      }
      __darwin_ct_rune_t v7 = __tolower(v6->__r_.__value_.__s.__data_[v5]);
      if (v7 != __tolower(*((char *)v210 + v5))) {
        goto LABEL_14;
      }
      ++v5;
      BOOL v3 = *(char *)(a1 + 135) < 0;
      unint64_t v8 = *(unsigned __int8 *)(a1 + 135);
      if ((v8 & 0x80u) != 0) {
        unint64_t v8 = *(void *)(a1 + 120);
      }
    }
    while (v5 < v8);
    __str.__r_.__value_.__s.__data_[0] = 1;
    __str.__r_.__value_.__l.__size_ = a1;
    __str.__r_.__value_.__r.__words[2] = (std::string::size_type)&v221;
    std::string::size_type v9 = *(void *)(a1 + 24);
    if (*(void *)(a1 + 8) == v9) {
      std::string::size_type v9 = a1 + 40;
    }
    else {
      *(void *)(a1 + 24) = v9 + 40;
    }
    *(_DWORD *)(a1 + 104) = *(_DWORD *)v9;
    std::string::operator=(v2, (const std::string *)(v9 + 8));
    *(void *)(a1 + 136) = *(void *)(v9 + 32);
    if (*(_DWORD *)(a1 + 104) == 123)
    {
      std::string::size_type v26 = *(void *)(a1 + 24);
      if (*(void *)(a1 + 8) == v26) {
        std::string::size_type v26 = a1 + 40;
      }
      else {
        *(void *)(a1 + 24) = v26 + 40;
      }
      *(_DWORD *)(a1 + 104) = *(_DWORD *)v26;
      std::string::operator=(v2, (const std::string *)(v26 + 8));
      *(void *)(a1 + 136) = *(void *)(v26 + 32);
      uint64_t v39 = *(unsigned __int8 *)(a1 + 135);
      if ((v39 & 0x80u) != 0) {
        uint64_t v39 = *(void *)(a1 + 120);
      }
      if (v39 == 4)
      {
        std::string::size_type v205 = a1 + 40;
        unint64_t v40 = 1702060387;
        while (1)
        {
          __darwin_ct_rune_t v42 = __tolower((char)v40);
          if (*(char *)(a1 + 135) >= 0) {
            std::string::size_type v43 = v2;
          }
          else {
            std::string::size_type v43 = *(std::string **)(a1 + 112);
          }
          if (v42 != __tolower(v43->__r_.__value_.__s.__data_[0])) {
            goto LABEL_196;
          }
          __darwin_ct_rune_t v44 = __tolower((__int16)v40 >> 8);
          uint64_t v45 = *(char *)(a1 + 135) >= 0 ? v2 : *(std::string **)(a1 + 112);
          if (v44 != __tolower(v45->__r_.__value_.__s.__data_[1])) {
            goto LABEL_196;
          }
          __darwin_ct_rune_t v46 = __tolower((int)(v40 << 8) >> 24);
          std::string::value_type v47 = *(char *)(a1 + 135) >= 0 ? v2 : *(std::string **)(a1 + 112);
          if (v46 != __tolower(v47->__r_.__value_.__s.__data_[2])) {
            goto LABEL_196;
          }
          __darwin_ct_rune_t v48 = __tolower((int)v40 >> 24);
          long long v49 = *(char *)(a1 + 135) >= 0 ? v2 : *(std::string **)(a1 + 112);
          if (v48 != __tolower(v49->__r_.__value_.__s.__data_[3])) {
            goto LABEL_196;
          }
          std::string::size_type v50 = *(void *)(a1 + 24);
          std::string::size_type v51 = v205;
          if (*(void *)(a1 + 8) != v50)
          {
            *(void *)(a1 + 24) = v50 + 40;
            std::string::size_type v51 = v50;
          }
          *(_DWORD *)(a1 + 104) = *(_DWORD *)v51;
          std::string::operator=(v2, (const std::string *)(v51 + 8));
          *(void *)(a1 + 136) = *(void *)(v51 + 32);
          uint64_t v52 = sub_B7FE4(a1, 0);
          if (!v52) {
            goto LABEL_229;
          }
          if (*(_DWORD *)(a1 + 104) != 58)
          {
            v208.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
            *(_OWORD *)&v208.__r_.__value_.__r.__words[1] = xmmword_20B9A20;
            strcpy(v208.__r_.__value_.__l.__data_, "ERR078 - Expected ':' for case of switch statement");
            memset(&v206, 0, sizeof(v206));
            std::string::push_back(&v206, 48);
            std::string::push_back(&v206, 49);
            std::string::push_back(&v206, 51);
            std::string::push_back(&v206, 50);
            std::string::push_back(&v206, 50);
            std::string::size_type size = HIBYTE(v206.__r_.__value_.__r.__words[2]);
            if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v127 = &v206;
            }
            else {
              uint64_t v127 = (std::string *)v206.__r_.__value_.__r.__words[0];
            }
            if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type size = v206.__r_.__value_.__l.__size_;
            }
            if (size)
            {
              uint64_t v128 = (std::string *)((char *)v127 + size - 1);
              if (v128 > v127)
              {
                uint64_t v129 = &v127->__r_.__value_.__s.__data_[1];
                do
                {
                  std::string::value_type v130 = *(v129 - 1);
                  *(v129 - 1) = v128->__r_.__value_.__s.__data_[0];
                  v128->__r_.__value_.__s.__data_[0] = v130;
                  uint64_t v128 = (std::string *)((char *)v128 - 1);
                  BOOL v15 = v129++ >= (char *)v128;
                }
                while (!v15);
              }
            }
            uint64_t v131 = std::string::insert(&v206, 0, "exprtk.hpp:");
            long long v132 = *(_OWORD *)&v131->__r_.__value_.__l.__data_;
            v207.__r_.__value_.__r.__words[2] = v131->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v207.__r_.__value_.__l.__data_ = v132;
            v131->__r_.__value_.__l.__size_ = 0;
            v131->__r_.__value_.__r.__words[2] = 0;
            v131->__r_.__value_.__r.__words[0] = 0;
            char v212 = 0;
            LOBYTE(v210[1]) = 0;
            uint64_t v213 = -1;
            long long v215 = 0u;
            long long v216 = 0u;
            long long v217 = 0u;
            long long __p = 0u;
            long long v219 = 0u;
            uint64_t v220 = 0;
            int v214 = 1;
            LODWORD(v210[0]) = *(_DWORD *)(a1 + 104);
            std::string::operator=((std::string *)&v210[1], v2);
            uint64_t v213 = *(void *)(a1 + 136);
            std::string::operator=((std::string *)&v215, &v208);
            std::string::operator=((std::string *)((char *)&v216 + 8), &v207);
            uint64_t v133 = *(void *)(a1 + 568);
            uint64_t v134 = *(void *)(a1 + 560);
            uint64_t v135 = 30 * ((v133 - v134) >> 3) - 1;
            if (v133 == v134) {
              uint64_t v135 = 0;
            }
            if (v135 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
            {
              sub_B4B88(a1 + 552);
              uint64_t v134 = *(void *)(a1 + 560);
              uint64_t v133 = *(void *)(a1 + 568);
            }
            if (v133 == v134)
            {
              uint64_t v38 = 0;
            }
            else
            {
              unint64_t v136 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
              uint64_t v38 = *(void *)(v134 + 8 * (v136 / 0x1E)) + 136 * (v136 % 0x1E);
            }
            goto LABEL_214;
          }
          std::string::size_type v53 = *(void *)(a1 + 24);
          std::string::size_type v54 = v205;
          if (*(void *)(a1 + 8) != v53)
          {
            *(void *)(a1 + 24) = v53 + 40;
            std::string::size_type v54 = v53;
          }
          unint64_t v204 = v40;
          *(_DWORD *)(a1 + 104) = *(_DWORD *)v54;
          std::string::operator=(v2, (const std::string *)(v54 + 8));
          *(void *)(a1 + 136) = *(void *)(v54 + 32);
          uint64_t v55 = sub_B7FE4(a1, 0);
          if (!v55) {
            goto LABEL_229;
          }
          if (*(_DWORD *)(a1 + 104) != 6)
          {
            v208.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
            *(_OWORD *)&v208.__r_.__value_.__r.__words[1] = xmmword_20B9A70;
            strcpy(v208.__r_.__value_.__l.__data_, "ERR079 - Expected ';' at end of case for switch statement");
            memset(&v206, 0, sizeof(v206));
            std::string::push_back(&v206, 53);
            std::string::push_back(&v206, 50);
            std::string::push_back(&v206, 51);
            std::string::push_back(&v206, 50);
            std::string::push_back(&v206, 50);
            std::string::size_type v137 = HIBYTE(v206.__r_.__value_.__r.__words[2]);
            if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v138 = &v206;
            }
            else {
              v138 = (std::string *)v206.__r_.__value_.__r.__words[0];
            }
            if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v137 = v206.__r_.__value_.__l.__size_;
            }
            if (v137)
            {
              int64x2_t v139 = (std::string *)((char *)v138 + v137 - 1);
              if (v139 > v138)
              {
                std::string::size_type v140 = &v138->__r_.__value_.__s.__data_[1];
                do
                {
                  std::string::value_type v141 = *(v140 - 1);
                  *(v140 - 1) = v139->__r_.__value_.__s.__data_[0];
                  v139->__r_.__value_.__s.__data_[0] = v141;
                  int64x2_t v139 = (std::string *)((char *)v139 - 1);
                  BOOL v15 = v140++ >= (char *)v139;
                }
                while (!v15);
              }
            }
            v142 = std::string::insert(&v206, 0, "exprtk.hpp:");
            long long v143 = *(_OWORD *)&v142->__r_.__value_.__l.__data_;
            v207.__r_.__value_.__r.__words[2] = v142->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v207.__r_.__value_.__l.__data_ = v143;
            v142->__r_.__value_.__l.__size_ = 0;
            v142->__r_.__value_.__r.__words[2] = 0;
            v142->__r_.__value_.__r.__words[0] = 0;
            char v212 = 0;
            LOBYTE(v210[1]) = 0;
            uint64_t v213 = -1;
            long long v215 = 0u;
            long long v216 = 0u;
            long long v217 = 0u;
            long long __p = 0u;
            long long v219 = 0u;
            uint64_t v220 = 0;
            int v214 = 1;
            LODWORD(v210[0]) = *(_DWORD *)(a1 + 104);
            std::string::operator=((std::string *)&v210[1], v2);
            uint64_t v213 = *(void *)(a1 + 136);
            std::string::operator=((std::string *)&v215, &v208);
            std::string::operator=((std::string *)((char *)&v216 + 8), &v207);
            uint64_t v144 = *(void *)(a1 + 568);
            uint64_t v145 = *(void *)(a1 + 560);
            uint64_t v146 = 30 * ((v144 - v145) >> 3) - 1;
            if (v144 == v145) {
              uint64_t v146 = 0;
            }
            if (v146 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
            {
              sub_B4B88(a1 + 552);
              uint64_t v145 = *(void *)(a1 + 560);
              uint64_t v144 = *(void *)(a1 + 568);
            }
            if (v144 == v145)
            {
              uint64_t v38 = 0;
            }
            else
            {
              unint64_t v147 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
              uint64_t v38 = *(void *)(v145 + 8 * (v147 / 0x1E)) + 136 * (v147 % 0x1E);
            }
            goto LABEL_214;
          }
          std::string::size_type v56 = *(void *)(a1 + 24);
          std::string::size_type v57 = v205;
          if (*(void *)(a1 + 8) != v56)
          {
            *(void *)(a1 + 24) = v56 + 40;
            std::string::size_type v57 = v56;
          }
          *(_DWORD *)(a1 + 104) = *(_DWORD *)v57;
          std::string::operator=(v2, (const std::string *)(v57 + 8));
          *(void *)(a1 + 136) = *(void *)(v57 + 32);
          if ((*(unsigned int (**)(uint64_t))(*(void *)v52 + 32))(v52) != 2
            || (*(double (**)(uint64_t))(*(void *)v52 + 16))(v52) != 0.0)
          {
            break;
          }
          if ((*(unsigned int (**)(uint64_t))(*(void *)v52 + 32))(v52) != 17
            && (*(unsigned int (**)(uint64_t))(*(void *)v52 + 32))(v52) != 18)
          {
            (*(void (**)(uint64_t))(*(void *)v52 + 8))(v52);
          }
          if ((*(unsigned int (**)(uint64_t))(*(void *)v55 + 32))(v55) != 17
            && (*(unsigned int (**)(uint64_t))(*(void *)v55 + 32))(v55) != 18)
          {
            (*(void (**)(uint64_t))(*(void *)v55 + 8))(v55);
          }
LABEL_157:
          uint64_t v95 = *(unsigned __int8 *)(a1 + 135);
          if ((v95 & 0x80u) != 0) {
            uint64_t v95 = *(void *)(a1 + 120);
          }
          if (v95 == 7)
          {
            __darwin_ct_rune_t v96 = __tolower(100);
            std::string::value_type v97 = *(char *)(a1 + 135) >= 0 ? v2 : *(std::string **)(a1 + 112);
            if (v96 == __tolower(v97->__r_.__value_.__s.__data_[0]))
            {
              __darwin_ct_rune_t v98 = __tolower(101);
              long long v99 = *(char *)(a1 + 135) >= 0 ? v2 : *(std::string **)(a1 + 112);
              if (v98 == __tolower(v99->__r_.__value_.__s.__data_[1]))
              {
                __darwin_ct_rune_t v100 = __tolower(102);
                uint64_t v101 = *(char *)(a1 + 135) >= 0 ? v2 : *(std::string **)(a1 + 112);
                if (v100 == __tolower(v101->__r_.__value_.__s.__data_[2]))
                {
                  __darwin_ct_rune_t v102 = __tolower(97);
                  unint64_t v103 = *(char *)(a1 + 135) >= 0 ? v2 : *(std::string **)(a1 + 112);
                  if (v102 == __tolower(v103->__r_.__value_.__s.__data_[3]))
                  {
                    __darwin_ct_rune_t v104 = __tolower(117);
                    unint64_t v105 = *(char *)(a1 + 135) >= 0 ? v2 : *(std::string **)(a1 + 112);
                    if (v104 == __tolower(v105->__r_.__value_.__s.__data_[4]))
                    {
                      __darwin_ct_rune_t v106 = __tolower(108);
                      std::string::size_type v107 = *(char *)(a1 + 135) >= 0 ? v2 : *(std::string **)(a1 + 112);
                      if (v106 == __tolower(v107->__r_.__value_.__s.__data_[5]))
                      {
                        __darwin_ct_rune_t v108 = __tolower(116);
                        uint64_t v109 = *(char *)(a1 + 135) >= 0 ? v2 : *(std::string **)(a1 + 112);
                        if (v108 == __tolower(v109->__r_.__value_.__s.__data_[6]))
                        {
                          std::string::size_type v110 = *(void *)(a1 + 24);
                          std::string::size_type v111 = v205;
                          if (*(void *)(a1 + 8) != v110)
                          {
                            *(void *)(a1 + 24) = v110 + 40;
                            std::string::size_type v111 = v110;
                          }
                          *(_DWORD *)(a1 + 104) = *(_DWORD *)v111;
                          std::string::operator=(v2, (const std::string *)(v111 + 8));
                          *(void *)(a1 + 136) = *(void *)(v111 + 32);
                          if (*(_DWORD *)(a1 + 104) != 58)
                          {
                            v208.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
                            *(_OWORD *)&v208.__r_.__value_.__r.__words[1] = xmmword_20B99E0;
                            strcpy(v208.__r_.__value_.__l.__data_, "ERR080 - Expected ':' for default of switch statement");
                            memset(&v206, 0, sizeof(v206));
                            std::string::push_back(&v206, 49);
                            std::string::push_back(&v206, 53);
                            std::string::push_back(&v206, 51);
                            std::string::push_back(&v206, 50);
                            std::string::push_back(&v206, 50);
                            std::string::size_type v148 = HIBYTE(v206.__r_.__value_.__r.__words[2]);
                            if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                              uint64_t v149 = &v206;
                            }
                            else {
                              uint64_t v149 = (std::string *)v206.__r_.__value_.__r.__words[0];
                            }
                            if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                              std::string::size_type v148 = v206.__r_.__value_.__l.__size_;
                            }
                            if (v148)
                            {
                              unint64_t v150 = (std::string *)((char *)v149 + v148 - 1);
                              if (v150 > v149)
                              {
                                std::string::size_type v151 = &v149->__r_.__value_.__s.__data_[1];
                                do
                                {
                                  std::string::value_type v152 = *(v151 - 1);
                                  *(v151 - 1) = v150->__r_.__value_.__s.__data_[0];
                                  v150->__r_.__value_.__s.__data_[0] = v152;
                                  unint64_t v150 = (std::string *)((char *)v150 - 1);
                                  BOOL v15 = v151++ >= (char *)v150;
                                }
                                while (!v15);
                              }
                            }
                            uint64_t v153 = std::string::insert(&v206, 0, "exprtk.hpp:");
                            long long v154 = *(_OWORD *)&v153->__r_.__value_.__l.__data_;
                            v207.__r_.__value_.__r.__words[2] = v153->__r_.__value_.__r.__words[2];
                            *(_OWORD *)&v207.__r_.__value_.__l.__data_ = v154;
                            v153->__r_.__value_.__l.__size_ = 0;
                            v153->__r_.__value_.__r.__words[2] = 0;
                            v153->__r_.__value_.__r.__words[0] = 0;
                            char v212 = 0;
                            LOBYTE(v210[1]) = 0;
                            uint64_t v213 = -1;
                            long long v215 = 0u;
                            long long v216 = 0u;
                            long long v217 = 0u;
                            long long __p = 0u;
                            long long v219 = 0u;
                            uint64_t v220 = 0;
                            int v214 = 1;
                            LODWORD(v210[0]) = *(_DWORD *)(a1 + 104);
                            std::string::operator=((std::string *)&v210[1], v2);
                            uint64_t v213 = *(void *)(a1 + 136);
                            std::string::operator=((std::string *)&v215, &v208);
                            std::string::operator=((std::string *)((char *)&v216 + 8), &v207);
                            uint64_t v155 = *(void *)(a1 + 568);
                            uint64_t v156 = *(void *)(a1 + 560);
                            uint64_t v157 = 30 * ((v155 - v156) >> 3) - 1;
                            if (v155 == v156) {
                              uint64_t v157 = 0;
                            }
                            if (v157 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
                            {
                              sub_B4B88(a1 + 552);
                              uint64_t v156 = *(void *)(a1 + 560);
                              uint64_t v155 = *(void *)(a1 + 568);
                            }
                            if (v155 == v156)
                            {
                              uint64_t v38 = 0;
                            }
                            else
                            {
                              unint64_t v158 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
                              uint64_t v38 = *(void *)(v156 + 8 * (v158 / 0x1E)) + 136 * (v158 % 0x1E);
                            }
                            goto LABEL_214;
                          }
                          std::string::size_type v112 = *(void *)(a1 + 24);
                          std::string::size_type v113 = v205;
                          if (*(void *)(a1 + 8) != v112)
                          {
                            *(void *)(a1 + 24) = v112 + 40;
                            std::string::size_type v113 = v112;
                          }
                          *(_DWORD *)(a1 + 104) = *(_DWORD *)v113;
                          std::string::operator=(v2, (const std::string *)(v113 + 8));
                          *(void *)(a1 + 136) = *(void *)(v113 + 32);
                          if (*(_DWORD *)(a1 + 104) == 123)
                          {
                            char v211 = 14;
                            strcpy((char *)v210, "switch-default");
                            uint64_t v114 = sub_CF240(a1, (uint64_t)v210);
                            if (v211 < 0) {
                              operator delete(v210[0]);
                            }
                          }
                          else
                          {
                            uint64_t v114 = sub_B7FE4(a1, 0);
                          }
                          if (!v114) {
                            goto LABEL_229;
                          }
                          if (*(_DWORD *)(a1 + 104) != 6)
                          {
                            if ((*(unsigned int (**)(uint64_t))(*(void *)v114 + 32))(v114) != 17
                              && (*(unsigned int (**)(uint64_t))(*(void *)v114 + 32))(v114) != 18)
                            {
                              (*(void (**)(uint64_t))(*(void *)v114 + 8))(v114);
                            }
                            v208.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
                            *(_OWORD *)&v208.__r_.__value_.__r.__words[1] = xmmword_20B99C0;
                            strcpy(v208.__r_.__value_.__l.__data_, "ERR081 - Expected ';' at end of default for switch statement");
                            memset(&v206, 0, sizeof(v206));
                            std::string::push_back(&v206, 51);
                            std::string::push_back(&v206, 55);
                            std::string::push_back(&v206, 51);
                            std::string::push_back(&v206, 50);
                            std::string::push_back(&v206, 50);
                            std::string::size_type v163 = HIBYTE(v206.__r_.__value_.__r.__words[2]);
                            if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                              unint64_t v164 = &v206;
                            }
                            else {
                              unint64_t v164 = (std::string *)v206.__r_.__value_.__r.__words[0];
                            }
                            if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                              std::string::size_type v163 = v206.__r_.__value_.__l.__size_;
                            }
                            if (v163)
                            {
                              uint64_t v165 = (std::string *)((char *)v164 + v163 - 1);
                              if (v165 > v164)
                              {
                                int v166 = &v164->__r_.__value_.__s.__data_[1];
                                do
                                {
                                  std::string::value_type v167 = *(v166 - 1);
                                  *(v166 - 1) = v165->__r_.__value_.__s.__data_[0];
                                  v165->__r_.__value_.__s.__data_[0] = v167;
                                  uint64_t v165 = (std::string *)((char *)v165 - 1);
                                  BOOL v15 = v166++ >= (char *)v165;
                                }
                                while (!v15);
                              }
                            }
                            BOOL v168 = std::string::insert(&v206, 0, "exprtk.hpp:");
                            long long v169 = *(_OWORD *)&v168->__r_.__value_.__l.__data_;
                            v207.__r_.__value_.__r.__words[2] = v168->__r_.__value_.__r.__words[2];
                            *(_OWORD *)&v207.__r_.__value_.__l.__data_ = v169;
                            v168->__r_.__value_.__l.__size_ = 0;
                            v168->__r_.__value_.__r.__words[2] = 0;
                            v168->__r_.__value_.__r.__words[0] = 0;
                            char v212 = 0;
                            LOBYTE(v210[1]) = 0;
                            uint64_t v213 = -1;
                            long long v215 = 0u;
                            long long v216 = 0u;
                            long long v217 = 0u;
                            long long __p = 0u;
                            long long v219 = 0u;
                            uint64_t v220 = 0;
                            int v214 = 1;
                            LODWORD(v210[0]) = *(_DWORD *)(a1 + 104);
                            std::string::operator=((std::string *)&v210[1], v2);
                            uint64_t v213 = *(void *)(a1 + 136);
                            std::string::operator=((std::string *)&v215, &v208);
                            std::string::operator=((std::string *)((char *)&v216 + 8), &v207);
                            uint64_t v170 = *(void *)(a1 + 568);
                            uint64_t v171 = *(void *)(a1 + 560);
                            uint64_t v172 = 30 * ((v170 - v171) >> 3) - 1;
                            if (v170 == v171) {
                              uint64_t v172 = 0;
                            }
                            if (v172 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
                            {
                              sub_B4B88(a1 + 552);
                              uint64_t v171 = *(void *)(a1 + 560);
                              uint64_t v170 = *(void *)(a1 + 568);
                            }
                            if (v170 == v171)
                            {
                              uint64_t v38 = 0;
                            }
                            else
                            {
                              unint64_t v173 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
                              uint64_t v38 = *(void *)(v171 + 8 * (v173 / 0x1E)) + 136 * (v173 % 0x1E);
                            }
                            goto LABEL_214;
                          }
                          std::string::size_type v159 = *(void *)(a1 + 24);
                          std::string::size_type v160 = v205;
                          if (*(void *)(a1 + 8) != v159)
                          {
                            *(void *)(a1 + 24) = v159 + 40;
                            std::string::size_type v160 = v159;
                          }
                          *(_DWORD *)(a1 + 104) = *(_DWORD *)v160;
                          std::string::operator=(v2, (const std::string *)(v160 + 8));
                          *(void *)(a1 + 136) = *(void *)(v160 + 32);
                          unint64_t v161 = v222;
                          if (v222 >= v223)
                          {
                            __darwin_ct_rune_t v174 = v221;
                            uint64_t v175 = v222 - v221;
                            unint64_t v176 = v175 + 1;
                            if ((unint64_t)(v175 + 1) >> 61) {
                              sub_2E00();
                            }
                            uint64_t v177 = (char *)v223 - (char *)v221;
                            if (((char *)v223 - (char *)v221) >> 2 > v176) {
                              unint64_t v176 = v177 >> 2;
                            }
                            if ((unint64_t)v177 >= 0x7FFFFFFFFFFFFFF8) {
                              unint64_t v178 = 0x1FFFFFFFFFFFFFFFLL;
                            }
                            else {
                              unint64_t v178 = v176;
                            }
                            if (v178)
                            {
                              if (v178 >> 61) {
                                sub_188D718();
                              }
                              std::string v179 = (char *)operator new(8 * v178);
                            }
                            else
                            {
                              std::string v179 = 0;
                            }
                            std::string v180 = (uint64_t *)&v179[8 * v175];
                            BOOL v181 = &v179[8 * v178];
                            *std::string v180 = v114;
                            uint64_t v162 = v180 + 1;
                            if (v161 != v174)
                            {
                              unint64_t v182 = (char *)v161 - (char *)v174 - 8;
                              if (v182 < 0x58) {
                                goto LABEL_357;
                              }
                              if ((unint64_t)((char *)v174 - v179) < 0x20) {
                                goto LABEL_357;
                              }
                              uint64_t v183 = (v182 >> 3) + 1;
                              uint64_t v184 = 8 * (v183 & 0x3FFFFFFFFFFFFFFCLL);
                              int v185 = (char *)&v161[v184 / 0xFFFFFFFFFFFFFFF8];
                              std::string v180 = (uint64_t *)((char *)v180 - v184);
                              long long v186 = &v179[8 * v175 - 16];
                              char v187 = (char *)(v161 - 2);
                              uint64_t v188 = v183 & 0x3FFFFFFFFFFFFFFCLL;
                              do
                              {
                                long long v189 = *(_OWORD *)v187;
                                *((_OWORD *)v186 - 1) = *((_OWORD *)v187 - 1);
                                *(_OWORD *)long long v186 = v189;
                                v186 -= 32;
                                v187 -= 32;
                                v188 -= 4;
                              }
                              while (v188);
                              unint64_t v161 = (uint64_t *)v185;
                              if (v183 != (v183 & 0x3FFFFFFFFFFFFFFCLL))
                              {
LABEL_357:
                                do
                                {
                                  uint64_t v190 = *--v161;
                                  *--std::string v180 = v190;
                                }
                                while (v161 != v174);
                              }
                              unint64_t v161 = v221;
                            }
                            v221 = v180;
                            v222 = v162;
                            v223 = (uint64_t *)v181;
                            if (v161) {
                              operator delete(v161);
                            }
                          }
                          else
                          {
                            uint64_t *v222 = v114;
                            uint64_t v162 = v161 + 1;
                          }
                          v222 = v162;
                          if (*(_DWORD *)(a1 + 104) != 125)
                          {
                            v208.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
                            *(_OWORD *)&v208.__r_.__value_.__r.__words[1] = xmmword_20B9A60;
                            strcpy(v208.__r_.__value_.__l.__data_, "ERR082 - Expected '}' at end of switch statement");
                            memset(&v206, 0, sizeof(v206));
                            std::string::push_back(&v206, 57);
                            std::string::push_back(&v206, 56);
                            std::string::push_back(&v206, 51);
                            std::string::push_back(&v206, 50);
                            std::string::push_back(&v206, 50);
                            std::string::size_type v193 = HIBYTE(v206.__r_.__value_.__r.__words[2]);
                            if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                              std::string v194 = &v206;
                            }
                            else {
                              std::string v194 = (std::string *)v206.__r_.__value_.__r.__words[0];
                            }
                            if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                              std::string::size_type v193 = v206.__r_.__value_.__l.__size_;
                            }
                            if (v193)
                            {
                              std::string v195 = (std::string *)((char *)v194 + v193 - 1);
                              if (v195 > v194)
                              {
                                std::string v196 = &v194->__r_.__value_.__s.__data_[1];
                                do
                                {
                                  std::string::value_type v197 = *(v196 - 1);
                                  *(v196 - 1) = v195->__r_.__value_.__s.__data_[0];
                                  v195->__r_.__value_.__s.__data_[0] = v197;
                                  std::string v195 = (std::string *)((char *)v195 - 1);
                                  BOOL v15 = v196++ >= (char *)v195;
                                }
                                while (!v15);
                              }
                            }
                            uint64_t v198 = std::string::insert(&v206, 0, "exprtk.hpp:");
                            long long v199 = *(_OWORD *)&v198->__r_.__value_.__l.__data_;
                            v207.__r_.__value_.__r.__words[2] = v198->__r_.__value_.__r.__words[2];
                            *(_OWORD *)&v207.__r_.__value_.__l.__data_ = v199;
                            v198->__r_.__value_.__l.__size_ = 0;
                            v198->__r_.__value_.__r.__words[2] = 0;
                            v198->__r_.__value_.__r.__words[0] = 0;
                            char v212 = 0;
                            LOBYTE(v210[1]) = 0;
                            uint64_t v213 = -1;
                            long long v215 = 0u;
                            long long v216 = 0u;
                            long long v217 = 0u;
                            long long __p = 0u;
                            long long v219 = 0u;
                            uint64_t v220 = 0;
                            int v214 = 1;
                            LODWORD(v210[0]) = *(_DWORD *)(a1 + 104);
                            std::string::operator=((std::string *)&v210[1], v2);
                            uint64_t v213 = *(void *)(a1 + 136);
                            std::string::operator=((std::string *)&v215, &v208);
                            std::string::operator=((std::string *)((char *)&v216 + 8), &v207);
                            uint64_t v200 = *(void *)(a1 + 568);
                            uint64_t v201 = *(void *)(a1 + 560);
                            uint64_t v202 = 30 * ((v200 - v201) >> 3) - 1;
                            if (v200 == v201) {
                              uint64_t v202 = 0;
                            }
                            if (v202 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
                            {
                              sub_B4B88(a1 + 552);
                              uint64_t v201 = *(void *)(a1 + 560);
                              uint64_t v200 = *(void *)(a1 + 568);
                            }
                            if (v200 == v201)
                            {
                              uint64_t v38 = 0;
                            }
                            else
                            {
                              unint64_t v203 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
                              uint64_t v38 = *(void *)(v201 + 8 * (v203 / 0x1E)) + 136 * (v203 % 0x1E);
                            }
                            goto LABEL_214;
                          }
                          std::string::size_type v191 = *(void *)(a1 + 24);
                          if (*(void *)(a1 + 8) != v191)
                          {
                            *(void *)(a1 + 24) = v191 + 40;
                            std::string::size_type v205 = v191;
                          }
                          uint64_t v192 = (const std::string *)(v205 + 8);
                          *(_DWORD *)(a1 + 104) = *(_DWORD *)v205;
                          std::string::operator=(v2, v192);
                          *(void *)(a1 + 136) = *(void *)(v205 + 32);
                          uint64_t v23 = sub_1C802C(a1 + 344, (uint64_t)&v221);
                          __str.__r_.__value_.__s.__data_[0] = v23 == 0;
                          sub_22094C((uint64_t)&__str);
                          std::string::size_type v24 = v221;
                          if (v221) {
                            goto LABEL_39;
                          }
                          return v23;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          unint64_t v40 = v204 & 0xFFFFFF0000000000 | 0x65736163;
          uint64_t v41 = *(unsigned __int8 *)(a1 + 135);
          if ((v41 & 0x80u) != 0) {
            uint64_t v41 = *(void *)(a1 + 120);
          }
          if (v41 != 4) {
            goto LABEL_196;
          }
        }
        uint64_t v58 = v222;
        if (v222 < v223)
        {
          uint64_t *v222 = v52;
          uint64_t v59 = v58 + 1;
          goto LABEL_133;
        }
        std::string::value_type v60 = v221;
        uint64_t v61 = v222 - v221;
        unint64_t v62 = v61 + 1;
        if ((unint64_t)(v61 + 1) >> 61) {
          goto LABEL_351;
        }
        uint64_t v63 = (char *)v223 - (char *)v221;
        if (((char *)v223 - (char *)v221) >> 2 > v62) {
          unint64_t v62 = v63 >> 2;
        }
        if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v64 = v62;
        }
        if (v64)
        {
          if (v64 >> 61) {
            goto LABEL_352;
          }
          unint64_t v65 = v64;
          unint64_t v66 = (char *)operator new(8 * v64);
          unint64_t v64 = v65;
          uint64_t v67 = (uint64_t *)&v66[8 * v61];
          uint64_t *v67 = v52;
          uint64_t v59 = v67 + 1;
          if (v58 == v60) {
            goto LABEL_131;
          }
        }
        else
        {
          unint64_t v66 = 0;
          uint64_t v67 = (uint64_t *)(8 * v61);
          *(void *)(8 * v61) = v52;
          uint64_t v59 = (uint64_t *)(8 * v61 + 8);
          if (v58 == v60)
          {
LABEL_131:
            v221 = v67;
            v222 = v59;
            v223 = (uint64_t *)&v66[8 * v64];
            if (v58) {
              operator delete(v58);
            }
LABEL_133:
            v222 = v59;
            if (v59 < v223)
            {
              *uint64_t v59 = v55;
              uint64_t v77 = (uint64_t)(v59 + 1);
LABEL_156:
              v222 = (uint64_t *)v77;
              goto LABEL_157;
            }
            unint64_t v78 = v221;
            uint64_t v79 = v59 - v221;
            unint64_t v80 = v79 + 1;
            if ((unint64_t)(v79 + 1) >> 61) {
LABEL_351:
            }
              sub_2E00();
            uint64_t v81 = (char *)v223 - (char *)v221;
            if (((char *)v223 - (char *)v221) >> 2 > v80) {
              unint64_t v80 = v81 >> 2;
            }
            if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v82 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v82 = v80;
            }
            if (v82)
            {
              if (v82 >> 61) {
LABEL_352:
              }
                sub_188D718();
              uint64_t v83 = (char *)operator new(8 * v82);
              v84 = (uint64_t *)&v83[8 * v79];
              std::string::value_type v85 = &v83[8 * v82];
              uint64_t *v84 = v55;
              uint64_t v77 = (uint64_t)(v84 + 1);
              if (v59 != v78)
              {
LABEL_144:
                unint64_t v86 = (char *)(v59 - 1) - (char *)v78;
                if (v86 >= 0x58)
                {
                  if ((unint64_t)((char *)v78 - v83) >= 0x20)
                  {
                    uint64_t v88 = (v86 >> 3) + 1;
                    uint64_t v89 = 8 * (v88 & 0x3FFFFFFFFFFFFFFCLL);
                    long long v87 = &v59[v89 / 0xFFFFFFFFFFFFFFF8];
                    v84 = (uint64_t *)((char *)v84 - v89);
                    uint64_t v90 = &v83[8 * v79 - 16];
                    unint64_t v91 = v59 - 2;
                    uint64_t v92 = v88 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      long long v93 = *(_OWORD *)v91;
                      *((_OWORD *)v90 - 1) = *((_OWORD *)v91 - 1);
                      *(_OWORD *)uint64_t v90 = v93;
                      v90 -= 32;
                      v91 -= 4;
                      v92 -= 4;
                    }
                    while (v92);
                    if (v88 == (v88 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_154:
                      uint64_t v59 = v221;
                      v221 = v84;
                      v222 = (uint64_t *)v77;
                      v223 = (uint64_t *)v85;
                      if (!v59) {
                        goto LABEL_156;
                      }
LABEL_155:
                      operator delete(v59);
                      goto LABEL_156;
                    }
                  }
                  else
                  {
                    long long v87 = v59;
                  }
                }
                else
                {
                  long long v87 = v59;
                }
                do
                {
                  uint64_t v94 = *--v87;
                  *--v84 = v94;
                }
                while (v87 != v78);
                goto LABEL_154;
              }
            }
            else
            {
              uint64_t v83 = 0;
              v84 = (uint64_t *)(8 * v79);
              std::string::value_type v85 = 0;
              *(void *)(8 * v79) = v55;
              uint64_t v77 = 8 * v79 + 8;
              if (v59 != v78) {
                goto LABEL_144;
              }
            }
            v221 = v84;
            v222 = (uint64_t *)v77;
            v223 = (uint64_t *)v85;
            goto LABEL_155;
          }
        }
        unint64_t v68 = (char *)(v58 - 1) - (char *)v60;
        if (v68 < 0x58) {
          goto LABEL_358;
        }
        if ((unint64_t)((char *)v60 - v66) < 0x20) {
          goto LABEL_358;
        }
        uint64_t v69 = (v68 >> 3) + 1;
        uint64_t v70 = 8 * (v69 & 0x3FFFFFFFFFFFFFFCLL);
        v71 = (char *)&v58[v70 / 0xFFFFFFFFFFFFFFF8];
        uint64_t v67 = (uint64_t *)((char *)v67 - v70);
        std::string::value_type v72 = &v66[8 * v61 - 16];
        v73 = (char *)(v58 - 2);
        uint64_t v74 = v69 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v75 = *(_OWORD *)v73;
          *((_OWORD *)v72 - 1) = *((_OWORD *)v73 - 1);
          *(_OWORD *)std::string::value_type v72 = v75;
          v72 -= 32;
          v73 -= 32;
          v74 -= 4;
        }
        while (v74);
        uint64_t v58 = (uint64_t *)v71;
        if (v69 != (v69 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_358:
          do
          {
            uint64_t v76 = *--v58;
            *--uint64_t v67 = v76;
          }
          while (v58 != v60);
        }
        uint64_t v58 = v221;
        goto LABEL_131;
      }
LABEL_196:
      v208.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
      *(_OWORD *)&v208.__r_.__value_.__r.__words[1] = xmmword_20B98C0;
      strcpy(v208.__r_.__value_.__l.__data_, "ERR077 - Expected either a 'case' or 'default' statement");
      memset(&v206, 0, sizeof(v206));
      std::string::push_back(&v206, 51);
      std::string::push_back(&v206, 57);
      std::string::push_back(&v206, 50);
      std::string::push_back(&v206, 50);
      std::string::push_back(&v206, 50);
      std::string::size_type v115 = HIBYTE(v206.__r_.__value_.__r.__words[2]);
      if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v116 = &v206;
      }
      else {
        uint64_t v116 = (std::string *)v206.__r_.__value_.__r.__words[0];
      }
      if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v115 = v206.__r_.__value_.__l.__size_;
      }
      if (v115)
      {
        unint64_t v117 = (std::string *)((char *)v116 + v115 - 1);
        if (v117 > v116)
        {
          std::string::value_type v118 = &v116->__r_.__value_.__s.__data_[1];
          do
          {
            std::string::value_type v119 = *(v118 - 1);
            *(v118 - 1) = v117->__r_.__value_.__s.__data_[0];
            v117->__r_.__value_.__s.__data_[0] = v119;
            unint64_t v117 = (std::string *)((char *)v117 - 1);
            BOOL v15 = v118++ >= (char *)v117;
          }
          while (!v15);
        }
      }
      long long v120 = std::string::insert(&v206, 0, "exprtk.hpp:");
      long long v121 = *(_OWORD *)&v120->__r_.__value_.__l.__data_;
      v207.__r_.__value_.__r.__words[2] = v120->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v207.__r_.__value_.__l.__data_ = v121;
      v120->__r_.__value_.__l.__size_ = 0;
      v120->__r_.__value_.__r.__words[2] = 0;
      v120->__r_.__value_.__r.__words[0] = 0;
      char v212 = 0;
      LOBYTE(v210[1]) = 0;
      uint64_t v213 = -1;
      long long v215 = 0u;
      long long v216 = 0u;
      long long v217 = 0u;
      long long __p = 0u;
      long long v219 = 0u;
      uint64_t v220 = 0;
      int v214 = 1;
      LODWORD(v210[0]) = *(_DWORD *)(a1 + 104);
      std::string::operator=((std::string *)&v210[1], v2);
      uint64_t v213 = *(void *)(a1 + 136);
      std::string::operator=((std::string *)&v215, &v208);
      std::string::operator=((std::string *)((char *)&v216 + 8), &v207);
      uint64_t v122 = *(void *)(a1 + 568);
      uint64_t v123 = *(void *)(a1 + 560);
      uint64_t v124 = 30 * ((v122 - v123) >> 3) - 1;
      if (v122 == v123) {
        uint64_t v124 = 0;
      }
      if (v124 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
      {
        sub_B4B88(a1 + 552);
        uint64_t v123 = *(void *)(a1 + 560);
        uint64_t v122 = *(void *)(a1 + 568);
      }
      if (v122 == v123)
      {
        uint64_t v38 = 0;
      }
      else
      {
        unint64_t v125 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
        uint64_t v38 = *(void *)(v123 + 8 * (v125 / 0x1E)) + 136 * (v125 % 0x1E);
      }
    }
    else
    {
      v208.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
      *(_OWORD *)&v208.__r_.__value_.__r.__words[1] = xmmword_20B9A20;
      strcpy(v208.__r_.__value_.__l.__data_, "ERR076 - Expected '{' for call to switch statement");
      memset(&v206, 0, sizeof(v206));
      std::string::push_back(&v206, 48);
      std::string::push_back(&v206, 56);
      std::string::push_back(&v206, 50);
      std::string::push_back(&v206, 50);
      std::string::push_back(&v206, 50);
      std::string::size_type v27 = HIBYTE(v206.__r_.__value_.__r.__words[2]);
      if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v28 = &v206;
      }
      else {
        uint64_t v28 = (std::string *)v206.__r_.__value_.__r.__words[0];
      }
      if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v27 = v206.__r_.__value_.__l.__size_;
      }
      if (v27)
      {
        int v29 = (std::string *)((char *)v28 + v27 - 1);
        if (v29 > v28)
        {
          std::string::size_type v30 = &v28->__r_.__value_.__s.__data_[1];
          do
          {
            std::string::value_type v31 = *(v30 - 1);
            *(v30 - 1) = v29->__r_.__value_.__s.__data_[0];
            v29->__r_.__value_.__s.__data_[0] = v31;
            int v29 = (std::string *)((char *)v29 - 1);
            BOOL v15 = v30++ >= (char *)v29;
          }
          while (!v15);
        }
      }
      uint64_t v32 = std::string::insert(&v206, 0, "exprtk.hpp:");
      long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v207.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v207.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      char v212 = 0;
      LOBYTE(v210[1]) = 0;
      uint64_t v213 = -1;
      long long v215 = 0u;
      long long v216 = 0u;
      long long v217 = 0u;
      long long __p = 0u;
      long long v219 = 0u;
      uint64_t v220 = 0;
      int v214 = 1;
      LODWORD(v210[0]) = *(_DWORD *)(a1 + 104);
      std::string::operator=((std::string *)&v210[1], v2);
      uint64_t v213 = *(void *)(a1 + 136);
      std::string::operator=((std::string *)&v215, &v208);
      std::string::operator=((std::string *)((char *)&v216 + 8), &v207);
      uint64_t v34 = *(void *)(a1 + 568);
      uint64_t v35 = *(void *)(a1 + 560);
      uint64_t v36 = 30 * ((v34 - v35) >> 3) - 1;
      if (v34 == v35) {
        uint64_t v36 = 0;
      }
      if (v36 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
      {
        sub_B4B88(a1 + 552);
        uint64_t v35 = *(void *)(a1 + 560);
        uint64_t v34 = *(void *)(a1 + 568);
      }
      if (v34 == v35)
      {
        uint64_t v38 = 0;
      }
      else
      {
        unint64_t v37 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
        uint64_t v38 = *(void *)(v35 + 8 * (v37 / 0x1E)) + 136 * (v37 % 0x1E);
      }
    }
LABEL_214:
    sub_B5158(v38, (uint64_t)v210);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v219) < 0)
    {
      operator delete((void *)__p);
      if ((SHIBYTE(v217) & 0x80000000) == 0)
      {
LABEL_216:
        if ((SBYTE7(v216) & 0x80000000) == 0) {
          goto LABEL_217;
        }
        goto LABEL_224;
      }
    }
    else if ((SHIBYTE(v217) & 0x80000000) == 0)
    {
      goto LABEL_216;
    }
    operator delete(*((void **)&v216 + 1));
    if ((SBYTE7(v216) & 0x80000000) == 0)
    {
LABEL_217:
      if ((v212 & 0x80000000) == 0) {
        goto LABEL_218;
      }
      goto LABEL_225;
    }
LABEL_224:
    operator delete((void *)v215);
    if ((v212 & 0x80000000) == 0)
    {
LABEL_218:
      if ((SHIBYTE(v207.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_219;
      }
      goto LABEL_226;
    }
LABEL_225:
    operator delete(v210[1]);
    if ((SHIBYTE(v207.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_219:
      if ((SHIBYTE(v206.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_220;
      }
      goto LABEL_227;
    }
LABEL_226:
    operator delete(v207.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v206.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_220:
      if ((SHIBYTE(v208.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_229;
      }
LABEL_228:
      operator delete(v208.__r_.__value_.__l.__data_);
LABEL_229:
      uint64_t v23 = 0;
      sub_22094C((uint64_t)&__str);
      std::string::size_type v24 = v221;
      if (!v221) {
        return v23;
      }
      goto LABEL_39;
    }
LABEL_227:
    operator delete(v206.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v208.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_229;
    }
    goto LABEL_228;
  }
LABEL_14:
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
  *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_20B9280;
  strcpy(__str.__r_.__value_.__l.__data_, "ERR075 - Expected keyword 'switch'");
  memset(&v207, 0, sizeof(v207));
  std::string::push_back(&v207, 53);
  std::string::push_back(&v207, 54);
  std::string::push_back(&v207, 50);
  std::string::push_back(&v207, 50);
  std::string::push_back(&v207, 50);
  std::string::size_type v10 = HIBYTE(v207.__r_.__value_.__r.__words[2]);
  if ((v207.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    BOOL v11 = &v207;
  }
  else {
    BOOL v11 = (std::string *)v207.__r_.__value_.__r.__words[0];
  }
  if ((v207.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v10 = v207.__r_.__value_.__l.__size_;
  }
  if (v10)
  {
    __darwin_ct_rune_t v12 = (std::string *)((char *)v11 + v10 - 1);
    if (v12 > v11)
    {
      long long v13 = &v11->__r_.__value_.__s.__data_[1];
      do
      {
        std::string::value_type v14 = *(v13 - 1);
        *(v13 - 1) = v12->__r_.__value_.__s.__data_[0];
        v12->__r_.__value_.__s.__data_[0] = v14;
        __darwin_ct_rune_t v12 = (std::string *)((char *)v12 - 1);
        BOOL v15 = v13++ >= (char *)v12;
      }
      while (!v15);
    }
  }
  uint64_t v16 = std::string::insert(&v207, 0, "exprtk.hpp:");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v208.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v208.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  char v212 = 0;
  LOBYTE(v210[1]) = 0;
  uint64_t v213 = -1;
  long long v215 = 0u;
  long long v216 = 0u;
  long long v217 = 0u;
  long long __p = 0u;
  long long v219 = 0u;
  uint64_t v220 = 0;
  int v214 = 1;
  LODWORD(v210[0]) = *(_DWORD *)(a1 + 104);
  std::string::operator=((std::string *)&v210[1], v2);
  uint64_t v213 = *(void *)(a1 + 136);
  std::string::operator=((std::string *)&v215, &__str);
  std::string::operator=((std::string *)((char *)&v216 + 8), &v208);
  uint64_t v18 = *(void *)(a1 + 568);
  uint64_t v19 = *(void *)(a1 + 560);
  uint64_t v20 = 30 * ((v18 - v19) >> 3) - 1;
  if (v18 == v19) {
    uint64_t v20 = 0;
  }
  if (v20 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
  {
    sub_B4B88(a1 + 552);
    uint64_t v19 = *(void *)(a1 + 560);
    uint64_t v18 = *(void *)(a1 + 568);
  }
  if (v18 == v19)
  {
    uint64_t v22 = 0;
  }
  else
  {
    unint64_t v21 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
    uint64_t v22 = *(void *)(v19 + 8 * (v21 / 0x1E)) + 136 * (v21 % 0x1E);
  }
  sub_B5158(v22, (uint64_t)v210);
  ++*(void *)(a1 + 592);
  if (SBYTE7(v219) < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v217) & 0x80000000) == 0)
    {
LABEL_33:
      if ((SBYTE7(v216) & 0x80000000) == 0) {
        goto LABEL_34;
      }
      goto LABEL_43;
    }
  }
  else if ((SHIBYTE(v217) & 0x80000000) == 0)
  {
    goto LABEL_33;
  }
  operator delete(*((void **)&v216 + 1));
  if ((SBYTE7(v216) & 0x80000000) == 0)
  {
LABEL_34:
    if ((v212 & 0x80000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_44;
  }
LABEL_43:
  operator delete((void *)v215);
  if ((v212 & 0x80000000) == 0)
  {
LABEL_35:
    if ((SHIBYTE(v208.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_45;
  }
LABEL_44:
  operator delete(v210[1]);
  if ((SHIBYTE(v208.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_36:
    if ((SHIBYTE(v207.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_46;
  }
LABEL_45:
  operator delete(v208.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v207.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_37:
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_38;
    }
LABEL_47:
    operator delete(__str.__r_.__value_.__l.__data_);
    uint64_t v23 = 0;
    std::string::size_type v24 = v221;
    if (!v221) {
      return v23;
    }
    goto LABEL_39;
  }
LABEL_46:
  operator delete(v207.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v23 = 0;
  std::string::size_type v24 = v221;
  if (v221)
  {
LABEL_39:
    v222 = v24;
    operator delete(v24);
  }
  return v23;
}

void sub_C9F88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a17 < 0)
  {
    operator delete(__p);
    if ((a30 & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
  else if ((a30 & 0x80000000) == 0)
  {
LABEL_6:
    sub_22094C((uint64_t)&a31);
    __darwin_ct_rune_t v44 = *(void **)(v42 - 120);
    if (!v44) {
      _Unwind_Resume(a1);
    }
    *(void *)(v42 - 112) = v44;
    operator delete(v44);
    _Unwind_Resume(a1);
  }
  operator delete(a25);
  goto LABEL_6;
}

uint64_t sub_CA224(uint64_t a1)
{
  std::string::size_type v2 = (const std::string *)(a1 + 112);
  if (*(char *)(a1 + 135) < 0)
  {
    sub_4200(&__dst, *(void **)(a1 + 112), *(void *)(a1 + 120));
    if ((SHIBYTE(v37) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_7:
    int v3 = *(unsigned __int8 *)(__dst + 2);
    if ((v3 - 48) >= 0xA) {
      goto LABEL_11;
    }
    int v4 = *(unsigned __int8 *)(__dst + 3);
    if ((v4 - 48) >= 0xA) {
      goto LABEL_11;
    }
LABEL_9:
    unsigned int v5 = v4 + 10 * v3;
    int v6 = v5 + 472;
    if (v5 > 0x23F) {
      uint64_t v7 = sub_1CAF60(a1, v6);
    }
    else {
      uint64_t v7 = sub_1CA4E4(a1, v6);
    }
    uint64_t v21 = v7;
    if ((SHIBYTE(v37) & 0x80000000) == 0) {
      return v21;
    }
    goto LABEL_47;
  }
  long long __dst = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  uint64_t v37 = *(void *)(a1 + 128);
  if (SHIBYTE(v37) < 0) {
    goto LABEL_7;
  }
LABEL_3:
  int v3 = BYTE2(__dst);
  if (BYTE2(__dst) - 48 <= 9)
  {
    int v4 = BYTE3(__dst);
    if (BYTE3(__dst) - 48 < 0xA) {
      goto LABEL_9;
    }
  }
LABEL_11:
  std::operator+<char>();
  memset(&v23, 0, sizeof(v23));
  std::string::push_back(&v23, 57);
  std::string::push_back(&v23, 49);
  std::string::push_back(&v23, 48);
  std::string::push_back(&v23, 52);
  std::string::push_back(&v23, 50);
  std::string::size_type size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v9 = &v23;
  }
  else {
    std::string::size_type v9 = (std::string *)v23.__r_.__value_.__r.__words[0];
  }
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v23.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    std::string::size_type v10 = (std::string *)((char *)v9 + size - 1);
    if (v10 > v9)
    {
      BOOL v11 = &v9->__r_.__value_.__s.__data_[1];
      do
      {
        std::string::value_type v12 = *(v11 - 1);
        *(v11 - 1) = v10->__r_.__value_.__s.__data_[0];
        v10->__r_.__value_.__s.__data_[0] = v12;
        std::string::size_type v10 = (std::string *)((char *)v10 - 1);
      }
      while (v11++ < (char *)v10);
    }
  }
  std::string::value_type v14 = std::string::insert(&v23, 0, "exprtk.hpp:");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  *((unsigned char *)&v27.__r_.__value_.__s + 23) = 0;
  v27.__r_.__value_.__s.__data_[0] = 0;
  uint64_t v28 = -1;
  *(_OWORD *)std::string::size_type v30 = 0u;
  *(_OWORD *)std::string::value_type v31 = 0u;
  long long v32 = 0u;
  *(_OWORD *)long long __p = 0u;
  long long v34 = 0u;
  uint64_t v35 = 0;
  int v29 = 2;
  int v26 = *(_DWORD *)(a1 + 104);
  std::string::operator=(&v27, v2);
  uint64_t v28 = *(void *)(a1 + 136);
  std::string::operator=((std::string *)v30, &__str);
  std::string::operator=((std::string *)&v31[1], &v24);
  uint64_t v16 = *(void *)(a1 + 568);
  uint64_t v17 = *(void *)(a1 + 560);
  uint64_t v18 = 30 * ((v16 - v17) >> 3) - 1;
  if (v16 == v17) {
    uint64_t v18 = 0;
  }
  if (v18 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
  {
    sub_B4B88(a1 + 552);
    uint64_t v17 = *(void *)(a1 + 560);
    uint64_t v16 = *(void *)(a1 + 568);
  }
  if (v16 == v17)
  {
    uint64_t v20 = 0;
  }
  else
  {
    unint64_t v19 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
    uint64_t v20 = *(void *)(v17 + 8 * (v19 / 0x1E)) + 136 * (v19 % 0x1E);
  }
  sub_B5158(v20, (uint64_t)&v26);
  ++*(void *)(a1 + 592);
  if (SBYTE7(v34) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v32) & 0x80000000) == 0)
    {
LABEL_30:
      if ((SHIBYTE(v31[0]) & 0x80000000) == 0) {
        goto LABEL_31;
      }
      goto LABEL_39;
    }
  }
  else if ((SHIBYTE(v32) & 0x80000000) == 0)
  {
    goto LABEL_30;
  }
  operator delete(v31[1]);
  if ((SHIBYTE(v31[0]) & 0x80000000) == 0)
  {
LABEL_31:
    if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_40;
  }
LABEL_39:
  operator delete(v30[0]);
  if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_32:
    if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_41;
  }
LABEL_40:
  operator delete(v27.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_33:
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_42;
  }
LABEL_41:
  operator delete(v24.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_34:
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_35;
    }
LABEL_43:
    operator delete(__str.__r_.__value_.__l.__data_);
    uint64_t v21 = 0;
    if ((SHIBYTE(v37) & 0x80000000) == 0) {
      return v21;
    }
    goto LABEL_47;
  }
LABEL_42:
  operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_43;
  }
LABEL_35:
  uint64_t v21 = 0;
  if ((SHIBYTE(v37) & 0x80000000) == 0) {
    return v21;
  }
LABEL_47:
  operator delete((void *)__dst);
  return v21;
}

void sub_CA5D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if ((*(char *)(v29 - 41) & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(*(void **)(v29 - 64));
  _Unwind_Resume(exception_object);
}

void sub_CA680(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v2) {
    uint64_t v2 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v2 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v2;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v2 + 8));
  *(void *)(a1 + 136) = *(void *)(v2 + 32);
  operator new();
}

uint64_t sub_CA710(std::string::size_type a1)
{
  if (*(unsigned char *)(a1 + 194))
  {
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_20B8FD0;
    strcpy(__str.__r_.__value_.__l.__data_, "ERR156 - Illegal variable definition");
    memset(&v110, 0, sizeof(v110));
    std::string::push_back(&v110, 57);
    std::string::push_back(&v110, 54);
    std::string::push_back(&v110, 53);
    std::string::push_back(&v110, 52);
    std::string::push_back(&v110, 50);
    std::string::size_type size = HIBYTE(v110.__r_.__value_.__r.__words[2]);
    if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v3 = &v110;
    }
    else {
      int v3 = (std::string *)v110.__r_.__value_.__r.__words[0];
    }
    if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v110.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      int v4 = (std::string *)((char *)v3 + size - 1);
      if (v4 > v3)
      {
        unsigned int v5 = &v3->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v6 = *(v5 - 1);
          *(v5 - 1) = v4->__r_.__value_.__s.__data_[0];
          v4->__r_.__value_.__s.__data_[0] = v6;
          int v4 = (std::string *)((char *)v4 - 1);
          BOOL v7 = v5++ >= (char *)v4;
        }
        while (!v7);
      }
    }
    unint64_t v8 = std::string::insert(&v110, 0, "exprtk.hpp:");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v113.__r_.__value_.__s + 23) = 0;
    v113.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v114 = -1;
    long long v116 = 0u;
    long long v117 = 0u;
    long long v118 = 0u;
    long long v119 = 0u;
    long long v120 = 0u;
    uint64_t v121 = 0;
    int v115 = 1;
    LODWORD(v112) = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v113, (const std::string *)(a1 + 112));
    uint64_t v114 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v116, &__str);
    std::string::operator=((std::string *)((char *)&v117 + 8), &__dst);
    uint64_t v10 = *(void *)(a1 + 568);
    uint64_t v11 = *(void *)(a1 + 560);
    uint64_t v12 = 30 * ((v10 - v11) >> 3) - 1;
    if (v10 == v11) {
      uint64_t v12 = 0;
    }
    if (v12 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v11 = *(void *)(a1 + 560);
      uint64_t v10 = *(void *)(a1 + 568);
    }
    if (v10 == v11)
    {
      uint64_t v14 = 0;
    }
    else
    {
      unint64_t v13 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v14 = *(void *)(v11 + 8 * (v13 / 0x1E)) + 136 * (v13 % 0x1E);
    }
    sub_B5158(v14, (uint64_t)&v112);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v120) < 0)
    {
      operator delete((void *)v119);
      if ((SHIBYTE(v118) & 0x80000000) == 0)
      {
LABEL_34:
        if ((SBYTE7(v117) & 0x80000000) == 0) {
          goto LABEL_35;
        }
        goto LABEL_43;
      }
    }
    else if ((SHIBYTE(v118) & 0x80000000) == 0)
    {
      goto LABEL_34;
    }
    operator delete(*((void **)&v117 + 1));
    if ((SBYTE7(v117) & 0x80000000) == 0)
    {
LABEL_35:
      if ((SHIBYTE(v113.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_36;
      }
      goto LABEL_44;
    }
LABEL_43:
    operator delete((void *)v116);
    if ((SHIBYTE(v113.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_36:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_37;
      }
      goto LABEL_45;
    }
LABEL_44:
    operator delete(v113.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_37:
      if ((SHIBYTE(v110.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_38;
      }
      goto LABEL_46;
    }
LABEL_45:
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v110.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_38:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return 0;
      }
LABEL_47:
      operator delete(__str.__r_.__value_.__l.__data_);
      return 0;
    }
LABEL_46:
    operator delete(v110.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return 0;
    }
    goto LABEL_47;
  }
  v113.__r_.__value_.__s.__data_[15] = 3;
  LODWORD(v112) = 7496054;
  BOOL v15 = *(char *)(a1 + 135) < 0;
  uint64_t v16 = *(unsigned __int8 *)(a1 + 135);
  if ((v16 & 0x80u) != 0) {
    uint64_t v16 = *(void *)(a1 + 120);
  }
  if (v16 != 3) {
    return 0;
  }
  unint64_t v17 = 0;
  uint64_t v18 = (_DWORD *)(a1 + 104);
  unint64_t v19 = (std::string::size_type *)(a1 + 112);
  do
  {
    if (v15) {
      std::string::size_type v20 = *v19;
    }
    else {
      std::string::size_type v20 = a1 + 112;
    }
    __darwin_ct_rune_t v21 = __tolower(*(char *)(v20 + v17));
    if (v21 != __tolower(*((char *)&v112 + v17))) {
      return 0;
    }
    ++v17;
    BOOL v15 = *(char *)(a1 + 135) < 0;
    unint64_t v22 = *(unsigned __int8 *)(a1 + 135);
    if ((v22 & 0x80u) != 0) {
      unint64_t v22 = *(void *)(a1 + 120);
    }
  }
  while (v17 < v22);
  std::string::size_type v23 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v23) {
    std::string::size_type v23 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v23 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v23;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v23 + 8));
  *(void *)(a1 + 136) = *(void *)(v23 + 32);
  if (*(char *)(a1 + 135) < 0)
  {
    sub_4200(&__dst, *(void **)(a1 + 112), *(void *)(a1 + 120));
  }
  else
  {
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)v19;
    __dst.__r_.__value_.__r.__words[2] = *(void *)(a1 + 128);
  }
  uint64_t v109 = 0;
  if (*v18 != 8)
  {
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_20B9A20;
    strcpy(__str.__r_.__value_.__l.__data_, "ERR157 - Expected a symbol for variable definition");
    memset(&v108, 0, sizeof(v108));
    std::string::push_back(&v108, 48);
    std::string::push_back(&v108, 57);
    std::string::push_back(&v108, 53);
    std::string::push_back(&v108, 52);
    std::string::push_back(&v108, 50);
    std::string::size_type v27 = HIBYTE(v108.__r_.__value_.__r.__words[2]);
    if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v28 = &v108;
    }
    else {
      uint64_t v28 = (std::string *)v108.__r_.__value_.__r.__words[0];
    }
    if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v27 = v108.__r_.__value_.__l.__size_;
    }
    if (v27)
    {
      uint64_t v29 = (std::string *)((char *)v28 + v27 - 1);
      if (v29 > v28)
      {
        std::string::size_type v30 = &v28->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v31 = *(v30 - 1);
          *(v30 - 1) = v29->__r_.__value_.__s.__data_[0];
          v29->__r_.__value_.__s.__data_[0] = v31;
          uint64_t v29 = (std::string *)((char *)v29 - 1);
          BOOL v7 = v30++ >= (char *)v29;
        }
        while (!v7);
      }
    }
    long long v32 = std::string::insert(&v108, 0, "exprtk.hpp:");
    long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v110.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v113.__r_.__value_.__s + 23) = 0;
    v113.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v114 = -1;
    long long v116 = 0u;
    long long v117 = 0u;
    long long v118 = 0u;
    long long v119 = 0u;
    long long v120 = 0u;
    uint64_t v121 = 0;
    int v115 = 1;
    LODWORD(v112) = *v18;
    std::string::operator=(&v113, (const std::string *)(a1 + 112));
    uint64_t v114 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v116, &__str);
    std::string::operator=((std::string *)((char *)&v117 + 8), &v110);
    uint64_t v34 = *(void *)(a1 + 568);
    uint64_t v35 = *(void *)(a1 + 560);
    uint64_t v36 = 30 * ((v34 - v35) >> 3) - 1;
    if (v34 == v35) {
      uint64_t v36 = 0;
    }
    if (v36 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v35 = *(void *)(a1 + 560);
      uint64_t v34 = *(void *)(a1 + 568);
    }
    if (v34 == v35)
    {
      uint64_t v38 = 0;
    }
    else
    {
      unint64_t v37 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v38 = *(void *)(v35 + 8 * (v37 / 0x1E)) + 136 * (v37 % 0x1E);
    }
    sub_B5158(v38, (uint64_t)&v112);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v120) < 0)
    {
      operator delete((void *)v119);
      if ((SHIBYTE(v118) & 0x80000000) == 0)
      {
LABEL_121:
        if ((SBYTE7(v117) & 0x80000000) == 0) {
          goto LABEL_122;
        }
        goto LABEL_129;
      }
    }
    else if ((SHIBYTE(v118) & 0x80000000) == 0)
    {
      goto LABEL_121;
    }
    operator delete(*((void **)&v117 + 1));
    if ((SBYTE7(v117) & 0x80000000) == 0)
    {
LABEL_122:
      if ((SHIBYTE(v113.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_123;
      }
      goto LABEL_130;
    }
LABEL_129:
    operator delete((void *)v116);
    if ((SHIBYTE(v113.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_123:
      if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_131;
      }
      goto LABEL_124;
    }
LABEL_130:
    operator delete(v113.__r_.__value_.__l.__data_);
    if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_131;
    }
    goto LABEL_124;
  }
  std::string::size_type v26 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v26) {
    std::string::size_type v26 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v26 + 40;
  }
  __darwin_ct_rune_t v100 = (_DWORD *)(a1 + 104);
  *uint64_t v18 = *(_DWORD *)v26;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v26 + 8));
  unint64_t v39 = 0;
  *(void *)(a1 + 136) = *(void *)(v26 + 32);
  BOOL v40 = 1;
  while (1)
  {
    uint64_t v41 = &word_25559A8[12 * v39];
    BOOL v42 = (__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
    std::string::size_type v43 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v43 = __dst.__r_.__value_.__l.__size_;
    }
    uint64_t v44 = *((unsigned __int8 *)v41 + 23);
    if ((v44 & 0x80u) != 0) {
      uint64_t v44 = *((void *)v41 + 1);
    }
    if (v43 == v44) {
      break;
    }
LABEL_73:
    BOOL v40 = v39++ < 0x56;
    if (v39 == 87) {
      goto LABEL_91;
    }
  }
  if (v43)
  {
    std::string::size_type v45 = 0;
    do
    {
      __darwin_ct_rune_t v46 = v42 ? (std::string *)__dst.__r_.__value_.__r.__words[0] : &__dst;
      __darwin_ct_rune_t v47 = __tolower(v46->__r_.__value_.__s.__data_[v45]);
      __darwin_ct_rune_t v48 = *((char *)v41 + 23) >= 0 ? &word_25559A8[12 * v39] : *(__int16 **)v41;
      if (v47 != __tolower(*((char *)v48 + v45))) {
        goto LABEL_73;
      }
      ++v45;
      BOOL v42 = (__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
      std::string::size_type v49 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v49 = __dst.__r_.__value_.__l.__size_;
      }
    }
    while (v45 < v49);
  }
LABEL_91:
  if (v40)
  {
    std::operator+<char>();
    std::string::size_type v50 = std::string::append(&v110, "'");
    long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v51;
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    memset(&v107, 0, sizeof(v107));
    std::string::push_back(&v107, 48);
    std::string::push_back(&v107, 48);
    std::string::push_back(&v107, 54);
    std::string::push_back(&v107, 52);
    std::string::push_back(&v107, 50);
    std::string::size_type v52 = HIBYTE(v107.__r_.__value_.__r.__words[2]);
    if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v53 = &v107;
    }
    else {
      std::string::size_type v53 = (std::string *)v107.__r_.__value_.__r.__words[0];
    }
    if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v52 = v107.__r_.__value_.__l.__size_;
    }
    if (v52)
    {
      std::string::size_type v54 = (std::string *)((char *)v53 + v52 - 1);
      if (v54 > v53)
      {
        uint64_t v55 = &v53->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v56 = *(v55 - 1);
          *(v55 - 1) = v54->__r_.__value_.__s.__data_[0];
          v54->__r_.__value_.__s.__data_[0] = v56;
          std::string::size_type v54 = (std::string *)((char *)v54 - 1);
          BOOL v7 = v55++ >= (char *)v54;
        }
        while (!v7);
      }
    }
    std::string::size_type v57 = std::string::insert(&v107, 0, "exprtk.hpp:");
    long long v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
    v108.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v108.__r_.__value_.__l.__data_ = v58;
    v57->__r_.__value_.__l.__size_ = 0;
    v57->__r_.__value_.__r.__words[2] = 0;
    v57->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v113.__r_.__value_.__s + 23) = 0;
    v113.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v114 = -1;
    long long v116 = 0u;
    long long v117 = 0u;
    long long v118 = 0u;
    long long v119 = 0u;
    long long v120 = 0u;
    uint64_t v121 = 0;
    int v115 = 1;
    LODWORD(v112) = *v100;
    std::string::operator=(&v113, (const std::string *)(a1 + 112));
    uint64_t v114 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v116, &__str);
    std::string::operator=((std::string *)((char *)&v117 + 8), &v108);
    uint64_t v59 = *(void *)(a1 + 568);
    uint64_t v60 = *(void *)(a1 + 560);
    uint64_t v61 = 30 * ((v59 - v60) >> 3) - 1;
    if (v59 == v60) {
      uint64_t v61 = 0;
    }
    if (v61 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v60 = *(void *)(a1 + 560);
      uint64_t v59 = *(void *)(a1 + 568);
    }
    if (v59 == v60)
    {
      uint64_t v63 = 0;
    }
    else
    {
      unint64_t v62 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v63 = *(void *)(v60 + 8 * (v62 / 0x1E)) + 136 * (v62 % 0x1E);
    }
    goto LABEL_138;
  }
  uint64_t v65 = *(void *)(a1 + 440);
  uint64_t v64 = *(void *)(a1 + 448);
  if (v64 == v65)
  {
LABEL_115:
    if (sub_1E68C0(a1, (unsigned __int8 *)&__dst))
    {
      std::operator+<char>();
      uint64_t v69 = std::string::append(&v110, "'");
      long long v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v70;
      v69->__r_.__value_.__l.__size_ = 0;
      v69->__r_.__value_.__r.__words[2] = 0;
      v69->__r_.__value_.__r.__words[0] = 0;
      sub_B1D70(0x602Cu, (unint64_t)&v107);
      v71 = std::string::insert(&v107, 0, "exprtk.hpp:");
      long long v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
      v108.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v108.__r_.__value_.__l.__data_ = v72;
      v71->__r_.__value_.__l.__size_ = 0;
      v71->__r_.__value_.__r.__words[2] = 0;
      v71->__r_.__value_.__r.__words[0] = 0;
      sub_B49F0(1, (uint64_t)v100, &__str, &v108, (uint64_t)&v112);
      sub_B1CB0((void *)a1, (uint64_t)&v112);
      sub_B1ED4((uint64_t)&v112);
      if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_151;
      }
      goto LABEL_143;
    }
    if (*v100 == 123)
    {
      uint64_t v74 = sub_1E8834(a1, &__dst);
      goto LABEL_175;
    }
    if (*v100 == 91)
    {
      uint64_t v74 = sub_1E6AB4(a1, &__dst);
      goto LABEL_175;
    }
    LODWORD(v112) = 10;
    if (!sub_BA4D0(a1, (int *)&v112, 1) || (uint64_t v109 = sub_B7FE4(a1, 0)) != 0)
    {
      int v88 = *v100;
      if ((int)*v100 > 92)
      {
        if (v88 != 93 && v88 != 125)
        {
LABEL_197:
          sub_5E5C(&__str, "ERR162 - Expected ';' after variable definition");
          sub_B1D70(0x6052u, (unint64_t)&v108);
          __darwin_ct_rune_t v96 = std::string::insert(&v108, 0, "exprtk.hpp:");
          long long v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
          v110.__r_.__value_.__r.__words[2] = v96->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v97;
          v96->__r_.__value_.__l.__size_ = 0;
          v96->__r_.__value_.__r.__words[2] = 0;
          v96->__r_.__value_.__r.__words[0] = 0;
          sub_B49F0(1, (uint64_t)v100, &__str, &v110, (uint64_t)&v112);
          sub_B1CB0((void *)a1, (uint64_t)&v112);
          sub_B1ED4((uint64_t)&v112);
          if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v110.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v108.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_199:
              if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_194;
              }
              goto LABEL_213;
            }
          }
          else if ((SHIBYTE(v108.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_199;
          }
          operator delete(v108.__r_.__value_.__l.__data_);
          if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_194;
          }
LABEL_213:
          operator delete(__str.__r_.__value_.__l.__data_);
          goto LABEL_194;
        }
      }
      else if (v88 != 6 && v88 != 41)
      {
        goto LABEL_197;
      }
      if (v109 && (sub_115C38(v109) & 1) != 0) {
        goto LABEL_156;
      }
      uint64_t v89 = (unsigned __int8 *)sub_1C32F0((void *)(a1 + 872), (uint64_t)&__dst, -1);
      if (!sub_A938C(v89, (unsigned __int8 *)&__dst)) {
        goto LABEL_203;
      }
      if (v89[68])
      {
        std::operator+<char>();
        uint64_t v90 = std::string::append(&v110, "'");
        long long v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v91;
        v90->__r_.__value_.__l.__size_ = 0;
        v90->__r_.__value_.__r.__words[2] = 0;
        v90->__r_.__value_.__r.__words[0] = 0;
        sub_B1D70(0x606Eu, (unint64_t)&v107);
        uint64_t v92 = std::string::insert(&v107, 0, "exprtk.hpp:");
        long long v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
        v108.__r_.__value_.__r.__words[2] = v92->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v108.__r_.__value_.__l.__data_ = v93;
        v92->__r_.__value_.__l.__size_ = 0;
        v92->__r_.__value_.__r.__words[2] = 0;
        v92->__r_.__value_.__r.__words[0] = 0;
        sub_B49F0(1, (uint64_t)v100, &__str, &v108, (uint64_t)&v112);
        sub_B1CB0((void *)a1, (uint64_t)&v112);
        sub_B1ED4((uint64_t)&v112);
        if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v108.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v107.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_192:
            if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_193;
            }
            goto LABEL_216;
          }
        }
        else if ((SHIBYTE(v107.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_192;
        }
        operator delete(v107.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_193:
          if ((SHIBYTE(v110.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_194:
            sub_BBE90(a1 + 432, &v109, 0);
            goto LABEL_156;
          }
LABEL_217:
          operator delete(v110.__r_.__value_.__l.__data_);
          goto LABEL_194;
        }
LABEL_216:
        operator delete(__str.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v110.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_194;
        }
        goto LABEL_217;
      }
      if (*((_DWORD *)v89 + 16) != 1
        || (__darwin_ct_rune_t v98 = (void *)*((void *)v89 + 10),
            v89[68] = 1,
            uint64_t v99 = *((void *)v89 + 6) + 1,
            *((void *)v89 + 5) = *(void *)(a1 + 656),
            *((void *)v89 + 6) = v99,
            !v98))
      {
LABEL_203:
        *((unsigned char *)&__str.__r_.__value_.__s + 23) = 3;
        LODWORD(__str.__r_.__value_.__l.__data_) = 4144959;
        uint64_t v102 = -1;
        uint64_t v103 = -1;
        uint64_t v104 = -1;
        uint64_t v105 = 0;
        memset(v106, 0, 13);
        memset(&v106[2], 0, 24);
        std::string::operator=(&__str, &__dst);
        BYTE4(v106[1]) = 1;
        LODWORD(v106[1]) = 1;
        uint64_t v104 = *(void *)(a1 + 656);
        uint64_t v105 = 1;
        operator new();
      }
      sub_5E5C(&v112, "parse_define_var_statement()");
      if (!*(unsigned char *)(a1 + 651)) {
        *(unsigned char *)(a1 + 651) = 1;
      }
      if (v113.__r_.__value_.__s.__data_[15] < 0) {
        operator delete(v112);
      }
      sub_D2DB0(a1 + 464, (uint64_t)&__dst, 6u);
      std::string::size_type v112 = v98;
      if (!v109) {
        operator new();
      }
      v113.__r_.__value_.__r.__words[0] = v109;
      LODWORD(__str.__r_.__value_.__l.__data_) = 81;
      uint64_t v74 = (uint64_t)sub_DC9C8(a1 + 344, (int *)&__str, (uint64_t *)&v112);
LABEL_175:
      uint64_t v24 = v74;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_157;
      }
      return v24;
    }
    sub_5E5C(&__str, "ERR161 - Failed to parse initialisation expression");
    sub_B1D70(0x6040u, (unint64_t)&v108);
    uint64_t v94 = std::string::insert(&v108, 0, "exprtk.hpp:");
    long long v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
    v110.__r_.__value_.__r.__words[2] = v94->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v95;
    v94->__r_.__value_.__l.__size_ = 0;
    v94->__r_.__value_.__r.__words[2] = 0;
    v94->__r_.__value_.__r.__words[0] = 0;
    sub_B49F0(1, (uint64_t)v100, &__str, &v110, (uint64_t)&v112);
    sub_B1CB0((void *)a1, (uint64_t)&v112);
    sub_B1ED4((uint64_t)&v112);
    if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_131:
      operator delete(v110.__r_.__value_.__l.__data_);
      if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_132:
        operator delete(v108.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_156;
        }
        goto LABEL_133;
      }
LABEL_125:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_156;
      }
LABEL_133:
      v73 = (void *)__str.__r_.__value_.__r.__words[0];
      goto LABEL_155;
    }
LABEL_124:
    if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_132;
    }
    goto LABEL_125;
  }
  uint64_t v66 = 0;
  unint64_t v67 = 0;
  while (1)
  {
    uint64_t v68 = *(void *)(v65 + v66);
    if (!v68 || !*(void *)(v68 + 8)) {
      goto LABEL_110;
    }
    if (sub_ADC14(v65 + v66, (uint64_t)&__dst, 1)) {
      break;
    }
    uint64_t v65 = *(void *)(a1 + 440);
    uint64_t v64 = *(void *)(a1 + 448);
LABEL_110:
    ++v67;
    v66 += 8;
    if (v67 >= (v64 - v65) >> 3) {
      goto LABEL_115;
    }
  }
  std::operator+<char>();
  long long v75 = std::string::append(&v110, "'");
  long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v76;
  v75->__r_.__value_.__l.__size_ = 0;
  v75->__r_.__value_.__r.__words[2] = 0;
  v75->__r_.__value_.__r.__words[0] = 0;
  memset(&v107, 0, sizeof(v107));
  std::string::push_back(&v107, 48);
  std::string::push_back(&v107, 49);
  std::string::push_back(&v107, 54);
  std::string::push_back(&v107, 52);
  std::string::push_back(&v107, 50);
  std::string::size_type v77 = HIBYTE(v107.__r_.__value_.__r.__words[2]);
  if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v78 = &v107;
  }
  else {
    unint64_t v78 = (std::string *)v107.__r_.__value_.__r.__words[0];
  }
  if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v77 = v107.__r_.__value_.__l.__size_;
  }
  if (v77)
  {
    uint64_t v79 = (std::string *)((char *)v78 + v77 - 1);
    if (v79 > v78)
    {
      unint64_t v80 = &v78->__r_.__value_.__s.__data_[1];
      do
      {
        std::string::value_type v81 = *(v80 - 1);
        *(v80 - 1) = v79->__r_.__value_.__s.__data_[0];
        v79->__r_.__value_.__s.__data_[0] = v81;
        uint64_t v79 = (std::string *)((char *)v79 - 1);
        BOOL v7 = v80++ >= (char *)v79;
      }
      while (!v7);
    }
  }
  unint64_t v82 = std::string::insert(&v107, 0, "exprtk.hpp:");
  long long v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
  v108.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v108.__r_.__value_.__l.__data_ = v83;
  v82->__r_.__value_.__l.__size_ = 0;
  v82->__r_.__value_.__r.__words[2] = 0;
  v82->__r_.__value_.__r.__words[0] = 0;
  *((unsigned char *)&v113.__r_.__value_.__s + 23) = 0;
  v113.__r_.__value_.__s.__data_[0] = 0;
  uint64_t v114 = -1;
  long long v116 = 0u;
  long long v117 = 0u;
  long long v118 = 0u;
  long long v119 = 0u;
  long long v120 = 0u;
  uint64_t v121 = 0;
  int v115 = 1;
  LODWORD(v112) = *v100;
  std::string::operator=(&v113, (const std::string *)(a1 + 112));
  uint64_t v114 = *(void *)(a1 + 136);
  std::string::operator=((std::string *)&v116, &__str);
  std::string::operator=((std::string *)((char *)&v117 + 8), &v108);
  uint64_t v84 = *(void *)(a1 + 568);
  uint64_t v85 = *(void *)(a1 + 560);
  uint64_t v86 = 30 * ((v84 - v85) >> 3) - 1;
  if (v84 == v85) {
    uint64_t v86 = 0;
  }
  if (v86 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
  {
    sub_B4B88(a1 + 552);
    uint64_t v85 = *(void *)(a1 + 560);
    uint64_t v84 = *(void *)(a1 + 568);
  }
  if (v84 == v85)
  {
    uint64_t v63 = 0;
  }
  else
  {
    unint64_t v87 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
    uint64_t v63 = *(void *)(v85 + 8 * (v87 / 0x1E)) + 136 * (v87 % 0x1E);
  }
LABEL_138:
  sub_B5158(v63, (uint64_t)&v112);
  ++*(void *)(a1 + 592);
  if (SBYTE7(v120) < 0)
  {
    operator delete((void *)v119);
    if (SHIBYTE(v118) < 0) {
      goto LABEL_148;
    }
LABEL_140:
    if ((SBYTE7(v117) & 0x80000000) == 0) {
      goto LABEL_141;
    }
LABEL_149:
    operator delete((void *)v116);
    if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_150;
    }
LABEL_142:
    if ((SHIBYTE(v108.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_143;
    }
LABEL_151:
    operator delete(v108.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v107.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_144;
    }
    goto LABEL_152;
  }
  if ((SHIBYTE(v118) & 0x80000000) == 0) {
    goto LABEL_140;
  }
LABEL_148:
  operator delete(*((void **)&v117 + 1));
  if (SBYTE7(v117) < 0) {
    goto LABEL_149;
  }
LABEL_141:
  if ((SHIBYTE(v113.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_142;
  }
LABEL_150:
  operator delete(v113.__r_.__value_.__l.__data_);
  if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_151;
  }
LABEL_143:
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_152:
    operator delete(v107.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_153;
    }
LABEL_145:
    if ((SHIBYTE(v110.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_156;
    }
LABEL_154:
    v73 = (void *)v110.__r_.__value_.__r.__words[0];
LABEL_155:
    operator delete(v73);
    goto LABEL_156;
  }
LABEL_144:
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_145;
  }
LABEL_153:
  operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_154;
  }
LABEL_156:
  uint64_t v24 = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
LABEL_157:
  }
    operator delete(__dst.__r_.__value_.__l.__data_);
  return v24;
}

void sub_CBB0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  if (a57 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_CBEB4(uint64_t a1)
{
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&__dst, "swap");
  BOOL v1 = *(char *)(a1 + 135) < 0;
  uint64_t v2 = *(unsigned __int8 *)(a1 + 135);
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a1 + 120);
  }
  if (v2 != 4) {
    return 0;
  }
  unint64_t v4 = 0;
  unsigned int v5 = (_DWORD *)(a1 + 104);
  std::string::value_type v6 = (std::string *)(a1 + 112);
  do
  {
    if (v1) {
      BOOL v7 = (std::string *)v6->__r_.__value_.__r.__words[0];
    }
    else {
      BOOL v7 = v6;
    }
    __darwin_ct_rune_t v8 = __tolower(v7->__r_.__value_.__s.__data_[v4]);
    if (v8 != __tolower(__dst.__r_.__value_.__s.__data_[v4])) {
      return 0;
    }
    ++v4;
    BOOL v1 = *(char *)(a1 + 135) < 0;
    unint64_t v9 = *(unsigned __int8 *)(a1 + 135);
    if ((v9 & 0x80u) != 0) {
      unint64_t v9 = *(void *)(a1 + 120);
    }
  }
  while (v4 < v9);
  uint64_t v10 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v10) {
    uint64_t v10 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v10 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v10;
  std::string::operator=(v6, (const std::string *)(v10 + 8));
  *(void *)(a1 + 136) = *(void *)(v10 + 32);
  if (*(_DWORD *)(a1 + 104) != 40)
  {
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_20B9A60;
    strcpy(__str.__r_.__value_.__l.__data_, "ERR169 - Expected '(' at start of swap statement");
    memset(&v143, 0, sizeof(v143));
    std::string::push_back(&v143, 53);
    std::string::push_back(&v143, 52);
    std::string::push_back(&v143, 56);
    std::string::push_back(&v143, 52);
    std::string::push_back(&v143, 50);
    std::string::size_type size = HIBYTE(v143.__r_.__value_.__r.__words[2]);
    if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v13 = &v143;
    }
    else {
      unint64_t v13 = (std::string *)v143.__r_.__value_.__r.__words[0];
    }
    if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v143.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      uint64_t v14 = (std::string *)((char *)v13 + size - 1);
      if (v14 > v13)
      {
        BOOL v15 = &v13->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v16 = *(v15 - 1);
          *(v15 - 1) = v14->__r_.__value_.__s.__data_[0];
          v14->__r_.__value_.__s.__data_[0] = v16;
          uint64_t v14 = (std::string *)((char *)v14 - 1);
          BOOL v17 = v15++ >= (char *)v14;
        }
        while (!v17);
      }
    }
    uint64_t v18 = std::string::insert(&v143, 0, "exprtk.hpp:");
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v144.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    char v148 = 0;
    __dst.__r_.__value_.__s.__data_[8] = 0;
    uint64_t v149 = -1;
    long long v151 = 0u;
    long long v152 = 0u;
    long long v153 = 0u;
    long long __p = 0u;
    long long v155 = 0u;
    uint64_t v156 = 0;
    int v150 = 1;
    LODWORD(__dst.__r_.__value_.__l.__data_) = *v5;
    std::string::operator=((std::string *)&__dst.__r_.__value_.__r.__words[1], v6);
    uint64_t v149 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v151, &__str);
    std::string::operator=((std::string *)((char *)&v152 + 8), &v144);
    uint64_t v20 = *(void *)(a1 + 568);
    uint64_t v21 = *(void *)(a1 + 560);
    uint64_t v22 = 30 * ((v20 - v21) >> 3) - 1;
    if (v20 == v21) {
      uint64_t v22 = 0;
    }
    if (v22 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v21 = *(void *)(a1 + 560);
      uint64_t v20 = *(void *)(a1 + 568);
    }
    if (v20 == v21)
    {
      uint64_t v24 = 0;
    }
    else
    {
      unint64_t v23 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v24 = *(void *)(v21 + 8 * (v23 / 0x1E)) + 136 * (v23 % 0x1E);
    }
    sub_B5158(v24, (uint64_t)&__dst);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v155) < 0)
    {
      operator delete((void *)__p);
      if ((SHIBYTE(v153) & 0x80000000) == 0)
      {
LABEL_78:
        if ((SBYTE7(v152) & 0x80000000) == 0) {
          goto LABEL_79;
        }
        goto LABEL_86;
      }
    }
    else if ((SHIBYTE(v153) & 0x80000000) == 0)
    {
      goto LABEL_78;
    }
    operator delete(*((void **)&v152 + 1));
    if ((SBYTE7(v152) & 0x80000000) == 0)
    {
LABEL_79:
      if ((v148 & 0x80000000) == 0) {
        goto LABEL_80;
      }
      goto LABEL_87;
    }
LABEL_86:
    operator delete((void *)v151);
    if ((v148 & 0x80000000) == 0)
    {
LABEL_80:
      if ((SHIBYTE(v144.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_81;
      }
      goto LABEL_88;
    }
LABEL_87:
    operator delete((void *)__dst.__r_.__value_.__l.__size_);
    if ((SHIBYTE(v144.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_81:
      if ((SHIBYTE(v143.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_82;
      }
      goto LABEL_89;
    }
LABEL_88:
    operator delete(v144.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v143.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_82:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return 0;
      }
LABEL_90:
      operator delete(__str.__r_.__value_.__l.__data_);
      return 0;
    }
LABEL_89:
    operator delete(v143.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return 0;
    }
    goto LABEL_90;
  }
  uint64_t v11 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v11) {
    uint64_t v11 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v11 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v11;
  std::string::operator=(v6, (const std::string *)(v11 + 8));
  *(void *)(a1 + 136) = *(void *)(v11 + 32);
  std::string::value_type v141 = 0;
  lpsrc = 0;
  if (*(char *)(a1 + 135) < 0)
  {
    sub_4200(&__str, *(void **)(a1 + 112), *(void *)(a1 + 120));
    if (*v5 == 8) {
      goto LABEL_37;
    }
LABEL_59:
    v144.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
    *(_OWORD *)&v144.__r_.__value_.__r.__words[1] = xmmword_20B9270;
    strcpy(v144.__r_.__value_.__l.__data_, "ERR170 - Expected a symbol for variable or vector element definition");
    memset(&v140, 0, sizeof(v140));
    std::string::push_back(&v140, 52);
    std::string::push_back(&v140, 54);
    std::string::push_back(&v140, 56);
    std::string::push_back(&v140, 52);
    std::string::push_back(&v140, 50);
    std::string::size_type v42 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
    if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v43 = &v140;
    }
    else {
      std::string::size_type v43 = (std::string *)v140.__r_.__value_.__r.__words[0];
    }
    if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v42 = v140.__r_.__value_.__l.__size_;
    }
    if (v42)
    {
      uint64_t v44 = (std::string *)((char *)v43 + v42 - 1);
      if (v44 > v43)
      {
        std::string::size_type v45 = &v43->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v46 = *(v45 - 1);
          *(v45 - 1) = v44->__r_.__value_.__s.__data_[0];
          v44->__r_.__value_.__s.__data_[0] = v46;
          uint64_t v44 = (std::string *)((char *)v44 - 1);
          BOOL v17 = v45++ >= (char *)v44;
        }
        while (!v17);
      }
    }
    __darwin_ct_rune_t v47 = std::string::insert(&v140, 0, "exprtk.hpp:");
    long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    v143.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    char v148 = 0;
    __dst.__r_.__value_.__s.__data_[8] = 0;
    uint64_t v149 = -1;
    long long v151 = 0u;
    long long v152 = 0u;
    long long v153 = 0u;
    long long __p = 0u;
    long long v155 = 0u;
    uint64_t v156 = 0;
    int v150 = 1;
    LODWORD(__dst.__r_.__value_.__l.__data_) = *v5;
    std::string::operator=((std::string *)&__dst.__r_.__value_.__r.__words[1], v6);
    uint64_t v149 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v151, &v144);
    std::string::operator=((std::string *)((char *)&v152 + 8), &v143);
    uint64_t v49 = *(void *)(a1 + 568);
    uint64_t v50 = *(void *)(a1 + 560);
    uint64_t v51 = 30 * ((v49 - v50) >> 3) - 1;
    if (v49 == v50) {
      uint64_t v51 = 0;
    }
    if (v51 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v50 = *(void *)(a1 + 560);
      uint64_t v49 = *(void *)(a1 + 568);
    }
    if (v49 == v50)
    {
      uint64_t v53 = 0;
    }
    else
    {
      unint64_t v52 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v53 = *(void *)(v50 + 8 * (v52 / 0x1E)) + 136 * (v52 % 0x1E);
    }
    sub_B5158(v53, (uint64_t)&__dst);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v155) < 0)
    {
      operator delete((void *)__p);
      if ((SHIBYTE(v153) & 0x80000000) == 0)
      {
LABEL_104:
        if ((SBYTE7(v152) & 0x80000000) == 0) {
          goto LABEL_105;
        }
        goto LABEL_112;
      }
    }
    else if ((SHIBYTE(v153) & 0x80000000) == 0)
    {
      goto LABEL_104;
    }
    operator delete(*((void **)&v152 + 1));
    if ((SBYTE7(v152) & 0x80000000) == 0)
    {
LABEL_105:
      if ((v148 & 0x80000000) == 0) {
        goto LABEL_106;
      }
      goto LABEL_113;
    }
LABEL_112:
    operator delete((void *)v151);
    if ((v148 & 0x80000000) == 0)
    {
LABEL_106:
      if ((SHIBYTE(v143.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_107;
      }
      goto LABEL_114;
    }
LABEL_113:
    operator delete((void *)__dst.__r_.__value_.__l.__size_);
    if ((SHIBYTE(v143.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_107:
      if ((SHIBYTE(v140.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_108;
      }
      goto LABEL_115;
    }
LABEL_114:
    operator delete(v143.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v140.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_108:
      if ((SHIBYTE(v144.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_289;
      }
      goto LABEL_116;
    }
LABEL_115:
    operator delete(v140.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v144.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_289;
    }
LABEL_116:
    uint64_t v61 = (void *)v144.__r_.__value_.__r.__words[0];
LABEL_288:
    operator delete(v61);
    goto LABEL_289;
  }
  std::string __str = *v6;
  if (*v5 != 8) {
    goto LABEL_59;
  }
LABEL_37:
  __darwin_ct_rune_t v25 = (_DWORD *)(a1 + 40);
  if (*(void *)(a1 + 8) == *(void *)(a1 + 24)) {
    std::string::size_type v26 = (int *)(a1 + 40);
  }
  else {
    std::string::size_type v26 = *(int **)(a1 + 24);
  }
  int v27 = *v26;
  if (*v26 == 91)
  {
    lpsrc = (void *)sub_1EA0A0(a1);
    if (lpsrc) {
      goto LABEL_186;
    }
    std::operator+<char>();
    uint64_t v28 = std::string::append(&v143, "'");
    long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v144.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    memset(&v139, 0, sizeof(v139));
    std::string::push_back(&v139, 54);
    std::string::push_back(&v139, 55);
    std::string::push_back(&v139, 56);
    std::string::push_back(&v139, 52);
    std::string::push_back(&v139, 50);
    std::string::size_type v30 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
    if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::value_type v31 = &v139;
    }
    else {
      std::string::value_type v31 = (std::string *)v139.__r_.__value_.__r.__words[0];
    }
    if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v30 = v139.__r_.__value_.__l.__size_;
    }
    if (v30)
    {
      long long v32 = (std::string *)((char *)v31 + v30 - 1);
      if (v32 > v31)
      {
        long long v33 = &v31->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v34 = *(v33 - 1);
          *(v33 - 1) = v32->__r_.__value_.__s.__data_[0];
          v32->__r_.__value_.__s.__data_[0] = v34;
          long long v32 = (std::string *)((char *)v32 - 1);
          BOOL v17 = v33++ >= (char *)v32;
        }
        while (!v17);
      }
    }
    uint64_t v35 = std::string::insert(&v139, 0, "exprtk.hpp:");
    long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    v140.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    char v148 = 0;
    __dst.__r_.__value_.__s.__data_[8] = 0;
    uint64_t v149 = -1;
    long long v151 = 0u;
    long long v152 = 0u;
    long long v153 = 0u;
    long long __p = 0u;
    long long v155 = 0u;
    uint64_t v156 = 0;
    int v150 = 1;
    LODWORD(__dst.__r_.__value_.__l.__data_) = *v5;
    std::string::operator=((std::string *)&__dst.__r_.__value_.__r.__words[1], v6);
    uint64_t v149 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v151, &v144);
    std::string::operator=((std::string *)((char *)&v152 + 8), &v140);
    uint64_t v37 = *(void *)(a1 + 568);
    uint64_t v38 = *(void *)(a1 + 560);
    uint64_t v39 = 30 * ((v37 - v38) >> 3) - 1;
    if (v37 == v38) {
      uint64_t v39 = 0;
    }
    if (v39 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v38 = *(void *)(a1 + 560);
      uint64_t v37 = *(void *)(a1 + 568);
    }
    if (v37 == v38)
    {
      uint64_t v41 = 0;
    }
    else
    {
      unint64_t v40 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v41 = *(void *)(v38 + 8 * (v40 / 0x1E)) + 136 * (v40 % 0x1E);
    }
LABEL_271:
    sub_B5158(v41, (uint64_t)&__dst);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v155) < 0)
    {
      operator delete((void *)__p);
      if ((SHIBYTE(v153) & 0x80000000) == 0)
      {
LABEL_273:
        if ((SBYTE7(v152) & 0x80000000) == 0) {
          goto LABEL_274;
        }
        goto LABEL_282;
      }
    }
    else if ((SHIBYTE(v153) & 0x80000000) == 0)
    {
      goto LABEL_273;
    }
    operator delete(*((void **)&v152 + 1));
    if ((SBYTE7(v152) & 0x80000000) == 0)
    {
LABEL_274:
      if ((v148 & 0x80000000) == 0) {
        goto LABEL_275;
      }
      goto LABEL_283;
    }
LABEL_282:
    operator delete((void *)v151);
    if ((v148 & 0x80000000) == 0)
    {
LABEL_275:
      if ((SHIBYTE(v140.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_276;
      }
      goto LABEL_284;
    }
LABEL_283:
    operator delete((void *)__dst.__r_.__value_.__l.__size_);
    if ((SHIBYTE(v140.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_276:
      if ((SHIBYTE(v139.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_277;
      }
      goto LABEL_285;
    }
LABEL_284:
    operator delete(v140.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v139.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_277:
      if ((SHIBYTE(v144.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_278;
      }
      goto LABEL_286;
    }
LABEL_285:
    operator delete(v139.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v144.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_278:
      if ((SHIBYTE(v143.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_289;
      }
      goto LABEL_287;
    }
LABEL_286:
    operator delete(v144.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v143.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_289;
    }
LABEL_287:
    uint64_t v61 = (void *)v143.__r_.__value_.__r.__words[0];
    goto LABEL_288;
  }
  uint64_t v56 = *(void *)(a1 + 440);
  uint64_t v55 = *(void *)(a1 + 448);
  if (v55 == v56) {
    goto LABEL_130;
  }
  uint64_t v57 = 0;
  while (1)
  {
    uint64_t v58 = *(void *)(v56 + 8 * v57);
    if (!v58) {
      goto LABEL_93;
    }
    uint64_t v59 = *(void *)(v58 + 8);
    if (!v59) {
      goto LABEL_93;
    }
    std::string::size_type v60 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v60 = __str.__r_.__value_.__l.__size_;
    }
    if (!v60) {
      goto LABEL_93;
    }
    if ((uint64_t *)(v59 + 8) != sub_ADE40(v59, (uint64_t)&__str)) {
      break;
    }
    uint64_t v56 = *(void *)(a1 + 440);
    uint64_t v55 = *(void *)(a1 + 448);
LABEL_93:
    if (++v57 >= (unint64_t)((v55 - v56) >> 3)) {
      goto LABEL_130;
    }
  }
  uint64_t v62 = *(void *)(a1 + 440);
  if (v62 == *(void *)(a1 + 448)
    || !sub_AD9E4(v62, (uint64_t *)&__str, 1)
    || (uint64_t v63 = *(void *)(a1 + 440), *(void *)(a1 + 448) == v63))
  {
LABEL_128:
    uint64_t v68 = 0;
  }
  else
  {
    unint64_t v64 = 0;
    while (1)
    {
      uint64_t v65 = *(void *)(v63 + 8 * v64);
      if (v65)
      {
        uint64_t v66 = *(void *)(v65 + 8);
        if (v66)
        {
          unint64_t v67 = sub_ADE40(*(void *)(v65 + 8), (uint64_t)&__str);
          if ((uint64_t *)(v66 + 8) != v67)
          {
            uint64_t v68 = (void *)v67[8];
            if (v68) {
              break;
            }
          }
        }
      }
      ++v64;
      uint64_t v63 = *(void *)(a1 + 440);
      if (v64 >= (*(void *)(a1 + 448) - v63) >> 3) {
        goto LABEL_128;
      }
    }
  }
  lpsrc = v68;
LABEL_130:
  int v137 = v27;
  uint64_t v69 = *(void *)(a1 + 880);
  if (*(void *)(a1 + 888) != v69)
  {
    unint64_t v70 = 0;
    unint64_t v71 = *(void *)(*(void *)(a1 + 872) + 656);
    do
    {
      long long v72 = (unsigned __int8 *)(v69 + 96 * v70);
      if (*((void *)v72 + 5) <= v71)
      {
        BOOL v73 = (v72[23] & 0x80u) != 0;
        uint64_t v74 = v72[23];
        if ((v74 & 0x80u) != 0) {
          uint64_t v74 = *((void *)v72 + 1);
        }
        std::string::size_type v75 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v75 = __str.__r_.__value_.__l.__size_;
        }
        if (v74 == v75)
        {
          if (v74)
          {
            unint64_t v76 = 0;
            while (1)
            {
              uint64_t v77 = v73 ? *(void *)v72 : v69 + 96 * v70;
              __darwin_ct_rune_t v78 = __tolower(*(char *)(v77 + v76));
              uint64_t v79 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                  ? &__str
                  : (std::string *)__str.__r_.__value_.__r.__words[0];
              if (v78 != __tolower(v79->__r_.__value_.__s.__data_[v76])) {
                break;
              }
              ++v76;
              BOOL v73 = (v72[23] & 0x80u) != 0;
              unint64_t v80 = v72[23];
              if ((v80 & 0x80u) != 0) {
                unint64_t v80 = *((void *)v72 + 1);
              }
              if (v76 >= v80) {
                goto LABEL_132;
              }
            }
          }
          else
          {
LABEL_132:
            if (*(void *)(v69 + 96 * v70 + 32) == -1) {
              goto LABEL_154;
            }
          }
        }
      }
      ++v70;
      uint64_t v69 = *(void *)(a1 + 880);
    }
    while (v70 < 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 888) - v69) >> 5));
  }
  long long v72 = (unsigned __int8 *)(a1 + 904);
LABEL_154:
  __darwin_ct_rune_t v25 = (_DWORD *)(a1 + 40);
  if (v72[68])
  {
    uint64_t v81 = v72[23];
    if ((v81 & 0x80u) == 0) {
      uint64_t v82 = v72[23];
    }
    else {
      uint64_t v82 = *((void *)v72 + 1);
    }
    std::string::size_type v83 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v83 = __str.__r_.__value_.__l.__size_;
    }
    if (v82 == v83)
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_str = &__str;
      }
      else {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      if ((v81 & 0x80) != 0)
      {
        BOOL v86 = memcmp(*(const void **)v72, p_str, *((void *)v72 + 1)) == 0;
      }
      else
      {
        if (v72[23])
        {
          uint64_t v85 = v72;
          while (*v85 == p_str->__r_.__value_.__s.__data_[0])
          {
            ++v85;
            p_str = (std::string *)((char *)p_str + 1);
            if (!--v81) {
              goto LABEL_169;
            }
          }
          goto LABEL_174;
        }
LABEL_169:
        BOOL v86 = 1;
      }
      if (v86 && *((_DWORD *)v72 + 16) == 1) {
        lpsrc = (void *)*((void *)v72 + 10);
      }
    }
  }
LABEL_174:
  int v27 = v137;
  if (*(unsigned char *)(a1 + 472))
  {
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      sub_4200(&__dst, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
    }
    else {
      std::string __dst = __str;
    }
    int v147 = 1;
    unint64_t v87 = *(void *)(a1 + 488);
    if (v87 >= *(void *)(a1 + 496))
    {
      uint64_t v89 = sub_D2F30((void **)(a1 + 480), (uint64_t)&__dst);
      int v90 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
      *(void *)(a1 + 488) = v89;
      if (v90 < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v88 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
      *(void *)(v87 + 16) = *((void *)&__dst.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v87 = v88;
      *(_DWORD *)(v87 + 24) = v147;
      *(void *)(a1 + 488) = v87 + 32;
    }
  }
  if (!lpsrc)
  {
    std::operator+<char>();
    std::string v107 = std::string::append(&v143, "'");
    long long v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
    v144.__r_.__value_.__r.__words[2] = v107->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v108;
    v107->__r_.__value_.__l.__size_ = 0;
    v107->__r_.__value_.__r.__words[2] = 0;
    v107->__r_.__value_.__r.__words[0] = 0;
    memset(&v139, 0, sizeof(v139));
    std::string::push_back(&v139, 57);
    std::string::push_back(&v139, 48);
    std::string::push_back(&v139, 57);
    std::string::push_back(&v139, 52);
    std::string::push_back(&v139, 50);
    std::string::size_type v109 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
    if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v110 = &v139;
    }
    else {
      std::string v110 = (std::string *)v139.__r_.__value_.__r.__words[0];
    }
    if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v109 = v139.__r_.__value_.__l.__size_;
    }
    if (v109)
    {
      std::string::size_type v111 = (std::string *)((char *)v110 + v109 - 1);
      if (v111 > v110)
      {
        std::string::size_type v112 = &v110->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v113 = *(v112 - 1);
          *(v112 - 1) = v111->__r_.__value_.__s.__data_[0];
          v111->__r_.__value_.__s.__data_[0] = v113;
          std::string::size_type v111 = (std::string *)((char *)v111 - 1);
          BOOL v17 = v112++ >= (char *)v111;
        }
        while (!v17);
      }
    }
    uint64_t v114 = std::string::insert(&v139, 0, "exprtk.hpp:");
    long long v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
    v140.__r_.__value_.__r.__words[2] = v114->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v115;
    v114->__r_.__value_.__l.__size_ = 0;
    v114->__r_.__value_.__r.__words[2] = 0;
    v114->__r_.__value_.__r.__words[0] = 0;
    char v148 = 0;
    __dst.__r_.__value_.__s.__data_[8] = 0;
    uint64_t v149 = -1;
    long long v151 = 0u;
    long long v152 = 0u;
    long long v153 = 0u;
    long long __p = 0u;
    long long v155 = 0u;
    uint64_t v156 = 0;
    int v150 = 1;
    LODWORD(__dst.__r_.__value_.__l.__data_) = *v5;
    std::string::operator=((std::string *)&__dst.__r_.__value_.__r.__words[1], v6);
    uint64_t v149 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v151, &v144);
    std::string::operator=((std::string *)((char *)&v152 + 8), &v140);
    uint64_t v116 = *(void *)(a1 + 568);
    uint64_t v117 = *(void *)(a1 + 560);
    uint64_t v118 = 30 * ((v116 - v117) >> 3) - 1;
    if (v116 == v117) {
      uint64_t v118 = 0;
    }
    if (v118 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v117 = *(void *)(a1 + 560);
      uint64_t v116 = *(void *)(a1 + 568);
    }
    if (v116 == v117)
    {
      uint64_t v41 = 0;
    }
    else
    {
      unint64_t v119 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v41 = *(void *)(v117 + 8 * (v119 / 0x1E)) + 136 * (v119 % 0x1E);
    }
    goto LABEL_271;
  }
  uint64_t v91 = *(void *)(a1 + 24);
  uint64_t v92 = a1 + 40;
  if (*(void *)(a1 + 8) != v91)
  {
    *(void *)(a1 + 24) = v91 + 40;
    uint64_t v92 = v91;
  }
  *unsigned int v5 = *(_DWORD *)v92;
  std::string::operator=(v6, (const std::string *)(v92 + 8));
  *(void *)(a1 + 136) = *(void *)(v92 + 32);
LABEL_186:
  if (*v5 != 44)
  {
    v144.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
    *(_OWORD *)&v144.__r_.__value_.__r.__words[1] = xmmword_20B9A60;
    strcpy(v144.__r_.__value_.__l.__data_, "ERR173 - Expected ',' between parameters to swap");
    memset(&v140, 0, sizeof(v140));
    std::string::push_back(&v140, 51);
    std::string::push_back(&v140, 50);
    std::string::push_back(&v140, 57);
    std::string::push_back(&v140, 52);
    std::string::push_back(&v140, 50);
    std::string::size_type v95 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
    if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      __darwin_ct_rune_t v96 = &v140;
    }
    else {
      __darwin_ct_rune_t v96 = (std::string *)v140.__r_.__value_.__r.__words[0];
    }
    if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v95 = v140.__r_.__value_.__l.__size_;
    }
    if (v95)
    {
      long long v97 = (std::string *)((char *)v96 + v95 - 1);
      if (v97 > v96)
      {
        __darwin_ct_rune_t v98 = &v96->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v99 = *(v98 - 1);
          *(v98 - 1) = v97->__r_.__value_.__s.__data_[0];
          v97->__r_.__value_.__s.__data_[0] = v99;
          long long v97 = (std::string *)((char *)v97 - 1);
          BOOL v17 = v98++ >= (char *)v97;
        }
        while (!v17);
      }
    }
    __darwin_ct_rune_t v100 = std::string::insert(&v140, 0, "exprtk.hpp:");
    long long v101 = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
    v143.__r_.__value_.__r.__words[2] = v100->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v101;
    v100->__r_.__value_.__l.__size_ = 0;
    v100->__r_.__value_.__r.__words[2] = 0;
    v100->__r_.__value_.__r.__words[0] = 0;
    char v148 = 0;
    __dst.__r_.__value_.__s.__data_[8] = 0;
    uint64_t v149 = -1;
    long long v151 = 0u;
    long long v152 = 0u;
    long long v153 = 0u;
    long long __p = 0u;
    long long v155 = 0u;
    uint64_t v156 = 0;
    int v150 = 1;
    LODWORD(__dst.__r_.__value_.__l.__data_) = *v5;
    std::string::operator=((std::string *)&__dst.__r_.__value_.__r.__words[1], v6);
    uint64_t v149 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v151, &v144);
    std::string::operator=((std::string *)((char *)&v152 + 8), &v143);
    uint64_t v102 = *(void *)(a1 + 568);
    uint64_t v103 = *(void *)(a1 + 560);
    uint64_t v104 = 30 * ((v102 - v103) >> 3) - 1;
    if (v102 == v103) {
      uint64_t v104 = 0;
    }
    if (v104 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v103 = *(void *)(a1 + 560);
      uint64_t v102 = *(void *)(a1 + 568);
    }
    if (v102 == v103)
    {
      uint64_t v106 = 0;
    }
    else
    {
      unint64_t v105 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v106 = *(void *)(v103 + 8 * (v105 / 0x1E)) + 136 * (v105 % 0x1E);
    }
    sub_B5158(v106, (uint64_t)&__dst);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v155) < 0)
    {
      operator delete((void *)__p);
      if ((SHIBYTE(v153) & 0x80000000) == 0)
      {
LABEL_242:
        if ((SBYTE7(v152) & 0x80000000) == 0) {
          goto LABEL_243;
        }
        goto LABEL_251;
      }
    }
    else if ((SHIBYTE(v153) & 0x80000000) == 0)
    {
      goto LABEL_242;
    }
    operator delete(*((void **)&v152 + 1));
    if ((SBYTE7(v152) & 0x80000000) == 0)
    {
LABEL_243:
      if ((v148 & 0x80000000) == 0) {
        goto LABEL_244;
      }
      goto LABEL_252;
    }
LABEL_251:
    operator delete((void *)v151);
    if ((v148 & 0x80000000) == 0)
    {
LABEL_244:
      if ((SHIBYTE(v143.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_245;
      }
      goto LABEL_253;
    }
LABEL_252:
    operator delete((void *)__dst.__r_.__value_.__l.__size_);
    if ((SHIBYTE(v143.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_245:
      if ((SHIBYTE(v140.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_246;
      }
      goto LABEL_254;
    }
LABEL_253:
    operator delete(v143.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v140.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_246:
      if ((SHIBYTE(v144.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_247;
      }
      goto LABEL_255;
    }
LABEL_254:
    operator delete(v140.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v144.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_247:
      if (v27 != 91) {
        goto LABEL_289;
      }
      goto LABEL_256;
    }
LABEL_255:
    operator delete(v144.__r_.__value_.__l.__data_);
    if (v27 != 91) {
      goto LABEL_289;
    }
LABEL_256:
    sub_BBE90(a1 + 432, (uint64_t *)&lpsrc, 0);
    goto LABEL_289;
  }
  long long v93 = *(_DWORD **)(a1 + 24);
  uint64_t v94 = v25;
  if (*(_DWORD **)(a1 + 8) != v93)
  {
    *(void *)(a1 + 24) = v93 + 10;
    uint64_t v94 = v93;
  }
  *unsigned int v5 = *v94;
  std::string::operator=(v6, (const std::string *)(v94 + 2));
  *(void *)(a1 + 136) = *((void *)v94 + 4);
  if (*(char *)(a1 + 135) < 0) {
    sub_4200(&v144, *(void **)(a1 + 112), *(void *)(a1 + 120));
  }
  else {
    std::string v144 = *v6;
  }
  if (*v5 != 8)
  {
    sub_5E5C(&v143, "ERR174 - Expected a symbol for variable or vector element definition");
    sub_B1D70(0x616Du, (unint64_t)&v139);
    uint64_t v126 = std::string::insert(&v139, 0, "exprtk.hpp:");
    long long v127 = *(_OWORD *)&v126->__r_.__value_.__l.__data_;
    v140.__r_.__value_.__r.__words[2] = v126->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v127;
    v126->__r_.__value_.__l.__size_ = 0;
    v126->__r_.__value_.__r.__words[2] = 0;
    v126->__r_.__value_.__r.__words[0] = 0;
    sub_B49F0(1, (uint64_t)v5, &v143, &v140, (uint64_t)&__dst);
    sub_B1CB0((void *)a1, (uint64_t)&__dst);
    sub_B1ED4((uint64_t)&__dst);
    if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v140.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v139.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_237:
        if ((SHIBYTE(v143.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_293;
        }
        goto LABEL_295;
      }
    }
    else if ((SHIBYTE(v139.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_237;
    }
    operator delete(v139.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v143.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_293;
    }
LABEL_295:
    operator delete(v143.__r_.__value_.__l.__data_);
    if (v27 == 91) {
      goto LABEL_296;
    }
    goto LABEL_316;
  }
  if (*(void *)(a1 + 8) == *(void *)(a1 + 24)) {
    long long v120 = v25;
  }
  else {
    long long v120 = *(int **)(a1 + 24);
  }
  int v121 = *v120;
  if (*v120 != 91)
  {
    if (sub_1C344C((uint64_t *)(a1 + 440), (uint64_t)&v144)) {
      std::string::value_type v141 = (void *)sub_1EB408((uint64_t *)(a1 + 440), (uint64_t *)&v144);
    }
    uint64_t v128 = (unsigned __int8 *)sub_1C32F0((void *)(a1 + 872), (uint64_t)&v144, -1);
    uint64_t v129 = v128;
    if (v128[68] && sub_A938C(v128, (unsigned __int8 *)&v144) && *((_DWORD *)v129 + 16) == 1) {
      std::string::value_type v141 = (void *)*((void *)v129 + 10);
    }
    sub_D2DB0(a1 + 464, (uint64_t)&v144, 1u);
    if (v141)
    {
      sub_B3BF8(a1);
LABEL_265:
      LODWORD(__dst.__r_.__value_.__l.__data_) = 41;
      if (sub_BA4D0(a1, (int *)&__dst, 1))
      {
        if (lpsrc
        {
          operator new();
        }
        sub_11AF68();
      }
      sub_5E5C(&v143, "ERR177 - Expected ')' at end of swap statement");
      sub_B1D70(0x61B7u, (unint64_t)&v139);
      uint64_t v131 = std::string::insert(&v139, 0, "exprtk.hpp:");
      long long v132 = *(_OWORD *)&v131->__r_.__value_.__l.__data_;
      v140.__r_.__value_.__r.__words[2] = v131->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v132;
      v131->__r_.__value_.__l.__size_ = 0;
      v131->__r_.__value_.__r.__words[2] = 0;
      v131->__r_.__value_.__r.__words[0] = 0;
      sub_B49F0(1, (uint64_t)v5, &v143, &v140, (uint64_t)&__dst);
      sub_B1CB0((void *)a1, (uint64_t)&__dst);
      sub_B1ED4((uint64_t)&__dst);
      if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v140.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v139.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_299:
          if ((SHIBYTE(v143.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_300;
          }
          goto LABEL_311;
        }
      }
      else if ((SHIBYTE(v139.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_299;
      }
      operator delete(v139.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v143.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_300:
        if (v27 != 91) {
          goto LABEL_313;
        }
        goto LABEL_312;
      }
LABEL_311:
      operator delete(v143.__r_.__value_.__l.__data_);
      if (v27 != 91)
      {
LABEL_313:
        if (v121 != 91) {
          goto LABEL_316;
        }
        p_lpsrc = (uint64_t *)&v141;
        goto LABEL_315;
      }
LABEL_312:
      sub_BBE90(a1 + 432, (uint64_t *)&lpsrc, 0);
      goto LABEL_313;
    }
    std::operator+<char>();
    uint64_t v133 = std::string::append(&v140, "'");
    long long v134 = *(_OWORD *)&v133->__r_.__value_.__l.__data_;
    v143.__r_.__value_.__r.__words[2] = v133->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v134;
    v133->__r_.__value_.__l.__size_ = 0;
    v133->__r_.__value_.__r.__words[2] = 0;
    v133->__r_.__value_.__r.__words[0] = 0;
    sub_B1D70(0x61A4u, (unint64_t)&v138);
    uint64_t v135 = std::string::insert(&v138, 0, "exprtk.hpp:");
    long long v136 = *(_OWORD *)&v135->__r_.__value_.__l.__data_;
    v139.__r_.__value_.__r.__words[2] = v135->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v136;
    v135->__r_.__value_.__l.__size_ = 0;
    v135->__r_.__value_.__r.__words[2] = 0;
    v135->__r_.__value_.__r.__words[0] = 0;
    sub_B49F0(1, (uint64_t)v5, &v143, &v139, (uint64_t)&__dst);
    sub_B1CB0((void *)a1, (uint64_t)&__dst);
    sub_B1ED4((uint64_t)&__dst);
    if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v139.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v138.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_305:
        if ((SHIBYTE(v143.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_306;
        }
        goto LABEL_325;
      }
    }
    else if ((SHIBYTE(v138.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_305;
    }
    operator delete(v138.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v143.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_306:
      if ((SHIBYTE(v140.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_307;
      }
      goto LABEL_326;
    }
LABEL_325:
    operator delete(v143.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v140.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_307:
      if (v27 != 91) {
        goto LABEL_316;
      }
LABEL_327:
      sub_BBE90(a1 + 432, (uint64_t *)&lpsrc, 0);
      goto LABEL_316;
    }
LABEL_326:
    operator delete(v140.__r_.__value_.__l.__data_);
    if (v27 != 91) {
      goto LABEL_316;
    }
    goto LABEL_327;
  }
  std::string::value_type v141 = (void *)sub_1EA0A0(a1);
  if (v141) {
    goto LABEL_265;
  }
  std::operator+<char>();
  uint64_t v122 = std::string::append(&v140, "'");
  long long v123 = *(_OWORD *)&v122->__r_.__value_.__l.__data_;
  v143.__r_.__value_.__r.__words[2] = v122->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v123;
  v122->__r_.__value_.__l.__size_ = 0;
  v122->__r_.__value_.__r.__words[2] = 0;
  v122->__r_.__value_.__r.__words[0] = 0;
  sub_B1D70(0x617Eu, (unint64_t)&v138);
  uint64_t v124 = std::string::insert(&v138, 0, "exprtk.hpp:");
  long long v125 = *(_OWORD *)&v124->__r_.__value_.__l.__data_;
  v139.__r_.__value_.__r.__words[2] = v124->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v125;
  v124->__r_.__value_.__l.__size_ = 0;
  v124->__r_.__value_.__r.__words[2] = 0;
  v124->__r_.__value_.__r.__words[0] = 0;
  sub_B49F0(1, (uint64_t)v5, &v143, &v139, (uint64_t)&__dst);
  sub_B1CB0((void *)a1, (uint64_t)&__dst);
  sub_B1ED4((uint64_t)&__dst);
  if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v139.__r_.__value_.__l.__data_);
    if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_319;
    }
LABEL_232:
    if ((SHIBYTE(v143.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_233;
    }
LABEL_320:
    operator delete(v143.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v140.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_293;
    }
LABEL_321:
    operator delete(v140.__r_.__value_.__l.__data_);
    if (v27 != 91) {
      goto LABEL_316;
    }
LABEL_296:
    p_lpsrc = (uint64_t *)&lpsrc;
LABEL_315:
    sub_BBE90(a1 + 432, p_lpsrc, 0);
    goto LABEL_316;
  }
  if ((SHIBYTE(v138.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_232;
  }
LABEL_319:
  operator delete(v138.__r_.__value_.__l.__data_);
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_320;
  }
LABEL_233:
  if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_321;
  }
LABEL_293:
  if (v27 == 91) {
    goto LABEL_296;
  }
LABEL_316:
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v144.__r_.__value_.__l.__data_);
  }
LABEL_289:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_CD7C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if ((a17 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a17 & 0x80000000) == 0)
  {
LABEL_3:
    if ((a39 & 0x80000000) == 0)
    {
LABEL_8:
      if (a30 < 0) {
        operator delete(a25);
      }
      if (a46 < 0) {
        operator delete(a41);
      }
      if (a53 < 0) {
        operator delete(a48);
      }
      _Unwind_Resume(a1);
    }
LABEL_7:
    operator delete(a34);
    goto LABEL_8;
  }
  operator delete(a12);
  if ((a39 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

uint64_t sub_CDAE8(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 0;
  }
  unint64_t v3 = (v2 - v1) >> 3;
  if (v3 <= 1) {
    unint64_t v3 = 1;
  }
  while (!*(void *)v1 || !*(void *)(*(void *)v1 + 8))
  {
    v1 += 8;
    if (!--v3) {
      return 0;
    }
  }
  return 1;
}

uint64_t sub_CDB34(uint64_t a1)
{
  uint64_t v2 = (std::string *)(a1 + 112);
  if ((*(char *)(a1 + 135) & 0x80000000) == 0)
  {
    long long __dst = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    uint64_t v160 = *(void *)(a1 + 128);
    unint64_t v3 = (_DWORD *)(a1 + 104);
    uint64_t v4 = *(void *)(a1 + 440);
    if (v4 == *(void *)(a1 + 448)) {
      goto LABEL_18;
    }
LABEL_5:
    if (sub_AD9E4(v4, (uint64_t *)&__dst, 1))
    {
      uint64_t v5 = *(void *)(a1 + 440);
      uint64_t v6 = *(void *)(a1 + 448);
      if (v6 != v5)
      {
        unint64_t v7 = 0;
        do
        {
          uint64_t v8 = *(void *)(v5 + 8 * v7);
          if (v8)
          {
            uint64_t v9 = *(void *)(v8 + 8);
            if (v9)
            {
              uint64_t v10 = sub_ADE40(*(void *)(v8 + 8), (uint64_t)&__dst);
              if ((uint64_t *)(v9 + 8) == v10)
              {
                uint64_t v5 = *(void *)(a1 + 440);
                uint64_t v6 = *(void *)(a1 + 448);
              }
              else
              {
                uint64_t v11 = v10[8];
                uint64_t v5 = *(void *)(a1 + 440);
                uint64_t v6 = *(void *)(a1 + 448);
                if (v11)
                {
                  if (v5 != v6 && sub_AD9E4(v5, (uint64_t *)&__dst, 1))
                  {
                    uint64_t v12 = *(void *)(a1 + 440);
                    if (*(void *)(a1 + 448) != v12)
                    {
                      unint64_t v13 = 0;
                      do
                      {
                        uint64_t v44 = *(void *)(v12 + 8 * v13);
                        if (v44)
                        {
                          uint64_t v45 = *(void *)(v44 + 8);
                          if (v45)
                          {
                            uint64_t v46 = HIBYTE(v160);
                            if (v160 < 0) {
                              uint64_t v46 = *((void *)&__dst + 1);
                            }
                            if (v46)
                            {
                              __darwin_ct_rune_t v47 = sub_ADE40(v45, (uint64_t)&__dst);
                              if ((uint64_t *)(v45 + 8) != v47)
                              {
                                if (*((unsigned char *)v47 + 56))
                                {
                                  (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
                                  operator new();
                                }
                              }
                            }
                          }
                        }
                        ++v13;
                        uint64_t v12 = *(void *)(a1 + 440);
                      }
                      while (v13 < (*(void *)(a1 + 448) - v12) >> 3);
                    }
                  }
                  if (!sub_1ECDF0(a1)) {
                    goto LABEL_164;
                  }
                  if (*(unsigned char *)(a1 + 472))
                  {
                    if (SHIBYTE(v160) < 0)
                    {
                      sub_4200(&__p, (void *)__dst, *((unint64_t *)&__dst + 1));
                    }
                    else
                    {
                      long long __p = __dst;
                      uint64_t v148 = v160;
                    }
                    int v149 = 1;
                    unint64_t v108 = *(void *)(a1 + 488);
                    if (v108 >= *(void *)(a1 + 496))
                    {
                      std::string v110 = sub_D2F30((void **)(a1 + 480), (uint64_t)&__p);
                      int v111 = SHIBYTE(v148);
                      *(void *)(a1 + 488) = v110;
                      if (v111 < 0) {
                        operator delete((void *)__p);
                      }
                    }
                    else
                    {
                      long long v109 = __p;
                      *(void *)(v108 + 16) = v148;
                      *(_OWORD *)unint64_t v108 = v109;
                      *(_DWORD *)(v108 + 24) = v149;
                      *(void *)(a1 + 488) = v108 + 32;
                    }
                  }
                  uint64_t v112 = *(void *)(a1 + 24);
                  if (*(void *)(a1 + 8) == v112) {
                    uint64_t v112 = a1 + 40;
                  }
                  else {
                    *(void *)(a1 + 24) = v112 + 40;
                  }
                  _DWORD *v3 = *(_DWORD *)v112;
                  std::string::operator=(v2, (const std::string *)(v112 + 8));
                  *(void *)(a1 + 136) = *(void *)(v112 + 32);
                  goto LABEL_165;
                }
              }
            }
          }
          ++v7;
        }
        while (v7 < (v6 - v5) >> 3);
      }
    }
    goto LABEL_18;
  }
  sub_4200(&__dst, *(void **)(a1 + 112), *(void *)(a1 + 120));
  unint64_t v3 = (_DWORD *)(a1 + 104);
  uint64_t v4 = *(void *)(a1 + 440);
  if (v4 != *(void *)(a1 + 448)) {
    goto LABEL_5;
  }
LABEL_18:
  uint64_t v14 = *(void *)(a1 + 880);
  uint64_t v15 = *(void *)(a1 + 888);
  if (v14 == v15) {
    goto LABEL_72;
  }
  long long v134 = v2;
  uint64_t v135 = v3;
  unint64_t v16 = 0;
  unint64_t v17 = *(void *)(*(void *)(a1 + 872) + 656);
  do
  {
    uint64_t v18 = v14 + 96 * v16;
    if (*(void *)(v18 + 40) <= v17)
    {
      BOOL v19 = *(char *)(v18 + 23) < 0;
      uint64_t v20 = *(unsigned __int8 *)(v18 + 23);
      if ((v20 & 0x80u) != 0) {
        uint64_t v20 = *(void *)(v18 + 8);
      }
      uint64_t v21 = HIBYTE(v160);
      if (v160 < 0) {
        uint64_t v21 = *((void *)&__dst + 1);
      }
      if (v20 == v21)
      {
        if (!v20) {
          goto LABEL_43;
        }
        unint64_t v22 = 0;
        while (1)
        {
          uint64_t v23 = v19 ? *(void *)v18 : v14 + 96 * v16;
          __darwin_ct_rune_t v24 = __tolower(*(char *)(v23 + v22));
          __darwin_ct_rune_t v25 = v160 >= 0 ? &__dst : (long long *)__dst;
          __darwin_ct_rune_t v26 = __tolower(*((char *)v25 + v22));
          BOOL v27 = v24 != v26;
          if (v24 != v26) {
            break;
          }
          ++v22;
          BOOL v19 = *(char *)(v18 + 23) < 0;
          unint64_t v28 = *(unsigned __int8 *)(v18 + 23);
          if ((v28 & 0x80u) != 0) {
            unint64_t v28 = *(void *)(v18 + 8);
          }
          if (v22 >= v28) {
            goto LABEL_43;
          }
        }
      }
      else
      {
        BOOL v27 = 1;
      }
      if (v27)
      {
LABEL_20:
        uint64_t v15 = *(void *)(a1 + 888);
        uint64_t v14 = *(void *)(a1 + 880);
        goto LABEL_21;
      }
LABEL_43:
      uint64_t v29 = v14 + 96 * v16;
      uint64_t v30 = *(void *)(v29 + 32);
      int v31 = *(unsigned __int8 *)(v29 + 68);
      if (v30 == -1 && v31 != 0)
      {
        uint64_t v2 = v134;
        unint64_t v3 = v135;
        if (!*(unsigned char *)(v18 + 68)) {
          goto LABEL_72;
        }
        goto LABEL_50;
      }
      goto LABEL_20;
    }
LABEL_21:
    ++v16;
  }
  while (v16 < 0xAAAAAAAAAAAAAAABLL * ((v15 - v14) >> 5));
  uint64_t v18 = a1 + 904;
  uint64_t v2 = v134;
  unint64_t v3 = v135;
  if (!*(unsigned char *)(a1 + 972)) {
    goto LABEL_72;
  }
LABEL_50:
  BOOL v33 = *(char *)(v18 + 23) < 0;
  uint64_t v34 = *(unsigned __int8 *)(v18 + 23);
  if ((v34 & 0x80u) != 0) {
    uint64_t v34 = *(void *)(v18 + 8);
  }
  uint64_t v35 = HIBYTE(v160);
  if (v160 < 0) {
    uint64_t v35 = *((void *)&__dst + 1);
  }
  if (v34 == v35)
  {
    if (v34)
    {
      unint64_t v36 = 0;
      do
      {
        uint64_t v37 = v33 ? *(void *)v18 : v18;
        __darwin_ct_rune_t v38 = __tolower(*(char *)(v37 + v36));
        uint64_t v39 = v160 >= 0 ? &__dst : (long long *)__dst;
        if (v38 != __tolower(*((char *)v39 + v36))) {
          goto LABEL_72;
        }
        ++v36;
        BOOL v33 = *(char *)(v18 + 23) < 0;
        unint64_t v40 = *(unsigned __int8 *)(v18 + 23);
        if ((v40 & 0x80u) != 0) {
          unint64_t v40 = *(void *)(v18 + 8);
        }
      }
      while (v36 < v40);
    }
    int v41 = *(_DWORD *)(v18 + 64);
    if (v41 != 2)
    {
      if (v41 != 1) {
        goto LABEL_72;
      }
      *(unsigned char *)(v18 + 68) = 1;
      if (*(unsigned char *)(a1 + 472))
      {
        if (SHIBYTE(v160) < 0)
        {
          sub_4200(&__p, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          long long __p = __dst;
          uint64_t v148 = v160;
        }
        int v149 = 6;
        unint64_t v100 = *(void *)(a1 + 488);
        if (v100 >= *(void *)(a1 + 496))
        {
          uint64_t v102 = sub_D2F30((void **)(a1 + 480), (uint64_t)&__p);
          int v103 = SHIBYTE(v148);
          *(void *)(a1 + 488) = v102;
          if (v103 < 0) {
            operator delete((void *)__p);
          }
        }
        else
        {
          long long v101 = __p;
          *(void *)(v100 + 16) = v148;
          *(_OWORD *)unint64_t v100 = v101;
          *(_DWORD *)(v100 + 24) = v149;
          *(void *)(a1 + 488) = v100 + 32;
        }
      }
      if (sub_1ECDF0(a1))
      {
        sub_B3BF8(a1);
        uint64_t v11 = *(void *)(v18 + 80);
        goto LABEL_165;
      }
LABEL_164:
      uint64_t v11 = 0;
      goto LABEL_165;
    }
    uint64_t v85 = sub_1EA0A0(a1);
LABEL_145:
    uint64_t v11 = v85;
    goto LABEL_165;
  }
LABEL_72:
  uint64_t v42 = sub_1ED29C((uint64_t *)(a1 + 440), (uint64_t)&__dst);
  if (!v42)
  {
    uint64_t v43 = sub_1EDC38((uint64_t *)(a1 + 440), (uint64_t)&__dst);
    if (v43)
    {
      if (*(unsigned char *)(a1 + 473))
      {
        if (SHIBYTE(v160) < 0)
        {
          sub_4200(&__p, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          long long __p = __dst;
          uint64_t v148 = v160;
        }
        int v149 = 5;
        unint64_t v68 = *(void *)(a1 + 488);
        if (v68 >= *(void *)(a1 + 496))
        {
          unint64_t v70 = sub_D2F30((void **)(a1 + 480), (uint64_t)&__p);
          int v71 = SHIBYTE(v148);
          *(void *)(a1 + 488) = v70;
          if (v71 < 0) {
            operator delete((void *)__p);
          }
        }
        else
        {
          long long v69 = __p;
          *(void *)(v68 + 16) = v148;
          *(_OWORD *)unint64_t v68 = v69;
          *(_DWORD *)(v68 + 24) = v149;
          *(void *)(a1 + 488) = v68 + 32;
        }
      }
      uint64_t v11 = sub_1EDDAC(a1, v43);
      if (v11) {
        goto LABEL_165;
      }
      std::operator+<char>();
      long long v72 = std::string::append(&v145, "'");
      long long v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v73;
      v72->__r_.__value_.__l.__size_ = 0;
      v72->__r_.__value_.__r.__words[2] = 0;
      v72->__r_.__value_.__r.__words[0] = 0;
      memset(&v143, 0, sizeof(v143));
      std::string::push_back(&v143, 48);
      std::string::push_back(&v143, 55);
      std::string::push_back(&v143, 51);
      std::string::push_back(&v143, 53);
      std::string::push_back(&v143, 50);
      std::string::size_type size = HIBYTE(v143.__r_.__value_.__r.__words[2]);
      if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v75 = &v143;
      }
      else {
        std::string::size_type v75 = (std::string *)v143.__r_.__value_.__r.__words[0];
      }
      if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v143.__r_.__value_.__l.__size_;
      }
      if (size)
      {
        unint64_t v76 = (std::string *)((char *)v75 + size - 1);
        if (v76 > v75)
        {
          uint64_t v77 = &v75->__r_.__value_.__s.__data_[1];
          do
          {
            std::string::value_type v78 = *(v77 - 1);
            *(v77 - 1) = v76->__r_.__value_.__s.__data_[0];
            v76->__r_.__value_.__s.__data_[0] = v78;
            unint64_t v76 = (std::string *)((char *)v76 - 1);
            BOOL v59 = v77++ >= (char *)v76;
          }
          while (!v59);
        }
      }
      uint64_t v79 = std::string::insert(&v143, 0, "exprtk.hpp:");
      long long v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
      v144.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v80;
      v79->__r_.__value_.__l.__size_ = 0;
      v79->__r_.__value_.__r.__words[2] = 0;
      v79->__r_.__value_.__r.__words[0] = 0;
      char v150 = 0;
      BYTE8(__p) = 0;
      uint64_t v151 = -1;
      long long v153 = 0u;
      long long v154 = 0u;
      long long v155 = 0u;
      long long v156 = 0u;
      long long v157 = 0u;
      uint64_t v158 = 0;
      int v152 = 1;
      LODWORD(__p) = *v3;
      std::string::operator=((std::string *)((char *)&__p + 8), v2);
      uint64_t v151 = *(void *)(a1 + 136);
      std::string::operator=((std::string *)&v153, &__str);
      std::string::operator=((std::string *)((char *)&v154 + 8), &v144);
      uint64_t v81 = *(void *)(a1 + 568);
      uint64_t v82 = *(void *)(a1 + 560);
      uint64_t v83 = 30 * ((v81 - v82) >> 3) - 1;
      if (v81 == v82) {
        uint64_t v83 = 0;
      }
      if (v83 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
      {
        sub_B4B88(a1 + 552);
        uint64_t v82 = *(void *)(a1 + 560);
        uint64_t v81 = *(void *)(a1 + 568);
      }
      if (v81 == v82)
      {
        uint64_t v66 = 0;
      }
      else
      {
        unint64_t v84 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
        uint64_t v66 = *(void *)(v82 + 8 * (v84 / 0x1E)) + 136 * (v84 % 0x1E);
      }
LABEL_147:
      sub_B5158(v66, (uint64_t)&__p);
      ++*(void *)(a1 + 592);
      if (SBYTE7(v157) < 0)
      {
        operator delete((void *)v156);
        if ((SHIBYTE(v155) & 0x80000000) == 0)
        {
LABEL_149:
          if ((SBYTE7(v154) & 0x80000000) == 0) {
            goto LABEL_150;
          }
          goto LABEL_158;
        }
      }
      else if ((SHIBYTE(v155) & 0x80000000) == 0)
      {
        goto LABEL_149;
      }
      operator delete(*((void **)&v154 + 1));
      if ((SBYTE7(v154) & 0x80000000) == 0)
      {
LABEL_150:
        if ((v150 & 0x80000000) == 0) {
          goto LABEL_151;
        }
LABEL_159:
        operator delete(*((void **)&__p + 1));
        if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_160;
        }
        goto LABEL_152;
      }
LABEL_158:
      operator delete((void *)v153);
      if ((v150 & 0x80000000) == 0)
      {
LABEL_151:
        if ((SHIBYTE(v144.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_152;
        }
LABEL_160:
        operator delete(v144.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v143.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_153:
          if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_154;
          }
          goto LABEL_162;
        }
LABEL_161:
        operator delete(v143.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_154:
          if ((SHIBYTE(v145.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_164;
          }
LABEL_163:
          operator delete(v145.__r_.__value_.__l.__data_);
          goto LABEL_164;
        }
LABEL_162:
        operator delete(__str.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v145.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_164;
        }
        goto LABEL_163;
      }
      goto LABEL_159;
    }
    uint64_t v67 = sub_1EF344((uint64_t *)(a1 + 440), (uint64_t)&__dst);
    if (v67)
    {
      if (*(unsigned char *)(a1 + 473))
      {
        if (SHIBYTE(v160) < 0)
        {
          sub_4200(&__p, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          long long __p = __dst;
          uint64_t v148 = v160;
        }
        int v149 = 5;
        unint64_t v92 = *(void *)(a1 + 488);
        if (v92 >= *(void *)(a1 + 496))
        {
          uint64_t v94 = sub_D2F30((void **)(a1 + 480), (uint64_t)&__p);
          int v95 = SHIBYTE(v148);
          *(void *)(a1 + 488) = v94;
          if (v95 < 0) {
            operator delete((void *)__p);
          }
        }
        else
        {
          long long v93 = __p;
          *(void *)(v92 + 16) = v148;
          *(_OWORD *)unint64_t v92 = v93;
          *(_DWORD *)(v92 + 24) = v149;
          *(void *)(a1 + 488) = v92 + 32;
        }
      }
      uint64_t v11 = sub_1EF4B8(a1, v67, &__dst);
      if (v11) {
        goto LABEL_165;
      }
      std::operator+<char>();
      __darwin_ct_rune_t v96 = std::string::append(&v145, "'");
      long long v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v96->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v97;
      v96->__r_.__value_.__l.__size_ = 0;
      v96->__r_.__value_.__r.__words[2] = 0;
      v96->__r_.__value_.__r.__words[0] = 0;
      sub_B1D70(0x6334u, (unint64_t)&v143);
      __darwin_ct_rune_t v98 = std::string::insert(&v143, 0, "exprtk.hpp:");
      long long v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
      v144.__r_.__value_.__r.__words[2] = v98->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v99;
      v98->__r_.__value_.__l.__size_ = 0;
      v98->__r_.__value_.__r.__words[2] = 0;
      v98->__r_.__value_.__r.__words[0] = 0;
      sub_B49F0(1, (uint64_t)v3, &__str, &v144, (uint64_t)&__p);
      sub_B1CB0((void *)a1, (uint64_t)&__p);
LABEL_192:
      sub_B1ED4((uint64_t)&__p);
      if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_160;
      }
LABEL_152:
      if ((SHIBYTE(v143.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_153;
      }
      goto LABEL_161;
    }
    if (sub_1E98BC((uint64_t *)(a1 + 440), (uint64_t)&__dst))
    {
      sub_D2DB0(a1 + 464, (uint64_t)&__dst, 2u);
      uint64_t v85 = sub_1EA0A0(a1);
      goto LABEL_145;
    }
    if (sub_1E67B8((uint64_t)&__dst)
      && (!*(void *)(a1 + 216)
       || (uint64_t *)(a1 + 208) == sub_ADE40(a1 + 200, (uint64_t)&__dst)
       || !sub_1F0A14((uint64_t)&__dst)))
    {
      std::operator+<char>();
      uint64_t v104 = std::string::append(&v145, "'");
      long long v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v104->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v105;
      v104->__r_.__value_.__l.__size_ = 0;
      v104->__r_.__value_.__r.__words[2] = 0;
      v104->__r_.__value_.__r.__words[0] = 0;
      sub_B1D70(0x6383u, (unint64_t)&v143);
      uint64_t v106 = std::string::insert(&v143, 0, "exprtk.hpp:");
      long long v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
      v144.__r_.__value_.__r.__words[2] = v106->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v107;
      v106->__r_.__value_.__l.__size_ = 0;
      v106->__r_.__value_.__r.__words[2] = 0;
      v106->__r_.__value_.__r.__words[0] = 0;
      sub_B49F0(1, (uint64_t)v3, &__str, &v144, (uint64_t)&__p);
      sub_B1CB0((void *)a1, (uint64_t)&__p);
      goto LABEL_192;
    }
    if (!*(unsigned char *)(a1 + 664) || (unint64_t v87 = *(_DWORD **)(a1 + 680)) == 0)
    {
LABEL_176:
      std::operator+<char>();
      long long v88 = std::string::append(&v145, "'");
      long long v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v88->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v89;
      v88->__r_.__value_.__l.__size_ = 0;
      v88->__r_.__value_.__r.__words[2] = 0;
      v88->__r_.__value_.__r.__words[0] = 0;
      sub_B1D70(0x63E2u, (unint64_t)&v143);
      int v90 = std::string::insert(&v143, 0, "exprtk.hpp:");
      long long v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
      v144.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v91;
      v90->__r_.__value_.__l.__size_ = 0;
      v90->__r_.__value_.__r.__words[2] = 0;
      v90->__r_.__value_.__r.__words[0] = 0;
      sub_B49F0(1, (uint64_t)v3, &__str, &v144, (uint64_t)&__p);
      sub_B1CB0((void *)a1, (uint64_t)&__p);
      goto LABEL_192;
    }
    if (*(unsigned char *)(a1 + 195))
    {
      if (sub_1E67B8((uint64_t)&__dst)) {
        goto LABEL_176;
      }
      unint64_t v87 = *(_DWORD **)(a1 + 680);
    }
    uint64_t v113 = *(void *)(a1 + 440);
    memset(&__str, 0, sizeof(__str));
    int v114 = v87[2];
    if (v114 == 1)
    {
      if ((*(unsigned int (**)(_DWORD *, long long *, uint64_t, std::string *))(*(void *)v87 + 24))(v87, &__dst, v113, &__str))
      {
        uint64_t v11 = sub_CDB34(a1);
        if (v11)
        {
LABEL_250:
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          goto LABEL_165;
        }
      }
      std::operator+<char>();
      uint64_t v116 = std::string::append(&v143, "'");
      long long v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
      v144.__r_.__value_.__r.__words[2] = v116->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v117;
      v116->__r_.__value_.__l.__size_ = 0;
      v116->__r_.__value_.__r.__words[2] = 0;
      v116->__r_.__value_.__r.__words[0] = 0;
      std::string::size_type v118 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v118 = __str.__r_.__value_.__l.__size_;
      }
      if (v118) {
        std::operator+<char>();
      }
      else {
        sub_5E5C(&v138, "");
      }
      if ((v140 & 0x80u) == 0) {
        unint64_t v119 = (const std::string::value_type *)&v138;
      }
      else {
        unint64_t v119 = (const std::string::value_type *)v138;
      }
      if ((v140 & 0x80u) == 0) {
        std::string::size_type v120 = v140;
      }
      else {
        std::string::size_type v120 = v139;
      }
      int v121 = std::string::append(&v144, v119, v120);
      long long v122 = *(_OWORD *)&v121->__r_.__value_.__l.__data_;
      v145.__r_.__value_.__r.__words[2] = v121->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v145.__r_.__value_.__l.__data_ = v122;
      v121->__r_.__value_.__l.__size_ = 0;
      v121->__r_.__value_.__r.__words[2] = 0;
      v121->__r_.__value_.__r.__words[0] = 0;
      sub_B1D70(0x63D7u, (unint64_t)&v136);
      long long v123 = std::string::insert(&v136, 0, "exprtk.hpp:");
      long long v124 = *(_OWORD *)&v123->__r_.__value_.__l.__data_;
      v137.__r_.__value_.__r.__words[2] = v123->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v137.__r_.__value_.__l.__data_ = v124;
      v123->__r_.__value_.__l.__size_ = 0;
      v123->__r_.__value_.__r.__words[2] = 0;
      v123->__r_.__value_.__r.__words[0] = 0;
      sub_B49F0(5, (uint64_t)v3, &v145, &v137, (uint64_t)&__p);
      sub_B1CB0((void *)a1, (uint64_t)&__p);
LABEL_243:
      sub_B1ED4((uint64_t)&__p);
      if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v137.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v136.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_245:
          if ((SHIBYTE(v145.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_246;
          }
          goto LABEL_254;
        }
      }
      else if ((SHIBYTE(v136.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_245;
      }
      operator delete(v136.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v145.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_246:
        if (((char)v140 & 0x80000000) == 0) {
          goto LABEL_247;
        }
        goto LABEL_255;
      }
LABEL_254:
      operator delete(v145.__r_.__value_.__l.__data_);
      if (((char)v140 & 0x80000000) == 0)
      {
LABEL_247:
        if ((SHIBYTE(v144.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_248;
        }
        goto LABEL_256;
      }
LABEL_255:
      operator delete(v138);
      if ((SHIBYTE(v144.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_248:
        if ((SHIBYTE(v143.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_249:
          uint64_t v11 = 0;
          goto LABEL_250;
        }
LABEL_257:
        operator delete(v143.__r_.__value_.__l.__data_);
        goto LABEL_249;
      }
LABEL_256:
      operator delete(v144.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v143.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_249;
      }
      goto LABEL_257;
    }
    uint64_t v11 = 0;
    if (v114) {
      goto LABEL_250;
    }
    uint64_t v142 = 0;
    int v141 = 0;
    if ((*(unsigned int (**)(_DWORD *, long long *, int *, uint64_t *, std::string *))(*(void *)v87 + 16))(v87, &__dst, &v141, &v142, &__str))
    {
      if (v141 == 1)
      {
        int v115 = sub_1F0B20(v113, (uint64_t *)&__dst, &v142);
        goto LABEL_225;
      }
      if (v141 == 2)
      {
        int v115 = sub_A1F70(v113, (uint64_t *)&__dst, &v142);
LABEL_225:
        if (v115)
        {
          uint64_t v11 = sub_1EB408((uint64_t *)(a1 + 440), (uint64_t *)&__dst);
          if (v11)
          {
            if (sub_1ECD20((uint64_t *)(a1 + 440), (uint64_t)&__dst))
            {
              (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
              operator new();
            }
            sub_D2DB0(a1 + 464, (uint64_t)&__dst, 1u);
            if (sub_1ECDF0(a1))
            {
              sub_B3BF8(a1);
              goto LABEL_250;
            }
            goto LABEL_249;
          }
        }
      }
    }
    std::operator+<char>();
    long long v125 = std::string::append(&v143, "'");
    long long v126 = *(_OWORD *)&v125->__r_.__value_.__l.__data_;
    v144.__r_.__value_.__r.__words[2] = v125->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v126;
    v125->__r_.__value_.__l.__size_ = 0;
    v125->__r_.__value_.__r.__words[2] = 0;
    v125->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v127 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v127 = __str.__r_.__value_.__l.__size_;
    }
    if (v127) {
      std::operator+<char>();
    }
    else {
      sub_5E5C(&v138, "");
    }
    if ((v140 & 0x80u) == 0) {
      uint64_t v128 = (const std::string::value_type *)&v138;
    }
    else {
      uint64_t v128 = (const std::string::value_type *)v138;
    }
    if ((v140 & 0x80u) == 0) {
      std::string::size_type v129 = v140;
    }
    else {
      std::string::size_type v129 = v139;
    }
    std::string::value_type v130 = std::string::append(&v144, v128, v129);
    long long v131 = *(_OWORD *)&v130->__r_.__value_.__l.__data_;
    v145.__r_.__value_.__r.__words[2] = v130->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v145.__r_.__value_.__l.__data_ = v131;
    v130->__r_.__value_.__l.__size_ = 0;
    v130->__r_.__value_.__r.__words[2] = 0;
    v130->__r_.__value_.__r.__words[0] = 0;
    sub_B1D70(0x63C3u, (unint64_t)&v136);
    long long v132 = std::string::insert(&v136, 0, "exprtk.hpp:");
    long long v133 = *(_OWORD *)&v132->__r_.__value_.__l.__data_;
    v137.__r_.__value_.__r.__words[2] = v132->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v137.__r_.__value_.__l.__data_ = v133;
    v132->__r_.__value_.__l.__size_ = 0;
    v132->__r_.__value_.__r.__words[2] = 0;
    v132->__r_.__value_.__r.__words[0] = 0;
    sub_B49F0(5, (uint64_t)v3, &v145, &v137, (uint64_t)&__p);
    sub_B1CB0((void *)a1, (uint64_t)&__p);
    goto LABEL_243;
  }
  if (*(unsigned char *)(a1 + 473))
  {
    if (SHIBYTE(v160) < 0)
    {
      sub_4200(&__p, (void *)__dst, *((unint64_t *)&__dst + 1));
    }
    else
    {
      long long __p = __dst;
      uint64_t v148 = v160;
    }
    int v149 = 5;
    unint64_t v48 = *(void *)(a1 + 488);
    if (v48 >= *(void *)(a1 + 496))
    {
      uint64_t v50 = sub_D2F30((void **)(a1 + 480), (uint64_t)&__p);
      int v51 = SHIBYTE(v148);
      *(void *)(a1 + 488) = v50;
      if (v51 < 0) {
        operator delete((void *)__p);
      }
    }
    else
    {
      long long v49 = __p;
      *(void *)(v48 + 16) = v148;
      *(_OWORD *)unint64_t v48 = v49;
      *(_DWORD *)(v48 + 24) = v149;
      *(void *)(a1 + 488) = v48 + 32;
    }
  }
  uint64_t v11 = sub_1ED410(a1, v42, (uint64_t)&__dst);
  if (!v11)
  {
    std::operator+<char>();
    unint64_t v52 = std::string::append(&v145, "'");
    long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v53;
    v52->__r_.__value_.__l.__size_ = 0;
    v52->__r_.__value_.__r.__words[2] = 0;
    v52->__r_.__value_.__r.__words[0] = 0;
    memset(&v143, 0, sizeof(v143));
    std::string::push_back(&v143, 52);
    std::string::push_back(&v143, 52);
    std::string::push_back(&v143, 51);
    std::string::push_back(&v143, 53);
    std::string::push_back(&v143, 50);
    std::string::size_type v54 = HIBYTE(v143.__r_.__value_.__r.__words[2]);
    if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v55 = &v143;
    }
    else {
      uint64_t v55 = (std::string *)v143.__r_.__value_.__r.__words[0];
    }
    if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v54 = v143.__r_.__value_.__l.__size_;
    }
    if (v54)
    {
      uint64_t v56 = (std::string *)((char *)v55 + v54 - 1);
      if (v56 > v55)
      {
        uint64_t v57 = &v55->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v58 = *(v57 - 1);
          *(v57 - 1) = v56->__r_.__value_.__s.__data_[0];
          v56->__r_.__value_.__s.__data_[0] = v58;
          uint64_t v56 = (std::string *)((char *)v56 - 1);
          BOOL v59 = v57++ >= (char *)v56;
        }
        while (!v59);
      }
    }
    std::string::size_type v60 = std::string::insert(&v143, 0, "exprtk.hpp:");
    long long v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
    v144.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v61;
    v60->__r_.__value_.__l.__size_ = 0;
    v60->__r_.__value_.__r.__words[2] = 0;
    v60->__r_.__value_.__r.__words[0] = 0;
    char v150 = 0;
    BYTE8(__p) = 0;
    uint64_t v151 = -1;
    long long v153 = 0u;
    long long v154 = 0u;
    long long v155 = 0u;
    long long v156 = 0u;
    long long v157 = 0u;
    uint64_t v158 = 0;
    int v152 = 1;
    LODWORD(__p) = *v3;
    std::string::operator=((std::string *)((char *)&__p + 8), v2);
    uint64_t v151 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v153, &__str);
    std::string::operator=((std::string *)((char *)&v154 + 8), &v144);
    uint64_t v62 = *(void *)(a1 + 568);
    uint64_t v63 = *(void *)(a1 + 560);
    uint64_t v64 = 30 * ((v62 - v63) >> 3) - 1;
    if (v62 == v63) {
      uint64_t v64 = 0;
    }
    if (v64 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v63 = *(void *)(a1 + 560);
      uint64_t v62 = *(void *)(a1 + 568);
    }
    if (v62 == v63)
    {
      uint64_t v66 = 0;
    }
    else
    {
      unint64_t v65 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v66 = *(void *)(v63 + 8 * (v65 / 0x1E)) + 136 * (v65 % 0x1E);
    }
    goto LABEL_147;
  }
LABEL_165:
  if (SHIBYTE(v160) < 0) {
    operator delete((void *)__dst);
  }
  return v11;
}

void sub_CEE9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v40 - 121) < 0) {
    operator delete(*(void **)(v40 - 144));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_CF240(std::string::size_type a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 104);
  if (v4 != 40)
  {
    if (v4 == 123)
    {
      std::string::size_type v5 = *(void *)(a1 + 24);
      if (*(void *)(a1 + 8) == v5) {
        std::string::size_type v5 = a1 + 40;
      }
      else {
        *(void *)(a1 + 24) = v5 + 40;
      }
      *(_DWORD *)(a1 + 104) = *(_DWORD *)v5;
      std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v5 + 8));
      *(void *)(a1 + 136) = *(void *)(v5 + 32);
      if (*(_DWORD *)(a1 + 104) == 125)
      {
        std::string::size_type v12 = *(void *)(a1 + 24);
        if (*(void *)(a1 + 8) == v12) {
          std::string::size_type v12 = a1 + 40;
        }
        else {
          *(void *)(a1 + 24) = v12 + 40;
        }
        *(_DWORD *)(a1 + 104) = *(_DWORD *)v12;
        std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v12 + 8));
        *(void *)(a1 + 136) = *(void *)(v12 + 32);
        operator new();
      }
      uint64_t v93 = a2;
      int v13 = 125;
      int v14 = 6;
      goto LABEL_18;
    }
    sub_D1B74(125, (char *)&v103);
    unint64_t v7 = std::string::insert(&v103, 0, "ERR094 - Expected '");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v104.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    uint64_t v9 = std::string::append(&v104, "' for call to multi-sequence");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v105.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
    if ((v11 & 0x80u) != 0) {
      uint64_t v11 = *(void *)(a2 + 8);
    }
    if (v11)
    {
      std::operator+<char>();
      LODWORD(v11) = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else
    {
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
      __p.__r_.__value_.__s.__data_[0] = 0;
    }
    if ((v11 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((v11 & 0x80u) == 0) {
      std::string::size_type size = v11;
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v50 = std::string::append(&v105, (const std::string::value_type *)p_p, size);
    long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v51;
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    memset(&v100, 0, sizeof(v100));
    std::string::push_back(&v100, 56);
    std::string::push_back(&v100, 54);
    std::string::push_back(&v100, 55);
    std::string::push_back(&v100, 50);
    std::string::push_back(&v100, 50);
    std::string::size_type v52 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
    if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v53 = &v100;
    }
    else {
      long long v53 = (std::string *)v100.__r_.__value_.__r.__words[0];
    }
    if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v52 = v100.__r_.__value_.__l.__size_;
    }
    if (v52)
    {
      std::string::size_type v54 = (std::string *)((char *)v53 + v52 - 1);
      if (v54 > v53)
      {
        uint64_t v55 = &v53->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v56 = *(v55 - 1);
          *(v55 - 1) = v54->__r_.__value_.__s.__data_[0];
          v54->__r_.__value_.__s.__data_[0] = v56;
          std::string::size_type v54 = (std::string *)((char *)v54 - 1);
          BOOL v57 = v55++ >= (char *)v54;
        }
        while (!v57);
      }
    }
    std::string::value_type v58 = std::string::insert(&v100, 0, "exprtk.hpp:");
    long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
    v101.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v59;
    v58->__r_.__value_.__l.__size_ = 0;
    v58->__r_.__value_.__r.__words[2] = 0;
    v58->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v108.__r_.__value_.__s + 23) = 0;
    v108.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v109 = -1;
    long long v111 = 0u;
    long long v112 = 0u;
    long long v113 = 0u;
    long long v114 = 0u;
    long long v115 = 0u;
    uint64_t v116 = 0;
    int v110 = 1;
    int v107 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v108, (const std::string *)(a1 + 112));
    uint64_t v109 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v111, &__str);
    std::string::operator=((std::string *)((char *)&v112 + 8), &v101);
    uint64_t v60 = *(void *)(a1 + 568);
    uint64_t v61 = *(void *)(a1 + 560);
    uint64_t v62 = 30 * ((v60 - v61) >> 3) - 1;
    if (v60 == v61) {
      uint64_t v62 = 0;
    }
    if (v62 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v61 = *(void *)(a1 + 560);
      uint64_t v60 = *(void *)(a1 + 568);
    }
    if (v60 == v61)
    {
      uint64_t v64 = 0;
    }
    else
    {
      unint64_t v63 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v64 = *(void *)(v61 + 8 * (v63 / 0x1E)) + 136 * (v63 % 0x1E);
    }
    sub_B5158(v64, (uint64_t)&v107);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v115) < 0)
    {
      operator delete((void *)v114);
      if ((SHIBYTE(v113) & 0x80000000) == 0)
      {
LABEL_97:
        if ((SBYTE7(v112) & 0x80000000) == 0) {
          goto LABEL_98;
        }
        goto LABEL_109;
      }
    }
    else if ((SHIBYTE(v113) & 0x80000000) == 0)
    {
      goto LABEL_97;
    }
    operator delete(*((void **)&v112 + 1));
    if ((SBYTE7(v112) & 0x80000000) == 0)
    {
LABEL_98:
      if ((SHIBYTE(v108.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_99;
      }
      goto LABEL_110;
    }
LABEL_109:
    operator delete((void *)v111);
    if ((SHIBYTE(v108.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_99:
      if ((SHIBYTE(v101.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_100;
      }
      goto LABEL_111;
    }
LABEL_110:
    operator delete(v108.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v101.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_100:
      if ((SHIBYTE(v100.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_101;
      }
      goto LABEL_112;
    }
LABEL_111:
    operator delete(v101.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v100.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_101:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_102;
      }
      goto LABEL_113;
    }
LABEL_112:
    operator delete(v100.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_102:
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_103;
      }
      goto LABEL_114;
    }
LABEL_113:
    operator delete(__str.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_103:
      if ((SHIBYTE(v105.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_104;
      }
      goto LABEL_115;
    }
LABEL_114:
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v105.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_104:
      if ((SHIBYTE(v104.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_105;
      }
      goto LABEL_116;
    }
LABEL_115:
    operator delete(v105.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v104.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_105:
      if ((SHIBYTE(v103.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return 0;
      }
LABEL_117:
      operator delete(v103.__r_.__value_.__l.__data_);
      return 0;
    }
LABEL_116:
    operator delete(v104.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v103.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return 0;
    }
    goto LABEL_117;
  }
  std::string::size_type v6 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v6) {
    std::string::size_type v6 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v6 + 40;
  }
  uint64_t v93 = a2;
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v6;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v6 + 8));
  *(void *)(a1 + 136) = *(void *)(v6 + 32);
  int v13 = 41;
  int v14 = 44;
LABEL_18:
  unsigned int v96 = v14;
  memset(&__str, 0, sizeof(__str));
  memset(&v105, 0, sizeof(v105));
  v104.__r_.__value_.__s.__data_[0] = 1;
  v104.__r_.__value_.__l.__size_ = a1;
  v104.__r_.__value_.__r.__words[2] = (std::string::size_type)&__str;
  long long v99 = (void *)a1;
  ++*(void *)(a1 + 656);
  uint64_t v15 = (_DWORD *)(a1 + 40);
  int v95 = (std::string *)(a1 + 112);
  char v94 = *(unsigned char *)(a1 + 651);
  do
  {
    while (1)
    {
      *(unsigned char *)(a1 + 651) = 0;
      uint64_t v17 = sub_B7FE4(a1, 0);
      uint64_t v18 = v17;
      if (!v17) {
        goto LABEL_153;
      }
      BOOL v19 = (char *)__str.__r_.__value_.__l.__size_;
      if (__str.__r_.__value_.__l.__size_ < __str.__r_.__value_.__r.__words[2])
      {
        *(void *)__str.__r_.__value_.__l.__size_ = v17;
        std::string::size_type v20 = (std::string::size_type)(v19 + 8);
        goto LABEL_37;
      }
      std::string::size_type v21 = __str.__r_.__value_.__r.__words[0];
      uint64_t v22 = (uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 3;
      unint64_t v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 61) {
        sub_2E00();
      }
      int64_t v24 = __str.__r_.__value_.__r.__words[2] - __str.__r_.__value_.__r.__words[0];
      if ((uint64_t)(__str.__r_.__value_.__r.__words[2] - __str.__r_.__value_.__r.__words[0]) >> 2 > v23) {
        unint64_t v23 = v24 >> 2;
      }
      unint64_t v25 = (unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v23;
      if (v25)
      {
        if (v25 >> 61) {
          sub_188D718();
        }
        __darwin_ct_rune_t v26 = (char *)operator new(8 * v25);
        BOOL v27 = (uint64_t *)&v26[8 * v22];
        *BOOL v27 = v18;
        std::string::size_type v20 = (std::string::size_type)(v27 + 1);
        if (v19 == (char *)v21)
        {
LABEL_35:
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
          __str.__r_.__value_.__l.__size_ = v20;
          __str.__r_.__value_.__r.__words[2] = (std::string::size_type)&v26[8 * v25];
          if (!v19) {
            goto LABEL_37;
          }
LABEL_36:
          operator delete(v19);
          goto LABEL_37;
        }
      }
      else
      {
        __darwin_ct_rune_t v26 = 0;
        BOOL v27 = (uint64_t *)(8 * v22);
        *(void *)(8 * v22) = v18;
        std::string::size_type v20 = 8 * v22 + 8;
        if (v19 == (char *)v21) {
          goto LABEL_35;
        }
      }
      unint64_t v36 = (unint64_t)&v19[-v21 - 8];
      if (v36 < 0x58) {
        goto LABEL_182;
      }
      if (v21 - (unint64_t)v26 < 0x20) {
        goto LABEL_182;
      }
      uint64_t v37 = (v36 >> 3) + 1;
      uint64_t v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v39 = &v19[-v38];
      BOOL v27 = (uint64_t *)((char *)v27 - v38);
      uint64_t v40 = &v26[8 * v22 - 16];
      int v41 = v19 - 16;
      uint64_t v42 = v37 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v43 = *(_OWORD *)v41;
        *((_OWORD *)v40 - 1) = *((_OWORD *)v41 - 1);
        *(_OWORD *)uint64_t v40 = v43;
        v40 -= 32;
        v41 -= 32;
        v42 -= 4;
      }
      while (v42);
      BOOL v19 = v39;
      if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_182:
        do
        {
          uint64_t v44 = *((void *)v19 - 1);
          v19 -= 8;
          *--BOOL v27 = v44;
        }
        while (v19 != (char *)v21);
      }
      BOOL v19 = (char *)__str.__r_.__value_.__r.__words[0];
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
      __str.__r_.__value_.__l.__size_ = v20;
      __str.__r_.__value_.__r.__words[2] = (std::string::size_type)&v26[8 * v25];
      if (v19) {
        goto LABEL_36;
      }
LABEL_37:
      __str.__r_.__value_.__l.__size_ = v20;
      std::string::size_type v28 = v105.__r_.__value_.__l.__size_;
      if (v105.__r_.__value_.__l.__size_ == v105.__r_.__value_.__r.__words[2] << 6)
      {
        if ((int64_t)(v105.__r_.__value_.__l.__size_ + 1) < 0) {
          sub_2E00();
        }
        std::string::size_type v29 = v105.__r_.__value_.__r.__words[2] << 7;
        if (v105.__r_.__value_.__r.__words[2] << 7 <= (v105.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFC0) + 64) {
          std::string::size_type v29 = (v105.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFC0) + 64;
        }
        if (v105.__r_.__value_.__l.__size_ <= 0x3FFFFFFFFFFFFFFELL) {
          unint64_t v30 = v29;
        }
        else {
          unint64_t v30 = 0x7FFFFFFFFFFFFFFFLL;
        }
        sub_3D110((uint64_t)&v105, v30);
        std::string::size_type v28 = v105.__r_.__value_.__l.__size_;
      }
      v105.__r_.__value_.__l.__size_ = v28 + 1;
      std::string::size_type v31 = v28 >> 6;
      uint64_t v32 = 1 << v28;
      if (*(unsigned char *)(a1 + 651))
      {
        *(void *)(v105.__r_.__value_.__r.__words[0] + 8 * v31) |= v32;
        int v33 = *(_DWORD *)(a1 + 104);
        uint64_t v34 = *(_DWORD **)(a1 + 8);
        unint64_t v16 = *(_DWORD **)(a1 + 24);
        if (v33 == v13) {
          goto LABEL_63;
        }
      }
      else
      {
        *(void *)(v105.__r_.__value_.__r.__words[0] + 8 * v31) &= ~v32;
        int v33 = *(_DWORD *)(a1 + 104);
        uint64_t v34 = *(_DWORD **)(a1 + 8);
        unint64_t v16 = *(_DWORD **)(a1 + 24);
        if (v33 == v13)
        {
LABEL_63:
          if (v34 != v16)
          {
            *(void *)(a1 + 24) = v16 + 10;
            uint64_t v15 = v16;
          }
          goto LABEL_68;
        }
      }
      if (v33 == v96) {
        break;
      }
      if (v34 == v16) {
        unint64_t v16 = (_DWORD *)(a1 + 40);
      }
      if (*v16 == v13)
      {
        sub_B1D70(v96, (unint64_t)&v100);
        unint64_t v65 = std::string::insert(&v100, 0, "ERR095 - Expected '");
        long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
        v101.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v66;
        v65->__r_.__value_.__l.__size_ = 0;
        v65->__r_.__value_.__r.__words[2] = 0;
        v65->__r_.__value_.__r.__words[0] = 0;
        uint64_t v67 = std::string::append(&v101, "' for call to multi-sequence section of ");
        long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v68;
        v67->__r_.__value_.__l.__size_ = 0;
        v67->__r_.__value_.__r.__words[2] = 0;
        v67->__r_.__value_.__r.__words[0] = 0;
        int v69 = *(char *)(v93 + 23);
        if (v69 >= 0) {
          unint64_t v70 = (const std::string::value_type *)v93;
        }
        else {
          unint64_t v70 = *(const std::string::value_type **)v93;
        }
        if (v69 >= 0) {
          std::string::size_type v71 = *(unsigned __int8 *)(v93 + 23);
        }
        else {
          std::string::size_type v71 = *(void *)(v93 + 8);
        }
        long long v72 = std::string::append(&__p, v70, v71);
        long long v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
        v103.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v73;
        v72->__r_.__value_.__l.__size_ = 0;
        v72->__r_.__value_.__r.__words[2] = 0;
        v72->__r_.__value_.__r.__words[0] = 0;
        memset(&v97, 0, sizeof(v97));
        std::string::push_back(&v97, 52);
        std::string::push_back(&v97, 49);
        std::string::push_back(&v97, 56);
        std::string::push_back(&v97, 50);
        std::string::push_back(&v97, 50);
        std::string::size_type v74 = HIBYTE(v97.__r_.__value_.__r.__words[2]);
        if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v75 = &v97;
        }
        else {
          std::string::size_type v75 = (std::string *)v97.__r_.__value_.__r.__words[0];
        }
        if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v74 = v97.__r_.__value_.__l.__size_;
        }
        if (v74)
        {
          unint64_t v76 = (std::string *)((char *)v75 + v74 - 1);
          if (v76 > v75)
          {
            uint64_t v77 = &v75->__r_.__value_.__s.__data_[1];
            do
            {
              std::string::value_type v78 = *(v77 - 1);
              *(v77 - 1) = v76->__r_.__value_.__s.__data_[0];
              v76->__r_.__value_.__s.__data_[0] = v78;
              unint64_t v76 = (std::string *)((char *)v76 - 1);
              BOOL v57 = v77++ >= (char *)v76;
            }
            while (!v57);
          }
        }
        uint64_t v79 = std::string::insert(&v97, 0, "exprtk.hpp:");
        long long v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
        v98.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v80;
        v79->__r_.__value_.__l.__size_ = 0;
        v79->__r_.__value_.__r.__words[2] = 0;
        v79->__r_.__value_.__r.__words[0] = 0;
        *((unsigned char *)&v108.__r_.__value_.__s + 23) = 0;
        v108.__r_.__value_.__s.__data_[0] = 0;
        uint64_t v109 = -1;
        long long v111 = 0u;
        long long v112 = 0u;
        long long v113 = 0u;
        long long v114 = 0u;
        long long v115 = 0u;
        uint64_t v116 = 0;
        int v110 = 1;
        int v107 = *(_DWORD *)(a1 + 104);
        std::string::operator=(&v108, v95);
        uint64_t v109 = *(void *)(a1 + 136);
        std::string::operator=((std::string *)&v111, &v103);
        std::string::operator=((std::string *)((char *)&v112 + 8), &v98);
        uint64_t v81 = *(void *)(a1 + 568);
        uint64_t v82 = *(void *)(a1 + 560);
        uint64_t v83 = 30 * ((v81 - v82) >> 3) - 1;
        if (v81 == v82) {
          uint64_t v83 = 0;
        }
        if (v83 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
        {
          sub_B4B88(a1 + 552);
          uint64_t v82 = *(void *)(a1 + 560);
          uint64_t v81 = *(void *)(a1 + 568);
        }
        if (v81 == v82)
        {
          uint64_t v85 = 0;
        }
        else
        {
          unint64_t v84 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
          uint64_t v85 = *(void *)(v82 + 8 * (v84 / 0x1E)) + 136 * (v84 % 0x1E);
        }
        sub_B5158(v85, (uint64_t)&v107);
        ++*(void *)(a1 + 592);
        if (SBYTE7(v115) < 0)
        {
          operator delete((void *)v114);
          if (SHIBYTE(v113) < 0) {
            goto LABEL_168;
          }
LABEL_145:
          if ((SBYTE7(v112) & 0x80000000) == 0) {
            goto LABEL_146;
          }
LABEL_169:
          operator delete((void *)v111);
          if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_170;
          }
LABEL_147:
          if ((SHIBYTE(v98.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_148;
          }
LABEL_171:
          operator delete(v98.__r_.__value_.__l.__data_);
          if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_172;
          }
LABEL_149:
          if ((SHIBYTE(v103.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_150;
          }
LABEL_173:
          operator delete(v103.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_174;
          }
LABEL_151:
          if ((SHIBYTE(v101.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_152;
          }
LABEL_175:
          operator delete(v101.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v100.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_153:
            uint64_t v47 = 0;
            goto LABEL_154;
          }
        }
        else
        {
          if ((SHIBYTE(v113) & 0x80000000) == 0) {
            goto LABEL_145;
          }
LABEL_168:
          operator delete(*((void **)&v112 + 1));
          if (SBYTE7(v112) < 0) {
            goto LABEL_169;
          }
LABEL_146:
          if ((SHIBYTE(v108.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_147;
          }
LABEL_170:
          operator delete(v108.__r_.__value_.__l.__data_);
          if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_171;
          }
LABEL_148:
          if ((SHIBYTE(v97.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_149;
          }
LABEL_172:
          operator delete(v97.__r_.__value_.__l.__data_);
          if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_173;
          }
LABEL_150:
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_151;
          }
LABEL_174:
          operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_175;
          }
LABEL_152:
          if ((SHIBYTE(v100.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_153;
          }
        }
        operator delete(v100.__r_.__value_.__l.__data_);
        goto LABEL_153;
      }
      if (v33 == v13) {
        goto LABEL_66;
      }
    }
    uint64_t v35 = (_DWORD *)(a1 + 40);
    if (v34 != v16)
    {
      *(void *)(a1 + 24) = v16 + 10;
      uint64_t v35 = v16;
    }
    *(_DWORD *)(a1 + 104) = *v35;
    std::string::operator=(v95, (const std::string *)(v35 + 2));
    *(void *)(a1 + 136) = *((void *)v35 + 4);
  }
  while (*(_DWORD *)(a1 + 104) != v13);
LABEL_66:
  uint64_t v45 = *(_DWORD **)(a1 + 24);
  if (*(_DWORD **)(a1 + 8) != v45)
  {
    *(void *)(a1 + 24) = v45 + 10;
    uint64_t v15 = v45;
  }
LABEL_68:
  *(_DWORD *)(a1 + 104) = *v15;
  std::string::operator=(v95, (const std::string *)(v15 + 2));
  *(void *)(a1 + 136) = *((void *)v15 + 4);
  uint64_t v46 = *(unsigned __int8 *)(v93 + 23);
  if ((v46 & 0x80u) != 0) {
    uint64_t v46 = *(void *)(v93 + 8);
  }
  uint64_t v47 = sub_BA554(a1, (long long *)&__str, &v105, v46 == 0);
  v104.__r_.__value_.__s.__data_[0] = v47 == 0;
LABEL_154:
  *(unsigned char *)(a1 + 651) |= v94;
  BOOL v86 = v99;
  uint64_t v87 = v99[110];
  unint64_t v88 = v99[82];
  uint64_t v89 = v99[111] - v87;
  if (v89)
  {
    unint64_t v90 = v89 / 96;
    if (v90 <= 1) {
      unint64_t v90 = 1;
    }
    long long v91 = (unsigned char *)(v87 + 68);
    do
    {
      if (*v91 && *(void *)(v91 - 28) >= v88) {
        *long long v91 = 0;
      }
      v91 += 96;
      --v90;
    }
    while (v90);
  }
  v86[82] = v88 - 1;
  sub_22094C((uint64_t)&v104);
  if (v105.__r_.__value_.__r.__words[0]) {
    operator delete(v105.__r_.__value_.__l.__data_);
  }
  if (__str.__r_.__value_.__r.__words[0])
  {
    __str.__r_.__value_.__l.__size_ = __str.__r_.__value_.__r.__words[0];
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return v47;
}

void sub_CFF00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a51 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a44 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((a51 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a46);
  if ((a44 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a37 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a39);
  if ((a37 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a31 & 0x80000000) == 0)
    {
LABEL_12:
      *(unsigned char *)(v57 + 651) |= a12;
      sub_D218C(&a25);
      sub_22094C((uint64_t)&a53);
      if (a57) {
        operator delete(a57);
      }
      uint64_t v60 = *(void **)(v58 - 256);
      if (v60)
      {
        *(void *)(v58 - 248) = v60;
        operator delete(v60);
      }
      _Unwind_Resume(a1);
    }
LABEL_11:
    operator delete(a26);
    goto LABEL_12;
  }
LABEL_10:
  operator delete(a32);
  if ((a31 & 0x80000000) == 0) {
    goto LABEL_12;
  }
  goto LABEL_11;
}

uint64_t sub_D0160(std::string::size_type a1)
{
  std::string v143 = 0;
  std::string v144 = 0;
  std::string v145 = 0;
  v134.__r_.__value_.__s.__data_[15] = 3;
  v133[0] = 6105691;
  uint64_t v2 = (std::string *)(a1 + 112);
  BOOL v3 = *(char *)(a1 + 135) < 0;
  uint64_t v4 = *(unsigned __int8 *)(a1 + 135);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a1 + 120);
  }
  if (v4 != 3)
  {
LABEL_14:
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_20B8890;
    strcpy(__str.__r_.__value_.__l.__data_, "ERR083 - Expected token '[*]'");
    memset(&v130, 0, sizeof(v130));
    std::string::push_back(&v130, 49);
    std::string::push_back(&v130, 49);
    std::string::push_back(&v130, 52);
    std::string::push_back(&v130, 50);
    std::string::push_back(&v130, 50);
    std::string::size_type size = HIBYTE(v130.__r_.__value_.__r.__words[2]);
    if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v11 = &v130;
    }
    else {
      uint64_t v11 = (std::string *)v130.__r_.__value_.__r.__words[0];
    }
    if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v130.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      std::string::size_type v12 = (std::string *)((char *)v11 + size - 1);
      if (v12 > v11)
      {
        int v13 = &v11->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v14 = *(v13 - 1);
          *(v13 - 1) = v12->__r_.__value_.__s.__data_[0];
          v12->__r_.__value_.__s.__data_[0] = v14;
          std::string::size_type v12 = (std::string *)((char *)v12 - 1);
          BOOL v15 = v13++ >= (char *)v12;
        }
        while (!v15);
      }
    }
    unint64_t v16 = std::string::insert(&v130, 0, "exprtk.hpp:");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v131.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v131.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v134.__r_.__value_.__s + 23) = 0;
    v134.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v135 = -1;
    long long v137 = 0u;
    long long v138 = 0u;
    long long v139 = 0u;
    long long __p = 0u;
    long long v141 = 0u;
    uint64_t v142 = 0;
    int v136 = 1;
    v133[0] = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v134, v2);
    uint64_t v135 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v137, &__str);
    std::string::operator=((std::string *)((char *)&v138 + 8), &v131);
    uint64_t v18 = *(void *)(a1 + 568);
    uint64_t v19 = *(void *)(a1 + 560);
    uint64_t v20 = 30 * ((v18 - v19) >> 3) - 1;
    if (v18 == v19) {
      uint64_t v20 = 0;
    }
    if (v20 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v19 = *(void *)(a1 + 560);
      uint64_t v18 = *(void *)(a1 + 568);
    }
    if (v18 == v19)
    {
      uint64_t v22 = 0;
    }
    else
    {
      unint64_t v21 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v22 = *(void *)(v19 + 8 * (v21 / 0x1E)) + 136 * (v21 % 0x1E);
    }
    sub_B5158(v22, (uint64_t)v133);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v141) < 0)
    {
      operator delete((void *)__p);
      if ((SHIBYTE(v139) & 0x80000000) == 0)
      {
LABEL_33:
        if ((SBYTE7(v138) & 0x80000000) == 0) {
          goto LABEL_34;
        }
        goto LABEL_43;
      }
    }
    else if ((SHIBYTE(v139) & 0x80000000) == 0)
    {
      goto LABEL_33;
    }
    operator delete(*((void **)&v138 + 1));
    if ((SBYTE7(v138) & 0x80000000) == 0)
    {
LABEL_34:
      if ((SHIBYTE(v134.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_35;
      }
      goto LABEL_44;
    }
LABEL_43:
    operator delete((void *)v137);
    if ((SHIBYTE(v134.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_35:
      if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_36;
      }
      goto LABEL_45;
    }
LABEL_44:
    operator delete(v134.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_36:
      if ((SHIBYTE(v130.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_37;
      }
      goto LABEL_46;
    }
LABEL_45:
    operator delete(v131.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v130.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_37:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_38;
      }
      goto LABEL_47;
    }
LABEL_46:
    operator delete(v130.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_38:
      uint64_t v23 = 0;
      int64_t v24 = v143;
      if (!v143) {
        return v23;
      }
LABEL_39:
      std::string v144 = v24;
      operator delete(v24);
      return v23;
    }
LABEL_47:
    operator delete(__str.__r_.__value_.__l.__data_);
    uint64_t v23 = 0;
    int64_t v24 = v143;
    if (!v143) {
      return v23;
    }
    goto LABEL_39;
  }
  unint64_t v5 = 0;
  do
  {
    if (v3) {
      std::string::size_type v6 = (std::string *)v2->__r_.__value_.__r.__words[0];
    }
    else {
      std::string::size_type v6 = v2;
    }
    __darwin_ct_rune_t v7 = __tolower(v6->__r_.__value_.__s.__data_[v5]);
    if (v7 != __tolower(*((char *)v133 + v5))) {
      goto LABEL_14;
    }
    ++v5;
    BOOL v3 = *(char *)(a1 + 135) < 0;
    unint64_t v8 = *(unsigned __int8 *)(a1 + 135);
    if ((v8 & 0x80u) != 0) {
      unint64_t v8 = *(void *)(a1 + 120);
    }
  }
  while (v5 < v8);
  __str.__r_.__value_.__s.__data_[0] = 1;
  __str.__r_.__value_.__l.__size_ = a1;
  __str.__r_.__value_.__r.__words[2] = (std::string::size_type)&v143;
  std::string::size_type v9 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v9) {
    std::string::size_type v9 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v9 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v9;
  std::string::operator=(v2, (const std::string *)(v9 + 8));
  *(void *)(a1 + 136) = *(void *)(v9 + 32);
  if (*(_DWORD *)(a1 + 104) == 123)
  {
    std::string::size_type v26 = *(void *)(a1 + 24);
    if (*(void *)(a1 + 8) == v26) {
      std::string::size_type v26 = a1 + 40;
    }
    else {
      *(void *)(a1 + 24) = v26 + 40;
    }
    *(_DWORD *)(a1 + 104) = *(_DWORD *)v26;
    std::string::operator=(v2, (const std::string *)(v26 + 8));
    *(void *)(a1 + 136) = *(void *)(v26 + 32);
    std::string::size_type v39 = a1 + 40;
    std::string::size_type v128 = a1 + 40;
    while (1)
    {
      while (1)
      {
        uint64_t v40 = *(unsigned __int8 *)(a1 + 135);
        if ((v40 & 0x80u) != 0) {
          uint64_t v40 = *(void *)(a1 + 120);
        }
        if (v40 != 4) {
          goto LABEL_158;
        }
        __darwin_ct_rune_t v41 = __tolower(99);
        uint64_t v42 = *(char *)(a1 + 135) >= 0 ? v2 : *(std::string **)(a1 + 112);
        if (v41 != __tolower(v42->__r_.__value_.__s.__data_[0])
          || ((__darwin_ct_rune_t v43 = __tolower(97), *(char *)(a1 + 135) >= 0) ? (v44 = v2) : (v44 = *(std::string **)(a1 + 112)),
              v43 != __tolower(v44->__r_.__value_.__s.__data_[1])
           || ((__darwin_ct_rune_t v45 = __tolower(115), *(char *)(a1 + 135) >= 0) ? (v46 = v2) : (v46 = *(std::string **)(a1 + 112)),
               v45 != __tolower(v46->__r_.__value_.__s.__data_[2])
            || ((__darwin_ct_rune_t v47 = __tolower(101), *(char *)(a1 + 135) >= 0) ? (v48 = v2) : (v48 = *(std::string **)(a1 + 112)),
                v47 != __tolower(v48->__r_.__value_.__s.__data_[3])))))
        {
LABEL_158:
          v131.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
          *(_OWORD *)&v131.__r_.__value_.__r.__words[1] = xmmword_20B99E0;
          strcpy(v131.__r_.__value_.__l.__data_, "ERR085 - Expected a 'case' statement for multi-switch");
          memset(&v129, 0, sizeof(v129));
          std::string::push_back(&v129, 57);
          std::string::push_back(&v129, 51);
          std::string::push_back(&v129, 52);
          std::string::push_back(&v129, 50);
          std::string::push_back(&v129, 50);
          std::string::size_type v95 = HIBYTE(v129.__r_.__value_.__r.__words[2]);
          if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unsigned int v96 = &v129;
          }
          else {
            unsigned int v96 = (std::string *)v129.__r_.__value_.__r.__words[0];
          }
          if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v95 = v129.__r_.__value_.__l.__size_;
          }
          if (v95)
          {
            std::string v97 = (std::string *)((char *)v96 + v95 - 1);
            if (v97 > v96)
            {
              std::string v98 = &v96->__r_.__value_.__s.__data_[1];
              do
              {
                std::string::value_type v99 = *(v98 - 1);
                *(v98 - 1) = v97->__r_.__value_.__s.__data_[0];
                v97->__r_.__value_.__s.__data_[0] = v99;
                std::string v97 = (std::string *)((char *)v97 - 1);
                BOOL v15 = v98++ >= (char *)v97;
              }
              while (!v15);
            }
          }
          std::string v100 = std::string::insert(&v129, 0, "exprtk.hpp:");
          long long v101 = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
          v130.__r_.__value_.__r.__words[2] = v100->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v130.__r_.__value_.__l.__data_ = v101;
          v100->__r_.__value_.__l.__size_ = 0;
          v100->__r_.__value_.__r.__words[2] = 0;
          v100->__r_.__value_.__r.__words[0] = 0;
          *((unsigned char *)&v134.__r_.__value_.__s + 23) = 0;
          v134.__r_.__value_.__s.__data_[0] = 0;
          uint64_t v135 = -1;
          long long v137 = 0u;
          long long v138 = 0u;
          long long v139 = 0u;
          long long __p = 0u;
          long long v141 = 0u;
          uint64_t v142 = 0;
          int v136 = 1;
          v133[0] = *(_DWORD *)(a1 + 104);
          std::string::operator=(&v134, v2);
          uint64_t v135 = *(void *)(a1 + 136);
          std::string::operator=((std::string *)&v137, &v131);
          std::string::operator=((std::string *)((char *)&v138 + 8), &v130);
          uint64_t v102 = *(void *)(a1 + 568);
          uint64_t v103 = *(void *)(a1 + 560);
          uint64_t v104 = 30 * ((v102 - v103) >> 3) - 1;
          if (v102 == v103) {
            uint64_t v104 = 0;
          }
          if (v104 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
          {
            sub_B4B88(a1 + 552);
            uint64_t v103 = *(void *)(a1 + 560);
            uint64_t v102 = *(void *)(a1 + 568);
          }
          if (v102 == v103)
          {
            uint64_t v38 = 0;
          }
          else
          {
            unint64_t v105 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
            uint64_t v38 = *(void *)(v103 + 8 * (v105 / 0x1E)) + 136 * (v105 % 0x1E);
          }
          goto LABEL_176;
        }
        std::string::size_type v49 = *(void *)(a1 + 24);
        std::string::size_type v50 = v39;
        if (*(void *)(a1 + 8) != v49)
        {
          *(void *)(a1 + 24) = v49 + 40;
          std::string::size_type v50 = v49;
        }
        *(_DWORD *)(a1 + 104) = *(_DWORD *)v50;
        std::string::operator=(v2, (const std::string *)(v50 + 8));
        *(void *)(a1 + 136) = *(void *)(v50 + 32);
        uint64_t v51 = sub_B7FE4(a1, 0);
        if (!v51) {
          goto LABEL_183;
        }
        if (*(_DWORD *)(a1 + 104) != 58)
        {
          v131.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
          *(_OWORD *)&v131.__r_.__value_.__r.__words[1] = xmmword_20B9380;
          strcpy(v131.__r_.__value_.__l.__data_, "ERR086 - Expected ':' for case of [*] statement");
          memset(&v129, 0, sizeof(v129));
          std::string::push_back(&v129, 55);
          std::string::push_back(&v129, 53);
          std::string::push_back(&v129, 52);
          std::string::push_back(&v129, 50);
          std::string::push_back(&v129, 50);
          std::string::size_type v106 = HIBYTE(v129.__r_.__value_.__r.__words[2]);
          if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v107 = &v129;
          }
          else {
            int v107 = (std::string *)v129.__r_.__value_.__r.__words[0];
          }
          if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v106 = v129.__r_.__value_.__l.__size_;
          }
          if (v106)
          {
            std::string v108 = (std::string *)((char *)v107 + v106 - 1);
            if (v108 > v107)
            {
              uint64_t v109 = &v107->__r_.__value_.__s.__data_[1];
              do
              {
                std::string::value_type v110 = *(v109 - 1);
                *(v109 - 1) = v108->__r_.__value_.__s.__data_[0];
                v108->__r_.__value_.__s.__data_[0] = v110;
                std::string v108 = (std::string *)((char *)v108 - 1);
                BOOL v15 = v109++ >= (char *)v108;
              }
              while (!v15);
            }
          }
          long long v111 = std::string::insert(&v129, 0, "exprtk.hpp:");
          long long v112 = *(_OWORD *)&v111->__r_.__value_.__l.__data_;
          v130.__r_.__value_.__r.__words[2] = v111->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v130.__r_.__value_.__l.__data_ = v112;
          v111->__r_.__value_.__l.__size_ = 0;
          v111->__r_.__value_.__r.__words[2] = 0;
          v111->__r_.__value_.__r.__words[0] = 0;
          *((unsigned char *)&v134.__r_.__value_.__s + 23) = 0;
          v134.__r_.__value_.__s.__data_[0] = 0;
          uint64_t v135 = -1;
          long long v137 = 0u;
          long long v138 = 0u;
          long long v139 = 0u;
          long long __p = 0u;
          long long v141 = 0u;
          uint64_t v142 = 0;
          int v136 = 1;
          v133[0] = *(_DWORD *)(a1 + 104);
          std::string::operator=(&v134, v2);
          uint64_t v135 = *(void *)(a1 + 136);
          std::string::operator=((std::string *)&v137, &v131);
          std::string::operator=((std::string *)((char *)&v138 + 8), &v130);
          uint64_t v113 = *(void *)(a1 + 568);
          uint64_t v114 = *(void *)(a1 + 560);
          uint64_t v115 = 30 * ((v113 - v114) >> 3) - 1;
          if (v113 == v114) {
            uint64_t v115 = 0;
          }
          if (v115 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
          {
            sub_B4B88(a1 + 552);
            uint64_t v114 = *(void *)(a1 + 560);
            uint64_t v113 = *(void *)(a1 + 568);
          }
          if (v113 == v114)
          {
            uint64_t v38 = 0;
          }
          else
          {
            unint64_t v116 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
            uint64_t v38 = *(void *)(v114 + 8 * (v116 / 0x1E)) + 136 * (v116 % 0x1E);
          }
          goto LABEL_176;
        }
        std::string::size_type v52 = *(void *)(a1 + 24);
        std::string::size_type v53 = v39;
        if (*(void *)(a1 + 8) != v52)
        {
          *(void *)(a1 + 24) = v52 + 40;
          std::string::size_type v53 = v52;
        }
        *(_DWORD *)(a1 + 104) = *(_DWORD *)v53;
        std::string::operator=(v2, (const std::string *)(v53 + 8));
        *(void *)(a1 + 136) = *(void *)(v53 + 32);
        uint64_t v54 = sub_B7FE4(a1, 0);
        if (!v54) {
          goto LABEL_183;
        }
        if (*(_DWORD *)(a1 + 104) != 6)
        {
          v131.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
          *(_OWORD *)&v131.__r_.__value_.__r.__words[1] = xmmword_20B8DF0;
          strcpy(v131.__r_.__value_.__l.__data_, "ERR087 - Expected ';' at end of case for [*] statement");
          memset(&v129, 0, sizeof(v129));
          std::string::push_back(&v129, 51);
          std::string::push_back(&v129, 55);
          std::string::push_back(&v129, 52);
          std::string::push_back(&v129, 50);
          std::string::push_back(&v129, 50);
          std::string::size_type v117 = HIBYTE(v129.__r_.__value_.__r.__words[2]);
          if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v118 = &v129;
          }
          else {
            std::string::size_type v118 = (std::string *)v129.__r_.__value_.__r.__words[0];
          }
          if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v117 = v129.__r_.__value_.__l.__size_;
          }
          if (v117)
          {
            unint64_t v119 = (std::string *)((char *)v118 + v117 - 1);
            if (v119 > v118)
            {
              std::string::size_type v120 = &v118->__r_.__value_.__s.__data_[1];
              do
              {
                std::string::value_type v121 = *(v120 - 1);
                *(v120 - 1) = v119->__r_.__value_.__s.__data_[0];
                v119->__r_.__value_.__s.__data_[0] = v121;
                unint64_t v119 = (std::string *)((char *)v119 - 1);
                BOOL v15 = v120++ >= (char *)v119;
              }
              while (!v15);
            }
          }
          long long v122 = std::string::insert(&v129, 0, "exprtk.hpp:");
          long long v123 = *(_OWORD *)&v122->__r_.__value_.__l.__data_;
          v130.__r_.__value_.__r.__words[2] = v122->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v130.__r_.__value_.__l.__data_ = v123;
          v122->__r_.__value_.__l.__size_ = 0;
          v122->__r_.__value_.__r.__words[2] = 0;
          v122->__r_.__value_.__r.__words[0] = 0;
          *((unsigned char *)&v134.__r_.__value_.__s + 23) = 0;
          v134.__r_.__value_.__s.__data_[0] = 0;
          uint64_t v135 = -1;
          long long v137 = 0u;
          long long v138 = 0u;
          long long v139 = 0u;
          long long __p = 0u;
          long long v141 = 0u;
          uint64_t v142 = 0;
          int v136 = 1;
          v133[0] = *(_DWORD *)(a1 + 104);
          std::string::operator=(&v134, v2);
          uint64_t v135 = *(void *)(a1 + 136);
          std::string::operator=((std::string *)&v137, &v131);
          std::string::operator=((std::string *)((char *)&v138 + 8), &v130);
          uint64_t v124 = *(void *)(a1 + 568);
          uint64_t v125 = *(void *)(a1 + 560);
          uint64_t v126 = 30 * ((v124 - v125) >> 3) - 1;
          if (v124 == v125) {
            uint64_t v126 = 0;
          }
          if (v126 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
          {
            sub_B4B88(a1 + 552);
            uint64_t v125 = *(void *)(a1 + 560);
            uint64_t v124 = *(void *)(a1 + 568);
          }
          if (v124 == v125)
          {
            uint64_t v38 = 0;
          }
          else
          {
            unint64_t v127 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
            uint64_t v38 = *(void *)(v125 + 8 * (v127 / 0x1E)) + 136 * (v127 % 0x1E);
          }
          goto LABEL_176;
        }
        std::string::size_type v55 = *(void *)(a1 + 24);
        std::string::size_type v56 = v128;
        if (*(void *)(a1 + 8) != v55)
        {
          *(void *)(a1 + 24) = v55 + 40;
          std::string::size_type v56 = v55;
        }
        *(_DWORD *)(a1 + 104) = *(_DWORD *)v56;
        std::string::operator=(v2, (const std::string *)(v56 + 8));
        *(void *)(a1 + 136) = *(void *)(v56 + 32);
        if ((*(unsigned int (**)(uint64_t))(*(void *)v51 + 32))(v51) != 2
          || (*(double (**)(uint64_t))(*(void *)v51 + 16))(v51) != 0.0)
        {
          break;
        }
        if ((*(unsigned int (**)(uint64_t))(*(void *)v51 + 32))(v51) != 17
          && (*(unsigned int (**)(uint64_t))(*(void *)v51 + 32))(v51) != 18)
        {
          (*(void (**)(uint64_t))(*(void *)v51 + 8))(v51);
        }
        if ((*(unsigned int (**)(uint64_t))(*(void *)v54 + 32))(v54) != 17
          && (*(unsigned int (**)(uint64_t))(*(void *)v54 + 32))(v54) != 18)
        {
          (*(void (**)(uint64_t))(*(void *)v54 + 8))(v54);
        }
        std::string::size_type v39 = v128;
        if (*(_DWORD *)(a1 + 104) == 125)
        {
LABEL_155:
          std::string::size_type v94 = *(void *)(a1 + 24);
          if (*(void *)(a1 + 8) != v94)
          {
            *(void *)(a1 + 24) = v94 + 40;
            std::string::size_type v39 = v94;
          }
          *(_DWORD *)(a1 + 104) = *(_DWORD *)v39;
          std::string::operator=(v2, (const std::string *)(v39 + 8));
          *(void *)(a1 + 136) = *(void *)(v39 + 32);
          uint64_t v23 = sub_D2200(a1 + 344, (uint64_t *)&v143);
          __str.__r_.__value_.__s.__data_[0] = v23 == 0;
          goto LABEL_184;
        }
      }
      uint64_t v57 = v144;
      if (v144 < v145)
      {
        *std::string v144 = v51;
        uint64_t v58 = v57 + 1;
        goto LABEL_131;
      }
      uint64_t v59 = (uint64_t)v143;
      uint64_t v60 = v144 - v143;
      unint64_t v61 = v60 + 1;
      if ((unint64_t)(v60 + 1) >> 61) {
        goto LABEL_227;
      }
      uint64_t v62 = (char *)v145 - (char *)v143;
      if (((char *)v145 - (char *)v143) >> 2 > v61) {
        unint64_t v61 = v62 >> 2;
      }
      unint64_t v63 = (unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v61;
      if (v63) {
        break;
      }
      unint64_t v65 = 0;
      long long v66 = (uint64_t *)(8 * v60);
      *(void *)(8 * v60) = v51;
      uint64_t v58 = (uint64_t *)(8 * v60 + 8);
      if (v57 != (uint64_t *)v59) {
        goto LABEL_122;
      }
LABEL_129:
      std::string v143 = v66;
      std::string v144 = v58;
      std::string v145 = (uint64_t *)&v65[8 * v63];
      if (v57) {
        operator delete(v57);
      }
LABEL_131:
      std::string v144 = v58;
      if (v58 < v145)
      {
        *uint64_t v58 = v54;
        uint64_t v76 = (uint64_t)(v58 + 1);
        goto LABEL_154;
      }
      uint64_t v77 = (uint64_t)v143;
      uint64_t v78 = v58 - v143;
      unint64_t v79 = v78 + 1;
      if ((unint64_t)(v78 + 1) >> 61) {
LABEL_227:
      }
        sub_2E00();
      uint64_t v80 = (char *)v145 - (char *)v143;
      if (((char *)v145 - (char *)v143) >> 2 > v79) {
        unint64_t v79 = v80 >> 2;
      }
      if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v81 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v81 = v79;
      }
      if (v81)
      {
        if (v81 >> 61) {
LABEL_228:
        }
          sub_188D718();
        uint64_t v82 = (char *)operator new(8 * v81);
        uint64_t v83 = (uint64_t *)&v82[8 * v78];
        unint64_t v84 = &v82[8 * v81];
        *uint64_t v83 = v54;
        uint64_t v76 = (uint64_t)(v83 + 1);
        if (v58 == (uint64_t *)v77)
        {
LABEL_145:
          std::string v143 = v83;
          std::string v144 = (uint64_t *)v76;
          std::string v145 = (uint64_t *)v84;
LABEL_153:
          operator delete(v58);
          goto LABEL_154;
        }
      }
      else
      {
        uint64_t v82 = 0;
        uint64_t v83 = (uint64_t *)(8 * v78);
        unint64_t v84 = 0;
        *(void *)(8 * v78) = v54;
        uint64_t v76 = 8 * v78 + 8;
        if (v58 == (uint64_t *)v77) {
          goto LABEL_145;
        }
      }
      unint64_t v85 = (unint64_t)v58 - v77 - 8;
      if (v85 < 0x58)
      {
        BOOL v86 = v58;
        goto LABEL_151;
      }
      if ((unint64_t)(v77 - (void)v82) < 0x20)
      {
        BOOL v86 = v58;
        do
        {
LABEL_151:
          uint64_t v93 = *--v86;
          *--uint64_t v83 = v93;
        }
        while (v86 != (uint64_t *)v77);
        goto LABEL_152;
      }
      uint64_t v87 = (v85 >> 3) + 1;
      uint64_t v88 = 8 * (v87 & 0x3FFFFFFFFFFFFFFCLL);
      BOOL v86 = &v58[v88 / 0xFFFFFFFFFFFFFFF8];
      uint64_t v83 = (uint64_t *)((char *)v83 - v88);
      uint64_t v89 = &v82[8 * v78 - 16];
      unint64_t v90 = v58 - 2;
      uint64_t v91 = v87 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v92 = *(_OWORD *)v90;
        *((_OWORD *)v89 - 1) = *((_OWORD *)v90 - 1);
        *(_OWORD *)uint64_t v89 = v92;
        v89 -= 32;
        v90 -= 4;
        v91 -= 4;
      }
      while (v91);
      if (v87 != (v87 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_151;
      }
LABEL_152:
      uint64_t v58 = v143;
      std::string v143 = v83;
      std::string v144 = (uint64_t *)v76;
      std::string v145 = (uint64_t *)v84;
      if (v58) {
        goto LABEL_153;
      }
LABEL_154:
      std::string v144 = (uint64_t *)v76;
      std::string::size_type v39 = v128;
      if (*(_DWORD *)(a1 + 104) == 125) {
        goto LABEL_155;
      }
    }
    if (v63 >> 61) {
      goto LABEL_228;
    }
    unint64_t v64 = v63;
    unint64_t v65 = (char *)operator new(8 * v63);
    unint64_t v63 = v64;
    long long v66 = (uint64_t *)&v65[8 * v60];
    *long long v66 = v51;
    uint64_t v58 = v66 + 1;
    if (v57 == (uint64_t *)v59) {
      goto LABEL_129;
    }
LABEL_122:
    unint64_t v67 = (unint64_t)v57 - v59 - 8;
    if (v67 < 0x58) {
      goto LABEL_231;
    }
    if ((unint64_t)(v59 - (void)v65) < 0x20) {
      goto LABEL_231;
    }
    uint64_t v68 = (v67 >> 3) + 1;
    uint64_t v69 = 8 * (v68 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v70 = (char *)&v57[v69 / 0xFFFFFFFFFFFFFFF8];
    long long v66 = (uint64_t *)((char *)v66 - v69);
    std::string::size_type v71 = &v65[8 * v60 - 16];
    long long v72 = (char *)(v57 - 2);
    uint64_t v73 = v68 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v74 = *(_OWORD *)v72;
      *((_OWORD *)v71 - 1) = *((_OWORD *)v72 - 1);
      *(_OWORD *)std::string::size_type v71 = v74;
      v71 -= 32;
      v72 -= 32;
      v73 -= 4;
    }
    while (v73);
    uint64_t v57 = (uint64_t *)v70;
    if (v68 != (v68 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_231:
      do
      {
        uint64_t v75 = *--v57;
        *--long long v66 = v75;
      }
      while (v57 != (uint64_t *)v59);
    }
    uint64_t v57 = v143;
    goto LABEL_129;
  }
  v131.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  *(_OWORD *)&v131.__r_.__value_.__r.__words[1] = xmmword_20B9380;
  strcpy(v131.__r_.__value_.__l.__data_, "ERR084 - Expected '{' for call to [*] statement");
  memset(&v129, 0, sizeof(v129));
  std::string::push_back(&v129, 54);
  std::string::push_back(&v129, 50);
  std::string::push_back(&v129, 52);
  std::string::push_back(&v129, 50);
  std::string::push_back(&v129, 50);
  std::string::size_type v27 = HIBYTE(v129.__r_.__value_.__r.__words[2]);
  if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v28 = &v129;
  }
  else {
    std::string::size_type v28 = (std::string *)v129.__r_.__value_.__r.__words[0];
  }
  if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v27 = v129.__r_.__value_.__l.__size_;
  }
  if (v27)
  {
    std::string::size_type v29 = (std::string *)((char *)v28 + v27 - 1);
    if (v29 > v28)
    {
      unint64_t v30 = &v28->__r_.__value_.__s.__data_[1];
      do
      {
        std::string::value_type v31 = *(v30 - 1);
        *(v30 - 1) = v29->__r_.__value_.__s.__data_[0];
        v29->__r_.__value_.__s.__data_[0] = v31;
        std::string::size_type v29 = (std::string *)((char *)v29 - 1);
        BOOL v15 = v30++ >= (char *)v29;
      }
      while (!v15);
    }
  }
  uint64_t v32 = std::string::insert(&v129, 0, "exprtk.hpp:");
  long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v130.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v130.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  *((unsigned char *)&v134.__r_.__value_.__s + 23) = 0;
  v134.__r_.__value_.__s.__data_[0] = 0;
  uint64_t v135 = -1;
  long long v137 = 0u;
  long long v138 = 0u;
  long long v139 = 0u;
  long long __p = 0u;
  long long v141 = 0u;
  uint64_t v142 = 0;
  int v136 = 1;
  v133[0] = *(_DWORD *)(a1 + 104);
  std::string::operator=(&v134, v2);
  uint64_t v135 = *(void *)(a1 + 136);
  std::string::operator=((std::string *)&v137, &v131);
  std::string::operator=((std::string *)((char *)&v138 + 8), &v130);
  uint64_t v34 = *(void *)(a1 + 568);
  uint64_t v35 = *(void *)(a1 + 560);
  uint64_t v36 = 30 * ((v34 - v35) >> 3) - 1;
  if (v34 == v35) {
    uint64_t v36 = 0;
  }
  if (v36 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
  {
    sub_B4B88(a1 + 552);
    uint64_t v35 = *(void *)(a1 + 560);
    uint64_t v34 = *(void *)(a1 + 568);
  }
  if (v34 == v35)
  {
    uint64_t v38 = 0;
  }
  else
  {
    unint64_t v37 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
    uint64_t v38 = *(void *)(v35 + 8 * (v37 / 0x1E)) + 136 * (v37 % 0x1E);
  }
LABEL_176:
  sub_B5158(v38, (uint64_t)v133);
  ++*(void *)(a1 + 592);
  if (SBYTE7(v141) < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v139) & 0x80000000) == 0)
    {
LABEL_178:
      if ((SBYTE7(v138) & 0x80000000) == 0) {
        goto LABEL_179;
      }
      goto LABEL_188;
    }
  }
  else if ((SHIBYTE(v139) & 0x80000000) == 0)
  {
    goto LABEL_178;
  }
  operator delete(*((void **)&v138 + 1));
  if ((SBYTE7(v138) & 0x80000000) == 0)
  {
LABEL_179:
    if ((SHIBYTE(v134.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_180;
    }
    goto LABEL_189;
  }
LABEL_188:
  operator delete((void *)v137);
  if ((SHIBYTE(v134.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_180:
    if ((SHIBYTE(v130.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_181;
    }
    goto LABEL_190;
  }
LABEL_189:
  operator delete(v134.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v130.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_181:
    if ((SHIBYTE(v129.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_182;
    }
LABEL_191:
    operator delete(v129.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_183;
    }
LABEL_192:
    operator delete(v131.__r_.__value_.__l.__data_);
    goto LABEL_183;
  }
LABEL_190:
  operator delete(v130.__r_.__value_.__l.__data_);
  if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_191;
  }
LABEL_182:
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_192;
  }
LABEL_183:
  uint64_t v23 = 0;
LABEL_184:
  sub_22094C((uint64_t)&__str);
  int64_t v24 = v143;
  if (v143) {
    goto LABEL_39;
  }
  return v23;
}

void sub_D148C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  sub_22094C((uint64_t)&a29);
  unint64_t v37 = *(void **)(v35 - 120);
  if (v37)
  {
    *(void *)(v35 - 112) = v37;
    operator delete(v37);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_D167C(uint64_t a1, _DWORD *a2, char **a3)
{
  __darwin_ct_rune_t v7 = *a3;
  std::string::size_type v6 = a3[1];
  if (v6 == *a3)
  {
LABEL_35:
    return sub_D3080(a1, a2);
  }
  else
  {
    unint64_t v8 = (v6 - *a3) >> 3;
    if (v8 <= 1) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = (v6 - *a3) >> 3;
    }
    if (!*(void *)v7) {
      goto LABEL_10;
    }
    uint64_t v10 = 1;
    do
    {
      unint64_t v11 = v10;
      if (v9 == v10) {
        break;
      }
    }
    while (*(void *)&v7[8 * v10++]);
    if (v11 < v8)
    {
LABEL_10:
      unint64_t v13 = 0;
      while (1)
      {
        uint64_t v14 = *(void *)&v7[8 * v13];
        if (!v14 || (*(unsigned int (**)(uint64_t))(*(void *)v14 + 32))(v14) == 17) {
          goto LABEL_12;
        }
        uint64_t v15 = *(void *)&v7[8 * v13];
        if (v15)
        {
          if ((*(unsigned int (**)(uint64_t))(*(void *)v15 + 32))(v15) == 18) {
            goto LABEL_12;
          }
          uint64_t v16 = *(void *)&v7[8 * v13];
          if (v16) {
            (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
          }
        }
        *(void *)&v7[8 * v13] = 0;
LABEL_12:
        ++v13;
        __darwin_ct_rune_t v7 = *a3;
        if (v13 >= (a3[1] - *a3) >> 3)
        {
          uint64_t result = 0;
          a3[1] = v7;
          return result;
        }
      }
    }
    uint64_t v18 = *(void *)v7;
    if (*(void *)v7)
    {
      unint64_t v19 = 1;
      do
      {
        int v20 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 32))(v18);
        __darwin_ct_rune_t v7 = *a3;
        std::string::size_type v6 = a3[1];
        if (v20 != 2) {
          break;
        }
        if (v19 >= (v6 - v7) >> 3) {
          goto LABEL_35;
        }
        uint64_t v18 = *(void *)&v7[8 * v19++];
      }
      while (v18);
    }
    if (v6 - v7 == 8 && *(void *)v7)
    {
      int v21 = (*(uint64_t (**)(void))(**(void **)v7 + 32))(*(void *)v7);
      if ((v21 - 124) <= 0x11 && ((1 << (v21 - 124)) & 0x3C5E1) != 0)
      {
        return sub_D33A0(a1, a2, a3);
      }
      __darwin_ct_rune_t v7 = *a3;
      std::string::size_type v6 = a3[1];
    }
    if (v6 - v7 == 8 && (*a2 - 9) <= 4) {
      return *(void *)v7;
    }
    if (v6 == v7)
    {
LABEL_47:
      return sub_D3948(a1, a2);
    }
    else
    {
      unint64_t v23 = 0;
      while (1)
      {
        uint64_t v24 = *(void *)&v7[8 * v23];
        if (!v24 || (*(unsigned int (**)(uint64_t))(*(void *)v24 + 32))(v24) != 17) {
          break;
        }
        ++v23;
        __darwin_ct_rune_t v7 = *a3;
        if (v23 >= (a3[1] - *a3) >> 3) {
          goto LABEL_47;
        }
      }
      uint64_t result = 0;
      switch(*a2)
      {
        case 9:
          sub_D3CBC();
        case 0xA:
          sub_D3D28();
        case 0xB:
          sub_D3C50();
        case 0xC:
          sub_D3B78();
        case 0xD:
          sub_D3BE4();
        case 0xE:
        case 0xF:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x13:
        case 0x14:
        case 0x15:
        case 0x16:
        case 0x17:
        case 0x18:
        case 0x19:
        case 0x1A:
        case 0x1B:
          return result;
        case 0x1C:
          sub_D3D94();
        case 0x1D:
          sub_D3E00();
        default:
          if (*a2 == 90)
          {
            sub_D3E6C();
          }
          return result;
      }
    }
  }
}

uint64_t sub_D1B74@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  switch((int)result)
  {
    case 0:
      a2[23] = 4;
      strcpy(a2, "NONE");
      break;
    case 1:
      a2[23] = 5;
      strcpy(a2, "ERROR");
      break;
    case 2:
      a2[23] = 12;
      strcpy(a2, "ERROR_SYMBOL");
      break;
    case 3:
      a2[23] = 12;
      strcpy(a2, "ERROR_NUMBER");
      break;
    case 4:
      a2[23] = 12;
      strcpy(a2, "ERROR_STRING");
      break;
    case 6:
      a2[23] = 3;
      *(_DWORD *)a2 = 4607813;
      break;
    case 7:
      a2[23] = 6;
      strcpy(a2, "NUMBER");
      break;
    case 8:
      a2[23] = 6;
      strcpy(a2, "SYMBOL");
      break;
    case 9:
      a2[23] = 6;
      strcpy(a2, "STRING");
      break;
    case 10:
      a2[23] = 2;
      strcpy(a2, ":=");
      break;
    case 11:
      a2[23] = 2;
      strcpy(a2, "+=");
      break;
    case 12:
      a2[23] = 2;
      strcpy(a2, "-=");
      break;
    case 13:
      a2[23] = 2;
      strcpy(a2, "*=");
      break;
    case 14:
      a2[23] = 2;
      strcpy(a2, "/=");
      break;
    case 15:
      a2[23] = 2;
      strcpy(a2, "%=");
      break;
    case 16:
      a2[23] = 2;
      strcpy(a2, ">>");
      break;
    case 17:
      a2[23] = 2;
      strcpy(a2, "<<");
      break;
    case 18:
      a2[23] = 2;
      strcpy(a2, "<=");
      break;
    case 19:
      a2[23] = 2;
      strcpy(a2, "!=");
      break;
    case 20:
      a2[23] = 2;
      strcpy(a2, ">=");
      break;
    case 21:
      a2[23] = 3;
      *(_DWORD *)a2 = 4078908;
      break;
    case 37:
      a2[23] = 1;
      *(_WORD *)a2 = 37;
      break;
    case 40:
      a2[23] = 1;
      *(_WORD *)a2 = 40;
      break;
    case 41:
      a2[23] = 1;
      *(_WORD *)a2 = 41;
      break;
    case 42:
      a2[23] = 1;
      *(_WORD *)a2 = 42;
      break;
    case 43:
      a2[23] = 1;
      *(_WORD *)a2 = 43;
      break;
    case 44:
      a2[23] = 1;
      *(_WORD *)a2 = 44;
      break;
    case 45:
      a2[23] = 1;
      *(_WORD *)a2 = 45;
      break;
    case 47:
      a2[23] = 1;
      *(_WORD *)a2 = 47;
      break;
    case 58:
      a2[23] = 1;
      *(_WORD *)a2 = 58;
      break;
    case 60:
      a2[23] = 1;
      *(_WORD *)a2 = 60;
      break;
    case 61:
      a2[23] = 1;
      *(_WORD *)a2 = 61;
      break;
    case 62:
      a2[23] = 1;
      *(_WORD *)a2 = 62;
      break;
    case 63:
      a2[23] = 1;
      *(_WORD *)a2 = 63;
      break;
    case 91:
      a2[23] = 1;
      *(_WORD *)a2 = 91;
      break;
    case 93:
      a2[23] = 1;
      *(_WORD *)a2 = 93;
      break;
    case 94:
      a2[23] = 1;
      *(_WORD *)a2 = 94;
      break;
    case 123:
      a2[23] = 1;
      *(_WORD *)a2 = 123;
      break;
    case 125:
      a2[23] = 1;
      *(_WORD *)a2 = 125;
      break;
    default:
      a2[23] = 7;
      strcpy(a2, "UNKNOWN");
      break;
  }
  return result;
}

uint64_t *sub_D218C(uint64_t *result)
{
  uint64_t v1 = *result;
  uint64_t v2 = *(void *)(*result + 880);
  unint64_t v3 = *(void *)(*result + 656);
  uint64_t v4 = *(void *)(*result + 888) - v2;
  if (v4)
  {
    unint64_t v5 = v4 / 96;
    if (v5 <= 1) {
      unint64_t v5 = 1;
    }
    std::string::size_type v6 = (unsigned char *)(v2 + 68);
    do
    {
      if (*v6 && *(void *)(v6 - 28) >= v3) {
        unsigned char *v6 = 0;
      }
      v6 += 96;
      --v5;
    }
    while (v5);
  }
  *(void *)(v1 + 656) = v3 - 1;
  return result;
}

uint64_t sub_D2200(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (void *)*a2;
  uint64_t v5 = a2[1] - *a2;
  if (v5)
  {
    unint64_t v6 = v5 >> 3;
    if (v6 <= 1) {
      uint64_t v7 = 1;
    }
    else {
      uint64_t v7 = v6;
    }
    if (!*v4) {
      goto LABEL_10;
    }
    uint64_t v8 = 1;
    do
    {
      unint64_t v9 = v8;
      if (v7 == v8) {
        break;
      }
    }
    while (v4[v8++]);
    if (v9 < v6)
    {
LABEL_10:
      unint64_t v11 = 0;
      while (1)
      {
        uint64_t v12 = v4[v11];
        if (!v12 || (*(unsigned int (**)(uint64_t))(*(void *)v12 + 32))(v12) == 17) {
          goto LABEL_12;
        }
        uint64_t v13 = v4[v11];
        if (v13)
        {
          if ((*(unsigned int (**)(uint64_t))(*(void *)v13 + 32))(v13) == 18) {
            goto LABEL_12;
          }
          uint64_t v14 = v4[v11];
          if (v14) {
            (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
          }
        }
        v4[v11] = 0;
LABEL_12:
        ++v11;
        uint64_t v4 = (void *)*a2;
        if (v11 >= (a2[1] - *a2) >> 3)
        {
          a2[1] = (uint64_t)v4;
          return 0;
        }
      }
    }
    unint64_t v16 = 0;
    do
    {
      uint64_t v17 = v4[v16];
      if (!v17 || (*(unsigned int (**)(uint64_t))(*(void *)v17 + 32))(v17) != 2) {
        operator new();
      }
      ++v16;
      uint64_t v4 = (void *)*a2;
    }
    while (v16 < (a2[1] - *a2) >> 3);
  }

  return sub_D2404(a1, a2);
}

void sub_D23E0()
{
}

uint64_t sub_D2404(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if ((unint64_t)(a2[1] - *a2) < 0x10) {
    goto LABEL_7;
  }
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  unint64_t v6 = 0;
  do
  {
    uint64_t v7 = *(void *)(v3 + v4);
    uint64_t v8 = *(void *)(v3 + v4 + 8);
    if ((*(double (**)(uint64_t))(*(void *)v7 + 16))(v7) != 0.0) {
      uint64_t v5 = v8;
    }
    ++v6;
    uint64_t v3 = *a2;
    uint64_t v9 = a2[1];
    v4 += 16;
  }
  while (v6 < (unint64_t)((v9 - *a2) >> 3) >> 1);
  if (!v5) {
LABEL_7:
  }
    operator new();
  if (v9 != v3)
  {
    for (unint64_t i = 0; i < (a2[1] - *a2) >> 3; ++i)
    {
      uint64_t v11 = *(void *)(v3 + 8 * i);
      if (v11) {
        BOOL v12 = v11 == v5;
      }
      else {
        BOOL v12 = 1;
      }
      if (v12 || (*(unsigned int (**)(uint64_t))(*(void *)v11 + 32))(v11) == 17) {
        goto LABEL_11;
      }
      uint64_t v13 = *(void *)(v3 + 8 * i);
      if (v13)
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)v13 + 32))(v13) == 18) {
          goto LABEL_11;
        }
        uint64_t v14 = *(void *)(v3 + 8 * i);
        if (v14) {
          (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
        }
      }
      *(void *)(v3 + 8 * i) = 0;
LABEL_11:
      uint64_t v3 = *a2;
    }
  }
  return v5;
}

uint64_t sub_D25AC(uint64_t a1, uint64_t *a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v3 = (uint64_t *)(a1 + 8);
  *(void *)a1 = off_23FF510;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v4 = a2[1];
  uint64_t v5 = v4 - *a2;
  if ((v5 & 8) != 0) {
    return a1;
  }
  if (v4 == *a2)
  {
    unint64_t v10 = 0;
    uint64_t v7 = 0;
    BOOL v12 = 1;
  }
  else
  {
    sub_D2BFC((void **)(a1 + 8), v5 >> 3);
    uint64_t v7 = *(char **)(a1 + 32);
    uint64_t v8 = *(char **)(a1 + 40);
    uint64_t v9 = a2[1] - *a2;
    unint64_t v10 = v9 >> 3;
    unint64_t v11 = v8 - v7;
    BOOL v12 = v9 >> 3 >= (unint64_t)(v8 - v7);
    size_t v13 = (v9 >> 3) - (v8 - v7);
    if (v9 >> 3 > (unint64_t)(v8 - v7))
    {
      uint64_t v14 = *(void *)(a1 + 48);
      if (v14 - (uint64_t)v8 >= v13)
      {
        bzero(*(void **)(a1 + 40), (v9 >> 3) - (v8 - v7));
        *(void *)(a1 + 40) = &v8[v13];
        goto LABEL_27;
      }
      if (v9 < 0) {
        sub_2E00();
      }
      unint64_t v15 = v14 - (void)v7;
      unint64_t v16 = 2 * (v14 - (void)v7);
      if (v16 <= v10) {
        unint64_t v16 = v10;
      }
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v17 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v17 = v16;
      }
      uint64_t v18 = (char *)operator new(v17);
      __darwin_ct_rune_t v43 = &v18[v17];
      unint64_t v19 = v18;
      uint64_t v42 = &v18[v10];
      int v20 = &v18[v11];
      bzero(&v18[v11], v13);
      if (v8 == v7)
      {
        uint64_t v22 = v43;
        unint64_t v19 = v20;
      }
      else
      {
        if (v11 < 8 || (unint64_t)(v7 - v19) < 0x20)
        {
          int v21 = v8;
LABEL_15:
          unint64_t v23 = v42;
          uint64_t v22 = v43;
          goto LABEL_16;
        }
        if (v11 < 0x20)
        {
          unint64_t v33 = 0;
          goto LABEL_45;
        }
        unint64_t v33 = v11 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v34 = (long long *)(v8 - 16);
        uint64_t v35 = &v19[v8 - 16 - v7];
        unint64_t v36 = v11 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v37 = *v34;
          *((_OWORD *)v35 - 1) = *(v34 - 1);
          *(_OWORD *)uint64_t v35 = v37;
          v35 -= 32;
          v34 -= 2;
          v36 -= 32;
        }
        while (v36);
        if (v11 != v33)
        {
          if ((v11 & 0x18) == 0)
          {
            v20 -= v33;
            int v21 = &v8[-v33];
            goto LABEL_15;
          }
LABEL_45:
          int v21 = &v8[-(v11 & 0xFFFFFFFFFFFFFFF8)];
          v20 -= v11 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v38 = &v8[-v33 - 8];
          int64_t v39 = v38 - v7;
          unint64_t v40 = v33 - (v11 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v41 = *(void *)v38;
            v38 -= 8;
            *(void *)&v19[v39] = v41;
            v39 -= 8;
            v40 += 8;
          }
          while (v40);
          unint64_t v23 = v42;
          uint64_t v22 = v43;
          if (v11 == (v11 & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_25:
            *(void *)(a1 + 32) = v19;
            *(void *)(a1 + 40) = v23;
            *(void *)(a1 + 48) = v22;
            if (v7) {
              operator delete(v7);
            }
            goto LABEL_27;
          }
LABEL_16:
          uint64_t v24 = v20 - 1;
          do
          {
            char v25 = *--v21;
            *v24-- = v25;
          }
          while (v21 != v7);
          goto LABEL_25;
        }
        uint64_t v22 = v43;
      }
      unint64_t v23 = v42;
      goto LABEL_25;
    }
  }
  if (!v12) {
    *(void *)(a1 + 40) = &v7[v10];
  }
LABEL_27:
  uint64_t v26 = *a2;
  if (a2[1] != *a2)
  {
    unint64_t v27 = 0;
    while (1)
    {
      uint64_t v29 = *(void *)(v26 + 8 * v27);
      uint64_t v30 = *v3;
      if (!v29) {
        break;
      }
      *(void *)(v30 + 8 * v27) = v29;
      uint64_t v31 = *(void *)(*v3 + 8 * v27);
      if (v31) {
        BOOL v28 = (*(unsigned int (**)(void))(*(void *)v31 + 32))(*(void *)(*v3 + 8 * v27)) != 17
      }
           && (*(unsigned int (**)(uint64_t))(*(void *)v31 + 32))(v31) != 18;
      else {
        BOOL v28 = 1;
      }
      *(unsigned char *)(*(void *)(a1 + 32) + v27++) = v28;
      uint64_t v26 = *a2;
      if (v27 >= (a2[1] - *a2) >> 3) {
        return a1;
      }
    }
    *(void *)(a1 + 16) = v30;
    *(void *)(a1 + 40) = *(void *)(a1 + 32);
  }
  return a1;
}

void sub_D28F0(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 40) = v5;
    operator delete(v5);
    unint64_t v6 = *v2;
    if (!*v2) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    unint64_t v6 = *v2;
    if (!*v2) {
      goto LABEL_3;
    }
  }
  *(void *)(v1 + 16) = v6;
  operator delete(v6);
  _Unwind_Resume(exception_object);
}

void *sub_D2930(void *a1)
{
  *a1 = off_23FF510;
  uint64_t v3 = (void *)a1[1];
  uint64_t v2 = (unsigned char *)a1[2];
  if (v2 == (unsigned char *)v3)
  {
    uint64_t v3 = (void *)a1[2];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v3[v4];
      if (v5 && *(unsigned char *)(a1[4] + v4))
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        v3[v4] = 0;
        uint64_t v3 = (void *)a1[1];
        uint64_t v2 = (unsigned char *)a1[2];
      }
      ++v4;
    }
    while (v4 < (v2 - (unsigned char *)v3) >> 3);
  }
  unint64_t v6 = (void *)a1[4];
  if (v6)
  {
    a1[5] = v6;
    operator delete(v6);
    uint64_t v3 = (void *)a1[1];
  }
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_D2A08(void *a1)
{
  *a1 = off_23FF510;
  uint64_t v3 = (void *)a1[1];
  uint64_t v2 = (unsigned char *)a1[2];
  if (v2 == (unsigned char *)v3)
  {
    uint64_t v3 = (void *)a1[2];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v3[v4];
      if (v5 && *(unsigned char *)(a1[4] + v4))
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        v3[v4] = 0;
        uint64_t v3 = (void *)a1[1];
        uint64_t v2 = (unsigned char *)a1[2];
      }
      ++v4;
    }
    while (v4 < (v2 - (unsigned char *)v3) >> 3);
  }
  unint64_t v6 = (void *)a1[4];
  if (v6)
  {
    a1[5] = v6;
    operator delete(v6);
    uint64_t v3 = (void *)a1[1];
  }
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }

  operator delete();
}

double sub_D2B00(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v1 == v2) {
    return NAN;
  }
  uint64_t v3 = (v2 - v1) >> 3;
  unint64_t v4 = v3 - 1;
  if (v3 != 1)
  {
    unint64_t v6 = 0;
    double v7 = 0.0;
    do
    {
      uint64_t v8 = (void *)(*(void *)(a1 + 8) + 8 * v6);
      uint64_t v9 = v8[1];
      if ((*(double (**)(void))(*(void *)*v8 + 16))() != 0.0) {
        double v7 = (*(double (**)(uint64_t))(*(void *)v9 + 16))(v9);
      }
      v6 += 2;
    }
    while (v6 < v4);
    return v7;
  }
  return 0.0;
}

uint64_t sub_D2BF4()
{
  return 14;
}

void sub_D2BFC(void **a1, unint64_t a2)
{
  uint64_t v5 = (char *)a1[1];
  unint64_t v4 = a1[2];
  unint64_t v6 = v5;
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      unint64_t v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    double v7 = (char *)*a1;
    uint64_t v8 = v5 - (unsigned char *)*a1;
    uint64_t v9 = v8 >> 3;
    unint64_t v10 = (v8 >> 3) + a2;
    if (v10 >> 61) {
      sub_2E00();
    }
    uint64_t v11 = v4 - v7;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 61) {
        sub_188D718();
      }
      size_t v13 = operator new(8 * v12);
    }
    else
    {
      size_t v13 = 0;
    }
    uint64_t v14 = &v13[8 * v9];
    size_t v15 = 8 * a2;
    unint64_t v16 = &v13[8 * v12];
    bzero(v14, v15);
    size_t v17 = &v14[v15];
    if (v5 != v7)
    {
      unint64_t v18 = v5 - v7 - 8;
      if (v18 < 0x58) {
        goto LABEL_32;
      }
      if ((unint64_t)(v5 - v13 - v8) < 0x20) {
        goto LABEL_32;
      }
      uint64_t v19 = (v18 >> 3) + 1;
      uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      unint64_t v6 = &v5[-v20];
      v14 -= v20;
      int v21 = &v13[8 * v9 - 16];
      uint64_t v22 = v5 - 16;
      uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *int v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_32:
        do
        {
          uint64_t v25 = *((void *)v6 - 1);
          v6 -= 8;
          *((void *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
      unint64_t v6 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v16;
    if (v6)
    {
      operator delete(v6);
    }
  }
}

void sub_D2DB0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3 <= 8)
  {
    if (((1 << a3) & 0x1D6) != 0)
    {
      if (!*(unsigned char *)(a1 + 8)) {
        return;
      }
      if (*(char *)(a2 + 23) < 0)
      {
        sub_4200(__p, *(void **)a2, *(void *)(a2 + 8));
        int v11 = a3;
        unint64_t v5 = *(void *)(a1 + 24);
        if (v5 >= *(void *)(a1 + 32)) {
          goto LABEL_15;
        }
      }
      else
      {
        *(_OWORD *)long long __p = *(_OWORD *)a2;
        uint64_t v10 = *(void *)(a2 + 16);
        int v11 = a3;
        unint64_t v5 = *(void *)(a1 + 24);
        if (v5 >= *(void *)(a1 + 32)) {
          goto LABEL_15;
        }
      }
LABEL_13:
      long long v6 = *(_OWORD *)__p;
      *(void *)(v5 + 16) = v10;
      *(_OWORD *)unint64_t v5 = v6;
      *(_DWORD *)(v5 + 24) = v11;
      *(void *)(a1 + 24) = v5 + 32;
      return;
    }
    if (a3 == 5 && *(unsigned char *)(a1 + 9))
    {
      if (*(char *)(a2 + 23) < 0)
      {
        sub_4200(__p, *(void **)a2, *(void *)(a2 + 8));
        int v11 = 5;
        unint64_t v5 = *(void *)(a1 + 24);
        if (v5 < *(void *)(a1 + 32)) {
          goto LABEL_13;
        }
      }
      else
      {
        *(_OWORD *)long long __p = *(_OWORD *)a2;
        uint64_t v10 = *(void *)(a2 + 16);
        int v11 = 5;
        unint64_t v5 = *(void *)(a1 + 24);
        if (v5 < *(void *)(a1 + 32)) {
          goto LABEL_13;
        }
      }
LABEL_15:
      double v7 = sub_D2F30((void **)(a1 + 16), (uint64_t)__p);
      int v8 = SHIBYTE(v10);
      *(void *)(a1 + 24) = v7;
      if (v8 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_D2F10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_D2F30(void **a1, uint64_t a2)
{
  uint64_t v3 = ((unsigned char *)a1[1] - (unsigned char *)*a1) >> 5;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v5 = (unsigned char *)a1[2] - (unsigned char *)*a1;
  if (v5 >> 4 > v4) {
    unint64_t v4 = v5 >> 4;
  }
  BOOL v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFE0;
  unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  if (!v6) {
    unint64_t v7 = v4;
  }
  if (v7 >> 59) {
    sub_188D718();
  }
  uint64_t v9 = 32 * v7;
  uint64_t v10 = (char *)operator new(32 * v7);
  int v11 = &v10[32 * v3];
  unint64_t v12 = &v10[v9];
  *(_OWORD *)int v11 = *(_OWORD *)a2;
  *((void *)v11 + 2) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *((_DWORD *)v11 + 6) = *(_DWORD *)(a2 + 24);
  size_t v13 = v11 + 32;
  uint64_t v14 = (char *)*a1;
  size_t v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
    if (!v15) {
      return v13;
    }
    goto LABEL_16;
  }
  do
  {
    long long v16 = *((_OWORD *)v15 - 2);
    *((void *)v11 - 2) = *((void *)v15 - 2);
    *((_OWORD *)v11 - 2) = v16;
    *((void *)v15 - 3) = 0;
    *((void *)v15 - 2) = 0;
    *((void *)v15 - 4) = 0;
    *((_DWORD *)v11 - 2) = *((_DWORD *)v15 - 2);
    v11 -= 32;
    v15 -= 32;
  }
  while (v15 != v14);
  size_t v17 = (char *)*a1;
  size_t v15 = (char *)a1[1];
  *a1 = v11;
  a1[1] = v13;
  a1[2] = v12;
  if (v15 != v17)
  {
    do
    {
      if (*(v15 - 9) < 0) {
        operator delete(*((void **)v15 - 4));
      }
      v15 -= 32;
    }
    while (v15 != v17);
    size_t v15 = v17;
  }
  if (v15) {
LABEL_16:
  }
    operator delete(v15);
  return v13;
}

uint64_t sub_D3080(uint64_t a1, _DWORD *a2)
{
  uint64_t result = 0;
  switch(*a2)
  {
    case 9:
      operator new();
    case 0xA:
      operator new();
    case 0xB:
      operator new();
    case 0xC:
      operator new();
    case 0xD:
      operator new();
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
      return result;
    case 0x1C:
      operator new();
    case 0x1D:
      operator new();
    default:
      if (*a2 == 90) {
        operator new();
      }
      return result;
  }
  return result;
}

void sub_D330C()
{
}

uint64_t sub_D33A0(uint64_t a1, _DWORD *a2, void *a3)
{
  if (a3[1] - *a3 == 8)
  {
    switch(*a2)
    {
      case 9:
        operator new();
      case 0xA:
        operator new();
      case 0xB:
        operator new();
      case 0xC:
        operator new();
      case 0xD:
        operator new();
      default:
        return 0;
    }
  }
  return 0;
}

void sub_D3900()
{
}

uint64_t sub_D3948(uint64_t a1, _DWORD *a2)
{
  switch(*a2)
  {
    case 9:
      operator new();
    case 0xA:
      operator new();
    case 0xB:
      operator new();
    case 0xC:
      operator new();
    case 0xD:
      operator new();
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
      return 0;
    case 0x1C:
      operator new();
    case 0x1D:
      operator new();
    default:
      if (*a2 == 90) {
        operator new();
      }
      return result;
  }
  return 0;
}

void sub_D3AE4()
{
}

void sub_D3B78()
{
}

void sub_D3BC0()
{
}

void sub_D3BE4()
{
}

void sub_D3C2C()
{
}

void sub_D3C50()
{
}

void sub_D3C98()
{
}

void sub_D3CBC()
{
}

void sub_D3D04()
{
}

void sub_D3D28()
{
}

void sub_D3D70()
{
}

void sub_D3D94()
{
}

void sub_D3DDC()
{
}

void sub_D3E00()
{
}

void sub_D3E48()
{
}

void sub_D3E6C()
{
}

void sub_D3EB4()
{
}

uint64_t sub_D3ED8(uint64_t a1)
{
  *(void *)a1 = off_23FF560;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_D3F50(uint64_t a1)
{
  *(void *)a1 = off_23FF560;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_D3FE8(uint64_t a1)
{
  if (!*(void *)(a1 + 8)) {
    return NAN;
  }
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);

  return sub_D4068(v2);
}

uint64_t sub_D4060()
{
  return 133;
}

double sub_D4068(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 64))(v2) + 16);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  unint64_t v5 = *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 64))(v4) + 8);
  if (v5 > 0x10)
  {
    int v6 = v5 & 0xF;
    if ((v5 & 0xF) != 0) {
      int v7 = -16;
    }
    else {
      int v7 = 0;
    }
    int64_t v8 = (unint64_t)(v7 + v5) << 32;
    if (v8 < 1)
    {
      double v25 = 0.0;
      double v24 = 0.0;
      double v23 = 0.0;
      double v22 = 0.0;
      double v21 = 0.0;
      double v20 = 0.0;
      double v19 = 0.0;
      double v18 = 0.0;
      double v17 = 0.0;
      double v16 = 0.0;
      double v15 = 0.0;
      double v14 = 0.0;
      double v13 = 0.0;
      double v11 = 0.0;
      double v10 = 0.0;
      double v9 = 0.0;
      int v26 = v6 - 1;
    }
    else
    {
      double v9 = 0.0;
      double v10 = 0.0;
      double v11 = 0.0;
      unint64_t v12 = (double *)((char *)v3 + (v8 >> 29));
      double v13 = 0.0;
      double v14 = 0.0;
      double v15 = 0.0;
      double v16 = 0.0;
      double v17 = 0.0;
      double v18 = 0.0;
      double v19 = 0.0;
      double v20 = 0.0;
      double v21 = 0.0;
      double v22 = 0.0;
      double v23 = 0.0;
      double v24 = 0.0;
      double v25 = 0.0;
      do
      {
        double v25 = v25 + *v3;
        double v24 = v24 + v3[1];
        double v23 = v23 + v3[2];
        double v22 = v22 + v3[3];
        double v21 = v21 + v3[4];
        double v20 = v20 + v3[5];
        double v19 = v19 + v3[6];
        double v18 = v18 + v3[7];
        double v17 = v17 + v3[8];
        double v16 = v16 + v3[9];
        double v15 = v15 + v3[10];
        double v14 = v14 + v3[11];
        double v13 = v13 + v3[12];
        double v11 = v11 + v3[13];
        double v10 = v10 + v3[14];
        double v9 = v9 + v3[15];
        v3 += 16;
      }
      while (v3 < v12);
      int v26 = v6 - 1;
      if ((v6 - 1) > 0xE) {
        return v13 + v11 + v10 + v9 + v17 + v16 + v15 + v14 + v21 + v20 + v19 + v18 + v22 + v23 + v24 + v25;
      }
    }
    unsigned int v44 = 0;
    unsigned int v45 = 0;
    unsigned int v46 = 0;
    unsigned int v47 = 0;
    unsigned int v48 = 0;
    unsigned int v49 = 0;
    unsigned int v50 = 0;
    unsigned int v51 = 0;
    unsigned int v52 = 0;
    unsigned int v53 = 0;
    int v54 = 0;
    int v55 = 0;
    int v56 = 0;
    uint64_t v57 = 0;
    switch(v26)
    {
      case 0:
        goto LABEL_43;
      case 1:
        goto LABEL_42;
      case 2:
        goto LABEL_41;
      case 3:
        goto LABEL_40;
      case 4:
        goto LABEL_39;
      case 5:
        goto LABEL_38;
      case 6:
        goto LABEL_37;
      case 7:
        goto LABEL_36;
      case 8:
        goto LABEL_35;
      case 9:
        goto LABEL_34;
      case 10:
        goto LABEL_33;
      case 11:
        goto LABEL_32;
      case 12:
        goto LABEL_31;
      case 13:
        goto LABEL_30;
      case 14:
        double v25 = v25 + *v3;
        unsigned int v44 = 1;
LABEL_30:
        unsigned int v45 = v44 + 1;
        double v25 = v25 + v3[v44];
LABEL_31:
        unsigned int v46 = v45 + 1;
        double v25 = v25 + v3[v45];
LABEL_32:
        unsigned int v47 = v46 + 1;
        double v25 = v25 + v3[v46];
LABEL_33:
        unsigned int v48 = v47 + 1;
        double v25 = v25 + v3[v47];
LABEL_34:
        unsigned int v49 = v48 + 1;
        double v25 = v25 + v3[v48];
LABEL_35:
        unsigned int v50 = v49 + 1;
        double v25 = v25 + v3[v49];
LABEL_36:
        unsigned int v51 = v50 + 1;
        double v25 = v25 + v3[v50];
LABEL_37:
        unsigned int v52 = v51 + 1;
        double v25 = v25 + v3[v51];
LABEL_38:
        unsigned int v53 = v52 + 1;
        double v25 = v25 + v3[v52];
LABEL_39:
        int v54 = v53 + 1;
        double v25 = v25 + v3[v53];
LABEL_40:
        int v55 = v54 + 1;
        double v25 = v25 + v3[v54];
LABEL_41:
        int v56 = v55 + 1;
        double v25 = v25 + v3[v55];
LABEL_42:
        uint64_t v57 = (v56 + 1);
        double v25 = v25 + v3[v56];
LABEL_43:
        double v25 = v25 + v3[v57];
        break;
      default:
        return v13 + v11 + v10 + v9 + v17 + v16 + v15 + v14 + v21 + v20 + v19 + v18 + v22 + v23 + v24 + v25;
    }
    return v13 + v11 + v10 + v9 + v17 + v16 + v15 + v14 + v21 + v20 + v19 + v18 + v22 + v23 + v24 + v25;
  }
  double result = 0.0;
  unint64_t v28 = v5 - 1;
  unsigned int v29 = 0;
  unsigned int v30 = 0;
  unsigned int v31 = 0;
  unsigned int v32 = 0;
  unsigned int v33 = 0;
  unsigned int v34 = 0;
  unsigned int v35 = 0;
  unsigned int v36 = 0;
  unsigned int v37 = 0;
  unsigned int v38 = 0;
  int v39 = 0;
  int v40 = 0;
  int v41 = 0;
  int v42 = 0;
  uint64_t v43 = 0;
  switch(v28)
  {
    case 0uLL:
      goto LABEL_26;
    case 1uLL:
      goto LABEL_25;
    case 2uLL:
      goto LABEL_24;
    case 3uLL:
      goto LABEL_23;
    case 4uLL:
      goto LABEL_22;
    case 5uLL:
      goto LABEL_21;
    case 6uLL:
      goto LABEL_20;
    case 7uLL:
      goto LABEL_19;
    case 8uLL:
      goto LABEL_18;
    case 9uLL:
      goto LABEL_17;
    case 0xAuLL:
      goto LABEL_16;
    case 0xBuLL:
      goto LABEL_15;
    case 0xCuLL:
      goto LABEL_14;
    case 0xDuLL:
      goto LABEL_13;
    case 0xEuLL:
      goto LABEL_12;
    case 0xFuLL:
      double result = *v3 + 0.0;
      unsigned int v29 = 1;
LABEL_12:
      unsigned int v30 = v29 + 1;
      double result = result + v3[v29];
LABEL_13:
      unsigned int v31 = v30 + 1;
      double result = result + v3[v30];
LABEL_14:
      unsigned int v32 = v31 + 1;
      double result = result + v3[v31];
LABEL_15:
      unsigned int v33 = v32 + 1;
      double result = result + v3[v32];
LABEL_16:
      unsigned int v34 = v33 + 1;
      double result = result + v3[v33];
LABEL_17:
      unsigned int v35 = v34 + 1;
      double result = result + v3[v34];
LABEL_18:
      unsigned int v36 = v35 + 1;
      double result = result + v3[v35];
LABEL_19:
      unsigned int v37 = v36 + 1;
      double result = result + v3[v36];
LABEL_20:
      unsigned int v38 = v37 + 1;
      double result = result + v3[v37];
LABEL_21:
      int v39 = v38 + 1;
      double result = result + v3[v38];
LABEL_22:
      int v40 = v39 + 1;
      double result = result + v3[v39];
LABEL_23:
      int v41 = v40 + 1;
      double result = result + v3[v40];
LABEL_24:
      int v42 = v41 + 1;
      double result = result + v3[v41];
LABEL_25:
      uint64_t v43 = (v42 + 1);
      double result = result + v3[v42];
LABEL_26:
      double result = result + v3[v43];
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_D4554(uint64_t a1)
{
  *(void *)a1 = off_23FF5C0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_D45CC(uint64_t a1)
{
  *(void *)a1 = off_23FF5C0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_D4664(uint64_t a1)
{
  if (!*(void *)(a1 + 8)) {
    return NAN;
  }
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);

  return sub_D46E4(v2);
}

uint64_t sub_D46DC()
{
  return 133;
}

double sub_D46E4(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 64))(v2) + 16);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  unint64_t v5 = *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 64))(v4) + 8);
  if (v5 > 0x10)
  {
    int v6 = v5 & 0xF;
    if ((v5 & 0xF) != 0) {
      int v7 = -16;
    }
    else {
      int v7 = 0;
    }
    int64_t v8 = (unint64_t)(v7 + v5) << 32;
    if (v8 < 1)
    {
      double v25 = 1.0;
      double v24 = 1.0;
      double v23 = 1.0;
      double v22 = 1.0;
      double v21 = 1.0;
      double v20 = 1.0;
      double v19 = 1.0;
      double v18 = 1.0;
      double v17 = 1.0;
      double v16 = 1.0;
      double v15 = 1.0;
      double v14 = 1.0;
      double v13 = 1.0;
      double v11 = 1.0;
      double v10 = 1.0;
      double v9 = 1.0;
      int v26 = v6 - 1;
    }
    else
    {
      double v9 = 1.0;
      double v10 = 1.0;
      double v11 = 1.0;
      unint64_t v12 = (double *)((char *)v3 + (v8 >> 29));
      double v13 = 1.0;
      double v14 = 1.0;
      double v15 = 1.0;
      double v16 = 1.0;
      double v17 = 1.0;
      double v18 = 1.0;
      double v19 = 1.0;
      double v20 = 1.0;
      double v21 = 1.0;
      double v22 = 1.0;
      double v23 = 1.0;
      double v24 = 1.0;
      double v25 = 1.0;
      do
      {
        double v9 = v9 * *v3;
        double v10 = v10 * v3[1];
        double v11 = v11 * v3[2];
        double v13 = v13 * v3[3];
        double v14 = v14 * v3[4];
        double v15 = v15 * v3[5];
        double v16 = v16 * v3[6];
        double v17 = v17 * v3[7];
        double v18 = v18 * v3[8];
        double v19 = v19 * v3[9];
        double v20 = v20 * v3[10];
        double v21 = v21 * v3[11];
        double v22 = v22 * v3[12];
        double v23 = v23 * v3[13];
        double v24 = v24 * v3[14];
        double v25 = v25 * v3[15];
        v3 += 16;
      }
      while (v3 < v12);
      int v26 = v6 - 1;
      if ((v6 - 1) > 0xE) {
        return v25 * (v24 * (v23 * v22))
      }
             + v21 * (v20 * (v19 * v18))
             + v17 * (v16 * (v15 * v14))
             + v13 * (v11 * (v10 * v9));
    }
    unsigned int v44 = 0;
    unsigned int v45 = 0;
    unsigned int v46 = 0;
    unsigned int v47 = 0;
    unsigned int v48 = 0;
    unsigned int v49 = 0;
    unsigned int v50 = 0;
    unsigned int v51 = 0;
    unsigned int v52 = 0;
    unsigned int v53 = 0;
    int v54 = 0;
    int v55 = 0;
    int v56 = 0;
    uint64_t v57 = 0;
    switch(v26)
    {
      case 0:
        goto LABEL_43;
      case 1:
        goto LABEL_42;
      case 2:
        goto LABEL_41;
      case 3:
        goto LABEL_40;
      case 4:
        goto LABEL_39;
      case 5:
        goto LABEL_38;
      case 6:
        goto LABEL_37;
      case 7:
        goto LABEL_36;
      case 8:
        goto LABEL_35;
      case 9:
        goto LABEL_34;
      case 10:
        goto LABEL_33;
      case 11:
        goto LABEL_32;
      case 12:
        goto LABEL_31;
      case 13:
        goto LABEL_30;
      case 14:
        double v9 = v9 * *v3;
        unsigned int v44 = 1;
LABEL_30:
        unsigned int v45 = v44 + 1;
        double v9 = v9 * v3[v44];
LABEL_31:
        unsigned int v46 = v45 + 1;
        double v9 = v9 * v3[v45];
LABEL_32:
        unsigned int v47 = v46 + 1;
        double v9 = v9 * v3[v46];
LABEL_33:
        unsigned int v48 = v47 + 1;
        double v9 = v9 * v3[v47];
LABEL_34:
        unsigned int v49 = v48 + 1;
        double v9 = v9 * v3[v48];
LABEL_35:
        unsigned int v50 = v49 + 1;
        double v9 = v9 * v3[v49];
LABEL_36:
        unsigned int v51 = v50 + 1;
        double v9 = v9 * v3[v50];
LABEL_37:
        unsigned int v52 = v51 + 1;
        double v9 = v9 * v3[v51];
LABEL_38:
        unsigned int v53 = v52 + 1;
        double v9 = v9 * v3[v52];
LABEL_39:
        int v54 = v53 + 1;
        double v9 = v9 * v3[v53];
LABEL_40:
        int v55 = v54 + 1;
        double v9 = v9 * v3[v54];
LABEL_41:
        int v56 = v55 + 1;
        double v9 = v9 * v3[v55];
LABEL_42:
        uint64_t v57 = (v56 + 1);
        double v9 = v9 * v3[v56];
LABEL_43:
        double v9 = v9 * v3[v57];
        break;
      default:
        return v25 * (v24 * (v23 * v22))
             + v21 * (v20 * (v19 * v18))
             + v17 * (v16 * (v15 * v14))
             + v13 * (v11 * (v10 * v9));
    }
    return v25 * (v24 * (v23 * v22)) + v21 * (v20 * (v19 * v18)) + v17 * (v16 * (v15 * v14)) + v13 * (v11 * (v10 * v9));
  }
  double result = 1.0;
  unint64_t v28 = v5 - 1;
  unsigned int v29 = 0;
  unsigned int v30 = 0;
  unsigned int v31 = 0;
  unsigned int v32 = 0;
  unsigned int v33 = 0;
  unsigned int v34 = 0;
  unsigned int v35 = 0;
  unsigned int v36 = 0;
  unsigned int v37 = 0;
  unsigned int v38 = 0;
  int v39 = 0;
  int v40 = 0;
  int v41 = 0;
  int v42 = 0;
  uint64_t v43 = 0;
  switch(v28)
  {
    case 0uLL:
      goto LABEL_26;
    case 1uLL:
      goto LABEL_25;
    case 2uLL:
      goto LABEL_24;
    case 3uLL:
      goto LABEL_23;
    case 4uLL:
      goto LABEL_22;
    case 5uLL:
      goto LABEL_21;
    case 6uLL:
      goto LABEL_20;
    case 7uLL:
      goto LABEL_19;
    case 8uLL:
      goto LABEL_18;
    case 9uLL:
      goto LABEL_17;
    case 0xAuLL:
      goto LABEL_16;
    case 0xBuLL:
      goto LABEL_15;
    case 0xCuLL:
      goto LABEL_14;
    case 0xDuLL:
      goto LABEL_13;
    case 0xEuLL:
      goto LABEL_12;
    case 0xFuLL:
      double result = *v3;
      unsigned int v29 = 1;
LABEL_12:
      unsigned int v30 = v29 + 1;
      double result = result * v3[v29];
LABEL_13:
      unsigned int v31 = v30 + 1;
      double result = result * v3[v30];
LABEL_14:
      unsigned int v32 = v31 + 1;
      double result = result * v3[v31];
LABEL_15:
      unsigned int v33 = v32 + 1;
      double result = result * v3[v32];
LABEL_16:
      unsigned int v34 = v33 + 1;
      double result = result * v3[v33];
LABEL_17:
      unsigned int v35 = v34 + 1;
      double result = result * v3[v34];
LABEL_18:
      unsigned int v36 = v35 + 1;
      double result = result * v3[v35];
LABEL_19:
      unsigned int v37 = v36 + 1;
      double result = result * v3[v36];
LABEL_20:
      unsigned int v38 = v37 + 1;
      double result = result * v3[v37];
LABEL_21:
      int v39 = v38 + 1;
      double result = result * v3[v38];
LABEL_22:
      int v40 = v39 + 1;
      double result = result * v3[v39];
LABEL_23:
      int v41 = v40 + 1;
      double result = result * v3[v40];
LABEL_24:
      int v42 = v41 + 1;
      double result = result * v3[v41];
LABEL_25:
      uint64_t v43 = (v42 + 1);
      double result = result * v3[v42];
LABEL_26:
      double result = result * v3[v43];
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_D4BC8(uint64_t a1)
{
  *(void *)a1 = off_23FF610;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_D4C40(uint64_t a1)
{
  *(void *)a1 = off_23FF610;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_D4CD8(uint64_t a1)
{
  if (!*(void *)(a1 + 8)) {
    return NAN;
  }
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 32))(v2);
  unint64_t v4 = *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 64))(v3) + 8);
  return sub_D4068(v2) / (double)v4;
}

uint64_t sub_D4DB0()
{
  return 133;
}

uint64_t sub_D4DB8(uint64_t a1)
{
  *(void *)a1 = off_23FF660;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_D4E30(uint64_t a1)
{
  *(void *)a1 = off_23FF660;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_D4EC8(uint64_t a1)
{
  if (!*(void *)(a1 + 8)) {
    return NAN;
  }
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 32))(v2);
  unint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 64))(v3) + 16);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 32))(v2);
  unint64_t v6 = *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 64))(v5) + 8);
  double result = *v4;
  if (v6 >= 2)
  {
    unint64_t v8 = v6 - 1;
    double v9 = v4 + 1;
    do
    {
      double v10 = *v9++;
      double v11 = v10;
      if (v10 < result) {
        double result = v11;
      }
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t sub_D5000()
{
  return 133;
}

uint64_t sub_D5008(uint64_t a1)
{
  *(void *)a1 = off_23FF6B0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_D5080(uint64_t a1)
{
  *(void *)a1 = off_23FF6B0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_D5118(uint64_t a1)
{
  if (!*(void *)(a1 + 8)) {
    return NAN;
  }
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 32))(v2);
  unint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 64))(v3) + 16);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 32))(v2);
  unint64_t v6 = *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 64))(v5) + 8);
  double result = *v4;
  if (v6 >= 2)
  {
    unint64_t v8 = v6 - 1;
    double v9 = v4 + 1;
    do
    {
      double v10 = *v9++;
      double v11 = v10;
      if (v10 > result) {
        double result = v11;
      }
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t sub_D5250()
{
  return 133;
}

void *sub_D5258(void *a1, uint64_t *a2)
{
  a1[1] = 0;
  unint64_t v4 = a1 + 1;
  *a1 = off_23FF700;
  a1[2] = 0;
  a1[3] = 0;
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (v6 != *a2)
  {
    sub_D2BFC((void **)a1 + 1, (v6 - *a2) >> 3);
    uint64_t v5 = *a2;
    uint64_t v6 = a2[1];
  }
  if (v6 == v5) {
    return a1;
  }
  unint64_t v7 = 0;
  while (1)
  {
    uint64_t v8 = *(void *)(v5 + 8 * v7);
    if (!v8 || (*(unsigned int (**)(uint64_t))(*(void *)v8 + 32))(v8) != 17) {
      break;
    }
    *(void *)(*v4 + 8 * v7) = (*(uint64_t (**)(void))(**(void **)(*a2 + 8 * v7) + 40))(*(void *)(*a2 + 8 * v7));
    ++v7;
    uint64_t v5 = *a2;
    if (v7 >= (a2[1] - *a2) >> 3) {
      return a1;
    }
  }
  a1[2] = a1[1];
  return a1;
}

void sub_D5370(_Unwind_Exception *exception_object)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void *sub_D5394(void *a1)
{
  *a1 = off_23FF700;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_D53E4(void *a1)
{
  *a1 = off_23FF700;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }

  operator delete();
}

double sub_D5454(uint64_t a1)
{
  uint64_t v1 = *(double ***)(a1 + 8);
  uint64_t v2 = *(double ***)(a1 + 16);
  if (v1 == v2) {
    return NAN;
  }
  uint64_t v3 = (char *)v2 - (char *)v1;
  double result = 0.0;
  switch(v3 >> 3)
  {
    case 0:
      return result;
    case 1:
      return **v1;
    case 2:
      return **v1 + *v1[1];
    case 3:
      return **v1 + *v1[1] + *v1[2];
    case 4:
      return **v1 + *v1[1] + *v1[2] + *v1[3];
    case 5:
      return **v1 + *v1[1] + *v1[2] + *v1[3] + *v1[4];
    default:
      if ((unint64_t)(v3 >> 3) <= 1) {
        unint64_t v5 = 1;
      }
      else {
        unint64_t v5 = v3 >> 3;
      }
      if (v5 < 2)
      {
        unint64_t v6 = 0;
        double result = 0.0;
LABEL_17:
        unint64_t v9 = v5 - v6;
        double v10 = &v1[v6];
        do
        {
          double v11 = *v10++;
          double result = result + *v11;
          --v9;
        }
        while (v9);
        return result;
      }
      unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v7 = v1 + 1;
      double result = 0.0;
      unint64_t v8 = v5 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        double result = result + **(v7 - 1) + **v7;
        v7 += 2;
        v8 -= 2;
      }
      while (v8);
      if (v5 != v6) {
        goto LABEL_17;
      }
      break;
  }
  return result;
}

uint64_t sub_D55C8()
{
  return 8;
}

void *sub_D55D0(void *a1, uint64_t *a2)
{
  a1[1] = 0;
  unint64_t v4 = a1 + 1;
  *a1 = off_23FF750;
  a1[2] = 0;
  a1[3] = 0;
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (v6 != *a2)
  {
    sub_D2BFC((void **)a1 + 1, (v6 - *a2) >> 3);
    uint64_t v5 = *a2;
    uint64_t v6 = a2[1];
  }
  if (v6 == v5) {
    return a1;
  }
  unint64_t v7 = 0;
  while (1)
  {
    uint64_t v8 = *(void *)(v5 + 8 * v7);
    if (!v8 || (*(unsigned int (**)(uint64_t))(*(void *)v8 + 32))(v8) != 17) {
      break;
    }
    *(void *)(*v4 + 8 * v7) = (*(uint64_t (**)(void))(**(void **)(*a2 + 8 * v7) + 40))(*(void *)(*a2 + 8 * v7));
    ++v7;
    uint64_t v5 = *a2;
    if (v7 >= (a2[1] - *a2) >> 3) {
      return a1;
    }
  }
  a1[2] = a1[1];
  return a1;
}

void sub_D56E8(_Unwind_Exception *exception_object)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void *sub_D570C(void *a1)
{
  *a1 = off_23FF750;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_D575C(void *a1)
{
  *a1 = off_23FF750;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }

  operator delete();
}

double sub_D57CC(uint64_t a1)
{
  uint64_t v1 = *(double ***)(a1 + 8);
  uint64_t v2 = *(double ***)(a1 + 16);
  if (v1 == v2) {
    return NAN;
  }
  uint64_t v3 = (char *)v2 - (char *)v1;
  unint64_t v4 = v3 >> 3;
  double result = 0.0;
  switch(v3 >> 3)
  {
    case 0:
      return result;
    case 1:
      double result = **v1;
      break;
    case 2:
      double result = **v1 * *v1[1];
      break;
    case 3:
      double result = **v1 * *v1[1] * *v1[2];
      break;
    case 4:
      double result = **v1 * *v1[1] * *v1[2] * *v1[3];
      break;
    case 5:
      double result = **v1 * *v1[1] * *v1[2] * *v1[3] * *v1[4];
      break;
    default:
      double result = **v1;
      if ((unint64_t)v3 >= 9)
      {
        uint64_t v6 = 2;
        if (v4 > 2) {
          uint64_t v6 = v4;
        }
        uint64_t v7 = v6 - 1;
        uint64_t v8 = v1 + 1;
        do
        {
          unint64_t v9 = *v8++;
          double result = result * *v9;
          --v7;
        }
        while (v7);
      }
      break;
  }
  return result;
}

uint64_t sub_D5908()
{
  return 8;
}

void *sub_D5910(void *a1, uint64_t *a2)
{
  a1[1] = 0;
  unint64_t v4 = a1 + 1;
  *a1 = off_23FF7A0;
  a1[2] = 0;
  a1[3] = 0;
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (v6 != *a2)
  {
    sub_D2BFC((void **)a1 + 1, (v6 - *a2) >> 3);
    uint64_t v5 = *a2;
    uint64_t v6 = a2[1];
  }
  if (v6 == v5) {
    return a1;
  }
  unint64_t v7 = 0;
  while (1)
  {
    uint64_t v8 = *(void *)(v5 + 8 * v7);
    if (!v8 || (*(unsigned int (**)(uint64_t))(*(void *)v8 + 32))(v8) != 17) {
      break;
    }
    *(void *)(*v4 + 8 * v7) = (*(uint64_t (**)(void))(**(void **)(*a2 + 8 * v7) + 40))(*(void *)(*a2 + 8 * v7));
    ++v7;
    uint64_t v5 = *a2;
    if (v7 >= (a2[1] - *a2) >> 3) {
      return a1;
    }
  }
  a1[2] = a1[1];
  return a1;
}

void sub_D5A28(_Unwind_Exception *exception_object)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void *sub_D5A4C(void *a1)
{
  *a1 = off_23FF7A0;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_D5A9C(void *a1)
{
  *a1 = off_23FF7A0;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }

  operator delete();
}

double sub_D5B0C(uint64_t a1)
{
  uint64_t v1 = *(double ***)(a1 + 8);
  uint64_t v2 = *(double ***)(a1 + 16);
  if (v1 == v2) {
    return NAN;
  }
  uint64_t v3 = (char *)v2 - (char *)v1;
  unint64_t v4 = v3 >> 3;
  double result = 0.0;
  switch(v3 >> 3)
  {
    case 0:
      return result;
    case 1:
      return **v1;
    case 2:
      return (**v1 + *v1[1]) * 0.5;
    case 3:
      double v6 = **v1 + *v1[1] + *v1[2];
      double v7 = 3.0;
      goto LABEL_20;
    case 4:
      return (**v1 + *v1[1] + *v1[2] + *v1[3]) * 0.25;
    case 5:
      double v6 = **v1 + *v1[1] + *v1[2] + *v1[3] + *v1[4];
      double v7 = 5.0;
      goto LABEL_20;
    default:
      if (v4 <= 1) {
        unint64_t v8 = 1;
      }
      else {
        unint64_t v8 = v3 >> 3;
      }
      if (v8 < 2)
      {
        unint64_t v9 = 0;
        double v6 = 0.0;
LABEL_17:
        unint64_t v12 = v8 - v9;
        double v13 = &v1[v9];
        do
        {
          double v14 = *v13++;
          double v6 = v6 + *v14;
          --v12;
        }
        while (v12);
        goto LABEL_19;
      }
      unint64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
      double v10 = v1 + 1;
      double v6 = 0.0;
      unint64_t v11 = v8 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        double v6 = v6 + **(v10 - 1) + **v10;
        v10 += 2;
        v11 -= 2;
      }
      while (v11);
      if (v8 != v9) {
        goto LABEL_17;
      }
LABEL_19:
      double v7 = (double)v4;
LABEL_20:
      double result = v6 / v7;
      break;
  }
  return result;
}

uint64_t sub_D5CA0()
{
  return 8;
}

void *sub_D5CA8(void *a1, uint64_t *a2)
{
  a1[1] = 0;
  unint64_t v4 = a1 + 1;
  *a1 = off_23FF7F0;
  a1[2] = 0;
  a1[3] = 0;
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (v6 != *a2)
  {
    sub_D2BFC((void **)a1 + 1, (v6 - *a2) >> 3);
    uint64_t v5 = *a2;
    uint64_t v6 = a2[1];
  }
  if (v6 == v5) {
    return a1;
  }
  unint64_t v7 = 0;
  while (1)
  {
    uint64_t v8 = *(void *)(v5 + 8 * v7);
    if (!v8 || (*(unsigned int (**)(uint64_t))(*(void *)v8 + 32))(v8) != 17) {
      break;
    }
    *(void *)(*v4 + 8 * v7) = (*(uint64_t (**)(void))(**(void **)(*a2 + 8 * v7) + 40))(*(void *)(*a2 + 8 * v7));
    ++v7;
    uint64_t v5 = *a2;
    if (v7 >= (a2[1] - *a2) >> 3) {
      return a1;
    }
  }
  a1[2] = a1[1];
  return a1;
}

void sub_D5DC0(_Unwind_Exception *exception_object)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void *sub_D5DE4(void *a1)
{
  *a1 = off_23FF7F0;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_D5E34(void *a1)
{
  *a1 = off_23FF7F0;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }

  operator delete();
}

double sub_D5EA4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v1 = a1 + 8;
  if (v2 == v3) {
    return NAN;
  }
  sub_D5EC8(v1);
  return result;
}

uint64_t sub_D5EC0()
{
  return 8;
}

uint64_t sub_D5EC8(uint64_t result)
{
  uint64_t v1 = *(double ***)result;
  uint64_t v2 = *(void *)(result + 8) - *(void *)result;
  unint64_t v3 = v2 >> 3;
  switch(v2 >> 3)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return result;
    default:
      double v4 = **v1;
      if ((unint64_t)v2 >= 9)
      {
        uint64_t v5 = 2;
        if (v3 > 2) {
          uint64_t v5 = v3;
        }
        uint64_t v6 = v5 - 1;
        unint64_t v7 = v1 + 1;
        do
        {
          uint64_t v8 = *v7++;
          double v9 = *v8;
          if (*v8 < v4) {
            double v4 = v9;
          }
          --v6;
        }
        while (v6);
      }
      break;
  }
  return result;
}

void *sub_D601C(void *a1, uint64_t *a2)
{
  a1[1] = 0;
  double v4 = a1 + 1;
  *a1 = off_23FF840;
  a1[2] = 0;
  a1[3] = 0;
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (v6 != *a2)
  {
    sub_D2BFC((void **)a1 + 1, (v6 - *a2) >> 3);
    uint64_t v5 = *a2;
    uint64_t v6 = a2[1];
  }
  if (v6 == v5) {
    return a1;
  }
  unint64_t v7 = 0;
  while (1)
  {
    uint64_t v8 = *(void *)(v5 + 8 * v7);
    if (!v8 || (*(unsigned int (**)(uint64_t))(*(void *)v8 + 32))(v8) != 17) {
      break;
    }
    *(void *)(*v4 + 8 * v7) = (*(uint64_t (**)(void))(**(void **)(*a2 + 8 * v7) + 40))(*(void *)(*a2 + 8 * v7));
    ++v7;
    uint64_t v5 = *a2;
    if (v7 >= (a2[1] - *a2) >> 3) {
      return a1;
    }
  }
  a1[2] = a1[1];
  return a1;
}

void sub_D6134(_Unwind_Exception *exception_object)
{
  double v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void *sub_D6158(void *a1)
{
  *a1 = off_23FF840;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_D61A8(void *a1)
{
  *a1 = off_23FF840;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }

  operator delete();
}

double sub_D6218(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v1 = a1 + 8;
  if (v2 == v3) {
    return NAN;
  }
  sub_D623C(v1);
  return result;
}

uint64_t sub_D6234()
{
  return 8;
}

uint64_t sub_D623C(uint64_t result)
{
  uint64_t v1 = *(double ***)result;
  uint64_t v2 = *(void *)(result + 8) - *(void *)result;
  unint64_t v3 = v2 >> 3;
  switch(v2 >> 3)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return result;
    default:
      double v4 = **v1;
      if ((unint64_t)v2 >= 9)
      {
        uint64_t v5 = 2;
        if (v3 > 2) {
          uint64_t v5 = v3;
        }
        uint64_t v6 = v5 - 1;
        unint64_t v7 = v1 + 1;
        do
        {
          uint64_t v8 = *v7++;
          double v9 = *v8;
          if (*v8 > v4) {
            double v4 = v9;
          }
          --v6;
        }
        while (v6);
      }
      break;
  }
  return result;
}

void *sub_D6390(void *a1, uint64_t *a2)
{
  a1[1] = 0;
  double v4 = a1 + 1;
  *a1 = off_23FF890;
  a1[2] = 0;
  a1[3] = 0;
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (v6 != *a2)
  {
    sub_D2BFC((void **)a1 + 1, (v6 - *a2) >> 3);
    uint64_t v5 = *a2;
    uint64_t v6 = a2[1];
  }
  if (v6 == v5) {
    return a1;
  }
  unint64_t v7 = 0;
  while (1)
  {
    uint64_t v8 = *(void *)(v5 + 8 * v7);
    if (!v8 || (*(unsigned int (**)(uint64_t))(*(void *)v8 + 32))(v8) != 17) {
      break;
    }
    *(void *)(*v4 + 8 * v7) = (*(uint64_t (**)(void))(**(void **)(*a2 + 8 * v7) + 40))(*(void *)(*a2 + 8 * v7));
    ++v7;
    uint64_t v5 = *a2;
    if (v7 >= (a2[1] - *a2) >> 3) {
      return a1;
    }
  }
  a1[2] = a1[1];
  return a1;
}

void sub_D64A8(_Unwind_Exception *exception_object)
{
  double v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void *sub_D64CC(void *a1)
{
  *a1 = off_23FF890;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_D651C(void *a1)
{
  *a1 = off_23FF890;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }

  operator delete();
}

double sub_D658C(uint64_t a1)
{
  uint64_t v1 = *(double ***)(a1 + 8);
  uint64_t v2 = *(double ***)(a1 + 16);
  if (v1 == v2) {
    return NAN;
  }
  unint64_t v3 = v2 - v1;
  switch(v3)
  {
    case 1uLL:
      goto LABEL_23;
    case 2uLL:
      if (**v1 == 0.0) {
        return 0.0;
      }
      ++v1;
      goto LABEL_23;
    case 3uLL:
      double result = 0.0;
      if (**v1 == 0.0 || *v1[1] == 0.0) {
        return result;
      }
      v1 += 2;
      goto LABEL_23;
    case 4uLL:
      double result = 0.0;
      if (**v1 == 0.0 || *v1[1] == 0.0 || *v1[2] == 0.0) {
        return result;
      }
      v1 += 3;
      goto LABEL_23;
    case 5uLL:
      double result = 0.0;
      if (**v1 == 0.0 || *v1[1] == 0.0 || *v1[2] == 0.0 || *v1[3] == 0.0) {
        return result;
      }
      v1 += 4;
LABEL_23:
      double result = 0.0;
      if (**v1 != 0.0) {
        return 1.0;
      }
      return result;
    default:
      if (v3 <= 1) {
        unint64_t v3 = 1;
      }
      break;
  }
  while (**v1 != 0.0)
  {
    ++v1;
    if (!--v3) {
      return 1.0;
    }
  }
  return 0.0;
}

uint64_t sub_D6704()
{
  return 8;
}

void *sub_D670C(void *a1, uint64_t *a2)
{
  a1[1] = 0;
  double v4 = a1 + 1;
  *a1 = off_23FF8E0;
  a1[2] = 0;
  a1[3] = 0;
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (v6 != *a2)
  {
    sub_D2BFC((void **)a1 + 1, (v6 - *a2) >> 3);
    uint64_t v5 = *a2;
    uint64_t v6 = a2[1];
  }
  if (v6 == v5) {
    return a1;
  }
  unint64_t v7 = 0;
  while (1)
  {
    uint64_t v8 = *(void *)(v5 + 8 * v7);
    if (!v8 || (*(unsigned int (**)(uint64_t))(*(void *)v8 + 32))(v8) != 17) {
      break;
    }
    *(void *)(*v4 + 8 * v7) = (*(uint64_t (**)(void))(**(void **)(*a2 + 8 * v7) + 40))(*(void *)(*a2 + 8 * v7));
    ++v7;
    uint64_t v5 = *a2;
    if (v7 >= (a2[1] - *a2) >> 3) {
      return a1;
    }
  }
  a1[2] = a1[1];
  return a1;
}

void sub_D6824(_Unwind_Exception *exception_object)
{
  double v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void *sub_D6848(void *a1)
{
  *a1 = off_23FF8E0;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_D6898(void *a1)
{
  *a1 = off_23FF8E0;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }

  operator delete();
}

double sub_D6908(uint64_t a1)
{
  uint64_t v1 = *(double ***)(a1 + 8);
  uint64_t v2 = *(double ***)(a1 + 16);
  if (v1 == v2) {
    return NAN;
  }
  unint64_t v3 = v2 - v1;
  switch(v3)
  {
    case 1uLL:
      goto LABEL_25;
    case 2uLL:
      double result = 1.0;
      if (**v1 != 0.0) {
        return result;
      }
      ++v1;
      goto LABEL_25;
    case 3uLL:
      double result = 1.0;
      if (**v1 != 0.0 || *v1[1] != 0.0) {
        return result;
      }
      v1 += 2;
      goto LABEL_25;
    case 4uLL:
      double result = 1.0;
      if (**v1 != 0.0 || *v1[1] != 0.0 || *v1[2] != 0.0) {
        return result;
      }
      v1 += 3;
      goto LABEL_25;
    case 5uLL:
      double result = 1.0;
      if (**v1 != 0.0 || *v1[1] != 0.0 || *v1[2] != 0.0 || *v1[3] != 0.0) {
        return result;
      }
      v1 += 4;
LABEL_25:
      double result = 0.0;
      if (**v1 != 0.0) {
        return 1.0;
      }
      return result;
    default:
      if (v3 <= 1) {
        unint64_t v3 = 1;
      }
      break;
  }
  while (**v1 == 0.0)
  {
    ++v1;
    if (!--v3) {
      return 0.0;
    }
  }
  return 1.0;
}

uint64_t sub_D6A88()
{
  return 8;
}

void *sub_D6A90(void *a1, uint64_t *a2)
{
  a1[1] = 0;
  double v4 = a1 + 1;
  *a1 = off_23FF930;
  a1[2] = 0;
  a1[3] = 0;
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (v6 != *a2)
  {
    sub_D2BFC((void **)a1 + 1, (v6 - *a2) >> 3);
    uint64_t v5 = *a2;
    uint64_t v6 = a2[1];
  }
  if (v6 == v5) {
    return a1;
  }
  unint64_t v7 = 0;
  while (1)
  {
    uint64_t v8 = *(void *)(v5 + 8 * v7);
    if (!v8 || (*(unsigned int (**)(uint64_t))(*(void *)v8 + 32))(v8) != 17) {
      break;
    }
    *(void *)(*v4 + 8 * v7) = (*(uint64_t (**)(void))(**(void **)(*a2 + 8 * v7) + 40))(*(void *)(*a2 + 8 * v7));
    ++v7;
    uint64_t v5 = *a2;
    if (v7 >= (a2[1] - *a2) >> 3) {
      return a1;
    }
  }
  a1[2] = a1[1];
  return a1;
}

void sub_D6BA8(_Unwind_Exception *exception_object)
{
  double v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void *sub_D6BCC(void *a1)
{
  *a1 = off_23FF930;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_D6C1C(void *a1)
{
  *a1 = off_23FF930;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }

  operator delete();
}

double sub_D6C8C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v1 == v2) {
    return NAN;
  }
  double result = NAN;
  switch((v2 - v1) >> 3)
  {
    case 0:
      return result;
    case 1:
      goto LABEL_12;
    case 2:
      v1 += 8;
      goto LABEL_12;
    case 3:
      v1 += 16;
      goto LABEL_12;
    case 4:
      v1 += 24;
      goto LABEL_12;
    case 5:
      v1 += 32;
      goto LABEL_12;
    case 6:
      v1 += 40;
      goto LABEL_12;
    case 7:
      v1 += 48;
      goto LABEL_12;
    case 8:
      v1 += 56;
      goto LABEL_12;
    default:
      uint64_t v1 = 0x7FF7FFFFFFFFFFF8;
LABEL_12:
      double result = **(double **)v1;
      break;
  }
  return result;
}

uint64_t sub_D6D48()
{
  return 8;
}

uint64_t sub_D6D50(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = off_23FF980;
  *(_OWORD *)(a1 + 8) = 0u;
  double v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = (void *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v6 = a2[1] - *a2;
  if (v6)
  {
    sub_D2BFC((void **)(a1 + 8), v6 >> 3);
    unint64_t v7 = *(char **)(a1 + 32);
    uint64_t v8 = *(char **)(a1 + 40);
    uint64_t v9 = a2[1] - *a2;
    unint64_t v10 = v9 >> 3;
    unint64_t v11 = v8 - v7;
    BOOL v12 = v9 >> 3 >= (unint64_t)(v8 - v7);
    size_t v13 = (v9 >> 3) - (v8 - v7);
    if (v9 >> 3 > (unint64_t)(v8 - v7))
    {
      uint64_t v14 = *(void *)(a1 + 48);
      if (v14 - (uint64_t)v8 >= v13)
      {
        bzero(*(void **)(a1 + 40), (v9 >> 3) - (v8 - v7));
        *(void *)(a1 + 40) = &v8[v13];
        goto LABEL_24;
      }
      if (v9 < 0) {
        sub_2E00();
      }
      unint64_t v15 = v14 - (void)v7;
      unint64_t v16 = 2 * (v14 - (void)v7);
      if (v16 <= v10) {
        unint64_t v16 = v10;
      }
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v17 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v17 = v16;
      }
      double v18 = (char *)operator new(v17);
      uint64_t v43 = &v18[v17];
      double v19 = v18;
      int v42 = &v18[v10];
      double v20 = &v18[v11];
      bzero(&v18[v11], v13);
      if (v8 == v7)
      {
        double v23 = v42;
        double v22 = v43;
        double v19 = v20;
        goto LABEL_22;
      }
      if (v11 < 8 || (unint64_t)(v7 - v19) < 0x20)
      {
        double v21 = v8;
        double v23 = v42;
        double v22 = v43;
        goto LABEL_14;
      }
      if (v11 >= 0x20)
      {
        unint64_t v33 = v11 & 0xFFFFFFFFFFFFFFE0;
        unsigned int v34 = (long long *)(v8 - 16);
        unsigned int v35 = &v19[v8 - 16 - v7];
        unint64_t v36 = v11 & 0xFFFFFFFFFFFFFFE0;
        double v23 = v42;
        do
        {
          long long v37 = *v34;
          *((_OWORD *)v35 - 1) = *(v34 - 1);
          *(_OWORD *)unsigned int v35 = v37;
          v35 -= 32;
          v34 -= 2;
          v36 -= 32;
        }
        while (v36);
        if (v11 == v33)
        {
          double v22 = v43;
          goto LABEL_22;
        }
        if ((v11 & 0x18) == 0)
        {
          v20 -= v33;
          double v21 = &v8[-v33];
          double v22 = v43;
          goto LABEL_14;
        }
      }
      else
      {
        unint64_t v33 = 0;
        double v23 = v42;
      }
      double v21 = &v8[-(v11 & 0xFFFFFFFFFFFFFFF8)];
      v20 -= v11 & 0xFFFFFFFFFFFFFFF8;
      unsigned int v38 = &v8[-v33 - 8];
      int64_t v39 = v38 - v7;
      unint64_t v40 = v33 - (v11 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v41 = *(void *)v38;
        v38 -= 8;
        *(void *)&v19[v39] = v41;
        v39 -= 8;
        v40 += 8;
      }
      while (v40);
      double v22 = v43;
      if (v11 == (v11 & 0xFFFFFFFFFFFFFFF8))
      {
LABEL_22:
        *(void *)(a1 + 32) = v19;
        *(void *)(a1 + 40) = v23;
        *(void *)(a1 + 48) = v22;
        if (v7) {
          operator delete(v7);
        }
        goto LABEL_24;
      }
LABEL_14:
      double v24 = v20 - 1;
      do
      {
        char v25 = *--v21;
        *v24-- = v25;
      }
      while (v21 != v7);
      goto LABEL_22;
    }
  }
  else
  {
    unint64_t v10 = 0;
    unint64_t v7 = 0;
    BOOL v12 = 1;
  }
  if (!v12) {
    *(void *)(a1 + 40) = &v7[v10];
  }
LABEL_24:
  uint64_t v26 = *a2;
  if (a2[1] != *a2)
  {
    unint64_t v27 = 0;
    while (1)
    {
      uint64_t v29 = *(void *)(v26 + 8 * v27);
      uint64_t v30 = *v4;
      if (!v29) {
        break;
      }
      *(void *)(v30 + 8 * v27) = v29;
      uint64_t v31 = *(void *)(*v4 + 8 * v27);
      if (v31) {
        BOOL v28 = (*(unsigned int (**)(void))(*(void *)v31 + 32))(*(void *)(*v4 + 8 * v27)) != 17
      }
           && (*(unsigned int (**)(uint64_t))(*(void *)v31 + 32))(v31) != 18;
      else {
        BOOL v28 = 1;
      }
      *(unsigned char *)(*v5 + v27++) = v28;
      uint64_t v26 = *a2;
      if (v27 >= (a2[1] - *a2) >> 3) {
        return a1;
      }
    }
    *(void *)(a1 + 16) = v30;
    *(void *)(a1 + 40) = *(void *)(a1 + 32);
  }
  return a1;
}

void sub_D7090(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 40) = v5;
    operator delete(v5);
    uint64_t v6 = *v2;
    if (!*v2) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v6 = *v2;
    if (!*v2) {
      goto LABEL_3;
    }
  }
  *(void *)(v1 + 16) = v6;
  operator delete(v6);
  _Unwind_Resume(exception_object);
}

void *sub_D70D0(void *a1)
{
  *a1 = off_23FF980;
  unint64_t v3 = (void *)a1[1];
  uint64_t v2 = (unsigned char *)a1[2];
  if (v2 == (unsigned char *)v3)
  {
    unint64_t v3 = (void *)a1[2];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v3[v4];
      if (v5 && *(unsigned char *)(a1[4] + v4))
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        v3[v4] = 0;
        unint64_t v3 = (void *)a1[1];
        uint64_t v2 = (unsigned char *)a1[2];
      }
      ++v4;
    }
    while (v4 < (v2 - (unsigned char *)v3) >> 3);
  }
  uint64_t v6 = (void *)a1[4];
  if (v6)
  {
    a1[5] = v6;
    operator delete(v6);
    unint64_t v3 = (void *)a1[1];
  }
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_D71A8(void *a1)
{
  *a1 = off_23FF980;
  unint64_t v3 = (void *)a1[1];
  uint64_t v2 = (unsigned char *)a1[2];
  if (v2 == (unsigned char *)v3)
  {
    unint64_t v3 = (void *)a1[2];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v3[v4];
      if (v5 && *(unsigned char *)(a1[4] + v4))
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        v3[v4] = 0;
        unint64_t v3 = (void *)a1[1];
        uint64_t v2 = (unsigned char *)a1[2];
      }
      ++v4;
    }
    while (v4 < (v2 - (unsigned char *)v3) >> 3);
  }
  uint64_t v6 = (void *)a1[4];
  if (v6)
  {
    a1[5] = v6;
    operator delete(v6);
    unint64_t v3 = (void *)a1[1];
  }
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }

  operator delete();
}

double sub_D72A0(uint64_t a1)
{
  return sub_D72B0((void *)(a1 + 8));
}

uint64_t sub_D72A8()
{
  return 8;
}

double sub_D72B0(void *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  double v4 = 0.0;
  switch((v3 - *a1) >> 3)
  {
    case 0:
      goto LABEL_8;
    case 1:
      uint64_t v5 = *(void (**)(void))(**(void **)v2 + 16);
      v5();
      return result;
    case 2:
      double v8 = (*(double (**)(void))(**(void **)v2 + 16))();
      uint64_t v9 = *(void *)(*a1 + 8);
      goto LABEL_13;
    case 3:
      double v10 = (*(double (**)(void))(**(void **)v2 + 16))();
      double v8 = v10 + (*(double (**)(void))(**(void **)(*a1 + 8) + 16))(*(void *)(*a1 + 8));
      uint64_t v9 = *(void *)(*a1 + 16);
      goto LABEL_13;
    case 4:
      double v11 = (*(double (**)(void))(**(void **)v2 + 16))();
      double v12 = v11 + (*(double (**)(void))(**(void **)(*a1 + 8) + 16))(*(void *)(*a1 + 8));
      double v8 = v12 + (*(double (**)(void))(**(void **)(*a1 + 16) + 16))(*(void *)(*a1 + 16));
      uint64_t v9 = *(void *)(*a1 + 24);
      goto LABEL_13;
    case 5:
      double v13 = (*(double (**)(void))(**(void **)v2 + 16))();
      double v14 = v13 + (*(double (**)(void))(**(void **)(*a1 + 8) + 16))(*(void *)(*a1 + 8));
      double v15 = v14 + (*(double (**)(void))(**(void **)(*a1 + 16) + 16))(*(void *)(*a1 + 16));
      double v8 = v15 + (*(double (**)(void))(**(void **)(*a1 + 24) + 16))(*(void *)(*a1 + 24));
      uint64_t v9 = *(void *)(*a1 + 32);
LABEL_13:
      double result = v8 + (*(double (**)(uint64_t))(*(void *)v9 + 16))(v9);
      break;
    default:
      if (v3 != v2)
      {
        unint64_t v7 = 0;
        do
        {
          double v4 = v4 + (*(double (**)(void))(**(void **)(v2 + 8 * v7) + 16))(*(void *)(v2 + 8 * v7));
          ++v7;
          uint64_t v2 = *a1;
        }
        while (v7 < (uint64_t)(a1[1] - *a1) >> 3);
      }
LABEL_8:
      double result = v4;
      break;
  }
  return result;
}

uint64_t sub_D75F4(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = off_23FF9D0;
  *(_OWORD *)(a1 + 8) = 0u;
  double v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = (void *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v6 = a2[1] - *a2;
  if (v6)
  {
    sub_D2BFC((void **)(a1 + 8), v6 >> 3);
    unint64_t v7 = *(char **)(a1 + 32);
    double v8 = *(char **)(a1 + 40);
    uint64_t v9 = a2[1] - *a2;
    unint64_t v10 = v9 >> 3;
    unint64_t v11 = v8 - v7;
    BOOL v12 = v9 >> 3 >= (unint64_t)(v8 - v7);
    size_t v13 = (v9 >> 3) - (v8 - v7);
    if (v9 >> 3 > (unint64_t)(v8 - v7))
    {
      uint64_t v14 = *(void *)(a1 + 48);
      if (v14 - (uint64_t)v8 >= v13)
      {
        bzero(*(void **)(a1 + 40), (v9 >> 3) - (v8 - v7));
        *(void *)(a1 + 40) = &v8[v13];
        goto LABEL_24;
      }
      if (v9 < 0) {
        sub_2E00();
      }
      unint64_t v15 = v14 - (void)v7;
      unint64_t v16 = 2 * (v14 - (void)v7);
      if (v16 <= v10) {
        unint64_t v16 = v10;
      }
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v17 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v17 = v16;
      }
      double v18 = (char *)operator new(v17);
      uint64_t v43 = &v18[v17];
      double v19 = v18;
      int v42 = &v18[v10];
      double v20 = &v18[v11];
      bzero(&v18[v11], v13);
      if (v8 == v7)
      {
        double v23 = v42;
        double v22 = v43;
        double v19 = v20;
        goto LABEL_22;
      }
      if (v11 < 8 || (unint64_t)(v7 - v19) < 0x20)
      {
        double v21 = v8;
        double v23 = v42;
        double v22 = v43;
        goto LABEL_14;
      }
      if (v11 >= 0x20)
      {
        unint64_t v33 = v11 & 0xFFFFFFFFFFFFFFE0;
        unsigned int v34 = (long long *)(v8 - 16);
        unsigned int v35 = &v19[v8 - 16 - v7];
        unint64_t v36 = v11 & 0xFFFFFFFFFFFFFFE0;
        double v23 = v42;
        do
        {
          long long v37 = *v34;
          *((_OWORD *)v35 - 1) = *(v34 - 1);
          *(_OWORD *)unsigned int v35 = v37;
          v35 -= 32;
          v34 -= 2;
          v36 -= 32;
        }
        while (v36);
        if (v11 == v33)
        {
          double v22 = v43;
          goto LABEL_22;
        }
        if ((v11 & 0x18) == 0)
        {
          v20 -= v33;
          double v21 = &v8[-v33];
          double v22 = v43;
          goto LABEL_14;
        }
      }
      else
      {
        unint64_t v33 = 0;
        double v23 = v42;
      }
      double v21 = &v8[-(v11 & 0xFFFFFFFFFFFFFFF8)];
      v20 -= v11 & 0xFFFFFFFFFFFFFFF8;
      unsigned int v38 = &v8[-v33 - 8];
      int64_t v39 = v38 - v7;
      unint64_t v40 = v33 - (v11 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v41 = *(void *)v38;
        v38 -= 8;
        *(void *)&v19[v39] = v41;
        v39 -= 8;
        v40 += 8;
      }
      while (v40);
      double v22 = v43;
      if (v11 == (v11 & 0xFFFFFFFFFFFFFFF8))
      {
LABEL_22:
        *(void *)(a1 + 32) = v19;
        *(void *)(a1 + 40) = v23;
        *(void *)(a1 + 48) = v22;
        if (v7) {
          operator delete(v7);
        }
        goto LABEL_24;
      }
LABEL_14:
      double v24 = v20 - 1;
      do
      {
        char v25 = *--v21;
        *v24-- = v25;
      }
      while (v21 != v7);
      goto LABEL_22;
    }
  }
  else
  {
    unint64_t v10 = 0;
    unint64_t v7 = 0;
    BOOL v12 = 1;
  }
  if (!v12) {
    *(void *)(a1 + 40) = &v7[v10];
  }
LABEL_24:
  uint64_t v26 = *a2;
  if (a2[1] != *a2)
  {
    unint64_t v27 = 0;
    while (1)
    {
      uint64_t v29 = *(void *)(v26 + 8 * v27);
      uint64_t v30 = *v4;
      if (!v29) {
        break;
      }
      *(void *)(v30 + 8 * v27) = v29;
      uint64_t v31 = *(void *)(*v4 + 8 * v27);
      if (v31) {
        BOOL v28 = (*(unsigned int (**)(void))(*(void *)v31 + 32))(*(void *)(*v4 + 8 * v27)) != 17
      }
           && (*(unsigned int (**)(uint64_t))(*(void *)v31 + 32))(v31) != 18;
      else {
        BOOL v28 = 1;
      }
      *(unsigned char *)(*v5 + v27++) = v28;
      uint64_t v26 = *a2;
      if (v27 >= (a2[1] - *a2) >> 3) {
        return a1;
      }
    }
    *(void *)(a1 + 16) = v30;
    *(void *)(a1 + 40) = *(void *)(a1 + 32);
  }
  return a1;
}

void sub_D7934(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 40) = v5;
    operator delete(v5);
    uint64_t v6 = *v2;
    if (!*v2) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v6 = *v2;
    if (!*v2) {
      goto LABEL_3;
    }
  }
  *(void *)(v1 + 16) = v6;
  operator delete(v6);
  _Unwind_Resume(exception_object);
}

void *sub_D7974(void *a1)
{
  *a1 = off_23FF9D0;
  uint64_t v3 = (void *)a1[1];
  uint64_t v2 = (unsigned char *)a1[2];
  if (v2 == (unsigned char *)v3)
  {
    uint64_t v3 = (void *)a1[2];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v3[v4];
      if (v5 && *(unsigned char *)(a1[4] + v4))
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        v3[v4] = 0;
        uint64_t v3 = (void *)a1[1];
        uint64_t v2 = (unsigned char *)a1[2];
      }
      ++v4;
    }
    while (v4 < (v2 - (unsigned char *)v3) >> 3);
  }
  uint64_t v6 = (void *)a1[4];
  if (v6)
  {
    a1[5] = v6;
    operator delete(v6);
    uint64_t v3 = (void *)a1[1];
  }
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_D7A4C(void *a1)
{
  *a1 = off_23FF9D0;
  uint64_t v3 = (void *)a1[1];
  uint64_t v2 = (unsigned char *)a1[2];
  if (v2 == (unsigned char *)v3)
  {
    uint64_t v3 = (void *)a1[2];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v3[v4];
      if (v5 && *(unsigned char *)(a1[4] + v4))
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        v3[v4] = 0;
        uint64_t v3 = (void *)a1[1];
        uint64_t v2 = (unsigned char *)a1[2];
      }
      ++v4;
    }
    while (v4 < (v2 - (unsigned char *)v3) >> 3);
  }
  uint64_t v6 = (void *)a1[4];
  if (v6)
  {
    a1[5] = v6;
    operator delete(v6);
    uint64_t v3 = (void *)a1[1];
  }
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }

  operator delete();
}

double sub_D7B44(uint64_t a1)
{
  return sub_D7B54((void *)(a1 + 8));
}

uint64_t sub_D7B4C()
{
  return 8;
}

double sub_D7B54(void *a1)
{
  uint64_t v2 = *a1;
  double v3 = 0.0;
  switch((uint64_t)(a1[1] - *a1) >> 3)
  {
    case 0:
      return v3;
    case 1:
      unint64_t v4 = *(void (**)(void))(**(void **)v2 + 16);
      v4();
      return result;
    case 2:
      double v6 = (*(double (**)(void))(**(void **)v2 + 16))();
      uint64_t v7 = *(void *)(*a1 + 8);
      goto LABEL_9;
    case 3:
      double v8 = (*(double (**)(void))(**(void **)v2 + 16))();
      double v6 = v8 * (*(double (**)(void))(**(void **)(*a1 + 8) + 16))(*(void *)(*a1 + 8));
      uint64_t v7 = *(void *)(*a1 + 16);
      goto LABEL_9;
    case 4:
      double v9 = (*(double (**)(void))(**(void **)v2 + 16))();
      double v10 = v9 * (*(double (**)(void))(**(void **)(*a1 + 8) + 16))(*(void *)(*a1 + 8));
      double v6 = v10 * (*(double (**)(void))(**(void **)(*a1 + 16) + 16))(*(void *)(*a1 + 16));
      uint64_t v7 = *(void *)(*a1 + 24);
      goto LABEL_9;
    case 5:
      double v11 = (*(double (**)(void))(**(void **)v2 + 16))();
      double v12 = v11 * (*(double (**)(void))(**(void **)(*a1 + 8) + 16))(*(void *)(*a1 + 8));
      double v13 = v12 * (*(double (**)(void))(**(void **)(*a1 + 16) + 16))(*(void *)(*a1 + 16));
      double v6 = v13 * (*(double (**)(void))(**(void **)(*a1 + 24) + 16))(*(void *)(*a1 + 24));
      uint64_t v7 = *(void *)(*a1 + 32);
LABEL_9:
      double v3 = v6 * (*(double (**)(uint64_t))(*(void *)v7 + 16))(v7);
      break;
    default:
      double v3 = (*(double (**)(void))(**(void **)v2 + 16))();
      uint64_t v14 = *a1;
      if (a1[1] - *a1 >= 9uLL)
      {
        unint64_t v15 = 1;
        do
        {
          double v3 = v3 * (*(double (**)(void))(**(void **)(v14 + 8 * v15) + 16))(*(void *)(v14 + 8 * v15));
          ++v15;
          uint64_t v14 = *a1;
        }
        while (v15 < (uint64_t)(a1[1] - *a1) >> 3);
      }
      break;
  }
  return v3;
}

uint64_t sub_D7EBC(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = off_23FFA20;
  *(_OWORD *)(a1 + 8) = 0u;
  unint64_t v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = (void *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v6 = a2[1] - *a2;
  if (v6)
  {
    sub_D2BFC((void **)(a1 + 8), v6 >> 3);
    uint64_t v7 = *(char **)(a1 + 32);
    double v8 = *(char **)(a1 + 40);
    uint64_t v9 = a2[1] - *a2;
    unint64_t v10 = v9 >> 3;
    unint64_t v11 = v8 - v7;
    BOOL v12 = v9 >> 3 >= (unint64_t)(v8 - v7);
    size_t v13 = (v9 >> 3) - (v8 - v7);
    if (v9 >> 3 > (unint64_t)(v8 - v7))
    {
      uint64_t v14 = *(void *)(a1 + 48);
      if (v14 - (uint64_t)v8 >= v13)
      {
        bzero(*(void **)(a1 + 40), (v9 >> 3) - (v8 - v7));
        *(void *)(a1 + 40) = &v8[v13];
        goto LABEL_24;
      }
      if (v9 < 0) {
        sub_2E00();
      }
      unint64_t v15 = v14 - (void)v7;
      unint64_t v16 = 2 * (v14 - (void)v7);
      if (v16 <= v10) {
        unint64_t v16 = v10;
      }
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v17 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v17 = v16;
      }
      double v18 = (char *)operator new(v17);
      uint64_t v43 = &v18[v17];
      double v19 = v18;
      int v42 = &v18[v10];
      double v20 = &v18[v11];
      bzero(&v18[v11], v13);
      if (v8 == v7)
      {
        double v23 = v42;
        double v22 = v43;
        double v19 = v20;
        goto LABEL_22;
      }
      if (v11 < 8 || (unint64_t)(v7 - v19) < 0x20)
      {
        double v21 = v8;
        double v23 = v42;
        double v22 = v43;
        goto LABEL_14;
      }
      if (v11 >= 0x20)
      {
        unint64_t v33 = v11 & 0xFFFFFFFFFFFFFFE0;
        unsigned int v34 = (long long *)(v8 - 16);
        unsigned int v35 = &v19[v8 - 16 - v7];
        unint64_t v36 = v11 & 0xFFFFFFFFFFFFFFE0;
        double v23 = v42;
        do
        {
          long long v37 = *v34;
          *((_OWORD *)v35 - 1) = *(v34 - 1);
          *(_OWORD *)unsigned int v35 = v37;
          v35 -= 32;
          v34 -= 2;
          v36 -= 32;
        }
        while (v36);
        if (v11 == v33)
        {
          double v22 = v43;
          goto LABEL_22;
        }
        if ((v11 & 0x18) == 0)
        {
          v20 -= v33;
          double v21 = &v8[-v33];
          double v22 = v43;
          goto LABEL_14;
        }
      }
      else
      {
        unint64_t v33 = 0;
        double v23 = v42;
      }
      double v21 = &v8[-(v11 & 0xFFFFFFFFFFFFFFF8)];
      v20 -= v11 & 0xFFFFFFFFFFFFFFF8;
      unsigned int v38 = &v8[-v33 - 8];
      int64_t v39 = v38 - v7;
      unint64_t v40 = v33 - (v11 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v41 = *(void *)v38;
        v38 -= 8;
        *(void *)&v19[v39] = v41;
        v39 -= 8;
        v40 += 8;
      }
      while (v40);
      double v22 = v43;
      if (v11 == (v11 & 0xFFFFFFFFFFFFFFF8))
      {
LABEL_22:
        *(void *)(a1 + 32) = v19;
        *(void *)(a1 + 40) = v23;
        *(void *)(a1 + 48) = v22;
        if (v7) {
          operator delete(v7);
        }
        goto LABEL_24;
      }
LABEL_14:
      double v24 = v20 - 1;
      do
      {
        char v25 = *--v21;
        *v24-- = v25;
      }
      while (v21 != v7);
      goto LABEL_22;
    }
  }
  else
  {
    unint64_t v10 = 0;
    uint64_t v7 = 0;
    BOOL v12 = 1;
  }
  if (!v12) {
    *(void *)(a1 + 40) = &v7[v10];
  }
LABEL_24:
  uint64_t v26 = *a2;
  if (a2[1] != *a2)
  {
    unint64_t v27 = 0;
    while (1)
    {
      uint64_t v29 = *(void *)(v26 + 8 * v27);
      uint64_t v30 = *v4;
      if (!v29) {
        break;
      }
      *(void *)(v30 + 8 * v27) = v29;
      uint64_t v31 = *(void *)(*v4 + 8 * v27);
      if (v31) {
        BOOL v28 = (*(unsigned int (**)(void))(*(void *)v31 + 32))(*(void *)(*v4 + 8 * v27)) != 17
      }
           && (*(unsigned int (**)(uint64_t))(*(void *)v31 + 32))(v31) != 18;
      else {
        BOOL v28 = 1;
      }
      *(unsigned char *)(*v5 + v27++) = v28;
      uint64_t v26 = *a2;
      if (v27 >= (a2[1] - *a2) >> 3) {
        return a1;
      }
    }
    *(void *)(a1 + 16) = v30;
    *(void *)(a1 + 40) = *(void *)(a1 + 32);
  }
  return a1;
}

void sub_D81FC(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 40) = v5;
    operator delete(v5);
    uint64_t v6 = *v2;
    if (!*v2) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v6 = *v2;
    if (!*v2) {
      goto LABEL_3;
    }
  }
  *(void *)(v1 + 16) = v6;
  operator delete(v6);
  _Unwind_Resume(exception_object);
}

void *sub_D823C(void *a1)
{
  *a1 = off_23FFA20;
  double v3 = (void *)a1[1];
  uint64_t v2 = (unsigned char *)a1[2];
  if (v2 == (unsigned char *)v3)
  {
    double v3 = (void *)a1[2];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v3[v4];
      if (v5 && *(unsigned char *)(a1[4] + v4))
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        v3[v4] = 0;
        double v3 = (void *)a1[1];
        uint64_t v2 = (unsigned char *)a1[2];
      }
      ++v4;
    }
    while (v4 < (v2 - (unsigned char *)v3) >> 3);
  }
  uint64_t v6 = (void *)a1[4];
  if (v6)
  {
    a1[5] = v6;
    operator delete(v6);
    double v3 = (void *)a1[1];
  }
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_D8314(void *a1)
{
  *a1 = off_23FFA20;
  double v3 = (void *)a1[1];
  uint64_t v2 = (unsigned char *)a1[2];
  if (v2 == (unsigned char *)v3)
  {
    double v3 = (void *)a1[2];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v3[v4];
      if (v5 && *(unsigned char *)(a1[4] + v4))
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        v3[v4] = 0;
        double v3 = (void *)a1[1];
        uint64_t v2 = (unsigned char *)a1[2];
      }
      ++v4;
    }
    while (v4 < (v2 - (unsigned char *)v3) >> 3);
  }
  uint64_t v6 = (void *)a1[4];
  if (v6)
  {
    a1[5] = v6;
    operator delete(v6);
    double v3 = (void *)a1[1];
  }
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }

  operator delete();
}

double sub_D840C(uint64_t a1, __n128 a2)
{
  return sub_D841C((void *)(a1 + 8), a2);
}

uint64_t sub_D8414()
{
  return 8;
}

double sub_D841C(void *a1, __n128 a2)
{
  uint64_t v3 = *a1;
  a2.n128_u64[0] = 0;
  switch((uint64_t)(a1[1] - *a1) >> 3)
  {
    case 0:
      return a2.n128_f64[0];
    case 1:
      unint64_t v4 = *(void (**)(__n128))(**(void **)v3 + 16);
      v4(a2);
      break;
    case 2:
      double v5 = (*(double (**)(double))(**(void **)v3 + 16))(0.0);
      a2.n128_f64[0] = (v5 + (*(double (**)(void))(**(void **)(*a1 + 8) + 16))(*(void *)(*a1 + 8)))
                     * 0.5;
      break;
    case 3:
      double v6 = (*(double (**)(double))(**(void **)v3 + 16))(0.0);
      double v7 = v6 + (*(double (**)(void))(**(void **)(*a1 + 8) + 16))(*(void *)(*a1 + 8));
      a2.n128_f64[0] = (v7
                      + (*(double (**)(void))(**(void **)(*a1 + 16) + 16))(*(void *)(*a1 + 16)))
                     / 3.0;
      break;
    case 4:
      double v8 = (*(double (**)(double))(**(void **)v3 + 16))(0.0);
      double v9 = v8 + (*(double (**)(void))(**(void **)(*a1 + 8) + 16))(*(void *)(*a1 + 8));
      double v10 = v9 + (*(double (**)(void))(**(void **)(*a1 + 16) + 16))(*(void *)(*a1 + 16));
      a2.n128_f64[0] = (v10
                      + (*(double (**)(void))(**(void **)(*a1 + 24) + 16))(*(void *)(*a1 + 24)))
                     * 0.25;
      break;
    case 5:
      double v11 = (*(double (**)(double))(**(void **)v3 + 16))(0.0);
      double v12 = v11 + (*(double (**)(void))(**(void **)(*a1 + 8) + 16))(*(void *)(*a1 + 8));
      double v13 = v12 + (*(double (**)(void))(**(void **)(*a1 + 16) + 16))(*(void *)(*a1 + 16));
      double v14 = v13 + (*(double (**)(void))(**(void **)(*a1 + 24) + 16))(*(void *)(*a1 + 24));
      a2.n128_f64[0] = (v14
                      + (*(double (**)(void))(**(void **)(*a1 + 32) + 16))(*(void *)(*a1 + 32)))
                     / 5.0;
      break;
    default:
      a2.n128_f64[0] = sub_D72B0(a1) / (double)(unint64_t)((uint64_t)(a1[1] - *a1) >> 3);
      break;
  }
  return a2.n128_f64[0];
}

uint64_t sub_D87E4(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = off_23FFA70;
  *(_OWORD *)(a1 + 8) = 0u;
  unint64_t v4 = (uint64_t *)(a1 + 8);
  double v5 = (void *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v6 = a2[1] - *a2;
  if (v6)
  {
    sub_D2BFC((void **)(a1 + 8), v6 >> 3);
    double v7 = *(char **)(a1 + 32);
    double v8 = *(char **)(a1 + 40);
    uint64_t v9 = a2[1] - *a2;
    unint64_t v10 = v9 >> 3;
    unint64_t v11 = v8 - v7;
    BOOL v12 = v9 >> 3 >= (unint64_t)(v8 - v7);
    size_t v13 = (v9 >> 3) - (v8 - v7);
    if (v9 >> 3 > (unint64_t)(v8 - v7))
    {
      uint64_t v14 = *(void *)(a1 + 48);
      if (v14 - (uint64_t)v8 >= v13)
      {
        bzero(*(void **)(a1 + 40), (v9 >> 3) - (v8 - v7));
        *(void *)(a1 + 40) = &v8[v13];
        goto LABEL_24;
      }
      if (v9 < 0) {
        sub_2E00();
      }
      unint64_t v15 = v14 - (void)v7;
      unint64_t v16 = 2 * (v14 - (void)v7);
      if (v16 <= v10) {
        unint64_t v16 = v10;
      }
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v17 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v17 = v16;
      }
      double v18 = (char *)operator new(v17);
      uint64_t v43 = &v18[v17];
      double v19 = v18;
      int v42 = &v18[v10];
      double v20 = &v18[v11];
      bzero(&v18[v11], v13);
      if (v8 == v7)
      {
        double v23 = v42;
        double v22 = v43;
        double v19 = v20;
        goto LABEL_22;
      }
      if (v11 < 8 || (unint64_t)(v7 - v19) < 0x20)
      {
        double v21 = v8;
        double v23 = v42;
        double v22 = v43;
        goto LABEL_14;
      }
      if (v11 >= 0x20)
      {
        unint64_t v33 = v11 & 0xFFFFFFFFFFFFFFE0;
        unsigned int v34 = (long long *)(v8 - 16);
        unsigned int v35 = &v19[v8 - 16 - v7];
        unint64_t v36 = v11 & 0xFFFFFFFFFFFFFFE0;
        double v23 = v42;
        do
        {
          long long v37 = *v34;
          *((_OWORD *)v35 - 1) = *(v34 - 1);
          *(_OWORD *)unsigned int v35 = v37;
          v35 -= 32;
          v34 -= 2;
          v36 -= 32;
        }
        while (v36);
        if (v11 == v33)
        {
          double v22 = v43;
          goto LABEL_22;
        }
        if ((v11 & 0x18) == 0)
        {
          v20 -= v33;
          double v21 = &v8[-v33];
          double v22 = v43;
          goto LABEL_14;
        }
      }
      else
      {
        unint64_t v33 = 0;
        double v23 = v42;
      }
      double v21 = &v8[-(v11 & 0xFFFFFFFFFFFFFFF8)];
      v20 -= v11 & 0xFFFFFFFFFFFFFFF8;
      unsigned int v38 = &v8[-v33 - 8];
      int64_t v39 = v38 - v7;
      unint64_t v40 = v33 - (v11 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v41 = *(void *)v38;
        v38 -= 8;
        *(void *)&v19[v39] = v41;
        v39 -= 8;
        v40 += 8;
      }
      while (v40);
      double v22 = v43;
      if (v11 == (v11 & 0xFFFFFFFFFFFFFFF8))
      {
LABEL_22:
        *(void *)(a1 + 32) = v19;
        *(void *)(a1 + 40) = v23;
        *(void *)(a1 + 48) = v22;
        if (v7) {
          operator delete(v7);
        }
        goto LABEL_24;
      }
LABEL_14:
      double v24 = v20 - 1;
      do
      {
        char v25 = *--v21;
        *v24-- = v25;
      }
      while (v21 != v7);
      goto LABEL_22;
    }
  }
  else
  {
    unint64_t v10 = 0;
    double v7 = 0;
    BOOL v12 = 1;
  }
  if (!v12) {
    *(void *)(a1 + 40) = &v7[v10];
  }
LABEL_24:
  uint64_t v26 = *a2;
  if (a2[1] != *a2)
  {
    unint64_t v27 = 0;
    while (1)
    {
      uint64_t v29 = *(void *)(v26 + 8 * v27);
      uint64_t v30 = *v4;
      if (!v29) {
        break;
      }
      *(void *)(v30 + 8 * v27) = v29;
      uint64_t v31 = *(void *)(*v4 + 8 * v27);
      if (v31) {
        BOOL v28 = (*(unsigned int (**)(void))(*(void *)v31 + 32))(*(void *)(*v4 + 8 * v27)) != 17
      }
           && (*(unsigned int (**)(uint64_t))(*(void *)v31 + 32))(v31) != 18;
      else {
        BOOL v28 = 1;
      }
      *(unsigned char *)(*v5 + v27++) = v28;
      uint64_t v26 = *a2;
      if (v27 >= (a2[1] - *a2) >> 3) {
        return a1;
      }
    }
    *(void *)(a1 + 16) = v30;
    *(void *)(a1 + 40) = *(void *)(a1 + 32);
  }
  return a1;
}

void sub_D8B24(_Unwind_Exception *exception_object)
{
  double v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 40) = v5;
    operator delete(v5);
    uint64_t v6 = *v2;
    if (!*v2) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v6 = *v2;
    if (!*v2) {
      goto LABEL_3;
    }
  }
  *(void *)(v1 + 16) = v6;
  operator delete(v6);
  _Unwind_Resume(exception_object);
}

void *sub_D8B64(void *a1)
{
  *a1 = off_23FFA70;
  uint64_t v3 = (void *)a1[1];
  uint64_t v2 = (unsigned char *)a1[2];
  if (v2 == (unsigned char *)v3)
  {
    uint64_t v3 = (void *)a1[2];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v3[v4];
      if (v5 && *(unsigned char *)(a1[4] + v4))
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        v3[v4] = 0;
        uint64_t v3 = (void *)a1[1];
        uint64_t v2 = (unsigned char *)a1[2];
      }
      ++v4;
    }
    while (v4 < (v2 - (unsigned char *)v3) >> 3);
  }
  uint64_t v6 = (void *)a1[4];
  if (v6)
  {
    a1[5] = v6;
    operator delete(v6);
    uint64_t v3 = (void *)a1[1];
  }
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_D8C3C(void *a1)
{
  *a1 = off_23FFA70;
  uint64_t v3 = (void *)a1[1];
  uint64_t v2 = (unsigned char *)a1[2];
  if (v2 == (unsigned char *)v3)
  {
    uint64_t v3 = (void *)a1[2];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v3[v4];
      if (v5 && *(unsigned char *)(a1[4] + v4))
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        v3[v4] = 0;
        uint64_t v3 = (void *)a1[1];
        uint64_t v2 = (unsigned char *)a1[2];
      }
      ++v4;
    }
    while (v4 < (v2 - (unsigned char *)v3) >> 3);
  }
  uint64_t v6 = (void *)a1[4];
  if (v6)
  {
    a1[5] = v6;
    operator delete(v6);
    uint64_t v3 = (void *)a1[1];
  }
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }

  operator delete();
}

double sub_D8D34(uint64_t a1)
{
  return sub_D8D44((void *)(a1 + 8));
}

uint64_t sub_D8D3C()
{
  return 8;
}

double sub_D8D44(void *a1)
{
  uint64_t v2 = *a1;
  double v3 = 0.0;
  switch((uint64_t)(a1[1] - *a1) >> 3)
  {
    case 0:
      return v3;
    case 1:
      unint64_t v4 = *(void (**)(void))(**(void **)v2 + 16);
      v4();
      return result;
    case 2:
      double v3 = (*(double (**)(void))(**(void **)v2 + 16))();
      double v6 = (*(double (**)(void))(**(void **)(*a1 + 8) + 16))(*(void *)(*a1 + 8));
      if (v6 < v3) {
        return v6;
      }
      return v3;
    case 3:
      double v7 = (*(double (**)(void))(**(void **)v2 + 16))();
      double v8 = (*(double (**)(void))(**(void **)(*a1 + 8) + 16))(*(void *)(*a1 + 8));
      (*(void (**)(void))(**(void **)(*a1 + 16) + 16))(*(void *)(*a1 + 16));
      goto LABEL_11;
    case 4:
      double v7 = (*(double (**)(void))(**(void **)v2 + 16))();
      double v8 = (*(double (**)(void))(**(void **)(*a1 + 8) + 16))(*(void *)(*a1 + 8));
      double v10 = (*(double (**)(void))(**(void **)(*a1 + 16) + 16))(*(void *)(*a1 + 16));
      double v9 = (*(double (**)(void))(**(void **)(*a1 + 24) + 16))(*(void *)(*a1 + 24));
      if (v9 >= v10) {
        double v9 = v10;
      }
LABEL_11:
      if (v8 >= v7) {
        double v11 = v7;
      }
      else {
        double v11 = v8;
      }
      goto LABEL_21;
    case 5:
      double v12 = (*(double (**)(void))(**(void **)v2 + 16))();
      double v13 = (*(double (**)(void))(**(void **)(*a1 + 8) + 16))(*(void *)(*a1 + 8));
      double v14 = (*(double (**)(void))(**(void **)(*a1 + 16) + 16))(*(void *)(*a1 + 16));
      double v15 = (*(double (**)(void))(**(void **)(*a1 + 24) + 16))(*(void *)(*a1 + 24));
      if (v15 < v14) {
        double v14 = v15;
      }
      if (v13 < v12) {
        double v12 = v13;
      }
      (*(void (**)(void))(**(void **)(*a1 + 32) + 16))(*(void *)(*a1 + 32));
      if (v14 >= v12) {
        double v11 = v12;
      }
      else {
        double v11 = v14;
      }
LABEL_21:
      if (v9 >= v11) {
        double v3 = v11;
      }
      else {
        double v3 = v9;
      }
      break;
    default:
      double v3 = (*(double (**)(void))(**(void **)v2 + 16))();
      uint64_t v16 = *a1;
      if (a1[1] - *a1 >= 9uLL)
      {
        unint64_t v17 = 1;
        do
        {
          double v18 = (*(double (**)(void))(**(void **)(v16 + 8 * v17) + 16))(*(void *)(v16 + 8 * v17));
          if (v18 < v3) {
            double v3 = v18;
          }
          ++v17;
          uint64_t v16 = *a1;
        }
        while (v17 < (uint64_t)(a1[1] - *a1) >> 3);
      }
      break;
  }
  return v3;
}

uint64_t sub_D916C(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = off_23FFAC0;
  *(_OWORD *)(a1 + 8) = 0u;
  unint64_t v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = (void *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v6 = a2[1] - *a2;
  if (v6)
  {
    sub_D2BFC((void **)(a1 + 8), v6 >> 3);
    double v7 = *(char **)(a1 + 32);
    double v8 = *(char **)(a1 + 40);
    uint64_t v9 = a2[1] - *a2;
    unint64_t v10 = v9 >> 3;
    unint64_t v11 = v8 - v7;
    BOOL v12 = v9 >> 3 >= (unint64_t)(v8 - v7);
    size_t v13 = (v9 >> 3) - (v8 - v7);
    if (v9 >> 3 > (unint64_t)(v8 - v7))
    {
      uint64_t v14 = *(void *)(a1 + 48);
      if (v14 - (uint64_t)v8 >= v13)
      {
        bzero(*(void **)(a1 + 40), (v9 >> 3) - (v8 - v7));
        *(void *)(a1 + 40) = &v8[v13];
        goto LABEL_24;
      }
      if (v9 < 0) {
        sub_2E00();
      }
      unint64_t v15 = v14 - (void)v7;
      unint64_t v16 = 2 * (v14 - (void)v7);
      if (v16 <= v10) {
        unint64_t v16 = v10;
      }
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v17 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v17 = v16;
      }
      double v18 = (char *)operator new(v17);
      uint64_t v43 = &v18[v17];
      double v19 = v18;
      int v42 = &v18[v10];
      double v20 = &v18[v11];
      bzero(&v18[v11], v13);
      if (v8 == v7)
      {
        double v23 = v42;
        double v22 = v43;
        double v19 = v20;
        goto LABEL_22;
      }
      if (v11 < 8 || (unint64_t)(v7 - v19) < 0x20)
      {
        double v21 = v8;
        double v23 = v42;
        double v22 = v43;
        goto LABEL_14;
      }
      if (v11 >= 0x20)
      {
        unint64_t v33 = v11 & 0xFFFFFFFFFFFFFFE0;
        unsigned int v34 = (long long *)(v8 - 16);
        unsigned int v35 = &v19[v8 - 16 - v7];
        unint64_t v36 = v11 & 0xFFFFFFFFFFFFFFE0;
        double v23 = v42;
        do
        {
          long long v37 = *v34;
          *((_OWORD *)v35 - 1) = *(v34 - 1);
          *(_OWORD *)unsigned int v35 = v37;
          v35 -= 32;
          v34 -= 2;
          v36 -= 32;
        }
        while (v36);
        if (v11 == v33)
        {
          double v22 = v43;
          goto LABEL_22;
        }
        if ((v11 & 0x18) == 0)
        {
          v20 -= v33;
          double v21 = &v8[-v33];
          double v22 = v43;
          goto LABEL_14;
        }
      }
      else
      {
        unint64_t v33 = 0;
        double v23 = v42;
      }
      double v21 = &v8[-(v11 & 0xFFFFFFFFFFFFFFF8)];
      v20 -= v11 & 0xFFFFFFFFFFFFFFF8;
      unsigned int v38 = &v8[-v33 - 8];
      int64_t v39 = v38 - v7;
      unint64_t v40 = v33 - (v11 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v41 = *(void *)v38;
        v38 -= 8;
        *(void *)&v19[v39] = v41;
        v39 -= 8;
        v40 += 8;
      }
      while (v40);
      double v22 = v43;
      if (v11 == (v11 & 0xFFFFFFFFFFFFFFF8))
      {
LABEL_22:
        *(void *)(a1 + 32) = v19;
        *(void *)(a1 + 40) = v23;
        *(void *)(a1 + 48) = v22;
        if (v7) {
          operator delete(v7);
        }
        goto LABEL_24;
      }
LABEL_14:
      double v24 = v20 - 1;
      do
      {
        char v25 = *--v21;
        *v24-- = v25;
      }
      while (v21 != v7);
      goto LABEL_22;
    }
  }
  else
  {
    unint64_t v10 = 0;
    double v7 = 0;
    BOOL v12 = 1;
  }
  if (!v12) {
    *(void *)(a1 + 40) = &v7[v10];
  }
LABEL_24:
  uint64_t v26 = *a2;
  if (a2[1] != *a2)
  {
    unint64_t v27 = 0;
    while (1)
    {
      uint64_t v29 = *(void *)(v26 + 8 * v27);
      uint64_t v30 = *v4;
      if (!v29) {
        break;
      }
      *(void *)(v30 + 8 * v27) = v29;
      uint64_t v31 = *(void *)(*v4 + 8 * v27);
      if (v31) {
        BOOL v28 = (*(unsigned int (**)(void))(*(void *)v31 + 32))(*(void *)(*v4 + 8 * v27)) != 17
      }
           && (*(unsigned int (**)(uint64_t))(*(void *)v31 + 32))(v31) != 18;
      else {
        BOOL v28 = 1;
      }
      *(unsigned char *)(*v5 + v27++) = v28;
      uint64_t v26 = *a2;
      if (v27 >= (a2[1] - *a2) >> 3) {
        return a1;
      }
    }
    *(void *)(a1 + 16) = v30;
    *(void *)(a1 + 40) = *(void *)(a1 + 32);
  }
  return a1;
}

void sub_D94AC(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 40) = v5;
    operator delete(v5);
    uint64_t v6 = *v2;
    if (!*v2) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v6 = *v2;
    if (!*v2) {
      goto LABEL_3;
    }
  }
  *(void *)(v1 + 16) = v6;
  operator delete(v6);
  _Unwind_Resume(exception_object);
}

void *sub_D94EC(void *a1)
{
  *a1 = off_23FFAC0;
  double v3 = (void *)a1[1];
  uint64_t v2 = (unsigned char *)a1[2];
  if (v2 == (unsigned char *)v3)
  {
    double v3 = (void *)a1[2];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v3[v4];
      if (v5 && *(unsigned char *)(a1[4] + v4))
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        v3[v4] = 0;
        double v3 = (void *)a1[1];
        uint64_t v2 = (unsigned char *)a1[2];
      }
      ++v4;
    }
    while (v4 < (v2 - (unsigned char *)v3) >> 3);
  }
  uint64_t v6 = (void *)a1[4];
  if (v6)
  {
    a1[5] = v6;
    operator delete(v6);
    double v3 = (void *)a1[1];
  }
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_D95C4(void *a1)
{
  *a1 = off_23FFAC0;
  double v3 = (void *)a1[1];
  uint64_t v2 = (unsigned char *)a1[2];
  if (v2 == (unsigned char *)v3)
  {
    double v3 = (void *)a1[2];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v3[v4];
      if (v5 && *(unsigned char *)(a1[4] + v4))
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        v3[v4] = 0;
        double v3 = (void *)a1[1];
        uint64_t v2 = (unsigned char *)a1[2];
      }
      ++v4;
    }
    while (v4 < (v2 - (unsigned char *)v3) >> 3);
  }
  uint64_t v6 = (void *)a1[4];
  if (v6)
  {
    a1[5] = v6;
    operator delete(v6);
    double v3 = (void *)a1[1];
  }
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }

  operator delete();
}

double sub_D96BC(uint64_t a1)
{
  return sub_D96CC((void *)(a1 + 8));
}

uint64_t sub_D96C4()
{
  return 8;
}

double sub_D96CC(void *a1)
{
  uint64_t v2 = *a1;
  double v3 = 0.0;
  switch((uint64_t)(a1[1] - *a1) >> 3)
  {
    case 0:
      return v3;
    case 1:
      unint64_t v4 = *(void (**)(void))(**(void **)v2 + 16);
      v4();
      return result;
    case 2:
      double v3 = (*(double (**)(void))(**(void **)v2 + 16))();
      double v6 = (*(double (**)(void))(**(void **)(*a1 + 8) + 16))(*(void *)(*a1 + 8));
      if (v3 < v6) {
        return v6;
      }
      return v3;
    case 3:
      double v7 = (*(double (**)(void))(**(void **)v2 + 16))();
      double v8 = (*(double (**)(void))(**(void **)(*a1 + 8) + 16))(*(void *)(*a1 + 8));
      uint64_t v9 = *(void *)(*a1 + 16);
      goto LABEL_21;
    case 4:
      double v10 = (*(double (**)(void))(**(void **)v2 + 16))();
      double v11 = (*(double (**)(void))(**(void **)(*a1 + 8) + 16))(*(void *)(*a1 + 8));
      double v12 = (*(double (**)(void))(**(void **)(*a1 + 16) + 16))(*(void *)(*a1 + 16));
      (*(void (**)(void))(**(void **)(*a1 + 24) + 16))(*(void *)(*a1 + 24));
      if (v10 >= v11) {
        double v14 = v10;
      }
      else {
        double v14 = v11;
      }
      if (v12 >= v13) {
        double v13 = v12;
      }
      goto LABEL_24;
    case 5:
      double v7 = (*(double (**)(void))(**(void **)v2 + 16))();
      double v15 = (*(double (**)(void))(**(void **)(*a1 + 8) + 16))(*(void *)(*a1 + 8));
      double v16 = (*(double (**)(void))(**(void **)(*a1 + 16) + 16))(*(void *)(*a1 + 16));
      (*(void (**)(void))(**(void **)(*a1 + 24) + 16))(*(void *)(*a1 + 24));
      if (v7 < v15) {
        double v7 = v15;
      }
      if (v16 >= v17) {
        double v8 = v16;
      }
      else {
        double v8 = v17;
      }
      uint64_t v9 = *(void *)(*a1 + 32);
LABEL_21:
      (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
      if (v7 >= v8) {
        double v14 = v7;
      }
      else {
        double v14 = v8;
      }
LABEL_24:
      if (v14 >= v13) {
        double v3 = v14;
      }
      else {
        double v3 = v13;
      }
      break;
    default:
      double v3 = (*(double (**)(void))(**(void **)v2 + 16))();
      uint64_t v18 = *a1;
      if (a1[1] - *a1 >= 9uLL)
      {
        unint64_t v19 = 1;
        do
        {
          double v20 = (*(double (**)(void))(**(void **)(v18 + 8 * v19) + 16))(*(void *)(v18 + 8 * v19));
          if (v20 > v3) {
            double v3 = v20;
          }
          ++v19;
          uint64_t v18 = *a1;
        }
        while (v19 < (uint64_t)(a1[1] - *a1) >> 3);
      }
      break;
  }
  return v3;
}

uint64_t sub_D9AD0(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = off_23FFB10;
  *(_OWORD *)(a1 + 8) = 0u;
  unint64_t v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = (void *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v6 = a2[1] - *a2;
  if (v6)
  {
    sub_D2BFC((void **)(a1 + 8), v6 >> 3);
    double v7 = *(char **)(a1 + 32);
    double v8 = *(char **)(a1 + 40);
    uint64_t v9 = a2[1] - *a2;
    unint64_t v10 = v9 >> 3;
    unint64_t v11 = v8 - v7;
    BOOL v12 = v9 >> 3 >= (unint64_t)(v8 - v7);
    size_t v13 = (v9 >> 3) - (v8 - v7);
    if (v9 >> 3 > (unint64_t)(v8 - v7))
    {
      uint64_t v14 = *(void *)(a1 + 48);
      if (v14 - (uint64_t)v8 >= v13)
      {
        bzero(*(void **)(a1 + 40), (v9 >> 3) - (v8 - v7));
        *(void *)(a1 + 40) = &v8[v13];
        goto LABEL_24;
      }
      if (v9 < 0) {
        sub_2E00();
      }
      unint64_t v15 = v14 - (void)v7;
      unint64_t v16 = 2 * (v14 - (void)v7);
      if (v16 <= v10) {
        unint64_t v16 = v10;
      }
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v17 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v17 = v16;
      }
      uint64_t v18 = (char *)operator new(v17);
      uint64_t v43 = &v18[v17];
      unint64_t v19 = v18;
      int v42 = &v18[v10];
      double v20 = &v18[v11];
      bzero(&v18[v11], v13);
      if (v8 == v7)
      {
        double v23 = v42;
        double v22 = v43;
        unint64_t v19 = v20;
        goto LABEL_22;
      }
      if (v11 < 8 || (unint64_t)(v7 - v19) < 0x20)
      {
        double v21 = v8;
        double v23 = v42;
        double v22 = v43;
        goto LABEL_14;
      }
      if (v11 >= 0x20)
      {
        unint64_t v33 = v11 & 0xFFFFFFFFFFFFFFE0;
        unsigned int v34 = (long long *)(v8 - 16);
        unsigned int v35 = &v19[v8 - 16 - v7];
        unint64_t v36 = v11 & 0xFFFFFFFFFFFFFFE0;
        double v23 = v42;
        do
        {
          long long v37 = *v34;
          *((_OWORD *)v35 - 1) = *(v34 - 1);
          *(_OWORD *)unsigned int v35 = v37;
          v35 -= 32;
          v34 -= 2;
          v36 -= 32;
        }
        while (v36);
        if (v11 == v33)
        {
          double v22 = v43;
          goto LABEL_22;
        }
        if ((v11 & 0x18) == 0)
        {
          v20 -= v33;
          double v21 = &v8[-v33];
          double v22 = v43;
          goto LABEL_14;
        }
      }
      else
      {
        unint64_t v33 = 0;
        double v23 = v42;
      }
      double v21 = &v8[-(v11 & 0xFFFFFFFFFFFFFFF8)];
      v20 -= v11 & 0xFFFFFFFFFFFFFFF8;
      unsigned int v38 = &v8[-v33 - 8];
      int64_t v39 = v38 - v7;
      unint64_t v40 = v33 - (v11 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v41 = *(void *)v38;
        v38 -= 8;
        *(void *)&v19[v39] = v41;
        v39 -= 8;
        v40 += 8;
      }
      while (v40);
      double v22 = v43;
      if (v11 == (v11 & 0xFFFFFFFFFFFFFFF8))
      {
LABEL_22:
        *(void *)(a1 + 32) = v19;
        *(void *)(a1 + 40) = v23;
        *(void *)(a1 + 48) = v22;
        if (v7) {
          operator delete(v7);
        }
        goto LABEL_24;
      }
LABEL_14:
      double v24 = v20 - 1;
      do
      {
        char v25 = *--v21;
        *v24-- = v25;
      }
      while (v21 != v7);
      goto LABEL_22;
    }
  }
  else
  {
    unint64_t v10 = 0;
    double v7 = 0;
    BOOL v12 = 1;
  }
  if (!v12) {
    *(void *)(a1 + 40) = &v7[v10];
  }
LABEL_24:
  uint64_t v26 = *a2;
  if (a2[1] != *a2)
  {
    unint64_t v27 = 0;
    while (1)
    {
      uint64_t v29 = *(void *)(v26 + 8 * v27);
      uint64_t v30 = *v4;
      if (!v29) {
        break;
      }
      *(void *)(v30 + 8 * v27) = v29;
      uint64_t v31 = *(void *)(*v4 + 8 * v27);
      if (v31) {
        BOOL v28 = (*(unsigned int (**)(void))(*(void *)v31 + 32))(*(void *)(*v4 + 8 * v27)) != 17
      }
           && (*(unsigned int (**)(uint64_t))(*(void *)v31 + 32))(v31) != 18;
      else {
        BOOL v28 = 1;
      }
      *(unsigned char *)(*v5 + v27++) = v28;
      uint64_t v26 = *a2;
      if (v27 >= (a2[1] - *a2) >> 3) {
        return a1;
      }
    }
    *(void *)(a1 + 16) = v30;
    *(void *)(a1 + 40) = *(void *)(a1 + 32);
  }
  return a1;
}

void sub_D9E10(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 40) = v5;
    operator delete(v5);
    uint64_t v6 = *v2;
    if (!*v2) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v6 = *v2;
    if (!*v2) {
      goto LABEL_3;
    }
  }
  *(void *)(v1 + 16) = v6;
  operator delete(v6);
  _Unwind_Resume(exception_object);
}

void *sub_D9E50(void *a1)
{
  *a1 = off_23FFB10;
  double v3 = (void *)a1[1];
  uint64_t v2 = (unsigned char *)a1[2];
  if (v2 == (unsigned char *)v3)
  {
    double v3 = (void *)a1[2];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v3[v4];
      if (v5 && *(unsigned char *)(a1[4] + v4))
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        v3[v4] = 0;
        double v3 = (void *)a1[1];
        uint64_t v2 = (unsigned char *)a1[2];
      }
      ++v4;
    }
    while (v4 < (v2 - (unsigned char *)v3) >> 3);
  }
  uint64_t v6 = (void *)a1[4];
  if (v6)
  {
    a1[5] = v6;
    operator delete(v6);
    double v3 = (void *)a1[1];
  }
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_D9F28(void *a1)
{
  *a1 = off_23FFB10;
  double v3 = (void *)a1[1];
  uint64_t v2 = (unsigned char *)a1[2];
  if (v2 == (unsigned char *)v3)
  {
    double v3 = (void *)a1[2];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v3[v4];
      if (v5 && *(unsigned char *)(a1[4] + v4))
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        v3[v4] = 0;
        double v3 = (void *)a1[1];
        uint64_t v2 = (unsigned char *)a1[2];
      }
      ++v4;
    }
    while (v4 < (v2 - (unsigned char *)v3) >> 3);
  }
  uint64_t v6 = (void *)a1[4];
  if (v6)
  {
    a1[5] = v6;
    operator delete(v6);
    double v3 = (void *)a1[1];
  }
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }

  operator delete();
}

double sub_DA020(uint64_t a1)
{
  return sub_DA030((uint64_t *)(a1 + 8));
}

uint64_t sub_DA028()
{
  return 8;
}

double sub_DA030(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  switch((v3 - *a1) >> 3)
  {
    case 1:
      goto LABEL_21;
    case 2:
      if ((*(double (**)(void))(**(void **)v2 + 16))() == 0.0) {
        return 0.0;
      }
      uint64_t v2 = *a1 + 8;
      goto LABEL_21;
    case 3:
      double v4 = 0.0;
      if ((*(double (**)(void))(**(void **)v2 + 16))() == 0.0
        || (*(double (**)(void))(**(void **)(*a1 + 8) + 16))(*(void *)(*a1 + 8)) == 0.0)
      {
        return v4;
      }
      uint64_t v2 = *a1 + 16;
      goto LABEL_21;
    case 4:
      double v4 = 0.0;
      if ((*(double (**)(void))(**(void **)v2 + 16))() == 0.0
        || (*(double (**)(void))(**(void **)(*a1 + 8) + 16))(*(void *)(*a1 + 8)) == 0.0
        || (*(double (**)(void))(**(void **)(*a1 + 16) + 16))(*(void *)(*a1 + 16)) == 0.0)
      {
        return v4;
      }
      uint64_t v2 = *a1 + 24;
      goto LABEL_21;
    case 5:
      double v4 = 0.0;
      if ((*(double (**)(void))(**(void **)v2 + 16))() == 0.0
        || (*(double (**)(void))(**(void **)(*a1 + 8) + 16))(*(void *)(*a1 + 8)) == 0.0
        || (*(double (**)(void))(**(void **)(*a1 + 16) + 16))(*(void *)(*a1 + 16)) == 0.0
        || (*(double (**)(void))(**(void **)(*a1 + 24) + 16))(*(void *)(*a1 + 24)) == 0.0)
      {
        return v4;
      }
      uint64_t v2 = *a1 + 32;
LABEL_21:
      if ((*(double (**)(void))(**(void **)v2 + 16))() == 0.0) {
        return 0.0;
      }
      else {
        return 1.0;
      }
    default:
      double v4 = 1.0;
      if (v3 == v2) {
        return v4;
      }
      unint64_t v5 = 0;
      break;
  }
  while ((*(double (**)(void))(**(void **)(v2 + 8 * v5) + 16))(*(void *)(v2 + 8 * v5)) != 0.0)
  {
    ++v5;
    uint64_t v2 = *a1;
    if (v5 >= (a1[1] - *a1) >> 3) {
      return v4;
    }
  }
  return 0.0;
}

uint64_t sub_DA394(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = off_23FFB60;
  *(_OWORD *)(a1 + 8) = 0u;
  double v4 = (uint64_t *)(a1 + 8);
  unint64_t v5 = (void *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v6 = a2[1] - *a2;
  if (v6)
  {
    sub_D2BFC((void **)(a1 + 8), v6 >> 3);
    double v7 = *(char **)(a1 + 32);
    double v8 = *(char **)(a1 + 40);
    uint64_t v9 = a2[1] - *a2;
    unint64_t v10 = v9 >> 3;
    unint64_t v11 = v8 - v7;
    BOOL v12 = v9 >> 3 >= (unint64_t)(v8 - v7);
    size_t v13 = (v9 >> 3) - (v8 - v7);
    if (v9 >> 3 > (unint64_t)(v8 - v7))
    {
      uint64_t v14 = *(void *)(a1 + 48);
      if (v14 - (uint64_t)v8 >= v13)
      {
        bzero(*(void **)(a1 + 40), (v9 >> 3) - (v8 - v7));
        *(void *)(a1 + 40) = &v8[v13];
        goto LABEL_24;
      }
      if (v9 < 0) {
        sub_2E00();
      }
      unint64_t v15 = v14 - (void)v7;
      unint64_t v16 = 2 * (v14 - (void)v7);
      if (v16 <= v10) {
        unint64_t v16 = v10;
      }
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v17 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v17 = v16;
      }
      uint64_t v18 = (char *)operator new(v17);
      uint64_t v43 = &v18[v17];
      unint64_t v19 = v18;
      int v42 = &v18[v10];
      double v20 = &v18[v11];
      bzero(&v18[v11], v13);
      if (v8 == v7)
      {
        double v23 = v42;
        double v22 = v43;
        unint64_t v19 = v20;
        goto LABEL_22;
      }
      if (v11 < 8 || (unint64_t)(v7 - v19) < 0x20)
      {
        double v21 = v8;
        double v23 = v42;
        double v22 = v43;
        goto LABEL_14;
      }
      if (v11 >= 0x20)
      {
        unint64_t v33 = v11 & 0xFFFFFFFFFFFFFFE0;
        unsigned int v34 = (long long *)(v8 - 16);
        unsigned int v35 = &v19[v8 - 16 - v7];
        unint64_t v36 = v11 & 0xFFFFFFFFFFFFFFE0;
        double v23 = v42;
        do
        {
          long long v37 = *v34;
          *((_OWORD *)v35 - 1) = *(v34 - 1);
          *(_OWORD *)unsigned int v35 = v37;
          v35 -= 32;
          v34 -= 2;
          v36 -= 32;
        }
        while (v36);
        if (v11 == v33)
        {
          double v22 = v43;
          goto LABEL_22;
        }
        if ((v11 & 0x18) == 0)
        {
          v20 -= v33;
          double v21 = &v8[-v33];
          double v22 = v43;
          goto LABEL_14;
        }
      }
      else
      {
        unint64_t v33 = 0;
        double v23 = v42;
      }
      double v21 = &v8[-(v11 & 0xFFFFFFFFFFFFFFF8)];
      v20 -= v11 & 0xFFFFFFFFFFFFFFF8;
      unsigned int v38 = &v8[-v33 - 8];
      int64_t v39 = v38 - v7;
      unint64_t v40 = v33 - (v11 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v41 = *(void *)v38;
        v38 -= 8;
        *(void *)&v19[v39] = v41;
        v39 -= 8;
        v40 += 8;
      }
      while (v40);
      double v22 = v43;
      if (v11 == (v11 & 0xFFFFFFFFFFFFFFF8))
      {
LABEL_22:
        *(void *)(a1 + 32) = v19;
        *(void *)(a1 + 40) = v23;
        *(void *)(a1 + 48) = v22;
        if (v7) {
          operator delete(v7);
        }
        goto LABEL_24;
      }
LABEL_14:
      double v24 = v20 - 1;
      do
      {
        char v25 = *--v21;
        *v24-- = v25;
      }
      while (v21 != v7);
      goto LABEL_22;
    }
  }
  else
  {
    unint64_t v10 = 0;
    double v7 = 0;
    BOOL v12 = 1;
  }
  if (!v12) {
    *(void *)(a1 + 40) = &v7[v10];
  }
LABEL_24:
  uint64_t v26 = *a2;
  if (a2[1] != *a2)
  {
    unint64_t v27 = 0;
    while (1)
    {
      uint64_t v29 = *(void *)(v26 + 8 * v27);
      uint64_t v30 = *v4;
      if (!v29) {
        break;
      }
      *(void *)(v30 + 8 * v27) = v29;
      uint64_t v31 = *(void *)(*v4 + 8 * v27);
      if (v31) {
        BOOL v28 = (*(unsigned int (**)(void))(*(void *)v31 + 32))(*(void *)(*v4 + 8 * v27)) != 17
      }
           && (*(unsigned int (**)(uint64_t))(*(void *)v31 + 32))(v31) != 18;
      else {
        BOOL v28 = 1;
      }
      *(unsigned char *)(*v5 + v27++) = v28;
      uint64_t v26 = *a2;
      if (v27 >= (a2[1] - *a2) >> 3) {
        return a1;
      }
    }
    *(void *)(a1 + 16) = v30;
    *(void *)(a1 + 40) = *(void *)(a1 + 32);
  }
  return a1;
}

void sub_DA6D4(_Unwind_Exception *exception_object)
{
  unint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 40) = v5;
    operator delete(v5);
    uint64_t v6 = *v2;
    if (!*v2) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v6 = *v2;
    if (!*v2) {
      goto LABEL_3;
    }
  }
  *(void *)(v1 + 16) = v6;
  operator delete(v6);
  _Unwind_Resume(exception_object);
}

void *sub_DA714(void *a1)
{
  *a1 = off_23FFB60;
  uint64_t v3 = (void *)a1[1];
  uint64_t v2 = (unsigned char *)a1[2];
  if (v2 == (unsigned char *)v3)
  {
    uint64_t v3 = (void *)a1[2];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v3[v4];
      if (v5 && *(unsigned char *)(a1[4] + v4))
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        v3[v4] = 0;
        uint64_t v3 = (void *)a1[1];
        uint64_t v2 = (unsigned char *)a1[2];
      }
      ++v4;
    }
    while (v4 < (v2 - (unsigned char *)v3) >> 3);
  }
  uint64_t v6 = (void *)a1[4];
  if (v6)
  {
    a1[5] = v6;
    operator delete(v6);
    uint64_t v3 = (void *)a1[1];
  }
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_DA7EC(void *a1)
{
  *a1 = off_23FFB60;
  uint64_t v3 = (void *)a1[1];
  uint64_t v2 = (unsigned char *)a1[2];
  if (v2 == (unsigned char *)v3)
  {
    uint64_t v3 = (void *)a1[2];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v3[v4];
      if (v5 && *(unsigned char *)(a1[4] + v4))
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        v3[v4] = 0;
        uint64_t v3 = (void *)a1[1];
        uint64_t v2 = (unsigned char *)a1[2];
      }
      ++v4;
    }
    while (v4 < (v2 - (unsigned char *)v3) >> 3);
  }
  uint64_t v6 = (void *)a1[4];
  if (v6)
  {
    a1[5] = v6;
    operator delete(v6);
    uint64_t v3 = (void *)a1[1];
  }
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }

  operator delete();
}

double sub_DA8E4(uint64_t a1)
{
  return sub_DA8F4((uint64_t *)(a1 + 8));
}

uint64_t sub_DA8EC()
{
  return 8;
}

double sub_DA8F4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  switch((v3 - *a1) >> 3)
  {
    case 1:
      goto LABEL_22;
    case 2:
      double v4 = 1.0;
      if ((*(double (**)(void))(**(void **)v2 + 16))() != 0.0) {
        return v4;
      }
      uint64_t v2 = *a1 + 8;
      goto LABEL_22;
    case 3:
      double v4 = 1.0;
      if ((*(double (**)(void))(**(void **)v2 + 16))() != 0.0
        || (*(double (**)(void))(**(void **)(*a1 + 8) + 16))(*(void *)(*a1 + 8)) != 0.0)
      {
        return v4;
      }
      uint64_t v2 = *a1 + 16;
      goto LABEL_22;
    case 4:
      double v4 = 1.0;
      if ((*(double (**)(void))(**(void **)v2 + 16))() != 0.0
        || (*(double (**)(void))(**(void **)(*a1 + 8) + 16))(*(void *)(*a1 + 8)) != 0.0
        || (*(double (**)(void))(**(void **)(*a1 + 16) + 16))(*(void *)(*a1 + 16)) != 0.0)
      {
        return v4;
      }
      uint64_t v2 = *a1 + 24;
      goto LABEL_22;
    case 5:
      double v4 = 1.0;
      if ((*(double (**)(void))(**(void **)v2 + 16))() != 0.0
        || (*(double (**)(void))(**(void **)(*a1 + 8) + 16))(*(void *)(*a1 + 8)) != 0.0
        || (*(double (**)(void))(**(void **)(*a1 + 16) + 16))(*(void *)(*a1 + 16)) != 0.0
        || (*(double (**)(void))(**(void **)(*a1 + 24) + 16))(*(void *)(*a1 + 24)) != 0.0)
      {
        return v4;
      }
      uint64_t v2 = *a1 + 32;
LABEL_22:
      if ((*(double (**)(void))(**(void **)v2 + 16))() == 0.0) {
        return 0.0;
      }
      else {
        return 1.0;
      }
    default:
      double v4 = 0.0;
      if (v3 == v2) {
        return v4;
      }
      unint64_t v6 = 0;
      break;
  }
  while ((*(double (**)(void))(**(void **)(v2 + 8 * v6) + 16))(*(void *)(v2 + 8 * v6)) == 0.0)
  {
    ++v6;
    uint64_t v2 = *a1;
    if (v6 >= (a1[1] - *a1) >> 3) {
      return v4;
    }
  }
  return 1.0;
}

uint64_t sub_DAC5C(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = off_23FFBB0;
  *(_OWORD *)(a1 + 8) = 0u;
  double v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = (void *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v6 = a2[1] - *a2;
  if (v6)
  {
    sub_D2BFC((void **)(a1 + 8), v6 >> 3);
    double v7 = *(char **)(a1 + 32);
    double v8 = *(char **)(a1 + 40);
    uint64_t v9 = a2[1] - *a2;
    unint64_t v10 = v9 >> 3;
    unint64_t v11 = v8 - v7;
    BOOL v12 = v9 >> 3 >= (unint64_t)(v8 - v7);
    size_t v13 = (v9 >> 3) - (v8 - v7);
    if (v9 >> 3 > (unint64_t)(v8 - v7))
    {
      uint64_t v14 = *(void *)(a1 + 48);
      if (v14 - (uint64_t)v8 >= v13)
      {
        bzero(*(void **)(a1 + 40), (v9 >> 3) - (v8 - v7));
        *(void *)(a1 + 40) = &v8[v13];
        goto LABEL_24;
      }
      if (v9 < 0) {
        sub_2E00();
      }
      unint64_t v15 = v14 - (void)v7;
      unint64_t v16 = 2 * (v14 - (void)v7);
      if (v16 <= v10) {
        unint64_t v16 = v10;
      }
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v17 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v17 = v16;
      }
      uint64_t v18 = (char *)operator new(v17);
      uint64_t v43 = &v18[v17];
      unint64_t v19 = v18;
      int v42 = &v18[v10];
      double v20 = &v18[v11];
      bzero(&v18[v11], v13);
      if (v8 == v7)
      {
        double v23 = v42;
        double v22 = v43;
        unint64_t v19 = v20;
        goto LABEL_22;
      }
      if (v11 < 8 || (unint64_t)(v7 - v19) < 0x20)
      {
        double v21 = v8;
        double v23 = v42;
        double v22 = v43;
        goto LABEL_14;
      }
      if (v11 >= 0x20)
      {
        unint64_t v33 = v11 & 0xFFFFFFFFFFFFFFE0;
        unsigned int v34 = (long long *)(v8 - 16);
        unsigned int v35 = &v19[v8 - 16 - v7];
        unint64_t v36 = v11 & 0xFFFFFFFFFFFFFFE0;
        double v23 = v42;
        do
        {
          long long v37 = *v34;
          *((_OWORD *)v35 - 1) = *(v34 - 1);
          *(_OWORD *)unsigned int v35 = v37;
          v35 -= 32;
          v34 -= 2;
          v36 -= 32;
        }
        while (v36);
        if (v11 == v33)
        {
          double v22 = v43;
          goto LABEL_22;
        }
        if ((v11 & 0x18) == 0)
        {
          v20 -= v33;
          double v21 = &v8[-v33];
          double v22 = v43;
          goto LABEL_14;
        }
      }
      else
      {
        unint64_t v33 = 0;
        double v23 = v42;
      }
      double v21 = &v8[-(v11 & 0xFFFFFFFFFFFFFFF8)];
      v20 -= v11 & 0xFFFFFFFFFFFFFFF8;
      unsigned int v38 = &v8[-v33 - 8];
      int64_t v39 = v38 - v7;
      unint64_t v40 = v33 - (v11 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v41 = *(void *)v38;
        v38 -= 8;
        *(void *)&v19[v39] = v41;
        v39 -= 8;
        v40 += 8;
      }
      while (v40);
      double v22 = v43;
      if (v11 == (v11 & 0xFFFFFFFFFFFFFFF8))
      {
LABEL_22:
        *(void *)(a1 + 32) = v19;
        *(void *)(a1 + 40) = v23;
        *(void *)(a1 + 48) = v22;
        if (v7) {
          operator delete(v7);
        }
        goto LABEL_24;
      }
LABEL_14:
      double v24 = v20 - 1;
      do
      {
        char v25 = *--v21;
        *v24-- = v25;
      }
      while (v21 != v7);
      goto LABEL_22;
    }
  }
  else
  {
    unint64_t v10 = 0;
    double v7 = 0;
    BOOL v12 = 1;
  }
  if (!v12) {
    *(void *)(a1 + 40) = &v7[v10];
  }
LABEL_24:
  uint64_t v26 = *a2;
  if (a2[1] != *a2)
  {
    unint64_t v27 = 0;
    while (1)
    {
      uint64_t v29 = *(void *)(v26 + 8 * v27);
      uint64_t v30 = *v4;
      if (!v29) {
        break;
      }
      *(void *)(v30 + 8 * v27) = v29;
      uint64_t v31 = *(void *)(*v4 + 8 * v27);
      if (v31) {
        BOOL v28 = (*(unsigned int (**)(void))(*(void *)v31 + 32))(*(void *)(*v4 + 8 * v27)) != 17
      }
           && (*(unsigned int (**)(uint64_t))(*(void *)v31 + 32))(v31) != 18;
      else {
        BOOL v28 = 1;
      }
      *(unsigned char *)(*v5 + v27++) = v28;
      uint64_t v26 = *a2;
      if (v27 >= (a2[1] - *a2) >> 3) {
        return a1;
      }
    }
    *(void *)(a1 + 16) = v30;
    *(void *)(a1 + 40) = *(void *)(a1 + 32);
  }
  return a1;
}

void sub_DAF9C(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 40) = v5;
    operator delete(v5);
    uint64_t v6 = *v2;
    if (!*v2) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v6 = *v2;
    if (!*v2) {
      goto LABEL_3;
    }
  }
  *(void *)(v1 + 16) = v6;
  operator delete(v6);
  _Unwind_Resume(exception_object);
}

void *sub_DAFDC(void *a1)
{
  *a1 = off_23FFBB0;
  uint64_t v3 = (void *)a1[1];
  uint64_t v2 = (unsigned char *)a1[2];
  if (v2 == (unsigned char *)v3)
  {
    uint64_t v3 = (void *)a1[2];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v3[v4];
      if (v5 && *(unsigned char *)(a1[4] + v4))
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        v3[v4] = 0;
        uint64_t v3 = (void *)a1[1];
        uint64_t v2 = (unsigned char *)a1[2];
      }
      ++v4;
    }
    while (v4 < (v2 - (unsigned char *)v3) >> 3);
  }
  uint64_t v6 = (void *)a1[4];
  if (v6)
  {
    a1[5] = v6;
    operator delete(v6);
    uint64_t v3 = (void *)a1[1];
  }
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_DB0B4(void *a1)
{
  *a1 = off_23FFBB0;
  uint64_t v3 = (void *)a1[1];
  uint64_t v2 = (unsigned char *)a1[2];
  if (v2 == (unsigned char *)v3)
  {
    uint64_t v3 = (void *)a1[2];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v3[v4];
      if (v5 && *(unsigned char *)(a1[4] + v4))
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        v3[v4] = 0;
        uint64_t v3 = (void *)a1[1];
        uint64_t v2 = (unsigned char *)a1[2];
      }
      ++v4;
    }
    while (v4 < (v2 - (unsigned char *)v3) >> 3);
  }
  uint64_t v6 = (void *)a1[4];
  if (v6)
  {
    a1[5] = v6;
    operator delete(v6);
    uint64_t v3 = (void *)a1[1];
  }
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }

  operator delete();
}

uint64_t *sub_DB1AC(uint64_t a1)
{
  return sub_DB1BC((uint64_t *)(a1 + 8));
}

uint64_t sub_DB1B4()
{
  return 8;
}

uint64_t *sub_DB1BC(uint64_t *result)
{
  uint64_t v1 = result;
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = v3 - *result;
  switch(v4 >> 3)
  {
    case 0:
      return result;
    case 1:
      goto LABEL_13;
    case 2:
      (*(void (**)(void))(**(void **)v2 + 16))();
      uint64_t v2 = *v1 + 8;
      goto LABEL_13;
    case 3:
      (*(void (**)(void))(**(void **)v2 + 16))();
      (*(void (**)(void))(**(void **)(*v1 + 8) + 16))(*(void *)(*v1 + 8));
      uint64_t v2 = *v1 + 16;
      goto LABEL_13;
    case 4:
      (*(void (**)(void))(**(void **)v2 + 16))();
      (*(void (**)(void))(**(void **)(*v1 + 8) + 16))(*(void *)(*v1 + 8));
      (*(void (**)(void))(**(void **)(*v1 + 16) + 16))(*(void *)(*v1 + 16));
      uint64_t v2 = *v1 + 24;
      goto LABEL_13;
    case 5:
      (*(void (**)(void))(**(void **)v2 + 16))();
      (*(void (**)(void))(**(void **)(*v1 + 8) + 16))(*(void *)(*v1 + 8));
      (*(void (**)(void))(**(void **)(*v1 + 16) + 16))(*(void *)(*v1 + 16));
      (*(void (**)(void))(**(void **)(*v1 + 24) + 16))(*(void *)(*v1 + 24));
      uint64_t v2 = *v1 + 32;
      goto LABEL_13;
    case 6:
      (*(void (**)(void))(**(void **)v2 + 16))();
      (*(void (**)(void))(**(void **)(*v1 + 8) + 16))(*(void *)(*v1 + 8));
      (*(void (**)(void))(**(void **)(*v1 + 16) + 16))(*(void *)(*v1 + 16));
      (*(void (**)(void))(**(void **)(*v1 + 24) + 16))(*(void *)(*v1 + 24));
      (*(void (**)(void))(**(void **)(*v1 + 32) + 16))(*(void *)(*v1 + 32));
      uint64_t v2 = *v1 + 40;
      goto LABEL_13;
    case 7:
      (*(void (**)(void))(**(void **)v2 + 16))();
      (*(void (**)(void))(**(void **)(*v1 + 8) + 16))(*(void *)(*v1 + 8));
      (*(void (**)(void))(**(void **)(*v1 + 16) + 16))(*(void *)(*v1 + 16));
      (*(void (**)(void))(**(void **)(*v1 + 24) + 16))(*(void *)(*v1 + 24));
      (*(void (**)(void))(**(void **)(*v1 + 32) + 16))(*(void *)(*v1 + 32));
      (*(void (**)(void))(**(void **)(*v1 + 40) + 16))(*(void *)(*v1 + 40));
      uint64_t v2 = *v1 + 48;
      goto LABEL_13;
    case 8:
      (*(void (**)(void))(**(void **)v2 + 16))();
      (*(void (**)(void))(**(void **)(*v1 + 8) + 16))(*(void *)(*v1 + 8));
      (*(void (**)(void))(**(void **)(*v1 + 16) + 16))(*(void *)(*v1 + 16));
      (*(void (**)(void))(**(void **)(*v1 + 24) + 16))(*(void *)(*v1 + 24));
      (*(void (**)(void))(**(void **)(*v1 + 32) + 16))(*(void *)(*v1 + 32));
      (*(void (**)(void))(**(void **)(*v1 + 40) + 16))(*(void *)(*v1 + 40));
      (*(void (**)(void))(**(void **)(*v1 + 48) + 16))(*(void *)(*v1 + 48));
      uint64_t v2 = *v1 + 56;
      goto LABEL_13;
    default:
      if (v4 != 8)
      {
        unint64_t v5 = 0;
        do
        {
          (*(void (**)(void))(**(void **)(v2 + 8 * v5) + 16))(*(void *)(v2 + 8 * v5));
          ++v5;
          uint64_t v2 = *v1;
          uint64_t v3 = v1[1];
        }
        while (v5 < ((v3 - *v1) >> 3) - 1);
      }
      uint64_t v2 = v3 - 8;
LABEL_13:
      uint64_t v6 = *(uint64_t (**)(void))(**(void **)v2 + 16);
      return (uint64_t *)v6();
  }
}

uint64_t sub_DB7D8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v105[0] = 1;
  uint64_t v106 = a1;
  uint64_t v107 = a2;
  uint64_t v4 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v4) {
    uint64_t v4 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v4 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v4;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v4 + 8));
  *(void *)(a1 + 136) = *(void *)(v4 + 32);
  if (*(_DWORD *)(a1 + 104) != 40)
  {
    std::operator+<char>();
    uint64_t v6 = std::string::append(&v91, "', instead got: '");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v92.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    int v8 = *(char *)(a1 + 135);
    if (v8 >= 0) {
      uint64_t v9 = (const std::string::value_type *)(a1 + 112);
    }
    else {
      uint64_t v9 = *(const std::string::value_type **)(a1 + 112);
    }
    if (v8 >= 0) {
      std::string::size_type v10 = *(unsigned __int8 *)(a1 + 135);
    }
    else {
      std::string::size_type v10 = *(void *)(a1 + 120);
    }
    unint64_t v11 = std::string::append(&v92, v9, v10);
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v93.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    size_t v13 = std::string::append(&v93, "'");
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    memset(&v89, 0, sizeof(v89));
    std::string::push_back(&v89, 56);
    std::string::push_back(&v89, 53);
    std::string::push_back(&v89, 50);
    std::string::push_back(&v89, 49);
    std::string::push_back(&v89, 50);
    std::string::size_type size = HIBYTE(v89.__r_.__value_.__r.__words[2]);
    if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v16 = &v89;
    }
    else {
      unint64_t v16 = (std::string *)v89.__r_.__value_.__r.__words[0];
    }
    if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v89.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      size_t v17 = (std::string *)((char *)v16 + size - 1);
      if (v17 > v16)
      {
        uint64_t v18 = &v16->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v19 = *(v18 - 1);
          *(v18 - 1) = v17->__r_.__value_.__s.__data_[0];
          v17->__r_.__value_.__s.__data_[0] = v19;
          size_t v17 = (std::string *)((char *)v17 - 1);
          BOOL v20 = v18++ >= (char *)v17;
        }
        while (!v20);
      }
    }
    double v21 = std::string::insert(&v89, 0, "exprtk.hpp:");
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v90.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v96.__r_.__value_.__s + 23) = 0;
    v96.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v97 = -1;
    long long v99 = 0u;
    long long v100 = 0u;
    long long v101 = 0u;
    long long __p = 0u;
    long long v103 = 0u;
    uint64_t v104 = 0;
    int v98 = 1;
    int v95 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v96, (const std::string *)(a1 + 112));
    uint64_t v97 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v99, &__str);
    std::string::operator=((std::string *)((char *)&v100 + 8), &v90);
    uint64_t v23 = *(void *)(a1 + 568);
    uint64_t v24 = *(void *)(a1 + 560);
    uint64_t v25 = 30 * ((v23 - v24) >> 3) - 1;
    if (v23 == v24) {
      uint64_t v25 = 0;
    }
    if (v25 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v24 = *(void *)(a1 + 560);
      uint64_t v23 = *(void *)(a1 + 568);
    }
    if (v23 == v24)
    {
      uint64_t v27 = 0;
    }
    else
    {
      unint64_t v26 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v27 = *(void *)(v24 + 8 * (v26 / 0x1E)) + 136 * (v26 % 0x1E);
    }
    sub_B5158(v27, (uint64_t)&v95);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v103) < 0)
    {
      operator delete((void *)__p);
      if ((SHIBYTE(v101) & 0x80000000) == 0)
      {
LABEL_57:
        if ((SBYTE7(v100) & 0x80000000) == 0) {
          goto LABEL_58;
        }
        goto LABEL_68;
      }
    }
    else if ((SHIBYTE(v101) & 0x80000000) == 0)
    {
      goto LABEL_57;
    }
    operator delete(*((void **)&v100 + 1));
    if ((SBYTE7(v100) & 0x80000000) == 0)
    {
LABEL_58:
      if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_59;
      }
      goto LABEL_69;
    }
LABEL_68:
    operator delete((void *)v99);
    if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_59:
      if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_60;
      }
      goto LABEL_70;
    }
LABEL_69:
    operator delete(v96.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_60:
      if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_61;
      }
      goto LABEL_71;
    }
LABEL_70:
    operator delete(v90.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_61:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_62;
      }
      goto LABEL_72;
    }
LABEL_71:
    operator delete(v89.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_62:
      if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_63;
      }
      goto LABEL_73;
    }
LABEL_72:
    operator delete(__str.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_63:
      if ((SHIBYTE(v92.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_64;
      }
      goto LABEL_74;
    }
LABEL_73:
    operator delete(v93.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v92.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_64:
      if ((SHIBYTE(v91.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_146;
      }
LABEL_75:
      unsigned int v48 = (void *)v91.__r_.__value_.__r.__words[0];
LABEL_145:
      operator delete(v48);
      goto LABEL_146;
    }
LABEL_74:
    operator delete(v92.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v91.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_146;
    }
    goto LABEL_75;
  }
  uint64_t v5 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v5) {
    uint64_t v5 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v5 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v5;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v5 + 8));
  *(void *)(a1 + 136) = *(void *)(v5 + 32);
  if (*(_DWORD *)(a1 + 104) == 41)
  {
    std::operator+<char>();
    BOOL v28 = std::string::append(&v93, "'");
    long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    memset(&v91, 0, sizeof(v91));
    std::string::push_back(&v91, 57);
    std::string::push_back(&v91, 54);
    std::string::push_back(&v91, 50);
    std::string::push_back(&v91, 49);
    std::string::push_back(&v91, 50);
    std::string::size_type v30 = HIBYTE(v91.__r_.__value_.__r.__words[2]);
    if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v31 = &v91;
    }
    else {
      uint64_t v31 = (std::string *)v91.__r_.__value_.__r.__words[0];
    }
    if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v30 = v91.__r_.__value_.__l.__size_;
    }
    if (v30)
    {
      unsigned int v32 = (std::string *)((char *)v31 + v30 - 1);
      if (v32 > v31)
      {
        unint64_t v33 = &v31->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v34 = *(v33 - 1);
          *(v33 - 1) = v32->__r_.__value_.__s.__data_[0];
          v32->__r_.__value_.__s.__data_[0] = v34;
          unsigned int v32 = (std::string *)((char *)v32 - 1);
          BOOL v20 = v33++ >= (char *)v32;
        }
        while (!v20);
      }
    }
    unsigned int v35 = std::string::insert(&v91, 0, "exprtk.hpp:");
    long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    v92.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v96.__r_.__value_.__s + 23) = 0;
    v96.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v97 = -1;
    long long v99 = 0u;
    long long v100 = 0u;
    long long v101 = 0u;
    long long __p = 0u;
    long long v103 = 0u;
    uint64_t v104 = 0;
    int v98 = 1;
    int v95 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v96, (const std::string *)(a1 + 112));
    uint64_t v97 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v99, &__str);
    std::string::operator=((std::string *)((char *)&v100 + 8), &v92);
    uint64_t v37 = *(void *)(a1 + 568);
    uint64_t v38 = *(void *)(a1 + 560);
    uint64_t v39 = 30 * ((v37 - v38) >> 3) - 1;
    if (v37 == v38) {
      uint64_t v39 = 0;
    }
    if (v39 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v38 = *(void *)(a1 + 560);
      uint64_t v37 = *(void *)(a1 + 568);
    }
    if (v37 == v38)
    {
      uint64_t v41 = 0;
    }
    else
    {
      unint64_t v40 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v41 = *(void *)(v38 + 8 * (v40 / 0x1E)) + 136 * (v40 % 0x1E);
    }
    goto LABEL_128;
  }
  uint64_t v42 = sub_B7FE4(a1, 0);
  *(void *)a2 = v42;
  if (!v42) {
    goto LABEL_146;
  }
  uint64_t v43 = a1 + 40;
  int v44 = *(_DWORD *)(a1 + 104);
  if (v44 == 44)
  {
    uint64_t v49 = *(void *)(a1 + 24);
    uint64_t v50 = a1 + 40;
    if (*(void *)(a1 + 8) != v49)
    {
      *(void *)(a1 + 24) = v49 + 40;
      uint64_t v50 = v49;
    }
    *(_DWORD *)(a1 + 104) = *(_DWORD *)v50;
    std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v50 + 8));
    *(void *)(a1 + 136) = *(void *)(v50 + 32);
    uint64_t v51 = sub_B7FE4(a1, 0);
    *(void *)(a2 + 8) = v51;
    if (!v51) {
      goto LABEL_146;
    }
    int v52 = *(_DWORD *)(a1 + 104);
    if (v52 == 41)
    {
      uint64_t v45 = 1;
      goto LABEL_51;
    }
    if (v52 == 44)
    {
      uint64_t v53 = *(void *)(a1 + 24);
      uint64_t v54 = a1 + 40;
      if (*(void *)(a1 + 8) != v53)
      {
        *(void *)(a1 + 24) = v53 + 40;
        uint64_t v54 = v53;
      }
      *(_DWORD *)(a1 + 104) = *(_DWORD *)v54;
      std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v54 + 8));
      *(void *)(a1 + 136) = *(void *)(v54 + 32);
      uint64_t v55 = sub_B7FE4(a1, 0);
      *(void *)(a2 + 16) = v55;
      if (!v55) {
        goto LABEL_146;
      }
      int v56 = *(_DWORD *)(a1 + 104);
      if (v56 == 41)
      {
        uint64_t v45 = 2;
        goto LABEL_51;
      }
      if (v56 == 44)
      {
        uint64_t v57 = *(void *)(a1 + 24);
        uint64_t v58 = a1 + 40;
        if (*(void *)(a1 + 8) != v57)
        {
          *(void *)(a1 + 24) = v57 + 40;
          uint64_t v58 = v57;
        }
        *(_DWORD *)(a1 + 104) = *(_DWORD *)v58;
        std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v58 + 8));
        *(void *)(a1 + 136) = *(void *)(v58 + 32);
        uint64_t v59 = sub_B7FE4(a1, 0);
        *(void *)(a2 + 24) = v59;
        if (!v59) {
          goto LABEL_146;
        }
        int v60 = *(_DWORD *)(a1 + 104);
        if (v60 == 41)
        {
          uint64_t v45 = 3;
          goto LABEL_51;
        }
        if (v60 == 44)
        {
          uint64_t v61 = *(void *)(a1 + 24);
          if (*(void *)(a1 + 8) != v61)
          {
            *(void *)(a1 + 24) = v61 + 40;
            uint64_t v43 = v61;
          }
          *(_DWORD *)(a1 + 104) = *(_DWORD *)v43;
          std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v43 + 8));
          *(void *)(a1 + 136) = *(void *)(v43 + 32);
          if (!v105[0])
          {
            uint64_t v47 = 5;
            goto LABEL_147;
          }
          std::operator+<char>();
          uint64_t v62 = std::string::append(&v93, "'");
          long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
          __str.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v63;
          v62->__r_.__value_.__l.__size_ = 0;
          v62->__r_.__value_.__r.__words[2] = 0;
          v62->__r_.__value_.__r.__words[0] = 0;
          memset(&v91, 0, sizeof(v91));
          std::string::push_back(&v91, 55);
          std::string::push_back(&v91, 48);
          std::string::push_back(&v91, 51);
          std::string::push_back(&v91, 49);
          std::string::push_back(&v91, 50);
          std::string::size_type v64 = HIBYTE(v91.__r_.__value_.__r.__words[2]);
          if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v65 = &v91;
          }
          else {
            unint64_t v65 = (std::string *)v91.__r_.__value_.__r.__words[0];
          }
          if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v64 = v91.__r_.__value_.__l.__size_;
          }
          if (v64)
          {
            long long v66 = (std::string *)((char *)v65 + v64 - 1);
            if (v66 > v65)
            {
              unint64_t v67 = &v65->__r_.__value_.__s.__data_[1];
              do
              {
                std::string::value_type v68 = *(v67 - 1);
                *(v67 - 1) = v66->__r_.__value_.__s.__data_[0];
                v66->__r_.__value_.__s.__data_[0] = v68;
                long long v66 = (std::string *)((char *)v66 - 1);
                BOOL v20 = v67++ >= (char *)v66;
              }
              while (!v20);
            }
          }
          uint64_t v69 = std::string::insert(&v91, 0, "exprtk.hpp:");
          long long v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
          v92.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v70;
          v69->__r_.__value_.__l.__size_ = 0;
          v69->__r_.__value_.__r.__words[2] = 0;
          v69->__r_.__value_.__r.__words[0] = 0;
          *((unsigned char *)&v96.__r_.__value_.__s + 23) = 0;
          v96.__r_.__value_.__s.__data_[0] = 0;
          uint64_t v97 = -1;
          long long v99 = 0u;
          long long v100 = 0u;
          long long v101 = 0u;
          long long __p = 0u;
          long long v103 = 0u;
          uint64_t v104 = 0;
          int v98 = 1;
          int v95 = *(_DWORD *)(a1 + 104);
          std::string::operator=(&v96, (const std::string *)(a1 + 112));
          uint64_t v97 = *(void *)(a1 + 136);
          std::string::operator=((std::string *)&v99, &__str);
          std::string::operator=((std::string *)((char *)&v100 + 8), &v92);
          uint64_t v71 = *(void *)(a1 + 568);
          uint64_t v72 = *(void *)(a1 + 560);
          uint64_t v73 = 30 * ((v71 - v72) >> 3) - 1;
          if (v71 == v72) {
            uint64_t v73 = 0;
          }
          if (v73 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
          {
            sub_B4B88(a1 + 552);
            uint64_t v72 = *(void *)(a1 + 560);
            uint64_t v71 = *(void *)(a1 + 568);
          }
          if (v71 == v72)
          {
            uint64_t v41 = 0;
          }
          else
          {
            unint64_t v74 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
            uint64_t v41 = *(void *)(v72 + 8 * (v74 / 0x1E)) + 136 * (v74 % 0x1E);
          }
LABEL_128:
          sub_B5158(v41, (uint64_t)&v95);
          ++*(void *)(a1 + 592);
          if (SBYTE7(v103) < 0)
          {
            operator delete((void *)__p);
            if ((SHIBYTE(v101) & 0x80000000) == 0)
            {
LABEL_130:
              if ((SBYTE7(v100) & 0x80000000) == 0) {
                goto LABEL_131;
              }
              goto LABEL_139;
            }
          }
          else if ((SHIBYTE(v101) & 0x80000000) == 0)
          {
            goto LABEL_130;
          }
          operator delete(*((void **)&v100 + 1));
          if ((SBYTE7(v100) & 0x80000000) == 0)
          {
LABEL_131:
            if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_132;
            }
            goto LABEL_140;
          }
LABEL_139:
          operator delete((void *)v99);
          if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_132:
            if ((SHIBYTE(v92.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_133;
            }
            goto LABEL_141;
          }
LABEL_140:
          operator delete(v96.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v92.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_133:
            if ((SHIBYTE(v91.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_134;
            }
            goto LABEL_142;
          }
LABEL_141:
          operator delete(v92.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v91.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_134:
            if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_135;
            }
            goto LABEL_143;
          }
LABEL_142:
          operator delete(v91.__r_.__value_.__l.__data_);
          if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_135:
            if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_144;
            }
            goto LABEL_146;
          }
LABEL_143:
          operator delete(__str.__r_.__value_.__l.__data_);
          if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
          {
LABEL_144:
            unsigned int v48 = (void *)v93.__r_.__value_.__r.__words[0];
            goto LABEL_145;
          }
LABEL_146:
          uint64_t v47 = 0;
          goto LABEL_147;
        }
      }
    }
LABEL_111:
    std::operator+<char>();
    uint64_t v75 = std::string::append(&v93, "'");
    long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v76;
    v75->__r_.__value_.__l.__size_ = 0;
    v75->__r_.__value_.__r.__words[2] = 0;
    v75->__r_.__value_.__r.__words[0] = 0;
    memset(&v91, 0, sizeof(v91));
    std::string::push_back(&v91, 53);
    std::string::push_back(&v91, 57);
    std::string::push_back(&v91, 50);
    std::string::push_back(&v91, 49);
    std::string::push_back(&v91, 50);
    std::string::size_type v77 = HIBYTE(v91.__r_.__value_.__r.__words[2]);
    if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v78 = &v91;
    }
    else {
      uint64_t v78 = (std::string *)v91.__r_.__value_.__r.__words[0];
    }
    if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v77 = v91.__r_.__value_.__l.__size_;
    }
    if (v77)
    {
      unint64_t v79 = (std::string *)((char *)v78 + v77 - 1);
      if (v79 > v78)
      {
        uint64_t v80 = &v78->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v81 = *(v80 - 1);
          *(v80 - 1) = v79->__r_.__value_.__s.__data_[0];
          v79->__r_.__value_.__s.__data_[0] = v81;
          unint64_t v79 = (std::string *)((char *)v79 - 1);
          BOOL v20 = v80++ >= (char *)v79;
        }
        while (!v20);
      }
    }
    uint64_t v82 = std::string::insert(&v91, 0, "exprtk.hpp:");
    long long v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
    v92.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v83;
    v82->__r_.__value_.__l.__size_ = 0;
    v82->__r_.__value_.__r.__words[2] = 0;
    v82->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v96.__r_.__value_.__s + 23) = 0;
    v96.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v97 = -1;
    long long v99 = 0u;
    long long v100 = 0u;
    long long v101 = 0u;
    long long __p = 0u;
    long long v103 = 0u;
    uint64_t v104 = 0;
    int v98 = 1;
    int v95 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v96, (const std::string *)(a1 + 112));
    uint64_t v97 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v99, &__str);
    std::string::operator=((std::string *)((char *)&v100 + 8), &v92);
    uint64_t v84 = *(void *)(a1 + 568);
    uint64_t v85 = *(void *)(a1 + 560);
    uint64_t v86 = 30 * ((v84 - v85) >> 3) - 1;
    if (v84 == v85) {
      uint64_t v86 = 0;
    }
    if (v86 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v85 = *(void *)(a1 + 560);
      uint64_t v84 = *(void *)(a1 + 568);
    }
    if (v84 == v85)
    {
      uint64_t v41 = 0;
    }
    else
    {
      unint64_t v87 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v41 = *(void *)(v85 + 8 * (v87 / 0x1E)) + 136 * (v87 % 0x1E);
    }
    goto LABEL_128;
  }
  if (v44 != 41) {
    goto LABEL_111;
  }
  uint64_t v45 = 0;
LABEL_51:
  uint64_t v46 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) != v46)
  {
    *(void *)(a1 + 24) = v46 + 40;
    uint64_t v43 = v46;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v43;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v43 + 8));
  *(void *)(a1 + 136) = *(void *)(v43 + 32);
  v105[0] = 0;
  uint64_t v47 = v45 + 1;
LABEL_147:
  sub_DD4B4((uint64_t)v105);
  return v47;
}

void sub_DC4E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,char a49)
{
  if (a27 < 0)
  {
    operator delete(__p);
    if ((a47 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a40 & 0x80000000) == 0)
      {
LABEL_8:
        sub_DD4B4(v49 - 88);
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(a35);
      sub_DD4B4(v49 - 88);
      _Unwind_Resume(a1);
    }
  }
  else if ((a47 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a42);
  if ((a40 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void sub_DC6E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    JUMPOUT(0xDC6F0);
  }
  JUMPOUT(0xDC698);
}

uint64_t sub_DC734(uint64_t a1, int *a2, uint64_t *a3)
{
  uint64_t result = *a3;
  if (!*a3) {
    return result;
  }
  int v7 = (*(uint64_t (**)(uint64_t))(*(void *)result + 32))(result);
  uint64_t result = *a3;
  if (v7 == 1) {
    return result;
  }
  if (result)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)result + 32))(result) == 142) {
      return 0;
    }
    if (*a3)
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)*a3 + 32))(*a3) == 143) {
        return 0;
      }
      if (*a3 && (*(unsigned int (**)(uint64_t))(*(void *)*a3 + 32))(*a3) == 2)
      {
        return sub_DD754(a1, a2, a3);
      }
    }
  }
  int v8 = *a2;
  BOOL v9 = (*a2 - 34) > 0x2E || ((1 << (*a2 - 34)) & 0x7EF8FF9DFFFFLL) == 0;
  if (!v9 && *a3)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)*a3 + 32))(*a3) == 17)
    {
      return sub_DDAC0(a1, a2, (uint64_t)a3);
    }
    int v8 = *a2;
  }
  unsigned int v10 = v8 - 34;
  if (v10 <= 0x2E
    && ((1 << v10) & 0x7EF8FF9DFFFFLL) != 0
    && *a3
    && ((int v11 = (*(uint64_t (**)(uint64_t))(*(void *)*a3 + 32))(*a3), (v11 - 124) <= 0x11)
      ? (BOOL v12 = ((1 << (v11 - 124)) & 0x3C5E1) == 0)
      : (BOOL v12 = 1),
        !v12))
  {
    return sub_DE41C(a1, a2);
  }
  else
  {
    return sub_DECD8(a1, a2);
  }
}

const void *sub_DC9C8(uint64_t a1, int *a2, uint64_t *a3)
{
  if (*a3) {
    BOOL v4 = a3[1] == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return 0;
  }
  char v8 = sub_115C38(*a3);
  int v9 = sub_115C38(a3[1]);
  if ((v8 & 1) != 0 || v9)
  {
    uint64_t v10 = *(void *)(a1 + 80);
    int v11 = (char *)operator new(0x20uLL);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_20B91C0;
    strcpy(v11, "Invalid string operation");
    if (*(char *)(v10 + 871) < 0)
    {
      if (!*(void *)(v10 + 856))
      {
LABEL_19:
        std::string::operator=((std::string *)(v10 + 848), &__str);
        if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return 0;
        }
        int v11 = (char *)__str.__r_.__value_.__r.__words[0];
      }
    }
    else if (!*(unsigned char *)(v10 + 871))
    {
      goto LABEL_19;
    }
    operator delete(v11);
    return 0;
  }
  if (sub_10A64C(a1, a2, a3)) {
    return 0;
  }
  if (*a3 && (*(unsigned int (**)(uint64_t))(*(void *)*a3 + 32))(*a3) == 142) {
    return 0;
  }
  uint64_t v12 = a3[1];
  if (v12 && (*(unsigned int (**)(uint64_t))(*(void *)v12 + 32))(v12) == 142) {
    return 0;
  }
  if (*a3 && (*(unsigned int (**)(uint64_t))(*(void *)*a3 + 32))(*a3) == 143) {
    return 0;
  }
  uint64_t v13 = a3[1];
  if (v13 && (*(unsigned int (**)(uint64_t))(*(void *)v13 + 32))(v13) == 143) {
    return 0;
  }
  int v14 = *a2;
  if (*a2 != 92)
  {
    if (v14 == 81)
    {
      return (const void *)sub_10A810(a1, a2, a3);
    }
    if ((v14 - 82) <= 4 && sub_11C0EC(*(void *)(a1 + 80) + 184, a2))
    {
      return (const void *)sub_10B090(a1, a2, a3);
    }
    if (sub_10BAAC(a1, a2, a3))
    {
      return (const void *)sub_10BB9C(a1, a2, a3);
    }
    if (sub_10C5C0(a1, a2, a3))
    {
      return (const void *)sub_10C6AC(a1, a2, a3);
    }
    sub_115C38(*a3);
    sub_115C38(a3[1]);
    if (sub_10CBDC(a1, a3))
    {
      return (const void *)sub_10CC64(a1, a2, a3);
    }
    if (sub_10D55C(a1, a2, a3))
    {
      return (const void *)sub_10D6DC(a1, a3);
    }
    __str.__r_.__value_.__r.__words[0] = 0;
    if (sub_10D940(a1, a2, (uint64_t **)a3, &__str)) {
      return (const void *)__str.__r_.__value_.__r.__words[0];
    }
    __str.__r_.__value_.__r.__words[0] = 0;
    if (sub_10DB08(a1, a2, a3))
    {
      uint64_t result = sub_10DC60(a1, a2, a3);
    }
    else
    {
      unsigned int v15 = sub_10EA8C(a1, a2, a3);
      uint64_t result = (const void *)__str.__r_.__value_.__r.__words[0];
      if (!v15 || __str.__r_.__value_.__r.__words[0])
      {
LABEL_69:
        if (!result)
        {
          if (sub_10F884(a1, a2, (uint64_t)a3))
          {
            return (const void *)sub_10F974(a1, a2, (void **)a3);
          }
          else if (sub_10FE48(a1, a2, a3))
          {
            return (const void *)sub_10FF14(a1, a2, (void **)a3);
          }
          else if (sub_110F5C(a1, a2, a3))
          {
            return (const void *)sub_111028(a1, a2, (void **)a3);
          }
          else if (sub_112134(a1, a2, a3))
          {
            return (const void *)sub_112200(a1, a2, (void **)a3);
          }
          else if (sub_1129F4(a1, a2, a3))
          {
            return (const void *)sub_112AC0(a1, a2, (void **)a3);
          }
          else if (sub_1132B8(a1, a2, a3))
          {
            return (const void *)sub_113374(a1, a2, a3);
          }
          else if (sub_113978(a1, a2, a3))
          {
            return (const void *)sub_113A44(a1, a2, a3);
          }
          else
          {
            return (const void *)sub_1156D8(a1, a2, a3);
          }
        }
        return result;
      }
      uint64_t result = sub_10EBE4(a1, a2, a3);
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)result;
    goto LABEL_69;
  }

  return (const void *)sub_10ABAC(a1, (const void **)a3);
}

void sub_DD044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_DD060(uint64_t a1, _DWORD *a2, uint64_t *a3)
{
  if (*a3) {
    BOOL v5 = a3[1] == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5 || a3[2] == 0) {
    goto LABEL_9;
  }
  char v9 = sub_1BDBB8(a1, a2, a3);
  if (v9) {
    return 0;
  }
  int v10 = sub_115C38(*a3);
  int v11 = sub_115C38(a3[1]);
  int v12 = sub_115C38(a3[2]);
  if (v10)
  {
    if (v11 && v12 && *a2 == 68)
    {
LABEL_9:
      sub_1BD9D0(*(void *)(a1 + 8), a3);
      return 0;
    }
  }

  return sub_1BDCF0(a1, a2, a3);
}

uint64_t *sub_DD150(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  uint64_t v3 = *(uint64_t **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  while (1)
  {
    while (1)
    {
      unint64_t v6 = *(unsigned __int8 *)(a2 + 23);
      unint64_t v7 = *(void *)(a2 + 8);
      unint64_t v8 = (v6 & 0x80u) == 0 ? *(unsigned __int8 *)(a2 + 23) : *(void *)(a2 + 8);
      unint64_t v9 = *((unsigned __int8 *)v3 + 55);
      uint64_t v10 = v3[5];
      unint64_t v11 = (v9 & 0x80u) == 0 ? *((unsigned __int8 *)v3 + 55) : v3[5];
      unint64_t v12 = v11 >= v8 ? v8 : v11;
      if (v12) {
        break;
      }
LABEL_25:
      if ((v6 & 0x80u) == 0) {
        unint64_t v18 = v6;
      }
      else {
        unint64_t v18 = v7;
      }
      if ((v9 & 0x80u) == 0) {
        unint64_t v19 = v9;
      }
      else {
        unint64_t v19 = v10;
      }
      if (v18 >= v19) {
        goto LABEL_34;
      }
LABEL_3:
      uint64_t v2 = v3;
      uint64_t v3 = (uint64_t *)*v3;
      if (!v3) {
        return v2;
      }
    }
    uint64_t v13 = 0;
    while (1)
    {
      uint64_t v14 = *(char *)(a2 + 23) >= 0 ? a2 : *(void *)a2;
      char v15 = __tolower(*(char *)(v14 + v13));
      uint64_t v16 = *((char *)v3 + 55) >= 0 ? (uint64_t)(v3 + 4) : v3[4];
      char v17 = __tolower(*(char *)(v16 + v13));
      if (v15 > v17) {
        break;
      }
      if (v15 < v17) {
        goto LABEL_3;
      }
      if (v12 == ++v13)
      {
        unint64_t v6 = *(unsigned __int8 *)(a2 + 23);
        unint64_t v7 = *(void *)(a2 + 8);
        unint64_t v9 = *((unsigned __int8 *)v3 + 55);
        uint64_t v10 = v3[5];
        goto LABEL_25;
      }
    }
    unint64_t v9 = *((unsigned __int8 *)v3 + 55);
    uint64_t v10 = v3[5];
    unint64_t v6 = *(unsigned __int8 *)(a2 + 23);
    unint64_t v7 = *(void *)(a2 + 8);
LABEL_34:
    unint64_t v20 = (v9 & 0x80u) == 0 ? v9 : v10;
    unint64_t v21 = (v6 & 0x80u) == 0 ? v6 : v7;
    uint64_t v22 = v21 >= v20 ? v20 : v21;
    if (v22) {
      break;
    }
LABEL_55:
    if ((v9 & 0x80u) != 0) {
      unint64_t v9 = v10;
    }
    if ((v6 & 0x80u) != 0) {
      unint64_t v6 = v7;
    }
    if (v9 >= v6) {
      goto LABEL_62;
    }
LABEL_60:
    uint64_t v3 = (uint64_t *)v3[1];
    if (!v3) {
      return v2;
    }
  }
  uint64_t v23 = 0;
  while (1)
  {
    uint64_t v24 = *((char *)v3 + 55) >= 0 ? (uint64_t)(v3 + 4) : v3[4];
    char v25 = __tolower(*(char *)(v24 + v23));
    uint64_t v26 = *(char *)(a2 + 23) >= 0 ? a2 : *(void *)a2;
    char v27 = __tolower(*(char *)(v26 + v23));
    if (v25 > v27) {
      break;
    }
    if (v25 < v27) {
      goto LABEL_60;
    }
    if (v22 == ++v23)
    {
      unint64_t v9 = *((unsigned __int8 *)v3 + 55);
      uint64_t v10 = v3[5];
      unint64_t v6 = *(unsigned __int8 *)(a2 + 23);
      unint64_t v7 = *(void *)(a2 + 8);
      goto LABEL_55;
    }
  }
LABEL_62:
  BOOL v28 = sub_ADF64(a1, (uint64_t *)a2, (uint64_t *)*v3, v3);
  sub_DD374(a1, (uint64_t *)a2, (uint64_t *)v3[1], v2);
  return v28;
}

uint64_t *sub_DD374(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  if (a3)
  {
    BOOL v5 = a3;
    do
    {
      unint64_t v7 = *((unsigned __int8 *)a2 + 23);
      char v9 = v7;
      unint64_t v10 = a2[1];
      if ((v7 & 0x80u) == 0) {
        unint64_t v11 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        unint64_t v11 = a2[1];
      }
      unint64_t v12 = *((unsigned __int8 *)v5 + 55);
      char v13 = v12;
      unint64_t v14 = v5[5];
      if ((v12 & 0x80u) == 0) {
        unint64_t v15 = *((unsigned __int8 *)v5 + 55);
      }
      else {
        unint64_t v15 = v5[5];
      }
      if (v15 >= v11) {
        unint64_t v16 = v11;
      }
      else {
        unint64_t v16 = v15;
      }
      if (v16)
      {
        uint64_t v17 = 0;
        while (1)
        {
          if (*((char *)a2 + 23) >= 0) {
            unint64_t v18 = a2;
          }
          else {
            unint64_t v18 = (uint64_t *)*a2;
          }
          char v19 = __tolower(*((char *)v18 + v17));
          if (*((char *)v5 + 55) >= 0) {
            unint64_t v20 = v5 + 4;
          }
          else {
            unint64_t v20 = (uint64_t *)v5[4];
          }
          char v21 = __tolower(*((char *)v20 + v17));
          if (v19 > v21)
          {
            ++v5;
            goto LABEL_11;
          }
          if (v19 < v21) {
            break;
          }
          if (v16 == ++v17)
          {
            unint64_t v7 = *((unsigned __int8 *)a2 + 23);
            unint64_t v10 = a2[1];
            unint64_t v12 = *((unsigned __int8 *)v5 + 55);
            unint64_t v14 = v5[5];
            char v13 = *((unsigned char *)v5 + 55);
            char v9 = *((unsigned char *)a2 + 23);
            goto LABEL_3;
          }
        }
        a4 = v5;
      }
      else
      {
LABEL_3:
        if (v9 < 0) {
          unint64_t v7 = v10;
        }
        if (v13 >= 0) {
          unint64_t v8 = v12;
        }
        else {
          unint64_t v8 = v14;
        }
        if (v7 >= v8) {
          ++v5;
        }
        else {
          a4 = v5;
        }
      }
LABEL_11:
      BOOL v5 = (uint64_t *)*v5;
    }
    while (v5);
  }
  return a4;
}

uint64_t sub_DD4B4(uint64_t a1)
{
  if (!*(unsigned char *)a1) {
    return a1;
  }
  uint64_t v2 = *(void **)(a1 + 16);
  if (*v2 && (*(unsigned int (**)(void))(*(void *)*v2 + 32))(*v2) != 17)
  {
    if (!*v2)
    {
LABEL_8:
      *uint64_t v2 = 0;
      goto LABEL_9;
    }
    if ((*(unsigned int (**)(void))(*(void *)*v2 + 32))(*v2) != 18)
    {
      if (*v2) {
        (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
      }
      goto LABEL_8;
    }
  }
LABEL_9:
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(v3 + 8);
  if (v4 && (*(unsigned int (**)(uint64_t))(*(void *)v4 + 32))(v4) != 17)
  {
    uint64_t v5 = *(void *)(v3 + 8);
    if (!v5)
    {
LABEL_15:
      *(void *)(v3 + 8) = 0;
      goto LABEL_16;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5) != 18)
    {
      uint64_t v6 = *(void *)(v3 + 8);
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
      goto LABEL_15;
    }
  }
LABEL_16:
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(v7 + 16);
  if (v8 && (*(unsigned int (**)(uint64_t))(*(void *)v8 + 32))(v8) != 17)
  {
    uint64_t v9 = *(void *)(v7 + 16);
    if (!v9)
    {
LABEL_22:
      *(void *)(v7 + 16) = 0;
      goto LABEL_23;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v9 + 32))(v9) != 18)
    {
      uint64_t v10 = *(void *)(v7 + 16);
      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
      }
      goto LABEL_22;
    }
  }
LABEL_23:
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(v11 + 24);
  if (v12 && (*(unsigned int (**)(uint64_t))(*(void *)v12 + 32))(v12) != 17)
  {
    uint64_t v13 = *(void *)(v11 + 24);
    if (!v13)
    {
LABEL_29:
      *(void *)(v11 + 24) = 0;
      return a1;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v13 + 32))(v13) != 18)
    {
      uint64_t v14 = *(void *)(v11 + 24);
      if (v14) {
        (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
      }
      goto LABEL_29;
    }
  }
  return a1;
}

uint64_t sub_DD754(uint64_t a1, _DWORD *a2, void *a3)
{
  uint64_t v4 = *a3;
  if ((*a2 - 87) > 2)
  {
    if (*a2) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6) {
      operator new();
    }
    return 0;
  }
  if (!v4 || (*(unsigned int (**)(uint64_t))(*(void *)v4 + 32))(v4) == 17) {
    return 0;
  }
  if (*a3)
  {
    if ((*(unsigned int (**)(void))(*(void *)*a3 + 32))(*a3) == 18) {
      return 0;
    }
    if (*a3) {
      (*(void (**)(void))(*(void *)*a3 + 8))(*a3);
    }
  }
  *a3 = 0;
  return 0;
}

void sub_DDA9C()
{
}

uint64_t sub_DDAC0(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  (*(void (**)(void))(**(void **)a3 + 40))();
  uint64_t result = 0;
  switch(*a2)
  {
    case '""':
      operator new();
    case '#':
      operator new();
    case '$':
      operator new();
    case '%':
      operator new();
    case '&':
      operator new();
    case '\'':
      operator new();
    case '(':
      operator new();
    case ')':
      operator new();
    case '*':
      operator new();
    case '+':
      operator new();
    case ',':
      operator new();
    case '-':
      operator new();
    case '.':
      operator new();
    case '/':
      operator new();
    case '0':
      operator new();
    case '1':
      operator new();
    case '2':
      operator new();
    case '4':
      operator new();
    case '5':
      operator new();
    case '6':
      operator new();
    case '9':
      operator new();
    case ':':
      operator new();
    case ';':
      operator new();
    case '<':
      operator new();
    case '=':
      operator new();
    case '>':
      operator new();
    case '?':
      operator new();
    case '@':
      operator new();
    case 'A':
      operator new();
    case 'E':
      operator new();
    case 'F':
      operator new();
    case 'G':
      operator new();
    case 'H':
      operator new();
    case 'I':
      operator new();
    case 'K':
      operator new();
    case 'L':
      operator new();
    case 'M':
      operator new();
    case 'N':
      operator new();
    case 'O':
      operator new();
    case 'P':
      operator new();
    default:
      return result;
  }
}

uint64_t sub_DE41C(uint64_t a1, _DWORD *a2)
{
  switch(*a2)
  {
    case '""':
      operator new();
    case '#':
      operator new();
    case '$':
      operator new();
    case '%':
      operator new();
    case '&':
      operator new();
    case '\'':
      operator new();
    case '(':
      operator new();
    case ')':
      operator new();
    case '*':
      operator new();
    case '+':
      operator new();
    case ',':
      operator new();
    case '-':
      operator new();
    case '.':
      operator new();
    case '/':
      operator new();
    case '0':
      operator new();
    case '1':
      operator new();
    case '2':
      operator new();
    case '4':
      operator new();
    case '5':
      operator new();
    case '6':
      operator new();
    case '9':
      operator new();
    case ':':
      operator new();
    case ';':
      operator new();
    case '<':
      operator new();
    case '=':
      operator new();
    case '>':
      operator new();
    case '?':
      operator new();
    case '@':
      operator new();
    case 'A':
      operator new();
    case 'E':
      operator new();
    case 'F':
      operator new();
    case 'G':
      operator new();
    case 'H':
      operator new();
    case 'I':
      operator new();
    case 'K':
      operator new();
    case 'L':
      operator new();
    case 'M':
      operator new();
    case 'N':
      operator new();
    case 'O':
      operator new();
    case 'P':
      operator new();
    default:
      return 0;
  }
}

void sub_DEB5C()
{
}

uint64_t sub_DECD8(uint64_t a1, _DWORD *a2)
{
  switch(*a2)
  {
    case '""':
      operator new();
    case '#':
      operator new();
    case '$':
      operator new();
    case '%':
      operator new();
    case '&':
      operator new();
    case '\'':
      operator new();
    case '(':
      operator new();
    case ')':
      operator new();
    case '*':
      operator new();
    case '+':
      operator new();
    case ',':
      operator new();
    case '-':
      operator new();
    case '.':
      operator new();
    case '/':
      operator new();
    case '0':
      operator new();
    case '1':
      operator new();
    case '2':
      operator new();
    case '4':
      operator new();
    case '5':
      operator new();
    case '6':
      operator new();
    case '9':
      operator new();
    case ':':
      operator new();
    case ';':
      operator new();
    case '<':
      operator new();
    case '=':
      operator new();
    case '>':
      operator new();
    case '?':
      operator new();
    case '@':
      operator new();
    case 'A':
      operator new();
    case 'E':
      operator new();
    case 'F':
      operator new();
    case 'G':
      operator new();
    case 'H':
      operator new();
    case 'I':
      operator new();
    case 'K':
      operator new();
    case 'L':
      operator new();
    case 'M':
      operator new();
    case 'N':
      operator new();
    case 'O':
      operator new();
    case 'P':
      operator new();
    default:
      return 0;
  }
}

void sub_E05A8()
{
}

uint64_t sub_E0724(uint64_t a1)
{
  *(void *)a1 = off_23FFC00;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_E079C(uint64_t a1)
{
  *(void *)a1 = off_23FFC00;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_E0834(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  int v3 = *(_DWORD *)(a1 + 8);

  return sub_E0918(v3, v2);
}

uint64_t sub_E0890(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_E0898()
{
  return 3;
}

uint64_t sub_E08A0(uint64_t a1)
{
  *(void *)a1 = off_23FFC00;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

double sub_E0918(int a1, double result)
{
  long double v2 = result;
  switch(a1)
  {
    case '""':
      uint64_t result = -result;
      if (v2 >= 0.0) {
        return v2;
      }
      return result;
    case '#':
      return acos(result);
    case '$':
      double v3 = result * result;
      double v4 = -1.0;
      goto LABEL_13;
    case '%':
      return asin(result);
    case '&':
      double v3 = result * result;
      double v4 = 1.0;
LABEL_13:
      uint64_t result = sqrt(v3 + v4) + v2;
      goto LABEL_15;
    case '\'':
      return atan(result);
    case '(':
      double v5 = log(result + 1.0);
      return (v5 - log(1.0 - v2)) * 0.5;
    case ')':
      return ceil(result);
    case '*':
      return cos(result);
    case '+':
      return cosh(result);
    case ',':
      return exp(result);
    case '-':
      double v6 = -result;
      if (v2 >= 0.0) {
        double v6 = v2;
      }
      if (v6 >= 0.00001) {
        return exp(v2) + -1.0;
      }
      else {
        return v2 * 0.5 * v2 + v2;
      }
    case '.':
      return floor(result);
    case '/':
      goto LABEL_15;
    case '0':
      return log10(result);
    case '1':
      return log(result) / 0.693147181;
    case '2':
      if (result <= -1.0) {
        goto LABEL_82;
      }
      double v10 = -result;
      if (v2 >= 0.0) {
        double v10 = v2;
      }
      if (v10 <= 0.0001)
      {
        uint64_t result = (v2 * -0.5 + 1.0) * v2;
      }
      else
      {
        uint64_t result = v2 + 1.0;
LABEL_15:
        uint64_t result = log(result);
      }
      break;
    case '4':
      return -result;
    case '5':
      return result;
    case '6':
      uint64_t result = ceil(result + -0.5);
      double v7 = floor(v2 + 0.5);
      if (v2 >= 0.0) {
        return v7;
      }
      return result;
    case '9':
      return sqrt(result);
    case ':':
      return sin(result);
    case ';':
      double v8 = fabs(result);
      uint64_t result = 1.0;
      if (v8 >= 2.22044605e-16) {
        return sin(v2) / v2;
      }
      return result;
    case '<':
      return sinh(result);
    case '=':
      return 1.0 / cos(result);
    case '>':
      return 1.0 / sin(result);
    case '?':
      return tan(result);
    case '@':
      return tanh(result);
    case 'A':
      return 1.0 / tan(result);
    case 'E':
      uint64_t result = 0.0;
      if (v2 < 0.0) {
        uint64_t result = -1.0;
      }
      if (v2 > 0.0) {
        return 1.0;
      }
      return result;
    case 'F':
      return result * 57.2957795;
    case 'G':
      return result * 0.0174532925;
    case 'H':
      return result * 2.22222222;
    case 'I':
      return result * 0.45;
    case 'K':
      uint64_t result = 1.0;
      if (v2 != 0.0) {
        return 0.0;
      }
      return result;
    case 'L':
      return erf(result);
    case 'M':
      return erfc(result);
    case 'N':
      double v9 = -result;
      if (v2 >= 0.0) {
        double v9 = v2;
      }
      uint64_t result = (erf(v9 / 1.41421356) + 1.0) * 0.5;
      if (v2 < 0.0) {
        return 1.0 - result;
      }
      return result;
    case 'O':
      return result - (double)(uint64_t)result;
    case 'P':
      return (double)(uint64_t)result;
    default:
LABEL_82:
      uint64_t result = NAN;
      break;
  }
  return result;
}

void sub_E0FF8()
{
}

double sub_E100C(uint64_t a1)
{
  uint64_t v1 = *(double **)(a1 + 8);
  double result = *v1;
  if (*v1 < 0.0) {
    return -*v1;
  }
  return result;
}

uint64_t sub_E1024()
{
  return 58;
}

uint64_t sub_E102C()
{
  return 34;
}

uint64_t sub_E1034(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

double sub_E103C(double *a1)
{
  double result = *a1;
  if (*a1 < 0.0) {
    return -*a1;
  }
  return result;
}

void sub_E1054()
{
}

double sub_E1068(uint64_t a1)
{
  return acos(**(long double **)(a1 + 8));
}

uint64_t sub_E1074()
{
  return 59;
}

uint64_t sub_E107C()
{
  return 35;
}

uint64_t sub_E1084(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

double sub_E108C(long double *a1)
{
  return acos(*a1);
}

void sub_E1098()
{
}

double sub_E10AC(uint64_t a1)
{
  return log(**(double **)(a1 + 8) + sqrt(**(double **)(a1 + 8) * **(double **)(a1 + 8) + -1.0));
}

uint64_t sub_E10CC()
{
  return 60;
}

uint64_t sub_E10D4()
{
  return 36;
}

uint64_t sub_E10DC(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

double sub_E10E4(double *a1)
{
  return log(*a1 + sqrt(*a1 * *a1 + -1.0));
}

void sub_E1104()
{
}

double sub_E1118(uint64_t a1)
{
  return asin(**(long double **)(a1 + 8));
}

uint64_t sub_E1124()
{
  return 61;
}

uint64_t sub_E112C()
{
  return 37;
}

uint64_t sub_E1134(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

double sub_E113C(long double *a1)
{
  return asin(*a1);
}

void sub_E1148()
{
}

double sub_E115C(uint64_t a1)
{
  return log(**(double **)(a1 + 8) + sqrt(**(double **)(a1 + 8) * **(double **)(a1 + 8) + 1.0));
}

uint64_t sub_E117C()
{
  return 62;
}

uint64_t sub_E1184()
{
  return 38;
}

uint64_t sub_E118C(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

double sub_E1194(double *a1)
{
  return log(*a1 + sqrt(*a1 * *a1 + 1.0));
}

void sub_E11B4()
{
}

double sub_E11C8(uint64_t a1)
{
  return atan(**(long double **)(a1 + 8));
}

uint64_t sub_E11D4()
{
  return 63;
}

uint64_t sub_E11DC()
{
  return 39;
}

uint64_t sub_E11E4(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void sub_E11F0()
{
}

long double sub_E1204(uint64_t a1)
{
  double v1 = **(double **)(a1 + 8);
  double v2 = log(v1 + 1.0);
  return (v2 - log(1.0 - v1)) * 0.5;
}

uint64_t sub_E1254()
{
  return 64;
}

uint64_t sub_E125C()
{
  return 40;
}

uint64_t sub_E1264(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

long double sub_E126C(double *a1)
{
  double v1 = *a1;
  double v2 = log(*a1 + 1.0);
  return (v2 - log(1.0 - v1)) * 0.5;
}

void sub_E12BC()
{
}

double sub_E12D0(uint64_t a1)
{
  return ceil(**(double **)(a1 + 8));
}

uint64_t sub_E12E0()
{
  return 65;
}

uint64_t sub_E12E8()
{
  return 41;
}

uint64_t sub_E12F0(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

double sub_E12F8(double *a1)
{
  return ceil(*a1);
}

void sub_E1308()
{
}

double sub_E131C(uint64_t a1)
{
  return cos(**(long double **)(a1 + 8));
}

uint64_t sub_E1328()
{
  return 66;
}

uint64_t sub_E1330()
{
  return 42;
}

uint64_t sub_E1338(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

double sub_E1340(long double *a1)
{
  return cos(*a1);
}

void sub_E134C()
{
}

double sub_E1360(uint64_t a1)
{
  return cosh(**(long double **)(a1 + 8));
}

uint64_t sub_E136C()
{
  return 67;
}

uint64_t sub_E1374()
{
  return 43;
}

uint64_t sub_E137C(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

double sub_E1384(long double *a1)
{
  return cosh(*a1);
}

void sub_E1390()
{
}

double sub_E13A4(uint64_t a1)
{
  return exp(**(long double **)(a1 + 8));
}

uint64_t sub_E13B0()
{
  return 68;
}

uint64_t sub_E13B8()
{
  return 44;
}

uint64_t sub_E13C0(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

double sub_E13C8(long double *a1)
{
  return exp(*a1);
}

void sub_E13D4()
{
}

long double sub_E13E8(uint64_t a1)
{
  long double v1 = **(double **)(a1 + 8);
  double v2 = -v1;
  if (v1 >= 0.0) {
    double v2 = **(double **)(a1 + 8);
  }
  if (v2 >= 0.00001) {
    return exp(v1) + -1.0;
  }
  else {
    return v1 + v1 * (v1 * 0.5);
  }
}

uint64_t sub_E1444()
{
  return 69;
}

uint64_t sub_E144C()
{
  return 45;
}

uint64_t sub_E1454(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

long double sub_E145C(double *a1)
{
  long double v1 = *a1;
  double v2 = -*a1;
  if (*a1 >= 0.0) {
    double v2 = *a1;
  }
  if (v2 >= 0.00001) {
    return exp(v1) + -1.0;
  }
  else {
    return v1 + v1 * (v1 * 0.5);
  }
}

void sub_E14B8()
{
}

double sub_E14CC(uint64_t a1)
{
  return floor(**(double **)(a1 + 8));
}

uint64_t sub_E14DC()
{
  return 70;
}

uint64_t sub_E14E4()
{
  return 46;
}

uint64_t sub_E14EC(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

double sub_E14F4(double *a1)
{
  return floor(*a1);
}

void sub_E1504()
{
}

double sub_E1518(uint64_t a1)
{
  return log(**(long double **)(a1 + 8));
}

uint64_t sub_E1524()
{
  return 71;
}

uint64_t sub_E152C()
{
  return 47;
}

uint64_t sub_E1534(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

double sub_E153C(long double *a1)
{
  return log(*a1);
}

void sub_E1548()
{
}

double sub_E155C(uint64_t a1)
{
  return log10(**(long double **)(a1 + 8));
}

uint64_t sub_E1568()
{
  return 72;
}

uint64_t sub_E1570()
{
  return 48;
}

uint64_t sub_E1578(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

double sub_E1580(long double *a1)
{
  return log10(*a1);
}

void sub_E158C()
{
}

long double sub_E15A0(uint64_t a1)
{
  return log(**(long double **)(a1 + 8)) / 0.693147181;
}

uint64_t sub_E15CC()
{
  return 73;
}

uint64_t sub_E15D4()
{
  return 49;
}

uint64_t sub_E15DC(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

long double sub_E15E4(long double *a1)
{
  return log(*a1) / 0.693147181;
}

void sub_E1610()
{
}

double sub_E1624(uint64_t a1)
{
  double v1 = **(double **)(a1 + 8);
  if (v1 <= -1.0) {
    return NAN;
  }
  double v2 = -v1;
  if (v1 >= 0.0) {
    double v2 = **(double **)(a1 + 8);
  }
  if (v2 <= 0.0001) {
    return v1 * (v1 * -0.5 + 1.0);
  }
  else {
    return log(v1 + 1.0);
  }
}

uint64_t sub_E1684()
{
  return 74;
}

uint64_t sub_E168C()
{
  return 50;
}

uint64_t sub_E1694(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

double sub_E169C(double *a1)
{
  double v1 = *a1;
  if (*a1 <= -1.0) {
    return NAN;
  }
  double v2 = -v1;
  if (v1 >= 0.0) {
    double v2 = *a1;
  }
  if (v2 <= 0.0001) {
    return v1 * (v1 * -0.5 + 1.0);
  }
  else {
    return log(v1 + 1.0);
  }
}

void sub_E16FC()
{
}

double sub_E1710(uint64_t a1)
{
  return -**(double **)(a1 + 8);
}

uint64_t sub_E1720()
{
  return 75;
}

uint64_t sub_E1728()
{
  return 52;
}

uint64_t sub_E1730(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

double sub_E1738(double *a1)
{
  return -*a1;
}

void sub_E1748()
{
}

double sub_E175C(uint64_t a1)
{
  return **(double **)(a1 + 8);
}

uint64_t sub_E1768()
{
  return 76;
}

uint64_t sub_E1770()
{
  return 53;
}

uint64_t sub_E1778(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

double sub_E1780(uint64_t a1)
{
  return *(double *)a1;
}

void sub_E178C()
{
}

double sub_E17A0(uint64_t a1)
{
  double v1 = **(double **)(a1 + 8);
  double v2 = ceil(v1 + -0.5);
  double v3 = floor(v1 + 0.5);
  if (v1 >= 0.0) {
    return v3;
  }
  else {
    return v2;
  }
}

uint64_t sub_E17CC()
{
  return 77;
}

uint64_t sub_E17D4()
{
  return 54;
}

uint64_t sub_E17DC(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

double sub_E17E4(double *a1)
{
  double v1 = ceil(*a1 + -0.5);
  double v2 = floor(*a1 + 0.5);
  if (*a1 >= 0.0) {
    return v2;
  }
  else {
    return v1;
  }
}

void sub_E1810()
{
}

double sub_E1824(uint64_t a1)
{
  return sin(**(long double **)(a1 + 8));
}

uint64_t sub_E1830()
{
  return 78;
}

uint64_t sub_E1838()
{
  return 58;
}

uint64_t sub_E1840(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

double sub_E1848(long double *a1)
{
  return sin(*a1);
}

void sub_E1854()
{
}

void sub_E1868(uint64_t a1)
{
  if (fabs(**(double **)(a1 + 8)) >= 2.22044605e-16) {
    sin(**(long double **)(a1 + 8));
  }
}

uint64_t sub_E18B0()
{
  return 79;
}

uint64_t sub_E18B8()
{
  return 59;
}

uint64_t sub_E18C0(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void sub_E18C8(long double *a1)
{
  if (fabs(*a1) >= 2.22044605e-16) {
    sin(*a1);
  }
}

void sub_E1910()
{
}

double sub_E1924(uint64_t a1)
{
  return sinh(**(long double **)(a1 + 8));
}

uint64_t sub_E1930()
{
  return 80;
}

uint64_t sub_E1938()
{
  return 60;
}

uint64_t sub_E1940(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

double sub_E1948(long double *a1)
{
  return sinh(*a1);
}

void sub_E1954()
{
}

double sub_E1968(uint64_t a1)
{
  return sqrt(**(double **)(a1 + 8));
}

uint64_t sub_E1978()
{
  return 81;
}

uint64_t sub_E1980()
{
  return 57;
}

uint64_t sub_E1988(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

double sub_E1990(double *a1)
{
  return sqrt(*a1);
}

void sub_E19A0()
{
}

double sub_E19B4(uint64_t a1)
{
  return tan(**(long double **)(a1 + 8));
}

uint64_t sub_E19C0()
{
  return 82;
}

uint64_t sub_E19C8()
{
  return 63;
}

uint64_t sub_E19D0(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

double sub_E19D8(long double *a1)
{
  return tan(*a1);
}

void sub_E19E4()
{
}

double sub_E19F8(uint64_t a1)
{
  return tanh(**(long double **)(a1 + 8));
}

uint64_t sub_E1A04()
{
  return 83;
}

uint64_t sub_E1A0C()
{
  return 64;
}

uint64_t sub_E1A14(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

double sub_E1A1C(long double *a1)
{
  return tanh(*a1);
}

void sub_E1A28()
{
}

long double sub_E1A3C(uint64_t a1)
{
  return 1.0 / tan(**(long double **)(a1 + 8));
}

uint64_t sub_E1A64()
{
  return 84;
}

uint64_t sub_E1A6C()
{
  return 65;
}

uint64_t sub_E1A74(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

long double sub_E1A7C(long double *a1)
{
  return 1.0 / tan(*a1);
}

void sub_E1AA4()
{
}

long double sub_E1AB8(uint64_t a1)
{
  return 1.0 / cos(**(long double **)(a1 + 8));
}

uint64_t sub_E1AE0()
{
  return 85;
}

uint64_t sub_E1AE8()
{
  return 61;
}

uint64_t sub_E1AF0(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

long double sub_E1AF8(long double *a1)
{
  return 1.0 / cos(*a1);
}

void sub_E1B20()
{
}

long double sub_E1B34(uint64_t a1)
{
  return 1.0 / sin(**(long double **)(a1 + 8));
}

uint64_t sub_E1B5C()
{
  return 86;
}

uint64_t sub_E1B64()
{
  return 62;
}

uint64_t sub_E1B6C(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

long double sub_E1B74(long double *a1)
{
  return 1.0 / sin(*a1);
}

void sub_E1B9C()
{
}

double sub_E1BB0(uint64_t a1)
{
  return **(double **)(a1 + 8) * 57.2957795;
}

uint64_t sub_E1BC8()
{
  return 87;
}

uint64_t sub_E1BD0()
{
  return 70;
}

uint64_t sub_E1BD8(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

double sub_E1BE0(double *a1)
{
  return *a1 * 57.2957795;
}

void sub_E1BF8()
{
}

double sub_E1C0C(uint64_t a1)
{
  return **(double **)(a1 + 8) * 0.0174532925;
}

uint64_t sub_E1C24()
{
  return 88;
}

uint64_t sub_E1C2C()
{
  return 71;
}

uint64_t sub_E1C34(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

double sub_E1C3C(double *a1)
{
  return *a1 * 0.0174532925;
}

void sub_E1C54()
{
}

double sub_E1C68(uint64_t a1)
{
  return **(double **)(a1 + 8) * 2.22222222;
}

uint64_t sub_E1C80()
{
  return 89;
}

uint64_t sub_E1C88()
{
  return 72;
}

uint64_t sub_E1C90(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

double sub_E1C98(double *a1)
{
  return *a1 * 2.22222222;
}

void sub_E1CB0()
{
}

double sub_E1CC4(uint64_t a1)
{
  return **(double **)(a1 + 8) * 0.45;
}

uint64_t sub_E1CDC()
{
  return 90;
}

uint64_t sub_E1CE4()
{
  return 73;
}

uint64_t sub_E1CEC(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

double sub_E1CF4(double *a1)
{
  return *a1 * 0.45;
}

void sub_E1D0C()
{
}

double sub_E1D20(uint64_t a1)
{
  double result = 1.0;
  if (**(double **)(a1 + 8) != 0.0) {
    return 0.0;
  }
  return result;
}

uint64_t sub_E1D3C()
{
  return 91;
}

uint64_t sub_E1D44()
{
  return 75;
}

uint64_t sub_E1D4C(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

double sub_E1D54(double *a1)
{
  double result = 1.0;
  if (*a1 != 0.0) {
    return 0.0;
  }
  return result;
}

void sub_E1D70()
{
}

double sub_E1D84(uint64_t a1)
{
  double v1 = *(double **)(a1 + 8);
  double result = 0.0;
  if (*v1 < 0.0) {
    double result = -1.0;
  }
  if (*v1 > 0.0) {
    return 1.0;
  }
  return result;
}

uint64_t sub_E1DA8()
{
  return 92;
}

uint64_t sub_E1DB0()
{
  return 69;
}

uint64_t sub_E1DB8(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

double sub_E1DC0(double *a1)
{
  double result = 0.0;
  if (*a1 < 0.0) {
    double result = -1.0;
  }
  if (*a1 > 0.0) {
    return 1.0;
  }
  return result;
}

void sub_E1DE4()
{
}

double sub_E1DF8(uint64_t a1)
{
  return erf(**(long double **)(a1 + 8));
}

uint64_t sub_E1E04()
{
  return 93;
}

uint64_t sub_E1E0C()
{
  return 76;
}

uint64_t sub_E1E14(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

double sub_E1E1C(long double *a1)
{
  return erf(*a1);
}

void sub_E1E28()
{
}

double sub_E1E3C(uint64_t a1)
{
  return erfc(**(long double **)(a1 + 8));
}

uint64_t sub_E1E48()
{
  return 94;
}

uint64_t sub_E1E50()
{
  return 77;
}

uint64_t sub_E1E58(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

double sub_E1E60(long double *a1)
{
  return erfc(*a1);
}

void sub_E1E6C()
{
}

void sub_E1E80(uint64_t a1)
{
  double v1 = **(double **)(a1 + 8);
  double v2 = -v1;
  if (v1 >= 0.0) {
    double v2 = **(double **)(a1 + 8);
  }
  erf(v2 / 1.41421356);
}

uint64_t sub_E1EDC()
{
  return 95;
}

uint64_t sub_E1EE4()
{
  return 78;
}

uint64_t sub_E1EEC(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void sub_E1EF4(double *a1)
{
  double v1 = -*a1;
  if (*a1 >= 0.0) {
    double v1 = *a1;
  }
  erf(v1 / 1.41421356);
}

void sub_E1F50()
{
}

double sub_E1F64(uint64_t a1)
{
  return **(double **)(a1 + 8) - (double)(uint64_t)**(double **)(a1 + 8);
}

uint64_t sub_E1F7C()
{
  return 96;
}

uint64_t sub_E1F84()
{
  return 79;
}

uint64_t sub_E1F8C(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

double sub_E1F94(double *a1)
{
  return *a1 - (double)(uint64_t)*a1;
}

void sub_E1FAC()
{
}

double sub_E1FC0(uint64_t a1)
{
  return (double)(uint64_t)**(double **)(a1 + 8);
}

uint64_t sub_E1FD4()
{
  return 97;
}

uint64_t sub_E1FDC()
{
  return 80;
}

uint64_t sub_E1FE4(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

double sub_E1FEC(double *a1)
{
  return (double)(uint64_t)*a1;
}

void sub_E1FFC(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *(void *)a1 = off_23FFC00;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = a3;
  if (a3) {
    BOOL v5 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
  }
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
  else {
    BOOL v5 = 1;
  }
  *(unsigned char *)(a1 + 24) = v5;
  *(void *)a1 = off_2400B68;
  *(void *)(a1 + 32) = off_2400BC8;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  operator new();
}

void sub_E2634(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_E08A0(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_E26D8(uint64_t *result)
{
  uint64_t v1 = *result;
  if (*result)
  {
    if (*(void *)v1)
    {
      uint64_t v2 = *(void *)v1 - 1;
      *(void *)uint64_t v1 = v2;
      if (!v2)
      {
        if (*(void *)(v1 + 16))
        {
          if (*(unsigned char *)(v1 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *double result = 0;
  }
  return result;
}

void sub_E2760(uint64_t a1)
{
  sub_E320C(a1);

  operator delete();
}

double sub_E2798(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 40);
  if (!v2) {
    return NAN;
  }
  double v3 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 64))(v2) + 16);
  double v4 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v5) << 32;
  if (v7 >= 1)
  {
    double v8 = (double *)((char *)v3 + (v7 >> 29));
    do
    {
      double v9 = *v3;
      if (*v3 < 0.0) {
        double v9 = -*v3;
      }
      *double v4 = v9;
      double v10 = v3[1];
      if (v10 < 0.0) {
        double v10 = -v10;
      }
      v4[1] = v10;
      double v11 = v3[2];
      if (v11 < 0.0) {
        double v11 = -v11;
      }
      v4[2] = v11;
      double v12 = v3[3];
      if (v12 < 0.0) {
        double v12 = -v12;
      }
      v4[3] = v12;
      double v13 = v3[4];
      if (v13 < 0.0) {
        double v13 = -v13;
      }
      v4[4] = v13;
      double v14 = v3[5];
      if (v14 < 0.0) {
        double v14 = -v14;
      }
      v4[5] = v14;
      double v15 = v3[6];
      if (v15 < 0.0) {
        double v15 = -v15;
      }
      v4[6] = v15;
      double v16 = v3[7];
      if (v16 < 0.0) {
        double v16 = -v16;
      }
      v4[7] = v16;
      double v17 = v3[8];
      if (v17 < 0.0) {
        double v17 = -v17;
      }
      v4[8] = v17;
      double v18 = v3[9];
      if (v18 < 0.0) {
        double v18 = -v18;
      }
      v4[9] = v18;
      double v19 = v3[10];
      if (v19 < 0.0) {
        double v19 = -v19;
      }
      v4[10] = v19;
      double v20 = v3[11];
      if (v20 < 0.0) {
        double v20 = -v20;
      }
      v4[11] = v20;
      double v21 = v3[12];
      if (v21 < 0.0) {
        double v21 = -v21;
      }
      v4[12] = v21;
      double v22 = v3[13];
      if (v22 < 0.0) {
        double v22 = -v22;
      }
      v4[13] = v22;
      double v23 = v3[14];
      if (v23 < 0.0) {
        double v23 = -v23;
      }
      v4[14] = v23;
      double v24 = v3[15];
      if (v24 < 0.0) {
        double v24 = -v24;
      }
      v4[15] = v24;
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v8);
  }
  int v25 = (v5 & 0xF) - 1;
  unsigned int v26 = 0;
  unsigned int v27 = 0;
  unsigned int v28 = 0;
  unsigned int v29 = 0;
  unsigned int v30 = 0;
  unsigned int v31 = 0;
  unsigned int v32 = 0;
  unsigned int v33 = 0;
  unsigned int v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  switch(v25)
  {
    case 0:
      goto LABEL_83;
    case 1:
      goto LABEL_80;
    case 2:
      goto LABEL_77;
    case 3:
      goto LABEL_74;
    case 4:
      goto LABEL_71;
    case 5:
      goto LABEL_68;
    case 6:
      goto LABEL_65;
    case 7:
      goto LABEL_62;
    case 8:
      goto LABEL_59;
    case 9:
      goto LABEL_56;
    case 10:
      goto LABEL_53;
    case 11:
      goto LABEL_50;
    case 12:
      goto LABEL_47;
    case 13:
      goto LABEL_44;
    case 14:
      double v40 = *v3;
      if (*v3 < 0.0) {
        double v40 = -*v3;
      }
      *double v4 = v40;
      unsigned int v26 = 1;
LABEL_44:
      double v41 = v3[v26];
      if (v41 < 0.0) {
        double v41 = -v41;
      }
      v4[v26] = v41;
      unsigned int v27 = v26 + 1;
LABEL_47:
      double v42 = v3[v27];
      if (v42 < 0.0) {
        double v42 = -v42;
      }
      v4[v27] = v42;
      unsigned int v28 = v27 + 1;
LABEL_50:
      double v43 = v3[v28];
      if (v43 < 0.0) {
        double v43 = -v43;
      }
      v4[v28] = v43;
      unsigned int v29 = v28 + 1;
LABEL_53:
      double v44 = v3[v29];
      if (v44 < 0.0) {
        double v44 = -v44;
      }
      v4[v29] = v44;
      unsigned int v30 = v29 + 1;
LABEL_56:
      double v45 = v3[v30];
      if (v45 < 0.0) {
        double v45 = -v45;
      }
      v4[v30] = v45;
      unsigned int v31 = v30 + 1;
LABEL_59:
      double v46 = v3[v31];
      if (v46 < 0.0) {
        double v46 = -v46;
      }
      v4[v31] = v46;
      unsigned int v32 = v31 + 1;
LABEL_62:
      double v47 = v3[v32];
      if (v47 < 0.0) {
        double v47 = -v47;
      }
      v4[v32] = v47;
      unsigned int v33 = v32 + 1;
LABEL_65:
      double v48 = v3[v33];
      if (v48 < 0.0) {
        double v48 = -v48;
      }
      v4[v33] = v48;
      unsigned int v34 = v33 + 1;
LABEL_68:
      double v49 = v3[v34];
      if (v49 < 0.0) {
        double v49 = -v49;
      }
      v4[v34] = v49;
      uint64_t v35 = v34 + 1;
LABEL_71:
      double v50 = v3[v35];
      if (v50 < 0.0) {
        double v50 = -v50;
      }
      v4[v35] = v50;
      uint64_t v36 = (v35 + 1);
LABEL_74:
      double v51 = v3[v36];
      if (v51 < 0.0) {
        double v51 = -v51;
      }
      v4[v36] = v51;
      uint64_t v37 = (v36 + 1);
LABEL_77:
      double v52 = v3[v37];
      if (v52 < 0.0) {
        double v52 = -v52;
      }
      v4[v37] = v52;
      uint64_t v38 = (v37 + 1);
LABEL_80:
      double v53 = v3[v38];
      if (v53 < 0.0) {
        double v53 = -v53;
      }
      v4[v38] = v53;
      uint64_t v39 = (v38 + 1);
LABEL_83:
      double v54 = v3[v39];
      if (v54 < 0.0) {
        double v54 = -v54;
      }
      v4[v39] = v54;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v35, v36, v37, v38, v39)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v35, v36, v37, v38, v39)+ 16);
}

uint64_t sub_E2C6C()
{
  return 141;
}

uint64_t sub_E2C74(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_E2C7C(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_E2C84(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_E2CC4(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_E2CCC(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_E2CD4(uint64_t a1)
{
  return sub_E320C(a1 - 32);
}

void sub_E2CDC(uint64_t a1)
{
  sub_E320C(a1 - 32);

  operator delete();
}

uint64_t sub_E2D18(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 32) + 72))() + 8);
}

uint64_t sub_E2D58(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_E2D60(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_E2D68(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_E2D70(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_E2D78()
{
  return 0;
}

void sub_E2D84()
{
}

uint64_t sub_E2D98(uint64_t a1, void *a2)
{
  if (*a2 >= *(void *)(a1 + 16)) {
    return 0;
  }
  else {
    return *(void *)(a1 + 8) + 8 * *a2;
  }
}

uint64_t sub_E2DBC(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void *sub_E2DC4(void *result)
{
  *double result = off_2400CA8;
  result[1] = off_2400D08;
  uint64_t v1 = result[3];
  if (v1)
  {
    if (*(void *)v1)
    {
      uint64_t v2 = *(void *)v1 - 1;
      *(void *)uint64_t v1 = v2;
      if (!v2)
      {
        if (*(void *)(v1 + 16))
        {
          if (*(unsigned char *)(v1 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    result[3] = 0;
  }
  return result;
}

void sub_E2E84(void *a1)
{
  *a1 = off_2400CA8;
  a1[1] = off_2400D08;
  uint64_t v1 = a1[3];
  if (v1)
  {
    if (*(void *)v1)
    {
      uint64_t v2 = *(void *)v1 - 1;
      *(void *)uint64_t v1 = v2;
      if (!v2)
      {
        if (*(void *)(v1 + 16))
        {
          if (*(unsigned char *)(v1 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    a1[3] = 0;
  }

  operator delete();
}

double sub_E2F64(uint64_t a1)
{
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
}

uint64_t sub_E2FA8()
{
  return 124;
}

uint64_t sub_E2FB8(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_E2FF8(uint64_t a1)
{
  return a1 + 24;
}

uint64_t sub_E3000(uint64_t a1)
{
  return a1 + 24;
}

void *sub_E3008(void *result)
{
  *(result - 1) = off_2400CA8;
  *double result = off_2400D08;
  uint64_t v1 = result[2];
  if (v1)
  {
    if (*(void *)v1)
    {
      uint64_t v2 = *(void *)v1 - 1;
      *(void *)uint64_t v1 = v2;
      if (!v2)
      {
        if (*(void *)(v1 + 16))
        {
          if (*(unsigned char *)(v1 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    result[2] = 0;
  }
  return result;
}

void sub_E30C4(void *a1)
{
  *(a1 - 1) = off_2400CA8;
  *a1 = off_2400D08;
  uint64_t v1 = a1[2];
  if (v1)
  {
    if (*(void *)v1)
    {
      uint64_t v2 = *(void *)v1 - 1;
      *(void *)uint64_t v1 = v2;
      if (!v2)
      {
        if (*(void *)(v1 + 16))
        {
          if (*(unsigned char *)(v1 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    a1[2] = 0;
  }

  operator delete();
}

uint64_t sub_E31AC(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 8) + 72))() + 8);
}

uint64_t sub_E31EC(uint64_t a1)
{
  return a1 - 8;
}

uint64_t sub_E31F4(uint64_t a1)
{
  return a1 - 8;
}

uint64_t sub_E31FC(uint64_t a1)
{
  return a1 + 16;
}

uint64_t sub_E3204(uint64_t a1)
{
  return a1 + 16;
}

uint64_t sub_E320C(uint64_t a1)
{
  *(void *)a1 = off_2400B68;
  *(void *)(a1 + 32) = off_2400BC8;
  if (*(void *)(a1 + 48)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 64) = 0;
  }
  *(void *)a1 = off_23FFC00;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_E3368(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *(void *)a1 = off_23FFC00;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = a3;
  if (a3) {
    BOOL v5 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
  }
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
  else {
    BOOL v5 = 1;
  }
  *(unsigned char *)(a1 + 24) = v5;
  *(void *)a1 = off_2400D90;
  *(void *)(a1 + 32) = off_2400DF0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  operator new();
}

void sub_E39A0(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_E08A0(v1);
  _Unwind_Resume(a1);
}

void sub_E3A48(uint64_t a1)
{
  sub_E3F98(a1);

  operator delete();
}

double sub_E3A80(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 40);
  if (!v2) {
    return NAN;
  }
  uint64_t v3 = *(long double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 64))(v2) + 16);
  uint64_t v4 = *(long double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  int v6 = v5 & 0xF;
  if ((v5 & 0xF) != 0) {
    int v7 = -16;
  }
  else {
    int v7 = 0;
  }
  int64_t v8 = (unint64_t)(v7 + v5) << 32;
  if (v8 >= 1)
  {
    double v9 = (long double *)((char *)v3 + (v8 >> 29));
    do
    {
      *uint64_t v4 = acos(*v3);
      v4[1] = acos(v3[1]);
      v4[2] = acos(v3[2]);
      v4[3] = acos(v3[3]);
      v4[4] = acos(v3[4]);
      v4[5] = acos(v3[5]);
      v4[6] = acos(v3[6]);
      v4[7] = acos(v3[7]);
      v4[8] = acos(v3[8]);
      v4[9] = acos(v3[9]);
      v4[10] = acos(v3[10]);
      v4[11] = acos(v3[11]);
      v4[12] = acos(v3[12]);
      v4[13] = acos(v3[13]);
      v4[14] = acos(v3[14]);
      v4[15] = acos(v3[15]);
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v9);
  }
  int v10 = v6 - 1;
  uint64_t v31 = a1;
  unsigned int v11 = 0;
  unsigned int v12 = 0;
  unsigned int v13 = 0;
  unsigned int v14 = 0;
  unsigned int v15 = 0;
  int v16 = 0;
  int v17 = 0;
  int v18 = 0;
  int v19 = 0;
  uint64_t v20 = 0;
  int v21 = 0;
  int v22 = 0;
  int v23 = 0;
  uint64_t v24 = 0;
  switch(v10)
  {
    case 0:
      goto LABEL_23;
    case 1:
      goto LABEL_22;
    case 2:
      goto LABEL_21;
    case 3:
      goto LABEL_20;
    case 4:
      goto LABEL_19;
    case 5:
      goto LABEL_18;
    case 6:
      goto LABEL_17;
    case 7:
      goto LABEL_16;
    case 8:
      goto LABEL_15;
    case 9:
      goto LABEL_14;
    case 10:
      goto LABEL_13;
    case 11:
      goto LABEL_12;
    case 12:
      goto LABEL_11;
    case 13:
      goto LABEL_10;
    case 14:
      *uint64_t v4 = acos(*v3);
      unsigned int v11 = 1;
LABEL_10:
      unsigned int v25 = v11;
      v4[v11] = acos(v3[v11]);
      unsigned int v12 = v25 + 1;
LABEL_11:
      unsigned int v26 = v12;
      v4[v12] = acos(v3[v12]);
      unsigned int v13 = v26 + 1;
LABEL_12:
      unsigned int v27 = v13;
      v4[v13] = acos(v3[v13]);
      unsigned int v14 = v27 + 1;
LABEL_13:
      unsigned int v28 = v14;
      v4[v14] = acos(v3[v14]);
      unsigned int v15 = v28 + 1;
LABEL_14:
      unsigned int v29 = v15;
      v4[v15] = acos(v3[v15]);
      int v16 = v29 + 1;
LABEL_15:
      v4[v16] = acos(v3[v16]);
      int v17 = v16 + 1;
LABEL_16:
      v4[v17] = acos(v3[v17]);
      int v18 = v17 + 1;
LABEL_17:
      v4[v18] = acos(v3[v18]);
      int v19 = v18 + 1;
LABEL_18:
      v4[v19] = acos(v3[v19]);
      LODWORD(v20) = v19 + 1;
LABEL_19:
      v4[v20] = acos(v3[v20]);
      int v21 = v20 + 1;
LABEL_20:
      v4[v21] = acos(v3[v21]);
      int v22 = v21 + 1;
LABEL_21:
      v4[v22] = acos(v3[v22]);
      int v23 = v22 + 1;
LABEL_22:
      v4[v23] = acos(v3[v23]);
      uint64_t v24 = (v23 + 1);
LABEL_23:
      v4[v24] = acos(v3[v24]);
      uint64_t v20 = v31;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v20 + 72))(v20) + 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v20 + 72))(v20) + 16);
}

uint64_t sub_E3E8C()
{
  return 141;
}

uint64_t sub_E3E94(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_E3E9C(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_E3EA4(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_E3EE4(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_E3EEC(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_E3EF4(uint64_t a1)
{
  return sub_E3F98(a1 - 32);
}

void sub_E3EFC(uint64_t a1)
{
  sub_E3F98(a1 - 32);

  operator delete();
}

uint64_t sub_E3F38(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 32) + 72))() + 8);
}

uint64_t sub_E3F78(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_E3F80(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_E3F88(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_E3F90(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_E3F98(uint64_t a1)
{
  *(void *)a1 = off_2400D90;
  *(void *)(a1 + 32) = off_2400DF0;
  if (*(void *)(a1 + 48)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 64) = 0;
  }
  *(void *)a1 = off_23FFC00;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_E40F4(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *(void *)a1 = off_23FFC00;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = a3;
  if (a3) {
    BOOL v5 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
  }
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
  else {
    BOOL v5 = 1;
  }
  *(unsigned char *)(a1 + 24) = v5;
  *(void *)a1 = off_2400E78;
  *(void *)(a1 + 32) = off_2400ED8;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  operator new();
}

void sub_E472C(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_E08A0(v1);
  _Unwind_Resume(a1);
}

void sub_E47D4(uint64_t a1)
{
  sub_E4F5C(a1);

  operator delete();
}

uint64_t sub_E480C(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)result + 64))(result) + 16);
    uint64_t v4 = *(long double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    int v6 = v5 & 0xF;
    if ((v5 & 0xF) != 0) {
      int v7 = -16;
    }
    else {
      int v7 = 0;
    }
    int64_t v8 = (unint64_t)(v7 + v5) << 32;
    if (v8 >= 1)
    {
      double v9 = (double *)((char *)v3 + (v8 >> 29));
      do
      {
        *uint64_t v4 = log(*v3 + sqrt(*v3 * *v3 + -1.0));
        v4[1] = log(v3[1] + sqrt(v3[1] * v3[1] + -1.0));
        v4[2] = log(v3[2] + sqrt(v3[2] * v3[2] + -1.0));
        v4[3] = log(v3[3] + sqrt(v3[3] * v3[3] + -1.0));
        v4[4] = log(v3[4] + sqrt(v3[4] * v3[4] + -1.0));
        v4[5] = log(v3[5] + sqrt(v3[5] * v3[5] + -1.0));
        v4[6] = log(v3[6] + sqrt(v3[6] * v3[6] + -1.0));
        v4[7] = log(v3[7] + sqrt(v3[7] * v3[7] + -1.0));
        v4[8] = log(v3[8] + sqrt(v3[8] * v3[8] + -1.0));
        v4[9] = log(v3[9] + sqrt(v3[9] * v3[9] + -1.0));
        v4[10] = log(v3[10] + sqrt(v3[10] * v3[10] + -1.0));
        v4[11] = log(v3[11] + sqrt(v3[11] * v3[11] + -1.0));
        v4[12] = log(v3[12] + sqrt(v3[12] * v3[12] + -1.0));
        v4[13] = log(v3[13] + sqrt(v3[13] * v3[13] + -1.0));
        v4[14] = log(v3[14] + sqrt(v3[14] * v3[14] + -1.0));
        v4[15] = log(v3[15] + sqrt(v3[15] * v3[15] + -1.0));
        v3 += 16;
        v4 += 16;
      }
      while (v3 < v9);
    }
    int v10 = v6 - 1;
    uint64_t v30 = a1;
    unsigned int v11 = 0;
    unsigned int v12 = 0;
    unsigned int v13 = 0;
    unsigned int v14 = 0;
    unsigned int v15 = 0;
    int v16 = 0;
    int v17 = 0;
    int v18 = 0;
    uint64_t v19 = 0;
    int v20 = 0;
    int v21 = 0;
    int v22 = 0;
    int v23 = 0;
    uint64_t v24 = 0;
    switch(v10)
    {
      case 0:
        goto LABEL_23;
      case 1:
        goto LABEL_22;
      case 2:
        goto LABEL_21;
      case 3:
        goto LABEL_20;
      case 4:
        goto LABEL_19;
      case 5:
        goto LABEL_18;
      case 6:
        goto LABEL_17;
      case 7:
        goto LABEL_16;
      case 8:
        goto LABEL_15;
      case 9:
        goto LABEL_14;
      case 10:
        goto LABEL_13;
      case 11:
        goto LABEL_12;
      case 12:
        goto LABEL_11;
      case 13:
        goto LABEL_10;
      case 14:
        *uint64_t v4 = log(*v3 + sqrt(*v3 * *v3 + -1.0));
        unsigned int v11 = 1;
LABEL_10:
        unsigned int v25 = v11;
        v4[v11] = log(v3[v11] + sqrt(v3[v11] * v3[v11] + -1.0));
        unsigned int v12 = v25 + 1;
LABEL_11:
        unsigned int v26 = v12;
        v4[v12] = log(v3[v12] + sqrt(v3[v12] * v3[v12] + -1.0));
        unsigned int v13 = v26 + 1;
LABEL_12:
        unsigned int v27 = v13;
        v4[v13] = log(v3[v13] + sqrt(v3[v13] * v3[v13] + -1.0));
        unsigned int v14 = v27 + 1;
LABEL_13:
        unsigned int v28 = v14;
        v4[v14] = log(v3[v14] + sqrt(v3[v14] * v3[v14] + -1.0));
        unsigned int v15 = v28 + 1;
LABEL_14:
        unsigned int v29 = v15;
        v4[v15] = log(v3[v15] + sqrt(v3[v15] * v3[v15] + -1.0));
        int v16 = v29 + 1;
LABEL_15:
        v4[v16] = log(v3[v16] + sqrt(v3[v16] * v3[v16] + -1.0));
        int v17 = v16 + 1;
LABEL_16:
        v4[v17] = log(v3[v17] + sqrt(v3[v17] * v3[v17] + -1.0));
        int v18 = v17 + 1;
LABEL_17:
        v4[v18] = log(v3[v18] + sqrt(v3[v18] * v3[v18] + -1.0));
        LODWORD(v19) = v18 + 1;
LABEL_18:
        v4[v19] = log(v3[v19] + sqrt(v3[v19] * v3[v19] + -1.0));
        int v20 = v19 + 1;
LABEL_19:
        v4[v20] = log(v3[v20] + sqrt(v3[v20] * v3[v20] + -1.0));
        int v21 = v20 + 1;
LABEL_20:
        v4[v21] = log(v3[v21] + sqrt(v3[v21] * v3[v21] + -1.0));
        int v22 = v21 + 1;
LABEL_21:
        v4[v22] = log(v3[v22] + sqrt(v3[v22] * v3[v22] + -1.0));
        int v23 = v22 + 1;
LABEL_22:
        v4[v23] = log(v3[v23] + sqrt(v3[v23] * v3[v23] + -1.0));
        uint64_t v24 = (v23 + 1);
LABEL_23:
        v4[v24] = log(v3[v24] + sqrt(v3[v24] * v3[v24] + -1.0));
        uint64_t v19 = v30;
        break;
      default:
        return (*(uint64_t (**)(uint64_t))(*(void *)v19 + 72))(v19);
    }
    return (*(uint64_t (**)(uint64_t))(*(void *)v19 + 72))(v19);
  }
  return result;
}

uint64_t sub_E4E50()
{
  return 141;
}

uint64_t sub_E4E58(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_E4E60(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_E4E68(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_E4EA8(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_E4EB0(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_E4EB8(uint64_t a1)
{
  return sub_E4F5C(a1 - 32);
}

void sub_E4EC0(uint64_t a1)
{
  sub_E4F5C(a1 - 32);

  operator delete();
}

uint64_t sub_E4EFC(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 32) + 72))() + 8);
}

uint64_t sub_E4F3C(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_E4F44(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_E4F4C(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_E4F54(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_E4F5C(uint64_t a1)
{
  *(void *)a1 = off_2400E78;
  *(void *)(a1 + 32) = off_2400ED8;
  if (*(void *)(a1 + 48)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 64) = 0;
  }
  *(void *)a1 = off_23FFC00;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_E50B8(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *(void *)a1 = off_23FFC00;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = a3;
  if (a3) {
    BOOL v5 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
  }
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
  else {
    BOOL v5 = 1;
  }
  *(unsigned char *)(a1 + 24) = v5;
  *(void *)a1 = off_2400F60;
  *(void *)(a1 + 32) = off_2400FC0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  operator new();
}

void sub_E56F0(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_E08A0(v1);
  _Unwind_Resume(a1);
}

void sub_E5798(uint64_t a1)
{
  sub_E5CE8(a1);

  operator delete();
}

double sub_E57D0(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 40);
  if (!v2) {
    return NAN;
  }
  uint64_t v3 = *(long double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 64))(v2) + 16);
  uint64_t v4 = *(long double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  int v6 = v5 & 0xF;
  if ((v5 & 0xF) != 0) {
    int v7 = -16;
  }
  else {
    int v7 = 0;
  }
  int64_t v8 = (unint64_t)(v7 + v5) << 32;
  if (v8 >= 1)
  {
    double v9 = (long double *)((char *)v3 + (v8 >> 29));
    do
    {
      *uint64_t v4 = asin(*v3);
      v4[1] = asin(v3[1]);
      v4[2] = asin(v3[2]);
      v4[3] = asin(v3[3]);
      v4[4] = asin(v3[4]);
      v4[5] = asin(v3[5]);
      v4[6] = asin(v3[6]);
      v4[7] = asin(v3[7]);
      v4[8] = asin(v3[8]);
      v4[9] = asin(v3[9]);
      v4[10] = asin(v3[10]);
      v4[11] = asin(v3[11]);
      v4[12] = asin(v3[12]);
      v4[13] = asin(v3[13]);
      v4[14] = asin(v3[14]);
      v4[15] = asin(v3[15]);
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v9);
  }
  int v10 = v6 - 1;
  uint64_t v31 = a1;
  unsigned int v11 = 0;
  unsigned int v12 = 0;
  unsigned int v13 = 0;
  unsigned int v14 = 0;
  unsigned int v15 = 0;
  int v16 = 0;
  int v17 = 0;
  int v18 = 0;
  int v19 = 0;
  uint64_t v20 = 0;
  int v21 = 0;
  int v22 = 0;
  int v23 = 0;
  uint64_t v24 = 0;
  switch(v10)
  {
    case 0:
      goto LABEL_23;
    case 1:
      goto LABEL_22;
    case 2:
      goto LABEL_21;
    case 3:
      goto LABEL_20;
    case 4:
      goto LABEL_19;
    case 5:
      goto LABEL_18;
    case 6:
      goto LABEL_17;
    case 7:
      goto LABEL_16;
    case 8:
      goto LABEL_15;
    case 9:
      goto LABEL_14;
    case 10:
      goto LABEL_13;
    case 11:
      goto LABEL_12;
    case 12:
      goto LABEL_11;
    case 13:
      goto LABEL_10;
    case 14:
      *uint64_t v4 = asin(*v3);
      unsigned int v11 = 1;
LABEL_10:
      unsigned int v25 = v11;
      v4[v11] = asin(v3[v11]);
      unsigned int v12 = v25 + 1;
LABEL_11:
      unsigned int v26 = v12;
      v4[v12] = asin(v3[v12]);
      unsigned int v13 = v26 + 1;
LABEL_12:
      unsigned int v27 = v13;
      v4[v13] = asin(v3[v13]);
      unsigned int v14 = v27 + 1;
LABEL_13:
      unsigned int v28 = v14;
      v4[v14] = asin(v3[v14]);
      unsigned int v15 = v28 + 1;
LABEL_14:
      unsigned int v29 = v15;
      v4[v15] = asin(v3[v15]);
      int v16 = v29 + 1;
LABEL_15:
      v4[v16] = asin(v3[v16]);
      int v17 = v16 + 1;
LABEL_16:
      v4[v17] = asin(v3[v17]);
      int v18 = v17 + 1;
LABEL_17:
      v4[v18] = asin(v3[v18]);
      int v19 = v18 + 1;
LABEL_18:
      v4[v19] = asin(v3[v19]);
      LODWORD(v20) = v19 + 1;
LABEL_19:
      v4[v20] = asin(v3[v20]);
      int v21 = v20 + 1;
LABEL_20:
      v4[v21] = asin(v3[v21]);
      int v22 = v21 + 1;
LABEL_21:
      v4[v22] = asin(v3[v22]);
      int v23 = v22 + 1;
LABEL_22:
      v4[v23] = asin(v3[v23]);
      uint64_t v24 = (v23 + 1);
LABEL_23:
      v4[v24] = asin(v3[v24]);
      uint64_t v20 = v31;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v20 + 72))(v20) + 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v20 + 72))(v20) + 16);
}

uint64_t sub_E5BDC()
{
  return 141;
}

uint64_t sub_E5BE4(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_E5BEC(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_E5BF4(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_E5C34(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_E5C3C(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_E5C44(uint64_t a1)
{
  return sub_E5CE8(a1 - 32);
}

void sub_E5C4C(uint64_t a1)
{
  sub_E5CE8(a1 - 32);

  operator delete();
}

uint64_t sub_E5C88(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 32) + 72))() + 8);
}

uint64_t sub_E5CC8(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_E5CD0(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_E5CD8(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_E5CE0(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_E5CE8(uint64_t a1)
{
  *(void *)a1 = off_2400F60;
  *(void *)(a1 + 32) = off_2400FC0;
  if (*(void *)(a1 + 48)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 64) = 0;
  }
  *(void *)a1 = off_23FFC00;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_E5E44(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *(void *)a1 = off_23FFC00;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = a3;
  if (a3) {
    BOOL v5 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
  }
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
  else {
    BOOL v5 = 1;
  }
  *(unsigned char *)(a1 + 24) = v5;
  *(void *)a1 = off_2401048;
  *(void *)(a1 + 32) = off_24010A8;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  operator new();
}

void sub_E647C(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_E08A0(v1);
  _Unwind_Resume(a1);
}

void sub_E6524(uint64_t a1)
{
  sub_E6CAC(a1);

  operator delete();
}

uint64_t sub_E655C(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)result + 64))(result) + 16);
    uint64_t v4 = *(long double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    int v6 = v5 & 0xF;
    if ((v5 & 0xF) != 0) {
      int v7 = -16;
    }
    else {
      int v7 = 0;
    }
    int64_t v8 = (unint64_t)(v7 + v5) << 32;
    if (v8 >= 1)
    {
      double v9 = (double *)((char *)v3 + (v8 >> 29));
      do
      {
        *uint64_t v4 = log(*v3 + sqrt(*v3 * *v3 + 1.0));
        v4[1] = log(v3[1] + sqrt(v3[1] * v3[1] + 1.0));
        v4[2] = log(v3[2] + sqrt(v3[2] * v3[2] + 1.0));
        v4[3] = log(v3[3] + sqrt(v3[3] * v3[3] + 1.0));
        v4[4] = log(v3[4] + sqrt(v3[4] * v3[4] + 1.0));
        v4[5] = log(v3[5] + sqrt(v3[5] * v3[5] + 1.0));
        v4[6] = log(v3[6] + sqrt(v3[6] * v3[6] + 1.0));
        v4[7] = log(v3[7] + sqrt(v3[7] * v3[7] + 1.0));
        v4[8] = log(v3[8] + sqrt(v3[8] * v3[8] + 1.0));
        v4[9] = log(v3[9] + sqrt(v3[9] * v3[9] + 1.0));
        v4[10] = log(v3[10] + sqrt(v3[10] * v3[10] + 1.0));
        v4[11] = log(v3[11] + sqrt(v3[11] * v3[11] + 1.0));
        v4[12] = log(v3[12] + sqrt(v3[12] * v3[12] + 1.0));
        v4[13] = log(v3[13] + sqrt(v3[13] * v3[13] + 1.0));
        v4[14] = log(v3[14] + sqrt(v3[14] * v3[14] + 1.0));
        v4[15] = log(v3[15] + sqrt(v3[15] * v3[15] + 1.0));
        v3 += 16;
        v4 += 16;
      }
      while (v3 < v9);
    }
    int v10 = v6 - 1;
    uint64_t v30 = a1;
    unsigned int v11 = 0;
    unsigned int v12 = 0;
    unsigned int v13 = 0;
    unsigned int v14 = 0;
    unsigned int v15 = 0;
    int v16 = 0;
    int v17 = 0;
    int v18 = 0;
    uint64_t v19 = 0;
    int v20 = 0;
    int v21 = 0;
    int v22 = 0;
    int v23 = 0;
    uint64_t v24 = 0;
    switch(v10)
    {
      case 0:
        goto LABEL_23;
      case 1:
        goto LABEL_22;
      case 2:
        goto LABEL_21;
      case 3:
        goto LABEL_20;
      case 4:
        goto LABEL_19;
      case 5:
        goto LABEL_18;
      case 6:
        goto LABEL_17;
      case 7:
        goto LABEL_16;
      case 8:
        goto LABEL_15;
      case 9:
        goto LABEL_14;
      case 10:
        goto LABEL_13;
      case 11:
        goto LABEL_12;
      case 12:
        goto LABEL_11;
      case 13:
        goto LABEL_10;
      case 14:
        *uint64_t v4 = log(*v3 + sqrt(*v3 * *v3 + 1.0));
        unsigned int v11 = 1;
LABEL_10:
        unsigned int v25 = v11;
        v4[v11] = log(v3[v11] + sqrt(v3[v11] * v3[v11] + 1.0));
        unsigned int v12 = v25 + 1;
LABEL_11:
        unsigned int v26 = v12;
        v4[v12] = log(v3[v12] + sqrt(v3[v12] * v3[v12] + 1.0));
        unsigned int v13 = v26 + 1;
LABEL_12:
        unsigned int v27 = v13;
        v4[v13] = log(v3[v13] + sqrt(v3[v13] * v3[v13] + 1.0));
        unsigned int v14 = v27 + 1;
LABEL_13:
        unsigned int v28 = v14;
        v4[v14] = log(v3[v14] + sqrt(v3[v14] * v3[v14] + 1.0));
        unsigned int v15 = v28 + 1;
LABEL_14:
        unsigned int v29 = v15;
        v4[v15] = log(v3[v15] + sqrt(v3[v15] * v3[v15] + 1.0));
        int v16 = v29 + 1;
LABEL_15:
        v4[v16] = log(v3[v16] + sqrt(v3[v16] * v3[v16] + 1.0));
        int v17 = v16 + 1;
LABEL_16:
        v4[v17] = log(v3[v17] + sqrt(v3[v17] * v3[v17] + 1.0));
        int v18 = v17 + 1;
LABEL_17:
        v4[v18] = log(v3[v18] + sqrt(v3[v18] * v3[v18] + 1.0));
        LODWORD(v19) = v18 + 1;
LABEL_18:
        v4[v19] = log(v3[v19] + sqrt(v3[v19] * v3[v19] + 1.0));
        int v20 = v19 + 1;
LABEL_19:
        v4[v20] = log(v3[v20] + sqrt(v3[v20] * v3[v20] + 1.0));
        int v21 = v20 + 1;
LABEL_20:
        v4[v21] = log(v3[v21] + sqrt(v3[v21] * v3[v21] + 1.0));
        int v22 = v21 + 1;
LABEL_21:
        v4[v22] = log(v3[v22] + sqrt(v3[v22] * v3[v22] + 1.0));
        int v23 = v22 + 1;
LABEL_22:
        v4[v23] = log(v3[v23] + sqrt(v3[v23] * v3[v23] + 1.0));
        uint64_t v24 = (v23 + 1);
LABEL_23:
        v4[v24] = log(v3[v24] + sqrt(v3[v24] * v3[v24] + 1.0));
        uint64_t v19 = v30;
        break;
      default:
        return (*(uint64_t (**)(uint64_t))(*(void *)v19 + 72))(v19);
    }
    return (*(uint64_t (**)(uint64_t))(*(void *)v19 + 72))(v19);
  }
  return result;
}

uint64_t sub_E6BA0()
{
  return 141;
}

uint64_t sub_E6BA8(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_E6BB0(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_E6BB8(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_E6BF8(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_E6C00(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_E6C08(uint64_t a1)
{
  return sub_E6CAC(a1 - 32);
}

void sub_E6C10(uint64_t a1)
{
  sub_E6CAC(a1 - 32);

  operator delete();
}

uint64_t sub_E6C4C(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 32) + 72))() + 8);
}

uint64_t sub_E6C8C(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_E6C94(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_E6C9C(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_E6CA4(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_E6CAC(uint64_t a1)
{
  *(void *)a1 = off_2401048;
  *(void *)(a1 + 32) = off_24010A8;
  if (*(void *)(a1 + 48)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 64) = 0;
  }
  *(void *)a1 = off_23FFC00;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_E6E08(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *(void *)a1 = off_23FFC00;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = a3;
  if (a3) {
    BOOL v5 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
  }
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
  else {
    BOOL v5 = 1;
  }
  *(unsigned char *)(a1 + 24) = v5;
  *(void *)a1 = off_2401130;
  *(void *)(a1 + 32) = off_2401190;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  operator new();
}

void sub_E7440(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_E08A0(v1);
  _Unwind_Resume(a1);
}

void sub_E74E8(uint64_t a1)
{
  sub_E7A38(a1);

  operator delete();
}

double sub_E7520(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 40);
  if (!v2) {
    return NAN;
  }
  uint64_t v3 = *(long double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 64))(v2) + 16);
  uint64_t v4 = *(long double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  int v6 = v5 & 0xF;
  if ((v5 & 0xF) != 0) {
    int v7 = -16;
  }
  else {
    int v7 = 0;
  }
  int64_t v8 = (unint64_t)(v7 + v5) << 32;
  if (v8 >= 1)
  {
    double v9 = (long double *)((char *)v3 + (v8 >> 29));
    do
    {
      *uint64_t v4 = atan(*v3);
      v4[1] = atan(v3[1]);
      v4[2] = atan(v3[2]);
      v4[3] = atan(v3[3]);
      v4[4] = atan(v3[4]);
      v4[5] = atan(v3[5]);
      v4[6] = atan(v3[6]);
      v4[7] = atan(v3[7]);
      v4[8] = atan(v3[8]);
      v4[9] = atan(v3[9]);
      v4[10] = atan(v3[10]);
      v4[11] = atan(v3[11]);
      v4[12] = atan(v3[12]);
      v4[13] = atan(v3[13]);
      v4[14] = atan(v3[14]);
      v4[15] = atan(v3[15]);
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v9);
  }
  int v10 = v6 - 1;
  uint64_t v31 = a1;
  unsigned int v11 = 0;
  unsigned int v12 = 0;
  unsigned int v13 = 0;
  unsigned int v14 = 0;
  unsigned int v15 = 0;
  int v16 = 0;
  int v17 = 0;
  int v18 = 0;
  int v19 = 0;
  uint64_t v20 = 0;
  int v21 = 0;
  int v22 = 0;
  int v23 = 0;
  uint64_t v24 = 0;
  switch(v10)
  {
    case 0:
      goto LABEL_23;
    case 1:
      goto LABEL_22;
    case 2:
      goto LABEL_21;
    case 3:
      goto LABEL_20;
    case 4:
      goto LABEL_19;
    case 5:
      goto LABEL_18;
    case 6:
      goto LABEL_17;
    case 7:
      goto LABEL_16;
    case 8:
      goto LABEL_15;
    case 9:
      goto LABEL_14;
    case 10:
      goto LABEL_13;
    case 11:
      goto LABEL_12;
    case 12:
      goto LABEL_11;
    case 13:
      goto LABEL_10;
    case 14:
      *uint64_t v4 = atan(*v3);
      unsigned int v11 = 1;
LABEL_10:
      unsigned int v25 = v11;
      v4[v11] = atan(v3[v11]);
      unsigned int v12 = v25 + 1;
LABEL_11:
      unsigned int v26 = v12;
      v4[v12] = atan(v3[v12]);
      unsigned int v13 = v26 + 1;
LABEL_12:
      unsigned int v27 = v13;
      v4[v13] = atan(v3[v13]);
      unsigned int v14 = v27 + 1;
LABEL_13:
      unsigned int v28 = v14;
      v4[v14] = atan(v3[v14]);
      unsigned int v15 = v28 + 1;
LABEL_14:
      unsigned int v29 = v15;
      v4[v15] = atan(v3[v15]);
      int v16 = v29 + 1;
LABEL_15:
      v4[v16] = atan(v3[v16]);
      int v17 = v16 + 1;
LABEL_16:
      v4[v17] = atan(v3[v17]);
      int v18 = v17 + 1;
LABEL_17:
      v4[v18] = atan(v3[v18]);
      int v19 = v18 + 1;
LABEL_18:
      v4[v19] = atan(v3[v19]);
      LODWORD(v20) = v19 + 1;
LABEL_19:
      v4[v20] = atan(v3[v20]);
      int v21 = v20 + 1;
LABEL_20:
      v4[v21] = atan(v3[v21]);
      int v22 = v21 + 1;
LABEL_21:
      v4[v22] = atan(v3[v22]);
      int v23 = v22 + 1;
LABEL_22:
      v4[v23] = atan(v3[v23]);
      uint64_t v24 = (v23 + 1);
LABEL_23:
      v4[v24] = atan(v3[v24]);
      uint64_t v20 = v31;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v20 + 72))(v20) + 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v20 + 72))(v20) + 16);
}

uint64_t sub_E792C()
{
  return 141;
}

uint64_t sub_E7934(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_E793C(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_E7944(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_E7984(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_E798C(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_E7994(uint64_t a1)
{
  return sub_E7A38(a1 - 32);
}

void sub_E799C(uint64_t a1)
{
  sub_E7A38(a1 - 32);

  operator delete();
}

uint64_t sub_E79D8(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 32) + 72))() + 8);
}

uint64_t sub_E7A18(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_E7A20(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_E7A28(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_E7A30(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_E7A38(uint64_t a1)
{
  *(void *)a1 = off_2401130;
  *(void *)(a1 + 32) = off_2401190;
  if (*(void *)(a1 + 48)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 64) = 0;
  }
  *(void *)a1 = off_23FFC00;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_E7B94(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *(void *)a1 = off_23FFC00;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = a3;
  if (a3) {
    BOOL v5 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
  }
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
  else {
    BOOL v5 = 1;
  }
  *(unsigned char *)(a1 + 24) = v5;
  *(void *)a1 = off_2401218;
  *(void *)(a1 + 32) = off_2401278;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  operator new();
}

void sub_E81CC(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_E08A0(v1);
  _Unwind_Resume(a1);
}

void sub_E8274(uint64_t a1)
{
  sub_E8B3C(a1);

  operator delete();
}

uint64_t sub_E82AC(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)result + 64))(result) + 16);
    uint64_t v4 = *(long double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    int v6 = v5 & 0xF;
    if ((v5 & 0xF) != 0) {
      int v7 = -16;
    }
    else {
      int v7 = 0;
    }
    int64_t v8 = (unint64_t)(v7 + v5) << 32;
    if (v8 >= 1)
    {
      double v9 = (double *)((char *)v3 + (v8 >> 29));
      do
      {
        double v10 = *v3;
        double v11 = log(*v3 + 1.0);
        *uint64_t v4 = (v11 - log(1.0 - v10)) * 0.5;
        double v12 = v3[1];
        double v13 = log(v12 + 1.0);
        v4[1] = (v13 - log(1.0 - v12)) * 0.5;
        double v14 = v3[2];
        double v15 = log(v14 + 1.0);
        v4[2] = (v15 - log(1.0 - v14)) * 0.5;
        double v16 = v3[3];
        double v17 = log(v16 + 1.0);
        v4[3] = (v17 - log(1.0 - v16)) * 0.5;
        double v18 = v3[4];
        double v19 = log(v18 + 1.0);
        v4[4] = (v19 - log(1.0 - v18)) * 0.5;
        double v20 = v3[5];
        double v21 = log(v20 + 1.0);
        v4[5] = (v21 - log(1.0 - v20)) * 0.5;
        double v22 = v3[6];
        double v23 = log(v22 + 1.0);
        v4[6] = (v23 - log(1.0 - v22)) * 0.5;
        double v24 = v3[7];
        double v25 = log(v24 + 1.0);
        v4[7] = (v25 - log(1.0 - v24)) * 0.5;
        double v26 = v3[8];
        double v27 = log(v26 + 1.0);
        v4[8] = (v27 - log(1.0 - v26)) * 0.5;
        double v28 = v3[9];
        double v29 = log(v28 + 1.0);
        v4[9] = (v29 - log(1.0 - v28)) * 0.5;
        double v30 = v3[10];
        double v31 = log(v30 + 1.0);
        v4[10] = (v31 - log(1.0 - v30)) * 0.5;
        double v32 = v3[11];
        double v33 = log(v32 + 1.0);
        v4[11] = (v33 - log(1.0 - v32)) * 0.5;
        double v34 = v3[12];
        double v35 = log(v34 + 1.0);
        v4[12] = (v35 - log(1.0 - v34)) * 0.5;
        double v36 = v3[13];
        double v37 = log(v36 + 1.0);
        v4[13] = (v37 - log(1.0 - v36)) * 0.5;
        double v38 = v3[14];
        double v39 = log(v38 + 1.0);
        v4[14] = (v39 - log(1.0 - v38)) * 0.5;
        double v40 = v3[15];
        double v41 = log(v40 + 1.0);
        v4[15] = (v41 - log(1.0 - v40)) * 0.5;
        v3 += 16;
        v4 += 16;
      }
      while (v3 < v9);
    }
    int v42 = v6 - 1;
    uint64_t v105 = a1;
    unsigned int v43 = 0;
    unsigned int v44 = 0;
    unsigned int v45 = 0;
    unsigned int v46 = 0;
    unsigned int v47 = 0;
    unsigned int v48 = 0;
    unsigned int v49 = 0;
    uint64_t v50 = 0;
    unsigned int v51 = 0;
    unsigned int v52 = 0;
    unsigned int v53 = 0;
    unsigned int v54 = 0;
    unsigned int v55 = 0;
    uint64_t v56 = 0;
    switch(v42)
    {
      case 0:
        goto LABEL_23;
      case 1:
        goto LABEL_22;
      case 2:
        goto LABEL_21;
      case 3:
        goto LABEL_20;
      case 4:
        goto LABEL_19;
      case 5:
        goto LABEL_18;
      case 6:
        goto LABEL_17;
      case 7:
        goto LABEL_16;
      case 8:
        goto LABEL_15;
      case 9:
        goto LABEL_14;
      case 10:
        goto LABEL_13;
      case 11:
        goto LABEL_12;
      case 12:
        goto LABEL_11;
      case 13:
        goto LABEL_10;
      case 14:
        double v57 = *v3;
        double v58 = log(*v3 + 1.0);
        *uint64_t v4 = (v58 - log(1.0 - v57)) * 0.5;
        unsigned int v43 = 1;
LABEL_10:
        uint64_t v59 = v43;
        double v60 = v3[v59];
        unsigned int v61 = v43;
        double v62 = log(v60 + 1.0);
        v4[v59] = (v62 - log(1.0 - v60)) * 0.5;
        unsigned int v44 = v61 + 1;
LABEL_11:
        uint64_t v63 = v44;
        double v64 = v3[v63];
        unsigned int v65 = v44;
        double v66 = log(v64 + 1.0);
        v4[v63] = (v66 - log(1.0 - v64)) * 0.5;
        unsigned int v45 = v65 + 1;
LABEL_12:
        uint64_t v67 = v45;
        double v68 = v3[v67];
        unsigned int v69 = v45;
        double v70 = log(v68 + 1.0);
        v4[v67] = (v70 - log(1.0 - v68)) * 0.5;
        unsigned int v46 = v69 + 1;
LABEL_13:
        uint64_t v71 = v46;
        double v72 = v3[v71];
        unsigned int v73 = v46;
        double v74 = log(v72 + 1.0);
        v4[v71] = (v74 - log(1.0 - v72)) * 0.5;
        unsigned int v47 = v73 + 1;
LABEL_14:
        uint64_t v75 = v47;
        double v76 = v3[v75];
        unsigned int v77 = v47;
        double v78 = log(v76 + 1.0);
        v4[v75] = (v78 - log(1.0 - v76)) * 0.5;
        unsigned int v48 = v77 + 1;
LABEL_15:
        uint64_t v79 = v48;
        double v80 = v3[v79];
        double v81 = log(v80 + 1.0);
        v4[v79] = (v81 - log(1.0 - v80)) * 0.5;
        unsigned int v49 = v48 + 1;
LABEL_16:
        uint64_t v50 = 8 * v49;
        double v82 = *(double *)((char *)v3 + v50);
        double v83 = log(v82 + 1.0);
        *(long double *)((char *)v4 + v50) = (v83 - log(1.0 - v82)) * 0.5;
        LODWORD(v50) = v49 + 1;
LABEL_17:
        uint64_t v84 = v50;
        double v85 = v3[v84];
        double v86 = log(v85 + 1.0);
        v4[v84] = (v86 - log(1.0 - v85)) * 0.5;
        unsigned int v51 = v50 + 1;
LABEL_18:
        uint64_t v87 = v51;
        double v88 = v3[v87];
        double v89 = log(v88 + 1.0);
        v4[v87] = (v89 - log(1.0 - v88)) * 0.5;
        unsigned int v52 = v51 + 1;
LABEL_19:
        uint64_t v90 = v52;
        double v91 = v3[v90];
        double v92 = log(v91 + 1.0);
        v4[v90] = (v92 - log(1.0 - v91)) * 0.5;
        unsigned int v53 = v52 + 1;
LABEL_20:
        uint64_t v93 = v53;
        double v94 = v3[v93];
        double v95 = log(v94 + 1.0);
        v4[v93] = (v95 - log(1.0 - v94)) * 0.5;
        unsigned int v54 = v53 + 1;
LABEL_21:
        uint64_t v96 = v54;
        double v97 = v3[v96];
        double v98 = log(v97 + 1.0);
        v4[v96] = (v98 - log(1.0 - v97)) * 0.5;
        unsigned int v55 = v54 + 1;
LABEL_22:
        uint64_t v99 = v55;
        double v100 = v3[v99];
        double v101 = log(v100 + 1.0);
        v4[v99] = (v101 - log(1.0 - v100)) * 0.5;
        uint64_t v56 = v55 + 1;
LABEL_23:
        uint64_t v102 = v56;
        double v103 = v3[v56];
        double v104 = log(v103 + 1.0);
        v4[v102] = (v104 - log(1.0 - v103)) * 0.5;
        uint64_t v50 = v105;
        break;
      default:
        return (*(uint64_t (**)(uint64_t))(*(void *)v50 + 72))(v50);
    }
    return (*(uint64_t (**)(uint64_t))(*(void *)v50 + 72))(v50);
  }
  return result;
}

uint64_t sub_E8A30()
{
  return 141;
}

uint64_t sub_E8A38(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_E8A40(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_E8A48(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_E8A88(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_E8A90(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_E8A98(uint64_t a1)
{
  return sub_E8B3C(a1 - 32);
}

void sub_E8AA0(uint64_t a1)
{
  sub_E8B3C(a1 - 32);

  operator delete();
}

uint64_t sub_E8ADC(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 32) + 72))() + 8);
}

uint64_t sub_E8B1C(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_E8B24(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_E8B2C(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_E8B34(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_E8B3C(uint64_t a1)
{
  *(void *)a1 = off_2401218;
  *(void *)(a1 + 32) = off_2401278;
  if (*(void *)(a1 + 48)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 64) = 0;
  }
  *(void *)a1 = off_23FFC00;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_E8C98(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *(void *)a1 = off_23FFC00;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = a3;
  if (a3) {
    BOOL v5 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
  }
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
  else {
    BOOL v5 = 1;
  }
  *(unsigned char *)(a1 + 24) = v5;
  *(void *)a1 = off_2401300;
  *(void *)(a1 + 32) = off_2401360;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  operator new();
}

void sub_E92D0(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_E08A0(v1);
  _Unwind_Resume(a1);
}

void sub_E9378(uint64_t a1)
{
  sub_E9898(a1);

  operator delete();
}

double sub_E93B0(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 40);
  if (!v2) {
    return NAN;
  }
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 64))(v2) + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v5) << 32;
  if (v7 >= 1)
  {
    int64_t v8 = (double *)((char *)v3 + (v7 >> 29));
    do
    {
      *uint64_t v4 = ceil(*v3);
      v4[1] = ceil(v3[1]);
      v4[2] = ceil(v3[2]);
      v4[3] = ceil(v3[3]);
      v4[4] = ceil(v3[4]);
      v4[5] = ceil(v3[5]);
      v4[6] = ceil(v3[6]);
      v4[7] = ceil(v3[7]);
      v4[8] = ceil(v3[8]);
      v4[9] = ceil(v3[9]);
      v4[10] = ceil(v3[10]);
      v4[11] = ceil(v3[11]);
      v4[12] = ceil(v3[12]);
      v4[13] = ceil(v3[13]);
      v4[14] = ceil(v3[14]);
      v4[15] = ceil(v3[15]);
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v8);
  }
  int v9 = (v5 & 0xF) - 1;
  unsigned int v10 = 0;
  unsigned int v11 = 0;
  unsigned int v12 = 0;
  unsigned int v13 = 0;
  unsigned int v14 = 0;
  unsigned int v15 = 0;
  unsigned int v16 = 0;
  unsigned int v17 = 0;
  unsigned int v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  switch(v9)
  {
    case 0:
      goto LABEL_23;
    case 1:
      goto LABEL_22;
    case 2:
      goto LABEL_21;
    case 3:
      goto LABEL_20;
    case 4:
      goto LABEL_19;
    case 5:
      goto LABEL_18;
    case 6:
      goto LABEL_17;
    case 7:
      goto LABEL_16;
    case 8:
      goto LABEL_15;
    case 9:
      goto LABEL_14;
    case 10:
      goto LABEL_13;
    case 11:
      goto LABEL_12;
    case 12:
      goto LABEL_11;
    case 13:
      goto LABEL_10;
    case 14:
      *uint64_t v4 = ceil(*v3);
      unsigned int v10 = 1;
LABEL_10:
      v4[v10] = ceil(v3[v10]);
      unsigned int v11 = v10 + 1;
LABEL_11:
      v4[v11] = ceil(v3[v11]);
      unsigned int v12 = v11 + 1;
LABEL_12:
      v4[v12] = ceil(v3[v12]);
      unsigned int v13 = v12 + 1;
LABEL_13:
      v4[v13] = ceil(v3[v13]);
      unsigned int v14 = v13 + 1;
LABEL_14:
      v4[v14] = ceil(v3[v14]);
      unsigned int v15 = v14 + 1;
LABEL_15:
      v4[v15] = ceil(v3[v15]);
      unsigned int v16 = v15 + 1;
LABEL_16:
      v4[v16] = ceil(v3[v16]);
      unsigned int v17 = v16 + 1;
LABEL_17:
      v4[v17] = ceil(v3[v17]);
      unsigned int v18 = v17 + 1;
LABEL_18:
      v4[v18] = ceil(v3[v18]);
      uint64_t v19 = v18 + 1;
LABEL_19:
      v4[v19] = ceil(v3[v19]);
      uint64_t v20 = (v19 + 1);
LABEL_20:
      v4[v20] = ceil(v3[v20]);
      uint64_t v21 = (v20 + 1);
LABEL_21:
      v4[v21] = ceil(v3[v21]);
      uint64_t v22 = (v21 + 1);
LABEL_22:
      v4[v22] = ceil(v3[v22]);
      uint64_t v23 = (v22 + 1);
LABEL_23:
      v4[v23] = ceil(v3[v23]);
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v19, v20, v21, v22, v23)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v19, v20, v21, v22, v23)+ 16);
}

uint64_t sub_E978C()
{
  return 141;
}

uint64_t sub_E9794(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_E979C(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_E97A4(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_E97E4(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_E97EC(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_E97F4(uint64_t a1)
{
  return sub_E9898(a1 - 32);
}

void sub_E97FC(uint64_t a1)
{
  sub_E9898(a1 - 32);

  operator delete();
}

uint64_t sub_E9838(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 32) + 72))() + 8);
}

uint64_t sub_E9878(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_E9880(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_E9888(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_E9890(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_E9898(uint64_t a1)
{
  *(void *)a1 = off_2401300;
  *(void *)(a1 + 32) = off_2401360;
  if (*(void *)(a1 + 48)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 64) = 0;
  }
  *(void *)a1 = off_23FFC00;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_E99F4(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *(void *)a1 = off_23FFC00;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = a3;
  if (a3) {
    BOOL v5 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
  }
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
  else {
    BOOL v5 = 1;
  }
  *(unsigned char *)(a1 + 24) = v5;
  *(void *)a1 = off_24013E8;
  *(void *)(a1 + 32) = off_2401448;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  operator new();
}

void sub_EA02C(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_E08A0(v1);
  _Unwind_Resume(a1);
}

void sub_EA0D4(uint64_t a1)
{
  sub_EA624(a1);

  operator delete();
}

double sub_EA10C(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 40);
  if (!v2) {
    return NAN;
  }
  uint64_t v3 = *(long double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 64))(v2) + 16);
  uint64_t v4 = *(long double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  int v6 = v5 & 0xF;
  if ((v5 & 0xF) != 0) {
    int v7 = -16;
  }
  else {
    int v7 = 0;
  }
  int64_t v8 = (unint64_t)(v7 + v5) << 32;
  if (v8 >= 1)
  {
    int v9 = (long double *)((char *)v3 + (v8 >> 29));
    do
    {
      *uint64_t v4 = cos(*v3);
      v4[1] = cos(v3[1]);
      v4[2] = cos(v3[2]);
      v4[3] = cos(v3[3]);
      v4[4] = cos(v3[4]);
      v4[5] = cos(v3[5]);
      v4[6] = cos(v3[6]);
      v4[7] = cos(v3[7]);
      v4[8] = cos(v3[8]);
      v4[9] = cos(v3[9]);
      v4[10] = cos(v3[10]);
      v4[11] = cos(v3[11]);
      v4[12] = cos(v3[12]);
      v4[13] = cos(v3[13]);
      v4[14] = cos(v3[14]);
      v4[15] = cos(v3[15]);
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v9);
  }
  int v10 = v6 - 1;
  uint64_t v31 = a1;
  unsigned int v11 = 0;
  unsigned int v12 = 0;
  unsigned int v13 = 0;
  unsigned int v14 = 0;
  unsigned int v15 = 0;
  int v16 = 0;
  int v17 = 0;
  int v18 = 0;
  int v19 = 0;
  uint64_t v20 = 0;
  int v21 = 0;
  int v22 = 0;
  int v23 = 0;
  uint64_t v24 = 0;
  switch(v10)
  {
    case 0:
      goto LABEL_23;
    case 1:
      goto LABEL_22;
    case 2:
      goto LABEL_21;
    case 3:
      goto LABEL_20;
    case 4:
      goto LABEL_19;
    case 5:
      goto LABEL_18;
    case 6:
      goto LABEL_17;
    case 7:
      goto LABEL_16;
    case 8:
      goto LABEL_15;
    case 9:
      goto LABEL_14;
    case 10:
      goto LABEL_13;
    case 11:
      goto LABEL_12;
    case 12:
      goto LABEL_11;
    case 13:
      goto LABEL_10;
    case 14:
      *uint64_t v4 = cos(*v3);
      unsigned int v11 = 1;
LABEL_10:
      unsigned int v25 = v11;
      v4[v11] = cos(v3[v11]);
      unsigned int v12 = v25 + 1;
LABEL_11:
      unsigned int v26 = v12;
      v4[v12] = cos(v3[v12]);
      unsigned int v13 = v26 + 1;
LABEL_12:
      unsigned int v27 = v13;
      v4[v13] = cos(v3[v13]);
      unsigned int v14 = v27 + 1;
LABEL_13:
      unsigned int v28 = v14;
      v4[v14] = cos(v3[v14]);
      unsigned int v15 = v28 + 1;
LABEL_14:
      unsigned int v29 = v15;
      v4[v15] = cos(v3[v15]);
      int v16 = v29 + 1;
LABEL_15:
      v4[v16] = cos(v3[v16]);
      int v17 = v16 + 1;
LABEL_16:
      v4[v17] = cos(v3[v17]);
      int v18 = v17 + 1;
LABEL_17:
      v4[v18] = cos(v3[v18]);
      int v19 = v18 + 1;
LABEL_18:
      v4[v19] = cos(v3[v19]);
      LODWORD(v20) = v19 + 1;
LABEL_19:
      v4[v20] = cos(v3[v20]);
      int v21 = v20 + 1;
LABEL_20:
      v4[v21] = cos(v3[v21]);
      int v22 = v21 + 1;
LABEL_21:
      v4[v22] = cos(v3[v22]);
      int v23 = v22 + 1;
LABEL_22:
      v4[v23] = cos(v3[v23]);
      uint64_t v24 = (v23 + 1);
LABEL_23:
      v4[v24] = cos(v3[v24]);
      uint64_t v20 = v31;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v20 + 72))(v20) + 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v20 + 72))(v20) + 16);
}

uint64_t sub_EA518()
{
  return 141;
}

uint64_t sub_EA520(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_EA528(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_EA530(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_EA570(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_EA578(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_EA580(uint64_t a1)
{
  return sub_EA624(a1 - 32);
}

void sub_EA588(uint64_t a1)
{
  sub_EA624(a1 - 32);

  operator delete();
}

uint64_t sub_EA5C4(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 32) + 72))() + 8);
}

uint64_t sub_EA604(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_EA60C(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_EA614(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_EA61C(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_EA624(uint64_t a1)
{
  *(void *)a1 = off_24013E8;
  *(void *)(a1 + 32) = off_2401448;
  if (*(void *)(a1 + 48)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 64) = 0;
  }
  *(void *)a1 = off_23FFC00;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_EA780(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *(void *)a1 = off_23FFC00;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = a3;
  if (a3) {
    BOOL v5 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
  }
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
  else {
    BOOL v5 = 1;
  }
  *(unsigned char *)(a1 + 24) = v5;
  *(void *)a1 = off_24014D0;
  *(void *)(a1 + 32) = off_2401530;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  operator new();
}

void sub_EADB8(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_E08A0(v1);
  _Unwind_Resume(a1);
}

void sub_EAE60(uint64_t a1)
{
  sub_EB3B0(a1);

  operator delete();
}

double sub_EAE98(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 40);
  if (!v2) {
    return NAN;
  }
  uint64_t v3 = *(long double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 64))(v2) + 16);
  uint64_t v4 = *(long double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  int v6 = v5 & 0xF;
  if ((v5 & 0xF) != 0) {
    int v7 = -16;
  }
  else {
    int v7 = 0;
  }
  int64_t v8 = (unint64_t)(v7 + v5) << 32;
  if (v8 >= 1)
  {
    int v9 = (long double *)((char *)v3 + (v8 >> 29));
    do
    {
      *uint64_t v4 = cosh(*v3);
      v4[1] = cosh(v3[1]);
      v4[2] = cosh(v3[2]);
      v4[3] = cosh(v3[3]);
      v4[4] = cosh(v3[4]);
      v4[5] = cosh(v3[5]);
      v4[6] = cosh(v3[6]);
      v4[7] = cosh(v3[7]);
      v4[8] = cosh(v3[8]);
      v4[9] = cosh(v3[9]);
      v4[10] = cosh(v3[10]);
      v4[11] = cosh(v3[11]);
      v4[12] = cosh(v3[12]);
      v4[13] = cosh(v3[13]);
      v4[14] = cosh(v3[14]);
      v4[15] = cosh(v3[15]);
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v9);
  }
  int v10 = v6 - 1;
  uint64_t v31 = a1;
  unsigned int v11 = 0;
  unsigned int v12 = 0;
  unsigned int v13 = 0;
  unsigned int v14 = 0;
  unsigned int v15 = 0;
  int v16 = 0;
  int v17 = 0;
  int v18 = 0;
  int v19 = 0;
  uint64_t v20 = 0;
  int v21 = 0;
  int v22 = 0;
  int v23 = 0;
  uint64_t v24 = 0;
  switch(v10)
  {
    case 0:
      goto LABEL_23;
    case 1:
      goto LABEL_22;
    case 2:
      goto LABEL_21;
    case 3:
      goto LABEL_20;
    case 4:
      goto LABEL_19;
    case 5:
      goto LABEL_18;
    case 6:
      goto LABEL_17;
    case 7:
      goto LABEL_16;
    case 8:
      goto LABEL_15;
    case 9:
      goto LABEL_14;
    case 10:
      goto LABEL_13;
    case 11:
      goto LABEL_12;
    case 12:
      goto LABEL_11;
    case 13:
      goto LABEL_10;
    case 14:
      *uint64_t v4 = cosh(*v3);
      unsigned int v11 = 1;
LABEL_10:
      unsigned int v25 = v11;
      v4[v11] = cosh(v3[v11]);
      unsigned int v12 = v25 + 1;
LABEL_11:
      unsigned int v26 = v12;
      v4[v12] = cosh(v3[v12]);
      unsigned int v13 = v26 + 1;
LABEL_12:
      unsigned int v27 = v13;
      v4[v13] = cosh(v3[v13]);
      unsigned int v14 = v27 + 1;
LABEL_13:
      unsigned int v28 = v14;
      v4[v14] = cosh(v3[v14]);
      unsigned int v15 = v28 + 1;
LABEL_14:
      unsigned int v29 = v15;
      v4[v15] = cosh(v3[v15]);
      int v16 = v29 + 1;
LABEL_15:
      v4[v16] = cosh(v3[v16]);
      int v17 = v16 + 1;
LABEL_16:
      v4[v17] = cosh(v3[v17]);
      int v18 = v17 + 1;
LABEL_17:
      v4[v18] = cosh(v3[v18]);
      int v19 = v18 + 1;
LABEL_18:
      v4[v19] = cosh(v3[v19]);
      LODWORD(v20) = v19 + 1;
LABEL_19:
      v4[v20] = cosh(v3[v20]);
      int v21 = v20 + 1;
LABEL_20:
      v4[v21] = cosh(v3[v21]);
      int v22 = v21 + 1;
LABEL_21:
      v4[v22] = cosh(v3[v22]);
      int v23 = v22 + 1;
LABEL_22:
      v4[v23] = cosh(v3[v23]);
      uint64_t v24 = (v23 + 1);
LABEL_23:
      v4[v24] = cosh(v3[v24]);
      uint64_t v20 = v31;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v20 + 72))(v20) + 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v20 + 72))(v20) + 16);
}

uint64_t sub_EB2A4()
{
  return 141;
}

uint64_t sub_EB2AC(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_EB2B4(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_EB2BC(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_EB2FC(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_EB304(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_EB30C(uint64_t a1)
{
  return sub_EB3B0(a1 - 32);
}

void sub_EB314(uint64_t a1)
{
  sub_EB3B0(a1 - 32);

  operator delete();
}

uint64_t sub_EB350(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 32) + 72))() + 8);
}

uint64_t sub_EB390(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_EB398(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_EB3A0(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_EB3A8(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_EB3B0(uint64_t a1)
{
  *(void *)a1 = off_24014D0;
  *(void *)(a1 + 32) = off_2401530;
  if (*(void *)(a1 + 48)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 64) = 0;
  }
  *(void *)a1 = off_23FFC00;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_EB50C(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *(void *)a1 = off_23FFC00;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = a3;
  if (a3) {
    BOOL v5 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
  }
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
  else {
    BOOL v5 = 1;
  }
  *(unsigned char *)(a1 + 24) = v5;
  *(void *)a1 = off_24015B8;
  *(void *)(a1 + 32) = off_2401618;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  operator new();
}

void sub_EBB44(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_E08A0(v1);
  _Unwind_Resume(a1);
}

void sub_EBBEC(uint64_t a1)
{
  sub_EC13C(a1);

  operator delete();
}

double sub_EBC24(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 40);
  if (!v2) {
    return NAN;
  }
  uint64_t v3 = *(long double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 64))(v2) + 16);
  uint64_t v4 = *(long double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  int v6 = v5 & 0xF;
  if ((v5 & 0xF) != 0) {
    int v7 = -16;
  }
  else {
    int v7 = 0;
  }
  int64_t v8 = (unint64_t)(v7 + v5) << 32;
  if (v8 >= 1)
  {
    int v9 = (long double *)((char *)v3 + (v8 >> 29));
    do
    {
      *uint64_t v4 = exp(*v3);
      v4[1] = exp(v3[1]);
      v4[2] = exp(v3[2]);
      v4[3] = exp(v3[3]);
      v4[4] = exp(v3[4]);
      v4[5] = exp(v3[5]);
      v4[6] = exp(v3[6]);
      v4[7] = exp(v3[7]);
      v4[8] = exp(v3[8]);
      v4[9] = exp(v3[9]);
      v4[10] = exp(v3[10]);
      v4[11] = exp(v3[11]);
      v4[12] = exp(v3[12]);
      v4[13] = exp(v3[13]);
      v4[14] = exp(v3[14]);
      v4[15] = exp(v3[15]);
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v9);
  }
  int v10 = v6 - 1;
  uint64_t v31 = a1;
  unsigned int v11 = 0;
  unsigned int v12 = 0;
  unsigned int v13 = 0;
  unsigned int v14 = 0;
  unsigned int v15 = 0;
  int v16 = 0;
  int v17 = 0;
  int v18 = 0;
  int v19 = 0;
  uint64_t v20 = 0;
  int v21 = 0;
  int v22 = 0;
  int v23 = 0;
  uint64_t v24 = 0;
  switch(v10)
  {
    case 0:
      goto LABEL_23;
    case 1:
      goto LABEL_22;
    case 2:
      goto LABEL_21;
    case 3:
      goto LABEL_20;
    case 4:
      goto LABEL_19;
    case 5:
      goto LABEL_18;
    case 6:
      goto LABEL_17;
    case 7:
      goto LABEL_16;
    case 8:
      goto LABEL_15;
    case 9:
      goto LABEL_14;
    case 10:
      goto LABEL_13;
    case 11:
      goto LABEL_12;
    case 12:
      goto LABEL_11;
    case 13:
      goto LABEL_10;
    case 14:
      *uint64_t v4 = exp(*v3);
      unsigned int v11 = 1;
LABEL_10:
      unsigned int v25 = v11;
      v4[v11] = exp(v3[v11]);
      unsigned int v12 = v25 + 1;
LABEL_11:
      unsigned int v26 = v12;
      v4[v12] = exp(v3[v12]);
      unsigned int v13 = v26 + 1;
LABEL_12:
      unsigned int v27 = v13;
      v4[v13] = exp(v3[v13]);
      unsigned int v14 = v27 + 1;
LABEL_13:
      unsigned int v28 = v14;
      v4[v14] = exp(v3[v14]);
      unsigned int v15 = v28 + 1;
LABEL_14:
      unsigned int v29 = v15;
      v4[v15] = exp(v3[v15]);
      int v16 = v29 + 1;
LABEL_15:
      v4[v16] = exp(v3[v16]);
      int v17 = v16 + 1;
LABEL_16:
      v4[v17] = exp(v3[v17]);
      int v18 = v17 + 1;
LABEL_17:
      v4[v18] = exp(v3[v18]);
      int v19 = v18 + 1;
LABEL_18:
      v4[v19] = exp(v3[v19]);
      LODWORD(v20) = v19 + 1;
LABEL_19:
      v4[v20] = exp(v3[v20]);
      int v21 = v20 + 1;
LABEL_20:
      v4[v21] = exp(v3[v21]);
      int v22 = v21 + 1;
LABEL_21:
      v4[v22] = exp(v3[v22]);
      int v23 = v22 + 1;
LABEL_22:
      v4[v23] = exp(v3[v23]);
      uint64_t v24 = (v23 + 1);
LABEL_23:
      v4[v24] = exp(v3[v24]);
      uint64_t v20 = v31;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v20 + 72))(v20) + 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v20 + 72))(v20) + 16);
}

uint64_t sub_EC030()
{
  return 141;
}

uint64_t sub_EC038(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_EC040(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_EC048(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_EC088(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_EC090(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_EC098(uint64_t a1)
{
  return sub_EC13C(a1 - 32);
}

void sub_EC0A0(uint64_t a1)
{
  sub_EC13C(a1 - 32);

  operator delete();
}

uint64_t sub_EC0DC(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 32) + 72))() + 8);
}

uint64_t sub_EC11C(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_EC124(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_EC12C(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_EC134(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_EC13C(uint64_t a1)
{
  *(void *)a1 = off_24015B8;
  *(void *)(a1 + 32) = off_2401618;
  if (*(void *)(a1 + 48)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 64) = 0;
  }
  *(void *)a1 = off_23FFC00;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_EC298(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *(void *)a1 = off_23FFC00;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = a3;
  if (a3) {
    BOOL v5 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
  }
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
  else {
    BOOL v5 = 1;
  }
  *(unsigned char *)(a1 + 24) = v5;
  *(void *)a1 = off_24016A0;
  *(void *)(a1 + 32) = off_2401700;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  operator new();
}

void sub_EC8D0(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_E08A0(v1);
  _Unwind_Resume(a1);
}

void sub_EC978(uint64_t a1)
{
  sub_ED414(a1);

  operator delete();
}

uint64_t sub_EC9B0(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)result + 64))(result) + 16);
    uint64_t v4 = *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    int v6 = v5 & 0xF;
    if ((v5 & 0xF) != 0) {
      int v7 = -16;
    }
    else {
      int v7 = 0;
    }
    int64_t v8 = (unint64_t)(v7 + v5) << 32;
    if (v8 >= 1)
    {
      int v9 = (double *)((char *)v3 + (v8 >> 29));
      do
      {
        while (1)
        {
          long double v10 = *v3;
          double v11 = -*v3;
          if (*v3 >= 0.0) {
            double v11 = *v3;
          }
          if (v11 >= 0.00001) {
            double v12 = exp(v10) + -1.0;
          }
          else {
            double v12 = v10 + v10 * (v10 * 0.5);
          }
          *(double *)uint64_t v4 = v12;
          long double v13 = v3[1];
          double v14 = -v13;
          if (v13 >= 0.0) {
            double v14 = v3[1];
          }
          if (v14 >= 0.00001) {
            double v15 = exp(v13) + -1.0;
          }
          else {
            double v15 = v13 + v13 * (v13 * 0.5);
          }
          *(double *)(v4 + 8) = v15;
          long double v16 = v3[2];
          double v17 = -v16;
          if (v16 >= 0.0) {
            double v17 = v3[2];
          }
          if (v17 >= 0.00001) {
            double v18 = exp(v16) + -1.0;
          }
          else {
            double v18 = v16 + v16 * (v16 * 0.5);
          }
          *(double *)(v4 + 16) = v18;
          long double v19 = v3[3];
          double v20 = -v19;
          if (v19 >= 0.0) {
            double v20 = v3[3];
          }
          if (v20 >= 0.00001) {
            double v21 = exp(v19) + -1.0;
          }
          else {
            double v21 = v19 + v19 * (v19 * 0.5);
          }
          *(double *)(v4 + 24) = v21;
          long double v22 = v3[4];
          double v23 = -v22;
          if (v22 >= 0.0) {
            double v23 = v3[4];
          }
          if (v23 >= 0.00001) {
            double v24 = exp(v22) + -1.0;
          }
          else {
            double v24 = v22 + v22 * (v22 * 0.5);
          }
          *(double *)(v4 + 32) = v24;
          long double v25 = v3[5];
          double v26 = -v25;
          if (v25 >= 0.0) {
            double v26 = v3[5];
          }
          if (v26 >= 0.00001) {
            double v27 = exp(v25) + -1.0;
          }
          else {
            double v27 = v25 + v25 * (v25 * 0.5);
          }
          *(double *)(v4 + 40) = v27;
          long double v28 = v3[6];
          double v29 = -v28;
          if (v28 >= 0.0) {
            double v29 = v3[6];
          }
          if (v29 >= 0.00001) {
            double v30 = exp(v28) + -1.0;
          }
          else {
            double v30 = v28 + v28 * (v28 * 0.5);
          }
          *(double *)(v4 + 48) = v30;
          long double v31 = v3[7];
          double v32 = -v31;
          if (v31 >= 0.0) {
            double v32 = v3[7];
          }
          if (v32 >= 0.00001) {
            double v33 = exp(v31) + -1.0;
          }
          else {
            double v33 = v31 + v31 * (v31 * 0.5);
          }
          *(double *)(v4 + 56) = v33;
          long double v34 = v3[8];
          double v35 = -v34;
          if (v34 >= 0.0) {
            double v35 = v3[8];
          }
          if (v35 >= 0.00001) {
            double v36 = exp(v34) + -1.0;
          }
          else {
            double v36 = v34 + v34 * (v34 * 0.5);
          }
          *(double *)(v4 + 64) = v36;
          long double v37 = v3[9];
          double v38 = -v37;
          if (v37 >= 0.0) {
            double v38 = v3[9];
          }
          if (v38 >= 0.00001) {
            double v39 = exp(v37) + -1.0;
          }
          else {
            double v39 = v37 + v37 * (v37 * 0.5);
          }
          *(double *)(v4 + 72) = v39;
          long double v40 = v3[10];
          double v41 = -v40;
          if (v40 >= 0.0) {
            double v41 = v3[10];
          }
          if (v41 >= 0.00001) {
            double v42 = exp(v40) + -1.0;
          }
          else {
            double v42 = v40 + v40 * (v40 * 0.5);
          }
          *(double *)(v4 + 80) = v42;
          long double v43 = v3[11];
          double v44 = -v43;
          if (v43 >= 0.0) {
            double v44 = v3[11];
          }
          if (v44 >= 0.00001) {
            double v45 = exp(v43) + -1.0;
          }
          else {
            double v45 = v43 + v43 * (v43 * 0.5);
          }
          *(double *)(v4 + 88) = v45;
          long double v46 = v3[12];
          double v47 = -v46;
          if (v46 >= 0.0) {
            double v47 = v3[12];
          }
          if (v47 >= 0.00001) {
            double v48 = exp(v46) + -1.0;
          }
          else {
            double v48 = v46 + v46 * (v46 * 0.5);
          }
          *(double *)(v4 + 96) = v48;
          long double v49 = v3[13];
          double v50 = -v49;
          if (v49 >= 0.0) {
            double v50 = v3[13];
          }
          if (v50 >= 0.00001) {
            double v51 = exp(v49) + -1.0;
          }
          else {
            double v51 = v49 + v49 * (v49 * 0.5);
          }
          *(double *)(v4 + 104) = v51;
          long double v52 = v3[14];
          double v53 = -v52;
          if (v52 >= 0.0) {
            double v53 = v3[14];
          }
          if (v53 >= 0.00001) {
            double v54 = exp(v52) + -1.0;
          }
          else {
            double v54 = v52 + v52 * (v52 * 0.5);
          }
          *(double *)(v4 + 112) = v54;
          long double v55 = v3[15];
          double v56 = -v55;
          if (v55 >= 0.0) {
            double v56 = v3[15];
          }
          if (v56 < 0.00001) {
            break;
          }
          *(long double *)(v4 + 120) = exp(v55) + -1.0;
          v3 += 16;
          v4 += 128;
          if (v3 >= v9) {
            goto LABEL_87;
          }
        }
        *(long double *)(v4 + 120) = v55 + v55 * (v55 * 0.5);
        v3 += 16;
        v4 += 128;
      }
      while (v3 < v9);
    }
LABEL_87:
    int v57 = v6 - 1;
    unsigned int v58 = 0;
    unsigned int v59 = 0;
    unsigned int v60 = 0;
    unsigned int v61 = 0;
    unsigned int v62 = 0;
    unsigned int v63 = 0;
    unsigned int v64 = 0;
    unsigned int v65 = 0;
    unsigned int v66 = 0;
    uint64_t v67 = 0;
    uint64_t v68 = 0;
    uint64_t v69 = 0;
    uint64_t v70 = 0;
    uint64_t v71 = 0;
    switch(v57)
    {
      case 0:
        goto LABEL_173;
      case 1:
        goto LABEL_167;
      case 2:
        goto LABEL_161;
      case 3:
        goto LABEL_155;
      case 4:
        goto LABEL_149;
      case 5:
        goto LABEL_143;
      case 6:
        goto LABEL_137;
      case 7:
        goto LABEL_131;
      case 8:
        goto LABEL_125;
      case 9:
        goto LABEL_119;
      case 10:
        goto LABEL_113;
      case 11:
        goto LABEL_107;
      case 12:
        goto LABEL_101;
      case 13:
        goto LABEL_95;
      case 14:
        long double v72 = *v3;
        double v73 = -*v3;
        if (*v3 >= 0.0) {
          double v73 = *v3;
        }
        if (v73 >= 0.00001)
        {
          long double v72 = exp(v72);
          double v74 = -1.0;
        }
        else
        {
          double v74 = v72 * (v72 * 0.5);
        }
        *(long double *)uint64_t v4 = v72 + v74;
        unsigned int v58 = 1;
LABEL_95:
        long double v75 = v3[v58];
        uint64_t v76 = v58;
        double v77 = -v75;
        if (v75 >= 0.0) {
          double v77 = v3[v58];
        }
        if (v77 >= 0.00001)
        {
          long double v75 = exp(v75);
          double v78 = -1.0;
        }
        else
        {
          double v78 = v75 * (v75 * 0.5);
        }
        *(long double *)(v4 + 8 * v76) = v75 + v78;
        unsigned int v59 = v76 + 1;
LABEL_101:
        long double v79 = v3[v59];
        uint64_t v80 = v59;
        double v81 = -v79;
        if (v79 >= 0.0) {
          double v81 = v3[v59];
        }
        if (v81 >= 0.00001)
        {
          long double v79 = exp(v79);
          double v82 = -1.0;
        }
        else
        {
          double v82 = v79 * (v79 * 0.5);
        }
        *(long double *)(v4 + 8 * v80) = v79 + v82;
        unsigned int v60 = v80 + 1;
LABEL_107:
        long double v83 = v3[v60];
        uint64_t v84 = v60;
        double v85 = -v83;
        if (v83 >= 0.0) {
          double v85 = v3[v60];
        }
        if (v85 >= 0.00001)
        {
          long double v83 = exp(v83);
          double v86 = -1.0;
        }
        else
        {
          double v86 = v83 * (v83 * 0.5);
        }
        *(long double *)(v4 + 8 * v84) = v83 + v86;
        unsigned int v61 = v84 + 1;
LABEL_113:
        long double v87 = v3[v61];
        uint64_t v88 = v61;
        double v89 = -v87;
        if (v87 >= 0.0) {
          double v89 = v3[v61];
        }
        if (v89 >= 0.00001)
        {
          long double v87 = exp(v87);
          double v90 = -1.0;
        }
        else
        {
          double v90 = v87 * (v87 * 0.5);
        }
        *(long double *)(v4 + 8 * v88) = v87 + v90;
        unsigned int v62 = v88 + 1;
LABEL_119:
        long double v91 = v3[v62];
        uint64_t v92 = v62;
        double v93 = -v91;
        if (v91 >= 0.0) {
          double v93 = v3[v62];
        }
        if (v93 >= 0.00001)
        {
          long double v91 = exp(v91);
          double v94 = -1.0;
        }
        else
        {
          double v94 = v91 * (v91 * 0.5);
        }
        *(long double *)(v4 + 8 * v92) = v91 + v94;
        unsigned int v63 = v92 + 1;
LABEL_125:
        long double v95 = v3[v63];
        uint64_t v96 = v63;
        double v97 = -v95;
        if (v95 >= 0.0) {
          double v97 = v3[v63];
        }
        if (v97 >= 0.00001)
        {
          long double v95 = exp(v95);
          double v98 = -1.0;
        }
        else
        {
          double v98 = v95 * (v95 * 0.5);
        }
        *(long double *)(v4 + 8 * v96) = v95 + v98;
        unsigned int v64 = v96 + 1;
LABEL_131:
        long double v99 = v3[v64];
        uint64_t v100 = v64;
        double v101 = -v99;
        if (v99 >= 0.0) {
          double v101 = v3[v64];
        }
        if (v101 >= 0.00001)
        {
          long double v99 = exp(v99);
          double v102 = -1.0;
        }
        else
        {
          double v102 = v99 * (v99 * 0.5);
        }
        *(long double *)(v4 + 8 * v100) = v99 + v102;
        unsigned int v65 = v100 + 1;
LABEL_137:
        long double v103 = v3[v65];
        uint64_t v104 = v65;
        double v105 = -v103;
        if (v103 >= 0.0) {
          double v105 = v3[v65];
        }
        if (v105 >= 0.00001)
        {
          long double v103 = exp(v103);
          double v106 = -1.0;
        }
        else
        {
          double v106 = v103 * (v103 * 0.5);
        }
        *(long double *)(v4 + 8 * v104) = v103 + v106;
        unsigned int v66 = v104 + 1;
LABEL_143:
        long double v107 = v3[v66];
        uint64_t v108 = v66;
        double v109 = -v107;
        if (v107 >= 0.0) {
          double v109 = v3[v66];
        }
        if (v109 >= 0.00001)
        {
          long double v107 = exp(v107);
          double v110 = -1.0;
        }
        else
        {
          double v110 = v107 * (v107 * 0.5);
        }
        *(long double *)(v4 + 8 * v108) = v107 + v110;
        uint64_t v67 = (v108 + 1);
LABEL_149:
        long double v111 = v3[v67];
        uint64_t v112 = v67;
        double v113 = -v111;
        if (v111 >= 0.0) {
          double v113 = v3[v67];
        }
        if (v113 >= 0.00001)
        {
          long double v111 = exp(v111);
          double v114 = -1.0;
        }
        else
        {
          double v114 = v111 * (v111 * 0.5);
        }
        *(long double *)(v4 + 8 * v112) = v111 + v114;
        uint64_t v68 = (v112 + 1);
LABEL_155:
        long double v115 = v3[v68];
        uint64_t v116 = v68;
        double v117 = -v115;
        if (v115 >= 0.0) {
          double v117 = v3[v68];
        }
        if (v117 >= 0.00001)
        {
          long double v115 = exp(v115);
          double v118 = -1.0;
        }
        else
        {
          double v118 = v115 * (v115 * 0.5);
        }
        *(long double *)(v4 + 8 * v116) = v115 + v118;
        uint64_t v69 = (v116 + 1);
LABEL_161:
        long double v119 = v3[v69];
        uint64_t v120 = v69;
        double v121 = -v119;
        if (v119 >= 0.0) {
          double v121 = v3[v69];
        }
        if (v121 >= 0.00001)
        {
          long double v119 = exp(v119);
          double v122 = -1.0;
        }
        else
        {
          double v122 = v119 * (v119 * 0.5);
        }
        *(long double *)(v4 + 8 * v120) = v119 + v122;
        uint64_t v70 = (v120 + 1);
LABEL_167:
        long double v123 = v3[v70];
        uint64_t v124 = v70;
        double v125 = -v123;
        if (v123 >= 0.0) {
          double v125 = v3[v70];
        }
        if (v125 >= 0.00001)
        {
          long double v123 = exp(v123);
          double v126 = -1.0;
        }
        else
        {
          double v126 = v123 * (v123 * 0.5);
        }
        *(long double *)(v4 + 8 * v124) = v123 + v126;
        uint64_t v71 = (v124 + 1);
LABEL_173:
        long double v127 = v3[v71];
        double v128 = -v127;
        if (v127 >= 0.0) {
          double v128 = v3[v71];
        }
        if (v128 >= 0.00001)
        {
          long double v127 = exp(v127);
          double v129 = -1.0;
        }
        else
        {
          double v129 = v127 * (v127 * 0.5);
        }
        *(long double *)(v4 + 8 * v71) = v127 + v129;
        break;
      default:
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v67, v68, v69, v70);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v67, v68, v69, v70);
  }
  return result;
}

uint64_t sub_ED308()
{
  return 141;
}

uint64_t sub_ED310(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_ED318(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_ED320(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_ED360(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_ED368(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_ED370(uint64_t a1)
{
  return sub_ED414(a1 - 32);
}

void sub_ED378(uint64_t a1)
{
  sub_ED414(a1 - 32);

  operator delete();
}

uint64_t sub_ED3B4(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 32) + 72))() + 8);
}

uint64_t sub_ED3F4(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_ED3FC(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_ED404(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_ED40C(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_ED414(uint64_t a1)
{
  *(void *)a1 = off_24016A0;
  *(void *)(a1 + 32) = off_2401700;
  if (*(void *)(a1 + 48)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 64) = 0;
  }
  *(void *)a1 = off_23FFC00;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_ED570(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *(void *)a1 = off_23FFC00;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = a3;
  if (a3) {
    BOOL v5 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
  }
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
  else {
    BOOL v5 = 1;
  }
  *(unsigned char *)(a1 + 24) = v5;
  *(void *)a1 = off_2401788;
  *(void *)(a1 + 32) = off_24017E8;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  operator new();
}

void sub_EDBA8(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_E08A0(v1);
  _Unwind_Resume(a1);
}

void sub_EDC50(uint64_t a1)
{
  sub_EE170(a1);

  operator delete();
}

double sub_EDC88(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 40);
  if (!v2) {
    return NAN;
  }
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 64))(v2) + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v5) << 32;
  if (v7 >= 1)
  {
    int64_t v8 = (double *)((char *)v3 + (v7 >> 29));
    do
    {
      *uint64_t v4 = floor(*v3);
      v4[1] = floor(v3[1]);
      v4[2] = floor(v3[2]);
      v4[3] = floor(v3[3]);
      v4[4] = floor(v3[4]);
      v4[5] = floor(v3[5]);
      v4[6] = floor(v3[6]);
      v4[7] = floor(v3[7]);
      v4[8] = floor(v3[8]);
      v4[9] = floor(v3[9]);
      v4[10] = floor(v3[10]);
      v4[11] = floor(v3[11]);
      v4[12] = floor(v3[12]);
      v4[13] = floor(v3[13]);
      v4[14] = floor(v3[14]);
      v4[15] = floor(v3[15]);
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v8);
  }
  int v9 = (v5 & 0xF) - 1;
  unsigned int v10 = 0;
  unsigned int v11 = 0;
  unsigned int v12 = 0;
  unsigned int v13 = 0;
  unsigned int v14 = 0;
  unsigned int v15 = 0;
  unsigned int v16 = 0;
  unsigned int v17 = 0;
  unsigned int v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  switch(v9)
  {
    case 0:
      goto LABEL_23;
    case 1:
      goto LABEL_22;
    case 2:
      goto LABEL_21;
    case 3:
      goto LABEL_20;
    case 4:
      goto LABEL_19;
    case 5:
      goto LABEL_18;
    case 6:
      goto LABEL_17;
    case 7:
      goto LABEL_16;
    case 8:
      goto LABEL_15;
    case 9:
      goto LABEL_14;
    case 10:
      goto LABEL_13;
    case 11:
      goto LABEL_12;
    case 12:
      goto LABEL_11;
    case 13:
      goto LABEL_10;
    case 14:
      *uint64_t v4 = floor(*v3);
      unsigned int v10 = 1;
LABEL_10:
      v4[v10] = floor(v3[v10]);
      unsigned int v11 = v10 + 1;
LABEL_11:
      v4[v11] = floor(v3[v11]);
      unsigned int v12 = v11 + 1;
LABEL_12:
      v4[v12] = floor(v3[v12]);
      unsigned int v13 = v12 + 1;
LABEL_13:
      v4[v13] = floor(v3[v13]);
      unsigned int v14 = v13 + 1;
LABEL_14:
      v4[v14] = floor(v3[v14]);
      unsigned int v15 = v14 + 1;
LABEL_15:
      v4[v15] = floor(v3[v15]);
      unsigned int v16 = v15 + 1;
LABEL_16:
      v4[v16] = floor(v3[v16]);
      unsigned int v17 = v16 + 1;
LABEL_17:
      v4[v17] = floor(v3[v17]);
      unsigned int v18 = v17 + 1;
LABEL_18:
      v4[v18] = floor(v3[v18]);
      uint64_t v19 = v18 + 1;
LABEL_19:
      v4[v19] = floor(v3[v19]);
      uint64_t v20 = (v19 + 1);
LABEL_20:
      v4[v20] = floor(v3[v20]);
      uint64_t v21 = (v20 + 1);
LABEL_21:
      v4[v21] = floor(v3[v21]);
      uint64_t v22 = (v21 + 1);
LABEL_22:
      v4[v22] = floor(v3[v22]);
      uint64_t v23 = (v22 + 1);
LABEL_23:
      v4[v23] = floor(v3[v23]);
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v19, v20, v21, v22, v23)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v19, v20, v21, v22, v23)+ 16);
}

uint64_t sub_EE064()
{
  return 141;
}

uint64_t sub_EE06C(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_EE074(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_EE07C(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_EE0BC(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_EE0C4(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_EE0CC(uint64_t a1)
{
  return sub_EE170(a1 - 32);
}

void sub_EE0D4(uint64_t a1)
{
  sub_EE170(a1 - 32);

  operator delete();
}

uint64_t sub_EE110(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 32) + 72))() + 8);
}

uint64_t sub_EE150(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_EE158(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_EE160(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_EE168(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_EE170(uint64_t a1)
{
  *(void *)a1 = off_2401788;
  *(void *)(a1 + 32) = off_24017E8;
  if (*(void *)(a1 + 48)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 64) = 0;
  }
  *(void *)a1 = off_23FFC00;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_EE2CC(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *(void *)a1 = off_23FFC00;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = a3;
  if (a3) {
    BOOL v5 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
  }
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
  else {
    BOOL v5 = 1;
  }
  *(unsigned char *)(a1 + 24) = v5;
  *(void *)a1 = off_2401870;
  *(void *)(a1 + 32) = off_24018D0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  operator new();
}

void sub_EE904(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_E08A0(v1);
  _Unwind_Resume(a1);
}

void sub_EE9AC(uint64_t a1)
{
  sub_EEEFC(a1);

  operator delete();
}

double sub_EE9E4(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 40);
  if (!v2) {
    return NAN;
  }
  uint64_t v3 = *(long double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 64))(v2) + 16);
  uint64_t v4 = *(long double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  int v6 = v5 & 0xF;
  if ((v5 & 0xF) != 0) {
    int v7 = -16;
  }
  else {
    int v7 = 0;
  }
  int64_t v8 = (unint64_t)(v7 + v5) << 32;
  if (v8 >= 1)
  {
    int v9 = (long double *)((char *)v3 + (v8 >> 29));
    do
    {
      *uint64_t v4 = log(*v3);
      v4[1] = log(v3[1]);
      v4[2] = log(v3[2]);
      v4[3] = log(v3[3]);
      v4[4] = log(v3[4]);
      v4[5] = log(v3[5]);
      v4[6] = log(v3[6]);
      v4[7] = log(v3[7]);
      v4[8] = log(v3[8]);
      v4[9] = log(v3[9]);
      v4[10] = log(v3[10]);
      v4[11] = log(v3[11]);
      v4[12] = log(v3[12]);
      v4[13] = log(v3[13]);
      v4[14] = log(v3[14]);
      v4[15] = log(v3[15]);
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v9);
  }
  int v10 = v6 - 1;
  uint64_t v31 = a1;
  unsigned int v11 = 0;
  unsigned int v12 = 0;
  unsigned int v13 = 0;
  unsigned int v14 = 0;
  unsigned int v15 = 0;
  int v16 = 0;
  int v17 = 0;
  int v18 = 0;
  int v19 = 0;
  uint64_t v20 = 0;
  int v21 = 0;
  int v22 = 0;
  int v23 = 0;
  uint64_t v24 = 0;
  switch(v10)
  {
    case 0:
      goto LABEL_23;
    case 1:
      goto LABEL_22;
    case 2:
      goto LABEL_21;
    case 3:
      goto LABEL_20;
    case 4:
      goto LABEL_19;
    case 5:
      goto LABEL_18;
    case 6:
      goto LABEL_17;
    case 7:
      goto LABEL_16;
    case 8:
      goto LABEL_15;
    case 9:
      goto LABEL_14;
    case 10:
      goto LABEL_13;
    case 11:
      goto LABEL_12;
    case 12:
      goto LABEL_11;
    case 13:
      goto LABEL_10;
    case 14:
      *uint64_t v4 = log(*v3);
      unsigned int v11 = 1;
LABEL_10:
      unsigned int v25 = v11;
      v4[v11] = log(v3[v11]);
      unsigned int v12 = v25 + 1;
LABEL_11:
      unsigned int v26 = v12;
      v4[v12] = log(v3[v12]);
      unsigned int v13 = v26 + 1;
LABEL_12:
      unsigned int v27 = v13;
      v4[v13] = log(v3[v13]);
      unsigned int v14 = v27 + 1;
LABEL_13:
      unsigned int v28 = v14;
      v4[v14] = log(v3[v14]);
      unsigned int v15 = v28 + 1;
LABEL_14:
      unsigned int v29 = v15;
      v4[v15] = log(v3[v15]);
      int v16 = v29 + 1;
LABEL_15:
      v4[v16] = log(v3[v16]);
      int v17 = v16 + 1;
LABEL_16:
      v4[v17] = log(v3[v17]);
      int v18 = v17 + 1;
LABEL_17:
      v4[v18] = log(v3[v18]);
      int v19 = v18 + 1;
LABEL_18:
      v4[v19] = log(v3[v19]);
      LODWORD(v20) = v19 + 1;
LABEL_19:
      v4[v20] = log(v3[v20]);
      int v21 = v20 + 1;
LABEL_20:
      v4[v21] = log(v3[v21]);
      int v22 = v21 + 1;
LABEL_21:
      v4[v22] = log(v3[v22]);
      int v23 = v22 + 1;
LABEL_22:
      v4[v23] = log(v3[v23]);
      uint64_t v24 = (v23 + 1);
LABEL_23:
      v4[v24] = log(v3[v24]);
      uint64_t v20 = v31;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v20 + 72))(v20) + 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v20 + 72))(v20) + 16);
}

uint64_t sub_EEDF0()
{
  return 141;
}

uint64_t sub_EEDF8(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_EEE00(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_EEE08(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_EEE48(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_EEE50(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_EEE58(uint64_t a1)
{
  return sub_EEEFC(a1 - 32);
}

void sub_EEE60(uint64_t a1)
{
  sub_EEEFC(a1 - 32);

  operator delete();
}

uint64_t sub_EEE9C(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 32) + 72))() + 8);
}

uint64_t sub_EEEDC(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_EEEE4(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_EEEEC(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_EEEF4(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_EEEFC(uint64_t a1)
{
  *(void *)a1 = off_2401870;
  *(void *)(a1 + 32) = off_24018D0;
  if (*(void *)(a1 + 48)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 64) = 0;
  }
  *(void *)a1 = off_23FFC00;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_EF058(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *(void *)a1 = off_23FFC00;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = a3;
  if (a3) {
    BOOL v5 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
  }
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
  else {
    BOOL v5 = 1;
  }
  *(unsigned char *)(a1 + 24) = v5;
  *(void *)a1 = off_2401958;
  *(void *)(a1 + 32) = off_24019B8;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  operator new();
}

void sub_EF690(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_E08A0(v1);
  _Unwind_Resume(a1);
}

void sub_EF738(uint64_t a1)
{
  sub_EFC88(a1);

  operator delete();
}

double sub_EF770(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 40);
  if (!v2) {
    return NAN;
  }
  uint64_t v3 = *(long double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 64))(v2) + 16);
  uint64_t v4 = *(long double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  int v6 = v5 & 0xF;
  if ((v5 & 0xF) != 0) {
    int v7 = -16;
  }
  else {
    int v7 = 0;
  }
  int64_t v8 = (unint64_t)(v7 + v5) << 32;
  if (v8 >= 1)
  {
    int v9 = (long double *)((char *)v3 + (v8 >> 29));
    do
    {
      *uint64_t v4 = log10(*v3);
      v4[1] = log10(v3[1]);
      v4[2] = log10(v3[2]);
      v4[3] = log10(v3[3]);
      v4[4] = log10(v3[4]);
      v4[5] = log10(v3[5]);
      v4[6] = log10(v3[6]);
      v4[7] = log10(v3[7]);
      v4[8] = log10(v3[8]);
      v4[9] = log10(v3[9]);
      v4[10] = log10(v3[10]);
      v4[11] = log10(v3[11]);
      v4[12] = log10(v3[12]);
      v4[13] = log10(v3[13]);
      v4[14] = log10(v3[14]);
      v4[15] = log10(v3[15]);
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v9);
  }
  int v10 = v6 - 1;
  uint64_t v31 = a1;
  unsigned int v11 = 0;
  unsigned int v12 = 0;
  unsigned int v13 = 0;
  unsigned int v14 = 0;
  unsigned int v15 = 0;
  int v16 = 0;
  int v17 = 0;
  int v18 = 0;
  int v19 = 0;
  uint64_t v20 = 0;
  int v21 = 0;
  int v22 = 0;
  int v23 = 0;
  uint64_t v24 = 0;
  switch(v10)
  {
    case 0:
      goto LABEL_23;
    case 1:
      goto LABEL_22;
    case 2:
      goto LABEL_21;
    case 3:
      goto LABEL_20;
    case 4:
      goto LABEL_19;
    case 5:
      goto LABEL_18;
    case 6:
      goto LABEL_17;
    case 7:
      goto LABEL_16;
    case 8:
      goto LABEL_15;
    case 9:
      goto LABEL_14;
    case 10:
      goto LABEL_13;
    case 11:
      goto LABEL_12;
    case 12:
      goto LABEL_11;
    case 13:
      goto LABEL_10;
    case 14:
      *uint64_t v4 = log10(*v3);
      unsigned int v11 = 1;
LABEL_10:
      unsigned int v25 = v11;
      v4[v11] = log10(v3[v11]);
      unsigned int v12 = v25 + 1;
LABEL_11:
      unsigned int v26 = v12;
      v4[v12] = log10(v3[v12]);
      unsigned int v13 = v26 + 1;
LABEL_12:
      unsigned int v27 = v13;
      v4[v13] = log10(v3[v13]);
      unsigned int v14 = v27 + 1;
LABEL_13:
      unsigned int v28 = v14;
      v4[v14] = log10(v3[v14]);
      unsigned int v15 = v28 + 1;
LABEL_14:
      unsigned int v29 = v15;
      v4[v15] = log10(v3[v15]);
      int v16 = v29 + 1;
LABEL_15:
      v4[v16] = log10(v3[v16]);
      int v17 = v16 + 1;
LABEL_16:
      v4[v17] = log10(v3[v17]);
      int v18 = v17 + 1;
LABEL_17:
      v4[v18] = log10(v3[v18]);
      int v19 = v18 + 1;
LABEL_18:
      v4[v19] = log10(v3[v19]);
      LODWORD(v20) = v19 + 1;
LABEL_19:
      v4[v20] = log10(v3[v20]);
      int v21 = v20 + 1;
LABEL_20:
      v4[v21] = log10(v3[v21]);
      int v22 = v21 + 1;
LABEL_21:
      v4[v22] = log10(v3[v22]);
      int v23 = v22 + 1;
LABEL_22:
      v4[v23] = log10(v3[v23]);
      uint64_t v24 = (v23 + 1);
LABEL_23:
      v4[v24] = log10(v3[v24]);
      uint64_t v20 = v31;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v20 + 72))(v20) + 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v20 + 72))(v20) + 16);
}

uint64_t sub_EFB7C()
{
  return 141;
}

uint64_t sub_EFB84(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_EFB8C(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_EFB94(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_EFBD4(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_EFBDC(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_EFBE4(uint64_t a1)
{
  return sub_EFC88(a1 - 32);
}

void sub_EFBEC(uint64_t a1)
{
  sub_EFC88(a1 - 32);

  operator delete();
}

uint64_t sub_EFC28(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 32) + 72))() + 8);
}

uint64_t sub_EFC68(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_EFC70(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_EFC78(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_EFC80(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_EFC88(uint64_t a1)
{
  *(void *)a1 = off_2401958;
  *(void *)(a1 + 32) = off_24019B8;
  if (*(void *)(a1 + 48)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 64) = 0;
  }
  *(void *)a1 = off_23FFC00;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_EFDE4(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *(void *)a1 = off_23FFC00;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = a3;
  if (a3) {
    BOOL v5 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
  }
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
  else {
    BOOL v5 = 1;
  }
  *(unsigned char *)(a1 + 24) = v5;
  *(void *)a1 = off_2401A40;
  *(void *)(a1 + 32) = off_2401AA0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  operator new();
}

void sub_F041C(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_E08A0(v1);
  _Unwind_Resume(a1);
}

void sub_F04C4(uint64_t a1)
{
  sub_F0B18(a1);

  operator delete();
}

uint64_t sub_F04FC(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    uint64_t v3 = *(long double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)result + 64))(result) + 16);
    uint64_t v4 = *(long double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    int v6 = v5 & 0xF;
    if ((v5 & 0xF) != 0) {
      int v7 = -16;
    }
    else {
      int v7 = 0;
    }
    int64_t v8 = (unint64_t)(v7 + v5) << 32;
    if (v8 >= 1)
    {
      int v9 = (long double *)((char *)v3 + (v8 >> 29));
      do
      {
        *uint64_t v4 = log(*v3) / 0.693147181;
        v4[1] = log(v3[1]) / 0.693147181;
        v4[2] = log(v3[2]) / 0.693147181;
        v4[3] = log(v3[3]) / 0.693147181;
        v4[4] = log(v3[4]) / 0.693147181;
        v4[5] = log(v3[5]) / 0.693147181;
        v4[6] = log(v3[6]) / 0.693147181;
        v4[7] = log(v3[7]) / 0.693147181;
        v4[8] = log(v3[8]) / 0.693147181;
        v4[9] = log(v3[9]) / 0.693147181;
        v4[10] = log(v3[10]) / 0.693147181;
        v4[11] = log(v3[11]) / 0.693147181;
        v4[12] = log(v3[12]) / 0.693147181;
        v4[13] = log(v3[13]) / 0.693147181;
        v4[14] = log(v3[14]) / 0.693147181;
        v4[15] = log(v3[15]) / 0.693147181;
        v3 += 16;
        v4 += 16;
      }
      while (v3 < v9);
    }
    int v10 = v6 - 1;
    uint64_t v30 = a1;
    unsigned int v11 = 0;
    unsigned int v12 = 0;
    unsigned int v13 = 0;
    unsigned int v14 = 0;
    unsigned int v15 = 0;
    int v16 = 0;
    int v17 = 0;
    int v18 = 0;
    int v19 = 0;
    uint64_t v20 = 0;
    int v21 = 0;
    int v22 = 0;
    int v23 = 0;
    uint64_t v24 = 0;
    switch(v10)
    {
      case 0:
        goto LABEL_23;
      case 1:
        goto LABEL_22;
      case 2:
        goto LABEL_21;
      case 3:
        goto LABEL_20;
      case 4:
        goto LABEL_19;
      case 5:
        goto LABEL_18;
      case 6:
        goto LABEL_17;
      case 7:
        goto LABEL_16;
      case 8:
        goto LABEL_15;
      case 9:
        goto LABEL_14;
      case 10:
        goto LABEL_13;
      case 11:
        goto LABEL_12;
      case 12:
        goto LABEL_11;
      case 13:
        goto LABEL_10;
      case 14:
        *uint64_t v4 = log(*v3) / 0.693147181;
        unsigned int v11 = 1;
LABEL_10:
        unsigned int v25 = v11;
        v4[v11] = log(v3[v11]) / 0.693147181;
        unsigned int v12 = v25 + 1;
LABEL_11:
        unsigned int v26 = v12;
        v4[v12] = log(v3[v12]) / 0.693147181;
        unsigned int v13 = v26 + 1;
LABEL_12:
        unsigned int v27 = v13;
        v4[v13] = log(v3[v13]) / 0.693147181;
        unsigned int v14 = v27 + 1;
LABEL_13:
        unsigned int v28 = v14;
        v4[v14] = log(v3[v14]) / 0.693147181;
        unsigned int v15 = v28 + 1;
LABEL_14:
        unsigned int v29 = v15;
        v4[v15] = log(v3[v15]) / 0.693147181;
        int v16 = v29 + 1;
LABEL_15:
        v4[v16] = log(v3[v16]) / 0.693147181;
        int v17 = v16 + 1;
LABEL_16:
        v4[v17] = log(v3[v17]) / 0.693147181;
        int v18 = v17 + 1;
LABEL_17:
        v4[v18] = log(v3[v18]) / 0.693147181;
        int v19 = v18 + 1;
LABEL_18:
        v4[v19] = log(v3[v19]) / 0.693147181;
        LODWORD(v20) = v19 + 1;
LABEL_19:
        v4[v20] = log(v3[v20]) / 0.693147181;
        int v21 = v20 + 1;
LABEL_20:
        v4[v21] = log(v3[v21]) / 0.693147181;
        int v22 = v21 + 1;
LABEL_21:
        v4[v22] = log(v3[v22]) / 0.693147181;
        int v23 = v22 + 1;
LABEL_22:
        v4[v23] = log(v3[v23]) / 0.693147181;
        uint64_t v24 = (v23 + 1);
LABEL_23:
        v4[v24] = log(v3[v24]) / 0.693147181;
        uint64_t v20 = v30;
        break;
      default:
        return (*(uint64_t (**)(uint64_t))(*(void *)v20 + 72))(v20);
    }
    return (*(uint64_t (**)(uint64_t))(*(void *)v20 + 72))(v20);
  }
  return result;
}

uint64_t sub_F0A0C()
{
  return 141;
}

uint64_t sub_F0A14(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_F0A1C(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_F0A24(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_F0A64(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_F0A6C(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_F0A74(uint64_t a1)
{
  return sub_F0B18(a1 - 32);
}

void sub_F0A7C(uint64_t a1)
{
  sub_F0B18(a1 - 32);

  operator delete();
}

uint64_t sub_F0AB8(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 32) + 72))() + 8);
}

uint64_t sub_F0AF8(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_F0B00(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_F0B08(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_F0B10(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_F0B18(uint64_t a1)
{
  *(void *)a1 = off_2401A40;
  *(void *)(a1 + 32) = off_2401AA0;
  if (*(void *)(a1 + 48)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 64) = 0;
  }
  *(void *)a1 = off_23FFC00;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_F0C74(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *(void *)a1 = off_23FFC00;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = a3;
  if (a3) {
    BOOL v5 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
  }
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
  else {
    BOOL v5 = 1;
  }
  *(unsigned char *)(a1 + 24) = v5;
  *(void *)a1 = off_2401B28;
  *(void *)(a1 + 32) = off_2401B88;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  operator new();
}

void sub_F12AC(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_E08A0(v1);
  _Unwind_Resume(a1);
}

void sub_F1354(uint64_t a1)
{
  sub_F22E8(a1);

  operator delete();
}

uint64_t sub_F138C(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)result + 64))(result) + 16);
    uint64_t v4 = *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    int v6 = v5 & 0xF;
    if ((v5 & 0xF) != 0) {
      int v7 = -16;
    }
    else {
      int v7 = 0;
    }
    int64_t v8 = (unint64_t)(v7 + v5) << 32;
    if (v8 >= 1)
    {
      int v9 = (double *)((char *)v3 + (v8 >> 29));
      do
      {
        double v11 = *v3;
        if (*v3 <= -1.0)
        {
          *(void *)uint64_t v4 = 0x7FF8000000000000;
          double v13 = v3[1];
          if (v13 <= -1.0) {
            goto LABEL_22;
          }
        }
        else
        {
          double v12 = -v11;
          if (v11 >= 0.0) {
            double v12 = *v3;
          }
          if (v12 <= 0.0001)
          {
            *(double *)uint64_t v4 = v11 * (v11 * -0.5 + 1.0);
            double v13 = v3[1];
            if (v13 <= -1.0)
            {
LABEL_22:
              *(void *)(v4 + 8) = 0x7FF8000000000000;
              double v15 = v3[2];
              if (v15 <= -1.0) {
                goto LABEL_29;
              }
              goto LABEL_23;
            }
          }
          else
          {
            *(long double *)uint64_t v4 = log(v11 + 1.0);
            double v13 = v3[1];
            if (v13 <= -1.0) {
              goto LABEL_22;
            }
          }
        }
        double v14 = -v13;
        if (v13 >= 0.0) {
          double v14 = v13;
        }
        if (v14 <= 0.0001)
        {
          *(double *)(v4 + 8) = v13 * (v13 * -0.5 + 1.0);
          double v15 = v3[2];
          if (v15 <= -1.0)
          {
LABEL_29:
            *(void *)(v4 + 16) = 0x7FF8000000000000;
            double v17 = v3[3];
            if (v17 <= -1.0) {
              goto LABEL_36;
            }
            goto LABEL_30;
          }
        }
        else
        {
          *(long double *)(v4 + 8) = log(v13 + 1.0);
          double v15 = v3[2];
          if (v15 <= -1.0) {
            goto LABEL_29;
          }
        }
LABEL_23:
        double v16 = -v15;
        if (v15 >= 0.0) {
          double v16 = v15;
        }
        if (v16 <= 0.0001)
        {
          *(double *)(v4 + 16) = v15 * (v15 * -0.5 + 1.0);
          double v17 = v3[3];
          if (v17 <= -1.0)
          {
LABEL_36:
            *(void *)(v4 + 24) = 0x7FF8000000000000;
            double v19 = v3[4];
            if (v19 <= -1.0) {
              goto LABEL_43;
            }
            goto LABEL_37;
          }
        }
        else
        {
          *(long double *)(v4 + 16) = log(v15 + 1.0);
          double v17 = v3[3];
          if (v17 <= -1.0) {
            goto LABEL_36;
          }
        }
LABEL_30:
        double v18 = -v17;
        if (v17 >= 0.0) {
          double v18 = v17;
        }
        if (v18 <= 0.0001)
        {
          *(double *)(v4 + 24) = v17 * (v17 * -0.5 + 1.0);
          double v19 = v3[4];
          if (v19 <= -1.0)
          {
LABEL_43:
            *(void *)(v4 + 32) = 0x7FF8000000000000;
            double v21 = v3[5];
            if (v21 <= -1.0) {
              goto LABEL_50;
            }
            goto LABEL_44;
          }
        }
        else
        {
          *(long double *)(v4 + 24) = log(v17 + 1.0);
          double v19 = v3[4];
          if (v19 <= -1.0) {
            goto LABEL_43;
          }
        }
LABEL_37:
        double v20 = -v19;
        if (v19 >= 0.0) {
          double v20 = v19;
        }
        if (v20 <= 0.0001)
        {
          *(double *)(v4 + 32) = v19 * (v19 * -0.5 + 1.0);
          double v21 = v3[5];
          if (v21 <= -1.0)
          {
LABEL_50:
            *(void *)(v4 + 40) = 0x7FF8000000000000;
            double v23 = v3[6];
            if (v23 <= -1.0) {
              goto LABEL_57;
            }
            goto LABEL_51;
          }
        }
        else
        {
          *(long double *)(v4 + 32) = log(v19 + 1.0);
          double v21 = v3[5];
          if (v21 <= -1.0) {
            goto LABEL_50;
          }
        }
LABEL_44:
        double v22 = -v21;
        if (v21 >= 0.0) {
          double v22 = v21;
        }
        if (v22 <= 0.0001)
        {
          *(double *)(v4 + 40) = v21 * (v21 * -0.5 + 1.0);
          double v23 = v3[6];
          if (v23 <= -1.0)
          {
LABEL_57:
            *(void *)(v4 + 48) = 0x7FF8000000000000;
            double v25 = v3[7];
            if (v25 <= -1.0) {
              goto LABEL_64;
            }
            goto LABEL_58;
          }
        }
        else
        {
          *(long double *)(v4 + 40) = log(v21 + 1.0);
          double v23 = v3[6];
          if (v23 <= -1.0) {
            goto LABEL_57;
          }
        }
LABEL_51:
        double v24 = -v23;
        if (v23 >= 0.0) {
          double v24 = v23;
        }
        if (v24 <= 0.0001)
        {
          *(double *)(v4 + 48) = v23 * (v23 * -0.5 + 1.0);
          double v25 = v3[7];
          if (v25 <= -1.0)
          {
LABEL_64:
            *(void *)(v4 + 56) = 0x7FF8000000000000;
            double v27 = v3[8];
            if (v27 <= -1.0) {
              goto LABEL_71;
            }
            goto LABEL_65;
          }
        }
        else
        {
          *(long double *)(v4 + 48) = log(v23 + 1.0);
          double v25 = v3[7];
          if (v25 <= -1.0) {
            goto LABEL_64;
          }
        }
LABEL_58:
        double v26 = -v25;
        if (v25 >= 0.0) {
          double v26 = v25;
        }
        if (v26 <= 0.0001)
        {
          *(double *)(v4 + 56) = v25 * (v25 * -0.5 + 1.0);
          double v27 = v3[8];
          if (v27 <= -1.0)
          {
LABEL_71:
            *(void *)(v4 + 64) = 0x7FF8000000000000;
            double v29 = v3[9];
            if (v29 <= -1.0) {
              goto LABEL_78;
            }
            goto LABEL_72;
          }
        }
        else
        {
          *(long double *)(v4 + 56) = log(v25 + 1.0);
          double v27 = v3[8];
          if (v27 <= -1.0) {
            goto LABEL_71;
          }
        }
LABEL_65:
        double v28 = -v27;
        if (v27 >= 0.0) {
          double v28 = v27;
        }
        if (v28 <= 0.0001)
        {
          *(double *)(v4 + 64) = v27 * (v27 * -0.5 + 1.0);
          double v29 = v3[9];
          if (v29 <= -1.0)
          {
LABEL_78:
            *(void *)(v4 + 72) = 0x7FF8000000000000;
            double v31 = v3[10];
            if (v31 <= -1.0) {
              goto LABEL_85;
            }
            goto LABEL_79;
          }
        }
        else
        {
          *(long double *)(v4 + 64) = log(v27 + 1.0);
          double v29 = v3[9];
          if (v29 <= -1.0) {
            goto LABEL_78;
          }
        }
LABEL_72:
        double v30 = -v29;
        if (v29 >= 0.0) {
          double v30 = v29;
        }
        if (v30 <= 0.0001)
        {
          *(double *)(v4 + 72) = v29 * (v29 * -0.5 + 1.0);
          double v31 = v3[10];
          if (v31 <= -1.0)
          {
LABEL_85:
            *(void *)(v4 + 80) = 0x7FF8000000000000;
            double v33 = v3[11];
            if (v33 <= -1.0) {
              goto LABEL_92;
            }
            goto LABEL_86;
          }
        }
        else
        {
          *(long double *)(v4 + 72) = log(v29 + 1.0);
          double v31 = v3[10];
          if (v31 <= -1.0) {
            goto LABEL_85;
          }
        }
LABEL_79:
        double v32 = -v31;
        if (v31 >= 0.0) {
          double v32 = v31;
        }
        if (v32 <= 0.0001)
        {
          *(double *)(v4 + 80) = v31 * (v31 * -0.5 + 1.0);
          double v33 = v3[11];
          if (v33 <= -1.0)
          {
LABEL_92:
            *(void *)(v4 + 88) = 0x7FF8000000000000;
            double v35 = v3[12];
            if (v35 <= -1.0) {
              goto LABEL_99;
            }
            goto LABEL_93;
          }
        }
        else
        {
          *(long double *)(v4 + 80) = log(v31 + 1.0);
          double v33 = v3[11];
          if (v33 <= -1.0) {
            goto LABEL_92;
          }
        }
LABEL_86:
        double v34 = -v33;
        if (v33 >= 0.0) {
          double v34 = v33;
        }
        if (v34 <= 0.0001)
        {
          *(double *)(v4 + 88) = v33 * (v33 * -0.5 + 1.0);
          double v35 = v3[12];
          if (v35 <= -1.0)
          {
LABEL_99:
            *(void *)(v4 + 96) = 0x7FF8000000000000;
            double v37 = v3[13];
            if (v37 <= -1.0) {
              goto LABEL_106;
            }
            goto LABEL_100;
          }
        }
        else
        {
          *(long double *)(v4 + 88) = log(v33 + 1.0);
          double v35 = v3[12];
          if (v35 <= -1.0) {
            goto LABEL_99;
          }
        }
LABEL_93:
        double v36 = -v35;
        if (v35 >= 0.0) {
          double v36 = v35;
        }
        if (v36 <= 0.0001)
        {
          *(double *)(v4 + 96) = v35 * (v35 * -0.5 + 1.0);
          double v37 = v3[13];
          if (v37 <= -1.0)
          {
LABEL_106:
            *(void *)(v4 + 104) = 0x7FF8000000000000;
            double v39 = v3[14];
            if (v39 <= -1.0) {
              goto LABEL_113;
            }
            goto LABEL_107;
          }
        }
        else
        {
          *(long double *)(v4 + 96) = log(v35 + 1.0);
          double v37 = v3[13];
          if (v37 <= -1.0) {
            goto LABEL_106;
          }
        }
LABEL_100:
        double v38 = -v37;
        if (v37 >= 0.0) {
          double v38 = v37;
        }
        if (v38 <= 0.0001)
        {
          *(double *)(v4 + 104) = v37 * (v37 * -0.5 + 1.0);
          double v39 = v3[14];
          if (v39 <= -1.0)
          {
LABEL_113:
            *(void *)(v4 + 112) = 0x7FF8000000000000;
            double v41 = v3[15];
            if (v41 > -1.0) {
              goto LABEL_116;
            }
            goto LABEL_7;
          }
        }
        else
        {
          *(long double *)(v4 + 104) = log(v37 + 1.0);
          double v39 = v3[14];
          if (v39 <= -1.0) {
            goto LABEL_113;
          }
        }
LABEL_107:
        double v40 = -v39;
        if (v39 >= 0.0) {
          double v40 = v39;
        }
        if (v40 <= 0.0001)
        {
          *(double *)(v4 + 112) = v39 * (v39 * -0.5 + 1.0);
          double v41 = v3[15];
          if (v41 > -1.0)
          {
LABEL_116:
            double v42 = -v41;
            if (v41 >= 0.0) {
              double v42 = v41;
            }
            if (v42 <= 0.0001) {
              double v10 = v41 * (v41 * -0.5 + 1.0);
            }
            else {
              double v10 = log(v41 + 1.0);
            }
            goto LABEL_8;
          }
        }
        else
        {
          *(long double *)(v4 + 112) = log(v39 + 1.0);
          double v41 = v3[15];
          if (v41 > -1.0) {
            goto LABEL_116;
          }
        }
LABEL_7:
        double v10 = NAN;
LABEL_8:
        *(double *)(v4 + 120) = v10;
        v3 += 16;
        v4 += 128;
      }
      while (v3 < v9);
    }
    int v43 = v6 - 1;
    unsigned int v44 = 0;
    unsigned int v45 = 0;
    unsigned int v46 = 0;
    unsigned int v47 = 0;
    unsigned int v48 = 0;
    unsigned int v49 = 0;
    unsigned int v50 = 0;
    unsigned int v51 = 0;
    unsigned int v52 = 0;
    uint64_t v53 = 0;
    uint64_t v54 = 0;
    uint64_t v55 = 0;
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    switch(v43)
    {
      case 0:
        goto LABEL_235;
      case 1:
        goto LABEL_227;
      case 2:
        goto LABEL_219;
      case 3:
        goto LABEL_211;
      case 4:
        goto LABEL_203;
      case 5:
        goto LABEL_195;
      case 6:
        goto LABEL_187;
      case 7:
        goto LABEL_179;
      case 8:
        goto LABEL_171;
      case 9:
        goto LABEL_163;
      case 10:
        goto LABEL_155;
      case 11:
        goto LABEL_147;
      case 12:
        goto LABEL_139;
      case 13:
        goto LABEL_131;
      case 14:
        double v58 = *v3;
        if (*v3 <= -1.0)
        {
          double v60 = NAN;
        }
        else
        {
          double v59 = -v58;
          if (v58 >= 0.0) {
            double v59 = *v3;
          }
          if (v59 <= 0.0001) {
            double v60 = v58 * (v58 * -0.5 + 1.0);
          }
          else {
            double v60 = log(v58 + 1.0);
          }
        }
        *(double *)uint64_t v4 = v60;
        unsigned int v44 = 1;
LABEL_131:
        uint64_t v61 = v44;
        double v62 = v3[v44];
        if (v62 <= -1.0)
        {
          double v64 = NAN;
        }
        else
        {
          double v63 = -v62;
          if (v62 >= 0.0) {
            double v63 = v3[v44];
          }
          if (v63 <= 0.0001) {
            double v64 = v62 * (v62 * -0.5 + 1.0);
          }
          else {
            double v64 = log(v62 + 1.0);
          }
        }
        *(double *)(v4 + 8 * v61) = v64;
        unsigned int v45 = v61 + 1;
LABEL_139:
        uint64_t v65 = v45;
        double v66 = v3[v45];
        if (v66 <= -1.0)
        {
          double v68 = NAN;
        }
        else
        {
          double v67 = -v66;
          if (v66 >= 0.0) {
            double v67 = v3[v45];
          }
          if (v67 <= 0.0001) {
            double v68 = v66 * (v66 * -0.5 + 1.0);
          }
          else {
            double v68 = log(v66 + 1.0);
          }
        }
        *(double *)(v4 + 8 * v65) = v68;
        unsigned int v46 = v65 + 1;
LABEL_147:
        uint64_t v69 = v46;
        double v70 = v3[v46];
        if (v70 <= -1.0)
        {
          double v72 = NAN;
        }
        else
        {
          double v71 = -v70;
          if (v70 >= 0.0) {
            double v71 = v3[v46];
          }
          if (v71 <= 0.0001) {
            double v72 = v70 * (v70 * -0.5 + 1.0);
          }
          else {
            double v72 = log(v70 + 1.0);
          }
        }
        *(double *)(v4 + 8 * v69) = v72;
        unsigned int v47 = v69 + 1;
LABEL_155:
        uint64_t v73 = v47;
        double v74 = v3[v47];
        if (v74 <= -1.0)
        {
          double v76 = NAN;
        }
        else
        {
          double v75 = -v74;
          if (v74 >= 0.0) {
            double v75 = v3[v47];
          }
          if (v75 <= 0.0001) {
            double v76 = v74 * (v74 * -0.5 + 1.0);
          }
          else {
            double v76 = log(v74 + 1.0);
          }
        }
        *(double *)(v4 + 8 * v73) = v76;
        unsigned int v48 = v73 + 1;
LABEL_163:
        uint64_t v77 = v48;
        double v78 = v3[v48];
        if (v78 <= -1.0)
        {
          double v80 = NAN;
        }
        else
        {
          double v79 = -v78;
          if (v78 >= 0.0) {
            double v79 = v3[v48];
          }
          if (v79 <= 0.0001) {
            double v80 = v78 * (v78 * -0.5 + 1.0);
          }
          else {
            double v80 = log(v78 + 1.0);
          }
        }
        *(double *)(v4 + 8 * v77) = v80;
        unsigned int v49 = v77 + 1;
LABEL_171:
        uint64_t v81 = v49;
        double v82 = v3[v49];
        if (v82 <= -1.0)
        {
          double v84 = NAN;
        }
        else
        {
          double v83 = -v82;
          if (v82 >= 0.0) {
            double v83 = v3[v49];
          }
          if (v83 <= 0.0001) {
            double v84 = v82 * (v82 * -0.5 + 1.0);
          }
          else {
            double v84 = log(v82 + 1.0);
          }
        }
        *(double *)(v4 + 8 * v81) = v84;
        unsigned int v50 = v81 + 1;
LABEL_179:
        uint64_t v85 = v50;
        double v86 = v3[v50];
        if (v86 <= -1.0)
        {
          double v88 = NAN;
        }
        else
        {
          double v87 = -v86;
          if (v86 >= 0.0) {
            double v87 = v3[v50];
          }
          if (v87 <= 0.0001) {
            double v88 = v86 * (v86 * -0.5 + 1.0);
          }
          else {
            double v88 = log(v86 + 1.0);
          }
        }
        *(double *)(v4 + 8 * v85) = v88;
        unsigned int v51 = v85 + 1;
LABEL_187:
        uint64_t v89 = v51;
        double v90 = v3[v51];
        if (v90 <= -1.0)
        {
          double v92 = NAN;
        }
        else
        {
          double v91 = -v90;
          if (v90 >= 0.0) {
            double v91 = v3[v51];
          }
          if (v91 <= 0.0001) {
            double v92 = v90 * (v90 * -0.5 + 1.0);
          }
          else {
            double v92 = log(v90 + 1.0);
          }
        }
        *(double *)(v4 + 8 * v89) = v92;
        unsigned int v52 = v89 + 1;
LABEL_195:
        uint64_t v93 = v52;
        double v94 = v3[v52];
        if (v94 <= -1.0)
        {
          double v96 = NAN;
        }
        else
        {
          double v95 = -v94;
          if (v94 >= 0.0) {
            double v95 = v3[v52];
          }
          if (v95 <= 0.0001) {
            double v96 = v94 * (v94 * -0.5 + 1.0);
          }
          else {
            double v96 = log(v94 + 1.0);
          }
        }
        *(double *)(v4 + 8 * v93) = v96;
        uint64_t v53 = (v93 + 1);
LABEL_203:
        uint64_t v97 = v53;
        double v98 = v3[v53];
        if (v98 <= -1.0)
        {
          double v100 = NAN;
        }
        else
        {
          double v99 = -v98;
          if (v98 >= 0.0) {
            double v99 = v3[v53];
          }
          if (v99 <= 0.0001) {
            double v100 = v98 * (v98 * -0.5 + 1.0);
          }
          else {
            double v100 = log(v98 + 1.0);
          }
        }
        *(double *)(v4 + 8 * v97) = v100;
        uint64_t v54 = (v97 + 1);
LABEL_211:
        uint64_t v101 = v54;
        double v102 = v3[v54];
        if (v102 <= -1.0)
        {
          double v104 = NAN;
        }
        else
        {
          double v103 = -v102;
          if (v102 >= 0.0) {
            double v103 = v3[v54];
          }
          if (v103 <= 0.0001) {
            double v104 = v102 * (v102 * -0.5 + 1.0);
          }
          else {
            double v104 = log(v102 + 1.0);
          }
        }
        *(double *)(v4 + 8 * v101) = v104;
        uint64_t v55 = (v101 + 1);
LABEL_219:
        uint64_t v105 = v55;
        double v106 = v3[v55];
        if (v106 <= -1.0)
        {
          double v108 = NAN;
        }
        else
        {
          double v107 = -v106;
          if (v106 >= 0.0) {
            double v107 = v3[v55];
          }
          if (v107 <= 0.0001) {
            double v108 = v106 * (v106 * -0.5 + 1.0);
          }
          else {
            double v108 = log(v106 + 1.0);
          }
        }
        *(double *)(v4 + 8 * v105) = v108;
        uint64_t v56 = (v105 + 1);
LABEL_227:
        uint64_t v109 = v56;
        double v110 = v3[v56];
        if (v110 <= -1.0)
        {
          double v112 = NAN;
        }
        else
        {
          double v111 = -v110;
          if (v110 >= 0.0) {
            double v111 = v3[v56];
          }
          if (v111 <= 0.0001) {
            double v112 = v110 * (v110 * -0.5 + 1.0);
          }
          else {
            double v112 = log(v110 + 1.0);
          }
        }
        *(double *)(v4 + 8 * v109) = v112;
        uint64_t v57 = (v109 + 1);
LABEL_235:
        double v113 = v3[v57];
        if (v113 <= -1.0)
        {
          double v115 = NAN;
        }
        else
        {
          double v114 = -v113;
          if (v113 >= 0.0) {
            double v114 = v3[v57];
          }
          if (v114 <= 0.0001) {
            double v115 = v113 * (v113 * -0.5 + 1.0);
          }
          else {
            double v115 = log(v113 + 1.0);
          }
        }
        *(double *)(v4 + 8 * v57) = v115;
        break;
      default:
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v53, v54, v55, v56);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v53, v54, v55, v56);
  }
  return result;
}

uint64_t sub_F21DC()
{
  return 141;
}

uint64_t sub_F21E4(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_F21EC(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_F21F4(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_F2234(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_F223C(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_F2244(uint64_t a1)
{
  return sub_F22E8(a1 - 32);
}

void sub_F224C(uint64_t a1)
{
  sub_F22E8(a1 - 32);

  operator delete();
}

uint64_t sub_F2288(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 32) + 72))() + 8);
}

uint64_t sub_F22C8(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_F22D0(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_F22D8(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_F22E0(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_F22E8(uint64_t a1)
{
  *(void *)a1 = off_2401B28;
  *(void *)(a1 + 32) = off_2401B88;
  if (*(void *)(a1 + 48)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 64) = 0;
  }
  *(void *)a1 = off_23FFC00;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_F2444(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *(void *)a1 = off_23FFC00;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = a3;
  if (a3) {
    BOOL v5 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
  }
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
  else {
    BOOL v5 = 1;
  }
  *(unsigned char *)(a1 + 24) = v5;
  *(void *)a1 = off_2401C10;
  *(void *)(a1 + 32) = off_2401C70;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  operator new();
}

void sub_F2A7C(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_E08A0(v1);
  _Unwind_Resume(a1);
}

void sub_F2B24(uint64_t a1)
{
  sub_F3044(a1);

  operator delete();
}

double sub_F2B5C(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 40);
  if (!v2) {
    return NAN;
  }
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 64))(v2) + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v5) << 32;
  if (v7 >= 1)
  {
    int64_t v8 = (double *)((char *)v3 + (v7 >> 29));
    do
    {
      *uint64_t v4 = -*v3;
      v4[1] = -v3[1];
      v4[2] = -v3[2];
      v4[3] = -v3[3];
      v4[4] = -v3[4];
      v4[5] = -v3[5];
      v4[6] = -v3[6];
      v4[7] = -v3[7];
      v4[8] = -v3[8];
      v4[9] = -v3[9];
      v4[10] = -v3[10];
      v4[11] = -v3[11];
      v4[12] = -v3[12];
      v4[13] = -v3[13];
      v4[14] = -v3[14];
      v4[15] = -v3[15];
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v8);
  }
  int v9 = (v5 & 0xF) - 1;
  unsigned int v10 = 0;
  unsigned int v11 = 0;
  unsigned int v12 = 0;
  unsigned int v13 = 0;
  unsigned int v14 = 0;
  unsigned int v15 = 0;
  unsigned int v16 = 0;
  unsigned int v17 = 0;
  unsigned int v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  switch(v9)
  {
    case 0:
      goto LABEL_23;
    case 1:
      goto LABEL_22;
    case 2:
      goto LABEL_21;
    case 3:
      goto LABEL_20;
    case 4:
      goto LABEL_19;
    case 5:
      goto LABEL_18;
    case 6:
      goto LABEL_17;
    case 7:
      goto LABEL_16;
    case 8:
      goto LABEL_15;
    case 9:
      goto LABEL_14;
    case 10:
      goto LABEL_13;
    case 11:
      goto LABEL_12;
    case 12:
      goto LABEL_11;
    case 13:
      goto LABEL_10;
    case 14:
      *uint64_t v4 = -*v3;
      unsigned int v10 = 1;
LABEL_10:
      v4[v10] = -v3[v10];
      unsigned int v11 = v10 + 1;
LABEL_11:
      v4[v11] = -v3[v11];
      unsigned int v12 = v11 + 1;
LABEL_12:
      v4[v12] = -v3[v12];
      unsigned int v13 = v12 + 1;
LABEL_13:
      v4[v13] = -v3[v13];
      unsigned int v14 = v13 + 1;
LABEL_14:
      v4[v14] = -v3[v14];
      unsigned int v15 = v14 + 1;
LABEL_15:
      v4[v15] = -v3[v15];
      unsigned int v16 = v15 + 1;
LABEL_16:
      v4[v16] = -v3[v16];
      unsigned int v17 = v16 + 1;
LABEL_17:
      v4[v17] = -v3[v17];
      unsigned int v18 = v17 + 1;
LABEL_18:
      v4[v18] = -v3[v18];
      uint64_t v19 = v18 + 1;
LABEL_19:
      v4[v19] = -v3[v19];
      uint64_t v20 = (v19 + 1);
LABEL_20:
      v4[v20] = -v3[v20];
      uint64_t v21 = (v20 + 1);
LABEL_21:
      v4[v21] = -v3[v21];
      uint64_t v22 = (v21 + 1);
LABEL_22:
      v4[v22] = -v3[v22];
      uint64_t v23 = (v22 + 1);
LABEL_23:
      v4[v23] = -v3[v23];
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v19, v20, v21, v22, v23)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v19, v20, v21, v22, v23)+ 16);
}

uint64_t sub_F2F38()
{
  return 141;
}

uint64_t sub_F2F40(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_F2F48(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_F2F50(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_F2F90(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_F2F98(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_F2FA0(uint64_t a1)
{
  return sub_F3044(a1 - 32);
}

void sub_F2FA8(uint64_t a1)
{
  sub_F3044(a1 - 32);

  operator delete();
}

uint64_t sub_F2FE4(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 32) + 72))() + 8);
}

uint64_t sub_F3024(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_F302C(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_F3034(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_F303C(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_F3044(uint64_t a1)
{
  *(void *)a1 = off_2401C10;
  *(void *)(a1 + 32) = off_2401C70;
  if (*(void *)(a1 + 48)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 64) = 0;
  }
  *(void *)a1 = off_23FFC00;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_F31A0(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *(void *)a1 = off_23FFC00;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = a3;
  if (a3) {
    BOOL v5 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
  }
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
  else {
    BOOL v5 = 1;
  }
  *(unsigned char *)(a1 + 24) = v5;
  *(void *)a1 = off_2401CF8;
  *(void *)(a1 + 32) = off_2401D58;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  operator new();
}

void sub_F37D8(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_E08A0(v1);
  _Unwind_Resume(a1);
}

void sub_F3880(uint64_t a1)
{
  sub_F3D24(a1);

  operator delete();
}

double sub_F38B8(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 40);
  if (!v2) {
    return NAN;
  }
  uint64_t v3 = *(char **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 64))(v2) + 16);
  uint64_t v4 = *(void **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v5) << 32;
  if (v7 >= 1)
  {
    int64_t v8 = &v3[v7 >> 29];
    do
    {
      *uint64_t v4 = *(void *)v3;
      v4[1] = *((void *)v3 + 1);
      v4[2] = *((void *)v3 + 2);
      v4[3] = *((void *)v3 + 3);
      v4[4] = *((void *)v3 + 4);
      v4[5] = *((void *)v3 + 5);
      v4[6] = *((void *)v3 + 6);
      v4[7] = *((void *)v3 + 7);
      v4[8] = *((void *)v3 + 8);
      v4[9] = *((void *)v3 + 9);
      v4[10] = *((void *)v3 + 10);
      v4[11] = *((void *)v3 + 11);
      v4[12] = *((void *)v3 + 12);
      v4[13] = *((void *)v3 + 13);
      v4[14] = *((void *)v3 + 14);
      v4[15] = *((void *)v3 + 15);
      v3 += 128;
      v4 += 16;
    }
    while (v3 < v8);
  }
  int v9 = (v5 & 0xF) - 1;
  unsigned int v10 = 0;
  unsigned int v11 = 0;
  unsigned int v12 = 0;
  unsigned int v13 = 0;
  unsigned int v14 = 0;
  unsigned int v15 = 0;
  unsigned int v16 = 0;
  unsigned int v17 = 0;
  unsigned int v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  switch(v9)
  {
    case 0:
      goto LABEL_23;
    case 1:
      goto LABEL_22;
    case 2:
      goto LABEL_21;
    case 3:
      goto LABEL_20;
    case 4:
      goto LABEL_19;
    case 5:
      goto LABEL_18;
    case 6:
      goto LABEL_17;
    case 7:
      goto LABEL_16;
    case 8:
      goto LABEL_15;
    case 9:
      goto LABEL_14;
    case 10:
      goto LABEL_13;
    case 11:
      goto LABEL_12;
    case 12:
      goto LABEL_11;
    case 13:
      goto LABEL_10;
    case 14:
      *uint64_t v4 = *(void *)v3;
      unsigned int v10 = 1;
LABEL_10:
      v4[v10] = *(void *)&v3[8 * v10];
      unsigned int v11 = v10 + 1;
LABEL_11:
      v4[v11] = *(void *)&v3[8 * v11];
      unsigned int v12 = v11 + 1;
LABEL_12:
      v4[v12] = *(void *)&v3[8 * v12];
      unsigned int v13 = v12 + 1;
LABEL_13:
      v4[v13] = *(void *)&v3[8 * v13];
      unsigned int v14 = v13 + 1;
LABEL_14:
      v4[v14] = *(void *)&v3[8 * v14];
      unsigned int v15 = v14 + 1;
LABEL_15:
      v4[v15] = *(void *)&v3[8 * v15];
      unsigned int v16 = v15 + 1;
LABEL_16:
      v4[v16] = *(void *)&v3[8 * v16];
      unsigned int v17 = v16 + 1;
LABEL_17:
      v4[v17] = *(void *)&v3[8 * v17];
      unsigned int v18 = v17 + 1;
LABEL_18:
      v4[v18] = *(void *)&v3[8 * v18];
      uint64_t v19 = v18 + 1;
LABEL_19:
      v4[v19] = *(void *)&v3[8 * v19];
      uint64_t v20 = (v19 + 1);
LABEL_20:
      v4[v20] = *(void *)&v3[8 * v20];
      uint64_t v21 = (v20 + 1);
LABEL_21:
      v4[v21] = *(void *)&v3[8 * v21];
      uint64_t v22 = (v21 + 1);
LABEL_22:
      v4[v22] = *(void *)&v3[8 * v22];
      uint64_t v23 = (v22 + 1);
LABEL_23:
      v4[v23] = *(void *)&v3[8 * v23];
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v19, v20, v21, v22, v23)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v19, v20, v21, v22, v23)+ 16);
}

uint64_t sub_F3C18()
{
  return 141;
}

uint64_t sub_F3C20(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_F3C28(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_F3C30(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_F3C70(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_F3C78(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_F3C80(uint64_t a1)
{
  return sub_F3D24(a1 - 32);
}

void sub_F3C88(uint64_t a1)
{
  sub_F3D24(a1 - 32);

  operator delete();
}

uint64_t sub_F3CC4(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 32) + 72))() + 8);
}

uint64_t sub_F3D04(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_F3D0C(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_F3D14(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_F3D1C(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_F3D24(uint64_t a1)
{
  *(void *)a1 = off_2401CF8;
  *(void *)(a1 + 32) = off_2401D58;
  if (*(void *)(a1 + 48)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 64) = 0;
  }
  *(void *)a1 = off_23FFC00;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_F3E80(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *(void *)a1 = off_23FFC00;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = a3;
  if (a3) {
    BOOL v5 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
  }
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
  else {
    BOOL v5 = 1;
  }
  *(unsigned char *)(a1 + 24) = v5;
  *(void *)a1 = off_2401DE0;
  *(void *)(a1 + 32) = off_2401E40;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  operator new();
}

void sub_F44B8(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_E08A0(v1);
  _Unwind_Resume(a1);
}

void sub_F4560(uint64_t a1)
{
  sub_F4D6C(a1);

  operator delete();
}

double sub_F4598(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 40);
  if (!v2) {
    return NAN;
  }
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 64))(v2) + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v5) << 32;
  if (v7 >= 1)
  {
    int64_t v8 = (double *)((char *)v3 + (v7 >> 29));
    do
    {
      double v9 = ceil(*v3 + -0.5);
      double v10 = floor(*v3 + 0.5);
      if (*v3 >= 0.0) {
        double v11 = v10;
      }
      else {
        double v11 = v9;
      }
      *uint64_t v4 = v11;
      double v12 = v3[1];
      double v13 = ceil(v12 + -0.5);
      double v14 = floor(v12 + 0.5);
      if (v12 >= 0.0) {
        double v15 = v14;
      }
      else {
        double v15 = v13;
      }
      v4[1] = v15;
      double v16 = v3[2];
      double v17 = ceil(v16 + -0.5);
      double v18 = floor(v16 + 0.5);
      if (v16 >= 0.0) {
        double v19 = v18;
      }
      else {
        double v19 = v17;
      }
      v4[2] = v19;
      double v20 = v3[3];
      double v21 = ceil(v20 + -0.5);
      double v22 = floor(v20 + 0.5);
      if (v20 >= 0.0) {
        double v23 = v22;
      }
      else {
        double v23 = v21;
      }
      v4[3] = v23;
      double v24 = v3[4];
      double v25 = ceil(v24 + -0.5);
      double v26 = floor(v24 + 0.5);
      if (v24 >= 0.0) {
        double v27 = v26;
      }
      else {
        double v27 = v25;
      }
      v4[4] = v27;
      double v28 = v3[5];
      double v29 = ceil(v28 + -0.5);
      double v30 = floor(v28 + 0.5);
      if (v28 >= 0.0) {
        double v31 = v30;
      }
      else {
        double v31 = v29;
      }
      v4[5] = v31;
      double v32 = v3[6];
      double v33 = ceil(v32 + -0.5);
      double v34 = floor(v32 + 0.5);
      if (v32 >= 0.0) {
        double v35 = v34;
      }
      else {
        double v35 = v33;
      }
      v4[6] = v35;
      double v36 = v3[7];
      double v37 = ceil(v36 + -0.5);
      double v38 = floor(v36 + 0.5);
      if (v36 >= 0.0) {
        double v39 = v38;
      }
      else {
        double v39 = v37;
      }
      v4[7] = v39;
      double v40 = v3[8];
      double v41 = ceil(v40 + -0.5);
      double v42 = floor(v40 + 0.5);
      if (v40 >= 0.0) {
        double v43 = v42;
      }
      else {
        double v43 = v41;
      }
      v4[8] = v43;
      double v44 = v3[9];
      double v45 = ceil(v44 + -0.5);
      double v46 = floor(v44 + 0.5);
      if (v44 >= 0.0) {
        double v47 = v46;
      }
      else {
        double v47 = v45;
      }
      v4[9] = v47;
      double v48 = v3[10];
      double v49 = ceil(v48 + -0.5);
      double v50 = floor(v48 + 0.5);
      if (v48 >= 0.0) {
        double v51 = v50;
      }
      else {
        double v51 = v49;
      }
      v4[10] = v51;
      double v52 = v3[11];
      double v53 = ceil(v52 + -0.5);
      double v54 = floor(v52 + 0.5);
      if (v52 >= 0.0) {
        double v55 = v54;
      }
      else {
        double v55 = v53;
      }
      v4[11] = v55;
      double v56 = v3[12];
      double v57 = ceil(v56 + -0.5);
      double v58 = floor(v56 + 0.5);
      if (v56 >= 0.0) {
        double v59 = v58;
      }
      else {
        double v59 = v57;
      }
      v4[12] = v59;
      double v60 = v3[13];
      double v61 = ceil(v60 + -0.5);
      double v62 = floor(v60 + 0.5);
      if (v60 >= 0.0) {
        double v63 = v62;
      }
      else {
        double v63 = v61;
      }
      v4[13] = v63;
      double v64 = v3[14];
      double v65 = ceil(v64 + -0.5);
      double v66 = floor(v64 + 0.5);
      if (v64 >= 0.0) {
        double v67 = v66;
      }
      else {
        double v67 = v65;
      }
      v4[14] = v67;
      double v68 = v3[15];
      double v69 = ceil(v68 + -0.5);
      double v70 = floor(v68 + 0.5);
      if (v68 >= 0.0) {
        double v71 = v70;
      }
      else {
        double v71 = v69;
      }
      v4[15] = v71;
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v8);
  }
  int v72 = (v5 & 0xF) - 1;
  unsigned int v73 = 0;
  unsigned int v74 = 0;
  unsigned int v75 = 0;
  unsigned int v76 = 0;
  unsigned int v77 = 0;
  unsigned int v78 = 0;
  unsigned int v79 = 0;
  unsigned int v80 = 0;
  unsigned int v81 = 0;
  uint64_t v82 = 0;
  uint64_t v83 = 0;
  uint64_t v84 = 0;
  uint64_t v85 = 0;
  uint64_t v86 = 0;
  switch(v72)
  {
    case 0:
      goto LABEL_113;
    case 1:
      goto LABEL_109;
    case 2:
      goto LABEL_105;
    case 3:
      goto LABEL_101;
    case 4:
      goto LABEL_97;
    case 5:
      goto LABEL_93;
    case 6:
      goto LABEL_89;
    case 7:
      goto LABEL_85;
    case 8:
      goto LABEL_81;
    case 9:
      goto LABEL_77;
    case 10:
      goto LABEL_73;
    case 11:
      goto LABEL_69;
    case 12:
      goto LABEL_65;
    case 13:
      goto LABEL_61;
    case 14:
      double v87 = ceil(*v3 + -0.5);
      double v88 = floor(*v3 + 0.5);
      if (*v3 >= 0.0) {
        double v89 = v88;
      }
      else {
        double v89 = v87;
      }
      *uint64_t v4 = v89;
      unsigned int v73 = 1;
LABEL_61:
      double v90 = v3[v73];
      double v91 = ceil(v90 + -0.5);
      double v92 = floor(v90 + 0.5);
      if (v90 >= 0.0) {
        double v93 = v92;
      }
      else {
        double v93 = v91;
      }
      v4[v73] = v93;
      unsigned int v74 = v73 + 1;
LABEL_65:
      double v94 = v3[v74];
      double v95 = ceil(v94 + -0.5);
      double v96 = floor(v94 + 0.5);
      if (v94 >= 0.0) {
        double v97 = v96;
      }
      else {
        double v97 = v95;
      }
      v4[v74] = v97;
      unsigned int v75 = v74 + 1;
LABEL_69:
      double v98 = v3[v75];
      double v99 = ceil(v98 + -0.5);
      double v100 = floor(v98 + 0.5);
      if (v98 >= 0.0) {
        double v101 = v100;
      }
      else {
        double v101 = v99;
      }
      v4[v75] = v101;
      unsigned int v76 = v75 + 1;
LABEL_73:
      double v102 = v3[v76];
      double v103 = ceil(v102 + -0.5);
      double v104 = floor(v102 + 0.5);
      if (v102 >= 0.0) {
        double v105 = v104;
      }
      else {
        double v105 = v103;
      }
      v4[v76] = v105;
      unsigned int v77 = v76 + 1;
LABEL_77:
      double v106 = v3[v77];
      double v107 = ceil(v106 + -0.5);
      double v108 = floor(v106 + 0.5);
      if (v106 >= 0.0) {
        double v109 = v108;
      }
      else {
        double v109 = v107;
      }
      v4[v77] = v109;
      unsigned int v78 = v77 + 1;
LABEL_81:
      double v110 = v3[v78];
      double v111 = ceil(v110 + -0.5);
      double v112 = floor(v110 + 0.5);
      if (v110 >= 0.0) {
        double v113 = v112;
      }
      else {
        double v113 = v111;
      }
      v4[v78] = v113;
      unsigned int v79 = v78 + 1;
LABEL_85:
      double v114 = v3[v79];
      double v115 = ceil(v114 + -0.5);
      double v116 = floor(v114 + 0.5);
      if (v114 >= 0.0) {
        double v117 = v116;
      }
      else {
        double v117 = v115;
      }
      v4[v79] = v117;
      unsigned int v80 = v79 + 1;
LABEL_89:
      double v118 = v3[v80];
      double v119 = ceil(v118 + -0.5);
      double v120 = floor(v118 + 0.5);
      if (v118 >= 0.0) {
        double v121 = v120;
      }
      else {
        double v121 = v119;
      }
      v4[v80] = v121;
      unsigned int v81 = v80 + 1;
LABEL_93:
      double v122 = v3[v81];
      double v123 = ceil(v122 + -0.5);
      double v124 = floor(v122 + 0.5);
      if (v122 >= 0.0) {
        double v125 = v124;
      }
      else {
        double v125 = v123;
      }
      v4[v81] = v125;
      uint64_t v82 = v81 + 1;
LABEL_97:
      double v126 = v3[v82];
      double v127 = ceil(v126 + -0.5);
      double v128 = floor(v126 + 0.5);
      if (v126 >= 0.0) {
        double v129 = v128;
      }
      else {
        double v129 = v127;
      }
      v4[v82] = v129;
      uint64_t v83 = (v82 + 1);
LABEL_101:
      double v130 = v3[v83];
      double v131 = ceil(v130 + -0.5);
      double v132 = floor(v130 + 0.5);
      if (v130 >= 0.0) {
        double v133 = v132;
      }
      else {
        double v133 = v131;
      }
      v4[v83] = v133;
      uint64_t v84 = (v83 + 1);
LABEL_105:
      double v134 = v3[v84];
      double v135 = ceil(v134 + -0.5);
      double v136 = floor(v134 + 0.5);
      if (v134 >= 0.0) {
        double v137 = v136;
      }
      else {
        double v137 = v135;
      }
      v4[v84] = v137;
      uint64_t v85 = (v84 + 1);
LABEL_109:
      double v138 = v3[v85];
      double v139 = ceil(v138 + -0.5);
      double v140 = floor(v138 + 0.5);
      if (v138 >= 0.0) {
        double v141 = v140;
      }
      else {
        double v141 = v139;
      }
      v4[v85] = v141;
      uint64_t v86 = (v85 + 1);
LABEL_113:
      double v142 = v3[v86];
      double v143 = ceil(v142 + -0.5);
      double v144 = floor(v142 + 0.5);
      if (v142 >= 0.0) {
        double v145 = v144;
      }
      else {
        double v145 = v143;
      }
      v4[v86] = v145;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v82, v83, v84, v85, v86)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v82, v83, v84, v85, v86)+ 16);
}

uint64_t sub_F4C60()
{
  return 141;
}

uint64_t sub_F4C68(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_F4C70(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_F4C78(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_F4CB8(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_F4CC0(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_F4CC8(uint64_t a1)
{
  return sub_F4D6C(a1 - 32);
}

void sub_F4CD0(uint64_t a1)
{
  sub_F4D6C(a1 - 32);

  operator delete();
}

uint64_t sub_F4D0C(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 32) + 72))() + 8);
}

uint64_t sub_F4D4C(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_F4D54(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_F4D5C(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_F4D64(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_F4D6C(uint64_t a1)
{
  *(void *)a1 = off_2401DE0;
  *(void *)(a1 + 32) = off_2401E40;
  if (*(void *)(a1 + 48)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 64) = 0;
  }
  *(void *)a1 = off_23FFC00;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_F4EC8(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *(void *)a1 = off_23FFC00;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = a3;
  if (a3) {
    BOOL v5 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
  }
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
  else {
    BOOL v5 = 1;
  }
  *(unsigned char *)(a1 + 24) = v5;
  *(void *)a1 = off_2401EC8;
  *(void *)(a1 + 32) = off_2401F28;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  operator new();
}

void sub_F5500(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_E08A0(v1);
  _Unwind_Resume(a1);
}

void sub_F55A8(uint64_t a1)
{
  sub_F5AF8(a1);

  operator delete();
}

double sub_F55E0(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 40);
  if (!v2) {
    return NAN;
  }
  uint64_t v3 = *(long double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 64))(v2) + 16);
  uint64_t v4 = *(long double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  int v6 = v5 & 0xF;
  if ((v5 & 0xF) != 0) {
    int v7 = -16;
  }
  else {
    int v7 = 0;
  }
  int64_t v8 = (unint64_t)(v7 + v5) << 32;
  if (v8 >= 1)
  {
    double v9 = (long double *)((char *)v3 + (v8 >> 29));
    do
    {
      *uint64_t v4 = sin(*v3);
      v4[1] = sin(v3[1]);
      v4[2] = sin(v3[2]);
      v4[3] = sin(v3[3]);
      v4[4] = sin(v3[4]);
      v4[5] = sin(v3[5]);
      v4[6] = sin(v3[6]);
      v4[7] = sin(v3[7]);
      v4[8] = sin(v3[8]);
      v4[9] = sin(v3[9]);
      v4[10] = sin(v3[10]);
      v4[11] = sin(v3[11]);
      v4[12] = sin(v3[12]);
      v4[13] = sin(v3[13]);
      v4[14] = sin(v3[14]);
      v4[15] = sin(v3[15]);
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v9);
  }
  int v10 = v6 - 1;
  uint64_t v31 = a1;
  unsigned int v11 = 0;
  unsigned int v12 = 0;
  unsigned int v13 = 0;
  unsigned int v14 = 0;
  unsigned int v15 = 0;
  int v16 = 0;
  int v17 = 0;
  int v18 = 0;
  int v19 = 0;
  uint64_t v20 = 0;
  int v21 = 0;
  int v22 = 0;
  int v23 = 0;
  uint64_t v24 = 0;
  switch(v10)
  {
    case 0:
      goto LABEL_23;
    case 1:
      goto LABEL_22;
    case 2:
      goto LABEL_21;
    case 3:
      goto LABEL_20;
    case 4:
      goto LABEL_19;
    case 5:
      goto LABEL_18;
    case 6:
      goto LABEL_17;
    case 7:
      goto LABEL_16;
    case 8:
      goto LABEL_15;
    case 9:
      goto LABEL_14;
    case 10:
      goto LABEL_13;
    case 11:
      goto LABEL_12;
    case 12:
      goto LABEL_11;
    case 13:
      goto LABEL_10;
    case 14:
      *uint64_t v4 = sin(*v3);
      unsigned int v11 = 1;
LABEL_10:
      unsigned int v25 = v11;
      v4[v11] = sin(v3[v11]);
      unsigned int v12 = v25 + 1;
LABEL_11:
      unsigned int v26 = v12;
      v4[v12] = sin(v3[v12]);
      unsigned int v13 = v26 + 1;
LABEL_12:
      unsigned int v27 = v13;
      v4[v13] = sin(v3[v13]);
      unsigned int v14 = v27 + 1;
LABEL_13:
      unsigned int v28 = v14;
      v4[v14] = sin(v3[v14]);
      unsigned int v15 = v28 + 1;
LABEL_14:
      unsigned int v29 = v15;
      v4[v15] = sin(v3[v15]);
      int v16 = v29 + 1;
LABEL_15:
      v4[v16] = sin(v3[v16]);
      int v17 = v16 + 1;
LABEL_16:
      v4[v17] = sin(v3[v17]);
      int v18 = v17 + 1;
LABEL_17:
      v4[v18] = sin(v3[v18]);
      int v19 = v18 + 1;
LABEL_18:
      v4[v19] = sin(v3[v19]);
      LODWORD(v20) = v19 + 1;
LABEL_19:
      v4[v20] = sin(v3[v20]);
      int v21 = v20 + 1;
LABEL_20:
      v4[v21] = sin(v3[v21]);
      int v22 = v21 + 1;
LABEL_21:
      v4[v22] = sin(v3[v22]);
      int v23 = v22 + 1;
LABEL_22:
      v4[v23] = sin(v3[v23]);
      uint64_t v24 = (v23 + 1);
LABEL_23:
      v4[v24] = sin(v3[v24]);
      uint64_t v20 = v31;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v20 + 72))(v20) + 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v20 + 72))(v20) + 16);
}

uint64_t sub_F59EC()
{
  return 141;
}

uint64_t sub_F59F4(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_F59FC(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_F5A04(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_F5A44(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_F5A4C(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_F5A54(uint64_t a1)
{
  return sub_F5AF8(a1 - 32);
}

void sub_F5A5C(uint64_t a1)
{
  sub_F5AF8(a1 - 32);

  operator delete();
}

uint64_t sub_F5A98(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 32) + 72))() + 8);
}

uint64_t sub_F5AD8(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_F5AE0(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_F5AE8(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_F5AF0(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_F5AF8(uint64_t a1)
{
  *(void *)a1 = off_2401EC8;
  *(void *)(a1 + 32) = off_2401F28;
  if (*(void *)(a1 + 48)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 64) = 0;
  }
  *(void *)a1 = off_23FFC00;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_F5C54(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *(void *)a1 = off_23FFC00;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = a3;
  if (a3) {
    BOOL v5 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
  }
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
  else {
    BOOL v5 = 1;
  }
  *(unsigned char *)(a1 + 24) = v5;
  *(void *)a1 = off_2401FB0;
  *(void *)(a1 + 32) = off_2402010;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  operator new();
}

void sub_F628C(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_E08A0(v1);
  _Unwind_Resume(a1);
}

void sub_F6334(uint64_t a1)
{
  sub_F6C30(a1);

  operator delete();
}

double sub_F636C(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 40);
  if (!v2) {
    return NAN;
  }
  unint64_t v3 = *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 64))(v2) + 16);
  uint64_t v4 = *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  int v6 = v5 & 0xF;
  if ((v5 & 0xF) != 0) {
    int v7 = -16;
  }
  else {
    int v7 = 0;
  }
  int64_t v8 = (unint64_t)(v7 + v5) << 32;
  if (v8 >= 1)
  {
    unint64_t v9 = v3 + (v8 >> 29);
    do
    {
      double v11 = 1.0;
      double v12 = 1.0;
      if (fabs(*(double *)v3) >= 2.22044605e-16)
      {
        double v10 = *(double *)v3;
        double v12 = sin(*(long double *)v3) / v10;
      }
      *(double *)uint64_t v4 = v12;
      double v13 = *(double *)(v3 + 8);
      if (fabs(v13) >= 2.22044605e-16) {
        double v11 = sin(*(long double *)(v3 + 8)) / v13;
      }
      *(double *)(v4 + 8) = v11;
      double v14 = *(double *)(v3 + 16);
      double v15 = 1.0;
      double v16 = 1.0;
      if (fabs(v14) >= 2.22044605e-16) {
        double v16 = sin(*(long double *)(v3 + 16)) / v14;
      }
      *(double *)(v4 + 16) = v16;
      double v17 = *(double *)(v3 + 24);
      if (fabs(v17) >= 2.22044605e-16) {
        double v15 = sin(*(long double *)(v3 + 24)) / v17;
      }
      *(double *)(v4 + 24) = v15;
      double v18 = *(double *)(v3 + 32);
      double v19 = 1.0;
      double v20 = 1.0;
      if (fabs(v18) >= 2.22044605e-16) {
        double v20 = sin(*(long double *)(v3 + 32)) / v18;
      }
      *(double *)(v4 + 32) = v20;
      double v21 = *(double *)(v3 + 40);
      if (fabs(v21) >= 2.22044605e-16) {
        double v19 = sin(*(long double *)(v3 + 40)) / v21;
      }
      *(double *)(v4 + 40) = v19;
      double v22 = *(double *)(v3 + 48);
      double v23 = 1.0;
      double v24 = 1.0;
      if (fabs(v22) >= 2.22044605e-16) {
        double v24 = sin(*(long double *)(v3 + 48)) / v22;
      }
      *(double *)(v4 + 48) = v24;
      double v25 = *(double *)(v3 + 56);
      if (fabs(v25) >= 2.22044605e-16) {
        double v23 = sin(*(long double *)(v3 + 56)) / v25;
      }
      *(double *)(v4 + 56) = v23;
      double v26 = *(double *)(v3 + 64);
      double v27 = 1.0;
      double v28 = 1.0;
      if (fabs(v26) >= 2.22044605e-16) {
        double v28 = sin(*(long double *)(v3 + 64)) / v26;
      }
      *(double *)(v4 + 64) = v28;
      double v29 = *(double *)(v3 + 72);
      if (fabs(v29) >= 2.22044605e-16) {
        double v27 = sin(*(long double *)(v3 + 72)) / v29;
      }
      *(double *)(v4 + 72) = v27;
      double v30 = *(double *)(v3 + 80);
      double v31 = 1.0;
      double v32 = 1.0;
      if (fabs(v30) >= 2.22044605e-16) {
        double v32 = sin(*(long double *)(v3 + 80)) / v30;
      }
      *(double *)(v4 + 80) = v32;
      double v33 = *(double *)(v3 + 88);
      if (fabs(v33) >= 2.22044605e-16) {
        double v31 = sin(*(long double *)(v3 + 88)) / v33;
      }
      *(double *)(v4 + 88) = v31;
      double v34 = *(double *)(v3 + 96);
      double v35 = 1.0;
      double v36 = 1.0;
      if (fabs(v34) >= 2.22044605e-16) {
        double v36 = sin(*(long double *)(v3 + 96)) / v34;
      }
      *(double *)(v4 + 96) = v36;
      double v37 = *(double *)(v3 + 104);
      if (fabs(v37) >= 2.22044605e-16) {
        double v35 = sin(*(long double *)(v3 + 104)) / v37;
      }
      *(double *)(v4 + 104) = v35;
      double v38 = *(double *)(v3 + 112);
      double v39 = 1.0;
      if (fabs(v38) >= 2.22044605e-16)
      {
        *(long double *)(v4 + 112) = sin(*(long double *)(v3 + 112)) / v38;
        long double v40 = *(double *)(v3 + 120);
        if (fabs(v40) >= 2.22044605e-16) {
LABEL_40:
        }
          double v39 = sin(v40) / v40;
      }
      else
      {
        *(double *)(v4 + 112) = 1.0;
        long double v40 = *(double *)(v3 + 120);
        if (fabs(v40) >= 2.22044605e-16) {
          goto LABEL_40;
        }
      }
      *(double *)(v4 + 120) = v39;
      v3 += 128;
      v4 += 128;
    }
    while (v3 < v9);
  }
  int v41 = v6 - 1;
  unsigned int v42 = 0;
  unsigned int v43 = 0;
  unsigned int v44 = 0;
  unsigned int v45 = 0;
  unsigned int v46 = 0;
  unsigned int v47 = 0;
  unsigned int v48 = 0;
  unsigned int v49 = 0;
  unsigned int v50 = 0;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  switch(v41)
  {
    case 0:
      goto LABEL_84;
    case 1:
      goto LABEL_81;
    case 2:
      goto LABEL_78;
    case 3:
      goto LABEL_75;
    case 4:
      goto LABEL_72;
    case 5:
      goto LABEL_69;
    case 6:
      goto LABEL_66;
    case 7:
      goto LABEL_63;
    case 8:
      goto LABEL_60;
    case 9:
      goto LABEL_57;
    case 10:
      goto LABEL_54;
    case 11:
      goto LABEL_51;
    case 12:
      goto LABEL_48;
    case 13:
      goto LABEL_45;
    case 14:
      double v57 = 1.0;
      if (fabs(*(double *)v3) >= 2.22044605e-16)
      {
        double v56 = *(double *)v3;
        double v57 = sin(*(long double *)v3) / v56;
      }
      *(double *)uint64_t v4 = v57;
      unsigned int v42 = 1;
LABEL_45:
      long double v58 = *(double *)(v3 + 8 * v42);
      uint64_t v59 = v42;
      double v60 = 1.0;
      if (fabs(v58) >= 2.22044605e-16) {
        double v60 = sin(v58) / v58;
      }
      *(double *)(v4 + 8 * v59) = v60;
      unsigned int v43 = v59 + 1;
LABEL_48:
      double v61 = *(double *)(v3 + 8 * v43);
      uint64_t v62 = v43;
      double v63 = 1.0;
      if (fabs(v61) >= 2.22044605e-16) {
        double v63 = sin(*(long double *)(v3 + 8 * v43)) / v61;
      }
      *(double *)(v4 + 8 * v62) = v63;
      unsigned int v44 = v62 + 1;
LABEL_51:
      double v64 = *(double *)(v3 + 8 * v44);
      uint64_t v65 = v44;
      double v66 = 1.0;
      if (fabs(v64) >= 2.22044605e-16) {
        double v66 = sin(*(long double *)(v3 + 8 * v44)) / v64;
      }
      *(double *)(v4 + 8 * v65) = v66;
      unsigned int v45 = v65 + 1;
LABEL_54:
      double v67 = *(double *)(v3 + 8 * v45);
      uint64_t v68 = v45;
      double v69 = 1.0;
      if (fabs(v67) >= 2.22044605e-16) {
        double v69 = sin(*(long double *)(v3 + 8 * v45)) / v67;
      }
      *(double *)(v4 + 8 * v68) = v69;
      unsigned int v46 = v68 + 1;
LABEL_57:
      double v70 = *(double *)(v3 + 8 * v46);
      uint64_t v71 = v46;
      double v72 = 1.0;
      if (fabs(v70) >= 2.22044605e-16) {
        double v72 = sin(*(long double *)(v3 + 8 * v46)) / v70;
      }
      *(double *)(v4 + 8 * v71) = v72;
      unsigned int v47 = v71 + 1;
LABEL_60:
      double v73 = *(double *)(v3 + 8 * v47);
      uint64_t v74 = v47;
      double v75 = 1.0;
      if (fabs(v73) >= 2.22044605e-16) {
        double v75 = sin(*(long double *)(v3 + 8 * v47)) / v73;
      }
      *(double *)(v4 + 8 * v74) = v75;
      unsigned int v48 = v74 + 1;
LABEL_63:
      double v76 = *(double *)(v3 + 8 * v48);
      uint64_t v77 = v48;
      double v78 = 1.0;
      if (fabs(v76) >= 2.22044605e-16) {
        double v78 = sin(*(long double *)(v3 + 8 * v48)) / v76;
      }
      *(double *)(v4 + 8 * v77) = v78;
      unsigned int v49 = v77 + 1;
LABEL_66:
      double v79 = *(double *)(v3 + 8 * v49);
      uint64_t v80 = v49;
      double v81 = 1.0;
      if (fabs(v79) >= 2.22044605e-16) {
        double v81 = sin(*(long double *)(v3 + 8 * v49)) / v79;
      }
      *(double *)(v4 + 8 * v80) = v81;
      unsigned int v50 = v80 + 1;
LABEL_69:
      double v82 = *(double *)(v3 + 8 * v50);
      uint64_t v83 = v50;
      double v84 = 1.0;
      if (fabs(v82) >= 2.22044605e-16) {
        double v84 = sin(*(long double *)(v3 + 8 * v50)) / v82;
      }
      *(double *)(v4 + 8 * v83) = v84;
      uint64_t v51 = (v83 + 1);
LABEL_72:
      double v85 = *(double *)(v3 + 8 * v51);
      uint64_t v86 = v51;
      double v87 = 1.0;
      if (fabs(v85) >= 2.22044605e-16) {
        double v87 = sin(*(long double *)(v3 + 8 * v51)) / v85;
      }
      *(double *)(v4 + 8 * v86) = v87;
      uint64_t v52 = (v86 + 1);
LABEL_75:
      double v88 = *(double *)(v3 + 8 * v52);
      uint64_t v89 = v52;
      double v90 = 1.0;
      if (fabs(v88) >= 2.22044605e-16) {
        double v90 = sin(*(long double *)(v3 + 8 * v52)) / v88;
      }
      *(double *)(v4 + 8 * v89) = v90;
      uint64_t v53 = (v89 + 1);
LABEL_78:
      double v91 = *(double *)(v3 + 8 * v53);
      uint64_t v92 = v53;
      double v93 = 1.0;
      if (fabs(v91) >= 2.22044605e-16) {
        double v93 = sin(*(long double *)(v3 + 8 * v53)) / v91;
      }
      *(double *)(v4 + 8 * v92) = v93;
      uint64_t v54 = (v92 + 1);
LABEL_81:
      double v94 = *(double *)(v3 + 8 * v54);
      uint64_t v95 = v54;
      double v96 = 1.0;
      if (fabs(v94) >= 2.22044605e-16) {
        double v96 = sin(*(long double *)(v3 + 8 * v54)) / v94;
      }
      *(double *)(v4 + 8 * v95) = v96;
      uint64_t v55 = (v95 + 1);
LABEL_84:
      double v97 = *(double *)(v3 + 8 * v55);
      double v98 = 1.0;
      if (fabs(v97) >= 2.22044605e-16) {
        double v98 = sin(*(long double *)(v3 + 8 * v55)) / v97;
      }
      *(double *)(v4 + 8 * v55) = v98;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v51, v52, v53, v54)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v51, v52, v53, v54)+ 16);
}

uint64_t sub_F6B24()
{
  return 141;
}

uint64_t sub_F6B2C(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_F6B34(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_F6B3C(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_F6B7C(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_F6B84(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_F6B8C(uint64_t a1)
{
  return sub_F6C30(a1 - 32);
}

void sub_F6B94(uint64_t a1)
{
  sub_F6C30(a1 - 32);

  operator delete();
}

uint64_t sub_F6BD0(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 32) + 72))() + 8);
}

uint64_t sub_F6C10(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_F6C18(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_F6C20(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_F6C28(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_F6C30(uint64_t a1)
{
  *(void *)a1 = off_2401FB0;
  *(void *)(a1 + 32) = off_2402010;
  if (*(void *)(a1 + 48)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 64) = 0;
  }
  *(void *)a1 = off_23FFC00;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_F6D8C(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *(void *)a1 = off_23FFC00;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = a3;
  if (a3) {
    BOOL v5 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
  }
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
  else {
    BOOL v5 = 1;
  }
  *(unsigned char *)(a1 + 24) = v5;
  *(void *)a1 = off_2402098;
  *(void *)(a1 + 32) = off_24020F8;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  operator new();
}

void sub_F73C4(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_E08A0(v1);
  _Unwind_Resume(a1);
}

void sub_F746C(uint64_t a1)
{
  sub_F79BC(a1);

  operator delete();
}

double sub_F74A4(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 40);
  if (!v2) {
    return NAN;
  }
  uint64_t v3 = *(long double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 64))(v2) + 16);
  uint64_t v4 = *(long double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  int v6 = v5 & 0xF;
  if ((v5 & 0xF) != 0) {
    int v7 = -16;
  }
  else {
    int v7 = 0;
  }
  int64_t v8 = (unint64_t)(v7 + v5) << 32;
  if (v8 >= 1)
  {
    unint64_t v9 = (long double *)((char *)v3 + (v8 >> 29));
    do
    {
      *uint64_t v4 = sinh(*v3);
      v4[1] = sinh(v3[1]);
      v4[2] = sinh(v3[2]);
      v4[3] = sinh(v3[3]);
      v4[4] = sinh(v3[4]);
      v4[5] = sinh(v3[5]);
      v4[6] = sinh(v3[6]);
      v4[7] = sinh(v3[7]);
      v4[8] = sinh(v3[8]);
      v4[9] = sinh(v3[9]);
      v4[10] = sinh(v3[10]);
      v4[11] = sinh(v3[11]);
      v4[12] = sinh(v3[12]);
      v4[13] = sinh(v3[13]);
      v4[14] = sinh(v3[14]);
      v4[15] = sinh(v3[15]);
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v9);
  }
  int v10 = v6 - 1;
  uint64_t v31 = a1;
  unsigned int v11 = 0;
  unsigned int v12 = 0;
  unsigned int v13 = 0;
  unsigned int v14 = 0;
  unsigned int v15 = 0;
  int v16 = 0;
  int v17 = 0;
  int v18 = 0;
  int v19 = 0;
  uint64_t v20 = 0;
  int v21 = 0;
  int v22 = 0;
  int v23 = 0;
  uint64_t v24 = 0;
  switch(v10)
  {
    case 0:
      goto LABEL_23;
    case 1:
      goto LABEL_22;
    case 2:
      goto LABEL_21;
    case 3:
      goto LABEL_20;
    case 4:
      goto LABEL_19;
    case 5:
      goto LABEL_18;
    case 6:
      goto LABEL_17;
    case 7:
      goto LABEL_16;
    case 8:
      goto LABEL_15;
    case 9:
      goto LABEL_14;
    case 10:
      goto LABEL_13;
    case 11:
      goto LABEL_12;
    case 12:
      goto LABEL_11;
    case 13:
      goto LABEL_10;
    case 14:
      *uint64_t v4 = sinh(*v3);
      unsigned int v11 = 1;
LABEL_10:
      unsigned int v25 = v11;
      v4[v11] = sinh(v3[v11]);
      unsigned int v12 = v25 + 1;
LABEL_11:
      unsigned int v26 = v12;
      v4[v12] = sinh(v3[v12]);
      unsigned int v13 = v26 + 1;
LABEL_12:
      unsigned int v27 = v13;
      v4[v13] = sinh(v3[v13]);
      unsigned int v14 = v27 + 1;
LABEL_13:
      unsigned int v28 = v14;
      v4[v14] = sinh(v3[v14]);
      unsigned int v15 = v28 + 1;
LABEL_14:
      unsigned int v29 = v15;
      v4[v15] = sinh(v3[v15]);
      int v16 = v29 + 1;
LABEL_15:
      v4[v16] = sinh(v3[v16]);
      int v17 = v16 + 1;
LABEL_16:
      v4[v17] = sinh(v3[v17]);
      int v18 = v17 + 1;
LABEL_17:
      v4[v18] = sinh(v3[v18]);
      int v19 = v18 + 1;
LABEL_18:
      v4[v19] = sinh(v3[v19]);
      LODWORD(v20) = v19 + 1;
LABEL_19:
      v4[v20] = sinh(v3[v20]);
      int v21 = v20 + 1;
LABEL_20:
      v4[v21] = sinh(v3[v21]);
      int v22 = v21 + 1;
LABEL_21:
      v4[v22] = sinh(v3[v22]);
      int v23 = v22 + 1;
LABEL_22:
      v4[v23] = sinh(v3[v23]);
      uint64_t v24 = (v23 + 1);
LABEL_23:
      v4[v24] = sinh(v3[v24]);
      uint64_t v20 = v31;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v20 + 72))(v20) + 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v20 + 72))(v20) + 16);
}

uint64_t sub_F78B0()
{
  return 141;
}

uint64_t sub_F78B8(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_F78C0(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_F78C8(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_F7908(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_F7910(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_F7918(uint64_t a1)
{
  return sub_F79BC(a1 - 32);
}

void sub_F7920(uint64_t a1)
{
  sub_F79BC(a1 - 32);

  operator delete();
}

uint64_t sub_F795C(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 32) + 72))() + 8);
}

uint64_t sub_F799C(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_F79A4(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_F79AC(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_F79B4(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_F79BC(uint64_t a1)
{
  *(void *)a1 = off_2402098;
  *(void *)(a1 + 32) = off_24020F8;
  if (*(void *)(a1 + 48)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 64) = 0;
  }
  *(void *)a1 = off_23FFC00;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_F7B18(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *(void *)a1 = off_23FFC00;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = a3;
  if (a3) {
    BOOL v5 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
  }
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
  else {
    BOOL v5 = 1;
  }
  *(unsigned char *)(a1 + 24) = v5;
  *(void *)a1 = off_2402180;
  *(void *)(a1 + 32) = off_24021E0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  operator new();
}

void sub_F8150(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_E08A0(v1);
  _Unwind_Resume(a1);
}

void sub_F81F8(uint64_t a1)
{
  sub_F8718(a1);

  operator delete();
}

double sub_F8230(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 40);
  if (!v2) {
    return NAN;
  }
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 64))(v2) + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v5) << 32;
  if (v7 >= 1)
  {
    int64_t v8 = (double *)((char *)v3 + (v7 >> 29));
    do
    {
      *uint64_t v4 = sqrt(*v3);
      v4[1] = sqrt(v3[1]);
      v4[2] = sqrt(v3[2]);
      v4[3] = sqrt(v3[3]);
      v4[4] = sqrt(v3[4]);
      v4[5] = sqrt(v3[5]);
      v4[6] = sqrt(v3[6]);
      v4[7] = sqrt(v3[7]);
      v4[8] = sqrt(v3[8]);
      v4[9] = sqrt(v3[9]);
      v4[10] = sqrt(v3[10]);
      v4[11] = sqrt(v3[11]);
      v4[12] = sqrt(v3[12]);
      v4[13] = sqrt(v3[13]);
      v4[14] = sqrt(v3[14]);
      v4[15] = sqrt(v3[15]);
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v8);
  }
  int v9 = (v5 & 0xF) - 1;
  unsigned int v10 = 0;
  unsigned int v11 = 0;
  unsigned int v12 = 0;
  unsigned int v13 = 0;
  unsigned int v14 = 0;
  unsigned int v15 = 0;
  unsigned int v16 = 0;
  unsigned int v17 = 0;
  unsigned int v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  switch(v9)
  {
    case 0:
      goto LABEL_23;
    case 1:
      goto LABEL_22;
    case 2:
      goto LABEL_21;
    case 3:
      goto LABEL_20;
    case 4:
      goto LABEL_19;
    case 5:
      goto LABEL_18;
    case 6:
      goto LABEL_17;
    case 7:
      goto LABEL_16;
    case 8:
      goto LABEL_15;
    case 9:
      goto LABEL_14;
    case 10:
      goto LABEL_13;
    case 11:
      goto LABEL_12;
    case 12:
      goto LABEL_11;
    case 13:
      goto LABEL_10;
    case 14:
      *uint64_t v4 = sqrt(*v3);
      unsigned int v10 = 1;
LABEL_10:
      v4[v10] = sqrt(v3[v10]);
      unsigned int v11 = v10 + 1;
LABEL_11:
      v4[v11] = sqrt(v3[v11]);
      unsigned int v12 = v11 + 1;
LABEL_12:
      v4[v12] = sqrt(v3[v12]);
      unsigned int v13 = v12 + 1;
LABEL_13:
      v4[v13] = sqrt(v3[v13]);
      unsigned int v14 = v13 + 1;
LABEL_14:
      v4[v14] = sqrt(v3[v14]);
      unsigned int v15 = v14 + 1;
LABEL_15:
      v4[v15] = sqrt(v3[v15]);
      unsigned int v16 = v15 + 1;
LABEL_16:
      v4[v16] = sqrt(v3[v16]);
      unsigned int v17 = v16 + 1;
LABEL_17:
      v4[v17] = sqrt(v3[v17]);
      unsigned int v18 = v17 + 1;
LABEL_18:
      v4[v18] = sqrt(v3[v18]);
      uint64_t v19 = v18 + 1;
LABEL_19:
      v4[v19] = sqrt(v3[v19]);
      uint64_t v20 = (v19 + 1);
LABEL_20:
      v4[v20] = sqrt(v3[v20]);
      uint64_t v21 = (v20 + 1);
LABEL_21:
      v4[v21] = sqrt(v3[v21]);
      uint64_t v22 = (v21 + 1);
LABEL_22:
      v4[v22] = sqrt(v3[v22]);
      uint64_t v23 = (v22 + 1);
LABEL_23:
      v4[v23] = sqrt(v3[v23]);
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v19, v20, v21, v22, v23)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v19, v20, v21, v22, v23)+ 16);
}

uint64_t sub_F860C()
{
  return 141;
}

uint64_t sub_F8614(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_F861C(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_F8624(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_F8664(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_F866C(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_F8674(uint64_t a1)
{
  return sub_F8718(a1 - 32);
}

void sub_F867C(uint64_t a1)
{
  sub_F8718(a1 - 32);

  operator delete();
}

uint64_t sub_F86B8(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 32) + 72))() + 8);
}

uint64_t sub_F86F8(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_F8700(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_F8708(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_F8710(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_F8718(uint64_t a1)
{
  *(void *)a1 = off_2402180;
  *(void *)(a1 + 32) = off_24021E0;
  if (*(void *)(a1 + 48)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 64) = 0;
  }
  *(void *)a1 = off_23FFC00;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_F8874(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *(void *)a1 = off_23FFC00;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = a3;
  if (a3) {
    BOOL v5 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
  }
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
  else {
    BOOL v5 = 1;
  }
  *(unsigned char *)(a1 + 24) = v5;
  *(void *)a1 = off_2402268;
  *(void *)(a1 + 32) = off_24022C8;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  operator new();
}

void sub_F8EAC(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_E08A0(v1);
  _Unwind_Resume(a1);
}

void sub_F8F54(uint64_t a1)
{
  sub_F94A4(a1);

  operator delete();
}

double sub_F8F8C(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 40);
  if (!v2) {
    return NAN;
  }
  uint64_t v3 = *(long double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 64))(v2) + 16);
  uint64_t v4 = *(long double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  int v6 = v5 & 0xF;
  if ((v5 & 0xF) != 0) {
    int v7 = -16;
  }
  else {
    int v7 = 0;
  }
  int64_t v8 = (unint64_t)(v7 + v5) << 32;
  if (v8 >= 1)
  {
    int v9 = (long double *)((char *)v3 + (v8 >> 29));
    do
    {
      *uint64_t v4 = tan(*v3);
      v4[1] = tan(v3[1]);
      v4[2] = tan(v3[2]);
      v4[3] = tan(v3[3]);
      v4[4] = tan(v3[4]);
      v4[5] = tan(v3[5]);
      v4[6] = tan(v3[6]);
      v4[7] = tan(v3[7]);
      v4[8] = tan(v3[8]);
      v4[9] = tan(v3[9]);
      v4[10] = tan(v3[10]);
      v4[11] = tan(v3[11]);
      v4[12] = tan(v3[12]);
      v4[13] = tan(v3[13]);
      v4[14] = tan(v3[14]);
      v4[15] = tan(v3[15]);
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v9);
  }
  int v10 = v6 - 1;
  uint64_t v31 = a1;
  unsigned int v11 = 0;
  unsigned int v12 = 0;
  unsigned int v13 = 0;
  unsigned int v14 = 0;
  unsigned int v15 = 0;
  int v16 = 0;
  int v17 = 0;
  int v18 = 0;
  int v19 = 0;
  uint64_t v20 = 0;
  int v21 = 0;
  int v22 = 0;
  int v23 = 0;
  uint64_t v24 = 0;
  switch(v10)
  {
    case 0:
      goto LABEL_23;
    case 1:
      goto LABEL_22;
    case 2:
      goto LABEL_21;
    case 3:
      goto LABEL_20;
    case 4:
      goto LABEL_19;
    case 5:
      goto LABEL_18;
    case 6:
      goto LABEL_17;
    case 7:
      goto LABEL_16;
    case 8:
      goto LABEL_15;
    case 9:
      goto LABEL_14;
    case 10:
      goto LABEL_13;
    case 11:
      goto LABEL_12;
    case 12:
      goto LABEL_11;
    case 13:
      goto LABEL_10;
    case 14:
      *uint64_t v4 = tan(*v3);
      unsigned int v11 = 1;
LABEL_10:
      unsigned int v25 = v11;
      v4[v11] = tan(v3[v11]);
      unsigned int v12 = v25 + 1;
LABEL_11:
      unsigned int v26 = v12;
      v4[v12] = tan(v3[v12]);
      unsigned int v13 = v26 + 1;
LABEL_12:
      unsigned int v27 = v13;
      v4[v13] = tan(v3[v13]);
      unsigned int v14 = v27 + 1;
LABEL_13:
      unsigned int v28 = v14;
      v4[v14] = tan(v3[v14]);
      unsigned int v15 = v28 + 1;
LABEL_14:
      unsigned int v29 = v15;
      v4[v15] = tan(v3[v15]);
      int v16 = v29 + 1;
LABEL_15:
      v4[v16] = tan(v3[v16]);
      int v17 = v16 + 1;
LABEL_16:
      v4[v17] = tan(v3[v17]);
      int v18 = v17 + 1;
LABEL_17:
      v4[v18] = tan(v3[v18]);
      int v19 = v18 + 1;
LABEL_18:
      v4[v19] = tan(v3[v19]);
      LODWORD(v20) = v19 + 1;
LABEL_19:
      v4[v20] = tan(v3[v20]);
      int v21 = v20 + 1;
LABEL_20:
      v4[v21] = tan(v3[v21]);
      int v22 = v21 + 1;
LABEL_21:
      v4[v22] = tan(v3[v22]);
      int v23 = v22 + 1;
LABEL_22:
      v4[v23] = tan(v3[v23]);
      uint64_t v24 = (v23 + 1);
LABEL_23:
      v4[v24] = tan(v3[v24]);
      uint64_t v20 = v31;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v20 + 72))(v20) + 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v20 + 72))(v20) + 16);
}

uint64_t sub_F9398()
{
  return 141;
}

uint64_t sub_F93A0(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_F93A8(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_F93B0(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_F93F0(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_F93F8(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_F9400(uint64_t a1)
{
  return sub_F94A4(a1 - 32);
}

void sub_F9408(uint64_t a1)
{
  sub_F94A4(a1 - 32);

  operator delete();
}

uint64_t sub_F9444(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 32) + 72))() + 8);
}

uint64_t sub_F9484(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_F948C(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_F9494(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_F949C(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_F94A4(uint64_t a1)
{
  *(void *)a1 = off_2402268;
  *(void *)(a1 + 32) = off_24022C8;
  if (*(void *)(a1 + 48)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 64) = 0;
  }
  *(void *)a1 = off_23FFC00;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_F9600(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *(void *)a1 = off_23FFC00;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = a3;
  if (a3) {
    BOOL v5 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
  }
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
  else {
    BOOL v5 = 1;
  }
  *(unsigned char *)(a1 + 24) = v5;
  *(void *)a1 = off_2402350;
  *(void *)(a1 + 32) = off_24023B0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  operator new();
}

void sub_F9C38(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_E08A0(v1);
  _Unwind_Resume(a1);
}

void sub_F9CE0(uint64_t a1)
{
  sub_FA230(a1);

  operator delete();
}

double sub_F9D18(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 40);
  if (!v2) {
    return NAN;
  }
  uint64_t v3 = *(long double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 64))(v2) + 16);
  uint64_t v4 = *(long double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  int v6 = v5 & 0xF;
  if ((v5 & 0xF) != 0) {
    int v7 = -16;
  }
  else {
    int v7 = 0;
  }
  int64_t v8 = (unint64_t)(v7 + v5) << 32;
  if (v8 >= 1)
  {
    int v9 = (long double *)((char *)v3 + (v8 >> 29));
    do
    {
      *uint64_t v4 = tanh(*v3);
      v4[1] = tanh(v3[1]);
      v4[2] = tanh(v3[2]);
      v4[3] = tanh(v3[3]);
      v4[4] = tanh(v3[4]);
      v4[5] = tanh(v3[5]);
      v4[6] = tanh(v3[6]);
      v4[7] = tanh(v3[7]);
      v4[8] = tanh(v3[8]);
      v4[9] = tanh(v3[9]);
      v4[10] = tanh(v3[10]);
      v4[11] = tanh(v3[11]);
      v4[12] = tanh(v3[12]);
      v4[13] = tanh(v3[13]);
      v4[14] = tanh(v3[14]);
      v4[15] = tanh(v3[15]);
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v9);
  }
  int v10 = v6 - 1;
  uint64_t v31 = a1;
  unsigned int v11 = 0;
  unsigned int v12 = 0;
  unsigned int v13 = 0;
  unsigned int v14 = 0;
  unsigned int v15 = 0;
  int v16 = 0;
  int v17 = 0;
  int v18 = 0;
  int v19 = 0;
  uint64_t v20 = 0;
  int v21 = 0;
  int v22 = 0;
  int v23 = 0;
  uint64_t v24 = 0;
  switch(v10)
  {
    case 0:
      goto LABEL_23;
    case 1:
      goto LABEL_22;
    case 2:
      goto LABEL_21;
    case 3:
      goto LABEL_20;
    case 4:
      goto LABEL_19;
    case 5:
      goto LABEL_18;
    case 6:
      goto LABEL_17;
    case 7:
      goto LABEL_16;
    case 8:
      goto LABEL_15;
    case 9:
      goto LABEL_14;
    case 10:
      goto LABEL_13;
    case 11:
      goto LABEL_12;
    case 12:
      goto LABEL_11;
    case 13:
      goto LABEL_10;
    case 14:
      *uint64_t v4 = tanh(*v3);
      unsigned int v11 = 1;
LABEL_10:
      unsigned int v25 = v11;
      v4[v11] = tanh(v3[v11]);
      unsigned int v12 = v25 + 1;
LABEL_11:
      unsigned int v26 = v12;
      v4[v12] = tanh(v3[v12]);
      unsigned int v13 = v26 + 1;
LABEL_12:
      unsigned int v27 = v13;
      v4[v13] = tanh(v3[v13]);
      unsigned int v14 = v27 + 1;
LABEL_13:
      unsigned int v28 = v14;
      v4[v14] = tanh(v3[v14]);
      unsigned int v15 = v28 + 1;
LABEL_14:
      unsigned int v29 = v15;
      v4[v15] = tanh(v3[v15]);
      int v16 = v29 + 1;
LABEL_15:
      v4[v16] = tanh(v3[v16]);
      int v17 = v16 + 1;
LABEL_16:
      v4[v17] = tanh(v3[v17]);
      int v18 = v17 + 1;
LABEL_17:
      v4[v18] = tanh(v3[v18]);
      int v19 = v18 + 1;
LABEL_18:
      v4[v19] = tanh(v3[v19]);
      LODWORD(v20) = v19 + 1;
LABEL_19:
      v4[v20] = tanh(v3[v20]);
      int v21 = v20 + 1;
LABEL_20:
      v4[v21] = tanh(v3[v21]);
      int v22 = v21 + 1;
LABEL_21:
      v4[v22] = tanh(v3[v22]);
      int v23 = v22 + 1;
LABEL_22:
      v4[v23] = tanh(v3[v23]);
      uint64_t v24 = (v23 + 1);
LABEL_23:
      v4[v24] = tanh(v3[v24]);
      uint64_t v20 = v31;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v20 + 72))(v20) + 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v20 + 72))(v20) + 16);
}

uint64_t sub_FA124()
{
  return 141;
}

uint64_t sub_FA12C(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_FA134(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_FA13C(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_FA17C(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_FA184(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_FA18C(uint64_t a1)
{
  return sub_FA230(a1 - 32);
}

void sub_FA194(uint64_t a1)
{
  sub_FA230(a1 - 32);

  operator delete();
}

uint64_t sub_FA1D0(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 32) + 72))() + 8);
}

uint64_t sub_FA210(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_FA218(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_FA220(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_FA228(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_FA230(uint64_t a1)
{
  *(void *)a1 = off_2402350;
  *(void *)(a1 + 32) = off_24023B0;
  if (*(void *)(a1 + 48)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 64) = 0;
  }
  *(void *)a1 = off_23FFC00;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_FA38C(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *(void *)a1 = off_23FFC00;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = a3;
  if (a3) {
    BOOL v5 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
  }
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
  else {
    BOOL v5 = 1;
  }
  *(unsigned char *)(a1 + 24) = v5;
  *(void *)a1 = off_2402438;
  *(void *)(a1 + 32) = off_2402498;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  operator new();
}

void sub_FA9C4(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_E08A0(v1);
  _Unwind_Resume(a1);
}

void sub_FAA6C(uint64_t a1)
{
  sub_FB080(a1);

  operator delete();
}

uint64_t sub_FAAA4(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    uint64_t v3 = *(long double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)result + 64))(result) + 16);
    uint64_t v4 = *(long double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    int v6 = v5 & 0xF;
    if ((v5 & 0xF) != 0) {
      int v7 = -16;
    }
    else {
      int v7 = 0;
    }
    int64_t v8 = (unint64_t)(v7 + v5) << 32;
    if (v8 >= 1)
    {
      int v9 = (long double *)((char *)v3 + (v8 >> 29));
      do
      {
        *uint64_t v4 = 1.0 / tan(*v3);
        v4[1] = 1.0 / tan(v3[1]);
        v4[2] = 1.0 / tan(v3[2]);
        v4[3] = 1.0 / tan(v3[3]);
        v4[4] = 1.0 / tan(v3[4]);
        v4[5] = 1.0 / tan(v3[5]);
        v4[6] = 1.0 / tan(v3[6]);
        v4[7] = 1.0 / tan(v3[7]);
        v4[8] = 1.0 / tan(v3[8]);
        v4[9] = 1.0 / tan(v3[9]);
        v4[10] = 1.0 / tan(v3[10]);
        v4[11] = 1.0 / tan(v3[11]);
        v4[12] = 1.0 / tan(v3[12]);
        v4[13] = 1.0 / tan(v3[13]);
        v4[14] = 1.0 / tan(v3[14]);
        v4[15] = 1.0 / tan(v3[15]);
        v3 += 16;
        v4 += 16;
      }
      while (v3 < v9);
    }
    int v10 = v6 - 1;
    uint64_t v30 = a1;
    unsigned int v11 = 0;
    unsigned int v12 = 0;
    unsigned int v13 = 0;
    unsigned int v14 = 0;
    unsigned int v15 = 0;
    int v16 = 0;
    int v17 = 0;
    int v18 = 0;
    int v19 = 0;
    uint64_t v20 = 0;
    int v21 = 0;
    int v22 = 0;
    int v23 = 0;
    uint64_t v24 = 0;
    switch(v10)
    {
      case 0:
        goto LABEL_23;
      case 1:
        goto LABEL_22;
      case 2:
        goto LABEL_21;
      case 3:
        goto LABEL_20;
      case 4:
        goto LABEL_19;
      case 5:
        goto LABEL_18;
      case 6:
        goto LABEL_17;
      case 7:
        goto LABEL_16;
      case 8:
        goto LABEL_15;
      case 9:
        goto LABEL_14;
      case 10:
        goto LABEL_13;
      case 11:
        goto LABEL_12;
      case 12:
        goto LABEL_11;
      case 13:
        goto LABEL_10;
      case 14:
        *uint64_t v4 = 1.0 / tan(*v3);
        unsigned int v11 = 1;
LABEL_10:
        unsigned int v25 = v11;
        v4[v11] = 1.0 / tan(v3[v11]);
        unsigned int v12 = v25 + 1;
LABEL_11:
        unsigned int v26 = v12;
        v4[v12] = 1.0 / tan(v3[v12]);
        unsigned int v13 = v26 + 1;
LABEL_12:
        unsigned int v27 = v13;
        v4[v13] = 1.0 / tan(v3[v13]);
        unsigned int v14 = v27 + 1;
LABEL_13:
        unsigned int v28 = v14;
        v4[v14] = 1.0 / tan(v3[v14]);
        unsigned int v15 = v28 + 1;
LABEL_14:
        unsigned int v29 = v15;
        v4[v15] = 1.0 / tan(v3[v15]);
        int v16 = v29 + 1;
LABEL_15:
        v4[v16] = 1.0 / tan(v3[v16]);
        int v17 = v16 + 1;
LABEL_16:
        v4[v17] = 1.0 / tan(v3[v17]);
        int v18 = v17 + 1;
LABEL_17:
        v4[v18] = 1.0 / tan(v3[v18]);
        int v19 = v18 + 1;
LABEL_18:
        v4[v19] = 1.0 / tan(v3[v19]);
        LODWORD(v20) = v19 + 1;
LABEL_19:
        v4[v20] = 1.0 / tan(v3[v20]);
        int v21 = v20 + 1;
LABEL_20:
        v4[v21] = 1.0 / tan(v3[v21]);
        int v22 = v21 + 1;
LABEL_21:
        v4[v22] = 1.0 / tan(v3[v22]);
        int v23 = v22 + 1;
LABEL_22:
        v4[v23] = 1.0 / tan(v3[v23]);
        uint64_t v24 = (v23 + 1);
LABEL_23:
        v4[v24] = 1.0 / tan(v3[v24]);
        uint64_t v20 = v30;
        break;
      default:
        return (*(uint64_t (**)(uint64_t))(*(void *)v20 + 72))(v20);
    }
    return (*(uint64_t (**)(uint64_t))(*(void *)v20 + 72))(v20);
  }
  return result;
}

uint64_t sub_FAF74()
{
  return 141;
}

uint64_t sub_FAF7C(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_FAF84(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_FAF8C(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_FAFCC(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_FAFD4(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_FAFDC(uint64_t a1)
{
  return sub_FB080(a1 - 32);
}

void sub_FAFE4(uint64_t a1)
{
  sub_FB080(a1 - 32);

  operator delete();
}

uint64_t sub_FB020(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 32) + 72))() + 8);
}

uint64_t sub_FB060(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_FB068(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_FB070(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_FB078(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_FB080(uint64_t a1)
{
  *(void *)a1 = off_2402438;
  *(void *)(a1 + 32) = off_2402498;
  if (*(void *)(a1 + 48)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 64) = 0;
  }
  *(void *)a1 = off_23FFC00;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_FB1DC(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *(void *)a1 = off_23FFC00;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = a3;
  if (a3) {
    BOOL v5 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
  }
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
  else {
    BOOL v5 = 1;
  }
  *(unsigned char *)(a1 + 24) = v5;
  *(void *)a1 = off_2402520;
  *(void *)(a1 + 32) = off_2402580;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  operator new();
}

void sub_FB814(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_E08A0(v1);
  _Unwind_Resume(a1);
}

void sub_FB8BC(uint64_t a1)
{
  sub_FBED0(a1);

  operator delete();
}

uint64_t sub_FB8F4(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    uint64_t v3 = *(long double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)result + 64))(result) + 16);
    uint64_t v4 = *(long double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    int v6 = v5 & 0xF;
    if ((v5 & 0xF) != 0) {
      int v7 = -16;
    }
    else {
      int v7 = 0;
    }
    int64_t v8 = (unint64_t)(v7 + v5) << 32;
    if (v8 >= 1)
    {
      int v9 = (long double *)((char *)v3 + (v8 >> 29));
      do
      {
        *uint64_t v4 = 1.0 / cos(*v3);
        v4[1] = 1.0 / cos(v3[1]);
        v4[2] = 1.0 / cos(v3[2]);
        v4[3] = 1.0 / cos(v3[3]);
        v4[4] = 1.0 / cos(v3[4]);
        v4[5] = 1.0 / cos(v3[5]);
        v4[6] = 1.0 / cos(v3[6]);
        v4[7] = 1.0 / cos(v3[7]);
        v4[8] = 1.0 / cos(v3[8]);
        v4[9] = 1.0 / cos(v3[9]);
        v4[10] = 1.0 / cos(v3[10]);
        v4[11] = 1.0 / cos(v3[11]);
        v4[12] = 1.0 / cos(v3[12]);
        v4[13] = 1.0 / cos(v3[13]);
        v4[14] = 1.0 / cos(v3[14]);
        v4[15] = 1.0 / cos(v3[15]);
        v3 += 16;
        v4 += 16;
      }
      while (v3 < v9);
    }
    int v10 = v6 - 1;
    uint64_t v30 = a1;
    unsigned int v11 = 0;
    unsigned int v12 = 0;
    unsigned int v13 = 0;
    unsigned int v14 = 0;
    unsigned int v15 = 0;
    int v16 = 0;
    int v17 = 0;
    int v18 = 0;
    int v19 = 0;
    uint64_t v20 = 0;
    int v21 = 0;
    int v22 = 0;
    int v23 = 0;
    uint64_t v24 = 0;
    switch(v10)
    {
      case 0:
        goto LABEL_23;
      case 1:
        goto LABEL_22;
      case 2:
        goto LABEL_21;
      case 3:
        goto LABEL_20;
      case 4:
        goto LABEL_19;
      case 5:
        goto LABEL_18;
      case 6:
        goto LABEL_17;
      case 7:
        goto LABEL_16;
      case 8:
        goto LABEL_15;
      case 9:
        goto LABEL_14;
      case 10:
        goto LABEL_13;
      case 11:
        goto LABEL_12;
      case 12:
        goto LABEL_11;
      case 13:
        goto LABEL_10;
      case 14:
        *uint64_t v4 = 1.0 / cos(*v3);
        unsigned int v11 = 1;
LABEL_10:
        unsigned int v25 = v11;
        v4[v11] = 1.0 / cos(v3[v11]);
        unsigned int v12 = v25 + 1;
LABEL_11:
        unsigned int v26 = v12;
        v4[v12] = 1.0 / cos(v3[v12]);
        unsigned int v13 = v26 + 1;
LABEL_12:
        unsigned int v27 = v13;
        v4[v13] = 1.0 / cos(v3[v13]);
        unsigned int v14 = v27 + 1;
LABEL_13:
        unsigned int v28 = v14;
        v4[v14] = 1.0 / cos(v3[v14]);
        unsigned int v15 = v28 + 1;
LABEL_14:
        unsigned int v29 = v15;
        v4[v15] = 1.0 / cos(v3[v15]);
        int v16 = v29 + 1;
LABEL_15:
        v4[v16] = 1.0 / cos(v3[v16]);
        int v17 = v16 + 1;
LABEL_16:
        v4[v17] = 1.0 / cos(v3[v17]);
        int v18 = v17 + 1;
LABEL_17:
        v4[v18] = 1.0 / cos(v3[v18]);
        int v19 = v18 + 1;
LABEL_18:
        v4[v19] = 1.0 / cos(v3[v19]);
        LODWORD(v20) = v19 + 1;
LABEL_19:
        v4[v20] = 1.0 / cos(v3[v20]);
        int v21 = v20 + 1;
LABEL_20:
        v4[v21] = 1.0 / cos(v3[v21]);
        int v22 = v21 + 1;
LABEL_21:
        v4[v22] = 1.0 / cos(v3[v22]);
        int v23 = v22 + 1;
LABEL_22:
        v4[v23] = 1.0 / cos(v3[v23]);
        uint64_t v24 = (v23 + 1);
LABEL_23:
        v4[v24] = 1.0 / cos(v3[v24]);
        uint64_t v20 = v30;
        break;
      default:
        return (*(uint64_t (**)(uint64_t))(*(void *)v20 + 72))(v20);
    }
    return (*(uint64_t (**)(uint64_t))(*(void *)v20 + 72))(v20);
  }
  return result;
}

uint64_t sub_FBDC4()
{
  return 141;
}

uint64_t sub_FBDCC(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_FBDD4(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_FBDDC(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_FBE1C(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_FBE24(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_FBE2C(uint64_t a1)
{
  return sub_FBED0(a1 - 32);
}

void sub_FBE34(uint64_t a1)
{
  sub_FBED0(a1 - 32);

  operator delete();
}

uint64_t sub_FBE70(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 32) + 72))() + 8);
}

uint64_t sub_FBEB0(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_FBEB8(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_FBEC0(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_FBEC8(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_FBED0(uint64_t a1)
{
  *(void *)a1 = off_2402520;
  *(void *)(a1 + 32) = off_2402580;
  if (*(void *)(a1 + 48)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 64) = 0;
  }
  *(void *)a1 = off_23FFC00;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_FC02C(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *(void *)a1 = off_23FFC00;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = a3;
  if (a3) {
    BOOL v5 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
  }
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
  else {
    BOOL v5 = 1;
  }
  *(unsigned char *)(a1 + 24) = v5;
  *(void *)a1 = off_2402608;
  *(void *)(a1 + 32) = off_2402668;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  operator new();
}

void sub_FC664(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_E08A0(v1);
  _Unwind_Resume(a1);
}

void sub_FC70C(uint64_t a1)
{
  sub_FCD20(a1);

  operator delete();
}

uint64_t sub_FC744(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    uint64_t v3 = *(long double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)result + 64))(result) + 16);
    uint64_t v4 = *(long double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    int v6 = v5 & 0xF;
    if ((v5 & 0xF) != 0) {
      int v7 = -16;
    }
    else {
      int v7 = 0;
    }
    int64_t v8 = (unint64_t)(v7 + v5) << 32;
    if (v8 >= 1)
    {
      int v9 = (long double *)((char *)v3 + (v8 >> 29));
      do
      {
        *uint64_t v4 = 1.0 / sin(*v3);
        v4[1] = 1.0 / sin(v3[1]);
        v4[2] = 1.0 / sin(v3[2]);
        v4[3] = 1.0 / sin(v3[3]);
        v4[4] = 1.0 / sin(v3[4]);
        v4[5] = 1.0 / sin(v3[5]);
        v4[6] = 1.0 / sin(v3[6]);
        v4[7] = 1.0 / sin(v3[7]);
        v4[8] = 1.0 / sin(v3[8]);
        v4[9] = 1.0 / sin(v3[9]);
        v4[10] = 1.0 / sin(v3[10]);
        v4[11] = 1.0 / sin(v3[11]);
        v4[12] = 1.0 / sin(v3[12]);
        v4[13] = 1.0 / sin(v3[13]);
        v4[14] = 1.0 / sin(v3[14]);
        v4[15] = 1.0 / sin(v3[15]);
        v3 += 16;
        v4 += 16;
      }
      while (v3 < v9);
    }
    int v10 = v6 - 1;
    uint64_t v30 = a1;
    unsigned int v11 = 0;
    unsigned int v12 = 0;
    unsigned int v13 = 0;
    unsigned int v14 = 0;
    unsigned int v15 = 0;
    int v16 = 0;
    int v17 = 0;
    int v18 = 0;
    int v19 = 0;
    uint64_t v20 = 0;
    int v21 = 0;
    int v22 = 0;
    int v23 = 0;
    uint64_t v24 = 0;
    switch(v10)
    {
      case 0:
        goto LABEL_23;
      case 1:
        goto LABEL_22;
      case 2:
        goto LABEL_21;
      case 3:
        goto LABEL_20;
      case 4:
        goto LABEL_19;
      case 5:
        goto LABEL_18;
      case 6:
        goto LABEL_17;
      case 7:
        goto LABEL_16;
      case 8:
        goto LABEL_15;
      case 9:
        goto LABEL_14;
      case 10:
        goto LABEL_13;
      case 11:
        goto LABEL_12;
      case 12:
        goto LABEL_11;
      case 13:
        goto LABEL_10;
      case 14:
        *uint64_t v4 = 1.0 / sin(*v3);
        unsigned int v11 = 1;
LABEL_10:
        unsigned int v25 = v11;
        v4[v11] = 1.0 / sin(v3[v11]);
        unsigned int v12 = v25 + 1;
LABEL_11:
        unsigned int v26 = v12;
        v4[v12] = 1.0 / sin(v3[v12]);
        unsigned int v13 = v26 + 1;
LABEL_12:
        unsigned int v27 = v13;
        v4[v13] = 1.0 / sin(v3[v13]);
        unsigned int v14 = v27 + 1;
LABEL_13:
        unsigned int v28 = v14;
        v4[v14] = 1.0 / sin(v3[v14]);
        unsigned int v15 = v28 + 1;
LABEL_14:
        unsigned int v29 = v15;
        v4[v15] = 1.0 / sin(v3[v15]);
        int v16 = v29 + 1;
LABEL_15:
        v4[v16] = 1.0 / sin(v3[v16]);
        int v17 = v16 + 1;
LABEL_16:
        v4[v17] = 1.0 / sin(v3[v17]);
        int v18 = v17 + 1;
LABEL_17:
        v4[v18] = 1.0 / sin(v3[v18]);
        int v19 = v18 + 1;
LABEL_18:
        v4[v19] = 1.0 / sin(v3[v19]);
        LODWORD(v20) = v19 + 1;
LABEL_19:
        v4[v20] = 1.0 / sin(v3[v20]);
        int v21 = v20 + 1;
LABEL_20:
        v4[v21] = 1.0 / sin(v3[v21]);
        int v22 = v21 + 1;
LABEL_21:
        v4[v22] = 1.0 / sin(v3[v22]);
        int v23 = v22 + 1;
LABEL_22:
        v4[v23] = 1.0 / sin(v3[v23]);
        uint64_t v24 = (v23 + 1);
LABEL_23:
        v4[v24] = 1.0 / sin(v3[v24]);
        uint64_t v20 = v30;
        break;
      default:
        return (*(uint64_t (**)(uint64_t))(*(void *)v20 + 72))(v20);
    }
    return (*(uint64_t (**)(uint64_t))(*(void *)v20 + 72))(v20);
  }
  return result;
}

uint64_t sub_FCC14()
{
  return 141;
}

uint64_t sub_FCC1C(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_FCC24(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_FCC2C(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_FCC6C(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_FCC74(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_FCC7C(uint64_t a1)
{
  return sub_FCD20(a1 - 32);
}

void sub_FCC84(uint64_t a1)
{
  sub_FCD20(a1 - 32);

  operator delete();
}

uint64_t sub_FCCC0(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 32) + 72))() + 8);
}

uint64_t sub_FCD00(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_FCD08(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_FCD10(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_FCD18(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_FCD20(uint64_t a1)
{
  *(void *)a1 = off_2402608;
  *(void *)(a1 + 32) = off_2402668;
  if (*(void *)(a1 + 48)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 64) = 0;
  }
  *(void *)a1 = off_23FFC00;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_FCE7C(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *(void *)a1 = off_23FFC00;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = a3;
  if (a3) {
    BOOL v5 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
  }
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
  else {
    BOOL v5 = 1;
  }
  *(unsigned char *)(a1 + 24) = v5;
  *(void *)a1 = off_24026F0;
  *(void *)(a1 + 32) = off_2402750;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  operator new();
}

void sub_FD4B4(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_E08A0(v1);
  _Unwind_Resume(a1);
}

void sub_FD55C(uint64_t a1)
{
  sub_FDAC0(a1);

  operator delete();
}

double sub_FD594(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 40);
  if (!v2) {
    return NAN;
  }
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 64))(v2) + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  if ((uint64_t)((unint64_t)(v6 + v5) << 32) >= 1)
  {
    int v7 = &v3[v6 + v5];
    do
    {
      *uint64_t v4 = *v3 * 57.2957795;
      v4[1] = v3[1] * 57.2957795;
      v4[2] = v3[2] * 57.2957795;
      v4[3] = v3[3] * 57.2957795;
      v4[4] = v3[4] * 57.2957795;
      v4[5] = v3[5] * 57.2957795;
      v4[6] = v3[6] * 57.2957795;
      v4[7] = v3[7] * 57.2957795;
      v4[8] = v3[8] * 57.2957795;
      v4[9] = v3[9] * 57.2957795;
      v4[10] = v3[10] * 57.2957795;
      v4[11] = v3[11] * 57.2957795;
      v4[12] = v3[12] * 57.2957795;
      v4[13] = v3[13] * 57.2957795;
      v4[14] = v3[14] * 57.2957795;
      v4[15] = v3[15] * 57.2957795;
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v7);
  }
  int v8 = (v5 & 0xF) - 1;
  unsigned int v9 = 0;
  unsigned int v10 = 0;
  unsigned int v11 = 0;
  unsigned int v12 = 0;
  unsigned int v13 = 0;
  unsigned int v14 = 0;
  unsigned int v15 = 0;
  unsigned int v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  switch(v8)
  {
    case 0:
      goto LABEL_23;
    case 1:
      goto LABEL_22;
    case 2:
      goto LABEL_21;
    case 3:
      goto LABEL_20;
    case 4:
      goto LABEL_19;
    case 5:
      goto LABEL_18;
    case 6:
      goto LABEL_17;
    case 7:
      goto LABEL_16;
    case 8:
      goto LABEL_15;
    case 9:
      goto LABEL_14;
    case 10:
      goto LABEL_13;
    case 11:
      goto LABEL_12;
    case 12:
      goto LABEL_11;
    case 13:
      goto LABEL_10;
    case 14:
      *uint64_t v4 = *v3 * 57.2957795;
      unsigned int v9 = 1;
LABEL_10:
      v4[v9] = v3[v9] * 57.2957795;
      unsigned int v10 = v9 + 1;
LABEL_11:
      v4[v10] = v3[v10] * 57.2957795;
      unsigned int v11 = v10 + 1;
LABEL_12:
      v4[v11] = v3[v11] * 57.2957795;
      unsigned int v12 = v11 + 1;
LABEL_13:
      v4[v12] = v3[v12] * 57.2957795;
      unsigned int v13 = v12 + 1;
LABEL_14:
      v4[v13] = v3[v13] * 57.2957795;
      unsigned int v14 = v13 + 1;
LABEL_15:
      v4[v14] = v3[v14] * 57.2957795;
      unsigned int v15 = v14 + 1;
LABEL_16:
      v4[v15] = v3[v15] * 57.2957795;
      unsigned int v16 = v15 + 1;
LABEL_17:
      v4[v16] = v3[v16] * 57.2957795;
      uint64_t v17 = v16 + 1;
LABEL_18:
      v4[v17] = v3[v17] * 57.2957795;
      uint64_t v18 = (v17 + 1);
LABEL_19:
      v4[v18] = v3[v18] * 57.2957795;
      uint64_t v19 = (v18 + 1);
LABEL_20:
      v4[v19] = v3[v19] * 57.2957795;
      uint64_t v20 = (v19 + 1);
LABEL_21:
      v4[v20] = v3[v20] * 57.2957795;
      uint64_t v21 = (v20 + 1);
LABEL_22:
      v4[v21] = v3[v21] * 57.2957795;
      uint64_t v22 = (v21 + 1);
LABEL_23:
      v4[v22] = v3[v22] * 57.2957795;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v17, v18, v19, v20, v21, v22)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v17, v18, v19, v20, v21, v22)+ 16);
}

uint64_t sub_FD9B4()
{
  return 141;
}

uint64_t sub_FD9BC(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_FD9C4(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_FD9CC(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_FDA0C(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_FDA14(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_FDA1C(uint64_t a1)
{
  return sub_FDAC0(a1 - 32);
}

void sub_FDA24(uint64_t a1)
{
  sub_FDAC0(a1 - 32);

  operator delete();
}

uint64_t sub_FDA60(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 32) + 72))() + 8);
}

uint64_t sub_FDAA0(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_FDAA8(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_FDAB0(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_FDAB8(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_FDAC0(uint64_t a1)
{
  *(void *)a1 = off_24026F0;
  *(void *)(a1 + 32) = off_2402750;
  if (*(void *)(a1 + 48)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 64) = 0;
  }
  *(void *)a1 = off_23FFC00;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_FDC1C(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *(void *)a1 = off_23FFC00;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = a3;
  if (a3) {
    BOOL v5 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
  }
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
  else {
    BOOL v5 = 1;
  }
  *(unsigned char *)(a1 + 24) = v5;
  *(void *)a1 = off_24027D8;
  *(void *)(a1 + 32) = off_2402838;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  operator new();
}

void sub_FE254(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_E08A0(v1);
  _Unwind_Resume(a1);
}

void sub_FE2FC(uint64_t a1)
{
  sub_FE860(a1);

  operator delete();
}

double sub_FE334(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 40);
  if (!v2) {
    return NAN;
  }
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 64))(v2) + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  if ((uint64_t)((unint64_t)(v6 + v5) << 32) >= 1)
  {
    int v7 = &v3[v6 + v5];
    do
    {
      *uint64_t v4 = *v3 * 0.0174532925;
      v4[1] = v3[1] * 0.0174532925;
      v4[2] = v3[2] * 0.0174532925;
      v4[3] = v3[3] * 0.0174532925;
      v4[4] = v3[4] * 0.0174532925;
      v4[5] = v3[5] * 0.0174532925;
      v4[6] = v3[6] * 0.0174532925;
      v4[7] = v3[7] * 0.0174532925;
      v4[8] = v3[8] * 0.0174532925;
      v4[9] = v3[9] * 0.0174532925;
      v4[10] = v3[10] * 0.0174532925;
      v4[11] = v3[11] * 0.0174532925;
      v4[12] = v3[12] * 0.0174532925;
      v4[13] = v3[13] * 0.0174532925;
      v4[14] = v3[14] * 0.0174532925;
      v4[15] = v3[15] * 0.0174532925;
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v7);
  }
  int v8 = (v5 & 0xF) - 1;
  unsigned int v9 = 0;
  unsigned int v10 = 0;
  unsigned int v11 = 0;
  unsigned int v12 = 0;
  unsigned int v13 = 0;
  unsigned int v14 = 0;
  unsigned int v15 = 0;
  unsigned int v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  switch(v8)
  {
    case 0:
      goto LABEL_23;
    case 1:
      goto LABEL_22;
    case 2:
      goto LABEL_21;
    case 3:
      goto LABEL_20;
    case 4:
      goto LABEL_19;
    case 5:
      goto LABEL_18;
    case 6:
      goto LABEL_17;
    case 7:
      goto LABEL_16;
    case 8:
      goto LABEL_15;
    case 9:
      goto LABEL_14;
    case 10:
      goto LABEL_13;
    case 11:
      goto LABEL_12;
    case 12:
      goto LABEL_11;
    case 13:
      goto LABEL_10;
    case 14:
      *uint64_t v4 = *v3 * 0.0174532925;
      unsigned int v9 = 1;
LABEL_10:
      v4[v9] = v3[v9] * 0.0174532925;
      unsigned int v10 = v9 + 1;
LABEL_11:
      v4[v10] = v3[v10] * 0.0174532925;
      unsigned int v11 = v10 + 1;
LABEL_12:
      v4[v11] = v3[v11] * 0.0174532925;
      unsigned int v12 = v11 + 1;
LABEL_13:
      v4[v12] = v3[v12] * 0.0174532925;
      unsigned int v13 = v12 + 1;
LABEL_14:
      v4[v13] = v3[v13] * 0.0174532925;
      unsigned int v14 = v13 + 1;
LABEL_15:
      v4[v14] = v3[v14] * 0.0174532925;
      unsigned int v15 = v14 + 1;
LABEL_16:
      v4[v15] = v3[v15] * 0.0174532925;
      unsigned int v16 = v15 + 1;
LABEL_17:
      v4[v16] = v3[v16] * 0.0174532925;
      uint64_t v17 = v16 + 1;
LABEL_18:
      v4[v17] = v3[v17] * 0.0174532925;
      uint64_t v18 = (v17 + 1);
LABEL_19:
      v4[v18] = v3[v18] * 0.0174532925;
      uint64_t v19 = (v18 + 1);
LABEL_20:
      v4[v19] = v3[v19] * 0.0174532925;
      uint64_t v20 = (v19 + 1);
LABEL_21:
      v4[v20] = v3[v20] * 0.0174532925;
      uint64_t v21 = (v20 + 1);
LABEL_22:
      v4[v21] = v3[v21] * 0.0174532925;
      uint64_t v22 = (v21 + 1);
LABEL_23:
      v4[v22] = v3[v22] * 0.0174532925;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v17, v18, v19, v20, v21, v22)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v17, v18, v19, v20, v21, v22)+ 16);
}

uint64_t sub_FE754()
{
  return 141;
}

uint64_t sub_FE75C(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_FE764(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_FE76C(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_FE7AC(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_FE7B4(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_FE7BC(uint64_t a1)
{
  return sub_FE860(a1 - 32);
}

void sub_FE7C4(uint64_t a1)
{
  sub_FE860(a1 - 32);

  operator delete();
}

uint64_t sub_FE800(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 32) + 72))() + 8);
}

uint64_t sub_FE840(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_FE848(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_FE850(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_FE858(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_FE860(uint64_t a1)
{
  *(void *)a1 = off_24027D8;
  *(void *)(a1 + 32) = off_2402838;
  if (*(void *)(a1 + 48)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 64) = 0;
  }
  *(void *)a1 = off_23FFC00;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_FE9BC(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *(void *)a1 = off_23FFC00;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = a3;
  if (a3) {
    BOOL v5 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
  }
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
  else {
    BOOL v5 = 1;
  }
  *(unsigned char *)(a1 + 24) = v5;
  *(void *)a1 = off_24028C0;
  *(void *)(a1 + 32) = off_2402920;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  operator new();
}

void sub_FEFF4(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_E08A0(v1);
  _Unwind_Resume(a1);
}

void sub_FF09C(uint64_t a1)
{
  sub_FF600(a1);

  operator delete();
}

double sub_FF0D4(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 40);
  if (!v2) {
    return NAN;
  }
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 64))(v2) + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  if ((uint64_t)((unint64_t)(v6 + v5) << 32) >= 1)
  {
    int v7 = &v3[v6 + v5];
    do
    {
      *uint64_t v4 = *v3 * 2.22222222;
      v4[1] = v3[1] * 2.22222222;
      v4[2] = v3[2] * 2.22222222;
      v4[3] = v3[3] * 2.22222222;
      v4[4] = v3[4] * 2.22222222;
      v4[5] = v3[5] * 2.22222222;
      v4[6] = v3[6] * 2.22222222;
      v4[7] = v3[7] * 2.22222222;
      v4[8] = v3[8] * 2.22222222;
      v4[9] = v3[9] * 2.22222222;
      v4[10] = v3[10] * 2.22222222;
      v4[11] = v3[11] * 2.22222222;
      v4[12] = v3[12] * 2.22222222;
      v4[13] = v3[13] * 2.22222222;
      v4[14] = v3[14] * 2.22222222;
      v4[15] = v3[15] * 2.22222222;
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v7);
  }
  int v8 = (v5 & 0xF) - 1;
  unsigned int v9 = 0;
  unsigned int v10 = 0;
  unsigned int v11 = 0;
  unsigned int v12 = 0;
  unsigned int v13 = 0;
  unsigned int v14 = 0;
  unsigned int v15 = 0;
  unsigned int v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  switch(v8)
  {
    case 0:
      goto LABEL_23;
    case 1:
      goto LABEL_22;
    case 2:
      goto LABEL_21;
    case 3:
      goto LABEL_20;
    case 4:
      goto LABEL_19;
    case 5:
      goto LABEL_18;
    case 6:
      goto LABEL_17;
    case 7:
      goto LABEL_16;
    case 8:
      goto LABEL_15;
    case 9:
      goto LABEL_14;
    case 10:
      goto LABEL_13;
    case 11:
      goto LABEL_12;
    case 12:
      goto LABEL_11;
    case 13:
      goto LABEL_10;
    case 14:
      *uint64_t v4 = *v3 * 2.22222222;
      unsigned int v9 = 1;
LABEL_10:
      v4[v9] = v3[v9] * 2.22222222;
      unsigned int v10 = v9 + 1;
LABEL_11:
      v4[v10] = v3[v10] * 2.22222222;
      unsigned int v11 = v10 + 1;
LABEL_12:
      v4[v11] = v3[v11] * 2.22222222;
      unsigned int v12 = v11 + 1;
LABEL_13:
      v4[v12] = v3[v12] * 2.22222222;
      unsigned int v13 = v12 + 1;
LABEL_14:
      v4[v13] = v3[v13] * 2.22222222;
      unsigned int v14 = v13 + 1;
LABEL_15:
      v4[v14] = v3[v14] * 2.22222222;
      unsigned int v15 = v14 + 1;
LABEL_16:
      v4[v15] = v3[v15] * 2.22222222;
      unsigned int v16 = v15 + 1;
LABEL_17:
      v4[v16] = v3[v16] * 2.22222222;
      uint64_t v17 = v16 + 1;
LABEL_18:
      v4[v17] = v3[v17] * 2.22222222;
      uint64_t v18 = (v17 + 1);
LABEL_19:
      v4[v18] = v3[v18] * 2.22222222;
      uint64_t v19 = (v18 + 1);
LABEL_20:
      v4[v19] = v3[v19] * 2.22222222;
      uint64_t v20 = (v19 + 1);
LABEL_21:
      v4[v20] = v3[v20] * 2.22222222;
      uint64_t v21 = (v20 + 1);
LABEL_22:
      v4[v21] = v3[v21] * 2.22222222;
      uint64_t v22 = (v21 + 1);
LABEL_23:
      v4[v22] = v3[v22] * 2.22222222;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v17, v18, v19, v20, v21, v22)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v17, v18, v19, v20, v21, v22)+ 16);
}

uint64_t sub_FF4F4()
{
  return 141;
}

uint64_t sub_FF4FC(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_FF504(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_FF50C(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_FF54C(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_FF554(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_FF55C(uint64_t a1)
{
  return sub_FF600(a1 - 32);
}

void sub_FF564(uint64_t a1)
{
  sub_FF600(a1 - 32);

  operator delete();
}

uint64_t sub_FF5A0(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 32) + 72))() + 8);
}

uint64_t sub_FF5E0(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_FF5E8(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_FF5F0(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_FF5F8(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_FF600(uint64_t a1)
{
  *(void *)a1 = off_24028C0;
  *(void *)(a1 + 32) = off_2402920;
  if (*(void *)(a1 + 48)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 64) = 0;
  }
  *(void *)a1 = off_23FFC00;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_FF75C(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *(void *)a1 = off_23FFC00;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = a3;
  if (a3) {
    BOOL v5 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
  }
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
  else {
    BOOL v5 = 1;
  }
  *(unsigned char *)(a1 + 24) = v5;
  *(void *)a1 = off_24029A8;
  *(void *)(a1 + 32) = off_2402A08;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  operator new();
}

void sub_FFD94(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_E08A0(v1);
  _Unwind_Resume(a1);
}

void sub_FFE3C(uint64_t a1)
{
  sub_1003A0(a1);

  operator delete();
}

double sub_FFE74(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 40);
  if (!v2) {
    return NAN;
  }
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 64))(v2) + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  if ((uint64_t)((unint64_t)(v6 + v5) << 32) >= 1)
  {
    int v7 = &v3[v6 + v5];
    do
    {
      *uint64_t v4 = *v3 * 0.45;
      v4[1] = v3[1] * 0.45;
      v4[2] = v3[2] * 0.45;
      v4[3] = v3[3] * 0.45;
      v4[4] = v3[4] * 0.45;
      v4[5] = v3[5] * 0.45;
      v4[6] = v3[6] * 0.45;
      v4[7] = v3[7] * 0.45;
      v4[8] = v3[8] * 0.45;
      v4[9] = v3[9] * 0.45;
      v4[10] = v3[10] * 0.45;
      v4[11] = v3[11] * 0.45;
      v4[12] = v3[12] * 0.45;
      v4[13] = v3[13] * 0.45;
      v4[14] = v3[14] * 0.45;
      v4[15] = v3[15] * 0.45;
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v7);
  }
  int v8 = (v5 & 0xF) - 1;
  unsigned int v9 = 0;
  unsigned int v10 = 0;
  unsigned int v11 = 0;
  unsigned int v12 = 0;
  unsigned int v13 = 0;
  unsigned int v14 = 0;
  unsigned int v15 = 0;
  unsigned int v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  switch(v8)
  {
    case 0:
      goto LABEL_23;
    case 1:
      goto LABEL_22;
    case 2:
      goto LABEL_21;
    case 3:
      goto LABEL_20;
    case 4:
      goto LABEL_19;
    case 5:
      goto LABEL_18;
    case 6:
      goto LABEL_17;
    case 7:
      goto LABEL_16;
    case 8:
      goto LABEL_15;
    case 9:
      goto LABEL_14;
    case 10:
      goto LABEL_13;
    case 11:
      goto LABEL_12;
    case 12:
      goto LABEL_11;
    case 13:
      goto LABEL_10;
    case 14:
      *uint64_t v4 = *v3 * 0.45;
      unsigned int v9 = 1;
LABEL_10:
      v4[v9] = v3[v9] * 0.45;
      unsigned int v10 = v9 + 1;
LABEL_11:
      v4[v10] = v3[v10] * 0.45;
      unsigned int v11 = v10 + 1;
LABEL_12:
      v4[v11] = v3[v11] * 0.45;
      unsigned int v12 = v11 + 1;
LABEL_13:
      v4[v12] = v3[v12] * 0.45;
      unsigned int v13 = v12 + 1;
LABEL_14:
      v4[v13] = v3[v13] * 0.45;
      unsigned int v14 = v13 + 1;
LABEL_15:
      v4[v14] = v3[v14] * 0.45;
      unsigned int v15 = v14 + 1;
LABEL_16:
      v4[v15] = v3[v15] * 0.45;
      unsigned int v16 = v15 + 1;
LABEL_17:
      v4[v16] = v3[v16] * 0.45;
      uint64_t v17 = v16 + 1;
LABEL_18:
      v4[v17] = v3[v17] * 0.45;
      uint64_t v18 = (v17 + 1);
LABEL_19:
      v4[v18] = v3[v18] * 0.45;
      uint64_t v19 = (v18 + 1);
LABEL_20:
      v4[v19] = v3[v19] * 0.45;
      uint64_t v20 = (v19 + 1);
LABEL_21:
      v4[v20] = v3[v20] * 0.45;
      uint64_t v21 = (v20 + 1);
LABEL_22:
      v4[v21] = v3[v21] * 0.45;
      uint64_t v22 = (v21 + 1);
LABEL_23:
      v4[v22] = v3[v22] * 0.45;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v17, v18, v19, v20, v21, v22)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v17, v18, v19, v20, v21, v22)+ 16);
}

uint64_t sub_100294()
{
  return 141;
}

uint64_t sub_10029C(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_1002A4(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_1002AC(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_1002EC(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_1002F4(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_1002FC(uint64_t a1)
{
  return sub_1003A0(a1 - 32);
}

void sub_100304(uint64_t a1)
{
  sub_1003A0(a1 - 32);

  operator delete();
}

uint64_t sub_100340(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 32) + 72))() + 8);
}

uint64_t sub_100380(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_100388(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_100390(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_100398(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_1003A0(uint64_t a1)
{
  *(void *)a1 = off_24029A8;
  *(void *)(a1 + 32) = off_2402A08;
  if (*(void *)(a1 + 48)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 64) = 0;
  }
  *(void *)a1 = off_23FFC00;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_1004FC(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *(void *)a1 = off_23FFC00;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = a3;
  if (a3) {
    BOOL v5 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
  }
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
  else {
    BOOL v5 = 1;
  }
  *(unsigned char *)(a1 + 24) = v5;
  *(void *)a1 = off_2402A90;
  *(void *)(a1 + 32) = off_2402AF0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  operator new();
}

void sub_100B34(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_E08A0(v1);
  _Unwind_Resume(a1);
}

void sub_100BDC(uint64_t a1)
{
  sub_1011F8(a1);

  operator delete();
}

double sub_100C14(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 40);
  if (!v2) {
    return NAN;
  }
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 64))(v2) + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v5) << 32;
  if (v7 >= 1)
  {
    int v8 = (double *)((char *)v3 + (v7 >> 29));
    do
    {
      if (*v3 == 0.0) {
        double v9 = 1.0;
      }
      else {
        double v9 = 0.0;
      }
      *uint64_t v4 = v9;
      if (v3[1] == 0.0) {
        double v10 = 1.0;
      }
      else {
        double v10 = 0.0;
      }
      v4[1] = v10;
      if (v3[2] == 0.0) {
        double v11 = 1.0;
      }
      else {
        double v11 = 0.0;
      }
      v4[2] = v11;
      if (v3[3] == 0.0) {
        double v12 = 1.0;
      }
      else {
        double v12 = 0.0;
      }
      v4[3] = v12;
      if (v3[4] == 0.0) {
        double v13 = 1.0;
      }
      else {
        double v13 = 0.0;
      }
      v4[4] = v13;
      if (v3[5] == 0.0) {
        double v14 = 1.0;
      }
      else {
        double v14 = 0.0;
      }
      v4[5] = v14;
      if (v3[6] == 0.0) {
        double v15 = 1.0;
      }
      else {
        double v15 = 0.0;
      }
      v4[6] = v15;
      if (v3[7] == 0.0) {
        double v16 = 1.0;
      }
      else {
        double v16 = 0.0;
      }
      v4[7] = v16;
      if (v3[8] == 0.0) {
        double v17 = 1.0;
      }
      else {
        double v17 = 0.0;
      }
      v4[8] = v17;
      if (v3[9] == 0.0) {
        double v18 = 1.0;
      }
      else {
        double v18 = 0.0;
      }
      v4[9] = v18;
      if (v3[10] == 0.0) {
        double v19 = 1.0;
      }
      else {
        double v19 = 0.0;
      }
      v4[10] = v19;
      if (v3[11] == 0.0) {
        double v20 = 1.0;
      }
      else {
        double v20 = 0.0;
      }
      v4[11] = v20;
      if (v3[12] == 0.0) {
        double v21 = 1.0;
      }
      else {
        double v21 = 0.0;
      }
      v4[12] = v21;
      if (v3[13] == 0.0) {
        double v22 = 1.0;
      }
      else {
        double v22 = 0.0;
      }
      v4[13] = v22;
      if (v3[14] == 0.0) {
        double v23 = 1.0;
      }
      else {
        double v23 = 0.0;
      }
      v4[14] = v23;
      if (v3[15] == 0.0) {
        double v24 = 1.0;
      }
      else {
        double v24 = 0.0;
      }
      v4[15] = v24;
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v8);
  }
  int v25 = (v5 & 0xF) - 1;
  unsigned int v26 = 0;
  unsigned int v27 = 0;
  unsigned int v28 = 0;
  unsigned int v29 = 0;
  unsigned int v30 = 0;
  unsigned int v31 = 0;
  unsigned int v32 = 0;
  unsigned int v33 = 0;
  unsigned int v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  switch(v25)
  {
    case 0:
      goto LABEL_99;
    case 1:
      goto LABEL_96;
    case 2:
      goto LABEL_93;
    case 3:
      goto LABEL_90;
    case 4:
      goto LABEL_87;
    case 5:
      goto LABEL_84;
    case 6:
      goto LABEL_81;
    case 7:
      goto LABEL_78;
    case 8:
      goto LABEL_75;
    case 9:
      goto LABEL_72;
    case 10:
      goto LABEL_69;
    case 11:
      goto LABEL_66;
    case 12:
      goto LABEL_63;
    case 13:
      goto LABEL_60;
    case 14:
      double v40 = 1.0;
      if (*v3 != 0.0) {
        double v40 = 0.0;
      }
      *uint64_t v4 = v40;
      unsigned int v26 = 1;
LABEL_60:
      double v41 = 1.0;
      if (v3[v26] != 0.0) {
        double v41 = 0.0;
      }
      v4[v26] = v41;
      unsigned int v27 = v26 + 1;
LABEL_63:
      double v42 = 1.0;
      if (v3[v27] != 0.0) {
        double v42 = 0.0;
      }
      v4[v27] = v42;
      unsigned int v28 = v27 + 1;
LABEL_66:
      double v43 = 1.0;
      if (v3[v28] != 0.0) {
        double v43 = 0.0;
      }
      v4[v28] = v43;
      unsigned int v29 = v28 + 1;
LABEL_69:
      double v44 = 1.0;
      if (v3[v29] != 0.0) {
        double v44 = 0.0;
      }
      v4[v29] = v44;
      unsigned int v30 = v29 + 1;
LABEL_72:
      double v45 = 1.0;
      if (v3[v30] != 0.0) {
        double v45 = 0.0;
      }
      v4[v30] = v45;
      unsigned int v31 = v30 + 1;
LABEL_75:
      double v46 = 1.0;
      if (v3[v31] != 0.0) {
        double v46 = 0.0;
      }
      v4[v31] = v46;
      unsigned int v32 = v31 + 1;
LABEL_78:
      double v47 = 1.0;
      if (v3[v32] != 0.0) {
        double v47 = 0.0;
      }
      v4[v32] = v47;
      unsigned int v33 = v32 + 1;
LABEL_81:
      double v48 = 1.0;
      if (v3[v33] != 0.0) {
        double v48 = 0.0;
      }
      v4[v33] = v48;
      unsigned int v34 = v33 + 1;
LABEL_84:
      double v49 = 1.0;
      if (v3[v34] != 0.0) {
        double v49 = 0.0;
      }
      v4[v34] = v49;
      uint64_t v35 = v34 + 1;
LABEL_87:
      double v50 = 1.0;
      if (v3[v35] != 0.0) {
        double v50 = 0.0;
      }
      v4[v35] = v50;
      uint64_t v36 = (v35 + 1);
LABEL_90:
      double v51 = 1.0;
      if (v3[v36] != 0.0) {
        double v51 = 0.0;
      }
      v4[v36] = v51;
      uint64_t v37 = (v36 + 1);
LABEL_93:
      double v52 = 1.0;
      if (v3[v37] != 0.0) {
        double v52 = 0.0;
      }
      v4[v37] = v52;
      uint64_t v38 = (v37 + 1);
LABEL_96:
      double v53 = 1.0;
      if (v3[v38] != 0.0) {
        double v53 = 0.0;
      }
      v4[v38] = v53;
      uint64_t v39 = (v38 + 1);
LABEL_99:
      double v54 = 1.0;
      if (v3[v39] != 0.0) {
        double v54 = 0.0;
      }
      v4[v39] = v54;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v35, v36, v37, v38, v39)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v35, v36, v37, v38, v39)+ 16);
}

uint64_t sub_1010EC()
{
  return 141;
}

uint64_t sub_1010F4(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_1010FC(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_101104(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_101144(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_10114C(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_101154(uint64_t a1)
{
  return sub_1011F8(a1 - 32);
}

void sub_10115C(uint64_t a1)
{
  sub_1011F8(a1 - 32);

  operator delete();
}

uint64_t sub_101198(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 32) + 72))() + 8);
}

uint64_t sub_1011D8(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_1011E0(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_1011E8(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_1011F0(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_1011F8(uint64_t a1)
{
  *(void *)a1 = off_2402A90;
  *(void *)(a1 + 32) = off_2402AF0;
  if (*(void *)(a1 + 48)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 64) = 0;
  }
  *(void *)a1 = off_23FFC00;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_101354(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *(void *)a1 = off_23FFC00;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = a3;
  if (a3) {
    BOOL v5 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
  }
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
  else {
    BOOL v5 = 1;
  }
  *(unsigned char *)(a1 + 24) = v5;
  *(void *)a1 = off_2402B78;
  *(void *)(a1 + 32) = off_2402BD8;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  operator new();
}

void sub_10198C(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_E08A0(v1);
  _Unwind_Resume(a1);
}

void sub_101A34(uint64_t a1)
{
  sub_10210C(a1);

  operator delete();
}

double sub_101A6C(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 40);
  if (!v2) {
    return NAN;
  }
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 64))(v2) + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v5) << 32;
  if (v7 >= 1)
  {
    int v8 = (double *)((char *)v3 + (v7 >> 29));
    do
    {
      if (*v3 >= 0.0) {
        double v9 = 0.0;
      }
      else {
        double v9 = -1.0;
      }
      if (*v3 > 0.0) {
        double v9 = 1.0;
      }
      *uint64_t v4 = v9;
      double v10 = v3[1];
      BOOL v11 = v10 <= 0.0;
      if (v10 >= 0.0) {
        double v12 = 0.0;
      }
      else {
        double v12 = -1.0;
      }
      if (!v11) {
        double v12 = 1.0;
      }
      v4[1] = v12;
      double v13 = v3[2];
      BOOL v14 = v13 <= 0.0;
      if (v13 >= 0.0) {
        double v15 = 0.0;
      }
      else {
        double v15 = -1.0;
      }
      if (!v14) {
        double v15 = 1.0;
      }
      v4[2] = v15;
      double v16 = v3[3];
      BOOL v17 = v16 <= 0.0;
      if (v16 >= 0.0) {
        double v18 = 0.0;
      }
      else {
        double v18 = -1.0;
      }
      if (!v17) {
        double v18 = 1.0;
      }
      v4[3] = v18;
      double v19 = v3[4];
      BOOL v20 = v19 <= 0.0;
      if (v19 >= 0.0) {
        double v21 = 0.0;
      }
      else {
        double v21 = -1.0;
      }
      if (!v20) {
        double v21 = 1.0;
      }
      v4[4] = v21;
      double v22 = v3[5];
      BOOL v23 = v22 <= 0.0;
      if (v22 >= 0.0) {
        double v24 = 0.0;
      }
      else {
        double v24 = -1.0;
      }
      if (!v23) {
        double v24 = 1.0;
      }
      v4[5] = v24;
      double v25 = v3[6];
      BOOL v26 = v25 <= 0.0;
      if (v25 >= 0.0) {
        double v27 = 0.0;
      }
      else {
        double v27 = -1.0;
      }
      if (!v26) {
        double v27 = 1.0;
      }
      v4[6] = v27;
      double v28 = v3[7];
      BOOL v29 = v28 <= 0.0;
      if (v28 >= 0.0) {
        double v30 = 0.0;
      }
      else {
        double v30 = -1.0;
      }
      if (!v29) {
        double v30 = 1.0;
      }
      v4[7] = v30;
      double v31 = v3[8];
      BOOL v32 = v31 <= 0.0;
      if (v31 >= 0.0) {
        double v33 = 0.0;
      }
      else {
        double v33 = -1.0;
      }
      if (!v32) {
        double v33 = 1.0;
      }
      v4[8] = v33;
      double v34 = v3[9];
      BOOL v35 = v34 <= 0.0;
      if (v34 >= 0.0) {
        double v36 = 0.0;
      }
      else {
        double v36 = -1.0;
      }
      if (!v35) {
        double v36 = 1.0;
      }
      v4[9] = v36;
      double v37 = v3[10];
      BOOL v38 = v37 <= 0.0;
      if (v37 >= 0.0) {
        double v39 = 0.0;
      }
      else {
        double v39 = -1.0;
      }
      if (!v38) {
        double v39 = 1.0;
      }
      v4[10] = v39;
      double v40 = v3[11];
      BOOL v41 = v40 <= 0.0;
      if (v40 >= 0.0) {
        double v42 = 0.0;
      }
      else {
        double v42 = -1.0;
      }
      if (!v41) {
        double v42 = 1.0;
      }
      v4[11] = v42;
      double v43 = v3[12];
      BOOL v44 = v43 <= 0.0;
      if (v43 >= 0.0) {
        double v45 = 0.0;
      }
      else {
        double v45 = -1.0;
      }
      if (!v44) {
        double v45 = 1.0;
      }
      v4[12] = v45;
      double v46 = v3[13];
      BOOL v47 = v46 <= 0.0;
      if (v46 >= 0.0) {
        double v48 = 0.0;
      }
      else {
        double v48 = -1.0;
      }
      if (!v47) {
        double v48 = 1.0;
      }
      v4[13] = v48;
      double v49 = v3[14];
      BOOL v50 = v49 <= 0.0;
      if (v49 >= 0.0) {
        double v51 = 0.0;
      }
      else {
        double v51 = -1.0;
      }
      if (!v50) {
        double v51 = 1.0;
      }
      v4[14] = v51;
      double v52 = v3[15];
      BOOL v53 = v52 <= 0.0;
      if (v52 >= 0.0) {
        double v54 = 0.0;
      }
      else {
        double v54 = -1.0;
      }
      if (!v53) {
        double v54 = 1.0;
      }
      v4[15] = v54;
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v8);
  }
  int v55 = (v5 & 0xF) - 1;
  unsigned int v56 = 0;
  unsigned int v57 = 0;
  unsigned int v58 = 0;
  unsigned int v59 = 0;
  unsigned int v60 = 0;
  unsigned int v61 = 0;
  unsigned int v62 = 0;
  unsigned int v63 = 0;
  unsigned int v64 = 0;
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  switch(v55)
  {
    case 0:
      goto LABEL_159;
    case 1:
      goto LABEL_154;
    case 2:
      goto LABEL_149;
    case 3:
      goto LABEL_144;
    case 4:
      goto LABEL_139;
    case 5:
      goto LABEL_134;
    case 6:
      goto LABEL_129;
    case 7:
      goto LABEL_124;
    case 8:
      goto LABEL_119;
    case 9:
      goto LABEL_114;
    case 10:
      goto LABEL_109;
    case 11:
      goto LABEL_104;
    case 12:
      goto LABEL_99;
    case 13:
      goto LABEL_94;
    case 14:
      double v70 = 0.0;
      if (*v3 < 0.0) {
        double v70 = -1.0;
      }
      if (*v3 > 0.0) {
        double v70 = 1.0;
      }
      *uint64_t v4 = v70;
      unsigned int v56 = 1;
LABEL_94:
      double v71 = v3[v56];
      BOOL v72 = v71 < 0.0;
      BOOL v73 = v71 <= 0.0;
      double v74 = 0.0;
      if (v72) {
        double v74 = -1.0;
      }
      if (!v73) {
        double v74 = 1.0;
      }
      v4[v56] = v74;
      unsigned int v57 = v56 + 1;
LABEL_99:
      double v75 = v3[v57];
      BOOL v72 = v75 < 0.0;
      BOOL v76 = v75 <= 0.0;
      double v77 = 0.0;
      if (v72) {
        double v77 = -1.0;
      }
      if (!v76) {
        double v77 = 1.0;
      }
      v4[v57] = v77;
      unsigned int v58 = v57 + 1;
LABEL_104:
      double v78 = v3[v58];
      BOOL v72 = v78 < 0.0;
      BOOL v79 = v78 <= 0.0;
      double v80 = 0.0;
      if (v72) {
        double v80 = -1.0;
      }
      if (!v79) {
        double v80 = 1.0;
      }
      v4[v58] = v80;
      unsigned int v59 = v58 + 1;
LABEL_109:
      double v81 = v3[v59];
      BOOL v72 = v81 < 0.0;
      BOOL v82 = v81 <= 0.0;
      double v83 = 0.0;
      if (v72) {
        double v83 = -1.0;
      }
      if (!v82) {
        double v83 = 1.0;
      }
      v4[v59] = v83;
      unsigned int v60 = v59 + 1;
LABEL_114:
      double v84 = v3[v60];
      BOOL v72 = v84 < 0.0;
      BOOL v85 = v84 <= 0.0;
      double v86 = 0.0;
      if (v72) {
        double v86 = -1.0;
      }
      if (!v85) {
        double v86 = 1.0;
      }
      v4[v60] = v86;
      unsigned int v61 = v60 + 1;
LABEL_119:
      double v87 = v3[v61];
      BOOL v72 = v87 < 0.0;
      BOOL v88 = v87 <= 0.0;
      double v89 = 0.0;
      if (v72) {
        double v89 = -1.0;
      }
      if (!v88) {
        double v89 = 1.0;
      }
      v4[v61] = v89;
      unsigned int v62 = v61 + 1;
LABEL_124:
      double v90 = v3[v62];
      BOOL v72 = v90 < 0.0;
      BOOL v91 = v90 <= 0.0;
      double v92 = 0.0;
      if (v72) {
        double v92 = -1.0;
      }
      if (!v91) {
        double v92 = 1.0;
      }
      v4[v62] = v92;
      unsigned int v63 = v62 + 1;
LABEL_129:
      double v93 = v3[v63];
      BOOL v72 = v93 < 0.0;
      BOOL v94 = v93 <= 0.0;
      double v95 = 0.0;
      if (v72) {
        double v95 = -1.0;
      }
      if (!v94) {
        double v95 = 1.0;
      }
      v4[v63] = v95;
      unsigned int v64 = v63 + 1;
LABEL_134:
      double v96 = v3[v64];
      BOOL v72 = v96 < 0.0;
      BOOL v97 = v96 <= 0.0;
      double v98 = 0.0;
      if (v72) {
        double v98 = -1.0;
      }
      if (!v97) {
        double v98 = 1.0;
      }
      v4[v64] = v98;
      uint64_t v65 = v64 + 1;
LABEL_139:
      double v99 = v3[v65];
      BOOL v72 = v99 < 0.0;
      BOOL v100 = v99 <= 0.0;
      double v101 = 0.0;
      if (v72) {
        double v101 = -1.0;
      }
      if (!v100) {
        double v101 = 1.0;
      }
      v4[v65] = v101;
      uint64_t v66 = (v65 + 1);
LABEL_144:
      double v102 = v3[v66];
      BOOL v72 = v102 < 0.0;
      BOOL v103 = v102 <= 0.0;
      double v104 = 0.0;
      if (v72) {
        double v104 = -1.0;
      }
      if (!v103) {
        double v104 = 1.0;
      }
      v4[v66] = v104;
      uint64_t v67 = (v66 + 1);
LABEL_149:
      double v105 = v3[v67];
      BOOL v72 = v105 < 0.0;
      BOOL v106 = v105 <= 0.0;
      double v107 = 0.0;
      if (v72) {
        double v107 = -1.0;
      }
      if (!v106) {
        double v107 = 1.0;
      }
      v4[v67] = v107;
      uint64_t v68 = (v67 + 1);
LABEL_154:
      double v108 = v3[v68];
      BOOL v72 = v108 < 0.0;
      BOOL v109 = v108 <= 0.0;
      double v110 = 0.0;
      if (v72) {
        double v110 = -1.0;
      }
      if (!v109) {
        double v110 = 1.0;
      }
      v4[v68] = v110;
      uint64_t v69 = (v68 + 1);
LABEL_159:
      double v111 = v3[v69];
      BOOL v72 = v111 < 0.0;
      BOOL v112 = v111 <= 0.0;
      double v113 = 0.0;
      if (v72) {
        double v113 = -1.0;
      }
      if (!v112) {
        double v113 = 1.0;
      }
      v4[v69] = v113;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v65, v66, v67, v68, v69)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v65, v66, v67, v68, v69)+ 16);
}

uint64_t sub_102000()
{
  return 141;
}

uint64_t sub_102008(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_102010(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_102018(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_102058(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_102060(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_102068(uint64_t a1)
{
  return sub_10210C(a1 - 32);
}

void sub_102070(uint64_t a1)
{
  sub_10210C(a1 - 32);

  operator delete();
}

uint64_t sub_1020AC(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 32) + 72))() + 8);
}

uint64_t sub_1020EC(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_1020F4(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_1020FC(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_102104(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_10210C(uint64_t a1)
{
  *(void *)a1 = off_2402B78;
  *(void *)(a1 + 32) = off_2402BD8;
  if (*(void *)(a1 + 48)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 64) = 0;
  }
  *(void *)a1 = off_23FFC00;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_102268(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *(void *)a1 = off_23FFC00;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = a3;
  if (a3) {
    BOOL v5 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
  }
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
  else {
    BOOL v5 = 1;
  }
  *(unsigned char *)(a1 + 24) = v5;
  *(void *)a1 = off_2402C60;
  *(void *)(a1 + 32) = off_2402CC0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  operator new();
}

void sub_1028A0(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_E08A0(v1);
  _Unwind_Resume(a1);
}

void sub_102948(uint64_t a1)
{
  sub_102E98(a1);

  operator delete();
}

double sub_102980(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 40);
  if (!v2) {
    return NAN;
  }
  uint64_t v3 = *(long double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 64))(v2) + 16);
  uint64_t v4 = *(long double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  int v6 = v5 & 0xF;
  if ((v5 & 0xF) != 0) {
    int v7 = -16;
  }
  else {
    int v7 = 0;
  }
  int64_t v8 = (unint64_t)(v7 + v5) << 32;
  if (v8 >= 1)
  {
    double v9 = (long double *)((char *)v3 + (v8 >> 29));
    do
    {
      *uint64_t v4 = erf(*v3);
      v4[1] = erf(v3[1]);
      v4[2] = erf(v3[2]);
      v4[3] = erf(v3[3]);
      v4[4] = erf(v3[4]);
      v4[5] = erf(v3[5]);
      v4[6] = erf(v3[6]);
      v4[7] = erf(v3[7]);
      v4[8] = erf(v3[8]);
      v4[9] = erf(v3[9]);
      v4[10] = erf(v3[10]);
      v4[11] = erf(v3[11]);
      v4[12] = erf(v3[12]);
      v4[13] = erf(v3[13]);
      v4[14] = erf(v3[14]);
      v4[15] = erf(v3[15]);
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v9);
  }
  int v10 = v6 - 1;
  uint64_t v31 = a1;
  unsigned int v11 = 0;
  unsigned int v12 = 0;
  unsigned int v13 = 0;
  unsigned int v14 = 0;
  unsigned int v15 = 0;
  int v16 = 0;
  int v17 = 0;
  int v18 = 0;
  int v19 = 0;
  uint64_t v20 = 0;
  int v21 = 0;
  int v22 = 0;
  int v23 = 0;
  uint64_t v24 = 0;
  switch(v10)
  {
    case 0:
      goto LABEL_23;
    case 1:
      goto LABEL_22;
    case 2:
      goto LABEL_21;
    case 3:
      goto LABEL_20;
    case 4:
      goto LABEL_19;
    case 5:
      goto LABEL_18;
    case 6:
      goto LABEL_17;
    case 7:
      goto LABEL_16;
    case 8:
      goto LABEL_15;
    case 9:
      goto LABEL_14;
    case 10:
      goto LABEL_13;
    case 11:
      goto LABEL_12;
    case 12:
      goto LABEL_11;
    case 13:
      goto LABEL_10;
    case 14:
      *uint64_t v4 = erf(*v3);
      unsigned int v11 = 1;
LABEL_10:
      unsigned int v25 = v11;
      v4[v11] = erf(v3[v11]);
      unsigned int v12 = v25 + 1;
LABEL_11:
      unsigned int v26 = v12;
      v4[v12] = erf(v3[v12]);
      unsigned int v13 = v26 + 1;
LABEL_12:
      unsigned int v27 = v13;
      v4[v13] = erf(v3[v13]);
      unsigned int v14 = v27 + 1;
LABEL_13:
      unsigned int v28 = v14;
      v4[v14] = erf(v3[v14]);
      unsigned int v15 = v28 + 1;
LABEL_14:
      unsigned int v29 = v15;
      v4[v15] = erf(v3[v15]);
      int v16 = v29 + 1;
LABEL_15:
      v4[v16] = erf(v3[v16]);
      int v17 = v16 + 1;
LABEL_16:
      v4[v17] = erf(v3[v17]);
      int v18 = v17 + 1;
LABEL_17:
      v4[v18] = erf(v3[v18]);
      int v19 = v18 + 1;
LABEL_18:
      v4[v19] = erf(v3[v19]);
      LODWORD(v20) = v19 + 1;
LABEL_19:
      v4[v20] = erf(v3[v20]);
      int v21 = v20 + 1;
LABEL_20:
      v4[v21] = erf(v3[v21]);
      int v22 = v21 + 1;
LABEL_21:
      v4[v22] = erf(v3[v22]);
      int v23 = v22 + 1;
LABEL_22:
      v4[v23] = erf(v3[v23]);
      uint64_t v24 = (v23 + 1);
LABEL_23:
      v4[v24] = erf(v3[v24]);
      uint64_t v20 = v31;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v20 + 72))(v20) + 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v20 + 72))(v20) + 16);
}

uint64_t sub_102D8C()
{
  return 141;
}

uint64_t sub_102D94(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_102D9C(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_102DA4(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_102DE4(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_102DEC(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_102DF4(uint64_t a1)
{
  return sub_102E98(a1 - 32);
}

void sub_102DFC(uint64_t a1)
{
  sub_102E98(a1 - 32);

  operator delete();
}

uint64_t sub_102E38(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 32) + 72))() + 8);
}

uint64_t sub_102E78(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_102E80(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_102E88(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_102E90(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_102E98(uint64_t a1)
{
  *(void *)a1 = off_2402C60;
  *(void *)(a1 + 32) = off_2402CC0;
  if (*(void *)(a1 + 48)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 64) = 0;
  }
  *(void *)a1 = off_23FFC00;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_102FF4(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *(void *)a1 = off_23FFC00;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = a3;
  if (a3) {
    BOOL v5 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
  }
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
  else {
    BOOL v5 = 1;
  }
  *(unsigned char *)(a1 + 24) = v5;
  *(void *)a1 = off_2402D48;
  *(void *)(a1 + 32) = off_2402DA8;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  operator new();
}

void sub_10362C(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_E08A0(v1);
  _Unwind_Resume(a1);
}

void sub_1036D4(uint64_t a1)
{
  sub_103C24(a1);

  operator delete();
}

double sub_10370C(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 40);
  if (!v2) {
    return NAN;
  }
  uint64_t v3 = *(long double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 64))(v2) + 16);
  uint64_t v4 = *(long double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  int v6 = v5 & 0xF;
  if ((v5 & 0xF) != 0) {
    int v7 = -16;
  }
  else {
    int v7 = 0;
  }
  int64_t v8 = (unint64_t)(v7 + v5) << 32;
  if (v8 >= 1)
  {
    double v9 = (long double *)((char *)v3 + (v8 >> 29));
    do
    {
      *uint64_t v4 = erfc(*v3);
      v4[1] = erfc(v3[1]);
      v4[2] = erfc(v3[2]);
      v4[3] = erfc(v3[3]);
      v4[4] = erfc(v3[4]);
      v4[5] = erfc(v3[5]);
      v4[6] = erfc(v3[6]);
      v4[7] = erfc(v3[7]);
      v4[8] = erfc(v3[8]);
      v4[9] = erfc(v3[9]);
      v4[10] = erfc(v3[10]);
      v4[11] = erfc(v3[11]);
      v4[12] = erfc(v3[12]);
      v4[13] = erfc(v3[13]);
      v4[14] = erfc(v3[14]);
      v4[15] = erfc(v3[15]);
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v9);
  }
  int v10 = v6 - 1;
  uint64_t v31 = a1;
  unsigned int v11 = 0;
  unsigned int v12 = 0;
  unsigned int v13 = 0;
  unsigned int v14 = 0;
  unsigned int v15 = 0;
  int v16 = 0;
  int v17 = 0;
  int v18 = 0;
  int v19 = 0;
  uint64_t v20 = 0;
  int v21 = 0;
  int v22 = 0;
  int v23 = 0;
  uint64_t v24 = 0;
  switch(v10)
  {
    case 0:
      goto LABEL_23;
    case 1:
      goto LABEL_22;
    case 2:
      goto LABEL_21;
    case 3:
      goto LABEL_20;
    case 4:
      goto LABEL_19;
    case 5:
      goto LABEL_18;
    case 6:
      goto LABEL_17;
    case 7:
      goto LABEL_16;
    case 8:
      goto LABEL_15;
    case 9:
      goto LABEL_14;
    case 10:
      goto LABEL_13;
    case 11:
      goto LABEL_12;
    case 12:
      goto LABEL_11;
    case 13:
      goto LABEL_10;
    case 14:
      *uint64_t v4 = erfc(*v3);
      unsigned int v11 = 1;
LABEL_10:
      unsigned int v25 = v11;
      v4[v11] = erfc(v3[v11]);
      unsigned int v12 = v25 + 1;
LABEL_11:
      unsigned int v26 = v12;
      v4[v12] = erfc(v3[v12]);
      unsigned int v13 = v26 + 1;
LABEL_12:
      unsigned int v27 = v13;
      v4[v13] = erfc(v3[v13]);
      unsigned int v14 = v27 + 1;
LABEL_13:
      unsigned int v28 = v14;
      v4[v14] = erfc(v3[v14]);
      unsigned int v15 = v28 + 1;
LABEL_14:
      unsigned int v29 = v15;
      v4[v15] = erfc(v3[v15]);
      int v16 = v29 + 1;
LABEL_15:
      v4[v16] = erfc(v3[v16]);
      int v17 = v16 + 1;
LABEL_16:
      v4[v17] = erfc(v3[v17]);
      int v18 = v17 + 1;
LABEL_17:
      v4[v18] = erfc(v3[v18]);
      int v19 = v18 + 1;
LABEL_18:
      v4[v19] = erfc(v3[v19]);
      LODWORD(v20) = v19 + 1;
LABEL_19:
      v4[v20] = erfc(v3[v20]);
      int v21 = v20 + 1;
LABEL_20:
      v4[v21] = erfc(v3[v21]);
      int v22 = v21 + 1;
LABEL_21:
      v4[v22] = erfc(v3[v22]);
      int v23 = v22 + 1;
LABEL_22:
      v4[v23] = erfc(v3[v23]);
      uint64_t v24 = (v23 + 1);
LABEL_23:
      v4[v24] = erfc(v3[v24]);
      uint64_t v20 = v31;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v20 + 72))(v20) + 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v20 + 72))(v20) + 16);
}

uint64_t sub_103B18()
{
  return 141;
}

uint64_t sub_103B20(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_103B28(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_103B30(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_103B70(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_103B78(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_103B80(uint64_t a1)
{
  return sub_103C24(a1 - 32);
}

void sub_103B88(uint64_t a1)
{
  sub_103C24(a1 - 32);

  operator delete();
}

uint64_t sub_103BC4(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 32) + 72))() + 8);
}

uint64_t sub_103C04(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_103C0C(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_103C14(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_103C1C(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_103C24(uint64_t a1)
{
  *(void *)a1 = off_2402D48;
  *(void *)(a1 + 32) = off_2402DA8;
  if (*(void *)(a1 + 48)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 64) = 0;
  }
  *(void *)a1 = off_23FFC00;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_103D80(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *(void *)a1 = off_23FFC00;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = a3;
  if (a3) {
    BOOL v5 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
  }
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
  else {
    BOOL v5 = 1;
  }
  *(unsigned char *)(a1 + 24) = v5;
  *(void *)a1 = off_2402E30;
  *(void *)(a1 + 32) = off_2402E90;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  operator new();
}

void sub_1043B8(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_E08A0(v1);
  _Unwind_Resume(a1);
}

void sub_104460(uint64_t a1)
{
  sub_104F1C(a1);

  operator delete();
}

uint64_t sub_104498(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)result + 64))(result) + 16);
    uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    int v6 = v5 & 0xF;
    if ((v5 & 0xF) != 0) {
      int v7 = -16;
    }
    else {
      int v7 = 0;
    }
    int64_t v8 = (unint64_t)(v7 + v5) << 32;
    if (v8 >= 1)
    {
      double v9 = (double *)((char *)v3 + (v8 >> 29));
      do
      {
        double v10 = *v3;
        double v11 = -*v3;
        if (*v3 >= 0.0) {
          double v11 = *v3;
        }
        double v12 = (erf(v11 / 1.41421356) + 1.0) * 0.5;
        if (v10 < 0.0) {
          double v12 = 1.0 - v12;
        }
        *uint64_t v4 = v12;
        double v13 = v3[1];
        double v14 = -v13;
        if (v13 >= 0.0) {
          double v14 = v3[1];
        }
        double v15 = (erf(v14 / 1.41421356) + 1.0) * 0.5;
        if (v13 < 0.0) {
          double v15 = 1.0 - v15;
        }
        v4[1] = v15;
        double v16 = v3[2];
        double v17 = -v16;
        if (v16 >= 0.0) {
          double v17 = v3[2];
        }
        double v18 = (erf(v17 / 1.41421356) + 1.0) * 0.5;
        if (v16 < 0.0) {
          double v18 = 1.0 - v18;
        }
        v4[2] = v18;
        double v19 = v3[3];
        double v20 = -v19;
        if (v19 >= 0.0) {
          double v20 = v3[3];
        }
        double v21 = (erf(v20 / 1.41421356) + 1.0) * 0.5;
        if (v19 < 0.0) {
          double v21 = 1.0 - v21;
        }
        v4[3] = v21;
        double v22 = v3[4];
        double v23 = -v22;
        if (v22 >= 0.0) {
          double v23 = v3[4];
        }
        double v24 = (erf(v23 / 1.41421356) + 1.0) * 0.5;
        if (v22 < 0.0) {
          double v24 = 1.0 - v24;
        }
        v4[4] = v24;
        double v25 = v3[5];
        double v26 = -v25;
        if (v25 >= 0.0) {
          double v26 = v3[5];
        }
        double v27 = (erf(v26 / 1.41421356) + 1.0) * 0.5;
        if (v25 < 0.0) {
          double v27 = 1.0 - v27;
        }
        v4[5] = v27;
        double v28 = v3[6];
        double v29 = -v28;
        if (v28 >= 0.0) {
          double v29 = v3[6];
        }
        double v30 = (erf(v29 / 1.41421356) + 1.0) * 0.5;
        if (v28 < 0.0) {
          double v30 = 1.0 - v30;
        }
        v4[6] = v30;
        double v31 = v3[7];
        double v32 = -v31;
        if (v31 >= 0.0) {
          double v32 = v3[7];
        }
        double v33 = (erf(v32 / 1.41421356) + 1.0) * 0.5;
        if (v31 < 0.0) {
          double v33 = 1.0 - v33;
        }
        v4[7] = v33;
        double v34 = v3[8];
        double v35 = -v34;
        if (v34 >= 0.0) {
          double v35 = v3[8];
        }
        double v36 = (erf(v35 / 1.41421356) + 1.0) * 0.5;
        if (v34 < 0.0) {
          double v36 = 1.0 - v36;
        }
        v4[8] = v36;
        double v37 = v3[9];
        double v38 = -v37;
        if (v37 >= 0.0) {
          double v38 = v3[9];
        }
        double v39 = (erf(v38 / 1.41421356) + 1.0) * 0.5;
        if (v37 < 0.0) {
          double v39 = 1.0 - v39;
        }
        v4[9] = v39;
        double v40 = v3[10];
        double v41 = -v40;
        if (v40 >= 0.0) {
          double v41 = v3[10];
        }
        double v42 = (erf(v41 / 1.41421356) + 1.0) * 0.5;
        if (v40 < 0.0) {
          double v42 = 1.0 - v42;
        }
        v4[10] = v42;
        double v43 = v3[11];
        double v44 = -v43;
        if (v43 >= 0.0) {
          double v44 = v3[11];
        }
        double v45 = (erf(v44 / 1.41421356) + 1.0) * 0.5;
        if (v43 < 0.0) {
          double v45 = 1.0 - v45;
        }
        v4[11] = v45;
        double v46 = v3[12];
        double v47 = -v46;
        if (v46 >= 0.0) {
          double v47 = v3[12];
        }
        double v48 = (erf(v47 / 1.41421356) + 1.0) * 0.5;
        if (v46 < 0.0) {
          double v48 = 1.0 - v48;
        }
        v4[12] = v48;
        double v49 = v3[13];
        double v50 = -v49;
        if (v49 >= 0.0) {
          double v50 = v3[13];
        }
        double v51 = (erf(v50 / 1.41421356) + 1.0) * 0.5;
        if (v49 < 0.0) {
          double v51 = 1.0 - v51;
        }
        v4[13] = v51;
        double v52 = v3[14];
        double v53 = -v52;
        if (v52 >= 0.0) {
          double v53 = v3[14];
        }
        double v54 = (erf(v53 / 1.41421356) + 1.0) * 0.5;
        if (v52 < 0.0) {
          double v54 = 1.0 - v54;
        }
        v4[14] = v54;
        double v55 = v3[15];
        double v56 = -v55;
        if (v55 >= 0.0) {
          double v56 = v3[15];
        }
        double v57 = (erf(v56 / 1.41421356) + 1.0) * 0.5;
        if (v55 < 0.0) {
          double v57 = 1.0 - v57;
        }
        v4[15] = v57;
        v3 += 16;
        v4 += 16;
      }
      while (v3 < v9);
    }
    int v58 = v6 - 1;
    uint64_t v129 = a1;
    unsigned int v59 = 0;
    unsigned int v60 = 0;
    unsigned int v61 = 0;
    unsigned int v62 = 0;
    unsigned int v63 = 0;
    unsigned int v64 = 0;
    unsigned int v65 = 0;
    uint64_t v66 = 0;
    int v67 = 0;
    int v68 = 0;
    int v69 = 0;
    int v70 = 0;
    int v71 = 0;
    uint64_t v72 = 0;
    switch(v58)
    {
      case 0:
        goto LABEL_143;
      case 1:
        goto LABEL_138;
      case 2:
        goto LABEL_133;
      case 3:
        goto LABEL_128;
      case 4:
        goto LABEL_123;
      case 5:
        goto LABEL_118;
      case 6:
        goto LABEL_113;
      case 7:
        goto LABEL_108;
      case 8:
        goto LABEL_103;
      case 9:
        goto LABEL_98;
      case 10:
        goto LABEL_93;
      case 11:
        goto LABEL_88;
      case 12:
        goto LABEL_83;
      case 13:
        goto LABEL_78;
      case 14:
        double v73 = *v3;
        double v74 = -*v3;
        if (*v3 >= 0.0) {
          double v74 = *v3;
        }
        double v75 = (erf(v74 / 1.41421356) + 1.0) * 0.5;
        if (v73 < 0.0) {
          double v75 = 1.0 - v75;
        }
        *uint64_t v4 = v75;
        unsigned int v59 = 1;
LABEL_78:
        uint64_t v76 = v59;
        double v77 = v3[v76];
        double v78 = -v77;
        if (v77 >= 0.0) {
          double v78 = v3[v59];
        }
        unsigned int v79 = v59;
        double v80 = (erf(v78 / 1.41421356) + 1.0) * 0.5;
        if (v77 < 0.0) {
          double v80 = 1.0 - v80;
        }
        v4[v76] = v80;
        unsigned int v60 = v79 + 1;
LABEL_83:
        uint64_t v81 = v60;
        double v82 = v3[v81];
        double v83 = -v82;
        if (v82 >= 0.0) {
          double v83 = v3[v60];
        }
        unsigned int v84 = v60;
        double v85 = (erf(v83 / 1.41421356) + 1.0) * 0.5;
        if (v82 < 0.0) {
          double v85 = 1.0 - v85;
        }
        v4[v81] = v85;
        unsigned int v61 = v84 + 1;
LABEL_88:
        uint64_t v86 = v61;
        double v87 = v3[v86];
        double v88 = -v87;
        if (v87 >= 0.0) {
          double v88 = v3[v61];
        }
        unsigned int v89 = v61;
        double v90 = (erf(v88 / 1.41421356) + 1.0) * 0.5;
        if (v87 < 0.0) {
          double v90 = 1.0 - v90;
        }
        v4[v86] = v90;
        unsigned int v62 = v89 + 1;
LABEL_93:
        uint64_t v91 = v62;
        double v92 = v3[v91];
        double v93 = -v92;
        if (v92 >= 0.0) {
          double v93 = v3[v62];
        }
        unsigned int v94 = v62;
        double v95 = (erf(v93 / 1.41421356) + 1.0) * 0.5;
        if (v92 < 0.0) {
          double v95 = 1.0 - v95;
        }
        v4[v91] = v95;
        unsigned int v63 = v94 + 1;
LABEL_98:
        uint64_t v96 = v63;
        double v97 = v3[v96];
        double v98 = -v97;
        if (v97 >= 0.0) {
          double v98 = v3[v63];
        }
        unsigned int v99 = v63;
        double v100 = (erf(v98 / 1.41421356) + 1.0) * 0.5;
        if (v97 < 0.0) {
          double v100 = 1.0 - v100;
        }
        v4[v96] = v100;
        unsigned int v64 = v99 + 1;
LABEL_103:
        double v101 = v3[v64];
        double v102 = -v101;
        if (v101 >= 0.0) {
          double v102 = v3[v64];
        }
        double v103 = (erf(v102 / 1.41421356) + 1.0) * 0.5;
        if (v101 < 0.0) {
          double v103 = 1.0 - v103;
        }
        v4[v64] = v103;
        unsigned int v65 = v64 + 1;
LABEL_108:
        double v104 = v3[v65];
        double v105 = -v104;
        if (v104 >= 0.0) {
          double v105 = v3[v65];
        }
        double v106 = (erf(v105 / 1.41421356) + 1.0) * 0.5;
        if (v104 < 0.0) {
          double v106 = 1.0 - v106;
        }
        v4[v65] = v106;
        LODWORD(v66) = v65 + 1;
LABEL_113:
        double v107 = v3[v66];
        double v108 = -v107;
        if (v107 >= 0.0) {
          double v108 = v3[v66];
        }
        double v109 = (erf(v108 / 1.41421356) + 1.0) * 0.5;
        if (v107 < 0.0) {
          double v109 = 1.0 - v109;
        }
        v4[v66] = v109;
        int v67 = v66 + 1;
LABEL_118:
        double v110 = v3[v67];
        double v111 = -v110;
        if (v110 >= 0.0) {
          double v111 = v3[v67];
        }
        double v112 = (erf(v111 / 1.41421356) + 1.0) * 0.5;
        if (v110 < 0.0) {
          double v112 = 1.0 - v112;
        }
        v4[v67] = v112;
        int v68 = v67 + 1;
LABEL_123:
        double v113 = v3[v68];
        double v114 = -v113;
        if (v113 >= 0.0) {
          double v114 = v3[v68];
        }
        double v115 = (erf(v114 / 1.41421356) + 1.0) * 0.5;
        if (v113 < 0.0) {
          double v115 = 1.0 - v115;
        }
        v4[v68] = v115;
        int v69 = v68 + 1;
LABEL_128:
        double v116 = v3[v69];
        double v117 = -v116;
        if (v116 >= 0.0) {
          double v117 = v3[v69];
        }
        double v118 = (erf(v117 / 1.41421356) + 1.0) * 0.5;
        if (v116 < 0.0) {
          double v118 = 1.0 - v118;
        }
        v4[v69] = v118;
        int v70 = v69 + 1;
LABEL_133:
        double v119 = v3[v70];
        double v120 = -v119;
        if (v119 >= 0.0) {
          double v120 = v3[v70];
        }
        double v121 = (erf(v120 / 1.41421356) + 1.0) * 0.5;
        if (v119 < 0.0) {
          double v121 = 1.0 - v121;
        }
        v4[v70] = v121;
        int v71 = v70 + 1;
LABEL_138:
        double v122 = v3[v71];
        double v123 = -v122;
        if (v122 >= 0.0) {
          double v123 = v3[v71];
        }
        double v124 = (erf(v123 / 1.41421356) + 1.0) * 0.5;
        if (v122 < 0.0) {
          double v124 = 1.0 - v124;
        }
        v4[v71] = v124;
        uint64_t v72 = (v71 + 1);
LABEL_143:
        uint64_t v125 = v72;
        double v126 = v3[v72];
        double v127 = -v126;
        if (v126 >= 0.0) {
          double v127 = v3[v72];
        }
        double v128 = (erf(v127 / 1.41421356) + 1.0) * 0.5;
        if (v126 < 0.0) {
          double v128 = 1.0 - v128;
        }
        v4[v125] = v128;
        uint64_t v66 = v129;
        break;
      default:
        return (*(uint64_t (**)(uint64_t))(*(void *)v66 + 72))(v66);
    }
    return (*(uint64_t (**)(uint64_t))(*(void *)v66 + 72))(v66);
  }
  return result;
}

uint64_t sub_104E10()
{
  return 141;
}

uint64_t sub_104E18(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_104E20(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_104E28(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_104E68(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_104E70(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_104E78(uint64_t a1)
{
  return sub_104F1C(a1 - 32);
}

void sub_104E80(uint64_t a1)
{
  sub_104F1C(a1 - 32);

  operator delete();
}

uint64_t sub_104EBC(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 32) + 72))() + 8);
}

uint64_t sub_104EFC(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_104F04(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_104F0C(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_104F14(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_104F1C(uint64_t a1)
{
  *(void *)a1 = off_2402E30;
  *(void *)(a1 + 32) = off_2402E90;
  if (*(void *)(a1 + 48)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 64) = 0;
  }
  *(void *)a1 = off_23FFC00;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_105078(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *(void *)a1 = off_23FFC00;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = a3;
  if (a3) {
    BOOL v5 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
  }
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
  else {
    BOOL v5 = 1;
  }
  *(unsigned char *)(a1 + 24) = v5;
  *(void *)a1 = off_2402F18;
  *(void *)(a1 + 32) = off_2402F78;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  operator new();
}

void sub_1056B0(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_E08A0(v1);
  _Unwind_Resume(a1);
}

void sub_105758(uint64_t a1)
{
  sub_105D70(a1);

  operator delete();
}

double sub_105790(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 40);
  if (!v2) {
    return NAN;
  }
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 64))(v2) + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v5) << 32;
  if (v7 >= 1)
  {
    int64_t v8 = (double *)((char *)v3 + (v7 >> 29));
    do
    {
      *uint64_t v4 = *v3 - (double)(uint64_t)*v3;
      v4[1] = v3[1] - (double)(uint64_t)v3[1];
      v4[2] = v3[2] - (double)(uint64_t)v3[2];
      v4[3] = v3[3] - (double)(uint64_t)v3[3];
      v4[4] = v3[4] - (double)(uint64_t)v3[4];
      v4[5] = v3[5] - (double)(uint64_t)v3[5];
      v4[6] = v3[6] - (double)(uint64_t)v3[6];
      v4[7] = v3[7] - (double)(uint64_t)v3[7];
      v4[8] = v3[8] - (double)(uint64_t)v3[8];
      v4[9] = v3[9] - (double)(uint64_t)v3[9];
      v4[10] = v3[10] - (double)(uint64_t)v3[10];
      v4[11] = v3[11] - (double)(uint64_t)v3[11];
      v4[12] = v3[12] - (double)(uint64_t)v3[12];
      v4[13] = v3[13] - (double)(uint64_t)v3[13];
      v4[14] = v3[14] - (double)(uint64_t)v3[14];
      v4[15] = v3[15] - (double)(uint64_t)v3[15];
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v8);
  }
  int v9 = (v5 & 0xF) - 1;
  unsigned int v10 = 0;
  unsigned int v11 = 0;
  unsigned int v12 = 0;
  unsigned int v13 = 0;
  unsigned int v14 = 0;
  unsigned int v15 = 0;
  unsigned int v16 = 0;
  unsigned int v17 = 0;
  unsigned int v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  switch(v9)
  {
    case 0:
      goto LABEL_23;
    case 1:
      goto LABEL_22;
    case 2:
      goto LABEL_21;
    case 3:
      goto LABEL_20;
    case 4:
      goto LABEL_19;
    case 5:
      goto LABEL_18;
    case 6:
      goto LABEL_17;
    case 7:
      goto LABEL_16;
    case 8:
      goto LABEL_15;
    case 9:
      goto LABEL_14;
    case 10:
      goto LABEL_13;
    case 11:
      goto LABEL_12;
    case 12:
      goto LABEL_11;
    case 13:
      goto LABEL_10;
    case 14:
      *uint64_t v4 = *v3 - (double)(uint64_t)*v3;
      unsigned int v10 = 1;
LABEL_10:
      v4[v10] = v3[v10] - (double)(uint64_t)v3[v10];
      unsigned int v11 = v10 + 1;
LABEL_11:
      v4[v11] = v3[v11] - (double)(uint64_t)v3[v11];
      unsigned int v12 = v11 + 1;
LABEL_12:
      v4[v12] = v3[v12] - (double)(uint64_t)v3[v12];
      unsigned int v13 = v12 + 1;
LABEL_13:
      v4[v13] = v3[v13] - (double)(uint64_t)v3[v13];
      unsigned int v14 = v13 + 1;
LABEL_14:
      v4[v14] = v3[v14] - (double)(uint64_t)v3[v14];
      unsigned int v15 = v14 + 1;
LABEL_15:
      v4[v15] = v3[v15] - (double)(uint64_t)v3[v15];
      unsigned int v16 = v15 + 1;
LABEL_16:
      v4[v16] = v3[v16] - (double)(uint64_t)v3[v16];
      unsigned int v17 = v16 + 1;
LABEL_17:
      v4[v17] = v3[v17] - (double)(uint64_t)v3[v17];
      unsigned int v18 = v17 + 1;
LABEL_18:
      v4[v18] = v3[v18] - (double)(uint64_t)v3[v18];
      uint64_t v19 = v18 + 1;
LABEL_19:
      v4[v19] = v3[v19] - (double)(uint64_t)v3[v19];
      uint64_t v20 = (v19 + 1);
LABEL_20:
      v4[v20] = v3[v20] - (double)(uint64_t)v3[v20];
      uint64_t v21 = (v20 + 1);
LABEL_21:
      v4[v21] = v3[v21] - (double)(uint64_t)v3[v21];
      uint64_t v22 = (v21 + 1);
LABEL_22:
      v4[v22] = v3[v22] - (double)(uint64_t)v3[v22];
      uint64_t v23 = (v22 + 1);
LABEL_23:
      v4[v23] = v3[v23] - (double)(uint64_t)v3[v23];
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v19, v20, v21, v22, v23)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v19, v20, v21, v22, v23)+ 16);
}

uint64_t sub_105C64()
{
  return 141;
}

uint64_t sub_105C6C(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_105C74(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_105C7C(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_105CBC(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_105CC4(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_105CCC(uint64_t a1)
{
  return sub_105D70(a1 - 32);
}

void sub_105CD4(uint64_t a1)
{
  sub_105D70(a1 - 32);

  operator delete();
}

uint64_t sub_105D10(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 32) + 72))() + 8);
}

uint64_t sub_105D50(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_105D58(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_105D60(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_105D68(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_105D70(uint64_t a1)
{
  *(void *)a1 = off_2402F18;
  *(void *)(a1 + 32) = off_2402F78;
  if (*(void *)(a1 + 48)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 64) = 0;
  }
  *(void *)a1 = off_23FFC00;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_105ECC(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *(void *)a1 = off_23FFC00;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = a3;
  if (a3) {
    BOOL v5 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
  }
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
  else {
    BOOL v5 = 1;
  }
  *(unsigned char *)(a1 + 24) = v5;
  *(void *)a1 = off_2403000;
  *(void *)(a1 + 32) = off_2403060;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  operator new();
}

void sub_106504(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_E08A0(v1);
  _Unwind_Resume(a1);
}

void sub_1065AC(uint64_t a1)
{
  sub_106B48(a1);

  operator delete();
}

double sub_1065E4(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 40);
  if (!v2) {
    return NAN;
  }
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 64))(v2) + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v5) << 32;
  if (v7 >= 1)
  {
    int64_t v8 = (double *)((char *)v3 + (v7 >> 29));
    do
    {
      *uint64_t v4 = (double)(uint64_t)*v3;
      v4[1] = (double)(uint64_t)v3[1];
      v4[2] = (double)(uint64_t)v3[2];
      v4[3] = (double)(uint64_t)v3[3];
      v4[4] = (double)(uint64_t)v3[4];
      v4[5] = (double)(uint64_t)v3[5];
      v4[6] = (double)(uint64_t)v3[6];
      v4[7] = (double)(uint64_t)v3[7];
      v4[8] = (double)(uint64_t)v3[8];
      v4[9] = (double)(uint64_t)v3[9];
      v4[10] = (double)(uint64_t)v3[10];
      v4[11] = (double)(uint64_t)v3[11];
      v4[12] = (double)(uint64_t)v3[12];
      v4[13] = (double)(uint64_t)v3[13];
      v4[14] = (double)(uint64_t)v3[14];
      v4[15] = (double)(uint64_t)v3[15];
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v8);
  }
  int v9 = (v5 & 0xF) - 1;
  unsigned int v10 = 0;
  unsigned int v11 = 0;
  unsigned int v12 = 0;
  unsigned int v13 = 0;
  unsigned int v14 = 0;
  unsigned int v15 = 0;
  unsigned int v16 = 0;
  unsigned int v17 = 0;
  unsigned int v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  switch(v9)
  {
    case 0:
      goto LABEL_23;
    case 1:
      goto LABEL_22;
    case 2:
      goto LABEL_21;
    case 3:
      goto LABEL_20;
    case 4:
      goto LABEL_19;
    case 5:
      goto LABEL_18;
    case 6:
      goto LABEL_17;
    case 7:
      goto LABEL_16;
    case 8:
      goto LABEL_15;
    case 9:
      goto LABEL_14;
    case 10:
      goto LABEL_13;
    case 11:
      goto LABEL_12;
    case 12:
      goto LABEL_11;
    case 13:
      goto LABEL_10;
    case 14:
      *uint64_t v4 = (double)(uint64_t)*v3;
      unsigned int v10 = 1;
LABEL_10:
      v4[v10] = (double)(uint64_t)v3[v10];
      unsigned int v11 = v10 + 1;
LABEL_11:
      v4[v11] = (double)(uint64_t)v3[v11];
      unsigned int v12 = v11 + 1;
LABEL_12:
      v4[v12] = (double)(uint64_t)v3[v12];
      unsigned int v13 = v12 + 1;
LABEL_13:
      v4[v13] = (double)(uint64_t)v3[v13];
      unsigned int v14 = v13 + 1;
LABEL_14:
      v4[v14] = (double)(uint64_t)v3[v14];
      unsigned int v15 = v14 + 1;
LABEL_15:
      v4[v15] = (double)(uint64_t)v3[v15];
      unsigned int v16 = v15 + 1;
LABEL_16:
      v4[v16] = (double)(uint64_t)v3[v16];
      unsigned int v17 = v16 + 1;
LABEL_17:
      v4[v17] = (double)(uint64_t)v3[v17];
      unsigned int v18 = v17 + 1;
LABEL_18:
      v4[v18] = (double)(uint64_t)v3[v18];
      uint64_t v19 = v18 + 1;
LABEL_19:
      v4[v19] = (double)(uint64_t)v3[v19];
      uint64_t v20 = (v19 + 1);
LABEL_20:
      v4[v20] = (double)(uint64_t)v3[v20];
      uint64_t v21 = (v20 + 1);
LABEL_21:
      v4[v21] = (double)(uint64_t)v3[v21];
      uint64_t v22 = (v21 + 1);
LABEL_22:
      v4[v22] = (double)(uint64_t)v3[v22];
      uint64_t v23 = (v22 + 1);
LABEL_23:
      v4[v23] = (double)(uint64_t)v3[v23];
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v19, v20, v21, v22, v23)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v19, v20, v21, v22, v23)+ 16);
}

uint64_t sub_106A3C()
{
  return 141;
}

uint64_t sub_106A44(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_106A4C(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_106A54(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_106A94(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_106A9C(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_106AA4(uint64_t a1)
{
  return sub_106B48(a1 - 32);
}

void sub_106AAC(uint64_t a1)
{
  sub_106B48(a1 - 32);

  operator delete();
}

uint64_t sub_106AE8(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 32) + 72))() + 8);
}

uint64_t sub_106B28(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_106B30(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_106B38(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_106B40(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_106B48(uint64_t a1)
{
  *(void *)a1 = off_2403000;
  *(void *)(a1 + 32) = off_2403060;
  if (*(void *)(a1 + 48)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 64) = 0;
  }
  *(void *)a1 = off_23FFC00;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

uint64_t sub_106CA4(uint64_t a1)
{
  *(void *)a1 = off_24030E8;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_106D1C(uint64_t a1)
{
  *(void *)a1 = off_24030E8;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_106DB4(uint64_t a1)
{
  double result = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  if (result < 0.0) {
    return -result;
  }
  return result;
}

uint64_t sub_106DFC(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_106E04()
{
  return 58;
}

uint64_t sub_106E0C(uint64_t a1)
{
  *(void *)a1 = off_2403138;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_106E84(uint64_t a1)
{
  *(void *)a1 = off_2403138;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_106F1C(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));

  return acos(v1);
}

uint64_t sub_106F68(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_106F70()
{
  return 59;
}

uint64_t sub_106F78(uint64_t a1)
{
  *(void *)a1 = off_2403188;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_106FF0(uint64_t a1)
{
  *(void *)a1 = off_2403188;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_107088(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 + sqrt(v1 * v1 + -1.0);

  return log(v2);
}

uint64_t sub_1070E8(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_1070F0()
{
  return 60;
}

uint64_t sub_1070F8(uint64_t a1)
{
  *(void *)a1 = off_24031D8;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_107170(uint64_t a1)
{
  *(void *)a1 = off_24031D8;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_107208(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));

  return asin(v1);
}

uint64_t sub_107254(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_10725C()
{
  return 61;
}

uint64_t sub_107264(uint64_t a1)
{
  *(void *)a1 = off_2403228;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_1072DC(uint64_t a1)
{
  *(void *)a1 = off_2403228;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_107374(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 + sqrt(v1 * v1 + 1.0);

  return log(v2);
}

uint64_t sub_1073D4(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_1073DC()
{
  return 62;
}

uint64_t sub_1073E4(uint64_t a1)
{
  *(void *)a1 = off_2403278;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_10745C(uint64_t a1)
{
  *(void *)a1 = off_2403278;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_1074F4(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));

  return atan(v1);
}

uint64_t sub_107540(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_107548()
{
  return 63;
}

uint64_t sub_107550(uint64_t a1)
{
  *(void *)a1 = off_24032C8;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_1075C8(uint64_t a1)
{
  *(void *)a1 = off_24032C8;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

long double sub_107660(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = log(v1 + 1.0);
  return (v2 - log(1.0 - v1)) * 0.5;
}

uint64_t sub_1076D4(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_1076DC()
{
  return 64;
}

uint64_t sub_1076E4(uint64_t a1)
{
  *(void *)a1 = off_2403318;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_10775C(uint64_t a1)
{
  *(void *)a1 = off_2403318;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_1077F4(uint64_t a1)
{
  return ceil((*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8)));
}

uint64_t sub_107834(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_10783C()
{
  return 65;
}

uint64_t sub_107844(uint64_t a1)
{
  *(void *)a1 = off_2403368;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_1078BC(uint64_t a1)
{
  *(void *)a1 = off_2403368;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_107954(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));

  return cos(v1);
}

uint64_t sub_1079A0(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_1079A8()
{
  return 66;
}

uint64_t sub_1079B0(uint64_t a1)
{
  *(void *)a1 = off_24033B8;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_107A28(uint64_t a1)
{
  *(void *)a1 = off_24033B8;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_107AC0(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));

  return cosh(v1);
}

uint64_t sub_107B0C(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_107B14()
{
  return 67;
}

uint64_t sub_107B1C(uint64_t a1)
{
  *(void *)a1 = off_2403408;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_107B94(uint64_t a1)
{
  *(void *)a1 = off_2403408;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_107C2C(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));

  return exp(v1);
}

uint64_t sub_107C78(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_107C80()
{
  return 68;
}

uint64_t sub_107C88(uint64_t a1)
{
  *(void *)a1 = off_2403458;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_107D00(uint64_t a1)
{
  *(void *)a1 = off_2403458;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_107D98(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = -v1;
  if (v1 >= 0.0) {
    double v2 = v1;
  }
  if (v2 >= 0.00001) {
    return exp(v1) + -1.0;
  }
  else {
    return v1 + v1 * (v1 * 0.5);
  }
}

uint64_t sub_107E14(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_107E1C()
{
  return 69;
}

uint64_t sub_107E24(uint64_t a1)
{
  *(void *)a1 = off_24034A8;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_107E9C(uint64_t a1)
{
  *(void *)a1 = off_24034A8;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_107F34(uint64_t a1)
{
  return floor((*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8)));
}

uint64_t sub_107F74(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_107F7C()
{
  return 70;
}

uint64_t sub_107F84(uint64_t a1)
{
  *(void *)a1 = off_24034F8;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_107FFC(uint64_t a1)
{
  *(void *)a1 = off_24034F8;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_108094(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));

  return log(v1);
}

uint64_t sub_1080E0(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_1080E8()
{
  return 71;
}

uint64_t sub_1080F0(uint64_t a1)
{
  *(void *)a1 = off_2403548;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_108168(uint64_t a1)
{
  *(void *)a1 = off_2403548;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_108200(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));

  return log10(v1);
}

uint64_t sub_10824C(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_108254()
{
  return 72;
}

uint64_t sub_10825C(uint64_t a1)
{
  *(void *)a1 = off_2403598;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_1082D4(uint64_t a1)
{
  *(void *)a1 = off_2403598;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

long double sub_10836C(uint64_t a1)
{
  long double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  return log(v1) / 0.693147181;
}

uint64_t sub_1083B8(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_1083C0()
{
  return 73;
}

uint64_t sub_1083C8(uint64_t a1)
{
  *(void *)a1 = off_24035E8;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_108440(uint64_t a1)
{
  *(void *)a1 = off_24035E8;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_1084D8(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  if (v1 <= -1.0) {
    return NAN;
  }
  double v2 = -v1;
  if (v1 >= 0.0) {
    double v2 = v1;
  }
  if (v2 <= 0.0001) {
    return v1 * (v1 * -0.5 + 1.0);
  }
  double v3 = v1 + 1.0;

  return log(v3);
}

uint64_t sub_108580(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_108588()
{
  return 74;
}

uint64_t sub_108590(uint64_t a1)
{
  *(void *)a1 = off_2403638;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_108608(uint64_t a1)
{
  *(void *)a1 = off_2403638;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_1086A0(uint64_t a1)
{
  return -(*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
}

uint64_t sub_1086E0(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_1086E8()
{
  return 75;
}

uint64_t sub_1086F0(uint64_t a1)
{
  *(void *)a1 = off_2403688;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_108768(uint64_t a1)
{
  *(void *)a1 = off_2403688;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

uint64_t sub_108800(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t sub_108828(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_108830()
{
  return 76;
}

uint64_t sub_108838(uint64_t a1)
{
  *(void *)a1 = off_24036D8;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_1088B0(uint64_t a1)
{
  *(void *)a1 = off_24036D8;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_108948(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = ceil(v1 + -0.5);
  double v3 = floor(v1 + 0.5);
  if (v1 >= 0.0) {
    return v3;
  }
  else {
    return v2;
  }
}

uint64_t sub_1089A4(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_1089AC()
{
  return 77;
}

uint64_t sub_1089B4(uint64_t a1)
{
  *(void *)a1 = off_2403728;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_108A2C(uint64_t a1)
{
  *(void *)a1 = off_2403728;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_108AC4(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));

  return sin(v1);
}

uint64_t sub_108B10(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_108B18()
{
  return 78;
}

uint64_t sub_108B20(uint64_t a1)
{
  *(void *)a1 = off_2403778;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_108B98(uint64_t a1)
{
  *(void *)a1 = off_2403778;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

void sub_108C30(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  if (fabs(v1) >= 2.22044605e-16) {
    sin(v1);
  }
}

uint64_t sub_108C9C(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_108CA4()
{
  return 79;
}

uint64_t sub_108CAC(uint64_t a1)
{
  *(void *)a1 = off_24037C8;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_108D24(uint64_t a1)
{
  *(void *)a1 = off_24037C8;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_108DBC(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));

  return sinh(v1);
}

uint64_t sub_108E08(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_108E10()
{
  return 80;
}

uint64_t sub_108E18(uint64_t a1)
{
  *(void *)a1 = off_2403818;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_108E90(uint64_t a1)
{
  *(void *)a1 = off_2403818;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_108F28(uint64_t a1)
{
  return sqrt((*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8)));
}

uint64_t sub_108F68(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_108F70()
{
  return 81;
}

uint64_t sub_108F78(uint64_t a1)
{
  *(void *)a1 = off_2403868;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_108FF0(uint64_t a1)
{
  *(void *)a1 = off_2403868;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_109088(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));

  return tan(v1);
}

uint64_t sub_1090D4(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_1090DC()
{
  return 82;
}

uint64_t sub_1090E4(uint64_t a1)
{
  *(void *)a1 = off_24038B8;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_10915C(uint64_t a1)
{
  *(void *)a1 = off_24038B8;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_1091F4(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));

  return tanh(v1);
}

uint64_t sub_109240(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_109248()
{
  return 83;
}

uint64_t sub_109250(uint64_t a1)
{
  *(void *)a1 = off_2403908;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_1092C8(uint64_t a1)
{
  *(void *)a1 = off_2403908;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

long double sub_109360(uint64_t a1)
{
  long double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  return 1.0 / tan(v1);
}

uint64_t sub_1093A8(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_1093B0()
{
  return 84;
}

uint64_t sub_1093B8(uint64_t a1)
{
  *(void *)a1 = off_2403958;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_109430(uint64_t a1)
{
  *(void *)a1 = off_2403958;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

long double sub_1094C8(uint64_t a1)
{
  long double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  return 1.0 / cos(v1);
}

uint64_t sub_109510(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_109518()
{
  return 85;
}

uint64_t sub_109520(uint64_t a1)
{
  *(void *)a1 = off_24039A8;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_109598(uint64_t a1)
{
  *(void *)a1 = off_24039A8;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

long double sub_109630(uint64_t a1)
{
  long double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  return 1.0 / sin(v1);
}

uint64_t sub_109678(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_109680()
{
  return 86;
}

uint64_t sub_109688(uint64_t a1)
{
  *(void *)a1 = off_24039F8;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_109700(uint64_t a1)
{
  *(void *)a1 = off_24039F8;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_109798(uint64_t a1)
{
  return (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8)) * 57.2957795;
}

uint64_t sub_1097E0(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_1097E8()
{
  return 87;
}

uint64_t sub_1097F0(uint64_t a1)
{
  *(void *)a1 = off_2403A48;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_109868(uint64_t a1)
{
  *(void *)a1 = off_2403A48;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_109900(uint64_t a1)
{
  return (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8)) * 0.0174532925;
}

uint64_t sub_109948(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_109950()
{
  return 88;
}

uint64_t sub_109958(uint64_t a1)
{
  *(void *)a1 = off_2403A98;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_1099D0(uint64_t a1)
{
  *(void *)a1 = off_2403A98;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_109A68(uint64_t a1)
{
  return (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8)) * 2.22222222;
}

uint64_t sub_109AB0(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_109AB8()
{
  return 89;
}

uint64_t sub_109AC0(uint64_t a1)
{
  *(void *)a1 = off_2403AE8;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_109B38(uint64_t a1)
{
  *(void *)a1 = off_2403AE8;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_109BD0(uint64_t a1)
{
  return (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8)) * 0.45;
}

uint64_t sub_109C18(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_109C20()
{
  return 90;
}

uint64_t sub_109C28(uint64_t a1)
{
  *(void *)a1 = off_2403B38;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_109CA0(uint64_t a1)
{
  *(void *)a1 = off_2403B38;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_109D38(uint64_t a1)
{
  BOOL v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8)) == 0.0;
  double result = 1.0;
  if (!v1) {
    return 0.0;
  }
  return result;
}

uint64_t sub_109D84(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_109D8C()
{
  return 91;
}

uint64_t sub_109D94(uint64_t a1)
{
  *(void *)a1 = off_2403B88;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_109E0C(uint64_t a1)
{
  *(void *)a1 = off_2403B88;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_109EA4(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  BOOL v2 = v1 < 0.0;
  BOOL v3 = v1 <= 0.0;
  double result = 0.0;
  if (v2) {
    double result = -1.0;
  }
  if (!v3) {
    return 1.0;
  }
  return result;
}

uint64_t sub_109EF8(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_109F00()
{
  return 92;
}

uint64_t sub_109F08(uint64_t a1)
{
  *(void *)a1 = off_2403BD8;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_109F80(uint64_t a1)
{
  *(void *)a1 = off_2403BD8;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_10A018(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));

  return erf(v1);
}

uint64_t sub_10A064(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_10A06C()
{
  return 93;
}

uint64_t sub_10A074(uint64_t a1)
{
  *(void *)a1 = off_2403C28;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_10A0EC(uint64_t a1)
{
  *(void *)a1 = off_2403C28;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_10A184(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));

  return erfc(v1);
}

uint64_t sub_10A1D0(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_10A1D8()
{
  return 94;
}

uint64_t sub_10A1E0(uint64_t a1)
{
  *(void *)a1 = off_2403C78;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_10A258(uint64_t a1)
{
  *(void *)a1 = off_2403C78;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

void sub_10A2F0(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = -v1;
  if (v1 >= 0.0) {
    double v2 = v1;
  }
  erf(v2 / 1.41421356);
}

uint64_t sub_10A370(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_10A378()
{
  return 95;
}

uint64_t sub_10A380(uint64_t a1)
{
  *(void *)a1 = off_2403CC8;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_10A3F8(uint64_t a1)
{
  *(void *)a1 = off_2403CC8;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_10A490(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  return v1 - (double)(uint64_t)v1;
}

uint64_t sub_10A4D8(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_10A4E0()
{
  return 96;
}

uint64_t sub_10A4E8(uint64_t a1)
{
  *(void *)a1 = off_2403D18;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_10A560(uint64_t a1)
{
  *(void *)a1 = off_2403D18;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_10A5F8(uint64_t a1)
{
  return (double)(uint64_t)(*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
}

uint64_t sub_10A63C(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_10A644()
{
  return 97;
}

uint64_t sub_10A64C(uint64_t a1, _DWORD *a2, uint64_t *a3)
{
  if ((*a2 - 82) > 4 || !sub_11C0EC(*(void *)(a1 + 80) + 184, a2)) {
    return 0;
  }
  uint64_t v4 = sub_115C38(a3[1]);
  if (!*a3) {
    return 1;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)*a3 + 32))(*a3) == 18) {
    return v4 ^ 1;
  }
  if (*a3
    && ((*(unsigned int (**)(uint64_t))(*(void *)*a3 + 32))(*a3) == 17
     || *a3
     && ((*(unsigned int (**)(uint64_t))(*(void *)*a3 + 32))(*a3) == 125
      || *a3
      && ((*(unsigned int (**)(uint64_t))(*(void *)*a3 + 32))(*a3) == 126
       || *a3
       && ((*(unsigned int (**)(uint64_t))(*(void *)*a3 + 32))(*a3) == 127
        || *a3 && (*(unsigned int (**)(uint64_t))(*(void *)*a3 + 32))(*a3) == 124)))))
  {
    return v4;
  }
  else
  {
    return 1;
  }
}

uint64_t sub_10A810(uint64_t a1, _DWORD *a2, uint64_t *a3)
{
  if (!*a3) {
    goto LABEL_31;
  }
  int v6 = (*(uint64_t (**)(uint64_t))(*(void *)*a3 + 32))(*a3);
  uint64_t v7 = *a3;
  if (v6 == 17)
  {
    sub_115E58(a1, 1, v7);
    return sub_1161E0(a1, a2, a3);
  }
  if (!v7) {
    goto LABEL_31;
  }
  int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 32))(*a3);
  uint64_t v10 = *a3;
  if (v9 == 125)
  {
    sub_115E58(a1, 3, v10);
    return sub_116664(a1, a2, a3);
  }
  if (!v10) {
    goto LABEL_31;
  }
  int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 32))(*a3);
  uint64_t v12 = *a3;
  if (v11 == 126)
  {
    sub_115E58(a1, 3, v12);
    return sub_116AE8(a1, a2, a3);
  }
  if (!v12) {
    goto LABEL_31;
  }
  int v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 32))(*a3);
  uint64_t v14 = *a3;
  if (v13 == 127)
  {
    sub_115E58(a1, 3, v14);
    return sub_116F6C(a1, a2, a3);
  }
  if (!v14 || (*(unsigned int (**)(uint64_t))(*(void *)v14 + 32))(*a3) != 124)
  {
LABEL_31:
    uint64_t v18 = *(void *)(a1 + 80);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_20B9390;
    strcpy(__str.__r_.__value_.__l.__data_, "Invalid assignment operation.[1]");
    if (*(char *)(v18 + 871) < 0)
    {
      if (!*(void *)(v18 + 856)) {
        goto LABEL_35;
      }
    }
    else if (!*(unsigned char *)(v18 + 871))
    {
LABEL_35:
      std::string::operator=((std::string *)(v18 + 848), &__str);
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return 0;
      }
    }
    operator delete(__str.__r_.__value_.__l.__data_);
    return 0;
  }
  sub_115E58(a1, 2, *a3);
  uint64_t v15 = a3[1];
  if (!v15
    || ((int v16 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 32))(v15), (v16 - 124) <= 0x11)
      ? (BOOL v17 = ((1 << (v16 - 124)) & 0x3C5E1) == 0)
      : (BOOL v17 = 1),
        v17))
  {
    return sub_117874(a1, a2, a3);
  }
  else
  {
    return sub_1173F0(a1, a2, a3);
  }
}

void sub_10AB90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10ABAC(uint64_t a1, const void **a2)
{
  uint64_t v4 = *a2;
  if (!*a2)
  {
    BOOL v5 = 0;
    int v6 = a2[1];
    if (v6) {
      goto LABEL_9;
    }
LABEL_6:
    uint64_t v7 = *a2;
    if (!*a2) {
      goto LABEL_21;
    }
    goto LABEL_12;
  }
  if ((*(unsigned int (**)(const void *))(*(void *)v4 + 32))(*a2) != 17
    && (*(unsigned int (**)(const void *))(*(void *)v4 + 32))(v4) != 125
    && (*(unsigned int (**)(const void *))(*(void *)v4 + 32))(v4) != 126)
  {
    BOOL v5 = (*(uint64_t (**)(const void *))(*(void *)v4 + 32))(v4) == 127;
    int v6 = a2[1];
    if (v6) {
      goto LABEL_9;
    }
    goto LABEL_6;
  }
  BOOL v5 = 1;
  int v6 = a2[1];
  if (!v6) {
    goto LABEL_6;
  }
LABEL_9:
  if ((*(unsigned int (**)(const void *))(*(void *)v6 + 32))(v6) == 17
    || (*(unsigned int (**)(const void *))(*(void *)v6 + 32))(v6) == 125)
  {
    LODWORD(v6) = 1;
    uint64_t v7 = *a2;
    if (!*a2) {
      goto LABEL_21;
    }
  }
  else if ((*(unsigned int (**)(const void *))(*(void *)v6 + 32))(v6) == 126)
  {
    LODWORD(v6) = 1;
    uint64_t v7 = *a2;
    if (!*a2) {
      goto LABEL_21;
    }
  }
  else
  {
    LODWORD(v6) = (*(uint64_t (**)(const void *))(*(void *)v6 + 32))(v6) == 127;
    uint64_t v7 = *a2;
    if (!*a2) {
      goto LABEL_21;
    }
  }
LABEL_12:
  unsigned int v8 = (*(uint64_t (**)(const void *))(*(void *)v7 + 32))(v7) - 124;
  if (v8 <= 0x11)
  {
    unsigned int v9 = (0x3A1Eu >> v8) & 1;
    uint64_t v10 = a2[1];
    if (!v10) {
      goto LABEL_28;
    }
    goto LABEL_22;
  }
LABEL_21:
  unsigned int v9 = 1;
  uint64_t v10 = a2[1];
  if (!v10) {
    goto LABEL_28;
  }
LABEL_22:
  unsigned int v11 = (*(uint64_t (**)(const void *))(*(void *)v10 + 32))(v10) - 124;
  if (v11 <= 0x11)
  {
    unsigned int v12 = (0x3A1Eu >> v11) & 1;
    if ((v5 & v6) != 1) {
      goto LABEL_24;
    }
LABEL_29:
    if (*a2)
    {
      {
        uint64_t v14 = a2[1];
        if (v14)
        {
          {
            operator new();
          }
        }
      }
    }
    operator new();
  }
LABEL_28:
  unsigned int v12 = 1;
  if ((v5 & v6) == 1) {
    goto LABEL_29;
  }
LABEL_24:
  if (((v9 | v12) & 1) == 0) {
    operator new();
  }
  uint64_t v13 = *(void *)(a1 + 80);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
  *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_20B9AA0;
  strcpy(__str.__r_.__value_.__l.__data_, "Only variables, strings, vectors or vector elements can be swapped");
  if (*(char *)(v13 + 871) < 0)
  {
    if (!*(void *)(v13 + 856)) {
      goto LABEL_37;
    }
LABEL_38:
    operator delete(__str.__r_.__value_.__l.__data_);
    return 0;
  }
  if (*(unsigned char *)(v13 + 871)) {
    goto LABEL_38;
  }
LABEL_37:
  std::string::operator=((std::string *)(v13 + 848), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_38;
  }
  return 0;
}

void sub_10B03C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10B090(uint64_t a1, _DWORD *a2, uint64_t *a3)
{
  if (!*a3) {
    goto LABEL_38;
  }
  int v6 = (*(uint64_t (**)(uint64_t))(*(void *)*a3 + 32))(*a3);
  uint64_t v7 = *a3;
  if (v6 == 17)
  {
    sub_115E58(a1, 1, v7);
    switch(*a2)
    {
      case 'R':
        operator new();
      case 'S':
        operator new();
      case 'T':
        operator new();
      case 'U':
        operator new();
      case 'V':
        operator new();
      default:
        return 0;
    }
    return 0;
  }
  if (!v7) {
    goto LABEL_38;
  }
  int v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 32))(*a3);
  uint64_t v9 = *a3;
  if (v8 == 125)
  {
    sub_115E58(a1, 3, v9);
    switch(*a2)
    {
      case 'R':
        operator new();
      case 'S':
        operator new();
      case 'T':
        operator new();
      case 'U':
        operator new();
      case 'V':
        operator new();
      default:
        return 0;
    }
    return 0;
  }
  if (!v9) {
    goto LABEL_38;
  }
  int v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 32))(*a3);
  uint64_t v11 = *a3;
  if (v10 == 126)
  {
    sub_115E58(a1, 3, v11);
    switch(*a2)
    {
      case 'R':
        operator new();
      case 'S':
        operator new();
      case 'T':
        operator new();
      case 'U':
        operator new();
      case 'V':
        operator new();
      default:
        return 0;
    }
    return 0;
  }
  if (!v11) {
    goto LABEL_38;
  }
  int v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 32))(*a3);
  uint64_t v13 = *a3;
  if (v12 == 127)
  {
    sub_115E58(a1, 3, v13);
    switch(*a2)
    {
      case 'R':
        sub_11C234();
      case 'S':
        sub_11C2B8();
      case 'T':
        sub_11C33C();
      case 'U':
        sub_11C3C0();
      case 'V':
        sub_11C444();
      default:
        return 0;
    }
    return 0;
  }
  if (!v13 || (*(unsigned int (**)(uint64_t))(*(void *)v13 + 32))(*a3) != 124)
  {
LABEL_38:
    uint64_t v17 = *(void *)(a1 + 80);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_20B8E90;
    strcpy(__str.__r_.__value_.__l.__data_, "Invalid assignment operation[2]");
    if (*(char *)(v17 + 871) < 0)
    {
      if (*(void *)(v17 + 856)) {
        goto LABEL_43;
      }
    }
    else if (*(unsigned char *)(v17 + 871))
    {
      goto LABEL_43;
    }
    std::string::operator=((std::string *)(v17 + 848), &__str);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return 0;
    }
LABEL_43:
    operator delete(__str.__r_.__value_.__l.__data_);
    return 0;
  }
  sub_115E58(a1, 2, *a3);
  uint64_t v14 = a3[1];
  if (!v14
    || ((int v15 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 32))(v14), (v15 - 124) <= 0x11)
      ? (BOOL v16 = ((1 << (v15 - 124)) & 0x3C5E1) == 0)
      : (BOOL v16 = 1),
        v16))
  {
    switch(*a2)
    {
      case 'R':
        sub_11C75C();
      case 'S':
        sub_11C7E0();
      case 'T':
        sub_11C864();
      case 'U':
        sub_11C8E8();
      case 'V':
        sub_11C96C();
      default:
        return 0;
    }
  }
  else
  {
    switch(*a2)
    {
      case 'R':
        sub_11C4C8();
      case 'S':
        sub_11C54C();
      case 'T':
        sub_11C5D0();
      case 'U':
        sub_11C654();
      case 'V':
        sub_11C6D8();
      default:
        return 0;
    }
  }
  return 0;
}

void sub_10B9BC()
{
}

void sub_10BA18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10BAAC(uint64_t a1, _DWORD *a2, void *a3)
{
  if (!*a3
    || ((int v5 = (*(uint64_t (**)(void))(*(void *)*a3 + 32))(*a3), (v5 - 124) <= 0x11)
      ? (BOOL v6 = ((1 << (v5 - 124)) & 0x3C5E1) == 0)
      : (BOOL v6 = 1),
        v6))
  {
    uint64_t result = a3[1];
    if (!result) {
      return result;
    }
    int v8 = (*(uint64_t (**)(uint64_t))(*(void *)result + 32))(result);
    if ((v8 - 124) > 0x11 || ((1 << (v8 - 124)) & 0x3C5E1) == 0) {
      return 0;
    }
  }
  if (*a2 <= 0x1Bu) {
    return (0xFF7C000u >> *a2) & 1;
  }
  else {
    return 0;
  }
}

uint64_t sub_10BB9C(uint64_t a1, int *a2, void *a3)
{
  if (*a3 && (unsigned int v5 = (*(uint64_t (**)(void))(*(void *)*a3 + 32))(*a3) - 124, v5 <= 0x11))
  {
    unsigned int v6 = (0x3C5E1u >> v5) & 1;
    uint64_t v7 = a3[1];
    if (!v7) {
      goto LABEL_13;
    }
  }
  else
  {
    unsigned int v6 = 0;
    uint64_t v7 = a3[1];
    if (!v7) {
      goto LABEL_13;
    }
  }
  int v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 32))(v7);
  if ((v8 - 124) > 0x11 || ((1 << (v8 - 124)) & 0x3C5E1) == 0)
  {
LABEL_13:
    if (v6)
    {
      switch(*a2)
      {
        case 14:
          sub_12A4D0();
        case 15:
          sub_12A554();
        case 16:
          sub_12A6E0();
        case 17:
          sub_12A7E8();
        case 18:
          sub_12A764();
        case 20:
          sub_12A65C();
        case 21:
          sub_12A5D8();
        case 22:
          sub_12A86C();
        case 23:
          sub_12A8F0();
        case 24:
          sub_12A974();
        case 25:
          sub_12A9F8();
        case 26:
          sub_12AA7C();
        case 27:
          sub_12AB00();
        default:
          return 0;
      }
    }
    return 0;
  }
  int v10 = *a2;
  if (v6)
  {
    switch(v10)
    {
      case 14:
        operator new();
      case 15:
        operator new();
      case 16:
        operator new();
      case 17:
        operator new();
      case 18:
        operator new();
      case 20:
        operator new();
      case 21:
        operator new();
      case 22:
        operator new();
      case 23:
        operator new();
      case 24:
        operator new();
      case 25:
        operator new();
      case 26:
        operator new();
      case 27:
        operator new();
      default:
        return 0;
    }
  }
  else
  {
    switch(v10)
    {
      case 14:
        sub_12AB84();
      case 15:
        sub_12AC08();
      case 16:
        sub_12AD94();
      case 17:
        sub_12AE9C();
      case 18:
        sub_12AE18();
      case 20:
        sub_12AD10();
      case 21:
        sub_12AC8C();
      case 22:
        sub_12AF20();
      case 23:
        sub_12AFA4();
      case 24:
        sub_12B028();
      case 25:
        sub_12B0AC();
      case 26:
        sub_12B130();
      case 27:
        sub_12B1B4();
      default:
        return 0;
    }
  }
  return 0;
}

void sub_10C4C4()
{
}

uint64_t sub_10C5C0(uint64_t a1, _DWORD *a2, void *a3)
{
  if (!*a3
    || ((int v5 = (*(uint64_t (**)(void))(*(void *)*a3 + 32))(*a3), (v5 - 124) <= 0x11)
      ? (BOOL v6 = ((1 << (v5 - 124)) & 0x3C5E1) == 0)
      : (BOOL v6 = 1),
        v6))
  {
    uint64_t result = a3[1];
    if (!result) {
      return result;
    }
    int v8 = (*(uint64_t (**)(uint64_t))(*(void *)result + 32))(result);
    if ((v8 - 124) > 0x11 || ((1 << (v8 - 124)) & 0x3C5E1) == 0) {
      return 0;
    }
  }
  if (*a2 <= 7u) {
    return (0xBCu >> *a2) & 1;
  }
  else {
    return 0;
  }
}

uint64_t sub_10C6AC(uint64_t a1, _DWORD *a2, void *a3)
{
  if (*a3 && (unsigned int v5 = (*(uint64_t (**)(void))(*(void *)*a3 + 32))(*a3) - 124, v5 <= 0x11))
  {
    unsigned int v6 = (0x3C5E1u >> v5) & 1;
    uint64_t v7 = a3[1];
    if (!v7) {
      goto LABEL_13;
    }
  }
  else
  {
    unsigned int v6 = 0;
    uint64_t v7 = a3[1];
    if (!v7) {
      goto LABEL_13;
    }
  }
  int v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 32))(v7);
  if ((v8 - 124) > 0x11 || ((1 << (v8 - 124)) & 0x3C5E1) == 0)
  {
LABEL_13:
    if (v6)
    {
      switch(*a2)
      {
        case 2:
          operator new();
        case 3:
          operator new();
        case 4:
          operator new();
        case 5:
          operator new();
        case 6:
          operator new();
        case 7:
          operator new();
        default:
          return 0;
      }
    }
    return 0;
  }
  if (v6)
  {
    switch(*a2)
    {
      case 2:
        operator new();
      case 3:
        operator new();
      case 4:
        operator new();
      case 5:
        operator new();
      case 6:
        operator new();
      case 7:
        operator new();
      default:
        return 0;
    }
  }
  else
  {
    switch(*a2)
    {
      case 2:
        operator new();
      case 3:
        operator new();
      case 4:
        operator new();
      case 5:
        operator new();
      case 6:
        operator new();
      default:
        return 0;
    }
  }
  return 0;
}

void sub_10CB14()
{
}

uint64_t sub_10CBDC(uint64_t a1, void *a2)
{
  if (!*a2 || (uint64_t result = (*(uint64_t (**)(void))(*(void *)*a2 + 32))(*a2), result != 1))
  {
    uint64_t result = a2[1];
    if (result) {
      return (*(unsigned int (**)(uint64_t))(*(void *)result + 32))(result) == 1;
    }
  }
  return result;
}

uint64_t sub_10CC64(uint64_t a1, int *a2, uint64_t *a3)
{
  if (*a3)
  {
    BOOL v6 = (*(uint64_t (**)(uint64_t))(*(void *)*a3 + 32))(*a3) == 1;
    uint64_t v7 = a3[1];
    if (v7) {
      goto LABEL_3;
    }
LABEL_11:
    BOOL v9 = 0;
    goto LABEL_12;
  }
  BOOL v6 = 0;
  uint64_t v7 = a3[1];
  if (!v7) {
    goto LABEL_11;
  }
LABEL_3:
  int v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 32))(v7);
  BOOL v9 = v8 == 1;
  if (v8 != 1 || !v6)
  {
LABEL_12:
    int v11 = *a2;
    if (*a2 == 18) {
      operator new();
    }
    if (v11 == 16) {
      operator new();
    }
    if (!v6)
    {
      if (!v9)
      {
LABEL_34:
        switch(v11)
        {
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
            return *a3;
          case 14:
          case 15:
          case 20:
          case 21:
          case 22:
          case 23:
          case 24:
          case 25:
          case 26:
          case 27:
          case 87:
          case 88:
          case 89:
            operator new();
          default:
            sub_BBE90(*(void *)(a1 + 8), a3, 0);
            operator new();
        }
        return *a3;
      }
      uint64_t v12 = a3[1];
      if (v12 && (*(unsigned int (**)(uint64_t))(*(void *)v12 + 32))(v12) != 17)
      {
        uint64_t v13 = a3[1];
        if (v13)
        {
          if ((*(unsigned int (**)(uint64_t))(*(void *)v13 + 32))(v13) == 18) {
            goto LABEL_25;
          }
          uint64_t v14 = a3[1];
          if (v14) {
            (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
          }
        }
        a3[1] = 0;
      }
LABEL_25:
      a3[1] = 0;
      int v11 = *a2;
      goto LABEL_34;
    }
    if (*a3 && (*(unsigned int (**)(uint64_t))(*(void *)*a3 + 32))(*a3) != 17)
    {
      if (!*a3)
      {
LABEL_23:
        *a3 = 0;
        goto LABEL_24;
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)*a3 + 32))(*a3) != 18)
      {
        if (*a3) {
          (*(void (**)(uint64_t))(*(void *)*a3 + 8))(*a3);
        }
        goto LABEL_23;
      }
    }
LABEL_24:
    *a3 = a3[1];
    goto LABEL_25;
  }
  if (*a2 == 16 || *a2 == 18) {
    operator new();
  }
  uint64_t v15 = a3[1];
  if (v15 && (*(unsigned int (**)(uint64_t))(*(void *)v15 + 32))(v15) != 17)
  {
    uint64_t v16 = a3[1];
    if (!v16)
    {
LABEL_43:
      a3[1] = 0;
      return *a3;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v16 + 32))(v16) != 18)
    {
      uint64_t v17 = a3[1];
      if (v17) {
        (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
      }
      goto LABEL_43;
    }
  }
  return *a3;
}

void sub_10D3D4()
{
}

uint64_t sub_10D55C(uint64_t a1, _DWORD *a2, uint64_t *a3)
{
  uint64_t result = a3[1];
  if (result)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)result + 32))(result) == 2)
    {
      uint64_t v6 = *a3;
      if (*a3)
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 32))(v6) == 2) {
          return 0;
        }
        uint64_t v6 = *a3;
        if (*a3)
        {
          if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 32))(v6) == 17) {
            return 0;
          }
          uint64_t v6 = *a3;
          if (*a3)
          {
            if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 32))(v6) == 124) {
              return 0;
            }
            uint64_t v6 = *a3;
          }
        }
      }
      if ((sub_115C38(v6) & 1) == 0)
      {
        (*(void (**)(uint64_t))(*(void *)a3[1] + 16))(a3[1]);
        if (*a2 == 7)
        {
          double v8 = -v7;
          if (v7 >= 0.0) {
            double v8 = v7;
          }
          if (v8 <= 60.0) {
            return fmod(v7, 1.0) == 0.0;
          }
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_10D6DC(uint64_t a1, void *a2)
{
  double v4 = (*(double (**)(void))(*(void *)a2[1] + 16))(a2[1]);
  double v5 = -v4;
  if (v4 >= 0.0) {
    double v5 = v4;
  }
  int v6 = (int)v5;
  int v12 = (int)v5;
  uint64_t v7 = a2[1];
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  a2[1] = 0;
  if (!v6)
  {
    if (!*a2) {
      goto LABEL_22;
    }
    if ((*(unsigned int (**)(void))(*(void *)*a2 + 32))(*a2) != 17)
    {
      if (!*a2)
      {
LABEL_14:
        *a2 = 0;
        goto LABEL_15;
      }
      if ((*(unsigned int (**)(void))(*(void *)*a2 + 32))(*a2) != 18)
      {
        if (*a2) {
          (*(void (**)(void))(*(void *)*a2 + 8))(*a2);
        }
        goto LABEL_14;
      }
    }
LABEL_15:
    uint64_t v9 = a2[1];
    if (v9 && (*(unsigned int (**)(uint64_t))(*(void *)v9 + 32))(v9) != 17)
    {
      uint64_t v10 = a2[1];
      if (v10)
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)v10 + 32))(v10) == 18) {
          goto LABEL_22;
        }
        uint64_t v11 = a2[1];
        if (v11) {
          (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
        }
      }
      a2[1] = 0;
    }
LABEL_22:
    operator new();
  }
  if (v4 >= 0.0) {
    return sub_166C20(a1, (uint64_t)a2, &v12);
  }
  else {
    return sub_166F28(a1, (uint64_t)a2, &v12);
  }
}

uint64_t sub_10D940(uint64_t a1, _DWORD *a2, uint64_t **a3, void *a4)
{
  *a4 = 0;
  if (*a2 > 0x1Bu || ((1 << *a2) & 0xFF5C0FC) == 0) {
    return 0;
  }
  p_p = &__p;
  sub_179874(a3, &__p);
  uint64_t v10 = *(void *)(a1 + 24);
  if (!v10) {
    goto LABEL_45;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  uint64_t v12 = a1 + 24;
  do
  {
    int v13 = *(char *)(v10 + 55);
    if (v13 >= 0) {
      size_t v14 = *(unsigned __int8 *)(v10 + 55);
    }
    else {
      size_t v14 = *(void *)(v10 + 40);
    }
    if (v13 >= 0) {
      uint64_t v15 = (const void *)(v10 + 32);
    }
    else {
      uint64_t v15 = *(const void **)(v10 + 32);
    }
    if (size >= v14) {
      size_t v16 = v14;
    }
    else {
      size_t v16 = size;
    }
    int v17 = memcmp(v15, p_p, v16);
    BOOL v18 = v14 < size;
    if (v17) {
      BOOL v18 = v17 < 0;
    }
    BOOL v19 = !v18;
    if (v18) {
      uint64_t v20 = (uint64_t *)(v10 + 8);
    }
    else {
      uint64_t v20 = (uint64_t *)v10;
    }
    if (v19) {
      uint64_t v12 = v10;
    }
    uint64_t v10 = *v20;
  }
  while (*v20);
  if (v12 == a1 + 24) {
    goto LABEL_45;
  }
  int v21 = *(char *)(v12 + 55);
  std::string::size_type v22 = v21 >= 0 ? *(unsigned __int8 *)(v12 + 55) : *(void *)(v12 + 40);
  uint64_t v23 = v21 >= 0 ? (const void *)(v12 + 32) : *(const void **)(v12 + 32);
  size_t v24 = v22 >= size ? size : v22;
  int v25 = memcmp(p_p, v23, v24);
  BOOL v26 = size >= v22;
  if (v25) {
    BOOL v26 = v25 >= 0;
  }
  if (v26)
  {
    *a4 = (*(uint64_t (**)(uint64_t, _DWORD *, uint64_t **))(v12 + 56))(a1, a2, a3);
    uint64_t v27 = 1;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_46;
    }
  }
  else
  {
LABEL_45:
    uint64_t v27 = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_46:
    }
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v27;
}

void sub_10DAEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const void *sub_10DB08(uint64_t a1, _DWORD *a2, void *a3)
{
  if ((*a2 - 2) > 3) {
    return 0;
  }
  if (*a3)
  {
    if ((*(unsigned int (**)(void))(*(void *)*a3 + 32))(*a3) == 2)
    {
      double v4 = (const void *)a3[1];
      if (v4)
      {
        {
          return &def_332C + 1;
        }
      }
    }
  }
  uint64_t result = (const void *)a3[1];
  if (result)
  {
    if ((*(unsigned int (**)(const void *))(*(void *)result + 32))(result) == 2)
    {
      uint64_t result = (const void *)*a3;
      if (*a3) {
      return result;
      }
    }
    return 0;
  }
  return result;
}

const void *sub_10DC60(uint64_t a1, int *a2, void *a3)
{
  double v5 = (const void *)*a3;
  if (!*a3
  {
    uint64_t v11 = a3 + 1;
    uint64_t v12 = (const void *)a3[1];
    if (!v12
    {
      return 0;
    }
    double v13 = (*(double (**)(const void *))(*(void *)v5 + 16))(v5);
    int v14 = *a2;
    if (v13 == 0.0)
    {
      if (v14 != 2)
      {
        if (v14 == 5 || v14 == 4)
        {
          if (*a3 && (*(unsigned int (**)(void))(*(void *)*a3 + 32))(*a3) != 17)
          {
            if (!*a3)
            {
LABEL_33:
              *a3 = 0;
              goto LABEL_34;
            }
            if ((*(unsigned int (**)(void))(*(void *)*a3 + 32))(*a3) != 18)
            {
              if (*a3) {
                (*(void (**)(void))(*(void *)*a3 + 8))(*a3);
              }
              goto LABEL_33;
            }
          }
LABEL_34:
          if (*v11 && (*(unsigned int (**)(void))(*(void *)*v11 + 32))(*v11) != 17)
          {
            if (*v11)
            {
              if ((*(unsigned int (**)(void))(*(void *)*v11 + 32))(*v11) == 18) {
                goto LABEL_41;
              }
              if (*v11) {
                (*(void (**)(void))(*(void *)*v11 + 8))(*v11);
              }
            }
            *uint64_t v11 = 0;
          }
LABEL_41:
          operator new();
        }
LABEL_62:
        if ((*(unsigned int (**)(const void *))(*(void *)v12 + 40))(v12) == 2)
        {
          if (*a2 == 3)
          {
            (*(void (**)(const void *))(*(void *)v12 + 48))(v12);
            uint64_t v30 = 0;
            (*(void (**)(const void *, uint64_t *))(*(void *)v12 + 64))(v12, &v30);
            sub_17A564();
          }
          if (*a2 != 2) {
            return 0;
          }
        }
        else
        {
          if ((*(unsigned int (**)(const void *))(*(void *)v12 + 40))(v12) != 3)
          {
            if ((*(unsigned int (**)(const void *))(*(void *)v12 + 40))(v12) == 4)
            {
              int v28 = *a2;
              if (*a2 == 5)
              {
                (*(void (**)(const void *))(*(void *)v12 + 48))(v12);
                uint64_t v30 = 0;
                (*(void (**)(const void *, uint64_t *))(*(void *)v12 + 64))(v12, &v30);
                sub_17A458();
              }
            }
            else
            {
              if ((*(unsigned int (**)(const void *))(*(void *)v12 + 40))(v12) != 5) {
                return 0;
              }
              int v28 = *a2;
              if (*a2 == 5)
              {
                (*(void (**)(const void *))(*(void *)v12 + 48))(v12);
                uint64_t v30 = 0;
                (*(void (**)(const void *, uint64_t *))(*(void *)v12 + 64))(v12, &v30);
                sub_17A77C();
              }
            }
            if (v28 != 4) {
              return 0;
            }
            v23.n128_f64[0] = v13 * (*(double (**)(const void *))(*(void *)v12 + 48))(v12);
LABEL_116:
            (*(void (**)(const void *, __n128))(*(void *)v12 + 56))(v12, v23);
            if (!*a3 || (*(unsigned int (**)(void))(*(void *)*a3 + 32))(*a3) == 17) {
              return v12;
            }
            if (*a3)
            {
              if ((*(unsigned int (**)(void))(*(void *)*a3 + 32))(*a3) == 18) {
                return v12;
              }
              if (*a3) {
                (*(void (**)(void))(*(void *)*a3 + 8))(*a3);
              }
            }
            *a3 = 0;
            return v12;
          }
          if (*a2 == 3)
          {
            (*(void (**)(const void *))(*(void *)v12 + 48))(v12);
            uint64_t v30 = 0;
            (*(void (**)(const void *, uint64_t *))(*(void *)v12 + 64))(v12, &v30);
            sub_17A670();
          }
          if (*a2 != 2) {
            return 0;
          }
        }
        v23.n128_f64[0] = v13 + (*(double (**)(const void *))(*(void *)v12 + 48))(v12);
        goto LABEL_116;
      }
    }
    else if (v13 != 1.0 || v14 != 4)
    {
      goto LABEL_62;
    }
    if (*a3 && (*(unsigned int (**)(void))(*(void *)*a3 + 32))(*a3) != 17)
    {
      if (!*a3)
      {
LABEL_72:
        *a3 = 0;
        return (const void *)*v11;
      }
      if ((*(unsigned int (**)(void))(*(void *)*a3 + 32))(*a3) != 18)
      {
        if (*a3) {
          (*(void (**)(void))(*(void *)*a3 + 8))(*a3);
        }
        goto LABEL_72;
      }
    }
    return (const void *)*v11;
  }
  double v6 = (*(double (**)(void))(*(void *)a3[1] + 16))(a3[1]);
  if (v6 != 0.0) {
    goto LABEL_42;
  }
  int v7 = *a2;
  if (*a2 == 2) {
    goto LABEL_45;
  }
  if (v7 == 5)
  {
    if (*a3 && (*(unsigned int (**)(void))(*(void *)*a3 + 32))(*a3) != 17)
    {
      if (!*a3)
      {
LABEL_80:
        *a3 = 0;
        goto LABEL_81;
      }
      if ((*(unsigned int (**)(void))(*(void *)*a3 + 32))(*a3) != 18)
      {
        if (*a3) {
          (*(void (**)(void))(*(void *)*a3 + 8))(*a3);
        }
        goto LABEL_80;
      }
    }
LABEL_81:
    uint64_t v20 = a3[1];
    if (v20 && (*(unsigned int (**)(uint64_t))(*(void *)v20 + 32))(v20) != 17)
    {
      uint64_t v21 = a3[1];
      if (v21)
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)v21 + 32))(v21) == 18) {
          goto LABEL_88;
        }
        uint64_t v22 = a3[1];
        if (v22) {
          (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
        }
      }
      a3[1] = 0;
    }
LABEL_88:
    operator new();
  }
  if (v7 == 4)
  {
    if (*a3 && (*(unsigned int (**)(void))(*(void *)*a3 + 32))(*a3) != 17)
    {
      if (!*a3)
      {
LABEL_13:
        *a3 = 0;
        goto LABEL_14;
      }
      if ((*(unsigned int (**)(void))(*(void *)*a3 + 32))(*a3) != 18)
      {
        if (*a3) {
          (*(void (**)(void))(*(void *)*a3 + 8))(*a3);
        }
        goto LABEL_13;
      }
    }
LABEL_14:
    uint64_t v8 = a3[1];
    if (v8 && (*(unsigned int (**)(uint64_t))(*(void *)v8 + 32))(v8) != 17)
    {
      uint64_t v9 = a3[1];
      if (v9)
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)v9 + 32))(v9) == 18) {
          goto LABEL_41;
        }
        uint64_t v10 = a3[1];
        if (v10) {
          (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
        }
      }
      a3[1] = 0;
    }
    goto LABEL_41;
  }
LABEL_42:
  if (v6 == 1.0 && (*a2 == 5 || *a2 == 4))
  {
LABEL_45:
    uint64_t v15 = a3[1];
    if (!v15 || (*(unsigned int (**)(uint64_t))(*(void *)v15 + 32))(v15) == 17) {
      return (const void *)*a3;
    }
    uint64_t v16 = a3[1];
    if (v16)
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)v16 + 32))(v16) == 18) {
        return (const void *)*a3;
      }
      uint64_t v17 = a3[1];
      if (v17) {
        (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
      }
    }
    a3[1] = 0;
    return (const void *)*a3;
  }
  if ((*(unsigned int (**)(const void *))(*(void *)v5 + 40))(v5) != 2
    && (*(unsigned int (**)(const void *))(*(void *)v5 + 40))(v5) != 3)
  {
    if ((*(unsigned int (**)(const void *))(*(void *)v5 + 40))(v5) == 4)
    {
      int v24 = *a2;
      if (*a2 == 5)
      {
        v18.n128_f64[0] = (*(double (**)(const void *))(*(void *)v5 + 48))(v5) / v6;
        goto LABEL_97;
      }
    }
    else
    {
      if ((*(unsigned int (**)(const void *))(*(void *)v5 + 40))(v5) != 5) {
        return 0;
      }
      int v24 = *a2;
      if (*a2 == 5)
      {
        (*(void (**)(const void *))(*(void *)v5 + 48))(v5);
        uint64_t v30 = 0;
        (*(void (**)(const void *, uint64_t *))(*(void *)v5 + 64))(v5, &v30);
        sub_17A458();
      }
    }
    if (v24 == 4)
    {
      v18.n128_f64[0] = v6 * (*(double (**)(const void *))(*(void *)v5 + 48))(v5);
      goto LABEL_97;
    }
    return 0;
  }
  if (*a2 == 3)
  {
    v18.n128_f64[0] = (*(double (**)(const void *))(*(void *)v5 + 48))(v5) - v6;
    goto LABEL_97;
  }
  if (*a2 != 2) {
    return 0;
  }
  v18.n128_f64[0] = v6 + (*(double (**)(const void *))(*(void *)v5 + 48))(v5);
LABEL_97:
  (*(void (**)(const void *, __n128))(*(void *)v5 + 56))(v5, v18);
  uint64_t v25 = a3[1];
  if (v25 && (*(unsigned int (**)(uint64_t))(*(void *)v25 + 32))(v25) != 17)
  {
    uint64_t v26 = a3[1];
    if (v26)
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)v26 + 32))(v26) == 18) {
        return v5;
      }
      uint64_t v27 = a3[1];
      if (v27) {
        (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
      }
    }
    a3[1] = 0;
  }
  return v5;
}

const void *sub_10EA8C(uint64_t a1, _DWORD *a2, void *a3)
{
  if ((*a2 - 2) > 3) {
    return 0;
  }
  if (*a3)
  {
    if ((*(unsigned int (**)(void))(*(void *)*a3 + 32))(*a3) == 2)
    {
      double v4 = (const void *)a3[1];
      if (v4)
      {
        {
          return &def_332C + 1;
        }
      }
    }
  }
  uint64_t result = (const void *)a3[1];
  if (result)
  {
    if ((*(unsigned int (**)(const void *))(*(void *)result + 32))(result) == 2)
    {
      uint64_t result = (const void *)*a3;
      if (*a3) {
      return result;
      }
    }
    return 0;
  }
  return result;
}

const void *sub_10EBE4(uint64_t a1, _DWORD *a2, void *a3)
{
  double v5 = (const void *)*a3;
  if (!*a3
  {
    uint64_t v9 = (const void *)a3[1];
    if (!v9
    {
      return 0;
    }
    double v10 = (*(double (**)(const void *))(*(void *)v5 + 16))(v5);
    if ((*(unsigned int (**)(const void *))(*(void *)v9 + 40))(v9) == 2)
    {
      if (*a2 == 3)
      {
        (*(void (**)(const void *))(*(void *)v9 + 48))(v9);
        uint64_t v15 = 0;
        (*(void (**)(const void *, uint64_t *))(*(void *)v9 + 64))(v9, &v15);
        operator new();
      }
      if (*a2 != 2) {
        return 0;
      }
      v11.n128_f64[0] = v10 + (*(double (**)(const void *))(*(void *)v9 + 48))(v9);
      goto LABEL_13;
    }
    if ((*(unsigned int (**)(const void *))(*(void *)v9 + 40))(v9) == 3)
    {
      if (*a2 == 3)
      {
        (*(void (**)(const void *))(*(void *)v9 + 48))(v9);
        uint64_t v15 = 0;
        (*(void (**)(const void *, uint64_t *))(*(void *)v9 + 64))(v9, &v15);
        operator new();
      }
      if (*a2 == 2)
      {
        uint64_t v15 = 0;
        (*(void (**)(const void *, uint64_t *))(*(void *)v9 + 64))(v9, &v15);
        (*(void (**)(const void *))(*(void *)v9 + 48))(v9);
        operator new();
      }
      return 0;
    }
    if ((*(unsigned int (**)(const void *))(*(void *)v9 + 40))(v9) == 4)
    {
      if (*a2 != 5)
      {
        if (*a2 != 4) {
          return 0;
        }
        v11.n128_f64[0] = v10 * (*(double (**)(const void *))(*(void *)v9 + 48))(v9);
LABEL_13:
        (*(void (**)(const void *, __n128))(*(void *)v9 + 56))(v9, v11);
        double v5 = v9;
        if (!*a3 || (*(unsigned int (**)(void))(*(void *)*a3 + 32))(*a3) == 17) {
          return v5;
        }
        if (!*a3)
        {
          double v6 = a3;
          goto LABEL_58;
        }
        if ((*(unsigned int (**)(void))(*(void *)*a3 + 32))(*a3) == 18) {
          return v5;
        }
        uint64_t v12 = *a3;
        double v6 = a3;
        if (*a3) {
LABEL_56:
        }
          (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
LABEL_58:
        void *v6 = 0;
        return v5;
      }
    }
    else
    {
      if ((*(unsigned int (**)(const void *))(*(void *)v9 + 40))(v9) != 5) {
        return 0;
      }
      if (*a2 != 5)
      {
        if (*a2 != 4) {
          return 0;
        }
        v11.n128_f64[0] = (*(double (**)(const void *))(*(void *)v9 + 48))(v9) / v10;
        goto LABEL_13;
      }
    }
    v14.n128_f64[0] = (*(double (**)(const void *))(*(void *)v9 + 48))(v9);
    uint64_t v15 = 0;
    (*(void (**)(const void *, uint64_t *, __n128))(*(void *)v9 + 64))(v9, &v15, v14);
    sub_17A458();
  }
  double v6 = a3 + 1;
  double v7 = (*(double (**)(void))(*(void *)a3[1] + 16))(a3[1]);
  if ((*(unsigned int (**)(const void *))(*(void *)v5 + 40))(v5) == 2)
  {
    if (*a2 == 3)
    {
      v8.n128_f64[0] = (*(double (**)(const void *))(*(void *)v5 + 48))(v5) - v7;
      goto LABEL_36;
    }
    if (*a2 == 2) {
      goto LABEL_6;
    }
    return 0;
  }
  if ((*(unsigned int (**)(const void *))(*(void *)v5 + 40))(v5) == 4)
  {
    if (*a2 != 5)
    {
      if (*a2 != 4) {
        return 0;
      }
LABEL_17:
      v8.n128_f64[0] = v7 * (*(double (**)(const void *))(*(void *)v5 + 48))(v5);
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if ((*(unsigned int (**)(const void *))(*(void *)v5 + 40))(v5) != 3)
  {
    if ((*(unsigned int (**)(const void *))(*(void *)v5 + 40))(v5) != 5) {
      return 0;
    }
    if (*a2 != 4)
    {
      if (*a2 != 5) {
        return 0;
      }
      goto LABEL_17;
    }
LABEL_35:
    v8.n128_f64[0] = (*(double (**)(const void *))(*(void *)v5 + 48))(v5) / v7;
    goto LABEL_36;
  }
  if (*a2 != 3)
  {
    if (*a2 == 2)
    {
      uint64_t v15 = 0;
      (*(void (**)(const void *, uint64_t *))(*(void *)v5 + 64))(v5, &v15);
      (*(void (**)(const void *))(*(void *)v5 + 48))(v5);
      operator new();
    }
    return 0;
  }
LABEL_6:
  v8.n128_f64[0] = v7 + (*(double (**)(const void *))(*(void *)v5 + 48))(v5);
LABEL_36:
  (*(void (**)(const void *, __n128))(*(void *)v5 + 56))(v5, v8);
  if (!*v6 || (*(unsigned int (**)(void))(*(void *)*v6 + 32))(*v6) == 17) {
    return v5;
  }
  if (!*v6) {
    goto LABEL_58;
  }
  if ((*(unsigned int (**)(void))(*(void *)*v6 + 32))(*v6) != 18)
  {
    uint64_t v12 = *v6;
    if (!*v6) {
      goto LABEL_58;
    }
    goto LABEL_56;
  }
  return v5;
}

void sub_10F854()
{
}

void *sub_10F884(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  if (*a2 > 0x1Bu || ((1 << *a2) & 0xFF5C0FC) == 0) {
    return 0;
  }
  uint64_t result = *(void **)a3;
  if (*(void *)a3)
  {
    if (result)
    {
      uint64_t result = *(void **)(a3 + 8);
      if (result) {
    }
      }
  }
  return result;
}

uint64_t sub_10F974(uint64_t a1, int *a2, void **a3)
{
  int v6 = (*(uint64_t (**)(void))(**a3 + 40))();
  int v7 = (*(uint64_t (**)(void *))(*a3[1] + 40))(a3[1]);
  (*(void (**)(void))(**a3 + 48))();
  (*(void (**)(void *))(*a3[1] + 48))(a3[1]);
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(v8 + 8);
  uint64_t v9 = v8 + 8;
  uint64_t v10 = v11;
  if (v11)
  {
    uint64_t v12 = v9;
    uint64_t v13 = v10;
    do
    {
      int v14 = *(_DWORD *)(v13 + 32);
      BOOL v15 = v14 < v6;
      if (v14 >= v6) {
        uint64_t v16 = (uint64_t *)v13;
      }
      else {
        uint64_t v16 = (uint64_t *)(v13 + 8);
      }
      if (!v15) {
        uint64_t v12 = v13;
      }
      uint64_t v13 = *v16;
    }
    while (*v16);
    if (v12 != v9 && v6 >= *(_DWORD *)(v12 + 32))
    {
      uint64_t v17 = v9;
      do
      {
        int v18 = *(_DWORD *)(v10 + 32);
        BOOL v19 = v18 < v7;
        if (v18 >= v7) {
          uint64_t v20 = (uint64_t *)v10;
        }
        else {
          uint64_t v20 = (uint64_t *)(v10 + 8);
        }
        if (!v19) {
          uint64_t v17 = v10;
        }
        uint64_t v10 = *v20;
      }
      while (*v20);
      if (v17 != v9 && v7 >= *(_DWORD *)(v17 + 32))
      {
        uint64_t v21 = *(void *)(a1 + 48);
        uint64_t v24 = *(void *)(v21 + 8);
        uint64_t v22 = v21 + 8;
        uint64_t v23 = v24;
        if (v24)
        {
          int v25 = *a2;
          uint64_t v26 = v22;
          do
          {
            int v27 = *(_DWORD *)(v23 + 32);
            BOOL v28 = v27 < v25;
            if (v27 >= v25) {
              double v29 = (uint64_t *)v23;
            }
            else {
              double v29 = (uint64_t *)(v23 + 8);
            }
            if (!v28) {
              uint64_t v26 = v23;
            }
            uint64_t v23 = *v29;
          }
          while (*v29);
          if (v26 != v22 && v25 >= *(_DWORD *)(v26 + 32))
          {
            if (v6 == 52 && v7 == 52)
            {
              switch(v25)
              {
                case 2:
                  operator new();
                case 3:
                  operator new();
                case 4:
                  operator new();
                case 5:
                  operator new();
                default:
                  break;
              }
            }
            operator new();
          }
        }
      }
    }
  }
  return 0;
}

uint64_t sub_10FE48(uint64_t a1, _DWORD *a2, uint64_t *a3)
{
  if (*a2 > 0x1Bu || ((1 << *a2) & 0xFF5C0FC) == 0) {
    return 0;
  }
  uint64_t result = *a3;
  if (!*a3) {
    return result;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)result + 32))(result) != 17) {
    return 0;
  }
  uint64_t v6 = a3[1];
  return !v6 || (*(unsigned int (**)(uint64_t))(*(void *)v6 + 32))(v6) != 17;
}

uint64_t sub_10FF14(uint64_t a1, int *a2, void **a3)
{
  uint64_t v6 = (*(uint64_t (**)(void))(*(void *)*a3 + 40))();
  uint64_t v8 = a3[1];
  int v7 = a3 + 1;
  if ((*(unsigned int (**)(void *))(*(void *)v8 + 32))(v8) - 106 <= 4)
  {
    uint64_t v14 = 0;
    if (sub_17B214(a1, v6, a2, v7, &v14))
    {
      if (!*v7 || (*(unsigned int (**)(void *))(*(void *)*v7 + 32))(*v7) == 17) {
        return v14;
      }
      if (*v7)
      {
        if ((*(unsigned int (**)(void *))(*(void *)*v7 + 32))(*v7) == 18) {
          return v14;
        }
        if (*v7) {
          (*(void (**)(void *))(*(void *)*v7 + 8))(*v7);
        }
      }
      *int v7 = 0;
      return v14;
    }
  }
  int v10 = *a2;
  if ((*a2 & 0xFFFFFFFE) == 4)
  {
    uint64_t v11 = (uint64_t *)*v7;
    if (*v7)
    {
      uint64_t v12 = *v11;
      {
        if ((*(unsigned int (**)(uint64_t *))(v12 + 40))(v11) == 52)
        {
          (*(void (**)(void))(*(void *)*v7 + 48))();
          if (!*v7 || (*(unsigned int (**)(void *))(*(void *)*v7 + 32))(*v7) == 17) {
            goto LABEL_22;
          }
          if (*v7)
          {
            if ((*(unsigned int (**)(void *))(*(void *)*v7 + 32))(*v7) == 18)
            {
LABEL_22:
              int v10 = *a2;
              if (*a2 == 5) {
                operator new();
              }
              if (v10 == 4) {
                operator new();
              }
              goto LABEL_26;
            }
            if (*v7) {
              (*(void (**)(void *))(*(void *)*v7 + 8))(*v7);
            }
          }
          *int v7 = 0;
          goto LABEL_22;
        }
        int v10 = *a2;
      }
    }
  }
LABEL_26:
  uint64_t v9 = 0;
  switch(v10)
  {
    case 2:
      operator new();
    case 3:
      operator new();
    case 4:
      operator new();
    case 5:
      operator new();
    case 6:
      operator new();
    case 7:
      operator new();
    case 14:
      operator new();
    case 15:
      operator new();
    case 16:
      operator new();
    case 18:
      operator new();
    case 20:
      operator new();
    case 21:
      operator new();
    case 22:
      operator new();
    case 23:
      operator new();
    case 24:
      operator new();
    case 25:
      operator new();
    case 26:
      operator new();
    case 27:
      operator new();
    default:
      return v9;
  }
  return v9;
}

void sub_110E88()
{
}

uint64_t sub_110F5C(uint64_t a1, _DWORD *a2, void *a3)
{
  if (*a2 > 0x1Bu || ((1 << *a2) & 0xFF5C0FC) == 0) {
    return 0;
  }
  if (*a3 && (*(unsigned int (**)(void))(*(void *)*a3 + 32))(*a3) == 17) {
    return 0;
  }
  uint64_t result = a3[1];
  if (result) {
    return (*(unsigned int (**)(uint64_t))(*(void *)result + 32))(result) == 17;
  }
  return result;
}

uint64_t sub_111028(uint64_t a1, int *a2, void **a3)
{
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)a3[1] + 40))(a3[1]);
  if ((*(unsigned int (**)(void))(*(void *)*a3 + 32))() - 106 <= 4)
  {
    uint64_t v12 = 0;
    if (sub_1939D4(a1, v6, a2, a3, &v12))
    {
      if (!*a3 || (*(unsigned int (**)(void *))(*(void *)*a3 + 32))(*a3) == 17) {
        return v12;
      }
      if (*a3)
      {
        if ((*(unsigned int (**)(void *))(*(void *)*a3 + 32))(*a3) == 18) {
          return v12;
        }
        if (*a3) {
          (*(void (**)(void *))(*(void *)*a3 + 8))(*a3);
        }
      }
      *a3 = 0;
      return v12;
    }
  }
  int v8 = *a2;
  if ((*a2 - 2) <= 3)
  {
    uint64_t v9 = (uint64_t *)*a3;
    if (*a3)
    {
      uint64_t v10 = *v9;
      {
        if ((*(unsigned int (**)(uint64_t *))(v10 + 40))(v9) == 52)
        {
          (*(void (**)(void))(*(void *)*a3 + 48))();
          if (*a3 && (*(unsigned int (**)(void *))(*(void *)*a3 + 32))(*a3) != 17)
          {
            if (*a3)
            {
              if ((*(unsigned int (**)(void *))(*(void *)*a3 + 32))(*a3) == 18) {
                goto LABEL_22;
              }
              if (*a3) {
                (*(void (**)(void *))(*(void *)*a3 + 8))(*a3);
              }
            }
            *a3 = 0;
          }
LABEL_22:
          int v8 = *a2;
          switch(*a2)
          {
            case 2:
              operator new();
            case 3:
              operator new();
            case 4:
              operator new();
            case 5:
              operator new();
            default:
              goto LABEL_25;
          }
          goto LABEL_25;
        }
        int v8 = *a2;
      }
    }
  }
LABEL_25:
  uint64_t v7 = 0;
  switch(v8)
  {
    case 2:
      operator new();
    case 3:
      operator new();
    case 4:
      operator new();
    case 5:
      operator new();
    case 6:
      operator new();
    case 7:
      operator new();
    case 14:
      operator new();
    case 15:
      operator new();
    case 16:
      operator new();
    case 18:
      operator new();
    case 20:
      operator new();
    case 21:
      operator new();
    case 22:
      operator new();
    case 23:
      operator new();
    case 24:
      operator new();
    case 25:
      operator new();
    case 26:
      operator new();
    case 27:
      operator new();
    default:
      return v7;
  }
  return v7;
}

void sub_112050()
{
}

uint64_t sub_112134(uint64_t a1, _DWORD *a2, uint64_t *a3)
{
  if (*a2 > 0x1Bu || ((1 << *a2) & 0xFF5C0FC) == 0) {
    return 0;
  }
  uint64_t result = *a3;
  if (!*a3) {
    return result;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)result + 32))(result) != 2) {
    return 0;
  }
  uint64_t v6 = a3[1];
  return !v6 || (*(unsigned int (**)(uint64_t))(*(void *)v6 + 32))(v6) != 2;
}

uint64_t sub_112200(uint64_t a1, int *a2, void **a3)
{
  double v6 = (*(double (**)(void))(*(void *)*a3 + 16))();
  if (*a3 && (*(unsigned int (**)(void *))(*(void *)*a3 + 32))(*a3) != 17)
  {
    if (*a3)
    {
      if ((*(unsigned int (**)(void *))(*(void *)*a3 + 32))(*a3) == 18) {
        goto LABEL_8;
      }
      if (*a3) {
        (*(void (**)(void *))(*(void *)*a3 + 8))(*a3);
      }
    }
    *a3 = 0;
  }
LABEL_8:
  int v7 = *a2;
  if (v6 != 0.0)
  {
    if (v6 != 1.0 || v7 != 4) {
      goto LABEL_24;
    }
    return (uint64_t)a3[1];
  }
  if (v7 == 2) {
    return (uint64_t)a3[1];
  }
  if (v7 == 5 || v7 == 4)
  {
    int v8 = a3[1];
    if (v8 && (*(unsigned int (**)(void *))(*(void *)v8 + 32))(v8) != 17)
    {
      uint64_t v9 = a3[1];
      if (v9)
      {
        if ((*(unsigned int (**)(void *))(*(void *)v9 + 32))(v9) == 18) {
          goto LABEL_19;
        }
        uint64_t v10 = a3[1];
        if (v10) {
          (*(void (**)(void *))(*(void *)v10 + 8))(v10);
        }
      }
      a3[1] = 0;
    }
LABEL_19:
    operator new();
  }
LABEL_24:
  uint64_t v14 = a3[1];
  uint64_t v12 = a3 + 1;
  uint64_t v13 = v14;
  uint64_t v15 = *v14;
  {
    if (v7 == 4 || (int v16 = v7, v7 == 2))
    {
      int v17 = (*(uint64_t (**)(void *))(v15 + 40))(v13);
      int v16 = *a2;
      if (v7 == v17)
      {
        if (v16 != 4)
        {
          if (v16 == 2)
          {
            v18.n128_f64[0] = v6 + (*(double (**)(void *))(*v13 + 48))(v13);
LABEL_73:
            (*(void (**)(void *, __n128))(*v13 + 56))(v13, v18);
            return (uint64_t)v13;
          }
          return 0;
        }
LABEL_37:
        v18.n128_f64[0] = v6 * (*(double (**)(void *))(*v13 + 48))(v13);
        goto LABEL_73;
      }
    }
    if (v16 == 5)
    {
      uint64_t v20 = *v12;
      int v21 = (*(uint64_t (**)(void *))(*(void *)*v12 + 40))(*v12);
      if ((v21 & 0xFFFFFFFE) == 4)
      {
        if (v21 == 4)
        {
          (*(void (**)(void *))(*(void *)v20 + 48))(v20);
          uint64_t v23 = 0;
          (*(void (**)(void *, uint64_t *))(*(void *)v20 + 64))(v20, &v23);
          sub_17A458();
        }
        if (v21 == 5)
        {
          (*(void (**)(void *))(*(void *)v20 + 48))(v20);
          uint64_t v23 = 0;
          (*(void (**)(void *, uint64_t *))(*(void *)v20 + 64))(v20, &v23);
          sub_17A77C();
        }
        return 0;
      }
    }
    else if (v16 == 4)
    {
      uint64_t v13 = *v12;
      int v19 = (*(uint64_t (**)(void *))(*(void *)*v12 + 40))(*v12);
      if ((v19 & 0xFFFFFFFE) == 4)
      {
        if (v19 == 4)
        {
          v18.n128_f64[0] = (*(double (**)(void *))(*v13 + 48))(v13) / v6;
          goto LABEL_73;
        }
        if (v19 == 5) {
          goto LABEL_37;
        }
        return 0;
      }
    }
    goto LABEL_52;
  }
  if ((*(unsigned int (**)(void *))(v15 + 32))(v13) - 106 <= 4)
  {
    uint64_t v23 = 0;
    if (sub_19EB64(a1, a2, v12, &v23))
    {
      if (!*v12 || (*(unsigned int (**)(void *))(*(void *)*v12 + 32))(*v12) == 17) {
        return v23;
      }
      if (*v12)
      {
        if ((*(unsigned int (**)(void *))(*(void *)*v12 + 32))(*v12) == 18) {
          return v23;
        }
        if (*v12) {
          (*(void (**)(void *))(*(void *)*v12 + 8))(*v12);
        }
      }
      *uint64_t v12 = 0;
      return v23;
    }
  }
LABEL_52:
  uint64_t v13 = 0;
  switch(*a2)
  {
    case 2:
      sub_17A670();
    case 3:
      sub_17A564();
    case 4:
      sub_17A77C();
    case 5:
      sub_17A458();
    case 6:
      sub_19F164();
    case 7:
      sub_19F270();
    case 14:
      sub_19F37C();
    case 15:
      sub_19F488();
    case 16:
      sub_19F7AC();
    case 18:
      sub_19F8B8();
    case 20:
      sub_19F6A0();
    case 21:
      sub_19F594();
    case 22:
      sub_19F9C4();
    case 23:
      sub_19FAD0();
    case 24:
      sub_19FBDC();
    case 25:
      sub_19FCE8();
    case 26:
      sub_19FDF4();
    case 27:
      sub_19FF00();
    default:
      return (uint64_t)v13;
  }
  return (uint64_t)v13;
}

uint64_t sub_1129F4(uint64_t a1, _DWORD *a2, void *a3)
{
  if (*a2 > 0x1Bu || ((1 << *a2) & 0xFF5C0FC) == 0) {
    return 0;
  }
  if (*a3 && (*(unsigned int (**)(void))(*(void *)*a3 + 32))(*a3) == 2) {
    return 0;
  }
  uint64_t result = a3[1];
  if (result) {
    return (*(unsigned int (**)(uint64_t))(*(void *)result + 32))(result) == 2;
  }
  return result;
}

uint64_t sub_112AC0(uint64_t a1, int *a2, void **a3)
{
  double v6 = (*(double (**)(void *))(*(void *)a3[1] + 16))(a3[1]);
  *(double *)&v17[1] = v6;
  int v7 = a3[1];
  if (v7 && (*(unsigned int (**)(void *))(*(void *)v7 + 32))(v7) != 17)
  {
    int v8 = a3[1];
    if (v8)
    {
      if ((*(unsigned int (**)(void *))(*(void *)v8 + 32))(v8) == 18) {
        goto LABEL_8;
      }
      uint64_t v9 = a3[1];
      if (v9) {
        (*(void (**)(void *))(*(void *)v9 + 8))(v9);
      }
    }
    a3[1] = 0;
  }
LABEL_8:
  int v10 = *a2;
  if (v6 != 0.0)
  {
    if (v6 != 1.0 || v10 != 4) {
      goto LABEL_24;
    }
    return (uint64_t)*a3;
  }
  switch(v10)
  {
    case 2:
      return (uint64_t)*a3;
    case 5:
      if (*a3 && (*(unsigned int (**)(void *))(*(void *)*a3 + 32))(*a3) != 17)
      {
        if (*a3)
        {
          if ((*(unsigned int (**)(void *))(*(void *)*a3 + 32))(*a3) == 18) {
            goto LABEL_39;
          }
          if (*a3) {
            (*(void (**)(void *))(*(void *)*a3 + 8))(*a3);
          }
        }
        *a3 = 0;
      }
LABEL_39:
      operator new();
    case 4:
      if (*a3 && (*(unsigned int (**)(void *))(*(void *)*a3 + 32))(*a3) != 17)
      {
        if (*a3)
        {
          if ((*(unsigned int (**)(void *))(*(void *)*a3 + 32))(*a3) == 18) {
            goto LABEL_19;
          }
          if (*a3) {
            (*(void (**)(void *))(*(void *)*a3 + 8))(*a3);
          }
        }
        *a3 = 0;
      }
LABEL_19:
      operator new();
  }
LABEL_24:
  uint64_t v12 = (uint64_t *)*a3;
  if (!*a3 {
    || (uint64_t v13 = *v12,
  }
  {
LABEL_46:
    if ((*(unsigned int (**)(void))(*(void *)*a3 + 32))() - 106 > 4
      || (v17[0] = 0, !sub_1AE214(a1, a2, a3, v17)))
    {
      uint64_t v12 = 0;
      switch(*a2)
      {
        case 2:
          sub_1AE7EC();
        case 3:
          sub_1AE900();
        case 4:
          sub_1AEA14();
        case 5:
          sub_1AEB28();
        case 6:
          sub_1AEC3C();
        case 7:
          sub_1AED50();
        case 14:
          sub_1AEE64();
        case 15:
          sub_1AEF78();
        case 16:
          sub_1AF2B4();
        case 18:
          sub_1AF3C8();
        case 20:
          sub_1AF1A0();
        case 21:
          sub_1AF08C();
        case 22:
          sub_1AF4DC();
        case 23:
          sub_1AF5F0();
        case 24:
          sub_1AF704();
        case 25:
          sub_1AF818();
        case 26:
          sub_1AF92C();
        case 27:
          sub_1AFA40();
        default:
          return (uint64_t)v12;
      }
      return (uint64_t)v12;
    }
    if (*a3 && (*(unsigned int (**)(void *))(*(void *)*a3 + 32))(*a3) != 17)
    {
      if (!*a3)
      {
LABEL_54:
        *a3 = 0;
        return v17[0];
      }
      if ((*(unsigned int (**)(void *))(*(void *)*a3 + 32))(*a3) != 18)
      {
        if (*a3) {
          (*(void (**)(void *))(*(void *)*a3 + 8))(*a3);
        }
        goto LABEL_54;
      }
    }
    return v17[0];
  }
  switch(v10)
  {
    case 2:
    case 4:
      if (v10 != (*(unsigned int (**)(uint64_t *))(v13 + 40))(v12)) {
        goto LABEL_46;
      }
      if (*a2 == 4) {
        goto LABEL_43;
      }
      if (*a2 != 2) {
        return 0;
      }
      v14.n128_f64[0] = v6 + (*(double (**)(uint64_t *))(*v12 + 48))(v12);
      goto LABEL_78;
    case 5:
      int v15 = (*(uint64_t (**)(uint64_t *))(v13 + 40))(v12);
      if ((v15 & 0xFFFFFFFE) != 4) {
        goto LABEL_46;
      }
      if (v15 == 4)
      {
        v14.n128_f64[0] = (*(double (**)(uint64_t *))(*v12 + 48))(v12) / v6;
      }
      else
      {
        if (v15 != 5) {
          return 0;
        }
LABEL_43:
        v14.n128_f64[0] = v6 * (*(double (**)(uint64_t *))(*v12 + 48))(v12);
      }
LABEL_78:
      (*(void (**)(uint64_t *, __n128))(*v12 + 56))(v12, v14);
      break;
    case 7:
      if ((*(unsigned int (**)(uint64_t *))(v13 + 40))(v12) != 7) {
        goto LABEL_46;
      }
      v14.n128_f64[0] = (*(double (**)(uint64_t *))(*v12 + 48))(v12) * v6;
      goto LABEL_78;
    default:
      goto LABEL_46;
  }
  return (uint64_t)v12;
}

uint64_t sub_1132B8(uint64_t a1, _DWORD *a2, uint64_t *a3)
{
  if (*a2 > 0x1Bu || ((1 << *a2) & 0xFF5C0FC) == 0) {
    return 0;
  }
  uint64_t result = *a3;
  if (!*a3) {
    return result;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)result + 32))(result) != 2) {
    return 0;
  }
  uint64_t result = a3[1];
  if (result) {
    return (*(unsigned int (**)(uint64_t))(*(void *)result + 32))(result) == 17;
  }
  return result;
}

uint64_t sub_113374(uint64_t a1, int *a2, void *a3)
{
  double v5 = (*(double (**)(void))(*(void *)*a3 + 16))();
  (*(void (**)(void))(*(void *)a3[1] + 40))(a3[1]);
  if (*a3 && (*(unsigned int (**)(void))(*(void *)*a3 + 32))(*a3) != 17)
  {
    if (*a3)
    {
      if ((*(unsigned int (**)(void))(*(void *)*a3 + 32))(*a3) == 18) {
        goto LABEL_8;
      }
      if (*a3) {
        (*(void (**)(void))(*(void *)*a3 + 8))(*a3);
      }
    }
    *a3 = 0;
  }
LABEL_8:
  if (v5 == 0.0)
  {
    int v6 = *a2;
    if (*a2 == 2) {
      return a3[1];
    }
    if (v6 == 5 || v6 == 4) {
      operator new();
    }
  }
  int v7 = *a2;
  if (v5 == 1.0 && v7 == 4) {
    return a3[1];
  }
  uint64_t result = 0;
  switch(v7)
  {
    case 2:
      operator new();
    case 3:
      operator new();
    case 4:
      operator new();
    case 5:
      operator new();
    case 6:
      operator new();
    case 7:
      operator new();
    case 14:
      operator new();
    case 15:
      operator new();
    case 16:
      operator new();
    case 18:
      operator new();
    case 20:
      operator new();
    case 21:
      operator new();
    case 22:
      operator new();
    case 23:
      operator new();
    case 24:
      operator new();
    case 25:
      operator new();
    case 26:
      operator new();
    case 27:
      operator new();
    default:
      return result;
  }
  return result;
}

BOOL sub_113978(uint64_t a1, _DWORD *a2, void *a3)
{
  if (*a2 > 0x1Bu || ((1 << *a2) & 0xFF5C0FC) == 0) {
    return 0;
  }
  if (*a3)
  {
    if ((*(unsigned int (**)(void))(*(void *)*a3 + 32))(*a3) == 2)
    {
      uint64_t v5 = a3[1];
      if (v5) {
        return (*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5) != 2;
      }
    }
  }
  return 1;
}

uint64_t sub_113A44(uint64_t a1, int *a2, uint64_t *a3)
{
  if (!*a3)
  {
    BOOL v6 = 0;
    int v8 = a3 + 1;
    uint64_t v7 = a3[1];
    if (v7) {
      goto LABEL_3;
    }
LABEL_13:
    BOOL v10 = 0;
    BOOL v12 = !v6;
    BOOL v11 = 1;
    goto LABEL_14;
  }
  BOOL v6 = (*(uint64_t (**)(uint64_t))(*(void *)*a3 + 32))(*a3) == 75;
  int v8 = a3 + 1;
  uint64_t v7 = a3[1];
  if (!v7) {
    goto LABEL_13;
  }
LABEL_3:
  int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 32))(v7);
  BOOL v10 = v9 == 75;
  BOOL v11 = v9 != 75;
  BOOL v12 = !v6;
  if (v6 && v9 == 75)
  {
    int v13 = *a2;
    if ((*a2 - 2) > 3)
    {
LABEL_9:
      if (v13 == 3) {
        operator new();
      }
      if (v13 == 2) {
        operator new();
      }
      goto LABEL_26;
    }
    if (sub_BE590(*(void *)(a1 + 80), a3)
      && (sub_BE590(*(void *)(a1 + 80), v8) & 1) != 0)
    {
      int v13 = *a2;
      goto LABEL_9;
    }
    goto LABEL_28;
  }
LABEL_14:
  if (!v12 && !v10)
  {
    int v13 = *a2;
    if ((*a2 - 2) <= 3)
    {
      if (sub_BE590(*(void *)(a1 + 80), a3))
      {
        switch(*a2)
        {
          case 2:
            goto LABEL_23;
          case 3:
            sub_1BA728();
          case 4:
            sub_1BAA38();
          case 5:
            sub_1BABC0();
          default:
            return 0;
        }
      }
      goto LABEL_28;
    }
LABEL_26:
    switch(v13)
    {
      case 2:
        operator new();
      case 3:
        operator new();
      case 4:
        operator new();
      case 5:
        operator new();
      case 6:
        operator new();
      case 7:
        operator new();
      case 14:
        operator new();
      case 15:
        operator new();
      case 16:
        operator new();
      case 18:
        operator new();
      case 20:
        operator new();
      case 21:
        operator new();
      case 22:
        operator new();
      case 23:
        operator new();
      case 24:
        operator new();
      case 25:
        operator new();
      case 26:
        operator new();
      case 27:
        operator new();
      default:
        return 0;
    }
    return 0;
  }
  int v13 = *a2;
  if (v6 || v11 || (v13 - 6) < 0xFFFFFFFC) {
    goto LABEL_26;
  }
  if (sub_BE590(*(void *)(a1 + 80), v8))
  {
    switch(*a2)
    {
      case 2:
LABEL_23:
        sub_1BA8B0();
      case 3:
        sub_1BA728();
      case 4:
        sub_1BAA38();
      case 5:
        sub_1BABC0();
      default:
        return 0;
    }
    return 0;
  }
LABEL_28:
  if (*a3 && (*(unsigned int (**)(uint64_t))(*(void *)*a3 + 32))(*a3) != 17)
  {
    if (!*a3)
    {
LABEL_34:
      *a3 = 0;
      goto LABEL_35;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)*a3 + 32))(*a3) != 18)
    {
      if (*a3) {
        (*(void (**)(uint64_t))(*(void *)*a3 + 8))(*a3);
      }
      goto LABEL_34;
    }
  }
LABEL_35:
  if (*v8 && (*(unsigned int (**)(uint64_t))(*(void *)*v8 + 32))(*v8) != 17)
  {
    if (*v8)
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)*v8 + 32))(*v8) == 18) {
        return 0;
      }
      if (*v8) {
        (*(void (**)(uint64_t))(*(void *)*v8 + 8))(*v8);
      }
    }
    *int v8 = 0;
  }
  return 0;
}

void sub_1155DC()
{
}

uint64_t sub_1156D8(uint64_t a1, _DWORD *a2, void *a3)
{
  uint64_t v4 = *a3;
  if ((*a2 - 87) <= 2)
  {
    if (v4 && (*(unsigned int (**)(uint64_t))(*(void *)v4 + 32))(v4) != 17)
    {
      if (!*a3)
      {
LABEL_8:
        *a3 = 0;
        goto LABEL_9;
      }
      if ((*(unsigned int (**)(void))(*(void *)*a3 + 32))(*a3) != 18)
      {
        if (*a3) {
          (*(void (**)(void))(*(void *)*a3 + 8))(*a3);
        }
        goto LABEL_8;
      }
    }
LABEL_9:
    uint64_t v5 = a3[1];
    if (v5 && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5) != 17)
    {
      uint64_t v6 = a3[1];
      if (v6)
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 32))(v6) == 18) {
          return 0;
        }
        goto LABEL_31;
      }
LABEL_33:
      a3[1] = 0;
      return 0;
    }
    return 0;
  }
  uint64_t v7 = a3[1];
  if (v4) {
    BOOL v8 = v7 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    if (*a2) {
      operator new();
    }
    return 0;
  }
  if (v4)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 32))(v4) != 17)
    {
      if (!*a3)
      {
LABEL_25:
        *a3 = 0;
        goto LABEL_26;
      }
      if ((*(unsigned int (**)(void))(*(void *)*a3 + 32))(*a3) != 18)
      {
        if (*a3) {
          (*(void (**)(void))(*(void *)*a3 + 8))(*a3);
        }
        goto LABEL_25;
      }
    }
LABEL_26:
    uint64_t v7 = a3[1];
  }
  if (v7 && (*(unsigned int (**)(uint64_t))(*(void *)v7 + 32))(v7) != 17)
  {
    uint64_t v9 = a3[1];
    if (!v9) {
      goto LABEL_33;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v9 + 32))(v9) != 18)
    {
LABEL_31:
      uint64_t v10 = a3[1];
      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
      }
      goto LABEL_33;
    }
  }
  return 0;
}

void sub_115C14()
{
}

uint64_t sub_115C38(uint64_t result)
{
  if (result)
  {
    int v1 = (*(uint64_t (**)(uint64_t))(*(void *)result + 32))(result) - 18;
    uint64_t result = 1;
    switch(v1)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 9:
      case 13:
      case 14:
      case 15:
      case 105:
        return result;
      default:
        uint64_t result = 0;
        break;
    }
  }
  return result;
}

void sub_115E58(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 80);
  if (*(unsigned char *)(v4 + 651))
  {
    if (!*(unsigned char *)(v4 + 474)) {
      return;
    }
  }
  else
  {
    *(unsigned char *)(v4 + 651) = 1;
    if (!*(unsigned char *)(v4 + 474)) {
      return;
    }
  }
  if (a2 == 3)
  {
    int v17 = *(void **)(**(void **)(v4 + 440) + 8);
    if (v17[26])
    {
      __n128 v18 = (void *)v17[24];
      int v19 = v17 + 25;
      if (v19 != v18)
      {
        while (v18[8] != *(void *)(a3 + 24))
        {
          uint64_t v20 = (void *)v18[1];
          if (v20)
          {
            do
            {
              int v21 = v20;
              uint64_t v20 = (void *)*v20;
            }
            while (v20);
          }
          else
          {
            do
            {
              int v21 = (void *)v18[2];
              BOOL v16 = *v21 == (void)v18;
              __n128 v18 = v21;
            }
            while (!v16);
          }
          __n128 v18 = v21;
          if (v19 == v21) {
            goto LABEL_46;
          }
        }
        goto LABEL_61;
      }
    }
LABEL_46:
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v34 = 0;
LABEL_47:
    uint64_t v10 = __p[0];
    uint64_t v9 = __p[1];
    *(_DWORD *)double v32 = v34;
    *(_DWORD *)&v32[3] = *(_DWORD *)((char *)&v34 + 3);
    char v11 = HIBYTE(v34);
    int v12 = 2;
    if (v34 >= 0) {
      uint64_t v26 = (void *)HIBYTE(v34);
    }
    else {
      uint64_t v26 = __p[1];
    }
    if (!v26) {
      goto LABEL_59;
    }
LABEL_51:
    uint64_t v27 = *(void *)(a1 + 80);
    if (*(unsigned char *)(v27 + 474))
    {
      if (v11 < 0)
      {
        sub_4200(__p, v10, (unint64_t)v9);
      }
      else
      {
        __p[0] = v10;
        __p[1] = v9;
        LODWORD(v34) = *(_DWORD *)v32;
        *(_DWORD *)((char *)&v34 + 3) = *(_DWORD *)&v32[3];
        HIBYTE(v34) = v11;
      }
      int v35 = v12;
      unint64_t v28 = *(void *)(v27 + 512);
      if (v28 >= *(void *)(v27 + 520))
      {
        uint64_t v30 = sub_D2F30((void **)(v27 + 504), (uint64_t)__p);
        int v31 = SHIBYTE(v34);
        *(void *)(v27 + 512) = v30;
        if (v31 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v29 = *(_OWORD *)__p;
        *(void *)(v28 + 16) = v34;
        *(_OWORD *)unint64_t v28 = v29;
        *(_DWORD *)(v28 + 24) = v35;
        *(void *)(v27 + 512) = v28 + 32;
      }
    }
    goto LABEL_59;
  }
  if (a2 == 2)
  {
    uint64_t v22 = *(void **)(**(void **)(v4 + 440) + 8);
    if (v22[26])
    {
      __n128 v18 = (void *)v22[24];
      uint64_t v23 = v22 + 25;
      if (v23 != v18)
      {
        while (v18[8] != *(void *)(a3 + 16))
        {
          uint64_t v24 = (void *)v18[1];
          if (v24)
          {
            do
            {
              int v25 = v24;
              uint64_t v24 = (void *)*v24;
            }
            while (v24);
          }
          else
          {
            do
            {
              int v25 = (void *)v18[2];
              BOOL v16 = *v25 == (void)v18;
              __n128 v18 = v25;
            }
            while (!v16);
          }
          __n128 v18 = v25;
          if (v23 == v25) {
            goto LABEL_46;
          }
        }
LABEL_61:
        if (*((char *)v18 + 55) < 0)
        {
          sub_4200(__p, (void *)v18[4], v18[5]);
        }
        else
        {
          *(_OWORD *)std::string __p = *((_OWORD *)v18 + 2);
          uint64_t v34 = v18[6];
        }
        goto LABEL_47;
      }
    }
    goto LABEL_46;
  }
  if (a2 != 1) {
    return;
  }
  uint64_t v5 = *(void **)(**(void **)(v4 + 440) + 8);
  if (v5[2] && (v8 = (void *)*v5, v6 = v5 + 1, uint64_t v7 = v8, v6 != v8))
  {
    while (v7[8] != a3)
    {
      __n128 v14 = (void *)v7[1];
      if (v14)
      {
        do
        {
          int v15 = v14;
          __n128 v14 = (void *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          int v15 = (void *)v7[2];
          BOOL v16 = *v15 == (void)v7;
          uint64_t v7 = v15;
        }
        while (!v16);
      }
      uint64_t v7 = v15;
      if (v6 == v15) {
        goto LABEL_10;
      }
    }
    if (*((char *)v7 + 55) < 0)
    {
      sub_4200(__p, (void *)v7[4], v7[5]);
    }
    else
    {
      *(_OWORD *)std::string __p = *((_OWORD *)v7 + 2);
      uint64_t v34 = v7[6];
    }
  }
  else
  {
LABEL_10:
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v34 = 0;
  }
  uint64_t v10 = __p[0];
  uint64_t v9 = __p[1];
  *(_DWORD *)double v32 = v34;
  *(_DWORD *)&v32[3] = *(_DWORD *)((char *)&v34 + 3);
  char v11 = HIBYTE(v34);
  int v12 = 1;
  if (v34 >= 0) {
    int v13 = (void *)HIBYTE(v34);
  }
  else {
    int v13 = __p[1];
  }
  if (v13) {
    goto LABEL_51;
  }
LABEL_59:
  if (v11 < 0) {
    operator delete(v10);
  }
}

void sub_116198(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1161AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    if ((v17 & 0x80) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((v17 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1161E0(uint64_t a1, _DWORD *a2, void *a3)
{
  uint64_t v4 = *a3;
  if ((*a2 - 87) <= 2)
  {
    if (v4 && (*(unsigned int (**)(uint64_t))(*(void *)v4 + 32))(v4) != 17)
    {
      if (!*a3)
      {
LABEL_8:
        *a3 = 0;
        goto LABEL_9;
      }
      if ((*(unsigned int (**)(void))(*(void *)*a3 + 32))(*a3) != 18)
      {
        if (*a3) {
          (*(void (**)(void))(*(void *)*a3 + 8))(*a3);
        }
        goto LABEL_8;
      }
    }
LABEL_9:
    uint64_t v5 = a3[1];
    if (!v5 || (*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5) == 17) {
      return 0;
    }
    uint64_t v10 = a3[1];
    if (v10)
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)v10 + 32))(v10) == 18) {
        return 0;
      }
LABEL_35:
      uint64_t v11 = a3[1];
      if (v11) {
        (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
      }
      goto LABEL_37;
    }
    goto LABEL_37;
  }
  uint64_t v6 = a3[1];
  if (v4) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    if (*a2) {
      operator new();
    }
    return 0;
  }
  if (v4)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 32))(v4) != 17)
    {
      if (!*a3)
      {
LABEL_23:
        *a3 = 0;
        goto LABEL_24;
      }
      if ((*(unsigned int (**)(void))(*(void *)*a3 + 32))(*a3) != 18)
      {
        if (*a3) {
          (*(void (**)(void))(*(void *)*a3 + 8))(*a3);
        }
        goto LABEL_23;
      }
    }
LABEL_24:
    uint64_t v6 = a3[1];
  }
  if (!v6 || (*(unsigned int (**)(uint64_t))(*(void *)v6 + 32))(v6) == 17) {
    return 0;
  }
  uint64_t v8 = a3[1];
  if (v8)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 32))(v8) == 18) {
      return 0;
    }
    goto LABEL_35;
  }
LABEL_37:
  a3[1] = 0;
  return 0;
}

void sub_116640()
{
}

uint64_t sub_116664(uint64_t a1, _DWORD *a2, void *a3)
{
  uint64_t v4 = *a3;
  if ((*a2 - 87) <= 2)
  {
    if (v4 && (*(unsigned int (**)(uint64_t))(*(void *)v4 + 32))(v4) != 17)
    {
      if (!*a3)
      {
LABEL_8:
        *a3 = 0;
        goto LABEL_9;
      }
      if ((*(unsigned int (**)(void))(*(void *)*a3 + 32))(*a3) != 18)
      {
        if (*a3) {
          (*(void (**)(void))(*(void *)*a3 + 8))(*a3);
        }
        goto LABEL_8;
      }
    }
LABEL_9:
    uint64_t v5 = a3[1];
    if (!v5 || (*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5) == 17) {
      return 0;
    }
    uint64_t v10 = a3[1];
    if (v10)
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)v10 + 32))(v10) == 18) {
        return 0;
      }
LABEL_35:
      uint64_t v11 = a3[1];
      if (v11) {
        (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
      }
      goto LABEL_37;
    }
    goto LABEL_37;
  }
  uint64_t v6 = a3[1];
  if (v4) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    if (*a2) {
      operator new();
    }
    return 0;
  }
  if (v4)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 32))(v4) != 17)
    {
      if (!*a3)
      {
LABEL_23:
        *a3 = 0;
        goto LABEL_24;
      }
      if ((*(unsigned int (**)(void))(*(void *)*a3 + 32))(*a3) != 18)
      {
        if (*a3) {
          (*(void (**)(void))(*(void *)*a3 + 8))(*a3);
        }
        goto LABEL_23;
      }
    }
LABEL_24:
    uint64_t v6 = a3[1];
  }
  if (!v6 || (*(unsigned int (**)(uint64_t))(*(void *)v6 + 32))(v6) == 17) {
    return 0;
  }
  uint64_t v8 = a3[1];
  if (v8)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 32))(v8) == 18) {
      return 0;
    }
    goto LABEL_35;
  }
LABEL_37:
  a3[1] = 0;
  return 0;
}

void sub_116AC4()
{
}

uint64_t sub_116AE8(uint64_t a1, _DWORD *a2, void *a3)
{
  uint64_t v4 = *a3;
  if ((*a2 - 87) <= 2)
  {
    if (v4 && (*(unsigned int (**)(uint64_t))(*(void *)v4 + 32))(v4) != 17)
    {
      if (!*a3)
      {
LABEL_8:
        *a3 = 0;
        goto LABEL_9;
      }
      if ((*(unsigned int (**)(void))(*(void *)*a3 + 32))(*a3) != 18)
      {
        if (*a3) {
          (*(void (**)(void))(*(void *)*a3 + 8))(*a3);
        }
        goto LABEL_8;
      }
    }
LABEL_9:
    uint64_t v5 = a3[1];
    if (!v5 || (*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5) == 17) {
      return 0;
    }
    uint64_t v10 = a3[1];
    if (v10)
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)v10 + 32))(v10) == 18) {
        return 0;
      }
LABEL_35:
      uint64_t v11 = a3[1];
      if (v11) {
        (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
      }
      goto LABEL_37;
    }
    goto LABEL_37;
  }
  uint64_t v6 = a3[1];
  if (v4) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    if (*a2) {
      operator new();
    }
    return 0;
  }
  if (v4)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 32))(v4) != 17)
    {
      if (!*a3)
      {
LABEL_23:
        *a3 = 0;
        goto LABEL_24;
      }
      if ((*(unsigned int (**)(void))(*(void *)*a3 + 32))(*a3) != 18)
      {
        if (*a3) {
          (*(void (**)(void))(*(void *)*a3 + 8))(*a3);
        }
        goto LABEL_23;
      }
    }
LABEL_24:
    uint64_t v6 = a3[1];
  }
  if (!v6 || (*(unsigned int (**)(uint64_t))(*(void *)v6 + 32))(v6) == 17) {
    return 0;
  }
  uint64_t v8 = a3[1];
  if (v8)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 32))(v8) == 18) {
      return 0;
    }
    goto LABEL_35;
  }
LABEL_37:
  a3[1] = 0;
  return 0;
}

void sub_116F48()
{
}

uint64_t sub_116F6C(uint64_t a1, _DWORD *a2, void *a3)
{
  uint64_t v4 = *a3;
  if ((*a2 - 87) <= 2)
  {
    if (v4 && (*(unsigned int (**)(uint64_t))(*(void *)v4 + 32))(v4) != 17)
    {
      if (!*a3)
      {
LABEL_8:
        *a3 = 0;
        goto LABEL_9;
      }
      if ((*(unsigned int (**)(void))(*(void *)*a3 + 32))(*a3) != 18)
      {
        if (*a3) {
          (*(void (**)(void))(*(void *)*a3 + 8))(*a3);
        }
        goto LABEL_8;
      }
    }
LABEL_9:
    uint64_t v5 = a3[1];
    if (!v5 || (*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5) == 17) {
      return 0;
    }
    uint64_t v10 = a3[1];
    if (v10)
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)v10 + 32))(v10) == 18) {
        return 0;
      }
LABEL_35:
      uint64_t v11 = a3[1];
      if (v11) {
        (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
      }
      goto LABEL_37;
    }
    goto LABEL_37;
  }
  uint64_t v6 = a3[1];
  if (v4) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    if (*a2) {
      operator new();
    }
    return 0;
  }
  if (v4)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 32))(v4) != 17)
    {
      if (!*a3)
      {
LABEL_23:
        *a3 = 0;
        goto LABEL_24;
      }
      if ((*(unsigned int (**)(void))(*(void *)*a3 + 32))(*a3) != 18)
      {
        if (*a3) {
          (*(void (**)(void))(*(void *)*a3 + 8))(*a3);
        }
        goto LABEL_23;
      }
    }
LABEL_24:
    uint64_t v6 = a3[1];
  }
  if (!v6 || (*(unsigned int (**)(uint64_t))(*(void *)v6 + 32))(v6) == 17) {
    return 0;
  }
  uint64_t v8 = a3[1];
  if (v8)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 32))(v8) == 18) {
      return 0;
    }
    goto LABEL_35;
  }
LABEL_37:
  a3[1] = 0;
  return 0;
}

void sub_1173CC()
{
}

uint64_t sub_1173F0(uint64_t a1, _DWORD *a2, void *a3)
{
  uint64_t v4 = *a3;
  if ((*a2 - 87) <= 2)
  {
    if (v4 && (*(unsigned int (**)(uint64_t))(*(void *)v4 + 32))(v4) != 17)
    {
      if (!*a3)
      {
LABEL_8:
        *a3 = 0;
        goto LABEL_9;
      }
      if ((*(unsigned int (**)(void))(*(void *)*a3 + 32))(*a3) != 18)
      {
        if (*a3) {
          (*(void (**)(void))(*(void *)*a3 + 8))(*a3);
        }
        goto LABEL_8;
      }
    }
LABEL_9:
    uint64_t v5 = a3[1];
    if (!v5 || (*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5) == 17) {
      return 0;
    }
    uint64_t v10 = a3[1];
    if (v10)
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)v10 + 32))(v10) == 18) {
        return 0;
      }
LABEL_35:
      uint64_t v11 = a3[1];
      if (v11) {
        (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
      }
      goto LABEL_37;
    }
    goto LABEL_37;
  }
  uint64_t v6 = a3[1];
  if (v4) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    if (*a2) {
      operator new();
    }
    return 0;
  }
  if (v4)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 32))(v4) != 17)
    {
      if (!*a3)
      {
LABEL_23:
        *a3 = 0;
        goto LABEL_24;
      }
      if ((*(unsigned int (**)(void))(*(void *)*a3 + 32))(*a3) != 18)
      {
        if (*a3) {
          (*(void (**)(void))(*(void *)*a3 + 8))(*a3);
        }
        goto LABEL_23;
      }
    }
LABEL_24:
    uint64_t v6 = a3[1];
  }
  if (!v6 || (*(unsigned int (**)(uint64_t))(*(void *)v6 + 32))(v6) == 17) {
    return 0;
  }
  uint64_t v8 = a3[1];
  if (v8)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 32))(v8) == 18) {
      return 0;
    }
    goto LABEL_35;
  }
LABEL_37:
  a3[1] = 0;
  return 0;
}

void sub_117850()
{
}

uint64_t sub_117874(uint64_t a1, _DWORD *a2, void *a3)
{
  uint64_t v4 = *a3;
  if ((*a2 - 87) <= 2)
  {
    if (v4 && (*(unsigned int (**)(uint64_t))(*(void *)v4 + 32))(v4) != 17)
    {
      if (!*a3)
      {
LABEL_8:
        *a3 = 0;
        goto LABEL_9;
      }
      if ((*(unsigned int (**)(void))(*(void *)*a3 + 32))(*a3) != 18)
      {
        if (*a3) {
          (*(void (**)(void))(*(void *)*a3 + 8))(*a3);
        }
        goto LABEL_8;
      }
    }
LABEL_9:
    uint64_t v5 = a3[1];
    if (!v5 || (*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5) == 17) {
      return 0;
    }
    uint64_t v10 = a3[1];
    if (v10)
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)v10 + 32))(v10) == 18) {
        return 0;
      }
LABEL_35:
      uint64_t v11 = a3[1];
      if (v11) {
        (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
      }
      goto LABEL_37;
    }
    goto LABEL_37;
  }
  uint64_t v6 = a3[1];
  if (v4) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    if (*a2) {
      operator new();
    }
    return 0;
  }
  if (v4)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 32))(v4) != 17)
    {
      if (!*a3)
      {
LABEL_23:
        *a3 = 0;
        goto LABEL_24;
      }
      if ((*(unsigned int (**)(void))(*(void *)*a3 + 32))(*a3) != 18)
      {
        if (*a3) {
          (*(void (**)(void))(*(void *)*a3 + 8))(*a3);
        }
        goto LABEL_23;
      }
    }
LABEL_24:
    uint64_t v6 = a3[1];
  }
  if (!v6 || (*(unsigned int (**)(uint64_t))(*(void *)v6 + 32))(v6) == 17) {
    return 0;
  }
  uint64_t v8 = a3[1];
  if (v8)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 32))(v8) == 18) {
      return 0;
    }
    goto LABEL_35;
  }
LABEL_37:
  a3[1] = 0;
  return 0;
}

void sub_117CD4()
{
}

uint64_t sub_117CF8(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3;
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5) != 18;
    *(void *)(a1 + 16) = v5;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
    uint64_t v5 = *(void *)(a1 + 16);
  }
  *(void *)a1 = off_2403D68;
  *(void *)(a1 + 48) = 0;
  if (v5 && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5) == 17) {
    *(void *)(a1 + 48) = *(void *)(a1 + 16);
  }
  return a1;
}

void sub_117EA8(_Unwind_Exception *a1)
{
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_117EBC(uint64_t a1)
{
  *(void *)a1 = off_2403DD0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      goto LABEL_16;
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v7 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return a1;
  }
LABEL_16:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  return a1;
}

uint64_t sub_117F98(uint64_t a1)
{
  *(void *)a1 = off_2403DD0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      goto LABEL_16;
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v7 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return a1;
  }
LABEL_16:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  return a1;
}

void sub_118074(uint64_t a1)
{
  *(void *)a1 = off_2403DD0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a1 + 32) = 0;
  }

  operator delete();
}

double sub_11814C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (!v2) {
    return NAN;
  }
  BOOL v3 = (double *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
  double result = (*(double (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  double *v3 = result;
  return result;
}

uint64_t sub_1181DC(uint64_t a1, void *a2)
{
  if (*a2 == 1) {
    return *(void *)(a1 + 32);
  }
  if (*a2) {
    return 0;
  }
  return *(void *)(a1 + 16);
}

uint64_t sub_11820C()
{
  return 4;
}

uint64_t sub_118214(uint64_t a1)
{
  *(void *)a1 = off_2403DD0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      goto LABEL_16;
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v7 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return a1;
  }
LABEL_16:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  return a1;
}

void sub_1182F0(uint64_t a1)
{
  *(void *)a1 = off_2403DD0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a1 + 32) = 0;
  }

  operator delete();
}

double sub_1183C8(uint64_t a1)
{
  double v2 = (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  double v3 = (*(double (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  int v4 = *(_DWORD *)(a1 + 8);

  return sub_118460(v4, v2, v3);
}

double sub_118460(int a1, double a2, double a3)
{
  double result = NAN;
  double v5 = a3;
  switch(a1)
  {
    case 2:
      double result = a2 + a3;
      break;
    case 3:
      double result = a2 - a3;
      break;
    case 4:
      double result = a2 * a3;
      break;
    case 5:
      double result = a2 / a3;
      break;
    case 6:
      double result = fmod(a2, a3);
      break;
    case 7:
      long double v6 = a2;
      goto LABEL_9;
    case 8:
      double result = atan2(a2, a3);
      break;
    case 9:
      if (a3 >= a2) {
        double result = a2;
      }
      else {
        double result = a3;
      }
      break;
    case 10:
      if (a2 >= a3) {
        double result = a2;
      }
      else {
        double result = a3;
      }
      break;
    case 14:
      double result = 0.0;
      if (a2 < a3) {
        double result = 1.0;
      }
      break;
    case 15:
      double result = 0.0;
      if (a2 <= a3) {
        double result = 1.0;
      }
      break;
    case 16:
      double result = 0.0;
      if (a2 == a3) {
        double result = 1.0;
      }
      break;
    case 17:
      double v7 = a2 - a3;
      if (a2 - a3 < 0.0) {
        double v7 = -(a2 - a3);
      }
      double v8 = -a2;
      if (a2 >= 0.0) {
        double v8 = a2;
      }
      double v9 = -v5;
      if (v5 >= 0.0) {
        double v9 = v5;
      }
      if (v8 < v9) {
        double v8 = v9;
      }
      if (v8 <= 1.0) {
        double v10 = 1.0e-10;
      }
      else {
        double v10 = v8 * 1.0e-10;
      }
      BOOL v11 = v7 > v10;
      double result = 0.0;
      if (!v11) {
        double result = 1.0;
      }
      break;
    case 18:
      double result = 0.0;
      if (a2 != a3) {
        double result = 1.0;
      }
      break;
    case 19:
      double v12 = a2 - a3;
      if (a2 - a3 < 0.0) {
        double v12 = -(a2 - a3);
      }
      double v13 = -a2;
      if (a2 >= 0.0) {
        double v13 = a2;
      }
      double v14 = -v5;
      if (v5 >= 0.0) {
        double v14 = v5;
      }
      if (v13 < v14) {
        double v13 = v14;
      }
      if (v13 <= 1.0) {
        double v15 = 1.0e-10;
      }
      else {
        double v15 = v13 * 1.0e-10;
      }
      BOOL v11 = v12 <= v15;
      double result = 0.0;
      if (!v11) {
        double result = 1.0;
      }
      break;
    case 20:
      double result = 0.0;
      if (a2 >= a3) {
        double result = 1.0;
      }
      break;
    case 21:
      double result = 0.0;
      if (a2 > a3) {
        double result = 1.0;
      }
      break;
    case 22:
      double result = 0.0;
      if (a3 != 0.0 && a2 != 0.0) {
        double result = 1.0;
      }
      break;
    case 23:
      double result = 0.0;
      if (a3 == 0.0 || a2 == 0.0) {
        double result = 1.0;
      }
      break;
    case 24:
      double result = 0.0;
      if (a3 != 0.0 || a2 != 0.0) {
        double result = 1.0;
      }
      break;
    case 25:
      double result = 0.0;
      if (a3 == 0.0 && a2 == 0.0) {
        double result = 1.0;
      }
      break;
    case 26:
      double result = 0.0;
      if ((a2 == 0.0) != (a3 == 0.0)) {
        double result = 1.0;
      }
      break;
    case 27:
      double result = 1.0;
      if ((a2 != 0.0) != (a3 != 0.0)) {
        double result = 0.0;
      }
      break;
    case 32:
      double result = 1.0 / ldexp(1.0, (int)a3) * a2;
      break;
    case 33:
      double result = ldexp(1.0, (int)a3) * a2;
      break;
    case 51:
      double v20 = log(a2);
      double result = v20 / log(v5);
      break;
    case 55:
      int v21 = vcvtmd_s64_f64(a3);
      if (v21 >= 16) {
        int v21 = 16;
      }
      double v22 = dbl_20BC890[v21 & ~(v21 >> 31)];
      double v23 = ceil(v22 * a2 + -0.5);
      double v24 = floor(v22 * a2 + 0.5);
      if (a2 < 0.0) {
        double v24 = v23;
      }
      double result = v24 / v22;
      break;
    case 56:
      if (a3 >= 0.0)
      {
        if (a2 < 0.0 && ((unint64_t)a3 & 1) == 0)
        {
          double result = NAN;
        }
        else
        {
          a3 = 1.0 / (double)(unint64_t)a3;
          long double v6 = a2;
LABEL_9:
          double result = pow(v6, a3);
        }
      }
      else
      {
        double result = NAN;
      }
      break;
    case 74:
      double result = sqrt(a2 * a2 + a3 * a3);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_118A20(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3;
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5) != 18;
    *(void *)(a1 + 16) = v5;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
    uint64_t v5 = *(void *)(a1 + 16);
  }
  *(void *)a1 = off_2403E08;
  *(void *)(a1 + 48) = 0;
  if (v5 && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5) == 125) {
    *(void *)(a1 + 48) = *(void *)(a1 + 16);
  }
  return a1;
}

void sub_118BD0(_Unwind_Exception *a1)
{
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_118BE4(uint64_t a1)
{
  *(void *)a1 = off_2403DD0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      goto LABEL_16;
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v7 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return a1;
  }
LABEL_16:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  return a1;
}

void sub_118CC0(uint64_t a1)
{
  *(void *)a1 = off_2403DD0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a1 + 32) = 0;
  }

  operator delete();
}

double sub_118D98(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (!v2) {
    return NAN;
  }
  BOOL v3 = (double *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
  double result = (*(double (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  double *v3 = result;
  return result;
}

uint64_t sub_118E28(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3;
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5) != 18;
    *(void *)(a1 + 16) = v5;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
    uint64_t v5 = *(void *)(a1 + 16);
  }
  *(void *)a1 = off_2403E58;
  *(void *)(a1 + 48) = 0;
  if (v5 && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5) == 126) {
    *(void *)(a1 + 48) = *(void *)(a1 + 16);
  }
  return a1;
}

void sub_118FD8(_Unwind_Exception *a1)
{
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_118FEC(uint64_t a1)
{
  *(void *)a1 = off_2403DD0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      goto LABEL_16;
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v7 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return a1;
  }
LABEL_16:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  return a1;
}

void sub_1190C8(uint64_t a1)
{
  *(void *)a1 = off_2403DD0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a1 + 32) = 0;
  }

  operator delete();
}

double sub_1191A0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (!v2) {
    return NAN;
  }
  BOOL v3 = (double *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
  double result = (*(double (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  double *v3 = result;
  return result;
}

uint64_t sub_119230(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3;
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5) != 18;
    *(void *)(a1 + 16) = v5;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
    uint64_t v5 = *(void *)(a1 + 16);
  }
  *(void *)a1 = off_2403EA8;
  *(void *)(a1 + 48) = 0;
  if (v5 && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5) == 127) {
    *(void *)(a1 + 48) = *(void *)(a1 + 16);
  }
  return a1;
}

void sub_1193E0(_Unwind_Exception *a1)
{
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1193F4(uint64_t a1)
{
  *(void *)a1 = off_2403DD0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      goto LABEL_16;
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v7 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return a1;
  }
LABEL_16:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  return a1;
}

void sub_1194D0(uint64_t a1)
{
  *(void *)a1 = off_2403DD0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a1 + 32) = 0;
  }

  operator delete();
}

double sub_1195A8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (!v2) {
    return NAN;
  }
  BOOL v3 = (double *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
  double result = (*(double (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  double *v3 = result;
  return result;
}

void sub_119638(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_2403EF8;
  *(void *)(a1 + 48) = off_2403F58;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_WORD *)(a1 + 72) = 0;
  operator new();
}

void sub_119C78(_Unwind_Exception *a1)
{
  sub_E26D8((uint64_t *)(v1 + 80));
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_119CAC(uint64_t a1)
{
  *(void *)a1 = off_2403EF8;
  *(void *)(a1 + 48) = off_2403F58;
  uint64_t v2 = *(void *)(a1 + 80);
  if (v2)
  {
    if (*(void *)v2)
    {
      uint64_t v3 = *(void *)v2 - 1;
      *(void *)uint64_t v2 = v3;
      if (!v3)
      {
        if (*(void *)(v2 + 16))
        {
          if (*(unsigned char *)(v2 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 80) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_24;
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 16) = 0;
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9) {
    return a1;
  }
LABEL_24:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 32) = 0;
  return a1;
}

void sub_119E24(uint64_t a1)
{
  *(void *)a1 = off_2403EF8;
  *(void *)(a1 + 48) = off_2403F58;
  uint64_t v2 = *(void *)(a1 + 80);
  if (v2)
  {
    if (*(void *)v2)
    {
      uint64_t v3 = *(void *)v2 - 1;
      *(void *)uint64_t v2 = v3;
      if (!v3)
      {
        if (*(void *)(v2 + 16))
        {
          if (*(unsigned char *)(v2 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 80) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }

  operator delete();
}

uint64_t sub_119F98(uint64_t result)
{
  if (*(unsigned char *)(result + 72))
  {
    uint64_t v1 = result;
    (*(void (**)(void))(**(void **)(result + 32) + 16))(*(void *)(result + 32));
    uint64_t v2 = **(void **)(v1 + 56);
    if (*(unsigned char *)(v1 + 73))
    {
      uint64_t v3 = *(uint64_t (**)(void))(v2 + 16);
    }
    else
    {
      uint64_t v4 = *(char **)(*(void *)(*(uint64_t (**)(void))(v2 + 64))() + 16);
      BOOL v5 = *(uint64_t **)(*(void *)(*(uint64_t (**)(void))(**(void **)(v1 + 64) + 64))(*(void *)(v1 + 64))
                       + 16);
      int v6 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 56))(v1);
      if ((v6 & 0xF) != 0) {
        int v7 = -16;
      }
      else {
        int v7 = 0;
      }
      int64_t v8 = (unint64_t)(v7 + v6) << 32;
      if (v8 >= 1)
      {
        BOOL v9 = &v4[v8 >> 29];
        do
        {
          *(void *)uint64_t v4 = *v5;
          *((void *)v4 + 1) = v5[1];
          *((void *)v4 + 2) = v5[2];
          *((void *)v4 + 3) = v5[3];
          *((void *)v4 + 4) = v5[4];
          *((void *)v4 + 5) = v5[5];
          *((void *)v4 + 6) = v5[6];
          *((void *)v4 + 7) = v5[7];
          *((void *)v4 + 8) = v5[8];
          *((void *)v4 + 9) = v5[9];
          *((void *)v4 + 10) = v5[10];
          *((void *)v4 + 11) = v5[11];
          *((void *)v4 + 12) = v5[12];
          *((void *)v4 + 13) = v5[13];
          *((void *)v4 + 14) = v5[14];
          *((void *)v4 + 15) = v5[15];
          v4 += 128;
          v5 += 16;
        }
        while (v4 < v9);
      }
      switch(v6 & 0xF)
      {
        case 1:
          goto LABEL_28;
        case 2:
          goto LABEL_27;
        case 3:
          goto LABEL_26;
        case 4:
          goto LABEL_25;
        case 5:
          goto LABEL_24;
        case 6:
          goto LABEL_23;
        case 7:
          goto LABEL_22;
        case 8:
          goto LABEL_21;
        case 9:
          goto LABEL_20;
        case 0xA:
          goto LABEL_19;
        case 0xB:
          goto LABEL_18;
        case 0xC:
          goto LABEL_17;
        case 0xD:
          goto LABEL_16;
        case 0xE:
          goto LABEL_15;
        case 0xF:
          uint64_t v10 = *v5++;
          *(void *)uint64_t v4 = v10;
          v4 += 8;
LABEL_15:
          uint64_t v11 = *v5++;
          *(void *)uint64_t v4 = v11;
          v4 += 8;
LABEL_16:
          uint64_t v12 = *v5++;
          *(void *)uint64_t v4 = v12;
          v4 += 8;
LABEL_17:
          uint64_t v13 = *v5++;
          *(void *)uint64_t v4 = v13;
          v4 += 8;
LABEL_18:
          uint64_t v14 = *v5++;
          *(void *)uint64_t v4 = v14;
          v4 += 8;
LABEL_19:
          uint64_t v15 = *v5++;
          *(void *)uint64_t v4 = v15;
          v4 += 8;
LABEL_20:
          uint64_t v16 = *v5++;
          *(void *)uint64_t v4 = v16;
          v4 += 8;
LABEL_21:
          uint64_t v17 = *v5++;
          *(void *)uint64_t v4 = v17;
          v4 += 8;
LABEL_22:
          uint64_t v18 = *v5++;
          *(void *)uint64_t v4 = v18;
          v4 += 8;
LABEL_23:
          uint64_t v19 = *v5++;
          *(void *)uint64_t v4 = v19;
          v4 += 8;
LABEL_24:
          uint64_t v20 = *v5++;
          *(void *)uint64_t v4 = v20;
          v4 += 8;
LABEL_25:
          uint64_t v21 = *v5++;
          *(void *)uint64_t v4 = v21;
          v4 += 8;
LABEL_26:
          uint64_t v22 = *v5++;
          *(void *)uint64_t v4 = v22;
          v4 += 8;
LABEL_27:
          uint64_t v23 = *v5++;
          *(void *)uint64_t v4 = v23;
          v4 += 8;
LABEL_28:
          *(void *)uint64_t v4 = *v5;
          break;
        default:
          break;
      }
      uint64_t v3 = *(uint64_t (**)(void))(**(void **)(v1 + 56) + 16);
    }
    return v3();
  }
  return result;
}

uint64_t sub_11A2B0()
{
  return 130;
}

uint64_t sub_11A2B8(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_11A2C0(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_11A2C8(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_11A308(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_11A310(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_11A318(void *a1)
{
  *(a1 - 6) = off_2403EF8;
  *a1 = off_2403F58;
  uint64_t v2 = a1[4];
  if (v2)
  {
    if (*(void *)v2)
    {
      uint64_t v3 = *(void *)v2 - 1;
      *(void *)uint64_t v2 = v3;
      if (!v3)
      {
        if (*(void *)(v2 + 16))
        {
          if (*(unsigned char *)(v2 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    a1[4] = 0;
  }
  *(a1 - 6) = off_2403DD0;
  uint64_t v4 = *(a1 - 4);
  if (v4) {
    BOOL v5 = *((unsigned char *)a1 - 24) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    uint64_t result = *(a1 - 2);
    if (result) {
      BOOL v7 = *((unsigned char *)a1 - 8) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_24;
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(a1 - 4) = 0;
    uint64_t result = *(a1 - 2);
    if (result) {
      BOOL v8 = *((unsigned char *)a1 - 8) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8)
    {
LABEL_24:
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      *(a1 - 2) = 0;
    }
  }
  return result;
}

void sub_11A494(uint64_t a1)
{
}

uint64_t sub_11A49C(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 72))() + 8);
}

uint64_t sub_11A4DC(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_11A4E4(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_11A4EC(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_11A4F4(uint64_t a1)
{
  return a1 + 32;
}

void sub_11A4FC(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_2403FE0;
  *(void *)(a1 + 48) = off_2404040;
  *(void *)(a1 + 56) = 0;
  operator new();
}

void sub_11A810(_Unwind_Exception *a1)
{
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_11A824(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_11A840(uint64_t a1)
{
  *(void *)a1 = off_2403FE0;
  *(void *)(a1 + 48) = off_2404040;
  uint64_t v2 = *(void *)(a1 + 64);
  if (v2)
  {
    if (*(void *)v2)
    {
      uint64_t v3 = *(void *)v2 - 1;
      *(void *)uint64_t v2 = v3;
      if (!v3)
      {
        if (*(void *)(v2 + 16))
        {
          if (*(unsigned char *)(v2 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 64) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_24;
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 16) = 0;
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9) {
    return a1;
  }
LABEL_24:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 32) = 0;
  return a1;
}

void sub_11A9B8(uint64_t a1)
{
  *(void *)a1 = off_2403FE0;
  *(void *)(a1 + 48) = off_2404040;
  uint64_t v2 = *(void *)(a1 + 64);
  if (v2)
  {
    if (*(void *)v2)
    {
      uint64_t v3 = *(void *)v2 - 1;
      *(void *)uint64_t v2 = v3;
      if (!v3)
      {
        if (*(void *)(v2 + 16))
        {
          if (*(unsigned char *)(v2 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 64) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }

  operator delete();
}

double sub_11AB2C(void **a1)
{
  if (!a1[7]) {
    return NAN;
  }
  double v2 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  uint64_t v3 = *(double **)(*(void *)((uint64_t (*)(void **))(*a1)[9])(a1) + 16);
  int v4 = ((uint64_t (*)(void **))(*a1)[7])(a1);
  if ((v4 & 0xF) != 0) {
    int v5 = -16;
  }
  else {
    int v5 = 0;
  }
  int64_t v6 = (unint64_t)(v5 + v4) << 32;
  if (v6 >= 1)
  {
    BOOL v7 = (double *)((char *)v3 + (v6 >> 29));
    do
    {
      double *v3 = v2;
      v3[1] = v2;
      v3[2] = v2;
      v3[3] = v2;
      v3[4] = v2;
      v3[5] = v2;
      v3[6] = v2;
      v3[7] = v2;
      v3[8] = v2;
      v3[9] = v2;
      v3[10] = v2;
      v3[11] = v2;
      v3[12] = v2;
      v3[13] = v2;
      v3[14] = v2;
      v3[15] = v2;
      v3 += 16;
    }
    while (v3 < v7);
  }
  switch(v4 & 0xF)
  {
    case 1:
      goto LABEL_23;
    case 2:
      goto LABEL_22;
    case 3:
      goto LABEL_21;
    case 4:
      goto LABEL_20;
    case 5:
      goto LABEL_19;
    case 6:
      goto LABEL_18;
    case 7:
      goto LABEL_17;
    case 8:
      goto LABEL_16;
    case 9:
      goto LABEL_15;
    case 0xA:
      goto LABEL_14;
    case 0xB:
      goto LABEL_13;
    case 0xC:
      goto LABEL_12;
    case 0xD:
      goto LABEL_11;
    case 0xE:
      goto LABEL_10;
    case 0xF:
      *v3++ = v2;
LABEL_10:
      *v3++ = v2;
LABEL_11:
      *v3++ = v2;
LABEL_12:
      *v3++ = v2;
LABEL_13:
      *v3++ = v2;
LABEL_14:
      *v3++ = v2;
LABEL_15:
      *v3++ = v2;
LABEL_16:
      *v3++ = v2;
LABEL_17:
      *v3++ = v2;
LABEL_18:
      *v3++ = v2;
LABEL_19:
      *v3++ = v2;
LABEL_20:
      *v3++ = v2;
LABEL_21:
      *v3++ = v2;
LABEL_22:
      *v3++ = v2;
LABEL_23:
      double *v3 = v2;
      break;
    default:
      break;
  }
  BOOL v8 = *(void (**)(void))(*a1[7] + 16);

  v8();
  return result;
}

uint64_t sub_11AD1C()
{
  return 129;
}

uint64_t sub_11AD24(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_11AD2C(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_11AD34(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_11AD74(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_11AD7C(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_11AD84(void *a1)
{
  *(a1 - 6) = off_2403FE0;
  *a1 = off_2404040;
  uint64_t v2 = a1[2];
  if (v2)
  {
    if (*(void *)v2)
    {
      uint64_t v3 = *(void *)v2 - 1;
      *(void *)uint64_t v2 = v3;
      if (!v3)
      {
        if (*(void *)(v2 + 16))
        {
          if (*(unsigned char *)(v2 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    a1[2] = 0;
  }
  *(a1 - 6) = off_2403DD0;
  uint64_t v4 = *(a1 - 4);
  if (v4) {
    BOOL v5 = *((unsigned char *)a1 - 24) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    uint64_t result = *(a1 - 2);
    if (result) {
      BOOL v7 = *((unsigned char *)a1 - 8) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_24;
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(a1 - 4) = 0;
    uint64_t result = *(a1 - 2);
    if (result) {
      BOOL v8 = *((unsigned char *)a1 - 8) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8)
    {
LABEL_24:
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      *(a1 - 2) = 0;
    }
  }
  return result;
}

void sub_11AF00(uint64_t a1)
{
}

uint64_t sub_11AF08(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 72))() + 8);
}

uint64_t sub_11AF48(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_11AF50(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_11AF58(uint64_t a1)
{
  return a1 + 16;
}

uint64_t sub_11AF60(uint64_t a1)
{
  return a1 + 16;
}

void sub_11AF68()
{
}

void sub_11AFC0()
{
}

void sub_11AFE8()
{
}

double sub_11AFFC(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8));
  uint64_t v3 = (uint64_t *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  uint64_t v4 = *v2;
  *uint64_t v2 = *v3;
  uint64_t *v3 = v4;
  return *(double *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
}

uint64_t sub_11B0AC()
{
  return 144;
}

uint64_t sub_11B0B4(uint64_t a1, void *lpsrc, const void *a3)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = 92;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (lpsrc)
  {
    BOOL v6 = (*(unsigned int (**)(void *))(*(void *)lpsrc + 32))(lpsrc) != 17
      && (*(unsigned int (**)(void *))(*(void *)lpsrc + 32))(lpsrc) != 18;
    *(void *)(a1 + 16) = lpsrc;
    *(unsigned char *)(a1 + 24) = v6;
  }
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(const void *))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(const void *))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 32) = a3;
    *(unsigned char *)(a1 + 40) = v7;
  }
  *(void *)a1 = off_2404118;
  if (lpsrc)
  {
    if (a3)
    {
LABEL_13:
      return a1;
    }
  }
  else
  {
    *(void *)(a1 + 48) = 0;
    if (a3) {
      goto LABEL_13;
    }
  }
  *(void *)(a1 + 56) = 0;
  return a1;
}

uint64_t sub_11B2E0(uint64_t a1)
{
  *(void *)a1 = off_2403DD0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      goto LABEL_16;
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v7 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return a1;
  }
LABEL_16:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  return a1;
}

void sub_11B3BC(uint64_t a1)
{
  *(void *)a1 = off_2403DD0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a1 + 32) = 0;
  }

  operator delete();
}

double sub_11B494(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(*(uint64_t (**)(void))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48));
  BOOL v3 = (uint64_t *)(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56));
  uint64_t v4 = *v2;
  *uint64_t v2 = *v3;
  uint64_t *v3 = v4;
  return *(double *)(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56));
}

uint64_t sub_11B544()
{
  return 144;
}

void sub_11B54C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = 92;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a2)
  {
    BOOL v6 = (*(unsigned int (**)(uint64_t))(*(void *)a2 + 32))(a2) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a2 + 32))(a2) != 18;
    *(void *)(a1 + 16) = a2;
    *(unsigned char *)(a1 + 24) = v6;
  }
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 32) = a3;
    *(unsigned char *)(a1 + 40) = v7;
  }
  *(void *)a1 = off_2404168;
  *(void *)(a1 + 48) = off_24041C8;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 80) = 0;
  operator new();
}

void sub_11BA34(_Unwind_Exception *a1)
{
  sub_E26D8((uint64_t *)(v1 + 88));
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_11BA74(uint64_t a1)
{
  *(void *)a1 = off_2404168;
  *(void *)(a1 + 48) = off_24041C8;
  uint64_t v2 = *(void *)(a1 + 88);
  if (v2)
  {
    if (*(void *)v2)
    {
      uint64_t v3 = *(void *)v2 - 1;
      *(void *)uint64_t v2 = v3;
      if (!v3)
      {
        if (*(void *)(v2 + 16))
        {
          if (*(unsigned char *)(v2 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 88) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_24;
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 16) = 0;
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9) {
    return a1;
  }
LABEL_24:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 32) = 0;
  return a1;
}

void sub_11BBEC(uint64_t a1)
{
  *(void *)a1 = off_2404168;
  *(void *)(a1 + 48) = off_24041C8;
  uint64_t v2 = *(void *)(a1 + 88);
  if (v2)
  {
    if (*(void *)v2)
    {
      uint64_t v3 = *(void *)v2 - 1;
      *(void *)uint64_t v2 = v3;
      if (!v3)
      {
        if (*(void *)(v2 + 16))
        {
          if (*(unsigned char *)(v2 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 88) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }

  operator delete();
}

uint64_t sub_11BD60(uint64_t result)
{
  if (!*(unsigned char *)(result + 80)) {
    return result;
  }
  uint64_t v1 = result;
  (*(void (**)(void))(**(void **)(result + 16) + 16))(*(void *)(result + 16));
  (*(void (**)(void))(**(void **)(v1 + 32) + 16))(*(void *)(v1 + 32));
  unint64_t v2 = *(void *)(*(void *)(*(uint64_t (**)(void))(**(void **)(v1 + 56) + 64))(*(void *)(v1 + 56))
                 + 16);
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(v1 + 64) + 64))(*(void *)(v1 + 64));
  unint64_t v4 = *(void *)(v1 + 72);
  if (v4)
  {
    unint64_t v5 = *(void *)(*(void *)v3 + 16);
    if (v4 < 4 || (v2 < v5 + 8 * v4 ? (BOOL v6 = v5 >= v2 + 8 * v4) : (BOOL v6 = 1), !v6))
    {
      unint64_t v7 = 0;
LABEL_15:
      unint64_t v14 = v4 - v7;
      uint64_t v15 = 8 * v7;
      uint64_t v16 = (uint64_t *)(v5 + v15);
      uint64_t v17 = (uint64_t *)(v2 + v15);
      do
      {
        uint64_t v18 = *v17;
        *v17++ = *v16;
        *v16++ = v18;
        --v14;
      }
      while (v14);
      goto LABEL_17;
    }
    unint64_t v7 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    BOOL v8 = (long long *)(v2 + 16);
    BOOL v9 = (long long *)(v5 + 16);
    unint64_t v10 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      long long v11 = *(v8 - 1);
      long long v12 = *v8;
      long long v13 = *v9;
      *(v8 - 1) = *(v9 - 1);
      *BOOL v8 = v13;
      *(v9 - 1) = v11;
      *BOOL v9 = v12;
      v8 += 2;
      v9 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v4 != v7) {
      goto LABEL_15;
    }
  }
LABEL_17:
  uint64_t v19 = *(uint64_t (**)(void))(**(void **)(v1 + 64) + 16);

  return v19();
}

uint64_t sub_11BF10()
{
  return 134;
}

uint64_t sub_11BF18(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_11BF20(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_11BF28(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_11BF30(uint64_t a1)
{
  return a1 + 88;
}

uint64_t sub_11BF38(uint64_t a1)
{
  return a1 + 88;
}

uint64_t sub_11BF40(void *a1)
{
  *(a1 - 6) = off_2404168;
  *a1 = off_24041C8;
  uint64_t v2 = a1[5];
  if (v2)
  {
    if (*(void *)v2)
    {
      uint64_t v3 = *(void *)v2 - 1;
      *(void *)uint64_t v2 = v3;
      if (!v3)
      {
        if (*(void *)(v2 + 16))
        {
          if (*(unsigned char *)(v2 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    a1[5] = 0;
  }
  *(a1 - 6) = off_2403DD0;
  uint64_t v4 = *(a1 - 4);
  if (v4) {
    BOOL v5 = *((unsigned char *)a1 - 24) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    uint64_t result = *(a1 - 2);
    if (result) {
      BOOL v7 = *((unsigned char *)a1 - 8) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_24;
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(a1 - 4) = 0;
    uint64_t result = *(a1 - 2);
    if (result) {
      BOOL v8 = *((unsigned char *)a1 - 8) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8)
    {
LABEL_24:
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      *(a1 - 2) = 0;
    }
  }
  return result;
}

void sub_11C0BC(uint64_t a1)
{
}

uint64_t sub_11C0C4(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_11C0CC(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_11C0D4(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_11C0DC(uint64_t a1)
{
  return a1 + 40;
}

uint64_t sub_11C0E4(uint64_t a1)
{
  return a1 + 40;
}

uint64_t sub_11C0EC(uint64_t a1, _DWORD *a2)
{
  if (!*(void *)(a1 + 128)) {
    return 1;
  }
  uint64_t v3 = a1 + 112;
  switch(*a2)
  {
    case 'Q':
      char v8 = 2;
      __int16 v4 = 15674;
      goto LABEL_12;
    case 'R':
      char v8 = 2;
      __int16 v4 = 15659;
      goto LABEL_12;
    case 'S':
      char v8 = 2;
      __int16 v4 = 15661;
      goto LABEL_12;
    case 'T':
      char v8 = 2;
      __int16 v4 = 15658;
      goto LABEL_12;
    case 'U':
      char v8 = 2;
      __int16 v4 = 15663;
      goto LABEL_12;
    case 'V':
      char v8 = 2;
      __int16 v4 = 15653;
LABEL_12:
      LOWORD(__p) = v4;
      BYTE2(__p) = 0;
      break;
    default:
      char v8 = 0;
      LOBYTE(__p) = 0;
      break;
  }
  BOOL v5 = a1 + 120 == (void)sub_ADE40(v3, (uint64_t)&__p);
  if ((v8 & 0x80000000) == 0) {
    return v5;
  }
  operator delete(__p);
  return v5;
}

void sub_11C200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_11C234()
{
}

void sub_11C294()
{
}

void sub_11C2B8()
{
}

void sub_11C318()
{
}

void sub_11C33C()
{
}

void sub_11C39C()
{
}

void sub_11C3C0()
{
}

void sub_11C420()
{
}

void sub_11C444()
{
}

void sub_11C4A4()
{
}

void sub_11C4C8()
{
}

void sub_11C528()
{
}

void sub_11C54C()
{
}

void sub_11C5AC()
{
}

void sub_11C5D0()
{
}

void sub_11C630()
{
}

void sub_11C654()
{
}

void sub_11C6B4()
{
}

void sub_11C6D8()
{
}

void sub_11C738()
{
}

void sub_11C75C()
{
}

void sub_11C7BC()
{
}

void sub_11C7E0()
{
}

void sub_11C840()
{
}

void sub_11C864()
{
}

void sub_11C8C4()
{
}

void sub_11C8E8()
{
}

void sub_11C948()
{
}

void sub_11C96C()
{
}

void sub_11C9CC()
{
}

uint64_t sub_11C9F0(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3;
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5) != 18;
    *(void *)(a1 + 16) = v5;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
    uint64_t v5 = *(void *)(a1 + 16);
  }
  *(void *)a1 = off_2404250;
  *(void *)(a1 + 48) = 0;
  if (v5 && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5) == 17) {
    *(void *)(a1 + 48) = *(void *)(a1 + 16);
  }
  return a1;
}

void sub_11CBA0(_Unwind_Exception *a1)
{
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_11CBB4(uint64_t a1)
{
  *(void *)a1 = off_2403DD0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      goto LABEL_16;
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v7 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return a1;
  }
LABEL_16:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  return a1;
}

void sub_11CC90(uint64_t a1)
{
  *(void *)a1 = off_2403DD0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a1 + 32) = 0;
  }

  operator delete();
}

double sub_11CD68(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (!v2) {
    return NAN;
  }
  BOOL v3 = (double *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
  double result = (*(double (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32)) + *v3;
  double *v3 = result;
  return result;
}

double sub_11CE00(double *a1, double *a2)
{
  return *a1 + *a2;
}

uint64_t sub_11CE10(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3;
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5) != 18;
    *(void *)(a1 + 16) = v5;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
    uint64_t v5 = *(void *)(a1 + 16);
  }
  *(void *)a1 = off_24042A0;
  *(void *)(a1 + 48) = 0;
  if (v5 && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5) == 17) {
    *(void *)(a1 + 48) = *(void *)(a1 + 16);
  }
  return a1;
}

void sub_11CFC0(_Unwind_Exception *a1)
{
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_11CFD4(uint64_t a1)
{
  *(void *)a1 = off_2403DD0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      goto LABEL_16;
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v7 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return a1;
  }
LABEL_16:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  return a1;
}

void sub_11D0B0(uint64_t a1)
{
  *(void *)a1 = off_2403DD0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a1 + 32) = 0;
  }

  operator delete();
}

double sub_11D188(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (!v2) {
    return NAN;
  }
  BOOL v3 = (double *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
  double result = *v3 - (*(double (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  double *v3 = result;
  return result;
}

double sub_11D220(double *a1, double *a2)
{
  return *a1 - *a2;
}

uint64_t sub_11D230(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3;
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5) != 18;
    *(void *)(a1 + 16) = v5;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
    uint64_t v5 = *(void *)(a1 + 16);
  }
  *(void *)a1 = off_24042F0;
  *(void *)(a1 + 48) = 0;
  if (v5 && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5) == 17) {
    *(void *)(a1 + 48) = *(void *)(a1 + 16);
  }
  return a1;
}

void sub_11D3E0(_Unwind_Exception *a1)
{
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_11D3F4(uint64_t a1)
{
  *(void *)a1 = off_2403DD0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      goto LABEL_16;
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v7 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return a1;
  }
LABEL_16:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  return a1;
}

void sub_11D4D0(uint64_t a1)
{
  *(void *)a1 = off_2403DD0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a1 + 32) = 0;
  }

  operator delete();
}

double sub_11D5A8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (!v2) {
    return NAN;
  }
  BOOL v3 = (double *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
  double result = (*(double (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32)) * *v3;
  double *v3 = result;
  return result;
}

double sub_11D640(double *a1, double *a2)
{
  return *a1 * *a2;
}

uint64_t sub_11D650(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3;
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5) != 18;
    *(void *)(a1 + 16) = v5;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
    uint64_t v5 = *(void *)(a1 + 16);
  }
  *(void *)a1 = off_2404340;
  *(void *)(a1 + 48) = 0;
  if (v5 && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5) == 17) {
    *(void *)(a1 + 48) = *(void *)(a1 + 16);
  }
  return a1;
}

void sub_11D800(_Unwind_Exception *a1)
{
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_11D814(uint64_t a1)
{
  *(void *)a1 = off_2403DD0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      goto LABEL_16;
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v7 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return a1;
  }
LABEL_16:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  return a1;
}

void sub_11D8F0(uint64_t a1)
{
  *(void *)a1 = off_2403DD0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a1 + 32) = 0;
  }

  operator delete();
}

double sub_11D9C8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (!v2) {
    return NAN;
  }
  BOOL v3 = (double *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
  double result = *v3 / (*(double (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  double *v3 = result;
  return result;
}

double sub_11DA60(double *a1, double *a2)
{
  return *a1 / *a2;
}

uint64_t sub_11DA70(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3;
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5) != 18;
    *(void *)(a1 + 16) = v5;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
    uint64_t v5 = *(void *)(a1 + 16);
  }
  *(void *)a1 = off_2404390;
  *(void *)(a1 + 48) = 0;
  if (v5 && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5) == 17) {
    *(void *)(a1 + 48) = *(void *)(a1 + 16);
  }
  return a1;
}

void sub_11DC20(_Unwind_Exception *a1)
{
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_11DC34(uint64_t a1)
{
  *(void *)a1 = off_2403DD0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      goto LABEL_16;
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v7 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return a1;
  }
LABEL_16:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  return a1;
}

void sub_11DD10(uint64_t a1)
{
  *(void *)a1 = off_2403DD0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a1 + 32) = 0;
  }

  operator delete();
}

double sub_11DDE8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (!v2) {
    return NAN;
  }
  BOOL v3 = (long double *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
  long double v4 = (*(double (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  double result = fmod(*v3, v4);
  long double *v3 = result;
  return result;
}

double sub_11DE84(long double *a1, long double *a2)
{
  return fmod(*a1, *a2);
}

uint64_t sub_11DE90(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3;
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5) != 18;
    *(void *)(a1 + 16) = v5;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
    uint64_t v5 = *(void *)(a1 + 16);
  }
  *(void *)a1 = off_24043E0;
  *(void *)(a1 + 48) = 0;
  if (v5 && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5) == 125) {
    *(void *)(a1 + 48) = *(void *)(a1 + 16);
  }
  return a1;
}

void sub_11E040(_Unwind_Exception *a1)
{
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_11E054(uint64_t a1)
{
  *(void *)a1 = off_2403DD0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      goto LABEL_16;
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v7 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return a1;
  }
LABEL_16:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  return a1;
}

void sub_11E130(uint64_t a1)
{
  *(void *)a1 = off_2403DD0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a1 + 32) = 0;
  }

  operator delete();
}

double sub_11E208(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (!v2) {
    return NAN;
  }
  BOOL v3 = (double *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
  double result = (*(double (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32)) + *v3;
  double *v3 = result;
  return result;
}

uint64_t sub_11E2A0(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3;
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5) != 18;
    *(void *)(a1 + 16) = v5;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
    uint64_t v5 = *(void *)(a1 + 16);
  }
  *(void *)a1 = off_2404430;
  *(void *)(a1 + 48) = 0;
  if (v5 && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5) == 125) {
    *(void *)(a1 + 48) = *(void *)(a1 + 16);
  }
  return a1;
}

void sub_11E450(_Unwind_Exception *a1)
{
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_11E464(uint64_t a1)
{
  *(void *)a1 = off_2403DD0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      goto LABEL_16;
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v7 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return a1;
  }
LABEL_16:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  return a1;
}

void sub_11E540(uint64_t a1)
{
  *(void *)a1 = off_2403DD0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a1 + 32) = 0;
  }

  operator delete();
}

double sub_11E618(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (!v2) {
    return NAN;
  }
  BOOL v3 = (double *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
  double result = *v3 - (*(double (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  double *v3 = result;
  return result;
}

uint64_t sub_11E6B0(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3;
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5) != 18;
    *(void *)(a1 + 16) = v5;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
    uint64_t v5 = *(void *)(a1 + 16);
  }
  *(void *)a1 = off_2404480;
  *(void *)(a1 + 48) = 0;
  if (v5 && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5) == 125) {
    *(void *)(a1 + 48) = *(void *)(a1 + 16);
  }
  return a1;
}

void sub_11E860(_Unwind_Exception *a1)
{
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_11E874(uint64_t a1)
{
  *(void *)a1 = off_2403DD0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      goto LABEL_16;
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v7 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return a1;
  }
LABEL_16:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  return a1;
}

void sub_11E950(uint64_t a1)
{
  *(void *)a1 = off_2403DD0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a1 + 32) = 0;
  }

  operator delete();
}

double sub_11EA28(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (!v2) {
    return NAN;
  }
  BOOL v3 = (double *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
  double result = (*(double (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32)) * *v3;
  double *v3 = result;
  return result;
}

uint64_t sub_11EAC0(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3;
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5) != 18;
    *(void *)(a1 + 16) = v5;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
    uint64_t v5 = *(void *)(a1 + 16);
  }
  *(void *)a1 = off_24044D0;
  *(void *)(a1 + 48) = 0;
  if (v5 && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5) == 125) {
    *(void *)(a1 + 48) = *(void *)(a1 + 16);
  }
  return a1;
}

void sub_11EC70(_Unwind_Exception *a1)
{
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_11EC84(uint64_t a1)
{
  *(void *)a1 = off_2403DD0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      goto LABEL_16;
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v7 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return a1;
  }
LABEL_16:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  return a1;
}

void sub_11ED60(uint64_t a1)
{
  *(void *)a1 = off_2403DD0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a1 + 32) = 0;
  }

  operator delete();
}

double sub_11EE38(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (!v2) {
    return NAN;
  }
  BOOL v3 = (double *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
  double result = *v3 / (*(double (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  double *v3 = result;
  return result;
}

uint64_t sub_11EED0(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3;
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5) != 18;
    *(void *)(a1 + 16) = v5;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
    uint64_t v5 = *(void *)(a1 + 16);
  }
  *(void *)a1 = off_2404520;
  *(void *)(a1 + 48) = 0;
  if (v5 && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5) == 125) {
    *(void *)(a1 + 48) = *(void *)(a1 + 16);
  }
  return a1;
}

void sub_11F080(_Unwind_Exception *a1)
{
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_11F094(uint64_t a1)
{
  *(void *)a1 = off_2403DD0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      goto LABEL_16;
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v7 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return a1;
  }
LABEL_16:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  return a1;
}

void sub_11F170(uint64_t a1)
{
  *(void *)a1 = off_2403DD0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a1 + 32) = 0;
  }

  operator delete();
}

double sub_11F248(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (!v2) {
    return NAN;
  }
  BOOL v3 = (long double *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
  long double v4 = (*(double (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  double result = fmod(*v3, v4);
  long double *v3 = result;
  return result;
}

uint64_t sub_11F2E4(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3;
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5) != 18;
    *(void *)(a1 + 16) = v5;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
    uint64_t v5 = *(void *)(a1 + 16);
  }
  *(void *)a1 = off_2404570;
  *(void *)(a1 + 48) = 0;
  if (v5 && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5) == 126) {
    *(void *)(a1 + 48) = *(void *)(a1 + 16);
  }
  return a1;
}

void sub_11F494(_Unwind_Exception *a1)
{
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_11F4A8(uint64_t a1)
{
  *(void *)a1 = off_2403DD0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      goto LABEL_16;
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v7 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return a1;
  }
LABEL_16:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  return a1;
}

void sub_11F584(uint64_t a1)
{
  *(void *)a1 = off_2403DD0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a1 + 32) = 0;
  }

  operator delete();
}

double sub_11F65C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (!v2) {
    return NAN;
  }
  BOOL v3 = (double *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
  double result = (*(double (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32)) + *v3;
  double *v3 = result;
  return result;
}

uint64_t sub_11F6F4(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3;
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5) != 18;
    *(void *)(a1 + 16) = v5;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
    uint64_t v5 = *(void *)(a1 + 16);
  }
  *(void *)a1 = off_24045C0;
  *(void *)(a1 + 48) = 0;
  if (v5 && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5) == 126) {
    *(void *)(a1 + 48) = *(void *)(a1 + 16);
  }
  return a1;
}

void sub_11F8A4(_Unwind_Exception *a1)
{
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_11F8B8(uint64_t a1)
{
  *(void *)a1 = off_2403DD0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      goto LABEL_16;
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v7 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return a1;
  }
LABEL_16:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  return a1;
}

void sub_11F994(uint64_t a1)
{
  *(void *)a1 = off_2403DD0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a1 + 32) = 0;
  }

  operator delete();
}

double sub_11FA6C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (!v2) {
    return NAN;
  }
  BOOL v3 = (double *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
  double result = *v3 - (*(double (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  double *v3 = result;
  return result;
}

uint64_t sub_11FB04(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3;
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5) != 18;
    *(void *)(a1 + 16) = v5;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
    uint64_t v5 = *(void *)(a1 + 16);
  }
  *(void *)a1 = off_2404610;
  *(void *)(a1 + 48) = 0;
  if (v5 && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5) == 126) {
    *(void *)(a1 + 48) = *(void *)(a1 + 16);
  }
  return a1;
}

void sub_11FCB4(_Unwind_Exception *a1)
{
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_11FCC8(uint64_t a1)
{
  *(void *)a1 = off_2403DD0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      goto LABEL_16;
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v7 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return a1;
  }
LABEL_16:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  return a1;
}

void sub_11FDA4(uint64_t a1)
{
  *(void *)a1 = off_2403DD0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a1 + 32) = 0;
  }

  operator delete();
}

double sub_11FE7C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (!v2) {
    return NAN;
  }
  BOOL v3 = (double *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
  double result = (*(double (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32)) * *v3;
  double *v3 = result;
  return result;
}

uint64_t sub_11FF14(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3;
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5) != 18;
    *(void *)(a1 + 16) = v5;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
    uint64_t v5 = *(void *)(a1 + 16);
  }
  *(void *)a1 = off_2404660;
  *(void *)(a1 + 48) = 0;
  if (v5 && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5) == 126) {
    *(void *)(a1 + 48) = *(void *)(a1 + 16);
  }
  return a1;
}

void sub_1200C4(_Unwind_Exception *a1)
{
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1200D8(uint64_t a1)
{
  *(void *)a1 = off_2403DD0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      goto LABEL_16;
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v7 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return a1;
  }
LABEL_16:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  return a1;
}

void sub_1201B4(uint64_t a1)
{
  *(void *)a1 = off_2403DD0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a1 + 32) = 0;
  }

  operator delete();
}

double sub_12028C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (!v2) {
    return NAN;
  }
  BOOL v3 = (double *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
  double result = *v3 / (*(double (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  double *v3 = result;
  return result;
}

uint64_t sub_120324(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3;
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5) != 18;
    *(void *)(a1 + 16) = v5;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
    uint64_t v5 = *(void *)(a1 + 16);
  }
  *(void *)a1 = off_24046B0;
  *(void *)(a1 + 48) = 0;
  if (v5 && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5) == 126) {
    *(void *)(a1 + 48) = *(void *)(a1 + 16);
  }
  return a1;
}

void sub_1204D4(_Unwind_Exception *a1)
{
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1204E8(uint64_t a1)
{
  *(void *)a1 = off_2403DD0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      goto LABEL_16;
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v7 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return a1;
  }
LABEL_16:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  return a1;
}

void sub_1205C4(uint64_t a1)
{
  *(void *)a1 = off_2403DD0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a1 + 32) = 0;
  }

  operator delete();
}

double sub_12069C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (!v2) {
    return NAN;
  }
  BOOL v3 = (long double *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
  long double v4 = (*(double (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  double result = fmod(*v3, v4);
  long double *v3 = result;
  return result;
}

uint64_t sub_120738(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3;
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5) != 18;
    *(void *)(a1 + 16) = v5;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
    uint64_t v5 = *(void *)(a1 + 16);
  }
  *(void *)a1 = off_2404700;
  *(void *)(a1 + 48) = 0;
  if (v5 && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5) == 127) {
    *(void *)(a1 + 48) = *(void *)(a1 + 16);
  }
  return a1;
}

void sub_1208E8(_Unwind_Exception *a1)
{
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1208FC(uint64_t a1)
{
  *(void *)a1 = off_2403DD0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      goto LABEL_16;
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v7 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return a1;
  }
LABEL_16:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  return a1;
}

void sub_1209D8(uint64_t a1)
{
  *(void *)a1 = off_2403DD0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a1 + 32) = 0;
  }

  operator delete();
}

double sub_120AB0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (!v2) {
    return NAN;
  }
  BOOL v3 = (double *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
  double result = (*(double (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32)) + *v3;
  double *v3 = result;
  return result;
}

uint64_t sub_120B48(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3;
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5) != 18;
    *(void *)(a1 + 16) = v5;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
    uint64_t v5 = *(void *)(a1 + 16);
  }
  *(void *)a1 = off_2404750;
  *(void *)(a1 + 48) = 0;
  if (v5 && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5) == 127) {
    *(void *)(a1 + 48) = *(void *)(a1 + 16);
  }
  return a1;
}

void sub_120CF8(_Unwind_Exception *a1)
{
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_120D0C(uint64_t a1)
{
  *(void *)a1 = off_2403DD0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      goto LABEL_16;
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v7 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return a1;
  }
LABEL_16:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  return a1;
}

void sub_120DE8(uint64_t a1)
{
  *(void *)a1 = off_2403DD0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a1 + 32) = 0;
  }

  operator delete();
}

double sub_120EC0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (!v2) {
    return NAN;
  }
  BOOL v3 = (double *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
  double result = *v3 - (*(double (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  double *v3 = result;
  return result;
}

uint64_t sub_120F58(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3;
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5) != 18;
    *(void *)(a1 + 16) = v5;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
    uint64_t v5 = *(void *)(a1 + 16);
  }
  *(void *)a1 = off_24047A0;
  *(void *)(a1 + 48) = 0;
  if (v5 && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5) == 127) {
    *(void *)(a1 + 48) = *(void *)(a1 + 16);
  }
  return a1;
}

void sub_121108(_Unwind_Exception *a1)
{
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_12111C(uint64_t a1)
{
  *(void *)a1 = off_2403DD0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      goto LABEL_16;
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v7 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return a1;
  }
LABEL_16:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  return a1;
}

void sub_1211F8(uint64_t a1)
{
  *(void *)a1 = off_2403DD0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a1 + 32) = 0;
  }

  operator delete();
}

double sub_1212D0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (!v2) {
    return NAN;
  }
  BOOL v3 = (double *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
  double result = (*(double (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32)) * *v3;
  double *v3 = result;
  return result;
}

uint64_t sub_121368(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3;
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5) != 18;
    *(void *)(a1 + 16) = v5;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
    uint64_t v5 = *(void *)(a1 + 16);
  }
  *(void *)a1 = off_24047F0;
  *(void *)(a1 + 48) = 0;
  if (v5 && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5) == 127) {
    *(void *)(a1 + 48) = *(void *)(a1 + 16);
  }
  return a1;
}

void sub_121518(_Unwind_Exception *a1)
{
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_12152C(uint64_t a1)
{
  *(void *)a1 = off_2403DD0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      goto LABEL_16;
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v7 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return a1;
  }
LABEL_16:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  return a1;
}

void sub_121608(uint64_t a1)
{
  *(void *)a1 = off_2403DD0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a1 + 32) = 0;
  }

  operator delete();
}

double sub_1216E0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (!v2) {
    return NAN;
  }
  BOOL v3 = (double *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
  double result = *v3 / (*(double (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  double *v3 = result;
  return result;
}

uint64_t sub_121778(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3;
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5) != 18;
    *(void *)(a1 + 16) = v5;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
    uint64_t v5 = *(void *)(a1 + 16);
  }
  *(void *)a1 = off_2404840;
  *(void *)(a1 + 48) = 0;
  if (v5 && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5) == 127) {
    *(void *)(a1 + 48) = *(void *)(a1 + 16);
  }
  return a1;
}

void sub_121928(_Unwind_Exception *a1)
{
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_12193C(uint64_t a1)
{
  *(void *)a1 = off_2403DD0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      goto LABEL_16;
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v7 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return a1;
  }
LABEL_16:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  return a1;
}

void sub_121A18(uint64_t a1)
{
  *(void *)a1 = off_2403DD0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a1 + 32) = 0;
  }

  operator delete();
}

double sub_121AF0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (!v2) {
    return NAN;
  }
  BOOL v3 = (long double *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
  long double v4 = (*(double (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  double result = fmod(*v3, v4);
  long double *v3 = result;
  return result;
}

void sub_121B8C(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_2404890;
  *(void *)(a1 + 48) = off_24048F8;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  operator new();
}

void sub_1221AC(_Unwind_Exception *a1)
{
  sub_E26D8((uint64_t *)(v1 + 80));
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1221E0(uint64_t a1)
{
  *(void *)a1 = off_2404890;
  *(void *)(a1 + 48) = off_24048F8;
  uint64_t v2 = *(void *)(a1 + 80);
  if (v2)
  {
    if (*(void *)v2)
    {
      uint64_t v3 = *(void *)v2 - 1;
      *(void *)uint64_t v2 = v3;
      if (!v3)
      {
        if (*(void *)(v2 + 16))
        {
          if (*(unsigned char *)(v2 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 80) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_24;
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 16) = 0;
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9) {
    return a1;
  }
LABEL_24:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 32) = 0;
  return a1;
}

void sub_122358(uint64_t a1)
{
  *(void *)a1 = off_2404890;
  *(void *)(a1 + 48) = off_24048F8;
  uint64_t v2 = *(void *)(a1 + 80);
  if (v2)
  {
    if (*(void *)v2)
    {
      uint64_t v3 = *(void *)v2 - 1;
      *(void *)uint64_t v2 = v3;
      if (!v3)
      {
        if (*(void *)(v2 + 16))
        {
          if (*(unsigned char *)(v2 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 80) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }

  operator delete();
}

double sub_1224CC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 72)) {
    return NAN;
  }
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  uint64_t v2 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
                  + 16);
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 64) + 64))(*(void *)(a1 + 64))
                  + 16);
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v4 & 0xF) != 0) {
    int v5 = -16;
  }
  else {
    int v5 = 0;
  }
  int64_t v6 = (unint64_t)(v5 + v4) << 32;
  if (v6 >= 1)
  {
    BOOL v7 = (double *)((char *)v2 + (v6 >> 29));
    do
    {
      double v8 = v2[1];
      *uint64_t v2 = *v2 + *v3;
      v2[1] = v8 + v3[1];
      double v9 = v2[3];
      v2[2] = v2[2] + v3[2];
      v2[3] = v9 + v3[3];
      double v10 = v2[5];
      v2[4] = v2[4] + v3[4];
      v2[5] = v10 + v3[5];
      double v11 = v2[7];
      v2[6] = v2[6] + v3[6];
      v2[7] = v11 + v3[7];
      double v12 = v2[9];
      v2[8] = v2[8] + v3[8];
      v2[9] = v12 + v3[9];
      double v13 = v2[11];
      v2[10] = v2[10] + v3[10];
      v2[11] = v13 + v3[11];
      double v14 = v2[13];
      v2[12] = v2[12] + v3[12];
      v2[13] = v14 + v3[13];
      double v15 = v2[15];
      v2[14] = v2[14] + v3[14];
      v2[15] = v15 + v3[15];
      v2 += 16;
      v3 += 16;
    }
    while (v2 < v7);
  }
  int v16 = (v4 & 0xF) - 1;
  unsigned int v17 = 0;
  unsigned int v18 = 0;
  unsigned int v19 = 0;
  unsigned int v20 = 0;
  unsigned int v21 = 0;
  unsigned int v22 = 0;
  unsigned int v23 = 0;
  unsigned int v24 = 0;
  unsigned int v25 = 0;
  unsigned int v26 = 0;
  int v27 = 0;
  int v28 = 0;
  int v29 = 0;
  uint64_t v30 = 0;
  switch(v16)
  {
    case 0:
      goto LABEL_23;
    case 1:
      goto LABEL_22;
    case 2:
      goto LABEL_21;
    case 3:
      goto LABEL_20;
    case 4:
      goto LABEL_19;
    case 5:
      goto LABEL_18;
    case 6:
      goto LABEL_17;
    case 7:
      goto LABEL_16;
    case 8:
      goto LABEL_15;
    case 9:
      goto LABEL_14;
    case 10:
      goto LABEL_13;
    case 11:
      goto LABEL_12;
    case 12:
      goto LABEL_11;
    case 13:
      goto LABEL_10;
    case 14:
      *uint64_t v2 = *v2 + *v3;
      unsigned int v17 = 1;
LABEL_10:
      v2[v17] = v2[v17] + v3[v17];
      unsigned int v18 = v17 + 1;
LABEL_11:
      v2[v18] = v2[v18] + v3[v18];
      unsigned int v19 = v18 + 1;
LABEL_12:
      v2[v19] = v2[v19] + v3[v19];
      unsigned int v20 = v19 + 1;
LABEL_13:
      v2[v20] = v2[v20] + v3[v20];
      unsigned int v21 = v20 + 1;
LABEL_14:
      v2[v21] = v2[v21] + v3[v21];
      unsigned int v22 = v21 + 1;
LABEL_15:
      v2[v22] = v2[v22] + v3[v22];
      unsigned int v23 = v22 + 1;
LABEL_16:
      v2[v23] = v2[v23] + v3[v23];
      unsigned int v24 = v23 + 1;
LABEL_17:
      v2[v24] = v2[v24] + v3[v24];
      unsigned int v25 = v24 + 1;
LABEL_18:
      v2[v25] = v2[v25] + v3[v25];
      unsigned int v26 = v25 + 1;
LABEL_19:
      v2[v26] = v2[v26] + v3[v26];
      int v27 = v26 + 1;
LABEL_20:
      v2[v27] = v2[v27] + v3[v27];
      int v28 = v27 + 1;
LABEL_21:
      v2[v28] = v2[v28] + v3[v28];
      int v29 = v28 + 1;
LABEL_22:
      v2[v29] = v2[v29] + v3[v29];
      uint64_t v30 = (v29 + 1);
LABEL_23:
      v2[v30] = v2[v30] + v3[v30];
      break;
    default:
      break;
  }
  int v31 = *(void (**)(void))(**(void **)(a1 + 56) + 16);

  v31();
  return result;
}

uint64_t sub_122930()
{
  return 132;
}

uint64_t sub_122938(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_122940(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_122948(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_122988(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_122990(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_122998()
{
  return 1;
}

uint64_t sub_1229A0(void *a1)
{
  *(a1 - 6) = off_2404890;
  *a1 = off_24048F8;
  uint64_t v2 = a1[4];
  if (v2)
  {
    if (*(void *)v2)
    {
      uint64_t v3 = *(void *)v2 - 1;
      *(void *)uint64_t v2 = v3;
      if (!v3)
      {
        if (*(void *)(v2 + 16))
        {
          if (*(unsigned char *)(v2 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    a1[4] = 0;
  }
  *(a1 - 6) = off_2403DD0;
  uint64_t v4 = *(a1 - 4);
  if (v4) {
    BOOL v5 = *((unsigned char *)a1 - 24) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    uint64_t result = *(a1 - 2);
    if (result) {
      BOOL v7 = *((unsigned char *)a1 - 8) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_24;
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(a1 - 4) = 0;
    uint64_t result = *(a1 - 2);
    if (result) {
      BOOL v8 = *((unsigned char *)a1 - 8) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8)
    {
LABEL_24:
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      *(a1 - 2) = 0;
    }
  }
  return result;
}

void sub_122B1C(uint64_t a1)
{
}

uint64_t sub_122B24(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 72))() + 8);
}

uint64_t sub_122B64(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_122B6C(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_122B74(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_122B7C(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_122B84()
{
  return 1;
}

void sub_122B8C(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_2404980;
  *(void *)(a1 + 48) = off_24049E8;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  operator new();
}

void sub_1231AC(_Unwind_Exception *a1)
{
  sub_E26D8((uint64_t *)(v1 + 80));
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1231E0(uint64_t a1)
{
  *(void *)a1 = off_2404980;
  *(void *)(a1 + 48) = off_24049E8;
  uint64_t v2 = *(void *)(a1 + 80);
  if (v2)
  {
    if (*(void *)v2)
    {
      uint64_t v3 = *(void *)v2 - 1;
      *(void *)uint64_t v2 = v3;
      if (!v3)
      {
        if (*(void *)(v2 + 16))
        {
          if (*(unsigned char *)(v2 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 80) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_24;
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 16) = 0;
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9) {
    return a1;
  }
LABEL_24:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 32) = 0;
  return a1;
}

void sub_123358(uint64_t a1)
{
  *(void *)a1 = off_2404980;
  *(void *)(a1 + 48) = off_24049E8;
  uint64_t v2 = *(void *)(a1 + 80);
  if (v2)
  {
    if (*(void *)v2)
    {
      uint64_t v3 = *(void *)v2 - 1;
      *(void *)uint64_t v2 = v3;
      if (!v3)
      {
        if (*(void *)(v2 + 16))
        {
          if (*(unsigned char *)(v2 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 80) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }

  operator delete();
}

double sub_1234CC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 72)) {
    return NAN;
  }
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  uint64_t v2 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
                  + 16);
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 64) + 64))(*(void *)(a1 + 64))
                  + 16);
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v4 & 0xF) != 0) {
    int v5 = -16;
  }
  else {
    int v5 = 0;
  }
  int64_t v6 = (unint64_t)(v5 + v4) << 32;
  if (v6 >= 1)
  {
    BOOL v7 = (double *)((char *)v2 + (v6 >> 29));
    do
    {
      double v8 = v2[1];
      *uint64_t v2 = *v2 - *v3;
      v2[1] = v8 - v3[1];
      double v9 = v2[3];
      v2[2] = v2[2] - v3[2];
      v2[3] = v9 - v3[3];
      double v10 = v2[5];
      v2[4] = v2[4] - v3[4];
      v2[5] = v10 - v3[5];
      double v11 = v2[7];
      v2[6] = v2[6] - v3[6];
      v2[7] = v11 - v3[7];
      double v12 = v2[9];
      v2[8] = v2[8] - v3[8];
      v2[9] = v12 - v3[9];
      double v13 = v2[11];
      v2[10] = v2[10] - v3[10];
      v2[11] = v13 - v3[11];
      double v14 = v2[13];
      v2[12] = v2[12] - v3[12];
      v2[13] = v14 - v3[13];
      double v15 = v2[15];
      v2[14] = v2[14] - v3[14];
      v2[15] = v15 - v3[15];
      v2 += 16;
      v3 += 16;
    }
    while (v2 < v7);
  }
  int v16 = (v4 & 0xF) - 1;
  unsigned int v17 = 0;
  unsigned int v18 = 0;
  unsigned int v19 = 0;
  unsigned int v20 = 0;
  unsigned int v21 = 0;
  unsigned int v22 = 0;
  unsigned int v23 = 0;
  unsigned int v24 = 0;
  unsigned int v25 = 0;
  unsigned int v26 = 0;
  int v27 = 0;
  int v28 = 0;
  int v29 = 0;
  uint64_t v30 = 0;
  switch(v16)
  {
    case 0:
      goto LABEL_23;
    case 1:
      goto LABEL_22;
    case 2:
      goto LABEL_21;
    case 3:
      goto LABEL_20;
    case 4:
      goto LABEL_19;
    case 5:
      goto LABEL_18;
    case 6:
      goto LABEL_17;
    case 7:
      goto LABEL_16;
    case 8:
      goto LABEL_15;
    case 9:
      goto LABEL_14;
    case 10:
      goto LABEL_13;
    case 11:
      goto LABEL_12;
    case 12:
      goto LABEL_11;
    case 13:
      goto LABEL_10;
    case 14:
      *uint64_t v2 = *v2 - *v3;
      unsigned int v17 = 1;
LABEL_10:
      v2[v17] = v2[v17] - v3[v17];
      unsigned int v18 = v17 + 1;
LABEL_11:
      v2[v18] = v2[v18] - v3[v18];
      unsigned int v19 = v18 + 1;
LABEL_12:
      v2[v19] = v2[v19] - v3[v19];
      unsigned int v20 = v19 + 1;
LABEL_13:
      v2[v20] = v2[v20] - v3[v20];
      unsigned int v21 = v20 + 1;
LABEL_14:
      v2[v21] = v2[v21] - v3[v21];
      unsigned int v22 = v21 + 1;
LABEL_15:
      v2[v22] = v2[v22] - v3[v22];
      unsigned int v23 = v22 + 1;
LABEL_16:
      v2[v23] = v2[v23] - v3[v23];
      unsigned int v24 = v23 + 1;
LABEL_17:
      v2[v24] = v2[v24] - v3[v24];
      unsigned int v25 = v24 + 1;
LABEL_18:
      v2[v25] = v2[v25] - v3[v25];
      unsigned int v26 = v25 + 1;
LABEL_19:
      v2[v26] = v2[v26] - v3[v26];
      int v27 = v26 + 1;
LABEL_20:
      v2[v27] = v2[v27] - v3[v27];
      int v28 = v27 + 1;
LABEL_21:
      v2[v28] = v2[v28] - v3[v28];
      int v29 = v28 + 1;
LABEL_22:
      v2[v29] = v2[v29] - v3[v29];
      uint64_t v30 = (v29 + 1);
LABEL_23:
      v2[v30] = v2[v30] - v3[v30];
      break;
    default:
      break;
  }
  int v31 = *(void (**)(void))(**(void **)(a1 + 56) + 16);

  v31();
  return result;
}

uint64_t sub_123930()
{
  return 132;
}

uint64_t sub_123938(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_123940(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_123948(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_123988(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_123990(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_123998()
{
  return 1;
}

uint64_t sub_1239A0(void *a1)
{
  *(a1 - 6) = off_2404980;
  *a1 = off_24049E8;
  uint64_t v2 = a1[4];
  if (v2)
  {
    if (*(void *)v2)
    {
      uint64_t v3 = *(void *)v2 - 1;
      *(void *)uint64_t v2 = v3;
      if (!v3)
      {
        if (*(void *)(v2 + 16))
        {
          if (*(unsigned char *)(v2 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    a1[4] = 0;
  }
  *(a1 - 6) = off_2403DD0;
  uint64_t v4 = *(a1 - 4);
  if (v4) {
    BOOL v5 = *((unsigned char *)a1 - 24) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    uint64_t result = *(a1 - 2);
    if (result) {
      BOOL v7 = *((unsigned char *)a1 - 8) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_24;
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(a1 - 4) = 0;
    uint64_t result = *(a1 - 2);
    if (result) {
      BOOL v8 = *((unsigned char *)a1 - 8) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8)
    {
LABEL_24:
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      *(a1 - 2) = 0;
    }
  }
  return result;
}

void sub_123B1C(uint64_t a1)
{
}

uint64_t sub_123B24(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 72))() + 8);
}

uint64_t sub_123B64(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_123B6C(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_123B74(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_123B7C(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_123B84()
{
  return 1;
}

void sub_123B8C(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_2404A70;
  *(void *)(a1 + 48) = off_2404AD8;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  operator new();
}

void sub_1241AC(_Unwind_Exception *a1)
{
  sub_E26D8((uint64_t *)(v1 + 80));
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1241E0(uint64_t a1)
{
  *(void *)a1 = off_2404A70;
  *(void *)(a1 + 48) = off_2404AD8;
  uint64_t v2 = *(void *)(a1 + 80);
  if (v2)
  {
    if (*(void *)v2)
    {
      uint64_t v3 = *(void *)v2 - 1;
      *(void *)uint64_t v2 = v3;
      if (!v3)
      {
        if (*(void *)(v2 + 16))
        {
          if (*(unsigned char *)(v2 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 80) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_24;
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 16) = 0;
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9) {
    return a1;
  }
LABEL_24:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 32) = 0;
  return a1;
}

void sub_124358(uint64_t a1)
{
  *(void *)a1 = off_2404A70;
  *(void *)(a1 + 48) = off_2404AD8;
  uint64_t v2 = *(void *)(a1 + 80);
  if (v2)
  {
    if (*(void *)v2)
    {
      uint64_t v3 = *(void *)v2 - 1;
      *(void *)uint64_t v2 = v3;
      if (!v3)
      {
        if (*(void *)(v2 + 16))
        {
          if (*(unsigned char *)(v2 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 80) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }

  operator delete();
}

double sub_1244CC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 72)) {
    return NAN;
  }
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  uint64_t v2 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
                  + 16);
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 64) + 64))(*(void *)(a1 + 64))
                  + 16);
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v4 & 0xF) != 0) {
    int v5 = -16;
  }
  else {
    int v5 = 0;
  }
  int64_t v6 = (unint64_t)(v5 + v4) << 32;
  if (v6 >= 1)
  {
    BOOL v7 = (double *)((char *)v2 + (v6 >> 29));
    do
    {
      double v8 = v2[1];
      *uint64_t v2 = *v2 * *v3;
      v2[1] = v8 * v3[1];
      double v9 = v2[3];
      v2[2] = v2[2] * v3[2];
      v2[3] = v9 * v3[3];
      double v10 = v2[5];
      v2[4] = v2[4] * v3[4];
      v2[5] = v10 * v3[5];
      double v11 = v2[7];
      v2[6] = v2[6] * v3[6];
      v2[7] = v11 * v3[7];
      double v12 = v2[9];
      v2[8] = v2[8] * v3[8];
      v2[9] = v12 * v3[9];
      double v13 = v2[11];
      v2[10] = v2[10] * v3[10];
      v2[11] = v13 * v3[11];
      double v14 = v2[13];
      v2[12] = v2[12] * v3[12];
      v2[13] = v14 * v3[13];
      double v15 = v2[15];
      v2[14] = v2[14] * v3[14];
      v2[15] = v15 * v3[15];
      v2 += 16;
      v3 += 16;
    }
    while (v2 < v7);
  }
  int v16 = (v4 & 0xF) - 1;
  unsigned int v17 = 0;
  unsigned int v18 = 0;
  unsigned int v19 = 0;
  unsigned int v20 = 0;
  unsigned int v21 = 0;
  unsigned int v22 = 0;
  unsigned int v23 = 0;
  unsigned int v24 = 0;
  unsigned int v25 = 0;
  unsigned int v26 = 0;
  int v27 = 0;
  int v28 = 0;
  int v29 = 0;
  uint64_t v30 = 0;
  switch(v16)
  {
    case 0:
      goto LABEL_23;
    case 1:
      goto LABEL_22;
    case 2:
      goto LABEL_21;
    case 3:
      goto LABEL_20;
    case 4:
      goto LABEL_19;
    case 5:
      goto LABEL_18;
    case 6:
      goto LABEL_17;
    case 7:
      goto LABEL_16;
    case 8:
      goto LABEL_15;
    case 9:
      goto LABEL_14;
    case 10:
      goto LABEL_13;
    case 11:
      goto LABEL_12;
    case 12:
      goto LABEL_11;
    case 13:
      goto LABEL_10;
    case 14:
      *uint64_t v2 = *v2 * *v3;
      unsigned int v17 = 1;
LABEL_10:
      v2[v17] = v2[v17] * v3[v17];
      unsigned int v18 = v17 + 1;
LABEL_11:
      v2[v18] = v2[v18] * v3[v18];
      unsigned int v19 = v18 + 1;
LABEL_12:
      v2[v19] = v2[v19] * v3[v19];
      unsigned int v20 = v19 + 1;
LABEL_13:
      v2[v20] = v2[v20] * v3[v20];
      unsigned int v21 = v20 + 1;
LABEL_14:
      v2[v21] = v2[v21] * v3[v21];
      unsigned int v22 = v21 + 1;
LABEL_15:
      v2[v22] = v2[v22] * v3[v22];
      unsigned int v23 = v22 + 1;
LABEL_16:
      v2[v23] = v2[v23] * v3[v23];
      unsigned int v24 = v23 + 1;
LABEL_17:
      v2[v24] = v2[v24] * v3[v24];
      unsigned int v25 = v24 + 1;
LABEL_18:
      v2[v25] = v2[v25] * v3[v25];
      unsigned int v26 = v25 + 1;
LABEL_19:
      v2[v26] = v2[v26] * v3[v26];
      int v27 = v26 + 1;
LABEL_20:
      v2[v27] = v2[v27] * v3[v27];
      int v28 = v27 + 1;
LABEL_21:
      v2[v28] = v2[v28] * v3[v28];
      int v29 = v28 + 1;
LABEL_22:
      v2[v29] = v2[v29] * v3[v29];
      uint64_t v30 = (v29 + 1);
LABEL_23:
      v2[v30] = v2[v30] * v3[v30];
      break;
    default:
      break;
  }
  int v31 = *(void (**)(void))(**(void **)(a1 + 56) + 16);

  v31();
  return result;
}

uint64_t sub_124930()
{
  return 132;
}

uint64_t sub_124938(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_124940(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_124948(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_124988(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_124990(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_124998()
{
  return 1;
}

uint64_t sub_1249A0(void *a1)
{
  *(a1 - 6) = off_2404A70;
  *a1 = off_2404AD8;
  uint64_t v2 = a1[4];
  if (v2)
  {
    if (*(void *)v2)
    {
      uint64_t v3 = *(void *)v2 - 1;
      *(void *)uint64_t v2 = v3;
      if (!v3)
      {
        if (*(void *)(v2 + 16))
        {
          if (*(unsigned char *)(v2 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    a1[4] = 0;
  }
  *(a1 - 6) = off_2403DD0;
  uint64_t v4 = *(a1 - 4);
  if (v4) {
    BOOL v5 = *((unsigned char *)a1 - 24) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    uint64_t result = *(a1 - 2);
    if (result) {
      BOOL v7 = *((unsigned char *)a1 - 8) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_24;
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(a1 - 4) = 0;
    uint64_t result = *(a1 - 2);
    if (result) {
      BOOL v8 = *((unsigned char *)a1 - 8) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8)
    {
LABEL_24:
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      *(a1 - 2) = 0;
    }
  }
  return result;
}

void sub_124B1C(uint64_t a1)
{
}

uint64_t sub_124B24(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 72))() + 8);
}

uint64_t sub_124B64(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_124B6C(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_124B74(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_124B7C(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_124B84()
{
  return 1;
}

void sub_124B8C(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_2404B60;
  *(void *)(a1 + 48) = off_2404BC8;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  operator new();
}

void sub_1251AC(_Unwind_Exception *a1)
{
  sub_E26D8((uint64_t *)(v1 + 80));
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1251E0(uint64_t a1)
{
  *(void *)a1 = off_2404B60;
  *(void *)(a1 + 48) = off_2404BC8;
  uint64_t v2 = *(void *)(a1 + 80);
  if (v2)
  {
    if (*(void *)v2)
    {
      uint64_t v3 = *(void *)v2 - 1;
      *(void *)uint64_t v2 = v3;
      if (!v3)
      {
        if (*(void *)(v2 + 16))
        {
          if (*(unsigned char *)(v2 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 80) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_24;
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 16) = 0;
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9) {
    return a1;
  }
LABEL_24:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 32) = 0;
  return a1;
}

void sub_125358(uint64_t a1)
{
  *(void *)a1 = off_2404B60;
  *(void *)(a1 + 48) = off_2404BC8;
  uint64_t v2 = *(void *)(a1 + 80);
  if (v2)
  {
    if (*(void *)v2)
    {
      uint64_t v3 = *(void *)v2 - 1;
      *(void *)uint64_t v2 = v3;
      if (!v3)
      {
        if (*(void *)(v2 + 16))
        {
          if (*(unsigned char *)(v2 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 80) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }

  operator delete();
}

double sub_1254CC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 72)) {
    return NAN;
  }
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  uint64_t v2 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
                  + 16);
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 64) + 64))(*(void *)(a1 + 64))
                  + 16);
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v4 & 0xF) != 0) {
    int v5 = -16;
  }
  else {
    int v5 = 0;
  }
  int64_t v6 = (unint64_t)(v5 + v4) << 32;
  if (v6 >= 1)
  {
    BOOL v7 = (double *)((char *)v2 + (v6 >> 29));
    do
    {
      double v8 = v2[1];
      *uint64_t v2 = *v2 / *v3;
      v2[1] = v8 / v3[1];
      double v9 = v2[3];
      v2[2] = v2[2] / v3[2];
      v2[3] = v9 / v3[3];
      double v10 = v2[5];
      v2[4] = v2[4] / v3[4];
      v2[5] = v10 / v3[5];
      double v11 = v2[7];
      v2[6] = v2[6] / v3[6];
      v2[7] = v11 / v3[7];
      double v12 = v2[9];
      v2[8] = v2[8] / v3[8];
      v2[9] = v12 / v3[9];
      double v13 = v2[11];
      v2[10] = v2[10] / v3[10];
      v2[11] = v13 / v3[11];
      double v14 = v2[13];
      v2[12] = v2[12] / v3[12];
      v2[13] = v14 / v3[13];
      double v15 = v2[15];
      v2[14] = v2[14] / v3[14];
      v2[15] = v15 / v3[15];
      v2 += 16;
      v3 += 16;
    }
    while (v2 < v7);
  }
  int v16 = (v4 & 0xF) - 1;
  unsigned int v17 = 0;
  unsigned int v18 = 0;
  unsigned int v19 = 0;
  unsigned int v20 = 0;
  unsigned int v21 = 0;
  unsigned int v22 = 0;
  unsigned int v23 = 0;
  unsigned int v24 = 0;
  unsigned int v25 = 0;
  unsigned int v26 = 0;
  int v27 = 0;
  int v28 = 0;
  int v29 = 0;
  uint64_t v30 = 0;
  switch(v16)
  {
    case 0:
      goto LABEL_23;
    case 1:
      goto LABEL_22;
    case 2:
      goto LABEL_21;
    case 3:
      goto LABEL_20;
    case 4:
      goto LABEL_19;
    case 5:
      goto LABEL_18;
    case 6:
      goto LABEL_17;
    case 7:
      goto LABEL_16;
    case 8:
      goto LABEL_15;
    case 9:
      goto LABEL_14;
    case 10:
      goto LABEL_13;
    case 11:
      goto LABEL_12;
    case 12:
      goto LABEL_11;
    case 13:
      goto LABEL_10;
    case 14:
      *uint64_t v2 = *v2 / *v3;
      unsigned int v17 = 1;
LABEL_10:
      v2[v17] = v2[v17] / v3[v17];
      unsigned int v18 = v17 + 1;
LABEL_11:
      v2[v18] = v2[v18] / v3[v18];
      unsigned int v19 = v18 + 1;
LABEL_12:
      v2[v19] = v2[v19] / v3[v19];
      unsigned int v20 = v19 + 1;
LABEL_13:
      v2[v20] = v2[v20] / v3[v20];
      unsigned int v21 = v20 + 1;
LABEL_14:
      v2[v21] = v2[v21] / v3[v21];
      unsigned int v22 = v21 + 1;
LABEL_15:
      v2[v22] = v2[v22] / v3[v22];
      unsigned int v23 = v22 + 1;
LABEL_16:
      v2[v23] = v2[v23] / v3[v23];
      unsigned int v24 = v23 + 1;
LABEL_17:
      v2[v24] = v2[v24] / v3[v24];
      unsigned int v25 = v24 + 1;
LABEL_18:
      v2[v25] = v2[v25] / v3[v25];
      unsigned int v26 = v25 + 1;
LABEL_19:
      v2[v26] = v2[v26] / v3[v26];
      int v27 = v26 + 1;
LABEL_20:
      v2[v27] = v2[v27] / v3[v27];
      int v28 = v27 + 1;
LABEL_21:
      v2[v28] = v2[v28] / v3[v28];
      int v29 = v28 + 1;
LABEL_22:
      v2[v29] = v2[v29] / v3[v29];
      uint64_t v30 = (v29 + 1);
LABEL_23:
      v2[v30] = v2[v30] / v3[v30];
      break;
    default:
      break;
  }
  int v31 = *(void (**)(void))(**(void **)(a1 + 56) + 16);

  v31();
  return result;
}

uint64_t sub_125930()
{
  return 132;
}

uint64_t sub_125938(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_125940(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_125948(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_125988(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_125990(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_125998()
{
  return 1;
}

uint64_t sub_1259A0(void *a1)
{
  *(a1 - 6) = off_2404B60;
  *a1 = off_2404BC8;
  uint64_t v2 = a1[4];
  if (v2)
  {
    if (*(void *)v2)
    {
      uint64_t v3 = *(void *)v2 - 1;
      *(void *)uint64_t v2 = v3;
      if (!v3)
      {
        if (*(void *)(v2 + 16))
        {
          if (*(unsigned char *)(v2 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    a1[4] = 0;
  }
  *(a1 - 6) = off_2403DD0;
  uint64_t v4 = *(a1 - 4);
  if (v4) {
    BOOL v5 = *((unsigned char *)a1 - 24) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    uint64_t result = *(a1 - 2);
    if (result) {
      BOOL v7 = *((unsigned char *)a1 - 8) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_24;
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(a1 - 4) = 0;
    uint64_t result = *(a1 - 2);
    if (result) {
      BOOL v8 = *((unsigned char *)a1 - 8) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8)
    {
LABEL_24:
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      *(a1 - 2) = 0;
    }
  }
  return result;
}

void sub_125B1C(uint64_t a1)
{
}

uint64_t sub_125B24(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 72))() + 8);
}

uint64_t sub_125B64(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_125B6C(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_125B74(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_125B7C(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_125B84()
{
  return 1;
}

void sub_125B8C(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_2404C50;
  *(void *)(a1 + 48) = off_2404CB8;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  operator new();
}

void sub_1261AC(_Unwind_Exception *a1)
{
  sub_E26D8((uint64_t *)(v1 + 80));
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1261E0(uint64_t a1)
{
  *(void *)a1 = off_2404C50;
  *(void *)(a1 + 48) = off_2404CB8;
  uint64_t v2 = *(void *)(a1 + 80);
  if (v2)
  {
    if (*(void *)v2)
    {
      uint64_t v3 = *(void *)v2 - 1;
      *(void *)uint64_t v2 = v3;
      if (!v3)
      {
        if (*(void *)(v2 + 16))
        {
          if (*(unsigned char *)(v2 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 80) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_24;
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 16) = 0;
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9) {
    return a1;
  }
LABEL_24:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 32) = 0;
  return a1;
}

void sub_126358(uint64_t a1)
{
  *(void *)a1 = off_2404C50;
  *(void *)(a1 + 48) = off_2404CB8;
  uint64_t v2 = *(void *)(a1 + 80);
  if (v2)
  {
    if (*(void *)v2)
    {
      uint64_t v3 = *(void *)v2 - 1;
      *(void *)uint64_t v2 = v3;
      if (!v3)
      {
        if (*(void *)(v2 + 16))
        {
          if (*(unsigned char *)(v2 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 80) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }

  operator delete();
}

double sub_1264CC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 72)) {
    return NAN;
  }
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  uint64_t v2 = *(long double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
                       + 16);
  uint64_t v3 = *(long double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 64) + 64))(*(void *)(a1 + 64))
                       + 16);
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  int v5 = v4 & 0xF;
  if ((v4 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v4) << 32;
  if (v7 >= 1)
  {
    BOOL v8 = (long double *)((char *)v2 + (v7 >> 29));
    do
    {
      *uint64_t v2 = fmod(*v2, *v3);
      v2[1] = fmod(v2[1], v3[1]);
      v2[2] = fmod(v2[2], v3[2]);
      v2[3] = fmod(v2[3], v3[3]);
      v2[4] = fmod(v2[4], v3[4]);
      v2[5] = fmod(v2[5], v3[5]);
      v2[6] = fmod(v2[6], v3[6]);
      v2[7] = fmod(v2[7], v3[7]);
      v2[8] = fmod(v2[8], v3[8]);
      v2[9] = fmod(v2[9], v3[9]);
      v2[10] = fmod(v2[10], v3[10]);
      v2[11] = fmod(v2[11], v3[11]);
      v2[12] = fmod(v2[12], v3[12]);
      v2[13] = fmod(v2[13], v3[13]);
      v2[14] = fmod(v2[14], v3[14]);
      v2[15] = fmod(v2[15], v3[15]);
      v2 += 16;
      v3 += 16;
    }
    while (v2 < v8);
  }
  int v9 = v5 - 1;
  uint64_t v31 = a1;
  unsigned int v10 = 0;
  unsigned int v11 = 0;
  unsigned int v12 = 0;
  unsigned int v13 = 0;
  unsigned int v14 = 0;
  int v15 = 0;
  int v16 = 0;
  uint64_t v17 = 0;
  int v18 = 0;
  int v19 = 0;
  int v20 = 0;
  int v21 = 0;
  int v22 = 0;
  uint64_t v23 = 0;
  switch(v9)
  {
    case 0:
      goto LABEL_23;
    case 1:
      goto LABEL_22;
    case 2:
      goto LABEL_21;
    case 3:
      goto LABEL_20;
    case 4:
      goto LABEL_19;
    case 5:
      goto LABEL_18;
    case 6:
      goto LABEL_17;
    case 7:
      goto LABEL_16;
    case 8:
      goto LABEL_15;
    case 9:
      goto LABEL_14;
    case 10:
      goto LABEL_13;
    case 11:
      goto LABEL_12;
    case 12:
      goto LABEL_11;
    case 13:
      goto LABEL_10;
    case 14:
      *uint64_t v2 = fmod(*v2, *v3);
      unsigned int v10 = 1;
LABEL_10:
      unsigned int v24 = v10;
      v2[v10] = fmod(v2[v10], v3[v10]);
      unsigned int v11 = v24 + 1;
LABEL_11:
      unsigned int v25 = v11;
      v2[v11] = fmod(v2[v11], v3[v11]);
      unsigned int v12 = v25 + 1;
LABEL_12:
      unsigned int v26 = v12;
      v2[v12] = fmod(v2[v12], v3[v12]);
      unsigned int v13 = v26 + 1;
LABEL_13:
      unsigned int v27 = v13;
      v2[v13] = fmod(v2[v13], v3[v13]);
      unsigned int v14 = v27 + 1;
LABEL_14:
      unsigned int v28 = v14;
      v2[v14] = fmod(v2[v14], v3[v14]);
      int v15 = v28 + 1;
LABEL_15:
      v2[v15] = fmod(v2[v15], v3[v15]);
      int v16 = v15 + 1;
LABEL_16:
      v2[v16] = fmod(v2[v16], v3[v16]);
      LODWORD(v17) = v16 + 1;
LABEL_17:
      v2[v17] = fmod(v2[v17], v3[v17]);
      int v18 = v17 + 1;
LABEL_18:
      v2[v18] = fmod(v2[v18], v3[v18]);
      int v19 = v18 + 1;
LABEL_19:
      v2[v19] = fmod(v2[v19], v3[v19]);
      int v20 = v19 + 1;
LABEL_20:
      v2[v20] = fmod(v2[v20], v3[v20]);
      int v21 = v20 + 1;
LABEL_21:
      v2[v21] = fmod(v2[v21], v3[v21]);
      int v22 = v21 + 1;
LABEL_22:
      v2[v22] = fmod(v2[v22], v3[v22]);
      uint64_t v23 = (v22 + 1);
LABEL_23:
      v2[v23] = fmod(v2[v23], v3[v23]);
      uint64_t v17 = v31;
      break;
    default:
      break;
  }
  int v29 = *(void (**)(void))(**(void **)(v17 + 56) + 16);

  v29();
  return result;
}

uint64_t sub_12699C()
{
  return 132;
}

uint64_t sub_1269A4(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_1269AC(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_1269B4(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_1269F4(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_1269FC(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_126A04()
{
  return 1;
}

uint64_t sub_126A0C(void *a1)
{
  *(a1 - 6) = off_2404C50;
  *a1 = off_2404CB8;
  uint64_t v2 = a1[4];
  if (v2)
  {
    if (*(void *)v2)
    {
      uint64_t v3 = *(void *)v2 - 1;
      *(void *)uint64_t v2 = v3;
      if (!v3)
      {
        if (*(void *)(v2 + 16))
        {
          if (*(unsigned char *)(v2 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    a1[4] = 0;
  }
  *(a1 - 6) = off_2403DD0;
  uint64_t v4 = *(a1 - 4);
  if (v4) {
    BOOL v5 = *((unsigned char *)a1 - 24) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    uint64_t result = *(a1 - 2);
    if (result) {
      BOOL v7 = *((unsigned char *)a1 - 8) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_24;
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(a1 - 4) = 0;
    uint64_t result = *(a1 - 2);
    if (result) {
      BOOL v8 = *((unsigned char *)a1 - 8) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8)
    {
LABEL_24:
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      *(a1 - 2) = 0;
    }
  }
  return result;
}

void sub_126B88(uint64_t a1)
{
}

uint64_t sub_126B90(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 72))() + 8);
}

uint64_t sub_126BD0(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_126BD8(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_126BE0(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_126BE8(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_126BF0()
{
  return 1;
}

void sub_126BF8(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_2404D40;
  *(void *)(a1 + 48) = off_2404DA8;
  *(void *)(a1 + 56) = 0;
  operator new();
}

void sub_126F0C(_Unwind_Exception *a1)
{
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_126F20(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_126F3C(uint64_t a1)
{
  *(void *)a1 = off_2404D40;
  *(void *)(a1 + 48) = off_2404DA8;
  uint64_t v2 = *(void *)(a1 + 64);
  if (v2)
  {
    if (*(void *)v2)
    {
      uint64_t v3 = *(void *)v2 - 1;
      *(void *)uint64_t v2 = v3;
      if (!v3)
      {
        if (*(void *)(v2 + 16))
        {
          if (*(unsigned char *)(v2 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 64) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_24;
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 16) = 0;
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9) {
    return a1;
  }
LABEL_24:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 32) = 0;
  return a1;
}

void sub_1270B4(uint64_t a1)
{
  *(void *)a1 = off_2404D40;
  *(void *)(a1 + 48) = off_2404DA8;
  uint64_t v2 = *(void *)(a1 + 64);
  if (v2)
  {
    if (*(void *)v2)
    {
      uint64_t v3 = *(void *)v2 - 1;
      *(void *)uint64_t v2 = v3;
      if (!v3)
      {
        if (*(void *)(v2 + 16))
        {
          if (*(unsigned char *)(v2 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 64) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }

  operator delete();
}

uint64_t sub_127228(uint64_t result)
{
  if (!*(void *)(result + 56)) {
    return result;
  }
  uint64_t v1 = (void **)result;
  uint64_t v16 = (*(double (**)(void))(**(void **)(result + 32) + 16))(*(void *)(result + 32));
  uint64_t v2 = *(float64x2_t **)(*(void *)((uint64_t (*)(void **))(*v1)[9])(v1) + 16);
  int v3 = ((uint64_t (*)(void **))(*v1)[7])(v1);
  int v4 = v3 & 0xF;
  if ((v3 & 0xF) != 0) {
    int v5 = -16;
  }
  else {
    int v5 = 0;
  }
  int64_t v6 = (unint64_t)(v5 + v3) << 32;
  if (v6 < 1)
  {
    double v8 = *(double *)&v16;
    int v14 = v4 - 1;
    goto LABEL_12;
  }
  BOOL v7 = (float64x2_t *)((char *)v2 + (v6 >> 29));
  double v8 = *(double *)&v16;
  float64x2_t v9 = (float64x2_t)vdupq_lane_s64(v16, 0);
  do
  {
    float64x2_t v10 = vaddq_f64(v9, v2[1]);
    *uint64_t v2 = vaddq_f64(v9, *v2);
    v2[1] = v10;
    float64x2_t v11 = vaddq_f64(v9, v2[3]);
    v2[2] = vaddq_f64(v9, v2[2]);
    v2[3] = v11;
    float64x2_t v12 = vaddq_f64(v9, v2[5]);
    v2[4] = vaddq_f64(v9, v2[4]);
    v2[5] = v12;
    float64x2_t v13 = vaddq_f64(v9, v2[7]);
    v2[6] = vaddq_f64(v9, v2[6]);
    v2[7] = v13;
    v2 += 8;
  }
  while (v2 < v7);
  int v14 = v4 - 1;
  if ((v4 - 1) <= 0xE)
  {
LABEL_12:
    switch(v14)
    {
      case 0:
        goto LABEL_27;
      case 1:
        goto LABEL_26;
      case 2:
        goto LABEL_25;
      case 3:
        goto LABEL_24;
      case 4:
        goto LABEL_23;
      case 5:
        goto LABEL_22;
      case 6:
        goto LABEL_21;
      case 7:
        goto LABEL_20;
      case 8:
        goto LABEL_19;
      case 9:
        goto LABEL_18;
      case 10:
        goto LABEL_17;
      case 11:
        goto LABEL_16;
      case 12:
        goto LABEL_15;
      case 13:
        goto LABEL_14;
      case 14:
        v2->f64[0] = v8 + v2->f64[0];
        uint64_t v2 = (float64x2_t *)((char *)v2 + 8);
LABEL_14:
        v2->f64[0] = v8 + v2->f64[0];
        uint64_t v2 = (float64x2_t *)((char *)v2 + 8);
LABEL_15:
        v2->f64[0] = v8 + v2->f64[0];
        uint64_t v2 = (float64x2_t *)((char *)v2 + 8);
LABEL_16:
        v2->f64[0] = v8 + v2->f64[0];
        uint64_t v2 = (float64x2_t *)((char *)v2 + 8);
LABEL_17:
        v2->f64[0] = v8 + v2->f64[0];
        uint64_t v2 = (float64x2_t *)((char *)v2 + 8);
LABEL_18:
        v2->f64[0] = v8 + v2->f64[0];
        uint64_t v2 = (float64x2_t *)((char *)v2 + 8);
LABEL_19:
        v2->f64[0] = v8 + v2->f64[0];
        uint64_t v2 = (float64x2_t *)((char *)v2 + 8);
LABEL_20:
        v2->f64[0] = v8 + v2->f64[0];
        uint64_t v2 = (float64x2_t *)((char *)v2 + 8);
LABEL_21:
        v2->f64[0] = v8 + v2->f64[0];
        uint64_t v2 = (float64x2_t *)((char *)v2 + 8);
LABEL_22:
        v2->f64[0] = v8 + v2->f64[0];
        uint64_t v2 = (float64x2_t *)((char *)v2 + 8);
LABEL_23:
        v2->f64[0] = v8 + v2->f64[0];
        uint64_t v2 = (float64x2_t *)((char *)v2 + 8);
LABEL_24:
        v2->f64[0] = v8 + v2->f64[0];
        uint64_t v2 = (float64x2_t *)((char *)v2 + 8);
LABEL_25:
        v2->f64[0] = v8 + v2->f64[0];
        uint64_t v2 = (float64x2_t *)((char *)v2 + 8);
LABEL_26:
        v2->f64[0] = v8 + v2->f64[0];
        uint64_t v2 = (float64x2_t *)((char *)v2 + 8);
LABEL_27:
        v2->f64[0] = v8 + v2->f64[0];
        break;
      default:
        break;
    }
  }
  int v15 = *(uint64_t (**)(void))(*v1[7] + 16);

  return v15();
}

uint64_t sub_1274CC()
{
  return 131;
}

uint64_t sub_1274D4(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_1274DC(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_1274E4(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_127524(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_12752C(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_127534()
{
  return 1;
}

uint64_t sub_12753C(void *a1)
{
  *(a1 - 6) = off_2404D40;
  *a1 = off_2404DA8;
  uint64_t v2 = a1[2];
  if (v2)
  {
    if (*(void *)v2)
    {
      uint64_t v3 = *(void *)v2 - 1;
      *(void *)uint64_t v2 = v3;
      if (!v3)
      {
        if (*(void *)(v2 + 16))
        {
          if (*(unsigned char *)(v2 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    a1[2] = 0;
  }
  *(a1 - 6) = off_2403DD0;
  uint64_t v4 = *(a1 - 4);
  if (v4) {
    BOOL v5 = *((unsigned char *)a1 - 24) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    uint64_t result = *(a1 - 2);
    if (result) {
      BOOL v7 = *((unsigned char *)a1 - 8) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_24;
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(a1 - 4) = 0;
    uint64_t result = *(a1 - 2);
    if (result) {
      BOOL v8 = *((unsigned char *)a1 - 8) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8)
    {
LABEL_24:
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      *(a1 - 2) = 0;
    }
  }
  return result;
}

void sub_1276B8(uint64_t a1)
{
}

uint64_t sub_1276C0(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 72))() + 8);
}

uint64_t sub_127700(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_127708(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_127710(uint64_t a1)
{
  return a1 + 16;
}

uint64_t sub_127718(uint64_t a1)
{
  return a1 + 16;
}

uint64_t sub_127720()
{
  return 1;
}

void sub_127728(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_2404E30;
  *(void *)(a1 + 48) = off_2404E98;
  *(void *)(a1 + 56) = 0;
  operator new();
}

void sub_127A3C(_Unwind_Exception *a1)
{
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_127A50(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_127A6C(uint64_t a1)
{
  *(void *)a1 = off_2404E30;
  *(void *)(a1 + 48) = off_2404E98;
  uint64_t v2 = *(void *)(a1 + 64);
  if (v2)
  {
    if (*(void *)v2)
    {
      uint64_t v3 = *(void *)v2 - 1;
      *(void *)uint64_t v2 = v3;
      if (!v3)
      {
        if (*(void *)(v2 + 16))
        {
          if (*(unsigned char *)(v2 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 64) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_24;
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 16) = 0;
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9) {
    return a1;
  }
LABEL_24:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 32) = 0;
  return a1;
}

void sub_127BE4(uint64_t a1)
{
  *(void *)a1 = off_2404E30;
  *(void *)(a1 + 48) = off_2404E98;
  uint64_t v2 = *(void *)(a1 + 64);
  if (v2)
  {
    if (*(void *)v2)
    {
      uint64_t v3 = *(void *)v2 - 1;
      *(void *)uint64_t v2 = v3;
      if (!v3)
      {
        if (*(void *)(v2 + 16))
        {
          if (*(unsigned char *)(v2 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 64) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }

  operator delete();
}

uint64_t sub_127D58(uint64_t result)
{
  if (!*(void *)(result + 56)) {
    return result;
  }
  uint64_t v1 = (void **)result;
  uint64_t v16 = (*(double (**)(void))(**(void **)(result + 32) + 16))(*(void *)(result + 32));
  uint64_t v2 = *(float64x2_t **)(*(void *)((uint64_t (*)(void **))(*v1)[9])(v1) + 16);
  int v3 = ((uint64_t (*)(void **))(*v1)[7])(v1);
  int v4 = v3 & 0xF;
  if ((v3 & 0xF) != 0) {
    int v5 = -16;
  }
  else {
    int v5 = 0;
  }
  int64_t v6 = (unint64_t)(v5 + v3) << 32;
  if (v6 < 1)
  {
    double v8 = *(double *)&v16;
    int v14 = v4 - 1;
    goto LABEL_12;
  }
  BOOL v7 = (float64x2_t *)((char *)v2 + (v6 >> 29));
  double v8 = *(double *)&v16;
  float64x2_t v9 = (float64x2_t)vdupq_lane_s64(v16, 0);
  do
  {
    float64x2_t v10 = vsubq_f64(v2[1], v9);
    *uint64_t v2 = vsubq_f64(*v2, v9);
    v2[1] = v10;
    float64x2_t v11 = vsubq_f64(v2[3], v9);
    v2[2] = vsubq_f64(v2[2], v9);
    v2[3] = v11;
    float64x2_t v12 = vsubq_f64(v2[5], v9);
    v2[4] = vsubq_f64(v2[4], v9);
    v2[5] = v12;
    float64x2_t v13 = vsubq_f64(v2[7], v9);
    v2[6] = vsubq_f64(v2[6], v9);
    v2[7] = v13;
    v2 += 8;
  }
  while (v2 < v7);
  int v14 = v4 - 1;
  if ((v4 - 1) <= 0xE)
  {
LABEL_12:
    switch(v14)
    {
      case 0:
        goto LABEL_27;
      case 1:
        goto LABEL_26;
      case 2:
        goto LABEL_25;
      case 3:
        goto LABEL_24;
      case 4:
        goto LABEL_23;
      case 5:
        goto LABEL_22;
      case 6:
        goto LABEL_21;
      case 7:
        goto LABEL_20;
      case 8:
        goto LABEL_19;
      case 9:
        goto LABEL_18;
      case 10:
        goto LABEL_17;
      case 11:
        goto LABEL_16;
      case 12:
        goto LABEL_15;
      case 13:
        goto LABEL_14;
      case 14:
        v2->f64[0] = v2->f64[0] - v8;
        uint64_t v2 = (float64x2_t *)((char *)v2 + 8);
LABEL_14:
        v2->f64[0] = v2->f64[0] - v8;
        uint64_t v2 = (float64x2_t *)((char *)v2 + 8);
LABEL_15:
        v2->f64[0] = v2->f64[0] - v8;
        uint64_t v2 = (float64x2_t *)((char *)v2 + 8);
LABEL_16:
        v2->f64[0] = v2->f64[0] - v8;
        uint64_t v2 = (float64x2_t *)((char *)v2 + 8);
LABEL_17:
        v2->f64[0] = v2->f64[0] - v8;
        uint64_t v2 = (float64x2_t *)((char *)v2 + 8);
LABEL_18:
        v2->f64[0] = v2->f64[0] - v8;
        uint64_t v2 = (float64x2_t *)((char *)v2 + 8);
LABEL_19:
        v2->f64[0] = v2->f64[0] - v8;
        uint64_t v2 = (float64x2_t *)((char *)v2 + 8);
LABEL_20:
        v2->f64[0] = v2->f64[0] - v8;
        uint64_t v2 = (float64x2_t *)((char *)v2 + 8);
LABEL_21:
        v2->f64[0] = v2->f64[0] - v8;
        uint64_t v2 = (float64x2_t *)((char *)v2 + 8);
LABEL_22:
        v2->f64[0] = v2->f64[0] - v8;
        uint64_t v2 = (float64x2_t *)((char *)v2 + 8);
LABEL_23:
        v2->f64[0] = v2->f64[0] - v8;
        uint64_t v2 = (float64x2_t *)((char *)v2 + 8);
LABEL_24:
        v2->f64[0] = v2->f64[0] - v8;
        uint64_t v2 = (float64x2_t *)((char *)v2 + 8);
LABEL_25:
        v2->f64[0] = v2->f64[0] - v8;
        uint64_t v2 = (float64x2_t *)((char *)v2 + 8);
LABEL_26:
        v2->f64[0] = v2->f64[0] - v8;
        uint64_t v2 = (float64x2_t *)((char *)v2 + 8);
LABEL_27:
        v2->f64[0] = v2->f64[0] - v8;
        break;
      default:
        break;
    }
  }
  int v15 = *(uint64_t (**)(void))(*v1[7] + 16);

  return v15();
}

uint64_t sub_127FFC()
{
  return 131;
}

uint64_t sub_128004(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_12800C(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_128014(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_128054(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_12805C(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_128064()
{
  return 1;
}

uint64_t sub_12806C(void *a1)
{
  *(a1 - 6) = off_2404E30;
  *a1 = off_2404E98;
  uint64_t v2 = a1[2];
  if (v2)
  {
    if (*(void *)v2)
    {
      uint64_t v3 = *(void *)v2 - 1;
      *(void *)uint64_t v2 = v3;
      if (!v3)
      {
        if (*(void *)(v2 + 16))
        {
          if (*(unsigned char *)(v2 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    a1[2] = 0;
  }
  *(a1 - 6) = off_2403DD0;
  uint64_t v4 = *(a1 - 4);
  if (v4) {
    BOOL v5 = *((unsigned char *)a1 - 24) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    uint64_t result = *(a1 - 2);
    if (result) {
      BOOL v7 = *((unsigned char *)a1 - 8) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_24;
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(a1 - 4) = 0;
    uint64_t result = *(a1 - 2);
    if (result) {
      BOOL v8 = *((unsigned char *)a1 - 8) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8)
    {
LABEL_24:
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      *(a1 - 2) = 0;
    }
  }
  return result;
}

void sub_1281E8(uint64_t a1)
{
}

uint64_t sub_1281F0(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 72))() + 8);
}

uint64_t sub_128230(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_128238(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_128240(uint64_t a1)
{
  return a1 + 16;
}

uint64_t sub_128248(uint64_t a1)
{
  return a1 + 16;
}

uint64_t sub_128250()
{
  return 1;
}

void sub_128258(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_2404F20;
  *(void *)(a1 + 48) = off_2404F88;
  *(void *)(a1 + 56) = 0;
  operator new();
}

void sub_12856C(_Unwind_Exception *a1)
{
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_128580(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_12859C(uint64_t a1)
{
  *(void *)a1 = off_2404F20;
  *(void *)(a1 + 48) = off_2404F88;
  uint64_t v2 = *(void *)(a1 + 64);
  if (v2)
  {
    if (*(void *)v2)
    {
      uint64_t v3 = *(void *)v2 - 1;
      *(void *)uint64_t v2 = v3;
      if (!v3)
      {
        if (*(void *)(v2 + 16))
        {
          if (*(unsigned char *)(v2 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 64) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_24;
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 16) = 0;
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9) {
    return a1;
  }
LABEL_24:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 32) = 0;
  return a1;
}

void sub_128714(uint64_t a1)
{
  *(void *)a1 = off_2404F20;
  *(void *)(a1 + 48) = off_2404F88;
  uint64_t v2 = *(void *)(a1 + 64);
  if (v2)
  {
    if (*(void *)v2)
    {
      uint64_t v3 = *(void *)v2 - 1;
      *(void *)uint64_t v2 = v3;
      if (!v3)
      {
        if (*(void *)(v2 + 16))
        {
          if (*(unsigned char *)(v2 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 64) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }

  operator delete();
}

uint64_t sub_128888(uint64_t result)
{
  if (!*(void *)(result + 56)) {
    return result;
  }
  uint64_t v1 = (void **)result;
  double v15 = (*(double (**)(void))(**(void **)(result + 32) + 16))(*(void *)(result + 32));
  uint64_t v2 = *(float64x2_t **)(*(void *)((uint64_t (*)(void **))(*v1)[9])(v1) + 16);
  int v3 = ((uint64_t (*)(void **))(*v1)[7])(v1);
  int v4 = v3 & 0xF;
  if ((v3 & 0xF) != 0) {
    int v5 = -16;
  }
  else {
    int v5 = 0;
  }
  int64_t v6 = (unint64_t)(v5 + v3) << 32;
  if (v6 < 1)
  {
    double v8 = v15;
    int v13 = v4 - 1;
    goto LABEL_12;
  }
  BOOL v7 = (float64x2_t *)((char *)v2 + (v6 >> 29));
  double v8 = v15;
  do
  {
    float64x2_t v9 = vmulq_n_f64(v2[1], v15);
    *uint64_t v2 = vmulq_n_f64(*v2, v15);
    v2[1] = v9;
    float64x2_t v10 = vmulq_n_f64(v2[3], v15);
    v2[2] = vmulq_n_f64(v2[2], v15);
    v2[3] = v10;
    float64x2_t v11 = vmulq_n_f64(v2[5], v15);
    v2[4] = vmulq_n_f64(v2[4], v15);
    v2[5] = v11;
    float64x2_t v12 = vmulq_n_f64(v2[7], v15);
    v2[6] = vmulq_n_f64(v2[6], v15);
    v2[7] = v12;
    v2 += 8;
  }
  while (v2 < v7);
  int v13 = v4 - 1;
  if ((v4 - 1) <= 0xE)
  {
LABEL_12:
    switch(v13)
    {
      case 0:
        goto LABEL_27;
      case 1:
        goto LABEL_26;
      case 2:
        goto LABEL_25;
      case 3:
        goto LABEL_24;
      case 4:
        goto LABEL_23;
      case 5:
        goto LABEL_22;
      case 6:
        goto LABEL_21;
      case 7:
        goto LABEL_20;
      case 8:
        goto LABEL_19;
      case 9:
        goto LABEL_18;
      case 10:
        goto LABEL_17;
      case 11:
        goto LABEL_16;
      case 12:
        goto LABEL_15;
      case 13:
        goto LABEL_14;
      case 14:
        v2->f64[0] = v8 * v2->f64[0];
        uint64_t v2 = (float64x2_t *)((char *)v2 + 8);
LABEL_14:
        v2->f64[0] = v8 * v2->f64[0];
        uint64_t v2 = (float64x2_t *)((char *)v2 + 8);
LABEL_15:
        v2->f64[0] = v8 * v2->f64[0];
        uint64_t v2 = (float64x2_t *)((char *)v2 + 8);
LABEL_16:
        v2->f64[0] = v8 * v2->f64[0];
        uint64_t v2 = (float64x2_t *)((char *)v2 + 8);
LABEL_17:
        v2->f64[0] = v8 * v2->f64[0];
        uint64_t v2 = (float64x2_t *)((char *)v2 + 8);
LABEL_18:
        v2->f64[0] = v8 * v2->f64[0];
        uint64_t v2 = (float64x2_t *)((char *)v2 + 8);
LABEL_19:
        v2->f64[0] = v8 * v2->f64[0];
        uint64_t v2 = (float64x2_t *)((char *)v2 + 8);
LABEL_20:
        v2->f64[0] = v8 * v2->f64[0];
        uint64_t v2 = (float64x2_t *)((char *)v2 + 8);
LABEL_21:
        v2->f64[0] = v8 * v2->f64[0];
        uint64_t v2 = (float64x2_t *)((char *)v2 + 8);
LABEL_22:
        v2->f64[0] = v8 * v2->f64[0];
        uint64_t v2 = (float64x2_t *)((char *)v2 + 8);
LABEL_23:
        v2->f64[0] = v8 * v2->f64[0];
        uint64_t v2 = (float64x2_t *)((char *)v2 + 8);
LABEL_24:
        v2->f64[0] = v8 * v2->f64[0];
        uint64_t v2 = (float64x2_t *)((char *)v2 + 8);
LABEL_25:
        v2->f64[0] = v8 * v2->f64[0];
        uint64_t v2 = (float64x2_t *)((char *)v2 + 8);
LABEL_26:
        v2->f64[0] = v8 * v2->f64[0];
        uint64_t v2 = (float64x2_t *)((char *)v2 + 8);
LABEL_27:
        v2->f64[0] = v8 * v2->f64[0];
        break;
      default:
        break;
    }
  }
  int v14 = *(uint64_t (**)(void))(*v1[7] + 16);

  return v14();
}

uint64_t sub_128B28()
{
  return 131;
}

uint64_t sub_128B30(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_128B38(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_128B40(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_128B80(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_128B88(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_128B90()
{
  return 1;
}

uint64_t sub_128B98(void *a1)
{
  *(a1 - 6) = off_2404F20;
  *a1 = off_2404F88;
  uint64_t v2 = a1[2];
  if (v2)
  {
    if (*(void *)v2)
    {
      uint64_t v3 = *(void *)v2 - 1;
      *(void *)uint64_t v2 = v3;
      if (!v3)
      {
        if (*(void *)(v2 + 16))
        {
          if (*(unsigned char *)(v2 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    a1[2] = 0;
  }
  *(a1 - 6) = off_2403DD0;
  uint64_t v4 = *(a1 - 4);
  if (v4) {
    BOOL v5 = *((unsigned char *)a1 - 24) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    uint64_t result = *(a1 - 2);
    if (result) {
      BOOL v7 = *((unsigned char *)a1 - 8) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_24;
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(a1 - 4) = 0;
    uint64_t result = *(a1 - 2);
    if (result) {
      BOOL v8 = *((unsigned char *)a1 - 8) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8)
    {
LABEL_24:
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      *(a1 - 2) = 0;
    }
  }
  return result;
}

void sub_128D14(uint64_t a1)
{
}

uint64_t sub_128D1C(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 72))() + 8);
}

uint64_t sub_128D5C(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_128D64(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_128D6C(uint64_t a1)
{
  return a1 + 16;
}

uint64_t sub_128D74(uint64_t a1)
{
  return a1 + 16;
}

uint64_t sub_128D7C()
{
  return 1;
}

void sub_128D84(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_2405010;
  *(void *)(a1 + 48) = off_2405078;
  *(void *)(a1 + 56) = 0;
  operator new();
}

void sub_129098(_Unwind_Exception *a1)
{
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_1290AC(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1290C8(uint64_t a1)
{
  *(void *)a1 = off_2405010;
  *(void *)(a1 + 48) = off_2405078;
  uint64_t v2 = *(void *)(a1 + 64);
  if (v2)
  {
    if (*(void *)v2)
    {
      uint64_t v3 = *(void *)v2 - 1;
      *(void *)uint64_t v2 = v3;
      if (!v3)
      {
        if (*(void *)(v2 + 16))
        {
          if (*(unsigned char *)(v2 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 64) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_24;
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 16) = 0;
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9) {
    return a1;
  }
LABEL_24:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 32) = 0;
  return a1;
}

void sub_129240(uint64_t a1)
{
  *(void *)a1 = off_2405010;
  *(void *)(a1 + 48) = off_2405078;
  uint64_t v2 = *(void *)(a1 + 64);
  if (v2)
  {
    if (*(void *)v2)
    {
      uint64_t v3 = *(void *)v2 - 1;
      *(void *)uint64_t v2 = v3;
      if (!v3)
      {
        if (*(void *)(v2 + 16))
        {
          if (*(unsigned char *)(v2 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 64) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }

  operator delete();
}

uint64_t sub_1293B4(uint64_t result)
{
  if (!*(void *)(result + 56)) {
    return result;
  }
  uint64_t v1 = (void **)result;
  uint64_t v16 = (*(double (**)(void))(**(void **)(result + 32) + 16))(*(void *)(result + 32));
  uint64_t v2 = *(float64x2_t **)(*(void *)((uint64_t (*)(void **))(*v1)[9])(v1) + 16);
  int v3 = ((uint64_t (*)(void **))(*v1)[7])(v1);
  int v4 = v3 & 0xF;
  if ((v3 & 0xF) != 0) {
    int v5 = -16;
  }
  else {
    int v5 = 0;
  }
  int64_t v6 = (unint64_t)(v5 + v3) << 32;
  if (v6 < 1)
  {
    double v8 = *(double *)&v16;
    int v14 = v4 - 1;
    goto LABEL_12;
  }
  BOOL v7 = (float64x2_t *)((char *)v2 + (v6 >> 29));
  double v8 = *(double *)&v16;
  float64x2_t v9 = (float64x2_t)vdupq_lane_s64(v16, 0);
  do
  {
    float64x2_t v10 = vdivq_f64(v2[1], v9);
    *uint64_t v2 = vdivq_f64(*v2, v9);
    v2[1] = v10;
    float64x2_t v11 = vdivq_f64(v2[3], v9);
    v2[2] = vdivq_f64(v2[2], v9);
    v2[3] = v11;
    float64x2_t v12 = vdivq_f64(v2[5], v9);
    v2[4] = vdivq_f64(v2[4], v9);
    v2[5] = v12;
    float64x2_t v13 = vdivq_f64(v2[7], v9);
    v2[6] = vdivq_f64(v2[6], v9);
    v2[7] = v13;
    v2 += 8;
  }
  while (v2 < v7);
  int v14 = v4 - 1;
  if ((v4 - 1) <= 0xE)
  {
LABEL_12:
    switch(v14)
    {
      case 0:
        goto LABEL_27;
      case 1:
        goto LABEL_26;
      case 2:
        goto LABEL_25;
      case 3:
        goto LABEL_24;
      case 4:
        goto LABEL_23;
      case 5:
        goto LABEL_22;
      case 6:
        goto LABEL_21;
      case 7:
        goto LABEL_20;
      case 8:
        goto LABEL_19;
      case 9:
        goto LABEL_18;
      case 10:
        goto LABEL_17;
      case 11:
        goto LABEL_16;
      case 12:
        goto LABEL_15;
      case 13:
        goto LABEL_14;
      case 14:
        v2->f64[0] = v2->f64[0] / v8;
        uint64_t v2 = (float64x2_t *)((char *)v2 + 8);
LABEL_14:
        v2->f64[0] = v2->f64[0] / v8;
        uint64_t v2 = (float64x2_t *)((char *)v2 + 8);
LABEL_15:
        v2->f64[0] = v2->f64[0] / v8;
        uint64_t v2 = (float64x2_t *)((char *)v2 + 8);
LABEL_16:
        v2->f64[0] = v2->f64[0] / v8;
        uint64_t v2 = (float64x2_t *)((char *)v2 + 8);
LABEL_17:
        v2->f64[0] = v2->f64[0] / v8;
        uint64_t v2 = (float64x2_t *)((char *)v2 + 8);
LABEL_18:
        v2->f64[0] = v2->f64[0] / v8;
        uint64_t v2 = (float64x2_t *)((char *)v2 + 8);
LABEL_19:
        v2->f64[0] = v2->f64[0] / v8;
        uint64_t v2 = (float64x2_t *)((char *)v2 + 8);
LABEL_20:
        v2->f64[0] = v2->f64[0] / v8;
        uint64_t v2 = (float64x2_t *)((char *)v2 + 8);
LABEL_21:
        v2->f64[0] = v2->f64[0] / v8;
        uint64_t v2 = (float64x2_t *)((char *)v2 + 8);
LABEL_22:
        v2->f64[0] = v2->f64[0] / v8;
        uint64_t v2 = (float64x2_t *)((char *)v2 + 8);
LABEL_23:
        v2->f64[0] = v2->f64[0] / v8;
        uint64_t v2 = (float64x2_t *)((char *)v2 + 8);
LABEL_24:
        v2->f64[0] = v2->f64[0] / v8;
        uint64_t v2 = (float64x2_t *)((char *)v2 + 8);
LABEL_25:
        v2->f64[0] = v2->f64[0] / v8;
        uint64_t v2 = (float64x2_t *)((char *)v2 + 8);
LABEL_26:
        v2->f64[0] = v2->f64[0] / v8;
        uint64_t v2 = (float64x2_t *)((char *)v2 + 8);
LABEL_27:
        v2->f64[0] = v2->f64[0] / v8;
        break;
      default:
        break;
    }
  }
  double v15 = *(uint64_t (**)(void))(*v1[7] + 16);

  return v15();
}

uint64_t sub_129658()
{
  return 131;
}

uint64_t sub_129660(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_129668(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_129670(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_1296B0(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_1296B8(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_1296C0()
{
  return 1;
}

uint64_t sub_1296C8(void *a1)
{
  *(a1 - 6) = off_2405010;
  *a1 = off_2405078;
  uint64_t v2 = a1[2];
  if (v2)
  {
    if (*(void *)v2)
    {
      uint64_t v3 = *(void *)v2 - 1;
      *(void *)uint64_t v2 = v3;
      if (!v3)
      {
        if (*(void *)(v2 + 16))
        {
          if (*(unsigned char *)(v2 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    a1[2] = 0;
  }
  *(a1 - 6) = off_2403DD0;
  uint64_t v4 = *(a1 - 4);
  if (v4) {
    BOOL v5 = *((unsigned char *)a1 - 24) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    uint64_t result = *(a1 - 2);
    if (result) {
      BOOL v7 = *((unsigned char *)a1 - 8) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_24;
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(a1 - 4) = 0;
    uint64_t result = *(a1 - 2);
    if (result) {
      BOOL v8 = *((unsigned char *)a1 - 8) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8)
    {
LABEL_24:
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      *(a1 - 2) = 0;
    }
  }
  return result;
}

void sub_129844(uint64_t a1)
{
}

uint64_t sub_12984C(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 72))() + 8);
}

uint64_t sub_12988C(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_129894(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_12989C(uint64_t a1)
{
  return a1 + 16;
}

uint64_t sub_1298A4(uint64_t a1)
{
  return a1 + 16;
}

uint64_t sub_1298AC()
{
  return 1;
}

void sub_1298B4(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_2405100;
  *(void *)(a1 + 48) = off_2405168;
  *(void *)(a1 + 56) = 0;
  operator new();
}

void sub_129BC8(_Unwind_Exception *a1)
{
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_129BDC(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_129BF8(uint64_t a1)
{
  *(void *)a1 = off_2405100;
  *(void *)(a1 + 48) = off_2405168;
  uint64_t v2 = *(void *)(a1 + 64);
  if (v2)
  {
    if (*(void *)v2)
    {
      uint64_t v3 = *(void *)v2 - 1;
      *(void *)uint64_t v2 = v3;
      if (!v3)
      {
        if (*(void *)(v2 + 16))
        {
          if (*(unsigned char *)(v2 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 64) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_24;
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 16) = 0;
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9) {
    return a1;
  }
LABEL_24:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 32) = 0;
  return a1;
}

void sub_129D70(uint64_t a1)
{
  *(void *)a1 = off_2405100;
  *(void *)(a1 + 48) = off_2405168;
  uint64_t v2 = *(void *)(a1 + 64);
  if (v2)
  {
    if (*(void *)v2)
    {
      uint64_t v3 = *(void *)v2 - 1;
      *(void *)uint64_t v2 = v3;
      if (!v3)
      {
        if (*(void *)(v2 + 16))
        {
          if (*(unsigned char *)(v2 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 64) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }

  operator delete();
}

double sub_129EE4(void **a1)
{
  if (!a1[7]) {
    return NAN;
  }
  long double v2 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  uint64_t v3 = *(long double **)(*(void *)((uint64_t (*)(void **))(*a1)[9])(a1) + 16);
  int v4 = ((uint64_t (*)(void **))(*a1)[7])(a1);
  int v5 = v4 & 0xF;
  if ((v4 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v4) << 32;
  if (v7 >= 1)
  {
    BOOL v8 = (long double *)((char *)v3 + (v7 >> 29));
    do
    {
      long double *v3 = fmod(*v3, v2);
      v3[1] = fmod(v3[1], v2);
      v3[2] = fmod(v3[2], v2);
      v3[3] = fmod(v3[3], v2);
      v3[4] = fmod(v3[4], v2);
      v3[5] = fmod(v3[5], v2);
      v3[6] = fmod(v3[6], v2);
      v3[7] = fmod(v3[7], v2);
      v3[8] = fmod(v3[8], v2);
      v3[9] = fmod(v3[9], v2);
      v3[10] = fmod(v3[10], v2);
      v3[11] = fmod(v3[11], v2);
      v3[12] = fmod(v3[12], v2);
      v3[13] = fmod(v3[13], v2);
      v3[14] = fmod(v3[14], v2);
      v3[15] = fmod(v3[15], v2);
      v3 += 16;
    }
    while (v3 < v8);
  }
  switch(v5)
  {
    case 1:
      goto LABEL_23;
    case 2:
      goto LABEL_22;
    case 3:
      goto LABEL_21;
    case 4:
      goto LABEL_20;
    case 5:
      goto LABEL_19;
    case 6:
      goto LABEL_18;
    case 7:
      goto LABEL_17;
    case 8:
      goto LABEL_16;
    case 9:
      goto LABEL_15;
    case 10:
      goto LABEL_14;
    case 11:
      goto LABEL_13;
    case 12:
      goto LABEL_12;
    case 13:
      goto LABEL_11;
    case 14:
      goto LABEL_10;
    case 15:
      long double *v3 = fmod(*v3, v2);
      ++v3;
LABEL_10:
      long double *v3 = fmod(*v3, v2);
      ++v3;
LABEL_11:
      long double *v3 = fmod(*v3, v2);
      ++v3;
LABEL_12:
      long double *v3 = fmod(*v3, v2);
      ++v3;
LABEL_13:
      long double *v3 = fmod(*v3, v2);
      ++v3;
LABEL_14:
      long double *v3 = fmod(*v3, v2);
      ++v3;
LABEL_15:
      long double *v3 = fmod(*v3, v2);
      ++v3;
LABEL_16:
      long double *v3 = fmod(*v3, v2);
      ++v3;
LABEL_17:
      long double *v3 = fmod(*v3, v2);
      ++v3;
LABEL_18:
      long double *v3 = fmod(*v3, v2);
      ++v3;
LABEL_19:
      long double *v3 = fmod(*v3, v2);
      ++v3;
LABEL_20:
      long double *v3 = fmod(*v3, v2);
      ++v3;
LABEL_21:
      long double *v3 = fmod(*v3, v2);
      ++v3;
LABEL_22:
      long double *v3 = fmod(*v3, v2);
      ++v3;
LABEL_23:
      long double *v3 = fmod(*v3, v2);
      break;
    default:
      break;
  }
  BOOL v9 = *(void (**)(void))(*a1[7] + 16);

  v9();
  return result;
}

uint64_t sub_12A274()
{
  return 131;
}

uint64_t sub_12A27C(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_12A284(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_12A28C(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_12A2CC(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_12A2D4(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_12A2DC()
{
  return 1;
}

uint64_t sub_12A2E4(void *a1)
{
  *(a1 - 6) = off_2405100;
  *a1 = off_2405168;
  uint64_t v2 = a1[2];
  if (v2)
  {
    if (*(void *)v2)
    {
      uint64_t v3 = *(void *)v2 - 1;
      *(void *)uint64_t v2 = v3;
      if (!v3)
      {
        if (*(void *)(v2 + 16))
        {
          if (*(unsigned char *)(v2 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    a1[2] = 0;
  }
  *(a1 - 6) = off_2403DD0;
  uint64_t v4 = *(a1 - 4);
  if (v4) {
    BOOL v5 = *((unsigned char *)a1 - 24) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    uint64_t result = *(a1 - 2);
    if (result) {
      BOOL v7 = *((unsigned char *)a1 - 8) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_24;
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(a1 - 4) = 0;
    uint64_t result = *(a1 - 2);
    if (result) {
      BOOL v8 = *((unsigned char *)a1 - 8) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8)
    {
LABEL_24:
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      *(a1 - 2) = 0;
    }
  }
  return result;
}

void sub_12A460(uint64_t a1)
{
}

uint64_t sub_12A468(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 72))() + 8);
}

uint64_t sub_12A4A8(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_12A4B0(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_12A4B8(uint64_t a1)
{
  return a1 + 16;
}

uint64_t sub_12A4C0(uint64_t a1)
{
  return a1 + 16;
}

uint64_t sub_12A4C8()
{
  return 1;
}

void sub_12A4D0()
{
}

void sub_12A530()
{
}

void sub_12A554()
{
}

void sub_12A5B4()
{
}

void sub_12A5D8()
{
}

void sub_12A638()
{
}

void sub_12A65C()
{
}

void sub_12A6BC()
{
}

void sub_12A6E0()
{
}

void sub_12A740()
{
}

void sub_12A764()
{
}

void sub_12A7C4()
{
}

void sub_12A7E8()
{
}

void sub_12A848()
{
}

void sub_12A86C()
{
}

void sub_12A8CC()
{
}

void sub_12A8F0()
{
}

void sub_12A950()
{
}

void sub_12A974()
{
}

void sub_12A9D4()
{
}

void sub_12A9F8()
{
}

void sub_12AA58()
{
}

void sub_12AA7C()
{
}

void sub_12AADC()
{
}

void sub_12AB00()
{
}

void sub_12AB60()
{
}

void sub_12AB84()
{
}

void sub_12ABE4()
{
}

void sub_12AC08()
{
}

void sub_12AC68()
{
}

void sub_12AC8C()
{
}

void sub_12ACEC()
{
}

void sub_12AD10()
{
}

void sub_12AD70()
{
}

void sub_12AD94()
{
}

void sub_12ADF4()
{
}

void sub_12AE18()
{
}

void sub_12AE78()
{
}

void sub_12AE9C()
{
}

void sub_12AEFC()
{
}

void sub_12AF20()
{
}

void sub_12AF80()
{
}

void sub_12AFA4()
{
}

void sub_12B004()
{
}

void sub_12B028()
{
}

void sub_12B088()
{
}

void sub_12B0AC()
{
}

void sub_12B10C()
{
}

void sub_12B130()
{
}

void sub_12B190()
{
}

void sub_12B1B4()
{
}

void sub_12B214()
{
}

void sub_12B238(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_24051F0;
  *(void *)(a1 + 48) = off_2405250;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(unsigned char *)(a1 + 88) = 0;
  operator new();
}

void sub_12BB5C(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_12BC1C(uint64_t a1)
{
  sub_12C2AC(a1);

  operator delete();
}

double sub_12BC54(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 88)) {
    return NAN;
  }
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  uint64_t v2 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
                  + 16);
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 64) + 64))(*(void *)(a1 + 64))
                  + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v5) << 32;
  if (v7 >= 1)
  {
    BOOL v8 = (double *)((char *)v4 + (v7 >> 29));
    do
    {
      if (*v2 >= *v3) {
        double v9 = 0.0;
      }
      else {
        double v9 = 1.0;
      }
      *uint64_t v4 = v9;
      if (v2[1] >= v3[1]) {
        double v10 = 0.0;
      }
      else {
        double v10 = 1.0;
      }
      v4[1] = v10;
      if (v2[2] >= v3[2]) {
        double v11 = 0.0;
      }
      else {
        double v11 = 1.0;
      }
      v4[2] = v11;
      if (v2[3] >= v3[3]) {
        double v12 = 0.0;
      }
      else {
        double v12 = 1.0;
      }
      v4[3] = v12;
      if (v2[4] >= v3[4]) {
        double v13 = 0.0;
      }
      else {
        double v13 = 1.0;
      }
      v4[4] = v13;
      if (v2[5] >= v3[5]) {
        double v14 = 0.0;
      }
      else {
        double v14 = 1.0;
      }
      v4[5] = v14;
      if (v2[6] >= v3[6]) {
        double v15 = 0.0;
      }
      else {
        double v15 = 1.0;
      }
      v4[6] = v15;
      if (v2[7] >= v3[7]) {
        double v16 = 0.0;
      }
      else {
        double v16 = 1.0;
      }
      v4[7] = v16;
      if (v2[8] >= v3[8]) {
        double v17 = 0.0;
      }
      else {
        double v17 = 1.0;
      }
      v4[8] = v17;
      if (v2[9] >= v3[9]) {
        double v18 = 0.0;
      }
      else {
        double v18 = 1.0;
      }
      v4[9] = v18;
      if (v2[10] >= v3[10]) {
        double v19 = 0.0;
      }
      else {
        double v19 = 1.0;
      }
      v4[10] = v19;
      if (v2[11] >= v3[11]) {
        double v20 = 0.0;
      }
      else {
        double v20 = 1.0;
      }
      v4[11] = v20;
      if (v2[12] >= v3[12]) {
        double v21 = 0.0;
      }
      else {
        double v21 = 1.0;
      }
      v4[12] = v21;
      if (v2[13] >= v3[13]) {
        double v22 = 0.0;
      }
      else {
        double v22 = 1.0;
      }
      v4[13] = v22;
      if (v2[14] >= v3[14]) {
        double v23 = 0.0;
      }
      else {
        double v23 = 1.0;
      }
      v4[14] = v23;
      if (v2[15] >= v3[15]) {
        double v24 = 0.0;
      }
      else {
        double v24 = 1.0;
      }
      v4[15] = v24;
      v2 += 16;
      v3 += 16;
      v4 += 16;
    }
    while (v4 < v8);
  }
  int v25 = (v5 & 0xF) - 1;
  unsigned int v26 = 0;
  unsigned int v27 = 0;
  unsigned int v28 = 0;
  unsigned int v29 = 0;
  unsigned int v30 = 0;
  unsigned int v31 = 0;
  unsigned int v32 = 0;
  unsigned int v33 = 0;
  unsigned int v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  switch(v25)
  {
    case 0:
      goto LABEL_99;
    case 1:
      goto LABEL_96;
    case 2:
      goto LABEL_93;
    case 3:
      goto LABEL_90;
    case 4:
      goto LABEL_87;
    case 5:
      goto LABEL_84;
    case 6:
      goto LABEL_81;
    case 7:
      goto LABEL_78;
    case 8:
      goto LABEL_75;
    case 9:
      goto LABEL_72;
    case 10:
      goto LABEL_69;
    case 11:
      goto LABEL_66;
    case 12:
      goto LABEL_63;
    case 13:
      goto LABEL_60;
    case 14:
      double v40 = 0.0;
      if (*v2 < *v3) {
        double v40 = 1.0;
      }
      *uint64_t v4 = v40;
      unsigned int v26 = 1;
LABEL_60:
      double v41 = 0.0;
      if (v2[v26] < v3[v26]) {
        double v41 = 1.0;
      }
      v4[v26] = v41;
      unsigned int v27 = v26 + 1;
LABEL_63:
      double v42 = 0.0;
      if (v2[v27] < v3[v27]) {
        double v42 = 1.0;
      }
      v4[v27] = v42;
      unsigned int v28 = v27 + 1;
LABEL_66:
      double v43 = 0.0;
      if (v2[v28] < v3[v28]) {
        double v43 = 1.0;
      }
      v4[v28] = v43;
      unsigned int v29 = v28 + 1;
LABEL_69:
      double v44 = 0.0;
      if (v2[v29] < v3[v29]) {
        double v44 = 1.0;
      }
      v4[v29] = v44;
      unsigned int v30 = v29 + 1;
LABEL_72:
      double v45 = 0.0;
      if (v2[v30] < v3[v30]) {
        double v45 = 1.0;
      }
      v4[v30] = v45;
      unsigned int v31 = v30 + 1;
LABEL_75:
      double v46 = 0.0;
      if (v2[v31] < v3[v31]) {
        double v46 = 1.0;
      }
      v4[v31] = v46;
      unsigned int v32 = v31 + 1;
LABEL_78:
      double v47 = 0.0;
      if (v2[v32] < v3[v32]) {
        double v47 = 1.0;
      }
      v4[v32] = v47;
      unsigned int v33 = v32 + 1;
LABEL_81:
      double v48 = 0.0;
      if (v2[v33] < v3[v33]) {
        double v48 = 1.0;
      }
      v4[v33] = v48;
      unsigned int v34 = v33 + 1;
LABEL_84:
      double v49 = 0.0;
      if (v2[v34] < v3[v34]) {
        double v49 = 1.0;
      }
      v4[v34] = v49;
      uint64_t v35 = v34 + 1;
LABEL_87:
      double v50 = 0.0;
      if (v2[v35] < v3[v35]) {
        double v50 = 1.0;
      }
      v4[v35] = v50;
      uint64_t v36 = (v35 + 1);
LABEL_90:
      double v51 = 0.0;
      if (v2[v36] < v3[v36]) {
        double v51 = 1.0;
      }
      v4[v36] = v51;
      uint64_t v37 = (v36 + 1);
LABEL_93:
      double v52 = 0.0;
      if (v2[v37] < v3[v37]) {
        double v52 = 1.0;
      }
      v4[v37] = v52;
      uint64_t v38 = (v37 + 1);
LABEL_96:
      double v53 = 0.0;
      if (v2[v38] < v3[v38]) {
        double v53 = 1.0;
      }
      v4[v38] = v53;
      uint64_t v39 = (v38 + 1);
LABEL_99:
      double v54 = 0.0;
      if (v2[v39] < v3[v39]) {
        double v54 = 1.0;
      }
      v4[v39] = v54;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v35, v36, v37, v38, v39)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v35, v36, v37, v38, v39)+ 16);
}

uint64_t sub_12C208()
{
  return 138;
}

uint64_t sub_12C210(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t sub_12C218(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t sub_12C220(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 96) + 8);
}

uint64_t sub_12C22C(uint64_t a1)
{
  return a1 + 96;
}

uint64_t sub_12C234(uint64_t a1)
{
  return a1 + 96;
}

uint64_t sub_12C23C(uint64_t a1)
{
  return sub_12C2AC(a1 - 48);
}

void sub_12C244(uint64_t a1)
{
  sub_12C2AC(a1 - 48);

  operator delete();
}

uint64_t sub_12C280(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 48) + 8);
}

uint64_t sub_12C28C(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_12C294(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_12C29C(uint64_t a1)
{
  return a1 + 48;
}

uint64_t sub_12C2A4(uint64_t a1)
{
  return a1 + 48;
}

uint64_t sub_12C2AC(uint64_t a1)
{
  *(void *)a1 = off_24051F0;
  *(void *)(a1 + 48) = off_2405250;
  if (*(void *)(a1 + 72)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 80);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 96);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 96) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 && *(unsigned char *)(a1 + 40))
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }
  return a1;
}

double sub_12C440(double *a1, double *a2)
{
  double result = 0.0;
  if (*a1 < *a2) {
    return 1.0;
  }
  return result;
}

void sub_12C45C(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_24052D8;
  *(void *)(a1 + 48) = off_2405338;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(unsigned char *)(a1 + 88) = 0;
  operator new();
}

void sub_12CD80(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_12CE40(uint64_t a1)
{
  sub_12D4D0(a1);

  operator delete();
}

double sub_12CE78(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 88)) {
    return NAN;
  }
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  uint64_t v2 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
                  + 16);
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 64) + 64))(*(void *)(a1 + 64))
                  + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v5) << 32;
  if (v7 >= 1)
  {
    BOOL v8 = (double *)((char *)v4 + (v7 >> 29));
    do
    {
      if (*v2 > *v3) {
        double v9 = 0.0;
      }
      else {
        double v9 = 1.0;
      }
      *uint64_t v4 = v9;
      if (v2[1] > v3[1]) {
        double v10 = 0.0;
      }
      else {
        double v10 = 1.0;
      }
      v4[1] = v10;
      if (v2[2] > v3[2]) {
        double v11 = 0.0;
      }
      else {
        double v11 = 1.0;
      }
      v4[2] = v11;
      if (v2[3] > v3[3]) {
        double v12 = 0.0;
      }
      else {
        double v12 = 1.0;
      }
      v4[3] = v12;
      if (v2[4] > v3[4]) {
        double v13 = 0.0;
      }
      else {
        double v13 = 1.0;
      }
      v4[4] = v13;
      if (v2[5] > v3[5]) {
        double v14 = 0.0;
      }
      else {
        double v14 = 1.0;
      }
      v4[5] = v14;
      if (v2[6] > v3[6]) {
        double v15 = 0.0;
      }
      else {
        double v15 = 1.0;
      }
      v4[6] = v15;
      if (v2[7] > v3[7]) {
        double v16 = 0.0;
      }
      else {
        double v16 = 1.0;
      }
      v4[7] = v16;
      if (v2[8] > v3[8]) {
        double v17 = 0.0;
      }
      else {
        double v17 = 1.0;
      }
      v4[8] = v17;
      if (v2[9] > v3[9]) {
        double v18 = 0.0;
      }
      else {
        double v18 = 1.0;
      }
      v4[9] = v18;
      if (v2[10] > v3[10]) {
        double v19 = 0.0;
      }
      else {
        double v19 = 1.0;
      }
      v4[10] = v19;
      if (v2[11] > v3[11]) {
        double v20 = 0.0;
      }
      else {
        double v20 = 1.0;
      }
      v4[11] = v20;
      if (v2[12] > v3[12]) {
        double v21 = 0.0;
      }
      else {
        double v21 = 1.0;
      }
      v4[12] = v21;
      if (v2[13] > v3[13]) {
        double v22 = 0.0;
      }
      else {
        double v22 = 1.0;
      }
      v4[13] = v22;
      if (v2[14] > v3[14]) {
        double v23 = 0.0;
      }
      else {
        double v23 = 1.0;
      }
      v4[14] = v23;
      if (v2[15] > v3[15]) {
        double v24 = 0.0;
      }
      else {
        double v24 = 1.0;
      }
      v4[15] = v24;
      v2 += 16;
      v3 += 16;
      v4 += 16;
    }
    while (v4 < v8);
  }
  int v25 = (v5 & 0xF) - 1;
  unsigned int v26 = 0;
  unsigned int v27 = 0;
  unsigned int v28 = 0;
  unsigned int v29 = 0;
  unsigned int v30 = 0;
  unsigned int v31 = 0;
  unsigned int v32 = 0;
  unsigned int v33 = 0;
  unsigned int v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  switch(v25)
  {
    case 0:
      goto LABEL_99;
    case 1:
      goto LABEL_96;
    case 2:
      goto LABEL_93;
    case 3:
      goto LABEL_90;
    case 4:
      goto LABEL_87;
    case 5:
      goto LABEL_84;
    case 6:
      goto LABEL_81;
    case 7:
      goto LABEL_78;
    case 8:
      goto LABEL_75;
    case 9:
      goto LABEL_72;
    case 10:
      goto LABEL_69;
    case 11:
      goto LABEL_66;
    case 12:
      goto LABEL_63;
    case 13:
      goto LABEL_60;
    case 14:
      double v40 = 0.0;
      if (*v2 <= *v3) {
        double v40 = 1.0;
      }
      *uint64_t v4 = v40;
      unsigned int v26 = 1;
LABEL_60:
      double v41 = 0.0;
      if (v2[v26] <= v3[v26]) {
        double v41 = 1.0;
      }
      v4[v26] = v41;
      unsigned int v27 = v26 + 1;
LABEL_63:
      double v42 = 0.0;
      if (v2[v27] <= v3[v27]) {
        double v42 = 1.0;
      }
      v4[v27] = v42;
      unsigned int v28 = v27 + 1;
LABEL_66:
      double v43 = 0.0;
      if (v2[v28] <= v3[v28]) {
        double v43 = 1.0;
      }
      v4[v28] = v43;
      unsigned int v29 = v28 + 1;
LABEL_69:
      double v44 = 0.0;
      if (v2[v29] <= v3[v29]) {
        double v44 = 1.0;
      }
      v4[v29] = v44;
      unsigned int v30 = v29 + 1;
LABEL_72:
      double v45 = 0.0;
      if (v2[v30] <= v3[v30]) {
        double v45 = 1.0;
      }
      v4[v30] = v45;
      unsigned int v31 = v30 + 1;
LABEL_75:
      double v46 = 0.0;
      if (v2[v31] <= v3[v31]) {
        double v46 = 1.0;
      }
      v4[v31] = v46;
      unsigned int v32 = v31 + 1;
LABEL_78:
      double v47 = 0.0;
      if (v2[v32] <= v3[v32]) {
        double v47 = 1.0;
      }
      v4[v32] = v47;
      unsigned int v33 = v32 + 1;
LABEL_81:
      double v48 = 0.0;
      if (v2[v33] <= v3[v33]) {
        double v48 = 1.0;
      }
      v4[v33] = v48;
      unsigned int v34 = v33 + 1;
LABEL_84:
      double v49 = 0.0;
      if (v2[v34] <= v3[v34]) {
        double v49 = 1.0;
      }
      v4[v34] = v49;
      uint64_t v35 = v34 + 1;
LABEL_87:
      double v50 = 0.0;
      if (v2[v35] <= v3[v35]) {
        double v50 = 1.0;
      }
      v4[v35] = v50;
      uint64_t v36 = (v35 + 1);
LABEL_90:
      double v51 = 0.0;
      if (v2[v36] <= v3[v36]) {
        double v51 = 1.0;
      }
      v4[v36] = v51;
      uint64_t v37 = (v36 + 1);
LABEL_93:
      double v52 = 0.0;
      if (v2[v37] <= v3[v37]) {
        double v52 = 1.0;
      }
      v4[v37] = v52;
      uint64_t v38 = (v37 + 1);
LABEL_96:
      double v53 = 0.0;
      if (v2[v38] <= v3[v38]) {
        double v53 = 1.0;
      }
      v4[v38] = v53;
      uint64_t v39 = (v38 + 1);
LABEL_99:
      double v54 = 0.0;
      if (v2[v39] <= v3[v39]) {
        double v54 = 1.0;
      }
      v4[v39] = v54;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v35, v36, v37, v38, v39)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v35, v36, v37, v38, v39)+ 16);
}

uint64_t sub_12D42C()
{
  return 138;
}

uint64_t sub_12D434(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t sub_12D43C(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t sub_12D444(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 96) + 8);
}

uint64_t sub_12D450(uint64_t a1)
{
  return a1 + 96;
}

uint64_t sub_12D458(uint64_t a1)
{
  return a1 + 96;
}

uint64_t sub_12D460(uint64_t a1)
{
  return sub_12D4D0(a1 - 48);
}

void sub_12D468(uint64_t a1)
{
  sub_12D4D0(a1 - 48);

  operator delete();
}

uint64_t sub_12D4A4(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 48) + 8);
}

uint64_t sub_12D4B0(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_12D4B8(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_12D4C0(uint64_t a1)
{
  return a1 + 48;
}

uint64_t sub_12D4C8(uint64_t a1)
{
  return a1 + 48;
}

uint64_t sub_12D4D0(uint64_t a1)
{
  *(void *)a1 = off_24052D8;
  *(void *)(a1 + 48) = off_2405338;
  if (*(void *)(a1 + 72)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 80);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 96);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 96) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 && *(unsigned char *)(a1 + 40))
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }
  return a1;
}

double sub_12D664(double *a1, double *a2)
{
  double result = 0.0;
  if (*a1 <= *a2) {
    return 1.0;
  }
  return result;
}

void sub_12D680(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_24053C0;
  *(void *)(a1 + 48) = off_2405420;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(unsigned char *)(a1 + 88) = 0;
  operator new();
}

void sub_12DFA4(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_12E064(uint64_t a1)
{
  sub_12E6F4(a1);

  operator delete();
}

double sub_12E09C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 88)) {
    return NAN;
  }
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  uint64_t v2 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
                  + 16);
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 64) + 64))(*(void *)(a1 + 64))
                  + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v5) << 32;
  if (v7 >= 1)
  {
    BOOL v8 = (double *)((char *)v4 + (v7 >> 29));
    do
    {
      if (*v2 <= *v3) {
        double v9 = 0.0;
      }
      else {
        double v9 = 1.0;
      }
      *uint64_t v4 = v9;
      if (v2[1] <= v3[1]) {
        double v10 = 0.0;
      }
      else {
        double v10 = 1.0;
      }
      v4[1] = v10;
      if (v2[2] <= v3[2]) {
        double v11 = 0.0;
      }
      else {
        double v11 = 1.0;
      }
      v4[2] = v11;
      if (v2[3] <= v3[3]) {
        double v12 = 0.0;
      }
      else {
        double v12 = 1.0;
      }
      v4[3] = v12;
      if (v2[4] <= v3[4]) {
        double v13 = 0.0;
      }
      else {
        double v13 = 1.0;
      }
      v4[4] = v13;
      if (v2[5] <= v3[5]) {
        double v14 = 0.0;
      }
      else {
        double v14 = 1.0;
      }
      v4[5] = v14;
      if (v2[6] <= v3[6]) {
        double v15 = 0.0;
      }
      else {
        double v15 = 1.0;
      }
      v4[6] = v15;
      if (v2[7] <= v3[7]) {
        double v16 = 0.0;
      }
      else {
        double v16 = 1.0;
      }
      v4[7] = v16;
      if (v2[8] <= v3[8]) {
        double v17 = 0.0;
      }
      else {
        double v17 = 1.0;
      }
      v4[8] = v17;
      if (v2[9] <= v3[9]) {
        double v18 = 0.0;
      }
      else {
        double v18 = 1.0;
      }
      v4[9] = v18;
      if (v2[10] <= v3[10]) {
        double v19 = 0.0;
      }
      else {
        double v19 = 1.0;
      }
      v4[10] = v19;
      if (v2[11] <= v3[11]) {
        double v20 = 0.0;
      }
      else {
        double v20 = 1.0;
      }
      v4[11] = v20;
      if (v2[12] <= v3[12]) {
        double v21 = 0.0;
      }
      else {
        double v21 = 1.0;
      }
      v4[12] = v21;
      if (v2[13] <= v3[13]) {
        double v22 = 0.0;
      }
      else {
        double v22 = 1.0;
      }
      v4[13] = v22;
      if (v2[14] <= v3[14]) {
        double v23 = 0.0;
      }
      else {
        double v23 = 1.0;
      }
      v4[14] = v23;
      if (v2[15] <= v3[15]) {
        double v24 = 0.0;
      }
      else {
        double v24 = 1.0;
      }
      v4[15] = v24;
      v2 += 16;
      v3 += 16;
      v4 += 16;
    }
    while (v4 < v8);
  }
  int v25 = (v5 & 0xF) - 1;
  unsigned int v26 = 0;
  unsigned int v27 = 0;
  unsigned int v28 = 0;
  unsigned int v29 = 0;
  unsigned int v30 = 0;
  unsigned int v31 = 0;
  unsigned int v32 = 0;
  unsigned int v33 = 0;
  unsigned int v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  switch(v25)
  {
    case 0:
      goto LABEL_99;
    case 1:
      goto LABEL_96;
    case 2:
      goto LABEL_93;
    case 3:
      goto LABEL_90;
    case 4:
      goto LABEL_87;
    case 5:
      goto LABEL_84;
    case 6:
      goto LABEL_81;
    case 7:
      goto LABEL_78;
    case 8:
      goto LABEL_75;
    case 9:
      goto LABEL_72;
    case 10:
      goto LABEL_69;
    case 11:
      goto LABEL_66;
    case 12:
      goto LABEL_63;
    case 13:
      goto LABEL_60;
    case 14:
      double v40 = 0.0;
      if (*v2 > *v3) {
        double v40 = 1.0;
      }
      *uint64_t v4 = v40;
      unsigned int v26 = 1;
LABEL_60:
      double v41 = 0.0;
      if (v2[v26] > v3[v26]) {
        double v41 = 1.0;
      }
      v4[v26] = v41;
      unsigned int v27 = v26 + 1;
LABEL_63:
      double v42 = 0.0;
      if (v2[v27] > v3[v27]) {
        double v42 = 1.0;
      }
      v4[v27] = v42;
      unsigned int v28 = v27 + 1;
LABEL_66:
      double v43 = 0.0;
      if (v2[v28] > v3[v28]) {
        double v43 = 1.0;
      }
      v4[v28] = v43;
      unsigned int v29 = v28 + 1;
LABEL_69:
      double v44 = 0.0;
      if (v2[v29] > v3[v29]) {
        double v44 = 1.0;
      }
      v4[v29] = v44;
      unsigned int v30 = v29 + 1;
LABEL_72:
      double v45 = 0.0;
      if (v2[v30] > v3[v30]) {
        double v45 = 1.0;
      }
      v4[v30] = v45;
      unsigned int v31 = v30 + 1;
LABEL_75:
      double v46 = 0.0;
      if (v2[v31] > v3[v31]) {
        double v46 = 1.0;
      }
      v4[v31] = v46;
      unsigned int v32 = v31 + 1;
LABEL_78:
      double v47 = 0.0;
      if (v2[v32] > v3[v32]) {
        double v47 = 1.0;
      }
      v4[v32] = v47;
      unsigned int v33 = v32 + 1;
LABEL_81:
      double v48 = 0.0;
      if (v2[v33] > v3[v33]) {
        double v48 = 1.0;
      }
      v4[v33] = v48;
      unsigned int v34 = v33 + 1;
LABEL_84:
      double v49 = 0.0;
      if (v2[v34] > v3[v34]) {
        double v49 = 1.0;
      }
      v4[v34] = v49;
      uint64_t v35 = v34 + 1;
LABEL_87:
      double v50 = 0.0;
      if (v2[v35] > v3[v35]) {
        double v50 = 1.0;
      }
      v4[v35] = v50;
      uint64_t v36 = (v35 + 1);
LABEL_90:
      double v51 = 0.0;
      if (v2[v36] > v3[v36]) {
        double v51 = 1.0;
      }
      v4[v36] = v51;
      uint64_t v37 = (v36 + 1);
LABEL_93:
      double v52 = 0.0;
      if (v2[v37] > v3[v37]) {
        double v52 = 1.0;
      }
      v4[v37] = v52;
      uint64_t v38 = (v37 + 1);
LABEL_96:
      double v53 = 0.0;
      if (v2[v38] > v3[v38]) {
        double v53 = 1.0;
      }
      v4[v38] = v53;
      uint64_t v39 = (v38 + 1);
LABEL_99:
      double v54 = 0.0;
      if (v2[v39] > v3[v39]) {
        double v54 = 1.0;
      }
      v4[v39] = v54;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v35, v36, v37, v38, v39)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v35, v36, v37, v38, v39)+ 16);
}

uint64_t sub_12E650()
{
  return 138;
}

uint64_t sub_12E658(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t sub_12E660(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t sub_12E668(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 96) + 8);
}

uint64_t sub_12E674(uint64_t a1)
{
  return a1 + 96;
}

uint64_t sub_12E67C(uint64_t a1)
{
  return a1 + 96;
}

uint64_t sub_12E684(uint64_t a1)
{
  return sub_12E6F4(a1 - 48);
}

void sub_12E68C(uint64_t a1)
{
  sub_12E6F4(a1 - 48);

  operator delete();
}

uint64_t sub_12E6C8(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 48) + 8);
}

uint64_t sub_12E6D4(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_12E6DC(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_12E6E4(uint64_t a1)
{
  return a1 + 48;
}

uint64_t sub_12E6EC(uint64_t a1)
{
  return a1 + 48;
}

uint64_t sub_12E6F4(uint64_t a1)
{
  *(void *)a1 = off_24053C0;
  *(void *)(a1 + 48) = off_2405420;
  if (*(void *)(a1 + 72)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 80);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 96);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 96) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 && *(unsigned char *)(a1 + 40))
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }
  return a1;
}

double sub_12E888(double *a1, double *a2)
{
  double result = 0.0;
  if (*a1 > *a2) {
    return 1.0;
  }
  return result;
}

void sub_12E8A4(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_24054A8;
  *(void *)(a1 + 48) = off_2405508;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(unsigned char *)(a1 + 88) = 0;
  operator new();
}

void sub_12F1C8(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_12F288(uint64_t a1)
{
  sub_12F918(a1);

  operator delete();
}

double sub_12F2C0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 88)) {
    return NAN;
  }
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  uint64_t v2 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
                  + 16);
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 64) + 64))(*(void *)(a1 + 64))
                  + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v5) << 32;
  if (v7 >= 1)
  {
    BOOL v8 = (double *)((char *)v4 + (v7 >> 29));
    do
    {
      if (*v2 < *v3) {
        double v9 = 0.0;
      }
      else {
        double v9 = 1.0;
      }
      *uint64_t v4 = v9;
      if (v2[1] < v3[1]) {
        double v10 = 0.0;
      }
      else {
        double v10 = 1.0;
      }
      v4[1] = v10;
      if (v2[2] < v3[2]) {
        double v11 = 0.0;
      }
      else {
        double v11 = 1.0;
      }
      v4[2] = v11;
      if (v2[3] < v3[3]) {
        double v12 = 0.0;
      }
      else {
        double v12 = 1.0;
      }
      v4[3] = v12;
      if (v2[4] < v3[4]) {
        double v13 = 0.0;
      }
      else {
        double v13 = 1.0;
      }
      v4[4] = v13;
      if (v2[5] < v3[5]) {
        double v14 = 0.0;
      }
      else {
        double v14 = 1.0;
      }
      v4[5] = v14;
      if (v2[6] < v3[6]) {
        double v15 = 0.0;
      }
      else {
        double v15 = 1.0;
      }
      v4[6] = v15;
      if (v2[7] < v3[7]) {
        double v16 = 0.0;
      }
      else {
        double v16 = 1.0;
      }
      v4[7] = v16;
      if (v2[8] < v3[8]) {
        double v17 = 0.0;
      }
      else {
        double v17 = 1.0;
      }
      v4[8] = v17;
      if (v2[9] < v3[9]) {
        double v18 = 0.0;
      }
      else {
        double v18 = 1.0;
      }
      v4[9] = v18;
      if (v2[10] < v3[10]) {
        double v19 = 0.0;
      }
      else {
        double v19 = 1.0;
      }
      v4[10] = v19;
      if (v2[11] < v3[11]) {
        double v20 = 0.0;
      }
      else {
        double v20 = 1.0;
      }
      v4[11] = v20;
      if (v2[12] < v3[12]) {
        double v21 = 0.0;
      }
      else {
        double v21 = 1.0;
      }
      v4[12] = v21;
      if (v2[13] < v3[13]) {
        double v22 = 0.0;
      }
      else {
        double v22 = 1.0;
      }
      v4[13] = v22;
      if (v2[14] < v3[14]) {
        double v23 = 0.0;
      }
      else {
        double v23 = 1.0;
      }
      v4[14] = v23;
      if (v2[15] < v3[15]) {
        double v24 = 0.0;
      }
      else {
        double v24 = 1.0;
      }
      v4[15] = v24;
      v2 += 16;
      v3 += 16;
      v4 += 16;
    }
    while (v4 < v8);
  }
  int v25 = (v5 & 0xF) - 1;
  unsigned int v26 = 0;
  unsigned int v27 = 0;
  unsigned int v28 = 0;
  unsigned int v29 = 0;
  unsigned int v30 = 0;
  unsigned int v31 = 0;
  unsigned int v32 = 0;
  unsigned int v33 = 0;
  unsigned int v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  switch(v25)
  {
    case 0:
      goto LABEL_99;
    case 1:
      goto LABEL_96;
    case 2:
      goto LABEL_93;
    case 3:
      goto LABEL_90;
    case 4:
      goto LABEL_87;
    case 5:
      goto LABEL_84;
    case 6:
      goto LABEL_81;
    case 7:
      goto LABEL_78;
    case 8:
      goto LABEL_75;
    case 9:
      goto LABEL_72;
    case 10:
      goto LABEL_69;
    case 11:
      goto LABEL_66;
    case 12:
      goto LABEL_63;
    case 13:
      goto LABEL_60;
    case 14:
      double v40 = 0.0;
      if (*v2 >= *v3) {
        double v40 = 1.0;
      }
      *uint64_t v4 = v40;
      unsigned int v26 = 1;
LABEL_60:
      double v41 = 0.0;
      if (v2[v26] >= v3[v26]) {
        double v41 = 1.0;
      }
      v4[v26] = v41;
      unsigned int v27 = v26 + 1;
LABEL_63:
      double v42 = 0.0;
      if (v2[v27] >= v3[v27]) {
        double v42 = 1.0;
      }
      v4[v27] = v42;
      unsigned int v28 = v27 + 1;
LABEL_66:
      double v43 = 0.0;
      if (v2[v28] >= v3[v28]) {
        double v43 = 1.0;
      }
      v4[v28] = v43;
      unsigned int v29 = v28 + 1;
LABEL_69:
      double v44 = 0.0;
      if (v2[v29] >= v3[v29]) {
        double v44 = 1.0;
      }
      v4[v29] = v44;
      unsigned int v30 = v29 + 1;
LABEL_72:
      double v45 = 0.0;
      if (v2[v30] >= v3[v30]) {
        double v45 = 1.0;
      }
      v4[v30] = v45;
      unsigned int v31 = v30 + 1;
LABEL_75:
      double v46 = 0.0;
      if (v2[v31] >= v3[v31]) {
        double v46 = 1.0;
      }
      v4[v31] = v46;
      unsigned int v32 = v31 + 1;
LABEL_78:
      double v47 = 0.0;
      if (v2[v32] >= v3[v32]) {
        double v47 = 1.0;
      }
      v4[v32] = v47;
      unsigned int v33 = v32 + 1;
LABEL_81:
      double v48 = 0.0;
      if (v2[v33] >= v3[v33]) {
        double v48 = 1.0;
      }
      v4[v33] = v48;
      unsigned int v34 = v33 + 1;
LABEL_84:
      double v49 = 0.0;
      if (v2[v34] >= v3[v34]) {
        double v49 = 1.0;
      }
      v4[v34] = v49;
      uint64_t v35 = v34 + 1;
LABEL_87:
      double v50 = 0.0;
      if (v2[v35] >= v3[v35]) {
        double v50 = 1.0;
      }
      v4[v35] = v50;
      uint64_t v36 = (v35 + 1);
LABEL_90:
      double v51 = 0.0;
      if (v2[v36] >= v3[v36]) {
        double v51 = 1.0;
      }
      v4[v36] = v51;
      uint64_t v37 = (v36 + 1);
LABEL_93:
      double v52 = 0.0;
      if (v2[v37] >= v3[v37]) {
        double v52 = 1.0;
      }
      v4[v37] = v52;
      uint64_t v38 = (v37 + 1);
LABEL_96:
      double v53 = 0.0;
      if (v2[v38] >= v3[v38]) {
        double v53 = 1.0;
      }
      v4[v38] = v53;
      uint64_t v39 = (v38 + 1);
LABEL_99:
      double v54 = 0.0;
      if (v2[v39] >= v3[v39]) {
        double v54 = 1.0;
      }
      v4[v39] = v54;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v35, v36, v37, v38, v39)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v35, v36, v37, v38, v39)+ 16);
}

uint64_t sub_12F874()
{
  return 138;
}

uint64_t sub_12F87C(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t sub_12F884(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t sub_12F88C(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 96) + 8);
}

uint64_t sub_12F898(uint64_t a1)
{
  return a1 + 96;
}

uint64_t sub_12F8A0(uint64_t a1)
{
  return a1 + 96;
}

uint64_t sub_12F8A8(uint64_t a1)
{
  return sub_12F918(a1 - 48);
}

void sub_12F8B0(uint64_t a1)
{
  sub_12F918(a1 - 48);

  operator delete();
}

uint64_t sub_12F8EC(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 48) + 8);
}

uint64_t sub_12F8F8(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_12F900(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_12F908(uint64_t a1)
{
  return a1 + 48;
}

uint64_t sub_12F910(uint64_t a1)
{
  return a1 + 48;
}

uint64_t sub_12F918(uint64_t a1)
{
  *(void *)a1 = off_24054A8;
  *(void *)(a1 + 48) = off_2405508;
  if (*(void *)(a1 + 72)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 80);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 96);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 96) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 && *(unsigned char *)(a1 + 40))
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }
  return a1;
}

double sub_12FAAC(double *a1, double *a2)
{
  double result = 0.0;
  if (*a1 >= *a2) {
    return 1.0;
  }
  return result;
}

void sub_12FAC8(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_2405590;
  *(void *)(a1 + 48) = off_24055F0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(unsigned char *)(a1 + 88) = 0;
  operator new();
}

void sub_1303EC(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_1304AC(uint64_t a1)
{
  sub_130B3C(a1);

  operator delete();
}

double sub_1304E4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 88)) {
    return NAN;
  }
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  uint64_t v2 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
                  + 16);
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 64) + 64))(*(void *)(a1 + 64))
                  + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v5) << 32;
  if (v7 >= 1)
  {
    BOOL v8 = (double *)((char *)v4 + (v7 >> 29));
    do
    {
      if (*v2 == *v3) {
        double v9 = 1.0;
      }
      else {
        double v9 = 0.0;
      }
      *uint64_t v4 = v9;
      if (v2[1] == v3[1]) {
        double v10 = 1.0;
      }
      else {
        double v10 = 0.0;
      }
      v4[1] = v10;
      if (v2[2] == v3[2]) {
        double v11 = 1.0;
      }
      else {
        double v11 = 0.0;
      }
      v4[2] = v11;
      if (v2[3] == v3[3]) {
        double v12 = 1.0;
      }
      else {
        double v12 = 0.0;
      }
      v4[3] = v12;
      if (v2[4] == v3[4]) {
        double v13 = 1.0;
      }
      else {
        double v13 = 0.0;
      }
      v4[4] = v13;
      if (v2[5] == v3[5]) {
        double v14 = 1.0;
      }
      else {
        double v14 = 0.0;
      }
      v4[5] = v14;
      if (v2[6] == v3[6]) {
        double v15 = 1.0;
      }
      else {
        double v15 = 0.0;
      }
      v4[6] = v15;
      if (v2[7] == v3[7]) {
        double v16 = 1.0;
      }
      else {
        double v16 = 0.0;
      }
      v4[7] = v16;
      if (v2[8] == v3[8]) {
        double v17 = 1.0;
      }
      else {
        double v17 = 0.0;
      }
      v4[8] = v17;
      if (v2[9] == v3[9]) {
        double v18 = 1.0;
      }
      else {
        double v18 = 0.0;
      }
      v4[9] = v18;
      if (v2[10] == v3[10]) {
        double v19 = 1.0;
      }
      else {
        double v19 = 0.0;
      }
      v4[10] = v19;
      if (v2[11] == v3[11]) {
        double v20 = 1.0;
      }
      else {
        double v20 = 0.0;
      }
      v4[11] = v20;
      if (v2[12] == v3[12]) {
        double v21 = 1.0;
      }
      else {
        double v21 = 0.0;
      }
      v4[12] = v21;
      if (v2[13] == v3[13]) {
        double v22 = 1.0;
      }
      else {
        double v22 = 0.0;
      }
      v4[13] = v22;
      if (v2[14] == v3[14]) {
        double v23 = 1.0;
      }
      else {
        double v23 = 0.0;
      }
      v4[14] = v23;
      if (v2[15] == v3[15]) {
        double v24 = 1.0;
      }
      else {
        double v24 = 0.0;
      }
      v4[15] = v24;
      v2 += 16;
      v3 += 16;
      v4 += 16;
    }
    while (v4 < v8);
  }
  int v25 = (v5 & 0xF) - 1;
  unsigned int v26 = 0;
  unsigned int v27 = 0;
  unsigned int v28 = 0;
  unsigned int v29 = 0;
  unsigned int v30 = 0;
  unsigned int v31 = 0;
  unsigned int v32 = 0;
  unsigned int v33 = 0;
  unsigned int v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  switch(v25)
  {
    case 0:
      goto LABEL_99;
    case 1:
      goto LABEL_96;
    case 2:
      goto LABEL_93;
    case 3:
      goto LABEL_90;
    case 4:
      goto LABEL_87;
    case 5:
      goto LABEL_84;
    case 6:
      goto LABEL_81;
    case 7:
      goto LABEL_78;
    case 8:
      goto LABEL_75;
    case 9:
      goto LABEL_72;
    case 10:
      goto LABEL_69;
    case 11:
      goto LABEL_66;
    case 12:
      goto LABEL_63;
    case 13:
      goto LABEL_60;
    case 14:
      double v40 = 0.0;
      if (*v2 == *v3) {
        double v40 = 1.0;
      }
      *uint64_t v4 = v40;
      unsigned int v26 = 1;
LABEL_60:
      double v41 = 0.0;
      if (v2[v26] == v3[v26]) {
        double v41 = 1.0;
      }
      v4[v26] = v41;
      unsigned int v27 = v26 + 1;
LABEL_63:
      double v42 = 0.0;
      if (v2[v27] == v3[v27]) {
        double v42 = 1.0;
      }
      v4[v27] = v42;
      unsigned int v28 = v27 + 1;
LABEL_66:
      double v43 = 0.0;
      if (v2[v28] == v3[v28]) {
        double v43 = 1.0;
      }
      v4[v28] = v43;
      unsigned int v29 = v28 + 1;
LABEL_69:
      double v44 = 0.0;
      if (v2[v29] == v3[v29]) {
        double v44 = 1.0;
      }
      v4[v29] = v44;
      unsigned int v30 = v29 + 1;
LABEL_72:
      double v45 = 0.0;
      if (v2[v30] == v3[v30]) {
        double v45 = 1.0;
      }
      v4[v30] = v45;
      unsigned int v31 = v30 + 1;
LABEL_75:
      double v46 = 0.0;
      if (v2[v31] == v3[v31]) {
        double v46 = 1.0;
      }
      v4[v31] = v46;
      unsigned int v32 = v31 + 1;
LABEL_78:
      double v47 = 0.0;
      if (v2[v32] == v3[v32]) {
        double v47 = 1.0;
      }
      v4[v32] = v47;
      unsigned int v33 = v32 + 1;
LABEL_81:
      double v48 = 0.0;
      if (v2[v33] == v3[v33]) {
        double v48 = 1.0;
      }
      v4[v33] = v48;
      unsigned int v34 = v33 + 1;
LABEL_84:
      double v49 = 0.0;
      if (v2[v34] == v3[v34]) {
        double v49 = 1.0;
      }
      v4[v34] = v49;
      uint64_t v35 = v34 + 1;
LABEL_87:
      double v50 = 0.0;
      if (v2[v35] == v3[v35]) {
        double v50 = 1.0;
      }
      v4[v35] = v50;
      uint64_t v36 = (v35 + 1);
LABEL_90:
      double v51 = 0.0;
      if (v2[v36] == v3[v36]) {
        double v51 = 1.0;
      }
      v4[v36] = v51;
      uint64_t v37 = (v36 + 1);
LABEL_93:
      double v52 = 0.0;
      if (v2[v37] == v3[v37]) {
        double v52 = 1.0;
      }
      v4[v37] = v52;
      uint64_t v38 = (v37 + 1);
LABEL_96:
      double v53 = 0.0;
      if (v2[v38] == v3[v38]) {
        double v53 = 1.0;
      }
      v4[v38] = v53;
      uint64_t v39 = (v38 + 1);
LABEL_99:
      double v54 = 0.0;
      if (v2[v39] == v3[v39]) {
        double v54 = 1.0;
      }
      v4[v39] = v54;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v35, v36, v37, v38, v39)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v35, v36, v37, v38, v39)+ 16);
}

uint64_t sub_130A98()
{
  return 138;
}

uint64_t sub_130AA0(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t sub_130AA8(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t sub_130AB0(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 96) + 8);
}

uint64_t sub_130ABC(uint64_t a1)
{
  return a1 + 96;
}

uint64_t sub_130AC4(uint64_t a1)
{
  return a1 + 96;
}

uint64_t sub_130ACC(uint64_t a1)
{
  return sub_130B3C(a1 - 48);
}

void sub_130AD4(uint64_t a1)
{
  sub_130B3C(a1 - 48);

  operator delete();
}

uint64_t sub_130B10(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 48) + 8);
}

uint64_t sub_130B1C(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_130B24(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_130B2C(uint64_t a1)
{
  return a1 + 48;
}

uint64_t sub_130B34(uint64_t a1)
{
  return a1 + 48;
}

uint64_t sub_130B3C(uint64_t a1)
{
  *(void *)a1 = off_2405590;
  *(void *)(a1 + 48) = off_24055F0;
  if (*(void *)(a1 + 72)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 80);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 96);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 96) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 && *(unsigned char *)(a1 + 40))
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }
  return a1;
}

double sub_130CD0(double *a1, double *a2)
{
  double result = 0.0;
  if (*a1 == *a2) {
    return 1.0;
  }
  return result;
}

void sub_130CEC(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_2405678;
  *(void *)(a1 + 48) = off_24056D8;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(unsigned char *)(a1 + 88) = 0;
  operator new();
}

void sub_131610(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_1316D0(uint64_t a1)
{
  sub_131D60(a1);

  operator delete();
}

double sub_131708(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 88)) {
    return NAN;
  }
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  uint64_t v2 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
                  + 16);
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 64) + 64))(*(void *)(a1 + 64))
                  + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v5) << 32;
  if (v7 >= 1)
  {
    BOOL v8 = (double *)((char *)v4 + (v7 >> 29));
    do
    {
      if (*v2 == *v3) {
        double v9 = 0.0;
      }
      else {
        double v9 = 1.0;
      }
      *uint64_t v4 = v9;
      if (v2[1] == v3[1]) {
        double v10 = 0.0;
      }
      else {
        double v10 = 1.0;
      }
      v4[1] = v10;
      if (v2[2] == v3[2]) {
        double v11 = 0.0;
      }
      else {
        double v11 = 1.0;
      }
      v4[2] = v11;
      if (v2[3] == v3[3]) {
        double v12 = 0.0;
      }
      else {
        double v12 = 1.0;
      }
      v4[3] = v12;
      if (v2[4] == v3[4]) {
        double v13 = 0.0;
      }
      else {
        double v13 = 1.0;
      }
      v4[4] = v13;
      if (v2[5] == v3[5]) {
        double v14 = 0.0;
      }
      else {
        double v14 = 1.0;
      }
      v4[5] = v14;
      if (v2[6] == v3[6]) {
        double v15 = 0.0;
      }
      else {
        double v15 = 1.0;
      }
      v4[6] = v15;
      if (v2[7] == v3[7]) {
        double v16 = 0.0;
      }
      else {
        double v16 = 1.0;
      }
      v4[7] = v16;
      if (v2[8] == v3[8]) {
        double v17 = 0.0;
      }
      else {
        double v17 = 1.0;
      }
      v4[8] = v17;
      if (v2[9] == v3[9]) {
        double v18 = 0.0;
      }
      else {
        double v18 = 1.0;
      }
      v4[9] = v18;
      if (v2[10] == v3[10]) {
        double v19 = 0.0;
      }
      else {
        double v19 = 1.0;
      }
      v4[10] = v19;
      if (v2[11] == v3[11]) {
        double v20 = 0.0;
      }
      else {
        double v20 = 1.0;
      }
      v4[11] = v20;
      if (v2[12] == v3[12]) {
        double v21 = 0.0;
      }
      else {
        double v21 = 1.0;
      }
      v4[12] = v21;
      if (v2[13] == v3[13]) {
        double v22 = 0.0;
      }
      else {
        double v22 = 1.0;
      }
      v4[13] = v22;
      if (v2[14] == v3[14]) {
        double v23 = 0.0;
      }
      else {
        double v23 = 1.0;
      }
      v4[14] = v23;
      if (v2[15] == v3[15]) {
        double v24 = 0.0;
      }
      else {
        double v24 = 1.0;
      }
      v4[15] = v24;
      v2 += 16;
      v3 += 16;
      v4 += 16;
    }
    while (v4 < v8);
  }
  int v25 = (v5 & 0xF) - 1;
  unsigned int v26 = 0;
  unsigned int v27 = 0;
  unsigned int v28 = 0;
  unsigned int v29 = 0;
  unsigned int v30 = 0;
  unsigned int v31 = 0;
  unsigned int v32 = 0;
  unsigned int v33 = 0;
  unsigned int v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  switch(v25)
  {
    case 0:
      goto LABEL_99;
    case 1:
      goto LABEL_96;
    case 2:
      goto LABEL_93;
    case 3:
      goto LABEL_90;
    case 4:
      goto LABEL_87;
    case 5:
      goto LABEL_84;
    case 6:
      goto LABEL_81;
    case 7:
      goto LABEL_78;
    case 8:
      goto LABEL_75;
    case 9:
      goto LABEL_72;
    case 10:
      goto LABEL_69;
    case 11:
      goto LABEL_66;
    case 12:
      goto LABEL_63;
    case 13:
      goto LABEL_60;
    case 14:
      double v40 = 0.0;
      if (*v2 != *v3) {
        double v40 = 1.0;
      }
      *uint64_t v4 = v40;
      unsigned int v26 = 1;
LABEL_60:
      double v41 = 0.0;
      if (v2[v26] != v3[v26]) {
        double v41 = 1.0;
      }
      v4[v26] = v41;
      unsigned int v27 = v26 + 1;
LABEL_63:
      double v42 = 0.0;
      if (v2[v27] != v3[v27]) {
        double v42 = 1.0;
      }
      v4[v27] = v42;
      unsigned int v28 = v27 + 1;
LABEL_66:
      double v43 = 0.0;
      if (v2[v28] != v3[v28]) {
        double v43 = 1.0;
      }
      v4[v28] = v43;
      unsigned int v29 = v28 + 1;
LABEL_69:
      double v44 = 0.0;
      if (v2[v29] != v3[v29]) {
        double v44 = 1.0;
      }
      v4[v29] = v44;
      unsigned int v30 = v29 + 1;
LABEL_72:
      double v45 = 0.0;
      if (v2[v30] != v3[v30]) {
        double v45 = 1.0;
      }
      v4[v30] = v45;
      unsigned int v31 = v30 + 1;
LABEL_75:
      double v46 = 0.0;
      if (v2[v31] != v3[v31]) {
        double v46 = 1.0;
      }
      v4[v31] = v46;
      unsigned int v32 = v31 + 1;
LABEL_78:
      double v47 = 0.0;
      if (v2[v32] != v3[v32]) {
        double v47 = 1.0;
      }
      v4[v32] = v47;
      unsigned int v33 = v32 + 1;
LABEL_81:
      double v48 = 0.0;
      if (v2[v33] != v3[v33]) {
        double v48 = 1.0;
      }
      v4[v33] = v48;
      unsigned int v34 = v33 + 1;
LABEL_84:
      double v49 = 0.0;
      if (v2[v34] != v3[v34]) {
        double v49 = 1.0;
      }
      v4[v34] = v49;
      uint64_t v35 = v34 + 1;
LABEL_87:
      double v50 = 0.0;
      if (v2[v35] != v3[v35]) {
        double v50 = 1.0;
      }
      v4[v35] = v50;
      uint64_t v36 = (v35 + 1);
LABEL_90:
      double v51 = 0.0;
      if (v2[v36] != v3[v36]) {
        double v51 = 1.0;
      }
      v4[v36] = v51;
      uint64_t v37 = (v36 + 1);
LABEL_93:
      double v52 = 0.0;
      if (v2[v37] != v3[v37]) {
        double v52 = 1.0;
      }
      v4[v37] = v52;
      uint64_t v38 = (v37 + 1);
LABEL_96:
      double v53 = 0.0;
      if (v2[v38] != v3[v38]) {
        double v53 = 1.0;
      }
      v4[v38] = v53;
      uint64_t v39 = (v38 + 1);
LABEL_99:
      double v54 = 0.0;
      if (v2[v39] != v3[v39]) {
        double v54 = 1.0;
      }
      v4[v39] = v54;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v35, v36, v37, v38, v39)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v35, v36, v37, v38, v39)+ 16);
}

uint64_t sub_131CBC()
{
  return 138;
}

uint64_t sub_131CC4(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t sub_131CCC(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t sub_131CD4(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 96) + 8);
}

uint64_t sub_131CE0(uint64_t a1)
{
  return a1 + 96;
}

uint64_t sub_131CE8(uint64_t a1)
{
  return a1 + 96;
}

uint64_t sub_131CF0(uint64_t a1)
{
  return sub_131D60(a1 - 48);
}

void sub_131CF8(uint64_t a1)
{
  sub_131D60(a1 - 48);

  operator delete();
}

uint64_t sub_131D34(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 48) + 8);
}

uint64_t sub_131D40(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_131D48(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_131D50(uint64_t a1)
{
  return a1 + 48;
}

uint64_t sub_131D58(uint64_t a1)
{
  return a1 + 48;
}

uint64_t sub_131D60(uint64_t a1)
{
  *(void *)a1 = off_2405678;
  *(void *)(a1 + 48) = off_24056D8;
  if (*(void *)(a1 + 72)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 80);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 96);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 96) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 && *(unsigned char *)(a1 + 40))
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }
  return a1;
}

double sub_131EF4(double *a1, double *a2)
{
  double result = 0.0;
  if (*a1 != *a2) {
    return 1.0;
  }
  return result;
}

void sub_131F10(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_2405760;
  *(void *)(a1 + 48) = off_24057C0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(unsigned char *)(a1 + 88) = 0;
  operator new();
}

void sub_132834(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_1328F4(uint64_t a1)
{
  sub_13370C(a1);

  operator delete();
}

double sub_13292C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 88)) {
    return NAN;
  }
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  uint64_t v2 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
                  + 16);
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 64) + 64))(*(void *)(a1 + 64))
                  + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  if ((uint64_t)((unint64_t)(v6 + v5) << 32) >= 1)
  {
    BOOL v7 = &v4[v6 + v5];
    do
    {
      double v8 = *v2;
      double v9 = *v3;
      double v10 = *v2 - *v3;
      if (v10 < 0.0) {
        double v10 = -v10;
      }
      if (v8 < 0.0) {
        double v8 = -v8;
      }
      if (v9 < 0.0) {
        double v9 = -v9;
      }
      if (v8 < v9) {
        double v8 = v9;
      }
      if (v8 <= 1.0) {
        double v11 = 1.0e-10;
      }
      else {
        double v11 = v8 * 1.0e-10;
      }
      if (v10 > v11) {
        double v12 = 0.0;
      }
      else {
        double v12 = 1.0;
      }
      *uint64_t v4 = v12;
      double v13 = v2[1];
      double v14 = v3[1];
      double v15 = v13 - v14;
      if (v13 - v14 < 0.0) {
        double v15 = -(v13 - v14);
      }
      if (v13 < 0.0) {
        double v13 = -v13;
      }
      if (v14 < 0.0) {
        double v14 = -v14;
      }
      if (v13 < v14) {
        double v13 = v14;
      }
      if (v13 <= 1.0) {
        double v16 = 1.0e-10;
      }
      else {
        double v16 = v13 * 1.0e-10;
      }
      if (v15 > v16) {
        double v17 = 0.0;
      }
      else {
        double v17 = 1.0;
      }
      v4[1] = v17;
      double v18 = v2[2];
      double v19 = v3[2];
      double v20 = v18 - v19;
      if (v18 - v19 < 0.0) {
        double v20 = -(v18 - v19);
      }
      if (v18 < 0.0) {
        double v18 = -v18;
      }
      if (v19 < 0.0) {
        double v19 = -v19;
      }
      if (v18 < v19) {
        double v18 = v19;
      }
      if (v18 <= 1.0) {
        double v21 = 1.0e-10;
      }
      else {
        double v21 = v18 * 1.0e-10;
      }
      if (v20 > v21) {
        double v22 = 0.0;
      }
      else {
        double v22 = 1.0;
      }
      v4[2] = v22;
      double v23 = v2[3];
      double v24 = v3[3];
      double v25 = v23 - v24;
      if (v23 - v24 < 0.0) {
        double v25 = -(v23 - v24);
      }
      if (v23 < 0.0) {
        double v23 = -v23;
      }
      if (v24 < 0.0) {
        double v24 = -v24;
      }
      if (v23 < v24) {
        double v23 = v24;
      }
      if (v23 <= 1.0) {
        double v26 = 1.0e-10;
      }
      else {
        double v26 = v23 * 1.0e-10;
      }
      if (v25 > v26) {
        double v27 = 0.0;
      }
      else {
        double v27 = 1.0;
      }
      v4[3] = v27;
      double v28 = v2[4];
      double v29 = v3[4];
      double v30 = v28 - v29;
      if (v28 - v29 < 0.0) {
        double v30 = -(v28 - v29);
      }
      if (v28 < 0.0) {
        double v28 = -v28;
      }
      if (v29 < 0.0) {
        double v29 = -v29;
      }
      if (v28 < v29) {
        double v28 = v29;
      }
      if (v28 <= 1.0) {
        double v31 = 1.0e-10;
      }
      else {
        double v31 = v28 * 1.0e-10;
      }
      if (v30 > v31) {
        double v32 = 0.0;
      }
      else {
        double v32 = 1.0;
      }
      v4[4] = v32;
      double v33 = v2[5];
      double v34 = v3[5];
      double v35 = v33 - v34;
      if (v33 - v34 < 0.0) {
        double v35 = -(v33 - v34);
      }
      if (v33 < 0.0) {
        double v33 = -v33;
      }
      if (v34 < 0.0) {
        double v34 = -v34;
      }
      if (v33 < v34) {
        double v33 = v34;
      }
      if (v33 <= 1.0) {
        double v36 = 1.0e-10;
      }
      else {
        double v36 = v33 * 1.0e-10;
      }
      if (v35 > v36) {
        double v37 = 0.0;
      }
      else {
        double v37 = 1.0;
      }
      v4[5] = v37;
      double v38 = v2[6];
      double v39 = v3[6];
      double v40 = v38 - v39;
      if (v38 - v39 < 0.0) {
        double v40 = -(v38 - v39);
      }
      if (v38 < 0.0) {
        double v38 = -v38;
      }
      if (v39 < 0.0) {
        double v39 = -v39;
      }
      if (v38 < v39) {
        double v38 = v39;
      }
      if (v38 <= 1.0) {
        double v41 = 1.0e-10;
      }
      else {
        double v41 = v38 * 1.0e-10;
      }
      if (v40 > v41) {
        double v42 = 0.0;
      }
      else {
        double v42 = 1.0;
      }
      v4[6] = v42;
      double v43 = v2[7];
      double v44 = v3[7];
      double v45 = v43 - v44;
      if (v43 - v44 < 0.0) {
        double v45 = -(v43 - v44);
      }
      if (v43 < 0.0) {
        double v43 = -v43;
      }
      if (v44 < 0.0) {
        double v44 = -v44;
      }
      if (v43 < v44) {
        double v43 = v44;
      }
      if (v43 <= 1.0) {
        double v46 = 1.0e-10;
      }
      else {
        double v46 = v43 * 1.0e-10;
      }
      if (v45 > v46) {
        double v47 = 0.0;
      }
      else {
        double v47 = 1.0;
      }
      v4[7] = v47;
      double v48 = v2[8];
      double v49 = v3[8];
      double v50 = v48 - v49;
      if (v48 - v49 < 0.0) {
        double v50 = -(v48 - v49);
      }
      if (v48 < 0.0) {
        double v48 = -v48;
      }
      if (v49 < 0.0) {
        double v49 = -v49;
      }
      if (v48 < v49) {
        double v48 = v49;
      }
      if (v48 <= 1.0) {
        double v51 = 1.0e-10;
      }
      else {
        double v51 = v48 * 1.0e-10;
      }
      if (v50 > v51) {
        double v52 = 0.0;
      }
      else {
        double v52 = 1.0;
      }
      v4[8] = v52;
      double v53 = v2[9];
      double v54 = v3[9];
      double v55 = v53 - v54;
      if (v53 - v54 < 0.0) {
        double v55 = -(v53 - v54);
      }
      if (v53 < 0.0) {
        double v53 = -v53;
      }
      if (v54 < 0.0) {
        double v54 = -v54;
      }
      if (v53 < v54) {
        double v53 = v54;
      }
      if (v53 <= 1.0) {
        double v56 = 1.0e-10;
      }
      else {
        double v56 = v53 * 1.0e-10;
      }
      if (v55 > v56) {
        double v57 = 0.0;
      }
      else {
        double v57 = 1.0;
      }
      v4[9] = v57;
      double v58 = v2[10];
      double v59 = v3[10];
      double v60 = v58 - v59;
      if (v58 - v59 < 0.0) {
        double v60 = -(v58 - v59);
      }
      if (v58 < 0.0) {
        double v58 = -v58;
      }
      if (v59 < 0.0) {
        double v59 = -v59;
      }
      if (v58 < v59) {
        double v58 = v59;
      }
      if (v58 <= 1.0) {
        double v61 = 1.0e-10;
      }
      else {
        double v61 = v58 * 1.0e-10;
      }
      if (v60 > v61) {
        double v62 = 0.0;
      }
      else {
        double v62 = 1.0;
      }
      v4[10] = v62;
      double v63 = v2[11];
      double v64 = v3[11];
      double v65 = v63 - v64;
      if (v63 - v64 < 0.0) {
        double v65 = -(v63 - v64);
      }
      if (v63 < 0.0) {
        double v63 = -v63;
      }
      if (v64 < 0.0) {
        double v64 = -v64;
      }
      if (v63 < v64) {
        double v63 = v64;
      }
      if (v63 <= 1.0) {
        double v66 = 1.0e-10;
      }
      else {
        double v66 = v63 * 1.0e-10;
      }
      if (v65 > v66) {
        double v67 = 0.0;
      }
      else {
        double v67 = 1.0;
      }
      v4[11] = v67;
      double v68 = v2[12];
      double v69 = v3[12];
      double v70 = v68 - v69;
      if (v68 - v69 < 0.0) {
        double v70 = -(v68 - v69);
      }
      if (v68 < 0.0) {
        double v68 = -v68;
      }
      if (v69 < 0.0) {
        double v69 = -v69;
      }
      if (v68 < v69) {
        double v68 = v69;
      }
      if (v68 <= 1.0) {
        double v71 = 1.0e-10;
      }
      else {
        double v71 = v68 * 1.0e-10;
      }
      if (v70 > v71) {
        double v72 = 0.0;
      }
      else {
        double v72 = 1.0;
      }
      v4[12] = v72;
      double v73 = v2[13];
      double v74 = v3[13];
      double v75 = v73 - v74;
      if (v73 - v74 < 0.0) {
        double v75 = -(v73 - v74);
      }
      if (v73 < 0.0) {
        double v73 = -v73;
      }
      if (v74 < 0.0) {
        double v74 = -v74;
      }
      if (v73 < v74) {
        double v73 = v74;
      }
      if (v73 <= 1.0) {
        double v76 = 1.0e-10;
      }
      else {
        double v76 = v73 * 1.0e-10;
      }
      if (v75 > v76) {
        double v77 = 0.0;
      }
      else {
        double v77 = 1.0;
      }
      v4[13] = v77;
      double v78 = v2[14];
      double v79 = v3[14];
      double v80 = v78 - v79;
      if (v78 - v79 < 0.0) {
        double v80 = -(v78 - v79);
      }
      if (v78 < 0.0) {
        double v78 = -v78;
      }
      if (v79 < 0.0) {
        double v79 = -v79;
      }
      if (v78 < v79) {
        double v78 = v79;
      }
      if (v78 <= 1.0) {
        double v81 = 1.0e-10;
      }
      else {
        double v81 = v78 * 1.0e-10;
      }
      if (v80 > v81) {
        double v82 = 0.0;
      }
      else {
        double v82 = 1.0;
      }
      v4[14] = v82;
      double v83 = v2[15];
      double v84 = v3[15];
      double v85 = v83 - v84;
      if (v83 - v84 < 0.0) {
        double v85 = -(v83 - v84);
      }
      if (v83 < 0.0) {
        double v83 = -v83;
      }
      if (v84 < 0.0) {
        double v84 = -v84;
      }
      if (v83 < v84) {
        double v83 = v84;
      }
      if (v83 <= 1.0) {
        double v86 = 1.0e-10;
      }
      else {
        double v86 = v83 * 1.0e-10;
      }
      if (v85 > v86) {
        double v87 = 0.0;
      }
      else {
        double v87 = 1.0;
      }
      v4[15] = v87;
      v2 += 16;
      v3 += 16;
      v4 += 16;
    }
    while (v4 < v7);
  }
  int v88 = (v5 & 0xF) - 1;
  unsigned int v89 = 0;
  unsigned int v90 = 0;
  unsigned int v91 = 0;
  unsigned int v92 = 0;
  unsigned int v93 = 0;
  unsigned int v94 = 0;
  unsigned int v95 = 0;
  unsigned int v96 = 0;
  uint64_t v97 = 0;
  uint64_t v98 = 0;
  uint64_t v99 = 0;
  uint64_t v100 = 0;
  uint64_t v101 = 0;
  uint64_t v102 = 0;
  switch(v88)
  {
    case 0:
      goto LABEL_429;
    case 1:
      goto LABEL_415;
    case 2:
      goto LABEL_401;
    case 3:
      goto LABEL_387;
    case 4:
      goto LABEL_373;
    case 5:
      goto LABEL_359;
    case 6:
      goto LABEL_345;
    case 7:
      goto LABEL_331;
    case 8:
      goto LABEL_317;
    case 9:
      goto LABEL_303;
    case 10:
      goto LABEL_289;
    case 11:
      goto LABEL_275;
    case 12:
      goto LABEL_261;
    case 13:
      goto LABEL_247;
    case 14:
      double v103 = *v2;
      double v104 = *v3;
      double v105 = *v2 - *v3;
      if (v105 < 0.0) {
        double v105 = -v105;
      }
      if (v103 < 0.0) {
        double v103 = -v103;
      }
      if (v104 < 0.0) {
        double v104 = -v104;
      }
      if (v103 < v104) {
        double v103 = v104;
      }
      if (v103 <= 1.0) {
        double v106 = 1.0e-10;
      }
      else {
        double v106 = v103 * 1.0e-10;
      }
      BOOL v107 = v105 > v106;
      double v108 = 0.0;
      if (!v107) {
        double v108 = 1.0;
      }
      *uint64_t v4 = v108;
      unsigned int v89 = 1;
LABEL_247:
      uint64_t v109 = v89;
      double v110 = v2[v109];
      double v111 = v3[v109];
      double v112 = v110 - v111;
      if (v110 - v111 < 0.0) {
        double v112 = -(v110 - v111);
      }
      if (v110 < 0.0) {
        double v110 = -v110;
      }
      if (v111 < 0.0) {
        double v111 = -v111;
      }
      if (v110 < v111) {
        double v110 = v111;
      }
      if (v110 <= 1.0) {
        double v113 = 1.0e-10;
      }
      else {
        double v113 = v110 * 1.0e-10;
      }
      BOOL v107 = v112 > v113;
      double v114 = 0.0;
      if (!v107) {
        double v114 = 1.0;
      }
      v4[v89] = v114;
      unsigned int v90 = v89 + 1;
LABEL_261:
      uint64_t v115 = v90;
      double v116 = v2[v115];
      double v117 = v3[v115];
      double v118 = v116 - v117;
      if (v116 - v117 < 0.0) {
        double v118 = -(v116 - v117);
      }
      if (v116 < 0.0) {
        double v116 = -v116;
      }
      if (v117 < 0.0) {
        double v117 = -v117;
      }
      if (v116 < v117) {
        double v116 = v117;
      }
      if (v116 <= 1.0) {
        double v119 = 1.0e-10;
      }
      else {
        double v119 = v116 * 1.0e-10;
      }
      BOOL v107 = v118 > v119;
      double v120 = 0.0;
      if (!v107) {
        double v120 = 1.0;
      }
      v4[v90] = v120;
      unsigned int v91 = v90 + 1;
LABEL_275:
      uint64_t v121 = v91;
      double v122 = v2[v121];
      double v123 = v3[v121];
      double v124 = v122 - v123;
      if (v122 - v123 < 0.0) {
        double v124 = -(v122 - v123);
      }
      if (v122 < 0.0) {
        double v122 = -v122;
      }
      if (v123 < 0.0) {
        double v123 = -v123;
      }
      if (v122 < v123) {
        double v122 = v123;
      }
      if (v122 <= 1.0) {
        double v125 = 1.0e-10;
      }
      else {
        double v125 = v122 * 1.0e-10;
      }
      BOOL v107 = v124 > v125;
      double v126 = 0.0;
      if (!v107) {
        double v126 = 1.0;
      }
      v4[v91] = v126;
      unsigned int v92 = v91 + 1;
LABEL_289:
      uint64_t v127 = v92;
      double v128 = v2[v127];
      double v129 = v3[v127];
      double v130 = v128 - v129;
      if (v128 - v129 < 0.0) {
        double v130 = -(v128 - v129);
      }
      if (v128 < 0.0) {
        double v128 = -v128;
      }
      if (v129 < 0.0) {
        double v129 = -v129;
      }
      if (v128 < v129) {
        double v128 = v129;
      }
      if (v128 <= 1.0) {
        double v131 = 1.0e-10;
      }
      else {
        double v131 = v128 * 1.0e-10;
      }
      BOOL v107 = v130 > v131;
      double v132 = 0.0;
      if (!v107) {
        double v132 = 1.0;
      }
      v4[v92] = v132;
      unsigned int v93 = v92 + 1;
LABEL_303:
      uint64_t v133 = v93;
      double v134 = v2[v133];
      double v135 = v3[v133];
      double v136 = v134 - v135;
      if (v134 - v135 < 0.0) {
        double v136 = -(v134 - v135);
      }
      if (v134 < 0.0) {
        double v134 = -v134;
      }
      if (v135 < 0.0) {
        double v135 = -v135;
      }
      if (v134 < v135) {
        double v134 = v135;
      }
      if (v134 <= 1.0) {
        double v137 = 1.0e-10;
      }
      else {
        double v137 = v134 * 1.0e-10;
      }
      BOOL v107 = v136 > v137;
      double v138 = 0.0;
      if (!v107) {
        double v138 = 1.0;
      }
      v4[v93] = v138;
      unsigned int v94 = v93 + 1;
LABEL_317:
      uint64_t v139 = v94;
      double v140 = v2[v139];
      double v141 = v3[v139];
      double v142 = v140 - v141;
      if (v140 - v141 < 0.0) {
        double v142 = -(v140 - v141);
      }
      if (v140 < 0.0) {
        double v140 = -v140;
      }
      if (v141 < 0.0) {
        double v141 = -v141;
      }
      if (v140 < v141) {
        double v140 = v141;
      }
      if (v140 <= 1.0) {
        double v143 = 1.0e-10;
      }
      else {
        double v143 = v140 * 1.0e-10;
      }
      BOOL v107 = v142 > v143;
      double v144 = 0.0;
      if (!v107) {
        double v144 = 1.0;
      }
      v4[v94] = v144;
      unsigned int v95 = v94 + 1;
LABEL_331:
      uint64_t v145 = v95;
      double v146 = v2[v145];
      double v147 = v3[v145];
      double v148 = v146 - v147;
      if (v146 - v147 < 0.0) {
        double v148 = -(v146 - v147);
      }
      if (v146 < 0.0) {
        double v146 = -v146;
      }
      if (v147 < 0.0) {
        double v147 = -v147;
      }
      if (v146 < v147) {
        double v146 = v147;
      }
      if (v146 <= 1.0) {
        double v149 = 1.0e-10;
      }
      else {
        double v149 = v146 * 1.0e-10;
      }
      BOOL v107 = v148 > v149;
      double v150 = 0.0;
      if (!v107) {
        double v150 = 1.0;
      }
      v4[v95] = v150;
      unsigned int v96 = v95 + 1;
LABEL_345:
      uint64_t v151 = v96;
      double v152 = v2[v151];
      double v153 = v3[v151];
      double v154 = v152 - v153;
      if (v152 - v153 < 0.0) {
        double v154 = -(v152 - v153);
      }
      if (v152 < 0.0) {
        double v152 = -v152;
      }
      if (v153 < 0.0) {
        double v153 = -v153;
      }
      if (v152 < v153) {
        double v152 = v153;
      }
      if (v152 <= 1.0) {
        double v155 = 1.0e-10;
      }
      else {
        double v155 = v152 * 1.0e-10;
      }
      BOOL v107 = v154 > v155;
      double v156 = 0.0;
      if (!v107) {
        double v156 = 1.0;
      }
      v4[v96] = v156;
      uint64_t v97 = v96 + 1;
LABEL_359:
      uint64_t v157 = v97;
      double v158 = v2[v157];
      double v159 = v3[v157];
      double v160 = v158 - v159;
      if (v158 - v159 < 0.0) {
        double v160 = -(v158 - v159);
      }
      if (v158 < 0.0) {
        double v158 = -v158;
      }
      if (v159 < 0.0) {
        double v159 = -v159;
      }
      if (v158 < v159) {
        double v158 = v159;
      }
      if (v158 <= 1.0) {
        double v161 = 1.0e-10;
      }
      else {
        double v161 = v158 * 1.0e-10;
      }
      BOOL v107 = v160 > v161;
      double v162 = 0.0;
      if (!v107) {
        double v162 = 1.0;
      }
      v4[v97] = v162;
      uint64_t v98 = (v97 + 1);
LABEL_373:
      uint64_t v163 = v98;
      double v164 = v2[v163];
      double v165 = v3[v163];
      double v166 = v164 - v165;
      if (v164 - v165 < 0.0) {
        double v166 = -(v164 - v165);
      }
      if (v164 < 0.0) {
        double v164 = -v164;
      }
      if (v165 < 0.0) {
        double v165 = -v165;
      }
      if (v164 < v165) {
        double v164 = v165;
      }
      if (v164 <= 1.0) {
        double v167 = 1.0e-10;
      }
      else {
        double v167 = v164 * 1.0e-10;
      }
      BOOL v107 = v166 > v167;
      double v168 = 0.0;
      if (!v107) {
        double v168 = 1.0;
      }
      v4[v98] = v168;
      uint64_t v99 = (v98 + 1);
LABEL_387:
      uint64_t v169 = v99;
      double v170 = v2[v169];
      double v171 = v3[v169];
      double v172 = v170 - v171;
      if (v170 - v171 < 0.0) {
        double v172 = -(v170 - v171);
      }
      if (v170 < 0.0) {
        double v170 = -v170;
      }
      if (v171 < 0.0) {
        double v171 = -v171;
      }
      if (v170 < v171) {
        double v170 = v171;
      }
      if (v170 <= 1.0) {
        double v173 = 1.0e-10;
      }
      else {
        double v173 = v170 * 1.0e-10;
      }
      BOOL v107 = v172 > v173;
      double v174 = 0.0;
      if (!v107) {
        double v174 = 1.0;
      }
      v4[v99] = v174;
      uint64_t v100 = (v99 + 1);
LABEL_401:
      uint64_t v175 = v100;
      double v176 = v2[v175];
      double v177 = v3[v175];
      double v178 = v176 - v177;
      if (v176 - v177 < 0.0) {
        double v178 = -(v176 - v177);
      }
      if (v176 < 0.0) {
        double v176 = -v176;
      }
      if (v177 < 0.0) {
        double v177 = -v177;
      }
      if (v176 < v177) {
        double v176 = v177;
      }
      if (v176 <= 1.0) {
        double v179 = 1.0e-10;
      }
      else {
        double v179 = v176 * 1.0e-10;
      }
      BOOL v107 = v178 > v179;
      double v180 = 0.0;
      if (!v107) {
        double v180 = 1.0;
      }
      v4[v100] = v180;
      uint64_t v101 = (v100 + 1);
LABEL_415:
      uint64_t v181 = v101;
      double v182 = v2[v181];
      double v183 = v3[v181];
      double v184 = v182 - v183;
      if (v182 - v183 < 0.0) {
        double v184 = -(v182 - v183);
      }
      if (v182 < 0.0) {
        double v182 = -v182;
      }
      if (v183 < 0.0) {
        double v183 = -v183;
      }
      if (v182 < v183) {
        double v182 = v183;
      }
      if (v182 <= 1.0) {
        double v185 = 1.0e-10;
      }
      else {
        double v185 = v182 * 1.0e-10;
      }
      BOOL v107 = v184 > v185;
      double v186 = 0.0;
      if (!v107) {
        double v186 = 1.0;
      }
      v4[v101] = v186;
      uint64_t v102 = (v101 + 1);
LABEL_429:
      double v187 = v2[v102];
      double v188 = v3[v102];
      double v189 = v187 - v188;
      if (v187 - v188 < 0.0) {
        double v189 = -(v187 - v188);
      }
      if (v187 < 0.0) {
        double v187 = -v187;
      }
      if (v188 < 0.0) {
        double v188 = -v188;
      }
      if (v187 < v188) {
        double v187 = v188;
      }
      if (v187 <= 1.0) {
        double v190 = 1.0e-10;
      }
      else {
        double v190 = v187 * 1.0e-10;
      }
      BOOL v107 = v189 > v190;
      double v191 = 0.0;
      if (!v107) {
        double v191 = 1.0;
      }
      v4[v102] = v191;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v97, v98, v99, v100, v101, v102)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v97, v98, v99, v100, v101, v102)+ 16);
}

uint64_t sub_133668()
{
  return 138;
}

uint64_t sub_133670(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t sub_133678(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t sub_133680(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 96) + 8);
}

uint64_t sub_13368C(uint64_t a1)
{
  return a1 + 96;
}

uint64_t sub_133694(uint64_t a1)
{
  return a1 + 96;
}

uint64_t sub_13369C(uint64_t a1)
{
  return sub_13370C(a1 - 48);
}

void sub_1336A4(uint64_t a1)
{
  sub_13370C(a1 - 48);

  operator delete();
}

uint64_t sub_1336E0(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 48) + 8);
}

uint64_t sub_1336EC(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_1336F4(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_1336FC(uint64_t a1)
{
  return a1 + 48;
}

uint64_t sub_133704(uint64_t a1)
{
  return a1 + 48;
}

uint64_t sub_13370C(uint64_t a1)
{
  *(void *)a1 = off_2405760;
  *(void *)(a1 + 48) = off_24057C0;
  if (*(void *)(a1 + 72)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 80);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 96);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 96) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 && *(unsigned char *)(a1 + 40))
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }
  return a1;
}

void sub_1338A0(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_2405848;
  *(void *)(a1 + 48) = off_24058A8;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(unsigned char *)(a1 + 88) = 0;
  operator new();
}

void sub_1341C4(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_134284(uint64_t a1)
{
  sub_134990(a1);

  operator delete();
}

double sub_1342BC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 88)) {
    return NAN;
  }
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  uint64_t v2 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
                  + 16);
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 64) + 64))(*(void *)(a1 + 64))
                  + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v5) << 32;
  if (v7 >= 1)
  {
    BOOL v8 = (double *)((char *)v4 + (v7 >> 29));
    do
    {
      if (*v3 == 0.0 || *v2 == 0.0) {
        double v10 = 0.0;
      }
      else {
        double v10 = 1.0;
      }
      *uint64_t v4 = v10;
      if (v3[1] == 0.0 || v2[1] == 0.0) {
        double v12 = 0.0;
      }
      else {
        double v12 = 1.0;
      }
      v4[1] = v12;
      if (v3[2] == 0.0 || v2[2] == 0.0) {
        double v14 = 0.0;
      }
      else {
        double v14 = 1.0;
      }
      v4[2] = v14;
      if (v3[3] == 0.0 || v2[3] == 0.0) {
        double v16 = 0.0;
      }
      else {
        double v16 = 1.0;
      }
      v4[3] = v16;
      if (v3[4] == 0.0 || v2[4] == 0.0) {
        double v18 = 0.0;
      }
      else {
        double v18 = 1.0;
      }
      v4[4] = v18;
      if (v3[5] == 0.0 || v2[5] == 0.0) {
        double v20 = 0.0;
      }
      else {
        double v20 = 1.0;
      }
      v4[5] = v20;
      if (v3[6] == 0.0 || v2[6] == 0.0) {
        double v22 = 0.0;
      }
      else {
        double v22 = 1.0;
      }
      v4[6] = v22;
      if (v3[7] == 0.0 || v2[7] == 0.0) {
        double v24 = 0.0;
      }
      else {
        double v24 = 1.0;
      }
      v4[7] = v24;
      if (v3[8] == 0.0 || v2[8] == 0.0) {
        double v26 = 0.0;
      }
      else {
        double v26 = 1.0;
      }
      v4[8] = v26;
      if (v3[9] == 0.0 || v2[9] == 0.0) {
        double v28 = 0.0;
      }
      else {
        double v28 = 1.0;
      }
      v4[9] = v28;
      if (v3[10] == 0.0 || v2[10] == 0.0) {
        double v30 = 0.0;
      }
      else {
        double v30 = 1.0;
      }
      v4[10] = v30;
      if (v3[11] == 0.0 || v2[11] == 0.0) {
        double v32 = 0.0;
      }
      else {
        double v32 = 1.0;
      }
      v4[11] = v32;
      if (v3[12] == 0.0 || v2[12] == 0.0) {
        double v34 = 0.0;
      }
      else {
        double v34 = 1.0;
      }
      v4[12] = v34;
      if (v3[13] == 0.0 || v2[13] == 0.0) {
        double v36 = 0.0;
      }
      else {
        double v36 = 1.0;
      }
      v4[13] = v36;
      if (v3[14] == 0.0 || v2[14] == 0.0) {
        double v38 = 0.0;
      }
      else {
        double v38 = 1.0;
      }
      v4[14] = v38;
      if (v3[15] == 0.0 || v2[15] == 0.0) {
        double v40 = 0.0;
      }
      else {
        double v40 = 1.0;
      }
      v4[15] = v40;
      v2 += 16;
      v3 += 16;
      v4 += 16;
    }
    while (v4 < v8);
  }
  int v41 = (v5 & 0xF) - 1;
  unsigned int v42 = 0;
  unsigned int v43 = 0;
  unsigned int v44 = 0;
  unsigned int v45 = 0;
  unsigned int v46 = 0;
  unsigned int v47 = 0;
  unsigned int v48 = 0;
  unsigned int v49 = 0;
  unsigned int v50 = 0;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  switch(v41)
  {
    case 0:
      goto LABEL_203;
    case 1:
      goto LABEL_196;
    case 2:
      goto LABEL_189;
    case 3:
      goto LABEL_182;
    case 4:
      goto LABEL_175;
    case 5:
      goto LABEL_168;
    case 6:
      goto LABEL_161;
    case 7:
      goto LABEL_154;
    case 8:
      goto LABEL_147;
    case 9:
      goto LABEL_140;
    case 10:
      goto LABEL_133;
    case 11:
      goto LABEL_126;
    case 12:
      goto LABEL_119;
    case 13:
      goto LABEL_112;
    case 14:
      BOOL v56 = *v3 == 0.0 || *v2 == 0.0;
      double v57 = 1.0;
      if (v56) {
        double v57 = 0.0;
      }
      *uint64_t v4 = v57;
      unsigned int v42 = 1;
LABEL_112:
      BOOL v58 = v3[v42] == 0.0 || v2[v42] == 0.0;
      double v59 = 1.0;
      if (v58) {
        double v59 = 0.0;
      }
      v4[v42] = v59;
      unsigned int v43 = v42 + 1;
LABEL_119:
      BOOL v60 = v3[v43] == 0.0 || v2[v43] == 0.0;
      double v61 = 1.0;
      if (v60) {
        double v61 = 0.0;
      }
      v4[v43] = v61;
      unsigned int v44 = v43 + 1;
LABEL_126:
      BOOL v62 = v3[v44] == 0.0 || v2[v44] == 0.0;
      double v63 = 1.0;
      if (v62) {
        double v63 = 0.0;
      }
      v4[v44] = v63;
      unsigned int v45 = v44 + 1;
LABEL_133:
      BOOL v64 = v3[v45] == 0.0 || v2[v45] == 0.0;
      double v65 = 1.0;
      if (v64) {
        double v65 = 0.0;
      }
      v4[v45] = v65;
      unsigned int v46 = v45 + 1;
LABEL_140:
      BOOL v66 = v3[v46] == 0.0 || v2[v46] == 0.0;
      double v67 = 1.0;
      if (v66) {
        double v67 = 0.0;
      }
      v4[v46] = v67;
      unsigned int v47 = v46 + 1;
LABEL_147:
      BOOL v68 = v3[v47] == 0.0 || v2[v47] == 0.0;
      double v69 = 1.0;
      if (v68) {
        double v69 = 0.0;
      }
      v4[v47] = v69;
      unsigned int v48 = v47 + 1;
LABEL_154:
      BOOL v70 = v3[v48] == 0.0 || v2[v48] == 0.0;
      double v71 = 1.0;
      if (v70) {
        double v71 = 0.0;
      }
      v4[v48] = v71;
      unsigned int v49 = v48 + 1;
LABEL_161:
      BOOL v72 = v3[v49] == 0.0 || v2[v49] == 0.0;
      double v73 = 1.0;
      if (v72) {
        double v73 = 0.0;
      }
      v4[v49] = v73;
      unsigned int v50 = v49 + 1;
LABEL_168:
      BOOL v74 = v3[v50] == 0.0 || v2[v50] == 0.0;
      double v75 = 1.0;
      if (v74) {
        double v75 = 0.0;
      }
      v4[v50] = v75;
      uint64_t v51 = v50 + 1;
LABEL_175:
      BOOL v76 = v3[v51] == 0.0 || v2[v51] == 0.0;
      double v77 = 1.0;
      if (v76) {
        double v77 = 0.0;
      }
      v4[v51] = v77;
      uint64_t v52 = (v51 + 1);
LABEL_182:
      BOOL v78 = v3[v52] == 0.0 || v2[v52] == 0.0;
      double v79 = 1.0;
      if (v78) {
        double v79 = 0.0;
      }
      v4[v52] = v79;
      uint64_t v53 = (v52 + 1);
LABEL_189:
      BOOL v80 = v3[v53] == 0.0 || v2[v53] == 0.0;
      double v81 = 1.0;
      if (v80) {
        double v81 = 0.0;
      }
      v4[v53] = v81;
      uint64_t v54 = (v53 + 1);
LABEL_196:
      BOOL v82 = v3[v54] == 0.0 || v2[v54] == 0.0;
      double v83 = 1.0;
      if (v82) {
        double v83 = 0.0;
      }
      v4[v54] = v83;
      uint64_t v55 = (v54 + 1);
LABEL_203:
      BOOL v84 = v3[v55] == 0.0 || v2[v55] == 0.0;
      double v85 = 1.0;
      if (v84) {
        double v85 = 0.0;
      }
      v4[v55] = v85;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v51, v52, v53, v54, v55)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v51, v52, v53, v54, v55)+ 16);
}

uint64_t sub_1348EC()
{
  return 138;
}

uint64_t sub_1348F4(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t sub_1348FC(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t sub_134904(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 96) + 8);
}

uint64_t sub_134910(uint64_t a1)
{
  return a1 + 96;
}

uint64_t sub_134918(uint64_t a1)
{
  return a1 + 96;
}

uint64_t sub_134920(uint64_t a1)
{
  return sub_134990(a1 - 48);
}

void sub_134928(uint64_t a1)
{
  sub_134990(a1 - 48);

  operator delete();
}

uint64_t sub_134964(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 48) + 8);
}

uint64_t sub_134970(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_134978(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_134980(uint64_t a1)
{
  return a1 + 48;
}

uint64_t sub_134988(uint64_t a1)
{
  return a1 + 48;
}

uint64_t sub_134990(uint64_t a1)
{
  *(void *)a1 = off_2405848;
  *(void *)(a1 + 48) = off_24058A8;
  if (*(void *)(a1 + 72)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 80);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 96);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 96) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 && *(unsigned char *)(a1 + 40))
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }
  return a1;
}

double sub_134B24(double *a1, double *a2)
{
  BOOL v2 = *a2 == 0.0 || *a1 == 0.0;
  double result = 1.0;
  if (v2) {
    return 0.0;
  }
  return result;
}

void sub_134B44(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_2405930;
  *(void *)(a1 + 48) = off_2405990;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(unsigned char *)(a1 + 88) = 0;
  operator new();
}

void sub_135468(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_135528(uint64_t a1)
{
  sub_135C34(a1);

  operator delete();
}

double sub_135560(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 88)) {
    return NAN;
  }
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  BOOL v2 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
                  + 16);
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 64) + 64))(*(void *)(a1 + 64))
                  + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v5) << 32;
  if (v7 >= 1)
  {
    BOOL v8 = (double *)((char *)v4 + (v7 >> 29));
    do
    {
      if (*v3 == 0.0 || *v2 == 0.0) {
        double v10 = 1.0;
      }
      else {
        double v10 = 0.0;
      }
      *uint64_t v4 = v10;
      if (v3[1] == 0.0 || v2[1] == 0.0) {
        double v12 = 1.0;
      }
      else {
        double v12 = 0.0;
      }
      v4[1] = v12;
      if (v3[2] == 0.0 || v2[2] == 0.0) {
        double v14 = 1.0;
      }
      else {
        double v14 = 0.0;
      }
      v4[2] = v14;
      if (v3[3] == 0.0 || v2[3] == 0.0) {
        double v16 = 1.0;
      }
      else {
        double v16 = 0.0;
      }
      v4[3] = v16;
      if (v3[4] == 0.0 || v2[4] == 0.0) {
        double v18 = 1.0;
      }
      else {
        double v18 = 0.0;
      }
      v4[4] = v18;
      if (v3[5] == 0.0 || v2[5] == 0.0) {
        double v20 = 1.0;
      }
      else {
        double v20 = 0.0;
      }
      v4[5] = v20;
      if (v3[6] == 0.0 || v2[6] == 0.0) {
        double v22 = 1.0;
      }
      else {
        double v22 = 0.0;
      }
      v4[6] = v22;
      if (v3[7] == 0.0 || v2[7] == 0.0) {
        double v24 = 1.0;
      }
      else {
        double v24 = 0.0;
      }
      v4[7] = v24;
      if (v3[8] == 0.0 || v2[8] == 0.0) {
        double v26 = 1.0;
      }
      else {
        double v26 = 0.0;
      }
      v4[8] = v26;
      if (v3[9] == 0.0 || v2[9] == 0.0) {
        double v28 = 1.0;
      }
      else {
        double v28 = 0.0;
      }
      v4[9] = v28;
      if (v3[10] == 0.0 || v2[10] == 0.0) {
        double v30 = 1.0;
      }
      else {
        double v30 = 0.0;
      }
      v4[10] = v30;
      if (v3[11] == 0.0 || v2[11] == 0.0) {
        double v32 = 1.0;
      }
      else {
        double v32 = 0.0;
      }
      v4[11] = v32;
      if (v3[12] == 0.0 || v2[12] == 0.0) {
        double v34 = 1.0;
      }
      else {
        double v34 = 0.0;
      }
      v4[12] = v34;
      if (v3[13] == 0.0 || v2[13] == 0.0) {
        double v36 = 1.0;
      }
      else {
        double v36 = 0.0;
      }
      v4[13] = v36;
      if (v3[14] == 0.0 || v2[14] == 0.0) {
        double v38 = 1.0;
      }
      else {
        double v38 = 0.0;
      }
      v4[14] = v38;
      if (v3[15] == 0.0 || v2[15] == 0.0) {
        double v40 = 1.0;
      }
      else {
        double v40 = 0.0;
      }
      v4[15] = v40;
      v2 += 16;
      v3 += 16;
      v4 += 16;
    }
    while (v4 < v8);
  }
  int v41 = (v5 & 0xF) - 1;
  unsigned int v42 = 0;
  unsigned int v43 = 0;
  unsigned int v44 = 0;
  unsigned int v45 = 0;
  unsigned int v46 = 0;
  unsigned int v47 = 0;
  unsigned int v48 = 0;
  unsigned int v49 = 0;
  unsigned int v50 = 0;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  switch(v41)
  {
    case 0:
      goto LABEL_189;
    case 1:
      goto LABEL_183;
    case 2:
      goto LABEL_177;
    case 3:
      goto LABEL_171;
    case 4:
      goto LABEL_165;
    case 5:
      goto LABEL_159;
    case 6:
      goto LABEL_153;
    case 7:
      goto LABEL_147;
    case 8:
      goto LABEL_141;
    case 9:
      goto LABEL_135;
    case 10:
      goto LABEL_129;
    case 11:
      goto LABEL_123;
    case 12:
      goto LABEL_117;
    case 13:
      goto LABEL_111;
    case 14:
      BOOL v56 = *v3 == 0.0 || *v2 == 0.0;
      double v57 = 1.0;
      if (!v56) {
        double v57 = 0.0;
      }
      *uint64_t v4 = v57;
      unsigned int v42 = 1;
LABEL_111:
      BOOL v58 = v3[v42] == 0.0 || v2[v42] == 0.0;
      double v59 = 1.0;
      if (!v58) {
        double v59 = 0.0;
      }
      v4[v42] = v59;
      unsigned int v43 = v42 + 1;
LABEL_117:
      BOOL v60 = v3[v43] == 0.0 || v2[v43] == 0.0;
      double v61 = 1.0;
      if (!v60) {
        double v61 = 0.0;
      }
      v4[v43] = v61;
      unsigned int v44 = v43 + 1;
LABEL_123:
      BOOL v62 = v3[v44] == 0.0 || v2[v44] == 0.0;
      double v63 = 1.0;
      if (!v62) {
        double v63 = 0.0;
      }
      v4[v44] = v63;
      unsigned int v45 = v44 + 1;
LABEL_129:
      BOOL v64 = v3[v45] == 0.0 || v2[v45] == 0.0;
      double v65 = 1.0;
      if (!v64) {
        double v65 = 0.0;
      }
      v4[v45] = v65;
      unsigned int v46 = v45 + 1;
LABEL_135:
      BOOL v66 = v3[v46] == 0.0 || v2[v46] == 0.0;
      double v67 = 1.0;
      if (!v66) {
        double v67 = 0.0;
      }
      v4[v46] = v67;
      unsigned int v47 = v46 + 1;
LABEL_141:
      BOOL v68 = v3[v47] == 0.0 || v2[v47] == 0.0;
      double v69 = 1.0;
      if (!v68) {
        double v69 = 0.0;
      }
      v4[v47] = v69;
      unsigned int v48 = v47 + 1;
LABEL_147:
      BOOL v70 = v3[v48] == 0.0 || v2[v48] == 0.0;
      double v71 = 1.0;
      if (!v70) {
        double v71 = 0.0;
      }
      v4[v48] = v71;
      unsigned int v49 = v48 + 1;
LABEL_153:
      BOOL v72 = v3[v49] == 0.0 || v2[v49] == 0.0;
      double v73 = 1.0;
      if (!v72) {
        double v73 = 0.0;
      }
      v4[v49] = v73;
      unsigned int v50 = v49 + 1;
LABEL_159:
      BOOL v74 = v3[v50] == 0.0 || v2[v50] == 0.0;
      double v75 = 1.0;
      if (!v74) {
        double v75 = 0.0;
      }
      v4[v50] = v75;
      uint64_t v51 = v50 + 1;
LABEL_165:
      BOOL v76 = v3[v51] == 0.0 || v2[v51] == 0.0;
      double v77 = 1.0;
      if (!v76) {
        double v77 = 0.0;
      }
      v4[v51] = v77;
      uint64_t v52 = (v51 + 1);
LABEL_171:
      BOOL v78 = v3[v52] == 0.0 || v2[v52] == 0.0;
      double v79 = 1.0;
      if (!v78) {
        double v79 = 0.0;
      }
      v4[v52] = v79;
      uint64_t v53 = (v52 + 1);
LABEL_177:
      BOOL v80 = v3[v53] == 0.0 || v2[v53] == 0.0;
      double v81 = 1.0;
      if (!v80) {
        double v81 = 0.0;
      }
      v4[v53] = v81;
      uint64_t v54 = (v53 + 1);
LABEL_183:
      BOOL v82 = v3[v54] == 0.0 || v2[v54] == 0.0;
      double v83 = 1.0;
      if (!v82) {
        double v83 = 0.0;
      }
      v4[v54] = v83;
      uint64_t v55 = (v54 + 1);
LABEL_189:
      BOOL v84 = v3[v55] == 0.0 || v2[v55] == 0.0;
      double v85 = 1.0;
      if (!v84) {
        double v85 = 0.0;
      }
      v4[v55] = v85;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v51, v52, v53, v54, v55)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v51, v52, v53, v54, v55)+ 16);
}

uint64_t sub_135B90()
{
  return 138;
}

uint64_t sub_135B98(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t sub_135BA0(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t sub_135BA8(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 96) + 8);
}

uint64_t sub_135BB4(uint64_t a1)
{
  return a1 + 96;
}

uint64_t sub_135BBC(uint64_t a1)
{
  return a1 + 96;
}

uint64_t sub_135BC4(uint64_t a1)
{
  return sub_135C34(a1 - 48);
}

void sub_135BCC(uint64_t a1)
{
  sub_135C34(a1 - 48);

  operator delete();
}

uint64_t sub_135C08(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 48) + 8);
}

uint64_t sub_135C14(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_135C1C(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_135C24(uint64_t a1)
{
  return a1 + 48;
}

uint64_t sub_135C2C(uint64_t a1)
{
  return a1 + 48;
}

uint64_t sub_135C34(uint64_t a1)
{
  *(void *)a1 = off_2405930;
  *(void *)(a1 + 48) = off_2405990;
  if (*(void *)(a1 + 72)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 80);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 96);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 96) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 && *(unsigned char *)(a1 + 40))
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }
  return a1;
}

double sub_135DC8(double *a1, double *a2)
{
  BOOL v2 = *a2 == 0.0 || *a1 == 0.0;
  double result = 1.0;
  if (!v2) {
    return 0.0;
  }
  return result;
}

void sub_135DE8(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_2405A18;
  *(void *)(a1 + 48) = off_2405A78;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(unsigned char *)(a1 + 88) = 0;
  operator new();
}

void sub_13670C(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_1367CC(uint64_t a1)
{
  sub_136ED8(a1);

  operator delete();
}

double sub_136804(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 88)) {
    return NAN;
  }
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  BOOL v2 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
                  + 16);
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 64) + 64))(*(void *)(a1 + 64))
                  + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v5) << 32;
  if (v7 >= 1)
  {
    BOOL v8 = (double *)((char *)v4 + (v7 >> 29));
    do
    {
      if (*v3 == 0.0 && *v2 == 0.0) {
        double v10 = 0.0;
      }
      else {
        double v10 = 1.0;
      }
      *uint64_t v4 = v10;
      if (v3[1] == 0.0 && v2[1] == 0.0) {
        double v12 = 0.0;
      }
      else {
        double v12 = 1.0;
      }
      v4[1] = v12;
      if (v3[2] == 0.0 && v2[2] == 0.0) {
        double v14 = 0.0;
      }
      else {
        double v14 = 1.0;
      }
      v4[2] = v14;
      if (v3[3] == 0.0 && v2[3] == 0.0) {
        double v16 = 0.0;
      }
      else {
        double v16 = 1.0;
      }
      v4[3] = v16;
      if (v3[4] == 0.0 && v2[4] == 0.0) {
        double v18 = 0.0;
      }
      else {
        double v18 = 1.0;
      }
      v4[4] = v18;
      if (v3[5] == 0.0 && v2[5] == 0.0) {
        double v20 = 0.0;
      }
      else {
        double v20 = 1.0;
      }
      v4[5] = v20;
      if (v3[6] == 0.0 && v2[6] == 0.0) {
        double v22 = 0.0;
      }
      else {
        double v22 = 1.0;
      }
      v4[6] = v22;
      if (v3[7] == 0.0 && v2[7] == 0.0) {
        double v24 = 0.0;
      }
      else {
        double v24 = 1.0;
      }
      v4[7] = v24;
      if (v3[8] == 0.0 && v2[8] == 0.0) {
        double v26 = 0.0;
      }
      else {
        double v26 = 1.0;
      }
      v4[8] = v26;
      if (v3[9] == 0.0 && v2[9] == 0.0) {
        double v28 = 0.0;
      }
      else {
        double v28 = 1.0;
      }
      v4[9] = v28;
      if (v3[10] == 0.0 && v2[10] == 0.0) {
        double v30 = 0.0;
      }
      else {
        double v30 = 1.0;
      }
      v4[10] = v30;
      if (v3[11] == 0.0 && v2[11] == 0.0) {
        double v32 = 0.0;
      }
      else {
        double v32 = 1.0;
      }
      v4[11] = v32;
      if (v3[12] == 0.0 && v2[12] == 0.0) {
        double v34 = 0.0;
      }
      else {
        double v34 = 1.0;
      }
      v4[12] = v34;
      if (v3[13] == 0.0 && v2[13] == 0.0) {
        double v36 = 0.0;
      }
      else {
        double v36 = 1.0;
      }
      v4[13] = v36;
      if (v3[14] == 0.0 && v2[14] == 0.0) {
        double v38 = 0.0;
      }
      else {
        double v38 = 1.0;
      }
      v4[14] = v38;
      if (v3[15] == 0.0 && v2[15] == 0.0) {
        double v40 = 0.0;
      }
      else {
        double v40 = 1.0;
      }
      v4[15] = v40;
      v2 += 16;
      v3 += 16;
      v4 += 16;
    }
    while (v4 < v8);
  }
  int v41 = (v5 & 0xF) - 1;
  unsigned int v42 = 0;
  unsigned int v43 = 0;
  unsigned int v44 = 0;
  unsigned int v45 = 0;
  unsigned int v46 = 0;
  unsigned int v47 = 0;
  unsigned int v48 = 0;
  unsigned int v49 = 0;
  unsigned int v50 = 0;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  switch(v41)
  {
    case 0:
      goto LABEL_203;
    case 1:
      goto LABEL_196;
    case 2:
      goto LABEL_189;
    case 3:
      goto LABEL_182;
    case 4:
      goto LABEL_175;
    case 5:
      goto LABEL_168;
    case 6:
      goto LABEL_161;
    case 7:
      goto LABEL_154;
    case 8:
      goto LABEL_147;
    case 9:
      goto LABEL_140;
    case 10:
      goto LABEL_133;
    case 11:
      goto LABEL_126;
    case 12:
      goto LABEL_119;
    case 13:
      goto LABEL_112;
    case 14:
      BOOL v56 = *v3 == 0.0 && *v2 == 0.0;
      double v57 = 1.0;
      if (v56) {
        double v57 = 0.0;
      }
      *uint64_t v4 = v57;
      unsigned int v42 = 1;
LABEL_112:
      BOOL v58 = v3[v42] == 0.0 && v2[v42] == 0.0;
      double v59 = 1.0;
      if (v58) {
        double v59 = 0.0;
      }
      v4[v42] = v59;
      unsigned int v43 = v42 + 1;
LABEL_119:
      BOOL v60 = v3[v43] == 0.0 && v2[v43] == 0.0;
      double v61 = 1.0;
      if (v60) {
        double v61 = 0.0;
      }
      v4[v43] = v61;
      unsigned int v44 = v43 + 1;
LABEL_126:
      BOOL v62 = v3[v44] == 0.0 && v2[v44] == 0.0;
      double v63 = 1.0;
      if (v62) {
        double v63 = 0.0;
      }
      v4[v44] = v63;
      unsigned int v45 = v44 + 1;
LABEL_133:
      BOOL v64 = v3[v45] == 0.0 && v2[v45] == 0.0;
      double v65 = 1.0;
      if (v64) {
        double v65 = 0.0;
      }
      v4[v45] = v65;
      unsigned int v46 = v45 + 1;
LABEL_140:
      BOOL v66 = v3[v46] == 0.0 && v2[v46] == 0.0;
      double v67 = 1.0;
      if (v66) {
        double v67 = 0.0;
      }
      v4[v46] = v67;
      unsigned int v47 = v46 + 1;
LABEL_147:
      BOOL v68 = v3[v47] == 0.0 && v2[v47] == 0.0;
      double v69 = 1.0;
      if (v68) {
        double v69 = 0.0;
      }
      v4[v47] = v69;
      unsigned int v48 = v47 + 1;
LABEL_154:
      BOOL v70 = v3[v48] == 0.0 && v2[v48] == 0.0;
      double v71 = 1.0;
      if (v70) {
        double v71 = 0.0;
      }
      v4[v48] = v71;
      unsigned int v49 = v48 + 1;
LABEL_161:
      BOOL v72 = v3[v49] == 0.0 && v2[v49] == 0.0;
      double v73 = 1.0;
      if (v72) {
        double v73 = 0.0;
      }
      v4[v49] = v73;
      unsigned int v50 = v49 + 1;
LABEL_168:
      BOOL v74 = v3[v50] == 0.0 && v2[v50] == 0.0;
      double v75 = 1.0;
      if (v74) {
        double v75 = 0.0;
      }
      v4[v50] = v75;
      uint64_t v51 = v50 + 1;
LABEL_175:
      BOOL v76 = v3[v51] == 0.0 && v2[v51] == 0.0;
      double v77 = 1.0;
      if (v76) {
        double v77 = 0.0;
      }
      v4[v51] = v77;
      uint64_t v52 = (v51 + 1);
LABEL_182:
      BOOL v78 = v3[v52] == 0.0 && v2[v52] == 0.0;
      double v79 = 1.0;
      if (v78) {
        double v79 = 0.0;
      }
      v4[v52] = v79;
      uint64_t v53 = (v52 + 1);
LABEL_189:
      BOOL v80 = v3[v53] == 0.0 && v2[v53] == 0.0;
      double v81 = 1.0;
      if (v80) {
        double v81 = 0.0;
      }
      v4[v53] = v81;
      uint64_t v54 = (v53 + 1);
LABEL_196:
      BOOL v82 = v3[v54] == 0.0 && v2[v54] == 0.0;
      double v83 = 1.0;
      if (v82) {
        double v83 = 0.0;
      }
      v4[v54] = v83;
      uint64_t v55 = (v54 + 1);
LABEL_203:
      BOOL v84 = v3[v55] == 0.0 && v2[v55] == 0.0;
      double v85 = 1.0;
      if (v84) {
        double v85 = 0.0;
      }
      v4[v55] = v85;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v51, v52, v53, v54, v55)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v51, v52, v53, v54, v55)+ 16);
}

uint64_t sub_136E34()
{
  return 138;
}

uint64_t sub_136E3C(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t sub_136E44(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t sub_136E4C(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 96) + 8);
}

uint64_t sub_136E58(uint64_t a1)
{
  return a1 + 96;
}

uint64_t sub_136E60(uint64_t a1)
{
  return a1 + 96;
}

uint64_t sub_136E68(uint64_t a1)
{
  return sub_136ED8(a1 - 48);
}

void sub_136E70(uint64_t a1)
{
  sub_136ED8(a1 - 48);

  operator delete();
}

uint64_t sub_136EAC(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 48) + 8);
}

uint64_t sub_136EB8(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_136EC0(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_136EC8(uint64_t a1)
{
  return a1 + 48;
}

uint64_t sub_136ED0(uint64_t a1)
{
  return a1 + 48;
}

uint64_t sub_136ED8(uint64_t a1)
{
  *(void *)a1 = off_2405A18;
  *(void *)(a1 + 48) = off_2405A78;
  if (*(void *)(a1 + 72)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 80);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 96);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 96) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 && *(unsigned char *)(a1 + 40))
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }
  return a1;
}

double sub_13706C(double *a1, double *a2)
{
  BOOL v2 = *a2 == 0.0 && *a1 == 0.0;
  double result = 1.0;
  if (v2) {
    return 0.0;
  }
  return result;
}

void sub_13708C(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_2405B00;
  *(void *)(a1 + 48) = off_2405B60;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(unsigned char *)(a1 + 88) = 0;
  operator new();
}

void sub_1379B0(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_137A70(uint64_t a1)
{
  sub_13817C(a1);

  operator delete();
}

double sub_137AA8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 88)) {
    return NAN;
  }
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  BOOL v2 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
                  + 16);
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 64) + 64))(*(void *)(a1 + 64))
                  + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v5) << 32;
  if (v7 >= 1)
  {
    BOOL v8 = (double *)((char *)v4 + (v7 >> 29));
    do
    {
      if (*v3 == 0.0 && *v2 == 0.0) {
        double v10 = 1.0;
      }
      else {
        double v10 = 0.0;
      }
      *uint64_t v4 = v10;
      if (v3[1] == 0.0 && v2[1] == 0.0) {
        double v12 = 1.0;
      }
      else {
        double v12 = 0.0;
      }
      v4[1] = v12;
      if (v3[2] == 0.0 && v2[2] == 0.0) {
        double v14 = 1.0;
      }
      else {
        double v14 = 0.0;
      }
      v4[2] = v14;
      if (v3[3] == 0.0 && v2[3] == 0.0) {
        double v16 = 1.0;
      }
      else {
        double v16 = 0.0;
      }
      v4[3] = v16;
      if (v3[4] == 0.0 && v2[4] == 0.0) {
        double v18 = 1.0;
      }
      else {
        double v18 = 0.0;
      }
      v4[4] = v18;
      if (v3[5] == 0.0 && v2[5] == 0.0) {
        double v20 = 1.0;
      }
      else {
        double v20 = 0.0;
      }
      v4[5] = v20;
      if (v3[6] == 0.0 && v2[6] == 0.0) {
        double v22 = 1.0;
      }
      else {
        double v22 = 0.0;
      }
      v4[6] = v22;
      if (v3[7] == 0.0 && v2[7] == 0.0) {
        double v24 = 1.0;
      }
      else {
        double v24 = 0.0;
      }
      v4[7] = v24;
      if (v3[8] == 0.0 && v2[8] == 0.0) {
        double v26 = 1.0;
      }
      else {
        double v26 = 0.0;
      }
      v4[8] = v26;
      if (v3[9] == 0.0 && v2[9] == 0.0) {
        double v28 = 1.0;
      }
      else {
        double v28 = 0.0;
      }
      v4[9] = v28;
      if (v3[10] == 0.0 && v2[10] == 0.0) {
        double v30 = 1.0;
      }
      else {
        double v30 = 0.0;
      }
      v4[10] = v30;
      if (v3[11] == 0.0 && v2[11] == 0.0) {
        double v32 = 1.0;
      }
      else {
        double v32 = 0.0;
      }
      v4[11] = v32;
      if (v3[12] == 0.0 && v2[12] == 0.0) {
        double v34 = 1.0;
      }
      else {
        double v34 = 0.0;
      }
      v4[12] = v34;
      if (v3[13] == 0.0 && v2[13] == 0.0) {
        double v36 = 1.0;
      }
      else {
        double v36 = 0.0;
      }
      v4[13] = v36;
      if (v3[14] == 0.0 && v2[14] == 0.0) {
        double v38 = 1.0;
      }
      else {
        double v38 = 0.0;
      }
      v4[14] = v38;
      if (v3[15] == 0.0 && v2[15] == 0.0) {
        double v40 = 1.0;
      }
      else {
        double v40 = 0.0;
      }
      v4[15] = v40;
      v2 += 16;
      v3 += 16;
      v4 += 16;
    }
    while (v4 < v8);
  }
  int v41 = (v5 & 0xF) - 1;
  unsigned int v42 = 0;
  unsigned int v43 = 0;
  unsigned int v44 = 0;
  unsigned int v45 = 0;
  unsigned int v46 = 0;
  unsigned int v47 = 0;
  unsigned int v48 = 0;
  unsigned int v49 = 0;
  unsigned int v50 = 0;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  switch(v41)
  {
    case 0:
      goto LABEL_189;
    case 1:
      goto LABEL_183;
    case 2:
      goto LABEL_177;
    case 3:
      goto LABEL_171;
    case 4:
      goto LABEL_165;
    case 5:
      goto LABEL_159;
    case 6:
      goto LABEL_153;
    case 7:
      goto LABEL_147;
    case 8:
      goto LABEL_141;
    case 9:
      goto LABEL_135;
    case 10:
      goto LABEL_129;
    case 11:
      goto LABEL_123;
    case 12:
      goto LABEL_117;
    case 13:
      goto LABEL_111;
    case 14:
      BOOL v56 = *v3 == 0.0 && *v2 == 0.0;
      double v57 = 1.0;
      if (!v56) {
        double v57 = 0.0;
      }
      *uint64_t v4 = v57;
      unsigned int v42 = 1;
LABEL_111:
      BOOL v58 = v3[v42] == 0.0 && v2[v42] == 0.0;
      double v59 = 1.0;
      if (!v58) {
        double v59 = 0.0;
      }
      v4[v42] = v59;
      unsigned int v43 = v42 + 1;
LABEL_117:
      BOOL v60 = v3[v43] == 0.0 && v2[v43] == 0.0;
      double v61 = 1.0;
      if (!v60) {
        double v61 = 0.0;
      }
      v4[v43] = v61;
      unsigned int v44 = v43 + 1;
LABEL_123:
      BOOL v62 = v3[v44] == 0.0 && v2[v44] == 0.0;
      double v63 = 1.0;
      if (!v62) {
        double v63 = 0.0;
      }
      v4[v44] = v63;
      unsigned int v45 = v44 + 1;
LABEL_129:
      BOOL v64 = v3[v45] == 0.0 && v2[v45] == 0.0;
      double v65 = 1.0;
      if (!v64) {
        double v65 = 0.0;
      }
      v4[v45] = v65;
      unsigned int v46 = v45 + 1;
LABEL_135:
      BOOL v66 = v3[v46] == 0.0 && v2[v46] == 0.0;
      double v67 = 1.0;
      if (!v66) {
        double v67 = 0.0;
      }
      v4[v46] = v67;
      unsigned int v47 = v46 + 1;
LABEL_141:
      BOOL v68 = v3[v47] == 0.0 && v2[v47] == 0.0;
      double v69 = 1.0;
      if (!v68) {
        double v69 = 0.0;
      }
      v4[v47] = v69;
      unsigned int v48 = v47 + 1;
LABEL_147:
      BOOL v70 = v3[v48] == 0.0 && v2[v48] == 0.0;
      double v71 = 1.0;
      if (!v70) {
        double v71 = 0.0;
      }
      v4[v48] = v71;
      unsigned int v49 = v48 + 1;
LABEL_153:
      BOOL v72 = v3[v49] == 0.0 && v2[v49] == 0.0;
      double v73 = 1.0;
      if (!v72) {
        double v73 = 0.0;
      }
      v4[v49] = v73;
      unsigned int v50 = v49 + 1;
LABEL_159:
      BOOL v74 = v3[v50] == 0.0 && v2[v50] == 0.0;
      double v75 = 1.0;
      if (!v74) {
        double v75 = 0.0;
      }
      v4[v50] = v75;
      uint64_t v51 = v50 + 1;
LABEL_165:
      BOOL v76 = v3[v51] == 0.0 && v2[v51] == 0.0;
      double v77 = 1.0;
      if (!v76) {
        double v77 = 0.0;
      }
      v4[v51] = v77;
      uint64_t v52 = (v51 + 1);
LABEL_171:
      BOOL v78 = v3[v52] == 0.0 && v2[v52] == 0.0;
      double v79 = 1.0;
      if (!v78) {
        double v79 = 0.0;
      }
      v4[v52] = v79;
      uint64_t v53 = (v52 + 1);
LABEL_177:
      BOOL v80 = v3[v53] == 0.0 && v2[v53] == 0.0;
      double v81 = 1.0;
      if (!v80) {
        double v81 = 0.0;
      }
      v4[v53] = v81;
      uint64_t v54 = (v53 + 1);
LABEL_183:
      BOOL v82 = v3[v54] == 0.0 && v2[v54] == 0.0;
      double v83 = 1.0;
      if (!v82) {
        double v83 = 0.0;
      }
      v4[v54] = v83;
      uint64_t v55 = (v54 + 1);
LABEL_189:
      BOOL v84 = v3[v55] == 0.0 && v2[v55] == 0.0;
      double v85 = 1.0;
      if (!v84) {
        double v85 = 0.0;
      }
      v4[v55] = v85;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v51, v52, v53, v54, v55)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v51, v52, v53, v54, v55)+ 16);
}

uint64_t sub_1380D8()
{
  return 138;
}

uint64_t sub_1380E0(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t sub_1380E8(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t sub_1380F0(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 96) + 8);
}

uint64_t sub_1380FC(uint64_t a1)
{
  return a1 + 96;
}

uint64_t sub_138104(uint64_t a1)
{
  return a1 + 96;
}

uint64_t sub_13810C(uint64_t a1)
{
  return sub_13817C(a1 - 48);
}

void sub_138114(uint64_t a1)
{
  sub_13817C(a1 - 48);

  operator delete();
}

uint64_t sub_138150(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 48) + 8);
}

uint64_t sub_13815C(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_138164(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_13816C(uint64_t a1)
{
  return a1 + 48;
}

uint64_t sub_138174(uint64_t a1)
{
  return a1 + 48;
}

uint64_t sub_13817C(uint64_t a1)
{
  *(void *)a1 = off_2405B00;
  *(void *)(a1 + 48) = off_2405B60;
  if (*(void *)(a1 + 72)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 80);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 96);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 96) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 && *(unsigned char *)(a1 + 40))
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }
  return a1;
}

double sub_138310(double *a1, double *a2)
{
  BOOL v2 = *a2 == 0.0 && *a1 == 0.0;
  double result = 1.0;
  if (!v2) {
    return 0.0;
  }
  return result;
}

void sub_138330(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_2405BE8;
  *(void *)(a1 + 48) = off_2405C48;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(unsigned char *)(a1 + 88) = 0;
  operator new();
}

void sub_138C54(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_138D14(uint64_t a1)
{
  sub_139610(a1);

  operator delete();
}

double sub_138D4C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 88)) {
    return NAN;
  }
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  BOOL v2 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
                  + 16);
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 64) + 64))(*(void *)(a1 + 64))
                  + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v5) << 32;
  if (v7 >= 1)
  {
    BOOL v8 = (double *)((char *)v4 + (v7 >> 29));
    do
    {
      if ((*v2 == 0.0) != (*v3 == 0.0)) {
        double v9 = 1.0;
      }
      else {
        double v9 = 0.0;
      }
      *uint64_t v4 = v9;
      if ((v2[1] == 0.0) != (v3[1] == 0.0)) {
        double v10 = 1.0;
      }
      else {
        double v10 = 0.0;
      }
      v4[1] = v10;
      if ((v2[2] == 0.0) != (v3[2] == 0.0)) {
        double v11 = 1.0;
      }
      else {
        double v11 = 0.0;
      }
      v4[2] = v11;
      if ((v2[3] == 0.0) != (v3[3] == 0.0)) {
        double v12 = 1.0;
      }
      else {
        double v12 = 0.0;
      }
      v4[3] = v12;
      if ((v2[4] == 0.0) != (v3[4] == 0.0)) {
        double v13 = 1.0;
      }
      else {
        double v13 = 0.0;
      }
      v4[4] = v13;
      if ((v2[5] == 0.0) != (v3[5] == 0.0)) {
        double v14 = 1.0;
      }
      else {
        double v14 = 0.0;
      }
      v4[5] = v14;
      if ((v2[6] == 0.0) != (v3[6] == 0.0)) {
        double v15 = 1.0;
      }
      else {
        double v15 = 0.0;
      }
      v4[6] = v15;
      if ((v2[7] == 0.0) != (v3[7] == 0.0)) {
        double v16 = 1.0;
      }
      else {
        double v16 = 0.0;
      }
      v4[7] = v16;
      if ((v2[8] == 0.0) != (v3[8] == 0.0)) {
        double v17 = 1.0;
      }
      else {
        double v17 = 0.0;
      }
      v4[8] = v17;
      if ((v2[9] == 0.0) != (v3[9] == 0.0)) {
        double v18 = 1.0;
      }
      else {
        double v18 = 0.0;
      }
      v4[9] = v18;
      if ((v2[10] == 0.0) != (v3[10] == 0.0)) {
        double v19 = 1.0;
      }
      else {
        double v19 = 0.0;
      }
      v4[10] = v19;
      if ((v2[11] == 0.0) != (v3[11] == 0.0)) {
        double v20 = 1.0;
      }
      else {
        double v20 = 0.0;
      }
      v4[11] = v20;
      if ((v2[12] == 0.0) != (v3[12] == 0.0)) {
        double v21 = 1.0;
      }
      else {
        double v21 = 0.0;
      }
      v4[12] = v21;
      if ((v2[13] == 0.0) != (v3[13] == 0.0)) {
        double v22 = 1.0;
      }
      else {
        double v22 = 0.0;
      }
      v4[13] = v22;
      if ((v2[14] == 0.0) != (v3[14] == 0.0)) {
        double v23 = 1.0;
      }
      else {
        double v23 = 0.0;
      }
      v4[14] = v23;
      if ((v2[15] == 0.0) != (v3[15] == 0.0)) {
        double v24 = 1.0;
      }
      else {
        double v24 = 0.0;
      }
      v4[15] = v24;
      v2 += 16;
      v3 += 16;
      v4 += 16;
    }
    while (v4 < v8);
  }
  int v25 = (v5 & 0xF) - 1;
  unsigned int v26 = 0;
  unsigned int v27 = 0;
  unsigned int v28 = 0;
  unsigned int v29 = 0;
  unsigned int v30 = 0;
  unsigned int v31 = 0;
  unsigned int v32 = 0;
  unsigned int v33 = 0;
  unsigned int v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  switch(v25)
  {
    case 0:
      goto LABEL_99;
    case 1:
      goto LABEL_96;
    case 2:
      goto LABEL_93;
    case 3:
      goto LABEL_90;
    case 4:
      goto LABEL_87;
    case 5:
      goto LABEL_84;
    case 6:
      goto LABEL_81;
    case 7:
      goto LABEL_78;
    case 8:
      goto LABEL_75;
    case 9:
      goto LABEL_72;
    case 10:
      goto LABEL_69;
    case 11:
      goto LABEL_66;
    case 12:
      goto LABEL_63;
    case 13:
      goto LABEL_60;
    case 14:
      double v40 = 0.0;
      if ((*v2 == 0.0) != (*v3 == 0.0)) {
        double v40 = 1.0;
      }
      *uint64_t v4 = v40;
      unsigned int v26 = 1;
LABEL_60:
      double v41 = 0.0;
      if ((v2[v26] == 0.0) != (v3[v26] == 0.0)) {
        double v41 = 1.0;
      }
      v4[v26] = v41;
      unsigned int v27 = v26 + 1;
LABEL_63:
      double v42 = 0.0;
      if ((v2[v27] == 0.0) != (v3[v27] == 0.0)) {
        double v42 = 1.0;
      }
      v4[v27] = v42;
      unsigned int v28 = v27 + 1;
LABEL_66:
      double v43 = 0.0;
      if ((v2[v28] == 0.0) != (v3[v28] == 0.0)) {
        double v43 = 1.0;
      }
      v4[v28] = v43;
      unsigned int v29 = v28 + 1;
LABEL_69:
      double v44 = 0.0;
      if ((v2[v29] == 0.0) != (v3[v29] == 0.0)) {
        double v44 = 1.0;
      }
      v4[v29] = v44;
      unsigned int v30 = v29 + 1;
LABEL_72:
      double v45 = 0.0;
      if ((v2[v30] == 0.0) != (v3[v30] == 0.0)) {
        double v45 = 1.0;
      }
      v4[v30] = v45;
      unsigned int v31 = v30 + 1;
LABEL_75:
      double v46 = 0.0;
      if ((v2[v31] == 0.0) != (v3[v31] == 0.0)) {
        double v46 = 1.0;
      }
      v4[v31] = v46;
      unsigned int v32 = v31 + 1;
LABEL_78:
      double v47 = 0.0;
      if ((v2[v32] == 0.0) != (v3[v32] == 0.0)) {
        double v47 = 1.0;
      }
      v4[v32] = v47;
      unsigned int v33 = v32 + 1;
LABEL_81:
      double v48 = 0.0;
      if ((v2[v33] == 0.0) != (v3[v33] == 0.0)) {
        double v48 = 1.0;
      }
      v4[v33] = v48;
      unsigned int v34 = v33 + 1;
LABEL_84:
      double v49 = 0.0;
      if ((v2[v34] == 0.0) != (v3[v34] == 0.0)) {
        double v49 = 1.0;
      }
      v4[v34] = v49;
      uint64_t v35 = v34 + 1;
LABEL_87:
      double v50 = 0.0;
      if ((v2[v35] == 0.0) != (v3[v35] == 0.0)) {
        double v50 = 1.0;
      }
      v4[v35] = v50;
      uint64_t v36 = (v35 + 1);
LABEL_90:
      double v51 = 0.0;
      if ((v2[v36] == 0.0) != (v3[v36] == 0.0)) {
        double v51 = 1.0;
      }
      v4[v36] = v51;
      uint64_t v37 = (v36 + 1);
LABEL_93:
      double v52 = 0.0;
      if ((v2[v37] == 0.0) != (v3[v37] == 0.0)) {
        double v52 = 1.0;
      }
      v4[v37] = v52;
      uint64_t v38 = (v37 + 1);
LABEL_96:
      double v53 = 0.0;
      if ((v2[v38] == 0.0) != (v3[v38] == 0.0)) {
        double v53 = 1.0;
      }
      v4[v38] = v53;
      uint64_t v39 = (v38 + 1);
LABEL_99:
      double v54 = 0.0;
      if ((v2[v39] == 0.0) != (v3[v39] == 0.0)) {
        double v54 = 1.0;
      }
      v4[v39] = v54;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v35, v36, v37, v38, v39)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v35, v36, v37, v38, v39)+ 16);
}

uint64_t sub_13956C()
{
  return 138;
}

uint64_t sub_139574(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t sub_13957C(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t sub_139584(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 96) + 8);
}

uint64_t sub_139590(uint64_t a1)
{
  return a1 + 96;
}

uint64_t sub_139598(uint64_t a1)
{
  return a1 + 96;
}

uint64_t sub_1395A0(uint64_t a1)
{
  return sub_139610(a1 - 48);
}

void sub_1395A8(uint64_t a1)
{
  sub_139610(a1 - 48);

  operator delete();
}

uint64_t sub_1395E4(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 48) + 8);
}

uint64_t sub_1395F0(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_1395F8(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_139600(uint64_t a1)
{
  return a1 + 48;
}

uint64_t sub_139608(uint64_t a1)
{
  return a1 + 48;
}

uint64_t sub_139610(uint64_t a1)
{
  *(void *)a1 = off_2405BE8;
  *(void *)(a1 + 48) = off_2405C48;
  if (*(void *)(a1 + 72)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 80);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 96);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 96) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 && *(unsigned char *)(a1 + 40))
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }
  return a1;
}

double sub_1397A4(double *a1, double *a2)
{
  double result = 0.0;
  if ((*a1 == 0.0) != (*a2 == 0.0)) {
    return 1.0;
  }
  return result;
}

void sub_1397D4(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_2405CD0;
  *(void *)(a1 + 48) = off_2405D30;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(unsigned char *)(a1 + 88) = 0;
  operator new();
}

void sub_13A0F8(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_13A1B8(uint64_t a1)
{
  sub_13AAB4(a1);

  operator delete();
}

double sub_13A1F0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 88)) {
    return NAN;
  }
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  uint64_t v2 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
                  + 16);
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 64) + 64))(*(void *)(a1 + 64))
                  + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v5) << 32;
  if (v7 >= 1)
  {
    BOOL v8 = (double *)((char *)v4 + (v7 >> 29));
    do
    {
      if ((*v2 != 0.0) != (*v3 != 0.0)) {
        double v9 = 0.0;
      }
      else {
        double v9 = 1.0;
      }
      *uint64_t v4 = v9;
      if ((v2[1] != 0.0) != (v3[1] != 0.0)) {
        double v10 = 0.0;
      }
      else {
        double v10 = 1.0;
      }
      v4[1] = v10;
      if ((v2[2] != 0.0) != (v3[2] != 0.0)) {
        double v11 = 0.0;
      }
      else {
        double v11 = 1.0;
      }
      v4[2] = v11;
      if ((v2[3] != 0.0) != (v3[3] != 0.0)) {
        double v12 = 0.0;
      }
      else {
        double v12 = 1.0;
      }
      v4[3] = v12;
      if ((v2[4] != 0.0) != (v3[4] != 0.0)) {
        double v13 = 0.0;
      }
      else {
        double v13 = 1.0;
      }
      v4[4] = v13;
      if ((v2[5] != 0.0) != (v3[5] != 0.0)) {
        double v14 = 0.0;
      }
      else {
        double v14 = 1.0;
      }
      v4[5] = v14;
      if ((v2[6] != 0.0) != (v3[6] != 0.0)) {
        double v15 = 0.0;
      }
      else {
        double v15 = 1.0;
      }
      v4[6] = v15;
      if ((v2[7] != 0.0) != (v3[7] != 0.0)) {
        double v16 = 0.0;
      }
      else {
        double v16 = 1.0;
      }
      v4[7] = v16;
      if ((v2[8] != 0.0) != (v3[8] != 0.0)) {
        double v17 = 0.0;
      }
      else {
        double v17 = 1.0;
      }
      v4[8] = v17;
      if ((v2[9] != 0.0) != (v3[9] != 0.0)) {
        double v18 = 0.0;
      }
      else {
        double v18 = 1.0;
      }
      v4[9] = v18;
      if ((v2[10] != 0.0) != (v3[10] != 0.0)) {
        double v19 = 0.0;
      }
      else {
        double v19 = 1.0;
      }
      v4[10] = v19;
      if ((v2[11] != 0.0) != (v3[11] != 0.0)) {
        double v20 = 0.0;
      }
      else {
        double v20 = 1.0;
      }
      v4[11] = v20;
      if ((v2[12] != 0.0) != (v3[12] != 0.0)) {
        double v21 = 0.0;
      }
      else {
        double v21 = 1.0;
      }
      v4[12] = v21;
      if ((v2[13] != 0.0) != (v3[13] != 0.0)) {
        double v22 = 0.0;
      }
      else {
        double v22 = 1.0;
      }
      v4[13] = v22;
      if ((v2[14] != 0.0) != (v3[14] != 0.0)) {
        double v23 = 0.0;
      }
      else {
        double v23 = 1.0;
      }
      v4[14] = v23;
      if ((v2[15] != 0.0) != (v3[15] != 0.0)) {
        double v24 = 0.0;
      }
      else {
        double v24 = 1.0;
      }
      v4[15] = v24;
      v2 += 16;
      v3 += 16;
      v4 += 16;
    }
    while (v4 < v8);
  }
  int v25 = (v5 & 0xF) - 1;
  unsigned int v26 = 0;
  unsigned int v27 = 0;
  unsigned int v28 = 0;
  unsigned int v29 = 0;
  unsigned int v30 = 0;
  unsigned int v31 = 0;
  unsigned int v32 = 0;
  unsigned int v33 = 0;
  unsigned int v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  switch(v25)
  {
    case 0:
      goto LABEL_99;
    case 1:
      goto LABEL_96;
    case 2:
      goto LABEL_93;
    case 3:
      goto LABEL_90;
    case 4:
      goto LABEL_87;
    case 5:
      goto LABEL_84;
    case 6:
      goto LABEL_81;
    case 7:
      goto LABEL_78;
    case 8:
      goto LABEL_75;
    case 9:
      goto LABEL_72;
    case 10:
      goto LABEL_69;
    case 11:
      goto LABEL_66;
    case 12:
      goto LABEL_63;
    case 13:
      goto LABEL_60;
    case 14:
      double v40 = 1.0;
      if ((*v2 != 0.0) != (*v3 != 0.0)) {
        double v40 = 0.0;
      }
      *uint64_t v4 = v40;
      unsigned int v26 = 1;
LABEL_60:
      double v41 = 1.0;
      if ((v2[v26] != 0.0) != (v3[v26] != 0.0)) {
        double v41 = 0.0;
      }
      v4[v26] = v41;
      unsigned int v27 = v26 + 1;
LABEL_63:
      double v42 = 1.0;
      if ((v2[v27] != 0.0) != (v3[v27] != 0.0)) {
        double v42 = 0.0;
      }
      v4[v27] = v42;
      unsigned int v28 = v27 + 1;
LABEL_66:
      double v43 = 1.0;
      if ((v2[v28] != 0.0) != (v3[v28] != 0.0)) {
        double v43 = 0.0;
      }
      v4[v28] = v43;
      unsigned int v29 = v28 + 1;
LABEL_69:
      double v44 = 1.0;
      if ((v2[v29] != 0.0) != (v3[v29] != 0.0)) {
        double v44 = 0.0;
      }
      v4[v29] = v44;
      unsigned int v30 = v29 + 1;
LABEL_72:
      double v45 = 1.0;
      if ((v2[v30] != 0.0) != (v3[v30] != 0.0)) {
        double v45 = 0.0;
      }
      v4[v30] = v45;
      unsigned int v31 = v30 + 1;
LABEL_75:
      double v46 = 1.0;
      if ((v2[v31] != 0.0) != (v3[v31] != 0.0)) {
        double v46 = 0.0;
      }
      v4[v31] = v46;
      unsigned int v32 = v31 + 1;
LABEL_78:
      double v47 = 1.0;
      if ((v2[v32] != 0.0) != (v3[v32] != 0.0)) {
        double v47 = 0.0;
      }
      v4[v32] = v47;
      unsigned int v33 = v32 + 1;
LABEL_81:
      double v48 = 1.0;
      if ((v2[v33] != 0.0) != (v3[v33] != 0.0)) {
        double v48 = 0.0;
      }
      v4[v33] = v48;
      unsigned int v34 = v33 + 1;
LABEL_84:
      double v49 = 1.0;
      if ((v2[v34] != 0.0) != (v3[v34] != 0.0)) {
        double v49 = 0.0;
      }
      v4[v34] = v49;
      uint64_t v35 = v34 + 1;
LABEL_87:
      double v50 = 1.0;
      if ((v2[v35] != 0.0) != (v3[v35] != 0.0)) {
        double v50 = 0.0;
      }
      v4[v35] = v50;
      uint64_t v36 = (v35 + 1);
LABEL_90:
      double v51 = 1.0;
      if ((v2[v36] != 0.0) != (v3[v36] != 0.0)) {
        double v51 = 0.0;
      }
      v4[v36] = v51;
      uint64_t v37 = (v36 + 1);
LABEL_93:
      double v52 = 1.0;
      if ((v2[v37] != 0.0) != (v3[v37] != 0.0)) {
        double v52 = 0.0;
      }
      v4[v37] = v52;
      uint64_t v38 = (v37 + 1);
LABEL_96:
      double v53 = 1.0;
      if ((v2[v38] != 0.0) != (v3[v38] != 0.0)) {
        double v53 = 0.0;
      }
      v4[v38] = v53;
      uint64_t v39 = (v38 + 1);
LABEL_99:
      double v54 = 1.0;
      if ((v2[v39] != 0.0) != (v3[v39] != 0.0)) {
        double v54 = 0.0;
      }
      v4[v39] = v54;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v35, v36, v37, v38, v39)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v35, v36, v37, v38, v39)+ 16);
}

uint64_t sub_13AA10()
{
  return 138;
}

uint64_t sub_13AA18(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t sub_13AA20(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t sub_13AA28(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 96) + 8);
}

uint64_t sub_13AA34(uint64_t a1)
{
  return a1 + 96;
}

uint64_t sub_13AA3C(uint64_t a1)
{
  return a1 + 96;
}

uint64_t sub_13AA44(uint64_t a1)
{
  return sub_13AAB4(a1 - 48);
}

void sub_13AA4C(uint64_t a1)
{
  sub_13AAB4(a1 - 48);

  operator delete();
}

uint64_t sub_13AA88(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 48) + 8);
}

uint64_t sub_13AA94(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_13AA9C(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_13AAA4(uint64_t a1)
{
  return a1 + 48;
}

uint64_t sub_13AAAC(uint64_t a1)
{
  return a1 + 48;
}

uint64_t sub_13AAB4(uint64_t a1)
{
  *(void *)a1 = off_2405CD0;
  *(void *)(a1 + 48) = off_2405D30;
  if (*(void *)(a1 + 72)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 80);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 96);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 96) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 && *(unsigned char *)(a1 + 40))
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }
  return a1;
}

double sub_13AC48(double *a1, double *a2)
{
  double result = 1.0;
  if ((*a1 != 0.0) != (*a2 != 0.0)) {
    return 0.0;
  }
  return result;
}

void sub_13AC78(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_2405DB8;
  *(void *)(a1 + 48) = off_2405E18;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  operator new();
}

void sub_13B368(_Unwind_Exception *a1)
{
  sub_E26D8((uint64_t *)(v1 + 80));
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_13B434(uint64_t a1)
{
  sub_13BA8C(a1);

  operator delete();
}

double sub_13B46C(uint64_t a1)
{
  if (!*(void *)(a1 + 56)) {
    return NAN;
  }
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  double v2 = (*(double (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
                  + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v5) << 32;
  if (v7 >= 1)
  {
    BOOL v8 = (double *)((char *)v3 + (v7 >> 29));
    do
    {
      if (*v3 >= v2) {
        double v9 = 0.0;
      }
      else {
        double v9 = 1.0;
      }
      *uint64_t v4 = v9;
      if (v3[1] >= v2) {
        double v10 = 0.0;
      }
      else {
        double v10 = 1.0;
      }
      v4[1] = v10;
      if (v3[2] >= v2) {
        double v11 = 0.0;
      }
      else {
        double v11 = 1.0;
      }
      v4[2] = v11;
      if (v3[3] >= v2) {
        double v12 = 0.0;
      }
      else {
        double v12 = 1.0;
      }
      v4[3] = v12;
      if (v3[4] >= v2) {
        double v13 = 0.0;
      }
      else {
        double v13 = 1.0;
      }
      v4[4] = v13;
      if (v3[5] >= v2) {
        double v14 = 0.0;
      }
      else {
        double v14 = 1.0;
      }
      v4[5] = v14;
      if (v3[6] >= v2) {
        double v15 = 0.0;
      }
      else {
        double v15 = 1.0;
      }
      v4[6] = v15;
      if (v3[7] >= v2) {
        double v16 = 0.0;
      }
      else {
        double v16 = 1.0;
      }
      v4[7] = v16;
      if (v3[8] >= v2) {
        double v17 = 0.0;
      }
      else {
        double v17 = 1.0;
      }
      v4[8] = v17;
      if (v3[9] >= v2) {
        double v18 = 0.0;
      }
      else {
        double v18 = 1.0;
      }
      v4[9] = v18;
      if (v3[10] >= v2) {
        double v19 = 0.0;
      }
      else {
        double v19 = 1.0;
      }
      v4[10] = v19;
      if (v3[11] >= v2) {
        double v20 = 0.0;
      }
      else {
        double v20 = 1.0;
      }
      v4[11] = v20;
      if (v3[12] >= v2) {
        double v21 = 0.0;
      }
      else {
        double v21 = 1.0;
      }
      v4[12] = v21;
      if (v3[13] >= v2) {
        double v22 = 0.0;
      }
      else {
        double v22 = 1.0;
      }
      v4[13] = v22;
      if (v3[14] >= v2) {
        double v23 = 0.0;
      }
      else {
        double v23 = 1.0;
      }
      v4[14] = v23;
      if (v3[15] >= v2) {
        double v24 = 0.0;
      }
      else {
        double v24 = 1.0;
      }
      v4[15] = v24;
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v8);
  }
  int v25 = (v5 & 0xF) - 1;
  unsigned int v26 = 0;
  unsigned int v27 = 0;
  unsigned int v28 = 0;
  unsigned int v29 = 0;
  unsigned int v30 = 0;
  unsigned int v31 = 0;
  unsigned int v32 = 0;
  unsigned int v33 = 0;
  unsigned int v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  switch(v25)
  {
    case 0:
      goto LABEL_99;
    case 1:
      goto LABEL_96;
    case 2:
      goto LABEL_93;
    case 3:
      goto LABEL_90;
    case 4:
      goto LABEL_87;
    case 5:
      goto LABEL_84;
    case 6:
      goto LABEL_81;
    case 7:
      goto LABEL_78;
    case 8:
      goto LABEL_75;
    case 9:
      goto LABEL_72;
    case 10:
      goto LABEL_69;
    case 11:
      goto LABEL_66;
    case 12:
      goto LABEL_63;
    case 13:
      goto LABEL_60;
    case 14:
      double v40 = 0.0;
      if (*v3 < v2) {
        double v40 = 1.0;
      }
      *uint64_t v4 = v40;
      unsigned int v26 = 1;
LABEL_60:
      double v41 = 0.0;
      if (v3[v26] < v2) {
        double v41 = 1.0;
      }
      v4[v26] = v41;
      unsigned int v27 = v26 + 1;
LABEL_63:
      double v42 = 0.0;
      if (v3[v27] < v2) {
        double v42 = 1.0;
      }
      v4[v27] = v42;
      unsigned int v28 = v27 + 1;
LABEL_66:
      double v43 = 0.0;
      if (v3[v28] < v2) {
        double v43 = 1.0;
      }
      v4[v28] = v43;
      unsigned int v29 = v28 + 1;
LABEL_69:
      double v44 = 0.0;
      if (v3[v29] < v2) {
        double v44 = 1.0;
      }
      v4[v29] = v44;
      unsigned int v30 = v29 + 1;
LABEL_72:
      double v45 = 0.0;
      if (v3[v30] < v2) {
        double v45 = 1.0;
      }
      v4[v30] = v45;
      unsigned int v31 = v30 + 1;
LABEL_75:
      double v46 = 0.0;
      if (v3[v31] < v2) {
        double v46 = 1.0;
      }
      v4[v31] = v46;
      unsigned int v32 = v31 + 1;
LABEL_78:
      double v47 = 0.0;
      if (v3[v32] < v2) {
        double v47 = 1.0;
      }
      v4[v32] = v47;
      unsigned int v33 = v32 + 1;
LABEL_81:
      double v48 = 0.0;
      if (v3[v33] < v2) {
        double v48 = 1.0;
      }
      v4[v33] = v48;
      unsigned int v34 = v33 + 1;
LABEL_84:
      double v49 = 0.0;
      if (v3[v34] < v2) {
        double v49 = 1.0;
      }
      v4[v34] = v49;
      uint64_t v35 = v34 + 1;
LABEL_87:
      double v50 = 0.0;
      if (v3[v35] < v2) {
        double v50 = 1.0;
      }
      v4[v35] = v50;
      uint64_t v36 = (v35 + 1);
LABEL_90:
      double v51 = 0.0;
      if (v3[v36] < v2) {
        double v51 = 1.0;
      }
      v4[v36] = v51;
      uint64_t v37 = (v36 + 1);
LABEL_93:
      double v52 = 0.0;
      if (v3[v37] < v2) {
        double v52 = 1.0;
      }
      v4[v37] = v52;
      uint64_t v38 = (v37 + 1);
LABEL_96:
      double v53 = 0.0;
      if (v3[v38] < v2) {
        double v53 = 1.0;
      }
      v4[v38] = v53;
      uint64_t v39 = (v38 + 1);
LABEL_99:
      double v54 = 0.0;
      if (v3[v39] < v2) {
        double v54 = 1.0;
      }
      v4[v39] = v54;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v35, v36, v37, v38, v39)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v35, v36, v37, v38, v39)+ 16);
}

uint64_t sub_13B980()
{
  return 139;
}

uint64_t sub_13B988(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_13B990(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_13B998(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_13B9D8(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_13B9E0(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_13B9E8(uint64_t a1)
{
  return sub_13BA8C(a1 - 48);
}

void sub_13B9F0(uint64_t a1)
{
  sub_13BA8C(a1 - 48);

  operator delete();
}

uint64_t sub_13BA2C(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 72))() + 8);
}

uint64_t sub_13BA6C(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_13BA74(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_13BA7C(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_13BA84(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_13BA8C(uint64_t a1)
{
  *(void *)a1 = off_2405DB8;
  *(void *)(a1 + 48) = off_2405E18;
  if (*(void *)(a1 + 64)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 80);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 80) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 && *(unsigned char *)(a1 + 40))
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }
  return a1;
}

void sub_13BC20(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_2405EA0;
  *(void *)(a1 + 48) = off_2405F00;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  operator new();
}

void sub_13C310(_Unwind_Exception *a1)
{
  sub_E26D8((uint64_t *)(v1 + 80));
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_13C3DC(uint64_t a1)
{
  sub_13CA34(a1);

  operator delete();
}

double sub_13C414(uint64_t a1)
{
  if (!*(void *)(a1 + 56)) {
    return NAN;
  }
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  double v2 = (*(double (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
                  + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v5) << 32;
  if (v7 >= 1)
  {
    BOOL v8 = (double *)((char *)v3 + (v7 >> 29));
    do
    {
      if (*v3 > v2) {
        double v9 = 0.0;
      }
      else {
        double v9 = 1.0;
      }
      *uint64_t v4 = v9;
      if (v3[1] > v2) {
        double v10 = 0.0;
      }
      else {
        double v10 = 1.0;
      }
      v4[1] = v10;
      if (v3[2] > v2) {
        double v11 = 0.0;
      }
      else {
        double v11 = 1.0;
      }
      v4[2] = v11;
      if (v3[3] > v2) {
        double v12 = 0.0;
      }
      else {
        double v12 = 1.0;
      }
      v4[3] = v12;
      if (v3[4] > v2) {
        double v13 = 0.0;
      }
      else {
        double v13 = 1.0;
      }
      v4[4] = v13;
      if (v3[5] > v2) {
        double v14 = 0.0;
      }
      else {
        double v14 = 1.0;
      }
      v4[5] = v14;
      if (v3[6] > v2) {
        double v15 = 0.0;
      }
      else {
        double v15 = 1.0;
      }
      v4[6] = v15;
      if (v3[7] > v2) {
        double v16 = 0.0;
      }
      else {
        double v16 = 1.0;
      }
      v4[7] = v16;
      if (v3[8] > v2) {
        double v17 = 0.0;
      }
      else {
        double v17 = 1.0;
      }
      v4[8] = v17;
      if (v3[9] > v2) {
        double v18 = 0.0;
      }
      else {
        double v18 = 1.0;
      }
      v4[9] = v18;
      if (v3[10] > v2) {
        double v19 = 0.0;
      }
      else {
        double v19 = 1.0;
      }
      v4[10] = v19;
      if (v3[11] > v2) {
        double v20 = 0.0;
      }
      else {
        double v20 = 1.0;
      }
      v4[11] = v20;
      if (v3[12] > v2) {
        double v21 = 0.0;
      }
      else {
        double v21 = 1.0;
      }
      v4[12] = v21;
      if (v3[13] > v2) {
        double v22 = 0.0;
      }
      else {
        double v22 = 1.0;
      }
      v4[13] = v22;
      if (v3[14] > v2) {
        double v23 = 0.0;
      }
      else {
        double v23 = 1.0;
      }
      v4[14] = v23;
      if (v3[15] > v2) {
        double v24 = 0.0;
      }
      else {
        double v24 = 1.0;
      }
      v4[15] = v24;
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v8);
  }
  int v25 = (v5 & 0xF) - 1;
  unsigned int v26 = 0;
  unsigned int v27 = 0;
  unsigned int v28 = 0;
  unsigned int v29 = 0;
  unsigned int v30 = 0;
  unsigned int v31 = 0;
  unsigned int v32 = 0;
  unsigned int v33 = 0;
  unsigned int v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  switch(v25)
  {
    case 0:
      goto LABEL_99;
    case 1:
      goto LABEL_96;
    case 2:
      goto LABEL_93;
    case 3:
      goto LABEL_90;
    case 4:
      goto LABEL_87;
    case 5:
      goto LABEL_84;
    case 6:
      goto LABEL_81;
    case 7:
      goto LABEL_78;
    case 8:
      goto LABEL_75;
    case 9:
      goto LABEL_72;
    case 10:
      goto LABEL_69;
    case 11:
      goto LABEL_66;
    case 12:
      goto LABEL_63;
    case 13:
      goto LABEL_60;
    case 14:
      double v40 = 0.0;
      if (*v3 <= v2) {
        double v40 = 1.0;
      }
      *uint64_t v4 = v40;
      unsigned int v26 = 1;
LABEL_60:
      double v41 = 0.0;
      if (v3[v26] <= v2) {
        double v41 = 1.0;
      }
      v4[v26] = v41;
      unsigned int v27 = v26 + 1;
LABEL_63:
      double v42 = 0.0;
      if (v3[v27] <= v2) {
        double v42 = 1.0;
      }
      v4[v27] = v42;
      unsigned int v28 = v27 + 1;
LABEL_66:
      double v43 = 0.0;
      if (v3[v28] <= v2) {
        double v43 = 1.0;
      }
      v4[v28] = v43;
      unsigned int v29 = v28 + 1;
LABEL_69:
      double v44 = 0.0;
      if (v3[v29] <= v2) {
        double v44 = 1.0;
      }
      v4[v29] = v44;
      unsigned int v30 = v29 + 1;
LABEL_72:
      double v45 = 0.0;
      if (v3[v30] <= v2) {
        double v45 = 1.0;
      }
      v4[v30] = v45;
      unsigned int v31 = v30 + 1;
LABEL_75:
      double v46 = 0.0;
      if (v3[v31] <= v2) {
        double v46 = 1.0;
      }
      v4[v31] = v46;
      unsigned int v32 = v31 + 1;
LABEL_78:
      double v47 = 0.0;
      if (v3[v32] <= v2) {
        double v47 = 1.0;
      }
      v4[v32] = v47;
      unsigned int v33 = v32 + 1;
LABEL_81:
      double v48 = 0.0;
      if (v3[v33] <= v2) {
        double v48 = 1.0;
      }
      v4[v33] = v48;
      unsigned int v34 = v33 + 1;
LABEL_84:
      double v49 = 0.0;
      if (v3[v34] <= v2) {
        double v49 = 1.0;
      }
      v4[v34] = v49;
      uint64_t v35 = v34 + 1;
LABEL_87:
      double v50 = 0.0;
      if (v3[v35] <= v2) {
        double v50 = 1.0;
      }
      v4[v35] = v50;
      uint64_t v36 = (v35 + 1);
LABEL_90:
      double v51 = 0.0;
      if (v3[v36] <= v2) {
        double v51 = 1.0;
      }
      v4[v36] = v51;
      uint64_t v37 = (v36 + 1);
LABEL_93:
      double v52 = 0.0;
      if (v3[v37] <= v2) {
        double v52 = 1.0;
      }
      v4[v37] = v52;
      uint64_t v38 = (v37 + 1);
LABEL_96:
      double v53 = 0.0;
      if (v3[v38] <= v2) {
        double v53 = 1.0;
      }
      v4[v38] = v53;
      uint64_t v39 = (v38 + 1);
LABEL_99:
      double v54 = 0.0;
      if (v3[v39] <= v2) {
        double v54 = 1.0;
      }
      v4[v39] = v54;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v35, v36, v37, v38, v39)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v35, v36, v37, v38, v39)+ 16);
}

uint64_t sub_13C928()
{
  return 139;
}

uint64_t sub_13C930(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_13C938(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_13C940(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_13C980(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_13C988(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_13C990(uint64_t a1)
{
  return sub_13CA34(a1 - 48);
}

void sub_13C998(uint64_t a1)
{
  sub_13CA34(a1 - 48);

  operator delete();
}

uint64_t sub_13C9D4(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 72))() + 8);
}

uint64_t sub_13CA14(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_13CA1C(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_13CA24(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_13CA2C(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_13CA34(uint64_t a1)
{
  *(void *)a1 = off_2405EA0;
  *(void *)(a1 + 48) = off_2405F00;
  if (*(void *)(a1 + 64)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 80);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 80) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 && *(unsigned char *)(a1 + 40))
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }
  return a1;
}

void sub_13CBC8(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_2405F88;
  *(void *)(a1 + 48) = off_2405FE8;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  operator new();
}

void sub_13D2B8(_Unwind_Exception *a1)
{
  sub_E26D8((uint64_t *)(v1 + 80));
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_13D384(uint64_t a1)
{
  sub_13D9DC(a1);

  operator delete();
}

double sub_13D3BC(uint64_t a1)
{
  if (!*(void *)(a1 + 56)) {
    return NAN;
  }
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  double v2 = (*(double (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
                  + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v5) << 32;
  if (v7 >= 1)
  {
    BOOL v8 = (double *)((char *)v3 + (v7 >> 29));
    do
    {
      if (*v3 <= v2) {
        double v9 = 0.0;
      }
      else {
        double v9 = 1.0;
      }
      *uint64_t v4 = v9;
      if (v3[1] <= v2) {
        double v10 = 0.0;
      }
      else {
        double v10 = 1.0;
      }
      v4[1] = v10;
      if (v3[2] <= v2) {
        double v11 = 0.0;
      }
      else {
        double v11 = 1.0;
      }
      v4[2] = v11;
      if (v3[3] <= v2) {
        double v12 = 0.0;
      }
      else {
        double v12 = 1.0;
      }
      v4[3] = v12;
      if (v3[4] <= v2) {
        double v13 = 0.0;
      }
      else {
        double v13 = 1.0;
      }
      v4[4] = v13;
      if (v3[5] <= v2) {
        double v14 = 0.0;
      }
      else {
        double v14 = 1.0;
      }
      v4[5] = v14;
      if (v3[6] <= v2) {
        double v15 = 0.0;
      }
      else {
        double v15 = 1.0;
      }
      v4[6] = v15;
      if (v3[7] <= v2) {
        double v16 = 0.0;
      }
      else {
        double v16 = 1.0;
      }
      v4[7] = v16;
      if (v3[8] <= v2) {
        double v17 = 0.0;
      }
      else {
        double v17 = 1.0;
      }
      v4[8] = v17;
      if (v3[9] <= v2) {
        double v18 = 0.0;
      }
      else {
        double v18 = 1.0;
      }
      v4[9] = v18;
      if (v3[10] <= v2) {
        double v19 = 0.0;
      }
      else {
        double v19 = 1.0;
      }
      v4[10] = v19;
      if (v3[11] <= v2) {
        double v20 = 0.0;
      }
      else {
        double v20 = 1.0;
      }
      v4[11] = v20;
      if (v3[12] <= v2) {
        double v21 = 0.0;
      }
      else {
        double v21 = 1.0;
      }
      v4[12] = v21;
      if (v3[13] <= v2) {
        double v22 = 0.0;
      }
      else {
        double v22 = 1.0;
      }
      v4[13] = v22;
      if (v3[14] <= v2) {
        double v23 = 0.0;
      }
      else {
        double v23 = 1.0;
      }
      v4[14] = v23;
      if (v3[15] <= v2) {
        double v24 = 0.0;
      }
      else {
        double v24 = 1.0;
      }
      v4[15] = v24;
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v8);
  }
  int v25 = (v5 & 0xF) - 1;
  unsigned int v26 = 0;
  unsigned int v27 = 0;
  unsigned int v28 = 0;
  unsigned int v29 = 0;
  unsigned int v30 = 0;
  unsigned int v31 = 0;
  unsigned int v32 = 0;
  unsigned int v33 = 0;
  unsigned int v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  switch(v25)
  {
    case 0:
      goto LABEL_99;
    case 1:
      goto LABEL_96;
    case 2:
      goto LABEL_93;
    case 3:
      goto LABEL_90;
    case 4:
      goto LABEL_87;
    case 5:
      goto LABEL_84;
    case 6:
      goto LABEL_81;
    case 7:
      goto LABEL_78;
    case 8:
      goto LABEL_75;
    case 9:
      goto LABEL_72;
    case 10:
      goto LABEL_69;
    case 11:
      goto LABEL_66;
    case 12:
      goto LABEL_63;
    case 13:
      goto LABEL_60;
    case 14:
      double v40 = 0.0;
      if (*v3 > v2) {
        double v40 = 1.0;
      }
      *uint64_t v4 = v40;
      unsigned int v26 = 1;
LABEL_60:
      double v41 = 0.0;
      if (v3[v26] > v2) {
        double v41 = 1.0;
      }
      v4[v26] = v41;
      unsigned int v27 = v26 + 1;
LABEL_63:
      double v42 = 0.0;
      if (v3[v27] > v2) {
        double v42 = 1.0;
      }
      v4[v27] = v42;
      unsigned int v28 = v27 + 1;
LABEL_66:
      double v43 = 0.0;
      if (v3[v28] > v2) {
        double v43 = 1.0;
      }
      v4[v28] = v43;
      unsigned int v29 = v28 + 1;
LABEL_69:
      double v44 = 0.0;
      if (v3[v29] > v2) {
        double v44 = 1.0;
      }
      v4[v29] = v44;
      unsigned int v30 = v29 + 1;
LABEL_72:
      double v45 = 0.0;
      if (v3[v30] > v2) {
        double v45 = 1.0;
      }
      v4[v30] = v45;
      unsigned int v31 = v30 + 1;
LABEL_75:
      double v46 = 0.0;
      if (v3[v31] > v2) {
        double v46 = 1.0;
      }
      v4[v31] = v46;
      unsigned int v32 = v31 + 1;
LABEL_78:
      double v47 = 0.0;
      if (v3[v32] > v2) {
        double v47 = 1.0;
      }
      v4[v32] = v47;
      unsigned int v33 = v32 + 1;
LABEL_81:
      double v48 = 0.0;
      if (v3[v33] > v2) {
        double v48 = 1.0;
      }
      v4[v33] = v48;
      unsigned int v34 = v33 + 1;
LABEL_84:
      double v49 = 0.0;
      if (v3[v34] > v2) {
        double v49 = 1.0;
      }
      v4[v34] = v49;
      uint64_t v35 = v34 + 1;
LABEL_87:
      double v50 = 0.0;
      if (v3[v35] > v2) {
        double v50 = 1.0;
      }
      v4[v35] = v50;
      uint64_t v36 = (v35 + 1);
LABEL_90:
      double v51 = 0.0;
      if (v3[v36] > v2) {
        double v51 = 1.0;
      }
      v4[v36] = v51;
      uint64_t v37 = (v36 + 1);
LABEL_93:
      double v52 = 0.0;
      if (v3[v37] > v2) {
        double v52 = 1.0;
      }
      v4[v37] = v52;
      uint64_t v38 = (v37 + 1);
LABEL_96:
      double v53 = 0.0;
      if (v3[v38] > v2) {
        double v53 = 1.0;
      }
      v4[v38] = v53;
      uint64_t v39 = (v38 + 1);
LABEL_99:
      double v54 = 0.0;
      if (v3[v39] > v2) {
        double v54 = 1.0;
      }
      v4[v39] = v54;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v35, v36, v37, v38, v39)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v35, v36, v37, v38, v39)+ 16);
}

uint64_t sub_13D8D0()
{
  return 139;
}

uint64_t sub_13D8D8(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_13D8E0(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_13D8E8(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_13D928(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_13D930(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_13D938(uint64_t a1)
{
  return sub_13D9DC(a1 - 48);
}

void sub_13D940(uint64_t a1)
{
  sub_13D9DC(a1 - 48);

  operator delete();
}

uint64_t sub_13D97C(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 72))() + 8);
}

uint64_t sub_13D9BC(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_13D9C4(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_13D9CC(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_13D9D4(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_13D9DC(uint64_t a1)
{
  *(void *)a1 = off_2405F88;
  *(void *)(a1 + 48) = off_2405FE8;
  if (*(void *)(a1 + 64)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 80);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 80) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 && *(unsigned char *)(a1 + 40))
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }
  return a1;
}

void sub_13DB70(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_2406070;
  *(void *)(a1 + 48) = off_24060D0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  operator new();
}

void sub_13E260(_Unwind_Exception *a1)
{
  sub_E26D8((uint64_t *)(v1 + 80));
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_13E32C(uint64_t a1)
{
  sub_13E984(a1);

  operator delete();
}

double sub_13E364(uint64_t a1)
{
  if (!*(void *)(a1 + 56)) {
    return NAN;
  }
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  double v2 = (*(double (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
                  + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v5) << 32;
  if (v7 >= 1)
  {
    BOOL v8 = (double *)((char *)v3 + (v7 >> 29));
    do
    {
      if (*v3 < v2) {
        double v9 = 0.0;
      }
      else {
        double v9 = 1.0;
      }
      *uint64_t v4 = v9;
      if (v3[1] < v2) {
        double v10 = 0.0;
      }
      else {
        double v10 = 1.0;
      }
      v4[1] = v10;
      if (v3[2] < v2) {
        double v11 = 0.0;
      }
      else {
        double v11 = 1.0;
      }
      v4[2] = v11;
      if (v3[3] < v2) {
        double v12 = 0.0;
      }
      else {
        double v12 = 1.0;
      }
      v4[3] = v12;
      if (v3[4] < v2) {
        double v13 = 0.0;
      }
      else {
        double v13 = 1.0;
      }
      v4[4] = v13;
      if (v3[5] < v2) {
        double v14 = 0.0;
      }
      else {
        double v14 = 1.0;
      }
      v4[5] = v14;
      if (v3[6] < v2) {
        double v15 = 0.0;
      }
      else {
        double v15 = 1.0;
      }
      v4[6] = v15;
      if (v3[7] < v2) {
        double v16 = 0.0;
      }
      else {
        double v16 = 1.0;
      }
      v4[7] = v16;
      if (v3[8] < v2) {
        double v17 = 0.0;
      }
      else {
        double v17 = 1.0;
      }
      v4[8] = v17;
      if (v3[9] < v2) {
        double v18 = 0.0;
      }
      else {
        double v18 = 1.0;
      }
      v4[9] = v18;
      if (v3[10] < v2) {
        double v19 = 0.0;
      }
      else {
        double v19 = 1.0;
      }
      v4[10] = v19;
      if (v3[11] < v2) {
        double v20 = 0.0;
      }
      else {
        double v20 = 1.0;
      }
      v4[11] = v20;
      if (v3[12] < v2) {
        double v21 = 0.0;
      }
      else {
        double v21 = 1.0;
      }
      v4[12] = v21;
      if (v3[13] < v2) {
        double v22 = 0.0;
      }
      else {
        double v22 = 1.0;
      }
      v4[13] = v22;
      if (v3[14] < v2) {
        double v23 = 0.0;
      }
      else {
        double v23 = 1.0;
      }
      v4[14] = v23;
      if (v3[15] < v2) {
        double v24 = 0.0;
      }
      else {
        double v24 = 1.0;
      }
      v4[15] = v24;
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v8);
  }
  int v25 = (v5 & 0xF) - 1;
  unsigned int v26 = 0;
  unsigned int v27 = 0;
  unsigned int v28 = 0;
  unsigned int v29 = 0;
  unsigned int v30 = 0;
  unsigned int v31 = 0;
  unsigned int v32 = 0;
  unsigned int v33 = 0;
  unsigned int v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  switch(v25)
  {
    case 0:
      goto LABEL_99;
    case 1:
      goto LABEL_96;
    case 2:
      goto LABEL_93;
    case 3:
      goto LABEL_90;
    case 4:
      goto LABEL_87;
    case 5:
      goto LABEL_84;
    case 6:
      goto LABEL_81;
    case 7:
      goto LABEL_78;
    case 8:
      goto LABEL_75;
    case 9:
      goto LABEL_72;
    case 10:
      goto LABEL_69;
    case 11:
      goto LABEL_66;
    case 12:
      goto LABEL_63;
    case 13:
      goto LABEL_60;
    case 14:
      double v40 = 0.0;
      if (*v3 >= v2) {
        double v40 = 1.0;
      }
      *uint64_t v4 = v40;
      unsigned int v26 = 1;
LABEL_60:
      double v41 = 0.0;
      if (v3[v26] >= v2) {
        double v41 = 1.0;
      }
      v4[v26] = v41;
      unsigned int v27 = v26 + 1;
LABEL_63:
      double v42 = 0.0;
      if (v3[v27] >= v2) {
        double v42 = 1.0;
      }
      v4[v27] = v42;
      unsigned int v28 = v27 + 1;
LABEL_66:
      double v43 = 0.0;
      if (v3[v28] >= v2) {
        double v43 = 1.0;
      }
      v4[v28] = v43;
      unsigned int v29 = v28 + 1;
LABEL_69:
      double v44 = 0.0;
      if (v3[v29] >= v2) {
        double v44 = 1.0;
      }
      v4[v29] = v44;
      unsigned int v30 = v29 + 1;
LABEL_72:
      double v45 = 0.0;
      if (v3[v30] >= v2) {
        double v45 = 1.0;
      }
      v4[v30] = v45;
      unsigned int v31 = v30 + 1;
LABEL_75:
      double v46 = 0.0;
      if (v3[v31] >= v2) {
        double v46 = 1.0;
      }
      v4[v31] = v46;
      unsigned int v32 = v31 + 1;
LABEL_78:
      double v47 = 0.0;
      if (v3[v32] >= v2) {
        double v47 = 1.0;
      }
      v4[v32] = v47;
      unsigned int v33 = v32 + 1;
LABEL_81:
      double v48 = 0.0;
      if (v3[v33] >= v2) {
        double v48 = 1.0;
      }
      v4[v33] = v48;
      unsigned int v34 = v33 + 1;
LABEL_84:
      double v49 = 0.0;
      if (v3[v34] >= v2) {
        double v49 = 1.0;
      }
      v4[v34] = v49;
      uint64_t v35 = v34 + 1;
LABEL_87:
      double v50 = 0.0;
      if (v3[v35] >= v2) {
        double v50 = 1.0;
      }
      v4[v35] = v50;
      uint64_t v36 = (v35 + 1);
LABEL_90:
      double v51 = 0.0;
      if (v3[v36] >= v2) {
        double v51 = 1.0;
      }
      v4[v36] = v51;
      uint64_t v37 = (v36 + 1);
LABEL_93:
      double v52 = 0.0;
      if (v3[v37] >= v2) {
        double v52 = 1.0;
      }
      v4[v37] = v52;
      uint64_t v38 = (v37 + 1);
LABEL_96:
      double v53 = 0.0;
      if (v3[v38] >= v2) {
        double v53 = 1.0;
      }
      v4[v38] = v53;
      uint64_t v39 = (v38 + 1);
LABEL_99:
      double v54 = 0.0;
      if (v3[v39] >= v2) {
        double v54 = 1.0;
      }
      v4[v39] = v54;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v35, v36, v37, v38, v39)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v35, v36, v37, v38, v39)+ 16);
}

uint64_t sub_13E878()
{
  return 139;
}

uint64_t sub_13E880(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_13E888(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_13E890(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_13E8D0(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_13E8D8(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_13E8E0(uint64_t a1)
{
  return sub_13E984(a1 - 48);
}

void sub_13E8E8(uint64_t a1)
{
  sub_13E984(a1 - 48);

  operator delete();
}

uint64_t sub_13E924(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 72))() + 8);
}

uint64_t sub_13E964(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_13E96C(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_13E974(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_13E97C(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_13E984(uint64_t a1)
{
  *(void *)a1 = off_2406070;
  *(void *)(a1 + 48) = off_24060D0;
  if (*(void *)(a1 + 64)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 80);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 80) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 && *(unsigned char *)(a1 + 40))
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }
  return a1;
}

void sub_13EB18(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_2406158;
  *(void *)(a1 + 48) = off_24061B8;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  operator new();
}

void sub_13F208(_Unwind_Exception *a1)
{
  sub_E26D8((uint64_t *)(v1 + 80));
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_13F2D4(uint64_t a1)
{
  sub_13F92C(a1);

  operator delete();
}

double sub_13F30C(uint64_t a1)
{
  if (!*(void *)(a1 + 56)) {
    return NAN;
  }
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  double v2 = (*(double (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
                  + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v5) << 32;
  if (v7 >= 1)
  {
    BOOL v8 = (double *)((char *)v3 + (v7 >> 29));
    do
    {
      if (*v3 == v2) {
        double v9 = 1.0;
      }
      else {
        double v9 = 0.0;
      }
      *uint64_t v4 = v9;
      if (v3[1] == v2) {
        double v10 = 1.0;
      }
      else {
        double v10 = 0.0;
      }
      v4[1] = v10;
      if (v3[2] == v2) {
        double v11 = 1.0;
      }
      else {
        double v11 = 0.0;
      }
      v4[2] = v11;
      if (v3[3] == v2) {
        double v12 = 1.0;
      }
      else {
        double v12 = 0.0;
      }
      v4[3] = v12;
      if (v3[4] == v2) {
        double v13 = 1.0;
      }
      else {
        double v13 = 0.0;
      }
      v4[4] = v13;
      if (v3[5] == v2) {
        double v14 = 1.0;
      }
      else {
        double v14 = 0.0;
      }
      v4[5] = v14;
      if (v3[6] == v2) {
        double v15 = 1.0;
      }
      else {
        double v15 = 0.0;
      }
      v4[6] = v15;
      if (v3[7] == v2) {
        double v16 = 1.0;
      }
      else {
        double v16 = 0.0;
      }
      v4[7] = v16;
      if (v3[8] == v2) {
        double v17 = 1.0;
      }
      else {
        double v17 = 0.0;
      }
      v4[8] = v17;
      if (v3[9] == v2) {
        double v18 = 1.0;
      }
      else {
        double v18 = 0.0;
      }
      v4[9] = v18;
      if (v3[10] == v2) {
        double v19 = 1.0;
      }
      else {
        double v19 = 0.0;
      }
      v4[10] = v19;
      if (v3[11] == v2) {
        double v20 = 1.0;
      }
      else {
        double v20 = 0.0;
      }
      v4[11] = v20;
      if (v3[12] == v2) {
        double v21 = 1.0;
      }
      else {
        double v21 = 0.0;
      }
      v4[12] = v21;
      if (v3[13] == v2) {
        double v22 = 1.0;
      }
      else {
        double v22 = 0.0;
      }
      v4[13] = v22;
      if (v3[14] == v2) {
        double v23 = 1.0;
      }
      else {
        double v23 = 0.0;
      }
      v4[14] = v23;
      if (v3[15] == v2) {
        double v24 = 1.0;
      }
      else {
        double v24 = 0.0;
      }
      v4[15] = v24;
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v8);
  }
  int v25 = (v5 & 0xF) - 1;
  unsigned int v26 = 0;
  unsigned int v27 = 0;
  unsigned int v28 = 0;
  unsigned int v29 = 0;
  unsigned int v30 = 0;
  unsigned int v31 = 0;
  unsigned int v32 = 0;
  unsigned int v33 = 0;
  unsigned int v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  switch(v25)
  {
    case 0:
      goto LABEL_99;
    case 1:
      goto LABEL_96;
    case 2:
      goto LABEL_93;
    case 3:
      goto LABEL_90;
    case 4:
      goto LABEL_87;
    case 5:
      goto LABEL_84;
    case 6:
      goto LABEL_81;
    case 7:
      goto LABEL_78;
    case 8:
      goto LABEL_75;
    case 9:
      goto LABEL_72;
    case 10:
      goto LABEL_69;
    case 11:
      goto LABEL_66;
    case 12:
      goto LABEL_63;
    case 13:
      goto LABEL_60;
    case 14:
      double v40 = 0.0;
      if (*v3 == v2) {
        double v40 = 1.0;
      }
      *uint64_t v4 = v40;
      unsigned int v26 = 1;
LABEL_60:
      double v41 = 0.0;
      if (v3[v26] == v2) {
        double v41 = 1.0;
      }
      v4[v26] = v41;
      unsigned int v27 = v26 + 1;
LABEL_63:
      double v42 = 0.0;
      if (v3[v27] == v2) {
        double v42 = 1.0;
      }
      v4[v27] = v42;
      unsigned int v28 = v27 + 1;
LABEL_66:
      double v43 = 0.0;
      if (v3[v28] == v2) {
        double v43 = 1.0;
      }
      v4[v28] = v43;
      unsigned int v29 = v28 + 1;
LABEL_69:
      double v44 = 0.0;
      if (v3[v29] == v2) {
        double v44 = 1.0;
      }
      v4[v29] = v44;
      unsigned int v30 = v29 + 1;
LABEL_72:
      double v45 = 0.0;
      if (v3[v30] == v2) {
        double v45 = 1.0;
      }
      v4[v30] = v45;
      unsigned int v31 = v30 + 1;
LABEL_75:
      double v46 = 0.0;
      if (v3[v31] == v2) {
        double v46 = 1.0;
      }
      v4[v31] = v46;
      unsigned int v32 = v31 + 1;
LABEL_78:
      double v47 = 0.0;
      if (v3[v32] == v2) {
        double v47 = 1.0;
      }
      v4[v32] = v47;
      unsigned int v33 = v32 + 1;
LABEL_81:
      double v48 = 0.0;
      if (v3[v33] == v2) {
        double v48 = 1.0;
      }
      v4[v33] = v48;
      unsigned int v34 = v33 + 1;
LABEL_84:
      double v49 = 0.0;
      if (v3[v34] == v2) {
        double v49 = 1.0;
      }
      v4[v34] = v49;
      uint64_t v35 = v34 + 1;
LABEL_87:
      double v50 = 0.0;
      if (v3[v35] == v2) {
        double v50 = 1.0;
      }
      v4[v35] = v50;
      uint64_t v36 = (v35 + 1);
LABEL_90:
      double v51 = 0.0;
      if (v3[v36] == v2) {
        double v51 = 1.0;
      }
      v4[v36] = v51;
      uint64_t v37 = (v36 + 1);
LABEL_93:
      double v52 = 0.0;
      if (v3[v37] == v2) {
        double v52 = 1.0;
      }
      v4[v37] = v52;
      uint64_t v38 = (v37 + 1);
LABEL_96:
      double v53 = 0.0;
      if (v3[v38] == v2) {
        double v53 = 1.0;
      }
      v4[v38] = v53;
      uint64_t v39 = (v38 + 1);
LABEL_99:
      double v54 = 0.0;
      if (v3[v39] == v2) {
        double v54 = 1.0;
      }
      v4[v39] = v54;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v35, v36, v37, v38, v39)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v35, v36, v37, v38, v39)+ 16);
}

uint64_t sub_13F820()
{
  return 139;
}

uint64_t sub_13F828(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_13F830(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_13F838(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_13F878(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_13F880(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_13F888(uint64_t a1)
{
  return sub_13F92C(a1 - 48);
}

void sub_13F890(uint64_t a1)
{
  sub_13F92C(a1 - 48);

  operator delete();
}

uint64_t sub_13F8CC(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 72))() + 8);
}

uint64_t sub_13F90C(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_13F914(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_13F91C(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_13F924(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_13F92C(uint64_t a1)
{
  *(void *)a1 = off_2406158;
  *(void *)(a1 + 48) = off_24061B8;
  if (*(void *)(a1 + 64)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 80);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 80) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 && *(unsigned char *)(a1 + 40))
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }
  return a1;
}

void sub_13FAC0(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_2406240;
  *(void *)(a1 + 48) = off_24062A0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  operator new();
}

void sub_1401B0(_Unwind_Exception *a1)
{
  sub_E26D8((uint64_t *)(v1 + 80));
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_14027C(uint64_t a1)
{
  sub_1408D4(a1);

  operator delete();
}

double sub_1402B4(uint64_t a1)
{
  if (!*(void *)(a1 + 56)) {
    return NAN;
  }
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  double v2 = (*(double (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
                  + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v5) << 32;
  if (v7 >= 1)
  {
    BOOL v8 = (double *)((char *)v3 + (v7 >> 29));
    do
    {
      if (*v3 == v2) {
        double v9 = 0.0;
      }
      else {
        double v9 = 1.0;
      }
      *uint64_t v4 = v9;
      if (v3[1] == v2) {
        double v10 = 0.0;
      }
      else {
        double v10 = 1.0;
      }
      v4[1] = v10;
      if (v3[2] == v2) {
        double v11 = 0.0;
      }
      else {
        double v11 = 1.0;
      }
      v4[2] = v11;
      if (v3[3] == v2) {
        double v12 = 0.0;
      }
      else {
        double v12 = 1.0;
      }
      v4[3] = v12;
      if (v3[4] == v2) {
        double v13 = 0.0;
      }
      else {
        double v13 = 1.0;
      }
      v4[4] = v13;
      if (v3[5] == v2) {
        double v14 = 0.0;
      }
      else {
        double v14 = 1.0;
      }
      v4[5] = v14;
      if (v3[6] == v2) {
        double v15 = 0.0;
      }
      else {
        double v15 = 1.0;
      }
      v4[6] = v15;
      if (v3[7] == v2) {
        double v16 = 0.0;
      }
      else {
        double v16 = 1.0;
      }
      v4[7] = v16;
      if (v3[8] == v2) {
        double v17 = 0.0;
      }
      else {
        double v17 = 1.0;
      }
      v4[8] = v17;
      if (v3[9] == v2) {
        double v18 = 0.0;
      }
      else {
        double v18 = 1.0;
      }
      v4[9] = v18;
      if (v3[10] == v2) {
        double v19 = 0.0;
      }
      else {
        double v19 = 1.0;
      }
      v4[10] = v19;
      if (v3[11] == v2) {
        double v20 = 0.0;
      }
      else {
        double v20 = 1.0;
      }
      v4[11] = v20;
      if (v3[12] == v2) {
        double v21 = 0.0;
      }
      else {
        double v21 = 1.0;
      }
      v4[12] = v21;
      if (v3[13] == v2) {
        double v22 = 0.0;
      }
      else {
        double v22 = 1.0;
      }
      v4[13] = v22;
      if (v3[14] == v2) {
        double v23 = 0.0;
      }
      else {
        double v23 = 1.0;
      }
      v4[14] = v23;
      if (v3[15] == v2) {
        double v24 = 0.0;
      }
      else {
        double v24 = 1.0;
      }
      v4[15] = v24;
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v8);
  }
  int v25 = (v5 & 0xF) - 1;
  unsigned int v26 = 0;
  unsigned int v27 = 0;
  unsigned int v28 = 0;
  unsigned int v29 = 0;
  unsigned int v30 = 0;
  unsigned int v31 = 0;
  unsigned int v32 = 0;
  unsigned int v33 = 0;
  unsigned int v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  switch(v25)
  {
    case 0:
      goto LABEL_99;
    case 1:
      goto LABEL_96;
    case 2:
      goto LABEL_93;
    case 3:
      goto LABEL_90;
    case 4:
      goto LABEL_87;
    case 5:
      goto LABEL_84;
    case 6:
      goto LABEL_81;
    case 7:
      goto LABEL_78;
    case 8:
      goto LABEL_75;
    case 9:
      goto LABEL_72;
    case 10:
      goto LABEL_69;
    case 11:
      goto LABEL_66;
    case 12:
      goto LABEL_63;
    case 13:
      goto LABEL_60;
    case 14:
      double v40 = 0.0;
      if (*v3 != v2) {
        double v40 = 1.0;
      }
      *uint64_t v4 = v40;
      unsigned int v26 = 1;
LABEL_60:
      double v41 = 0.0;
      if (v3[v26] != v2) {
        double v41 = 1.0;
      }
      v4[v26] = v41;
      unsigned int v27 = v26 + 1;
LABEL_63:
      double v42 = 0.0;
      if (v3[v27] != v2) {
        double v42 = 1.0;
      }
      v4[v27] = v42;
      unsigned int v28 = v27 + 1;
LABEL_66:
      double v43 = 0.0;
      if (v3[v28] != v2) {
        double v43 = 1.0;
      }
      v4[v28] = v43;
      unsigned int v29 = v28 + 1;
LABEL_69:
      double v44 = 0.0;
      if (v3[v29] != v2) {
        double v44 = 1.0;
      }
      v4[v29] = v44;
      unsigned int v30 = v29 + 1;
LABEL_72:
      double v45 = 0.0;
      if (v3[v30] != v2) {
        double v45 = 1.0;
      }
      v4[v30] = v45;
      unsigned int v31 = v30 + 1;
LABEL_75:
      double v46 = 0.0;
      if (v3[v31] != v2) {
        double v46 = 1.0;
      }
      v4[v31] = v46;
      unsigned int v32 = v31 + 1;
LABEL_78:
      double v47 = 0.0;
      if (v3[v32] != v2) {
        double v47 = 1.0;
      }
      v4[v32] = v47;
      unsigned int v33 = v32 + 1;
LABEL_81:
      double v48 = 0.0;
      if (v3[v33] != v2) {
        double v48 = 1.0;
      }
      v4[v33] = v48;
      unsigned int v34 = v33 + 1;
LABEL_84:
      double v49 = 0.0;
      if (v3[v34] != v2) {
        double v49 = 1.0;
      }
      v4[v34] = v49;
      uint64_t v35 = v34 + 1;
LABEL_87:
      double v50 = 0.0;
      if (v3[v35] != v2) {
        double v50 = 1.0;
      }
      v4[v35] = v50;
      uint64_t v36 = (v35 + 1);
LABEL_90:
      double v51 = 0.0;
      if (v3[v36] != v2) {
        double v51 = 1.0;
      }
      v4[v36] = v51;
      uint64_t v37 = (v36 + 1);
LABEL_93:
      double v52 = 0.0;
      if (v3[v37] != v2) {
        double v52 = 1.0;
      }
      v4[v37] = v52;
      uint64_t v38 = (v37 + 1);
LABEL_96:
      double v53 = 0.0;
      if (v3[v38] != v2) {
        double v53 = 1.0;
      }
      v4[v38] = v53;
      uint64_t v39 = (v38 + 1);
LABEL_99:
      double v54 = 0.0;
      if (v3[v39] != v2) {
        double v54 = 1.0;
      }
      v4[v39] = v54;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v35, v36, v37, v38, v39)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v35, v36, v37, v38, v39)+ 16);
}

uint64_t sub_1407C8()
{
  return 139;
}

uint64_t sub_1407D0(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_1407D8(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_1407E0(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_140820(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_140828(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_140830(uint64_t a1)
{
  return sub_1408D4(a1 - 48);
}

void sub_140838(uint64_t a1)
{
  sub_1408D4(a1 - 48);

  operator delete();
}

uint64_t sub_140874(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 72))() + 8);
}

uint64_t sub_1408B4(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_1408BC(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_1408C4(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_1408CC(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_1408D4(uint64_t a1)
{
  *(void *)a1 = off_2406240;
  *(void *)(a1 + 48) = off_24062A0;
  if (*(void *)(a1 + 64)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 80);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 80) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 && *(unsigned char *)(a1 + 40))
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }
  return a1;
}

void sub_140A68(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_2406328;
  *(void *)(a1 + 48) = off_2406388;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  operator new();
}

void sub_141158(_Unwind_Exception *a1)
{
  sub_E26D8((uint64_t *)(v1 + 80));
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_141224(uint64_t a1)
{
  sub_141F88(a1);

  operator delete();
}

double sub_14125C(uint64_t a1)
{
  if (!*(void *)(a1 + 56)) {
    return NAN;
  }
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  double v2 = (*(double (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
                  + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  if ((uint64_t)((unint64_t)(v6 + v5) << 32) >= 1)
  {
    BOOL v7 = &v3[v6 + v5];
    double v8 = -v2;
    if (v2 >= 0.0) {
      double v8 = v2;
    }
    do
    {
      double v9 = *v3;
      double v10 = *v3 - v2;
      if (v10 < 0.0) {
        double v10 = -v10;
      }
      if (v9 < 0.0) {
        double v9 = -v9;
      }
      if (v9 < v8) {
        double v9 = v8;
      }
      if (v9 <= 1.0) {
        double v11 = 1.0e-10;
      }
      else {
        double v11 = v9 * 1.0e-10;
      }
      if (v10 > v11) {
        double v12 = 0.0;
      }
      else {
        double v12 = 1.0;
      }
      *uint64_t v4 = v12;
      double v13 = v3[1];
      double v14 = v13 - v2;
      if (v13 - v2 < 0.0) {
        double v14 = -(v13 - v2);
      }
      if (v13 < 0.0) {
        double v13 = -v13;
      }
      if (v13 < v8) {
        double v13 = v8;
      }
      if (v13 <= 1.0) {
        double v15 = 1.0e-10;
      }
      else {
        double v15 = v13 * 1.0e-10;
      }
      if (v14 > v15) {
        double v16 = 0.0;
      }
      else {
        double v16 = 1.0;
      }
      v4[1] = v16;
      double v17 = v3[2];
      double v18 = v17 - v2;
      if (v17 - v2 < 0.0) {
        double v18 = -(v17 - v2);
      }
      if (v17 < 0.0) {
        double v17 = -v17;
      }
      if (v17 < v8) {
        double v17 = v8;
      }
      if (v17 <= 1.0) {
        double v19 = 1.0e-10;
      }
      else {
        double v19 = v17 * 1.0e-10;
      }
      if (v18 > v19) {
        double v20 = 0.0;
      }
      else {
        double v20 = 1.0;
      }
      v4[2] = v20;
      double v21 = v3[3];
      double v22 = v21 - v2;
      if (v21 - v2 < 0.0) {
        double v22 = -(v21 - v2);
      }
      if (v21 < 0.0) {
        double v21 = -v21;
      }
      if (v21 < v8) {
        double v21 = v8;
      }
      if (v21 <= 1.0) {
        double v23 = 1.0e-10;
      }
      else {
        double v23 = v21 * 1.0e-10;
      }
      if (v22 > v23) {
        double v24 = 0.0;
      }
      else {
        double v24 = 1.0;
      }
      v4[3] = v24;
      double v25 = v3[4];
      double v26 = v25 - v2;
      if (v25 - v2 < 0.0) {
        double v26 = -(v25 - v2);
      }
      if (v25 < 0.0) {
        double v25 = -v25;
      }
      if (v25 < v8) {
        double v25 = v8;
      }
      if (v25 <= 1.0) {
        double v27 = 1.0e-10;
      }
      else {
        double v27 = v25 * 1.0e-10;
      }
      if (v26 > v27) {
        double v28 = 0.0;
      }
      else {
        double v28 = 1.0;
      }
      v4[4] = v28;
      double v29 = v3[5];
      double v30 = v29 - v2;
      if (v29 - v2 < 0.0) {
        double v30 = -(v29 - v2);
      }
      if (v29 < 0.0) {
        double v29 = -v29;
      }
      if (v29 < v8) {
        double v29 = v8;
      }
      if (v29 <= 1.0) {
        double v31 = 1.0e-10;
      }
      else {
        double v31 = v29 * 1.0e-10;
      }
      if (v30 > v31) {
        double v32 = 0.0;
      }
      else {
        double v32 = 1.0;
      }
      v4[5] = v32;
      double v33 = v3[6];
      double v34 = v33 - v2;
      if (v33 - v2 < 0.0) {
        double v34 = -(v33 - v2);
      }
      if (v33 < 0.0) {
        double v33 = -v33;
      }
      if (v33 < v8) {
        double v33 = v8;
      }
      if (v33 <= 1.0) {
        double v35 = 1.0e-10;
      }
      else {
        double v35 = v33 * 1.0e-10;
      }
      if (v34 > v35) {
        double v36 = 0.0;
      }
      else {
        double v36 = 1.0;
      }
      v4[6] = v36;
      double v37 = v3[7];
      double v38 = v37 - v2;
      if (v37 - v2 < 0.0) {
        double v38 = -(v37 - v2);
      }
      if (v37 < 0.0) {
        double v37 = -v37;
      }
      if (v37 < v8) {
        double v37 = v8;
      }
      if (v37 <= 1.0) {
        double v39 = 1.0e-10;
      }
      else {
        double v39 = v37 * 1.0e-10;
      }
      if (v38 > v39) {
        double v40 = 0.0;
      }
      else {
        double v40 = 1.0;
      }
      v4[7] = v40;
      double v41 = v3[8];
      double v42 = v41 - v2;
      if (v41 - v2 < 0.0) {
        double v42 = -(v41 - v2);
      }
      if (v41 < 0.0) {
        double v41 = -v41;
      }
      if (v41 < v8) {
        double v41 = v8;
      }
      if (v41 <= 1.0) {
        double v43 = 1.0e-10;
      }
      else {
        double v43 = v41 * 1.0e-10;
      }
      if (v42 > v43) {
        double v44 = 0.0;
      }
      else {
        double v44 = 1.0;
      }
      v4[8] = v44;
      double v45 = v3[9];
      double v46 = v45 - v2;
      if (v45 - v2 < 0.0) {
        double v46 = -(v45 - v2);
      }
      if (v45 < 0.0) {
        double v45 = -v45;
      }
      if (v45 < v8) {
        double v45 = v8;
      }
      if (v45 <= 1.0) {
        double v47 = 1.0e-10;
      }
      else {
        double v47 = v45 * 1.0e-10;
      }
      if (v46 > v47) {
        double v48 = 0.0;
      }
      else {
        double v48 = 1.0;
      }
      v4[9] = v48;
      double v49 = v3[10];
      double v50 = v49 - v2;
      if (v49 - v2 < 0.0) {
        double v50 = -(v49 - v2);
      }
      if (v49 < 0.0) {
        double v49 = -v49;
      }
      if (v49 < v8) {
        double v49 = v8;
      }
      if (v49 <= 1.0) {
        double v51 = 1.0e-10;
      }
      else {
        double v51 = v49 * 1.0e-10;
      }
      if (v50 > v51) {
        double v52 = 0.0;
      }
      else {
        double v52 = 1.0;
      }
      v4[10] = v52;
      double v53 = v3[11];
      double v54 = v53 - v2;
      if (v53 - v2 < 0.0) {
        double v54 = -(v53 - v2);
      }
      if (v53 < 0.0) {
        double v53 = -v53;
      }
      if (v53 < v8) {
        double v53 = v8;
      }
      if (v53 <= 1.0) {
        double v55 = 1.0e-10;
      }
      else {
        double v55 = v53 * 1.0e-10;
      }
      if (v54 > v55) {
        double v56 = 0.0;
      }
      else {
        double v56 = 1.0;
      }
      v4[11] = v56;
      double v57 = v3[12];
      double v58 = v57 - v2;
      if (v57 - v2 < 0.0) {
        double v58 = -(v57 - v2);
      }
      if (v57 < 0.0) {
        double v57 = -v57;
      }
      if (v57 < v8) {
        double v57 = v8;
      }
      if (v57 <= 1.0) {
        double v59 = 1.0e-10;
      }
      else {
        double v59 = v57 * 1.0e-10;
      }
      if (v58 > v59) {
        double v60 = 0.0;
      }
      else {
        double v60 = 1.0;
      }
      v4[12] = v60;
      double v61 = v3[13];
      double v62 = v61 - v2;
      if (v61 - v2 < 0.0) {
        double v62 = -(v61 - v2);
      }
      if (v61 < 0.0) {
        double v61 = -v61;
      }
      if (v61 < v8) {
        double v61 = v8;
      }
      if (v61 <= 1.0) {
        double v63 = 1.0e-10;
      }
      else {
        double v63 = v61 * 1.0e-10;
      }
      if (v62 > v63) {
        double v64 = 0.0;
      }
      else {
        double v64 = 1.0;
      }
      v4[13] = v64;
      double v65 = v3[14];
      double v66 = v65 - v2;
      if (v65 - v2 < 0.0) {
        double v66 = -(v65 - v2);
      }
      if (v65 < 0.0) {
        double v65 = -v65;
      }
      if (v65 < v8) {
        double v65 = v8;
      }
      if (v65 <= 1.0) {
        double v67 = 1.0e-10;
      }
      else {
        double v67 = v65 * 1.0e-10;
      }
      if (v66 > v67) {
        double v68 = 0.0;
      }
      else {
        double v68 = 1.0;
      }
      v4[14] = v68;
      double v69 = v3[15];
      double v70 = v69 - v2;
      if (v69 - v2 < 0.0) {
        double v70 = -(v69 - v2);
      }
      if (v69 < 0.0) {
        double v69 = -v69;
      }
      if (v69 < v8) {
        double v69 = v8;
      }
      if (v69 <= 1.0) {
        double v71 = 1.0e-10;
      }
      else {
        double v71 = v69 * 1.0e-10;
      }
      if (v70 > v71) {
        double v72 = 0.0;
      }
      else {
        double v72 = 1.0;
      }
      v4[15] = v72;
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v7);
  }
  switch(v5 & 0xF)
  {
    case 1:
      uint64_t v73 = 0;
      double v74 = -v2;
      goto LABEL_427;
    case 2:
      int v76 = 0;
      double v74 = -v2;
      goto LABEL_412;
    case 3:
      int v77 = 0;
      double v74 = -v2;
      goto LABEL_397;
    case 4:
      int v78 = 0;
      double v74 = -v2;
      goto LABEL_382;
    case 5:
      unsigned int v79 = 0;
      double v74 = -v2;
      goto LABEL_367;
    case 6:
      unsigned int v80 = 0;
      double v74 = -v2;
      goto LABEL_352;
    case 7:
      unsigned int v81 = 0;
      double v74 = -v2;
      goto LABEL_337;
    case 8:
      unsigned int v82 = 0;
      double v74 = -v2;
      goto LABEL_322;
    case 9:
      unsigned int v83 = 0;
      double v74 = -v2;
      goto LABEL_307;
    case 0xA:
      unsigned int v84 = 0;
      double v74 = -v2;
      goto LABEL_292;
    case 0xB:
      unsigned int v85 = 0;
      double v74 = -v2;
      goto LABEL_277;
    case 0xC:
      unsigned int v86 = 0;
      double v74 = -v2;
      goto LABEL_262;
    case 0xD:
      unsigned int v87 = 0;
      double v74 = -v2;
      goto LABEL_247;
    case 0xE:
      unsigned int v88 = 0;
      double v74 = -v2;
      goto LABEL_232;
    case 0xF:
      double v89 = *v3;
      double v90 = *v3 - v2;
      if (v90 < 0.0) {
        double v90 = -v90;
      }
      double v91 = -v89;
      if (v89 >= 0.0) {
        double v91 = *v3;
      }
      double v74 = -v2;
      if (v2 >= 0.0) {
        double v92 = v2;
      }
      else {
        double v92 = -v2;
      }
      if (v91 < v92) {
        double v91 = v92;
      }
      if (v91 <= 1.0) {
        double v93 = 1.0e-10;
      }
      else {
        double v93 = v91 * 1.0e-10;
      }
      BOOL v94 = v90 > v93;
      double v95 = 0.0;
      if (!v94) {
        double v95 = 1.0;
      }
      *uint64_t v4 = v95;
      unsigned int v88 = 1;
LABEL_232:
      double v96 = v3[v88];
      double v97 = v96 - v2;
      if (v96 - v2 < 0.0) {
        double v97 = -(v96 - v2);
      }
      if (v96 < 0.0) {
        double v96 = -v96;
      }
      if (v2 >= 0.0) {
        double v98 = v2;
      }
      else {
        double v98 = v74;
      }
      if (v96 < v98) {
        double v96 = v98;
      }
      if (v96 <= 1.0) {
        double v99 = 1.0e-10;
      }
      else {
        double v99 = v96 * 1.0e-10;
      }
      BOOL v94 = v97 > v99;
      double v100 = 0.0;
      if (!v94) {
        double v100 = 1.0;
      }
      v4[v88] = v100;
      unsigned int v87 = v88 + 1;
LABEL_247:
      double v101 = v3[v87];
      double v102 = v101 - v2;
      if (v101 - v2 < 0.0) {
        double v102 = -(v101 - v2);
      }
      if (v101 < 0.0) {
        double v101 = -v101;
      }
      if (v2 >= 0.0) {
        double v103 = v2;
      }
      else {
        double v103 = v74;
      }
      if (v101 < v103) {
        double v101 = v103;
      }
      if (v101 <= 1.0) {
        double v104 = 1.0e-10;
      }
      else {
        double v104 = v101 * 1.0e-10;
      }
      BOOL v94 = v102 > v104;
      double v105 = 0.0;
      if (!v94) {
        double v105 = 1.0;
      }
      v4[v87] = v105;
      unsigned int v86 = v87 + 1;
LABEL_262:
      double v106 = v3[v86];
      double v107 = v106 - v2;
      if (v106 - v2 < 0.0) {
        double v107 = -(v106 - v2);
      }
      if (v106 < 0.0) {
        double v106 = -v106;
      }
      if (v2 >= 0.0) {
        double v108 = v2;
      }
      else {
        double v108 = v74;
      }
      if (v106 < v108) {
        double v106 = v108;
      }
      if (v106 <= 1.0) {
        double v109 = 1.0e-10;
      }
      else {
        double v109 = v106 * 1.0e-10;
      }
      BOOL v94 = v107 > v109;
      double v110 = 0.0;
      if (!v94) {
        double v110 = 1.0;
      }
      v4[v86] = v110;
      unsigned int v85 = v86 + 1;
LABEL_277:
      double v111 = v3[v85];
      double v112 = v111 - v2;
      if (v111 - v2 < 0.0) {
        double v112 = -(v111 - v2);
      }
      if (v111 < 0.0) {
        double v111 = -v111;
      }
      if (v2 >= 0.0) {
        double v113 = v2;
      }
      else {
        double v113 = v74;
      }
      if (v111 < v113) {
        double v111 = v113;
      }
      if (v111 <= 1.0) {
        double v114 = 1.0e-10;
      }
      else {
        double v114 = v111 * 1.0e-10;
      }
      BOOL v94 = v112 > v114;
      double v115 = 0.0;
      if (!v94) {
        double v115 = 1.0;
      }
      v4[v85] = v115;
      unsigned int v84 = v85 + 1;
LABEL_292:
      double v116 = v3[v84];
      double v117 = v116 - v2;
      if (v116 - v2 < 0.0) {
        double v117 = -(v116 - v2);
      }
      if (v116 < 0.0) {
        double v116 = -v116;
      }
      if (v2 >= 0.0) {
        double v118 = v2;
      }
      else {
        double v118 = v74;
      }
      if (v116 < v118) {
        double v116 = v118;
      }
      if (v116 <= 1.0) {
        double v119 = 1.0e-10;
      }
      else {
        double v119 = v116 * 1.0e-10;
      }
      BOOL v94 = v117 > v119;
      double v120 = 0.0;
      if (!v94) {
        double v120 = 1.0;
      }
      v4[v84] = v120;
      unsigned int v83 = v84 + 1;
LABEL_307:
      double v121 = v3[v83];
      double v122 = v121 - v2;
      if (v121 - v2 < 0.0) {
        double v122 = -(v121 - v2);
      }
      if (v121 < 0.0) {
        double v121 = -v121;
      }
      if (v2 >= 0.0) {
        double v123 = v2;
      }
      else {
        double v123 = v74;
      }
      if (v121 < v123) {
        double v121 = v123;
      }
      if (v121 <= 1.0) {
        double v124 = 1.0e-10;
      }
      else {
        double v124 = v121 * 1.0e-10;
      }
      BOOL v94 = v122 > v124;
      double v125 = 0.0;
      if (!v94) {
        double v125 = 1.0;
      }
      v4[v83] = v125;
      unsigned int v82 = v83 + 1;
LABEL_322:
      double v126 = v3[v82];
      double v127 = v126 - v2;
      if (v126 - v2 < 0.0) {
        double v127 = -(v126 - v2);
      }
      if (v126 < 0.0) {
        double v126 = -v126;
      }
      if (v2 >= 0.0) {
        double v128 = v2;
      }
      else {
        double v128 = v74;
      }
      if (v126 < v128) {
        double v126 = v128;
      }
      if (v126 <= 1.0) {
        double v129 = 1.0e-10;
      }
      else {
        double v129 = v126 * 1.0e-10;
      }
      BOOL v94 = v127 > v129;
      double v130 = 0.0;
      if (!v94) {
        double v130 = 1.0;
      }
      v4[v82] = v130;
      unsigned int v81 = v82 + 1;
LABEL_337:
      double v131 = v3[v81];
      double v132 = v131 - v2;
      if (v131 - v2 < 0.0) {
        double v132 = -(v131 - v2);
      }
      if (v131 < 0.0) {
        double v131 = -v131;
      }
      if (v2 >= 0.0) {
        double v133 = v2;
      }
      else {
        double v133 = v74;
      }
      if (v131 < v133) {
        double v131 = v133;
      }
      if (v131 <= 1.0) {
        double v134 = 1.0e-10;
      }
      else {
        double v134 = v131 * 1.0e-10;
      }
      BOOL v94 = v132 > v134;
      double v135 = 0.0;
      if (!v94) {
        double v135 = 1.0;
      }
      v4[v81] = v135;
      unsigned int v80 = v81 + 1;
LABEL_352:
      double v136 = v3[v80];
      double v137 = v136 - v2;
      if (v136 - v2 < 0.0) {
        double v137 = -(v136 - v2);
      }
      if (v136 < 0.0) {
        double v136 = -v136;
      }
      if (v2 >= 0.0) {
        double v138 = v2;
      }
      else {
        double v138 = v74;
      }
      if (v136 < v138) {
        double v136 = v138;
      }
      if (v136 <= 1.0) {
        double v139 = 1.0e-10;
      }
      else {
        double v139 = v136 * 1.0e-10;
      }
      BOOL v94 = v137 > v139;
      double v140 = 0.0;
      if (!v94) {
        double v140 = 1.0;
      }
      v4[v80] = v140;
      unsigned int v79 = v80 + 1;
LABEL_367:
      double v141 = v3[v79];
      double v142 = v141 - v2;
      if (v141 - v2 < 0.0) {
        double v142 = -(v141 - v2);
      }
      if (v141 < 0.0) {
        double v141 = -v141;
      }
      if (v2 >= 0.0) {
        double v143 = v2;
      }
      else {
        double v143 = v74;
      }
      if (v141 < v143) {
        double v141 = v143;
      }
      if (v141 <= 1.0) {
        double v144 = 1.0e-10;
      }
      else {
        double v144 = v141 * 1.0e-10;
      }
      BOOL v94 = v142 > v144;
      double v145 = 0.0;
      if (!v94) {
        double v145 = 1.0;
      }
      v4[v79] = v145;
      int v78 = v79 + 1;
LABEL_382:
      double v146 = v3[v78];
      double v147 = v146 - v2;
      if (v146 - v2 < 0.0) {
        double v147 = -(v146 - v2);
      }
      if (v146 < 0.0) {
        double v146 = -v146;
      }
      if (v2 >= 0.0) {
        double v148 = v2;
      }
      else {
        double v148 = v74;
      }
      if (v146 < v148) {
        double v146 = v148;
      }
      if (v146 <= 1.0) {
        double v149 = 1.0e-10;
      }
      else {
        double v149 = v146 * 1.0e-10;
      }
      BOOL v94 = v147 > v149;
      double v150 = 0.0;
      if (!v94) {
        double v150 = 1.0;
      }
      v4[v78] = v150;
      int v77 = v78 + 1;
LABEL_397:
      double v151 = v3[v77];
      double v152 = v151 - v2;
      if (v151 - v2 < 0.0) {
        double v152 = -(v151 - v2);
      }
      if (v151 < 0.0) {
        double v151 = -v151;
      }
      if (v2 >= 0.0) {
        double v153 = v2;
      }
      else {
        double v153 = v74;
      }
      if (v151 < v153) {
        double v151 = v153;
      }
      if (v151 <= 1.0) {
        double v154 = 1.0e-10;
      }
      else {
        double v154 = v151 * 1.0e-10;
      }
      BOOL v94 = v152 > v154;
      double v155 = 0.0;
      if (!v94) {
        double v155 = 1.0;
      }
      v4[v77] = v155;
      int v76 = v77 + 1;
LABEL_412:
      double v156 = v3[v76];
      double v157 = v156 - v2;
      if (v156 - v2 < 0.0) {
        double v157 = -(v156 - v2);
      }
      if (v156 < 0.0) {
        double v156 = -v156;
      }
      if (v2 >= 0.0) {
        double v158 = v2;
      }
      else {
        double v158 = v74;
      }
      if (v156 < v158) {
        double v156 = v158;
      }
      if (v156 <= 1.0) {
        double v159 = 1.0e-10;
      }
      else {
        double v159 = v156 * 1.0e-10;
      }
      BOOL v94 = v157 > v159;
      double v160 = 0.0;
      if (!v94) {
        double v160 = 1.0;
      }
      v4[v76] = v160;
      uint64_t v73 = (v76 + 1);
LABEL_427:
      uint64_t v161 = v73;
      double v162 = v3[v161];
      double v163 = v162 - v2;
      if (v162 - v2 < 0.0) {
        double v163 = -(v162 - v2);
      }
      if (v162 < 0.0) {
        double v162 = -v162;
      }
      if (v2 >= 0.0) {
        double v74 = v2;
      }
      if (v162 >= v74) {
        double v74 = v162;
      }
      if (v74 <= 1.0) {
        double v164 = 1.0e-10;
      }
      else {
        double v164 = v74 * 1.0e-10;
      }
      BOOL v94 = v163 > v164;
      double v165 = 0.0;
      if (!v94) {
        double v165 = 1.0;
      }
      v4[v161] = v165;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
}

uint64_t sub_141E7C()
{
  return 139;
}

uint64_t sub_141E84(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_141E8C(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_141E94(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_141ED4(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_141EDC(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_141EE4(uint64_t a1)
{
  return sub_141F88(a1 - 48);
}

void sub_141EEC(uint64_t a1)
{
  sub_141F88(a1 - 48);

  operator delete();
}

uint64_t sub_141F28(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 72))() + 8);
}

uint64_t sub_141F68(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_141F70(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_141F78(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_141F80(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_141F88(uint64_t a1)
{
  *(void *)a1 = off_2406328;
  *(void *)(a1 + 48) = off_2406388;
  if (*(void *)(a1 + 64)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 80);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 80) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 && *(unsigned char *)(a1 + 40))
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }
  return a1;
}

void sub_14211C(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_2406410;
  *(void *)(a1 + 48) = off_2406470;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  operator new();
}

void sub_14280C(_Unwind_Exception *a1)
{
  sub_E26D8((uint64_t *)(v1 + 80));
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_1428D8(uint64_t a1)
{
  sub_142FF4(a1);

  operator delete();
}

double sub_142910(uint64_t a1)
{
  if (!*(void *)(a1 + 56)) {
    return NAN;
  }
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  double v2 = (*(double (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
                  + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v5) << 32;
  if (v7 >= 1)
  {
    BOOL v8 = (double *)((char *)v3 + (v7 >> 29));
    do
    {
      if (*v3 != 0.0 && v2 != 0.0) {
        double v9 = 1.0;
      }
      else {
        double v9 = 0.0;
      }
      *uint64_t v4 = v9;
      if (v3[1] != 0.0 && v2 != 0.0) {
        double v10 = 1.0;
      }
      else {
        double v10 = 0.0;
      }
      v4[1] = v10;
      if (v3[2] != 0.0 && v2 != 0.0) {
        double v11 = 1.0;
      }
      else {
        double v11 = 0.0;
      }
      v4[2] = v11;
      if (v3[3] != 0.0 && v2 != 0.0) {
        double v12 = 1.0;
      }
      else {
        double v12 = 0.0;
      }
      v4[3] = v12;
      if (v3[4] != 0.0 && v2 != 0.0) {
        double v13 = 1.0;
      }
      else {
        double v13 = 0.0;
      }
      v4[4] = v13;
      if (v3[5] != 0.0 && v2 != 0.0) {
        double v14 = 1.0;
      }
      else {
        double v14 = 0.0;
      }
      v4[5] = v14;
      if (v3[6] != 0.0 && v2 != 0.0) {
        double v15 = 1.0;
      }
      else {
        double v15 = 0.0;
      }
      v4[6] = v15;
      if (v3[7] != 0.0 && v2 != 0.0) {
        double v16 = 1.0;
      }
      else {
        double v16 = 0.0;
      }
      v4[7] = v16;
      if (v3[8] != 0.0 && v2 != 0.0) {
        double v17 = 1.0;
      }
      else {
        double v17 = 0.0;
      }
      v4[8] = v17;
      if (v3[9] != 0.0 && v2 != 0.0) {
        double v18 = 1.0;
      }
      else {
        double v18 = 0.0;
      }
      v4[9] = v18;
      if (v3[10] != 0.0 && v2 != 0.0) {
        double v19 = 1.0;
      }
      else {
        double v19 = 0.0;
      }
      v4[10] = v19;
      if (v3[11] != 0.0 && v2 != 0.0) {
        double v20 = 1.0;
      }
      else {
        double v20 = 0.0;
      }
      v4[11] = v20;
      if (v3[12] != 0.0 && v2 != 0.0) {
        double v21 = 1.0;
      }
      else {
        double v21 = 0.0;
      }
      v4[12] = v21;
      if (v3[13] != 0.0 && v2 != 0.0) {
        double v22 = 1.0;
      }
      else {
        double v22 = 0.0;
      }
      v4[13] = v22;
      if (v3[14] != 0.0 && v2 != 0.0) {
        double v23 = 1.0;
      }
      else {
        double v23 = 0.0;
      }
      v4[14] = v23;
      if (v3[15] != 0.0 && v2 != 0.0) {
        double v24 = 1.0;
      }
      else {
        double v24 = 0.0;
      }
      v4[15] = v24;
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v8);
  }
  int v25 = (v5 & 0xF) - 1;
  unsigned int v26 = 0;
  unsigned int v27 = 0;
  unsigned int v28 = 0;
  unsigned int v29 = 0;
  unsigned int v30 = 0;
  unsigned int v31 = 0;
  unsigned int v32 = 0;
  unsigned int v33 = 0;
  unsigned int v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  switch(v25)
  {
    case 0:
      goto LABEL_155;
    case 1:
      goto LABEL_148;
    case 2:
      goto LABEL_141;
    case 3:
      goto LABEL_134;
    case 4:
      goto LABEL_127;
    case 5:
      goto LABEL_120;
    case 6:
      goto LABEL_113;
    case 7:
      goto LABEL_106;
    case 8:
      goto LABEL_99;
    case 9:
      goto LABEL_92;
    case 10:
      goto LABEL_85;
    case 11:
      goto LABEL_78;
    case 12:
      goto LABEL_71;
    case 13:
      goto LABEL_64;
    case 14:
      BOOL v40 = v2 == 0.0 || *v3 == 0.0;
      double v41 = 1.0;
      if (v40) {
        double v41 = 0.0;
      }
      *uint64_t v4 = v41;
      unsigned int v26 = 1;
LABEL_64:
      BOOL v42 = v2 == 0.0 || v3[v26] == 0.0;
      double v43 = 1.0;
      if (v42) {
        double v43 = 0.0;
      }
      v4[v26] = v43;
      unsigned int v27 = v26 + 1;
LABEL_71:
      BOOL v44 = v2 == 0.0 || v3[v27] == 0.0;
      double v45 = 1.0;
      if (v44) {
        double v45 = 0.0;
      }
      v4[v27] = v45;
      unsigned int v28 = v27 + 1;
LABEL_78:
      BOOL v46 = v2 == 0.0 || v3[v28] == 0.0;
      double v47 = 1.0;
      if (v46) {
        double v47 = 0.0;
      }
      v4[v28] = v47;
      unsigned int v29 = v28 + 1;
LABEL_85:
      BOOL v48 = v2 == 0.0 || v3[v29] == 0.0;
      double v49 = 1.0;
      if (v48) {
        double v49 = 0.0;
      }
      v4[v29] = v49;
      unsigned int v30 = v29 + 1;
LABEL_92:
      BOOL v50 = v2 == 0.0 || v3[v30] == 0.0;
      double v51 = 1.0;
      if (v50) {
        double v51 = 0.0;
      }
      v4[v30] = v51;
      unsigned int v31 = v30 + 1;
LABEL_99:
      BOOL v52 = v2 == 0.0 || v3[v31] == 0.0;
      double v53 = 1.0;
      if (v52) {
        double v53 = 0.0;
      }
      v4[v31] = v53;
      unsigned int v32 = v31 + 1;
LABEL_106:
      BOOL v54 = v2 == 0.0 || v3[v32] == 0.0;
      double v55 = 1.0;
      if (v54) {
        double v55 = 0.0;
      }
      v4[v32] = v55;
      unsigned int v33 = v32 + 1;
LABEL_113:
      BOOL v56 = v2 == 0.0 || v3[v33] == 0.0;
      double v57 = 1.0;
      if (v56) {
        double v57 = 0.0;
      }
      v4[v33] = v57;
      unsigned int v34 = v33 + 1;
LABEL_120:
      BOOL v58 = v2 == 0.0 || v3[v34] == 0.0;
      double v59 = 1.0;
      if (v58) {
        double v59 = 0.0;
      }
      v4[v34] = v59;
      uint64_t v35 = v34 + 1;
LABEL_127:
      BOOL v60 = v2 == 0.0 || v3[v35] == 0.0;
      double v61 = 1.0;
      if (v60) {
        double v61 = 0.0;
      }
      v4[v35] = v61;
      uint64_t v36 = (v35 + 1);
LABEL_134:
      BOOL v62 = v2 == 0.0 || v3[v36] == 0.0;
      double v63 = 1.0;
      if (v62) {
        double v63 = 0.0;
      }
      v4[v36] = v63;
      uint64_t v37 = (v36 + 1);
LABEL_141:
      BOOL v64 = v2 == 0.0 || v3[v37] == 0.0;
      double v65 = 1.0;
      if (v64) {
        double v65 = 0.0;
      }
      v4[v37] = v65;
      uint64_t v38 = (v37 + 1);
LABEL_148:
      BOOL v66 = v2 == 0.0 || v3[v38] == 0.0;
      double v67 = 1.0;
      if (v66) {
        double v67 = 0.0;
      }
      v4[v38] = v67;
      uint64_t v39 = (v38 + 1);
LABEL_155:
      BOOL v68 = v2 == 0.0 || v3[v39] == 0.0;
      double v69 = 1.0;
      if (v68) {
        double v69 = 0.0;
      }
      v4[v39] = v69;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v35, v36, v37, v38, v39)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v35, v36, v37, v38, v39)+ 16);
}

uint64_t sub_142EE8()
{
  return 139;
}

uint64_t sub_142EF0(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_142EF8(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_142F00(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_142F40(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_142F48(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_142F50(uint64_t a1)
{
  return sub_142FF4(a1 - 48);
}

void sub_142F58(uint64_t a1)
{
  sub_142FF4(a1 - 48);

  operator delete();
}

uint64_t sub_142F94(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 72))() + 8);
}

uint64_t sub_142FD4(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_142FDC(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_142FE4(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_142FEC(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_142FF4(uint64_t a1)
{
  *(void *)a1 = off_2406410;
  *(void *)(a1 + 48) = off_2406470;
  if (*(void *)(a1 + 64)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 80);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 80) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 && *(unsigned char *)(a1 + 40))
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }
  return a1;
}

void sub_143188(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_24064F8;
  *(void *)(a1 + 48) = off_2406558;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  operator new();
}

void sub_143878(_Unwind_Exception *a1)
{
  sub_E26D8((uint64_t *)(v1 + 80));
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_143944(uint64_t a1)
{
  sub_144060(a1);

  operator delete();
}

double sub_14397C(uint64_t a1)
{
  if (!*(void *)(a1 + 56)) {
    return NAN;
  }
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  double v2 = (*(double (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
                  + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v5) << 32;
  if (v7 >= 1)
  {
    BOOL v8 = (double *)((char *)v3 + (v7 >> 29));
    do
    {
      if (*v3 != 0.0 && v2 != 0.0) {
        double v9 = 0.0;
      }
      else {
        double v9 = 1.0;
      }
      *uint64_t v4 = v9;
      if (v3[1] != 0.0 && v2 != 0.0) {
        double v10 = 0.0;
      }
      else {
        double v10 = 1.0;
      }
      v4[1] = v10;
      if (v3[2] != 0.0 && v2 != 0.0) {
        double v11 = 0.0;
      }
      else {
        double v11 = 1.0;
      }
      v4[2] = v11;
      if (v3[3] != 0.0 && v2 != 0.0) {
        double v12 = 0.0;
      }
      else {
        double v12 = 1.0;
      }
      v4[3] = v12;
      if (v3[4] != 0.0 && v2 != 0.0) {
        double v13 = 0.0;
      }
      else {
        double v13 = 1.0;
      }
      v4[4] = v13;
      if (v3[5] != 0.0 && v2 != 0.0) {
        double v14 = 0.0;
      }
      else {
        double v14 = 1.0;
      }
      v4[5] = v14;
      if (v3[6] != 0.0 && v2 != 0.0) {
        double v15 = 0.0;
      }
      else {
        double v15 = 1.0;
      }
      v4[6] = v15;
      if (v3[7] != 0.0 && v2 != 0.0) {
        double v16 = 0.0;
      }
      else {
        double v16 = 1.0;
      }
      v4[7] = v16;
      if (v3[8] != 0.0 && v2 != 0.0) {
        double v17 = 0.0;
      }
      else {
        double v17 = 1.0;
      }
      v4[8] = v17;
      if (v3[9] != 0.0 && v2 != 0.0) {
        double v18 = 0.0;
      }
      else {
        double v18 = 1.0;
      }
      v4[9] = v18;
      if (v3[10] != 0.0 && v2 != 0.0) {
        double v19 = 0.0;
      }
      else {
        double v19 = 1.0;
      }
      v4[10] = v19;
      if (v3[11] != 0.0 && v2 != 0.0) {
        double v20 = 0.0;
      }
      else {
        double v20 = 1.0;
      }
      v4[11] = v20;
      if (v3[12] != 0.0 && v2 != 0.0) {
        double v21 = 0.0;
      }
      else {
        double v21 = 1.0;
      }
      v4[12] = v21;
      if (v3[13] != 0.0 && v2 != 0.0) {
        double v22 = 0.0;
      }
      else {
        double v22 = 1.0;
      }
      v4[13] = v22;
      if (v3[14] != 0.0 && v2 != 0.0) {
        double v23 = 0.0;
      }
      else {
        double v23 = 1.0;
      }
      v4[14] = v23;
      if (v3[15] != 0.0 && v2 != 0.0) {
        double v24 = 0.0;
      }
      else {
        double v24 = 1.0;
      }
      v4[15] = v24;
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v8);
  }
  int v25 = (v5 & 0xF) - 1;
  unsigned int v26 = 0;
  unsigned int v27 = 0;
  unsigned int v28 = 0;
  unsigned int v29 = 0;
  unsigned int v30 = 0;
  unsigned int v31 = 0;
  unsigned int v32 = 0;
  unsigned int v33 = 0;
  unsigned int v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  switch(v25)
  {
    case 0:
      goto LABEL_141;
    case 1:
      goto LABEL_135;
    case 2:
      goto LABEL_129;
    case 3:
      goto LABEL_123;
    case 4:
      goto LABEL_117;
    case 5:
      goto LABEL_111;
    case 6:
      goto LABEL_105;
    case 7:
      goto LABEL_99;
    case 8:
      goto LABEL_93;
    case 9:
      goto LABEL_87;
    case 10:
      goto LABEL_81;
    case 11:
      goto LABEL_75;
    case 12:
      goto LABEL_69;
    case 13:
      goto LABEL_63;
    case 14:
      BOOL v40 = v2 == 0.0 || *v3 == 0.0;
      double v41 = 1.0;
      if (!v40) {
        double v41 = 0.0;
      }
      *uint64_t v4 = v41;
      unsigned int v26 = 1;
LABEL_63:
      BOOL v42 = v2 == 0.0 || v3[v26] == 0.0;
      double v43 = 1.0;
      if (!v42) {
        double v43 = 0.0;
      }
      v4[v26] = v43;
      unsigned int v27 = v26 + 1;
LABEL_69:
      BOOL v44 = v2 == 0.0 || v3[v27] == 0.0;
      double v45 = 1.0;
      if (!v44) {
        double v45 = 0.0;
      }
      v4[v27] = v45;
      unsigned int v28 = v27 + 1;
LABEL_75:
      BOOL v46 = v2 == 0.0 || v3[v28] == 0.0;
      double v47 = 1.0;
      if (!v46) {
        double v47 = 0.0;
      }
      v4[v28] = v47;
      unsigned int v29 = v28 + 1;
LABEL_81:
      BOOL v48 = v2 == 0.0 || v3[v29] == 0.0;
      double v49 = 1.0;
      if (!v48) {
        double v49 = 0.0;
      }
      v4[v29] = v49;
      unsigned int v30 = v29 + 1;
LABEL_87:
      BOOL v50 = v2 == 0.0 || v3[v30] == 0.0;
      double v51 = 1.0;
      if (!v50) {
        double v51 = 0.0;
      }
      v4[v30] = v51;
      unsigned int v31 = v30 + 1;
LABEL_93:
      BOOL v52 = v2 == 0.0 || v3[v31] == 0.0;
      double v53 = 1.0;
      if (!v52) {
        double v53 = 0.0;
      }
      v4[v31] = v53;
      unsigned int v32 = v31 + 1;
LABEL_99:
      BOOL v54 = v2 == 0.0 || v3[v32] == 0.0;
      double v55 = 1.0;
      if (!v54) {
        double v55 = 0.0;
      }
      v4[v32] = v55;
      unsigned int v33 = v32 + 1;
LABEL_105:
      BOOL v56 = v2 == 0.0 || v3[v33] == 0.0;
      double v57 = 1.0;
      if (!v56) {
        double v57 = 0.0;
      }
      v4[v33] = v57;
      unsigned int v34 = v33 + 1;
LABEL_111:
      BOOL v58 = v2 == 0.0 || v3[v34] == 0.0;
      double v59 = 1.0;
      if (!v58) {
        double v59 = 0.0;
      }
      v4[v34] = v59;
      uint64_t v35 = v34 + 1;
LABEL_117:
      BOOL v60 = v2 == 0.0 || v3[v35] == 0.0;
      double v61 = 1.0;
      if (!v60) {
        double v61 = 0.0;
      }
      v4[v35] = v61;
      uint64_t v36 = (v35 + 1);
LABEL_123:
      BOOL v62 = v2 == 0.0 || v3[v36] == 0.0;
      double v63 = 1.0;
      if (!v62) {
        double v63 = 0.0;
      }
      v4[v36] = v63;
      uint64_t v37 = (v36 + 1);
LABEL_129:
      BOOL v64 = v2 == 0.0 || v3[v37] == 0.0;
      double v65 = 1.0;
      if (!v64) {
        double v65 = 0.0;
      }
      v4[v37] = v65;
      uint64_t v38 = (v37 + 1);
LABEL_135:
      BOOL v66 = v2 == 0.0 || v3[v38] == 0.0;
      double v67 = 1.0;
      if (!v66) {
        double v67 = 0.0;
      }
      v4[v38] = v67;
      uint64_t v39 = (v38 + 1);
LABEL_141:
      BOOL v68 = v2 == 0.0 || v3[v39] == 0.0;
      double v69 = 1.0;
      if (!v68) {
        double v69 = 0.0;
      }
      v4[v39] = v69;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v35, v36, v37, v38, v39)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v35, v36, v37, v38, v39)+ 16);
}

uint64_t sub_143F54()
{
  return 139;
}

uint64_t sub_143F5C(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_143F64(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_143F6C(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_143FAC(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_143FB4(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_143FBC(uint64_t a1)
{
  return sub_144060(a1 - 48);
}

void sub_143FC4(uint64_t a1)
{
  sub_144060(a1 - 48);

  operator delete();
}

uint64_t sub_144000(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 72))() + 8);
}

uint64_t sub_144040(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_144048(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_144050(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_144058(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_144060(uint64_t a1)
{
  *(void *)a1 = off_24064F8;
  *(void *)(a1 + 48) = off_2406558;
  if (*(void *)(a1 + 64)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 80);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 80) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 && *(unsigned char *)(a1 + 40))
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }
  return a1;
}

void sub_1441F4(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_24065E0;
  *(void *)(a1 + 48) = off_2406640;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  operator new();
}

void sub_1448E4(_Unwind_Exception *a1)
{
  sub_E26D8((uint64_t *)(v1 + 80));
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_1449B0(uint64_t a1)
{
  sub_145144(a1);

  operator delete();
}

double sub_1449E8(uint64_t a1)
{
  if (!*(void *)(a1 + 56)) {
    return NAN;
  }
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  double v2 = (*(double (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
                  + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v5) << 32;
  if (v7 >= 1)
  {
    BOOL v8 = (double *)((char *)v3 + (v7 >> 29));
    do
    {
      BOOL v9 = *v3 != 0.0;
      if (v2 != 0.0) {
        BOOL v9 = 1;
      }
      if (v9) {
        double v10 = 1.0;
      }
      else {
        double v10 = 0.0;
      }
      *uint64_t v4 = v10;
      BOOL v11 = v3[1] != 0.0;
      if (v2 != 0.0) {
        BOOL v11 = 1;
      }
      if (v11) {
        double v12 = 1.0;
      }
      else {
        double v12 = 0.0;
      }
      v4[1] = v12;
      BOOL v13 = v3[2] != 0.0;
      if (v2 != 0.0) {
        BOOL v13 = 1;
      }
      if (v13) {
        double v14 = 1.0;
      }
      else {
        double v14 = 0.0;
      }
      v4[2] = v14;
      BOOL v15 = v3[3] != 0.0;
      if (v2 != 0.0) {
        BOOL v15 = 1;
      }
      if (v15) {
        double v16 = 1.0;
      }
      else {
        double v16 = 0.0;
      }
      v4[3] = v16;
      BOOL v17 = v3[4] != 0.0;
      if (v2 != 0.0) {
        BOOL v17 = 1;
      }
      if (v17) {
        double v18 = 1.0;
      }
      else {
        double v18 = 0.0;
      }
      v4[4] = v18;
      BOOL v19 = v3[5] != 0.0;
      if (v2 != 0.0) {
        BOOL v19 = 1;
      }
      if (v19) {
        double v20 = 1.0;
      }
      else {
        double v20 = 0.0;
      }
      v4[5] = v20;
      BOOL v21 = v3[6] != 0.0;
      if (v2 != 0.0) {
        BOOL v21 = 1;
      }
      if (v21) {
        double v22 = 1.0;
      }
      else {
        double v22 = 0.0;
      }
      v4[6] = v22;
      BOOL v23 = v3[7] != 0.0;
      if (v2 != 0.0) {
        BOOL v23 = 1;
      }
      if (v23) {
        double v24 = 1.0;
      }
      else {
        double v24 = 0.0;
      }
      v4[7] = v24;
      BOOL v25 = v3[8] != 0.0;
      if (v2 != 0.0) {
        BOOL v25 = 1;
      }
      if (v25) {
        double v26 = 1.0;
      }
      else {
        double v26 = 0.0;
      }
      v4[8] = v26;
      BOOL v27 = v3[9] != 0.0;
      if (v2 != 0.0) {
        BOOL v27 = 1;
      }
      if (v27) {
        double v28 = 1.0;
      }
      else {
        double v28 = 0.0;
      }
      v4[9] = v28;
      BOOL v29 = v3[10] != 0.0;
      if (v2 != 0.0) {
        BOOL v29 = 1;
      }
      if (v29) {
        double v30 = 1.0;
      }
      else {
        double v30 = 0.0;
      }
      v4[10] = v30;
      BOOL v31 = v3[11] != 0.0;
      if (v2 != 0.0) {
        BOOL v31 = 1;
      }
      if (v31) {
        double v32 = 1.0;
      }
      else {
        double v32 = 0.0;
      }
      v4[11] = v32;
      BOOL v33 = v3[12] != 0.0;
      if (v2 != 0.0) {
        BOOL v33 = 1;
      }
      if (v33) {
        double v34 = 1.0;
      }
      else {
        double v34 = 0.0;
      }
      v4[12] = v34;
      BOOL v35 = v3[13] != 0.0;
      if (v2 != 0.0) {
        BOOL v35 = 1;
      }
      if (v35) {
        double v36 = 1.0;
      }
      else {
        double v36 = 0.0;
      }
      v4[13] = v36;
      BOOL v37 = v3[14] != 0.0;
      if (v2 != 0.0) {
        BOOL v37 = 1;
      }
      if (v37) {
        double v38 = 1.0;
      }
      else {
        double v38 = 0.0;
      }
      v4[14] = v38;
      BOOL v39 = v3[15] != 0.0;
      if (v2 != 0.0) {
        BOOL v39 = 1;
      }
      if (v39) {
        double v40 = 1.0;
      }
      else {
        double v40 = 0.0;
      }
      v4[15] = v40;
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v8);
  }
  int v41 = (v5 & 0xF) - 1;
  unsigned int v42 = 0;
  unsigned int v43 = 0;
  unsigned int v44 = 0;
  unsigned int v45 = 0;
  unsigned int v46 = 0;
  unsigned int v47 = 0;
  unsigned int v48 = 0;
  unsigned int v49 = 0;
  unsigned int v50 = 0;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  switch(v41)
  {
    case 0:
      goto LABEL_187;
    case 1:
      goto LABEL_180;
    case 2:
      goto LABEL_173;
    case 3:
      goto LABEL_166;
    case 4:
      goto LABEL_159;
    case 5:
      goto LABEL_152;
    case 6:
      goto LABEL_145;
    case 7:
      goto LABEL_138;
    case 8:
      goto LABEL_131;
    case 9:
      goto LABEL_124;
    case 10:
      goto LABEL_117;
    case 11:
      goto LABEL_110;
    case 12:
      goto LABEL_103;
    case 13:
      goto LABEL_96;
    case 14:
      BOOL v56 = v2 == 0.0 && *v3 == 0.0;
      double v57 = 1.0;
      if (v56) {
        double v57 = 0.0;
      }
      *uint64_t v4 = v57;
      unsigned int v42 = 1;
LABEL_96:
      BOOL v58 = v2 == 0.0 && v3[v42] == 0.0;
      double v59 = 1.0;
      if (v58) {
        double v59 = 0.0;
      }
      v4[v42] = v59;
      unsigned int v43 = v42 + 1;
LABEL_103:
      BOOL v60 = v2 == 0.0 && v3[v43] == 0.0;
      double v61 = 1.0;
      if (v60) {
        double v61 = 0.0;
      }
      v4[v43] = v61;
      unsigned int v44 = v43 + 1;
LABEL_110:
      BOOL v62 = v2 == 0.0 && v3[v44] == 0.0;
      double v63 = 1.0;
      if (v62) {
        double v63 = 0.0;
      }
      v4[v44] = v63;
      unsigned int v45 = v44 + 1;
LABEL_117:
      BOOL v64 = v2 == 0.0 && v3[v45] == 0.0;
      double v65 = 1.0;
      if (v64) {
        double v65 = 0.0;
      }
      v4[v45] = v65;
      unsigned int v46 = v45 + 1;
LABEL_124:
      BOOL v66 = v2 == 0.0 && v3[v46] == 0.0;
      double v67 = 1.0;
      if (v66) {
        double v67 = 0.0;
      }
      v4[v46] = v67;
      unsigned int v47 = v46 + 1;
LABEL_131:
      BOOL v68 = v2 == 0.0 && v3[v47] == 0.0;
      double v69 = 1.0;
      if (v68) {
        double v69 = 0.0;
      }
      v4[v47] = v69;
      unsigned int v48 = v47 + 1;
LABEL_138:
      BOOL v70 = v2 == 0.0 && v3[v48] == 0.0;
      double v71 = 1.0;
      if (v70) {
        double v71 = 0.0;
      }
      v4[v48] = v71;
      unsigned int v49 = v48 + 1;
LABEL_145:
      BOOL v72 = v2 == 0.0 && v3[v49] == 0.0;
      double v73 = 1.0;
      if (v72) {
        double v73 = 0.0;
      }
      v4[v49] = v73;
      unsigned int v50 = v49 + 1;
LABEL_152:
      BOOL v74 = v2 == 0.0 && v3[v50] == 0.0;
      double v75 = 1.0;
      if (v74) {
        double v75 = 0.0;
      }
      v4[v50] = v75;
      uint64_t v51 = v50 + 1;
LABEL_159:
      BOOL v76 = v2 == 0.0 && v3[v51] == 0.0;
      double v77 = 1.0;
      if (v76) {
        double v77 = 0.0;
      }
      v4[v51] = v77;
      uint64_t v52 = (v51 + 1);
LABEL_166:
      BOOL v78 = v2 == 0.0 && v3[v52] == 0.0;
      double v79 = 1.0;
      if (v78) {
        double v79 = 0.0;
      }
      v4[v52] = v79;
      uint64_t v53 = (v52 + 1);
LABEL_173:
      BOOL v80 = v2 == 0.0 && v3[v53] == 0.0;
      double v81 = 1.0;
      if (v80) {
        double v81 = 0.0;
      }
      v4[v53] = v81;
      uint64_t v54 = (v53 + 1);
LABEL_180:
      BOOL v82 = v2 == 0.0 && v3[v54] == 0.0;
      double v83 = 1.0;
      if (v82) {
        double v83 = 0.0;
      }
      v4[v54] = v83;
      uint64_t v55 = (v54 + 1);
LABEL_187:
      BOOL v84 = v2 == 0.0 && v3[v55] == 0.0;
      double v85 = 1.0;
      if (v84) {
        double v85 = 0.0;
      }
      v4[v55] = v85;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v51, v52, v53, v54, v55)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v51, v52, v53, v54, v55)+ 16);
}

uint64_t sub_145038()
{
  return 139;
}

uint64_t sub_145040(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_145048(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_145050(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_145090(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_145098(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_1450A0(uint64_t a1)
{
  return sub_145144(a1 - 48);
}

void sub_1450A8(uint64_t a1)
{
  sub_145144(a1 - 48);

  operator delete();
}

uint64_t sub_1450E4(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 72))() + 8);
}

uint64_t sub_145124(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_14512C(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_145134(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_14513C(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_145144(uint64_t a1)
{
  *(void *)a1 = off_24065E0;
  *(void *)(a1 + 48) = off_2406640;
  if (*(void *)(a1 + 64)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 80);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 80) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 && *(unsigned char *)(a1 + 40))
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }
  return a1;
}

void sub_1452D8(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_24066C8;
  *(void *)(a1 + 48) = off_2406728;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  operator new();
}

void sub_1459C8(_Unwind_Exception *a1)
{
  sub_E26D8((uint64_t *)(v1 + 80));
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_145A94(uint64_t a1)
{
  sub_146228(a1);

  operator delete();
}

double sub_145ACC(uint64_t a1)
{
  if (!*(void *)(a1 + 56)) {
    return NAN;
  }
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  double v2 = (*(double (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
                  + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v5) << 32;
  if (v7 >= 1)
  {
    BOOL v8 = (double *)((char *)v3 + (v7 >> 29));
    do
    {
      BOOL v9 = *v3 != 0.0;
      if (v2 != 0.0) {
        BOOL v9 = 1;
      }
      if (v9) {
        double v10 = 0.0;
      }
      else {
        double v10 = 1.0;
      }
      *uint64_t v4 = v10;
      BOOL v11 = v3[1] != 0.0;
      if (v2 != 0.0) {
        BOOL v11 = 1;
      }
      if (v11) {
        double v12 = 0.0;
      }
      else {
        double v12 = 1.0;
      }
      v4[1] = v12;
      BOOL v13 = v3[2] != 0.0;
      if (v2 != 0.0) {
        BOOL v13 = 1;
      }
      if (v13) {
        double v14 = 0.0;
      }
      else {
        double v14 = 1.0;
      }
      v4[2] = v14;
      BOOL v15 = v3[3] != 0.0;
      if (v2 != 0.0) {
        BOOL v15 = 1;
      }
      if (v15) {
        double v16 = 0.0;
      }
      else {
        double v16 = 1.0;
      }
      v4[3] = v16;
      BOOL v17 = v3[4] != 0.0;
      if (v2 != 0.0) {
        BOOL v17 = 1;
      }
      if (v17) {
        double v18 = 0.0;
      }
      else {
        double v18 = 1.0;
      }
      v4[4] = v18;
      BOOL v19 = v3[5] != 0.0;
      if (v2 != 0.0) {
        BOOL v19 = 1;
      }
      if (v19) {
        double v20 = 0.0;
      }
      else {
        double v20 = 1.0;
      }
      v4[5] = v20;
      BOOL v21 = v3[6] != 0.0;
      if (v2 != 0.0) {
        BOOL v21 = 1;
      }
      if (v21) {
        double v22 = 0.0;
      }
      else {
        double v22 = 1.0;
      }
      v4[6] = v22;
      BOOL v23 = v3[7] != 0.0;
      if (v2 != 0.0) {
        BOOL v23 = 1;
      }
      if (v23) {
        double v24 = 0.0;
      }
      else {
        double v24 = 1.0;
      }
      v4[7] = v24;
      BOOL v25 = v3[8] != 0.0;
      if (v2 != 0.0) {
        BOOL v25 = 1;
      }
      if (v25) {
        double v26 = 0.0;
      }
      else {
        double v26 = 1.0;
      }
      v4[8] = v26;
      BOOL v27 = v3[9] != 0.0;
      if (v2 != 0.0) {
        BOOL v27 = 1;
      }
      if (v27) {
        double v28 = 0.0;
      }
      else {
        double v28 = 1.0;
      }
      v4[9] = v28;
      BOOL v29 = v3[10] != 0.0;
      if (v2 != 0.0) {
        BOOL v29 = 1;
      }
      if (v29) {
        double v30 = 0.0;
      }
      else {
        double v30 = 1.0;
      }
      v4[10] = v30;
      BOOL v31 = v3[11] != 0.0;
      if (v2 != 0.0) {
        BOOL v31 = 1;
      }
      if (v31) {
        double v32 = 0.0;
      }
      else {
        double v32 = 1.0;
      }
      v4[11] = v32;
      BOOL v33 = v3[12] != 0.0;
      if (v2 != 0.0) {
        BOOL v33 = 1;
      }
      if (v33) {
        double v34 = 0.0;
      }
      else {
        double v34 = 1.0;
      }
      v4[12] = v34;
      BOOL v35 = v3[13] != 0.0;
      if (v2 != 0.0) {
        BOOL v35 = 1;
      }
      if (v35) {
        double v36 = 0.0;
      }
      else {
        double v36 = 1.0;
      }
      v4[13] = v36;
      BOOL v37 = v3[14] != 0.0;
      if (v2 != 0.0) {
        BOOL v37 = 1;
      }
      if (v37) {
        double v38 = 0.0;
      }
      else {
        double v38 = 1.0;
      }
      v4[14] = v38;
      BOOL v39 = v3[15] != 0.0;
      if (v2 != 0.0) {
        BOOL v39 = 1;
      }
      if (v39) {
        double v40 = 0.0;
      }
      else {
        double v40 = 1.0;
      }
      v4[15] = v40;
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v8);
  }
  int v41 = (v5 & 0xF) - 1;
  unsigned int v42 = 0;
  unsigned int v43 = 0;
  unsigned int v44 = 0;
  unsigned int v45 = 0;
  unsigned int v46 = 0;
  unsigned int v47 = 0;
  unsigned int v48 = 0;
  unsigned int v49 = 0;
  unsigned int v50 = 0;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  switch(v41)
  {
    case 0:
      goto LABEL_173;
    case 1:
      goto LABEL_167;
    case 2:
      goto LABEL_161;
    case 3:
      goto LABEL_155;
    case 4:
      goto LABEL_149;
    case 5:
      goto LABEL_143;
    case 6:
      goto LABEL_137;
    case 7:
      goto LABEL_131;
    case 8:
      goto LABEL_125;
    case 9:
      goto LABEL_119;
    case 10:
      goto LABEL_113;
    case 11:
      goto LABEL_107;
    case 12:
      goto LABEL_101;
    case 13:
      goto LABEL_95;
    case 14:
      BOOL v56 = v2 == 0.0 && *v3 == 0.0;
      double v57 = 1.0;
      if (!v56) {
        double v57 = 0.0;
      }
      *uint64_t v4 = v57;
      unsigned int v42 = 1;
LABEL_95:
      BOOL v58 = v2 == 0.0 && v3[v42] == 0.0;
      double v59 = 1.0;
      if (!v58) {
        double v59 = 0.0;
      }
      v4[v42] = v59;
      unsigned int v43 = v42 + 1;
LABEL_101:
      BOOL v60 = v2 == 0.0 && v3[v43] == 0.0;
      double v61 = 1.0;
      if (!v60) {
        double v61 = 0.0;
      }
      v4[v43] = v61;
      unsigned int v44 = v43 + 1;
LABEL_107:
      BOOL v62 = v2 == 0.0 && v3[v44] == 0.0;
      double v63 = 1.0;
      if (!v62) {
        double v63 = 0.0;
      }
      v4[v44] = v63;
      unsigned int v45 = v44 + 1;
LABEL_113:
      BOOL v64 = v2 == 0.0 && v3[v45] == 0.0;
      double v65 = 1.0;
      if (!v64) {
        double v65 = 0.0;
      }
      v4[v45] = v65;
      unsigned int v46 = v45 + 1;
LABEL_119:
      BOOL v66 = v2 == 0.0 && v3[v46] == 0.0;
      double v67 = 1.0;
      if (!v66) {
        double v67 = 0.0;
      }
      v4[v46] = v67;
      unsigned int v47 = v46 + 1;
LABEL_125:
      BOOL v68 = v2 == 0.0 && v3[v47] == 0.0;
      double v69 = 1.0;
      if (!v68) {
        double v69 = 0.0;
      }
      v4[v47] = v69;
      unsigned int v48 = v47 + 1;
LABEL_131:
      BOOL v70 = v2 == 0.0 && v3[v48] == 0.0;
      double v71 = 1.0;
      if (!v70) {
        double v71 = 0.0;
      }
      v4[v48] = v71;
      unsigned int v49 = v48 + 1;
LABEL_137:
      BOOL v72 = v2 == 0.0 && v3[v49] == 0.0;
      double v73 = 1.0;
      if (!v72) {
        double v73 = 0.0;
      }
      v4[v49] = v73;
      unsigned int v50 = v49 + 1;
LABEL_143:
      BOOL v74 = v2 == 0.0 && v3[v50] == 0.0;
      double v75 = 1.0;
      if (!v74) {
        double v75 = 0.0;
      }
      v4[v50] = v75;
      uint64_t v51 = v50 + 1;
LABEL_149:
      BOOL v76 = v2 == 0.0 && v3[v51] == 0.0;
      double v77 = 1.0;
      if (!v76) {
        double v77 = 0.0;
      }
      v4[v51] = v77;
      uint64_t v52 = (v51 + 1);
LABEL_155:
      BOOL v78 = v2 == 0.0 && v3[v52] == 0.0;
      double v79 = 1.0;
      if (!v78) {
        double v79 = 0.0;
      }
      v4[v52] = v79;
      uint64_t v53 = (v52 + 1);
LABEL_161:
      BOOL v80 = v2 == 0.0 && v3[v53] == 0.0;
      double v81 = 1.0;
      if (!v80) {
        double v81 = 0.0;
      }
      v4[v53] = v81;
      uint64_t v54 = (v53 + 1);
LABEL_167:
      BOOL v82 = v2 == 0.0 && v3[v54] == 0.0;
      double v83 = 1.0;
      if (!v82) {
        double v83 = 0.0;
      }
      v4[v54] = v83;
      uint64_t v55 = (v54 + 1);
LABEL_173:
      BOOL v84 = v2 == 0.0 && v3[v55] == 0.0;
      double v85 = 1.0;
      if (!v84) {
        double v85 = 0.0;
      }
      v4[v55] = v85;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v51, v52, v53, v54, v55)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v51, v52, v53, v54, v55)+ 16);
}

uint64_t sub_14611C()
{
  return 139;
}

uint64_t sub_146124(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_14612C(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_146134(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_146174(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_14617C(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_146184(uint64_t a1)
{
  return sub_146228(a1 - 48);
}

void sub_14618C(uint64_t a1)
{
  sub_146228(a1 - 48);

  operator delete();
}

uint64_t sub_1461C8(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 72))() + 8);
}

uint64_t sub_146208(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_146210(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_146218(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_146220(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_146228(uint64_t a1)
{
  *(void *)a1 = off_24066C8;
  *(void *)(a1 + 48) = off_2406728;
  if (*(void *)(a1 + 64)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 80);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 80) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 && *(unsigned char *)(a1 + 40))
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }
  return a1;
}

void sub_1463BC(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_24067B0;
  *(void *)(a1 + 48) = off_2406810;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  operator new();
}

void sub_146AAC(_Unwind_Exception *a1)
{
  sub_E26D8((uint64_t *)(v1 + 80));
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_146B78(uint64_t a1)
{
  sub_1473C4(a1);

  operator delete();
}

double sub_146BB0(uint64_t a1)
{
  if (!*(void *)(a1 + 56)) {
    return NAN;
  }
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  double v2 = (*(double (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
                  + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v5) << 32;
  if (v7 >= 1)
  {
    BOOL v8 = (double *)((char *)v3 + (v7 >> 29));
    do
    {
      BOOL v9 = v2 == 0.0;
      if (v9 != (*v3 == 0.0)) {
        double v10 = 1.0;
      }
      else {
        double v10 = 0.0;
      }
      *uint64_t v4 = v10;
      if (v9 != (v3[1] == 0.0)) {
        double v11 = 1.0;
      }
      else {
        double v11 = 0.0;
      }
      v4[1] = v11;
      if (v9 != (v3[2] == 0.0)) {
        double v12 = 1.0;
      }
      else {
        double v12 = 0.0;
      }
      v4[2] = v12;
      if (v9 != (v3[3] == 0.0)) {
        double v13 = 1.0;
      }
      else {
        double v13 = 0.0;
      }
      v4[3] = v13;
      if (v9 != (v3[4] == 0.0)) {
        double v14 = 1.0;
      }
      else {
        double v14 = 0.0;
      }
      v4[4] = v14;
      if (v9 != (v3[5] == 0.0)) {
        double v15 = 1.0;
      }
      else {
        double v15 = 0.0;
      }
      v4[5] = v15;
      if (v9 != (v3[6] == 0.0)) {
        double v16 = 1.0;
      }
      else {
        double v16 = 0.0;
      }
      v4[6] = v16;
      if (v9 != (v3[7] == 0.0)) {
        double v17 = 1.0;
      }
      else {
        double v17 = 0.0;
      }
      v4[7] = v17;
      if (v9 != (v3[8] == 0.0)) {
        double v18 = 1.0;
      }
      else {
        double v18 = 0.0;
      }
      v4[8] = v18;
      if (v9 != (v3[9] == 0.0)) {
        double v19 = 1.0;
      }
      else {
        double v19 = 0.0;
      }
      v4[9] = v19;
      if (v9 != (v3[10] == 0.0)) {
        double v20 = 1.0;
      }
      else {
        double v20 = 0.0;
      }
      v4[10] = v20;
      if (v9 != (v3[11] == 0.0)) {
        double v21 = 1.0;
      }
      else {
        double v21 = 0.0;
      }
      v4[11] = v21;
      if (v9 != (v3[12] == 0.0)) {
        double v22 = 1.0;
      }
      else {
        double v22 = 0.0;
      }
      v4[12] = v22;
      if (v9 != (v3[13] == 0.0)) {
        double v23 = 1.0;
      }
      else {
        double v23 = 0.0;
      }
      v4[13] = v23;
      if (v9 != (v3[14] == 0.0)) {
        double v24 = 1.0;
      }
      else {
        double v24 = 0.0;
      }
      v4[14] = v24;
      if (v9 != (v3[15] == 0.0)) {
        double v25 = 1.0;
      }
      else {
        double v25 = 0.0;
      }
      v4[15] = v25;
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v8);
  }
  int v26 = (v5 & 0xF) - 1;
  unsigned int v27 = 0;
  unsigned int v28 = 0;
  unsigned int v29 = 0;
  unsigned int v30 = 0;
  unsigned int v31 = 0;
  unsigned int v32 = 0;
  unsigned int v33 = 0;
  unsigned int v34 = 0;
  unsigned int v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  switch(v26)
  {
    case 0:
      goto LABEL_99;
    case 1:
      goto LABEL_96;
    case 2:
      goto LABEL_93;
    case 3:
      goto LABEL_90;
    case 4:
      goto LABEL_87;
    case 5:
      goto LABEL_84;
    case 6:
      goto LABEL_81;
    case 7:
      goto LABEL_78;
    case 8:
      goto LABEL_75;
    case 9:
      goto LABEL_72;
    case 10:
      goto LABEL_69;
    case 11:
      goto LABEL_66;
    case 12:
      goto LABEL_63;
    case 13:
      goto LABEL_60;
    case 14:
      double v41 = 0.0;
      if ((v2 == 0.0) != (*v3 == 0.0)) {
        double v41 = 1.0;
      }
      *uint64_t v4 = v41;
      unsigned int v27 = 1;
LABEL_60:
      double v42 = 0.0;
      if ((v2 == 0.0) != (v3[v27] == 0.0)) {
        double v42 = 1.0;
      }
      v4[v27] = v42;
      unsigned int v28 = v27 + 1;
LABEL_63:
      double v43 = 0.0;
      if ((v2 == 0.0) != (v3[v28] == 0.0)) {
        double v43 = 1.0;
      }
      v4[v28] = v43;
      unsigned int v29 = v28 + 1;
LABEL_66:
      double v44 = 0.0;
      if ((v2 == 0.0) != (v3[v29] == 0.0)) {
        double v44 = 1.0;
      }
      v4[v29] = v44;
      unsigned int v30 = v29 + 1;
LABEL_69:
      double v45 = 0.0;
      if ((v2 == 0.0) != (v3[v30] == 0.0)) {
        double v45 = 1.0;
      }
      v4[v30] = v45;
      unsigned int v31 = v30 + 1;
LABEL_72:
      double v46 = 0.0;
      if ((v2 == 0.0) != (v3[v31] == 0.0)) {
        double v46 = 1.0;
      }
      v4[v31] = v46;
      unsigned int v32 = v31 + 1;
LABEL_75:
      double v47 = 0.0;
      if ((v2 == 0.0) != (v3[v32] == 0.0)) {
        double v47 = 1.0;
      }
      v4[v32] = v47;
      unsigned int v33 = v32 + 1;
LABEL_78:
      double v48 = 0.0;
      if ((v2 == 0.0) != (v3[v33] == 0.0)) {
        double v48 = 1.0;
      }
      v4[v33] = v48;
      unsigned int v34 = v33 + 1;
LABEL_81:
      double v49 = 0.0;
      if ((v2 == 0.0) != (v3[v34] == 0.0)) {
        double v49 = 1.0;
      }
      v4[v34] = v49;
      unsigned int v35 = v34 + 1;
LABEL_84:
      double v50 = 0.0;
      if ((v2 == 0.0) != (v3[v35] == 0.0)) {
        double v50 = 1.0;
      }
      v4[v35] = v50;
      uint64_t v36 = v35 + 1;
LABEL_87:
      double v51 = 0.0;
      if ((v2 == 0.0) != (v3[v36] == 0.0)) {
        double v51 = 1.0;
      }
      v4[v36] = v51;
      uint64_t v37 = (v36 + 1);
LABEL_90:
      double v52 = 0.0;
      if ((v2 == 0.0) != (v3[v37] == 0.0)) {
        double v52 = 1.0;
      }
      v4[v37] = v52;
      uint64_t v38 = (v37 + 1);
LABEL_93:
      double v53 = 0.0;
      if ((v2 == 0.0) != (v3[v38] == 0.0)) {
        double v53 = 1.0;
      }
      v4[v38] = v53;
      uint64_t v39 = (v38 + 1);
LABEL_96:
      double v54 = 0.0;
      if ((v2 == 0.0) != (v3[v39] == 0.0)) {
        double v54 = 1.0;
      }
      v4[v39] = v54;
      uint64_t v40 = (v39 + 1);
LABEL_99:
      double v55 = 0.0;
      if ((v2 == 0.0) != (v3[v40] == 0.0)) {
        double v55 = 1.0;
      }
      v4[v40] = v55;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v36, v37, v38, v39, v40)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v36, v37, v38, v39, v40)+ 16);
}

uint64_t sub_1472B8()
{
  return 139;
}

uint64_t sub_1472C0(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_1472C8(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_1472D0(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_147310(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_147318(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_147320(uint64_t a1)
{
  return sub_1473C4(a1 - 48);
}

void sub_147328(uint64_t a1)
{
  sub_1473C4(a1 - 48);

  operator delete();
}

uint64_t sub_147364(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 72))() + 8);
}

uint64_t sub_1473A4(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_1473AC(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_1473B4(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_1473BC(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_1473C4(uint64_t a1)
{
  *(void *)a1 = off_24067B0;
  *(void *)(a1 + 48) = off_2406810;
  if (*(void *)(a1 + 64)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 80);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 80) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 && *(unsigned char *)(a1 + 40))
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }
  return a1;
}

void sub_147558(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_2406898;
  *(void *)(a1 + 48) = off_24068F8;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  operator new();
}

void sub_147C48(_Unwind_Exception *a1)
{
  sub_E26D8((uint64_t *)(v1 + 80));
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_147D14(uint64_t a1)
{
  sub_148560(a1);

  operator delete();
}

double sub_147D4C(uint64_t a1)
{
  if (!*(void *)(a1 + 56)) {
    return NAN;
  }
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  double v2 = (*(double (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
                  + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v5) << 32;
  if (v7 >= 1)
  {
    BOOL v8 = (double *)((char *)v3 + (v7 >> 29));
    do
    {
      BOOL v9 = v2 != 0.0;
      if (v9 != (*v3 != 0.0)) {
        double v10 = 0.0;
      }
      else {
        double v10 = 1.0;
      }
      *uint64_t v4 = v10;
      if (v9 != (v3[1] != 0.0)) {
        double v11 = 0.0;
      }
      else {
        double v11 = 1.0;
      }
      v4[1] = v11;
      if (v9 != (v3[2] != 0.0)) {
        double v12 = 0.0;
      }
      else {
        double v12 = 1.0;
      }
      v4[2] = v12;
      if (v9 != (v3[3] != 0.0)) {
        double v13 = 0.0;
      }
      else {
        double v13 = 1.0;
      }
      v4[3] = v13;
      if (v9 != (v3[4] != 0.0)) {
        double v14 = 0.0;
      }
      else {
        double v14 = 1.0;
      }
      v4[4] = v14;
      if (v9 != (v3[5] != 0.0)) {
        double v15 = 0.0;
      }
      else {
        double v15 = 1.0;
      }
      v4[5] = v15;
      if (v9 != (v3[6] != 0.0)) {
        double v16 = 0.0;
      }
      else {
        double v16 = 1.0;
      }
      v4[6] = v16;
      if (v9 != (v3[7] != 0.0)) {
        double v17 = 0.0;
      }
      else {
        double v17 = 1.0;
      }
      v4[7] = v17;
      if (v9 != (v3[8] != 0.0)) {
        double v18 = 0.0;
      }
      else {
        double v18 = 1.0;
      }
      v4[8] = v18;
      if (v9 != (v3[9] != 0.0)) {
        double v19 = 0.0;
      }
      else {
        double v19 = 1.0;
      }
      v4[9] = v19;
      if (v9 != (v3[10] != 0.0)) {
        double v20 = 0.0;
      }
      else {
        double v20 = 1.0;
      }
      v4[10] = v20;
      if (v9 != (v3[11] != 0.0)) {
        double v21 = 0.0;
      }
      else {
        double v21 = 1.0;
      }
      v4[11] = v21;
      if (v9 != (v3[12] != 0.0)) {
        double v22 = 0.0;
      }
      else {
        double v22 = 1.0;
      }
      v4[12] = v22;
      if (v9 != (v3[13] != 0.0)) {
        double v23 = 0.0;
      }
      else {
        double v23 = 1.0;
      }
      v4[13] = v23;
      if (v9 != (v3[14] != 0.0)) {
        double v24 = 0.0;
      }
      else {
        double v24 = 1.0;
      }
      v4[14] = v24;
      if (v9 != (v3[15] != 0.0)) {
        double v25 = 0.0;
      }
      else {
        double v25 = 1.0;
      }
      v4[15] = v25;
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v8);
  }
  int v26 = (v5 & 0xF) - 1;
  unsigned int v27 = 0;
  unsigned int v28 = 0;
  unsigned int v29 = 0;
  unsigned int v30 = 0;
  unsigned int v31 = 0;
  unsigned int v32 = 0;
  unsigned int v33 = 0;
  unsigned int v34 = 0;
  unsigned int v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  switch(v26)
  {
    case 0:
      goto LABEL_99;
    case 1:
      goto LABEL_96;
    case 2:
      goto LABEL_93;
    case 3:
      goto LABEL_90;
    case 4:
      goto LABEL_87;
    case 5:
      goto LABEL_84;
    case 6:
      goto LABEL_81;
    case 7:
      goto LABEL_78;
    case 8:
      goto LABEL_75;
    case 9:
      goto LABEL_72;
    case 10:
      goto LABEL_69;
    case 11:
      goto LABEL_66;
    case 12:
      goto LABEL_63;
    case 13:
      goto LABEL_60;
    case 14:
      double v41 = 1.0;
      if ((v2 != 0.0) != (*v3 != 0.0)) {
        double v41 = 0.0;
      }
      *uint64_t v4 = v41;
      unsigned int v27 = 1;
LABEL_60:
      double v42 = 1.0;
      if ((v2 != 0.0) != (v3[v27] != 0.0)) {
        double v42 = 0.0;
      }
      v4[v27] = v42;
      unsigned int v28 = v27 + 1;
LABEL_63:
      double v43 = 1.0;
      if ((v2 != 0.0) != (v3[v28] != 0.0)) {
        double v43 = 0.0;
      }
      v4[v28] = v43;
      unsigned int v29 = v28 + 1;
LABEL_66:
      double v44 = 1.0;
      if ((v2 != 0.0) != (v3[v29] != 0.0)) {
        double v44 = 0.0;
      }
      v4[v29] = v44;
      unsigned int v30 = v29 + 1;
LABEL_69:
      double v45 = 1.0;
      if ((v2 != 0.0) != (v3[v30] != 0.0)) {
        double v45 = 0.0;
      }
      v4[v30] = v45;
      unsigned int v31 = v30 + 1;
LABEL_72:
      double v46 = 1.0;
      if ((v2 != 0.0) != (v3[v31] != 0.0)) {
        double v46 = 0.0;
      }
      v4[v31] = v46;
      unsigned int v32 = v31 + 1;
LABEL_75:
      double v47 = 1.0;
      if ((v2 != 0.0) != (v3[v32] != 0.0)) {
        double v47 = 0.0;
      }
      v4[v32] = v47;
      unsigned int v33 = v32 + 1;
LABEL_78:
      double v48 = 1.0;
      if ((v2 != 0.0) != (v3[v33] != 0.0)) {
        double v48 = 0.0;
      }
      v4[v33] = v48;
      unsigned int v34 = v33 + 1;
LABEL_81:
      double v49 = 1.0;
      if ((v2 != 0.0) != (v3[v34] != 0.0)) {
        double v49 = 0.0;
      }
      v4[v34] = v49;
      unsigned int v35 = v34 + 1;
LABEL_84:
      double v50 = 1.0;
      if ((v2 != 0.0) != (v3[v35] != 0.0)) {
        double v50 = 0.0;
      }
      v4[v35] = v50;
      uint64_t v36 = v35 + 1;
LABEL_87:
      double v51 = 1.0;
      if ((v2 != 0.0) != (v3[v36] != 0.0)) {
        double v51 = 0.0;
      }
      v4[v36] = v51;
      uint64_t v37 = (v36 + 1);
LABEL_90:
      double v52 = 1.0;
      if ((v2 != 0.0) != (v3[v37] != 0.0)) {
        double v52 = 0.0;
      }
      v4[v37] = v52;
      uint64_t v38 = (v37 + 1);
LABEL_93:
      double v53 = 1.0;
      if ((v2 != 0.0) != (v3[v38] != 0.0)) {
        double v53 = 0.0;
      }
      v4[v38] = v53;
      uint64_t v39 = (v38 + 1);
LABEL_96:
      double v54 = 1.0;
      if ((v2 != 0.0) != (v3[v39] != 0.0)) {
        double v54 = 0.0;
      }
      v4[v39] = v54;
      uint64_t v40 = (v39 + 1);
LABEL_99:
      double v55 = 1.0;
      if ((v2 != 0.0) != (v3[v40] != 0.0)) {
        double v55 = 0.0;
      }
      v4[v40] = v55;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v36, v37, v38, v39, v40)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v36, v37, v38, v39, v40)+ 16);
}

uint64_t sub_148454()
{
  return 139;
}

uint64_t sub_14845C(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_148464(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_14846C(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_1484AC(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_1484B4(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_1484BC(uint64_t a1)
{
  return sub_148560(a1 - 48);
}

void sub_1484C4(uint64_t a1)
{
  sub_148560(a1 - 48);

  operator delete();
}

uint64_t sub_148500(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 72))() + 8);
}

uint64_t sub_148540(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_148548(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_148550(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_148558(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_148560(uint64_t a1)
{
  *(void *)a1 = off_2406898;
  *(void *)(a1 + 48) = off_24068F8;
  if (*(void *)(a1 + 64)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 80);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 80) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 && *(unsigned char *)(a1 + 40))
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }
  return a1;
}

void sub_1486F4(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_2406980;
  *(void *)(a1 + 48) = off_24069E0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  operator new();
}

void sub_148DE4(_Unwind_Exception *a1)
{
  sub_E26D8((uint64_t *)(v1 + 80));
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_148EB0(uint64_t a1)
{
  sub_149508(a1);

  operator delete();
}

double sub_148EE8(uint64_t a1)
{
  if (!*(void *)(a1 + 56)) {
    return NAN;
  }
  double v2 = (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
                  + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v5) << 32;
  if (v7 >= 1)
  {
    BOOL v8 = (double *)((char *)v3 + (v7 >> 29));
    do
    {
      if (v2 >= *v4) {
        double v9 = 0.0;
      }
      else {
        double v9 = 1.0;
      }
      double *v3 = v9;
      if (v2 >= v4[1]) {
        double v10 = 0.0;
      }
      else {
        double v10 = 1.0;
      }
      v3[1] = v10;
      if (v2 >= v4[2]) {
        double v11 = 0.0;
      }
      else {
        double v11 = 1.0;
      }
      v3[2] = v11;
      if (v2 >= v4[3]) {
        double v12 = 0.0;
      }
      else {
        double v12 = 1.0;
      }
      v3[3] = v12;
      if (v2 >= v4[4]) {
        double v13 = 0.0;
      }
      else {
        double v13 = 1.0;
      }
      v3[4] = v13;
      if (v2 >= v4[5]) {
        double v14 = 0.0;
      }
      else {
        double v14 = 1.0;
      }
      v3[5] = v14;
      if (v2 >= v4[6]) {
        double v15 = 0.0;
      }
      else {
        double v15 = 1.0;
      }
      v3[6] = v15;
      if (v2 >= v4[7]) {
        double v16 = 0.0;
      }
      else {
        double v16 = 1.0;
      }
      v3[7] = v16;
      if (v2 >= v4[8]) {
        double v17 = 0.0;
      }
      else {
        double v17 = 1.0;
      }
      v3[8] = v17;
      if (v2 >= v4[9]) {
        double v18 = 0.0;
      }
      else {
        double v18 = 1.0;
      }
      v3[9] = v18;
      if (v2 >= v4[10]) {
        double v19 = 0.0;
      }
      else {
        double v19 = 1.0;
      }
      v3[10] = v19;
      if (v2 >= v4[11]) {
        double v20 = 0.0;
      }
      else {
        double v20 = 1.0;
      }
      v3[11] = v20;
      if (v2 >= v4[12]) {
        double v21 = 0.0;
      }
      else {
        double v21 = 1.0;
      }
      v3[12] = v21;
      if (v2 >= v4[13]) {
        double v22 = 0.0;
      }
      else {
        double v22 = 1.0;
      }
      v3[13] = v22;
      if (v2 >= v4[14]) {
        double v23 = 0.0;
      }
      else {
        double v23 = 1.0;
      }
      v3[14] = v23;
      if (v2 >= v4[15]) {
        double v24 = 0.0;
      }
      else {
        double v24 = 1.0;
      }
      v3[15] = v24;
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v8);
  }
  int v25 = (v5 & 0xF) - 1;
  unsigned int v26 = 0;
  unsigned int v27 = 0;
  unsigned int v28 = 0;
  unsigned int v29 = 0;
  unsigned int v30 = 0;
  unsigned int v31 = 0;
  unsigned int v32 = 0;
  unsigned int v33 = 0;
  unsigned int v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  switch(v25)
  {
    case 0:
      goto LABEL_99;
    case 1:
      goto LABEL_96;
    case 2:
      goto LABEL_93;
    case 3:
      goto LABEL_90;
    case 4:
      goto LABEL_87;
    case 5:
      goto LABEL_84;
    case 6:
      goto LABEL_81;
    case 7:
      goto LABEL_78;
    case 8:
      goto LABEL_75;
    case 9:
      goto LABEL_72;
    case 10:
      goto LABEL_69;
    case 11:
      goto LABEL_66;
    case 12:
      goto LABEL_63;
    case 13:
      goto LABEL_60;
    case 14:
      double v40 = 0.0;
      if (v2 < *v4) {
        double v40 = 1.0;
      }
      double *v3 = v40;
      unsigned int v26 = 1;
LABEL_60:
      double v41 = 0.0;
      if (v2 < v4[v26]) {
        double v41 = 1.0;
      }
      v3[v26] = v41;
      unsigned int v27 = v26 + 1;
LABEL_63:
      double v42 = 0.0;
      if (v2 < v4[v27]) {
        double v42 = 1.0;
      }
      v3[v27] = v42;
      unsigned int v28 = v27 + 1;
LABEL_66:
      double v43 = 0.0;
      if (v2 < v4[v28]) {
        double v43 = 1.0;
      }
      v3[v28] = v43;
      unsigned int v29 = v28 + 1;
LABEL_69:
      double v44 = 0.0;
      if (v2 < v4[v29]) {
        double v44 = 1.0;
      }
      v3[v29] = v44;
      unsigned int v30 = v29 + 1;
LABEL_72:
      double v45 = 0.0;
      if (v2 < v4[v30]) {
        double v45 = 1.0;
      }
      v3[v30] = v45;
      unsigned int v31 = v30 + 1;
LABEL_75:
      double v46 = 0.0;
      if (v2 < v4[v31]) {
        double v46 = 1.0;
      }
      v3[v31] = v46;
      unsigned int v32 = v31 + 1;
LABEL_78:
      double v47 = 0.0;
      if (v2 < v4[v32]) {
        double v47 = 1.0;
      }
      v3[v32] = v47;
      unsigned int v33 = v32 + 1;
LABEL_81:
      double v48 = 0.0;
      if (v2 < v4[v33]) {
        double v48 = 1.0;
      }
      v3[v33] = v48;
      unsigned int v34 = v33 + 1;
LABEL_84:
      double v49 = 0.0;
      if (v2 < v4[v34]) {
        double v49 = 1.0;
      }
      v3[v34] = v49;
      uint64_t v35 = v34 + 1;
LABEL_87:
      double v50 = 0.0;
      if (v2 < v4[v35]) {
        double v50 = 1.0;
      }
      v3[v35] = v50;
      uint64_t v36 = (v35 + 1);
LABEL_90:
      double v51 = 0.0;
      if (v2 < v4[v36]) {
        double v51 = 1.0;
      }
      v3[v36] = v51;
      uint64_t v37 = (v36 + 1);
LABEL_93:
      double v52 = 0.0;
      if (v2 < v4[v37]) {
        double v52 = 1.0;
      }
      v3[v37] = v52;
      uint64_t v38 = (v37 + 1);
LABEL_96:
      double v53 = 0.0;
      if (v2 < v4[v38]) {
        double v53 = 1.0;
      }
      v3[v38] = v53;
      uint64_t v39 = (v38 + 1);
LABEL_99:
      double v54 = 0.0;
      if (v2 < v4[v39]) {
        double v54 = 1.0;
      }
      v3[v39] = v54;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v35, v36, v37, v38, v39)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v35, v36, v37, v38, v39)+ 16);
}

uint64_t sub_1493FC()
{
  return 139;
}

uint64_t sub_149404(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_14940C(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_149414(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_149454(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_14945C(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_149464(uint64_t a1)
{
  return sub_149508(a1 - 48);
}

void sub_14946C(uint64_t a1)
{
  sub_149508(a1 - 48);

  operator delete();
}

uint64_t sub_1494A8(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 72))() + 8);
}

uint64_t sub_1494E8(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_1494F0(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_1494F8(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_149500(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_149508(uint64_t a1)
{
  *(void *)a1 = off_2406980;
  *(void *)(a1 + 48) = off_24069E0;
  if (*(void *)(a1 + 64)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 80);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 80) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 && *(unsigned char *)(a1 + 40))
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }
  return a1;
}

void sub_14969C(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_2406A68;
  *(void *)(a1 + 48) = off_2406AC8;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  operator new();
}

void sub_149D8C(_Unwind_Exception *a1)
{
  sub_E26D8((uint64_t *)(v1 + 80));
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_149E58(uint64_t a1)
{
  sub_14A4B0(a1);

  operator delete();
}

double sub_149E90(uint64_t a1)
{
  if (!*(void *)(a1 + 56)) {
    return NAN;
  }
  double v2 = (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
                  + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v5) << 32;
  if (v7 >= 1)
  {
    BOOL v8 = (double *)((char *)v3 + (v7 >> 29));
    do
    {
      if (v2 > *v4) {
        double v9 = 0.0;
      }
      else {
        double v9 = 1.0;
      }
      double *v3 = v9;
      if (v2 > v4[1]) {
        double v10 = 0.0;
      }
      else {
        double v10 = 1.0;
      }
      v3[1] = v10;
      if (v2 > v4[2]) {
        double v11 = 0.0;
      }
      else {
        double v11 = 1.0;
      }
      v3[2] = v11;
      if (v2 > v4[3]) {
        double v12 = 0.0;
      }
      else {
        double v12 = 1.0;
      }
      v3[3] = v12;
      if (v2 > v4[4]) {
        double v13 = 0.0;
      }
      else {
        double v13 = 1.0;
      }
      v3[4] = v13;
      if (v2 > v4[5]) {
        double v14 = 0.0;
      }
      else {
        double v14 = 1.0;
      }
      v3[5] = v14;
      if (v2 > v4[6]) {
        double v15 = 0.0;
      }
      else {
        double v15 = 1.0;
      }
      v3[6] = v15;
      if (v2 > v4[7]) {
        double v16 = 0.0;
      }
      else {
        double v16 = 1.0;
      }
      v3[7] = v16;
      if (v2 > v4[8]) {
        double v17 = 0.0;
      }
      else {
        double v17 = 1.0;
      }
      v3[8] = v17;
      if (v2 > v4[9]) {
        double v18 = 0.0;
      }
      else {
        double v18 = 1.0;
      }
      v3[9] = v18;
      if (v2 > v4[10]) {
        double v19 = 0.0;
      }
      else {
        double v19 = 1.0;
      }
      v3[10] = v19;
      if (v2 > v4[11]) {
        double v20 = 0.0;
      }
      else {
        double v20 = 1.0;
      }
      v3[11] = v20;
      if (v2 > v4[12]) {
        double v21 = 0.0;
      }
      else {
        double v21 = 1.0;
      }
      v3[12] = v21;
      if (v2 > v4[13]) {
        double v22 = 0.0;
      }
      else {
        double v22 = 1.0;
      }
      v3[13] = v22;
      if (v2 > v4[14]) {
        double v23 = 0.0;
      }
      else {
        double v23 = 1.0;
      }
      v3[14] = v23;
      if (v2 > v4[15]) {
        double v24 = 0.0;
      }
      else {
        double v24 = 1.0;
      }
      v3[15] = v24;
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v8);
  }
  int v25 = (v5 & 0xF) - 1;
  unsigned int v26 = 0;
  unsigned int v27 = 0;
  unsigned int v28 = 0;
  unsigned int v29 = 0;
  unsigned int v30 = 0;
  unsigned int v31 = 0;
  unsigned int v32 = 0;
  unsigned int v33 = 0;
  unsigned int v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  switch(v25)
  {
    case 0:
      goto LABEL_99;
    case 1:
      goto LABEL_96;
    case 2:
      goto LABEL_93;
    case 3:
      goto LABEL_90;
    case 4:
      goto LABEL_87;
    case 5:
      goto LABEL_84;
    case 6:
      goto LABEL_81;
    case 7:
      goto LABEL_78;
    case 8:
      goto LABEL_75;
    case 9:
      goto LABEL_72;
    case 10:
      goto LABEL_69;
    case 11:
      goto LABEL_66;
    case 12:
      goto LABEL_63;
    case 13:
      goto LABEL_60;
    case 14:
      double v40 = 0.0;
      if (v2 <= *v4) {
        double v40 = 1.0;
      }
      double *v3 = v40;
      unsigned int v26 = 1;
LABEL_60:
      double v41 = 0.0;
      if (v2 <= v4[v26]) {
        double v41 = 1.0;
      }
      v3[v26] = v41;
      unsigned int v27 = v26 + 1;
LABEL_63:
      double v42 = 0.0;
      if (v2 <= v4[v27]) {
        double v42 = 1.0;
      }
      v3[v27] = v42;
      unsigned int v28 = v27 + 1;
LABEL_66:
      double v43 = 0.0;
      if (v2 <= v4[v28]) {
        double v43 = 1.0;
      }
      v3[v28] = v43;
      unsigned int v29 = v28 + 1;
LABEL_69:
      double v44 = 0.0;
      if (v2 <= v4[v29]) {
        double v44 = 1.0;
      }
      v3[v29] = v44;
      unsigned int v30 = v29 + 1;
LABEL_72:
      double v45 = 0.0;
      if (v2 <= v4[v30]) {
        double v45 = 1.0;
      }
      v3[v30] = v45;
      unsigned int v31 = v30 + 1;
LABEL_75:
      double v46 = 0.0;
      if (v2 <= v4[v31]) {
        double v46 = 1.0;
      }
      v3[v31] = v46;
      unsigned int v32 = v31 + 1;
LABEL_78:
      double v47 = 0.0;
      if (v2 <= v4[v32]) {
        double v47 = 1.0;
      }
      v3[v32] = v47;
      unsigned int v33 = v32 + 1;
LABEL_81:
      double v48 = 0.0;
      if (v2 <= v4[v33]) {
        double v48 = 1.0;
      }
      v3[v33] = v48;
      unsigned int v34 = v33 + 1;
LABEL_84:
      double v49 = 0.0;
      if (v2 <= v4[v34]) {
        double v49 = 1.0;
      }
      v3[v34] = v49;
      uint64_t v35 = v34 + 1;
LABEL_87:
      double v50 = 0.0;
      if (v2 <= v4[v35]) {
        double v50 = 1.0;
      }
      v3[v35] = v50;
      uint64_t v36 = (v35 + 1);
LABEL_90:
      double v51 = 0.0;
      if (v2 <= v4[v36]) {
        double v51 = 1.0;
      }
      v3[v36] = v51;
      uint64_t v37 = (v36 + 1);
LABEL_93:
      double v52 = 0.0;
      if (v2 <= v4[v37]) {
        double v52 = 1.0;
      }
      v3[v37] = v52;
      uint64_t v38 = (v37 + 1);
LABEL_96:
      double v53 = 0.0;
      if (v2 <= v4[v38]) {
        double v53 = 1.0;
      }
      v3[v38] = v53;
      uint64_t v39 = (v38 + 1);
LABEL_99:
      double v54 = 0.0;
      if (v2 <= v4[v39]) {
        double v54 = 1.0;
      }
      v3[v39] = v54;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v35, v36, v37, v38, v39)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v35, v36, v37, v38, v39)+ 16);
}

uint64_t sub_14A3A4()
{
  return 139;
}

uint64_t sub_14A3AC(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_14A3B4(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_14A3BC(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_14A3FC(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_14A404(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_14A40C(uint64_t a1)
{
  return sub_14A4B0(a1 - 48);
}

void sub_14A414(uint64_t a1)
{
  sub_14A4B0(a1 - 48);

  operator delete();
}

uint64_t sub_14A450(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 72))() + 8);
}

uint64_t sub_14A490(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_14A498(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_14A4A0(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_14A4A8(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_14A4B0(uint64_t a1)
{
  *(void *)a1 = off_2406A68;
  *(void *)(a1 + 48) = off_2406AC8;
  if (*(void *)(a1 + 64)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 80);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 80) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 && *(unsigned char *)(a1 + 40))
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }
  return a1;
}

void sub_14A644(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_2406B50;
  *(void *)(a1 + 48) = off_2406BB0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  operator new();
}

void sub_14AD34(_Unwind_Exception *a1)
{
  sub_E26D8((uint64_t *)(v1 + 80));
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_14AE00(uint64_t a1)
{
  sub_14B458(a1);

  operator delete();
}

double sub_14AE38(uint64_t a1)
{
  if (!*(void *)(a1 + 56)) {
    return NAN;
  }
  double v2 = (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
                  + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v5) << 32;
  if (v7 >= 1)
  {
    BOOL v8 = (double *)((char *)v3 + (v7 >> 29));
    do
    {
      if (v2 <= *v4) {
        double v9 = 0.0;
      }
      else {
        double v9 = 1.0;
      }
      double *v3 = v9;
      if (v2 <= v4[1]) {
        double v10 = 0.0;
      }
      else {
        double v10 = 1.0;
      }
      v3[1] = v10;
      if (v2 <= v4[2]) {
        double v11 = 0.0;
      }
      else {
        double v11 = 1.0;
      }
      v3[2] = v11;
      if (v2 <= v4[3]) {
        double v12 = 0.0;
      }
      else {
        double v12 = 1.0;
      }
      v3[3] = v12;
      if (v2 <= v4[4]) {
        double v13 = 0.0;
      }
      else {
        double v13 = 1.0;
      }
      v3[4] = v13;
      if (v2 <= v4[5]) {
        double v14 = 0.0;
      }
      else {
        double v14 = 1.0;
      }
      v3[5] = v14;
      if (v2 <= v4[6]) {
        double v15 = 0.0;
      }
      else {
        double v15 = 1.0;
      }
      v3[6] = v15;
      if (v2 <= v4[7]) {
        double v16 = 0.0;
      }
      else {
        double v16 = 1.0;
      }
      v3[7] = v16;
      if (v2 <= v4[8]) {
        double v17 = 0.0;
      }
      else {
        double v17 = 1.0;
      }
      v3[8] = v17;
      if (v2 <= v4[9]) {
        double v18 = 0.0;
      }
      else {
        double v18 = 1.0;
      }
      v3[9] = v18;
      if (v2 <= v4[10]) {
        double v19 = 0.0;
      }
      else {
        double v19 = 1.0;
      }
      v3[10] = v19;
      if (v2 <= v4[11]) {
        double v20 = 0.0;
      }
      else {
        double v20 = 1.0;
      }
      v3[11] = v20;
      if (v2 <= v4[12]) {
        double v21 = 0.0;
      }
      else {
        double v21 = 1.0;
      }
      v3[12] = v21;
      if (v2 <= v4[13]) {
        double v22 = 0.0;
      }
      else {
        double v22 = 1.0;
      }
      v3[13] = v22;
      if (v2 <= v4[14]) {
        double v23 = 0.0;
      }
      else {
        double v23 = 1.0;
      }
      v3[14] = v23;
      if (v2 <= v4[15]) {
        double v24 = 0.0;
      }
      else {
        double v24 = 1.0;
      }
      v3[15] = v24;
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v8);
  }
  int v25 = (v5 & 0xF) - 1;
  unsigned int v26 = 0;
  unsigned int v27 = 0;
  unsigned int v28 = 0;
  unsigned int v29 = 0;
  unsigned int v30 = 0;
  unsigned int v31 = 0;
  unsigned int v32 = 0;
  unsigned int v33 = 0;
  unsigned int v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  switch(v25)
  {
    case 0:
      goto LABEL_99;
    case 1:
      goto LABEL_96;
    case 2:
      goto LABEL_93;
    case 3:
      goto LABEL_90;
    case 4:
      goto LABEL_87;
    case 5:
      goto LABEL_84;
    case 6:
      goto LABEL_81;
    case 7:
      goto LABEL_78;
    case 8:
      goto LABEL_75;
    case 9:
      goto LABEL_72;
    case 10:
      goto LABEL_69;
    case 11:
      goto LABEL_66;
    case 12:
      goto LABEL_63;
    case 13:
      goto LABEL_60;
    case 14:
      double v40 = 0.0;
      if (v2 > *v4) {
        double v40 = 1.0;
      }
      double *v3 = v40;
      unsigned int v26 = 1;
LABEL_60:
      double v41 = 0.0;
      if (v2 > v4[v26]) {
        double v41 = 1.0;
      }
      v3[v26] = v41;
      unsigned int v27 = v26 + 1;
LABEL_63:
      double v42 = 0.0;
      if (v2 > v4[v27]) {
        double v42 = 1.0;
      }
      v3[v27] = v42;
      unsigned int v28 = v27 + 1;
LABEL_66:
      double v43 = 0.0;
      if (v2 > v4[v28]) {
        double v43 = 1.0;
      }
      v3[v28] = v43;
      unsigned int v29 = v28 + 1;
LABEL_69:
      double v44 = 0.0;
      if (v2 > v4[v29]) {
        double v44 = 1.0;
      }
      v3[v29] = v44;
      unsigned int v30 = v29 + 1;
LABEL_72:
      double v45 = 0.0;
      if (v2 > v4[v30]) {
        double v45 = 1.0;
      }
      v3[v30] = v45;
      unsigned int v31 = v30 + 1;
LABEL_75:
      double v46 = 0.0;
      if (v2 > v4[v31]) {
        double v46 = 1.0;
      }
      v3[v31] = v46;
      unsigned int v32 = v31 + 1;
LABEL_78:
      double v47 = 0.0;
      if (v2 > v4[v32]) {
        double v47 = 1.0;
      }
      v3[v32] = v47;
      unsigned int v33 = v32 + 1;
LABEL_81:
      double v48 = 0.0;
      if (v2 > v4[v33]) {
        double v48 = 1.0;
      }
      v3[v33] = v48;
      unsigned int v34 = v33 + 1;
LABEL_84:
      double v49 = 0.0;
      if (v2 > v4[v34]) {
        double v49 = 1.0;
      }
      v3[v34] = v49;
      uint64_t v35 = v34 + 1;
LABEL_87:
      double v50 = 0.0;
      if (v2 > v4[v35]) {
        double v50 = 1.0;
      }
      v3[v35] = v50;
      uint64_t v36 = (v35 + 1);
LABEL_90:
      double v51 = 0.0;
      if (v2 > v4[v36]) {
        double v51 = 1.0;
      }
      v3[v36] = v51;
      uint64_t v37 = (v36 + 1);
LABEL_93:
      double v52 = 0.0;
      if (v2 > v4[v37]) {
        double v52 = 1.0;
      }
      v3[v37] = v52;
      uint64_t v38 = (v37 + 1);
LABEL_96:
      double v53 = 0.0;
      if (v2 > v4[v38]) {
        double v53 = 1.0;
      }
      v3[v38] = v53;
      uint64_t v39 = (v38 + 1);
LABEL_99:
      double v54 = 0.0;
      if (v2 > v4[v39]) {
        double v54 = 1.0;
      }
      v3[v39] = v54;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v35, v36, v37, v38, v39)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v35, v36, v37, v38, v39)+ 16);
}

uint64_t sub_14B34C()
{
  return 139;
}

uint64_t sub_14B354(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_14B35C(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_14B364(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_14B3A4(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_14B3AC(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_14B3B4(uint64_t a1)
{
  return sub_14B458(a1 - 48);
}

void sub_14B3BC(uint64_t a1)
{
  sub_14B458(a1 - 48);

  operator delete();
}

uint64_t sub_14B3F8(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 72))() + 8);
}

uint64_t sub_14B438(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_14B440(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_14B448(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_14B450(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_14B458(uint64_t a1)
{
  *(void *)a1 = off_2406B50;
  *(void *)(a1 + 48) = off_2406BB0;
  if (*(void *)(a1 + 64)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 80);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 80) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 && *(unsigned char *)(a1 + 40))
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }
  return a1;
}

void sub_14B5EC(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_2406C38;
  *(void *)(a1 + 48) = off_2406C98;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  operator new();
}

void sub_14BCDC(_Unwind_Exception *a1)
{
  sub_E26D8((uint64_t *)(v1 + 80));
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_14BDA8(uint64_t a1)
{
  sub_14C400(a1);

  operator delete();
}

double sub_14BDE0(uint64_t a1)
{
  if (!*(void *)(a1 + 56)) {
    return NAN;
  }
  double v2 = (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
                  + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v5) << 32;
  if (v7 >= 1)
  {
    BOOL v8 = (double *)((char *)v3 + (v7 >> 29));
    do
    {
      if (v2 < *v4) {
        double v9 = 0.0;
      }
      else {
        double v9 = 1.0;
      }
      double *v3 = v9;
      if (v2 < v4[1]) {
        double v10 = 0.0;
      }
      else {
        double v10 = 1.0;
      }
      v3[1] = v10;
      if (v2 < v4[2]) {
        double v11 = 0.0;
      }
      else {
        double v11 = 1.0;
      }
      v3[2] = v11;
      if (v2 < v4[3]) {
        double v12 = 0.0;
      }
      else {
        double v12 = 1.0;
      }
      v3[3] = v12;
      if (v2 < v4[4]) {
        double v13 = 0.0;
      }
      else {
        double v13 = 1.0;
      }
      v3[4] = v13;
      if (v2 < v4[5]) {
        double v14 = 0.0;
      }
      else {
        double v14 = 1.0;
      }
      v3[5] = v14;
      if (v2 < v4[6]) {
        double v15 = 0.0;
      }
      else {
        double v15 = 1.0;
      }
      v3[6] = v15;
      if (v2 < v4[7]) {
        double v16 = 0.0;
      }
      else {
        double v16 = 1.0;
      }
      v3[7] = v16;
      if (v2 < v4[8]) {
        double v17 = 0.0;
      }
      else {
        double v17 = 1.0;
      }
      v3[8] = v17;
      if (v2 < v4[9]) {
        double v18 = 0.0;
      }
      else {
        double v18 = 1.0;
      }
      v3[9] = v18;
      if (v2 < v4[10]) {
        double v19 = 0.0;
      }
      else {
        double v19 = 1.0;
      }
      v3[10] = v19;
      if (v2 < v4[11]) {
        double v20 = 0.0;
      }
      else {
        double v20 = 1.0;
      }
      v3[11] = v20;
      if (v2 < v4[12]) {
        double v21 = 0.0;
      }
      else {
        double v21 = 1.0;
      }
      v3[12] = v21;
      if (v2 < v4[13]) {
        double v22 = 0.0;
      }
      else {
        double v22 = 1.0;
      }
      v3[13] = v22;
      if (v2 < v4[14]) {
        double v23 = 0.0;
      }
      else {
        double v23 = 1.0;
      }
      v3[14] = v23;
      if (v2 < v4[15]) {
        double v24 = 0.0;
      }
      else {
        double v24 = 1.0;
      }
      v3[15] = v24;
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v8);
  }
  int v25 = (v5 & 0xF) - 1;
  unsigned int v26 = 0;
  unsigned int v27 = 0;
  unsigned int v28 = 0;
  unsigned int v29 = 0;
  unsigned int v30 = 0;
  unsigned int v31 = 0;
  unsigned int v32 = 0;
  unsigned int v33 = 0;
  unsigned int v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  switch(v25)
  {
    case 0:
      goto LABEL_99;
    case 1:
      goto LABEL_96;
    case 2:
      goto LABEL_93;
    case 3:
      goto LABEL_90;
    case 4:
      goto LABEL_87;
    case 5:
      goto LABEL_84;
    case 6:
      goto LABEL_81;
    case 7:
      goto LABEL_78;
    case 8:
      goto LABEL_75;
    case 9:
      goto LABEL_72;
    case 10:
      goto LABEL_69;
    case 11:
      goto LABEL_66;
    case 12:
      goto LABEL_63;
    case 13:
      goto LABEL_60;
    case 14:
      double v40 = 0.0;
      if (v2 >= *v4) {
        double v40 = 1.0;
      }
      double *v3 = v40;
      unsigned int v26 = 1;
LABEL_60:
      double v41 = 0.0;
      if (v2 >= v4[v26]) {
        double v41 = 1.0;
      }
      v3[v26] = v41;
      unsigned int v27 = v26 + 1;
LABEL_63:
      double v42 = 0.0;
      if (v2 >= v4[v27]) {
        double v42 = 1.0;
      }
      v3[v27] = v42;
      unsigned int v28 = v27 + 1;
LABEL_66:
      double v43 = 0.0;
      if (v2 >= v4[v28]) {
        double v43 = 1.0;
      }
      v3[v28] = v43;
      unsigned int v29 = v28 + 1;
LABEL_69:
      double v44 = 0.0;
      if (v2 >= v4[v29]) {
        double v44 = 1.0;
      }
      v3[v29] = v44;
      unsigned int v30 = v29 + 1;
LABEL_72:
      double v45 = 0.0;
      if (v2 >= v4[v30]) {
        double v45 = 1.0;
      }
      v3[v30] = v45;
      unsigned int v31 = v30 + 1;
LABEL_75:
      double v46 = 0.0;
      if (v2 >= v4[v31]) {
        double v46 = 1.0;
      }
      v3[v31] = v46;
      unsigned int v32 = v31 + 1;
LABEL_78:
      double v47 = 0.0;
      if (v2 >= v4[v32]) {
        double v47 = 1.0;
      }
      v3[v32] = v47;
      unsigned int v33 = v32 + 1;
LABEL_81:
      double v48 = 0.0;
      if (v2 >= v4[v33]) {
        double v48 = 1.0;
      }
      v3[v33] = v48;
      unsigned int v34 = v33 + 1;
LABEL_84:
      double v49 = 0.0;
      if (v2 >= v4[v34]) {
        double v49 = 1.0;
      }
      v3[v34] = v49;
      uint64_t v35 = v34 + 1;
LABEL_87:
      double v50 = 0.0;
      if (v2 >= v4[v35]) {
        double v50 = 1.0;
      }
      v3[v35] = v50;
      uint64_t v36 = (v35 + 1);
LABEL_90:
      double v51 = 0.0;
      if (v2 >= v4[v36]) {
        double v51 = 1.0;
      }
      v3[v36] = v51;
      uint64_t v37 = (v36 + 1);
LABEL_93:
      double v52 = 0.0;
      if (v2 >= v4[v37]) {
        double v52 = 1.0;
      }
      v3[v37] = v52;
      uint64_t v38 = (v37 + 1);
LABEL_96:
      double v53 = 0.0;
      if (v2 >= v4[v38]) {
        double v53 = 1.0;
      }
      v3[v38] = v53;
      uint64_t v39 = (v38 + 1);
LABEL_99:
      double v54 = 0.0;
      if (v2 >= v4[v39]) {
        double v54 = 1.0;
      }
      v3[v39] = v54;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v35, v36, v37, v38, v39)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v35, v36, v37, v38, v39)+ 16);
}

uint64_t sub_14C2F4()
{
  return 139;
}

uint64_t sub_14C2FC(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_14C304(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_14C30C(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_14C34C(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_14C354(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_14C35C(uint64_t a1)
{
  return sub_14C400(a1 - 48);
}

void sub_14C364(uint64_t a1)
{
  sub_14C400(a1 - 48);

  operator delete();
}

uint64_t sub_14C3A0(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 72))() + 8);
}

uint64_t sub_14C3E0(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_14C3E8(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_14C3F0(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_14C3F8(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_14C400(uint64_t a1)
{
  *(void *)a1 = off_2406C38;
  *(void *)(a1 + 48) = off_2406C98;
  if (*(void *)(a1 + 64)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 80);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 80) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 && *(unsigned char *)(a1 + 40))
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }
  return a1;
}

void sub_14C594(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_2406D20;
  *(void *)(a1 + 48) = off_2406D80;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  operator new();
}

void sub_14CC84(_Unwind_Exception *a1)
{
  sub_E26D8((uint64_t *)(v1 + 80));
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_14CD50(uint64_t a1)
{
  sub_14D3A8(a1);

  operator delete();
}

double sub_14CD88(uint64_t a1)
{
  if (!*(void *)(a1 + 56)) {
    return NAN;
  }
  double v2 = (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
                  + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v5) << 32;
  if (v7 >= 1)
  {
    BOOL v8 = (double *)((char *)v3 + (v7 >> 29));
    do
    {
      if (v2 == *v4) {
        double v9 = 1.0;
      }
      else {
        double v9 = 0.0;
      }
      double *v3 = v9;
      if (v2 == v4[1]) {
        double v10 = 1.0;
      }
      else {
        double v10 = 0.0;
      }
      v3[1] = v10;
      if (v2 == v4[2]) {
        double v11 = 1.0;
      }
      else {
        double v11 = 0.0;
      }
      v3[2] = v11;
      if (v2 == v4[3]) {
        double v12 = 1.0;
      }
      else {
        double v12 = 0.0;
      }
      v3[3] = v12;
      if (v2 == v4[4]) {
        double v13 = 1.0;
      }
      else {
        double v13 = 0.0;
      }
      v3[4] = v13;
      if (v2 == v4[5]) {
        double v14 = 1.0;
      }
      else {
        double v14 = 0.0;
      }
      v3[5] = v14;
      if (v2 == v4[6]) {
        double v15 = 1.0;
      }
      else {
        double v15 = 0.0;
      }
      v3[6] = v15;
      if (v2 == v4[7]) {
        double v16 = 1.0;
      }
      else {
        double v16 = 0.0;
      }
      v3[7] = v16;
      if (v2 == v4[8]) {
        double v17 = 1.0;
      }
      else {
        double v17 = 0.0;
      }
      v3[8] = v17;
      if (v2 == v4[9]) {
        double v18 = 1.0;
      }
      else {
        double v18 = 0.0;
      }
      v3[9] = v18;
      if (v2 == v4[10]) {
        double v19 = 1.0;
      }
      else {
        double v19 = 0.0;
      }
      v3[10] = v19;
      if (v2 == v4[11]) {
        double v20 = 1.0;
      }
      else {
        double v20 = 0.0;
      }
      v3[11] = v20;
      if (v2 == v4[12]) {
        double v21 = 1.0;
      }
      else {
        double v21 = 0.0;
      }
      v3[12] = v21;
      if (v2 == v4[13]) {
        double v22 = 1.0;
      }
      else {
        double v22 = 0.0;
      }
      v3[13] = v22;
      if (v2 == v4[14]) {
        double v23 = 1.0;
      }
      else {
        double v23 = 0.0;
      }
      v3[14] = v23;
      if (v2 == v4[15]) {
        double v24 = 1.0;
      }
      else {
        double v24 = 0.0;
      }
      v3[15] = v24;
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v8);
  }
  int v25 = (v5 & 0xF) - 1;
  unsigned int v26 = 0;
  unsigned int v27 = 0;
  unsigned int v28 = 0;
  unsigned int v29 = 0;
  unsigned int v30 = 0;
  unsigned int v31 = 0;
  unsigned int v32 = 0;
  unsigned int v33 = 0;
  unsigned int v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  switch(v25)
  {
    case 0:
      goto LABEL_99;
    case 1:
      goto LABEL_96;
    case 2:
      goto LABEL_93;
    case 3:
      goto LABEL_90;
    case 4:
      goto LABEL_87;
    case 5:
      goto LABEL_84;
    case 6:
      goto LABEL_81;
    case 7:
      goto LABEL_78;
    case 8:
      goto LABEL_75;
    case 9:
      goto LABEL_72;
    case 10:
      goto LABEL_69;
    case 11:
      goto LABEL_66;
    case 12:
      goto LABEL_63;
    case 13:
      goto LABEL_60;
    case 14:
      double v40 = 0.0;
      if (v2 == *v4) {
        double v40 = 1.0;
      }
      double *v3 = v40;
      unsigned int v26 = 1;
LABEL_60:
      double v41 = 0.0;
      if (v2 == v4[v26]) {
        double v41 = 1.0;
      }
      v3[v26] = v41;
      unsigned int v27 = v26 + 1;
LABEL_63:
      double v42 = 0.0;
      if (v2 == v4[v27]) {
        double v42 = 1.0;
      }
      v3[v27] = v42;
      unsigned int v28 = v27 + 1;
LABEL_66:
      double v43 = 0.0;
      if (v2 == v4[v28]) {
        double v43 = 1.0;
      }
      v3[v28] = v43;
      unsigned int v29 = v28 + 1;
LABEL_69:
      double v44 = 0.0;
      if (v2 == v4[v29]) {
        double v44 = 1.0;
      }
      v3[v29] = v44;
      unsigned int v30 = v29 + 1;
LABEL_72:
      double v45 = 0.0;
      if (v2 == v4[v30]) {
        double v45 = 1.0;
      }
      v3[v30] = v45;
      unsigned int v31 = v30 + 1;
LABEL_75:
      double v46 = 0.0;
      if (v2 == v4[v31]) {
        double v46 = 1.0;
      }
      v3[v31] = v46;
      unsigned int v32 = v31 + 1;
LABEL_78:
      double v47 = 0.0;
      if (v2 == v4[v32]) {
        double v47 = 1.0;
      }
      v3[v32] = v47;
      unsigned int v33 = v32 + 1;
LABEL_81:
      double v48 = 0.0;
      if (v2 == v4[v33]) {
        double v48 = 1.0;
      }
      v3[v33] = v48;
      unsigned int v34 = v33 + 1;
LABEL_84:
      double v49 = 0.0;
      if (v2 == v4[v34]) {
        double v49 = 1.0;
      }
      v3[v34] = v49;
      uint64_t v35 = v34 + 1;
LABEL_87:
      double v50 = 0.0;
      if (v2 == v4[v35]) {
        double v50 = 1.0;
      }
      v3[v35] = v50;
      uint64_t v36 = (v35 + 1);
LABEL_90:
      double v51 = 0.0;
      if (v2 == v4[v36]) {
        double v51 = 1.0;
      }
      v3[v36] = v51;
      uint64_t v37 = (v36 + 1);
LABEL_93:
      double v52 = 0.0;
      if (v2 == v4[v37]) {
        double v52 = 1.0;
      }
      v3[v37] = v52;
      uint64_t v38 = (v37 + 1);
LABEL_96:
      double v53 = 0.0;
      if (v2 == v4[v38]) {
        double v53 = 1.0;
      }
      v3[v38] = v53;
      uint64_t v39 = (v38 + 1);
LABEL_99:
      double v54 = 0.0;
      if (v2 == v4[v39]) {
        double v54 = 1.0;
      }
      v3[v39] = v54;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v35, v36, v37, v38, v39)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v35, v36, v37, v38, v39)+ 16);
}

uint64_t sub_14D29C()
{
  return 139;
}

uint64_t sub_14D2A4(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_14D2AC(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_14D2B4(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_14D2F4(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_14D2FC(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_14D304(uint64_t a1)
{
  return sub_14D3A8(a1 - 48);
}

void sub_14D30C(uint64_t a1)
{
  sub_14D3A8(a1 - 48);

  operator delete();
}

uint64_t sub_14D348(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 72))() + 8);
}

uint64_t sub_14D388(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_14D390(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_14D398(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_14D3A0(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_14D3A8(uint64_t a1)
{
  *(void *)a1 = off_2406D20;
  *(void *)(a1 + 48) = off_2406D80;
  if (*(void *)(a1 + 64)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 80);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 80) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 && *(unsigned char *)(a1 + 40))
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }
  return a1;
}

void sub_14D53C(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_2406E08;
  *(void *)(a1 + 48) = off_2406E68;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  operator new();
}

void sub_14DC2C(_Unwind_Exception *a1)
{
  sub_E26D8((uint64_t *)(v1 + 80));
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_14DCF8(uint64_t a1)
{
  sub_14E350(a1);

  operator delete();
}

double sub_14DD30(uint64_t a1)
{
  if (!*(void *)(a1 + 56)) {
    return NAN;
  }
  double v2 = (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
                  + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v5) << 32;
  if (v7 >= 1)
  {
    BOOL v8 = (double *)((char *)v3 + (v7 >> 29));
    do
    {
      if (v2 == *v4) {
        double v9 = 0.0;
      }
      else {
        double v9 = 1.0;
      }
      double *v3 = v9;
      if (v2 == v4[1]) {
        double v10 = 0.0;
      }
      else {
        double v10 = 1.0;
      }
      v3[1] = v10;
      if (v2 == v4[2]) {
        double v11 = 0.0;
      }
      else {
        double v11 = 1.0;
      }
      v3[2] = v11;
      if (v2 == v4[3]) {
        double v12 = 0.0;
      }
      else {
        double v12 = 1.0;
      }
      v3[3] = v12;
      if (v2 == v4[4]) {
        double v13 = 0.0;
      }
      else {
        double v13 = 1.0;
      }
      v3[4] = v13;
      if (v2 == v4[5]) {
        double v14 = 0.0;
      }
      else {
        double v14 = 1.0;
      }
      v3[5] = v14;
      if (v2 == v4[6]) {
        double v15 = 0.0;
      }
      else {
        double v15 = 1.0;
      }
      v3[6] = v15;
      if (v2 == v4[7]) {
        double v16 = 0.0;
      }
      else {
        double v16 = 1.0;
      }
      v3[7] = v16;
      if (v2 == v4[8]) {
        double v17 = 0.0;
      }
      else {
        double v17 = 1.0;
      }
      v3[8] = v17;
      if (v2 == v4[9]) {
        double v18 = 0.0;
      }
      else {
        double v18 = 1.0;
      }
      v3[9] = v18;
      if (v2 == v4[10]) {
        double v19 = 0.0;
      }
      else {
        double v19 = 1.0;
      }
      v3[10] = v19;
      if (v2 == v4[11]) {
        double v20 = 0.0;
      }
      else {
        double v20 = 1.0;
      }
      v3[11] = v20;
      if (v2 == v4[12]) {
        double v21 = 0.0;
      }
      else {
        double v21 = 1.0;
      }
      v3[12] = v21;
      if (v2 == v4[13]) {
        double v22 = 0.0;
      }
      else {
        double v22 = 1.0;
      }
      v3[13] = v22;
      if (v2 == v4[14]) {
        double v23 = 0.0;
      }
      else {
        double v23 = 1.0;
      }
      v3[14] = v23;
      if (v2 == v4[15]) {
        double v24 = 0.0;
      }
      else {
        double v24 = 1.0;
      }
      v3[15] = v24;
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v8);
  }
  int v25 = (v5 & 0xF) - 1;
  unsigned int v26 = 0;
  unsigned int v27 = 0;
  unsigned int v28 = 0;
  unsigned int v29 = 0;
  unsigned int v30 = 0;
  unsigned int v31 = 0;
  unsigned int v32 = 0;
  unsigned int v33 = 0;
  unsigned int v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  switch(v25)
  {
    case 0:
      goto LABEL_99;
    case 1:
      goto LABEL_96;
    case 2:
      goto LABEL_93;
    case 3:
      goto LABEL_90;
    case 4:
      goto LABEL_87;
    case 5:
      goto LABEL_84;
    case 6:
      goto LABEL_81;
    case 7:
      goto LABEL_78;
    case 8:
      goto LABEL_75;
    case 9:
      goto LABEL_72;
    case 10:
      goto LABEL_69;
    case 11:
      goto LABEL_66;
    case 12:
      goto LABEL_63;
    case 13:
      goto LABEL_60;
    case 14:
      double v40 = 0.0;
      if (v2 != *v4) {
        double v40 = 1.0;
      }
      double *v3 = v40;
      unsigned int v26 = 1;
LABEL_60:
      double v41 = 0.0;
      if (v2 != v4[v26]) {
        double v41 = 1.0;
      }
      v3[v26] = v41;
      unsigned int v27 = v26 + 1;
LABEL_63:
      double v42 = 0.0;
      if (v2 != v4[v27]) {
        double v42 = 1.0;
      }
      v3[v27] = v42;
      unsigned int v28 = v27 + 1;
LABEL_66:
      double v43 = 0.0;
      if (v2 != v4[v28]) {
        double v43 = 1.0;
      }
      v3[v28] = v43;
      unsigned int v29 = v28 + 1;
LABEL_69:
      double v44 = 0.0;
      if (v2 != v4[v29]) {
        double v44 = 1.0;
      }
      v3[v29] = v44;
      unsigned int v30 = v29 + 1;
LABEL_72:
      double v45 = 0.0;
      if (v2 != v4[v30]) {
        double v45 = 1.0;
      }
      v3[v30] = v45;
      unsigned int v31 = v30 + 1;
LABEL_75:
      double v46 = 0.0;
      if (v2 != v4[v31]) {
        double v46 = 1.0;
      }
      v3[v31] = v46;
      unsigned int v32 = v31 + 1;
LABEL_78:
      double v47 = 0.0;
      if (v2 != v4[v32]) {
        double v47 = 1.0;
      }
      v3[v32] = v47;
      unsigned int v33 = v32 + 1;
LABEL_81:
      double v48 = 0.0;
      if (v2 != v4[v33]) {
        double v48 = 1.0;
      }
      v3[v33] = v48;
      unsigned int v34 = v33 + 1;
LABEL_84:
      double v49 = 0.0;
      if (v2 != v4[v34]) {
        double v49 = 1.0;
      }
      v3[v34] = v49;
      uint64_t v35 = v34 + 1;
LABEL_87:
      double v50 = 0.0;
      if (v2 != v4[v35]) {
        double v50 = 1.0;
      }
      v3[v35] = v50;
      uint64_t v36 = (v35 + 1);
LABEL_90:
      double v51 = 0.0;
      if (v2 != v4[v36]) {
        double v51 = 1.0;
      }
      v3[v36] = v51;
      uint64_t v37 = (v36 + 1);
LABEL_93:
      double v52 = 0.0;
      if (v2 != v4[v37]) {
        double v52 = 1.0;
      }
      v3[v37] = v52;
      uint64_t v38 = (v37 + 1);
LABEL_96:
      double v53 = 0.0;
      if (v2 != v4[v38]) {
        double v53 = 1.0;
      }
      v3[v38] = v53;
      uint64_t v39 = (v38 + 1);
LABEL_99:
      double v54 = 0.0;
      if (v2 != v4[v39]) {
        double v54 = 1.0;
      }
      v3[v39] = v54;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v35, v36, v37, v38, v39)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v35, v36, v37, v38, v39)+ 16);
}

uint64_t sub_14E244()
{
  return 139;
}

uint64_t sub_14E24C(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_14E254(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_14E25C(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_14E29C(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_14E2A4(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_14E2AC(uint64_t a1)
{
  return sub_14E350(a1 - 48);
}

void sub_14E2B4(uint64_t a1)
{
  sub_14E350(a1 - 48);

  operator delete();
}

uint64_t sub_14E2F0(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 72))() + 8);
}

uint64_t sub_14E330(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_14E338(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_14E340(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_14E348(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_14E350(uint64_t a1)
{
  *(void *)a1 = off_2406E08;
  *(void *)(a1 + 48) = off_2406E68;
  if (*(void *)(a1 + 64)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 80);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 80) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 && *(unsigned char *)(a1 + 40))
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }
  return a1;
}

void sub_14E4E4(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_2406EF0;
  *(void *)(a1 + 48) = off_2406F50;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  operator new();
}

void sub_14EBD4(_Unwind_Exception *a1)
{
  sub_E26D8((uint64_t *)(v1 + 80));
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_14ECA0(uint64_t a1)
{
  sub_14FA04(a1);

  operator delete();
}

double sub_14ECD8(uint64_t a1)
{
  if (!*(void *)(a1 + 56)) {
    return NAN;
  }
  double v2 = (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
                  + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  if ((uint64_t)((unint64_t)(v6 + v5) << 32) >= 1)
  {
    BOOL v7 = &v3[v6 + v5];
    double v8 = -v2;
    if (v2 >= 0.0) {
      double v8 = v2;
    }
    do
    {
      double v9 = *v4;
      double v10 = v2 - *v4;
      if (v10 < 0.0) {
        double v10 = -v10;
      }
      if (v9 < 0.0) {
        double v9 = -v9;
      }
      if (v8 >= v9) {
        double v9 = v8;
      }
      if (v9 <= 1.0) {
        double v11 = 1.0e-10;
      }
      else {
        double v11 = v9 * 1.0e-10;
      }
      if (v10 > v11) {
        double v12 = 0.0;
      }
      else {
        double v12 = 1.0;
      }
      double *v3 = v12;
      double v13 = v4[1];
      double v14 = v2 - v13;
      if (v2 - v13 < 0.0) {
        double v14 = -(v2 - v13);
      }
      if (v13 < 0.0) {
        double v13 = -v13;
      }
      if (v8 >= v13) {
        double v13 = v8;
      }
      if (v13 <= 1.0) {
        double v15 = 1.0e-10;
      }
      else {
        double v15 = v13 * 1.0e-10;
      }
      if (v14 > v15) {
        double v16 = 0.0;
      }
      else {
        double v16 = 1.0;
      }
      v3[1] = v16;
      double v17 = v4[2];
      double v18 = v2 - v17;
      if (v2 - v17 < 0.0) {
        double v18 = -(v2 - v17);
      }
      if (v17 < 0.0) {
        double v17 = -v17;
      }
      if (v8 >= v17) {
        double v17 = v8;
      }
      if (v17 <= 1.0) {
        double v19 = 1.0e-10;
      }
      else {
        double v19 = v17 * 1.0e-10;
      }
      if (v18 > v19) {
        double v20 = 0.0;
      }
      else {
        double v20 = 1.0;
      }
      v3[2] = v20;
      double v21 = v4[3];
      double v22 = v2 - v21;
      if (v2 - v21 < 0.0) {
        double v22 = -(v2 - v21);
      }
      if (v21 < 0.0) {
        double v21 = -v21;
      }
      if (v8 >= v21) {
        double v21 = v8;
      }
      if (v21 <= 1.0) {
        double v23 = 1.0e-10;
      }
      else {
        double v23 = v21 * 1.0e-10;
      }
      if (v22 > v23) {
        double v24 = 0.0;
      }
      else {
        double v24 = 1.0;
      }
      v3[3] = v24;
      double v25 = v4[4];
      double v26 = v2 - v25;
      if (v2 - v25 < 0.0) {
        double v26 = -(v2 - v25);
      }
      if (v25 < 0.0) {
        double v25 = -v25;
      }
      if (v8 >= v25) {
        double v25 = v8;
      }
      if (v25 <= 1.0) {
        double v27 = 1.0e-10;
      }
      else {
        double v27 = v25 * 1.0e-10;
      }
      if (v26 > v27) {
        double v28 = 0.0;
      }
      else {
        double v28 = 1.0;
      }
      v3[4] = v28;
      double v29 = v4[5];
      double v30 = v2 - v29;
      if (v2 - v29 < 0.0) {
        double v30 = -(v2 - v29);
      }
      if (v29 < 0.0) {
        double v29 = -v29;
      }
      if (v8 >= v29) {
        double v29 = v8;
      }
      if (v29 <= 1.0) {
        double v31 = 1.0e-10;
      }
      else {
        double v31 = v29 * 1.0e-10;
      }
      if (v30 > v31) {
        double v32 = 0.0;
      }
      else {
        double v32 = 1.0;
      }
      v3[5] = v32;
      double v33 = v4[6];
      double v34 = v2 - v33;
      if (v2 - v33 < 0.0) {
        double v34 = -(v2 - v33);
      }
      if (v33 < 0.0) {
        double v33 = -v33;
      }
      if (v8 >= v33) {
        double v33 = v8;
      }
      if (v33 <= 1.0) {
        double v35 = 1.0e-10;
      }
      else {
        double v35 = v33 * 1.0e-10;
      }
      if (v34 > v35) {
        double v36 = 0.0;
      }
      else {
        double v36 = 1.0;
      }
      v3[6] = v36;
      double v37 = v4[7];
      double v38 = v2 - v37;
      if (v2 - v37 < 0.0) {
        double v38 = -(v2 - v37);
      }
      if (v37 < 0.0) {
        double v37 = -v37;
      }
      if (v8 >= v37) {
        double v37 = v8;
      }
      if (v37 <= 1.0) {
        double v39 = 1.0e-10;
      }
      else {
        double v39 = v37 * 1.0e-10;
      }
      if (v38 > v39) {
        double v40 = 0.0;
      }
      else {
        double v40 = 1.0;
      }
      v3[7] = v40;
      double v41 = v4[8];
      double v42 = v2 - v41;
      if (v2 - v41 < 0.0) {
        double v42 = -(v2 - v41);
      }
      if (v41 < 0.0) {
        double v41 = -v41;
      }
      if (v8 >= v41) {
        double v41 = v8;
      }
      if (v41 <= 1.0) {
        double v43 = 1.0e-10;
      }
      else {
        double v43 = v41 * 1.0e-10;
      }
      if (v42 > v43) {
        double v44 = 0.0;
      }
      else {
        double v44 = 1.0;
      }
      v3[8] = v44;
      double v45 = v4[9];
      double v46 = v2 - v45;
      if (v2 - v45 < 0.0) {
        double v46 = -(v2 - v45);
      }
      if (v45 < 0.0) {
        double v45 = -v45;
      }
      if (v8 >= v45) {
        double v45 = v8;
      }
      if (v45 <= 1.0) {
        double v47 = 1.0e-10;
      }
      else {
        double v47 = v45 * 1.0e-10;
      }
      if (v46 > v47) {
        double v48 = 0.0;
      }
      else {
        double v48 = 1.0;
      }
      v3[9] = v48;
      double v49 = v4[10];
      double v50 = v2 - v49;
      if (v2 - v49 < 0.0) {
        double v50 = -(v2 - v49);
      }
      if (v49 < 0.0) {
        double v49 = -v49;
      }
      if (v8 >= v49) {
        double v49 = v8;
      }
      if (v49 <= 1.0) {
        double v51 = 1.0e-10;
      }
      else {
        double v51 = v49 * 1.0e-10;
      }
      if (v50 > v51) {
        double v52 = 0.0;
      }
      else {
        double v52 = 1.0;
      }
      v3[10] = v52;
      double v53 = v4[11];
      double v54 = v2 - v53;
      if (v2 - v53 < 0.0) {
        double v54 = -(v2 - v53);
      }
      if (v53 < 0.0) {
        double v53 = -v53;
      }
      if (v8 >= v53) {
        double v53 = v8;
      }
      if (v53 <= 1.0) {
        double v55 = 1.0e-10;
      }
      else {
        double v55 = v53 * 1.0e-10;
      }
      if (v54 > v55) {
        double v56 = 0.0;
      }
      else {
        double v56 = 1.0;
      }
      v3[11] = v56;
      double v57 = v4[12];
      double v58 = v2 - v57;
      if (v2 - v57 < 0.0) {
        double v58 = -(v2 - v57);
      }
      if (v57 < 0.0) {
        double v57 = -v57;
      }
      if (v8 >= v57) {
        double v57 = v8;
      }
      if (v57 <= 1.0) {
        double v59 = 1.0e-10;
      }
      else {
        double v59 = v57 * 1.0e-10;
      }
      if (v58 > v59) {
        double v60 = 0.0;
      }
      else {
        double v60 = 1.0;
      }
      v3[12] = v60;
      double v61 = v4[13];
      double v62 = v2 - v61;
      if (v2 - v61 < 0.0) {
        double v62 = -(v2 - v61);
      }
      if (v61 < 0.0) {
        double v61 = -v61;
      }
      if (v8 >= v61) {
        double v61 = v8;
      }
      if (v61 <= 1.0) {
        double v63 = 1.0e-10;
      }
      else {
        double v63 = v61 * 1.0e-10;
      }
      if (v62 > v63) {
        double v64 = 0.0;
      }
      else {
        double v64 = 1.0;
      }
      v3[13] = v64;
      double v65 = v4[14];
      double v66 = v2 - v65;
      if (v2 - v65 < 0.0) {
        double v66 = -(v2 - v65);
      }
      if (v65 < 0.0) {
        double v65 = -v65;
      }
      if (v8 >= v65) {
        double v65 = v8;
      }
      if (v65 <= 1.0) {
        double v67 = 1.0e-10;
      }
      else {
        double v67 = v65 * 1.0e-10;
      }
      if (v66 > v67) {
        double v68 = 0.0;
      }
      else {
        double v68 = 1.0;
      }
      v3[14] = v68;
      double v69 = v4[15];
      double v70 = v2 - v69;
      if (v2 - v69 < 0.0) {
        double v70 = -(v2 - v69);
      }
      if (v69 < 0.0) {
        double v69 = -v69;
      }
      if (v8 >= v69) {
        double v69 = v8;
      }
      if (v69 <= 1.0) {
        double v71 = 1.0e-10;
      }
      else {
        double v71 = v69 * 1.0e-10;
      }
      if (v70 > v71) {
        double v72 = 0.0;
      }
      else {
        double v72 = 1.0;
      }
      v3[15] = v72;
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v7);
  }
  switch(v5 & 0xF)
  {
    case 1:
      uint64_t v73 = 0;
      double v74 = -v2;
      goto LABEL_427;
    case 2:
      int v76 = 0;
      double v74 = -v2;
      goto LABEL_412;
    case 3:
      int v77 = 0;
      double v74 = -v2;
      goto LABEL_397;
    case 4:
      int v78 = 0;
      double v74 = -v2;
      goto LABEL_382;
    case 5:
      unsigned int v79 = 0;
      double v74 = -v2;
      goto LABEL_367;
    case 6:
      unsigned int v80 = 0;
      double v74 = -v2;
      goto LABEL_352;
    case 7:
      unsigned int v81 = 0;
      double v74 = -v2;
      goto LABEL_337;
    case 8:
      unsigned int v82 = 0;
      double v74 = -v2;
      goto LABEL_322;
    case 9:
      unsigned int v83 = 0;
      double v74 = -v2;
      goto LABEL_307;
    case 0xA:
      unsigned int v84 = 0;
      double v74 = -v2;
      goto LABEL_292;
    case 0xB:
      unsigned int v85 = 0;
      double v74 = -v2;
      goto LABEL_277;
    case 0xC:
      unsigned int v86 = 0;
      double v74 = -v2;
      goto LABEL_262;
    case 0xD:
      unsigned int v87 = 0;
      double v74 = -v2;
      goto LABEL_247;
    case 0xE:
      unsigned int v88 = 0;
      double v74 = -v2;
      goto LABEL_232;
    case 0xF:
      double v89 = *v4;
      double v90 = v2 - *v4;
      double v91 = -v90;
      if (v90 >= 0.0) {
        double v91 = v2 - *v4;
      }
      double v74 = -v2;
      if (v2 >= 0.0) {
        double v92 = v2;
      }
      else {
        double v92 = -v2;
      }
      if (v89 < 0.0) {
        double v89 = -v89;
      }
      if (v92 >= v89) {
        double v89 = v92;
      }
      if (v89 <= 1.0) {
        double v93 = 1.0e-10;
      }
      else {
        double v93 = v89 * 1.0e-10;
      }
      BOOL v94 = v91 > v93;
      double v95 = 0.0;
      if (!v94) {
        double v95 = 1.0;
      }
      double *v3 = v95;
      unsigned int v88 = 1;
LABEL_232:
      double v96 = v4[v88];
      double v97 = v2 - v96;
      if (v2 - v96 < 0.0) {
        double v97 = -(v2 - v96);
      }
      if (v2 >= 0.0) {
        double v98 = v2;
      }
      else {
        double v98 = v74;
      }
      if (v96 < 0.0) {
        double v96 = -v96;
      }
      if (v98 >= v96) {
        double v96 = v98;
      }
      if (v96 <= 1.0) {
        double v99 = 1.0e-10;
      }
      else {
        double v99 = v96 * 1.0e-10;
      }
      BOOL v94 = v97 > v99;
      double v100 = 0.0;
      if (!v94) {
        double v100 = 1.0;
      }
      v3[v88] = v100;
      unsigned int v87 = v88 + 1;
LABEL_247:
      double v101 = v4[v87];
      double v102 = v2 - v101;
      if (v2 - v101 < 0.0) {
        double v102 = -(v2 - v101);
      }
      if (v2 >= 0.0) {
        double v103 = v2;
      }
      else {
        double v103 = v74;
      }
      if (v101 < 0.0) {
        double v101 = -v101;
      }
      if (v103 >= v101) {
        double v101 = v103;
      }
      if (v101 <= 1.0) {
        double v104 = 1.0e-10;
      }
      else {
        double v104 = v101 * 1.0e-10;
      }
      BOOL v94 = v102 > v104;
      double v105 = 0.0;
      if (!v94) {
        double v105 = 1.0;
      }
      v3[v87] = v105;
      unsigned int v86 = v87 + 1;
LABEL_262:
      double v106 = v4[v86];
      double v107 = v2 - v106;
      if (v2 - v106 < 0.0) {
        double v107 = -(v2 - v106);
      }
      if (v2 >= 0.0) {
        double v108 = v2;
      }
      else {
        double v108 = v74;
      }
      if (v106 < 0.0) {
        double v106 = -v106;
      }
      if (v108 >= v106) {
        double v106 = v108;
      }
      if (v106 <= 1.0) {
        double v109 = 1.0e-10;
      }
      else {
        double v109 = v106 * 1.0e-10;
      }
      BOOL v94 = v107 > v109;
      double v110 = 0.0;
      if (!v94) {
        double v110 = 1.0;
      }
      v3[v86] = v110;
      unsigned int v85 = v86 + 1;
LABEL_277:
      double v111 = v4[v85];
      double v112 = v2 - v111;
      if (v2 - v111 < 0.0) {
        double v112 = -(v2 - v111);
      }
      if (v2 >= 0.0) {
        double v113 = v2;
      }
      else {
        double v113 = v74;
      }
      if (v111 < 0.0) {
        double v111 = -v111;
      }
      if (v113 >= v111) {
        double v111 = v113;
      }
      if (v111 <= 1.0) {
        double v114 = 1.0e-10;
      }
      else {
        double v114 = v111 * 1.0e-10;
      }
      BOOL v94 = v112 > v114;
      double v115 = 0.0;
      if (!v94) {
        double v115 = 1.0;
      }
      v3[v85] = v115;
      unsigned int v84 = v85 + 1;
LABEL_292:
      double v116 = v4[v84];
      double v117 = v2 - v116;
      if (v2 - v116 < 0.0) {
        double v117 = -(v2 - v116);
      }
      if (v2 >= 0.0) {
        double v118 = v2;
      }
      else {
        double v118 = v74;
      }
      if (v116 < 0.0) {
        double v116 = -v116;
      }
      if (v118 >= v116) {
        double v116 = v118;
      }
      if (v116 <= 1.0) {
        double v119 = 1.0e-10;
      }
      else {
        double v119 = v116 * 1.0e-10;
      }
      BOOL v94 = v117 > v119;
      double v120 = 0.0;
      if (!v94) {
        double v120 = 1.0;
      }
      v3[v84] = v120;
      unsigned int v83 = v84 + 1;
LABEL_307:
      double v121 = v4[v83];
      double v122 = v2 - v121;
      if (v2 - v121 < 0.0) {
        double v122 = -(v2 - v121);
      }
      if (v2 >= 0.0) {
        double v123 = v2;
      }
      else {
        double v123 = v74;
      }
      if (v121 < 0.0) {
        double v121 = -v121;
      }
      if (v123 >= v121) {
        double v121 = v123;
      }
      if (v121 <= 1.0) {
        double v124 = 1.0e-10;
      }
      else {
        double v124 = v121 * 1.0e-10;
      }
      BOOL v94 = v122 > v124;
      double v125 = 0.0;
      if (!v94) {
        double v125 = 1.0;
      }
      v3[v83] = v125;
      unsigned int v82 = v83 + 1;
LABEL_322:
      double v126 = v4[v82];
      double v127 = v2 - v126;
      if (v2 - v126 < 0.0) {
        double v127 = -(v2 - v126);
      }
      if (v2 >= 0.0) {
        double v128 = v2;
      }
      else {
        double v128 = v74;
      }
      if (v126 < 0.0) {
        double v126 = -v126;
      }
      if (v128 >= v126) {
        double v126 = v128;
      }
      if (v126 <= 1.0) {
        double v129 = 1.0e-10;
      }
      else {
        double v129 = v126 * 1.0e-10;
      }
      BOOL v94 = v127 > v129;
      double v130 = 0.0;
      if (!v94) {
        double v130 = 1.0;
      }
      v3[v82] = v130;
      unsigned int v81 = v82 + 1;
LABEL_337:
      double v131 = v4[v81];
      double v132 = v2 - v131;
      if (v2 - v131 < 0.0) {
        double v132 = -(v2 - v131);
      }
      if (v2 >= 0.0) {
        double v133 = v2;
      }
      else {
        double v133 = v74;
      }
      if (v131 < 0.0) {
        double v131 = -v131;
      }
      if (v133 >= v131) {
        double v131 = v133;
      }
      if (v131 <= 1.0) {
        double v134 = 1.0e-10;
      }
      else {
        double v134 = v131 * 1.0e-10;
      }
      BOOL v94 = v132 > v134;
      double v135 = 0.0;
      if (!v94) {
        double v135 = 1.0;
      }
      v3[v81] = v135;
      unsigned int v80 = v81 + 1;
LABEL_352:
      double v136 = v4[v80];
      double v137 = v2 - v136;
      if (v2 - v136 < 0.0) {
        double v137 = -(v2 - v136);
      }
      if (v2 >= 0.0) {
        double v138 = v2;
      }
      else {
        double v138 = v74;
      }
      if (v136 < 0.0) {
        double v136 = -v136;
      }
      if (v138 >= v136) {
        double v136 = v138;
      }
      if (v136 <= 1.0) {
        double v139 = 1.0e-10;
      }
      else {
        double v139 = v136 * 1.0e-10;
      }
      BOOL v94 = v137 > v139;
      double v140 = 0.0;
      if (!v94) {
        double v140 = 1.0;
      }
      v3[v80] = v140;
      unsigned int v79 = v80 + 1;
LABEL_367:
      double v141 = v4[v79];
      double v142 = v2 - v141;
      if (v2 - v141 < 0.0) {
        double v142 = -(v2 - v141);
      }
      if (v2 >= 0.0) {
        double v143 = v2;
      }
      else {
        double v143 = v74;
      }
      if (v141 < 0.0) {
        double v141 = -v141;
      }
      if (v143 >= v141) {
        double v141 = v143;
      }
      if (v141 <= 1.0) {
        double v144 = 1.0e-10;
      }
      else {
        double v144 = v141 * 1.0e-10;
      }
      BOOL v94 = v142 > v144;
      double v145 = 0.0;
      if (!v94) {
        double v145 = 1.0;
      }
      v3[v79] = v145;
      int v78 = v79 + 1;
LABEL_382:
      double v146 = v4[v78];
      double v147 = v2 - v146;
      if (v2 - v146 < 0.0) {
        double v147 = -(v2 - v146);
      }
      if (v2 >= 0.0) {
        double v148 = v2;
      }
      else {
        double v148 = v74;
      }
      if (v146 < 0.0) {
        double v146 = -v146;
      }
      if (v148 >= v146) {
        double v146 = v148;
      }
      if (v146 <= 1.0) {
        double v149 = 1.0e-10;
      }
      else {
        double v149 = v146 * 1.0e-10;
      }
      BOOL v94 = v147 > v149;
      double v150 = 0.0;
      if (!v94) {
        double v150 = 1.0;
      }
      v3[v78] = v150;
      int v77 = v78 + 1;
LABEL_397:
      double v151 = v4[v77];
      double v152 = v2 - v151;
      if (v2 - v151 < 0.0) {
        double v152 = -(v2 - v151);
      }
      if (v2 >= 0.0) {
        double v153 = v2;
      }
      else {
        double v153 = v74;
      }
      if (v151 < 0.0) {
        double v151 = -v151;
      }
      if (v153 >= v151) {
        double v151 = v153;
      }
      if (v151 <= 1.0) {
        double v154 = 1.0e-10;
      }
      else {
        double v154 = v151 * 1.0e-10;
      }
      BOOL v94 = v152 > v154;
      double v155 = 0.0;
      if (!v94) {
        double v155 = 1.0;
      }
      v3[v77] = v155;
      int v76 = v77 + 1;
LABEL_412:
      double v156 = v4[v76];
      double v157 = v2 - v156;
      if (v2 - v156 < 0.0) {
        double v157 = -(v2 - v156);
      }
      if (v2 >= 0.0) {
        double v158 = v2;
      }
      else {
        double v158 = v74;
      }
      if (v156 < 0.0) {
        double v156 = -v156;
      }
      if (v158 >= v156) {
        double v156 = v158;
      }
      if (v156 <= 1.0) {
        double v159 = 1.0e-10;
      }
      else {
        double v159 = v156 * 1.0e-10;
      }
      BOOL v94 = v157 > v159;
      double v160 = 0.0;
      if (!v94) {
        double v160 = 1.0;
      }
      v3[v76] = v160;
      uint64_t v73 = (v76 + 1);
LABEL_427:
      uint64_t v161 = v73;
      double v162 = v4[v161];
      double v163 = v2 - v162;
      if (v2 - v162 < 0.0) {
        double v163 = -(v2 - v162);
      }
      if (v2 >= 0.0) {
        double v74 = v2;
      }
      if (v162 < 0.0) {
        double v162 = -v162;
      }
      if (v74 < v162) {
        double v74 = v162;
      }
      if (v74 <= 1.0) {
        double v164 = 1.0e-10;
      }
      else {
        double v164 = v74 * 1.0e-10;
      }
      BOOL v94 = v163 > v164;
      double v165 = 0.0;
      if (!v94) {
        double v165 = 1.0;
      }
      v3[v161] = v165;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
}

uint64_t sub_14F8F8()
{
  return 139;
}

uint64_t sub_14F900(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_14F908(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_14F910(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_14F950(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_14F958(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_14F960(uint64_t a1)
{
  return sub_14FA04(a1 - 48);
}

void sub_14F968(uint64_t a1)
{
  sub_14FA04(a1 - 48);

  operator delete();
}

uint64_t sub_14F9A4(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 72))() + 8);
}

uint64_t sub_14F9E4(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_14F9EC(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_14F9F4(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_14F9FC(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_14FA04(uint64_t a1)
{
  *(void *)a1 = off_2406EF0;
  *(void *)(a1 + 48) = off_2406F50;
  if (*(void *)(a1 + 64)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 80);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 80) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 && *(unsigned char *)(a1 + 40))
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }
  return a1;
}

void sub_14FB98(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_2406FD8;
  *(void *)(a1 + 48) = off_2407038;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  operator new();
}

void sub_150288(_Unwind_Exception *a1)
{
  sub_E26D8((uint64_t *)(v1 + 80));
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_150354(uint64_t a1)
{
  sub_150A70(a1);

  operator delete();
}

double sub_15038C(uint64_t a1)
{
  if (!*(void *)(a1 + 56)) {
    return NAN;
  }
  double v2 = (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
                  + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v5) << 32;
  if (v7 >= 1)
  {
    BOOL v8 = (double *)((char *)v3 + (v7 >> 29));
    do
    {
      if (v2 != 0.0 && *v4 != 0.0) {
        double v9 = 1.0;
      }
      else {
        double v9 = 0.0;
      }
      double *v3 = v9;
      if (v2 != 0.0 && v4[1] != 0.0) {
        double v10 = 1.0;
      }
      else {
        double v10 = 0.0;
      }
      v3[1] = v10;
      if (v2 != 0.0 && v4[2] != 0.0) {
        double v11 = 1.0;
      }
      else {
        double v11 = 0.0;
      }
      v3[2] = v11;
      if (v2 != 0.0 && v4[3] != 0.0) {
        double v12 = 1.0;
      }
      else {
        double v12 = 0.0;
      }
      v3[3] = v12;
      if (v2 != 0.0 && v4[4] != 0.0) {
        double v13 = 1.0;
      }
      else {
        double v13 = 0.0;
      }
      v3[4] = v13;
      if (v2 != 0.0 && v4[5] != 0.0) {
        double v14 = 1.0;
      }
      else {
        double v14 = 0.0;
      }
      v3[5] = v14;
      if (v2 != 0.0 && v4[6] != 0.0) {
        double v15 = 1.0;
      }
      else {
        double v15 = 0.0;
      }
      v3[6] = v15;
      if (v2 != 0.0 && v4[7] != 0.0) {
        double v16 = 1.0;
      }
      else {
        double v16 = 0.0;
      }
      v3[7] = v16;
      if (v2 != 0.0 && v4[8] != 0.0) {
        double v17 = 1.0;
      }
      else {
        double v17 = 0.0;
      }
      v3[8] = v17;
      if (v2 != 0.0 && v4[9] != 0.0) {
        double v18 = 1.0;
      }
      else {
        double v18 = 0.0;
      }
      v3[9] = v18;
      if (v2 != 0.0 && v4[10] != 0.0) {
        double v19 = 1.0;
      }
      else {
        double v19 = 0.0;
      }
      v3[10] = v19;
      if (v2 != 0.0 && v4[11] != 0.0) {
        double v20 = 1.0;
      }
      else {
        double v20 = 0.0;
      }
      v3[11] = v20;
      if (v2 != 0.0 && v4[12] != 0.0) {
        double v21 = 1.0;
      }
      else {
        double v21 = 0.0;
      }
      v3[12] = v21;
      if (v2 != 0.0 && v4[13] != 0.0) {
        double v22 = 1.0;
      }
      else {
        double v22 = 0.0;
      }
      v3[13] = v22;
      if (v2 != 0.0 && v4[14] != 0.0) {
        double v23 = 1.0;
      }
      else {
        double v23 = 0.0;
      }
      v3[14] = v23;
      if (v2 != 0.0 && v4[15] != 0.0) {
        double v24 = 1.0;
      }
      else {
        double v24 = 0.0;
      }
      v3[15] = v24;
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v8);
  }
  int v25 = (v5 & 0xF) - 1;
  unsigned int v26 = 0;
  unsigned int v27 = 0;
  unsigned int v28 = 0;
  unsigned int v29 = 0;
  unsigned int v30 = 0;
  unsigned int v31 = 0;
  unsigned int v32 = 0;
  unsigned int v33 = 0;
  unsigned int v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  switch(v25)
  {
    case 0:
      goto LABEL_141;
    case 1:
      goto LABEL_135;
    case 2:
      goto LABEL_129;
    case 3:
      goto LABEL_123;
    case 4:
      goto LABEL_117;
    case 5:
      goto LABEL_111;
    case 6:
      goto LABEL_105;
    case 7:
      goto LABEL_99;
    case 8:
      goto LABEL_93;
    case 9:
      goto LABEL_87;
    case 10:
      goto LABEL_81;
    case 11:
      goto LABEL_75;
    case 12:
      goto LABEL_69;
    case 13:
      goto LABEL_63;
    case 14:
      double v40 = 0.0;
      if (*v4 != 0.0 && v2 != 0.0) {
        double v40 = 1.0;
      }
      double *v3 = v40;
      unsigned int v26 = 1;
LABEL_63:
      double v42 = 0.0;
      if (v4[v26] != 0.0 && v2 != 0.0) {
        double v42 = 1.0;
      }
      v3[v26] = v42;
      unsigned int v27 = v26 + 1;
LABEL_69:
      double v44 = 0.0;
      if (v4[v27] != 0.0 && v2 != 0.0) {
        double v44 = 1.0;
      }
      v3[v27] = v44;
      unsigned int v28 = v27 + 1;
LABEL_75:
      double v46 = 0.0;
      if (v4[v28] != 0.0 && v2 != 0.0) {
        double v46 = 1.0;
      }
      v3[v28] = v46;
      unsigned int v29 = v28 + 1;
LABEL_81:
      double v48 = 0.0;
      if (v4[v29] != 0.0 && v2 != 0.0) {
        double v48 = 1.0;
      }
      v3[v29] = v48;
      unsigned int v30 = v29 + 1;
LABEL_87:
      double v50 = 0.0;
      if (v4[v30] != 0.0 && v2 != 0.0) {
        double v50 = 1.0;
      }
      v3[v30] = v50;
      unsigned int v31 = v30 + 1;
LABEL_93:
      double v52 = 0.0;
      if (v4[v31] != 0.0 && v2 != 0.0) {
        double v52 = 1.0;
      }
      v3[v31] = v52;
      unsigned int v32 = v31 + 1;
LABEL_99:
      double v54 = 0.0;
      if (v4[v32] != 0.0 && v2 != 0.0) {
        double v54 = 1.0;
      }
      v3[v32] = v54;
      unsigned int v33 = v32 + 1;
LABEL_105:
      double v56 = 0.0;
      if (v4[v33] != 0.0 && v2 != 0.0) {
        double v56 = 1.0;
      }
      v3[v33] = v56;
      unsigned int v34 = v33 + 1;
LABEL_111:
      double v58 = 0.0;
      if (v4[v34] != 0.0 && v2 != 0.0) {
        double v58 = 1.0;
      }
      v3[v34] = v58;
      uint64_t v35 = v34 + 1;
LABEL_117:
      double v60 = 0.0;
      if (v4[v35] != 0.0 && v2 != 0.0) {
        double v60 = 1.0;
      }
      v3[v35] = v60;
      uint64_t v36 = (v35 + 1);
LABEL_123:
      double v62 = 0.0;
      if (v4[v36] != 0.0 && v2 != 0.0) {
        double v62 = 1.0;
      }
      v3[v36] = v62;
      uint64_t v37 = (v36 + 1);
LABEL_129:
      double v64 = 0.0;
      if (v4[v37] != 0.0 && v2 != 0.0) {
        double v64 = 1.0;
      }
      v3[v37] = v64;
      uint64_t v38 = (v37 + 1);
LABEL_135:
      double v66 = 0.0;
      if (v4[v38] != 0.0 && v2 != 0.0) {
        double v66 = 1.0;
      }
      v3[v38] = v66;
      uint64_t v39 = (v38 + 1);
LABEL_141:
      double v68 = 0.0;
      if (v4[v39] != 0.0 && v2 != 0.0) {
        double v68 = 1.0;
      }
      v3[v39] = v68;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v35, v36, v37, v38, v39)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v35, v36, v37, v38, v39)+ 16);
}

uint64_t sub_150964()
{
  return 139;
}

uint64_t sub_15096C(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_150974(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_15097C(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_1509BC(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_1509C4(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_1509CC(uint64_t a1)
{
  return sub_150A70(a1 - 48);
}

void sub_1509D4(uint64_t a1)
{
  sub_150A70(a1 - 48);

  operator delete();
}

uint64_t sub_150A10(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 72))() + 8);
}

uint64_t sub_150A50(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_150A58(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_150A60(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_150A68(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_150A70(uint64_t a1)
{
  *(void *)a1 = off_2406FD8;
  *(void *)(a1 + 48) = off_2407038;
  if (*(void *)(a1 + 64)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 80);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 80) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 && *(unsigned char *)(a1 + 40))
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }
  return a1;
}

void sub_150C04(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_24070C0;
  *(void *)(a1 + 48) = off_2407120;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  operator new();
}

void sub_1512F4(_Unwind_Exception *a1)
{
  sub_E26D8((uint64_t *)(v1 + 80));
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_1513C0(uint64_t a1)
{
  sub_151ADC(a1);

  operator delete();
}

double sub_1513F8(uint64_t a1)
{
  if (!*(void *)(a1 + 56)) {
    return NAN;
  }
  double v2 = (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
                  + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v5) << 32;
  if (v7 >= 1)
  {
    BOOL v8 = (double *)((char *)v3 + (v7 >> 29));
    do
    {
      if (v2 != 0.0 && *v4 != 0.0) {
        double v9 = 0.0;
      }
      else {
        double v9 = 1.0;
      }
      double *v3 = v9;
      if (v2 != 0.0 && v4[1] != 0.0) {
        double v10 = 0.0;
      }
      else {
        double v10 = 1.0;
      }
      v3[1] = v10;
      if (v2 != 0.0 && v4[2] != 0.0) {
        double v11 = 0.0;
      }
      else {
        double v11 = 1.0;
      }
      v3[2] = v11;
      if (v2 != 0.0 && v4[3] != 0.0) {
        double v12 = 0.0;
      }
      else {
        double v12 = 1.0;
      }
      v3[3] = v12;
      if (v2 != 0.0 && v4[4] != 0.0) {
        double v13 = 0.0;
      }
      else {
        double v13 = 1.0;
      }
      v3[4] = v13;
      if (v2 != 0.0 && v4[5] != 0.0) {
        double v14 = 0.0;
      }
      else {
        double v14 = 1.0;
      }
      v3[5] = v14;
      if (v2 != 0.0 && v4[6] != 0.0) {
        double v15 = 0.0;
      }
      else {
        double v15 = 1.0;
      }
      v3[6] = v15;
      if (v2 != 0.0 && v4[7] != 0.0) {
        double v16 = 0.0;
      }
      else {
        double v16 = 1.0;
      }
      v3[7] = v16;
      if (v2 != 0.0 && v4[8] != 0.0) {
        double v17 = 0.0;
      }
      else {
        double v17 = 1.0;
      }
      v3[8] = v17;
      if (v2 != 0.0 && v4[9] != 0.0) {
        double v18 = 0.0;
      }
      else {
        double v18 = 1.0;
      }
      v3[9] = v18;
      if (v2 != 0.0 && v4[10] != 0.0) {
        double v19 = 0.0;
      }
      else {
        double v19 = 1.0;
      }
      v3[10] = v19;
      if (v2 != 0.0 && v4[11] != 0.0) {
        double v20 = 0.0;
      }
      else {
        double v20 = 1.0;
      }
      v3[11] = v20;
      if (v2 != 0.0 && v4[12] != 0.0) {
        double v21 = 0.0;
      }
      else {
        double v21 = 1.0;
      }
      v3[12] = v21;
      if (v2 != 0.0 && v4[13] != 0.0) {
        double v22 = 0.0;
      }
      else {
        double v22 = 1.0;
      }
      v3[13] = v22;
      if (v2 != 0.0 && v4[14] != 0.0) {
        double v23 = 0.0;
      }
      else {
        double v23 = 1.0;
      }
      v3[14] = v23;
      if (v2 != 0.0 && v4[15] != 0.0) {
        double v24 = 0.0;
      }
      else {
        double v24 = 1.0;
      }
      v3[15] = v24;
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v8);
  }
  int v25 = (v5 & 0xF) - 1;
  unsigned int v26 = 0;
  unsigned int v27 = 0;
  unsigned int v28 = 0;
  unsigned int v29 = 0;
  unsigned int v30 = 0;
  unsigned int v31 = 0;
  unsigned int v32 = 0;
  unsigned int v33 = 0;
  unsigned int v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  switch(v25)
  {
    case 0:
      goto LABEL_155;
    case 1:
      goto LABEL_148;
    case 2:
      goto LABEL_141;
    case 3:
      goto LABEL_134;
    case 4:
      goto LABEL_127;
    case 5:
      goto LABEL_120;
    case 6:
      goto LABEL_113;
    case 7:
      goto LABEL_106;
    case 8:
      goto LABEL_99;
    case 9:
      goto LABEL_92;
    case 10:
      goto LABEL_85;
    case 11:
      goto LABEL_78;
    case 12:
      goto LABEL_71;
    case 13:
      goto LABEL_64;
    case 14:
      double v40 = 0.0;
      if (*v4 == 0.0 || v2 == 0.0) {
        double v40 = 1.0;
      }
      double *v3 = v40;
      unsigned int v26 = 1;
LABEL_64:
      double v42 = 0.0;
      if (v4[v26] == 0.0 || v2 == 0.0) {
        double v42 = 1.0;
      }
      v3[v26] = v42;
      unsigned int v27 = v26 + 1;
LABEL_71:
      double v44 = 0.0;
      if (v4[v27] == 0.0 || v2 == 0.0) {
        double v44 = 1.0;
      }
      v3[v27] = v44;
      unsigned int v28 = v27 + 1;
LABEL_78:
      double v46 = 0.0;
      if (v4[v28] == 0.0 || v2 == 0.0) {
        double v46 = 1.0;
      }
      v3[v28] = v46;
      unsigned int v29 = v28 + 1;
LABEL_85:
      double v48 = 0.0;
      if (v4[v29] == 0.0 || v2 == 0.0) {
        double v48 = 1.0;
      }
      v3[v29] = v48;
      unsigned int v30 = v29 + 1;
LABEL_92:
      double v50 = 0.0;
      if (v4[v30] == 0.0 || v2 == 0.0) {
        double v50 = 1.0;
      }
      v3[v30] = v50;
      unsigned int v31 = v30 + 1;
LABEL_99:
      double v52 = 0.0;
      if (v4[v31] == 0.0 || v2 == 0.0) {
        double v52 = 1.0;
      }
      v3[v31] = v52;
      unsigned int v32 = v31 + 1;
LABEL_106:
      double v54 = 0.0;
      if (v4[v32] == 0.0 || v2 == 0.0) {
        double v54 = 1.0;
      }
      v3[v32] = v54;
      unsigned int v33 = v32 + 1;
LABEL_113:
      double v56 = 0.0;
      if (v4[v33] == 0.0 || v2 == 0.0) {
        double v56 = 1.0;
      }
      v3[v33] = v56;
      unsigned int v34 = v33 + 1;
LABEL_120:
      double v58 = 0.0;
      if (v4[v34] == 0.0 || v2 == 0.0) {
        double v58 = 1.0;
      }
      v3[v34] = v58;
      uint64_t v35 = v34 + 1;
LABEL_127:
      double v60 = 0.0;
      if (v4[v35] == 0.0 || v2 == 0.0) {
        double v60 = 1.0;
      }
      v3[v35] = v60;
      uint64_t v36 = (v35 + 1);
LABEL_134:
      double v62 = 0.0;
      if (v4[v36] == 0.0 || v2 == 0.0) {
        double v62 = 1.0;
      }
      v3[v36] = v62;
      uint64_t v37 = (v36 + 1);
LABEL_141:
      double v64 = 0.0;
      if (v4[v37] == 0.0 || v2 == 0.0) {
        double v64 = 1.0;
      }
      v3[v37] = v64;
      uint64_t v38 = (v37 + 1);
LABEL_148:
      double v66 = 0.0;
      if (v4[v38] == 0.0 || v2 == 0.0) {
        double v66 = 1.0;
      }
      v3[v38] = v66;
      uint64_t v39 = (v38 + 1);
LABEL_155:
      double v68 = 0.0;
      if (v4[v39] == 0.0 || v2 == 0.0) {
        double v68 = 1.0;
      }
      v3[v39] = v68;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v35, v36, v37, v38, v39)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v35, v36, v37, v38, v39)+ 16);
}

uint64_t sub_1519D0()
{
  return 139;
}

uint64_t sub_1519D8(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_1519E0(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_1519E8(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_151A28(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_151A30(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_151A38(uint64_t a1)
{
  return sub_151ADC(a1 - 48);
}

void sub_151A40(uint64_t a1)
{
  sub_151ADC(a1 - 48);

  operator delete();
}

uint64_t sub_151A7C(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 72))() + 8);
}

uint64_t sub_151ABC(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_151AC4(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_151ACC(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_151AD4(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_151ADC(uint64_t a1)
{
  *(void *)a1 = off_24070C0;
  *(void *)(a1 + 48) = off_2407120;
  if (*(void *)(a1 + 64)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 80);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 80) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 && *(unsigned char *)(a1 + 40))
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }
  return a1;
}

void sub_151C70(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_24071A8;
  *(void *)(a1 + 48) = off_2407208;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  operator new();
}

void sub_152360(_Unwind_Exception *a1)
{
  sub_E26D8((uint64_t *)(v1 + 80));
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_15242C(uint64_t a1)
{
  sub_152B48(a1);

  operator delete();
}

double sub_152464(uint64_t a1)
{
  if (!*(void *)(a1 + 56)) {
    return NAN;
  }
  double v2 = (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
                  + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v5) << 32;
  if (v7 >= 1)
  {
    BOOL v8 = (double *)((char *)v3 + (v7 >> 29));
    do
    {
      BOOL v9 = v2 != 0.0;
      if (*v4 != 0.0 || v2 != 0.0) {
        double v11 = 1.0;
      }
      else {
        double v11 = 0.0;
      }
      double *v3 = v11;
      if (v4[1] != 0.0 || v2 != 0.0) {
        double v13 = 1.0;
      }
      else {
        double v13 = 0.0;
      }
      v3[1] = v13;
      if (v4[2] != 0.0 || v2 != 0.0) {
        double v15 = 1.0;
      }
      else {
        double v15 = 0.0;
      }
      v3[2] = v15;
      if (v4[3] != 0.0 || v2 != 0.0) {
        double v17 = 1.0;
      }
      else {
        double v17 = 0.0;
      }
      v3[3] = v17;
      if (v4[4] != 0.0 || v2 != 0.0) {
        double v19 = 1.0;
      }
      else {
        double v19 = 0.0;
      }
      v3[4] = v19;
      if (v4[5] != 0.0 || v2 != 0.0) {
        double v21 = 1.0;
      }
      else {
        double v21 = 0.0;
      }
      v3[5] = v21;
      if (v4[6] != 0.0 || v2 != 0.0) {
        double v23 = 1.0;
      }
      else {
        double v23 = 0.0;
      }
      v3[6] = v23;
      if (v4[7] != 0.0 || v2 != 0.0) {
        double v25 = 1.0;
      }
      else {
        double v25 = 0.0;
      }
      v3[7] = v25;
      if (v4[8] != 0.0 || v2 != 0.0) {
        double v27 = 1.0;
      }
      else {
        double v27 = 0.0;
      }
      v3[8] = v27;
      if (v4[9] != 0.0 || v2 != 0.0) {
        double v29 = 1.0;
      }
      else {
        double v29 = 0.0;
      }
      v3[9] = v29;
      if (v4[10] != 0.0 || v2 != 0.0) {
        double v31 = 1.0;
      }
      else {
        double v31 = 0.0;
      }
      v3[10] = v31;
      if (v4[11] != 0.0 || v2 != 0.0) {
        double v33 = 1.0;
      }
      else {
        double v33 = 0.0;
      }
      v3[11] = v33;
      if (v4[12] != 0.0 || v2 != 0.0) {
        double v35 = 1.0;
      }
      else {
        double v35 = 0.0;
      }
      v3[12] = v35;
      if (v4[13] != 0.0 || v2 != 0.0) {
        double v37 = 1.0;
      }
      else {
        double v37 = 0.0;
      }
      v3[13] = v37;
      if (v4[14] != 0.0 || v2 != 0.0) {
        double v39 = 1.0;
      }
      else {
        double v39 = 0.0;
      }
      v3[14] = v39;
      if (v4[15] != 0.0) {
        BOOL v9 = 1;
      }
      if (v9) {
        double v40 = 1.0;
      }
      else {
        double v40 = 0.0;
      }
      v3[15] = v40;
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v8);
  }
  int v41 = (v5 & 0xF) - 1;
  unsigned int v42 = 0;
  unsigned int v43 = 0;
  unsigned int v44 = 0;
  unsigned int v45 = 0;
  unsigned int v46 = 0;
  unsigned int v47 = 0;
  unsigned int v48 = 0;
  unsigned int v49 = 0;
  unsigned int v50 = 0;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  switch(v41)
  {
    case 0:
      goto LABEL_188;
    case 1:
      goto LABEL_182;
    case 2:
      goto LABEL_176;
    case 3:
      goto LABEL_170;
    case 4:
      goto LABEL_164;
    case 5:
      goto LABEL_158;
    case 6:
      goto LABEL_152;
    case 7:
      goto LABEL_146;
    case 8:
      goto LABEL_140;
    case 9:
      goto LABEL_134;
    case 10:
      goto LABEL_128;
    case 11:
      goto LABEL_122;
    case 12:
      goto LABEL_116;
    case 13:
      goto LABEL_110;
    case 14:
      double v56 = 0.0;
      if (*v4 != 0.0 || v2 != 0.0) {
        double v56 = 1.0;
      }
      double *v3 = v56;
      unsigned int v42 = 1;
LABEL_110:
      double v58 = 0.0;
      if (v4[v42] != 0.0 || v2 != 0.0) {
        double v58 = 1.0;
      }
      v3[v42] = v58;
      unsigned int v43 = v42 + 1;
LABEL_116:
      double v60 = 0.0;
      if (v4[v43] != 0.0 || v2 != 0.0) {
        double v60 = 1.0;
      }
      v3[v43] = v60;
      unsigned int v44 = v43 + 1;
LABEL_122:
      double v62 = 0.0;
      if (v4[v44] != 0.0 || v2 != 0.0) {
        double v62 = 1.0;
      }
      v3[v44] = v62;
      unsigned int v45 = v44 + 1;
LABEL_128:
      double v64 = 0.0;
      if (v4[v45] != 0.0 || v2 != 0.0) {
        double v64 = 1.0;
      }
      v3[v45] = v64;
      unsigned int v46 = v45 + 1;
LABEL_134:
      double v66 = 0.0;
      if (v4[v46] != 0.0 || v2 != 0.0) {
        double v66 = 1.0;
      }
      v3[v46] = v66;
      unsigned int v47 = v46 + 1;
LABEL_140:
      double v68 = 0.0;
      if (v4[v47] != 0.0 || v2 != 0.0) {
        double v68 = 1.0;
      }
      v3[v47] = v68;
      unsigned int v48 = v47 + 1;
LABEL_146:
      double v70 = 0.0;
      if (v4[v48] != 0.0 || v2 != 0.0) {
        double v70 = 1.0;
      }
      v3[v48] = v70;
      unsigned int v49 = v48 + 1;
LABEL_152:
      double v72 = 0.0;
      if (v4[v49] != 0.0 || v2 != 0.0) {
        double v72 = 1.0;
      }
      v3[v49] = v72;
      unsigned int v50 = v49 + 1;
LABEL_158:
      double v74 = 0.0;
      if (v4[v50] != 0.0 || v2 != 0.0) {
        double v74 = 1.0;
      }
      v3[v50] = v74;
      uint64_t v51 = v50 + 1;
LABEL_164:
      double v76 = 0.0;
      if (v4[v51] != 0.0 || v2 != 0.0) {
        double v76 = 1.0;
      }
      v3[v51] = v76;
      uint64_t v52 = (v51 + 1);
LABEL_170:
      double v78 = 0.0;
      if (v4[v52] != 0.0 || v2 != 0.0) {
        double v78 = 1.0;
      }
      v3[v52] = v78;
      uint64_t v53 = (v52 + 1);
LABEL_176:
      double v80 = 0.0;
      if (v4[v53] != 0.0 || v2 != 0.0) {
        double v80 = 1.0;
      }
      v3[v53] = v80;
      uint64_t v54 = (v53 + 1);
LABEL_182:
      double v82 = 0.0;
      if (v4[v54] != 0.0 || v2 != 0.0) {
        double v82 = 1.0;
      }
      v3[v54] = v82;
      uint64_t v55 = (v54 + 1);
LABEL_188:
      double v84 = 0.0;
      if (v4[v55] != 0.0 || v2 != 0.0) {
        double v84 = 1.0;
      }
      v3[v55] = v84;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v51, v52, v53, v54, v55)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v51, v52, v53, v54, v55)+ 16);
}

uint64_t sub_152A3C()
{
  return 139;
}

uint64_t sub_152A44(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_152A4C(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_152A54(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_152A94(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_152A9C(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_152AA4(uint64_t a1)
{
  return sub_152B48(a1 - 48);
}

void sub_152AAC(uint64_t a1)
{
  sub_152B48(a1 - 48);

  operator delete();
}

uint64_t sub_152AE8(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 72))() + 8);
}

uint64_t sub_152B28(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_152B30(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_152B38(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_152B40(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_152B48(uint64_t a1)
{
  *(void *)a1 = off_24071A8;
  *(void *)(a1 + 48) = off_2407208;
  if (*(void *)(a1 + 64)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 80);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 80) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 && *(unsigned char *)(a1 + 40))
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }
  return a1;
}

void sub_152CDC(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_2407290;
  *(void *)(a1 + 48) = off_24072F0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  operator new();
}

void sub_1533CC(_Unwind_Exception *a1)
{
  sub_E26D8((uint64_t *)(v1 + 80));
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_153498(uint64_t a1)
{
  sub_153BB4(a1);

  operator delete();
}

double sub_1534D0(uint64_t a1)
{
  if (!*(void *)(a1 + 56)) {
    return NAN;
  }
  double v2 = (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
                  + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v5) << 32;
  if (v7 >= 1)
  {
    BOOL v8 = (double *)((char *)v3 + (v7 >> 29));
    do
    {
      BOOL v9 = v2 != 0.0;
      if (*v4 != 0.0 || v2 != 0.0) {
        double v11 = 0.0;
      }
      else {
        double v11 = 1.0;
      }
      double *v3 = v11;
      if (v4[1] != 0.0 || v2 != 0.0) {
        double v13 = 0.0;
      }
      else {
        double v13 = 1.0;
      }
      v3[1] = v13;
      if (v4[2] != 0.0 || v2 != 0.0) {
        double v15 = 0.0;
      }
      else {
        double v15 = 1.0;
      }
      v3[2] = v15;
      if (v4[3] != 0.0 || v2 != 0.0) {
        double v17 = 0.0;
      }
      else {
        double v17 = 1.0;
      }
      v3[3] = v17;
      if (v4[4] != 0.0 || v2 != 0.0) {
        double v19 = 0.0;
      }
      else {
        double v19 = 1.0;
      }
      v3[4] = v19;
      if (v4[5] != 0.0 || v2 != 0.0) {
        double v21 = 0.0;
      }
      else {
        double v21 = 1.0;
      }
      v3[5] = v21;
      if (v4[6] != 0.0 || v2 != 0.0) {
        double v23 = 0.0;
      }
      else {
        double v23 = 1.0;
      }
      v3[6] = v23;
      if (v4[7] != 0.0 || v2 != 0.0) {
        double v25 = 0.0;
      }
      else {
        double v25 = 1.0;
      }
      v3[7] = v25;
      if (v4[8] != 0.0 || v2 != 0.0) {
        double v27 = 0.0;
      }
      else {
        double v27 = 1.0;
      }
      v3[8] = v27;
      if (v4[9] != 0.0 || v2 != 0.0) {
        double v29 = 0.0;
      }
      else {
        double v29 = 1.0;
      }
      v3[9] = v29;
      if (v4[10] != 0.0 || v2 != 0.0) {
        double v31 = 0.0;
      }
      else {
        double v31 = 1.0;
      }
      v3[10] = v31;
      if (v4[11] != 0.0 || v2 != 0.0) {
        double v33 = 0.0;
      }
      else {
        double v33 = 1.0;
      }
      v3[11] = v33;
      if (v4[12] != 0.0 || v2 != 0.0) {
        double v35 = 0.0;
      }
      else {
        double v35 = 1.0;
      }
      v3[12] = v35;
      if (v4[13] != 0.0 || v2 != 0.0) {
        double v37 = 0.0;
      }
      else {
        double v37 = 1.0;
      }
      v3[13] = v37;
      if (v4[14] != 0.0 || v2 != 0.0) {
        double v39 = 0.0;
      }
      else {
        double v39 = 1.0;
      }
      v3[14] = v39;
      if (v4[15] != 0.0) {
        BOOL v9 = 1;
      }
      if (v9) {
        double v40 = 0.0;
      }
      else {
        double v40 = 1.0;
      }
      v3[15] = v40;
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v8);
  }
  int v41 = (v5 & 0xF) - 1;
  unsigned int v42 = 0;
  unsigned int v43 = 0;
  unsigned int v44 = 0;
  unsigned int v45 = 0;
  unsigned int v46 = 0;
  unsigned int v47 = 0;
  unsigned int v48 = 0;
  unsigned int v49 = 0;
  unsigned int v50 = 0;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  switch(v41)
  {
    case 0:
      goto LABEL_202;
    case 1:
      goto LABEL_195;
    case 2:
      goto LABEL_188;
    case 3:
      goto LABEL_181;
    case 4:
      goto LABEL_174;
    case 5:
      goto LABEL_167;
    case 6:
      goto LABEL_160;
    case 7:
      goto LABEL_153;
    case 8:
      goto LABEL_146;
    case 9:
      goto LABEL_139;
    case 10:
      goto LABEL_132;
    case 11:
      goto LABEL_125;
    case 12:
      goto LABEL_118;
    case 13:
      goto LABEL_111;
    case 14:
      double v56 = 0.0;
      if (*v4 == 0.0 && v2 == 0.0) {
        double v56 = 1.0;
      }
      double *v3 = v56;
      unsigned int v42 = 1;
LABEL_111:
      double v58 = 0.0;
      if (v4[v42] == 0.0 && v2 == 0.0) {
        double v58 = 1.0;
      }
      v3[v42] = v58;
      unsigned int v43 = v42 + 1;
LABEL_118:
      double v60 = 0.0;
      if (v4[v43] == 0.0 && v2 == 0.0) {
        double v60 = 1.0;
      }
      v3[v43] = v60;
      unsigned int v44 = v43 + 1;
LABEL_125:
      double v62 = 0.0;
      if (v4[v44] == 0.0 && v2 == 0.0) {
        double v62 = 1.0;
      }
      v3[v44] = v62;
      unsigned int v45 = v44 + 1;
LABEL_132:
      double v64 = 0.0;
      if (v4[v45] == 0.0 && v2 == 0.0) {
        double v64 = 1.0;
      }
      v3[v45] = v64;
      unsigned int v46 = v45 + 1;
LABEL_139:
      double v66 = 0.0;
      if (v4[v46] == 0.0 && v2 == 0.0) {
        double v66 = 1.0;
      }
      v3[v46] = v66;
      unsigned int v47 = v46 + 1;
LABEL_146:
      double v68 = 0.0;
      if (v4[v47] == 0.0 && v2 == 0.0) {
        double v68 = 1.0;
      }
      v3[v47] = v68;
      unsigned int v48 = v47 + 1;
LABEL_153:
      double v70 = 0.0;
      if (v4[v48] == 0.0 && v2 == 0.0) {
        double v70 = 1.0;
      }
      v3[v48] = v70;
      unsigned int v49 = v48 + 1;
LABEL_160:
      double v72 = 0.0;
      if (v4[v49] == 0.0 && v2 == 0.0) {
        double v72 = 1.0;
      }
      v3[v49] = v72;
      unsigned int v50 = v49 + 1;
LABEL_167:
      double v74 = 0.0;
      if (v4[v50] == 0.0 && v2 == 0.0) {
        double v74 = 1.0;
      }
      v3[v50] = v74;
      uint64_t v51 = v50 + 1;
LABEL_174:
      double v76 = 0.0;
      if (v4[v51] == 0.0 && v2 == 0.0) {
        double v76 = 1.0;
      }
      v3[v51] = v76;
      uint64_t v52 = (v51 + 1);
LABEL_181:
      double v78 = 0.0;
      if (v4[v52] == 0.0 && v2 == 0.0) {
        double v78 = 1.0;
      }
      v3[v52] = v78;
      uint64_t v53 = (v52 + 1);
LABEL_188:
      double v80 = 0.0;
      if (v4[v53] == 0.0 && v2 == 0.0) {
        double v80 = 1.0;
      }
      v3[v53] = v80;
      uint64_t v54 = (v53 + 1);
LABEL_195:
      double v82 = 0.0;
      if (v4[v54] == 0.0 && v2 == 0.0) {
        double v82 = 1.0;
      }
      v3[v54] = v82;
      uint64_t v55 = (v54 + 1);
LABEL_202:
      double v84 = 0.0;
      if (v4[v55] == 0.0 && v2 == 0.0) {
        double v84 = 1.0;
      }
      v3[v55] = v84;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v51, v52, v53, v54, v55)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v51, v52, v53, v54, v55)+ 16);
}

uint64_t sub_153AA8()
{
  return 139;
}

uint64_t sub_153AB0(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_153AB8(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_153AC0(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_153B00(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_153B08(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_153B10(uint64_t a1)
{
  return sub_153BB4(a1 - 48);
}

void sub_153B18(uint64_t a1)
{
  sub_153BB4(a1 - 48);

  operator delete();
}

uint64_t sub_153B54(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 72))() + 8);
}

uint64_t sub_153B94(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_153B9C(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_153BA4(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_153BAC(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_153BB4(uint64_t a1)
{
  *(void *)a1 = off_2407290;
  *(void *)(a1 + 48) = off_24072F0;
  if (*(void *)(a1 + 64)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 80);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 80) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 && *(unsigned char *)(a1 + 40))
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }
  return a1;
}

void sub_153D48(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_2407378;
  *(void *)(a1 + 48) = off_24073D8;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  operator new();
}

void sub_154438(_Unwind_Exception *a1)
{
  sub_E26D8((uint64_t *)(v1 + 80));
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_154504(uint64_t a1)
{
  sub_154D50(a1);

  operator delete();
}

double sub_15453C(uint64_t a1)
{
  if (!*(void *)(a1 + 56)) {
    return NAN;
  }
  double v2 = (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
                  + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v5) << 32;
  if (v7 >= 1)
  {
    BOOL v8 = (double *)((char *)v3 + (v7 >> 29));
    do
    {
      BOOL v9 = v2 == 0.0;
      if (v9 != (*v4 == 0.0)) {
        double v10 = 1.0;
      }
      else {
        double v10 = 0.0;
      }
      double *v3 = v10;
      if (v9 != (v4[1] == 0.0)) {
        double v11 = 1.0;
      }
      else {
        double v11 = 0.0;
      }
      v3[1] = v11;
      if (v9 != (v4[2] == 0.0)) {
        double v12 = 1.0;
      }
      else {
        double v12 = 0.0;
      }
      v3[2] = v12;
      if (v9 != (v4[3] == 0.0)) {
        double v13 = 1.0;
      }
      else {
        double v13 = 0.0;
      }
      v3[3] = v13;
      if (v9 != (v4[4] == 0.0)) {
        double v14 = 1.0;
      }
      else {
        double v14 = 0.0;
      }
      v3[4] = v14;
      if (v9 != (v4[5] == 0.0)) {
        double v15 = 1.0;
      }
      else {
        double v15 = 0.0;
      }
      v3[5] = v15;
      if (v9 != (v4[6] == 0.0)) {
        double v16 = 1.0;
      }
      else {
        double v16 = 0.0;
      }
      v3[6] = v16;
      if (v9 != (v4[7] == 0.0)) {
        double v17 = 1.0;
      }
      else {
        double v17 = 0.0;
      }
      v3[7] = v17;
      if (v9 != (v4[8] == 0.0)) {
        double v18 = 1.0;
      }
      else {
        double v18 = 0.0;
      }
      v3[8] = v18;
      if (v9 != (v4[9] == 0.0)) {
        double v19 = 1.0;
      }
      else {
        double v19 = 0.0;
      }
      v3[9] = v19;
      if (v9 != (v4[10] == 0.0)) {
        double v20 = 1.0;
      }
      else {
        double v20 = 0.0;
      }
      v3[10] = v20;
      if (v9 != (v4[11] == 0.0)) {
        double v21 = 1.0;
      }
      else {
        double v21 = 0.0;
      }
      v3[11] = v21;
      if (v9 != (v4[12] == 0.0)) {
        double v22 = 1.0;
      }
      else {
        double v22 = 0.0;
      }
      v3[12] = v22;
      if (v9 != (v4[13] == 0.0)) {
        double v23 = 1.0;
      }
      else {
        double v23 = 0.0;
      }
      v3[13] = v23;
      if (v9 != (v4[14] == 0.0)) {
        double v24 = 1.0;
      }
      else {
        double v24 = 0.0;
      }
      v3[14] = v24;
      if (v9 != (v4[15] == 0.0)) {
        double v25 = 1.0;
      }
      else {
        double v25 = 0.0;
      }
      v3[15] = v25;
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v8);
  }
  int v26 = (v5 & 0xF) - 1;
  unsigned int v27 = 0;
  unsigned int v28 = 0;
  unsigned int v29 = 0;
  unsigned int v30 = 0;
  unsigned int v31 = 0;
  unsigned int v32 = 0;
  unsigned int v33 = 0;
  unsigned int v34 = 0;
  unsigned int v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  switch(v26)
  {
    case 0:
      goto LABEL_99;
    case 1:
      goto LABEL_96;
    case 2:
      goto LABEL_93;
    case 3:
      goto LABEL_90;
    case 4:
      goto LABEL_87;
    case 5:
      goto LABEL_84;
    case 6:
      goto LABEL_81;
    case 7:
      goto LABEL_78;
    case 8:
      goto LABEL_75;
    case 9:
      goto LABEL_72;
    case 10:
      goto LABEL_69;
    case 11:
      goto LABEL_66;
    case 12:
      goto LABEL_63;
    case 13:
      goto LABEL_60;
    case 14:
      double v41 = 0.0;
      if ((v2 == 0.0) != (*v4 == 0.0)) {
        double v41 = 1.0;
      }
      double *v3 = v41;
      unsigned int v27 = 1;
LABEL_60:
      double v42 = 0.0;
      if ((v2 == 0.0) != (v4[v27] == 0.0)) {
        double v42 = 1.0;
      }
      v3[v27] = v42;
      unsigned int v28 = v27 + 1;
LABEL_63:
      double v43 = 0.0;
      if ((v2 == 0.0) != (v4[v28] == 0.0)) {
        double v43 = 1.0;
      }
      v3[v28] = v43;
      unsigned int v29 = v28 + 1;
LABEL_66:
      double v44 = 0.0;
      if ((v2 == 0.0) != (v4[v29] == 0.0)) {
        double v44 = 1.0;
      }
      v3[v29] = v44;
      unsigned int v30 = v29 + 1;
LABEL_69:
      double v45 = 0.0;
      if ((v2 == 0.0) != (v4[v30] == 0.0)) {
        double v45 = 1.0;
      }
      v3[v30] = v45;
      unsigned int v31 = v30 + 1;
LABEL_72:
      double v46 = 0.0;
      if ((v2 == 0.0) != (v4[v31] == 0.0)) {
        double v46 = 1.0;
      }
      v3[v31] = v46;
      unsigned int v32 = v31 + 1;
LABEL_75:
      double v47 = 0.0;
      if ((v2 == 0.0) != (v4[v32] == 0.0)) {
        double v47 = 1.0;
      }
      v3[v32] = v47;
      unsigned int v33 = v32 + 1;
LABEL_78:
      double v48 = 0.0;
      if ((v2 == 0.0) != (v4[v33] == 0.0)) {
        double v48 = 1.0;
      }
      v3[v33] = v48;
      unsigned int v34 = v33 + 1;
LABEL_81:
      double v49 = 0.0;
      if ((v2 == 0.0) != (v4[v34] == 0.0)) {
        double v49 = 1.0;
      }
      v3[v34] = v49;
      unsigned int v35 = v34 + 1;
LABEL_84:
      double v50 = 0.0;
      if ((v2 == 0.0) != (v4[v35] == 0.0)) {
        double v50 = 1.0;
      }
      v3[v35] = v50;
      uint64_t v36 = v35 + 1;
LABEL_87:
      double v51 = 0.0;
      if ((v2 == 0.0) != (v4[v36] == 0.0)) {
        double v51 = 1.0;
      }
      v3[v36] = v51;
      uint64_t v37 = (v36 + 1);
LABEL_90:
      double v52 = 0.0;
      if ((v2 == 0.0) != (v4[v37] == 0.0)) {
        double v52 = 1.0;
      }
      v3[v37] = v52;
      uint64_t v38 = (v37 + 1);
LABEL_93:
      double v53 = 0.0;
      if ((v2 == 0.0) != (v4[v38] == 0.0)) {
        double v53 = 1.0;
      }
      v3[v38] = v53;
      uint64_t v39 = (v38 + 1);
LABEL_96:
      double v54 = 0.0;
      if ((v2 == 0.0) != (v4[v39] == 0.0)) {
        double v54 = 1.0;
      }
      v3[v39] = v54;
      uint64_t v40 = (v39 + 1);
LABEL_99:
      double v55 = 0.0;
      if ((v2 == 0.0) != (v4[v40] == 0.0)) {
        double v55 = 1.0;
      }
      v3[v40] = v55;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v36, v37, v38, v39, v40)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v36, v37, v38, v39, v40)+ 16);
}

uint64_t sub_154C44()
{
  return 139;
}

uint64_t sub_154C4C(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_154C54(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_154C5C(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_154C9C(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_154CA4(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_154CAC(uint64_t a1)
{
  return sub_154D50(a1 - 48);
}

void sub_154CB4(uint64_t a1)
{
  sub_154D50(a1 - 48);

  operator delete();
}

uint64_t sub_154CF0(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 72))() + 8);
}

uint64_t sub_154D30(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_154D38(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_154D40(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_154D48(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_154D50(uint64_t a1)
{
  *(void *)a1 = off_2407378;
  *(void *)(a1 + 48) = off_24073D8;
  if (*(void *)(a1 + 64)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 80);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 80) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 && *(unsigned char *)(a1 + 40))
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }
  return a1;
}

void sub_154EE4(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_2407460;
  *(void *)(a1 + 48) = off_24074C0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  operator new();
}

void sub_1555D4(_Unwind_Exception *a1)
{
  sub_E26D8((uint64_t *)(v1 + 80));
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_1556A0(uint64_t a1)
{
  sub_155EEC(a1);

  operator delete();
}

double sub_1556D8(uint64_t a1)
{
  if (!*(void *)(a1 + 56)) {
    return NAN;
  }
  double v2 = (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
                  + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v5) << 32;
  if (v7 >= 1)
  {
    BOOL v8 = (double *)((char *)v3 + (v7 >> 29));
    do
    {
      BOOL v9 = v2 != 0.0;
      if (v9 != (*v4 != 0.0)) {
        double v10 = 0.0;
      }
      else {
        double v10 = 1.0;
      }
      double *v3 = v10;
      if (v9 != (v4[1] != 0.0)) {
        double v11 = 0.0;
      }
      else {
        double v11 = 1.0;
      }
      v3[1] = v11;
      if (v9 != (v4[2] != 0.0)) {
        double v12 = 0.0;
      }
      else {
        double v12 = 1.0;
      }
      v3[2] = v12;
      if (v9 != (v4[3] != 0.0)) {
        double v13 = 0.0;
      }
      else {
        double v13 = 1.0;
      }
      v3[3] = v13;
      if (v9 != (v4[4] != 0.0)) {
        double v14 = 0.0;
      }
      else {
        double v14 = 1.0;
      }
      v3[4] = v14;
      if (v9 != (v4[5] != 0.0)) {
        double v15 = 0.0;
      }
      else {
        double v15 = 1.0;
      }
      v3[5] = v15;
      if (v9 != (v4[6] != 0.0)) {
        double v16 = 0.0;
      }
      else {
        double v16 = 1.0;
      }
      v3[6] = v16;
      if (v9 != (v4[7] != 0.0)) {
        double v17 = 0.0;
      }
      else {
        double v17 = 1.0;
      }
      v3[7] = v17;
      if (v9 != (v4[8] != 0.0)) {
        double v18 = 0.0;
      }
      else {
        double v18 = 1.0;
      }
      v3[8] = v18;
      if (v9 != (v4[9] != 0.0)) {
        double v19 = 0.0;
      }
      else {
        double v19 = 1.0;
      }
      v3[9] = v19;
      if (v9 != (v4[10] != 0.0)) {
        double v20 = 0.0;
      }
      else {
        double v20 = 1.0;
      }
      v3[10] = v20;
      if (v9 != (v4[11] != 0.0)) {
        double v21 = 0.0;
      }
      else {
        double v21 = 1.0;
      }
      v3[11] = v21;
      if (v9 != (v4[12] != 0.0)) {
        double v22 = 0.0;
      }
      else {
        double v22 = 1.0;
      }
      v3[12] = v22;
      if (v9 != (v4[13] != 0.0)) {
        double v23 = 0.0;
      }
      else {
        double v23 = 1.0;
      }
      v3[13] = v23;
      if (v9 != (v4[14] != 0.0)) {
        double v24 = 0.0;
      }
      else {
        double v24 = 1.0;
      }
      v3[14] = v24;
      if (v9 != (v4[15] != 0.0)) {
        double v25 = 0.0;
      }
      else {
        double v25 = 1.0;
      }
      v3[15] = v25;
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v8);
  }
  int v26 = (v5 & 0xF) - 1;
  unsigned int v27 = 0;
  unsigned int v28 = 0;
  unsigned int v29 = 0;
  unsigned int v30 = 0;
  unsigned int v31 = 0;
  unsigned int v32 = 0;
  unsigned int v33 = 0;
  unsigned int v34 = 0;
  unsigned int v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  switch(v26)
  {
    case 0:
      goto LABEL_99;
    case 1:
      goto LABEL_96;
    case 2:
      goto LABEL_93;
    case 3:
      goto LABEL_90;
    case 4:
      goto LABEL_87;
    case 5:
      goto LABEL_84;
    case 6:
      goto LABEL_81;
    case 7:
      goto LABEL_78;
    case 8:
      goto LABEL_75;
    case 9:
      goto LABEL_72;
    case 10:
      goto LABEL_69;
    case 11:
      goto LABEL_66;
    case 12:
      goto LABEL_63;
    case 13:
      goto LABEL_60;
    case 14:
      double v41 = 1.0;
      if ((v2 != 0.0) != (*v4 != 0.0)) {
        double v41 = 0.0;
      }
      double *v3 = v41;
      unsigned int v27 = 1;
LABEL_60:
      double v42 = 1.0;
      if ((v2 != 0.0) != (v4[v27] != 0.0)) {
        double v42 = 0.0;
      }
      v3[v27] = v42;
      unsigned int v28 = v27 + 1;
LABEL_63:
      double v43 = 1.0;
      if ((v2 != 0.0) != (v4[v28] != 0.0)) {
        double v43 = 0.0;
      }
      v3[v28] = v43;
      unsigned int v29 = v28 + 1;
LABEL_66:
      double v44 = 1.0;
      if ((v2 != 0.0) != (v4[v29] != 0.0)) {
        double v44 = 0.0;
      }
      v3[v29] = v44;
      unsigned int v30 = v29 + 1;
LABEL_69:
      double v45 = 1.0;
      if ((v2 != 0.0) != (v4[v30] != 0.0)) {
        double v45 = 0.0;
      }
      v3[v30] = v45;
      unsigned int v31 = v30 + 1;
LABEL_72:
      double v46 = 1.0;
      if ((v2 != 0.0) != (v4[v31] != 0.0)) {
        double v46 = 0.0;
      }
      v3[v31] = v46;
      unsigned int v32 = v31 + 1;
LABEL_75:
      double v47 = 1.0;
      if ((v2 != 0.0) != (v4[v32] != 0.0)) {
        double v47 = 0.0;
      }
      v3[v32] = v47;
      unsigned int v33 = v32 + 1;
LABEL_78:
      double v48 = 1.0;
      if ((v2 != 0.0) != (v4[v33] != 0.0)) {
        double v48 = 0.0;
      }
      v3[v33] = v48;
      unsigned int v34 = v33 + 1;
LABEL_81:
      double v49 = 1.0;
      if ((v2 != 0.0) != (v4[v34] != 0.0)) {
        double v49 = 0.0;
      }
      v3[v34] = v49;
      unsigned int v35 = v34 + 1;
LABEL_84:
      double v50 = 1.0;
      if ((v2 != 0.0) != (v4[v35] != 0.0)) {
        double v50 = 0.0;
      }
      v3[v35] = v50;
      uint64_t v36 = v35 + 1;
LABEL_87:
      double v51 = 1.0;
      if ((v2 != 0.0) != (v4[v36] != 0.0)) {
        double v51 = 0.0;
      }
      v3[v36] = v51;
      uint64_t v37 = (v36 + 1);
LABEL_90:
      double v52 = 1.0;
      if ((v2 != 0.0) != (v4[v37] != 0.0)) {
        double v52 = 0.0;
      }
      v3[v37] = v52;
      uint64_t v38 = (v37 + 1);
LABEL_93:
      double v53 = 1.0;
      if ((v2 != 0.0) != (v4[v38] != 0.0)) {
        double v53 = 0.0;
      }
      v3[v38] = v53;
      uint64_t v39 = (v38 + 1);
LABEL_96:
      double v54 = 1.0;
      if ((v2 != 0.0) != (v4[v39] != 0.0)) {
        double v54 = 0.0;
      }
      v3[v39] = v54;
      uint64_t v40 = (v39 + 1);
LABEL_99:
      double v55 = 1.0;
      if ((v2 != 0.0) != (v4[v40] != 0.0)) {
        double v55 = 0.0;
      }
      v3[v40] = v55;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v36, v37, v38, v39, v40)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v36, v37, v38, v39, v40)+ 16);
}

uint64_t sub_155DE0()
{
  return 139;
}

uint64_t sub_155DE8(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_155DF0(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_155DF8(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_155E38(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_155E40(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_155E48(uint64_t a1)
{
  return sub_155EEC(a1 - 48);
}

void sub_155E50(uint64_t a1)
{
  sub_155EEC(a1 - 48);

  operator delete();
}

uint64_t sub_155E8C(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 72))() + 8);
}

uint64_t sub_155ECC(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_155ED4(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_155EDC(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_155EE4(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_155EEC(uint64_t a1)
{
  *(void *)a1 = off_2407460;
  *(void *)(a1 + 48) = off_24074C0;
  if (*(void *)(a1 + 64)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 80);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 80) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 && *(unsigned char *)(a1 + 40))
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }
  return a1;
}

void sub_156080(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_2407548;
  *(void *)(a1 + 48) = off_24075A8;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(unsigned char *)(a1 + 88) = 0;
  operator new();
}

void sub_1569A4(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_156A64(uint64_t a1)
{
  sub_156FF8(a1);

  operator delete();
}

double sub_156A9C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 88)) {
    return NAN;
  }
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  uint64_t v2 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
                  + 16);
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 64) + 64))(*(void *)(a1 + 64))
                  + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v5) << 32;
  if (v7 >= 1)
  {
    BOOL v8 = (double *)((char *)v4 + (v7 >> 29));
    do
    {
      *uint64_t v4 = *v2 + *v3;
      v4[1] = v2[1] + v3[1];
      v4[2] = v2[2] + v3[2];
      v4[3] = v2[3] + v3[3];
      v4[4] = v2[4] + v3[4];
      v4[5] = v2[5] + v3[5];
      v4[6] = v2[6] + v3[6];
      v4[7] = v2[7] + v3[7];
      v4[8] = v2[8] + v3[8];
      v4[9] = v2[9] + v3[9];
      v4[10] = v2[10] + v3[10];
      v4[11] = v2[11] + v3[11];
      v4[12] = v2[12] + v3[12];
      v4[13] = v2[13] + v3[13];
      v4[14] = v2[14] + v3[14];
      v4[15] = v2[15] + v3[15];
      v2 += 16;
      v3 += 16;
      v4 += 16;
    }
    while (v4 < v8);
  }
  int v9 = (v5 & 0xF) - 1;
  unsigned int v10 = 0;
  unsigned int v11 = 0;
  unsigned int v12 = 0;
  unsigned int v13 = 0;
  unsigned int v14 = 0;
  unsigned int v15 = 0;
  unsigned int v16 = 0;
  unsigned int v17 = 0;
  unsigned int v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  switch(v9)
  {
    case 0:
      goto LABEL_23;
    case 1:
      goto LABEL_22;
    case 2:
      goto LABEL_21;
    case 3:
      goto LABEL_20;
    case 4:
      goto LABEL_19;
    case 5:
      goto LABEL_18;
    case 6:
      goto LABEL_17;
    case 7:
      goto LABEL_16;
    case 8:
      goto LABEL_15;
    case 9:
      goto LABEL_14;
    case 10:
      goto LABEL_13;
    case 11:
      goto LABEL_12;
    case 12:
      goto LABEL_11;
    case 13:
      goto LABEL_10;
    case 14:
      *uint64_t v4 = *v2 + *v3;
      unsigned int v10 = 1;
LABEL_10:
      v4[v10] = v2[v10] + v3[v10];
      unsigned int v11 = v10 + 1;
LABEL_11:
      v4[v11] = v2[v11] + v3[v11];
      unsigned int v12 = v11 + 1;
LABEL_12:
      v4[v12] = v2[v12] + v3[v12];
      unsigned int v13 = v12 + 1;
LABEL_13:
      v4[v13] = v2[v13] + v3[v13];
      unsigned int v14 = v13 + 1;
LABEL_14:
      v4[v14] = v2[v14] + v3[v14];
      unsigned int v15 = v14 + 1;
LABEL_15:
      v4[v15] = v2[v15] + v3[v15];
      unsigned int v16 = v15 + 1;
LABEL_16:
      v4[v16] = v2[v16] + v3[v16];
      unsigned int v17 = v16 + 1;
LABEL_17:
      v4[v17] = v2[v17] + v3[v17];
      unsigned int v18 = v17 + 1;
LABEL_18:
      v4[v18] = v2[v18] + v3[v18];
      uint64_t v19 = v18 + 1;
LABEL_19:
      v4[v19] = v2[v19] + v3[v19];
      uint64_t v20 = (v19 + 1);
LABEL_20:
      v4[v20] = v2[v20] + v3[v20];
      uint64_t v21 = (v20 + 1);
LABEL_21:
      v4[v21] = v2[v21] + v3[v21];
      uint64_t v22 = (v21 + 1);
LABEL_22:
      v4[v22] = v2[v22] + v3[v22];
      uint64_t v23 = (v22 + 1);
LABEL_23:
      v4[v23] = v2[v23] + v3[v23];
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v19, v20, v21, v22, v23)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v19, v20, v21, v22, v23)+ 16);
}

uint64_t sub_156F54()
{
  return 138;
}

uint64_t sub_156F5C(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t sub_156F64(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t sub_156F6C(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 96) + 8);
}

uint64_t sub_156F78(uint64_t a1)
{
  return a1 + 96;
}

uint64_t sub_156F80(uint64_t a1)
{
  return a1 + 96;
}

uint64_t sub_156F88(uint64_t a1)
{
  return sub_156FF8(a1 - 48);
}

void sub_156F90(uint64_t a1)
{
  sub_156FF8(a1 - 48);

  operator delete();
}

uint64_t sub_156FCC(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 48) + 8);
}

uint64_t sub_156FD8(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_156FE0(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_156FE8(uint64_t a1)
{
  return a1 + 48;
}

uint64_t sub_156FF0(uint64_t a1)
{
  return a1 + 48;
}

uint64_t sub_156FF8(uint64_t a1)
{
  *(void *)a1 = off_2407548;
  *(void *)(a1 + 48) = off_24075A8;
  if (*(void *)(a1 + 72)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 80);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 96);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 96) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 && *(unsigned char *)(a1 + 40))
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }
  return a1;
}

void sub_15718C(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_2407630;
  *(void *)(a1 + 48) = off_2407690;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(unsigned char *)(a1 + 88) = 0;
  operator new();
}

void sub_157AB0(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_157B70(uint64_t a1)
{
  sub_158104(a1);

  operator delete();
}

double sub_157BA8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 88)) {
    return NAN;
  }
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  uint64_t v2 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
                  + 16);
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 64) + 64))(*(void *)(a1 + 64))
                  + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v5) << 32;
  if (v7 >= 1)
  {
    BOOL v8 = (double *)((char *)v4 + (v7 >> 29));
    do
    {
      *uint64_t v4 = *v2 - *v3;
      v4[1] = v2[1] - v3[1];
      v4[2] = v2[2] - v3[2];
      v4[3] = v2[3] - v3[3];
      v4[4] = v2[4] - v3[4];
      v4[5] = v2[5] - v3[5];
      v4[6] = v2[6] - v3[6];
      v4[7] = v2[7] - v3[7];
      v4[8] = v2[8] - v3[8];
      v4[9] = v2[9] - v3[9];
      v4[10] = v2[10] - v3[10];
      v4[11] = v2[11] - v3[11];
      v4[12] = v2[12] - v3[12];
      v4[13] = v2[13] - v3[13];
      v4[14] = v2[14] - v3[14];
      v4[15] = v2[15] - v3[15];
      v2 += 16;
      v3 += 16;
      v4 += 16;
    }
    while (v4 < v8);
  }
  int v9 = (v5 & 0xF) - 1;
  unsigned int v10 = 0;
  unsigned int v11 = 0;
  unsigned int v12 = 0;
  unsigned int v13 = 0;
  unsigned int v14 = 0;
  unsigned int v15 = 0;
  unsigned int v16 = 0;
  unsigned int v17 = 0;
  unsigned int v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  switch(v9)
  {
    case 0:
      goto LABEL_23;
    case 1:
      goto LABEL_22;
    case 2:
      goto LABEL_21;
    case 3:
      goto LABEL_20;
    case 4:
      goto LABEL_19;
    case 5:
      goto LABEL_18;
    case 6:
      goto LABEL_17;
    case 7:
      goto LABEL_16;
    case 8:
      goto LABEL_15;
    case 9:
      goto LABEL_14;
    case 10:
      goto LABEL_13;
    case 11:
      goto LABEL_12;
    case 12:
      goto LABEL_11;
    case 13:
      goto LABEL_10;
    case 14:
      *uint64_t v4 = *v2 - *v3;
      unsigned int v10 = 1;
LABEL_10:
      v4[v10] = v2[v10] - v3[v10];
      unsigned int v11 = v10 + 1;
LABEL_11:
      v4[v11] = v2[v11] - v3[v11];
      unsigned int v12 = v11 + 1;
LABEL_12:
      v4[v12] = v2[v12] - v3[v12];
      unsigned int v13 = v12 + 1;
LABEL_13:
      v4[v13] = v2[v13] - v3[v13];
      unsigned int v14 = v13 + 1;
LABEL_14:
      v4[v14] = v2[v14] - v3[v14];
      unsigned int v15 = v14 + 1;
LABEL_15:
      v4[v15] = v2[v15] - v3[v15];
      unsigned int v16 = v15 + 1;
LABEL_16:
      v4[v16] = v2[v16] - v3[v16];
      unsigned int v17 = v16 + 1;
LABEL_17:
      v4[v17] = v2[v17] - v3[v17];
      unsigned int v18 = v17 + 1;
LABEL_18:
      v4[v18] = v2[v18] - v3[v18];
      uint64_t v19 = v18 + 1;
LABEL_19:
      v4[v19] = v2[v19] - v3[v19];
      uint64_t v20 = (v19 + 1);
LABEL_20:
      v4[v20] = v2[v20] - v3[v20];
      uint64_t v21 = (v20 + 1);
LABEL_21:
      v4[v21] = v2[v21] - v3[v21];
      uint64_t v22 = (v21 + 1);
LABEL_22:
      v4[v22] = v2[v22] - v3[v22];
      uint64_t v23 = (v22 + 1);
LABEL_23:
      v4[v23] = v2[v23] - v3[v23];
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v19, v20, v21, v22, v23)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v19, v20, v21, v22, v23)+ 16);
}

uint64_t sub_158060()
{
  return 138;
}

uint64_t sub_158068(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t sub_158070(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t sub_158078(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 96) + 8);
}

uint64_t sub_158084(uint64_t a1)
{
  return a1 + 96;
}

uint64_t sub_15808C(uint64_t a1)
{
  return a1 + 96;
}

uint64_t sub_158094(uint64_t a1)
{
  return sub_158104(a1 - 48);
}

void sub_15809C(uint64_t a1)
{
  sub_158104(a1 - 48);

  operator delete();
}

uint64_t sub_1580D8(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 48) + 8);
}

uint64_t sub_1580E4(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_1580EC(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_1580F4(uint64_t a1)
{
  return a1 + 48;
}

uint64_t sub_1580FC(uint64_t a1)
{
  return a1 + 48;
}

uint64_t sub_158104(uint64_t a1)
{
  *(void *)a1 = off_2407630;
  *(void *)(a1 + 48) = off_2407690;
  if (*(void *)(a1 + 72)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 80);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 96);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 96) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 && *(unsigned char *)(a1 + 40))
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }
  return a1;
}

void sub_158298(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_2407718;
  *(void *)(a1 + 48) = off_2407778;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(unsigned char *)(a1 + 88) = 0;
  operator new();
}

void sub_158BBC(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_158C7C(uint64_t a1)
{
  sub_159210(a1);

  operator delete();
}

double sub_158CB4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 88)) {
    return NAN;
  }
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  uint64_t v2 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
                  + 16);
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 64) + 64))(*(void *)(a1 + 64))
                  + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v5) << 32;
  if (v7 >= 1)
  {
    BOOL v8 = (double *)((char *)v4 + (v7 >> 29));
    do
    {
      *uint64_t v4 = *v2 * *v3;
      v4[1] = v2[1] * v3[1];
      v4[2] = v2[2] * v3[2];
      v4[3] = v2[3] * v3[3];
      v4[4] = v2[4] * v3[4];
      v4[5] = v2[5] * v3[5];
      v4[6] = v2[6] * v3[6];
      v4[7] = v2[7] * v3[7];
      v4[8] = v2[8] * v3[8];
      v4[9] = v2[9] * v3[9];
      v4[10] = v2[10] * v3[10];
      v4[11] = v2[11] * v3[11];
      v4[12] = v2[12] * v3[12];
      v4[13] = v2[13] * v3[13];
      v4[14] = v2[14] * v3[14];
      v4[15] = v2[15] * v3[15];
      v2 += 16;
      v3 += 16;
      v4 += 16;
    }
    while (v4 < v8);
  }
  int v9 = (v5 & 0xF) - 1;
  unsigned int v10 = 0;
  unsigned int v11 = 0;
  unsigned int v12 = 0;
  unsigned int v13 = 0;
  unsigned int v14 = 0;
  unsigned int v15 = 0;
  unsigned int v16 = 0;
  unsigned int v17 = 0;
  unsigned int v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  switch(v9)
  {
    case 0:
      goto LABEL_23;
    case 1:
      goto LABEL_22;
    case 2:
      goto LABEL_21;
    case 3:
      goto LABEL_20;
    case 4:
      goto LABEL_19;
    case 5:
      goto LABEL_18;
    case 6:
      goto LABEL_17;
    case 7:
      goto LABEL_16;
    case 8:
      goto LABEL_15;
    case 9:
      goto LABEL_14;
    case 10:
      goto LABEL_13;
    case 11:
      goto LABEL_12;
    case 12:
      goto LABEL_11;
    case 13:
      goto LABEL_10;
    case 14:
      *uint64_t v4 = *v2 * *v3;
      unsigned int v10 = 1;
LABEL_10:
      v4[v10] = v2[v10] * v3[v10];
      unsigned int v11 = v10 + 1;
LABEL_11:
      v4[v11] = v2[v11] * v3[v11];
      unsigned int v12 = v11 + 1;
LABEL_12:
      v4[v12] = v2[v12] * v3[v12];
      unsigned int v13 = v12 + 1;
LABEL_13:
      v4[v13] = v2[v13] * v3[v13];
      unsigned int v14 = v13 + 1;
LABEL_14:
      v4[v14] = v2[v14] * v3[v14];
      unsigned int v15 = v14 + 1;
LABEL_15:
      v4[v15] = v2[v15] * v3[v15];
      unsigned int v16 = v15 + 1;
LABEL_16:
      v4[v16] = v2[v16] * v3[v16];
      unsigned int v17 = v16 + 1;
LABEL_17:
      v4[v17] = v2[v17] * v3[v17];
      unsigned int v18 = v17 + 1;
LABEL_18:
      v4[v18] = v2[v18] * v3[v18];
      uint64_t v19 = v18 + 1;
LABEL_19:
      v4[v19] = v2[v19] * v3[v19];
      uint64_t v20 = (v19 + 1);
LABEL_20:
      v4[v20] = v2[v20] * v3[v20];
      uint64_t v21 = (v20 + 1);
LABEL_21:
      v4[v21] = v2[v21] * v3[v21];
      uint64_t v22 = (v21 + 1);
LABEL_22:
      v4[v22] = v2[v22] * v3[v22];
      uint64_t v23 = (v22 + 1);
LABEL_23:
      v4[v23] = v2[v23] * v3[v23];
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v19, v20, v21, v22, v23)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v19, v20, v21, v22, v23)+ 16);
}

uint64_t sub_15916C()
{
  return 138;
}

uint64_t sub_159174(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t sub_15917C(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t sub_159184(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 96) + 8);
}

uint64_t sub_159190(uint64_t a1)
{
  return a1 + 96;
}

uint64_t sub_159198(uint64_t a1)
{
  return a1 + 96;
}

uint64_t sub_1591A0(uint64_t a1)
{
  return sub_159210(a1 - 48);
}

void sub_1591A8(uint64_t a1)
{
  sub_159210(a1 - 48);

  operator delete();
}

uint64_t sub_1591E4(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 48) + 8);
}

uint64_t sub_1591F0(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_1591F8(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_159200(uint64_t a1)
{
  return a1 + 48;
}

uint64_t sub_159208(uint64_t a1)
{
  return a1 + 48;
}

uint64_t sub_159210(uint64_t a1)
{
  *(void *)a1 = off_2407718;
  *(void *)(a1 + 48) = off_2407778;
  if (*(void *)(a1 + 72)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 80);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 96);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 96) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 && *(unsigned char *)(a1 + 40))
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }
  return a1;
}

void sub_1593A4(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_2407800;
  *(void *)(a1 + 48) = off_2407860;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(unsigned char *)(a1 + 88) = 0;
  operator new();
}

void sub_159CC8(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_159D88(uint64_t a1)
{
  sub_15A31C(a1);

  operator delete();
}

double sub_159DC0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 88)) {
    return NAN;
  }
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  uint64_t v2 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
                  + 16);
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 64) + 64))(*(void *)(a1 + 64))
                  + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v5) << 32;
  if (v7 >= 1)
  {
    BOOL v8 = (double *)((char *)v4 + (v7 >> 29));
    do
    {
      *uint64_t v4 = *v2 / *v3;
      v4[1] = v2[1] / v3[1];
      v4[2] = v2[2] / v3[2];
      v4[3] = v2[3] / v3[3];
      v4[4] = v2[4] / v3[4];
      v4[5] = v2[5] / v3[5];
      v4[6] = v2[6] / v3[6];
      v4[7] = v2[7] / v3[7];
      v4[8] = v2[8] / v3[8];
      v4[9] = v2[9] / v3[9];
      v4[10] = v2[10] / v3[10];
      v4[11] = v2[11] / v3[11];
      v4[12] = v2[12] / v3[12];
      v4[13] = v2[13] / v3[13];
      v4[14] = v2[14] / v3[14];
      v4[15] = v2[15] / v3[15];
      v2 += 16;
      v3 += 16;
      v4 += 16;
    }
    while (v4 < v8);
  }
  int v9 = (v5 & 0xF) - 1;
  unsigned int v10 = 0;
  unsigned int v11 = 0;
  unsigned int v12 = 0;
  unsigned int v13 = 0;
  unsigned int v14 = 0;
  unsigned int v15 = 0;
  unsigned int v16 = 0;
  unsigned int v17 = 0;
  unsigned int v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  switch(v9)
  {
    case 0:
      goto LABEL_23;
    case 1:
      goto LABEL_22;
    case 2:
      goto LABEL_21;
    case 3:
      goto LABEL_20;
    case 4:
      goto LABEL_19;
    case 5:
      goto LABEL_18;
    case 6:
      goto LABEL_17;
    case 7:
      goto LABEL_16;
    case 8:
      goto LABEL_15;
    case 9:
      goto LABEL_14;
    case 10:
      goto LABEL_13;
    case 11:
      goto LABEL_12;
    case 12:
      goto LABEL_11;
    case 13:
      goto LABEL_10;
    case 14:
      *uint64_t v4 = *v2 / *v3;
      unsigned int v10 = 1;
LABEL_10:
      v4[v10] = v2[v10] / v3[v10];
      unsigned int v11 = v10 + 1;
LABEL_11:
      v4[v11] = v2[v11] / v3[v11];
      unsigned int v12 = v11 + 1;
LABEL_12:
      v4[v12] = v2[v12] / v3[v12];
      unsigned int v13 = v12 + 1;
LABEL_13:
      v4[v13] = v2[v13] / v3[v13];
      unsigned int v14 = v13 + 1;
LABEL_14:
      v4[v14] = v2[v14] / v3[v14];
      unsigned int v15 = v14 + 1;
LABEL_15:
      v4[v15] = v2[v15] / v3[v15];
      unsigned int v16 = v15 + 1;
LABEL_16:
      v4[v16] = v2[v16] / v3[v16];
      unsigned int v17 = v16 + 1;
LABEL_17:
      v4[v17] = v2[v17] / v3[v17];
      unsigned int v18 = v17 + 1;
LABEL_18:
      v4[v18] = v2[v18] / v3[v18];
      uint64_t v19 = v18 + 1;
LABEL_19:
      v4[v19] = v2[v19] / v3[v19];
      uint64_t v20 = (v19 + 1);
LABEL_20:
      v4[v20] = v2[v20] / v3[v20];
      uint64_t v21 = (v20 + 1);
LABEL_21:
      v4[v21] = v2[v21] / v3[v21];
      uint64_t v22 = (v21 + 1);
LABEL_22:
      v4[v22] = v2[v22] / v3[v22];
      uint64_t v23 = (v22 + 1);
LABEL_23:
      v4[v23] = v2[v23] / v3[v23];
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v19, v20, v21, v22, v23)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v19, v20, v21, v22, v23)+ 16);
}

uint64_t sub_15A278()
{
  return 138;
}

uint64_t sub_15A280(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t sub_15A288(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t sub_15A290(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 96) + 8);
}

uint64_t sub_15A29C(uint64_t a1)
{
  return a1 + 96;
}

uint64_t sub_15A2A4(uint64_t a1)
{
  return a1 + 96;
}

uint64_t sub_15A2AC(uint64_t a1)
{
  return sub_15A31C(a1 - 48);
}

void sub_15A2B4(uint64_t a1)
{
  sub_15A31C(a1 - 48);

  operator delete();
}

uint64_t sub_15A2F0(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 48) + 8);
}

uint64_t sub_15A2FC(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_15A304(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_15A30C(uint64_t a1)
{
  return a1 + 48;
}

uint64_t sub_15A314(uint64_t a1)
{
  return a1 + 48;
}

uint64_t sub_15A31C(uint64_t a1)
{
  *(void *)a1 = off_2407800;
  *(void *)(a1 + 48) = off_2407860;
  if (*(void *)(a1 + 72)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 80);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 96);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 96) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 && *(unsigned char *)(a1 + 40))
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }
  return a1;
}

void sub_15A4B0(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_24078E8;
  *(void *)(a1 + 48) = off_2407948;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(unsigned char *)(a1 + 88) = 0;
  operator new();
}

void sub_15ADD4(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_15AE94(uint64_t a1)
{
  sub_15B45C(a1);

  operator delete();
}

double sub_15AECC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 88)) {
    return NAN;
  }
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  uint64_t v2 = *(long double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
                       + 16);
  uint64_t v3 = *(long double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 64) + 64))(*(void *)(a1 + 64))
                       + 16);
  uint64_t v4 = *(long double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  int v6 = v5 & 0xF;
  if ((v5 & 0xF) != 0) {
    int v7 = -16;
  }
  else {
    int v7 = 0;
  }
  int64_t v8 = (unint64_t)(v7 + v5) << 32;
  if (v8 >= 1)
  {
    int v9 = (long double *)((char *)v4 + (v8 >> 29));
    do
    {
      *uint64_t v4 = fmod(*v2, *v3);
      v4[1] = fmod(v2[1], v3[1]);
      v4[2] = fmod(v2[2], v3[2]);
      v4[3] = fmod(v2[3], v3[3]);
      v4[4] = fmod(v2[4], v3[4]);
      v4[5] = fmod(v2[5], v3[5]);
      v4[6] = fmod(v2[6], v3[6]);
      v4[7] = fmod(v2[7], v3[7]);
      v4[8] = fmod(v2[8], v3[8]);
      v4[9] = fmod(v2[9], v3[9]);
      v4[10] = fmod(v2[10], v3[10]);
      v4[11] = fmod(v2[11], v3[11]);
      v4[12] = fmod(v2[12], v3[12]);
      v4[13] = fmod(v2[13], v3[13]);
      v4[14] = fmod(v2[14], v3[14]);
      v4[15] = fmod(v2[15], v3[15]);
      v2 += 16;
      v3 += 16;
      v4 += 16;
    }
    while (v4 < v9);
  }
  int v10 = v6 - 1;
  uint64_t v32 = a1;
  unsigned int v11 = 0;
  unsigned int v12 = 0;
  unsigned int v13 = 0;
  unsigned int v14 = 0;
  unsigned int v15 = 0;
  int v16 = 0;
  int v17 = 0;
  int v18 = 0;
  int v19 = 0;
  uint64_t v20 = 0;
  int v21 = 0;
  int v22 = 0;
  int v23 = 0;
  uint64_t v24 = 0;
  switch(v10)
  {
    case 0:
      goto LABEL_23;
    case 1:
      goto LABEL_22;
    case 2:
      goto LABEL_21;
    case 3:
      goto LABEL_20;
    case 4:
      goto LABEL_19;
    case 5:
      goto LABEL_18;
    case 6:
      goto LABEL_17;
    case 7:
      goto LABEL_16;
    case 8:
      goto LABEL_15;
    case 9:
      goto LABEL_14;
    case 10:
      goto LABEL_13;
    case 11:
      goto LABEL_12;
    case 12:
      goto LABEL_11;
    case 13:
      goto LABEL_10;
    case 14:
      *uint64_t v4 = fmod(*v2, *v3);
      unsigned int v11 = 1;
LABEL_10:
      unsigned int v25 = v11;
      v4[v11] = fmod(v2[v11], v3[v11]);
      unsigned int v12 = v25 + 1;
LABEL_11:
      unsigned int v26 = v12;
      v4[v12] = fmod(v2[v12], v3[v12]);
      unsigned int v13 = v26 + 1;
LABEL_12:
      unsigned int v27 = v13;
      v4[v13] = fmod(v2[v13], v3[v13]);
      unsigned int v14 = v27 + 1;
LABEL_13:
      unsigned int v28 = v14;
      v4[v14] = fmod(v2[v14], v3[v14]);
      unsigned int v15 = v28 + 1;
LABEL_14:
      unsigned int v29 = v15;
      v4[v15] = fmod(v2[v15], v3[v15]);
      int v16 = v29 + 1;
LABEL_15:
      int v30 = v16;
      v4[v16] = fmod(v2[v16], v3[v16]);
      int v17 = v30 + 1;
LABEL_16:
      v4[v17] = fmod(v2[v17], v3[v17]);
      int v18 = v17 + 1;
LABEL_17:
      v4[v18] = fmod(v2[v18], v3[v18]);
      int v19 = v18 + 1;
LABEL_18:
      v4[v19] = fmod(v2[v19], v3[v19]);
      LODWORD(v20) = v19 + 1;
LABEL_19:
      v4[v20] = fmod(v2[v20], v3[v20]);
      int v21 = v20 + 1;
LABEL_20:
      v4[v21] = fmod(v2[v21], v3[v21]);
      int v22 = v21 + 1;
LABEL_21:
      v4[v22] = fmod(v2[v22], v3[v22]);
      int v23 = v22 + 1;
LABEL_22:
      v4[v23] = fmod(v2[v23], v3[v23]);
      uint64_t v24 = (v23 + 1);
LABEL_23:
      v4[v24] = fmod(v2[v24], v3[v24]);
      uint64_t v20 = v32;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v20 + 72))(v20) + 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v20 + 72))(v20) + 16);
}

uint64_t sub_15B3B8()
{
  return 138;
}

uint64_t sub_15B3C0(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t sub_15B3C8(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t sub_15B3D0(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 96) + 8);
}

uint64_t sub_15B3DC(uint64_t a1)
{
  return a1 + 96;
}

uint64_t sub_15B3E4(uint64_t a1)
{
  return a1 + 96;
}

uint64_t sub_15B3EC(uint64_t a1)
{
  return sub_15B45C(a1 - 48);
}

void sub_15B3F4(uint64_t a1)
{
  sub_15B45C(a1 - 48);

  operator delete();
}

uint64_t sub_15B430(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 48) + 8);
}

uint64_t sub_15B43C(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_15B444(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_15B44C(uint64_t a1)
{
  return a1 + 48;
}

uint64_t sub_15B454(uint64_t a1)
{
  return a1 + 48;
}

uint64_t sub_15B45C(uint64_t a1)
{
  *(void *)a1 = off_24078E8;
  *(void *)(a1 + 48) = off_2407948;
  if (*(void *)(a1 + 72)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 80);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 96);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 96) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 && *(unsigned char *)(a1 + 40))
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }
  return a1;
}

void sub_15B5F0(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_24079D0;
  *(void *)(a1 + 48) = off_2407A30;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(unsigned char *)(a1 + 88) = 0;
  operator new();
}

void sub_15BF14(_Unwind_Exception *a1)
{
  sub_E26D8(v2);
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_15BFD4(uint64_t a1)
{
  sub_15C59C(a1);

  operator delete();
}

double sub_15C00C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 88)) {
    return NAN;
  }
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  uint64_t v2 = *(long double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
                       + 16);
  uint64_t v3 = *(long double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 64) + 64))(*(void *)(a1 + 64))
                       + 16);
  uint64_t v4 = *(long double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  int v6 = v5 & 0xF;
  if ((v5 & 0xF) != 0) {
    int v7 = -16;
  }
  else {
    int v7 = 0;
  }
  int64_t v8 = (unint64_t)(v7 + v5) << 32;
  if (v8 >= 1)
  {
    int v9 = (long double *)((char *)v4 + (v8 >> 29));
    do
    {
      *uint64_t v4 = pow(*v2, *v3);
      v4[1] = pow(v2[1], v3[1]);
      v4[2] = pow(v2[2], v3[2]);
      v4[3] = pow(v2[3], v3[3]);
      v4[4] = pow(v2[4], v3[4]);
      v4[5] = pow(v2[5], v3[5]);
      v4[6] = pow(v2[6], v3[6]);
      v4[7] = pow(v2[7], v3[7]);
      v4[8] = pow(v2[8], v3[8]);
      v4[9] = pow(v2[9], v3[9]);
      v4[10] = pow(v2[10], v3[10]);
      v4[11] = pow(v2[11], v3[11]);
      v4[12] = pow(v2[12], v3[12]);
      v4[13] = pow(v2[13], v3[13]);
      v4[14] = pow(v2[14], v3[14]);
      v4[15] = pow(v2[15], v3[15]);
      v2 += 16;
      v3 += 16;
      v4 += 16;
    }
    while (v4 < v9);
  }
  int v10 = v6 - 1;
  uint64_t v32 = a1;
  unsigned int v11 = 0;
  unsigned int v12 = 0;
  unsigned int v13 = 0;
  unsigned int v14 = 0;
  unsigned int v15 = 0;
  int v16 = 0;
  int v17 = 0;
  int v18 = 0;
  int v19 = 0;
  uint64_t v20 = 0;
  int v21 = 0;
  int v22 = 0;
  int v23 = 0;
  uint64_t v24 = 0;
  switch(v10)
  {
    case 0:
      goto LABEL_23;
    case 1:
      goto LABEL_22;
    case 2:
      goto LABEL_21;
    case 3:
      goto LABEL_20;
    case 4:
      goto LABEL_19;
    case 5:
      goto LABEL_18;
    case 6:
      goto LABEL_17;
    case 7:
      goto LABEL_16;
    case 8:
      goto LABEL_15;
    case 9:
      goto LABEL_14;
    case 10:
      goto LABEL_13;
    case 11:
      goto LABEL_12;
    case 12:
      goto LABEL_11;
    case 13:
      goto LABEL_10;
    case 14:
      *uint64_t v4 = pow(*v2, *v3);
      unsigned int v11 = 1;
LABEL_10:
      unsigned int v25 = v11;
      v4[v11] = pow(v2[v11], v3[v11]);
      unsigned int v12 = v25 + 1;
LABEL_11:
      unsigned int v26 = v12;
      v4[v12] = pow(v2[v12], v3[v12]);
      unsigned int v13 = v26 + 1;
LABEL_12:
      unsigned int v27 = v13;
      v4[v13] = pow(v2[v13], v3[v13]);
      unsigned int v14 = v27 + 1;
LABEL_13:
      unsigned int v28 = v14;
      v4[v14] = pow(v2[v14], v3[v14]);
      unsigned int v15 = v28 + 1;
LABEL_14:
      unsigned int v29 = v15;
      v4[v15] = pow(v2[v15], v3[v15]);
      int v16 = v29 + 1;
LABEL_15:
      int v30 = v16;
      v4[v16] = pow(v2[v16], v3[v16]);
      int v17 = v30 + 1;
LABEL_16:
      v4[v17] = pow(v2[v17], v3[v17]);
      int v18 = v17 + 1;
LABEL_17:
      v4[v18] = pow(v2[v18], v3[v18]);
      int v19 = v18 + 1;
LABEL_18:
      v4[v19] = pow(v2[v19], v3[v19]);
      LODWORD(v20) = v19 + 1;
LABEL_19:
      v4[v20] = pow(v2[v20], v3[v20]);
      int v21 = v20 + 1;
LABEL_20:
      v4[v21] = pow(v2[v21], v3[v21]);
      int v22 = v21 + 1;
LABEL_21:
      v4[v22] = pow(v2[v22], v3[v22]);
      int v23 = v22 + 1;
LABEL_22:
      v4[v23] = pow(v2[v23], v3[v23]);
      uint64_t v24 = (v23 + 1);
LABEL_23:
      v4[v24] = pow(v2[v24], v3[v24]);
      uint64_t v20 = v32;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v20 + 72))(v20) + 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v20 + 72))(v20) + 16);
}

uint64_t sub_15C4F8()
{
  return 138;
}

uint64_t sub_15C500(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t sub_15C508(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t sub_15C510(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 96) + 8);
}

uint64_t sub_15C51C(uint64_t a1)
{
  return a1 + 96;
}

uint64_t sub_15C524(uint64_t a1)
{
  return a1 + 96;
}

uint64_t sub_15C52C(uint64_t a1)
{
  return sub_15C59C(a1 - 48);
}

void sub_15C534(uint64_t a1)
{
  sub_15C59C(a1 - 48);

  operator delete();
}

uint64_t sub_15C570(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 48) + 8);
}

uint64_t sub_15C57C(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_15C584(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_15C58C(uint64_t a1)
{
  return a1 + 48;
}

uint64_t sub_15C594(uint64_t a1)
{
  return a1 + 48;
}

uint64_t sub_15C59C(uint64_t a1)
{
  *(void *)a1 = off_24079D0;
  *(void *)(a1 + 48) = off_2407A30;
  if (*(void *)(a1 + 72)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 80);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 96);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 96) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 && *(unsigned char *)(a1 + 40))
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }
  return a1;
}

double sub_15C730(long double *a1, long double *a2)
{
  return pow(*a1, *a2);
}

void sub_15C73C(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_2407AB8;
  *(void *)(a1 + 48) = off_2407B18;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  operator new();
}

void sub_15CE2C(_Unwind_Exception *a1)
{
  sub_E26D8((uint64_t *)(v1 + 80));
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_15CEF8(uint64_t a1)
{
  sub_15D454(a1);

  operator delete();
}

double sub_15CF30(uint64_t a1)
{
  if (!*(void *)(a1 + 56)) {
    return NAN;
  }
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  double v2 = (*(double (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
                  + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v5) << 32;
  if (v7 >= 1)
  {
    BOOL v8 = (double *)((char *)v3 + (v7 >> 29));
    do
    {
      *uint64_t v4 = v2 + *v3;
      v4[1] = v2 + v3[1];
      v4[2] = v2 + v3[2];
      v4[3] = v2 + v3[3];
      v4[4] = v2 + v3[4];
      v4[5] = v2 + v3[5];
      v4[6] = v2 + v3[6];
      v4[7] = v2 + v3[7];
      v4[8] = v2 + v3[8];
      v4[9] = v2 + v3[9];
      v4[10] = v2 + v3[10];
      v4[11] = v2 + v3[11];
      v4[12] = v2 + v3[12];
      v4[13] = v2 + v3[13];
      v4[14] = v2 + v3[14];
      v4[15] = v2 + v3[15];
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v8);
  }
  int v9 = (v5 & 0xF) - 1;
  unsigned int v10 = 0;
  unsigned int v11 = 0;
  unsigned int v12 = 0;
  unsigned int v13 = 0;
  unsigned int v14 = 0;
  unsigned int v15 = 0;
  unsigned int v16 = 0;
  unsigned int v17 = 0;
  unsigned int v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  switch(v9)
  {
    case 0:
      goto LABEL_23;
    case 1:
      goto LABEL_22;
    case 2:
      goto LABEL_21;
    case 3:
      goto LABEL_20;
    case 4:
      goto LABEL_19;
    case 5:
      goto LABEL_18;
    case 6:
      goto LABEL_17;
    case 7:
      goto LABEL_16;
    case 8:
      goto LABEL_15;
    case 9:
      goto LABEL_14;
    case 10:
      goto LABEL_13;
    case 11:
      goto LABEL_12;
    case 12:
      goto LABEL_11;
    case 13:
      goto LABEL_10;
    case 14:
      *uint64_t v4 = v2 + *v3;
      unsigned int v10 = 1;
LABEL_10:
      v4[v10] = v2 + v3[v10];
      unsigned int v11 = v10 + 1;
LABEL_11:
      v4[v11] = v2 + v3[v11];
      unsigned int v12 = v11 + 1;
LABEL_12:
      v4[v12] = v2 + v3[v12];
      unsigned int v13 = v12 + 1;
LABEL_13:
      v4[v13] = v2 + v3[v13];
      unsigned int v14 = v13 + 1;
LABEL_14:
      v4[v14] = v2 + v3[v14];
      unsigned int v15 = v14 + 1;
LABEL_15:
      v4[v15] = v2 + v3[v15];
      unsigned int v16 = v15 + 1;
LABEL_16:
      v4[v16] = v2 + v3[v16];
      unsigned int v17 = v16 + 1;
LABEL_17:
      v4[v17] = v2 + v3[v17];
      unsigned int v18 = v17 + 1;
LABEL_18:
      v4[v18] = v2 + v3[v18];
      uint64_t v19 = v18 + 1;
LABEL_19:
      v4[v19] = v2 + v3[v19];
      uint64_t v20 = (v19 + 1);
LABEL_20:
      v4[v20] = v2 + v3[v20];
      uint64_t v21 = (v20 + 1);
LABEL_21:
      v4[v21] = v2 + v3[v21];
      uint64_t v22 = (v21 + 1);
LABEL_22:
      v4[v22] = v2 + v3[v22];
      uint64_t v23 = (v22 + 1);
LABEL_23:
      v4[v23] = v2 + v3[v23];
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v19, v20, v21, v22, v23)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v19, v20, v21, v22, v23)+ 16);
}

uint64_t sub_15D348()
{
  return 139;
}

uint64_t sub_15D350(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_15D358(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_15D360(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_15D3A0(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_15D3A8(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_15D3B0(uint64_t a1)
{
  return sub_15D454(a1 - 48);
}

void sub_15D3B8(uint64_t a1)
{
  sub_15D454(a1 - 48);

  operator delete();
}

uint64_t sub_15D3F4(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 72))() + 8);
}

uint64_t sub_15D434(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_15D43C(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_15D444(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_15D44C(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_15D454(uint64_t a1)
{
  *(void *)a1 = off_2407AB8;
  *(void *)(a1 + 48) = off_2407B18;
  if (*(void *)(a1 + 64)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 80);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 80) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 && *(unsigned char *)(a1 + 40))
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }
  return a1;
}

void sub_15D5E8(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_2407BA0;
  *(void *)(a1 + 48) = off_2407C00;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  operator new();
}

void sub_15DCD8(_Unwind_Exception *a1)
{
  sub_E26D8((uint64_t *)(v1 + 80));
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_15DDA4(uint64_t a1)
{
  sub_15E300(a1);

  operator delete();
}

double sub_15DDDC(uint64_t a1)
{
  if (!*(void *)(a1 + 56)) {
    return NAN;
  }
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  double v2 = (*(double (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
                  + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v5) << 32;
  if (v7 >= 1)
  {
    BOOL v8 = (double *)((char *)v3 + (v7 >> 29));
    do
    {
      *uint64_t v4 = *v3 - v2;
      v4[1] = v3[1] - v2;
      v4[2] = v3[2] - v2;
      v4[3] = v3[3] - v2;
      v4[4] = v3[4] - v2;
      v4[5] = v3[5] - v2;
      v4[6] = v3[6] - v2;
      v4[7] = v3[7] - v2;
      v4[8] = v3[8] - v2;
      v4[9] = v3[9] - v2;
      v4[10] = v3[10] - v2;
      v4[11] = v3[11] - v2;
      v4[12] = v3[12] - v2;
      v4[13] = v3[13] - v2;
      v4[14] = v3[14] - v2;
      v4[15] = v3[15] - v2;
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v8);
  }
  int v9 = (v5 & 0xF) - 1;
  unsigned int v10 = 0;
  unsigned int v11 = 0;
  unsigned int v12 = 0;
  unsigned int v13 = 0;
  unsigned int v14 = 0;
  unsigned int v15 = 0;
  unsigned int v16 = 0;
  unsigned int v17 = 0;
  unsigned int v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  switch(v9)
  {
    case 0:
      goto LABEL_23;
    case 1:
      goto LABEL_22;
    case 2:
      goto LABEL_21;
    case 3:
      goto LABEL_20;
    case 4:
      goto LABEL_19;
    case 5:
      goto LABEL_18;
    case 6:
      goto LABEL_17;
    case 7:
      goto LABEL_16;
    case 8:
      goto LABEL_15;
    case 9:
      goto LABEL_14;
    case 10:
      goto LABEL_13;
    case 11:
      goto LABEL_12;
    case 12:
      goto LABEL_11;
    case 13:
      goto LABEL_10;
    case 14:
      *uint64_t v4 = *v3 - v2;
      unsigned int v10 = 1;
LABEL_10:
      v4[v10] = v3[v10] - v2;
      unsigned int v11 = v10 + 1;
LABEL_11:
      v4[v11] = v3[v11] - v2;
      unsigned int v12 = v11 + 1;
LABEL_12:
      v4[v12] = v3[v12] - v2;
      unsigned int v13 = v12 + 1;
LABEL_13:
      v4[v13] = v3[v13] - v2;
      unsigned int v14 = v13 + 1;
LABEL_14:
      v4[v14] = v3[v14] - v2;
      unsigned int v15 = v14 + 1;
LABEL_15:
      v4[v15] = v3[v15] - v2;
      unsigned int v16 = v15 + 1;
LABEL_16:
      v4[v16] = v3[v16] - v2;
      unsigned int v17 = v16 + 1;
LABEL_17:
      v4[v17] = v3[v17] - v2;
      unsigned int v18 = v17 + 1;
LABEL_18:
      v4[v18] = v3[v18] - v2;
      uint64_t v19 = v18 + 1;
LABEL_19:
      v4[v19] = v3[v19] - v2;
      uint64_t v20 = (v19 + 1);
LABEL_20:
      v4[v20] = v3[v20] - v2;
      uint64_t v21 = (v20 + 1);
LABEL_21:
      v4[v21] = v3[v21] - v2;
      uint64_t v22 = (v21 + 1);
LABEL_22:
      v4[v22] = v3[v22] - v2;
      uint64_t v23 = (v22 + 1);
LABEL_23:
      v4[v23] = v3[v23] - v2;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v19, v20, v21, v22, v23)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v19, v20, v21, v22, v23)+ 16);
}

uint64_t sub_15E1F4()
{
  return 139;
}

uint64_t sub_15E1FC(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_15E204(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_15E20C(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_15E24C(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_15E254(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_15E25C(uint64_t a1)
{
  return sub_15E300(a1 - 48);
}

void sub_15E264(uint64_t a1)
{
  sub_15E300(a1 - 48);

  operator delete();
}

uint64_t sub_15E2A0(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 72))() + 8);
}

uint64_t sub_15E2E0(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_15E2E8(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_15E2F0(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_15E2F8(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_15E300(uint64_t a1)
{
  *(void *)a1 = off_2407BA0;
  *(void *)(a1 + 48) = off_2407C00;
  if (*(void *)(a1 + 64)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 80);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 80) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 && *(unsigned char *)(a1 + 40))
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }
  return a1;
}

void sub_15E494(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_2407C88;
  *(void *)(a1 + 48) = off_2407CE8;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  operator new();
}

void sub_15EB84(_Unwind_Exception *a1)
{
  sub_E26D8((uint64_t *)(v1 + 80));
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_15EC50(uint64_t a1)
{
  sub_15F1AC(a1);

  operator delete();
}

double sub_15EC88(uint64_t a1)
{
  if (!*(void *)(a1 + 56)) {
    return NAN;
  }
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  double v2 = (*(double (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
                  + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v5) << 32;
  if (v7 >= 1)
  {
    BOOL v8 = (double *)((char *)v3 + (v7 >> 29));
    do
    {
      *uint64_t v4 = v2 * *v3;
      v4[1] = v2 * v3[1];
      v4[2] = v2 * v3[2];
      v4[3] = v2 * v3[3];
      v4[4] = v2 * v3[4];
      v4[5] = v2 * v3[5];
      v4[6] = v2 * v3[6];
      v4[7] = v2 * v3[7];
      v4[8] = v2 * v3[8];
      v4[9] = v2 * v3[9];
      v4[10] = v2 * v3[10];
      v4[11] = v2 * v3[11];
      v4[12] = v2 * v3[12];
      v4[13] = v2 * v3[13];
      v4[14] = v2 * v3[14];
      v4[15] = v2 * v3[15];
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v8);
  }
  int v9 = (v5 & 0xF) - 1;
  unsigned int v10 = 0;
  unsigned int v11 = 0;
  unsigned int v12 = 0;
  unsigned int v13 = 0;
  unsigned int v14 = 0;
  unsigned int v15 = 0;
  unsigned int v16 = 0;
  unsigned int v17 = 0;
  unsigned int v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  switch(v9)
  {
    case 0:
      goto LABEL_23;
    case 1:
      goto LABEL_22;
    case 2:
      goto LABEL_21;
    case 3:
      goto LABEL_20;
    case 4:
      goto LABEL_19;
    case 5:
      goto LABEL_18;
    case 6:
      goto LABEL_17;
    case 7:
      goto LABEL_16;
    case 8:
      goto LABEL_15;
    case 9:
      goto LABEL_14;
    case 10:
      goto LABEL_13;
    case 11:
      goto LABEL_12;
    case 12:
      goto LABEL_11;
    case 13:
      goto LABEL_10;
    case 14:
      *uint64_t v4 = v2 * *v3;
      unsigned int v10 = 1;
LABEL_10:
      v4[v10] = v2 * v3[v10];
      unsigned int v11 = v10 + 1;
LABEL_11:
      v4[v11] = v2 * v3[v11];
      unsigned int v12 = v11 + 1;
LABEL_12:
      v4[v12] = v2 * v3[v12];
      unsigned int v13 = v12 + 1;
LABEL_13:
      v4[v13] = v2 * v3[v13];
      unsigned int v14 = v13 + 1;
LABEL_14:
      v4[v14] = v2 * v3[v14];
      unsigned int v15 = v14 + 1;
LABEL_15:
      v4[v15] = v2 * v3[v15];
      unsigned int v16 = v15 + 1;
LABEL_16:
      v4[v16] = v2 * v3[v16];
      unsigned int v17 = v16 + 1;
LABEL_17:
      v4[v17] = v2 * v3[v17];
      unsigned int v18 = v17 + 1;
LABEL_18:
      v4[v18] = v2 * v3[v18];
      uint64_t v19 = v18 + 1;
LABEL_19:
      v4[v19] = v2 * v3[v19];
      uint64_t v20 = (v19 + 1);
LABEL_20:
      v4[v20] = v2 * v3[v20];
      uint64_t v21 = (v20 + 1);
LABEL_21:
      v4[v21] = v2 * v3[v21];
      uint64_t v22 = (v21 + 1);
LABEL_22:
      v4[v22] = v2 * v3[v22];
      uint64_t v23 = (v22 + 1);
LABEL_23:
      v4[v23] = v2 * v3[v23];
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v19, v20, v21, v22, v23)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v19, v20, v21, v22, v23)+ 16);
}

uint64_t sub_15F0A0()
{
  return 139;
}

uint64_t sub_15F0A8(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_15F0B0(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_15F0B8(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_15F0F8(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_15F100(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_15F108(uint64_t a1)
{
  return sub_15F1AC(a1 - 48);
}

void sub_15F110(uint64_t a1)
{
  sub_15F1AC(a1 - 48);

  operator delete();
}

uint64_t sub_15F14C(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 72))() + 8);
}

uint64_t sub_15F18C(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_15F194(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_15F19C(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_15F1A4(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_15F1AC(uint64_t a1)
{
  *(void *)a1 = off_2407C88;
  *(void *)(a1 + 48) = off_2407CE8;
  if (*(void *)(a1 + 64)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 80);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 80) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 && *(unsigned char *)(a1 + 40))
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }
  return a1;
}

void sub_15F340(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_2407D70;
  *(void *)(a1 + 48) = off_2407DD0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  operator new();
}

void sub_15FA30(_Unwind_Exception *a1)
{
  sub_E26D8((uint64_t *)(v1 + 80));
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_15FAFC(uint64_t a1)
{
  sub_160058(a1);

  operator delete();
}

double sub_15FB34(uint64_t a1)
{
  if (!*(void *)(a1 + 56)) {
    return NAN;
  }
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  double v2 = (*(double (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
                  + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v5) << 32;
  if (v7 >= 1)
  {
    BOOL v8 = (double *)((char *)v3 + (v7 >> 29));
    do
    {
      *uint64_t v4 = *v3 / v2;
      v4[1] = v3[1] / v2;
      v4[2] = v3[2] / v2;
      v4[3] = v3[3] / v2;
      v4[4] = v3[4] / v2;
      v4[5] = v3[5] / v2;
      v4[6] = v3[6] / v2;
      v4[7] = v3[7] / v2;
      v4[8] = v3[8] / v2;
      v4[9] = v3[9] / v2;
      v4[10] = v3[10] / v2;
      v4[11] = v3[11] / v2;
      v4[12] = v3[12] / v2;
      v4[13] = v3[13] / v2;
      v4[14] = v3[14] / v2;
      v4[15] = v3[15] / v2;
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v8);
  }
  int v9 = (v5 & 0xF) - 1;
  unsigned int v10 = 0;
  unsigned int v11 = 0;
  unsigned int v12 = 0;
  unsigned int v13 = 0;
  unsigned int v14 = 0;
  unsigned int v15 = 0;
  unsigned int v16 = 0;
  unsigned int v17 = 0;
  unsigned int v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  switch(v9)
  {
    case 0:
      goto LABEL_23;
    case 1:
      goto LABEL_22;
    case 2:
      goto LABEL_21;
    case 3:
      goto LABEL_20;
    case 4:
      goto LABEL_19;
    case 5:
      goto LABEL_18;
    case 6:
      goto LABEL_17;
    case 7:
      goto LABEL_16;
    case 8:
      goto LABEL_15;
    case 9:
      goto LABEL_14;
    case 10:
      goto LABEL_13;
    case 11:
      goto LABEL_12;
    case 12:
      goto LABEL_11;
    case 13:
      goto LABEL_10;
    case 14:
      *uint64_t v4 = *v3 / v2;
      unsigned int v10 = 1;
LABEL_10:
      v4[v10] = v3[v10] / v2;
      unsigned int v11 = v10 + 1;
LABEL_11:
      v4[v11] = v3[v11] / v2;
      unsigned int v12 = v11 + 1;
LABEL_12:
      v4[v12] = v3[v12] / v2;
      unsigned int v13 = v12 + 1;
LABEL_13:
      v4[v13] = v3[v13] / v2;
      unsigned int v14 = v13 + 1;
LABEL_14:
      v4[v14] = v3[v14] / v2;
      unsigned int v15 = v14 + 1;
LABEL_15:
      v4[v15] = v3[v15] / v2;
      unsigned int v16 = v15 + 1;
LABEL_16:
      v4[v16] = v3[v16] / v2;
      unsigned int v17 = v16 + 1;
LABEL_17:
      v4[v17] = v3[v17] / v2;
      unsigned int v18 = v17 + 1;
LABEL_18:
      v4[v18] = v3[v18] / v2;
      uint64_t v19 = v18 + 1;
LABEL_19:
      v4[v19] = v3[v19] / v2;
      uint64_t v20 = (v19 + 1);
LABEL_20:
      v4[v20] = v3[v20] / v2;
      uint64_t v21 = (v20 + 1);
LABEL_21:
      v4[v21] = v3[v21] / v2;
      uint64_t v22 = (v21 + 1);
LABEL_22:
      v4[v22] = v3[v22] / v2;
      uint64_t v23 = (v22 + 1);
LABEL_23:
      v4[v23] = v3[v23] / v2;
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v19, v20, v21, v22, v23)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v19, v20, v21, v22, v23)+ 16);
}

uint64_t sub_15FF4C()
{
  return 139;
}

uint64_t sub_15FF54(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_15FF5C(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_15FF64(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_15FFA4(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_15FFAC(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_15FFB4(uint64_t a1)
{
  return sub_160058(a1 - 48);
}

void sub_15FFBC(uint64_t a1)
{
  sub_160058(a1 - 48);

  operator delete();
}

uint64_t sub_15FFF8(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 72))() + 8);
}

uint64_t sub_160038(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_160040(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_160048(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_160050(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_160058(uint64_t a1)
{
  *(void *)a1 = off_2407D70;
  *(void *)(a1 + 48) = off_2407DD0;
  if (*(void *)(a1 + 64)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 80);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 80) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 && *(unsigned char *)(a1 + 40))
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }
  return a1;
}

void sub_1601EC(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_2407E58;
  *(void *)(a1 + 48) = off_2407EB8;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  operator new();
}

void sub_1608DC(_Unwind_Exception *a1)
{
  sub_E26D8((uint64_t *)(v1 + 80));
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_1609A8(uint64_t a1)
{
  sub_160FAC(a1);

  operator delete();
}

uint64_t sub_1609E0(uint64_t result)
{
  if (*(void *)(result + 56))
  {
    uint64_t v1 = (void **)result;
    (*(void (**)(void))(**(void **)(result + 16) + 16))(*(void *)(result + 16));
    long double v2 = (*(double (**)(void *))(*v1[4] + 16))(v1[4]);
    uint64_t v3 = *(long double **)(*(void *)(*(uint64_t (**)(void *))(*v1[7] + 64))(v1[7]) + 16);
    uint64_t v4 = *(long double **)(*(void *)((uint64_t (*)(void **))(*v1)[9])(v1) + 16);
    int v5 = ((uint64_t (*)(void **))(*v1)[7])(v1);
    int v6 = v5 & 0xF;
    if ((v5 & 0xF) != 0) {
      int v7 = -16;
    }
    else {
      int v7 = 0;
    }
    int64_t v8 = (unint64_t)(v7 + v5) << 32;
    if (v8 >= 1)
    {
      int v9 = (long double *)((char *)v3 + (v8 >> 29));
      do
      {
        *uint64_t v4 = fmod(*v3, v2);
        v4[1] = fmod(v3[1], v2);
        v4[2] = fmod(v3[2], v2);
        v4[3] = fmod(v3[3], v2);
        v4[4] = fmod(v3[4], v2);
        v4[5] = fmod(v3[5], v2);
        v4[6] = fmod(v3[6], v2);
        v4[7] = fmod(v3[7], v2);
        v4[8] = fmod(v3[8], v2);
        v4[9] = fmod(v3[9], v2);
        v4[10] = fmod(v3[10], v2);
        v4[11] = fmod(v3[11], v2);
        v4[12] = fmod(v3[12], v2);
        v4[13] = fmod(v3[13], v2);
        v4[14] = fmod(v3[14], v2);
        v4[15] = fmod(v3[15], v2);
        v3 += 16;
        v4 += 16;
      }
      while (v3 < v9);
    }
    int v10 = v6 - 1;
    int v30 = v1;
    unsigned int v11 = 0;
    unsigned int v12 = 0;
    unsigned int v13 = 0;
    unsigned int v14 = 0;
    unsigned int v15 = 0;
    int v16 = 0;
    int v17 = 0;
    int v18 = 0;
    int v19 = 0;
    int v20 = 0;
    uint64_t v21 = 0;
    int v22 = 0;
    int v23 = 0;
    uint64_t v24 = 0;
    switch(v10)
    {
      case 0:
        goto LABEL_23;
      case 1:
        goto LABEL_22;
      case 2:
        goto LABEL_21;
      case 3:
        goto LABEL_20;
      case 4:
        goto LABEL_19;
      case 5:
        goto LABEL_18;
      case 6:
        goto LABEL_17;
      case 7:
        goto LABEL_16;
      case 8:
        goto LABEL_15;
      case 9:
        goto LABEL_14;
      case 10:
        goto LABEL_13;
      case 11:
        goto LABEL_12;
      case 12:
        goto LABEL_11;
      case 13:
        goto LABEL_10;
      case 14:
        *uint64_t v4 = fmod(*v3, v2);
        unsigned int v11 = 1;
LABEL_10:
        unsigned int v25 = v11;
        v4[v11] = fmod(v3[v11], v2);
        unsigned int v12 = v25 + 1;
LABEL_11:
        unsigned int v26 = v12;
        v4[v12] = fmod(v3[v12], v2);
        unsigned int v13 = v26 + 1;
LABEL_12:
        unsigned int v27 = v13;
        v4[v13] = fmod(v3[v13], v2);
        unsigned int v14 = v27 + 1;
LABEL_13:
        unsigned int v28 = v14;
        v4[v14] = fmod(v3[v14], v2);
        unsigned int v15 = v28 + 1;
LABEL_14:
        unsigned int v29 = v15;
        v4[v15] = fmod(v3[v15], v2);
        int v16 = v29 + 1;
LABEL_15:
        v4[v16] = fmod(v3[v16], v2);
        int v17 = v16 + 1;
LABEL_16:
        v4[v17] = fmod(v3[v17], v2);
        int v18 = v17 + 1;
LABEL_17:
        v4[v18] = fmod(v3[v18], v2);
        int v19 = v18 + 1;
LABEL_18:
        v4[v19] = fmod(v3[v19], v2);
        int v20 = v19 + 1;
LABEL_19:
        v4[v20] = fmod(v3[v20], v2);
        LODWORD(v21) = v20 + 1;
LABEL_20:
        v4[v21] = fmod(v3[v21], v2);
        int v22 = v21 + 1;
LABEL_21:
        v4[v22] = fmod(v3[v22], v2);
        int v23 = v22 + 1;
LABEL_22:
        v4[v23] = fmod(v3[v23], v2);
        uint64_t v24 = (v23 + 1);
LABEL_23:
        v4[v24] = fmod(v3[v24], v2);
        uint64_t v21 = v30;
        break;
      default:
        return ((uint64_t (*)(void **))(*v21)[9])(v21);
    }
    return ((uint64_t (*)(void **))(*v21)[9])(v21);
  }
  return result;
}

uint64_t sub_160EA0()
{
  return 139;
}

uint64_t sub_160EA8(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_160EB0(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_160EB8(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_160EF8(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_160F00(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_160F08(uint64_t a1)
{
  return sub_160FAC(a1 - 48);
}

void sub_160F10(uint64_t a1)
{
  sub_160FAC(a1 - 48);

  operator delete();
}

uint64_t sub_160F4C(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 72))() + 8);
}

uint64_t sub_160F8C(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_160F94(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_160F9C(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_160FA4(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_160FAC(uint64_t a1)
{
  *(void *)a1 = off_2407E58;
  *(void *)(a1 + 48) = off_2407EB8;
  if (*(void *)(a1 + 64)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 80);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 80) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 && *(unsigned char *)(a1 + 40))
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }
  return a1;
}

void sub_161140(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_2407F40;
  *(void *)(a1 + 48) = off_2407FA0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  operator new();
}

void sub_161830(_Unwind_Exception *a1)
{
  sub_E26D8((uint64_t *)(v1 + 80));
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_1618FC(uint64_t a1)
{
  sub_161F00(a1);

  operator delete();
}

uint64_t sub_161934(uint64_t result)
{
  if (*(void *)(result + 56))
  {
    uint64_t v1 = (void **)result;
    (*(void (**)(void))(**(void **)(result + 16) + 16))(*(void *)(result + 16));
    long double v2 = (*(double (**)(void *))(*v1[4] + 16))(v1[4]);
    uint64_t v3 = *(long double **)(*(void *)(*(uint64_t (**)(void *))(*v1[7] + 64))(v1[7]) + 16);
    uint64_t v4 = *(long double **)(*(void *)((uint64_t (*)(void **))(*v1)[9])(v1) + 16);
    int v5 = ((uint64_t (*)(void **))(*v1)[7])(v1);
    int v6 = v5 & 0xF;
    if ((v5 & 0xF) != 0) {
      int v7 = -16;
    }
    else {
      int v7 = 0;
    }
    int64_t v8 = (unint64_t)(v7 + v5) << 32;
    if (v8 >= 1)
    {
      int v9 = (long double *)((char *)v3 + (v8 >> 29));
      do
      {
        *uint64_t v4 = pow(*v3, v2);
        v4[1] = pow(v3[1], v2);
        v4[2] = pow(v3[2], v2);
        v4[3] = pow(v3[3], v2);
        v4[4] = pow(v3[4], v2);
        v4[5] = pow(v3[5], v2);
        v4[6] = pow(v3[6], v2);
        v4[7] = pow(v3[7], v2);
        v4[8] = pow(v3[8], v2);
        v4[9] = pow(v3[9], v2);
        v4[10] = pow(v3[10], v2);
        v4[11] = pow(v3[11], v2);
        v4[12] = pow(v3[12], v2);
        v4[13] = pow(v3[13], v2);
        v4[14] = pow(v3[14], v2);
        v4[15] = pow(v3[15], v2);
        v3 += 16;
        v4 += 16;
      }
      while (v3 < v9);
    }
    int v10 = v6 - 1;
    int v30 = v1;
    unsigned int v11 = 0;
    unsigned int v12 = 0;
    unsigned int v13 = 0;
    unsigned int v14 = 0;
    unsigned int v15 = 0;
    int v16 = 0;
    int v17 = 0;
    int v18 = 0;
    int v19 = 0;
    int v20 = 0;
    uint64_t v21 = 0;
    int v22 = 0;
    int v23 = 0;
    uint64_t v24 = 0;
    switch(v10)
    {
      case 0:
        goto LABEL_23;
      case 1:
        goto LABEL_22;
      case 2:
        goto LABEL_21;
      case 3:
        goto LABEL_20;
      case 4:
        goto LABEL_19;
      case 5:
        goto LABEL_18;
      case 6:
        goto LABEL_17;
      case 7:
        goto LABEL_16;
      case 8:
        goto LABEL_15;
      case 9:
        goto LABEL_14;
      case 10:
        goto LABEL_13;
      case 11:
        goto LABEL_12;
      case 12:
        goto LABEL_11;
      case 13:
        goto LABEL_10;
      case 14:
        *uint64_t v4 = pow(*v3, v2);
        unsigned int v11 = 1;
LABEL_10:
        unsigned int v25 = v11;
        v4[v11] = pow(v3[v11], v2);
        unsigned int v12 = v25 + 1;
LABEL_11:
        unsigned int v26 = v12;
        v4[v12] = pow(v3[v12], v2);
        unsigned int v13 = v26 + 1;
LABEL_12:
        unsigned int v27 = v13;
        v4[v13] = pow(v3[v13], v2);
        unsigned int v14 = v27 + 1;
LABEL_13:
        unsigned int v28 = v14;
        v4[v14] = pow(v3[v14], v2);
        unsigned int v15 = v28 + 1;
LABEL_14:
        unsigned int v29 = v15;
        v4[v15] = pow(v3[v15], v2);
        int v16 = v29 + 1;
LABEL_15:
        v4[v16] = pow(v3[v16], v2);
        int v17 = v16 + 1;
LABEL_16:
        v4[v17] = pow(v3[v17], v2);
        int v18 = v17 + 1;
LABEL_17:
        v4[v18] = pow(v3[v18], v2);
        int v19 = v18 + 1;
LABEL_18:
        v4[v19] = pow(v3[v19], v2);
        int v20 = v19 + 1;
LABEL_19:
        v4[v20] = pow(v3[v20], v2);
        LODWORD(v21) = v20 + 1;
LABEL_20:
        v4[v21] = pow(v3[v21], v2);
        int v22 = v21 + 1;
LABEL_21:
        v4[v22] = pow(v3[v22], v2);
        int v23 = v22 + 1;
LABEL_22:
        v4[v23] = pow(v3[v23], v2);
        uint64_t v24 = (v23 + 1);
LABEL_23:
        v4[v24] = pow(v3[v24], v2);
        uint64_t v21 = v30;
        break;
      default:
        return ((uint64_t (*)(void **))(*v21)[9])(v21);
    }
    return ((uint64_t (*)(void **))(*v21)[9])(v21);
  }
  return result;
}

uint64_t sub_161DF4()
{
  return 139;
}

uint64_t sub_161DFC(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_161E04(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_161E0C(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_161E4C(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_161E54(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_161E5C(uint64_t a1)
{
  return sub_161F00(a1 - 48);
}

void sub_161E64(uint64_t a1)
{
  sub_161F00(a1 - 48);

  operator delete();
}

uint64_t sub_161EA0(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 72))() + 8);
}

uint64_t sub_161EE0(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_161EE8(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_161EF0(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_161EF8(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_161F00(uint64_t a1)
{
  *(void *)a1 = off_2407F40;
  *(void *)(a1 + 48) = off_2407FA0;
  if (*(void *)(a1 + 64)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 80);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 80) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 && *(unsigned char *)(a1 + 40))
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }
  return a1;
}

void sub_162094(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_2408028;
  *(void *)(a1 + 48) = off_2408088;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  operator new();
}

void sub_162784(_Unwind_Exception *a1)
{
  sub_E26D8((uint64_t *)(v1 + 80));
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_162850(uint64_t a1)
{
  sub_162DAC(a1);

  operator delete();
}

double sub_162888(uint64_t a1)
{
  if (!*(void *)(a1 + 56)) {
    return NAN;
  }
  double v2 = (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
                  + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v5) << 32;
  if (v7 >= 1)
  {
    BOOL v8 = (double *)((char *)v3 + (v7 >> 29));
    do
    {
      double *v3 = v2 + *v4;
      v3[1] = v2 + v4[1];
      v3[2] = v2 + v4[2];
      v3[3] = v2 + v4[3];
      v3[4] = v2 + v4[4];
      v3[5] = v2 + v4[5];
      v3[6] = v2 + v4[6];
      v3[7] = v2 + v4[7];
      v3[8] = v2 + v4[8];
      v3[9] = v2 + v4[9];
      v3[10] = v2 + v4[10];
      v3[11] = v2 + v4[11];
      v3[12] = v2 + v4[12];
      v3[13] = v2 + v4[13];
      v3[14] = v2 + v4[14];
      v3[15] = v2 + v4[15];
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v8);
  }
  int v9 = (v5 & 0xF) - 1;
  unsigned int v10 = 0;
  unsigned int v11 = 0;
  unsigned int v12 = 0;
  unsigned int v13 = 0;
  unsigned int v14 = 0;
  unsigned int v15 = 0;
  unsigned int v16 = 0;
  unsigned int v17 = 0;
  unsigned int v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  switch(v9)
  {
    case 0:
      goto LABEL_23;
    case 1:
      goto LABEL_22;
    case 2:
      goto LABEL_21;
    case 3:
      goto LABEL_20;
    case 4:
      goto LABEL_19;
    case 5:
      goto LABEL_18;
    case 6:
      goto LABEL_17;
    case 7:
      goto LABEL_16;
    case 8:
      goto LABEL_15;
    case 9:
      goto LABEL_14;
    case 10:
      goto LABEL_13;
    case 11:
      goto LABEL_12;
    case 12:
      goto LABEL_11;
    case 13:
      goto LABEL_10;
    case 14:
      double *v3 = v2 + *v4;
      unsigned int v10 = 1;
LABEL_10:
      v3[v10] = v2 + v4[v10];
      unsigned int v11 = v10 + 1;
LABEL_11:
      v3[v11] = v2 + v4[v11];
      unsigned int v12 = v11 + 1;
LABEL_12:
      v3[v12] = v2 + v4[v12];
      unsigned int v13 = v12 + 1;
LABEL_13:
      v3[v13] = v2 + v4[v13];
      unsigned int v14 = v13 + 1;
LABEL_14:
      v3[v14] = v2 + v4[v14];
      unsigned int v15 = v14 + 1;
LABEL_15:
      v3[v15] = v2 + v4[v15];
      unsigned int v16 = v15 + 1;
LABEL_16:
      v3[v16] = v2 + v4[v16];
      unsigned int v17 = v16 + 1;
LABEL_17:
      v3[v17] = v2 + v4[v17];
      unsigned int v18 = v17 + 1;
LABEL_18:
      v3[v18] = v2 + v4[v18];
      uint64_t v19 = v18 + 1;
LABEL_19:
      v3[v19] = v2 + v4[v19];
      uint64_t v20 = (v19 + 1);
LABEL_20:
      v3[v20] = v2 + v4[v20];
      uint64_t v21 = (v20 + 1);
LABEL_21:
      v3[v21] = v2 + v4[v21];
      uint64_t v22 = (v21 + 1);
LABEL_22:
      v3[v22] = v2 + v4[v22];
      uint64_t v23 = (v22 + 1);
LABEL_23:
      v3[v23] = v2 + v4[v23];
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v19, v20, v21, v22, v23)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v19, v20, v21, v22, v23)+ 16);
}

uint64_t sub_162CA0()
{
  return 139;
}

uint64_t sub_162CA8(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_162CB0(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_162CB8(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_162CF8(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_162D00(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_162D08(uint64_t a1)
{
  return sub_162DAC(a1 - 48);
}

void sub_162D10(uint64_t a1)
{
  sub_162DAC(a1 - 48);

  operator delete();
}

uint64_t sub_162D4C(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 72))() + 8);
}

uint64_t sub_162D8C(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_162D94(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_162D9C(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_162DA4(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_162DAC(uint64_t a1)
{
  *(void *)a1 = off_2408028;
  *(void *)(a1 + 48) = off_2408088;
  if (*(void *)(a1 + 64)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 80);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 80) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 && *(unsigned char *)(a1 + 40))
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }
  return a1;
}

void sub_162F40(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_2408110;
  *(void *)(a1 + 48) = off_2408170;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  operator new();
}

void sub_163630(_Unwind_Exception *a1)
{
  sub_E26D8((uint64_t *)(v1 + 80));
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_1636FC(uint64_t a1)
{
  sub_163C58(a1);

  operator delete();
}

double sub_163734(uint64_t a1)
{
  if (!*(void *)(a1 + 56)) {
    return NAN;
  }
  double v2 = (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
                  + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v5) << 32;
  if (v7 >= 1)
  {
    BOOL v8 = (double *)((char *)v3 + (v7 >> 29));
    do
    {
      double *v3 = v2 - *v4;
      v3[1] = v2 - v4[1];
      v3[2] = v2 - v4[2];
      v3[3] = v2 - v4[3];
      v3[4] = v2 - v4[4];
      v3[5] = v2 - v4[5];
      v3[6] = v2 - v4[6];
      v3[7] = v2 - v4[7];
      v3[8] = v2 - v4[8];
      v3[9] = v2 - v4[9];
      v3[10] = v2 - v4[10];
      v3[11] = v2 - v4[11];
      v3[12] = v2 - v4[12];
      v3[13] = v2 - v4[13];
      v3[14] = v2 - v4[14];
      v3[15] = v2 - v4[15];
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v8);
  }
  int v9 = (v5 & 0xF) - 1;
  unsigned int v10 = 0;
  unsigned int v11 = 0;
  unsigned int v12 = 0;
  unsigned int v13 = 0;
  unsigned int v14 = 0;
  unsigned int v15 = 0;
  unsigned int v16 = 0;
  unsigned int v17 = 0;
  unsigned int v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  switch(v9)
  {
    case 0:
      goto LABEL_23;
    case 1:
      goto LABEL_22;
    case 2:
      goto LABEL_21;
    case 3:
      goto LABEL_20;
    case 4:
      goto LABEL_19;
    case 5:
      goto LABEL_18;
    case 6:
      goto LABEL_17;
    case 7:
      goto LABEL_16;
    case 8:
      goto LABEL_15;
    case 9:
      goto LABEL_14;
    case 10:
      goto LABEL_13;
    case 11:
      goto LABEL_12;
    case 12:
      goto LABEL_11;
    case 13:
      goto LABEL_10;
    case 14:
      double *v3 = v2 - *v4;
      unsigned int v10 = 1;
LABEL_10:
      v3[v10] = v2 - v4[v10];
      unsigned int v11 = v10 + 1;
LABEL_11:
      v3[v11] = v2 - v4[v11];
      unsigned int v12 = v11 + 1;
LABEL_12:
      v3[v12] = v2 - v4[v12];
      unsigned int v13 = v12 + 1;
LABEL_13:
      v3[v13] = v2 - v4[v13];
      unsigned int v14 = v13 + 1;
LABEL_14:
      v3[v14] = v2 - v4[v14];
      unsigned int v15 = v14 + 1;
LABEL_15:
      v3[v15] = v2 - v4[v15];
      unsigned int v16 = v15 + 1;
LABEL_16:
      v3[v16] = v2 - v4[v16];
      unsigned int v17 = v16 + 1;
LABEL_17:
      v3[v17] = v2 - v4[v17];
      unsigned int v18 = v17 + 1;
LABEL_18:
      v3[v18] = v2 - v4[v18];
      uint64_t v19 = v18 + 1;
LABEL_19:
      v3[v19] = v2 - v4[v19];
      uint64_t v20 = (v19 + 1);
LABEL_20:
      v3[v20] = v2 - v4[v20];
      uint64_t v21 = (v20 + 1);
LABEL_21:
      v3[v21] = v2 - v4[v21];
      uint64_t v22 = (v21 + 1);
LABEL_22:
      v3[v22] = v2 - v4[v22];
      uint64_t v23 = (v22 + 1);
LABEL_23:
      v3[v23] = v2 - v4[v23];
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v19, v20, v21, v22, v23)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v19, v20, v21, v22, v23)+ 16);
}

uint64_t sub_163B4C()
{
  return 139;
}

uint64_t sub_163B54(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_163B5C(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_163B64(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_163BA4(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_163BAC(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_163BB4(uint64_t a1)
{
  return sub_163C58(a1 - 48);
}

void sub_163BBC(uint64_t a1)
{
  sub_163C58(a1 - 48);

  operator delete();
}

uint64_t sub_163BF8(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 72))() + 8);
}

uint64_t sub_163C38(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_163C40(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_163C48(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_163C50(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_163C58(uint64_t a1)
{
  *(void *)a1 = off_2408110;
  *(void *)(a1 + 48) = off_2408170;
  if (*(void *)(a1 + 64)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 80);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 80) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 && *(unsigned char *)(a1 + 40))
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }
  return a1;
}

void sub_163DEC(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_24081F8;
  *(void *)(a1 + 48) = off_2408258;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  operator new();
}

void sub_1644DC(_Unwind_Exception *a1)
{
  sub_E26D8((uint64_t *)(v1 + 80));
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_1645A8(uint64_t a1)
{
  sub_164B04(a1);

  operator delete();
}

double sub_1645E0(uint64_t a1)
{
  if (!*(void *)(a1 + 56)) {
    return NAN;
  }
  double v2 = (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
                  + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v5) << 32;
  if (v7 >= 1)
  {
    BOOL v8 = (double *)((char *)v3 + (v7 >> 29));
    do
    {
      double *v3 = v2 * *v4;
      v3[1] = v2 * v4[1];
      v3[2] = v2 * v4[2];
      v3[3] = v2 * v4[3];
      v3[4] = v2 * v4[4];
      v3[5] = v2 * v4[5];
      v3[6] = v2 * v4[6];
      v3[7] = v2 * v4[7];
      v3[8] = v2 * v4[8];
      v3[9] = v2 * v4[9];
      v3[10] = v2 * v4[10];
      v3[11] = v2 * v4[11];
      v3[12] = v2 * v4[12];
      v3[13] = v2 * v4[13];
      v3[14] = v2 * v4[14];
      v3[15] = v2 * v4[15];
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v8);
  }
  int v9 = (v5 & 0xF) - 1;
  unsigned int v10 = 0;
  unsigned int v11 = 0;
  unsigned int v12 = 0;
  unsigned int v13 = 0;
  unsigned int v14 = 0;
  unsigned int v15 = 0;
  unsigned int v16 = 0;
  unsigned int v17 = 0;
  unsigned int v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  switch(v9)
  {
    case 0:
      goto LABEL_23;
    case 1:
      goto LABEL_22;
    case 2:
      goto LABEL_21;
    case 3:
      goto LABEL_20;
    case 4:
      goto LABEL_19;
    case 5:
      goto LABEL_18;
    case 6:
      goto LABEL_17;
    case 7:
      goto LABEL_16;
    case 8:
      goto LABEL_15;
    case 9:
      goto LABEL_14;
    case 10:
      goto LABEL_13;
    case 11:
      goto LABEL_12;
    case 12:
      goto LABEL_11;
    case 13:
      goto LABEL_10;
    case 14:
      double *v3 = v2 * *v4;
      unsigned int v10 = 1;
LABEL_10:
      v3[v10] = v2 * v4[v10];
      unsigned int v11 = v10 + 1;
LABEL_11:
      v3[v11] = v2 * v4[v11];
      unsigned int v12 = v11 + 1;
LABEL_12:
      v3[v12] = v2 * v4[v12];
      unsigned int v13 = v12 + 1;
LABEL_13:
      v3[v13] = v2 * v4[v13];
      unsigned int v14 = v13 + 1;
LABEL_14:
      v3[v14] = v2 * v4[v14];
      unsigned int v15 = v14 + 1;
LABEL_15:
      v3[v15] = v2 * v4[v15];
      unsigned int v16 = v15 + 1;
LABEL_16:
      v3[v16] = v2 * v4[v16];
      unsigned int v17 = v16 + 1;
LABEL_17:
      v3[v17] = v2 * v4[v17];
      unsigned int v18 = v17 + 1;
LABEL_18:
      v3[v18] = v2 * v4[v18];
      uint64_t v19 = v18 + 1;
LABEL_19:
      v3[v19] = v2 * v4[v19];
      uint64_t v20 = (v19 + 1);
LABEL_20:
      v3[v20] = v2 * v4[v20];
      uint64_t v21 = (v20 + 1);
LABEL_21:
      v3[v21] = v2 * v4[v21];
      uint64_t v22 = (v21 + 1);
LABEL_22:
      v3[v22] = v2 * v4[v22];
      uint64_t v23 = (v22 + 1);
LABEL_23:
      v3[v23] = v2 * v4[v23];
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v19, v20, v21, v22, v23)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v19, v20, v21, v22, v23)+ 16);
}

uint64_t sub_1649F8()
{
  return 139;
}

uint64_t sub_164A00(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_164A08(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_164A10(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_164A50(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_164A58(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_164A60(uint64_t a1)
{
  return sub_164B04(a1 - 48);
}

void sub_164A68(uint64_t a1)
{
  sub_164B04(a1 - 48);

  operator delete();
}

uint64_t sub_164AA4(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 72))() + 8);
}

uint64_t sub_164AE4(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_164AEC(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_164AF4(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_164AFC(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_164B04(uint64_t a1)
{
  *(void *)a1 = off_24081F8;
  *(void *)(a1 + 48) = off_2408258;
  if (*(void *)(a1 + 64)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 80);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 80) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 && *(unsigned char *)(a1 + 40))
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }
  return a1;
}

void sub_164C98(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_24082E0;
  *(void *)(a1 + 48) = off_2408340;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  operator new();
}

void sub_165388(_Unwind_Exception *a1)
{
  sub_E26D8((uint64_t *)(v1 + 80));
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_165454(uint64_t a1)
{
  sub_1659B0(a1);

  operator delete();
}

double sub_16548C(uint64_t a1)
{
  if (!*(void *)(a1 + 56)) {
    return NAN;
  }
  double v2 = (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  (*(void (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  uint64_t v3 = *(double **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16);
  uint64_t v4 = *(double **)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
                  + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((v5 & 0xF) != 0) {
    int v6 = -16;
  }
  else {
    int v6 = 0;
  }
  int64_t v7 = (unint64_t)(v6 + v5) << 32;
  if (v7 >= 1)
  {
    BOOL v8 = (double *)((char *)v3 + (v7 >> 29));
    do
    {
      double *v3 = v2 / *v4;
      v3[1] = v2 / v4[1];
      v3[2] = v2 / v4[2];
      v3[3] = v2 / v4[3];
      v3[4] = v2 / v4[4];
      v3[5] = v2 / v4[5];
      v3[6] = v2 / v4[6];
      v3[7] = v2 / v4[7];
      v3[8] = v2 / v4[8];
      v3[9] = v2 / v4[9];
      v3[10] = v2 / v4[10];
      v3[11] = v2 / v4[11];
      v3[12] = v2 / v4[12];
      v3[13] = v2 / v4[13];
      v3[14] = v2 / v4[14];
      v3[15] = v2 / v4[15];
      v3 += 16;
      v4 += 16;
    }
    while (v3 < v8);
  }
  int v9 = (v5 & 0xF) - 1;
  unsigned int v10 = 0;
  unsigned int v11 = 0;
  unsigned int v12 = 0;
  unsigned int v13 = 0;
  unsigned int v14 = 0;
  unsigned int v15 = 0;
  unsigned int v16 = 0;
  unsigned int v17 = 0;
  unsigned int v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  switch(v9)
  {
    case 0:
      goto LABEL_23;
    case 1:
      goto LABEL_22;
    case 2:
      goto LABEL_21;
    case 3:
      goto LABEL_20;
    case 4:
      goto LABEL_19;
    case 5:
      goto LABEL_18;
    case 6:
      goto LABEL_17;
    case 7:
      goto LABEL_16;
    case 8:
      goto LABEL_15;
    case 9:
      goto LABEL_14;
    case 10:
      goto LABEL_13;
    case 11:
      goto LABEL_12;
    case 12:
      goto LABEL_11;
    case 13:
      goto LABEL_10;
    case 14:
      double *v3 = v2 / *v4;
      unsigned int v10 = 1;
LABEL_10:
      v3[v10] = v2 / v4[v10];
      unsigned int v11 = v10 + 1;
LABEL_11:
      v3[v11] = v2 / v4[v11];
      unsigned int v12 = v11 + 1;
LABEL_12:
      v3[v12] = v2 / v4[v12];
      unsigned int v13 = v12 + 1;
LABEL_13:
      v3[v13] = v2 / v4[v13];
      unsigned int v14 = v13 + 1;
LABEL_14:
      v3[v14] = v2 / v4[v14];
      unsigned int v15 = v14 + 1;
LABEL_15:
      v3[v15] = v2 / v4[v15];
      unsigned int v16 = v15 + 1;
LABEL_16:
      v3[v16] = v2 / v4[v16];
      unsigned int v17 = v16 + 1;
LABEL_17:
      v3[v17] = v2 / v4[v17];
      unsigned int v18 = v17 + 1;
LABEL_18:
      v3[v18] = v2 / v4[v18];
      uint64_t v19 = v18 + 1;
LABEL_19:
      v3[v19] = v2 / v4[v19];
      uint64_t v20 = (v19 + 1);
LABEL_20:
      v3[v20] = v2 / v4[v20];
      uint64_t v21 = (v20 + 1);
LABEL_21:
      v3[v21] = v2 / v4[v21];
      uint64_t v22 = (v21 + 1);
LABEL_22:
      v3[v22] = v2 / v4[v22];
      uint64_t v23 = (v22 + 1);
LABEL_23:
      v3[v23] = v2 / v4[v23];
      break;
    default:
      return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v19, v20, v21, v22, v23)+ 16);
  }
  return **(double **)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v19, v20, v21, v22, v23)+ 16);
}

uint64_t sub_1658A4()
{
  return 139;
}

uint64_t sub_1658AC(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_1658B4(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_1658BC(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_1658FC(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_165904(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_16590C(uint64_t a1)
{
  return sub_1659B0(a1 - 48);
}

void sub_165914(uint64_t a1)
{
  sub_1659B0(a1 - 48);

  operator delete();
}

uint64_t sub_165950(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 72))() + 8);
}

uint64_t sub_165990(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_165998(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_1659A0(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_1659A8(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_1659B0(uint64_t a1)
{
  *(void *)a1 = off_24082E0;
  *(void *)(a1 + 48) = off_2408340;
  if (*(void *)(a1 + 64)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 80);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 80) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 && *(unsigned char *)(a1 + 40))
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }
  return a1;
}

void sub_165B44(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2403DD0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3)
  {
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v7;
  }
  if (a4)
  {
    BOOL v8 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v8;
  }
  *(void *)a1 = off_24083C8;
  *(void *)(a1 + 48) = off_2408428;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  operator new();
}

void sub_166234(_Unwind_Exception *a1)
{
  sub_E26D8((uint64_t *)(v1 + 80));
  sub_117EBC(v1);
  _Unwind_Resume(a1);
}

void sub_166300(uint64_t a1)
{
  sub_166904(a1);

  operator delete();
}

uint64_t sub_166338(uint64_t result)
{
  if (*(void *)(result + 56))
  {
    uint64_t v1 = (void **)result;
    long double v2 = (*(double (**)(void))(**(void **)(result + 16) + 16))(*(void *)(result + 16));
    (*(void (**)(void *))(*v1[4] + 16))(v1[4]);
    uint64_t v3 = *(long double **)(*(void *)((uint64_t (*)(void **))(*v1)[9])(v1) + 16);
    uint64_t v4 = *(long double **)(*(void *)(*(uint64_t (**)(void *))(*v1[7] + 64))(v1[7]) + 16);
    int v5 = ((uint64_t (*)(void **))(*v1)[7])(v1);
    int v6 = v5 & 0xF;
    if ((v5 & 0xF) != 0) {
      int v7 = -16;
    }
    else {
      int v7 = 0;
    }
    int64_t v8 = (unint64_t)(v7 + v5) << 32;
    if (v8 >= 1)
    {
      int v9 = (long double *)((char *)v3 + (v8 >> 29));
      do
      {
        long double *v3 = fmod(v2, *v4);
        v3[1] = fmod(v2, v4[1]);
        v3[2] = fmod(v2, v4[2]);
        v3[3] = fmod(v2, v4[3]);
        v3[4] = fmod(v2, v4[4]);
        v3[5] = fmod(v2, v4[5]);
        v3[6] = fmod(v2, v4[6]);
        v3[7] = fmod(v2, v4[7]);
        v3[8] = fmod(v2, v4[8]);
        v3[9] = fmod(v2, v4[9]);
        v3[10] = fmod(v2, v4[10]);
        v3[11] = fmod(v2, v4[11]);
        v3[12] = fmod(v2, v4[12]);
        v3[13] = fmod(v2, v4[13]);
        v3[14] = fmod(v2, v4[14]);
        v3[15] = fmod(v2, v4[15]);
        v3 += 16;
        v4 += 16;
      }
      while (v3 < v9);
    }
    int v10 = v6 - 1;
    int v30 = v1;
    unsigned int v11 = 0;
    unsigned int v12 = 0;
    unsigned int v13 = 0;
    unsigned int v14 = 0;
    unsigned int v15 = 0;
    int v16 = 0;
    int v17 = 0;
    int v18 = 0;
    int v19 = 0;
    int v20 = 0;
    uint64_t v21 = 0;
    int v22 = 0;
    int v23 = 0;
    uint64_t v24 = 0;
    switch(v10)
    {
      case 0:
        goto LABEL_23;
      case 1:
        goto LABEL_22;
      case 2:
        goto LABEL_21;
      case 3:
        goto LABEL_20;
      case 4:
        goto LABEL_19;
      case 5:
        goto LABEL_18;
      case 6:
        goto LABEL_17;
      case 7:
        goto LABEL_16;
      case 8:
        goto LABEL_15;
      case 9:
        goto LABEL_14;
      case 10:
        goto LABEL_13;
      case 11:
        goto LABEL_12;
      case 12:
        goto LABEL_11;
      case 13:
        goto LABEL_10;
      case 14:
        long double *v3 = fmod(v2, *v4);
        unsigned int v11 = 1;
LABEL_10:
        unsigned int v25 = v11;
        v3[v11] = fmod(v2, v4[v11]);
        unsigned int v12 = v25 + 1;
LABEL_11:
        unsigned int v26 = v12;
        v3[v12] = fmod(v2, v4[v12]);
        unsigned int v13 = v26 + 1;
LABEL_12:
        unsigned int v27 = v13;
        v3[v13] = fmod(v2, v4[v13]);
        unsigned int v14 = v27 + 1;
LABEL_13:
        unsigned int v28 = v14;
        v3[v14] = fmod(v2, v4[v14]);
        unsigned int v15 = v28 + 1;
LABEL_14:
        unsigned int v29 = v15;
        v3[v15] = fmod(v2, v4[v15]);
        int v16 = v29 + 1;
LABEL_15:
        v3[v16] = fmod(v2, v4[v16]);
        int v17 = v16 + 1;
LABEL_16:
        v3[v17] = fmod(v2, v4[v17]);
        int v18 = v17 + 1;
LABEL_17:
        v3[v18] = fmod(v2, v4[v18]);
        int v19 = v18 + 1;
LABEL_18:
        v3[v19] = fmod(v2, v4[v19]);
        int v20 = v19 + 1;
LABEL_19:
        v3[v20] = fmod(v2, v4[v20]);
        LODWORD(v21) = v20 + 1;
LABEL_20:
        v3[v21] = fmod(v2, v4[v21]);
        int v22 = v21 + 1;
LABEL_21:
        v3[v22] = fmod(v2, v4[v22]);
        int v23 = v22 + 1;
LABEL_22:
        v3[v23] = fmod(v2, v4[v23]);
        uint64_t v24 = (v23 + 1);
LABEL_23:
        v3[v24] = fmod(v2, v4[v24]);
        uint64_t v21 = v30;
        break;
      default:
        return ((uint64_t (*)(void **))(*v21)[9])(v21);
    }
    return ((uint64_t (*)(void **))(*v21)[9])(v21);
  }
  return result;
}

uint64_t sub_1667F8()
{
  return 139;
}

uint64_t sub_166800(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_166808(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_166810(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
}

uint64_t sub_166850(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_166858(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_166860(uint64_t a1)
{
  return sub_166904(a1 - 48);
}

void sub_166868(uint64_t a1)
{
  sub_166904(a1 - 48);

  operator delete();
}

uint64_t sub_1668A4(uint64_t a1)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 72))() + 8);
}

uint64_t sub_1668E4(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_1668EC(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_1668F4(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_1668FC(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_166904(uint64_t a1)
{
  *(void *)a1 = off_24083C8;
  *(void *)(a1 + 48) = off_2408428;
  if (*(void *)(a1 + 64)) {
    operator delete();
  }
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 80);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 80) = 0;
  }
  *(void *)a1 = off_2403DD0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6 && *(unsigned char *)(a1 + 40))
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 32) = 0;
  }
  return a1;
}

uint64_t sub_166A98(uint64_t a1)
{
  *(void *)a1 = off_24084B0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_166B10(uint64_t a1)
{
  *(void *)a1 = off_24084B0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_166BA8(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = 1.0;
  if (*(unsigned char *)(a1 + 17)) {
    return 0.0;
  }
  return v2;
}

uint64_t sub_166C10(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_166C18()
{
  return 122;
}

uint64_t sub_166C20(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  switch(*a3)
  {
    case 1:
      sub_167230();
    case 2:
      sub_16732C();
    case 3:
      sub_167428();
    case 4:
      sub_167524();
    case 5:
      sub_167620();
    case 6:
      sub_16771C();
    case 7:
      sub_167818();
    case 8:
      sub_167914();
    case 9:
      sub_167A10();
    case 0xA:
      sub_167B0C();
    case 0xB:
      sub_167C08();
    case 0xC:
      sub_167D04();
    case 0xD:
      sub_167E00();
    case 0xE:
      sub_167EFC();
    case 0xF:
      sub_167FF8();
    case 0x10:
      sub_1680F4();
    case 0x11:
      sub_1681F0();
    case 0x12:
      sub_1682EC();
    case 0x13:
      sub_1683E8();
    case 0x14:
      sub_1684E4();
    case 0x15:
      sub_1685E0();
    case 0x16:
      sub_1686DC();
    case 0x17:
      sub_1687D8();
    case 0x18:
      sub_1688D4();
    case 0x19:
      sub_1689D0();
    case 0x1A:
      sub_168ACC();
    case 0x1B:
      sub_168BC8();
    case 0x1C:
      sub_168CC4();
    case 0x1D:
      sub_168DC0();
    case 0x1E:
      sub_168EBC();
    case 0x1F:
      sub_168FB8();
    case 0x20:
      sub_1690B4();
    case 0x21:
      sub_1691B0();
    case 0x22:
      sub_1692AC();
    case 0x23:
      sub_1693A8();
    case 0x24:
      sub_1694A4();
    case 0x25:
      sub_1695A0();
    case 0x26:
      sub_16969C();
    case 0x27:
      sub_169798();
    case 0x28:
      sub_169894();
    case 0x29:
      sub_169990();
    case 0x2A:
      sub_169A8C();
    case 0x2B:
      sub_169B88();
    case 0x2C:
      sub_169C84();
    case 0x2D:
      sub_169D80();
    case 0x2E:
      sub_169E7C();
    case 0x2F:
      sub_169F78();
    case 0x30:
      sub_16A074();
    case 0x31:
      sub_16A170();
    case 0x32:
      sub_16A26C();
    case 0x33:
      sub_16A368();
    case 0x34:
      sub_16A464();
    case 0x35:
      sub_16A560();
    case 0x36:
      sub_16A65C();
    case 0x37:
      sub_16A758();
    case 0x38:
      sub_16A854();
    case 0x39:
      sub_16A950();
    case 0x3A:
      sub_16AA4C();
    case 0x3B:
      sub_16AB48();
    case 0x3C:
      sub_16AC44();
    default:
      return 0;
  }
}

uint64_t sub_166F28(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  switch(*a3)
  {
    case 1:
      sub_170458();
    case 2:
      sub_170554();
    case 3:
      sub_170650();
    case 4:
      sub_17074C();
    case 5:
      sub_170848();
    case 6:
      sub_170944();
    case 7:
      sub_170A40();
    case 8:
      sub_170B3C();
    case 9:
      sub_170C38();
    case 0xA:
      sub_170D34();
    case 0xB:
      sub_170E30();
    case 0xC:
      sub_170F2C();
    case 0xD:
      sub_171028();
    case 0xE:
      sub_171124();
    case 0xF:
      sub_171220();
    case 0x10:
      sub_17131C();
    case 0x11:
      sub_171418();
    case 0x12:
      sub_171514();
    case 0x13:
      sub_171610();
    case 0x14:
      sub_17170C();
    case 0x15:
      sub_171808();
    case 0x16:
      sub_171904();
    case 0x17:
      sub_171A00();
    case 0x18:
      sub_171AFC();
    case 0x19:
      sub_171BF8();
    case 0x1A:
      sub_171CF4();
    case 0x1B:
      sub_171DF0();
    case 0x1C:
      sub_171EEC();
    case 0x1D:
      sub_171FE8();
    case 0x1E:
      sub_1720E4();
    case 0x1F:
      sub_1721E0();
    case 0x20:
      sub_1722DC();
    case 0x21:
      sub_1723D8();
    case 0x22:
      sub_1724D4();
    case 0x23:
      sub_1725D0();
    case 0x24:
      sub_1726CC();
    case 0x25:
      sub_1727C8();
    case 0x26:
      sub_1728C4();
    case 0x27:
      sub_1729C0();
    case 0x28:
      sub_172ABC();
    case 0x29:
      sub_172BB8();
    case 0x2A:
      sub_172CB4();
    case 0x2B:
      sub_172DB0();
    case 0x2C:
      sub_172EAC();
    case 0x2D:
      sub_172FA8();
    case 0x2E:
      sub_1730A4();
    case 0x2F:
      sub_1731A0();
    case 0x30:
      sub_17329C();
    case 0x31:
      sub_173398();
    case 0x32:
      sub_173494();
    case 0x33:
      sub_173590();
    case 0x34:
      sub_17368C();
    case 0x35:
      sub_173788();
    case 0x36:
      sub_173884();
    case 0x37:
      sub_173980();
    case 0x38:
      sub_173A7C();
    case 0x39:
      sub_173B78();
    case 0x3A:
      sub_173C74();
    case 0x3B:
      sub_173D70();
    case 0x3C:
      sub_173E6C();
    default:
      return 0;
  }
}

void sub_167230()
{
}

void sub_167308()
{
}

void sub_16732C()
{
}

void sub_167404()
{
}

void sub_167428()
{
}

void sub_167500()
{
}

void sub_167524()
{
}

void sub_1675FC()
{
}

void sub_167620()
{
}

void sub_1676F8()
{
}

void sub_16771C()
{
}

void sub_1677F4()
{
}

void sub_167818()
{
}

void sub_1678F0()
{
}

void sub_167914()
{
}

void sub_1679EC()
{
}

void sub_167A10()
{
}

void sub_167AE8()
{
}

void sub_167B0C()
{
}

void sub_167BE4()
{
}

void sub_167C08()
{
}

void sub_167CE0()
{
}

void sub_167D04()
{
}

void sub_167DDC()
{
}

void sub_167E00()
{
}

void sub_167ED8()
{
}

void sub_167EFC()
{
}

void sub_167FD4()
{
}

void sub_167FF8()
{
}

void sub_1680D0()
{
}

void sub_1680F4()
{
}

void sub_1681CC()
{
}

void sub_1681F0()
{
}

void sub_1682C8()
{
}

void sub_1682EC()
{
}

void sub_1683C4()
{
}

void sub_1683E8()
{
}

void sub_1684C0()
{
}

void sub_1684E4()
{
}

void sub_1685BC()
{
}

void sub_1685E0()
{
}

void sub_1686B8()
{
}

void sub_1686DC()
{
}

void sub_1687B4()
{
}

void sub_1687D8()
{
}

void sub_1688B0()
{
}

void sub_1688D4()
{
}

void sub_1689AC()
{
}

void sub_1689D0()
{
}

void sub_168AA8()
{
}

void sub_168ACC()
{
}

void sub_168BA4()
{
}

void sub_168BC8()
{
}

void sub_168CA0()
{
}

void sub_168CC4()
{
}

void sub_168D9C()
{
}

void sub_168DC0()
{
}

void sub_168E98()
{
}

void sub_168EBC()
{
}

void sub_168F94()
{
}

void sub_168FB8()
{
}

void sub_169090()
{
}

void sub_1690B4()
{
}

void sub_16918C()
{
}

void sub_1691B0()
{
}

void sub_169288()
{
}

void sub_1692AC()
{
}

void sub_169384()
{
}

void sub_1693A8()
{
}

void sub_169480()
{
}

void sub_1694A4()
{
}

void sub_16957C()
{
}

void sub_1695A0()
{
}

void sub_169678()
{
}

void sub_16969C()
{
}

void sub_169774()
{
}

void sub_169798()
{
}

void sub_169870()
{
}

void sub_169894()
{
}

void sub_16996C()
{
}

void sub_169990()
{
}

void sub_169A68()
{
}

void sub_169A8C()
{
}

void sub_169B64()
{
}

void sub_169B88()
{
}

void sub_169C60()
{
}

void sub_169C84()
{
}

void sub_169D5C()
{
}

void sub_169D80()
{
}

void sub_169E58()
{
}

void sub_169E7C()
{
}

void sub_169F54()
{
}

void sub_169F78()
{
}

void sub_16A050()
{
}

void sub_16A074()
{
}

void sub_16A14C()
{
}

void sub_16A170()
{
}

void sub_16A248()
{
}

void sub_16A26C()
{
}

void sub_16A344()
{
}

void sub_16A368()
{
}

void sub_16A440()
{
}

void sub_16A464()
{
}

void sub_16A53C()
{
}

void sub_16A560()
{
}

void sub_16A638()
{
}

void sub_16A65C()
{
}

void sub_16A734()
{
}

void sub_16A758()
{
}

void sub_16A830()
{
}

void sub_16A854()
{
}

void sub_16A92C()
{
}

void sub_16A950()
{
}

void sub_16AA28()
{
}

void sub_16AA4C()
{
}

void sub_16AB24()
{
}

void sub_16AB48()
{
}

void sub_16AC20()
{
}

void sub_16AC44()
{
}

void sub_16AD1C()
{
}

uint64_t sub_16AD40(uint64_t a1)
{
  *(void *)a1 = off_2408500;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_16ADBC(uint64_t a1)
{
  *(void *)a1 = off_2408500;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

uint64_t sub_16AE58(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t sub_16AE80()
{
  return 56;
}

uint64_t sub_16AE88(uint64_t a1)
{
  *(void *)a1 = off_2408550;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_16AF04(uint64_t a1)
{
  *(void *)a1 = off_2408550;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_16AFA0(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  return v1 * v1;
}

uint64_t sub_16AFE0()
{
  return 56;
}

uint64_t sub_16AFE8(uint64_t a1)
{
  *(void *)a1 = off_24085A0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_16B064(uint64_t a1)
{
  *(void *)a1 = off_24085A0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_16B100(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  return v1 * (v1 * v1);
}

uint64_t sub_16B144()
{
  return 56;
}

uint64_t sub_16B14C(uint64_t a1)
{
  *(void *)a1 = off_24085F0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_16B1C8(uint64_t a1)
{
  *(void *)a1 = off_24085F0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_16B264(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  return v1 * v1 * (v1 * v1);
}

uint64_t sub_16B2A8()
{
  return 56;
}

uint64_t sub_16B2B0(uint64_t a1)
{
  *(void *)a1 = off_2408640;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_16B32C(uint64_t a1)
{
  *(void *)a1 = off_2408640;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_16B3C8(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  return v1 * (v1 * v1 * (v1 * v1));
}

uint64_t sub_16B410()
{
  return 56;
}

uint64_t sub_16B418(uint64_t a1)
{
  *(void *)a1 = off_2408690;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_16B494(uint64_t a1)
{
  *(void *)a1 = off_2408690;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_16B530(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  return v1 * (v1 * v1) * (v1 * (v1 * v1));
}

uint64_t sub_16B578()
{
  return 56;
}

uint64_t sub_16B580(uint64_t a1)
{
  *(void *)a1 = off_24086E0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_16B5FC(uint64_t a1)
{
  *(void *)a1 = off_24086E0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_16B698(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  return v1 * (v1 * (v1 * v1) * (v1 * (v1 * v1)));
}

uint64_t sub_16B6E4()
{
  return 56;
}

uint64_t sub_16B6EC(uint64_t a1)
{
  *(void *)a1 = off_2408730;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_16B768(uint64_t a1)
{
  *(void *)a1 = off_2408730;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_16B804(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  return v1 * v1 * (v1 * v1) * (v1 * v1 * (v1 * v1));
}

uint64_t sub_16B84C()
{
  return 56;
}

uint64_t sub_16B854(uint64_t a1)
{
  *(void *)a1 = off_2408780;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_16B8D0(uint64_t a1)
{
  *(void *)a1 = off_2408780;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_16B96C(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  return v1 * (v1 * v1 * (v1 * v1) * (v1 * v1 * (v1 * v1)));
}

uint64_t sub_16B9B8()
{
  return 56;
}

uint64_t sub_16B9C0(uint64_t a1)
{
  *(void *)a1 = off_24087D0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_16BA3C(uint64_t a1)
{
  *(void *)a1 = off_24087D0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_16BAD8(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  return v1 * (v1 * v1 * (v1 * v1)) * (v1 * (v1 * v1 * (v1 * v1)));
}

uint64_t sub_16BB24()
{
  return 56;
}

uint64_t sub_16BB2C(uint64_t a1)
{
  *(void *)a1 = off_2408820;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_16BBA8(uint64_t a1)
{
  *(void *)a1 = off_2408820;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_16BC44(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  return v1 * (v1 * v1) * (v1 * v1 * (v1 * v1) * (v1 * v1 * (v1 * v1)));
}

uint64_t sub_16BC94()
{
  return 56;
}

uint64_t sub_16BC9C(uint64_t a1)
{
  *(void *)a1 = off_2408870;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_16BD18(uint64_t a1)
{
  *(void *)a1 = off_2408870;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_16BDB4(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  return v1 * v1 * (v1 * v1) * (v1 * v1 * (v1 * v1) * (v1 * v1 * (v1 * v1)));
}

uint64_t sub_16BE00()
{
  return 56;
}

uint64_t sub_16BE08(uint64_t a1)
{
  *(void *)a1 = off_24088C0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_16BE84(uint64_t a1)
{
  *(void *)a1 = off_24088C0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_16BF20(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  return v1 * (v1 * v1 * (v1 * v1)) * (v1 * v1 * (v1 * v1) * (v1 * v1 * (v1 * v1)));
}

uint64_t sub_16BF70()
{
  return 56;
}

uint64_t sub_16BF78(uint64_t a1)
{
  *(void *)a1 = off_2408910;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_16BFF4(uint64_t a1)
{
  *(void *)a1 = off_2408910;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_16C090(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  return v1 * v1 * (v1 * v1 * (v1 * v1)) * (v1 * v1 * (v1 * v1) * (v1 * v1 * (v1 * v1)));
}

uint64_t sub_16C0E0()
{
  return 56;
}

uint64_t sub_16C0E8(uint64_t a1)
{
  *(void *)a1 = off_2408960;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_16C164(uint64_t a1)
{
  *(void *)a1 = off_2408960;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_16C200(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  return v1 * (v1 * v1) * (v1 * v1 * (v1 * v1)) * (v1 * v1 * (v1 * v1) * (v1 * v1 * (v1 * v1)));
}

uint64_t sub_16C254()
{
  return 56;
}

uint64_t sub_16C25C(uint64_t a1)
{
  *(void *)a1 = off_24089B0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_16C2D8(uint64_t a1)
{
  *(void *)a1 = off_24089B0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_16C374(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1 * (v1 * v1) * (v1 * v1 * (v1 * v1));
  return v2 * v2;
}

uint64_t sub_16C3C0()
{
  return 56;
}

uint64_t sub_16C3C8(uint64_t a1)
{
  *(void *)a1 = off_2408A00;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_16C444(uint64_t a1)
{
  *(void *)a1 = off_2408A00;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_16C4E0(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1 * (v1 * v1) * (v1 * v1 * (v1 * v1));
  return v1 * (v2 * v2);
}

uint64_t sub_16C530()
{
  return 56;
}

uint64_t sub_16C538(uint64_t a1)
{
  *(void *)a1 = off_2408A50;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_16C5B4(uint64_t a1)
{
  *(void *)a1 = off_2408A50;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_16C650(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1;
  return v2 * (v2 * v2 * (v2 * v2) * (v2 * v2 * (v2 * v2)));
}

uint64_t sub_16C6A0()
{
  return 56;
}

uint64_t sub_16C6A8(uint64_t a1)
{
  *(void *)a1 = off_2408AA0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_16C724(uint64_t a1)
{
  *(void *)a1 = off_2408AA0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_16C7C0(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  return v1 * (v1 * v1) * (v1 * v1 * (v1 * v1) * (v1 * v1 * (v1 * v1)) * (v1 * v1 * (v1 * v1) * (v1 * v1 * (v1 * v1))));
}

uint64_t sub_16C814()
{
  return 56;
}

uint64_t sub_16C81C(uint64_t a1)
{
  *(void *)a1 = off_2408AF0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_16C898(uint64_t a1)
{
  *(void *)a1 = off_2408AF0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_16C934(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  return v1
       * v1
       * (v1
        * v1)
       * (v1
        * v1
        * (v1
         * v1)
        * (v1
         * v1
         * (v1
          * v1))
        * (v1
         * v1
         * (v1
          * v1)
         * (v1
          * v1
          * (v1
           * v1))));
}

uint64_t sub_16C984()
{
  return 56;
}

uint64_t sub_16C98C(uint64_t a1)
{
  *(void *)a1 = off_2408B40;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_16CA08(uint64_t a1)
{
  *(void *)a1 = off_2408B40;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_16CAA4(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  return v1
       * (v1
        * v1
        * (v1
         * v1))
       * (v1
        * v1
        * (v1
         * v1)
        * (v1
         * v1
         * (v1
          * v1))
        * (v1
         * v1
         * (v1
          * v1)
         * (v1
          * v1
          * (v1
           * v1))));
}

uint64_t sub_16CAF8()
{
  return 56;
}

uint64_t sub_16CB00(uint64_t a1)
{
  *(void *)a1 = off_2408B90;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_16CB7C(uint64_t a1)
{
  *(void *)a1 = off_2408B90;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_16CC18(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1;
  return v2 * (v2 * v2) * (v2 * v2 * (v2 * v2) * (v2 * v2 * (v2 * v2)));
}

uint64_t sub_16CC6C()
{
  return 56;
}

uint64_t sub_16CC74(uint64_t a1)
{
  *(void *)a1 = off_2408BE0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_16CCF0(uint64_t a1)
{
  *(void *)a1 = off_2408BE0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_16CD8C(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  return v1
       * (v1
        * v1)
       * (v1
        * v1
        * (v1
         * v1))
       * (v1
        * v1
        * (v1
         * v1)
        * (v1
         * v1
         * (v1
          * v1))
        * (v1
         * v1
         * (v1
          * v1)
         * (v1
          * v1
          * (v1
           * v1))));
}

uint64_t sub_16CDE4()
{
  return 56;
}

uint64_t sub_16CDEC(uint64_t a1)
{
  *(void *)a1 = off_2408C30;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_16CE68(uint64_t a1)
{
  *(void *)a1 = off_2408C30;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_16CF04(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1 * (v1 * v1) * (v1 * v1 * (v1 * v1));
  return v2 * (v2 * v2);
}

uint64_t sub_16CF54()
{
  return 56;
}

uint64_t sub_16CF5C(uint64_t a1)
{
  *(void *)a1 = off_2408C80;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_16CFD8(uint64_t a1)
{
  *(void *)a1 = off_2408C80;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_16D074(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1 * (v1 * v1) * (v1 * v1 * (v1 * v1));
  return v1 * v2 * (v2 * v2);
}

uint64_t sub_16D0C8()
{
  return 56;
}

uint64_t sub_16D0D0(uint64_t a1)
{
  *(void *)a1 = off_2408CD0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_16D14C(uint64_t a1)
{
  *(void *)a1 = off_2408CD0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_16D1E8(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1;
  return v2 * (v2 * v2 * (v2 * v2)) * (v2 * v2 * (v2 * v2) * (v2 * v2 * (v2 * v2)));
}

uint64_t sub_16D23C()
{
  return 56;
}

uint64_t sub_16D244(uint64_t a1)
{
  *(void *)a1 = off_2408D20;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_16D2C0(uint64_t a1)
{
  *(void *)a1 = off_2408D20;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_16D35C(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1 * (v1 * v1) * (v1 * v1 * (v1 * v1));
  return v1 * (v1 * v1) * v2 * (v2 * v2);
}

uint64_t sub_16D3B4()
{
  return 56;
}

uint64_t sub_16D3BC(uint64_t a1)
{
  *(void *)a1 = off_2408D70;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_16D438(uint64_t a1)
{
  *(void *)a1 = off_2408D70;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_16D4D4(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1 * (v1 * v1);
  return v2 * (v2 * v2) * (v2 * v2 * (v2 * v2));
}

uint64_t sub_16D528()
{
  return 56;
}

uint64_t sub_16D530(uint64_t a1)
{
  *(void *)a1 = off_2408DC0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_16D5AC(uint64_t a1)
{
  *(void *)a1 = off_2408DC0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_16D648(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1 * (v1 * v1);
  return v1 * v2 * (v2 * v2) * (v2 * v2 * (v2 * v2));
}

uint64_t sub_16D6A0()
{
  return 56;
}

uint64_t sub_16D6A8(uint64_t a1)
{
  *(void *)a1 = off_2408E10;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_16D724(uint64_t a1)
{
  *(void *)a1 = off_2408E10;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_16D7C0(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1;
  return v2 * (v2 * v2) * (v2 * v2 * (v2 * v2)) * (v2 * v2 * (v2 * v2) * (v2 * v2 * (v2 * v2)));
}

uint64_t sub_16D818()
{
  return 56;
}

uint64_t sub_16D820(uint64_t a1)
{
  *(void *)a1 = off_2408E60;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_16D89C(uint64_t a1)
{
  *(void *)a1 = off_2408E60;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_16D938(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1 * (v1 * v1);
  return v1 * (v1 * v1) * v2 * (v2 * v2) * (v2 * v2 * (v2 * v2));
}

uint64_t sub_16D994()
{
  return 56;
}

uint64_t sub_16D99C(uint64_t a1)
{
  *(void *)a1 = off_2408EB0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_16DA18(uint64_t a1)
{
  *(void *)a1 = off_2408EB0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_16DAB4(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1 * (v1 * v1) * (v1 * v1 * (v1 * v1));
  return v2 * v2 * (v2 * v2);
}

uint64_t sub_16DB04()
{
  return 56;
}

uint64_t sub_16DB0C(uint64_t a1)
{
  *(void *)a1 = off_2408F00;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_16DB88(uint64_t a1)
{
  *(void *)a1 = off_2408F00;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_16DC24(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1 * (v1 * v1) * (v1 * v1 * (v1 * v1));
  return v1 * (v2 * v2 * (v2 * v2));
}

uint64_t sub_16DC78()
{
  return 56;
}

uint64_t sub_16DC80(uint64_t a1)
{
  *(void *)a1 = off_2408F50;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_16DCFC(uint64_t a1)
{
  *(void *)a1 = off_2408F50;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_16DD98(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1;
  double v3 = v2 * v2 * (v2 * v2) * (v2 * v2 * (v2 * v2));
  return v2 * (v3 * v3);
}

uint64_t sub_16DDEC()
{
  return 56;
}

uint64_t sub_16DDF4(uint64_t a1)
{
  *(void *)a1 = off_2408FA0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_16DE70(uint64_t a1)
{
  *(void *)a1 = off_2408FA0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_16DF0C(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1 * (v1 * v1) * (v1 * v1 * (v1 * v1)) * (v1 * v1 * (v1 * v1) * (v1 * v1 * (v1 * v1)));
  return v1 * (v1 * v1) * (v2 * v2);
}

uint64_t sub_16DF64()
{
  return 56;
}

uint64_t sub_16DF6C(uint64_t a1)
{
  *(void *)a1 = off_2408FF0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_16DFE8(uint64_t a1)
{
  *(void *)a1 = off_2408FF0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_16E084(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1 * (v1 * v1);
  return v2 * (v2 * v2 * (v2 * v2) * (v2 * v2 * (v2 * v2)));
}

uint64_t sub_16E0D8()
{
  return 56;
}

uint64_t sub_16E0E0(uint64_t a1)
{
  *(void *)a1 = off_2409040;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_16E15C(uint64_t a1)
{
  *(void *)a1 = off_2409040;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_16E1F8(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1 * (v1 * v1);
  return v1 * v2 * (v2 * v2 * (v2 * v2) * (v2 * v2 * (v2 * v2)));
}

uint64_t sub_16E250()
{
  return 56;
}

uint64_t sub_16E258(uint64_t a1)
{
  *(void *)a1 = off_2409090;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_16E2D4(uint64_t a1)
{
  *(void *)a1 = off_2409090;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_16E370(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1;
  return v2 * (v2 * v2) * (v2 * v2 * (v2 * v2) * (v2 * v2 * (v2 * v2)) * (v2 * v2 * (v2 * v2) * (v2 * v2 * (v2 * v2))));
}

uint64_t sub_16E3C8()
{
  return 56;
}

uint64_t sub_16E3D0(uint64_t a1)
{
  *(void *)a1 = off_24090E0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_16E44C(uint64_t a1)
{
  *(void *)a1 = off_24090E0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_16E4E8(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1 * (v1 * v1);
  return v1 * (v1 * v1) * v2 * (v2 * v2 * (v2 * v2) * (v2 * v2 * (v2 * v2)));
}

uint64_t sub_16E544()
{
  return 56;
}

uint64_t sub_16E54C(uint64_t a1)
{
  *(void *)a1 = off_2409130;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_16E5C8(uint64_t a1)
{
  *(void *)a1 = off_2409130;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_16E664(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1 * (v1 * v1) * (v1 * v1 * (v1 * v1));
  return v2 * (v2 * v2 * (v2 * v2));
}

uint64_t sub_16E6B8()
{
  return 56;
}

uint64_t sub_16E6C0(uint64_t a1)
{
  *(void *)a1 = off_2409180;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_16E73C(uint64_t a1)
{
  *(void *)a1 = off_2409180;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_16E7D8(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1 * (v1 * v1) * (v1 * v1 * (v1 * v1));
  return v1 * v2 * (v2 * v2 * (v2 * v2));
}

uint64_t sub_16E830()
{
  return 56;
}

uint64_t sub_16E838(uint64_t a1)
{
  *(void *)a1 = off_24091D0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_16E8B4(uint64_t a1)
{
  *(void *)a1 = off_24091D0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_16E950(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1;
  return v2
       * (v2
        * v2
        * (v2
         * v2))
       * (v2
        * v2
        * (v2
         * v2)
        * (v2
         * v2
         * (v2
          * v2))
        * (v2
         * v2
         * (v2
          * v2)
         * (v2
          * v2
          * (v2
           * v2))));
}

uint64_t sub_16E9A8()
{
  return 56;
}

uint64_t sub_16E9B0(uint64_t a1)
{
  *(void *)a1 = off_2409220;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_16EA2C(uint64_t a1)
{
  *(void *)a1 = off_2409220;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_16EAC8(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1 * (v1 * v1) * (v1 * v1 * (v1 * v1));
  return v1 * (v1 * v1) * v2 * (v2 * v2 * (v2 * v2));
}

uint64_t sub_16EB24()
{
  return 56;
}

uint64_t sub_16EB2C(uint64_t a1)
{
  *(void *)a1 = off_2409270;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_16EBA8(uint64_t a1)
{
  *(void *)a1 = off_2409270;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_16EC44(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1 * (v1 * v1);
  return v2 * (v2 * v2) * (v2 * v2 * (v2 * v2) * (v2 * v2 * (v2 * v2)));
}

uint64_t sub_16EC9C()
{
  return 56;
}

uint64_t sub_16ECA4(uint64_t a1)
{
  *(void *)a1 = off_24092C0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_16ED20(uint64_t a1)
{
  *(void *)a1 = off_24092C0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_16EDBC(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1 * (v1 * v1);
  return v1 * v2 * (v2 * v2) * (v2 * v2 * (v2 * v2) * (v2 * v2 * (v2 * v2)));
}

uint64_t sub_16EE18()
{
  return 56;
}

uint64_t sub_16EE20(uint64_t a1)
{
  *(void *)a1 = off_2409310;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_16EE9C(uint64_t a1)
{
  *(void *)a1 = off_2409310;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_16EF38(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1;
  return v2
       * (v2
        * v2)
       * (v2
        * v2
        * (v2
         * v2))
       * (v2
        * v2
        * (v2
         * v2)
        * (v2
         * v2
         * (v2
          * v2))
        * (v2
         * v2
         * (v2
          * v2)
         * (v2
          * v2
          * (v2
           * v2))));
}

uint64_t sub_16EF94()
{
  return 56;
}

uint64_t sub_16EF9C(uint64_t a1)
{
  *(void *)a1 = off_2409360;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_16F018(uint64_t a1)
{
  *(void *)a1 = off_2409360;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_16F0B4(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1 * (v1 * v1);
  return v1 * (v1 * v1) * v2 * (v2 * v2) * (v2 * v2 * (v2 * v2) * (v2 * v2 * (v2 * v2)));
}

uint64_t sub_16F114()
{
  return 56;
}

uint64_t sub_16F11C(uint64_t a1)
{
  *(void *)a1 = off_24093B0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_16F198(uint64_t a1)
{
  *(void *)a1 = off_24093B0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_16F234(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1 * (v1 * v1) * (v1 * v1 * (v1 * v1));
  return v2 * v2 * (v2 * v2 * (v2 * v2));
}

uint64_t sub_16F288()
{
  return 56;
}

uint64_t sub_16F290(uint64_t a1)
{
  *(void *)a1 = off_2409400;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_16F30C(uint64_t a1)
{
  *(void *)a1 = off_2409400;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_16F3A8(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1 * (v1 * v1) * (v1 * v1 * (v1 * v1));
  return v1 * (v2 * v2) * (v2 * v2 * (v2 * v2));
}

uint64_t sub_16F400()
{
  return 56;
}

uint64_t sub_16F408(uint64_t a1)
{
  *(void *)a1 = off_2409450;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_16F484(uint64_t a1)
{
  *(void *)a1 = off_2409450;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_16F520(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1;
  double v3 = v2 * v2 * (v2 * v2) * (v2 * v2 * (v2 * v2));
  return v2 * v3 * (v3 * v3);
}

uint64_t sub_16F578()
{
  return 56;
}

uint64_t sub_16F580(uint64_t a1)
{
  *(void *)a1 = off_24094A0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_16F5FC(uint64_t a1)
{
  *(void *)a1 = off_24094A0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_16F698(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1 * (v1 * v1) * (v1 * v1 * (v1 * v1)) * (v1 * v1 * (v1 * v1) * (v1 * v1 * (v1 * v1)));
  return v1 * (v1 * v1) * v2 * (v2 * v2);
}

uint64_t sub_16F6F4()
{
  return 56;
}

uint64_t sub_16F6FC(uint64_t a1)
{
  *(void *)a1 = off_24094F0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_16F778(uint64_t a1)
{
  *(void *)a1 = off_24094F0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_16F814(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1 * (v1 * v1);
  return v2 * (v2 * v2 * (v2 * v2)) * (v2 * v2 * (v2 * v2) * (v2 * v2 * (v2 * v2)));
}

uint64_t sub_16F86C()
{
  return 56;
}

uint64_t sub_16F874(uint64_t a1)
{
  *(void *)a1 = off_2409540;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_16F8F0(uint64_t a1)
{
  *(void *)a1 = off_2409540;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_16F98C(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1 * (v1 * v1);
  return v1 * v2 * (v2 * v2 * (v2 * v2)) * (v2 * v2 * (v2 * v2) * (v2 * v2 * (v2 * v2)));
}

uint64_t sub_16F9E8()
{
  return 56;
}

uint64_t sub_16F9F0(uint64_t a1)
{
  *(void *)a1 = off_2409590;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_16FA6C(uint64_t a1)
{
  *(void *)a1 = off_2409590;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_16FB08(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1;
  double v3 = v2 * v2 * (v2 * v2) * (v2 * v2 * (v2 * v2));
  return v2 * (v2 * v2) * v3 * (v3 * v3);
}

uint64_t sub_16FB64()
{
  return 56;
}

uint64_t sub_16FB6C(uint64_t a1)
{
  *(void *)a1 = off_24095E0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_16FBE8(uint64_t a1)
{
  *(void *)a1 = off_24095E0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_16FC84(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1 * (v1 * v1);
  return v1 * (v1 * v1) * v2 * (v2 * v2 * (v2 * v2)) * (v2 * v2 * (v2 * v2) * (v2 * v2 * (v2 * v2)));
}

uint64_t sub_16FCE4()
{
  return 56;
}

uint64_t sub_16FCEC(uint64_t a1)
{
  *(void *)a1 = off_2409630;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_16FD68(uint64_t a1)
{
  *(void *)a1 = off_2409630;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_16FE04(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1 * (v1 * v1) * (v1 * v1 * (v1 * v1));
  return v2 * (v2 * v2) * (v2 * v2 * (v2 * v2));
}

uint64_t sub_16FE5C()
{
  return 56;
}

uint64_t sub_16FE64(uint64_t a1)
{
  *(void *)a1 = off_2409680;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_16FEE0(uint64_t a1)
{
  *(void *)a1 = off_2409680;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_16FF7C(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1 * (v1 * v1) * (v1 * v1 * (v1 * v1));
  return v1 * v2 * (v2 * v2) * (v2 * v2 * (v2 * v2));
}

uint64_t sub_16FFD8()
{
  return 56;
}

uint64_t sub_16FFE0(uint64_t a1)
{
  *(void *)a1 = off_24096D0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_17005C(uint64_t a1)
{
  *(void *)a1 = off_24096D0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_1700F8(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1;
  double v3 = v2 * v2 * (v2 * v2);
  return v2 * v3 * (v3 * v3) * (v3 * v3 * (v3 * v3));
}

uint64_t sub_170154()
{
  return 56;
}

uint64_t sub_17015C(uint64_t a1)
{
  *(void *)a1 = off_2409720;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_1701D8(uint64_t a1)
{
  *(void *)a1 = off_2409720;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_170274(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1 * (v1 * v1) * (v1 * v1 * (v1 * v1));
  return v1 * (v1 * v1) * v2 * (v2 * v2) * (v2 * v2 * (v2 * v2));
}

uint64_t sub_1702D4()
{
  return 56;
}

uint64_t sub_1702DC(uint64_t a1)
{
  *(void *)a1 = off_2409770;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_170358(uint64_t a1)
{
  *(void *)a1 = off_2409770;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_1703F4(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1 * (v1 * v1);
  return v2 * (v2 * v2) * (v2 * v2 * (v2 * v2)) * (v2 * v2 * (v2 * v2) * (v2 * v2 * (v2 * v2)));
}

uint64_t sub_170450()
{
  return 56;
}

void sub_170458()
{
}

void sub_170530()
{
}

void sub_170554()
{
}

void sub_17062C()
{
}

void sub_170650()
{
}

void sub_170728()
{
}

void sub_17074C()
{
}

void sub_170824()
{
}

void sub_170848()
{
}

void sub_170920()
{
}

void sub_170944()
{
}

void sub_170A1C()
{
}

void sub_170A40()
{
}

void sub_170B18()
{
}

void sub_170B3C()
{
}

void sub_170C14()
{
}

void sub_170C38()
{
}

void sub_170D10()
{
}

void sub_170D34()
{
}

void sub_170E0C()
{
}

void sub_170E30()
{
}

void sub_170F08()
{
}

void sub_170F2C()
{
}

void sub_171004()
{
}

void sub_171028()
{
}

void sub_171100()
{
}

void sub_171124()
{
}

void sub_1711FC()
{
}

void sub_171220()
{
}

void sub_1712F8()
{
}

void sub_17131C()
{
}

void sub_1713F4()
{
}

void sub_171418()
{
}

void sub_1714F0()
{
}

void sub_171514()
{
}

void sub_1715EC()
{
}

void sub_171610()
{
}

void sub_1716E8()
{
}

void sub_17170C()
{
}

void sub_1717E4()
{
}

void sub_171808()
{
}

void sub_1718E0()
{
}

void sub_171904()
{
}

void sub_1719DC()
{
}

void sub_171A00()
{
}

void sub_171AD8()
{
}

void sub_171AFC()
{
}

void sub_171BD4()
{
}

void sub_171BF8()
{
}

void sub_171CD0()
{
}

void sub_171CF4()
{
}

void sub_171DCC()
{
}

void sub_171DF0()
{
}

void sub_171EC8()
{
}

void sub_171EEC()
{
}

void sub_171FC4()
{
}

void sub_171FE8()
{
}

void sub_1720C0()
{
}

void sub_1720E4()
{
}

void sub_1721BC()
{
}

void sub_1721E0()
{
}

void sub_1722B8()
{
}

void sub_1722DC()
{
}

void sub_1723B4()
{
}

void sub_1723D8()
{
}

void sub_1724B0()
{
}

void sub_1724D4()
{
}

void sub_1725AC()
{
}

void sub_1725D0()
{
}

void sub_1726A8()
{
}

void sub_1726CC()
{
}

void sub_1727A4()
{
}

void sub_1727C8()
{
}

void sub_1728A0()
{
}

void sub_1728C4()
{
}

void sub_17299C()
{
}

void sub_1729C0()
{
}

void sub_172A98()
{
}

void sub_172ABC()
{
}

void sub_172B94()
{
}

void sub_172BB8()
{
}

void sub_172C90()
{
}

void sub_172CB4()
{
}

void sub_172D8C()
{
}

void sub_172DB0()
{
}

void sub_172E88()
{
}

void sub_172EAC()
{
}

void sub_172F84()
{
}

void sub_172FA8()
{
}

void sub_173080()
{
}

void sub_1730A4()
{
}

void sub_17317C()
{
}

void sub_1731A0()
{
}

void sub_173278()
{
}

void sub_17329C()
{
}

void sub_173374()
{
}

void sub_173398()
{
}

void sub_173470()
{
}

void sub_173494()
{
}

void sub_17356C()
{
}

void sub_173590()
{
}

void sub_173668()
{
}

void sub_17368C()
{
}

void sub_173764()
{
}

void sub_173788()
{
}

void sub_173860()
{
}

void sub_173884()
{
}

void sub_17395C()
{
}

void sub_173980()
{
}

void sub_173A58()
{
}

void sub_173A7C()
{
}

void sub_173B54()
{
}

void sub_173B78()
{
}

void sub_173C50()
{
}

void sub_173C74()
{
}

void sub_173D4C()
{
}

void sub_173D70()
{
}

void sub_173E48()
{
}

void sub_173E6C()
{
}

void sub_173F44()
{
}

uint64_t sub_173F68(uint64_t a1)
{
  *(void *)a1 = off_24097C0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_173FE4(uint64_t a1)
{
  *(void *)a1 = off_24097C0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_174080(uint64_t a1)
{
  return 1.0 / (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
}

uint64_t sub_1740C4()
{
  return 57;
}

uint64_t sub_1740CC(uint64_t a1)
{
  *(void *)a1 = off_2409810;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_174148(uint64_t a1)
{
  *(void *)a1 = off_2409810;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_1741E4(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  return 1.0 / (v1 * v1);
}

uint64_t sub_17422C()
{
  return 57;
}

uint64_t sub_174234(uint64_t a1)
{
  *(void *)a1 = off_2409860;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_1742B0(uint64_t a1)
{
  *(void *)a1 = off_2409860;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_17434C(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  return 1.0 / (v1 * (v1 * v1));
}

uint64_t sub_174398()
{
  return 57;
}

uint64_t sub_1743A0(uint64_t a1)
{
  *(void *)a1 = off_24098B0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_17441C(uint64_t a1)
{
  *(void *)a1 = off_24098B0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_1744B8(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  return 1.0 / (v1 * v1 * (v1 * v1));
}

uint64_t sub_174504()
{
  return 57;
}

uint64_t sub_17450C(uint64_t a1)
{
  *(void *)a1 = off_2409900;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_174588(uint64_t a1)
{
  *(void *)a1 = off_2409900;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_174624(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  return 1.0 / (v1 * (v1 * v1 * (v1 * v1)));
}

uint64_t sub_174674()
{
  return 57;
}

uint64_t sub_17467C(uint64_t a1)
{
  *(void *)a1 = off_2409950;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_1746F8(uint64_t a1)
{
  *(void *)a1 = off_2409950;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_174794(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  return 1.0 / (v1 * (v1 * v1) * (v1 * (v1 * v1)));
}

uint64_t sub_1747E4()
{
  return 57;
}

uint64_t sub_1747EC(uint64_t a1)
{
  *(void *)a1 = off_24099A0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_174868(uint64_t a1)
{
  *(void *)a1 = off_24099A0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_174904(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  return 1.0 / (v1 * (v1 * (v1 * v1) * (v1 * (v1 * v1))));
}

uint64_t sub_174958()
{
  return 57;
}

uint64_t sub_174960(uint64_t a1)
{
  *(void *)a1 = off_24099F0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_1749DC(uint64_t a1)
{
  *(void *)a1 = off_24099F0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_174A78(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  return 1.0 / (v1 * v1 * (v1 * v1) * (v1 * v1 * (v1 * v1)));
}

uint64_t sub_174AC8()
{
  return 57;
}

uint64_t sub_174AD0(uint64_t a1)
{
  *(void *)a1 = off_2409A40;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_174B4C(uint64_t a1)
{
  *(void *)a1 = off_2409A40;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_174BE8(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  return 1.0 / (v1 * (v1 * v1 * (v1 * v1) * (v1 * v1 * (v1 * v1))));
}

uint64_t sub_174C3C()
{
  return 57;
}

uint64_t sub_174C44(uint64_t a1)
{
  *(void *)a1 = off_2409A90;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_174CC0(uint64_t a1)
{
  *(void *)a1 = off_2409A90;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_174D5C(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  return 1.0 / (v1 * (v1 * v1 * (v1 * v1)) * (v1 * (v1 * v1 * (v1 * v1))));
}

uint64_t sub_174DB0()
{
  return 57;
}

uint64_t sub_174DB8(uint64_t a1)
{
  *(void *)a1 = off_2409AE0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_174E34(uint64_t a1)
{
  *(void *)a1 = off_2409AE0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_174ED0(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  return 1.0 / (v1 * (v1 * v1) * (v1 * v1 * (v1 * v1) * (v1 * v1 * (v1 * v1))));
}

uint64_t sub_174F28()
{
  return 57;
}

uint64_t sub_174F30(uint64_t a1)
{
  *(void *)a1 = off_2409B30;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_174FAC(uint64_t a1)
{
  *(void *)a1 = off_2409B30;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_175048(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  return 1.0 / (v1 * v1 * (v1 * v1) * (v1 * v1 * (v1 * v1) * (v1 * v1 * (v1 * v1))));
}

uint64_t sub_17509C()
{
  return 57;
}

uint64_t sub_1750A4(uint64_t a1)
{
  *(void *)a1 = off_2409B80;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_175120(uint64_t a1)
{
  *(void *)a1 = off_2409B80;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_1751BC(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  return 1.0 / (v1 * (v1 * v1 * (v1 * v1)) * (v1 * v1 * (v1 * v1) * (v1 * v1 * (v1 * v1))));
}

uint64_t sub_175214()
{
  return 57;
}

uint64_t sub_17521C(uint64_t a1)
{
  *(void *)a1 = off_2409BD0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_175298(uint64_t a1)
{
  *(void *)a1 = off_2409BD0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_175334(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  return 1.0 / (v1 * v1 * (v1 * v1 * (v1 * v1)) * (v1 * v1 * (v1 * v1) * (v1 * v1 * (v1 * v1))));
}

uint64_t sub_17538C()
{
  return 57;
}

uint64_t sub_175394(uint64_t a1)
{
  *(void *)a1 = off_2409C20;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_175410(uint64_t a1)
{
  *(void *)a1 = off_2409C20;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_1754AC(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  return 1.0 / (v1 * (v1 * v1) * (v1 * v1 * (v1 * v1)) * (v1 * v1 * (v1 * v1) * (v1 * v1 * (v1 * v1))));
}

uint64_t sub_175508()
{
  return 57;
}

uint64_t sub_175510(uint64_t a1)
{
  *(void *)a1 = off_2409C70;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_17558C(uint64_t a1)
{
  *(void *)a1 = off_2409C70;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_175628(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1 * (v1 * v1) * (v1 * v1 * (v1 * v1));
  return 1.0 / (v2 * v2);
}

uint64_t sub_17567C()
{
  return 57;
}

uint64_t sub_175684(uint64_t a1)
{
  *(void *)a1 = off_2409CC0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_175700(uint64_t a1)
{
  *(void *)a1 = off_2409CC0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_17579C(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1 * (v1 * v1) * (v1 * v1 * (v1 * v1));
  return 1.0 / (v1 * (v2 * v2));
}

uint64_t sub_1757F4()
{
  return 57;
}

uint64_t sub_1757FC(uint64_t a1)
{
  *(void *)a1 = off_2409D10;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}