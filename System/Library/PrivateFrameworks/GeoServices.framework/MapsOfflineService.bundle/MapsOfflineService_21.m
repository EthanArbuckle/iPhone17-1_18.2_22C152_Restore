void sub_9404BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  void *v37;

  if (qword_25D5B60) {
    sub_20AC7F8((void **)qword_25D5B60);
  }
  v37 = (void *)xmmword_25D5B50;
  *(void *)&xmmword_25D5B50 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void *sub_94055C(uint64_t a1, uint64_t a2, void *a3)
{
  result = (void *)sub_921DD0(a1, a2, a3);
  void *result = &off_243C118;
  return result;
}

void sub_940590(uint64_t *a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  if (a2 == 1)
  {
    sub_9E034C(a1, 1, a3, (uint64_t)a4);
  }
  else if (a3 == 1)
  {
    sub_940654((uint64_t)a1, (uint64_t)a4);
  }
  else if (a3)
  {
    sub_5F3B34((uint64_t)a4);
  }
  else
  {
    int v6 = sub_9222BC((uint64_t)a1);
    sub_9E0888((uint64_t)a1, v6, a4);
  }
}

void sub_940654(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (!sub_9222F8(a1))
  {
    sub_92248C(a1, &v23);
    std::string::size_type v4 = v25;
    if ((v25 & 0x80u) != 0) {
      std::string::size_type v4 = v24;
    }
    if (!v4)
    {
      sub_5F3B34(a2);
      goto LABEL_55;
    }
    sub_5F3B74(a2, (__int16 *)(*(void *)(a1 + 88) + 1177));
    int v5 = sub_97C860();
    v21[0] = 0;
    v21[1] = 0;
    uint64_t v22 = 0;
    if ((v5 - 1) < 2)
    {
      sub_9DBEFC(*(unsigned __int8 *)(a1 + 512), (uint64_t)&__p);
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      if (!size)
      {
        *(void *)v19 = operator new(0x19uLL);
        *(_OWORD *)&v19[8] = xmmword_20B9250;
        strcpy(*(char **)v19, "Enter {WalkDestination}");
        if ((SHIBYTE(v22) & 0x80000000) == 0)
        {
LABEL_23:
          *(_OWORD *)v21 = *(_OWORD *)v19;
          uint64_t v22 = *(void *)&v19[16];
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_24;
          }
LABEL_62:
          operator delete(__p.__r_.__value_.__l.__data_);
LABEL_24:
          v8 = sub_8D7730(*(void *)(a1 + 96), (uint64_t)v21);
          if (*((char *)v8 + 23) < 0)
          {
            sub_4200(&__p, (void *)*v8, v8[1]);
          }
          else
          {
            long long v9 = *(_OWORD *)v8;
            __p.__r_.__value_.__r.__words[2] = v8[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
          }
          int64_t v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            int64_t v10 = __p.__r_.__value_.__l.__size_;
          }
          if (v10 >= 17)
          {
            v12 = (char *)p_p + v10;
            v13 = p_p;
            do
            {
              v14 = (char *)memchr(v13, 123, v10 - 16);
              if (!v14) {
                break;
              }
              if (*(void *)v14 == *(void *)"{WalkDestination}"
                && *((void *)v14 + 1) == *(void *)"tination}"
                && v14[16] == 125)
              {
                if (v14 != v12 && v14 - (char *)p_p != -1)
                {
                  if ((v25 & 0x80u) == 0) {
                    v17 = (const std::string::value_type *)&v23;
                  }
                  else {
                    v17 = v23;
                  }
                  if ((v25 & 0x80u) == 0) {
                    std::string::size_type v18 = v25;
                  }
                  else {
                    std::string::size_type v18 = v24;
                  }
                  std::string::replace(&__p, v14 - (char *)p_p, 0x11uLL, v17, v18);
                }
                break;
              }
              v13 = (std::string *)(v14 + 1);
              int64_t v10 = v12 - (char *)v13;
            }
            while (v12 - (char *)v13 >= 17);
          }
          sub_5F41E8(a2, (uint64_t)&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v22) & 0x80000000) == 0)
            {
LABEL_55:
              if (((char)v25 & 0x80000000) == 0) {
                return;
              }
              goto LABEL_59;
            }
          }
          else if ((SHIBYTE(v22) & 0x80000000) == 0)
          {
            goto LABEL_55;
          }
          operator delete(v21[0]);
          if (((char)v25 & 0x80000000) == 0) {
            return;
          }
LABEL_59:
          operator delete(v23);
          return;
        }
LABEL_61:
        operator delete(v21[0]);
        *(_OWORD *)v21 = *(_OWORD *)v19;
        uint64_t v22 = *(void *)&v19[16];
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_24;
        }
        goto LABEL_62;
      }
    }
    else
    {
      if (v5 && v5 != 3) {
        goto LABEL_24;
      }
      sub_98CC7C(v5, *(unsigned __int8 *)(a1 + 512), 0, 0, &__p);
      std::string::size_type v6 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v6 = __p.__r_.__value_.__l.__size_;
      }
      if (v6)
      {
        std::operator+<char>();
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        std::string __p = *(std::string *)v19;
      }
    }
    std::operator+<char>();
    if ((SHIBYTE(v22) & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_61;
  }

  sub_5F3B34(a2);
}

void sub_9409BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  sub_4D4B58(v25);
  if (*(char *)(v26 - 33) < 0) {
    operator delete(*(void **)(v26 - 56));
  }
  _Unwind_Resume(a1);
}

void *sub_940A30(uint64_t a1, uint64_t a2, void *a3)
{
  result = (void *)sub_925160(a1, a2, a3);
  void *result = &off_243C1C8;
  return result;
}

uint64_t sub_940A64(uint64_t a1, int a2)
{
  if (a2 == 2) {
    return 0;
  }
  else {
    return sub_925240(a1, a2);
  }
}

void *sub_940A78(uint64_t a1, uint64_t a2, void *a3)
{
  result = (void *)sub_925F54(a1, a2, a3);
  void *result = &off_243C278;
  return result;
}

void sub_940AAC(uint64_t a1, std::string *a2, void *a3, int a4, int a5)
{
  if (*(void *)(*(void *)(a1 + 72) + 56) != -1)
  {
    memset(&v46, 0, sizeof(v46));
    if (a4)
    {
      unsigned int v9 = sub_9DB778((void *)a1);
      if ((v9 & 0x80000000) == 0)
      {
        uint64_t v10 = *(void *)(a1 + 80);
        uint64_t v11 = *(void *)(v10 + 96);
        if (0x4EC4EC4EC4EC4EC5 * ((*(void *)(v10 + 104) - v11) >> 4) <= (unint64_t)v9) {
          sub_66748();
        }
        sub_994EAC((uint64_t *)(v11 + 208 * v9), (uint64_t)&__p);
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        char v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        if (size)
        {
          std::string::append(&v46, "to {System}");
          sub_944628(a3, "{System}", (long long *)&__p);
          char v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        if (v13 < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
    v14 = *(uint64_t **)(a1 + 80);
    unint64_t v15 = *(void *)(*(void *)(a1 + 72) + 56);
    uint64_t v16 = *v14;
    if (0xCF3CF3CF3CF3CF3DLL * ((v14[1] - *v14) >> 3) <= v15) {
      sub_66748();
    }
    v17 = (unsigned char *)sub_9DC3CC(a1);
    if (!sub_9DD8A8(a1, (uint64_t)v17))
    {
      if (!sub_9268E4(a1)) {
        goto LABEL_66;
      }
LABEL_44:
      std::string::size_type v27 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v27 = v46.__r_.__value_.__l.__size_;
      }
      if (v27) {
        v28 = " at {nextBoardStation}";
      }
      else {
        v28 = "to {nextBoardStation}";
      }
      std::string::append(&v46, v28);
      int v29 = sub_97C680(*(uint64_t **)(a1 + 80), *(void *)(*(void *)(a1 + 72) + 56));
      if (sub_97C860() == 1)
      {
        sub_98CC7C(1, v29, 0, 0, &__p);
        std::string::size_type v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        char v31 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v30 = __p.__r_.__value_.__l.__size_;
        }
        if (v30)
        {
          std::operator+<char>();
          if ((v42 & 0x80u) == 0) {
            v32 = v41;
          }
          else {
            v32 = (void **)v41[0];
          }
          if ((v42 & 0x80u) == 0) {
            std::string::size_type v33 = v42;
          }
          else {
            std::string::size_type v33 = (std::string::size_type)v41[1];
          }
          std::string::append(&v46, (const std::string::value_type *)v32, v33);
          if ((char)v42 < 0) {
            operator delete(v41[0]);
          }
          char v31 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        if (v31 < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      v34 = (uint64_t *)sub_9DCD2C(a1, v16 + 168 * v15);
      sub_994EAC(v34, (uint64_t)&__p);
      sub_944AB8(a3, "{nextBoardStation}", (long long *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        std::string::size_type v39 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
        char v36 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
        if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v39 = v46.__r_.__value_.__l.__size_;
        }
        if (!v39) {
          goto LABEL_78;
        }
      }
      else
      {
LABEL_66:
        std::string::size_type v35 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
        char v36 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
        if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v35 = v46.__r_.__value_.__l.__size_;
        }
        if (!v35) {
          goto LABEL_78;
        }
      }
      std::operator+<char>();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v38 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v38 = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(a2, (const std::string::value_type *)p_p, v38);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      char v36 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
LABEL_78:
      if (v36 < 0) {
        operator delete(v46.__r_.__value_.__l.__data_);
      }
      return;
    }
    std::string::size_type v18 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
    if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v18 = v46.__r_.__value_.__l.__size_;
    }
    if (v18) {
      v19 = ", {Platform}";
    }
    else {
      v19 = "to {Platform}";
    }
    std::string::append(&v46, v19);
    if (!v17[792])
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_2439078;
    }
    int v20 = *(unsigned __int8 *)(v16 + 168 * v15 + 162);
    if (v17[424] != 1) {
      a5 = 0;
    }
    if (v17[304]) {
      int v21 = a5;
    }
    else {
      int v21 = 1;
    }
    memset(&__p, 0, sizeof(__p));
    if (v20 == 2)
    {
      uint64_t v22 = " (Numeric_Grouped)";
      v23 = " (Numeric)";
    }
    else
    {
      if (v20 != 1) {
        goto LABEL_32;
      }
      uint64_t v22 = " (Name_Grouped)";
      v23 = " (Name)";
    }
    if (v21) {
      std::string::size_type v24 = v23;
    }
    else {
      std::string::size_type v24 = v22;
    }
    std::string::append(&__p, v24);
LABEL_32:
    if (a5) {
      std::string::append(&__p, " (RT)");
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v25 = &__p;
    }
    else {
      uint64_t v25 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v26 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v26 = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(&v46, (const std::string::value_type *)v25, v26);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_9DD7CC((uint64_t)v17, (uint64_t)&__p);
    sub_944870(a3, "{Platform}", (long long *)&__p);
    if (v45 < 0)
    {
      operator delete(v44);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_44;
      }
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_44;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_44;
  }
}

void sub_940F40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0)
  {
    operator delete(a16);
    if ((a31 & 0x80000000) == 0) {
LABEL_5:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a31 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a26);
  _Unwind_Resume(exception_object);
}

void sub_940FFC(uint64_t *a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  sub_5F3B74(a4, (__int16 *)(a1[11] + 1177));
  *((unsigned char *)&v14.__r_.__value_.__s + 23) = 8;
  strcpy((char *)&v14, "Transfer");
  *(_OWORD *)std::string __p = 0u;
  *(_OWORD *)v12 = 0u;
  int v13 = 1065353216;
  sub_940AAC((uint64_t)a1, &v14, __p, a2, a3);
  sub_9DF9B0(a1, (uint64_t)&v14, (uint64_t)__p, a4);
  v8 = (void **)v12[0];
  if (v12[0])
  {
    do
    {
      uint64_t v10 = (void **)*v8;
      if (*((char *)v8 + 63) < 0)
      {
        operator delete(v8[5]);
        if (*((char *)v8 + 39) < 0) {
LABEL_11:
        }
          operator delete(v8[2]);
      }
      else if (*((char *)v8 + 39) < 0)
      {
        goto LABEL_11;
      }
      operator delete(v8);
      v8 = v10;
    }
    while (v10);
  }
  unsigned int v9 = __p[0];
  __p[0] = 0;
  if (v9) {
    operator delete(v9);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
}

void sub_941124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_50828((uint64_t)&a9);
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_4D4B58(v19);
  _Unwind_Resume(a1);
}

void sub_941150(uint64_t *a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  sub_5F3B74((uint64_t)a4, (__int16 *)(a1[11] + 1177));
  memset(&v16, 0, sizeof(v16));
  if (a2 > 599)
  {
    std::string::assign(&v16, "Walk {WalkTime}");
    int v9 = a2;
    v8 = &qword_25D5EB8;
  }
  else
  {
    std::string::assign(&v16, "Walk less than {OneMinute}");
    v8 = &qword_25D5ED0;
    int v9 = 600;
  }
  sub_5F657C(a4, (uint64_t)v8, v9);
  *(_OWORD *)std::string __p = 0u;
  *(_OWORD *)std::string v14 = 0u;
  int v15 = 1065353216;
  if (a3) {
    sub_940AAC((uint64_t)a1, &v16, __p, 0, 0);
  }
  sub_9DF9B0(a1, (uint64_t)&v16, (uint64_t)__p, (uint64_t)a4);
  uint64_t v10 = (void **)v14[0];
  if (v14[0])
  {
    do
    {
      v12 = (void **)*v10;
      if (*((char *)v10 + 63) < 0)
      {
        operator delete(v10[5]);
        if (*((char *)v10 + 39) < 0) {
LABEL_16:
        }
          operator delete(v10[2]);
      }
      else if (*((char *)v10 + 39) < 0)
      {
        goto LABEL_16;
      }
      operator delete(v10);
      uint64_t v10 = v12;
    }
    while (v12);
  }
  uint64_t v11 = __p[0];
  __p[0] = 0;
  if (v11) {
    operator delete(v11);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
}

void sub_9412B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_50828((uint64_t)&a9);
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_4D4B58(v19);
  _Unwind_Resume(a1);
}

void sub_9412E4(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 72);
  if (!*(unsigned char *)(v4 + 1000))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  BOOL v6 = a2 == 2 && a3 == 0;
  if (*(unsigned char *)(v4 + 964))
  {
    if (v6)
    {
      BOOL v7 = *(_DWORD *)(a1 + 128) == 5;
      int v8 = *(_DWORD *)(v4 + 960);
LABEL_12:
      sub_941150((uint64_t *)a1, v8, v7, a4);
      return;
    }
    if (a2 == 1 && a3 == 2)
    {
      if (*(_DWORD *)(a1 + 128) == 6)
      {
        int v8 = *(_DWORD *)(v4 + 960);
        BOOL v7 = 0;
        goto LABEL_12;
      }
      goto LABEL_34;
    }
    if (a2 == 2 && a3 == 1 && *(_DWORD *)(a1 + 128) == 6)
    {
      BOOL v9 = 1;
LABEL_16:
      sub_940FFC((uint64_t *)a1, v9, 0, (uint64_t)a4);
      return;
    }
    goto LABEL_34;
  }
  if (v6)
  {
    BOOL v9 = *(_DWORD *)(a1 + 128) == 6;
    goto LABEL_16;
  }
  if (a2 != 2 || a3 != 1)
  {
LABEL_34:
    sub_9E034C((uint64_t *)a1, a2, a3, (uint64_t)a4);
    return;
  }

  sub_5F3B34((uint64_t)a4);
}

uint64_t sub_941464(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v5 = (void *)sub_922D70(a1, a2, a3);
  *int v5 = off_243C328;
  sub_2F99CC(v5 + 68, *a3, a3[1]);
  uint64_t v6 = *(void *)(a1 + 72);
  if (!*(unsigned char *)(v6 + 792))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  *(void *)(a1 + 560) = v6 + 488;
  return a1;
}

void sub_941510(_Unwind_Exception *a1)
{
  sub_9305B0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_941524(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v5 = (void *)sub_922D70(a1, a2, a3);
  *int v5 = off_243C328;
  sub_2F99CC(v5 + 68, *a3, a3[1]);
  uint64_t v6 = *(void *)(a1 + 72);
  if (!*(unsigned char *)(v6 + 792))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  *(void *)(a1 + 560) = v6 + 488;
  return a1;
}

void sub_9415D0(_Unwind_Exception *a1)
{
  void *v1 = off_243B2A0;
  v3 = (void *)v1[64];
  if (v3)
  {
    v1[65] = v3;
    operator delete(v3);
  }
  sub_921ED8((uint64_t)v1);
  _Unwind_Resume(a1);
}

void sub_941610(uint64_t a1@<X0>, char **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = sub_924110(a1);
  uint64_t v5 = *(void *)(a1 + 72);
  if (!*(unsigned char *)(v5 + 792))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  uint64_t v7 = *(void *)(v5 + 488);
  uint64_t v6 = *(void *)(v5 + 496);
  if (v6 != v7)
  {
    int v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    int v11 = *(_DWORD *)(v4 + 12);
    int v26 = *(_DWORD *)(v4 + 16);
    while (1)
    {
      unint64_t v13 = 0x6DB6DB6DB6DB6DB7 * ((v8 - v10) >> 2);
      if (v13 >= 2) {
        return;
      }
      std::string v14 = (long long *)(v7 + 28 * v9);
      if (v11 != *((_DWORD *)v14 + 3) || v26 != *(_DWORD *)(v7 + 28 * v9 + 16)) {
        break;
      }
LABEL_6:
      if (++v9 >= (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v6 - v7) >> 2))) {
        return;
      }
    }
    unint64_t v15 = (unint64_t)a2[2];
    if ((unint64_t)v8 < v15)
    {
      long long v12 = *v14;
      *(_OWORD *)(v8 + 12) = *(long long *)((char *)v14 + 12);
      *(_OWORD *)int v8 = v12;
      v8 += 28;
LABEL_5:
      a2[1] = v8;
      uint64_t v7 = *(void *)(v5 + 488);
      uint64_t v6 = *(void *)(v5 + 496);
      goto LABEL_6;
    }
    unint64_t v16 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v15 - (void)v10) >> 2);
    if (2 * v16 <= v13 + 1) {
      uint64_t v17 = v13 + 1;
    }
    else {
      uint64_t v17 = 2 * v16;
    }
    if (v16 >= 0x492492492492492) {
      unint64_t v18 = 0x924924924924924;
    }
    else {
      unint64_t v18 = v17;
    }
    if (v18 > 0x924924924924924) {
      sub_188D718();
    }
    uint64_t v19 = (char *)operator new(28 * v18);
    long long v20 = *v14;
    int v21 = &v19[4 * ((v8 - v10) >> 2)];
    *(_OWORD *)(v21 + 12) = *(long long *)((char *)v14 + 12);
    *(_OWORD *)int v21 = v20;
    if (v8 == v10)
    {
      std::string::size_type v24 = &v19[4 * ((v8 - v10) >> 2)];
      int v8 = v21 + 28;
      *a2 = v21;
      a2[1] = v21 + 28;
      a2[2] = &v19[28 * v18];
      if (!v10) {
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v22 = &v19[4 * ((v8 - v10) >> 2)];
      do
      {
        long long v23 = *(_OWORD *)(v8 - 28);
        std::string::size_type v24 = v22 - 28;
        *((_OWORD *)v22 - 1) = *((_OWORD *)v8 - 1);
        *(_OWORD *)(v22 - 28) = v23;
        v8 -= 28;
        v22 -= 28;
      }
      while (v8 != v10);
      int v8 = v21 + 28;
      *a2 = v24;
      a2[1] = v21 + 28;
      a2[2] = &v19[28 * v18];
      if (!v10) {
        goto LABEL_23;
      }
    }
    operator delete(v10);
LABEL_23:
    uint64_t v10 = v24;
    goto LABEL_5;
  }
}

void sub_941854(_Unwind_Exception *exception_object)
{
  v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_941878(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_5F3B74(a2, (__int16 *)(a1[11] + 1177));
  uint64_t v4 = (int *)sub_924110((uint64_t)a1);
  int v5 = *v4;
  int v6 = v4[1];
  sub_941610((uint64_t)a1, &v25);
  uint64_t v7 = v25;
  int v8 = v26;
  if (v25 == v26)
  {
    uint64_t v10 = "Next at {TimeList}";
  }
  else
  {
    if (v6 == 0x7FFFFFFF) {
      int v9 = v5;
    }
    else {
      int v9 = v6;
    }
    uint64_t v10 = "Next at {TimeList}";
    int v11 = v25;
    while (1)
    {
      int v12 = *((_DWORD *)v11 + 1);
      if (v12 == 0x7FFFFFFF) {
        int v12 = *(_DWORD *)v11;
      }
      if (v12 < v9) {
        break;
      }
      v11 += 28;
      if (v11 == v26) {
        goto LABEL_13;
      }
    }
    uint64_t v10 = "Also at {TimeList}";
  }
LABEL_13:
  char v24 = 18;
  *(_OWORD *)int v21 = *(_OWORD *)v10;
  __int16 v22 = *((_WORD *)v10 + 8);
  char v23 = 0;
  unint64_t v13 = sub_8D7730(a1[12], (uint64_t)v21);
  sub_5F41E8(a2, (uint64_t)v13);
  std::string __p = 0;
  uint64_t v19 = 0;
  long long v20 = 0;
  if (v8 != v7)
  {
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v8 - v7) >> 2)) >> 62) {
      sub_2E00();
    }
    std::string v14 = (char *)operator new(0xB6DB6DB6DB6DB6DCLL * ((v8 - v7) >> 2));
    std::string __p = v14;
    uint64_t v19 = v14;
    long long v20 = &v14[0xB6DB6DB6DB6DB6DCLL * ((v8 - v7) >> 2)];
    unint64_t v15 = v7;
    do
    {
      int v16 = *((_DWORD *)v15 + 1);
      if (v16 == 0x7FFFFFFF) {
        int v16 = *(_DWORD *)v15;
      }
      int v27 = v16;
      std::string v14 = sub_935E5C(&__p, v14, &v27) + 4;
      v15 += 28;
    }
    while (v15 != v8);
  }
  uint64_t v17 = sub_9E086C((uint64_t)a1, a1[9]);
  sub_5F6000(a2, (long long *)&qword_25D60C8, &__p, v17, 0);
  if (__p)
  {
    uint64_t v19 = __p;
    operator delete(__p);
  }
  if (v24 < 0) {
    operator delete(v21[0]);
  }
  if (v7) {
    operator delete(v7);
  }
}

void sub_941A50(_Unwind_Exception *a1)
{
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_941A64(_Unwind_Exception *a1)
{
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_941A78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (__p)
  {
    operator delete(__p);
    if ((a18 & 0x80000000) == 0)
    {
LABEL_3:
      if (!v19) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a18 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a13);
  if (!v19)
  {
LABEL_4:
    sub_4D4B58(v18);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(v19);
  sub_4D4B58(v18);
  _Unwind_Resume(a1);
}

void sub_941AEC(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *((unsigned char *)&v13.__r_.__value_.__s + 23) = 8;
  strcpy((char *)&v13, "Take the");
  if (a2 == 1)
  {
    if (*(_DWORD *)(a1 + 128) == 2) {
      int v5 = "Board the";
    }
    else {
      int v5 = "Transfer to the";
    }
    std::string::assign(&v13, v5);
  }
  sub_9E0CE0(a1, *(void *)(a1 + 72), 0, (uint64_t)&v11);
  if (*(unsigned char *)(a1 + 216))
  {
    long long __p = 0uLL;
    uint64_t v10 = 0;
  }
  else
  {
    sub_9DBE78(a1, (uint64_t)&__p);
  }
  sub_9E1568((void *)a1, (uint64_t)&v13, (long long **)&v11, &__p, *(unsigned __int16 *)(a1 + 132), *(unsigned __int8 *)(a1 + 217), a3);
  if (SHIBYTE(v10) < 0) {
    operator delete((void *)__p);
  }
  int v6 = v11;
  if (v11)
  {
    uint64_t v7 = (uint64_t)v12;
    int v8 = v11;
    if (v12 != v11)
    {
      do
        uint64_t v7 = sub_52FAE0(v7 - 160);
      while ((void *)v7 != v6);
      int v8 = v11;
    }
    int v12 = v6;
    operator delete(v8);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
}

void sub_941C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  sub_9337A0(&a16);
  if (*(char *)(v16 - 17) < 0) {
    operator delete(*(void **)(v16 - 40));
  }
  _Unwind_Resume(a1);
}

void sub_941C6C(uint64_t *a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (a2 == 2 && a3 == 2)
  {
    if (*(_DWORD *)(a1[9] + 1008) == 3
      && (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1[70] + 8) - *(void *)a1[70]) >> 2)) >= 2)
    {
      sub_941878(a1, a4);
      return;
    }
LABEL_22:
    sub_9E034C(a1, a2, a3, a4);
    return;
  }
  if (a2 != 2 || a3)
  {
    if (a2 == 1 && !a3)
    {
      uint64_t v8 = a1[9];
      if (*(void *)(v8 + 2200) != *(void *)(v8 + 2208))
      {
        sub_9E0CE0((uint64_t)a1, v8, 0, (uint64_t)&__p);
        BOOL v9 = sub_9E145C((uint64_t)a1, (uint64_t *)&__p);
        uint64_t v10 = __p;
        if (__p)
        {
          uint64_t v11 = (uint64_t)v14;
          int v12 = __p;
          if (v14 != __p)
          {
            do
              uint64_t v11 = sub_52FAE0(v11 - 160);
            while ((void *)v11 != v10);
            int v12 = __p;
          }
          std::string v14 = v10;
          operator delete(v12);
        }
        if (!v9)
        {
          sub_941AEC((uint64_t)a1, 1, a4);
          return;
        }
      }
    }
    goto LABEL_22;
  }

  sub_941AEC((uint64_t)a1, 2, a4);
}

void sub_941E24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_9337A0((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_941E38(uint64_t a1)
{
  if (sub_9E0C70(a1))
  {
    LODWORD(result) = sub_9E0C9C(a1);
    if ((int)result <= 600) {
      return 600;
    }
    else {
      return result;
    }
  }
  else
  {
    LODWORD(result) = sub_9E0C84(a1);
    if ((int)result <= 600) {
      return 600;
    }
    else {
      return result;
    }
  }
}

uint64_t sub_941E94@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = a1[9];
  if (!*(unsigned char *)(v3 + 792))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  sub_5F3B74((uint64_t)a2, (__int16 *)(a1[11] + 1177));
  uint64_t v5 = a1[12];
  char v13 = 21;
  strcpy(__p, "Every {TripFrequency}");
  int v6 = sub_8D7730(v5, (uint64_t)__p);
  sub_5F41E8((uint64_t)a2, (uint64_t)v6);
  uint64_t v7 = v3 + 144;
  if (v13 < 0) {
    operator delete(*(void **)__p);
  }
  uint64_t v8 = (int *)nullsub_1(v3 + 144);
  BOOL v9 = (int *)sub_BBB4(v7);
  return sub_5F3EF4(a2, (uint64_t)&qword_25D5F00, v8, v9);
}

void sub_941FA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_4D4B58(v14);
    _Unwind_Resume(a1);
  }
  sub_4D4B58(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_941FDC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_5F3B34(a2);
  uint64_t result = sub_5F3B34(a2 + 160);
  *(unsigned char *)(a2 + 320) = 0;
  switch(*(_DWORD *)(a1[9] + 1008))
  {
    case 1:
    case 3:
      uint64_t v5 = (long long *)sub_924110((uint64_t)a1);
      long long v6 = *v5;
      *(_OWORD *)((char *)&v19[1] + 4) = *(long long *)((char *)v5 + 12);
      *(_OWORD *)uint64_t v19 = v6;
      uint64_t v7 = sub_923BE0((uint64_t)a1);
      sub_9DF2A4((uint64_t)a1, (int *)v19, v7, 0, 0, 0, 1, (uint64_t)v20);
      sub_4D90B4(a2, (uint64_t)v20);
      sub_4D4B58((uint64_t)v20);
      sub_9DF544((uint64_t)a1, (uint64_t)v19, v7, (uint64_t)v20);
      sub_4D90B4(a2 + 160, (uint64_t)v20);
      return sub_4D4B58((uint64_t)v20);
    case 2:
      sub_941E94(a1, v20);
      sub_4D90B4(a2, (uint64_t)v20);
      uint64_t result = sub_4D4B58((uint64_t)v20);
      uint64_t v8 = a1[9];
      if (!*(unsigned char *)(v8 + 792))
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_2439078;
      }
      if (*(unsigned char *)(v8 + 512) != 4) {
        return result;
      }
      sub_5F3B74(result, (__int16 *)(a1[11] + 1177));
      uint64_t v9 = a1[9];
      if (!*(unsigned char *)(v9 + 792))
      {
        uint64_t v14 = __cxa_allocate_exception(8uLL);
        void *v14 = &off_2439078;
      }
      sub_98E840(*(unsigned __int8 *)(v9 + 512), a1[12], (uint64_t)v20, 0, 0x7FFFFFFF);
      sub_52FD00(a2 + 160, (uint64_t)v20);
      return sub_4D4B58((uint64_t)v20);
    case 4:
      sub_5F3B74((uint64_t)v20, (__int16 *)(a1[11] + 1177));
      sub_941E94(a1, v19);
      uint64_t v10 = (uint64_t *)a1[70];
      v15[23] = 15;
      strcpy(v15, "{CountdownList}");
      v18[23] = 20;
      strcpy(v18, "Now, {CountdownList}");
      char v17 = 3;
      LODWORD(__p) = 7827278;
      uint64_t v11 = a1[12];
      int v12 = (long long *)sub_923BE0((uint64_t)a1);
      sub_98E460(v10, (uint64_t)v15, (uint64_t)v18, (uint64_t)&__p, v11, (uint64_t)v20, 0, (uint64_t)v19, v12, (uint64_t)&word_25D61E8);
    default:
      return result;
  }
}

void sub_942398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,char a48)
{
  sub_4D4B58(v49);
  sub_4D4B58(v48);
  _Unwind_Resume(a1);
}

void sub_942450(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_4D4B58((uint64_t)va);
  JUMPOUT(0x94245CLL);
}

uint64_t sub_942494(uint64_t a1, int a2, int a3)
{
  if ((a2 - 4) >= 2)
  {
    if (a2 == 6)
    {
      if (!sub_9E0C70(a1)) {
        return 0;
      }
    }
    else
    {
      uint64_t v6 = 0;
      if (a2 != 2 || a3 != 2) {
        return v6;
      }
      if (*(_DWORD *)(*(void *)(a1 + 72) + 1008) != 3) {
        return 0;
      }
    }
  }
  uint64_t v7 = *(void *)(a1 + 72);
  switch(*(_DWORD *)(v7 + 1008))
  {
    case 1:
      goto LABEL_17;
    case 2:
      if (!*(unsigned char *)(v7 + 792)) {
        goto LABEL_26;
      }
      BOOL v8 = *(unsigned char *)(v7 + 512) == 4;
      goto LABEL_19;
    case 3:
      if (a2 == 2 && a3 == 2)
      {
        sub_941610(a1, (char **)__p);
        uint64_t v6 = sub_97CA20(__p);
        if (!__p[0]) {
          return v6;
        }
        __p[1] = __p[0];
        operator delete(__p[0]);
        uint64_t result = v6;
      }
      else
      {
LABEL_17:
        if (!*(unsigned char *)(v7 + 792))
        {
LABEL_26:
          exception = __cxa_allocate_exception(8uLL);
          void *exception = &off_2439078;
        }
        BOOL v8 = *(unsigned char *)(v7 + 124) == 1;
LABEL_19:
        uint64_t v10 = v8;
        uint64_t result = v10;
      }
      break;
    case 4:
      uint64_t v11 = *(void **)(a1 + 560);
      return sub_97CA20(v11);
    default:
      return 0;
  }
  return result;
}

void sub_942664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_942690(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_5F3B74((uint64_t)a2, (__int16 *)(*(void *)(a1 + 88) + 1177));
  unsigned int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 128))(a1);
  long long v24 = 0uLL;
  std::string::size_type v25 = 0;
  switch(*(_DWORD *)(a1 + 540))
  {
    case 0:
    case 3:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 4;
      strcpy((char *)&__p, "Stop");
      sub_9DF7FC(a1, v4, (uint64_t)v22);
      goto LABEL_5;
    case 1:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&__p, "Station");
      sub_9DF7FC(a1, v4, (uint64_t)v22);
      goto LABEL_5;
    case 2:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 8;
      strcpy((char *)&__p, "Terminal");
      sub_9DF7FC(a1, v4, (uint64_t)v22);
LABEL_5:
      if (SHIBYTE(v25) < 0) {
        operator delete((void *)v24);
      }
      long long v24 = *(_OWORD *)v22;
      std::string::size_type v25 = v23;
      HIBYTE(v23) = 0;
      LOBYTE(v22[0]) = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      break;
    default:
      break;
  }
  std::operator+<char>();
  uint64_t v5 = std::string::append(&__p, ", {LegDuration}");
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  std::string::size_type v23 = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)__int16 v22 = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v7 = sub_8D7730(*(void *)(a1 + 96), (uint64_t)v22);
  if (*((char *)v7 + 23) < 0)
  {
    sub_4200(&__p, (void *)*v7, v7[1]);
  }
  else
  {
    long long v8 = *(_OWORD *)v7;
    __p.__r_.__value_.__r.__words[2] = v7[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
  }
  unsigned int v20 = 2104782453;
  uint64_t v19 = *(void *)"{StopsCount}";
  std::to_string(&v18, v4);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  int64_t size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    int64_t size = __p.__r_.__value_.__l.__size_;
  }
  if (size >= 12)
  {
    uint64_t v11 = (char *)p_p + size;
    int v12 = p_p;
    do
    {
      char v13 = (char *)memchr(v12, 123, size - 11);
      if (!v13) {
        break;
      }
      if (*(void *)v13 == v19 && *((_DWORD *)v13 + 2) == (unint64_t)v20)
      {
        if (v13 != v11 && v13 - (char *)p_p != -1)
        {
          if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v15 = &v18;
          }
          else {
            unint64_t v15 = (std::string *)v18.__r_.__value_.__r.__words[0];
          }
          if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v16 = HIBYTE(v18.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v16 = v18.__r_.__value_.__l.__size_;
          }
          std::string::replace(&__p, v13 - (char *)p_p, 0xCuLL, (const std::string::value_type *)v15, v16);
        }
        break;
      }
      int v12 = (std::string *)(v13 + 1);
      int64_t size = v11 - (char *)v12;
    }
    while (v11 - (char *)v12 >= 12);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  sub_5F41E8((uint64_t)a2, (uint64_t)&__p);
  int v17 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1);
  sub_5F657C(a2, (uint64_t)&qword_25D60E0, v17);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v23) & 0x80000000) == 0)
    {
LABEL_41:
      if ((SHIBYTE(v25) & 0x80000000) == 0) {
        return;
      }
LABEL_45:
      operator delete((void *)v24);
      return;
    }
  }
  else if ((SHIBYTE(v23) & 0x80000000) == 0)
  {
    goto LABEL_41;
  }
  operator delete(v22[0]);
  if (SHIBYTE(v25) < 0) {
    goto LABEL_45;
  }
}

void sub_942A08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a23 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a30 & 0x80000000) == 0)
      {
LABEL_8:
        if (*(char *)(v31 - 41) < 0) {
          operator delete(*(void **)(v31 - 64));
        }
        sub_4D4B58(v30);
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(a25);
      goto LABEL_8;
    }
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a18);
  if ((a30 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

uint64_t sub_942AE0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 96);
  std::string __p = operator new(0x20uLL);
  long long v13 = xmmword_20B8E90;
  strcpy((char *)__p, "Scheduled every {TripFrequency}");
  uint64_t v5 = sub_8D7730(v4, (uint64_t)&__p);
  if (SHIBYTE(v13) < 0) {
    operator delete(__p);
  }
  sub_5F41E8((uint64_t)a2, (uint64_t)v5);
  uint64_t v6 = *(void *)(a1 + 72);
  if (!*(unsigned char *)(v6 + 792))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  uint64_t v7 = v6 + 144;
  long long v8 = (int *)nullsub_1(v6 + 144);
  uint64_t v9 = (int *)sub_BBB4(v7);
  return sub_5F3EF4(a2, (uint64_t)&qword_25D5F00, v8, v9);
}

void sub_942BF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_942C14@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_5F3B74((uint64_t)v43, (__int16 *)(a1[11] + 1177));
  sub_5F7A30(v4, (const std::string *)&dword_25D5E58, (const std::string *)&word_25D61E8);
  memset(&v42, 0, sizeof(v42));
  uint64_t v5 = sub_923BE0((uint64_t)a1);
  uint64_t v6 = a1[9];
  uint64_t v7 = (long long *)v5;
  switch(*(_DWORD *)(v6 + 1008))
  {
    case 1:
      uint64_t v8 = sub_924110((uint64_t)a1);
      int v9 = *(_DWORD *)v8;
      int v10 = *(_DWORD *)(v8 + 4);
      if (*(unsigned char *)(v8 + 8))
      {
        int v11 = *(unsigned __int8 *)(v8 + 9);
        if (v11 == 1)
        {
          unsigned int v12 = 5;
        }
        else if (v11 == 2)
        {
          unsigned int v12 = 4;
        }
        else if ((int)fabs((double)(10 * (v9 - v10))) < 600)
        {
          unsigned int v12 = 1;
        }
        else if (v9 >= v10)
        {
          unsigned int v12 = 2;
        }
        else
        {
          unsigned int v12 = 3;
        }
        long long v24 = (long long *)&unk_25D60B0;
      }
      else
      {
        unsigned int v12 = 0;
        long long v24 = (long long *)&qword_25D5F60;
      }
      if (v10 != 0x7FFFFFFF) {
        int v9 = *(_DWORD *)(v8 + 4);
      }
      LODWORD(__p) = v9;
      sub_5F5F70((uint64_t)v43, v24, &__p, (uint64_t)v7, 0);
      sub_98ED08((uint64_t)v43, v12);
      switch(v12)
      {
        case 0u:
          std::string::assign(&v42, "Scheduled at {DepartureTime}");
          goto LABEL_24;
        case 1u:
          uint64_t v26 = a1[12];
          HIBYTE(v41) = 7;
          strcpy((char *)&__p, "On-time");
          int v27 = sub_8D7730(v26, (uint64_t)&__p);
          sub_5F4680((uint64_t)v43, (uint64_t)v27, (uint64_t)&word_25D61E8, 1);
          if (SHIBYTE(v41) < 0) {
            operator delete(__p);
          }
          int v14 = 1;
          sub_5F4680((uint64_t)v43, (uint64_t)&unk_25D60B0, (uint64_t)&word_25D61E8, 1);
          goto LABEL_50;
        case 2u:
        case 3u:
          std::string::assign(&v42, "Now {LiveDepartureTime}");
          int v14 = 2;
          std::string::size_type size = HIBYTE(v42.__r_.__value_.__r.__words[2]);
          if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type size = v42.__r_.__value_.__l.__size_;
          }
          if (!size) {
            goto LABEL_54;
          }
          goto LABEL_53;
        case 4u:
          sub_9E0A88((uint64_t)a1, (uint64_t)&__p);
          sub_4F58AC(a2, (uint64_t)&__p);
          goto LABEL_59;
        case 5u:
          sub_9E098C((uint64_t)a1, *(void *)(a1[9] + 56), (uint64_t)&__p);
          sub_4F58AC(a2, (uint64_t)&__p);
          goto LABEL_59;
        default:
          goto LABEL_24;
      }
    case 2:
      if (!*(unsigned char *)(v6 + 792))
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_2439078;
      }
      if (*(unsigned char *)(v6 + 512) == 4) {
        sub_98E840(4, a1[12], (uint64_t)v43, 0, 0x7FFFFFFF);
      }
      sub_942AE0((uint64_t)a1, v43);
      goto LABEL_24;
    case 3:
      if (!*(unsigned char *)(v6 + 792))
      {
        uint64_t v31 = __cxa_allocate_exception(8uLL);
        *uint64_t v31 = &off_2439078;
      }
      unsigned int v13 = *(unsigned __int8 *)(v6 + 512);
      sub_98E840(v13, a1[12], (uint64_t)v43, 0, 0x7FFFFFFF);
      if (sub_97CA20((void *)a1[70]))
      {
        int v14 = sub_98E81C(v13);
        unint64_t v15 = (uint64_t *)a1[70];
        uint64_t v16 = *v15;
        uint64_t v17 = v15[1];
        v40 = 0;
        v41 = 0;
        std::string __p = 0;
        if (v17 != v16)
        {
          if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v17 - v16) >> 2)) >> 62) {
            sub_2E00();
          }
          std::string v18 = (char *)operator new(0xB6DB6DB6DB6DB6DCLL * ((v17 - v16) >> 2));
          std::string __p = v18;
          v40 = v18;
          v41 = &v18[0xB6DB6DB6DB6DB6DCLL * ((v17 - v16) >> 2)];
          do
          {
            *(_DWORD *)v37 = *(_DWORD *)(v16 + 4);
            std::string v18 = sub_935E5C(&__p, v18, v37) + 4;
            v16 += 28;
          }
          while (v16 != v17);
        }
        sub_5F4680((uint64_t)v43, (uint64_t)&qword_25D60C8, (uint64_t)&word_25D61E8, v14);
        sub_5F6000((uint64_t)v43, (long long *)&qword_25D60C8, &__p, (uint64_t)v7, 0);
        if (__p)
        {
          v40 = __p;
          operator delete(__p);
          std::string::size_type v19 = HIBYTE(v42.__r_.__value_.__r.__words[2]);
          if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v19 = v42.__r_.__value_.__l.__size_;
          }
          if (!v19)
          {
LABEL_54:
            sub_4F58AC(a2, (uint64_t)v43);
            *(unsigned char *)(a2 + 160) = 0;
            if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              return sub_4D4B58((uint64_t)v43);
            }
            goto LABEL_55;
          }
        }
        else
        {
LABEL_50:
          std::string::size_type v28 = HIBYTE(v42.__r_.__value_.__r.__words[2]);
          if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v28 = v42.__r_.__value_.__l.__size_;
          }
          if (!v28) {
            goto LABEL_54;
          }
        }
LABEL_53:
        int v29 = sub_8D7730(a1[12], (uint64_t)&v42);
        sub_5F4680((uint64_t)v43, (uint64_t)v29, (uint64_t)&word_25D61E8, v14);
        goto LABEL_54;
      }
      (*(void (**)(void **__return_ptr, void *))(*a1 + 152))(&__p, a1);
      sub_4F58AC(a2, (uint64_t)&__p);
LABEL_59:
      *(unsigned char *)(a2 + 160) = 0;
      sub_4D4B58((uint64_t)&__p);
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
LABEL_55:
      }
        operator delete(v42.__r_.__value_.__l.__data_);
      return sub_4D4B58((uint64_t)v43);
    case 4:
      if (*(unsigned char *)(v6 + 792))
      {
        unsigned int v20 = *(unsigned __int8 *)(v6 + 512);
        if (sub_97CA20((void *)a1[70])) {
          int v21 = sub_98E81C(v20);
        }
        else {
          int v21 = 0;
        }
        sub_98E840(v20, a1[12], (uint64_t)v43, 0, 0x7FFFFFFF);
        sub_5F3BA0((uint64_t)&__p, (__int16 *)(a1[11] + 1177), (long long *)&dword_25D5E58);
        sub_942AE0((uint64_t)a1, (uint64_t *)&__p);
        std::string::size_type v23 = (uint64_t *)a1[70];
        char v38 = 15;
        strcpy(v37, "{CountdownList}");
        v36[23] = 20;
        strcpy(v36, "Now, {CountdownList}");
        char v35 = 3;
        LODWORD(v34) = 7827278;
        sub_98E460(v23, (uint64_t)v37, (uint64_t)v36, (uint64_t)&v34, a1[12], (uint64_t)v43, v21, (uint64_t)&__p, v7, (uint64_t)&word_25D61E8);
      }
      v32 = __cxa_allocate_exception(8uLL);
      void *v32 = &off_2439078;
    default:
LABEL_24:
      int v14 = 0;
      std::string::size_type v22 = HIBYTE(v42.__r_.__value_.__r.__words[2]);
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v22 = v42.__r_.__value_.__l.__size_;
      }
      if (!v22) {
        goto LABEL_54;
      }
      goto LABEL_53;
  }
}

void sub_9432F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  sub_4D4B58((uint64_t)&__p);
  if (*(char *)(v36 - 225) < 0) {
    operator delete(*(void **)(v36 - 248));
  }
  sub_4D4B58(v36 - 224);
  _Unwind_Resume(a1);
}

void *sub_94341C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result = (void *)sub_9241F0(a1, a2, a3);
  void *result = off_243C3E0;
  return result;
}

uint64_t sub_943450@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_5F3B34(a2);
  sub_5F3B34(a2 + 160);
  *(unsigned char *)(a2 + 320) = 0;
  if (!sub_9E0C70(a1)) {
    goto LABEL_4;
  }
  uint64_t v4 = *(void *)(a1 + 72);
  if (!*(unsigned char *)(v4 + 792))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  uint64_t v5 = (int *)(v4 + 88);
  if (*(_DWORD *)(v4 + 88) != 0x7FFFFFFF)
  {
    int v9 = (const char *)sub_9E086C(a1, v4);
    sub_9DF2A4(a1, v5, (uint64_t)v9, 0, 1, 1, 0, (uint64_t)v11);
    sub_4D90B4(a2, (uint64_t)v11);
    sub_4D4B58((uint64_t)v11);
    v11[0] = sub_925128(a1);
    uint64_t result = sub_26710((const char *)(a1 + 512), v11, v9, (int *)(*(void *)(a1 + 72) + 40));
    if ((result & 1) == 0)
    {
      sub_9DF2A4(a1, v5, (uint64_t)v9, 9, 1, 1, 0, (uint64_t)v11);
      sub_4D90B4(a2 + 160, (uint64_t)v11);
      return sub_4D4B58((uint64_t)v11);
    }
  }
  else
  {
LABEL_4:
    int v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_25D5B78, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_25D5B78))
    {
      sub_5E5C(qword_25D62F0, "{t}");
      __cxa_guard_release(&qword_25D5B78);
    }
    sub_5F3D7C((uint64_t)v11, (uint64_t)qword_25D62F0, (__int16 *)(*(void *)(a1 + 88) + 1177));
    sub_4D90B4(a2, (uint64_t)v11);
    sub_4D4B58((uint64_t)v11);
    if (v6 <= 600) {
      int v7 = 600;
    }
    else {
      int v7 = v6;
    }
    uint64_t result = sub_5F657C((uint64_t *)a2, (uint64_t)qword_25D62F0, v7);
    *(unsigned char *)(a2 + 320) = 1;
  }
  return result;
}

void sub_943694(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25D5B78);
  sub_4D4B58(v2);
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_9436BC(_Unwind_Exception *a1)
{
  sub_4D4B58(v2);
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_943708(uint64_t *a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (a2 == 2 && a3 == 1)
  {
    sub_5F3B34(a4);
  }
  else
  {
    if (a3 != 2) {
      goto LABEL_15;
    }
    uint64_t v8 = a1[9];
    if (!*(unsigned char *)(v8 + 792))
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_2439078;
    }
    if (sub_9E0C70((uint64_t)a1)
      && *(_DWORD *)(v8 + 88) != 0x7FFFFFFF
      && *(unsigned char *)(v8 + 96)
      && *(unsigned char *)(v8 + 97) == 1)
    {
      unint64_t v9 = *(void *)(a1[9] + 56);
      sub_9E098C((uint64_t)a1, v9, a4);
    }
    else
    {
LABEL_15:
      sub_9E034C(a1, a2, a3, a4);
    }
  }
}

uint64_t sub_943854@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_924AFC(a1, (uint64_t)v4);
  sub_4F58AC(a2, (uint64_t)v4);
  *(unsigned char *)(a2 + 160) = 0;
  return sub_4D4B58((uint64_t)v4);
}

void sub_94389C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_9438B0(uint64_t a1, int a2, int a3)
{
  if ((a2 & 0xFFFFFFFE) == 4 || (BOOL result = 0, a2 == 2) && a3 == 2)
  {
    BOOL result = sub_9E0C70(a1);
    if (result)
    {
      uint64_t v5 = *(void *)(a1 + 72);
      if (!*(unsigned char *)(v5 + 792))
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_2439078;
      }
      return *(unsigned char *)(v5 + 96) == 1;
    }
  }
  return result;
}

BOOL sub_943954(uint64_t a1, int a2, int a3)
{
  return a2 == 2 && a3 == 2;
}

uint64_t sub_943964(uint64_t a1)
{
  if (sub_9E0C70(a1))
  {
    LODWORD(result) = sub_9E0C9C(a1);
    if ((int)result <= 600) {
      return 600;
    }
    else {
      return result;
    }
  }
  else
  {
    LODWORD(result) = sub_9E0C84(a1);
    if ((int)result <= 600) {
      return 600;
    }
    else {
      return result;
    }
  }
}

uint64_t sub_9439C0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 72);
  if (!*(unsigned char *)(v1 + 792))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  unsigned int v2 = *(_DWORD *)(v1 + 88);
  if (v2 == 0x7FFFFFFF) {
    return *(unsigned int *)(v1 + 40);
  }
  unsigned int v4 = *(_DWORD *)(v1 + 92);
  if (v4 == 0x7FFFFFFF) {
    return v2;
  }
  else {
    return v4;
  }
}

uint64_t sub_943A48(uint64_t a1, uint64_t a2, void *a3)
{
  unsigned int v4 = (void *)sub_9DCD3C(a1, a2, a3);
  *unsigned int v4 = &off_243C4A0;
  uint64_t v5 = *(_DWORD **)(v4[4] - 8);
  if (*v5 == 2)
  {
    sub_9DD7CC((uint64_t)v5, (uint64_t)__p);
    int v6 = (void **)(a1 + 360);
    if (*(char *)(a1 + 383) < 0) {
      operator delete(*v6);
    }
    *(_OWORD *)int v6 = *(_OWORD *)__p;
    *(void *)(a1 + 376) = v17;
    HIBYTE(v17) = 0;
    LOBYTE(__p[0]) = 0;
    *(unsigned char *)(a1 + 384) = v18;
    int v7 = (void **)(a1 + 392);
    if (*(char *)(a1 + 415) < 0)
    {
      operator delete(*v7);
      int v8 = SHIBYTE(v17);
      *(_OWORD *)int v7 = v19;
      *(void *)(a1 + 408) = v20;
      HIBYTE(v20) = 0;
      LOBYTE(v19) = 0;
      if (v8 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      *(_OWORD *)int v7 = v19;
      *(void *)(a1 + 408) = v20;
    }
  }
  uint64_t v9 = *(void *)(a1 + 72);
  if (!*(unsigned char *)(v9 + 792))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  if (*(unsigned char *)(v9 + 157)) {
    return a1;
  }
  uint64_t v12 = *(void *)(a1 + 24);
  uint64_t v11 = *(void *)(a1 + 32);
  while (v11 != v12)
  {
    int v14 = *(_DWORD **)(v11 - 8);
    v11 -= 8;
    unsigned int v13 = v14;
    if (*v14 == 2) {
      goto LABEL_16;
    }
  }
  unsigned int v13 = *(_DWORD **)(v12 - 8);
LABEL_16:
  *(_DWORD *)(a1 + 248) = v13[252];
  return a1;
}

void sub_943BD0(_Unwind_Exception *a1)
{
  sub_921ED8(v1);
  _Unwind_Resume(a1);
}

void sub_943BE4(_Unwind_Exception *a1)
{
  sub_921ED8(v1);
  _Unwind_Resume(a1);
}

BOOL sub_943BFC(uint64_t a1, int a2)
{
  return a2 == 2;
}

void sub_943C08(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 32);
  if (**(_DWORD **)(v6 - 8) != 2) {
    goto LABEL_12;
  }
  if (a2 == 2 && !a3)
  {
    char v11 = 12;
    strcpy((char *)__p, "Transit_Stop");
    sub_922B88((char *)a4, (long long *)__p);
    goto LABEL_5;
  }
  if (a2 != 2 || a3 != 1)
  {
LABEL_12:
    if (a2 != 2 || a3 != 2) {
      goto LABEL_21;
    }
    uint64_t v7 = *(void *)(a1 + 72);
    if (*(unsigned char *)(v7 + 792))
    {
      if (*(unsigned char *)(v7 + 157) || !sub_9E0C70(a1)) {
        goto LABEL_21;
      }
      uint64_t v8 = *(void *)(a1 + 72);
      if (*(unsigned char *)(v8 + 792))
      {
        if (*(_DWORD *)(v8 + 116) != 0x7FFFFFFF && *(unsigned char *)(v8 + 124) && *(unsigned char *)(v8 + 125) == 1)
        {
          sub_9E098C(a1, *(void *)(v8 + 48), (uint64_t)__p);
          sub_943E54((_OWORD *)a4, (uint64_t)__p);
          sub_4D4B58((uint64_t)__p);
          return;
        }
        goto LABEL_21;
      }
    }
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  if (sub_9DD8A8(a1, *(void *)(v6 - 8)))
  {
    sub_9DD8F0((char *)a1, *(void *)(v6 - 8), *(void *)(*(void *)(a1 + 72) + 48), (uint64_t)__p);
    sub_922B88((char *)a4, (long long *)__p);
LABEL_5:
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    return;
  }
LABEL_21:
  *(_OWORD *)(a4 + 208) = 0u;
  *(_OWORD *)(a4 + 224) = 0u;
  *(_OWORD *)(a4 + 176) = 0u;
  *(_OWORD *)(a4 + 192) = 0u;
  *(_OWORD *)(a4 + 144) = 0u;
  *(_OWORD *)(a4 + 160) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 128) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;

  sub_922B20((_OWORD *)a4);
}

void sub_943E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_943E34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_943E54(_OWORD *a1, uint64_t a2)
{
  *(_OWORD *)((char *)a1 + 57) = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  sub_4F58AC((uint64_t)(a1 + 5), a2);
  return a1;
}

void sub_943E90(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 48);
  if (v3) {
    sub_20AC520(v1, v3);
  }
  sub_20AC494((uint64_t *)(v1 + 24), v1);
  _Unwind_Resume(a1);
}

uint64_t sub_943EBC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[9];
  if (!*(unsigned char *)(v3 + 792))
  {
LABEL_32:
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  if (*(unsigned char *)(v3 + 157))
  {
    *(void *)(a2 + 320) = 0;
    *(_OWORD *)(a2 + 288) = 0u;
    *(_OWORD *)(a2 + 304) = 0u;
    *(_OWORD *)(a2 + 256) = 0u;
    *(_OWORD *)(a2 + 272) = 0u;
    *(_OWORD *)(a2 + 224) = 0u;
    *(_OWORD *)(a2 + 240) = 0u;
    *(_OWORD *)(a2 + 192) = 0u;
    *(_OWORD *)(a2 + 208) = 0u;
    *(_OWORD *)(a2 + 176) = 0u;
    *(_OWORD *)(a2 + 128) = 0u;
    *(_OWORD *)(a2 + 144) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_OWORD *)(a2 + 112) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 160) = 0u;
    sub_5F3B34(a2);
    uint64_t result = sub_5F3B34(a2 + 160);
    *(unsigned char *)(a2 + 320) = 0;
    return result;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = a1[4];
  do
  {
    if (v8 == a1[3]) {
      break;
    }
    int v10 = *(_DWORD **)(v8 - 8);
    v8 -= 8;
    uint64_t v9 = v10;
    int v11 = *v10;
    if (!v7)
    {
      if (v11 == 3)
      {
        if (!*((unsigned char *)v9 + 792)) {
          goto LABEL_32;
        }
        if (*((unsigned char *)v9 + 157)) {
          uint64_t v7 = 0;
        }
        else {
          uint64_t v7 = (uint64_t)v9;
        }
      }
      else
      {
        uint64_t v7 = 0;
      }
    }
    if (v11 == 3) {
      uint64_t v6 = v9;
    }
  }
  while (v11 != 2);
  sub_5F3B34(a2);
  sub_5F3B34(a2 + 160);
  *(unsigned char *)(a2 + 320) = 0;
  uint64_t result = sub_9E0C70((uint64_t)a1);
  if (result)
  {
    uint64_t v12 = a1[9];
    if (v7)
    {
      if (*(unsigned char *)(v12 + 792))
      {
        unsigned int v13 = (_OWORD *)(v12 + 88);
        goto LABEL_29;
      }
    }
    else if (*(unsigned char *)(v12 + 792))
    {
      unsigned int v13 = (_OWORD *)(v12 + 116);
LABEL_29:
      *(_OWORD *)std::string::size_type v22 = *v13;
      *(_OWORD *)&v22[3] = *(_OWORD *)((char *)v13 + 12);
      uint64_t v17 = (const char *)sub_9E086C((uint64_t)a1, v12);
      sub_9DF2A4((uint64_t)a1, v22, (uint64_t)v17, 0, 1, 1, 0, (uint64_t)v21);
      sub_4D90B4(a2, (uint64_t)v21);
      uint64_t result = sub_4D4B58((uint64_t)v21);
      if (v7)
      {
        char v18 = (const char *)sub_9E086C((uint64_t)a1, v7);
        uint64_t result = sub_26710(v18, (int *)(v7 + 40), v17, (int *)(a1[9] + 40));
        if ((result & 1) == 0)
        {
          sub_9DF2A4((uint64_t)a1, v22, (uint64_t)v17, 9, 1, 1, 0, (uint64_t)v21);
          sub_4D90B4(a2 + 160, (uint64_t)v21);
          return sub_4D4B58((uint64_t)v21);
        }
      }
      return result;
    }
    uint64_t v20 = __cxa_allocate_exception(8uLL);
    *uint64_t v20 = &off_2439078;
  }
  if (v6)
  {
    int v14 = *(_DWORD *)(a1[9] + 40);
    int v15 = v6[10];
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_25D5B80, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_25D5B80))
    {
      sub_5E5C(qword_25D6308, "{t}");
      __cxa_guard_release(&qword_25D5B80);
    }
    sub_5F3D7C((uint64_t)v21, (uint64_t)qword_25D6308, (__int16 *)(a1[11] + 1177));
    sub_4D90B4(a2, (uint64_t)v21);
    sub_4D4B58((uint64_t)v21);
    if (10 * (v14 - v15) <= 600) {
      int v16 = 600;
    }
    else {
      int v16 = 10 * (v14 - v15);
    }
    return sub_5F657C((uint64_t *)a2, (uint64_t)qword_25D6308, v16);
  }
  return result;
}

void sub_9441F4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25D5B80);
  sub_4D4B58(v2);
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_94421C(_Unwind_Exception *a1)
{
  sub_4D4B58(v2);
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

BOOL sub_94426C(uint64_t a1, int a2, int a3)
{
  uint64_t v3 = *(void *)(a1 + 72);
  if (!*(unsigned char *)(v3 + 792)) {
    goto LABEL_14;
  }
  if (*(unsigned char *)(v3 + 157)) {
    return 0;
  }
  if (a2 == 5 || (BOOL result = 0, a2 == 2) && a3 == 2)
  {
    BOOL result = sub_9E0C70(a1);
    if (result)
    {
      uint64_t v6 = *(unsigned __int8 **)(a1 + 72);
      if (**(_DWORD **)(*(void *)(a1 + 32) - 8) == 2)
      {
        if (v6[792]) {
          return v6[124] == 1;
        }
      }
      else if (v6[792])
      {
        return v6[96] == 1;
      }
LABEL_14:
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_2439078;
    }
  }
  return result;
}

BOOL sub_944360(uint64_t a1, int a2, int a3)
{
  return a2 == 2 && a3 == 2;
}

void sub_944374(uint64_t a1)
{
  sub_921ED8(a1);

  operator delete();
}

void sub_9443B0(uint64_t a1)
{
  sub_921ED8(a1);

  operator delete();
}

void sub_9443EC(uint64_t a1)
{
  sub_921ED8(a1);

  operator delete();
}

uint64_t sub_944424(void *a1)
{
  *a1 = off_243B2A0;
  uint64_t v2 = (void *)a1[64];
  if (v2)
  {
    a1[65] = v2;
    operator delete(v2);
  }

  return sub_921ED8((uint64_t)a1);
}

void sub_944484(void *a1)
{
  *a1 = off_243B2A0;
  uint64_t v2 = (void *)a1[64];
  if (v2)
  {
    a1[65] = v2;
    operator delete(v2);
  }
  sub_921ED8((uint64_t)a1);

  operator delete();
}

uint64_t sub_9444F8(uint64_t a1)
{
  uint64_t v1 = a1;
  *(void *)a1 = off_243B358;
  if (*(char *)(a1 + 535) < 0)
  {
    operator delete(*(void **)(a1 + 512));
    a1 = v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  return sub_921ED8(a1);
}

void sub_944578(uint64_t a1)
{
  *(void *)a1 = off_243B358;
  if (*(char *)(a1 + 535) < 0) {
    operator delete(*(void **)(a1 + 512));
  }
  sub_921ED8(a1);

  operator delete();
}

void sub_9445F0(uint64_t a1)
{
  sub_921ED8(a1);

  operator delete();
}

uint64_t *sub_944628(void *a1, char *a2, long long *a3)
{
  uint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v6 = 0;
  *((void *)v6 + 1) = 0;
  uint64_t v7 = sub_944754((void *)v6 + 2, a2, a3);
  int v8 = v6[39];
  if (v8 >= 0) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = (uint64_t *)*((void *)v6 + 2);
  }
  if (v8 >= 0) {
    unint64_t v10 = v6[39];
  }
  else {
    unint64_t v10 = *((void *)v6 + 3);
  }
  *((void *)v6 + 1) = sub_B128((uint64_t)&v14, v9, v10);
  int v11 = sub_31A4E8(a1, (uint64_t)v6);
  if ((v12 & 1) == 0 && v6)
  {
    if (v6[63] < 0)
    {
      operator delete(*((void **)v6 + 5));
      if ((v6[39] & 0x80000000) == 0) {
        goto LABEL_11;
      }
    }
    else if ((v6[39] & 0x80000000) == 0)
    {
LABEL_11:
      operator delete(v6);
      return v11;
    }
    operator delete(*((void **)v6 + 2));
    goto LABEL_11;
  }
  return v11;
}

void sub_944728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_944740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_944754(void *a1, char *__s, long long *a3)
{
  size_t v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v12 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v12 = v6 | 7;
    }
    uint64_t v13 = v12 + 1;
    int v8 = operator new(v12 + 1);
    a1[1] = v7;
    a1[2] = v13 | 0x8000000000000000;
    *a1 = v8;
LABEL_9:
    memmove(v8, __s, v7);
    *((unsigned char *)v8 + v7) = 0;
    uint64_t v9 = (char *)(a1 + 3);
    if ((*((char *)a3 + 23) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  *((unsigned char *)a1 + 23) = v6;
  int v8 = a1;
  if (v6) {
    goto LABEL_9;
  }
  *(unsigned char *)a1 = 0;
  uint64_t v9 = (char *)(a1 + 3);
  if ((*((char *)a3 + 23) & 0x80000000) == 0)
  {
LABEL_5:
    long long v10 = *a3;
    *((void *)v9 + 2) = *((void *)a3 + 2);
    *(_OWORD *)uint64_t v9 = v10;
    return a1;
  }
LABEL_10:
  sub_4200(v9, *(void **)a3, *((void *)a3 + 1));
  return a1;
}

void sub_944854(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_944870(void *a1, char *a2, long long *a3)
{
  size_t v6 = (char *)operator new(0x40uLL);
  *(void *)size_t v6 = 0;
  *((void *)v6 + 1) = 0;
  size_t v7 = sub_94499C((void *)v6 + 2, a2, a3);
  int v8 = v6[39];
  if (v8 >= 0) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = (uint64_t *)*((void *)v6 + 2);
  }
  if (v8 >= 0) {
    unint64_t v10 = v6[39];
  }
  else {
    unint64_t v10 = *((void *)v6 + 3);
  }
  *((void *)v6 + 1) = sub_B128((uint64_t)&v14, v9, v10);
  int v11 = sub_31A4E8(a1, (uint64_t)v6);
  if ((v12 & 1) == 0 && v6)
  {
    if (v6[63] < 0)
    {
      operator delete(*((void **)v6 + 5));
      if ((v6[39] & 0x80000000) == 0) {
        goto LABEL_11;
      }
    }
    else if ((v6[39] & 0x80000000) == 0)
    {
LABEL_11:
      operator delete(v6);
      return v11;
    }
    operator delete(*((void **)v6 + 2));
    goto LABEL_11;
  }
  return v11;
}

void sub_944970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_944988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_94499C(void *a1, char *__s, long long *a3)
{
  size_t v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v12 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v12 = v6 | 7;
    }
    uint64_t v13 = v12 + 1;
    int v8 = operator new(v12 + 1);
    a1[1] = v7;
    a1[2] = v13 | 0x8000000000000000;
    *a1 = v8;
LABEL_9:
    memmove(v8, __s, v7);
    *((unsigned char *)v8 + v7) = 0;
    uint64_t v9 = (char *)(a1 + 3);
    if ((*((char *)a3 + 23) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  *((unsigned char *)a1 + 23) = v6;
  int v8 = a1;
  if (v6) {
    goto LABEL_9;
  }
  *(unsigned char *)a1 = 0;
  uint64_t v9 = (char *)(a1 + 3);
  if ((*((char *)a3 + 23) & 0x80000000) == 0)
  {
LABEL_5:
    long long v10 = *a3;
    *((void *)v9 + 2) = *((void *)a3 + 2);
    *(_OWORD *)uint64_t v9 = v10;
    return a1;
  }
LABEL_10:
  sub_4200(v9, *(void **)a3, *((void *)a3 + 1));
  return a1;
}

void sub_944A9C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_944AB8(void *a1, char *a2, long long *a3)
{
  size_t v6 = (char *)operator new(0x40uLL);
  *(void *)size_t v6 = 0;
  *((void *)v6 + 1) = 0;
  size_t v7 = sub_944BE4((void *)v6 + 2, a2, a3);
  int v8 = v6[39];
  if (v8 >= 0) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = (uint64_t *)*((void *)v6 + 2);
  }
  if (v8 >= 0) {
    unint64_t v10 = v6[39];
  }
  else {
    unint64_t v10 = *((void *)v6 + 3);
  }
  *((void *)v6 + 1) = sub_B128((uint64_t)&v14, v9, v10);
  int v11 = sub_31A4E8(a1, (uint64_t)v6);
  if ((v12 & 1) == 0 && v6)
  {
    if (v6[63] < 0)
    {
      operator delete(*((void **)v6 + 5));
      if ((v6[39] & 0x80000000) == 0) {
        goto LABEL_11;
      }
    }
    else if ((v6[39] & 0x80000000) == 0)
    {
LABEL_11:
      operator delete(v6);
      return v11;
    }
    operator delete(*((void **)v6 + 2));
    goto LABEL_11;
  }
  return v11;
}

void sub_944BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_944BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_944BE4(void *a1, char *__s, long long *a3)
{
  size_t v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v12 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v12 = v6 | 7;
    }
    uint64_t v13 = v12 + 1;
    int v8 = operator new(v12 + 1);
    a1[1] = v7;
    a1[2] = v13 | 0x8000000000000000;
    *a1 = v8;
LABEL_9:
    memmove(v8, __s, v7);
    *((unsigned char *)v8 + v7) = 0;
    uint64_t v9 = (char *)(a1 + 3);
    if ((*((char *)a3 + 23) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  *((unsigned char *)a1 + 23) = v6;
  int v8 = a1;
  if (v6) {
    goto LABEL_9;
  }
  *(unsigned char *)a1 = 0;
  uint64_t v9 = (char *)(a1 + 3);
  if ((*((char *)a3 + 23) & 0x80000000) == 0)
  {
LABEL_5:
    long long v10 = *a3;
    *((void *)v9 + 2) = *((void *)a3 + 2);
    *(_OWORD *)uint64_t v9 = v10;
    return a1;
  }
LABEL_10:
  sub_4200(v9, *(void **)a3, *((void *)a3 + 1));
  return a1;
}

void sub_944CE4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_944D00()
{
  byte_25D5B9F = 1;
  word_25D5B88 = 65;
  byte_25D5BB7 = 1;
  word_25D5BA0 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25D6320 = 0u;
  *(_OWORD *)&qword_25D6330 = 0u;
  dword_25D6340 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25D6320, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25D6320, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25D6320, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25D6320, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25D5BCF = 8;
  strcpy((char *)&qword_25D5BB8, "any_mode");
  byte_25D5BE7 = 7;
  strcpy((char *)&dword_25D5BD0, "cycling");
  byte_25D5BFF = 7;
  strcpy((char *)&dword_25D5BE8, "driving");
  byte_25D5C17 = 7;
  strcpy((char *)&dword_25D5C00, "walking");
  qword_25D5C20 = 0;
  qword_25D5C28 = 0;
  qword_25D5C18 = 0;
  v0 = operator new(9uLL);
  *(void *)v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25D5C18 = (uint64_t)v0;
  qword_25D5C20 = (uint64_t)(v0 + 9);
  qword_25D5C28 = (uint64_t)(v0 + 9);
  qword_25D5C30 = 0;
  qword_25D5C38 = 0;
  unk_25D5C40 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25D5C38 = (uint64_t)(v1 + 9);
  unk_25D5C40 = v1 + 9;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25D5C30 = (uint64_t)v1;
  byte_25D5C5F = 6;
  strcpy((char *)&dword_25D5C48, "{Mode}");
  byte_25D5C77 = 11;
  strcpy((char *)&qword_25D5C60, "{Direction}");
  byte_25D5C8F = 6;
  strcpy((char *)&dword_25D5C78, "{Line}");
  byte_25D5CA7 = 12;
  strcpy((char *)&qword_25D5C90, "{LineNumber}");
  strcpy(&byte_25D5CBF, "\n{Headsign1}");
  strcpy((char *)&qword_25D5CA8, "{Headsign}");
  byte_25D5CD7 = 11;
  byte_25D5CEF = 11;
  strcpy((char *)&qword_25D5CD8, "{Headsign2}");
  byte_25D5D07 = 11;
  strcpy((char *)&qword_25D5CF0, "{Headsign3}");
  byte_25D5D1F = 11;
  strcpy((char *)&qword_25D5D08, "{Headsign4}");
  byte_25D5D37 = 11;
  strcpy((char *)&qword_25D5D20, "{Headsign5}");
  byte_25D5D4F = 6;
  strcpy((char *)&dword_25D5D38, "{Stop}");
  byte_25D5D67 = 14;
  strcpy((char *)&qword_25D5D50, "{PreviousStop}");
  byte_25D5D7F = 8;
  strcpy((char *)&qword_25D5D68, "{System}");
  byte_25D5D97 = 15;
  strcpy((char *)&qword_25D5D80, "{VehicleNumber}");
  byte_25D5DAF = 17;
  strcpy((char *)&xmmword_25D5D98, "{AccessPointExit}");
  strcpy(&byte_25D5DC7, "\n{nextBoardStation}");
  strcpy((char *)&qword_25D5DB0, "{Platform}");
  byte_25D5DDF = 18;
  qword_25D5DE0 = 0;
  unk_25D5DE8 = 0;
  qword_25D5DF0 = 0;
  byte_25D5E0F = 1;
  word_25D5DF8 = 32;
  qword_25D5E10 = (uint64_t)operator new(0x20uLL);
  unk_25D5E18 = xmmword_20B8890;
  strcpy((char *)qword_25D5E10, "LeaveStop_Loc_Comma_Separator");
  byte_25D5E3F = 5;
  dword_25D5E28 = -1028144608;
  word_25D5E2C = 160;
  byte_25D5E57 = 2;
  word_25D5E40 = -24382;
  byte_25D5E42 = 0;
  byte_25D5E6F = 4;
  dword_25D5E58 = 548913696;
  byte_25D5E5C = 0;
  byte_25D5E87 = 15;
  strcpy((char *)&qword_25D5E70 + 7, "\xB7 {/s:s}");
  strcpy((char *)&qword_25D5E70, "{s:s} ·");
  byte_25D5E9F = 6;
  strcpy((char *)&dword_25D5E88, "NoType");
  byte_25D5EB7 = 14;
  strcpy((char *)&qword_25D5EA0, "{WalkDistance}");
  strcpy(&byte_25D5ECF, "\n{OneMinute}");
  strcpy((char *)&qword_25D5EB8, "{WalkTime}");
  byte_25D5EE7 = 11;
  byte_25D5EFF = 14;
  strcpy((char *)&qword_25D5EE8, "{StepDuration}");
  byte_25D5F17 = 15;
  strcpy((char *)&qword_25D5F00, "{TripFrequency}");
  byte_25D5F2F = 11;
  strcpy((char *)&qword_25D5F18, "{BoardTime}");
  byte_25D5F47 = 12;
  strcpy((char *)&qword_25D5F30, "{AlightTime}");
  byte_25D5F5F = 21;
  strcpy((char *)&xmmword_25D5F48, "{FutureTimestampList}");
  byte_25D5F77 = 15;
  strcpy((char *)&qword_25D5F60, "{DepartureTime}");
  byte_25D5F8F = 13;
  strcpy((char *)&qword_25D5F78, "{ArrivalTime}");
  byte_25D5FA7 = 19;
  strcpy((char *)&xmmword_25D5F90, "{TotalWalkDistance}");
  byte_25D5FBF = 14;
  strcpy((char *)&qword_25D5FA8, "{TripDuration}");
  byte_25D5FD7 = 11;
  strcpy((char *)&qword_25D5FC0, "{DayOfWeek}");
  byte_25D5FEF = 6;
  strcpy((char *)&dword_25D5FD8, "{Date}");
  byte_25D6007 = 16;
  strcpy((char *)&xmmword_25D5FF0, "{OutTheDoorTime}");
  BOOL result = (char *)operator new(0x20uLL);
  qword_25D6008 = (uint64_t)result;
  unk_25D6010 = xmmword_20B91A0;
  strcpy(result, "{FirstVehicleDepartureTime}");
  byte_25D6037 = 18;
  strcpy(byte_25D6020, "{RouteArrivalTime}");
  strcpy(&byte_25D604F, "\n{IC_Artwork}");
  strcpy((char *)&qword_25D6038, "{BaseFare}");
  byte_25D6067 = 12;
  byte_25D607F = 11;
  strcpy((char *)&qword_25D6068, "{RT_Symbol}");
  byte_25D6097 = 12;
  strcpy((char *)&qword_25D6080, "{TotalPrice}");
  byte_25D60AF = 13;
  strcpy((char *)&qword_25D6098, "{CheckInTime}");
  byte_25D60C7 = 19;
  strcpy(byte_25D60B0, "{LiveDepartureTime}");
  strcpy(&byte_25D60DF, "\n{LegDuration}");
  strcpy((char *)&qword_25D60C8, "{TimeList}");
  byte_25D60F7 = 13;
  byte_25D610F = 15;
  strcpy((char *)&qword_25D60F8, "{CountdownList}");
  byte_25D6127 = 3;
  dword_25D6110 = 8217723;
  strcpy(&byte_25D613F, "\t{AccessPointArt}");
  strcpy((char *)&qword_25D6128, "{LineArt}");
  byte_25D6157 = 16;
  byte_25D616F = 11;
  strcpy((char *)&qword_25D6158, "{SystemArt}");
  strcpy(&byte_25D6187, "\n{ServiceBeginTime}");
  strcpy((char *)&qword_25D6170, "{CardName}");
  byte_25D619F = 18;
  byte_25D61B7 = 16;
  strcpy((char *)&xmmword_25D61A0, "{ServiceEndTime}");
  byte_25D61CF = 6;
  strcpy((char *)&dword_25D61B8, "OnTime");
  byte_25D61E7 = 6;
  strcpy((char *)&dword_25D61D0, "Delays");
  byte_25D61FF = 1;
  word_25D61E8 = 115;
  byte_25D6217 = 2;
  strcpy((char *)&word_25D6200, "cs");
  byte_25D622F = 1;
  word_25D6218 = 112;
  byte_25D6247 = 5;
  strcpy((char *)&dword_25D6230, "_Line");
  byte_25D625F = 7;
  strcpy((char *)&dword_25D6248, "_System");
  strcpy(&byte_25D6277, "\n_VehicleNumber");
  strcpy((char *)&qword_25D6260, "_Direction");
  byte_25D628F = 14;
  byte_25D62A7 = 12;
  strcpy((char *)&qword_25D6290, "_To_Headsign");
  byte_25D62BF = 16;
  strcpy((char *)&xmmword_25D62A8, "_Toward_Headsign");
  strcpy(&byte_25D62D7, "\t_LineNumber");
  strcpy((char *)&qword_25D62C0, "_Headsign");
  byte_25D62EF = 11;
  return result;
}

void sub_9458E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25D6330) {
    sub_20AC83C((void **)qword_25D6330);
  }
  v37 = (void *)xmmword_25D6320;
  *(void *)&xmmword_25D6320 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_945988(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  sub_9E62A0((uint64_t)v17, a1);
  while (1)
  {
    sub_9E62A4(v17, v11);
    BOOL v3 = sub_9E6044(v17, v11);
    sub_9467EC((uint64_t)&v16);
    char v4 = __p;
    if (__p)
    {
      do
      {
        int v5 = (void *)*v4;
        operator delete(v4);
        char v4 = v5;
      }
      while (v5);
    }
    size_t v6 = v14;
    int v14 = 0;
    if (v6) {
      operator delete(v6);
    }
    if (v12)
    {
      char v13 = v12;
      operator delete(v12);
    }
    if (!v3) {
      break;
    }
    if (*(_DWORD *)sub_9E6018((uint64_t)v17) == 2)
    {
      LODWORD(v11[0]) = 0;
      LODWORD(v11[0]) = *(_DWORD *)(sub_9E6018((uint64_t)v17) + 1008);
      uint64_t v7 = sub_9E6018((uint64_t)v17);
      sub_946968(a2, (unsigned int *)(v7 + 8), (_DWORD *)(v7 + 8), (int *)v11);
    }
    sub_9E5780(v17);
  }
  sub_9467EC((uint64_t)&v22);
  int v8 = v21;
  if (v21)
  {
    do
    {
      uint64_t v9 = (void *)*v8;
      operator delete(v8);
      int v8 = v9;
    }
    while (v9);
  }
  char v10 = v20;
  uint64_t v20 = 0;
  if (v10) {
    operator delete(v10);
  }
  if (v18)
  {
    long long v19 = v18;
    operator delete(v18);
  }
}

void sub_945ADC(_Unwind_Exception *a1)
{
  sub_12168(v1);
  _Unwind_Resume(a1);
}

void sub_945AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  sub_945B38(&a9);
  sub_945B38(&a27);
  sub_12168(v27);
  _Unwind_Resume(a1);
}

void sub_945B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  sub_945B38(&a27);
  sub_12168(v27);
  _Unwind_Resume(a1);
}

void *sub_945B38(void *a1)
{
  sub_9467EC((uint64_t)(a1 + 12));
  uint64_t v2 = (void *)a1[9];
  if (v2)
  {
    do
    {
      BOOL v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  char v4 = (void *)a1[7];
  a1[7] = 0;
  if (v4) {
    operator delete(v4);
  }
  int v5 = (void *)a1[4];
  if (v5)
  {
    a1[5] = v5;
    operator delete(v5);
  }
  return a1;
}

void sub_945B9C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  v50 = 0;
  v51 = 0;
  unint64_t v52 = 0;
  uint64_t v9 = *(char ***)a2;
  char v10 = *(char ***)(a2 + 8);
  if (*(char ***)a2 != v10)
  {
    do
    {
      sub_946260(a1, v9, (void *)(a2 + 24), (const std::string *)(a2 + 328), (uint64_t)&v41);
      int v11 = v51;
      if ((unint64_t)v51 >= v52)
      {
        v51 = sub_946C68((void **)&v50, (uint64_t)&v41);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      else
      {
        *(void *)v51 = v41;
        long long v12 = v42;
        *((void *)v11 + 3) = v43;
        *((void *)v11 + 4) = 0;
        *(_OWORD *)(v11 + 8) = v12;
        uint64_t v43 = 0;
        long long v42 = 0uLL;
        *((void *)v11 + 5) = 0;
        *((void *)v11 + 6) = 0;
        *((_OWORD *)v11 + 2) = *(_OWORD *)__p;
        *((void *)v11 + 6) = v45;
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v45 = 0;
        v11[56] = v46;
        v51 = v11 + 64;
      }
      if (SHIBYTE(v43) < 0) {
        operator delete((void *)v42);
      }
      v9 += 390;
    }
    while (v9 != v10);
  }
  if (!*(unsigned char *)(a3 + 64)) {
    goto LABEL_33;
  }
  if (v50 == v51) {
    goto LABEL_27;
  }
  char v13 = v50;
  while (1)
  {
    if (*(_DWORD *)v13 == *(_DWORD *)a3 && v13[56] == *(unsigned char *)(a3 + 56))
    {
      uint64_t v15 = *((void *)v13 + 4);
      uint64_t v14 = *((void *)v13 + 5);
      if (v14 - v15 == *(void *)(a3 + 40) - *(void *)(a3 + 32)) {
        break;
      }
    }
LABEL_13:
    v13 += 64;
    if (v13 == v51) {
      goto LABEL_27;
    }
  }
  if (v15 != v14)
  {
    uint64_t v16 = *(void *)(a3 + 32);
    while (*(void *)v15 == *(void *)v16
         && *(void *)(v15 + 8) == *(void *)(v16 + 8)
         && *(void *)(v15 + 16) == *(void *)(v16 + 16)
         && *(_DWORD *)(v15 + 24) == *(_DWORD *)(v16 + 24))
    {
      v15 += 32;
      v16 += 32;
      if (v15 == v14) {
        goto LABEL_24;
      }
    }
    goto LABEL_13;
  }
LABEL_24:
  if (v13 != v51)
  {
    unint64_t v17 = (v13 - v50) >> 6;
    if (0xAFEAFEAFEAFEAFEBLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4) <= v17) {
      sub_66748();
    }
    *(unsigned char *)(*(void *)a2 + 3120 * v17 + 1128) = 1;
    goto LABEL_33;
  }
LABEL_27:
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)&v41);
    sub_188FC78(&v41, (uint64_t)"Could not find match for route handle", 37);
    std::stringbuf::str();
    sub_7246C((uint64_t *)v38, 1u);
    if (SHIBYTE(v39) < 0) {
      operator delete(v38[0]);
    }
    if (v48 < 0) {
      operator delete(v47);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
LABEL_33:
  sub_497CC0(&v40, *a1);
  uint64_t v18 = *(void *)(a2 + 8) - *(void *)a2;
  if (v18)
  {
    unint64_t v19 = 0;
    unint64_t v20 = 0xAFEAFEAFEAFEAFEBLL * (v18 >> 4);
    do
    {
      uint64_t v22 = *a4;
      if (0x2E8BA2E8BA2E8BA3 * ((a4[1] - *a4) >> 4) <= v19) {
        sub_66748();
      }
      std::string::size_type v23 = v50;
      if (v19 >= (v51 - v50) >> 6) {
        sub_66748();
      }
      long long v24 = *(char ***)a2;
      sub_10E3200((uint64_t)&v41, 0, 0);
      sub_947178((std::string *)&v23[64 * v19], (uint64_t)&v41);
      if (*(_DWORD *)(a5 + 1436))
      {
        sub_945988(&v24[390 * v19], (uint64_t)v38);
        DWORD2(v42) |= 8u;
        uint64_t v25 = v49;
        if (!v49)
        {
          uint64_t v26 = (void *)(v42 & 0xFFFFFFFFFFFFFFFCLL);
          if (v42) {
            uint64_t v26 = (void *)*v26;
          }
          sub_11039CC((uint64_t)v26);
          uint64_t v25 = v27;
          uint64_t v49 = v27;
        }
        sub_498B44(&v40, (int *)(v22 + 176 * v19), v38, v25);
        std::string::size_type v28 = v39;
        if (v39)
        {
          do
          {
            int v29 = (void *)*v28;
            operator delete(v28);
            std::string::size_type v28 = v29;
          }
          while (v29);
        }
        uint64_t v30 = v38[0];
        v38[0] = 0;
        if (v30) {
          operator delete(v30);
        }
      }
      sub_188B428((uint64_t)&v41, (uint64_t)v38);
      uint64_t v31 = &v24[390 * v19];
      v32 = v31 + 138;
      if (*((char *)v31 + 1127) < 0) {
        operator delete(*v32);
      }
      long long v21 = *(_OWORD *)v38;
      v32[2] = (char *)v39;
      *(_OWORD *)v32 = v21;
      sub_10E3440(&v41);
      ++v19;
    }
    while (v19 != v20);
  }
  std::string::size_type v33 = v50;
  if (v50)
  {
    v34 = v51;
    char v35 = v50;
    if (v51 != v50)
    {
      do
      {
        uint64_t v36 = (void *)*((void *)v34 - 4);
        if (v36)
        {
          *((void *)v34 - 3) = v36;
          operator delete(v36);
        }
        if (*(v34 - 33) < 0) {
          operator delete(*((void **)v34 - 7));
        }
        v34 -= 64;
      }
      while (v34 != v33);
      char v35 = v50;
    }
    v51 = v33;
    operator delete(v35);
  }
}

void sub_946110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a19);
    sub_946768((void **)(v19 - 112));
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a19);
  sub_946768((void **)(v19 - 112));
  _Unwind_Resume(a1);
}

void sub_94615C(_Unwind_Exception *a1)
{
  sub_946768((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_946170(_Unwind_Exception *a1)
{
  sub_946768((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_946184(_Unwind_Exception *a1)
{
  sub_946768((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_946198(_Unwind_Exception *a1)
{
  sub_946768((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_9461AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_946714((uint64_t)va);
  sub_946768((void **)(v8 - 112));
  _Unwind_Resume(a1);
}

void sub_9461C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_10E3440(va);
  sub_946768((void **)(v8 - 112));
  _Unwind_Resume(a1);
}

void sub_94624C(_Unwind_Exception *a1)
{
  sub_946768((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

std::string *sub_946260@<X0>(uint64_t *a1@<X0>, char **a2@<X1>, void *a3@<X2>, const std::string *a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)a5 = 0x7FFFFFFF00000002;
  *(_OWORD *)(a5 + 8) = 0u;
  *(_OWORD *)(a5 + 24) = 0u;
  *(_OWORD *)(a5 + 40) = 0u;
  *(unsigned char *)(a5 + 56) = 0;
  *(_DWORD *)(a5 + 4) = *(_DWORD *)(sub_37B3A8(*a1) + 4);
  BOOL result = std::string::operator=((std::string *)(a5 + 8), a4);
  if (a2[1] - *a2 != 32
    || (uint64_t v10 = *(void *)*a2, v11 = *((void *)*a2 + 1), v11 - v10 != 104)
    || v10 != v11
    && (uint64_t v13 = *(void *)(v10 + 8), v12 = *(void *)(v10 + 16), v13 != v12)
    && *(_DWORD *)(v12 - 5704) == 4)
  {
    sub_994B0C(v36, a2);
    uint64_t v14 = (void *)(a5 + 32);
    while (1)
    {
      sub_994AD8((void **)v36, v35);
      BOOL result = (std::string *)sub_994D74(v36, v35);
      if ((result & 1) == 0) {
        return result;
      }
      if (*(_DWORD *)sub_994DB0(v36) == 2) {
        break;
      }
      if (*(_DWORD *)sub_994DB0(v36) == 4)
      {
        uint64_t v18 = *(void *)(a5 + 40);
        unint64_t v19 = *(void *)(sub_994DB0(v36) + 48);
        if (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(a3[1] - *a3) >> 3) <= v19) {
          sub_66748();
        }
        *(void *)(v18 - 16) = *(void *)(*a3 + 168 * v19 + 88);
      }
LABEL_8:
      sub_994B7C((uint64_t)v36);
    }
    uint64_t v16 = *(void **)(a5 + 40);
    unint64_t v15 = *(void *)(a5 + 48);
    if ((unint64_t)v16 < v15)
    {
      *uint64_t v16 = -1;
      v16[1] = -1;
      unint64_t v17 = v16 + 4;
      v16[2] = -1;
      v16[3] = 0x7FFFFFFFLL;
LABEL_32:
      *(void *)(a5 + 40) = v17;
      unint64_t v29 = *(void *)(sub_994DB0(v36) + 48);
      if (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(a3[1] - *a3) >> 3) <= v29) {
        sub_66748();
      }
      *(v17 - 3) = *(void *)(*a3 + 168 * v29 + 88);
      uint64_t v30 = sub_994DB0(v36);
      if (!*(unsigned char *)(v30 + 792))
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_2439078;
      }
      unint64_t v31 = *(void *)(v30 + 752);
      uint64_t v32 = a3[9];
      if (0x66FD0EB66FD0EB67 * ((a3[10] - v32) >> 3) <= v31) {
        sub_66748();
      }
      *(v17 - 4) = *(void *)(v32 + 696 * v31 + 48);
      int v33 = *(_DWORD *)(v30 + 116);
      if (v33 == 0x7FFFFFFF) {
        int v33 = *(_DWORD *)(sub_994DB0(v36) + 40);
      }
      *((_DWORD *)v17 - 2) = v33;
      goto LABEL_8;
    }
    unint64_t v20 = (void *)*v14;
    uint64_t v21 = ((uint64_t)v16 - *v14) >> 5;
    unint64_t v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 59) {
      sub_2E00();
    }
    uint64_t v23 = v15 - (void)v20;
    if (v23 >> 4 > v22) {
      unint64_t v22 = v23 >> 4;
    }
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v24 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v24 = v22;
    }
    if (v24)
    {
      if (v24 >> 59) {
        sub_188D718();
      }
      uint64_t v25 = (char *)operator new(32 * v24);
      uint64_t v26 = &v25[32 * v21];
      *(void *)uint64_t v26 = -1;
      *((void *)v26 + 1) = -1;
      *((void *)v26 + 2) = -1;
      *((void *)v26 + 3) = 0x7FFFFFFFLL;
      uint64_t v27 = (uint64_t)v26;
      if (v16 == v20)
      {
LABEL_30:
        unint64_t v17 = v26 + 32;
        *(void *)(a5 + 32) = v27;
        *(void *)(a5 + 40) = v26 + 32;
        *(void *)(a5 + 48) = &v25[32 * v24];
        if (!v16) {
          goto LABEL_32;
        }
LABEL_31:
        operator delete(v16);
        goto LABEL_32;
      }
    }
    else
    {
      uint64_t v25 = 0;
      uint64_t v26 = (char *)(32 * v21);
      *(void *)uint64_t v26 = -1;
      *((void *)v26 + 1) = -1;
      *((void *)v26 + 2) = -1;
      *((void *)v26 + 3) = 0x7FFFFFFFLL;
      uint64_t v27 = 32 * v21;
      if (v16 == v20) {
        goto LABEL_30;
      }
    }
    do
    {
      long long v28 = *((_OWORD *)v16 - 2);
      *(_OWORD *)(v27 - 20) = *(_OWORD *)((char *)v16 - 20);
      *(_OWORD *)(v27 - 32) = v28;
      v27 -= 32;
      v16 -= 4;
    }
    while (v16 != v20);
    uint64_t v16 = (void *)*v14;
    unint64_t v17 = v26 + 32;
    *(void *)(a5 + 32) = v27;
    *(void *)(a5 + 40) = v26 + 32;
    *(void *)(a5 + 48) = &v25[32 * v24];
    if (!v16) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  *(unsigned char *)(a5 + 56) = 1;
  return result;
}

void sub_946624(_Unwind_Exception *a1)
{
  sub_946714(v1);
  _Unwind_Resume(a1);
}

void sub_946638(_Unwind_Exception *a1)
{
  sub_946714(v1);
  _Unwind_Resume(a1);
}

void sub_94664C(_Unwind_Exception *a1)
{
  sub_946714(v1);
  _Unwind_Resume(a1);
}

void sub_946660(_Unwind_Exception *a1)
{
  sub_946714(v1);
  _Unwind_Resume(a1);
}

void sub_946674(_Unwind_Exception *a1)
{
  sub_946714(v1);
  _Unwind_Resume(a1);
}

void sub_946688(_Unwind_Exception *a1)
{
  sub_946714(v1);
  _Unwind_Resume(a1);
}

void sub_94669C(_Unwind_Exception *a1)
{
  sub_946714(v1);
  _Unwind_Resume(a1);
}

void sub_9466B0(_Unwind_Exception *a1)
{
  sub_946714(v1);
  _Unwind_Resume(a1);
}

void sub_9466C4(_Unwind_Exception *a1)
{
  sub_946714(v1);
  _Unwind_Resume(a1);
}

void sub_9466D8(_Unwind_Exception *a1)
{
  sub_946714(v1);
  _Unwind_Resume(a1);
}

void sub_9466EC(_Unwind_Exception *a1)
{
  sub_946714(v1);
  _Unwind_Resume(a1);
}

void sub_946700(_Unwind_Exception *a1)
{
  sub_946714(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_946714(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void **sub_946768(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    BOOL v3 = (char *)a1[1];
    char v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        int v5 = (void *)*((void *)v3 - 4);
        if (v5)
        {
          *((void *)v3 - 3) = v5;
          operator delete(v5);
        }
        if (*(v3 - 33) < 0) {
          operator delete(*((void **)v3 - 7));
        }
        v3 -= 64;
      }
      while (v3 != v2);
      char v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_9467EC(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  BOOL v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    BOOL v3 = *(void ***)(a1 + 8);
    *(void *)(a1 + 40) = 0;
    unint64_t v11 = 0;
  }
  else
  {
    unint64_t v4 = *(void *)(a1 + 32);
    int v5 = &v2[v4 >> 7];
    uint64_t v6 = (uint64_t)*v5;
    uint64_t v7 = (uint64_t)*v5 + 32 * (v4 & 0x7F);
    uint64_t v8 = *(uint64_t *)((char *)v2 + (((*(void *)(a1 + 40) + v4) >> 4) & 0xFFFFFFFFFFFFFF8))
       + 32 * ((*(void *)(a1 + 40) + v4) & 0x7F);
    if (v7 != v8)
    {
      do
      {
        uint64_t v9 = *(void **)v7;
        if (*(void *)v7)
        {
          *(void *)(v7 + 8) = v9;
          operator delete(v9);
          uint64_t v6 = (uint64_t)*v5;
        }
        v7 += 32;
        if (v7 - v6 == 4096)
        {
          uint64_t v10 = (uint64_t)v5[1];
          ++v5;
          uint64_t v6 = v10;
          uint64_t v7 = v10;
        }
      }
      while (v7 != v8);
      uint64_t v2 = *(void ***)(a1 + 8);
      BOOL v3 = *(void ***)(a1 + 16);
    }
    *(void *)(a1 + 40) = 0;
    unint64_t v11 = (char *)v3 - (char *)v2;
    if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
    {
      do
      {
        operator delete(*v2);
        BOOL v3 = *(void ***)(a1 + 16);
        uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
        *(void *)(a1 + 8) = v2;
        unint64_t v11 = (char *)v3 - (char *)v2;
      }
      while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
    }
  }
  unint64_t v12 = v11 >> 3;
  if (v12 == 1)
  {
    uint64_t v13 = 64;
    goto LABEL_17;
  }
  if (v12 == 2)
  {
    uint64_t v13 = 128;
LABEL_17:
    *(void *)(a1 + 32) = v13;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v14 = *v2++;
      operator delete(v14);
    }
    while (v2 != v3);
    uint64_t v16 = *(void *)(a1 + 8);
    uint64_t v15 = *(void *)(a1 + 16);
    if (v15 != v16) {
      *(void *)(a1 + 16) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_946968(uint64_t a1, unsigned int *a2, _DWORD *a3, int *a4)
{
  unint64_t v8 = *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v9 <= v8) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    unint64_t v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      unint64_t v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v14 = v12[1];
            if (v14 == v8)
            {
              if (*((_DWORD *)v12 + 4) == v8) {
                return v12;
              }
            }
            else if ((v14 & (v9 - 1)) != v4)
            {
              goto LABEL_23;
            }
            unint64_t v12 = (void *)*v12;
            if (!v12) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (*((_DWORD *)v12 + 4) == v8) {
              return v12;
            }
          }
          else
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
            if (v13 != v4) {
              break;
            }
          }
          unint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_23:
  unint64_t v12 = operator new(0x18uLL);
  void *v12 = 0;
  v12[1] = v8;
  int v15 = *a4;
  *((_DWORD *)v12 + 4) = *a3;
  *((_DWORD *)v12 + 5) = v15;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (v9 && (float)(v17 * (float)v9) >= v16)
  {
    unint64_t v8 = v4;
  }
  else
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t prime = v20;
    }
    else {
      size_t prime = v19;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v9 = *(void *)(a1 + 8);
    }
    if (prime > v9) {
      goto LABEL_36;
    }
    if (prime < v9)
    {
      unint64_t v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v23 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        unint64_t v22 = std::__next_prime(v22);
      }
      else
      {
        uint64_t v24 = 1 << -(char)__clz(v22 - 1);
        if (v22 >= 2) {
          unint64_t v22 = v24;
        }
      }
      if (prime <= v22) {
        size_t prime = v22;
      }
      if (prime < v9) {
LABEL_36:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8) {
        v8 %= v9;
      }
    }
    else
    {
      unint64_t v8 = (v9 - 1) & v8;
    }
  }
  uint64_t v25 = *(void *)a1;
  uint64_t v26 = *(void **)(*(void *)a1 + 8 * v8);
  if (v26)
  {
    void *v12 = *v26;
LABEL_59:
    *uint64_t v26 = v12;
    goto LABEL_60;
  }
  void *v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v25 + 8 * v8) = a1 + 16;
  if (*v12)
  {
    unint64_t v27 = *(void *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9) {
        v27 %= v9;
      }
    }
    else
    {
      v27 &= v9 - 1;
    }
    uint64_t v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_59;
  }
LABEL_60:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_946C54(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_946C68(void **a1, uint64_t a2)
{
  uint64_t v3 = ((unsigned char *)a1[1] - (unsigned char *)*a1) >> 6;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 58) {
    sub_2E00();
  }
  uint64_t v5 = (unsigned char *)a1[2] - (unsigned char *)*a1;
  if (v5 >> 5 > v4) {
    unint64_t v4 = v5 >> 5;
  }
  BOOL v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFC0;
  unint64_t v7 = 0x3FFFFFFFFFFFFFFLL;
  if (!v6) {
    unint64_t v7 = v4;
  }
  if (v7 >> 58) {
    sub_188D718();
  }
  unint64_t v9 = v7 << 6;
  uint8x8_t v10 = (char *)operator new(v7 << 6);
  unint64_t v11 = &v10[64 * v3];
  *(void *)unint64_t v11 = *(void *)a2;
  unint64_t v12 = &v10[v9];
  *(_OWORD *)(v11 + 8) = *(_OWORD *)(a2 + 8);
  *((void *)v11 + 3) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *((_OWORD *)v11 + 2) = *(_OWORD *)(a2 + 32);
  *((void *)v11 + 6) = *(void *)(a2 + 48);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  v11[56] = *(unsigned char *)(a2 + 56);
  unint64_t v13 = v11 + 64;
  uint64_t v14 = (char *)*a1;
  int v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
    if (!v15) {
      return v13;
    }
    goto LABEL_19;
  }
  uint64_t v16 = 0;
  do
  {
    float v17 = &v11[v16];
    BOOL v18 = &v15[v16];
    *((void *)v17 - 8) = *(void *)&v15[v16 - 64];
    long long v19 = *(_OWORD *)&v15[v16 - 56];
    *((void *)v17 - 5) = *(void *)&v15[v16 - 40];
    *(_OWORD *)(v17 - 56) = v19;
    *((void *)v18 - 6) = 0;
    *((void *)v18 - 5) = 0;
    *((void *)v18 - 7) = 0;
    *((_OWORD *)v17 - 2) = *(_OWORD *)&v15[v16 - 32];
    *((void *)v17 - 2) = *(void *)&v15[v16 - 16];
    *((void *)v18 - 4) = 0;
    *((void *)v18 - 3) = 0;
    *((void *)v18 - 2) = 0;
    *(v17 - 8) = v15[v16 - 8];
    v16 -= 64;
  }
  while (&v15[v16] != v14);
  unint64_t v20 = (char *)*a1;
  int v15 = (char *)a1[1];
  *a1 = &v11[v16];
  a1[1] = v13;
  a1[2] = v12;
  if (v15 != v20)
  {
    do
    {
      uint64_t v21 = (void *)*((void *)v15 - 4);
      if (v21)
      {
        *((void *)v15 - 3) = v21;
        operator delete(v21);
      }
      if (*(v15 - 33) < 0) {
        operator delete(*((void **)v15 - 7));
      }
      v15 -= 64;
    }
    while (v15 != v20);
    int v15 = v20;
  }
  if (v15) {
LABEL_19:
  }
    operator delete(v15);
  return v13;
}

double sub_946E10()
{
  byte_25D635F = 1;
  word_25D6348 = 65;
  byte_25D6377 = 1;
  word_25D6360 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25D6408 = 0u;
  *(_OWORD *)&qword_25D6418 = 0u;
  dword_25D6428 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25D6408, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25D6408, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25D6408, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25D6408, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25D638F = 8;
  strcpy((char *)&qword_25D6378, "any_mode");
  byte_25D63A7 = 7;
  strcpy((char *)&dword_25D6390, "cycling");
  byte_25D63BF = 7;
  strcpy((char *)&dword_25D63A8, "driving");
  byte_25D63D7 = 7;
  strcpy((char *)&dword_25D63C0, "walking");
  qword_25D63E0 = 0;
  qword_25D63E8 = 0;
  qword_25D63D8 = 0;
  v0 = operator new(9uLL);
  *(void *)v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25D63D8 = (uint64_t)v0;
  qword_25D63E0 = (uint64_t)(v0 + 9);
  qword_25D63E8 = (uint64_t)(v0 + 9);
  qword_25D63F0 = 0;
  qword_25D63F8 = 0;
  unk_25D6400 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25D63F8 = (uint64_t)(v1 + 9);
  unk_25D6400 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25D63F0 = (uint64_t)v1;
  return result;
}

void sub_9470D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25D6418) {
    sub_20AC880((void **)qword_25D6418);
  }
  v37 = (void *)xmmword_25D6408;
  *(void *)&xmmword_25D6408 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

std::string *sub_947178(std::string *result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(a2 + 16);
  *(void *)(a2 + 120) = LODWORD(result->__r_.__value_.__l.__data_);
  std::string::value_type v5 = result[2].__r_.__value_.__s.__data_[8];
  int v6 = v4 | 0x110;
  *(_DWORD *)(a2 + 16) = v4 | 0x110;
  *(unsigned char *)(a2 + 104) = v5;
  int v7 = HIDWORD(result->__r_.__value_.__r.__words[0]);
  if (v7 != 0x7FFFFFFF)
  {
    int v6 = v4 | 0x130;
    *(_DWORD *)(a2 + 16) = v4 | 0x130;
    *(_DWORD *)(a2 + 108) = v7;
  }
  std::string::size_type v8 = result[1].__r_.__value_.__s.__data_[7];
  if ((v8 & 0x80u) != 0) {
    std::string::size_type v8 = result->__r_.__value_.__r.__words[2];
  }
  if (v8)
  {
    *(_DWORD *)(a2 + 16) = v6 | 1;
    uint64_t v9 = *(void *)(a2 + 8);
    char v10 = (uint64_t *)(v9 & 0xFFFFFFFFFFFFFFFCLL);
    if (v9) {
      char v10 = (uint64_t *)*v10;
    }
    double result = sub_1881DF4((std::string **)(a2 + 72), (long long *)&result->__r_.__value_.__r.__words[1], v10);
  }
  std::string::size_type size = v3[1].__r_.__value_.__l.__size_;
  for (std::string::size_type i = v3[1].__r_.__value_.__r.__words[2]; size != i; size += 32)
  {
    long long v19 = *(_DWORD **)(a2 + 64);
    if (v19 && (uint64_t v20 = *(int *)(a2 + 56), (int)v20 < *v19))
    {
      *(_DWORD *)(a2 + 56) = v20 + 1;
      uint64_t v14 = *(void *)&v19[2 * v20 + 2];
    }
    else
    {
      sub_10E4B4C(*(void *)(a2 + 48));
      uint64_t v14 = sub_188CDC8(a2 + 48, v13);
    }
    uint64_t v15 = nullsub_1(*(void *)size);
    *(_DWORD *)(v14 + 16) |= 1u;
    *(void *)(v14 + 24) = v15;
    uint64_t v16 = nullsub_1(*(void *)(size + 8));
    *(_DWORD *)(v14 + 16) |= 2u;
    *(void *)(v14 + 32) = v16;
    double result = (std::string *)nullsub_1(*(void *)(size + 16));
    int v17 = *(_DWORD *)(v14 + 16);
    *(_DWORD *)(v14 + 16) = v17 | 4;
    *(void *)(v14 + 40) = result;
    int v18 = *(_DWORD *)(size + 24);
    *(_DWORD *)(v14 + 16) = v17 | 0xC;
    *(_DWORD *)(v14 + 48) = v18;
  }
  return result;
}

void sub_9472E8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(int *)(a1 + 32);
  if (!v3)
  {
    *(void *)a2 = 0x7FFFFFFF00000002;
    *(_OWORD *)(a2 + 8) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(unsigned char *)(a2 + 56) = 0;
    return;
  }
  uint64_t v27 = 0x7FFFFFFF00000002;
  *(_OWORD *)long long v28 = 0u;
  *(_OWORD *)std::string __p = 0u;
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    int v6 = (uint64_t *)(v5 + 8);
  }
  else {
    int v6 = 0;
  }
  int v7 = &v6[v3];
  long long v30 = 0uLL;
  BOOL v31 = 0;
  while (1)
  {
    uint64_t v8 = *v6;
    if ((*(unsigned char *)(*v6 + 16) & 0x80) != 0) {
      break;
    }
LABEL_6:
    if (++v6 == v7)
    {
      uint64_t v20 = v30;
      BOOL v21 = __p[1] == (void *)v30;
      BOOL v31 = __p[1] == (void *)v30;
      int v22 = *(_DWORD *)(a1 + 16);
      if ((v22 & 0x20) != 0) {
        HIDWORD(v27) = *(_DWORD *)(a1 + 108);
      }
      if (v22)
      {
        std::string::operator=((std::string *)v28, (const std::string *)(*(void *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL));
        uint64_t v20 = v30;
        BOOL v21 = v31;
      }
      uint8x8_t v23 = __p[1];
      *(void *)a2 = v27;
      long long v24 = *(_OWORD *)v28;
      uint64_t v25 = __p[0];
      v28[0] = 0;
      v28[1] = 0;
      __p[0] = 0;
      *(_OWORD *)(a2 + 8) = v24;
      *(void *)(a2 + 24) = v25;
      *(void *)(a2 + 32) = v23;
      uint64_t v26 = *((void *)&v30 + 1);
      *(void *)(a2 + 40) = v20;
      *(void *)(a2 + 48) = v26;
      long long v30 = 0uLL;
      __p[1] = 0;
      *(unsigned char *)(a2 + 56) = v21;
      if ((SHIBYTE(__p[0]) & 0x80000000) == 0) {
        return;
      }
LABEL_38:
      operator delete(v28[0]);
      return;
    }
  }
  if (*(int *)(v8 + 56) >= 2 && *(_DWORD *)(v8 + 40))
  {
    uint64_t v9 = (void *)v30;
    if ((unint64_t)v30 >= *((void *)&v30 + 1))
    {
      int v11 = __p[1];
      uint64_t v12 = (uint64_t)(v30 - (unint64_t)__p[1]) >> 5;
      unint64_t v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 59) {
        sub_2E00();
      }
      int64_t v14 = *((void *)&v30 + 1) - (unint64_t)__p[1];
      if ((uint64_t)(*((void *)&v30 + 1) - (unint64_t)__p[1]) >> 4 > v13) {
        unint64_t v13 = v14 >> 4;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v15 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v13;
      }
      if (v15)
      {
        if (v15 >> 59) {
          sub_188D718();
        }
        uint64_t v16 = (char *)operator new(32 * v15);
      }
      else
      {
        uint64_t v16 = 0;
      }
      int v17 = &v16[32 * v12];
      *(void *)int v17 = -1;
      *((void *)v17 + 1) = -1;
      *((void *)v17 + 2) = -1;
      *((void *)v17 + 3) = 0x7FFFFFFFLL;
      int v18 = v17;
      if (v9 != v11)
      {
        do
        {
          long long v19 = *((_OWORD *)v9 - 2);
          *(_OWORD *)(v18 - 20) = *(_OWORD *)((char *)v9 - 20);
          *((_OWORD *)v18 - 2) = v19;
          v18 -= 32;
          v9 -= 4;
        }
        while (v9 != v11);
        uint64_t v9 = v11;
      }
      char v10 = v17 + 32;
      __p[1] = v18;
      *((void *)&v30 + 1) = &v16[32 * v15];
      if (v9) {
        operator delete(v9);
      }
    }
    else
    {
      *(void *)long long v30 = -1;
      v9[1] = -1;
      char v10 = v9 + 4;
      v9[2] = -1;
      v9[3] = 0x7FFFFFFFLL;
    }
    *(void *)&long long v30 = v10;
    *(v10 - 4) = nullsub_1(*(void *)(v8 + 144));
    *(v10 - 3) = nullsub_1(**(void **)(v8 + 64));
    *(v10 - 2) = nullsub_1(*(void *)(*(void *)(v8 + 64) + 8 * *(int *)(v8 + 56) - 8));
    *((_DWORD *)v10 - 2) = sub_920D68(**(unsigned int **)(v8 + 48));
    goto LABEL_6;
  }
  *(void *)a2 = 0x7FFFFFFF00000002;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(unsigned char *)(a2 + 56) = 0;
  if (__p[1])
  {
    *(void **)&long long v30 = __p[1];
    operator delete(__p[1]);
  }
  if (SHIBYTE(__p[0]) < 0) {
    goto LABEL_38;
  }
}

void sub_9475DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_946714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_9475F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_946714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_947604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_946714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_947618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_946714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_94762C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_946714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_947640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_946714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_947654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_946714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_947668(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v25 = 0x7FFFFFFF00000002;
  memset(v26, 0, sizeof(v26));
  char v27 = *(unsigned char *)(a1 + 104);
  int v3 = *(_DWORD *)(a1 + 16);
  if ((v3 & 0x20) != 0) {
    HIDWORD(v25) = *(_DWORD *)(a1 + 108);
  }
  if (v3) {
    std::string::operator=(v26, (const std::string *)(*(void *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL));
  }
  uint64_t v4 = *(void *)(a1 + 64);
  if (v4) {
    uint64_t v5 = (uint64_t *)(v4 + 8);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(int *)(a1 + 56);
  if (!v6)
  {
LABEL_30:
    *(void *)a2 = v25;
    *(std::string *)(a2 + 8) = v26[0];
    memset(v26, 0, 24);
    *(std::string *)(a2 + 32) = v26[1];
    memset(&v26[1], 0, sizeof(std::string));
    *(unsigned char *)(a2 + 56) = v27;
    goto LABEL_39;
  }
  int v7 = &v5[v6];
  while (1)
  {
    uint64_t v8 = *v5;
    std::string::size_type size = (void *)v26[1].__r_.__value_.__l.__size_;
    if (v26[1].__r_.__value_.__l.__size_ < v26[1].__r_.__value_.__r.__words[2])
    {
      *(void *)v26[1].__r_.__value_.__l.__size_ = -1;
      size[1] = -1;
      std::string::size_type v10 = (std::string::size_type)(size + 4);
      size[2] = -1;
      size[3] = 0x7FFFFFFFLL;
      goto LABEL_28;
    }
    std::string::pointer data = v26[1].__r_.__value_.__l.__data_;
    uint64_t v12 = (uint64_t)(v26[1].__r_.__value_.__l.__size_ - v26[1].__r_.__value_.__r.__words[0]) >> 5;
    unint64_t v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 59) {
      sub_2E00();
    }
    int64_t v14 = v26[1].__r_.__value_.__r.__words[2] - v26[1].__r_.__value_.__r.__words[0];
    if ((uint64_t)(v26[1].__r_.__value_.__r.__words[2] - v26[1].__r_.__value_.__r.__words[0]) >> 4 > v13) {
      unint64_t v13 = v14 >> 4;
    }
    unint64_t v15 = (unint64_t)v14 >= 0x7FFFFFFFFFFFFFE0 ? 0x7FFFFFFFFFFFFFFLL : v13;
    if (v15)
    {
      if (v15 >> 59) {
        sub_188D718();
      }
      uint64_t v16 = (char *)operator new(32 * v15);
      int v17 = &v16[32 * v12];
      *(void *)int v17 = -1;
      *((void *)v17 + 1) = -1;
      *((void *)v17 + 2) = -1;
      *((void *)v17 + 3) = 0x7FFFFFFFLL;
      uint64_t v18 = (uint64_t)v17;
      if (size == (void *)data)
      {
LABEL_26:
        std::string::size_type v10 = (std::string::size_type)(v17 + 32);
        v26[1].__r_.__value_.__r.__words[0] = v18;
        v26[1].__r_.__value_.__l.__size_ = (std::string::size_type)(v17 + 32);
        v26[1].__r_.__value_.__r.__words[2] = (std::string::size_type)&v16[32 * v15];
        if (!size) {
          goto LABEL_28;
        }
LABEL_27:
        operator delete(size);
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v16 = 0;
      int v17 = (char *)(32 * v12);
      *(void *)int v17 = -1;
      *((void *)v17 + 1) = -1;
      *((void *)v17 + 2) = -1;
      *((void *)v17 + 3) = 0x7FFFFFFFLL;
      uint64_t v18 = 32 * v12;
      if (size == (void *)data) {
        goto LABEL_26;
      }
    }
    do
    {
      long long v19 = *((_OWORD *)size - 2);
      *(_OWORD *)(v18 - 20) = *(_OWORD *)((char *)size - 20);
      *(_OWORD *)(v18 - 32) = v19;
      v18 -= 32;
      size -= 4;
    }
    while (size != (void *)data);
    std::string::size_type size = v26[1].__r_.__value_.__l.__data_;
    std::string::size_type v10 = (std::string::size_type)(v17 + 32);
    v26[1].__r_.__value_.__r.__words[0] = v18;
    v26[1].__r_.__value_.__l.__size_ = (std::string::size_type)(v17 + 32);
    v26[1].__r_.__value_.__r.__words[2] = (std::string::size_type)&v16[32 * v15];
    if (size) {
      goto LABEL_27;
    }
LABEL_28:
    v26[1].__r_.__value_.__l.__size_ = v10;
    if ((~*(_DWORD *)(v8 + 16) & 0xF) != 0) {
      break;
    }
    *(void *)(v10 - 32) = nullsub_1(*(void *)(v8 + 24));
    *(void *)(v10 - 24) = nullsub_1(*(void *)(v8 + 32));
    *(void *)(v10 - 16) = nullsub_1(*(void *)(v8 + 40));
    *(_DWORD *)(v10 - 8) = sub_920D68(*(unsigned int *)(v8 + 48));
    if (++v5 == v7) {
      goto LABEL_30;
    }
  }
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)v23);
    sub_188FC78(v23, (uint64_t)"Route handle leg is missing data", 32);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (v22 < 0) {
      operator delete(__p);
    }
    if (v24 < 0) {
      operator delete((void *)v23[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  *(void *)a2 = 0x7FFFFFFF00000002;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(unsigned char *)(a2 + 56) = 0;
  if (v26[1].__r_.__value_.__r.__words[0])
  {
    v26[1].__r_.__value_.__l.__size_ = v26[1].__r_.__value_.__r.__words[0];
    operator delete(v26[1].__r_.__value_.__l.__data_);
  }
LABEL_39:
  if (SHIBYTE(v26[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26[0].__r_.__value_.__l.__data_);
  }
}

void sub_947A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a18);
    sub_946714(v18 - 168);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a18);
  sub_946714(v18 - 168);
  _Unwind_Resume(a1);
}

void sub_947AA4(_Unwind_Exception *a1)
{
  sub_946714(v1 - 168);
  _Unwind_Resume(a1);
}

void sub_947AB8(_Unwind_Exception *a1)
{
  sub_946714(v1 - 168);
  _Unwind_Resume(a1);
}

void sub_947ACC(_Unwind_Exception *a1)
{
  sub_946714(v1 - 168);
  _Unwind_Resume(a1);
}

void sub_947AE0(_Unwind_Exception *a1)
{
  sub_946714(v1 - 168);
  _Unwind_Resume(a1);
}

void sub_947AF4(_Unwind_Exception *a1)
{
  sub_946714(v1 - 168);
  _Unwind_Resume(a1);
}

void sub_947B08(_Unwind_Exception *a1)
{
  sub_946714(v1 - 168);
  _Unwind_Resume(a1);
}

void sub_947B1C(_Unwind_Exception *a1)
{
  sub_946714(v1 - 168);
  _Unwind_Resume(a1);
}

void sub_947B30(_Unwind_Exception *a1)
{
  sub_946714(v1 - 168);
  _Unwind_Resume(a1);
}

void sub_947B44(_Unwind_Exception *a1)
{
  sub_946714(v1 - 168);
  _Unwind_Resume(a1);
}

uint64_t sub_947B58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_10E3200((uint64_t)v10, 0, 0);
  if ((sub_1880FAC(v4, a1) & 1) == 0)
  {
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)v8);
      sub_188FC78(v8, (uint64_t)"Route handle could not be parsed", 32);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 1u);
LABEL_10:
      if (v7 < 0) {
        operator delete(__p[0]);
      }
      if (v9 < 0) {
        operator delete((void *)v8[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
LABEL_15:
    *(void *)a2 = 0x7FFFFFFF00000002;
    *(_OWORD *)(a2 + 8) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(unsigned char *)(a2 + 56) = 0;
    return sub_10E3440(v10);
  }
  if (v11 == 2)
  {
    sub_947668((uint64_t)v10, a2);
    return sub_10E3440(v10);
  }
  if (v11 != 1)
  {
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)v8);
      sub_188FC78(v8, (uint64_t)"Got a route handle of unknown version: ", 39);
      std::ostream::operator<<();
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 1u);
      goto LABEL_10;
    }
    goto LABEL_15;
  }
  sub_9472E8((uint64_t)v10, a2);
  return sub_10E3440(v10);
}

void sub_947D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_10E3440(v15 - 176);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_10E3440(v15 - 176);
  _Unwind_Resume(a1);
}

void sub_947DFC(_Unwind_Exception *a1)
{
  sub_10E3440(v1 - 176);
  _Unwind_Resume(a1);
}

void sub_947E10(_Unwind_Exception *a1)
{
  sub_10E3440(v1 - 176);
  _Unwind_Resume(a1);
}

void sub_947E24(uint64_t a1@<X1>, unint64_t a2@<X2>, int a3@<W3>, void *a4@<X8>)
{
  unint64_t v36 = a2;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  LODWORD(v33) = 42;
  if (a3) {
    int v7 = 2;
  }
  else {
    int v7 = 3;
  }
  int v35 = v7;
  sub_78B0E8((uint64_t)a4, &v33, &v35);
  uint64_t v8 = (int *)sub_8ED3D4(a1, a2, 0, "hall");
  char v9 = (unsigned __int16 *)((char *)v8 - *v8);
  if (*v9 >= 0x23u)
  {
    uint64_t v10 = v9[17];
    if (v10)
    {
      uint64_t v11 = (int *)((char *)v8 + v10 + *(unsigned int *)((char *)v8 + v10));
      uint64_t v12 = (unsigned __int16 *)((char *)v11 - *v11);
      if (*v12 >= 5u)
      {
        uint64_t v13 = v12[2];
        if (v13)
        {
          int64_t v14 = (int *)((char *)v11 + v13 + *(unsigned int *)((char *)v11 + v13));
          uint64_t v15 = (unsigned __int16 *)((char *)v14 - *v14);
          if (*v15 >= 9u)
          {
            uint64_t v16 = v15[4];
            if (v16)
            {
              int v17 = *((unsigned __int8 *)v14 + v16);
              int v18 = 15;
              switch(v17)
              {
                case 0:
                  int v18 = 13;
                  goto LABEL_19;
                case 1:
                  int v18 = 0;
                  goto LABEL_19;
                case 2:
                  int v18 = 1;
                  goto LABEL_19;
                case 3:
                  int v18 = 2;
                  goto LABEL_19;
                case 4:
                  int v18 = 14;
                  goto LABEL_19;
                case 5:
                  goto LABEL_19;
                case 6:
                  int v18 = 16;
LABEL_19:
                  LODWORD(v33) = 10;
                  int v35 = v18;
                  sub_78B0E8((uint64_t)a4, &v33, &v35);
                  break;
                default:
                  if (v17 != 127)
                  {
                    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(exception, "Unexpected significance value");
                  }
                  return;
              }
            }
          }
        }
      }
    }
  }
  LODWORD(v33) = 6;
  int v35 = 225;
  sub_78B0E8((uint64_t)a4, &v33, &v35);
  uint64_t v20 = (int *)sub_8ED3D4(a1, a2, 0, "hall");
  BOOL v21 = (unsigned __int16 *)((char *)v20 - *v20);
  unsigned int v22 = *v21;
  if (v22 < 0x17)
  {
    if (v22 < 0x15) {
      goto LABEL_33;
    }
  }
  else if (v21[11])
  {
    unsigned __int16 v23 = *(_WORD *)((char *)v20 + v21[11]);
    uint64_t v24 = v21[10];
    if (!v21[10]) {
      goto LABEL_23;
    }
    goto LABEL_29;
  }
  unsigned __int16 v23 = 0x7FFF;
  uint64_t v24 = v21[10];
  if (!v21[10])
  {
LABEL_23:
    if (v23 == 0x7FFF) {
      unsigned __int16 v23 = 0x7FFF;
    }
    if (v23 == 0x7FFF) {
      goto LABEL_33;
    }
LABEL_32:
    LODWORD(v33) = 37;
    int v35 = v23;
    sub_78B0E8((uint64_t)a4, &v33, &v35);
    goto LABEL_33;
  }
LABEL_29:
  unsigned __int16 v25 = *(_WORD *)((char *)v20 + v24);
  if (v23 == 0x7FFF) {
    unsigned __int16 v23 = v25;
  }
  if (v23 != 0x7FFF) {
    goto LABEL_32;
  }
LABEL_33:
  uint64_t v26 = (int *)sub_8ED3D4(a1, a2, 0, "hall");
  char v27 = (unsigned __int16 *)((char *)v26 - *v26);
  if (*v27 >= 0x19u)
  {
    uint64_t v28 = v27[12];
    if (v28)
    {
      int v29 = *(int *)((char *)v26 + v28);
      if (v29 != -1)
      {
        LODWORD(v33) = 51;
        int v35 = v29;
        sub_78B0E8((uint64_t)a4, &v33, &v35);
      }
    }
  }
  sub_948260(a1, &v36, (uint64_t)&v33);
  long long v30 = v33;
  BOOL v31 = v34;
  if (v33 != v34)
  {
    do
    {
      int v35 = *v30;
      int v32 = v30[1];
      sub_78B0E8((uint64_t)a4, &v35, &v32);
      v30 += 2;
    }
    while (v30 != v31);
    long long v30 = v33;
  }
  if (v30)
  {
    v34 = v30;
    operator delete(v30);
  }
}

void sub_948150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v13 = *(void **)v11;
  if (!*(void *)v11) {
    _Unwind_Resume(exception_object);
  }
  *(void *)(v11 + 8) = v13;
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

int *sub_948260@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  double result = (int *)sub_8ED3D4(a1, *a2, 0, "hall");
  uint64_t v5 = (unsigned __int16 *)((char *)result - *result);
  if (*v5 >= 0x1Du
    && (uint64_t v6 = v5[14]) != 0
    && (int v7 = (unsigned int *)((char *)result + v6 + *(unsigned int *)((char *)result + v6)), v8 = *v7, v8))
  {
    uint64_t v9 = 8 * v8;
    uint64_t v10 = (char *)operator new(8 * v8);
    *(void *)&long long v14 = v10;
    *((void *)&v14 + 1) = v10;
    uint64_t v15 = &v10[v9];
    uint64_t v11 = (uint64_t *)(v7 + 1);
    do
    {
      uint64_t v16 = *v11;
      double result = (int *)sub_949154((unint64_t *)&v14, (uint64_t)v10, (uint64_t)&v16);
      uint64_t v10 = (char *)(result + 2);
      ++v11;
      v9 -= 8;
    }
    while (v9);
    long long v12 = v14;
    uint64_t v13 = v15;
  }
  else
  {
    uint64_t v13 = 0;
    long long v12 = 0uLL;
  }
  *(_OWORD *)a3 = v12;
  *(void *)(a3 + 16) = v13;
  return result;
}

void sub_948334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_948350(uint64_t a1@<X1>, unint64_t a2@<X2>, void *a3@<X8>)
{
  unint64_t v40 = a2;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  uint64_t v6 = (int *)sub_8DFD1C(a1, a2, 0, "line");
  int v7 = (unsigned __int16 *)((char *)v6 - *v6);
  if (*v7 >= 0x21u)
  {
    uint64_t v8 = v7[16];
    if (v8)
    {
      int v9 = *(int *)((char *)v6 + v8);
      if (v9 != -1)
      {
        LODWORD(v37) = 50;
        int v39 = v9;
        sub_78B0E8((uint64_t)a3, &v37, &v39);
      }
    }
  }
  uint64_t v10 = (int *)sub_8DFD1C(a1, a2, 0, "line");
  uint64_t v11 = (unsigned __int16 *)((char *)v10 - *v10);
  if (*v11 >= 0x39u)
  {
    uint64_t v12 = v11[28];
    if (v12)
    {
      uint64_t v13 = (int *)((char *)v10 + v12 + *(unsigned int *)((char *)v10 + v12));
      long long v14 = (unsigned __int16 *)((char *)v13 - *v13);
      if (*v14 >= 5u)
      {
        uint64_t v15 = v14[2];
        if (v15)
        {
          uint64_t v16 = (int *)((char *)v13 + v15 + *(unsigned int *)((char *)v13 + v15));
          int v17 = (unsigned __int16 *)((char *)v16 - *v16);
          if (*v17 >= 9u)
          {
            uint64_t v18 = v17[4];
            if (v18)
            {
              int v19 = *((unsigned __int8 *)v16 + v18);
              int v20 = 15;
              switch(v19)
              {
                case 0:
                  int v20 = 13;
                  goto LABEL_20;
                case 1:
                  int v20 = 0;
                  goto LABEL_20;
                case 2:
                  int v20 = 1;
                  goto LABEL_20;
                case 3:
                  int v20 = 2;
                  goto LABEL_20;
                case 4:
                  int v20 = 14;
                  goto LABEL_20;
                case 5:
                  goto LABEL_20;
                case 6:
                  int v20 = 16;
LABEL_20:
                  LODWORD(v37) = 10;
                  int v39 = v20;
                  sub_78B0E8((uint64_t)a3, &v37, &v39);
                  break;
                default:
                  if (v19 != 127)
                  {
                    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(exception, "Unexpected significance value");
                  }
                  return;
              }
            }
          }
        }
      }
    }
  }
  unsigned int v22 = (int *)sub_8DFD1C(a1, a2, 0, "line");
  unsigned __int16 v23 = (unsigned __int16 *)((char *)v22 - *v22);
  if (*v23 >= 0x3Bu)
  {
    uint64_t v24 = v23[29];
    if (v24)
    {
      unsigned __int16 v25 = (char *)v22 + v24 + *(unsigned int *)((char *)v22 + v24);
      if (*(_DWORD *)v25)
      {
        uint64_t v26 = (int *)sub_949820(a1, *(void *)(v25 + 4), 0, "cartographic line group");
        char v27 = (unsigned __int16 *)((char *)v26 - *v26);
        if (*v27 >= 5u)
        {
          uint64_t v28 = v27[2];
          if (v28)
          {
            int v29 = *(int *)((char *)v26 + v28);
            if (v29 != -1)
            {
              LODWORD(v37) = 53;
              int v39 = v29;
              sub_78B0E8((uint64_t)a3, &v37, &v39);
            }
          }
        }
      }
    }
  }
  long long v30 = (int *)sub_8DFD1C(a1, a2, 0, "line");
  BOOL v31 = (unsigned __int16 *)((char *)v30 - *v30);
  if (*v31 < 0x11u || (v32 = v31[8]) == 0 || (unsigned __int16 v33 = *(_WORD *)((char *)v30 + v32), v33 == 0x7FFF)) {
    unsigned __int16 v33 = 700;
  }
  LODWORD(v37) = 37;
  int v39 = v33;
  sub_78B0E8((uint64_t)a3, &v37, &v39);
  sub_9487A8(a1, &v40, (uint64_t)&v37);
  v34 = v37;
  int v35 = v38;
  if (v37 != v38)
  {
    do
    {
      int v39 = *v34;
      int v36 = v34[1];
      sub_78B0E8((uint64_t)a3, &v39, &v36);
      v34 += 2;
    }
    while (v34 != v35);
    v34 = v37;
  }
  if (v34)
  {
    char v38 = v34;
    operator delete(v34);
  }
}

void sub_948698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v13 = *(void **)v11;
  if (!*(void *)v11) {
    _Unwind_Resume(exception_object);
  }
  *(void *)(v11 + 8) = v13;
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

int *sub_9487A8@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  double result = (int *)sub_8DFD1C(a1, *a2, 0, "line");
  uint64_t v5 = (unsigned __int16 *)((char *)result - *result);
  if (*v5 >= 0x33u
    && (uint64_t v6 = v5[25]) != 0
    && (int v7 = (unsigned int *)((char *)result + v6 + *(unsigned int *)((char *)result + v6)), v8 = *v7, v8))
  {
    uint64_t v9 = 8 * v8;
    uint64_t v10 = (char *)operator new(8 * v8);
    *(void *)&long long v14 = v10;
    *((void *)&v14 + 1) = v10;
    uint64_t v15 = &v10[v9];
    uint64_t v11 = (uint64_t *)(v7 + 1);
    do
    {
      uint64_t v16 = *v11;
      double result = (int *)sub_949154((unint64_t *)&v14, (uint64_t)v10, (uint64_t)&v16);
      uint64_t v10 = (char *)(result + 2);
      ++v11;
      v9 -= 8;
    }
    while (v9);
    long long v12 = v14;
    uint64_t v13 = v15;
  }
  else
  {
    uint64_t v13 = 0;
    long long v12 = 0uLL;
  }
  *(_OWORD *)a3 = v12;
  *(void *)(a3 + 16) = v13;
  return result;
}

void sub_94887C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_948898(uint64_t a1@<X1>, unint64_t a2@<X2>, void *a3@<X8>)
{
  unint64_t v34 = a2;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  LODWORD(v31) = 42;
  int v33 = 0;
  sub_78B0E8((uint64_t)a3, &v31, &v33);
  uint64_t v6 = (int *)sub_498D5C(a1, a2, 0, "stop");
  int v7 = (unsigned __int16 *)((char *)v6 - *v6);
  if (*v7 >= 0x2Fu)
  {
    uint64_t v8 = v7[23];
    if (v8)
    {
      uint64_t v9 = (int *)((char *)v6 + v8 + *(unsigned int *)((char *)v6 + v8));
      uint64_t v10 = (unsigned __int16 *)((char *)v9 - *v9);
      if (*v10 >= 5u)
      {
        uint64_t v11 = v10[2];
        if (v11)
        {
          long long v12 = (int *)((char *)v9 + v11 + *(unsigned int *)((char *)v9 + v11));
          uint64_t v13 = (unsigned __int16 *)((char *)v12 - *v12);
          if (*v13 >= 9u)
          {
            uint64_t v14 = v13[4];
            if (v14)
            {
              int v15 = *((unsigned __int8 *)v12 + v14);
              int v16 = 15;
              switch(v15)
              {
                case 0:
                  int v16 = 13;
                  goto LABEL_16;
                case 1:
                  int v16 = 0;
                  goto LABEL_16;
                case 2:
                  int v16 = 1;
                  goto LABEL_16;
                case 3:
                  int v16 = 2;
                  goto LABEL_16;
                case 4:
                  int v16 = 14;
                  goto LABEL_16;
                case 5:
                  goto LABEL_16;
                case 6:
                  int v16 = 16;
LABEL_16:
                  LODWORD(v31) = 10;
                  int v33 = v16;
                  sub_78B0E8((uint64_t)a3, &v31, &v33);
                  break;
                default:
                  if (v15 != 127)
                  {
                    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(exception, "Unexpected significance value");
                  }
                  return;
              }
            }
          }
        }
      }
    }
  }
  LODWORD(v31) = 6;
  int v33 = 225;
  sub_78B0E8((uint64_t)a3, &v31, &v33);
  uint64_t v18 = (int *)sub_498D5C(a1, a2, 0, "stop");
  int v19 = (unsigned __int16 *)((char *)v18 - *v18);
  unsigned int v20 = *v19;
  if (v20 < 0x19)
  {
    if (v20 < 0x17) {
      goto LABEL_30;
    }
  }
  else if (v19[12])
  {
    unsigned __int16 v21 = *(_WORD *)((char *)v18 + v19[12]);
    uint64_t v22 = v19[11];
    if (!v19[11]) {
      goto LABEL_20;
    }
    goto LABEL_26;
  }
  unsigned __int16 v21 = 0x7FFF;
  uint64_t v22 = v19[11];
  if (!v19[11])
  {
LABEL_20:
    if (v21 == 0x7FFF) {
      unsigned __int16 v21 = 0x7FFF;
    }
    if (v21 == 0x7FFF) {
      goto LABEL_30;
    }
LABEL_29:
    LODWORD(v31) = 37;
    int v33 = v21;
    sub_78B0E8((uint64_t)a3, &v31, &v33);
    goto LABEL_30;
  }
LABEL_26:
  unsigned __int16 v23 = *(_WORD *)((char *)v18 + v22);
  if (v21 == 0x7FFF) {
    unsigned __int16 v21 = v23;
  }
  if (v21 != 0x7FFF) {
    goto LABEL_29;
  }
LABEL_30:
  uint64_t v24 = (int *)sub_498D5C(a1, a2, 0, "stop");
  unsigned __int16 v25 = (unsigned __int16 *)((char *)v24 - *v24);
  if (*v25 >= 0x1Bu)
  {
    uint64_t v26 = v25[13];
    if (v26)
    {
      int v27 = *(int *)((char *)v24 + v26);
      if (v27 != -1)
      {
        LODWORD(v31) = 51;
        int v33 = v27;
        sub_78B0E8((uint64_t)a3, &v31, &v33);
      }
    }
  }
  sub_948CC8(a1, &v34, (uint64_t)&v31);
  uint64_t v28 = v31;
  int v29 = v32;
  if (v31 != v32)
  {
    do
    {
      int v33 = *v28;
      int v30 = v28[1];
      sub_78B0E8((uint64_t)a3, &v33, &v30);
      v28 += 2;
    }
    while (v28 != v29);
    uint64_t v28 = v31;
  }
  if (v28)
  {
    uint64_t v32 = v28;
    operator delete(v28);
  }
}

void sub_948BB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v13 = *(void **)v11;
  if (!*(void *)v11) {
    _Unwind_Resume(exception_object);
  }
  *(void *)(v11 + 8) = v13;
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

int *sub_948CC8@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  double result = (int *)sub_498D5C(a1, *a2, 0, "stop");
  uint64_t v5 = (unsigned __int16 *)((char *)result - *result);
  if (*v5 >= 0x1Fu
    && (uint64_t v6 = v5[15]) != 0
    && (int v7 = (unsigned int *)((char *)result + v6 + *(unsigned int *)((char *)result + v6)), v8 = *v7, v8))
  {
    uint64_t v9 = 8 * v8;
    uint64_t v10 = (char *)operator new(8 * v8);
    *(void *)&long long v14 = v10;
    *((void *)&v14 + 1) = v10;
    int v15 = &v10[v9];
    uint64_t v11 = (uint64_t *)(v7 + 1);
    do
    {
      uint64_t v16 = *v11;
      double result = (int *)sub_949154((unint64_t *)&v14, (uint64_t)v10, (uint64_t)&v16);
      uint64_t v10 = (char *)(result + 2);
      ++v11;
      v9 -= 8;
    }
    while (v9);
    long long v12 = v14;
    uint64_t v13 = v15;
  }
  else
  {
    uint64_t v13 = 0;
    long long v12 = 0uLL;
  }
  *(_OWORD *)a3 = v12;
  *(void *)(a3 + 16) = v13;
  return result;
}

void sub_948D9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_948DB8(uint64_t a1@<X1>, unint64_t a2@<X2>, void *a3@<X8>)
{
  unint64_t v26 = a2;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  uint64_t v6 = (int *)sub_8EF9B8(a1, a2, 0, "system");
  int v7 = (unsigned __int16 *)((char *)v6 - *v6);
  if (*v7 >= 0x11u)
  {
    uint64_t v8 = v7[8];
    if (v8)
    {
      int v9 = *(int *)((char *)v6 + v8);
      if (v9 != -1)
      {
        LODWORD(v23) = 49;
        int v25 = v9;
        sub_78B0E8((uint64_t)a3, &v23, &v25);
      }
    }
  }
  uint64_t v10 = (int *)sub_8EF9B8(a1, a2, 0, "system");
  uint64_t v11 = (unsigned __int16 *)((char *)v10 - *v10);
  unsigned int v12 = *v11;
  if (v12 < 0xF)
  {
    if (v12 < 0xD) {
      goto LABEL_18;
    }
  }
  else if (v11[7])
  {
    unsigned __int16 v13 = *(_WORD *)((char *)v10 + v11[7]);
    uint64_t v14 = v11[6];
    if (!v11[6]) {
      goto LABEL_8;
    }
    goto LABEL_14;
  }
  unsigned __int16 v13 = 0x7FFF;
  uint64_t v14 = v11[6];
  if (!v11[6])
  {
LABEL_8:
    if (v13 == 0x7FFF) {
      unsigned __int16 v13 = 0x7FFF;
    }
    if (v13 == 0x7FFF) {
      goto LABEL_18;
    }
LABEL_17:
    LODWORD(v23) = 37;
    int v25 = v13;
    sub_78B0E8((uint64_t)a3, &v23, &v25);
    goto LABEL_18;
  }
LABEL_14:
  unsigned __int16 v15 = *(_WORD *)((char *)v10 + v14);
  if (v13 == 0x7FFF) {
    unsigned __int16 v13 = v15;
  }
  if (v13 != 0x7FFF) {
    goto LABEL_17;
  }
LABEL_18:
  uint64_t v16 = (int *)sub_8EF9B8(a1, a2, 0, "system");
  int v17 = (unsigned __int16 *)((char *)v16 - *v16);
  if (*v17 >= 0x19u)
  {
    uint64_t v18 = v17[12];
    if (v18)
    {
      int v19 = *((unsigned __int8 *)v16 + v18);
      if (v19 != 127)
      {
        LODWORD(v23) = 54;
        int v25 = v19;
        sub_78B0E8((uint64_t)a3, &v23, &v25);
      }
    }
  }
  sub_949064(a1, &v26, (uint64_t)&v23);
  unsigned int v20 = v23;
  unsigned __int16 v21 = v24;
  if (v23 != v24)
  {
    do
    {
      int v25 = *v20;
      int v22 = v20[1];
      sub_78B0E8((uint64_t)a3, &v25, &v22);
      v20 += 2;
    }
    while (v20 != v21);
    unsigned int v20 = v23;
  }
  if (v20)
  {
    uint64_t v24 = v20;
    operator delete(v20);
  }
}

void sub_948FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  unsigned __int16 v13 = *(void **)v11;
  if (!*(void *)v11) {
    _Unwind_Resume(exception_object);
  }
  *(void *)(v11 + 8) = v13;
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

int *sub_949064@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  double result = (int *)sub_8EF9B8(a1, *a2, 0, "system");
  uint64_t v5 = (unsigned __int16 *)((char *)result - *result);
  if (*v5 >= 0x15u
    && (uint64_t v6 = v5[10]) != 0
    && (int v7 = (unsigned int *)((char *)result + v6 + *(unsigned int *)((char *)result + v6)), v8 = *v7, v8))
  {
    uint64_t v9 = 8 * v8;
    uint64_t v10 = (char *)operator new(8 * v8);
    *(void *)&long long v14 = v10;
    *((void *)&v14 + 1) = v10;
    unsigned __int16 v15 = &v10[v9];
    uint64_t v11 = (uint64_t *)(v7 + 1);
    do
    {
      uint64_t v16 = *v11;
      double result = (int *)sub_949154((unint64_t *)&v14, (uint64_t)v10, (uint64_t)&v16);
      uint64_t v10 = (char *)(result + 2);
      ++v11;
      v9 -= 8;
    }
    while (v9);
    long long v12 = v14;
    unsigned __int16 v13 = v15;
  }
  else
  {
    unsigned __int16 v13 = 0;
    long long v12 = 0uLL;
  }
  *(_OWORD *)a3 = v12;
  *(void *)(a3 + 16) = v13;
  return result;
}

void sub_949138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_949154(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v7 = a2 - *a1;
  uint64_t v8 = v7 >> 3;
  uint64_t v9 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  unint64_t v10 = a1[2];
  if (v5 >= v10)
  {
    unint64_t v35 = ((uint64_t)(v5 - v6) >> 3) + 1;
    if (v35 >> 61) {
      sub_2E00();
    }
    uint64_t v36 = v10 - v6;
    if (v36 >> 2 > v35) {
      unint64_t v35 = v36 >> 2;
    }
    if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v37 = v35;
    }
    v71 = a1 + 2;
    if (v37)
    {
      if (v37 >> 61) {
        sub_188D718();
      }
      char v38 = (char *)operator new(8 * v37);
    }
    else
    {
      char v38 = 0;
    }
    v67 = v38;
    v68 = &v38[8 * v8];
    v69 = v68;
    v70 = &v38[8 * v37];
    sub_9495AC(&v67, (void *)a3);
    int v39 = v68;
    unint64_t v40 = (char *)*a1;
    uint64_t v41 = v68;
    if ((char *)*a1 != v9)
    {
      long long v42 = (unsigned char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
      unint64_t v43 = v42 - v40 - 8;
      v44 = v9;
      uint64_t v41 = v68;
      if (v43 < 0x58) {
        goto LABEL_59;
      }
      v44 = v9;
      uint64_t v41 = v68;
      if ((unint64_t)(v42 - v68) < 0x20) {
        goto LABEL_59;
      }
      uint64_t v45 = (v43 >> 3) + 1;
      uint64_t v46 = 8 * (v45 & 0x3FFFFFFFFFFFFFFCLL);
      v44 = &v9[-v46];
      uint64_t v41 = &v68[-v46];
      v47 = v68 - 16;
      char v48 = (long long *)(v6 + 8 * v8 - 16);
      uint64_t v49 = v45 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v50 = *v48;
        *((_OWORD *)v47 - 1) = *(v48 - 1);
        *(_OWORD *)v47 = v50;
        v47 -= 32;
        v48 -= 2;
        v49 -= 4;
      }
      while (v49);
      if (v45 != (v45 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_59:
        do
        {
          uint64_t v51 = *((void *)v44 - 1);
          v44 -= 8;
          *((void *)v41 - 1) = v51;
          v41 -= 8;
        }
        while (v44 != v40);
      }
    }
    v68 = v41;
    unint64_t v52 = (char *)a1[1];
    v53 = v69;
    if (v52 != v9)
    {
      v54 = (unsigned char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
      unint64_t v55 = v52 - v54 - 8;
      if (v55 < 0x38) {
        goto LABEL_46;
      }
      if ((unint64_t)(v69 - v54) < 0x20) {
        goto LABEL_46;
      }
      uint64_t v56 = (v55 >> 3) + 1;
      uint64_t v57 = 8 * (v56 & 0x3FFFFFFFFFFFFFFCLL);
      v9 += v57;
      v58 = &v69[v57];
      v59 = v69 + 16;
      v60 = (long long *)(v6 + 8 * v8 + 16);
      uint64_t v61 = v56 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v62 = *v60;
        *(v59 - 1) = *(v60 - 1);
        _OWORD *v59 = v62;
        v59 += 2;
        v60 += 2;
        v61 -= 4;
      }
      while (v61);
      v53 = v58;
      if (v56 != (v56 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_46:
        v58 = v53;
        do
        {
          uint64_t v63 = *(void *)v9;
          v9 += 8;
          *(void *)v58 = v63;
          v58 += 8;
        }
        while (v9 != v52);
      }
      uint64_t v41 = v68;
      uint64_t v9 = (char *)a1[1];
      v53 = v58;
    }
    v64 = (char *)*a1;
    *a1 = (unint64_t)v41;
    a1[1] = (unint64_t)v53;
    v65 = (char *)a1[2];
    a1[2] = (unint64_t)v70;
    v69 = v9;
    v70 = v65;
    v67 = v64;
    v68 = v64;
    if (v9 != v64) {
      v69 = &v9[(v64 - v9 + 7) & 0xFFFFFFFFFFFFFFF8];
    }
    if (v64) {
      operator delete(v64);
    }
    return v39;
  }
  else if (v9 == (char *)v5)
  {
    *(void *)uint64_t v9 = *(void *)a3;
    a1[1] = (unint64_t)(v9 + 8);
  }
  else
  {
    uint64_t v11 = v5 - (void)(v9 + 8);
    unint64_t v12 = v5 - 8;
    unsigned __int16 v13 = (void *)a1[1];
    if (v5 >= 8)
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      unsigned __int16 v15 = (unsigned char *)(v14 + v6);
      unint64_t v16 = v14 + v6 + 8;
      if (v5 > v16) {
        unint64_t v16 = a1[1];
      }
      unint64_t v17 = v16 + ~v6 - v14;
      uint64_t v18 = (uint64_t *)(v5 - 8);
      unsigned __int16 v13 = (void *)a1[1];
      if (v17 < 0x58) {
        goto LABEL_60;
      }
      uint64_t v18 = (uint64_t *)(v5 - 8);
      unsigned __int16 v13 = (void *)a1[1];
      if (v5 - (unint64_t)v15 < 0x20) {
        goto LABEL_60;
      }
      uint64_t v19 = (v17 >> 3) + 1;
      uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v18 = (uint64_t *)(v12 + v20);
      unsigned __int16 v13 = (void *)(v5 + v20);
      unsigned __int16 v21 = (_OWORD *)(v5 + 16);
      int v22 = (long long *)(8 * (v11 >> 3) + 8 * v8 + v6 + 16);
      uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v24 = *v22;
        *(v21 - 1) = *(v22 - 1);
        *unsigned __int16 v21 = v24;
        v21 += 2;
        v22 += 2;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_60:
        do
        {
          uint64_t v25 = *v18++;
          *v13++ = v25;
        }
        while ((unint64_t)v18 < v5);
      }
    }
    a1[1] = (unint64_t)v13;
    if ((char *)v5 != v9 + 8)
    {
      if ((unint64_t)(v11 - 8) < 0x78
        || v5 - (v11 & 0xFFFFFFFFFFFFFFF8) < v12
        && v6 + v11 + (v7 & 0xFFFFFFFFFFFFFFF8) - (v11 & 0xFFFFFFFFFFFFFFF8) < v5)
      {
        goto LABEL_19;
      }
      unint64_t v26 = ((unint64_t)(v11 - 8) >> 3) + 1;
      uint64_t v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      unint64_t v28 = v5 - v27;
      unint64_t v29 = v12 - v27;
      int v30 = (const float *)(v5 - 40);
      BOOL v31 = (float *)(v5 - 32);
      uint64_t v32 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        float32x4x2_t v72 = vld2q_f32(v30);
        v30 -= 8;
        vst2q_f32(v31, v72);
        v31 -= 8;
        v32 -= 4;
      }
      while (v32);
      unint64_t v5 = v28;
      unint64_t v12 = v29;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_19:
        int v33 = (_DWORD *)(v5 - 4);
        do
        {
          int v34 = *(_DWORD *)(v12 - 8);
          v12 -= 8;
          *(v33 - 1) = v34;
          *int v33 = *(_DWORD *)(v12 + 4);
          v33 -= 2;
        }
        while ((char *)v12 != v9);
      }
    }
    *(_DWORD *)uint64_t v9 = *(_DWORD *)a3;
    *(_DWORD *)(v6 + 8 * v8 + 4) = *(_DWORD *)(a3 + 4);
  }
  return v9;
}

void sub_949564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (a12 == a11)
  {
    unsigned __int16 v13 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  else
  {
    unsigned __int16 v13 = __p;
    if (!__p) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

void sub_9495AC(unsigned char **a1, void *a2)
{
  uint64_t v4 = a1[2];
  unint64_t v5 = v4;
  if (v4 != a1[3]) {
    goto LABEL_61;
  }
  unint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  if (v7 > *a1)
  {
    uint64_t v8 = (v7 - *a1) >> 3;
    if (v8 >= -1) {
      uint64_t v9 = v8 + 1;
    }
    else {
      uint64_t v9 = v8 + 2;
    }
    uint64_t v10 = v9 >> 1;
    uint64_t v11 = &v7[-8 * (v9 >> 1)];
    unint64_t v5 = v11;
    if (v7 == v4) {
      goto LABEL_53;
    }
    unint64_t v12 = v4 - v7 - 8;
    if (v12 < 0x118) {
      goto LABEL_51;
    }
    uint64_t v13 = -8 * v10;
    unint64_t v14 = v13 + (v12 & 0xFFFFFFFFFFFFFFF8);
    unsigned __int16 v15 = v7 + 4;
    unint64_t v16 = &v7[v14 + 4];
    unint64_t v17 = &v7[v13 + 4];
    unint64_t v18 = (unint64_t)&v7[v14 + 8];
    unint64_t v19 = (unint64_t)&v7[(v12 & 0xFFFFFFFFFFFFFFF8) + 4];
    unint64_t v20 = (unint64_t)&v7[(v12 & 0xFFFFFFFFFFFFFFF8) + 8];
    BOOL v21 = (unint64_t)v11 >= v19 || v7 >= v16;
    BOOL v22 = !v21;
    BOOL v23 = (unint64_t)v11 >= v20 || v15 >= v16;
    BOOL v24 = !v23;
    BOOL v25 = (unint64_t)v17 >= v19 || (unint64_t)v7 >= v18;
    BOOL v26 = !v25;
    BOOL v27 = (unint64_t)v17 >= v20 || (unint64_t)v15 >= v18;
    BOOL v28 = !v27;
    BOOL v29 = v17 >= v16 || (unint64_t)v11 >= v18;
    if (!v29 || v22 || v24 || v26 || v28)
    {
LABEL_51:
      unint64_t v5 = v11;
      uint64_t v32 = a1[1];
    }
    else
    {
      uint64_t v30 = (v12 >> 3) + 1;
      uint64_t v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFF8);
      unint64_t v5 = &v11[v31];
      uint64_t v32 = &v7[v31];
      uint64_t v33 = v30 & 0x3FFFFFFFFFFFFFF8;
      do
      {
        int v34 = &v7[v13];
        long long v35 = *((_OWORD *)v7 + 1);
        long long v37 = *((_OWORD *)v7 + 2);
        long long v36 = *((_OWORD *)v7 + 3);
        *(_OWORD *)int v34 = *(_OWORD *)v7;
        *((_OWORD *)v34 + 1) = v35;
        *((_OWORD *)v34 + 2) = v37;
        *((_OWORD *)v34 + 3) = v36;
        v7 += 64;
        v33 -= 8;
      }
      while (v33);
      if (v30 == (v30 & 0x3FFFFFFFFFFFFFF8)) {
        goto LABEL_53;
      }
    }
    do
    {
      *(_DWORD *)unint64_t v5 = *(_DWORD *)v32;
      *((_DWORD *)v5 + 1) = *((_DWORD *)v32 + 1);
      v5 += 8;
      v32 += 8;
    }
    while (v32 != v4);
LABEL_53:
    a1[1] = v11;
    a1[2] = v5;
    goto LABEL_61;
  }
  unint64_t v38 = (v4 - v6) >> 2;
  if (v4 == v6) {
    unint64_t v38 = 1;
  }
  if (v38 >> 61) {
    sub_188D718();
  }
  unint64_t v39 = v38 >> 2;
  uint64_t v40 = 8 * v38;
  uint64_t v41 = (char *)operator new(8 * v38);
  long long v42 = &v41[8 * v39];
  unint64_t v5 = v42;
  int64_t v43 = v4 - v7;
  if (v4 != v7)
  {
    unint64_t v5 = &v42[v43 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v44 = v43 - 8;
    if ((unint64_t)(v43 - 8) < 0x38)
    {
      uint64_t v45 = &v41[8 * v39];
      do
      {
LABEL_58:
        uint64_t v54 = *(void *)v7;
        v7 += 8;
        *(void *)uint64_t v45 = v54;
        v45 += 8;
      }
      while (v45 != v5);
      goto LABEL_59;
    }
    uint64_t v46 = &v41[8 * v39];
    uint64_t v45 = v46;
    if ((unint64_t)(v46 - v7) < 0x20) {
      goto LABEL_58;
    }
    uint64_t v47 = (v44 >> 3) + 1;
    uint64_t v48 = 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v45 = &v42[v48];
    uint64_t v49 = &v7[v48];
    long long v50 = (long long *)(v7 + 16);
    uint64_t v51 = v46 + 16;
    uint64_t v52 = v47 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v53 = *v50;
      *(v51 - 1) = *(v50 - 1);
      _OWORD *v51 = v53;
      v50 += 2;
      v51 += 2;
      v52 -= 4;
    }
    while (v52);
    uint64_t v7 = v49;
    if (v47 != (v47 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_58;
    }
  }
LABEL_59:
  *a1 = v41;
  a1[1] = v42;
  a1[2] = v5;
  a1[3] = &v41[v40];
  if (v6)
  {
    operator delete(v6);
    unint64_t v5 = a1[2];
  }
LABEL_61:
  *(void *)unint64_t v5 = *a2;
  a1[2] += 8;
}

uint64_t sub_949820(uint64_t a1, unint64_t a2, int a3, char *a4)
{
  unsigned int v6 = a2;
  unint64_t v8 = HIDWORD(a2);
  LODWORD(v61.__r_.__value_.__l.__data_) = a2;
  LODWORD(v60.__r_.__value_.__l.__data_) = a3;
  *(void *)&long long v62 = &v60;
  *((void *)&v62 + 1) = &v61;
  unint64_t v9 = *(void *)(a1 + 3856) + 1;
  *(void *)(a1 + 3856) = v9;
  uint64_t v10 = *(void *)a1;
  if (!v10) {
    goto LABEL_38;
  }
  uint64_t v11 = a1 + 16;
  if (*(_DWORD *)(a1 + 592) == a2)
  {
    unsigned int v12 = 24;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 616) == a2)
  {
    unsigned int v12 = 25;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 640) == a2)
  {
    unsigned int v12 = 26;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 664) == a2)
  {
    unsigned int v12 = 27;
LABEL_10:
    ++*(void *)(a1 + 3864);
    uint64_t v13 = v11 + 24 * v12;
    *(void *)(v13 + 8) = v9;
    unint64_t v14 = *(unsigned int **)(v13 + 16);
    if (v14) {
      goto LABEL_11;
    }
LABEL_38:
    sub_2A54B4((int **)&v62);
    unint64_t v18 = 0;
    if (a3 != 1) {
      goto LABEL_19;
    }
    return 0;
  }
  unint64_t v20 = *(void *)(a1 + 648);
  unint64_t v21 = *(void *)(a1 + 624);
  if (*(void *)(a1 + 600) >= v9)
  {
    int v22 = 0;
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + 600);
    int v22 = 24;
  }
  BOOL v23 = v21 >= v9;
  if (v21 < v9) {
    unint64_t v9 = *(void *)(a1 + 624);
  }
  int v24 = 25;
  if (v23) {
    int v24 = v22;
  }
  if (v20 >= v9) {
    unint64_t v25 = v9;
  }
  else {
    unint64_t v25 = *(void *)(a1 + 648);
  }
  unint64_t v26 = *(void *)(a1 + 672);
  if (v20 >= v9) {
    int v27 = v24;
  }
  else {
    int v27 = 26;
  }
  unint64_t v14 = (unsigned int *)sub_2AB884(v10, 6, a2, 1);
  unsigned int v28 = 27;
  if (v26 >= v25) {
    unsigned int v28 = v27;
  }
  uint64_t v29 = v11 + 24 * v28;
  *(_DWORD *)uint64_t v29 = v61.__r_.__value_.__l.__data_;
  *(void *)(v29 + 8) = *(void *)(a1 + 3856);
  *(void *)(v29 + 16) = v14;
  if (!v14) {
    goto LABEL_38;
  }
LABEL_11:
  unsigned __int16 v15 = (int *)((char *)v14 + *v14);
  unint64_t v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 < 9u)
  {
    unint64_t v18 = 0;
    if (a3 != 1) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v17 = v16[4];
    if (v17)
    {
      unint64_t v18 = (int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17));
      if (*v18 > v8) {
        return (uint64_t)&v18[v8 + 1] + v18[v8 + 1];
      }
    }
    else
    {
      unint64_t v18 = 0;
    }
    if (a3 != 1)
    {
LABEL_19:
      if (!a3)
      {
        exception = __cxa_allocate_exception(0x40uLL);
        uint64_t v31 = a4;
        uint64_t v32 = (uint64_t)exception;
        sub_5E5C(&v55, v31);
        uint64_t v33 = std::string::insert(&v55, 0, "Failed to acquire entity \"");
        long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
        v56.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v34;
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        long long v35 = std::string::append(&v56, "\" in quad node ");
        long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v57.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v54, v6);
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v37 = &v54;
        }
        else {
          long long v37 = (std::string *)v54.__r_.__value_.__r.__words[0];
        }
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v54.__r_.__value_.__l.__size_;
        }
        unint64_t v39 = std::string::append(&v57, (const std::string::value_type *)v37, size);
        long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v58.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        uint64_t v41 = std::string::append(&v58, " at position ");
        long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
        v59.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v42;
        v41->__r_.__value_.__l.__size_ = 0;
        v41->__r_.__value_.__r.__words[2] = 0;
        v41->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v53, v8);
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int64_t v43 = &v53;
        }
        else {
          int64_t v43 = (std::string *)v53.__r_.__value_.__r.__words[0];
        }
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v44 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v44 = v53.__r_.__value_.__l.__size_;
        }
        uint64_t v45 = std::string::append(&v59, (const std::string::value_type *)v43, v44);
        long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
        v60.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v46;
        v45->__r_.__value_.__l.__size_ = 0;
        v45->__r_.__value_.__r.__words[2] = 0;
        v45->__r_.__value_.__r.__words[0] = 0;
        uint64_t v47 = std::string::append(&v60, " on layer ");
        long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v61.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        uint64_t v49 = sub_736EC(6u);
        long long v50 = std::string::append(&v61, v49);
        long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
        std::string::size_type v63 = v50->__r_.__value_.__r.__words[2];
        long long v62 = v51;
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        uint64_t v52 = (void *)sub_2F404(v32, &v62);
      }
      return (uint64_t)&v18[v8 + 1] + v18[v8 + 1];
    }
  }
  return 0;
}

void sub_949BB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (*(char *)(v54 - 105) < 0) {
    operator delete(*(void **)(v54 - 128));
  }
  if (*(char *)(v54 - 137) < 0)
  {
    operator delete(*(void **)(v54 - 160));
    if ((*(char *)(v54 - 169) & 0x80000000) == 0)
    {
LABEL_5:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_15;
    }
  }
  else if ((*(char *)(v54 - 169) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v54 - 192));
  if ((a15 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a54 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(a10);
  if ((a54 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a47 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(a49);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a21 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a42);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a40 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a16);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a33 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a35);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a27 & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_12;
  }
LABEL_20:
  operator delete(a28);
  if ((a27 & 0x80000000) == 0) {
LABEL_21:
  }
    _Unwind_Resume(a1);
LABEL_12:
  operator delete(__p);
  goto LABEL_21;
}

char *sub_949D74(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_4200(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  *((void *)__dst + 3) = 0;
  *((void *)__dst + 4) = 0;
  *((void *)__dst + 5) = 0;
  sub_94AEF4((void *)__dst + 3, *((void *)a2 + 3), *((void *)a2 + 4), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 4));
  *((_DWORD *)__dst + 36) = 0;
  *((_OWORD *)__dst + 7) = 0u;
  *((_OWORD *)__dst + 8) = 0u;
  *((_OWORD *)__dst + 5) = 0u;
  *((_OWORD *)__dst + 6) = 0u;
  *((_OWORD *)__dst + 3) = 0u;
  *((_OWORD *)__dst + 4) = 0u;
  *(void *)(__dst + 148) = 0x8000000080000000;
  return __dst;
}

void sub_949E08(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_949E24(uint64_t a1)
{
  if (*(char *)(a1 + 143) < 0)
  {
    operator delete(*(void **)(a1 + 120));
    if ((*(char *)(a1 + 119) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 95) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((*(char *)(a1 + 119) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 96));
  if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(*(void **)(a1 + 72));
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
LABEL_5:
    uint64_t v2 = *(void **)(a1 + 24);
    if (!v2) {
      goto LABEL_6;
    }
LABEL_12:
    uint64_t v4 = *(void *)(a1 + 32);
    unint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        sub_94B370(a1 + 40, v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = *(void **)(a1 + 24);
    }
    *(void *)(a1 + 32) = v2;
    operator delete(v5);
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return a1;
    }
    goto LABEL_16;
  }
LABEL_11:
  operator delete(*(void **)(a1 + 48));
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2) {
    goto LABEL_12;
  }
LABEL_6:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
    return a1;
  }
LABEL_16:
  operator delete(*(void **)a1);
  return a1;
}

std::string *sub_949F20(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 2, a2);
}

std::string *sub_949F28(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 3, a2);
}

std::string *sub_949F30(uint64_t a1, int a2, std::string *__str)
{
  *(_DWORD *)(a1 + 148) = a2;
  return std::string::operator=((std::string *)(a1 + 96), __str);
}

std::string *sub_949F40(uint64_t a1, int a2, std::string *__str)
{
  *(_DWORD *)(a1 + 152) = a2;
  return std::string::operator=((std::string *)(a1 + 120), __str);
}

uint64_t sub_949F50(uint64_t result, int a2)
{
  *(_DWORD *)(result + 144) = a2;
  return result;
}

void sub_949F58(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(a2 + 56);
  uint64_t v5 = *(void *)(a2 + 64);
  if (v4 == v5 || (uint64_t v7 = (void *)(a1 + 144), !*(_DWORD *)(a1 + 144)))
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  else
  {
    unint64_t v25 = 0;
    unint64_t v26 = 0;
    uint64_t v27 = 0;
    sub_23708((uint64_t)&v25, 0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 4));
    unint64_t v9 = *(long long **)(a2 + 56);
    uint64_t v10 = *(long long **)(a2 + 64);
    if (v9 != v10)
    {
      uint64_t v11 = (uint64_t)v26;
      do
      {
        if (*((char *)v9 + 23) < 0)
        {
          sub_4200(__p, *(void **)v9, *((void *)v9 + 1));
        }
        else
        {
          long long v12 = *v9;
          uint64_t v32 = *((void *)v9 + 2);
          *(_OWORD *)std::string __p = v12;
        }
        uint64_t v13 = sub_8B3D0((void ***)&v25, v11, (__n128 *)__p);
        if (SHIBYTE(v32) < 0) {
          operator delete(__p[0]);
        }
        uint64_t v11 = v13 + 24;
        v9 += 3;
      }
      while (v9 != v10);
    }
    uint64_t v14 = sub_656AC();
    __p[0] = v7;
    __p[1] = (void *)(a1 + 148);
    LODWORD(v32) = 4;
    uint64_t v33 = 1;
    v28[0] = v25;
    v28[1] = v26;
    int v29 = 0;
    unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * (((char *)v26 - (unsigned char *)v25) >> 3);
    signed int v15 = (*(uint64_t (**)(uint64_t, void **, void *))(*(void *)v14 + 40))(v14, __p, v28);
    uint64_t v16 = *(void *)(a2 + 56);
    unint64_t v17 = *(void *)(a2 + 64) - v16;
    if (!v17) {
      sub_66748();
    }
    BOOL v18 = v15 >= (int)(-1431655765 * (v17 >> 4)) || v15 <= -1;
    unsigned int v19 = v15;
    if (v18) {
      unsigned int v19 = 0;
    }
    uint64_t v20 = v16 + 48 * v19;
    if (*(char *)(v20 + 47) < 0)
    {
      sub_4200((unsigned char *)a3, *(void **)(v20 + 24), *(void *)(v20 + 32));
    }
    else
    {
      long long v21 = *(_OWORD *)(v20 + 24);
      *(void *)(a3 + 16) = *(void *)(v20 + 40);
      *(_OWORD *)a3 = v21;
    }
    int v22 = (void **)v25;
    if (v25)
    {
      BOOL v23 = v26;
      int v24 = v25;
      if (v26 != v25)
      {
        do
        {
          if (*((char *)v23 - 1) < 0) {
            operator delete(*(v23 - 3));
          }
          v23 -= 3;
        }
        while (v23 != v22);
        int v24 = v25;
      }
      unint64_t v26 = v22;
      operator delete(v24);
    }
  }
}

void sub_94A184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (!__p) {
    _Unwind_Resume(exception_object);
  }
  BOOL v23 = a11;
  int v24 = __p;
  if (a11 != __p)
  {
    do
    {
      if (*((char *)v23 - 1) < 0) {
        operator delete(*(v23 - 3));
      }
      v23 -= 3;
    }
    while (v23 != __p);
    int v24 = __p;
  }
  operator delete(v24);
  _Unwind_Resume(exception_object);
}

void sub_94A220(int a1@<W1>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  if (a1 != 0x7FFFFFFFLL)
  {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
    if ((v6 & 0x80u) != 0) {
      uint64_t v6 = *(void *)(a2 + 8);
    }
    if (v6)
    {
      uint64_t v7 = *(unsigned __int8 *)(a3 + 23);
      if ((v7 & 0x80u) != 0) {
        uint64_t v7 = *(void *)(a3 + 8);
      }
      if (v7)
      {
        sub_26A18((uint64_t)v9, (const char *)a2);
        sub_480C((uint64_t)&v8, a1);
      }
    }
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
}

void sub_94A2EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, const void *a15)
{
}

void sub_94A308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_26C4C((const void **)va);
  _Unwind_Resume(a1);
}

void sub_94A31C(void *__s2@<X1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  if (v6 != v7)
  {
    if (*((char *)__s2 + 23) >= 0) {
      uint64_t v8 = *((unsigned __int8 *)__s2 + 23);
    }
    else {
      uint64_t v8 = __s2[1];
    }
    if ((*((unsigned char *)__s2 + 23) & 0x80) != 0)
    {
      unint64_t v9 = (unsigned __int8 *)*__s2;
      while (1)
      {
        uint64_t v13 = *(unsigned __int8 *)(v6 + 23);
        if ((v13 & 0x80u) == 0) {
          uint64_t v14 = *(unsigned __int8 *)(v6 + 23);
        }
        else {
          uint64_t v14 = *(void *)(v6 + 8);
        }
        if (v14 == v8)
        {
          if ((v13 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v6, v9, *(void *)(v6 + 8))) {
              goto LABEL_30;
            }
          }
          else
          {
            if (!*(unsigned char *)(v6 + 23)) {
              goto LABEL_30;
            }
            uint64_t v15 = 0;
            while (*(unsigned __int8 *)(v6 + v15) == v9[v15])
            {
              if (v13 == ++v15) {
                goto LABEL_30;
              }
            }
          }
        }
        v6 += 80;
        if (v6 == v7) {
          goto LABEL_32;
        }
      }
    }
    while (1)
    {
      uint64_t v10 = *(unsigned __int8 *)(v6 + 23);
      if ((v10 & 0x80u) == 0) {
        uint64_t v11 = *(unsigned __int8 *)(v6 + 23);
      }
      else {
        uint64_t v11 = *(void *)(v6 + 8);
      }
      if (v11 == v8)
      {
        if ((v10 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v6, __s2, *(void *)(v6 + 8))) {
            break;
          }
        }
        else
        {
          if (!*(unsigned char *)(v6 + 23)) {
            break;
          }
          uint64_t v12 = 0;
          while (*(unsigned __int8 *)(v6 + v12) == *((unsigned __int8 *)__s2 + v12))
          {
            if (v10 == ++v12) {
              goto LABEL_30;
            }
          }
        }
      }
      v6 += 80;
      if (v6 == v7) {
        goto LABEL_32;
      }
    }
  }
LABEL_30:
  if (v6 == v7)
  {
LABEL_32:
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)(a3 + 112) = 0u;
    *(void *)(a3 + 160) = 0;
    *(_OWORD *)(a3 + 128) = 0u;
    *(_OWORD *)(a3 + 144) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(void *)(a3 + 52) = -1;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 108) = 0u;
    *(unsigned char *)(a3 + 124) = 1;
    *(_DWORD *)(a3 + 160) = 0x7FFFFFFF;
  }
  else
  {
    switch(*(unsigned char *)(v6 + 24))
    {
      case 1:
        int v28 = 0;
        int v32 = 1;
        *(_OWORD *)&v34[8] = 0u;
        memset(__dst, 0, 32);
        *(void *)&__dst[28] = -1;
        long long v29 = 0u;
        long long v30 = 0u;
        memset(v31, 0, sizeof(v31));
        long long v33 = 0u;
        *(_OWORD *)long long v34 = 0u;
        *(_DWORD *)&v34[16] = 0x7FFFFFFF;
        if (*(char *)(a2 + 71) < 0)
        {
          sub_4200((unsigned char *)a3, *(void **)(a2 + 48), *(void *)(a2 + 56));
        }
        else
        {
          *(_OWORD *)a3 = *(_OWORD *)(a2 + 48);
          *(void *)(a3 + 16) = *(void *)(a2 + 64);
        }
        goto LABEL_49;
      case 2:
        int v28 = 0;
        int v32 = 1;
        *(_OWORD *)&v34[8] = 0u;
        memset(__dst, 0, 32);
        *(void *)&__dst[28] = -1;
        long long v29 = 0u;
        long long v30 = 0u;
        memset(v31, 0, sizeof(v31));
        long long v33 = 0u;
        *(_OWORD *)long long v34 = 0u;
        *(_DWORD *)&v34[16] = 0x7FFFFFFF;
        if (*(char *)(a2 + 95) < 0)
        {
          sub_4200((unsigned char *)a3, *(void **)(a2 + 72), *(void *)(a2 + 80));
        }
        else
        {
          *(_OWORD *)a3 = *(_OWORD *)(a2 + 72);
          *(void *)(a3 + 16) = *(void *)(a2 + 88);
        }
LABEL_49:
        sub_4F5C8C((_DWORD *)(a3 + 24), (long long *)__dst);
        sub_4DC6B8((uint64_t)__dst);
        return;
      case 3:
        sub_94A220(*(_DWORD *)(a2 + 148), a2 + 96, v6 + 32, __p);
        int v28 = 0;
        int v32 = 1;
        *(_OWORD *)&v34[8] = 0u;
        memset(__dst, 0, 32);
        *(void *)&__dst[28] = -1;
        long long v29 = 0u;
        long long v30 = 0u;
        memset(v31, 0, sizeof(v31));
        long long v33 = 0u;
        *(_OWORD *)long long v34 = 0u;
        *(_DWORD *)&v34[16] = 0x7FFFFFFF;
        if (SHIBYTE(v26) < 0) {
          goto LABEL_50;
        }
        *(_OWORD *)a3 = *(_OWORD *)__p;
        *(void *)(a3 + 16) = v26;
        goto LABEL_51;
      case 4:
        sub_94A220(*(_DWORD *)(a2 + 152), a2 + 120, v6 + 32, __p);
        int v28 = 0;
        int v32 = 1;
        *(_OWORD *)&v34[8] = 0u;
        memset(__dst, 0, 32);
        *(void *)&__dst[28] = -1;
        long long v29 = 0u;
        long long v30 = 0u;
        memset(v31, 0, sizeof(v31));
        long long v33 = 0u;
        *(_OWORD *)long long v34 = 0u;
        *(_DWORD *)&v34[16] = 0x7FFFFFFF;
        if (SHIBYTE(v26) < 0) {
          goto LABEL_50;
        }
        *(_OWORD *)a3 = *(_OWORD *)__p;
        *(void *)(a3 + 16) = v26;
        goto LABEL_51;
      case 5:
        sub_949F58(a2, v6, (uint64_t)__p);
        int v28 = 0;
        int v32 = 1;
        *(_OWORD *)&v34[8] = 0u;
        memset(__dst, 0, 32);
        *(void *)&__dst[28] = -1;
        long long v29 = 0u;
        long long v30 = 0u;
        memset(v31, 0, sizeof(v31));
        long long v33 = 0u;
        *(_OWORD *)long long v34 = 0u;
        *(_DWORD *)&v34[16] = 0x7FFFFFFF;
        if (SHIBYTE(v26) < 0)
        {
LABEL_50:
          sub_4200((unsigned char *)a3, __p[0], (unint64_t)__p[1]);
        }
        else
        {
          *(_OWORD *)a3 = *(_OWORD *)__p;
          *(void *)(a3 + 16) = v26;
        }
LABEL_51:
        sub_4F5C8C((_DWORD *)(a3 + 24), (long long *)__dst);
        sub_4DC6B8((uint64_t)__dst);
        if (SHIBYTE(v26) < 0) {
          goto LABEL_52;
        }
        return;
      case 6:
        std::operator+<char>();
        uint64_t v16 = std::string::append((std::string *)__dst, "}");
        long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
        std::string::size_type v26 = v16->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v17;
        v16->__r_.__value_.__l.__size_ = 0;
        v16->__r_.__value_.__r.__words[2] = 0;
        v16->__r_.__value_.__r.__words[0] = 0;
        if ((__dst[23] & 0x80000000) != 0) {
          operator delete(*(void **)__dst);
        }
        sub_5F1DD0(__dst, (long long *)__p, 9);
        if (SHIBYTE(v26) < 0)
        {
          sub_4200((unsigned char *)a3, __p[0], (unint64_t)__p[1]);
        }
        else
        {
          *(_OWORD *)a3 = *(_OWORD *)__p;
          *(void *)(a3 + 16) = v26;
        }
        *(_OWORD *)(a3 + 24) = *(_OWORD *)__dst;
        uint64_t v18 = *(void *)&__dst[16];
        uint64_t v19 = *(void *)&__dst[24];
        *(_OWORD *)&__dst[8] = 0u;
        long long v20 = v29;
        long long v29 = 0u;
        long long v21 = v30;
        long long v30 = 0u;
        *(_OWORD *)(a3 + 64) = v20;
        *(_OWORD *)(a3 + 80) = v21;
        *(_OWORD *)(a3 + 96) = *(_OWORD *)v31;
        *(_OWORD *)uint64_t v31 = 0u;
        long long v22 = v33;
        long long v33 = 0u;
        long long v23 = *(_OWORD *)v34;
        *(_OWORD *)long long v34 = 0u;
        *(void *)__dst = 0;
        *(void *)(a3 + 40) = v18;
        *(void *)(a3 + 48) = v19;
        *(_DWORD *)(a3 + 56) = *(_DWORD *)&__dst[32];
        uint64_t v24 = *(void *)&v31[16];
        *(void *)&v31[16] = 0;
        *(void *)(a3 + 112) = v24;
        LODWORD(v24) = *(_DWORD *)&v31[24];
        *(unsigned char *)(a3 + 124) = v32;
        *(_DWORD *)(a3 + 120) = v24;
        *(_OWORD *)(a3 + 128) = v22;
        *(_OWORD *)(a3 + 144) = v23;
        *(_DWORD *)(a3 + 160) = *(_DWORD *)&v34[16];
        sub_4DC6B8((uint64_t)__dst);
        if (SHIBYTE(v26) < 0) {
LABEL_52:
        }
          operator delete(__p[0]);
        break;
      default:
        goto LABEL_32;
    }
  }
}

void sub_94A8BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_94A934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (*(char *)(v5 + 23) < 0) {
    operator delete(*(void **)v5);
  }
  sub_4DC6B8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_94A95C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if ((a14 & 0x80000000) == 0) {
    JUMPOUT(0x94A92CLL);
  }
  JUMPOUT(0x94A924);
}

void sub_94A96C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    JUMPOUT(0x94A928);
  }
  JUMPOUT(0x94A92CLL);
}

uint64_t sub_94A99C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_94AA40(a1, (uint64_t)v5);
  if (sub_45FB38(v5))
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    return sub_4D4B58((uint64_t)v5);
  }
  if (*(char *)(v5[0] + 23) < 0)
  {
    sub_4200((unsigned char *)a2, *(void **)v5[0], *(void *)(v5[0] + 8));
    return sub_4D4B58((uint64_t)v5);
  }
  long long v4 = *(_OWORD *)v5[0];
  *(void *)(a2 + 16) = *(void *)(v5[0] + 16);
  *(_OWORD *)a2 = v4;
  return sub_4D4B58((uint64_t)v5);
}

void sub_94AA2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_94AA40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_5F3B34((uint64_t)&v46);
  if (*(char *)(a1 + 23) < 0) {
    sub_4200(&v45, *(void **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v45 = *(std::string *)a1;
  }
  std::string::size_type size = HIBYTE(v45.__r_.__value_.__r.__words[2]);
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v45.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    std::string::size_type v4 = 0;
    uint64_t v5 = (long long *)v41;
    while (1)
    {
      std::string::size_type v7 = std::string::find(&v45, 123, v4);
      if (v7 == -1) {
        goto LABEL_60;
      }
      std::string::size_type v8 = v7;
      std::string::size_type v9 = v7 + 1;
      std::string::size_type v10 = std::string::find(&v45, 125, v7 + 1);
      if (v10 == -1) {
        goto LABEL_60;
      }
      std::string::size_type v11 = v10 - v8;
      unint64_t v12 = v10 - v8 - 1;
      if (v10 - v8 != 1) {
        break;
      }
      std::string::size_type v4 = v10;
LABEL_9:
      ++v4;
      std::string::size_type v6 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
      if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v6 = v45.__r_.__value_.__l.__size_;
      }
      if (v4 >= v6) {
        goto LABEL_60;
      }
    }
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v45.__r_.__value_.__l.__size_ <= v8) {
LABEL_64:
      }
        sub_5AD0();
      uint64_t v13 = (std::string *)v45.__r_.__value_.__r.__words[0];
      if (v45.__r_.__value_.__l.__size_ - v9 >= v12) {
        size_t v14 = v10 - v8 - 1;
      }
      else {
        size_t v14 = v45.__r_.__value_.__l.__size_ - v9;
      }
      if (v14 >= 0x7FFFFFFFFFFFFFF8) {
LABEL_65:
      }
        sub_188D690();
    }
    else
    {
      if (v8 >= HIBYTE(v45.__r_.__value_.__r.__words[2])) {
        goto LABEL_64;
      }
      uint64_t v13 = &v45;
      if (HIBYTE(v45.__r_.__value_.__r.__words[2]) - v9 >= v12) {
        size_t v14 = v10 - v8 - 1;
      }
      else {
        size_t v14 = HIBYTE(v45.__r_.__value_.__r.__words[2]) - v9;
      }
      if (v14 >= 0x7FFFFFFFFFFFFFF8) {
        goto LABEL_65;
      }
    }
    if (v14 >= 0x17)
    {
      uint64_t v16 = a1;
      long long v17 = v5;
      uint64_t v18 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17) {
        uint64_t v18 = v14 | 7;
      }
      uint64_t v19 = v18 + 1;
      uint64_t v15 = (void **)operator new(v18 + 1);
      __dst[1] = (void *)v14;
      unint64_t v44 = v19 | 0x8000000000000000;
      __dst[0] = v15;
      uint64_t v5 = v17;
      a1 = v16;
    }
    else
    {
      HIBYTE(v44) = v14;
      uint64_t v15 = __dst;
      if (!v14)
      {
LABEL_35:
        *((unsigned char *)v15 + v14) = 0;
        sub_94A31C(__dst, a1, (uint64_t)&__p);
        std::string::size_type v20 = v40;
        unsigned __int8 v21 = v40;
        std::string::size_type v22 = v39;
        if ((v40 & 0x80u) == 0) {
          std::string::size_type v23 = v40;
        }
        else {
          std::string::size_type v23 = v39;
        }
        if (v23)
        {
          uint64_t v24 = v42;
          if ((v42 & 0x80u) != 0) {
            uint64_t v24 = v41[1];
          }
          if (v24)
          {
            uint64_t v25 = *((void *)&v48 + 1);
            if (*((void *)&v48 + 1) >= v49)
            {
              std::string::size_type v26 = sub_94B440((void **)&v48, v5);
            }
            else
            {
              sub_4F5C8C(*((_DWORD **)&v48 + 1), v5);
              std::string::size_type v26 = (char *)(v25 + 144);
            }
            *((void *)&v48 + 1) = v26;
            std::string::size_type v20 = v40;
            std::string::size_type v22 = v39;
            unsigned __int8 v21 = v40;
          }
          if ((v21 & 0x80u) == 0) {
            p_p = (const std::string::value_type *)&__p;
          }
          else {
            p_p = (const std::string::value_type *)__p;
          }
          if ((v21 & 0x80u) == 0) {
            std::string::size_type v28 = v20;
          }
          else {
            std::string::size_type v28 = v22;
          }
          std::string::replace(&v45, v8, v11 + 1, p_p, v28);
          std::string::size_type v29 = v40;
          if ((v40 & 0x80u) != 0) {
            std::string::size_type v29 = v39;
          }
          std::string::size_type v4 = v29 + v8;
          sub_4DC6B8((uint64_t)v5);
          if ((char)v40 < 0)
          {
LABEL_58:
            operator delete(__p);
            if ((SHIBYTE(v44) & 0x80000000) == 0) {
              goto LABEL_8;
            }
            goto LABEL_59;
          }
        }
        else
        {
          sub_5F3B34(a2);
          sub_4DC6B8((uint64_t)v5);
          if ((char)v40 < 0) {
            goto LABEL_58;
          }
        }
        if ((SHIBYTE(v44) & 0x80000000) == 0) {
          goto LABEL_8;
        }
LABEL_59:
        operator delete(__dst[0]);
LABEL_8:
        if (!v23) {
          goto LABEL_61;
        }
        goto LABEL_9;
      }
    }
    memmove(v15, (char *)v13 + v9, v14);
    goto LABEL_35;
  }
LABEL_60:
  sub_5F41E8((uint64_t)&v46, (uint64_t)&v45);
  *(_OWORD *)a2 = v46;
  unint64_t v30 = v49;
  *(void *)(a2 + 16) = v47;
  long long v46 = 0uLL;
  *(_OWORD *)(a2 + 24) = v48;
  *(void *)(a2 + 40) = v30;
  uint64_t v47 = 0;
  long long v48 = 0uLL;
  unint64_t v49 = 0;
  *(_OWORD *)(a2 + 48) = v50;
  uint64_t v31 = v53;
  *(void *)(a2 + 64) = v51;
  long long v50 = 0uLL;
  *(_OWORD *)(a2 + 72) = v52;
  uint64_t v51 = 0;
  long long v52 = 0uLL;
  uint64_t v53 = 0;
  uint64_t v32 = v54;
  *(void *)(a2 + 88) = v31;
  *(void *)(a2 + 96) = v32;
  LODWORD(v32) = v55;
  *(unsigned char *)(a2 + 108) = v56;
  *(_DWORD *)(a2 + 104) = v32;
  long long v33 = v57;
  uint64_t v34 = v60;
  *(void *)(a2 + 128) = v58;
  *(_OWORD *)(a2 + 112) = v33;
  uint64_t v54 = 0;
  long long v57 = 0uLL;
  long long v35 = v59;
  *(void *)(a2 + 152) = v34;
  *(_OWORD *)(a2 + 136) = v35;
  uint64_t v60 = 0;
  uint64_t v58 = 0;
  long long v59 = 0uLL;
LABEL_61:
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  return sub_4D4B58((uint64_t)&v46);
}

void sub_94AE14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
}

void sub_94AE28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  if (a37 < 0)
  {
    operator delete(__p);
    if ((a43 & 0x80000000) == 0)
    {
LABEL_3:
      sub_4D4B58((uint64_t)&a45);
      _Unwind_Resume(a1);
    }
  }
  else if ((a43 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a38);
  sub_4D4B58((uint64_t)&a45);
  _Unwind_Resume(a1);
}

uint64_t sub_94AEA8(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_94AEF4(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = result;
    if (a4 >= 0x333333333333334) {
      sub_2E00();
    }
    double result = operator new(80 * a4);
    std::string::size_type v8 = result;
    *uint64_t v5 = result;
    v5[1] = result;
    v5[2] = &result[10 * a4];
    if (a2 != a3)
    {
      unint64_t v9 = 0;
      do
      {
        double result = sub_94B0A0((int)v5 + 16, (char *)&v8[v9 / 8], (long long *)(a2 + v9));
        v9 += 80;
      }
      while (a2 + v9 != a3);
      std::string::size_type v8 = (void *)((char *)v8 + v9);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_94AFBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_94AFD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v12; v12 -= 80)
    sub_94B370(v11, v10 - 80 + v12);
  *(void *)(v9 + 8) = v10;
  sub_94B004(&a9);
  _Unwind_Resume(a1);
}

void ***sub_94B004(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    int v3 = **result;
    if (v3)
    {
      uint64_t v4 = (uint64_t)v2[1];
      uint64_t v5 = **result;
      if ((void *)v4 != v3)
      {
        do
        {
          v4 -= 80;
          sub_94B370((uint64_t)(v2 + 2), v4);
        }
        while ((void *)v4 != v3);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

char **sub_94B0A0(int a1, char *__dst, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    sub_4200(__dst, *(void **)a3, *((void *)a3 + 1));
    __dst[24] = *((unsigned char *)a3 + 24);
    std::string::size_type v6 = __dst + 32;
    if ((*((char *)a3 + 55) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_5:
    sub_4200(v6, *((void **)a3 + 4), *((void *)a3 + 5));
    return sub_94B194((char **)__dst + 7, (long long **)a3 + 7);
  }
  long long v5 = *a3;
  *((void *)__dst + 2) = *((void *)a3 + 2);
  *(_OWORD *)__dst = v5;
  __dst[24] = *((unsigned char *)a3 + 24);
  std::string::size_type v6 = __dst + 32;
  if (*((char *)a3 + 55) < 0) {
    goto LABEL_5;
  }
LABEL_3:
  long long v7 = a3[2];
  *((void *)v6 + 2) = *((void *)a3 + 6);
  *(_OWORD *)std::string::size_type v6 = v7;
  return sub_94B194((char **)__dst + 7, (long long **)a3 + 7);
}

void sub_94B148(_Unwind_Exception *exception_object)
{
  if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

char **sub_94B194(char **a1, long long **a2)
{
  a1[2] = 0;
  int v3 = a1 + 16;
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = *a2;
  long long v5 = a2[1];
  int64_t v6 = (char *)v5 - (char *)*a2;
  if (v5 != *a2)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 4);
    if (v7 >= 0x555555555555556) {
      sub_2E00();
    }
    std::string::size_type v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[48 * v7];
    a1[1] = sub_94B26C(v3, v4, v5, v8);
  }
  return a1;
}

void sub_94B240(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 8) = v2;
  if (*(void *)v1) {
    sub_20A6C24((void **)(v1 + 8), *(void ***)v1, (void **)v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_94B26C(int a1, long long *a2, long long *a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v11 = __dst;
  if (a2 != a3)
  {
    int64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_4200(v4, *(void **)v6, *((void *)v6 + 1));
      }
      else
      {
        long long v8 = *v6;
        *((void *)v4 + 2) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v4 = v8;
      }
      uint64_t v9 = v4 + 24;
      if (*((char *)v6 + 47) < 0)
      {
        sub_4200(v9, *((void **)v6 + 3), *((void *)v6 + 4));
      }
      else
      {
        long long v7 = *(long long *)((char *)v6 + 24);
        *((void *)v4 + 5) = *((void *)v6 + 5);
        *(_OWORD *)uint64_t v9 = v7;
      }
      v6 += 3;
      uint64_t v4 = v11 + 48;
      v11 += 48;
    }
    while (v6 != a3);
  }
  return v4;
}

void sub_94B338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(char *)(v9 + 23) < 0)
  {
    operator delete(*(void **)v9);
    sub_29DF84((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
  sub_29DF84((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_94B370(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 56);
  if (v3)
  {
    uint64_t v4 = *(void *)(a2 + 64);
    long long v5 = *(void **)(a2 + 56);
    if (v4 == v3)
    {
LABEL_11:
      *(void *)(a2 + 64) = v3;
      operator delete(v5);
      goto LABEL_12;
    }
    while (1)
    {
      if (*(char *)(v4 - 1) < 0)
      {
        operator delete(*(void **)(v4 - 24));
        if (*(char *)(v4 - 25) < 0) {
LABEL_9:
        }
          operator delete(*(void **)(v4 - 48));
      }
      else if (*(char *)(v4 - 25) < 0)
      {
        goto LABEL_9;
      }
      v4 -= 48;
      if (v4 == v3)
      {
        long long v5 = *(void **)(a2 + 56);
        goto LABEL_11;
      }
    }
  }
LABEL_12:
  if (*(char *)(a2 + 55) < 0)
  {
    operator delete(*(void **)(a2 + 32));
    if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
      return;
    }
  }
  else if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    return;
  }
  int64_t v6 = *(void **)a2;

  operator delete(v6);
}

char *sub_94B440(void **a1, long long *a2)
{
  unint64_t v3 = 0x8E38E38E38E38E39 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x1C71C71C71C71C7) {
    sub_2E00();
  }
  if (0x1C71C71C71C71C72 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v4) {
    unint64_t v4 = 0x1C71C71C71C71C72 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if (0x8E38E38E38E38E39 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) >= 0xE38E38E38E38E3) {
    unint64_t v6 = 0x1C71C71C71C71C7;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v29 = (uint64_t)(a1 + 2);
  if (v6)
  {
    if (v6 > 0x1C71C71C71C71C7) {
      sub_188D718();
    }
    long long v7 = (char *)operator new(144 * v6);
  }
  else
  {
    long long v7 = 0;
  }
  uint64_t v27 = &v7[144 * v3];
  std::string::size_type v28 = &v7[144 * v6];
  sub_4F5C8C(v27, a2);
  long long v8 = v27;
  uint64_t v9 = *a1;
  uint64_t v10 = (uint64_t)a1[1];
  if ((void *)v10 == *a1)
  {
    uint64_t v25 = a1[1];
  }
  else
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = v10 + v11;
      long long v13 = *(_OWORD *)(v10 + v11 - 144);
      size_t v14 = &v27[v11];
      *((void *)v14 - 16) = *(void *)(v10 + v11 - 128);
      *((_OWORD *)v14 - 9) = v13;
      *(_OWORD *)(v12 - 136) = 0uLL;
      uint64_t v15 = *(void *)(v10 + v11 - 120);
      int v16 = *(_DWORD *)(v10 + v11 - 112);
      *(void *)(v12 - 144) = 0;
      *((_DWORD *)v14 - 28) = v16;
      *((void *)v14 - 15) = v15;
      uint64_t v17 = *(void *)(v10 + v11 - 104);
      *(void *)(v12 - 104) = 0;
      *((void *)v14 - 13) = v17;
      uint64_t v18 = *(void *)(v10 + v11 - 96);
      *(void *)(v12 - 96) = 0;
      *((void *)v14 - 12) = v18;
      uint64_t v19 = *(void *)(v10 + v11 - 88);
      *(void *)(v12 - 88) = 0;
      *((void *)v14 - 11) = v19;
      *((void *)v14 - 10) = 0;
      *(_OWORD *)(v14 - 72) = 0uLL;
      *((_OWORD *)v14 - 5) = *(_OWORD *)(v10 + v11 - 80);
      *((void *)v14 - 8) = *(void *)(v10 + v11 - 64);
      uint64_t v20 = *(void *)(v10 + v11 - 56);
      *(_OWORD *)(v12 - 80) = 0uLL;
      *(_OWORD *)(v12 - 64) = 0uLL;
      *((void *)v14 - 7) = v20;
      LODWORD(v20) = *(_DWORD *)(v10 + v11 - 48);
      *(v14 - 44) = *(unsigned char *)(v10 + v11 - 44);
      *((_DWORD *)v14 - 12) = v20;
      uint64_t v21 = *(void *)(v10 + v11 - 40);
      *(void *)(v12 - 40) = 0;
      *((void *)v14 - 5) = v21;
      uint64_t v22 = *(void *)(v10 + v11 - 32);
      *(void *)(v12 - 32) = 0;
      *((void *)v14 - 4) = v22;
      uint64_t v23 = *(void *)(v10 + v11 - 24);
      *(void *)(v12 - 24) = 0;
      *((void *)v14 - 3) = v23;
      uint64_t v24 = *(void *)(v10 + v11 - 16);
      *(void *)(v12 - 16) = 0;
      *((void *)v14 - 2) = v24;
      *((_DWORD *)v14 - 2) = *(_DWORD *)(v10 + v11 - 8);
      v11 -= 144;
    }
    while ((void *)(v10 + v11) != v9);
    uint64_t v25 = *a1;
    uint64_t v10 = (uint64_t)a1[1];
    long long v8 = &v27[v11];
  }
  *a1 = v8;
  a1[1] = v27 + 144;
  a1[2] = v28;
  while ((void *)v10 != v25)
  {
    v10 -= 144;
    sub_4F2DAC(v29, v10);
  }
  if (v25) {
    operator delete(v25);
  }
  return v27 + 144;
}

void sub_94B678(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_55C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_94B690(uint64_t a1, void *a2)
{
  *(void *)a1 = sub_375500(a2);
  uint64_t v12 = 0;
  long long v13 = operator new(0x20uLL);
  long long v14 = xmmword_20B8870;
  strcpy((char *)v13, "TransferInstructionFinder");
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unint64_t v4 = sub_374CDC((uint64_t)a2, (uint64_t)&v13, (uint64_t *)&v10);
  std::string __p = operator new(0x20uLL);
  long long v16 = xmmword_20B8E90;
  strcpy((char *)__p, "enable_single_node_instructions");
  BOOL v5 = sub_29D62C(v4, (uint64_t)&__p);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 8) = v5;
  unint64_t v6 = (void **)v10;
  if (v10)
  {
    long long v7 = v11;
    long long v8 = v10;
    if (v11 != v10)
    {
      do
      {
        if (*((char *)v7 - 1) < 0) {
          operator delete(*(v7 - 3));
        }
        v7 -= 3;
      }
      while (v7 != v6);
      long long v8 = v10;
    }
    uint64_t v11 = v6;
    operator delete(v8);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(v13);
  }
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  return a1;
}

void sub_94B7D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
  {
    operator delete(__p);
    sub_1A668(&a10);
    if ((a18 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    sub_1A668(&a10);
    if ((a18 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  operator delete(a13);
  _Unwind_Resume(a1);
}

void sub_94B840(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t **a3@<X2>, unint64_t *a4@<X8>)
{
  *(_OWORD *)v74 = 0u;
  *(_OWORD *)v75 = 0u;
  int v76 = 1065353216;
  long long v7 = *a3;
  long long v8 = a3[1];
  if (*a3 != v8)
  {
    do
    {
      if (!v75[1])
      {
        uint64_t v9 = (int *)sub_49B168(*(void *)a1, *v7, 0, "transfer");
        *(void *)&long long v77 = *(void *)((char *)v9 + *(unsigned __int16 *)((char *)v9 - *v9 + 6));
        LODWORD(v72) = 0;
        sub_94E234((uint64_t)v74, &v77, &v77, (int *)&v72);
      }
      uint64_t v10 = (int *)sub_49B168(*(void *)a1, *v7, 0, "transfer");
      *(void *)&long long v77 = *(void *)((char *)v10 + *(unsigned __int16 *)((char *)v10 - *v10 + 8));
      float32x4x2_t v72 = v75[1];
      sub_94E598((uint64_t)v74, &v77, &v77, (uint64_t *)&v72);
      ++v7;
    }
    while (v7 != v8);
  }
  v65 = a4;
  sub_94BFB4(*(void *)a1, a2, (uint64_t)&v72);
  v69 = 0;
  v70 = 0;
  v71 = 0;
  uint64_t v12 = (unint64_t *)v72;
  long long v13 = v73;
  if (v72 != v73)
  {
    long long v14 = 0;
    while (1)
    {
      uint64_t v15 = (int *)sub_94CCE8(*(void *)a1, *v12, 0, "transfer instruction");
      *(void *)&long long v77 = *(void *)((char *)v15 + *(unsigned __int16 *)((char *)v15 - *v15 + 6));
      long long v16 = sub_3FAA8C(v74, &v77);
      uint64_t v17 = v16;
      if (!v16) {
        goto LABEL_9;
      }
      unint64_t v18 = v16[3];
      uint64_t v19 = (int *)sub_94CCE8(*(void *)a1, *v12, 0, "transfer instruction");
      uint64_t v20 = *(void **)((char *)v19 + *(unsigned __int16 *)((char *)v19 - *v19 + 4));
      std::string __p = v20;
      if (!*(unsigned char *)(a1 + 8) || (v20 ? (BOOL v21 = (unint64_t)v20 > 0xFFFFFFFEFFFFFFFFLL) : (BOOL v21 = 1), !v21))
      {
        uint64_t v22 = sub_3FAA8C(v74, &__p);
        if (!v22) {
          goto LABEL_9;
        }
        unint64_t v18 = v22[3];
      }
      unint64_t v23 = v17[3];
      if (v23 < v18 || !v23) {
        goto LABEL_9;
      }
      if (v14 < v71)
      {
        uint64_t *v14 = *v12;
        v14[1] = v18;
        v14[2] = v23;
        v14 += 3;
      }
      else
      {
        uint64_t v24 = (uint64_t *)v69;
        unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * (((char *)v14 - (unsigned char *)v69) >> 3);
        unint64_t v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_2E00();
        }
        if (0x5555555555555556 * (((char *)v71 - (unsigned char *)v69) >> 3) > v26) {
          unint64_t v26 = 0x5555555555555556 * (((char *)v71 - (unsigned char *)v69) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v71 - (unsigned char *)v69) >> 3) >= 0x555555555555555) {
          unint64_t v27 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v27 = v26;
        }
        if (v27 > 0xAAAAAAAAAAAAAAALL) {
          sub_188D718();
        }
        std::string::size_type v28 = (char *)operator new(24 * v27);
        uint64_t v29 = v17[3];
        unint64_t v30 = (unint64_t *)&v28[24 * v25];
        *unint64_t v30 = *v12;
        v30[1] = v18;
        v30[2] = v29;
        if (v14 != v24)
        {
          uint64_t v31 = &v28[24 * v25];
          do
          {
            __n128 v11 = *(__n128 *)(v14 - 3);
            uint64_t v32 = v31 - 24;
            *((void *)v31 - 1) = *(v14 - 1);
            *(__n128 *)(v31 - 24) = v11;
            v14 -= 3;
            v31 -= 24;
          }
          while (v14 != v24);
          long long v14 = (uint64_t *)(v30 + 3);
          v69 = v32;
          v71 = (uint64_t *)&v28[24 * v27];
          if (!v24) {
            goto LABEL_8;
          }
LABEL_34:
          operator delete(v24);
          goto LABEL_8;
        }
        long long v14 = (uint64_t *)(v30 + 3);
        v69 = &v28[24 * v25];
        v71 = (uint64_t *)&v28[24 * v27];
        if (v24) {
          goto LABEL_34;
        }
      }
LABEL_8:
      v70 = v14;
LABEL_9:
      if (++v12 == v13)
      {
        long long v33 = v69;
        goto LABEL_37;
      }
    }
  }
  long long v14 = 0;
  long long v33 = 0;
LABEL_37:
  unint64_t v34 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (v14 - v33));
  if (v14 == v33) {
    uint64_t v35 = 0;
  }
  else {
    uint64_t v35 = v34;
  }
  sub_94E8FC(v33, v14, v35, 1, v11);
  std::string __p = 0;
  v67 = 0;
  v68 = 0;
  long long v36 = (uint64_t *)v69;
  long long v37 = v70;
  if (v69 == v70)
  {
    unint64_t *v65 = 0;
    v65[1] = 0;
    v65[2] = 0;
    std::string v61 = v69;
    if (v69) {
LABEL_82:
    }
      operator delete(v61);
  }
  else
  {
    unint64_t v38 = 0;
    std::string::size_type v39 = 0;
    do
    {
      if (v39 == v38
        || (unint64_t v42 = v36[2], v43 = *((void *)v38 - 2), v42 <= v43) && (v36[1] != v43 || v42 != *((void *)v38 - 1)))
      {
        if (v38 < v68)
        {
          long long v40 = *(_OWORD *)v36;
          *((void *)v38 + 2) = v36[2];
          *(_OWORD *)unint64_t v38 = v40;
          uint64_t v41 = v38 + 24;
        }
        else
        {
          unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * ((v38 - v39) >> 3) + 1;
          if (v44 > 0xAAAAAAAAAAAAAAALL) {
            sub_2E00();
          }
          if (0x5555555555555556 * ((v68 - v39) >> 3) > v44) {
            unint64_t v44 = 0x5555555555555556 * ((v68 - v39) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v68 - v39) >> 3) >= 0x555555555555555) {
            unint64_t v45 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v45 = v44;
          }
          if (v45)
          {
            if (v45 > 0xAAAAAAAAAAAAAAALL) {
              sub_188D718();
            }
            long long v46 = (char *)operator new(24 * v45);
          }
          else
          {
            long long v46 = 0;
          }
          long long v47 = *(_OWORD *)v36;
          long long v48 = &v46[8 * ((v38 - v39) >> 3)];
          *((void *)v48 + 2) = v36[2];
          *(_OWORD *)long long v48 = v47;
          unint64_t v49 = v48;
          if (v39 != v38)
          {
            do
            {
              long long v50 = *(_OWORD *)(v38 - 24);
              *((void *)v49 - 1) = *((void *)v38 - 1);
              *(_OWORD *)(v49 - 24) = v50;
              v49 -= 24;
              v38 -= 24;
            }
            while (v38 != v39);
            unint64_t v38 = (char *)__p;
          }
          uint64_t v41 = v48 + 24;
          std::string __p = v49;
          v67 = v48 + 24;
          v68 = &v46[24 * v45];
          if (v38) {
            operator delete(v38);
          }
          std::string::size_type v39 = v49;
        }
        v67 = v41;
        unint64_t v38 = v41;
      }
      v36 += 3;
    }
    while (v36 != v37);
    uint64_t v51 = (char *)__p;
    unint64_t v52 = (unint64_t)(v38 - 24);
    if (__p != v38 && v52 > (unint64_t)__p)
    {
      uint64_t v54 = (char *)__p + 24;
      do
      {
        long long v77 = *(_OWORD *)(v54 - 24);
        long long v55 = v77;
        uint64_t v78 = *((void *)v54 - 1);
        uint64_t v56 = v78;
        uint64_t v57 = *(void *)(v52 + 16);
        *(_OWORD *)(v54 - 24) = *(_OWORD *)v52;
        *((void *)v54 - 1) = v57;
        *(void *)(v52 + 16) = v56;
        *(_OWORD *)unint64_t v52 = v55;
        v52 -= 24;
        BOOL v58 = (unint64_t)v54 >= v52;
        v54 += 24;
      }
      while (!v58);
      uint64_t v51 = (char *)__p;
      unint64_t v38 = v67;
    }
    unint64_t *v65 = 0;
    v65[1] = 0;
    v65[2] = 0;
    if (v38 != v51)
    {
      if ((0xAAAAAAAAAAAAAAABLL * ((v38 - v51) >> 3)) >> 61) {
        sub_2E00();
      }
      long long v59 = (char *)operator new(0x5555555555555558 * ((v38 - v51) >> 3));
      unint64_t *v65 = (unint64_t)v59;
      v65[1] = (unint64_t)v59;
      v65[2] = (unint64_t)&v59[0x5555555555555558 * ((v38 - v51) >> 3)];
      uint64_t v60 = v51;
      do
      {
        *(void *)&long long v77 = *(void *)v60;
        long long v59 = sub_9503D0(v65, v59, &v77) + 8;
        v60 += 24;
      }
      while (v60 != v38);
    }
    if (v51) {
      operator delete(v51);
    }
    std::string v61 = v69;
    if (v69) {
      goto LABEL_82;
    }
  }
  if (v72)
  {
    v73 = (unint64_t *)v72;
    operator delete(v72);
  }
  long long v62 = v75[0];
  if (v75[0])
  {
    do
    {
      std::string::size_type v63 = (void *)*v62;
      operator delete(v62);
      long long v62 = v63;
    }
    while (v63);
  }
  v64 = v74[0];
  v74[0] = 0;
  if (v64) {
    operator delete(v64);
  }
}

void sub_94BE64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v20 = *(void **)a9;
  if (*(void *)a9)
  {
    *(void *)(a9 + 8) = v20;
    operator delete(v20);
    BOOL v21 = __p;
    if (!__p)
    {
LABEL_3:
      uint64_t v22 = a13;
      if (!a13) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    BOOL v21 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  operator delete(v21);
  uint64_t v22 = a13;
  if (!a13)
  {
LABEL_4:
    unint64_t v23 = a16;
    if (!a16) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(v22);
  unint64_t v23 = a16;
  if (!a16)
  {
LABEL_5:
    sub_12168((uint64_t)&a19);
    _Unwind_Resume(a1);
  }
LABEL_9:
  operator delete(v23);
  sub_12168((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_94BF8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_12168((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_94BFA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_12168((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_94BFB4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double result = (int *)sub_94C794(a1, a2, 0, "transfer graph");
  unint64_t v6 = (unsigned __int16 *)((char *)result - *result);
  if (*v6 >= 0xBu && (uint64_t v7 = v6[5]) != 0)
  {
    long long v8 = (unsigned int *)((char *)result + v7);
    uint64_t v9 = *v8;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    __n128 v11 = (uint64_t *)((char *)v8 + v9 + 4);
    uint64_t v10 = *(unsigned int *)((char *)v8 + v9);
    long long v14 = (void **)a3;
    if (v10)
    {
      uint64_t v12 = 8 * v10;
      do
      {
        if (!*(unsigned char *)(a1 + 3888) || (double result = (int *)sub_2AB7E4(*(void *)(a1 + 3872)), result))
        {
          uint64_t v13 = *v11;
          double result = (int *)sub_2A98DC(&v14, &v13);
        }
        ++v11;
        v12 -= 8;
      }
      while (v12);
    }
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

void sub_94C084(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_94C0A0(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (*(void *)a3 == *(void *)(a3 + 8)
    || (uint64_t v9 = (uint64_t)a1,
        uint64_t v10 = (int *)sub_94C794(*a1, a2, 0, "transfer graph"),
        __n128 v11 = (unsigned __int16 *)((char *)v10 - *v10),
        *v11 < 0xBu)
    || (uint64_t v12 = v11[5]) == 0
    || !*(int *)((char *)v10 + v12 + *(unsigned int *)((char *)v10 + v12)))
  {
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    *(unsigned char *)(a5 + 24) = 0;
    *(void *)(a5 + 16) = 0;
    return;
  }
  *(unsigned char *)(v9 + 24) = 1;
  sub_725D0((uint64_t)v78);
  sub_94B840(v9, a2, (unint64_t **)a3, (unint64_t *)&v76);
  nullsub_1(&v75);
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(unsigned char *)(a5 + 24) = 0;
  *(void *)(a5 + 16) = 0;
  uint64_t v13 = v76;
  v65 = v77;
  if (v76 == v77) {
    goto LABEL_105;
  }
  uint64_t v64 = a3;
  v66 = (uint64_t *)v9;
  while (2)
  {
    unint64_t v74 = *v13;
    uint64_t v15 = (int *)sub_94CCE8(*v66, v74, 0, "transfer instruction");
    long long v16 = (unsigned __int16 *)((char *)v15 - *v15);
    if (*v16 >= 0xBu && (uint64_t v17 = v16[5]) != 0) {
      unint64_t v18 = (unsigned int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17));
    }
    else {
      unint64_t v18 = 0;
    }
    sub_94D23C(v18, (long long **)&__p);
    memset(&v71, 0, sizeof(v71));
    uint64_t v20 = (void **)__p;
    uint64_t v19 = v73;
    if (__p == v73)
    {
      std::string::size_type v21 = 0;
      BOOL v67 = 0;
      int v22 = 0;
      unint64_t v23 = *(void *)(a5 + 8);
LABEL_63:
      char v43 = 1;
      BOOL v67 = 1;
      if (v23 < *(void *)(a5 + 16)) {
        goto LABEL_56;
      }
      goto LABEL_60;
    }
    do
    {
      while (1)
      {
        sub_9973DC((uint64_t)v20, a4, (uint64_t)&__dst);
        std::string::size_type v24 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        char v25 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        std::string::size_type size = __dst.__r_.__value_.__l.__size_;
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v27 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v27 = __dst.__r_.__value_.__l.__size_;
        }
        if (v27)
        {
          std::string::size_type v28 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
          if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v28 = v71.__r_.__value_.__l.__size_;
          }
          if (v28)
          {
            std::string::append(&v71, ", ");
            std::string::size_type v24 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            std::string::size_type size = __dst.__r_.__value_.__l.__size_;
            char v25 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          }
          if (v25 >= 0) {
            p_dst = &__dst;
          }
          else {
            p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
          }
          if (v25 >= 0) {
            std::string::size_type v30 = v24;
          }
          else {
            std::string::size_type v30 = size;
          }
          std::string::append(&v71, (const std::string::value_type *)p_dst, v30);
        }
        if ((v70 & 0x80000000) == 0) {
          break;
        }
        operator delete(v69);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_35;
        }
LABEL_17:
        v20 += 11;
        if (v20 == v19) {
          goto LABEL_36;
        }
      }
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_17;
      }
LABEL_35:
      operator delete(__dst.__r_.__value_.__l.__data_);
      v20 += 11;
    }
    while (v20 != v19);
LABEL_36:
    std::string::size_type v31 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
    std::string::size_type v21 = v71.__r_.__value_.__l.__size_;
    BOOL v67 = 0;
    int v22 = SHIBYTE(v71.__r_.__value_.__r.__words[2]);
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v31 = v71.__r_.__value_.__l.__size_;
    }
    unint64_t v23 = *(void *)(a5 + 8);
    if (!v31) {
      goto LABEL_63;
    }
    if (*(void *)a5 == v23
      || ((uint64_t v32 = *(unsigned __int8 *)(v23 - 9), (v32 & 0x80u) == 0)
        ? (uint64_t v33 = *(unsigned __int8 *)(v23 - 9))
        : (uint64_t v33 = *(void *)(v23 - 24)),
          v33 != v31))
    {
      char v43 = 0;
      BOOL v67 = 0;
      if (v23 < *(void *)(a5 + 16)) {
        goto LABEL_56;
      }
      goto LABEL_60;
    }
    unint64_t v34 = (const void **)(v23 - 32);
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v35 = &v71;
    }
    else {
      uint64_t v35 = (std::string *)v71.__r_.__value_.__r.__words[0];
    }
    if ((v32 & 0x80) != 0)
    {
      char v43 = memcmp(*v34, v35, *(void *)(v23 - 24)) == 0;
      BOOL v67 = v43;
      if (v23 < *(void *)(a5 + 16)) {
        goto LABEL_56;
      }
LABEL_60:
      *(void *)(a5 + 8) = sub_950740((void **)a5, (uint64_t *)&v74, (uint64_t)&v71, (char *)&v67);
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_69;
      }
LABEL_61:
      long long v47 = (void **)__p;
      if (__p) {
        goto LABEL_70;
      }
      goto LABEL_9;
    }
    if (!*(unsigned char *)(v23 - 9)) {
      goto LABEL_63;
    }
    uint64_t v36 = v32 - 1;
    do
    {
      int v38 = *(unsigned __int8 *)v34;
      unint64_t v34 = (const void **)((char *)v34 + 1);
      int v37 = v38;
      int v40 = v35->__r_.__value_.__s.__data_[0];
      uint64_t v35 = (std::string *)((char *)v35 + 1);
      int v39 = v40;
      BOOL v42 = v36-- != 0;
      char v43 = v37 == v39;
    }
    while (v37 == v39 && v42);
    BOOL v67 = v37 == v39;
    if (v23 >= *(void *)(a5 + 16)) {
      goto LABEL_60;
    }
LABEL_56:
    unint64_t v44 = v74;
    if (v22 < 0)
    {
      sub_4200(&__dst, v71.__r_.__value_.__l.__data_, v21);
      char v43 = v67;
      *(void *)unint64_t v23 = v44;
      unint64_t v45 = v23 + 8;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_66;
      }
LABEL_58:
      long long v46 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
      *(void *)(v45 + 16) = *((void *)&__dst.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v45 = v46;
      *(unsigned char *)(v23 + 32) = v43;
    }
    else
    {
      std::string __dst = v71;
      *(void *)unint64_t v23 = v74;
      unint64_t v45 = v23 + 8;
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_58;
      }
LABEL_66:
      sub_4200((unsigned char *)v45, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      int v48 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
      *(unsigned char *)(v23 + 32) = v43;
      if (v48 < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
    }
    *(void *)(a5 + 8) = v23 + 40;
    *(void *)(a5 + 8) = v23 + 40;
    if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_61;
    }
LABEL_69:
    operator delete(v71.__r_.__value_.__l.__data_);
    long long v47 = (void **)__p;
    if (__p)
    {
LABEL_70:
      unint64_t v49 = v73;
      long long v14 = v47;
      if (v73 != v47)
      {
        do
        {
          long long v50 = (void **)*(v49 - 3);
          if (v50)
          {
            uint64_t v51 = (void **)*(v49 - 2);
            unint64_t v52 = *(v49 - 3);
            if (v51 != v50)
            {
              do
              {
                uint64_t v53 = (void **)*(v51 - 3);
                if (v53)
                {
                  uint64_t v54 = (void **)*(v51 - 2);
                  long long v55 = *(v51 - 3);
                  if (v54 != v53)
                  {
                    do
                    {
                      if (*((char *)v54 - 1) < 0) {
                        operator delete(*(v54 - 3));
                      }
                      v54 -= 4;
                    }
                    while (v54 != v53);
                    long long v55 = *(v51 - 3);
                  }
                  *(v51 - 2) = v53;
                  operator delete(v55);
                }
                uint64_t v56 = v51 - 8;
                if (*((char *)v51 - 41) < 0) {
                  operator delete(*v56);
                }
                v51 -= 8;
              }
              while (v56 != v50);
              unint64_t v52 = *(v49 - 3);
            }
            *(v49 - 2) = v50;
            operator delete(v52);
          }
          uint64_t v57 = (void **)*(v49 - 6);
          if (v57)
          {
            BOOL v58 = (void **)*(v49 - 5);
            long long v59 = *(v49 - 6);
            if (v58 != v57)
            {
              do
              {
                if (*((char *)v58 - 1) < 0) {
                  operator delete(*(v58 - 3));
                }
                v58 -= 4;
              }
              while (v58 != v57);
              long long v59 = *(v49 - 6);
            }
            *(v49 - 5) = v57;
            operator delete(v59);
          }
          uint64_t v60 = v49 - 11;
          if (*((char *)v49 - 65) < 0) {
            operator delete(*v60);
          }
          v49 -= 11;
        }
        while (v60 != v47);
        long long v14 = __p;
      }
      v73 = v47;
      operator delete(v14);
    }
LABEL_9:
    if (++v13 != v65) {
      continue;
    }
    break;
  }
  uint64_t v9 = (uint64_t)v66;
  if (v76 != v77)
  {
    std::string v61 = (int *)sub_49B168(*v66, *(void *)(*(void *)(v64 + 8) - 8), 0, "transfer");
    uint64_t v62 = *(void *)((char *)v61 + *(unsigned __int16 *)((char *)v61 - *v61 + 8));
    std::string::size_type v63 = (int *)sub_94CCE8(*v66, *(v77 - 1), 0, "transfer instruction");
    *(unsigned char *)(a5 + 24) = v62 == *(void *)((char *)v63 + *(unsigned __int16 *)((char *)v63 - *v63 + 6));
  }
LABEL_105:
  *(double *)(v9 + 16) = sub_72688((uint64_t)v78);
  if (v76)
  {
    long long v77 = v76;
    operator delete(v76);
  }
}

void sub_94C6A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  sub_2DE7D0(v30);
  uint64_t v33 = *(void **)(v31 - 144);
  if (v33)
  {
    *(void *)(v31 - 136) = v33;
    operator delete(v33);
  }
  _Unwind_Resume(a1);
}

void **sub_94C738(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    unint64_t v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = sub_94D4E4(v3 - 88);
      while ((void *)v3 != v2);
      unint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_94C794(uint64_t a1, unint64_t a2, int a3, char *a4)
{
  unsigned int v6 = a2;
  unint64_t v8 = HIDWORD(a2);
  LODWORD(v61.__r_.__value_.__l.__data_) = a2;
  LODWORD(v60.__r_.__value_.__l.__data_) = a3;
  *(void *)&long long v62 = &v60;
  *((void *)&v62 + 1) = &v61;
  unint64_t v9 = *(void *)(a1 + 3856) + 1;
  *(void *)(a1 + 3856) = v9;
  uint64_t v10 = *(void *)a1;
  if (!v10) {
    goto LABEL_38;
  }
  uint64_t v11 = a1 + 16;
  if (*(_DWORD *)(a1 + 592) == a2)
  {
    unsigned int v12 = 24;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 616) == a2)
  {
    unsigned int v12 = 25;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 640) == a2)
  {
    unsigned int v12 = 26;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 664) == a2)
  {
    unsigned int v12 = 27;
LABEL_10:
    ++*(void *)(a1 + 3864);
    uint64_t v13 = v11 + 24 * v12;
    *(void *)(v13 + 8) = v9;
    long long v14 = *(unsigned int **)(v13 + 16);
    if (v14) {
      goto LABEL_11;
    }
LABEL_38:
    sub_2A54B4((int **)&v62);
    unint64_t v18 = 0;
    if (a3 != 1) {
      goto LABEL_19;
    }
    return 0;
  }
  unint64_t v20 = *(void *)(a1 + 648);
  unint64_t v21 = *(void *)(a1 + 624);
  if (*(void *)(a1 + 600) >= v9)
  {
    int v22 = 0;
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + 600);
    int v22 = 24;
  }
  BOOL v23 = v21 >= v9;
  if (v21 < v9) {
    unint64_t v9 = *(void *)(a1 + 624);
  }
  int v24 = 25;
  if (v23) {
    int v24 = v22;
  }
  if (v20 >= v9) {
    unint64_t v25 = v9;
  }
  else {
    unint64_t v25 = *(void *)(a1 + 648);
  }
  unint64_t v26 = *(void *)(a1 + 672);
  if (v20 >= v9) {
    int v27 = v24;
  }
  else {
    int v27 = 26;
  }
  long long v14 = (unsigned int *)sub_2AB884(v10, 6, a2, 1);
  unsigned int v28 = 27;
  if (v26 >= v25) {
    unsigned int v28 = v27;
  }
  uint64_t v29 = v11 + 24 * v28;
  *(_DWORD *)uint64_t v29 = v61.__r_.__value_.__l.__data_;
  *(void *)(v29 + 8) = *(void *)(a1 + 3856);
  *(void *)(v29 + 16) = v14;
  if (!v14) {
    goto LABEL_38;
  }
LABEL_11:
  uint64_t v15 = (int *)((char *)v14 + *v14);
  long long v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 < 0x25u)
  {
    unint64_t v18 = 0;
    if (a3 != 1) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v17 = v16[18];
    if (v17)
    {
      unint64_t v18 = (int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17));
      if (*v18 > v8) {
        return (uint64_t)&v18[v8 + 1] + v18[v8 + 1];
      }
    }
    else
    {
      unint64_t v18 = 0;
    }
    if (a3 != 1)
    {
LABEL_19:
      if (!a3)
      {
        exception = __cxa_allocate_exception(0x40uLL);
        uint64_t v31 = a4;
        uint64_t v32 = (uint64_t)exception;
        sub_5E5C(&v55, v31);
        uint64_t v33 = std::string::insert(&v55, 0, "Failed to acquire entity \"");
        long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
        v56.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v34;
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        uint64_t v35 = std::string::append(&v56, "\" in quad node ");
        long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v57.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v54, v6);
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v37 = &v54;
        }
        else {
          int v37 = (std::string *)v54.__r_.__value_.__r.__words[0];
        }
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v54.__r_.__value_.__l.__size_;
        }
        int v39 = std::string::append(&v57, (const std::string::value_type *)v37, size);
        long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v58.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        uint64_t v41 = std::string::append(&v58, " at position ");
        long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
        v59.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v42;
        v41->__r_.__value_.__l.__size_ = 0;
        v41->__r_.__value_.__r.__words[2] = 0;
        v41->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v53, v8);
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v43 = &v53;
        }
        else {
          char v43 = (std::string *)v53.__r_.__value_.__r.__words[0];
        }
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v44 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v44 = v53.__r_.__value_.__l.__size_;
        }
        unint64_t v45 = std::string::append(&v59, (const std::string::value_type *)v43, v44);
        long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
        v60.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v46;
        v45->__r_.__value_.__l.__size_ = 0;
        v45->__r_.__value_.__r.__words[2] = 0;
        v45->__r_.__value_.__r.__words[0] = 0;
        long long v47 = std::string::append(&v60, " on layer ");
        long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v61.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        unint64_t v49 = sub_736EC(6u);
        long long v50 = std::string::append(&v61, v49);
        long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
        std::string::size_type v63 = v50->__r_.__value_.__r.__words[2];
        long long v62 = v51;
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        unint64_t v52 = (void *)sub_2F404(v32, &v62);
      }
      return (uint64_t)&v18[v8 + 1] + v18[v8 + 1];
    }
  }
  return 0;
}

void sub_94CB2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (*(char *)(v54 - 105) < 0) {
    operator delete(*(void **)(v54 - 128));
  }
  if (*(char *)(v54 - 137) < 0)
  {
    operator delete(*(void **)(v54 - 160));
    if ((*(char *)(v54 - 169) & 0x80000000) == 0)
    {
LABEL_5:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_15;
    }
  }
  else if ((*(char *)(v54 - 169) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v54 - 192));
  if ((a15 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a54 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(a10);
  if ((a54 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a47 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(a49);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a21 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a42);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a40 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a16);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a33 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a35);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a27 & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_12;
  }
LABEL_20:
  operator delete(a28);
  if ((a27 & 0x80000000) == 0) {
LABEL_21:
  }
    _Unwind_Resume(a1);
LABEL_12:
  operator delete(__p);
  goto LABEL_21;
}

uint64_t sub_94CCE8(uint64_t a1, unint64_t a2, int a3, char *a4)
{
  unsigned int v6 = a2;
  unint64_t v8 = HIDWORD(a2);
  LODWORD(v61.__r_.__value_.__l.__data_) = a2;
  LODWORD(v60.__r_.__value_.__l.__data_) = a3;
  *(void *)&long long v62 = &v60;
  *((void *)&v62 + 1) = &v61;
  unint64_t v9 = *(void *)(a1 + 3856) + 1;
  *(void *)(a1 + 3856) = v9;
  uint64_t v10 = *(void *)a1;
  if (!v10) {
    goto LABEL_38;
  }
  uint64_t v11 = a1 + 16;
  if (*(_DWORD *)(a1 + 592) == a2)
  {
    unsigned int v12 = 24;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 616) == a2)
  {
    unsigned int v12 = 25;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 640) == a2)
  {
    unsigned int v12 = 26;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 664) == a2)
  {
    unsigned int v12 = 27;
LABEL_10:
    ++*(void *)(a1 + 3864);
    uint64_t v13 = v11 + 24 * v12;
    *(void *)(v13 + 8) = v9;
    long long v14 = *(unsigned int **)(v13 + 16);
    if (v14) {
      goto LABEL_11;
    }
LABEL_38:
    sub_2A54B4((int **)&v62);
    unint64_t v18 = 0;
    if (a3 != 1) {
      goto LABEL_19;
    }
    return 0;
  }
  unint64_t v20 = *(void *)(a1 + 648);
  unint64_t v21 = *(void *)(a1 + 624);
  if (*(void *)(a1 + 600) >= v9)
  {
    int v22 = 0;
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + 600);
    int v22 = 24;
  }
  BOOL v23 = v21 >= v9;
  if (v21 < v9) {
    unint64_t v9 = *(void *)(a1 + 624);
  }
  int v24 = 25;
  if (v23) {
    int v24 = v22;
  }
  if (v20 >= v9) {
    unint64_t v25 = v9;
  }
  else {
    unint64_t v25 = *(void *)(a1 + 648);
  }
  unint64_t v26 = *(void *)(a1 + 672);
  if (v20 >= v9) {
    int v27 = v24;
  }
  else {
    int v27 = 26;
  }
  long long v14 = (unsigned int *)sub_2AB884(v10, 6, a2, 1);
  unsigned int v28 = 27;
  if (v26 >= v25) {
    unsigned int v28 = v27;
  }
  uint64_t v29 = v11 + 24 * v28;
  *(_DWORD *)uint64_t v29 = v61.__r_.__value_.__l.__data_;
  *(void *)(v29 + 8) = *(void *)(a1 + 3856);
  *(void *)(v29 + 16) = v14;
  if (!v14) {
    goto LABEL_38;
  }
LABEL_11:
  uint64_t v15 = (int *)((char *)v14 + *v14);
  long long v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 < 0x27u)
  {
    unint64_t v18 = 0;
    if (a3 != 1) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v17 = v16[19];
    if (v17)
    {
      unint64_t v18 = (int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17));
      if (*v18 > v8) {
        return (uint64_t)&v18[v8 + 1] + v18[v8 + 1];
      }
    }
    else
    {
      unint64_t v18 = 0;
    }
    if (a3 != 1)
    {
LABEL_19:
      if (!a3)
      {
        exception = __cxa_allocate_exception(0x40uLL);
        uint64_t v31 = a4;
        uint64_t v32 = (uint64_t)exception;
        sub_5E5C(&v55, v31);
        uint64_t v33 = std::string::insert(&v55, 0, "Failed to acquire entity \"");
        long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
        v56.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v34;
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        uint64_t v35 = std::string::append(&v56, "\" in quad node ");
        long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v57.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v54, v6);
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v37 = &v54;
        }
        else {
          int v37 = (std::string *)v54.__r_.__value_.__r.__words[0];
        }
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v54.__r_.__value_.__l.__size_;
        }
        int v39 = std::string::append(&v57, (const std::string::value_type *)v37, size);
        long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v58.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        uint64_t v41 = std::string::append(&v58, " at position ");
        long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
        v59.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v42;
        v41->__r_.__value_.__l.__size_ = 0;
        v41->__r_.__value_.__r.__words[2] = 0;
        v41->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v53, v8);
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v43 = &v53;
        }
        else {
          char v43 = (std::string *)v53.__r_.__value_.__r.__words[0];
        }
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v44 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v44 = v53.__r_.__value_.__l.__size_;
        }
        unint64_t v45 = std::string::append(&v59, (const std::string::value_type *)v43, v44);
        long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
        v60.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v46;
        v45->__r_.__value_.__l.__size_ = 0;
        v45->__r_.__value_.__r.__words[2] = 0;
        v45->__r_.__value_.__r.__words[0] = 0;
        long long v47 = std::string::append(&v60, " on layer ");
        long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v61.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        unint64_t v49 = sub_736EC(6u);
        long long v50 = std::string::append(&v61, v49);
        long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
        std::string::size_type v63 = v50->__r_.__value_.__r.__words[2];
        long long v62 = v51;
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        unint64_t v52 = (void *)sub_2F404(v32, &v62);
      }
      return (uint64_t)&v18[v8 + 1] + v18[v8 + 1];
    }
  }
  return 0;
}

void sub_94D080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (*(char *)(v54 - 105) < 0) {
    operator delete(*(void **)(v54 - 128));
  }
  if (*(char *)(v54 - 137) < 0)
  {
    operator delete(*(void **)(v54 - 160));
    if ((*(char *)(v54 - 169) & 0x80000000) == 0)
    {
LABEL_5:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_15;
    }
  }
  else if ((*(char *)(v54 - 169) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v54 - 192));
  if ((a15 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a54 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(a10);
  if ((a54 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a47 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(a49);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a21 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a42);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a40 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a16);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a33 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a35);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a27 & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_12;
  }
LABEL_20:
  operator delete(a28);
  if ((a27 & 0x80000000) == 0) {
LABEL_21:
  }
    _Unwind_Resume(a1);
LABEL_12:
  operator delete(__p);
  goto LABEL_21;
}

void sub_94D23C(unsigned int *a1@<X0>, long long **a2@<X8>)
{
  uint64_t v11 = 0;
  unsigned int v12 = 0;
  uint64_t v13 = 0;
  if (a1)
  {
    sub_94D328((char **)&v11, *a1);
    unint64_t v4 = (long long *)v12;
    unsigned int v7 = *a1;
    unsigned int v6 = a1 + 1;
    uint64_t v5 = v7;
    if (v7)
    {
      uint64_t v8 = 4 * v5;
      do
      {
        sub_94D61C((int *)((char *)v6 + *v6), (uint64_t)v14);
        unint64_t v4 = (long long *)((char *)sub_94D908(&v11, (uint64_t)v4, (uint64_t)v14) + 88);
        sub_94D4E4((uint64_t)v14);
        ++v6;
        v8 -= 4;
      }
      while (v8);
      unint64_t v4 = (long long *)v12;
    }
    unint64_t v9 = v11;
    uint64_t v10 = v13;
  }
  else
  {
    uint64_t v10 = 0;
    unint64_t v4 = 0;
    unint64_t v9 = 0;
  }
  *a2 = v9;
  a2[1] = v4;
  a2[2] = v10;
}

void sub_94D2F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    sub_20AC8C4((uint64_t)&__p, __p);
  }
  _Unwind_Resume(exception_object);
}

void sub_94D328(char **a1, unint64_t a2)
{
  uint64_t v2 = *a1;
  if (0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 3) >= a2) {
    return;
  }
  if (a2 >= 0x2E8BA2E8BA2E8BBLL) {
    sub_2E00();
  }
  unint64_t v4 = a1[1];
  uint64_t v5 = 88 * a2;
  unsigned int v6 = (char *)operator new(88 * a2);
  unsigned int v7 = &v6[v5];
  uint64_t v8 = &v6[v4 - v2];
  if (v4 == v2)
  {
    *a1 = v8;
    a1[1] = v8;
    a1[2] = v7;
    if (!v2) {
      return;
    }
    goto LABEL_10;
  }
  uint64_t v9 = 0;
  do
  {
    uint64_t v10 = &v8[v9];
    uint64_t v11 = &v4[v9];
    long long v12 = *(_OWORD *)&v4[v9 - 88];
    *((void *)v10 - 9) = *(void *)&v4[v9 - 72];
    *(_OWORD *)(v10 - 88) = v12;
    *((void *)v11 - 10) = 0;
    *((void *)v11 - 9) = 0;
    *((void *)v11 - 11) = 0;
    *((_OWORD *)v10 - 4) = *(_OWORD *)&v4[v9 - 64];
    *((_OWORD *)v10 - 3) = *(_OWORD *)&v4[v9 - 48];
    *((void *)v10 - 4) = *(void *)&v4[v9 - 32];
    *((void *)v11 - 6) = 0;
    *((void *)v11 - 5) = 0;
    *((void *)v11 - 4) = 0;
    *(_OWORD *)(v10 - 24) = *(_OWORD *)&v4[v9 - 24];
    *((void *)v10 - 1) = *(void *)&v4[v9 - 8];
    *((void *)v11 - 3) = 0;
    *((void *)v11 - 2) = 0;
    *((void *)v11 - 1) = 0;
    v9 -= 88;
  }
  while (&v4[v9] != v2);
  uint64_t v13 = *a1;
  uint64_t v2 = a1[1];
  *a1 = &v8[v9];
  a1[1] = v8;
  a1[2] = v7;
  if (v2 != v13)
  {
    do
    {
      v2 -= 88;
      sub_94D4E4((uint64_t)v2);
    }
    while (v2 != v13);
    uint64_t v2 = v13;
  }
  if (v2)
  {
LABEL_10:
    operator delete(v2);
  }
}

uint64_t sub_94D490(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 88;
    sub_94D4E4(i - 88);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_94D4E4(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 64);
  if (v2)
  {
    uint64_t v3 = *(void ***)(a1 + 72);
    unint64_t v4 = *(void **)(a1 + 64);
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = (void **)*(v3 - 3);
        if (v5)
        {
          unsigned int v6 = (void **)*(v3 - 2);
          unsigned int v7 = *(v3 - 3);
          if (v6 != v5)
          {
            do
            {
              if (*((char *)v6 - 1) < 0) {
                operator delete(*(v6 - 3));
              }
              v6 -= 4;
            }
            while (v6 != v5);
            unsigned int v7 = *(v3 - 3);
          }
          *(v3 - 2) = v5;
          operator delete(v7);
        }
        uint64_t v8 = v3 - 8;
        if (*((char *)v3 - 41) < 0) {
          operator delete(*v8);
        }
        v3 -= 8;
      }
      while (v8 != v2);
      unint64_t v4 = *(void **)(a1 + 64);
    }
    *(void *)(a1 + 72) = v2;
    operator delete(v4);
  }
  uint64_t v9 = *(void *)(a1 + 40);
  if (v9)
  {
    uint64_t v10 = *(void *)(a1 + 48);
    uint64_t v11 = *(void **)(a1 + 40);
    if (v10 != v9)
    {
      do
      {
        if (*(char *)(v10 - 1) < 0) {
          operator delete(*(void **)(v10 - 24));
        }
        v10 -= 32;
      }
      while (v10 != v9);
      uint64_t v11 = *(void **)(a1 + 40);
    }
    *(void *)(a1 + 48) = v9;
    operator delete(v11);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

double sub_94D61C@<D0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 24) = 2;
  uint64_t v4 = sub_1133328();
  uint64_t v5 = 0;
  *(_OWORD *)(a2 + 40) = 0u;
  unsigned int v6 = (void **)(a2 + 40);
  *(void *)(a2 + 32) = v4;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  unsigned int v7 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v7 >= 5u)
  {
    uint64_t v8 = v7[2];
    if (v8) {
      uint64_t v5 = (int *)((char *)a1 + v8 + *(unsigned int *)((char *)a1 + v8));
    }
    else {
      uint64_t v5 = 0;
    }
  }
  sub_4A0694(v5, (uint64_t)__p);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(_OWORD *)a2 = *(_OWORD *)__p;
  *(void *)(a2 + 16) = v18;
  HIBYTE(v18) = 0;
  LOBYTE(__p[0]) = 0;
  *(_OWORD *)(a2 + 24) = v19;
  uint64_t v9 = *(void *)(a2 + 40);
  if (v9)
  {
    uint64_t v10 = *(void *)(a2 + 48);
    uint64_t v11 = *(void **)(a2 + 40);
    if (v10 != v9)
    {
      do
      {
        if (*(char *)(v10 - 1) < 0) {
          operator delete(*(void **)(v10 - 24));
        }
        v10 -= 32;
      }
      while (v10 != v9);
      uint64_t v11 = *v6;
    }
    *(void *)(a2 + 48) = v9;
    operator delete(v11);
    *unsigned int v6 = 0;
    *(void *)(a2 + 48) = 0;
    *(void *)(a2 + 56) = 0;
    int v12 = SHIBYTE(v18);
    *(_OWORD *)(a2 + 40) = v20;
    *(void *)(a2 + 56) = v21;
    long long v20 = 0uLL;
    uint64_t v21 = 0;
    if (v12 < 0)
    {
      operator delete(__p[0]);
      uint64_t v13 = (unsigned __int16 *)((char *)a1 - *a1);
      if (*v13 >= 7u) {
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v13 = (unsigned __int16 *)((char *)a1 - *a1);
      if (*v13 >= 7u) {
        goto LABEL_20;
      }
    }
LABEL_22:
    uint64_t v15 = 0;
    goto LABEL_23;
  }
  *(_OWORD *)(a2 + 40) = v20;
  *(void *)(a2 + 56) = v21;
  uint64_t v21 = 0;
  long long v20 = 0uLL;
  uint64_t v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 < 7u) {
    goto LABEL_22;
  }
LABEL_20:
  uint64_t v14 = v13[3];
  if (!v14) {
    goto LABEL_22;
  }
  uint64_t v15 = (char **)((char *)a1 + v14 + *(unsigned int *)((char *)a1 + v14));
LABEL_23:
  sub_8F48DC(v15, (void (*)(void **__return_ptr, char *))sub_4A0694, (uint64_t)__p);
  sub_94D83C((void ***)(a2 + 64));
  double result = *(double *)__p;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)__p;
  *(void *)(a2 + 80) = v18;
  return result;
}

void sub_94D814(_Unwind_Exception *a1)
{
  sub_94D4E4(v1);
  _Unwind_Resume(a1);
}

void sub_94D828(_Unwind_Exception *a1)
{
  sub_94D4E4(v1);
  _Unwind_Resume(a1);
}

void sub_94D83C(void ***a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        uint64_t v5 = (void **)*(v3 - 3);
        if (v5)
        {
          unsigned int v6 = (void **)*(v3 - 2);
          unsigned int v7 = *(v3 - 3);
          if (v6 != v5)
          {
            do
            {
              if (*((char *)v6 - 1) < 0) {
                operator delete(*(v6 - 3));
              }
              v6 -= 4;
            }
            while (v6 != v5);
            unsigned int v7 = *(v3 - 3);
          }
          *(v3 - 2) = v5;
          operator delete(v7);
        }
        uint64_t v8 = v3 - 8;
        if (*((char *)v3 - 41) < 0) {
          operator delete(*v8);
        }
        v3 -= 8;
      }
      while (v8 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

long long *sub_94D908(long long **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (long long *)a2;
  unsigned int v7 = *a1;
  unint64_t v6 = (unint64_t)a1[1];
  uint64_t v8 = 0x2E8BA2E8BA2E8BA3 * ((a2 - (uint64_t)*a1) >> 3);
  unint64_t v9 = (unint64_t)a1[2];
  if (v6 >= v9)
  {
    unint64_t v18 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v6 - (void)v7) >> 3) + 1;
    if (v18 > 0x2E8BA2E8BA2E8BALL) {
      sub_2E00();
    }
    unint64_t v19 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v9 - (void)v7) >> 3);
    if (2 * v19 > v18) {
      unint64_t v18 = 2 * v19;
    }
    if (v19 >= 0x1745D1745D1745DLL) {
      unint64_t v20 = 0x2E8BA2E8BA2E8BALL;
    }
    else {
      unint64_t v20 = v18;
    }
    long long v42 = a1 + 2;
    if (v20)
    {
      if (v20 > 0x2E8BA2E8BA2E8BALL) {
        sub_188D718();
      }
      uint64_t v21 = (long long *)operator new(88 * v20);
    }
    else
    {
      uint64_t v21 = 0;
    }
    int v38 = v21;
    int v39 = (long long *)((char *)v21 + 88 * v8);
    long long v40 = v39;
    uint64_t v41 = (long long *)((char *)v21 + 88 * v20);
    sub_94DDA0(&v38, (long long *)a3);
    int v24 = v39;
    unint64_t v25 = *a1;
    unint64_t v26 = v39;
    if (*a1 != v4)
    {
      uint64_t v27 = 0;
      do
      {
        uint64_t v28 = (uint64_t)v24 + v27;
        uint64_t v29 = (char *)v4 + v27;
        long long v30 = *(long long *)((char *)v4 + v27 - 88);
        *(void *)(v28 - 72) = *(void *)((char *)v4 + v27 - 72);
        *(_OWORD *)(v28 - 88) = v30;
        *((void *)v29 - 10) = 0;
        *((void *)v29 - 9) = 0;
        *((void *)v29 - 11) = 0;
        *(_OWORD *)(v28 - 64) = *(long long *)((char *)v4 + v27 - 64);
        *(void *)(v28 - 40) = 0;
        *(void *)(v28 - 32) = 0;
        *(void *)(v28 - 48) = 0;
        *(_OWORD *)(v28 - 48) = *(long long *)((char *)v4 + v27 - 48);
        *(void *)(v28 - 32) = *(void *)((char *)v4 + v27 - 32);
        *((void *)v29 - 6) = 0;
        *((void *)v29 - 5) = 0;
        *((void *)v29 - 4) = 0;
        *(void *)(v28 - 24) = 0;
        *(void *)(v28 - 16) = 0;
        *(void *)(v28 - 8) = 0;
        *(_OWORD *)(v28 - 24) = *(long long *)((char *)v4 + v27 - 24);
        *(void *)(v28 - 8) = *(void *)((char *)v4 + v27 - 8);
        *((void *)v29 - 3) = 0;
        *((void *)v29 - 2) = 0;
        *((void *)v29 - 1) = 0;
        v27 -= 88;
      }
      while ((long long *)((char *)v4 + v27) != v25);
      unint64_t v26 = (long long *)((char *)v24 + v27);
    }
    int v39 = v26;
    uint64_t v31 = a1[1];
    uint64_t v32 = v40;
    if (v31 != v4)
    {
      do
      {
        long long v33 = *v4;
        *((void *)v32 + 2) = *((void *)v4 + 2);
        long long *v32 = v33;
        *((void *)v4 + 1) = 0;
        *((void *)v4 + 2) = 0;
        *(void *)uint64_t v4 = 0;
        *(long long *)((char *)v32 + 24) = *(long long *)((char *)v4 + 24);
        *((void *)v32 + 6) = 0;
        *((void *)v32 + 7) = 0;
        *((void *)v32 + 5) = 0;
        *(long long *)((char *)v32 + 40) = *(long long *)((char *)v4 + 40);
        *((void *)v32 + 7) = *((void *)v4 + 7);
        *((void *)v4 + 5) = 0;
        *((void *)v4 + 6) = 0;
        *((void *)v4 + 7) = 0;
        *((void *)v32 + 8) = 0;
        *((void *)v32 + 9) = 0;
        *((void *)v32 + 10) = 0;
        v32[4] = v4[4];
        *((void *)v32 + 10) = *((void *)v4 + 10);
        *((void *)v4 + 8) = 0;
        *((void *)v4 + 9) = 0;
        *((void *)v4 + 10) = 0;
        uint64_t v32 = (long long *)((char *)v32 + 88);
        uint64_t v4 = (long long *)((char *)v4 + 88);
      }
      while (v4 != v31);
      unint64_t v26 = v39;
      uint64_t v4 = a1[1];
    }
    long long v34 = *a1;
    *a1 = v26;
    a1[1] = v32;
    uint64_t v35 = a1[2];
    a1[2] = v41;
    long long v40 = v4;
    uint64_t v41 = v35;
    int v38 = v34;
    int v39 = v34;
    if (v4 != v34)
    {
      do
      {
        long long v40 = (long long *)((char *)v4 - 88);
        sub_94D4E4((uint64_t)v4 - 88);
        uint64_t v4 = v40;
      }
      while (v40 != v34);
      uint64_t v4 = v38;
    }
    if (v4) {
      operator delete(v4);
    }
    return v24;
  }
  else if (a2 == v6)
  {
    long long v22 = *(_OWORD *)a3;
    *(void *)(a2 + 16) = *(void *)(a3 + 16);
    *(_OWORD *)a2 = v22;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)a3 = 0;
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
    *(void *)(a2 + 48) = 0;
    *(void *)(a2 + 56) = 0;
    *(void *)(a2 + 40) = 0;
    *(_OWORD *)(a2 + 40) = *(_OWORD *)(a3 + 40);
    *(void *)(a2 + 56) = *(void *)(a3 + 56);
    *(void *)(a3 + 40) = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
    BOOL v23 = (void *)v7 + 11 * v8;
    v23[8] = 0;
    v23[9] = 0;
    v23[10] = 0;
    *((_OWORD *)v23 + 4) = *(_OWORD *)(a3 + 64);
    v23[10] = *(void *)(a3 + 80);
    *(void *)(a3 + 64) = 0;
    *(void *)(a3 + 72) = 0;
    *(void *)(a3 + 80) = 0;
    a1[1] = (long long *)(a2 + 88);
  }
  else
  {
    uint64_t v10 = a1[1];
    if (v6 >= 0x58)
    {
      unint64_t v11 = v6 - 88;
      uint64_t v10 = a1[1];
      do
      {
        long long v12 = *(_OWORD *)v11;
        *((void *)v10 + 2) = *(void *)(v11 + 16);
        *uint64_t v10 = v12;
        *(void *)(v11 + 8) = 0;
        *(void *)(v11 + 16) = 0;
        *(void *)unint64_t v11 = 0;
        *(long long *)((char *)v10 + 24) = *(_OWORD *)(v11 + 24);
        *((void *)v10 + 6) = 0;
        *((void *)v10 + 7) = 0;
        *((void *)v10 + 5) = 0;
        *(long long *)((char *)v10 + 40) = *(_OWORD *)(v11 + 40);
        *((void *)v10 + 7) = *(void *)(v11 + 56);
        *(void *)(v11 + 40) = 0;
        *(void *)(v11 + 48) = 0;
        *(void *)(v11 + 56) = 0;
        *((void *)v10 + 8) = 0;
        *((void *)v10 + 9) = 0;
        *((void *)v10 + 10) = 0;
        v10[4] = *(_OWORD *)(v11 + 64);
        *((void *)v10 + 10) = *(void *)(v11 + 80);
        *(void *)(v11 + 64) = 0;
        *(void *)(v11 + 72) = 0;
        *(void *)(v11 + 80) = 0;
        uint64_t v10 = (long long *)((char *)v10 + 88);
        v11 += 88;
      }
      while (v11 < v6);
    }
    a1[1] = v10;
    sub_94DFE0((uint64_t)&v38, a2, v6 - 88, v6);
    if (*((char *)v4 + 23) < 0) {
      operator delete(*(void **)v4);
    }
    long long v13 = *(_OWORD *)a3;
    *((void *)v4 + 2) = *(void *)(a3 + 16);
    *uint64_t v4 = v13;
    *(unsigned char *)(a3 + 23) = 0;
    *(unsigned char *)a3 = 0;
    uint64_t v14 = (void **)v4 + 5;
    uint64_t v15 = (void **)*((void *)v4 + 5);
    *(long long *)((char *)v4 + 24) = *(_OWORD *)(a3 + 24);
    if (v15)
    {
      long long v16 = (void **)*((void *)v4 + 6);
      uint64_t v17 = v15;
      if (v16 != v15)
      {
        do
        {
          if (*((char *)v16 - 1) < 0) {
            operator delete(*(v16 - 3));
          }
          v16 -= 4;
        }
        while (v16 != v15);
        uint64_t v17 = *v14;
      }
      *((void *)v4 + 6) = v15;
      operator delete(v17);
      unsigned int *v14 = 0;
      *((void *)v4 + 6) = 0;
      *((void *)v4 + 7) = 0;
    }
    *(long long *)((char *)v4 + 40) = *(_OWORD *)(a3 + 40);
    *((void *)v4 + 7) = *(void *)(a3 + 56);
    *(void *)(a3 + 40) = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
    long long v36 = (void ***)v7 + 11 * v8;
    sub_94D83C(v36 + 8);
    *((_OWORD *)v36 + 4) = *(_OWORD *)(a3 + 64);
    v36[10] = *(void ***)(a3 + 80);
    *(void *)(a3 + 64) = 0;
    *(void *)(a3 + 72) = 0;
    *(void *)(a3 + 80) = 0;
  }
  return v4;
}

void sub_94DD8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_94D490((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_94DDA0(long long **a1, long long *a2)
{
  uint64_t v4 = a1[2];
  if (v4 != a1[3]) {
    goto LABEL_18;
  }
  unint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  if (v5 <= *a1)
  {
    unint64_t v12 = 0x5D1745D1745D1746 * (((char *)v4 - (char *)v6) >> 3);
    if (v4 == v6) {
      unint64_t v12 = 1;
    }
    if (v12 >= 0x2E8BA2E8BA2E8BBLL) {
      sub_188D718();
    }
    unint64_t v13 = v12 >> 2;
    uint64_t v14 = 88 * v12;
    uint64_t v15 = (char *)operator new(88 * v12);
    long long v16 = &v15[88 * v13];
    uint64_t v17 = &v15[v14];
    if (v4 == v5)
    {
      *a1 = (long long *)v15;
      a1[1] = (long long *)v16;
      a1[2] = (long long *)v16;
      a1[3] = (long long *)v17;
      if (!v6) {
        goto LABEL_17;
      }
    }
    else
    {
      unint64_t v18 = &v16[(char *)v4 - (char *)v5];
      uint64_t v19 = 88 * v13;
      do
      {
        unint64_t v20 = &v15[v19];
        long long v21 = *v5;
        *((void *)v20 + 2) = *((void *)v5 + 2);
        *(_OWORD *)unint64_t v20 = v21;
        *((void *)v5 + 1) = 0;
        *((void *)v5 + 2) = 0;
        *(void *)uint64_t v5 = 0;
        *(_OWORD *)(v20 + 24) = *(long long *)((char *)v5 + 24);
        *(_OWORD *)(v20 + 40) = *(long long *)((char *)v5 + 40);
        *((void *)v20 + 7) = *((void *)v5 + 7);
        *((void *)v5 + 5) = 0;
        *((void *)v5 + 6) = 0;
        *((void *)v5 + 7) = 0;
        *((_OWORD *)v20 + 4) = v5[4];
        *((void *)v20 + 10) = *((void *)v5 + 10);
        *((void *)v5 + 8) = 0;
        *((void *)v5 + 9) = 0;
        *((void *)v5 + 10) = 0;
        v19 += 88;
        uint64_t v5 = (long long *)((char *)v5 + 88);
      }
      while (v20 + 88 != v18);
      unint64_t v6 = *a1;
      long long v22 = a1[1];
      uint64_t v23 = (uint64_t)a1[2];
      *a1 = (long long *)v15;
      a1[1] = (long long *)v16;
      a1[2] = (long long *)v18;
      a1[3] = (long long *)v17;
      while ((long long *)v23 != v22)
      {
        v23 -= 88;
        sub_94D4E4(v23);
      }
      if (!v6) {
        goto LABEL_17;
      }
    }
    operator delete(v6);
LABEL_17:
    uint64_t v4 = a1[2];
    goto LABEL_18;
  }
  uint64_t v7 = 0x2E8BA2E8BA2E8BA3 * (((char *)v5 - (char *)*a1) >> 3);
  if (v7 >= -1) {
    uint64_t v8 = v7 + 1;
  }
  else {
    uint64_t v8 = v7 + 2;
  }
  uint64_t v9 = v8 >> 1;
  uint64_t v10 = -88 * v9;
  sub_94E118((uint64_t)&v26, a1[1], v4, (uint64_t)v5 - 88 * v9);
  uint64_t v4 = v11;
  a1[1] = (long long *)((char *)a1[1] + v10);
  a1[2] = v11;
LABEL_18:
  long long v24 = *a2;
  *((void *)v4 + 2) = *((void *)a2 + 2);
  *uint64_t v4 = v24;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(long long *)((char *)v4 + 24) = *(long long *)((char *)a2 + 24);
  *((void *)v4 + 6) = 0;
  *((void *)v4 + 7) = 0;
  *((void *)v4 + 5) = 0;
  *(long long *)((char *)v4 + 40) = *(long long *)((char *)a2 + 40);
  *((void *)v4 + 7) = *((void *)a2 + 7);
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 6) = 0;
  *((void *)a2 + 7) = 0;
  *((void *)v4 + 8) = 0;
  *((void *)v4 + 9) = 0;
  *((void *)v4 + 10) = 0;
  __n128 result = (__n128)a2[4];
  v4[4] = (__int128)result;
  *((void *)v4 + 10) = *((void *)a2 + 10);
  *((void *)a2 + 8) = 0;
  *((void *)a2 + 9) = 0;
  *((void *)a2 + 10) = 0;
  a1[2] = (long long *)((char *)a1[2] + 88);
  return result;
}

uint64_t sub_94DFE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = a3;
    do
    {
      uint64_t v9 = (void **)(a4 - 88);
      if (*(char *)(a4 - 65) < 0) {
        operator delete(*v9);
      }
      uint64_t v10 = v7 - 88;
      long long v11 = *(_OWORD *)(v7 - 88);
      *(void *)(a4 - 72) = *(void *)(v7 - 72);
      *(_OWORD *)uint64_t v9 = v11;
      *(unsigned char *)(v7 - 65) = 0;
      *(unsigned char *)(v7 - 88) = 0;
      unint64_t v12 = (void **)(a4 - 48);
      unint64_t v13 = *(void ***)(a4 - 48);
      *(_OWORD *)(a4 - 64) = *(_OWORD *)(v7 - 64);
      if (v13)
      {
        uint64_t v14 = *(void ***)(a4 - 40);
        uint64_t v8 = v13;
        if (v14 != v13)
        {
          do
          {
            if (*((char *)v14 - 1) < 0) {
              operator delete(*(v14 - 3));
            }
            v14 -= 4;
          }
          while (v14 != v13);
          uint64_t v8 = *v12;
        }
        *(void *)(a4 - 40) = v13;
        operator delete(v8);
        char *v12 = 0;
        *(void *)(a4 - 40) = 0;
        *(void *)(a4 - 32) = 0;
      }
      *(_OWORD *)(a4 - 48) = *(_OWORD *)(v7 - 48);
      *(void *)(a4 - 32) = *(void *)(v7 - 32);
      *(void *)(v7 - 48) = 0;
      *(void *)(v7 - 40) = 0;
      *(void *)(v7 - 32) = 0;
      sub_94D83C((void ***)(a4 - 24));
      *(_OWORD *)(a4 - 24) = *(_OWORD *)(v7 - 24);
      *(void *)(a4 - 8) = *(void *)(v7 - 8);
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      a4 -= 88;
      v7 -= 88;
    }
    while (v10 != a2);
  }
  return a3;
}

long long *sub_94E118(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (*(char *)(a4 + 23) < 0) {
        operator delete(*(void **)a4);
      }
      long long v8 = *v5;
      *(void *)(a4 + 16) = *((void *)v5 + 2);
      *(_OWORD *)a4 = v8;
      *((unsigned char *)v5 + 23) = 0;
      *(unsigned char *)uint64_t v5 = 0;
      uint64_t v9 = (void **)(a4 + 40);
      uint64_t v10 = *(void ***)(a4 + 40);
      *(_OWORD *)(a4 + 24) = *(long long *)((char *)v5 + 24);
      if (v10)
      {
        long long v11 = *(void ***)(a4 + 48);
        uint64_t v7 = v10;
        if (v11 != v10)
        {
          do
          {
            if (*((char *)v11 - 1) < 0) {
              operator delete(*(v11 - 3));
            }
            v11 -= 4;
          }
          while (v11 != v10);
          uint64_t v7 = *v9;
        }
        *(void *)(a4 + 48) = v10;
        operator delete(v7);
        *uint64_t v9 = 0;
        *(void *)(a4 + 48) = 0;
        *(void *)(a4 + 56) = 0;
      }
      *(_OWORD *)(a4 + 40) = *(long long *)((char *)v5 + 40);
      *(void *)(a4 + 56) = *((void *)v5 + 7);
      *((void *)v5 + 5) = 0;
      *((void *)v5 + 6) = 0;
      *((void *)v5 + 7) = 0;
      sub_94D83C((void ***)(a4 + 64));
      *(_OWORD *)(a4 + 64) = v5[4];
      *(void *)(a4 + 80) = *((void *)v5 + 10);
      *((void *)v5 + 8) = 0;
      *((void *)v5 + 9) = 0;
      *((void *)v5 + 10) = 0;
      uint64_t v5 = (long long *)((char *)v5 + 88);
      a4 += 88;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void *sub_94E234(uint64_t a1, void *a2, void *a3, int *a4)
{
  uint64_t v8 = *a2;
  unint64_t v9 = __ROR8__(*a2, 32);
  unint64_t v10 = 0xC4CEB9FE1A85EC53
      * ((0xFF51AFD7ED558CCDLL * (v9 ^ (v9 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v9 ^ (v9 >> 33))) >> 33));
  unint64_t v11 = v10 ^ (v10 >> 33);
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10 ^ (v10 >> 33);
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
    }
    else
    {
      unint64_t v4 = v11 & (v12 - 1);
    }
    uint64_t v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      uint64_t v15 = *v14;
      if (*v14)
      {
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v18 = v15[1];
            if (v18 == v11)
            {
              if (*((_DWORD *)v15 + 4) == v8 && *((_DWORD *)v15 + 5) == HIDWORD(v8)) {
                return v15;
              }
            }
            else if ((v18 & (v12 - 1)) != v4)
            {
              goto LABEL_31;
            }
            uint64_t v15 = (void *)*v15;
            if (!v15) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v16 = v15[1];
          if (v16 == v11)
          {
            if (*((_DWORD *)v15 + 4) == v8 && *((_DWORD *)v15 + 5) == HIDWORD(v8)) {
              return v15;
            }
          }
          else
          {
            if (v16 >= v12) {
              v16 %= v12;
            }
            if (v16 != v4) {
              break;
            }
          }
          uint64_t v15 = (void *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_31:
  uint64_t v15 = operator new(0x20uLL);
  *uint64_t v15 = 0;
  v15[1] = v11;
  uint64_t v20 = *a4;
  v15[2] = *a3;
  v15[3] = v20;
  float v21 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v22 = *(float *)(a1 + 32);
  if (v12 && (float)(v22 * (float)v12) >= v21)
  {
    uint64_t v23 = *(void *)a1;
    long long v24 = *(void **)(*(void *)a1 + 8 * v4);
    if (v24)
    {
LABEL_34:
      *uint64_t v15 = *v24;
LABEL_69:
      *long long v24 = v15;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v25 = 1;
    if (v12 >= 3) {
      BOOL v25 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v26 = v25 | (2 * v12);
    unint64_t v27 = vcvtps_u32_f32(v21 / v22);
    if (v26 <= v27) {
      size_t prime = v27;
    }
    else {
      size_t prime = v26;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v12 = *(void *)(a1 + 8);
    }
    if (prime > v12) {
      goto LABEL_45;
    }
    if (prime < v12)
    {
      unint64_t v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v12 < 3 || (uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        unint64_t v29 = std::__next_prime(v29);
      }
      else
      {
        uint64_t v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2) {
          unint64_t v29 = v31;
        }
      }
      if (prime <= v29) {
        size_t prime = v29;
      }
      if (prime < v12) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v32 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        uint64_t v23 = *(void *)a1;
        long long v24 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        if (v24) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v4 = v11;
        uint64_t v23 = *(void *)a1;
        long long v24 = *(void **)(*(void *)a1 + 8 * v11);
        if (v24) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v4 = v32 & v11;
      uint64_t v23 = *(void *)a1;
      long long v24 = *(void **)(*(void *)a1 + 8 * (v32 & v11));
      if (v24) {
        goto LABEL_34;
      }
    }
  }
  *uint64_t v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  *(void *)(v23 + 8 * v4) = a1 + 16;
  if (*v15)
  {
    unint64_t v33 = *(void *)(*v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v33 >= v12) {
        v33 %= v12;
      }
    }
    else
    {
      v33 &= v12 - 1;
    }
    long long v24 = (void *)(*(void *)a1 + 8 * v33);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_94E584(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_94E598(uint64_t a1, void *a2, void *a3, uint64_t *a4)
{
  uint64_t v8 = *a2;
  unint64_t v9 = __ROR8__(*a2, 32);
  unint64_t v10 = 0xC4CEB9FE1A85EC53
      * ((0xFF51AFD7ED558CCDLL * (v9 ^ (v9 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v9 ^ (v9 >> 33))) >> 33));
  unint64_t v11 = v10 ^ (v10 >> 33);
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10 ^ (v10 >> 33);
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
    }
    else
    {
      unint64_t v4 = v11 & (v12 - 1);
    }
    uint64_t v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      uint64_t v15 = *v14;
      if (*v14)
      {
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v18 = v15[1];
            if (v18 == v11)
            {
              if (*((_DWORD *)v15 + 4) == v8 && *((_DWORD *)v15 + 5) == HIDWORD(v8)) {
                return v15;
              }
            }
            else if ((v18 & (v12 - 1)) != v4)
            {
              goto LABEL_31;
            }
            uint64_t v15 = (void *)*v15;
            if (!v15) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v16 = v15[1];
          if (v16 == v11)
          {
            if (*((_DWORD *)v15 + 4) == v8 && *((_DWORD *)v15 + 5) == HIDWORD(v8)) {
              return v15;
            }
          }
          else
          {
            if (v16 >= v12) {
              v16 %= v12;
            }
            if (v16 != v4) {
              break;
            }
          }
          uint64_t v15 = (void *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_31:
  uint64_t v15 = operator new(0x20uLL);
  *uint64_t v15 = 0;
  v15[1] = v11;
  uint64_t v20 = *a4;
  v15[2] = *a3;
  v15[3] = v20;
  float v21 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v22 = *(float *)(a1 + 32);
  if (v12 && (float)(v22 * (float)v12) >= v21)
  {
    uint64_t v23 = *(void *)a1;
    long long v24 = *(void **)(*(void *)a1 + 8 * v4);
    if (v24)
    {
LABEL_34:
      *uint64_t v15 = *v24;
LABEL_69:
      *long long v24 = v15;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v25 = 1;
    if (v12 >= 3) {
      BOOL v25 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v26 = v25 | (2 * v12);
    unint64_t v27 = vcvtps_u32_f32(v21 / v22);
    if (v26 <= v27) {
      size_t prime = v27;
    }
    else {
      size_t prime = v26;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v12 = *(void *)(a1 + 8);
    }
    if (prime > v12) {
      goto LABEL_45;
    }
    if (prime < v12)
    {
      unint64_t v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v12 < 3 || (uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        unint64_t v29 = std::__next_prime(v29);
      }
      else
      {
        uint64_t v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2) {
          unint64_t v29 = v31;
        }
      }
      if (prime <= v29) {
        size_t prime = v29;
      }
      if (prime < v12) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v32 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        uint64_t v23 = *(void *)a1;
        long long v24 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        if (v24) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v4 = v11;
        uint64_t v23 = *(void *)a1;
        long long v24 = *(void **)(*(void *)a1 + 8 * v11);
        if (v24) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v4 = v32 & v11;
      uint64_t v23 = *(void *)a1;
      long long v24 = *(void **)(*(void *)a1 + 8 * (v32 & v11));
      if (v24) {
        goto LABEL_34;
      }
    }
  }
  *uint64_t v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  *(void *)(v23 + 8 * v4) = a1 + 16;
  if (*v15)
  {
    unint64_t v33 = *(void *)(*v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v33 >= v12) {
        v33 %= v12;
      }
    }
    else
    {
      v33 &= v12 - 1;
    }
    long long v24 = (void *)(*(void *)a1 + 8 * v33);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_94E8E8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_94E8FC(void *a1, uint64_t *a2, uint64_t a3, char a4, __n128 a5)
{
BOOL sub_94FBD8(uint64_t a1, void *a2, __n128 a3)
{
  uint64_t v5 = ((uint64_t)a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v5)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      unint64_t v7 = *(a2 - 1);
      unint64_t v8 = *(void *)(a1 + 16);
      BOOL v9 = *(a2 - 2) < *(void *)(a1 + 8);
      BOOL v10 = v7 == v8;
      BOOL v11 = v7 > v8;
      if (!v10) {
        BOOL v9 = v11;
      }
      if (v9)
      {
        uint64_t v12 = *(void *)(a1 + 16);
        __n128 v13 = *(__n128 *)a1;
        uint64_t v14 = *(a2 - 1);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 3);
        *(void *)(a1 + 16) = v14;
        *(__n128 *)(a2 - 3) = v13;
        *(a2 - 1) = v12;
      }
      return result;
    case 3uLL:
      uint64_t v15 = (__n128 *)(a1 + 24);
      uint64_t v16 = (__n128 *)(a2 - 3);
      unint64_t v17 = *(void *)(a1 + 32);
      unint64_t v18 = *(void *)(a1 + 40);
      unint64_t v19 = *(void *)(a1 + 16);
      BOOL v20 = v17 < *(void *)(a1 + 8);
      BOOL v10 = v18 == v19;
      BOOL v21 = v18 > v19;
      if (!v10) {
        BOOL v20 = v21;
      }
      unint64_t v22 = *(a2 - 1);
      BOOL v23 = *(a2 - 2) < v17;
      BOOL v10 = v22 == v18;
      BOOL v24 = v22 > v18;
      if (!v10) {
        BOOL v23 = v24;
      }
      if (v20)
      {
        if (v23)
        {
          uint64_t v25 = *(void *)(a1 + 16);
          __n128 v26 = *(__n128 *)a1;
          uint64_t v27 = *(a2 - 1);
          *(__n128 *)a1 = *v16;
          *(void *)(a1 + 16) = v27;
          *uint64_t v16 = v26;
          *(a2 - 1) = v25;
        }
        else
        {
          uint64_t v85 = *(void *)(a1 + 16);
          __n128 v86 = *(__n128 *)a1;
          *(__n128 *)a1 = *v15;
          *(void *)(a1 + 16) = *(void *)(a1 + 40);
          *uint64_t v15 = v86;
          *(void *)(a1 + 40) = v85;
          unint64_t v87 = *(a2 - 1);
          unint64_t v88 = *(void *)(a1 + 40);
          BOOL v89 = *(a2 - 2) < *(void *)(a1 + 32);
          BOOL v10 = v87 == v88;
          BOOL v90 = v87 > v88;
          if (!v10) {
            BOOL v89 = v90;
          }
          if (v89)
          {
            uint64_t v91 = *(void *)(a1 + 40);
            __n128 v92 = *v15;
            uint64_t v93 = *(a2 - 1);
            *uint64_t v15 = *v16;
            *(void *)(a1 + 40) = v93;
            *uint64_t v16 = v92;
            *(a2 - 1) = v91;
          }
        }
      }
      else if (v23)
      {
        uint64_t v69 = *(void *)(a1 + 40);
        __n128 v70 = *v15;
        uint64_t v71 = *(a2 - 1);
        *uint64_t v15 = *v16;
        *(void *)(a1 + 40) = v71;
        *uint64_t v16 = v70;
        *(a2 - 1) = v69;
        unint64_t v72 = *(void *)(a1 + 40);
        unint64_t v73 = *(void *)(a1 + 16);
        BOOL v74 = *(void *)(a1 + 32) < *(void *)(a1 + 8);
        BOOL v10 = v72 == v73;
        BOOL v75 = v72 > v73;
        if (!v10) {
          BOOL v74 = v75;
        }
        if (v74)
        {
          uint64_t v76 = *(void *)(a1 + 16);
          __n128 v77 = *(__n128 *)a1;
          *(__n128 *)a1 = *v15;
          *(void *)(a1 + 16) = *(void *)(a1 + 40);
          *uint64_t v15 = v77;
          *(void *)(a1 + 40) = v76;
        }
      }
      return result;
    case 4uLL:
      sub_9501C8((__n128 *)a1, (__n128 *)(a1 + 24), (__n128 *)(a1 + 48), (__n128 *)(a2 - 3), a3);
      return 1;
    case 5uLL:
      BOOL v41 = (__n128 *)(a1 + 24);
      __n128 v42 = (__n128 *)(a1 + 48);
      __n128 v43 = (__n128 *)(a1 + 72);
      sub_9501C8((__n128 *)a1, (__n128 *)(a1 + 24), (__n128 *)(a1 + 48), (__n128 *)(a1 + 72), a3);
      unint64_t v44 = *(a2 - 1);
      unint64_t v45 = *(void *)(a1 + 88);
      BOOL v46 = *(a2 - 2) < *(void *)(a1 + 80);
      BOOL v10 = v44 == v45;
      BOOL v47 = v44 > v45;
      if (!v10) {
        BOOL v46 = v47;
      }
      if (v46)
      {
        uint64_t v48 = *(void *)(a1 + 88);
        __n128 v49 = *v43;
        uint64_t v50 = *(a2 - 1);
        *__n128 v43 = *(__n128 *)(a2 - 3);
        *(void *)(a1 + 88) = v50;
        *(__n128 *)(a2 - 3) = v49;
        *(a2 - 1) = v48;
        unint64_t v51 = *(void *)(a1 + 88);
        unint64_t v52 = *(void *)(a1 + 64);
        BOOL v53 = *(void *)(a1 + 80) < *(void *)(a1 + 56);
        BOOL v10 = v51 == v52;
        BOOL v54 = v51 > v52;
        if (!v10) {
          BOOL v53 = v54;
        }
        if (v53)
        {
          uint64_t v55 = *(void *)(a1 + 64);
          __n128 v56 = *v42;
          *__n128 v42 = *v43;
          *(void *)(a1 + 64) = *(void *)(a1 + 88);
          *__n128 v43 = v56;
          *(void *)(a1 + 88) = v55;
          unint64_t v57 = *(void *)(a1 + 64);
          unint64_t v58 = *(void *)(a1 + 40);
          BOOL v59 = *(void *)(a1 + 56) < *(void *)(a1 + 32);
          BOOL v10 = v57 == v58;
          BOOL v60 = v57 > v58;
          if (!v10) {
            BOOL v59 = v60;
          }
          if (v59)
          {
            uint64_t v61 = *(void *)(a1 + 40);
            __n128 v62 = *v41;
            __n128 *v41 = *v42;
            *(void *)(a1 + 40) = *(void *)(a1 + 64);
            *__n128 v42 = v62;
            *(void *)(a1 + 64) = v61;
            unint64_t v63 = *(void *)(a1 + 40);
            unint64_t v64 = *(void *)(a1 + 16);
            BOOL v65 = *(void *)(a1 + 32) < *(void *)(a1 + 8);
            BOOL v10 = v63 == v64;
            BOOL v66 = v63 > v64;
            if (!v10) {
              BOOL v65 = v66;
            }
            if (v65)
            {
              uint64_t v67 = *(void *)(a1 + 16);
              __n128 v68 = *(__n128 *)a1;
              *(__n128 *)a1 = *v41;
              *(void *)(a1 + 16) = *(void *)(a1 + 40);
              __n128 *v41 = v68;
              *(void *)(a1 + 40) = v67;
            }
          }
        }
      }
      return 1;
    default:
      __n128 v28 = (void *)(a1 + 48);
      unint64_t v29 = (__n128 *)(a1 + 24);
      unint64_t v30 = *(void *)(a1 + 32);
      unint64_t v31 = *(void *)(a1 + 40);
      unint64_t v33 = *(void *)(a1 + 8);
      unint64_t v32 = *(void *)(a1 + 16);
      if (v31 == v32) {
        BOOL v34 = v30 < v33;
      }
      else {
        BOOL v34 = v31 > v32;
      }
      unint64_t v36 = *(void *)(a1 + 56);
      unint64_t v35 = *(void *)(a1 + 64);
      BOOL v37 = v36 < v30;
      BOOL v10 = v35 == v31;
      BOOL v38 = v35 > v31;
      if (!v10) {
        BOOL v37 = v38;
      }
      if (v34)
      {
        if (v37)
        {
          uint64_t v39 = *(void *)(a1 + 16);
          __n128 v40 = *(__n128 *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v28;
          *(void *)(a1 + 16) = *(void *)(a1 + 64);
          *(__n128 *)__n128 v28 = v40;
          *(void *)(a1 + 64) = v39;
        }
        else
        {
          uint64_t v94 = *(void *)(a1 + 16);
          __n128 v95 = *(__n128 *)a1;
          *(__n128 *)a1 = *v29;
          *(void *)(a1 + 16) = *(void *)(a1 + 40);
          *unint64_t v29 = v95;
          *(void *)(a1 + 40) = v94;
          unint64_t v96 = *(void *)(a1 + 40);
          BOOL v97 = v36 < *(void *)(a1 + 32);
          BOOL v10 = v35 == v96;
          BOOL v98 = v35 > v96;
          if (!v10) {
            BOOL v97 = v98;
          }
          if (v97)
          {
            uint64_t v99 = *(void *)(a1 + 40);
            __n128 v100 = *v29;
            *unint64_t v29 = *(__n128 *)v28;
            *(void *)(a1 + 40) = *(void *)(a1 + 64);
            *(__n128 *)__n128 v28 = v100;
            *(void *)(a1 + 64) = v99;
          }
        }
      }
      else if (v37)
      {
        uint64_t v78 = *(void *)(a1 + 40);
        __n128 v79 = *v29;
        *unint64_t v29 = *(__n128 *)v28;
        *(void *)(a1 + 40) = *(void *)(a1 + 64);
        *(__n128 *)__n128 v28 = v79;
        *(void *)(a1 + 64) = v78;
        unint64_t v80 = *(void *)(a1 + 40);
        BOOL v81 = *(void *)(a1 + 32) < v33;
        BOOL v10 = v80 == v32;
        BOOL v82 = v80 > v32;
        if (v10) {
          BOOL v82 = v81;
        }
        if (v82)
        {
          uint64_t v83 = *(void *)(a1 + 16);
          __n128 v84 = *(__n128 *)a1;
          *(__n128 *)a1 = *v29;
          *(void *)(a1 + 16) = *(void *)(a1 + 40);
          *unint64_t v29 = v84;
          *(void *)(a1 + 40) = v83;
        }
      }
      unint64_t v101 = (void *)(a1 + 72);
      if ((void *)(a1 + 72) == a2) {
        return 1;
      }
      uint64_t v102 = 0;
      int v103 = 0;
      break;
  }
  while (1)
  {
    unint64_t v104 = v101[1];
    unint64_t v105 = v101[2];
    unint64_t v107 = v28[1];
    unint64_t v106 = v28[2];
    BOOL v108 = v104 < v107;
    BOOL v10 = v105 == v106;
    BOOL v109 = v105 > v106;
    if (v10) {
      BOOL v109 = v108;
    }
    if (v109) {
      break;
    }
LABEL_67:
    __n128 v28 = v101;
    v102 += 24;
    v101 += 3;
    if (v101 == a2) {
      return 1;
    }
  }
  uint64_t v110 = *v101;
  uint64_t v111 = v102;
  do
  {
    uint64_t v112 = a1 + v111;
    *(_OWORD *)(v112 + 72) = *(_OWORD *)(a1 + v111 + 48);
    *(void *)(v112 + 88) = *(void *)(a1 + v111 + 64);
    if (v111 == -48)
    {
      *(void *)a1 = v110;
      *(void *)(a1 + 8) = v104;
      *(void *)(a1 + 16) = v105;
      if (++v103 != 8) {
        goto LABEL_67;
      }
      return v101 + 3 == a2;
    }
    unint64_t v114 = *(void *)(v112 + 32);
    unint64_t v113 = *(void *)(v112 + 40);
    BOOL v115 = v104 < v114;
    BOOL v10 = v105 == v113;
    BOOL v116 = v105 > v113;
    if (v10) {
      BOOL v116 = v115;
    }
    v111 -= 24;
  }
  while (v116);
  uint64_t v117 = (void *)(a1 + v111);
  v117[9] = v110;
  v117[10] = v104;
  v117[11] = v105;
  if (++v103 != 8) {
    goto LABEL_67;
  }
  return v101 + 3 == a2;
}

__n128 sub_9501C8(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 result)
{
  unint64_t v5 = a2->n128_u64[1];
  unint64_t v6 = a2[1].n128_u64[0];
  unint64_t v7 = a1[1].n128_u64[0];
  BOOL v8 = v5 < a1->n128_u64[1];
  BOOL v9 = v6 == v7;
  BOOL v10 = v6 > v7;
  if (!v9) {
    BOOL v8 = v10;
  }
  unint64_t v11 = a3[1].n128_u64[0];
  BOOL v12 = a3->n128_u64[1] < v5;
  BOOL v9 = v11 == v6;
  BOOL v13 = v11 > v6;
  if (!v9) {
    BOOL v12 = v13;
  }
  if (v8)
  {
    if (v12)
    {
      unint64_t v14 = a1[1].n128_u64[0];
      BOOL result = *a1;
      unint64_t v15 = a3[1].n128_u64[0];
      *a1 = *a3;
      a1[1].n128_u64[0] = v15;
LABEL_17:
      *a3 = result;
      a3[1].n128_u64[0] = v14;
      goto LABEL_18;
    }
    unint64_t v24 = a1[1].n128_u64[0];
    BOOL result = *a1;
    unint64_t v25 = a2[1].n128_u64[0];
    *a1 = *a2;
    a1[1].n128_u64[0] = v25;
    *a2 = result;
    a2[1].n128_u64[0] = v24;
    unint64_t v26 = a3[1].n128_u64[0];
    unint64_t v27 = a2[1].n128_u64[0];
    BOOL v28 = a3->n128_u64[1] < a2->n128_u64[1];
    BOOL v9 = v26 == v27;
    BOOL v29 = v26 > v27;
    if (!v9) {
      BOOL v28 = v29;
    }
    if (v28)
    {
      unint64_t v14 = a2[1].n128_u64[0];
      BOOL result = *a2;
      unint64_t v30 = a3[1].n128_u64[0];
      *a2 = *a3;
      a2[1].n128_u64[0] = v30;
      goto LABEL_17;
    }
  }
  else if (v12)
  {
    unint64_t v16 = a2[1].n128_u64[0];
    BOOL result = *a2;
    unint64_t v17 = a3[1].n128_u64[0];
    *a2 = *a3;
    a2[1].n128_u64[0] = v17;
    *a3 = result;
    a3[1].n128_u64[0] = v16;
    unint64_t v18 = a2[1].n128_u64[0];
    unint64_t v19 = a1[1].n128_u64[0];
    BOOL v20 = a2->n128_u64[1] < a1->n128_u64[1];
    BOOL v9 = v18 == v19;
    BOOL v21 = v18 > v19;
    if (!v9) {
      BOOL v20 = v21;
    }
    if (v20)
    {
      unint64_t v22 = a1[1].n128_u64[0];
      BOOL result = *a1;
      unint64_t v23 = a2[1].n128_u64[0];
      *a1 = *a2;
      a1[1].n128_u64[0] = v23;
      *a2 = result;
      a2[1].n128_u64[0] = v22;
    }
  }
LABEL_18:
  unint64_t v31 = a4[1].n128_u64[0];
  unint64_t v32 = a3[1].n128_u64[0];
  BOOL v33 = a4->n128_u64[1] < a3->n128_u64[1];
  BOOL v9 = v31 == v32;
  BOOL v34 = v31 > v32;
  if (!v9) {
    BOOL v33 = v34;
  }
  if (v33)
  {
    unint64_t v35 = a3[1].n128_u64[0];
    BOOL result = *a3;
    unint64_t v36 = a4[1].n128_u64[0];
    *a3 = *a4;
    a3[1].n128_u64[0] = v36;
    *a4 = result;
    a4[1].n128_u64[0] = v35;
    unint64_t v37 = a3[1].n128_u64[0];
    unint64_t v38 = a2[1].n128_u64[0];
    BOOL v39 = a3->n128_u64[1] < a2->n128_u64[1];
    BOOL v9 = v37 == v38;
    BOOL v40 = v37 > v38;
    if (!v9) {
      BOOL v39 = v40;
    }
    if (v39)
    {
      unint64_t v41 = a2[1].n128_u64[0];
      BOOL result = *a2;
      unint64_t v42 = a3[1].n128_u64[0];
      *a2 = *a3;
      a2[1].n128_u64[0] = v42;
      *a3 = result;
      a3[1].n128_u64[0] = v41;
      unint64_t v43 = a2[1].n128_u64[0];
      unint64_t v44 = a1[1].n128_u64[0];
      BOOL v45 = a2->n128_u64[1] < a1->n128_u64[1];
      BOOL v9 = v43 == v44;
      BOOL v46 = v43 > v44;
      if (!v9) {
        BOOL v45 = v46;
      }
      if (v45)
      {
        unint64_t v47 = a1[1].n128_u64[0];
        BOOL result = *a1;
        unint64_t v48 = a2[1].n128_u64[0];
        *a1 = *a2;
        a1[1].n128_u64[0] = v48;
        *a2 = result;
        a2[1].n128_u64[0] = v47;
      }
    }
  }
  return result;
}

char *sub_9503D0(unint64_t *a1, void *a2, void *a3)
{
  unint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v7 = (uint64_t)a2 - *a1;
  uint64_t v8 = v7 >> 3;
  BOOL v9 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  unint64_t v10 = a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(void *)BOOL v9 = *a3;
      a1[1] = (unint64_t)(v9 + 8);
      return v9;
    }
    int64_t v11 = v5 - (void)(v9 + 8);
    uint64_t v12 = v11 >> 3;
    BOOL v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      unint64_t v19 = (void *)a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      unint64_t v15 = (char *)(v14 + v6);
      unint64_t v16 = v14 + v6 + 8;
      if (v5 > v16) {
        unint64_t v16 = a1[1];
      }
      unint64_t v17 = v16 + ~v6 - v14;
      if (v17 < 0x58)
      {
        unint64_t v19 = (void *)a1[1];
      }
      else
      {
        unint64_t v18 = v5 - (void)v15;
        unint64_t v19 = (void *)a1[1];
        if (v18 >= 0x20)
        {
          uint64_t v20 = (v17 >> 3) + 1;
          uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
          BOOL v13 = (uint64_t *)((char *)v13 + v21);
          unint64_t v19 = (void *)(v5 + v21);
          unint64_t v22 = (_OWORD *)(v5 + 16);
          unint64_t v23 = (long long *)(8 * v12 + 8 * v8 + v6 + 16);
          uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            *unint64_t v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 4;
          }
          while (v24);
          if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_50;
          }
        }
      }
      do
      {
        uint64_t v56 = *v13++;
        *v19++ = v56;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_50:
    a1[1] = (unint64_t)v19;
    if ((char *)v5 != v9 + 8) {
      memmove((void *)(v5 - 8 * v12), v9, v11);
    }
    *(void *)BOOL v9 = *a3;
    return v9;
  }
  unint64_t v26 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v26 >> 61) {
    sub_2E00();
  }
  uint64_t v28 = v10 - v6;
  if (v28 >> 2 > v26) {
    unint64_t v26 = v28 >> 2;
  }
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v29 = v26;
  }
  if (v29)
  {
    if (v29 >> 61) {
      sub_188D718();
    }
    unint64_t v30 = (char *)operator new(8 * v29);
    unint64_t v31 = &v30[8 * v8];
    unint64_t v32 = &v30[8 * v29];
    if (v8 != v29) {
      goto LABEL_28;
    }
  }
  else
  {
    unint64_t v30 = 0;
    unint64_t v31 = (char *)(8 * v8);
    unint64_t v32 = 0;
    if (v8) {
      goto LABEL_28;
    }
  }
  if (v7 < 1)
  {
    if ((void *)v6 == a2) {
      unint64_t v53 = 1;
    }
    else {
      unint64_t v53 = v7 >> 2;
    }
    if (v53 >> 61) {
      sub_188D718();
    }
    BOOL v54 = (char *)operator new(8 * v53);
    unint64_t v31 = &v54[8 * (v53 >> 2)];
    unint64_t v32 = &v54[8 * v53];
    if (v30)
    {
      uint64_t v55 = &v54[8 * v53];
      operator delete(v30);
      unint64_t v32 = v55;
      BOOL v34 = (char *)*a1;
      *(void *)unint64_t v31 = *a3;
      unint64_t v35 = v31 + 8;
      unint64_t v36 = v31;
      if (v34 != v9) {
        goto LABEL_29;
      }
      goto LABEL_35;
    }
  }
  else
  {
    unint64_t v33 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v33 = v8 + 1;
    }
    v31 -= 8 * (v33 >> 1);
  }
LABEL_28:
  BOOL v34 = (char *)v6;
  *(void *)unint64_t v31 = *a3;
  unint64_t v35 = v31 + 8;
  unint64_t v36 = v31;
  if ((char *)v6 != v9)
  {
LABEL_29:
    unint64_t v37 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    unint64_t v38 = v37 - v34 - 8;
    BOOL v39 = v9;
    unint64_t v36 = v31;
    if (v38 < 0x58) {
      goto LABEL_59;
    }
    BOOL v39 = v9;
    unint64_t v36 = v31;
    if ((unint64_t)(v37 - v31) < 0x20) {
      goto LABEL_59;
    }
    uint64_t v40 = (v38 >> 3) + 1;
    uint64_t v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
    BOOL v39 = &v9[-v41];
    unint64_t v36 = &v31[-v41];
    unint64_t v42 = v31 - 16;
    unint64_t v43 = (long long *)(v6 + 8 * v8 - 16);
    uint64_t v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)unint64_t v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 4;
    }
    while (v44);
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_59:
      do
      {
        uint64_t v46 = *((void *)v39 - 1);
        v39 -= 8;
        *((void *)v36 - 1) = v46;
        v36 -= 8;
      }
      while (v39 != v34);
    }
  }
LABEL_35:
  unint64_t v47 = (char *)a1[1];
  int64_t v48 = v47 - v9;
  if (v47 != v9)
  {
    __n128 v49 = v9;
    size_t v50 = v47 - v9;
    unint64_t v51 = v32;
    memmove(v35, v49, v50);
    unint64_t v32 = v51;
  }
  unint64_t v52 = (void *)*a1;
  *a1 = (unint64_t)v36;
  a1[1] = (unint64_t)&v35[v48];
  a1[2] = (unint64_t)v32;
  if (v52) {
    operator delete(v52);
  }
  return v31;
}

void sub_950728(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_950740(void **a1, uint64_t *a2, uint64_t a3, char *a4)
{
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x666666666666666) {
    sub_2E00();
  }
  if (0x999999999999999ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v6) {
    unint64_t v6 = 0x999999999999999ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x333333333333333) {
    unint64_t v10 = 0x666666666666666;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x666666666666666) {
      sub_188D718();
    }
    int64_t v11 = operator new(40 * v10);
  }
  else
  {
    int64_t v11 = 0;
  }
  unint64_t v27 = (char *)&v11[5 * v5];
  uint64_t v28 = (char *)&v11[5 * v10];
  uint64_t v12 = *a2;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_4200(__p, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a3;
    uint64_t v30 = *(void *)(a3 + 16);
  }
  char v13 = *a4;
  v11[5 * v5] = v12;
  unint64_t v14 = &v11[5 * v5 + 1];
  if (SHIBYTE(v30) < 0)
  {
    sub_4200(v14, __p[0], (unint64_t)__p[1]);
    int v19 = SHIBYTE(v30);
    LOBYTE(v11[5 * v5 + 4]) = v13;
    if (v19 < 0)
    {
      operator delete(__p[0]);
      unint64_t v15 = (char *)&v11[5 * v5];
      unint64_t v16 = v27 + 40;
      unint64_t v18 = (char *)*a1;
      unint64_t v17 = (char *)a1[1];
      if (v17 != *a1) {
        goto LABEL_19;
      }
    }
    else
    {
      unint64_t v15 = (char *)&v11[5 * v5];
      unint64_t v16 = v27 + 40;
      unint64_t v18 = (char *)*a1;
      unint64_t v17 = (char *)a1[1];
      if (v17 != *a1) {
        goto LABEL_19;
      }
    }
LABEL_23:
    uint64_t v24 = v17;
    goto LABEL_24;
  }
  *(_OWORD *)unint64_t v14 = *(_OWORD *)__p;
  v11[5 * v5 + 3] = v30;
  LOBYTE(v11[5 * v5 + 4]) = v13;
  unint64_t v15 = (char *)&v11[5 * v5];
  unint64_t v16 = v27 + 40;
  unint64_t v18 = (char *)*a1;
  unint64_t v17 = (char *)a1[1];
  if (v17 == *a1) {
    goto LABEL_23;
  }
LABEL_19:
  uint64_t v20 = 0;
  do
  {
    uint64_t v21 = &v15[v20];
    unint64_t v22 = &v17[v20];
    *((void *)v21 - 5) = *(void *)&v17[v20 - 40];
    long long v23 = *(_OWORD *)&v17[v20 - 32];
    *((void *)v21 - 2) = *(void *)&v17[v20 - 16];
    *((_OWORD *)v21 - 2) = v23;
    *((void *)v22 - 3) = 0;
    *((void *)v22 - 2) = 0;
    *((void *)v22 - 4) = 0;
    *(v21 - 8) = v17[v20 - 8];
    v20 -= 40;
  }
  while (&v17[v20] != v18);
  uint64_t v24 = (char *)*a1;
  unint64_t v17 = (char *)a1[1];
  v15 += v20;
LABEL_24:
  *a1 = v15;
  a1[1] = v16;
  a1[2] = v28;
  if (v17 == v24)
  {
    if (v17) {
LABEL_26:
    }
      operator delete(v17);
  }
  else
  {
    do
    {
      unint64_t v26 = v17 - 40;
      if (*(v17 - 9) < 0) {
        operator delete(*((void **)v17 - 4));
      }
      unint64_t v17 = v26;
    }
    while (v26 != v24);
    unint64_t v17 = v24;
    if (v24) {
      goto LABEL_26;
    }
  }
  return v16;
}

void sub_9509AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
  {
    operator delete(__p);
    sub_B79D0((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  sub_B79D0((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_9509E4()
{
  unk_25D6447 = 16641;
  word_25D6430 = 65;
  byte_25D645F = 1;
  byte_25D6449 = 0;
}

void sub_950A0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, uint64_t a7)
{
  strcpy((char *)v23, "TransitAdvisoryBuilder");
  HIBYTE(v23[2]) = 22;
  std::string __p = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  unint64_t v14 = sub_374CDC(a7, (uint64_t)v23, (uint64_t *)&__p);
  sub_950C3C(a1, v14);
  unint64_t v15 = (void **)__p;
  if (__p)
  {
    unint64_t v16 = v21;
    unint64_t v17 = __p;
    if (v21 != __p)
    {
      do
      {
        if (*((char *)v16 - 1) < 0) {
          operator delete(*(v16 - 3));
        }
        v16 -= 3;
      }
      while (v16 != v15);
      unint64_t v17 = __p;
    }
    uint64_t v21 = v15;
    operator delete(v17);
  }
  if (SHIBYTE(v23[2]) < 0) {
    operator delete(v23[0]);
  }
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = a3;
  sub_500818(a1 + 32, a7, a4);
  *(void *)(a1 + 1584) = a4;
  long long v18 = *a6;
  long long v19 = a6[2];
  *(_OWORD *)(a1 + 1608) = a6[1];
  *(_OWORD *)(a1 + 1624) = v19;
  *(_OWORD *)(a1 + 1592) = v18;
  *(void *)(a1 + 1640) = a5;
  sub_497CC0((void *)(a1 + 1648), a2);
  *(void *)(a1 + 1656) = a7;
  sub_65140();
}

void sub_950B74(_Unwind_Exception *a1)
{
  sub_651C4(v2);
  sub_651C4((id **)(v1 + 1568));
  sub_4BCED0(v3);
  _Unwind_Resume(a1);
}

void sub_950BA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_950BC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_98FD2C(a6, (uint64_t)v12);
  sub_950A0C(a1, a2, a3, a4, a5, v12, a6);
}

uint64_t sub_950C3C(uint64_t a1, void *a2)
{
  std::string __p = operator new(0x38uLL);
  long long v8 = xmmword_20B99F0;
  strcpy((char *)__p, "max_num_legs_for_system_names_in_cash_fare_advisory");
  unint64_t v4 = sub_5C9BC(a2, (uint64_t)&__p);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p);
  }
  *(void *)a1 = v4;
  std::string __p = operator new(0x20uLL);
  long long v8 = xmmword_20B91A0;
  strcpy((char *)__p, "enable_static_data_advisory");
  BOOL v5 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 8) = v5;
  return a1;
}

void sub_950D30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_950D50(uint64_t result, uint64_t *a2)
{
  if (*a2 != a2[1]) {
    sub_9526CC(result, (uint64_t)(a2 + 3), *a2);
  }
  return result;
}

void sub_9523C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_4D4B58(v71);
  sub_4DC10C(v73);
  sub_4D4B58(v72);
  sub_4F4D64((uint64_t)&__p);
  sub_4F2FF8((uint64_t)&a71);
  sub_4F2B74(&a23);
  sub_945B38(&a27);
  sub_945B38(&a46);
  _Unwind_Resume(a1);
}

void sub_9526AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
}

void sub_9526CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v3 = *(_OWORD *)(a1 + 1608);
  long long v9 = *(_OWORD *)(a1 + 1592);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 1584);
  uint64_t v6 = *(void *)(a1 + 1640);
  uint64_t v7 = *(void *)(a1 + 1656);
  v8[0] = a2;
  v8[1] = v4;
  v8[2] = v5;
  v8[3] = v6;
  v8[4] = v7;
  long long v10 = v3;
  long long v11 = *(_OWORD *)(a1 + 1624);
  sub_9C87CC(a3, (uint64_t)v8);
}

void sub_952F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  *(void *)(v50 + 8) = v48;
  sub_4F2FF8((uint64_t)&a48);
  sub_4F2B74(&a14);
  sub_4F2FF8((uint64_t)&STACK[0x328]);
  sub_945B38(&a17);
  sub_4F2B74(v49);
  uint64_t v52 = a36;
  a36 = 0;
  if (!v52) {
    _Unwind_Resume(a1);
  }
  (*(void (**)(uint64_t))(*(void *)v52 + 8))(v52);
  _Unwind_Resume(a1);
}

uint64_t sub_9530E0@<X0>(uint64_t a1@<X0>, void *a2@<X1>, const char *a3@<X2>, uint64_t a4@<X3>, uint64_t **a5@<X4>, uint64_t *a6@<X8>)
{
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  if (*(_DWORD *)a4 == 2)
  {
    unsigned int v12 = *(unsigned __int8 *)(a4 + 5672);
    if (v12 >= 2)
    {
      sub_953760(a1, v12, a4 + 88, 0, a2, (uint64_t)v50);
      unint64_t v13 = a6[1];
      if (v13 >= a6[2])
      {
        uint64_t v14 = sub_958FCC(a6, (uint64_t)v50);
      }
      else
      {
        sub_598F14(a6[1], (uint64_t)v50);
        uint64_t v14 = v13 + 496;
        a6[1] = v13 + 496;
      }
      a6[1] = v14;
      sub_4F2FF8((uint64_t)v50);
    }
  }
  sub_9550DC(a1, (uint64_t)a2, (void ***)(a4 + 3448), 1, (uint64_t)v50);
  if (!sub_45FB38(v50))
  {
    unint64_t v15 = a6[1];
    if (v15 >= a6[2])
    {
      uint64_t v16 = sub_958FCC(a6, (uint64_t)v50);
    }
    else
    {
      sub_598F14(a6[1], (uint64_t)v50);
      uint64_t v16 = v15 + 496;
      a6[1] = v15 + 496;
    }
    a6[1] = v16;
  }
  int v45 = 0x7FFFFFFF;
  memset(&__p, 0, sizeof(__p));
  if (*(_DWORD *)a4 == 2)
  {
    if (!*(unsigned char *)(a4 + 792))
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_2439078;
    }
    if (*(_DWORD *)(a4 + 152) != 0x7FFFFFFF)
    {
      int v45 = *(_DWORD *)(a4 + 152);
      unint64_t v17 = *(void *)(a4 + 48);
      if (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(a2[1] - *a2) >> 3) <= v17) {
        sub_66748();
      }
      std::string::operator=(&__p, (const std::string *)(*a2 + 168 * v17 + 136));
      if (!*(unsigned char *)(a4 + 792))
      {
        unint64_t v43 = __cxa_allocate_exception(8uLL);
        *unint64_t v43 = &off_2439078;
      }
      uint64_t v18 = a2[9];
      unint64_t v19 = *(void *)(a4 + 752);
      if (0x66FD0EB66FD0EB67 * ((a2[10] - v18) >> 3) <= v19) {
        sub_66748();
      }
      __int16 v47 = *(_WORD *)(v18 + 696 * v19 + 556);
    }
  }
  sub_956818(a1, (uint64_t)&v45, a3, (uint64_t)v49);
  if (!sub_45FB38(v49))
  {
    unint64_t v20 = a6[1];
    if (v20 >= a6[2])
    {
      uint64_t v21 = sub_958FCC(a6, (uint64_t)v49);
    }
    else
    {
      sub_598F14(a6[1], (uint64_t)v49);
      uint64_t v21 = v20 + 496;
      a6[1] = v20 + 496;
    }
    a6[1] = v21;
  }
  if (*(_DWORD *)a4 == 2)
  {
    sub_9D582C((uint64_t *)(a1 + 1648), a4, **a5, a3, *(int **)(a1 + 1640), *(void *)(a1 + 1584) + 1177, a2, (uint64_t)v44);
    sub_956CCC(v44, (uint64_t)v48);
    sub_4D4B58((uint64_t)v44);
    if (!sub_45FB38(v48))
    {
      unint64_t v22 = a6[1];
      if (v22 >= a6[2])
      {
        uint64_t v23 = sub_958FCC(a6, (uint64_t)v48);
      }
      else
      {
        sub_598F14(a6[1], (uint64_t)v48);
        uint64_t v23 = v22 + 496;
        a6[1] = v22 + 496;
      }
      a6[1] = v23;
    }
    sub_4F2FF8((uint64_t)v48);
  }
  uint64_t v24 = (char *)*a6;
  long long v25 = (char *)a6[1];
  if (*(_DWORD *)(*(void *)(a1 + 1584) + 1436) < 2u || 0xEF7BDEF7BDEF7BDFLL * ((v25 - v24) >> 4) < 2)
  {
    for (; v24 != v25; v24 += 496)
    {
      uint64_t v29 = sub_4D4928(v24, 0);
      uint64_t v30 = (std::string *)v29;
      uint64_t v31 = *(unsigned __int8 *)(v29 + 23);
      if ((v31 & 0x80u) == 0) {
        unint64_t v32 = (char *)v29;
      }
      else {
        unint64_t v32 = *(char **)v29;
      }
      if (byte_25D9E57 >= 0) {
        unint64_t v33 = &xmmword_25D9E40;
      }
      else {
        unint64_t v33 = (long long *)xmmword_25D9E40;
      }
      if (byte_25D9E57 >= 0) {
        int64_t v34 = byte_25D9E57;
      }
      else {
        int64_t v34 = *((void *)&xmmword_25D9E40 + 1);
      }
      if (v34)
      {
        if ((v31 & 0x80u) != 0) {
          uint64_t v31 = *(void *)(v29 + 8);
        }
        if (v31 >= v34)
        {
          unint64_t v35 = &v32[v31];
          int v36 = *(char *)v33;
          unint64_t v37 = v32;
          do
          {
            uint64_t v38 = v31 - v34;
            if (v38 == -1) {
              break;
            }
            BOOL v39 = (char *)memchr(v37, v36, v38 + 1);
            if (!v39) {
              break;
            }
            uint64_t v40 = v39;
            if (!memcmp(v39, v33, v34))
            {
              if (v40 != v35)
              {
                std::string::size_type v26 = v40 - v32;
                if (v40 - v32 != -1) {
                  goto LABEL_37;
                }
              }
              break;
            }
            unint64_t v37 = v40 + 1;
            uint64_t v31 = v35 - (v40 + 1);
          }
          while (v31 >= v34);
        }
      }
      else
      {
        std::string::size_type v26 = 0;
LABEL_37:
        if (byte_25DA487 >= 0) {
          unint64_t v27 = (const std::string::value_type *)&qword_25DA470;
        }
        else {
          unint64_t v27 = (const std::string::value_type *)qword_25DA470;
        }
        if (byte_25DA487 >= 0) {
          std::string::size_type v28 = byte_25DA487;
        }
        else {
          std::string::size_type v28 = qword_25DA478;
        }
        std::string::replace(v30, v26, v34, v27, v28);
      }
    }
  }
  else
  {
    sub_955E7C(a1, a6, (uint64_t)v48);
    sub_959510(a6, (uint64_t)v48, (uint64_t)v49, 1uLL);
    sub_4F2FF8((uint64_t)v48);
  }
  sub_4F2FF8((uint64_t)v49);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return sub_4F2FF8((uint64_t)v50);
}

void sub_95361C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,char a40)
{
  *(void *)(v41 + 8) = v40;
  sub_4F2FF8((uint64_t)&a40);
  sub_4F2FF8((uint64_t)&STACK[0x2D0]);
  if (a38 < 0) {
    operator delete(__p);
  }
  sub_4F2FF8((uint64_t)&STACK[0x4C0]);
  sub_4F2B74((void **)v41);
  _Unwind_Resume(a1);
}

void sub_953760(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, void *a5@<X4>, uint64_t a6@<X8>)
{
  sub_5F3B34(a6);
  *(void *)(a6 + 168) = 0;
  *(unsigned char *)(a6 + 160) = 0;
  *(void *)(a6 + 176) = 0;
  *(void *)(a6 + 184) = 0;
  sub_5F3B34(a6 + 192);
  *(_DWORD *)(a6 + 384) = -1;
  *(_DWORD *)(a6 + 392) = -1;
  *(_DWORD *)(a6 + 395) = -1;
  *(void *)(a6 + 399) = 0;
  *(void *)(a6 + 415) = 0;
  *(void *)(a6 + 407) = 0;
  *(_WORD *)(a6 + 423) = 0;
  *(void *)(a6 + 440) = 0;
  *(void *)(a6 + 448) = 0;
  *(void *)(a6 + 432) = 0;
  *(unsigned char *)(a6 + 456) = 0;
  *(_OWORD *)(a6 + 464) = 0u;
  *(_OWORD *)(a6 + 480) = 0u;
  *(void *)(a6 + 472) = sub_6E6EC((char **)(a6 + 464), (uint64_t)&xmmword_25DA158);
  *(_DWORD *)(a6 + 488) = 3;
  sub_524D84(40, (uint64_t)&__dst);
  sub_4F377C(a6 + 352, (uint64_t)&__dst);
  *(void *)(a6 + 392) = v91;
  unsigned int v12 = (void **)(a6 + 400);
  if (*(char *)(a6 + 423) < 0) {
    operator delete(*v12);
  }
  char v13 = 0;
  uint64_t v14 = (void **)(a6 + 432);
  *(_OWORD *)unsigned int v12 = __p;
  *(void *)(a6 + 416) = v93;
  HIBYTE(v93) = 0;
  LOBYTE(__p) = 0;
  *(unsigned char *)(a6 + 424) = v94;
  if (*(char *)(a6 + 455) < 0)
  {
    operator delete(*v14);
    char v13 = HIBYTE(v93);
  }
  *(_OWORD *)uint64_t v14 = v95;
  *(void *)(a6 + 448) = v96;
  HIBYTE(v96) = 0;
  LOBYTE(v95) = 0;
  *(unsigned char *)(a6 + 456) = v97;
  if (v13 < 0)
  {
    operator delete((void *)__p);
    int v15 = DWORD2(v90);
    if (DWORD2(v90) != 1) {
      goto LABEL_7;
    }
LABEL_11:
    std::string::size_type size = (void *)__dst.__r_.__value_.__l.__size_;
    if (!__dst.__r_.__value_.__l.__size_) {
      goto LABEL_14;
    }
    __dst.__r_.__value_.__r.__words[2] = __dst.__r_.__value_.__l.__size_;
    goto LABEL_13;
  }
  int v15 = DWORD2(v90);
  if (DWORD2(v90) == 1) {
    goto LABEL_11;
  }
LABEL_7:
  if (!v15 && SBYTE7(v90) < 0)
  {
    std::string::size_type size = (void *)__dst.__r_.__value_.__l.__size_;
LABEL_13:
    operator delete(size);
  }
LABEL_14:
  memset(&v88, 0, sizeof(v88));
  unint64_t v17 = (const std::string *)&qword_25DAA10;
  switch(a2)
  {
    case 0:
    case 1:
      goto LABEL_143;
    case 2:
      unint64_t v17 = (const std::string *)&qword_25DA9C8;
      goto LABEL_19;
    case 3:
      unint64_t v17 = (const std::string *)&qword_25DA9F8;
      goto LABEL_19;
    case 4:
      unint64_t v17 = (const std::string *)&qword_25DA9E0;
      goto LABEL_19;
    case 5:
      goto LABEL_19;
    case 6:
      unint64_t v17 = (const std::string *)&qword_25DA9B0;
LABEL_19:
      std::string::operator=(&v88, v17);
      break;
    default:
      break;
  }
  uint64_t v84 = a1;
  uint64_t v18 = a5[9];
  unint64_t v19 = *(void *)(a3 + 664);
  if (0x66FD0EB66FD0EB67 * ((a5[10] - v18) >> 3) <= v19) {
    sub_66748();
  }
  unint64_t v20 = *(void *)(v18 + 696 * v19 + 64);
  uint64_t v21 = a5[12];
  if (0x4EC4EC4EC4EC4EC5 * ((a5[13] - v21) >> 4) <= v20) {
    sub_66748();
  }
  sub_98C68C(*(unsigned __int16 *)(v18 + 696 * v19 + 556), (uint64_t)&__dst);
  int64_t v22 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
  if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v23 = &v88;
  }
  else {
    uint64_t v23 = (std::string *)v88.__r_.__value_.__r.__words[0];
  }
  if (byte_25DA2EF >= 0) {
    uint64_t v24 = &qword_25DA2D8;
  }
  else {
    uint64_t v24 = (uint64_t *)qword_25DA2D8;
  }
  if (byte_25DA2EF >= 0) {
    int64_t v25 = byte_25DA2EF;
  }
  else {
    int64_t v25 = unk_25DA2E0;
  }
  if (v25)
  {
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int64_t v22 = v88.__r_.__value_.__l.__size_;
    }
    if (v22 >= v25)
    {
      std::string::size_type v26 = (char *)v23 + v22;
      int v27 = *(char *)v24;
      std::string::size_type v28 = v23;
      do
      {
        int64_t v29 = v22 - v25;
        if (v29 == -1) {
          break;
        }
        uint64_t v30 = (char *)memchr(v28, v27, v29 + 1);
        if (!v30) {
          break;
        }
        uint64_t v31 = v30;
        if (!memcmp(v30, v24, v25))
        {
          if (v31 != v26)
          {
            std::string::size_type v32 = v31 - (char *)v23;
            if (v31 - (char *)v23 != -1) {
              goto LABEL_42;
            }
          }
          break;
        }
        std::string::size_type v28 = (std::string *)(v31 + 1);
        int64_t v22 = v26 - (v31 + 1);
      }
      while (v22 >= v25);
    }
  }
  else
  {
    std::string::size_type v32 = 0;
LABEL_42:
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_dst = &__dst;
    }
    else {
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v34 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v34 = __dst.__r_.__value_.__l.__size_;
    }
    std::string::replace(&v88, v32, v25, (const std::string::value_type *)p_dst, v34);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (a4) {
      goto LABEL_59;
    }
LABEL_53:
    if (*(unsigned char *)(v21 + 208 * v20 + 200)) {
      goto LABEL_59;
    }
    uint64_t v35 = v21 + 208 * v20;
    int v36 = (long long *)(v35 + 24);
    int v37 = *(char *)(v35 + 47);
    if (v37 < 0)
    {
      if (!*((void *)v36 + 1)) {
        goto LABEL_59;
      }
    }
    else if (!(_BYTE)v37)
    {
      goto LABEL_59;
    }
    if (byte_25DA3F8[23] < 0) {
      sub_4200(&__dst, *(void **)byte_25DA3F8, *(unint64_t *)&byte_25DA3F8[8]);
    }
    else {
      std::string __dst = *(std::string *)byte_25DA3F8;
    }
    if (*((char *)v36 + 23) < 0)
    {
      sub_4200(&v90, *(void **)v36, *((void *)v36 + 1));
    }
    else
    {
      long long v76 = *v36;
      uint64_t v91 = *((void *)v36 + 2);
      long long v90 = v76;
    }
    sub_2AAA4((uint64_t)&v85, (uint64_t)&__dst, 1);
    if (SHIBYTE(v91) < 0)
    {
      operator delete((void *)v90);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_136;
      }
    }
    else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_136;
    }
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_136:
    sub_6581AC((uint64_t)&v88, (uint64_t)&v85, *(void *)(v84 + 16), 0, &__dst);
    unint64_t v77 = *(void *)(a6 + 8);
    if (v77 >= *(void *)(a6 + 16))
    {
      __n128 v79 = sub_6E8C4((void **)a6, (uint64_t)&__dst);
      int v80 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
      *(void *)(a6 + 8) = v79;
      if (v80 < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v78 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
      *(void *)(v77 + 16) = *((void *)&__dst.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v77 = v78;
      *(void *)(a6 + 8) = v77 + 24;
    }
    BOOL v81 = (void **)v85.__r_.__value_.__r.__words[2];
    if (!v85.__r_.__value_.__r.__words[2])
    {
LABEL_141:
      BOOL v82 = (void *)v85.__r_.__value_.__r.__words[0];
      v85.__r_.__value_.__r.__words[0] = 0;
      if (v82) {
        operator delete(v82);
      }
      goto LABEL_143;
    }
    while (1)
    {
      uint64_t v83 = (void **)*v81;
      if (*((char *)v81 + 63) < 0)
      {
        operator delete(v81[5]);
        if (*((char *)v81 + 39) < 0) {
LABEL_151:
        }
          operator delete(v81[2]);
      }
      else if (*((char *)v81 + 39) < 0)
      {
        goto LABEL_151;
      }
      operator delete(v81);
      BOOL v81 = v83;
      if (!v83) {
        goto LABEL_141;
      }
    }
  }
  if ((a4 & 1) == 0) {
    goto LABEL_53;
  }
LABEL_59:
  std::operator+<char>();
  uint64_t v38 = std::string::append(&v85, " ");
  std::string __dst = *v38;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  char v87 = 0;
  __s[0] = 0;
  int64_t v39 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
  if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v40 = &v88;
  }
  else {
    uint64_t v40 = (std::string *)v88.__r_.__value_.__r.__words[0];
  }
  int v41 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  unint64_t v42 = (void *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v43 = &__dst;
  }
  else {
    unint64_t v43 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64_t v44 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  else {
    int64_t v44 = __dst.__r_.__value_.__l.__size_;
  }
  if (v44)
  {
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int64_t v39 = v88.__r_.__value_.__l.__size_;
    }
    if (v39 >= v44)
    {
      int v45 = (char *)v40 + v39;
      int v46 = v43->__r_.__value_.__s.__data_[0];
      __int16 v47 = v40;
      do
      {
        int64_t v48 = v39 - v44;
        if (v48 == -1) {
          break;
        }
        __n128 v49 = (char *)memchr(v47, v46, v48 + 1);
        if (!v49) {
          break;
        }
        uint64_t v50 = v49;
        if (!memcmp(v49, v43, v44))
        {
          if (v50 != v45)
          {
            std::string::size_type v51 = v50 - (char *)v40;
            if (v50 - (char *)v40 != -1) {
              goto LABEL_79;
            }
          }
          break;
        }
        __int16 v47 = (std::string *)(v50 + 1);
        int64_t v39 = v45 - (v50 + 1);
      }
      while (v39 >= v44);
    }
  }
  else
  {
    std::string::size_type v51 = 0;
LABEL_79:
    std::string::replace(&v88, v51, v44, __s, 0);
    if (v87 < 0) {
      operator delete(*(void **)__s);
    }
  }
  if (v41 < 0)
  {
    operator delete(v42);
    if ((SHIBYTE(v85.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_83;
    }
  }
  else if ((SHIBYTE(v85.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_83;
  }
  operator delete(v85.__r_.__value_.__l.__data_);
LABEL_83:
  int v52 = byte_25DA3F8[23];
  if (byte_25DA3F8[23] >= 0) {
    size_t v53 = byte_25DA3F8[23];
  }
  else {
    size_t v53 = *(void *)&byte_25DA3F8[8];
  }
  unint64_t v54 = v53 + 1;
  if (v53 + 1 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v54 >= 0x17)
  {
    uint64_t v56 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v54 | 7) != 0x17) {
      uint64_t v56 = v54 | 7;
    }
    uint64_t v57 = v56 + 1;
    uint64_t v55 = (std::string *)operator new(v56 + 1);
    __dst.__r_.__value_.__l.__size_ = v53 + 1;
    __dst.__r_.__value_.__r.__words[2] = v57 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
    goto LABEL_93;
  }
  memset(&__dst, 0, sizeof(__dst));
  uint64_t v55 = &__dst;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v53 + 1;
  if (v53)
  {
LABEL_93:
    if (v52 >= 0) {
      unint64_t v58 = byte_25DA3F8;
    }
    else {
      unint64_t v58 = *(char **)byte_25DA3F8;
    }
    memmove(v55, v58, v53);
  }
  *(_WORD *)((char *)&v55->__r_.__value_.__l.__data_ + v53) = 32;
  *((unsigned char *)&v85.__r_.__value_.__s + 23) = 0;
  v85.__r_.__value_.__s.__data_[0] = 0;
  int64_t v59 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
  if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    BOOL v60 = &v88;
  }
  else {
    BOOL v60 = (std::string *)v88.__r_.__value_.__r.__words[0];
  }
  int v61 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  __n128 v62 = (void *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v63 = &__dst;
  }
  else {
    unint64_t v63 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64_t v64 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  else {
    int64_t v64 = __dst.__r_.__value_.__l.__size_;
  }
  if (v64)
  {
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int64_t v59 = v88.__r_.__value_.__l.__size_;
    }
    if (v59 >= v64)
    {
      BOOL v65 = (char *)v60 + v59;
      int v66 = v63->__r_.__value_.__s.__data_[0];
      uint64_t v67 = v60;
      do
      {
        int64_t v68 = v59 - v64;
        if (v68 == -1) {
          break;
        }
        uint64_t v69 = (char *)memchr(v67, v66, v68 + 1);
        if (!v69) {
          break;
        }
        __n128 v70 = v69;
        if (!memcmp(v69, v63, v64))
        {
          if (v70 != v65)
          {
            std::string::size_type v71 = v70 - (char *)v60;
            if (v70 - (char *)v60 != -1) {
              goto LABEL_119;
            }
          }
          break;
        }
        uint64_t v67 = (std::string *)(v70 + 1);
        int64_t v59 = v65 - (v70 + 1);
      }
      while (v59 >= v64);
    }
  }
  else
  {
    std::string::size_type v71 = 0;
LABEL_119:
    std::string::replace(&v88, v71, v64, (const std::string::value_type *)&v85, 0);
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v85.__r_.__value_.__l.__data_);
    }
  }
  if (v61 < 0) {
    operator delete(v62);
  }
  uint64_t v72 = sub_8D7730(*(void *)(v84 + 16), (uint64_t)&v88);
  unint64_t v73 = *(void *)(a6 + 8);
  if (v73 >= *(void *)(a6 + 16))
  {
    BOOL v75 = sub_6E6EC((char **)a6, (uint64_t)v72);
  }
  else
  {
    if (*((char *)v72 + 23) < 0)
    {
      sub_4200(*(unsigned char **)(a6 + 8), (void *)*v72, v72[1]);
    }
    else
    {
      long long v74 = *(_OWORD *)v72;
      *(void *)(v73 + 16) = v72[2];
      *(_OWORD *)unint64_t v73 = v74;
    }
    BOOL v75 = (char *)(v73 + 24);
    *(void *)(a6 + 8) = v73 + 24;
  }
  *(void *)(a6 + 8) = v75;
LABEL_143:
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v88.__r_.__value_.__l.__data_);
  }
}

void sub_95403C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  sub_4F2FF8(v35);
  _Unwind_Resume(a1);
}

uint64_t sub_9541C0(std::string *this, char *a2, uint64_t a3)
{
  int64_t size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0) {
    uint64_t v6 = this;
  }
  else {
    uint64_t v6 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  int v7 = a2[23];
  if (v7 >= 0) {
    long long v8 = a2;
  }
  else {
    long long v8 = *(char **)a2;
  }
  if (v7 >= 0) {
    int64_t v9 = a2[23];
  }
  else {
    int64_t v9 = *((void *)a2 + 1);
  }
  if (!v9)
  {
    std::string::size_type v11 = 0;
LABEL_17:
    int v12 = *(char *)(a3 + 23);
    if (v12 >= 0) {
      char v13 = (const std::string::value_type *)a3;
    }
    else {
      char v13 = *(const std::string::value_type **)a3;
    }
    if (v12 >= 0) {
      std::string::size_type v14 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      std::string::size_type v14 = *(void *)(a3 + 8);
    }
    std::string::replace(this, v11, v9, v13, v14);
    return 1;
  }
  if ((size & 0x80u) != 0) {
    int64_t size = this->__r_.__value_.__l.__size_;
  }
  if (size < v9) {
    return 0;
  }
  int v15 = (char *)v6 + size;
  int v16 = *v8;
  unint64_t v17 = v6;
  while (1)
  {
    int64_t v18 = size - v9;
    if (v18 == -1) {
      return 0;
    }
    uint64_t result = (uint64_t)memchr(v17, v16, v18 + 1);
    if (!result) {
      return result;
    }
    uint64_t v19 = result;
    uint64_t result = memcmp((const void *)result, v8, v9);
    if (!result) {
      break;
    }
    unint64_t v17 = (std::string *)(v19 + 1);
    int64_t size = (int64_t)&v15[-v19 - 1];
    if (size < v9) {
      return 0;
    }
  }
  if ((char *)v19 != v15)
  {
    std::string::size_type v11 = v19 - (void)v6;
    if (v19 - (void)v6 != -1) {
      goto LABEL_17;
    }
  }
  return result;
}

double sub_954308@<D0>(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  if (!*(unsigned char *)(a1 + 8)
    || (char *)a2[1] - (char *)*a2 == 32
    && (v5 = **a2, uint64_t v6 = (*a2)[1], v6 - v5 == 104)
    && (v5 == v6 || (v8 = *(void *)(v5 + 8), uint64_t v7 = *(void *)(v5 + 16), v8 == v7) || *(_DWORD *)(v7 - 5704) != 4))
  {
    sub_5F3B34(a3);
    *(void *)(a3 + 168) = 0;
    *(unsigned char *)(a3 + 160) = 0;
    *(void *)(a3 + 176) = 0;
    *(void *)(a3 + 184) = 0;
    sub_5F3B34(a3 + 192);
    double result = 0.0;
    *(_OWORD *)(a3 + 384) = 0u;
    *(_OWORD *)(a3 + 400) = 0u;
    *(_OWORD *)(a3 + 416) = 0u;
    *(_OWORD *)(a3 + 432) = 0u;
    *(_OWORD *)(a3 + 448) = 0u;
    *(_OWORD *)(a3 + 464) = 0u;
    *(_OWORD *)(a3 + 352) = 0u;
    *(_OWORD *)(a3 + 368) = 0u;
    *(_DWORD *)(a3 + 384) = -1;
    *(_DWORD *)(a3 + 392) = -1;
    *(_DWORD *)(a3 + 395) = -1;
    *(void *)(a3 + 399) = 0;
    *(void *)(a3 + 407) = 0;
    *(void *)(a3 + 415) = 0;
    *(_WORD *)(a3 + 423) = 0;
    *(void *)(a3 + 432) = 0;
    *(void *)(a3 + 440) = 0;
    *(void *)(a3 + 448) = 0;
    *(unsigned char *)(a3 + 456) = 0;
    *(_OWORD *)(a3 + 480) = 0u;
    return result;
  }
  sub_994B0C(&v33, a2);
  sub_994AD8(&v33, &v32);
  if (!sub_994D74(&v33, &v32))
  {
LABEL_13:
    sub_5F3B34(a3);
    *(void *)(a3 + 168) = 0;
    *(unsigned char *)(a3 + 160) = 0;
    *(void *)(a3 + 176) = 0;
    *(void *)(a3 + 184) = 0;
    sub_5F3B34(a3 + 192);
    *(_DWORD *)(a3 + 384) = -1;
    *(_DWORD *)(a3 + 392) = -1;
    *(_DWORD *)(a3 + 395) = -1;
    *(void *)(a3 + 399) = 0;
    *(void *)(a3 + 415) = 0;
    *(void *)(a3 + 407) = 0;
    *(_WORD *)(a3 + 423) = 0;
    *(void *)(a3 + 440) = 0;
    *(void *)(a3 + 448) = 0;
    *(void *)(a3 + 432) = 0;
    *(unsigned char *)(a3 + 456) = 0;
    *(_OWORD *)(a3 + 464) = 0u;
    *(_OWORD *)(a3 + 480) = 0u;
    *(void *)(a3 + 472) = sub_6E6EC((char **)(a3 + 464), (uint64_t)&xmmword_25DA158);
    *(_DWORD *)(a3 + 488) = 1;
    sub_524D84(39, (uint64_t)&v33);
    sub_4F377C(a3 + 352, (uint64_t)&v33);
    *(void *)(a3 + 392) = v38;
    long long v10 = (void **)(a3 + 400);
    if (*(char *)(a3 + 423) < 0) {
      operator delete(*v10);
    }
    std::string::size_type v11 = (_OWORD *)(a3 + 432);
    *(_OWORD *)long long v10 = *(_OWORD *)__p;
    *(void *)(a3 + 416) = v40;
    HIBYTE(v40) = 0;
    LOBYTE(__p[0]) = 0;
    *(unsigned char *)(a3 + 424) = v41;
    if (*(char *)(a3 + 455) < 0)
    {
      operator delete(*(void **)(a3 + 432));
      int v14 = SHIBYTE(v40);
      *std::string::size_type v11 = v42;
      *(void *)(a3 + 448) = v43;
      HIBYTE(v43) = 0;
      LOBYTE(v42) = 0;
      *(unsigned char *)(a3 + 456) = v44;
      if (v14 < 0)
      {
        operator delete(__p[0]);
        int v12 = v37;
        if (v37 == 1) {
          goto LABEL_25;
        }
      }
      else
      {
        int v12 = v37;
        if (v37 == 1) {
          goto LABEL_25;
        }
      }
    }
    else
    {
      *std::string::size_type v11 = v42;
      *(void *)(a3 + 448) = v43;
      HIBYTE(v43) = 0;
      LOBYTE(v42) = 0;
      *(unsigned char *)(a3 + 456) = v44;
      int v12 = v37;
      if (v37 == 1)
      {
LABEL_25:
        int v15 = v34;
        if (v34)
        {
          uint64_t v35 = v34;
          goto LABEL_27;
        }
        goto LABEL_28;
      }
    }
    if (!v12 && v36 < 0)
    {
      int v15 = v34;
LABEL_27:
      operator delete(v15);
    }
LABEL_28:
    int v16 = sub_8D7730(*(void *)(a1 + 16), (uint64_t)byte_25DAA28);
    if (*((char *)v16 + 23) < 0)
    {
      sub_4200(&v32, (void *)*v16, v16[1]);
    }
    else
    {
      long long v17 = *(_OWORD *)v16;
      v32.__r_.__value_.__r.__words[2] = v16[2];
      *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v17;
    }
    int64_t size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v19 = &v32;
    }
    else {
      uint64_t v19 = (std::string *)v32.__r_.__value_.__r.__words[0];
    }
    if (byte_25D9E57 >= 0) {
      unint64_t v20 = &xmmword_25D9E40;
    }
    else {
      unint64_t v20 = (long long *)xmmword_25D9E40;
    }
    if (byte_25D9E57 >= 0) {
      int64_t v21 = byte_25D9E57;
    }
    else {
      int64_t v21 = *((void *)&xmmword_25D9E40 + 1);
    }
    if (v21)
    {
      if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int64_t size = v32.__r_.__value_.__l.__size_;
      }
      if (size >= v21)
      {
        int64_t v22 = (char *)v19 + size;
        int v23 = *(char *)v20;
        uint64_t v24 = v19;
        do
        {
          int64_t v25 = size - v21;
          if (v25 == -1) {
            break;
          }
          std::string::size_type v26 = (char *)memchr(v24, v23, v25 + 1);
          if (!v26) {
            break;
          }
          int v27 = v26;
          if (!memcmp(v26, v20, v21))
          {
            if (v27 != v22)
            {
              std::string::size_type v28 = v27 - (char *)v19;
              if (v27 - (char *)v19 != -1) {
                goto LABEL_51;
              }
            }
            break;
          }
          uint64_t v24 = (std::string *)(v27 + 1);
          int64_t size = v22 - (v27 + 1);
        }
        while (size >= v21);
      }
    }
    else
    {
      std::string::size_type v28 = 0;
LABEL_51:
      if (byte_25DA487 >= 0) {
        int64_t v29 = (const std::string::value_type *)&qword_25DA470;
      }
      else {
        int64_t v29 = (const std::string::value_type *)qword_25DA470;
      }
      if (byte_25DA487 >= 0) {
        std::string::size_type v30 = byte_25DA487;
      }
      else {
        std::string::size_type v30 = qword_25DA478;
      }
      std::string::replace(&v32, v28, v21, v29, v30);
    }
    sub_5F3D48((uint64_t)&v33, (uint64_t)&v32);
    sub_4D90B4(a3, (uint64_t)&v33);
    sub_4D4B58((uint64_t)&v33);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v32.__r_.__value_.__l.__data_);
    }
    return result;
  }
  while (1)
  {
    if (*(_DWORD *)sub_994DB0((unint64_t *)&v33) == 2)
    {
      uint64_t v9 = sub_994DB0((unint64_t *)&v33);
      if (!*(unsigned char *)(v9 + 792))
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_2439078;
      }
      if (*(_DWORD *)(v9 + 120) != 0x7FFFFFFF && *(unsigned char *)(v9 + 124) == 1) {
        break;
      }
    }
    sub_994B7C((uint64_t)&v33);
    sub_994AD8(&v33, &v32);
    if (!sub_994D74(&v33, &v32)) {
      goto LABEL_13;
    }
  }
  sub_5F3B34(a3);
  *(void *)(a3 + 168) = 0;
  *(unsigned char *)(a3 + 160) = 0;
  *(void *)(a3 + 176) = 0;
  *(void *)(a3 + 184) = 0;
  sub_5F3B34(a3 + 192);
  double result = 0.0;
  *(_OWORD *)(a3 + 384) = 0u;
  *(_OWORD *)(a3 + 400) = 0u;
  *(_OWORD *)(a3 + 416) = 0u;
  *(_OWORD *)(a3 + 432) = 0u;
  *(_OWORD *)(a3 + 448) = 0u;
  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 352) = 0u;
  *(_OWORD *)(a3 + 368) = 0u;
  *(_DWORD *)(a3 + 384) = -1;
  *(_DWORD *)(a3 + 392) = -1;
  *(_DWORD *)(a3 + 395) = -1;
  *(void *)(a3 + 399) = 0;
  *(void *)(a3 + 407) = 0;
  *(void *)(a3 + 415) = 0;
  *(_WORD *)(a3 + 423) = 0;
  *(void *)(a3 + 432) = 0;
  *(void *)(a3 + 440) = 0;
  *(void *)(a3 + 448) = 0;
  *(unsigned char *)(a3 + 456) = 0;
  *(_OWORD *)(a3 + 480) = 0u;
  return result;
}

void sub_954860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  sub_4DC10C(v15);
  sub_4D4B58(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_954914@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_9C9534((void **)a2, (uint64_t)v31);
  sub_956818(a1, (uint64_t)v31, (const char *)(a2 + 96), (uint64_t)v33);
  if (v32 < 0) {
    operator delete(v31[1]);
  }
  if (!sub_45FB38(v33))
  {
    unint64_t v6 = a3[1];
    if (v6 >= a3[2])
    {
      uint64_t v7 = sub_958FCC(a3, (uint64_t)v33);
    }
    else
    {
      sub_598F14(a3[1], (uint64_t)v33);
      uint64_t v7 = v6 + 496;
      a3[1] = v6 + 496;
    }
    a3[1] = v7;
  }
  sub_9D5364((uint64_t *)(a1 + 1648), a2, *(int **)(a1 + 1640), *(void *)(a1 + 1584) + 1177, (uint64_t)v30);
  sub_956CCC(v30, (uint64_t)v31);
  sub_4D4B58((uint64_t)v30);
  if (!sub_45FB38(v31))
  {
    unint64_t v8 = a3[1];
    if (v8 >= a3[2])
    {
      uint64_t v9 = sub_95A724(a3, (uint64_t)v31);
    }
    else
    {
      sub_598F14(a3[1], (uint64_t)v31);
      uint64_t v9 = v8 + 496;
      a3[1] = v8 + 496;
    }
    a3[1] = v9;
  }
  uint64_t v10 = *(void *)(a1 + 1584);
  std::string::size_type v11 = (char *)*a3;
  int v12 = (char *)a3[1];
  if (*(unsigned char *)(v10 + 1407) && 0xEF7BDEF7BDEF7BDFLL * ((v12 - v11) >> 4) >= 2 && *(_DWORD *)(v10 + 1436) <= 1u)
  {
    sub_9571CC(a1, (uint64_t)a3, (uint64_t)v30);
    sub_598F14((uint64_t)v29, (uint64_t)v30);
    sub_959510(a3, (uint64_t)v29, (uint64_t)v30, 1uLL);
    sub_4F2FF8((uint64_t)v29);
    sub_4F2FF8((uint64_t)v30);
  }
  else
  {
    for (; v11 != v12; v11 += 496)
    {
      uint64_t v16 = sub_4D4928(v11, 0);
      long long v17 = (std::string *)v16;
      uint64_t v18 = *(unsigned __int8 *)(v16 + 23);
      if ((v18 & 0x80u) == 0) {
        uint64_t v19 = (char *)v16;
      }
      else {
        uint64_t v19 = *(char **)v16;
      }
      if (byte_25D9E57 >= 0) {
        unint64_t v20 = &xmmword_25D9E40;
      }
      else {
        unint64_t v20 = (long long *)xmmword_25D9E40;
      }
      if (byte_25D9E57 >= 0) {
        int64_t v21 = byte_25D9E57;
      }
      else {
        int64_t v21 = *((void *)&xmmword_25D9E40 + 1);
      }
      if (v21)
      {
        if ((v18 & 0x80u) != 0) {
          uint64_t v18 = *(void *)(v16 + 8);
        }
        if (v18 >= v21)
        {
          int64_t v22 = &v19[v18];
          int v23 = *(char *)v20;
          uint64_t v24 = v19;
          do
          {
            uint64_t v25 = v18 - v21;
            if (v25 == -1) {
              break;
            }
            std::string::size_type v26 = (char *)memchr(v24, v23, v25 + 1);
            if (!v26) {
              break;
            }
            int v27 = v26;
            if (!memcmp(v26, v20, v21))
            {
              if (v27 != v22)
              {
                std::string::size_type v13 = v27 - v19;
                if (v27 - v19 != -1) {
                  goto LABEL_20;
                }
              }
              break;
            }
            uint64_t v24 = v27 + 1;
            uint64_t v18 = v22 - (v27 + 1);
          }
          while (v18 >= v21);
        }
      }
      else
      {
        std::string::size_type v13 = 0;
LABEL_20:
        if (byte_25DA487 >= 0) {
          uint64_t v14 = (const std::string::value_type *)&qword_25DA470;
        }
        else {
          uint64_t v14 = (const std::string::value_type *)qword_25DA470;
        }
        if (byte_25DA487 >= 0) {
          std::string::size_type v15 = byte_25DA487;
        }
        else {
          std::string::size_type v15 = qword_25DA478;
        }
        std::string::replace(v17, v13, v21, v14, v15);
      }
    }
  }
  sub_4F2FF8((uint64_t)v31);
  return sub_4F2FF8((uint64_t)v33);
}

void sub_954C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_4F2FF8((uint64_t)va);
  sub_4F2FF8((uint64_t)&STACK[0x200]);
  sub_4F2FF8((uint64_t)&STACK[0x3F0]);
  sub_4F2FF8((uint64_t)&STACK[0x5E0]);
  sub_4F2B74(v3);
  _Unwind_Resume(a1);
}

void sub_954CFC(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  long long __p = 0;
  uint64_t v18 = 0;
  unint64_t v19 = 0;
  sub_9550DC(a1, (uint64_t)a2, (void ***)(a3 + 2320), 0, (uint64_t)v20);
  uint64_t v18 = (char *)sub_4F4C08((uint64_t *)&__p, (uint64_t)v20);
  sub_4F2FF8((uint64_t)v20);
  sub_955680(a1, a3, a2, (uint64_t)v20);
  if ((unint64_t)v18 >= v19) {
    unint64_t v8 = (char *)sub_4F4C08((uint64_t *)&__p, (uint64_t)v20);
  }
  else {
    unint64_t v8 = (char *)(sub_4F4498((uint64_t)v18, (uint64_t)v20) + 496);
  }
  uint64_t v18 = v8;
  sub_4F2FF8((uint64_t)v20);
  sub_57C5F4(a1 + 1672, a3, (uint64_t)v20);
  if ((unint64_t)v18 >= v19) {
    uint64_t v9 = (char *)sub_4F4C08((uint64_t *)&__p, (uint64_t)v20);
  }
  else {
    uint64_t v9 = (char *)(sub_4F4498((uint64_t)v18, (uint64_t)v20) + 496);
  }
  uint64_t v18 = v9;
  sub_4F2FF8((uint64_t)v20);
  uint64_t v10 = (char *)__p;
  std::string::size_type v11 = v18;
  if (__p != v18)
  {
    while (!sub_45FB38(v10))
    {
      v10 += 496;
      if (v10 == v11)
      {
        uint64_t v10 = v11;
        goto LABEL_17;
      }
    }
    if (v10 != v11)
    {
      for (uint64_t i = v10 + 496; i != v11; i += 496)
      {
        if (!sub_45FB38(i))
        {
          sub_4D5C2C((uint64_t)v10, (uint64_t)i);
          v10 += 496;
        }
      }
    }
  }
LABEL_17:
  std::string::size_type v13 = v18;
  if (v10 != v18)
  {
    while (v13 != v10)
    {
      v13 -= 496;
      sub_4F2FF8((uint64_t)v13);
    }
    uint64_t v18 = v10;
  }
  if (__p == v10)
  {
    sub_5F3B34(a4);
    *(void *)(a4 + 168) = 0;
    *(unsigned char *)(a4 + 160) = 0;
    *(void *)(a4 + 176) = 0;
    *(void *)(a4 + 184) = 0;
    sub_5F3B34(a4 + 192);
    *(_OWORD *)(a4 + 384) = 0u;
    *(_OWORD *)(a4 + 400) = 0u;
    *(_OWORD *)(a4 + 416) = 0u;
    *(_OWORD *)(a4 + 432) = 0u;
    *(_OWORD *)(a4 + 448) = 0u;
    *(_OWORD *)(a4 + 464) = 0u;
    *(_OWORD *)(a4 + 352) = 0u;
    *(_OWORD *)(a4 + 368) = 0u;
    *(_DWORD *)(a4 + 384) = -1;
    *(_DWORD *)(a4 + 392) = -1;
    *(_DWORD *)(a4 + 395) = -1;
    *(void *)(a4 + 399) = 0;
    *(void *)(a4 + 407) = 0;
    *(void *)(a4 + 415) = 0;
    *(_WORD *)(a4 + 423) = 0;
    *(void *)(a4 + 432) = 0;
    *(void *)(a4 + 440) = 0;
    *(void *)(a4 + 448) = 0;
    *(unsigned char *)(a4 + 456) = 0;
    *(_OWORD *)(a4 + 480) = 0u;
    uint64_t v14 = (char *)__p;
    if (!__p) {
      return;
    }
  }
  else
  {
    if (0xEF7BDEF7BDEF7BDFLL * ((v10 - (unsigned char *)__p) >> 4) < 2) {
      sub_598F14(a4, (uint64_t)__p);
    }
    else {
      sub_955E7C(a1, &__p, a4);
    }
    uint64_t v14 = (char *)__p;
    if (!__p) {
      return;
    }
  }
  std::string::size_type v15 = v18;
  uint64_t v16 = v14;
  if (v18 != v14)
  {
    do
      std::string::size_type v15 = (char *)sub_4F2FF8((uint64_t)(v15 - 496));
    while (v15 != v14);
    uint64_t v16 = __p;
  }
  uint64_t v18 = v14;
  operator delete(v16);
}

void sub_95501C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_4DC10C(v10);
  sub_4D4B58(v9);
  sub_4F2B74(&a9);
  _Unwind_Resume(a1);
}

void sub_955040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, char a12)
{
}

void sub_955064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_955078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_95508C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_9550A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_9550B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_9550C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_9550DC(uint64_t a1@<X0>, uint64_t a2@<X1>, void ***a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  sub_5F3B34(a5);
  *(void *)(a5 + 168) = 0;
  uint64_t v10 = (void ***)(a5 + 168);
  *(unsigned char *)(a5 + 160) = 0;
  *(void *)(a5 + 176) = 0;
  *(void *)(a5 + 184) = 0;
  sub_5F3B34(a5 + 192);
  *(_DWORD *)(a5 + 384) = -1;
  *(_DWORD *)(a5 + 392) = -1;
  *(_DWORD *)(a5 + 395) = -1;
  *(void *)(a5 + 399) = 0;
  *(void *)(a5 + 415) = 0;
  *(void *)(a5 + 407) = 0;
  *(_WORD *)(a5 + 423) = 0;
  *(void *)(a5 + 440) = 0;
  *(void *)(a5 + 448) = 0;
  *(void *)(a5 + 432) = 0;
  *(unsigned char *)(a5 + 456) = 0;
  *(_OWORD *)(a5 + 464) = 0u;
  *(_OWORD *)(a5 + 480) = 0u;
  *(void *)(a5 + 472) = sub_6E6EC((char **)(a5 + 464), (uint64_t)&xmmword_25DA158);
  *(_DWORD *)(a5 + 488) = 2;
  sub_524D84(4, (uint64_t)&v32);
  sub_4F377C(a5 + 352, (uint64_t)&v32);
  *(void *)(a5 + 392) = v35;
  std::string::size_type v11 = (void **)(a5 + 400);
  if (*(char *)(a5 + 423) < 0) {
    operator delete(*v11);
  }
  char v12 = 0;
  std::string::size_type v13 = (void **)(a5 + 432);
  *(_OWORD *)std::string::size_type v11 = *(_OWORD *)__p;
  *(void *)(a5 + 416) = v37;
  HIBYTE(v37) = 0;
  LOBYTE(__p[0]) = 0;
  *(unsigned char *)(a5 + 424) = v38;
  if (*(char *)(a5 + 455) < 0)
  {
    operator delete(*v13);
    char v12 = HIBYTE(v37);
  }
  *(_OWORD *)std::string::size_type v13 = v39;
  *(void *)(a5 + 448) = v40;
  HIBYTE(v40) = 0;
  LOBYTE(v39) = 0;
  *(unsigned char *)(a5 + 456) = v41;
  if (v12 < 0)
  {
    operator delete(__p[0]);
    int v14 = (int)v34;
    if (v34 != 1) {
      goto LABEL_7;
    }
LABEL_11:
    int64_t size = (void *)v32.__r_.__value_.__l.__size_;
    if (!v32.__r_.__value_.__l.__size_) {
      goto LABEL_14;
    }
    v32.__r_.__value_.__r.__words[2] = v32.__r_.__value_.__l.__size_;
    goto LABEL_13;
  }
  int v14 = (int)v34;
  if (v34 == 1) {
    goto LABEL_11;
  }
LABEL_7:
  if (!v14 && v33 < 0)
  {
    int64_t size = (void *)v32.__r_.__value_.__l.__size_;
LABEL_13:
    operator delete(size);
  }
LABEL_14:
  *(unsigned char *)(a5 + 160) = 1;
  memset(&v32, 0, sizeof(v32));
  sub_9597B8(&v32, a3[1] - *a3);
  sub_95992C(*a3, a3[1], (uint64_t *)&v32, (_DWORD *)v32.__r_.__value_.__l.__size_);
  if (*v10)
  {
    sub_4F3104(a5 + 168, *v10);
    operator delete(*v10);
    *uint64_t v10 = 0;
    *(void *)(a5 + 176) = 0;
    *(void *)(a5 + 184) = 0;
  }
  std::string::size_type v16 = v32.__r_.__value_.__r.__words[0];
  *(void *)(a5 + 168) = v32.__r_.__value_.__r.__words[0];
  std::string::size_type v17 = v32.__r_.__value_.__l.__size_;
  *(_OWORD *)(a5 + 176) = *(_OWORD *)&v32.__r_.__value_.__r.__words[1];
  std::string::size_type v18 = v17;
  if (v16 != v17)
  {
    std::string::size_type v19 = v16 + 776;
    do
    {
      while (1)
      {
        unint64_t v21 = *(void *)(v19 + 8);
        if (v21 < *(void *)(v19 + 16)) {
          break;
        }
        *(void *)(v19 + 8) = sub_6E6EC((char **)v19, (uint64_t)&xmmword_25DA158);
        std::string::size_type v20 = v19 + 24;
        v19 += 800;
        if (v20 == v18) {
          goto LABEL_24;
        }
      }
      if (byte_25DA16F < 0)
      {
        sub_4200(*(unsigned char **)(v19 + 8), (void *)xmmword_25DA158, *((unint64_t *)&xmmword_25DA158 + 1));
      }
      else
      {
        long long v22 = xmmword_25DA158;
        *(void *)(v21 + 16) = unk_25DA168;
        *(_OWORD *)unint64_t v21 = v22;
      }
      *(void *)(v19 + 8) = v21 + 24;
      *(void *)(v19 + 8) = v21 + 24;
      std::string::size_type v23 = v19 + 24;
      v19 += 800;
    }
    while (v23 != v18);
  }
LABEL_24:
  memset(&v31, 0, sizeof(v31));
  uint64_t v24 = *a3;
  uint64_t v25 = (char *)a3[1] - (char *)*a3;
  if (v25 == 8)
  {
    uint64_t v26 = *(void *)(a2 + 192);
    int v27 = *v24;
    if (0x823EE08FB823EE09 * ((*(void *)(a2 + 200) - v26) >> 3) <= (unint64_t)*v24) {
      sub_66748();
    }
    if (a4)
    {
      if (a4 != 1)
      {
LABEL_35:
        std::string::size_type v28 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
        int v29 = SHIBYTE(v31.__r_.__value_.__r.__words[2]);
        if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v28 = v31.__r_.__value_.__l.__size_;
        }
        if (!v28)
        {
          nullsub_1(&v30);
          sub_997840(v26 + 456 * (void)v27 + 144, *(void *)(a1 + 1584) + 968, (uint64_t)&v32);
          if (v29 < 0) {
            operator delete(v31.__r_.__value_.__l.__data_);
          }
          std::string v31 = v32;
          *((unsigned char *)&v32.__r_.__value_.__s + 23) = 0;
          v32.__r_.__value_.__s.__data_[0] = 0;
          if (SHIBYTE(__p[0]) < 0)
          {
            operator delete(v34);
            if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v32.__r_.__value_.__l.__data_);
            }
          }
        }
        goto LABEL_43;
      }
      nullsub_1(&v30);
      sub_997840(v26 + 456 * (void)v27 + 336, *(void *)(a1 + 1584) + 968, (uint64_t)&v32);
    }
    else
    {
      nullsub_1(&v30);
      sub_997840(v26 + 456 * (void)v27 + 208, *(void *)(a1 + 1584) + 968, (uint64_t)&v32);
    }
    std::string v31 = v32;
    *((unsigned char *)&v32.__r_.__value_.__s + 23) = 0;
    v32.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(__p[0]) < 0)
    {
      operator delete(v34);
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v32.__r_.__value_.__l.__data_);
      }
    }
    goto LABEL_35;
  }
  if ((unint64_t)v25 >= 9)
  {
    sub_956F94(a1, v25 >> 3, &v32);
    std::string v31 = v32;
  }
LABEL_43:
  sub_5F3D48((uint64_t)&v32, (uint64_t)&v31);
  sub_4D90B4(a5, (uint64_t)&v32);
  sub_4D4B58((uint64_t)&v32);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
}

void sub_955564(_Unwind_Exception *a1)
{
  sub_4F2FF8(v1);
  _Unwind_Resume(a1);
}

void sub_955578(_Unwind_Exception *a1)
{
  sub_4F2FF8(v1);
  _Unwind_Resume(a1);
}

void sub_95558C(_Unwind_Exception *a1)
{
  sub_4F2FF8(v1);
  _Unwind_Resume(a1);
}

void sub_9555A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (v19 < 0)
  {
    operator delete(__p);
    sub_4F2FF8(v18);
    _Unwind_Resume(a1);
  }
  sub_4F2FF8(v18);
  _Unwind_Resume(a1);
}

void sub_955680(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  int v5 = *(_DWORD *)(a2 + 1136);
  if (v5 == 0x7FFFFFFF) {
    goto LABEL_9;
  }
  uint64_t v6 = *(unsigned __int8 *)(a2 + 1167);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a2 + 1152);
  }
  BOOL v7 = !v6 || v5 == 0;
  if (v7 || *(unsigned char *)(*(void *)(a1 + 1584) + 1186))
  {
LABEL_9:
    sub_5F3B34(a4);
    *(void *)(a4 + 168) = 0;
    *(unsigned char *)(a4 + 160) = 0;
    *(void *)(a4 + 176) = 0;
    *(void *)(a4 + 184) = 0;
    sub_5F3B34(a4 + 192);
    *(_OWORD *)(a4 + 384) = 0u;
    *(_OWORD *)(a4 + 400) = 0u;
    *(_OWORD *)(a4 + 416) = 0u;
    *(_OWORD *)(a4 + 432) = 0u;
    *(_OWORD *)(a4 + 448) = 0u;
    *(_OWORD *)(a4 + 464) = 0u;
    *(_OWORD *)(a4 + 352) = 0u;
    *(_OWORD *)(a4 + 368) = 0u;
    *(_DWORD *)(a4 + 384) = -1;
    *(_DWORD *)(a4 + 392) = -1;
    *(_DWORD *)(a4 + 395) = -1;
    *(void *)(a4 + 399) = 0;
    *(void *)(a4 + 407) = 0;
    *(void *)(a4 + 415) = 0;
    *(_WORD *)(a4 + 423) = 0;
    *(void *)(a4 + 432) = 0;
    *(void *)(a4 + 440) = 0;
    *(void *)(a4 + 448) = 0;
    *(unsigned char *)(a4 + 456) = 0;
    *(_OWORD *)(a4 + 480) = 0u;
    return;
  }
  int v52 = 0;
  size_t v53 = 0;
  uint64_t v54 = 0;
  sub_994B0C(&__p, (void *)a2);
  uint64_t v10 = 0;
  while (1)
  {
    sub_994AD8((void **)&__p, &v51);
    if (!sub_994D74(&__p, &v51)) {
      break;
    }
    if (*(_DWORD *)sub_994DB0((unint64_t *)&__p) == 2)
    {
      ++v10;
      if (*(unsigned char *)(sub_994DB0((unint64_t *)&__p) + 2104))
      {
        uint64_t v11 = sub_994DB0((unint64_t *)&__p);
        if (!*(unsigned char *)(v11 + 2104))
        {
          exception = __cxa_allocate_exception(8uLL);
          void *exception = &off_2439078;
        }
        char v12 = *(unint64_t **)(v11 + 2072);
        std::string::size_type v13 = *(unint64_t **)(v11 + 2080);
        if (v12 != v13)
        {
          while (1)
          {
            unint64_t v14 = *v12;
            uint64_t v15 = sub_3757C8(*(void **)(a1 + 1656));
            if ((sub_97CAE0(v14, v15) & 1) == 0) {
              break;
            }
            if (++v12 == v13)
            {
              uint64_t v16 = sub_994DB0((unint64_t *)&__p);
              if (!*(unsigned char *)(v16 + 792))
              {
                uint64_t v43 = __cxa_allocate_exception(8uLL);
                *uint64_t v43 = &off_2439078;
              }
              unint64_t v17 = *(void *)(v16 + 752);
              uint64_t v18 = a3[9];
              if (0x66FD0EB66FD0EB67 * ((a3[10] - v18) >> 3) <= v17) {
                sub_66748();
              }
              v51.__r_.__value_.__r.__words[0] = *(void *)(v18 + 696 * v17 + 64);
              sub_A4710((uint64_t)&v52, &v51);
              break;
            }
          }
        }
      }
    }
    sub_994B7C((uint64_t)&__p);
  }
  std::string::size_type v20 = v52;
  char v19 = v53;
  if (v52 == (void *)v53)
  {
    sub_5F3B34(a4);
    *(void *)(a4 + 168) = 0;
    *(unsigned char *)(a4 + 160) = 0;
    *(void *)(a4 + 176) = 0;
    *(void *)(a4 + 184) = 0;
    sub_5F3B34(a4 + 192);
    *(_OWORD *)(a4 + 384) = 0u;
    *(_OWORD *)(a4 + 400) = 0u;
    *(_OWORD *)(a4 + 416) = 0u;
    *(_OWORD *)(a4 + 432) = 0u;
    *(_OWORD *)(a4 + 448) = 0u;
    *(_OWORD *)(a4 + 464) = 0u;
    *(_OWORD *)(a4 + 352) = 0u;
    *(_OWORD *)(a4 + 368) = 0u;
    *(_DWORD *)(a4 + 384) = -1;
    *(_DWORD *)(a4 + 392) = -1;
    *(_DWORD *)(a4 + 395) = -1;
    *(void *)(a4 + 399) = 0;
    *(void *)(a4 + 407) = 0;
    *(void *)(a4 + 415) = 0;
    *(_WORD *)(a4 + 423) = 0;
    *(void *)(a4 + 432) = 0;
    *(void *)(a4 + 440) = 0;
    *(void *)(a4 + 448) = 0;
    *(unsigned char *)(a4 + 456) = 0;
    *(_OWORD *)(a4 + 480) = 0u;
  }
  else
  {
    memset(&v51, 0, sizeof(v51));
    unint64_t v21 = (v53 - (unsigned char *)v52) >> 3;
    if (v21 <= *(void *)a1 && v21 != v10)
    {
      uint64_t v25 = 0;
      long long __p = 0;
      long long v46 = 0uLL;
      char v44 = v53;
      while (1)
      {
        uint64_t v27 = a3[12];
        if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((a3[13] - v27) >> 4)) <= *v20) {
          sub_66748();
        }
        uint64_t v28 = v27 + 208 * *v20;
        uint64_t v29 = v28 + 24;
        int v30 = *(char *)(v28 + 47);
        char v31 = v30;
        if (v30 < 0)
        {
          if (*(void *)(v29 + 8))
          {
LABEL_43:
            std::string v32 = v25;
            if (__p != v25)
            {
              if ((v30 & 0x80u) == 0) {
                uint64_t v33 = v30;
              }
              else {
                uint64_t v33 = *(void *)(v29 + 8);
              }
              if ((v30 & 0x80u) == 0) {
                std::string::size_type v34 = (unsigned __int8 *)v29;
              }
              else {
                std::string::size_type v34 = *(unsigned __int8 **)v29;
              }
              std::string v32 = (char *)__p;
              do
              {
                uint64_t v35 = v32[23];
                if ((v35 & 0x80u) == 0) {
                  uint64_t v36 = v32[23];
                }
                else {
                  uint64_t v36 = *((void *)v32 + 1);
                }
                if (v36 == v33)
                {
                  if ((v35 & 0x80) != 0)
                  {
                    if (!memcmp(*(const void **)v32, v34, *((void *)v32 + 1))) {
                      goto LABEL_62;
                    }
                  }
                  else
                  {
                    if (!v32[23]) {
                      goto LABEL_62;
                    }
                    uint64_t v37 = 0;
                    while (v32[v37] == v34[v37])
                    {
                      if (v35 == ++v37) {
                        goto LABEL_62;
                      }
                    }
                  }
                }
                v32 += 24;
              }
              while (v32 != v25);
              std::string v32 = v25;
LABEL_62:
              char v19 = v44;
            }
            if (v32 == v25)
            {
              if ((unint64_t)v25 < *((void *)&v46 + 1))
              {
                if (v31 < 0)
                {
                  sub_4200(v25, *(void **)v29, *(void *)(v29 + 8));
                }
                else
                {
                  long long v26 = *(_OWORD *)v29;
                  *((void *)v25 + 2) = *(void *)(v29 + 16);
                  *(_OWORD *)uint64_t v25 = v26;
                }
                v25 += 24;
              }
              else
              {
                uint64_t v25 = sub_6E6EC((char **)&__p, v29);
              }
              *(void *)&long long v46 = v25;
            }
          }
        }
        else if ((_BYTE)v30)
        {
          goto LABEL_43;
        }
        if (++v20 == v19)
        {
          if (__p == v25)
          {
            uint64_t v40 = (const std::string *)sub_956764(*(void *)(a1 + 16));
            std::string::operator=(&v51, v40);
          }
          else
          {
            uint64_t v38 = *(void *)(a1 + 16);
            sub_5E5C(v49, "Cash fares not accepted on {SystemList}");
            long long v39 = (const std::string *)sub_8D7730(v38, (uint64_t)v49);
            std::string::operator=(&v51, v39);
            if (v50 < 0) {
              operator delete(v49[0]);
            }
            sub_65214((id **)(a1 + 1664), (uint64_t **)&__p, v49);
            sub_5E5C(v47, "{SystemList}");
            sub_9541C0(&v51, (char *)v47, (uint64_t)v49);
            if (v48 < 0) {
              operator delete(v47[0]);
            }
            if (v50 < 0) {
              operator delete(v49[0]);
            }
          }
          sub_1A668(&__p);
          goto LABEL_77;
        }
      }
    }
    uint64_t v23 = *(void *)(a1 + 16);
    long long __p = operator new(0x19uLL);
    long long v46 = xmmword_20B9250;
    strcpy((char *)__p, "Cash fares not accepted");
    uint64_t v24 = (const std::string *)sub_8D7730(v23, (uint64_t)&__p);
    if (SHIBYTE(v46) < 0) {
      operator delete(__p);
    }
    std::string::operator=(&v51, v24);
LABEL_77:
    sub_5F3B34(a4);
    *(void *)(a4 + 168) = 0;
    *(unsigned char *)(a4 + 160) = 0;
    *(void *)(a4 + 176) = 0;
    *(void *)(a4 + 184) = 0;
    sub_5F3B34(a4 + 192);
    *(_DWORD *)(a4 + 384) = -1;
    *(_DWORD *)(a4 + 392) = -1;
    *(_DWORD *)(a4 + 395) = -1;
    *(void *)(a4 + 399) = 0;
    *(void *)(a4 + 415) = 0;
    *(void *)(a4 + 407) = 0;
    *(_WORD *)(a4 + 423) = 0;
    *(void *)(a4 + 440) = 0;
    *(void *)(a4 + 448) = 0;
    *(void *)(a4 + 432) = 0;
    *(unsigned char *)(a4 + 456) = 0;
    char v41 = (__int16 *)(*(void *)(a1 + 1584) + 1177);
    *(_OWORD *)(a4 + 464) = 0u;
    *(_OWORD *)(a4 + 480) = 0u;
    sub_5F3D7C((uint64_t)&__p, (uint64_t)&v51, v41);
    sub_4D90B4(a4, (uint64_t)&__p);
    sub_4D4B58((uint64_t)&__p);
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v51.__r_.__value_.__l.__data_);
    }
  }
  if (v52)
  {
    size_t v53 = v52;
    operator delete(v52);
  }
}

void sub_955CFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v40 - 137) < 0) {
    operator delete(*(void **)(v40 - 160));
  }
  sub_1A668(&a12);
  if (*(char *)(v40 - 113) < 0)
  {
    operator delete(*(void **)(v40 - 136));
    long long v42 = *(void **)(v40 - 112);
    if (!v42) {
      goto LABEL_9;
    }
  }
  else
  {
    long long v42 = *(void **)(v40 - 112);
    if (!v42) {
LABEL_9:
    }
      _Unwind_Resume(a1);
  }
  *(void *)(v40 - 104) = v42;
  operator delete(v42);
  _Unwind_Resume(a1);
}

void sub_955E7C(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v58 = 0;
  int64_t v59 = 0;
  uint64_t v60 = 0;
  sub_4DC580((uint64_t)v71);
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  unint64_t v57 = 0;
  uint64_t v6 = (const std::string *)sub_8D7730(*(void *)(a1 + 16), (uint64_t)&xmmword_25D9E58);
  memset(&__p, 0, sizeof(__p));
  sub_5F7A30((uint64_t)v72, v6, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    if (*a2 == v8) {
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    if (*a2 == v8) {
      goto LABEL_28;
    }
  }
  uint64_t v9 = 0;
  do
  {
    int v10 = *(_DWORD *)(v7 + 488);
    if (v10 == 5)
    {
      sub_95A8B8((uint64_t *)&v55, (uint64_t)v56, *(void *)(v7 + 168), *(void *)(v7 + 176), 0x8F5C28F5C28F5C29 * ((uint64_t)(*(void *)(v7 + 176) - *(void *)(v7 + 168)) >> 5));
    }
    else if (v10 == 2)
    {
      if ((void **)(v7 + 168) != &v58) {
        sub_5A5748((uint64_t)&v58, *(void *)(v7 + 168), *(void *)(v7 + 176), 0x8F5C28F5C28F5C29 * ((uint64_t)(*(void *)(v7 + 176) - *(void *)(v7 + 168)) >> 5));
      }
    }
    else
    {
      sub_957484(a1, (uint64_t)v72, (void *)v7);
      ++v9;
    }
    v7 += 496;
  }
  while (v7 != v8);
  if (v9)
  {
    uint64_t v11 = 1392;
    if (v9 == 1) {
      uint64_t v11 = 1368;
    }
    char v12 = &xmmword_25DA998;
    if (v9 == 1) {
      char v12 = &xmmword_25DA980;
    }
    std::string::size_type v13 = (char *)&word_25DA9AE + 1;
    if (v9 == 1) {
      std::string::size_type v13 = &byte_25DA997;
    }
    if (*v13 < 0)
    {
      unint64_t v14 = *(void **)((char *)&xmmword_25DA428 + v11);
      uint64_t v15 = (unint64_t *)&xmmword_25DA980 + 1;
      if (v9 != 1) {
        uint64_t v15 = (unint64_t *)&xmmword_25DA998 + 1;
      }
      sub_4200(&v54, v14, *v15);
    }
    else
    {
      std::string v54 = *(std::string *)v12;
    }
    uint64_t v16 = sub_8D7730(*(void *)(a1 + 24), (uint64_t)&v54);
    sub_5F3D48((uint64_t)&__p, (uint64_t)v16);
    sub_4D90B4((uint64_t)v71, (uint64_t)&__p);
    sub_4D4B58((uint64_t)&__p);
    unint64_t v17 = v56;
    if ((unint64_t)v56 >= v57)
    {
      uint64_t v18 = (void **)sub_4F7B6C(&v55, (uint64_t)v71);
      uint64_t v56 = v18;
      unint64_t v19 = (unint64_t)*(v18 - 2);
      if (v19 >= (unint64_t)*(v18 - 1))
      {
LABEL_27:
        *(v18 - 2) = sub_6E6EC((char **)v18 - 3, (uint64_t)&xmmword_25DA158);
        if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_28;
        }
        goto LABEL_98;
      }
    }
    else
    {
      sub_4F6CF8((uint64_t)v56, (uint64_t)v71);
      uint64_t v18 = v17 + 100;
      uint64_t v56 = v18;
      unint64_t v19 = (unint64_t)*(v18 - 2);
      if (v19 >= (unint64_t)*(v18 - 1)) {
        goto LABEL_27;
      }
    }
    if (byte_25DA16F < 0)
    {
      sub_4200((unsigned char *)v19, (void *)xmmword_25DA158, *((unint64_t *)&xmmword_25DA158 + 1));
    }
    else
    {
      long long v30 = xmmword_25DA158;
      *(void *)(v19 + 16) = unk_25DA168;
      *(_OWORD *)unint64_t v19 = v30;
    }
    *(v18 - 2) = (void *)(v19 + 24);
    *(v18 - 2) = (void *)(v19 + 24);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
LABEL_98:
    }
      operator delete(v54.__r_.__value_.__l.__data_);
  }
LABEL_28:
  sub_5F3B34(a3);
  *(void *)(a3 + 168) = 0;
  *(unsigned char *)(a3 + 160) = 0;
  *(void *)(a3 + 176) = 0;
  *(void *)(a3 + 184) = 0;
  sub_5F3B34(a3 + 192);
  *(_DWORD *)(a3 + 384) = -1;
  *(_DWORD *)(a3 + 392) = -1;
  *(_DWORD *)(a3 + 395) = -1;
  *(void *)(a3 + 399) = 0;
  *(void *)(a3 + 415) = 0;
  *(void *)(a3 + 407) = 0;
  *(_WORD *)(a3 + 423) = 0;
  *(void *)(a3 + 440) = 0;
  *(void *)(a3 + 448) = 0;
  *(void *)(a3 + 432) = 0;
  *(unsigned char *)(a3 + 456) = 0;
  *(unsigned char *)(a3 + 160) = 1;
  uint64_t v20 = *a2;
  unint64_t v21 = (std::string *)(*a2 + 352);
  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 480) = 0u;
  sub_4F39B8(a3 + 352, v21);
  *(void *)(a3 + 392) = *(void *)(v20 + 392);
  long long v22 = (void **)(a3 + 400);
  std::string::operator=((std::string *)(a3 + 400), (const std::string *)(v20 + 400));
  uint64_t v23 = (_OWORD *)(a3 + 432);
  *(unsigned char *)(a3 + 424) = *(unsigned char *)(v20 + 424);
  std::string::operator=((std::string *)(a3 + 432), (const std::string *)(v20 + 432));
  *(unsigned char *)(a3 + 456) = *(unsigned char *)(v20 + 456);
  sub_956F94(a1, 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(a2[1] - *a2) >> 4), &v54);
  sub_5F3D48((uint64_t)&__p, (uint64_t)&v54);
  sub_4D90B4(a3, (uint64_t)&__p);
  sub_4D4B58((uint64_t)&__p);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  *(_DWORD *)(a3 + 488) = 1;
  uint64_t v24 = *(void *)(a3 + 176);
  if (*(_DWORD *)(*a2 + 488) == 3)
  {
    sub_95A8B8((uint64_t *)(a3 + 168), v24, (uint64_t)v55, (uint64_t)v56, 0x8F5C28F5C28F5C29 * (((char *)v56 - (unsigned char *)v55) >> 5));
    uint64_t v25 = v58;
    long long v26 = v59;
  }
  else
  {
    sub_95A8B8((uint64_t *)(a3 + 168), v24, (uint64_t)v58, (uint64_t)v59, 0x8F5C28F5C28F5C29 * (((char *)v59 - (unsigned char *)v58) >> 5));
    uint64_t v25 = v55;
    long long v26 = v56;
  }
  sub_95A8B8((uint64_t *)(a3 + 168), *(void *)(a3 + 176), (uint64_t)v25, (uint64_t)v26, 0x8F5C28F5C28F5C29 * (((char *)v26 - v25) >> 5));
  unint64_t v27 = 0x8F5C28F5C28F5C29 * ((uint64_t)(*(void *)(a3 + 176) - *(void *)(a3 + 168)) >> 5);
  if (v27 < 2)
  {
    sub_52FD00(a3, (uint64_t)v71);
    goto LABEL_52;
  }
  sub_956F94(a1, v27, &v54);
  sub_5F3D48((uint64_t)&__p, (uint64_t)&v54);
  sub_4D90B4(a3, (uint64_t)&__p);
  sub_4D4B58((uint64_t)&__p);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  sub_524D84(4, (uint64_t)&__p);
  sub_4F377C(a3 + 352, (uint64_t)&__p);
  *(void *)(a3 + 392) = v64;
  if (*(char *)(a3 + 423) < 0) {
    operator delete(*v22);
  }
  *(_OWORD *)long long v22 = *(_OWORD *)v65;
  *(void *)(a3 + 416) = v66;
  HIBYTE(v66) = 0;
  LOBYTE(v65[0]) = 0;
  *(unsigned char *)(a3 + 424) = v67;
  if (*(char *)(a3 + 455) < 0)
  {
    operator delete(*(void **)(a3 + 432));
    int v31 = SHIBYTE(v66);
    _OWORD *v23 = v68;
    *(void *)(a3 + 448) = v69;
    HIBYTE(v69) = 0;
    LOBYTE(v68) = 0;
    *(unsigned char *)(a3 + 456) = v70;
    if (v31 < 0)
    {
      operator delete(v65[0]);
      int v28 = v63;
      if (v63 == 1) {
        goto LABEL_40;
      }
    }
    else
    {
      int v28 = v63;
      if (v63 == 1) {
        goto LABEL_40;
      }
    }
  }
  else
  {
    _OWORD *v23 = v68;
    *(void *)(a3 + 448) = v69;
    HIBYTE(v69) = 0;
    LOBYTE(v68) = 0;
    *(unsigned char *)(a3 + 456) = v70;
    int v28 = v63;
    if (v63 == 1)
    {
LABEL_40:
      int64_t size = (void *)__p.__r_.__value_.__l.__size_;
      if (!__p.__r_.__value_.__l.__size_) {
        goto LABEL_52;
      }
      __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
      goto LABEL_51;
    }
  }
  if (!v28 && v62 < 0)
  {
    int64_t size = (void *)__p.__r_.__value_.__l.__size_;
LABEL_51:
    operator delete(size);
  }
LABEL_52:
  uint64_t v32 = *(void *)(a3 + 168);
  for (uint64_t i = *(void *)(a3 + 176); v32 != i; v32 += 800)
    sub_84F50((void **)(a3 + 464), *(void *)(a3 + 472), *(std::string **)(v32 + 776), *(std::string **)(v32 + 784), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v32 + 784) - *(void *)(v32 + 776)) >> 3));
  uint64_t v34 = *(void *)(a3 + 464);
  uint64_t v35 = *(const void ***)(a3 + 472);
  unint64_t v36 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v35 - v34) >> 3));
  if (v35 == (const void **)v34) {
    uint64_t v37 = 0;
  }
  else {
    uint64_t v37 = v36;
  }
  sub_6EA30(v34, v35, (uint64_t)&__p, v37, 1);
  sub_86E88((const void ***)(a3 + 464));
  uint64_t v38 = (void **)v55;
  if (v55)
  {
    long long v39 = v56;
    uint64_t v40 = v55;
    if (v56 != v55)
    {
      do
      {
        char v41 = v39;
        long long v42 = (void **)*(v39 - 3);
        if (v42)
        {
          uint64_t v43 = (void **)*(v41 - 2);
          char v44 = v42;
          if (v43 != v42)
          {
            do
            {
              if (*((char *)v43 - 1) < 0) {
                operator delete(*(v43 - 3));
              }
              v43 -= 3;
            }
            while (v43 != v42);
            char v44 = (void **)*(v41 - 3);
          }
          *(v41 - 2) = v42;
          operator delete(v44);
        }
        long long v39 = v41 - 100;
        int v45 = *((_DWORD *)v41 - 8);
        if (v45 == 1)
        {
          sub_4F4A98((uint64_t)(v41 - 100));
        }
        else if (!v45 && *((char *)v41 - 777) < 0)
        {
          operator delete(*v39);
        }
      }
      while (v39 != v38);
      uint64_t v40 = v55;
    }
    uint64_t v56 = v38;
    operator delete(v40);
  }
  sub_4F4A98((uint64_t)v71);
  long long v46 = (void **)v58;
  if (v58)
  {
    __int16 v47 = v59;
    char v48 = v58;
    if (v59 != v58)
    {
      do
      {
        __n128 v49 = v47;
        char v50 = (void **)*(v47 - 3);
        if (v50)
        {
          std::string v51 = (void **)*(v49 - 2);
          int v52 = v50;
          if (v51 != v50)
          {
            do
            {
              if (*((char *)v51 - 1) < 0) {
                operator delete(*(v51 - 3));
              }
              v51 -= 3;
            }
            while (v51 != v50);
            int v52 = (void **)*(v49 - 3);
          }
          *(v49 - 2) = v50;
          operator delete(v52);
        }
        __int16 v47 = v49 - 100;
        int v53 = *((_DWORD *)v49 - 8);
        if (v53 == 1)
        {
          sub_4F4A98((uint64_t)(v49 - 100));
        }
        else if (!v53 && *((char *)v49 - 777) < 0)
        {
          operator delete(*v47);
        }
      }
      while (v47 != v46);
      char v48 = v58;
    }
    int64_t v59 = v46;
    operator delete(v48);
  }
}

void sub_956664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void **a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  *(void *)(v44 - 16) = v45;
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_4DC10C(&a15);
  sub_4F4A98((uint64_t)&a44);
  sub_4DC10C(&a18);
  _Unwind_Resume(a1);
}

uint64_t *sub_956764(uint64_t a1)
{
  std::string __p = operator new(0x19uLL);
  long long v5 = xmmword_20B9250;
  strcpy((char *)__p, "Cash fares not accepted");
  double result = sub_8D7730(a1, (uint64_t)&__p);
  long long v3 = result;
  if (SHIBYTE(v5) < 0)
  {
    operator delete(__p);
    return v3;
  }
  return result;
}

void sub_9567FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_956818(uint64_t a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, uint64_t a4@<X8>)
{
  if (*(_DWORD *)a2 == 0x7FFFFFFF) {
    goto LABEL_14;
  }
  uint64_t v6 = *(unsigned __int8 *)(a2 + 31);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a2 + 16);
  }
  if (!v6)
  {
LABEL_14:
    sub_5F3B34(a4);
    *(void *)(a4 + 168) = 0;
    *(unsigned char *)(a4 + 160) = 0;
    *(void *)(a4 + 176) = 0;
    *(void *)(a4 + 184) = 0;
    sub_5F3B34(a4 + 192);
    *(_OWORD *)(a4 + 384) = 0u;
    *(_OWORD *)(a4 + 400) = 0u;
    *(_OWORD *)(a4 + 416) = 0u;
    *(_OWORD *)(a4 + 432) = 0u;
    *(_OWORD *)(a4 + 448) = 0u;
    *(_OWORD *)(a4 + 464) = 0u;
    *(_OWORD *)(a4 + 352) = 0u;
    *(_OWORD *)(a4 + 368) = 0u;
    *(_DWORD *)(a4 + 384) = -1;
    *(_DWORD *)(a4 + 392) = -1;
    *(_DWORD *)(a4 + 395) = -1;
    *(void *)(a4 + 399) = 0;
    *(void *)(a4 + 407) = 0;
    *(void *)(a4 + 415) = 0;
    *(_WORD *)(a4 + 423) = 0;
    *(void *)(a4 + 432) = 0;
    *(void *)(a4 + 440) = 0;
    *(void *)(a4 + 448) = 0;
    *(unsigned char *)(a4 + 456) = 0;
    *(_OWORD *)(a4 + 480) = 0u;
    return;
  }
  sub_5F3B34(a4);
  *(void *)(a4 + 168) = 0;
  *(unsigned char *)(a4 + 160) = 0;
  *(void *)(a4 + 176) = 0;
  *(void *)(a4 + 184) = 0;
  sub_5F3B34(a4 + 192);
  *(_DWORD *)(a4 + 384) = -1;
  *(_DWORD *)(a4 + 392) = -1;
  *(_DWORD *)(a4 + 395) = -1;
  *(void *)(a4 + 399) = 0;
  *(void *)(a4 + 415) = 0;
  *(void *)(a4 + 407) = 0;
  *(_WORD *)(a4 + 423) = 0;
  *(void *)(a4 + 440) = 0;
  *(void *)(a4 + 448) = 0;
  *(void *)(a4 + 432) = 0;
  *(unsigned char *)(a4 + 456) = 0;
  *(_OWORD *)(a4 + 464) = 0u;
  *(_OWORD *)(a4 + 480) = 0u;
  *(void *)(a4 + 472) = sub_6E6EC((char **)(a4 + 464), (uint64_t)&xmmword_25DA158);
  *(_DWORD *)(a4 + 488) = 1;
  sub_524D84(39, (uint64_t)&v23);
  sub_4F377C(a4 + 352, (uint64_t)&v23);
  *(void *)(a4 + 392) = v26;
  uint64_t v9 = (void **)(a4 + 400);
  if (*(char *)(a4 + 423) < 0) {
    operator delete(*v9);
  }
  char v10 = 0;
  uint64_t v11 = (void **)(a4 + 432);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)__p;
  *(void *)(a4 + 416) = v28;
  HIBYTE(v28) = 0;
  LOBYTE(__p[0]) = 0;
  *(unsigned char *)(a4 + 424) = v29;
  if (*(char *)(a4 + 455) < 0)
  {
    operator delete(*v11);
    char v10 = HIBYTE(v28);
  }
  *(_OWORD *)uint64_t v11 = v30;
  *(void *)(a4 + 448) = v31;
  HIBYTE(v31) = 0;
  LOBYTE(v30) = 0;
  *(unsigned char *)(a4 + 456) = v32;
  if (v10 < 0)
  {
    operator delete(__p[0]);
    int v12 = v25;
    if (v25 != 1) {
      goto LABEL_11;
    }
LABEL_16:
    int64_t size = (void *)v23.__r_.__value_.__l.__size_;
    if (!v23.__r_.__value_.__l.__size_) {
      goto LABEL_19;
    }
    v23.__r_.__value_.__r.__words[2] = v23.__r_.__value_.__l.__size_;
    goto LABEL_18;
  }
  int v12 = v25;
  if (v25 == 1) {
    goto LABEL_16;
  }
LABEL_11:
  if (!v12 && v24 < 0)
  {
    int64_t size = (void *)v23.__r_.__value_.__l.__size_;
LABEL_18:
    operator delete(size);
  }
LABEL_19:
  sub_5F5F70(a4, (long long *)&qword_25DA728, (_DWORD *)a2, a2 + 8, 0);
  sub_98C68C(*(unsigned __int16 *)(a2 + 32), (uint64_t)&v21);
  unint64_t v14 = std::string::insert(&v21, 0, "Advisory_CheckIn_");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  uint64_t v16 = std::string::append(&v22, "_Time");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v22.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_21;
    }
  }
  else if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_21;
  }
  operator delete(v21.__r_.__value_.__l.__data_);
LABEL_21:
  sub_98D43C((int *)a2, a3, (const char *)(a2 + 8), *(void *)(a1 + 1584) + 1177, *(int **)(a1 + 1640), &v23, a4);
  uint64_t v18 = sub_8D7730(*(void *)(a1 + 16), (uint64_t)&v23);
  unint64_t v19 = *(void *)(a4 + 8);
  if (v19 >= *(void *)(a4 + 16))
  {
    *(void *)(a4 + 8) = sub_1D740((char **)a4, (uint64_t)v18);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
LABEL_30:
    }
      operator delete(v23.__r_.__value_.__l.__data_);
  }
  else
  {
    if (*((char *)v18 + 23) < 0)
    {
      sub_4200(*(unsigned char **)(a4 + 8), (void *)*v18, v18[1]);
    }
    else
    {
      long long v20 = *(_OWORD *)v18;
      *(void *)(v19 + 16) = v18[2];
      *(_OWORD *)unint64_t v19 = v20;
    }
    *(void *)(a4 + 8) = v19 + 24;
    *(void *)(a4 + 8) = v19 + 24;
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_30;
    }
  }
}

void sub_956BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  *(void *)(v28 + 8) = v29;
  if (a28 < 0) {
    operator delete(__p);
  }
  sub_4F2FF8(v28);
  _Unwind_Resume(a1);
}

uint64_t sub_956CCC@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v4 = sub_45FB38(a1);
  sub_5F3B34(a2);
  *(void *)(a2 + 168) = 0;
  *(unsigned char *)(a2 + 160) = 0;
  *(void *)(a2 + 176) = 0;
  *(void *)(a2 + 184) = 0;
  uint64_t v5 = a2 + 192;
  if (v4)
  {
    uint64_t result = sub_5F3B34(v5);
    *(_OWORD *)(a2 + 384) = 0u;
    *(_OWORD *)(a2 + 400) = 0u;
    *(_OWORD *)(a2 + 416) = 0u;
    *(_OWORD *)(a2 + 432) = 0u;
    *(_OWORD *)(a2 + 448) = 0u;
    *(_OWORD *)(a2 + 464) = 0u;
    *(_OWORD *)(a2 + 352) = 0u;
    *(_OWORD *)(a2 + 368) = 0u;
    *(_DWORD *)(a2 + 384) = -1;
    *(_DWORD *)(a2 + 392) = -1;
    *(_DWORD *)(a2 + 395) = -1;
    *(void *)(a2 + 399) = 0;
    *(void *)(a2 + 407) = 0;
    *(void *)(a2 + 415) = 0;
    *(_WORD *)(a2 + 423) = 0;
    *(void *)(a2 + 432) = 0;
    *(void *)(a2 + 440) = 0;
    *(void *)(a2 + 448) = 0;
    *(unsigned char *)(a2 + 456) = 0;
    *(_OWORD *)(a2 + 480) = 0u;
    return result;
  }
  sub_5F3B34(v5);
  *(_DWORD *)(a2 + 384) = -1;
  *(_DWORD *)(a2 + 392) = -1;
  *(_DWORD *)(a2 + 395) = -1;
  *(void *)(a2 + 399) = 0;
  *(void *)(a2 + 415) = 0;
  *(void *)(a2 + 407) = 0;
  *(_WORD *)(a2 + 423) = 0;
  *(void *)(a2 + 440) = 0;
  *(void *)(a2 + 448) = 0;
  *(void *)(a2 + 432) = 0;
  *(unsigned char *)(a2 + 456) = 0;
  *(_OWORD *)(a2 + 464) = 0u;
  *(_OWORD *)(a2 + 480) = 0u;
  *(void *)(a2 + 472) = sub_6E6EC((char **)(a2 + 464), (uint64_t)&xmmword_25DA158);
  *(_DWORD *)(a2 + 488) = 4;
  sub_524D84(39, (uint64_t)v12);
  sub_4F377C(a2 + 352, (uint64_t)v12);
  *(void *)(a2 + 392) = v17;
  uint64_t v7 = (void **)(a2 + 400);
  if (*(char *)(a2 + 423) < 0) {
    operator delete(*v7);
  }
  uint64_t v8 = (_OWORD *)(a2 + 432);
  *(_OWORD *)uint64_t v7 = *(_OWORD *)__p;
  *(void *)(a2 + 416) = v19;
  HIBYTE(v19) = 0;
  LOBYTE(__p[0]) = 0;
  *(unsigned char *)(a2 + 424) = v20;
  if (*(char *)(a2 + 455) < 0)
  {
    operator delete(*(void **)(a2 + 432));
    int v10 = SHIBYTE(v19);
    _OWORD *v8 = v21;
    *(void *)(a2 + 448) = v22;
    HIBYTE(v22) = 0;
    LOBYTE(v21) = 0;
    *(unsigned char *)(a2 + 456) = v23;
    if (v10 < 0)
    {
      operator delete(__p[0]);
      int v9 = v16;
      if (v16 == 1) {
        goto LABEL_14;
      }
    }
    else
    {
      int v9 = v16;
      if (v16 == 1) {
        goto LABEL_14;
      }
    }
LABEL_10:
    if (v9 || (v15 & 0x80000000) == 0) {
      return sub_52FD00(a2, (uint64_t)a1);
    }
    uint64_t v11 = v13;
    goto LABEL_16;
  }
  _OWORD *v8 = v21;
  *(void *)(a2 + 448) = v22;
  HIBYTE(v22) = 0;
  LOBYTE(v21) = 0;
  *(unsigned char *)(a2 + 456) = v23;
  int v9 = v16;
  if (v16 != 1) {
    goto LABEL_10;
  }
LABEL_14:
  uint64_t v11 = v13;
  if (v13)
  {
    unint64_t v14 = v13;
LABEL_16:
    operator delete(v11);
  }
  return sub_52FD00(a2, (uint64_t)a1);
}

void sub_956F24(_Unwind_Exception *a1)
{
  sub_4F2FF8(v1);
  _Unwind_Resume(a1);
}

void sub_956F38(_Unwind_Exception *a1)
{
  if (*v2)
  {
    sub_4F3104((uint64_t)v2, *v2);
    operator delete(*v2);
    sub_4D4B58(v1);
    _Unwind_Resume(a1);
  }
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_956F80(_Unwind_Exception *a1)
{
  sub_4F2FF8(v1);
  _Unwind_Resume(a1);
}

void sub_956F94(uint64_t a1@<X0>, unint64_t a2@<X1>, std::string *a3@<X8>)
{
  sub_505610(a1 + 32, a2, (uint64_t)&v20);
  *(_OWORD *)std::string __p = 0u;
  long long v18 = 0u;
  int v19 = 1065353216;
  for (uint64_t i = *(uint64_t **)(sub_5231C((uint64_t)&v20) + 16); i; uint64_t i = (uint64_t *)*i)
  {
    sub_6F3150((char *)i + 40, (uint64_t)&__str);
    char v24 = (long long *)(i + 2);
    uint64_t v6 = sub_31B300((uint64_t)__p, (uint64_t)(i + 2), (uint64_t)&unk_20F06E0, &v24);
    std::string::operator=((std::string *)(v6 + 5), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  sub_635CD0((long long **)&v20, (uint64_t)&__str);
  sub_6581AC((uint64_t)&__str, (uint64_t)__p, *(void *)(a1 + 24), 0, a3);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  uint64_t v7 = (char *)v18;
  if ((void)v18)
  {
    while (1)
    {
      uint64_t v8 = *(char **)v7;
      if (v7[63] < 0)
      {
        operator delete(*((void **)v7 + 5));
        if ((v7[39] & 0x80000000) == 0) {
          goto LABEL_11;
        }
LABEL_14:
        operator delete(*((void **)v7 + 2));
        operator delete(v7);
        uint64_t v7 = v8;
        if (!v8) {
          break;
        }
      }
      else
      {
        if (v7[39] < 0) {
          goto LABEL_14;
        }
LABEL_11:
        operator delete(v7);
        uint64_t v7 = v8;
        if (!v8) {
          break;
        }
      }
    }
  }
  int v9 = __p[0];
  __p[0] = 0;
  if (v9) {
    operator delete(v9);
  }
  int v10 = v23;
  if (v23)
  {
    do
    {
      uint64_t v11 = (void *)*v10;
      sub_4F4B48((uint64_t)(v10 + 2));
      operator delete(v10);
      int v10 = v11;
    }
    while (v11);
  }
  int v12 = v22;
  uint64_t v22 = 0;
  if (v12) {
    operator delete(v12);
  }
  std::string::size_type v13 = (void **)v20;
  if (v20)
  {
    unint64_t v14 = v21;
    char v15 = v20;
    if (v21 != v20)
    {
      do
      {
        if (*((char *)v14 - 1) < 0) {
          operator delete(*(v14 - 3));
        }
        v14 -= 3;
      }
      while (v14 != v13);
      char v15 = v20;
    }
    long long v21 = v13;
    operator delete(v15);
  }
}

void sub_957168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_50828((uint64_t)&a16);
  sub_4D4880(&a21);
  _Unwind_Resume(a1);
}

void sub_9571CC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_5F3B34(a3);
  *(void *)(a3 + 168) = 0;
  *(unsigned char *)(a3 + 160) = 0;
  *(void *)(a3 + 176) = 0;
  *(void *)(a3 + 184) = 0;
  sub_5F3B34(a3 + 192);
  *(_DWORD *)(a3 + 384) = -1;
  *(_DWORD *)(a3 + 392) = -1;
  *(_DWORD *)(a3 + 395) = -1;
  *(void *)(a3 + 399) = 0;
  *(void *)(a3 + 415) = 0;
  *(void *)(a3 + 407) = 0;
  *(_WORD *)(a3 + 423) = 0;
  *(void *)(a3 + 440) = 0;
  *(void *)(a3 + 448) = 0;
  *(void *)(a3 + 432) = 0;
  *(unsigned char *)(a3 + 456) = 0;
  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 480) = 0u;
  *(void *)(a3 + 472) = sub_6E6EC((char **)(a3 + 464), (uint64_t)&xmmword_25DA158);
  *(_DWORD *)(a3 + 488) = 1;
  sub_524D84(39, (uint64_t)&v14);
  sub_4F377C(a3 + 352, (uint64_t)&v14);
  *(void *)(a3 + 392) = v17;
  uint64_t v6 = (void **)(a3 + 400);
  if (*(char *)(a3 + 423) < 0) {
    operator delete(*v6);
  }
  uint64_t v7 = (_OWORD *)(a3 + 432);
  *(_OWORD *)uint64_t v6 = *(_OWORD *)__p;
  *(void *)(a3 + 416) = v19;
  HIBYTE(v19) = 0;
  LOBYTE(__p[0]) = 0;
  *(unsigned char *)(a3 + 424) = v20;
  if (*(char *)(a3 + 455) < 0)
  {
    operator delete(*(void **)(a3 + 432));
    int v9 = SHIBYTE(v19);
    *uint64_t v7 = v21;
    *(void *)(a3 + 448) = v22;
    HIBYTE(v22) = 0;
    LOBYTE(v21) = 0;
    *(unsigned char *)(a3 + 456) = v23;
    if (v9 < 0)
    {
      operator delete(__p[0]);
      int v8 = v16;
      if (v16 != 1) {
        goto LABEL_8;
      }
    }
    else
    {
      int v8 = v16;
      if (v16 != 1) {
        goto LABEL_8;
      }
    }
LABEL_12:
    int64_t size = (void *)v14.__r_.__value_.__l.__size_;
    if (!v14.__r_.__value_.__l.__size_) {
      goto LABEL_15;
    }
    v14.__r_.__value_.__r.__words[2] = v14.__r_.__value_.__l.__size_;
    goto LABEL_14;
  }
  *uint64_t v7 = v21;
  *(void *)(a3 + 448) = v22;
  HIBYTE(v22) = 0;
  LOBYTE(v21) = 0;
  *(unsigned char *)(a3 + 456) = v23;
  int v8 = v16;
  if (v16 == 1) {
    goto LABEL_12;
  }
LABEL_8:
  if (!v8 && v15 < 0)
  {
    int64_t size = (void *)v14.__r_.__value_.__l.__size_;
LABEL_14:
    operator delete(size);
  }
LABEL_15:
  uint64_t v11 = (const std::string *)sub_8D7730(*(void *)(a1 + 16), (uint64_t)&xmmword_25D9E58);
  memset(&v14, 0, sizeof(v14));
  sub_5F7A30(a3, v11, &v14);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  std::string::size_type v13 = *(void **)a2;
  for (uint64_t i = *(void **)(a2 + 8); v13 != i; v13 += 62)
    sub_957484(a1, a3, v13);
}

void sub_957414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_4F2FF8(v15);
    _Unwind_Resume(a1);
  }
  sub_4F2FF8(v15);
  _Unwind_Resume(a1);
}

void sub_957484(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = sub_8D7730(*(void *)(a1 + 16), (uint64_t)&dword_25D9E70);
  unint64_t __val = *(void *)a2;
  uint64_t v68 = *(void *)(a2 + 8);
  uint64_t v6 = sub_612A40(a3, 0);
  sub_5F41E8(a2, v6);
  uint64_t v7 = *(void *)(a2 + 8);
  int v8 = (std::string *)(v7 - 24);
  uint64_t v9 = *(unsigned __int8 *)(v7 - 1);
  if ((v9 & 0x80u) == 0) {
    int v10 = (char *)(v7 - 24);
  }
  else {
    int v10 = *(char **)(v7 - 24);
  }
  if (byte_25D9E57 >= 0) {
    uint64_t v11 = &xmmword_25D9E40;
  }
  else {
    uint64_t v11 = (long long *)xmmword_25D9E40;
  }
  if (byte_25D9E57 >= 0) {
    int64_t v12 = byte_25D9E57;
  }
  else {
    int64_t v12 = *((void *)&xmmword_25D9E40 + 1);
  }
  if (v12)
  {
    uint64_t v13 = *(void *)(v7 - 16);
    if ((v9 & 0x80u) == 0) {
      uint64_t v13 = v9;
    }
    if (v13 >= v12)
    {
      std::string v14 = &v10[v13];
      int v15 = *(char *)v11;
      int v16 = v10;
      do
      {
        uint64_t v17 = v13 - v12;
        if (v17 == -1) {
          break;
        }
        long long v18 = (char *)memchr(v16, v15, v17 + 1);
        if (!v18) {
          break;
        }
        uint64_t v19 = v18;
        if (!memcmp(v18, v11, v12))
        {
          if (v19 != v14)
          {
            std::string::size_type v20 = v19 - v10;
            if (v19 - v10 != -1) {
              goto LABEL_21;
            }
          }
          break;
        }
        int v16 = v19 + 1;
        uint64_t v13 = v14 - (v19 + 1);
      }
      while (v13 >= v12);
    }
  }
  else
  {
    std::string::size_type v20 = 0;
LABEL_21:
    int v21 = *((char *)v5 + 23);
    if (v21 >= 0) {
      uint64_t v22 = (const std::string::value_type *)v5;
    }
    else {
      uint64_t v22 = (const std::string::value_type *)*v5;
    }
    if (v21 >= 0) {
      std::string::size_type v23 = *((unsigned __int8 *)v5 + 23);
    }
    else {
      std::string::size_type v23 = v5[1];
    }
    std::string::replace(v8, v20, v12, v22, v23);
  }
  char v24 = (char *)a3[3];
  int v25 = (char *)a3[4];
  if (v24 != v25)
  {
    unint64_t __vala = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v68 - __val) >> 3);
    uint64_t v26 = &qword_25DA658;
    BOOL v65 = v25;
    do
    {
      unint64_t v27 = *(void *)(a2 + 32);
      if (v27 >= *(void *)(a2 + 40))
      {
        uint64_t v28 = sub_94B440((void **)(a2 + 24), (long long *)v24);
      }
      else
      {
        sub_4F5C8C(*(_DWORD **)(a2 + 32), (long long *)v24);
        uint64_t v28 = (char *)(v27 + 144);
        *(void *)(a2 + 32) = v27 + 144;
      }
      *(void *)(a2 + 32) = v28;
      uint64_t v29 = v24[23];
      unint64_t v30 = *((void *)v24 + 1);
      if ((v29 & 0x80u) == 0) {
        uint64_t v31 = v24[23];
      }
      else {
        uint64_t v31 = *((void *)v24 + 1);
      }
      uint64_t v32 = *((unsigned __int8 *)&dword_C + (void)v26 + 3);
      int v33 = (char)v32;
      if ((v32 & 0x80u) != 0) {
        uint64_t v32 = *v26;
      }
      if (v31 == v32)
      {
        if (v33 >= 0) {
          uint64_t v34 = &qword_25DA650;
        }
        else {
          uint64_t v34 = (uint64_t *)qword_25DA650;
        }
        if ((v29 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v24, v34, *((void *)v24 + 1))) {
            goto LABEL_66;
          }
        }
        else
        {
          if (!v24[23]) {
            goto LABEL_63;
          }
          uint64_t v35 = 0;
          while (v24[v35] == *((unsigned char *)v34 + v35))
          {
            if (v29 == ++v35)
            {
LABEL_62:
              if ((v29 & 0x80) != 0) {
                goto LABEL_66;
              }
              goto LABEL_63;
            }
          }
        }
      }
      uint64_t v36 = byte_25DA67F;
      if (byte_25DA67F < 0) {
        uint64_t v36 = qword_25DA670;
      }
      if (v31 == v36)
      {
        if (byte_25DA67F >= 0) {
          uint64_t v37 = &qword_25DA668;
        }
        else {
          uint64_t v37 = (uint64_t *)qword_25DA668;
        }
        if ((v29 & 0x80) == 0)
        {
          if (v29)
          {
            uint64_t v38 = 0;
            while (v24[v38] == *((unsigned char *)v37 + v38))
            {
              if (v29 == ++v38) {
                goto LABEL_62;
              }
            }
            goto LABEL_31;
          }
LABEL_63:
          long long v39 = *(_OWORD *)v24;
          __str.__r_.__value_.__r.__words[2] = *((void *)v24 + 2);
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v39;
          unsigned __int8 v40 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_64:
            uint64_t v41 = v40 - 1;
            *((unsigned char *)&__str.__r_.__value_.__s + 23) = v41 & 0x7F;
            p_str = &__str;
            goto LABEL_68;
          }
LABEL_67:
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
          uint64_t v41 = --__str.__r_.__value_.__l.__size_;
LABEL_68:
          p_str->__r_.__value_.__s.__data_[v41] = 0;
          std::to_string(&v69, __vala);
          uint64_t v43 = std::string::append(&v69, "}");
          long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
          int64_t v71 = v43->__r_.__value_.__r.__words[2];
          *(_OWORD *)std::string __p = v44;
          v43->__r_.__value_.__l.__size_ = 0;
          v43->__r_.__value_.__r.__words[2] = 0;
          v43->__r_.__value_.__r.__words[0] = 0;
          if (v71 >= 0) {
            uint64_t v45 = __p;
          }
          else {
            uint64_t v45 = (void **)__p[0];
          }
          if (v71 >= 0) {
            std::string::size_type v46 = HIBYTE(v71);
          }
          else {
            std::string::size_type v46 = (std::string::size_type)__p[1];
          }
          std::string::append(&__str, (const std::string::value_type *)v45, v46);
          __int16 v47 = v26;
          if (SHIBYTE(v71) < 0)
          {
            operator delete(__p[0]);
            if ((SHIBYTE(v69.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_76;
            }
          }
          else if ((SHIBYTE(v69.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_76:
            std::string::operator=((std::string *)(*(void *)(a2 + 32) - 144), &__str);
            uint64_t v48 = *(void *)(a2 + 8);
            __n128 v49 = (std::string *)(v48 - 24);
            uint64_t v50 = *(unsigned __int8 *)(v48 - 1);
            if ((v50 & 0x80u) == 0) {
              std::string v51 = (char *)(v48 - 24);
            }
            else {
              std::string v51 = *(char **)(v48 - 24);
            }
            int v52 = v24[23];
            if (v52 >= 0) {
              int v53 = v24;
            }
            else {
              int v53 = *(char **)v24;
            }
            if (v52 >= 0) {
              int64_t v54 = v24[23];
            }
            else {
              int64_t v54 = *((void *)v24 + 1);
            }
            if (v54)
            {
              uint64_t v55 = *(void *)(v48 - 16);
              if ((v50 & 0x80u) == 0) {
                uint64_t v55 = v50;
              }
              if (v55 >= v54)
              {
                uint64_t v56 = &v51[v55];
                int v57 = *v53;
                unint64_t v58 = v51;
                do
                {
                  uint64_t v59 = v55 - v54;
                  if (v59 == -1) {
                    break;
                  }
                  uint64_t v60 = (char *)memchr(v58, v57, v59 + 1);
                  if (!v60) {
                    break;
                  }
                  int v61 = v60;
                  if (!memcmp(v60, v53, v54))
                  {
                    if (v61 != v56)
                    {
                      std::string::size_type v62 = v61 - v51;
                      if (v61 - v51 != -1) {
                        goto LABEL_98;
                      }
                    }
                    break;
                  }
                  unint64_t v58 = v61 + 1;
                  uint64_t v55 = v56 - (v61 + 1);
                }
                while (v55 >= v54);
              }
            }
            else
            {
              std::string::size_type v62 = 0;
LABEL_98:
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                int v63 = &__str;
              }
              else {
                int v63 = (std::string *)__str.__r_.__value_.__r.__words[0];
              }
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type size = __str.__r_.__value_.__l.__size_;
              }
              std::string::replace(v49, v62, v54, (const std::string::value_type *)v63, size);
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            uint64_t v26 = v47;
            int v25 = v65;
            goto LABEL_31;
          }
          operator delete(v69.__r_.__value_.__l.__data_);
          goto LABEL_76;
        }
        if (!memcmp(*(const void **)v24, v37, v30))
        {
LABEL_66:
          sub_4200(&__str, *(void **)v24, v30);
          unsigned __int8 v40 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_64;
          }
          goto LABEL_67;
        }
      }
LABEL_31:
      v24 += 144;
    }
    while (v24 != v25);
  }
}

void sub_957944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a17 < 0)
  {
    operator delete(__p);
    if ((a30 & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
  else if ((a30 & 0x80000000) == 0)
  {
LABEL_6:
    _Unwind_Resume(exception_object);
  }
  operator delete(a25);
  goto LABEL_6;
}

void sub_9579CC(void *a1, void *a2, void *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_7;
  }
  for (uint64_t i = 0; i != v6; *(void *)(*a1 + 8 * i++) = 0)
    ;
  int v8 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      v8[2] = a2[2];
      uint64_t v9 = *v8;
      sub_5A4600(a1, v8);
      a2 = (void *)*a2;
      int v8 = (uint64_t *)v9;
      if (!v9) {
        goto LABEL_7;
      }
    }
    do
    {
      uint64_t v12 = *v8;
      operator delete(v8);
      int v8 = (uint64_t *)v12;
    }
    while (v12);
  }
  else
  {
LABEL_7:
    while (a2 != a3)
    {
      int v10 = (uint64_t *)operator new(0x18uLL);
      *int v10 = 0;
      uint64_t v11 = a2[2];
      v10[1] = v11;
      v10[2] = v11;
      sub_5A4600(a1, v10);
      a2 = (void *)*a2;
    }
  }
}

void sub_957AA8(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    uint64_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_957AC8(_Unwind_Exception *a1)
{
}

void sub_957ADC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_957AF0(void *a1, uint64_t *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v7 = a1[5];
  if (v7 < a4)
  {
    if (v7)
    {
      uint64_t v8 = v7 + ((a3 - *a2) >> 5);
      if (v8 >= 1)
      {
        uint64_t v9 = &a2[(unint64_t)v8 >> 7];
        uint64_t v10 = *v9 + 32 * (v8 & 0x7F);
        unint64_t v11 = a1[4];
        uint64_t v12 = a1[1];
        uint64_t v13 = (char *)(v12 + 8 * (v11 >> 7));
        if (a1[2] == v12) {
          goto LABEL_15;
        }
LABEL_11:
        uint64_t v21 = *(void *)v13 + 32 * (v11 & 0x7F);
LABEL_16:
        int v25 = v13;
        uint64_t v26 = v21;
        sub_95811C(a2, a3, v9, v10, (uint64_t)&v25);
        sub_957CD8(a1, v9, v10, a4 - a1[5]);
        return;
      }
      unint64_t v22 = 127 - v8;
      uint64_t v9 = &a2[-(v22 >> 7)];
      uint64_t v10 = *v9 + 32 * (~(_BYTE)v22 & 0x7F);
      unint64_t v11 = a1[4];
      uint64_t v23 = a1[1];
      uint64_t v13 = (char *)(v23 + 8 * (v11 >> 7));
      if (a1[2] != v23) {
        goto LABEL_11;
      }
    }
    else
    {
      uint64_t v10 = a3;
      uint64_t v9 = a2;
      unint64_t v11 = a1[4];
      uint64_t v20 = a1[1];
      uint64_t v13 = (char *)(v20 + 8 * (v11 >> 7));
      if (a1[2] != v20) {
        goto LABEL_11;
      }
    }
LABEL_15:
    uint64_t v21 = 0;
    goto LABEL_16;
  }
  uint64_t v14 = a1[1];
  int v15 = (char *)(v14 + 8 * (a1[4] >> 7));
  if (a1[2] == v14)
  {
    uint64_t v16 = 0;
    if (a4)
    {
LABEL_8:
      uint64_t v17 = a4 + ((a3 - *a2) >> 5);
      if (v17 < 1)
      {
        unint64_t v24 = 127 - v17;
        long long v18 = &a2[-(v24 >> 7)];
        uint64_t v19 = *v18 + 32 * (~(_BYTE)v24 & 0x7F);
      }
      else
      {
        long long v18 = &a2[(unint64_t)v17 >> 7];
        uint64_t v19 = *v18 + 32 * (v17 & 0x7F);
      }
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v16 = *(void *)v15 + 32 * (a1[4] & 0x7FLL);
    if (a4) {
      goto LABEL_8;
    }
  }
  uint64_t v19 = a3;
  long long v18 = a2;
LABEL_18:
  int v25 = v15;
  uint64_t v26 = v16;
  sub_95811C(a2, a3, v18, v19, (uint64_t)&v25);
  sub_957F30(a1, v25, v26);
}

void sub_957CD8(void *a1, void *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v7 = a1;
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  if (v9 == v8) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = 16 * (v9 - v8) - 1;
  }
  uint64_t v11 = a1[5];
  unint64_t v12 = v11 + a1[4];
  unint64_t v13 = v10 - v12;
  if (a4 > v13)
  {
    sub_95840C((uint64_t)a1, a4 - v13);
    uint64_t v11 = v7[5];
    uint64_t v8 = v7[1];
    uint64_t v9 = v7[2];
    unint64_t v12 = v7[4] + v11;
  }
  uint64_t v14 = (void *)(v8 + 8 * (v12 >> 7));
  if (v9 == v8)
  {
    uint64_t v15 = 0;
    if (!a4) {
      return;
    }
  }
  else
  {
    uint64_t v15 = *v14 + 32 * (v12 & 0x7F);
    if (!a4) {
      return;
    }
  }
  uint64_t v16 = a4 + ((v15 - *v14) >> 5);
  if (v16 >= 1)
  {
    uint64_t v17 = &v14[(unint64_t)v16 >> 7];
    uint64_t v18 = *v17 + 32 * (v16 & 0x7F);
    if (v15 == v18) {
      return;
    }
LABEL_14:
    uint64_t v31 = v17;
    uint64_t v32 = v7;
    uint64_t v30 = v18;
    while (1)
    {
      uint64_t v20 = v18;
      if (v14 != v17) {
        uint64_t v20 = *v14 + 4096;
      }
      if (v15 == v20)
      {
        v7[5] = v11;
        if (v14 == v17) {
          return;
        }
      }
      else
      {
        uint64_t v21 = 0;
        do
        {
          unint64_t v22 = (void *)(v15 + v21);
          *unint64_t v22 = 0;
          v22[1] = 0;
          v22[2] = 0;
          unint64_t v24 = *(const void **)a3;
          uint64_t v23 = *(void *)(a3 + 8);
          int64_t v25 = v23 - *(void *)a3;
          if (v23 != *(void *)a3)
          {
            if (v25 < 0) {
              sub_2E00();
            }
            uint64_t v26 = (char *)operator new(v23 - *(void *)a3);
            *unint64_t v22 = v26;
            v22[1] = v26;
            unint64_t v27 = &v26[8 * (v25 >> 3)];
            v22[2] = v27;
            memcpy(v26, v24, v25);
            v22[1] = v27;
          }
          v22[3] = *(void *)(a3 + 24);
          a3 += 32;
          if (a3 - *a2 == 4096)
          {
            uint64_t v28 = a2[1];
            ++a2;
            a3 = v28;
          }
          v21 += 32;
        }
        while (v15 + v21 != v20);
        uint64_t v17 = v31;
        unint64_t v7 = v32;
        uint64_t v18 = v30;
        uint64_t v11 = v32[5] + ((v20 - v15) >> 5);
        v32[5] = v11;
        if (v14 == v31) {
          return;
        }
      }
      uint64_t v29 = v14[1];
      ++v14;
      uint64_t v15 = v29;
      if (v29 == v18) {
        return;
      }
    }
  }
  unint64_t v19 = 127 - v16;
  uint64_t v17 = &v14[-(v19 >> 7)];
  uint64_t v18 = *v17 + 32 * (~(_BYTE)v19 & 0x7F);
  if (v15 != v18) {
    goto LABEL_14;
  }
}

void sub_957EFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v15 = *(void **)(v12 + v13);
  if (v15)
  {
    *(void *)(v12 + v13 + 8) = v15;
    operator delete(v15);
  }
  *(void *)(a12 + 40) += v13 >> 5;
  _Unwind_Resume(exception_object);
}

void sub_957F30(void *a1, char *a2, uint64_t a3)
{
  unint64_t v5 = a1[4];
  uint64_t v4 = a1[5];
  uint64_t v7 = a1[1];
  uint64_t v6 = a1[2];
  uint64_t v8 = (char *)(v7 + 8 * ((v5 + v4) >> 7));
  if (v6 == v7)
  {
    uint64_t v9 = 0;
    if (!a3) {
      return;
    }
  }
  else
  {
    uint64_t v9 = *(void *)v8 + 32 * (((_BYTE)v5 + (_BYTE)v4) & 0x7F);
    if (v9 == a3) {
      return;
    }
  }
  uint64_t v10 = ((v9 - *(void *)v8) >> 5) + 16 * (v8 - a2);
  uint64_t v11 = (a3 - *(void *)a2) >> 5;
  uint64_t v12 = v10 - v11;
  if (v10 - v11 < 1) {
    return;
  }
  uint64_t v13 = (char *)(v7 + 8 * (v5 >> 7));
  if (v6 != v7)
  {
    uint64_t v14 = *(void *)v13 + 32 * (a1[4] & 0x7FLL);
    if (a3 != v14) {
      goto LABEL_8;
    }
LABEL_13:
    uint64_t v14 = a3;
LABEL_14:
    if (v14 != v9) {
      goto LABEL_19;
    }
    goto LABEL_24;
  }
  uint64_t v14 = 0;
  if (!a3) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v15 = v11 + 16 * (a2 - v13);
  if (v15 == (v14 - *(void *)v13) >> 5) {
    goto LABEL_14;
  }
  if (v15 >= 1)
  {
    v13 += 8 * ((unint64_t)v15 >> 7);
    uint64_t v14 = *(void *)v13 + 32 * (v15 & 0x7F);
    if (v14 == v9) {
      goto LABEL_24;
    }
    do
    {
LABEL_19:
      uint64_t v17 = *(void **)v14;
      if (*(void *)v14)
      {
        *(void *)(v14 + 8) = v17;
        operator delete(v17);
      }
      v14 += 32;
      if (v14 - *(void *)v13 == 4096)
      {
        uint64_t v18 = *((void *)v13 + 1);
        v13 += 8;
        uint64_t v14 = v18;
      }
    }
    while (v14 != v9);
    uint64_t v7 = a1[1];
    uint64_t v6 = a1[2];
    unint64_t v5 = a1[4];
    uint64_t v4 = a1[5];
    goto LABEL_24;
  }
  unint64_t v16 = 127 - v15;
  v13 -= 8 * (v16 >> 7);
  uint64_t v14 = *(void *)v13 + 32 * (~(_BYTE)v16 & 0x7F);
  if (v14 != v9) {
    goto LABEL_19;
  }
LABEL_24:
  if (v6 == v7) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = 16 * (v6 - v7) - 1;
  }
  uint64_t v20 = v4 - v12;
  a1[5] = v20;
  if (v19 - (v20 + v5) >= 0x100)
  {
    do
    {
      operator delete(*(void **)(v6 - 8));
      uint64_t v21 = a1[1];
      uint64_t v6 = a1[2] - 8;
      a1[2] = v6;
      if (v6 == v21) {
        uint64_t v22 = 0;
      }
      else {
        uint64_t v22 = 16 * (v6 - v21) - 1;
      }
    }
    while ((unint64_t)(v22 - (a1[5] + a1[4])) > 0xFF);
  }
}

double sub_95811C(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(void **)a5;
  uint64_t v8 = *(void *)(a5 + 8);
  if (a1 != a3)
  {
    uint64_t v10 = a1 + 1;
    for (uint64_t i = *a1 + 4096; ; uint64_t i = v12 + 4096)
    {
      sub_9581B0(a2, i, v7, v8, &v14);
      uint64_t v8 = *((void *)&v15 + 1);
      uint64_t v7 = (void *)v15;
      *(void *)a5 = v15;
      *(void *)(a5 + 8) = v8;
      if (v10 == a3) {
        break;
      }
      uint64_t v12 = *v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  sub_9581B0(a2, a4, v7, v8, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void sub_9581B0(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  uint64_t v6 = a1;
  if (a1 == a2)
  {
    a2 = a1;
  }
  else
  {
    uint64_t v30 = a5;
    uint64_t v31 = a2;
    uint64_t v7 = *a3;
    while (1)
    {
      uint64_t v8 = (v7 - a4 + 4096) >> 5;
      if ((a2 - v6) >> 5 < v8) {
        uint64_t v8 = (a2 - v6) >> 5;
      }
      if (v8)
      {
        uint64_t v9 = 0;
        uint64_t v35 = a4;
        uint64_t v36 = 32 * v8;
        uint64_t v10 = a4;
        uint64_t v32 = v6 + 32 * v8;
        int v33 = a3;
        uint64_t v34 = v6;
        do
        {
          uint64_t v11 = (void **)(a4 + v9);
          if (v6 != a4)
          {
            uint64_t v13 = *(char **)(v6 + v9);
            uint64_t v12 = *(unsigned char **)(v6 + v9 + 8);
            uint64_t v14 = v12 - v13;
            unint64_t v15 = (v12 - v13) >> 3;
            uint64_t v16 = (uint64_t)v11[2];
            uint64_t v17 = (char *)*v11;
            if (v15 <= (v16 - (uint64_t)*v11) >> 3)
            {
              uint64_t v23 = (void *)(v10 + 8);
              uint64_t v24 = a4 + v9;
              int64_t v25 = *(unsigned char **)(v24 + 8);
              unint64_t v26 = (v25 - v17) >> 3;
              if (v26 >= v15)
              {
                if (v12 != v13)
                {
                  memmove(*v11, v13, v12 - v13);
                  uint64_t v23 = (void *)(v10 + 8);
                }
                uint64_t v6 = v34;
                a4 = v35;
              }
              else
              {
                if (v25 != v17)
                {
                  memmove(*v11, v13, v25 - v17);
                  uint64_t v17 = *(char **)(v24 + 8);
                }
                a4 = v35;
                unint64_t v27 = &v13[8 * v26];
                uint64_t v14 = v12 - v27;
                if (v12 != v27) {
                  memmove(v17, v27, v12 - v27);
                }
                uint64_t v6 = v34;
                uint64_t v23 = (void *)(v10 + 8);
              }
            }
            else
            {
              if (v17)
              {
                *(void *)(a4 + v9 + 8) = v17;
                operator delete(v17);
                uint64_t v16 = 0;
                *uint64_t v11 = 0;
                v11[1] = 0;
                v11[2] = 0;
              }
              if (v14 < 0) {
                goto LABEL_38;
              }
              uint64_t v18 = v16 >> 2;
              if (v16 >> 2 <= v15) {
                uint64_t v18 = (v12 - v13) >> 3;
              }
              BOOL v19 = (unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8;
              unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
              if (!v19) {
                unint64_t v20 = v18;
              }
              if (v20 >> 61) {
LABEL_38:
              }
                sub_2E00();
              uint64_t v21 = 8 * v20;
              uint64_t v22 = (char *)operator new(8 * v20);
              uint64_t v17 = v22;
              *(void *)(a4 + v9) = v22;
              *(void *)(a4 + v9 + 8) = v22;
              uint64_t v23 = (void *)(a4 + v9 + 8);
              v11[2] = &v22[v21];
              if (v12 != v13)
              {
                memcpy(v22, v13, v12 - v13);
                uint64_t v23 = (void *)(a4 + v9 + 8);
              }
            }
            void *v23 = &v17[v14];
          }
          v11[3] = *(void **)(v6 + v9 + 24);
          v10 += 32;
          v9 += 32;
        }
        while (v36 != v9);
        a4 += v9;
        uint64_t v6 = v32;
        a3 = v33;
        a2 = v31;
      }
      if (v6 == a2) {
        break;
      }
      uint64_t v28 = a3[1];
      ++a3;
      uint64_t v7 = v28;
      a4 = v28;
    }
    if (*a3 + 4096 == a4)
    {
      uint64_t v29 = a3[1];
      ++a3;
      a4 = v29;
    }
    a5 = v30;
  }
  *a5 = a2;
  a5[1] = a3;
  a5[2] = a4;
}

void sub_95840C(uint64_t a1, unint64_t a2)
{
  long long v3 = *(char **)(a1 + 16);
  uint64_t v4 = (uint64_t)&v3[-*(void *)(a1 + 8)];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if ((v5 & 0x7F) != 0) {
    unint64_t v6 = (v5 >> 7) + 1;
  }
  else {
    unint64_t v6 = v5 >> 7;
  }
  unint64_t v7 = *(void *)(a1 + 32);
  if (v6 >= v7 >> 7) {
    unint64_t v8 = v7 >> 7;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 >> 7)
  {
    *(void *)(a1 + 32) = v7 - (v8 << 7);
    if (!v8) {
      return;
    }
    while (1)
    {
      unint64_t v15 = *(void **)(a1 + 8);
      uint64_t v16 = (char *)(v15 + 1);
      uint64_t v17 = *v15;
      *(void *)(a1 + 8) = v15 + 1;
      if (v3 == *(char **)(a1 + 24))
      {
        uint64_t v18 = *(char **)a1;
        if ((unint64_t)v16 <= *(void *)a1)
        {
          unint64_t v24 = (v3 - v18) >> 2;
          if (v3 == v18) {
            unint64_t v24 = 1;
          }
          if (v24 >> 61) {
            goto LABEL_161;
          }
          unint64_t v25 = v24 >> 2;
          uint64_t v26 = 8 * v24;
          unint64_t v27 = (char *)operator new(8 * v24);
          uint64_t v28 = &v27[8 * v25];
          int64_t v30 = v3 - v16;
          BOOL v29 = v3 == v16;
          long long v3 = v28;
          if (!v29)
          {
            long long v3 = &v28[v30 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v31 = v30 - 8;
            if ((unint64_t)(v30 - 8) < 0x38)
            {
              uint64_t v32 = &v27[8 * v25];
              goto LABEL_39;
            }
            uint64_t v32 = &v27[8 * v25];
            if ((unint64_t)(v32 - v16) < 0x20) {
              goto LABEL_167;
            }
            uint64_t v33 = (v31 >> 3) + 1;
            uint64_t v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v32 = &v28[v34];
            v16 += v34;
            uint64_t v35 = (long long *)(v15 + 3);
            uint64_t v36 = &v27[8 * v25 + 16];
            uint64_t v37 = v33 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v38 = *v35;
              *((_OWORD *)v36 - 1) = *(v35 - 1);
              *(_OWORD *)uint64_t v36 = v38;
              v35 += 2;
              v36 += 32;
              v37 -= 4;
            }
            while (v37);
            if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_167:
              do
              {
LABEL_39:
                uint64_t v39 = *(void *)v16;
                v16 += 8;
                *(void *)uint64_t v32 = v39;
                v32 += 8;
              }
              while (v32 != v3);
            }
          }
          *(void *)a1 = v27;
          *(void *)(a1 + 8) = v28;
          *(void *)(a1 + 16) = v3;
          *(void *)(a1 + 24) = &v27[v26];
          if (v18)
          {
            operator delete(v18);
            long long v3 = *(char **)(a1 + 16);
          }
          goto LABEL_21;
        }
        uint64_t v19 = (uint64_t)&v16[-*(void *)a1] >> 3;
        if (v19 >= -1) {
          uint64_t v20 = v19 + 1;
        }
        else {
          uint64_t v20 = v19 + 2;
        }
        uint64_t v21 = v20 >> 1;
        uint64_t v22 = &v16[-8 * (v20 >> 1)];
        int64_t v23 = v3 - v16;
        if (v3 != v16)
        {
          memmove(&v16[-8 * (v20 >> 1)], v16, v3 - v16);
          long long v3 = *(char **)(a1 + 8);
        }
        uint64_t v14 = &v3[-8 * v21];
        long long v3 = &v22[v23];
        *(void *)(a1 + 8) = v14;
        *(void *)(a1 + 16) = &v22[v23];
      }
LABEL_21:
      *(void *)long long v3 = v17;
      long long v3 = (char *)(*(void *)(a1 + 16) + 8);
      *(void *)(a1 + 16) = v3;
      if (!--v8) {
        return;
      }
    }
  }
  unint64_t v9 = v6 - v8;
  uint64_t v10 = *(void *)(a1 + 24) - *(void *)a1;
  uint64_t v11 = v4 >> 3;
  if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
  {
    if (v9)
    {
      while (*(void *)(a1 + 24) != *(void *)(a1 + 16))
      {
        unint64_t v145 = operator new(0x1000uLL);
        sub_22368((char **)a1, &v145);
        --v6;
        if (!--v9) {
          goto LABEL_136;
        }
      }
      for (uint64_t i = 0; i != v9; ++i)
      {
        unint64_t v145 = operator new(0x1000uLL);
        sub_224F8((void **)a1, &v145);
        if (*(void *)(a1 + 16) - *(void *)(a1 + 8) == 8) {
          uint64_t v116 = 127;
        }
        else {
          uint64_t v116 = 128;
        }
        uint64_t v117 = v116 + *(void *)(a1 + 32);
        *(void *)(a1 + 32) = v117;
      }
      unint64_t v8 = v6;
      *(void *)(a1 + 32) = v117 - (v6 << 7);
      if (!v6) {
        return;
      }
    }
    else
    {
LABEL_136:
      *(void *)(a1 + 32) -= v8 << 7;
      if (!v8) {
        return;
      }
    }
    unint64_t v118 = *(char **)(a1 + 16);
    while (1)
    {
      BOOL v120 = *(void **)(a1 + 8);
      BOOL v121 = (char *)(v120 + 1);
      uint64_t v122 = *v120;
      *(void *)(a1 + 8) = v120 + 1;
      if (v118 == *(char **)(a1 + 24))
      {
        unint64_t v123 = *(char **)a1;
        if ((unint64_t)v121 <= *(void *)a1)
        {
          unint64_t v129 = (v118 - v123) >> 2;
          if (v118 == v123) {
            unint64_t v129 = 1;
          }
          if (v129 >> 61) {
            goto LABEL_161;
          }
          unint64_t v130 = v129 >> 2;
          uint64_t v131 = 8 * v129;
          unint64_t v132 = (char *)operator new(8 * v129);
          BOOL v133 = &v132[8 * v130];
          int64_t v134 = v118 - v121;
          BOOL v29 = v118 == v121;
          unint64_t v118 = v133;
          if (!v29)
          {
            unint64_t v118 = &v133[v134 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v135 = v134 - 8;
            if ((unint64_t)(v134 - 8) < 0x38)
            {
              unint64_t v136 = &v132[8 * v130];
              goto LABEL_157;
            }
            unint64_t v136 = &v132[8 * v130];
            if ((unint64_t)(v136 - v121) < 0x20) {
              goto LABEL_168;
            }
            uint64_t v137 = (v135 >> 3) + 1;
            uint64_t v138 = 8 * (v137 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v136 = &v133[v138];
            v121 += v138;
            __n128 v139 = (long long *)(v120 + 3);
            unint64_t v140 = &v132[8 * v130 + 16];
            uint64_t v141 = v137 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v142 = *v139;
              *((_OWORD *)v140 - 1) = *(v139 - 1);
              *(_OWORD *)unint64_t v140 = v142;
              v139 += 2;
              v140 += 32;
              v141 -= 4;
            }
            while (v141);
            if (v137 != (v137 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_168:
              do
              {
LABEL_157:
                uint64_t v143 = *(void *)v121;
                v121 += 8;
                *(void *)unint64_t v136 = v143;
                v136 += 8;
              }
              while (v136 != v118);
            }
          }
          *(void *)a1 = v132;
          *(void *)(a1 + 8) = v133;
          *(void *)(a1 + 16) = v118;
          *(void *)(a1 + 24) = &v132[v131];
          if (v123)
          {
            operator delete(v123);
            unint64_t v118 = *(char **)(a1 + 16);
          }
          goto LABEL_139;
        }
        uint64_t v124 = (uint64_t)&v121[-*(void *)a1] >> 3;
        if (v124 >= -1) {
          uint64_t v125 = v124 + 1;
        }
        else {
          uint64_t v125 = v124 + 2;
        }
        uint64_t v126 = v125 >> 1;
        BOOL v127 = &v121[-8 * (v125 >> 1)];
        int64_t v128 = v118 - v121;
        if (v118 != v121)
        {
          memmove(&v121[-8 * (v125 >> 1)], v121, v118 - v121);
          unint64_t v118 = *(char **)(a1 + 8);
        }
        unint64_t v119 = &v118[-8 * v126];
        unint64_t v118 = &v127[v128];
        *(void *)(a1 + 8) = v119;
        *(void *)(a1 + 16) = &v127[v128];
      }
LABEL_139:
      *(void *)unint64_t v118 = v122;
      unint64_t v118 = (char *)(*(void *)(a1 + 16) + 8);
      *(void *)(a1 + 16) = v118;
      if (!--v8) {
        return;
      }
    }
  }
  if (v10 >> 2 <= v9 + v11) {
    unint64_t v12 = v9 + v11;
  }
  else {
    unint64_t v12 = v10 >> 2;
  }
  if (v12)
  {
    if (v12 >> 61) {
LABEL_161:
    }
      sub_188D718();
    uint64_t v13 = (char *)operator new(8 * v12);
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v144 = v8 << 7;
  unsigned __int8 v40 = &v13[8 * (v11 - v8)];
  uint64_t v41 = &v13[8 * v12];
  long long v42 = v40;
  uint64_t v43 = v13;
  do
  {
    long long v44 = operator new(0x1000uLL);
    if (v42 != v41) {
      goto LABEL_49;
    }
    if (v40 > v43)
    {
      uint64_t v45 = v43;
      uint64_t v46 = (v40 - v43) >> 3;
      if (v46 >= -1) {
        uint64_t v47 = v46 + 1;
      }
      else {
        uint64_t v47 = v46 + 2;
      }
      uint64_t v48 = v47 >> 1;
      __n128 v49 = &v40[-8 * (v47 >> 1)];
      uint64_t v50 = v41;
      if (v41 != v40)
      {
        memmove(v49, v40, v41 - v40);
        uint64_t v50 = v40;
      }
      long long v42 = &v49[v41 - v40];
      unsigned __int8 v40 = &v50[-8 * v48];
      uint64_t v43 = v45;
      goto LABEL_49;
    }
    if (v41 == v43) {
      unint64_t v51 = 1;
    }
    else {
      unint64_t v51 = (v41 - v43) >> 2;
    }
    if (v51 >> 61) {
      sub_188D718();
    }
    int v52 = (char *)operator new(8 * v51);
    int v53 = v43;
    unint64_t v54 = v51 >> 2;
    uint64_t v55 = &v52[8 * (v51 >> 2)];
    long long v42 = v55;
    int64_t v56 = v41 - v40;
    if (v41 != v40)
    {
      long long v42 = &v55[v56 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v57 = v56 - 8;
      if (v57 >= 0x38 && (uint64_t v58 = 8 * v54, (unint64_t)(&v52[8 * v54] - v40) >= 0x20))
      {
        uint64_t v62 = (v57 >> 3) + 1;
        uint64_t v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v59 = &v55[v63];
        uint64_t v60 = &v40[v63];
        uint64_t v64 = (long long *)(v40 + 16);
        BOOL v65 = &v52[v58 + 16];
        uint64_t v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v67 = *v64;
          *((_OWORD *)v65 - 1) = *(v64 - 1);
          *(_OWORD *)BOOL v65 = v67;
          v64 += 2;
          v65 += 32;
          v66 -= 4;
        }
        while (v66);
        if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_66;
        }
      }
      else
      {
        uint64_t v59 = &v52[8 * (v51 >> 2)];
        uint64_t v60 = v40;
      }
      do
      {
        uint64_t v61 = *(void *)v60;
        v60 += 8;
        *(void *)uint64_t v59 = v61;
        v59 += 8;
      }
      while (v59 != v42);
    }
LABEL_66:
    uint64_t v41 = &v52[8 * v51];
    if (v53) {
      operator delete(v53);
    }
    unsigned __int8 v40 = &v52[8 * (v51 >> 2)];
    uint64_t v43 = v52;
LABEL_49:
    *(void *)long long v42 = v44;
    v42 += 8;
    --v9;
  }
  while (v9);
  uint64_t v68 = *(void **)(a1 + 8);
  if (v8)
  {
    while (1)
    {
      if (v42 == v41)
      {
        if (v40 <= v43)
        {
          if (v41 == v43) {
            unint64_t v78 = 1;
          }
          else {
            unint64_t v78 = (v41 - v43) >> 2;
          }
          if (v78 >> 61) {
            sub_188D718();
          }
          __n128 v79 = (char *)operator new(8 * v78);
          int v80 = v79;
          unint64_t v81 = v78 >> 2;
          std::string v69 = &v79[8 * (v78 >> 2)];
          long long v42 = v69;
          int64_t v82 = v41 - v40;
          if (v41 != v40)
          {
            long long v42 = &v69[v82 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v83 = v82 - 8;
            if (v83 < 0x38 || (uint64_t v84 = 8 * v81, (unint64_t)(&v79[8 * v81] - v40) < 0x20))
            {
              std::string v85 = &v79[8 * (v78 >> 2)];
              __n128 v86 = v40;
              goto LABEL_98;
            }
            uint64_t v88 = (v83 >> 3) + 1;
            uint64_t v89 = 8 * (v88 & 0x3FFFFFFFFFFFFFFCLL);
            std::string v85 = &v69[v89];
            __n128 v86 = &v40[v89];
            long long v90 = (long long *)(v40 + 16);
            uint64_t v91 = &v79[v84 + 16];
            uint64_t v92 = v88 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v93 = *v90;
              *((_OWORD *)v91 - 1) = *(v90 - 1);
              *(_OWORD *)uint64_t v91 = v93;
              v90 += 2;
              v91 += 32;
              v92 -= 4;
            }
            while (v92);
            if (v88 != (v88 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_98:
                uint64_t v87 = *(void *)v86;
                v86 += 8;
                *(void *)std::string v85 = v87;
                v85 += 8;
              }
              while (v85 != v42);
            }
          }
          uint64_t v41 = &v79[8 * v78];
          if (v43) {
            operator delete(v43);
          }
          uint64_t v43 = v80;
          goto LABEL_81;
        }
        uint64_t v72 = v43;
        uint64_t v73 = (v40 - v43) >> 3;
        if (v73 >= -1) {
          uint64_t v74 = v73 + 1;
        }
        else {
          uint64_t v74 = v73 + 2;
        }
        uint64_t v75 = v74 >> 1;
        long long v76 = &v40[-8 * (v74 >> 1)];
        unint64_t v77 = v41;
        if (v41 != v40)
        {
          memmove(v76, v40, v41 - v40);
          unint64_t v77 = v40;
        }
        long long v42 = &v76[v41 - v40];
        std::string v69 = &v77[-8 * v75];
        uint64_t v43 = v72;
      }
      else
      {
        std::string v69 = v40;
      }
LABEL_81:
      *(void *)long long v42 = *v68;
      v42 += 8;
      uint64_t v68 = (void *)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v68;
      unsigned __int8 v40 = v69;
      if (!--v8) {
        goto LABEL_75;
      }
    }
  }
  std::string v69 = v40;
LABEL_75:
  char v70 = *(void **)(a1 + 16);
  if (v70 != v68)
  {
    do
    {
      if (v69 == v43)
      {
        if (v42 >= v41)
        {
          if (v41 == v43) {
            unint64_t v100 = 1;
          }
          else {
            unint64_t v100 = (v41 - v43) >> 2;
          }
          if (v100 >> 61) {
            sub_188D718();
          }
          unint64_t v101 = (char *)operator new(8 * v100);
          char v97 = v101;
          unint64_t v102 = (v100 + 3) >> 2;
          std::string v69 = &v101[8 * v102];
          int64_t v103 = v42 - v43;
          BOOL v29 = v42 == v43;
          long long v42 = v69;
          if (!v29)
          {
            long long v42 = &v69[v103 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v104 = v103 - 8;
            unint64_t v105 = &v101[8 * v102];
            unint64_t v106 = v43;
            if (v104 < 0x38) {
              goto LABEL_169;
            }
            uint64_t v107 = 8 * v102;
            unint64_t v105 = &v101[8 * v102];
            unint64_t v106 = v43;
            if ((unint64_t)(v105 - v43) < 0x20) {
              goto LABEL_169;
            }
            uint64_t v108 = (v104 >> 3) + 1;
            uint64_t v109 = 8 * (v108 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v105 = &v69[v109];
            unint64_t v106 = &v43[v109];
            uint64_t v110 = (long long *)(v43 + 16);
            uint64_t v111 = &v101[v107 + 16];
            uint64_t v112 = v108 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v113 = *v110;
              *((_OWORD *)v111 - 1) = *(v110 - 1);
              *(_OWORD *)uint64_t v111 = v113;
              v110 += 2;
              v111 += 32;
              v112 -= 4;
            }
            while (v112);
            if (v108 != (v108 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_169:
              do
              {
                uint64_t v114 = *(void *)v106;
                v106 += 8;
                *(void *)unint64_t v105 = v114;
                v105 += 8;
              }
              while (v105 != v42);
            }
          }
          uint64_t v41 = &v101[8 * v100];
          if (v43) {
            operator delete(v43);
          }
        }
        else
        {
          uint64_t v95 = (v41 - v42) >> 3;
          if (v95 >= -1) {
            uint64_t v96 = v95 + 1;
          }
          else {
            uint64_t v96 = v95 + 2;
          }
          char v97 = v43;
          uint64_t v98 = v96 >> 1;
          std::string v69 = &v97[8 * (v96 >> 1)];
          uint64_t v99 = v97;
          if (v42 != v97)
          {
            memmove(v69, v97, v42 - v97);
            uint64_t v99 = v42;
          }
          long long v42 = &v99[8 * v98];
        }
        uint64_t v43 = v97;
      }
      uint64_t v94 = *--v70;
      *((void *)v69 - 1) = v94;
      v69 -= 8;
    }
    while (v70 != *(void **)(a1 + 8));
  }
  int64_t v71 = *(char **)a1;
  *(void *)a1 = v43;
  *(void *)(a1 + 8) = v69;
  *(void *)(a1 + 16) = v42;
  *(void *)(a1 + 24) = v41;
  *(void *)(a1 + 32) -= v144;
  if (v71)
  {
    operator delete(v71);
  }
}

void sub_958D0C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_958D58()
{
}

uint64_t sub_958D78(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 776);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 784);
    uint64_t v4 = *(void **)(a1 + 776);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 776);
    }
    *(void *)(a1 + 784) = v2;
    operator delete(v4);
  }
  int v5 = *(_DWORD *)(a1 + 768);
  if (v5 == 1) {
    return sub_4F4A98(a1);
  }
  if (v5 || (*(char *)(a1 + 23) & 0x80000000) == 0) {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_958E38(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xEF7BDEF7BDEF7BDFLL * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x84210842108421) {
    sub_2E00();
  }
  if (0xDEF7BDEF7BDEF7BELL * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0xDEF7BDEF7BDEF7BELL * ((a1[2] - *a1) >> 4);
  }
  if (0xEF7BDEF7BDEF7BDFLL * ((a1[2] - *a1) >> 4) >= 0x42108421084210) {
    unint64_t v6 = 0x84210842108421;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x84210842108421) {
      sub_188D718();
    }
    unint64_t v7 = (char *)operator new(496 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  uint64_t v14 = (uint64_t)&v7[496 * v3];
  unint64_t v15 = &v7[496 * v6];
  sub_598F14(v14, a2);
  uint64_t v8 = v14;
  uint64_t v9 = v14 + 496;
  uint64_t v11 = (char *)*a1;
  uint64_t v10 = (char *)a1[1];
  if (v10 == (char *)*a1)
  {
    *a1 = v14;
    a1[1] = v9;
    a1[2] = (uint64_t)v15;
  }
  else
  {
    do
    {
      v10 -= 496;
      uint64_t v8 = sub_4F4498(v8 - 496, (uint64_t)v10);
    }
    while (v10 != v11);
    unint64_t v12 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    *a1 = v8;
    a1[1] = v9;
    a1[2] = (uint64_t)v15;
    if (v10 != v12)
    {
      do
      {
        v10 -= 496;
        sub_4F2FF8((uint64_t)v10);
      }
      while (v10 != v12);
      uint64_t v10 = v12;
    }
  }
  if (v10) {
    operator delete(v10);
  }
  return v14 + 496;
}

void sub_958FB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4F4D64((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_958FCC(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xEF7BDEF7BDEF7BDFLL * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x84210842108421) {
    sub_2E00();
  }
  if (0xDEF7BDEF7BDEF7BELL * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0xDEF7BDEF7BDEF7BELL * ((a1[2] - *a1) >> 4);
  }
  if (0xEF7BDEF7BDEF7BDFLL * ((a1[2] - *a1) >> 4) >= 0x42108421084210) {
    unint64_t v6 = 0x84210842108421;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x84210842108421) {
      sub_188D718();
    }
    unint64_t v7 = (char *)operator new(496 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  uint64_t v14 = (uint64_t)&v7[496 * v3];
  unint64_t v15 = &v7[496 * v6];
  sub_598F14(v14, a2);
  uint64_t v8 = v14;
  uint64_t v9 = v14 + 496;
  uint64_t v11 = (char *)*a1;
  uint64_t v10 = (char *)a1[1];
  if (v10 == (char *)*a1)
  {
    *a1 = v14;
    a1[1] = v9;
    a1[2] = (uint64_t)v15;
  }
  else
  {
    do
    {
      v10 -= 496;
      uint64_t v8 = sub_4F4498(v8 - 496, (uint64_t)v10);
    }
    while (v10 != v11);
    unint64_t v12 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    *a1 = v8;
    a1[1] = v9;
    a1[2] = (uint64_t)v15;
    if (v10 != v12)
    {
      do
      {
        v10 -= 496;
        sub_4F2FF8((uint64_t)v10);
      }
      while (v10 != v12);
      uint64_t v10 = v12;
    }
  }
  if (v10) {
    operator delete(v10);
  }
  return v14 + 496;
}

void sub_95914C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4F4D64((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_959160(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *a1;
  uint64_t v6 = (a2 - *a1) / 496;
  uint64_t v7 = *a1 + 496 * v6;
  if (a5 < 1) {
    return v7;
  }
  uint64_t v9 = a3;
  uint64_t v11 = a1[2];
  unint64_t v12 = a1[1];
  if ((uint64_t)(0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(v11 - v12) >> 4)) >= a5)
  {
    if ((uint64_t)(0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(v12 - v7) >> 4)) >= a5)
    {
      uint64_t v18 = a3 + 496 * a5;
      uint64_t v20 = a1[1];
    }
    else
    {
      uint64_t v18 = a3 + 16 * ((uint64_t)(v12 - v7) >> 4);
      if (v18 == a4)
      {
        uint64_t v20 = a1[1];
        a1[1] = v12;
        if ((uint64_t)(v12 - v7) < 1) {
          return v7;
        }
      }
      else
      {
        uint64_t v19 = 0;
        do
        {
          sub_598F14(v12 + v19, v18 + v19);
          v19 += 496;
        }
        while (v18 + v19 != a4);
        uint64_t v20 = v12 + v19;
        a1[1] = v12 + v19;
        if ((uint64_t)(v12 - v7) < 1) {
          return v7;
        }
      }
    }
    uint64_t v21 = v7 + 496 * a5;
    unint64_t v22 = v20 - 496 * a5;
    uint64_t v23 = v20;
    if (v22 < v12)
    {
      uint64_t v23 = v20;
      do
      {
        uint64_t v24 = sub_4F4498(v23, v22);
        v22 += 496;
        uint64_t v23 = v24 + 496;
      }
      while (v22 < v12);
    }
    a1[1] = v23;
    if (v20 != v21)
    {
      uint64_t v25 = v20 - 496;
      uint64_t v26 = 16 * ((v20 - v21) >> 4);
      do
      {
        sub_4D5C2C(v25, 496 * v6 + v5 - 496 + v26);
        v25 -= 496;
        v26 -= 496;
      }
      while (v26);
    }
    if (v18 != v9)
    {
      uint64_t v27 = v7;
      do
      {
        sub_5A53C4(v27, v9);
        v9 += 496;
        v27 += 496;
      }
      while (v9 != v18);
    }
    return v7;
  }
  unint64_t v13 = a5 - 0x1084210842108421 * ((uint64_t)(v12 - v5) >> 4);
  if (v13 > 0x84210842108421) {
    sub_2E00();
  }
  unint64_t v14 = 0xEF7BDEF7BDEF7BDFLL * ((v11 - v5) >> 4);
  if (2 * v14 > v13) {
    unint64_t v13 = 2 * v14;
  }
  if (v14 >= 0x42108421084210) {
    unint64_t v15 = 0x84210842108421;
  }
  else {
    unint64_t v15 = v13;
  }
  if (v15)
  {
    if (v15 > 0x84210842108421) {
      sub_188D718();
    }
    uint64_t v16 = (char *)operator new(496 * v15);
  }
  else
  {
    uint64_t v16 = 0;
  }
  uint64_t v29 = (uint64_t)&v16[496 * v6];
  uint64_t v38 = v29;
  uint64_t v39 = &v16[496 * v15];
  uint64_t v30 = 496 * a5;
  uint64_t v31 = v29 + 496 * a5;
  do
  {
    sub_598F14(v29, v9);
    v29 += 496;
    v9 += 496;
    v30 -= 496;
  }
  while (v30);
  uint64_t v28 = v38;
  uint64_t v32 = *a1;
  uint64_t v33 = v38;
  if (*a1 != v7)
  {
    uint64_t v34 = v7;
    uint64_t v33 = v38;
    do
    {
      v33 -= 496;
      v34 -= 496;
      sub_4F4498(v33, v34);
    }
    while (v34 != v32);
  }
  uint64_t v35 = a1[1];
  if (v35 != v7)
  {
    do
    {
      sub_4F4498(v31, v7);
      v7 += 496;
      v31 += 496;
    }
    while (v7 != v35);
    uint64_t v7 = a1[1];
  }
  uint64_t v36 = (void *)*a1;
  *a1 = v33;
  a1[1] = v31;
  a1[2] = (uint64_t)v39;
  while ((void *)v7 != v36)
  {
    v7 -= 496;
    sub_4F2FF8(v7);
  }
  if (v36) {
    operator delete(v36);
  }
  return v28;
}

void sub_9594F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4F4D64((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_959510(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t v9 = *a1;
  if (0xEF7BDEF7BDEF7BDFLL * ((v8 - *a1) >> 4) >= a4)
  {
    uint64_t result = a1[1];
    if (0xEF7BDEF7BDEF7BDFLL * ((result - v9) >> 4) >= a4)
    {
      if (a2 == a3)
      {
        uint64_t v23 = v9;
      }
      else
      {
        uint64_t v23 = v9;
        do
        {
          sub_5A53C4(v9, v6);
          v6 += 496;
          v9 += 496;
          v23 += 496;
        }
        while (v6 != a3);
        uint64_t result = a1[1];
      }
      while (result != v23)
        uint64_t result = sub_4F2FF8(result - 496);
      a1[1] = v23;
    }
    else
    {
      uint64_t v19 = a2 + 16 * ((result - v9) >> 4);
      if (result != v9)
      {
        uint64_t v20 = 16 * ((result - v9) >> 4);
        do
        {
          uint64_t result = sub_5A53C4(v9, v6);
          v6 += 496;
          v9 += 496;
          v20 -= 496;
        }
        while (v20);
        uint64_t v9 = a1[1];
      }
      uint64_t v21 = v9;
      if (v19 != a3)
      {
        uint64_t v22 = 0;
        do
        {
          uint64_t result = sub_598F14(v9 + v22, v19 + v22);
          v22 += 496;
        }
        while (v19 + v22 != a3);
        uint64_t v21 = v9 + v22;
      }
      a1[1] = v21;
    }
  }
  else
  {
    if (v9)
    {
      uint64_t v10 = a1[1];
      uint64_t v11 = (void *)v9;
      if (v10 != v9)
      {
        do
          uint64_t v10 = sub_4F2FF8(v10 - 496);
        while (v10 != v9);
        uint64_t v11 = (void *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x84210842108421) {
      goto LABEL_37;
    }
    unint64_t v12 = 0xEF7BDEF7BDEF7BDFLL * (v8 >> 4);
    uint64_t v13 = 2 * v12;
    if (2 * v12 <= a4) {
      uint64_t v13 = a4;
    }
    unint64_t v14 = v12 >= 0x42108421084210 ? 0x84210842108421 : v13;
    if (v14 > 0x84210842108421) {
LABEL_37:
    }
      sub_2E00();
    uint64_t v15 = 496 * v14;
    uint64_t result = (uint64_t)operator new(496 * v14);
    uint64_t v17 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = result + v15;
    if (v6 != a3)
    {
      uint64_t v18 = 0;
      do
      {
        uint64_t result = sub_598F14(v17 + v18, v6 + v18);
        v18 += 496;
      }
      while (v6 + v18 != a3);
      v17 += v18;
    }
    a1[1] = v17;
  }
  return result;
}

void sub_9597B8(void *a1, unint64_t a2)
{
  if (0x8F5C28F5C28F5C29 * ((uint64_t)(a1[2] - *a1) >> 5) < a2)
  {
    if (a2 >= 0x51EB851EB851ECLL) {
      sub_2E00();
    }
    uint64_t v3 = a1[1] - *a1;
    uint64_t v16 = a1 + 2;
    uint64_t v4 = 800 * a2;
    std::string __p = operator new(800 * a2);
    uint64_t v13 = (char *)__p + v3;
    unint64_t v14 = (char *)__p + v3;
    uint64_t v15 = (char *)__p + v4;
    sub_4F555C((uint64_t)a1, &__p);
    uint64_t v5 = v13;
    while (1)
    {
      uint64_t v6 = v14;
      if (v14 == v5) {
        break;
      }
      uint64_t v7 = (void **)(v14 - 800);
      v14 -= 800;
      uint64_t v8 = *((void *)v6 - 3);
      if (v8)
      {
        uint64_t v9 = *((void *)v6 - 2);
        uint64_t v10 = (void *)*((void *)v6 - 3);
        if (v9 != v8)
        {
          do
          {
            if (*(char *)(v9 - 1) < 0) {
              operator delete(*(void **)(v9 - 24));
            }
            v9 -= 24;
          }
          while (v9 != v8);
          uint64_t v10 = (void *)*((void *)v6 - 3);
        }
        *((void *)v6 - 2) = v8;
        operator delete(v10);
      }
      int v11 = *((_DWORD *)v6 - 8);
      if (v11 == 1)
      {
        sub_4F4A98((uint64_t)(v6 - 800));
      }
      else if (!v11 && *(v6 - 777) < 0)
      {
        operator delete(*v7);
      }
    }
    if (__p) {
      operator delete(__p);
    }
  }
}

void sub_959918(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4F5698((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_95992C(void **a1, void **a2, uint64_t *a3, _DWORD *a4)
{
  if (a1 != a2)
  {
    uint64_t v6 = a1;
    do
    {
      uint64_t v7 = *v6;
      std::string __p = 0;
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      v13[0] = v7;
      int v15 = 2;
      uint64_t v8 = sub_959A88(a3, a4, (uint64_t)v13);
      uint64_t v9 = (void **)__p;
      if (__p)
      {
        uint64_t v10 = v17;
        int v11 = __p;
        if (v17 != __p)
        {
          do
          {
            if (*((char *)v10 - 1) < 0) {
              operator delete(*(v10 - 3));
            }
            v10 -= 3;
          }
          while (v10 != v9);
          int v11 = __p;
        }
        uint64_t v17 = v9;
        operator delete(v11);
      }
      if (v15 == 1)
      {
        sub_4F4A98((uint64_t)v13);
      }
      else if (!v15 && v14 < 0)
      {
        operator delete(v13[0]);
      }
      a4 = (_DWORD *)(v8 + 800);
      ++v6;
    }
    while (v6 != a2);
  }
  return a3;
}

void sub_959A74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_958D78((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_959A88(uint64_t *a1, _DWORD *__dst, uint64_t a3)
{
  uint64_t v4 = (uint64_t)__dst;
  uint64_t v7 = *a1;
  uint64_t v6 = (_DWORD *)a1[1];
  unint64_t v8 = 0x8F5C28F5C28F5C29 * (((uint64_t)__dst - *a1) >> 5);
  unint64_t v9 = a1[2];
  if ((unint64_t)v6 >= v9)
  {
    unint64_t v15 = 0x8F5C28F5C28F5C29 * (((uint64_t)v6 - v7) >> 5) + 1;
    if (v15 > 0x51EB851EB851EBLL) {
      sub_2E00();
    }
    unint64_t v16 = 0x8F5C28F5C28F5C29 * ((uint64_t)(v9 - v7) >> 5);
    if (2 * v16 > v15) {
      unint64_t v15 = 2 * v16;
    }
    if (v16 >= 0x28F5C28F5C28F5) {
      unint64_t v17 = 0x51EB851EB851EBLL;
    }
    else {
      unint64_t v17 = v15;
    }
    uint64_t v34 = a1 + 2;
    if (v17)
    {
      if (v17 > 0x51EB851EB851EBLL) {
        sub_188D718();
      }
      uint64_t v18 = (char *)operator new(800 * v17);
    }
    else
    {
      uint64_t v18 = 0;
    }
    std::string __p = v18;
    uint64_t v31 = &v18[800 * v8];
    uint64_t v32 = v31;
    uint64_t v33 = &v18[800 * v17];
    sub_959FA0((uint64_t)&__p, a3);
    uint64_t v4 = sub_95A398(a1, &__p, v4);
    uint64_t v21 = v31;
    while (1)
    {
      uint64_t v22 = v32;
      if (v32 == v21) {
        break;
      }
      uint64_t v23 = (void **)(v32 - 800);
      v32 -= 800;
      uint64_t v24 = *((void *)v22 - 3);
      if (v24)
      {
        uint64_t v25 = *((void *)v22 - 2);
        uint64_t v26 = (void *)*((void *)v22 - 3);
        if (v25 != v24)
        {
          do
          {
            if (*(char *)(v25 - 1) < 0) {
              operator delete(*(void **)(v25 - 24));
            }
            v25 -= 24;
          }
          while (v25 != v24);
          uint64_t v26 = (void *)*((void *)v22 - 3);
        }
        *((void *)v22 - 2) = v24;
        operator delete(v26);
      }
      int v27 = *((_DWORD *)v22 - 8);
      if (v27 == 1)
      {
        sub_4F4A98((uint64_t)(v22 - 800));
      }
      else if (!v27 && *(v22 - 777) < 0)
      {
        operator delete(*v23);
      }
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__dst == v6)
  {
    __dst[192] = *(_DWORD *)(a3 + 768);
    int v19 = *(_DWORD *)(a3 + 768);
    switch(v19)
    {
      case 2:
        *(void *)std::string __dst = *(void *)a3;
        break;
      case 1:
        sub_4F56D0((uint64_t)__dst, a3);
        break;
      case 0:
        if (*(char *)(a3 + 23) < 0)
        {
          sub_4200(__dst, *(void **)a3, *(void *)(a3 + 8));
        }
        else
        {
          long long v20 = *(_OWORD *)a3;
          *((void *)__dst + 2) = *(void *)(a3 + 16);
          *(_OWORD *)std::string __dst = v20;
        }
        break;
    }
    unint64_t v28 = v7 + 800 * v8;
    *(void *)(v28 + 792) = 0;
    *(_OWORD *)(v28 + 776) = 0u;
    *(_OWORD *)(v28 + 776) = *(_OWORD *)(a3 + 776);
    *(void *)(v28 + 792) = *(void *)(a3 + 792);
    *(void *)(a3 + 792) = 0;
    *(_OWORD *)(a3 + 776) = 0u;
    a1[1] = v4 + 800;
  }
  else
  {
    sub_959DE8((uint64_t)a1, (uint64_t)__dst, (unint64_t)v6, (uint64_t)(__dst + 200));
    sub_95A5C0(v4, a3);
    uint64_t v10 = (void **)(v7 + 800 * v8 + 776);
    int v11 = *v10;
    if (*v10)
    {
      unint64_t v12 = (void **)(v7 + 800 * v8 + 784);
      uint64_t v13 = (void **)*v12;
      char v14 = *v10;
      if (*v12 != v11)
      {
        do
        {
          if (*((char *)v13 - 1) < 0) {
            operator delete(*(v13 - 3));
          }
          v13 -= 3;
        }
        while (v13 != v11);
        char v14 = *v10;
      }
      char *v12 = v11;
      operator delete(v14);
      *uint64_t v10 = 0;
      *(void *)(v7 + 800 * v8 + 784) = 0;
      *(void *)(v7 + 800 * v8 + 792) = 0;
    }
    *(_OWORD *)uint64_t v10 = *(_OWORD *)(a3 + 776);
    *(void *)(v7 + 800 * v8 + 792) = *(void *)(a3 + 792);
    *(void *)(a3 + 792) = 0;
    *(_OWORD *)(a3 + 776) = 0u;
  }
  return v4;
}

void sub_959DD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4F5698((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_959DE8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a1 + 8);
  unint64_t v8 = a2 + v7 - a4;
  uint64_t v9 = v7;
  if (v8 < a3)
  {
    uint64_t v11 = 0;
    do
    {
      unint64_t v15 = (void *)(v8 + v11);
      uint64_t v16 = v7 + v11;
      *(_DWORD *)(v7 + v11 + 768) = *(_DWORD *)(v8 + v11 + 768);
      int v17 = *(_DWORD *)(v8 + v11 + 768);
      switch(v17)
      {
        case 2:
          *(void *)uint64_t v16 = *v15;
          break;
        case 1:
          sub_4F56D0(v16, (uint64_t)v15);
          break;
        case 0:
          if (*(char *)(v8 + v11 + 23) < 0)
          {
            sub_4200((unsigned char *)v16, *(void **)(v8 + v11), *(void *)(v8 + v11 + 8));
          }
          else
          {
            __n128 result = *(__n128 *)v15;
            *(void *)(v16 + 16) = v15[2];
            *(__n128 *)uint64_t v16 = result;
          }
          break;
      }
      unint64_t v12 = (void *)(v7 + v11);
      uint64_t v13 = v8 + v11;
      v12[99] = 0;
      result.n128_u64[0] = 0;
      *(_OWORD *)(v7 + v11 + 776) = 0u;
      v12[97] = *(void *)(v8 + v11 + 776);
      v12[98] = *(void *)(v8 + v11 + 784);
      v12[99] = *(void *)(v8 + v11 + 792);
      *(void *)(v13 + 792) = 0;
      *(_OWORD *)(v13 + 776) = 0u;
      v11 += 800;
    }
    while (v8 + v11 < a3);
    uint64_t v9 = v7 + v11;
  }
  *(void *)(a1 + 8) = v9;
  if (v7 != a4)
  {
    do
    {
      unint64_t v19 = v8 - 800;
      sub_95A5C0(v7 - 800, v8 - 800);
      long long v20 = (void **)(v7 - 24);
      uint64_t v21 = *(void *)(v7 - 24);
      if (v21)
      {
        uint64_t v22 = *(void *)(v7 - 16);
        uint64_t v18 = *(void **)(v7 - 24);
        if (v22 != v21)
        {
          do
          {
            if (*(char *)(v22 - 1) < 0) {
              operator delete(*(void **)(v22 - 24));
            }
            v22 -= 24;
          }
          while (v22 != v21);
          uint64_t v18 = *v20;
        }
        *(void *)(v7 - 16) = v21;
        operator delete(v18);
        *long long v20 = 0;
        *(void *)(v7 - 16) = 0;
        *(void *)(v7 - 8) = 0;
      }
      __n128 result = *(__n128 *)(v8 - 24);
      *(__n128 *)(v7 - 24) = result;
      *(void *)(v7 - 8) = *(void *)(v8 - 8);
      *(void *)(v8 - 24) = 0;
      *(void *)(v8 - 16) = 0;
      *(void *)(v8 - 8) = 0;
      v7 -= 800;
      v8 -= 800;
    }
    while (v19 != a2);
  }
  return result;
}

double sub_959FA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 == *(void *)(a1 + 24))
  {
    uint64_t v6 = *(void **)a1;
    uint64_t v5 = *(void **)(a1 + 8);
    if ((unint64_t)v5 <= *(void *)a1)
    {
      unint64_t v16 = 0x1EB851EB851EB852 * ((v4 - (uint64_t)v6) >> 5);
      if ((void *)v4 == v6) {
        unint64_t v16 = 1;
      }
      if (v16 >= 0x51EB851EB851ECLL) {
        sub_188D718();
      }
      unint64_t v17 = v16 >> 2;
      uint64_t v18 = 800 * v16;
      unint64_t v19 = (char *)operator new(800 * v16);
      long long v20 = v19;
      uint64_t v21 = &v19[800 * v17];
      uint64_t v22 = &v19[v18];
      if ((void *)v4 == v5)
      {
        *(void *)a1 = v19;
        *(void *)(a1 + 8) = v21;
        *(void *)(a1 + 16) = v21;
        *(void *)(a1 + 24) = v22;
      }
      else
      {
        unint64_t v23 = 0;
        uint64_t v24 = (v4 - (uint64_t)v5) / 800;
        uint64_t v25 = &v21[800 * v24];
        uint64_t v26 = 800 * v24;
        do
        {
          uint64_t v29 = (uint64_t)&v21[v23];
          uint64_t v30 = &v5[v23 / 8];
          *(_DWORD *)&v21[v23 + 768] = v5[v23 / 8 + 96];
          int v31 = v5[v23 / 8 + 96];
          switch(v31)
          {
            case 2:
              *(void *)uint64_t v29 = *v30;
              break;
            case 1:
              sub_4F56D0(v29, (uint64_t)v30);
              break;
            case 0:
              if (SHIBYTE(v5[v23 / 8 + 2]) < 0)
              {
                sub_4200((unsigned char *)v29, (void *)v5[v23 / 8], v5[v23 / 8 + 1]);
              }
              else
              {
                long long v32 = *(_OWORD *)v30;
                *(void *)(v29 + 16) = v30[2];
                *(_OWORD *)uint64_t v29 = v32;
              }
              break;
          }
          int v27 = &v21[v23];
          unint64_t v28 = &v5[v23 / 8];
          *((void *)v27 + 97) = v5[v23 / 8 + 97];
          *((void *)v27 + 98) = v5[v23 / 8 + 98];
          *((void *)v27 + 99) = v5[v23 / 8 + 99];
          v28[99] = 0;
          *(_OWORD *)(v28 + 97) = 0u;
          v23 += 800;
        }
        while (v26 != v23);
        uint64_t v6 = *(void **)a1;
        uint64_t v35 = *(void ***)(a1 + 8);
        uint64_t v36 = *(void ***)(a1 + 16);
        *(void *)a1 = v20;
        *(void *)(a1 + 8) = v21;
        *(void *)(a1 + 16) = v25;
        *(void *)(a1 + 24) = v22;
        while (v36 != v35)
        {
          uint64_t v37 = v36;
          uint64_t v38 = (void **)*(v36 - 3);
          if (v38)
          {
            uint64_t v39 = (void **)*(v37 - 2);
            unsigned __int8 v40 = v38;
            if (v39 != v38)
            {
              do
              {
                if (*((char *)v39 - 1) < 0) {
                  operator delete(*(v39 - 3));
                }
                v39 -= 3;
              }
              while (v39 != v38);
              unsigned __int8 v40 = (void **)*(v37 - 3);
            }
            *(v37 - 2) = v38;
            operator delete(v40);
          }
          uint64_t v36 = v37 - 100;
          int v41 = *((_DWORD *)v37 - 8);
          if (v41 == 1)
          {
            sub_4F4A98((uint64_t)(v37 - 100));
          }
          else if (!v41 && *((char *)v37 - 777) < 0)
          {
            operator delete(*v36);
          }
        }
      }
      if (v6) {
        operator delete(v6);
      }
      uint64_t v4 = *(void *)(a1 + 16);
      *(_DWORD *)(v4 + 768) = *(_DWORD *)(a2 + 768);
      int v33 = *(_DWORD *)(a2 + 768);
      if (v33 != 2) {
        goto LABEL_34;
      }
LABEL_59:
      *(void *)uint64_t v4 = *(void *)a2;
      goto LABEL_60;
    }
    int64_t v7 = 0x8F5C28F5C28F5C29 * (((uint64_t)v5 - *(void *)a1) >> 5);
    if (v7 >= -1) {
      uint64_t v8 = v7 + 1;
    }
    else {
      uint64_t v8 = v7 + 2;
    }
    uint64_t v9 = v8 >> 1;
    uint64_t v10 = -v9;
    uint64_t v11 = &v5[-100 * v9];
    if (v5 != (void *)v4)
    {
      do
      {
        sub_95A5C0((uint64_t)v11, (uint64_t)v5);
        uint64_t v13 = v11[97];
        if (v13)
        {
          char v14 = (void **)(v11 + 97);
          uint64_t v15 = v11[98];
          unint64_t v12 = (void *)v11[97];
          if (v15 != v13)
          {
            do
            {
              if (*(char *)(v15 - 1) < 0) {
                operator delete(*(void **)(v15 - 24));
              }
              v15 -= 24;
            }
            while (v15 != v13);
            unint64_t v12 = *v14;
          }
          v11[98] = v13;
          operator delete(v12);
          void *v14 = 0;
          v11[98] = 0;
          v11[99] = 0;
        }
        v11[97] = v5[97];
        v11[98] = v5[98];
        v11[99] = v5[99];
        v5[99] = 0;
        *(_OWORD *)(v5 + 97) = 0u;
        v5 += 100;
        v11 += 100;
      }
      while (v5 != (void *)v4);
      uint64_t v4 = *(void *)(a1 + 8);
    }
    *(void *)(a1 + 8) = v4 + 800 * v10;
    *(void *)(a1 + 16) = v11;
    uint64_t v4 = (uint64_t)v11;
  }
  *(_DWORD *)(v4 + 768) = *(_DWORD *)(a2 + 768);
  int v33 = *(_DWORD *)(a2 + 768);
  if (v33 == 2) {
    goto LABEL_59;
  }
LABEL_34:
  if (v33 == 1)
  {
    sub_4F56D0(v4, a2);
  }
  else if (!v33)
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_4200((unsigned char *)v4, *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      long long v34 = *(_OWORD *)a2;
      *(void *)(v4 + 16) = *(void *)(a2 + 16);
      *(_OWORD *)uint64_t v4 = v34;
    }
  }
LABEL_60:
  *(void *)(v4 + 792) = 0;
  double result = 0.0;
  *(_OWORD *)(v4 + 776) = 0u;
  *(void *)(v4 + 776) = *(void *)(a2 + 776);
  *(void *)(v4 + 784) = *(void *)(a2 + 784);
  *(void *)(v4 + 792) = *(void *)(a2 + 792);
  *(void *)(a2 + 792) = 0;
  *(_OWORD *)(a2 + 776) = 0u;
  *(void *)(a1 + 16) += 800;
  return result;
}

uint64_t sub_95A398(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = *a1;
  uint64_t v8 = v6;
  if (*a1 != a3)
  {
    uint64_t v9 = 0;
    do
    {
      unint64_t v12 = (unsigned char *)(v6 + v9 - 800);
      uint64_t v13 = (void **)(a3 + v9 - 800);
      *(_DWORD *)(v6 + v9 - 32) = *(_DWORD *)(a3 + v9 - 32);
      int v14 = *(_DWORD *)(a3 + v9 - 32);
      switch(v14)
      {
        case 2:
          *(void *)unint64_t v12 = *v13;
          break;
        case 1:
          sub_4F56D0((uint64_t)v12, (uint64_t)v13);
          break;
        case 0:
          if (*(char *)(a3 + v9 - 777) < 0)
          {
            sub_4200(v12, *v13, *(void *)(a3 + v9 - 792));
          }
          else
          {
            long long v15 = *(_OWORD *)v13;
            *(void *)(v6 + v9 - 784) = *(void *)(a3 + v9 - 784);
            *(_OWORD *)unint64_t v12 = v15;
          }
          break;
      }
      uint64_t v10 = v6 + v9;
      uint64_t v11 = a3 + v9;
      *(void *)(v10 - 24) = 0;
      *(void *)(v10 - 16) = 0;
      *(void *)(v10 - 8) = 0;
      *(_OWORD *)(v10 - 24) = *(_OWORD *)(a3 + v9 - 24);
      *(void *)(v10 - 8) = *(void *)(a3 + v9 - 8);
      *(void *)(v11 - 24) = 0;
      *(void *)(v11 - 16) = 0;
      *(void *)(v11 - 8) = 0;
      v9 -= 800;
    }
    while (a3 + v9 != v7);
    uint64_t v8 = v6 + v9;
  }
  a2[1] = v8;
  uint64_t v16 = a1[1];
  uint64_t v17 = a2[2];
  if (v16 != a3)
  {
    uint64_t v18 = 0;
    do
    {
      uint64_t v21 = (void *)(a3 + v18);
      uint64_t v22 = v17 + v18;
      *(_DWORD *)(v17 + v18 + 768) = *(_DWORD *)(a3 + v18 + 768);
      int v23 = *(_DWORD *)(a3 + v18 + 768);
      switch(v23)
      {
        case 2:
          *(void *)uint64_t v22 = *v21;
          break;
        case 1:
          sub_4F56D0(v22, (uint64_t)v21);
          break;
        case 0:
          if (*(char *)(a3 + v18 + 23) < 0)
          {
            sub_4200((unsigned char *)v22, *(void **)(a3 + v18), *(void *)(a3 + v18 + 8));
          }
          else
          {
            long long v24 = *(_OWORD *)v21;
            *(void *)(v22 + 16) = v21[2];
            *(_OWORD *)uint64_t v22 = v24;
          }
          break;
      }
      unint64_t v19 = (void *)(v17 + v18);
      uint64_t v20 = a3 + v18;
      v19[99] = 0;
      *(_OWORD *)(v17 + v18 + 776) = 0u;
      v19[97] = *(void *)(a3 + v18 + 776);
      v19[98] = *(void *)(a3 + v18 + 784);
      v19[99] = *(void *)(a3 + v18 + 792);
      *(void *)(v20 + 792) = 0;
      *(_OWORD *)(v20 + 776) = 0u;
      v18 += 800;
    }
    while (a3 + v18 != v16);
    uint64_t v8 = a2[1];
    v17 += v18;
  }
  a2[2] = v17;
  uint64_t v25 = *a1;
  *a1 = v8;
  a2[1] = v25;
  uint64_t v26 = a1[1];
  a1[1] = a2[2];
  a2[2] = v26;
  uint64_t v27 = a1[2];
  a1[2] = a2[3];
  a2[3] = v27;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_95A5C0(uint64_t __dst, uint64_t a2)
{
  uint64_t v2 = __dst;
  if (__dst == a2) {
    return v2;
  }
  int v4 = *(_DWORD *)(__dst + 768);
  int v5 = *(_DWORD *)(a2 + 768);
  if (v4 != v5)
  {
    if (v4 == 1)
    {
      sub_4F4A98(__dst);
    }
    else
    {
      if (v4) {
        goto LABEL_16;
      }
      if (*(char *)(__dst + 23) < 0) {
        operator delete(*(void **)__dst);
      }
    }
    int v5 = *(_DWORD *)(a2 + 768);
LABEL_16:
    if (v5 == 2)
    {
      *(void *)uint64_t v2 = *(void *)a2;
      *(_DWORD *)(v2 + 768) = *(_DWORD *)(a2 + 768);
      return v2;
    }
    else
    {
      if (v5 == 1)
      {
        sub_4F56D0(v2, a2);
      }
      else if (!v5)
      {
        if (*(char *)(a2 + 23) < 0)
        {
          sub_4200((unsigned char *)v2, *(void **)a2, *(void *)(a2 + 8));
        }
        else
        {
          long long v7 = *(_OWORD *)a2;
          *(void *)(v2 + 16) = *(void *)(a2 + 16);
          *(_OWORD *)uint64_t v2 = v7;
        }
      }
      *(_DWORD *)(v2 + 768) = *(_DWORD *)(a2 + 768);
      return v2;
    }
  }
  if (v4 == 2)
  {
    *(void *)std::string __dst = *(void *)a2;
  }
  else
  {
    if (v4 != 1)
    {
      if (!v4)
      {
        if (*(char *)(__dst + 23) < 0) {
          operator delete(*(void **)__dst);
        }
        long long v6 = *(_OWORD *)a2;
        *(void *)(v2 + 16) = *(void *)(a2 + 16);
        *(_OWORD *)uint64_t v2 = v6;
        *(unsigned char *)(a2 + 23) = 0;
        *(unsigned char *)a2 = 0;
      }
      return v2;
    }
    sub_4F4314(__dst, a2);
    return v2;
  }
  return __dst;
}

uint64_t sub_95A724(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xEF7BDEF7BDEF7BDFLL * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x84210842108421) {
    sub_2E00();
  }
  if (0xDEF7BDEF7BDEF7BELL * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0xDEF7BDEF7BDEF7BELL * ((a1[2] - *a1) >> 4);
  }
  if (0xEF7BDEF7BDEF7BDFLL * ((a1[2] - *a1) >> 4) >= 0x42108421084210) {
    unint64_t v6 = 0x84210842108421;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x84210842108421) {
      sub_188D718();
    }
    long long v7 = (char *)operator new(496 * v6);
  }
  else
  {
    long long v7 = 0;
  }
  uint64_t v14 = (uint64_t)&v7[496 * v3];
  long long v15 = &v7[496 * v6];
  sub_598F14(v14, a2);
  uint64_t v8 = v14;
  uint64_t v9 = v14 + 496;
  uint64_t v11 = (char *)*a1;
  uint64_t v10 = (char *)a1[1];
  if (v10 == (char *)*a1)
  {
    *a1 = v14;
    a1[1] = v9;
    a1[2] = (uint64_t)v15;
  }
  else
  {
    do
    {
      v10 -= 496;
      uint64_t v8 = sub_4F4498(v8 - 496, (uint64_t)v10);
    }
    while (v10 != v11);
    unint64_t v12 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    *a1 = v8;
    a1[1] = v9;
    a1[2] = (uint64_t)v15;
    if (v10 != v12)
    {
      do
      {
        v10 -= 496;
        sub_4F2FF8((uint64_t)v10);
      }
      while (v10 != v12);
      uint64_t v10 = v12;
    }
  }
  if (v10) {
    operator delete(v10);
  }
  return v14 + 496;
}

void sub_95A8A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4F4D64((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_95A8B8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v7 = a3;
  uint64_t v9 = a1[2];
  unint64_t v10 = a1[1];
  if ((uint64_t)(0x8F5C28F5C28F5C29 * ((uint64_t)(v9 - v10) >> 5)) < a5)
  {
    uint64_t v11 = *a1;
    unint64_t v12 = a5 - 0x70A3D70A3D70A3D7 * ((uint64_t)(v10 - *a1) >> 5);
    if (v12 > 0x51EB851EB851EBLL) {
      sub_2E00();
    }
    unint64_t v13 = 0x8F5C28F5C28F5C29 * ((v9 - v11) >> 5);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x28F5C28F5C28F5) {
      unint64_t v14 = 0x51EB851EB851EBLL;
    }
    else {
      unint64_t v14 = v12;
    }
    uint64_t v37 = a1 + 2;
    if (v14)
    {
      if (v14 > 0x51EB851EB851EBLL) {
        sub_188D718();
      }
      long long v15 = (char *)operator new(800 * v14);
    }
    else
    {
      long long v15 = 0;
    }
    uint64_t v22 = &v15[32 * ((v5 - v11) >> 5)];
    std::string __p = v15;
    long long v34 = v22;
    uint64_t v35 = v22;
    uint64_t v36 = &v15[800 * v14];
    uint64_t v23 = 800 * a5;
    long long v24 = &v22[800 * a5];
    do
    {
      sub_4F74A4(v22, v7);
      v22 += 800;
      v7 += 800;
      v23 -= 800;
    }
    while (v23);
    uint64_t v35 = v24;
    uint64_t v5 = sub_95A398(a1, &__p, v5);
    uint64_t v25 = v34;
    while (1)
    {
      uint64_t v26 = v35;
      if (v35 == v25) {
        break;
      }
      uint64_t v27 = (void **)(v35 - 800);
      v35 -= 800;
      uint64_t v28 = *((void *)v26 - 3);
      if (v28)
      {
        uint64_t v29 = *((void *)v26 - 2);
        uint64_t v30 = (void *)*((void *)v26 - 3);
        if (v29 != v28)
        {
          do
          {
            if (*(char *)(v29 - 1) < 0) {
              operator delete(*(void **)(v29 - 24));
            }
            v29 -= 24;
          }
          while (v29 != v28);
          uint64_t v30 = (void *)*((void *)v26 - 3);
        }
        *((void *)v26 - 2) = v28;
        operator delete(v30);
      }
      int v31 = *((_DWORD *)v26 - 8);
      if (v31 == 1)
      {
        sub_4F4A98((uint64_t)(v26 - 800));
      }
      else if (!v31 && *(v26 - 777) < 0)
      {
        operator delete(*v27);
      }
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v16 = v10 - a2;
  if ((uint64_t)(0x8F5C28F5C28F5C29 * ((uint64_t)(v10 - a2) >> 5)) >= a5)
  {
    uint64_t v18 = a3 + 800 * a5;
LABEL_19:
    sub_959DE8((uint64_t)a1, v5, v10, v5 + 800 * a5);
    if (v18 != v7)
    {
      uint64_t v21 = (std::string *)v5;
      do
      {
        sub_5A5A64(v21, (std::string *)v7);
        if ((std::string *)v7 != v21) {
          sub_69208((uint64_t)&v21[32].__r_.__value_.__l.__size_, *(std::string **)(v7 + 776), *(std::string **)(v7 + 784), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v7 + 784) - *(void *)(v7 + 776)) >> 3));
        }
        v7 += 800;
        uint64_t v21 = (std::string *)((char *)v21 + 800);
      }
      while (v7 != v18);
    }
    return v5;
  }
  uint64_t v38 = a1[1];
  unint64_t v39 = v10;
  uint64_t v18 = a3 + 32 * ((uint64_t)(v10 - a2) >> 5);
  std::string __p = a1 + 2;
  long long v34 = (char *)&v38;
  uint64_t v35 = (char *)&v39;
  LOBYTE(v36) = 0;
  unint64_t v19 = (char *)v10;
  if (v18 != a4)
  {
    uint64_t v20 = a3 + 32 * ((uint64_t)(v10 - a2) >> 5);
    do
    {
      sub_4F74A4(v19, v20);
      v20 += 800;
      unint64_t v19 = (char *)(v39 + 800);
      v39 += 800;
    }
    while (v20 != a4);
  }
  a1[1] = (uint64_t)v19;
  if (v16 >= 1) {
    goto LABEL_19;
  }
  return v5;
}

void sub_95ABE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4F5698((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_95ABF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_5991A4((uint64_t)va);
  *(void *)(v2 + 8) = v3;
  _Unwind_Resume(a1);
}

void sub_95AC10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4F5698((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_95AC28()
{
  strcpy(&byte_25D6477, "\n\x1B\\toi=orth\\"");
  strcpy((char *)&qword_25D6460, "\x1B\\toi=lhp\\"");
  byte_25D648F = 11;
  qword_25D6490 = (uint64_t)operator new(0x19uLL);
  *(_OWORD *)&v280[16] = xmmword_20B9250;
  unk_25D6498 = xmmword_20B9250;
  strcpy((char *)qword_25D6490, "\x1B\\toi=x-sampa-internal\\"");
  byte_25D64BF = 13;
  strcpy((char *)&qword_25D64A8, "\x1B\\tn=address\\"");
  strcpy(&byte_25D64D7, "\t\x1B\\tn=normal\\"");
  strcpy((char *)&qword_25D64C0, "\x1B\\tn=nav\\"");
  byte_25D64EF = 12;
  byte_25D6507 = 7;
  strcpy((char *)&dword_25D64F0, "\x1B\\lang=");
  byte_25D651F = 1;
  word_25D6508 = 92;
  byte_25D6537 = 4;
  strcpy((char *)&qword_25D6520, "DEV:");
  byte_25D654F = 8;
  strcpy((char *)&qword_25D6538, "Continue");
  byte_25D6567 = 11;
  strcpy((char *)&qword_25D6550, "Start_Route");
  byte_25D657F = 14;
  strcpy((char *)&qword_25D6568, "Continue_Route");
  byte_25D6597 = 12;
  strcpy((char *)&qword_25D6580, "Resume_Route");
  byte_25D65AF = 18;
  strcpy((char *)&xmmword_25D6598, "Start_Route_U_Turn");
  byte_25D65C7 = 7;
  strcpy((char *)&dword_25D65B0, "_U_Turn");
  qword_25D65D8 = 0x1300000000000000;
  qmemcpy(&unk_25D65E0, "Continue_Route", 14);
  dword_25D65D0 = 1702131055;
  qword_25D65C8 = *(void *)"Resume_Route";
  *(int *)((char *)&dword_25D65D4 + 3) = 1852994900;
  dword_25D65D4 = 1415533919;
  qword_25D65F0 = 0x1500000000000000;
  strcpy(byte_25D65F8, "Left_Turn");
  unk_25D65EE = 1415533919;
  *(_DWORD *)((char *)&qword_25D65F0 + 1) = 1852994900;
  strcpy(&byte_25D660F, "\tRight_Turn");
  strcpy(&byte_25D6627, "\nLeft_Turn_At_End");
  byte_25D663F = 16;
  byte_25D6657 = 17;
  strcpy((char *)&xmmword_25D6640, "Right_Turn_At_End");
  byte_25D666F = 15;
  strcpy((char *)&qword_25D6658, "Sharp_Left_Turn");
  byte_25D6687 = 16;
  strcpy((char *)&xmmword_25D6670, "Sharp_Right_Turn");
  byte_25D669F = 16;
  strcpy((char *)&xmmword_25D6688, "Slight_Left_Turn");
  byte_25D66B7 = 17;
  strcpy((char *)&xmmword_25D66A0, "Slight_Right_Turn");
  strcpy(&byte_25D66CF, "\tKeep_Right");
  strcpy((char *)&qword_25D66B8, "Keep_Left");
  strcpy(&byte_25D66E7, "\nU_Turn");
  byte_25D66FF = 6;
  byte_25D6717 = 14;
  strcpy((char *)&qword_25D6700, "Walking_U_Turn");
  byte_25D672F = 20;
  strcpy((char *)&xmmword_25D6718, "U_Turn_When_Possible");
  byte_25D6747 = 20;
  strcpy((char *)&xmmword_25D6730, "U_Turn_At_Roundabout");
  byte_25D675F = 11;
  strcpy((char *)&qword_25D6748, "Enter_Ferry");
  strcpy(&byte_25D6777, "\nChange_Ferry");
  strcpy((char *)&qword_25D6760, "Exit_Ferry");
  strcpy((char *)&xmmword_25D6790, "Enter_Railway_Shuttle");
  strcpy((char *)&xmmword_25D67A8, "Exit_Railway_Shuttle");
  strcpy((char *)&xmmword_25D67C0, "Change_Railway_Shuttle");
  strcpy((char *)&xmmword_25D67D8, "End_Of_Navigation");
  strcpy((char *)&xmmword_25D67F0, "End_Of_Navigation");
  strcpy((char *)&qword_25D6808, "Destination");
  strcpy((char *)&xmmword_25D6820, "Destination_On_left");
  strcpy((char *)&xmmword_25D6838, "Destination_On_Right");
  strcpy((char *)&xmmword_25D6880, "First_Stop_On_Right");
  strcpy((char *)&xmmword_25D68C8, "Next_Stop_On_Right");
  byte_25D678F = 12;
  byte_25D67A7 = 21;
  byte_25D67BF = 20;
  strcpy((char *)&xmmword_25D68F8, "Waypoint_Stop_On_Left");
  byte_25D67D7 = 22;
  byte_25D67EF = 17;
  byte_25D6807 = 17;
  byte_25D681F = 11;
  byte_25D6837 = 19;
  byte_25D684F = 20;
  strcpy(&byte_25D6867, "\nFirst_Stop_On_left");
  *(void *)unint64_t v269 = *(void *)"First_Stop";
  strcpy((char *)&qword_25D6850, "First_Stop");
  byte_25D687F = 18;
  byte_25D6897 = 19;
  strcpy(&byte_25D68AF, "\tNext_Stop_On_left");
  strcpy((char *)&qword_25D68E0, "Waypoint_Stop");
  strcpy((char *)&xmmword_25D6910, "Waypoint_Stop_On_Right");
  strcpy((char *)&qword_25D6928, "Roundabout_");
  *(void *)&v266[48] = *(void *)"Next_Stop";
  strcpy((char *)&qword_25D6898, "Next_Stop");
  byte_25D68C7 = 17;
  byte_25D68DF = 18;
  byte_25D68F7 = 13;
  byte_25D690F = 21;
  byte_25D6927 = 22;
  byte_25D693F = 11;
  byte_25D6957 = 16;
  strcpy((char *)&xmmword_25D6940, "Enter_Roundabout");
  qword_25D6958 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)uint64_t v280 = xmmword_20B91C0;
  xmmword_25D6960 = xmmword_20B91C0;
  strcpy((char *)qword_25D6958, "Walking_Enter_Roundabout");
  byte_25D6987 = 16;
  strcpy((char *)&xmmword_25D6970, "Leave_Roundabout");
  byte_25D699F = 21;
  strcpy((char *)&xmmword_25D6988, "Roundabout_First_Exit");
  byte_25D69B7 = 22;
  strcpy((char *)&xmmword_25D69A0, "Roundabout_Second_Exit");
  byte_25D69CF = 21;
  strcpy((char *)&xmmword_25D69B8, "Roundabout_Third_Exit");
  strcpy((char *)&xmmword_25D69D0, "Roundabout_Fourth_Exit");
  HIBYTE(word_25D69E6) = 22;
  byte_25D69FF = 21;
  strcpy((char *)&xmmword_25D69E8, "Roundabout_Fifth_Exit");
  byte_25D6A17 = 21;
  strcpy((char *)&xmmword_25D6A00, "Roundabout_Sixth_Exit");
  qword_25D6A18 = (uint64_t)operator new(0x19uLL);
  xmmword_25D6A20 = xmmword_20B9250;
  strcpy((char *)qword_25D6A18, "Roundabout_Seventh_Exit");
  strcpy((char *)&xmmword_25D6A30, "Roundabout_Eighth_Exit");
  HIBYTE(word_25D6A46) = 22;
  byte_25D6A5F = 21;
  strcpy((char *)&xmmword_25D6A48, "Roundabout_Ninth_Exit");
  byte_25D6A77 = 21;
  strcpy((char *)&xmmword_25D6A60, "Roundabout_Tenth_Exit");
  qword_25D6A78 = (uint64_t)operator new(0x20uLL);
  xmmword_25D6A80 = xmmword_20B91C0;
  strcpy((char *)qword_25D6A78, "Roundabout_Eleventh_Exit");
  qword_25D6A90 = (uint64_t)operator new(0x19uLL);
  unk_25D6A98 = xmmword_20B9250;
  strcpy((char *)qword_25D6A90, "Roundabout_Twelfth_Exit");
  qword_25D6AA8 = (uint64_t)operator new(0x20uLL);
  long long v277 = xmmword_20B5EB0;
  xmmword_25D6AB0 = xmmword_20B5EB0;
  strcpy((char *)qword_25D6AA8, "Roundabout_Thirteenth_Exit");
  qword_25D6AC0 = (uint64_t)operator new(0x20uLL);
  unk_25D6AC8 = xmmword_20B5EB0;
  strcpy((char *)qword_25D6AC0, "Roundabout_Fourteenth_Exit");
  qword_25D6AD8 = (uint64_t)operator new(0x20uLL);
  long long v279 = xmmword_20B8870;
  xmmword_25D6AE0 = xmmword_20B8870;
  strcpy((char *)qword_25D6AD8, "Roundabout_Fifteenth_Exit");
  qword_25D6AF0 = (uint64_t)operator new(0x20uLL);
  unk_25D6AF8 = xmmword_20B8870;
  strcpy((char *)qword_25D6AF0, "Roundabout_Sixteenth_Exit");
  qword_25D6B08 = (uint64_t)operator new(0x20uLL);
  long long v274 = xmmword_20B91A0;
  xmmword_25D6B10 = xmmword_20B91A0;
  strcpy((char *)qword_25D6B08, "Roundabout_Seventeenth_Exit");
  qword_25D6B20 = (uint64_t)operator new(0x20uLL);
  unk_25D6B28 = xmmword_20B5EB0;
  strcpy((char *)qword_25D6B20, "Roundabout_Eighteenth_Exit");
  qword_25D6B38 = (uint64_t)operator new(0x20uLL);
  xmmword_25D6B40 = xmmword_20B5EB0;
  strcpy((char *)qword_25D6B38, "Roundabout_Nineteenth_Exit");
  byte_25D6B67 = 8;
  strcpy((char *)&qword_25D6B50, "Off_Ramp");
  byte_25D6B7F = 16;
  strcpy((char *)&xmmword_25D6B68, "Off_Ramp_On_Left");
  byte_25D6B97 = 17;
  strcpy((char *)&xmmword_25D6B80, "Off_Ramp_On_Right");
  byte_25D6BAF = 14;
  strcpy((char *)&qword_25D6B98, "Change_Highway");
  strcpy((char *)&xmmword_25D6BB0, "Change_Highway_On_Left");
  HIBYTE(word_25D6BC6) = 22;
  qword_25D6BC8 = (uint64_t)operator new(0x19uLL);
  xmmword_25D6BD0 = xmmword_20B9250;
  strcpy((char *)qword_25D6BC8, "Change_Highway_On_Right");
  byte_25D6BF7 = 5;
  dword_25D6BE0 = 1735550285;
  byte_25D6BE4 = 101;
  byte_25D6BE5 = 0;
  byte_25D6C0F = 12;
  strcpy((char *)&qword_25D6BF8, "Enter_Detour");
  byte_25D6C27 = 11;
  strcpy((char *)&qword_25D6C10, "Exit_Detour");
  byte_25D6C3F = 18;
  strcpy((char *)&xmmword_25D6C28, "Walking_Turnaround");
  qword_25D6C40 = (uint64_t)operator new(0x19uLL);
  unk_25D6C48 = xmmword_20B9250;
  strcpy((char *)qword_25D6C40, "Walking_Turnaround_Sign");
  byte_25D6C6F = 19;
  strcpy((char *)&xmmword_25D6C58, "Distance_Title_List");
  qword_25D6C70 = (uint64_t)operator new(0x19uLL);
  unk_25D6C78 = xmmword_20B9250;
  *(_OWORD *)&v269[48] = *(_OWORD *)"Cross_The_Street_Spoken";
  strcpy((char *)qword_25D6C70, "Cross_The_Street_Spoken");
  *(void *)&v269[16] = *(void *)"t_Spoken";
  byte_25D6C9F = 19;
  strcpy((char *)&xmmword_25D6C88, "Arrival_Charge_List");
  byte_25D6CB7 = 15;
  strcpy((char *)&qword_25D6CA0, "Charge_At_Start");
  strcpy(&byte_25D6CCF, "\tPass_Street");
  strcpy((char *)&qword_25D6CB8, "Pass_Exit");
  byte_25D6CE7 = 11;
  byte_25D6CFF = 17;
  strcpy((char *)&xmmword_25D6CE8, "Pass_Intersection");
  strcpy(&byte_25D6D17, "\t_PrevExitNumber");
  strcpy((char *)&qword_25D6D00, "Next_Exit");
  byte_25D6D2F = 15;
  strcpy(&byte_25D6D47, "\t_PrevUTurn");
  strcpy((char *)&qword_25D6D30, "_PrevRoad");
  strcpy(&byte_25D6D5F, "\nNext_");
  byte_25D6D77 = 5;
  byte_25D6D8F = 15;
  strcpy((char *)&qword_25D6D78, "_At_Next_Street");
  byte_25D6DA7 = 21;
  strcpy((char *)&xmmword_25D6D90, "_At_Next_Intersection");
  byte_25D6DBF = 14;
  strcpy((char *)&qword_25D6DA8, "Charge_Station");
  byte_25D6DD7 = 15;
  strcpy((char *)&qword_25D6DC0, "_Charge_Station");
  BYTE1(qword_25D6DE8) = 0;
  WORD1(qword_25D6DE8) = 25856;
  HIDWORD(qword_25D6DE8) = 335544320;
  strcpy((char *)&qword_25D6DD8, "_Charge_Station_");
  byte_25D6E07 = 8;
  strcpy((char *)&qword_25D6DF0, "_Minimum");
  byte_25D6E1F = 15;
  strcpy((char *)&qword_25D6E08, "ExitShield_Sign");
  byte_25D6E37 = 8;
  strcpy((char *)&qword_25D6E20, "Walking_");
  byte_25D6E4F = 16;
  strcpy((char *)&xmmword_25D6E38, "Walking_Continue");
  byte_25D6E67 = 19;
  strcpy((char *)&xmmword_25D6E50, "Walking_Start_Route");
  qword_25D6E68 = (uint64_t)operator new(0x20uLL);
  xmmword_25D6E70 = xmmword_20B5EB0;
  strcpy((char *)qword_25D6E68, "Walking_Start_Route_U_Turn");
  byte_25D6E97 = 17;
  strcpy((char *)&xmmword_25D6E80, "Walking_Left_Turn");
  byte_25D6EAF = 18;
  strcpy((char *)&xmmword_25D6E98, "Walking_Right_Turn");
  qword_25D6EB0 = (uint64_t)operator new(0x20uLL);
  unk_25D6EB8 = xmmword_20B5EB0;
  strcpy((char *)qword_25D6EB0, "Walking_Turn_At_Roundabout");
  qword_25D6EC8 = (uint64_t)operator new(0x20uLL);
  long long v278 = xmmword_20B91B0;
  xmmword_25D6ED0 = xmmword_20B91B0;
  strcpy((char *)qword_25D6EC8, "Walking_U_Turn_When_Possible");
  qword_25D6EE0 = (uint64_t)operator new(0x28uLL);
  long long v271 = xmmword_20B9390;
  unk_25D6EE8 = xmmword_20B9390;
  strcpy((char *)qword_25D6EE0, "Walking_Roundabout_Exit_Continue");
  qword_25D6EF8 = (uint64_t)operator new(0x20uLL);
  xmmword_25D6F00 = xmmword_20B91B0;
  strcpy((char *)qword_25D6EF8, "Walking_Roundabout_Exit_Left");
  qword_25D6F10 = (uint64_t)operator new(0x20uLL);
  long long v276 = xmmword_20B8890;
  unk_25D6F18 = xmmword_20B8890;
  strcpy((char *)qword_25D6F10, "Walking_Roundabout_Exit_Right");
  qword_25D6F28 = (uint64_t)operator new(0x20uLL);
  xmmword_25D6F30 = xmmword_20B8870;
  strcpy((char *)qword_25D6F28, "Walking_End_Of_Navigation");
  long long v273 = *(_OWORD *)"nd_Of_Navigation";
  v0 = (char *)operator new(0x20uLL);
  qword_25D6F40 = (uint64_t)v0;
  unk_25D6F48 = xmmword_20B8870;
  *(_OWORD *)v0 = *(_OWORD *)"Walking_End_Of_Navigation";
  *(_OWORD *)(v0 + 9) = v273;
  v0[25] = 0;
  byte_25D6F6F = 8;
  strcpy((char *)&qword_25D6F58, "Walking_");
  qword_25D6F70 = (uint64_t)operator new(0x19uLL);
  unk_25D6F78 = *(_OWORD *)&v280[16];
  strcpy((char *)qword_25D6F70, "Walking_Sharp_Left_Turn");
  qword_25D6F88 = (uint64_t)operator new(0x20uLL);
  xmmword_25D6F90 = *(_OWORD *)v280;
  strcpy((char *)qword_25D6F88, "Walking_Sharp_Right_Turn");
  qword_25D6FA0 = (uint64_t)operator new(0x20uLL);
  unk_25D6FA8 = *(_OWORD *)v280;
  strcpy((char *)qword_25D6FA0, "Walking_Slight_Left_Turn");
  qword_25D6FB8 = (uint64_t)operator new(0x20uLL);
  xmmword_25D6FC0 = v279;
  strcpy((char *)qword_25D6FB8, "Walking_Slight_Right_Turn");
  byte_25D6FE7 = 4;
  strcpy((char *)&dword_25D6FD0, "Exit");
  byte_25D6FFF = 4;
  strcpy((char *)&dword_25D6FE8, "Road");
  byte_25D7017 = 7;
  strcpy((char *)&dword_25D7000, "Freeway");
  byte_25D702F = 12;
  strcpy((char *)&qword_25D7018, "Intersection");
  byte_25D7047 = 5;
  strcpy((char *)&dword_25D7030, "Ferry");
  byte_25D705F = 11;
  strcpy((char *)&qword_25D7048, "ShuttleName");
  byte_25D7077 = 5;
  strcpy((char *)&dword_25D7060, "Road1");
  strcpy(&byte_25D708F, "\tName");
  strcpy((char *)&qword_25D7078, "Signpost1");
  byte_25D70A7 = 4;
  byte_25D70BF = 7;
  strcpy((char *)&dword_25D70A8, "Address");
  byte_25D70D7 = 7;
  strcpy((char *)&dword_25D70C0, "Shield1");
  byte_25D70EF = 13;
  strcpy((char *)&qword_25D70D8, "TowardShield1");
  byte_25D7107 = 6;
  strcpy((char *)&dword_25D70F0, "Right_");
  byte_25D711F = 5;
  byte_25D710C = 95;
  dword_25D7108 = 1952867660;
  byte_25D710D = 0;
  strcpy(&byte_25D7137, "\tOn_Left_");
  strcpy((char *)&qword_25D7120, "On_Right_");
  byte_25D714F = 8;
  byte_25D7167 = 12;
  strcpy((char *)&qword_25D7150, "ElevatorName");
  byte_25D717F = 13;
  strcpy((char *)&qword_25D7168, "EscalatorName");
  strcpy(&byte_25D7197, "\nBridgeName");
  strcpy((char *)&qword_25D7180, "StairsName");
  strcpy(&byte_25D71AF, "\nTunnelName");
  strcpy(&byte_25D71C7, "\nParking");
  byte_25D71DF = 7;
  strcpy(&byte_25D71F7, "\t_Escalator");
  strcpy((char *)&qword_25D71E0, "_Elevator");
  strcpy(&byte_25D720F, "\n_ElevatorName");
  byte_25D7227 = 13;
  byte_25D723F = 14;
  strcpy((char *)&qword_25D7228, "_EscalatorName");
  byte_25D7257 = 5;
  strcpy((char *)&qword_25D7240, "_Road");
  byte_25D726F = 8;
  strcpy((char *)&qword_25D7258, "_Freeway");
  byte_25D7287 = 13;
  strcpy((char *)&qword_25D7270, "_Intersection");
  byte_25D729F = 6;
  strcpy((char *)&dword_25D7288, "_Road1");
  byte_25D72B7 = 6;
  strcpy((char *)&dword_25D72A0, "_Road2");
  strcpy(&byte_25D72CF, "\n_Signpost2");
  strcpy((char *)&qword_25D72B8, "_Signpost1");
  strcpy(&byte_25D72E7, "\n_Ferry");
  byte_25D72FF = 6;
  byte_25D7317 = 12;
  strcpy((char *)&qword_25D7300, "_Ferry_Ferry");
  byte_25D732F = 12;
  strcpy((char *)&qword_25D7318, "_ShuttleName");
  qword_25D7330 = (uint64_t)operator new(0x20uLL);
  unk_25D7338 = v278;
  strcpy((char *)qword_25D7330, "_Railway_Shuttle_ShuttleName");
  byte_25D735F = 11;
  strcpy((char *)&qword_25D7348, "_ExitNumber");
  byte_25D7377 = 5;
  dword_25D7360 = 1769489759;
  byte_25D7364 = 116;
  byte_25D7365 = 0;
  byte_25D738F = 7;
  strcpy((char *)&dword_25D7378, "_StayOn");
  byte_25D73A7 = 7;
  strcpy((char *)&dword_25D7390, "_Stairs");
  byte_25D73BF = 5;
  strcpy((char *)&dword_25D73A8, "_Ramp");
  byte_25D73D7 = 11;
  strcpy((char *)&qword_25D73C0, "_StairsName");
  strcpy(&byte_25D73EF, "\t_Down");
  strcpy((char *)&qword_25D73D8, "_RampName");
  byte_25D7407 = 5;
  byte_25D741F = 3;
  dword_25D7408 = 7361887;
  byte_25D7437 = 7;
  strcpy((char *)&dword_25D7420, "_Bridge");
  byte_25D744F = 7;
  strcpy((char *)&dword_25D7438, "_Tunnel");
  byte_25D7467 = 11;
  strcpy((char *)&qword_25D7450, "_Roundabout");
  byte_25D747F = 6;
  strcpy((char *)&dword_25D7468, "_Cross");
  byte_25D7497 = 8;
  strcpy((char *)&qword_25D7480, "_Parking");
  byte_25D74AF = 8;
  strcpy((char *)&qword_25D7498, "_Shield1");
  byte_25D74C7 = 14;
  strcpy((char *)&qword_25D74B0, "_TowardShield1");
  byte_25D74DF = 8;
  strcpy((char *)&qword_25D74C8, "_Shield2");
  byte_25D74F7 = 14;
  strcpy((char *)&qword_25D74E0, "_TowardShield2");
  byte_25D750F = 11;
  strcpy((char *)&qword_25D74F8, "_Direction1");
  byte_25D7527 = 11;
  strcpy((char *)&qword_25D7510, "_Direction2");
  strcpy(&byte_25D753F, "\n_TowardDirection1");
  strcpy((char *)&qword_25D7528, "Direction1");
  byte_25D7557 = 17;
  byte_25D756F = 17;
  strcpy((char *)&xmmword_25D7558, "_TowardDirection2");
  byte_25D7587 = 16;
  strcpy((char *)&xmmword_25D7570, "TowardDirection1");
  byte_25D759F = 7;
  strcpy((char *)&qword_25D7588, "_Spoken");
  byte_25D75B7 = 5;
  strcpy((char *)&qword_25D75A0, "_Sign");
  byte_25D75CF = 15;
  strcpy((char *)&qword_25D75B8, "_Secondary_Sign");
  byte_25D75E7 = 5;
  byte_25D75D4 = 116;
  dword_25D75D0 = 1936280671;
  byte_25D75D5 = 0;
  byte_25D75FF = 8;
  strcpy((char *)&qword_25D75E8, "_Primary");
  qword_25D7610 = 0xF00000000000000;
  strcpy(byte_25D7618, "_Secondary");
  strcpy((char *)&qword_25D7600, "_Spoken_Primary");
  strcpy(&byte_25D762F, "\n_Secondary");
  strcpy(&byte_25D7647, "\n_Spoken_Secondar");
  BYTE1(qword_25D7658) = 0;
  WORD1(qword_25D7658) = 0;
  HIDWORD(qword_25D7658) = 285212672;
  byte_25D7677 = 13;
  strcpy((char *)&qword_25D7660, "_To_Secondary");
  BYTE1(qword_25D7688) = 0;
  WORD1(qword_25D7688) = 0;
  HIDWORD(qword_25D7688) = 335544320;
  strcpy((char *)&dword_25D7678, "_Spoken_To_Secon");
  strcpy(&byte_25D76A7, "\t_ValidDistance");
  strcpy((char *)&qword_25D7690, "_Distance");
  byte_25D76BF = 14;
  byte_25D76D7 = 6;
  strcpy((char *)&dword_25D76C0, "_Short");
  byte_25D76EF = 1;
  word_25D76D8 = 95;
  qword_25D76F0 = (uint64_t)operator new(0x20uLL);
  unk_25D76F8 = *(_OWORD *)v280;
  strcpy((char *)qword_25D76F0, "Concatenate_Newline_Sign");
  uint64_t v1 = (char *)operator new(0x19uLL);
  qword_25D7708 = (uint64_t)v1;
  xmmword_25D7710 = *(_OWORD *)&v280[16];
  *(_OWORD *)uint64_t v1 = *(_OWORD *)&v269[48];
  uint64_t v2 = *(void *)&v269[16];
  *(void *)(v1 + 15) = *(void *)&v269[16];
  v1[23] = 0;
  byte_25D7737 = 12;
  strcpy((char *)&qword_25D7720, "Chain_Spoken");
  byte_25D774F = 15;
  strcpy((char *)&qword_25D7738, "Chain_To_Spoken");
  strcpy(&byte_25D7767, "\nThen_Spoken");
  strcpy((char *)&qword_25D7750, "And_Spoken");
  byte_25D777F = 11;
  byte_25D7797 = 18;
  strcpy((char *)&xmmword_25D7780, "Concatenate_Spoken");
  qword_25D7798 = (uint64_t)operator new(0x28uLL);
  long long v268 = xmmword_20B9240;
  xmmword_25D77A0 = xmmword_20B9240;
  strcpy((char *)qword_25D7798, "At_Traffic_Light_Chain_Spoken_Primary");
  qword_25D77B0 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)&v269[32] = xmmword_20B9260;
  unk_25D77B8 = xmmword_20B9260;
  strcpy((char *)qword_25D77B0, "At_Stop_Sign_Chain_Spoken_Primary");
  qword_25D77C8 = (uint64_t)operator new(0x40uLL);
  xmmword_25D77D0 = xmmword_20B9A90;
  strcpy((char *)qword_25D77C8, "At_Stop_Sign_Cross_Traffic_Doesnt_Stop_Chain_Spoken_Primary");
  qword_25D77E0 = (uint64_t)operator new(0x30uLL);
  long long v267 = xmmword_20B9A40;
  unk_25D77E8 = xmmword_20B9A40;
  strcpy((char *)qword_25D77E0, "At_Next_Traffic_Light_Chain_Spoken_Primary");
  qword_25D77F8 = (uint64_t)operator new(0x28uLL);
  long long v270 = xmmword_20E12D0;
  xmmword_25D7800 = xmmword_20E12D0;
  strcpy((char *)qword_25D77F8, "At_Next_Stop_Sign_Chain_Spoken_Primary");
  qword_25D7810 = (uint64_t)operator new(0x28uLL);
  long long v275 = xmmword_20B9960;
  unk_25D7818 = xmmword_20B9960;
  strcpy((char *)qword_25D7810, "At_Traffic_Light_Chain_Spoken_Secondary");
  qword_25D7828 = (uint64_t)operator new(0x28uLL);
  xmmword_25D7830 = xmmword_20B93A0;
  strcpy((char *)qword_25D7828, "At_Stop_Sign_Chain_Spoken_Secondary");
  qword_25D7840 = (uint64_t)operator new(0x30uLL);
  long long v272 = xmmword_20E1380;
  unk_25D7848 = xmmword_20E1380;
  strcpy((char *)qword_25D7840, "At_Next_Traffic_Light_Chain_Spoken_Secondary");
  qword_25D7858 = (uint64_t)operator new(0x30uLL);
  xmmword_25D7860 = xmmword_20B93C0;
  strcpy((char *)qword_25D7858, "At_Next_Stop_Sign_Chain_Spoken_Secondary");
  qword_25D7870 = (uint64_t)operator new(0x38uLL);
  unk_25D7878 = xmmword_20B9A60;
  strcpy((char *)qword_25D7870, "At_Next_One_Traffic_Light_Chain_Spoken_Secondary");
  qword_25D7888 = (uint64_t)operator new(0x30uLL);
  xmmword_25D7890 = xmmword_20E1380;
  strcpy((char *)qword_25D7888, "At_Next_One_Stop_Sign_Chain_Spoken_Secondary");
  qword_25D78A0 = (uint64_t)operator new(0x28uLL);
  unk_25D78A8 = xmmword_20B9960;
  strcpy((char *)qword_25D78A0, "At_Mini_Roundabout_Chain_Spoken_Primary");
  qword_25D78B8 = (uint64_t)operator new(0x30uLL);
  long long v273 = xmmword_20B93D0;
  xmmword_25D78C0 = xmmword_20B93D0;
  strcpy((char *)qword_25D78B8, "At_Mini_Roundabout_Chain_Spoken_Secondary");
  qword_25D78D0 = (uint64_t)operator new(0x20uLL);
  unk_25D78D8 = v276;
  strcpy((char *)qword_25D78D0, "Walking_Distance_Chain_Spoken");
  qword_25D78E8 = (uint64_t)operator new(0x20uLL);
  xmmword_25D78F0 = v276;
  strcpy((char *)qword_25D78E8, "Walking_Continue_Chain_Spoken");
  uint64_t v3 = (char *)operator new(0x19uLL);
  qword_25D7900 = (uint64_t)v3;
  unk_25D7908 = *(_OWORD *)&v280[16];
  *(_OWORD *)uint64_t v3 = *(_OWORD *)&v269[48];
  *(void *)(v3 + 15) = v2;
  v3[23] = 0;
  qword_25D7918 = (uint64_t)operator new(0x28uLL);
  xmmword_25D7920 = v271;
  strcpy((char *)qword_25D7918, "Distance_Cross_The_Street_Spoken");
  byte_25D7947 = 22;
  strcpy((char *)&xmmword_25D7930, "Walking_Continue_Cross");
  byte_25D795F = 14;
  strcpy((char *)&qword_25D7948, "Continue_Cross");
  byte_25D7977 = 5;
  strcpy((char *)&dword_25D7960, "Cross");
  byte_25D798F = 19;
  strcpy((char *)&xmmword_25D7978, "Cross_Street_Spoken");
  byte_25D79A7 = 17;
  strcpy((char *)&xmmword_25D7990, "Cross_Road_Spoken");
  byte_25D79BF = 20;
  strcpy((char *)&xmmword_25D79A8, "Use_Crosswalk_Spoken");
  byte_25D79D7 = 15;
  strcpy((char *)&qword_25D79C0, "Distance_Spoken");
  byte_25D79EF = 19;
  strcpy((char *)&xmmword_25D79D8, "Distance_And_Spoken");
  byte_25D7A07 = 21;
  strcpy((char *)&xmmword_25D79F0, "Continue_Stage_Spoken");
  byte_25D7A1F = 13;
  qmemcpy(&qword_25D7A08, "ContinueStage", 13);
  int v4 = SHIBYTE(qword_25D7610);
  if (qword_25D7610 >= 0) {
    size_t v5 = HIBYTE(qword_25D7610);
  }
  else {
    size_t v5 = unk_25D7608;
  }
  unint64_t v6 = v5 + 13;
  byte_25D7A15 = 0;
  if (v5 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v6 >= 0x17)
  {
    uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v8 = v6 | 7;
    }
    uint64_t v9 = v8 + 1;
    unint64_t v10 = operator new(v8 + 1);
    qword_25D7A28 = v5 + 13;
    unk_25D7A30 = v9 | 0x8000000000000000;
    qword_25D7A20 = (uint64_t)v10;
    *unint64_t v10 = *(void *)"ContinueStage";
    uint64_t v7 = (char *)v10 + 13;
    *(void *)((char *)v10 + 5) = *(void *)"nueStage";
  }
  else
  {
    BYTE1(qword_25D7A28) = 0;
    WORD1(qword_25D7A28) = 0;
    HIDWORD(qword_25D7A28) = 0;
    unk_25D7A30 = 0;
    byte_25D7A37 = v5 + 13;
    uint64_t v7 = (char *)&qword_25D7A28 + 5;
    strcpy((char *)&qword_25D7A20, "Continue");
    if (!v5) {
      goto LABEL_15;
    }
  }
  if (v4 >= 0) {
    uint64_t v11 = &qword_25D7600;
  }
  else {
    uint64_t v11 = (uint64_t *)qword_25D7600;
  }
  memmove(v7, v11, v5);
LABEL_15:
  v7[v5] = 0;
  int v12 = byte_25D7257;
  if (byte_25D7257 >= 0) {
    size_t v13 = byte_25D7257;
  }
  else {
    size_t v13 = qword_25D7248;
  }
  unint64_t v14 = v13 + 13;
  if (v13 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v14 >= 0x17)
  {
    uint64_t v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v16 = v14 | 7;
    }
    uint64_t v17 = v16 + 1;
    uint64_t v18 = operator new(v16 + 1);
    __dst.__r_.__value_.__l.__size_ = v13 + 13;
    __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
    *uint64_t v18 = qword_25D7A08;
    *(void *)((char *)v18 + 5) = *(uint64_t *)((char *)&qword_25D7A08 + 5);
    long long v15 = (char *)v18 + 13;
  }
  else
  {
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = 0uLL;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 5) = *(uint64_t *)((char *)&qword_25D7A08 + 5);
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v13 + 13;
    __dst.__r_.__value_.__r.__words[0] = qword_25D7A08;
    long long v15 = &__dst.__r_.__value_.__s.__data_[13];
    if (!v13) {
      goto LABEL_29;
    }
  }
  if (v12 >= 0) {
    unint64_t v19 = &qword_25D7240;
  }
  else {
    unint64_t v19 = (uint64_t *)qword_25D7240;
  }
  memmove(v15, v19, v13);
LABEL_29:
  v15[v13] = 0;
  if (v4 >= 0) {
    uint64_t v20 = (const std::string::value_type *)&qword_25D7600;
  }
  else {
    uint64_t v20 = (const std::string::value_type *)qword_25D7600;
  }
  uint64_t v21 = std::string::append(&__dst, v20, v5);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  qword_25D7A48 = v21->__r_.__value_.__r.__words[2];
  xmmword_25D7A38 = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  byte_25D7A67 = 5;
  strcpy((char *)&dword_25D7A50, "Merge");
  qword_25D7A68 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)&v269[16] = xmmword_20B8E90;
  *(_OWORD *)algn_25D7A70 = xmmword_20B8E90;
  strcpy((char *)qword_25D7A68, "Continue_Freeway_Spoken_Primary");
  byte_25D7A97 = 8;
  strcpy((char *)&qword_25D7A80, "Starting");
  byte_25D7AAF = 14;
  strcpy((char *)&qword_25D7A98, "Starting_Route");
  byte_25D7AC7 = 14;
  strcpy((char *)&qword_25D7AB0, "Resuming_Route");
  byte_25D7ADF = 16;
  strcpy((char *)&xmmword_25D7AC8, "Continuing_Route");
  byte_25D7AF7 = 9;
  word_25D7AE8 = 112;
  qword_25D7AE0 = *(void *)&v266[48];
  strcpy(&byte_25D7B0F, "\nEnding");
  strcpy((char *)&word_25D7B00, "op");
  qword_25D7AF8 = *(void *)v269;
  byte_25D7B27 = 6;
  strcpy((char *)&qword_25D7B28, "_Destination");
  byte_25D7B3F = 12;
  byte_25D7B57 = 15;
  strcpy((char *)&qword_25D7B40, "_At_Destination");
  std::operator+<char>();
  qword_25D7B70 = (uint64_t)operator new(0x20uLL);
  unk_25D7B78 = *(_OWORD *)v280;
  strcpy((char *)qword_25D7B70, "Spoken_Ending_At_Parking");
  qword_25D7B88 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)unint64_t v269 = xmmword_20B9800;
  xmmword_25D7B90 = xmmword_20B9800;
  strcpy((char *)qword_25D7B88, "Spoken_Pre_Arrival_Destination");
  strcpy((char *)&xmmword_25D7BA0, "Sign_Ending_At_Parking");
  HIBYTE(word_25D7BB6) = 22;
  byte_25D7BCF = 4;
  strcpy((char *)&dword_25D7BB8, "Home");
  byte_25D7BE7 = 4;
  strcpy((char *)&dword_25D7BD0, "Work");
  byte_25D7BFF = 8;
  strcpy((char *)&qword_25D7BE8, "Business");
  byte_25D7C17 = 4;
  strcpy((char *)&dword_25D7C00, "Name");
  byte_25D7C2F = 13;
  strcpy((char *)&qword_25D7C18, "Other_Contact");
  byte_25D7C47 = 11;
  strcpy((char *)&qword_25D7C30, "ContactHome");
  byte_25D7C5F = 11;
  *(_DWORD *)((char *)&qword_25D7C48 + 7) = 1802661719;
  byte_25D7C77 = 7;
  *(int *)((char *)&dword_25D7C60 + 3) = 1936942450;
  dword_25D7C60 = 1919181889;
  strcpy((char *)&xmmword_25D7C78, "Discoverability_Prompt");
  HIBYTE(word_25D7C8E) = 22;
  byte_25D7CA7 = 6;
  dword_25D7C90 = 1634878303;
  word_25D7C94 = 26739;
  byte_25D7CBF = 8;
  qword_25D7CA8 = 0x697269535F6F4E5FLL;
  byte_25D7CD7 = 9;
  strcpy((char *)&qword_25D7CC0, "_CityName");
  byte_25D7CEF = 8;
  qword_25D7CD8 = 0x636972656E65475FLL;
  int v23 = byte_25D7A97;
  if (byte_25D7A97 >= 0) {
    size_t v24 = byte_25D7A97;
  }
  else {
    size_t v24 = qword_25D7A88;
  }
  *(_DWORD *)&v269[48] = byte_25D6DD7;
  if (byte_25D6DD7 >= 0) {
    size_t v25 = byte_25D6DD7;
  }
  else {
    size_t v25 = unk_25D6DC8;
  }
  qword_25D7C48 = *(void *)"ContactWork";
  byte_25D7C53 = 0;
  byte_25D7C67 = 0;
  byte_25D7C96 = 0;
  byte_25D7CB0 = 0;
  byte_25D7CE0 = 0;
  unint64_t v26 = v25 + v24;
  if (v25 + v24 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  *(void *)BOOL v266 = *(void *)"ContactWork";
  *(void *)&v266[16] = *(void *)"ContactHome";
  *(void *)&v266[32] = *(void *)"_Contact";
  *(void *)&v266[48] = *(void *)"Other_Contact";
  if (v26 <= 0x16)
  {
    uint64_t v27 = &qword_25D7CF0;
    qword_25D7CF8 = 0;
    unk_25D7D00 = 0;
    qword_25D7CF0 = 0;
    byte_25D7D07 = v25 + v24;
    if (!v24) {
      goto LABEL_47;
    }
    goto LABEL_43;
  }
  uint64_t v90 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v26 | 7) != 0x17) {
    uint64_t v90 = v26 | 7;
  }
  uint64_t v91 = v90 + 1;
  uint64_t v27 = (uint64_t *)operator new(v90 + 1);
  qword_25D7CF8 = v25 + v24;
  unk_25D7D00 = v91 | 0x8000000000000000;
  qword_25D7CF0 = (uint64_t)v27;
  if (v24)
  {
LABEL_43:
    if (v23 >= 0) {
      uint64_t v28 = &qword_25D7A80;
    }
    else {
      uint64_t v28 = (uint64_t *)qword_25D7A80;
    }
    memmove(v27, v28, v24);
  }
LABEL_47:
  uint64_t v29 = (char *)v27 + v24;
  if (v25)
  {
    if (*(int *)&v269[48] >= 0) {
      uint64_t v30 = &qword_25D6DC0;
    }
    else {
      uint64_t v30 = (uint64_t *)qword_25D6DC0;
    }
    memmove(v29, v30, v25);
  }
  v29[v25] = 0;
  int v31 = byte_25D7B3F;
  if (byte_25D7B3F >= 0) {
    size_t v32 = byte_25D7B3F;
  }
  else {
    size_t v32 = qword_25D7B30;
  }
  unint64_t v33 = v32 + v24;
  if (v32 + v24 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v33 <= 0x16)
  {
    long long v34 = &qword_25D7D08;
    qword_25D7D10 = 0;
    unk_25D7D18 = 0;
    qword_25D7D08 = 0;
    byte_25D7D1F = v32 + v24;
    if (!v24) {
      goto LABEL_62;
    }
    goto LABEL_58;
  }
  uint64_t v92 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v33 | 7) != 0x17) {
    uint64_t v92 = v33 | 7;
  }
  uint64_t v93 = v92 + 1;
  long long v34 = (uint64_t *)operator new(v92 + 1);
  qword_25D7D10 = v32 + v24;
  unk_25D7D18 = v93 | 0x8000000000000000;
  qword_25D7D08 = (uint64_t)v34;
  if (v24)
  {
LABEL_58:
    if (v23 >= 0) {
      uint64_t v35 = &qword_25D7A80;
    }
    else {
      uint64_t v35 = (uint64_t *)qword_25D7A80;
    }
    memmove(v34, v35, v24);
  }
LABEL_62:
  uint64_t v36 = (char *)v34 + v24;
  if (v32)
  {
    if (v31 >= 0) {
      uint64_t v37 = &qword_25D7B28;
    }
    else {
      uint64_t v37 = (uint64_t *)qword_25D7B28;
    }
    memmove(v36, v37, v32);
  }
  v36[v32] = 0;
  qword_25D7D20 = (uint64_t)operator new(0x19uLL);
  unk_25D7D28 = *(_OWORD *)&v280[16];
  strcpy((char *)qword_25D7D20, "{ChargeStationCityName}");
  if (v33 < 0x17)
  {
    uint64_t v38 = &qword_25D7D38;
    qword_25D7D40 = 0;
    unk_25D7D48 = 0;
    qword_25D7D38 = 0;
    byte_25D7D4F = v32 + v24;
    if (!v24) {
      goto LABEL_73;
    }
    goto LABEL_69;
  }
  uint64_t v94 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v33 | 7) != 0x17) {
    uint64_t v94 = v33 | 7;
  }
  uint64_t v95 = v94 + 1;
  uint64_t v38 = (uint64_t *)operator new(v94 + 1);
  qword_25D7D40 = v32 + v24;
  unk_25D7D48 = v95 | 0x8000000000000000;
  qword_25D7D38 = (uint64_t)v38;
  if (v24)
  {
LABEL_69:
    if (v23 >= 0) {
      unint64_t v39 = &qword_25D7A80;
    }
    else {
      unint64_t v39 = (uint64_t *)qword_25D7A80;
    }
    memmove(v38, v39, v24);
  }
LABEL_73:
  unsigned __int8 v40 = (char *)v38 + v24;
  if (v32)
  {
    if (v31 >= 0) {
      int v41 = &qword_25D7B28;
    }
    else {
      int v41 = (uint64_t *)qword_25D7B28;
    }
    memmove(v40, v41, v32);
  }
  v40[v32] = 0;
  strcpy((char *)&xmmword_25D7D50, "{NewBatteryPercentage}");
  HIBYTE(word_25D7D66) = 22;
  qword_25D7D68 = (uint64_t)operator new(0x20uLL);
  xmmword_25D7D70 = v274;
  strcpy((char *)qword_25D7D68, "{OriginalBatteryPercentage}");
  byte_25D7D97 = 19;
  strcpy((char *)&xmmword_25D7D80, "_Arrival_Percentage");
  int v42 = byte_25D7B27;
  if (byte_25D7B27 >= 0) {
    size_t v43 = byte_25D7B27;
  }
  else {
    size_t v43 = qword_25D7B18;
  }
  unint64_t v44 = v43 + v25;
  if (v43 + v25 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v44 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v43 + v25;
    if (!v43) {
      goto LABEL_88;
    }
    goto LABEL_84;
  }
  uint64_t v96 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v44 | 7) != 0x17) {
    uint64_t v96 = v44 | 7;
  }
  uint64_t v97 = v96 + 1;
  p_dst = (char *)operator new(v96 + 1);
  __dst.__r_.__value_.__l.__size_ = v43 + v25;
  __dst.__r_.__value_.__r.__words[2] = v97 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (v43)
  {
LABEL_84:
    if (v42 >= 0) {
      uint64_t v46 = &qword_25D7B10;
    }
    else {
      uint64_t v46 = (uint64_t *)qword_25D7B10;
    }
    memmove(p_dst, v46, v43);
  }
LABEL_88:
  uint64_t v47 = &p_dst[v43];
  if (v25)
  {
    if (*(int *)&v269[48] >= 0) {
      uint64_t v48 = &qword_25D6DC0;
    }
    else {
      uint64_t v48 = (uint64_t *)qword_25D6DC0;
    }
    memmove(v47, v48, v25);
  }
  v47[v25] = 0;
  __n128 v49 = std::string::append(&__dst, "_Percentage");
  long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
  qword_25D7DA8 = v49->__r_.__value_.__r.__words[2];
  xmmword_25D7D98 = v50;
  v49->__r_.__value_.__l.__size_ = 0;
  v49->__r_.__value_.__r.__words[2] = 0;
  v49->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v51 = byte_25D7B27;
  if (byte_25D7B27 >= 0) {
    size_t v52 = byte_25D7B27;
  }
  else {
    size_t v52 = qword_25D7B18;
  }
  int v53 = byte_25D6DD7;
  if (byte_25D6DD7 >= 0) {
    size_t v54 = byte_25D6DD7;
  }
  else {
    size_t v54 = unk_25D6DC8;
  }
  unint64_t v55 = v54 + v52;
  if (v54 + v52 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v55 <= 0x16)
  {
    memset(&v281, 0, sizeof(v281));
    int64_t v56 = (char *)&v281;
    *((unsigned char *)&v281.__r_.__value_.__s + 23) = v54 + v52;
    if (!v52) {
      goto LABEL_108;
    }
    goto LABEL_104;
  }
  uint64_t v98 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v55 | 7) != 0x17) {
    uint64_t v98 = v55 | 7;
  }
  uint64_t v99 = v98 + 1;
  int64_t v56 = (char *)operator new(v98 + 1);
  v281.__r_.__value_.__l.__size_ = v54 + v52;
  v281.__r_.__value_.__r.__words[2] = v99 | 0x8000000000000000;
  v281.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
  if (v52)
  {
LABEL_104:
    if (v51 >= 0) {
      unint64_t v57 = &qword_25D7B10;
    }
    else {
      unint64_t v57 = (uint64_t *)qword_25D7B10;
    }
    memmove(v56, v57, v52);
  }
LABEL_108:
  uint64_t v58 = &v56[v52];
  if (v54)
  {
    if (v53 >= 0) {
      uint64_t v59 = &qword_25D6DC0;
    }
    else {
      uint64_t v59 = (uint64_t *)qword_25D6DC0;
    }
    memmove(v58, v59, v54);
  }
  v58[v54] = 0;
  if (byte_25D6E07 >= 0) {
    uint64_t v60 = (const std::string::value_type *)&qword_25D6DF0;
  }
  else {
    uint64_t v60 = (const std::string::value_type *)qword_25D6DF0;
  }
  if (byte_25D6E07 >= 0) {
    std::string::size_type v61 = byte_25D6E07;
  }
  else {
    std::string::size_type v61 = *(void *)&byte_25D6DF8;
  }
  uint64_t v62 = std::string::append(&v281, v60, v61);
  long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v63;
  v62->__r_.__value_.__l.__size_ = 0;
  v62->__r_.__value_.__r.__words[2] = 0;
  v62->__r_.__value_.__r.__words[0] = 0;
  uint64_t v64 = std::string::append(&__dst, "_Percentage");
  long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
  qword_25D7DC0 = v64->__r_.__value_.__r.__words[2];
  xmmword_25D7DB0 = v65;
  v64->__r_.__value_.__l.__size_ = 0;
  v64->__r_.__value_.__r.__words[2] = 0;
  v64->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v281.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_121;
    }
  }
  else if ((SHIBYTE(v281.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_121;
  }
  operator delete(v281.__r_.__value_.__l.__data_);
LABEL_121:
  int v66 = byte_25D7B27;
  if (byte_25D7B27 >= 0) {
    size_t v67 = byte_25D7B27;
  }
  else {
    size_t v67 = qword_25D7B18;
  }
  int v68 = byte_25D6DD7;
  if (byte_25D6DD7 >= 0) {
    size_t v69 = byte_25D6DD7;
  }
  else {
    size_t v69 = unk_25D6DC8;
  }
  unint64_t v70 = v69 + v67;
  if (v69 + v67 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v70 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    int64_t v71 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v69 + v67;
    if (!v67) {
      goto LABEL_134;
    }
    goto LABEL_130;
  }
  uint64_t v100 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v70 | 7) != 0x17) {
    uint64_t v100 = v70 | 7;
  }
  uint64_t v101 = v100 + 1;
  int64_t v71 = (char *)operator new(v100 + 1);
  __dst.__r_.__value_.__l.__size_ = v69 + v67;
  __dst.__r_.__value_.__r.__words[2] = v101 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v71;
  if (v67)
  {
LABEL_130:
    if (v66 >= 0) {
      uint64_t v72 = &qword_25D7B10;
    }
    else {
      uint64_t v72 = (uint64_t *)qword_25D7B10;
    }
    memmove(v71, v72, v67);
  }
LABEL_134:
  uint64_t v73 = &v71[v67];
  if (v69)
  {
    if (v68 >= 0) {
      uint64_t v74 = &qword_25D6DC0;
    }
    else {
      uint64_t v74 = (uint64_t *)qword_25D6DC0;
    }
    memmove(v73, v74, v69);
  }
  v73[v69] = 0;
  uint64_t v75 = std::string::append(&__dst, "_Duration");
  long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
  qword_25D7DD8 = v75->__r_.__value_.__r.__words[2];
  xmmword_25D7DC8 = v76;
  v75->__r_.__value_.__l.__size_ = 0;
  v75->__r_.__value_.__r.__words[2] = 0;
  v75->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v77 = byte_25D7B27;
  if (byte_25D7B27 >= 0) {
    size_t v78 = byte_25D7B27;
  }
  else {
    size_t v78 = qword_25D7B18;
  }
  int v79 = byte_25D6DD7;
  if (byte_25D6DD7 >= 0) {
    size_t v80 = byte_25D6DD7;
  }
  else {
    size_t v80 = unk_25D6DC8;
  }
  unint64_t v81 = v80 + v78;
  if (v80 + v78 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v81 <= 0x16)
  {
    qword_25D7DE8 = 0;
    unk_25D7DF0 = 0;
    qword_25D7DE0 = 0;
    int64_t v82 = &qword_25D7DE0;
    byte_25D7DF7 = v80 + v78;
    if (!v78) {
      goto LABEL_154;
    }
    goto LABEL_150;
  }
  uint64_t v102 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v81 | 7) != 0x17) {
    uint64_t v102 = v81 | 7;
  }
  uint64_t v103 = v102 + 1;
  int64_t v82 = (uint64_t *)operator new(v102 + 1);
  qword_25D7DE8 = v80 + v78;
  unk_25D7DF0 = v103 | 0x8000000000000000;
  qword_25D7DE0 = (uint64_t)v82;
  if (v78)
  {
LABEL_150:
    if (v77 >= 0) {
      unint64_t v83 = &qword_25D7B10;
    }
    else {
      unint64_t v83 = (uint64_t *)qword_25D7B10;
    }
    memmove(v82, v83, v78);
  }
LABEL_154:
  uint64_t v84 = (char *)v82 + v78;
  if (v80)
  {
    if (v79 >= 0) {
      std::string v85 = &qword_25D6DC0;
    }
    else {
      std::string v85 = (uint64_t *)qword_25D6DC0;
    }
    memmove(v84, v85, v80);
  }
  v84[v80] = 0;
  int v86 = byte_25D7DF7;
  if (byte_25D7DF7 >= 0) {
    size_t v87 = byte_25D7DF7;
  }
  else {
    size_t v87 = qword_25D7DE8;
  }
  unint64_t v88 = v87 + 5;
  if (v87 + 5 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v88 >= 0x17)
  {
    uint64_t v104 = (v88 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v88 | 7) != 0x17) {
      uint64_t v104 = v88 | 7;
    }
    uint64_t v105 = v104 + 1;
    uint64_t v89 = (uint64_t *)operator new(v104 + 1);
    qword_25D7E00 = v87 + 5;
    unk_25D7E08 = v105 | 0x8000000000000000;
    qword_25D7DF8 = (uint64_t)v89;
  }
  else
  {
    uint64_t v89 = &qword_25D7DF8;
    qword_25D7E00 = 0;
    unk_25D7E08 = 0;
    qword_25D7DF8 = 0;
    byte_25D7E0F = v87 + 5;
    if (!v87) {
      goto LABEL_201;
    }
  }
  if (v86 >= 0) {
    unint64_t v106 = &qword_25D7DE0;
  }
  else {
    unint64_t v106 = (uint64_t *)qword_25D7DE0;
  }
  memmove(v89, v106, v87);
LABEL_201:
  strcpy((char *)v89 + v87, "_Name");
  int v107 = byte_25D7B27;
  if (byte_25D7B27 >= 0) {
    size_t v108 = byte_25D7B27;
  }
  else {
    size_t v108 = qword_25D7B18;
  }
  int v109 = byte_25D6DD7;
  if (byte_25D6DD7 >= 0) {
    size_t v110 = byte_25D6DD7;
  }
  else {
    size_t v110 = unk_25D6DC8;
  }
  unint64_t v111 = v110 + v108;
  if (v110 + v108 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v111 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    uint64_t v112 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v110 + v108;
    if (!v108) {
      goto LABEL_214;
    }
    goto LABEL_210;
  }
  uint64_t v122 = (v111 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v111 | 7) != 0x17) {
    uint64_t v122 = v111 | 7;
  }
  uint64_t v123 = v122 + 1;
  uint64_t v112 = (char *)operator new(v122 + 1);
  __dst.__r_.__value_.__l.__size_ = v110 + v108;
  __dst.__r_.__value_.__r.__words[2] = v123 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v112;
  if (v108)
  {
LABEL_210:
    if (v107 >= 0) {
      long long v113 = &qword_25D7B10;
    }
    else {
      long long v113 = (uint64_t *)qword_25D7B10;
    }
    memmove(v112, v113, v108);
  }
LABEL_214:
  uint64_t v114 = &v112[v108];
  if (v110)
  {
    if (v109 >= 0) {
      BOOL v115 = &qword_25D6DC0;
    }
    else {
      BOOL v115 = (uint64_t *)qword_25D6DC0;
    }
    memmove(v114, v115, v110);
  }
  v114[v110] = 0;
  uint64_t v116 = std::string::append(&__dst, "_Connector_Type");
  long long v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
  qword_25D7E20 = v116->__r_.__value_.__r.__words[2];
  xmmword_25D7E10 = v117;
  v116->__r_.__value_.__l.__size_ = 0;
  v116->__r_.__value_.__r.__words[2] = 0;
  v116->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v118 = SHIBYTE(qword_25D7E20);
  if (qword_25D7E20 >= 0) {
    size_t v119 = HIBYTE(qword_25D7E20);
  }
  else {
    size_t v119 = *((void *)&xmmword_25D7E10 + 1);
  }
  unint64_t v120 = v119 + 6;
  if (v119 + 6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v120 >= 0x17)
  {
    uint64_t v124 = (v120 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v120 | 7) != 0x17) {
      uint64_t v124 = v120 | 7;
    }
    uint64_t v125 = v124 + 1;
    BOOL v121 = (uint64_t *)operator new(v124 + 1);
    qword_25D7E30 = v119 + 6;
    unk_25D7E38 = v125 | 0x8000000000000000;
    qword_25D7E28 = (uint64_t)v121;
  }
  else
  {
    BOOL v121 = &qword_25D7E28;
    qword_25D7E30 = 0;
    unk_25D7E38 = 0;
    qword_25D7E28 = 0;
    byte_25D7E3F = v119 + 6;
    if (!v119) {
      goto LABEL_239;
    }
  }
  if (v118 >= 0) {
    uint64_t v126 = &xmmword_25D7E10;
  }
  else {
    uint64_t v126 = (long long *)xmmword_25D7E10;
  }
  memmove(v121, v126, v119);
LABEL_239:
  strcpy((char *)v121 + v119, "_Power");
  int v127 = byte_25D7B27;
  if (byte_25D7B27 >= 0) {
    size_t v128 = byte_25D7B27;
  }
  else {
    size_t v128 = qword_25D7B18;
  }
  int v129 = byte_25D6DD7;
  if (byte_25D6DD7 >= 0) {
    size_t v130 = byte_25D6DD7;
  }
  else {
    size_t v130 = unk_25D6DC8;
  }
  unint64_t v131 = v130 + v128;
  if (v130 + v128 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v131 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    unint64_t v132 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v130 + v128;
    if (!v128) {
      goto LABEL_252;
    }
    goto LABEL_248;
  }
  uint64_t v161 = (v131 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v131 | 7) != 0x17) {
    uint64_t v161 = v131 | 7;
  }
  uint64_t v162 = v161 + 1;
  unint64_t v132 = (char *)operator new(v161 + 1);
  __dst.__r_.__value_.__l.__size_ = v130 + v128;
  __dst.__r_.__value_.__r.__words[2] = v162 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v132;
  if (v128)
  {
LABEL_248:
    if (v127 >= 0) {
      BOOL v133 = &qword_25D7B10;
    }
    else {
      BOOL v133 = (uint64_t *)qword_25D7B10;
    }
    memmove(v132, v133, v128);
  }
LABEL_252:
  int64_t v134 = &v132[v128];
  if (v130)
  {
    if (v129 >= 0) {
      unint64_t v135 = &qword_25D6DC0;
    }
    else {
      unint64_t v135 = (uint64_t *)qword_25D6DC0;
    }
    memmove(v134, v135, v130);
  }
  v134[v130] = 0;
  if (byte_25D759F >= 0) {
    unint64_t v136 = (const std::string::value_type *)&qword_25D7588;
  }
  else {
    unint64_t v136 = (const std::string::value_type *)qword_25D7588;
  }
  if (byte_25D759F >= 0) {
    std::string::size_type v137 = byte_25D759F;
  }
  else {
    std::string::size_type v137 = unk_25D7590;
  }
  uint64_t v138 = std::string::append(&__dst, v136, v137);
  long long v139 = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
  qword_25D7E50 = v138->__r_.__value_.__r.__words[2];
  xmmword_25D7E40 = v139;
  v138->__r_.__value_.__l.__size_ = 0;
  v138->__r_.__value_.__r.__words[2] = 0;
  v138->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v140 = byte_25D7B27;
  if (byte_25D7B27 >= 0) {
    size_t v141 = byte_25D7B27;
  }
  else {
    size_t v141 = qword_25D7B18;
  }
  int v142 = byte_25D6DD7;
  if (byte_25D6DD7 >= 0) {
    size_t v143 = byte_25D6DD7;
  }
  else {
    size_t v143 = unk_25D6DC8;
  }
  unint64_t v144 = v143 + v141;
  if (v143 + v141 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v144 <= 0x16)
  {
    memset(&v281, 0, sizeof(v281));
    unint64_t v145 = (char *)&v281;
    *((unsigned char *)&v281.__r_.__value_.__s + 23) = v143 + v141;
    if (!v141) {
      goto LABEL_278;
    }
    goto LABEL_274;
  }
  uint64_t v163 = (v144 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v144 | 7) != 0x17) {
    uint64_t v163 = v144 | 7;
  }
  uint64_t v164 = v163 + 1;
  unint64_t v145 = (char *)operator new(v163 + 1);
  v281.__r_.__value_.__l.__size_ = v143 + v141;
  v281.__r_.__value_.__r.__words[2] = v164 | 0x8000000000000000;
  v281.__r_.__value_.__r.__words[0] = (std::string::size_type)v145;
  if (v141)
  {
LABEL_274:
    if (v140 >= 0) {
      BOOL v146 = &qword_25D7B10;
    }
    else {
      BOOL v146 = (uint64_t *)qword_25D7B10;
    }
    memmove(v145, v146, v141);
  }
LABEL_278:
  unint64_t v147 = &v145[v141];
  if (v143)
  {
    if (v142 >= 0) {
      v148 = &qword_25D6DC0;
    }
    else {
      v148 = (uint64_t *)qword_25D6DC0;
    }
    memmove(v147, v148, v143);
  }
  v147[v143] = 0;
  if (byte_25D6E07 >= 0) {
    v149 = (const std::string::value_type *)&qword_25D6DF0;
  }
  else {
    v149 = (const std::string::value_type *)qword_25D6DF0;
  }
  if (byte_25D6E07 >= 0) {
    std::string::size_type v150 = byte_25D6E07;
  }
  else {
    std::string::size_type v150 = *(void *)&byte_25D6DF8;
  }
  unint64_t v151 = std::string::append(&v281, v149, v150);
  long long v152 = *(_OWORD *)&v151->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v151->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v152;
  v151->__r_.__value_.__l.__size_ = 0;
  v151->__r_.__value_.__r.__words[2] = 0;
  v151->__r_.__value_.__r.__words[0] = 0;
  if (byte_25D759F >= 0) {
    BOOL v153 = (const std::string::value_type *)&qword_25D7588;
  }
  else {
    BOOL v153 = (const std::string::value_type *)qword_25D7588;
  }
  if (byte_25D759F >= 0) {
    std::string::size_type v154 = byte_25D759F;
  }
  else {
    std::string::size_type v154 = unk_25D7590;
  }
  unint64_t v155 = std::string::append(&__dst, v153, v154);
  long long v156 = *(_OWORD *)&v155->__r_.__value_.__l.__data_;
  qword_25D7E68 = v155->__r_.__value_.__r.__words[2];
  xmmword_25D7E58 = v156;
  v155->__r_.__value_.__l.__size_ = 0;
  v155->__r_.__value_.__r.__words[2] = 0;
  v155->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v281.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_297;
    }
  }
  else if ((SHIBYTE(v281.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_297;
  }
  operator delete(v281.__r_.__value_.__l.__data_);
LABEL_297:
  byte_25D7E87 = 16;
  strcpy((char *)&xmmword_25D7E70, "Use_NACS_Adapter");
  byte_25D7E9F = 16;
  strcpy(byte_25D7E88, "Start_Route_Sign");
  qword_25D7EA0 = (uint64_t)operator new(0x20uLL);
  unk_25D7EA8 = v277;
  strcpy((char *)qword_25D7EA0, "Start_Route_Spoken_Primary");
  int v157 = byte_25D6537;
  if (byte_25D6537 >= 0) {
    size_t v158 = byte_25D6537;
  }
  else {
    size_t v158 = qword_25D6528;
  }
  unint64_t v159 = v158 + 27;
  if (v158 + 27 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v159 <= 0x16)
  {
    __n128 v160 = &qword_25D7EB8;
    qword_25D7EC0 = 0;
    unk_25D7EC8 = 0;
    qword_25D7EB8 = 0;
    byte_25D7ECF = v158 + 27;
LABEL_314:
    if (v157 >= 0) {
      BOOL v167 = &qword_25D6520;
    }
    else {
      BOOL v167 = (uint64_t *)qword_25D6520;
    }
    memmove(v160, v167, v158);
    goto LABEL_318;
  }
  uint64_t v165 = (v159 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v159 | 7) != 0x17) {
    uint64_t v165 = v159 | 7;
  }
  uint64_t v166 = v165 + 1;
  __n128 v160 = (uint64_t *)operator new(v165 + 1);
  qword_25D7EC0 = v158 + 27;
  unk_25D7EC8 = v166 | 0x8000000000000000;
  qword_25D7EB8 = (uint64_t)v160;
  if (v158) {
    goto LABEL_314;
  }
LABEL_318:
  strcpy((char *)v160 + v158, "Turn_Around_To_Route_Spoken");
  strcpy(&byte_25D7EE7, "\t_Two_Lanes");
  strcpy((char *)&qword_25D7ED0, "_One_Lane");
  strcpy(&byte_25D7EFF, "\n_Three_Lanes");
  byte_25D7F17 = 12;
  byte_25D7F2F = 11;
  strcpy((char *)&qword_25D7F18, "_Four_Lanes");
  byte_25D7F47 = 11;
  strcpy((char *)&qword_25D7F30, "_Five_Lanes");
  strcpy(&byte_25D7F5F, "\n_Seven_Lanes");
  strcpy((char *)&qword_25D7F48, "_Six_Lanes");
  byte_25D7F77 = 12;
  byte_25D7F8F = 12;
  strcpy((char *)&qword_25D7F78, "_Eight_Lanes");
  byte_25D7FA7 = 12;
  strcpy((char *)&qword_25D7F90, "_Second_Lane");
  byte_25D7FBF = 11;
  strcpy((char *)&qword_25D7FA8, "_Third_Lane");
  byte_25D7FD7 = 19;
  *(_OWORD *)&v269[48] = *(_OWORD *)"_Second_Third_Lanes";
  strcpy((char *)&xmmword_25D7FC0, "_Second_Third_Lanes");
  byte_25D7FEF = 4;
  strcpy((char *)&dword_25D7FD8, "Left");
  byte_25D8007 = 5;
  byte_25D7FF4 = 116;
  dword_25D7FF0 = 1751607634;
  byte_25D7FF5 = 0;
  byte_25D801F = 6;
  strcpy((char *)&dword_25D8008, "Middle");
  BYTE1(qword_25D8030) = 0;
  WORD1(qword_25D8030) = 0;
  HIDWORD(qword_25D8030) = 0x10000000;
  strcpy((char *)dword_25D8020, "Left_Second_Lane");
  BYTE1(qword_25D8048) = 0;
  WORD1(qword_25D8048) = 0;
  HIDWORD(qword_25D8048) = 285212672;
  strcpy((char *)&dword_25D8038, "Right_Second_Lan");
  qword_25D8060 = 0xF00000000000000;
  strcpy((char *)&dword_25D8050, "Left_Third_Lane");
  qword_25D8078 = 0x1000000000000000;
  byte_25D806C = 116;
  dword_25D8068 = 1751607634;
  dword_25D8074 = 1701732684;
  unk_25D806D = *(void *)"_Third_Lane";
  BOOL v168 = (char *)operator new(0x19uLL);
  qword_25D8080 = (uint64_t)v168;
  unk_25D8088 = *(_OWORD *)&v280[16];
  *(_DWORD *)BOOL v168 = 1952867660;
  strcpy(v168 + 19, "anes");
  *(_OWORD *)(v168 + 4) = *(_OWORD *)&v269[48];
  BOOL v169 = (char *)operator new(0x20uLL);
  qword_25D8098 = (uint64_t)v169;
  xmmword_25D80A0 = *(_OWORD *)v280;
  *(_DWORD *)BOOL v169 = 1751607634;
  v169[4] = 116;
  strcpy(v169 + 20, "anes");
  *(_OWORD *)(v169 + 5) = *(_OWORD *)&v269[48];
  byte_25D80C7 = 5;
  strcpy((char *)&dword_25D80B0, "_Stay");
  byte_25D80DF = 13;
  strcpy((char *)&qword_25D80C8, "Continue_Sign");
  byte_25D80F7 = 8;
  strcpy((char *)&qword_25D80E0, "Continue");
  int v170 = byte_25D75B7;
  if (byte_25D75B7 >= 0) {
    size_t v171 = byte_25D75B7;
  }
  else {
    size_t v171 = qword_25D75A8;
  }
  unint64_t v172 = v171 + 8;
  if (v171 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v172 >= 0x17)
  {
    uint64_t v174 = (v172 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v172 | 7) != 0x17) {
      uint64_t v174 = v172 | 7;
    }
    uint64_t v175 = v174 + 1;
    unint64_t v176 = operator new(v174 + 1);
    qword_25D8100 = v171 + 8;
    qword_25D8108 = v175 | 0x8000000000000000;
    qword_25D80F8 = (uint64_t)v176;
    *unint64_t v176 = 0x65756E69746E6F43;
    BOOL v173 = v176 + 1;
  }
  else
  {
    qword_25D8108 = 0;
    HIBYTE(qword_25D8108) = v171 + 8;
    qword_25D80F8 = 0x65756E69746E6F43;
    qword_25D8100 = 0;
    BOOL v173 = &qword_25D8100;
    if (!v171) {
      goto LABEL_332;
    }
  }
  if (v170 >= 0) {
    BOOL v177 = &qword_25D75A0;
  }
  else {
    BOOL v177 = (uint64_t *)qword_25D75A0;
  }
  memmove(v173, v177, v171);
LABEL_332:
  *((unsigned char *)v173 + v171) = 0;
  int v178 = SHIBYTE(qword_25D7610);
  if (qword_25D7610 >= 0) {
    size_t v179 = HIBYTE(qword_25D7610);
  }
  else {
    size_t v179 = unk_25D7608;
  }
  unint64_t v180 = v179 + 8;
  if (v179 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v180 >= 0x17)
  {
    uint64_t v182 = (v180 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v180 | 7) != 0x17) {
      uint64_t v182 = v180 | 7;
    }
    uint64_t v183 = v182 + 1;
    v184 = operator new(v182 + 1);
    qword_25D8118 = v179 + 8;
    qword_25D8120 = v183 | 0x8000000000000000;
    qword_25D8110 = (uint64_t)v184;
    void *v184 = qword_25D80E0;
    BOOL v181 = v184 + 1;
  }
  else
  {
    qword_25D8120 = 0;
    HIBYTE(qword_25D8120) = v179 + 8;
    qword_25D8110 = qword_25D80E0;
    qword_25D8118 = 0;
    BOOL v181 = &qword_25D8118;
    if (!v179) {
      goto LABEL_346;
    }
  }
  if (v178 >= 0) {
    unint64_t v185 = &qword_25D7600;
  }
  else {
    unint64_t v185 = (uint64_t *)qword_25D7600;
  }
  memmove(v181, v185, v179);
LABEL_346:
  *((unsigned char *)v181 + v179) = 0;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 1;
  LOWORD(__dst.__r_.__value_.__l.__data_) = 83;
  v283[23] = 2;
  strcpy(v283, "SW");
  v285[7] = 1;
  LOWORD(v284[0]) = 87;
  HIBYTE(v286) = 2;
  strcpy(&v285[8], "NW");
  HIBYTE(v288) = 1;
  LOWORD(v287[0]) = 78;
  HIBYTE(v290) = 2;
  strcpy((char *)&v289, "NE");
  HIBYTE(v292) = 1;
  LOWORD(v291) = 69;
  HIBYTE(v294) = 2;
  strcpy((char *)&__p, "SE");
  sub_4BDC0C(qword_25D8128, (uint64_t)&__dst, 8uLL);
  if (SHIBYTE(v294) < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v292) & 0x80000000) == 0)
    {
LABEL_348:
      if ((SHIBYTE(v290) & 0x80000000) == 0) {
        goto LABEL_349;
      }
      goto LABEL_383;
    }
  }
  else if ((SHIBYTE(v292) & 0x80000000) == 0)
  {
    goto LABEL_348;
  }
  operator delete((void *)v291);
  if ((SHIBYTE(v290) & 0x80000000) == 0)
  {
LABEL_349:
    if ((SHIBYTE(v288) & 0x80000000) == 0) {
      goto LABEL_350;
    }
    goto LABEL_384;
  }
LABEL_383:
  operator delete((void *)v289);
  if ((SHIBYTE(v288) & 0x80000000) == 0)
  {
LABEL_350:
    if ((SHIBYTE(v286) & 0x80000000) == 0) {
      goto LABEL_351;
    }
    goto LABEL_385;
  }
LABEL_384:
  operator delete(v287[0]);
  if ((SHIBYTE(v286) & 0x80000000) == 0)
  {
LABEL_351:
    if ((v285[7] & 0x80000000) == 0) {
      goto LABEL_352;
    }
    goto LABEL_386;
  }
LABEL_385:
  operator delete(*(void **)&v285[8]);
  if ((v285[7] & 0x80000000) == 0)
  {
LABEL_352:
    if ((v283[23] & 0x80000000) == 0) {
      goto LABEL_353;
    }
LABEL_387:
    operator delete(*(void **)v283);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_354;
    }
    goto LABEL_388;
  }
LABEL_386:
  operator delete(v284[0]);
  if ((v283[23] & 0x80000000) != 0) {
    goto LABEL_387;
  }
LABEL_353:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_354;
  }
LABEL_388:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_354:
  byte_25D8157 = 13;
  strcpy((char *)&qword_25D8140, "{instruction}");
  byte_25D816F = 20;
  strcpy(byte_25D8158, "{primaryInstruction}");
  strcpy((char *)&xmmword_25D8170, "{secondaryInstruction}");
  HIBYTE(word_25D8186) = 22;
  qword_25D8188 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25D8190 = v279;
  strcpy((char *)qword_25D8188, "{andSecondaryInstruction}");
  qword_25D81A0 = (uint64_t)operator new(0x20uLL);
  unk_25D81A8 = *(_OWORD *)v280;
  strcpy((char *)qword_25D81A0, "{toSecondaryInstruction}");
  byte_25D81CF = 21;
  strcpy(byte_25D81B8, "{continueInstruction}");
  qword_25D81D0 = (uint64_t)operator new(0x20uLL);
  unk_25D81D8 = v277;
  strcpy((char *)qword_25D81D0, "{thenSecondaryInstruction}");
  byte_25D81FF = 14;
  strcpy((char *)&qword_25D81E8, "{instruction1}");
  byte_25D8217 = 14;
  strcpy((char *)&qword_25D8200, "{instruction2}");
  strcpy(&byte_25D822F, "\n{nextDistance}");
  strcpy((char *)&qword_25D8218, "{distance}");
  byte_25D8247 = 14;
  byte_25D825F = 16;
  strcpy(byte_25D8248, "{valid_distance}");
  strcpy(&byte_25D8277, "\n{valid_distance}");
  strcpy((char *)&qword_25D8260, "{distance}");
  byte_25D828F = 16;
  byte_25D82A7 = 15;
  strcpy((char *)&qword_25D8290, "{ClimbDistance}");
  byte_25D82BF = 17;
  strcpy(byte_25D82A8, "{DescentDistance}");
  byte_25D82D7 = 13;
  strcpy((char *)&qword_25D82C0, "{nonBrkSpace}");
  byte_25D82EF = 9;
  strcpy((char *)&qword_25D82D8, "{newLine}");
  byte_25D8307 = 6;
  word_25D82F4 = -24382;
  dword_25D82F0 = -1211981630;
  byte_25D82F6 = 0;
  byte_25D831F = 2;
  word_25D8308 = -24382;
  byte_25D830A = 0;
  byte_25D8337 = 1;
  word_25D8320 = 10;
  byte_25D834F = 1;
  word_25D8338 = 32;
  byte_25D8367 = 2;
  strcpy((char *)&word_25D8350, "\n\n");
  strcpy(&byte_25D837F, "\t{TowardShield1}");
  strcpy((char *)&qword_25D8368, "{Shield1}");
  byte_25D8397 = 15;
  strcpy(&byte_25D83AF, "\t{TowardShield2}");
  strcpy((char *)&qword_25D8398, "{Shield2}");
  byte_25D83C7 = 15;
  byte_25D83DF = 12;
  strcpy((char *)&qword_25D83C8, "{Direction1}");
  byte_25D83F7 = 12;
  strcpy((char *)&qword_25D83E0, "{Direction2}");
  byte_25D840F = 18;
  strcpy((char *)&xmmword_25D83F8, "{TowardDirection1}");
  byte_25D8427 = 18;
  strcpy((char *)&xmmword_25D8410, "{TowardDirection2}");
  byte_25D843F = 7;
  strcpy((char *)&dword_25D8428, "{Icon1}");
  byte_25D8457 = 7;
  strcpy((char *)&dword_25D8440, "{Icon2}");
  byte_25D8458[23] = 14;
  strcpy(byte_25D8458, "{Intersection}");
  byte_25D8487 = 6;
  strcpy((char *)&xmmword_25D8470, "{Road}");
  byte_25D849F = 7;
  strcpy((char *)&dword_25D8488, "{Road1}");
  byte_25D84B7 = 7;
  strcpy((char *)&xmmword_25D84A0, "{Road2}");
  strcpy(&byte_25D84CF, "\n{Freeway}");
  strcpy((char *)&qword_25D84B8, "{Elevator}");
  strcpy(&byte_25D84E7, "\t{Ferry}");
  byte_25D84FF = 7;
  byte_25D8517 = 13;
  strcpy((char *)&xmmword_25D8500, "{ShuttleName}");
  byte_25D852F = 11;
  strcpy((char *)&qword_25D8518, "{Signpost1}");
  byte_25D8547 = 11;
  strcpy((char *)&xmmword_25D8530, "{Signpost2}");
  byte_25D855F = 12;
  strcpy((char *)&xmmword_25D8548, "{ExitNumber}");
  strcpy(&byte_25D8577, "\t{Name}");
  strcpy((char *)&xmmword_25D8560, "{Address}");
  byte_25D858F = 6;
  byte_25D85A7 = 11;
  strcpy((char *)&xmmword_25D8590, "{PlaceName}");
  byte_25D85BF = 14;
  strcpy((char *)&xmmword_25D85A8, "{ElevatorName}");
  byte_25D85D7 = 15;
  strcpy((char *)&xmmword_25D85C0, "{EscalatorName}");
  byte_25D85EF = 12;
  strcpy((char *)&xmmword_25D85D8, "{StairsName}");
  strcpy(&byte_25D8607, "\n{BridgeName}");
  strcpy((char *)&xmmword_25D85F0, "{RampName}");
  byte_25D861F = 12;
  byte_25D8637 = 12;
  strcpy((char *)&xmmword_25D8620, "{TunnelName}");
  byte_25D864F = 13;
  strcpy((char *)&xmmword_25D8638, "{CustomLabel}");
  std::string __dst = *(std::string *)byte_25D8458;
  *(_OWORD *)BOOL v283 = xmmword_25D8470;
  *(void *)&v283[16] = unk_25D8480;
  *(_OWORD *)BOOL v284 = *(_OWORD *)&dword_25D8488;
  *(void *)int64_t v285 = unk_25D8498;
  *(_OWORD *)&v285[8] = xmmword_25D84A0;
  uint64_t v286 = unk_25D84B0;
  *(_OWORD *)uint64_t v287 = *(_OWORD *)&qword_25D84B8;
  uint64_t v288 = unk_25D84C8;
  uint64_t v290 = unk_25D84E0;
  long long v289 = xmmword_25D84D0;
  long long v291 = *(_OWORD *)&dword_25D84E8;
  uint64_t v292 = unk_25D84F8;
  uint64_t v294 = unk_25D8510;
  long long __p = xmmword_25D8500;
  long long v295 = *(_OWORD *)&qword_25D8518;
  uint64_t v296 = unk_25D8528;
  uint64_t v298 = unk_25D8540;
  long long v297 = xmmword_25D8530;
  long long v299 = xmmword_25D8548;
  long long v301 = xmmword_25D8560;
  uint64_t v300 = unk_25D8558;
  uint64_t v302 = unk_25D8570;
  long long v303 = xmmword_25D8578;
  long long v305 = xmmword_25D8590;
  uint64_t v304 = unk_25D8588;
  uint64_t v306 = unk_25D85A0;
  long long v307 = xmmword_25D85A8;
  long long v309 = xmmword_25D85C0;
  uint64_t v308 = unk_25D85B8;
  uint64_t v310 = unk_25D85D0;
  long long v311 = xmmword_25D85D8;
  long long v313 = xmmword_25D85F0;
  uint64_t v312 = unk_25D85E8;
  uint64_t v314 = unk_25D8600;
  long long v315 = xmmword_25D8608;
  long long v317 = xmmword_25D8620;
  uint64_t v316 = unk_25D8618;
  uint64_t v318 = unk_25D8630;
  uint64_t v320 = unk_25D8648;
  long long v319 = xmmword_25D8638;
  sub_4BDC0C(qword_25D8650, (uint64_t)&__dst, 0x15uLL);
  if (SHIBYTE(v320) < 0)
  {
    operator delete((void *)v319);
    if ((SHIBYTE(v318) & 0x80000000) == 0)
    {
LABEL_356:
      if ((SHIBYTE(v316) & 0x80000000) == 0) {
        goto LABEL_357;
      }
      goto LABEL_391;
    }
  }
  else if ((SHIBYTE(v318) & 0x80000000) == 0)
  {
    goto LABEL_356;
  }
  operator delete((void *)v317);
  if ((SHIBYTE(v316) & 0x80000000) == 0)
  {
LABEL_357:
    if ((SHIBYTE(v314) & 0x80000000) == 0) {
      goto LABEL_358;
    }
    goto LABEL_392;
  }
LABEL_391:
  operator delete((void *)v315);
  if ((SHIBYTE(v314) & 0x80000000) == 0)
  {
LABEL_358:
    if ((SHIBYTE(v312) & 0x80000000) == 0) {
      goto LABEL_359;
    }
    goto LABEL_393;
  }
LABEL_392:
  operator delete((void *)v313);
  if ((SHIBYTE(v312) & 0x80000000) == 0)
  {
LABEL_359:
    if ((SHIBYTE(v310) & 0x80000000) == 0) {
      goto LABEL_360;
    }
    goto LABEL_394;
  }
LABEL_393:
  operator delete((void *)v311);
  if ((SHIBYTE(v310) & 0x80000000) == 0)
  {
LABEL_360:
    if ((SHIBYTE(v308) & 0x80000000) == 0) {
      goto LABEL_361;
    }
    goto LABEL_395;
  }
LABEL_394:
  operator delete((void *)v309);
  if ((SHIBYTE(v308) & 0x80000000) == 0)
  {
LABEL_361:
    if ((SHIBYTE(v306) & 0x80000000) == 0) {
      goto LABEL_362;
    }
    goto LABEL_396;
  }
LABEL_395:
  operator delete((void *)v307);
  if ((SHIBYTE(v306) & 0x80000000) == 0)
  {
LABEL_362:
    if ((SHIBYTE(v304) & 0x80000000) == 0) {
      goto LABEL_363;
    }
    goto LABEL_397;
  }
LABEL_396:
  operator delete((void *)v305);
  if ((SHIBYTE(v304) & 0x80000000) == 0)
  {
LABEL_363:
    if ((SHIBYTE(v302) & 0x80000000) == 0) {
      goto LABEL_364;
    }
    goto LABEL_398;
  }
LABEL_397:
  operator delete((void *)v303);
  if ((SHIBYTE(v302) & 0x80000000) == 0)
  {
LABEL_364:
    if ((SHIBYTE(v300) & 0x80000000) == 0) {
      goto LABEL_365;
    }
    goto LABEL_399;
  }
LABEL_398:
  operator delete((void *)v301);
  if ((SHIBYTE(v300) & 0x80000000) == 0)
  {
LABEL_365:
    if ((SHIBYTE(v298) & 0x80000000) == 0) {
      goto LABEL_366;
    }
    goto LABEL_400;
  }
LABEL_399:
  operator delete((void *)v299);
  if ((SHIBYTE(v298) & 0x80000000) == 0)
  {
LABEL_366:
    if ((SHIBYTE(v296) & 0x80000000) == 0) {
      goto LABEL_367;
    }
    goto LABEL_401;
  }
LABEL_400:
  operator delete((void *)v297);
  if ((SHIBYTE(v296) & 0x80000000) == 0)
  {
LABEL_367:
    if ((SHIBYTE(v294) & 0x80000000) == 0) {
      goto LABEL_368;
    }
    goto LABEL_402;
  }
LABEL_401:
  operator delete((void *)v295);
  if ((SHIBYTE(v294) & 0x80000000) == 0)
  {
LABEL_368:
    if ((SHIBYTE(v292) & 0x80000000) == 0) {
      goto LABEL_369;
    }
    goto LABEL_403;
  }
LABEL_402:
  operator delete((void *)__p);
  if ((SHIBYTE(v292) & 0x80000000) == 0)
  {
LABEL_369:
    if ((SHIBYTE(v290) & 0x80000000) == 0) {
      goto LABEL_370;
    }
    goto LABEL_404;
  }
LABEL_403:
  operator delete((void *)v291);
  if ((SHIBYTE(v290) & 0x80000000) == 0)
  {
LABEL_370:
    if ((SHIBYTE(v288) & 0x80000000) == 0) {
      goto LABEL_371;
    }
    goto LABEL_405;
  }
LABEL_404:
  operator delete((void *)v289);
  if ((SHIBYTE(v288) & 0x80000000) == 0)
  {
LABEL_371:
    if ((SHIBYTE(v286) & 0x80000000) == 0) {
      goto LABEL_372;
    }
    goto LABEL_406;
  }
LABEL_405:
  operator delete(v287[0]);
  if ((SHIBYTE(v286) & 0x80000000) == 0)
  {
LABEL_372:
    if ((v285[7] & 0x80000000) == 0) {
      goto LABEL_373;
    }
    goto LABEL_407;
  }
LABEL_406:
  operator delete(*(void **)&v285[8]);
  if ((v285[7] & 0x80000000) == 0)
  {
LABEL_373:
    if ((v283[23] & 0x80000000) == 0) {
      goto LABEL_374;
    }
LABEL_408:
    operator delete(*(void **)v283);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_375;
    }
    goto LABEL_409;
  }
LABEL_407:
  operator delete(v284[0]);
  if ((v283[23] & 0x80000000) != 0) {
    goto LABEL_408;
  }
LABEL_374:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_375;
  }
LABEL_409:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_375:
  qword_25D8668 = (uint64_t)operator new(0x19uLL);
  unk_25D8670 = *(_OWORD *)&v280[16];
  strcpy((char *)qword_25D8668, "From_User_Location_List");
  byte_25D8697 = 20;
  strcpy(byte_25D8680, "Origin_Waypoint_List");
  qword_25D8698 = (uint64_t)operator new(0x20uLL);
  unk_25D86A0 = v277;
  strcpy((char *)qword_25D8698, "Intermediate_Waypoint_List");
  unk_25D86B0 = operator new(0x20uLL);
  unk_25D86B8 = v279;
  strcpy(unk_25D86B0, "Destination_Waypoint_List");
  byte_25D86DF = 15;
  strcpy(byte_25D86C8, "{toDestination}");
  byte_25D86F7 = 13;
  strcpy((char *)&xmmword_25D86E0, "{Destination}");
  byte_25D870F = 7;
  strcpy(byte_25D86F8, "To_Home");
  byte_25D8727 = 14;
  strcpy(byte_25D8710, "To_ContactHome");
  byte_25D873F = 7;
  strcpy(byte_25D8728, "To_Work");
  byte_25D8757 = 14;
  strcpy(byte_25D8740, "To_ContactWork");
  strcpy(&byte_25D876F, "\nTo_Business");
  strcpy(byte_25D8758, "To_Address");
  byte_25D8787 = 11;
  byte_25D879F = 16;
  strcpy(byte_25D8788, "To_Other_Contact");
  strcpy(&byte_25D87B7, "\tTo_ContactSchool");
  strcpy(byte_25D87A0, "To_School");
  byte_25D87CF = 16;
  byte_25D87E7 = 17;
  strcpy(algn_25D87D0, "To_PersonLocation");
  qword_25D87E8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25D87F0 = v278;
  strcpy((char *)qword_25D87E8, "To_ContactCustomLabelAddress");
  byte_25D8817 = 7;
  strcpy((char *)&dword_25D8800, "At_Home");
  byte_25D882F = 14;
  strcpy((char *)&qword_25D8818, "At_ContactHome");
  byte_25D8847 = 7;
  strcpy((char *)&dword_25D8830, "At_Work");
  byte_25D885F = 14;
  strcpy((char *)&qword_25D8848, "At_ContactWork");
  strcpy(&byte_25D8877, "\nAt_Business");
  strcpy((char *)&qword_25D8860, "At_Address");
  byte_25D888F = 11;
  byte_25D88A7 = 16;
  strcpy(algn_25D8890, "At_Other_Contact");
  byte_25D88BF = 4;
  strcpy((char *)&dword_25D88A8, "Home");
  byte_25D88D7 = 11;
  strcpy((char *)&qword_25D88C0 + 7, "Home");
  qword_25D88C0 = *(void *)&v266[16];
  byte_25D88EF = 4;
  strcpy((char *)&dword_25D88D8, "Work");
  byte_25D8907 = 11;
  strcpy((char *)&qword_25D88F0 + 7, "Work");
  qword_25D88F0 = *(void *)v266;
  byte_25D891F = 7;
  strcpy((char *)&dword_25D8908, "Address");
  byte_25D8937 = 8;
  strcpy((char *)&qword_25D8920, "Business");
  byte_25D894F = 13;
  qword_25D8938 = *(void *)&v266[48];
  *(uint64_t *)((char *)&qword_25D8938 + 5) = *(void *)&v266[32];
  byte_25D8945 = 0;
  byte_25D8967 = 6;
  strcpy((char *)&dword_25D8950, "School");
  byte_25D897F = 13;
  strcpy((char *)&qword_25D8968, "ContactSchool");
  byte_25D8997 = 14;
  strcpy((char *)&qword_25D8980, "PersonLocation");
  qword_25D8998 = (uint64_t)operator new(0x20uLL);
  xmmword_25D89A0 = v279;
  strcpy((char *)qword_25D8998, "ContactCustomLabelAddress");
  if (byte_25D86F7 < 0)
  {
    sub_4200(&xmmword_25D89B0, (void *)xmmword_25D86E0, *((unint64_t *)&xmmword_25D86E0 + 1));
  }
  else
  {
    xmmword_25D89B0 = xmmword_25D86E0;
    qword_25D89C0 = unk_25D86F0;
  }
  byte_25D89DF = 16;
  strcpy((char *)&xmmword_25D89C8, "{PrevExitNumber}");
  byte_25D89F7 = 10;
  strcpy((char *)&qword_25D89E0, "{PrevRoad}");
  qword_25D89F8 = (uint64_t)operator new(0x20uLL);
  unk_25D8A00 = *(_OWORD *)v280;
  strcpy((char *)qword_25D89F8, "{RouteTotalExpectedTime}");
  byte_25D8A27 = 18;
  strcpy(byte_25D8A10, "{ChargePercentage}");
  qword_25D8A28 = (uint64_t)operator new(0x20uLL);
  unk_25D8A30 = v274;
  strcpy((char *)qword_25D8A28, "{RemainingChargePercentage}");
  byte_25D8A57 = 16;
  strcpy(byte_25D8A40, "{ChargeDuration}");
  byte_25D8A6F = 15;
  strcpy((char *)&qword_25D8A58, "{ConnectorType}");
  byte_25D8A87 = 19;
  strcpy(byte_25D8A70, "{ChargeStationName}");
  byte_25D8A9F = 7;
  strcpy((char *)&dword_25D8A88, "{Power}");
  byte_25D8AB7 = 13;
  strcpy((char *)&qword_25D8AA0, "{VehicleName}");
  byte_25D8ACF = 18;
  strcpy((char *)&xmmword_25D8AB8, "{AreaIncidentName}");
  byte_25D8AE7 = 14;
  strcpy((char *)&qword_25D8AD0, "{AreaIncident}");
  byte_25D8AFF = 16;
  strcpy((char *)&xmmword_25D8AE8, "{AffectedRegion}");
  byte_25D8B17 = 21;
  strcpy(byte_25D8B00, "{AreaIncidentWeblink}");
  byte_25D8B2F = 20;
  strcpy((char *)&xmmword_25D8B18, "{AreaIncidentAgency}");
  byte_25D8B47 = 11;
  strcpy((char *)&qword_25D8B30, "{IssueTime}");
  byte_25D8B5F = 12;
  strcpy((char *)&qword_25D8B48, "{UpdateTime}");
  byte_25D8B77 = 11;
  strcpy((char *)&qword_25D8B60, "{IssueDate}");
  byte_25D8B8F = 12;
  strcpy((char *)&qword_25D8B78, "{UpdateDate}");
  qword_25D8B90 = (uint64_t)operator new(0x20uLL);
  unk_25D8B98 = *(_OWORD *)v280;
  strcpy((char *)qword_25D8B90, "{AreaIncidentDataSource}");
  byte_25D8BBF = 13;
  strcpy((char *)&qword_25D8BA8, "{AreaHectare}");
  byte_25D8BD7 = 10;
  strcpy((char *)&qword_25D8BC0, "{AreaAcre}");
  qword_25D8BD8 = (uint64_t)operator new(0x20uLL);
  unk_25D8BE0 = v276;
  strcpy((char *)qword_25D8BD8, "{WildfirePercentageContained}");
  qword_25D8BF0 = (uint64_t)operator new(0x28uLL);
  unk_25D8BF8 = *(_OWORD *)&v269[32];
  strcpy((char *)qword_25D8BF0, "{WildfireExpectedContainmentDate}");
  qword_25D8C08 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25D8C10 = v278;
  strcpy((char *)qword_25D8C08, "{ServerRecommendedRouteName}");
  qword_25D8C20 = (uint64_t)operator new(0x20uLL);
  unk_25D8C28 = v278;
  strcpy((char *)qword_25D8C20, "{ServerNonRecommendedRoute1}");
  qword_25D8C38 = (uint64_t)operator new(0x20uLL);
  unk_25D8C40 = v278;
  strcpy((char *)qword_25D8C38, "{ServerNonRecommendedRoute2}");
  byte_25D8C67 = 12;
  strcpy((char *)&qword_25D8C50, "{ClientDest}");
  byte_25D8C7F = 6;
  strcpy((char *)&dword_25D8C68, "{Name}");
  qword_25D8C80 = (uint64_t)operator new(0x20uLL);
  unk_25D8C88 = *(_OWORD *)&v269[16];
  strcpy((char *)qword_25D8C80, "ProactiveAlert_FasterRouteTitle");
  qword_25D8C98 = (uint64_t)operator new(0x20uLL);
  unk_25D8CA0 = v277;
  strcpy((char *)qword_25D8C98, "ProactiveAlert_RoadClosure");
  qword_25D8CB0 = (uint64_t)operator new(0x30uLL);
  unk_25D8CB8 = v273;
  strcpy((char *)qword_25D8CB0, "ProactiveAlert_UnusuallyHeavyTrafficOnTwo");
  qword_25D8CC8 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25D8CD0 = v275;
  strcpy((char *)qword_25D8CC8, "ProactiveAlert_FasterRouteTitle_to_Home");
  qword_25D8CE0 = (uint64_t)operator new(0x28uLL);
  unk_25D8CE8 = v275;
  strcpy((char *)qword_25D8CE0, "ProactiveAlert_FasterRouteTitle_to_Work");
  qword_25D8CF8 = (uint64_t)operator new(0x28uLL);
  unk_25D8D00 = v275;
  strcpy((char *)qword_25D8CF8, "ProactiveAlert_FasterRouteTitle_to_Name");
  qword_25D8D10 = (uint64_t)operator new(0x30uLL);
  unk_25D8D18 = xmmword_20B93B0;
  strcpy((char *)qword_25D8D10, "ProactiveAlert_FasterRouteTitle_to_StreetName");
  byte_25D8D3F = 17;
  strcpy(byte_25D8D28, "Proactive_Driving");
  strcpy(&byte_25D8D57, "\n{RouteName}");
  strcpy((char *)&qword_25D8D40, "_RouteName");
  byte_25D8D6F = 11;
  qword_25D8D70 = (uint64_t)operator new(0x28uLL);
  unk_25D8D78 = *(_OWORD *)&v269[32];
  strcpy((char *)qword_25D8D70, "Pass_Traffic_Light_Spoken_Primary");
  qword_25D8D88 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25D8D90 = v276;
  strcpy((char *)qword_25D8D88, "Pass_Stop_Sign_Spoken_Primary");
  *(void *)&algn_25D8D90[16] = operator new(0x20uLL);
  *(_OWORD *)&algn_25D8D90[24] = *(_OWORD *)v269;
  strcpy(*(char **)&algn_25D8D90[16], "Pass_Roundabout_Spoken_Primary");
  strcpy(&byte_25D8DCF, "\nBannerBody");
  strcpy(&algn_25D8D90[40], "BannerHead");
  strcpy(&byte_25D8DE7, "\nBannerDescription");
  byte_25D8DFF = 17;
  strcpy(&byte_25D8E17, "\n_Incident");
  strcpy((char *)&qword_25D8E00, "VoiceAlert");
  strcpy(&byte_25D8E2F, "\t_Area_Incident");
  byte_25D8E47 = 14;
  byte_25D8E5F = 15;
  strcpy((char *)&qword_25D8E48, "_Area_Incidents");
  strcpy(&byte_25D8E77, "\t_Crash");
  strcpy((char *)&qword_25D8E60, "_Accident");
  byte_25D8E8F = 6;
  byte_25D8EA7 = 16;
  strcpy((char *)&xmmword_25D8E90, "_Congestion_Zone");
  strcpy(&byte_25D8EBF, "\n_Environmental_Zone");
  strcpy((char *)&qword_25D8EA8, "_Toll_Zone");
  byte_25D8ED7 = 19;
  BYTE1(qword_25D8EE8) = 116;
  WORD1(qword_25D8EE8) = 0;
  HIDWORD(qword_25D8EE8) = 301989888;
  strcpy(byte_25D8EF0, "_Construction");
  strcpy((char *)&qword_25D8ED8, "_Incident_Accide");
  byte_25D8F07 = 13;
  byte_25D8F1F = 7;
  strcpy((char *)&dword_25D8F08, "_Hazard");
  byte_25D8F37 = 12;
  strcpy((char *)&qword_25D8F20, "_LaneClosure");
  byte_25D8F4F = 12;
  strcpy((char *)&qword_25D8F38, "_LaneTrailer");
  qmemcpy(&byte_25D8F67, "\t_LaneTrailer", 13);
  strcpy((char *)&qword_25D8F50, "_Shoulder");
  qword_25D8F78 = 0x1500007200000000;
  *(void *)algn_25D8F74 = *(void *)"_Shoulder";
  strcpy((char *)&xmmword_25D8F80, "_Causing_Traffic_Delay");
  HIBYTE(word_25D8F96) = 22;
  byte_25D8FAF = 6;
  strcpy((char *)&dword_25D8F98, "_Timed");
  byte_25D8FC7 = 12;
  strcpy((char *)&qword_25D8FB0, "_HasDistance");
  byte_25D8FDF = 8;
  strcpy((char *)&qword_25D8FC8, "_Closure");
  strcpy(&byte_25D8FF7, "\n_BadRoad");
  strcpy((char *)&qword_25D8FE0, "_NoReroute");
  byte_25D900F = 8;
  byte_25D9027 = 12;
  strcpy((char *)&qword_25D9010, "_TollTrailer");
  byte_25D903F = 12;
  strcpy((char *)&qword_25D9028, "_BestTrailer");
  byte_25D9057 = 8;
  strcpy((char *)&qword_25D9040, "_Trailer");
  byte_25D906F = 18;
  strcpy((char *)&xmmword_25D9058, "_Secondary_Trailer");
  byte_25D9087 = 8;
  strcpy((char *)&qword_25D9070, "_Savings");
  byte_25D909F = 8;
  strcpy((char *)&qword_25D9088, "_AltRoad");
  byte_25D90B7 = 6;
  strcpy((char *)&dword_25D90A0, "_Named");
  byte_25D90CF = 6;
  strcpy((char *)&dword_25D90B8, "_NAMED");
  byte_25D90E7 = 22;
  strcpy((char *)&xmmword_25D90D0, "_Named_Suggested_Route");
  qword_25D9100 = 0x1000000000000000;
  xmmword_25D90F0 = xmmword_20E81D0;
  byte_25D911F = 11;
  strcpy((char *)&qword_25D9108, "_Speed_Trap");
  byte_25D9137 = 4;
  strcpy((char *)&dword_25D9120, "_UGI");
  byte_25D914F = 12;
  strcpy((char *)&qword_25D9138, "_Safer_Route");
  qword_25D9150 = (uint64_t)operator new(0x20uLL);
  unk_25D9158 = *(_OWORD *)&v269[16];
  strcpy((char *)qword_25D9150, "BlockedRouteByBlockingIncident_");
  qword_25D9168 = (uint64_t)operator new(0x28uLL);
  *(_WORD *)&v269[50] = 0;
  *(_DWORD *)&v269[52] = 0;
  *(void *)&v269[56] = 0x8000000000000028;
  *(_OWORD *)algn_25D9170 = xmmword_20B9280;
  strcpy((char *)qword_25D9168, "BlockedRouteByManeuverRestriction_");
  qword_25D9180 = (uint64_t)operator new(0x20uLL);
  unk_25D9188 = *(_OWORD *)v269;
  strcpy((char *)qword_25D9180, "BlockedRouteByTimeRestriction_");
  qword_25D9198 = (uint64_t)operator new(0x28uLL);
  unk_25D91A0 = xmmword_20B8FD0;
  strcpy((char *)qword_25D9198, "SuggestRouteToAvoidBlockingIncident_");
  qword_25D91B0 = (uint64_t)operator new(0x30uLL);
  unk_25D91B8 = xmmword_20B9380;
  strcpy((char *)qword_25D91B0, "SuggestRouteToAvoidBlockingManeuverRestriction_");
  qword_25D91C8 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_25D91D0 = xmmword_20B93E0;
  strcpy((char *)qword_25D91C8, "SuggestRouteToAvoidBlockingTimeRestriction_");
  byte_25D91F7 = 1;
  word_25D91E0 = 95;
  strcpy((char *)&xmmword_25D91F8, "IncidentsCausingDelay_");
  HIBYTE(word_25D920E) = 22;
  qword_25D9210 = (uint64_t)operator new(0x19uLL);
  unk_25D9218 = *(_OWORD *)&v280[16];
  strcpy((char *)qword_25D9210, "NonVotableRoadIncident_");
  byte_25D923F = 20;
  strcpy(byte_25D9228, "VotableRoadIncident_");
  byte_25D9257 = 13;
  strcpy((char *)&qword_25D9240, "AreaIncident_");
  byte_25D926F = 15;
  strcpy((char *)&qword_25D9258, "CongestionZone_");
  qword_25D9270 = (uint64_t)operator new(0x20uLL);
  unk_25D9278 = *(_OWORD *)v280;
  strcpy((char *)qword_25D9270, "EVModifiedChargingStops_");
  byte_25D929F = 13;
  strcpy((char *)&qword_25D9288, "EVDisconnect_");
  byte_25D92B7 = 12;
  strcpy((char *)&qword_25D92A0, "EVReconnect_");
  qword_25D92B8 = (uint64_t)operator new(0x20uLL);
  unk_25D92C0 = v278;
  strcpy((char *)qword_25D92B8, "EVOfflineToOnlineTransition_");
  byte_25D92E7 = 13;
  strcpy((char *)&qword_25D92D0, "EVOfflineSAR_");
  byte_25D92FF = 21;
  strcpy((char *)&xmmword_25D92E8, "EVTowingNotSupported_");
  byte_25D9317 = 18;
  strcpy(byte_25D9300, "EVInfeasibleRoute_");
  qword_25D9318 = (uint64_t)operator new(0x38uLL);
  unk_25D9320 = xmmword_20B8DF0;
  strcpy((char *)qword_25D9318, "SuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_25D9330 = (uint64_t)operator new(0x40uLL);
  unk_25D9338 = xmmword_20B98C0;
  strcpy((char *)qword_25D9330, "LCSuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_25D9348 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_25D9350 = v272;
  strcpy((char *)qword_25D9348, "SuggestRouteAddingStopsForEVInfeasibleRoute_");
  strcpy(v269, "InfeasibleRoute_ngStopsForEVInfeSuggestRouteAddi\"");
  qword_25D9360 = (uint64_t)operator new(0x30uLL);
  *(_WORD *)&v266[50] = 0;
  *(_DWORD *)&v266[52] = 0;
  *(void *)&v266[56] = 0x8000000000000030;
  unk_25D9368 = xmmword_20B9A80;
  strcpy((char *)qword_25D9360, "LCSuggestRouteAddingStopsForEVInfeasibleRoute_");
  strcpy(v266, "InfeasibleRoute_dingStopsForEVInLCSuggestRouteAd.");
  qword_25D9378 = (uint64_t)operator new(0x30uLL);
  unk_25D9380 = v273;
  strcpy((char *)qword_25D9378, "SuggestRouteAddingStopsToIncreaseDestSoc_");
  unint64_t v186 = operator new(0x30uLL);
  qword_25D9390 = (uint64_t)v186;
  unk_25D9398 = v272;
  *unint64_t v186 = *(_OWORD *)&v269[32];
  v186[1] = *(_OWORD *)&v269[16];
  *(_OWORD *)((char *)v186 + 28) = *(_OWORD *)v269;
  *((unsigned char *)v186 + 44) = 0;
  qword_25D93A8 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25D93B0 = *(_OWORD *)&v269[48];
  strcpy((char *)qword_25D93A8, "SuggestDetourWithHigherArrivalSOC_");
  BOOL v187 = operator new(0x30uLL);
  qword_25D93C0 = (uint64_t)v187;
  unk_25D93C8 = *(_OWORD *)&v266[48];
  *BOOL v187 = *(_OWORD *)&v266[32];
  v187[1] = *(_OWORD *)&v266[16];
  *(_OWORD *)((char *)v187 + 30) = *(_OWORD *)v266;
  *((unsigned char *)v187 + 46) = 0;
  qword_25D93D8 = (uint64_t)operator new(0x28uLL);
  unk_25D93E0 = v275;
  strcpy((char *)qword_25D93D8, "SuggestRouteToDestForEVInfeasibleRoute_");
  qword_25D93F0 = (uint64_t)operator new(0x28uLL);
  unk_25D93F8 = v268;
  strcpy((char *)qword_25D93F0, "SuggestRouteRemovingStopsFromEVRoute_");
  qword_25D9408 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25D9410 = *(_OWORD *)v280;
  strcpy((char *)qword_25D9408, "OfflineToOnlineNewRoute_");
  qword_25D9420 = (uint64_t)operator new(0x40uLL);
  unk_25D9428 = xmmword_20B98C0;
  strcpy((char *)qword_25D9420, "SuggestDetourWithHigherArrivalSOCForInfeasibleUserRoute_");
  byte_25D944F = 20;
  strcpy((char *)&xmmword_25D9438, "LPR_OFFLINE_REROUTE_");
  byte_25D9467 = 16;
  strcpy(algn_25D9450, "LPR_OFFLINE_SAR_");
  byte_25D947F = 20;
  strcpy((char *)&xmmword_25D9468, "LPR_OFFLINE_REROUTE_");
  byte_25D9497 = 16;
  strcpy(byte_25D9480, "LPR_OFFLINE_SAR_");
  byte_25D94AF = 19;
  strcpy((char *)&xmmword_25D9498, "SuggestFasterRoute_");
  qword_25D94B0 = (char *)operator new(0x20uLL);
  xmmword_25D94B8 = v279;
  strcpy(qword_25D94B0, "AreaIncidentSaferReroute_");
  byte_25D94DF = 12;
  strcpy((char *)&qword_25D94C8, "_Remove_Stop");
  byte_25D94F7 = 13;
  strcpy((char *)&qword_25D94E0, "_Remove_Stops");
  strcpy(&byte_25D950F, "\t_Add_Stops");
  strcpy((char *)&qword_25D94F8, "_Add_Stop");
  strcpy(&byte_25D9527, "\n_Change_Route");
  byte_25D953F = 13;
  byte_25D9557 = 15;
  strcpy((char *)&qword_25D9540, "_Different_Stop");
  byte_25D956F = 16;
  strcpy((char *)&xmmword_25D9558, "_Different_Stops");
  byte_25D9587 = 15;
  strcpy((char *)&qword_25D9570, "_EV_Remove_Stop");
  byte_25D959F = 16;
  strcpy((char *)&xmmword_25D9588, "_EV_Remove_Stops");
  byte_25D95B7 = 12;
  strcpy((char *)&qword_25D95A0, "_EV_Add_Stop");
  byte_25D95CF = 13;
  strcpy((char *)&qword_25D95B8, "_EV_Add_Stops");
  byte_25D95E7 = 15;
  strcpy((char *)&qword_25D95D0, "_EV_Low_Battery");
  byte_25D95FF = 14;
  strcpy((char *)&qword_25D95E8, "_EV_Infeasible");
  byte_25D9617 = 15;
  strcpy((char *)&qword_25D9600, "_EV_Last_Chance");
  qword_25D9618 = (uint64_t)operator new(0x20uLL);
  unk_25D9620 = *(_OWORD *)v280;
  strcpy((char *)qword_25D9618, "_EV_Low_Battery_Add_Stop");
  uint64_t v188 = qword_25D9518;
  qword_25D9630 = (uint64_t)operator new(0x20uLL);
  unk_25D9638 = v279;
  strcpy((char *)qword_25D9630, "_EV_Low_Battery_Add_Stops");
  qword_25D9648 = (uint64_t)operator new(0x19uLL);
  *(_OWORD *)algn_25D9650 = *(_OWORD *)&v280[16];
  strcpy((char *)qword_25D9648, "_EV_Infeasible_Add_Stop");
  int v189 = byte_25D9527;
  if (byte_25D9527 >= 0) {
    size_t v190 = byte_25D9527;
  }
  else {
    size_t v190 = v188;
  }
  unint64_t v191 = v190 + 14;
  if (v190 + 14 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v191 >= 0x17)
  {
    uint64_t v194 = (v191 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v191 | 7) != 0x17) {
      uint64_t v194 = v191 | 7;
    }
    uint64_t v195 = v194 + 1;
    unint64_t v196 = (char *)operator new(v194 + 1);
    qword_25D9668 = v190 + 14;
    unk_25D9670 = v195 | 0x8000000000000000;
    qword_25D9660 = (uint64_t)v196;
    qmemcpy(v196, "_EV_Infeasible", 14);
    unint64_t v192 = v196 + 14;
  }
  else
  {
    BYTE1(qword_25D9668) = 0;
    WORD1(qword_25D9668) = 0;
    HIDWORD(qword_25D9668) = 0;
    unk_25D9670 = 0;
    byte_25D9677 = v190 + 14;
    strcpy((char *)&qword_25D9660, "_EV_Infe");
    unint64_t v192 = (char *)&qword_25D9668 + 6;
    if (!v190)
    {
      char v193 = 1;
      goto LABEL_425;
    }
  }
  if (v189 >= 0) {
    uint64_t v197 = (uint64_t)&qword_25D9510;
  }
  else {
    uint64_t v197 = 0x6F74535F6464415FLL;
  }
  memmove(v192, (const void *)v197, v190);
  char v193 = 0;
LABEL_425:
  v192[v190] = 0;
  BOOL v198 = (char *)operator new(0x20uLL);
  qword_25D9678 = (uint64_t)v198;
  unk_25D9680 = *(_OWORD *)v280;
  *(void *)BOOL v198 = qword_25D9600;
  *(void *)(v198 + 7) = *(uint64_t *)((char *)&qword_25D9600 + 7);
  *(void *)(v198 + 15) = qword_25D94F8;
  v198[23] = word_25D9500;
  v198[24] = 0;
  unint64_t v199 = v190 + 15;
  if (v190 + 15 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v199 > 0x16)
  {
    uint64_t v201 = (v199 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v199 | 7) != 0x17) {
      uint64_t v201 = v199 | 7;
    }
    uint64_t v202 = v201 + 1;
    unint64_t v200 = (uint64_t *)operator new(v201 + 1);
    qword_25D9698 = v190 + 15;
    unk_25D96A0 = v202 | 0x8000000000000000;
    qword_25D9690 = (uint64_t)v200;
  }
  else
  {
    unint64_t v200 = &qword_25D9690;
    qword_25D9698 = 0;
    unk_25D96A0 = 0;
    qword_25D9690 = 0;
    byte_25D96A7 = v190 + 15;
  }
  *unint64_t v200 = qword_25D9600;
  *(uint64_t *)((char *)v200 + 7) = *(uint64_t *)((char *)&qword_25D9600 + 7);
  long long v203 = (char *)v200 + 15;
  if ((v193 & 1) == 0)
  {
    if (v189 >= 0) {
      v204 = &qword_25D9510;
    }
    else {
      v204 = (uint64_t *)qword_25D9510;
    }
    memmove((char *)v200 + 15, v204, v190);
  }
  v203[v190] = 0;
  byte_25D96BF = 17;
  strcpy((char *)&xmmword_25D96A8, "_EV_Forced_Detour");
  qword_25D96C0 = (uint64_t)operator new(0x20uLL);
  unk_25D96C8 = v279;
  strcpy((char *)qword_25D96C0, "_EV_Higher_Arrival_Charge");
  qword_25D96D8 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25D96E0 = xmmword_20B8FD0;
  strcpy((char *)qword_25D96D8, "_EV_Infeasible_Higher_Arrival_Charge");
  byte_25D9707 = 16;
  strcpy(&algn_25D96E0[16], "_EV_Out_Of_Range");
  qword_25D9708 = (uint64_t)operator new(0x20uLL);
  unk_25D9710 = v274;
  strcpy((char *)qword_25D9708, "_EV_Last_Chance_Take_Detour");
  strcpy(byte_25D9720, "_EV_Forced_Modify_Stop");
  HIBYTE(word_25D9736) = 22;
  qword_25D9738 = (uint64_t)operator new(0x19uLL);
  unk_25D9740 = *(_OWORD *)&v280[16];
  strcpy((char *)qword_25D9738, "_EV_Forced_Modify_Stops");
  byte_25D9767 = 19;
  strcpy(byte_25D9750, "_EV_Forced_Add_Stop");
  byte_25D977F = 20;
  strcpy((char *)&xmmword_25D9768, "_EV_Forced_Add_Stops");
  byte_25D9797 = 21;
  strcpy(byte_25D9780, "_EV_Battery_Info_Lost");
  qword_25D9798 = (uint64_t)operator new(0x20uLL);
  unk_25D97A0 = v279;
  strcpy((char *)qword_25D9798, "_EV_Battery_Info_Restored");
  qword_25D97B0 = (uint64_t)operator new(0x20uLL);
  unk_25D97B8 = *(_OWORD *)v280;
  strcpy((char *)qword_25D97B0, "_EV_Towing_Not_Supported");
  qword_25D97C8 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25D97D0 = v271;
  strcpy((char *)qword_25D97C8, "_EV_Offline_to_Online_Transition");
  byte_25D97F7 = 15;
  strcpy((char *)&qword_25D97E0, "_EV_Offline_SAR");
  qword_25D97F8 = (uint64_t)operator new(0x20uLL);
  unk_25D9800 = v278;
  strcpy((char *)qword_25D97F8, "_Offline_to_Online_New_Route");
  byte_25D9827 = 12;
  strcpy((char *)&qword_25D9810, "BannerButton");
  byte_25D983F = 8;
  strcpy((char *)&qword_25D9828, "_Dismiss");
  byte_25D9857 = 3;
  word_25D9840 = 20319;
  byte_25D9842 = 75;
  byte_25D9843 = 0;
  byte_25D986F = 11;
  strcpy((char *)&qword_25D9858, "_Still_Here");
  byte_25D9887 = 8;
  strcpy((char *)&qword_25D9870, "_Cleared");
  qmemcpy(&byte_25D989F, "\nBannerButton", 13);
  strcpy((char *)&qword_25D9888, "_No_Thanks");
  uint64_t v205 = qword_25D9818;
  qword_25D98B0 = 0x1400000000000000;
  *(void *)algn_25D98AC = 0x7373696D7369445FLL;
  qword_25D98C8 = 0xF00000000000000;
  qword_25D98C0 = 0x4B4F5F6E6F7474;
  int v206 = byte_25D95B7;
  if (byte_25D95B7 >= 0) {
    size_t v207 = byte_25D95B7;
  }
  else {
    size_t v207 = qword_25D95A8;
  }
  unint64_t v208 = v207 + 12;
  qword_25D98B8 = *(void *)"BannerButton";
  if (v207 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v208 >= 0x17)
  {
    uint64_t v210 = (v208 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v208 | 7) != 0x17) {
      uint64_t v210 = v208 | 7;
    }
    uint64_t v211 = v210 + 1;
    BOOL v212 = (char *)operator new(v210 + 1);
    qword_25D98D8 = v207 + 12;
    unk_25D98E0 = v211 | 0x8000000000000000;
    qword_25D98D0 = (uint64_t)v212;
    *((_DWORD *)v212 + 2) = 1852798068;
    *(void *)BOOL v212 = *(void *)"BannerButton";
    BOOL v209 = v212 + 12;
  }
  else
  {
    BYTE5(qword_25D98D8) = 0;
    HIWORD(qword_25D98D8) = 0;
    unk_25D98E0 = 0;
    byte_25D98E7 = v207 + 12;
    strcpy((char *)&qword_25D98D0, "BannerButton");
    BOOL v209 = (char *)&qword_25D98D8 + 4;
    if (!v207) {
      goto LABEL_450;
    }
  }
  if (v206 >= 0) {
    __n128 v213 = &qword_25D95A0;
  }
  else {
    __n128 v213 = (uint64_t *)qword_25D95A0;
  }
  memmove(v209, v213, v207);
LABEL_450:
  v209[v207] = 0;
  int v214 = byte_25D95CF;
  if (byte_25D95CF >= 0) {
    size_t v215 = byte_25D95CF;
  }
  else {
    size_t v215 = unk_25D95C0;
  }
  unint64_t v216 = v215 + 12;
  if (v215 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v216 >= 0x17)
  {
    uint64_t v218 = (v216 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v216 | 7) != 0x17) {
      uint64_t v218 = v216 | 7;
    }
    uint64_t v219 = v218 + 1;
    BOOL v220 = (char *)operator new(v218 + 1);
    qword_25D98F0 = v215 + 12;
    unk_25D98F8 = v219 | 0x8000000000000000;
    qword_25D98E8 = (uint64_t)v220;
    *(void *)BOOL v220 = qword_25D9810;
    *((_DWORD *)v220 + 2) = qword_25D9818;
    v217 = v220 + 12;
  }
  else
  {
    qword_25D98F0 = 0;
    unk_25D98F8 = 0;
    byte_25D98FF = v215 + 12;
    LODWORD(qword_25D98F0) = qword_25D9818;
    qword_25D98E8 = qword_25D9810;
    v217 = (char *)&qword_25D98F0 + 4;
    if (!v215) {
      goto LABEL_464;
    }
  }
  if (v214 >= 0) {
    BOOL v221 = &qword_25D95B8;
  }
  else {
    BOOL v221 = (uint64_t *)qword_25D95B8;
  }
  memmove(v217, v221, v215);
LABEL_464:
  v217[v215] = 0;
  int v222 = byte_25D9587;
  if (byte_25D9587 >= 0) {
    size_t v223 = byte_25D9587;
  }
  else {
    size_t v223 = unk_25D9578;
  }
  unint64_t v224 = v223 + 12;
  if (v223 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v224 >= 0x17)
  {
    uint64_t v226 = (v224 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v224 | 7) != 0x17) {
      uint64_t v226 = v224 | 7;
    }
    uint64_t v227 = v226 + 1;
    BOOL v228 = (char *)operator new(v226 + 1);
    qword_25D9908 = v223 + 12;
    unk_25D9910 = v227 | 0x8000000000000000;
    qword_25D9900 = (uint64_t)v228;
    *(void *)BOOL v228 = qword_25D9810;
    *((_DWORD *)v228 + 2) = qword_25D9818;
    unint64_t v225 = v228 + 12;
  }
  else
  {
    qword_25D9908 = 0;
    unk_25D9910 = 0;
    byte_25D9917 = v223 + 12;
    LODWORD(qword_25D9908) = qword_25D9818;
    qword_25D9900 = qword_25D9810;
    unint64_t v225 = (char *)&qword_25D9908 + 4;
    if (!v223) {
      goto LABEL_478;
    }
  }
  if (v222 >= 0) {
    uint64_t v229 = &qword_25D9570;
  }
  else {
    uint64_t v229 = (uint64_t *)qword_25D9570;
  }
  memmove(v225, v229, v223);
LABEL_478:
  v225[v223] = 0;
  int v230 = byte_25D9827;
  if (byte_25D9827 >= 0) {
    size_t v231 = byte_25D9827;
  }
  else {
    size_t v231 = v205;
  }
  int v232 = byte_25D959F;
  if (byte_25D959F >= 0) {
    size_t v233 = byte_25D959F;
  }
  else {
    size_t v233 = *((void *)&xmmword_25D9588 + 1);
  }
  unint64_t v234 = v233 + v231;
  if (v233 + v231 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v234 <= 0x16)
  {
    uint64_t v235 = &qword_25D9918;
    qword_25D9920 = 0;
    unk_25D9928 = 0;
    qword_25D9918 = 0;
    byte_25D992F = v233 + v231;
    if (!v231) {
      goto LABEL_491;
    }
    goto LABEL_487;
  }
  uint64_t v242 = (v234 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v234 | 7) != 0x17) {
    uint64_t v242 = v234 | 7;
  }
  uint64_t v243 = v242 + 1;
  uint64_t v235 = (uint64_t *)operator new(v242 + 1);
  qword_25D9920 = v233 + v231;
  unk_25D9928 = v243 | 0x8000000000000000;
  qword_25D9918 = (uint64_t)v235;
  if (v231)
  {
LABEL_487:
    if (v230 >= 0) {
      __n128 v236 = &qword_25D9810;
    }
    else {
      __n128 v236 = (uint64_t *)qword_25D9810;
    }
    memmove(v235, v236, v231);
  }
LABEL_491:
  unint64_t v237 = (char *)v235 + v231;
  if (v233)
  {
    if (v232 >= 0) {
      unint64_t v238 = &xmmword_25D9588;
    }
    else {
      unint64_t v238 = (long long *)xmmword_25D9588;
    }
    memmove(v237, v238, v233);
  }
  v237[v233] = 0;
  unint64_t v239 = v231 + 11;
  if (v231 + 11 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v239 >= 0x17)
  {
    uint64_t v244 = (v239 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v239 | 7) != 0x17) {
      uint64_t v244 = v239 | 7;
    }
    uint64_t v245 = v244 + 1;
    BOOL v240 = (uint64_t *)operator new(v244 + 1);
    qword_25D9938 = v231 + 11;
    unk_25D9940 = v245 | 0x8000000000000000;
    qword_25D9930 = (uint64_t)v240;
  }
  else
  {
    BOOL v240 = &qword_25D9930;
    qword_25D9938 = 0;
    unk_25D9940 = 0;
    qword_25D9930 = 0;
    byte_25D9947 = v231 + 11;
    if (!v231)
    {
      *(_DWORD *)((char *)&qword_25D9930 + 7) = *(_DWORD *)((char *)&qword_25D9858 + 7);
      qword_25D9930 = qword_25D9858;
      BYTE3(qword_25D9938) = 0;
      LOBYTE(v241) = 8;
      goto LABEL_512;
    }
  }
  if (v230 >= 0) {
    v246 = &qword_25D9810;
  }
  else {
    v246 = (uint64_t *)qword_25D9810;
  }
  memmove(v240, v246, v231);
  unint64_t v247 = (char *)v240 + v231;
  int v248 = *(_DWORD *)((char *)&qword_25D9858 + 7);
  *(void *)unint64_t v247 = qword_25D9858;
  *(_DWORD *)(v247 + 7) = v248;
  v247[11] = 0;
  unint64_t v241 = v231 + 8;
  if (v231 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v241 <= 0x16)
  {
LABEL_512:
    unint64_t v249 = &qword_25D9948;
    qword_25D9950 = 0;
    unk_25D9958 = 0;
    qword_25D9948 = 0;
    byte_25D995F = v241;
    if (!v231) {
      goto LABEL_517;
    }
    goto LABEL_513;
  }
  uint64_t v264 = (v241 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v241 | 7) != 0x17) {
    uint64_t v264 = v241 | 7;
  }
  uint64_t v265 = v264 + 1;
  unint64_t v249 = (uint64_t *)operator new(v264 + 1);
  qword_25D9950 = v231 + 8;
  unk_25D9958 = v265 | 0x8000000000000000;
  qword_25D9948 = (uint64_t)v249;
  if (v231)
  {
LABEL_513:
    if (v230 >= 0) {
      unint64_t v250 = &qword_25D9810;
    }
    else {
      unint64_t v250 = (uint64_t *)qword_25D9810;
    }
    memmove(v249, v250, v231);
  }
LABEL_517:
  BOOL v251 = (char *)v249 + v231;
  *(void *)BOOL v251 = qword_25D9870;
  v251[8] = 0;
  int v252 = byte_25D989F;
  if (byte_25D989F >= 0) {
    size_t v253 = byte_25D989F;
  }
  else {
    size_t v253 = qword_25D9890;
  }
  unint64_t v254 = v253 + v231;
  if (v253 + v231 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v254 <= 0x16)
  {
    unint64_t v255 = &qword_25D9960;
    qword_25D9968 = 0;
    unk_25D9970 = 0;
    qword_25D9960 = 0;
    byte_25D9977 = v253 + v231;
    if (!v231) {
      goto LABEL_527;
    }
    goto LABEL_523;
  }
  uint64_t v262 = (v254 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v254 | 7) != 0x17) {
    uint64_t v262 = v254 | 7;
  }
  uint64_t v263 = v262 + 1;
  unint64_t v255 = (uint64_t *)operator new(v262 + 1);
  qword_25D9968 = v253 + v231;
  unk_25D9970 = v263 | 0x8000000000000000;
  qword_25D9960 = (uint64_t)v255;
  if (v231)
  {
LABEL_523:
    if (v230 >= 0) {
      unint64_t v256 = &qword_25D9810;
    }
    else {
      unint64_t v256 = (uint64_t *)qword_25D9810;
    }
    memmove(v255, v256, v231);
  }
LABEL_527:
  BOOL v257 = (char *)v255 + v231;
  if (v253)
  {
    if (v252 >= 0) {
      BOOL v258 = &qword_25D9888;
    }
    else {
      BOOL v258 = (uint64_t *)qword_25D9888;
    }
    memmove(v257, v258, v253);
  }
  v257[v253] = 0;
  strcpy(&byte_25D998F, "\n{newroute}");
  strcpy((char *)&qword_25D9978, "{roadname}");
  strcpy(&byte_25D99A7, "\n{count}");
  byte_25D99BF = 7;
  strcpy(&byte_25D99D7, "\n{dur}");
  strcpy((char *)&qword_25D99C0, "{duration}");
  byte_25D99EF = 5;
  qword_25D99F0 = (uint64_t)operator new(0x20uLL);
  unk_25D99F8 = v277;
  strcpy((char *)qword_25D99F0, "{PleaseProceedWithCaution}");
  byte_25D9A1F = 15;
  strcpy((char *)&qword_25D9A08, "{UserRouteName}");
  byte_25D9A37 = 20;
  strcpy((char *)&xmmword_25D9A20, "{SuggestedRouteName}");
  byte_25D9A4F = 18;
  strcpy(byte_25D9A38, "Speed_Camera_Ahead");
  qword_25D9A50 = (uint64_t)operator new(0x20uLL);
  unk_25D9A58 = v276;
  strcpy((char *)qword_25D9A50, "Red_Light_Camera_Ahead_Spoken");
  qword_25D9A68 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25D9A70 = v276;
  strcpy((char *)qword_25D9A68, "Stop_Sign_Camera_Ahead_Spoken");
  qword_25D9A80 = (uint64_t)operator new(0x28uLL);
  unk_25D9A88 = *(_OWORD *)&v269[48];
  strcpy((char *)qword_25D9A80, "Speed_Camera_Ahead_Multiple_Spoken");
  qword_25D9A98 = (uint64_t)operator new(0x28uLL);
  unk_25D9AA0 = v270;
  strcpy((char *)qword_25D9A98, "Red_Light_Camera_Ahead_Multiple_Spoken");
  qword_25D9AB0 = (uint64_t)operator new(0x20uLL);
  unk_25D9AB8 = v278;
  strcpy((char *)qword_25D9AB0, "Camera_Ahead_Multiple_Spoken");
  qword_25D9AC8 = (uint64_t)operator new(0x30uLL);
  unk_25D9AD0 = v267;
  strcpy((char *)qword_25D9AC8, "Red_Light_Camera_Speed_Camera_Ahead_Spoken");
  qword_25D9AE0 = (char *)operator new(0x30uLL);
  strcpy(qword_25D9AE0, "Stop_Sign_Camera_Speed_Camera_Ahead_Spoken");
  byte_25D9B0F = 16;
  xmmword_25D9AE8 = v267;
  strcpy(byte_25D9AF8, "_Speed_Limit_Mph");
  byte_25D9B27 = 16;
  strcpy(algn_25D9B10, "_Speed_Limit_Kph");
  byte_25D9B3F = 11;
  strcpy((char *)&qword_25D9B28, "Watch_Speed");
  byte_25D9B57 = 4;
  strcpy((char *)&dword_25D9B40, "_One");
  byte_25D9B6F = 4;
  strcpy((char *)&dword_25D9B58, "_Two");
  byte_25D9B87 = 4;
  strcpy((char *)&dword_25D9B70, "_Few");
  byte_25D9B9F = 5;
  strcpy((char *)&dword_25D9B88, "_Many");
  byte_25D9BB7 = 6;
  strcpy((char *)&dword_25D9BA0, "_Other");
  byte_25D9BCF = 4;
  strcpy((char *)&dword_25D9BB8, "_ONE");
  byte_25D9BE7 = 7;
  strcpy((char *)&dword_25D9BD0, "{Speed}");
  byte_25D9BFF = 8;
  strcpy((char *)&qword_25D9BE8, "Dismount");
  byte_25D9C17 = 4;
  strcpy((char *)&dword_25D9C00, "Walk");
  byte_25D9C2F = 5;
  strcpy((char *)&dword_25D9C18, "Mount");
  byte_25D9C47 = 7;
  strcpy((char *)&dword_25D9C30, "Remount");
  strcpy(&byte_25D9C5F, "\t_Crosswalk");
  strcpy((char *)&qword_25D9C48, "Walk_Road");
  strcpy(&byte_25D9C77, "\n_PLURAL");
  byte_25D9C8F = 7;
  strcpy(&byte_25D9CA7, "\n{description1}");
  strcpy((char *)&qword_25D9C90, "_SECONDARY");
  byte_25D9CBF = 14;
  byte_25D9CD7 = 14;
  strcpy((char *)&qword_25D9CC0, "{description2}");
  byte_25D9CEF = 21;
  strcpy((char *)&xmmword_25D9CD8, "TWO_ROAD_DESCRIPTIONS");
  byte_25D9D07 = 17;
  strcpy((char *)&xmmword_25D9CF0, "{SlopePercentage}");
  byte_25D9D1F = 15;
  strcpy((char *)&qword_25D9D08, "_Protected_Lane");
  strcpy(&byte_25D9D37, "\n_Paved_Path");
  strcpy((char *)&qword_25D9D20, "_Bike_Path");
  byte_25D9D4F = 11;
  byte_25D9D67 = 15;
  strcpy((char *)&qword_25D9D50, "_Dedicated_Lane");
  byte_25D9D7F = 12;
  strcpy((char *)&qword_25D9D68, "_Shared_Path");
  strcpy(&byte_25D9D97, "\n_UnnamedRoad");
  strcpy((char *)&qword_25D9D80, "_Bike_Lane");
  byte_25D9DAF = 12;
  byte_25D9DC7 = 5;
  strcpy((char *)&dword_25D9DB0, "_Path");
  byte_25D9DDF = 6;
  strcpy((char *)&dword_25D9DC8, "_Trail");
  strcpy(&byte_25D9DF7, "\t_Plaza");
  strcpy((char *)&qword_25D9DE0, "_Sidewalk");
  byte_25D9E0F = 6;
  byte_25D9E27 = 15;
  strcpy((char *)&qword_25D9E10, "_Moving_Walkway");
  byte_25D9E3F = 14;
  strcpy((char *)&qword_25D9E28, "Two_Stage_Turn");
  byte_25D9E57 = 16;
  strcpy((char *)&xmmword_25D9E40, "{OptionalPeriod}");
  byte_25D9E6F = 18;
  strcpy((char *)&xmmword_25D9E58, "Advisory_Separator");
  byte_25D9E87 = 6;
  strcpy((char *)&dword_25D9E70, "Period");
  byte_25D9E9F = 21;
  qmemcpy(v280, "Advisory_Title_Ne_Notice", 24);
  strcpy((char *)&xmmword_25D9E88, "Advisory_Title_Notice");
  *(void *)&long long v279 = *(void *)"_Notices";
  long long v277 = *(_OWORD *)"Advisory_Title_Notices";
  strcpy((char *)&xmmword_25D9EA0, "Advisory_Title_Notices");
  HIBYTE(word_25D9EB6) = 22;
  byte_25D9ECF = 7;
  strcpy((char *)&dword_25D9EB8, "_DETAIL");
  byte_25D9EE7 = 17;
  strcpy((char *)&xmmword_25D9ED0, "_LONG_REGION_LIST");
  byte_25D9EFF = 16;
  strcpy((char *)&xmmword_25D9EE8, "Advisory_Grouped");
  byte_25D9F17 = 11;
  strcpy((char *)&qword_25D9F00, "_Advisories");
  qword_25D9F18 = (uint64_t)operator new(0x20uLL);
  unk_25D9F20 = v274;
  strcpy((char *)qword_25D9F18, "Advisory_WILDFIRE_METADATA_");
  byte_25D9F47 = 8;
  strcpy((char *)&qword_25D9F30, "Advisory");
  byte_25D9F5F = 13;
  strcpy((char *)&qword_25D9F48, "MPR_NUM_STOPS");
  byte_25D9F77 = 17;
  strcpy(byte_25D9F60, "EV_CHARGE_STATION");
  byte_25D9F8F = 11;
  strcpy((char *)&qword_25D9F78, "_NAMED_CITY");
  byte_25D9FA7 = 5;
  strcpy((char *)&dword_25D9F90, "_Stop");
  strcpy(&byte_25D9FBF, "\n{StopsCount}");
  strcpy((char *)&qword_25D9FA8, "{CityName}");
  byte_25D9FD7 = 12;
  byte_25D9FEF = 11;
  strcpy((char *)&qword_25D9FD8, "_With_Other");
  byte_25DA007 = 15;
  *(void *)&long long v272 = *(void *)"{DepartureTime}";
  strcpy((char *)&qword_25D9FF0, "{DepartureTime}");
  *(void *)&v269[32] = *(void *)"ureTime}";
  qword_25DA008 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25DA010 = v275;
  strcpy((char *)qword_25DA008, "Ending_Charge_Station_Port_Availability");
  qword_25DA020 = (uint64_t)operator new(0x28uLL);
  unk_25DA028 = v268;
  strcpy((char *)qword_25DA020, "Ending_Charge_Station_No_Availability");
  qword_25DA038 = (uint64_t)operator new(0x28uLL);
  unk_25DA040 = *(_OWORD *)&v269[48];
  strcpy((char *)qword_25DA038, "Ending_Charge_Station_No_Real_Time");
  byte_25DA067 = 16;
  strcpy(byte_25DA050, "{AvailablePorts}");
  byte_25DA07F = 12;
  strcpy((char *)&qword_25DA068, "{TotalPorts}");
  byte_25DA097 = 14;
  strcpy((char *)&qword_25DA080, "{ManeuverIcon}");
  qword_25DA098 = (uint64_t)operator new(0x38uLL);
  unk_25DA0A0 = xmmword_20B9A60;
  strcpy((char *)qword_25DA098, "Walking_Distance_ManeuverIcon_PrimaryInstruction");
  qword_25DA0B0 = (uint64_t)operator new(0x20uLL);
  unk_25DA0B8 = v274;
  strcpy((char *)qword_25DA0B0, "Walking_Destination_Unnamed");
  qword_25DA0C8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25DA0D0 = v276;
  strcpy((char *)qword_25DA0C8, "TrafficDelay_Label_Title_Sign");
  qword_25DA0E0 = (uint64_t)operator new(0x20uLL);
  unk_25DA0E8 = v278;
  strcpy((char *)qword_25DA0E0, "Special_Guidance_Instruction");
  byte_25DA10F = 2;
  strcpy((char *)&word_25DA0F8, "CZ");
  byte_25DA127 = 3;
  dword_25DA110 = 5919811;
  unk_25DA13F = 3;
  dword_25DA128 = 6243649;
  byte_25DA157 = 0;
  byte_25DA16F = 7;
  strcpy((char *)&xmmword_25DA158, "TRANSIT");
  byte_25DA187 = 7;
  strcpy((char *)&dword_25DA170, "OFFLINE");
  qword_25DA188 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25DA190 = v270;
  strcpy((char *)qword_25DA188, "Advisory_Card_French_Climate_Law_Title");
  qword_25DA1A0 = (uint64_t)operator new(0x30uLL);
  unk_25DA1A8 = xmmword_20B93C0;
  strcpy((char *)qword_25DA1A0, "Advisory_Card_French_Climate_Law_Details");
  qword_25DA1B8 = (uint64_t)operator new(0x30uLL);
  unk_25DA1C0 = v273;
  strcpy((char *)qword_25DA1B8, "French_Climate_Law_Metadata_Weblink_Title");
  qword_25DA1D0 = (uint64_t)operator new(0x20uLL);
  unk_25DA1D8 = v278;
  strcpy((char *)qword_25DA1D0, "{ClimateLawLearnMoreWeblink}");
  byte_25DA1FF = 3;
  dword_25DA1E8 = 4280902;
  qword_25DA200 = (uint64_t)operator new(0x70uLL);
  unk_25DA208 = xmmword_20E81E0;
  strcpy((char *)qword_25DA200, "https://www.vie-publique.fr/loi/278460-loi-22-aout-2021-climat-et-resilience-convention-citoyenne-climat");
  byte_25DA22F = 1;
  word_25DA218 = 65;
  byte_25DA247 = 1;
  word_25DA230 = 65;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__dst, "UNKNOWN");
  *(_DWORD *)BOOL v283 = 0;
  HIBYTE(v284[0]) = 14;
  strcpy(&v283[8], "ROUTES_THROUGH");
  LODWORD(v284[1]) = 1;
  v285[23] = 9;
  strcpy(v285, "ROUTES_TO");
  LODWORD(v286) = 3;
  HIBYTE(v288) = 11;
  strcpy((char *)v287, "ROUTES_FROM");
  LODWORD(v289) = 2;
  xmmword_25DAA40 = 0u;
  *(_OWORD *)&qword_25DAA50 = 0u;
  dword_25DAA60 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25DAA40, (uint64_t)&__dst, (uint64_t)&__dst);
  sub_3A6EF0((uint64_t)&xmmword_25DAA40, (uint64_t)&v283[8], (uint64_t)&v283[8]);
  sub_3A6EF0((uint64_t)&xmmword_25DAA40, (uint64_t)v285, (uint64_t)v285);
  sub_3A6EF0((uint64_t)&xmmword_25DAA40, (uint64_t)v287, (uint64_t)v287);
  if (SHIBYTE(v288) < 0)
  {
    operator delete(v287[0]);
    if ((v285[23] & 0x80000000) == 0)
    {
LABEL_534:
      if ((SHIBYTE(v284[0]) & 0x80000000) == 0) {
        goto LABEL_535;
      }
LABEL_547:
      operator delete(*(void **)&v283[8]);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_536;
      }
LABEL_548:
      operator delete(__dst.__r_.__value_.__l.__data_);
      goto LABEL_536;
    }
  }
  else if ((v285[23] & 0x80000000) == 0)
  {
    goto LABEL_534;
  }
  operator delete(*(void **)v285);
  if (SHIBYTE(v284[0]) < 0) {
    goto LABEL_547;
  }
LABEL_535:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_548;
  }
LABEL_536:
  byte_25DA25F = 8;
  strcpy((char *)&qword_25DA248, "any_mode");
  byte_25DA277 = 7;
  strcpy((char *)&dword_25DA260, "cycling");
  byte_25DA28F = 7;
  strcpy((char *)&dword_25DA278, "driving");
  byte_25DA2A7 = 7;
  strcpy((char *)&dword_25DA290, "walking");
  qword_25DA2A8 = 0;
  unk_25DA2B0 = 0;
  qword_25DA2B8 = 0;
  int64_t v259 = (char *)operator new(9uLL);
  *(void *)int64_t v259 = 0x4020C000103050DLL;
  v259[8] = 6;
  qword_25DA2A8 = (uint64_t)v259;
  unk_25DA2B0 = v259 + 9;
  qword_25DA2B8 = (uint64_t)(v259 + 9);
  qword_25DA2C0 = 0;
  qword_25DA2C8 = 0;
  unk_25DA2D0 = 0;
  int64_t v260 = (char *)operator new(9uLL);
  qword_25DA2C8 = (uint64_t)(v260 + 9);
  unk_25DA2D0 = v260 + 9;
  *(void *)int64_t v260 = 0x604020C00010305;
  v260[8] = 13;
  qword_25DA2C0 = (uint64_t)v260;
  byte_25DA2EF = 6;
  strcpy((char *)&qword_25DA2D8, "{Mode}");
  byte_25DA307 = 11;
  strcpy((char *)&qword_25DA2F0, "{Direction}");
  byte_25DA31F = 6;
  strcpy((char *)&dword_25DA308, "{Line}");
  byte_25DA337 = 12;
  strcpy((char *)&qword_25DA320, "{LineNumber}");
  strcpy(&byte_25DA34F, "\n{Headsign1}");
  strcpy((char *)&qword_25DA338, "{Headsign}");
  byte_25DA367 = 11;
  byte_25DA37F = 11;
  strcpy((char *)&qword_25DA368, "{Headsign2}");
  byte_25DA397 = 11;
  strcpy((char *)&qword_25DA380, "{Headsign3}");
  byte_25DA3AF = 11;
  strcpy((char *)&qword_25DA398, "{Headsign4}");
  byte_25DA3C7 = 11;
  strcpy((char *)&qword_25DA3B0, "{Headsign5}");
  byte_25DA3DF = 6;
  strcpy((char *)&dword_25DA3C8, "{Stop}");
  byte_25DA3F7 = 14;
  strcpy((char *)&qword_25DA3E0, "{PreviousStop}");
  byte_25DA40F = 8;
  strcpy((char *)&xmmword_25DA3F8, "{System}");
  byte_25DA427 = 15;
  strcpy((char *)&qword_25DA410, "{VehicleNumber}");
  byte_25DA43F = 17;
  strcpy((char *)&xmmword_25DA428, "{AccessPointExit}");
  strcpy(&byte_25DA457, "\n{nextBoardStation}");
  strcpy((char *)&qword_25DA440, "{Platform}");
  byte_25DA46F = 18;
  qword_25DA478 = 0;
  unk_25DA480 = 0;
  qword_25DA470 = 0;
  byte_25DA49F = 1;
  word_25DA488 = 32;
  qword_25DA4A0 = (uint64_t)operator new(0x20uLL);
  unk_25DA4A8 = v276;
  strcpy((char *)qword_25DA4A0, "LeaveStop_Loc_Comma_Separator");
  byte_25DA4CF = 5;
  dword_25DA4B8 = -1028144608;
  word_25DA4BC = 160;
  byte_25DA4E7 = 2;
  word_25DA4D0 = -24382;
  byte_25DA4D2 = 0;
  byte_25DA4FF = 4;
  dword_25DA4E8 = 548913696;
  byte_25DA4EC = 0;
  byte_25DA517 = 15;
  strcpy((char *)&qword_25DA500 + 7, "\xB7 {/s:s}");
  strcpy((char *)&qword_25DA500, "{s:s} ·");
  byte_25DA52F = 6;
  strcpy((char *)&dword_25DA518, "NoType");
  byte_25DA547 = 14;
  strcpy((char *)&qword_25DA530, "{WalkDistance}");
  strcpy(&byte_25DA55F, "\n{OneMinute}");
  strcpy((char *)&qword_25DA548, "{WalkTime}");
  byte_25DA577 = 11;
  byte_25DA58F = 14;
  strcpy((char *)&qword_25DA578, "{StepDuration}");
  byte_25DA5A7 = 15;
  strcpy((char *)&qword_25DA590, "{TripFrequency}");
  byte_25DA5BF = 11;
  strcpy((char *)&qword_25DA5A8, "{BoardTime}");
  byte_25DA5D7 = 12;
  strcpy((char *)&qword_25DA5C0, "{AlightTime}");
  byte_25DA5EF = 21;
  strcpy((char *)&xmmword_25DA5D8, "{FutureTimestampList}");
  byte_25DA607 = 15;
  *(uint64_t *)((char *)&qword_25DA5F0 + 7) = *(void *)&v269[32];
  qword_25DA5F0 = v272;
  byte_25DA5FF = 0;
  byte_25DA61F = 13;
  strcpy((char *)&qword_25DA608, "{ArrivalTime}");
  byte_25DA637 = 19;
  strcpy((char *)&xmmword_25DA620, "{TotalWalkDistance}");
  byte_25DA64F = 14;
  strcpy((char *)&qword_25DA638, "{TripDuration}");
  byte_25DA667 = 11;
  strcpy((char *)&qword_25DA650, "{DayOfWeek}");
  byte_25DA67F = 6;
  strcpy((char *)&qword_25DA668, "{Date}");
  byte_25DA697 = 16;
  strcpy((char *)&xmmword_25DA680, "{OutTheDoorTime}");
  *(void *)algn_25DA698 = operator new(0x20uLL);
  strcpy(*(char **)algn_25DA698, "{FirstVehicleDepartureTime}");
  byte_25DA6C7 = 18;
  xmmword_25DA6A0 = v274;
  strcpy(byte_25DA6B0, "{RouteArrivalTime}");
  strcpy(&byte_25DA6DF, "\n{IC_Artwork}");
  strcpy((char *)&qword_25DA6C8, "{BaseFare}");
  byte_25DA6F7 = 12;
  byte_25DA70F = 11;
  strcpy((char *)&qword_25DA6F8, "{RT_Symbol}");
  byte_25DA727 = 12;
  strcpy((char *)&qword_25DA710, "{TotalPrice}");
  byte_25DA73F = 13;
  strcpy((char *)&qword_25DA728, "{CheckInTime}");
  byte_25DA757 = 19;
  strcpy((char *)&xmmword_25DA740, "{LiveDepartureTime}");
  strcpy(&byte_25DA76F, "\n{LegDuration}");
  strcpy((char *)&qword_25DA758, "{TimeList}");
  byte_25DA787 = 13;
  byte_25DA79F = 15;
  strcpy((char *)&qword_25DA788, "{CountdownList}");
  byte_25DA7B7 = 3;
  dword_25DA7A0 = 8217723;
  strcpy(&byte_25DA7CF, "\t{AccessPointArt}");
  strcpy((char *)&qword_25DA7B8, "{LineArt}");
  byte_25DA7E7 = 16;
  byte_25DA7FF = 11;
  strcpy((char *)&qword_25DA7E8, "{SystemArt}");
  strcpy(&byte_25DA817, "\n{ServiceBeginTime}");
  strcpy((char *)&qword_25DA800, "{CardName}");
  byte_25DA82F = 18;
  byte_25DA847 = 16;
  strcpy((char *)&xmmword_25DA830, "{ServiceEndTime}");
  byte_25DA85F = 6;
  strcpy((char *)&dword_25DA848, "OnTime");
  byte_25DA877 = 6;
  strcpy((char *)&dword_25DA860, "Delays");
  byte_25DA88F = 1;
  word_25DA878 = 115;
  byte_25DA8A7 = 2;
  strcpy((char *)&word_25DA890, "cs");
  byte_25DA8BF = 1;
  word_25DA8A8 = 112;
  byte_25DA8D7 = 5;
  strcpy((char *)&dword_25DA8C0, "_Line");
  byte_25DA8EF = 7;
  strcpy((char *)&dword_25DA8D8, "_System");
  strcpy(&byte_25DA907, "\n_VehicleNumber");
  strcpy((char *)&qword_25DA8F0, "_Direction");
  byte_25DA91F = 14;
  byte_25DA937 = 12;
  strcpy((char *)&qword_25DA920, "_To_Headsign");
  byte_25DA94F = 16;
  strcpy((char *)&xmmword_25DA938, "_Toward_Headsign");
  strcpy(&byte_25DA967, "\t_LineNumber");
  strcpy((char *)&qword_25DA950, "_Headsign");
  byte_25DA97F = 11;
  byte_25DA997 = 21;
  *(void *)((char *)&xmmword_25DA980 + 13) = *(void *)&v280[16];
  xmmword_25DA980 = *(_OWORD *)v280;
  byte_25DA995 = 0;
  *(void *)((char *)&xmmword_25DA998 + 14) = v279;
  xmmword_25DA998 = v277;
  word_25DA9AE = 5632;
  qword_25DA9B0 = (uint64_t)operator new(0x30uLL);
  unk_25DA9B8 = v273;
  strcpy((char *)qword_25DA9B0, "Canceled {System} {Mode} may affect route");
  qword_25DA9C8 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_25DA9D0 = xmmword_20B9380;
  strcpy((char *)qword_25DA9C8, "Delays on {System} may affect future connection");
  qword_25DA9E0 = (uint64_t)operator new(0x38uLL);
  unk_25DA9E8 = xmmword_20B9AC0;
  strcpy((char *)qword_25DA9E0, "Delayed {System} {Mode} may affect future connection");
  qword_25DA9F8 = (uint64_t)operator new(0x28uLL);
  unk_25DAA00 = v270;
  strcpy((char *)qword_25DA9F8, "Early {System} {Mode} may affect route");
  double result = (char *)operator new(0x28uLL);
  qword_25DAA10 = (uint64_t)result;
  unk_25DAA18 = v271;
  strcpy(result, "Skipped station may affect route");
  byte_25DAA3F = 19;
  strcpy(byte_25DAA28, "Advisory_StaticData");
  return result;
}

void sub_9633DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x3C7]) < 0)
  {
    operator delete((void *)STACK[0x3B0]);
    if ((SLOBYTE(STACK[0x3AF]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((SLOBYTE(STACK[0x3AF]) & 0x80000000) == 0)
  {
LABEL_3:
    if (SLOBYTE(STACK[0x397]) < 0) {
      goto LABEL_4;
    }
    goto LABEL_18;
  }
  operator delete((void *)STACK[0x398]);
  if (SLOBYTE(STACK[0x397]) < 0)
  {
LABEL_4:
    operator delete((void *)STACK[0x380]);
    if ((SLOBYTE(STACK[0x37F]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  if ((SLOBYTE(STACK[0x37F]) & 0x80000000) == 0)
  {
LABEL_5:
    if (SLOBYTE(STACK[0x367]) < 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete((void *)STACK[0x368]);
  if (SLOBYTE(STACK[0x367]) < 0)
  {
LABEL_6:
    operator delete((void *)STACK[0x350]);
    if ((SLOBYTE(STACK[0x34F]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  if ((SLOBYTE(STACK[0x34F]) & 0x80000000) == 0)
  {
LABEL_7:
    if (SLOBYTE(STACK[0x337]) < 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete((void *)STACK[0x338]);
  if (SLOBYTE(STACK[0x337]) < 0)
  {
LABEL_8:
    operator delete((void *)STACK[0x320]);
    if ((SLOBYTE(STACK[0x31F]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  if ((SLOBYTE(STACK[0x31F]) & 0x80000000) == 0)
  {
LABEL_9:
    if (SLOBYTE(STACK[0x307]) < 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete((void *)STACK[0x308]);
  if (SLOBYTE(STACK[0x307]) < 0)
  {
LABEL_10:
    operator delete((void *)STACK[0x2F0]);
    if ((SLOBYTE(STACK[0x2EF]) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  if ((SLOBYTE(STACK[0x2EF]) & 0x80000000) == 0)
  {
LABEL_11:
    if (SLOBYTE(STACK[0x2D7]) < 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  operator delete((void *)STACK[0x2D8]);
  if (SLOBYTE(STACK[0x2D7]) < 0)
  {
LABEL_12:
    operator delete((void *)STACK[0x2C0]);
    if ((SLOBYTE(STACK[0x2BF]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  if ((SLOBYTE(STACK[0x2BF]) & 0x80000000) == 0)
  {
LABEL_13:
    if (SLOBYTE(STACK[0x2A7]) < 0) {
      goto LABEL_14;
    }
    goto LABEL_28;
  }
LABEL_27:
  operator delete((void *)STACK[0x2A8]);
  if (SLOBYTE(STACK[0x2A7]) < 0)
  {
LABEL_14:
    operator delete((void *)STACK[0x290]);
    if (SLOBYTE(STACK[0x28F]) < 0)
    {
LABEL_36:
      operator delete((void *)STACK[0x278]);
      if ((SLOBYTE(STACK[0x277]) & 0x80000000) == 0)
      {
LABEL_37:
        if (SLOBYTE(STACK[0x25F]) < 0)
        {
LABEL_38:
          operator delete((void *)STACK[0x248]);
          if ((SLOBYTE(STACK[0x247]) & 0x80000000) == 0)
          {
LABEL_39:
            if (SLOBYTE(STACK[0x22F]) < 0)
            {
LABEL_40:
              operator delete((void *)STACK[0x218]);
              if ((SLOBYTE(STACK[0x217]) & 0x80000000) == 0)
              {
LABEL_41:
                if (a74 < 0) {
                  goto LABEL_42;
                }
                goto LABEL_44;
              }
LABEL_34:
              operator delete((void *)STACK[0x200]);
              if (a74 < 0)
              {
LABEL_42:
                operator delete(a73);
                if ((a72 & 0x80000000) == 0) {
                  goto LABEL_43;
                }
                goto LABEL_45;
              }
LABEL_44:
              if ((a72 & 0x80000000) == 0) {
LABEL_43:
              }
                _Unwind_Resume(a1);
LABEL_45:
              operator delete(a67);
              _Unwind_Resume(a1);
            }
LABEL_33:
            if ((SLOBYTE(STACK[0x217]) & 0x80000000) == 0) {
              goto LABEL_41;
            }
            goto LABEL_34;
          }
LABEL_32:
          operator delete((void *)STACK[0x230]);
          if (SLOBYTE(STACK[0x22F]) < 0) {
            goto LABEL_40;
          }
          goto LABEL_33;
        }
LABEL_31:
        if ((SLOBYTE(STACK[0x247]) & 0x80000000) == 0) {
          goto LABEL_39;
        }
        goto LABEL_32;
      }
LABEL_30:
      operator delete((void *)STACK[0x260]);
      if (SLOBYTE(STACK[0x25F]) < 0) {
        goto LABEL_38;
      }
      goto LABEL_31;
    }
LABEL_29:
    if ((SLOBYTE(STACK[0x277]) & 0x80000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_30;
  }
LABEL_28:
  if (SLOBYTE(STACK[0x28F]) < 0) {
    goto LABEL_36;
  }
  goto LABEL_29;
}

void sub_963734(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t)a1;
  *(_OWORD *)int v42 = 0u;
  long long v43 = 0u;
  int v44 = 1065353216;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  long long __p = 0;
  uint64_t v3 = a2 + 24;
  sub_2F99CC(v41, a2 + 24, *a1);
  sub_2F99CC(v40, (uint64_t)v41, v3);
  sub_9D6CD4(v39, (uint64_t)v41, v3, *(void *)(v2 + 8));
  sub_9D4978(v38, (uint64_t)v41, v3);
  sub_9CE800(v37, (uint64_t)v41, v3, (uint64_t)v42);
  size_t v5 = *(uint64_t ***)a2;
  int v4 = *(uint64_t ***)(a2 + 8);
  if (*(uint64_t ***)a2 != v4)
  {
    unint64_t v33 = *(uint64_t ***)(a2 + 8);
    uint64_t v34 = v2;
    do
    {
      sub_9A67B8(v40, v5, &v35);
      sub_963ACC(v7, &v35, (uint64_t)v5, v42);
      sub_964278(v2, (uint64_t)v39, v5, v42);
      sub_9647E0(v8, v38, (uint64_t)v37, v5, v42);
      uint64_t v9 = v35;
      if (v35)
      {
        unint64_t v10 = v36;
        unint64_t v6 = v35;
        if (v36 != v35)
        {
          uint64_t v11 = (void **)v36;
          do
          {
            unint64_t v14 = (void **)*(v11 - 3);
            v11 -= 3;
            size_t v13 = v14;
            if (v14)
            {
              long long v15 = (void **)*(v10 - 2);
              int v12 = v13;
              if (v15 != v13)
              {
                uint64_t v16 = (void **)*(v10 - 2);
                do
                {
                  unint64_t v19 = (char *)*(v16 - 3);
                  v16 -= 3;
                  uint64_t v18 = v19;
                  if (v19)
                  {
                    uint64_t v20 = (char *)*(v15 - 2);
                    uint64_t v17 = v18;
                    if (v20 != v18)
                    {
                      uint64_t v21 = v20 - 65;
                      while (1)
                      {
                        long long v22 = v21 - 103;
                        int v23 = *(_DWORD *)(v21 + 57);
                        if (v23 == 1)
                        {
                          sub_4D4B58((uint64_t)(v21 - 103));
                        }
                        else if (!v23)
                        {
                          if (*v21 < 0)
                          {
                            operator delete(*(void **)(v21 - 23));
                            if ((*(v21 - 32) & 0x80000000) == 0) {
                              goto LABEL_27;
                            }
                          }
                          else if ((*(v21 - 32) & 0x80000000) == 0)
                          {
LABEL_27:
                            int v24 = *(_DWORD *)(v21 - 71);
                            if (v24 == 1) {
                              goto LABEL_33;
                            }
LABEL_28:
                            if (!v24 && *(v21 - 72) < 0) {
                              operator delete(*(void **)(v21 - 95));
                            }
                            goto LABEL_22;
                          }
                          operator delete(*(void **)(v21 - 55));
                          int v24 = *(_DWORD *)(v21 - 71);
                          if (v24 == 1)
                          {
LABEL_33:
                            size_t v25 = *(void **)(v21 - 95);
                            if (v25)
                            {
                              *(void *)(v21 - 87) = v25;
                              operator delete(v25);
                            }
                            goto LABEL_22;
                          }
                          goto LABEL_28;
                        }
LABEL_22:
                        v21 -= 168;
                        if (v22 == v18)
                        {
                          uint64_t v17 = *v16;
                          break;
                        }
                      }
                    }
                    *(v15 - 2) = v18;
                    operator delete(v17);
                  }
                  long long v15 = v16;
                }
                while (v16 != v13);
                int v12 = *v11;
              }
              *(v10 - 2) = v13;
              operator delete(v12);
            }
            unint64_t v10 = v11;
          }
          while (v11 != (void **)v9);
          uint64_t v2 = v34;
          unint64_t v6 = v35;
          int v4 = v33;
        }
        uint64_t v36 = v9;
        operator delete(v6);
      }
      v5 += 390;
    }
    while (v5 != v4);
  }
  if ((void **)(a2 + 168) != &__p) {
    sub_965944((uint64_t *)(a2 + 168), (std::string *)__p, v46, 0x6DB6DB6DB6DB6DB7 * (((char *)v46 - (unsigned char *)__p) >> 4));
  }
  unint64_t v26 = (std::string *)__p;
  if (__p)
  {
    uint64_t v27 = v46;
    uint64_t v28 = __p;
    if (v46 == __p)
    {
LABEL_54:
      uint64_t v46 = v26;
      operator delete(v28);
      goto LABEL_55;
    }
    while (1)
    {
      if (v27[-1].__r_.__value_.__s.__data_[15] < 0)
      {
        operator delete((void *)v27[-2].__r_.__value_.__r.__words[2]);
        if ((v27[-2].__r_.__value_.__s.__data_[7] & 0x80000000) == 0)
        {
LABEL_46:
          int v30 = v27[-4].__r_.__value_.__r.__words[2];
          if (v30 != 1) {
            goto LABEL_50;
          }
          goto LABEL_40;
        }
      }
      else if ((v27[-2].__r_.__value_.__s.__data_[7] & 0x80000000) == 0)
      {
        goto LABEL_46;
      }
      operator delete((void *)v27[-3].__r_.__value_.__l.__size_);
      int v30 = v27[-4].__r_.__value_.__r.__words[2];
      if (v30 != 1)
      {
LABEL_50:
        if (v30 || (v27[-4].__r_.__value_.__s.__data_[15] & 0x80000000) == 0) {
          goto LABEL_43;
        }
        uint64_t v29 = (void *)v27[-5].__r_.__value_.__r.__words[2];
        goto LABEL_42;
      }
LABEL_40:
      uint64_t v29 = (void *)v27[-5].__r_.__value_.__r.__words[2];
      if (v29)
      {
        v27[-4].__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
LABEL_42:
        operator delete(v29);
      }
LABEL_43:
      uint64_t v27 = (std::string *)((char *)v27 - 112);
      if (v27 == v26)
      {
        uint64_t v28 = __p;
        goto LABEL_54;
      }
    }
  }
LABEL_55:
  sub_965780((uint64_t)v42, (void *)v43);
  int v31 = v42[0];
  v42[0] = 0;
  if (v31) {
    operator delete(v31);
  }
}

void sub_963A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_963AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void ***a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_963ACC(uint64_t a1, uint64_t ***a2, uint64_t a3, void *a4)
{
  int v4 = *a2;
  unint64_t v81 = a2[1];
  if (*a2 != v81)
  {
    size_t v5 = a4;
    uint64_t v6 = a3;
    int v79 = (char **)(a3 + 1032);
    uint64_t v89 = (uint64_t)(a4 + 3);
    size_t v87 = a4 + 5;
    do
    {
      uint64_t v7 = *(void **)(v6 + 1040);
      if ((unint64_t)v7 >= *(void *)(v6 + 1048))
      {
        uint64_t v8 = sub_965C8C(v79);
        *(void *)(v6 + 1040) = v8;
        int64_t v82 = v4;
        std::string v85 = v4[1];
        int v86 = *v4;
        if (*v4 != v85)
        {
LABEL_8:
          unint64_t v83 = v8 - 24;
          uint64_t v84 = v8;
          while (1)
          {
            unint64_t v10 = (void **)*((void *)v8 - 2);
            unint64_t v9 = *((void *)v8 - 1);
            if ((unint64_t)v10 >= v9)
            {
              int v12 = *(void ***)v83;
              unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v10 - *(void *)v83) >> 3);
              unint64_t v14 = v13 + 1;
              if (v13 + 1 > 0xAAAAAAAAAAAAAAALL) {
                sub_2E00();
              }
              unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)v12) >> 3);
              if (2 * v15 > v14) {
                unint64_t v14 = 2 * v15;
              }
              unint64_t v16 = v15 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v14;
              if (v16)
              {
                if (v16 > 0xAAAAAAAAAAAAAAALL) {
                  goto LABEL_111;
                }
                uint64_t v17 = (char *)operator new(24 * v16);
              }
              else
              {
                uint64_t v17 = 0;
              }
              uint64_t v18 = &v17[24 * v13];
              unint64_t v19 = &v17[24 * v16];
              *(void *)uint64_t v18 = 0;
              *((void *)v18 + 1) = 0;
              *((void *)v18 + 2) = 0;
              uint64_t v11 = v18 + 24;
              if (v10 == v12)
              {
                *((void *)v8 - 3) = v18;
                *((void *)v8 - 2) = v11;
                *((void *)v8 - 1) = v19;
              }
              else
              {
                do
                {
                  uint64_t v20 = v18;
                  *((void *)v18 - 2) = 0;
                  *((void *)v18 - 1) = 0;
                  long long v21 = *(_OWORD *)(v10 - 3);
                  v10 -= 3;
                  *(_OWORD *)(v18 - 24) = v21;
                  v18 -= 24;
                  *((void *)v20 - 1) = v10[2];
                  *unint64_t v10 = 0;
                  v10[1] = 0;
                  v10[2] = 0;
                }
                while (v10 != v12);
                unint64_t v10 = (void **)*((void *)v8 - 3);
                long long v22 = (void **)*((void *)v8 - 2);
                *((void *)v8 - 3) = v18;
                *((void *)v8 - 2) = v11;
                *((void *)v8 - 1) = v19;
                if (v22 != v10)
                {
                  int v23 = v22;
                  do
                  {
                    unint64_t v26 = *(v23 - 3);
                    v23 -= 3;
                    size_t v25 = v26;
                    if (v26)
                    {
                      uint64_t v27 = (uint64_t)*(v22 - 2);
                      int v24 = v25;
                      if ((void *)v27 != v25)
                      {
                        do
                        {
                          uint64_t v28 = v27 - 168;
                          if (*(_DWORD *)(v27 - 8) == 1) {
                            uint64_t v28 = sub_4D4B58(v28);
                          }
                          uint64_t v27 = v28;
                        }
                        while ((void *)v28 != v25);
                        int v24 = *v23;
                      }
                      *(v22 - 2) = v25;
                      operator delete(v24);
                    }
                    long long v22 = v23;
                  }
                  while (v23 != v10);
                }
              }
              if (v10) {
                operator delete(v10);
              }
            }
            else
            {
              *unint64_t v10 = 0;
              v10[1] = 0;
              uint64_t v11 = v10 + 3;
              v10[2] = 0;
            }
            *((void *)v8 - 2) = v11;
            uint64_t v30 = *v86;
            uint64_t v29 = v86[1];
            if (*v86 != v29) {
              break;
            }
LABEL_9:
            v86 += 3;
            uint64_t v8 = v84;
            if (v86 == v85) {
              goto LABEL_3;
            }
          }
          int v31 = v11 - 3;
          while (1)
          {
            int v33 = *(_DWORD *)(v30 + 160);
            if (v33 == 1)
            {
              unint64_t v39 = *(v11 - 2);
              if (v39 >= *(v11 - 1))
              {
                uint64_t v32 = sub_9667FC(v31, v30);
              }
              else
              {
                *(_DWORD *)(v39 + 160) = -1;
                uint64_t v40 = sub_4F58AC(v39, v30);
                *(_DWORD *)(v40 + 160) = 1;
                uint64_t v32 = v40 + 168;
              }
              goto LABEL_41;
            }
            if (!v33) {
              break;
            }
LABEL_42:
            v30 += 168;
            if (v30 == v29) {
              goto LABEL_9;
            }
          }
          unint64_t v34 = sub_8FC520(v89, v30);
          int8x8_t v35 = (int8x8_t)v5[1];
          if (v35)
          {
            unint64_t v36 = v34;
            uint8x8_t v37 = (uint8x8_t)vcnt_s8(v35);
            v37.i16[0] = vaddlv_u8(v37);
            if (v37.u32[0] > 1uLL)
            {
              unint64_t v38 = v34;
              if (v34 >= *(void *)&v35) {
                unint64_t v38 = v34 % *(void *)&v35;
              }
            }
            else
            {
              unint64_t v38 = (*(void *)&v35 - 1) & v34;
            }
            int v41 = *(void **)(*v5 + 8 * v38);
            if (v41)
            {
              int v42 = (void *)*v41;
              if (*v41)
              {
                if (v37.u32[0] < 2uLL)
                {
                  uint64_t v43 = *(void *)&v35 - 1;
                  while (1)
                  {
                    uint64_t v45 = v42[1];
                    if (v45 == v36)
                    {
                      if (sub_4F3B98((uint64_t)(v42 + 2), v30)) {
                        goto LABEL_76;
                      }
                    }
                    else if ((v45 & v43) != v38)
                    {
                      goto LABEL_67;
                    }
                    int v42 = (void *)*v42;
                    if (!v42) {
                      goto LABEL_67;
                    }
                  }
                }
                do
                {
                  unint64_t v44 = v42[1];
                  if (v44 == v36)
                  {
                    if (sub_4F3B98((uint64_t)(v42 + 2), v30))
                    {
LABEL_76:
                      uint64_t v57 = v42[16];
                      uint64_t v59 = (_DWORD *)*(v11 - 2);
                      unint64_t v58 = *(v11 - 1);
                      if ((unint64_t)v59 >= v58) {
                        goto LABEL_77;
                      }
LABEL_109:
                      *(void *)uint64_t v59 = v57;
                      v59[40] = 0;
                      uint64_t v32 = (uint64_t)(v59 + 42);
LABEL_41:
                      *(v11 - 2) = v32;
                      goto LABEL_42;
                    }
                  }
                  else
                  {
                    if (v44 >= *(void *)&v35) {
                      v44 %= *(void *)&v35;
                    }
                    if (v44 != v38) {
                      break;
                    }
                  }
                  int v42 = (void *)*v42;
                }
                while (v42);
              }
            }
          }
LABEL_67:
          unint64_t v46 = v5[6];
          uint64_t v90 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v46 - v5[5]) >> 4);
          if (v46 >= v5[7])
          {
            uint64_t v50 = sub_966000(v87, v30);
          }
          else
          {
            *(_DWORD *)(v46 + 32) = *(_DWORD *)(v30 + 32);
            int v47 = *(_DWORD *)(v30 + 32);
            if (v47 == 1)
            {
              uint64_t v51 = *(void *)v30;
              *(void *)(v46 + 8) = 0;
              *(void *)unint64_t v46 = v51;
              *(void *)(v46 + 16) = 0;
              *(void *)(v46 + 24) = 0;
              int v53 = *(unsigned char **)(v30 + 8);
              size_t v52 = *(unsigned char **)(v30 + 16);
              int64_t v54 = v52 - v53;
              if (v52 != v53)
              {
                if (v54 < 0) {
                  sub_2E00();
                }
                unint64_t v55 = (char *)operator new(v52 - v53);
                *(void *)(v46 + 8) = v55;
                *(void *)(v46 + 16) = v55;
                int64_t v56 = &v55[8 * (v54 >> 3)];
                *(void *)(v46 + 24) = v56;
                memcpy(v55, v53, v54);
                *(void *)(v46 + 16) = v56;
              }
            }
            else if (!v47)
            {
              *(void *)unint64_t v46 = *(void *)v30;
              uint64_t v48 = (unsigned char *)(v46 + 8);
              if (*(char *)(v30 + 31) < 0)
              {
                sub_4200(v48, *(void **)(v30 + 8), *(void *)(v30 + 16));
              }
              else
              {
                long long v49 = *(_OWORD *)(v30 + 8);
                *(void *)(v46 + 24) = *(void *)(v30 + 24);
                *(_OWORD *)uint64_t v48 = v49;
              }
            }
            *(void *)(v46 + 40) = *(void *)(v30 + 40);
            if (*(char *)(v30 + 71) < 0)
            {
              sub_4200((unsigned char *)(v46 + 48), *(void **)(v30 + 48), *(void *)(v30 + 56));
            }
            else
            {
              long long v76 = *(_OWORD *)(v30 + 48);
              *(void *)(v46 + 64) = *(void *)(v30 + 64);
              *(_OWORD *)(v46 + 48) = v76;
            }
            *(unsigned char *)(v46 + 72) = *(unsigned char *)(v30 + 72);
            int v77 = (unsigned char *)(v46 + 80);
            if (*(char *)(v30 + 103) < 0)
            {
              sub_4200(v77, *(void **)(v30 + 80), *(void *)(v30 + 88));
            }
            else
            {
              long long v78 = *(_OWORD *)(v30 + 80);
              *(void *)(v46 + 96) = *(void *)(v30 + 96);
              *(_OWORD *)int v77 = v78;
            }
            *(unsigned char *)(v46 + 104) = *(unsigned char *)(v30 + 104);
            uint64_t v50 = v46 + 112;
            v5[6] = v46 + 112;
          }
          v5[6] = v50;
          sub_966360((uint64_t)v5, v30, v30, &v90);
          uint64_t v57 = v90;
          uint64_t v59 = (_DWORD *)*(v11 - 2);
          unint64_t v58 = *(v11 - 1);
          if ((unint64_t)v59 < v58) {
            goto LABEL_109;
          }
LABEL_77:
          uint64_t v60 = v31;
          uint64_t v61 = *v31;
          unint64_t v62 = 0xCF3CF3CF3CF3CF3DLL * (((uint64_t)v59 - *v31) >> 3);
          unint64_t v63 = v62 + 1;
          if (v62 + 1 > 0x186186186186186) {
            sub_2E00();
          }
          unint64_t v64 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v58 - v61) >> 3);
          if (2 * v64 > v63) {
            unint64_t v63 = 2 * v64;
          }
          if (v64 >= 0xC30C30C30C30C3) {
            unint64_t v65 = 0x186186186186186;
          }
          else {
            unint64_t v65 = v63;
          }
          if (v65 > 0x186186186186186) {
LABEL_111:
          }
            sub_188D718();
          uint64_t v66 = 168 * v65;
          size_t v67 = (char *)operator new(168 * v65);
          int v68 = &v67[168 * v62];
          size_t v69 = &v67[v66];
          *(void *)int v68 = v57;
          *((_DWORD *)v68 + 40) = 0;
          uint64_t v32 = (uint64_t)(v68 + 168);
          if (v59 == (_DWORD *)v61)
          {
            *(v11 - 3) = v68;
            *(v11 - 2) = v32;
            *(v11 - 1) = v69;
          }
          else
          {
            uint64_t v70 = 0;
            do
            {
              int64_t v71 = &v68[v70 * 4 - 168];
              uint64_t v72 = &v59[v70 - 42];
              int v73 = v59[v70 - 2];
              *(_DWORD *)&v68[v70 * 4 - 8] = v73;
              if (v73 == 1)
              {
                sub_4F58AC((uint64_t)v71, (uint64_t)v72);
              }
              else if (!v73)
              {
                *(void *)int64_t v71 = *v72;
              }
              v70 -= 42;
            }
            while (&v59[v70] != (_DWORD *)v61);
            uint64_t v59 = (_DWORD *)*(v11 - 3);
            uint64_t v74 = (_DWORD *)*(v11 - 2);
            *(v11 - 3) = &v68[v70 * 4];
            *(v11 - 2) = v32;
            *(v11 - 1) = v69;
            if (v74 != v59)
            {
              int v31 = v60;
              size_t v5 = a4;
              do
              {
                uint64_t v75 = (uint64_t)(v74 - 42);
                if (*(v74 - 2) == 1) {
                  uint64_t v75 = sub_4D4B58(v75);
                }
                uint64_t v74 = (_DWORD *)v75;
              }
              while ((_DWORD *)v75 != v59);
              goto LABEL_98;
            }
          }
          int v31 = v60;
          size_t v5 = a4;
LABEL_98:
          if (v59) {
            operator delete(v59);
          }
          goto LABEL_41;
        }
      }
      else
      {
        *uint64_t v7 = 0;
        v7[1] = 0;
        uint64_t v8 = (char *)(v7 + 3);
        v7[2] = 0;
        *(void *)(v6 + 1040) = v7 + 3;
        int64_t v82 = v4;
        std::string v85 = v4[1];
        int v86 = *v4;
        if (*v4 != v85) {
          goto LABEL_8;
        }
      }
LABEL_3:
      int v4 = v82 + 3;
      uint64_t v6 = a3;
    }
    while (v82 + 3 != v81);
  }
}

void sub_9641E8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 48) = v2;
  _Unwind_Resume(a1);
}

void sub_9641F0(_Unwind_Exception *exception_object)
{
  size_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 16) = v5;
    operator delete(v5);
  }
  *(void *)(v1 + 48) = v2;
  _Unwind_Resume(exception_object);
}

void sub_964278(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  sub_9E6208((uint64_t)v30, a3);
  while (1)
  {
    sub_9E6260((uint64_t)v30, &v37);
    BOOL v4 = sub_9E6044(v30, &v37);
    sub_9467EC((uint64_t)&v43[8]);
    size_t v5 = __p;
    if (__p)
    {
      do
      {
        uint64_t v6 = (void *)*v5;
        operator delete(v5);
        size_t v5 = v6;
      }
      while (v6);
    }
    uint64_t v7 = v40;
    uint64_t v40 = 0;
    if (v7) {
      operator delete(v7);
    }
    if ((void)v39)
    {
      *((void *)&v39 + 1) = v39;
      operator delete((void *)v39);
    }
    if (!v4) {
      break;
    }
    long long v38 = 0u;
    long long v39 = 0u;
    long long v37 = 0u;
    memset(v43, 255, 7);
    memset(&v43[7], 0, 24);
    __int16 v44 = 0;
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    uint64_t v45 = 0;
    char v48 = 0;
    int v42 = -1;
    int v49 = -1;
    memset(v50, 255, sizeof(v50));
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    __int16 v54 = 0;
    uint64_t v51 = 0;
    uint64_t v55 = 0;
    uint64_t v56 = 0;
    char v58 = 0;
    uint64_t v57 = 0;
    switch(*(_DWORD *)sub_9E6230((uint64_t)v30))
    {
      case 1:
        uint64_t v8 = sub_9E6230((uint64_t)v30);
        sub_9E5A94((uint64_t)v30, 0xFFFFFFFFFFFFFFFFLL, (char **)&v28);
        sub_9D8AEC(a2, v8, (uint64_t)&v28, (uint64_t)v36);
        goto LABEL_13;
      case 2:
        uint64_t v9 = sub_9E6230((uint64_t)v30);
        sub_9D6CE0(a2, v9, 0, (uint64_t)v36);
        goto LABEL_29;
      case 3:
        uint64_t v10 = sub_9E6230((uint64_t)v30);
        sub_9E57A8((uint64_t)v30, (uint64_t **)&v28);
        sub_9D9290(a2, v10, (uint64_t)&v28, (uint64_t)v36);
LABEL_13:
        sub_964DB4((uint64_t)&v37, (uint64_t)v36);
        sub_934F58((uint64_t)v36);
        goto LABEL_25;
      case 4:
        uint64_t v11 = sub_9E6230((uint64_t)v30);
        sub_9E57A8((uint64_t)v30, (uint64_t **)&v28);
        sub_9D751C(a2, v11, (uint64_t *)&v28, (uint64_t)v36);
        sub_964DB4((uint64_t)&v37, (uint64_t)v36);
        sub_934F58((uint64_t)v36);
        if (v28)
        {
          uint64_t v29 = v28;
          operator delete(v28);
        }
        uint64_t v12 = sub_9E6230((uint64_t)v30);
        if (*((void *)&v38 + 1) != (void)v39)
        {
          uint64_t v13 = *(void *)(v12 + 3424);
          uint64_t v14 = *(void *)(v12 + 3432);
          if (v13 != v14)
          {
            uint64_t v15 = v13 + 320;
            do
            {
              uint64_t v16 = *((void *)&v38 + 1);
              sub_4F39B8(v15, *((std::string **)&v38 + 1));
              *(void *)(v15 + 40) = *(void *)(v16 + 40);
              std::string::operator=((std::string *)(v15 + 48), (const std::string *)(v16 + 48));
              *(unsigned char *)(v15 + 72) = *(unsigned char *)(v16 + 72);
              std::string::operator=((std::string *)(v15 + 80), (const std::string *)(v16 + 80));
              *(unsigned char *)(v15 + 104) = *(unsigned char *)(v16 + 104);
              uint64_t v17 = v15 + 144;
              v15 += 464;
            }
            while (v17 != v14);
          }
        }
        break;
      case 5:
        uint64_t v18 = sub_9E6230((uint64_t)v30);
        sub_9E57A8((uint64_t)v30, (uint64_t **)&v28);
        sub_9E5A94((uint64_t)v30, 0xFFFFFFFFFFFFFFFFLL, (char **)v27);
        sub_9D8838(a2, v18, &v28, (uint64_t **)v27, (uint64_t)v36);
        goto LABEL_23;
      case 6:
        sub_9E57A8((uint64_t)v30, (uint64_t **)&v28);
        sub_9E5A94((uint64_t)v30, 0xFFFFFFFFFFFFFFFFLL, (char **)v27);
        sub_9D7BB0(a2, &v28, (uint64_t **)v27, (uint64_t)v36);
LABEL_23:
        sub_964DB4((uint64_t)&v37, (uint64_t)v36);
        sub_934F58((uint64_t)v36);
        if (v27[0])
        {
          v27[1] = v27[0];
          operator delete(v27[0]);
        }
LABEL_25:
        if (v28)
        {
          uint64_t v29 = v28;
          operator delete(v28);
        }
        break;
      case 7:
        uint64_t v19 = sub_9E6230((uint64_t)v30);
        sub_9D7F50(a2, v19, (uint64_t)v36);
        goto LABEL_29;
      case 8:
        uint64_t v20 = sub_9E6230((uint64_t)v30);
        sub_9D8380(a2, v20, 0, (uint64_t)v36);
LABEL_29:
        sub_964DB4((uint64_t)&v37, (uint64_t)v36);
        sub_934F58((uint64_t)v36);
        break;
      default:
        break;
    }
    uint64_t v21 = sub_9E6230((uint64_t)v30);
    sub_964F54(v21, (uint64_t)&v37, v21, a4);
    sub_934F58((uint64_t)&v37);
    sub_9E5780(v30);
  }
  sub_9467EC((uint64_t)&v35);
  long long v22 = v34;
  if (v34)
  {
    do
    {
      int v23 = (void *)*v22;
      operator delete(v22);
      long long v22 = v23;
    }
    while (v23);
  }
  int v24 = v33;
  int v33 = 0;
  if (v24) {
    operator delete(v24);
  }
  if (v31)
  {
    uint64_t v32 = v31;
    operator delete(v31);
  }
}

void sub_9646E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15)
  {
    operator delete(a15);
    sub_934F58((uint64_t)&a71);
    sub_945B38(&a18);
    _Unwind_Resume(a1);
  }
  sub_934F58((uint64_t)&a71);
  sub_945B38(&a18);
  _Unwind_Resume(a1);
}

void sub_9647E0(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t **a4, void *a5)
{
  size_t v5 = *a4;
  long long v37 = a4[1];
  if (*a4 != v37)
  {
    uint64_t v8 = (uint64_t)(a5 + 3);
    long long v39 = a5 + 5;
    do
    {
      uint64_t v10 = *v5;
      uint64_t v9 = v5[1];
      while (v10 != v9)
      {
        sub_9D4980(a2, v10, (uint64_t)&v41);
        if (v44 == 1)
        {
          BOOL v12 = HIDWORD(v41) == -1 && v41 == -1;
          if (v12 && (void)__p == *((void *)&__p + 1)) {
            goto LABEL_59;
          }
        }
        else if (v44 || v41 == -1)
        {
          goto LABEL_59;
        }
        unint64_t v13 = sub_8FC520(v8, (uint64_t)&v41);
        int8x8_t v14 = (int8x8_t)a5[1];
        if (v14)
        {
          unint64_t v15 = v13;
          uint8x8_t v16 = (uint8x8_t)vcnt_s8(v14);
          v16.i16[0] = vaddlv_u8(v16);
          if (v16.u32[0] > 1uLL)
          {
            unint64_t v17 = v13;
            if (v13 >= *(void *)&v14) {
              unint64_t v17 = v13 % *(void *)&v14;
            }
          }
          else
          {
            unint64_t v17 = (*(void *)&v14 - 1) & v13;
          }
          uint64_t v18 = *(void **)(*a5 + 8 * v17);
          if (v18)
          {
            uint64_t v19 = (void *)*v18;
            if (*v18)
            {
              if (v16.u32[0] < 2uLL)
              {
                uint64_t v20 = *(void *)&v14 - 1;
                while (1)
                {
                  uint64_t v22 = v19[1];
                  if (v22 == v15)
                  {
                    if (sub_4F3B98((uint64_t)(v19 + 2), (uint64_t)&v41)) {
                      goto LABEL_39;
                    }
                  }
                  else if ((v22 & v20) != v17)
                  {
                    goto LABEL_40;
                  }
                  uint64_t v19 = (void *)*v19;
                  if (!v19) {
                    goto LABEL_40;
                  }
                }
              }
              do
              {
                unint64_t v21 = v19[1];
                if (v21 == v15)
                {
                  if (sub_4F3B98((uint64_t)(v19 + 2), (uint64_t)&v41))
                  {
LABEL_39:
                    uint64_t v23 = v19[16];
                    goto LABEL_58;
                  }
                }
                else
                {
                  if (v21 >= *(void *)&v14) {
                    v21 %= *(void *)&v14;
                  }
                  if (v21 != v17) {
                    break;
                  }
                }
                uint64_t v19 = (void *)*v19;
              }
              while (v19);
            }
          }
        }
LABEL_40:
        unint64_t v24 = a5[6];
        uint64_t v40 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v24 - a5[5]) >> 4);
        if (v24 >= a5[7])
        {
          uint64_t v27 = sub_966000(v39, (uint64_t)&v41);
        }
        else
        {
          *(_DWORD *)(v24 + 32) = v44;
          if (v44 == 1)
          {
            uint64_t v28 = v41;
            *(void *)(v24 + 8) = 0;
            *(void *)unint64_t v24 = v28;
            *(void *)(v24 + 16) = 0;
            *(void *)(v24 + 24) = 0;
            uint64_t v29 = (const void *)__p;
            int64_t v30 = *((void *)&__p + 1) - __p;
            if (*((void *)&__p + 1) != (void)__p)
            {
              if (v30 < 0) {
                sub_2E00();
              }
              int v31 = (char *)operator new(*((void *)&__p + 1) - __p);
              *(void *)(v24 + 8) = v31;
              *(void *)(v24 + 16) = v31;
              uint64_t v32 = &v31[8 * (v30 >> 3)];
              *(void *)(v24 + 24) = v32;
              memcpy(v31, v29, v30);
              *(void *)(v24 + 16) = v32;
            }
          }
          else if (!v44)
          {
            *(void *)unint64_t v24 = v41;
            size_t v25 = (unsigned char *)(v24 + 8);
            if (SHIBYTE(v43) < 0)
            {
              sub_4200(v25, (void *)__p, *((unint64_t *)&__p + 1));
            }
            else
            {
              long long v26 = __p;
              *(void *)(v24 + 24) = v43;
              *(_OWORD *)size_t v25 = v26;
            }
          }
          *(void *)(v24 + 40) = v45;
          if (SHIBYTE(v47) < 0)
          {
            sub_4200((unsigned char *)(v24 + 48), (void *)v46, *((unint64_t *)&v46 + 1));
          }
          else
          {
            long long v33 = v46;
            *(void *)(v24 + 64) = v47;
            *(_OWORD *)(v24 + 48) = v33;
          }
          *(unsigned char *)(v24 + 72) = v48;
          unint64_t v34 = (unsigned char *)(v24 + 80);
          if (SHIBYTE(v50) < 0)
          {
            sub_4200(v34, (void *)v49, *((unint64_t *)&v49 + 1));
          }
          else
          {
            long long v35 = v49;
            *(void *)(v24 + 96) = v50;
            *(_OWORD *)unint64_t v34 = v35;
          }
          *(unsigned char *)(v24 + 104) = v51;
          uint64_t v27 = v24 + 112;
          a5[6] = v24 + 112;
        }
        a5[6] = v27;
        sub_966360((uint64_t)a5, (uint64_t)&v41, (uint64_t)&v41, &v40);
        uint64_t v23 = v40;
LABEL_58:
        *(void *)(v10 + 64) = v23;
        *(void *)(v10 + 72) = v23;
LABEL_59:
        if (SHIBYTE(v50) < 0)
        {
          operator delete((void *)v49);
          if ((SHIBYTE(v47) & 0x80000000) == 0)
          {
LABEL_61:
            int v36 = v44;
            if (v44 == 1) {
              goto LABEL_4;
            }
            goto LABEL_65;
          }
        }
        else if ((SHIBYTE(v47) & 0x80000000) == 0)
        {
          goto LABEL_61;
        }
        operator delete((void *)v46);
        int v36 = v44;
        if (v44 == 1)
        {
LABEL_4:
          uint64_t v11 = (void *)__p;
          if (!(void)__p) {
            goto LABEL_7;
          }
          *((void *)&__p + 1) = __p;
          goto LABEL_6;
        }
LABEL_65:
        if (!v36 && SHIBYTE(v43) < 0)
        {
          uint64_t v11 = (void *)__p;
LABEL_6:
          operator delete(v11);
        }
LABEL_7:
        v10 += 104;
      }
      sub_9CE80C(a3, v5);
      v5 += 4;
    }
    while (v5 != v37);
  }
}

void sub_964BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  *(void *)(v9 + 48) = v10;
  sub_4D9814((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_964C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_4D9814((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_964CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_4D9814((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_964CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_4D9814((uint64_t)va);
  _Unwind_Resume(a1);
}

void ****sub_964CD4(void ****a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    BOOL v4 = *a1;
    if (v3 != v2)
    {
      size_t v5 = v3 - 3;
      do
      {
        if (*v5)
        {
          sub_965828((uint64_t)v5, *v5);
          operator delete(*v5);
        }
        BOOL v6 = v5 == v2;
        v5 -= 3;
      }
      while (!v6);
      BOOL v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_964D58(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 40);
  if (*(void *)(a1 + 40))
  {
    sub_4F43F0((uint64_t *)(a1 + 40));
    operator delete(*v2);
  }
  sub_965780(a1, *(void **)(a1 + 16));
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_964DB4(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1)
  {
    sub_4F43F0((uint64_t *)a1);
    operator delete(*(void **)a1);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  BOOL v4 = (void **)(a1 + 24);
  if (*(void *)(a1 + 24))
  {
    sub_4F43F0((uint64_t *)(a1 + 24));
    operator delete(*v4);
    *BOOL v4 = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  sub_4F377C(a1 + 48, a2 + 48);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  size_t v5 = (void **)(a1 + 96);
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*v5);
  }
  long long v6 = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_OWORD *)size_t v5 = v6;
  *(unsigned char *)(a2 + 119) = 0;
  *(unsigned char *)(a2 + 96) = 0;
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  uint64_t v7 = (void **)(a1 + 128);
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*v7);
  }
  long long v8 = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_OWORD *)uint64_t v7 = v8;
  *(unsigned char *)(a2 + 151) = 0;
  *(unsigned char *)(a2 + 128) = 0;
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  sub_4F377C(a1 + 160, a2 + 160);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  uint64_t v9 = (void **)(a1 + 208);
  if (*(char *)(a1 + 231) < 0) {
    operator delete(*v9);
  }
  long long v10 = *(_OWORD *)(a2 + 208);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(_OWORD *)uint64_t v9 = v10;
  *(unsigned char *)(a2 + 231) = 0;
  *(unsigned char *)(a2 + 208) = 0;
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  uint64_t v11 = (void **)(a1 + 240);
  if (*(char *)(a1 + 263) < 0) {
    operator delete(*v11);
  }
  long long v12 = *(_OWORD *)(a2 + 240);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(_OWORD *)uint64_t v11 = v12;
  *(unsigned char *)(a2 + 263) = 0;
  *(unsigned char *)(a2 + 240) = 0;
  *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
  return a1;
}

void sub_964F54(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  BOOL v4 = a4;
  uint64_t v5 = a3;
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  if (*(void *)a2 != v7)
  {
    uint64_t v90 = (void **)(a3 + 1944);
    size_t v87 = a4 + 5;
    while (1)
    {
      int v9 = *(_DWORD *)(v6 + 32);
      if (v9 == 1)
      {
        if (*(_DWORD *)(v6 + 4) == -1 && *(_DWORD *)v6 == -1 && *(void *)(v6 + 8) == *(void *)(v6 + 16)) {
          goto LABEL_5;
        }
      }
      else if (v9 || *(_DWORD *)v6 == -1)
      {
        goto LABEL_5;
      }
      long long v10 = sub_965EC4(v4, v6);
      if (v10)
      {
        uint64_t v11 = v10[16];
        long long v12 = *(char **)(v5 + 1952);
        unint64_t v13 = *(void *)(v5 + 1960);
        if ((unint64_t)v12 >= v13) {
          goto LABEL_20;
        }
      }
      else
      {
        unint64_t v14 = v4[6];
        uint64_t v94 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v14 - v4[5]) >> 4);
        if (v14 >= v4[7])
        {
          uint64_t v15 = sub_966000(v87, v6);
        }
        else
        {
          sub_4F57A0(v14, v6);
          uint64_t v15 = v14 + 112;
          v4[6] = v14 + 112;
        }
        v4[6] = v15;
        sub_966360((uint64_t)v4, v6, v6, &v94);
        uint64_t v11 = v94;
        long long v12 = *(char **)(v5 + 1952);
        unint64_t v13 = *(void *)(v5 + 1960);
        if ((unint64_t)v12 >= v13)
        {
LABEL_20:
          uint64_t v16 = v5;
          unint64_t v17 = v4;
          uint64_t v18 = v7;
          uint64_t v19 = (char *)*v90;
          uint64_t v20 = v12 - (unsigned char *)*v90;
          uint64_t v21 = v20 >> 3;
          unint64_t v22 = (v20 >> 3) + 1;
          if (v22 >> 61) {
LABEL_129:
          }
            sub_2E00();
          uint64_t v23 = v13 - (void)v19;
          if (v23 >> 2 > v22) {
            unint64_t v22 = v23 >> 2;
          }
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
          }
          unint64_t v92 = v22;
          if (v22)
          {
            if (v22 >> 61) {
LABEL_130:
            }
              sub_188D718();
            unint64_t v24 = operator new(8 * v22);
            size_t v25 = (uint64_t *)&v24[8 * v21];
            *size_t v25 = v11;
            uint64_t v8 = (uint64_t)(v25 + 1);
            if (v12 != v19)
            {
LABEL_28:
              unint64_t v26 = v12 - 8 - v19;
              unint64_t v27 = v92;
              if (v26 < 0x58)
              {
                uint64_t v7 = v18;
                uint64_t v28 = v17;
                uint64_t v5 = v16;
                goto LABEL_36;
              }
              unint64_t v29 = v12 - &v24[v20];
              uint64_t v7 = v18;
              uint64_t v28 = v17;
              uint64_t v5 = v16;
              if (v29 < 0x20) {
                goto LABEL_133;
              }
              uint64_t v30 = (v26 >> 3) + 1;
              uint64_t v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v32 = &v12[-v31];
              size_t v25 = (uint64_t *)((char *)v25 - v31);
              long long v33 = &v24[8 * v21 - 16];
              unint64_t v34 = v12 - 16;
              uint64_t v35 = v30 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v36 = *(_OWORD *)v34;
                *(v33 - 1) = *((_OWORD *)v34 - 1);
                *long long v33 = v36;
                v33 -= 2;
                v34 -= 32;
                v35 -= 4;
              }
              while (v35);
              long long v12 = v32;
              if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_133:
                do
                {
LABEL_36:
                  uint64_t v37 = *((void *)v12 - 1);
                  v12 -= 8;
                  *--size_t v25 = v37;
                }
                while (v12 != v19);
              }
LABEL_37:
              *(void *)(v5 + 1944) = v25;
              *(void *)(v5 + 1952) = v8;
              *(void *)(v5 + 1960) = &v24[8 * v27];
              if (v19) {
                operator delete(v19);
              }
              BOOL v4 = v28;
              goto LABEL_4;
            }
          }
          else
          {
            unint64_t v24 = 0;
            size_t v25 = (uint64_t *)(8 * v21);
            *(void *)(8 * v21) = v11;
            uint64_t v8 = 8 * v21 + 8;
            if (v12 != v19) {
              goto LABEL_28;
            }
          }
          uint64_t v7 = v18;
          uint64_t v28 = v17;
          uint64_t v5 = v16;
          unint64_t v27 = v92;
          goto LABEL_37;
        }
      }
      *(void *)long long v12 = v11;
      uint64_t v8 = (uint64_t)(v12 + 8);
LABEL_4:
      *(void *)(v5 + 1952) = v8;
LABEL_5:
      v6 += 112;
      if (v6 == v7) {
        goto LABEL_41;
      }
    }
  }
  if (*(void *)(a2 + 24) == *(void *)(a2 + 32))
  {
    int v72 = *(_DWORD *)(a2 + 80);
    if (v72 == 1)
    {
      BOOL v85 = *(_DWORD *)(a2 + 52) == -1 && *(_DWORD *)(a2 + 48) == -1;
      if (!v85 || *(void *)(a2 + 56) != *(void *)(a2 + 64)) {
        goto LABEL_41;
      }
    }
    else if (!v72 && *(_DWORD *)(a2 + 48) != -1)
    {
      goto LABEL_41;
    }
    int v86 = *(_DWORD *)(a2 + 192);
    if (v86 == 1)
    {
      if (*(_DWORD *)(a2 + 164) == -1 && *(_DWORD *)(a2 + 160) == -1 && *(void *)(a2 + 168) == *(void *)(a2 + 176)) {
        return;
      }
    }
    else if (v86 || *(_DWORD *)(a2 + 160) == -1)
    {
      return;
    }
  }
LABEL_41:
  uint64_t v39 = *(void *)(a2 + 24);
  uint64_t v38 = *(void *)(a2 + 32);
  uint64_t v93 = v4;
  if (v39 != v38)
  {
    uint64_t v91 = (void **)(v5 + 1920);
    unint64_t v88 = v4 + 5;
    do
    {
      int v41 = *(_DWORD *)(v39 + 32);
      if (v41 == 1)
      {
        if (*(_DWORD *)(v39 + 4) == -1 && *(_DWORD *)v39 == -1 && *(void *)(v39 + 8) == *(void *)(v39 + 16)) {
          goto LABEL_45;
        }
      }
      else if (v41 || *(_DWORD *)v39 == -1)
      {
        goto LABEL_45;
      }
      int v42 = sub_965EC4(v4, v39);
      if (v42)
      {
        uint64_t v43 = v42[16];
        int v44 = *(char **)(v5 + 1928);
        unint64_t v45 = *(void *)(v5 + 1936);
        if ((unint64_t)v44 >= v45) {
          goto LABEL_60;
        }
      }
      else
      {
        unint64_t v46 = v4[6];
        uint64_t v94 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v46 - v4[5]) >> 4);
        if (v46 >= v4[7])
        {
          uint64_t v47 = sub_966000(v88, v39);
        }
        else
        {
          sub_4F57A0(v46, v39);
          uint64_t v47 = v46 + 112;
          v4[6] = v46 + 112;
        }
        v4[6] = v47;
        sub_966360((uint64_t)v4, v39, v39, &v94);
        uint64_t v43 = v94;
        int v44 = *(char **)(v5 + 1928);
        unint64_t v45 = *(void *)(v5 + 1936);
        if ((unint64_t)v44 >= v45)
        {
LABEL_60:
          char v48 = (char *)*v91;
          uint64_t v49 = v44 - (unsigned char *)*v91;
          uint64_t v50 = v49 >> 3;
          unint64_t v51 = (v49 >> 3) + 1;
          if (v51 >> 61) {
            goto LABEL_129;
          }
          uint64_t v52 = v45 - (void)v48;
          if (v52 >> 2 > v51) {
            unint64_t v51 = v52 >> 2;
          }
          if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v53 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v53 = v51;
          }
          if (v53)
          {
            if (v53 >> 61) {
              goto LABEL_130;
            }
            __int16 v54 = operator new(8 * v53);
            uint64_t v55 = (uint64_t *)&v54[8 * v50];
            *uint64_t v55 = v43;
            uint64_t v40 = (uint64_t)(v55 + 1);
            if (v44 == v48) {
              goto LABEL_77;
            }
LABEL_71:
            unint64_t v56 = v44 - 8 - v48;
            if (v56 < 0x58) {
              goto LABEL_134;
            }
            if ((unint64_t)(v44 - &v54[v49]) < 0x20) {
              goto LABEL_134;
            }
            uint64_t v57 = (v56 >> 3) + 1;
            uint64_t v58 = 8 * (v57 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v59 = &v44[-v58];
            uint64_t v55 = (uint64_t *)((char *)v55 - v58);
            uint64_t v60 = &v54[8 * v50 - 16];
            uint64_t v61 = v44 - 16;
            uint64_t v62 = v57 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v63 = *(_OWORD *)v61;
              *(v60 - 1) = *((_OWORD *)v61 - 1);
              _OWORD *v60 = v63;
              v60 -= 2;
              v61 -= 32;
              v62 -= 4;
            }
            while (v62);
            int v44 = v59;
            if (v57 != (v57 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_134:
              do
              {
                uint64_t v64 = *((void *)v44 - 1);
                v44 -= 8;
                *--uint64_t v55 = v64;
              }
              while (v44 != v48);
            }
          }
          else
          {
            __int16 v54 = 0;
            uint64_t v55 = (uint64_t *)(8 * v50);
            *(void *)(8 * v50) = v43;
            uint64_t v40 = 8 * v50 + 8;
            if (v44 != v48) {
              goto LABEL_71;
            }
          }
LABEL_77:
          *(void *)(v5 + 1920) = v55;
          *(void *)(v5 + 1928) = v40;
          *(void *)(v5 + 1936) = &v54[8 * v53];
          if (v48) {
            operator delete(v48);
          }
          BOOL v4 = v93;
          goto LABEL_44;
        }
      }
      *(void *)int v44 = v43;
      uint64_t v40 = (uint64_t)(v44 + 8);
LABEL_44:
      *(void *)(v5 + 1928) = v40;
LABEL_45:
      v39 += 112;
    }
    while (v39 != v38);
  }
  unint64_t v65 = (_DWORD *)(a2 + 48);
  int v66 = *(_DWORD *)(a2 + 80);
  if (v66 == 1)
  {
    if (*(_DWORD *)(a2 + 52) == -1 && *(_DWORD *)(a2 + 48) == -1 && *(void *)(a2 + 56) == *(void *)(a2 + 64)) {
      goto LABEL_98;
    }
LABEL_87:
    size_t v67 = sub_965EC4(v4, a2 + 48);
    if (v67)
    {
      uint64_t v68 = v67[16];
    }
    else
    {
      unint64_t v69 = v4[6];
      unint64_t v70 = v4[7];
      uint64_t v94 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v69 - v4[5]) >> 4);
      if (v69 >= v70)
      {
        uint64_t v71 = sub_966000(v4 + 5, (uint64_t)v65);
      }
      else
      {
        sub_4F57A0(v69, (uint64_t)v65);
        uint64_t v71 = v69 + 112;
        v4[6] = v69 + 112;
      }
      v4[6] = v71;
      sub_966360((uint64_t)v4, (uint64_t)v65, (uint64_t)v65, &v94);
      uint64_t v68 = v94;
    }
    *(void *)(v5 + 1968) = v68;
    goto LABEL_98;
  }
  if (!v66 && *v65 != -1) {
    goto LABEL_87;
  }
LABEL_98:
  int v73 = (_DWORD *)(a2 + 160);
  int v74 = *(_DWORD *)(a2 + 192);
  if (v74 != 1)
  {
    if (v74 || *v73 == -1) {
      return;
    }
LABEL_105:
    if (!*(unsigned char *)(v5 + 792)) {
      return;
    }
    uint64_t v75 = sub_965EC4(v4, a2 + 160);
    if (v75)
    {
      uint64_t v76 = v75[16];
      if (*(unsigned char *)(v5 + 792))
      {
LABEL_108:
        *(void *)(v5 + 712) = v76;
        return;
      }
    }
    else
    {
      int v77 = v4;
      uint64_t v79 = v4[5];
      unint64_t v80 = v4[6];
      long long v78 = v77 + 5;
      unint64_t v81 = v78[2];
      uint64_t v94 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v80 - v79) >> 4);
      if (v80 >= v81)
      {
        uint64_t v82 = sub_966000(v78, (uint64_t)v73);
        uint64_t v83 = (uint64_t)v93;
      }
      else
      {
        sub_4F57A0(v80, (uint64_t)v73);
        uint64_t v82 = v80 + 112;
        uint64_t v83 = (uint64_t)v93;
        v93[6] = v80 + 112;
      }
      *(void *)(v83 + 48) = v82;
      sub_966360(v83, (uint64_t)v73, (uint64_t)v73, &v94);
      uint64_t v76 = v94;
      if (*(unsigned char *)(v5 + 792)) {
        goto LABEL_108;
      }
    }
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  if (*(_DWORD *)(a2 + 164) != -1 || *(_DWORD *)(a2 + 160) != -1 || *(void *)(a2 + 168) != *(void *)(a2 + 176)) {
    goto LABEL_105;
  }
}

void sub_96575C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  *(void *)(a13 + 48) = v13;
  _Unwind_Resume(a1);
}

void sub_965768(_Unwind_Exception *a1)
{
  *(void *)(v1 + 48) = v2;
  _Unwind_Resume(a1);
}

void sub_965770(_Unwind_Exception *a1)
{
  *(void *)(v1 + 48) = v2;
  _Unwind_Resume(a1);
}

void sub_965778(_Unwind_Exception *a1)
{
  *(void *)(v1 + 48) = v2;
  _Unwind_Resume(a1);
}

void sub_965780(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      BOOL v4 = v2;
      uint64_t v2 = (void *)*v2;
      if (*((char *)v4 + 119) < 0)
      {
        operator delete((void *)v4[12]);
        if ((*((char *)v4 + 87) & 0x80000000) == 0)
        {
LABEL_7:
          int v5 = *((_DWORD *)v4 + 12);
          if (v5 != 1) {
            goto LABEL_8;
          }
          goto LABEL_13;
        }
      }
      else if ((*((char *)v4 + 87) & 0x80000000) == 0)
      {
        goto LABEL_7;
      }
      operator delete((void *)v4[8]);
      int v5 = *((_DWORD *)v4 + 12);
      if (v5 != 1)
      {
LABEL_8:
        if (v5 || (*((char *)v4 + 47) & 0x80000000) == 0) {
          goto LABEL_4;
        }
        uint64_t v3 = (void *)v4[3];
        goto LABEL_3;
      }
LABEL_13:
      uint64_t v3 = (void *)v4[3];
      if (!v3) {
        goto LABEL_4;
      }
      v4[4] = v3;
LABEL_3:
      operator delete(v3);
LABEL_4:
      operator delete(v4);
    }
    while (v2);
  }
}

void sub_965828(uint64_t a1, void **a2)
{
  BOOL v4 = *(void ***)(a1 + 8);
  if (v4 != a2)
  {
    int v5 = *(void ***)(a1 + 8);
    while (1)
    {
      uint64_t v8 = (char *)*(v5 - 3);
      v5 -= 3;
      uint64_t v7 = v8;
      if (!v8) {
        goto LABEL_5;
      }
      int v9 = (char *)*(v4 - 2);
      uint64_t v6 = v7;
      if (v9 != v7) {
        break;
      }
LABEL_4:
      *(v4 - 2) = v7;
      operator delete(v6);
LABEL_5:
      BOOL v4 = v5;
      if (v5 == a2) {
        goto LABEL_23;
      }
    }
    while (1)
    {
      long long v10 = v9 - 168;
      int v11 = *((_DWORD *)v9 - 2);
      if (v11 == 1)
      {
        sub_4D4B58((uint64_t)(v9 - 168));
      }
      else if (!v11)
      {
        if (*(v9 - 65) < 0)
        {
          operator delete(*((void **)v9 - 11));
          if ((*(v9 - 97) & 0x80000000) == 0) {
            goto LABEL_15;
          }
        }
        else if ((*(v9 - 97) & 0x80000000) == 0)
        {
LABEL_15:
          int v12 = *((_DWORD *)v9 - 34);
          if (v12 == 1) {
            goto LABEL_21;
          }
LABEL_16:
          if (!v12 && *(v9 - 137) < 0) {
            operator delete(*((void **)v9 - 20));
          }
          goto LABEL_10;
        }
        operator delete(*((void **)v9 - 15));
        int v12 = *((_DWORD *)v9 - 34);
        if (v12 == 1)
        {
LABEL_21:
          uint64_t v13 = (void *)*((void *)v9 - 20);
          if (v13)
          {
            *((void *)v9 - 19) = v13;
            operator delete(v13);
          }
          goto LABEL_10;
        }
        goto LABEL_16;
      }
LABEL_10:
      v9 -= 168;
      if (v10 == v7)
      {
        uint64_t v6 = *v5;
        goto LABEL_4;
      }
    }
  }
LABEL_23:
  *(void *)(a1 + 8) = a2;
}

void sub_965944(uint64_t *a1, std::string *__str, std::string *a3, unint64_t a4)
{
  uint64_t v6 = __str;
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2];
  uint64_t v10 = *a1;
  if (0x6DB6DB6DB6DB6DB7 * ((v8 - *a1) >> 4) < a4)
  {
    if (v10)
    {
      sub_4F43F0(a1);
      operator delete((void *)*a1);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x249249249249249) {
      goto LABEL_37;
    }
    unint64_t v11 = 0x6DB6DB6DB6DB6DB7 * (v8 >> 4);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= a4) {
      uint64_t v12 = a4;
    }
    unint64_t v13 = v11 >= 0x124924924924924 ? 0x249249249249249 : v12;
    if (v13 > 0x249249249249249) {
LABEL_37:
    }
      sub_2E00();
    uint64_t v14 = 112 * v13;
    uint64_t v15 = operator new(112 * v13);
    *a1 = (uint64_t)v15;
    a1[1] = (uint64_t)v15;
    a1[2] = (uint64_t)v15 + v14;
    uint64_t v16 = sub_965C10(v9, (uint64_t)v6, (uint64_t)a3, (uint64_t)v15);
LABEL_17:
    a1[1] = v16;
    return;
  }
  uint64_t v17 = a1[1];
  if (0x6DB6DB6DB6DB6DB7 * ((v17 - v10) >> 4) < a4)
  {
    uint64_t v18 = (std::string *)((char *)__str + 16 * ((v17 - v10) >> 4));
    if (v17 != v10)
    {
      do
      {
        sub_4F39B8(v10, v6);
        *(void *)(v10 + 40) = *((void *)&v6[1].__r_.__value_.__l + 2);
        std::string::operator=((std::string *)(v10 + 48), v6 + 2);
        *(unsigned char *)(v10 + 72) = v6[3].__r_.__value_.__s.__data_[0];
        std::string::operator=((std::string *)(v10 + 80), (std::string *)((char *)v6 + 80));
        *(unsigned char *)(v10 + 104) = v6[4].__r_.__value_.__s.__data_[8];
        uint64_t v6 = (std::string *)((char *)v6 + 112);
        v10 += 112;
      }
      while (v6 != v18);
      uint64_t v10 = a1[1];
    }
    uint64_t v16 = sub_965C10(v9, (uint64_t)v18, (uint64_t)a3, v10);
    goto LABEL_17;
  }
  if (__str == a3)
  {
    uint64_t v19 = *a1;
  }
  else
  {
    uint64_t v19 = *a1;
    do
    {
      sub_4F39B8(v10, v6);
      *(void *)(v10 + 40) = *((void *)&v6[1].__r_.__value_.__l + 2);
      std::string::operator=((std::string *)(v10 + 48), v6 + 2);
      *(unsigned char *)(v10 + 72) = v6[3].__r_.__value_.__s.__data_[0];
      std::string::operator=((std::string *)(v10 + 80), (std::string *)((char *)v6 + 80));
      *(unsigned char *)(v10 + 104) = v6[4].__r_.__value_.__s.__data_[8];
      v19 += 112;
      uint64_t v6 = (std::string *)((char *)v6 + 112);
      v10 += 112;
    }
    while (v6 != a3);
    uint64_t v17 = a1[1];
  }
  while (v17 != v19)
  {
    if (*(char *)(v17 - 9) < 0)
    {
      operator delete(*(void **)(v17 - 32));
      if ((*(char *)(v17 - 41) & 0x80000000) == 0)
      {
LABEL_28:
        int v20 = *(_DWORD *)(v17 - 80);
        if (v20 != 1) {
          goto LABEL_29;
        }
        goto LABEL_34;
      }
    }
    else if ((*(char *)(v17 - 41) & 0x80000000) == 0)
    {
      goto LABEL_28;
    }
    operator delete(*(void **)(v17 - 64));
    int v20 = *(_DWORD *)(v17 - 80);
    if (v20 != 1)
    {
LABEL_29:
      if (!v20 && *(char *)(v17 - 81) < 0)
      {
        uint64_t v21 = *(void **)(v17 - 104);
LABEL_23:
        operator delete(v21);
        goto LABEL_24;
      }
      goto LABEL_24;
    }
LABEL_34:
    uint64_t v21 = *(void **)(v17 - 104);
    if (v21)
    {
      *(void *)(v17 - 96) = v21;
      goto LABEL_23;
    }
LABEL_24:
    v17 -= 112;
  }
  a1[1] = v19;
}

void sub_965C00(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_965C08(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_965C10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      sub_4F57A0(a4 + v7, a2 + v7);
      v7 += 112;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_965C70(_Unwind_Exception *exception_object)
{
  if (v2) {
    sub_20AC95C(v1 + v2, v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_965C8C(char **a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v2 - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  uint64_t v6 = a1[2];
  if (0x5555555555555556 * ((v6 - v3) >> 3) > v5) {
    unint64_t v5 = 0x5555555555555556 * ((v6 - v3) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v3) >> 3) >= 0x555555555555555) {
    unint64_t v7 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v7 = v5;
  }
  uint64_t v19 = a1 + 2;
  if (v7)
  {
    if (v7 > 0xAAAAAAAAAAAAAAALL) {
      sub_188D718();
    }
    uint64_t v8 = (char *)operator new(24 * v7);
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = &v8[24 * v4];
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = 0;
  uint64_t v10 = &v8[24 * v7];
  *(void *)uint64_t v9 = 0;
  unint64_t v11 = v9 + 24;
  v17.i64[1] = (uint64_t)(v9 + 24);
  uint64_t v18 = v10;
  if (v2 == v3)
  {
    int64x2_t v14 = vdupq_n_s64((unint64_t)v2);
  }
  else
  {
    do
    {
      uint64_t v12 = v9;
      *((void *)v9 - 2) = 0;
      *((void *)v9 - 1) = 0;
      long long v13 = *(_OWORD *)(v2 - 24);
      v2 -= 24;
      *(_OWORD *)(v9 - 24) = v13;
      v9 -= 24;
      *((void *)v12 - 1) = *((void *)v2 + 2);
      *(void *)uint64_t v2 = 0;
      *((void *)v2 + 1) = 0;
      *((void *)v2 + 2) = 0;
    }
    while (v2 != v3);
    int64x2_t v14 = *(int64x2_t *)a1;
    uint64_t v6 = a1[2];
    unint64_t v11 = (char *)v17.i64[1];
    uint64_t v10 = v18;
  }
  *a1 = v9;
  a1[1] = v11;
  int64x2_t v17 = v14;
  a1[2] = v10;
  uint64_t v18 = v6;
  uint64_t v16 = v14.i64[0];
  sub_965DD0((uint64_t)&v16);
  return v11;
}

uint64_t sub_965DD0(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  if (v3 != v2)
  {
    unint64_t v4 = *(void ***)(a1 + 16);
    do
    {
      unint64_t v7 = (void **)*(v4 - 3);
      v4 -= 3;
      uint64_t v6 = v7;
      *(void *)(a1 + 16) = v4;
      if (v7)
      {
        uint64_t v8 = (void **)*(v3 - 2);
        unint64_t v5 = v6;
        if (v8 != v6)
        {
          uint64_t v9 = (void **)*(v3 - 2);
          do
          {
            uint64_t v12 = *(v9 - 3);
            v9 -= 3;
            unint64_t v11 = v12;
            if (v12)
            {
              uint64_t v13 = (uint64_t)*(v8 - 2);
              uint64_t v10 = v11;
              if ((void *)v13 != v11)
              {
                do
                {
                  uint64_t v14 = v13 - 168;
                  if (*(_DWORD *)(v13 - 8) == 1) {
                    uint64_t v14 = sub_4D4B58(v14);
                  }
                  uint64_t v13 = v14;
                }
                while ((void *)v14 != v11);
                uint64_t v10 = *v9;
              }
              *(v8 - 2) = v11;
              operator delete(v10);
            }
            uint64_t v8 = v9;
          }
          while (v9 != v6);
          unint64_t v5 = *v4;
        }
        *(v3 - 2) = v6;
        operator delete(v5);
        unint64_t v4 = *(void ***)(a1 + 16);
      }
      uint64_t v3 = v4;
    }
    while (v4 != v2);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_965EC4(void *a1, uint64_t a2)
{
  unint64_t v4 = sub_8FC520((uint64_t)(a1 + 3), a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v8 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v8 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v8 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t v10 = *(void **)(*a1 + 8 * v8);
  if (!v10) {
    return 0;
  }
  uint64_t v9 = (void *)*v10;
  if (*v10)
  {
    if (v7.u32[0] < 2uLL)
    {
      uint64_t v11 = *(void *)&v5 - 1;
      while (1)
      {
        uint64_t v13 = v9[1];
        if (v13 == v6)
        {
          if (sub_4F3B98((uint64_t)(v9 + 2), a2)) {
            return v9;
          }
        }
        else if ((v13 & v11) != v8)
        {
          return 0;
        }
        uint64_t v9 = (void *)*v9;
        if (!v9) {
          return v9;
        }
      }
    }
    do
    {
      unint64_t v12 = v9[1];
      if (v12 == v6)
      {
        if (sub_4F3B98((uint64_t)(v9 + 2), a2)) {
          return v9;
        }
      }
      else
      {
        if (v12 >= *(void *)&v5) {
          v12 %= *(void *)&v5;
        }
        if (v12 != v8) {
          return 0;
        }
      }
      uint64_t v9 = (void *)*v9;
    }
    while (v9);
  }
  return v9;
}

uint64_t sub_966000(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x249249249249249) {
    sub_2E00();
  }
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 4);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 4)) >= 0x124924924924924) {
    unint64_t v6 = 0x249249249249249;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x249249249249249) {
      sub_188D718();
    }
    uint8x8_t v7 = (char *)operator new(112 * v6);
  }
  else
  {
    uint8x8_t v7 = 0;
  }
  uint64_t v21 = (uint64_t)&v7[112 * v3];
  unint64_t v22 = &v7[112 * v6];
  sub_4F57A0(v21, a2);
  uint64_t v8 = v21 + 112;
  uint64_t v10 = (void **)*a1;
  uint64_t v9 = (void **)a1[1];
  if (v9 == (void **)*a1)
  {
    *a1 = v21;
    a1[1] = v8;
    a1[2] = (uint64_t)v22;
    goto LABEL_30;
  }
  uint64_t v11 = 0;
  do
  {
    uint64_t v12 = v21 + v11 * 8;
    uint64_t v13 = &v9[v11];
    *(_DWORD *)(v21 + v11 * 8 - 80) = v9[v11 - 10];
    sub_4F38B0((void *)LODWORD(v9[v11 - 10]), (uint64_t *)&v9[v11 - 14], (void *)(v21 + v11 * 8 - 112));
    *(void *)(v12 - 72) = v9[v11 - 9];
    long long v14 = *(_OWORD *)&v9[v11 - 8];
    *(void *)(v12 - 48) = v9[v11 - 6];
    *(_OWORD *)(v12 - 64) = v14;
    *(v13 - 7) = 0;
    *(v13 - 6) = 0;
    *(v13 - 8) = 0;
    *(unsigned char *)(v12 - 40) = v9[v11 - 5];
    long long v15 = *(_OWORD *)&v9[v11 - 4];
    *(void *)(v12 - 16) = v9[v11 - 2];
    *(_OWORD *)(v12 - 32) = v15;
    *(v13 - 3) = 0;
    *(v13 - 2) = 0;
    *(v13 - 4) = 0;
    *(unsigned char *)(v12 - 8) = v9[v11 - 1];
    v11 -= 14;
  }
  while (&v9[v11] != v10);
  uint64_t v16 = (void **)*a1;
  uint64_t v9 = (void **)a1[1];
  uint64_t v17 = v21 + v11 * 8;
  uint64_t v8 = v21 + 112;
  *a1 = v17;
  a1[1] = v21 + 112;
  a1[2] = (uint64_t)v22;
  if (v9 != v16)
  {
    while (1)
    {
      if (*((char *)v9 - 9) < 0)
      {
        operator delete(*(v9 - 4));
        if ((*((char *)v9 - 41) & 0x80000000) == 0)
        {
LABEL_21:
          int v18 = *((_DWORD *)v9 - 20);
          if (v18 != 1) {
            goto LABEL_22;
          }
          goto LABEL_27;
        }
      }
      else if ((*((char *)v9 - 41) & 0x80000000) == 0)
      {
        goto LABEL_21;
      }
      operator delete(*(v9 - 8));
      int v18 = *((_DWORD *)v9 - 20);
      if (v18 != 1)
      {
LABEL_22:
        if (v18 || (*((char *)v9 - 81) & 0x80000000) == 0) {
          goto LABEL_18;
        }
        uint64_t v19 = *(v9 - 13);
        goto LABEL_17;
      }
LABEL_27:
      uint64_t v19 = *(v9 - 13);
      if (!v19) {
        goto LABEL_18;
      }
      *(v9 - 12) = v19;
LABEL_17:
      operator delete(v19);
LABEL_18:
      v9 -= 14;
      if (v9 == v16)
      {
        uint64_t v9 = v16;
        break;
      }
    }
  }
LABEL_30:
  if (v9) {
    operator delete(v9);
  }
  return v8;
}

void sub_966260(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_966278((void **)va);
  _Unwind_Resume(a1);
}

void **sub_966278(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_9662AC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v1; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 112;
    if (*(char *)(i - 9) < 0)
    {
      operator delete(*(void **)(i - 32));
      if ((*(char *)(i - 41) & 0x80000000) == 0)
      {
LABEL_7:
        int v5 = *(_DWORD *)(i - 80);
        if (v5 != 1) {
          goto LABEL_8;
        }
        goto LABEL_13;
      }
    }
    else if ((*(char *)(i - 41) & 0x80000000) == 0)
    {
      goto LABEL_7;
    }
    operator delete(*(void **)(i - 64));
    int v5 = *(_DWORD *)(i - 80);
    if (v5 != 1)
    {
LABEL_8:
      if (v5 || (*(char *)(i - 81) & 0x80000000) == 0) {
        continue;
      }
      unint64_t v4 = *(void **)(i - 104);
      goto LABEL_3;
    }
LABEL_13:
    unint64_t v4 = *(void **)(i - 104);
    if (!v4) {
      continue;
    }
    *(void *)(i - 96) = v4;
LABEL_3:
    operator delete(v4);
  }
}

void *sub_966360(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v9 = (void *)(a1 + 24);
  unint64_t v10 = sub_8FC520(a1 + 24, a2);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    long long v14 = *(void **)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      long long v15 = (void *)*v14;
      if (*v14)
      {
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v17 = v15[1];
            if (v17 == v11)
            {
              if (sub_4F3B98((uint64_t)(v15 + 2), a2)) {
                return v15;
              }
            }
            else if ((v17 & (v12 - 1)) != v4)
            {
              goto LABEL_23;
            }
            long long v15 = (void *)*v15;
            if (!v15) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v16 = v15[1];
          if (v16 == v11)
          {
            if (sub_4F3B98((uint64_t)(v15 + 2), a2)) {
              return v15;
            }
          }
          else
          {
            if (v16 >= v12) {
              v16 %= v12;
            }
            if (v16 != v4) {
              break;
            }
          }
          long long v15 = (void *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_23:
  long long v33 = operator new(0x88uLL);
  *long long v33 = 0;
  v33[1] = v11;
  sub_4F57A0((uint64_t)(v33 + 2), a3);
  v33[16] = *a4;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    BOOL v22 = 1;
    if (v12 >= 3) {
      BOOL v22 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v12);
    unint64_t v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24) {
      size_t prime = v24;
    }
    else {
      size_t prime = v23;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v26 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v26) {
      goto LABEL_37;
    }
    if (prime < *(void *)&v26)
    {
      unint64_t v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v26 < 3uLL || (uint8x8_t v28 = (uint8x8_t)vcnt_s8(v26), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (prime <= v27) {
        size_t prime = v27;
      }
      if (prime < *(void *)&v26) {
LABEL_37:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v30 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        int v20 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        uint64_t v21 = v33;
        if (v20) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v4 = v11;
        int v20 = *(void **)(*(void *)a1 + 8 * v11);
        uint64_t v21 = v33;
        if (v20) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v4 = v30 & v11;
      int v20 = *(void **)(*(void *)a1 + 8 * (v30 & v11));
      uint64_t v21 = v33;
      if (v20) {
        goto LABEL_26;
      }
    }
LABEL_50:
    *uint64_t v21 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v33;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*v33)
    {
      unint64_t v31 = *(void *)(*v33 + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v31 >= v12) {
          v31 %= v12;
        }
      }
      else
      {
        v31 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v31) = v33;
    }
    goto LABEL_61;
  }
  int v20 = *(void **)(*(void *)a1 + 8 * v4);
  uint64_t v21 = v33;
  if (!v20) {
    goto LABEL_50;
  }
LABEL_26:
  *uint64_t v21 = *v20;
  *int v20 = v33;
LABEL_61:
  long long v15 = v33;
  ++*v9;
  return v15;
}

void sub_9666D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10)
{
  if (a10) {
    sub_96670C(v10, a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_96670C(uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 119) < 0)
    {
      operator delete(__p[12]);
      if ((*((char *)__p + 87) & 0x80000000) == 0)
      {
LABEL_4:
        int v3 = *((_DWORD *)__p + 12);
        if (v3 != 1)
        {
LABEL_5:
          if (!v3 && *((char *)__p + 47) < 0)
          {
            operator delete(__p[3]);
            unint64_t v4 = __p;
            goto LABEL_9;
          }
LABEL_7:
          unint64_t v4 = __p;
LABEL_9:
          operator delete(v4);
          return;
        }
LABEL_14:
        int v5 = __p[3];
        if (v5)
        {
          __p[4] = v5;
          operator delete(v5);
          unint64_t v4 = __p;
          goto LABEL_9;
        }
        goto LABEL_7;
      }
    }
    else if ((*((char *)__p + 87) & 0x80000000) == 0)
    {
      goto LABEL_4;
    }
    operator delete(__p[8]);
    int v3 = *((_DWORD *)__p + 12);
    if (v3 != 1) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
  if (__p) {
    goto LABEL_7;
  }
}

uint64_t sub_9667FC(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xCF3CF3CF3CF3CF3DLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x186186186186186) {
    sub_2E00();
  }
  if (0x9E79E79E79E79E7ALL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x9E79E79E79E79E7ALL * ((a1[2] - *a1) >> 3);
  }
  if (0xCF3CF3CF3CF3CF3DLL * ((a1[2] - *a1) >> 3) >= 0xC30C30C30C30C3) {
    unint64_t v6 = 0x186186186186186;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x186186186186186) {
      sub_188D718();
    }
    uint8x8_t v7 = (char *)operator new(168 * v6);
  }
  else
  {
    uint8x8_t v7 = 0;
  }
  uint64_t v8 = (uint64_t)&v7[168 * v3];
  *(_DWORD *)(v8 + 160) = -1;
  sub_4F58AC(v8, a2);
  uint64_t v9 = &v7[168 * v6];
  *(_DWORD *)(v8 + 160) = 1;
  uint64_t v10 = v8 + 168;
  unint64_t v12 = (_DWORD *)*a1;
  unint64_t v11 = (_DWORD *)a1[1];
  if (v11 == (_DWORD *)*a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = (uint64_t)v9;
    if (!v11) {
      return v8 + 168;
    }
    goto LABEL_25;
  }
  uint64_t v13 = 0;
  do
  {
    long long v14 = (void *)(v8 + v13 * 4 - 168);
    long long v15 = &v11[v13 - 42];
    *(_DWORD *)(v8 + v13 * 4 - 8) = v11[v13 - 2];
    int v16 = v11[v13 - 2];
    if (v16 == 1)
    {
      sub_4F58AC((uint64_t)v14, (uint64_t)v15);
    }
    else if (!v16)
    {
      void *v14 = *v15;
    }
    v13 -= 42;
  }
  while (&v11[v13] != v12);
  uint64_t v17 = (_DWORD *)*a1;
  unint64_t v11 = (_DWORD *)a1[1];
  *a1 = v8 + v13 * 4;
  a1[1] = v10;
  a1[2] = (uint64_t)v9;
  if (v11 != v17)
  {
    do
    {
      uint64_t v18 = (uint64_t)(v11 - 42);
      if (*(v11 - 2) == 1) {
        uint64_t v18 = sub_4D4B58(v18);
      }
      unint64_t v11 = (_DWORD *)v18;
    }
    while ((_DWORD *)v18 != v17);
    unint64_t v11 = v17;
  }
  if (v11) {
LABEL_25:
  }
    operator delete(v11);
  return v8 + 168;
}

double sub_9669D0()
{
  byte_25DAA7F = 1;
  word_25DAA68 = 65;
  byte_25DAA97 = 1;
  word_25DAA80 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25DAB28 = 0u;
  *(_OWORD *)&qword_25DAB38 = 0u;
  dword_25DAB48 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25DAB28, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25DAB28, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25DAB28, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25DAB28, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25DAAAF = 8;
  strcpy((char *)&qword_25DAA98, "any_mode");
  byte_25DAAC7 = 7;
  strcpy((char *)&dword_25DAAB0, "cycling");
  byte_25DAADF = 7;
  strcpy((char *)&dword_25DAAC8, "driving");
  byte_25DAAF7 = 7;
  strcpy((char *)&dword_25DAAE0, "walking");
  qword_25DAB00 = 0;
  qword_25DAB08 = 0;
  qword_25DAAF8 = 0;
  v0 = operator new(9uLL);
  *(void *)v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25DAAF8 = (uint64_t)v0;
  qword_25DAB00 = (uint64_t)(v0 + 9);
  qword_25DAB08 = (uint64_t)(v0 + 9);
  qword_25DAB10 = 0;
  qword_25DAB18 = 0;
  unk_25DAB20 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25DAB18 = (uint64_t)(v1 + 9);
  unk_25DAB20 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25DAB10 = (uint64_t)v1;
  return result;
}

void sub_966C98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25DAB38) {
    sub_20AC9DC((void **)qword_25DAB38);
  }
  uint64_t v37 = (void *)xmmword_25DAB28;
  *(void *)&xmmword_25DAB28 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_966D38(uint64_t a1@<X1>, char a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X8>, uint8x8_t a5@<D0>)
{
  *(_DWORD *)&v16[3] = -1;
  *(_DWORD *)int v16 = -1;
  *(void *)&v16[7] = 0;
  uint64_t v17 = 0;
  *(void *)&v16[15] = 0;
  char v18 = 0;
  uint64_t v8 = *(unsigned __int8 *)(a1 + 31);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a1 + 16);
  }
  if (v8)
  {
    __str.__r_.__value_.__r.__words[0] = sub_1133328();
    if (sub_1132FF4(a1 + 40, (uint64_t)&__str))
    {
      sub_9973DC(a1 + 8, a3, (uint64_t)&__str);
      std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = __str.__r_.__value_.__l.__size_;
      }
      if (size)
      {
        uint64_t v11 = v15;
        if ((v15 & 0x80u) != 0) {
          uint64_t v11 = v14;
        }
        if (v11) {
          std::string::operator=((std::string *)&v16[8], &__str);
        }
      }
      if ((char)v15 < 0)
      {
        operator delete(v13);
        if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_14;
        }
      }
      else if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_14;
      }
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
LABEL_14:
  *(_DWORD *)int v16 = *(_DWORD *)a1;
  a5.i32[0] = *(_DWORD *)(a1 + 4);
  if (vmovn_s16((int16x8_t)vmovl_u8(a5)).u32[0] != 0xFFFFFF) {
    *(_DWORD *)&v16[4] = *(_DWORD *)(a1 + 4);
  }
  sub_524ADC(a4, (uint64_t)v16, a2);
  if (v18 < 0) {
    operator delete(*(void **)&v16[8]);
  }
}

void sub_966EB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

double sub_966EE4@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v12 = a2;
  sub_967048(a1, &v12, (uint64_t)v13);
  if (v18)
  {
    char v11 = 0;
    nullsub_1(&v11);
    sub_966D38((uint64_t)v13, 2, a3, a4, v6);
    if (v18)
    {
      uint64_t v8 = (void **)__p;
      if (__p)
      {
        uint64_t v9 = v17;
        char v10 = __p;
        if (v17 != __p)
        {
          do
          {
            if (*((char *)v9 - 1) < 0) {
              operator delete(*(v9 - 3));
            }
            v9 -= 4;
          }
          while (v9 != v8);
          char v10 = __p;
        }
        uint64_t v17 = v8;
        operator delete(v10);
      }
      if (v15 < 0) {
        operator delete(v14);
      }
    }
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 80) = 0u;
    *(_OWORD *)(a4 + 96) = 0u;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_DWORD *)(a4 + 32) = -1;
    *(_DWORD *)(a4 + 40) = -1;
    *(_DWORD *)(a4 + 43) = -1;
    *(void *)(a4 + 47) = 0;
    *(void *)(a4 + 55) = 0;
    *(void *)(a4 + 63) = 0;
    *(_WORD *)(a4 + 71) = 0;
    *(void *)(a4 + 80) = 0;
    *(void *)(a4 + 88) = 0;
    *(void *)(a4 + 96) = 0;
    *(unsigned char *)(a4 + 104) = 0;
  }
  return result;
}

void sub_967034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_9671BC((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_967048@<Q0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  char v4 = (int *)sub_8DFD1C(a1, *a2, 0, "line");
  uint8x8_t v6 = (unsigned __int16 *)((char *)v4 - *v4);
  if (*v6 < 0x17u || (uint64_t v7 = v6[11]) == 0)
  {
    result.n128_u64[0] = 0;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
    return result;
  }
  uint64_t v8 = (int *)((char *)v4 + v7 + *(unsigned int *)((char *)v4 + v7));
  uint64_t v9 = (unsigned __int16 *)((char *)v8 - *v8);
  unsigned int v10 = *v9;
  if (v10 <= 6)
  {
    unsigned int v11 = 0;
    uint64_t v12 = 0xFFFFFFLL;
    if (v10 < 5) {
      goto LABEL_15;
    }
    uint64_t v13 = v9[2];
    if (!v13) {
      goto LABEL_15;
    }
    goto LABEL_12;
  }
  if (v9[3])
  {
    unsigned int v11 = *(int *)((char *)v8 + v9[3]);
    if (v10 >= 9) {
      goto LABEL_6;
    }
  }
  else
  {
    unsigned int v11 = 0;
    if (v10 >= 9)
    {
LABEL_6:
      if (v9[4])
      {
        uint64_t v12 = *(unsigned int *)((char *)v8 + v9[4]);
        uint64_t v13 = v9[2];
        if (!v13) {
          goto LABEL_15;
        }
      }
      else
      {
        uint64_t v12 = 0xFFFFFFLL;
        uint64_t v13 = v9[2];
        if (!v13) {
          goto LABEL_15;
        }
      }
      goto LABEL_12;
    }
  }
  uint64_t v12 = 0xFFFFFFLL;
  uint64_t v13 = v9[2];
  if (!v13)
  {
LABEL_15:
    uint64_t v14 = 0;
    goto LABEL_16;
  }
LABEL_12:
  uint64_t v14 = (int *)((char *)v8 + v13 + *(unsigned int *)((char *)v8 + v13));
LABEL_16:
  sub_4A0694(v14, (uint64_t)&v18);
  uint64_t v15 = *(void *)v19;
  *(void *)(a3 + 8) = v18;
  *(void *)(a3 + 16) = v15;
  *(void *)(a3 + 23) = *(void *)&v19[7];
  LOBYTE(v15) = v20;
  __n128 result = v21;
  uint64_t v16 = v23;
  long long v17 = v22;
  *(unsigned char *)(a3 + 72) = 1;
  *(void *)a3 = v11 | (unint64_t)(v12 << 32);
  *(unsigned char *)(a3 + 31) = v15;
  *(__n128 *)(a3 + 32) = result;
  *(_OWORD *)(a3 + 48) = v17;
  *(void *)(a3 + 64) = v16;
  return result;
}

uint64_t sub_9671BC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v2 = *(void *)(a1 + 48);
    if (v2)
    {
      uint64_t v3 = *(void *)(a1 + 56);
      char v4 = *(void **)(a1 + 48);
      if (v3 != v2)
      {
        do
        {
          if (*(char *)(v3 - 1) < 0) {
            operator delete(*(void **)(v3 - 24));
          }
          v3 -= 32;
        }
        while (v3 != v2);
        char v4 = *(void **)(a1 + 48);
      }
      *(void *)(a1 + 56) = v2;
      operator delete(v4);
    }
    if (*(char *)(a1 + 31) < 0) {
      operator delete(*(void **)(a1 + 8));
    }
    *(unsigned char *)(a1 + 72) = 0;
  }
  return a1;
}

void sub_96724C(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint8x8_t v6 = (int *)sub_8EF9B8(a1, a2, 0, "system");
  uint64_t v7 = (unsigned __int16 *)((char *)v6 - *v6);
  if (*v7 < 0x11u || (v8 = v7[8]) == 0 || (unsigned int v9 = *(int *)((char *)v6 + v8), v9 == -1))
  {
    unsigned int v9 = 0;
    char v10 = 1;
  }
  else
  {
    char v10 = 0;
  }
  unsigned int v11 = (int *)sub_8EF9B8(a1, a2, 0, "system");
  uint64_t v12 = (unsigned __int16 *)((char *)v11 - *v11);
  unsigned int v13 = *v12;
  if (v13 < 0xF)
  {
    if (v13 < 0xD) {
      goto LABEL_19;
    }
  }
  else if (v12[7])
  {
    __int16 v14 = *(_WORD *)((char *)v11 + v12[7]);
    uint64_t v15 = v12[6];
    if (!v15) {
      goto LABEL_9;
    }
LABEL_16:
    unsigned __int16 v16 = *(_WORD *)((char *)v11 + v15);
    if (v14 != 0x7FFF) {
      unsigned __int16 v16 = v14;
    }
    if (v16 != 0x7FFF) {
      goto LABEL_22;
    }
    goto LABEL_19;
  }
  __int16 v14 = 0x7FFF;
  uint64_t v15 = v12[6];
  if (v15) {
    goto LABEL_16;
  }
LABEL_9:
  if (v14 == 0x7FFF) {
    unsigned __int16 v16 = 0x7FFF;
  }
  else {
    unsigned __int16 v16 = v14;
  }
  if (v16 != 0x7FFF)
  {
LABEL_22:
    LODWORD(v17) = -1;
    float v19 = 0;
    uint64_t v20 = 0;
    long long __p = 0;
    if ((v10 & 1) == 0) {
      LODWORD(v17) = v9;
    }
    HIDWORD(v17) = v16;
    goto LABEL_26;
  }
LABEL_19:
  if (v10)
  {
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_DWORD *)(a3 + 32) = -1;
    *(_DWORD *)(a3 + 40) = -1;
    *(_DWORD *)(a3 + 43) = -1;
    *(void *)(a3 + 47) = 0;
    *(void *)(a3 + 55) = 0;
    *(void *)(a3 + 63) = 0;
    *(_WORD *)(a3 + 71) = 0;
    *(void *)(a3 + 80) = 0;
    *(void *)(a3 + 88) = 0;
    *(void *)(a3 + 96) = 0;
    *(unsigned char *)(a3 + 104) = 0;
    return;
  }
  float v19 = 0;
  uint64_t v20 = 0;
  long long __p = 0;
  unint64_t v17 = v9 | 0xFFFFFFFF00000000;
LABEL_26:
  sub_525328(a3, (uint64_t *)&v17, 3);
  if (__p)
  {
    float v19 = __p;
    operator delete(__p);
  }
}

void sub_96740C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_967428(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, int **a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v27 = a3;
  uint64_t v8 = *a6;
  unsigned int v9 = a6[1];
  if (*a6 == v9)
  {
LABEL_39:
    *(_OWORD *)(a7 + 32) = 0u;
    *(_OWORD *)(a7 + 48) = 0u;
    *(_OWORD *)(a7 + 64) = 0u;
    *(_OWORD *)(a7 + 80) = 0u;
    *(_OWORD *)(a7 + 96) = 0u;
    *(_OWORD *)a7 = 0u;
    *(_OWORD *)(a7 + 16) = 0u;
    *(_DWORD *)(a7 + 32) = -1;
    *(_DWORD *)(a7 + 40) = -1;
    *(_DWORD *)(a7 + 43) = -1;
    *(void *)(a7 + 47) = 0;
    *(void *)(a7 + 55) = 0;
    *(void *)(a7 + 63) = 0;
    *(_WORD *)(a7 + 71) = 0;
    *(void *)(a7 + 80) = 0;
    *(void *)(a7 + 88) = 0;
    *(void *)(a7 + 96) = 0;
    *(unsigned char *)(a7 + 104) = 0;
  }
  else
  {
    BOOL v11 = a4 > 0xFFFFFFFEFFFFFFFFLL || a4 == 0;
    BOOL v23 = v11;
    while (1)
    {
      int v12 = *v8;
      char v38 = 0;
      char v26 = 0;
      switch(v12)
      {
        case 0:
          if (v23)
          {
            BYTE8(v31) = 0;
          }
          else
          {
            sub_967F1C(a1, a4, v27, (uint64_t)&v39);
            BYTE8(v31) = v45;
            if (v45)
            {
              v28[0] = v39;
              *(_OWORD *)&v28[1] = v40;
              v28[3] = v41;
              long long v29 = v42;
              *(_OWORD *)long long __p = v43;
              *(void *)&long long v31 = v44;
            }
          }
          char v13 = 7;
          goto LABEL_25;
        case 1:
          sub_96812C(a2, (unint64_t *)&v27, (uint64_t)&v39);
          goto LABEL_19;
        case 2:
          sub_967048(a2, (unint64_t *)&v27, (uint64_t)&v39);
          BYTE8(v31) = v45;
          if (v45)
          {
            v28[0] = v39;
            *(_OWORD *)&v28[1] = v40;
            v28[3] = v41;
            long long v29 = v42;
            *(_OWORD *)long long __p = v43;
            *(void *)&long long v31 = v44;
          }
          char v13 = 2;
          goto LABEL_25;
        case 3:
          sub_9682A0(a2, (unint64_t *)&v27, (uint64_t)&v39);
          goto LABEL_19;
        case 4:
          sub_968414(a2, (unint64_t *)&v27, (uint64_t)&v39);
LABEL_19:
          BYTE8(v31) = v45;
          if (v45)
          {
            v28[0] = v39;
            *(_OWORD *)&v28[1] = v40;
            v28[3] = v41;
            long long v29 = v42;
            *(_OWORD *)long long __p = v43;
            *(void *)&long long v31 = v44;
          }
          char v13 = 1;
LABEL_25:
          char v32 = v13;
          break;
        default:
          char v32 = 0;
          *(_OWORD *)long long __p = 0u;
          long long v31 = 0u;
          long long v29 = 0u;
          memset(v28, 0, sizeof(v28));
          break;
      }
      uint64_t v39 = v33;
      *(void *)&long long v40 = &v26;
      sub_9677F8((uint64_t *)&v39, (uint64_t)v28);
      if (BYTE8(v31))
      {
        __int16 v14 = (void **)__p[0];
        if (__p[0])
        {
          uint64_t v15 = (void **)__p[1];
          unsigned __int16 v16 = __p[0];
          if (__p[1] != __p[0])
          {
            do
            {
              if (*((char *)v15 - 1) < 0) {
                operator delete(*(v15 - 3));
              }
              v15 -= 4;
            }
            while (v15 != v14);
            unsigned __int16 v16 = __p[0];
          }
          __p[1] = v14;
          operator delete(v16);
        }
        if (SHIBYTE(v28[3]) < 0) {
          operator delete(v28[1]);
        }
      }
      if (v38) {
        break;
      }
      if (++v8 == v9) {
        goto LABEL_39;
      }
    }
    LOBYTE(v28[0]) = 0;
    nullsub_1(v28);
    sub_966D38((uint64_t)v33, v26, a5, a7, v17);
    if (v38)
    {
      uint64_t v18 = v36;
      if (v36)
      {
        float v19 = v37;
        uint64_t v20 = v36;
        if (v37 != v36)
        {
          do
          {
            if (*((char *)v19 - 1) < 0) {
              operator delete(*(v19 - 3));
            }
            v19 -= 4;
          }
          while (v19 != v18);
          uint64_t v20 = v36;
        }
        uint64_t v37 = v18;
        operator delete(v20);
      }
      if (v35 < 0) {
        operator delete(v34);
      }
    }
  }
}

void sub_9677BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

void sub_9677D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

uint64_t *sub_9677F8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  int v5 = *(unsigned __int8 *)(*a1 + 72);
  if (*(unsigned char *)(a2 + 72))
  {
    uint8x8_t v6 = (long long *)(a2 + 8);
    *(void *)uint64_t v4 = *(void *)a2;
    uint64_t v7 = (void **)(v4 + 8);
    if (v5)
    {
      if (*(char *)(v4 + 31) < 0) {
        operator delete(*v7);
      }
      long long v13 = *v6;
      *(void *)(v4 + 24) = *(void *)(a2 + 24);
      *(_OWORD *)uint64_t v7 = v13;
      *(unsigned char *)(a2 + 31) = 0;
      *(unsigned char *)(a2 + 8) = 0;
      __int16 v14 = (void **)(v4 + 48);
      uint64_t v15 = *(void ***)(v4 + 48);
      *(_OWORD *)(v4 + 32) = *(_OWORD *)(a2 + 32);
      if (v15)
      {
        unsigned __int16 v16 = *(void ***)(v4 + 56);
        uint8x8_t v17 = v15;
        if (v16 != v15)
        {
          do
          {
            if (*((char *)v16 - 1) < 0) {
              operator delete(*(v16 - 3));
            }
            v16 -= 4;
          }
          while (v16 != v15);
          uint8x8_t v17 = *v14;
        }
        *(void *)(v4 + 56) = v15;
        operator delete(v17);
        int *v14 = 0;
        *(void *)(v4 + 56) = 0;
        *(void *)(v4 + 64) = 0;
      }
      *(_OWORD *)(v4 + 48) = *(_OWORD *)(a2 + 48);
      *(void *)(v4 + 64) = *(void *)(a2 + 64);
      *(void *)(a2 + 48) = 0;
      *(void *)(a2 + 56) = 0;
      *(void *)(a2 + 64) = 0;
    }
    else
    {
      long long v8 = *v6;
      *(void *)(v4 + 24) = *(void *)(a2 + 24);
      *(_OWORD *)uint64_t v7 = v8;
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
      *(void *)uint8x8_t v6 = 0;
      *(_OWORD *)(v4 + 32) = *(_OWORD *)(a2 + 32);
      *(void *)(v4 + 56) = 0;
      *(void *)(v4 + 64) = 0;
      *(void *)(v4 + 48) = 0;
      *(_OWORD *)(v4 + 48) = *(_OWORD *)(a2 + 48);
      *(void *)(v4 + 64) = *(void *)(a2 + 64);
      *(void *)(a2 + 48) = 0;
      *(void *)(a2 + 56) = 0;
      *(void *)(a2 + 64) = 0;
      *(unsigned char *)(v4 + 72) = 1;
    }
  }
  else if (*(unsigned char *)(*a1 + 72))
  {
    uint64_t v10 = *(void *)(v4 + 48);
    if (v10)
    {
      uint64_t v11 = *(void *)(v4 + 56);
      int v12 = *(void **)(v4 + 48);
      if (v11 != v10)
      {
        do
        {
          if (*(char *)(v11 - 1) < 0) {
            operator delete(*(void **)(v11 - 24));
          }
          v11 -= 32;
        }
        while (v11 != v10);
        int v12 = *(void **)(v4 + 48);
      }
      *(void *)(v4 + 56) = v10;
      operator delete(v12);
    }
    if (*(char *)(v4 + 31) < 0) {
      operator delete(*(void **)(v4 + 8));
    }
    *(unsigned char *)(v4 + 72) = 0;
  }
  *(unsigned char *)a1[1] = *(unsigned char *)(a2 + 80);
  return a1;
}

void sub_9679AC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  sub_8FBB94(a3, a4, (uint64_t)&__p);
  if (__p != v19 && *(unsigned char *)__p == 4)
  {
    int v12 = (int *)sub_8DFD1C(a3, a4, 0, "line");
    sub_96724C(a1, *(void *)((char *)v12 + *(unsigned __int16 *)((char *)v12 - *v12 + 6)), a6);
    long long v13 = __p;
    if (!__p) {
      return;
    }
    goto LABEL_4;
  }
  if (*(unsigned char *)(a5 + 1425) == 1)
  {
    __int16 v14 = (int *)operator new(4uLL);
    int *v14 = 1;
    unsigned __int16 v16 = v14 + 1;
    uint8x8_t v17 = v14 + 1;
  }
  else
  {
    __int16 v14 = (int *)operator new(8uLL);
    *(void *)__int16 v14 = 0x100000003;
    unsigned __int16 v16 = v14 + 2;
    uint8x8_t v17 = v14 + 2;
  }
  uint64_t v15 = v14;
  sub_967428(a2, a3, a4, 0xFFFFFFFF00000000, a5 + 968, &v15, a6);
  operator delete(v14);
  long long v13 = __p;
  if (__p)
  {
LABEL_4:
    float v19 = v13;
    operator delete(v13);
  }
}

void sub_967B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_967B48(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11 = a5 + 968;
  if (*(unsigned char *)(a5 + 1425) == 1)
  {
    int v12 = (int *)operator new(8uLL);
    *(void *)int v12 = 0x100000000;
    __int16 v14 = v12 + 2;
    uint64_t v15 = v12 + 2;
  }
  else
  {
    int v12 = (int *)operator new(0xCuLL);
    __int16 v14 = v12 + 3;
    uint64_t v15 = v12 + 3;
    *(void *)int v12 = 0x400000000;
    v12[2] = 1;
  }
  long long v13 = v12;
  sub_967428(a1, a2, a3, a4, v11, &v13, a6);
  operator delete(v12);
}

void sub_967C40(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_967C54(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_967C68(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  sub_8FBB94(a3, a4, (uint64_t)&__p);
  if (__p == v16 || *(unsigned char *)__p != 4)
  {
    sub_967B48(a2, a3, a4, a5, a6, a7);
  }
  else
  {
    __int16 v14 = (int *)sub_8DFD1C(a3, a4, 0, "line");
    sub_96724C(a1, *(void *)((char *)v14 + *(unsigned __int16 *)((char *)v14 - *v14 + 6)), a7);
  }
  if (__p)
  {
    unsigned __int16 v16 = __p;
    operator delete(__p);
  }
}

void sub_967D50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_967D6C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  sub_8FBB94(a3, a4, (uint64_t)&__p);
  if (__p != v21 && *(unsigned char *)__p == 4)
  {
    __int16 v14 = (int *)sub_8DFD1C(a3, a4, 0, "line");
    sub_96724C(a1, *(void *)((char *)v14 + *(unsigned __int16 *)((char *)v14 - *v14 + 6)), a7);
    uint64_t v15 = __p;
    if (!__p) {
      return;
    }
    goto LABEL_4;
  }
  if (*(unsigned char *)(a6 + 1425) == 1)
  {
    unsigned __int16 v16 = (int *)operator new(8uLL);
    *(void *)unsigned __int16 v16 = 0x100000000;
    uint64_t v18 = v16 + 2;
    float v19 = v16 + 2;
  }
  else
  {
    unsigned __int16 v16 = (int *)operator new(0xCuLL);
    uint64_t v18 = v16 + 3;
    float v19 = v16 + 3;
    *(void *)unsigned __int16 v16 = 0x100000000;
    v16[2] = 4;
  }
  uint8x8_t v17 = v16;
  sub_967428(a2, a3, a4, a5, a6 + 968, &v17, a7);
  operator delete(v16);
  uint64_t v15 = __p;
  if (__p)
  {
LABEL_4:
    __n128 v21 = v15;
    operator delete(v15);
  }
}

void sub_967EE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_967F1C(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint8x8_t v6 = (int *)sub_8ED928(a1, a2, 0, "station");
  uint64_t v7 = (unsigned __int16 *)((char *)v6 - *v6);
  if (*v7 >= 0x1Fu && (uint64_t v8 = v7[15]) != 0) {
    unsigned int v9 = (char **)((char *)v6 + v8 + *(unsigned int *)((char *)v6 + v8));
  }
  else {
    unsigned int v9 = 0;
  }
  sub_968588(v9, (void (*)(void **__return_ptr, char *))sub_96862C, (uint64_t)&__p);
  uint64_t v10 = (char *)__p;
  uint64_t v11 = (char *)__p;
  if (__p != v20)
  {
    uint64_t v11 = (char *)__p;
    while (*((void *)v11 + 10) != a3)
    {
      v11 += 88;
      if (v11 == v20) {
        goto LABEL_12;
      }
    }
  }
  if (v11 == v20)
  {
LABEL_12:
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)a4 = 0u;
    if (!v10) {
      return;
    }
  }
  else
  {
    *(unsigned char *)(a4 + 72) = 1;
    *(void *)a4 = *(void *)v11;
    if (v11[31] < 0)
    {
      sub_4200((unsigned char *)(a4 + 8), *((void **)v11 + 1), *((void *)v11 + 2));
    }
    else
    {
      long long v12 = *(_OWORD *)(v11 + 8);
      *(void *)(a4 + 24) = *((void *)v11 + 3);
      *(_OWORD *)(a4 + 8) = v12;
    }
    long long v18 = *((_OWORD *)v11 + 2);
    *(void *)(a4 + 48) = 0;
    *(_OWORD *)(a4 + 32) = v18;
    *(void *)(a4 + 56) = 0;
    *(void *)(a4 + 64) = 0;
    sub_360840((unsigned char *)(a4 + 48), *((void *)v11 + 6), *((void *)v11 + 7), (uint64_t)(*((void *)v11 + 7) - *((void *)v11 + 6)) >> 5);
    uint64_t v10 = (char *)__p;
    if (!__p) {
      return;
    }
  }
  long long v13 = v20;
  __int16 v14 = v10;
  if (v20 != v10)
  {
    do
    {
      uint64_t v15 = *((void *)v13 - 5);
      if (v15)
      {
        uint64_t v16 = *((void *)v13 - 4);
        uint8x8_t v17 = (void *)*((void *)v13 - 5);
        if (v16 != v15)
        {
          do
          {
            if (*(char *)(v16 - 1) < 0) {
              operator delete(*(void **)(v16 - 24));
            }
            v16 -= 32;
          }
          while (v16 != v15);
          uint8x8_t v17 = (void *)*((void *)v13 - 5);
        }
        *((void *)v13 - 4) = v15;
        operator delete(v17);
      }
      if (*(v13 - 57) < 0) {
        operator delete(*((void **)v13 - 10));
      }
      v13 -= 88;
    }
    while (v13 != v10);
    __int16 v14 = __p;
  }
  uint64_t v20 = v10;
  operator delete(v14);
}

void sub_968110(void *a1)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  sub_58CC(a1);
}

__n128 sub_96812C@<Q0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = (int *)sub_8DFD1C(a1, *a2, 0, "line");
  uint8x8_t v6 = (unsigned __int16 *)((char *)v4 - *v4);
  if (*v6 < 0x15u || (uint64_t v7 = v6[10]) == 0)
  {
    result.n128_u64[0] = 0;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
    return result;
  }
  uint64_t v8 = (int *)((char *)v4 + v7 + *(unsigned int *)((char *)v4 + v7));
  unsigned int v9 = (unsigned __int16 *)((char *)v8 - *v8);
  unsigned int v10 = *v9;
  if (v10 <= 6)
  {
    unsigned int v11 = 0;
    uint64_t v12 = 0xFFFFFFLL;
    if (v10 < 5) {
      goto LABEL_15;
    }
    uint64_t v13 = v9[2];
    if (!v13) {
      goto LABEL_15;
    }
    goto LABEL_12;
  }
  if (v9[3])
  {
    unsigned int v11 = *(int *)((char *)v8 + v9[3]);
    if (v10 >= 9) {
      goto LABEL_6;
    }
  }
  else
  {
    unsigned int v11 = 0;
    if (v10 >= 9)
    {
LABEL_6:
      if (v9[4])
      {
        uint64_t v12 = *(unsigned int *)((char *)v8 + v9[4]);
        uint64_t v13 = v9[2];
        if (!v13) {
          goto LABEL_15;
        }
      }
      else
      {
        uint64_t v12 = 0xFFFFFFLL;
        uint64_t v13 = v9[2];
        if (!v13) {
          goto LABEL_15;
        }
      }
      goto LABEL_12;
    }
  }
  uint64_t v12 = 0xFFFFFFLL;
  uint64_t v13 = v9[2];
  if (!v13)
  {
LABEL_15:
    __int16 v14 = 0;
    goto LABEL_16;
  }
LABEL_12:
  __int16 v14 = (int *)((char *)v8 + v13 + *(unsigned int *)((char *)v8 + v13));
LABEL_16:
  sub_4A0694(v14, (uint64_t)&v18);
  uint64_t v15 = *(void *)v19;
  *(void *)(a3 + 8) = v18;
  *(void *)(a3 + 16) = v15;
  *(void *)(a3 + 23) = *(void *)&v19[7];
  LOBYTE(v15) = v20;
  __n128 result = v21;
  uint64_t v16 = v23;
  long long v17 = v22;
  *(unsigned char *)(a3 + 72) = 1;
  *(void *)a3 = v11 | (unint64_t)(v12 << 32);
  *(unsigned char *)(a3 + 31) = v15;
  *(__n128 *)(a3 + 32) = result;
  *(_OWORD *)(a3 + 48) = v17;
  *(void *)(a3 + 64) = v16;
  return result;
}

__n128 sub_9682A0@<Q0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = (int *)sub_8DFD1C(a1, *a2, 0, "line");
  uint8x8_t v6 = (unsigned __int16 *)((char *)v4 - *v4);
  if (*v6 < 0x43u || (uint64_t v7 = v6[33]) == 0)
  {
    result.n128_u64[0] = 0;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
    return result;
  }
  uint64_t v8 = (int *)((char *)v4 + v7 + *(unsigned int *)((char *)v4 + v7));
  unsigned int v9 = (unsigned __int16 *)((char *)v8 - *v8);
  unsigned int v10 = *v9;
  if (v10 <= 6)
  {
    unsigned int v11 = 0;
    uint64_t v12 = 0xFFFFFFLL;
    if (v10 < 5) {
      goto LABEL_15;
    }
    uint64_t v13 = v9[2];
    if (!v13) {
      goto LABEL_15;
    }
    goto LABEL_12;
  }
  if (v9[3])
  {
    unsigned int v11 = *(int *)((char *)v8 + v9[3]);
    if (v10 >= 9) {
      goto LABEL_6;
    }
  }
  else
  {
    unsigned int v11 = 0;
    if (v10 >= 9)
    {
LABEL_6:
      if (v9[4])
      {
        uint64_t v12 = *(unsigned int *)((char *)v8 + v9[4]);
        uint64_t v13 = v9[2];
        if (!v13) {
          goto LABEL_15;
        }
      }
      else
      {
        uint64_t v12 = 0xFFFFFFLL;
        uint64_t v13 = v9[2];
        if (!v13) {
          goto LABEL_15;
        }
      }
      goto LABEL_12;
    }
  }
  uint64_t v12 = 0xFFFFFFLL;
  uint64_t v13 = v9[2];
  if (!v13)
  {
LABEL_15:
    __int16 v14 = 0;
    goto LABEL_16;
  }
LABEL_12:
  __int16 v14 = (int *)((char *)v8 + v13 + *(unsigned int *)((char *)v8 + v13));
LABEL_16:
  sub_4A0694(v14, (uint64_t)&v18);
  uint64_t v15 = *(void *)v19;
  *(void *)(a3 + 8) = v18;
  *(void *)(a3 + 16) = v15;
  *(void *)(a3 + 23) = *(void *)&v19[7];
  LOBYTE(v15) = v20;
  __n128 result = v21;
  uint64_t v16 = v23;
  long long v17 = v22;
  *(unsigned char *)(a3 + 72) = 1;
  *(void *)a3 = v11 | (unint64_t)(v12 << 32);
  *(unsigned char *)(a3 + 31) = v15;
  *(__n128 *)(a3 + 32) = result;
  *(_OWORD *)(a3 + 48) = v17;
  *(void *)(a3 + 64) = v16;
  return result;
}

__n128 sub_968414@<Q0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = (int *)sub_8DFD1C(a1, *a2, 0, "line");
  uint8x8_t v6 = (unsigned __int16 *)((char *)v4 - *v4);
  if (*v6 < 0x41u || (uint64_t v7 = v6[32]) == 0)
  {
    result.n128_u64[0] = 0;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
    return result;
  }
  uint64_t v8 = (int *)((char *)v4 + v7 + *(unsigned int *)((char *)v4 + v7));
  unsigned int v9 = (unsigned __int16 *)((char *)v8 - *v8);
  unsigned int v10 = *v9;
  if (v10 <= 6)
  {
    unsigned int v11 = 0;
    uint64_t v12 = 0xFFFFFFLL;
    if (v10 < 5) {
      goto LABEL_15;
    }
    uint64_t v13 = v9[2];
    if (!v13) {
      goto LABEL_15;
    }
    goto LABEL_12;
  }
  if (v9[3])
  {
    unsigned int v11 = *(int *)((char *)v8 + v9[3]);
    if (v10 >= 9) {
      goto LABEL_6;
    }
  }
  else
  {
    unsigned int v11 = 0;
    if (v10 >= 9)
    {
LABEL_6:
      if (v9[4])
      {
        uint64_t v12 = *(unsigned int *)((char *)v8 + v9[4]);
        uint64_t v13 = v9[2];
        if (!v13) {
          goto LABEL_15;
        }
      }
      else
      {
        uint64_t v12 = 0xFFFFFFLL;
        uint64_t v13 = v9[2];
        if (!v13) {
          goto LABEL_15;
        }
      }
      goto LABEL_12;
    }
  }
  uint64_t v12 = 0xFFFFFFLL;
  uint64_t v13 = v9[2];
  if (!v13)
  {
LABEL_15:
    __int16 v14 = 0;
    goto LABEL_16;
  }
LABEL_12:
  __int16 v14 = (int *)((char *)v8 + v13 + *(unsigned int *)((char *)v8 + v13));
LABEL_16:
  sub_4A0694(v14, (uint64_t)&v18);
  uint64_t v15 = *(void *)v19;
  *(void *)(a3 + 8) = v18;
  *(void *)(a3 + 16) = v15;
  *(void *)(a3 + 23) = *(void *)&v19[7];
  LOBYTE(v15) = v20;
  __n128 result = v21;
  uint64_t v16 = v23;
  long long v17 = v22;
  *(unsigned char *)(a3 + 72) = 1;
  *(void *)a3 = v11 | (unint64_t)(v12 << 32);
  *(unsigned char *)(a3 + 31) = v15;
  *(__n128 *)(a3 + 32) = result;
  *(_OWORD *)(a3 + 48) = v17;
  *(void *)(a3 + 64) = v16;
  return result;
}

char **sub_968588@<X0>(char **result@<X0>, void (*a2)(void **__return_ptr, char *)@<X1>, uint64_t a3@<X8>)
{
  void (*v8)(void **__return_ptr, char *);

  uint64_t v7 = 0;
  uint64_t v8 = a2;
  long long v6 = 0u;
  if (result)
  {
    uint64_t v4 = (unsigned int *)result;
    sub_9687DC((char **)&v6, *(unsigned int *)result);
    __n128 result = sub_968A4C(v4, (char **)&v6, *((uint64_t *)&v6 + 1), &v8);
    uint64_t v5 = v7;
    *(_OWORD *)a3 = v6;
    *(void *)(a3 + 16) = v5;
  }
  else
  {
    *(_OWORD *)a3 = 0uLL;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

void sub_968610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *a9)
{
  if (a9) {
    sub_20ACA20((uint64_t)&a9, a9);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_96862C@<Q0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 9u)
  {
    uint64_t v5 = 0;
    long long v6 = (_WORD *)(&loc_1120530 + 1);
    unsigned int v7 = *(unsigned __int16 *)((char *)&loc_1120530 + 1);
    if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) >= 7u) {
      goto LABEL_5;
    }
LABEL_11:
    unsigned int v8 = 0;
    uint64_t v9 = 0xFFFFFFLL;
    if (v7 < 5) {
      goto LABEL_16;
    }
    uint64_t v10 = v6[2];
    if (!v10) {
      goto LABEL_16;
    }
    goto LABEL_13;
  }
  uint64_t v5 = (int *)v4[4];
  if (v5) {
    uint64_t v5 = (int *)((char *)v5 + (void)a1 + *(unsigned int *)((char *)v5 + (void)a1));
  }
  long long v6 = (unsigned __int16 *)((char *)v5 - *v5);
  unsigned int v7 = *v6;
  if (v7 < 7) {
    goto LABEL_11;
  }
LABEL_5:
  if (v6[3])
  {
    unsigned int v8 = *(int *)((char *)v5 + v6[3]);
    if (v7 >= 9) {
      goto LABEL_7;
    }
  }
  else
  {
    unsigned int v8 = 0;
    if (v7 >= 9)
    {
LABEL_7:
      if (v6[4])
      {
        uint64_t v9 = *(unsigned int *)((char *)v5 + v6[4]);
        uint64_t v10 = v6[2];
        if (!v10) {
          goto LABEL_16;
        }
      }
      else
      {
        uint64_t v9 = 0xFFFFFFLL;
        uint64_t v10 = v6[2];
        if (!v10) {
          goto LABEL_16;
        }
      }
      goto LABEL_13;
    }
  }
  uint64_t v9 = 0xFFFFFFLL;
  uint64_t v10 = v6[2];
  if (!v10)
  {
LABEL_16:
    unsigned int v11 = 0;
    goto LABEL_17;
  }
LABEL_13:
  unsigned int v11 = (int *)((char *)v5 + v10 + *(unsigned int *)((char *)v5 + v10));
LABEL_17:
  sub_4A0694(v11, (uint64_t)&v20);
  uint64_t v12 = v20;
  v26[0] = *(void *)v21;
  *(void *)((char *)v26 + 7) = *(void *)&v21[7];
  char v13 = v22;
  __n128 result = v23;
  long long v15 = v24;
  uint64_t v16 = v25;
  long long v17 = (char *)a1 - *a1;
  uint64_t v18 = *(void *)((char *)a1 + *((unsigned __int16 *)v17 + 2));
  uint64_t v19 = *(void *)((char *)a1 + *((unsigned __int16 *)v17 + 3));
  *(void *)a2 = v8 | (unint64_t)(v9 << 32);
  *(void *)(a2 + 8) = v12;
  *(void *)(a2 + 16) = v26[0];
  *(void *)(a2 + 23) = *(void *)((char *)v26 + 7);
  *(unsigned char *)(a2 + 31) = v13;
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v15;
  *(void *)(a2 + 64) = v16;
  *(void *)(a2 + 72) = v18;
  *(void *)(a2 + 80) = v19;
  return result;
}

void sub_9687DC(char **a1, unint64_t a2)
{
  uint64_t v2 = *a1;
  if (0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 3) >= a2) {
    return;
  }
  if (a2 >= 0x2E8BA2E8BA2E8BBLL) {
    sub_2E00();
  }
  uint64_t v4 = a1[1];
  uint64_t v5 = 88 * a2;
  long long v6 = (char *)operator new(88 * a2);
  unsigned int v7 = &v6[v5];
  unsigned int v8 = &v6[v4 - v2];
  if (v4 == v2)
  {
    *a1 = v8;
    a1[1] = v8;
    a1[2] = v7;
    if (!v2) {
      return;
    }
    goto LABEL_21;
  }
  uint64_t v9 = 0;
  do
  {
    uint64_t v10 = &v8[v9];
    unsigned int v11 = &v4[v9];
    *((void *)v10 - 11) = *(void *)&v4[v9 - 88];
    long long v12 = *(_OWORD *)&v4[v9 - 80];
    *((void *)v10 - 8) = *(void *)&v4[v9 - 64];
    *((_OWORD *)v10 - 5) = v12;
    *((void *)v11 - 9) = 0;
    *((void *)v11 - 8) = 0;
    *((void *)v11 - 10) = 0;
    *(_OWORD *)(v10 - 56) = *(_OWORD *)&v4[v9 - 56];
    *(_OWORD *)(v10 - 40) = *(_OWORD *)&v4[v9 - 40];
    *((void *)v10 - 3) = *(void *)&v4[v9 - 24];
    *((void *)v11 - 5) = 0;
    *((void *)v11 - 4) = 0;
    *((void *)v11 - 3) = 0;
    *((_OWORD *)v10 - 1) = *(_OWORD *)&v4[v9 - 16];
    v9 -= 88;
  }
  while (&v4[v9] != v2);
  char v13 = *a1;
  uint64_t v2 = a1[1];
  *a1 = &v8[v9];
  a1[1] = v8;
  a1[2] = v7;
  if (v2 != v13)
  {
    do
    {
      uint64_t v14 = *((void *)v2 - 5);
      if (v14)
      {
        uint64_t v15 = *((void *)v2 - 4);
        uint64_t v16 = (void *)*((void *)v2 - 5);
        if (v15 != v14)
        {
          do
          {
            if (*(char *)(v15 - 1) < 0) {
              operator delete(*(void **)(v15 - 24));
            }
            v15 -= 32;
          }
          while (v15 != v14);
          uint64_t v16 = (void *)*((void *)v2 - 5);
        }
        *((void *)v2 - 4) = v14;
        operator delete(v16);
      }
      if (*(v2 - 57) < 0) {
        operator delete(*((void **)v2 - 10));
      }
      v2 -= 88;
    }
    while (v2 != v13);
    uint64_t v2 = v13;
  }
  if (v2)
  {
LABEL_21:
    operator delete(v2);
  }
}

uint64_t sub_968994(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 88;
    uint64_t v4 = *(void *)(i - 40);
    if (v4)
    {
      uint64_t v5 = *(void *)(i - 32);
      long long v6 = *(void **)(i - 40);
      if (v5 != v4)
      {
        do
        {
          if (*(char *)(v5 - 1) < 0) {
            operator delete(*(void **)(v5 - 24));
          }
          v5 -= 32;
        }
        while (v5 != v4);
        long long v6 = *(void **)(i - 40);
      }
      *(void *)(i - 32) = v4;
      operator delete(v6);
    }
    if (*(char *)(i - 57) < 0) {
      operator delete(*(void **)(i - 80));
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char **sub_968A4C(unsigned int *a1, char **a2, uint64_t a3, void (**a4)(void **__return_ptr, char *))
{
  void (*v9)(void **__return_ptr, char *);
  uint64_t v10;
  void **v11;
  void **v12;
  void *v13;
  void *v15[3];
  char v16;
  void *__p;
  void **v18;

  unsigned int v7 = (char *)(a1 + 1);
  uint64_t v6 = *a1;
  if (v6)
  {
    unsigned int v8 = (unsigned int *)&v7[4 * v6];
    uint64_t v9 = *a4;
    (*a4)(v15, &v7[*(unsigned int *)v7]);
    while (1)
    {
      uint64_t v10 = sub_968B74(a2, a3, (uint64_t)v15);
      unsigned int v11 = (void **)__p;
      if (__p)
      {
        long long v12 = v18;
        char v13 = __p;
        if (v18 != __p)
        {
          do
          {
            if (*((char *)v12 - 1) < 0) {
              operator delete(*(v12 - 3));
            }
            v12 -= 4;
          }
          while (v12 != v11);
          char v13 = __p;
        }
        uint64_t v18 = v11;
        operator delete(v13);
      }
      if (v16 < 0) {
        operator delete(v15[1]);
      }
      a3 = v10 + 88;
      v7 += 4;
      if (v7 == (char *)v8) {
        break;
      }
      v9(v15, &v7[*(unsigned int *)v7]);
    }
  }
  return a2;
}

void sub_968B40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void **a19, void *a20)
{
  if (a19) {
    sub_20ABEB4(&a20, a19, (void **)&a19);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_968B74(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  unsigned int v7 = *a1;
  unint64_t v6 = (unint64_t)a1[1];
  uint64_t v8 = 0x2E8BA2E8BA2E8BA3 * ((a2 - (uint64_t)*a1) >> 3);
  unint64_t v9 = (unint64_t)a1[2];
  if (v6 >= v9)
  {
    unint64_t v19 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v6 - (void)v7) >> 3) + 1;
    if (v19 > 0x2E8BA2E8BA2E8BALL) {
      sub_2E00();
    }
    unint64_t v20 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v9 - (void)v7) >> 3);
    if (2 * v20 > v19) {
      unint64_t v19 = 2 * v20;
    }
    if (v20 >= 0x1745D1745D1745DLL) {
      unint64_t v21 = 0x2E8BA2E8BA2E8BALL;
    }
    else {
      unint64_t v21 = v19;
    }
    uint64_t v44 = a1 + 2;
    if (v21)
    {
      if (v21 > 0x2E8BA2E8BA2E8BALL) {
        sub_188D718();
      }
      char v22 = (char *)operator new(88 * v21);
    }
    else
    {
      char v22 = 0;
    }
    long long v40 = v22;
    int v41 = &v22[88 * v8];
    long long v42 = v41;
    long long v43 = &v22[88 * v21];
    sub_969024((uint64_t)&v40, a3);
    long long v24 = v41;
    uint64_t v25 = *a1;
    char v26 = v41;
    if (*a1 != (char *)v4)
    {
      uint64_t v27 = 0;
      do
      {
        uint8x8_t v28 = &v24[v27];
        uint64_t v29 = v4 + v27;
        *((void *)v28 - 11) = *(void *)(v4 + v27 - 88);
        long long v30 = *(_OWORD *)(v4 + v27 - 80);
        *((void *)v28 - 8) = *(void *)(v4 + v27 - 64);
        *((_OWORD *)v28 - 5) = v30;
        *(void *)(v29 - 72) = 0;
        *(void *)(v29 - 64) = 0;
        *(void *)(v29 - 80) = 0;
        *(_OWORD *)(v28 - 56) = *(_OWORD *)(v4 + v27 - 56);
        *((void *)v28 - 4) = 0;
        *((void *)v28 - 3) = 0;
        *((void *)v28 - 5) = 0;
        *(_OWORD *)(v28 - 40) = *(_OWORD *)(v4 + v27 - 40);
        *((void *)v28 - 3) = *(void *)(v4 + v27 - 24);
        *(void *)(v29 - 40) = 0;
        *(void *)(v29 - 32) = 0;
        *(void *)(v29 - 24) = 0;
        *((_OWORD *)v28 - 1) = *(_OWORD *)(v4 + v27 - 16);
        v27 -= 88;
      }
      while ((char *)(v4 + v27) != v25);
      char v26 = &v24[v27];
    }
    int v41 = v26;
    long long v31 = a1[1];
    char v32 = v42;
    if (v31 != (char *)v4)
    {
      do
      {
        *(void *)char v32 = *(void *)v4;
        long long v33 = *(_OWORD *)(v4 + 8);
        *((void *)v32 + 3) = *(void *)(v4 + 24);
        *(_OWORD *)(v32 + 8) = v33;
        *(void *)(v4 + 16) = 0;
        *(void *)(v4 + 24) = 0;
        *(void *)(v4 + 8) = 0;
        *((_OWORD *)v32 + 2) = *(_OWORD *)(v4 + 32);
        *((void *)v32 + 7) = 0;
        *((void *)v32 + 8) = 0;
        *((void *)v32 + 6) = 0;
        *((_OWORD *)v32 + 3) = *(_OWORD *)(v4 + 48);
        *((void *)v32 + 8) = *(void *)(v4 + 64);
        *(void *)(v4 + 48) = 0;
        *(void *)(v4 + 56) = 0;
        *(void *)(v4 + 64) = 0;
        *(_OWORD *)(v32 + 72) = *(_OWORD *)(v4 + 72);
        v32 += 88;
        v4 += 88;
      }
      while ((char *)v4 != v31);
      char v26 = v41;
      uint64_t v4 = (uint64_t)a1[1];
    }
    unint64_t v34 = *a1;
    *a1 = v26;
    a1[1] = v32;
    char v35 = a1[2];
    a1[2] = v43;
    long long v42 = (char *)v4;
    long long v43 = v35;
    long long v40 = v34;
    int v41 = v34;
    if ((char *)v4 == v34)
    {
      if (!v4) {
        return (uint64_t)v24;
      }
    }
    else
    {
      do
      {
        long long v42 = (char *)(v4 - 88);
        uint64_t v36 = *(void *)(v4 - 40);
        if (v36)
        {
          uint64_t v37 = *(void *)(v4 - 32);
          char v38 = *(void **)(v4 - 40);
          if (v37 != v36)
          {
            do
            {
              if (*(char *)(v37 - 1) < 0) {
                operator delete(*(void **)(v37 - 24));
              }
              v37 -= 32;
            }
            while (v37 != v36);
            char v38 = *(void **)(v4 - 40);
          }
          *(void *)(v4 - 32) = v36;
          operator delete(v38);
        }
        if (*(char *)(v4 - 57) < 0) {
          operator delete(*(void **)(v4 - 80));
        }
        uint64_t v4 = (uint64_t)v42;
      }
      while (v42 != v34);
      uint64_t v4 = (uint64_t)v40;
      if (!v40) {
        return (uint64_t)v24;
      }
    }
    operator delete((void *)v4);
    return (uint64_t)v24;
  }
  if (a2 == v6)
  {
    *(void *)a2 = *(void *)a3;
    long long v23 = *(_OWORD *)(a3 + 8);
    *(void *)(a2 + 24) = *(void *)(a3 + 24);
    *(_OWORD *)(a2 + 8) = v23;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 8) = 0;
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(a3 + 32);
    *(void *)(a2 + 56) = 0;
    *(void *)(a2 + 64) = 0;
    *(void *)(a2 + 48) = 0;
    *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
    *(void *)(a2 + 64) = *(void *)(a3 + 64);
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
    *(void *)(a3 + 64) = 0;
    *(_OWORD *)&v7[88 * v8 + 72] = *(_OWORD *)(a3 + 72);
    a1[1] = (char *)(a2 + 88);
  }
  else
  {
    uint64_t v10 = a1[1];
    if (v6 >= 0x58)
    {
      unint64_t v11 = v6 - 88;
      uint64_t v10 = a1[1];
      do
      {
        *(void *)uint64_t v10 = *(void *)v11;
        long long v12 = *(_OWORD *)(v11 + 8);
        *((void *)v10 + 3) = *(void *)(v11 + 24);
        *(_OWORD *)(v10 + 8) = v12;
        *(void *)(v11 + 16) = 0;
        *(void *)(v11 + 24) = 0;
        *(void *)(v11 + 8) = 0;
        *((_OWORD *)v10 + 2) = *(_OWORD *)(v11 + 32);
        *((void *)v10 + 7) = 0;
        *((void *)v10 + 8) = 0;
        *((void *)v10 + 6) = 0;
        *((_OWORD *)v10 + 3) = *(_OWORD *)(v11 + 48);
        *((void *)v10 + 8) = *(void *)(v11 + 64);
        *(void *)(v11 + 48) = 0;
        *(void *)(v11 + 56) = 0;
        *(void *)(v11 + 64) = 0;
        *(_OWORD *)(v10 + 72) = *(_OWORD *)(v11 + 72);
        v10 += 88;
        v11 += 88;
      }
      while (v11 < v6);
    }
    a1[1] = v10;
    sub_969294((uint64_t)&v40, a2, v6 - 88, v6);
    *(void *)uint64_t v4 = *(void *)a3;
    char v13 = (void **)(v4 + 8);
    if (*(char *)(v4 + 31) < 0) {
      operator delete(*v13);
    }
    long long v14 = *(_OWORD *)(a3 + 8);
    *(void *)(v4 + 24) = *(void *)(a3 + 24);
    *(_OWORD *)char v13 = v14;
    *(unsigned char *)(a3 + 31) = 0;
    *(unsigned char *)(a3 + 8) = 0;
    uint64_t v15 = (void **)(v4 + 48);
    uint64_t v16 = *(void ***)(v4 + 48);
    *(_OWORD *)(v4 + 32) = *(_OWORD *)(a3 + 32);
    if (v16)
    {
      long long v17 = *(void ***)(v4 + 56);
      uint64_t v18 = v16;
      if (v17 != v16)
      {
        do
        {
          if (*((char *)v17 - 1) < 0) {
            operator delete(*(v17 - 3));
          }
          v17 -= 4;
        }
        while (v17 != v16);
        uint64_t v18 = *v15;
      }
      *(void *)(v4 + 56) = v16;
      operator delete(v18);
      *uint64_t v15 = 0;
      *(void *)(v4 + 56) = 0;
      *(void *)(v4 + 64) = 0;
    }
    *(_OWORD *)(v4 + 48) = *(_OWORD *)(a3 + 48);
    *(void *)(v4 + 64) = *(void *)(a3 + 64);
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
    *(void *)(a3 + 64) = 0;
    *(_OWORD *)&v7[88 * v8 + 72] = *(_OWORD *)(a3 + 72);
  }
  return v4;
}

void sub_969010(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_968994((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_969024(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 == *(void *)(a1 + 24))
  {
    uint64_t v5 = *(void **)a1;
    unint64_t v6 = *(void *)(a1 + 8);
    if (v6 <= *(void *)a1)
    {
      unint64_t v12 = 0x5D1745D1745D1746 * ((v4 - (uint64_t)v5) >> 3);
      if ((void *)v4 == v5) {
        unint64_t v12 = 1;
      }
      if (v12 >= 0x2E8BA2E8BA2E8BBLL) {
        sub_188D718();
      }
      unint64_t v13 = v12 >> 2;
      uint64_t v14 = 88 * v12;
      uint64_t v15 = (char *)operator new(88 * v12);
      uint64_t v16 = &v15[88 * v13];
      long long v17 = &v15[v14];
      if (v4 == v6)
      {
        *(void *)a1 = v15;
        *(void *)(a1 + 8) = v16;
        *(void *)(a1 + 16) = v16;
        *(void *)(a1 + 24) = v17;
      }
      else
      {
        uint64_t v18 = &v16[v4 - v6];
        uint64_t v19 = 88 * v13;
        do
        {
          unint64_t v20 = &v15[v19];
          *(void *)unint64_t v20 = *(void *)v6;
          long long v21 = *(_OWORD *)(v6 + 8);
          *((void *)v20 + 3) = *(void *)(v6 + 24);
          *(_OWORD *)(v20 + 8) = v21;
          *(void *)(v6 + 16) = 0;
          *(void *)(v6 + 24) = 0;
          *(void *)(v6 + 8) = 0;
          *((_OWORD *)v20 + 2) = *(_OWORD *)(v6 + 32);
          *((_OWORD *)v20 + 3) = *(_OWORD *)(v6 + 48);
          *((void *)v20 + 8) = *(void *)(v6 + 64);
          *(void *)(v6 + 48) = 0;
          *(void *)(v6 + 56) = 0;
          *(void *)(v6 + 64) = 0;
          *(_OWORD *)(v20 + 72) = *(_OWORD *)(v6 + 72);
          v19 += 88;
          v6 += 88;
        }
        while (v20 + 88 != v18);
        uint64_t v5 = *(void **)a1;
        uint64_t v22 = *(void *)(a1 + 8);
        uint64_t v23 = *(void *)(a1 + 16);
        *(void *)a1 = v15;
        *(void *)(a1 + 8) = v16;
        *(void *)(a1 + 16) = v18;
        *(void *)(a1 + 24) = v17;
        while (v23 != v22)
        {
          uint64_t v24 = *(void *)(v23 - 40);
          if (v24)
          {
            uint64_t v25 = *(void *)(v23 - 32);
            char v26 = *(void **)(v23 - 40);
            if (v25 != v24)
            {
              do
              {
                if (*(char *)(v25 - 1) < 0) {
                  operator delete(*(void **)(v25 - 24));
                }
                v25 -= 32;
              }
              while (v25 != v24);
              char v26 = *(void **)(v23 - 40);
            }
            *(void *)(v23 - 32) = v24;
            operator delete(v26);
          }
          if (*(char *)(v23 - 57) < 0) {
            operator delete(*(void **)(v23 - 80));
          }
          v23 -= 88;
        }
      }
      if (v5) {
        operator delete(v5);
      }
      uint64_t v4 = *(void *)(a1 + 16);
    }
    else
    {
      uint64_t v7 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v6 - *(void *)a1) >> 3);
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = v8 >> 1;
      uint64_t v10 = -88 * v9;
      sub_9693C4((uint64_t)&v29, *(void *)(a1 + 8), v4, v6 - 88 * v9);
      uint64_t v4 = v11;
      *(void *)(a1 + 8) += v10;
      *(void *)(a1 + 16) = v11;
    }
  }
  *(void *)uint64_t v4 = *(void *)a2;
  long long v27 = *(_OWORD *)(a2 + 8);
  *(void *)(v4 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(v4 + 8) = v27;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(v4 + 56) = 0;
  *(void *)(v4 + 64) = 0;
  *(void *)(v4 + 48) = 0;
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(v4 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  __n128 result = *(__n128 *)(a2 + 72);
  *(__n128 *)(v4 + 72) = result;
  *(void *)(a1 + 16) += 88;
  return result;
}

uint64_t sub_969294(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (a3 != a2)
  {
    uint64_t v7 = a3;
    uint64_t v8 = a3;
    uint64_t v9 = a4;
    do
    {
      uint64_t v11 = *(void *)(v8 - 88);
      v8 -= 88;
      *(void *)(v9 - 88) = v11;
      v9 -= 88;
      unint64_t v12 = (void **)(v9 + 8);
      if (*(char *)(v9 + 31) < 0) {
        operator delete(*v12);
      }
      long long v13 = *(_OWORD *)(v8 + 8);
      *(void *)(v9 + 24) = *(void *)(v8 + 24);
      *(_OWORD *)unint64_t v12 = v13;
      *(unsigned char *)(v7 - 57) = 0;
      *(unsigned char *)(v7 - 80) = 0;
      uint64_t v14 = (void **)(v4 - 40);
      uint64_t v15 = *(void ***)(v4 - 40);
      *(_OWORD *)(v4 - 56) = *(_OWORD *)(v7 - 56);
      if (v15)
      {
        uint64_t v16 = *(void ***)(v4 - 32);
        uint64_t v10 = v15;
        if (v16 != v15)
        {
          do
          {
            if (*((char *)v16 - 1) < 0) {
              operator delete(*(v16 - 3));
            }
            v16 -= 4;
          }
          while (v16 != v15);
          uint64_t v10 = *v14;
        }
        *(void *)(v4 - 32) = v15;
        operator delete(v10);
        int *v14 = 0;
        *(void *)(v4 - 32) = 0;
        *(void *)(v4 - 24) = 0;
      }
      *(_OWORD *)(v4 - 40) = *(_OWORD *)(v7 - 40);
      *(void *)(v4 - 24) = *(void *)(v7 - 24);
      *(void *)(v7 - 40) = 0;
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(_OWORD *)(v4 - 16) = *(_OWORD *)(v7 - 16);
      uint64_t v4 = v9;
      uint64_t v7 = v8;
    }
    while (v8 != a2);
  }
  return a3;
}

uint64_t sub_9693C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      *(void *)a4 = *(void *)v5;
      uint64_t v8 = (void **)(a4 + 8);
      if (*(char *)(a4 + 31) < 0) {
        operator delete(*v8);
      }
      long long v9 = *(_OWORD *)(v5 + 8);
      *(void *)(a4 + 24) = *(void *)(v5 + 24);
      *(_OWORD *)uint64_t v8 = v9;
      *(unsigned char *)(v5 + 31) = 0;
      *(unsigned char *)(v5 + 8) = 0;
      uint64_t v10 = (void **)(a4 + 48);
      uint64_t v11 = *(void ***)(a4 + 48);
      *(_OWORD *)(a4 + 32) = *(_OWORD *)(v5 + 32);
      if (v11)
      {
        unint64_t v12 = *(void ***)(a4 + 56);
        uint64_t v7 = v11;
        if (v12 != v11)
        {
          do
          {
            if (*((char *)v12 - 1) < 0) {
              operator delete(*(v12 - 3));
            }
            v12 -= 4;
          }
          while (v12 != v11);
          uint64_t v7 = *v10;
        }
        *(void *)(a4 + 56) = v11;
        operator delete(v7);
        *uint64_t v10 = 0;
        *(void *)(a4 + 56) = 0;
        *(void *)(a4 + 64) = 0;
      }
      *(_OWORD *)(a4 + 48) = *(_OWORD *)(v5 + 48);
      *(void *)(a4 + 64) = *(void *)(v5 + 64);
      *(void *)(v5 + 48) = 0;
      *(void *)(v5 + 56) = 0;
      *(void *)(v5 + 64) = 0;
      *(_OWORD *)(a4 + 72) = *(_OWORD *)(v5 + 72);
      v5 += 88;
      a4 += 88;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void sub_9694D8()
{
  unk_25DAB67 = 16641;
  word_25DAB50 = 65;
  byte_25DAB7F = 1;
  byte_25DAB69 = 0;
}

long long *sub_969500(uint64_t *a1, uint64_t a2, int a3)
{
  __n128 result = &xmmword_25DAC68;
  switch(a3)
  {
    case 1:
      if (*(unsigned char *)(a2 + 792))
      {
        unint64_t v5 = *(void *)(a2 + 752);
        if (v5 != -1)
        {
          unint64_t v6 = (void *)(*a1 + 72);
          uint64_t v7 = *v6 + 696 * v5 + 104;
          if (0x66FD0EB66FD0EB67 * ((uint64_t)(v6[1] - *v6) >> 3) > v5) {
            __n128 result = (long long *)v7;
          }
        }
      }
      break;
    case 2:
      if (*(unsigned char *)(a2 + 792))
      {
        unint64_t v8 = *(void *)(a2 + 752);
        if (v8 != -1)
        {
          long long v9 = (void *)(*a1 + 72);
          uint64_t v10 = *v9 + 696 * v8 + 216;
          if (0x66FD0EB66FD0EB67 * ((uint64_t)(v9[1] - *v9) >> 3) > v8) {
            __n128 result = (long long *)v10;
          }
        }
      }
      break;
    case 3:
      if (*(unsigned char *)(a2 + 792))
      {
        uint64_t v11 = *a1;
        unint64_t v12 = *(void *)(*(void *)(*a1 + 72) + 696 * *(void *)(a2 + 752) + 64);
        if (v12 != -1)
        {
          uint64_t v14 = v11 + 96;
          uint64_t v13 = *(void *)(v11 + 96);
          unint64_t v15 = 0x4EC4EC4EC4EC4EC5 * ((*(void *)(v14 + 8) - v13) >> 4);
          uint64_t v16 = v13 + 208 * v12 + 88;
          if (v15 > v12) {
            __n128 result = (long long *)v16;
          }
        }
      }
      break;
    case 4:
      if (*(unsigned char *)(a2 + 792)) {
        __n128 result = (long long *)(a2 + 600);
      }
      break;
    case 5:
      if (*(unsigned char *)(a2 + 952))
      {
        unint64_t v17 = *(void *)(a2 + 856);
        if (v17 != -1)
        {
          uint64_t v18 = (void *)(*a1 + 120);
          uint64_t v19 = *v18 + 304 * v17 + 192;
          if (0x86BCA1AF286BCA1BLL * ((uint64_t)(v18[1] - *v18) >> 4) > v17) {
            __n128 result = (long long *)v19;
          }
        }
      }
      break;
    case 7:
      unint64_t v20 = *(void *)(a2 + 48);
      if (v20 != -1 && *(unsigned char *)(a2 + 792) != 0)
      {
        unint64_t v22 = *(void *)(a2 + 752);
        if (v22 != -1)
        {
          uint64_t v23 = (void *)*a1;
          uint64_t v24 = *(void *)(*a1 + 72);
          if (0x66FD0EB66FD0EB67 * ((v23[10] - v24) >> 3) > v22
            && 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v23[1] - *v23) >> 3) > v20)
          {
            unint64_t v25 = *(void *)(*v23 + 168 * v20 + 104);
            if (v25 != -1)
            {
              uint64_t v26 = v23[3];
              if (v25 < 0x8E38E38E38E38E39 * ((v23[4] - v26) >> 4))
              {
                unint64_t v27 = *(void *)(v26 + 144 * v25 + 104);
                if (v27 != -1)
                {
                  char v29 = v23 + 6;
                  uint64_t v28 = v23[6];
                  if (v27 < 0xF0F0F0F0F0F0F0F1 * ((v29[1] - v28) >> 3))
                  {
                    uint64_t v30 = v28 + 136 * v27;
                    uint64_t v31 = *(void *)(v30 + 112);
                    uint64_t v32 = *(void *)(v30 + 120);
                    if (v31 != v32)
                    {
                      uint64_t v33 = *(void *)(v24 + 696 * v22 + 48);
                      while (*(void *)(v31 + 8) != v33)
                      {
                        v31 += 128;
                        if (v31 == v32)
                        {
                          uint64_t v31 = v32;
                          break;
                        }
                      }
                    }
                    if (v31 != v32) {
                      __n128 result = (long long *)(v31 + 16);
                    }
                  }
                }
              }
            }
          }
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

long long *sub_9697E8(uint64_t *a1, unint64_t a2, int a3)
{
  if (a3 == 3)
  {
    uint64_t v7 = *a1;
    unint64_t v8 = *(void *)(*(void *)(*a1 + 72) + 696 * a2 + 64);
    __n128 result = &xmmword_25DAC68;
    if (v8 != -1)
    {
      uint64_t v10 = v7 + 96;
      uint64_t v9 = *(void *)(v7 + 96);
      unint64_t v11 = 0x4EC4EC4EC4EC4EC5 * ((*(void *)(v10 + 8) - v9) >> 4);
      uint64_t v12 = v9 + 208 * v8 + 88;
      if (v11 > v8) {
        return (long long *)v12;
      }
    }
  }
  else
  {
    __n128 result = &xmmword_25DAC68;
    if (a3 == 2)
    {
      if (a2 != -1)
      {
        uint64_t v13 = (void *)(*a1 + 72);
        uint64_t v14 = *v13 + 696 * a2 + 216;
        if (0x66FD0EB66FD0EB67 * ((uint64_t)(v13[1] - *v13) >> 3) > a2) {
          return (long long *)v14;
        }
      }
    }
    else if (a2 != -1)
    {
      unint64_t v5 = (void *)(*a1 + 72);
      uint64_t v6 = *v5 + 696 * a2 + 104;
      if (0x66FD0EB66FD0EB67 * ((uint64_t)(v5[1] - *v5) >> 3) > a2) {
        return (long long *)v6;
      }
    }
  }
  return result;
}

void sub_9698EC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_9698F8(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(_DWORD *)uint64_t v10 = a2;
  *(_WORD *)&v10[4] = -1;
  v10[6] = -1;
  *(_OWORD *)&v10[7] = 0uLL;
  uint64_t v11 = 0;
  char v12 = 0;
  sub_524ADC(a3, (uint64_t)v10, 6);
  if (v12 < 0)
  {
    operator delete(*(void **)&v10[8]);
    if (a2 <= 210012) {
      goto LABEL_3;
    }
LABEL_7:
    if (a2 == 210013)
    {
      uint64_t v8 = *(void *)(a1 + 8);
      LOBYTE(v11) = 8;
      strcpy(v10, "Transfer");
      uint64_t v9 = (const std::string *)sub_8D7730(v8, (uint64_t)v10);
      std::string::operator=((std::string *)(a3 + 80), v9);
LABEL_11:
      if ((char)v11 < 0) {
        operator delete(*(void **)v10);
      }
      return;
    }
    if (a2 != 211002) {
      return;
    }
LABEL_9:
    uint64_t v6 = *(void *)(a1 + 8);
    LOBYTE(v11) = 12;
    strcpy(v10, "WALK_COMMAND");
    uint64_t v7 = (const std::string *)sub_8D7730(v6, (uint64_t)v10);
    std::string::operator=((std::string *)(a3 + 80), v7);
    goto LABEL_11;
  }
  if (a2 > 210012) {
    goto LABEL_7;
  }
LABEL_3:
  if (a2 == 210002 || a2 == 210004) {
    goto LABEL_9;
  }
}

void sub_969A7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, void *a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_4D9814(v18);
  _Unwind_Resume(a1);
}

double sub_969AC0()
{
  byte_25DAB97 = 1;
  word_25DAB80 = 65;
  byte_25DABAF = 1;
  word_25DAB98 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25DAC40 = 0u;
  *(_OWORD *)&qword_25DAC50 = 0u;
  dword_25DAC60 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25DAC40, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25DAC40, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25DAC40, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25DAC40, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25DABC7 = 8;
  strcpy((char *)&qword_25DABB0, "any_mode");
  byte_25DABDF = 7;
  strcpy((char *)&dword_25DABC8, "cycling");
  byte_25DABF7 = 7;
  strcpy((char *)&dword_25DABE0, "driving");
  byte_25DAC0F = 7;
  strcpy((char *)&dword_25DABF8, "walking");
  qword_25DAC18 = 0;
  qword_25DAC20 = 0;
  qword_25DAC10 = 0;
  v0 = operator new(9uLL);
  *(void *)v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25DAC10 = (uint64_t)v0;
  qword_25DAC18 = (uint64_t)(v0 + 9);
  qword_25DAC20 = (uint64_t)(v0 + 9);
  qword_25DAC28 = 0;
  qword_25DAC30 = 0;
  unk_25DAC38 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25DAC30 = (uint64_t)(v1 + 9);
  unk_25DAC38 = v1 + 9;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25DAC28 = (uint64_t)v1;
  double result = 0.0;
  xmmword_25DAC88 = 0u;
  xmmword_25DAC68 = 0u;
  unk_25DAC78 = 0u;
  xmmword_25DACA8 = 0u;
  xmmword_25DACC8 = 0u;
  LODWORD(xmmword_25DAC88) = -1;
  DWORD2(xmmword_25DAC88) = -1;
  *(_DWORD *)((char *)&xmmword_25DAC88 + 11) = -1;
  *(void *)((char *)&xmmword_25DAC88 + 15) = 0;
  unk_25DAC9F = 0;
  unk_25DACA7 = 0;
  *(_WORD *)((char *)&xmmword_25DACA8 + 7) = 0;
  qword_25DACB8 = 0;
  unk_25DACC0 = 0;
  BYTE8(xmmword_25DACC8) = 0;
  *(void *)&xmmword_25DACC8 = 0;
  return result;
}

void sub_969DC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25DAC50) {
    sub_20ACACC((void **)qword_25DAC50);
  }
  uint64_t v37 = (void *)xmmword_25DAC40;
  *(void *)&xmmword_25DAC40 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_969E68(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v15 = 0;
  uint64_t v16 = operator new(0x20uLL);
  long long v17 = xmmword_20B8890;
  strcpy((char *)v16, "TransitBoardingInfoAnnotation");
  long long __p = 0;
  int v14 = 0;
  int v8 = sub_374CDC((uint64_t)a2, (uint64_t)&v16, (uint64_t *)&__p);
  sub_96A098(a1, a3, v8);
  uint64_t v9 = (void **)__p;
  if (__p)
  {
    char v10 = v14;
    int v11 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v9);
      int v11 = __p;
    }
    int v14 = v9;
    operator delete(v11);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete(v16);
  }
  *(void *)(a1 + 64) = sub_375D1C(a2);
  *(void *)(a1 + 72) = sub_375500(a2);
  *(void *)(a1 + 80) = sub_3755E4(a2);
  *(void *)(a1 + 88) = a3;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)a4;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  return a1;
}

void sub_969F90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_969FB8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v6 = *(_DWORD *)(a3 + 968);
  char v7 = (uint64_t *)sub_374EF4(a2);
  sub_688A04(v7, 5u, v6, &v10);
  sub_969E68(a1, a2, a3, (uint64_t)&v10);
  int v8 = v11;
  if (!v11 || atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_96A084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_96A098(uint64_t a1, uint64_t a2, void *a3)
{
  *(unsigned char *)a1 = *(_DWORD *)(a2 + 1436) > 1u;
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "countdown_max_num");
  unint64_t v5 = sub_5C9BC(a3, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 8) = v5;
  strcpy((char *)__p, "timestamp_list_max_num");
  HIBYTE(__p[2]) = 22;
  unint64_t v6 = sub_5C9BC(a3, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 16) = v6;
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "exit_plan_enabled");
  BOOL v7 = sub_29D62C(a3, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 24) = v7;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91C0;
  strcpy((char *)__p[0], "exit_plan_max_num_groups");
  unint64_t v8 = sub_5C9BC(a3, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 32) = v8;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B5EB0;
  strcpy((char *)__p[0], "exit_plan_large_group_size");
  unint64_t v9 = sub_5C9BC(a3, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 40) = v9;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91A0;
  strcpy((char *)__p[0], "exit_plan_medium_group_size");
  unint64_t v10 = sub_5C9BC(a3, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 48) = v10;
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9A80;
  strcpy((char *)__p[0], "exit_plan_section_style_medium_group_min_count");
  int v11 = sub_319F48(a3, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 56) = v11;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8E90;
  strcpy((char *)__p[0], "exit_plan_use_transfer_graph_id");
  BOOL v12 = sub_29D62C(a3, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 60) = v12;
  return a1;
}

void sub_96A364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_96A39C(unsigned char *a1, uint64_t a2)
{
  if (*a1)
  {
    uint64_t v2 = *(void **)a2;
    uint64_t v3 = *(void **)(a2 + 8);
    if (*(void **)a2 != v3)
    {
      do
      {
        sub_9E6208((uint64_t)v34, v2);
        while (1)
        {
          sub_9E6260((uint64_t)v34, v24);
          BOOL v5 = sub_9E6044(v34, v24);
          unint64_t v6 = v30;
          BOOL v7 = v31;
          if (v31 == v30)
          {
            BOOL v7 = v30;
            uint64_t v33 = 0;
            unint64_t v14 = 0;
          }
          else
          {
            unint64_t v8 = &v30[v32 >> 7];
            uint64_t v9 = (uint64_t)*v8;
            uint64_t v10 = (uint64_t)*v8 + 32 * (v32 & 0x7F);
            uint64_t v11 = *(uint64_t *)((char *)v30 + (((v33 + v32) >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * ((v33 + v32) & 0x7F);
            if (v10 != v11)
            {
              do
              {
                BOOL v12 = *(void **)v10;
                if (*(void *)v10)
                {
                  *(void *)(v10 + 8) = v12;
                  operator delete(v12);
                  uint64_t v9 = (uint64_t)*v8;
                }
                v10 += 32;
                if (v10 - v9 == 4096)
                {
                  uint64_t v13 = (uint64_t)v8[1];
                  ++v8;
                  uint64_t v9 = v13;
                  uint64_t v10 = v13;
                }
              }
              while (v10 != v11);
              unint64_t v6 = v30;
              BOOL v7 = v31;
            }
            uint64_t v33 = 0;
            unint64_t v14 = (char *)v7 - (char *)v6;
            if ((unint64_t)((char *)v7 - (char *)v6) >= 0x11)
            {
              do
              {
                operator delete(*v6);
                BOOL v7 = v31;
                unint64_t v6 = v30 + 1;
                uint64_t v30 = v6;
                unint64_t v14 = (char *)v31 - (char *)v6;
              }
              while ((unint64_t)((char *)v31 - (char *)v6) > 0x10);
            }
          }
          unint64_t v15 = v14 >> 3;
          if (v15 == 1)
          {
            uint64_t v16 = 64;
            goto LABEL_23;
          }
          if (v15 == 2)
          {
            uint64_t v16 = 128;
LABEL_23:
            unint64_t v32 = v16;
          }
          if (v6 != v7)
          {
            do
            {
              long long v17 = *v6++;
              operator delete(v17);
            }
            while (v6 != v7);
            if (v31 != v30) {
              uint64_t v31 = (void **)((char *)v31 + (((char *)v30 - (char *)v31 + 7) & 0xFFFFFFFFFFFFFFF8));
            }
          }
          if (__p) {
            operator delete(__p);
          }
          uint64_t v18 = v28;
          if (v28)
          {
            do
            {
              uint64_t v19 = (void *)*v18;
              operator delete(v18);
              uint64_t v18 = v19;
            }
            while (v19);
          }
          unint64_t v20 = v27;
          unint64_t v27 = 0;
          if (v20) {
            operator delete(v20);
          }
          if (v25)
          {
            uint64_t v26 = v25;
            operator delete(v25);
          }
          if (!v5) {
            break;
          }
          if (*(_DWORD *)sub_9E6230((uint64_t)v34) == 2) {
            sub_96A660((uint64_t)a1, (uint64_t)v34);
          }
          sub_9E5780(v34);
        }
        sub_9467EC((uint64_t)&v39);
        long long v21 = v38;
        if (v38)
        {
          do
          {
            unint64_t v22 = (void *)*v21;
            operator delete(v21);
            long long v21 = v22;
          }
          while (v22);
        }
        uint64_t v23 = v37;
        uint64_t v37 = 0;
        if (v23) {
          operator delete(v23);
        }
        if (v35)
        {
          uint64_t v36 = v35;
          operator delete(v35);
        }
        v2 += 390;
      }
      while (v2 != v3);
    }
  }
}

void sub_96A61C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
}

void sub_96A638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
}

void sub_96A64C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
}

void sub_96A660(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_9E6230(a2);
  uint64_t v5 = v4;
  switch(*(_DWORD *)(v4 + 1008))
  {
    case 1:
      if (!*(unsigned char *)(v4 + 792))
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_2439078;
      }
      unint64_t v6 = *(void *)(v4 + 2232);
      if (v6 >= *(void *)(v4 + 2240))
      {
        *(void *)(v4 + 2232) = sub_96E26C((uint64_t *)(v4 + 2224), (long long *)(v4 + 116));
      }
      else
      {
        sub_96E42C(v4 + 2240, *(void *)(v4 + 2232), (long long *)(v4 + 116));
        *(void *)(v5 + 2232) = v6 + 696;
        *(void *)(v5 + 2232) = v6 + 696;
      }
      break;
    case 2:
      sub_96A85C(v4, v4);
      break;
    case 3:
      sub_96A990(a1, v4);
      break;
    case 4:
      sub_96AAAC(a1, v4);
      break;
    case 5:
      sub_96ABC8(v4, v4);
      break;
    default:
      break;
  }
  uint64_t v7 = *(void *)(v5 + 2224);
  uint64_t v8 = *(void *)(v5 + 2232);
  while (v7 != v8)
  {
    int v10 = *(_DWORD *)(v7 + 20);
    if (v10 != -1)
    {
      uint64_t v11 = *(void *)(a1 + 64);
      uint64_t v12 = **(void **)(v11 + 3896);
      if (v12)
      {
        if (sub_36F05C(v12, *(void *)(v7 + 12), v10, *(unsigned char *)(v11 + 3904)))
        {
          uint64_t v13 = *(void *)(a1 + 64);
          uint64_t v14 = *(void *)(v7 + 12);
          int v15 = *(_DWORD *)(v7 + 20);
          uint64_t v16 = **(void **)(v13 + 3896);
          int v17 = *(unsigned __int8 *)(v13 + 3904);
          if (v15 == -1) {
            uint64_t v9 = sub_36F0F0(v16, v14, v17 != 0);
          }
          else {
            uint64_t v9 = sub_36F05C(v16, v14, v15, v17 != 0);
          }
          *(unsigned char *)(v7 + 688) = *((unsigned char *)v9 + 64);
        }
      }
    }
    v7 += 696;
  }
  if (*(unsigned char *)(a1 + 24))
  {
    sub_96ACAC(a1, a2);
  }
}

double sub_96A85C(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 792)) {
    goto LABEL_9;
  }
  uint64_t v3 = (long long *)(a2 + 116);
  int v4 = *(_DWORD *)(a2 + 116);
  unint64_t v5 = *(void *)(a2 + 2232);
  if (v5 < *(void *)(a2 + 2240))
  {
    bzero(*(void **)(a2 + 2232), 0x2B8uLL);
    sub_96EF54(v5);
    *(void *)(a2 + 2232) = v5 + 696;
    *(void *)(a2 + 2232) = v5 + 696;
    unint64_t v6 = (char *)v5;
    int v7 = *(unsigned __int8 *)(a2 + 792);
    if (v4 != 0x7FFFFFFF) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  uint64_t v9 = sub_96ED90((long long **)(a2 + 2224));
  *(void *)(a2 + 2232) = v9;
  unint64_t v6 = v9 - 696;
  int v7 = *(unsigned __int8 *)(a2 + 792);
  if (v4 == 0x7FFFFFFF)
  {
LABEL_7:
    if (v7)
    {
      uint64_t v10 = *(void *)(a2 + 768);
      *(void *)&long long v8 = *(void *)(a2 + 776);
      *(void *)unint64_t v6 = *(unsigned int *)(a2 + 40) | ((unint64_t)*(unsigned int *)(a2 + 40) << 32);
      *((_DWORD *)v6 + 2) = 0;
      *(void *)(v6 + 12) = v10;
      *(void *)(v6 + 20) = v8;
      return *(double *)&v8;
    }
LABEL_9:
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
LABEL_4:
  if (!v7) {
    goto LABEL_9;
  }
  long long v8 = *v3;
  *(_OWORD *)(v6 + 12) = *(long long *)((char *)v3 + 12);
  *(_OWORD *)unint64_t v6 = v8;
  return *(double *)&v8;
}

void sub_96A988(_Unwind_Exception *a1)
{
  *(void *)(v1 + 2232) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_96A990(uint64_t result, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 792))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  if (*(void *)(result + 16) >= (unint64_t)(0x6DB6DB6DB6DB6DB7
                                                    * ((uint64_t)(*(void *)(a2 + 496) - *(void *)(a2 + 488)) >> 2)))
    uint64_t v3 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 496) - *(void *)(a2 + 488)) >> 2);
  else {
    uint64_t v3 = *(void *)(result + 16);
  }
  if (v3)
  {
    uint64_t v4 = 0;
    unint64_t v5 = *(void *)(a2 + 2232);
    do
    {
      while (v5 >= *(void *)(a2 + 2240))
      {
        double result = sub_96EA6C((uint64_t *)(a2 + 2224), (long long *)(*(void *)(a2 + 488) + v4));
        unint64_t v5 = result;
        *(void *)(a2 + 2232) = result;
        v4 += 28;
        if (!--v3) {
          return result;
        }
      }
      double result = sub_96EC2C(a2 + 2240, v5, (long long *)(*(void *)(a2 + 488) + v4));
      v5 += 696;
      *(void *)(a2 + 2232) = v5;
      *(void *)(a2 + 2232) = v5;
      v4 += 28;
      --v3;
    }
    while (v3);
  }
  return result;
}

void sub_96AAA4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 2232) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_96AAAC(uint64_t result, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 792))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  if (*(void *)(result + 8) >= (unint64_t)(0x6DB6DB6DB6DB6DB7
                                                   * ((uint64_t)(*(void *)(a2 + 496) - *(void *)(a2 + 488)) >> 2)))
    uint64_t v3 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 496) - *(void *)(a2 + 488)) >> 2);
  else {
    uint64_t v3 = *(void *)(result + 8);
  }
  if (v3)
  {
    uint64_t v4 = 0;
    unint64_t v5 = *(void *)(a2 + 2232);
    do
    {
      while (v5 >= *(void *)(a2 + 2240))
      {
        double result = sub_96EA6C((uint64_t *)(a2 + 2224), (long long *)(*(void *)(a2 + 488) + v4));
        unint64_t v5 = result;
        *(void *)(a2 + 2232) = result;
        v4 += 28;
        if (!--v3) {
          return result;
        }
      }
      double result = sub_96EC2C(a2 + 2240, v5, (long long *)(*(void *)(a2 + 488) + v4));
      v5 += 696;
      *(void *)(a2 + 2232) = v5;
      *(void *)(a2 + 2232) = v5;
      v4 += 28;
      --v3;
    }
    while (v3);
  }
  return result;
}

void sub_96ABC0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 2232) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_96ABC8(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 792))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  uint64_t v3 = *(void *)(a2 + 768);
  unint64_t v7 = *(unsigned int *)(a2 + 40) | ((unint64_t)*(unsigned int *)(a2 + 40) << 32);
  int v8 = 0;
  uint64_t v9 = v3;
  uint64_t v10 = *(void *)(a2 + 776);
  unint64_t v4 = *(void *)(a2 + 2232);
  if (v4 >= *(void *)(a2 + 2240))
  {
    uint64_t result = sub_96F010((uint64_t *)(a2 + 2224), (long long *)&v7);
    *(void *)(a2 + 2232) = result;
  }
  else
  {
    sub_96F1D0(a2 + 2240, *(void *)(a2 + 2232), (long long *)&v7);
    uint64_t result = v4 + 696;
    *(void *)(a2 + 2232) = v4 + 696;
    *(void *)(a2 + 2232) = v4 + 696;
  }
  return result;
}

void sub_96ACA4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 2232) = v2;
  _Unwind_Resume(a1);
}

void sub_96ACAC(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_96B754(a2);
  unint64_t v6 = *v5;
  unint64_t v7 = v5[1];
  if (*v5 == v7) {
    return;
  }
  int v74 = 0;
  long long v75 = 0uLL;
  if (*(unsigned char *)(a1 + 60))
  {
    unint64_t v8 = v4;
    uint64_t v9 = v5;
    uint64_t v10 = (int *)sub_94C794(*(void *)(a1 + 72), v4, 0, "transfer graph");
    uint64_t v11 = (unsigned __int16 *)((char *)v10 - *v10);
    if (*v11 >= 0x15u)
    {
      uint64_t v12 = v11[10];
      if (v12)
      {
        if (*(int *)((char *)v10 + v12 + *(unsigned int *)((char *)v10 + v12)))
        {
          uint64_t v13 = (int *)sub_49B168(*(void *)(a1 + 72), **v9, 0, "transfer");
          uint64_t v14 = *(void *)((char *)v13 + *(unsigned __int16 *)((char *)v13 - *v13 + 6));
          int v15 = (int *)sub_49B168(*(void *)(a1 + 72), *(v9[1] - 1), 0, "transfer");
          sub_96BD90(*(void *)(a1 + 72), v8, v14, *(void *)((char *)v15 + *(unsigned __int16 *)((char *)v15 - *v15 + 8)), &v65);
          goto LABEL_22;
        }
      }
    }
    if (*(unsigned char *)(a1 + 60)) {
      return;
    }
    unint64_t v6 = *v9;
    unint64_t v7 = v9[1];
  }
  if (v6 != v7)
  {
    while (1)
    {
      unint64_t v16 = *v6;
      int v17 = (int *)sub_49B168(*(void *)(a1 + 72), *v6, 0, "transfer");
      uint64_t v18 = (unsigned __int16 *)((char *)v17 - *v17);
      if (*v18 >= 0xFu)
      {
        uint64_t v19 = v18[7];
        if (v19)
        {
          if (*(int *)((char *)v17 + v19 + *(unsigned int *)((char *)v17 + v19))) {
            break;
          }
        }
      }
      if (++v6 == v7) {
        return;
      }
    }
    if (v16 <= 0xFFFFFFFEFFFFFFFFLL && v16)
    {
      unint64_t v20 = (int *)sub_49B168(*(void *)(a1 + 72), v16, 0, "transfer");
      long long v21 = (unsigned __int16 *)((char *)v20 - *v20);
      if (*v21 >= 0xFu && (uint64_t v22 = v21[7]) != 0) {
        uint64_t v23 = (char **)((char *)v20 + v22 + *(unsigned int *)((char *)v20 + v22));
      }
      else {
        uint64_t v23 = 0;
      }
      sub_96DAE0(v23, (uint64_t)&v65);
LABEL_22:
      uint64_t v24 = v65;
      int v74 = v65;
      long long v75 = *(_OWORD *)__p;
      unint64_t v25 = (unint64_t *)__p[0];
      if (v65 == __p[0])
      {
LABEL_97:
        if (v25)
        {
          for (uint64_t i = (unint64_t *)v75; i != v25; i -= 4)
          {
            long long v63 = (void *)*(i - 3);
            if (v63)
            {
              *(i - 2) = (unint64_t)v63;
              operator delete(v63);
            }
          }
          *(void *)&long long v75 = v25;
          operator delete(v25);
        }
        return;
      }
      uint64_t v26 = sub_9E6230(a2);
      if (!*(unsigned char *)(v26 + 792))
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_2439078;
      }
      unint64_t v27 = (unint64_t *)(v26 + 768);
      unint64_t v28 = sub_96C02C(*(void *)(a1 + 80), (unint64_t *)(v26 + 768), *(_DWORD *)(v26 + 780));
      unint64_t v29 = v28;
      if (v28 && v28 <= 0xFFFFFFFEFFFFFFFFLL)
      {
        uint64_t v30 = operator new(8uLL);
        uint64_t v71 = v30;
        *uint64_t v30 = v29;
        int v72 = v30 + 1;
        int v73 = v30 + 1;
      }
      else
      {
        uint64_t v31 = *(void *)(a1 + 80);
        unint64_t v32 = (int *)sub_369F8C(v31, *v27, 0, "trip");
        sub_96C198(v31, *(void *)((char *)v32 + *(unsigned __int16 *)((char *)v32 - *v32 + 6)), (uint64_t)&v71);
      }
      uint64_t v33 = v24;
      if (v71 != v72)
      {
        uint64_t v33 = v24;
        while (1)
        {
          unint64_t v34 = v71;
          while (*v34 != *(_DWORD *)v33 || v34[1] != *((_DWORD *)v33 + 1))
          {
            v34 += 2;
            if (v34 == v72)
            {
              unint64_t v34 = v72;
              break;
            }
          }
          if (v34 == v72) {
            break;
          }
          v33 += 4;
          if (v33 == v25) {
            goto LABEL_57;
          }
        }
      }
      if (v33 == v25) {
        goto LABEL_57;
      }
      char v35 = v33 + 4;
      if (v33 + 4 == v25)
      {
        uint64_t v36 = v33;
      }
      else
      {
        uint64_t v36 = v33;
        do
        {
          uint64_t v37 = v35;
          char v38 = v71;
          if (v71 != v72)
          {
            while (*v38 != *((_DWORD *)v33 + 8) || v38[1] != *((_DWORD *)v33 + 9))
            {
              v38 += 2;
              if (v38 == v72)
              {
                char v38 = v72;
                break;
              }
            }
          }
          if (v38 != v72)
          {
            *uint64_t v36 = *v37;
            uint64_t v39 = (void *)v36[1];
            if (v39)
            {
              v36[2] = (unint64_t)v39;
              operator delete(v39);
              v36[1] = 0;
              v36[2] = 0;
              unint64_t v36[3] = 0;
            }
            *(_OWORD *)(v36 + 1) = *(_OWORD *)(v33 + 5);
            unint64_t v36[3] = v33[7];
            v33[5] = 0;
            v33[6] = 0;
            v33[7] = 0;
            v36 += 4;
          }
          char v35 = v37 + 4;
          uint64_t v33 = v37;
        }
        while (v37 + 4 != v25);
        uint64_t v24 = v74;
        unint64_t v25 = (unint64_t *)v75;
      }
      if (v36 == v25)
      {
LABEL_57:
        uint64_t v36 = v25;
        if (v24 == v25)
        {
LABEL_94:
          if (v71)
          {
            int v72 = v71;
            operator delete(v71);
          }
          unint64_t v25 = v74;
          goto LABEL_97;
        }
      }
      else
      {
        while (v25 != v36)
        {
          long long v40 = (void *)*(v25 - 3);
          if (v40)
          {
            *(v25 - 2) = (unint64_t)v40;
            operator delete(v40);
          }
          v25 -= 4;
        }
        *(void *)&long long v75 = v36;
        uint64_t v24 = v74;
        if (v74 == v36) {
          goto LABEL_94;
        }
      }
      uint64_t v68 = 0;
      unint64_t v69 = 0;
      unint64_t v70 = 0;
      do
      {
        sub_96C284(a1, v24, (uint64_t)&v65);
        int v41 = v69;
        if ((unint64_t)v69 >= v70)
        {
          uint64_t v47 = sub_96F334((uint64_t *)&v68, &v65);
        }
        else
        {
          long long v42 = v65;
          v69[1] = 0;
          char *v41 = v42;
          void v41[2] = 0;
          v41[3] = 0;
          long long v43 = __p[0];
          int64_t v44 = (char *)__p[1] - (char *)__p[0];
          if (__p[1] != __p[0])
          {
            if (v44 < 0) {
              sub_2E00();
            }
            char v45 = (char *)operator new((char *)__p[1] - (char *)__p[0]);
            v41[1] = (unint64_t *)v45;
            void v41[2] = (unint64_t *)v45;
            unint64_t v46 = &v45[8 * (v44 >> 3)];
            v41[3] = (unint64_t *)v46;
            memcpy(v45, v43, v44);
            void v41[2] = (unint64_t *)v46;
          }
          sub_4F58AC((uint64_t)(v41 + 4), (uint64_t)v67);
          uint64_t v47 = (uint64_t)(v41 + 24);
        }
        unint64_t v69 = (unint64_t **)v47;
        sub_4D4B58((uint64_t)v67);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        v24 += 4;
      }
      while (v24 != v36);
      uint64_t v48 = (uint64_t)v68;
      uint64_t v49 = (uint64_t *)v69;
      if (v69 == v68) {
        sub_66748();
      }
      if ((char *)v69 - (char *)v68 == 192 || v68 + 24 == v69)
      {
LABEL_83:
        uint64_t v56 = sub_9E6230(a2);
        uint64_t v57 = v56;
        *(void *)(v56 + 2248) = *(void *)v48;
        if (v56 + 2248 != v48) {
          sub_326C0((void *)(v56 + 2256), *(char **)(v48 + 8), *(char **)(v48 + 16), (uint64_t)(*(void *)(v48 + 16) - *(void *)(v48 + 8)) >> 3);
        }
        sub_52FD00(v57 + 2280, v48 + 32);
      }
      else
      {
        uint64_t v50 = 192;
        while (1)
        {
          unint64_t v51 = (void *)(v48 + v50);
          if (*(void *)(v48 + v50) != *(void *)v48) {
            break;
          }
          uint64_t v52 = (const void *)v51[1];
          size_t v53 = v51[2] - (void)v52;
          __int16 v54 = *(const void **)(v48 + 8);
          if (v53 != *(void *)(v48 + 16) - (void)v54) {
            break;
          }
          if (memcmp(v52, v54, v53)) {
            break;
          }
          uint64_t v55 = v51 + 4;
          if ((sub_5F30F8(v55, (void *)(v48 + 32)) & 1) == 0) {
            break;
          }
          v50 += 192;
          if (v55 + 20 == v49) {
            goto LABEL_83;
          }
        }
      }
      uint64_t v58 = (uint64_t)v68;
      if (v68)
      {
        uint64_t v59 = v69;
        uint64_t v60 = v68;
        if (v69 != v68)
        {
          do
          {
            sub_4D4B58((uint64_t)(v59 - 20));
            uint64_t v61 = *(v59 - 23);
            if (v61)
            {
              *(v59 - 22) = v61;
              operator delete(v61);
            }
            v59 -= 24;
          }
          while (v59 != (unint64_t **)v58);
          uint64_t v60 = v68;
        }
        unint64_t v69 = (unint64_t **)v58;
        operator delete(v60);
      }
      goto LABEL_94;
    }
  }
}

void sub_96B3D4(_Unwind_Exception *a1)
{
  sub_38358((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_96B3E8(_Unwind_Exception *a1)
{
  sub_96C810((void **)(v1 - 160));
  uint64_t v3 = *(void **)(v1 - 136);
  if (v3)
  {
    *(void *)(v1 - 128) = v3;
    operator delete(v3);
    sub_38358((void **)(v1 - 112));
    _Unwind_Resume(a1);
  }
  sub_38358((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_96B508(unint64_t a1@<X0>, unint64_t a2@<X1>, char **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (a2)
  {
    unint64_t v4 = 0;
    unint64_t v5 = 0;
    unint64_t v6 = 0;
    unint64_t v7 = 0;
    unint64_t v8 = a1 / a2;
    unint64_t v9 = a1 % a2;
    unint64_t v28 = a1 / a2;
    unint64_t v29 = a2;
    unint64_t v27 = a1 % a2;
    while (1)
    {
      while (1)
      {
        uint64_t v10 = v9 >= v7 ? v7 : v9;
        unint64_t v11 = v10 + v7 * v8;
        if (v6 >= v5) {
          break;
        }
        *(void *)unint64_t v6 = v11;
        v6 += 8;
        a3[1] = v6;
        if (++v7 == a2) {
          return;
        }
      }
      uint64_t v12 = (v6 - v4) >> 3;
      unint64_t v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 61) {
        sub_2E00();
      }
      if ((v5 - v4) >> 2 > v13) {
        unint64_t v13 = (v5 - v4) >> 2;
      }
      if ((unint64_t)(v5 - v4) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v13;
      }
      if (v14)
      {
        if (v14 >> 61) {
          sub_188D718();
        }
        int v15 = operator new(8 * v14);
        unint64_t v16 = &v15[8 * v12];
        *(void *)unint64_t v16 = v11;
        uint64_t v17 = (uint64_t)(v16 + 8);
        if (v6 == v4) {
          goto LABEL_22;
        }
      }
      else
      {
        int v15 = 0;
        unint64_t v16 = (char *)(8 * v12);
        *(void *)(8 * v12) = v11;
        uint64_t v17 = 8 * v12 + 8;
        if (v6 == v4) {
          goto LABEL_22;
        }
      }
      unint64_t v18 = v6 - 8 - v4;
      if (v18 < 0x168)
      {
        uint64_t v19 = v6;
        goto LABEL_21;
      }
      if (&v15[v6 - v4 - 8 - (v18 & 0xFFFFFFFFFFFFFFF8)] > &v15[v6 - v4 - 8]) {
        break;
      }
      if (&v6[-(v18 & 0xFFFFFFFFFFFFFFF8) - 8] > v6 - 8)
      {
        uint64_t v19 = v6;
        goto LABEL_21;
      }
      if ((unint64_t)(v4 - v15) < 0x20)
      {
        uint64_t v19 = v6;
        goto LABEL_21;
      }
      uint64_t v21 = (v18 >> 3) + 1;
      uint64_t v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v19 = &v6[-v22];
      v16 -= v22;
      uint64_t v23 = &v15[8 * v12 - 16];
      uint64_t v24 = v6 - 16;
      uint64_t v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v26 = *(_OWORD *)v24;
        *(v23 - 1) = *((_OWORD *)v24 - 1);
        _OWORD *v23 = v26;
        v23 -= 2;
        v24 -= 32;
        v25 -= 4;
      }
      while (v25);
      if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_21;
      }
LABEL_22:
      unint64_t v5 = &v15[8 * v14];
      *a3 = v16;
      a3[1] = (char *)v17;
      a3[2] = v5;
      if (v4) {
        operator delete(v4);
      }
      unint64_t v4 = v16;
      unint64_t v8 = v28;
      a2 = v29;
      unint64_t v9 = v27;
      a3[1] = (char *)v17;
      ++v7;
      unint64_t v6 = (char *)v17;
      if (v7 == v29) {
        return;
      }
    }
    uint64_t v19 = v6;
    do
    {
LABEL_21:
      uint64_t v20 = *((void *)v19 - 1);
      v19 -= 8;
      *((void *)v16 - 1) = v20;
      v16 -= 8;
    }
    while (v19 != v4);
    goto LABEL_22;
  }
}

void sub_96B734(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_96B754(uint64_t a1)
{
  sub_9E5A94(a1, 0xFFFFFFFFFFFFFFFFLL, (char **)&__p);
  uint64_t v1 = (_DWORD **)__p;
  if (__p != v6)
  {
    while ((**v1 & 0xFFFFFFFD) != 5)
    {
      if (++v1 == v6) {
        goto LABEL_14;
      }
    }
  }
  if (v1 != v6)
  {
    uint64_t v2 = *v1;
    if (*v2 == 7)
    {
      if (*((unsigned char *)v2 + 952) && *((void *)v2 + 115) != *((void *)v2 + 116))
      {
        unint64_t v3 = *((void *)v2 + 118);
        goto LABEL_16;
      }
    }
    else if (*v2 == 5 && *((unsigned char *)v2 + 1000) && *((void *)v2 + 121) != *((void *)v2 + 122))
    {
      unint64_t v3 = *((void *)v2 + 124);
      goto LABEL_16;
    }
  }
LABEL_14:
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_25DACD8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_25DACD8))
  {
    qword_25DADA8 = 0;
    unk_25DADB0 = 0;
    qword_25DADA0 = 0;
    __cxa_guard_release(&qword_25DACD8);
  }
  unint64_t v3 = 0xFFFFFFFF00000000;
LABEL_16:
  if (__p)
  {
    unint64_t v6 = (_DWORD **)__p;
    operator delete(__p);
  }
  return v3;
}

BOOL sub_96B870(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v4 = a1;
  if (a4 == 2 && a3[1] - *a3 == 8) {
    return 0;
  }
  BOOL v5 = 1;
  if ((a4 & 0xFFFFFFFFFFFFFFFELL) == 2)
  {
    uint64_t v6 = a2[1] - *a2;
    if (v6 != 2)
    {
      if ((unint64_t)(v6 >> 1) <= 1) {
        uint64_t v7 = 1;
      }
      else {
        uint64_t v7 = v6 >> 1;
      }
      if ((unint64_t)v6 < 4)
      {
        unint64_t v8 = 0;
        unint64_t v9 = 0;
        uint64_t v10 = 0;
        uint64_t v11 = 1;
        int64_t v12 = 0;
        uint64_t v13 = 0;
        unint64_t v14 = 1;
        goto LABEL_11;
      }
      uint64_t v59 = v7;
      unint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v17 = 0;
      uint64_t v11 = 1;
      uint64_t v20 = 1;
      uint64_t v60 = a2;
      while (1)
      {
        if (*(unsigned __int16 *)(*a2 + 2 * v20 - 2) + 1 == *(unsigned __int16 *)(*a2 + 2 * v20))
        {
          ++v11;
        }
        else
        {
          if (v9 >= v10)
          {
            uint64_t v21 = ((char *)v9 - (char *)v17) >> 3;
            unint64_t v22 = v21 + 1;
            if ((unint64_t)(v21 + 1) >> 61) {
              sub_2E00();
            }
            if (((char *)v10 - (char *)v17) >> 2 > v22) {
              unint64_t v22 = ((char *)v10 - (char *)v17) >> 2;
            }
            if ((unint64_t)((char *)v10 - (char *)v17) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v23 = v22;
            }
            if (v23)
            {
              if (v23 >> 61) {
                sub_188D718();
              }
              uint64_t v24 = operator new(8 * v23);
              uint64_t v25 = (uint64_t *)&v24[8 * v21];
              *uint64_t v25 = v11;
              uint64_t v26 = (uint64_t)(v25 + 1);
              if (v9 == (uint64_t *)v17) {
                goto LABEL_40;
              }
LABEL_37:
              unint64_t v27 = (char *)(v9 - 1) - (char *)v17;
              if (v27 < 0x168)
              {
                unint64_t v28 = v9;
                goto LABEL_39;
              }
              if (&v24[(char *)v9 - (char *)v17 - 8 - (v27 & 0xFFFFFFFFFFFFFFF8)] > &v24[(char *)v9 - (char *)v17 - 8])
              {
                unint64_t v28 = v9;
                goto LABEL_39;
              }
              if ((uint64_t *)((char *)v9 - (v27 & 0xFFFFFFFFFFFFFFF8) - 8) > v9 - 1)
              {
                unint64_t v28 = v9;
                goto LABEL_39;
              }
              if ((unint64_t)((char *)v17 - v24) < 0x20)
              {
                unint64_t v28 = v9;
                goto LABEL_39;
              }
              uint64_t v30 = (v27 >> 3) + 1;
              uint64_t v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
              unint64_t v28 = &v9[v31 / 0xFFFFFFFFFFFFFFF8];
              uint64_t v25 = (uint64_t *)((char *)v25 - v31);
              unint64_t v32 = &v24[8 * v21 - 16];
              uint64_t v33 = v9 - 2;
              uint64_t v34 = v30 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v35 = *(_OWORD *)v33;
                *(v32 - 1) = *((_OWORD *)v33 - 1);
                _OWORD *v32 = v35;
                v32 -= 2;
                v33 -= 4;
                v34 -= 4;
              }
              while (v34);
              if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
              {
                do
                {
LABEL_39:
                  uint64_t v29 = *--v28;
                  *--uint64_t v25 = v29;
                }
                while (v28 != (uint64_t *)v17);
              }
            }
            else
            {
              uint64_t v24 = 0;
              uint64_t v25 = (uint64_t *)(8 * v21);
              *(void *)(8 * v21) = v11;
              uint64_t v26 = 8 * v21 + 8;
              if (v9 != (uint64_t *)v17) {
                goto LABEL_37;
              }
            }
LABEL_40:
            uint64_t v10 = (uint64_t *)&v24[8 * v23];
            if (v17) {
              operator delete(v17);
            }
            unint64_t v9 = (uint64_t *)v26;
            uint64_t v17 = (uint64x2_t *)v25;
            uint64_t v11 = 1;
            uint64_t v7 = v59;
            a2 = v60;
            goto LABEL_22;
          }
          *v9++ = v11;
          uint64_t v11 = 1;
        }
LABEL_22:
        if (++v20 == v7)
        {
          if (v9 < v10)
          {
            *unint64_t v9 = v11;
            uint64_t v18 = (uint64_t)(v9 + 1);
            uint64_t v4 = a1;
            goto LABEL_68;
          }
          unint64_t v8 = (uint64_t *)v17;
          uint64_t v4 = a1;
          int64_t v12 = (char *)v9 - (char *)v17;
          uint64_t v13 = ((char *)v9 - (char *)v17) >> 3;
          unint64_t v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 61) {
            sub_2E00();
          }
LABEL_11:
          if (((char *)v10 - (char *)v8) >> 2 > v14) {
            unint64_t v14 = ((char *)v10 - (char *)v8) >> 2;
          }
          if ((unint64_t)((char *)v10 - (char *)v8) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v15 = v14;
          }
          if (v15)
          {
            if (v15 >> 61) {
              sub_188D718();
            }
            unint64_t v16 = operator new(8 * v15);
            uint64_t v17 = (uint64x2_t *)&v16[8 * v13];
            v17->i64[0] = v11;
            uint64_t v18 = (uint64_t)&v17->i64[1];
            int64_t v19 = (char *)v9 - (char *)v8;
            if (v9 == v8) {
              goto LABEL_66;
            }
LABEL_56:
            unint64_t v36 = v19 - 8;
            if (v36 < 0x58)
            {
              uint64_t v37 = v9;
              goto LABEL_65;
            }
            if ((unint64_t)((char *)v9 - v16 - v12) < 0x20)
            {
              uint64_t v37 = v9;
              goto LABEL_65;
            }
            uint64_t v38 = (v36 >> 3) + 1;
            uint64_t v39 = 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v37 = &v9[v39 / 0xFFFFFFFFFFFFFFF8];
            uint64_t v17 = (uint64x2_t *)((char *)v17 - v39);
            long long v40 = &v16[8 * v13 - 16];
            int v41 = v9 - 2;
            uint64_t v42 = v38 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v43 = *(_OWORD *)v41;
              *(v40 - 1) = *((_OWORD *)v41 - 1);
              _OWORD *v40 = v43;
              v40 -= 2;
              v41 -= 4;
              v42 -= 4;
            }
            while (v42);
            if (v38 != (v38 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_65:
                uint64_t v44 = *--v37;
                v17[-1].i64[1] = v44;
                uint64_t v17 = (uint64x2_t *)((char *)v17 - 8);
              }
              while (v37 != v8);
            }
          }
          else
          {
            unint64_t v16 = 0;
            uint64_t v17 = (uint64x2_t *)(8 * v13);
            *(void *)(8 * v13) = v11;
            uint64_t v18 = 8 * v13 + 8;
            int64_t v19 = (char *)v9 - (char *)v8;
            if (v9 != v8) {
              goto LABEL_56;
            }
          }
LABEL_66:
          if (v8) {
            operator delete(v8);
          }
LABEL_68:
          if (v17 == (uint64x2_t *)v18)
          {
            uint64_t v48 = 0;
          }
          else
          {
            char v45 = (uint64_t *)v17;
            do
            {
              if (*(void *)(v4 + 40) <= (unint64_t)*v45)
              {
                BOOL v5 = 0;
                if (v17) {
                  goto LABEL_84;
                }
                return v5;
              }
              ++v45;
            }
            while (v45 != (uint64_t *)v18);
            unint64_t v46 = *(void *)(v4 + 48);
            unint64_t v47 = v18 - (void)v17 - 8;
            if (v47 >= 0x18)
            {
              uint64_t v50 = (v47 >> 3) + 1;
              uint64_t v49 = (unint64_t *)v17 + (v50 & 0x3FFFFFFFFFFFFFFCLL);
              uint64x2_t v51 = (uint64x2_t)vdupq_n_s64(v46);
              uint64_t v52 = v17 + 1;
              int64x2_t v53 = 0uLL;
              uint64_t v54 = v50 & 0x3FFFFFFFFFFFFFFCLL;
              int64x2_t v55 = 0uLL;
              do
              {
                int64x2_t v53 = vsubq_s64(v53, (int64x2_t)vcgeq_u64(v52[-1], v51));
                int64x2_t v55 = vsubq_s64(v55, (int64x2_t)vcgeq_u64(*v52, v51));
                v52 += 2;
                v54 -= 4;
              }
              while (v54);
              uint64_t v48 = vaddvq_s64(vaddq_s64(v55, v53));
              if (v50 == (v50 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_83;
              }
            }
            else
            {
              uint64_t v48 = 0;
              uint64_t v49 = (unint64_t *)v17;
            }
            do
            {
              unint64_t v56 = *v49++;
              if (v46 <= v56) {
                ++v48;
              }
            }
            while (v49 != (unint64_t *)v18);
          }
LABEL_83:
          BOOL v5 = v48 < *(int *)(v4 + 56);
          if (v17) {
LABEL_84:
          }
            operator delete(v17);
          return v5;
        }
      }
    }
  }
  return v5;
}

void sub_96BD5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_96BD90@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t result = sub_94C794(a1, a2, 0, "transfer graph");
  unint64_t v9 = (unsigned __int16 *)(result - *(int *)result);
  if (*v9 < 0x15u) {
    goto LABEL_51;
  }
  uint64_t v10 = v9[10];
  if (!v9[10]) {
    goto LABEL_51;
  }
  uint64_t v11 = *(unsigned int *)(result + v10);
  int64_t v12 = (unsigned int *)(result + v10 + v11);
  uint64_t v13 = *v12;
  if (!v13) {
    goto LABEL_51;
  }
  uint64_t v14 = v9[3];
  uint64_t v15 = 4 * v13;
  unint64_t v16 = 0;
  if (v14)
  {
    uint64_t v17 = result + v14 + *(unsigned int *)(result + v14);
    uint64_t v18 = v17 + 4;
    uint64_t v19 = result + v10 + v11;
    while (1)
    {
      uint64_t v20 = v12[v16 / 4 + 1];
      uint64_t v21 = v20 - *(int *)((char *)&v12[v16 / 4 + 1] + v20);
      uint64_t v22 = v19 + v16 + v21;
      unsigned int v23 = *(unsigned __int16 *)(v22 + 4);
      if (v23 <= 4)
      {
        uint64_t v29 = 0;
        int v26 = *(_DWORD *)(v17 + 4);
        int v27 = *(_DWORD *)(v17 + 8);
      }
      else
      {
        uint64_t v24 = *(unsigned __int16 *)(v22 + 8);
        if (v24) {
          uint64_t v24 = 8 * *(unsigned __int16 *)(v19 + v16 + v20 + v24 + 4);
        }
        uint64_t v25 = v18 + v24;
        int v26 = *(_DWORD *)(v18 + v24);
        int v27 = *(_DWORD *)(v25 + 4);
        if (v23 >= 7 && (uint64_t v28 = *(unsigned __int16 *)(v19 + v16 + v21 + 10)) != 0) {
          uint64_t v29 = 8 * *(unsigned __int16 *)(v19 + v16 + v20 + v28 + 4);
        }
        else {
          uint64_t v29 = 0;
        }
      }
      uint64_t v30 = (int *)(v18 + v29);
      int v31 = *v30;
      uint64_t result = v30[1];
      BOOL v32 = v26 == a3 && v27 == HIDWORD(a3);
      BOOL v33 = v32 && v31 == a4;
      if (v33 && result == HIDWORD(a4)) {
        break;
      }
      v16 += 4;
      if (v15 == v16) {
        goto LABEL_51;
      }
    }
  }
  else
  {
    uint64_t v35 = result + v10 + v11;
    while (1)
    {
      uint64_t v36 = v12[v16 / 4 + 1];
      uint64_t v37 = v36 - *(int *)((char *)&v12[v16 / 4 + 1] + v36);
      uint64_t v38 = v35 + v16 + v37;
      unsigned int v39 = *(unsigned __int16 *)(v38 + 4);
      if (v39 <= 4)
      {
        uint64_t v45 = 0;
        int v42 = 16777228;
        int v43 = -2147483646;
      }
      else
      {
        uint64_t v40 = *(unsigned __int16 *)(v38 + 8);
        if (v40) {
          uint64_t v40 = 8 * *(unsigned __int16 *)(v35 + v16 + v36 + v40 + 4);
        }
        uint64_t v41 = v40 + 4;
        int v42 = *(_DWORD *)(v40 + 4);
        int v43 = *(_DWORD *)(v41 + 4);
        if (v39 >= 7 && (uint64_t v44 = *(unsigned __int16 *)(v35 + v16 + v37 + 10)) != 0) {
          uint64_t v45 = 8 * *(unsigned __int16 *)(v35 + v16 + v36 + v44 + 4);
        }
        else {
          uint64_t v45 = 0;
        }
      }
      unint64_t v46 = (int *)(v45 + 4);
      int v47 = *v46;
      uint64_t result = v46[1];
      BOOL v48 = v42 == a3 && v43 == HIDWORD(a3);
      BOOL v49 = v48 && v47 == a4;
      if (v49 && result == HIDWORD(a4)) {
        break;
      }
      v16 += 4;
      if (v15 == v16) {
        goto LABEL_51;
      }
    }
  }
  uint64x2_t v51 = &v12[v16 / 4 + 1];
  if (v51 != &v12[(unint64_t)v15 / 4 + 1])
  {
    uint64_t v52 = (int *)((char *)v51 + *v51);
    int64x2_t v53 = (unsigned __int16 *)((char *)v52 - *v52);
    if (*v53 >= 9u && (uint64_t v54 = v53[4]) != 0) {
      int64x2_t v55 = (char **)((char *)v52 + v54 + *(unsigned int *)((char *)v52 + v54));
    }
    else {
      int64x2_t v55 = 0;
    }
    return (uint64_t)sub_96D238(v55, (uint64_t)a5);
  }
  else
  {
LABEL_51:
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
  }
  return result;
}

uint64_t sub_96C02C(uint64_t a1, unint64_t *a2, int a3)
{
  uint64_t v6 = (int *)sub_369F8C(a1, *a2, 0, "trip");
  uint64_t v7 = (unsigned __int16 *)((char *)v6 - *v6);
  if (*v7 >= 0x2Du && (unsigned __int16 v8 = v7[22]) != 0) {
    unint64_t v9 = *(void *)((char *)v6 + v8);
  }
  else {
    unint64_t v9 = 0xFFFFFFFF00000000;
  }
  unint64_t v10 = *a2;
  uint64_t v11 = sub_369B60(a1, v10, 0);
  int64_t v12 = &v11[-*(int *)v11];
  if (*(unsigned __int16 *)v12 < 5u)
  {
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v13 = *((unsigned __int16 *)v12 + 2);
    if (*((_WORD *)v12 + 2)) {
      v13 += (uint64_t)&v11[*(unsigned int *)&v11[v13]];
    }
  }
  uint64_t v14 = (int *)(v13 + 4 * HIDWORD(v10) + 4 + *(unsigned int *)(v13 + 4 * HIDWORD(v10) + 4));
  uint64_t v15 = (unsigned __int16 *)((char *)v14 - *v14);
  if (*v15 < 0x29u) {
    goto LABEL_19;
  }
  uint64_t v16 = v15[20];
  if (!v16) {
    goto LABEL_19;
  }
  uint64_t v17 = *(unsigned int *)((char *)&v14[a3 + 1] + v16 + *(unsigned int *)((char *)v14 + v16));
  if (v17 == -1) {
    goto LABEL_19;
  }
  uint64_t v18 = (uint64_t)&v11[4 * v17 + *((unsigned __int16 *)v12 + 10) + *(unsigned int *)&v11[*((unsigned __int16 *)v12 + 10)]];
  uint64_t v19 = (int *)(v18 + 4 + *(unsigned int *)(v18 + 4));
  uint64_t v20 = (unsigned __int16 *)((char *)v19 - *v19);
  if (*v20 < 9u) {
    goto LABEL_19;
  }
  unsigned __int16 v21 = v20[4];
  if (!v21) {
    goto LABEL_19;
  }
  unint64_t v23 = *(void *)((char *)v19 + v21);
  unint64_t v22 = HIDWORD(v23);
  unint64_t v23 = v23;
  if (!v23 || v22 == 0xFFFFFFFF)
  {
LABEL_19:
    unint64_t v22 = HIDWORD(v9);
    unint64_t v23 = v9;
  }
  return v23 | (v22 << 32);
}

int *sub_96C198@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = (int *)sub_8DFD1C(a1, a2, 0, "line");
  uint64_t v6 = (unsigned __int16 *)((char *)result - *result);
  if (*v6 >= 0x4Bu && (uint64_t v7 = v6[37]) != 0)
  {
    unsigned __int16 v8 = (unsigned int *)((char *)result + v7);
    uint64_t v9 = *v8;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    uint64_t v11 = (uint64_t *)((char *)v8 + v9 + 4);
    uint64_t v10 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v14 = (void **)a3;
    if (v10)
    {
      uint64_t v12 = 8 * v10;
      do
      {
        if (!*(unsigned char *)(a1 + 3888) || (uint64_t result = (int *)sub_2AB7E4(*(void *)(a1 + 3872)), result))
        {
          uint64_t v13 = *v11;
          uint64_t result = (int *)sub_2A98DC(&v14, &v13);
        }
        ++v11;
        v12 -= 8;
      }
      while (v12);
    }
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

void sub_96C268(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_96C284(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (int *)sub_96DD18(*(void *)(a1 + 80), *a2, 0, "vehicle configuration");
  uint64_t v7 = (unsigned __int16 *)((char *)v6 - *v6);
  if (*v7 < 7u
    || (uint64_t v8 = v7[3]) == 0
    || (unint64_t v9 = *(unsigned __int16 *)((char *)v6 + v8), v9 <= 1)
    || v9 == (uint64_t)(a2[2] - a2[1]) >> 1)
  {
    *(_OWORD *)(a3 + 160) = 0u;
    *(_OWORD *)(a3 + 176) = 0u;
    *(_OWORD *)(a3 + 128) = 0u;
    *(_OWORD *)(a3 + 144) = 0u;
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)(a3 + 112) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    sub_5F3B34(a3 + 32);
  }
  else
  {
    if (*(void *)(a1 + 32) >= v9) {
      unint64_t v10 = v9;
    }
    else {
      unint64_t v10 = *(void *)(a1 + 32);
    }
    sub_96B508(v9, v10, &v70);
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    uint64_t v61 = a3 + 32;
    sub_5F3B34(a3 + 32);
    uint64_t v64 = (unsigned __int16 **)(a2 + 1);
    uint64_t v65 = a1;
    uint64_t v62 = v10;
    long long v63 = a2;
    *(void *)a3 = v10;
    uint64_t v12 = (unsigned __int16 *)a2[1];
    uint64_t v11 = (unsigned __int16 *)a2[2];
    if (v12 != v11)
    {
      int v66 = (void **)(a3 + 8);
      while (1)
      {
        if (v71 == v70)
        {
          uint64_t v15 = v70;
        }
        else
        {
          unint64_t v14 = (v71 - v70) >> 3;
          uint64_t v15 = v70;
          do
          {
            unint64_t v16 = v14 >> 1;
            uint64_t v17 = (unint64_t *)&v15[8 * (v14 >> 1)];
            unint64_t v19 = *v17;
            uint64_t v18 = (char *)(v17 + 1);
            v14 += ~(v14 >> 1);
            if (v19 > *v12) {
              unint64_t v14 = v16;
            }
            else {
              uint64_t v15 = v18;
            }
          }
          while (v14);
        }
        uint64_t v20 = v15 == v70 ? 0 : -1;
        uint64_t v21 = (&v15[8 * v20] - v70) >> 3;
        unint64_t v23 = *(uint64_t **)(a3 + 16);
        unint64_t v22 = *(void *)(a3 + 24);
        if ((unint64_t)v23 >= v22) {
          break;
        }
        uint64_t *v23 = v21;
        uint64_t v13 = (uint64_t)(v23 + 1);
LABEL_13:
        *(void *)(a3 + 16) = v13;
        if (++v12 == v11) {
          goto LABEL_45;
        }
      }
      uint64_t v24 = (uint64_t *)*v66;
      uint64_t v25 = (char *)v23 - (unsigned char *)*v66;
      uint64_t v26 = v25 >> 3;
      unint64_t v27 = (v25 >> 3) + 1;
      if (v27 >> 61) {
        sub_2E00();
      }
      uint64_t v28 = v22 - (void)v24;
      if (v28 >> 2 > v27) {
        unint64_t v27 = v28 >> 2;
      }
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v29 = v27;
      }
      if (v29)
      {
        if (v29 >> 61) {
          sub_188D718();
        }
        uint64_t v30 = operator new(8 * v29);
        int v31 = (uint64_t *)&v30[8 * v26];
        *int v31 = v21;
        uint64_t v13 = (uint64_t)(v31 + 1);
        if (v23 == v24) {
          goto LABEL_43;
        }
      }
      else
      {
        uint64_t v30 = 0;
        int v31 = (uint64_t *)(8 * v26);
        *(void *)(8 * v26) = v21;
        uint64_t v13 = 8 * v26 + 8;
        if (v23 == v24)
        {
LABEL_43:
          *(void *)(a3 + 8) = v31;
          *(void *)(a3 + 16) = v13;
          *(void *)(a3 + 24) = &v30[8 * v29];
          if (v24) {
            operator delete(v24);
          }
          goto LABEL_13;
        }
      }
      unint64_t v32 = (char *)(v23 - 1) - (char *)v24;
      if (v32 < 0x58) {
        goto LABEL_87;
      }
      if ((unint64_t)((char *)v23 - &v30[v25]) < 0x20) {
        goto LABEL_87;
      }
      uint64_t v33 = (v32 >> 3) + 1;
      uint64_t v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v35 = &v23[v34 / 0xFFFFFFFFFFFFFFF8];
      int v31 = (uint64_t *)((char *)v31 - v34);
      uint64_t v36 = &v30[8 * v26 - 16];
      uint64_t v37 = v23 - 2;
      uint64_t v38 = v33 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v39 = *(_OWORD *)v37;
        *(v36 - 1) = *((_OWORD *)v37 - 1);
        *uint64_t v36 = v39;
        v36 -= 2;
        v37 -= 4;
        v38 -= 4;
      }
      while (v38);
      unint64_t v23 = v35;
      if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_87:
        do
        {
          uint64_t v40 = *--v23;
          *--int v31 = v40;
        }
        while (v23 != v24);
      }
      goto LABEL_43;
    }
LABEL_45:
    std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
    int v42 = *(char **)(a3 + 8);
    uint64_t v41 = *(char **)(a3 + 16);
    if (v42 != v41)
    {
      int v43 = v42 + 8;
      while (v43 != v41)
      {
        uint64_t v44 = *((void *)v43 - 1);
        uint64_t v45 = *(void *)v43;
        v43 += 8;
        if (v44 == v45)
        {
          unint64_t v46 = v43 - 16;
          while (v43 != v41)
          {
            uint64_t v47 = v44;
            uint64_t v44 = *(void *)v43;
            if (v47 != *(void *)v43)
            {
              *((void *)v46 + 1) = v44;
              v46 += 8;
            }
            v43 += 8;
          }
          BOOL v48 = v46 + 8;
          int64_t v49 = v41 - (v46 + 8);
          if (v41 != v46 + 8)
          {
            if (v41 != (char *)v48 + v49) {
              memmove(v46 + 8, (char *)v48 + v49, 0);
            }
            *(void *)(a3 + 16) = v48;
          }
          break;
        }
      }
    }
    if (sub_96B870(v65, v64, (void *)(a3 + 8), v62))
    {
      uint64_t v50 = (int *)sub_96DD18(*(void *)(v65 + 80), *v63, 0, "vehicle configuration");
      uint64x2_t v51 = (unsigned __int16 *)((char *)v50 - *v50);
      if (*v51 >= 9u && (uint64_t v52 = v51[4]) != 0) {
        int64x2_t v53 = (char **)((char *)v50 + v52 + *(unsigned int *)((char *)v50 + v52));
      }
      else {
        int64x2_t v53 = 0;
      }
      sub_8F48DC(v53, (void (*)(void **__return_ptr, char *))sub_4A0694, (uint64_t)&v68);
      sub_96C88C(v65, v64, (uint64_t *)&v68, (uint64_t)v67);
      sub_4D90B4(v61, (uint64_t)v67);
      sub_4D4B58((uint64_t)v67);
      uint64_t v54 = (uint64_t)v68;
      if (v68)
      {
        uint64_t v55 = v69;
        unint64_t v56 = v68;
        if ((void *)v69 != v68)
        {
          do
          {
            uint64_t v57 = *(void *)(v55 - 24);
            if (v57)
            {
              uint64_t v58 = *(void *)(v55 - 16);
              uint64_t v59 = *(void **)(v55 - 24);
              if (v58 != v57)
              {
                do
                {
                  if (*(char *)(v58 - 1) < 0) {
                    operator delete(*(void **)(v58 - 24));
                  }
                  v58 -= 32;
                }
                while (v58 != v57);
                uint64_t v59 = *(void **)(v55 - 24);
              }
              *(void *)(v55 - 16) = v57;
              operator delete(v59);
            }
            uint64_t v60 = (void **)(v55 - 64);
            if (*(char *)(v55 - 41) < 0) {
              operator delete(*v60);
            }
            v55 -= 64;
          }
          while (v60 != (void **)v54);
          unint64_t v56 = v68;
        }
        uint64_t v69 = v54;
        operator delete(v56);
      }
    }
    else
    {
      sub_96CCEC(v65, a3 + 8, v62, (uint64_t)v67);
      sub_4D90B4(v61, (uint64_t)v67);
      sub_4D4B58((uint64_t)v67);
    }
    if (v70)
    {
      uint64_t v71 = v70;
      operator delete(v70);
    }
  }
}

void sub_96C79C(_Unwind_Exception *a1)
{
  sub_8F36A0((void ***)(v2 - 136));
  sub_929BDC(v1);
  uint64_t v4 = *(void **)(v2 - 112);
  if (v4)
  {
    *(void *)(v2 - 104) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void **sub_96C810(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    unint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        sub_4D4B58((uint64_t)(v3 - 160));
        BOOL v5 = (void *)*((void *)v3 - 23);
        if (v5)
        {
          *((void *)v3 - 22) = v5;
          operator delete(v5);
        }
        v3 -= 192;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_96C88C(uint64_t a1@<X0>, unsigned __int16 **a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a1 + 96);
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 20;
  strcpy((char *)&__p, "Board: Car {CarList}");
  unint64_t v9 = sub_8D7730(v8, (uint64_t)&__p);
  if (*((char *)v9 + 23) < 0)
  {
    sub_4200(&__dst, (void *)*v9, v9[1]);
  }
  else
  {
    long long v10 = *(_OWORD *)v9;
    __dst.__r_.__value_.__r.__words[2] = v9[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v10;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  int v31 = 0;
  unint64_t v32 = 0;
  uint64_t v33 = 0;
  sub_23708((uint64_t)&v31, a2[1] - *a2);
  uint64_t v11 = *a2;
  uint64_t v12 = a2[1];
  if (*a2 != v12)
  {
    uint64_t v13 = (uint64_t)v32;
    do
    {
      unint64_t v14 = *v11;
      uint64_t v16 = *a3;
      uint64_t v15 = a3[1];
      if (*a3 == v15 || v14 >= (v15 - v16) >> 6)
      {
        std::to_string(&v35, v14 + 1);
      }
      else
      {
        nullsub_1(&v36);
        sub_9973DC(v16 + (v14 << 6), *(void *)(a1 + 88) + 968, (uint64_t)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          sub_4200(&v35, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        }
        else {
          std::string v35 = __p;
        }
        if (v39 < 0)
        {
          operator delete(v38);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_20:
          }
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        else if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          goto LABEL_20;
        }
      }
      uint64_t v17 = sub_8B3D0((void ***)&v31, v13, (__n128 *)&v35);
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v35.__r_.__value_.__l.__data_);
      }
      uint64_t v13 = v17 + 24;
      ++v11;
    }
    while (v11 != v12);
  }
  uint64_t v18 = *(void *)(a1 + 96);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_20B9250;
  strcpy(__p.__r_.__value_.__l.__data_, "CountdownList_Separator");
  unint64_t v19 = sub_8D7730(v18, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  sub_96D034((uint64_t)v32, (uint64_t)v32, (uint64_t)v31, (uint64_t)v31, (uint64_t)v19);
  v35.__r_.__value_.__s.__data_[8] = 125;
  v35.__r_.__value_.__r.__words[0] = *(void *)"{CarList}";
  int64_t size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_dst = &__dst;
  }
  else {
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    int64_t size = __dst.__r_.__value_.__l.__size_;
  }
  if (size >= 9)
  {
    unint64_t v22 = (char *)p_dst + size;
    unint64_t v23 = p_dst;
    do
    {
      uint64_t v24 = (char *)memchr(v23, 123, size - 8);
      if (!v24) {
        break;
      }
      if (*(void *)v24 == v35.__r_.__value_.__r.__words[0]
        && v24[8] == (unint64_t)v35.__r_.__value_.__s.__data_[8])
      {
        if (v24 != v22 && v24 - (char *)p_dst != -1)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v27 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v27 = __p.__r_.__value_.__l.__size_;
          }
          std::string::replace(&__dst, v24 - (char *)p_dst, 9uLL, (const std::string::value_type *)p_p, v27);
        }
        break;
      }
      unint64_t v23 = (std::string *)(v24 + 1);
      int64_t size = v22 - (char *)v23;
    }
    while (v22 - (char *)v23 >= 9);
  }
  sub_5F3D7C(a4, (uint64_t)&__dst, (__int16 *)(*(void *)(a1 + 88) + 1177));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v28 = (void **)v31;
  if (v31)
  {
    unint64_t v29 = v32;
    uint64_t v30 = v31;
    if (v32 != v31)
    {
      do
      {
        if (*((char *)v29 - 1) < 0) {
          operator delete(*(v29 - 3));
        }
        v29 -= 3;
      }
      while (v29 != v28);
      uint64_t v30 = v31;
    }
    unint64_t v32 = v28;
    operator delete(v30);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_96CBFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  sub_1A668(&a10);
  if (a18 < 0) {
    operator delete(a13);
  }
  _Unwind_Resume(a1);
}

void sub_96CCEC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = *(void **)(a2 + 8);
  if (*(void **)a2 == v6)
  {
    if (a3 != 3)
    {
      uint64_t v13 = 0;
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      unint64_t v27 = 0;
      goto LABEL_43;
    }
    BOOL v8 = 0;
    BOOL v10 = 1;
    uint64_t v11 = *(void **)a2;
  }
  else
  {
    uint64_t v7 = *(void **)a2;
    while (*v7)
    {
      if (++v7 == v6)
      {
        uint64_t v7 = *(void **)(a2 + 8);
        break;
      }
    }
    BOOL v8 = v7 != v6;
    unint64_t v9 = *(void **)a2;
    while (*v9 != a3 - 1)
    {
      if (++v9 == v6)
      {
        unint64_t v9 = *(void **)(a2 + 8);
        break;
      }
    }
    BOOL v10 = v9 == v6;
    if (a3 != 3)
    {
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      unint64_t v27 = 0;
      if (v9 == v6)
      {
        uint64_t v13 = 0;
        if (v7 == v6) {
          goto LABEL_43;
        }
        goto LABEL_39;
      }
      BOOL v12 = 0;
      goto LABEL_23;
    }
    uint64_t v11 = *(void **)a2;
    if (*(void **)a2 != v6)
    {
      while (*v11 != 1)
      {
        if (++v11 == v6)
        {
          uint64_t v11 = *(void **)(a2 + 8);
          break;
        }
      }
    }
  }
  BOOL v12 = v11 != v6;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  unint64_t v27 = 0;
  if (v10)
  {
    uint64_t v13 = 0;
    if (v11 != v6) {
      goto LABEL_19;
    }
LABEL_32:
    if (!v8) {
      goto LABEL_43;
    }
    goto LABEL_39;
  }
LABEL_23:
  int v14 = a3 == 2 || v12;
  if (v14 == 1 && v8)
  {
    uint64_t v13 = sub_96F704(&v25, "Any Section");
LABEL_42:
    uint64_t v26 = v13;
    goto LABEL_43;
  }
  uint64_t v13 = sub_96F934(&v25, "Rear");
  uint64_t v26 = v13;
  if (!v12) {
    goto LABEL_32;
  }
LABEL_19:
  if ((unint64_t)v13 >= v27)
  {
    uint64_t v13 = sub_96FB64(&v25, "Middle");
  }
  else
  {
    v13[23] = 6;
    strcpy(v13, "Middle");
    v13 += 24;
  }
  uint64_t v26 = v13;
  if (v8)
  {
LABEL_39:
    if ((unint64_t)v13 >= v27)
    {
      uint64_t v13 = sub_96FD94(&v25, "Front");
    }
    else
    {
      v13[23] = 5;
      strcpy(v13, "Front");
      v13 += 24;
    }
    goto LABEL_42;
  }
LABEL_43:
  sub_68F24((uint64_t)v25, (uint64_t)v13, ", ");
  uint64_t v16 = std::string::insert(&v22, 0, "Board: ");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  std::string::size_type v24 = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  uint64_t v18 = sub_8D7730(*(void *)(a1 + 96), (uint64_t)__p);
  sub_5F3D7C(a4, (uint64_t)v18, (__int16 *)(*(void *)(a1 + 88) + 1177));
  if (SHIBYTE(v24) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v19 = (char *)v25;
  if (v25)
  {
    uint64_t v20 = (void **)v26;
    uint64_t v21 = v25;
    if (v26 != v25)
    {
      do
      {
        if (*((char *)v20 - 1) < 0) {
          operator delete(*(v20 - 3));
        }
        v20 -= 3;
      }
      while (v20 != (void **)v19);
      uint64_t v21 = v25;
    }
    uint64_t v26 = v19;
    operator delete(v21);
  }
}

void sub_96CFD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_1A668((void **)va);
  _Unwind_Resume(a1);
}

void sub_96CFE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1A668(&a22);
  _Unwind_Resume(a1);
}

uint64_t sub_96D034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_6BAC((uint64_t)v19);
  if (a2 != a4)
  {
    uint64_t v8 = a2 - 24;
    int v9 = *(char *)(a2 - 1);
    if (v9 >= 0) {
      uint64_t v10 = a2 - 24;
    }
    else {
      uint64_t v10 = *(void *)(a2 - 24);
    }
    if (v9 >= 0) {
      uint64_t v11 = *(unsigned __int8 *)(a2 - 1);
    }
    else {
      uint64_t v11 = *(void *)(a2 - 16);
    }
    while (1)
    {
      sub_188FC78(v19, v10, v11);
      if (v8 == a4) {
        break;
      }
      if (v8 != a2)
      {
        int v15 = *(char *)(a5 + 23);
        if (v15 >= 0) {
          uint64_t v16 = a5;
        }
        else {
          uint64_t v16 = *(void *)a5;
        }
        if (v15 >= 0) {
          uint64_t v17 = *(unsigned __int8 *)(a5 + 23);
        }
        else {
          uint64_t v17 = *(void *)(a5 + 8);
        }
        sub_188FC78(v19, v16, v17);
      }
      uint64_t v13 = *(void *)(v8 - 24);
      v8 -= 24;
      uint64_t v12 = v13;
      int v14 = *(char *)(v8 + 23);
      if (v14 >= 0) {
        uint64_t v10 = v8;
      }
      else {
        uint64_t v10 = v12;
      }
      if (v14 >= 0) {
        uint64_t v11 = *(unsigned __int8 *)(v8 + 23);
      }
      else {
        uint64_t v11 = *(void *)(v8 + 8);
      }
    }
  }
  std::stringbuf::str();
  if (v20 < 0) {
    operator delete((void *)v19[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_96D1FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_111ECAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_96D210(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_111ECAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_96D224(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_111ECAC((uint64_t)va);
  _Unwind_Resume(a1);
}

char **sub_96D238@<X0>(char **result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v7 = 0;
  long long v6 = 0u;
  if (result)
  {
    unint64_t v3 = result;
    sub_96D2EC((char **)&v6, *(unsigned int *)result);
    unsigned int v4 = *(_DWORD *)v3;
    int v9 = (unsigned int *)v3 + 1;
    uint64_t v8 = (unsigned int *)v3 + v4 + 1;
    uint64_t result = sub_96D408(&v9, &v8, (char **)&v6, *((uint64_t *)&v6 + 1));
    uint64_t v5 = v7;
    *(_OWORD *)a2 = v6;
    *(void *)(a2 + 16) = v5;
  }
  else
  {
    *(_OWORD *)a2 = 0uLL;
    *(void *)(a2 + 16) = 0;
  }
  return result;
}

void sub_96D2D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    sub_20ACB10((uint64_t)&a9, a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_96D2EC(char **a1, unint64_t a2)
{
  uint64_t v2 = *a1;
  if (a2 <= (a1[2] - *a1) >> 5) {
    return;
  }
  if (a2 >> 59) {
    sub_2E00();
  }
  unsigned int v4 = a1[1];
  uint64_t v5 = 32 * a2;
  long long v6 = (char *)operator new(32 * a2);
  uint64_t v7 = &v6[v5];
  uint64_t v8 = &v6[v4 - v2];
  if (v4 == v2)
  {
    *a1 = v8;
    a1[1] = v8;
    a1[2] = v7;
    if (!v2) {
      return;
    }
    goto LABEL_13;
  }
  uint64_t v9 = 0;
  do
  {
    uint64_t v10 = &v8[v9];
    uint64_t v11 = &v4[v9];
    *((void *)v10 - 4) = *(void *)&v4[v9 - 32];
    *(_OWORD *)(v10 - 24) = *(_OWORD *)&v4[v9 - 24];
    *((void *)v10 - 1) = *(void *)&v4[v9 - 8];
    *((void *)v11 - 3) = 0;
    *((void *)v11 - 2) = 0;
    *((void *)v11 - 1) = 0;
    v9 -= 32;
  }
  while (&v4[v9] != v2);
  uint64_t v12 = *a1;
  uint64_t v2 = a1[1];
  *a1 = &v8[v9];
  a1[1] = v8;
  a1[2] = v7;
  if (v2 != v12)
  {
    do
    {
      uint64_t v13 = (void *)*((void *)v2 - 3);
      if (v13)
      {
        *((void *)v2 - 2) = v13;
        operator delete(v13);
      }
      v2 -= 32;
    }
    while (v2 != v12);
    uint64_t v2 = v12;
  }
  if (v2)
  {
LABEL_13:
    operator delete(v2);
  }
}

char **sub_96D408(unsigned int **a1, unsigned int **a2, char **a3, uint64_t a4)
{
  for (uint64_t i = *a1; i != *a2; *a1 = i)
  {
    uint64_t v9 = (int *)((char *)i + *i);
    uint64_t v10 = (unsigned __int16 *)((char *)v9 - *v9);
    uint64_t v11 = *(void *)((char *)v9 + v10[2]);
    if (*v10 >= 7u
      && (uint64_t v12 = v10[3]) != 0
      && (uint64_t v13 = (unsigned int *)((char *)v9 + v12 + *(unsigned int *)((char *)v9 + v12)), v14 = *v13, v14))
    {
      uint64_t v15 = 2 * v14;
      uint64_t v16 = (char *)operator new(2 * v14);
      *(void *)&long long v25 = v16;
      *((void *)&v25 + 1) = v16;
      uint64_t v26 = &v16[v15];
      uint64_t v17 = (__int16 *)(v13 + 1);
      do
      {
        __int16 v27 = *v17;
        uint64_t v16 = sub_2E30B8((void **)&v25, v16, &v27) + 2;
        ++v17;
        v15 -= 2;
      }
      while (v15);
      long long v18 = v25;
      unint64_t v19 = v26;
    }
    else
    {
      unint64_t v19 = 0;
      long long v18 = 0uLL;
    }
    uint64_t v22 = v11;
    *(_OWORD *)std::string __p = v18;
    std::string::size_type v24 = v19;
    char v20 = sub_96D58C(a3, a4, (uint64_t)&v22);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    a4 = (uint64_t)(v20 + 32);
    uint64_t i = *a1 + 1;
  }
  return a3;
}

void sub_96D55C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_96D58C(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  unint64_t v6 = (unint64_t)a1[1];
  uint64_t v7 = a2 - (void)*a1;
  uint64_t v8 = v7 >> 5;
  uint64_t v9 = &(*a1)[v7 & 0xFFFFFFFFFFFFFFE0];
  unint64_t v10 = (unint64_t)a1[2];
  if (v6 >= v10)
  {
    unint64_t v22 = ((uint64_t)(v6 - (void)v5) >> 5) + 1;
    if (v22 >> 59) {
      sub_2E00();
    }
    uint64_t v23 = v10 - (void)v5;
    if (v23 >> 4 > v22) {
      unint64_t v22 = v23 >> 4;
    }
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v24 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v24 = v22;
    }
    BOOL v48 = a1 + 2;
    if (v24)
    {
      if (v24 >> 59) {
        sub_188D718();
      }
      long long v25 = (char *)operator new(32 * v24);
    }
    else
    {
      long long v25 = 0;
    }
    uint64_t v44 = v25;
    uint64_t v45 = &v25[32 * v8];
    unint64_t v46 = v45;
    uint64_t v47 = &v25[32 * v24];
    sub_96D900((uint64_t)&v44, a3);
    uint64_t v30 = v45;
    int v31 = *a1;
    unint64_t v32 = v45;
    if (*a1 != v9)
    {
      uint64_t v33 = 0;
      do
      {
        uint64_t v34 = &v30[v33];
        std::string v35 = &v9[v33];
        *((void *)v34 - 4) = *(void *)&v9[v33 - 32];
        *((void *)v34 - 3) = 0;
        *((void *)v34 - 2) = 0;
        *((void *)v34 - 1) = 0;
        *(_OWORD *)(v34 - 24) = *(_OWORD *)&v9[v33 - 24];
        *((void *)v34 - 1) = *(void *)&v9[v33 - 8];
        *((void *)v35 - 3) = 0;
        *((void *)v35 - 2) = 0;
        *((void *)v35 - 1) = 0;
        v33 -= 32;
      }
      while (&v9[v33] != v31);
      unint64_t v32 = &v30[v33];
    }
    uint64_t v45 = v32;
    char v36 = a1[1];
    uint64_t v37 = v46;
    if (v36 != v9)
    {
      do
      {
        *(void *)uint64_t v37 = *(void *)v9;
        *((void *)v37 + 1) = 0;
        *((void *)v37 + 2) = 0;
        *((void *)v37 + 3) = 0;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)(v9 + 8);
        *((void *)v37 + 3) = *((void *)v9 + 3);
        *((void *)v9 + 1) = 0;
        *((void *)v9 + 2) = 0;
        *((void *)v9 + 3) = 0;
        v37 += 32;
        v9 += 32;
      }
      while (v9 != v36);
      unint64_t v32 = v45;
      uint64_t v9 = a1[1];
    }
    uint64_t v38 = *a1;
    *a1 = v32;
    a1[1] = v37;
    char v39 = a1[2];
    a1[2] = v47;
    unint64_t v46 = v9;
    uint64_t v47 = v39;
    uint64_t v44 = v38;
    uint64_t v45 = v38;
    if (v9 == v38)
    {
      if (!v9) {
        return v30;
      }
    }
    else
    {
      do
      {
        while (1)
        {
          uint64_t v41 = v9 - 32;
          unint64_t v46 = v9 - 32;
          int v42 = (void *)*((void *)v9 - 3);
          if (!v42) {
            break;
          }
          *((void *)v9 - 2) = v42;
          operator delete(v42);
          uint64_t v9 = v46;
          if (v46 == v38) {
            goto LABEL_39;
          }
        }
        v9 -= 32;
      }
      while (v41 != v38);
LABEL_39:
      uint64_t v9 = v44;
      if (!v44) {
        return v30;
      }
    }
    operator delete(v9);
    return v30;
  }
  if (v9 == (char *)v6)
  {
    *(void *)uint64_t v9 = *(void *)a3;
    unint64_t v29 = &v5[32 * v8];
    *((void *)v29 + 2) = 0;
    *((void *)v29 + 3) = 0;
    *((void *)v29 + 1) = 0;
    *(_OWORD *)(v29 + 8) = *(_OWORD *)(a3 + 8);
    *((void *)v29 + 3) = *(void *)(a3 + 24);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    a1[1] = v9 + 32;
  }
  else
  {
    uint64_t v11 = v9 + 32;
    unint64_t v12 = v6 - 32;
    uint64_t v43 = v8;
    uint64_t v13 = a1[1];
    if (v6 >= 0x20)
    {
      do
      {
        *(void *)uint64_t v13 = *(void *)v12;
        *((void *)v13 + 1) = 0;
        *((void *)v13 + 2) = 0;
        *((void *)v13 + 3) = 0;
        *(_OWORD *)(v13 + 8) = *(_OWORD *)(v12 + 8);
        *((void *)v13 + 3) = *(void *)(v12 + 24);
        *(void *)(v12 + 8) = 0;
        *(void *)(v12 + 16) = 0;
        *(void *)(v12 + 24) = 0;
        v13 += 32;
        v12 += 32;
      }
      while (v12 < v6);
    }
    a1[1] = v13;
    if ((char *)v6 != v11)
    {
      uint64_t v14 = 0;
      uint64_t v15 = 32 * ((uint64_t)(v6 - (void)v11) >> 5);
      uint64_t v16 = &v5[32 * v8 + v15];
      uint64_t v17 = -v15;
      do
      {
        long long v18 = &v16[v14];
        uint64_t v19 = v6 + v14;
        uint64_t v21 = (void **)(v6 + v14 - 24);
        char v20 = *v21;
        *(void *)(v6 + v14 - 32) = *(void *)&v16[v14 - 32];
        if (v20)
        {
          *(void *)(v19 - 16) = v20;
          operator delete(v20);
          *uint64_t v21 = 0;
          *(void *)(v6 + v14 - 16) = 0;
          *(void *)(v6 + v14 - 8) = 0;
        }
        *(_OWORD *)uint64_t v21 = *(_OWORD *)(v18 - 24);
        *(void *)(v19 - 8) = *((void *)v18 - 1);
        *((void *)v18 - 3) = 0;
        *((void *)v18 - 2) = 0;
        *((void *)v18 - 1) = 0;
        v14 -= 32;
      }
      while (v17 != v14);
    }
    *(void *)uint64_t v9 = *(void *)a3;
    uint64_t v26 = &v5[32 * v43];
    uint64_t v28 = v26 + 8;
    __int16 v27 = (void *)*((void *)v26 + 1);
    if (v27)
    {
      *((void *)v26 + 2) = v27;
      operator delete(v27);
      void *v28 = 0;
      *((void *)v26 + 2) = 0;
      *((void *)v26 + 3) = 0;
    }
    *(_OWORD *)uint64_t v28 = *(_OWORD *)(a3 + 8);
    *((void *)v26 + 3) = *(void *)(a3 + 24);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
  }
  return v9;
}

void sub_96D8EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_38800((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_96D900(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(void **)(a1 + 16);
  if (v4 == *(void **)(a1 + 24))
  {
    uint64_t v5 = *(unsigned char **)a1;
    unint64_t v6 = *(void *)(a1 + 8);
    if (v6 <= *(void *)a1)
    {
      unint64_t v15 = ((char *)v4 - v5) >> 4;
      if (v4 == (void *)v5) {
        unint64_t v15 = 1;
      }
      if (v15 >> 59) {
        sub_188D718();
      }
      unint64_t v16 = v15 >> 2;
      uint64_t v17 = 32 * v15;
      long long v18 = (char *)operator new(32 * v15);
      uint64_t v19 = &v18[32 * v16];
      char v20 = &v18[v17];
      if (v4 == (void *)v6)
      {
        *(void *)a1 = v18;
        *(void *)(a1 + 8) = v19;
        *(void *)(a1 + 16) = v19;
        *(void *)(a1 + 24) = v20;
      }
      else
      {
        uint64_t v21 = (char *)v4 + (void)v19 - v6;
        uint64_t v22 = 32 * v16;
        do
        {
          uint64_t v23 = &v18[v22];
          *(void *)uint64_t v23 = *(void *)v6;
          *(_OWORD *)(v23 + 8) = *(_OWORD *)(v6 + 8);
          *((void *)v23 + 3) = *(void *)(v6 + 24);
          *(void *)(v6 + 8) = 0;
          *(void *)(v6 + 16) = 0;
          *(void *)(v6 + 24) = 0;
          v22 += 32;
          v6 += 32;
        }
        while (v23 + 32 != v21);
        uint64_t v5 = *(unsigned char **)a1;
        uint64_t v24 = *(void *)(a1 + 8);
        uint64_t v25 = *(void *)(a1 + 16);
        *(void *)a1 = v18;
        *(void *)(a1 + 8) = v19;
        *(void *)(a1 + 16) = v21;
        *(void *)(a1 + 24) = v20;
        while (v25 != v24)
        {
          uint64_t v26 = *(void **)(v25 - 24);
          if (v26)
          {
            *(void *)(v25 - 16) = v26;
            operator delete(v26);
          }
          v25 -= 32;
        }
      }
      if (v5) {
        operator delete(v5);
      }
      unsigned int v4 = *(void **)(a1 + 16);
    }
    else
    {
      uint64_t v7 = (uint64_t)(v6 - *(void *)a1) >> 5;
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = v8 >> 1;
      uint64_t v10 = -v9;
      if ((void *)v6 == v4)
      {
        __int16 v27 = (void *)(v6 - 32 * v9);
      }
      else
      {
        uint64_t v11 = -32 * v9;
        do
        {
          unint64_t v12 = v6 + v11;
          *(void *)(v6 + 32 * v10) = *(void *)v6;
          uint64_t v14 = (void **)(v6 + v11 + 8);
          uint64_t v13 = *v14;
          if (*v14)
          {
            *(void *)(v12 + 16) = v13;
            operator delete(v13);
            int *v14 = 0;
            *(void *)(v6 + v11 + 16) = 0;
            *(void *)(v6 + v11 + 24) = 0;
          }
          *(_OWORD *)uint64_t v14 = *(_OWORD *)(v6 + 8);
          *(void *)(v12 + 24) = *(void *)(v6 + 24);
          *(void *)(v6 + 8) = 0;
          *(void *)(v6 + 16) = 0;
          *(void *)(v6 + 24) = 0;
          v6 += 32;
        }
        while ((void *)v6 != v4);
        unsigned int v4 = *(void **)(a1 + 8);
        __int16 v27 = (void *)(v6 + 32 * v10);
      }
      *(void *)(a1 + 8) = &v4[4 * v10];
      *(void *)(a1 + 16) = v27;
      unsigned int v4 = v27;
    }
  }
  *unsigned int v4 = *(void *)a2;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = 0;
  __n128 result = *(__n128 *)(a2 + 8);
  *(__n128 *)(v4 + 1) = result;
  v4[3] = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a1 + 16) += 32;
  return result;
}

char **sub_96DAE0@<X0>(char **result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v7 = 0;
  long long v6 = 0u;
  if (result)
  {
    unint64_t v3 = result;
    sub_96D2EC((char **)&v6, *(unsigned int *)result);
    unsigned int v4 = *(_DWORD *)v3;
    uint64_t v9 = (unsigned int *)v3 + 1;
    uint64_t v8 = (unsigned int *)v3 + v4 + 1;
    __n128 result = sub_96DB94(&v9, &v8, (char **)&v6, *((uint64_t *)&v6 + 1));
    uint64_t v5 = v7;
    *(_OWORD *)a2 = v6;
    *(void *)(a2 + 16) = v5;
  }
  else
  {
    *(_OWORD *)a2 = 0uLL;
    *(void *)(a2 + 16) = 0;
  }
  return result;
}

void sub_96DB78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    sub_20ACB10((uint64_t)&a9, a9);
  }
  _Unwind_Resume(exception_object);
}

char **sub_96DB94(unsigned int **a1, unsigned int **a2, char **a3, uint64_t a4)
{
  for (uint64_t i = *a1; i != *a2; *a1 = i)
  {
    uint64_t v9 = (int *)((char *)i + *i);
    uint64_t v10 = (unsigned __int16 *)((char *)v9 - *v9);
    uint64_t v11 = *(void *)((char *)v9 + v10[2]);
    if (*v10 >= 7u
      && (uint64_t v12 = v10[3]) != 0
      && (uint64_t v13 = (unsigned int *)((char *)v9 + v12 + *(unsigned int *)((char *)v9 + v12)), v14 = *v13, v14))
    {
      uint64_t v15 = 2 * v14;
      unint64_t v16 = (char *)operator new(2 * v14);
      *(void *)&long long v25 = v16;
      *((void *)&v25 + 1) = v16;
      uint64_t v26 = &v16[v15];
      uint64_t v17 = (__int16 *)(v13 + 1);
      do
      {
        __int16 v27 = *v17;
        unint64_t v16 = sub_2E30B8((void **)&v25, v16, &v27) + 2;
        ++v17;
        v15 -= 2;
      }
      while (v15);
      long long v18 = v25;
      uint64_t v19 = v26;
    }
    else
    {
      uint64_t v19 = 0;
      long long v18 = 0uLL;
    }
    uint64_t v22 = v11;
    *(_OWORD *)std::string __p = v18;
    uint64_t v24 = v19;
    char v20 = sub_96D58C(a3, a4, (uint64_t)&v22);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    a4 = (uint64_t)(v20 + 32);
    uint64_t i = *a1 + 1;
  }
  return a3;
}

void sub_96DCE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_96DD18(uint64_t a1, unint64_t a2, int a3, char *a4)
{
  unsigned int v6 = a2;
  unint64_t v8 = HIDWORD(a2);
  LODWORD(v61.__r_.__value_.__l.__data_) = a2;
  LODWORD(v60.__r_.__value_.__l.__data_) = a3;
  *(void *)&long long v62 = &v60;
  *((void *)&v62 + 1) = &v61;
  unint64_t v9 = *(void *)(a1 + 3856) + 1;
  *(void *)(a1 + 3856) = v9;
  uint64_t v10 = *(void *)a1;
  if (!v10) {
    goto LABEL_38;
  }
  uint64_t v11 = a1 + 16;
  if (*(_DWORD *)(a1 + 592) == a2)
  {
    unsigned int v12 = 24;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 616) == a2)
  {
    unsigned int v12 = 25;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 640) == a2)
  {
    unsigned int v12 = 26;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 664) == a2)
  {
    unsigned int v12 = 27;
LABEL_10:
    ++*(void *)(a1 + 3864);
    uint64_t v13 = v11 + 24 * v12;
    *(void *)(v13 + 8) = v9;
    uint64_t v14 = *(unsigned int **)(v13 + 16);
    if (v14) {
      goto LABEL_11;
    }
LABEL_38:
    sub_2A54B4((int **)&v62);
    long long v18 = 0;
    if (a3 != 1) {
      goto LABEL_19;
    }
    return 0;
  }
  unint64_t v20 = *(void *)(a1 + 648);
  unint64_t v21 = *(void *)(a1 + 624);
  if (*(void *)(a1 + 600) >= v9)
  {
    int v22 = 0;
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + 600);
    int v22 = 24;
  }
  BOOL v23 = v21 >= v9;
  if (v21 < v9) {
    unint64_t v9 = *(void *)(a1 + 624);
  }
  int v24 = 25;
  if (v23) {
    int v24 = v22;
  }
  if (v20 >= v9) {
    unint64_t v25 = v9;
  }
  else {
    unint64_t v25 = *(void *)(a1 + 648);
  }
  unint64_t v26 = *(void *)(a1 + 672);
  if (v20 >= v9) {
    int v27 = v24;
  }
  else {
    int v27 = 26;
  }
  uint64_t v14 = (unsigned int *)sub_2AB884(v10, 6, a2, 1);
  unsigned int v28 = 27;
  if (v26 >= v25) {
    unsigned int v28 = v27;
  }
  uint64_t v29 = v11 + 24 * v28;
  *(_DWORD *)uint64_t v29 = v61.__r_.__value_.__l.__data_;
  *(void *)(v29 + 8) = *(void *)(a1 + 3856);
  *(void *)(v29 + 16) = v14;
  if (!v14) {
    goto LABEL_38;
  }
LABEL_11:
  uint64_t v15 = (int *)((char *)v14 + *v14);
  unint64_t v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 < 0x2Fu)
  {
    long long v18 = 0;
    if (a3 != 1) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v17 = v16[23];
    if (v17)
    {
      long long v18 = (int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17));
      if (*v18 > v8) {
        return (uint64_t)&v18[v8 + 1] + v18[v8 + 1];
      }
    }
    else
    {
      long long v18 = 0;
    }
    if (a3 != 1)
    {
LABEL_19:
      if (!a3)
      {
        exception = __cxa_allocate_exception(0x40uLL);
        int v31 = a4;
        uint64_t v32 = (uint64_t)exception;
        sub_5E5C(&v55, v31);
        uint64_t v33 = std::string::insert(&v55, 0, "Failed to acquire entity \"");
        long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
        v56.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v34;
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        std::string v35 = std::string::append(&v56, "\" in quad node ");
        long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v57.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v54, v6);
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v37 = &v54;
        }
        else {
          uint64_t v37 = (std::string *)v54.__r_.__value_.__r.__words[0];
        }
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v54.__r_.__value_.__l.__size_;
        }
        char v39 = std::string::append(&v57, (const std::string::value_type *)v37, size);
        long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v58.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        uint64_t v41 = std::string::append(&v58, " at position ");
        long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
        v59.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v42;
        v41->__r_.__value_.__l.__size_ = 0;
        v41->__r_.__value_.__r.__words[2] = 0;
        v41->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v53, v8);
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v43 = &v53;
        }
        else {
          uint64_t v43 = (std::string *)v53.__r_.__value_.__r.__words[0];
        }
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v44 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v44 = v53.__r_.__value_.__l.__size_;
        }
        uint64_t v45 = std::string::append(&v59, (const std::string::value_type *)v43, v44);
        long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
        v60.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v46;
        v45->__r_.__value_.__l.__size_ = 0;
        v45->__r_.__value_.__r.__words[2] = 0;
        v45->__r_.__value_.__r.__words[0] = 0;
        uint64_t v47 = std::string::append(&v60, " on layer ");
        long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v61.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        int64_t v49 = sub_736EC(6u);
        uint64_t v50 = std::string::append(&v61, v49);
        long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
        std::string::size_type v63 = v50->__r_.__value_.__r.__words[2];
        long long v62 = v51;
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        uint64_t v52 = (void *)sub_2F404(v32, &v62);
      }
      return (uint64_t)&v18[v8 + 1] + v18[v8 + 1];
    }
  }
  return 0;
}

void sub_96E0B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (*(char *)(v54 - 105) < 0) {
    operator delete(*(void **)(v54 - 128));
  }
  if (*(char *)(v54 - 137) < 0)
  {
    operator delete(*(void **)(v54 - 160));
    if ((*(char *)(v54 - 169) & 0x80000000) == 0)
    {
LABEL_5:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_15;
    }
  }
  else if ((*(char *)(v54 - 169) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v54 - 192));
  if ((a15 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a54 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(a10);
  if ((a54 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a47 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(a49);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a21 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a42);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a40 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a16);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a33 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a35);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a27 & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_12;
  }
LABEL_20:
  operator delete(a28);
  if ((a27 & 0x80000000) == 0) {
LABEL_21:
  }
    _Unwind_Resume(a1);
LABEL_12:
  operator delete(__p);
  goto LABEL_21;
}

uint64_t sub_96E26C(uint64_t *a1, long long *a2)
{
  uint64_t v3 = 0x66FD0EB66FD0EB67 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x5E293205E29320) {
    sub_2E00();
  }
  if (0xCDFA1D6CDFA1D6CELL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xCDFA1D6CDFA1D6CELL * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x66FD0EB66FD0EB67 * ((a1[2] - *a1) >> 3)) >= 0x2F149902F14990) {
    unint64_t v6 = 0x5E293205E29320;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x5E293205E29320) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(696 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v14 = (uint64_t)&v7[696 * v3];
  uint64_t v15 = &v7[696 * v6];
  sub_96E42C((uint64_t)(a1 + 2), v14, a2);
  uint64_t v8 = v14;
  uint64_t v9 = v14 + 696;
  uint64_t v11 = (long long *)*a1;
  uint64_t v10 = (long long *)a1[1];
  if (v10 == (long long *)*a1)
  {
    *a1 = v14;
    a1[1] = v9;
    a1[2] = (uint64_t)v15;
  }
  else
  {
    do
    {
      uint64_t v10 = (long long *)((char *)v10 - 696);
      sub_96E6F4(v8 - 696, v10);
    }
    while (v10 != v11);
    unsigned int v12 = (long long *)*a1;
    uint64_t v10 = (long long *)a1[1];
    *a1 = v8;
    a1[1] = v9;
    a1[2] = (uint64_t)v15;
    if (v10 != v12)
    {
      do
      {
        sub_4D4B58((uint64_t)(v10 - 11));
        sub_4D4B58((uint64_t)(v10 - 21));
        sub_4D4B58((uint64_t)v10 - 504);
        sub_4D4B58((uint64_t)v10 - 664);
        uint64_t v10 = (long long *)((char *)v10 - 696);
      }
      while (v10 != v12);
      uint64_t v10 = v12;
    }
  }
  if (v10) {
    operator delete(v10);
  }
  return v14 + 696;
}

void sub_96E418(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_96E674((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_96E42C(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v12 = 0;
  memset(v11, 0, sizeof(v11));
  memset(v10, 0, sizeof(v10));
  sub_5F3B34((uint64_t)v10);
  sub_5F3B34((uint64_t)v11);
  LOBYTE(v12) = 0;
  uint64_t v9 = 0;
  memset(v8, 0, sizeof(v8));
  memset(v7, 0, sizeof(v7));
  sub_5F3B34((uint64_t)v7);
  sub_5F3B34((uint64_t)v8);
  LOBYTE(v9) = 0;
  char v6 = 0;
  sub_96E590(a2, a3, (uint64_t)v10, (uint64_t)v7, &v6);
  sub_4D4B58((uint64_t)v8);
  sub_4D4B58((uint64_t)v7);
  sub_4D4B58((uint64_t)v11);
  return sub_4D4B58((uint64_t)v10);
}

void sub_96E540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  sub_4D4B58(v54);
  sub_4D4B58((uint64_t)&a11);
  sub_4D4B58(v53);
  sub_4D4B58((uint64_t)&a53);
  _Unwind_Resume(a1);
}

void sub_96E57C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
}

uint64_t sub_96E590(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, unsigned char *a5)
{
  long long v9 = *a2;
  *(_OWORD *)(a1 + 12) = *(long long *)((char *)a2 + 12);
  *(_OWORD *)a1 = v9;
  sub_4F58AC(a1 + 32, a3);
  sub_4F58AC(a1 + 192, a3 + 160);
  *(unsigned char *)(a1 + 352) = *(unsigned char *)(a3 + 320);
  sub_4F58AC(a1 + 360, a4);
  sub_4F58AC(a1 + 520, a4 + 160);
  *(unsigned char *)(a1 + 680) = *(unsigned char *)(a4 + 320);
  *(unsigned char *)(a1 + 688) = *a5;
  return a1;
}

void sub_96E634(_Unwind_Exception *a1)
{
  sub_4D4B58(v3);
  sub_4D4B58(v2);
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_96E660(_Unwind_Exception *a1)
{
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_96E674(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 696;
    sub_4D4B58(i - 176);
    sub_4D4B58(i - 336);
    sub_4D4B58(i - 504);
    sub_4D4B58(i - 664);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

__n128 sub_96E6F4(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  *(_OWORD *)(a1 + 12) = *(long long *)((char *)a2 + 12);
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 32) = 0;
  uint64_t v3 = a2 + 2;
  *(_OWORD *)(a1 + 32) = a2[2];
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  *((void *)a2 + 6) = 0;
  a2[2] = 0u;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 56) = *(long long *)((char *)a2 + 56);
  *(void *)(a1 + 72) = *((void *)a2 + 9);
  *((void *)a2 + 9) = 0;
  *(long long *)((char *)a2 + 56) = 0u;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 80) = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *((void *)a2 + 12) = 0;
  a2[5] = 0u;
  *(void *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 104) = *(long long *)((char *)a2 + 104);
  *(void *)(a1 + 120) = *((void *)a2 + 15);
  *(long long *)((char *)a2 + 104) = 0u;
  uint64_t v4 = *((void *)a2 + 16);
  *(long long *)((char *)a2 + 120) = 0u;
  *(void *)(a1 + 128) = v4;
  LODWORD(v4) = *((_DWORD *)a2 + 34);
  *(unsigned char *)(a1 + 140) = *((unsigned char *)a2 + 140);
  *(_DWORD *)(a1 + 136) = v4;
  long long v5 = a2[9];
  *(void *)(a1 + 160) = *((void *)a2 + 20);
  *(_OWORD *)(a1 + 144) = v5;
  *((void *)a2 + 18) = 0;
  *(long long *)((char *)a2 + 152) = 0u;
  long long v6 = *(long long *)((char *)a2 + 168);
  *(void *)(a1 + 184) = *((void *)a2 + 23);
  *(_OWORD *)(a1 + 168) = v6;
  a2[11] = 0u;
  *((void *)a2 + 21) = 0;
  *(void *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  long long v8 = a2[12];
  uint64_t v7 = a2 + 12;
  *(_OWORD *)(a1 + 192) = v8;
  *(void *)(a1 + 208) = *((void *)v7 + 2);
  *((void *)v7 + 2) = 0;
  *uint64_t v7 = 0u;
  *(void *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 216) = *(long long *)((char *)v7 + 24);
  *(void *)(a1 + 232) = *((void *)v7 + 5);
  *((void *)v7 + 5) = 0;
  *(long long *)((char *)v7 + 24) = 0u;
  *(void *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 240) = v7[3];
  *(void *)(a1 + 256) = *((void *)v7 + 8);
  *((void *)v7 + 8) = 0;
  v7[3] = 0u;
  *(void *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(void *)(a1 + 264) = *((void *)v3 + 29);
  *(void *)(a1 + 272) = *((void *)v7 + 10);
  *(void *)(a1 + 280) = *((void *)v3 + 31);
  *(long long *)((char *)v3 + 232) = 0u;
  uint64_t v9 = *((void *)v7 + 12);
  *(long long *)((char *)v3 + 248) = 0u;
  *(void *)(a1 + 288) = v9;
  LODWORD(v3) = *((_DWORD *)v7 + 26);
  *(unsigned char *)(a1 + 300) = *((unsigned char *)v7 + 108);
  *(_DWORD *)(a1 + 296) = v3;
  long long v10 = v7[7];
  *(void *)(a1 + 320) = *((void *)v7 + 16);
  *(_OWORD *)(a1 + 304) = v10;
  *((void *)v7 + 14) = 0;
  *(long long *)((char *)v7 + 120) = 0u;
  long long v11 = *(long long *)((char *)v7 + 136);
  *(void *)(a1 + 344) = *((void *)v7 + 19);
  *(_OWORD *)(a1 + 328) = v11;
  v7[9] = 0u;
  *((void *)v7 + 17) = 0;
  *(unsigned char *)(a1 + 352) = *((unsigned char *)v7 + 160);
  *(void *)(a1 + 360) = 0;
  *(_OWORD *)(a1 + 368) = 0u;
  uint64_t v12 = *((void *)v7 + 22);
  *(void *)(a1 + 360) = *((void *)v7 + 21);
  *(void *)(a1 + 368) = v12;
  *(void *)(a1 + 376) = *((void *)v7 + 23);
  *((void *)v7 + 23) = 0;
  *(long long *)((char *)v7 + 168) = 0u;
  *(void *)(a1 + 400) = 0;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 384) = v7[12];
  *(void *)(a1 + 400) = *((void *)v7 + 26);
  *((void *)v7 + 26) = 0;
  v7[12] = 0u;
  *(void *)(a1 + 424) = 0;
  *(_OWORD *)(a1 + 408) = 0u;
  uint64_t v13 = *((void *)v7 + 28);
  *(void *)(a1 + 408) = *((void *)v7 + 27);
  *(void *)(a1 + 416) = v13;
  *(void *)(a1 + 424) = *((void *)v7 + 29);
  *((void *)v7 + 29) = 0;
  *(long long *)((char *)v7 + 216) = 0u;
  *(void *)(a1 + 448) = 0;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 432) = v7[15];
  *(void *)(a1 + 448) = *((void *)v7 + 32);
  uint64_t v14 = *((void *)v7 + 33);
  v7[15] = 0u;
  v7[16] = 0u;
  *(void *)(a1 + 456) = v14;
  LODWORD(v14) = *((_DWORD *)v7 + 68);
  *(unsigned char *)(a1 + 468) = *((unsigned char *)v7 + 276);
  *(_DWORD *)(a1 + 464) = v14;
  long long v15 = *(long long *)((char *)v7 + 280);
  *(void *)(a1 + 488) = *((void *)v7 + 37);
  *(_OWORD *)(a1 + 472) = v15;
  *((void *)v7 + 35) = 0;
  v7[18] = 0u;
  long long v16 = v7[19];
  *(void *)(a1 + 512) = *((void *)v7 + 40);
  *(_OWORD *)(a1 + 496) = v16;
  *(long long *)((char *)v7 + 312) = 0u;
  *((void *)v7 + 38) = 0;
  *(void *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  *(void *)(a1 + 520) = *((void *)v7 + 41);
  *(void *)(a1 + 528) = *((void *)v7 + 42);
  *(void *)(a1 + 536) = *((void *)v7 + 43);
  *((void *)v7 + 43) = 0;
  *(long long *)((char *)v7 + 328) = 0u;
  *(void *)(a1 + 560) = 0;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 544) = v7[22];
  *(void *)(a1 + 560) = *((void *)v7 + 46);
  *((void *)v7 + 46) = 0;
  v7[22] = 0u;
  *(void *)(a1 + 584) = 0;
  *(_OWORD *)(a1 + 568) = 0u;
  *(void *)(a1 + 568) = *((void *)v7 + 47);
  *(void *)(a1 + 576) = *((void *)v7 + 48);
  *(void *)(a1 + 584) = *((void *)v7 + 49);
  *((void *)v7 + 49) = 0;
  *(long long *)((char *)v7 + 376) = 0u;
  *(void *)(a1 + 608) = 0;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 592) = v7[25];
  *(void *)(a1 + 608) = *((void *)v7 + 52);
  uint64_t v17 = *((void *)v7 + 53);
  v7[25] = 0u;
  v7[26] = 0u;
  *(void *)(a1 + 616) = v17;
  LODWORD(v17) = *((_DWORD *)v7 + 108);
  *(unsigned char *)(a1 + 628) = *((unsigned char *)v7 + 436);
  *(_DWORD *)(a1 + 624) = v17;
  long long v18 = *(long long *)((char *)v7 + 440);
  *(void *)(a1 + 648) = *((void *)v7 + 57);
  *(_OWORD *)(a1 + 632) = v18;
  *((void *)v7 + 55) = 0;
  *((void *)v7 + 56) = 0;
  *((void *)v7 + 57) = 0;
  __n128 result = (__n128)v7[29];
  *(void *)(a1 + 672) = *((void *)v7 + 60);
  *(__n128 *)(a1 + 656) = result;
  *((void *)v7 + 59) = 0;
  *((void *)v7 + 60) = 0;
  *((void *)v7 + 58) = 0;
  *(unsigned char *)(a1 + 680) = *((unsigned char *)v7 + 488);
  *(unsigned char *)(a1 + 688) = *((unsigned char *)v7 + 496);
  return result;
}

uint64_t sub_96EA6C(uint64_t *a1, long long *a2)
{
  uint64_t v3 = 0x66FD0EB66FD0EB67 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x5E293205E29320) {
    sub_2E00();
  }
  if (0xCDFA1D6CDFA1D6CELL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xCDFA1D6CDFA1D6CELL * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x66FD0EB66FD0EB67 * ((a1[2] - *a1) >> 3)) >= 0x2F149902F14990) {
    unint64_t v6 = 0x5E293205E29320;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x5E293205E29320) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(696 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v14 = (uint64_t)&v7[696 * v3];
  long long v15 = &v7[696 * v6];
  sub_96EC2C((uint64_t)(a1 + 2), v14, a2);
  uint64_t v8 = v14;
  uint64_t v9 = v14 + 696;
  long long v11 = (long long *)*a1;
  long long v10 = (long long *)a1[1];
  if (v10 == (long long *)*a1)
  {
    *a1 = v14;
    a1[1] = v9;
    a1[2] = (uint64_t)v15;
  }
  else
  {
    do
    {
      long long v10 = (long long *)((char *)v10 - 696);
      sub_96E6F4(v8 - 696, v10);
    }
    while (v10 != v11);
    uint64_t v12 = (long long *)*a1;
    long long v10 = (long long *)a1[1];
    *a1 = v8;
    a1[1] = v9;
    a1[2] = (uint64_t)v15;
    if (v10 != v12)
    {
      do
      {
        sub_4D4B58((uint64_t)(v10 - 11));
        sub_4D4B58((uint64_t)(v10 - 21));
        sub_4D4B58((uint64_t)v10 - 504);
        sub_4D4B58((uint64_t)v10 - 664);
        long long v10 = (long long *)((char *)v10 - 696);
      }
      while (v10 != v12);
      long long v10 = v12;
    }
  }
  if (v10) {
    operator delete(v10);
  }
  return v14 + 696;
}

void sub_96EC18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_96E674((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_96EC2C(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v12 = 0;
  memset(v11, 0, sizeof(v11));
  memset(v10, 0, sizeof(v10));
  sub_5F3B34((uint64_t)v10);
  sub_5F3B34((uint64_t)v11);
  LOBYTE(v12) = 0;
  uint64_t v9 = 0;
  memset(v8, 0, sizeof(v8));
  memset(v7, 0, sizeof(v7));
  sub_5F3B34((uint64_t)v7);
  sub_5F3B34((uint64_t)v8);
  LOBYTE(v9) = 0;
  char v6 = 0;
  sub_96E590(a2, a3, (uint64_t)v10, (uint64_t)v7, &v6);
  sub_4D4B58((uint64_t)v8);
  sub_4D4B58((uint64_t)v7);
  sub_4D4B58((uint64_t)v11);
  return sub_4D4B58((uint64_t)v10);
}

void sub_96ED40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  sub_4D4B58(v54);
  sub_4D4B58((uint64_t)&a11);
  sub_4D4B58(v53);
  sub_4D4B58((uint64_t)&a53);
  _Unwind_Resume(a1);
}

void sub_96ED7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
}

char *sub_96ED90(long long **a1)
{
  uint64_t v2 = 0x66FD0EB66FD0EB67 * (((char *)a1[1] - (char *)*a1) >> 3);
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x5E293205E29320) {
    sub_2E00();
  }
  if (0xCDFA1D6CDFA1D6CELL * (((char *)a1[2] - (char *)*a1) >> 3) > v3) {
    unint64_t v3 = 0xCDFA1D6CDFA1D6CELL * (((char *)a1[2] - (char *)*a1) >> 3);
  }
  if ((unint64_t)(0x66FD0EB66FD0EB67 * (((char *)a1[2] - (char *)*a1) >> 3)) >= 0x2F149902F14990) {
    unint64_t v4 = 0x5E293205E29320;
  }
  else {
    unint64_t v4 = v3;
  }
  if (v4)
  {
    if (v4 > 0x5E293205E29320) {
      sub_188D718();
    }
    long long v5 = (char *)operator new(696 * v4);
  }
  else
  {
    long long v5 = 0;
  }
  uint64_t v12 = &v5[696 * v2];
  uint64_t v13 = (long long *)&v5[696 * v4];
  bzero(v12, 0x2B8uLL);
  sub_96EF54((uint64_t)v12);
  char v6 = (long long *)v12;
  uint64_t v7 = (long long *)(v12 + 696);
  uint64_t v9 = *a1;
  uint64_t v8 = a1[1];
  if (v8 == *a1)
  {
    *a1 = (long long *)v12;
    a1[1] = v7;
    a1[2] = v13;
  }
  else
  {
    do
    {
      uint64_t v8 = (long long *)((char *)v8 - 696);
      sub_96E6F4((uint64_t)v6 - 696, v8);
    }
    while (v8 != v9);
    long long v10 = *a1;
    uint64_t v8 = a1[1];
    *a1 = v6;
    a1[1] = v7;
    a1[2] = v13;
    if (v8 != v10)
    {
      do
      {
        sub_4D4B58((uint64_t)(v8 - 11));
        sub_4D4B58((uint64_t)(v8 - 21));
        sub_4D4B58((uint64_t)v8 - 504);
        sub_4D4B58((uint64_t)v8 - 664);
        uint64_t v8 = (long long *)((char *)v8 - 696);
      }
      while (v8 != v10);
      uint64_t v8 = v10;
    }
  }
  if (v8) {
    operator delete(v8);
  }
  return v12 + 696;
}

void sub_96EF40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_96E674((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_96EF54(uint64_t a1)
{
  *(void *)a1 = 0x8000000080000000;
  *(_WORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 12) = xmmword_20EA7A0;
  sub_5F3B34(a1 + 32);
  sub_5F3B34(a1 + 192);
  *(unsigned char *)(a1 + 352) = 0;
  sub_5F3B34(a1 + 360);
  sub_5F3B34(a1 + 520);
  *(unsigned char *)(a1 + 680) = 0;
  *(unsigned char *)(a1 + 688) = 0;
  return a1;
}

void sub_96EFD0(_Unwind_Exception *a1)
{
  sub_4D4B58(v3);
  sub_4D4B58(v2);
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_96EFFC(_Unwind_Exception *a1)
{
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_96F010(uint64_t *a1, long long *a2)
{
  uint64_t v3 = 0x66FD0EB66FD0EB67 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x5E293205E29320) {
    sub_2E00();
  }
  if (0xCDFA1D6CDFA1D6CELL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xCDFA1D6CDFA1D6CELL * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x66FD0EB66FD0EB67 * ((a1[2] - *a1) >> 3)) >= 0x2F149902F14990) {
    unint64_t v6 = 0x5E293205E29320;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x5E293205E29320) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(696 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v14 = (uint64_t)&v7[696 * v3];
  long long v15 = &v7[696 * v6];
  sub_96F1D0((uint64_t)(a1 + 2), v14, a2);
  uint64_t v8 = v14;
  uint64_t v9 = v14 + 696;
  long long v11 = (long long *)*a1;
  long long v10 = (long long *)a1[1];
  if (v10 == (long long *)*a1)
  {
    *a1 = v14;
    a1[1] = v9;
    a1[2] = (uint64_t)v15;
  }
  else
  {
    do
    {
      long long v10 = (long long *)((char *)v10 - 696);
      sub_96E6F4(v8 - 696, v10);
    }
    while (v10 != v11);
    uint64_t v12 = (long long *)*a1;
    long long v10 = (long long *)a1[1];
    *a1 = v8;
    a1[1] = v9;
    a1[2] = (uint64_t)v15;
    if (v10 != v12)
    {
      do
      {
        sub_4D4B58((uint64_t)(v10 - 11));
        sub_4D4B58((uint64_t)(v10 - 21));
        sub_4D4B58((uint64_t)v10 - 504);
        sub_4D4B58((uint64_t)v10 - 664);
        long long v10 = (long long *)((char *)v10 - 696);
      }
      while (v10 != v12);
      long long v10 = v12;
    }
  }
  if (v10) {
    operator delete(v10);
  }
  return v14 + 696;
}

void sub_96F1BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_96E674((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_96F1D0(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v12 = 0;
  memset(v11, 0, sizeof(v11));
  memset(v10, 0, sizeof(v10));
  sub_5F3B34((uint64_t)v10);
  sub_5F3B34((uint64_t)v11);
  LOBYTE(v12) = 0;
  uint64_t v9 = 0;
  memset(v8, 0, sizeof(v8));
  memset(v7, 0, sizeof(v7));
  sub_5F3B34((uint64_t)v7);
  sub_5F3B34((uint64_t)v8);
  LOBYTE(v9) = 0;
  char v6 = 0;
  sub_96E590(a2, a3, (uint64_t)v10, (uint64_t)v7, &v6);
  sub_4D4B58((uint64_t)v8);
  sub_4D4B58((uint64_t)v7);
  sub_4D4B58((uint64_t)v11);
  return sub_4D4B58((uint64_t)v10);
}

void sub_96F2E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  sub_4D4B58(v54);
  sub_4D4B58((uint64_t)&a11);
  sub_4D4B58(v53);
  sub_4D4B58((uint64_t)&a53);
  _Unwind_Resume(a1);
}

void sub_96F320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
}

uint64_t sub_96F334(uint64_t *a1, void *a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 6);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x155555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 6) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 6);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 6) >= 0xAAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x155555555555555;
  }
  else {
    unint64_t v6 = v4;
  }
  unint64_t v26 = a1 + 2;
  if (v6)
  {
    if (v6 > 0x155555555555555) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(192 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = &v7[192 * v3];
  std::string __p = v7;
  BOOL v23 = v8;
  int v24 = v8;
  unint64_t v25 = &v7[192 * v6];
  uint64_t v9 = (unsigned char *)a2[1];
  *(void *)uint64_t v8 = *a2;
  *((void *)v8 + 1) = 0;
  long long v10 = v8 + 8;
  *((void *)v8 + 2) = 0;
  long long v11 = (char **)(v8 + 16);
  *((void *)v8 + 3) = 0;
  uint64_t v12 = (char **)(v8 + 24);
  uint64_t v13 = (unsigned char *)a2[2];
  int64_t v14 = v13 - v9;
  if (v13 != v9)
  {
    if (v14 < 0) {
      sub_2E00();
    }
    long long v15 = (char *)operator new(v13 - v9);
    *long long v10 = v15;
    *long long v11 = v15;
    long long v16 = &v15[8 * (v14 >> 3)];
    long long *v12 = v16;
    memcpy(v15, v9, v14);
    *long long v11 = v16;
  }
  sub_4F58AC((uint64_t)&v7[192 * v3 + 32], (uint64_t)(a2 + 4));
  v24 += 192;
  sub_96F538(a1, &__p);
  uint64_t v17 = a1[1];
  long long v18 = v23;
  while (1)
  {
    uint64_t v19 = v24;
    if (v24 == v18) {
      break;
    }
    v24 -= 192;
    sub_4D4B58((uint64_t)(v19 - 160));
    unint64_t v20 = (void *)*((void *)v19 - 23);
    if (v20)
    {
      *((void *)v19 - 22) = v20;
      operator delete(v20);
    }
  }
  if (__p) {
    operator delete(__p);
  }
  return v17;
}

void sub_96F4FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_96F694((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_96F510(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  long long v5 = *v2;
  if (*v2)
  {
    void *v3 = v5;
    operator delete(v5);
  }
  sub_96F694((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_96F538(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      *(void *)(v6 - 192) = *(void *)(v2 + v5 - 192);
      *(void *)(v6 - 184) = 0;
      *(_OWORD *)(v6 - 176) = 0uLL;
      *(_OWORD *)(v6 - 184) = *(_OWORD *)(v2 + v5 - 184);
      *(void *)(v6 - 168) = *(void *)(v2 + v5 - 168);
      *(void *)(v7 - 168) = 0;
      *(_OWORD *)(v7 - 184) = 0uLL;
      *(void *)(v6 - 144) = 0;
      *(_OWORD *)(v6 - 160) = 0uLL;
      *(_OWORD *)(v6 - 160) = *(_OWORD *)(v2 + v5 - 160);
      *(void *)(v6 - 144) = *(void *)(v2 + v5 - 144);
      *(void *)(v7 - 144) = 0;
      *(_OWORD *)(v7 - 160) = 0uLL;
      *(void *)(v6 - 120) = 0;
      *(_OWORD *)(v6 - 136) = 0uLL;
      *(_OWORD *)(v6 - 136) = *(_OWORD *)(v2 + v5 - 136);
      *(void *)(v6 - 120) = *(void *)(v2 + v5 - 120);
      *(void *)(v7 - 120) = 0;
      *(_OWORD *)(v7 - 136) = 0uLL;
      *(void *)(v6 - 96) = 0;
      *(_OWORD *)(v6 - 112) = 0uLL;
      *(_OWORD *)(v6 - 112) = *(_OWORD *)(v2 + v5 - 112);
      *(void *)(v6 - 96) = *(void *)(v2 + v5 - 96);
      *(void *)(v7 - 96) = 0;
      *(_OWORD *)(v7 - 112) = 0uLL;
      *(void *)(v6 - 72) = 0;
      *(_OWORD *)(v6 - 88) = 0uLL;
      *(_OWORD *)(v6 - 88) = *(_OWORD *)(v2 + v5 - 88);
      *(void *)(v6 - 72) = *(void *)(v2 + v5 - 72);
      *(_OWORD *)(v7 - 88) = 0uLL;
      uint64_t v8 = *(void *)(v2 + v5 - 64);
      *(_OWORD *)(v7 - 72) = 0uLL;
      *(void *)(v6 - 64) = v8;
      LODWORD(v8) = *(_DWORD *)(v2 + v5 - 56);
      *(unsigned char *)(v6 - 52) = *(unsigned char *)(v2 + v5 - 52);
      *(_DWORD *)(v6 - 56) = v8;
      long long v9 = *(_OWORD *)(v2 + v5 - 48);
      *(void *)(v6 - 32) = *(void *)(v2 + v5 - 32);
      *(_OWORD *)(v6 - 48) = v9;
      *(void *)(v7 - 40) = 0;
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 48) = 0;
      long long v10 = *(_OWORD *)(v2 + v5 - 24);
      *(void *)(v6 - 8) = *(void *)(v2 + v5 - 8);
      *(_OWORD *)(v6 - 24) = v10;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(void *)(v7 - 24) = 0;
      v5 -= 192;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v11 = *result;
  int *result = v4;
  a2[1] = v11;
  uint64_t v12 = result[1];
  result[1] = a2[2];
  a2[2] = v12;
  uint64_t v13 = result[2];
  result[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

uint64_t sub_96F694(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 192;
    sub_4D4B58(i - 160);
    uint64_t v4 = *(void **)(i - 184);
    if (v4)
    {
      *(void *)(i - 176) = v4;
      operator delete(v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *sub_96F704(void **a1, const char *a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(24 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = &v7[24 * v3];
  unint64_t v21 = v8;
  int v22 = v8;
  BOOL v23 = &v7[24 * v6];
  size_t v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v15 = v9 | 7;
    }
    uint64_t v16 = v15 + 1;
    uint64_t v17 = (char *)operator new(v15 + 1);
    *((void *)v8 + 1) = v10;
    *((void *)v8 + 2) = v16 | 0x8000000000000000;
    *(void *)uint64_t v8 = v17;
    uint64_t v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      char *v8 = 0;
      uint64_t v11 = v8;
      uint64_t v12 = v8 + 24;
      uint64_t v13 = (char *)*a1;
      int64_t v14 = (char *)a1[1];
      if (v14 == *a1) {
        goto LABEL_23;
      }
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  uint64_t v11 = v21;
  uint64_t v12 = v22 + 24;
  uint64_t v13 = (char *)*a1;
  int64_t v14 = (char *)a1[1];
  if (v14 == *a1)
  {
LABEL_23:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_28;
  }
  do
  {
LABEL_20:
    long long v18 = *(_OWORD *)(v14 - 24);
    *((void *)v11 - 1) = *((void *)v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *((void *)v14 - 2) = 0;
    *((void *)v14 - 1) = 0;
    *((void *)v14 - 3) = 0;
    v14 -= 24;
  }
  while (v14 != v13);
  uint64_t v19 = (char *)*a1;
  int64_t v14 = (char *)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  if (v14 != v19)
  {
    do
    {
      if (*(v14 - 1) < 0) {
        operator delete(*((void **)v14 - 3));
      }
      v14 -= 24;
    }
    while (v14 != v19);
    int64_t v14 = v19;
  }
LABEL_28:
  if (v14) {
    operator delete(v14);
  }
  return v12;
}

void sub_96F920(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1D918((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_96F934(void **a1, const char *a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(24 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = &v7[24 * v3];
  unint64_t v21 = v8;
  int v22 = v8;
  BOOL v23 = &v7[24 * v6];
  size_t v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v15 = v9 | 7;
    }
    uint64_t v16 = v15 + 1;
    uint64_t v17 = (char *)operator new(v15 + 1);
    *((void *)v8 + 1) = v10;
    *((void *)v8 + 2) = v16 | 0x8000000000000000;
    *(void *)uint64_t v8 = v17;
    uint64_t v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      char *v8 = 0;
      uint64_t v11 = v8;
      uint64_t v12 = v8 + 24;
      uint64_t v13 = (char *)*a1;
      int64_t v14 = (char *)a1[1];
      if (v14 == *a1) {
        goto LABEL_23;
      }
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  uint64_t v11 = v21;
  uint64_t v12 = v22 + 24;
  uint64_t v13 = (char *)*a1;
  int64_t v14 = (char *)a1[1];
  if (v14 == *a1)
  {
LABEL_23:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_28;
  }
  do
  {
LABEL_20:
    long long v18 = *(_OWORD *)(v14 - 24);
    *((void *)v11 - 1) = *((void *)v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *((void *)v14 - 2) = 0;
    *((void *)v14 - 1) = 0;
    *((void *)v14 - 3) = 0;
    v14 -= 24;
  }
  while (v14 != v13);
  uint64_t v19 = (char *)*a1;
  int64_t v14 = (char *)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  if (v14 != v19)
  {
    do
    {
      if (*(v14 - 1) < 0) {
        operator delete(*((void **)v14 - 3));
      }
      v14 -= 24;
    }
    while (v14 != v19);
    int64_t v14 = v19;
  }
LABEL_28:
  if (v14) {
    operator delete(v14);
  }
  return v12;
}

void sub_96FB50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1D918((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_96FB64(void **a1, const char *a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(24 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = &v7[24 * v3];
  unint64_t v21 = v8;
  int v22 = v8;
  BOOL v23 = &v7[24 * v6];
  size_t v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v15 = v9 | 7;
    }
    uint64_t v16 = v15 + 1;
    uint64_t v17 = (char *)operator new(v15 + 1);
    *((void *)v8 + 1) = v10;
    *((void *)v8 + 2) = v16 | 0x8000000000000000;
    *(void *)uint64_t v8 = v17;
    uint64_t v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      char *v8 = 0;
      uint64_t v11 = v8;
      uint64_t v12 = v8 + 24;
      uint64_t v13 = (char *)*a1;
      int64_t v14 = (char *)a1[1];
      if (v14 == *a1) {
        goto LABEL_23;
      }
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  uint64_t v11 = v21;
  uint64_t v12 = v22 + 24;
  uint64_t v13 = (char *)*a1;
  int64_t v14 = (char *)a1[1];
  if (v14 == *a1)
  {
LABEL_23:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_28;
  }
  do
  {
LABEL_20:
    long long v18 = *(_OWORD *)(v14 - 24);
    *((void *)v11 - 1) = *((void *)v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *((void *)v14 - 2) = 0;
    *((void *)v14 - 1) = 0;
    *((void *)v14 - 3) = 0;
    v14 -= 24;
  }
  while (v14 != v13);
  uint64_t v19 = (char *)*a1;
  int64_t v14 = (char *)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  if (v14 != v19)
  {
    do
    {
      if (*(v14 - 1) < 0) {
        operator delete(*((void **)v14 - 3));
      }
      v14 -= 24;
    }
    while (v14 != v19);
    int64_t v14 = v19;
  }
LABEL_28:
  if (v14) {
    operator delete(v14);
  }
  return v12;
}

void sub_96FD80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1D918((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_96FD94(void **a1, const char *a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(24 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = &v7[24 * v3];
  unint64_t v21 = v8;
  int v22 = v8;
  BOOL v23 = &v7[24 * v6];
  size_t v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v15 = v9 | 7;
    }
    uint64_t v16 = v15 + 1;
    uint64_t v17 = (char *)operator new(v15 + 1);
    *((void *)v8 + 1) = v10;
    *((void *)v8 + 2) = v16 | 0x8000000000000000;
    *(void *)uint64_t v8 = v17;
    uint64_t v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      char *v8 = 0;
      uint64_t v11 = v8;
      uint64_t v12 = v8 + 24;
      uint64_t v13 = (char *)*a1;
      int64_t v14 = (char *)a1[1];
      if (v14 == *a1) {
        goto LABEL_23;
      }
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  uint64_t v11 = v21;
  uint64_t v12 = v22 + 24;
  uint64_t v13 = (char *)*a1;
  int64_t v14 = (char *)a1[1];
  if (v14 == *a1)
  {
LABEL_23:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_28;
  }
  do
  {
LABEL_20:
    long long v18 = *(_OWORD *)(v14 - 24);
    *((void *)v11 - 1) = *((void *)v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *((void *)v14 - 2) = 0;
    *((void *)v14 - 1) = 0;
    *((void *)v14 - 3) = 0;
    v14 -= 24;
  }
  while (v14 != v13);
  uint64_t v19 = (char *)*a1;
  int64_t v14 = (char *)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  if (v14 != v19)
  {
    do
    {
      if (*(v14 - 1) < 0) {
        operator delete(*((void **)v14 - 3));
      }
      v14 -= 24;
    }
    while (v14 != v19);
    int64_t v14 = v19;
  }
LABEL_28:
  if (v14) {
    operator delete(v14);
  }
  return v12;
}

void sub_96FFB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1D918((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_96FFC4()
{
  byte_25DACF7 = 1;
  word_25DACE0 = 65;
  byte_25DAD0F = 1;
  word_25DACF8 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25DADB8 = 0u;
  xmmword_25DADC8 = 0u;
  dword_25DADD8 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25DADB8, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25DADB8, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25DADB8, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25DADB8, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25DAD27 = 8;
  strcpy((char *)&qword_25DAD10, "any_mode");
  byte_25DAD3F = 7;
  strcpy((char *)&dword_25DAD28, "cycling");
  byte_25DAD57 = 7;
  strcpy((char *)&dword_25DAD40, "driving");
  byte_25DAD6F = 7;
  strcpy((char *)&dword_25DAD58, "walking");
  qword_25DAD78 = 0;
  qword_25DAD80 = 0;
  qword_25DAD70 = 0;
  v0 = operator new(9uLL);
  *(void *)v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25DAD70 = (uint64_t)v0;
  qword_25DAD78 = (uint64_t)(v0 + 9);
  qword_25DAD80 = (uint64_t)(v0 + 9);
  qword_25DAD88 = 0;
  qword_25DAD90 = 0;
  unk_25DAD98 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25DAD90 = (uint64_t)(v1 + 9);
  unk_25DAD98 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25DAD88 = (uint64_t)v1;
  return result;
}

void sub_970290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if ((void)xmmword_25DADC8) {
    sub_20ACB64((void **)xmmword_25DADC8);
  }
  uint64_t v37 = (void *)xmmword_25DADB8;
  *(void *)&xmmword_25DADB8 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_970330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if (a5) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 8;
  }
  if (!*(void *)(a1 + v5))
  {
    char v6 = a5;
    sub_4BBDC0((uint64_t)v10, a4);
    char v16 = v6 ^ 1;
    char v15 = 0;
    if ((v6 & 1) == 0)
    {
      int __src = 0;
      sub_147D0(v13, (char *)&__src, v10, 1uLL);
      char v17 = 0;
      if (*(_DWORD *)(a4 + 1436))
      {
        uint64_t v12 = v11;
        char v14 = 0;
      }
    }
    operator new();
  }
  return *(void *)(a1 + v5);
}

void sub_970478(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4BCED0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_97048C()
{
}

void sub_9704B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4BCED0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_9704D0(uint64_t a1, int a2, void *a3, uint64_t a4, uint64_t a5, long long *a6)
{
  *(_DWORD *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = sub_3757C8(a3);
  *(void *)(a1 + 24) = sub_375500(a3);
  *(void *)(a1 + 32) = sub_3755E4(a3);
  nullsub_1(a1 + 40);
  nullsub_1(a1 + 41);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a5;
  *(void *)(a1 + 72) = a4;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a4 + 968);
  uint64_t v11 = (unsigned char *)(a1 + 88);
  if (*((char *)a6 + 23) < 0)
  {
    sub_4200(v11, *(void **)a6, *((void *)a6 + 1));
  }
  else
  {
    long long v12 = *a6;
    *(void *)(a1 + 104) = *((void *)a6 + 2);
    *(_OWORD *)uint64_t v11 = v12;
  }
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 1065353216;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 184) = 1065353216;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 224) = 1065353216;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 264) = 1065353216;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_DWORD *)(a1 + 304) = 1065353216;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_DWORD *)(a1 + 344) = 1065353216;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_DWORD *)(a1 + 384) = 1065353216;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_DWORD *)(a1 + 424) = 1065353216;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 440) = 0;
  return a1;
}

void sub_9705E8(_Unwind_Exception *a1)
{
  sub_9705FC(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_9705FC(uint64_t *a1)
{
  uint64_t v2 = a1[1];
  a1[1] = 0;
  if (v2)
  {
    sub_7334AC(v2);
    operator delete();
  }
  uint64_t v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    sub_7334AC(v3);
    operator delete();
  }
  return a1;
}

unint64_t sub_97066C(uint64_t a1, unint64_t *a2)
{
  uint64_t v4 = a1 + 112;
  uint64_t v5 = sub_3FAA8C((void *)(a1 + 112), a2);
  if (!v5)
  {
    sub_725D0((uint64_t)v88);
    uint64_t v7 = *(void *)(a1 + 64);
    unint64_t v8 = *(void *)(v7 + 8);
    if (v8 >= *(void *)(v7 + 16))
    {
      size_t v9 = sub_977710(*(void ***)(a1 + 64));
    }
    else
    {
      *(_OWORD *)(v8 + 8) = 0u;
      *(_OWORD *)(v8 + 24) = 0u;
      *(_OWORD *)(v8 + 40) = 0u;
      *(_OWORD *)(v8 + 56) = 0u;
      *(_OWORD *)(v8 + 72) = 0u;
      *(_OWORD *)(v8 + 88) = 0u;
      *(_OWORD *)(v8 + 104) = 0u;
      *(_OWORD *)(v8 + 152) = 0u;
      *(_OWORD *)(v8 + 136) = 0u;
      *(_OWORD *)(v8 + 120) = 0u;
      *(void *)unint64_t v8 = -1;
      *(_DWORD *)(v8 + 8) = 0x7FFFFFFF;
      *(_OWORD *)(v8 + 16) = 0u;
      *(_OWORD *)(v8 + 32) = 0u;
      *(_OWORD *)(v8 + 48) = 0u;
      *(_OWORD *)(v8 + 64) = 0u;
      *(void *)(v8 + 80) = 0;
      *(void *)(v8 + 88) = -1;
      *(_DWORD *)(v8 + 100) = -1;
      *(void *)(v8 + 104) = -1;
      *(void *)(v8 + 157) = 0;
      *(_OWORD *)(v8 + 128) = 0u;
      *(_OWORD *)(v8 + 144) = 0u;
      size_t v9 = (char *)(v8 + 168);
      *(_OWORD *)(v8 + 112) = 0u;
    }
    *(void *)(v7 + 8) = v9;
    uint64_t v10 = *(void *)(*(void *)(a1 + 64) + 8);
    uint64_t v11 = (int *)sub_498D5C(*(void *)(a1 + 24), *a2, 0, "stop");
    uint64_t v12 = (uint64_t)v11 + *(unsigned __int16 *)((char *)v11 - *v11 + 6);
    uint64_t v13 = *(unsigned int *)v12;
    LODWORD(v12) = *(_DWORD *)(v12 + 4);
    if (v12 >= 0xFFFFFFFE) {
      uint64_t v12 = 4294967294;
    }
    else {
      uint64_t v12 = v12;
    }
    *(void *)(v10 - 168) = v13 | (v12 << 32);
    *(_DWORD *)(v10 - 160) = 0x7FFFFFFF;
    uint64_t v14 = *(void *)(a1 + 24);
    char v15 = (int *)sub_498D5C(v14, *a2, 0, "stop");
    char v16 = (unsigned __int16 *)((char *)v15 - *v15);
    if (*v16 >= 5u && (uint64_t v17 = v16[2]) != 0) {
      uint64_t v18 = *(void *)((char *)v15 + v17);
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v19 = sub_398020(v14, 0);
    unint64_t v20 = &v19[-*(int *)v19];
    if (*(unsigned __int16 *)v20 >= 0xBu)
    {
      uint64_t v21 = *((unsigned __int16 *)v20 + 5);
      if (v21)
      {
        if (v19[v21]) {
          uint64_t v18 = nullsub_1(v18);
        }
      }
    }
    *(void *)(v10 - 80) = v18;
    *(void *)(v10 - 72) = *a2;
    int v22 = (int *)sub_498D5C(*(void *)(a1 + 24), *a2, 0, "stop");
    BOOL v23 = (unsigned __int16 *)((char *)v22 - *v22);
    if (*v23 >= 9u && (uint64_t v24 = v23[4]) != 0) {
      unint64_t v25 = (char **)((char *)v22 + v24 + *(unsigned int *)((char *)v22 + v24));
    }
    else {
      unint64_t v25 = 0;
    }
    sub_8F48DC(v25, (void (*)(void **__return_ptr, char *))sub_4A0694, (uint64_t)&v85);
    sub_997050((uint64_t *)&v85, *(void *)(a1 + 72) + 968, __p);
    unint64_t v26 = (void **)(v10 - 152);
    uint64_t v27 = *(void *)(v10 - 152);
    if (!v27) {
      goto LABEL_31;
    }
    uint64_t v28 = *(void *)(v10 - 144);
    uint64_t v29 = *(void **)(v10 - 152);
    if (v28 == v27)
    {
LABEL_30:
      *(void *)(v10 - 144) = v27;
      operator delete(v29);
      *unint64_t v26 = 0;
      *(void *)(v10 - 144) = 0;
      *(void *)(v10 - 136) = 0;
LABEL_31:
      *(_OWORD *)(v10 - 152) = *(_OWORD *)__p;
      *(void *)(v10 - 136) = v82;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v82 = 0;
      uint64_t v30 = v85;
      if (v85)
      {
        int v31 = v86;
        uint64_t v32 = v85;
        if (v86 != v85)
        {
          do
          {
            uint64_t v33 = *((void *)v31 - 3);
            if (v33)
            {
              uint64_t v34 = *((void *)v31 - 2);
              std::string v35 = (void *)*((void *)v31 - 3);
              if (v34 != v33)
              {
                do
                {
                  if (*(char *)(v34 - 1) < 0) {
                    operator delete(*(void **)(v34 - 24));
                  }
                  v34 -= 32;
                }
                while (v34 != v33);
                std::string v35 = (void *)*((void *)v31 - 3);
              }
              *((void *)v31 - 2) = v33;
              operator delete(v35);
            }
            long long v36 = (void **)(v31 - 16);
            if (*((char *)v31 - 41) < 0) {
              operator delete(*v36);
            }
            v31 -= 16;
          }
          while (v36 != (void **)v30);
          uint64_t v32 = v85;
        }
        int v86 = v30;
        operator delete(v32);
      }
      sub_994EAC((uint64_t *)(v10 - 152), (uint64_t)__p);
      uint64_t v37 = (void **)(v10 - 128);
      if (*(char *)(v10 - 105) < 0) {
        operator delete(*v37);
      }
      long long v38 = *(_OWORD *)__p;
      *(void *)(v10 - 112) = v82;
      *(_OWORD *)uint64_t v37 = v38;
      char v39 = (int *)sub_498D5C(*(void *)(a1 + 24), *a2, 0, "stop");
      long long v40 = (unsigned __int16 *)((char *)v39 - *v39);
      if (*v40 >= 0x31u && (uint64_t v41 = v40[24]) != 0) {
        long long v42 = (char **)((char *)v39 + v41 + *(unsigned int *)((char *)v39 + v41));
      }
      else {
        long long v42 = 0;
      }
      sub_976524(v42, (void (*)(void **__return_ptr, char *))sub_9765C8, (uint64_t)&v85);
      sub_998458(&v85, *(_DWORD *)(a1 + 80), (uint64_t *)(v10 - 152), (uint64_t)__p);
      uint64_t v43 = (void **)(v10 - 104);
      uint64_t v44 = *(void *)(v10 - 104);
      if (!v44)
      {
LABEL_63:
        *(_OWORD *)(v10 - 104) = *(_OWORD *)__p;
        *(void *)(v10 - 88) = v82;
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v82 = 0;
        uint64_t v47 = v85;
        if (v85)
        {
          long long v48 = v86;
          int64_t v49 = v85;
          if (v86 != v85)
          {
            do
            {
              uint64_t v50 = *((void *)v48 - 3);
              if (v50)
              {
                uint64_t v51 = *((void *)v48 - 2);
                uint64_t v52 = (void *)*((void *)v48 - 3);
                if (v51 != v50)
                {
                  do
                  {
                    if (*(char *)(v51 - 1) < 0) {
                      operator delete(*(void **)(v51 - 24));
                    }
                    v51 -= 32;
                  }
                  while (v51 != v50);
                  uint64_t v52 = (void *)*((void *)v48 - 3);
                }
                *((void *)v48 - 2) = v50;
                operator delete(v52);
              }
              if (*((char *)v48 - 41) < 0) {
                operator delete(*((void **)v48 - 8));
              }
              v48 -= 20;
            }
            while (v48 != v47);
            int64_t v49 = v85;
          }
          int v86 = v47;
          operator delete(v49);
        }
        uint64_t v53 = (int *)sub_498D5C(*(void *)(a1 + 24), *a2, 0, "stop");
        LOBYTE(v54) = 0;
        std::string v55 = (unsigned __int16 *)((char *)v53 - *v53);
        if (*v55 >= 0x23u)
        {
          uint64_t v54 = v55[17];
          if (v55[17]) {
            LOBYTE(v54) = *((unsigned char *)v53 + v54);
          }
        }
        *(unsigned char *)(v10 - 6) = v54;
        sub_9714A8(*(void *)(a1 + 24), a2, (uint64_t)__p);
        sub_971158(a1, (unsigned __int8 **)__p, (uint64_t)&v85);
        char v56 = BYTE1(v85);
        if (BYTE1(v85))
        {
          *(unsigned char *)(v10 - 8) = (_BYTE)v85;
          char v56 = 1;
        }
        *(unsigned char *)(v10 - 7) = v56;
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        std::string v57 = (int *)sub_498D5C(*(void *)(a1 + 24), *a2, 0, "stop");
        LOBYTE(v58) = 0;
        std::string v59 = (unsigned __int16 *)((char *)v57 - *v57);
        if (*v59 >= 0x45u)
        {
          uint64_t v58 = v59[34];
          if (v59[34]) {
            LOBYTE(v58) = *((unsigned char *)v57 + v58) != 0;
          }
        }
        *(unsigned char *)(v10 - 4) = v58;
        std::string v60 = (int *)sub_498D5C(*(void *)(a1 + 24), *a2, 0, "stop");
        unint64_t v61 = *(void *)((char *)v60 + *(unsigned __int16 *)((char *)v60 - *v60 + 10));
        if (v61) {
          BOOL v62 = HIDWORD(v61) == 0xFFFFFFFF;
        }
        else {
          BOOL v62 = 1;
        }
        if (!v62)
        {
          __p[0] = *(void **)((char *)v60 + *(unsigned __int16 *)((char *)v60 - *v60 + 10));
          *(void *)(v10 - 64) = sub_971664(a1, (unint64_t *)__p);
          std::string::size_type v63 = (int *)sub_8ED3D4(*(void *)(a1 + 24), v61, 0, "hall");
          unint64_t v64 = *(void *)((char *)v63 + *(unsigned __int16 *)((char *)v63 - *v63 + 10));
          if (v64 <= 0xFFFFFFFEFFFFFFFFLL
            && *(void *)((char *)v63 + *(unsigned __int16 *)((char *)v63 - *v63 + 10)) != 0)
          {
            int v66 = (int *)sub_8ED928(*(void *)(a1 + 24), v64, 0, "station");
            LOBYTE(v67) = 0;
            uint64_t v68 = (unsigned __int16 *)((char *)v66 - *v66);
            if (*v68 >= 0xBu)
            {
              uint64_t v67 = v68[5];
              if (v68[5]) {
                LOBYTE(v67) = *(int *)((char *)v66 + v67 + *(unsigned int *)((char *)v66 + v67)) != 0;
              }
            }
            *(unsigned char *)(v10 - 5) = v67;
          }
        }
        uint64_t v69 = (int *)sub_498D5C(*(void *)(a1 + 24), *a2, 0, "stop");
        unint64_t v70 = (unsigned __int16 *)((char *)v69 - *v69);
        if (*v70 < 0x2Bu || (uint64_t v71 = v70[21]) == 0)
        {
          HIBYTE(v82) = 0;
          LOBYTE(__p[0]) = 0;
          int v77 = (std::string *)(v10 - 32);
          if (*(char *)(v10 - 9) < 0) {
            goto LABEL_116;
          }
          goto LABEL_107;
        }
        int v72 = (unsigned int *)((char *)v69 + v71);
        uint64_t v73 = *v72;
        long long v75 = (char *)v72 + v73 + 4;
        size_t v74 = *(unsigned int *)((char *)v72 + v73);
        if (v74 >= 0x17)
        {
          if ((v74 | 7) == 0x17) {
            uint64_t v79 = (v74 & 0xFFFFFFF8) + 8;
          }
          else {
            uint64_t v79 = v74 | 7;
          }
          uint64_t v76 = operator new(v79 + 1);
          __p[1] = (void *)v74;
          uint64_t v82 = v79 - 0x7FFFFFFFFFFFFFFFLL;
          __p[0] = v76;
        }
        else
        {
          HIBYTE(v82) = *(unsigned int *)((char *)v72 + v73);
          uint64_t v76 = __p;
          if (!v74)
          {
LABEL_115:
            *((unsigned char *)v76 + v74) = 0;
            int v77 = (std::string *)(v10 - 32);
            if (*(char *)(v10 - 9) < 0)
            {
LABEL_116:
              operator delete(v77->__r_.__value_.__l.__data_);
              *(_OWORD *)&v77->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
              v77->__r_.__value_.__r.__words[2] = v82;
              int v78 = *(char *)(v10 - 9);
              if (v78 < 0)
              {
LABEL_117:
                if (!*(void *)(v10 - 24))
                {
LABEL_118:
                  if (sub_723EC(1u))
                  {
                    sub_6BAC((uint64_t)__p);
                    sub_188FC78(__p, (uint64_t)"Could not resolve time zone for stop ", 37);
                    std::ostream::operator<<();
                    std::stringbuf::str();
                    sub_7246C((uint64_t *)&v85, 1u);
                    if (v87 < 0) {
                      operator delete(v85);
                    }
                    if (v84 < 0) {
                      operator delete(v83);
                    }
                    std::streambuf::~streambuf();
                    std::ostream::~ostream();
                    std::ios::~ios();
                  }
                  std::string::assign(v77, "UTC");
                }
LABEL_125:
                unint64_t v6 = 0xCF3CF3CF3CF3CF3DLL
                   * ((uint64_t)(*(void *)(*(void *)(a1 + 64) + 8) - **(void **)(a1 + 64)) >> 3)
                   - 1;
                __p[0] = a2;
                sub_977980(v4, a2, (uint64_t)&unk_20F06E0, (void **)__p)[3] = v6;
                *(double *)(a1 + 432) = sub_72688((uint64_t)v88) + *(double *)(a1 + 432);
                return v6;
              }
LABEL_108:
              if (!(_BYTE)v78) {
                goto LABEL_118;
              }
              goto LABEL_125;
            }
LABEL_107:
            *(_OWORD *)&v77->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
            v77->__r_.__value_.__r.__words[2] = v82;
            int v78 = *(char *)(v10 - 9);
            if (v78 < 0) {
              goto LABEL_117;
            }
            goto LABEL_108;
          }
        }
        memcpy(v76, v75, v74);
        goto LABEL_115;
      }
      uint64_t v45 = *(void *)(v10 - 96);
      long long v46 = *(void **)(v10 - 104);
      if (v45 == v44)
      {
LABEL_62:
        *(void *)(v10 - 96) = v44;
        operator delete(v46);
        *uint64_t v43 = 0;
        *(void *)(v10 - 96) = 0;
        *(void *)(v10 - 88) = 0;
        goto LABEL_63;
      }
      while (1)
      {
        if (*(char *)(v45 - 1) < 0)
        {
          operator delete(*(void **)(v45 - 24));
          if ((*(char *)(v45 - 33) & 0x80000000) == 0) {
            goto LABEL_57;
          }
LABEL_60:
          operator delete(*(void **)(v45 - 56));
          v45 -= 64;
          if (v45 == v44)
          {
LABEL_61:
            long long v46 = *v43;
            goto LABEL_62;
          }
        }
        else
        {
          if (*(char *)(v45 - 33) < 0) {
            goto LABEL_60;
          }
LABEL_57:
          v45 -= 64;
          if (v45 == v44) {
            goto LABEL_61;
          }
        }
      }
    }
    while (1)
    {
      if (*(char *)(v28 - 1) < 0)
      {
        operator delete(*(void **)(v28 - 24));
        if ((*(char *)(v28 - 33) & 0x80000000) == 0) {
          goto LABEL_25;
        }
LABEL_28:
        operator delete(*(void **)(v28 - 56));
        v28 -= 56;
        if (v28 == v27)
        {
LABEL_29:
          uint64_t v29 = *v26;
          goto LABEL_30;
        }
      }
      else
      {
        if (*(char *)(v28 - 33) < 0) {
          goto LABEL_28;
        }
LABEL_25:
        v28 -= 56;
        if (v28 == v27) {
          goto LABEL_29;
        }
      }
    }
  }
  return v5[3];
}

void sub_971004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(char *)(v9 - 113) < 0)
  {
    operator delete(*(void **)(v9 - 136));
    sub_111ECAC((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_971050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void **sub_971094(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *((void *)v3 - 3);
        if (v5)
        {
          uint64_t v6 = *((void *)v3 - 2);
          uint64_t v7 = (void *)*((void *)v3 - 3);
          if (v6 != v5)
          {
            do
            {
              if (*(char *)(v6 - 1) < 0) {
                operator delete(*(void **)(v6 - 24));
              }
              v6 -= 32;
            }
            while (v6 != v5);
            uint64_t v7 = (void *)*((void *)v3 - 3);
          }
          *((void *)v3 - 2) = v5;
          operator delete(v7);
        }
        if (*(v3 - 41) < 0) {
          operator delete(*((void **)v3 - 8));
        }
        v3 -= 80;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_971158(uint64_t a1@<X0>, unsigned __int8 **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 == v3)
  {
    *(_WORD *)a3 = 0;
    return;
  }
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v34 = a2[1];
  do
  {
    while (1)
    {
      int v8 = *v4;
      if (v5 >= v6) {
        break;
      }
      *(_DWORD *)uint64_t v5 = v8;
      v5 += 4;
      v4 += 2;
      if (v4 == v3) {
        goto LABEL_33;
      }
    }
    uint64_t v9 = (v5 - v7) >> 2;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62) {
      sub_2E00();
    }
    if ((v6 - v7) >> 1 > v10) {
      unint64_t v10 = (v6 - v7) >> 1;
    }
    if ((unint64_t)(v6 - v7) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11)
    {
      if (v11 >> 62) {
        sub_188D718();
      }
      uint64_t v12 = operator new(4 * v11);
      uint64_t v13 = &v12[4 * v9];
      *(_DWORD *)uint64_t v13 = v8;
      uint64_t v14 = (uint64_t)(v13 + 4);
      if (v5 == v7) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = (char *)(4 * v9);
      *(_DWORD *)(4 * v9) = v8;
      uint64_t v14 = 4 * v9 + 4;
      if (v5 == v7) {
        goto LABEL_19;
      }
    }
    unint64_t v15 = v5 - 4 - v7;
    if (v15 < 0xBC)
    {
      char v16 = v5;
      goto LABEL_18;
    }
    if (&v12[v5 - v7 - 4 - (v15 & 0xFFFFFFFFFFFFFFFCLL)] > &v12[v5 - v7 - 4])
    {
      char v16 = v5;
      do
      {
LABEL_18:
        int v17 = *((_DWORD *)v16 - 1);
        v16 -= 4;
        *((_DWORD *)v13 - 1) = v17;
        v13 -= 4;
      }
      while (v16 != v7);
      goto LABEL_19;
    }
    if (&v5[-(v15 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v5 - 4)
    {
      char v16 = v5;
      goto LABEL_18;
    }
    if ((unint64_t)(v7 - v12) < 0x20)
    {
      char v16 = v5;
      goto LABEL_18;
    }
    uint64_t v18 = (v15 >> 2) + 1;
    uint64_t v19 = 4 * (v18 & 0x7FFFFFFFFFFFFFF8);
    char v16 = &v5[-v19];
    v13 -= v19;
    unint64_t v20 = &v12[4 * v9 - 16];
    uint64_t v21 = v5 - 16;
    uint64_t v22 = v18 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v23 = *(_OWORD *)v21;
      *(v20 - 1) = *((_OWORD *)v21 - 1);
      *unint64_t v20 = v23;
      v20 -= 2;
      v21 -= 32;
      v22 -= 8;
    }
    while (v22);
    if (v18 != (v18 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_18;
    }
LABEL_19:
    uint64_t v6 = &v12[4 * v11];
    if (v7) {
      operator delete(v7);
    }
    uint64_t v7 = v13;
    uint64_t v5 = (char *)v14;
    uint64_t v3 = v34;
    v4 += 2;
  }
  while (v4 != v34);
LABEL_33:
  int v24 = *(_DWORD *)(a1 + 80);
  unint64_t v25 = operator new(4uLL);
  *unint64_t v25 = v24;
  uint64_t v26 = sub_656AC();
  v38[0] = v25;
  v38[1] = v25 + 1;
  int v39 = 4;
  uint64_t v40 = 1;
  v35[0] = v7;
  v35[1] = v5;
  int v36 = 3;
  uint64_t v37 = (v5 - v7) >> 2;
  int v27 = (*(uint64_t (**)(uint64_t, void *, void *))(*(void *)v26 + 40))(v26, v38, v35);
  unint64_t v28 = a2[1] - *a2;
  if (!v28) {
    sub_66748();
  }
  BOOL v29 = v27 >= (int)(v28 >> 1) || v27 <= -1;
  uint64_t v30 = v27;
  if (v29) {
    uint64_t v30 = 0;
  }
  *(unsigned char *)a3 = (*a2)[2 * v30 + 1];
  *(unsigned char *)(a3 + 1) = 1;
  operator delete(v25);
  if (v7) {
    operator delete(v7);
  }
}

void sub_97145C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  operator delete(v17);
  if (v16) {
    operator delete(v16);
  }
  _Unwind_Resume(a1);
}

int *sub_9714A8@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  double result = (int *)sub_498D5C(a1, *a2, 0, "stop");
  uint64_t v5 = (unsigned __int16 *)((char *)result - *result);
  if (*v5 >= 0x1Du
    && (uint64_t v6 = v5[14]) != 0
    && (uint64_t v7 = result,
        uint64_t v8 = *(unsigned int *)((char *)result + v6),
        uint64_t v9 = (unsigned int *)((char *)result + v6 + v8),
        uint64_t v10 = *v9,
        v10))
  {
    unint64_t v11 = operator new(2 * v10);
    uint64_t v12 = 0;
    *(void *)&long long v24 = v11;
    *((void *)&v24 + 1) = v11;
    unint64_t v25 = &v11[v10];
    uint64_t v13 = (char *)v7 + v6 + v8;
    do
    {
      uint64_t v14 = v9[v12 + 1];
      unint64_t v15 = (char *)&v9[v12] + v14;
      char v16 = (char *)&v9[v12] + v14 - *((int *)v15 + 1);
      if (*((unsigned __int16 *)v16 + 2) >= 5u && (uint64_t v17 = *((unsigned __int16 *)v16 + 4)) != 0) {
        uint64_t v18 = &v13[v12 * 4 + 4 + v14 + v17 + *(unsigned int *)&v13[v12 * 4 + 4 + v14 + v17]];
      }
      else {
        uint64_t v18 = 0;
      }
      uint64_t v26 = sub_2A56E0(v18);
      unsigned __int8 v19 = sub_1132F10(&v26);
      unint64_t v20 = &v13[v12 * 4 + v14 - *((int *)v15 + 1)];
      if (*((unsigned __int16 *)v20 + 2) < 7u)
      {
        LOBYTE(v21) = 0;
      }
      else
      {
        uint64_t v21 = *((unsigned __int16 *)v20 + 5);
        if (v21) {
          LOBYTE(v21) = v13[v12 * 4 + 4 + v14 + v21];
        }
      }
      LOWORD(v26) = v19 | (v21 << 8);
      double result = (int *)sub_9773B0((unint64_t *)&v24, v11, &v26);
      unint64_t v11 = (_WORD *)result + 1;
      ++v12;
    }
    while (v10 != v12);
    long long v22 = v24;
    long long v23 = v25;
  }
  else
  {
    long long v23 = 0;
    long long v22 = 0uLL;
  }
  *(_OWORD *)a3 = v22;
  *(void *)(a3 + 16) = v23;
  return result;
}

void sub_971648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_971664(uint64_t a1, unint64_t *a2)
{
  uint64_t v4 = a1 + 152;
  uint64_t v5 = sub_3FAA8C((void *)(a1 + 152), a2);
  if (v5) {
    return v5[3];
  }
  sub_725D0((uint64_t)v63);
  uint64_t v7 = *(void *)(a1 + 64);
  unint64_t v8 = *(void *)(v7 + 32);
  if (v8 >= *(void *)(v7 + 40))
  {
    uint64_t v9 = sub_977CF0((void **)(v7 + 24));
  }
  else
  {
    *(_OWORD *)(v8 + 8) = 0u;
    *(_OWORD *)(v8 + 24) = 0u;
    *(_OWORD *)(v8 + 40) = 0u;
    *(_OWORD *)(v8 + 56) = 0u;
    *(_OWORD *)(v8 + 72) = 0u;
    *(_OWORD *)(v8 + 88) = 0u;
    *(_OWORD *)(v8 + 104) = 0u;
    *(void *)unint64_t v8 = -1;
    *(_DWORD *)(v8 + 8) = 0x7FFFFFFF;
    *(_OWORD *)(v8 + 16) = 0u;
    *(_OWORD *)(v8 + 32) = 0u;
    *(_OWORD *)(v8 + 48) = 0u;
    *(_OWORD *)(v8 + 64) = 0u;
    *(void *)(v8 + 80) = 0;
    *(void *)(v8 + 88) = -1;
    *(_DWORD *)(v8 + 100) = -1;
    *(void *)(v8 + 104) = -1;
    *(void *)(v8 + 120) = 0;
    *(void *)(v8 + 128) = 0;
    uint64_t v9 = (char *)(v8 + 144);
    *(void *)(v8 + 136) = 0;
  }
  *(void *)(v7 + 32) = v9;
  uint64_t v10 = *(void *)(*(void *)(a1 + 64) + 32);
  unint64_t v11 = (int *)sub_8ED3D4(*(void *)(a1 + 24), *a2, 0, "hall");
  uint64_t v12 = (uint64_t)v11 + *(unsigned __int16 *)((char *)v11 - *v11 + 6);
  uint64_t v13 = *(unsigned int *)v12;
  LODWORD(v12) = *(_DWORD *)(v12 + 4);
  if (v12 >= 0xFFFFFFFE) {
    uint64_t v12 = 4294967294;
  }
  else {
    uint64_t v12 = v12;
  }
  *(void *)(v10 - 144) = v13 | (v12 << 32);
  *(_DWORD *)(v10 - 136) = 0x7FFFFFFF;
  uint64_t v14 = *(void *)(a1 + 24);
  unint64_t v15 = (int *)sub_8ED3D4(v14, *a2, 0, "hall");
  char v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 >= 5u && (uint64_t v17 = v16[2]) != 0) {
    uint64_t v18 = *(void *)((char *)v15 + v17);
  }
  else {
    uint64_t v18 = 0;
  }
  unsigned __int8 v19 = sub_398020(v14, 0);
  unint64_t v20 = &v19[-*(int *)v19];
  if (*(unsigned __int16 *)v20 >= 0xBu)
  {
    uint64_t v21 = *((unsigned __int16 *)v20 + 5);
    if (v21)
    {
      if (v19[v21]) {
        uint64_t v18 = nullsub_1(v18);
      }
    }
  }
  *(void *)(v10 - 56) = v18;
  *(void *)(v10 - 48) = *a2;
  long long v22 = (int *)sub_8ED3D4(*(void *)(a1 + 24), *a2, 0, "hall");
  long long v23 = (unsigned __int16 *)((char *)v22 - *v22);
  if (*v23 >= 9u && (uint64_t v24 = v23[4]) != 0) {
    unint64_t v25 = (char **)((char *)v22 + v24 + *(unsigned int *)((char *)v22 + v24));
  }
  else {
    unint64_t v25 = 0;
  }
  sub_8F48DC(v25, (void (*)(void **__return_ptr, char *))sub_4A0694, (uint64_t)&__p);
  sub_997050((uint64_t *)&__p, *(void *)(a1 + 72) + 968, v61);
  uint64_t v26 = (void **)(v10 - 128);
  uint64_t v27 = *(void *)(v10 - 128);
  if (v27)
  {
    uint64_t v28 = *(void *)(v10 - 120);
    BOOL v29 = *(void **)(v10 - 128);
    if (v28 == v27)
    {
LABEL_30:
      *(void *)(v10 - 120) = v27;
      operator delete(v29);
      *uint64_t v26 = 0;
      *(void *)(v10 - 120) = 0;
      *(void *)(v10 - 112) = 0;
      goto LABEL_31;
    }
    while (1)
    {
      if (*(char *)(v28 - 1) < 0)
      {
        operator delete(*(void **)(v28 - 24));
        if ((*(char *)(v28 - 33) & 0x80000000) == 0) {
          goto LABEL_25;
        }
LABEL_28:
        operator delete(*(void **)(v28 - 56));
        v28 -= 56;
        if (v28 == v27)
        {
LABEL_29:
          BOOL v29 = *v26;
          goto LABEL_30;
        }
      }
      else
      {
        if (*(char *)(v28 - 33) < 0) {
          goto LABEL_28;
        }
LABEL_25:
        v28 -= 56;
        if (v28 == v27) {
          goto LABEL_29;
        }
      }
    }
  }
LABEL_31:
  *(_OWORD *)(v10 - 128) = *(_OWORD *)v61;
  *(void *)(v10 - 112) = v62;
  v61[0] = 0;
  v61[1] = 0;
  uint64_t v62 = 0;
  uint64_t v30 = (void **)__p;
  if (__p)
  {
    int v31 = v60;
    uint64_t v32 = __p;
    if (v60 != __p)
    {
      do
      {
        uint64_t v33 = (void **)*(v31 - 3);
        if (v33)
        {
          uint64_t v34 = (void **)*(v31 - 2);
          std::string v35 = *(v31 - 3);
          if (v34 != v33)
          {
            do
            {
              if (*((char *)v34 - 1) < 0) {
                operator delete(*(v34 - 3));
              }
              v34 -= 4;
            }
            while (v34 != v33);
            std::string v35 = *(v31 - 3);
          }
          *(v31 - 2) = v33;
          operator delete(v35);
        }
        int v36 = v31 - 8;
        if (*((char *)v31 - 41) < 0) {
          operator delete(*v36);
        }
        v31 -= 8;
      }
      while (v36 != v30);
      uint64_t v32 = __p;
    }
    std::string v60 = v30;
    operator delete(v32);
  }
  sub_994EAC((uint64_t *)(v10 - 128), (uint64_t)v61);
  uint64_t v37 = (void **)(v10 - 104);
  if (*(char *)(v10 - 81) < 0) {
    operator delete(*v37);
  }
  long long v38 = *(_OWORD *)v61;
  *(void *)(v10 - 88) = v62;
  *(_OWORD *)uint64_t v37 = v38;
  int v39 = (int *)sub_8ED3D4(*(void *)(a1 + 24), *a2, 0, "hall");
  uint64_t v40 = (unsigned __int16 *)((char *)v39 - *v39);
  if (*v40 >= 0x25u && (uint64_t v41 = v40[18]) != 0) {
    long long v42 = (char **)((char *)v39 + v41 + *(unsigned int *)((char *)v39 + v41));
  }
  else {
    long long v42 = 0;
  }
  sub_976524(v42, (void (*)(void **__return_ptr, char *))sub_9765C8, (uint64_t)&__p);
  sub_998458((int **)&__p, *(_DWORD *)(a1 + 80), (uint64_t *)(v10 - 128), (uint64_t)v61);
  uint64_t v43 = (void **)(v10 - 80);
  uint64_t v44 = *(void *)(v10 - 80);
  if (!v44) {
    goto LABEL_63;
  }
  uint64_t v45 = *(void *)(v10 - 72);
  long long v46 = *(void **)(v10 - 80);
  if (v45 != v44)
  {
    while (1)
    {
      if (*(char *)(v45 - 1) < 0)
      {
        operator delete(*(void **)(v45 - 24));
        if ((*(char *)(v45 - 33) & 0x80000000) == 0) {
          goto LABEL_57;
        }
LABEL_60:
        operator delete(*(void **)(v45 - 56));
        v45 -= 64;
        if (v45 == v44)
        {
LABEL_61:
          long long v46 = *v43;
          break;
        }
      }
      else
      {
        if (*(char *)(v45 - 33) < 0) {
          goto LABEL_60;
        }
LABEL_57:
        v45 -= 64;
        if (v45 == v44) {
          goto LABEL_61;
        }
      }
    }
  }
  *(void *)(v10 - 72) = v44;
  operator delete(v46);
  *uint64_t v43 = 0;
  *(void *)(v10 - 72) = 0;
  *(void *)(v10 - 64) = 0;
LABEL_63:
  *(_OWORD *)(v10 - 80) = *(_OWORD *)v61;
  *(void *)(v10 - 64) = v62;
  v61[0] = 0;
  v61[1] = 0;
  uint64_t v62 = 0;
  uint64_t v47 = (void **)__p;
  if (__p)
  {
    long long v48 = v60;
    int64_t v49 = __p;
    if (v60 != __p)
    {
      do
      {
        uint64_t v50 = (void **)*(v48 - 3);
        if (v50)
        {
          uint64_t v51 = (void **)*(v48 - 2);
          uint64_t v52 = *(v48 - 3);
          if (v51 != v50)
          {
            do
            {
              if (*((char *)v51 - 1) < 0) {
                operator delete(*(v51 - 3));
              }
              v51 -= 4;
            }
            while (v51 != v50);
            uint64_t v52 = *(v48 - 3);
          }
          *(v48 - 2) = v50;
          operator delete(v52);
        }
        if (*((char *)v48 - 41) < 0) {
          operator delete(*(v48 - 8));
        }
        v48 -= 10;
      }
      while (v48 != v47);
      int64_t v49 = __p;
    }
    std::string v60 = v47;
    operator delete(v49);
  }
  uint64_t v53 = (int *)sub_8ED3D4(*(void *)(a1 + 24), *a2, 0, "hall");
  unint64_t v54 = *(void *)((char *)v53 + *(unsigned __int16 *)((char *)v53 - *v53 + 10));
  BOOL v55 = HIDWORD(v54) == 0xFFFFFFFF || v54 == 0;
  uint64_t v56 = __ROR8__(v54, 32);
  if (v55) {
    uint64_t v56 = 0xFFFFFFFFLL;
  }
  v61[0] = (void *)__ROR8__(v56, 32);
  *(void *)(v10 - 40) = sub_971CD0(a1, (unint64_t *)v61);
  sub_972354(*(void *)(a1 + 24), a2, (uint64_t)v61);
  sub_971158(a1, (unsigned __int8 **)v61, (uint64_t)&__p);
  char v57 = BYTE1(__p);
  if (BYTE1(__p))
  {
    *(unsigned char *)(v10 - 32) = (_BYTE)__p;
    char v57 = 1;
  }
  *(unsigned char *)(v10 - 31) = v57;
  if (v61[0])
  {
    v61[1] = v61[0];
    operator delete(v61[0]);
  }
  unint64_t v6 = 0x8E38E38E38E38E39
     * ((uint64_t)(*(void *)(*(void *)(a1 + 64) + 32) - *(void *)(*(void *)(a1 + 64) + 24)) >> 4)
     - 1;
  v61[0] = a2;
  sub_977F28(v4, a2, (uint64_t)&unk_20F06E0, (void **)v61)[3] = v6;
  *(double *)(a1 + 432) = sub_72688((uint64_t)v63) + *(double *)(a1 + 432);
  return v6;
}

void sub_971C8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_971CA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_971094((void **)va);
  _Unwind_Resume(a1);
}

void sub_971CBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_8F36A0((void ***)va);
  _Unwind_Resume(a1);
}

unint64_t sub_971CD0(uint64_t a1, unint64_t *a2)
{
  uint64_t v4 = a1 + 192;
  uint64_t v5 = sub_3FAA8C((void *)(a1 + 192), a2);
  if (v5) {
    return v5[3];
  }
  sub_725D0((uint64_t)v63);
  uint64_t v7 = *(void *)(a1 + 64);
  unint64_t v8 = *(void *)(v7 + 56);
  if (v8 >= *(void *)(v7 + 64))
  {
    uint64_t v9 = sub_978298((void **)(v7 + 48));
  }
  else
  {
    *(_OWORD *)(v8 + 8) = 0u;
    *(_OWORD *)(v8 + 24) = 0u;
    *(_OWORD *)(v8 + 40) = 0u;
    *(_OWORD *)(v8 + 56) = 0u;
    *(_OWORD *)(v8 + 72) = 0u;
    *(_OWORD *)(v8 + 88) = 0u;
    *(void *)(v8 + 104) = 0;
    *(void *)(v8 + 112) = 0;
    *(void *)unint64_t v8 = -1;
    *(_DWORD *)(v8 + 8) = 0x7FFFFFFF;
    *(_OWORD *)(v8 + 16) = 0u;
    *(_OWORD *)(v8 + 32) = 0u;
    *(_OWORD *)(v8 + 48) = 0u;
    *(_OWORD *)(v8 + 64) = 0u;
    *(void *)(v8 + 80) = 0;
    *(void *)(v8 + 88) = -1;
    *(_DWORD *)(v8 + 100) = -1;
    uint64_t v9 = (char *)(v8 + 136);
    *(void *)(v8 + 120) = 0;
    *(void *)(v8 + 128) = 0;
  }
  *(void *)(v7 + 56) = v9;
  uint64_t v10 = *(void *)(*(void *)(a1 + 64) + 56);
  unint64_t v11 = (int *)sub_8ED928(*(void *)(a1 + 24), *a2, 0, "station");
  uint64_t v12 = (uint64_t)v11 + *(unsigned __int16 *)((char *)v11 - *v11 + 6);
  uint64_t v13 = *(unsigned int *)v12;
  LODWORD(v12) = *(_DWORD *)(v12 + 4);
  if (v12 >= 0xFFFFFFFE) {
    uint64_t v12 = 4294967294;
  }
  else {
    uint64_t v12 = v12;
  }
  *(void *)(v10 - 136) = v13 | (v12 << 32);
  *(_DWORD *)(v10 - 128) = 0x7FFFFFFF;
  uint64_t v14 = *(void *)(a1 + 24);
  unint64_t v15 = (int *)sub_8ED928(v14, *a2, 0, "station");
  char v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 >= 5u && (uint64_t v17 = v16[2]) != 0) {
    uint64_t v18 = *(void *)((char *)v15 + v17);
  }
  else {
    uint64_t v18 = 0;
  }
  unsigned __int8 v19 = sub_398020(v14, 0);
  unint64_t v20 = &v19[-*(int *)v19];
  if (*(unsigned __int16 *)v20 >= 0xBu)
  {
    uint64_t v21 = *((unsigned __int16 *)v20 + 5);
    if (v21)
    {
      if (v19[v21]) {
        uint64_t v18 = nullsub_1(v18);
      }
    }
  }
  *(void *)(v10 - 48) = v18;
  *(void *)(v10 - 40) = *a2;
  long long v22 = (int *)sub_8ED928(*(void *)(a1 + 24), *a2, 0, "station");
  long long v23 = (unsigned __int16 *)((char *)v22 - *v22);
  if (*v23 >= 9u && (uint64_t v24 = v23[4]) != 0) {
    unint64_t v25 = (char **)((char *)v22 + v24 + *(unsigned int *)((char *)v22 + v24));
  }
  else {
    unint64_t v25 = 0;
  }
  sub_8F48DC(v25, (void (*)(void **__return_ptr, char *))sub_4A0694, (uint64_t)&__p);
  sub_997050((uint64_t *)&__p, *(void *)(a1 + 72) + 968, v61);
  uint64_t v26 = (void **)(v10 - 120);
  uint64_t v27 = *(void *)(v10 - 120);
  if (v27)
  {
    uint64_t v28 = *(void *)(v10 - 112);
    BOOL v29 = *(void **)(v10 - 120);
    if (v28 == v27)
    {
LABEL_30:
      *(void *)(v10 - 112) = v27;
      operator delete(v29);
      *uint64_t v26 = 0;
      *(void *)(v10 - 112) = 0;
      *(void *)(v10 - 104) = 0;
      goto LABEL_31;
    }
    while (1)
    {
      if (*(char *)(v28 - 1) < 0)
      {
        operator delete(*(void **)(v28 - 24));
        if ((*(char *)(v28 - 33) & 0x80000000) == 0) {
          goto LABEL_25;
        }
LABEL_28:
        operator delete(*(void **)(v28 - 56));
        v28 -= 56;
        if (v28 == v27)
        {
LABEL_29:
          BOOL v29 = *v26;
          goto LABEL_30;
        }
      }
      else
      {
        if (*(char *)(v28 - 33) < 0) {
          goto LABEL_28;
        }
LABEL_25:
        v28 -= 56;
        if (v28 == v27) {
          goto LABEL_29;
        }
      }
    }
  }
LABEL_31:
  *(_OWORD *)(v10 - 120) = *(_OWORD *)v61;
  *(void *)(v10 - 104) = v62;
  v61[0] = 0;
  v61[1] = 0;
  uint64_t v62 = 0;
  uint64_t v30 = (void **)__p;
  if (__p)
  {
    int v31 = v60;
    uint64_t v32 = __p;
    if (v60 != __p)
    {
      do
      {
        uint64_t v33 = (void **)*(v31 - 3);
        if (v33)
        {
          uint64_t v34 = (void **)*(v31 - 2);
          std::string v35 = *(v31 - 3);
          if (v34 != v33)
          {
            do
            {
              if (*((char *)v34 - 1) < 0) {
                operator delete(*(v34 - 3));
              }
              v34 -= 4;
            }
            while (v34 != v33);
            std::string v35 = *(v31 - 3);
          }
          *(v31 - 2) = v33;
          operator delete(v35);
        }
        int v36 = v31 - 8;
        if (*((char *)v31 - 41) < 0) {
          operator delete(*v36);
        }
        v31 -= 8;
      }
      while (v36 != v30);
      uint64_t v32 = __p;
    }
    std::string v60 = v30;
    operator delete(v32);
  }
  sub_994EAC((uint64_t *)(v10 - 120), (uint64_t)v61);
  uint64_t v37 = (void **)(v10 - 96);
  if (*(char *)(v10 - 73) < 0) {
    operator delete(*v37);
  }
  long long v38 = *(_OWORD *)v61;
  *(void *)(v10 - 80) = v62;
  *(_OWORD *)uint64_t v37 = v38;
  int v39 = (int *)sub_8ED928(*(void *)(a1 + 24), *a2, 0, "station");
  uint64_t v40 = (unsigned __int16 *)((char *)v39 - *v39);
  if (*v40 >= 0x29u && (uint64_t v41 = v40[20]) != 0) {
    long long v42 = (char **)((char *)v39 + v41 + *(unsigned int *)((char *)v39 + v41));
  }
  else {
    long long v42 = 0;
  }
  sub_976524(v42, (void (*)(void **__return_ptr, char *))sub_9765C8, (uint64_t)&__p);
  sub_998458((int **)&__p, *(_DWORD *)(a1 + 80), (uint64_t *)(v10 - 120), (uint64_t)v61);
  uint64_t v43 = (void **)(v10 - 72);
  uint64_t v44 = *(void *)(v10 - 72);
  if (!v44) {
    goto LABEL_63;
  }
  uint64_t v45 = *(void *)(v10 - 64);
  long long v46 = *(void **)(v10 - 72);
  if (v45 != v44)
  {
    while (1)
    {
      if (*(char *)(v45 - 1) < 0)
      {
        operator delete(*(void **)(v45 - 24));
        if ((*(char *)(v45 - 33) & 0x80000000) == 0) {
          goto LABEL_57;
        }
LABEL_60:
        operator delete(*(void **)(v45 - 56));
        v45 -= 64;
        if (v45 == v44)
        {
LABEL_61:
          long long v46 = *v43;
          break;
        }
      }
      else
      {
        if (*(char *)(v45 - 33) < 0) {
          goto LABEL_60;
        }
LABEL_57:
        v45 -= 64;
        if (v45 == v44) {
          goto LABEL_61;
        }
      }
    }
  }
  *(void *)(v10 - 64) = v44;
  operator delete(v46);
  *uint64_t v43 = 0;
  *(void *)(v10 - 64) = 0;
  *(void *)(v10 - 56) = 0;
LABEL_63:
  *(_OWORD *)(v10 - 72) = *(_OWORD *)v61;
  *(void *)(v10 - 56) = v62;
  v61[0] = 0;
  v61[1] = 0;
  uint64_t v62 = 0;
  uint64_t v47 = (void **)__p;
  if (__p)
  {
    long long v48 = v60;
    int64_t v49 = __p;
    if (v60 != __p)
    {
      do
      {
        uint64_t v50 = (void **)*(v48 - 3);
        if (v50)
        {
          uint64_t v51 = (void **)*(v48 - 2);
          uint64_t v52 = *(v48 - 3);
          if (v51 != v50)
          {
            do
            {
              if (*((char *)v51 - 1) < 0) {
                operator delete(*(v51 - 3));
              }
              v51 -= 4;
            }
            while (v51 != v50);
            uint64_t v52 = *(v48 - 3);
          }
          *(v48 - 2) = v50;
          operator delete(v52);
        }
        if (*((char *)v48 - 41) < 0) {
          operator delete(*(v48 - 8));
        }
        v48 -= 10;
      }
      while (v48 != v47);
      int64_t v49 = __p;
    }
    std::string v60 = v47;
    operator delete(v49);
  }
  uint64_t v53 = (int *)sub_8ED928(*(void *)(a1 + 24), *a2, 0, "station");
  LOBYTE(v54) = 0;
  BOOL v55 = (unsigned __int16 *)((char *)v53 - *v53);
  if (*v55 >= 0x15u)
  {
    uint64_t v54 = v55[10];
    if (v55[10]) {
      LOBYTE(v54) = *((unsigned char *)v53 + v54);
    }
  }
  *(unsigned char *)(v10 - 32) = v54;
  sub_972510(*(void *)(a1 + 24), a2, (uint64_t)v61);
  sub_971158(a1, (unsigned __int8 **)v61, (uint64_t)&__p);
  char v56 = BYTE1(__p);
  if (BYTE1(__p))
  {
    *(unsigned char *)(v10 - 31) = (_BYTE)__p;
    char v56 = 1;
  }
  *(unsigned char *)(v10 - 30) = v56;
  if (v61[0])
  {
    v61[1] = v61[0];
    operator delete(v61[0]);
  }
  sub_9726CC((uint64_t *)a1, a2, (uint64_t)v61);
  char v57 = (void **)(v10 - 24);
  if (*(void *)(v10 - 24))
  {
    sub_8F4064((uint64_t *)(v10 - 24));
    operator delete(*v57);
    *char v57 = 0;
    *(void *)(v10 - 16) = 0;
    *(void *)(v10 - 8) = 0;
  }
  *(_OWORD *)(v10 - 24) = *(_OWORD *)v61;
  *(void *)(v10 - 8) = v62;
  unint64_t v6 = 0xF0F0F0F0F0F0F0F1
     * ((uint64_t)(*(void *)(*(void *)(a1 + 64) + 56) - *(void *)(*(void *)(a1 + 64) + 48)) >> 3)
     - 1;
  v61[0] = a2;
  sub_9784B0(v4, a2, (uint64_t)&unk_20F06E0, (void **)v61)[3] = v6;
  *(double *)(a1 + 432) = sub_72688((uint64_t)v63) + *(double *)(a1 + 432);
  return v6;
}

void sub_972310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_97232C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_971094((void **)va);
  _Unwind_Resume(a1);
}

void sub_972340(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_8F36A0((void ***)va);
  _Unwind_Resume(a1);
}

int *sub_972354@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  double result = (int *)sub_8ED3D4(a1, *a2, 0, "hall");
  uint64_t v5 = (unsigned __int16 *)((char *)result - *result);
  if (*v5 >= 0x1Bu
    && (uint64_t v6 = v5[13]) != 0
    && (uint64_t v7 = result,
        uint64_t v8 = *(unsigned int *)((char *)result + v6),
        uint64_t v9 = (unsigned int *)((char *)result + v6 + v8),
        uint64_t v10 = *v9,
        v10))
  {
    unint64_t v11 = operator new(2 * v10);
    uint64_t v12 = 0;
    *(void *)&long long v24 = v11;
    *((void *)&v24 + 1) = v11;
    unint64_t v25 = &v11[v10];
    uint64_t v13 = (char *)v7 + v6 + v8;
    do
    {
      uint64_t v14 = v9[v12 + 1];
      unint64_t v15 = (char *)&v9[v12] + v14;
      char v16 = (char *)&v9[v12] + v14 - *((int *)v15 + 1);
      if (*((unsigned __int16 *)v16 + 2) >= 5u && (uint64_t v17 = *((unsigned __int16 *)v16 + 4)) != 0) {
        uint64_t v18 = &v13[v12 * 4 + 4 + v14 + v17 + *(unsigned int *)&v13[v12 * 4 + 4 + v14 + v17]];
      }
      else {
        uint64_t v18 = 0;
      }
      uint64_t v26 = sub_2A56E0(v18);
      unsigned __int8 v19 = sub_1132F10(&v26);
      unint64_t v20 = &v13[v12 * 4 + v14 - *((int *)v15 + 1)];
      if (*((unsigned __int16 *)v20 + 2) < 7u)
      {
        LOBYTE(v21) = 0;
      }
      else
      {
        uint64_t v21 = *((unsigned __int16 *)v20 + 5);
        if (v21) {
          LOBYTE(v21) = v13[v12 * 4 + 4 + v14 + v21];
        }
      }
      LOWORD(v26) = v19 | (v21 << 8);
      double result = (int *)sub_9773B0((unint64_t *)&v24, v11, &v26);
      unint64_t v11 = (_WORD *)result + 1;
      ++v12;
    }
    while (v10 != v12);
    long long v22 = v24;
    long long v23 = v25;
  }
  else
  {
    long long v23 = 0;
    long long v22 = 0uLL;
  }
  *(_OWORD *)a3 = v22;
  *(void *)(a3 + 16) = v23;
  return result;
}

void sub_9724F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_972510@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  double result = (int *)sub_8ED928(a1, *a2, 0, "station");
  uint64_t v5 = (unsigned __int16 *)((char *)result - *result);
  if (*v5 >= 0x1Du
    && (uint64_t v6 = v5[14]) != 0
    && (uint64_t v7 = result,
        uint64_t v8 = *(unsigned int *)((char *)result + v6),
        uint64_t v9 = (unsigned int *)((char *)result + v6 + v8),
        uint64_t v10 = *v9,
        v10))
  {
    unint64_t v11 = operator new(2 * v10);
    uint64_t v12 = 0;
    *(void *)&long long v24 = v11;
    *((void *)&v24 + 1) = v11;
    unint64_t v25 = &v11[v10];
    uint64_t v13 = (char *)v7 + v6 + v8;
    do
    {
      uint64_t v14 = v9[v12 + 1];
      unint64_t v15 = (char *)&v9[v12] + v14;
      char v16 = (char *)&v9[v12] + v14 - *((int *)v15 + 1);
      if (*((unsigned __int16 *)v16 + 2) >= 5u && (uint64_t v17 = *((unsigned __int16 *)v16 + 4)) != 0) {
        uint64_t v18 = &v13[v12 * 4 + 4 + v14 + v17 + *(unsigned int *)&v13[v12 * 4 + 4 + v14 + v17]];
      }
      else {
        uint64_t v18 = 0;
      }
      uint64_t v26 = sub_2A56E0(v18);
      unsigned __int8 v19 = sub_1132F10(&v26);
      unint64_t v20 = &v13[v12 * 4 + v14 - *((int *)v15 + 1)];
      if (*((unsigned __int16 *)v20 + 2) < 7u)
      {
        LOBYTE(v21) = 0;
      }
      else
      {
        uint64_t v21 = *((unsigned __int16 *)v20 + 5);
        if (v21) {
          LOBYTE(v21) = v13[v12 * 4 + 4 + v14 + v21];
        }
      }
      LOWORD(v26) = v19 | (v21 << 8);
      double result = (int *)sub_9773B0((unint64_t *)&v24, v11, &v26);
      unint64_t v11 = (_WORD *)result + 1;
      ++v12;
    }
    while (v10 != v12);
    long long v22 = v24;
    long long v23 = v25;
  }
  else
  {
    long long v23 = 0;
    long long v22 = 0uLL;
  }
  *(_OWORD *)a3 = v22;
  *(void *)(a3 + 16) = v23;
  return result;
}

void sub_9726B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_9726CC(uint64_t *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (int *)sub_8ED928(a1[3], *a2, 0, "station");
  uint64_t v7 = (unsigned __int16 *)((char *)v6 - *v6);
  if (*v7 >= 0x1Fu && (uint64_t v8 = v7[15]) != 0) {
    uint64_t v9 = (char **)((char *)v6 + v8 + *(unsigned int *)((char *)v6 + v8));
  }
  else {
    uint64_t v9 = 0;
  }
  sub_968588(v9, (void (*)(void **__return_ptr, char *))sub_96862C, (uint64_t)&v43);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_976280(a3, 0x2E8BA2E8BA2E8BA3 * ((v44 - (unsigned char *)v43) >> 3));
  uint64_t v10 = a1[3];
  unint64_t v11 = (int *)sub_8ED928(v10, *a2, 0, "station");
  uint64_t v12 = (unsigned __int16 *)((char *)v11 - *v11);
  if (*v12 >= 5u && (uint64_t v13 = v12[2]) != 0) {
    uint64_t v14 = *(void *)((char *)v11 + v13);
  }
  else {
    uint64_t v14 = 0;
  }
  unint64_t v15 = sub_398020(v10, 0);
  uint64_t v17 = &v15[-*(int *)v15];
  if (*(unsigned __int16 *)v17 >= 0xBu)
  {
    uint64_t v18 = *((unsigned __int16 *)v17 + 5);
    if (v18)
    {
      if (v15[v18]) {
        uint64_t v14 = nullsub_1(v14);
      }
    }
  }
  uint64_t v42 = v14;
  unsigned __int8 v19 = (char *)v43;
  unint64_t v20 = v44;
  if (v43 != v44)
  {
    while (1)
    {
      if (!*((_DWORD *)v19 + 20) || *((_DWORD *)v19 + 21) == -1)
      {
        if (sub_723EC(1u))
        {
          sub_6BAC((uint64_t)&v45);
          sub_188FC78(&v45, (uint64_t)"Invalid station line shield for station ", 40);
          std::ostream::operator<<();
          std::stringbuf::str();
          sub_7246C((uint64_t *)__p, 1u);
          if (v41 < 0) {
            operator delete(__p[0]);
          }
          uint64_t v45 = v39;
          *(uint64_t *)((char *)&v45 + *(void *)(v39 - 24)) = v38;
          if (v54 < 0) {
            operator delete(v52);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        goto LABEL_16;
      }
      sub_966D38((uint64_t)v19, 7, a1[9] + 968, (uint64_t)&v45, v16);
      uint64_t v21 = a1[4];
      long long v22 = (int *)sub_8DFD1C(v21, *((void *)v19 + 10), 0, "line");
      long long v23 = (unsigned __int16 *)((char *)v22 - *v22);
      if (*v23 >= 5u && (uint64_t v24 = v23[2]) != 0) {
        unint64_t v25 = *(void **)((char *)v22 + v24);
      }
      else {
        unint64_t v25 = 0;
      }
      uint64_t v26 = sub_398020(v21, 0);
      uint64_t v27 = &v26[-*(int *)v26];
      if (*(unsigned __int16 *)v27 >= 0xBu)
      {
        uint64_t v28 = *((unsigned __int16 *)v27 + 5);
        if (v28)
        {
          if (v26[v28]) {
            unint64_t v25 = (void *)nullsub_1(v25);
          }
        }
      }
      __p[0] = v25;
      BOOL v29 = *(uint64_t **)(a3 + 8);
      if ((unint64_t)v29 >= *(void *)(a3 + 16))
      {
        uint64_t v30 = sub_97B87C((void **)a3, &v42, (uint64_t *)__p, (uint64_t)&v45);
      }
      else
      {
        *BOOL v29 = v42;
        v29[1] = (uint64_t)v25;
        sub_4F57A0((uint64_t)(v29 + 2), (uint64_t)&v45);
        uint64_t v30 = v29 + 16;
        *(void *)(a3 + 8) = v29 + 16;
      }
      *(void *)(a3 + 8) = v30;
      if (v55 < 0)
      {
        operator delete(v53);
        if ((v51 & 0x80000000) == 0)
        {
LABEL_37:
          int v31 = v49;
          if (v49 != 1) {
            goto LABEL_38;
          }
          goto LABEL_43;
        }
      }
      else if ((v51 & 0x80000000) == 0)
      {
        goto LABEL_37;
      }
      operator delete(v50);
      int v31 = v49;
      if (v49 != 1)
      {
LABEL_38:
        if (v31 || (v48 & 0x80000000) == 0) {
          goto LABEL_16;
        }
        uint64_t v32 = v46;
        goto LABEL_45;
      }
LABEL_43:
      uint64_t v32 = v46;
      if (v46)
      {
        uint64_t v47 = v46;
LABEL_45:
        operator delete(v32);
      }
LABEL_16:
      v19 += 88;
      if (v19 == v20)
      {
        unsigned __int8 v19 = (char *)v43;
        break;
      }
    }
  }
  if (v19)
  {
    uint64_t v33 = v44;
    uint64_t v34 = v19;
    if (v44 != v19)
    {
      do
      {
        uint64_t v35 = *((void *)v33 - 5);
        if (v35)
        {
          uint64_t v36 = *((void *)v33 - 4);
          uint64_t v37 = (void *)*((void *)v33 - 5);
          if (v36 != v35)
          {
            do
            {
              if (*(char *)(v36 - 1) < 0) {
                operator delete(*(void **)(v36 - 24));
              }
              v36 -= 32;
            }
            while (v36 != v35);
            uint64_t v37 = (void *)*((void *)v33 - 5);
          }
          *((void *)v33 - 4) = v35;
          operator delete(v37);
        }
        if (*(v33 - 57) < 0) {
          operator delete(*((void **)v33 - 10));
        }
        v33 -= 88;
      }
      while (v33 != v19);
      uint64_t v34 = v43;
    }
    uint64_t v44 = v19;
    operator delete(v34);
  }
}

void sub_972BC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23)
{
  sub_972C60(v23);
  sub_976450(&a20);
  _Unwind_Resume(a1);
}

uint64_t *sub_972C60(uint64_t *a1)
{
  if (*a1)
  {
    sub_8F4064(a1);
    operator delete((void *)*a1);
  }
  return a1;
}

uint64_t sub_972C9C(uint64_t a1, unint64_t *a2, void **a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *a3;
  v167[0] = (void *)*a2;
  v167[1] = v5;
  uint64_t v159 = a1 + 232;
  uint64_t v6 = sub_978820((void *)(a1 + 232), (unint64_t *)v167);
  if (v6) {
    return v6[4];
  }
  sub_725D0((uint64_t)v162);
  uint64_t v8 = *(void **)(v4 + 64);
  unint64_t v9 = v8[10];
  if (v9 >= v8[11])
  {
    uint64_t v10 = sub_9789D4(v8 + 9);
  }
  else
  {
    bzero((void *)v8[10], 0x288uLL);
    *(void *)(v9 + 48) = -1;
    *(_DWORD *)(v9 + 60) = -1;
    *(void *)(v9 + 64) = -1;
    *(void *)(v9 + 72) = 0;
    *(void *)(v9 + 80) = 0;
    *(void *)(v9 + 88) = 0;
    *(_WORD *)(v9 + 96) = -1;
    *(unsigned char *)(v9 + 98) = -1;
    *(_DWORD *)(v9 + 136) = -1;
    *(_DWORD *)(v9 + 144) = -1;
    *(_DWORD *)(v9 + 147) = -1;
    *(void *)(v9 + 151) = 0;
    *(void *)(v9 + 167) = 0;
    *(void *)(v9 + 159) = 0;
    *(_WORD *)(v9 + 175) = 0;
    *(void *)(v9 + 192) = 0;
    *(void *)(v9 + 200) = 0;
    *(void *)(v9 + 184) = 0;
    *(unsigned char *)(v9 + 208) = 0;
    *(_DWORD *)(v9 + 248) = -1;
    *(_DWORD *)(v9 + 256) = -1;
    *(_DWORD *)(v9 + 259) = -1;
    *(void *)(v9 + 279) = 0;
    *(void *)(v9 + 263) = 0;
    *(void *)(v9 + 271) = 0;
    *(_WORD *)(v9 + 287) = 0;
    *(void *)(v9 + 304) = 0;
    *(void *)(v9 + 312) = 0;
    *(void *)(v9 + 296) = 0;
    *(unsigned char *)(v9 + 320) = 0;
    *(_DWORD *)(v9 + 360) = -1;
    *(_DWORD *)(v9 + 368) = -1;
    *(_DWORD *)(v9 + 371) = -1;
    *(void *)(v9 + 391) = 0;
    *(void *)(v9 + 375) = 0;
    *(void *)(v9 + 383) = 0;
    *(_WORD *)(v9 + 399) = 0;
    *(void *)(v9 + 408) = 0;
    *(void *)(v9 + 416) = 0;
    *(unsigned char *)(v9 + 432) = 0;
    *(void *)(v9 + 424) = 0;
    *(_DWORD *)(v9 + 472) = -1;
    *(_DWORD *)(v9 + 483) = -1;
    *(_DWORD *)(v9 + 480) = -1;
    *(_WORD *)(v9 + 511) = 0;
    *(void *)(v9 + 495) = 0;
    *(void *)(v9 + 487) = 0;
    *(void *)(v9 + 503) = 0;
    *(unsigned char *)(v9 + 544) = 0;
    *(void *)(v9 + 528) = 0;
    *(void *)(v9 + 520) = 0;
    *(void *)(v9 + 536) = 0;
    *(_WORD *)(v9 + 552) = 0x7FFF;
    *(unsigned char *)(v9 + 554) = 2;
    *(_WORD *)(v9 + 556) = 2;
    *(_OWORD *)(v9 + 626) = 0u;
    *(_OWORD *)(v9 + 600) = 0u;
    *(_OWORD *)(v9 + 616) = 0u;
    *(_OWORD *)(v9 + 568) = 0u;
    *(_OWORD *)(v9 + 584) = 0u;
    *(_OWORD *)(v9 + 664) = 0u;
    *(_OWORD *)(v9 + 680) = 0u;
    uint64_t v10 = v9 + 696;
    *(_OWORD *)(v9 + 648) = 0u;
  }
  v8[10] = v10;
  uint64_t v11 = *(void *)(*(void *)(v4 + 64) + 80);
  uint64_t v12 = *(void *)(v4 + 32);
  uint64_t v13 = (int *)sub_8DFD1C(v12, *a2, 0, "line");
  uint64_t v14 = (unsigned __int16 *)((char *)v13 - *v13);
  if (*v14 >= 5u && (uint64_t v15 = v14[2]) != 0) {
    uint64_t v16 = *(void *)((char *)v13 + v15);
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v17 = sub_398020(v12, 0);
  uint64_t v18 = &v17[-*(int *)v17];
  if (*(unsigned __int16 *)v18 >= 0xBu)
  {
    uint64_t v19 = *((unsigned __int16 *)v18 + 5);
    if (v19)
    {
      if (v17[v19]) {
        uint64_t v16 = nullsub_1(v16);
      }
    }
  }
  unint64_t v20 = (void **)(v11 - 696);
  v20[6] = (void *)v16;
  v20[7] = (void *)*a2;
  uint64_t v21 = (int *)sub_8DFD1C(*(void *)(v4 + 32), *a2, 0, "line");
  v167[0] = *(void **)((char *)v21 + *(unsigned __int16 *)((char *)v21 - *v21 + 6));
  long long v22 = (void *)(v11 - 632);
  *(void *)(v11 - 632) = sub_973FB0(v4, (unint64_t *)v167);
  long long v23 = (int *)sub_8DFD1C(*(void *)(v4 + 32), *a2, 0, "line");
  uint64_t v24 = (unsigned __int16 *)((char *)v23 - *v23);
  if (*v24 >= 0xFu && (uint64_t v25 = v24[7]) != 0) {
    uint64_t v26 = (char **)((char *)v23 + v25 + *(unsigned int *)((char *)v23 + v25));
  }
  else {
    uint64_t v26 = 0;
  }
  sub_8F48DC(v26, (void (*)(void **__return_ptr, char *))sub_4A0694, (uint64_t)&__p);
  sub_997050((uint64_t *)&__p, *(void *)(v4 + 72) + 968, v167);
  size_t v158 = (unint64_t *)a3;
  uint64_t v27 = (void **)*v20;
  if (*v20)
  {
    uint64_t v28 = *(void ***)(v11 - 688);
    BOOL v29 = *v20;
    if (v28 == v27)
    {
LABEL_27:
      *(void *)(v11 - 688) = v27;
      operator delete(v29);
      *unint64_t v20 = 0;
      *(void *)(v11 - 688) = 0;
      *(void *)(v11 - 680) = 0;
      goto LABEL_28;
    }
    while (1)
    {
      if (*((char *)v28 - 1) < 0)
      {
        operator delete(*(v28 - 3));
        if ((*((char *)v28 - 33) & 0x80000000) == 0) {
          goto LABEL_22;
        }
LABEL_25:
        operator delete(*(v28 - 7));
        v28 -= 7;
        if (v28 == v27)
        {
LABEL_26:
          BOOL v29 = *v20;
          goto LABEL_27;
        }
      }
      else
      {
        if (*((char *)v28 - 33) < 0) {
          goto LABEL_25;
        }
LABEL_22:
        v28 -= 7;
        if (v28 == v27) {
          goto LABEL_26;
        }
      }
    }
  }
LABEL_28:
  *(_OWORD *)unint64_t v20 = *(_OWORD *)v167;
  *(void *)(v11 - 680) = v168;
  v167[0] = 0;
  v167[1] = 0;
  *(void *)&long long v168 = 0;
  uint64_t v30 = (void **)__p;
  uint64_t v160 = v4;
  if (__p)
  {
    int v31 = v164;
    uint64_t v32 = __p;
    if (v164 != __p)
    {
      do
      {
        uint64_t v33 = *((void *)v31 - 3);
        if (v33)
        {
          uint64_t v34 = *((void *)v31 - 2);
          uint64_t v35 = (void *)*((void *)v31 - 3);
          if (v34 != v33)
          {
            do
            {
              if (*(char *)(v34 - 1) < 0) {
                operator delete(*(void **)(v34 - 24));
              }
              v34 -= 32;
            }
            while (v34 != v33);
            uint64_t v35 = (void *)*((void *)v31 - 3);
          }
          *((void *)v31 - 2) = v33;
          operator delete(v35);
          uint64_t v4 = v160;
        }
        uint64_t v36 = (void **)(v31 - 64);
        if (*(v31 - 41) < 0) {
          operator delete(*v36);
        }
        v31 -= 64;
      }
      while (v36 != v30);
      uint64_t v32 = __p;
    }
    uint64_t v164 = (char *)v30;
    operator delete(v32);
  }
  sub_995044((uint64_t *)(v11 - 696), (uint64_t)v167);
  uint64_t v37 = (void **)(v11 - 672);
  if (*(char *)(v11 - 649) < 0) {
    operator delete(*v37);
  }
  long long v38 = *(_OWORD *)v167;
  *(void *)(v11 - 656) = v168;
  *(_OWORD *)uint64_t v37 = v38;
  uint64_t v39 = (int *)sub_8DFD1C(*(void *)(v4 + 32), *a2, 0, "line");
  uint64_t v40 = (unsigned __int16 *)((char *)v39 - *v39);
  if (*v40 >= 0x13u && (unsigned __int16 v41 = v40[9]) != 0)
  {
    *(_DWORD *)(v11 - 600) = *(int *)((char *)v39 + v41);
    int v42 = *(_DWORD *)v4;
    if (*(_DWORD *)v4 == 1)
    {
LABEL_49:
      sub_967C68(*(void *)(v4 + 16), *(void *)(v4 + 24), *(void *)(v4 + 32), *a2, *v158, *(void *)(v4 + 72), (uint64_t)v167);
      goto LABEL_55;
    }
  }
  else
  {
    *(_DWORD *)(v11 - 600) = 0xFFFFFF;
    int v42 = *(_DWORD *)v4;
    if (*(_DWORD *)v4 == 1) {
      goto LABEL_49;
    }
  }
  if (v42)
  {
    *(_OWORD *)BOOL v167 = 0u;
    long long v168 = 0u;
    uint64_t v169 = 0xFFFFFFFFLL;
    *(_DWORD *)int v170 = -1;
    *(_DWORD *)&v170[3] = -1;
    memset(&v170[7], 0, 33);
    v171[0] = 0;
    v171[1] = 0;
    long long v172 = 0uLL;
  }
  else
  {
    uint64_t v43 = *(void *)(v4 + 24);
    uint64_t v44 = *(void *)(v4 + 32);
    uint64_t v45 = *a2;
    uint64_t v46 = *(void *)(v4 + 72);
    uint64_t v47 = operator new(4uLL);
    std::string __p = v47;
    _DWORD *v47 = 1;
    uint64_t v165 = v47 + 1;
    uint64_t v164 = (char *)(v47 + 1);
    sub_967428(v43, v44, v45, 0xFFFFFFFF00000000, v46 + 968, (int **)&__p, (uint64_t)v167);
    if (__p)
    {
      uint64_t v164 = (char *)__p;
      operator delete(__p);
    }
  }
LABEL_55:
  char v48 = (_DWORD *)(v11 - 592);
  sub_4F377C(v11 - 592, (uint64_t)v167);
  *(void *)(v11 - 552) = *(void *)v170;
  int v49 = (void **)(v11 - 544);
  if (*(char *)(v11 - 521) < 0) {
    operator delete(*v49);
  }
  long long v50 = *(_OWORD *)&v170[8];
  *(void *)(v11 - 528) = *(void *)&v170[24];
  *(_OWORD *)int v49 = v50;
  v170[31] = 0;
  v170[8] = 0;
  *(unsigned char *)(v11 - 520) = v170[32];
  char v51 = (void **)(v11 - 512);
  if (*(char *)(v11 - 489) < 0) {
    operator delete(*v51);
  }
  long long v52 = *(_OWORD *)v171;
  *(void *)(v11 - 496) = v172;
  *(_OWORD *)char v51 = v52;
  BYTE7(v172) = 0;
  LOBYTE(v171[0]) = 0;
  *(unsigned char *)(v11 - 488) = BYTE8(v172);
  if ((SBYTE7(v172) & 0x80000000) == 0)
  {
    if ((v170[31] & 0x80000000) == 0) {
      goto LABEL_61;
    }
LABEL_66:
    operator delete(*(void **)&v170[8]);
    int v53 = v169;
    if (v169 != 1) {
      goto LABEL_62;
    }
LABEL_67:
    char v54 = v167[1];
    if (!v167[1]) {
      goto LABEL_70;
    }
    *(void **)&long long v168 = v167[1];
    goto LABEL_69;
  }
  operator delete(v171[0]);
  if ((v170[31] & 0x80000000) != 0) {
    goto LABEL_66;
  }
LABEL_61:
  int v53 = v169;
  if (v169 == 1) {
    goto LABEL_67;
  }
LABEL_62:
  if (!v53 && SHIBYTE(v168) < 0)
  {
    char v54 = v167[1];
LABEL_69:
    operator delete(v54);
  }
LABEL_70:
  int v55 = *(_DWORD *)(v11 - 560);
  if (v55 == 1)
  {
    if (*(_DWORD *)(v11 - 588) == -1 && *v48 == -1 && *(void *)(v11 - 584) == *(void *)(v11 - 576)) {
      goto LABEL_81;
    }
  }
  else if (v55 || *v48 == -1)
  {
    goto LABEL_81;
  }
  uint64_t v56 = *(void *)(v4 + 64);
  uint64_t v57 = *(void *)(v56 + 96);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(void *)(v56 + 104) - v57) >> 4)) <= *v22) {
    sub_66748();
  }
  sub_97C258((uint64_t *)(v11 - 696), (uint64_t *)(v57 + 208 * *v22), (std::string *)v167);
  if (*(char *)(v11 - 489) < 0) {
    operator delete(*v51);
  }
  long long v58 = *(_OWORD *)v167;
  *(void *)(v11 - 496) = v168;
  *(_OWORD *)char v51 = v58;
LABEL_81:
  uint64_t v59 = *(void *)(v4 + 24);
  uint64_t v60 = *(void *)(v4 + 32);
  uint64_t v61 = *a2;
  uint64_t v62 = *(void *)(v4 + 72);
  std::string::size_type v63 = operator new(4uLL);
  std::string __p = v63;
  *std::string::size_type v63 = 2;
  uint64_t v165 = v63 + 1;
  uint64_t v164 = (char *)(v63 + 1);
  sub_967428(v59, v60, v61, 0xFFFFFFFF00000000, v62 + 968, (int **)&__p, (uint64_t)v167);
  sub_4F377C(v11 - 480, (uint64_t)v167);
  *(void *)(v11 - 440) = *(void *)v170;
  unint64_t v64 = (void **)(v11 - 432);
  if (*(char *)(v11 - 409) < 0) {
    operator delete(*v64);
  }
  long long v65 = *(_OWORD *)&v170[8];
  *(void *)(v11 - 416) = *(void *)&v170[24];
  *(_OWORD *)unint64_t v64 = v65;
  v170[31] = 0;
  v170[8] = 0;
  *(unsigned char *)(v11 - 408) = v170[32];
  int v66 = (void **)(v11 - 400);
  if (*(char *)(v11 - 377) < 0) {
    operator delete(*v66);
  }
  long long v67 = *(_OWORD *)v171;
  *(void *)(v11 - 384) = v172;
  *(_OWORD *)int v66 = v67;
  BYTE7(v172) = 0;
  LOBYTE(v171[0]) = 0;
  *(unsigned char *)(v11 - 376) = BYTE8(v172);
  if ((SBYTE7(v172) & 0x80000000) == 0)
  {
    if ((v170[31] & 0x80000000) == 0) {
      goto LABEL_87;
    }
LABEL_92:
    operator delete(*(void **)&v170[8]);
    int v68 = v169;
    if (v169 != 1) {
      goto LABEL_88;
    }
LABEL_93:
    uint64_t v69 = v167[1];
    if (!v167[1]) {
      goto LABEL_96;
    }
    *(void **)&long long v168 = v167[1];
    goto LABEL_95;
  }
  operator delete(v171[0]);
  if ((v170[31] & 0x80000000) != 0) {
    goto LABEL_92;
  }
LABEL_87:
  int v68 = v169;
  if (v169 == 1) {
    goto LABEL_93;
  }
LABEL_88:
  if (!v68 && SHIBYTE(v168) < 0)
  {
    uint64_t v69 = v167[1];
LABEL_95:
    operator delete(v69);
  }
LABEL_96:
  if (__p)
  {
    uint64_t v164 = (char *)__p;
    operator delete(__p);
  }
  if (*(_DWORD *)v4 == 1)
  {
    std::string::operator=((std::string *)(v11 - 400), (const std::string *)(v11 - 512));
    sub_967D6C(*(void *)(v4 + 16), *(void *)(v4 + 24), *(void *)(v4 + 32), *a2, *v158, *(void *)(v4 + 72), (uint64_t)v167);
    sub_4F377C(v11 - 368, (uint64_t)v167);
    *(void *)(v11 - 328) = *(void *)v170;
    unint64_t v70 = (void **)(v11 - 320);
    if (*(char *)(v11 - 297) < 0) {
      operator delete(*v70);
    }
    long long v71 = *(_OWORD *)&v170[8];
    *(void *)(v11 - 304) = *(void *)&v170[24];
    *(_OWORD *)unint64_t v70 = v71;
    v170[31] = 0;
    v170[8] = 0;
    *(unsigned char *)(v11 - 296) = v170[32];
    int v72 = (void **)(v11 - 288);
    if (*(char *)(v11 - 265) < 0) {
      operator delete(*v72);
    }
    long long v73 = *(_OWORD *)v171;
    *(void *)(v11 - 272) = v172;
    *(_OWORD *)int v72 = v73;
    BYTE7(v172) = 0;
    LOBYTE(v171[0]) = 0;
    *(unsigned char *)(v11 - 264) = BYTE8(v172);
    if (SBYTE7(v172) < 0)
    {
      operator delete(v171[0]);
      if ((v170[31] & 0x80000000) == 0)
      {
LABEL_105:
        int v74 = v169;
        if (v169 != 1) {
          goto LABEL_106;
        }
        goto LABEL_111;
      }
    }
    else if ((v170[31] & 0x80000000) == 0)
    {
      goto LABEL_105;
    }
    operator delete(*(void **)&v170[8]);
    int v74 = v169;
    if (v169 != 1)
    {
LABEL_106:
      if (v74 || (SHIBYTE(v168) & 0x80000000) == 0)
      {
LABEL_114:
        std::string::operator=((std::string *)(v11 - 288), (const std::string *)(v11 - 512));
        sub_9679AC(*(void *)(v4 + 16), *(void *)(v4 + 24), *(void *)(v4 + 32), *a2, *(void *)(v4 + 72), (uint64_t)v167);
        sub_4F377C(v11 - 256, (uint64_t)v167);
        *(void *)(v11 - 216) = *(void *)v170;
        uint64_t v76 = (void **)(v11 - 208);
        if (*(char *)(v11 - 185) < 0) {
          operator delete(*v76);
        }
        long long v77 = *(_OWORD *)&v170[8];
        *(void *)(v11 - 192) = *(void *)&v170[24];
        *(_OWORD *)uint64_t v76 = v77;
        v170[31] = 0;
        v170[8] = 0;
        *(unsigned char *)(v11 - 184) = v170[32];
        int v78 = (void **)(v11 - 176);
        if (*(char *)(v11 - 153) < 0) {
          operator delete(*v78);
        }
        long long v79 = *(_OWORD *)v171;
        *(void *)(v11 - 160) = v172;
        *(_OWORD *)int v78 = v79;
        BYTE7(v172) = 0;
        LOBYTE(v171[0]) = 0;
        *(unsigned char *)(v11 - 152) = BYTE8(v172);
        if (SBYTE7(v172) < 0)
        {
          operator delete(v171[0]);
          if ((v170[31] & 0x80000000) == 0)
          {
LABEL_120:
            int v80 = v169;
            if (v169 != 1) {
              goto LABEL_121;
            }
            goto LABEL_126;
          }
        }
        else if ((v170[31] & 0x80000000) == 0)
        {
          goto LABEL_120;
        }
        operator delete(*(void **)&v170[8]);
        int v80 = v169;
        if (v169 != 1)
        {
LABEL_121:
          if (v80 || (SHIBYTE(v168) & 0x80000000) == 0) {
            goto LABEL_129;
          }
          unint64_t v81 = v167[1];
          goto LABEL_128;
        }
LABEL_126:
        unint64_t v81 = v167[1];
        if (!v167[1])
        {
LABEL_129:
          std::string::operator=((std::string *)(v11 - 176), (const std::string *)(v11 - 512));
          goto LABEL_130;
        }
        *(void **)&long long v168 = v167[1];
LABEL_128:
        operator delete(v81);
        goto LABEL_129;
      }
      long long v75 = v167[1];
LABEL_113:
      operator delete(v75);
      goto LABEL_114;
    }
LABEL_111:
    long long v75 = v167[1];
    if (!v167[1]) {
      goto LABEL_114;
    }
    *(void **)&long long v168 = v167[1];
    goto LABEL_113;
  }
LABEL_130:
  uint64_t v82 = (int *)sub_8DFD1C(*(void *)(v4 + 32), *a2, 0, "line");
  uint64_t v83 = (unsigned __int16 *)((char *)v82 - *v82);
  if (*v83 >= 0x11u && (uint64_t v84 = v83[8]) != 0) {
    __int16 v85 = *(_WORD *)((char *)v82 + v84);
  }
  else {
    __int16 v85 = 0x7FFF;
  }
  *(_WORD *)(v11 - 144) = v85;
  int v86 = (int *)sub_8DFD1C(*(void *)(v4 + 32), *a2, 0, "line");
  char v87 = (unsigned __int16 *)((char *)v86 - *v86);
  if (*v87 < 0x35u)
  {
    LOBYTE(v88) = 0;
  }
  else
  {
    uint64_t v88 = v87[26];
    if (v88) {
      LOBYTE(v88) = *((unsigned char *)v86 + v88) != 0;
    }
  }
  *(unsigned char *)(v11 - 137) = v88;
  uint64_t v89 = (int *)sub_8DFD1C(*(void *)(v4 + 32), *a2, 0, "line");
  uint64_t v90 = (unsigned __int16 *)((char *)v89 - *v89);
  if (*v90 < 0x2Du)
  {
    LOBYTE(v91) = 0;
  }
  else
  {
    uint64_t v91 = v90[22];
    if (v91) {
      LOBYTE(v91) = *((unsigned char *)v89 + v91) != 0;
    }
  }
  *(unsigned char *)(v11 - 136) = v91;
  unint64_t v92 = (int *)sub_8DFD1C(*(void *)(v4 + 32), *a2, 0, "line");
  uint64_t v93 = (unsigned __int16 *)((char *)v92 - *v92);
  if (*v93 < 0x29u)
  {
    LOBYTE(v94) = 0;
  }
  else
  {
    uint64_t v94 = v93[20];
    if (v94) {
      LOBYTE(v94) = *((unsigned char *)v92 + v94) != 0;
    }
  }
  *(unsigned char *)(v11 - 135) = v94;
  uint64_t v95 = (int *)sub_8DFD1C(*(void *)(v4 + 32), *a2, 0, "line");
  uint64_t v96 = (unsigned __int16 *)((char *)v95 - *v95);
  if (*v96 >= 0x25u && (uint64_t v97 = v96[18]) != 0)
  {
    char v98 = *((unsigned char *)v95 + v97);
    uint64_t v99 = (char *)(v11 - 142);
    if (v98) {
      goto LABEL_152;
    }
  }
  else
  {
    uint64_t v99 = (char *)(v11 - 142);
  }
  char v98 = 2;
LABEL_152:
  *uint64_t v99 = v98;
  uint64_t v100 = (int *)sub_8DFD1C(*(void *)(v4 + 32), *a2, 0, "line");
  uint64_t v101 = (unsigned __int16 *)((char *)v100 - *v100);
  if (*v101 < 0x27u)
  {
    LOBYTE(v102) = 0;
  }
  else
  {
    uint64_t v102 = v101[19];
    if (v102) {
      LOBYTE(v102) = *((unsigned char *)v100 + v102);
    }
  }
  *(unsigned char *)(v11 - 141) = v102;
  uint64_t v103 = (int *)sub_8DFD1C(*(void *)(v4 + 32), *a2, 0, "line");
  uint64_t v104 = (unsigned __int16 *)((char *)v103 - *v103);
  if (*v104 >= 0x2Bu && (uint64_t v105 = v104[21]) != 0) {
    __int16 v106 = *(_WORD *)((char *)v103 + v105);
  }
  else {
    __int16 v106 = 2;
  }
  *(_WORD *)(v11 - 140) = v106;
  int v107 = (int *)sub_8DFD1C(*(void *)(v4 + 32), *a2, 0, "line");
  size_t v108 = (unsigned __int16 *)((char *)v107 - *v107);
  if (*v108 < 0x3Fu)
  {
    LOBYTE(v109) = 0;
  }
  else
  {
    uint64_t v109 = v108[31];
    if (v109) {
      LOBYTE(v109) = *((unsigned char *)v107 + v109);
    }
  }
  *(unsigned char *)(v11 - 138) = v109;
  sub_974830(*(void *)(v4 + 32), a2, (uint64_t)&__p);
  sub_974580((unsigned __int8 **)&__p, v167);
  size_t v110 = *(void **)(v11 - 128);
  if (v110)
  {
    *(void *)(v11 - 120) = v110;
    operator delete(v110);
    *(void *)(v11 - 128) = 0;
    *(void *)(v11 - 120) = 0;
    *(void *)(v11 - 112) = 0;
  }
  *(_OWORD *)(v11 - 128) = *(_OWORD *)v167;
  *(void *)(v11 - 112) = v168;
  v167[0] = 0;
  v167[1] = 0;
  *(void *)&long long v168 = 0;
  if (__p)
  {
    uint64_t v164 = (char *)__p;
    operator delete(__p);
  }
  sub_97491C(*(void *)(v4 + 32), a2, (uint64_t)&__p);
  sub_974580((unsigned __int8 **)&__p, v167);
  unint64_t v111 = *(void **)(v11 - 104);
  if (v111)
  {
    *(void *)(v11 - 96) = v111;
    operator delete(v111);
    *(void *)(v11 - 104) = 0;
    *(void *)(v11 - 96) = 0;
    *(void *)(v11 - 88) = 0;
  }
  *(_OWORD *)(v11 - 104) = *(_OWORD *)v167;
  *(void *)(v11 - 88) = v168;
  v167[0] = 0;
  v167[1] = 0;
  *(void *)&long long v168 = 0;
  if (__p)
  {
    uint64_t v164 = (char *)__p;
    operator delete(__p);
  }
  sub_974A08(*(void *)(v4 + 32), a2, (uint64_t)&__p);
  sub_974580((unsigned __int8 **)&__p, v167);
  uint64_t v112 = *(void **)(v11 - 80);
  if (v112)
  {
    *(void *)(v11 - 72) = v112;
    operator delete(v112);
    *(void *)(v11 - 80) = 0;
    *(void *)(v11 - 72) = 0;
    *(void *)(v11 - 64) = 0;
  }
  *(_OWORD *)(v11 - 80) = *(_OWORD *)v167;
  *(void *)(v11 - 64) = v168;
  v167[0] = 0;
  v167[1] = 0;
  *(void *)&long long v168 = 0;
  if (__p)
  {
    uint64_t v164 = (char *)__p;
    operator delete(__p);
  }
  sub_9487A8(*(void *)(v4 + 32), a2, (uint64_t)v167);
  long long v113 = *(void **)(v11 - 48);
  if (v113)
  {
    *(void *)(v11 - 40) = v113;
    operator delete(v113);
    *(void *)(v11 - 48) = 0;
    *(void *)(v11 - 40) = 0;
    *(void *)(v11 - 32) = 0;
  }
  *(_OWORD *)(v11 - 48) = *(_OWORD *)v167;
  *(void *)(v11 - 32) = v168;
  uint64_t v114 = (int *)sub_8DFD1C(*(void *)(v4 + 32), *a2, 0, "line");
  BOOL v115 = (unsigned __int16 *)((char *)v114 - *v114);
  if (*v115 >= 0x1Fu)
  {
    uint64_t v116 = v115[15];
    if (v115[15])
    {
      char v117 = 0;
      switch(*((unsigned char *)v114 + v116))
      {
        case 0:
          break;
        case 1:
          char v117 = 1;
          goto LABEL_187;
        case 3:
          char v117 = 2;
          goto LABEL_187;
        case 4:
          char v117 = 3;
          goto LABEL_187;
        case 5:
          char v117 = 4;
          goto LABEL_187;
        case 6:
          char v117 = 5;
          goto LABEL_187;
        case 0xA:
          char v117 = 7;
          goto LABEL_187;
        default:
LABEL_187:
          *(unsigned char *)(v11 - 56) = v117;
          *(unsigned char *)(v11 - 55) = 1;
          break;
      }
    }
  }
  sub_8F34C4(*(void *)(v4 + 32), a2, (uint64_t)v167);
  size_t v119 = (unint64_t *)v167[0];
  int v118 = (unint64_t *)v167[1];
  if (v167[0] != v167[1])
  {
    int v157 = (void **)(v11 - 24);
    do
    {
      int v121 = *(_DWORD *)a2;
      int v122 = *((_DWORD *)a2 + 1);
      uint64_t v123 = (int *)sub_8F4388(*(void *)(v4 + 16), *v119, 0, "market");
      uint64_t v124 = (unsigned __int16 *)((char *)v123 - *v123);
      if (*v124 < 7u) {
        goto LABEL_192;
      }
      uint64_t v125 = v124[3];
      if (!v125) {
        goto LABEL_192;
      }
      uint64_t v126 = (int *)((char *)v123 + v125 + *(unsigned int *)((char *)v123 + v125));
      unsigned int v128 = *v126;
      int v127 = (char *)(v126 + 1);
      uint64_t v129 = 8 * v128;
      if (v128)
      {
        uint64_t v130 = v129;
        unint64_t v131 = v127;
        while (*(_DWORD *)v131 != v121 || *((_DWORD *)v131 + 1) != v122)
        {
          v131 += 8;
          v130 -= 8;
          if (!v130) {
            goto LABEL_192;
          }
        }
        if (v131 == &v127[v129]) {
          goto LABEL_192;
        }
      }
      else
      {
        unint64_t v131 = v127;
        if (v127 == &v127[v129]) {
          goto LABEL_192;
        }
      }
      uint64_t v132 = *(void *)(v4 + 16);
      BOOL v133 = (int *)sub_8F4388(v132, *v119, 0, "market");
      int64_t v134 = (unsigned __int16 *)((char *)v133 - *v133);
      if (*v134 >= 5u && (uint64_t v135 = v134[2]) != 0) {
        uint64_t v136 = *(void *)((char *)v133 + v135);
      }
      else {
        uint64_t v136 = 0;
      }
      std::string::size_type v137 = sub_398020(v132, 0);
      uint64_t v138 = &v137[-*(int *)v137];
      if (*(unsigned __int16 *)v138 >= 0xBu)
      {
        uint64_t v139 = *((unsigned __int16 *)v138 + 5);
        if (v139)
        {
          if (v137[v139]) {
            uint64_t v136 = nullsub_1(v136);
          }
        }
      }
      unint64_t v140 = (unint64_t)(v131 - v127) >> 3;
      int v142 = *(uint64_t **)(v11 - 16);
      unint64_t v141 = *(void *)(v11 - 8);
      if ((unint64_t)v142 < v141)
      {
        *int v142 = v136;
        v142[1] = v140;
        unint64_t v120 = v142 + 2;
        uint64_t v4 = v160;
      }
      else
      {
        size_t v143 = (uint64_t *)*v157;
        uint64_t v144 = ((char *)v142 - (unsigned char *)*v157) >> 4;
        unint64_t v145 = v144 + 1;
        if ((unint64_t)(v144 + 1) >> 60) {
          sub_2E00();
        }
        uint64_t v146 = v141 - (void)v143;
        if (v146 >> 3 > v145) {
          unint64_t v145 = v146 >> 3;
        }
        if ((unint64_t)v146 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v147 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v147 = v145;
        }
        if (v147 >> 60) {
          sub_188D718();
        }
        v148 = (char *)operator new(16 * v147);
        v149 = (uint64_t *)&v148[16 * v144];
        uint64_t *v149 = v136;
        v149[1] = v140;
        if (v142 != v143)
        {
          std::string::size_type v150 = &v148[16 * v144];
          do
          {
            unint64_t v151 = v150 - 16;
            *((_OWORD *)v150 - 1) = *((_OWORD *)v142 - 1);
            v142 -= 2;
            v150 -= 16;
          }
          while (v142 != v143);
          unint64_t v120 = v149 + 2;
          *(void *)(v11 - 24) = v151;
          *(void *)(v11 - 16) = v149 + 2;
          *(void *)(v11 - 8) = &v148[16 * v147];
          uint64_t v4 = v160;
          if (!v143) {
            goto LABEL_191;
          }
LABEL_225:
          operator delete(v143);
          goto LABEL_191;
        }
        unint64_t v120 = v149 + 2;
        *(void *)(v11 - 24) = v149;
        *(void *)(v11 - 16) = v149 + 2;
        *(void *)(v11 - 8) = &v148[16 * v147];
        uint64_t v4 = v160;
        if (v143) {
          goto LABEL_225;
        }
      }
LABEL_191:
      *(void *)(v11 - 16) = v120;
LABEL_192:
      ++v119;
    }
    while (v119 != v118);
  }
  uint64_t v152 = *(void *)(v4 + 64);
  uint64_t v154 = *(void *)(v152 + 72);
  uint64_t v153 = *(void *)(v152 + 80);
  unint64_t v155 = *v158;
  std::string __p = (void *)*a2;
  uint64_t v164 = (char *)v155;
  p_p = &__p;
  uint64_t v7 = 0x66FD0EB66FD0EB67 * ((v153 - v154) >> 3) - 1;
  sub_978F60(v159, (unint64_t *)&__p, (uint64_t)&unk_20F06E0, (_OWORD **)&p_p)[4] = v7;
  *(double *)(v4 + 432) = sub_72688((uint64_t)v162) + *(double *)(v4 + 432);
  if (v167[0])
  {
    v167[1] = v167[0];
    operator delete(v167[0]);
  }
  return v7;
}

void sub_973F10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_973FB0(uint64_t a1, unint64_t *a2)
{
  uint64_t v4 = a1 + 272;
  uint64_t v5 = sub_3FAA8C((void *)(a1 + 272), a2);
  if (v5) {
    return v5[3];
  }
  sub_725D0((uint64_t)v57);
  uint64_t v8 = *(uint64_t **)(a1 + 64);
  unint64_t v9 = v8[13];
  if (v9 >= v8[14])
  {
    uint64_t v10 = sub_979364(v8 + 12);
  }
  else
  {
    *(_OWORD *)(v9 + 64) = 0u;
    *(_OWORD *)(v9 + 80) = 0u;
    *(_OWORD *)(v9 + 176) = 0u;
    *(_OWORD *)(v9 + 192) = 0u;
    *(_OWORD *)(v9 + 144) = 0u;
    *(_OWORD *)(v9 + 160) = 0u;
    *(_OWORD *)(v9 + 112) = 0u;
    *(_OWORD *)(v9 + 128) = 0u;
    *(_OWORD *)(v9 + 96) = 0u;
    *(_OWORD *)(v9 + 32) = 0u;
    *(_OWORD *)(v9 + 48) = 0u;
    *(_OWORD *)unint64_t v9 = 0u;
    *(_OWORD *)(v9 + 16) = 0u;
    *(void *)(v9 + 48) = -1;
    *(_DWORD *)(v9 + 60) = -1;
    *(void *)(v9 + 64) = 0;
    *(void *)(v9 + 72) = 0;
    *(void *)(v9 + 80) = 0;
    *(_DWORD *)(v9 + 120) = -1;
    *(_DWORD *)(v9 + 131) = -1;
    *(_DWORD *)(v9 + 128) = -1;
    *(void *)(v9 + 143) = 0;
    *(void *)(v9 + 135) = 0;
    *(_WORD *)(v9 + 159) = 0;
    *(void *)(v9 + 151) = 0;
    *(void *)(v9 + 168) = 0;
    *(void *)(v9 + 176) = 0;
    *(unsigned char *)(v9 + 192) = 0;
    uint64_t v10 = v9 + 208;
    *(void *)(v9 + 184) = 0;
  }
  v8[13] = v10;
  uint64_t v11 = *(void *)(*(void *)(a1 + 64) + 104);
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = (int *)sub_8EF9B8(v12, *a2, 0, "system");
  uint64_t v14 = (unsigned __int16 *)((char *)v13 - *v13);
  if (*v14 >= 5u && (uint64_t v15 = v14[2]) != 0) {
    uint64_t v16 = *(void *)((char *)v13 + v15);
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v17 = sub_398020(v12, 0);
  uint64_t v18 = &v17[-*(int *)v17];
  if (*(unsigned __int16 *)v18 >= 0xBu)
  {
    uint64_t v19 = *((unsigned __int16 *)v18 + 5);
    if (v19)
    {
      if (v17[v19]) {
        uint64_t v16 = nullsub_1(v16);
      }
    }
  }
  *(void *)(v11 - 160) = v16;
  *(void *)(v11 - 152) = *a2;
  unint64_t v20 = (int *)sub_8EF9B8(*(void *)(a1 + 16), *a2, 0, "system");
  uint64_t v21 = (unsigned __int16 *)((char *)v20 - *v20);
  if (*v21 < 0x13u)
  {
    LOBYTE(v22) = 0;
  }
  else
  {
    uint64_t v22 = v21[9];
    if (v22) {
      LOBYTE(v22) = *((unsigned char *)v20 + v22) != 0;
    }
  }
  *(unsigned char *)(v11 - 8) = v22;
  long long v23 = (int *)sub_8EF9B8(*(void *)(a1 + 16), *a2, 0, "system");
  uint64_t v24 = (unsigned __int16 *)((char *)v23 - *v23);
  if (*v24 >= 7u && (uint64_t v25 = v24[3]) != 0) {
    uint64_t v26 = (char **)((char *)v23 + v25 + *(unsigned int *)((char *)v23 + v25));
  }
  else {
    uint64_t v26 = 0;
  }
  sub_8F48DC(v26, (void (*)(void **__return_ptr, char *))sub_4A0694, (uint64_t)&__p);
  sub_997050((uint64_t *)&__p, *(void *)(a1 + 72) + 968, v58);
  uint64_t v27 = (void **)(v11 - 208);
  uint64_t v28 = *(void *)(v11 - 208);
  if (v28)
  {
    uint64_t v29 = *(void *)(v11 - 200);
    uint64_t v30 = *(void **)(v11 - 208);
    if (v29 == v28)
    {
LABEL_32:
      *(void *)(v11 - 200) = v28;
      operator delete(v30);
      *uint64_t v27 = 0;
      *(void *)(v11 - 200) = 0;
      *(void *)(v11 - 192) = 0;
      goto LABEL_33;
    }
    while (1)
    {
      if (*(char *)(v29 - 1) < 0)
      {
        operator delete(*(void **)(v29 - 24));
        if ((*(char *)(v29 - 33) & 0x80000000) == 0) {
          goto LABEL_27;
        }
LABEL_30:
        operator delete(*(void **)(v29 - 56));
        v29 -= 56;
        if (v29 == v28)
        {
LABEL_31:
          uint64_t v30 = *v27;
          goto LABEL_32;
        }
      }
      else
      {
        if (*(char *)(v29 - 33) < 0) {
          goto LABEL_30;
        }
LABEL_27:
        v29 -= 56;
        if (v29 == v28) {
          goto LABEL_31;
        }
      }
    }
  }
LABEL_33:
  *(_OWORD *)(v11 - 208) = *(_OWORD *)v58;
  *(void *)(v11 - 192) = v59;
  v58[0] = 0;
  v58[1] = 0;
  uint64_t v59 = 0;
  int v31 = (void **)__p;
  if (__p)
  {
    uint64_t v32 = v56;
    uint64_t v33 = __p;
    if (v56 != __p)
    {
      do
      {
        uint64_t v34 = (void **)*(v32 - 3);
        if (v34)
        {
          uint64_t v35 = (void **)*(v32 - 2);
          uint64_t v36 = *(v32 - 3);
          if (v35 != v34)
          {
            do
            {
              if (*((char *)v35 - 1) < 0) {
                operator delete(*(v35 - 3));
              }
              v35 -= 4;
            }
            while (v35 != v34);
            uint64_t v36 = *(v32 - 3);
          }
          *(v32 - 2) = v34;
          operator delete(v36);
        }
        uint64_t v37 = v32 - 8;
        if (*((char *)v32 - 41) < 0) {
          operator delete(*v37);
        }
        v32 -= 8;
      }
      while (v37 != v31);
      uint64_t v33 = __p;
    }
    uint64_t v56 = v31;
    operator delete(v33);
  }
  if (*(_DWORD *)a1 == 1)
  {
    long long v38 = (int *)sub_8EF9B8(*(void *)(a1 + 16), *a2, 0, "system");
    uint64_t v39 = (unsigned __int16 *)((char *)v38 - *v38);
    if (*v39 >= 0x27u && (uint64_t v40 = v39[19]) != 0) {
      int v41 = *((unsigned __int8 *)v38 + v40);
    }
    else {
      int v41 = 127;
    }
    sub_99515C(v41, (uint64_t *)(v11 - 208), (uint64_t)v58);
LABEL_59:
    uint64_t v42 = v11 - 184;
    if ((*(char *)(v11 - 161) & 0x80000000) == 0) {
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  if (!*(_DWORD *)a1)
  {
    sub_994EAC((uint64_t *)(v11 - 208), (uint64_t)v58);
    goto LABEL_59;
  }
  v58[0] = 0;
  v58[1] = 0;
  uint64_t v59 = 0;
  uint64_t v42 = v11 - 184;
  if ((*(char *)(v11 - 161) & 0x80000000) == 0) {
    goto LABEL_61;
  }
LABEL_60:
  operator delete(*(void **)v42);
LABEL_61:
  long long v43 = *(_OWORD *)v58;
  *(void *)(v42 + 16) = v59;
  *(_OWORD *)uint64_t v42 = v43;
  sub_96724C(*(void *)(a1 + 16), *a2, (uint64_t)v58);
  sub_4F377C(v11 - 120, (uint64_t)v58);
  *(void *)(v11 - 80) = v62;
  uint64_t v44 = (void **)(v11 - 72);
  if (*(char *)(v11 - 49) < 0) {
    operator delete(*v44);
  }
  long long v45 = *(_OWORD *)v63;
  *(void *)(v11 - 56) = v64;
  *(_OWORD *)uint64_t v44 = v45;
  HIBYTE(v64) = 0;
  LOBYTE(v63[0]) = 0;
  *(unsigned char *)(v11 - 48) = v65;
  uint64_t v46 = (void **)(v11 - 40);
  if (*(char *)(v11 - 17) < 0) {
    operator delete(*v46);
  }
  long long v47 = v66;
  *(void *)(v11 - 24) = v67;
  *(_OWORD *)uint64_t v46 = v47;
  HIBYTE(v67) = 0;
  LOBYTE(v66) = 0;
  *(unsigned char *)(v11 - 16) = v68;
  if (SHIBYTE(v64) < 0)
  {
    operator delete(v63[0]);
    int v48 = v61;
    if (v61 != 1)
    {
LABEL_67:
      if (v48 || (v60 & 0x80000000) == 0) {
        goto LABEL_74;
      }
      int v49 = v58[1];
      goto LABEL_73;
    }
  }
  else
  {
    int v48 = v61;
    if (v61 != 1) {
      goto LABEL_67;
    }
  }
  int v49 = v58[1];
  if (v58[1])
  {
    uint64_t v59 = v58[1];
LABEL_73:
    operator delete(v49);
  }
LABEL_74:
  sub_97C3E0((uint64_t *)(v11 - 208), (uint64_t)v58);
  if (*(char *)(v11 - 17) < 0) {
    operator delete(*v46);
  }
  long long v50 = *(_OWORD *)v58;
  *(void *)(v11 - 24) = v59;
  *(_OWORD *)uint64_t v46 = v50;
  uint64_t v51 = *(void *)(a1 + 64);
  uint64_t v53 = *(void *)(v51 + 96);
  uint64_t v52 = *(void *)(v51 + 104);
  v58[0] = a2;
  char v54 = sub_9796CC(v4, a2, (uint64_t)&unk_20F06E0, (void **)v58);
  uint64_t v6 = 0x4EC4EC4EC4EC4EC5 * ((v52 - v53) >> 4) - 1;
  v54[3] = v6;
  *(double *)(a1 + 432) = sub_72688((uint64_t)v57) + *(double *)(a1 + 432);
  return v6;
}

void sub_974568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_974580(unsigned __int8 **a1@<X1>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  int64_t v5 = v3 - *a1;
  if (v3 != *a1)
  {
    if (v5 < 0) {
      sub_2E00();
    }
    uint64_t v6 = operator new(v3 - *a1);
    *a2 = v6;
    a2[1] = v6;
    a2[2] = &v6[v5];
    while (v4 != v3)
    {
      unsigned int v8 = *v4 - 1;
      if (v8 > 9)
      {
        char v9 = 0;
        unint64_t v10 = a2[2];
        if ((unint64_t)v6 < v10)
        {
LABEL_7:
          *uint64_t v6 = v9;
          uint64_t v7 = (uint64_t)(v6 + 1);
          goto LABEL_8;
        }
      }
      else
      {
        char v9 = byte_20EA7B0[(char)v8];
        unint64_t v10 = a2[2];
        if ((unint64_t)v6 < v10) {
          goto LABEL_7;
        }
      }
      uint64_t v11 = (unsigned char *)*a2;
      unint64_t v12 = (unint64_t)&v6[-*a2];
      unint64_t v13 = v12 + 1;
      if ((uint64_t)(v12 + 1) < 0) {
        sub_2E00();
      }
      unint64_t v14 = v10 - (void)v11;
      if (2 * v14 > v13) {
        unint64_t v13 = 2 * v14;
      }
      if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v15 = v13;
      }
      if (v15)
      {
        uint64_t v16 = operator new(v15);
        uint64_t v17 = &v16[v12];
        v16[v12] = v9;
        uint64_t v7 = (uint64_t)&v16[v12 + 1];
        if (v6 != v11) {
          goto LABEL_21;
        }
      }
      else
      {
        uint64_t v16 = 0;
        uint64_t v17 = &v6[-*a2];
        *(unsigned char *)unint64_t v12 = v9;
        uint64_t v7 = v12 + 1;
        if (v6 != v11)
        {
LABEL_21:
          if (v12 < 8 || &v16[v12 + v11 - v6] > &v16[v12 - 1] || v11 > v6 - 1 || (unint64_t)(v11 - v16) < 0x20)
          {
            uint64_t v18 = v6;
          }
          else if (v12 >= 0x20)
          {
            unint64_t v21 = v12 & 0xFFFFFFFFFFFFFFE0;
            uint64_t v22 = &v16[v12 - 16];
            long long v23 = (long long *)(v6 - 16);
            unint64_t v24 = v12 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v25 = *v23;
              *(v22 - 1) = *(v23 - 1);
              *uint64_t v22 = v25;
              v22 -= 2;
              v23 -= 2;
              v24 -= 32;
            }
            while (v24);
            if (v12 == v21) {
              goto LABEL_25;
            }
            if ((v12 & 0x18) != 0) {
              goto LABEL_39;
            }
            v17 -= v21;
            uint64_t v18 = &v6[-v21];
          }
          else
          {
            unint64_t v21 = 0;
LABEL_39:
            uint64_t v18 = &v6[-(v12 & 0xFFFFFFFFFFFFFFF8)];
            v17 -= v12 & 0xFFFFFFFFFFFFFFF8;
            uint64_t v26 = &v16[&v6[-v21] - v11 - 8];
            uint64_t v27 = (uint64_t *)&v6[-v21 - 8];
            unint64_t v28 = v21 - (v12 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              uint64_t v29 = *v27--;
              *v26-- = v29;
              v28 += 8;
            }
            while (v28);
            if (v12 == (v12 & 0xFFFFFFFFFFFFFFF8))
            {
LABEL_25:
              *a2 = v16;
              a2[1] = v7;
              a2[2] = &v16[v15];
              if (!v11) {
                goto LABEL_8;
              }
LABEL_29:
              operator delete(v11);
              goto LABEL_8;
            }
          }
          uint64_t v19 = v17 - 1;
          do
          {
            char v20 = *--v18;
            *v19-- = v20;
          }
          while (v18 != v11);
          goto LABEL_25;
        }
      }
      *a2 = v17;
      a2[1] = v7;
      a2[2] = &v16[v15];
      if (v11) {
        goto LABEL_29;
      }
LABEL_8:
      a2[1] = v7;
      ++v4;
      uint64_t v6 = (unsigned char *)v7;
    }
  }
}

void sub_97480C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

int *sub_974830@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  double result = (int *)sub_8DFD1C(a1, *a2, 0, "line");
  int64_t v5 = (unsigned __int16 *)((char *)result - *result);
  if (*v5 >= 0x19u
    && (uint64_t v6 = v5[12]) != 0
    && (uint64_t v7 = (unsigned int *)((char *)result + v6),
        uint64_t v8 = *v7,
        char v9 = (char *)v7 + v8,
        uint64_t v10 = *(unsigned int *)((char *)v7 + v8),
        v10))
  {
    uint64_t v11 = (char *)operator new(*(unsigned int *)((char *)v7 + v8));
    *(void *)&long long v15 = v11;
    *((void *)&v15 + 1) = v11;
    uint64_t v16 = &v11[v10];
    unint64_t v12 = v9 + 4;
    do
    {
      char v17 = *v12;
      double result = (int *)sub_8FBC7C((uint64_t)&v15, v11, &v17);
      uint64_t v11 = (char *)result + 1;
      ++v12;
      --v10;
    }
    while (v10);
    long long v13 = v15;
    unint64_t v14 = v16;
  }
  else
  {
    unint64_t v14 = 0;
    long long v13 = 0uLL;
  }
  *(_OWORD *)a3 = v13;
  *(void *)(a3 + 16) = v14;
  return result;
}

void sub_974900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_97491C@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  double result = (int *)sub_8DFD1C(a1, *a2, 0, "line");
  int64_t v5 = (unsigned __int16 *)((char *)result - *result);
  if (*v5 >= 0x1Bu
    && (uint64_t v6 = v5[13]) != 0
    && (uint64_t v7 = (unsigned int *)((char *)result + v6),
        uint64_t v8 = *v7,
        char v9 = (char *)v7 + v8,
        uint64_t v10 = *(unsigned int *)((char *)v7 + v8),
        v10))
  {
    uint64_t v11 = (char *)operator new(*(unsigned int *)((char *)v7 + v8));
    *(void *)&long long v15 = v11;
    *((void *)&v15 + 1) = v11;
    uint64_t v16 = &v11[v10];
    unint64_t v12 = v9 + 4;
    do
    {
      char v17 = *v12;
      double result = (int *)sub_8FBC7C((uint64_t)&v15, v11, &v17);
      uint64_t v11 = (char *)result + 1;
      ++v12;
      --v10;
    }
    while (v10);
    long long v13 = v15;
    unint64_t v14 = v16;
  }
  else
  {
    unint64_t v14 = 0;
    long long v13 = 0uLL;
  }
  *(_OWORD *)a3 = v13;
  *(void *)(a3 + 16) = v14;
  return result;
}

void sub_9749EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_974A08@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  double result = (int *)sub_8DFD1C(a1, *a2, 0, "line");
  int64_t v5 = (unsigned __int16 *)((char *)result - *result);
  if (*v5 >= 0x1Du
    && (uint64_t v6 = v5[14]) != 0
    && (uint64_t v7 = (unsigned int *)((char *)result + v6),
        uint64_t v8 = *v7,
        char v9 = (char *)v7 + v8,
        uint64_t v10 = *(unsigned int *)((char *)v7 + v8),
        v10))
  {
    uint64_t v11 = (char *)operator new(*(unsigned int *)((char *)v7 + v8));
    *(void *)&long long v15 = v11;
    *((void *)&v15 + 1) = v11;
    uint64_t v16 = &v11[v10];
    unint64_t v12 = v9 + 4;
    do
    {
      char v17 = *v12;
      double result = (int *)sub_8FBC7C((uint64_t)&v15, v11, &v17);
      uint64_t v11 = (char *)result + 1;
      ++v12;
      --v10;
    }
    while (v10);
    long long v13 = v15;
    unint64_t v14 = v16;
  }
  else
  {
    unint64_t v14 = 0;
    long long v13 = 0uLL;
  }
  *(_OWORD *)a3 = v13;
  *(void *)(a3 + 16) = v14;
  return result;
}

void sub_974AD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_974AF4(uint64_t a1, unint64_t *a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = a1 + 312;
  int64_t v5 = sub_3FAA8C((void *)(a1 + 312), a2);
  if (v5) {
    return v5[3];
  }
  uint64_t v105 = v4;
  __int16 v106 = a2;
  sub_725D0((uint64_t)v109);
  uint64_t v7 = *(uint64_t **)(v3 + 64);
  unint64_t v8 = v7[16];
  if (v8 >= v7[17])
  {
    uint64_t v9 = sub_979A3C(v7 + 15);
  }
  else
  {
    *(_OWORD *)(v8 + 8) = 0u;
    *(_OWORD *)(v8 + 264) = 0u;
    *(_OWORD *)(v8 + 280) = 0u;
    *(void *)(v8 + 296) = 0;
    *(_OWORD *)(v8 + 248) = 0u;
    *(_OWORD *)(v8 + 232) = 0u;
    *(_OWORD *)(v8 + 216) = 0u;
    *(_OWORD *)(v8 + 200) = 0u;
    *(_OWORD *)(v8 + 184) = 0u;
    *(_OWORD *)(v8 + 168) = 0u;
    *(_OWORD *)(v8 + 152) = 0u;
    *(_OWORD *)(v8 + 136) = 0u;
    *(_OWORD *)(v8 + 120) = 0u;
    *(_OWORD *)(v8 + 104) = 0u;
    *(_OWORD *)(v8 + 88) = 0u;
    *(_OWORD *)(v8 + 72) = 0u;
    *(_OWORD *)(v8 + 56) = 0u;
    *(_OWORD *)(v8 + 40) = 0u;
    *(_OWORD *)(v8 + 24) = 0u;
    *(void *)unint64_t v8 = -1;
    *(_DWORD *)(v8 + 8) = 0x7FFFFFFF;
    *(_OWORD *)(v8 + 16) = 0u;
    *(_OWORD *)(v8 + 32) = 0u;
    *(_OWORD *)(v8 + 48) = 0u;
    *(_OWORD *)(v8 + 64) = 0u;
    *(_OWORD *)(v8 + 80) = 0u;
    *(_OWORD *)(v8 + 96) = 0u;
    *(_OWORD *)(v8 + 112) = 0u;
    *(_OWORD *)(v8 + 128) = 0u;
    *(_OWORD *)(v8 + 144) = 0u;
    *(void *)(v8 + 160) = -1;
    *(void *)(v8 + 168) = 0;
    *(void *)(v8 + 176) = 0;
    *(void *)(v8 + 184) = 0;
    *(_DWORD *)(v8 + 224) = -1;
    *(_DWORD *)(v8 + 232) = -1;
    *(_DWORD *)(v8 + 235) = -1;
    *(void *)(v8 + 255) = 0;
    *(_WORD *)(v8 + 263) = 0;
    *(void *)(v8 + 239) = 0;
    *(void *)(v8 + 247) = 0;
    *(void *)(v8 + 272) = 0;
    *(void *)(v8 + 280) = 0;
    *(unsigned char *)(v8 + 296) = 0;
    uint64_t v9 = v8 + 304;
    *(void *)(v8 + 288) = 0;
  }
  v7[16] = v9;
  uint64_t v10 = (uint64_t *)(v3 + 24);
  uint64_t v11 = *(void *)(*(void *)(v3 + 64) + 128);
  unint64_t v12 = (int *)sub_499804(*(void *)(v3 + 24), *v106, 0, "access point");
  uint64_t v13 = (uint64_t)v12 + *(unsigned __int16 *)((char *)v12 - *v12 + 14);
  uint64_t v14 = *(unsigned int *)v13;
  LODWORD(v13) = *(_DWORD *)(v13 + 4);
  if (v13 >= 0xFFFFFFFE) {
    uint64_t v13 = 4294967294;
  }
  else {
    uint64_t v13 = v13;
  }
  *(void *)(v11 - 304) = v14 | (v13 << 32);
  *(_DWORD *)(v11 - 296) = 0x7FFFFFFF;
  uint64_t v15 = *v10;
  uint64_t v16 = (int *)sub_499804(*v10, *v106, 0, "access point");
  char v17 = (unsigned __int16 *)((char *)v16 - *v16);
  if (*v17 >= 5u && (uint64_t v18 = v17[2]) != 0) {
    uint64_t v19 = *(void *)((char *)v16 + v18);
  }
  else {
    uint64_t v19 = 0;
  }
  char v20 = sub_398020(v15, 0);
  unint64_t v21 = &v20[-*(int *)v20];
  if (*(unsigned __int16 *)v21 >= 0xBu)
  {
    uint64_t v22 = *((unsigned __int16 *)v21 + 5);
    if (v22)
    {
      if (v20[v22]) {
        uint64_t v19 = nullsub_1(v19);
      }
    }
  }
  *(void *)(v11 - 144) = v19;
  long long v23 = (int *)sub_499804(*(void *)(v3 + 24), *v106, 0, "access point");
  unint64_t v24 = (unsigned __int16 *)((char *)v23 - *v23);
  if (*v24 >= 0xBu && (uint64_t v25 = v24[5]) != 0) {
    uint64_t v26 = (char **)((char *)v23 + v25 + *(unsigned int *)((char *)v23 + v25));
  }
  else {
    uint64_t v26 = 0;
  }
  sub_8F48DC(v26, (void (*)(void **__return_ptr, char *))sub_4A0694, (uint64_t)&__p);
  sub_997050((uint64_t *)&__p, *(void *)(v3 + 72) + 968, v110);
  uint64_t v27 = (uint64_t *)(v11 - 288);
  unint64_t v28 = *(void ***)(v11 - 288);
  uint64_t v108 = v11;
  if (v28)
  {
    uint64_t v29 = (void ***)(v11 - 280);
    uint64_t v30 = *(void ***)(v11 - 280);
    int v31 = v28;
    if (v30 == v28)
    {
LABEL_30:
      *uint64_t v29 = v28;
      operator delete(v31);
      *uint64_t v27 = 0;
      v27[1] = 0;
      v27[2] = 0;
      uint64_t v11 = v108;
      goto LABEL_31;
    }
    while (1)
    {
      if (*((char *)v30 - 1) < 0)
      {
        operator delete(*(v30 - 3));
        if ((*((char *)v30 - 33) & 0x80000000) == 0) {
          goto LABEL_25;
        }
LABEL_28:
        operator delete(*(v30 - 7));
        v30 -= 7;
        if (v30 == v28)
        {
LABEL_29:
          int v31 = (void *)*v27;
          goto LABEL_30;
        }
      }
      else
      {
        if (*((char *)v30 - 33) < 0) {
          goto LABEL_28;
        }
LABEL_25:
        v30 -= 7;
        if (v30 == v28) {
          goto LABEL_29;
        }
      }
    }
  }
LABEL_31:
  *(_OWORD *)uint64_t v27 = *(_OWORD *)v110;
  *(void *)(v11 - 272) = v111;
  v110[0] = 0;
  v110[1] = 0;
  unint64_t v111 = 0;
  uint64_t v32 = (void **)__p;
  if (__p)
  {
    uint64_t v33 = (char *)v122;
    uint64_t v34 = __p;
    if (v122 != __p)
    {
      do
      {
        uint64_t v35 = *((void *)v33 - 3);
        if (v35)
        {
          uint64_t v36 = *((void *)v33 - 2);
          uint64_t v37 = (void *)*((void *)v33 - 3);
          if (v36 != v35)
          {
            do
            {
              if (*(char *)(v36 - 1) < 0) {
                operator delete(*(void **)(v36 - 24));
              }
              v36 -= 32;
            }
            while (v36 != v35);
            uint64_t v37 = (void *)*((void *)v33 - 3);
          }
          *((void *)v33 - 2) = v35;
          operator delete(v37);
        }
        long long v38 = (void **)(v33 - 64);
        if (*(v33 - 41) < 0) {
          operator delete(*v38);
        }
        v33 -= 64;
      }
      while (v38 != v32);
      uint64_t v34 = __p;
      uint64_t v11 = v108;
    }
    int v122 = v32;
    operator delete(v34);
  }
  uint64_t v39 = (int *)sub_499804(*(void *)(v3 + 24), *v106, 0, "access point");
  uint64_t v40 = (unsigned __int16 *)((char *)v39 - *v39);
  if (*v40 >= 0xDu && (uint64_t v41 = v40[6]) != 0) {
    uint64_t v42 = (char **)((char *)v39 + v41 + *(unsigned int *)((char *)v39 + v41));
  }
  else {
    uint64_t v42 = 0;
  }
  sub_8F48DC(v42, (void (*)(void **__return_ptr, char *))sub_4A0694, (uint64_t)&__p);
  sub_997050((uint64_t *)&__p, *(void *)(v3 + 72) + 968, v110);
  long long v43 = (uint64_t *)(v11 - 264);
  uint64_t v44 = *(void *)(v11 - 264);
  if (v44)
  {
    uint64_t v45 = *(void *)(v11 - 256);
    uint64_t v46 = *(void **)(v11 - 264);
    if (v45 == v44)
    {
LABEL_60:
      *(void *)(v11 - 256) = v44;
      operator delete(v46);
      *long long v43 = 0;
      *(void *)(v11 - 256) = 0;
      *(void *)(v11 - 248) = 0;
      goto LABEL_61;
    }
    while (1)
    {
      if (*(char *)(v45 - 1) < 0)
      {
        operator delete(*(void **)(v45 - 24));
        if ((*(char *)(v45 - 33) & 0x80000000) == 0) {
          goto LABEL_55;
        }
LABEL_58:
        operator delete(*(void **)(v45 - 56));
        v45 -= 56;
        if (v45 == v44)
        {
LABEL_59:
          uint64_t v46 = (void *)*v43;
          goto LABEL_60;
        }
      }
      else
      {
        if (*(char *)(v45 - 33) < 0) {
          goto LABEL_58;
        }
LABEL_55:
        v45 -= 56;
        if (v45 == v44) {
          goto LABEL_59;
        }
      }
    }
  }
LABEL_61:
  *(_OWORD *)long long v43 = *(_OWORD *)v110;
  *(void *)(v11 - 248) = v111;
  v110[0] = 0;
  v110[1] = 0;
  unint64_t v111 = 0;
  long long v47 = (void **)__p;
  if (__p)
  {
    int v48 = (char *)v122;
    int v49 = __p;
    if (v122 != __p)
    {
      do
      {
        uint64_t v50 = *((void *)v48 - 3);
        if (v50)
        {
          uint64_t v51 = *((void *)v48 - 2);
          uint64_t v52 = (void *)*((void *)v48 - 3);
          if (v51 != v50)
          {
            do
            {
              if (*(char *)(v51 - 1) < 0) {
                operator delete(*(void **)(v51 - 24));
              }
              v51 -= 32;
            }
            while (v51 != v50);
            uint64_t v52 = (void *)*((void *)v48 - 3);
          }
          *((void *)v48 - 2) = v50;
          operator delete(v52);
        }
        uint64_t v53 = (void **)(v48 - 64);
        if (*(v48 - 41) < 0) {
          operator delete(*v53);
        }
        v48 -= 64;
      }
      while (v53 != v47);
      int v49 = __p;
      uint64_t v11 = v108;
    }
    int v122 = v47;
    operator delete(v49);
  }
  sub_99904C(v27, (uint64_t)v110);
  char v54 = (void **)(v11 - 192);
  int v55 = *(void ***)(v11 - 192);
  if (v55)
  {
    uint64_t v56 = *(void ***)(v11 - 184);
    uint64_t v57 = v55;
    if (v56 == v55)
    {
LABEL_86:
      uint64_t v11 = v108;
      *(void *)(v108 - 184) = v55;
      operator delete(v57);
      uint64_t *v54 = 0;
      v54[1] = 0;
      v54[2] = 0;
      goto LABEL_87;
    }
    while (1)
    {
      if (*((char *)v56 - 1) < 0)
      {
        operator delete(*(v56 - 3));
        if ((*((char *)v56 - 33) & 0x80000000) == 0) {
          goto LABEL_81;
        }
LABEL_84:
        operator delete(*(v56 - 7));
        v56 -= 8;
        if (v56 == v55)
        {
LABEL_85:
          uint64_t v57 = *v54;
          goto LABEL_86;
        }
      }
      else
      {
        if (*((char *)v56 - 33) < 0) {
          goto LABEL_84;
        }
LABEL_81:
        v56 -= 8;
        if (v56 == v55) {
          goto LABEL_85;
        }
      }
    }
  }
LABEL_87:
  *(_OWORD *)(v11 - 192) = *(_OWORD *)v110;
  *(void *)(v11 - 176) = v111;
  sub_999124(v43, (uint64_t)v110);
  uint64_t v58 = v11 - 168;
  uint64_t v59 = *(void ***)(v11 - 168);
  if (!v59) {
    goto LABEL_97;
  }
  char v60 = *(void ***)(v11 - 160);
  int v61 = v59;
  if (v60 != v59)
  {
    while (1)
    {
      if (*((char *)v60 - 1) < 0)
      {
        operator delete(*(v60 - 3));
        if ((*((char *)v60 - 33) & 0x80000000) == 0) {
          goto LABEL_91;
        }
LABEL_94:
        operator delete(*(v60 - 7));
        v60 -= 8;
        if (v60 == v59)
        {
LABEL_95:
          int v61 = *(void ***)v58;
          break;
        }
      }
      else
      {
        if (*((char *)v60 - 33) < 0) {
          goto LABEL_94;
        }
LABEL_91:
        v60 -= 8;
        if (v60 == v59) {
          goto LABEL_95;
        }
      }
    }
  }
  uint64_t v11 = v108;
  *(void *)(v108 - 160) = v59;
  operator delete(v61);
  *(void *)uint64_t v58 = 0;
  *(void *)(v58 + 8) = 0;
  *(void *)(v58 + 16) = 0;
LABEL_97:
  *(_OWORD *)(v11 - 168) = *(_OWORD *)v110;
  *(void *)(v11 - 152) = v111;
  sub_995114(v27, (char *)v110);
  uint64_t v62 = (void **)(v11 - 240);
  if (*(char *)(v11 - 217) < 0) {
    operator delete(*v62);
  }
  long long v63 = *(_OWORD *)v110;
  *(void *)(v11 - 224) = v111;
  *(_OWORD *)uint64_t v62 = v63;
  HIBYTE(v111) = 0;
  LOBYTE(v110[0]) = 0;
  if (SHIBYTE(v115[0]) < 0)
  {
    operator delete(v113);
    if (SHIBYTE(v111) < 0) {
      operator delete(v110[0]);
    }
  }
  sub_995114(v43, (char *)v110);
  uint64_t v64 = (void **)(v11 - 216);
  if (*(char *)(v11 - 193) < 0) {
    operator delete(*v64);
  }
  long long v65 = *(_OWORD *)v110;
  *(void *)(v11 - 200) = v111;
  *(_OWORD *)uint64_t v64 = v65;
  HIBYTE(v111) = 0;
  LOBYTE(v110[0]) = 0;
  if (SHIBYTE(v115[0]) < 0)
  {
    operator delete(v113);
    if (SHIBYTE(v111) < 0) {
      operator delete(v110[0]);
    }
  }
  uint8x8_t v66 = (uint8x8_t)sub_9756A0(*(void *)(v3 + 24), v106, (uint64_t)&__p).n128_u64[0];
  if (!v126) {
    goto LABEL_123;
  }
  sub_966D38((uint64_t)&__p, 5, *(void *)(v3 + 72) + 968, (uint64_t)v110, v66);
  sub_4F377C(v11 - 112, (uint64_t)v110);
  *(void *)(v11 - 72) = v114;
  uint64_t v67 = (void **)(v11 - 64);
  if (*(char *)(v11 - 41) < 0) {
    operator delete(*v67);
  }
  long long v68 = *(_OWORD *)v115;
  *(void *)(v11 - 48) = v116;
  *(_OWORD *)uint64_t v67 = v68;
  HIBYTE(v116) = 0;
  LOBYTE(v115[0]) = 0;
  *(unsigned char *)(v11 - 40) = v117;
  uint64_t v69 = (void **)(v11 - 32);
  if (*(char *)(v11 - 9) < 0) {
    operator delete(*v69);
  }
  long long v70 = *(_OWORD *)v118;
  *(void *)(v11 - 16) = v119;
  *(_OWORD *)uint64_t v69 = v70;
  HIBYTE(v119) = 0;
  LOBYTE(v118[0]) = 0;
  *(unsigned char *)(v11 - 8) = v120;
  if (SHIBYTE(v119) < 0)
  {
    operator delete(v118[0]);
    if ((SHIBYTE(v116) & 0x80000000) == 0)
    {
LABEL_114:
      int v71 = (int)v113;
      if (v113 != 1) {
        goto LABEL_115;
      }
      goto LABEL_120;
    }
  }
  else if ((SHIBYTE(v116) & 0x80000000) == 0)
  {
    goto LABEL_114;
  }
  operator delete(v115[0]);
  int v71 = (int)v113;
  if (v113 != 1)
  {
LABEL_115:
    if (v71 || (v112 & 0x80000000) == 0) {
      goto LABEL_123;
    }
    int v72 = v110[1];
    goto LABEL_122;
  }
LABEL_120:
  int v72 = v110[1];
  if (v110[1])
  {
    unint64_t v111 = v110[1];
LABEL_122:
    operator delete(v72);
  }
LABEL_123:
  sub_8ED2E4(*(void *)(v3 + 24), v106, (uint64_t)v110);
  long long v73 = (unint64_t *)v110[0];
  int v74 = (unint64_t *)v110[1];
  if (v110[0] == v110[1]) {
    goto LABEL_148;
  }
  int v107 = (void **)(v11 - 136);
  do
  {
    uint64_t v76 = v3;
    unint64_t v77 = sub_971CD0(v3, v73);
    unint64_t v78 = v77;
    int v80 = *(unint64_t **)(v11 - 128);
    unint64_t v79 = *(void *)(v11 - 120);
    if ((unint64_t)v80 < v79)
    {
      *int v80 = v77;
      uint64_t v75 = (uint64_t)(v80 + 1);
      goto LABEL_126;
    }
    unint64_t v81 = (unint64_t *)*v107;
    uint64_t v82 = (char *)v80 - (unsigned char *)*v107;
    uint64_t v83 = v82 >> 3;
    unint64_t v84 = (v82 >> 3) + 1;
    if (v84 >> 61) {
      sub_2E00();
    }
    uint64_t v85 = v79 - (void)v81;
    if (v85 >> 2 > v84) {
      unint64_t v84 = v85 >> 2;
    }
    if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v86 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v86 = v84;
    }
    if (v86)
    {
      if (v86 >> 61) {
        sub_188D718();
      }
      char v87 = operator new(8 * v86);
      uint64_t v88 = (unint64_t *)&v87[8 * v83];
      *uint64_t v88 = v78;
      uint64_t v75 = (uint64_t)(v88 + 1);
      if (v80 == v81) {
        goto LABEL_145;
      }
LABEL_139:
      unint64_t v89 = (char *)(v80 - 1) - (char *)v81;
      if (v89 < 0x58) {
        goto LABEL_166;
      }
      if ((unint64_t)((char *)v80 - &v87[v82]) < 0x20) {
        goto LABEL_166;
      }
      uint64_t v90 = (v89 >> 3) + 1;
      uint64_t v91 = 8 * (v90 & 0x3FFFFFFFFFFFFFFCLL);
      unint64_t v92 = &v80[v91 / 0xFFFFFFFFFFFFFFF8];
      uint64_t v88 = (unint64_t *)((char *)v88 - v91);
      uint64_t v93 = &v87[8 * v83 - 16];
      uint64_t v94 = v80 - 2;
      uint64_t v95 = v90 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v96 = *(_OWORD *)v94;
        *(v93 - 1) = *((_OWORD *)v94 - 1);
        _OWORD *v93 = v96;
        v93 -= 2;
        v94 -= 4;
        v95 -= 4;
      }
      while (v95);
      int v80 = v92;
      if (v90 != (v90 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_166:
        do
        {
          unint64_t v97 = *--v80;
          *--uint64_t v88 = v97;
        }
        while (v80 != v81);
      }
      goto LABEL_145;
    }
    char v87 = 0;
    uint64_t v88 = (unint64_t *)(8 * v83);
    *(void *)(8 * v83) = v78;
    uint64_t v75 = 8 * v83 + 8;
    if (v80 != v81) {
      goto LABEL_139;
    }
LABEL_145:
    *(void *)(v108 - 136) = v88;
    *(void *)(v108 - 128) = v75;
    *(void *)(v108 - 120) = &v87[8 * v86];
    if (v81) {
      operator delete(v81);
    }
LABEL_126:
    uint64_t v3 = v76;
    *(void *)(v108 - 128) = v75;
    uint64_t v11 = v108;
    ++v73;
  }
  while (v73 != v74);
  long long v73 = (unint64_t *)v110[0];
LABEL_148:
  if (v73)
  {
    v110[1] = v73;
    operator delete(v73);
  }
  uint64_t v98 = *(void *)(v3 + 64);
  uint64_t v100 = *(void *)(v98 + 120);
  uint64_t v99 = *(void *)(v98 + 128);
  v110[0] = v106;
  unint64_t v6 = 0x86BCA1AF286BCA1BLL * ((v99 - v100) >> 4) - 1;
  sub_979DA4(v105, v106, (uint64_t)&unk_20F06E0, (void **)v110)[3] = v6;
  *(double *)(v3 + 432) = sub_72688((uint64_t)v109) + *(double *)(v3 + 432);
  if (v126)
  {
    uint64_t v101 = (void **)v124;
    if (v124)
    {
      uint64_t v102 = v125;
      uint64_t v103 = v124;
      if (v125 != v124)
      {
        do
        {
          if (*((char *)v102 - 1) < 0) {
            operator delete(*(v102 - 3));
          }
          v102 -= 4;
        }
        while (v102 != v101);
        uint64_t v103 = v124;
      }
      uint64_t v125 = v101;
      operator delete(v103);
    }
    if (v123 < 0) {
      operator delete(v122);
    }
  }
  return v6;
}

void sub_975610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_975624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_975638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_97564C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void **a31)
{
}

void sub_975660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void **a31)
{
}

void sub_975678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (__p) {
    operator delete(__p);
  }
  sub_9671BC((uint64_t)&a31);
  _Unwind_Resume(a1);
}

__n128 sub_9756A0@<Q0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = (int *)sub_499804(a1, *a2, 0, "access point");
  unint64_t v6 = (unsigned __int16 *)((char *)v4 - *v4);
  if (*v6 < 0x1Bu || (uint64_t v7 = v6[13]) == 0)
  {
    result.n128_u64[0] = 0;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
    return result;
  }
  unint64_t v8 = (int *)((char *)v4 + v7 + *(unsigned int *)((char *)v4 + v7));
  uint64_t v9 = (unsigned __int16 *)((char *)v8 - *v8);
  unsigned int v10 = *v9;
  if (v10 <= 6)
  {
    unsigned int v11 = 0;
    uint64_t v12 = 0xFFFFFFLL;
    if (v10 < 5) {
      goto LABEL_15;
    }
    uint64_t v13 = v9[2];
    if (!v13) {
      goto LABEL_15;
    }
    goto LABEL_12;
  }
  if (v9[3])
  {
    unsigned int v11 = *(int *)((char *)v8 + v9[3]);
    if (v10 >= 9) {
      goto LABEL_6;
    }
  }
  else
  {
    unsigned int v11 = 0;
    if (v10 >= 9)
    {
LABEL_6:
      if (v9[4])
      {
        uint64_t v12 = *(unsigned int *)((char *)v8 + v9[4]);
        uint64_t v13 = v9[2];
        if (!v13) {
          goto LABEL_15;
        }
      }
      else
      {
        uint64_t v12 = 0xFFFFFFLL;
        uint64_t v13 = v9[2];
        if (!v13) {
          goto LABEL_15;
        }
      }
      goto LABEL_12;
    }
  }
  uint64_t v12 = 0xFFFFFFLL;
  uint64_t v13 = v9[2];
  if (!v13)
  {
LABEL_15:
    uint64_t v14 = 0;
    goto LABEL_16;
  }
LABEL_12:
  uint64_t v14 = (int *)((char *)v8 + v13 + *(unsigned int *)((char *)v8 + v13));
LABEL_16:
  sub_4A0694(v14, (uint64_t)&v18);
  uint64_t v15 = *(void *)v19;
  *(void *)(a3 + 8) = v18;
  *(void *)(a3 + 16) = v15;
  *(void *)(a3 + 23) = *(void *)&v19[7];
  LOBYTE(v15) = v20;
  __n128 result = v21;
  uint64_t v16 = v23;
  long long v17 = v22;
  *(unsigned char *)(a3 + 72) = 1;
  *(void *)a3 = v11 | (unint64_t)(v12 << 32);
  *(unsigned char *)(a3 + 31) = v15;
  *(__n128 *)(a3 + 32) = result;
  *(_OWORD *)(a3 + 48) = v17;
  *(void *)(a3 + 64) = v16;
  return result;
}

unint64_t sub_975814(uint64_t a1, const void **a2)
{
  uint64_t v4 = a1 + 352;
  int64_t v5 = sub_97A114((void *)(a1 + 352), (uint64_t)a2);
  if (v5) {
    return v5[5];
  }
  sub_725D0((uint64_t)v16);
  uint64_t v7 = *(void *)(a1 + 64);
  unint64_t v8 = *(void **)(v7 + 248);
  if ((unint64_t)v8 >= *(void *)(v7 + 256))
  {
    uint64_t v14 = sub_97A2E4((char **)(v7 + 240), (uint64_t)a2);
  }
  else
  {
    void *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    unsigned int v10 = *a2;
    uint64_t v9 = a2[1];
    int64_t v11 = v9 - (unsigned char *)*a2;
    if (v9 != *a2)
    {
      if (0xAAAAAAAAAAAAAAABLL * (v11 >> 2) >= 0x1555555555555556) {
        sub_2E00();
      }
      uint64_t v12 = (char *)operator new(v11);
      void *v8 = v12;
      v8[1] = v12;
      uint64_t v13 = &v12[4 * (v11 >> 2)];
      v8[2] = v13;
      memcpy(v12, v10, v11);
      v8[1] = v13;
    }
    uint64_t v14 = (char *)(v8 + 3);
    *(void *)(v7 + 248) = v8 + 3;
  }
  *(void *)(v7 + 248) = v14;
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL
     * ((uint64_t)(*(void *)(*(void *)(a1 + 64) + 248) - *(void *)(*(void *)(a1 + 64) + 240)) >> 3)
     - 1;
  long long v17 = a2;
  sub_97A4FC(v4, (uint64_t)a2, (uint64_t)&unk_20F06E0, (uint64_t *)&v17)[5] = v6;
  *(double *)(a1 + 432) = sub_72688((uint64_t)v16) + *(double *)(a1 + 432);
  return v6;
}

void sub_97596C(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v4;
    operator delete(v4);
  }
  *(void *)(v2 + 248) = v1;
  _Unwind_Resume(exception_object);
}

uint64_t sub_97598C(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int *a4, int a5)
{
  unsigned int v95 = *((_DWORD *)a3 + 3);
  if (v95 <= 1)
  {
    uint64_t v93 = *a3;
    int v94 = *((_DWORD *)a3 + 2);
  }
  unsigned int v98 = a4[3];
  if (v98 <= 1)
  {
    uint64_t v96 = *(void *)a4;
    unsigned int v97 = a4[2];
  }
  char v99 = a5;
  unsigned int v10 = sub_97AA4C((void *)(a1 + 392), (uint64_t)&v93);
  if (!v10)
  {
    sub_725D0((uint64_t)v87);
    uint64_t v56 = -1;
    uint64_t v57 = -1;
    uint64_t v58 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v59 = 0;
    int v60 = -1935635296;
    v61[0] = 0;
    *(_DWORD *)((char *)v61 + 7) = 0;
    memset(&v61[2], 0, 24);
    int v62 = 0;
    char v63 = 100;
    int v65 = 0;
    long long v66 = 0u;
    long long v67 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    char v72 = 0;
    uint64_t v78 = 0;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
    long long v73 = 0u;
    long long v79 = xmmword_20B8E30;
    uint64_t v80 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v83 = 0;
    int v84 = 0;
    uint64_t v81 = 0;
    uint64_t v82 = 0;
    char v85 = 0;
    int v86 = 0;
    uint64_t v64 = 1;
    unint64_t v54 = sub_976118(a1, a4);
    int v55 = v12;
    sub_725D0((uint64_t)v53);
    sub_970330(a1 + 48, *(void *)(a1 + 8), a1 + 88, *(void *)(a1 + 72), a5);
    sub_48381C((uint64_t)v92, (uint64_t)&v54);
    sub_483E44(&v49, (uint64_t)v92, 1uLL);
    sub_7A3ACC((uint64_t)v89, a2);
    char v46 = 0;
    LOBYTE(v45) = 0;
    sub_460914((uint64_t)v90, (uint64_t)v89, &v45);
    sub_97AE68(&v47, (long long *)v90, 1uLL);
    v88[2] = 0;
    v88[1] = 0;
    sub_7334B0();
    uint64_t v13 = (void **)v47;
    if (!v47) {
      goto LABEL_21;
    }
    uint64_t v14 = v48;
    uint64_t v15 = v47;
    if (v48 == v47)
    {
LABEL_20:
      int v48 = v13;
      operator delete(v15);
LABEL_21:
      if (v91 < 0) {
        operator delete(v90[12]);
      }
      char v20 = v90[0];
      if (v90[0])
      {
        __n128 v21 = v90[1];
        long long v22 = v90[0];
        if (v90[1] != v90[0])
        {
          do
            __n128 v21 = (void *)sub_3AFFFC((uint64_t)v21 - 1056);
          while (v21 != v20);
          long long v22 = v90[0];
        }
        v90[1] = v20;
        operator delete(v22);
      }
      if (v46 < 0) {
        operator delete((void *)v45);
      }
      sub_3AFFFC((uint64_t)v89);
      uint64_t v23 = v49;
      if (v49)
      {
        uint64_t v24 = (uint64_t)v50;
        uint64_t v25 = v49;
        if (v50 != v49)
        {
          do
            uint64_t v24 = sub_402C7C(v24 - 376);
          while ((void *)v24 != v23);
          uint64_t v25 = v49;
        }
        uint64_t v50 = v23;
        operator delete(v25);
      }
      sub_402C7C((uint64_t)v92);
      *(double *)(a1 + 440) = sub_72688((uint64_t)v53) + *(double *)(a1 + 440);
      uint64_t v26 = (uint64_t)v51;
      if (v51 == (void *)v52)
      {
        v88[0] = -1;
        if (v51)
        {
LABEL_55:
          uint64_t v42 = v52;
          long long v43 = (void *)v26;
          if (v52 != v26)
          {
            do
              uint64_t v42 = sub_574D4C(v42 - 7560);
            while (v42 != v26);
            long long v43 = v51;
          }
          uint64_t v52 = v26;
          operator delete(v43);
        }
LABEL_59:
        sub_402C7C((uint64_t)&v54);
        int64_t v11 = v88;
        return *v11;
      }
      uint64_t v27 = *(uint64_t **)(a1 + 64);
      unint64_t v28 = v27[22];
      if (v28 >= v27[23])
      {
        uint64_t v29 = sub_97B238(v27 + 21, (uint64_t)v51);
      }
      else
      {
        sub_7A1FB0(v27[22], (uint64_t)v51);
        uint64_t v29 = v28 + 7560;
        v27[22] = v28 + 7560;
      }
      int v30 = 0;
      v27[22] = v29;
      if (*((_DWORD *)a3 + 3) == 1 && *(_DWORD *)a3 == 4)
      {
        int v31 = (int *)sub_4992B0(*(void *)(a1 + 24), *((unsigned int *)a3 + 2) | ((unint64_t)*((unsigned int *)a3 + 1) << 32), 0, "road access point");
        uint64_t v32 = (unsigned __int16 *)((char *)v31 - *v31);
        if (*v32 >= 0xBu)
        {
          uint64_t v33 = v32[5];
          if (v33)
          {
            int v30 = 10 * *(int *)((char *)v31 + v33);
            int v34 = 0;
            if (a4[3] != 1) {
              goto LABEL_54;
            }
          }
          else
          {
            int v30 = 0;
            int v34 = 0;
            if (a4[3] != 1) {
              goto LABEL_54;
            }
          }
LABEL_49:
          if (*a4 == 4)
          {
            uint64_t v35 = (int *)sub_4992B0(*(void *)(a1 + 24), a4[2] | ((unint64_t)a4[1] << 32), 0, "road access point");
            uint64_t v36 = (unsigned __int16 *)((char *)v35 - *v35);
            if (*v36 >= 0xBu && (uint64_t v37 = v36[5]) != 0) {
              int v34 = 10 * *(int *)((char *)v35 + v37);
            }
            else {
              int v34 = 0;
            }
          }
LABEL_54:
          long long v38 = (void *)(*(void *)(*(void *)(a1 + 64) + 176) - 7560);
          uint64_t v39 = sub_6467E8(v38, 0);
          int v40 = v34 + v30;
          *(_DWORD *)(v39 + 516) += v40;
          int v41 = sub_646CE8((uint64_t)v38);
          sub_64AF9C((uint64_t)v38, v41 + v40);
          v88[0] = 0xBAA6550FFBAA6551
                 * ((uint64_t)(*(void *)(*(void *)(a1 + 64) + 176) - *(void *)(*(void *)(a1 + 64) + 168)) >> 3)
                 - 1;
          sub_97B3E0(a1 + 392, (uint64_t)&v93, (uint64_t)&v93, v88);
          *(double *)(a1 + 432) = sub_72688((uint64_t)v87) + *(double *)(a1 + 432);
          uint64_t v26 = (uint64_t)v51;
          if (v51) {
            goto LABEL_55;
          }
          goto LABEL_59;
        }
        int v30 = 0;
      }
      int v34 = 0;
      if (a4[3] != 1) {
        goto LABEL_54;
      }
      goto LABEL_49;
    }
    while (1)
    {
      if (*((char *)v14 - 1) < 0)
      {
        operator delete(*(v14 - 3));
        uint64_t v16 = v14 - 15;
        long long v17 = *(v14 - 15);
        if (v17)
        {
LABEL_16:
          uint64_t v18 = (uint64_t)*(v14 - 14);
          uint64_t v19 = v17;
          if ((void *)v18 != v17)
          {
            do
              uint64_t v18 = sub_3AFFFC(v18 - 1056);
            while ((void *)v18 != v17);
            uint64_t v19 = *v16;
          }
          *(v14 - 14) = v17;
          operator delete(v19);
        }
      }
      else
      {
        uint64_t v16 = v14 - 15;
        long long v17 = *(v14 - 15);
        if (v17) {
          goto LABEL_16;
        }
      }
      uint64_t v14 = v16;
      if (v16 == v13)
      {
        uint64_t v15 = v47;
        goto LABEL_20;
      }
    }
  }
  int64_t v11 = v10 + 7;
  return *v11;
}

void sub_975FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
}

unint64_t sub_976118(uint64_t a1, unsigned int *a2)
{
  unsigned int v2 = a2[3];
  if (v2 == 1)
  {
    uint64_t v4 = a2[1];
    uint64_t v5 = a2[2];
    switch(*a2)
    {
      case 0u:
        unint64_t v6 = (int *)sub_498D5C(*(void *)(a1 + 24), v5 | (v4 << 32), 0, "stop");
        goto LABEL_9;
      case 1u:
        unint64_t v6 = (int *)sub_8ED3D4(*(void *)(a1 + 24), v5 | (v4 << 32), 0, "hall");
        goto LABEL_9;
      case 2u:
        unint64_t v6 = (int *)sub_8ED928(*(void *)(a1 + 24), v5 | (v4 << 32), 0, "station");
LABEL_9:
        unsigned __int16 v7 = *(_WORD *)((char *)v6 - *v6 + 6);
        break;
      case 3u:
        unint64_t v6 = (int *)sub_499804(*(void *)(a1 + 24), v5 | (v4 << 32), 0, "access point");
        unsigned __int16 v7 = *(_WORD *)((char *)v6 - *v6 + 14);
        break;
      case 4u:
        unint64_t v6 = (int *)sub_4992B0(*(void *)(a1 + 24), v5 | (v4 << 32), 0, "road access point");
        unsigned __int16 v7 = *(_WORD *)((char *)v6 - *v6 + 8);
        break;
      default:
        return -1;
    }
    uint64_t v9 = (uint64_t)v6 + v7;
    unsigned int v8 = *(_DWORD *)v9;
    LODWORD(v9) = *(_DWORD *)(v9 + 4);
    if (v9 >= 0xFFFFFFFE) {
      uint64_t v9 = 4294967294;
    }
    else {
      uint64_t v9 = v9;
    }
    return v8 | (unint64_t)(v9 << 32);
  }
  else if (v2)
  {
    return -1;
  }
  else
  {
    return *a2 | ((unint64_t)a2[1] << 32);
  }
}

void sub_976280(uint64_t a1, unint64_t a2)
{
  unsigned int v2 = *(void ***)a1;
  if (a2 <= (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 7) {
    return;
  }
  if (a2 >> 57) {
    sub_2E00();
  }
  uint64_t v4 = *(void ***)(a1 + 8);
  unint64_t v5 = a2 << 7;
  unint64_t v6 = (char *)operator new(a2 << 7);
  unsigned __int16 v7 = &v6[v5];
  unsigned int v8 = &v6[(char *)v4 - (char *)v2];
  if (v4 == v2)
  {
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v7;
    if (!v2) {
      return;
    }
    goto LABEL_22;
  }
  uint64_t v9 = 0;
  do
  {
    unsigned int v10 = &v8[v9 * 8];
    int64_t v11 = &v4[v9];
    *((_OWORD *)v10 - 8) = *(_OWORD *)&v4[v9 - 16];
    int v12 = (void *)LODWORD(v4[v9 - 10]);
    *((_DWORD *)v10 - 20) = v12;
    sub_4F38B0(v12, (uint64_t *)&v4[v9 - 14], &v8[v9 * 8 - 112]);
    *((void *)v10 - 9) = v4[v9 - 9];
    long long v13 = *(_OWORD *)&v4[v9 - 8];
    *((void *)v10 - 6) = v4[v9 - 6];
    *((_OWORD *)v10 - 4) = v13;
    *(v11 - 7) = 0;
    *(v11 - 6) = 0;
    *(v11 - 8) = 0;
    *(v10 - 40) = (char)v4[v9 - 5];
    long long v14 = *(_OWORD *)&v4[v9 - 4];
    *((void *)v10 - 2) = v4[v9 - 2];
    *((_OWORD *)v10 - 2) = v14;
    *(v11 - 3) = 0;
    *(v11 - 2) = 0;
    *(v11 - 4) = 0;
    *(v10 - 8) = (char)v4[v9 - 1];
    v9 -= 16;
  }
  while (&v4[v9] != v2);
  uint64_t v15 = *(void ***)a1;
  unsigned int v2 = *(void ***)(a1 + 8);
  *(void *)a1 = &v8[v9 * 8];
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v7;
  if (v2 != v15)
  {
    while (1)
    {
      if (*((char *)v2 - 9) < 0)
      {
        operator delete(*(v2 - 4));
        if ((*((char *)v2 - 41) & 0x80000000) == 0)
        {
LABEL_12:
          int v16 = *((_DWORD *)v2 - 20);
          if (v16 != 1) {
            goto LABEL_13;
          }
          goto LABEL_18;
        }
      }
      else if ((*((char *)v2 - 41) & 0x80000000) == 0)
      {
        goto LABEL_12;
      }
      operator delete(*(v2 - 8));
      int v16 = *((_DWORD *)v2 - 20);
      if (v16 != 1)
      {
LABEL_13:
        if (v16 || (*((char *)v2 - 81) & 0x80000000) == 0) {
          goto LABEL_9;
        }
        long long v17 = *(v2 - 13);
        goto LABEL_8;
      }
LABEL_18:
      long long v17 = *(v2 - 13);
      if (!v17) {
        goto LABEL_9;
      }
      *(v2 - 12) = v17;
LABEL_8:
      operator delete(v17);
LABEL_9:
      v2 -= 16;
      if (v2 == v15)
      {
        unsigned int v2 = v15;
        break;
      }
    }
  }
  if (!v2) {
    return;
  }
LABEL_22:

  operator delete(v2);
}

void **sub_976450(void **a1)
{
  unsigned int v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *((void *)v3 - 5);
        if (v5)
        {
          uint64_t v6 = *((void *)v3 - 4);
          unsigned __int16 v7 = (void *)*((void *)v3 - 5);
          if (v6 != v5)
          {
            do
            {
              if (*(char *)(v6 - 1) < 0) {
                operator delete(*(void **)(v6 - 24));
              }
              v6 -= 32;
            }
            while (v6 != v5);
            unsigned __int16 v7 = (void *)*((void *)v3 - 5);
          }
          *((void *)v3 - 4) = v5;
          operator delete(v7);
        }
        if (*(v3 - 57) < 0) {
          operator delete(*((void **)v3 - 10));
        }
        v3 -= 88;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_976514(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t sub_97651C(uint64_t a1)
{
  return a1 + 432;
}

char **sub_976524@<X0>(char **result@<X0>, void (*a2)(void **__return_ptr, char *)@<X1>, uint64_t a3@<X8>)
{
  void (*v8)(void **__return_ptr, char *);

  uint64_t v7 = 0;
  unsigned int v8 = a2;
  long long v6 = 0u;
  if (result)
  {
    uint64_t v4 = (unsigned int *)result;
    sub_9766D8((char **)&v6, *(unsigned int *)result);
    __n128 result = sub_97693C(v4, (char **)&v6, *((uint64_t *)&v6 + 1), &v8);
    uint64_t v5 = v7;
    *(_OWORD *)a3 = v6;
    *(void *)(a3 + 16) = v5;
  }
  else
  {
    *(_OWORD *)a3 = 0uLL;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

void sub_9765AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    sub_20ACBA8((uint64_t)&a9, a9);
  }
  _Unwind_Resume(exception_object);
}

double sub_9765C8@<D0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v4 = *v3;
  if (v4 >= 5)
  {
    if (v3[2])
    {
      uint64_t v9 = *(void *)((char *)a1 + v3[2]);
      if (v4 >= 9) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v9 = -1;
      if (v4 >= 9)
      {
LABEL_4:
        if (v3[4])
        {
          BOOL v5 = *((unsigned char *)a1 + v3[4]) != 0;
          uint64_t v6 = v3[3];
          if (!v6) {
            goto LABEL_13;
          }
        }
        else
        {
          BOOL v5 = 0;
          uint64_t v6 = v3[3];
          if (!v6)
          {
LABEL_13:
            uint64_t v7 = 0;
            goto LABEL_14;
          }
        }
        goto LABEL_11;
      }
    }
    BOOL v5 = 0;
    if (v4 < 7) {
      goto LABEL_13;
    }
    uint64_t v6 = v3[3];
    if (!v6) {
      goto LABEL_13;
    }
LABEL_11:
    uint64_t v7 = (int *)((char *)a1 + v6 + *(unsigned int *)((char *)a1 + v6));
    goto LABEL_14;
  }
  BOOL v5 = 0;
  uint64_t v7 = 0;
  uint64_t v9 = -1;
LABEL_14:
  sub_4A0694(v7, (uint64_t)&v10);
  *(void *)a2 = v9;
  *(unsigned char *)(a2 + 8) = v5;
  *(_OWORD *)(a2 + 16) = v10;
  *(void *)(a2 + 32) = v11;
  *(_OWORD *)(a2 + 40) = v12;
  double result = *(double *)&v13;
  *(_OWORD *)(a2 + 56) = v13;
  *(void *)(a2 + 72) = v14;
  return result;
}

void sub_9766D8(char **a1, unint64_t a2)
{
  unsigned int v2 = *a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= a2) {
    return;
  }
  if (a2 >= 0x333333333333334) {
    sub_2E00();
  }
  unsigned int v4 = a1[1];
  uint64_t v5 = 80 * a2;
  uint64_t v6 = (char *)operator new(80 * a2);
  uint64_t v7 = &v6[v5];
  unsigned int v8 = &v6[v4 - v2];
  if (v4 == v2)
  {
    *a1 = v8;
    a1[1] = v8;
    a1[2] = v7;
    if (!v2) {
      return;
    }
    goto LABEL_21;
  }
  uint64_t v9 = 0;
  do
  {
    long long v10 = &v8[v9];
    uint64_t v11 = &v4[v9];
    uint64_t v12 = *(void *)&v4[v9 - 80];
    *(v10 - 72) = v4[v9 - 72];
    *((void *)v10 - 10) = v12;
    long long v13 = *(_OWORD *)&v4[v9 - 64];
    *((void *)v10 - 6) = *(void *)&v4[v9 - 48];
    *((_OWORD *)v10 - 4) = v13;
    *((void *)v11 - 7) = 0;
    *((void *)v11 - 6) = 0;
    *((void *)v11 - 8) = 0;
    *(_OWORD *)(v10 - 40) = *(_OWORD *)&v4[v9 - 40];
    *(_OWORD *)(v10 - 24) = *(_OWORD *)&v4[v9 - 24];
    *((void *)v10 - 1) = *(void *)&v4[v9 - 8];
    *((void *)v11 - 3) = 0;
    *((void *)v11 - 2) = 0;
    *((void *)v11 - 1) = 0;
    v9 -= 80;
  }
  while (&v4[v9] != v2);
  uint64_t v14 = *a1;
  unsigned int v2 = a1[1];
  *a1 = &v8[v9];
  a1[1] = v8;
  a1[2] = v7;
  if (v2 != v14)
  {
    do
    {
      uint64_t v15 = *((void *)v2 - 3);
      if (v15)
      {
        uint64_t v16 = *((void *)v2 - 2);
        long long v17 = (void *)*((void *)v2 - 3);
        if (v16 != v15)
        {
          do
          {
            if (*(char *)(v16 - 1) < 0) {
              operator delete(*(void **)(v16 - 24));
            }
            v16 -= 32;
          }
          while (v16 != v15);
          long long v17 = (void *)*((void *)v2 - 3);
        }
        *((void *)v2 - 2) = v15;
        operator delete(v17);
      }
      if (*(v2 - 41) < 0) {
        operator delete(*((void **)v2 - 8));
      }
      v2 -= 80;
    }
    while (v2 != v14);
    unsigned int v2 = v14;
  }
  if (v2)
  {
LABEL_21:
    operator delete(v2);
  }
}

uint64_t sub_976884(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 80;
    uint64_t v4 = *(void *)(i - 24);
    if (v4)
    {
      uint64_t v5 = *(void *)(i - 16);
      uint64_t v6 = *(void **)(i - 24);
      if (v5 != v4)
      {
        do
        {
          if (*(char *)(v5 - 1) < 0) {
            operator delete(*(void **)(v5 - 24));
          }
          v5 -= 32;
        }
        while (v5 != v4);
        uint64_t v6 = *(void **)(i - 24);
      }
      *(void *)(i - 16) = v4;
      operator delete(v6);
    }
    if (*(char *)(i - 41) < 0) {
      operator delete(*(void **)(i - 64));
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char **sub_97693C(unsigned int *a1, char **a2, uint64_t a3, void (**a4)(void **__return_ptr, char *))
{
  void (*v9)(void **__return_ptr, char *);
  char *v10;
  void **v11;
  void **v12;
  void *v13;
  void *v15[4];
  char v16;
  void *__p;
  void **v18;

  uint64_t v7 = (char *)(a1 + 1);
  uint64_t v6 = *a1;
  if (v6)
  {
    unsigned int v8 = (unsigned int *)&v7[4 * v6];
    uint64_t v9 = *a4;
    (*a4)(v15, &v7[*(unsigned int *)v7]);
    while (1)
    {
      long long v10 = sub_976A64(a2, a3, (uint64_t)v15);
      uint64_t v11 = (void **)__p;
      if (__p)
      {
        uint64_t v12 = v18;
        long long v13 = __p;
        if (v18 != __p)
        {
          do
          {
            if (*((char *)v12 - 1) < 0) {
              operator delete(*(v12 - 3));
            }
            v12 -= 4;
          }
          while (v12 != v11);
          long long v13 = __p;
        }
        uint64_t v18 = v11;
        operator delete(v13);
      }
      if (v16 < 0) {
        operator delete(v15[2]);
      }
      a3 = (uint64_t)(v10 + 80);
      v7 += 4;
      if (v7 == (char *)v8) {
        break;
      }
      v9(v15, &v7[*(unsigned int *)v7]);
    }
  }
  return a2;
}

void sub_976A30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a19) {
    sub_20AC0C4((uint64_t)&a20, a19);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_976A64(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (char *)a2;
  uint64_t v7 = *a1;
  unint64_t v6 = (unint64_t)a1[1];
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - (uint64_t)*a1) >> 4);
  unint64_t v9 = (unint64_t)a1[2];
  if (v6 >= v9)
  {
    unint64_t v26 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - (void)v7) >> 4) + 1;
    if (v26 > 0x333333333333333) {
      sub_2E00();
    }
    unint64_t v27 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v9 - (void)v7) >> 4);
    if (2 * v27 > v26) {
      unint64_t v26 = 2 * v27;
    }
    if (v27 >= 0x199999999999999) {
      unint64_t v28 = 0x333333333333333;
    }
    else {
      unint64_t v28 = v26;
    }
    int v55 = a1 + 2;
    if (v28)
    {
      if (v28 > 0x333333333333333) {
        sub_188D718();
      }
      uint64_t v29 = (char *)operator new(80 * v28);
    }
    else
    {
      uint64_t v29 = 0;
    }
    uint64_t v51 = v29;
    uint64_t v52 = &v29[80 * v8];
    uint64_t v53 = v52;
    unint64_t v54 = &v29[80 * v28];
    sub_976F10((uint64_t)&v51, (uint64_t *)a3);
    uint64_t v33 = v52;
    int v34 = *a1;
    uint64_t v35 = v52;
    if (*a1 != v4)
    {
      uint64_t v36 = 0;
      do
      {
        uint64_t v37 = &v33[v36];
        long long v38 = &v4[v36];
        uint64_t v39 = *(void *)&v4[v36 - 80];
        *(v37 - 72) = v4[v36 - 72];
        *((void *)v37 - 10) = v39;
        long long v40 = *(_OWORD *)&v4[v36 - 64];
        *((void *)v37 - 6) = *(void *)&v4[v36 - 48];
        *((_OWORD *)v37 - 4) = v40;
        *((void *)v38 - 7) = 0;
        *((void *)v38 - 6) = 0;
        *((void *)v38 - 8) = 0;
        *(_OWORD *)(v37 - 40) = *(_OWORD *)&v4[v36 - 40];
        *((void *)v37 - 2) = 0;
        *((void *)v37 - 1) = 0;
        *((void *)v37 - 3) = 0;
        *(_OWORD *)(v37 - 24) = *(_OWORD *)&v4[v36 - 24];
        *((void *)v37 - 1) = *(void *)&v4[v36 - 8];
        *((void *)v38 - 3) = 0;
        *((void *)v38 - 2) = 0;
        *((void *)v38 - 1) = 0;
        v36 -= 80;
      }
      while (&v4[v36] != v34);
      uint64_t v35 = &v33[v36];
    }
    uint64_t v52 = v35;
    int v41 = a1[1];
    uint64_t v42 = v53;
    if (v41 != v4)
    {
      do
      {
        uint64_t v43 = *(void *)v4;
        v42[8] = v4[8];
        *(void *)uint64_t v42 = v43;
        long long v44 = *((_OWORD *)v4 + 1);
        *((void *)v42 + 4) = *((void *)v4 + 4);
        *((_OWORD *)v42 + 1) = v44;
        *((void *)v4 + 3) = 0;
        *((void *)v4 + 4) = 0;
        *((void *)v4 + 2) = 0;
        *(_OWORD *)(v42 + 40) = *(_OWORD *)(v4 + 40);
        *((void *)v42 + 8) = 0;
        *((void *)v42 + 9) = 0;
        *((void *)v42 + 7) = 0;
        *(_OWORD *)(v42 + 56) = *(_OWORD *)(v4 + 56);
        *((void *)v42 + 9) = *((void *)v4 + 9);
        *((void *)v4 + 7) = 0;
        *((void *)v4 + 8) = 0;
        *((void *)v4 + 9) = 0;
        v42 += 80;
        v4 += 80;
      }
      while (v4 != v41);
      uint64_t v35 = v52;
      uint64_t v4 = a1[1];
    }
    long long v45 = *a1;
    *a1 = v35;
    a1[1] = v42;
    char v46 = a1[2];
    a1[2] = v54;
    uint64_t v53 = v4;
    unint64_t v54 = v46;
    uint64_t v51 = v45;
    uint64_t v52 = v45;
    if (v4 == v45)
    {
      if (!v4) {
        return v33;
      }
    }
    else
    {
      do
      {
        uint64_t v53 = v4 - 80;
        uint64_t v47 = *((void *)v4 - 3);
        if (v47)
        {
          uint64_t v48 = *((void *)v4 - 2);
          int v49 = (void *)*((void *)v4 - 3);
          if (v48 != v47)
          {
            do
            {
              if (*(char *)(v48 - 1) < 0) {
                operator delete(*(void **)(v48 - 24));
              }
              v48 -= 32;
            }
            while (v48 != v47);
            int v49 = (void *)*((void *)v4 - 3);
          }
          *((void *)v4 - 2) = v47;
          operator delete(v49);
        }
        if (*(v4 - 41) < 0) {
          operator delete(*((void **)v4 - 8));
        }
        uint64_t v4 = v53;
      }
      while (v53 != v45);
      uint64_t v4 = v51;
      if (!v51) {
        return v33;
      }
    }
    operator delete(v4);
    return v33;
  }
  if (a2 == v6)
  {
    uint64_t v30 = *(void *)a3;
    *(unsigned char *)(a2 + 8) = *(unsigned char *)(a3 + 8);
    *(void *)a2 = v30;
    int v31 = &v7[80 * v8];
    long long v32 = *(_OWORD *)(a3 + 16);
    *((void *)v31 + 4) = *(void *)(a3 + 32);
    *((_OWORD *)v31 + 1) = v32;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 16) = 0;
    *(_OWORD *)(v31 + 40) = *(_OWORD *)(a3 + 40);
    *((void *)v31 + 8) = 0;
    *((void *)v31 + 9) = 0;
    *((void *)v31 + 7) = 0;
    *(_OWORD *)(v31 + 56) = *(_OWORD *)(a3 + 56);
    *((void *)v31 + 9) = *(void *)(a3 + 72);
    *(void *)(a3 + 56) = 0;
    *(void *)(a3 + 64) = 0;
    *(void *)(a3 + 72) = 0;
    a1[1] = (char *)(a2 + 80);
  }
  else
  {
    long long v10 = a1[1];
    if (v6 >= 0x50)
    {
      unint64_t v11 = v6 - 80;
      long long v10 = a1[1];
      do
      {
        uint64_t v12 = *(void *)v11;
        v10[8] = *(unsigned char *)(v11 + 8);
        *(void *)long long v10 = v12;
        long long v13 = *(_OWORD *)(v11 + 16);
        *((void *)v10 + 4) = *(void *)(v11 + 32);
        *((_OWORD *)v10 + 1) = v13;
        *(void *)(v11 + 24) = 0;
        *(void *)(v11 + 32) = 0;
        *(void *)(v11 + 16) = 0;
        *(_OWORD *)(v10 + 40) = *(_OWORD *)(v11 + 40);
        *((void *)v10 + 8) = 0;
        *((void *)v10 + 9) = 0;
        *((void *)v10 + 7) = 0;
        *(_OWORD *)(v10 + 56) = *(_OWORD *)(v11 + 56);
        *((void *)v10 + 9) = *(void *)(v11 + 72);
        *(void *)(v11 + 56) = 0;
        *(void *)(v11 + 64) = 0;
        *(void *)(v11 + 72) = 0;
        v10 += 80;
        v11 += 80;
      }
      while (v11 < v6);
    }
    a1[1] = v10;
    sub_97716C(a2, v6 - 80, v6);
    char v14 = *(unsigned char *)(a3 + 8);
    *(void *)uint64_t v4 = *(void *)a3;
    v4[8] = v14;
    uint64_t v15 = (void **)&v7[80 * v8 + 16];
    if (v4[39] < 0) {
      operator delete(*v15);
    }
    long long v16 = *(_OWORD *)(a3 + 16);
    *(void *)&v7[80 * v8 + 32] = *(void *)(a3 + 32);
    *(_OWORD *)uint64_t v15 = v16;
    *(unsigned char *)(a3 + 39) = 0;
    *(unsigned char *)(a3 + 16) = 0;
    long long v17 = &v7[80 * v8];
    char v20 = (void **)*((void *)v17 + 7);
    uint64_t v18 = v17 + 56;
    uint64_t v19 = v20;
    *((_OWORD *)v18 - 1) = *(_OWORD *)(a3 + 40);
    if (v20)
    {
      __n128 v21 = &v7[80 * v8];
      uint64_t v24 = (void **)*((void *)v21 + 8);
      long long v22 = (void ***)(v21 + 64);
      uint64_t v23 = v24;
      uint64_t v25 = v19;
      if (v24 != v19)
      {
        do
        {
          if (*((char *)v23 - 1) < 0) {
            operator delete(*(v23 - 3));
          }
          v23 -= 4;
        }
        while (v23 != v19);
        uint64_t v25 = *(void ***)v18;
      }
      *long long v22 = v19;
      operator delete(v25);
      *(void *)uint64_t v18 = 0;
      *((void *)v18 + 1) = 0;
      *((void *)v18 + 2) = 0;
    }
    *(_OWORD *)uint64_t v18 = *(_OWORD *)(a3 + 56);
    *(void *)&v7[80 * v8 + 72] = *(void *)(a3 + 72);
    *(void *)(a3 + 56) = 0;
    *(void *)(a3 + 64) = 0;
    *(void *)(a3 + 72) = 0;
  }
  return v4;
}

void sub_976EFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_976884((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_976F10(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(uint64_t **)(a1 + 16);
  if (v4 == *(uint64_t **)(a1 + 24))
  {
    uint64_t v5 = *(uint64_t **)a1;
    unint64_t v6 = *(uint64_t **)(a1 + 8);
    if ((unint64_t)v6 <= *(void *)a1)
    {
      unint64_t v11 = 0x999999999999999ALL * (((char *)v4 - (char *)v5) >> 4);
      if (v4 == v5) {
        unint64_t v11 = 1;
      }
      if (v11 >= 0x333333333333334) {
        sub_188D718();
      }
      unint64_t v12 = v11 >> 2;
      uint64_t v13 = 80 * v11;
      char v14 = (char *)operator new(80 * v11);
      uint64_t v15 = &v14[80 * v12];
      long long v16 = &v14[v13];
      if (v4 == v6)
      {
        *(void *)a1 = v14;
        *(void *)(a1 + 8) = v15;
        *(void *)(a1 + 16) = v15;
        *(void *)(a1 + 24) = v16;
      }
      else
      {
        long long v17 = &v15[(char *)v4 - (char *)v6];
        uint64_t v18 = 80 * v12;
        do
        {
          uint64_t v19 = &v14[v18];
          uint64_t v20 = *v6;
          v19[8] = *((unsigned char *)v6 + 8);
          *(void *)uint64_t v19 = v20;
          long long v21 = *((_OWORD *)v6 + 1);
          *((void *)v19 + 4) = v6[4];
          *((_OWORD *)v19 + 1) = v21;
          v6[3] = 0;
          v6[4] = 0;
          v6[2] = 0;
          *(_OWORD *)(v19 + 40) = *(_OWORD *)(v6 + 5);
          *(_OWORD *)(v19 + 56) = *(_OWORD *)(v6 + 7);
          *((void *)v19 + 9) = v6[9];
          v6[7] = 0;
          v6[8] = 0;
          v6[9] = 0;
          v18 += 80;
          v6 += 10;
        }
        while (v19 + 80 != v17);
        uint64_t v5 = *(uint64_t **)a1;
        uint64_t v22 = *(void *)(a1 + 8);
        uint64_t v23 = *(void *)(a1 + 16);
        *(void *)a1 = v14;
        *(void *)(a1 + 8) = v15;
        *(void *)(a1 + 16) = v17;
        *(void *)(a1 + 24) = v16;
        while (v23 != v22)
        {
          uint64_t v24 = *(void *)(v23 - 24);
          if (v24)
          {
            uint64_t v25 = *(void *)(v23 - 16);
            unint64_t v26 = *(void **)(v23 - 24);
            if (v25 != v24)
            {
              do
              {
                if (*(char *)(v25 - 1) < 0) {
                  operator delete(*(void **)(v25 - 24));
                }
                v25 -= 32;
              }
              while (v25 != v24);
              unint64_t v26 = *(void **)(v23 - 24);
            }
            *(void *)(v23 - 16) = v24;
            operator delete(v26);
          }
          if (*(char *)(v23 - 41) < 0) {
            operator delete(*(void **)(v23 - 64));
          }
          v23 -= 80;
        }
      }
      if (v5) {
        operator delete(v5);
      }
      uint64_t v4 = *(uint64_t **)(a1 + 16);
    }
    else
    {
      int64_t v7 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v6 - *(void *)a1) >> 4);
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = -80 * (v8 >> 1);
      sub_97729C(*(uint64_t **)(a1 + 8), v4, (uint64_t)&v6[-10 * (v8 >> 1)]);
      uint64_t v4 = v10;
      *(void *)(a1 + 8) += v9;
      *(void *)(a1 + 16) = v10;
    }
  }
  uint64_t v27 = *a2;
  *((unsigned char *)v4 + 8) = *((unsigned char *)a2 + 8);
  *uint64_t v4 = v27;
  long long v28 = *((_OWORD *)a2 + 1);
  v4[4] = a2[4];
  *((_OWORD *)v4 + 1) = v28;
  a2[3] = 0;
  a2[4] = 0;
  a2[2] = 0;
  *(_OWORD *)(v4 + 5) = *(_OWORD *)(a2 + 5);
  v4[8] = 0;
  v4[9] = 0;
  v4[7] = 0;
  __n128 result = *(__n128 *)(a2 + 7);
  *(__n128 *)(v4 + 7) = result;
  v4[9] = a2[9];
  a2[7] = 0;
  a2[8] = 0;
  a2[9] = 0;
  *(void *)(a1 + 16) += 80;
  return result;
}

uint64_t sub_97716C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  if (a2 != a1)
  {
    uint64_t v6 = a2;
    uint64_t v7 = a2;
    uint64_t v8 = a3;
    do
    {
      uint64_t v10 = *(void *)(v7 - 80);
      v7 -= 80;
      char v11 = *(unsigned char *)(v7 + 8);
      *(void *)(v8 - 80) = v10;
      v8 -= 80;
      *(unsigned char *)(v8 + 8) = v11;
      unint64_t v12 = (void **)(v8 + 16);
      if (*(char *)(v8 + 39) < 0) {
        operator delete(*v12);
      }
      long long v13 = *(_OWORD *)(v7 + 16);
      *(void *)(v8 + 32) = *(void *)(v7 + 32);
      *(_OWORD *)unint64_t v12 = v13;
      *(unsigned char *)(v6 - 41) = 0;
      *(unsigned char *)(v6 - 64) = 0;
      char v14 = (void **)(v3 - 24);
      uint64_t v15 = *(void ***)(v3 - 24);
      *(_OWORD *)(v3 - 40) = *(_OWORD *)(v6 - 40);
      if (v15)
      {
        long long v16 = *(void ***)(v3 - 16);
        uint64_t v9 = v15;
        if (v16 != v15)
        {
          do
          {
            if (*((char *)v16 - 1) < 0) {
              operator delete(*(v16 - 3));
            }
            v16 -= 4;
          }
          while (v16 != v15);
          uint64_t v9 = *v14;
        }
        *(void *)(v3 - 16) = v15;
        operator delete(v9);
        char *v14 = 0;
        *(void *)(v3 - 16) = 0;
        *(void *)(v3 - 8) = 0;
      }
      *(_OWORD *)(v3 - 24) = *(_OWORD *)(v6 - 24);
      *(void *)(v3 - 8) = *(void *)(v6 - 8);
      *(void *)(v6 - 24) = 0;
      *(void *)(v6 - 16) = 0;
      *(void *)(v6 - 8) = 0;
      uint64_t v3 = v8;
      uint64_t v6 = v7;
    }
    while (v7 != a1);
  }
  return a2;
}

uint64_t *sub_97729C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      uint64_t v7 = *v4;
      *(unsigned char *)(a3 + 8) = *((unsigned char *)v4 + 8);
      *(void *)a3 = v7;
      uint64_t v8 = (void **)(a3 + 16);
      if (*(char *)(a3 + 39) < 0) {
        operator delete(*v8);
      }
      long long v9 = *((_OWORD *)v4 + 1);
      *(void *)(a3 + 32) = v4[4];
      *(_OWORD *)uint64_t v8 = v9;
      *((unsigned char *)v4 + 39) = 0;
      *((unsigned char *)v4 + 16) = 0;
      uint64_t v10 = (void **)(a3 + 56);
      char v11 = *(void ***)(a3 + 56);
      *(_OWORD *)(a3 + 40) = *(_OWORD *)(v4 + 5);
      if (v11)
      {
        unint64_t v12 = *(void ***)(a3 + 64);
        uint64_t v6 = v11;
        if (v12 != v11)
        {
          do
          {
            if (*((char *)v12 - 1) < 0) {
              operator delete(*(v12 - 3));
            }
            v12 -= 4;
          }
          while (v12 != v11);
          uint64_t v6 = *v10;
        }
        *(void *)(a3 + 64) = v11;
        operator delete(v6);
        *uint64_t v10 = 0;
        *(void *)(a3 + 64) = 0;
        *(void *)(a3 + 72) = 0;
      }
      *(_OWORD *)(a3 + 56) = *(_OWORD *)(v4 + 7);
      *(void *)(a3 + 72) = v4[9];
      v4[7] = 0;
      v4[8] = 0;
      v4[9] = 0;
      v4 += 10;
      a3 += 80;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

char *sub_9773B0(unint64_t *a1, _WORD *a2, _WORD *a3)
{
  unint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v7 = (uint64_t)a2 - *a1;
  uint64_t v8 = v7 >> 1;
  long long v9 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFFELL));
  unint64_t v10 = a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(_WORD *)long long v9 = *a3;
      a1[1] = (unint64_t)(v9 + 2);
      return v9;
    }
    int64_t v11 = v5 - (void)(v9 + 2);
    uint64_t v12 = v11 >> 1;
    long long v13 = (__int16 *)(v5 - 2);
    if (v5 < 2)
    {
      uint64_t v19 = (_WORD *)a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFFELL) + v11;
      uint64_t v15 = (char *)(v14 + v6);
      unint64_t v16 = v14 + v6 + 2;
      if (v5 > v16) {
        unint64_t v16 = a1[1];
      }
      unint64_t v17 = v16 + ~v6 - v14;
      if (v17 < 0x1E)
      {
        uint64_t v19 = (_WORD *)a1[1];
      }
      else
      {
        unint64_t v18 = v5 - (void)v15;
        uint64_t v19 = (_WORD *)a1[1];
        if (v18 >= 0x20)
        {
          uint64_t v20 = (v17 >> 1) + 1;
          unint64_t v21 = 2 * (v20 & 0xFFFFFFFFFFFFFFF0);
          long long v13 = (__int16 *)((char *)v13 + v21);
          uint64_t v19 = (_WORD *)(v5 + v21);
          uint64_t v22 = (_OWORD *)(v5 + 16);
          uint64_t v23 = (long long *)(2 * v12 + 2 * v8 + v6 + 16);
          unint64_t v24 = v20 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            long long v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            *uint64_t v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 16;
          }
          while (v24);
          if (v20 == (v20 & 0xFFFFFFFFFFFFFFF0)) {
            goto LABEL_51;
          }
        }
      }
      do
      {
        __int16 v58 = *v13++;
        *v19++ = v58;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_51:
    a1[1] = (unint64_t)v19;
    if ((char *)v5 != v9 + 2) {
      memmove((void *)(v5 - 2 * v12), v9, v11);
    }
    *(_WORD *)long long v9 = *a3;
    return v9;
  }
  uint64_t v26 = v5 - v6;
  if (v26 <= -3) {
    sub_2E00();
  }
  uint64_t v28 = v26 >> 1;
  unint64_t v29 = v10 - v6;
  if (v29 <= v28 + 1) {
    unint64_t v30 = v28 + 1;
  }
  else {
    unint64_t v30 = v29;
  }
  if (v29 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v31 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v31 = v30;
  }
  if (v31)
  {
    if (v31 < 0) {
      sub_188D718();
    }
    long long v32 = (char *)operator new(2 * v31);
    uint64_t v33 = &v32[2 * v8];
    int v34 = &v32[2 * v31];
    if (v8 != v31) {
      goto LABEL_29;
    }
  }
  else
  {
    long long v32 = 0;
    uint64_t v33 = (char *)(2 * v8);
    int v34 = 0;
    if (v8) {
      goto LABEL_29;
    }
  }
  if (v7 < 1)
  {
    if ((_WORD *)v6 == a2) {
      unint64_t v55 = 1;
    }
    else {
      unint64_t v55 = v7;
    }
    if ((v55 & 0x8000000000000000) != 0) {
      sub_188D718();
    }
    uint64_t v56 = (char *)operator new(2 * v55);
    uint64_t v33 = &v56[2 * (v55 >> 2)];
    int v34 = &v56[2 * v55];
    if (v32)
    {
      uint64_t v57 = &v56[2 * v55];
      operator delete(v32);
      int v34 = v57;
      uint64_t v36 = (char *)*a1;
      *(_WORD *)uint64_t v33 = *a3;
      uint64_t v37 = v33 + 2;
      long long v38 = v33;
      if (v36 != v9) {
        goto LABEL_30;
      }
      goto LABEL_36;
    }
  }
  else
  {
    uint64_t v35 = v8 + 2;
    if (v8 >= -1) {
      uint64_t v35 = v8 + 1;
    }
    v33 -= v35 & 0xFFFFFFFFFFFFFFFELL;
  }
LABEL_29:
  uint64_t v36 = (char *)v6;
  *(_WORD *)uint64_t v33 = *a3;
  uint64_t v37 = v33 + 2;
  long long v38 = v33;
  if ((char *)v6 != v9)
  {
LABEL_30:
    uint64_t v39 = (char *)((v7 & 0xFFFFFFFFFFFFFFFELL) + v6);
    unint64_t v40 = v39 - v36 - 2;
    int v41 = v9;
    long long v38 = v33;
    if (v40 < 0x1E) {
      goto LABEL_60;
    }
    int v41 = v9;
    long long v38 = v33;
    if ((unint64_t)(v39 - v33) < 0x20) {
      goto LABEL_60;
    }
    uint64_t v42 = (v40 >> 1) + 1;
    unint64_t v43 = 2 * (v42 & 0xFFFFFFFFFFFFFFF0);
    int v41 = &v9[-v43];
    long long v38 = &v33[-v43];
    long long v44 = v33 - 16;
    long long v45 = (long long *)(v6 + 2 * v8 - 16);
    unint64_t v46 = v42 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      long long v47 = *v45;
      *((_OWORD *)v44 - 1) = *(v45 - 1);
      *(_OWORD *)long long v44 = v47;
      v44 -= 32;
      v45 -= 2;
      v46 -= 16;
    }
    while (v46);
    if (v42 != (v42 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_60:
      do
      {
        __int16 v48 = *((_WORD *)v41 - 1);
        v41 -= 2;
        *((_WORD *)v38 - 1) = v48;
        v38 -= 2;
      }
      while (v41 != v36);
    }
  }
LABEL_36:
  int v49 = (char *)a1[1];
  int64_t v50 = v49 - v9;
  if (v49 != v9)
  {
    uint64_t v51 = v9;
    size_t v52 = v49 - v9;
    uint64_t v53 = v34;
    memmove(v37, v51, v52);
    int v34 = v53;
  }
  unint64_t v54 = (_WORD *)*a1;
  *a1 = (unint64_t)v38;
  a1[1] = (unint64_t)&v37[v50];
  a1[2] = (unint64_t)v34;
  if (v54) {
    operator delete(v54);
  }
  return v33;
}

void sub_9776F8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_977710(void **a1)
{
  uint64_t v3 = (char *)*a1;
  uint64_t v2 = (char *)a1[1];
  unint64_t v4 = 0xCF3CF3CF3CF3CF3DLL * ((v2 - (unsigned char *)*a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x186186186186186) {
    sub_2E00();
  }
  if (0x9E79E79E79E79E7ALL * (((unsigned char *)a1[2] - v3) >> 3) > v5) {
    unint64_t v5 = 0x9E79E79E79E79E7ALL * (((unsigned char *)a1[2] - v3) >> 3);
  }
  if (0xCF3CF3CF3CF3CF3DLL * (((unsigned char *)a1[2] - v3) >> 3) >= 0xC30C30C30C30C3) {
    unint64_t v6 = 0x186186186186186;
  }
  else {
    unint64_t v6 = v5;
  }
  if (v6)
  {
    if (v6 > 0x186186186186186) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(168 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = &v7[168 * v4];
  *(_OWORD *)(v8 + 8) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  long long v9 = &v7[168 * v6];
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  *(void *)uint64_t v8 = -1;
  *((_DWORD *)v8 + 2) = 0x7FFFFFFF;
  *((_OWORD *)v8 + 1) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  *((_OWORD *)v8 + 4) = 0u;
  *((void *)v8 + 10) = 0;
  *((void *)v8 + 11) = -1;
  *((_DWORD *)v8 + 25) = -1;
  *((void *)v8 + 13) = -1;
  *(void *)(v8 + 157) = 0;
  *((_OWORD *)v8 + 8) = 0u;
  *((_OWORD *)v8 + 9) = 0u;
  unint64_t v10 = v8 + 168;
  *((_OWORD *)v8 + 7) = 0u;
  if (v2 == v3)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    if (!v2) {
      return v10;
    }
    goto LABEL_18;
  }
  uint64_t v11 = 0;
  do
  {
    uint64_t v12 = &v8[v11];
    long long v13 = &v2[v11];
    uint64_t v14 = *(void *)&v2[v11 - 168];
    *((_DWORD *)v12 - 40) = *(_DWORD *)&v2[v11 - 160];
    *((void *)v12 - 21) = v14;
    *((void *)v12 - 18) = 0;
    *((void *)v12 - 17) = 0;
    *(_OWORD *)(v12 - 152) = *(_OWORD *)&v2[v11 - 152];
    *((void *)v12 - 17) = *(void *)&v2[v11 - 136];
    *((void *)v13 - 19) = 0;
    *((void *)v13 - 18) = 0;
    *((void *)v13 - 17) = 0;
    long long v15 = *(_OWORD *)&v2[v11 - 128];
    *((void *)v12 - 14) = *(void *)&v2[v11 - 112];
    *((_OWORD *)v12 - 8) = v15;
    *((void *)v13 - 15) = 0;
    *((void *)v13 - 14) = 0;
    *((void *)v13 - 16) = 0;
    *((void *)v12 - 12) = 0;
    *((void *)v12 - 11) = 0;
    *(_OWORD *)(v12 - 104) = *(_OWORD *)&v2[v11 - 104];
    *((void *)v12 - 11) = *(void *)&v2[v11 - 88];
    *((void *)v13 - 13) = 0;
    *((void *)v13 - 12) = 0;
    *((void *)v13 - 11) = 0;
    long long v16 = *(_OWORD *)&v2[v11 - 80];
    *((void *)v12 - 8) = *(void *)&v2[v11 - 64];
    *((void *)v12 - 6) = 0;
    *((void *)v12 - 5) = 0;
    *((_OWORD *)v12 - 5) = v16;
    *(_OWORD *)(v12 - 56) = *(_OWORD *)&v2[v11 - 56];
    *((void *)v12 - 5) = *(void *)&v2[v11 - 40];
    *((void *)v13 - 7) = 0;
    *((void *)v13 - 6) = 0;
    *((void *)v13 - 5) = 0;
    long long v17 = *(_OWORD *)&v2[v11 - 32];
    *((void *)v12 - 2) = *(void *)&v2[v11 - 16];
    *((_OWORD *)v12 - 2) = v17;
    *((void *)v13 - 3) = 0;
    *((void *)v13 - 2) = 0;
    *((void *)v13 - 4) = 0;
    *((_WORD *)v12 - 4) = *(_WORD *)&v2[v11 - 8];
    LOWORD(v14) = *(_WORD *)&v2[v11 - 6];
    *(v12 - 4) = v2[v11 - 4];
    *((_WORD *)v12 - 3) = v14;
    v11 -= 168;
  }
  while (&v2[v11] != v3);
  unint64_t v18 = (char *)*a1;
  uint64_t v2 = (char *)a1[1];
  *a1 = &v8[v11];
  a1[1] = v10;
  a1[2] = v9;
  if (v2 != v18)
  {
    do
    {
      v2 -= 168;
      sub_8F423C((uint64_t)v2);
    }
    while (v2 != v18);
    uint64_t v2 = v18;
  }
  if (v2) {
LABEL_18:
  }
    operator delete(v2);
  return v10;
}

uint64_t *sub_977980(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = *a2;
  unint64_t v8 = __ROR8__(*a2, 32);
  unint64_t v9 = 0xC4CEB9FE1A85EC53
     * ((0xFF51AFD7ED558CCDLL * (v8 ^ (v8 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v8 ^ (v8 >> 33))) >> 33));
  unint64_t v10 = v9 ^ (v9 >> 33);
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9 ^ (v9 >> 33);
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = v10 & (v11 - 1);
    }
    long long v13 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v17 = v14[1];
            if (v17 == v10)
            {
              if (*((_DWORD *)v14 + 4) == v7 && *((_DWORD *)v14 + 5) == HIDWORD(v7)) {
                return v14;
              }
            }
            else if ((v17 & (v11 - 1)) != v4)
            {
              goto LABEL_31;
            }
            uint64_t v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v10)
          {
            if (*((_DWORD *)v14 + 4) == v7 && *((_DWORD *)v14 + 5) == HIDWORD(v7)) {
              return v14;
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v4) {
              break;
            }
          }
          uint64_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_31:
  uint64_t v20 = operator new(0x20uLL);
  *uint64_t v20 = 0;
  v20[1] = v10;
  v20[2] = **a4;
  v20[3] = -1;
  float v21 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v22 = *(float *)(a1 + 32);
  if (v11 && (float)(v22 * (float)v11) >= v21)
  {
    uint64_t v23 = *(void *)a1;
    unint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
    if (v24)
    {
LABEL_34:
      *uint64_t v20 = *v24;
LABEL_69:
      *unint64_t v24 = v20;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v25 = 1;
    if (v11 >= 3) {
      BOOL v25 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v26 = v25 | (2 * v11);
    unint64_t v27 = vcvtps_u32_f32(v21 / v22);
    if (v26 <= v27) {
      size_t prime = v27;
    }
    else {
      size_t prime = v26;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v11 = *(void *)(a1 + 8);
    }
    if (prime > v11) {
      goto LABEL_45;
    }
    if (prime < v11)
    {
      unint64_t v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        unint64_t v29 = std::__next_prime(v29);
      }
      else
      {
        uint64_t v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2) {
          unint64_t v29 = v31;
        }
      }
      if (prime <= v29) {
        size_t prime = v29;
      }
      if (prime < v11) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v32 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v4 = v10 % v11;
        uint64_t v23 = *(void *)a1;
        unint64_t v24 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v24) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v4 = v10;
        uint64_t v23 = *(void *)a1;
        unint64_t v24 = *(void **)(*(void *)a1 + 8 * v10);
        if (v24) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v4 = v32 & v10;
      uint64_t v23 = *(void *)a1;
      unint64_t v24 = *(void **)(*(void *)a1 + 8 * (v32 & v10));
      if (v24) {
        goto LABEL_34;
      }
    }
  }
  *uint64_t v20 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v20;
  *(void *)(v23 + 8 * v4) = a1 + 16;
  if (*v20)
  {
    unint64_t v33 = *(void *)(*v20 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v33 >= v11) {
        v33 %= v11;
      }
    }
    else
    {
      v33 &= v11 - 1;
    }
    unint64_t v24 = (void *)(*(void *)a1 + 8 * v33);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v20;
}

void sub_977CDC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_977CF0(void **a1)
{
  uint64_t v3 = (char *)*a1;
  uint64_t v2 = (char *)a1[1];
  unint64_t v4 = 0x8E38E38E38E38E39 * ((v2 - (unsigned char *)*a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x1C71C71C71C71C7) {
    sub_2E00();
  }
  if (0x1C71C71C71C71C72 * (((unsigned char *)a1[2] - v3) >> 4) > v5) {
    unint64_t v5 = 0x1C71C71C71C71C72 * (((unsigned char *)a1[2] - v3) >> 4);
  }
  if (0x8E38E38E38E38E39 * (((unsigned char *)a1[2] - v3) >> 4) >= 0xE38E38E38E38E3) {
    unint64_t v6 = 0x1C71C71C71C71C7;
  }
  else {
    unint64_t v6 = v5;
  }
  if (v6)
  {
    if (v6 > 0x1C71C71C71C71C7) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(144 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  unint64_t v8 = &v7[144 * v4];
  *(_OWORD *)(v8 + 8) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  unint64_t v9 = &v7[144 * v6];
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(void *)unint64_t v8 = -1;
  *((_DWORD *)v8 + 2) = 0x7FFFFFFF;
  *((_OWORD *)v8 + 1) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  *((_OWORD *)v8 + 4) = 0u;
  *((void *)v8 + 10) = 0;
  *((void *)v8 + 11) = -1;
  *((_DWORD *)v8 + 25) = -1;
  *((void *)v8 + 13) = -1;
  *((void *)v8 + 15) = 0;
  *((void *)v8 + 16) = 0;
  unint64_t v10 = v8 + 144;
  *((void *)v8 + 17) = 0;
  if (v2 == v3)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    if (!v2) {
      return v10;
    }
    goto LABEL_18;
  }
  uint64_t v11 = 0;
  do
  {
    uint8x8_t v12 = &v8[v11];
    long long v13 = &v2[v11];
    uint64_t v14 = *(void *)&v2[v11 - 144];
    *((_DWORD *)v12 - 34) = *(_DWORD *)&v2[v11 - 136];
    *((void *)v12 - 15) = 0;
    *((void *)v12 - 14) = 0;
    *((void *)v12 - 18) = v14;
    *((_OWORD *)v12 - 8) = *(_OWORD *)&v2[v11 - 128];
    *((void *)v12 - 14) = *(void *)&v2[v11 - 112];
    *((void *)v13 - 16) = 0;
    *((void *)v13 - 15) = 0;
    *((void *)v13 - 14) = 0;
    long long v15 = *(_OWORD *)&v2[v11 - 104];
    *((void *)v12 - 11) = *(void *)&v2[v11 - 88];
    *(_OWORD *)(v12 - 104) = v15;
    *((void *)v13 - 12) = 0;
    *((void *)v13 - 11) = 0;
    *((void *)v13 - 13) = 0;
    *((void *)v12 - 9) = 0;
    *((void *)v12 - 8) = 0;
    *((_OWORD *)v12 - 5) = *(_OWORD *)&v2[v11 - 80];
    *((void *)v12 - 8) = *(void *)&v2[v11 - 64];
    *((void *)v13 - 10) = 0;
    *((void *)v13 - 9) = 0;
    *((void *)v13 - 8) = 0;
    long long v16 = *(_OWORD *)&v2[v11 - 56];
    *((void *)v12 - 5) = *(void *)&v2[v11 - 40];
    *(_OWORD *)(v12 - 56) = v16;
    *((_WORD *)v12 - 16) = *(_WORD *)&v2[v11 - 32];
    *((void *)v12 - 2) = 0;
    *((void *)v12 - 1) = 0;
    *(_OWORD *)(v12 - 24) = *(_OWORD *)&v2[v11 - 24];
    *((void *)v12 - 1) = *(void *)&v2[v11 - 8];
    *((void *)v13 - 3) = 0;
    *((void *)v13 - 2) = 0;
    *((void *)v13 - 1) = 0;
    v11 -= 144;
  }
  while (&v2[v11] != v3);
  uint64_t v17 = (char *)*a1;
  uint64_t v2 = (char *)a1[1];
  *a1 = &v8[v11];
  a1[1] = v10;
  a1[2] = v9;
  if (v2 != v17)
  {
    do
    {
      v2 -= 144;
      sub_8F410C((uint64_t)v2);
    }
    while (v2 != v17);
    uint64_t v2 = v17;
  }
  if (v2) {
LABEL_18:
  }
    operator delete(v2);
  return v10;
}

uint64_t *sub_977F28(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = *a2;
  unint64_t v8 = __ROR8__(*a2, 32);
  unint64_t v9 = 0xC4CEB9FE1A85EC53
     * ((0xFF51AFD7ED558CCDLL * (v8 ^ (v8 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v8 ^ (v8 >> 33))) >> 33));
  unint64_t v10 = v9 ^ (v9 >> 33);
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9 ^ (v9 >> 33);
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = v10 & (v11 - 1);
    }
    long long v13 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v17 = v14[1];
            if (v17 == v10)
            {
              if (*((_DWORD *)v14 + 4) == v7 && *((_DWORD *)v14 + 5) == HIDWORD(v7)) {
                return v14;
              }
            }
            else if ((v17 & (v11 - 1)) != v4)
            {
              goto LABEL_31;
            }
            uint64_t v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v10)
          {
            if (*((_DWORD *)v14 + 4) == v7 && *((_DWORD *)v14 + 5) == HIDWORD(v7)) {
              return v14;
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v4) {
              break;
            }
          }
          uint64_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_31:
  uint64_t v20 = operator new(0x20uLL);
  *uint64_t v20 = 0;
  v20[1] = v10;
  v20[2] = **a4;
  v20[3] = -1;
  float v21 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v22 = *(float *)(a1 + 32);
  if (v11 && (float)(v22 * (float)v11) >= v21)
  {
    uint64_t v23 = *(void *)a1;
    unint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
    if (v24)
    {
LABEL_34:
      *uint64_t v20 = *v24;
LABEL_69:
      *unint64_t v24 = v20;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v25 = 1;
    if (v11 >= 3) {
      BOOL v25 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v26 = v25 | (2 * v11);
    unint64_t v27 = vcvtps_u32_f32(v21 / v22);
    if (v26 <= v27) {
      size_t prime = v27;
    }
    else {
      size_t prime = v26;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v11 = *(void *)(a1 + 8);
    }
    if (prime > v11) {
      goto LABEL_45;
    }
    if (prime < v11)
    {
      unint64_t v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        unint64_t v29 = std::__next_prime(v29);
      }
      else
      {
        uint64_t v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2) {
          unint64_t v29 = v31;
        }
      }
      if (prime <= v29) {
        size_t prime = v29;
      }
      if (prime < v11) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v32 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v4 = v10 % v11;
        uint64_t v23 = *(void *)a1;
        unint64_t v24 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v24) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v4 = v10;
        uint64_t v23 = *(void *)a1;
        unint64_t v24 = *(void **)(*(void *)a1 + 8 * v10);
        if (v24) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v4 = v32 & v10;
      uint64_t v23 = *(void *)a1;
      unint64_t v24 = *(void **)(*(void *)a1 + 8 * (v32 & v10));
      if (v24) {
        goto LABEL_34;
      }
    }
  }
  *uint64_t v20 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v20;
  *(void *)(v23 + 8 * v4) = a1 + 16;
  if (*v20)
  {
    unint64_t v33 = *(void *)(*v20 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v33 >= v11) {
        v33 %= v11;
      }
    }
    else
    {
      v33 &= v11 - 1;
    }
    unint64_t v24 = (void *)(*(void *)a1 + 8 * v33);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v20;
}

void sub_978284(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_978298(void **a1)
{
  uint64_t v3 = (char *)*a1;
  uint64_t v2 = (char *)a1[1];
  unint64_t v4 = 0xF0F0F0F0F0F0F0F1 * ((v2 - (unsigned char *)*a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x1E1E1E1E1E1E1E1) {
    sub_2E00();
  }
  if (0xE1E1E1E1E1E1E1E2 * (((unsigned char *)a1[2] - v3) >> 3) > v5) {
    unint64_t v5 = 0xE1E1E1E1E1E1E1E2 * (((unsigned char *)a1[2] - v3) >> 3);
  }
  if (0xF0F0F0F0F0F0F0F1 * (((unsigned char *)a1[2] - v3) >> 3) >= 0xF0F0F0F0F0F0F0) {
    unint64_t v6 = 0x1E1E1E1E1E1E1E1;
  }
  else {
    unint64_t v6 = v5;
  }
  if (v6)
  {
    if (v6 > 0x1E1E1E1E1E1E1E1) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(136 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  unint64_t v8 = &v7[136 * v4];
  *(_OWORD *)(v8 + 8) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  unint64_t v9 = &v7[136 * v6];
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *((void *)v8 + 13) = 0;
  *((void *)v8 + 14) = 0;
  *(void *)unint64_t v8 = -1;
  *((_DWORD *)v8 + 2) = 0x7FFFFFFF;
  *((_OWORD *)v8 + 1) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  *((_OWORD *)v8 + 4) = 0u;
  *((void *)v8 + 10) = 0;
  *((void *)v8 + 11) = -1;
  *((_DWORD *)v8 + 25) = -1;
  unint64_t v10 = v8 + 136;
  *((void *)v8 + 15) = 0;
  *((void *)v8 + 16) = 0;
  if (v2 == v3)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    if (!v2) {
      return v10;
    }
    goto LABEL_18;
  }
  uint64_t v11 = 0;
  do
  {
    uint8x8_t v12 = &v8[v11];
    long long v13 = &v2[v11];
    uint64_t v14 = *(void *)&v2[v11 - 136];
    *((_DWORD *)v12 - 32) = *(_DWORD *)&v2[v11 - 128];
    *((void *)v12 - 14) = 0;
    *((void *)v12 - 13) = 0;
    *((void *)v12 - 17) = v14;
    *(_OWORD *)(v12 - 120) = *(_OWORD *)&v2[v11 - 120];
    *((void *)v12 - 13) = *(void *)&v2[v11 - 104];
    *((void *)v13 - 15) = 0;
    *((void *)v13 - 14) = 0;
    *((void *)v13 - 13) = 0;
    long long v15 = *(_OWORD *)&v2[v11 - 96];
    *((void *)v12 - 10) = *(void *)&v2[v11 - 80];
    *((_OWORD *)v12 - 6) = v15;
    *((void *)v13 - 11) = 0;
    *((void *)v13 - 10) = 0;
    *((void *)v13 - 12) = 0;
    *((void *)v12 - 8) = 0;
    *((void *)v12 - 7) = 0;
    *(_OWORD *)(v12 - 72) = *(_OWORD *)&v2[v11 - 72];
    *((void *)v12 - 7) = *(void *)&v2[v11 - 56];
    *((void *)v13 - 9) = 0;
    *((void *)v13 - 8) = 0;
    *((void *)v13 - 7) = 0;
    long long v16 = *(_OWORD *)&v2[v11 - 48];
    *(v12 - 32) = v2[v11 - 32];
    *((_OWORD *)v12 - 3) = v16;
    *(_WORD *)(v12 - 31) = *(_WORD *)&v2[v11 - 31];
    *((void *)v12 - 2) = 0;
    *((void *)v12 - 1) = 0;
    *(_OWORD *)(v12 - 24) = *(_OWORD *)&v2[v11 - 24];
    *((void *)v12 - 1) = *(void *)&v2[v11 - 8];
    *((void *)v13 - 3) = 0;
    *((void *)v13 - 2) = 0;
    *((void *)v13 - 1) = 0;
    v11 -= 136;
  }
  while (&v2[v11] != v3);
  uint64_t v17 = (char *)*a1;
  uint64_t v2 = (char *)a1[1];
  *a1 = &v8[v11];
  a1[1] = v10;
  a1[2] = v9;
  if (v2 != v17)
  {
    do
    {
      v2 -= 136;
      sub_8F3F28((uint64_t)v2);
    }
    while (v2 != v17);
    uint64_t v2 = v17;
  }
  if (v2) {
LABEL_18:
  }
    operator delete(v2);
  return v10;
}

uint64_t *sub_9784B0(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = *a2;
  unint64_t v8 = __ROR8__(*a2, 32);
  unint64_t v9 = 0xC4CEB9FE1A85EC53
     * ((0xFF51AFD7ED558CCDLL * (v8 ^ (v8 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v8 ^ (v8 >> 33))) >> 33));
  unint64_t v10 = v9 ^ (v9 >> 33);
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9 ^ (v9 >> 33);
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = v10 & (v11 - 1);
    }
    long long v13 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v17 = v14[1];
            if (v17 == v10)
            {
              if (*((_DWORD *)v14 + 4) == v7 && *((_DWORD *)v14 + 5) == HIDWORD(v7)) {
                return v14;
              }
            }
            else if ((v17 & (v11 - 1)) != v4)
            {
              goto LABEL_31;
            }
            uint64_t v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v10)
          {
            if (*((_DWORD *)v14 + 4) == v7 && *((_DWORD *)v14 + 5) == HIDWORD(v7)) {
              return v14;
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v4) {
              break;
            }
          }
          uint64_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_31:
  uint64_t v20 = operator new(0x20uLL);
  *uint64_t v20 = 0;
  v20[1] = v10;
  v20[2] = **a4;
  v20[3] = -1;
  float v21 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v22 = *(float *)(a1 + 32);
  if (v11 && (float)(v22 * (float)v11) >= v21)
  {
    uint64_t v23 = *(void *)a1;
    unint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
    if (v24)
    {
LABEL_34:
      *uint64_t v20 = *v24;
LABEL_69:
      *unint64_t v24 = v20;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v25 = 1;
    if (v11 >= 3) {
      BOOL v25 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v26 = v25 | (2 * v11);
    unint64_t v27 = vcvtps_u32_f32(v21 / v22);
    if (v26 <= v27) {
      size_t prime = v27;
    }
    else {
      size_t prime = v26;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v11 = *(void *)(a1 + 8);
    }
    if (prime > v11) {
      goto LABEL_45;
    }
    if (prime < v11)
    {
      unint64_t v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        unint64_t v29 = std::__next_prime(v29);
      }
      else
      {
        uint64_t v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2) {
          unint64_t v29 = v31;
        }
      }
      if (prime <= v29) {
        size_t prime = v29;
      }
      if (prime < v11) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v32 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v4 = v10 % v11;
        uint64_t v23 = *(void *)a1;
        unint64_t v24 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v24) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v4 = v10;
        uint64_t v23 = *(void *)a1;
        unint64_t v24 = *(void **)(*(void *)a1 + 8 * v10);
        if (v24) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v4 = v32 & v10;
      uint64_t v23 = *(void *)a1;
      unint64_t v24 = *(void **)(*(void *)a1 + 8 * (v32 & v10));
      if (v24) {
        goto LABEL_34;
      }
    }
  }
  *uint64_t v20 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v20;
  *(void *)(v23 + 8 * v4) = a1 + 16;
  if (*v20)
  {
    unint64_t v33 = *(void *)(*v20 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v33 >= v11) {
        v33 %= v11;
      }
    }
    else
    {
      v33 &= v11 - 1;
    }
    unint64_t v24 = (void *)(*(void *)a1 + 8 * v33);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v20;
}

void sub_97880C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_978820(void *a1, unint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v4 = *a2;
  unint64_t v3 = a2[1];
  unint64_t v5 = __ROR8__(*a2, 32);
  unint64_t v6 = 0xC4CEB9FE1A85EC53
     * ((0xFF51AFD7ED558CCDLL * (v5 ^ (v5 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v5 ^ (v5 >> 33))) >> 33));
  unint64_t v7 = __ROR8__(v3, 32);
  unint64_t v8 = 0xC4CEB9FE1A85EC53
     * ((0xFF51AFD7ED558CCDLL * (v7 ^ (v7 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v7 ^ (v7 >> 33))) >> 33));
  unint64_t v9 = ((v8 ^ (v8 >> 33))
      + ((((v6 ^ (v6 >> 33)) + 0x388152A534) ^ 0xDEADBEEF) << 6)
      + ((((v6 ^ (v6 >> 33)) + 0x388152A534) ^ 0xDEADBEEF) >> 2)
      + 2654435769u) ^ ((v6 ^ (v6 >> 33)) + 0x388152A534) ^ 0xDEADBEEF;
  uint8x8_t v10 = (uint8x8_t)vcnt_s8(v2);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    unint64_t v11 = v9;
    if (v9 >= *(void *)&v2) {
      unint64_t v11 = v9 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v11 = v9 & (*(void *)&v2 - 1);
  }
  uint8x8_t v12 = *(uint64_t ***)(*a1 + 8 * v11);
  if (!v12) {
    return 0;
  }
  __n128 result = *v12;
  if (*v12)
  {
    if (v10.u32[0] < 2uLL)
    {
      uint64_t v14 = *(void *)&v2 - 1;
      while (1)
      {
        uint64_t v16 = result[1];
        if (v16 == v9)
        {
          if (*((_OWORD *)result + 1) == __PAIR128__(v3, v4)) {
            return result;
          }
        }
        else if ((v16 & v14) != v11)
        {
          return 0;
        }
        __n128 result = (uint64_t *)*result;
        if (!result) {
          return result;
        }
      }
    }
    do
    {
      unint64_t v15 = result[1];
      if (v15 == v9)
      {
        if (*((_OWORD *)result + 1) == __PAIR128__(v3, v4)) {
          return result;
        }
      }
      else
      {
        if (v15 >= *(void *)&v2) {
          v15 %= *(void *)&v2;
        }
        if (v15 != v11) {
          return 0;
        }
      }
      __n128 result = (uint64_t *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_9789D4(uint64_t *a1)
{
  unint64_t v3 = (char *)*a1;
  int8x8_t v2 = (char *)a1[1];
  uint64_t v4 = 0x66FD0EB66FD0EB67 * ((uint64_t)&v2[-*a1] >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x5E293205E29320) {
    sub_2E00();
  }
  if (0xCDFA1D6CDFA1D6CELL * ((a1[2] - (uint64_t)v3) >> 3) > v5) {
    unint64_t v5 = 0xCDFA1D6CDFA1D6CELL * ((a1[2] - (uint64_t)v3) >> 3);
  }
  if ((unint64_t)(0x66FD0EB66FD0EB67 * ((a1[2] - (uint64_t)v3) >> 3)) >= 0x2F149902F14990) {
    unint64_t v6 = 0x5E293205E29320;
  }
  else {
    unint64_t v6 = v5;
  }
  if (v6)
  {
    if (v6 > 0x5E293205E29320) {
      sub_188D718();
    }
    unint64_t v7 = (char *)operator new(696 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  uint64_t v8 = (uint64_t)&v7[696 * v4];
  unint64_t v9 = &v7[696 * v6];
  bzero((void *)v8, 0x288uLL);
  *(void *)(v8 + 48) = -1;
  *(_DWORD *)(v8 + 60) = -1;
  *(void *)(v8 + 64) = -1;
  *(void *)(v8 + 72) = 0;
  *(void *)(v8 + 80) = 0;
  *(void *)(v8 + 88) = 0;
  *(_WORD *)(v8 + 96) = -1;
  *(unsigned char *)(v8 + 98) = -1;
  *(_DWORD *)(v8 + 136) = -1;
  *(_DWORD *)(v8 + 144) = -1;
  *(_DWORD *)(v8 + 147) = -1;
  *(void *)(v8 + 151) = 0;
  *(void *)(v8 + 167) = 0;
  *(void *)(v8 + 159) = 0;
  *(_WORD *)(v8 + 175) = 0;
  *(void *)(v8 + 192) = 0;
  *(void *)(v8 + 200) = 0;
  *(void *)(v8 + 184) = 0;
  *(unsigned char *)(v8 + 208) = 0;
  *(_DWORD *)(v8 + 248) = -1;
  *(_DWORD *)(v8 + 256) = -1;
  *(_DWORD *)(v8 + 259) = -1;
  *(void *)(v8 + 279) = 0;
  *(void *)(v8 + 263) = 0;
  *(void *)(v8 + 271) = 0;
  *(_WORD *)(v8 + 287) = 0;
  *(void *)(v8 + 304) = 0;
  *(void *)(v8 + 312) = 0;
  *(void *)(v8 + 296) = 0;
  *(unsigned char *)(v8 + 320) = 0;
  *(_DWORD *)(v8 + 360) = -1;
  *(_DWORD *)(v8 + 368) = -1;
  *(_DWORD *)(v8 + 371) = -1;
  *(void *)(v8 + 391) = 0;
  *(void *)(v8 + 375) = 0;
  *(void *)(v8 + 383) = 0;
  *(_WORD *)(v8 + 399) = 0;
  *(void *)(v8 + 408) = 0;
  *(void *)(v8 + 416) = 0;
  *(unsigned char *)(v8 + 432) = 0;
  *(void *)(v8 + 424) = 0;
  *(_DWORD *)(v8 + 472) = -1;
  *(_DWORD *)(v8 + 483) = -1;
  *(_DWORD *)(v8 + 480) = -1;
  *(_WORD *)(v8 + 511) = 0;
  *(void *)(v8 + 495) = 0;
  *(void *)(v8 + 487) = 0;
  *(void *)(v8 + 503) = 0;
  *(unsigned char *)(v8 + 544) = 0;
  *(void *)(v8 + 528) = 0;
  *(void *)(v8 + 520) = 0;
  *(void *)(v8 + 536) = 0;
  *(_WORD *)(v8 + 552) = 0x7FFF;
  *(unsigned char *)(v8 + 554) = 2;
  *(_WORD *)(v8 + 556) = 2;
  *(_OWORD *)(v8 + 626) = 0u;
  *(_OWORD *)(v8 + 600) = 0u;
  *(_OWORD *)(v8 + 616) = 0u;
  *(_OWORD *)(v8 + 568) = 0u;
  *(_OWORD *)(v8 + 584) = 0u;
  *(_OWORD *)(v8 + 664) = 0u;
  *(_OWORD *)(v8 + 680) = 0u;
  uint64_t v10 = v8 + 696;
  *(_OWORD *)(v8 + 648) = 0u;
  if (v2 == v3)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = (uint64_t)v9;
    if (!v2) {
      return v10;
    }
    goto LABEL_17;
  }
  do
  {
    v8 -= 696;
    v2 -= 696;
    sub_978C38(v8, (uint64_t)v2);
  }
  while (v2 != v3);
  unint64_t v11 = (char *)*a1;
  int8x8_t v2 = (char *)a1[1];
  *a1 = v8;
  a1[1] = v10;
  a1[2] = (uint64_t)v9;
  if (v2 != v11)
  {
    do
    {
      v2 -= 696;
      sub_8E4D50((uint64_t)v2);
    }
    while (v2 != v11);
    int8x8_t v2 = v11;
  }
  if (v2) {
LABEL_17:
  }
    operator delete(v2);
  return v10;
}

uint64_t sub_978C38(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  long long v4 = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v4;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 24) = 0;
  uint64_t v5 = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = v5;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  sub_4F38B0((void *)*(unsigned int *)(a2 + 136), (uint64_t *)(a2 + 104), (void *)(a1 + 104));
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  long long v6 = *(_OWORD *)(a2 + 152);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = v6;
  *(void *)(a2 + 160) = 0;
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 152) = 0;
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  long long v7 = *(_OWORD *)(a2 + 184);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = v7;
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 200) = 0;
  *(void *)(a2 + 184) = 0;
  *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  sub_4F38B0((void *)*(unsigned int *)(a2 + 248), (uint64_t *)(a2 + 216), (void *)(a1 + 216));
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  long long v8 = *(_OWORD *)(a2 + 264);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(_OWORD *)(a1 + 264) = v8;
  *(void *)(a2 + 272) = 0;
  *(void *)(a2 + 280) = 0;
  *(void *)(a2 + 264) = 0;
  *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 288);
  long long v9 = *(_OWORD *)(a2 + 296);
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  *(_OWORD *)(a1 + 296) = v9;
  *(void *)(a2 + 304) = 0;
  *(void *)(a2 + 312) = 0;
  *(void *)(a2 + 296) = 0;
  *(unsigned char *)(a1 + 320) = *(unsigned char *)(a2 + 320);
  *(_DWORD *)(a1 + 360) = *(_DWORD *)(a2 + 360);
  sub_4F38B0((void *)*(unsigned int *)(a2 + 360), (uint64_t *)(a2 + 328), (void *)(a1 + 328));
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  long long v10 = *(_OWORD *)(a2 + 376);
  *(void *)(a1 + 392) = *(void *)(a2 + 392);
  *(_OWORD *)(a1 + 376) = v10;
  *(void *)(a2 + 384) = 0;
  *(void *)(a2 + 392) = 0;
  *(void *)(a2 + 376) = 0;
  *(unsigned char *)(a1 + 400) = *(unsigned char *)(a2 + 400);
  long long v11 = *(_OWORD *)(a2 + 408);
  *(void *)(a1 + 424) = *(void *)(a2 + 424);
  *(_OWORD *)(a1 + 408) = v11;
  *(void *)(a2 + 416) = 0;
  *(void *)(a2 + 424) = 0;
  *(void *)(a2 + 408) = 0;
  *(unsigned char *)(a1 + 432) = *(unsigned char *)(a2 + 432);
  *(_DWORD *)(a1 + 472) = *(_DWORD *)(a2 + 472);
  sub_4F38B0((void *)*(unsigned int *)(a2 + 472), (uint64_t *)(a2 + 440), (void *)(a1 + 440));
  *(void *)(a1 + 480) = *(void *)(a2 + 480);
  long long v12 = *(_OWORD *)(a2 + 488);
  *(void *)(a1 + 504) = *(void *)(a2 + 504);
  *(_OWORD *)(a1 + 488) = v12;
  *(_OWORD *)(a2 + 496) = 0u;
  *(void *)(a2 + 488) = 0;
  *(unsigned char *)(a1 + 512) = *(unsigned char *)(a2 + 512);
  long long v13 = *(_OWORD *)(a2 + 520);
  *(void *)(a1 + 536) = *(void *)(a2 + 536);
  *(_OWORD *)(a1 + 520) = v13;
  *(_OWORD *)(a2 + 528) = 0u;
  *(void *)(a2 + 520) = 0;
  *(unsigned char *)(a1 + 544) = *(unsigned char *)(a2 + 544);
  uint64_t v14 = *(void *)(a2 + 552);
  *(_WORD *)(a1 + 560) = *(_WORD *)(a2 + 560);
  *(void *)(a1 + 552) = v14;
  *(void *)(a1 + 568) = 0;
  *(_OWORD *)(a1 + 576) = 0u;
  *(void *)(a1 + 568) = *(void *)(a2 + 568);
  *(void *)(a1 + 576) = *(void *)(a2 + 576);
  *(void *)(a1 + 584) = *(void *)(a2 + 584);
  *(void *)(a2 + 584) = 0;
  *(_OWORD *)(a2 + 568) = 0u;
  *(void *)(a1 + 608) = 0;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 592) = *(_OWORD *)(a2 + 592);
  *(void *)(a1 + 608) = *(void *)(a2 + 608);
  *(void *)(a2 + 608) = 0;
  *(_OWORD *)(a2 + 592) = 0u;
  *(void *)(a1 + 632) = 0;
  *(_OWORD *)(a1 + 616) = 0u;
  *(void *)(a1 + 616) = *(void *)(a2 + 616);
  *(void *)(a1 + 624) = *(void *)(a2 + 624);
  *(void *)(a1 + 632) = *(void *)(a2 + 632);
  *(void *)(a2 + 632) = 0;
  *(_OWORD *)(a2 + 616) = 0u;
  *(_WORD *)(a1 + 640) = *(_WORD *)(a2 + 640);
  *(_OWORD *)(a1 + 656) = 0u;
  *(void *)(a1 + 648) = 0;
  *(void *)(a1 + 648) = *(void *)(a2 + 648);
  *(void *)(a1 + 656) = *(void *)(a2 + 656);
  *(void *)(a1 + 664) = *(void *)(a2 + 664);
  *(void *)(a2 + 664) = 0;
  *(_OWORD *)(a2 + 648) = 0u;
  *(void *)(a1 + 688) = 0;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 672) = *(_OWORD *)(a2 + 672);
  *(void *)(a1 + 688) = *(void *)(a2 + 688);
  *(void *)(a2 + 688) = 0;
  *(_OWORD *)(a2 + 672) = 0u;
  return a1;
}

uint64_t *sub_978F60(uint64_t a1, unint64_t *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v8 = *a2;
  unint64_t v7 = a2[1];
  unint64_t v9 = __ROR8__(*a2, 32);
  unint64_t v10 = 0xC4CEB9FE1A85EC53
      * ((0xFF51AFD7ED558CCDLL * (v9 ^ (v9 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v9 ^ (v9 >> 33))) >> 33));
  unint64_t v11 = __ROR8__(v7, 32);
  unint64_t v12 = 0xC4CEB9FE1A85EC53
      * ((0xFF51AFD7ED558CCDLL * (v11 ^ (v11 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v11 ^ (v11 >> 33))) >> 33));
  unint64_t v13 = ((v12 ^ (v12 >> 33))
       + ((((v10 ^ (v10 >> 33)) + 0x388152A534) ^ 0xDEADBEEF) << 6)
       + ((((v10 ^ (v10 >> 33)) + 0x388152A534) ^ 0xDEADBEEF) >> 2)
       + 2654435769u) ^ ((v10 ^ (v10 >> 33)) + 0x388152A534) ^ 0xDEADBEEF;
  unint64_t v14 = *(void *)(a1 + 8);
  if (v14)
  {
    uint8x8_t v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
    v15.i16[0] = vaddlv_u8(v15);
    if (v15.u32[0] > 1uLL)
    {
      unint64_t v4 = ((v12 ^ (v12 >> 33))
          + ((((v10 ^ (v10 >> 33)) + 0x388152A534) ^ 0xDEADBEEF) << 6)
          + ((((v10 ^ (v10 >> 33)) + 0x388152A534) ^ 0xDEADBEEF) >> 2)
          + 2654435769u) ^ ((v10 ^ (v10 >> 33)) + 0x388152A534) ^ 0xDEADBEEF;
      if (v13 >= v14) {
        unint64_t v4 = v13 % v14;
      }
    }
    else
    {
      unint64_t v4 = v13 & (v14 - 1);
    }
    uint64_t v16 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v16)
    {
      uint64_t v17 = *v16;
      if (*v16)
      {
        if (v15.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v19 = v17[1];
            if (v19 == v13)
            {
              if (*((_OWORD *)v17 + 1) == __PAIR128__(v7, v8)) {
                return v17;
              }
            }
            else if ((v19 & (v14 - 1)) != v4)
            {
              goto LABEL_23;
            }
            uint64_t v17 = (uint64_t *)*v17;
            if (!v17) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v18 = v17[1];
          if (v18 == v13)
          {
            if (*((_OWORD *)v17 + 1) == __PAIR128__(v7, v8)) {
              return v17;
            }
          }
          else
          {
            if (v18 >= v14) {
              v18 %= v14;
            }
            if (v18 != v4) {
              break;
            }
          }
          uint64_t v17 = (uint64_t *)*v17;
        }
        while (v17);
      }
    }
  }
LABEL_23:
  float v21 = operator new(0x28uLL);
  *float v21 = 0;
  v21[1] = v13;
  *((_OWORD *)v21 + 1) = **a4;
  v21[4] = -1;
  float v22 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v23 = *(float *)(a1 + 32);
  if (v14 && (float)(v23 * (float)v14) >= v22)
  {
    uint64_t v24 = *(void *)a1;
    BOOL v25 = *(void **)(*(void *)a1 + 8 * v4);
    if (v25)
    {
LABEL_26:
      *float v21 = *v25;
LABEL_61:
      *BOOL v25 = v21;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v26 = 1;
    if (v14 >= 3) {
      BOOL v26 = (v14 & (v14 - 1)) != 0;
    }
    unint64_t v27 = v26 | (2 * v14);
    unint64_t v28 = vcvtps_u32_f32(v22 / v23);
    if (v27 <= v28) {
      size_t prime = v28;
    }
    else {
      size_t prime = v27;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v14 = *(void *)(a1 + 8);
    }
    if (prime > v14) {
      goto LABEL_37;
    }
    if (prime < v14)
    {
      unint64_t v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v14 < 3 || (uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)v14), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        unint64_t v30 = std::__next_prime(v30);
      }
      else
      {
        uint64_t v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2) {
          unint64_t v30 = v32;
        }
      }
      if (prime <= v30) {
        size_t prime = v30;
      }
      if (prime < v14) {
LABEL_37:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v14 = *(void *)(a1 + 8);
    unint64_t v33 = v14 - 1;
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14)
      {
        unint64_t v4 = v13 % v14;
        uint64_t v24 = *(void *)a1;
        BOOL v25 = *(void **)(*(void *)a1 + 8 * (v13 % v14));
        if (v25) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v4 = v13;
        uint64_t v24 = *(void *)a1;
        BOOL v25 = *(void **)(*(void *)a1 + 8 * v13);
        if (v25) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v4 = v33 & v13;
      uint64_t v24 = *(void *)a1;
      BOOL v25 = *(void **)(*(void *)a1 + 8 * (v33 & v13));
      if (v25) {
        goto LABEL_26;
      }
    }
  }
  *float v21 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v21;
  *(void *)(v24 + 8 * v4) = a1 + 16;
  if (*v21)
  {
    unint64_t v34 = *(void *)(*v21 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v34 >= v14) {
        v34 %= v14;
      }
    }
    else
    {
      v34 &= v14 - 1;
    }
    BOOL v25 = (void *)(*(void *)a1 + 8 * v34);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v21;
}

void sub_979350(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_979364(uint64_t *a1)
{
  uint64_t v2 = 0x4EC4EC4EC4EC4EC5 * ((a1[1] - *a1) >> 4);
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x13B13B13B13B13BLL) {
    sub_2E00();
  }
  if (0x9D89D89D89D89D8ALL * ((a1[2] - *a1) >> 4) > v3) {
    unint64_t v3 = 0x9D89D89D89D89D8ALL * ((a1[2] - *a1) >> 4);
  }
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((a1[2] - *a1) >> 4)) >= 0x9D89D89D89D89DLL) {
    unint64_t v4 = 0x13B13B13B13B13BLL;
  }
  else {
    unint64_t v4 = v3;
  }
  uint8x8_t v15 = a1 + 2;
  if (v4)
  {
    if (v4 > 0x13B13B13B13B13BLL) {
      sub_188D718();
    }
    uint64_t v5 = (char *)operator new(208 * v4);
  }
  else
  {
    uint64_t v5 = 0;
  }
  long long v6 = &v5[208 * v2];
  std::string __p = v5;
  unint64_t v12 = v6;
  *((_OWORD *)v6 + 4) = 0u;
  *((_OWORD *)v6 + 5) = 0u;
  *(_OWORD *)long long v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  *((_OWORD *)v6 + 2) = 0u;
  *((_OWORD *)v6 + 3) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  *((_OWORD *)v6 + 7) = 0u;
  *((_OWORD *)v6 + 8) = 0u;
  *((_OWORD *)v6 + 9) = 0u;
  *((_OWORD *)v6 + 10) = 0u;
  *((_OWORD *)v6 + 11) = 0u;
  *((_OWORD *)v6 + 12) = 0u;
  *((void *)v6 + 6) = -1;
  *((_DWORD *)v6 + 15) = -1;
  *((void *)v6 + 8) = 0;
  *((void *)v6 + 9) = 0;
  *((void *)v6 + 10) = 0;
  *((_DWORD *)v6 + 30) = -1;
  *((_DWORD *)v6 + 32) = -1;
  *(_DWORD *)(v6 + 131) = -1;
  *(void *)(v6 + 151) = 0;
  *(void *)(v6 + 135) = 0;
  *(void *)(v6 + 143) = 0;
  *(_WORD *)(v6 + 159) = 0;
  *((void *)v6 + 22) = 0;
  *((void *)v6 + 23) = 0;
  *((void *)v6 + 21) = 0;
  v6[192] = 0;
  unint64_t v13 = v6 + 208;
  unint64_t v14 = &v5[208 * v4];
  sub_979508(a1, &__p);
  uint64_t v7 = a1[1];
  unint64_t v9 = v12;
  for (uint64_t i = v13; v13 != v9; uint64_t i = v13)
  {
    unint64_t v13 = i - 208;
    sub_8E5070((uint64_t)(i - 208));
  }
  if (__p) {
    operator delete(__p);
  }
  return v7;
}

void sub_9794F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_979678((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_979508(uint64_t *result, void *a2)
{
  unint64_t v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = a2[1];
  if (v4 != *result)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = v6 + v7;
      uint64_t v9 = v4 + v7;
      *(void *)(v8 - 208) = 0;
      *(void *)(v8 - 200) = 0;
      *(void *)(v8 - 192) = 0;
      *(_OWORD *)(v8 - 208) = *(_OWORD *)(v4 + v7 - 208);
      *(void *)(v8 - 192) = *(void *)(v4 + v7 - 192);
      *(void *)(v9 - 208) = 0;
      *(void *)(v9 - 200) = 0;
      *(void *)(v9 - 192) = 0;
      long long v10 = *(_OWORD *)(v4 + v7 - 184);
      *(void *)(v8 - 168) = *(void *)(v4 + v7 - 168);
      *(_OWORD *)(v8 - 184) = v10;
      *(void *)(v9 - 176) = 0;
      *(void *)(v9 - 168) = 0;
      *(void *)(v9 - 184) = 0;
      *(_OWORD *)(v8 - 160) = *(_OWORD *)(v4 + v7 - 160);
      *(void *)(v8 - 136) = 0;
      *(void *)(v8 - 128) = 0;
      *(void *)(v8 - 144) = 0;
      *(_OWORD *)(v8 - 144) = *(_OWORD *)(v4 + v7 - 144);
      *(void *)(v8 - 128) = *(void *)(v4 + v7 - 128);
      *(void *)(v9 - 144) = 0;
      *(void *)(v9 - 136) = 0;
      *(void *)(v9 - 128) = 0;
      *(_DWORD *)(v8 - 88) = *(_DWORD *)(v4 + v7 - 88);
      __n128 result = (uint64_t *)sub_4F38B0((void *)*(unsigned int *)(v4 + v7 - 88), (uint64_t *)(v4 + v7 - 120), (void *)(v6 + v7 - 120));
      *(void *)(v8 - 80) = *(void *)(v4 + v7 - 80);
      long long v11 = *(_OWORD *)(v4 + v7 - 72);
      *(void *)(v8 - 56) = *(void *)(v4 + v7 - 56);
      *(_OWORD *)(v8 - 72) = v11;
      *(void *)(v9 - 64) = 0;
      *(void *)(v9 - 56) = 0;
      *(void *)(v9 - 72) = 0;
      *(unsigned char *)(v8 - 48) = *(unsigned char *)(v4 + v7 - 48);
      long long v12 = *(_OWORD *)(v4 + v7 - 40);
      *(void *)(v8 - 24) = *(void *)(v4 + v7 - 24);
      *(_OWORD *)(v8 - 40) = v12;
      *(void *)(v9 - 32) = 0;
      *(void *)(v9 - 24) = 0;
      *(void *)(v9 - 40) = 0;
      *(unsigned char *)(v8 - 16) = *(unsigned char *)(v4 + v7 - 16);
      *(unsigned char *)(v8 - 8) = *(unsigned char *)(v4 + v7 - 8);
      v7 -= 208;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  uint64_t v13 = *v3;
  uint64_t *v3 = v6;
  a2[1] = v13;
  uint64_t v14 = v3[1];
  v3[1] = a2[2];
  a2[2] = v14;
  uint64_t v15 = v3[2];
  v3[2] = a2[3];
  a2[3] = v15;
  *a2 = a2[1];
  return result;
}

uint64_t sub_979678(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 208;
    sub_8E5070(i - 208);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *sub_9796CC(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = *a2;
  unint64_t v8 = __ROR8__(*a2, 32);
  unint64_t v9 = 0xC4CEB9FE1A85EC53
     * ((0xFF51AFD7ED558CCDLL * (v8 ^ (v8 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v8 ^ (v8 >> 33))) >> 33));
  unint64_t v10 = v9 ^ (v9 >> 33);
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9 ^ (v9 >> 33);
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = v10 & (v11 - 1);
    }
    uint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v17 = v14[1];
            if (v17 == v10)
            {
              if (*((_DWORD *)v14 + 4) == v7 && *((_DWORD *)v14 + 5) == HIDWORD(v7)) {
                return v14;
              }
            }
            else if ((v17 & (v11 - 1)) != v4)
            {
              goto LABEL_31;
            }
            uint64_t v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v10)
          {
            if (*((_DWORD *)v14 + 4) == v7 && *((_DWORD *)v14 + 5) == HIDWORD(v7)) {
              return v14;
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v4) {
              break;
            }
          }
          uint64_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_31:
  uint64_t v20 = operator new(0x20uLL);
  *uint64_t v20 = 0;
  v20[1] = v10;
  v20[2] = **a4;
  v20[3] = -1;
  float v21 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v22 = *(float *)(a1 + 32);
  if (v11 && (float)(v22 * (float)v11) >= v21)
  {
    uint64_t v23 = *(void *)a1;
    uint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
    if (v24)
    {
LABEL_34:
      *uint64_t v20 = *v24;
LABEL_69:
      *uint64_t v24 = v20;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v25 = 1;
    if (v11 >= 3) {
      BOOL v25 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v26 = v25 | (2 * v11);
    unint64_t v27 = vcvtps_u32_f32(v21 / v22);
    if (v26 <= v27) {
      size_t prime = v27;
    }
    else {
      size_t prime = v26;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v11 = *(void *)(a1 + 8);
    }
    if (prime > v11) {
      goto LABEL_45;
    }
    if (prime < v11)
    {
      unint64_t v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        unint64_t v29 = std::__next_prime(v29);
      }
      else
      {
        uint64_t v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2) {
          unint64_t v29 = v31;
        }
      }
      if (prime <= v29) {
        size_t prime = v29;
      }
      if (prime < v11) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v32 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v4 = v10 % v11;
        uint64_t v23 = *(void *)a1;
        uint64_t v24 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v24) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v4 = v10;
        uint64_t v23 = *(void *)a1;
        uint64_t v24 = *(void **)(*(void *)a1 + 8 * v10);
        if (v24) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v4 = v32 & v10;
      uint64_t v23 = *(void *)a1;
      uint64_t v24 = *(void **)(*(void *)a1 + 8 * (v32 & v10));
      if (v24) {
        goto LABEL_34;
      }
    }
  }
  *uint64_t v20 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v20;
  *(void *)(v23 + 8 * v4) = a1 + 16;
  if (*v20)
  {
    unint64_t v33 = *(void *)(*v20 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v33 >= v11) {
        v33 %= v11;
      }
    }
    else
    {
      v33 &= v11 - 1;
    }
    uint64_t v24 = (void *)(*(void *)a1 + 8 * v33);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v20;
}

void sub_979A28(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_979A3C(uint64_t *a1)
{
  uint64_t v3 = (uint64_t *)*a1;
  uint64_t v2 = (uint64_t *)a1[1];
  unint64_t v4 = 0x86BCA1AF286BCA1BLL * (((uint64_t)v2 - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xD79435E50D7943) {
    sub_2E00();
  }
  if (0xD79435E50D79436 * ((a1[2] - (uint64_t)v3) >> 4) > v5) {
    unint64_t v5 = 0xD79435E50D79436 * ((a1[2] - (uint64_t)v3) >> 4);
  }
  if (0x86BCA1AF286BCA1BLL * ((a1[2] - (uint64_t)v3) >> 4) >= 0x6BCA1AF286BCA1) {
    unint64_t v6 = 0xD79435E50D7943;
  }
  else {
    unint64_t v6 = v5;
  }
  if (v6)
  {
    if (v6 > 0xD79435E50D7943) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(304 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  unint64_t v9 = &v7[304 * v6];
  uint64_t v8 = (uint64_t)&v7[304 * v4];
  *(_OWORD *)(v8 + 8) = 0u;
  *(_OWORD *)(v8 + 264) = 0u;
  *(_OWORD *)(v8 + 280) = 0u;
  *(void *)(v8 + 296) = 0;
  *(_OWORD *)(v8 + 248) = 0u;
  *(_OWORD *)(v8 + 232) = 0u;
  *(_OWORD *)(v8 + 216) = 0u;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 168) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  *(void *)uint64_t v8 = -1;
  *(_DWORD *)(v8 + 8) = 0x7FFFFFFF;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 144) = 0u;
  *(void *)(v8 + 160) = -1;
  *(void *)(v8 + 168) = 0;
  *(void *)(v8 + 176) = 0;
  *(void *)(v8 + 184) = 0;
  *(_DWORD *)(v8 + 224) = -1;
  *(_DWORD *)(v8 + 232) = -1;
  *(_DWORD *)(v8 + 235) = -1;
  *(void *)(v8 + 255) = 0;
  *(_WORD *)(v8 + 263) = 0;
  *(void *)(v8 + 239) = 0;
  *(void *)(v8 + 247) = 0;
  *(void *)(v8 + 272) = 0;
  *(void *)(v8 + 280) = 0;
  *(unsigned char *)(v8 + 296) = 0;
  uint64_t v10 = v8 + 304;
  *(void *)(v8 + 288) = 0;
  if (v2 == v3)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = (uint64_t)v9;
    if (!v2) {
      return v10;
    }
    goto LABEL_17;
  }
  do
  {
    v2 -= 38;
    uint64_t v8 = sub_979C38(v8 - 304, v2);
  }
  while (v2 != v3);
  unint64_t v11 = (uint64_t *)*a1;
  uint64_t v2 = (uint64_t *)a1[1];
  *a1 = v8;
  a1[1] = v10;
  a1[2] = (uint64_t)v9;
  if (v2 != v11)
  {
    do
    {
      v2 -= 38;
      sub_8F3C9C((uint64_t)v2);
    }
    while (v2 != v11);
    uint64_t v2 = v11;
  }
  if (v2) {
LABEL_17:
  }
    operator delete(v2);
  return v10;
}

uint64_t sub_979C38(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(void *)a1 = v4;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  *(void *)(a1 + 32) = a2[4];
  a2[2] = 0;
  a2[3] = 0;
  a2[4] = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
  *(void *)(a1 + 56) = a2[7];
  a2[5] = 0;
  a2[6] = 0;
  a2[7] = 0;
  long long v5 = *((_OWORD *)a2 + 4);
  *(void *)(a1 + 80) = a2[10];
  *(_OWORD *)(a1 + 64) = v5;
  a2[9] = 0;
  a2[10] = 0;
  a2[8] = 0;
  long long v6 = *(_OWORD *)(a2 + 11);
  *(void *)(a1 + 104) = a2[13];
  *(_OWORD *)(a1 + 88) = v6;
  a2[12] = 0;
  a2[13] = 0;
  a2[11] = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 112) = *((_OWORD *)a2 + 7);
  *(void *)(a1 + 128) = a2[16];
  a2[14] = 0;
  a2[15] = 0;
  a2[16] = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 17);
  uint64_t v7 = a2[20];
  *(void *)(a1 + 152) = a2[19];
  a2[18] = 0;
  a2[19] = 0;
  a2[17] = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 160) = v7;
  *(void *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 21);
  *(void *)(a1 + 184) = a2[23];
  a2[21] = 0;
  a2[22] = 0;
  a2[23] = 0;
  *(_DWORD *)(a1 + 224) = *((_DWORD *)a2 + 56);
  sub_4F38B0((void *)*((unsigned int *)a2 + 56), a2 + 24, (void *)(a1 + 192));
  *(void *)(a1 + 232) = a2[29];
  long long v8 = *((_OWORD *)a2 + 15);
  *(void *)(a1 + 256) = a2[32];
  *(_OWORD *)(a1 + 240) = v8;
  a2[31] = 0;
  a2[32] = 0;
  a2[30] = 0;
  *(unsigned char *)(a1 + 264) = *((unsigned char *)a2 + 264);
  long long v9 = *((_OWORD *)a2 + 17);
  *(void *)(a1 + 288) = a2[36];
  *(_OWORD *)(a1 + 272) = v9;
  a2[35] = 0;
  a2[36] = 0;
  a2[34] = 0;
  *(unsigned char *)(a1 + 296) = *((unsigned char *)a2 + 296);
  return a1;
}

uint64_t *sub_979DA4(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = *a2;
  unint64_t v8 = __ROR8__(*a2, 32);
  unint64_t v9 = 0xC4CEB9FE1A85EC53
     * ((0xFF51AFD7ED558CCDLL * (v8 ^ (v8 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v8 ^ (v8 >> 33))) >> 33));
  unint64_t v10 = v9 ^ (v9 >> 33);
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9 ^ (v9 >> 33);
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = v10 & (v11 - 1);
    }
    uint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v17 = v14[1];
            if (v17 == v10)
            {
              if (*((_DWORD *)v14 + 4) == v7 && *((_DWORD *)v14 + 5) == HIDWORD(v7)) {
                return v14;
              }
            }
            else if ((v17 & (v11 - 1)) != v4)
            {
              goto LABEL_31;
            }
            uint64_t v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v10)
          {
            if (*((_DWORD *)v14 + 4) == v7 && *((_DWORD *)v14 + 5) == HIDWORD(v7)) {
              return v14;
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v4) {
              break;
            }
          }
          uint64_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_31:
  uint64_t v20 = operator new(0x20uLL);
  *uint64_t v20 = 0;
  v20[1] = v10;
  v20[2] = **a4;
  v20[3] = -1;
  float v21 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v22 = *(float *)(a1 + 32);
  if (v11 && (float)(v22 * (float)v11) >= v21)
  {
    uint64_t v23 = *(void *)a1;
    uint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
    if (v24)
    {
LABEL_34:
      *uint64_t v20 = *v24;
LABEL_69:
      *uint64_t v24 = v20;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v25 = 1;
    if (v11 >= 3) {
      BOOL v25 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v26 = v25 | (2 * v11);
    unint64_t v27 = vcvtps_u32_f32(v21 / v22);
    if (v26 <= v27) {
      size_t prime = v27;
    }
    else {
      size_t prime = v26;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v11 = *(void *)(a1 + 8);
    }
    if (prime > v11) {
      goto LABEL_45;
    }
    if (prime < v11)
    {
      unint64_t v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        unint64_t v29 = std::__next_prime(v29);
      }
      else
      {
        uint64_t v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2) {
          unint64_t v29 = v31;
        }
      }
      if (prime <= v29) {
        size_t prime = v29;
      }
      if (prime < v11) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v32 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v4 = v10 % v11;
        uint64_t v23 = *(void *)a1;
        uint64_t v24 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v24) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v4 = v10;
        uint64_t v23 = *(void *)a1;
        uint64_t v24 = *(void **)(*(void *)a1 + 8 * v10);
        if (v24) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v4 = v32 & v10;
      uint64_t v23 = *(void *)a1;
      uint64_t v24 = *(void **)(*(void *)a1 + 8 * (v32 & v10));
      if (v24) {
        goto LABEL_34;
      }
    }
  }
  *uint64_t v20 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v20;
  *(void *)(v23 + 8 * v4) = a1 + 16;
  if (*v20)
  {
    unint64_t v33 = *(void *)(*v20 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v33 >= v11) {
        v33 %= v11;
      }
    }
    else
    {
      v33 &= v11 - 1;
    }
    uint64_t v24 = (void *)(*(void *)a1 + 8 * v33);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v20;
}

void sub_97A100(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_97A114(void *a1, uint64_t a2)
{
  unint64_t v4 = sub_3B368((uint64_t)(a1 + 3), (unsigned int **)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v7 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v5 - 1) & v4;
  }
  unint64_t v9 = *(void **)(*a1 + 8 * v7);
  if (!v9) {
    return v9;
  }
  unint64_t v9 = (void *)*v9;
  if (!v9) {
    return v9;
  }
  uint64_t v10 = *(void *)(a2 + 8) - *(void *)a2;
  if (v6.u32[0] < 2uLL)
  {
    uint64_t v11 = *(void *)&v5 - 1;
    while (1)
    {
      uint64_t v16 = v9[1];
      if (v16 == v4)
      {
        unint64_t v18 = (char *)v9[2];
        uint64_t v17 = (char *)v9[3];
        if (v17 - v18 == v10)
        {
          if (v18 == v17) {
            return v9;
          }
          for (uint64_t i = *(unsigned int **)a2;
                *(_DWORD *)v18 == *i && *((_DWORD *)v18 + 1) == i[1] && *((_DWORD *)v18 + 2) == i[2];
                i += 3)
          {
            v18 += 12;
            if (v18 == v17) {
              return v9;
            }
          }
        }
      }
      else if ((v16 & v11) != v7)
      {
        return 0;
      }
      unint64_t v9 = (void *)*v9;
      if (!v9) {
        return v9;
      }
    }
  }
  while (1)
  {
    unint64_t v12 = v9[1];
    if (v12 != v4) {
      break;
    }
    uint64_t v14 = (char *)v9[2];
    uint64_t v13 = (char *)v9[3];
    if (v13 - v14 == v10)
    {
      if (v14 == v13) {
        return v9;
      }
      for (j = *(unsigned int **)a2;
            *(_DWORD *)v14 == *j && *((_DWORD *)v14 + 1) == j[1] && *((_DWORD *)v14 + 2) == j[2];
            j += 3)
      {
        v14 += 12;
        if (v14 == v13) {
          return v9;
        }
      }
    }
LABEL_12:
    unint64_t v9 = (void *)*v9;
    if (!v9) {
      return v9;
    }
  }
  if (v12 >= *(void *)&v5) {
    v12 %= *(void *)&v5;
  }
  if (v12 == v7) {
    goto LABEL_12;
  }
  return 0;
}

char *sub_97A2E4(char **a1, uint64_t a2)
{
  unint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - v4) >> 3) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - v4) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3) >= 0x555555555555555) {
    unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL) {
      sub_188D718();
    }
    unint64_t v9 = (char *)operator new(24 * v8);
  }
  else
  {
    unint64_t v9 = 0;
  }
  uint64_t v10 = &v9[24 * v5];
  uint64_t v11 = &v9[24 * v8];
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(void *)uint64_t v10 = 0;
  unint64_t v12 = *(const void **)a2;
  int64_t v13 = *(void *)(a2 + 8) - *(void *)a2;
  if (v13)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v13 >> 2) >= 0x1555555555555556) {
      sub_2E00();
    }
    uint64_t v14 = (char *)operator new(v13);
    *(void *)uint64_t v10 = v14;
    *((void *)v10 + 1) = v14;
    unint64_t v15 = &v14[4 * (v13 >> 2)];
    *((void *)v10 + 2) = v15;
    memcpy(v14, v12, v13);
    *((void *)v10 + 1) = v15;
  }
  uint64_t v16 = v10 + 24;
  uint64_t v24 = v10 + 24;
  if (v3 == v4)
  {
    *a1 = v10;
    a1[1] = v16;
    a1[2] = v11;
  }
  else
  {
    do
    {
      uint64_t v17 = v10;
      *((void *)v10 - 2) = 0;
      *((void *)v10 - 1) = 0;
      long long v18 = *(_OWORD *)(v3 - 24);
      v3 -= 24;
      *(_OWORD *)(v10 - 24) = v18;
      v10 -= 24;
      *((void *)v17 - 1) = *((void *)v3 + 2);
      *(void *)uint64_t v3 = 0;
      *((void *)v3 + 1) = 0;
      *((void *)v3 + 2) = 0;
    }
    while (v3 != v4);
    uint64_t v19 = *a1;
    uint64_t v3 = a1[1];
    uint64_t v16 = v24;
    *a1 = v10;
    a1[1] = v24;
    a1[2] = v11;
    if (v3 != v19)
    {
      uint64_t v20 = v3;
      do
      {
        float v22 = (void *)*((void *)v20 - 3);
        v20 -= 24;
        float v21 = v22;
        if (v22)
        {
          *((void *)v3 - 2) = v21;
          operator delete(v21);
        }
        uint64_t v3 = v20;
      }
      while (v20 != v19);
      uint64_t v3 = v19;
    }
  }
  if (v3) {
    operator delete(v3);
  }
  return v16;
}

void sub_97A4D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  unint64_t v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
  }
  sub_2A6E80((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_97A4FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = sub_3B368(a1 + 24, (unsigned int **)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    int64_t v13 = *(void **)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      __n128 result = (void *)*v13;
      if (*v13)
      {
        uint64_t v15 = *(void *)(a2 + 8) - *(void *)a2;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v20 = result[1];
            if (v20 == v10)
            {
              float v22 = (char *)result[2];
              float v21 = (char *)result[3];
              if (v21 - v22 == v15)
              {
                if (v22 == v21) {
                  return result;
                }
                for (uint64_t i = *(unsigned int **)a2;
                      *(_DWORD *)v22 == *i && *((_DWORD *)v22 + 1) == i[1] && *((_DWORD *)v22 + 2) == i[2];
                      i += 3)
                {
                  v22 += 12;
                  if (v22 == v21) {
                    return result;
                  }
                }
              }
            }
            else if ((v20 & (v11 - 1)) != v4)
            {
              goto LABEL_35;
            }
            __n128 result = (void *)*result;
            if (!result) {
              goto LABEL_35;
            }
          }
        }
        do
        {
          unint64_t v16 = result[1];
          if (v16 == v10)
          {
            long long v18 = (char *)result[2];
            uint64_t v17 = (char *)result[3];
            if (v17 - v18 == v15)
            {
              if (v18 == v17) {
                return result;
              }
              for (j = *(unsigned int **)a2;
                    *(_DWORD *)v18 == *j && *((_DWORD *)v18 + 1) == j[1] && *((_DWORD *)v18 + 2) == j[2];
                    j += 3)
              {
                v18 += 12;
                if (v18 == v17) {
                  return result;
                }
              }
            }
          }
          else
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
            if (v16 != v4) {
              break;
            }
          }
          __n128 result = (void *)*result;
        }
        while (result);
      }
    }
  }
LABEL_35:
  sub_97A900(a1, v10, a4, (uint64_t)&v37);
  float v24 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v25 = *(float *)(a1 + 32);
  if (!v11 || (float)(v25 * (float)v11) < v24)
  {
    BOOL v27 = 1;
    if (v11 >= 3) {
      BOOL v27 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v28 = v27 | (2 * v11);
    unint64_t v29 = vcvtps_u32_f32(v24 / v25);
    if (v28 <= v29) {
      size_t prime = v29;
    }
    else {
      size_t prime = v28;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v31 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v31) {
      goto LABEL_49;
    }
    if (prime < *(void *)&v31)
    {
      unint64_t v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v31 < 3uLL || (uint8x8_t v33 = (uint8x8_t)vcnt_s8(v31), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        unint64_t v32 = std::__next_prime(v32);
      }
      else
      {
        uint64_t v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2) {
          unint64_t v32 = v34;
        }
      }
      if (prime <= v32) {
        size_t prime = v32;
      }
      if (prime < *(void *)&v31) {
LABEL_49:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v35 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v4 = v10 % v11;
        unint64_t v26 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v26) {
          goto LABEL_38;
        }
      }
      else
      {
        unint64_t v4 = v10;
        unint64_t v26 = *(void **)(*(void *)a1 + 8 * v10);
        if (v26) {
          goto LABEL_38;
        }
      }
    }
    else
    {
      unint64_t v4 = v35 & v10;
      unint64_t v26 = *(void **)(*(void *)a1 + 8 * (v35 & v10));
      if (v26) {
        goto LABEL_38;
      }
    }
LABEL_62:
    void *v37 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v37;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*v37)
    {
      unint64_t v36 = *(void *)(*v37 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v36 >= v11) {
          v36 %= v11;
        }
      }
      else
      {
        v36 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v36) = v37;
    }
    goto LABEL_73;
  }
  unint64_t v26 = *(void **)(*(void *)a1 + 8 * v4);
  if (!v26) {
    goto LABEL_62;
  }
LABEL_38:
  void *v37 = *v26;
  *unint64_t v26 = v37;
LABEL_73:
  __n128 result = v37;
  ++*v8;
  return result;
}

void sub_97A8EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_97A9FC((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_97A900@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  __n128 result = operator new(0x30uLL);
  unint64_t v9 = result;
  *(void *)a4 = result;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *result = 0;
  result[1] = a2;
  result[2] = 0;
  uint64_t v10 = *a3;
  result[3] = 0;
  result[4] = 0;
  uint8x8_t v12 = *(unsigned char **)v10;
  unint64_t v11 = *(unsigned char **)(v10 + 8);
  int64_t v13 = v11 - v12;
  if (v11 != v12)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v13 >> 2) >= 0x1555555555555556) {
      sub_2E00();
    }
    uint64_t v14 = (char *)operator new(v13);
    v9[2] = v14;
    v9[3] = v14;
    uint64_t v15 = &v14[4 * (v13 >> 2)];
    v9[4] = v15;
    __n128 result = memcpy(v14, v12, v13);
    v9[3] = v15;
  }
  v9[5] = -1;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_97A9D8(_Unwind_Exception *a1)
{
  unint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 24) = v5;
    operator delete(v5);
  }
  sub_97A9FC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_97A9FC(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v3 = (void *)v2[2];
      if (v3)
      {
        v2[3] = v3;
        operator delete(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t **sub_97AA4C(void *a1, uint64_t a2)
{
  unint64_t v4 = sub_97ABA0((uint64_t)(a1 + 3), (unsigned int *)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v8 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v8 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v8 = (*(void *)&v5 - 1) & v4;
  }
  unint64_t v9 = *(uint64_t ****)(*a1 + 8 * v8);
  if (!v9) {
    return 0;
  }
  uint64_t v10 = *v9;
  if (*v9)
  {
    if (v7.u32[0] < 2uLL)
    {
      uint64_t v11 = *(void *)&v5 - 1;
      while (1)
      {
        int64_t v13 = v10[1];
        if (v13 == (uint64_t *)v6)
        {
          if (sub_97AD34((uint64_t)&v15, (uint64_t)(v10 + 2), a2)
            && *((unsigned __int8 *)v10 + 48) == *(unsigned __int8 *)(a2 + 32))
          {
            return v10;
          }
        }
        else if (((unint64_t)v13 & v11) != v8)
        {
          return 0;
        }
        uint64_t v10 = (uint64_t **)*v10;
        if (!v10) {
          return v10;
        }
      }
    }
    do
    {
      unint64_t v12 = (unint64_t)v10[1];
      if (v12 == v6)
      {
        if (sub_97AD34((uint64_t)&v15, (uint64_t)(v10 + 2), a2)
          && *((unsigned __int8 *)v10 + 48) == *(unsigned __int8 *)(a2 + 32))
        {
          return v10;
        }
      }
      else
      {
        if (v12 >= *(void *)&v5) {
          v12 %= *(void *)&v5;
        }
        if (v12 != v8) {
          return 0;
        }
      }
      uint64_t v10 = (uint64_t **)*v10;
    }
    while (v10);
  }
  return v10;
}

uint64_t sub_97ABA0(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = (int)a2[3];
  unint64_t v3 = (v2 + 0x388152A534) ^ 0xDEADBEEFLL;
  if (v2 == 1)
  {
    unint64_t v4 = (*a2 + 0x388152A534) ^ 0xDEADBEEFLL;
    unint64_t v6 = 0xFF51AFD7ED558CCDLL * (*(void *)(a2 + 1) ^ (*(void *)(a2 + 1) >> 33));
    uint64_t v5 = (v4 << 6)
       + 2654435769u
       + (v4 >> 2)
       + ((0xC4CEB9FE1A85EC53 * (v6 ^ (v6 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v6 ^ (v6 >> 33))) >> 33));
  }
  else
  {
    if (v2) {
      goto LABEL_6;
    }
    unint64_t v4 = (a2[1]
        + 2654435769
        + (((*a2 + 0x388152A534) ^ 0xDEADBEEFLL) << 6)
        + (((*a2 + 0x388152A534) ^ 0xDEADBEEFuLL) >> 2)) ^ (*a2 + 0x388152A534) ^ 0xDEADBEEFLL;
    uint64_t v5 = (int)a2[2] + 2654435769 + (v4 << 6) + (v4 >> 2);
  }
  v3 ^= (v3 << 6) + 2654435769u + (v3 >> 2) + (v5 ^ v4);
LABEL_6:
  uint64_t v7 = (int)a2[7];
  unint64_t v8 = ((v3 << 6) + 2654435769u + (v3 >> 2) + v7) ^ v3;
  if (v7 == 1)
  {
    unint64_t v9 = (a2[4] + 0x388152A534) ^ 0xDEADBEEFLL;
    unint64_t v11 = 0xC4CEB9FE1A85EC53
        * ((0xFF51AFD7ED558CCDLL * (*(void *)(a2 + 5) ^ (*(void *)(a2 + 5) >> 33))) ^ ((0xFF51AFD7ED558CCDLL
                                                                                          * (*(void *)(a2 + 5) ^ (*(void *)(a2 + 5) >> 33))) >> 33));
    uint64_t v10 = (v9 << 6) + 2654435769u + (v9 >> 2) + (v11 ^ (v11 >> 33));
    goto LABEL_10;
  }
  if (!v7)
  {
    unint64_t v9 = (a2[5]
        + 2654435769
        + (((a2[4] + 0x388152A534) ^ 0xDEADBEEFLL) << 6)
        + (((a2[4] + 0x388152A534) ^ 0xDEADBEEFuLL) >> 2)) ^ (a2[4] + 0x388152A534) ^ 0xDEADBEEFLL;
    uint64_t v10 = (int)a2[6] + 2654435769 + (v9 << 6) + (v9 >> 2);
LABEL_10:
    v8 ^= (v8 << 6) + 2654435769u + (v8 >> 2) + (v10 ^ v9);
  }
  return ((v8 << 6) + 2654435769u + (v8 >> 2) + *((unsigned __int8 *)a2 + 32)) ^ v8;
}

uint64_t sub_97AD34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a2 + 12);
  if (v3 != *(_DWORD *)(a3 + 12)) {
    return 0;
  }
  if (v3 != -1)
  {
    if (v3 == 1)
    {
      if (*(_DWORD *)a2 != *(_DWORD *)a3 || *(void *)(a2 + 4) != *(void *)(a3 + 4)) {
        return 0;
      }
    }
    else if (v3 {
           || *(_DWORD *)a2 != *(_DWORD *)a3
    }
           || *(_DWORD *)(a2 + 4) != *(_DWORD *)(a3 + 4)
           || *(_DWORD *)(a2 + 8) != *(_DWORD *)(a3 + 8))
    {
      return 0;
    }
  }
  int v4 = *(_DWORD *)(a2 + 28);
  if (v4 == *(_DWORD *)(a3 + 28))
  {
    if (v4 == -1) {
      return 1;
    }
    if (v4 == 1)
    {
      if (*(_DWORD *)(a2 + 16) == *(_DWORD *)(a3 + 16))
      {
        uint64_t v6 = *(void *)(a3 + 20);
        if (*(_DWORD *)(a2 + 24) == HIDWORD(v6)) {
          return *(_DWORD *)(a2 + 20) == v6;
        }
      }
    }
    else if (!v4 && *(_DWORD *)(a2 + 16) == *(_DWORD *)(a3 + 16) && *(_DWORD *)(a2 + 20) == *(_DWORD *)(a3 + 20))
    {
      return *(_DWORD *)(a2 + 24) == *(_DWORD *)(a3 + 24);
    }
  }
  return 0;
}

void *sub_97AE68(void *a1, long long *a2, unint64_t a3)
{
  a1[2] = 0;
  uint64_t v4 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    if (a3 >= 0x222222222222223) {
      sub_2E00();
    }
    uint64_t v6 = 120 * a3;
    uint64_t v7 = (char *)operator new(120 * a3);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[v6];
    a1[1] = sub_97AF34(v4, a2, (long long *)((char *)a2 + v6), (uint64_t)v7);
  }
  return a1;
}

void sub_97AF08(_Unwind_Exception *exception_object)
{
  v1[1] = v2;
  if (*v1) {
    sub_20ACC40((uint64_t)(v1 + 1), *v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_97AF34(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v14 = a4;
  if (a2 != a3)
  {
    uint64_t v6 = a2 + 6;
    do
    {
      *(void *)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
      unint64_t v8 = v6 - 6;
      sub_97B130(v4, *((void *)v6 - 12), *((void *)v6 - 11), 0xF83E0F83E0F83E1 * ((uint64_t)(*((void *)v6 - 11) - *((void *)v6 - 12)) >> 5));
      *(_OWORD *)(v4 + 24) = *(long long *)((char *)v6 - 72);
      long long v9 = *(long long *)((char *)v6 - 56);
      long long v10 = *(long long *)((char *)v6 - 40);
      long long v11 = *(long long *)((char *)v6 - 24);
      *(void *)(v4 + 85) = *(void *)((char *)v6 - 11);
      *(_OWORD *)(v4 + 72) = v11;
      *(_OWORD *)(v4 + 56) = v10;
      *(_OWORD *)(v4 + 40) = v9;
      unint64_t v12 = (unsigned char *)(v4 + 96);
      if (*((char *)v6 + 23) < 0)
      {
        sub_4200(v12, *(void **)v6, *((void *)v6 + 1));
      }
      else
      {
        long long v7 = *v6;
        *(void *)(v4 + 112) = *((void *)v6 + 2);
        *(_OWORD *)unint64_t v12 = v7;
      }
      uint64_t v4 = v14 + 120;
      v14 += 120;
      uint64_t v6 = (long long *)((char *)v6 + 120);
    }
    while ((long long *)((char *)v8 + 120) != a3);
  }
  return v4;
}

void sub_97B03C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*v9)
  {
    sub_20ACCE8();
    sub_97B074((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
  sub_97B074((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_97B074(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    int v3 = *(void ****)(a1 + 8);
    uint64_t v2 = *(void ****)(a1 + 16);
    uint64_t v4 = *v2;
    uint64_t v5 = *v3;
    if (*v2 != *v3)
    {
      do
      {
        if (*((char *)v4 - 1) < 0)
        {
          operator delete(*(v4 - 3));
          long long v7 = v4 - 15;
          unint64_t v8 = *(v4 - 15);
          if (v8)
          {
LABEL_10:
            uint64_t v9 = (uint64_t)*(v4 - 14);
            long long v10 = v8;
            if ((void *)v9 != v8)
            {
              do
                uint64_t v9 = sub_3AFFFC(v9 - 1056);
              while ((void *)v9 != v8);
              long long v10 = *v7;
            }
            *(v4 - 14) = v8;
            operator delete(v10);
          }
        }
        else
        {
          long long v7 = v4 - 15;
          unint64_t v8 = *(v4 - 15);
          if (v8) {
            goto LABEL_10;
          }
        }
        uint64_t v4 = v7;
      }
      while (v7 != v5);
    }
  }
  return a1;
}

uint64_t sub_97B130(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = (void *)result;
    if (a4 >= 0x3E0F83E0F83E10) {
      sub_2E00();
    }
    __n128 result = (uint64_t)operator new(1056 * a4);
    uint64_t v8 = result;
    *uint64_t v5 = result;
    v5[1] = result;
    v5[2] = result + 1056 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        __n128 result = sub_7A3ACC(v8 + v9, a2 + v9);
        v9 += 1056;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_97B1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_97B208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 1056)
    sub_3AFFFC(v10 - 1056 + v11);
  *(void *)(v9 + 8) = v10;
  sub_3B1794(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_97B238(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xBAA6550FFBAA6551 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x8AB355E008AB3) {
    sub_2E00();
  }
  if (0x754CAA1FF754CAA2 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x754CAA1FF754CAA2 * ((a1[2] - *a1) >> 3);
  }
  if (0xBAA6550FFBAA6551 * ((a1[2] - *a1) >> 3) >= 0x4559AAF004559) {
    unint64_t v6 = 0x8AB355E008AB3;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x8AB355E008AB3) {
      sub_188D718();
    }
    long long v7 = (char *)operator new(7560 * v6);
  }
  else
  {
    long long v7 = 0;
  }
  uint64_t v14 = (uint64_t)&v7[7560 * v3];
  char v15 = &v7[7560 * v6];
  sub_7A1FB0(v14, a2);
  uint64_t v8 = v14;
  uint64_t v9 = v14 + 7560;
  uint64_t v11 = (char *)*a1;
  uint64_t v10 = (char *)a1[1];
  if (v10 == (char *)*a1)
  {
    *a1 = v14;
    a1[1] = v9;
    a1[2] = (uint64_t)v15;
  }
  else
  {
    do
    {
      v10 -= 7560;
      uint64_t v8 = sub_73BD9C(v8 - 7560, (uint64_t)v10);
    }
    while (v10 != v11);
    unint64_t v12 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    *a1 = v8;
    a1[1] = v9;
    a1[2] = (uint64_t)v15;
    if (v10 != v12)
    {
      do
      {
        v10 -= 7560;
        sub_574D4C((uint64_t)v10);
      }
      while (v10 != v12);
      uint64_t v10 = v12;
    }
  }
  if (v10) {
    operator delete(v10);
  }
  return v14 + 7560;
}

void sub_97B3CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_79F088((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_97B3E0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v9 = (void *)(a1 + 24);
  unint64_t v10 = sub_97ABA0(a1 + 24, (unsigned int *)a2);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    uint64_t v14 = *(void **)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      char v15 = (void *)*v14;
      if (*v14)
      {
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v17 = v15[1];
            if (v17 == v11)
            {
              if (sub_97AD34((uint64_t)&v36, (uint64_t)(v15 + 2), a2)
                && *((unsigned __int8 *)v15 + 48) == *(unsigned __int8 *)(a2 + 32))
              {
                return v15;
              }
            }
            else if ((v17 & (v12 - 1)) != v4)
            {
              goto LABEL_25;
            }
            char v15 = (void *)*v15;
            if (!v15) {
              goto LABEL_25;
            }
          }
        }
        do
        {
          unint64_t v16 = v15[1];
          if (v16 == v11)
          {
            if (sub_97AD34((uint64_t)&v36, (uint64_t)(v15 + 2), a2)
              && *((unsigned __int8 *)v15 + 48) == *(unsigned __int8 *)(a2 + 32))
            {
              return v15;
            }
          }
          else
          {
            if (v16 >= v12) {
              v16 %= v12;
            }
            if (v16 != v4) {
              break;
            }
          }
          char v15 = (void *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_25:
  long long v18 = operator new(0x40uLL);
  char v15 = v18;
  *long long v18 = 0;
  v18[1] = v11;
  unsigned int v19 = *(_DWORD *)(a3 + 12);
  *((_DWORD *)v18 + 7) = v19;
  if (v19 <= 1)
  {
    v18[2] = *(void *)a3;
    *((_DWORD *)v18 + 6) = *(_DWORD *)(a3 + 8);
  }
  unsigned int v20 = *(_DWORD *)(a3 + 28);
  *((_DWORD *)v18 + 11) = v20;
  if (v20 <= 1)
  {
    v18[4] = *(void *)(a3 + 16);
    *((_DWORD *)v18 + 10) = *(_DWORD *)(a3 + 24);
  }
  *((unsigned char *)v18 + 48) = *(unsigned char *)(a3 + 32);
  v18[7] = *a4;
  float v21 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v22 = *(float *)(a1 + 32);
  if (v12 && (float)(v22 * (float)v12) >= v21)
  {
    uint64_t v23 = *(void *)a1;
    float v24 = *(void **)(*(void *)a1 + 8 * v4);
    if (v24)
    {
LABEL_32:
      *char v15 = *v24;
LABEL_67:
      *float v24 = v15;
      goto LABEL_68;
    }
  }
  else
  {
    BOOL v25 = 1;
    if (v12 >= 3) {
      BOOL v25 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v26 = v25 | (2 * v12);
    unint64_t v27 = vcvtps_u32_f32(v21 / v22);
    if (v26 <= v27) {
      size_t prime = v27;
    }
    else {
      size_t prime = v26;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v29 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v29) {
      goto LABEL_43;
    }
    if (prime < *(void *)&v29)
    {
      unint64_t v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v29 < 3uLL || (uint8x8_t v31 = (uint8x8_t)vcnt_s8(v29), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        unint64_t v30 = std::__next_prime(v30);
      }
      else
      {
        uint64_t v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2) {
          unint64_t v30 = v32;
        }
      }
      if (prime <= v30) {
        size_t prime = v30;
      }
      if (prime < *(void *)&v29) {
LABEL_43:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v33 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        uint64_t v23 = *(void *)a1;
        float v24 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        if (v24) {
          goto LABEL_32;
        }
      }
      else
      {
        unint64_t v4 = v11;
        uint64_t v23 = *(void *)a1;
        float v24 = *(void **)(*(void *)a1 + 8 * v11);
        if (v24) {
          goto LABEL_32;
        }
      }
    }
    else
    {
      unint64_t v4 = v33 & v11;
      uint64_t v23 = *(void *)a1;
      float v24 = *(void **)(*(void *)a1 + 8 * (v33 & v11));
      if (v24) {
        goto LABEL_32;
      }
    }
  }
  *char v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  *(void *)(v23 + 8 * v4) = a1 + 16;
  if (*v15)
  {
    unint64_t v34 = *(void *)(*v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v34 >= v12) {
        v34 %= v12;
      }
    }
    else
    {
      v34 &= v12 - 1;
    }
    float v24 = (void *)(*(void *)a1 + 8 * v34);
    goto LABEL_67;
  }
LABEL_68:
  ++*v9;
  return v15;
}

void sub_97B780(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void **sub_97B794(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_97B7C8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v1; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 128;
    if (*(char *)(i - 9) < 0)
    {
      operator delete(*(void **)(i - 32));
      if ((*(char *)(i - 41) & 0x80000000) == 0)
      {
LABEL_7:
        int v5 = *(_DWORD *)(i - 80);
        if (v5 != 1) {
          goto LABEL_8;
        }
        goto LABEL_13;
      }
    }
    else if ((*(char *)(i - 41) & 0x80000000) == 0)
    {
      goto LABEL_7;
    }
    operator delete(*(void **)(i - 64));
    int v5 = *(_DWORD *)(i - 80);
    if (v5 != 1)
    {
LABEL_8:
      if (v5 || (*(char *)(i - 81) & 0x80000000) == 0) {
        continue;
      }
      unint64_t v4 = *(void **)(i - 104);
      goto LABEL_3;
    }
LABEL_13:
    unint64_t v4 = *(void **)(i - 104);
    if (!v4) {
      continue;
    }
    *(void *)(i - 96) = v4;
LABEL_3:
    operator delete(v4);
  }
}

void *sub_97B87C(void **a1, void *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = ((unsigned char *)a1[1] - (unsigned char *)*a1) >> 7;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 57) {
    sub_2E00();
  }
  uint64_t v10 = (unsigned char *)a1[2] - (unsigned char *)*a1;
  if (v10 >> 6 > v6) {
    unint64_t v6 = v10 >> 6;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFF80) {
    unint64_t v11 = 0x1FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  if (v11)
  {
    if (v11 >> 57) {
      sub_188D718();
    }
    unint64_t v12 = (char *)operator new(v11 << 7);
  }
  else
  {
    unint64_t v12 = 0;
  }
  unint64_t v27 = &v12[128 * v5];
  unint64_t v28 = &v12[128 * v11];
  uint64_t v13 = *a3;
  *(void *)unint64_t v27 = *a2;
  *((void *)v27 + 1) = v13;
  sub_4F57A0((uint64_t)(v27 + 16), a4);
  uint64_t v14 = v27 + 128;
  unint64_t v16 = (void **)*a1;
  char v15 = (void **)a1[1];
  if (v15 == *a1)
  {
    *a1 = v27;
    a1[1] = v14;
    a1[2] = v28;
    goto LABEL_30;
  }
  uint64_t v17 = 0;
  do
  {
    long long v18 = &v27[v17 * 8];
    unsigned int v19 = &v15[v17];
    *((_OWORD *)v18 - 8) = *(_OWORD *)&v15[v17 - 16];
    *((_DWORD *)v18 - 20) = v15[v17 - 10];
    sub_4F38B0((void *)LODWORD(v15[v17 - 10]), (uint64_t *)&v15[v17 - 14], &v27[v17 * 8 - 112]);
    *((void *)v18 - 9) = v15[v17 - 9];
    long long v20 = *(_OWORD *)&v15[v17 - 8];
    *((void *)v18 - 6) = v15[v17 - 6];
    *((_OWORD *)v18 - 4) = v20;
    *(v19 - 7) = 0;
    *(v19 - 6) = 0;
    *(v19 - 8) = 0;
    *(v18 - 40) = (char)v15[v17 - 5];
    long long v21 = *(_OWORD *)&v15[v17 - 4];
    *((void *)v18 - 2) = v15[v17 - 2];
    *((_OWORD *)v18 - 2) = v21;
    *(v19 - 3) = 0;
    *(v19 - 2) = 0;
    *(v19 - 4) = 0;
    *(v18 - 8) = (char)v15[v17 - 1];
    v17 -= 16;
  }
  while (&v15[v17] != v16);
  float v22 = (void **)*a1;
  char v15 = (void **)a1[1];
  uint64_t v23 = &v27[v17 * 8];
  uint64_t v14 = v27 + 128;
  *a1 = v23;
  a1[1] = v27 + 128;
  a1[2] = v28;
  if (v15 != v22)
  {
    while (1)
    {
      if (*((char *)v15 - 9) < 0)
      {
        operator delete(*(v15 - 4));
        if ((*((char *)v15 - 41) & 0x80000000) == 0)
        {
LABEL_21:
          int v24 = *((_DWORD *)v15 - 20);
          if (v24 != 1) {
            goto LABEL_22;
          }
          goto LABEL_27;
        }
      }
      else if ((*((char *)v15 - 41) & 0x80000000) == 0)
      {
        goto LABEL_21;
      }
      operator delete(*(v15 - 8));
      int v24 = *((_DWORD *)v15 - 20);
      if (v24 != 1)
      {
LABEL_22:
        if (v24 || (*((char *)v15 - 81) & 0x80000000) == 0) {
          goto LABEL_18;
        }
        BOOL v25 = *(v15 - 13);
        goto LABEL_17;
      }
LABEL_27:
      BOOL v25 = *(v15 - 13);
      if (!v25) {
        goto LABEL_18;
      }
      *(v15 - 12) = v25;
LABEL_17:
      operator delete(v25);
LABEL_18:
      v15 -= 16;
      if (v15 == v22)
      {
        char v15 = v22;
        break;
      }
    }
  }
LABEL_30:
  if (v15) {
    operator delete(v15);
  }
  return v14;
}

void sub_97BABC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_97B794((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_97BAD4()
{
  return v0;
}

double sub_97BAE0()
{
  byte_25DADF7 = 1;
  word_25DADE0 = 65;
  byte_25DAE0F = 1;
  word_25DADF8 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25DAEA0 = 0u;
  *(_OWORD *)&qword_25DAEB0 = 0u;
  dword_25DAEC0 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25DAEA0, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25DAEA0, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25DAEA0, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25DAEA0, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25DAE27 = 8;
  strcpy((char *)&qword_25DAE10, "any_mode");
  byte_25DAE3F = 7;
  strcpy((char *)&dword_25DAE28, "cycling");
  byte_25DAE57 = 7;
  strcpy((char *)&dword_25DAE40, "driving");
  byte_25DAE6F = 7;
  strcpy((char *)&dword_25DAE58, "walking");
  qword_25DAE78 = 0;
  qword_25DAE80 = 0;
  qword_25DAE70 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25DAE70 = (uint64_t)v0;
  qword_25DAE78 = (uint64_t)(v0 + 9);
  qword_25DAE80 = (uint64_t)(v0 + 9);
  qword_25DAE88 = 0;
  qword_25DAE90 = 0;
  unk_25DAE98 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25DAE90 = (uint64_t)(v1 + 9);
  unk_25DAE98 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25DAE88 = (uint64_t)v1;
  return result;
}

void sub_97BDA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25DAEB0) {
    sub_20ACD38((void **)qword_25DAEB0);
  }
  uint64_t v37 = (void *)xmmword_25DAEA0;
  *(void *)&xmmword_25DAEA0 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_97BE48(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, std::string *a5@<X8>)
{
  nullsub_1(&v41);
  char v10 = (int *)sub_8DFD1C(a3, a1, 0, "line");
  int v11 = (unsigned __int16 *)((char *)v10 - *v10);
  if (*v11 >= 0xFu && (uint64_t v12 = v11[7]) != 0) {
    char v13 = (char **)((char *)v10 + v12 + *(unsigned int *)((char *)v10 + v12));
  }
  else {
    char v13 = 0;
  }
  sub_8F48DC(v13, (void (*)(void **__return_ptr, char *))sub_4A0694, (uint64_t)&__p);
  uint64_t v14 = a4 + 968;
  sub_997050((uint64_t *)&__p, v14, &v46);
  char v15 = (void **)__p;
  if (__p)
  {
    unint64_t v16 = v45;
    uint64_t v17 = __p;
    if (v45 != __p)
    {
      do
      {
        long long v18 = (void **)*(v16 - 3);
        if (v18)
        {
          unsigned int v19 = (void **)*(v16 - 2);
          long long v20 = *(v16 - 3);
          if (v19 != v18)
          {
            do
            {
              if (*((char *)v19 - 1) < 0) {
                operator delete(*(v19 - 3));
              }
              v19 -= 4;
            }
            while (v19 != v18);
            long long v20 = *(v16 - 3);
          }
          *(v16 - 2) = v18;
          operator delete(v20);
        }
        long long v21 = v16 - 8;
        if (*((char *)v16 - 41) < 0) {
          operator delete(*v21);
        }
        v16 -= 8;
      }
      while (v21 != v15);
      uint64_t v17 = __p;
    }
    long long v45 = v15;
    operator delete(v17);
  }
  float v22 = (int *)sub_8DFD1C(a3, a1, 0, "line");
  unint64_t v23 = *(void *)((char *)v22 + *(unsigned __int16 *)((char *)v22 - *v22 + 6));
  nullsub_1(&v43);
  int v24 = (int *)sub_8EF9B8(a2, v23, 0, "system");
  BOOL v25 = (unsigned __int16 *)((char *)v24 - *v24);
  if (*v25 >= 7u && (uint64_t v26 = v25[3]) != 0) {
    unint64_t v27 = (char **)((char *)v24 + v26 + *(unsigned int *)((char *)v24 + v26));
  }
  else {
    unint64_t v27 = 0;
  }
  sub_8F48DC(v27, (void (*)(void **__return_ptr, char *))sub_4A0694, (uint64_t)&v41);
  sub_997050((uint64_t *)&v41, v14, &__p);
  unint64_t v28 = (void **)v41;
  if (v41)
  {
    int8x8_t v29 = v42;
    unint64_t v30 = v41;
    if (v42 != v41)
    {
      do
      {
        uint8x8_t v31 = (void **)*(v29 - 3);
        if (v31)
        {
          uint64_t v32 = (void **)*(v29 - 2);
          unint64_t v33 = *(v29 - 3);
          if (v32 != v31)
          {
            do
            {
              if (*((char *)v32 - 1) < 0) {
                operator delete(*(v32 - 3));
              }
              v32 -= 4;
            }
            while (v32 != v31);
            unint64_t v33 = *(v29 - 3);
          }
          *(v29 - 2) = v31;
          operator delete(v33);
        }
        unint64_t v34 = v29 - 8;
        if (*((char *)v29 - 41) < 0) {
          operator delete(*v34);
        }
        v29 -= 8;
      }
      while (v34 != v28);
      unint64_t v30 = v41;
    }
    uint64_t v42 = v28;
    operator delete(v30);
  }
  sub_97C258((uint64_t *)&v46, (uint64_t *)&__p, a5);
  unint64_t v35 = (void **)__p;
  if (__p)
  {
    char v36 = v45;
    uint64_t v37 = __p;
    if (v45 == __p)
    {
LABEL_50:
      long long v45 = v35;
      operator delete(v37);
      goto LABEL_51;
    }
    while (1)
    {
      if (*((char *)v36 - 1) < 0)
      {
        operator delete(*(v36 - 3));
        if ((*((char *)v36 - 33) & 0x80000000) == 0) {
          goto LABEL_45;
        }
LABEL_48:
        operator delete(*(v36 - 7));
        v36 -= 7;
        if (v36 == v35)
        {
LABEL_49:
          uint64_t v37 = __p;
          goto LABEL_50;
        }
      }
      else
      {
        if (*((char *)v36 - 33) < 0) {
          goto LABEL_48;
        }
LABEL_45:
        v36 -= 7;
        if (v36 == v35) {
          goto LABEL_49;
        }
      }
    }
  }
LABEL_51:
  long long v38 = (void **)v46;
  if (!v46) {
    return;
  }
  uint64_t v39 = v47;
  unint64_t v40 = v46;
  if (v47 != v46)
  {
    while (1)
    {
      if (*((char *)v39 - 1) < 0)
      {
        operator delete(*(v39 - 3));
        if ((*((char *)v39 - 33) & 0x80000000) == 0) {
          goto LABEL_55;
        }
LABEL_58:
        operator delete(*(v39 - 7));
        v39 -= 7;
        if (v39 == v38)
        {
LABEL_59:
          unint64_t v40 = v46;
          break;
        }
      }
      else
      {
        if (*((char *)v39 - 33) < 0) {
          goto LABEL_58;
        }
LABEL_55:
        v39 -= 7;
        if (v39 == v38) {
          goto LABEL_59;
        }
      }
    }
  }
  long long v47 = v38;
  operator delete(v40);
}

void sub_97C1D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  unint64_t v6 = va_arg(va1, void *);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_8E4FE0((void **)va);
  sub_8E4FE0((void **)va1);
  _Unwind_Resume(a1);
}

void sub_97C1EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
}

void sub_97C208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_8E4FE0((void **)va);
  _Unwind_Resume(a1);
}

void sub_97C21C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_8E4FE0((void **)va);
  _Unwind_Resume(a1);
}

void sub_97C230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_8F36A0((void ***)va);
  _Unwind_Resume(a1);
}

void sub_97C244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_8E4FE0((void **)va);
  _Unwind_Resume(a1);
}

void sub_97C258(uint64_t *a1@<X0>, uint64_t *a2@<X1>, std::string *a3@<X8>)
{
  sub_9950FC(a2, (char *)v9);
  *(_OWORD *)char v7 = *(_OWORD *)v9;
  uint64_t v8 = v10;
  v9[0] = 0;
  v9[1] = 0;
  uint64_t v10 = 0;
  if (v12 < 0)
  {
    operator delete(__p);
    if (SHIBYTE(v10) < 0) {
      operator delete(v9[0]);
    }
  }
  sub_9950FC(a1, (char *)v9);
  *(_OWORD *)int v5 = *(_OWORD *)v9;
  uint64_t v6 = v10;
  v9[1] = 0;
  uint64_t v10 = 0;
  v9[0] = 0;
  if (v12 < 0)
  {
    operator delete(__p);
    if (SHIBYTE(v10) < 0) {
      operator delete(v9[0]);
    }
  }
  HIBYTE(v10) = 1;
  LOWORD(v9[0]) = 32;
  sub_289800((uint64_t)v9, (const void **)v7, (uint64_t)v5, a3);
  if (SHIBYTE(v10) < 0)
  {
    operator delete(v9[0]);
    if ((SHIBYTE(v6) & 0x80000000) == 0)
    {
LABEL_9:
      if ((SHIBYTE(v8) & 0x80000000) == 0) {
        return;
      }
LABEL_13:
      operator delete(v7[0]);
      return;
    }
  }
  else if ((SHIBYTE(v6) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v5[0]);
  if (SHIBYTE(v8) < 0) {
    goto LABEL_13;
  }
}

void sub_97C37C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a21 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a21 & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_97C3E0(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_9950FC(a1, (char *)v3);
  *(_OWORD *)a2 = *(_OWORD *)v3;
  *(void *)(a2 + 16) = v4;
  v3[1] = 0;
  uint64_t v4 = 0;
  v3[0] = 0;
  if (v6 < 0)
  {
    operator delete(__p);
    if (SHIBYTE(v4) < 0) {
      operator delete(v3[0]);
    }
  }
}

void sub_97C458(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  nullsub_1(&v24);
  uint64_t v8 = (int *)sub_8EF9B8(a2, a1, 0, "system");
  uint64_t v9 = (unsigned __int16 *)((char *)v8 - *v8);
  if (*v9 >= 7u && (uint64_t v10 = v9[3]) != 0) {
    int v11 = (char **)((char *)v8 + v10 + *(unsigned int *)((char *)v8 + v10));
  }
  else {
    int v11 = 0;
  }
  sub_8F48DC(v11, (void (*)(void **__return_ptr, char *))sub_4A0694, (uint64_t)&v22);
  sub_997050((uint64_t *)&v22, a3 + 968, &v25);
  sub_9950FC((uint64_t *)&v25, (char *)v27);
  *(_OWORD *)a4 = *(_OWORD *)v27;
  *(void *)(a4 + 16) = v28;
  v27[1] = 0;
  uint64_t v28 = 0;
  v27[0] = 0;
  if (v30 < 0)
  {
    operator delete(__p);
    if (SHIBYTE(v28) < 0) {
      operator delete(v27[0]);
    }
  }
  char v12 = (void **)v25;
  if (v25)
  {
    char v13 = v26;
    uint64_t v14 = v25;
    if (v26 == v25)
    {
LABEL_17:
      uint64_t v26 = v12;
      operator delete(v14);
      goto LABEL_18;
    }
    while (1)
    {
      if (*((char *)v13 - 1) < 0)
      {
        operator delete(*(v13 - 3));
        if ((*((char *)v13 - 33) & 0x80000000) == 0) {
          goto LABEL_12;
        }
LABEL_15:
        operator delete(*(v13 - 7));
        v13 -= 7;
        if (v13 == v12)
        {
LABEL_16:
          uint64_t v14 = v25;
          goto LABEL_17;
        }
      }
      else
      {
        if (*((char *)v13 - 33) < 0) {
          goto LABEL_15;
        }
LABEL_12:
        v13 -= 7;
        if (v13 == v12) {
          goto LABEL_16;
        }
      }
    }
  }
LABEL_18:
  char v15 = (void **)v22;
  if (v22)
  {
    unint64_t v16 = v23;
    uint64_t v17 = v22;
    if (v23 != v22)
    {
      do
      {
        long long v18 = (void **)*(v16 - 3);
        if (v18)
        {
          unsigned int v19 = (void **)*(v16 - 2);
          long long v20 = *(v16 - 3);
          if (v19 != v18)
          {
            do
            {
              if (*((char *)v19 - 1) < 0) {
                operator delete(*(v19 - 3));
              }
              v19 -= 4;
            }
            while (v19 != v18);
            long long v20 = *(v16 - 3);
          }
          *(v16 - 2) = v18;
          operator delete(v20);
        }
        long long v21 = v16 - 8;
        if (*((char *)v16 - 41) < 0) {
          operator delete(*v21);
        }
        v16 -= 8;
      }
      while (v21 != v15);
      uint64_t v17 = v22;
    }
    unint64_t v23 = v15;
    operator delete(v17);
  }
}

void sub_97C650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
}

void sub_97C66C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t sub_97C680(uint64_t *a1, unint64_t a2)
{
  uint64_t v2 = *a1;
  if (0xCF3CF3CF3CF3CF3DLL * ((a1[1] - *a1) >> 3) <= a2) {
    sub_66748();
  }
  unint64_t v3 = *(void *)(v2 + 168 * a2 + 104);
  if (v3 == -1) {
    goto LABEL_10;
  }
  uint64_t v4 = a1[3];
  if (0x8E38E38E38E38E39 * ((a1[4] - v4) >> 4) <= v3) {
    sub_66748();
  }
  uint64_t v5 = v4 + 144 * v3;
  if (*(unsigned char *)(v5 + 113)) {
    return *(unsigned __int8 *)(v5 + 112);
  }
  unint64_t v7 = *(void *)(v4 + 144 * v3 + 104);
  if (v7 != -1)
  {
    uint64_t v8 = a1[6];
    if (0xF0F0F0F0F0F0F0F1 * ((a1[7] - v8) >> 3) <= v7) {
      sub_66748();
    }
    uint64_t v9 = v8 + 136 * v7;
    if (*(unsigned char *)(v9 + 106)) {
      return *(unsigned __int8 *)(v9 + 105);
    }
  }
LABEL_10:
  uint64_t v10 = v2 + 168 * a2;
  if (*(unsigned char *)(v10 + 161)) {
    return *(unsigned __int8 *)(v10 + 160);
  }
  else {
    return 0;
  }
}

uint64_t sub_97C798(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 104);
  if (v2 == -1) {
    return a1 + 16;
  }
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t v4 = v3 + 144 * v2;
  uint64_t v6 = *(void *)(v4 + 16);
  uint64_t v7 = *(void *)(v4 + 24);
  uint64_t v5 = v4 + 16;
  if (v6 != v7) {
    return v5;
  }
  uint64_t v9 = *(void *)(v3 + 144 * v2 + 104);
  if (v9 == -1) {
    return a1 + 16;
  }
  uint64_t v10 = *(void *)(a2 + 48) + 136 * v9;
  uint64_t v11 = *(void *)(v10 + 16);
  uint64_t v12 = *(void *)(v10 + 24);
  uint64_t v5 = v10 + 16;
  if (v11 == v12) {
    return a1 + 16;
  }
  else {
    return v5;
  }
}

void sub_97C7FC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 104);
  if (v3 == -1) {
    goto LABEL_7;
  }
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = v4 + 144 * v3;
  uint64_t v7 = *(void *)(v5 + 16);
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v6 = (uint64_t *)(v5 + 16);
  if (v7 != v8) {
    goto LABEL_3;
  }
  uint64_t v10 = *(void *)(v4 + 144 * v3 + 104);
  if (v10 == -1
    || (uint64_t v11 = *(void *)(a2 + 48) + 136 * v10,
        uint64_t v12 = *(void *)(v11 + 16),
        uint64_t v13 = *(void *)(v11 + 24),
        uint64_t v6 = (uint64_t *)(v11 + 16),
        v12 == v13))
  {
LABEL_7:
    uint64_t v9 = (uint64_t *)(a1 + 16);
  }
  else
  {
LABEL_3:
    uint64_t v9 = v6;
  }
  sub_994EAC(v9, a3);
}

uint64_t sub_97C860()
{
  return 0;
}

uint64_t sub_97C8E8(void *a1, unint64_t a2)
{
  if (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(a1[1] - *a1) >> 3) <= a2) {
    sub_66748();
  }
  unint64_t v2 = *(void *)(*a1 + 168 * a2 + 104);
  if (v2 == -1) {
    return 0;
  }
  uint64_t v3 = a1[3];
  if (0x8E38E38E38E38E39 * ((a1[4] - v3) >> 4) <= v2) {
    sub_66748();
  }
  unint64_t v4 = *(void *)(v3 + 144 * v2 + 104);
  if (v4 == -1) {
    return 0;
  }
  uint64_t v5 = a1[6];
  if (0xF0F0F0F0F0F0F0F1 * ((a1[7] - v5) >> 3) <= v4) {
    sub_66748();
  }
  return *(unsigned __int8 *)(v5 + 136 * v4 + 104);
}

uint64_t sub_97C9C0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v1 == v2) {
    return 0;
  }
  while (*(void *)(v1 + 2000) == *(void *)(v1 + 2008) || *(_DWORD *)v1 > 8u || ((1 << *(_DWORD *)v1) & 0x144) == 0)
  {
    v1 += 5704;
    if (v1 == v2) {
      return 0;
    }
  }
  return 1;
}

uint64_t sub_97CA20(void *a1)
{
  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 0;
  }
  uint64_t v2 = *a1 + 28;
  do
  {
    BOOL v3 = *(_DWORD *)(v2 - 24) != 0x7FFFFFFF && *(unsigned char *)(v2 - 20) == 1;
    uint64_t result = v3;
    if (v3) {
      break;
    }
    BOOL v3 = v2 == v1;
    v2 += 28;
  }
  while (!v3);
  return result;
}

BOOL sub_97CA68(unint64_t a1, uint64_t a2)
{
  uint64_t v2 = (int *)sub_2A4F60(a2, a1, 0, "payment_method");
  BOOL result = 0;
  unint64_t v4 = (unsigned __int16 *)((char *)v2 - *v2);
  if (*v4 >= 9u)
  {
    uint64_t v5 = v4[4];
    if (v5 && (unsigned int v6 = *((unsigned __int8 *)v2 + v5), v6 <= 4)) {
      return (v6 & 0x1F) == 1;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t sub_97CAE0(unint64_t a1, uint64_t a2)
{
  uint64_t v2 = (int *)sub_2A4F60(a2, a1, 0, "payment_method");
  uint64_t result = 0;
  unint64_t v4 = (unsigned __int16 *)((char *)v2 - *v2);
  if (*v4 >= 9u)
  {
    uint64_t v5 = v4[4];
    if (v5 && (unsigned int v6 = *((unsigned __int8 *)v2 + v5), v6 <= 4)) {
      return (0x14u >> v6) & 1;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t sub_97CB58(unsigned int a1)
{
  return (a1 < 5) & (0x14u >> a1);
}

BOOL sub_97CB70(unint64_t a1, uint64_t a2)
{
  uint64_t v2 = (int *)sub_2A4F60(a2, a1, 0, "payment_method");
  BOOL result = 0;
  unint64_t v4 = (unsigned __int16 *)((char *)v2 - *v2);
  if (*v4 >= 9u)
  {
    uint64_t v5 = v4[4];
    if (v5 && (unsigned int v6 = *((unsigned __int8 *)v2 + v5), v6 <= 4)) {
      return (v6 & 0x1F) == 3;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t sub_97CBE8(void *a1)
{
  uint64_t v1 = sub_994B0C(&v8, a1);
  long long v6 = v8;
  uint64_t v7 = v9;
  sub_994AD8((void **)v1, v5);
  uint64_t v2 = 0;
  while (sub_994D74(&v6, v5))
  {
    uint64_t v3 = *(void *)(sub_994DB0((unint64_t *)&v6) + 1888);
    if (v3 == 0x7FFFFFFFFFFFFFFFLL) {
      uint64_t v3 = 0;
    }
    v2 += v3;
    sub_994B7C((uint64_t)&v6);
  }
  return v2;
}

int *sub_97CC7C(int *result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v11 = result;
LABEL_2:
  uint64_t v12 = v11;
  while (1)
  {
    uint64_t v11 = v12;
    uint64_t v13 = a2 - (char *)v12;
    unint64_t v14 = (a2 - (char *)v12) >> 2;
    if (v6 || !v5)
    {
      switch(v14)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          int v71 = *((_DWORD *)a2 - 1);
          int v72 = *v12;
          if (v71 < *v12)
          {
            int *v12 = v71;
            *((_DWORD *)a2 - 1) = v72;
          }
          return result;
        case 3uLL:
          int v73 = *v12;
          int v74 = v12[1];
          int v75 = *((_DWORD *)a2 - 1);
          if (v74 >= *v12)
          {
            if (v75 < v74)
            {
              v12[1] = v75;
              *((_DWORD *)a2 - 1) = v74;
              int v93 = *v12;
              int v92 = v12[1];
              if (v92 < *v12)
              {
                int *v12 = v92;
                v12[1] = v93;
              }
            }
          }
          else
          {
            if (v75 >= v74)
            {
              int *v12 = v74;
              v12[1] = v73;
              int v100 = *((_DWORD *)a2 - 1);
              if (v100 >= v73) {
                return result;
              }
              v12[1] = v100;
            }
            else
            {
              int *v12 = v75;
            }
            *((_DWORD *)a2 - 1) = v73;
          }
          return result;
        case 4uLL:
          long long v76 = v12 + 1;
          long long v77 = (int *)v12[1];
          uint64_t v78 = v12 + 2;
          int v79 = v12[2];
          uint64_t v80 = (int *)*v12;
          if ((int)v77 >= (int)v80)
          {
            if (v79 >= (int)v77)
            {
LABEL_149:
              LODWORD(v77) = v79;
              int v94 = *((_DWORD *)a2 - 1);
              if (v94 >= (int)v77) {
                return result;
              }
LABEL_150:
              *uint64_t v78 = v94;
              *((_DWORD *)a2 - 1) = v77;
              int v97 = *v78;
              int v98 = *v76;
              if (v97 < v98)
              {
                v12[1] = v97;
                v12[2] = v98;
                int v99 = *v12;
                if (v97 < *v12)
                {
                  int *v12 = v97;
                  v12[1] = v99;
                }
              }
              return result;
            }
            *long long v76 = v79;
            *uint64_t v78 = (int)v77;
            uint64_t v81 = v12;
            uint64_t v82 = v12 + 1;
            BOOL result = v77;
            if (v79 >= (int)v80)
            {
LABEL_141:
              int v94 = *((_DWORD *)a2 - 1);
              if (v94 >= (int)v77) {
                return result;
              }
              goto LABEL_150;
            }
          }
          else
          {
            uint64_t v81 = v12;
            uint64_t v82 = v12 + 2;
            BOOL result = (int *)*v12;
            if (v79 >= (int)v77)
            {
              int *v12 = (int)v77;
              v12[1] = (int)v80;
              uint64_t v81 = v12 + 1;
              uint64_t v82 = v12 + 2;
              BOOL result = v80;
              if (v79 >= (int)v80) {
                goto LABEL_149;
              }
            }
          }
          *uint64_t v81 = v79;
          *uint64_t v82 = v80;
          LODWORD(v77) = result;
          goto LABEL_141;
        case 5uLL:
          return sub_97D790(v12, v12 + 1, v12 + 2, v12 + 3, (int *)a2 - 1);
        default:
          JUMPOUT(0);
      }
    }
    if (v13 <= 95) {
      break;
    }
    if (!a4)
    {
      if (v12 != (int *)a2)
      {
        return (int *)sub_97D8CC((char *)v12, a2, a2);
      }
      return result;
    }
    unint64_t v15 = v14 >> 1;
    unint64_t v16 = &v12[v14 >> 1];
    int v17 = *((_DWORD *)a2 - 1);
    if ((unint64_t)v13 < 0x201)
    {
      int v20 = *v12;
      int v21 = *v16;
      if (*v12 < *v16)
      {
        if (v17 < v20)
        {
          *unint64_t v16 = v17;
          goto LABEL_32;
        }
        *unint64_t v16 = v20;
        int *v12 = v21;
        int v33 = *((_DWORD *)a2 - 1);
        if (v33 < v21)
        {
          int *v12 = v33;
LABEL_32:
          *((_DWORD *)a2 - 1) = v21;
        }
LABEL_33:
        --a4;
        int v24 = *v12;
        if (a5) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      if (v17 >= v20) {
        goto LABEL_33;
      }
      int *v12 = v17;
      *((_DWORD *)a2 - 1) = v20;
      int v23 = *v16;
      if (*v12 >= *v16) {
        goto LABEL_33;
      }
      *unint64_t v16 = *v12;
      int *v12 = v23;
      --a4;
      int v24 = v23;
      if (a5) {
        goto LABEL_57;
      }
LABEL_56:
      if (*(v12 - 1) < v24) {
        goto LABEL_57;
      }
      if (v24 < *((_DWORD *)a2 - 1))
      {
        do
        {
          int v62 = v12[1];
          ++v12;
        }
        while (v24 >= v62);
      }
      else
      {
        char v63 = v12 + 1;
        do
        {
          uint64_t v12 = v63;
          if (v63 >= (int *)a2) {
            break;
          }
          ++v63;
        }
        while (v24 >= *v12);
      }
      uint64_t v64 = (int *)a2;
      if (v12 < (int *)a2)
      {
        uint64_t v64 = (int *)a2;
        do
          int v65 = *--v64;
        while (v24 < v65);
      }
      if (v12 < v64)
      {
        int v66 = *v12;
        int v67 = *v64;
        do
        {
          int *v12 = v67;
          int *v64 = v66;
          do
          {
            int v68 = v12[1];
            ++v12;
            int v66 = v68;
          }
          while (v24 >= v68);
          do
          {
            int v69 = *--v64;
            int v67 = v69;
          }
          while (v24 < v69);
        }
        while (v12 < v64);
      }
      long long v70 = v12 - 1;
      BOOL v5 = v12 - 1 >= v11;
      BOOL v6 = v12 - 1 == v11;
      if (v12 - 1 != v11) {
        *uint64_t v11 = *v70;
      }
      a5 = 0;
      int *v70 = v24;
    }
    else
    {
      int v18 = *v16;
      int v19 = *v12;
      if (*v16 >= *v12)
      {
        if (v17 < v18)
        {
          *unint64_t v16 = v17;
          *((_DWORD *)a2 - 1) = v18;
          int v22 = *v12;
          if (*v16 < *v12)
          {
            int *v12 = *v16;
            *unint64_t v16 = v22;
          }
        }
      }
      else
      {
        if (v17 >= v18)
        {
          int *v12 = v18;
          *unint64_t v16 = v19;
          int v25 = *((_DWORD *)a2 - 1);
          if (v25 >= v19) {
            goto LABEL_24;
          }
          *unint64_t v16 = v25;
        }
        else
        {
          int *v12 = v17;
        }
        *((_DWORD *)a2 - 1) = v19;
      }
LABEL_24:
      uint64_t v26 = &v12[v15];
      int v29 = *(v26 - 1);
      unint64_t v27 = v26 - 1;
      int v28 = v29;
      int v30 = v12[1];
      int v31 = *((_DWORD *)a2 - 2);
      if (v29 >= v30)
      {
        if (v31 < v28)
        {
          *unint64_t v27 = v31;
          *((_DWORD *)a2 - 2) = v28;
          int v32 = v12[1];
          if (*v27 < v32)
          {
            v12[1] = *v27;
            *unint64_t v27 = v32;
          }
        }
      }
      else
      {
        if (v31 >= v28)
        {
          v12[1] = v28;
          *unint64_t v27 = v30;
          int v34 = *((_DWORD *)a2 - 2);
          if (v34 >= v30) {
            goto LABEL_38;
          }
          *unint64_t v27 = v34;
        }
        else
        {
          v12[1] = v31;
        }
        *((_DWORD *)a2 - 2) = v30;
      }
LABEL_38:
      unint64_t v35 = &v12[v15];
      int v38 = v35[1];
      char v36 = v35 + 1;
      int v37 = v38;
      int v39 = v12[2];
      int v40 = *((_DWORD *)a2 - 3);
      if (v38 >= v39)
      {
        if (v40 < v37)
        {
          *char v36 = v40;
          *((_DWORD *)a2 - 3) = v37;
          int v41 = v12[2];
          if (*v36 < v41)
          {
            v12[2] = *v36;
            *char v36 = v41;
          }
        }
      }
      else
      {
        if (v40 >= v37)
        {
          v12[2] = v37;
          *char v36 = v39;
          int v42 = *((_DWORD *)a2 - 3);
          if (v42 >= v39) {
            goto LABEL_47;
          }
          *char v36 = v42;
        }
        else
        {
          v12[2] = v40;
        }
        *((_DWORD *)a2 - 3) = v39;
      }
LABEL_47:
      int v43 = *v16;
      int v44 = *v27;
      int v45 = *v36;
      if (*v16 >= *v27)
      {
        if (v45 >= v43) {
          goto LABEL_55;
        }
        *unint64_t v16 = v45;
        *char v36 = v43;
        char v36 = &v12[v14 >> 1];
        int v43 = v44;
        if (v45 < v44)
        {
LABEL_54:
          *unint64_t v27 = v45;
          *char v36 = v44;
LABEL_55:
          int v47 = *v12;
          int *v12 = v43;
          *unint64_t v16 = v47;
          --a4;
          int v24 = *v12;
          if ((a5 & 1) == 0) {
            goto LABEL_56;
          }
          goto LABEL_57;
        }
        int v61 = *v12;
        int *v12 = v45;
        *unint64_t v16 = v61;
        --a4;
        int v24 = *v12;
        if (a5) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      if (v45 < v43) {
        goto LABEL_54;
      }
      *unint64_t v27 = v43;
      *unint64_t v16 = v44;
      unint64_t v27 = &v12[v14 >> 1];
      int v43 = v45;
      if (v45 < v44) {
        goto LABEL_54;
      }
      int v46 = *v12;
      int *v12 = v44;
      *unint64_t v16 = v46;
      --a4;
      int v24 = *v12;
      if ((a5 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_57:
      uint64_t v48 = 0;
      do
        int v49 = v12[++v48];
      while (v49 < v24);
      int64_t v50 = &v12[v48];
      uint64_t v51 = a2;
      if (v48 == 1)
      {
        uint64_t v51 = a2;
        do
        {
          if (v50 >= (int *)v51) {
            break;
          }
          int v53 = *((_DWORD *)v51 - 1);
          v51 -= 4;
        }
        while (v53 >= v24);
      }
      else
      {
        do
        {
          int v52 = *((_DWORD *)v51 - 1);
          v51 -= 4;
        }
        while (v52 >= v24);
      }
      if (v50 >= (int *)v51)
      {
        uint64_t v59 = v50 - 1;
        if (v50 - 1 == v12) {
          goto LABEL_75;
        }
LABEL_74:
        int *v12 = *v59;
        goto LABEL_75;
      }
      int v54 = *(_DWORD *)v51;
      unint64_t v55 = &v12[v48];
      uint64_t v56 = (int *)v51;
      do
      {
        *unint64_t v55 = v54;
        *uint64_t v56 = v49;
        do
        {
          int v57 = v55[1];
          ++v55;
          int v49 = v57;
        }
        while (v57 < v24);
        do
        {
          int v58 = *--v56;
          int v54 = v58;
        }
        while (v58 >= v24);
      }
      while (v55 < v56);
      uint64_t v59 = v55 - 1;
      if (v55 - 1 != v12) {
        goto LABEL_74;
      }
LABEL_75:
      int *v59 = v24;
      if (v50 < (int *)v51) {
        goto LABEL_78;
      }
      BOOL v60 = sub_97D464(v12, v59);
      uint64_t v12 = v59 + 1;
      BOOL result = (int *)sub_97D464(v59 + 1, (int *)a2);
      if (result)
      {
        a2 = (char *)v59;
        if (v60) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v60)
      {
LABEL_78:
        BOOL result = (int *)sub_97CC7C(v11, v59, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t v12 = v59 + 1;
      }
    }
  }
  uint64_t v83 = (char *)(v12 + 1);
  BOOL v85 = v12 == (int *)a2 || v83 == a2;
  if (a5)
  {
    if (!v85)
    {
      uint64_t v86 = 0;
      char v87 = v12;
      do
      {
        int v90 = *v87;
        int v89 = v87[1];
        char v87 = (int *)v83;
        if (v89 < v90)
        {
          uint64_t v91 = v86;
          do
          {
            *(int *)((char *)v12 + v91 + 4) = v90;
            if (!v91)
            {
              uint64_t v88 = v12;
              goto LABEL_124;
            }
            int v90 = *(int *)((char *)v12 + v91 - 4);
            v91 -= 4;
          }
          while (v89 < v90);
          uint64_t v88 = (int *)((char *)v12 + v91 + 4);
LABEL_124:
          *uint64_t v88 = v89;
        }
        uint64_t v83 = (char *)(v87 + 1);
        v86 += 4;
      }
      while (v87 + 1 != (int *)a2);
    }
  }
  else if (!v85)
  {
    do
    {
      int v96 = *v11;
      int v95 = v11[1];
      uint64_t v11 = (int *)v83;
      if (v95 < v96)
      {
        do
        {
          *(_DWORD *)uint64_t v83 = v96;
          int v96 = *((_DWORD *)v83 - 2);
          v83 -= 4;
        }
        while (v95 < v96);
        *(_DWORD *)uint64_t v83 = v95;
      }
      uint64_t v83 = (char *)(v11 + 1);
    }
    while (v11 + 1 != (int *)a2);
  }
  return result;
}

BOOL sub_97D464(int *a1, int *a2)
{
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      int v9 = *(a2 - 1);
      int v10 = *a1;
      if (v9 >= *a1) {
        return 1;
      }
      *a1 = v9;
      *(a2 - 1) = v10;
      return 1;
    case 3:
      int v11 = *a1;
      int v12 = a1[1];
      int v13 = *(a2 - 1);
      if (v12 >= *a1)
      {
        if (v13 >= v12) {
          return 1;
        }
        a1[1] = v13;
        *(a2 - 1) = v12;
        int v30 = *a1;
        int v29 = a1[1];
        if (v29 >= *a1) {
          return 1;
        }
        *a1 = v29;
        a1[1] = v30;
        return 1;
      }
      else if (v13 >= v12)
      {
        *a1 = v12;
        a1[1] = v11;
        int v35 = *(a2 - 1);
        if (v35 >= v11) {
          return 1;
        }
        a1[1] = v35;
        *(a2 - 1) = v11;
        return 1;
      }
      else
      {
        *a1 = v13;
        *(a2 - 1) = v11;
        return 1;
      }
    case 4:
      unint64_t v14 = a1 + 1;
      int v15 = a1[1];
      unint64_t v16 = a1 + 2;
      int v17 = a1[2];
      int v18 = *a1;
      if (v15 < *a1)
      {
        int v19 = a1;
        int v20 = a1 + 2;
        int v21 = *a1;
        if (v17 >= v15)
        {
          *a1 = v15;
          a1[1] = v18;
          int v19 = a1 + 1;
          int v20 = a1 + 2;
          int v21 = v18;
          if (v17 >= v18) {
            goto LABEL_38;
          }
        }
LABEL_35:
        int *v19 = v17;
        *int v20 = v18;
        int v15 = v21;
LABEL_36:
        int v31 = *(a2 - 1);
        if (v31 >= v15) {
          return 1;
        }
        goto LABEL_39;
      }
      if (v17 < v15)
      {
        int *v14 = v17;
        *unint64_t v16 = v15;
        int v19 = a1;
        int v20 = a1 + 1;
        int v21 = v15;
        if (v17 >= v18) {
          goto LABEL_36;
        }
        goto LABEL_35;
      }
LABEL_38:
      int v15 = v17;
      int v31 = *(a2 - 1);
      if (v31 >= v15) {
        return 1;
      }
LABEL_39:
      *unint64_t v16 = v31;
      *(a2 - 1) = v15;
      int v32 = *v16;
      int v33 = *v14;
      if (v32 >= v33) {
        return 1;
      }
      a1[1] = v32;
      a1[2] = v33;
      int v34 = *a1;
      if (v32 >= *a1) {
        return 1;
      }
      *a1 = v32;
      a1[1] = v34;
      return 1;
    case 5:
      sub_97D790(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      unint64_t v4 = a1 + 2;
      int v3 = a1[2];
      int v5 = a1[1];
      int v6 = *a1;
      if (v5 >= *a1)
      {
        if (v3 >= v5) {
          goto LABEL_20;
        }
        a1[1] = v3;
        *unint64_t v4 = v5;
        uint64_t v7 = a1;
        long long v8 = a1 + 1;
      }
      else
      {
        uint64_t v7 = a1;
        long long v8 = a1 + 2;
        if (v3 < v5) {
          goto LABEL_19;
        }
        *a1 = v5;
        a1[1] = v6;
        uint64_t v7 = a1 + 1;
        long long v8 = a1 + 2;
      }
      if (v3 >= v6) {
        goto LABEL_20;
      }
LABEL_19:
      *uint64_t v7 = v3;
      int *v8 = v6;
LABEL_20:
      int v22 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v23 = 0;
      for (uint64_t i = 12; ; i += 4)
      {
        int v25 = *v22;
        int v26 = *v4;
        if (*v22 < v26) {
          break;
        }
LABEL_23:
        unint64_t v4 = v22++;
        if (v22 == a2) {
          return 1;
        }
      }
      uint64_t v27 = i;
      do
      {
        *(int *)((char *)a1 + v27) = v26;
        uint64_t v28 = v27 - 4;
        if (v27 == 4)
        {
          *a1 = v25;
          if (++v23 != 8) {
            goto LABEL_23;
          }
          return v22 + 1 == a2;
        }
        int v26 = *(int *)((char *)a1 + v27 - 8);
        v27 -= 4;
      }
      while (v25 < v26);
      *(int *)((char *)a1 + v28) = v25;
      if (++v23 != 8) {
        goto LABEL_23;
      }
      return v22 + 1 == a2;
  }
}

int *sub_97D790(int *result, int *a2, int *a3, int *a4, int *a5)
{
  int v5 = *a2;
  int v6 = *result;
  int v7 = *a3;
  if (*a2 >= *result)
  {
    if (v7 >= v5)
    {
      int v5 = *a3;
      int v9 = *a4;
      if (*a4 >= v7) {
        goto LABEL_17;
      }
      goto LABEL_14;
    }
    *a2 = v7;
    *a3 = v5;
    int v8 = *result;
    if (*a2 < *result)
    {
      void *result = *a2;
      *a2 = v8;
      int v5 = *a3;
      int v9 = *a4;
      if (*a4 >= *a3) {
        goto LABEL_17;
      }
      goto LABEL_14;
    }
  }
  else
  {
    if (v7 >= v5)
    {
      void *result = v5;
      *a2 = v6;
      int v5 = *a3;
      if (*a3 >= v6) {
        goto LABEL_11;
      }
      *a2 = v5;
    }
    else
    {
      void *result = v7;
    }
    *a3 = v6;
    int v5 = v6;
  }
LABEL_11:
  int v9 = *a4;
  if (*a4 >= v5) {
    goto LABEL_17;
  }
LABEL_14:
  *a3 = v9;
  *a4 = v5;
  int v10 = *a2;
  if (*a3 < *a2)
  {
    *a2 = *a3;
    *a3 = v10;
    int v11 = *result;
    if (*a2 < *result)
    {
      void *result = *a2;
      *a2 = v11;
    }
  }
LABEL_17:
  int v12 = *a4;
  if (*a5 < *a4)
  {
    *a4 = *a5;
    *a5 = v12;
    int v13 = *a3;
    if (*a4 < *a3)
    {
      *a3 = *a4;
      *a4 = v13;
      int v14 = *a2;
      if (*a3 < *a2)
      {
        *a2 = *a3;
        *a3 = v14;
        int v15 = *result;
        if (*a2 < *result)
        {
          void *result = *a2;
          *a2 = v15;
        }
      }
    }
  }
  return result;
}

char *sub_97D8CC(char *a1, char *a2, char *a3)
{
  if (a1 == a2) {
    return a3;
  }
  uint64_t v3 = a2 - a1;
  uint64_t v4 = (a2 - a1) >> 2;
  if (a2 - a1 >= 5 && (unint64_t)v3 >= 8)
  {
    int64_t v34 = (unint64_t)(v4 - 2) >> 1;
    int64_t v35 = v34;
    do
    {
      if (v34 >= v35)
      {
        uint64_t v36 = (2 * v35) | 1;
        int v37 = &a1[4 * v36];
        if (2 * v35 + 2 >= v4)
        {
          int v38 = *(_DWORD *)v37;
          int v40 = &a1[4 * v35];
          int v41 = *(_DWORD *)v40;
          if (*(_DWORD *)v37 >= *(_DWORD *)v40) {
            goto LABEL_78;
          }
        }
        else
        {
          int v38 = *((_DWORD *)v37 + 1);
          BOOL v39 = *(_DWORD *)v37 < v38;
          if (*(_DWORD *)v37 > v38) {
            int v38 = *(_DWORD *)v37;
          }
          if (v39)
          {
            v37 += 4;
            uint64_t v36 = 2 * v35 + 2;
          }
          int v40 = &a1[4 * v35];
          int v41 = *(_DWORD *)v40;
          if (v38 >= *(_DWORD *)v40)
          {
LABEL_78:
            while (1)
            {
              *(_DWORD *)int v40 = v38;
              int v40 = v37;
              if (v34 < v36) {
                break;
              }
              uint64_t v43 = (2 * v36) | 1;
              int v37 = &a1[4 * v43];
              uint64_t v36 = 2 * v36 + 2;
              if (v36 < v4)
              {
                int v38 = *(_DWORD *)v37;
                int v42 = *((_DWORD *)v37 + 1);
                if (*(_DWORD *)v37 <= v42) {
                  int v38 = *((_DWORD *)v37 + 1);
                }
                if (*(_DWORD *)v37 >= v42) {
                  uint64_t v36 = v43;
                }
                else {
                  v37 += 4;
                }
                if (v38 < v41) {
                  break;
                }
              }
              else
              {
                int v38 = *(_DWORD *)v37;
                uint64_t v36 = v43;
                if (*(_DWORD *)v37 < v41) {
                  break;
                }
              }
            }
            *(_DWORD *)int v40 = v41;
          }
        }
      }
      BOOL v15 = v35-- <= 0;
    }
    while (!v15);
  }
  int v5 = a2;
  if (a2 != a3)
  {
    if (v3 < 8)
    {
      int v6 = *(_DWORD *)a1;
      int v7 = a2;
      do
      {
        int v8 = *(_DWORD *)v7;
        if (*(_DWORD *)v7 < v6)
        {
          *(_DWORD *)int v7 = v6;
          *(_DWORD *)a1 = v8;
          int v6 = v8;
        }
        v7 += 4;
      }
      while (v7 != a3);
LABEL_37:
      int v5 = a3;
      goto LABEL_38;
    }
    int v9 = a2;
    while (1)
    {
      int v10 = *(_DWORD *)v9;
      if (*(_DWORD *)v9 < *(_DWORD *)a1)
      {
        *(_DWORD *)int v9 = *(_DWORD *)a1;
        *(_DWORD *)a1 = v10;
        int v11 = *((_DWORD *)a1 + 1);
        if (v3 == 8)
        {
          int v12 = a1 + 4;
          uint64_t v13 = 1;
          if (v11 >= v10) {
            goto LABEL_26;
          }
        }
        else
        {
          int v14 = *((_DWORD *)a1 + 2);
          BOOL v15 = v11 < v14;
          if (v11 <= v14) {
            int v11 = *((_DWORD *)a1 + 2);
          }
          if (v15) {
            int v12 = a1 + 8;
          }
          else {
            int v12 = a1 + 4;
          }
          if (v15) {
            uint64_t v13 = 2;
          }
          else {
            uint64_t v13 = 1;
          }
          if (v11 >= v10)
          {
LABEL_26:
            unint64_t v16 = a1;
            while (1)
            {
              *(_DWORD *)unint64_t v16 = v11;
              unint64_t v16 = v12;
              if ((uint64_t)((unint64_t)(v4 - 2) >> 1) < v13) {
                break;
              }
              uint64_t v18 = (2 * v13) | 1;
              int v12 = &a1[4 * v18];
              uint64_t v13 = 2 * v13 + 2;
              if (v13 < v4)
              {
                int v11 = *(_DWORD *)v12;
                int v17 = *((_DWORD *)v12 + 1);
                if (*(_DWORD *)v12 <= v17) {
                  int v11 = *((_DWORD *)v12 + 1);
                }
                if (*(_DWORD *)v12 >= v17) {
                  uint64_t v13 = v18;
                }
                else {
                  v12 += 4;
                }
                if (v11 < v10) {
                  break;
                }
              }
              else
              {
                int v11 = *(_DWORD *)v12;
                uint64_t v13 = v18;
                if (*(_DWORD *)v12 < v10) {
                  break;
                }
              }
            }
            *(_DWORD *)unint64_t v16 = v10;
          }
        }
      }
      v9 += 4;
      if (v9 == a3) {
        goto LABEL_37;
      }
    }
  }
LABEL_38:
  if (v3 >= 5)
  {
    uint64_t v19 = (unint64_t)v3 >> 2;
    do
    {
      uint64_t v20 = 0;
      int v21 = *(_DWORD *)a1;
      int64_t v22 = (unint64_t)(v19 - 2) >> 1;
      int v23 = a1;
      do
      {
        while (1)
        {
          int v26 = &v23[4 * v20 + 4];
          uint64_t v27 = (2 * v20) | 1;
          uint64_t v20 = 2 * v20 + 2;
          if (v20 < v19) {
            break;
          }
          uint64_t v20 = v27;
          *(_DWORD *)int v23 = *(_DWORD *)v26;
          int v23 = v26;
          if (v27 > v22) {
            goto LABEL_51;
          }
        }
        int v24 = *(_DWORD *)v26;
        int v25 = *((_DWORD *)v26 + 1);
        if (*(_DWORD *)v26 <= v25) {
          int v24 = *((_DWORD *)v26 + 1);
        }
        if (*(_DWORD *)v26 >= v25) {
          uint64_t v20 = v27;
        }
        else {
          v26 += 4;
        }
        *(_DWORD *)int v23 = v24;
        int v23 = v26;
      }
      while (v20 <= v22);
LABEL_51:
      a2 -= 4;
      if (v26 == a2)
      {
        *(_DWORD *)int v26 = v21;
      }
      else
      {
        *(_DWORD *)int v26 = *(_DWORD *)a2;
        *(_DWORD *)a2 = v21;
        uint64_t v28 = v26 - a1 + 4;
        if (v28 >= 5)
        {
          unint64_t v29 = (((unint64_t)v28 >> 2) - 2) >> 1;
          int v30 = &a1[4 * v29];
          int v31 = *(_DWORD *)v30;
          int v32 = *(_DWORD *)v26;
          if (*(_DWORD *)v30 < *(_DWORD *)v26)
          {
            do
            {
              *(_DWORD *)int v26 = v31;
              int v26 = v30;
              if (!v29) {
                break;
              }
              unint64_t v29 = (v29 - 1) >> 1;
              int v30 = &a1[4 * v29];
              int v31 = *(_DWORD *)v30;
            }
            while (*(_DWORD *)v30 < v32);
            *(_DWORD *)int v26 = v32;
          }
        }
      }
      BOOL v15 = v19-- <= 2;
    }
    while (!v15);
  }
  return v5;
}

double sub_97DC38()
{
  byte_25DAEDF = 1;
  word_25DAEC8 = 65;
  byte_25DAEF7 = 1;
  word_25DAEE0 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25DAF88 = 0u;
  *(_OWORD *)&qword_25DAF98 = 0u;
  dword_25DAFA8 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25DAF88, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25DAF88, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25DAF88, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25DAF88, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25DAF0F = 8;
  strcpy((char *)&qword_25DAEF8, "any_mode");
  byte_25DAF27 = 7;
  strcpy((char *)&dword_25DAF10, "cycling");
  byte_25DAF3F = 7;
  strcpy((char *)&dword_25DAF28, "driving");
  byte_25DAF57 = 7;
  strcpy((char *)&dword_25DAF40, "walking");
  qword_25DAF60 = 0;
  qword_25DAF68 = 0;
  qword_25DAF58 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25DAF58 = (uint64_t)v0;
  qword_25DAF60 = (uint64_t)(v0 + 9);
  qword_25DAF68 = (uint64_t)(v0 + 9);
  qword_25DAF70 = 0;
  qword_25DAF78 = 0;
  unk_25DAF80 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25DAF78 = (uint64_t)(v1 + 9);
  unk_25DAF80 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25DAF70 = (uint64_t)v1;
  return result;
}

void sub_97DF00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25DAF98) {
    sub_20ACD7C((void **)qword_25DAF98);
  }
  int v37 = (void *)xmmword_25DAF88;
  *(void *)&xmmword_25DAF88 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

BOOL *sub_97DFA0(BOOL *a1, uint64_t a2)
{
  uint64_t v12 = 0;
  char v13 = operator new(0x20uLL);
  long long v14 = xmmword_20B5EB0;
  strcpy((char *)v13, "TransitGuidanceTimeShifter");
  char v10 = 0;
  int v11 = 0;
  char v4 = sub_374CDC(a2, (uint64_t)&v13, (uint64_t *)&v10);
  char v16 = 7;
  strcpy((char *)__p, "enabled");
  BOOL v5 = sub_29D62C(v4, (uint64_t)__p);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  *a1 = v5;
  int v6 = (void **)v10;
  if (v10)
  {
    char v7 = v11;
    int v8 = v10;
    if (v11 != v10)
    {
      do
      {
        if (*((char *)v7 - 1) < 0) {
          operator delete(*(v7 - 3));
        }
        v7 -= 3;
      }
      while (v7 != v6);
      int v8 = v10;
    }
    int v11 = v6;
    operator delete(v8);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(v13);
  }
  return a1;
}

void sub_97E0D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
  {
    operator delete(__p);
    sub_1A668(&a10);
    if ((a18 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    sub_1A668(&a10);
    if ((a18 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  operator delete(a13);
  _Unwind_Resume(a1);
}

void sub_97E13C(unsigned char *a1, uint64_t a2)
{
  if (*a1)
  {
    if (*(_DWORD *)(a2 + 300))
    {
      uint64_t v3 = *(void *)a2;
      uint64_t v4 = *(void *)(a2 + 8);
      if (*(void *)a2 != v4)
      {
        do
        {
          sub_97E1A0((uint64_t)a1, v3, *(_DWORD *)(a2 + 300));
          v3 += 3120;
        }
        while (v3 != v4);
      }
    }
  }
}

void sub_97E1A0(uint64_t a1, uint64_t a2, int a3)
{
  int v3 = *(_DWORD *)(a2 + 36);
  if (v3 == 0x7FFFFFFF)
  {
    int v4 = *(_DWORD *)(a2 + 40);
    if (v4 == 0x7FFFFFFF) {
      goto LABEL_3;
    }
  }
  else
  {
    if (a3 < 0) {
      char v9 = -5;
    }
    else {
      char v9 = 5;
    }
    *(_DWORD *)(a2 + 36) = a3 / -10
                         + v3
                         + (((-103 * (char)(v9 + a3 % 10)) >> 15) & 1)
                         + ((-103 * (char)(v9 + a3 % 10)) >> 10);
    int v4 = *(_DWORD *)(a2 + 40);
    if (v4 == 0x7FFFFFFF)
    {
LABEL_3:
      int v5 = *(_DWORD *)(a2 + 24);
      if (v5 == 0x7FFFFFFF) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  if (a3 < 0) {
    char v10 = -5;
  }
  else {
    char v10 = 5;
  }
  *(_DWORD *)(a2 + 40) = a3 / -10
                       + v4
                       + (((-103 * (char)(v10 + a3 % 10)) >> 15) & 1)
                       + ((-103 * (char)(v10 + a3 % 10)) >> 10);
  int v5 = *(_DWORD *)(a2 + 24);
  if (v5 == 0x7FFFFFFF)
  {
LABEL_4:
    int v6 = *(_DWORD *)(a2 + 28);
    if (v6 == 0x7FFFFFFF) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_15:
  if (a3 < 0) {
    char v11 = -5;
  }
  else {
    char v11 = 5;
  }
  *(_DWORD *)(a2 + 24) = a3 / -10
                       + v5
                       + (((-103 * (char)(v11 + a3 % 10)) >> 15) & 1)
                       + ((-103 * (char)(v11 + a3 % 10)) >> 10);
  int v6 = *(_DWORD *)(a2 + 28);
  if (v6 == 0x7FFFFFFF)
  {
LABEL_5:
    char v7 = *(_DWORD **)(a2 + 1056);
    int v8 = *(_DWORD **)(a2 + 1064);
    if (v7 == v8) {
      goto LABEL_33;
    }
    goto LABEL_23;
  }
LABEL_19:
  if (a3 < 0) {
    char v12 = -5;
  }
  else {
    char v12 = 5;
  }
  *(_DWORD *)(a2 + 28) = a3 / -10
                       + v6
                       + (((-103 * (char)(v12 + a3 % 10)) >> 15) & 1)
                       + ((-103 * (char)(v12 + a3 % 10)) >> 10);
  char v7 = *(_DWORD **)(a2 + 1056);
  int v8 = *(_DWORD **)(a2 + 1064);
  if (v7 != v8)
  {
LABEL_23:
    if (a3 < 0) {
      char v13 = -5;
    }
    else {
      char v13 = 5;
    }
    unsigned int v14 = a3 / -10 + (((-103 * (char)(v13 + a3 % 10)) >> 15) & 1) + ((-103 * (char)(v13 + a3 % 10)) >> 10);
    do
    {
      if (*v7 == 0x7FFFFFFF)
      {
        int v15 = v7[1];
        if (v15 != 0x7FFFFFFF) {
          goto LABEL_32;
        }
      }
      else
      {
        *v7 += v14;
        int v15 = v7[1];
        if (v15 != 0x7FFFFFFF) {
LABEL_32:
        }
          v7[1] = v15 + v14;
      }
      v7 += 3;
    }
    while (v7 != v8);
  }
LABEL_33:
  char v16 = *(_DWORD **)(a2 + 1080);
  int v17 = *(_DWORD **)(a2 + 1088);
  if (v16 != v17)
  {
    if (a3 < 0) {
      char v18 = -5;
    }
    else {
      char v18 = 5;
    }
    unsigned int v19 = a3 / -10 + (((-103 * (char)(v18 + a3 % 10)) >> 15) & 1) + ((-103 * (char)(v18 + a3 % 10)) >> 10);
    do
    {
      if (*v16 == 0x7FFFFFFF)
      {
        int v20 = v16[1];
        if (v20 != 0x7FFFFFFF) {
          goto LABEL_43;
        }
      }
      else
      {
        *v16 += v19;
        int v20 = v16[1];
        if (v20 != 0x7FFFFFFF) {
LABEL_43:
        }
          v16[1] = v20 + v19;
      }
      v16 += 3;
    }
    while (v16 != v17);
  }
  int v21 = *(uint64_t **)a2;
  int64_t v22 = *(uint64_t **)(a2 + 8);
  if (*(uint64_t **)a2 != v22)
  {
    do
    {
      uint64_t v24 = *v21;
      uint64_t v25 = v21[1];
      while (v24 != v25)
      {
        uint64_t v26 = *(void *)(v24 + 8);
        for (uint64_t i = *(void *)(v24 + 16); v26 != i; v26 += 5704)
          sub_97E5C8(a1, v26, a3);
        v24 += 104;
      }
      v21 += 4;
    }
    while (v21 != v22);
  }
}

void sub_97E5C8(uint64_t a1, uint64_t a2, int a3)
{
  int v3 = *(_DWORD *)(a2 + 40);
  if (v3 != 0x7FFFFFFF)
  {
    if (a3 < 0) {
      char v4 = -5;
    }
    else {
      char v4 = 5;
    }
    *(_DWORD *)(a2 + 40) = a3 / -10
                         + v3
                         + (((-103 * (char)(v4 + a3 % 10)) >> 15) & 1)
                         + ((-103 * (char)(v4 + a3 % 10)) >> 10);
  }
  if (!*(unsigned char *)(a2 + 792)) {
    return;
  }
  int v5 = *(_DWORD *)(a2 + 116);
  if (v5 == 0x7FFFFFFF)
  {
    int v6 = *(_DWORD *)(a2 + 120);
    if (v6 == 0x7FFFFFFF) {
      goto LABEL_9;
    }
  }
  else
  {
    if (a3 < 0) {
      char v12 = -5;
    }
    else {
      char v12 = 5;
    }
    *(_DWORD *)(a2 + 116) = a3 / -10
                          + v5
                          + (((-103 * (char)(v12 + a3 % 10)) >> 15) & 1)
                          + ((-103 * (char)(v12 + a3 % 10)) >> 10);
    int v6 = *(_DWORD *)(a2 + 120);
    if (v6 == 0x7FFFFFFF)
    {
LABEL_9:
      int v7 = *(_DWORD *)(a2 + 88);
      if (v7 == 0x7FFFFFFF) {
        goto LABEL_10;
      }
      goto LABEL_22;
    }
  }
  if (a3 < 0) {
    char v13 = -5;
  }
  else {
    char v13 = 5;
  }
  *(_DWORD *)(a2 + 120) = a3 / -10
                        + v6
                        + (((-103 * (char)(v13 + a3 % 10)) >> 15) & 1)
                        + ((-103 * (char)(v13 + a3 % 10)) >> 10);
  int v7 = *(_DWORD *)(a2 + 88);
  if (v7 == 0x7FFFFFFF)
  {
LABEL_10:
    int v8 = *(_DWORD *)(a2 + 92);
    if (v8 == 0x7FFFFFFF) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }
LABEL_22:
  if (a3 < 0) {
    char v14 = -5;
  }
  else {
    char v14 = 5;
  }
  *(_DWORD *)(a2 + 88) = a3 / -10
                       + v7
                       + (((-103 * (char)(v14 + a3 % 10)) >> 15) & 1)
                       + ((-103 * (char)(v14 + a3 % 10)) >> 10);
  int v8 = *(_DWORD *)(a2 + 92);
  if (v8 == 0x7FFFFFFF)
  {
LABEL_11:
    int v9 = *(_DWORD *)(a2 + 152);
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_12;
    }
    goto LABEL_30;
  }
LABEL_26:
  if (a3 < 0) {
    char v15 = -5;
  }
  else {
    char v15 = 5;
  }
  *(_DWORD *)(a2 + 92) = a3 / -10
                       + v8
                       + (((-103 * (char)(v15 + a3 % 10)) >> 15) & 1)
                       + ((-103 * (char)(v15 + a3 % 10)) >> 10);
  int v9 = *(_DWORD *)(a2 + 152);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_12:
    char v10 = *(_DWORD **)(a2 + 440);
    char v11 = *(_DWORD **)(a2 + 448);
    if (v10 == v11) {
      goto LABEL_44;
    }
    goto LABEL_34;
  }
LABEL_30:
  if (a3 < 0) {
    char v16 = -5;
  }
  else {
    char v16 = 5;
  }
  *(_DWORD *)(a2 + 152) = a3 / -10
                        + v9
                        + (((-103 * (char)(v16 + a3 % 10)) >> 15) & 1)
                        + ((-103 * (char)(v16 + a3 % 10)) >> 10);
  char v10 = *(_DWORD **)(a2 + 440);
  char v11 = *(_DWORD **)(a2 + 448);
  if (v10 != v11)
  {
LABEL_34:
    if (a3 < 0) {
      char v17 = -5;
    }
    else {
      char v17 = 5;
    }
    unsigned int v18 = a3 / -10 + (((-103 * (char)(v17 + a3 % 10)) >> 15) & 1) + ((-103 * (char)(v17 + a3 % 10)) >> 10);
    do
    {
      if (*v10 == 0x7FFFFFFF)
      {
        int v19 = v10[1];
        if (v19 != 0x7FFFFFFF) {
          goto LABEL_43;
        }
      }
      else
      {
        *v10 += v18;
        int v19 = v10[1];
        if (v19 != 0x7FFFFFFF) {
LABEL_43:
        }
          v10[1] = v19 + v18;
      }
      v10 += 7;
    }
    while (v10 != v11);
  }
LABEL_44:
  int v20 = *(_DWORD **)(a2 + 464);
  int v21 = *(_DWORD **)(a2 + 472);
  if (v20 != v21)
  {
    if (a3 < 0) {
      char v22 = -5;
    }
    else {
      char v22 = 5;
    }
    unsigned int v23 = a3 / -10 + (((-103 * (char)(v22 + a3 % 10)) >> 15) & 1) + ((-103 * (char)(v22 + a3 % 10)) >> 10);
    do
    {
      if (*v20 == 0x7FFFFFFF)
      {
        int v24 = v20[1];
        if (v24 != 0x7FFFFFFF) {
          goto LABEL_54;
        }
      }
      else
      {
        *v20 += v23;
        int v24 = v20[1];
        if (v24 != 0x7FFFFFFF) {
LABEL_54:
        }
          v20[1] = v24 + v23;
      }
      v20 += 7;
    }
    while (v20 != v21);
  }
  uint64_t v25 = *(_DWORD **)(a2 + 488);
  uint64_t v26 = *(_DWORD **)(a2 + 496);
  if (v25 != v26)
  {
    if (a3 < 0) {
      char v27 = -5;
    }
    else {
      char v27 = 5;
    }
    unsigned int v28 = a3 / -10 + (((-103 * (char)(v27 + a3 % 10)) >> 15) & 1) + ((-103 * (char)(v27 + a3 % 10)) >> 10);
    do
    {
      if (*v25 == 0x7FFFFFFF)
      {
        int v29 = v25[1];
        if (v29 != 0x7FFFFFFF) {
          goto LABEL_65;
        }
      }
      else
      {
        *v25 += v28;
        int v29 = v25[1];
        if (v29 != 0x7FFFFFFF) {
LABEL_65:
        }
          v25[1] = v29 + v28;
      }
      v25 += 7;
    }
    while (v25 != v26);
  }
}

double sub_97EB18()
{
  byte_25DAFC7 = 1;
  word_25DAFB0 = 65;
  byte_25DAFDF = 1;
  word_25DAFC8 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25DB070 = 0u;
  *(_OWORD *)&qword_25DB080 = 0u;
  dword_25DB090 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25DB070, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25DB070, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25DB070, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25DB070, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25DAFF7 = 8;
  strcpy((char *)&qword_25DAFE0, "any_mode");
  byte_25DB00F = 7;
  strcpy((char *)&dword_25DAFF8, "cycling");
  byte_25DB027 = 7;
  strcpy((char *)&dword_25DB010, "driving");
  byte_25DB03F = 7;
  strcpy((char *)&dword_25DB028, "walking");
  qword_25DB048 = 0;
  qword_25DB050 = 0;
  qword_25DB040 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25DB040 = (uint64_t)v0;
  qword_25DB048 = (uint64_t)(v0 + 9);
  qword_25DB050 = (uint64_t)(v0 + 9);
  qword_25DB058 = 0;
  qword_25DB060 = 0;
  unk_25DB068 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25DB060 = (uint64_t)(v1 + 9);
  unk_25DB068 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25DB058 = (uint64_t)v1;
  return result;
}

void sub_97EDE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25DB080) {
    sub_20ACDC0((void **)qword_25DB080);
  }
  int v37 = (void *)xmmword_25DB070;
  *(void *)&xmmword_25DB070 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t **sub_97EE80(uint64_t **a1, uint64_t *a2, uint64_t a3)
{
  *a1 = a2;
  a1[1] = (uint64_t *)a3;
  int v6 = (uint64_t *)(a1 + 2);
  char v7 = (uint64_t *)sub_374EF4(a2);
  sub_688A04(v7, 5u, *(_DWORD *)(a3 + 968), v6);
  sub_98FD2C((uint64_t)a2, (uint64_t)(a1 + 4));
  return a1;
}

void sub_97EEE0(_Unwind_Exception *exception_object)
{
  int v3 = *(std::__shared_weak_count **)(v1 + 24);
  if (v3) {
    sub_20A69F0(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_97EEF8(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  sub_97F1E8((char **)a5, 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 4));
  int8x16_t v28 = vextq_s8(*(int8x16_t *)(a1 + 1), *(int8x16_t *)(a1 + 1), 8uLL);
  long long v9 = *((_OWORD *)a1 + 3);
  long long v31 = *((_OWORD *)a1 + 2);
  long long v32 = v9;
  char v22 = a2;
  uint64_t v10 = *a1;
  char v27 = a2 + 3;
  int v29 = a2 + 36;
  uint64_t v30 = v10;
  long long v33 = *((_OWORD *)a1 + 4);
  uint64_t v11 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    do
    {
      if (0xD37A6F4DE9BD37A7 * ((uint64_t)(a4[1] - *a4) >> 3) <= v14) {
        sub_66748();
      }
      int v15 = *(_DWORD *)(*a4 + v12);
      unint64_t v16 = *(void *)(a5 + 8);
      if (v16 >= *(void *)(a5 + 16))
      {
        char v17 = sub_9814C4((void **)a5);
        unsigned int v18 = (const std::string *)(v11 + v13);
        *(void *)(a5 + 8) = v17;
        uint64_t v19 = (uint64_t)(v17 - 1064);
        *((_DWORD *)v17 - 266) = v15;
        if (!v15)
        {
LABEL_15:
          if (0xAFEAFEAFEAFEAFEBLL * ((v22[1] - *v22) >> 4)) {
            sub_97F3A4((uint64_t)v22, *v22, v18, (uint64_t)&v27, v19);
          }
          sub_66748();
        }
      }
      else
      {
        bzero(*(void **)(a5 + 8), 0x428uLL);
        sub_981774(v16 + 56);
        *(_OWORD *)(v16 + 1032) = 0u;
        *(_OWORD *)(v16 + 1048) = 0u;
        *(_OWORD *)(v16 + 1016) = 0u;
        char v17 = (char *)(v16 + 1064);
        *(void *)(a5 + 8) = v16 + 1064;
        unsigned int v18 = (const std::string *)(v11 + v13);
        *(void *)(a5 + 8) = v17;
        uint64_t v19 = (uint64_t)(v17 - 1064);
        *((_DWORD *)v17 - 266) = v15;
        if (!v15) {
          goto LABEL_15;
        }
      }
      std::string __p = 0;
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      std::string::operator=((std::string *)v17 - 43, (const std::string *)(v11 + v13 + 24));
      uint64_t v20 = HIBYTE(v26);
      if (v26 < 0) {
        uint64_t v20 = v25;
      }
      if (v20) {
        p_p = (const std::string *)&__p;
      }
      else {
        p_p = v18;
      }
      std::string::operator=((std::string *)v17 - 44, p_p);
      if (SHIBYTE(v26) < 0) {
        operator delete(__p);
      }
      ++v14;
      uint64_t v11 = *a3;
      v13 += 48;
      v12 += 184;
    }
    while (v14 < 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 4));
  }
}

void sub_97F168(_Unwind_Exception *a1)
{
  sub_97FA60(v1);
  _Unwind_Resume(a1);
}

void sub_97F1C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
  {
    operator delete(__p);
    sub_97FA60(v18);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x97F1B4);
}

void sub_97F1E8(char **a1, unint64_t a2)
{
  uint64_t v2 = *a1;
  if (0x133F84CFE133F84DLL * ((a1[2] - *a1) >> 3) >= a2) {
    return;
  }
  if (a2 >= 0x3D980F6603D981) {
    sub_2E00();
  }
  char v4 = a1[1];
  uint64_t v5 = 1064 * a2;
  int v6 = (char *)operator new(1064 * a2);
  char v7 = &v6[v5];
  int v8 = &v6[v4 - v2];
  if (v4 == v2)
  {
    *a1 = v8;
    a1[1] = v8;
    a1[2] = v7;
    if (!v2) {
      return;
    }
    goto LABEL_10;
  }
  uint64_t v9 = 0;
  do
  {
    uint64_t v10 = &v8[v9];
    uint64_t v11 = &v4[v9];
    *(_DWORD *)&v8[v9 - 1064] = *(_DWORD *)&v4[v9 - 1064];
    uint64_t v12 = (uint64_t)&v8[v9 - 1056];
    uint64_t v13 = (uint64_t)&v4[v9 - 1056];
    long long v14 = *(_OWORD *)v13;
    *(void *)(v12 + 16) = *(void *)&v4[v9 - 1040];
    *(_OWORD *)uint64_t v12 = v14;
    *(void *)(v13 + 8) = 0;
    *(void *)(v13 + 16) = 0;
    *(void *)uint64_t v13 = 0;
    uint64_t v15 = (uint64_t)&v8[v9 - 1032];
    uint64_t v16 = (uint64_t)&v4[v9 - 1032];
    long long v17 = *(_OWORD *)v16;
    *(void *)(v15 + 16) = *(void *)&v4[v9 - 1016];
    *(_OWORD *)uint64_t v15 = v17;
    *(void *)(v16 + 8) = 0;
    *(void *)(v16 + 16) = 0;
    *(void *)uint64_t v16 = 0;
    sub_980FA8((uint64_t)&v8[v9 - 1008], (uint64_t)&v4[v9 - 1008]);
    *((_OWORD *)v10 - 3) = *(_OWORD *)&v4[v9 - 48];
    *((void *)v10 - 4) = *(void *)&v4[v9 - 32];
    *((void *)v11 - 6) = 0;
    *((void *)v11 - 5) = 0;
    *((void *)v11 - 4) = 0;
    *(_OWORD *)(v10 - 24) = *(_OWORD *)&v4[v9 - 24];
    *((void *)v10 - 1) = *(void *)&v4[v9 - 8];
    *((void *)v11 - 3) = 0;
    *((void *)v11 - 2) = 0;
    *((void *)v11 - 1) = 0;
    v9 -= 1064;
  }
  while (&v4[v9] != v2);
  unsigned int v18 = *a1;
  uint64_t v2 = a1[1];
  *a1 = &v8[v9];
  a1[1] = v8;
  a1[2] = v7;
  if (v2 != v18)
  {
    do
    {
      v2 -= 1064;
      sub_9803D0((uint64_t)v2);
    }
    while (v2 != v18);
    uint64_t v2 = v18;
  }
  if (v2)
  {
LABEL_10:
    operator delete(v2);
  }
}

void sub_97F3A4(uint64_t a1, uint64_t a2, const std::string *a3, uint64_t a4, uint64_t a5)
{
  int v8 = (const std::string *)(a2 + 1104);
  uint64_t v9 = (std::string *)(a5 + 8);
  std::string::operator=((std::string *)(a5 + 32), a3 + 1);
  uint64_t v10 = *(unsigned __int8 *)(a2 + 1127);
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *(void *)(a2 + 1112);
  }
  if (v10) {
    uint64_t v11 = v8;
  }
  else {
    uint64_t v11 = a3;
  }
  std::string::operator=(v9, v11);
  sub_9C87CC(a2, a4);
}

void sub_97F4CC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 56);
  *(void *)(v1 - 56) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_97F50C(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  sub_9E62A0((uint64_t)v73, a2);
  while (1)
  {
    sub_9E62A4(v73, v60);
    BOOL v5 = sub_9E6044(v73, v60);
    sub_9467EC((uint64_t)&v65);
    int v6 = __p;
    if (__p)
    {
      do
      {
        char v7 = (void *)*v6;
        operator delete(v6);
        int v6 = v7;
      }
      while (v7);
    }
    int v8 = v63;
    char v63 = 0;
    if (v8) {
      operator delete(v8);
    }
    if (v62[0])
    {
      v62[1] = v62[0];
      operator delete(v62[0]);
    }
    if (!v5) {
      break;
    }
    uint64_t v9 = sub_9E6018((uint64_t)v73);
    if (*(_DWORD *)(v9 + 8) == -1) {
      goto LABEL_2;
    }
    if (*(char *)(v9 + 39) < 0)
    {
      if (!*(void *)(v9 + 24)) {
        goto LABEL_2;
      }
    }
    else if (!*(unsigned char *)(v9 + 39))
    {
      goto LABEL_2;
    }
    uint64_t v10 = sub_9E6018((uint64_t)v73);
    sub_98057C((uint64_t)v60, v10 + 8);
    if (*(_DWORD *)sub_9E6018((uint64_t)v73) == 2)
    {
      uint64_t v11 = sub_9E6018((uint64_t)v73);
      if (*(void *)(v11 + 2152) != *(void *)(v11 + 2160))
      {
        uint64_t v12 = sub_9E6018((uint64_t)v73);
        if (&v68 != (void **)(v12 + 2152)) {
          sub_31AF54(&v68, *(char **)(v12 + 2152), *(char **)(v12 + 2160), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v12 + 2160) - *(void *)(v12 + 2152)) >> 2));
        }
      }
    }
    uint64_t v24 = -1;
    int v25 = 0x7FFFFFFF;
    uint64_t v26 = -1;
    uint64_t v27 = -1;
    uint64_t v28 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v29 = 0;
    int v30 = -1935635296;
    v31[0] = 0;
    *(_DWORD *)((char *)v31 + 7) = 0;
    memset(&v31[2], 0, 24);
    int v32 = 0;
    char v33 = 100;
    uint64_t v34 = 0;
    int v35 = 0;
    char v42 = 0;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    uint64_t v48 = 0;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v43 = 0u;
    long long v49 = xmmword_20B8E30;
    uint64_t v50 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    int v54 = 0;
    uint64_t v51 = 0;
    char v55 = 0;
    int v56 = 0;
    sub_9DC7CC((uint64_t)&v24, (uint64_t)v73, a3, &v59);
    sub_402C7C((uint64_t)&v24);
    sub_97FABC(&v59, (uint64_t)&v24);
    sub_98069C((uint64_t)v62, (uint64_t)&v24);
    sub_980874(v66, (uint64_t)v57);
    sub_4D90B4((uint64_t)v67, (uint64_t)v58);
    unsigned char v67[160] = v58[160];
    sub_4D4B58((uint64_t)v58);
    sub_929188(v57);
    sub_92928C((void **)&v24);
    uint64_t v13 = sub_9E6018((uint64_t)v73);
    if (*(void *)(v13 + 2224) != *(void *)(v13 + 2232))
    {
      uint64_t v14 = sub_9E6018((uint64_t)v73);
      sub_97FD54((uint64_t *)(v14 + 2224), &v59, (uint64_t)&v24);
      sub_9800B4((char **)v72, (uint64_t)&v24);
      sub_92A344((void **)&v24);
    }
    if (v68 != v69 || sub_980A20(v62) || v72[0] != v72[1])
    {
      uint64_t v15 = sub_9E6018((uint64_t)v73);
      long long v70 = *(_OWORD *)(v15 + 2176);
      uint64_t v71 = *(void *)(v15 + 2192);
      unint64_t v16 = a4[128];
      if (v16 >= a4[129])
      {
        uint64_t v17 = sub_981848(a4 + 127, (uint64_t)v60);
      }
      else
      {
        sub_981A38(a4[128], (uint64_t)v60);
        uint64_t v17 = v16 + 2128;
        a4[128] = v16 + 2128;
      }
      a4[128] = v17;
    }
    unsigned int v18 = (std::__shared_weak_count *)v59.n128_u64[1];
    if (!v59.n128_u64[1] || atomic_fetch_add((atomic_ullong *volatile)(v59.n128_u64[1] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      sub_92A344(v72);
      uint64_t v19 = v68;
      if (!v68) {
        goto LABEL_32;
      }
LABEL_31:
      int v69 = v19;
      operator delete(v19);
      goto LABEL_32;
    }
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    sub_92A344(v72);
    uint64_t v19 = v68;
    if (v68) {
      goto LABEL_31;
    }
LABEL_32:
    sub_4D4B58((uint64_t)v67);
    sub_929188(v66);
    sub_92928C(v62);
    if (v61 < 0) {
      operator delete(v60[1]);
    }
LABEL_2:
    sub_9E5780(v73);
  }
  sub_9467EC((uint64_t)&v78);
  uint64_t v20 = v77;
  if (v77)
  {
    do
    {
      int v21 = (void *)*v20;
      operator delete(v20);
      uint64_t v20 = v21;
    }
    while (v21);
  }
  char v22 = v76;
  long long v76 = 0;
  if (v22) {
    operator delete(v22);
  }
  if (v74)
  {
    int v75 = v74;
    operator delete(v74);
  }
}

void sub_97F9B8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 1024) = v2;
  sub_14A84((uint64_t)&STACK[0x518]);
  sub_98020C((uint64_t)&STACK[0x528]);
  sub_945B38((void *)(v3 - 248));
  _Unwind_Resume(a1);
}

void sub_97FA4C(_Unwind_Exception *a1)
{
  sub_945B38((void *)(v1 - 248));
  _Unwind_Resume(a1);
}

void **sub_97FA60(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    char v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = sub_9803D0(v3 - 1064);
      while ((void *)v3 != v2);
      char v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_97FABC@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  sub_980AF0(a2);
  *(_OWORD *)(a2 + 648) = 0u;
  *(_OWORD *)(a2 + 664) = 0u;
  *(_OWORD *)(a2 + 616) = 0u;
  *(_OWORD *)(a2 + 632) = 0u;
  *(_OWORD *)(a2 + 584) = 0u;
  *(_OWORD *)(a2 + 600) = 0u;
  sub_5F3B34(a2 + 680);
  *(unsigned char *)(a2 + 840) = 0;
  if ((*(unsigned int (**)(void, uint64_t, uint64_t))(*(void *)*a1 + 64))(*a1, 5, 2))
  {
    (*(void (**)(void *__return_ptr))(*(void *)*a1 + 24))(v5);
    sub_4D90B4(a2 + 256, (uint64_t)v5);
    sub_4D90B4(a2 + 416, (uint64_t)v6);
    *(unsigned char *)(a2 + 576) = v6[160];
    sub_4D4B58((uint64_t)v6);
    sub_4D4B58((uint64_t)v5);
  }
  if ((*(unsigned int (**)(void, uint64_t, uint64_t))(*(void *)*a1 + 64))(*a1, 4, 1))
  {
    (*(void (**)(void *__return_ptr))(*(void *)*a1 + 32))(v5);
    sub_4D90B4(a2 + 680, (uint64_t)v5);
    *(unsigned char *)(a2 + 840) = v6[0];
    sub_4D4B58((uint64_t)v5);
  }
  if ((*(unsigned int (**)(void, uint64_t, uint64_t))(*(void *)*a1 + 64))(*a1, 6, 2))
  {
    (*(void (**)(void *__return_ptr))(*(void *)*a1 + 40))(v5);
    sub_4D90B4(a2 + 96, (uint64_t)v5);
    sub_4D4B58((uint64_t)v5);
  }
  sub_980284((uint64_t *)(a2 + 48), a1, 2, 2);
  sub_980284((uint64_t *)(a2 + 632), a1, 2, 1);
  return sub_980284((uint64_t *)(a2 + 24), a1, 1, 2);
}

void sub_97FCE8(_Unwind_Exception *a1)
{
  sub_92853C(v1);
  _Unwind_Resume(a1);
}

void sub_97FCFC(_Unwind_Exception *a1)
{
  sub_92853C(v1);
  _Unwind_Resume(a1);
}

void sub_97FD10(_Unwind_Exception *a1)
{
  sub_92853C(v1);
  _Unwind_Resume(a1);
}

void sub_97FD24(_Unwind_Exception *a1)
{
  sub_929188(v2);
  sub_92928C(v1);
  _Unwind_Resume(a1);
}

void sub_97FD40(_Unwind_Exception *a1)
{
  sub_92853C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_97FD54@<X0>(uint64_t *a1@<X1>, void *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 == v5)
  {
LABEL_18:
    bzero((void *)a3, 0x4B0uLL);
    return sub_980E24(a3);
  }
  else
  {
    uint64_t v7 = v4 + 696;
    do
    {
      int v8 = *(unsigned __int8 *)(v7 - 8);
      if (*(unsigned char *)(v7 - 8)) {
        BOOL v9 = 1;
      }
      else {
        BOOL v9 = v7 == v5;
      }
      v7 += 696;
    }
    while (!v9);
    while (1)
    {
      int v10 = *(unsigned __int8 *)(v4 + 8);
      if (v10 == 1) {
        break;
      }
      v4 += 696;
      if (v4 == v5)
      {
        if (!v8) {
          goto LABEL_18;
        }
        break;
      }
    }
    sub_9299FC(a3, (uint64_t)a1);
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    memset(__p, 0, sizeof(__p));
    sub_5F3B34((uint64_t)&v14);
    uint64_t v11 = *(void **)(a3 + 32);
    *(void *)(a3 + 24) = 0;
    if (v11)
    {
      *(void *)(a3 + 40) = v11;
      operator delete(v11);
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 40) = 0;
      *(void *)(a3 + 48) = 0;
    }
    *(_OWORD *)(a3 + 32) = *(_OWORD *)&__p[1];
    *(void **)(a3 + 48) = __p[3];
    memset(&__p[1], 0, 24);
    sub_4D90B4(a3 + 56, (uint64_t)&v14);
    sub_4D4B58((uint64_t)&v14);
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 80))(*a2, a3);
    if (v10 != 1)
    {
      uint64_t v32 = 0;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      memset(__p, 0, sizeof(__p));
      sub_5F3B34((uint64_t)__p);
      sub_5F3B34((uint64_t)&v22);
      LOBYTE(v32) = 0;
      sub_4D90B4(a3 + 216, (uint64_t)__p);
      sub_4D90B4(a3 + 376, (uint64_t)&v22);
      *(unsigned char *)(a3 + 536) = v32;
      sub_4D4B58((uint64_t)&v22);
      sub_4D4B58((uint64_t)__p);
      uint64_t v32 = 0;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      memset(__p, 0, sizeof(__p));
      sub_5F3B34((uint64_t)__p);
      sub_5F3B34((uint64_t)&v22);
      LOBYTE(v32) = 0;
      sub_4D90B4(a3 + 544, (uint64_t)__p);
      sub_4D90B4(a3 + 704, (uint64_t)&v22);
      *(unsigned char *)(a3 + 864) = v32;
      sub_4D4B58((uint64_t)&v22);
      sub_4D4B58((uint64_t)__p);
      uint64_t v32 = 0;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      memset(__p, 0, sizeof(__p));
      sub_5F3B34((uint64_t)__p);
      sub_5F3B34((uint64_t)&v22);
      LOBYTE(v32) = 0;
      sub_4D90B4(a3 + 872, (uint64_t)__p);
      sub_4D90B4(a3 + 1032, (uint64_t)&v22);
      *(unsigned char *)(a3 + 1192) = v32;
      sub_4D4B58((uint64_t)&v22);
      return sub_4D4B58((uint64_t)__p);
    }
  }
  return result;
}

void sub_98004C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_4D4B58((uint64_t)&a9);
  sub_92A344(v9);
  _Unwind_Resume(a1);
}

void sub_980078(_Unwind_Exception *a1)
{
  sub_92A344(v1);
  _Unwind_Resume(a1);
}

void sub_980090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
  {
    operator delete(__p);
    sub_92A344(v11);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x980080);
}

char **sub_9800B4(char **a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    uint64_t v5 = a1[1];
    int v6 = *a1;
    if (v5 != v4)
    {
      do
      {
        sub_4D4B58((uint64_t)(v5 - 176));
        sub_4D4B58((uint64_t)(v5 - 336));
        sub_4D4B58((uint64_t)(v5 - 504));
        sub_4D4B58((uint64_t)(v5 - 664));
        v5 -= 696;
      }
      while (v5 != v4);
      int v6 = *a1;
    }
    a1[1] = v4;
    operator delete(v6);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v7 = *(char **)(a2 + 24);
  a1[2] = *(char **)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  int v8 = a1[4];
  a1[3] = v7;
  if (v8)
  {
    a1[5] = v8;
    operator delete(v8);
    a1[4] = 0;
    a1[5] = 0;
    a1[6] = 0;
  }
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  a1[6] = *(char **)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  sub_4D90B4((uint64_t)(a1 + 7), a2 + 56);
  sub_4D90B4((uint64_t)(a1 + 27), a2 + 216);
  sub_4D90B4((uint64_t)(a1 + 47), a2 + 376);
  *((unsigned char *)a1 + 536) = *(unsigned char *)(a2 + 536);
  sub_4D90B4((uint64_t)(a1 + 68), a2 + 544);
  sub_4D90B4((uint64_t)(a1 + 88), a2 + 704);
  *((unsigned char *)a1 + 864) = *(unsigned char *)(a2 + 864);
  sub_4D90B4((uint64_t)(a1 + 109), a2 + 872);
  sub_4D90B4((uint64_t)(a1 + 129), a2 + 1032);
  *((unsigned char *)a1 + 1192) = *(unsigned char *)(a2 + 1192);
  return a1;
}

uint64_t sub_98020C(uint64_t a1)
{
  sub_92A344((void **)(a1 + 928));
  uint64_t v2 = *(void **)(a1 + 880);
  if (v2)
  {
    *(void *)(a1 + 888) = v2;
    operator delete(v2);
  }
  sub_4D4B58(a1 + 712);
  sub_929188((void **)(a1 + 616));
  sub_92928C((void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_980284(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a2 + 64))(*a2, a3, a4);
  if (result)
  {
    (*(void (**)(void *__return_ptr))(*(void *)*a2 + 16))(v11);
    if (!sub_45FB38(v11)
      || (*(unsigned int (**)(void, uint64_t, uint64_t))(*(void *)*a2 + 72))(*a2, a3, a4))
    {
      unint64_t v9 = a1[1];
      if (v9 >= a1[2])
      {
        uint64_t v10 = sub_980BF4(a1, (uint64_t)v11);
      }
      else
      {
        sub_4F58AC(a1[1], (uint64_t)v11);
        uint64_t v10 = v9 + 160;
        a1[1] = v9 + 160;
      }
      a1[1] = v10;
    }
    return sub_4D4B58((uint64_t)v11);
  }
  return result;
}

void sub_9803A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v9 + 8) = v10;
  sub_4D4B58((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_9803BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_9803D0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 1040);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 1048);
    uint64_t v4 = *(void **)(a1 + 1040);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        sub_4D4B58(v3 - 184);
        sub_4D4B58(v3 - 344);
        v3 -= 344;
      }
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 1040);
    }
    *(void *)(a1 + 1048) = v2;
    operator delete(v4);
  }
  if (*(void *)(a1 + 1016))
  {
    sub_9804E4((uint64_t *)(a1 + 1016));
    operator delete(*(void **)(a1 + 1016));
  }
  sub_4D4B58(a1 + 856);
  sub_4D4B58(a1 + 696);
  sub_4D4B58(a1 + 536);
  sub_4D4B58(a1 + 376);
  sub_4D4B58(a1 + 216);
  sub_4D4B58(a1 + 56);
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_9804E4(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = v2 - 2120;
    do
    {
      sub_92A344((void **)(v4 + 920));
      int v6 = *(void **)(v4 + 872);
      if (v6)
      {
        *(void *)(v4 + 880) = v6;
        operator delete(v6);
      }
      sub_4D4B58(v4 + 704);
      sub_929188((void **)(v4 + 608));
      sub_92928C((void **)(v4 + 24));
      if (*(char *)(v4 + 23) < 0) {
        operator delete(*(void **)v4);
      }
      uint64_t v5 = v4 - 8;
      v4 -= 2128;
    }
    while (v5 != v3);
  }
  a1[1] = v3;
}

uint64_t sub_98057C(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_4200((unsigned char *)(a1 + 8), *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v3;
  }
  sub_980AF0(a1 + 32);
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  sub_5F3B34(a1 + 712);
  *(unsigned char *)(a1 + 872) = 0;
  *(void *)(a1 + 880) = 0;
  *(void *)(a1 + 896) = 0;
  *(void *)(a1 + 888) = 0;
  *(void *)(a1 + 904) = 0xFFFFFFFF00000000;
  *(void *)(a1 + 912) = 0x8000000080000000;
  *(void *)(a1 + 920) = -1;
  sub_980E24(a1 + 928);
  return a1;
}

void sub_980640(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;
  uint64_t v7 = *v5;
  if (*v5)
  {
    *(void *)(v2 + 888) = v7;
    operator delete(v7);
  }
  sub_92853C(v3);
  if (*(char *)(v2 + 31) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_98069C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    int v6 = v4;
    if ((void *)v5 != v4)
    {
      do
        uint64_t v5 = sub_4D4B58(v5 - 160);
      while ((void *)v5 != v4);
      int v6 = *(void **)a1;
    }
    *(void *)(a1 + 8) = v4;
    operator delete(v6);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v7 = (void **)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 24);
  if (v8)
  {
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = *(void **)(a1 + 24);
    if (v9 != v8)
    {
      do
        uint64_t v9 = sub_4D4B58(v9 - 160);
      while (v9 != v8);
      uint64_t v10 = *v7;
    }
    *(void *)(a1 + 32) = v8;
    operator delete(v10);
    *uint64_t v7 = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  uint64_t v11 = (void **)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 48);
  if (v12)
  {
    uint64_t v13 = *(void *)(a1 + 56);
    long long v14 = *(void **)(a1 + 48);
    if (v13 != v12)
    {
      do
        uint64_t v13 = sub_4D4B58(v13 - 160);
      while (v13 != v12);
      long long v14 = *v11;
    }
    *(void *)(a1 + 56) = v12;
    operator delete(v14);
    *uint64_t v11 = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  long long v15 = (void **)(a1 + 72);
  uint64_t v16 = *(void *)(a1 + 72);
  if (v16)
  {
    uint64_t v17 = *(void *)(a1 + 80);
    long long v18 = *(void **)(a1 + 72);
    if (v17 != v16)
    {
      do
        uint64_t v17 = sub_4D4B58(v17 - 160);
      while (v17 != v16);
      long long v18 = *v15;
    }
    *(void *)(a1 + 80) = v16;
    operator delete(v18);
    *long long v15 = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  sub_4D90B4(a1 + 96, a2 + 96);
  sub_4D90B4(a1 + 256, a2 + 256);
  sub_4D90B4(a1 + 416, a2 + 416);
  *(unsigned char *)(a1 + 576) = *(unsigned char *)(a2 + 576);
  return a1;
}

void *sub_980874(void *a1, uint64_t a2)
{
  uint64_t v4 = (void *)*a1;
  if (*a1)
  {
    uint64_t v5 = a1[1];
    int v6 = v4;
    if ((void *)v5 != v4)
    {
      do
        uint64_t v5 = sub_4D4B58(v5 - 160);
      while ((void *)v5 != v4);
      int v6 = (void *)*a1;
    }
    a1[1] = v4;
    operator delete(v6);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v7 = (void **)(a1 + 3);
  uint64_t v8 = a1[3];
  if (v8)
  {
    uint64_t v9 = a1[4];
    uint64_t v10 = (void *)a1[3];
    if (v9 != v8)
    {
      do
        uint64_t v9 = sub_4D4B58(v9 - 160);
      while (v9 != v8);
      uint64_t v10 = *v7;
    }
    a1[4] = v8;
    operator delete(v10);
    *uint64_t v7 = 0;
    a1[4] = 0;
    a1[5] = 0;
  }
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  a1[5] = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  uint64_t v11 = (void **)(a1 + 6);
  uint64_t v12 = a1[6];
  if (v12)
  {
    uint64_t v13 = a1[7];
    long long v14 = (void *)a1[6];
    if (v13 != v12)
    {
      do
        uint64_t v13 = sub_4D4B58(v13 - 160);
      while (v13 != v12);
      long long v14 = *v11;
    }
    a1[7] = v12;
    operator delete(v14);
    *uint64_t v11 = 0;
    a1[7] = 0;
    a1[8] = 0;
  }
  *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 48);
  a1[8] = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  long long v15 = (void **)(a1 + 9);
  uint64_t v16 = a1[9];
  if (v16)
  {
    uint64_t v17 = a1[10];
    long long v18 = (void *)a1[9];
    if (v17 != v16)
    {
      do
        uint64_t v17 = sub_4D4B58(v17 - 160);
      while (v17 != v16);
      long long v18 = *v15;
    }
    a1[10] = v16;
    operator delete(v18);
    *long long v15 = 0;
    a1[10] = 0;
    a1[11] = 0;
  }
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 72);
  a1[11] = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  return a1;
}

BOOL sub_980A20(void *a1)
{
  return *a1 != a1[1]
      || a1[3] != a1[4]
      || a1[6] != a1[7]
      || a1[9] != a1[10]
      || !sub_45FB38(a1 + 12)
      || !sub_45FB38(a1 + 32)
      || !sub_45FB38(a1 + 52)
      || a1[73] != a1[74]
      || a1[76] != a1[77]
      || a1[79] != a1[80]
      || a1[82] != a1[83]
      || !sub_45FB38(a1 + 85);
}

uint64_t sub_980AF0(uint64_t a1)
{
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  sub_5F3B34(a1 + 96);
  sub_5F3B34(a1 + 256);
  sub_5F3B34(a1 + 416);
  *(unsigned char *)(a1 + 576) = 0;
  return a1;
}

void sub_980B50(_Unwind_Exception *a1)
{
  uint64_t v4 = v2;
  sub_4D4B58(v4);
  sub_4D4B58(v3);
  if (v1[9]) {
    sub_20ACE04();
  }
  if (v1[6]) {
    sub_20ACE6C();
  }
  if (v1[3]) {
    sub_20ACED4();
  }
  int v6 = *v1;
  if (*v1)
  {
    uint64_t v7 = (uint64_t)v1[1];
    uint64_t v8 = *v1;
    if ((void *)v7 != v6)
    {
      do
        uint64_t v7 = sub_4D4B58(v7 - 160);
      while ((void *)v7 != v6);
      uint64_t v8 = *v1;
    }
    v1[1] = v6;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_980BF4(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 5);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x199999999999999) {
    sub_2E00();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 5) > v4) {
    unint64_t v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 5);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 5) >= 0xCCCCCCCCCCCCCCLL) {
    unint64_t v6 = 0x199999999999999;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x199999999999999) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(160 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v19 = (uint64_t)&v7[160 * v3];
  long long v20 = &v7[160 * v6];
  sub_4F58AC(v19, a2);
  uint64_t v8 = v19;
  uint64_t v9 = v19 + 160;
  uint64_t v11 = (_OWORD *)*a1;
  uint64_t v10 = (_OWORD *)a1[1];
  if (v10 == (_OWORD *)*a1)
  {
    *a1 = v19;
    a1[1] = v9;
    a1[2] = (uint64_t)v20;
  }
  else
  {
    do
    {
      *(_OWORD *)(v8 - 160) = 0uLL;
      v8 -= 160;
      *(void *)(v8 + 16) = 0;
      long long v12 = *(v10 - 10);
      v10 -= 10;
      *(_OWORD *)uint64_t v8 = v12;
      *(void *)(v8 + 16) = *((void *)v10 + 2);
      *((void *)v10 + 2) = 0;
      *uint64_t v10 = 0uLL;
      *(void *)(v8 + 40) = 0;
      *(_OWORD *)(v8 + 24) = 0uLL;
      *(_OWORD *)(v8 + 24) = *(_OWORD *)((char *)v10 + 24);
      *(void *)(v8 + 40) = *((void *)v10 + 5);
      *((void *)v10 + 5) = 0;
      *(_OWORD *)((char *)v10 + 24) = 0uLL;
      *(void *)(v8 + 64) = 0;
      *(_OWORD *)(v8 + 48) = 0uLL;
      *(_OWORD *)(v8 + 48) = v10[3];
      *(void *)(v8 + 64) = *((void *)v10 + 8);
      *((void *)v10 + 8) = 0;
      v10[3] = 0uLL;
      *(void *)(v8 + 88) = 0;
      *(_OWORD *)(v8 + 72) = 0uLL;
      *(_OWORD *)(v8 + 72) = *(_OWORD *)((char *)v10 + 72);
      *(void *)(v8 + 88) = *((void *)v10 + 11);
      *(_OWORD *)((char *)v10 + 72) = 0uLL;
      uint64_t v13 = *((void *)v10 + 12);
      *(_OWORD *)((char *)v10 + 88) = 0uLL;
      *(void *)(v8 + 96) = v13;
      LODWORD(v13) = *((_DWORD *)v10 + 26);
      *(unsigned char *)(v8 + 108) = *((unsigned char *)v10 + 108);
      *(_DWORD *)(v8 + 104) = v13;
      long long v14 = v10[7];
      *(void *)(v8 + 128) = *((void *)v10 + 16);
      *(_OWORD *)(v8 + 112) = v14;
      *((void *)v10 + 15) = 0;
      *((void *)v10 + 16) = 0;
      long long v15 = *(_OWORD *)((char *)v10 + 136);
      uint64_t v16 = *((void *)v10 + 19);
      *((void *)v10 + 14) = 0;
      *(void *)(v8 + 152) = v16;
      *(_OWORD *)(v8 + 136) = v15;
      *((void *)v10 + 18) = 0;
      *((void *)v10 + 19) = 0;
      *((void *)v10 + 17) = 0;
    }
    while (v10 != v11);
    uint64_t v17 = (_OWORD *)*a1;
    uint64_t v10 = (_OWORD *)a1[1];
    *a1 = v8;
    a1[1] = v9;
    a1[2] = (uint64_t)v20;
    if (v10 != v17)
    {
      do
        uint64_t v10 = (_OWORD *)sub_4D4B58((uint64_t)(v10 - 10));
      while (v10 != v17);
      uint64_t v10 = v17;
    }
  }
  if (v10) {
    operator delete(v10);
  }
  return v19 + 160;
}

void sub_980E10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_5B12D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_980E24(uint64_t a1)
{
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  sub_5F3B34(a1 + 56);
  sub_5F3B34(a1 + 216);
  sub_5F3B34(a1 + 376);
  *(unsigned char *)(a1 + 536) = 0;
  sub_5F3B34(a1 + 544);
  sub_5F3B34(a1 + 704);
  *(unsigned char *)(a1 + 864) = 0;
  sub_5F3B34(a1 + 872);
  sub_5F3B34(a1 + 1032);
  *(unsigned char *)(a1 + 1192) = 0;
  return a1;
}

void sub_980EC0(_Unwind_Exception *a1)
{
  uint64_t v7 = v4;
  sub_4D4B58(v7);
  sub_4D4B58(v6);
  sub_4D4B58(v5);
  sub_4D4B58(v3);
  sub_4D4B58(v2);
  sub_929BDC((uint64_t)(v1 + 3));
  sub_929C18(v1);
  _Unwind_Resume(a1);
}

void sub_980F20()
{
}

void sub_980F28()
{
}

void sub_980F30(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)(v1 + 32);
  if (v3)
  {
    *(void *)(v1 + 40) = v3;
    operator delete(v3);
    sub_929C18((void **)v1);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x980F10);
}

uint64_t sub_980F54(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 1064;
    sub_9803D0(i - 1064);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

__n128 sub_980FA8(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)a2 = 0u;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 48) = 0u;
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_OWORD *)(a2 + 72) = 0u;
  uint64_t v2 = *(void *)(a2 + 96);
  *(_OWORD *)(a2 + 88) = 0u;
  *(void *)(a1 + 96) = v2;
  LODWORD(v2) = *(_DWORD *)(a2 + 104);
  *(unsigned char *)(a1 + 108) = *(unsigned char *)(a2 + 108);
  *(_DWORD *)(a1 + 104) = v2;
  long long v3 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = v3;
  *(void *)(a2 + 112) = 0;
  *(_OWORD *)(a2 + 120) = 0u;
  long long v4 = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v4;
  *(_OWORD *)(a2 + 144) = 0u;
  *(void *)(a2 + 136) = 0;
  *(void *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  long long v6 = *(_OWORD *)(a2 + 160);
  uint64_t v5 = a2 + 160;
  *(_OWORD *)(a1 + 160) = v6;
  *(void *)(a1 + 176) = *(void *)(v5 + 16);
  *(void *)(v5 + 16) = 0;
  *(_OWORD *)uint64_t v5 = 0u;
  *(void *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(v5 + 24);
  *(void *)(a1 + 200) = *(void *)(v5 + 40);
  *(void *)(v5 + 40) = 0;
  *(_OWORD *)(v5 + 24) = 0u;
  *(void *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(v5 + 48);
  *(void *)(a1 + 224) = *(void *)(v5 + 64);
  *(void *)(v5 + 64) = 0;
  *(_OWORD *)(v5 + 48) = 0u;
  *(void *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(v5 + 72);
  *(void *)(a1 + 248) = *(void *)(v5 + 88);
  *(_OWORD *)(v5 + 72) = 0u;
  uint64_t v7 = *(void *)(v5 + 96);
  *(_OWORD *)(v5 + 88) = 0u;
  *(void *)(a1 + 256) = v7;
  LODWORD(v7) = *(_DWORD *)(v5 + 104);
  *(unsigned char *)(a1 + 268) = *(unsigned char *)(v5 + 108);
  *(_DWORD *)(a1 + 264) = v7;
  long long v8 = *(_OWORD *)(v5 + 112);
  *(void *)(a1 + 288) = *(void *)(v5 + 128);
  *(_OWORD *)(a1 + 272) = v8;
  *(void *)(v5 + 112) = 0;
  *(_OWORD *)(v5 + 120) = 0u;
  long long v9 = *(_OWORD *)(v5 + 136);
  *(void *)(a1 + 312) = *(void *)(v5 + 152);
  *(_OWORD *)(a1 + 296) = v9;
  *(_OWORD *)(v5 + 144) = 0u;
  *(void *)(v5 + 136) = 0;
  *(void *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(v5 + 160);
  *(void *)(a1 + 336) = *(void *)(v5 + 176);
  *(void *)(v5 + 176) = 0;
  *(_OWORD *)(v5 + 160) = 0u;
  *(void *)(a1 + 360) = 0;
  *(_OWORD *)(a1 + 344) = 0u;
  uint64_t v10 = *(void *)(v5 + 192);
  *(void *)(a1 + 344) = *(void *)(v5 + 184);
  *(void *)(a1 + 352) = v10;
  *(void *)(a1 + 360) = *(void *)(v5 + 200);
  *(void *)(v5 + 200) = 0;
  *(_OWORD *)(v5 + 184) = 0u;
  *(void *)(a1 + 384) = 0;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(v5 + 208);
  *(void *)(a1 + 384) = *(void *)(v5 + 224);
  *(void *)(v5 + 224) = 0;
  *(_OWORD *)(v5 + 208) = 0u;
  *(void *)(a1 + 408) = 0;
  *(_OWORD *)(a1 + 392) = 0u;
  uint64_t v11 = *(void *)(v5 + 240);
  *(void *)(a1 + 392) = *(void *)(v5 + 232);
  *(void *)(a1 + 400) = v11;
  *(void *)(a1 + 408) = *(void *)(v5 + 248);
  *(_OWORD *)(v5 + 232) = 0u;
  uint64_t v12 = *(void *)(v5 + 256);
  *(_OWORD *)(v5 + 248) = 0u;
  *(void *)(a1 + 416) = v12;
  LODWORD(v12) = *(_DWORD *)(v5 + 264);
  *(unsigned char *)(a1 + 428) = *(unsigned char *)(v5 + 268);
  *(_DWORD *)(a1 + 424) = v12;
  long long v13 = *(_OWORD *)(v5 + 272);
  *(void *)(a1 + 448) = *(void *)(v5 + 288);
  *(_OWORD *)(a1 + 432) = v13;
  *(void *)(v5 + 272) = 0;
  *(_OWORD *)(v5 + 280) = 0u;
  long long v14 = *(_OWORD *)(v5 + 296);
  *(void *)(a1 + 472) = *(void *)(v5 + 312);
  *(_OWORD *)(a1 + 456) = v14;
  *(_OWORD *)(v5 + 304) = 0u;
  *(void *)(v5 + 296) = 0;
  *(void *)(a1 + 496) = 0;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 480) = *(_OWORD *)(v5 + 320);
  *(void *)(a1 + 496) = *(void *)(v5 + 336);
  *(void *)(v5 + 336) = 0;
  *(_OWORD *)(v5 + 320) = 0u;
  *(void *)(a1 + 520) = 0;
  *(_OWORD *)(a1 + 504) = 0u;
  *(void *)(a1 + 504) = *(void *)(v5 + 344);
  *(void *)(a1 + 512) = *(void *)(v5 + 352);
  *(void *)(a1 + 520) = *(void *)(v5 + 360);
  *(void *)(v5 + 360) = 0;
  *(_OWORD *)(v5 + 344) = 0u;
  *(void *)(a1 + 544) = 0;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(v5 + 368);
  *(void *)(a1 + 544) = *(void *)(v5 + 384);
  *(void *)(v5 + 384) = 0;
  *(_OWORD *)(v5 + 368) = 0u;
  *(void *)(a1 + 568) = 0;
  *(_OWORD *)(a1 + 552) = 0u;
  *(void *)(a1 + 552) = *(void *)(v5 + 392);
  *(void *)(a1 + 560) = *(void *)(v5 + 400);
  *(void *)(a1 + 568) = *(void *)(v5 + 408);
  *(_OWORD *)(v5 + 392) = 0u;
  uint64_t v15 = *(void *)(v5 + 416);
  *(_OWORD *)(v5 + 408) = 0u;
  *(void *)(a1 + 576) = v15;
  LODWORD(v15) = *(_DWORD *)(v5 + 424);
  *(unsigned char *)(a1 + 588) = *(unsigned char *)(v5 + 428);
  *(_DWORD *)(a1 + 584) = v15;
  long long v16 = *(_OWORD *)(v5 + 432);
  *(void *)(a1 + 608) = *(void *)(v5 + 448);
  *(_OWORD *)(a1 + 592) = v16;
  *(void *)(v5 + 432) = 0;
  *(_OWORD *)(v5 + 440) = 0u;
  long long v17 = *(_OWORD *)(v5 + 456);
  *(void *)(a1 + 632) = *(void *)(v5 + 472);
  *(_OWORD *)(a1 + 616) = v17;
  *(_OWORD *)(v5 + 464) = 0u;
  *(void *)(v5 + 456) = 0;
  *(void *)(a1 + 656) = 0;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 640) = *(_OWORD *)(v5 + 480);
  *(void *)(a1 + 656) = *(void *)(v5 + 496);
  *(void *)(v5 + 496) = 0;
  *(_OWORD *)(v5 + 480) = 0u;
  *(void *)(a1 + 680) = 0;
  *(_OWORD *)(a1 + 664) = 0u;
  *(void *)(a1 + 664) = *(void *)(v5 + 504);
  *(void *)(a1 + 672) = *(void *)(v5 + 512);
  *(void *)(a1 + 680) = *(void *)(v5 + 520);
  *(void *)(v5 + 520) = 0;
  *(_OWORD *)(v5 + 504) = 0u;
  *(void *)(a1 + 704) = 0;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 688) = *(_OWORD *)(v5 + 528);
  *(void *)(a1 + 704) = *(void *)(v5 + 544);
  *(void *)(v5 + 544) = 0;
  *(_OWORD *)(v5 + 528) = 0u;
  *(void *)(a1 + 728) = 0;
  *(_OWORD *)(a1 + 712) = 0u;
  *(void *)(a1 + 712) = *(void *)(v5 + 552);
  *(void *)(a1 + 720) = *(void *)(v5 + 560);
  *(void *)(a1 + 728) = *(void *)(v5 + 568);
  *(_OWORD *)(v5 + 552) = 0u;
  uint64_t v18 = *(void *)(v5 + 576);
  *(_OWORD *)(v5 + 568) = 0u;
  *(void *)(a1 + 736) = v18;
  LODWORD(v18) = *(_DWORD *)(v5 + 584);
  *(unsigned char *)(a1 + 748) = *(unsigned char *)(v5 + 588);
  *(_DWORD *)(a1 + 744) = v18;
  long long v19 = *(_OWORD *)(v5 + 592);
  *(void *)(a1 + 768) = *(void *)(v5 + 608);
  *(_OWORD *)(a1 + 752) = v19;
  *(void *)(v5 + 592) = 0;
  *(_OWORD *)(v5 + 600) = 0u;
  long long v20 = *(_OWORD *)(v5 + 616);
  *(void *)(a1 + 792) = *(void *)(v5 + 632);
  *(_OWORD *)(a1 + 776) = v20;
  *(_OWORD *)(v5 + 624) = 0u;
  *(void *)(v5 + 616) = 0;
  *(void *)(a1 + 816) = 0;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 800) = *(_OWORD *)(v5 + 640);
  *(void *)(a1 + 816) = *(void *)(v5 + 656);
  *(void *)(v5 + 656) = 0;
  *(_OWORD *)(v5 + 640) = 0u;
  *(void *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 824) = 0u;
  *(void *)(a1 + 824) = *(void *)(v5 + 664);
  *(void *)(a1 + 832) = *(void *)(v5 + 672);
  *(void *)(a1 + 840) = *(void *)(v5 + 680);
  *(void *)(v5 + 680) = 0;
  *(_OWORD *)(v5 + 664) = 0u;
  *(void *)(a1 + 864) = 0;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 848) = *(_OWORD *)(v5 + 688);
  *(void *)(a1 + 864) = *(void *)(v5 + 704);
  *(void *)(v5 + 704) = 0;
  *(_OWORD *)(v5 + 688) = 0u;
  *(void *)(a1 + 888) = 0;
  *(_OWORD *)(a1 + 872) = 0u;
  *(void *)(a1 + 872) = *(void *)(v5 + 712);
  *(void *)(a1 + 880) = *(void *)(v5 + 720);
  *(void *)(a1 + 888) = *(void *)(v5 + 728);
  *(_OWORD *)(v5 + 712) = 0u;
  uint64_t v21 = *(void *)(v5 + 736);
  *(_OWORD *)(v5 + 728) = 0u;
  *(void *)(a1 + 896) = v21;
  LODWORD(v21) = *(_DWORD *)(v5 + 744);
  *(unsigned char *)(a1 + 908) = *(unsigned char *)(v5 + 748);
  *(_DWORD *)(a1 + 904) = v21;
  long long v22 = *(_OWORD *)(v5 + 752);
  *(void *)(a1 + 928) = *(void *)(v5 + 768);
  *(_OWORD *)(a1 + 912) = v22;
  *(void *)(v5 + 752) = 0;
  *(void *)(v5 + 768) = 0;
  *(void *)(v5 + 760) = 0;
  __n128 result = *(__n128 *)(v5 + 776);
  *(void *)(a1 + 952) = *(void *)(v5 + 792);
  *(__n128 *)(a1 + 936) = result;
  *(void *)(v5 + 792) = 0;
  *(void *)(v5 + 784) = 0;
  *(void *)(v5 + 776) = 0;
  return result;
}

char *sub_9814C4(void **a1)
{
  uint64_t v2 = 0x133F84CFE133F84DLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x3D980F6603D980) {
    sub_2E00();
  }
  if (0x267F099FC267F09ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v3) {
    unint64_t v3 = 0x267F099FC267F09ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if ((unint64_t)(0x133F84CFE133F84DLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3)) >= 0x1ECC07B301ECC0) {
    unint64_t v4 = 0x3D980F6603D980;
  }
  else {
    unint64_t v4 = v3;
  }
  if (v4)
  {
    if (v4 > 0x3D980F6603D980) {
      sub_188D718();
    }
    uint64_t v5 = (char *)operator new(1064 * v4);
  }
  else
  {
    uint64_t v5 = 0;
  }
  long long v20 = &v5[1064 * v2];
  uint64_t v21 = &v5[1064 * v4];
  bzero(v20, 0x428uLL);
  sub_981774((uint64_t)(v20 + 56));
  *(_OWORD *)(v20 + 1032) = 0u;
  *(_OWORD *)(v20 + 1048) = 0u;
  *(_OWORD *)(v20 + 1016) = 0u;
  long long v6 = v20 + 1064;
  long long v8 = (char *)*a1;
  uint64_t v7 = (char *)a1[1];
  if (v7 == *a1)
  {
    *a1 = v20;
    a1[1] = v6;
    a1[2] = v21;
  }
  else
  {
    uint64_t v9 = 0;
    do
    {
      uint64_t v10 = &v20[v9];
      uint64_t v11 = &v7[v9];
      *(_DWORD *)&v20[v9 - 1064] = *(_DWORD *)&v7[v9 - 1064];
      uint64_t v12 = (uint64_t)&v20[v9 - 1056];
      uint64_t v13 = (uint64_t)&v7[v9 - 1056];
      long long v14 = *(_OWORD *)v13;
      *(void *)(v12 + 16) = *(void *)&v7[v9 - 1040];
      *(_OWORD *)uint64_t v12 = v14;
      *(void *)(v13 + 8) = 0;
      *(void *)(v13 + 16) = 0;
      *(void *)uint64_t v13 = 0;
      uint64_t v15 = (uint64_t)&v20[v9 - 1032];
      uint64_t v16 = (uint64_t)&v7[v9 - 1032];
      long long v17 = *(_OWORD *)v16;
      *(void *)(v15 + 16) = *(void *)&v7[v9 - 1016];
      *(_OWORD *)uint64_t v15 = v17;
      *(void *)(v16 + 8) = 0;
      *(void *)(v16 + 16) = 0;
      *(void *)uint64_t v16 = 0;
      sub_980FA8((uint64_t)&v20[v9 - 1008], (uint64_t)&v7[v9 - 1008]);
      *((void *)v10 - 6) = 0;
      *((void *)v10 - 5) = 0;
      *((void *)v10 - 4) = 0;
      *((_OWORD *)v10 - 3) = *(_OWORD *)&v7[v9 - 48];
      *((void *)v10 - 4) = *(void *)&v7[v9 - 32];
      *((void *)v11 - 6) = 0;
      *((void *)v11 - 5) = 0;
      *((void *)v11 - 4) = 0;
      *((void *)v10 - 3) = 0;
      *((void *)v10 - 2) = 0;
      *((void *)v10 - 1) = 0;
      *(_OWORD *)(v10 - 24) = *(_OWORD *)&v7[v9 - 24];
      *((void *)v10 - 1) = *(void *)&v7[v9 - 8];
      *((void *)v11 - 3) = 0;
      *((void *)v11 - 2) = 0;
      *((void *)v11 - 1) = 0;
      v9 -= 1064;
    }
    while (&v7[v9] != v8);
    uint64_t v18 = (char *)*a1;
    uint64_t v7 = (char *)a1[1];
    *a1 = &v20[v9];
    a1[1] = v6;
    a1[2] = v21;
    if (v7 != v18)
    {
      do
      {
        v7 -= 1064;
        sub_9803D0((uint64_t)v7);
      }
      while (v7 != v18);
      uint64_t v7 = v18;
    }
  }
  if (v7) {
    operator delete(v7);
  }
  return v20 + 1064;
}

void sub_981720(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v3 + 55) < 0)
  {
    operator delete(*(void **)(v2 + 1064 * v4 + 32));
    if ((*(char *)(v3 + 31) & 0x80000000) == 0)
    {
LABEL_3:
      sub_980F54((uint64_t)va);
      _Unwind_Resume(a1);
    }
  }
  else if ((*(char *)(v3 + 31) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v5);
  sub_980F54((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_981774(uint64_t a1)
{
  uint64_t v2 = sub_5F3B34(a1);
  sub_5F3B34(v2 + 160);
  sub_5F3B34(a1 + 320);
  sub_5F3B34(a1 + 480);
  sub_5F3B34(a1 + 640);
  sub_5F3B34(a1 + 800);
  return a1;
}

void sub_9817E4(_Unwind_Exception *a1)
{
  uint64_t v6 = v4;
  sub_4D4B58(v6);
  sub_4D4B58(v5);
  sub_4D4B58(v3);
  sub_4D4B58(v2);
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_981834(_Unwind_Exception *a1)
{
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_981848(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = 0x133F84CFE133F84DLL * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x1ECC07B301ECC0) {
    sub_2E00();
  }
  if (0x267F099FC267F09ALL * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0x267F099FC267F09ALL * ((a1[2] - *a1) >> 4);
  }
  if ((unint64_t)(0x133F84CFE133F84DLL * ((a1[2] - *a1) >> 4)) >= 0xF6603D980F660) {
    unint64_t v6 = 0x1ECC07B301ECC0;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x1ECC07B301ECC0) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(2128 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v17 = (uint64_t)&v7[2128 * v3];
  uint64_t v18 = &v7[2128 * v6];
  sub_981A38(v17, a2);
  uint64_t v8 = v17;
  uint64_t v9 = v17 + 2128;
  uint64_t v11 = (char *)*a1;
  uint64_t v10 = (char *)a1[1];
  if (v10 == (char *)*a1)
  {
    *a1 = v17;
    a1[1] = v9;
    a1[2] = (uint64_t)v18;
  }
  else
  {
    do
    {
      v8 -= 2128;
      v10 -= 2128;
      sub_981C18((uint64_t)(a1 + 2), v8, (uint64_t)v10);
    }
    while (v10 != v11);
    uint64_t v12 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    *a1 = v8;
    a1[1] = v9;
    a1[2] = (uint64_t)v18;
    if (v10 != v12)
    {
      uint64_t v13 = (void **)(v10 - 2120);
      do
      {
        sub_92A344(v13 + 115);
        uint64_t v15 = v13[109];
        if (v15)
        {
          v13[110] = v15;
          operator delete(v15);
        }
        sub_4D4B58((uint64_t)(v13 + 88));
        sub_929188(v13 + 76);
        sub_92928C(v13 + 3);
        if (*((char *)v13 + 23) < 0) {
          operator delete(*v13);
        }
        long long v14 = (char *)(v13 - 1);
        v13 -= 266;
      }
      while (v14 != v12);
      uint64_t v10 = v12;
    }
  }
  if (v10) {
    operator delete(v10);
  }
  return v17 + 2128;
}

void sub_981A24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_981BE4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_981A38(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_4200((unsigned char *)(a1 + 8), *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  sub_928EE4(a1 + 32, a2 + 32);
  sub_929078((void *)(a1 + 616), (uint64_t *)(a2 + 616));
  sub_4F58AC(a1 + 712, a2 + 712);
  *(unsigned char *)(a1 + 872) = *(unsigned char *)(a2 + 872);
  *(void *)(a1 + 880) = 0;
  *(void *)(a1 + 896) = 0;
  *(void *)(a1 + 888) = 0;
  uint64_t v5 = *(unsigned char **)(a2 + 880);
  unint64_t v6 = *(unsigned char **)(a2 + 888);
  int64_t v7 = v6 - v5;
  if (v6 != v5)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v7 >> 2) >= 0x1555555555555556) {
      sub_2E00();
    }
    uint64_t v8 = (char *)operator new(v7);
    *(void *)(a1 + 880) = v8;
    *(void *)(a1 + 888) = v8;
    uint64_t v9 = &v8[4 * (v7 >> 2)];
    *(void *)(a1 + 896) = v9;
    memcpy(v8, v5, v7);
    *(void *)(a1 + 888) = v9;
  }
  long long v10 = *(_OWORD *)(a2 + 904);
  *(void *)(a1 + 920) = *(void *)(a2 + 920);
  *(_OWORD *)(a1 + 904) = v10;
  sub_9299FC(a1 + 928, a2 + 928);
  return a1;
}

void sub_981B84(_Unwind_Exception *a1)
{
  unint64_t v6 = *v4;
  if (*v4)
  {
    *(void *)(v2 + 888) = v6;
    operator delete(v6);
  }
  sub_92853C(v3);
  if (*(char *)(v2 + 31) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(a1);
}

void **sub_981BE4(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

double sub_981C18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a2 = *(_DWORD *)a3;
  long long v5 = *(_OWORD *)(a3 + 8);
  *(void *)(a2 + 24) = *(void *)(a3 + 24);
  *(_OWORD *)(a2 + 8) = v5;
  *(_OWORD *)(a3 + 16) = 0u;
  *(void *)(a3 + 8) = 0;
  sub_981E40(a2 + 32, a3 + 32);
  *(void *)(a2 + 632) = 0;
  *(_OWORD *)(a2 + 616) = 0u;
  *(void *)(a2 + 616) = *(void *)(a3 + 616);
  *(void *)(a2 + 624) = *(void *)(a3 + 624);
  *(void *)(a2 + 632) = *(void *)(a3 + 632);
  *(void *)(a3 + 632) = 0;
  *(_OWORD *)(a3 + 616) = 0u;
  *(void *)(a2 + 656) = 0;
  *(_OWORD *)(a2 + 640) = 0u;
  *(_OWORD *)(a2 + 640) = *(_OWORD *)(a3 + 640);
  *(void *)(a2 + 656) = *(void *)(a3 + 656);
  *(void *)(a3 + 656) = 0;
  *(_OWORD *)(a3 + 640) = 0u;
  *(void *)(a2 + 680) = 0;
  *(_OWORD *)(a2 + 664) = 0u;
  *(void *)(a2 + 664) = *(void *)(a3 + 664);
  *(void *)(a2 + 672) = *(void *)(a3 + 672);
  *(void *)(a2 + 680) = *(void *)(a3 + 680);
  *(void *)(a3 + 680) = 0;
  *(_OWORD *)(a3 + 664) = 0u;
  *(void *)(a2 + 704) = 0;
  *(_OWORD *)(a2 + 688) = 0u;
  *(_OWORD *)(a2 + 688) = *(_OWORD *)(a3 + 688);
  *(void *)(a2 + 704) = *(void *)(a3 + 704);
  *(void *)(a3 + 704) = 0;
  *(_OWORD *)(a3 + 688) = 0u;
  *(void *)(a2 + 728) = 0;
  *(_OWORD *)(a2 + 712) = 0u;
  *(void *)(a2 + 712) = *(void *)(a3 + 712);
  *(void *)(a2 + 720) = *(void *)(a3 + 720);
  *(void *)(a2 + 728) = *(void *)(a3 + 728);
  *(void *)(a3 + 728) = 0;
  *(_OWORD *)(a3 + 712) = 0u;
  *(void *)(a2 + 752) = 0;
  *(_OWORD *)(a2 + 736) = 0u;
  *(_OWORD *)(a2 + 736) = *(_OWORD *)(a3 + 736);
  *(void *)(a2 + 752) = *(void *)(a3 + 752);
  *(void *)(a3 + 752) = 0;
  *(_OWORD *)(a3 + 736) = 0u;
  *(void *)(a2 + 776) = 0;
  *(_OWORD *)(a2 + 760) = 0u;
  *(void *)(a2 + 760) = *(void *)(a3 + 760);
  *(void *)(a2 + 768) = *(void *)(a3 + 768);
  *(void *)(a2 + 776) = *(void *)(a3 + 776);
  *(void *)(a3 + 776) = 0;
  *(_OWORD *)(a3 + 760) = 0u;
  *(void *)(a2 + 800) = 0;
  *(_OWORD *)(a2 + 784) = 0u;
  *(_OWORD *)(a2 + 784) = *(_OWORD *)(a3 + 784);
  *(void *)(a2 + 800) = *(void *)(a3 + 800);
  uint64_t v6 = *(void *)(a3 + 808);
  *(_OWORD *)(a3 + 784) = 0u;
  *(_OWORD *)(a3 + 800) = 0u;
  *(void *)(a2 + 808) = v6;
  LODWORD(v6) = *(_DWORD *)(a3 + 816);
  *(unsigned char *)(a2 + 820) = *(unsigned char *)(a3 + 820);
  *(_DWORD *)(a2 + 816) = v6;
  long long v7 = *(_OWORD *)(a3 + 824);
  *(void *)(a2 + 840) = *(void *)(a3 + 840);
  *(_OWORD *)(a2 + 824) = v7;
  *(void *)(a3 + 824) = 0;
  *(_OWORD *)(a3 + 832) = 0u;
  long long v8 = *(_OWORD *)(a3 + 848);
  *(void *)(a2 + 864) = *(void *)(a3 + 864);
  *(_OWORD *)(a2 + 848) = v8;
  *(_OWORD *)(a3 + 856) = 0u;
  *(void *)(a3 + 848) = 0;
  *(unsigned char *)(a2 + 872) = *(unsigned char *)(a3 + 872);
  *(void *)(a2 + 880) = 0;
  *(_OWORD *)(a2 + 888) = 0u;
  *(_OWORD *)(a2 + 880) = *(_OWORD *)(a3 + 880);
  *(void *)(a2 + 896) = *(void *)(a3 + 896);
  *(void *)(a3 + 896) = 0;
  *(_OWORD *)(a3 + 880) = 0u;
  long long v9 = *(_OWORD *)(a3 + 904);
  *(void *)(a2 + 920) = *(void *)(a3 + 920);
  *(_OWORD *)(a2 + 904) = v9;

  *(void *)&double result = sub_982160(a2 + 928, a3 + 928).n128_u64[0];
  return result;
}

__n128 sub_981E40(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)a2 = 0u;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 48) = 0u;
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 72) = 0u;
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 112) = 0;
  *(_OWORD *)(a2 + 96) = 0u;
  *(void *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a2 + 136) = 0;
  *(_OWORD *)(a2 + 120) = 0u;
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a2 + 160) = 0;
  *(_OWORD *)(a2 + 144) = 0u;
  *(void *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(_OWORD *)(a2 + 168) = 0u;
  uint64_t v2 = *(void *)(a2 + 192);
  *(_OWORD *)(a2 + 184) = 0u;
  *(void *)(a1 + 192) = v2;
  LODWORD(v2) = *(_DWORD *)(a2 + 200);
  *(unsigned char *)(a1 + 204) = *(unsigned char *)(a2 + 204);
  *(_DWORD *)(a1 + 200) = v2;
  long long v3 = *(_OWORD *)(a2 + 208);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = v3;
  *(void *)(a2 + 208) = 0;
  *(_OWORD *)(a2 + 216) = 0u;
  long long v4 = *(_OWORD *)(a2 + 232);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = v4;
  *(_OWORD *)(a2 + 240) = 0u;
  *(void *)(a2 + 232) = 0;
  *(void *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a2 + 272) = 0;
  *(_OWORD *)(a2 + 256) = 0u;
  *(void *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 280) = 0u;
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  *(void *)(a2 + 296) = 0;
  *(_OWORD *)(a2 + 280) = 0u;
  *(void *)(a1 + 320) = 0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  *(void *)(a2 + 320) = 0;
  *(_OWORD *)(a2 + 304) = 0u;
  *(void *)(a1 + 344) = 0;
  *(_OWORD *)(a1 + 328) = 0u;
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  *(_OWORD *)(a2 + 328) = 0u;
  uint64_t v5 = *(void *)(a2 + 352);
  *(_OWORD *)(a2 + 344) = 0u;
  *(void *)(a1 + 352) = v5;
  LODWORD(v5) = *(_DWORD *)(a2 + 360);
  *(unsigned char *)(a1 + 364) = *(unsigned char *)(a2 + 364);
  *(_DWORD *)(a1 + 360) = v5;
  long long v6 = *(_OWORD *)(a2 + 368);
  *(void *)(a1 + 384) = *(void *)(a2 + 384);
  *(_OWORD *)(a1 + 368) = v6;
  *(void *)(a2 + 368) = 0;
  *(_OWORD *)(a2 + 376) = 0u;
  long long v7 = *(_OWORD *)(a2 + 392);
  *(void *)(a1 + 408) = *(void *)(a2 + 408);
  *(_OWORD *)(a1 + 392) = v7;
  *(_OWORD *)(a2 + 400) = 0u;
  *(void *)(a2 + 392) = 0;
  *(void *)(a1 + 432) = 0;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
  *(void *)(a1 + 432) = *(void *)(a2 + 432);
  *(void *)(a2 + 432) = 0;
  *(_OWORD *)(a2 + 416) = 0u;
  *(void *)(a1 + 456) = 0;
  *(_OWORD *)(a1 + 440) = 0u;
  *(void *)(a1 + 440) = *(void *)(a2 + 440);
  *(void *)(a1 + 448) = *(void *)(a2 + 448);
  *(void *)(a1 + 456) = *(void *)(a2 + 456);
  *(void *)(a2 + 456) = 0;
  *(_OWORD *)(a2 + 440) = 0u;
  *(void *)(a1 + 480) = 0;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(void *)(a1 + 480) = *(void *)(a2 + 480);
  *(void *)(a2 + 480) = 0;
  *(_OWORD *)(a2 + 464) = 0u;
  *(void *)(a1 + 504) = 0;
  *(_OWORD *)(a1 + 488) = 0u;
  *(void *)(a1 + 488) = *(void *)(a2 + 488);
  *(void *)(a1 + 496) = *(void *)(a2 + 496);
  *(void *)(a1 + 504) = *(void *)(a2 + 504);
  *(_OWORD *)(a2 + 488) = 0u;
  uint64_t v8 = *(void *)(a2 + 512);
  *(_OWORD *)(a2 + 504) = 0u;
  *(void *)(a1 + 512) = v8;
  LODWORD(v2) = *(_DWORD *)(a2 + 520);
  *(unsigned char *)(a1 + 524) = *(unsigned char *)(a2 + 524);
  *(_DWORD *)(a1 + 520) = v2;
  long long v9 = *(_OWORD *)(a2 + 528);
  *(void *)(a1 + 544) = *(void *)(a2 + 544);
  *(_OWORD *)(a1 + 528) = v9;
  *(void *)(a2 + 528) = 0;
  *(void *)(a2 + 544) = 0;
  *(void *)(a2 + 536) = 0;
  __n128 result = *(__n128 *)(a2 + 552);
  *(void *)(a1 + 568) = *(void *)(a2 + 568);
  *(__n128 *)(a1 + 552) = result;
  *(void *)(a2 + 568) = 0;
  *(void *)(a2 + 560) = 0;
  *(void *)(a2 + 552) = 0;
  *(unsigned char *)(a1 + 576) = *(unsigned char *)(a2 + 576);
  return result;
}

__n128 sub_982160(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v2 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 24) = v2;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = 0;
  *(_OWORD *)(a2 + 56) = 0u;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a2 + 96) = 0;
  *(_OWORD *)(a2 + 80) = 0u;
  *(void *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a2 + 120) = 0;
  *(_OWORD *)(a2 + 104) = 0u;
  *(void *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  uint64_t v3 = *(void *)(a2 + 152);
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(void *)(a1 + 152) = v3;
  LODWORD(v3) = *(_DWORD *)(a2 + 160);
  *(unsigned char *)(a1 + 164) = *(unsigned char *)(a2 + 164);
  *(_DWORD *)(a1 + 160) = v3;
  long long v4 = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = v4;
  *(void *)(a2 + 168) = 0;
  *(_OWORD *)(a2 + 176) = 0u;
  long long v5 = *(_OWORD *)(a2 + 192);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = v5;
  *(_OWORD *)(a2 + 200) = 0u;
  *(void *)(a2 + 192) = 0;
  *(void *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  long long v7 = *(_OWORD *)(a2 + 216);
  uint64_t v6 = a2 + 216;
  *(_OWORD *)(a1 + 216) = v7;
  *(void *)(a1 + 232) = *(void *)(v6 + 16);
  *(void *)(v6 + 16) = 0;
  *(_OWORD *)uint64_t v6 = 0u;
  *(void *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(v6 + 24);
  *(void *)(a1 + 256) = *(void *)(v6 + 40);
  *(void *)(v6 + 40) = 0;
  *(_OWORD *)(v6 + 24) = 0u;
  *(void *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  uint64_t v8 = *(void *)(v6 + 56);
  *(void *)(a1 + 264) = *(void *)(v6 + 48);
  *(void *)(a1 + 272) = v8;
  *(void *)(a1 + 280) = *(void *)(v6 + 64);
  *(void *)(v6 + 64) = 0;
  *(_OWORD *)(v6 + 48) = 0u;
  *(void *)(a1 + 304) = 0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(v6 + 72);
  *(void *)(a1 + 304) = *(void *)(v6 + 88);
  *(_OWORD *)(v6 + 72) = 0u;
  uint64_t v9 = *(void *)(v6 + 96);
  *(_OWORD *)(v6 + 88) = 0u;
  *(void *)(a1 + 312) = v9;
  LODWORD(v9) = *(_DWORD *)(v6 + 104);
  *(unsigned char *)(a1 + 324) = *(unsigned char *)(v6 + 108);
  *(_DWORD *)(a1 + 320) = v9;
  long long v10 = *(_OWORD *)(v6 + 112);
  *(void *)(a1 + 344) = *(void *)(v6 + 128);
  *(_OWORD *)(a1 + 328) = v10;
  *(void *)(v6 + 112) = 0;
  *(_OWORD *)(v6 + 120) = 0u;
  long long v11 = *(_OWORD *)(v6 + 136);
  *(void *)(a1 + 368) = *(void *)(v6 + 152);
  *(_OWORD *)(a1 + 352) = v11;
  *(_OWORD *)(v6 + 144) = 0u;
  *(void *)(v6 + 136) = 0;
  *(void *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 376) = 0u;
  *(void *)(a1 + 376) = *(void *)(v6 + 160);
  *(void *)(a1 + 384) = *(void *)(v6 + 168);
  *(void *)(a1 + 392) = *(void *)(v6 + 176);
  *(void *)(v6 + 176) = 0;
  *(_OWORD *)(v6 + 160) = 0u;
  *(void *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(v6 + 184);
  *(void *)(a1 + 416) = *(void *)(v6 + 200);
  *(void *)(v6 + 200) = 0;
  *(_OWORD *)(v6 + 184) = 0u;
  *(void *)(a1 + 440) = 0;
  *(_OWORD *)(a1 + 424) = 0u;
  *(void *)(a1 + 424) = *(void *)(v6 + 208);
  *(void *)(a1 + 432) = *(void *)(v6 + 216);
  *(void *)(a1 + 440) = *(void *)(v6 + 224);
  *(void *)(v6 + 224) = 0;
  *(_OWORD *)(v6 + 208) = 0u;
  *(void *)(a1 + 464) = 0;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 448) = *(_OWORD *)(v6 + 232);
  *(void *)(a1 + 464) = *(void *)(v6 + 248);
  *(_OWORD *)(v6 + 232) = 0u;
  uint64_t v12 = *(void *)(v6 + 256);
  *(_OWORD *)(v6 + 248) = 0u;
  *(void *)(a1 + 472) = v12;
  LODWORD(v12) = *(_DWORD *)(v6 + 264);
  *(unsigned char *)(a1 + 484) = *(unsigned char *)(v6 + 268);
  *(_DWORD *)(a1 + 480) = v12;
  long long v13 = *(_OWORD *)(v6 + 272);
  *(void *)(a1 + 504) = *(void *)(v6 + 288);
  *(_OWORD *)(a1 + 488) = v13;
  *(void *)(v6 + 272) = 0;
  *(_OWORD *)(v6 + 280) = 0u;
  long long v14 = *(_OWORD *)(v6 + 296);
  *(void *)(a1 + 528) = *(void *)(v6 + 312);
  *(_OWORD *)(a1 + 512) = v14;
  *(_OWORD *)(v6 + 304) = 0u;
  *(void *)(v6 + 296) = 0;
  *(unsigned char *)(a1 + 536) = *(unsigned char *)(v6 + 320);
  *(void *)(a1 + 544) = 0;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 544) = *(_OWORD *)(v6 + 328);
  *(void *)(a1 + 560) = *(void *)(v6 + 344);
  *(void *)(v6 + 344) = 0;
  *(_OWORD *)(v6 + 328) = 0u;
  *(void *)(a1 + 584) = 0;
  *(_OWORD *)(a1 + 568) = 0u;
  uint64_t v15 = *(void *)(v6 + 360);
  *(void *)(a1 + 568) = *(void *)(v6 + 352);
  *(void *)(a1 + 576) = v15;
  *(void *)(a1 + 584) = *(void *)(v6 + 368);
  *(void *)(v6 + 368) = 0;
  *(_OWORD *)(v6 + 352) = 0u;
  *(void *)(a1 + 608) = 0;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 592) = *(_OWORD *)(v6 + 376);
  *(void *)(a1 + 608) = *(void *)(v6 + 392);
  *(void *)(v6 + 392) = 0;
  *(_OWORD *)(v6 + 376) = 0u;
  *(void *)(a1 + 632) = 0;
  *(_OWORD *)(a1 + 616) = 0u;
  uint64_t v16 = *(void *)(v6 + 408);
  *(void *)(a1 + 616) = *(void *)(v6 + 400);
  *(void *)(a1 + 624) = v16;
  *(void *)(a1 + 632) = *(void *)(v6 + 416);
  uint64_t v17 = *(void *)(v6 + 424);
  *(_OWORD *)(v6 + 400) = 0u;
  *(_OWORD *)(v6 + 416) = 0u;
  *(void *)(a1 + 640) = v17;
  LODWORD(v17) = *(_DWORD *)(v6 + 432);
  *(unsigned char *)(a1 + 652) = *(unsigned char *)(v6 + 436);
  *(_DWORD *)(a1 + 648) = v17;
  long long v18 = *(_OWORD *)(v6 + 440);
  *(void *)(a1 + 672) = *(void *)(v6 + 456);
  *(_OWORD *)(a1 + 656) = v18;
  *(void *)(v6 + 440) = 0;
  *(_OWORD *)(v6 + 448) = 0u;
  long long v19 = *(_OWORD *)(v6 + 464);
  *(void *)(a1 + 696) = *(void *)(v6 + 480);
  *(_OWORD *)(a1 + 680) = v19;
  *(_OWORD *)(v6 + 472) = 0u;
  *(void *)(v6 + 464) = 0;
  *(void *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 704) = *(_OWORD *)(v6 + 488);
  *(void *)(a1 + 720) = *(void *)(v6 + 504);
  *(void *)(v6 + 504) = 0;
  *(_OWORD *)(v6 + 488) = 0u;
  *(void *)(a1 + 744) = 0;
  *(_OWORD *)(a1 + 728) = 0u;
  *(void *)(a1 + 728) = *(void *)(v6 + 512);
  *(void *)(a1 + 736) = *(void *)(v6 + 520);
  *(void *)(a1 + 744) = *(void *)(v6 + 528);
  *(void *)(v6 + 528) = 0;
  *(_OWORD *)(v6 + 512) = 0u;
  *(void *)(a1 + 768) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 752) = *(_OWORD *)(v6 + 536);
  *(void *)(a1 + 768) = *(void *)(v6 + 552);
  *(void *)(v6 + 552) = 0;
  *(_OWORD *)(v6 + 536) = 0u;
  *(void *)(a1 + 792) = 0;
  *(_OWORD *)(a1 + 776) = 0u;
  *(void *)(a1 + 776) = *(void *)(v6 + 560);
  *(void *)(a1 + 784) = *(void *)(v6 + 568);
  *(void *)(a1 + 792) = *(void *)(v6 + 576);
  uint64_t v20 = *(void *)(v6 + 584);
  *(_OWORD *)(v6 + 560) = 0u;
  *(_OWORD *)(v6 + 576) = 0u;
  *(void *)(a1 + 800) = v20;
  LODWORD(v20) = *(_DWORD *)(v6 + 592);
  *(unsigned char *)(a1 + 812) = *(unsigned char *)(v6 + 596);
  *(_DWORD *)(a1 + 808) = v20;
  long long v21 = *(_OWORD *)(v6 + 600);
  *(void *)(a1 + 832) = *(void *)(v6 + 616);
  *(_OWORD *)(a1 + 816) = v21;
  *(void *)(v6 + 600) = 0;
  *(_OWORD *)(v6 + 608) = 0u;
  long long v22 = *(_OWORD *)(v6 + 624);
  *(void *)(a1 + 856) = *(void *)(v6 + 640);
  *(_OWORD *)(a1 + 840) = v22;
  *(_OWORD *)(v6 + 632) = 0u;
  *(void *)(v6 + 624) = 0;
  *(unsigned char *)(a1 + 864) = *(unsigned char *)(v6 + 648);
  *(void *)(a1 + 872) = 0;
  *(_OWORD *)(a1 + 880) = 0u;
  *(void *)(a1 + 872) = *(void *)(v6 + 656);
  *(void *)(a1 + 880) = *(void *)(v6 + 664);
  *(void *)(a1 + 888) = *(void *)(v6 + 672);
  *(void *)(v6 + 672) = 0;
  *(_OWORD *)(v6 + 656) = 0u;
  *(void *)(a1 + 912) = 0;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 896) = *(_OWORD *)(v6 + 680);
  *(void *)(a1 + 912) = *(void *)(v6 + 696);
  *(void *)(v6 + 696) = 0;
  *(_OWORD *)(v6 + 680) = 0u;
  *(void *)(a1 + 936) = 0;
  *(_OWORD *)(a1 + 920) = 0u;
  *(void *)(a1 + 920) = *(void *)(v6 + 704);
  *(void *)(a1 + 928) = *(void *)(v6 + 712);
  *(void *)(a1 + 936) = *(void *)(v6 + 720);
  *(void *)(v6 + 720) = 0;
  *(_OWORD *)(v6 + 704) = 0u;
  *(void *)(a1 + 960) = 0;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 944) = *(_OWORD *)(v6 + 728);
  *(void *)(a1 + 960) = *(void *)(v6 + 744);
  *(_OWORD *)(v6 + 728) = 0u;
  uint64_t v23 = *(void *)(v6 + 752);
  *(_OWORD *)(v6 + 744) = 0u;
  *(void *)(a1 + 968) = v23;
  LODWORD(v23) = *(_DWORD *)(v6 + 760);
  *(unsigned char *)(a1 + 980) = *(unsigned char *)(v6 + 764);
  *(_DWORD *)(a1 + 976) = v23;
  long long v24 = *(_OWORD *)(v6 + 768);
  *(void *)(a1 + 1000) = *(void *)(v6 + 784);
  *(_OWORD *)(a1 + 984) = v24;
  *(void *)(v6 + 768) = 0;
  *(_OWORD *)(v6 + 776) = 0u;
  long long v25 = *(_OWORD *)(v6 + 792);
  *(void *)(a1 + 1024) = *(void *)(v6 + 808);
  *(_OWORD *)(a1 + 1008) = v25;
  *(_OWORD *)(v6 + 800) = 0u;
  *(void *)(v6 + 792) = 0;
  *(void *)(a1 + 1048) = 0;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(void *)(a1 + 1032) = *(void *)(v6 + 816);
  *(void *)(a1 + 1040) = *(void *)(v6 + 824);
  *(void *)(a1 + 1048) = *(void *)(v6 + 832);
  *(void *)(v6 + 832) = 0;
  *(_OWORD *)(v6 + 816) = 0u;
  *(void *)(a1 + 1072) = 0;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1056) = *(_OWORD *)(v6 + 840);
  *(void *)(a1 + 1072) = *(void *)(v6 + 856);
  *(void *)(v6 + 856) = 0;
  *(_OWORD *)(v6 + 840) = 0u;
  *(void *)(a1 + 1096) = 0;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(void *)(a1 + 1080) = *(void *)(v6 + 864);
  *(void *)(a1 + 1088) = *(void *)(v6 + 872);
  *(void *)(a1 + 1096) = *(void *)(v6 + 880);
  *(void *)(v6 + 880) = 0;
  *(_OWORD *)(v6 + 864) = 0u;
  *(void *)(a1 + 1120) = 0;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 1104) = *(_OWORD *)(v6 + 888);
  *(void *)(a1 + 1120) = *(void *)(v6 + 904);
  *(_OWORD *)(v6 + 888) = 0u;
  uint64_t v26 = *(void *)(v6 + 912);
  *(_OWORD *)(v6 + 904) = 0u;
  *(void *)(a1 + 1128) = v26;
  LODWORD(v26) = *(_DWORD *)(v6 + 920);
  *(unsigned char *)(a1 + 1140) = *(unsigned char *)(v6 + 924);
  *(_DWORD *)(a1 + 1136) = v26;
  long long v27 = *(_OWORD *)(v6 + 928);
  *(void *)(a1 + 1160) = *(void *)(v6 + 944);
  *(_OWORD *)(a1 + 1144) = v27;
  *(void *)(v6 + 928) = 0;
  *(void *)(v6 + 944) = 0;
  *(void *)(v6 + 936) = 0;
  __n128 result = *(__n128 *)(v6 + 952);
  *(void *)(a1 + 1184) = *(void *)(v6 + 968);
  *(__n128 *)(a1 + 1168) = result;
  *(void *)(v6 + 968) = 0;
  *(void *)(v6 + 960) = 0;
  *(void *)(v6 + 952) = 0;
  *(unsigned char *)(a1 + 1192) = *(unsigned char *)(v6 + 976);
  return result;
}

void sub_9827D8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v1; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 2128;
    sub_92A344((void **)(i - 1200));
    long long v4 = *(void **)(i - 1248);
    if (v4)
    {
      *(void *)(i - 1240) = v4;
      operator delete(v4);
    }
    sub_4D4B58(i - 1416);
    sub_929188((void **)(i - 1512));
    sub_92928C((void **)(i - 2096));
    if (*(char *)(i - 2097) < 0) {
      operator delete(*(void **)(i - 2120));
    }
  }
}

double sub_982878()
{
  byte_25DB0AF = 1;
  word_25DB098 = 65;
  byte_25DB0C7 = 1;
  word_25DB0B0 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25DB158 = 0u;
  *(_OWORD *)&qword_25DB168 = 0u;
  dword_25DB178 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25DB158, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25DB158, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25DB158, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25DB158, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25DB0DF = 8;
  strcpy((char *)&qword_25DB0C8, "any_mode");
  byte_25DB0F7 = 7;
  strcpy((char *)&dword_25DB0E0, "cycling");
  byte_25DB10F = 7;
  strcpy((char *)&dword_25DB0F8, "driving");
  byte_25DB127 = 7;
  strcpy((char *)&dword_25DB110, "walking");
  qword_25DB130 = 0;
  qword_25DB138 = 0;
  qword_25DB128 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25DB128 = (uint64_t)v0;
  qword_25DB130 = (uint64_t)(v0 + 9);
  qword_25DB138 = (uint64_t)(v0 + 9);
  qword_25DB140 = 0;
  qword_25DB148 = 0;
  unk_25DB150 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25DB148 = (uint64_t)(v1 + 9);
  unk_25DB150 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25DB140 = (uint64_t)v1;
  return result;
}

void sub_982B40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25DB168) {
    sub_20ACF3C((void **)qword_25DB168);
  }
  long long v37 = (void *)xmmword_25DB158;
  *(void *)&xmmword_25DB158 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_982BE0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = sub_3758AC(a2);
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a4;
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 11;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 11;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  char v7 = operator new(8uLL);
  *(void *)(a1 + 72) = v7;
  *v7++ = 0x200000001;
  *(void *)(a1 + 80) = v7;
  *(void *)(a1 + 88) = v7;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  nullsub_1(a1 + 128);
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_DWORD *)(a1 + 168) = 1065353216;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(void *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 232) = 1065353216;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 240) = 0;
  return a1;
}

void sub_982CB4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 119) < 0)
  {
    operator delete(*v4);
    uint64_t v6 = *v3;
    if (!*v3)
    {
LABEL_3:
      char v7 = *v2;
      if (!*v2) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v6 = *v3;
    if (!*v3) {
      goto LABEL_3;
    }
  }
  *(void *)(v1 + 80) = v6;
  operator delete(v6);
  char v7 = *v2;
  if (!*v2) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  *(void *)(v1 + 48) = v7;
  operator delete(v7);
  _Unwind_Resume(exception_object);
}

void sub_982D08(uint64_t a1, uint64_t a2, unsigned int **a3, int *a4)
{
  if (!*(void *)(*(void *)a1 + 11688)) {
    return;
  }
  int v8 = *a4;
  *(_DWORD *)(a1 + 32) = *a4;
  *(_DWORD *)(a1 + 24) = v8;
  if ((int *)(a1 + 32) == a4)
  {
    *(_DWORD *)(a1 + 64) = a4[8];
  }
  else
  {
    sub_326C0((void *)(a1 + 40), *((char **)a4 + 1), *((char **)a4 + 2), (uint64_t)(*((void *)a4 + 2) - *((void *)a4 + 1)) >> 3);
    *(_DWORD *)(a1 + 64) = a4[8];
    sub_147D0((void *)(a1 + 72), *((char **)a4 + 5), *((char **)a4 + 6), (uint64_t)(*((void *)a4 + 6) - *((void *)a4 + 5)) >> 2);
  }
  std::string::operator=((std::string *)(a1 + 96), (const std::string *)(a4 + 16));
  *(unsigned char *)(a1 + 120) = *((unsigned char *)a4 + 88);
  if (*(void *)(a1 + 160))
  {
    uint64_t v9 = *(void **)(a1 + 152);
    if (v9)
    {
      do
      {
        char v10 = (void *)*v9;
        operator delete(v9);
        uint64_t v9 = v10;
      }
      while (v10);
    }
    *(void *)(a1 + 152) = 0;
    uint64_t v11 = *(void *)(a1 + 144);
    if (v11)
    {
      for (uint64_t i = 0; i != v11; ++i)
        *(void *)(*(void *)(a1 + 136) + 8 * i) = 0;
    }
    *(void *)(a1 + 160) = 0;
  }
  uint64_t v13 = *(void *)(a1 + 176);
  uint64_t v62 = a2;
  char v63 = (uint64_t *)(a1 + 176);
  for (uint64_t j = *(void *)(a1 + 184); j != v13; uint64_t j = sub_361164(j - 456))
    ;
  *(void *)(a1 + 184) = v13;
  sub_9833E0((void *)(a1 + 200));
  int v72 = 0;
  int v73 = 0;
  int v74 = 0;
  uint64_t v17 = a3;
  uint64_t v16 = *a3;
  uint64_t v15 = v17[1];
  uint64_t v64 = v15;
  uint64_t v18 = (char *)v15 - (char *)v16;
  if (v15 == v16) {
    goto LABEL_68;
  }
  if (v18 < 0) {
    sub_2E00();
  }
  int v72 = operator new((char *)v15 - (char *)v16);
  int v73 = (char *)v72;
  int v74 = (char *)v72 + 8 * (v18 >> 3);
  do
  {
    uint64_t v20 = *(void **)(*(void *)a1 + 11688);
    unint64_t v21 = *v16;
    if (*((unsigned char *)v16 + 4))
    {
      uint64_t v22 = v20[1];
      if (0x823EE08FB823EE09 * ((v20[2] - v22) >> 3) <= v21) {
        goto LABEL_78;
      }
    }
    else
    {
      uint64_t v22 = v20[4];
      if (0x823EE08FB823EE09 * ((v20[5] - v22) >> 3) <= v21) {
LABEL_78:
      }
        sub_66748();
    }
    uint64_t v23 = sub_985618((void *)(a1 + 136), v16);
    if (v23)
    {
      long long v24 = (void *)v23[3];
      uint64_t v26 = v73;
      long long v25 = v74;
      if (v73 < v74) {
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v27 = v22 + 456 * v21;
      unint64_t v28 = *(void *)(a1 + 184);
      __p[0] = (void *)(0x823EE08FB823EE09 * ((uint64_t)(v28 - *(void *)(a1 + 176)) >> 3));
      if (v28 >= *(void *)(a1 + 192))
      {
        uint64_t v29 = sub_985734(v63, v27);
      }
      else
      {
        sub_3623F8(v28, v27);
        uint64_t v29 = v28 + 456;
        *(void *)(a1 + 184) = v28 + 456;
      }
      *(void *)(a1 + 184) = v29;
      sub_9858A4(a1 + 136, v16, v16, (uint64_t *)__p);
      long long v24 = __p[0];
      uint64_t v26 = v73;
      long long v25 = v74;
      if (v73 < v74)
      {
LABEL_17:
        *(void *)uint64_t v26 = v24;
        long long v19 = v26 + 8;
        goto LABEL_18;
      }
    }
    long long v30 = (char *)v72;
    int64_t v31 = v26 - (unsigned char *)v72;
    uint64_t v32 = (v26 - (unsigned char *)v72) >> 3;
    unint64_t v33 = v32 + 1;
    if ((unint64_t)(v32 + 1) >> 61) {
      sub_2E00();
    }
    uint64_t v34 = v25 - (unsigned char *)v72;
    if (v34 >> 2 > v33) {
      unint64_t v33 = v34 >> 2;
    }
    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v35 = v33;
    }
    if (v35)
    {
      if (v35 >> 61) {
        sub_188D718();
      }
      long long v36 = operator new(8 * v35);
      long long v37 = &v36[8 * v32];
      *(void *)long long v37 = v24;
      long long v19 = v37 + 8;
      if (v26 == v30) {
        goto LABEL_47;
      }
LABEL_41:
      unint64_t v38 = v26 - 8 - v30;
      if (v38 < 0x58) {
        goto LABEL_84;
      }
      if ((unint64_t)(v26 - &v36[v31]) < 0x20) {
        goto LABEL_84;
      }
      uint64_t v39 = (v38 >> 3) + 1;
      uint64_t v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
      long long v41 = &v26[-v40];
      v37 -= v40;
      char v42 = &v36[8 * v32 - 16];
      long long v43 = v26 - 16;
      uint64_t v44 = v39 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v45 = *(_OWORD *)v43;
        *(v42 - 1) = *((_OWORD *)v43 - 1);
        *char v42 = v45;
        v42 -= 2;
        v43 -= 32;
        v44 -= 4;
      }
      while (v44);
      uint64_t v26 = v41;
      if (v39 != (v39 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_84:
        do
        {
          uint64_t v46 = *((void *)v26 - 1);
          v26 -= 8;
          *((void *)v37 - 1) = v46;
          v37 -= 8;
        }
        while (v26 != v30);
      }
      goto LABEL_47;
    }
    long long v36 = 0;
    long long v37 = (char *)(8 * v32);
    *(void *)(8 * v32) = v24;
    long long v19 = (char *)(8 * v32 + 8);
    if (v26 != v30) {
      goto LABEL_41;
    }
LABEL_47:
    int v72 = v37;
    int v73 = v19;
    int v74 = &v36[8 * v35];
    if (v30) {
      operator delete(v30);
    }
LABEL_18:
    int v73 = v19;
    v16 += 2;
  }
  while (v16 != v64);
  long long v47 = v72;
  if (v72 == v19) {
    goto LABEL_68;
  }
  if (*(void *)v62 == *(void *)(v62 + 8))
  {
    int v66 = 0;
    int v67 = 0;
    uint64_t v65 = 0;
    uint64_t v55 = v19 - (unsigned char *)v72;
    if (v19 - (unsigned char *)v72 < 0) {
      sub_2E00();
    }
    int v56 = (char *)operator new(v19 - (unsigned char *)v72);
    int v57 = &v56[8 * (v55 >> 3)];
    uint64_t v65 = v56;
    int v67 = v57;
    memcpy(v56, v47, v19 - (unsigned char *)v47);
    int v66 = v57;
    sub_9834B4((void *)a1, (uint64_t)&v65, (uint64_t)__p);
    int v58 = (void **)(v62 + 352);
    if (*(char *)(v62 + 375) < 0) {
      operator delete(*v58);
    }
    *(_OWORD *)int v58 = *(_OWORD *)__p;
    *(void *)(v62 + 368) = v69;
    HIBYTE(v69) = 0;
    LOBYTE(__p[0]) = 0;
    __n128 v59 = (void *)(v62 + 376);
    BOOL v60 = *(void **)(v62 + 376);
    if (v60)
    {
      *(void *)(v62 + 384) = v60;
      operator delete(v60);
      void *v59 = 0;
      *(void *)(v62 + 384) = 0;
      *(void *)(v62 + 392) = 0;
      int v61 = SHIBYTE(v69);
      *(_OWORD *)__n128 v59 = v70;
      *(void *)(v62 + 392) = v71;
      long long v70 = 0uLL;
      uint64_t v71 = 0;
      if (v61 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      *(_OWORD *)__n128 v59 = v70;
      *(void *)(v62 + 392) = v71;
      uint64_t v71 = 0;
      long long v70 = 0uLL;
    }
    if (v65)
    {
      int v66 = v65;
      operator delete(v65);
    }
    goto LABEL_68;
  }
  sub_983694((void *)a1, (char **)&v72, 0, (uint64_t)__p);
  uint64_t v48 = (void **)(v62 + 352);
  if (*(char *)(v62 + 375) < 0) {
    operator delete(*v48);
  }
  *(_OWORD *)uint64_t v48 = *(_OWORD *)__p;
  *(void *)(v62 + 368) = v69;
  HIBYTE(v69) = 0;
  LOBYTE(__p[0]) = 0;
  long long v49 = (_OWORD *)(v62 + 376);
  uint64_t v50 = *(void **)(v62 + 376);
  if (!v50)
  {
    *long long v49 = v70;
    *(void *)(v62 + 392) = v71;
    uint64_t v71 = 0;
    long long v70 = 0uLL;
    uint64_t v52 = v62;
    int v54 = *(void **)v62;
    uint64_t v53 = *(void **)(v62 + 8);
    if (*(void **)v62 != v53) {
      goto LABEL_69;
    }
    goto LABEL_70;
  }
  *(void *)(v62 + 384) = v50;
  operator delete(v50);
  *(void *)long long v49 = 0;
  *(void *)(v62 + 384) = 0;
  *(void *)(v62 + 392) = 0;
  int v51 = SHIBYTE(v69);
  *long long v49 = v70;
  *(void *)(v62 + 392) = v71;
  long long v70 = 0uLL;
  uint64_t v71 = 0;
  if ((v51 & 0x80000000) == 0)
  {
LABEL_68:
    uint64_t v52 = v62;
    int v54 = *(void **)v62;
    uint64_t v53 = *(void **)(v62 + 8);
    if (*(void **)v62 == v53) {
      goto LABEL_70;
    }
    goto LABEL_69;
  }
  operator delete(__p[0]);
  uint64_t v52 = v62;
  int v54 = *(void **)v62;
  uint64_t v53 = *(void **)(v62 + 8);
  if (*(void **)v62 == v53) {
    goto LABEL_70;
  }
  do
  {
LABEL_69:
    sub_9839CC(a1, v54, (char **)&v72);
    v54 += 390;
  }
  while (v54 != v53);
LABEL_70:
  if ((uint64_t *)(v52 + 216) != v63) {
    sub_985C04((uint64_t *)(v52 + 216), *(void *)(a1 + 176), *(void *)(a1 + 184), 0x823EE08FB823EE09 * ((uint64_t)(*(void *)(a1 + 184) - *(void *)(a1 + 176)) >> 3));
  }
  if (v52 != a1) {
    sub_986554(v52 + 240, *(std::string **)(a1 + 240), *(std::string **)(a1 + 248), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 248) - *(void *)(a1 + 240)) >> 4));
  }
  if (v72)
  {
    int v73 = (char *)v72;
    operator delete(v72);
  }
}

void sub_983368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (__p)
  {
    operator delete(__p);
    long long v24 = a22;
    if (!a22) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    long long v24 = a22;
    if (!a22) {
      goto LABEL_3;
    }
  }
  operator delete(v24);
  _Unwind_Resume(exception_object);
}

void sub_9833E0(void *a1)
{
  if (a1[3])
  {
    uint64_t v2 = (char *)a1[2];
    if (v2)
    {
      do
      {
        int v8 = *(char **)v2;
        uint64_t v9 = (void *)*((void *)v2 + 5);
        if (v9)
        {
          *((void *)v2 + 6) = v9;
          operator delete(v9);
        }
        if (v2[39] < 0) {
          operator delete(*((void **)v2 + 2));
        }
        operator delete(v2);
        uint64_t v2 = v8;
      }
      while (v8);
    }
    a1[2] = 0;
    uint64_t v3 = a1[1];
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*a1 + 8 * i) = 0;
    }
    a1[3] = 0;
  }
  uint64_t v5 = a1[5];
  for (uint64_t j = a1[6]; j != v5; j -= 48)
  {
    char v7 = *(void **)(j - 24);
    if (v7)
    {
      *(void *)(j - 16) = v7;
      operator delete(v7);
    }
    if (*(char *)(j - 25) < 0) {
      operator delete(*(void **)(j - 48));
    }
  }
  a1[6] = v5;
}

__n128 sub_9834B4@<Q0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  uint64_t v6 = *(unint64_t **)a2;
  char v7 = *(unint64_t **)(a2 + 8);
  v16[0] = a1;
  if ((char *)v7 - (char *)v6 < 1025)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v8 = 0;
  }
  else
  {
    unint64_t v8 = v7 - v6;
    while (1)
    {
      uint64_t v9 = (unint64_t *)operator new(8 * v8, &std::nothrow);
      if (v9) {
        break;
      }
      BOOL v10 = v8 > 1;
      v8 >>= 1;
      if (!v10) {
        goto LABEL_5;
      }
    }
    uint64_t v11 = v9;
  }
  sub_987CA4(v6, v7, (uint64_t)v16, v7 - v6, v11, v8);
  if (v11) {
    operator delete(v11);
  }
  uint64_t v12 = a1[22];
  unint64_t v13 = **(void **)a2;
  if (0x823EE08FB823EE09 * ((a1[23] - v12) >> 3) <= v13) {
    sub_66748();
  }
  sub_997840(v12 + 456 * v13 + 272, (uint64_t)(a1 + 4), (uint64_t)v16);
  if (*(char *)(a3 + 23) < 0) {
    operator delete(*(void **)a3);
  }
  *(_OWORD *)a3 = *(_OWORD *)v16;
  *(void *)(a3 + 16) = v17;
  HIBYTE(v17) = 0;
  LOBYTE(v16[0]) = 0;
  if (v19 < 0)
  {
    operator delete(__p);
    if (SHIBYTE(v17) < 0) {
      operator delete(v16[0]);
    }
  }
  int v14 = *(void **)(a3 + 24);
  if (v14)
  {
    operator delete(v14);
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
  }
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a3 + 24) = *(_OWORD *)a2;
  *(void *)(a3 + 40) = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  return result;
}

void sub_98365C(_Unwind_Exception *a1)
{
  sub_A9338(v1);
  _Unwind_Resume(a1);
}

void sub_983674(_Unwind_Exception *a1)
{
  if (v2) {
    operator delete(v2);
  }
  sub_A9338(v1);
  _Unwind_Resume(a1);
}

void sub_983694(void *a1@<X0>, char **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;
  if ((char **)(a4 + 24) != a2) {
    sub_326C0((void *)(a4 + 24), *a2, a2[1], (a2[1] - *a2) >> 3);
  }
  unint64_t v8 = *a2;
  unint64_t v9 = a2[1] - *a2;
  if (v9 != 8)
  {
    if (v9 < 9) {
      return;
    }
    uint64_t v12 = a1[1];
    *(void *)uint64_t v23 = operator new(0x20uLL);
    *(_OWORD *)&v23[8] = xmmword_20B91C0;
    strcpy(*(char **)v23, "MultipleTransitIncidents");
    unint64_t v13 = (const std::string *)sub_8D7730(v12, (uint64_t)v23);
    std::string::operator=((std::string *)a4, v13);
    if ((v23[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)v23);
      int v14 = *(unint64_t **)(a4 + 24);
      uint64_t v15 = *(unint64_t **)(a4 + 32);
      *(void *)uint64_t v23 = a1;
      unint64_t v16 = v15 - v14;
      if ((char *)v15 - (char *)v14 < 1025)
      {
LABEL_30:
        uint64_t v22 = 0;
        unint64_t v19 = 0;
LABEL_32:
        sub_989290(v14, v15, (uint64_t *)v23, v16, v22, v19);
        if (!v22) {
          return;
        }
        uint64_t v18 = v22;
        goto LABEL_34;
      }
    }
    else
    {
      int v14 = *(unint64_t **)(a4 + 24);
      uint64_t v15 = *(unint64_t **)(a4 + 32);
      *(void *)uint64_t v23 = a1;
      unint64_t v16 = v15 - v14;
      if ((char *)v15 - (char *)v14 < 1025) {
        goto LABEL_30;
      }
    }
    unint64_t v19 = v16;
    while (1)
    {
      uint64_t v20 = (unint64_t *)operator new(8 * v19, &std::nothrow);
      if (v20) {
        break;
      }
      BOOL v21 = v19 > 1;
      v19 >>= 1;
      if (!v21) {
        goto LABEL_30;
      }
    }
    uint64_t v22 = v20;
    goto LABEL_32;
  }
  uint64_t v10 = *(void *)v8;
  uint64_t v11 = a1[22];
  if (0x823EE08FB823EE09 * ((a1[23] - v11) >> 3) <= *(void *)v8) {
    sub_66748();
  }
  if (a3)
  {
    if (a3 != 1) {
      goto LABEL_18;
    }
    sub_997840(v11 + 456 * v10 + 336, (uint64_t)(a1 + 4), (uint64_t)v23);
  }
  else
  {
    sub_997840(v11 + 456 * v10 + 208, (uint64_t)(a1 + 4), (uint64_t)v23);
  }
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(_OWORD *)a4 = *(_OWORD *)v23;
  *(void *)(a4 + 16) = *(void *)&v23[16];
  v23[23] = 0;
  v23[0] = 0;
  if (v25 < 0)
  {
    operator delete(__p);
    if ((v23[23] & 0x80000000) != 0) {
      operator delete(*(void **)v23);
    }
  }
LABEL_18:
  uint64_t v17 = *(unsigned __int8 *)(a4 + 23);
  if ((v17 & 0x80u) != 0) {
    uint64_t v17 = *(void *)(a4 + 8);
  }
  if (!v17)
  {
    sub_997840(v11 + 456 * v10 + 144, (uint64_t)(a1 + 4), (uint64_t)v23);
    if (*(char *)(a4 + 23) < 0) {
      operator delete(*(void **)a4);
    }
    *(_OWORD *)a4 = *(_OWORD *)v23;
    *(void *)(a4 + 16) = *(void *)&v23[16];
    v23[23] = 0;
    v23[0] = 0;
    if (v25 < 0)
    {
      operator delete(__p);
      if ((v23[23] & 0x80000000) != 0)
      {
        uint64_t v18 = *(unint64_t **)v23;
LABEL_34:
        operator delete(v18);
      }
    }
  }
}

void sub_983960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_A9338(v15);
  _Unwind_Resume(a1);
}

void sub_9839CC(uint64_t a1, void *a2, char **a3)
{
  sub_983AF0(a1, a2, &v15);
  uint64_t v6 = a2 + 290;
  char v7 = (void *)a2[290];
  if (v7)
  {
    a2[291] = v7;
    operator delete(v7);
    *uint64_t v6 = 0;
    a2[291] = 0;
    a2[292] = 0;
  }
  a2[290] = v15;
  unint64_t v8 = (void *)v16;
  *(_OWORD *)(a2 + 291) = v16;
  sub_986964(a2 + 290, v8, *a3, a3[1], (a3[1] - *a3) >> 3);
  unint64_t v9 = (unint64_t *)a2[290];
  uint64_t v10 = (unint64_t *)v6[1];
  uint64_t v15 = a1;
  if ((char *)v10 - (char *)v9 < 1025)
  {
LABEL_7:
    int v14 = 0;
    unint64_t v11 = 0;
  }
  else
  {
    unint64_t v11 = v10 - v9;
    while (1)
    {
      uint64_t v12 = (unint64_t *)operator new(8 * v11, &std::nothrow);
      if (v12) {
        break;
      }
      BOOL v13 = v11 > 1;
      v11 >>= 1;
      if (!v13) {
        goto LABEL_7;
      }
    }
    int v14 = v12;
  }
  sub_989290(v9, v10, &v15, v10 - v9, v14, v11);
  if (v14) {
    operator delete(v14);
  }
}

void sub_983AD8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_983AF0(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  long long v82 = 0u;
  long long v83 = 0u;
  int v84 = 1065353216;
  sub_9E6208((uint64_t)v76, a2);
  int v61 = (void **)(a1 + 240);
  int v60 = a1 + 256;
  while (1)
  {
    sub_9E6260((uint64_t)v76, v70);
    BOOL v5 = sub_9E6044(v76, v70);
    sub_9467EC((uint64_t)&v75);
    uint64_t v6 = __p;
    if (__p)
    {
      do
      {
        char v7 = (void *)*v6;
        operator delete(v6);
        uint64_t v6 = v7;
      }
      while (v7);
    }
    unint64_t v8 = (void *)*((void *)&v72 + 1);
    *((void *)&v72 + 1) = 0;
    if (v8) {
      operator delete(v8);
    }
    if (v71[2])
    {
      v71[3] = v71[2];
      operator delete(v71[2]);
    }
    if (!v5) {
      break;
    }
    uint64_t v73 = 0;
    long long v72 = 0u;
    *(_OWORD *)long long v70 = 0u;
    memset(v71, 0, sizeof(v71));
    switch(*(_DWORD *)sub_9E6230((uint64_t)v76))
    {
      case 2:
        uint64_t v9 = sub_9E6230((uint64_t)v76);
        sub_9E57A8((uint64_t)v76, (uint64_t **)&v62);
        sub_984868((char ***)a1, v9, (uint64_t *)&v62, (uint64_t)v64);
        goto LABEL_16;
      case 4:
        sub_9E57A8((uint64_t)v76, (uint64_t **)&v62);
        sub_984E98((uint64_t *)&v62, (uint64_t)v64);
        goto LABEL_16;
      case 6:
        uint64_t v10 = sub_9E6230((uint64_t)v76);
        sub_9E5A94((uint64_t)v76, 2uLL, (char **)&v62);
        sub_985004(a1, v10, (int ***)&v62, (uint64_t)v64);
        goto LABEL_16;
      case 7:
        uint64_t v11 = sub_9E6230((uint64_t)v76);
        sub_9E57A8((uint64_t)v76, (uint64_t **)&v62);
        sub_9853A8(v11, (uint64_t)&v62, (uint64_t)v64);
        goto LABEL_16;
      case 8:
        uint64_t v12 = sub_9E6230((uint64_t)v76);
        sub_9E57A8((uint64_t)v76, (uint64_t **)&v62);
        sub_984BD4(v12, (uint64_t *)&v62, (uint64_t)v64);
LABEL_16:
        if (v70[0])
        {
          v70[1] = v70[0];
          operator delete(v70[0]);
        }
        *(_OWORD *)long long v70 = *(_OWORD *)v64;
        v71[0] = v65;
        v64[1] = 0;
        uint64_t v65 = 0;
        v64[0] = 0;
        if (v71[1])
        {
          v71[2] = v71[1];
          operator delete(v71[1]);
        }
        *(_OWORD *)&v71[1] = *(_OWORD *)v66;
        v71[3] = v67;
        v66[1] = 0;
        int v67 = 0;
        v66[0] = 0;
        BOOL v13 = (void *)v72;
        if ((void)v72)
        {
          *((void *)&v72 + 1) = v72;
          operator delete((void *)v72);
          BOOL v13 = v66[0];
        }
        long long v72 = v68;
        uint64_t v73 = v69;
        uint64_t v69 = 0;
        long long v68 = 0uLL;
        if (v13)
        {
          v66[1] = v13;
          operator delete(v13);
        }
        if (v64[0])
        {
          v64[1] = v64[0];
          operator delete(v64[0]);
        }
        if (v62)
        {
          char v63 = (char *)v62;
          operator delete(v62);
        }
        break;
      default:
        break;
    }
    if (v70[0] != v70[1])
    {
      sub_984514((void *)a1, (unsigned int **)v70, (char **)&v62);
      sub_983694((void *)a1, (char **)&v62, 1, (uint64_t)v64);
      int v14 = sub_986D10((void *)(a1 + 200), (uint64_t)v64);
      if (v14)
      {
        uint64_t v15 = v14[8];
      }
      else
      {
        long long v16 = *(void **)(a1 + 248);
        v86[0] = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v16 - *(void *)(a1 + 240)) >> 4);
        if ((unint64_t)v16 >= *(void *)(a1 + 256))
        {
          uint64_t v17 = sub_986F9C(v61, (long long *)v64);
        }
        else
        {
          sub_987174(v60, v16, (long long *)v64);
          uint64_t v17 = (char *)(v16 + 6);
          *(void *)(a1 + 248) = v16 + 6;
        }
        *(void *)(a1 + 248) = v17;
        sub_9872D8(a1 + 200, (uint64_t)v64, (long long *)v64, v86);
        uint64_t v15 = v86[0];
      }
      *(void *)(sub_9E6230((uint64_t)v76) + 1992) = v15;
      unint64_t v19 = (unint64_t *)v62;
      uint64_t v18 = v63;
      BOOL v85 = a3;
      while (v19 != (unint64_t *)v18)
      {
        unint64_t v20 = *v19;
        v86[0] = *v19;
        if (*((void *)&v82 + 1))
        {
          uint8x8_t v21 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v82 + 8));
          v21.i16[0] = vaddlv_u8(v21);
          if (v21.u32[0] > 1uLL)
          {
            unint64_t v22 = v20;
            if (*((void *)&v82 + 1) <= v20) {
              unint64_t v22 = v20 % *((void *)&v82 + 1);
            }
          }
          else
          {
            unint64_t v22 = (*((void *)&v82 + 1) - 1) & v20;
          }
          uint64_t v23 = *(void **)(v82 + 8 * v22);
          if (v23)
          {
            long long v24 = (void *)*v23;
            if (v24)
            {
              if (v21.u32[0] < 2uLL)
              {
                while (1)
                {
                  uint64_t v26 = v24[1];
                  if (v26 == v20)
                  {
                    if (v24[2] == v20) {
                      goto LABEL_36;
                    }
                  }
                  else if ((v26 & (*((void *)&v82 + 1) - 1)) != v22)
                  {
                    goto LABEL_58;
                  }
                  long long v24 = (void *)*v24;
                  if (!v24) {
                    goto LABEL_58;
                  }
                }
              }
              do
              {
                unint64_t v25 = v24[1];
                if (v25 == v20)
                {
                  if (v24[2] == v20) {
                    goto LABEL_36;
                  }
                }
                else
                {
                  if (v25 >= *((void *)&v82 + 1)) {
                    v25 %= *((void *)&v82 + 1);
                  }
                  if (v25 != v22) {
                    break;
                  }
                }
                long long v24 = (void *)*v24;
              }
              while (v24);
            }
          }
        }
LABEL_58:
        sub_987818((uint64_t)&v82, (unint64_t *)v86, v86);
        sub_32B48C((uint64_t *)&v85, v19);
LABEL_36:
        ++v19;
      }
      uint64_t v27 = (void **)(sub_9E6230((uint64_t)v76) + 3448);
      if (v27 != &v62) {
        sub_326C0(v27, (char *)v62, v63, (v63 - (unsigned char *)v62) >> 3);
      }
      if (v66[0])
      {
        v66[1] = v66[0];
        operator delete(v66[0]);
      }
      if ((SHIBYTE(v65) & 0x80000000) == 0)
      {
        unint64_t v28 = (char *)v62;
        if (!v62) {
          goto LABEL_66;
        }
LABEL_65:
        char v63 = v28;
        operator delete(v28);
        goto LABEL_66;
      }
      operator delete(v64[0]);
      unint64_t v28 = (char *)v62;
      if (v62) {
        goto LABEL_65;
      }
    }
LABEL_66:
    if (v71[1] == v71[2]) {
      goto LABEL_106;
    }
    sub_984514((void *)a1, (unsigned int **)&v71[1], (char **)&v62);
    sub_983694((void *)a1, (char **)&v62, 1, (uint64_t)v64);
    uint64_t v29 = sub_986D10((void *)(a1 + 200), (uint64_t)v64);
    if (v29)
    {
      uint64_t v30 = v29[8];
    }
    else
    {
      int64_t v31 = *(void **)(a1 + 248);
      v86[0] = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v31 - *(void *)(a1 + 240)) >> 4);
      if ((unint64_t)v31 >= *(void *)(a1 + 256))
      {
        uint64_t v32 = sub_986F9C(v61, (long long *)v64);
      }
      else
      {
        sub_987174(v60, v31, (long long *)v64);
        uint64_t v32 = (char *)(v31 + 6);
        *(void *)(a1 + 248) = v31 + 6;
      }
      *(void *)(a1 + 248) = v32;
      sub_9872D8(a1 + 200, (uint64_t)v64, (long long *)v64, v86);
      uint64_t v30 = v86[0];
    }
    *(void *)(sub_9E6230((uint64_t)v76) + 1984) = v30;
    uint64_t v34 = (unint64_t *)v62;
    unint64_t v33 = v63;
    BOOL v85 = a3;
    while (v34 != (unint64_t *)v33)
    {
      unint64_t v35 = *v34;
      v86[0] = *v34;
      if (*((void *)&v82 + 1))
      {
        uint8x8_t v36 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v82 + 8));
        v36.i16[0] = vaddlv_u8(v36);
        if (v36.u32[0] > 1uLL)
        {
          unint64_t v37 = v35;
          if (*((void *)&v82 + 1) <= v35) {
            unint64_t v37 = v35 % *((void *)&v82 + 1);
          }
        }
        else
        {
          unint64_t v37 = (*((void *)&v82 + 1) - 1) & v35;
        }
        unint64_t v38 = *(void **)(v82 + 8 * v37);
        if (v38)
        {
          uint64_t v39 = (void *)*v38;
          if (v39)
          {
            if (v36.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v41 = v39[1];
                if (v41 == v35)
                {
                  if (v39[2] == v35) {
                    goto LABEL_76;
                  }
                }
                else if ((v41 & (*((void *)&v82 + 1) - 1)) != v37)
                {
                  goto LABEL_98;
                }
                uint64_t v39 = (void *)*v39;
                if (!v39) {
                  goto LABEL_98;
                }
              }
            }
            do
            {
              unint64_t v40 = v39[1];
              if (v40 == v35)
              {
                if (v39[2] == v35) {
                  goto LABEL_76;
                }
              }
              else
              {
                if (v40 >= *((void *)&v82 + 1)) {
                  v40 %= *((void *)&v82 + 1);
                }
                if (v40 != v37) {
                  break;
                }
              }
              uint64_t v39 = (void *)*v39;
            }
            while (v39);
          }
        }
      }
LABEL_98:
      sub_987818((uint64_t)&v82, (unint64_t *)v86, v86);
      sub_32B48C((uint64_t *)&v85, v34);
LABEL_76:
      ++v34;
    }
    char v42 = (void **)(sub_9E6230((uint64_t)v76) + 3472);
    if (v42 != &v62) {
      sub_326C0(v42, (char *)v62, v63, (v63 - (unsigned char *)v62) >> 3);
    }
    if (v66[0])
    {
      v66[1] = v66[0];
      operator delete(v66[0]);
    }
    if ((SHIBYTE(v65) & 0x80000000) == 0)
    {
      long long v43 = (char *)v62;
      if (!v62) {
        goto LABEL_106;
      }
LABEL_105:
      char v63 = v43;
      operator delete(v43);
      goto LABEL_106;
    }
    operator delete(v64[0]);
    long long v43 = (char *)v62;
    if (v62) {
      goto LABEL_105;
    }
LABEL_106:
    uint64_t v44 = (void *)v72;
    if ((void)v72 != *((void *)&v72 + 1))
    {
      sub_984514((void *)a1, (unsigned int **)&v72, (char **)v64);
      uint64_t v46 = (void **)v64[0];
      long long v45 = (void **)v64[1];
      v86[0] = (uint64_t)a3;
      if (v64[0] != v64[1])
      {
        do
        {
          unint64_t v47 = (unint64_t)*v46;
          uint64_t v62 = *v46;
          if (*((void *)&v82 + 1))
          {
            uint8x8_t v48 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v82 + 8));
            v48.i16[0] = vaddlv_u8(v48);
            if (v48.u32[0] > 1uLL)
            {
              unint64_t v49 = v47;
              if (*((void *)&v82 + 1) <= v47) {
                unint64_t v49 = v47 % *((void *)&v82 + 1);
              }
            }
            else
            {
              unint64_t v49 = (*((void *)&v82 + 1) - 1) & v47;
            }
            uint64_t v50 = *(void **)(v82 + 8 * v49);
            if (v50)
            {
              int v51 = (void *)*v50;
              if (v51)
              {
                if (v48.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    unint64_t v53 = v51[1];
                    if (v53 == v47)
                    {
                      if (v51[2] == v47) {
                        goto LABEL_129;
                      }
                    }
                    else if ((v53 & (*((void *)&v82 + 1) - 1)) != v49)
                    {
                      goto LABEL_128;
                    }
                    int v51 = (void *)*v51;
                    if (!v51) {
                      goto LABEL_128;
                    }
                  }
                }
                do
                {
                  unint64_t v52 = v51[1];
                  if (v52 == v47)
                  {
                    if (v51[2] == v47) {
                      goto LABEL_129;
                    }
                  }
                  else
                  {
                    if (v52 >= *((void *)&v82 + 1)) {
                      v52 %= *((void *)&v82 + 1);
                    }
                    if (v52 != v49) {
                      break;
                    }
                  }
                  int v51 = (void *)*v51;
                }
                while (v51);
              }
            }
          }
LABEL_128:
          sub_987818((uint64_t)&v82, (unint64_t *)&v62, &v62);
          sub_32B48C(v86, v46);
LABEL_129:
          ++v46;
        }
        while (v46 != v45);
        uint64_t v46 = (void **)v64[0];
      }
      if (v46)
      {
        v64[1] = v46;
        operator delete(v46);
      }
      uint64_t v44 = (void *)v72;
    }
    if (v44)
    {
      *((void *)&v72 + 1) = v44;
      operator delete(v44);
    }
    if (v71[1])
    {
      v71[2] = v71[1];
      operator delete(v71[1]);
    }
    if (v70[0])
    {
      v70[1] = v70[0];
      operator delete(v70[0]);
    }
    sub_9E5780(v76);
  }
  sub_9467EC((uint64_t)&v81);
  int v54 = v80;
  if (v80)
  {
    do
    {
      uint64_t v55 = (void *)*v54;
      operator delete(v54);
      int v54 = v55;
    }
    while (v55);
  }
  int v56 = v79;
  int v79 = 0;
  if (v56) {
    operator delete(v56);
  }
  if (v77)
  {
    uint64_t v78 = v77;
    operator delete(v77);
  }
  int v57 = (void *)v83;
  if ((void)v83)
  {
    do
    {
      int v58 = (void *)*v57;
      operator delete(v57);
      int v57 = v58;
    }
    while (v58);
  }
  __n128 v59 = (void *)v82;
  *(void *)&long long v82 = 0;
  if (v59) {
    operator delete(v59);
  }
}

void sub_9843F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  sub_12168(v45 - 160);
  unint64_t v47 = *(void **)v44;
  if (*(void *)v44)
  {
    *(void *)(v44 + 8) = v47;
    operator delete(v47);
  }
  _Unwind_Resume(a1);
}

void sub_984514(void *a1@<X0>, unsigned int **a2@<X1>, char **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  char v4 = *a2;
  uint64_t v34 = a2[1];
  if (*a2 != v34)
  {
    uint64_t v6 = 0;
    char v7 = 0;
    unint64_t v35 = a1 + 17;
    unint64_t v33 = a1 + 22;
    do
    {
      uint64_t v9 = *(void **)(*a1 + 11688);
      unint64_t v10 = *v4;
      if (*((unsigned char *)v4 + 4))
      {
        uint64_t v11 = v9[1];
        if (0x823EE08FB823EE09 * ((v9[2] - v11) >> 3) <= v10) {
          goto LABEL_44;
        }
      }
      else
      {
        uint64_t v11 = v9[4];
        if (0x823EE08FB823EE09 * ((v9[5] - v11) >> 3) <= v10) {
LABEL_44:
        }
          sub_66748();
      }
      uint64_t v12 = sub_985618(v35, v4);
      if (v12)
      {
        unint64_t v13 = v12[3];
        if (v7 >= v6) {
          goto LABEL_16;
        }
      }
      else
      {
        uint64_t v14 = v11 + 456 * v10;
        unint64_t v15 = a1[23];
        unint64_t v36 = 0x823EE08FB823EE09 * ((uint64_t)(v15 - a1[22]) >> 3);
        if (v15 >= a1[24])
        {
          uint64_t v16 = sub_985734(v33, v14);
        }
        else
        {
          sub_3623F8(v15, v14);
          uint64_t v16 = v15 + 456;
          a1[23] = v15 + 456;
        }
        a1[23] = v16;
        sub_9858A4((uint64_t)v35, v4, v4, (uint64_t *)&v36);
        unint64_t v13 = v36;
        char v7 = a3[1];
        uint64_t v6 = a3[2];
        if (v7 >= v6)
        {
LABEL_16:
          uint64_t v17 = *a3;
          uint64_t v18 = v7 - *a3;
          uint64_t v19 = v18 >> 3;
          unint64_t v20 = (v18 >> 3) + 1;
          if (v20 >> 61) {
            sub_2E00();
          }
          if ((v6 - v17) >> 2 > v20) {
            unint64_t v20 = (v6 - v17) >> 2;
          }
          if ((unint64_t)(v6 - v17) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v20;
          }
          if (v21)
          {
            if (v21 >> 61) {
              sub_188D718();
            }
            unint64_t v22 = operator new(8 * v21);
            uint64_t v23 = (unint64_t *)&v22[8 * v19];
            unint64_t *v23 = v13;
            uint64_t v8 = (uint64_t)(v23 + 1);
            if (v7 == v17) {
              goto LABEL_30;
            }
LABEL_27:
            unint64_t v24 = v7 - 8 - v17;
            if (v24 < 0x168)
            {
              unint64_t v25 = v7;
              goto LABEL_29;
            }
            if (&v22[v18 - 8 - (v24 & 0xFFFFFFFFFFFFFFF8)] > &v22[v18 - 8])
            {
              unint64_t v25 = v7;
              goto LABEL_29;
            }
            if (&v7[-(v24 & 0xFFFFFFFFFFFFFFF8) - 8] > v7 - 8)
            {
              unint64_t v25 = v7;
              goto LABEL_29;
            }
            if ((unint64_t)(v7 - v22 - v18) < 0x20)
            {
              unint64_t v25 = v7;
              goto LABEL_29;
            }
            uint64_t v27 = (v24 >> 3) + 1;
            uint64_t v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v25 = &v7[-v28];
            uint64_t v23 = (unint64_t *)((char *)v23 - v28);
            uint64_t v29 = &v22[8 * v19 - 16];
            uint64_t v30 = v7 - 16;
            uint64_t v31 = v27 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v32 = *(_OWORD *)v30;
              *(v29 - 1) = *((_OWORD *)v30 - 1);
              *uint64_t v29 = v32;
              v29 -= 2;
              v30 -= 32;
              v31 -= 4;
            }
            while (v31);
            if (v27 != (v27 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_29:
                unint64_t v26 = *((void *)v25 - 1);
                v25 -= 8;
                *--uint64_t v23 = v26;
              }
              while (v25 != v17);
            }
          }
          else
          {
            unint64_t v22 = 0;
            uint64_t v23 = (unint64_t *)(8 * v19);
            *(void *)(8 * v19) = v13;
            uint64_t v8 = 8 * v19 + 8;
            if (v7 != v17) {
              goto LABEL_27;
            }
          }
LABEL_30:
          uint64_t v6 = &v22[8 * v21];
          *a3 = (char *)v23;
          a3[1] = (char *)v8;
          a3[2] = v6;
          if (v17) {
            operator delete(v17);
          }
          goto LABEL_4;
        }
      }
      *(void *)char v7 = v13;
      uint64_t v8 = (uint64_t)(v7 + 8);
LABEL_4:
      a3[1] = (char *)v8;
      v4 += 7;
      char v7 = (char *)v8;
    }
    while (v4 != v34);
  }
}

void sub_984838(_Unwind_Exception *exception_object)
{
  *(void *)(v2 + 184) = v3;
  BOOL v5 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

char ***sub_984868@<X0>(char ***result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  BOOL v5 = result;
  *(void *)(a4 + 64) = 0;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  uint64_t v8 = *a3;
  uint64_t v7 = a3[1];
  BOOL v9 = v7 == *a3;
  if (v7 != *a3)
  {
    uint64_t v10 = v7 - 8;
    uint64_t v11 = *(void *)(v7 - 8);
    if (*(_DWORD *)v11 == 6) {
      goto LABEL_82;
    }
    BOOL v9 = v10 == v8;
    if (v10 == v8) {
      goto LABEL_17;
    }
    uint64_t v11 = *(void *)(v7 - 16);
    if (*(_DWORD *)v11 == 6)
    {
LABEL_82:
      if (*((_DWORD *)result[2] + 359) >= 2u)
      {
        uint64_t v12 = *(void *)(v11 + 2000);
        uint64_t v13 = *(void *)(v11 + 2008);
        uint64_t v31 = (char **)(a4 + 24);
        if (v12 != v13)
        {
          do
          {
            if (*(unsigned char *)(v12 + 27)) {
              __n128 result = sub_987B3C(&v31, (_OWORD *)v12);
            }
            v12 += 28;
          }
          while (v12 != v13);
          uint64_t v14 = *(void *)(v11 + 2000);
          uint64_t v15 = *(void *)(v11 + 2008);
          uint64_t v31 = (char **)a4;
          while (v14 != v15)
          {
            if (*(unsigned char *)(v14 + 27)) {
              __n128 result = sub_987B3C(&v31, (_OWORD *)v14);
            }
            v14 += 28;
          }
        }
      }
    }
    else
    {
      BOOL v9 = 1;
    }
  }
LABEL_17:
  uint64_t v16 = *(void *)(a2 + 2000);
  uint64_t v17 = *(void *)(a2 + 2008);
  uint64_t v31 = (char **)(a4 + 24);
  if (v16 != v17)
  {
    do
    {
      if (*(unsigned char *)(v16 + 24)) {
        BOOL v18 = 0;
      }
      else {
        BOOL v18 = *(unsigned char *)(v16 + 25) == 0;
      }
      BOOL v19 = v18 && *(unsigned char *)(v16 + 26) == 0;
      if (!v19
        && (!*(unsigned char *)(v16 + 19)
         || *(unsigned char *)(v16 + 21)
         || *(unsigned char *)(v16 + 17)
         || *(unsigned char *)(v16 + 20)
         || *(unsigned char *)(v16 + 18)
         || *(unsigned char *)(v16 + 22)
         || *(unsigned char *)(v16 + 16)))
      {
        __n128 result = sub_987B3C(&v31, (_OWORD *)v16);
      }
      v16 += 28;
    }
    while (v16 != v17);
    uint64_t v20 = *(void *)(a2 + 2000);
    uint64_t v21 = *(void *)(a2 + 2008);
    uint64_t v31 = (char **)a4;
    if (v20 != v21)
    {
      do
      {
        char v22 = *((_DWORD *)v5[2] + 359) > 1u || v9;
        if ((v22 & 1) != 0 || !*(unsigned char *)(v20 + 24))
        {
          BOOL v23 = !*(unsigned char *)(v20 + 24) && *(unsigned char *)(v20 + 25) == 0;
          BOOL v24 = v23 && *(unsigned char *)(v20 + 26) == 0;
          if (!v24
            && (!*(unsigned char *)(v20 + 19)
             || *(unsigned char *)(v20 + 21)
             || *(unsigned char *)(v20 + 17)
             || *(unsigned char *)(v20 + 20)
             || *(unsigned char *)(v20 + 18)
             || *(unsigned char *)(v20 + 22)
             || *(unsigned char *)(v20 + 16)))
          {
            __n128 result = sub_987B3C(&v31, (_OWORD *)v20);
          }
        }
        v20 += 28;
      }
      while (v20 != v21);
      uint64_t v25 = *(void *)(a2 + 2000);
      uint64_t v26 = *(void *)(a2 + 2008);
      uint64_t v31 = (char **)(a4 + 48);
      while (v25 != v26)
      {
        if (*(unsigned char *)(v25 + 19))
        {
          if (*(unsigned char *)(v25 + 21)) {
            BOOL v27 = 0;
          }
          else {
            BOOL v27 = *(unsigned char *)(v25 + 17) == 0;
          }
          BOOL v30 = v27 && *(unsigned char *)(v25 + 20) == 0 && *(unsigned char *)(v25 + 18) == 0 && *(unsigned char *)(v25 + 22) == 0;
          if (v30 && !*(unsigned char *)(v25 + 16)) {
            __n128 result = sub_987B3C(&v31, (_OWORD *)v25);
          }
        }
        v25 += 28;
      }
    }
  }
  return result;
}

void sub_984B1C(_Unwind_Exception *a1)
{
  sub_984B80(v1);
  _Unwind_Resume(a1);
}

void sub_984B30(_Unwind_Exception *a1)
{
  sub_984B80(v1);
  _Unwind_Resume(a1);
}

void sub_984B44(_Unwind_Exception *a1)
{
  sub_984B80(v1);
  _Unwind_Resume(a1);
}

void sub_984B58(_Unwind_Exception *a1)
{
  sub_984B80(v1);
  _Unwind_Resume(a1);
}

void sub_984B6C(_Unwind_Exception *a1)
{
  sub_984B80(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_984B80(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  char v4 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_984BD4(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  while (v5 != v6)
  {
    uint64_t v8 = *(_DWORD **)(v5 - 8);
    v5 -= 8;
    uint64_t v7 = v8;
    int v9 = *v8;
    if (*v8 == 8 || v9 == 2)
    {
      uint64_t v11 = (char ***)*((void *)v7 + 250);
      uint64_t v12 = (char ***)*((void *)v7 + 251);
      BOOL v30 = 0;
      uint64_t v31 = 0;
      std::string __p = 0;
      uint64_t v13 = (char *)v12 - (char *)v11;
      if (v12 == v11) {
        goto LABEL_14;
      }
      goto LABEL_11;
    }
  }
  uint64_t v14 = *(void *)(v6 - 8);
  uint64_t v11 = *(char ****)(v14 + 2000);
  uint64_t v12 = *(char ****)(v14 + 2008);
  BOOL v30 = 0;
  uint64_t v31 = 0;
  std::string __p = 0;
  uint64_t v13 = (char *)v12 - (char *)v11;
  if (v12 == v11) {
    goto LABEL_14;
  }
LABEL_11:
  unint64_t v15 = 0x6DB6DB6DB6DB6DB7 * (v13 >> 2);
  if (v15 >> 61) {
    sub_2E00();
  }
  uint64_t v16 = (char *)operator new(0x6DB6DB6DB6DB6DB8 * (v13 >> 2));
  std::string __p = v16;
  BOOL v30 = v16;
  uint64_t v31 = &v16[8 * v15];
  do
  {
    long long v32 = *v11;
    uint64_t v16 = sub_918CC4((unint64_t *)&__p, v16, (int *)&v32) + 8;
    uint64_t v11 = (char ***)((char *)v11 + 28);
  }
  while (v11 != v12);
LABEL_14:
  uint64_t v17 = *(void *)(a1 + 2000);
  uint64_t v18 = *(void *)(a1 + 2008);
  long long v32 = (char **)a3;
  while (v17 != v18)
  {
    if (*(unsigned char *)(v17 + 23)) {
      BOOL v19 = *(unsigned char *)(v17 + 24) == 0;
    }
    else {
      BOOL v19 = 0;
    }
    BOOL v21 = v19 && *(unsigned char *)(v17 + 25) == 0 && *(unsigned char *)(v17 + 26) == 0;
    if (!v21
      && (!*(unsigned char *)(v17 + 19)
       || *(unsigned char *)(v17 + 21)
       || *(unsigned char *)(v17 + 17)
       || *(unsigned char *)(v17 + 20)
       || *(unsigned char *)(v17 + 18)
       || *(unsigned char *)(v17 + 22)
       || *(unsigned char *)(v17 + 16)))
    {
      char v22 = __p;
      if (__p != v30)
      {
        while (*v22 != *(_DWORD *)v17 || *((unsigned __int8 *)v22 + 4) != *(unsigned __int8 *)(v17 + 4))
        {
          v22 += 2;
          if (v22 == v30) {
            goto LABEL_40;
          }
        }
      }
      if (v22 == v30) {
LABEL_40:
      }
        sub_987B3C(&v32, (_OWORD *)v17);
    }
    v17 += 28;
  }
  sub_9392F0(a3 + 24, *(void *)(a3 + 32), *(char **)a3, *(char **)(a3 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2));
  uint64_t v23 = *(void *)(a1 + 2000);
  uint64_t v24 = *(void *)(a1 + 2008);
  long long v32 = (char **)(a3 + 48);
  while (v23 != v24)
  {
    if (*(unsigned char *)(v23 + 19))
    {
      BOOL v25 = !*(unsigned char *)(v23 + 21) && *(unsigned char *)(v23 + 17) == 0;
      BOOL v26 = v25 && *(unsigned char *)(v23 + 20) == 0;
      BOOL v27 = v26 && *(unsigned char *)(v23 + 18) == 0;
      BOOL v28 = v27 && *(unsigned char *)(v23 + 22) == 0;
      if (v28 && !*(unsigned char *)(v23 + 16)) {
        sub_987B3C(&v32, (_OWORD *)v23);
      }
    }
    v23 += 28;
  }
  if (__p)
  {
    BOOL v30 = __p;
    operator delete(__p);
  }
}

void sub_984E64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  sub_984B80(v10);
  _Unwind_Resume(a1);
}

char *sub_984E98@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  while (v3 != v4)
  {
    uint64_t v6 = *(_DWORD **)(v3 - 8);
    v3 -= 8;
    uint64_t v5 = v6;
    int v7 = *v6;
    if (*v6 == 8 || v7 == 2)
    {
      uint64_t v9 = *((void *)v5 + 250);
      uint64_t v10 = *((void *)v5 + 251);
      BOOL v19 = (char **)a2;
      if (v9 == v10) {
        goto LABEL_11;
      }
      goto LABEL_14;
    }
  }
  uint64_t v11 = *(void *)(v4 - 8);
  uint64_t v9 = *(void *)(v11 + 2000);
  uint64_t v10 = *(void *)(v11 + 2008);
  BOOL v19 = (char **)a2;
  if (v9 == v10)
  {
LABEL_11:
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    return sub_9392F0(a2 + 24, v14, v13, v12, 0x6DB6DB6DB6DB6DB7 * ((v12 - v13) >> 2));
  }
  do
  {
LABEL_14:
    if (*(unsigned char *)(v9 + 23)) {
      BOOL v15 = *(unsigned char *)(v9 + 24) == 0;
    }
    else {
      BOOL v15 = 0;
    }
    BOOL v17 = v15 && *(unsigned char *)(v9 + 25) == 0 && *(unsigned char *)(v9 + 26) == 0;
    if (v17
      && (!*(unsigned char *)(v9 + 19)
       || *(unsigned char *)(v9 + 21)
       || *(unsigned char *)(v9 + 17)
       || *(unsigned char *)(v9 + 20)
       || *(unsigned char *)(v9 + 18)
       || *(unsigned char *)(v9 + 22)
       || *(unsigned char *)(v9 + 16)))
    {
      sub_987B3C(&v19, (_OWORD *)v9);
    }
    v9 += 28;
  }
  while (v9 != v10);
  uint64_t v14 = *(void *)(a2 + 32);
  uint64_t v13 = *(char **)a2;
  uint64_t v12 = *(char **)(a2 + 8);
  return sub_9392F0(a2 + 24, v14, v13, v12, 0x6DB6DB6DB6DB6DB7 * ((v12 - v13) >> 2));
}

void sub_984FDC(_Unwind_Exception *a1)
{
  sub_984B80(v1);
  _Unwind_Resume(a1);
}

void sub_984FF0(_Unwind_Exception *a1)
{
  sub_984B80(v1);
  _Unwind_Resume(a1);
}

void sub_985004(uint64_t a1@<X0>, uint64_t a2@<X1>, int ***a3@<X2>, uint64_t a4@<X8>)
{
  if (*(_DWORD *)(*(void *)(a1 + 16) + 1436) >= 2u)
  {
    *(void *)(a4 + 64) = 0;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  else
  {
    long long v32 = 0;
    unint64_t v33 = 0;
    uint64_t v34 = 0;
    int v6 = ***a3;
    uint64_t v7 = *(void *)(a2 + 2000);
    uint64_t v8 = *(void *)(a2 + 2008);
    std::string __p = &v32;
    if (v7 != v8)
    {
      if (v6 == 9)
      {
        do
        {
          sub_987B3C((char ***)&__p, (_OWORD *)v7);
          v7 += 28;
        }
        while (v7 != v8);
      }
      else
      {
        do
        {
          if (*(unsigned char *)(v7 + 27)) {
            sub_987B3C((char ***)&__p, (_OWORD *)v7);
          }
          v7 += 28;
        }
        while (v7 != v8);
      }
    }
    std::string __p = 0;
    BOOL v30 = 0;
    uint64_t v31 = 0;
    uint64_t v9 = *a3;
    uint64_t v10 = a3[1];
    if (*a3 != v10)
    {
      while (**v9 != 2)
      {
        if (++v9 == v10) {
          goto LABEL_36;
        }
      }
    }
    if (v9 != v10)
    {
      uint64_t v11 = *v9;
      uint64_t v12 = *((void *)v11 + 250);
      uint64_t v13 = *((void *)v11 + 251);
      p_p = (char **)&__p;
      while (v12 != v13)
      {
        if (*(unsigned char *)(v12 + 24))
        {
          if (!*(unsigned char *)(v12 + 19)
            || (!*(unsigned char *)(v12 + 21) ? (BOOL v14 = *(unsigned char *)(v12 + 17) == 0) : (BOOL v14 = 0),
                v14 ? (BOOL v15 = *(unsigned char *)(v12 + 20) == 0) : (BOOL v15 = 0),
                v15 ? (BOOL v16 = *(unsigned char *)(v12 + 18) == 0) : (BOOL v16 = 0),
                v16 ? (BOOL v17 = *(unsigned char *)(v12 + 22) == 0) : (BOOL v17 = 0),
                !v17 || *(unsigned char *)(v12 + 16)))
          {
            sub_987B3C(&p_p, (_OWORD *)v12);
          }
        }
        v12 += 28;
      }
    }
LABEL_36:
    *(void *)(a4 + 64) = 0;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    sub_9392F0(a4 + 24, 0, (char *)v32, v33, 0x6DB6DB6DB6DB6DB7 * ((v33 - (unsigned char *)v32) >> 2));
    BOOL v19 = (char *)v32;
    uint64_t v18 = v33;
    uint64_t v20 = 0x6DB6DB6DB6DB6DB7 * ((v33 - (unsigned char *)v32) >> 2);
    unint64_t v21 = v20 + 0x6DB6DB6DB6DB6DB7 * ((v30 - (unsigned char *)__p) >> 2);
    char v22 = *(unsigned char **)a4;
    if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a4 + 16) - *(void *)a4) >> 2) < v21)
    {
      if (v21 >= 0x924924924924925) {
        sub_2E00();
      }
      uint64_t v23 = *(unsigned char **)(a4 + 8);
      uint64_t v24 = (char *)operator new(v30 - (unsigned char *)__p + v33 - (unsigned char *)v32);
      BOOL v25 = &v24[28 * ((v23 - v22) / 28)];
      BOOL v26 = v25;
      if (v23 != v22)
      {
        BOOL v27 = &v24[28 * ((v23 - v22) / 28)];
        do
        {
          long long v28 = *(_OWORD *)(v23 - 28);
          BOOL v26 = v27 - 28;
          *((_OWORD *)v27 - 1) = *((_OWORD *)v23 - 1);
          *(_OWORD *)(v27 - 28) = v28;
          v23 -= 28;
          v27 -= 28;
        }
        while (v23 != v22);
      }
      *(void *)a4 = v26;
      *(void *)(a4 + 8) = v25;
      *(void *)(a4 + 16) = &v24[28 * v21];
      if (v22)
      {
        operator delete(v22);
        BOOL v19 = (char *)v32;
        uint64_t v18 = v33;
        uint64_t v20 = 0x6DB6DB6DB6DB6DB7 * ((v33 - (unsigned char *)v32) >> 2);
      }
    }
    sub_9392F0(a4, *(void *)(a4 + 8), v19, v18, v20);
    sub_9392F0(a4, *(void *)(a4 + 8), (char *)__p, v30, 0x6DB6DB6DB6DB6DB7 * ((v30 - (unsigned char *)__p) >> 2));
    if (__p)
    {
      BOOL v30 = (char *)__p;
      operator delete(__p);
    }
    if (v32)
    {
      unint64_t v33 = (char *)v32;
      operator delete(v32);
    }
  }
}

void sub_985330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  sub_984B80(v14);
  if (__p)
  {
    operator delete(__p);
    BOOL v16 = a13;
    if (!a13) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    BOOL v16 = a13;
    if (!a13) {
      goto LABEL_3;
    }
  }
  operator delete(v16);
  _Unwind_Resume(a1);
}

char *sub_9853A8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  int v4 = **(_DWORD **)(*(void *)(a2 + 8) - 8);
  uint64_t v5 = *(void *)(a1 + 2000);
  uint64_t v6 = *(void *)(a1 + 2008);
  uint64_t v8 = (char **)a3;
  if (v5 != v6)
  {
    if (v4)
    {
      do
      {
        if (*(unsigned char *)(v5 + 27)) {
          sub_987B3C(&v8, (_OWORD *)v5);
        }
        v5 += 28;
      }
      while (v5 != v6);
    }
    else
    {
      do
      {
        sub_987B3C(&v8, (_OWORD *)v5);
        v5 += 28;
      }
      while (v5 != v6);
    }
  }
  return sub_9392F0(a3 + 24, *(void *)(a3 + 32), *(char **)a3, *(char **)(a3 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2));
}

void sub_985474(_Unwind_Exception *a1)
{
  sub_984B80(v1);
  _Unwind_Resume(a1);
}

void sub_985488(_Unwind_Exception *a1)
{
  sub_984B80(v1);
  _Unwind_Resume(a1);
}

void sub_98549C(_Unwind_Exception *a1)
{
  sub_984B80(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_9854B0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 424);
  uint64_t v2 = *(void *)(a1 + 432);
  if (v1 != v2)
  {
    LODWORD(v3) = -1;
    while (1)
    {
      unsigned int v4 = *(_DWORD *)(v1 + 8);
      unsigned int v7 = v4;
      char v13 = *(unsigned char *)(v1 + 96);
      if (v13)
      {
        sub_360E8C((uint64_t)v8, v1 + 16);
        unsigned int v4 = v7;
      }
      if (v4 < 7 && ((0x77u >> v4) & 1) != 0)
      {
        int v5 = dword_20EA7BC[v4];
        if (v13) {
          goto LABEL_13;
        }
      }
      else
      {
        if (v4 == 3) {
          int v5 = 14;
        }
        else {
          int v5 = 0;
        }
        if (v13)
        {
LABEL_13:
          if (__p)
          {
            uint64_t v12 = __p;
            operator delete(__p);
          }
          if (v9)
          {
            uint64_t v10 = v9;
            operator delete(v9);
          }
          if (v8[0])
          {
            v8[1] = v8[0];
            operator delete(v8[0]);
          }
          char v13 = 0;
        }
      }
      if (v5 <= (int)v3) {
        uint64_t v3 = v3;
      }
      else {
        uint64_t v3 = v5;
      }
      v1 += 104;
      if (v1 == v2) {
        return v3;
      }
    }
  }
  return 0xFFFFFFFFLL;
}

void sub_98560C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_58CC(a1);
}

uint64_t *sub_985618(void *a1, unsigned int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint64_t v3 = *((unsigned __int8 *)a2 + 4);
  uint64_t v4 = *a2;
  unint64_t v5 = (v4 + ((v3 ^ 0x385FFF1BDBLL) << 6) + 0xEB63740AFLL) ^ v3 ^ 0x385FFF1BDBLL;
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    uint64_t v7 = (v4 + ((v3 ^ 0x385FFF1BDBLL) << 6) + 0xEB63740AFLL) ^ v3 ^ 0x385FFF1BDBLL;
    if (v5 >= *(void *)&v2) {
      uint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    uint64_t v7 = v5 & (*(void *)&v2 + 0xFFFFFFFFFFFLL);
  }
  uint64_t v8 = *(uint64_t ***)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  __n128 result = *v8;
  if (*v8)
  {
    if (v6.u32[0] < 2uLL)
    {
      uint64_t v10 = *(void *)&v2 - 1;
      while (1)
      {
        uint64_t v14 = result[1];
        if (v14 == v5)
        {
          if (*((_DWORD *)result + 4) == v4 && *((unsigned __int8 *)result + 20) == v3) {
            return result;
          }
        }
        else if ((v14 & v10) != v7)
        {
          return 0;
        }
        __n128 result = (uint64_t *)*result;
        if (!result) {
          return result;
        }
      }
    }
    do
    {
      unint64_t v12 = result[1];
      if (v12 == v5)
      {
        if (*((_DWORD *)result + 4) == v4 && *((unsigned __int8 *)result + 20) == v3) {
          return result;
        }
      }
      else
      {
        if (v12 >= *(void *)&v2) {
          v12 %= *(void *)&v2;
        }
        if (v12 != v7) {
          return 0;
        }
      }
      __n128 result = (uint64_t *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_985734(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0x823EE08FB823EE09 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x8FB823EE08FB82) {
    sub_2E00();
  }
  if (0x47DC11F7047DC12 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x47DC11F7047DC12 * ((a1[2] - *a1) >> 3);
  }
  if (0x823EE08FB823EE09 * ((a1[2] - *a1) >> 3) >= 0x47DC11F7047DC1) {
    unint64_t v6 = 0x8FB823EE08FB82;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x8FB823EE08FB82) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(456 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v12 = (uint64_t)&v7[456 * v3];
  char v13 = &v7[456 * v6];
  sub_3623F8(v12, a2);
  sub_3629BC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, v12, v12);
  uint64_t v9 = (void *)*a1;
  uint64_t v8 = a1[1];
  *a1 = v10;
  a1[1] = v12 + 456;
  for (a1[2] = (uint64_t)v13; (void *)v8 != v9; uint64_t v8 = sub_361164(v8 - 456))
    ;
  if (v9) {
    operator delete(v9);
  }
  return v12 + 456;
}

void sub_985890(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_362968((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_9858A4(uint64_t a1, unsigned int *a2, void *a3, uint64_t *a4)
{
  uint64_t v8 = *((unsigned __int8 *)a2 + 4);
  uint64_t v9 = *a2;
  unint64_t v10 = (v9 + ((v8 ^ 0x385FFF1BDBLL) << 6) + 0xEB63740AFLL) ^ v8 ^ 0x385FFF1BDBLL;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      uint64_t v4 = (v9 + ((v8 ^ 0x385FFF1BDBLL) << 6) + 0xEB63740AFLL) ^ v8 ^ 0x385FFF1BDBLL;
      if (v10 >= v11) {
        uint64_t v4 = v10 % v11;
      }
    }
    else
    {
      uint64_t v4 = v10 & (v11 + 0xFFFFFFFFFFFLL);
    }
    char v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v17 = v14[1];
            if (v17 == v10)
            {
              if (*((_DWORD *)v14 + 4) == v9 && *((unsigned __int8 *)v14 + 20) == v8) {
                return v14;
              }
            }
            else if ((v17 & (v11 - 1)) != v4)
            {
              goto LABEL_31;
            }
            uint64_t v14 = (void *)*v14;
            if (!v14) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v10)
          {
            if (*((_DWORD *)v14 + 4) == v9 && *((unsigned __int8 *)v14 + 20) == v8) {
              return v14;
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v4) {
              break;
            }
          }
          uint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_31:
  uint64_t v14 = operator new(0x20uLL);
  void *v14 = 0;
  v14[1] = v10;
  uint64_t v19 = *a4;
  v14[2] = *a3;
  v14[3] = v19;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (v11 && (float)(v21 * (float)v11) >= v20)
  {
    uint64_t v22 = *(void *)a1;
    uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
    if (v23)
    {
LABEL_34:
      void *v14 = *v23;
LABEL_69:
      void *v23 = v14;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v24 = 1;
    if (v11 >= 3) {
      BOOL v24 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v11);
    unint64_t v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26) {
      size_t prime = v26;
    }
    else {
      size_t prime = v25;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v11 = *(void *)(a1 + 8);
    }
    if (prime > v11) {
      goto LABEL_45;
    }
    if (prime < v11)
    {
      unint64_t v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (prime <= v28) {
        size_t prime = v28;
      }
      if (prime < v11) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v31 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        uint64_t v4 = v10 % v11;
        uint64_t v22 = *(void *)a1;
        uint64_t v23 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v23) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v4 = v10;
        uint64_t v22 = *(void *)a1;
        uint64_t v23 = *(void **)(*(void *)a1 + 8 * v10);
        if (v23) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      uint64_t v4 = v31 & v10;
      uint64_t v22 = *(void *)a1;
      uint64_t v23 = *(void **)(*(void *)a1 + 8 * (v31 & v10));
      if (v23) {
        goto LABEL_34;
      }
    }
  }
  void *v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v22 + 8 * v4) = a1 + 16;
  if (*v14)
  {
    unint64_t v32 = *(void *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v32 >= v11) {
        v32 %= v11;
      }
    }
    else
    {
      v32 &= v11 - 1;
    }
    uint64_t v23 = (void *)(*(void *)a1 + 8 * v32);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_985BF0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_985C04(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t v9 = *a1;
  if (0x823EE08FB823EE09 * ((v8 - *a1) >> 3) >= a4)
  {
    uint64_t result = a1[1];
    if (0x823EE08FB823EE09 * ((result - v9) >> 3) >= a4)
    {
      if (a2 == a3)
      {
        uint64_t v23 = v9;
      }
      else
      {
        uint64_t v23 = v9;
        do
        {
          sub_985EAC(v9, v6);
          v6 += 456;
          v9 += 456;
          v23 += 456;
        }
        while (v6 != a3);
        uint64_t result = a1[1];
      }
      while (result != v23)
        uint64_t result = sub_361164(result - 456);
      a1[1] = v23;
    }
    else
    {
      uint64_t v19 = a2 + 8 * ((result - v9) >> 3);
      if (result != v9)
      {
        uint64_t v20 = 8 * ((result - v9) >> 3);
        do
        {
          uint64_t result = sub_985EAC(v9, v6);
          v6 += 456;
          v9 += 456;
          v20 -= 456;
        }
        while (v20);
        uint64_t v9 = a1[1];
      }
      uint64_t v21 = v9;
      if (v19 != a3)
      {
        uint64_t v22 = 0;
        do
        {
          uint64_t result = sub_3623F8(v9 + v22, v19 + v22);
          v22 += 456;
        }
        while (v19 + v22 != a3);
        uint64_t v21 = v9 + v22;
      }
      a1[1] = v21;
    }
  }
  else
  {
    if (v9)
    {
      uint64_t v10 = a1[1];
      unint64_t v11 = (void *)v9;
      if (v10 != v9)
      {
        do
          uint64_t v10 = sub_361164(v10 - 456);
        while (v10 != v9);
        unint64_t v11 = (void *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x8FB823EE08FB82) {
      goto LABEL_37;
    }
    unint64_t v12 = 0x823EE08FB823EE09 * (v8 >> 3);
    uint64_t v13 = 2 * v12;
    if (2 * v12 <= a4) {
      uint64_t v13 = a4;
    }
    unint64_t v14 = v12 >= 0x47DC11F7047DC1 ? 0x8FB823EE08FB82 : v13;
    if (v14 > 0x8FB823EE08FB82) {
LABEL_37:
    }
      sub_2E00();
    uint64_t v15 = 456 * v14;
    uint64_t result = (uint64_t)operator new(456 * v14);
    uint64_t v17 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = result + v15;
    if (v6 != a3)
    {
      uint64_t v18 = 0;
      do
      {
        uint64_t result = sub_3623F8(v17 + v18, v6 + v18);
        v18 += 456;
      }
      while (v6 + v18 != a3);
      v17 += v18;
    }
    a1[1] = v17;
  }
  return result;
}

uint64_t sub_985EAC(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  std::string::operator=((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  if (a1 == a2)
  {
    std::string::operator=((std::string *)(a1 + 80), (const std::string *)(a2 + 80));
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    std::string::operator=((std::string *)(a1 + 144), (const std::string *)(a2 + 144));
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    std::string::operator=((std::string *)(a1 + 208), (const std::string *)(a2 + 208));
    *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  }
  else
  {
    sub_360A08(a1 + 56, *(void **)(a2 + 56), *(void **)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 5);
    std::string::operator=((std::string *)(a1 + 80), (const std::string *)(a2 + 80));
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    sub_360A08(a1 + 120, *(void **)(a2 + 120), *(void **)(a2 + 128), (uint64_t)(*(void *)(a2 + 128) - *(void *)(a2 + 120)) >> 5);
    std::string::operator=((std::string *)(a1 + 144), (const std::string *)(a2 + 144));
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    sub_360A08(a1 + 184, *(void **)(a2 + 184), *(void **)(a2 + 192), (uint64_t)(*(void *)(a2 + 192) - *(void *)(a2 + 184)) >> 5);
    std::string::operator=((std::string *)(a1 + 208), (const std::string *)(a2 + 208));
    *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
    sub_360A08(a1 + 248, *(void **)(a2 + 248), *(void **)(a2 + 256), (uint64_t)(*(void *)(a2 + 256) - *(void *)(a2 + 248)) >> 5);
  }
  std::string::operator=((std::string *)(a1 + 272), (const std::string *)(a2 + 272));
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
  if (a1 == a2)
  {
    std::string::operator=((std::string *)(a1 + 336), (const std::string *)(a2 + 336));
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
    long long v5 = *(_OWORD *)(a2 + 400);
    *(void *)(a1 + 416) = *(void *)(a2 + 416);
    *(_OWORD *)(a1 + 400) = v5;
  }
  else
  {
    sub_360A08(a1 + 312, *(void **)(a2 + 312), *(void **)(a2 + 320), (uint64_t)(*(void *)(a2 + 320) - *(void *)(a2 + 312)) >> 5);
    std::string::operator=((std::string *)(a1 + 336), (const std::string *)(a2 + 336));
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
    sub_360A08(a1 + 376, *(void **)(a2 + 376), *(void **)(a2 + 384), (uint64_t)(*(void *)(a2 + 384) - *(void *)(a2 + 376)) >> 5);
    long long v4 = *(_OWORD *)(a2 + 400);
    *(void *)(a1 + 416) = *(void *)(a2 + 416);
    *(_OWORD *)(a1 + 400) = v4;
    sub_98609C((void **)(a1 + 424), *(char **)(a2 + 424), *(char **)(a2 + 432), 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a2 + 432) - *(void *)(a2 + 424)) >> 3));
  }
  *(_WORD *)(a1 + 448) = *(_WORD *)(a2 + 448);
  return a1;
}

void sub_98609C(void **a1, char *a2, char *a3, unint64_t a4)
{
  uint64_t v8 = (uint64_t)a1[2];
  uint64_t v9 = (char *)*a1;
  if (0x4EC4EC4EC4EC4EC5 * ((v8 - (uint64_t)*a1) >> 3) >= a4)
  {
    unint64_t v25 = a1[1];
    unint64_t v26 = 0x4EC4EC4EC4EC4EC5 * ((v25 - v9) >> 3);
    if (v26 >= a4)
    {
      if (a2 != a3)
      {
        uint64_t v34 = 0;
        do
        {
          unint64_t v35 = &v9[v34];
          unint64_t v36 = &a2[v34];
          if (a2 != v9)
          {
            unsigned int v37 = *((_DWORD *)v35 + 2);
            unsigned int v38 = *((_DWORD *)v36 + 2);
            if (v37 == v38)
            {
              if (v37 <= 6) {
                *(void *)unint64_t v35 = *(void *)v36;
              }
            }
            else
            {
              if (v38 <= 6)
              {
                *(void *)unint64_t v35 = *(void *)v36;
                unsigned int v38 = *((_DWORD *)v36 + 2);
              }
              *((_DWORD *)v35 + 2) = v38;
            }
          }
          sub_98648C((uint64_t)(v35 + 16), (uint64_t)(v36 + 16));
          v34 += 104;
        }
        while (&a2[v34] != a3);
        unint64_t v25 = a1[1];
        v9 += v34;
      }
      while (v25 != v9)
      {
        if (*(v25 - 8))
        {
          uint64_t v44 = (void *)*((void *)v25 - 4);
          if (v44)
          {
            *((void *)v25 - 3) = v44;
            operator delete(v44);
          }
          uint64_t v45 = (void *)*((void *)v25 - 7);
          if (v45)
          {
            *((void *)v25 - 6) = v45;
            operator delete(v45);
          }
          uint64_t v46 = (void *)*((void *)v25 - 11);
          if (v46)
          {
            *((void *)v25 - 10) = v46;
            operator delete(v46);
          }
          *(v25 - 8) = 0;
        }
        v25 -= 104;
      }
      a1[1] = v9;
    }
    else
    {
      BOOL v27 = &a2[8 * ((v25 - v9) >> 3)];
      if (v25 != v9)
      {
        uint64_t v28 = 0;
        uint64_t v29 = 104 * v26;
        do
        {
          uint64_t v30 = &v9[v28];
          unint64_t v31 = &a2[v28];
          if (a2 != v9)
          {
            unsigned int v32 = *((_DWORD *)v30 + 2);
            unsigned int v33 = *((_DWORD *)v31 + 2);
            if (v32 == v33)
            {
              if (v32 <= 6) {
                *(void *)uint64_t v30 = *(void *)v31;
              }
            }
            else
            {
              if (v33 <= 6)
              {
                *(void *)uint64_t v30 = *(void *)v31;
                unsigned int v33 = *((_DWORD *)v31 + 2);
              }
              *((_DWORD *)v30 + 2) = v33;
            }
          }
          sub_98648C((uint64_t)(v30 + 16), (uint64_t)(v31 + 16));
          v28 += 104;
        }
        while (v29 != v28);
        uint64_t v9 = (char *)a1[1];
      }
      uint64_t v39 = v9;
      if (v27 != a3)
      {
        uint64_t v40 = 0;
        do
        {
          uint64_t v41 = &v9[v40];
          char v42 = &v27[v40];
          *(_DWORD *)&v9[v40 + 8] = *(_DWORD *)&v27[v40 + 8];
          if (*(_DWORD *)&v27[v40 + 8] <= 6u) {
            *(void *)uint64_t v41 = *(void *)v42;
          }
          int v43 = v42[96];
          v41[96] = v43;
          if (v43) {
            sub_360E8C((uint64_t)&v9[v40 + 16], (uint64_t)&v27[v40 + 16]);
          }
          v40 += 104;
        }
        while (&v27[v40] != a3);
        uint64_t v39 = &v9[v40];
      }
      a1[1] = v39;
    }
  }
  else
  {
    if (v9)
    {
      uint64_t v10 = (char *)a1[1];
      unint64_t v11 = *a1;
      if (v10 != v9)
      {
        do
        {
          if (*(v10 - 8))
          {
            unint64_t v12 = (void *)*((void *)v10 - 4);
            if (v12)
            {
              *((void *)v10 - 3) = v12;
              operator delete(v12);
            }
            uint64_t v13 = (void *)*((void *)v10 - 7);
            if (v13)
            {
              *((void *)v10 - 6) = v13;
              operator delete(v13);
            }
            unint64_t v14 = (void *)*((void *)v10 - 11);
            if (v14)
            {
              *((void *)v10 - 10) = v14;
              operator delete(v14);
            }
            *(v10 - 8) = 0;
          }
          v10 -= 104;
        }
        while (v10 != v9);
        unint64_t v11 = *a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x276276276276276) {
      goto LABEL_74;
    }
    unint64_t v15 = 0x4EC4EC4EC4EC4EC5 * (v8 >> 3);
    uint64_t v16 = 2 * v15;
    if (2 * v15 <= a4) {
      uint64_t v16 = a4;
    }
    unint64_t v17 = v15 >= 0x13B13B13B13B13BLL ? 0x276276276276276 : v16;
    if (v17 > 0x276276276276276) {
LABEL_74:
    }
      sub_2E00();
    uint64_t v18 = 104 * v17;
    uint64_t v19 = (char *)operator new(104 * v17);
    *a1 = v19;
    a1[1] = v19;
    a1[2] = &v19[v18];
    if (a2 != a3)
    {
      uint64_t v20 = 0;
      do
      {
        uint64_t v21 = &v19[v20];
        uint64_t v22 = &a2[v20];
        unsigned int v23 = *(_DWORD *)&a2[v20 + 8];
        *(_DWORD *)&v19[v20 + 8] = v23;
        if (v23 <= 6) {
          *(void *)uint64_t v21 = *(void *)v22;
        }
        int v24 = v22[96];
        v21[96] = v24;
        if (v24) {
          sub_360E8C((uint64_t)&v19[v20 + 16], (uint64_t)&a2[v20 + 16]);
        }
        v20 += 104;
      }
      while (&a2[v20] != a3);
      v19 += v20;
    }
    a1[1] = v19;
  }
}

uint64_t sub_98648C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 80))
  {
    if (!*(unsigned char *)(a1 + 80))
    {
      sub_360E8C(a1, a2);
      *(unsigned char *)(a1 + 80) = 1;
      return a1;
    }
    if (a1 == a2) {
      return a1;
    }
    sub_326C0((void *)a1, *(char **)a2, *(char **)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
    __int16 v5 = *(_WORD *)(a2 + 24);
    *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
    *(_WORD *)(a1 + 24) = v5;
    sub_457964((void *)(a1 + 32), *(char **)(a2 + 32), *(char **)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 4);
    sub_457964((void *)(a1 + 56), *(char **)(a2 + 56), *(char **)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 4);
    return a1;
  }
  else
  {
    sub_361030(a1);
    return a1;
  }
}

void sub_986554(uint64_t a1, std::string *__str, std::string *a3, size_t __sz)
{
  uint64_t v6 = __str;
  int v9 = a1 + 16;
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v10 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)a1) >> 4) >= __sz)
  {
    unint64_t v14 = *(std::string **)(a1 + 8);
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v14 - (char *)v10) >> 4) >= __sz)
    {
      if (__str == a3)
      {
        unint64_t v17 = *(std::string **)a1;
      }
      else
      {
        unint64_t v17 = *(std::string **)a1;
        do
        {
          std::string::operator=(v10, v6);
          if (v6 != v10) {
            sub_326C0(v10[1].__r_.__value_.__r.__words, v6[1].__r_.__value_.__l.__data_, (char *)v6[1].__r_.__value_.__l.__size_, (uint64_t)(v6[1].__r_.__value_.__l.__size_ - v6[1].__r_.__value_.__r.__words[0]) >> 3);
          }
          v6 += 2;
          v10 += 2;
          v17 += 2;
        }
        while (v6 != a3);
        unint64_t v14 = *(std::string **)(a1 + 8);
      }
      while (v14 != v17)
      {
        std::string::pointer data = v14[-1].__r_.__value_.__l.__data_;
        if (data)
        {
          v14[-1].__r_.__value_.__l.__size_ = (std::string::size_type)data;
          operator delete(data);
        }
        if (SHIBYTE(v14[-2].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v14[-2].__r_.__value_.__l.__data_);
        }
        v14 -= 2;
      }
      *(void *)(a1 + 8) = v17;
    }
    else
    {
      unint64_t v15 = (std::string *)((char *)__str + 16 * (((char *)v14 - (char *)v10) >> 4));
      if (v14 != v10)
      {
        uint64_t v16 = 16 * (((char *)v14 - (char *)v10) >> 4);
        do
        {
          std::string::operator=(v10, v6);
          if (v6 != v10) {
            sub_326C0(v10[1].__r_.__value_.__r.__words, v6[1].__r_.__value_.__l.__data_, (char *)v6[1].__r_.__value_.__l.__size_, (uint64_t)(v6[1].__r_.__value_.__l.__size_ - v6[1].__r_.__value_.__r.__words[0]) >> 3);
          }
          v6 += 2;
          v10 += 2;
          v16 -= 48;
        }
        while (v16);
        uint64_t v10 = *(std::string **)(a1 + 8);
      }
      int v24 = v10;
      if (v15 != a3)
      {
        uint64_t v25 = 0;
        do
        {
          sub_986878(v9, v10[v25].__r_.__value_.__r.__words, (long long *)&v15[v25]);
          v25 += 2;
        }
        while (&v15[v25] != a3);
        int v24 = &v10[v25];
      }
      *(void *)(a1 + 8) = v24;
    }
  }
  else
  {
    if (v10)
    {
      unint64_t v11 = *(std::string **)(a1 + 8);
      unint64_t v12 = *(std::string **)a1;
      if (v11 != v10)
      {
        do
        {
          std::string::pointer v13 = v11[-1].__r_.__value_.__l.__data_;
          if (v13)
          {
            v11[-1].__r_.__value_.__l.__size_ = (std::string::size_type)v13;
            operator delete(v13);
          }
          if (SHIBYTE(v11[-2].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v11[-2].__r_.__value_.__l.__data_);
          }
          v11 -= 2;
        }
        while (v11 != v10);
        unint64_t v12 = *(std::string **)a1;
      }
      *(void *)(a1 + 8) = v10;
      operator delete(v12);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (__sz > 0x555555555555555) {
      goto LABEL_50;
    }
    unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 4);
    uint64_t v19 = 2 * v18;
    if (2 * v18 <= __sz) {
      uint64_t v19 = __sz;
    }
    unint64_t v20 = v18 >= 0x2AAAAAAAAAAAAAALL ? 0x555555555555555 : v19;
    if (v20 > 0x555555555555555) {
LABEL_50:
    }
      sub_2E00();
    uint64_t v21 = 48 * v20;
    uint64_t v22 = (char *)operator new(48 * v20);
    *(void *)a1 = v22;
    *(void *)(a1 + 8) = v22;
    *(void *)(a1 + 16) = &v22[v21];
    if (v6 != a3)
    {
      uint64_t v23 = 0;
      do
      {
        sub_986878(v9, &v22[v23 * 24], (long long *)&v6[v23]);
        v23 += 2;
      }
      while (&v6[v23] != a3);
      v22 += v23 * 24;
    }
    *(void *)(a1 + 8) = v22;
  }
}

void sub_986838(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    sub_20ACF80(v3 + v2, v3);
    *(void *)(v1 + 8) = v3;
    _Unwind_Resume(exception_object);
  }
  *(void *)(v1 + 8) = v3;
  _Unwind_Resume(exception_object);
}

void sub_986878(int a1, void *__dst, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    sub_4200(__dst, *(void **)a3, *((void *)a3 + 1));
    __dst[3] = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    uint64_t v7 = (unsigned char *)*((void *)a3 + 3);
    int v9 = (unsigned char *)*((void *)a3 + 4);
    int64_t v8 = v9 - v7;
    if (v9 == v7) {
      return;
    }
  }
  else
  {
    long long v5 = *a3;
    __dst[2] = *((void *)a3 + 2);
    *(_OWORD *)std::string __dst = v5;
    __dst[3] = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    uint64_t v7 = (unsigned char *)*((void *)a3 + 3);
    uint64_t v6 = (unsigned char *)*((void *)a3 + 4);
    int64_t v8 = v6 - v7;
    if (v6 == v7) {
      return;
    }
  }
  if (v8 < 0) {
    sub_2E00();
  }
  uint64_t v10 = (char *)operator new(v8);
  __dst[3] = v10;
  __dst[4] = v10;
  unint64_t v11 = &v10[8 * (v8 >> 3)];
  __dst[5] = v11;
  memcpy(v10, v7, v8);
  __dst[4] = v11;
}

void sub_986940(_Unwind_Exception *a1)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  sub_20A6E54((void **)v1);
  _Unwind_Resume(a1);
}

char *sub_986964(unint64_t *a1, void *a2, char *__src, char *a4, uint64_t a5)
{
  unint64_t v6 = *a1;
  uint64_t v7 = (uint64_t)a2 - *a1;
  int64_t v8 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  uint64_t v9 = a5 - 1;
  if (a5 < 1) {
    return v8;
  }
  unint64_t v11 = __src;
  uint64_t v13 = v7 >> 3;
  unint64_t v15 = a1[1];
  unint64_t v14 = a1[2];
  if (a5 > (uint64_t)(v14 - v15) >> 3)
  {
    unint64_t v16 = a5 + ((uint64_t)(v15 - v6) >> 3);
    if (v16 >> 61) {
      sub_2E00();
    }
    uint64_t v17 = v14 - v6;
    if (v17 >> 2 > v16) {
      unint64_t v16 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 >> 61) {
        sub_188D718();
      }
      unint64_t v19 = *a1 + (v7 & 0xFFFFFFFFFFFFFFF8);
      unint64_t v20 = v18;
      uint64_t v21 = operator new(8 * v18);
      unint64_t v18 = v20;
      int64_t v8 = (char *)v19;
      uint64_t v13 = v7 >> 3;
      unint64_t v11 = __src;
    }
    else
    {
      uint64_t v21 = 0;
    }
    int v43 = &v21[8 * v13];
    uint64_t v44 = &v43[8 * a5];
    uint64_t v45 = v43;
    uint64_t v46 = v11;
    if ((v9 & 0x1FFFFFFFFFFFFFFFuLL) < 7) {
      goto LABEL_57;
    }
    uint64_t v45 = &v21[8 * v13];
    uint64_t v46 = v11;
    if ((unint64_t)(&v21[v7 & 0xFFFFFFFFFFFFFFF8] - v11) < 0x20) {
      goto LABEL_57;
    }
    uint64_t v47 = (v9 & 0x1FFFFFFFFFFFFFFFLL) + 1;
    uint64_t v48 = 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v45 = &v43[v48];
    uint64_t v46 = &v11[v48];
    unint64_t v49 = (long long *)(v11 + 16);
    uint64_t v50 = &v21[8 * v13 + 16];
    uint64_t v51 = v47 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v52 = *v49;
      *(v50 - 1) = *(v49 - 1);
      _OWORD *v50 = v52;
      v49 += 2;
      v50 += 2;
      v51 -= 4;
    }
    while (v51);
    if (v47 != (v47 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_57:
      do
      {
        uint64_t v53 = *(void *)v46;
        v46 += 8;
        *(void *)uint64_t v45 = v53;
        v45 += 8;
      }
      while (v45 != v44);
    }
    int v54 = &v21[8 * v13];
    if ((void *)v6 != a2)
    {
      uint64_t v55 = v8;
      int v54 = &v21[8 * v13];
      if ((unint64_t)(v7 - 8) < 0x68) {
        goto LABEL_58;
      }
      uint64_t v55 = v8;
      int v54 = &v21[8 * v13];
      if ((v7 & 0xFFFFFFFFFFFFFFF8) + v6 - (unint64_t)&v21[v7 & 0xFFFFFFFFFFFFFFF8] < 0x20) {
        goto LABEL_58;
      }
      unint64_t v56 = ((unint64_t)(v7 - 8) >> 3) + 1;
      uint64_t v57 = 8 * (v56 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v55 = &v8[-v57];
      int v54 = &v43[-v57];
      uint64_t v58 = 8 * v13 - 16;
      __n128 v59 = &v21[v58];
      int v60 = (long long *)(v6 + v58);
      uint64_t v61 = v56 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v62 = *v60;
        *(v59 - 1) = *(v60 - 1);
        _OWORD *v59 = v62;
        v59 -= 2;
        v60 -= 2;
        v61 -= 4;
      }
      while (v61);
      if (v56 != (v56 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_58:
        do
        {
          uint64_t v63 = *((void *)v55 - 1);
          v55 -= 8;
          *((void *)v54 - 1) = v63;
          v54 -= 8;
        }
        while (v55 != (char *)v6);
      }
    }
    uint64_t v64 = &v21[8 * v18];
    size_t v65 = v15 - (void)v8;
    if (v65) {
      memmove(&v43[8 * a5], v8, v65);
    }
    *a1 = (unint64_t)v54;
    a1[1] = (unint64_t)&v44[v65];
    a1[2] = (unint64_t)v64;
    if (v6) {
      operator delete((void *)v6);
    }
    return v43;
  }
  uint64_t v22 = v15 - (void)v8;
  uint64_t v23 = (uint64_t)(v15 - (void)v8) >> 3;
  if (v23 >= a5)
  {
    int v24 = &__src[8 * a5];
    unint64_t v26 = a1[1];
  }
  else
  {
    int v24 = &__src[8 * v23];
    int64_t v25 = a4 - v24;
    if (a4 != v24)
    {
      unint64_t v70 = *a1 + (v7 & 0xFFFFFFFFFFFFFFF8);
      memmove((void *)a1[1], &__src[8 * v23], a4 - v24);
      uint64_t v13 = v7 >> 3;
      int64_t v8 = (char *)v70;
    }
    unint64_t v26 = v15 + v25;
    a1[1] = v15 + v25;
    if (v22 < 1) {
      return v8;
    }
  }
  BOOL v27 = &v8[8 * a5];
  size_t v28 = v26 - (void)v27;
  uint64_t v29 = (uint64_t)(v26 - (void)v27) >> 3;
  uint64_t v30 = (uint64_t *)(v26 - 8 * a5);
  unint64_t v31 = (void *)v26;
  if ((unint64_t)v30 < v15)
  {
    unint64_t v32 = (v7 & 0xFFFFFFFFFFFFFFF8) + v28;
    unsigned int v33 = (char *)(v32 + v6);
    unint64_t v34 = v32 + v6 + 8;
    if (v15 > v34) {
      unint64_t v34 = v15;
    }
    unint64_t v35 = v34 + ~v6 - v32;
    if (v35 < 0x58)
    {
      unint64_t v31 = (void *)v26;
    }
    else
    {
      unint64_t v36 = v26 - (void)v33;
      unint64_t v31 = (void *)v26;
      if (v36 >= 0x20)
      {
        uint64_t v37 = (v35 >> 3) + 1;
        uint64_t v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v30 = (uint64_t *)((char *)v30 + v38);
        unint64_t v31 = (void *)(v26 + v38);
        uint64_t v39 = (_OWORD *)(v26 + 16);
        uint64_t v40 = (long long *)(8 * v29 + 8 * v13 + v6 + 16);
        uint64_t v41 = v37 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v42 = *v40;
          *(v39 - 1) = *(v40 - 1);
          *uint64_t v39 = v42;
          v39 += 2;
          v40 += 2;
          v41 -= 4;
        }
        while (v41);
        if (v37 == (v37 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_47;
        }
      }
    }
    do
    {
      uint64_t v66 = *v30++;
      *v31++ = v66;
    }
    while ((unint64_t)v30 < v15);
  }
LABEL_47:
  a1[1] = (unint64_t)v31;
  if ((char *)v26 != v27)
  {
    int v67 = v8;
    memmove((void *)(v26 - 8 * v29), v8, v28);
    int64_t v8 = v67;
  }
  if (v24 != v11)
  {
    int v43 = v8;
    memmove(v8, v11, v24 - v11);
    return v43;
  }
  return v8;
}

uint64_t *sub_986D10(void *a1, uint64_t a2)
{
  unint64_t v4 = sub_986EC0((uint64_t)(a1 + 3), a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t v10 = *(uint64_t ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  unint64_t v11 = *v10;
  if (*v10)
  {
    char v12 = *(unsigned char *)(a2 + 23);
    if (v12 >= 0) {
      uint64_t v13 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v13 = *(void *)(a2 + 8);
    }
    if (v12 >= 0) {
      unint64_t v14 = (unsigned __int8 *)a2;
    }
    else {
      unint64_t v14 = *(unsigned __int8 **)a2;
    }
    uint64_t v16 = a2 + 24;
    unint64_t v15 = *(void **)(a2 + 24);
    uint64_t v17 = *(void *)(v16 + 8) - (void)v15;
    do
    {
      unint64_t v18 = v11[1];
      if (v18 == v6)
      {
        uint64_t v19 = *((unsigned __int8 *)v11 + 39);
        if ((v19 & 0x80u) == 0) {
          uint64_t v20 = *((unsigned __int8 *)v11 + 39);
        }
        else {
          uint64_t v20 = v11[3];
        }
        if (v20 != v13) {
          goto LABEL_17;
        }
        uint64_t v21 = (const void **)(v11 + 2);
        if ((v19 & 0x80) != 0)
        {
          if (memcmp(*v21, v14, v11[3])) {
            goto LABEL_17;
          }
        }
        else if (*((unsigned char *)v11 + 39))
        {
          uint64_t v22 = v14;
          while (*(unsigned __int8 *)v21 == *v22)
          {
            uint64_t v21 = (const void **)((char *)v21 + 1);
            ++v22;
            if (!--v19) {
              goto LABEL_33;
            }
          }
          goto LABEL_17;
        }
LABEL_33:
        int v24 = (char *)v11[5];
        uint64_t v23 = (char *)v11[6];
        if (v23 - v24 == v17)
        {
          if (v24 == v23) {
            return v11;
          }
          for (uint64_t i = v15; *(void *)v24 == *i; ++i)
          {
            v24 += 8;
            if (v24 == v23) {
              return v11;
            }
          }
        }
      }
      else
      {
        if (v8 <= 1)
        {
          v18 &= *(void *)&v5 - 1;
        }
        else if (v18 >= *(void *)&v5)
        {
          v18 %= *(void *)&v5;
        }
        if (v18 != v9) {
          return 0;
        }
      }
LABEL_17:
      unint64_t v11 = (uint64_t *)*v11;
    }
    while (v11);
  }
  return v11;
}

unint64_t sub_986EC0(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_4200(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v11 = *(void *)(a2 + 16);
  }
  if (v11 >= 0) {
    uint64_t v3 = (uint64_t *)__p;
  }
  else {
    uint64_t v3 = (uint64_t *)__p[0];
  }
  if (v11 >= 0) {
    unint64_t v4 = HIBYTE(v11);
  }
  else {
    unint64_t v4 = (unint64_t)__p[1];
  }
  unint64_t v5 = (sub_B128((uint64_t)&v12, v3, v4) + 0x388152A534) ^ 0xDEADBEEF;
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v6 = *(uint64_t **)(a2 + 24);
  for (uint64_t i = *(uint64_t **)(a2 + 32); v6 != i; v5 ^= (v5 << 6) + (v5 >> 2) + 2654435769u + v8)
    uint64_t v8 = *v6++;
  return v5;
}

char *sub_986F9C(void **a1, long long *a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x555555555555555;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x555555555555555) {
      sub_188D718();
    }
    uint8x8_t v7 = (char *)operator new(48 * v6);
  }
  else
  {
    uint8x8_t v7 = 0;
  }
  uint64_t v16 = &v7[48 * v3];
  uint64_t v17 = &v7[48 * v6];
  sub_987174(a1 + 16, v16, a2);
  uint64_t v8 = v16;
  unint64_t v9 = v16 + 48;
  uint64_t v10 = (char *)*a1;
  uint64_t v11 = (char *)a1[1];
  if (v11 == *a1)
  {
    *a1 = v16;
    a1[1] = v9;
    a1[2] = v17;
  }
  else
  {
    do
    {
      long long v12 = *((_OWORD *)v11 - 3);
      *((void *)v8 - 4) = *((void *)v11 - 4);
      *((_OWORD *)v8 - 3) = v12;
      *((void *)v11 - 5) = 0;
      *((void *)v11 - 4) = 0;
      *((void *)v11 - 6) = 0;
      *((void *)v8 - 3) = 0;
      *((void *)v8 - 2) = 0;
      *((void *)v8 - 1) = 0;
      *(_OWORD *)(v8 - 24) = *(_OWORD *)(v11 - 24);
      *((void *)v8 - 1) = *((void *)v11 - 1);
      v8 -= 48;
      *((void *)v11 - 3) = 0;
      *((void *)v11 - 2) = 0;
      *((void *)v11 - 1) = 0;
      v11 -= 48;
    }
    while (v11 != v10);
    uint64_t v13 = (char *)*a1;
    uint64_t v11 = (char *)a1[1];
    *a1 = v8;
    a1[1] = v9;
    a1[2] = v17;
    if (v11 != v13)
    {
      do
      {
        unint64_t v14 = (void *)*((void *)v11 - 3);
        if (v14)
        {
          *((void *)v11 - 2) = v14;
          operator delete(v14);
        }
        if (*(v11 - 25) < 0) {
          operator delete(*((void **)v11 - 6));
        }
        v11 -= 48;
      }
      while (v11 != v13);
      uint64_t v11 = v13;
    }
  }
  if (v11) {
    operator delete(v11);
  }
  return v16 + 48;
}

void sub_987160(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_987260((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_987174(int a1, void *__dst, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    sub_4200(__dst, *(void **)a3, *((void *)a3 + 1));
    __dst[3] = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    uint8x8_t v7 = (unsigned char *)*((void *)a3 + 3);
    unint64_t v9 = (unsigned char *)*((void *)a3 + 4);
    int64_t v8 = v9 - v7;
    if (v9 == v7) {
      return;
    }
  }
  else
  {
    long long v5 = *a3;
    __dst[2] = *((void *)a3 + 2);
    *(_OWORD *)std::string __dst = v5;
    __dst[3] = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    uint8x8_t v7 = (unsigned char *)*((void *)a3 + 3);
    unint64_t v6 = (unsigned char *)*((void *)a3 + 4);
    int64_t v8 = v6 - v7;
    if (v6 == v7) {
      return;
    }
  }
  if (v8 < 0) {
    sub_2E00();
  }
  uint64_t v10 = (char *)operator new(v8);
  __dst[3] = v10;
  __dst[4] = v10;
  uint64_t v11 = &v10[8 * (v8 >> 3)];
  __dst[5] = v11;
  memcpy(v10, v7, v8);
  __dst[4] = v11;
}

void sub_98723C(_Unwind_Exception *a1)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  sub_20A6E54((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_987260(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
    unint64_t v4 = *(void **)(i - 24);
    if (v4)
    {
      *(void *)(i - 16) = v4;
      operator delete(v4);
    }
    if (*(char *)(i - 25) < 0) {
      operator delete(*(void **)(i - 48));
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_9872D8(uint64_t a1, uint64_t a2, long long *a3, void *a4)
{
  unint64_t v9 = (void *)(a1 + 24);
  unint64_t v10 = sub_986EC0(a1 + 24, a2);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    unint64_t v15 = *(void **)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      uint64_t v16 = (void *)*v15;
      if (*v15)
      {
        uint64_t v51 = a3;
        long long v52 = a4;
        unint64_t v17 = v12 - 1;
        char v18 = *(unsigned char *)(a2 + 23);
        if (v18 >= 0) {
          uint64_t v19 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          uint64_t v19 = *(void *)(a2 + 8);
        }
        if (v18 >= 0) {
          uint64_t v20 = (unsigned __int8 *)a2;
        }
        else {
          uint64_t v20 = *(unsigned __int8 **)a2;
        }
        uint64_t v53 = *(void **)(a2 + 24);
        unint64_t v54 = v10;
        uint64_t v21 = *(void *)(a2 + 32) - (void)v53;
        while (1)
        {
          unint64_t v22 = v16[1];
          if (v22 == v11)
          {
            uint64_t v23 = *((unsigned __int8 *)v16 + 39);
            if ((v23 & 0x80u) == 0) {
              uint64_t v24 = *((unsigned __int8 *)v16 + 39);
            }
            else {
              uint64_t v24 = v16[3];
            }
            if (v24 == v19)
            {
              int64_t v25 = (const void **)(v16 + 2);
              if ((v23 & 0x80) != 0)
              {
                unint64_t v27 = v17;
                size_t v28 = v9;
                uint64_t v29 = v21;
                unint64_t v30 = v4;
                uint64_t v31 = v19;
                int v32 = memcmp(*v25, v20, v16[3]);
                uint64_t v19 = v31;
                unint64_t v4 = v30;
                unint64_t v11 = v54;
                uint64_t v21 = v29;
                unint64_t v9 = v28;
                unint64_t v17 = v27;
                if (!v32)
                {
LABEL_34:
                  unint64_t v34 = (char *)v16[5];
                  unsigned int v33 = (char *)v16[6];
                  if (v33 - v34 == v21)
                  {
                    if (v34 == v33) {
                      return v16;
                    }
                    for (uint64_t i = v53; *(void *)v34 == *i; ++i)
                    {
                      v34 += 8;
                      if (v34 == v33) {
                        return v16;
                      }
                    }
                  }
                }
              }
              else
              {
                if (!*((unsigned char *)v16 + 39)) {
                  goto LABEL_34;
                }
                unint64_t v26 = v20;
                while (*(unsigned __int8 *)v25 == *v26)
                {
                  int64_t v25 = (const void **)((char *)v25 + 1);
                  ++v26;
                  if (!--v23) {
                    goto LABEL_34;
                  }
                }
              }
            }
          }
          else
          {
            if (v14 <= 1)
            {
              v22 &= v17;
            }
            else if (v22 >= v12)
            {
              v22 %= v12;
            }
            if (v22 != v4)
            {
LABEL_40:
              a3 = v51;
              a4 = v52;
              break;
            }
          }
          uint64_t v16 = (void *)*v16;
          if (!v16) {
            goto LABEL_40;
          }
        }
      }
    }
  }
  uint64_t v55 = operator new(0x48uLL);
  *uint64_t v55 = 0;
  v55[1] = v11;
  sub_987720(v55 + 2, a3, a4);
  float v36 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v37 = *(float *)(a1 + 32);
  if (!v12 || (float)(v37 * (float)v12) < v36)
  {
    BOOL v40 = 1;
    if (v12 >= 3) {
      BOOL v40 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v41 = v40 | (2 * v12);
    unint64_t v42 = vcvtps_u32_f32(v36 / v37);
    if (v41 <= v42) {
      size_t prime = v42;
    }
    else {
      size_t prime = v41;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v44 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v44) {
      goto LABEL_55;
    }
    if (prime < *(void *)&v44)
    {
      unint64_t v45 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v44 < 3uLL || (uint8x8_t v46 = (uint8x8_t)vcnt_s8(v44), v46.i16[0] = vaddlv_u8(v46), v46.u32[0] > 1uLL))
      {
        unint64_t v45 = std::__next_prime(v45);
      }
      else
      {
        uint64_t v47 = 1 << -(char)__clz(v45 - 1);
        if (v45 >= 2) {
          unint64_t v45 = v47;
        }
      }
      if (prime <= v45) {
        size_t prime = v45;
      }
      if (prime < *(void *)&v44) {
LABEL_55:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v48 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        uint64_t v38 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        uint64_t v39 = v55;
        if (v38) {
          goto LABEL_44;
        }
      }
      else
      {
        unint64_t v4 = v11;
        uint64_t v38 = *(void **)(*(void *)a1 + 8 * v11);
        uint64_t v39 = v55;
        if (v38) {
          goto LABEL_44;
        }
      }
    }
    else
    {
      unint64_t v4 = v48 & v11;
      uint64_t v38 = *(void **)(*(void *)a1 + 8 * (v48 & v11));
      uint64_t v39 = v55;
      if (v38) {
        goto LABEL_44;
      }
    }
LABEL_68:
    *uint64_t v39 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v55;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*v55)
    {
      unint64_t v49 = *(void *)(*v55 + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v49 >= v12) {
          v49 %= v12;
        }
      }
      else
      {
        v49 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v49) = v55;
    }
    goto LABEL_79;
  }
  uint64_t v38 = *(void **)(*(void *)a1 + 8 * v4);
  uint64_t v39 = v55;
  if (!v38) {
    goto LABEL_68;
  }
LABEL_44:
  *uint64_t v39 = *v38;
  *uint64_t v38 = v55;
LABEL_79:
  uint64_t v16 = v55;
  ++*v9;
  return v16;
}

void sub_9876F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_2AC37C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_98770C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_2AC37C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_987720(void *__dst, long long *a2, void *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_4200(__dst, *(void **)a2, *((void *)a2 + 1));
    __dst[3] = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    int64_t v8 = (unsigned char *)*((void *)a2 + 3);
    unint64_t v10 = (unsigned char *)*((void *)a2 + 4);
    int64_t v9 = v10 - v8;
    if (v10 == v8) {
      goto LABEL_7;
    }
  }
  else
  {
    long long v6 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v6;
    __dst[3] = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    int64_t v8 = (unsigned char *)*((void *)a2 + 3);
    uint8x8_t v7 = (unsigned char *)*((void *)a2 + 4);
    int64_t v9 = v7 - v8;
    if (v7 == v8) {
      goto LABEL_7;
    }
  }
  if (v9 < 0) {
    sub_2E00();
  }
  unint64_t v11 = (char *)operator new(v9);
  __dst[3] = v11;
  __dst[4] = v11;
  unint64_t v12 = &v11[8 * (v9 >> 3)];
  __dst[5] = v12;
  memcpy(v11, v8, v9);
  __dst[4] = v12;
LABEL_7:
  __dst[6] = *a3;
  return __dst;
}

void sub_9877F4(_Unwind_Exception *a1)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  sub_20A6E54((void **)v1);
  _Unwind_Resume(a1);
}

void *sub_987818(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    int64_t v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      unint64_t v10 = (void *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == v6)
            {
              if (v10[2] == v6) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            unint64_t v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          unint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  unint64_t v14 = operator new(0x18uLL);
  void *v14 = 0;
  v14[1] = v6;
  v14[2] = *a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    uint64_t v17 = *(void *)a1;
    char v18 = *(void **)(*(void *)a1 + 8 * v3);
    if (v18)
    {
LABEL_26:
      void *v14 = *v18;
LABEL_61:
      *char v18 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v19 = 1;
    if (v7 >= 3) {
      BOOL v19 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v7);
    unint64_t v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21) {
      size_t prime = v21;
    }
    else {
      size_t prime = v20;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_37;
    }
    if (prime < v7)
    {
      unint64_t v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        unint64_t v23 = std::__next_prime(v23);
      }
      else
      {
        uint64_t v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2) {
          unint64_t v23 = v25;
        }
      }
      if (prime <= v23) {
        size_t prime = v23;
      }
      if (prime < v7) {
LABEL_37:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    unint64_t v26 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
      {
        unint64_t v3 = v6 % v7;
        uint64_t v17 = *(void *)a1;
        char v18 = *(void **)(*(void *)a1 + 8 * (v6 % v7));
        if (v18) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v6;
        uint64_t v17 = *(void *)a1;
        char v18 = *(void **)(*(void *)a1 + 8 * v6);
        if (v18) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = v26 & v6;
      uint64_t v17 = *(void *)a1;
      char v18 = *(void **)(*(void *)a1 + 8 * (v26 & v6));
      if (v18) {
        goto LABEL_26;
      }
    }
  }
  void *v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v17 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    unint64_t v27 = *(void *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7) {
        v27 %= v7;
      }
    }
    else
    {
      v27 &= v7 - 1;
    }
    char v18 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_987B28(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char ***sub_987B3C(char ***a1, _OWORD *a2)
{
  unint64_t v4 = *a1;
  unint64_t v6 = (*a1)[1];
  unint64_t v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    int64_t v9 = *v4;
    uint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((v6 - *v4) >> 2);
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) > 0x924924924924924) {
      sub_2E00();
    }
    unint64_t v12 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5 - (void)v9) >> 2);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x492492492492492) {
      unint64_t v13 = 0x924924924924924;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 > 0x924924924924924) {
        sub_188D718();
      }
      unint64_t v14 = (char *)operator new(28 * v13);
    }
    else
    {
      unint64_t v14 = 0;
    }
    float v15 = &v14[28 * v10];
    *(_OWORD *)float v15 = *a2;
    *(_OWORD *)(v15 + 12) = *(_OWORD *)((char *)a2 + 12);
    uint8x8_t v8 = v15 + 28;
    if (v6 != v9)
    {
      do
      {
        long long v16 = *(_OWORD *)(v6 - 28);
        *((_OWORD *)v15 - 1) = *((_OWORD *)v6 - 1);
        *(_OWORD *)(v15 - 28) = v16;
        v15 -= 28;
        v6 -= 28;
      }
      while (v6 != v9);
      unint64_t v6 = *v4;
    }
    *unint64_t v4 = v15;
    v4[1] = v8;
    v4[2] = &v14[28 * v13];
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    long long v7 = *a2;
    *(_OWORD *)(v6 + 12) = *(_OWORD *)((char *)a2 + 12);
    *(_OWORD *)unint64_t v6 = v7;
    uint8x8_t v8 = v6 + 28;
  }
  v4[1] = v8;
  return a1;
}

double sub_987CA4(unint64_t *a1, unint64_t *a2, uint64_t a3, unint64_t a4, unint64_t *a5, uint64_t a6)
{
  if (a4 < 2) {
    return *(double *)&v13;
  }
  unint64_t v6 = (uint64_t *)a3;
  long long v7 = a1;
  if (a4 == 2)
  {
    unint64_t v8 = *(a2 - 1);
    uint64_t v9 = *(void *)(*(void *)a3 + 176);
    unint64_t v10 = 0x823EE08FB823EE09 * ((*(void *)(*(void *)a3 + 184) - v9) >> 3);
    if (v10 <= v8 || v10 <= *a1) {
      sub_66748();
    }
    uint64_t v11 = v9 + 456 * *a1;
    int v12 = sub_9854B0(v9 + 456 * v8);
    if (v12 > (int)sub_9854B0(v11))
    {
      unint64_t v14 = *v7;
      *long long v7 = *(a2 - 1);
      *(a2 - 1) = v14;
    }
    return *(double *)&v13;
  }
  if ((uint64_t)a4 <= 128)
  {
    if (a1 == a2) {
      return *(double *)&v13;
    }
    long long v16 = a1 + 1;
    if (a1 + 1 == a2) {
      return *(double *)&v13;
    }
    uint64_t v17 = a1;
    while (1)
    {
      BOOL v85 = v16;
      uint64_t v19 = *(void *)(*v6 + 176);
      unint64_t v20 = 0x823EE08FB823EE09 * ((*(void *)(*v6 + 184) - v19) >> 3);
      if (v20 <= *v16) {
        sub_66748();
      }
      if (v20 <= *v17) {
        sub_66748();
      }
      uint64_t v21 = v19 + 456 * *v17;
      int v22 = sub_9854B0(v19 + 456 * *v16);
      if (v22 > (int)sub_9854B0(v21))
      {
        unint64_t v23 = v85;
        unint64_t v24 = *v85;
        unint64_t v87 = *v85;
        while (1)
        {
          unint64_t *v23 = *v17;
          if (v17 == v7) {
            break;
          }
          uint64_t v26 = *v6;
          uint64_t v27 = *(void *)(*v6 + 176);
          unint64_t v28 = 0x823EE08FB823EE09 * ((*(void *)(v26 + 184) - v27) >> 3);
          if (v28 <= v24) {
            sub_66748();
          }
          int v89 = v17;
          unint64_t v30 = *--v17;
          unint64_t v29 = v30;
          if (v28 <= v30) {
            sub_66748();
          }
          uint64_t v31 = v27 + 456 * v24;
          uint64_t v33 = *(void *)(v31 + 424);
          uint64_t v32 = *(void *)(v31 + 432);
          int v34 = -1;
          while (v33 != v32)
          {
            unsigned int v35 = *(_DWORD *)(v33 + 8);
            unsigned int v91 = v35;
            char v99 = *(unsigned char *)(v33 + 96);
            if (v99)
            {
              sub_360E8C((uint64_t)&v93, v33 + 16);
              unsigned int v35 = v91;
            }
            if (v35 < 7 && ((0x77u >> v35) & 1) != 0)
            {
              int v36 = dword_20EA7BC[v35];
              if (v99) {
                goto LABEL_35;
              }
            }
            else
            {
              if (v35 == 3) {
                int v36 = 14;
              }
              else {
                int v36 = 0;
              }
              if (v99)
              {
LABEL_35:
                if (__p)
                {
                  int v98 = __p;
                  operator delete(__p);
                }
                if (v95)
                {
                  int v96 = v95;
                  operator delete(v95);
                }
                if (v93)
                {
                  int v94 = v93;
                  operator delete(v93);
                }
                char v99 = 0;
              }
            }
            if (v36 > v34) {
              int v34 = v36;
            }
            v33 += 104;
          }
          uint64_t v37 = v27 + 456 * v29;
          uint64_t v39 = *(void *)(v37 + 424);
          uint64_t v38 = *(void *)(v37 + 432);
          int v40 = -1;
          if (v39 != v38)
          {
            long long v7 = a1;
            while (1)
            {
              unsigned int v41 = *(_DWORD *)(v39 + 8);
              unsigned int v92 = v41;
              char v99 = *(unsigned char *)(v39 + 96);
              if (v99)
              {
                sub_360E8C((uint64_t)&v93, v39 + 16);
                unsigned int v41 = v92;
              }
              if (v41 < 7 && ((0x77u >> v41) & 1) != 0)
              {
                int v42 = dword_20EA7BC[v41];
                if (v99) {
                  goto LABEL_60;
                }
LABEL_55:
                if (v42 > v40) {
                  int v40 = v42;
                }
                v39 += 104;
                if (v39 == v38) {
                  goto LABEL_20;
                }
              }
              else
              {
                if (v41 == 3) {
                  int v42 = 14;
                }
                else {
                  int v42 = 0;
                }
                if (!v99) {
                  goto LABEL_55;
                }
LABEL_60:
                if (__p)
                {
                  int v98 = __p;
                  operator delete(__p);
                }
                if (v95)
                {
                  int v96 = v95;
                  operator delete(v95);
                }
                if (v93)
                {
                  int v94 = v93;
                  operator delete(v93);
                }
                char v99 = 0;
                if (v42 > v40) {
                  int v40 = v42;
                }
                v39 += 104;
                if (v39 == v38) {
                  goto LABEL_20;
                }
              }
            }
          }
          long long v7 = a1;
LABEL_20:
          char v18 = v89;
          unint64_t v23 = v89;
          BOOL v25 = v34 <= v40;
          unint64_t v24 = v87;
          unint64_t v6 = (uint64_t *)a3;
          if (v25) {
            goto LABEL_13;
          }
        }
        char v18 = v7;
LABEL_13:
        *char v18 = v24;
      }
      uint64_t v17 = v85;
      long long v16 = v85 + 1;
      if (v85 + 1 == a2) {
        return *(double *)&v13;
      }
    }
  }
  unint64_t v45 = a4 >> 1;
  uint8x8_t v46 = &a1[a4 >> 1];
  unint64_t v47 = a4 >> 1;
  if ((uint64_t)a4 <= a6)
  {
    sub_9883C0(a1, v46, a3, v47, a5);
    unint64_t v48 = &a5[v45];
    *(void *)&long long v13 = sub_9883C0(&v7[a4 >> 1], a2, (uint64_t)v6, a4 - (a4 >> 1), v48).n128_u64[0];
    unint64_t v49 = v48;
    uint64_t v50 = a5;
    uint64_t v51 = v7;
    int v90 = a5;
    long long v52 = &a5[a4];
    uint64_t v53 = v7;
    do
    {
      if (v49 == v52)
      {
        if (v50 == v48) {
          return *(double *)&v13;
        }
        unint64_t v73 = (char *)&v90[a4 >> 1] - (char *)v50 - 8;
        if (v73 >= 0x38 && (unint64_t)((char *)v53 - (char *)v50) >= 0x20)
        {
          uint64_t v77 = 0;
          uint64_t v78 = (v73 >> 3) + 1;
          uint64_t v79 = v78 & 0x3FFFFFFFFFFFFFFCLL;
          int v74 = &v50[v79];
          uint64_t v75 = &v51[v79];
          uint64_t v80 = v78 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            uint64_t v81 = &v51[v77];
            long long v13 = *(_OWORD *)&v50[v77];
            long long v82 = *(_OWORD *)&v50[v77 + 2];
            *(_OWORD *)uint64_t v81 = v13;
            *((_OWORD *)v81 + 1) = v82;
            v77 += 4;
            v80 -= 4;
          }
          while (v80);
          if (v78 == (v78 & 0x3FFFFFFFFFFFFFFCLL)) {
            return *(double *)&v13;
          }
        }
        else
        {
          int v74 = v50;
          uint64_t v75 = v51;
        }
        do
        {
          unint64_t v76 = *v74++;
          *v75++ = v76;
        }
        while (v74 != v48);
        return *(double *)&v13;
      }
      unint64_t v54 = v49;
      uint64_t v55 = *(void *)(*(void *)a3 + 176);
      unint64_t v56 = 0x823EE08FB823EE09 * ((*(void *)(*(void *)a3 + 184) - v55) >> 3);
      if (v56 <= *v49 || v56 <= *v50) {
        sub_66748();
      }
      uint64_t v57 = v55 + 456 * *v50;
      int v58 = sub_9854B0(v55 + 456 * *v49);
      int v59 = sub_9854B0(v57);
      if (v58 > v59) {
        int v60 = v54;
      }
      else {
        int v60 = v50;
      }
      v50 += v58 <= v59;
      unint64_t v49 = &v54[v58 > v59];
      *v51++ = *v60;
      ++v53;
    }
    while (v50 != v48);
    if (v49 != v52)
    {
      uint64_t v61 = -8;
      if (v58 <= v59) {
        uint64_t v61 = 0;
      }
      unint64_t v62 = (char *)&v90[a4] - (char *)v54 + v61 - 8;
      if (v62 < 0x78 || (unint64_t)((char *)v53 - (char *)&v54[v58 > v59]) < 0x20) {
        goto LABEL_114;
      }
      uint64_t v63 = 0;
      uint64_t v64 = (v62 >> 3) + 1;
      uint64_t v65 = v64 & 0x3FFFFFFFFFFFFFFCLL;
      unint64_t v49 = (unint64_t *)((char *)v49 + v65 * 8);
      uint64_t v66 = &v51[v65];
      char v67 = v58 > v59 ? 1 : 2;
      long long v68 = &v54[v67 & 1];
      uint64_t v69 = v64 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        unint64_t v70 = &v51[v63];
        long long v13 = *(_OWORD *)&v68[v63];
        long long v71 = *(_OWORD *)&v68[v63 + 2];
        *(_OWORD *)unint64_t v70 = v13;
        *((_OWORD *)v70 + 1) = v71;
        v63 += 4;
        v69 -= 4;
      }
      while (v69);
      uint64_t v51 = v66;
      if (v64 != (v64 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_114:
        do
        {
          unint64_t v72 = *v49++;
          *v51++ = v72;
        }
        while (v49 != v52);
      }
    }
  }
  else
  {
    sub_987CA4(a1, v46, a3, v47, a5, a6);
    sub_987CA4(&v7[a4 >> 1], a2, v6, a4 - (a4 >> 1), a5, a6);
    *(void *)&long long v13 = sub_988A4C(v7, &v7[a4 >> 1], a2, v6, a4 >> 1, a4 - (a4 >> 1), a5, a6).n128_u64[0];
  }
  return *(double *)&v13;
}

void sub_9883B0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_58CC(a1);
  }
  _Unwind_Resume(a1);
}

__n128 sub_9883C0(unint64_t *a1, unint64_t *a2, uint64_t a3, unint64_t a4, unint64_t *a5)
{
  if (a4)
  {
    unint64_t v5 = a5;
    long long v7 = a1;
    if (a4 == 1)
    {
LABEL_11:
      *unint64_t v5 = *v7;
      return result;
    }
    if (a4 == 2)
    {
      unint64_t v10 = a2 - 1;
      unint64_t v9 = *(a2 - 1);
      uint64_t v11 = *(void *)(*(void *)a3 + 176);
      unint64_t v12 = 0x823EE08FB823EE09 * ((*(void *)(*(void *)a3 + 184) - v11) >> 3);
      if (v12 <= v9 || v12 <= *a1) {
        sub_66748();
      }
      uint64_t v13 = v11 + 456 * *a1;
      int v14 = sub_9854B0(v11 + 456 * v9);
      int v15 = sub_9854B0(v13);
      if (v14 <= v15) {
        uint64_t v17 = v7;
      }
      else {
        uint64_t v17 = v10;
      }
      *v5++ = *v17;
      if (v14 <= v15) {
        long long v7 = v10;
      }
      goto LABEL_11;
    }
    if ((uint64_t)a4 <= 8)
    {
      if (a1 == a2) {
        return result;
      }
      char v18 = a1 + 1;
      *a5 = *a1;
      if (a1 + 1 == a2) {
        return result;
      }
      uint64_t v19 = a5;
      while (1)
      {
        int v22 = v19;
        uint64_t v23 = *(void *)(*(void *)a3 + 176);
        unint64_t v24 = 0x823EE08FB823EE09 * ((*(void *)(*(void *)a3 + 184) - v23) >> 3);
        if (v24 <= *v18) {
          sub_66748();
        }
        if (v24 <= *v22) {
          sub_66748();
        }
        uint64_t v25 = v23 + 456 * *v22;
        int v26 = sub_9854B0(v23 + 456 * *v18);
        int v27 = sub_9854B0(v25);
        unint64_t v20 = v22 + 1;
        uint64_t v19 = v22 + 1;
        if (v26 > v27)
        {
          v22[1] = *v22;
          unint64_t v20 = v5;
          if (v22 != v5)
          {
            uint64_t v80 = v22 + 1;
            long long v83 = v18;
            do
            {
              unint64_t v28 = *v18;
              uint64_t v29 = *(void *)(*(void *)a3 + 176);
              unint64_t v30 = 0x823EE08FB823EE09 * ((*(void *)(*(void *)a3 + 184) - v29) >> 3);
              if (v30 <= v28) {
                sub_66748();
              }
              uint64_t v86 = v22;
              uint64_t v32 = v22 - 1;
              unint64_t v31 = *(v22 - 1);
              if (v30 <= v31) {
                sub_66748();
              }
              uint64_t v33 = v29 + 456 * v28;
              uint64_t v35 = *(void *)(v33 + 424);
              uint64_t v34 = *(void *)(v33 + 432);
              int v36 = -1;
              while (v35 != v34)
              {
                unsigned int v37 = *(_DWORD *)(v35 + 8);
                unsigned int v87 = v37;
                char v95 = *(unsigned char *)(v35 + 96);
                if (v95)
                {
                  sub_360E8C((uint64_t)&v89, v35 + 16);
                  unsigned int v37 = v87;
                }
                if (v37 < 7 && ((0x77u >> v37) & 1) != 0)
                {
                  int v38 = dword_20EA7BC[v37];
                  if (v95) {
                    goto LABEL_38;
                  }
                }
                else
                {
                  if (v37 == 3) {
                    int v38 = 14;
                  }
                  else {
                    int v38 = 0;
                  }
                  if (v95)
                  {
LABEL_38:
                    if (__p)
                    {
                      int v94 = __p;
                      operator delete(__p);
                    }
                    if (v91)
                    {
                      unsigned int v92 = v91;
                      operator delete(v91);
                    }
                    if (v89)
                    {
                      int v90 = v89;
                      operator delete(v89);
                    }
                    char v95 = 0;
                  }
                }
                if (v38 > v36) {
                  int v36 = v38;
                }
                v35 += 104;
              }
              uint64_t v39 = v29 + 456 * v31;
              uint64_t v40 = *(void *)(v39 + 424);
              uint64_t v41 = *(void *)(v39 + 432);
              int v42 = -1;
              while (v40 != v41)
              {
                unsigned int v43 = *(_DWORD *)(v40 + 8);
                unsigned int v88 = v43;
                char v95 = *(unsigned char *)(v40 + 96);
                if (v95)
                {
                  sub_360E8C((uint64_t)&v89, v40 + 16);
                  unsigned int v43 = v88;
                }
                if (v43 < 7 && ((0x77u >> v43) & 1) != 0)
                {
                  int v44 = dword_20EA7BC[v43];
                  if (v95) {
                    goto LABEL_59;
                  }
                }
                else
                {
                  if (v43 == 3) {
                    int v44 = 14;
                  }
                  else {
                    int v44 = 0;
                  }
                  if (v95)
                  {
LABEL_59:
                    if (__p)
                    {
                      int v94 = __p;
                      operator delete(__p);
                    }
                    if (v91)
                    {
                      unsigned int v92 = v91;
                      operator delete(v91);
                    }
                    if (v89)
                    {
                      int v90 = v89;
                      operator delete(v89);
                    }
                    char v95 = 0;
                  }
                }
                if (v44 > v42) {
                  int v42 = v44;
                }
                v40 += 104;
              }
              if (v36 <= v42)
              {
                unint64_t v20 = v86;
                unint64_t v5 = a5;
                char v18 = v83;
                goto LABEL_18;
              }
              *uint64_t v86 = *(v86 - 1);
              int v22 = v32;
              unint64_t v5 = a5;
              char v18 = v83;
            }
            while (v32 != a5);
            unint64_t v20 = a5;
LABEL_18:
            uint64_t v19 = v80;
          }
        }
        unint64_t v21 = *v18++;
        *unint64_t v20 = v21;
        if (v18 == a2) {
          return result;
        }
      }
    }
    unint64_t v45 = a4 >> 1;
    uint64_t v46 = a4 >> 1;
    unint64_t v47 = &a1[v46];
    sub_987CA4(a1, &a1[v46], a3, a4 >> 1, a5, a4 >> 1);
    sub_987CA4(&v7[v46], a2, a3, a4 - v45, &v5[v46], a4 - v45);
    unint64_t v48 = v7;
    unint64_t v49 = v5;
    int v84 = v48;
    uint64_t v50 = v47;
    do
    {
      uint64_t v51 = v50;
      if (v50 == a2)
      {
        if (v48 == v47) {
          return result;
        }
        unint64_t v70 = (char *)&v84[v45] - (char *)v48 - 8;
        if (v70 >= 0x38 && (unint64_t)((char *)v49 - (char *)v48) >= 0x20)
        {
          uint64_t v74 = 0;
          uint64_t v75 = (v70 >> 3) + 1;
          uint64_t v76 = v75 & 0x3FFFFFFFFFFFFFFCLL;
          long long v71 = &v5[v76];
          unint64_t v72 = &v48[v76];
          uint64_t v77 = v75 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            uint64_t v78 = &v5[v74];
            __n128 result = *(__n128 *)&v48[v74];
            long long v79 = *(_OWORD *)&v48[v74 + 2];
            *(__n128 *)uint64_t v78 = result;
            *((_OWORD *)v78 + 1) = v79;
            v74 += 4;
            v77 -= 4;
          }
          while (v77);
          if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL)) {
            return result;
          }
        }
        else
        {
          long long v71 = v5;
          unint64_t v72 = v48;
        }
        do
        {
          unint64_t v73 = *v72++;
          *v71++ = v73;
        }
        while (v72 != v47);
        return result;
      }
      uint64_t v52 = *(void *)(*(void *)a3 + 176);
      unint64_t v53 = 0x823EE08FB823EE09 * ((*(void *)(*(void *)a3 + 184) - v52) >> 3);
      if (v53 <= *v50 || v53 <= *v48) {
        sub_66748();
      }
      unint64_t v54 = v5;
      uint64_t v55 = v52 + 456 * *v48;
      int v56 = sub_9854B0(v52 + 456 * *v50);
      int v57 = sub_9854B0(v55);
      if (v56 <= v57) {
        int v58 = v48;
      }
      else {
        int v58 = v51;
      }
      uint64_t v50 = &v51[v56 > v57];
      v48 += v56 <= v57;
      unint64_t *v54 = *v58;
      unint64_t v5 = v54 + 1;
      ++v49;
    }
    while (v48 != v47);
    if (v50 != a2)
    {
      uint64_t v59 = -8;
      if (v56 <= v57) {
        uint64_t v59 = 0;
      }
      unint64_t v60 = (char *)a2 - (char *)v51 + v59 - 8;
      if (v60 < 0x68) {
        goto LABEL_108;
      }
      if ((unint64_t)((char *)v49 - (char *)&v51[v56 > v57]) < 0x20) {
        goto LABEL_108;
      }
      uint64_t v61 = 0;
      uint64_t v62 = (v60 >> 3) + 1;
      uint64_t v63 = v62 & 0x3FFFFFFFFFFFFFFCLL;
      uint64_t v64 = &v5[v63];
      uint64_t v50 = (unint64_t *)((char *)v50 + v63 * 8);
      uint64_t v65 = &v51[v56 > v57];
      uint64_t v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        char v67 = &v5[v61];
        __n128 result = *(__n128 *)&v65[v61];
        long long v68 = *(_OWORD *)&v65[v61 + 2];
        *(__n128 *)char v67 = result;
        *((_OWORD *)v67 + 1) = v68;
        v61 += 4;
        v66 -= 4;
      }
      while (v66);
      unint64_t v5 = v64;
      if (v62 != (v62 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_108:
        do
        {
          unint64_t v69 = *v50++;
          *v5++ = v69;
        }
        while (v50 != a2);
      }
    }
  }
  return result;
}

void sub_988A3C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_58CC(a1);
  }
  _Unwind_Resume(a1);
}

__n128 sub_988A4C(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, unint64_t *a7, uint64_t a8)
{
  uint64_t v131 = a6;
  if (!a6) {
    return result;
  }
  while (1)
  {
    std::string __dst = a2;
    if (v131 <= a8 || a5 <= a8) {
      break;
    }
    if (!a5) {
      return result;
    }
    unint64_t v12 = 0;
    uint64_t v13 = -a5;
    while (1)
    {
      uint64_t v14 = *(void *)(*a4 + 176);
      unint64_t v15 = 0x823EE08FB823EE09 * ((*(void *)(*a4 + 184) - v14) >> 3);
      if (v15 <= *a2) {
        goto LABEL_127;
      }
      long long v16 = a1;
      unint64_t v17 = a1[v12 / 8];
      if (v15 <= v17) {
        goto LABEL_127;
      }
      uint64_t v18 = v14 + 456 * v17;
      int v19 = sub_9854B0(v14 + 456 * *a2);
      if (v19 > (int)sub_9854B0(v18)) {
        break;
      }
      v12 += 8;
      BOOL v21 = __CFADD__(v13++, 1);
      a2 = __dst;
      if (v21) {
        return result;
      }
    }
    uint64_t v22 = -v13;
    uint64_t v23 = v131;
    unint64_t v24 = __dst;
    uint64_t v129 = a3;
    uint64_t v132 = a4;
    if (-v13 >= v131)
    {
      if (v13 == -1)
      {
        unint64_t v103 = a1[v12 / 8];
        a1[v12 / 8] = *__dst;
        *std::string __dst = v103;
        return result;
      }
      if (v13 > 0) {
        uint64_t v22 = 1 - v13;
      }
      uint64_t v35 = v22 >> 1;
      unsigned int v43 = a3;
      unint64_t v28 = &a1[(v22 >> 1) + v12 / 8];
      int v27 = __dst;
      if (__dst != v43)
      {
        uint64_t v128 = v22 >> 1;
        uint64_t v44 = *v132;
        unint64_t v45 = v129 - __dst;
        int v27 = __dst;
        do
        {
          uint64_t v46 = &v27[v45 >> 1];
          uint64_t v47 = *(void *)(v44 + 176);
          unint64_t v48 = 0x823EE08FB823EE09 * ((*(void *)(v44 + 184) - v47) >> 3);
          if (v48 <= *v46 || v48 <= *v28) {
            sub_66748();
          }
          uint64_t v49 = v47 + 456 * *v28;
          int v50 = sub_9854B0(v47 + 456 * *v46);
          int v51 = sub_9854B0(v49);
          if (v50 <= v51) {
            v45 >>= 1;
          }
          else {
            v45 += ~(v45 >> 1);
          }
          if (v50 > v51) {
            int v27 = v46 + 1;
          }
        }
        while (v45);
        uint64_t v35 = v128;
        long long v16 = a1;
        unint64_t v24 = __dst;
        uint64_t v23 = v131;
      }
      uint64_t v26 = v27 - v24;
      if (v28 == v24)
      {
LABEL_49:
        int v42 = v27;
        goto LABEL_66;
      }
    }
    else
    {
      if (v131 >= 0) {
        uint64_t v25 = v131;
      }
      else {
        uint64_t v25 = v131 + 1;
      }
      uint64_t v26 = v25 >> 1;
      int v27 = &__dst[v25 >> 1];
      unint64_t v28 = __dst;
      if ((char *)__dst - (char *)a1 != v12)
      {
        unint64_t v29 = (uint64_t)((char *)__dst - (char *)a1 - v12) >> 3;
        unint64_t v28 = &a1[v12 / 8];
        do
        {
          uint64_t v30 = *(void *)(*v132 + 176);
          unint64_t v31 = 0x823EE08FB823EE09 * ((*(void *)(*v132 + 184) - v30) >> 3);
          if (v31 <= *v27) {
            goto LABEL_127;
          }
          uint64_t v32 = &v28[v29 >> 1];
          if (v31 <= *v32) {
            goto LABEL_127;
          }
          uint64_t v33 = v30 + 456 * *v32;
          int v34 = sub_9854B0(v30 + 456 * *v27);
          if (v34 > (int)sub_9854B0(v33))
          {
            v29 >>= 1;
          }
          else
          {
            unint64_t v28 = v32 + 1;
            v29 += ~(v29 >> 1);
          }
        }
        while (v29);
        long long v16 = a1;
        unint64_t v24 = __dst;
        uint64_t v23 = v131;
      }
      uint64_t v35 = (uint64_t)((char *)v28 - (char *)v16 - v12) >> 3;
      if (v28 == v24) {
        goto LABEL_49;
      }
    }
    uint64_t v36 = (char *)v27 - (char *)v24;
    if (v27 == v24)
    {
      int v42 = v28;
    }
    else
    {
      unsigned int v37 = v28 + 1;
      if (v28 + 1 == v24)
      {
        uint64_t v52 = v35;
        unint64_t v53 = *v28;
        memmove(v28, v24, (char *)v27 - (char *)v24);
        int v42 = (unint64_t *)((char *)v28 + v36);
        *(unint64_t *)((char *)v28 + v36) = v53;
        uint64_t v35 = v52;
      }
      else
      {
        int v38 = v24 + 1;
        if (v24 + 1 == v27)
        {
          uint64_t v54 = v35;
          unint64_t v55 = *(v27 - 1);
          int v42 = v28 + 1;
          if (v27 - 1 != v28)
          {
            memmove(v28 + 1, v28, (char *)(v27 - 1) - (char *)v28);
            int v42 = v28 + 1;
          }
          unint64_t *v28 = v55;
          uint64_t v23 = v131;
          uint64_t v35 = v54;
          goto LABEL_66;
        }
        uint64_t v39 = v24 - v28;
        if (v39 == v36 >> 3)
        {
          do
          {
            unint64_t v40 = *(v37 - 1);
            *(v37 - 1) = *(v38 - 1);
            *(v38 - 1) = v40;
            if (v37 == __dst) {
              break;
            }
            ++v37;
            BOOL v41 = v38++ == v27;
          }
          while (!v41);
          int v42 = __dst;
        }
        else
        {
          uint64_t v56 = v36 >> 3;
          uint64_t v57 = v24 - v28;
          do
          {
            uint64_t v58 = v57;
            uint64_t v57 = v56;
            uint64_t v56 = v58 % v56;
          }
          while (v56);
          if (v57)
          {
            uint64_t v59 = &v28[v57];
            do
            {
              unint64_t v61 = *--v59;
              unint64_t v60 = v61;
              uint64_t v62 = &v59[v39];
              uint64_t v63 = v59;
              do
              {
                uint64_t v64 = v62;
                *uint64_t v63 = *v62;
                uint64_t v65 = v27 - v62;
                BOOL v66 = __OFSUB__(v39, v65);
                uint64_t v68 = v39 - v65;
                char v67 = (v68 < 0) ^ v66;
                uint64_t v62 = &v28[v68];
                if (v67) {
                  uint64_t v62 = &v64[v39];
                }
                uint64_t v63 = v64;
              }
              while (v62 != v59);
              unint64_t *v64 = v60;
            }
            while (v59 != v28);
          }
          int v42 = &v28[v36 >> 3];
        }
      }
      uint64_t v23 = v131;
    }
LABEL_66:
    a5 = -(v35 + v13);
    uint64_t v69 = v23 - v26;
    uint64_t v70 = v23 - (v35 + v26) - v13;
    uint64_t v71 = v35;
    if (v35 + v26 >= v70)
    {
      uint64_t v74 = v42;
      uint64_t v75 = v27;
      a4 = v132;
      sub_988A4C(v42, v75, v129, v132, a5, v23 - v26, a7, a8);
      a2 = v28;
      a5 = v71;
      a3 = v74;
      uint64_t v131 = v26;
      a1 = (unint64_t *)((char *)a1 + v12);
      if (!v26) {
        return result;
      }
    }
    else
    {
      uint64_t v72 = v26;
      unint64_t v73 = v42;
      sub_988A4C(&v16[v12 / 8], v28, v42, v132, v35, v72, a7, a8);
      a2 = v27;
      a4 = v132;
      a3 = v129;
      uint64_t v131 = v69;
      a1 = v73;
      if (!v69) {
        return result;
      }
    }
  }
  if (a5 <= v131)
  {
    if (a1 != a2)
    {
      unint64_t v86 = (char *)a2 - (char *)a1 - 8;
      unsigned int v87 = a7;
      unsigned int v88 = a1;
      if (v86 < 0x18) {
        goto LABEL_131;
      }
      unsigned int v87 = a7;
      unsigned int v88 = a1;
      if ((unint64_t)((char *)a7 - (char *)a1) < 0x20) {
        goto LABEL_131;
      }
      uint64_t v89 = (v86 >> 3) + 1;
      uint64_t v90 = v89 & 0x3FFFFFFFFFFFFFFCLL;
      unsigned int v87 = &a7[v90];
      unsigned int v88 = &a1[v90];
      unsigned int v91 = (__n128 *)(a1 + 2);
      unsigned int v92 = (__n128 *)(a7 + 2);
      uint64_t v93 = v89 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        __n128 result = v91[-1];
        __n128 v94 = *v91;
        v92[-1] = result;
        *unsigned int v92 = v94;
        v91 += 2;
        v92 += 2;
        v93 -= 4;
      }
      while (v93);
      if (v89 != (v89 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_131:
        do
        {
          unint64_t v95 = *v88++;
          *v87++ = v95;
        }
        while (v88 != a2);
      }
      if (v87 != a7)
      {
        while (a2 != a3)
        {
          uint64_t v96 = *(void *)(*a4 + 176);
          unint64_t v97 = 0x823EE08FB823EE09 * ((*(void *)(*a4 + 184) - v96) >> 3);
          if (v97 <= *a2 || v97 <= *a7) {
LABEL_127:
          }
            sub_66748();
          int v98 = a2;
          uint64_t v99 = v96 + 456 * *a7;
          int v100 = sub_9854B0(v96 + 456 * *a2);
          int v101 = sub_9854B0(v99);
          if (v100 <= v101) {
            uint64_t v102 = a7;
          }
          else {
            uint64_t v102 = v98;
          }
          a2 = &v98[v100 > v101];
          a7 += v100 <= v101;
          *a1++ = *v102;
          if (a7 == v87) {
            return result;
          }
        }
        memmove(a1, a7, (char *)v87 - (char *)a7);
      }
    }
    return result;
  }
  int64_t v76 = (char *)a3 - (char *)a2;
  if (a3 == a2) {
    return result;
  }
  unint64_t v77 = v76 - 8;
  if ((unint64_t)(v76 - 8) < 0x18)
  {
    uint64_t v78 = (char *)a7;
    long long v79 = a2;
    do
    {
LABEL_100:
      uint64_t v104 = *v79++;
      *(void *)uint64_t v78 = v104;
      v78 += 8;
    }
    while (v79 != a3);
    goto LABEL_101;
  }
  uint64_t v78 = (char *)a7;
  long long v79 = a2;
  if ((unint64_t)((char *)a7 - (char *)a2) < 0x20) {
    goto LABEL_100;
  }
  uint64_t v80 = (v77 >> 3) + 1;
  uint64_t v81 = v80 & 0x3FFFFFFFFFFFFFFCLL;
  uint64_t v78 = (char *)&a7[v81];
  long long v79 = &a2[v81];
  long long v82 = (__n128 *)(a2 + 2);
  long long v83 = (__n128 *)(a7 + 2);
  uint64_t v84 = v80 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    __n128 result = v82[-1];
    __n128 v85 = *v82;
    v83[-1] = result;
    *long long v83 = v85;
    v82 += 2;
    v83 += 2;
    v84 -= 4;
  }
  while (v84);
  if (v80 != (v80 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_100;
  }
LABEL_101:
  if (v78 != (char *)a7)
  {
    uint64_t v105 = a3;
    while (a2 != a1)
    {
      unint64_t v106 = *((void *)v78 - 1);
      int v107 = a4;
      uint64_t v108 = *(void *)(*a4 + 176);
      unint64_t v109 = 0x823EE08FB823EE09 * ((*(void *)(*a4 + 184) - v108) >> 3);
      if (v109 <= v106) {
        goto LABEL_127;
      }
      size_t v110 = a7;
      char v112 = a2 - 1;
      unint64_t v111 = *(a2 - 1);
      if (v109 <= v111) {
        goto LABEL_127;
      }
      long long v113 = a2;
      uint64_t v114 = v108 + 456 * v111;
      int v115 = sub_9854B0(v108 + 456 * v106);
      int v116 = sub_9854B0(v114);
      if (v115 <= v116) {
        char v117 = v78;
      }
      else {
        char v117 = (char *)v113;
      }
      if (v115 <= v116) {
        a2 = v113;
      }
      else {
        a2 = v112;
      }
      if (v115 <= v116) {
        v78 -= 8;
      }
      *--a3 = *((void *)v117 - 1);
      --v105;
      a7 = v110;
      BOOL v41 = v78 == (char *)v110;
      a4 = v107;
      if (v41) {
        return result;
      }
    }
    unint64_t v118 = v78 - (char *)a7 - 8;
    if (v118 < 0x58 || (unint64_t)(v78 - (char *)v105) < 0x20)
    {
      uint64_t v119 = v78;
      char v120 = a3;
      goto LABEL_120;
    }
    uint64_t v123 = 0;
    uint64_t v124 = (v118 >> 3) + 1;
    uint64_t v125 = 8 * (v124 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v119 = &v78[-v125];
    char v120 = &a3[v125 / 0xFFFFFFFFFFFFFFF8];
    uint64_t v126 = v124 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      __n128 result = *(__n128 *)&v78[v123 * 8 - 16];
      int v127 = &a3[v123];
      *((_OWORD *)v127 - 2) = *(_OWORD *)&v78[v123 * 8 - 32];
      *((__n128 *)v127 - 1) = result;
      v123 -= 4;
      v126 -= 4;
    }
    while (v126);
    if (v124 != (v124 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_120:
      int v121 = v120 - 1;
      do
      {
        unint64_t v122 = *((void *)v119 - 1);
        v119 -= 8;
        *v121-- = v122;
      }
      while (v119 != (char *)a7);
    }
  }
  return result;
}

__n128 sub_989290(unint64_t *a1, unint64_t *a2, uint64_t *a3, unint64_t a4, unint64_t *a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    unint64_t v8 = a1;
    if (a4 == 2)
    {
      unint64_t v9 = *(a2 - 1);
      uint64_t v10 = *(void *)(*a3 + 176);
      unint64_t v11 = 0x823EE08FB823EE09 * ((*(void *)(*a3 + 184) - v10) >> 3);
      if (v11 > v9)
      {
        unint64_t v12 = *a1;
        if (v11 > *a1)
        {
          if (*(unsigned __int8 *)(v10 + 456 * v9 + 449) > *(unsigned __int8 *)(v10 + 456 * v12 + 449))
          {
            *a1 = v9;
            *(a2 - 1) = v12;
          }
          return result;
        }
      }
      goto LABEL_56;
    }
    if ((uint64_t)a4 <= 128)
    {
      if (a1 == a2) {
        return result;
      }
      uint64_t v14 = a1 + 1;
      if (a1 + 1 == a2) {
        return result;
      }
      uint64_t v15 = 0;
      uint64_t v16 = *(void *)(*a3 + 176);
      unint64_t v17 = 0x823EE08FB823EE09 * ((*(void *)(*a3 + 184) - v16) >> 3);
      uint64_t v18 = a1;
      while (1)
      {
        unint64_t v20 = v14;
        unint64_t v21 = *v14;
        if (v17 <= v21) {
          break;
        }
        unint64_t v22 = *v18;
        if (v17 <= v22) {
          break;
        }
        unsigned int v23 = *(unsigned __int8 *)(v16 + 456 * v21 + 449);
        if (v23 > *(unsigned __int8 *)(v16 + 456 * v22 + 449))
        {
          uint64_t v24 = v15;
          do
          {
            *(unint64_t *)((char *)a1 + v24 + 8) = v22;
            if (!v24)
            {
              int v19 = a1;
              goto LABEL_12;
            }
            unint64_t v22 = *(unint64_t *)((char *)a1 + v24 - 8);
            if (v17 <= v22) {
              goto LABEL_56;
            }
            v24 -= 8;
          }
          while (v23 > *(unsigned __int8 *)(v16 + 456 * v22 + 449));
          int v19 = (unint64_t *)((char *)a1 + v24 + 8);
LABEL_12:
          unint64_t *v19 = v21;
        }
        uint64_t v14 = v20 + 1;
        v15 += 8;
        uint64_t v18 = v20;
        if (v20 + 1 == a2) {
          return result;
        }
      }
LABEL_56:
      sub_66748();
    }
    unint64_t v27 = a4 >> 1;
    unint64_t v28 = &a1[a4 >> 1];
    unint64_t v29 = a4 >> 1;
    if ((uint64_t)a4 <= a6)
    {
      sub_9896BC(a1, v28, a3, v29, a5);
      unint64_t v31 = &a5[v27];
      result.n128_u64[0] = sub_9896BC(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v31).n128_u64[0];
      uint64_t v32 = &a5[a4];
      uint64_t v33 = *a3;
      int v34 = v31;
      uint64_t v35 = a5;
      uint64_t v36 = v8;
      do
      {
        if (v34 == v32)
        {
          if (v35 == v31) {
            return result;
          }
          unint64_t v56 = (char *)&a5[v27] - (char *)v35 - 8;
          if (v56 >= 0x38 && (unint64_t)((char *)v8 - (char *)v35) >= 0x20)
          {
            uint64_t v60 = 0;
            uint64_t v61 = (v56 >> 3) + 1;
            uint64_t v62 = v61 & 0x3FFFFFFFFFFFFFFCLL;
            uint64_t v57 = &v35[v62];
            uint64_t v58 = &v36[v62];
            uint64_t v63 = v61 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              uint64_t v64 = &v36[v60];
              __n128 result = *(__n128 *)&v35[v60];
              long long v65 = *(_OWORD *)&v35[v60 + 2];
              *(__n128 *)uint64_t v64 = result;
              *((_OWORD *)v64 + 1) = v65;
              v60 += 4;
              v63 -= 4;
            }
            while (v63);
            if (v61 == (v61 & 0x3FFFFFFFFFFFFFFCLL)) {
              return result;
            }
          }
          else
          {
            uint64_t v57 = v35;
            uint64_t v58 = v36;
          }
          do
          {
            unint64_t v59 = *v57++;
            *v58++ = v59;
          }
          while (v57 != v31);
          return result;
        }
        unsigned int v37 = v34;
        unint64_t v38 = *v34;
        uint64_t v39 = *(void *)(v33 + 176);
        unint64_t v40 = 0x823EE08FB823EE09 * ((*(void *)(v33 + 184) - v39) >> 3);
        if (v40 <= v38) {
          goto LABEL_56;
        }
        unint64_t v41 = *v35;
        if (v40 <= *v35) {
          goto LABEL_56;
        }
        unsigned int v42 = *(unsigned __int8 *)(v39 + 456 * v38 + 449);
        unsigned int v43 = *(unsigned __int8 *)(v39 + 456 * v41 + 449);
        if (v42 > v43) {
          unint64_t v41 = v38;
        }
        v35 += v42 <= v43;
        int v34 = &v37[v42 > v43];
        *v36++ = v41;
        ++v8;
      }
      while (v35 != v31);
      if (v34 != v32)
      {
        uint64_t v44 = -8;
        if (v42 <= v43) {
          uint64_t v44 = 0;
        }
        unint64_t v45 = (char *)&a5[a4] - (char *)v37 + v44 - 8;
        if (v45 < 0x78 || (unint64_t)((char *)v8 - (char *)&v37[v42 > v43]) < 0x20) {
          goto LABEL_59;
        }
        uint64_t v46 = 0;
        uint64_t v47 = (v45 >> 3) + 1;
        uint64_t v48 = v47 & 0x3FFFFFFFFFFFFFFCLL;
        int v34 = (unint64_t *)((char *)v34 + v48 * 8);
        uint64_t v49 = &v36[v48];
        char v50 = v42 > v43 ? 1 : 2;
        int v51 = &v37[v50 & 1];
        uint64_t v52 = v47 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          unint64_t v53 = &v36[v46];
          __n128 result = *(__n128 *)&v51[v46];
          long long v54 = *(_OWORD *)&v51[v46 + 2];
          *(__n128 *)unint64_t v53 = result;
          *((_OWORD *)v53 + 1) = v54;
          v46 += 4;
          v52 -= 4;
        }
        while (v52);
        uint64_t v36 = v49;
        if (v47 != (v47 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_59:
          do
          {
            unint64_t v55 = *v34++;
            *v36++ = v55;
          }
          while (v34 != v32);
        }
      }
    }
    else
    {
      sub_989290(a1, v28, a3, v29, a5, a6);
      sub_989290(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5, a6);
      result.n128_u64[0] = sub_989AAC(v8, &v8[a4 >> 1], a2, a3, a4 >> 1, a4 - (a4 >> 1), a5, a6).n128_u64[0];
    }
  }
  return result;
}

__n128 sub_9896BC(unint64_t *a1, unint64_t *a2, uint64_t *a3, unint64_t a4, unint64_t *a5)
{
  if (a4)
  {
    unint64_t v5 = a5;
    long long v7 = a1;
    if (a4 == 1)
    {
LABEL_10:
      *unint64_t v5 = *v7;
      return result;
    }
    if (a4 == 2)
    {
      unint64_t v10 = *(a2 - 1);
      uint64_t v11 = *(void *)(*a3 + 176);
      unint64_t v12 = 0x823EE08FB823EE09 * ((*(void *)(*a3 + 184) - v11) >> 3);
      if (v12 > v10 && v12 > *a1)
      {
        unsigned int v13 = *(unsigned __int8 *)(v11 + 456 * v10 + 449);
        unsigned int v14 = *(unsigned __int8 *)(v11 + 456 * *a1 + 449);
        if (v13 <= v14) {
          unint64_t v10 = *a1;
        }
        *a5 = v10;
        unint64_t v5 = a5 + 1;
        if (v13 <= v14) {
          long long v7 = a2 - 1;
        }
        goto LABEL_10;
      }
LABEL_57:
      sub_66748();
    }
    if ((uint64_t)a4 <= 8)
    {
      if (a1 == a2) {
        return result;
      }
      uint64_t v15 = *a3;
      unint64_t v17 = *v7;
      uint64_t v16 = v7 + 1;
      *a5 = v17;
      if (v16 == a2) {
        return result;
      }
      uint64_t v18 = 0;
      uint64_t v19 = *(void *)(v15 + 176);
      unint64_t v20 = 0x823EE08FB823EE09 * ((*(void *)(v15 + 184) - v19) >> 3);
      unint64_t v21 = a5;
      while (1)
      {
        unint64_t v22 = *v16;
        if (v20 <= *v16) {
          goto LABEL_57;
        }
        unsigned int v23 = v21 + 1;
        unint64_t v24 = *v21;
        if (v20 <= *v21) {
          goto LABEL_57;
        }
        if (*(unsigned __int8 *)(v19 + 456 * v22 + 449) <= *(unsigned __int8 *)(v19 + 456 * v24 + 449))
        {
          unint64_t *v23 = v22;
          ++v16;
          v18 += 8;
          ++v21;
          if (v16 == a2) {
            return result;
          }
        }
        else
        {
          v21[1] = v24;
          uint64_t v25 = a5;
          if (v21 != a5)
          {
            uint64_t v26 = v18;
            while (1)
            {
              if (v20 <= *v16) {
                goto LABEL_57;
              }
              unint64_t v27 = *(unint64_t *)((char *)a5 + v26 - 8);
              if (v20 <= v27) {
                goto LABEL_57;
              }
              if (*(unsigned __int8 *)(v19 + 456 * *v16 + 449) <= *(unsigned __int8 *)(v19 + 456 * v27 + 449)) {
                break;
              }
              *(unint64_t *)((char *)a5 + v26) = v27;
              v26 -= 8;
              if (!v26)
              {
                uint64_t v25 = a5;
                goto LABEL_28;
              }
            }
            uint64_t v25 = (unint64_t *)((char *)a5 + v26);
          }
LABEL_28:
          unint64_t v28 = *v16++;
          *uint64_t v25 = v28;
          v18 += 8;
          unint64_t v21 = v23;
          if (v16 == a2) {
            return result;
          }
        }
      }
    }
    unint64_t v29 = a4 >> 1;
    uint64_t v30 = a4 >> 1;
    unint64_t v31 = &a1[v30];
    sub_989290(a1, &a1[v30], a3, a4 >> 1, a5, a4 >> 1);
    sub_989290(&v7[v30], a2, a3, a4 - v29, &v5[v30], a4 - v29);
    uint64_t v33 = *a3;
    int v34 = (char *)v5;
    uint64_t v35 = v7;
    uint64_t v36 = &v7[v30];
    do
    {
      if (v36 == a2)
      {
        if (v35 == v31) {
          return result;
        }
        unint64_t v56 = (char *)&v7[v29] - (char *)v35 - 8;
        if (v56 >= 0x38 && (unint64_t)(v34 - (char *)v35) >= 0x20)
        {
          uint64_t v60 = 0;
          uint64_t v61 = (v56 >> 3) + 1;
          uint64_t v62 = v61 & 0x3FFFFFFFFFFFFFFCLL;
          uint64_t v57 = &v5[v62];
          uint64_t v58 = &v35[v62];
          uint64_t v63 = v61 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            uint64_t v64 = &v5[v60];
            __n128 result = *(__n128 *)&v35[v60];
            long long v65 = *(_OWORD *)&v35[v60 + 2];
            *(__n128 *)uint64_t v64 = result;
            *((_OWORD *)v64 + 1) = v65;
            v60 += 4;
            v63 -= 4;
          }
          while (v63);
          if (v61 == (v61 & 0x3FFFFFFFFFFFFFFCLL)) {
            return result;
          }
        }
        else
        {
          uint64_t v57 = v5;
          uint64_t v58 = v35;
        }
        do
        {
          unint64_t v59 = *v58++;
          *v57++ = v59;
        }
        while (v58 != v31);
        return result;
      }
      unsigned int v37 = v36;
      unint64_t v38 = *v36;
      uint64_t v39 = *(void *)(v33 + 176);
      unint64_t v40 = 0x823EE08FB823EE09 * ((*(void *)(v33 + 184) - v39) >> 3);
      if (v40 <= v38) {
        goto LABEL_57;
      }
      unint64_t v41 = *v35;
      if (v40 <= *v35) {
        goto LABEL_57;
      }
      unsigned int v42 = *(unsigned __int8 *)(v39 + 456 * v38 + 449);
      unsigned int v43 = *(unsigned __int8 *)(v39 + 456 * v41 + 449);
      if (v42 > v43) {
        unint64_t v41 = v38;
      }
      uint64_t v36 = &v37[v42 > v43];
      v35 += v42 <= v43;
      *v5++ = v41;
      v34 += 8;
    }
    while (v35 != v31);
    if (v36 != a2)
    {
      uint64_t v44 = -8;
      if (v42 <= v43) {
        uint64_t v44 = 0;
      }
      unint64_t v45 = (char *)a2 - (char *)v37 + v44 - 8;
      if (v45 < 0x68) {
        goto LABEL_60;
      }
      if ((unint64_t)(v34 - (char *)&v37[v42 > v43]) < 0x20) {
        goto LABEL_60;
      }
      uint64_t v46 = 0;
      uint64_t v47 = (v45 >> 3) + 1;
      BOOL v48 = v42 > v43;
      uint64_t v49 = v47 & 0x3FFFFFFFFFFFFFFCLL;
      char v50 = &v5[v49];
      uint64_t v36 = (unint64_t *)((char *)v36 + v49 * 8);
      int v51 = &v37[v48];
      uint64_t v52 = v47 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        unint64_t v53 = &v5[v46];
        __n128 result = *(__n128 *)&v51[v46];
        long long v54 = *(_OWORD *)&v51[v46 + 2];
        *(__n128 *)unint64_t v53 = result;
        *((_OWORD *)v53 + 1) = v54;
        v46 += 4;
        v52 -= 4;
      }
      while (v52);
      unint64_t v5 = v50;
      if (v47 != (v47 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_60:
        do
        {
          unint64_t v55 = *v36++;
          *v5++ = v55;
        }
        while (v36 != a2);
      }
    }
  }
  return result;
}

__n128 sub_989AAC(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, unint64_t *a7, uint64_t a8)
{
  if (!a6) {
    return result;
  }
  while (a6 > a8 && a5 > a8)
  {
    if (!a5) {
      return result;
    }
    unint64_t v11 = *a2;
    uint64_t v12 = *(void *)(*a4 + 176);
    unint64_t v13 = 0x823EE08FB823EE09 * ((*(void *)(*a4 + 184) - v12) >> 3);
    if (v13 <= *a2) {
      goto LABEL_125;
    }
    unint64_t v14 = 0;
    uint64_t v15 = -a5;
    while (1)
    {
      unint64_t v16 = a1[v14 / 8];
      if (v13 <= v16) {
        goto LABEL_125;
      }
      if (*(unsigned __int8 *)(v12 + 456 * v11 + 449) > *(unsigned __int8 *)(v12 + 456 * v16 + 449)) {
        break;
      }
      v14 += 8;
      if (__CFADD__(v15++, 1)) {
        return result;
      }
    }
    uint64_t v18 = &a1[v14 / 8];
    if (-v15 >= a6)
    {
      if (v15 == -1)
      {
        a1[v14 / 8] = v11;
        *a2 = v16;
        return result;
      }
      if (v15 <= 0) {
        uint64_t v44 = -v15;
      }
      else {
        uint64_t v44 = 1 - v15;
      }
      uint64_t v36 = v44 >> 1;
      unint64_t v22 = &a1[(v44 >> 1) + v14 / 8];
      unint64_t v21 = a2;
      if (a2 != a3)
      {
        unint64_t v45 = a3 - a2;
        if (v13 <= *v22) {
          sub_66748();
        }
        unint64_t v21 = a2;
        while (1)
        {
          unint64_t v46 = v45 >> 1;
          uint64_t v47 = &v21[v45 >> 1];
          if (v13 <= *v47) {
            break;
          }
          unsigned int v48 = *(unsigned __int8 *)(v12 + 456 * *v47 + 449);
          uint64_t v49 = v47 + 1;
          v45 += ~v46;
          if (v48 > *(unsigned __int8 *)(v12 + 456 * *v22 + 449)) {
            unint64_t v21 = v49;
          }
          else {
            unint64_t v45 = v46;
          }
          if (!v45) {
            goto LABEL_51;
          }
        }
LABEL_126:
        sub_66748();
      }
LABEL_51:
      uint64_t v20 = v21 - a2;
      if (v22 != a2)
      {
LABEL_31:
        unsigned int v37 = v22;
        uint64_t v38 = (char *)v21 - (char *)a2;
        if (v21 != a2)
        {
          uint64_t v39 = v22 + 1;
          if (v22 + 1 == a2)
          {
            unint64_t v120 = *v22;
            uint64_t v122 = v36;
            uint64_t v124 = a7;
            char v50 = a3;
            uint64_t v126 = a6;
            uint64_t v128 = a4;
            uint64_t v51 = a8;
            uint64_t v52 = v20;
            memmove(v22, a2, (char *)v21 - (char *)a2);
            uint64_t v20 = v52;
            uint64_t v18 = &a1[v14 / 8];
            a6 = v126;
            a8 = v51;
            uint64_t v36 = v122;
            a7 = v124;
            a4 = v128;
            a3 = v50;
            unsigned int v37 = (unint64_t *)((char *)v22 + v38);
            *(unint64_t *)((char *)v22 + v38) = v120;
          }
          else
          {
            unint64_t v40 = a2 + 1;
            if (a2 + 1 == v21)
            {
              unint64_t v53 = *(v21 - 1);
              unsigned int v37 = v22 + 1;
              if (v21 - 1 != v22)
              {
                uint64_t v125 = a7;
                long long v54 = a3;
                uint64_t v127 = a6;
                uint64_t v129 = a4;
                uint64_t v121 = v20;
                uint64_t v123 = v36;
                uint64_t v55 = a8;
                memmove(v22 + 1, v22, (char *)(v21 - 1) - (char *)v22);
                uint64_t v18 = &a1[v14 / 8];
                a6 = v127;
                a8 = v55;
                uint64_t v20 = v121;
                uint64_t v36 = v123;
                a4 = v129;
                a3 = v54;
                a7 = v125;
              }
              *unint64_t v22 = v53;
            }
            else
            {
              uint64_t v41 = a2 - v22;
              if (v41 == v38 >> 3)
              {
                do
                {
                  unint64_t v42 = *(v39 - 1);
                  *(v39 - 1) = *(v40 - 1);
                  *(v40 - 1) = v42;
                  if (v39 == a2) {
                    break;
                  }
                  ++v39;
                }
                while (v40++ != v21);
                unsigned int v37 = a2;
              }
              else
              {
                uint64_t v56 = v38 >> 3;
                uint64_t v57 = a2 - v22;
                do
                {
                  uint64_t v58 = v57;
                  uint64_t v57 = v56;
                  uint64_t v56 = v58 % v56;
                }
                while (v56);
                if (v57)
                {
                  unint64_t v59 = &v22[v57];
                  do
                  {
                    unint64_t v61 = *--v59;
                    unint64_t v60 = v61;
                    uint64_t v62 = &v59[v41];
                    uint64_t v63 = v59;
                    do
                    {
                      uint64_t v64 = v62;
                      *uint64_t v63 = *v62;
                      uint64_t v65 = v21 - v62;
                      BOOL v66 = __OFSUB__(v41, v65);
                      uint64_t v67 = v41 - v65;
                      char v101 = (v67 < 0) ^ v66;
                      uint64_t v62 = &v22[v67];
                      if (v101) {
                        uint64_t v62 = &v64[v41];
                      }
                      uint64_t v63 = v64;
                    }
                    while (v62 != v59);
                    unint64_t *v64 = v60;
                  }
                  while (v59 != v22);
                }
                unsigned int v37 = &v22[v38 >> 3];
              }
            }
          }
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (a6 >= 0) {
        uint64_t v19 = a6;
      }
      else {
        uint64_t v19 = a6 + 1;
      }
      uint64_t v20 = v19 >> 1;
      unint64_t v21 = &a2[v19 >> 1];
      unint64_t v22 = &a1[v14 / 8];
      uint64_t v23 = (char *)a2 - (char *)a1 - v14;
      if ((char *)a2 - (char *)a1 != v14)
      {
        if (v13 <= *v21) {
          goto LABEL_125;
        }
        uint64_t v24 = v23 >> 3;
        unint64_t v25 = (unint64_t)(v23 >> 3) >> 1;
        uint64_t v26 = &a1[v25];
        unint64_t v27 = v26[v14 / 8];
        if (v13 <= v27) {
          goto LABEL_125;
        }
        unsigned int v28 = *(unsigned __int8 *)(v12 + 456 * *v21 + 449);
        unsigned int v29 = *(unsigned __int8 *)(v12 + 456 * v27 + 449);
        uint64_t v30 = (uint64_t)&v26[v14 / 8 + 1];
        unint64_t v31 = v24 + ~v25;
        if (v28 <= v29) {
          unint64_t v22 = (unint64_t *)v30;
        }
        else {
          unint64_t v22 = &a1[v14 / 8];
        }
        if (v28 <= v29) {
          unint64_t v25 = v31;
        }
        if (v25)
        {
          while (1)
          {
            unint64_t v32 = v25 >> 1;
            uint64_t v33 = &v22[v25 >> 1];
            if (v13 <= *v33) {
              break;
            }
            unsigned int v34 = *(unsigned __int8 *)(v12 + 456 * *v33 + 449);
            uint64_t v35 = v33 + 1;
            v25 += ~v32;
            if (v28 > v34) {
              unint64_t v25 = v32;
            }
            else {
              unint64_t v22 = v35;
            }
            if (!v25) {
              goto LABEL_30;
            }
          }
LABEL_125:
          sub_66748();
        }
      }
LABEL_30:
      uint64_t v36 = (uint64_t)((char *)v22 - (char *)a1 - v14) >> 3;
      if (v22 != a2) {
        goto LABEL_31;
      }
    }
    unsigned int v37 = v21;
LABEL_67:
    a5 = -v36 - v15;
    uint64_t v68 = a6 - v20;
    if (v36 + v20 >= a6 - (v36 + v20) - v15)
    {
      a1 = v18;
      uint64_t v71 = a4;
      uint64_t v72 = a7;
      a5 = v36;
      uint64_t v73 = a8;
      uint64_t v68 = v20;
      sub_989AAC(v37, v21, a3);
      a3 = v37;
    }
    else
    {
      uint64_t v69 = &a1[v14 / 8];
      uint64_t v70 = a3;
      uint64_t v71 = a4;
      uint64_t v72 = a7;
      uint64_t v73 = a8;
      sub_989AAC(v69, v22, v37);
      a3 = v70;
      a1 = v37;
      unint64_t v22 = v21;
    }
    a6 = v68;
    a2 = v22;
    a7 = v72;
    a4 = v71;
    a8 = v73;
    if (!v68) {
      return result;
    }
  }
  if (a5 <= a6)
  {
    if (a1 != a2)
    {
      unint64_t v85 = (char *)a2 - (char *)a1 - 8;
      unint64_t v86 = a7;
      unsigned int v87 = a1;
      if (v85 < 0x18) {
        goto LABEL_131;
      }
      unint64_t v86 = a7;
      unsigned int v87 = a1;
      if ((unint64_t)((char *)a7 - (char *)a1) < 0x20) {
        goto LABEL_131;
      }
      uint64_t v88 = (v85 >> 3) + 1;
      uint64_t v89 = v88 & 0x3FFFFFFFFFFFFFFCLL;
      unint64_t v86 = &a7[v89];
      unsigned int v87 = &a1[v89];
      uint64_t v90 = (__n128 *)(a1 + 2);
      unsigned int v91 = (__n128 *)(a7 + 2);
      uint64_t v92 = v88 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        __n128 result = v90[-1];
        __n128 v93 = *v90;
        v91[-1] = result;
        *unsigned int v91 = v93;
        v90 += 2;
        v91 += 2;
        v92 -= 4;
      }
      while (v92);
      if (v88 != (v88 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_131:
        do
        {
          unint64_t v94 = *v87++;
          *v86++ = v94;
        }
        while (v87 != a2);
      }
      if (v86 != a7)
      {
        uint64_t v95 = *a4;
        while (a2 != a3)
        {
          unint64_t v96 = *a2;
          uint64_t v97 = *(void *)(v95 + 176);
          unint64_t v98 = 0x823EE08FB823EE09 * ((*(void *)(v95 + 184) - v97) >> 3);
          if (v98 <= *a2 || v98 <= *a7) {
            goto LABEL_126;
          }
          unsigned int v99 = *(unsigned __int8 *)(v97 + 456 * v96 + 449);
          unsigned int v100 = *(unsigned __int8 *)(v97 + 456 * *a7 + 449);
          char v101 = v99 > v100;
          BOOL v102 = v99 <= v100;
          if (v101) {
            unsigned int v103 = 1;
          }
          else {
            unsigned int v103 = 0;
          }
          if (!v101) {
            unint64_t v96 = *a7;
          }
          a2 += v103;
          a7 += v102;
          *a1++ = v96;
          if (a7 == v86) {
            return result;
          }
        }
        memmove(a1, a7, (char *)v86 - (char *)a7);
      }
    }
    return result;
  }
  int64_t v75 = (char *)a3 - (char *)a2;
  if (a3 == a2) {
    return result;
  }
  unint64_t v76 = v75 - 8;
  if ((unint64_t)(v75 - 8) < 0x18)
  {
    unint64_t v77 = (char *)a7;
    uint64_t v78 = a2;
    do
    {
LABEL_104:
      uint64_t v104 = *v78++;
      *(void *)unint64_t v77 = v104;
      v77 += 8;
    }
    while (v78 != a3);
    goto LABEL_105;
  }
  unint64_t v77 = (char *)a7;
  uint64_t v78 = a2;
  if ((unint64_t)((char *)a7 - (char *)a2) < 0x20) {
    goto LABEL_104;
  }
  uint64_t v79 = (v76 >> 3) + 1;
  uint64_t v80 = v79 & 0x3FFFFFFFFFFFFFFCLL;
  unint64_t v77 = (char *)&a7[v80];
  uint64_t v78 = &a2[v80];
  uint64_t v81 = (__n128 *)(a2 + 2);
  long long v82 = (__n128 *)(a7 + 2);
  uint64_t v83 = v79 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    __n128 result = v81[-1];
    __n128 v84 = *v81;
    v82[-1] = result;
    *long long v82 = v84;
    v81 += 2;
    v82 += 2;
    v83 -= 4;
  }
  while (v83);
  if (v79 != (v79 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_104;
  }
LABEL_105:
  if (v77 != (char *)a7)
  {
    uint64_t v105 = a3;
    while (a2 != a1)
    {
      unint64_t v106 = *((void *)v77 - 1);
      uint64_t v107 = *(void *)(*a4 + 176);
      unint64_t v108 = 0x823EE08FB823EE09 * ((*(void *)(*a4 + 184) - v107) >> 3);
      if (v108 <= v106 || (unint64_t v109 = *(a2 - 1), v108 <= v109)) {
        sub_66748();
      }
      if (*(unsigned __int8 *)(v107 + 456 * v106 + 449) <= *(unsigned __int8 *)(v107 + 456 * v109 + 449)) {
        v77 -= 8;
      }
      else {
        unint64_t v106 = *--a2;
      }
      *--a3 = v106;
      --v105;
      if (v77 == (char *)a7) {
        return result;
      }
    }
    unint64_t v110 = v77 - (char *)a7 - 8;
    if (v110 < 0x58 || (unint64_t)(v77 - (char *)v105) < 0x20)
    {
      unint64_t v111 = v77;
      char v112 = a3;
      goto LABEL_118;
    }
    uint64_t v115 = 0;
    uint64_t v116 = (v110 >> 3) + 1;
    uint64_t v117 = 8 * (v116 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v111 = &v77[-v117];
    char v112 = &a3[v117 / 0xFFFFFFFFFFFFFFF8];
    uint64_t v118 = v116 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      __n128 result = *(__n128 *)&v77[v115 * 8 - 16];
      uint64_t v119 = &a3[v115];
      *((_OWORD *)v119 - 2) = *(_OWORD *)&v77[v115 * 8 - 32];
      *((__n128 *)v119 - 1) = result;
      v115 -= 4;
      v118 -= 4;
    }
    while (v118);
    if (v116 != (v116 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_118:
      long long v113 = v112 - 1;
      do
      {
        unint64_t v114 = *((void *)v111 - 1);
        v111 -= 8;
        *v113-- = v114;
      }
      while (v111 != (char *)a7);
    }
  }
  return result;
}

double sub_98A260()
{
  byte_25DB197 = 1;
  word_25DB180 = 65;
  byte_25DB1AF = 1;
  word_25DB198 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25DB240 = 0u;
  *(_OWORD *)&qword_25DB250 = 0u;
  dword_25DB260 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25DB240, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25DB240, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25DB240, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25DB240, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25DB1C7 = 8;
  strcpy((char *)&qword_25DB1B0, "any_mode");
  byte_25DB1DF = 7;
  strcpy((char *)&dword_25DB1C8, "cycling");
  byte_25DB1F7 = 7;
  strcpy((char *)&dword_25DB1E0, "driving");
  byte_25DB20F = 7;
  strcpy((char *)&dword_25DB1F8, "walking");
  qword_25DB218 = 0;
  qword_25DB220 = 0;
  qword_25DB210 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25DB210 = (uint64_t)v0;
  qword_25DB218 = (uint64_t)(v0 + 9);
  qword_25DB220 = (uint64_t)(v0 + 9);
  qword_25DB228 = 0;
  qword_25DB230 = 0;
  unk_25DB238 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25DB230 = (uint64_t)(v1 + 9);
  unk_25DB238 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25DB228 = (uint64_t)v1;
  return result;
}

void sub_98A528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25DB250) {
    sub_20ACFD0((void **)qword_25DB250);
  }
  unsigned int v37 = (void *)xmmword_25DB240;
  *(void *)&xmmword_25DB240 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_98A5C8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  int v5 = (std::__shared_weak_count *)a2[1];
  uint64_t v13 = *a2;
  int v14 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_98FD2C(a3, (uint64_t)&v10);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v5;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    long long v7 = v11;
    *(_OWORD *)(a1 + 48) = v10;
    *(_OWORD *)(a1 + 64) = v7;
    *(_OWORD *)(a1 + 80) = v12;
    *(void *)(a1 + 96) = a3;
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    return a1;
  }
  else
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    long long v9 = v11;
    *(_OWORD *)(a1 + 48) = v10;
    *(_OWORD *)(a1 + 64) = v9;
    *(_OWORD *)(a1 + 80) = v12;
    *(void *)(a1 + 96) = a3;
    return a1;
  }
}

void sub_98A6DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_14A84((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_98A6F0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  long long v4 = *(_OWORD *)(a1 + 64);
  long long v9 = *(_OWORD *)(a1 + 48);
  *(void *)(a1 + 16) = a2 + 3;
  *(void *)(a1 + 24) = a3;
  *(void *)(a1 + 32) = a4;
  *(void *)(a1 + 40) = a2 + 36;
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 96);
  v8[0] = a2 + 3;
  v8[1] = v5;
  v8[2] = a3;
  v8[3] = a2 + 36;
  v8[4] = v6;
  long long v10 = v4;
  __n128 result = *(__n128 *)(a1 + 80);
  __n128 v11 = result;
  if (*a2 != a2[1]) {
    sub_98AA18(a1, *a2, (uint64_t)v8);
  }
  return result;
}

void sub_98A9D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
}

void sub_98A9F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
}

void sub_98AA04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
}

void sub_98AA18(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_98AC30(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 24);
  *(void *)(v1 - 24) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_98AC7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_9DC7CC(*(void *)(a1 + 32), a2, a3, &v21);
  if (!v21.n128_u64[0] || sub_9DDB58(v21.n128_i64[0])) {
    goto LABEL_22;
  }
  uint64_t v5 = sub_9E6230(a2);
  uint64_t v6 = *(void *)(a1 + 24);
  long long v7 = *(_DWORD **)(v6 + 1072);
  int v8 = *(_DWORD **)(v6 + 1080);
  long long v9 = v7;
  if (v7 != v8)
  {
    long long v9 = v7;
    while (*v9 != 2)
    {
      if (++v9 == v8)
      {
        long long v9 = v8;
        break;
      }
    }
  }
  if (v9 != v8)
  {
    sub_98B384(a1, &v21, 2, (uint64_t *)v5);
    uint64_t v10 = *(void *)(a1 + 24);
    long long v7 = *(_DWORD **)(v10 + 1072);
    int v8 = *(_DWORD **)(v10 + 1080);
  }
  __n128 v11 = v8;
  if (v7 == v8)
  {
LABEL_14:
    if (v11 == v8) {
      goto LABEL_18;
    }
  }
  else
  {
    while (*v7 != 1)
    {
      if (++v7 == v8)
      {
        __n128 v11 = v8;
        goto LABEL_14;
      }
    }
    if (v7 == v8) {
      goto LABEL_18;
    }
  }
  sub_98B384(a1, &v21, 1, (uint64_t *)v5);
LABEL_18:
  (*(void (**)(void *__return_ptr))(*(void *)v21.n128_u64[0] + 32))(v19);
  sub_4D90B4(v5 + 1696, (uint64_t)v19);
  *(unsigned char *)(v5 + 1856) = v20[0];
  sub_4D4B58((uint64_t)v19);
  (*(void (**)(void *__return_ptr))(*(void *)v21.n128_u64[0] + 24))(v19);
  sub_4D90B4(v5 + 1272, (uint64_t)v19);
  sub_4D90B4(v5 + 1432, (uint64_t)v20);
  *(unsigned char *)(v5 + 1592) = v20[160];
  sub_4D4B58((uint64_t)v20);
  sub_4D4B58((uint64_t)v19);
  (*(void (**)(void *__return_ptr))(*(void *)v21.n128_u64[0] + 40))(v19);
  sub_4D90B4(v5 + 1112, (uint64_t)v19);
  sub_4D4B58((uint64_t)v19);
  uint64_t v12 = sub_9E6230(a2);
  if (*(void *)(v12 + 2224) != *(void *)(v12 + 2232))
  {
    unint64_t v13 = v21.n128_u64[0];
    uint64_t v14 = sub_9E6230(a2);
    (*(void (**)(unint64_t, uint64_t))(*(void *)v13 + 80))(v13, v14 + 2224);
  }
  uint64_t v15 = sub_9E6230(a2);
  if (*(void *)(v15 + 3424) != *(void *)(v15 + 3432))
  {
    unint64_t v16 = v21.n128_u64[0];
    uint64_t v17 = sub_9E6230(a2);
    (*(void (**)(unint64_t, uint64_t))(*(void *)v16 + 88))(v16, v17 + 3424);
  }
LABEL_22:
  uint64_t v18 = (std::__shared_weak_count *)v21.n128_u64[1];
  if (v21.n128_u64[1])
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(v21.n128_u64[1] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_98AF74(_Unwind_Exception *a1)
{
  sub_14A84(v1 - 48);
  _Unwind_Resume(a1);
}

void sub_98AF88(_Unwind_Exception *a1)
{
  sub_14A84(v1 - 48);
  _Unwind_Resume(a1);
}

void sub_98AF9C(_Unwind_Exception *a1)
{
  sub_14A84(v1 - 48);
  _Unwind_Resume(a1);
}

void sub_98AFB0(_Unwind_Exception *a1)
{
  sub_14A84(v1 - 48);
  _Unwind_Resume(a1);
}

void sub_98AFC4(_Unwind_Exception *a1)
{
  sub_14A84(v1 - 48);
  _Unwind_Resume(a1);
}

void sub_98AFD8(uint64_t *a1, uint64_t a2)
{
  long long v4 = *(_DWORD **)(a2 + 8);
  uint64_t v5 = *(_DWORD **)(a2 + 16);
  if (v4 != v5)
  {
    while (*v4 != 2)
    {
      v4 += 1426;
      if (v4 == v5) {
        return;
      }
    }
  }
  if (v4 != v5)
  {
    sub_98B8CC((uint64_t)__p, (uint64_t)v4, a1[2]);
    v14.__r_.__value_.__r.__words[0] = (std::string::size_type)&dword_25DB358;
    uint64_t v6 = sub_31B300((uint64_t)__p, (uint64_t)&dword_25DB358, (uint64_t)&unk_20F06E0, (long long **)&v14);
    if (*((char *)v6 + 63) < 0)
    {
      if (v6[6])
      {
LABEL_8:
        strcpy((char *)v13, "Board_List_Line_{Mode}");
        HIBYTE(v13[2]) = 22;
        sub_98B234(a1, (uint64_t)v13, (uint64_t)__p, &v14);
        long long v7 = (void **)(a2 + 32);
        if (*(char *)(a2 + 55) < 0) {
          operator delete(*v7);
        }
        *(_OWORD *)long long v7 = *(_OWORD *)&v14.__r_.__value_.__l.__data_;
        *(void *)(a2 + 48) = *((void *)&v14.__r_.__value_.__l + 2);
        int v8 = (void **)v16;
        if (v16) {
          goto LABEL_19;
        }
        goto LABEL_16;
      }
    }
    else if (*((unsigned char *)v6 + 63))
    {
      goto LABEL_8;
    }
    long long v9 = (char *)operator new(0x28uLL);
    v13[0] = v9;
    *(_OWORD *)&v13[1] = xmmword_20B9280;
    strcpy(v9, "BlockTransfer_List_Headsign_{Mode}");
    sub_98B234(a1, (uint64_t)v13, (uint64_t)__p, &v14);
    uint64_t v10 = (void **)(a2 + 32);
    if (*(char *)(a2 + 55) < 0) {
      operator delete(*v10);
    }
    *(_OWORD *)uint64_t v10 = *(_OWORD *)&v14.__r_.__value_.__l.__data_;
    *(void *)(a2 + 48) = *((void *)&v14.__r_.__value_.__l + 2);
    *((unsigned char *)&v14.__r_.__value_.__s + 23) = 0;
    v14.__r_.__value_.__s.__data_[0] = 0;
    operator delete(v9);
    int v8 = (void **)v16;
    if (!v16)
    {
LABEL_16:
      __n128 v11 = __p[0];
      __p[0] = 0;
      if (v11) {
        operator delete(v11);
      }
      return;
    }
    while (1)
    {
LABEL_19:
      uint64_t v12 = (void **)*v8;
      if (*((char *)v8 + 63) < 0)
      {
        operator delete(v8[5]);
        if (*((char *)v8 + 39) < 0) {
LABEL_23:
        }
          operator delete(v8[2]);
      }
      else if (*((char *)v8 + 39) < 0)
      {
        goto LABEL_23;
      }
      operator delete(v8);
      int v8 = v12;
      if (!v12) {
        goto LABEL_16;
      }
    }
  }
}

void sub_98B1DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  operator delete(v15);
  sub_50828((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_98B1F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_50828((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_98B20C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_50828((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_98B220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_50828((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_98B234(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_4200(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v12 = *(void *)(a2 + 16);
  }
  sub_98E2D8((void *)a3, *(unsigned __int16 *)(a3 + 40), 0, 1, *a1, (uint64_t)__p);
  uint64_t v7 = a1[1];
  uint64_t v9 = *a1;
  uint64_t v10 = (std::__shared_weak_count *)v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  sub_658310((uint64_t)__p, a3, &v9, 0, a4);
  int v8 = v10;
  if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((SHIBYTE(v12) & 0x80000000) == 0) {
      return;
    }
LABEL_11:
    operator delete(__p[0]);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  if (SHIBYTE(v12) < 0) {
    goto LABEL_11;
  }
}

void sub_98B358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_98B384(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  int v5 = a3;
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 56))(*a2, a3);
  if (result)
  {
    (*(void (**)(void *__return_ptr))(*(void *)*a2 + 16))(v12);
    BOOL v8 = sub_45FB38(v12);
    if (!v8) {
      sub_98B570(v8, v5, 0, (uint64_t)v12, a4);
    }
    sub_4D4B58((uint64_t)v12);
    (*(void (**)(void *__return_ptr))(*(void *)*a2 + 16))(v12);
    BOOL v9 = sub_45FB38(v12);
    if (!v9) {
      sub_98B570(v9, v5, 1, (uint64_t)v12, a4);
    }
    sub_4D4B58((uint64_t)v12);
    (*(void (**)(void *__return_ptr))(*(void *)*a2 + 16))(v12);
    BOOL v10 = sub_45FB38(v12);
    if (!v10) {
      sub_98B570(v10, v5, 2, (uint64_t)v12, a4);
    }
    sub_4D4B58((uint64_t)v12);
    (*(void (**)(void *__return_ptr))(*(void *)*a2 + 16))(v12);
    BOOL v11 = sub_45FB38(v12);
    if (!v11) {
      sub_98B570(v11, v5, 3, (uint64_t)v12, a4);
    }
    return sub_4D4B58((uint64_t)v12);
  }
  return result;
}

void sub_98B55C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_98B570(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t *a5)
{
  if (a2 == 1)
  {
    switch(a3)
    {
      case 0:
        unint64_t v7 = a5[201];
        if (v7 >= a5[202])
        {
          a5[201] = sub_980BF4(a5 + 200, a4);
        }
        else
        {
          sub_4F58AC(a5[201], a4);
          a5[201] = v7 + 160;
          a5[201] = v7 + 160;
        }
        break;
      case 1:
        unint64_t v13 = a5[204];
        if (v13 >= a5[205])
        {
          a5[204] = sub_980BF4(a5 + 203, a4);
        }
        else
        {
          sub_4F58AC(a5[204], a4);
          a5[204] = v13 + 160;
          a5[204] = v13 + 160;
        }
        break;
      case 2:
        unint64_t v11 = a5[207];
        if (v11 >= a5[208])
        {
          a5[207] = sub_980BF4(a5 + 206, a4);
        }
        else
        {
          sub_4F58AC(a5[207], a4);
          a5[207] = v11 + 160;
          a5[207] = v11 + 160;
        }
        break;
      case 3:
        unint64_t v12 = a5[210];
        if (v12 >= a5[211])
        {
          a5[210] = sub_980BF4(a5 + 209, a4);
        }
        else
        {
          sub_4F58AC(a5[210], a4);
          a5[210] = v12 + 160;
          a5[210] = v12 + 160;
        }
        break;
      default:
        return;
    }
  }
  else if (a2 == 2)
  {
    switch(a3)
    {
      case 0:
        unint64_t v6 = a5[128];
        if (v6 >= a5[129])
        {
          a5[128] = sub_980BF4(a5 + 127, a4);
        }
        else
        {
          sub_4F58AC(a5[128], a4);
          a5[128] = v6 + 160;
          a5[128] = v6 + 160;
        }
        break;
      case 1:
        unint64_t v8 = a5[131];
        if (v8 >= a5[132])
        {
          a5[131] = sub_980BF4(a5 + 130, a4);
        }
        else
        {
          sub_4F58AC(a5[131], a4);
          a5[131] = v8 + 160;
          a5[131] = v8 + 160;
        }
        break;
      case 2:
        unint64_t v9 = a5[134];
        if (v9 >= a5[135])
        {
          a5[134] = sub_980BF4(a5 + 133, a4);
        }
        else
        {
          sub_4F58AC(a5[134], a4);
          a5[134] = v9 + 160;
          a5[134] = v9 + 160;
        }
        break;
      case 3:
        unint64_t v10 = a5[137];
        if (v10 >= a5[138])
        {
          a5[137] = sub_980BF4(a5 + 136, a4);
        }
        else
        {
          sub_4F58AC(a5[137], a4);
          a5[137] = v10 + 160;
          a5[137] = v10 + 160;
        }
        break;
      default:
        return;
    }
  }
}

void sub_98B86C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 1632) = v2;
  _Unwind_Resume(a1);
}

void sub_98B874(_Unwind_Exception *a1)
{
  *(void *)(v1 + 1608) = v2;
  _Unwind_Resume(a1);
}

void sub_98B87C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 1680) = v2;
  _Unwind_Resume(a1);
}

void sub_98B884(_Unwind_Exception *a1)
{
  *(void *)(v1 + 1656) = v2;
  _Unwind_Resume(a1);
}

void sub_98B88C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 1096) = v2;
  _Unwind_Resume(a1);
}

void sub_98B894(_Unwind_Exception *a1)
{
  *(void *)(v1 + 1072) = v2;
  _Unwind_Resume(a1);
}

void sub_98B89C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 1048) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_98B8CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_WORD *)(a1 + 40) = 2;
  if (*(unsigned char *)(a2 + 792))
  {
    uint64_t v5 = *(void *)(a3 + 72) + 696 * *(void *)(a2 + 752);
    *(_WORD *)(a1 + 40) = *(_WORD *)(v5 + 556);
    sub_995044((uint64_t *)v5, (uint64_t)&v11);
    unint64_t v13 = (long long *)&dword_25DB358;
    unint64_t v6 = sub_31B300(a1, (uint64_t)&dword_25DB358, (uint64_t)&unk_20F06E0, &v13);
    unint64_t v7 = v6 + 5;
    if (*((char *)v6 + 63) < 0) {
      operator delete((void *)*v7);
    }
    *(_OWORD *)unint64_t v7 = v11;
    v7[2] = v12;
    unint64_t v8 = *(const std::string **)(a2 + 224);
    if (v8 != *(const std::string **)(a2 + 232))
    {
      *(void *)&long long v11 = &qword_25DB388;
      unint64_t v9 = sub_31B300(a1, (uint64_t)&qword_25DB388, (uint64_t)&unk_20F06E0, (long long **)&v11);
      std::string::operator=((std::string *)(v9 + 5), v8);
    }
  }
  return a1;
}

void sub_98B9C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_50828(v15);
    _Unwind_Resume(a1);
  }
  sub_50828(v15);
  _Unwind_Resume(a1);
}

char *sub_98BA04()
{
  byte_25DB27F = 1;
  word_25DB268 = 65;
  byte_25DB297 = 1;
  word_25DB280 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25DB9D0 = 0u;
  *(_OWORD *)&qword_25DB9E0 = 0u;
  dword_25DB9F0 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25DB9D0, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25DB9D0, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25DB9D0, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25DB9D0, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25DB2AF = 8;
  strcpy((char *)&qword_25DB298, "any_mode");
  byte_25DB2C7 = 7;
  strcpy((char *)&dword_25DB2B0, "cycling");
  byte_25DB2DF = 7;
  strcpy((char *)&dword_25DB2C8, "driving");
  byte_25DB2F7 = 7;
  strcpy((char *)&dword_25DB2E0, "walking");
  qword_25DB300 = 0;
  qword_25DB308 = 0;
  qword_25DB2F8 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25DB2F8 = (uint64_t)v0;
  qword_25DB300 = (uint64_t)(v0 + 9);
  qword_25DB308 = (uint64_t)(v0 + 9);
  qword_25DB310 = 0;
  qword_25DB318 = 0;
  unk_25DB320 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25DB318 = (uint64_t)(v1 + 9);
  unk_25DB320 = v1 + 9;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25DB310 = (uint64_t)v1;
  byte_25DB33F = 6;
  strcpy((char *)&dword_25DB328, "{Mode}");
  byte_25DB357 = 11;
  strcpy((char *)&qword_25DB340, "{Direction}");
  byte_25DB36F = 6;
  strcpy((char *)&dword_25DB358, "{Line}");
  byte_25DB387 = 12;
  strcpy((char *)&qword_25DB370, "{LineNumber}");
  strcpy(&byte_25DB39F, "\n{Headsign1}");
  strcpy((char *)&qword_25DB388, "{Headsign}");
  byte_25DB3B7 = 11;
  byte_25DB3CF = 11;
  strcpy((char *)&qword_25DB3B8, "{Headsign2}");
  byte_25DB3E7 = 11;
  strcpy((char *)&qword_25DB3D0, "{Headsign3}");
  byte_25DB3FF = 11;
  strcpy((char *)&qword_25DB3E8, "{Headsign4}");
  byte_25DB417 = 11;
  strcpy((char *)&qword_25DB400, "{Headsign5}");
  byte_25DB42F = 6;
  strcpy((char *)&dword_25DB418, "{Stop}");
  byte_25DB447 = 14;
  strcpy((char *)&qword_25DB430, "{PreviousStop}");
  byte_25DB45F = 8;
  strcpy((char *)&qword_25DB448, "{System}");
  byte_25DB477 = 15;
  strcpy((char *)&qword_25DB460, "{VehicleNumber}");
  byte_25DB48F = 17;
  strcpy((char *)&xmmword_25DB478, "{AccessPointExit}");
  strcpy(&byte_25DB4A7, "\n{nextBoardStation}");
  strcpy((char *)&qword_25DB490, "{Platform}");
  byte_25DB4BF = 18;
  qword_25DB4C0 = 0;
  unk_25DB4C8 = 0;
  qword_25DB4D0 = 0;
  byte_25DB4EF = 1;
  word_25DB4D8 = 32;
  qword_25DB4F0 = (uint64_t)operator new(0x20uLL);
  unk_25DB4F8 = xmmword_20B8890;
  strcpy((char *)qword_25DB4F0, "LeaveStop_Loc_Comma_Separator");
  byte_25DB51F = 5;
  dword_25DB508 = -1028144608;
  word_25DB50C = 160;
  byte_25DB537 = 2;
  word_25DB520 = -24382;
  byte_25DB522 = 0;
  byte_25DB54F = 4;
  dword_25DB538 = 548913696;
  byte_25DB53C = 0;
  byte_25DB567 = 15;
  strcpy((char *)&qword_25DB550 + 7, "\xB7 {/s:s}");
  strcpy((char *)&qword_25DB550, "{s:s} ·");
  byte_25DB57F = 6;
  strcpy((char *)&dword_25DB568, "NoType");
  byte_25DB597 = 14;
  strcpy((char *)&qword_25DB580, "{WalkDistance}");
  strcpy(&byte_25DB5AF, "\n{OneMinute}");
  strcpy((char *)&qword_25DB598, "{WalkTime}");
  byte_25DB5C7 = 11;
  byte_25DB5DF = 14;
  strcpy((char *)&qword_25DB5C8, "{StepDuration}");
  byte_25DB5F7 = 15;
  strcpy((char *)&qword_25DB5E0, "{TripFrequency}");
  byte_25DB60F = 11;
  strcpy((char *)&qword_25DB5F8, "{BoardTime}");
  byte_25DB627 = 12;
  strcpy((char *)&qword_25DB610, "{AlightTime}");
  byte_25DB63F = 21;
  strcpy((char *)&xmmword_25DB628, "{FutureTimestampList}");
  byte_25DB657 = 15;
  strcpy((char *)&qword_25DB640, "{DepartureTime}");
  byte_25DB66F = 13;
  strcpy((char *)&qword_25DB658, "{ArrivalTime}");
  byte_25DB687 = 19;
  strcpy((char *)&xmmword_25DB670, "{TotalWalkDistance}");
  byte_25DB69F = 14;
  strcpy((char *)&qword_25DB688, "{TripDuration}");
  byte_25DB6B7 = 11;
  strcpy((char *)&qword_25DB6A0, "{DayOfWeek}");
  byte_25DB6CF = 6;
  strcpy((char *)&dword_25DB6B8, "{Date}");
  byte_25DB6E7 = 16;
  strcpy((char *)&xmmword_25DB6D0, "{OutTheDoorTime}");
  uint64_t result = (char *)operator new(0x20uLL);
  qword_25DB6E8 = (uint64_t)result;
  unk_25DB6F0 = xmmword_20B91A0;
  strcpy(result, "{FirstVehicleDepartureTime}");
  byte_25DB717 = 18;
  strcpy(byte_25DB700, "{RouteArrivalTime}");
  strcpy(&byte_25DB72F, "\n{IC_Artwork}");
  strcpy((char *)&qword_25DB718, "{BaseFare}");
  byte_25DB747 = 12;
  byte_25DB75F = 11;
  strcpy((char *)&qword_25DB748, "{RT_Symbol}");
  byte_25DB777 = 12;
  strcpy((char *)&qword_25DB760, "{TotalPrice}");
  byte_25DB78F = 13;
  strcpy((char *)&qword_25DB778, "{CheckInTime}");
  byte_25DB7A7 = 19;
  strcpy(byte_25DB790, "{LiveDepartureTime}");
  strcpy(&byte_25DB7BF, "\n{LegDuration}");
  strcpy((char *)&qword_25DB7A8, "{TimeList}");
  byte_25DB7D7 = 13;
  byte_25DB7EF = 15;
  strcpy((char *)&qword_25DB7D8, "{CountdownList}");
  byte_25DB807 = 3;
  dword_25DB7F0 = 8217723;
  strcpy(&byte_25DB81F, "\t{AccessPointArt}");
  strcpy((char *)&qword_25DB808, "{LineArt}");
  byte_25DB837 = 16;
  byte_25DB84F = 11;
  strcpy((char *)&qword_25DB838, "{SystemArt}");
  strcpy(&byte_25DB867, "\n{ServiceBeginTime}");
  strcpy((char *)&qword_25DB850, "{CardName}");
  byte_25DB87F = 18;
  byte_25DB897 = 16;
  strcpy((char *)&xmmword_25DB880, "{ServiceEndTime}");
  byte_25DB8AF = 6;
  strcpy((char *)&dword_25DB898, "OnTime");
  byte_25DB8C7 = 6;
  strcpy((char *)&dword_25DB8B0, "Delays");
  byte_25DB8DF = 1;
  word_25DB8C8 = 115;
  byte_25DB8F7 = 2;
  strcpy((char *)&word_25DB8E0, "cs");
  byte_25DB90F = 1;
  word_25DB8F8 = 112;
  byte_25DB927 = 5;
  strcpy((char *)&dword_25DB910, "_Line");
  byte_25DB93F = 7;
  strcpy((char *)&dword_25DB928, "_System");
  strcpy(&byte_25DB957, "\n_VehicleNumber");
  strcpy((char *)&qword_25DB940, "_Direction");
  byte_25DB96F = 14;
  byte_25DB987 = 12;
  strcpy((char *)&qword_25DB970, "_To_Headsign");
  byte_25DB99F = 16;
  strcpy((char *)&xmmword_25DB988, "_Toward_Headsign");
  strcpy(&byte_25DB9B7, "\t_LineNumber");
  strcpy((char *)&qword_25DB9A0, "_Headsign");
  byte_25DB9CF = 11;
  return result;
}

void sub_98C5EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25DB9E0) {
    sub_20AD014((void **)qword_25DB9E0);
  }
  unsigned int v37 = (void *)xmmword_25DB9D0;
  *(void *)&xmmword_25DB9D0 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_98C68C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  switch((int)result)
  {
    case 1:
    case 2:
    case 3:
    case 4:
      *(unsigned char *)(a2 + 23) = 7;
      strcpy((char *)a2, "Vehicle");
      break;
    case 10:
    case 140:
      *(unsigned char *)(a2 + 23) = 3;
      *(_DWORD *)a2 = 7566658;
      break;
    case 11:
    case 141:
      *(unsigned char *)(a2 + 23) = 5;
      strcpy((char *)a2, "Coach");
      break;
    case 20:
      *(unsigned char *)(a2 + 23) = 4;
      strcpy((char *)a2, "Taxi");
      break;
    case 30:
      *(unsigned char *)(a2 + 23) = 7;
      strcpy((char *)a2, "Shuttle");
      break;
    case 31:
    case 142:
      *(unsigned char *)(a2 + 23) = 10;
      strcpy((char *)a2, "ShuttleBus");
      break;
    case 40:
      *(unsigned char *)(a2 + 23) = 4;
      strcpy((char *)a2, "Rail");
      break;
    case 41:
      *(unsigned char *)(a2 + 23) = 6;
      strcpy((char *)a2, "Subway");
      break;
    case 42:
      uint64_t v2 = "HighSpeedRail";
      goto LABEL_22;
    case 50:
      *(unsigned char *)(a2 + 23) = 9;
      strcpy((char *)a2, "LightRail");
      break;
    case 51:
      *(unsigned char *)(a2 + 23) = 9;
      strcpy((char *)a2, "Streetcar");
      break;
    case 52:
      *(unsigned char *)(a2 + 23) = 4;
      strcpy((char *)a2, "Tram");
      break;
    case 54:
      *(unsigned char *)(a2 + 23) = 7;
      strcpy((char *)a2, "Trolley");
      break;
    case 55:
      *(unsigned char *)(a2 + 23) = 10;
      strcpy((char *)a2, "TrolleyBus");
      break;
    case 60:
      *(unsigned char *)(a2 + 23) = 8;
      strcpy((char *)a2, "Monorail");
      break;
    case 70:
      *(unsigned char *)(a2 + 23) = 8;
      strcpy((char *)a2, "CableCar");
      break;
    case 80:
      *(unsigned char *)(a2 + 23) = 9;
      strcpy((char *)a2, "Funicular");
      break;
    case 90:
    case 91:
      *(unsigned char *)(a2 + 23) = 10;
      strcpy((char *)a2, "AerialTram");
      break;
    case 92:
      uint64_t v2 = "AerialGondola";
LABEL_22:
      *(unsigned char *)(a2 + 23) = 13;
      *(void *)a2 = *(void *)v2;
      *(void *)(a2 + 5) = *(void *)(v2 + 5);
      *(unsigned char *)(a2 + 13) = 0;
      break;
    case 100:
      *(unsigned char *)(a2 + 23) = 5;
      strcpy((char *)a2, "Ferry");
      break;
    case 101:
      *(unsigned char *)(a2 + 23) = 9;
      strcpy((char *)a2, "WaterTaxi");
      break;
    case 102:
      *(unsigned char *)(a2 + 23) = 8;
      strcpy((char *)a2, "WaterBus");
      break;
    case 110:
      *(unsigned char *)(a2 + 23) = 4;
      strcpy((char *)a2, "Boat");
      break;
    case 111:
      *(unsigned char *)(a2 + 23) = 4;
      strcpy((char *)a2, "Ship");
      break;
    case 120:
    case 143:
      *(unsigned char *)(a2 + 23) = 15;
      strcpy((char *)a2, "BusRapidTransit");
      break;
    case 130:
      *(unsigned char *)(a2 + 23) = 7;
      strcpy((char *)a2, "Jeepney");
      break;
    default:
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      break;
  }
  return result;
}

void sub_98CC7C(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, std::string *a5@<X8>)
{
  switch(a1)
  {
    case 0:
      goto LABEL_11;
    case 1:
      int v6 = 0;
      char v7 = "station";
      if (a4) {
        char v7 = "Station";
      }
      std::string::size_type v8 = 7;
      HIBYTE(v18) = 7;
      *(_DWORD *)__s = *(_DWORD *)v7;
      *(_DWORD *)&__s[3] = *(_DWORD *)(v7 + 3);
      __s[7] = 0;
      int v9 = a2 - 1;
      if ((a2 - 1) > 8) {
        goto LABEL_18;
      }
      goto LABEL_15;
    case 2:
      int v6 = 0;
      std::string::size_type v8 = 8;
      HIBYTE(v18) = 8;
      uint64_t v10 = 0x6C616E696D726554;
      if (!a4) {
        uint64_t v10 = 0x6C616E696D726574;
      }
      *(void *)__s = v10;
      LOBYTE(v17) = 0;
      int v9 = a2 - 1;
      if ((a2 - 1) > 8) {
        goto LABEL_18;
      }
      goto LABEL_15;
    case 3:
      if (!a3) {
        goto LABEL_17;
      }
LABEL_11:
      int v6 = 0;
      std::string::size_type v8 = 4;
      HIBYTE(v18) = 4;
      if (a4) {
        int v11 = 1886352467;
      }
      else {
        int v11 = 1886352499;
      }
      *(_DWORD *)__s = v11;
      __s[4] = 0;
      int v9 = a2 - 1;
      goto LABEL_15;
    default:
LABEL_17:
      std::string::size_type v8 = 0;
      *(void *)__s = 0;
      uint64_t v17 = 0;
      int v6 = 1;
      uint64_t v18 = 0;
      int v9 = a2 - 1;
      if ((a2 - 1) > 8)
      {
LABEL_18:
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v15 = 0;
        a5->__r_.__value_.__l.__size_ = 0;
        a5->__r_.__value_.__r.__words[2] = 0;
        a5->__r_.__value_.__r.__words[0] = 0;
        if (v6) {
          goto LABEL_28;
        }
        goto LABEL_27;
      }
LABEL_15:
      switch(v9)
      {
        case 0:
        case 3:
          std::string::size_type v12 = 3;
          HIBYTE(v15) = 3;
          LODWORD(__p[0]) = 7566658;
          break;
        case 1:
        case 4:
          std::string::size_type v12 = 5;
          HIBYTE(v15) = 5;
          LODWORD(__p[0]) = 1767993940;
          __int16 v13 = 110;
          goto LABEL_24;
        case 2:
        case 5:
          std::string::size_type v12 = 6;
          HIBYTE(v15) = 6;
          strcpy((char *)__p, "Subway");
          break;
        case 6:
          std::string::size_type v12 = 5;
          HIBYTE(v15) = 5;
          LODWORD(__p[0]) = 1920099654;
          __int16 v13 = 121;
LABEL_24:
          WORD2(__p[0]) = v13;
          break;
        case 7:
        case 8:
          std::string::size_type v12 = 4;
          HIBYTE(v15) = 4;
          strcpy((char *)__p, "Tram");
          break;
        default:
          goto LABEL_18;
      }
      a5->__r_.__value_.__r.__words[0] = 0;
      a5->__r_.__value_.__l.__size_ = 0;
      a5->__r_.__value_.__r.__words[2] = 0;
      std::string::append(a5, (const std::string::value_type *)__p, v12);
      if (!v6)
      {
        std::string::append(a5, " ");
LABEL_27:
        std::string::append(a5, __s, v8);
      }
LABEL_28:
      if (SHIBYTE(v15) < 0)
      {
        operator delete(__p[0]);
        if ((SHIBYTE(v18) & 0x80000000) == 0) {
          return;
        }
      }
      else if ((SHIBYTE(v18) & 0x80000000) == 0)
      {
        return;
      }
      operator delete(*(void **)__s);
      return;
  }
}

void sub_98CEF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  sub_20AD058(&a14, &a9, (uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_98CF54@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  switch((int)result)
  {
    case 1:
    case 4:
      *(unsigned char *)(a2 + 23) = 3;
      *(_DWORD *)a2 = 7566658;
      break;
    case 2:
    case 5:
      *(unsigned char *)(a2 + 23) = 5;
      strcpy((char *)a2, "Train");
      break;
    case 3:
    case 6:
      *(unsigned char *)(a2 + 23) = 6;
      strcpy((char *)a2, "Subway");
      break;
    case 7:
      *(unsigned char *)(a2 + 23) = 5;
      strcpy((char *)a2, "Ferry");
      break;
    case 8:
    case 9:
      *(unsigned char *)(a2 + 23) = 4;
      strcpy((char *)a2, "Tram");
      break;
    default:
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      break;
  }
  return result;
}

void sub_98D04C(int a1@<W0>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 1:
    case 4:
      int v3 = 0;
      size_t v4 = 3;
      HIBYTE(v19) = 3;
      LODWORD(v18[0]) = 7566658;
      unsigned int v5 = sub_97C860();
      if (v5 <= 3) {
        goto LABEL_11;
      }
      goto LABEL_28;
    case 2:
    case 5:
      int v3 = 0;
      size_t v4 = 5;
      HIBYTE(v19) = 5;
      strcpy((char *)v18, "Train");
      unsigned int v5 = sub_97C860();
      if (v5 > 3) {
        goto LABEL_28;
      }
      goto LABEL_11;
    case 3:
    case 6:
      int v3 = 0;
      size_t v4 = 6;
      HIBYTE(v19) = 6;
      strcpy((char *)v18, "Subway");
      unsigned int v5 = sub_97C860();
      if (v5 > 3) {
        goto LABEL_28;
      }
      goto LABEL_11;
    case 7:
      int v3 = 0;
      size_t v4 = 5;
      HIBYTE(v19) = 5;
      strcpy((char *)v18, "Ferry");
      unsigned int v5 = sub_97C860();
      if (v5 > 3) {
        goto LABEL_28;
      }
      goto LABEL_11;
    case 8:
    case 9:
      int v3 = 0;
      size_t v4 = 4;
      HIBYTE(v19) = 4;
      strcpy((char *)v18, "Tram");
      unsigned int v5 = sub_97C860();
      goto LABEL_11;
    default:
      size_t v4 = 0;
      v18[0] = 0;
      v18[1] = 0;
      int v3 = 1;
      uint64_t v19 = 0;
      unsigned int v5 = sub_97C860();
      if (v5 <= 3)
      {
LABEL_11:
        switch(v5)
        {
          case 0u:
          case 3u:
            size_t v6 = 4;
            HIBYTE(v17) = 4;
            if (v3) {
              int v7 = 1886352467;
            }
            else {
              int v7 = 1886352499;
            }
            LODWORD(__src) = v7;
            BYTE4(__src) = 0;
            if ((v3 & 1) == 0) {
              goto LABEL_30;
            }
            break;
          case 1u:
            std::string::size_type v8 = "station";
            if (v3) {
              std::string::size_type v8 = "Station";
            }
            size_t v6 = 7;
            HIBYTE(v17) = 7;
            LODWORD(__src) = *(_DWORD *)v8;
            *(_DWORD *)((char *)&__src + 3) = *(_DWORD *)(v8 + 3);
            HIBYTE(__src) = 0;
            if ((v3 & 1) == 0) {
              goto LABEL_30;
            }
            break;
          case 2u:
            size_t v6 = 8;
            HIBYTE(v17) = 8;
            uint64_t v9 = 0x6C616E696D726554;
            if (!v3) {
              uint64_t v9 = 0x6C616E696D726574;
            }
            int __src = (void *)v9;
            LOBYTE(v16) = 0;
            if ((v3 & 1) == 0) {
              goto LABEL_30;
            }
            break;
          default:
            goto LABEL_28;
        }
        *(void *)(a2 + 8) = 0;
        *(void *)(a2 + 16) = 0;
        *(void *)a2 = 0;
        *(unsigned char *)(a2 + 23) = v6 + 8;
        memcpy((void *)a2, &__src, v6);
        goto LABEL_25;
      }
LABEL_28:
      size_t v6 = 0;
      int __src = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      if (v3)
      {
        size_t v6 = 0;
        *(void *)(a2 + 8) = 0;
        *(void *)(a2 + 16) = 0;
        *(void *)a2 = 0;
        *(unsigned char *)(a2 + 23) = 8;
LABEL_25:
        strcpy((char *)(a2 + v6), " skipped");
        return;
      }
LABEL_30:
      memset(&__dst, 0, sizeof(__dst));
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4 + 1;
      memcpy(&__dst, v18, v4);
      *(_WORD *)((unint64_t)&__dst | v4) = 32;
      uint64_t v10 = std::string::append(&__dst, (const std::string::value_type *)&__src, v6);
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v14.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      std::string::size_type v12 = std::string::append(&v14, " skipped");
      *(std::string *)a2 = *v12;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v14.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_32:
          if ((SHIBYTE(v17) & 0x80000000) == 0) {
            return;
          }
          goto LABEL_36;
        }
      }
      else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_32;
      }
      operator delete(__dst.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v17) & 0x80000000) == 0) {
        return;
      }
LABEL_36:
      operator delete(__src);
      return;
  }
}

void sub_98D3A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a28 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((a28 & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a23);
  _Unwind_Resume(exception_object);
}

int *sub_98D43C(int *result, const char *a2, const char *a3, uint64_t a4, int *a5, std::string *a6, uint64_t a7)
{
  if (*(unsigned char *)(a4 + 1))
  {
    std::string::size_type v12 = result;
    uint64_t result = (int *)sub_26854(a5, result, a3);
    if (result)
    {
      if (result > 6 || sub_26854(a5, a5 + 1, a2))
      {
        std::string::append(a6, "_Date");
        __int16 v13 = (long long *)&dword_25DBD88;
        uint64_t v14 = a7;
        uint64_t v15 = v12;
        uint64_t v16 = (uint64_t)a3;
        char v17 = 2;
      }
      else
      {
        std::string::append(a6, "_DayOfWeek");
        __int16 v13 = (long long *)&qword_25DBD70;
        uint64_t v14 = a7;
        uint64_t v15 = v12;
        uint64_t v16 = (uint64_t)a3;
        char v17 = 1;
      }
      return (int *)sub_5F5F70(v14, v13, v15, v16, v17);
    }
  }
  return result;
}

void sub_98D54C(void *a1, uint64_t a2, uint64_t a3)
{
  size_t v6 = sub_2D298(a1, (uint64_t)&dword_25DBA28);
  if (v6)
  {
    int v7 = v6;
    std::string::size_type v8 = (const char *)(v6 + 5);
    if (*((char *)v7 + 63) < 0)
    {
      if (!v7[6]) {
        return;
      }
      __endptr.__r_.__value_.__r.__words[0] = 0;
      std::string::size_type v8 = *(const char **)v8;
    }
    else
    {
      if (!*((unsigned char *)v7 + 63)) {
        return;
      }
      __endptr.__r_.__value_.__r.__words[0] = 0;
    }
    p_endptr = &__endptr;
    strtol(v8, &__endptr.__r_.__value_.__l.__data_, 10);
    if (!*__endptr.__r_.__value_.__l.__data_)
    {
      sub_6581AC(a3, (uint64_t)a1, a2, 0, &__endptr);
      int64_t size = HIBYTE(__endptr.__r_.__value_.__r.__words[2]);
      int v11 = SHIBYTE(__endptr.__r_.__value_.__r.__words[2]);
      std::string::size_type v12 = (void *)__endptr.__r_.__value_.__r.__words[0];
      if ((__endptr.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      {
        int64_t size = __endptr.__r_.__value_.__l.__size_;
        p_endptr = (std::string *)__endptr.__r_.__value_.__r.__words[0];
      }
      __int16 v13 = (char *)p_endptr + size;
      if (size >= 6)
      {
        uint64_t v14 = p_endptr;
        do
        {
          uint64_t v15 = (char *)memchr(v14, 123, size - 5);
          if (!v15) {
            break;
          }
          if (*(_DWORD *)v15 == 1852394619 && *((_WORD *)v15 + 2) == 32101) {
            goto LABEL_19;
          }
          uint64_t v14 = (std::string *)(v15 + 1);
          int64_t size = v13 - (char *)v14;
        }
        while (v13 - (char *)v14 > 5);
      }
      uint64_t v15 = v13;
LABEL_19:
      BOOL v18 = v15 == v13 || v15 - (char *)p_endptr == -1;
      if (v11 < 0) {
        operator delete(v12);
      }
      if (!v18)
      {
        uint64_t v19 = *(unsigned __int8 *)(a3 + 23);
        if ((v19 & 0x80u) == 0) {
          uint64_t v20 = (char *)a3;
        }
        else {
          uint64_t v20 = *(char **)a3;
        }
        if (byte_25DBFF7 >= 0) {
          __n128 v21 = &qword_25DBFE0;
        }
        else {
          __n128 v21 = (uint64_t *)qword_25DBFE0;
        }
        if (byte_25DBFF7 >= 0) {
          int64_t v22 = byte_25DBFF7;
        }
        else {
          int64_t v22 = unk_25DBFE8;
        }
        if (v22)
        {
          if ((v19 & 0x80u) != 0) {
            uint64_t v19 = *(void *)(a3 + 8);
          }
          if (v19 >= v22)
          {
            uint64_t v23 = &v20[v19];
            int v24 = *(char *)v21;
            unint64_t v25 = v20;
            do
            {
              uint64_t v26 = v19 - v22;
              if (v26 == -1) {
                break;
              }
              unint64_t v27 = (char *)memchr(v25, v24, v26 + 1);
              if (!v27) {
                break;
              }
              unsigned int v28 = v27;
              if (!memcmp(v27, v21, v22))
              {
                if (v28 != v23)
                {
                  std::string::size_type v29 = v28 - v20;
                  if (v28 - v20 != -1) {
                    goto LABEL_48;
                  }
                }
                return;
              }
              unint64_t v25 = v28 + 1;
              uint64_t v19 = v23 - (v28 + 1);
            }
            while (v19 >= v22);
          }
        }
        else
        {
          std::string::size_type v29 = 0;
LABEL_48:
          if (byte_25DC09F >= 0) {
            uint64_t v30 = (const std::string::value_type *)&qword_25DC088;
          }
          else {
            uint64_t v30 = (const std::string::value_type *)qword_25DC088;
          }
          if (byte_25DC09F >= 0) {
            std::string::size_type v31 = byte_25DC09F;
          }
          else {
            std::string::size_type v31 = unk_25DC090;
          }
          std::string::replace((std::string *)a3, v29, v22, v30, v31);
        }
      }
    }
  }
}

void sub_98D774(uint64_t a1, int a2, std::string *this)
{
  int64_t v5 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v5 & 0x80u) == 0) {
    size_t v6 = this;
  }
  else {
    size_t v6 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  if (byte_25DC00F >= 0) {
    int v7 = &qword_25DBFF8;
  }
  else {
    int v7 = (uint64_t *)qword_25DBFF8;
  }
  if (byte_25DC00F >= 0) {
    int64_t v8 = byte_25DC00F;
  }
  else {
    int64_t v8 = unk_25DC000;
  }
  if (v8)
  {
    if ((v5 & 0x80u) == 0) {
      int64_t size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    }
    else {
      int64_t size = this->__r_.__value_.__l.__size_;
    }
    uint64_t v10 = (char *)v6 + size;
    if (size >= v8)
    {
      uint64_t v13 = a1;
      int v14 = *(char *)v7;
      uint64_t v15 = v6;
      do
      {
        int64_t v16 = size - v8;
        if (v16 == -1) {
          break;
        }
        char v17 = (char *)memchr(v15, v14, v16 + 1);
        if (!v17) {
          break;
        }
        int v11 = v17;
        if (!memcmp(v17, v7, v8)) {
          goto LABEL_23;
        }
        uint64_t v15 = (std::string *)(v11 + 1);
        int64_t size = v10 - (v11 + 1);
      }
      while (size >= v8);
      int v11 = v10;
LABEL_23:
      a1 = v13;
    }
    else
    {
      int v11 = (char *)v6 + size;
    }
    if (v11 == v10) {
      uint64_t v12 = -1;
    }
    else {
      uint64_t v12 = v11 - (char *)v6;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  if (byte_25DBFF7 >= 0) {
    BOOL v18 = &qword_25DBFE0;
  }
  else {
    BOOL v18 = (uint64_t *)qword_25DBFE0;
  }
  if (byte_25DBFF7 >= 0) {
    int64_t v19 = byte_25DBFF7;
  }
  else {
    int64_t v19 = unk_25DBFE8;
  }
  if (v19)
  {
    if ((v5 & 0x80u) == 0) {
      int64_t v20 = v5;
    }
    else {
      int64_t v20 = this->__r_.__value_.__l.__size_;
    }
    __n128 v21 = (char *)v6 + v20;
    if (v20 >= v19)
    {
      unsigned int v52 = a1;
      int v24 = *(char *)v18;
      unint64_t v25 = v6;
      do
      {
        int64_t v26 = v20 - v19;
        if (v26 == -1) {
          break;
        }
        unint64_t v27 = (char *)memchr(v25, v24, v26 + 1);
        if (!v27) {
          break;
        }
        int64_t v22 = v27;
        if (!memcmp(v27, v18, v19)) {
          goto LABEL_47;
        }
        unint64_t v25 = (std::string *)(v22 + 1);
        int64_t v20 = v21 - (v22 + 1);
      }
      while (v20 >= v19);
      int64_t v22 = v21;
LABEL_47:
      a1 = v52;
    }
    else
    {
      int64_t v22 = (char *)v6 + v20;
    }
    uint64_t v23 = v22 - (char *)v6;
    if (v22 == v21) {
      uint64_t v23 = -1;
    }
    if (!a2) {
      goto LABEL_53;
    }
  }
  else
  {
    uint64_t v23 = 0;
    if (!a2) {
      goto LABEL_53;
    }
  }
  if (v12 == -1 && v23 == -1)
  {
LABEL_53:
    sub_98C68C(a1, (uint64_t)__p);
    if (byte_25DBA0F >= 0) {
      unsigned int v28 = &qword_25DB9F8;
    }
    else {
      unsigned int v28 = (uint64_t *)qword_25DB9F8;
    }
    if (byte_25DBA0F >= 0) {
      int64_t v29 = byte_25DBA0F;
    }
    else {
      int64_t v29 = unk_25DBA00;
    }
    if (v29)
    {
      if ((v5 & 0x80u) == 0) {
        int64_t v30 = v5;
      }
      else {
        int64_t v30 = this->__r_.__value_.__l.__size_;
      }
      if (v30 >= v29)
      {
        std::string::size_type v31 = (char *)v6 + v30;
        int v32 = *(char *)v28;
        uint64_t v33 = v6;
        do
        {
          int64_t v34 = v30 - v29;
          if (v34 == -1) {
            break;
          }
          uint64_t v35 = (char *)memchr(v33, v32, v34 + 1);
          if (!v35) {
            break;
          }
          uint64_t v36 = v35;
          if (!memcmp(v35, v28, v29))
          {
            if (v36 != v31)
            {
              std::string::size_type v37 = v36 - (char *)v6;
              if (v36 - (char *)v6 != -1) {
                goto LABEL_71;
              }
            }
            break;
          }
          uint64_t v33 = (std::string *)(v36 + 1);
          int64_t v30 = v31 - (v36 + 1);
        }
        while (v30 >= v29);
      }
    }
    else
    {
      std::string::size_type v37 = 0;
LABEL_71:
      if ((v54 & 0x80u) == 0) {
        uint64_t v38 = __p;
      }
      else {
        uint64_t v38 = (void **)__p[0];
      }
      if ((v54 & 0x80u) == 0) {
        std::string::size_type v39 = v54;
      }
      else {
        std::string::size_type v39 = (std::string::size_type)__p[1];
      }
      std::string::replace(this, v37, v29, (const std::string::value_type *)v38, v39);
    }
    if ((char)v54 < 0) {
      operator delete(__p[0]);
    }
    return;
  }
  if (byte_25DBA0F >= 0) {
    unint64_t v40 = &qword_25DB9F8;
  }
  else {
    unint64_t v40 = (uint64_t *)qword_25DB9F8;
  }
  if (byte_25DBA0F >= 0) {
    int64_t v41 = byte_25DBA0F;
  }
  else {
    int64_t v41 = unk_25DBA00;
  }
  if (v41)
  {
    if ((v5 & 0x80u) == 0) {
      int64_t v42 = v5;
    }
    else {
      int64_t v42 = this->__r_.__value_.__l.__size_;
    }
    if (v42 >= v41)
    {
      unint64_t v46 = (char *)v6 + v42;
      int v47 = *(char *)v40;
      unsigned int v48 = v6;
      do
      {
        int64_t v49 = v42 - v41;
        if (v49 == -1) {
          break;
        }
        char v50 = (char *)memchr(v48, v47, v49 + 1);
        if (!v50) {
          break;
        }
        uint64_t v51 = v50;
        if (!memcmp(v50, v40, v41))
        {
          if (v51 != v46)
          {
            std::string::size_type v43 = v51 - (char *)v6;
            if (v51 - (char *)v6 != -1) {
              goto LABEL_93;
            }
          }
          return;
        }
        unsigned int v48 = (std::string *)(v51 + 1);
        int64_t v42 = v46 - (v51 + 1);
      }
      while (v42 >= v41);
    }
  }
  else
  {
    std::string::size_type v43 = 0;
LABEL_93:
    if (byte_25DBC4F >= 0) {
      uint64_t v44 = (const std::string::value_type *)&qword_25DBC38;
    }
    else {
      uint64_t v44 = (const std::string::value_type *)qword_25DBC38;
    }
    if (byte_25DBC4F >= 0) {
      std::string::size_type v45 = byte_25DBC4F;
    }
    else {
      std::string::size_type v45 = unk_25DBC40;
    }
    std::string::replace(this, v43, v41, v44, v45);
  }
}

void sub_98DB28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_98DB44(void *a1, uint64_t a2)
{
  size_t v4 = sub_2D298(a1, (uint64_t)&dword_25DBA28);
  if (!v4)
  {
    BOOL v6 = 1;
    int v7 = sub_2D298(a1, (uint64_t)&qword_25DBB18);
    if (v7) {
      goto LABEL_12;
    }
LABEL_5:
    BOOL v8 = 1;
    uint64_t v9 = sub_2D298(a1, (uint64_t)&qword_25DBA10);
    if (v9) {
      goto LABEL_16;
    }
LABEL_6:
    BOOL v10 = 1;
    int v11 = sub_2D298(a1, (uint64_t)&qword_25DBB30);
    if (v11) {
      goto LABEL_20;
    }
LABEL_7:
    BOOL v12 = 1;
    uint64_t result = (std::string *)sub_2D298(a1, (uint64_t)&qword_25DBA58);
    if (result) {
      goto LABEL_24;
    }
LABEL_8:
    BOOL v82 = 1;
    if (!v6) {
      goto LABEL_55;
    }
    goto LABEL_28;
  }
  if (*((char *)v4 + 63) < 0) {
    uint64_t v5 = v4[6];
  }
  else {
    uint64_t v5 = *((unsigned __int8 *)v4 + 63);
  }
  BOOL v6 = v5 == 0;
  int v7 = sub_2D298(a1, (uint64_t)&qword_25DBB18);
  if (!v7) {
    goto LABEL_5;
  }
LABEL_12:
  if (*((char *)v7 + 63) < 0) {
    uint64_t v14 = v7[6];
  }
  else {
    uint64_t v14 = *((unsigned __int8 *)v7 + 63);
  }
  BOOL v8 = v14 == 0;
  uint64_t v9 = sub_2D298(a1, (uint64_t)&qword_25DBA10);
  if (!v9) {
    goto LABEL_6;
  }
LABEL_16:
  if (*((char *)v9 + 63) < 0) {
    uint64_t v15 = v9[6];
  }
  else {
    uint64_t v15 = *((unsigned __int8 *)v9 + 63);
  }
  BOOL v10 = v15 == 0;
  int v11 = sub_2D298(a1, (uint64_t)&qword_25DBB30);
  if (!v11) {
    goto LABEL_7;
  }
LABEL_20:
  if (*((char *)v11 + 63) < 0) {
    uint64_t v16 = v11[6];
  }
  else {
    uint64_t v16 = *((unsigned __int8 *)v11 + 63);
  }
  BOOL v12 = v16 == 0;
  uint64_t result = (std::string *)sub_2D298(a1, (uint64_t)&qword_25DBA58);
  if (!result) {
    goto LABEL_8;
  }
LABEL_24:
  if (result[2].__r_.__value_.__s.__data_[15] < 0)
  {
    BOOL v82 = result[2].__r_.__value_.__r.__words[0] == 0;
    if (!v6) {
      goto LABEL_55;
    }
  }
  else
  {
    BOOL v82 = result[2].__r_.__value_.__s.__data_[15] == 0;
    if (!v6) {
      goto LABEL_55;
    }
  }
LABEL_28:
  int64_t v17 = *(unsigned __int8 *)(a2 + 23);
  if ((v17 & 0x80u) == 0) {
    BOOL v18 = (std::string *)a2;
  }
  else {
    BOOL v18 = *(std::string **)a2;
  }
  if (byte_25DBFF7 >= 0) {
    int64_t v19 = &qword_25DBFE0;
  }
  else {
    int64_t v19 = (uint64_t *)qword_25DBFE0;
  }
  if (byte_25DBFF7 >= 0) {
    int64_t v20 = byte_25DBFF7;
  }
  else {
    int64_t v20 = unk_25DBFE8;
  }
  if (v20)
  {
    if ((v17 & 0x80u) != 0) {
      int64_t v17 = *(void *)(a2 + 8);
    }
    if (v17 >= v20)
    {
      __n128 v21 = (std::string *)((char *)v18 + v17);
      int v22 = *(char *)v19;
      uint64_t result = v18;
      do
      {
        uint64_t v23 = v17 - v20;
        if (v23 == -1) {
          break;
        }
        uint64_t result = (std::string *)memchr(result, v22, v23 + 1);
        if (!result) {
          break;
        }
        int v24 = result;
        uint64_t result = (std::string *)memcmp(result, v19, v20);
        if (!result)
        {
          if (v24 != v21)
          {
            std::string::size_type v25 = (char *)v24 - (char *)v18;
            if ((char *)v24 - (char *)v18 != -1) {
              goto LABEL_48;
            }
          }
          break;
        }
        uint64_t result = (std::string *)((char *)&v24->__r_.__value_.__l.__data_ + 1);
        int64_t v17 = (char *)v21 - ((char *)&v24->__r_.__value_.__l.__data_ + 1);
      }
      while (v17 >= v20);
    }
  }
  else
  {
    std::string::size_type v25 = 0;
LABEL_48:
    if (byte_25DBBA7 >= 0) {
      int64_t v26 = (const std::string::value_type *)&qword_25DBB90;
    }
    else {
      int64_t v26 = (const std::string::value_type *)qword_25DBB90;
    }
    if (byte_25DBBA7 >= 0) {
      std::string::size_type v27 = byte_25DBBA7;
    }
    else {
      std::string::size_type v27 = qword_25DBB98;
    }
    uint64_t result = std::string::replace((std::string *)a2, v25, v20, v26, v27);
  }
LABEL_55:
  if (v8)
  {
    int64_t v28 = *(unsigned __int8 *)(a2 + 23);
    if ((v28 & 0x80u) == 0) {
      int64_t v29 = (std::string *)a2;
    }
    else {
      int64_t v29 = *(std::string **)a2;
    }
    if (byte_25DC00F >= 0) {
      int64_t v30 = &qword_25DBFF8;
    }
    else {
      int64_t v30 = (uint64_t *)qword_25DBFF8;
    }
    if (byte_25DC00F >= 0) {
      int64_t v31 = byte_25DC00F;
    }
    else {
      int64_t v31 = unk_25DC000;
    }
    if (v31)
    {
      if ((v28 & 0x80u) != 0) {
        int64_t v28 = *(void *)(a2 + 8);
      }
      if (v28 >= v31)
      {
        int v32 = (std::string *)((char *)v29 + v28);
        int v33 = *(char *)v30;
        uint64_t result = v29;
        do
        {
          uint64_t v34 = v28 - v31;
          if (v34 == -1) {
            break;
          }
          uint64_t result = (std::string *)memchr(result, v33, v34 + 1);
          if (!result) {
            break;
          }
          uint64_t v35 = result;
          uint64_t result = (std::string *)memcmp(result, v30, v31);
          if (!result)
          {
            if (v35 != v32)
            {
              std::string::size_type v36 = (char *)v35 - (char *)v29;
              if ((char *)v35 - (char *)v29 != -1) {
                goto LABEL_76;
              }
            }
            break;
          }
          uint64_t result = (std::string *)((char *)&v35->__r_.__value_.__l.__data_ + 1);
          int64_t v28 = (char *)v32 - ((char *)&v35->__r_.__value_.__l.__data_ + 1);
        }
        while (v28 >= v31);
      }
    }
    else
    {
      std::string::size_type v36 = 0;
LABEL_76:
      if (byte_25DBBA7 >= 0) {
        std::string::size_type v37 = (const std::string::value_type *)&qword_25DBB90;
      }
      else {
        std::string::size_type v37 = (const std::string::value_type *)qword_25DBB90;
      }
      if (byte_25DBBA7 >= 0) {
        std::string::size_type v38 = byte_25DBBA7;
      }
      else {
        std::string::size_type v38 = qword_25DBB98;
      }
      uint64_t result = std::string::replace((std::string *)a2, v36, v31, v37, v38);
    }
  }
  if (v10)
  {
    int64_t v39 = *(unsigned __int8 *)(a2 + 23);
    if ((v39 & 0x80u) == 0) {
      unint64_t v40 = (std::string *)a2;
    }
    else {
      unint64_t v40 = *(std::string **)a2;
    }
    if (byte_25DC027 >= 0) {
      int64_t v41 = &qword_25DC010;
    }
    else {
      int64_t v41 = (uint64_t *)qword_25DC010;
    }
    if (byte_25DC027 >= 0) {
      int64_t v42 = byte_25DC027;
    }
    else {
      int64_t v42 = *(void *)&word_25DC018;
    }
    if (v42)
    {
      if ((v39 & 0x80u) != 0) {
        int64_t v39 = *(void *)(a2 + 8);
      }
      if (v39 >= v42)
      {
        std::string::size_type v43 = (std::string *)((char *)v40 + v39);
        int v44 = *(char *)v41;
        uint64_t result = v40;
        do
        {
          uint64_t v45 = v39 - v42;
          if (v45 == -1) {
            break;
          }
          uint64_t result = (std::string *)memchr(result, v44, v45 + 1);
          if (!result) {
            break;
          }
          unint64_t v46 = result;
          uint64_t result = (std::string *)memcmp(result, v41, v42);
          if (!result)
          {
            if (v46 != v43)
            {
              std::string::size_type v47 = (char *)v46 - (char *)v40;
              if ((char *)v46 - (char *)v40 != -1) {
                goto LABEL_104;
              }
            }
            break;
          }
          uint64_t result = (std::string *)((char *)&v46->__r_.__value_.__l.__data_ + 1);
          int64_t v39 = (char *)v43 - ((char *)&v46->__r_.__value_.__l.__data_ + 1);
        }
        while (v39 >= v42);
      }
    }
    else
    {
      std::string::size_type v47 = 0;
LABEL_104:
      if (byte_25DBBA7 >= 0) {
        unsigned int v48 = (const std::string::value_type *)&qword_25DBB90;
      }
      else {
        unsigned int v48 = (const std::string::value_type *)qword_25DBB90;
      }
      if (byte_25DBBA7 >= 0) {
        std::string::size_type v49 = byte_25DBBA7;
      }
      else {
        std::string::size_type v49 = qword_25DBB98;
      }
      uint64_t result = std::string::replace((std::string *)a2, v47, v42, v48, v49);
    }
  }
  if (v12)
  {
    int64_t v50 = *(unsigned __int8 *)(a2 + 23);
    if ((v50 & 0x80u) == 0) {
      uint64_t v51 = (std::string *)a2;
    }
    else {
      uint64_t v51 = *(std::string **)a2;
    }
    if (byte_25DC03F >= 0) {
      unsigned int v52 = &qword_25DC028;
    }
    else {
      unsigned int v52 = (uint64_t *)qword_25DC028;
    }
    if (byte_25DC03F >= 0) {
      int64_t v53 = byte_25DC03F;
    }
    else {
      int64_t v53 = unk_25DC030;
    }
    if (v53)
    {
      if ((v50 & 0x80u) != 0) {
        int64_t v50 = *(void *)(a2 + 8);
      }
      if (v50 >= v53)
      {
        unsigned __int8 v54 = (std::string *)((char *)v51 + v50);
        int v55 = *(char *)v52;
        uint64_t result = v51;
        do
        {
          uint64_t v56 = v50 - v53;
          if (v56 == -1) {
            break;
          }
          uint64_t result = (std::string *)memchr(result, v55, v56 + 1);
          if (!result) {
            break;
          }
          uint64_t v57 = result;
          uint64_t result = (std::string *)memcmp(result, v52, v53);
          if (!result)
          {
            if (v57 != v54)
            {
              std::string::size_type v58 = (char *)v57 - (char *)v51;
              if ((char *)v57 - (char *)v51 != -1) {
                goto LABEL_132;
              }
            }
            break;
          }
          uint64_t result = (std::string *)((char *)&v57->__r_.__value_.__l.__data_ + 1);
          int64_t v50 = (char *)v54 - ((char *)&v57->__r_.__value_.__l.__data_ + 1);
        }
        while (v50 >= v53);
      }
    }
    else
    {
      std::string::size_type v58 = 0;
LABEL_132:
      if (byte_25DBBA7 >= 0) {
        unint64_t v59 = (const std::string::value_type *)&qword_25DBB90;
      }
      else {
        unint64_t v59 = (const std::string::value_type *)qword_25DBB90;
      }
      if (byte_25DBBA7 >= 0) {
        std::string::size_type v60 = byte_25DBBA7;
      }
      else {
        std::string::size_type v60 = qword_25DBB98;
      }
      uint64_t result = std::string::replace((std::string *)a2, v58, v53, v59, v60);
    }
  }
  if (v82)
  {
    char v61 = *(unsigned char *)(a2 + 23);
    if (v61 >= 0) {
      uint64_t v62 = (std::string *)a2;
    }
    else {
      uint64_t v62 = *(std::string **)a2;
    }
    if (byte_25DC057 >= 0) {
      uint64_t v63 = &qword_25DC040;
    }
    else {
      uint64_t v63 = (uint64_t *)qword_25DC040;
    }
    if (byte_25DC057 >= 0) {
      int64_t v64 = byte_25DC057;
    }
    else {
      int64_t v64 = *(void *)&dword_25DC048;
    }
    if (!v64) {
      goto LABEL_171;
    }
    if (v61 >= 0) {
      int64_t v65 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      int64_t v65 = *(void *)(a2 + 8);
    }
    BOOL v66 = (std::string *)((char *)v62 + v65);
    if (v65 >= v64)
    {
      int v72 = *(char *)v63;
      int64_t v73 = v65;
      uint64_t result = v62;
      do
      {
        int64_t v74 = v73 - v64;
        if (v74 == -1) {
          break;
        }
        uint64_t result = (std::string *)memchr(result, v72, v74 + 1);
        if (!result) {
          break;
        }
        int64_t v75 = result;
        uint64_t result = (std::string *)memcmp(result, v63, v64);
        if (!result)
        {
          if (v75 != v66)
          {
            std::string::size_type v69 = (char *)v75 - (char *)v62;
            if ((char *)v75 - (char *)v62 != -1) {
              goto LABEL_172;
            }
          }
          goto LABEL_154;
        }
        uint64_t result = (std::string *)((char *)&v75->__r_.__value_.__l.__data_ + 1);
        int64_t v73 = (char *)v66 - ((char *)&v75->__r_.__value_.__l.__data_ + 1);
      }
      while (v73 >= v64);
    }
    uint64_t v67 = byte_25DC06F >= 0 ? &xmmword_25DC058 : (long long *)xmmword_25DC058;
    int64_t v64 = byte_25DC06F >= 0 ? byte_25DC06F : *((void *)&xmmword_25DC058 + 1);
    if (!v64) {
      goto LABEL_171;
    }
LABEL_154:
    if (v65 >= v64)
    {
      int v76 = *(char *)v67;
      int64_t v77 = v65;
      uint64_t result = v62;
      do
      {
        int64_t v78 = v77 - v64;
        if (v78 == -1) {
          break;
        }
        uint64_t result = (std::string *)memchr(result, v76, v78 + 1);
        if (!result) {
          break;
        }
        uint64_t v79 = result;
        uint64_t result = (std::string *)memcmp(result, v67, v64);
        if (!result)
        {
          if (v79 != v66)
          {
            std::string::size_type v69 = (char *)v79 - (char *)v62;
            if ((char *)v79 - (char *)v62 != -1) {
              goto LABEL_172;
            }
          }
          break;
        }
        uint64_t result = (std::string *)((char *)&v79->__r_.__value_.__l.__data_ + 1);
        int64_t v77 = (char *)v66 - ((char *)&v79->__r_.__value_.__l.__data_ + 1);
      }
      while (v77 >= v64);
    }
    uint64_t v68 = byte_25DC087 >= 0 ? &qword_25DC070 : (uint64_t *)qword_25DC070;
    int64_t v64 = byte_25DC087 >= 0 ? byte_25DC087 : *(void *)&byte_25DC078;
    if (v64)
    {
      if (v65 >= v64)
      {
        int v80 = *(char *)v68;
        uint64_t result = v62;
        do
        {
          if (v65 - v64 == -1) {
            break;
          }
          uint64_t result = (std::string *)memchr(result, v80, v65 - v64 + 1);
          if (!result) {
            break;
          }
          uint64_t v81 = result;
          uint64_t result = (std::string *)memcmp(result, v68, v64);
          if (!result)
          {
            if (v81 != v66)
            {
              std::string::size_type v69 = (char *)v81 - (char *)v62;
              if ((char *)v81 - (char *)v62 != -1) {
                goto LABEL_172;
              }
            }
            return result;
          }
          uint64_t result = (std::string *)((char *)&v81->__r_.__value_.__l.__data_ + 1);
          int64_t v65 = (char *)v66 - ((char *)&v81->__r_.__value_.__l.__data_ + 1);
        }
        while (v65 >= v64);
      }
    }
    else
    {
LABEL_171:
      std::string::size_type v69 = 0;
LABEL_172:
      if (byte_25DBBA7 >= 0) {
        uint64_t v70 = (const std::string::value_type *)&qword_25DBB90;
      }
      else {
        uint64_t v70 = (const std::string::value_type *)qword_25DBB90;
      }
      if (byte_25DBBA7 >= 0) {
        std::string::size_type v71 = byte_25DBBA7;
      }
      else {
        std::string::size_type v71 = qword_25DBB98;
      }
      return std::string::replace((std::string *)a2, v69, v64, v70, v71);
    }
  }
  return result;
}

void sub_98E2D8(void *a1, uint64_t a2, int a3, char a4, uint64_t a5, uint64_t a6)
{
  sub_98DB44(a1, a6);
  sub_98D774(a2, a3, (std::string *)a6);
  sub_98D54C(a1, a5, a6);
  if ((a4 & 1) == 0)
  {
    qmemcpy(v20, "_VehicleNumber", 14);
    char v19 = 20;
    strcpy(__p, "_VehicleAlphanumeric");
    uint64_t v12 = *(unsigned __int8 *)(a6 + 23);
    if ((v12 & 0x80u) == 0) {
      uint64_t v13 = (char *)a6;
    }
    else {
      uint64_t v13 = *(char **)a6;
    }
    if ((v12 & 0x80u) != 0) {
      uint64_t v12 = *(void *)(a6 + 8);
    }
    if (v12 >= 14)
    {
      uint64_t v14 = &v13[v12];
      uint64_t v15 = v13;
      do
      {
        uint64_t v16 = (char *)memchr(v15, 95, v12 - 13);
        if (!v16) {
          break;
        }
        if (*(void *)v16 == v20[0] && *(void *)(v16 + 6) == *(void *)((char *)v20 + 6))
        {
          if (v16 != v14 && v16 - v13 != -1)
          {
            std::string::replace((std::string *)a6, v16 - v13, 0xEuLL, __p, 0x14uLL);
            if (v19 < 0) {
              operator delete(*(void **)__p);
            }
          }
          return;
        }
        uint64_t v15 = v16 + 1;
        uint64_t v12 = v14 - (unsigned char *)v15;
      }
      while (v14 - (unsigned char *)v15 >= 14);
    }
  }
}

void sub_98E444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_98E460(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, long long *a9, uint64_t a10)
{
  uint64_t v16 = sub_8D7730(a5, a2);
  uint64_t v17 = *(unsigned __int8 *)(a3 + 23);
  if ((v17 & 0x80u) != 0) {
    uint64_t v17 = *(void *)(a3 + 8);
  }
  if (v17) {
    BOOL v18 = sub_8D7730(a5, a3);
  }
  else {
    BOOL v18 = &qword_25DBB90;
  }
  char v19 = sub_8D7730(a5, a4);
  std::string __p = operator new(0x19uLL);
  long long v41 = xmmword_20B9250;
  strcpy((char *)__p, "CountdownList_Separator");
  int64_t v20 = sub_8D7730(a5, (uint64_t)&__p);
  if (SHIBYTE(v41) < 0)
  {
    operator delete(__p);
    uint64_t v22 = *a1;
    uint64_t v21 = a1[1];
    long long v41 = 0uLL;
    std::string __p = 0;
    uint64_t v23 = v21 - v22;
    if (v21 != v22) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v22 = *a1;
    uint64_t v21 = a1[1];
    long long v41 = 0uLL;
    std::string __p = 0;
    uint64_t v23 = v21 - v22;
    if (v21 != v22)
    {
LABEL_8:
      unint64_t v24 = 0x6DB6DB6DB6DB6DB7 * (v23 >> 2);
      if (v24 >> 62) {
        sub_2E00();
      }
      std::string::size_type v25 = (char *)operator new(0xB6DB6DB6DB6DB6DCLL * (v23 >> 2));
      std::string __p = v25;
      *(void *)&long long v41 = v25;
      *((void *)&v41 + 1) = &v25[4 * v24];
      do
      {
        LODWORD(v37) = *(_DWORD *)(v22 + 4);
        std::string::size_type v25 = sub_935E5C(&__p, v25, &v37) + 4;
        v22 += 28;
      }
      while (v22 != v21);
      int64_t v26 = (int *)__p;
      std::string::size_type v27 = (char *)v41;
LABEL_14:
      unint64_t v28 = 126 - 2 * __clz((v27 - (char *)v26) >> 2);
      if (v27 == (char *)v26) {
        uint64_t v29 = 0;
      }
      else {
        uint64_t v29 = v28;
      }
      sub_97CC7C(v26, v27, (uint64_t)&v37, v29, 1);
      std::string::size_type v37 = 0;
      unint64_t v38 = 0;
      unint64_t v39 = 0;
      char v36 = 3;
      unint64_t v30 = sub_98EEF0((uint64_t *)&v37, (long long *)v16, &v36);
      unint64_t v31 = v30;
      int v32 = *((char *)v18 + 23);
      unint64_t v38 = v30;
      if (v32 < 0)
      {
        unint64_t v34 = v39;
        if (!v18[1])
        {
LABEL_19:
          char v36 = 1;
          if (v30 < v34)
          {
LABEL_20:
            sub_5F2D5C(v31, (long long *)v19, 1);
            uint64_t v35 = v31 + 32;
            goto LABEL_27;
          }
LABEL_26:
          uint64_t v35 = sub_98EEF0((uint64_t *)&v37, (long long *)v19, &v36);
LABEL_27:
          unint64_t v38 = v35;
          sub_5F6E3C(a6, (uint64_t)&qword_25DBEA8, (uint64_t)&__p, (uint64_t *)&v37, (long long *)v20, a9, a7, a10);
        }
      }
      else
      {
        uint64_t v33 = v32;
        unint64_t v34 = v39;
        if (!v33) {
          goto LABEL_19;
        }
      }
      char v36 = 2;
      if (v30 >= v34)
      {
        unint64_t v31 = sub_98EEF0((uint64_t *)&v37, (long long *)v18, &v36);
      }
      else
      {
        sub_5F2D5C(v30, (long long *)v18, 2);
        v31 += 32;
      }
      unint64_t v38 = v31;
      char v36 = 1;
      if (v31 < v39) {
        goto LABEL_20;
      }
      goto LABEL_26;
    }
  }
  std::string::size_type v27 = 0;
  int64_t v26 = 0;
  goto LABEL_14;
}

void sub_98E7B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (__p)
  {
    a15 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

unint64_t sub_98E81C(unsigned int a1)
{
  unint64_t v1 = 0x202010100uLL >> (8 * a1);
  if (a1 >= 5) {
    LOBYTE(v1) = 0;
  }
  return v1 & 3;
}

void sub_98E840(int a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  int v8 = 1;
  switch(a1)
  {
    case 0:
      memset(&v15, 0, sizeof(v15));
      memset(&v14, 0, sizeof(v14));
      if ((a4 & 1) == 0) {
        std::string::assign(&v14, "Scheduled");
      }
      int v9 = 0;
      int v8 = 0;
      char v10 = 0;
      goto LABEL_21;
    case 1:
    case 2:
      memset(&v15, 0, sizeof(v15));
      memset(&v14, 0, sizeof(v14));
      if (a1 == 1) {
        goto LABEL_33;
      }
      goto LABEL_5;
    case 3:
      memset(&v15, 0, sizeof(v15));
      memset(&v14, 0, sizeof(v14));
      if (a4)
      {
        std::string::assign(&v14, "{RT_Symbol} Delays");
        int v8 = 2;
        int v9 = 1;
      }
      else
      {
        std::string::assign(&v14, "Delays");
        int v9 = 0;
        int v8 = 2;
      }
      char v10 = 2;
      goto LABEL_21;
    case 4:
      memset(&v15, 0, sizeof(v15));
      memset(&v14, 0, sizeof(v14));
      if (a4)
      {
        std::string::assign(&v14, "{RT_Symbol} No service");
        char v10 = 6;
        int v8 = 2;
        int v9 = 1;
      }
      else
      {
        std::string::assign(&v14, "No service");
        int v9 = 0;
        char v10 = 6;
        int v8 = 2;
      }
      goto LABEL_21;
    default:
      int v8 = 0;
      memset(&v15, 0, sizeof(v15));
      memset(&v14, 0, sizeof(v14));
      if (a1 != 1)
      {
LABEL_5:
        if (a1 == 2)
        {
          if (a4)
          {
            std::string::assign(&v15, "{RT_Symbol}");
            int v9 = 1;
          }
          else
          {
            std::string::assign(&v14, "On-time");
            int v9 = 0;
          }
          char v10 = 1;
        }
        else
        {
          int v9 = 0;
          char v10 = 0;
        }
LABEL_21:
        *(unsigned char *)(a3 + 104) = v10;
        std::string::size_type size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
        if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v14.__r_.__value_.__l.__size_;
        }
        if (size)
        {
          uint64_t v12 = (const std::string *)sub_8D7730(a2, (uint64_t)&v14);
          std::string::operator=(&v15, v12);
        }
        std::string::size_type v13 = HIBYTE(v15.__r_.__value_.__r.__words[2]);
        if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v13 = v15.__r_.__value_.__l.__size_;
        }
        if (v13) {
          sub_5F4680(a3, (uint64_t)&v15, (uint64_t)&word_25DBF98, v8);
        }
        if (a5 != 0x7FFFFFFFLL)
        {
          sub_5F3B34((uint64_t)v16);
          sub_5F6F78(a3, (uint64_t)v16, a5);
        }
        if (v9)
        {
          sub_52500C(1u, (uint64_t)v16);
          sub_5F40C0(a3, (long long *)&qword_25DBE18);
        }
      }
LABEL_33:
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v14.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return;
        }
      }
      else if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        return;
      }
      operator delete(v15.__r_.__value_.__l.__data_);
      return;
  }
}

void sub_98EB9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(a1);
}

BOOL sub_98EC14(int a1, uint64_t a2, uint64_t a3, int *a4)
{
  if (!*(unsigned char *)(a2 + 792))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  if (*(_DWORD *)(a3 + 1436)) {
    BOOL v4 = *(unsigned __int8 *)(a3 + 1177) >= 0xCu;
  }
  else {
    BOOL v4 = 0;
  }
  if (!v4) {
    return 0;
  }
  if (*(void *)(a2 + 488) == *(void *)(a2 + 496)) {
    return 0;
  }
  int v5 = *(_DWORD *)(a2 + 116);
  if (v5 == 0x7FFFFFFF) {
    return 0;
  }
  if (*a4 < 0) {
    char v7 = -5;
  }
  else {
    char v7 = 5;
  }
  return v5 < (int)(*a4 / 10
                  + a1
                  + (((103 * (char)(v7 + *a4 % 10)) >> 15) & 1)
                  + ((103 * (char)(v7 + *a4 % 10)) >> 10));
}

uint64_t sub_98ED08(uint64_t result, unsigned int a2)
{
  unint64_t v2 = 0x50402030100uLL >> (8 * a2);
  if (a2 >= 6) {
    LOBYTE(v2) = 0;
  }
  *(unsigned char *)(result + 104) = v2;
  return result;
}

void sub_98ED2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = sub_8D7730(a2, a1);
  if (*((char *)v5 + 23) < 0)
  {
    sub_4200(&__p, (void *)*v5, v5[1]);
    char v7 = *(char **)(a1 + 24);
    int v8 = *(char **)(a1 + 32);
    if (v7 == v8) {
      goto LABEL_37;
    }
  }
  else
  {
    long long v6 = *(_OWORD *)v5;
    __p.__r_.__value_.__r.__words[2] = v5[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v6;
    char v7 = *(char **)(a1 + 24);
    int v8 = *(char **)(a1 + 32);
    if (v7 == v8) {
      goto LABEL_37;
    }
  }
  do
  {
    int64_t size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    int v15 = v7[23];
    if (v15 >= 0) {
      uint64_t v16 = v7;
    }
    else {
      uint64_t v16 = *(char **)v7;
    }
    if (v15 >= 0) {
      int64_t v17 = v7[23];
    }
    else {
      int64_t v17 = *((void *)v7 + 1);
    }
    if (v17)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int64_t size = __p.__r_.__value_.__l.__size_;
      }
      if (size >= v17)
      {
        BOOL v18 = (char *)p_p + size;
        int v19 = *v16;
        int64_t v20 = p_p;
        do
        {
          int64_t v21 = size - v17;
          if (v21 == -1) {
            break;
          }
          uint64_t v22 = (char *)memchr(v20, v19, v21 + 1);
          if (!v22) {
            break;
          }
          uint64_t v23 = v22;
          if (!memcmp(v22, v16, v17))
          {
            if (v23 != v18)
            {
              std::string::size_type v9 = v23 - (char *)p_p;
              if (v23 - (char *)p_p != -1) {
                goto LABEL_7;
              }
            }
            break;
          }
          int64_t v20 = (std::string *)(v23 + 1);
          int64_t size = v18 - (v23 + 1);
        }
        while (size >= v17);
      }
    }
    else
    {
      std::string::size_type v9 = 0;
LABEL_7:
      int v10 = v7[47];
      if (v10 >= 0) {
        int v11 = v7 + 24;
      }
      else {
        int v11 = (const std::string::value_type *)*((void *)v7 + 3);
      }
      if (v10 >= 0) {
        std::string::size_type v12 = v7[47];
      }
      else {
        std::string::size_type v12 = *((void *)v7 + 4);
      }
      std::string::replace(&__p, v9, v17, v11, v12);
    }
    v7 += 48;
  }
  while (v7 != v8);
LABEL_37:
  sub_5F41E8(a3, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_98EED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_98EEF0(uint64_t *a1, long long *a2, char *a3)
{
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v8 = a1[2] - *a1;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 59) {
      sub_188D718();
    }
    int v10 = (char *)operator new(32 * v9);
  }
  else
  {
    int v10 = 0;
  }
  uint64_t v18 = (uint64_t)&v10[32 * v4];
  int v19 = &v10[32 * v9];
  sub_5F2D5C(v18, a2, *a3);
  uint64_t v11 = v18;
  uint64_t v12 = v18 + 32;
  std::string::size_type v13 = (char *)*a1;
  std::string v14 = (char *)a1[1];
  if (v14 == (char *)*a1)
  {
    *a1 = v18;
    a1[1] = v12;
    a1[2] = (uint64_t)v19;
  }
  else
  {
    do
    {
      long long v15 = *((_OWORD *)v14 - 2);
      *(void *)(v11 - 16) = *((void *)v14 - 2);
      *(_OWORD *)(v11 - 32) = v15;
      *((void *)v14 - 3) = 0;
      *((void *)v14 - 2) = 0;
      *((void *)v14 - 4) = 0;
      *(unsigned char *)(v11 - 8) = *(v14 - 8);
      v11 -= 32;
      v14 -= 32;
    }
    while (v14 != v13);
    uint64_t v16 = (char *)*a1;
    std::string v14 = (char *)a1[1];
    *a1 = v11;
    a1[1] = v12;
    a1[2] = (uint64_t)v19;
    if (v14 != v16)
    {
      do
      {
        if (*(v14 - 9) < 0) {
          operator delete(*((void **)v14 - 4));
        }
        v14 -= 32;
      }
      while (v14 != v16);
      std::string v14 = v16;
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v18 + 32;
}

void sub_98F070(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3D695C((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_98F084()
{
  byte_25DBA0F = 6;
  strcpy((char *)&qword_25DB9F8, "{Mode}");
  byte_25DBA27 = 11;
  strcpy((char *)&qword_25DBA10, "{Direction}");
  byte_25DBA3F = 6;
  strcpy((char *)&dword_25DBA28, "{Line}");
  byte_25DBA57 = 12;
  strcpy((char *)&qword_25DBA40, "{LineNumber}");
  strcpy(&byte_25DBA6F, "\n{Headsign1}");
  strcpy((char *)&qword_25DBA58, "{Headsign}");
  byte_25DBA87 = 11;
  byte_25DBA9F = 11;
  strcpy((char *)&qword_25DBA88, "{Headsign2}");
  byte_25DBAB7 = 11;
  strcpy((char *)&qword_25DBAA0, "{Headsign3}");
  byte_25DBACF = 11;
  strcpy((char *)&qword_25DBAB8, "{Headsign4}");
  byte_25DBAE7 = 11;
  strcpy((char *)&qword_25DBAD0, "{Headsign5}");
  byte_25DBAFF = 6;
  strcpy((char *)&dword_25DBAE8, "{Stop}");
  byte_25DBB17 = 14;
  strcpy((char *)&qword_25DBB00, "{PreviousStop}");
  byte_25DBB2F = 8;
  strcpy((char *)&qword_25DBB18, "{System}");
  byte_25DBB47 = 15;
  strcpy((char *)&qword_25DBB30, "{VehicleNumber}");
  byte_25DBB5F = 17;
  strcpy((char *)&xmmword_25DBB48, "{AccessPointExit}");
  strcpy(&byte_25DBB77, "\n{nextBoardStation}");
  strcpy((char *)&qword_25DBB60, "{Platform}");
  byte_25DBB8F = 18;
  qword_25DBB90 = 0;
  qword_25DBB98 = 0;
  unk_25DBBA0 = 0;
  byte_25DBBBF = 1;
  word_25DBBA8 = 32;
  qword_25DBBC0 = (uint64_t)operator new(0x20uLL);
  xmmword_25DBBC8 = xmmword_20B8890;
  strcpy((char *)qword_25DBBC0, "LeaveStop_Loc_Comma_Separator");
  byte_25DBBEF = 5;
  dword_25DBBD8 = -1028144608;
  word_25DBBDC = 160;
  byte_25DBC07 = 2;
  word_25DBBF0 = -24382;
  byte_25DBBF2 = 0;
  byte_25DBC1F = 4;
  dword_25DBC08 = 548913696;
  byte_25DBC0C = 0;
  byte_25DBC37 = 15;
  strcpy((char *)&qword_25DBC20 + 7, "\xB7 {/s:s}");
  strcpy((char *)&qword_25DBC20, "{s:s} ·");
  byte_25DBC4F = 6;
  strcpy((char *)&qword_25DBC38, "NoType");
  byte_25DBC67 = 14;
  strcpy((char *)&qword_25DBC50, "{WalkDistance}");
  strcpy(&byte_25DBC7F, "\n{OneMinute}");
  strcpy((char *)&qword_25DBC68, "{WalkTime}");
  byte_25DBC97 = 11;
  byte_25DBCAF = 14;
  strcpy((char *)&qword_25DBC98, "{StepDuration}");
  byte_25DBCC7 = 15;
  strcpy((char *)&qword_25DBCB0, "{TripFrequency}");
  byte_25DBCDF = 11;
  strcpy((char *)&qword_25DBCC8, "{BoardTime}");
  byte_25DBCF7 = 12;
  strcpy((char *)&qword_25DBCE0, "{AlightTime}");
  byte_25DBD0F = 21;
  strcpy((char *)&xmmword_25DBCF8, "{FutureTimestampList}");
  byte_25DBD27 = 15;
  strcpy((char *)&qword_25DBD10, "{DepartureTime}");
  byte_25DBD3F = 13;
  strcpy((char *)&qword_25DBD28, "{ArrivalTime}");
  byte_25DBD57 = 19;
  strcpy((char *)&xmmword_25DBD40, "{TotalWalkDistance}");
  byte_25DBD6F = 14;
  strcpy((char *)&qword_25DBD58, "{TripDuration}");
  byte_25DBD87 = 11;
  strcpy((char *)&qword_25DBD70, "{DayOfWeek}");
  byte_25DBD9F = 6;
  strcpy((char *)&dword_25DBD88, "{Date}");
  byte_25DBDB7 = 16;
  strcpy((char *)&xmmword_25DBDA0, "{OutTheDoorTime}");
  qword_25DBDB8 = (uint64_t)operator new(0x20uLL);
  unk_25DBDC0 = xmmword_20B91A0;
  strcpy((char *)qword_25DBDB8, "{FirstVehicleDepartureTime}");
  byte_25DBDE7 = 18;
  strcpy((char *)&xmmword_25DBDD0, "{RouteArrivalTime}");
  strcpy(&byte_25DBDFF, "\n{IC_Artwork}");
  strcpy((char *)&qword_25DBDE8, "{BaseFare}");
  byte_25DBE17 = 12;
  byte_25DBE2F = 11;
  strcpy((char *)&qword_25DBE18, "{RT_Symbol}");
  byte_25DBE47 = 12;
  strcpy((char *)&qword_25DBE30, "{TotalPrice}");
  byte_25DBE5F = 13;
  strcpy((char *)&qword_25DBE48, "{CheckInTime}");
  byte_25DBE77 = 19;
  strcpy((char *)&xmmword_25DBE60, "{LiveDepartureTime}");
  strcpy(&byte_25DBE8F, "\n{LegDuration}");
  strcpy((char *)&qword_25DBE78, "{TimeList}");
  byte_25DBEA7 = 13;
  byte_25DBEBF = 15;
  strcpy((char *)&qword_25DBEA8, "{CountdownList}");
  byte_25DBED7 = 3;
  byte_25DBEC2 = 125;
  word_25DBEC0 = 25723;
  byte_25DBEC3 = 0;
  strcpy(&byte_25DBEEF, "\t{AccessPointArt}");
  strcpy((char *)&qword_25DBED8, "{LineArt}");
  byte_25DBF07 = 16;
  byte_25DBF1F = 11;
  strcpy((char *)&qword_25DBF08, "{SystemArt}");
  strcpy(&byte_25DBF37, "\n{ServiceBeginTime}");
  strcpy((char *)&qword_25DBF20, "{CardName}");
  byte_25DBF4F = 18;
  byte_25DBF67 = 16;
  strcpy((char *)&xmmword_25DBF50, "{ServiceEndTime}");
  byte_25DBF7F = 6;
  strcpy((char *)&dword_25DBF68, "OnTime");
  byte_25DBF97 = 6;
  strcpy((char *)&dword_25DBF80, "Delays");
  byte_25DBFAF = 1;
  word_25DBF98 = 115;
  byte_25DBFC7 = 2;
  strcpy((char *)&word_25DBFB0, "cs");
  byte_25DBFDF = 1;
  word_25DBFC8 = 112;
  byte_25DBFF7 = 5;
  strcpy((char *)&qword_25DBFE0, "_Line");
  byte_25DC00F = 7;
  strcpy((char *)&qword_25DBFF8, "_System");
  strcpy(&byte_25DC027, "\n_VehicleNumber");
  strcpy((char *)&qword_25DC010, "_Direction");
  byte_25DC03F = 14;
  byte_25DC057 = 12;
  strcpy((char *)&qword_25DC040, "_To_Headsign");
  byte_25DC06F = 16;
  strcpy((char *)&xmmword_25DC058, "_Toward_Headsign");
  strcpy(&byte_25DC087, "\t_LineNumber");
  strcpy((char *)&qword_25DC070, "_Headsign");
  byte_25DC09F = 11;
  byte_25DC0B7 = 1;
  word_25DC0A0 = 65;
  byte_25DC0CF = 1;
  word_25DC0B8 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25DC160 = 0u;
  *(_OWORD *)&qword_25DC170 = 0u;
  dword_25DC180 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25DC160, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25DC160, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25DC160, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25DC160, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25DC0E7 = 8;
  strcpy((char *)&qword_25DC0D0, "any_mode");
  byte_25DC0FF = 7;
  strcpy((char *)&dword_25DC0E8, "cycling");
  byte_25DC117 = 7;
  strcpy((char *)&dword_25DC100, "driving");
  byte_25DC12F = 7;
  strcpy((char *)&dword_25DC118, "walking");
  qword_25DC130 = 0;
  unk_25DC138 = 0;
  qword_25DC140 = 0;
  uint64_t v0 = (char *)operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25DC130 = (uint64_t)v0;
  unk_25DC138 = v0 + 9;
  qword_25DC140 = (uint64_t)(v0 + 9);
  qword_25DC148 = 0;
  qword_25DC150 = 0;
  unk_25DC158 = 0;
  unint64_t v1 = (char *)operator new(9uLL);
  qword_25DC150 = (uint64_t)(v1 + 9);
  unk_25DC158 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)unint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25DC148 = (uint64_t)v1;
  return result;
}

void sub_98FC8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25DC170) {
    sub_20AD098((void **)qword_25DC170);
  }
  std::string::size_type v37 = (void *)xmmword_25DC160;
  *(void *)&xmmword_25DC160 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_98FD2C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = 0x7FFFFFFF;
  *(unsigned char *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = -1;
  *(_WORD *)(a2 + 40) = 0;
  HIBYTE(v12[2]) = 19;
  strcpy((char *)v12, "TransitInstructions");
  std::string __p = 0;
  char v10 = 0;
  uint64_t v11 = 0;
  int v3 = sub_374CDC(a1, (uint64_t)v12, (uint64_t *)&__p);
  char v4 = (void **)__p;
  if (__p)
  {
    int v5 = v10;
    long long v6 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v5 - 1) < 0) {
          operator delete(*(v5 - 3));
        }
        v5 -= 3;
      }
      while (v5 != v4);
      long long v6 = __p;
    }
    char v10 = v4;
    operator delete(v6);
  }
  if (SHIBYTE(v12[2]) < 0) {
    operator delete(v12[0]);
  }
  HIBYTE(v12[2]) = 10;
  strcpy((char *)v12, "countdowns");
  char v7 = (void *)sub_560F4(v3, (uint64_t)v12);
  if (SHIBYTE(v12[2]) < 0) {
    operator delete(v12[0]);
  }
  v12[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v12[1] = xmmword_20B91A0;
  strcpy(v12[0], "current_time_buffer_minutes");
  *(_DWORD *)a2 = 600 * sub_319F48(v7, (uint64_t)v12);
  if (SHIBYTE(v12[2]) < 0) {
    operator delete(v12[0]);
  }
  HIBYTE(v12[2]) = 5;
  strcpy((char *)v12, "steps");
  int v8 = (void *)sub_560F4(v3, (uint64_t)v12);
  if (SHIBYTE(v12[2]) < 0) {
    operator delete(v12[0]);
  }
  v12[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v12[1] = xmmword_20B93A0;
  strcpy(v12[0], "enable_inline_shields_in_board_step");
  *(unsigned char *)(a2 + 8) = sub_29D62C(v8, (uint64_t)v12);
  if (SHIBYTE(v12[2]) < 0) {
    operator delete(v12[0]);
  }
  v12[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v12[1] = xmmword_20B93A0;
  strcpy(v12[0], "multiple_departure_min_full_entries");
  *(void *)(a2 + 16) = sub_5C9BC(v8, (uint64_t)v12);
  if (SHIBYTE(v12[2]) < 0) {
    operator delete(v12[0]);
  }
  HIBYTE(v12[2]) = 21;
  strcpy((char *)v12, "always_add_card_affix");
  *(unsigned char *)(a2 + 24) = sub_29D62C(v8, (uint64_t)v12);
  if (SHIBYTE(v12[2]) < 0) {
    operator delete(v12[0]);
  }
  v12[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v12[1] = xmmword_20B93C0;
  strcpy(v12[0], "use_direction_name_only_min_headsign_num");
  *(void *)(a2 + 32) = sub_5C9BC(v8, (uint64_t)v12);
  if (SHIBYTE(v12[2]) < 0) {
    operator delete(v12[0]);
  }
  v12[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v12[1] = xmmword_20B8FD0;
  strcpy(v12[0], "use_has_direction_based_signage_flag");
  *(unsigned char *)(a2 + 40) = sub_29D62C(v8, (uint64_t)v12);
  if (SHIBYTE(v12[2]) < 0) {
    operator delete(v12[0]);
  }
  v12[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v12[1] = xmmword_20B8890;
  strcpy(v12[0], "use_realtime_platform_artwork");
  *(unsigned char *)(a2 + 41) = sub_29D62C(v8, (uint64_t)v12);
  if (SHIBYTE(v12[2]) < 0) {
    operator delete(v12[0]);
  }
}

void sub_9900F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_9901AC()
{
  unk_25DC19F = 16641;
  word_25DC188 = 65;
  byte_25DC1B7 = 1;
  byte_25DC1A1 = 0;
}

void sub_9901D4(void **a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 == v4 || (uint64_t v5 = *(void *)(v3 + 16), *(void *)(v3 + 8) != v5) && *(_DWORD *)(v5 - 5704) == 4)
  {
    long long v6 = *a1;
    std::string::size_type v25 = &v26;
    if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((v4 - v3) >> 3)) >= 2)
    {
      *(_OWORD *)uint64_t v29 = 0u;
      *(_OWORD *)std::string __p = 0u;
      int v31 = 1065353216;
      if (v3 == v4)
      {
        unint64_t v16 = v3;
      }
      else
      {
        do
        {
          uint64_t v7 = *(void *)(v3 + 8);
          uint64_t v8 = *(void *)(v3 + 16);
          if (v7 != v8)
          {
            while (*(_DWORD *)v7 != 2)
            {
              v7 += 5704;
              if (v7 == v8)
              {
                uint64_t v7 = *(void *)(v3 + 16);
                break;
              }
            }
          }
          if (!*(unsigned char *)(v7 + 792))
          {
            exception = __cxa_allocate_exception(8uLL);
            void *exception = &off_2439078;
          }
          unint64_t v9 = *(void *)(v7 + 752);
          uint64_t v10 = v6[9];
          if (0x66FD0EB66FD0EB67 * ((v6[10] - v10) >> 3) <= v9) {
            sub_66748();
          }
          uint64_t v11 = v10 + 696 * v9;
          uint64_t v12 = *(void **)(v11 + 672);
          for (uint64_t i = *(void **)(v11 + 680); v12 != i; v12 += 2)
          {
            v32[0] = v12;
            int v14 = sub_9906C0((uint64_t)v29, v12, (uint64_t)&unk_20F06E0, v32);
            ++*((_DWORD *)v14 + 6);
          }
          v3 += 104;
        }
        while (v3 != v4);
        long long v15 = __p[0];
        uint64_t v3 = *a2;
        unint64_t v16 = a2[1];
        if (__p[0])
        {
          unint64_t v17 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v16 - v3) >> 3);
          while (v17 != *((_DWORD *)v15 + 6))
          {
            long long v15 = *(void **)v15;
            if (!v15) {
              goto LABEL_24;
            }
          }
          uint64_t v18 = *((void *)v15 + 2);
LABEL_25:
          uint64_t v28 = v18;
          std::string::size_type v27 = &v28;
          v32[0] = &v25;
          v32[1] = v6;
          v32[2] = &v28;
          v32[3] = &v27;
          unint64_t v19 = 126 - 2 * __clz(v17);
          if (v16 == v3) {
            uint64_t v20 = 0;
          }
          else {
            uint64_t v20 = v19;
          }
          sub_9909EC(v3, v16, (uint64_t)v32, v20, 1);
          int64_t v21 = __p[0];
          if (__p[0])
          {
            do
            {
              uint64_t v22 = (void *)*v21;
              operator delete(v21);
              int64_t v21 = v22;
            }
            while (v22);
          }
          uint64_t v23 = v29[0];
          v29[0] = 0;
          if (v23) {
            operator delete(v23);
          }
          return;
        }
      }
      unint64_t v17 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v16 - v3) >> 3);
LABEL_24:
      uint64_t v18 = -1;
      goto LABEL_25;
    }
  }
}

void sub_990480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, void *__p)
{
  uint64_t v18 = __p;
  if (__p)
  {
    do
    {
      unint64_t v19 = (void *)*v18;
      operator delete(v18);
      uint64_t v18 = v19;
    }
    while (v19);
  }
  if (a15) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_9904C0(void **a1, unint64_t **a2)
{
  uint64_t v3 = *a2;
  unint64_t v2 = a2[1];
  if ((unint64_t)((char *)v2 - (char *)*a2) < 0x20) {
    return;
  }
  uint64_t v4 = *a1;
  *(_OWORD *)uint64_t v23 = 0u;
  *(_OWORD *)std::string __p = 0u;
  int v25 = 1065353216;
  if (v3 == v2)
  {
    unint64_t v12 = (unint64_t)v2;
    goto LABEL_15;
  }
  do
  {
    uint64_t v6 = v4[9];
    if (0x66FD0EB66FD0EB67 * ((v4[10] - v6) >> 3) <= *v3) {
      sub_66748();
    }
    uint64_t v7 = v6 + 696 * *v3;
    uint64_t v8 = *(void **)(v7 + 672);
    for (uint64_t i = *(void **)(v7 + 680); v8 != i; v8 += 2)
    {
      v26[0] = v8;
      uint64_t v10 = sub_9906C0((uint64_t)v23, v8, (uint64_t)&unk_20F06E0, v26);
      ++*((_DWORD *)v10 + 6);
    }
    v3 += 2;
  }
  while (v3 != v2);
  uint64_t v11 = __p[0];
  unint64_t v12 = (unint64_t)*a2;
  unint64_t v2 = a2[1];
  if (!__p[0])
  {
LABEL_15:
    unint64_t v13 = (uint64_t)((uint64_t)v2 - v12) >> 4;
LABEL_16:
    uint64_t v14 = -1;
    goto LABEL_17;
  }
  unint64_t v13 = (uint64_t)((uint64_t)v2 - v12) >> 4;
  while (v13 != *((_DWORD *)v11 + 6))
  {
    uint64_t v11 = *(void **)v11;
    if (!v11) {
      goto LABEL_16;
    }
  }
  uint64_t v14 = *((void *)v11 + 2);
LABEL_17:
  uint64_t v22 = v14;
  int64_t v21 = &v22;
  v26[0] = &v20;
  v26[1] = v4;
  void v26[2] = &v22;
  v26[3] = &v21;
  unint64_t v15 = 126 - 2 * __clz(v13);
  if (v2 == (unint64_t *)v12) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = v15;
  }
  sub_9935C4(v12, v2, (uint64_t)v26, v16, 1);
  unint64_t v17 = __p[0];
  if (__p[0])
  {
    do
    {
      uint64_t v18 = (void *)*v17;
      operator delete(v17);
      unint64_t v17 = v18;
    }
    while (v18);
  }
  unint64_t v19 = v23[0];
  v23[0] = 0;
  if (v19) {
    operator delete(v19);
  }
}

void sub_990684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *__p)
{
  uint64_t v16 = __p;
  if (__p)
  {
    do
    {
      unint64_t v17 = (void *)*v16;
      operator delete(v16);
      uint64_t v16 = v17;
    }
    while (v17);
  }
  if (a13) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

void *sub_9906C0(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void **)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = (void *)*v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v13 = v11[1];
            if (v13 == v7)
            {
              if (v11[2] == v7) {
                return v11;
              }
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            uint64_t v11 = (void *)*v11;
            if (!v11) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7) {
              return v11;
            }
          }
          else
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  unint64_t v15 = operator new(0x20uLL);
  *unint64_t v15 = 0;
  v15[1] = v7;
  v15[2] = **a4;
  *((_DWORD *)v15 + 6) = 0;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    uint64_t v18 = *(void *)a1;
    unint64_t v19 = *(void **)(*(void *)a1 + 8 * v4);
    if (v19)
    {
LABEL_26:
      *unint64_t v15 = *v19;
LABEL_61:
      void *v19 = v15;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v20 = 1;
    if (v8 >= 3) {
      BOOL v20 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v8);
    unint64_t v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22) {
      size_t prime = v22;
    }
    else {
      size_t prime = v21;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v8 = *(void *)(a1 + 8);
    }
    if (prime > v8) {
      goto LABEL_37;
    }
    if (prime < v8)
    {
      unint64_t v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        unint64_t v24 = std::__next_prime(v24);
      }
      else
      {
        uint64_t v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2) {
          unint64_t v24 = v26;
        }
      }
      if (prime <= v24) {
        size_t prime = v24;
      }
      if (prime < v8) {
LABEL_37:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v8 = *(void *)(a1 + 8);
    unint64_t v27 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
      {
        unint64_t v4 = v7 % v8;
        uint64_t v18 = *(void *)a1;
        unint64_t v19 = *(void **)(*(void *)a1 + 8 * (v7 % v8));
        if (v19) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v4 = v7;
        uint64_t v18 = *(void *)a1;
        unint64_t v19 = *(void **)(*(void *)a1 + 8 * v7);
        if (v19) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v4 = v27 & v7;
      uint64_t v18 = *(void *)a1;
      unint64_t v19 = *(void **)(*(void *)a1 + 8 * (v27 & v7));
      if (v19) {
        goto LABEL_26;
      }
    }
  }
  *unint64_t v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  *(void *)(v18 + 8 * v4) = a1 + 16;
  if (*v15)
  {
    unint64_t v28 = *(void *)(*v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v28 >= v8) {
        v28 %= v8;
      }
    }
    else
    {
      v28 &= v8 - 1;
    }
    unint64_t v19 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_9909D8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_9909EC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v8 = a3;
LABEL_2:
  uint64_t v249 = a2 - 104;
  unint64_t v10 = a1;
  while (1)
  {
    uint64_t v11 = v10;
    uint64_t v12 = a2 - v10;
    unint64_t v13 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(a2 - v10) >> 3);
    if (!(!v6 & v5))
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if (sub_9928B0(v8, *(void *)(a2 - 96), *(void *)(a2 - 88), *(void *)(v11 + 8), *(void *)(v11 + 16))) {
            sub_9930A0(v11, v249);
          }
          break;
        case 3uLL:
          sub_992C58(v11, v11 + 104, v249, v8);
          break;
        case 4uLL:
          sub_9934FC(v11, v11 + 104, v11 + 208, v249, v8);
          break;
        case 5uLL:
          sub_992B6C(v11, v11 + 104, v11 + 208, v11 + 312, v249, v8);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    uint64_t v251 = v11;
    if (v12 <= 2495) {
      break;
    }
    if (!a4)
    {
      if (v11 == a2) {
        return;
      }
      int64_t v95 = (v13 - 2) >> 1;
      int64_t v96 = v95;
      do
      {
        int64_t v97 = v96;
        if (v95 >= v96)
        {
          uint64_t v98 = (2 * v96) | 1;
          unsigned int v99 = (uint64_t *)(v251 + 104 * v98);
          if (2 * v96 + 2 < (uint64_t)v13)
          {
            BOOL v100 = sub_9928B0(v8, v99[1], v99[2], v99[14], v99[15]);
            v99 += 13 * v100;
            if (v100) {
              uint64_t v98 = 2 * v97 + 2;
            }
          }
          uint64_t v101 = v251 + 104 * v97;
          if (!sub_9928B0(v8, v99[1], v99[2], *(void *)(v101 + 8), *(void *)(v101 + 16)))
          {
            int v266 = *(_DWORD *)v101;
            *(_OWORD *)long long v267 = *(_OWORD *)(v101 + 8);
            uint64_t v102 = v251 + 104 * v97;
            *(void *)&v267[16] = *(void *)(v102 + 24);
            *(void *)(v101 + 8) = 0;
            *(void *)(v101 + 16) = 0;
            *(void *)(v101 + 24) = 0;
            long long v103 = *(_OWORD *)(v102 + 32);
            uint64_t v269 = *(void *)(v102 + 48);
            long long v268 = v103;
            *(void *)(v102 + 40) = 0;
            *(void *)(v102 + 48) = 0;
            *(void *)(v102 + 32) = 0;
            long long v104 = *(_OWORD *)(v102 + 56);
            uint64_t v271 = *(void *)(v102 + 72);
            long long v270 = v104;
            long long v272 = *(_OWORD *)(v102 + 80);
            v273[0] = *(void *)(v102 + 96);
            *(void *)(v102 + 80) = 0;
            *(void *)(v102 + 88) = 0;
            *(void *)(v102 + 96) = 0;
            do
            {
              uint64_t v105 = (uint64_t)v99;
              sub_9931E8(v101, (uint64_t)v99);
              if (v95 < v98) {
                break;
              }
              unsigned int v99 = (uint64_t *)(v251 + 104 * ((2 * v98) | 1));
              if (2 * v98 + 2 < (uint64_t)v13)
              {
                BOOL v106 = sub_9928B0(a3, v99[1], v99[2], v99[14], v99[15]);
                v99 += 13 * v106;
                uint64_t v98 = v106 ? 2 * v98 + 2 : (2 * v98) | 1;
              }
              else
              {
                uint64_t v98 = (2 * v98) | 1;
              }
              uint64_t v101 = v105;
            }
            while (!sub_9928B0(a3, v99[1], v99[2], *(uint64_t *)v267, *(uint64_t *)&v267[8]));
            sub_9931E8(v105, (uint64_t)&v266);
            uint64_t v107 = v272;
            if ((void)v272)
            {
              uint64_t v108 = *((void *)&v272 + 1);
              unint64_t v109 = (void *)v272;
              if (*((void *)&v272 + 1) != (void)v272)
              {
                do
                {
                  v108 -= 72;
                  sub_993404((uint64_t)v273, v108);
                }
                while (v108 != v107);
                unint64_t v109 = (void *)v272;
              }
              *((void *)&v272 + 1) = v107;
              operator delete(v109);
            }
            if (SHIBYTE(v269) < 0) {
              operator delete((void *)v268);
            }
            uint64_t v110 = *(void *)v267;
            uint64_t v8 = a3;
            if (*(void *)v267)
            {
              uint64_t v111 = *(void *)&v267[8];
              char v112 = *(void **)v267;
              if (*(void *)&v267[8] != *(void *)v267)
              {
                do
                  uint64_t v111 = sub_92A5D4(v111 - 5704);
                while (v111 != v110);
                char v112 = *(void **)v267;
              }
              *(void *)&v267[8] = v110;
              operator delete(v112);
            }
          }
        }
        int64_t v96 = v97 - 1;
      }
      while (v97);
      unint64_t v113 = v12 / 0x68uLL;
      uint64_t v114 = v251;
      uint64_t v244 = (long long *)(v251 + 32);
LABEL_192:
      int v257 = *(_DWORD *)v114;
      *(_OWORD *)std::string __p = *(_OWORD *)(v114 + 8);
      uint64_t v259 = *(void *)(v114 + 24);
      *(void *)(v251 + 16) = 0;
      *(void *)(v251 + 24) = 0;
      *(void *)(v251 + 8) = 0;
      uint64_t v115 = *(void *)(v251 + 48);
      long long v260 = *v244;
      uint64_t v261 = v115;
      *(void *)(v251 + 40) = 0;
      *(void *)(v251 + 48) = 0;
      *(void *)uint64_t v244 = 0;
      long long v116 = *(_OWORD *)(v251 + 56);
      uint64_t v263 = *(void *)(v251 + 72);
      long long v262 = v116;
      *(_OWORD *)uint64_t v264 = *(_OWORD *)(v114 + 80);
      uint64_t v265 = *(void *)(v114 + 96);
      *(void *)(v251 + 80) = 0;
      *(void *)(v251 + 88) = 0;
      int64_t v250 = v113;
      int64_t v247 = (v113 - 2) >> 1;
      uint64_t v117 = 0;
      uint64_t v118 = v114;
      *(void *)(v251 + 96) = 0;
      while (2)
      {
        uint64_t v119 = v118 + 104 * v117 + 104;
        uint64_t v254 = (2 * v117) | 1;
        uint64_t v120 = 2 * v117 + 2;
        if (v120 < v250)
        {
          BOOL v121 = sub_9928B0(a3, *(void *)(v118 + 104 * v117 + 112), *(void *)(v118 + 104 * v117 + 120), *(void *)(v118 + 104 * v117 + 216), *(void *)(v118 + 104 * v117 + 224));
          v119 += 104 * v121;
          uint64_t v122 = v254;
          if (v121) {
            uint64_t v122 = v120;
          }
          uint64_t v254 = v122;
        }
        *(_DWORD *)uint64_t v118 = *(_DWORD *)v119;
        uint64_t v123 = (void **)(v118 + 8);
        uint64_t v124 = *(void *)(v118 + 8);
        if (v124)
        {
          uint64_t v125 = *(void *)(v118 + 16);
          uint64_t v126 = *(void **)(v118 + 8);
          if (v125 != v124)
          {
            do
              uint64_t v125 = sub_92A5D4(v125 - 5704);
            while (v125 != v124);
            uint64_t v126 = *v123;
          }
          *(void *)(v118 + 16) = v124;
          operator delete(v126);
          *uint64_t v123 = 0;
          *(void *)(v118 + 16) = 0;
          *(void *)(v118 + 24) = 0;
        }
        *(_OWORD *)(v118 + 8) = *(_OWORD *)(v119 + 8);
        *(void *)(v118 + 24) = *(void *)(v119 + 24);
        *(void *)(v119 + 8) = 0;
        *(void *)(v119 + 16) = 0;
        *(void *)(v119 + 24) = 0;
        uint64_t v127 = (void **)(v118 + 32);
        if (*(char *)(v118 + 55) < 0) {
          operator delete(*v127);
        }
        long long v128 = *(_OWORD *)(v119 + 32);
        v246 = (long long *)(v119 + 32);
        *(void *)(v118 + 48) = *(void *)(v119 + 48);
        *(_OWORD *)uint64_t v127 = v128;
        *(unsigned char *)(v119 + 55) = 0;
        *(unsigned char *)(v119 + 32) = 0;
        uint64_t v129 = *(void *)(v119 + 72);
        uint64_t v131 = (void **)(v118 + 80);
        uint64_t v130 = *(void ***)(v118 + 80);
        *(_OWORD *)(v118 + 56) = *(_OWORD *)(v119 + 56);
        *(void *)(v118 + 72) = v129;
        if (v130)
        {
          uint64_t v132 = *(void ***)(v118 + 88);
          BOOL v133 = v130;
          if (v132 == v130)
          {
LABEL_193:
            *(void *)(v118 + 88) = v130;
            operator delete(v133);
            *uint64_t v131 = 0;
            *(void *)(v118 + 88) = 0;
            *(void *)(v118 + 96) = 0;
            goto LABEL_194;
          }
          while (2)
          {
            int64_t v134 = (void **)*(v132 - 3);
            if (v134)
            {
              uint64_t v135 = (void **)*(v132 - 2);
              uint64_t v136 = *(v132 - 3);
              if (v135 != v134)
              {
                std::string::size_type v137 = (void **)*(v132 - 2);
                do
                {
                  unint64_t v140 = (char *)*(v137 - 3);
                  v137 -= 3;
                  uint64_t v139 = v140;
                  if (v140)
                  {
                    unint64_t v141 = (char *)*(v135 - 2);
                    uint64_t v138 = v139;
                    if (v141 != v139)
                    {
                      do
                      {
                        int v142 = (void *)*((void *)v141 - 3);
                        if (v142)
                        {
                          *((void *)v141 - 2) = v142;
                          operator delete(v142);
                        }
                        v141 -= 32;
                      }
                      while (v141 != v139);
                      uint64_t v138 = *v137;
                    }
                    *(v135 - 2) = v139;
                    operator delete(v138);
                  }
                  uint64_t v135 = v137;
                }
                while (v137 != v134);
                uint64_t v136 = *(v132 - 3);
              }
              *(v132 - 2) = v134;
              operator delete(v136);
            }
            if (*((char *)v132 - 25) < 0)
            {
              operator delete(*(v132 - 6));
              size_t v143 = v132 - 9;
              if (*((char *)v132 - 49) < 0) {
                goto LABEL_229;
              }
            }
            else
            {
              size_t v143 = v132 - 9;
              if (*((char *)v132 - 49) < 0) {
LABEL_229:
              }
                operator delete(*v143);
            }
            uint64_t v132 = v143;
            if (v143 == v130)
            {
              BOOL v133 = *v131;
              goto LABEL_193;
            }
            continue;
          }
        }
LABEL_194:
        *(_OWORD *)(v118 + 80) = *(_OWORD *)(v119 + 80);
        *(void *)(v118 + 96) = *(void *)(v119 + 96);
        *(void *)(v119 + 80) = 0;
        *(void *)(v119 + 88) = 0;
        *(void *)(v119 + 96) = 0;
        uint64_t v118 = v119;
        uint64_t v114 = v251;
        uint64_t v117 = v254;
        if (v254 <= v247) {
          continue;
        }
        break;
      }
      uint64_t v144 = a2 - 104;
      BOOL v6 = v119 == a2 - 104;
      a2 -= 104;
      if (v6)
      {
        sub_9931E8(v119, (uint64_t)&v257);
        goto LABEL_301;
      }
      sub_9931E8(v119, v144);
      sub_9931E8(v144, (uint64_t)&v257);
      uint64_t v145 = v119 - v251 + 104;
      if (v145 < 105) {
        goto LABEL_301;
      }
      unint64_t v146 = (v145 / 0x68uLL - 2) >> 1;
      uint64_t v147 = v251 + 104 * v146;
      if (!sub_9928B0(a3, *(void *)(v147 + 8), *(void *)(v147 + 16), *(void *)(v119 + 8), *(void *)(v119 + 16))) {
        goto LABEL_301;
      }
      int v266 = *(_DWORD *)v119;
      *(_OWORD *)long long v267 = *(_OWORD *)(v119 + 8);
      *(void *)&v267[16] = *(void *)(v119 + 24);
      *(void *)(v119 + 8) = 0;
      *(void *)(v119 + 16) = 0;
      *(void *)(v119 + 24) = 0;
      long long v148 = *v246;
      uint64_t v269 = *(void *)(v119 + 48);
      long long v268 = v148;
      *(void *)(v119 + 40) = 0;
      *(void *)(v119 + 48) = 0;
      *(void *)v246 = 0;
      long long v149 = *(_OWORD *)(v119 + 56);
      uint64_t v271 = *(void *)(v119 + 72);
      long long v270 = v149;
      long long v272 = *(_OWORD *)(v119 + 80);
      v273[0] = *(void *)(v119 + 96);
      *(void *)(v119 + 80) = 0;
      *(void *)(v119 + 88) = 0;
      *(void *)(v119 + 96) = 0;
      while (1)
      {
        uint64_t v150 = v147;
        *(_DWORD *)uint64_t v119 = *(_DWORD *)v147;
        unint64_t v151 = (void **)(v119 + 8);
        uint64_t v152 = *(void *)(v119 + 8);
        if (v152)
        {
          uint64_t v153 = *(void *)(v119 + 16);
          uint64_t v154 = *(void **)(v119 + 8);
          if (v153 != v152)
          {
            do
              uint64_t v153 = sub_92A5D4(v153 - 5704);
            while (v153 != v152);
            uint64_t v154 = *v151;
          }
          *(void *)(v119 + 16) = v152;
          operator delete(v154);
          *unint64_t v151 = 0;
          *(void *)(v119 + 16) = 0;
          *(void *)(v119 + 24) = 0;
        }
        unint64_t v255 = v146;
        *(_OWORD *)(v119 + 8) = *(_OWORD *)(v147 + 8);
        *(void *)(v119 + 24) = *(void *)(v147 + 24);
        *(void *)(v147 + 8) = 0;
        *(void *)(v147 + 16) = 0;
        *(void *)(v147 + 24) = 0;
        unint64_t v155 = (void **)(v119 + 32);
        if (*(char *)(v119 + 55) < 0) {
          operator delete(*v155);
        }
        long long v156 = *(_OWORD *)(v147 + 32);
        *(void *)(v119 + 48) = *(void *)(v147 + 48);
        *(_OWORD *)unint64_t v155 = v156;
        *(unsigned char *)(v147 + 55) = 0;
        *(unsigned char *)(v147 + 32) = 0;
        uint64_t v157 = *(void *)(v147 + 72);
        uint64_t v159 = (void **)(v119 + 80);
        size_t v158 = *(void ***)(v119 + 80);
        *(_OWORD *)(v119 + 56) = *(_OWORD *)(v147 + 56);
        *(void *)(v119 + 72) = v157;
        if (!v158) {
          goto LABEL_267;
        }
        uint64_t v160 = *(void ***)(v119 + 88);
        uint64_t v161 = v158;
        if (v160 != v158) {
          break;
        }
LABEL_266:
        *(void *)(v119 + 88) = v158;
        operator delete(v161);
        *uint64_t v159 = 0;
        *(void *)(v119 + 88) = 0;
        *(void *)(v119 + 96) = 0;
LABEL_267:
        *(_OWORD *)(v119 + 80) = *(_OWORD *)(v150 + 80);
        *(void *)(v119 + 96) = *(void *)(v150 + 96);
        *(void *)(v150 + 80) = 0;
        *(void *)(v150 + 88) = 0;
        *(void *)(v150 + 96) = 0;
        if (v255)
        {
          unint64_t v146 = (v255 - 1) >> 1;
          uint64_t v147 = v114 + 104 * v146;
          uint64_t v119 = v150;
          if (sub_9928B0(a3, *(void *)(v147 + 8), *(void *)(v147 + 16), *(uint64_t *)v267, *(uint64_t *)&v267[8])) {
            continue;
          }
        }
        sub_9931E8(v150, (uint64_t)&v266);
        long long v172 = (void **)v272;
        if (!(void)v272)
        {
LABEL_294:
          if (SHIBYTE(v269) < 0) {
            operator delete((void *)v268);
          }
          uint64_t v185 = *(void *)v267;
          if (*(void *)v267)
          {
            uint64_t v186 = *(void *)&v267[8];
            BOOL v187 = *(void **)v267;
            if (*(void *)&v267[8] != *(void *)v267)
            {
              do
                uint64_t v186 = sub_92A5D4(v186 - 5704);
              while (v186 != v185);
              BOOL v187 = *(void **)v267;
            }
            *(void *)&v267[8] = v185;
            operator delete(v187);
          }
LABEL_301:
          uint64_t v188 = (void **)v264[0];
          if (!v264[0]) {
            goto LABEL_326;
          }
          int v189 = (void **)v264[1];
          size_t v190 = v264[0];
          if (v264[1] == v264[0])
          {
LABEL_325:
            v264[1] = v188;
            operator delete(v190);
LABEL_326:
            if (SHIBYTE(v261) < 0)
            {
              operator delete((void *)v260);
              uint64_t v201 = __p[0];
              uint64_t v202 = v250;
              if (!__p[0]) {
                goto LABEL_191;
              }
            }
            else
            {
              uint64_t v201 = __p[0];
              uint64_t v202 = v250;
              if (!__p[0]) {
                goto LABEL_191;
              }
            }
            long long v203 = __p[1];
            v204 = v201;
            if (__p[1] != v201)
            {
              do
                long long v203 = (void *)sub_92A5D4((uint64_t)v203 - 5704);
              while (v203 != v201);
              v204 = __p[0];
            }
            __p[1] = v201;
            operator delete(v204);
LABEL_191:
            unint64_t v113 = v202 - 1;
            if (v202 <= 2) {
              return;
            }
            goto LABEL_192;
          }
          while (1)
          {
            unint64_t v191 = (void **)*(v189 - 3);
            if (v191)
            {
              unint64_t v192 = (void **)*(v189 - 2);
              char v193 = *(v189 - 3);
              if (v192 != v191)
              {
                uint64_t v194 = (void **)*(v189 - 2);
                do
                {
                  unint64_t v196 = (char *)*(v194 - 3);
                  v194 -= 3;
                  uint64_t v195 = v196;
                  if (v196)
                  {
                    uint64_t v197 = (char *)*(v192 - 2);
                    BOOL v198 = v195;
                    if (v197 != v195)
                    {
                      do
                      {
                        unint64_t v199 = (void *)*((void *)v197 - 3);
                        if (v199)
                        {
                          *((void *)v197 - 2) = v199;
                          operator delete(v199);
                        }
                        v197 -= 32;
                      }
                      while (v197 != v195);
                      BOOL v198 = *v194;
                    }
                    *(v192 - 2) = v195;
                    operator delete(v198);
                  }
                  unint64_t v192 = v194;
                }
                while (v194 != v191);
                char v193 = *(v189 - 3);
              }
              *(v189 - 2) = v191;
              operator delete(v193);
            }
            if (*((char *)v189 - 25) < 0)
            {
              operator delete(*(v189 - 6));
              unint64_t v200 = v189 - 9;
              if (*((char *)v189 - 49) < 0) {
LABEL_324:
              }
                operator delete(*v200);
            }
            else
            {
              unint64_t v200 = v189 - 9;
              if (*((char *)v189 - 49) < 0) {
                goto LABEL_324;
              }
            }
            int v189 = v200;
            if (v200 == v188)
            {
              size_t v190 = v264[0];
              goto LABEL_325;
            }
          }
        }
        BOOL v173 = (void **)*((void *)&v272 + 1);
        uint64_t v174 = (void *)v272;
        if (*((void *)&v272 + 1) == (void)v272)
        {
LABEL_293:
          *((void *)&v272 + 1) = v172;
          operator delete(v174);
          goto LABEL_294;
        }
        while (1)
        {
          uint64_t v175 = (void **)*(v173 - 3);
          if (v175)
          {
            unint64_t v176 = (void **)*(v173 - 2);
            BOOL v177 = *(v173 - 3);
            if (v176 != v175)
            {
              int v178 = (void **)*(v173 - 2);
              do
              {
                unint64_t v180 = (char *)*(v178 - 3);
                v178 -= 3;
                size_t v179 = v180;
                if (v180)
                {
                  BOOL v181 = (char *)*(v176 - 2);
                  uint64_t v182 = v179;
                  if (v181 != v179)
                  {
                    do
                    {
                      uint64_t v183 = (void *)*((void *)v181 - 3);
                      if (v183)
                      {
                        *((void *)v181 - 2) = v183;
                        operator delete(v183);
                      }
                      v181 -= 32;
                    }
                    while (v181 != v179);
                    uint64_t v182 = *v178;
                  }
                  *(v176 - 2) = v179;
                  operator delete(v182);
                }
                unint64_t v176 = v178;
              }
              while (v178 != v175);
              BOOL v177 = *(v173 - 3);
            }
            *(v173 - 2) = v175;
            operator delete(v177);
          }
          if (*((char *)v173 - 25) < 0)
          {
            operator delete(*(v173 - 6));
            v184 = v173 - 9;
            if (*((char *)v173 - 49) < 0) {
LABEL_292:
            }
              operator delete(*v184);
          }
          else
          {
            v184 = v173 - 9;
            if (*((char *)v173 - 49) < 0) {
              goto LABEL_292;
            }
          }
          BOOL v173 = v184;
          if (v184 == v172)
          {
            uint64_t v174 = (void *)v272;
            goto LABEL_293;
          }
        }
      }
      while (1)
      {
        uint64_t v162 = (void **)*(v160 - 3);
        if (v162)
        {
          uint64_t v163 = (void **)*(v160 - 2);
          uint64_t v164 = *(v160 - 3);
          if (v163 != v162)
          {
            uint64_t v165 = (void **)*(v160 - 2);
            do
            {
              long long v168 = (char *)*(v165 - 3);
              v165 -= 3;
              BOOL v167 = v168;
              if (v168)
              {
                uint64_t v169 = (char *)*(v163 - 2);
                uint64_t v166 = v167;
                if (v169 != v167)
                {
                  do
                  {
                    int v170 = (void *)*((void *)v169 - 3);
                    if (v170)
                    {
                      *((void *)v169 - 2) = v170;
                      operator delete(v170);
                    }
                    v169 -= 32;
                  }
                  while (v169 != v167);
                  uint64_t v166 = *v165;
                }
                *(v163 - 2) = v167;
                operator delete(v166);
              }
              uint64_t v163 = v165;
            }
            while (v165 != v162);
            uint64_t v164 = *(v160 - 3);
            uint64_t v114 = v251;
          }
          *(v160 - 2) = v162;
          operator delete(v164);
        }
        if (*((char *)v160 - 25) < 0)
        {
          operator delete(*(v160 - 6));
          size_t v171 = v160 - 9;
          if (*((char *)v160 - 49) < 0) {
LABEL_265:
          }
            operator delete(*v171);
        }
        else
        {
          size_t v171 = v160 - 9;
          if (*((char *)v160 - 49) < 0) {
            goto LABEL_265;
          }
        }
        uint64_t v160 = v171;
        if (v171 == v158)
        {
          uint64_t v161 = *v159;
          goto LABEL_266;
        }
      }
    }
    uint64_t v14 = v11 + 104 * (v13 >> 1);
    if ((unint64_t)v12 >= 0x3401)
    {
      sub_992C58(v11, v11 + 104 * (v13 >> 1), v249, v8);
      uint64_t v15 = 104 * (v13 >> 1);
      sub_992C58(v11 + 104, v15 + v11 - 104, a2 - 208, v8);
      sub_992C58(v11 + 208, v11 + 104 + v15, a2 - 312, v8);
      sub_992C58(v15 + v11 - 104, v14, v11 + 104 + v15, v8);
      sub_9930A0(v11, v14);
      --a4;
      if (a5) {
        goto LABEL_13;
      }
LABEL_12:
      if (sub_9928B0(v8, *(void *)(v11 - 96), *(void *)(v11 - 88), *(void *)(v11 + 8), *(void *)(v11 + 16))) {
        goto LABEL_13;
      }
      int v266 = *(_DWORD *)v11;
      *(void *)long long v267 = *(void *)(v11 + 8);
      uint64_t v38 = *(void *)v267;
      long long v40 = *(_OWORD *)(v11 + 32);
      *(_OWORD *)&v267[8] = *(_OWORD *)(v11 + 16);
      uint64_t v39 = *(void *)&v267[8];
      *(void *)(v11 + 8) = 0;
      *(void *)(v11 + 16) = 0;
      *(void *)(v11 + 24) = 0;
      uint64_t v269 = *(void *)(v11 + 48);
      long long v268 = v40;
      *(void *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 32) = 0;
      long long v41 = *(_OWORD *)(v11 + 56);
      uint64_t v271 = *(void *)(v11 + 72);
      long long v270 = v41;
      long long v272 = *(_OWORD *)(v11 + 80);
      v273[0] = *(void *)(v11 + 96);
      *(void *)(v11 + 80) = 0;
      *(void *)(v11 + 88) = 0;
      *(void *)(v11 + 96) = 0;
      if (sub_9928B0(v8, v38, v39, *(void *)(a2 - 96), *(void *)(a2 - 88)))
      {
        unint64_t v10 = v11;
        do
        {
          BOOL v42 = sub_9928B0(v8, *(uint64_t *)v267, *(uint64_t *)&v267[8], *(void *)(v10 + 112), *(void *)(v10 + 120));
          v10 += 104;
        }
        while (!v42);
      }
      else
      {
        unint64_t v43 = v11 + 104;
        do
        {
          unint64_t v10 = v43;
          if (v43 >= a2) {
            break;
          }
          BOOL v44 = sub_9928B0(v8, *(uint64_t *)v267, *(uint64_t *)&v267[8], *(void *)(v43 + 8), *(void *)(v43 + 16));
          unint64_t v43 = v10 + 104;
        }
        while (!v44);
      }
      unint64_t v45 = a2;
      if (v10 < a2)
      {
        unint64_t v45 = a2;
        do
        {
          BOOL v46 = sub_9928B0(v8, *(uint64_t *)v267, *(uint64_t *)&v267[8], *(void *)(v45 - 96), *(void *)(v45 - 88));
          v45 -= 104;
        }
        while (v46);
      }
      while (v10 < v45)
      {
        sub_9930A0(v10, v45);
        do
        {
          BOOL v47 = sub_9928B0(v8, *(uint64_t *)v267, *(uint64_t *)&v267[8], *(void *)(v10 + 112), *(void *)(v10 + 120));
          v10 += 104;
        }
        while (!v47);
        do
        {
          BOOL v48 = sub_9928B0(v8, *(uint64_t *)v267, *(uint64_t *)&v267[8], *(void *)(v45 - 96), *(void *)(v45 - 88));
          v45 -= 104;
        }
        while (v48);
      }
      if (v10 - 104 != v11) {
        sub_9931E8(v11, v10 - 104);
      }
      sub_9931E8(v10 - 104, (uint64_t)&v266);
      uint64_t v49 = v272;
      if ((void)v272)
      {
        uint64_t v50 = *((void *)&v272 + 1);
        uint64_t v51 = (void *)v272;
        if (*((void *)&v272 + 1) != (void)v272)
        {
          do
          {
            v50 -= 72;
            sub_993404((uint64_t)v273, v50);
          }
          while (v50 != v49);
          uint64_t v51 = (void *)v272;
        }
        *((void *)&v272 + 1) = v49;
        operator delete(v51);
      }
      if (SHIBYTE(v269) < 0) {
        operator delete((void *)v268);
      }
      uint64_t v52 = *(void *)v267;
      if (*(void *)v267)
      {
        uint64_t v53 = *(void *)&v267[8];
        unsigned __int8 v54 = *(void **)v267;
        if (*(void *)&v267[8] != *(void *)v267)
        {
          do
            uint64_t v53 = sub_92A5D4(v53 - 5704);
          while (v53 != v52);
          unsigned __int8 v54 = *(void **)v267;
        }
        *(void *)&v267[8] = v52;
        operator delete(v54);
      }
      a5 = 0;
    }
    else
    {
      sub_992C58(v11 + 104 * (v13 >> 1), v11, v249, v8);
      --a4;
      if ((a5 & 1) == 0) {
        goto LABEL_12;
      }
LABEL_13:
      uint64_t v16 = 0;
      int v266 = *(_DWORD *)v11;
      *(_OWORD *)long long v267 = *(_OWORD *)(v11 + 8);
      *(void *)&v267[16] = *(void *)(v11 + 24);
      *(void *)(v11 + 16) = 0;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 8) = 0;
      uint64_t v17 = *(void *)(v11 + 48);
      long long v268 = *(_OWORD *)(v11 + 32);
      uint64_t v269 = v17;
      *(void *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 32) = 0;
      long long v18 = *(_OWORD *)(v11 + 56);
      uint64_t v271 = *(void *)(v11 + 72);
      long long v270 = v18;
      long long v19 = *(_OWORD *)(v11 + 80);
      v273[0] = *(void *)(v11 + 96);
      long long v272 = v19;
      *(void *)(v11 + 80) = 0;
      *(void *)(v11 + 88) = 0;
      *(void *)(v11 + 96) = 0;
      do
      {
        BOOL v20 = sub_9928B0(v8, *(void *)(v11 + v16 + 112), *(void *)(v11 + v16 + 120), *(uint64_t *)v267, *(uint64_t *)&v267[8]);
        v16 += 104;
      }
      while (v20);
      unint64_t v21 = v11 + v16;
      unint64_t v22 = a2;
      if (v16 == 104)
      {
        unint64_t v22 = a2;
        do
        {
          if (v21 >= v22) {
            break;
          }
          BOOL v24 = sub_9928B0(v8, *(void *)(v22 - 96), *(void *)(v22 - 88), *(uint64_t *)v267, *(uint64_t *)&v267[8]);
          v22 -= 104;
        }
        while (!v24);
      }
      else
      {
        do
        {
          BOOL v23 = sub_9928B0(v8, *(void *)(v22 - 96), *(void *)(v22 - 88), *(uint64_t *)v267, *(uint64_t *)&v267[8]);
          v22 -= 104;
        }
        while (!v23);
      }
      if (v21 >= v22)
      {
        uint64_t v29 = v21 - 104;
        uint64_t v30 = v251;
        if (v21 - 104 == v251) {
          goto LABEL_31;
        }
LABEL_30:
        sub_9931E8(v30, v29);
        goto LABEL_31;
      }
      unint64_t v25 = v21;
      unint64_t v26 = v22;
      do
      {
        sub_9930A0(v25, v26);
        do
        {
          BOOL v27 = sub_9928B0(v8, *(void *)(v25 + 112), *(void *)(v25 + 120), *(uint64_t *)v267, *(uint64_t *)&v267[8]);
          v25 += 104;
        }
        while (v27);
        do
        {
          BOOL v28 = sub_9928B0(v8, *(void *)(v26 - 96), *(void *)(v26 - 88), *(uint64_t *)v267, *(uint64_t *)&v267[8]);
          v26 -= 104;
        }
        while (!v28);
      }
      while (v25 < v26);
      uint64_t v29 = v25 - 104;
      uint64_t v30 = v251;
      if (v29 != v251) {
        goto LABEL_30;
      }
LABEL_31:
      sub_9931E8(v29, (uint64_t)&v266);
      uint64_t v31 = v272;
      if ((void)v272)
      {
        uint64_t v32 = *((void *)&v272 + 1);
        uint64_t v33 = (void *)v272;
        if (*((void *)&v272 + 1) != (void)v272)
        {
          do
          {
            v32 -= 72;
            sub_993404((uint64_t)v273, v32);
          }
          while (v32 != v31);
          uint64_t v33 = (void *)v272;
        }
        *((void *)&v272 + 1) = v31;
        operator delete(v33);
      }
      if (SHIBYTE(v269) < 0)
      {
        operator delete((void *)v268);
        unint64_t v34 = *(void **)v267;
        if (*(void *)v267) {
          goto LABEL_41;
        }
LABEL_38:
        a1 = v251;
        if (v21 < v22) {
          goto LABEL_47;
        }
LABEL_45:
        BOOL v37 = sub_992D68(a1, v29, v8);
        unint64_t v10 = v29 + 104;
        if (sub_992D68(v29 + 104, a2, v8))
        {
          a2 = v29;
          if (v37) {
            return;
          }
          goto LABEL_2;
        }
        if (!v37) {
          goto LABEL_47;
        }
      }
      else
      {
        unint64_t v34 = *(void **)v267;
        if (!*(void *)v267) {
          goto LABEL_38;
        }
LABEL_41:
        uint64_t v35 = *(void *)&v267[8];
        char v36 = v34;
        if (*(void **)&v267[8] != v34)
        {
          do
            uint64_t v35 = sub_92A5D4(v35 - 5704);
          while ((void *)v35 != v34);
          char v36 = *(void **)v267;
        }
        *(void *)&v267[8] = v34;
        operator delete(v36);
        a1 = v251;
        if (v21 >= v22) {
          goto LABEL_45;
        }
LABEL_47:
        sub_9909EC(a1, v29, v8, a4, a5 & 1);
        a5 = 0;
        unint64_t v10 = v29 + 104;
      }
    }
  }
  if ((a5 & 1) == 0)
  {
    if (v11 == a2) {
      return;
    }
    uint64_t v205 = (_DWORD *)(v11 + 104);
    if (v11 + 104 == a2) {
      return;
    }
    while (1)
    {
      int v206 = v205;
      if (sub_9928B0(v8, *(void *)(v11 + 112), *(void *)(v11 + 120), *(void *)(v11 + 8), *(void *)(v11 + 16))) {
        break;
      }
LABEL_337:
      uint64_t v205 = v206 + 26;
      uint64_t v11 = (uint64_t)v206;
      if (v206 + 26 == (_DWORD *)a2) {
        return;
      }
    }
    int v266 = *v206;
    *(void *)&v267[16] = 0;
    *(_OWORD *)long long v267 = 0uLL;
    *(_OWORD *)long long v267 = *(_OWORD *)(v11 + 112);
    *(void *)&v267[16] = *(void *)(v11 + 128);
    *(void *)(v11 + 112) = 0;
    *(void *)(v11 + 120) = 0;
    *(void *)(v11 + 128) = 0;
    long long v268 = *(_OWORD *)(v11 + 136);
    uint64_t v269 = *(void *)(v11 + 152);
    *(void *)(v11 + 136) = 0;
    *(void *)(v11 + 144) = 0;
    *(void *)(v11 + 152) = 0;
    long long v270 = *(_OWORD *)(v11 + 160);
    uint64_t v271 = *(void *)(v11 + 176);
    long long v272 = *(_OWORD *)(v11 + 184);
    v273[0] = *(void *)(v11 + 200);
    *(void *)(v11 + 184) = 0;
    *(void *)(v11 + 192) = 0;
    unint64_t v256 = v206;
    size_t v207 = v206;
    *(void *)(v11 + 200) = 0;
    while (1)
    {
      uint64_t v208 = v11;
      *size_t v207 = *(_DWORD *)v11;
      BOOL v209 = (void **)(v207 + 2);
      uint64_t v210 = *((void *)v207 + 1);
      if (v210)
      {
        uint64_t v211 = *((void *)v207 + 2);
        BOOL v212 = (void *)*((void *)v207 + 1);
        if (v211 != v210)
        {
          do
            uint64_t v211 = sub_92A5D4(v211 - 5704);
          while (v211 != v210);
          BOOL v212 = *v209;
        }
        *((void *)v207 + 2) = v210;
        operator delete(v212);
        *BOOL v209 = 0;
        *((void *)v207 + 2) = 0;
        *((void *)v207 + 3) = 0;
      }
      *(_OWORD *)(v207 + 2) = *(_OWORD *)(v11 + 8);
      *((void *)v207 + 3) = *(void *)(v11 + 24);
      *(void *)(v11 + 8) = 0;
      *(void *)(v11 + 16) = 0;
      *(void *)(v11 + 24) = 0;
      __n128 v213 = (void **)(v207 + 8);
      if (*((char *)v207 + 55) < 0) {
        operator delete(*v213);
      }
      *(_OWORD *)__n128 v213 = *(_OWORD *)(v11 + 32);
      *((void *)v207 + 6) = *(void *)(v11 + 48);
      *(unsigned char *)(v11 + 55) = 0;
      *(unsigned char *)(v11 + 32) = 0;
      int v214 = (void **)(v207 + 20);
      size_t v215 = (void **)*((void *)v207 + 10);
      *(_OWORD *)(v207 + 14) = *(_OWORD *)(v11 + 56);
      *((void *)v207 + 9) = *(void *)(v11 + 72);
      if (!v215) {
        goto LABEL_372;
      }
      unint64_t v216 = (void **)*((void *)v207 + 11);
      v217 = v215;
      if (v216 != v215) {
        break;
      }
LABEL_371:
      *((void *)v207 + 11) = v215;
      operator delete(v217);
      *int v214 = 0;
      *((void *)v207 + 11) = 0;
      *((void *)v207 + 12) = 0;
LABEL_372:
      *((_OWORD *)v207 + 5) = *(_OWORD *)(v208 + 80);
      *((void *)v207 + 12) = *(void *)(v208 + 96);
      *(void *)(v208 + 80) = 0;
      *(void *)(v208 + 88) = 0;
      *(void *)(v208 + 96) = 0;
      uint64_t v11 = v208 - 104;
      size_t v207 = (_DWORD *)v208;
      if (!sub_9928B0(a3, *(uint64_t *)v267, *(uint64_t *)&v267[8], *(void *)(v208 - 96), *(void *)(v208 - 88)))
      {
        sub_9931E8(v208, (uint64_t)&v266);
        BOOL v228 = (void **)v272;
        int v206 = v256;
        if (!(void)v272)
        {
LABEL_398:
          if (SHIBYTE(v269) < 0) {
            operator delete((void *)v268);
          }
          uint64_t v241 = *(void *)v267;
          uint64_t v8 = a3;
          if (*(void *)v267)
          {
            uint64_t v242 = *(void *)&v267[8];
            uint64_t v243 = *(void **)v267;
            if (*(void *)&v267[8] != *(void *)v267)
            {
              do
                uint64_t v242 = sub_92A5D4(v242 - 5704);
              while (v242 != v241);
              uint64_t v243 = *(void **)v267;
            }
            *(void *)&v267[8] = v241;
            operator delete(v243);
          }
          goto LABEL_337;
        }
        uint64_t v229 = (void **)*((void *)&v272 + 1);
        int v230 = (void *)v272;
        if (*((void *)&v272 + 1) == (void)v272)
        {
LABEL_397:
          *((void *)&v272 + 1) = v228;
          operator delete(v230);
          goto LABEL_398;
        }
        while (1)
        {
          size_t v231 = (void **)*(v229 - 3);
          if (v231)
          {
            int v232 = (void **)*(v229 - 2);
            size_t v233 = *(v229 - 3);
            if (v232 != v231)
            {
              unint64_t v234 = (void **)*(v229 - 2);
              do
              {
                unint64_t v237 = (char *)*(v234 - 3);
                v234 -= 3;
                __n128 v236 = v237;
                if (v237)
                {
                  unint64_t v238 = (char *)*(v232 - 2);
                  uint64_t v235 = v236;
                  if (v238 != v236)
                  {
                    do
                    {
                      unint64_t v239 = (void *)*((void *)v238 - 3);
                      if (v239)
                      {
                        *((void *)v238 - 2) = v239;
                        operator delete(v239);
                      }
                      v238 -= 32;
                    }
                    while (v238 != v236);
                    uint64_t v235 = *v234;
                  }
                  *(v232 - 2) = v236;
                  operator delete(v235);
                }
                int v232 = v234;
              }
              while (v234 != v231);
              size_t v233 = *(v229 - 3);
            }
            *(v229 - 2) = v231;
            operator delete(v233);
          }
          if (*((char *)v229 - 25) < 0)
          {
            operator delete(*(v229 - 6));
            BOOL v240 = v229 - 9;
            if (*((char *)v229 - 49) < 0) {
LABEL_395:
            }
              operator delete(*v240);
          }
          else
          {
            BOOL v240 = v229 - 9;
            if (*((char *)v229 - 49) < 0) {
              goto LABEL_395;
            }
          }
          uint64_t v229 = v240;
          if (v240 == v228)
          {
            int v230 = (void *)v272;
            goto LABEL_397;
          }
        }
      }
    }
    while (1)
    {
      uint64_t v218 = (void **)*(v216 - 3);
      if (v218)
      {
        uint64_t v219 = (void **)*(v216 - 2);
        BOOL v220 = *(v216 - 3);
        if (v219 != v218)
        {
          BOOL v221 = (void **)*(v216 - 2);
          do
          {
            unint64_t v224 = (char *)*(v221 - 3);
            v221 -= 3;
            size_t v223 = v224;
            if (v224)
            {
              unint64_t v225 = (char *)*(v219 - 2);
              int v222 = v223;
              if (v225 != v223)
              {
                do
                {
                  uint64_t v226 = (void *)*((void *)v225 - 3);
                  if (v226)
                  {
                    *((void *)v225 - 2) = v226;
                    operator delete(v226);
                  }
                  v225 -= 32;
                }
                while (v225 != v223);
                int v222 = *v221;
              }
              *(v219 - 2) = v223;
              operator delete(v222);
            }
            uint64_t v219 = v221;
          }
          while (v221 != v218);
          BOOL v220 = *(v216 - 3);
        }
        *(v216 - 2) = v218;
        operator delete(v220);
      }
      if (*((char *)v216 - 25) < 0)
      {
        operator delete(*(v216 - 6));
        uint64_t v227 = v216 - 9;
        if (*((char *)v216 - 49) < 0) {
LABEL_369:
        }
          operator delete(*v227);
      }
      else
      {
        uint64_t v227 = v216 - 9;
        if (*((char *)v216 - 49) < 0) {
          goto LABEL_369;
        }
      }
      unint64_t v216 = v227;
      if (v227 == v215)
      {
        v217 = *v214;
        goto LABEL_371;
      }
    }
  }
  if (v11 == a2) {
    return;
  }
  int v55 = (_DWORD *)(v11 + 104);
  if (v11 + 104 == a2) {
    return;
  }
  uint64_t v56 = (_DWORD *)v11;
  while (2)
  {
    uint64_t v57 = v55;
    if (!sub_9928B0(v8, *((void *)v56 + 14), *((void *)v56 + 15), *((void *)v56 + 1), *((void *)v56 + 2))) {
      goto LABEL_91;
    }
    int v266 = *v57;
    *(void *)&v267[16] = 0;
    *(_OWORD *)long long v267 = 0uLL;
    *(_OWORD *)long long v267 = *((_OWORD *)v56 + 7);
    *(void *)&v267[16] = *((void *)v56 + 16);
    *((void *)v56 + 14) = 0;
    *((void *)v56 + 15) = 0;
    *((void *)v56 + 16) = 0;
    long long v268 = *(_OWORD *)(v56 + 34);
    uint64_t v269 = *((void *)v56 + 19);
    *((void *)v56 + 17) = 0;
    *((void *)v56 + 18) = 0;
    *((void *)v56 + 19) = 0;
    long long v270 = *((_OWORD *)v56 + 10);
    uint64_t v271 = *((void *)v56 + 22);
    long long v272 = *(_OWORD *)(v56 + 46);
    v273[0] = *((void *)v56 + 25);
    *((void *)v56 + 23) = 0;
    *((void *)v56 + 24) = 0;
    size_t v253 = v57;
    std::string::size_type v58 = v57;
    *((void *)v56 + 25) = 0;
    while (2)
    {
      uint64_t v59 = (uint64_t)v56;
      std::string::size_type v60 = v56 + 2;
      _DWORD *v58 = *v56;
      char v61 = (void **)(v58 + 2);
      uint64_t v62 = *((void *)v58 + 1);
      if (v62)
      {
        uint64_t v63 = *((void *)v58 + 2);
        int64_t v64 = (void *)*((void *)v58 + 1);
        if (v63 != v62)
        {
          do
            uint64_t v63 = sub_92A5D4(v63 - 5704);
          while (v63 != v62);
          int64_t v64 = *v61;
        }
        *((void *)v58 + 2) = v62;
        operator delete(v64);
        *char v61 = 0;
        *((void *)v58 + 2) = 0;
        *((void *)v58 + 3) = 0;
      }
      *(_OWORD *)(v58 + 2) = *(_OWORD *)(v59 + 8);
      *((void *)v58 + 3) = *(void *)(v59 + 24);
      void *v60 = 0;
      v60[1] = 0;
      v60[2] = 0;
      int64_t v65 = (void **)(v58 + 8);
      if (*((char *)v58 + 55) < 0) {
        operator delete(*v65);
      }
      *(_OWORD *)int64_t v65 = *(_OWORD *)(v59 + 32);
      *((void *)v58 + 6) = *(void *)(v59 + 48);
      *(unsigned char *)(v59 + 55) = 0;
      *(unsigned char *)(v59 + 32) = 0;
      BOOL v66 = (void **)(v58 + 20);
      uint64_t v67 = (void **)*((void *)v58 + 10);
      *(_OWORD *)(v58 + 14) = *(_OWORD *)(v59 + 56);
      *((void *)v58 + 9) = *(void *)(v59 + 72);
      if (v67)
      {
        uint64_t v68 = (void **)*((void *)v58 + 11);
        std::string::size_type v69 = v67;
        if (v68 == v67)
        {
LABEL_125:
          *((void *)v58 + 11) = v67;
          operator delete(v69);
          std::string *v66 = 0;
          *((void *)v58 + 11) = 0;
          *((void *)v58 + 12) = 0;
          goto LABEL_126;
        }
        while (2)
        {
          uint64_t v70 = (void **)*(v68 - 3);
          if (v70)
          {
            std::string::size_type v71 = (void **)*(v68 - 2);
            int v72 = *(v68 - 3);
            if (v71 != v70)
            {
              int64_t v73 = (void **)*(v68 - 2);
              do
              {
                int v76 = (char *)*(v73 - 3);
                v73 -= 3;
                int64_t v75 = v76;
                if (v76)
                {
                  int64_t v77 = (char *)*(v71 - 2);
                  int64_t v74 = v75;
                  if (v77 != v75)
                  {
                    do
                    {
                      int64_t v78 = (void *)*((void *)v77 - 3);
                      if (v78)
                      {
                        *((void *)v77 - 2) = v78;
                        operator delete(v78);
                      }
                      v77 -= 32;
                    }
                    while (v77 != v75);
                    int64_t v74 = *v73;
                  }
                  *(v71 - 2) = v75;
                  operator delete(v74);
                }
                std::string::size_type v71 = v73;
              }
              while (v73 != v70);
              int v72 = *(v68 - 3);
              uint64_t v11 = v251;
            }
            *(v68 - 2) = v70;
            operator delete(v72);
          }
          if (*((char *)v68 - 25) < 0)
          {
            operator delete(*(v68 - 6));
            uint64_t v79 = v68 - 9;
            if (*((char *)v68 - 49) < 0) {
              goto LABEL_123;
            }
          }
          else
          {
            uint64_t v79 = v68 - 9;
            if (*((char *)v68 - 49) < 0) {
LABEL_123:
            }
              operator delete(*v79);
          }
          uint64_t v68 = v79;
          if (v79 == v67)
          {
            std::string::size_type v69 = *v66;
            goto LABEL_125;
          }
          continue;
        }
      }
LABEL_126:
      *((_OWORD *)v58 + 5) = *(_OWORD *)(v59 + 80);
      *((void *)v58 + 12) = *(void *)(v59 + 96);
      *(void *)(v59 + 80) = 0;
      *(void *)(v59 + 88) = 0;
      *(void *)(v59 + 96) = 0;
      if (v59 == v11)
      {
        sub_9931E8(v11, (uint64_t)&v266);
        int v80 = (void **)v272;
        uint64_t v57 = v253;
        if (!(void)v272) {
          goto LABEL_129;
        }
      }
      else
      {
        uint64_t v56 = (_DWORD *)(v59 - 104);
        std::string::size_type v58 = (_DWORD *)v59;
        if (sub_9928B0(a3, *(uint64_t *)v267, *(uint64_t *)&v267[8], *(void *)(v59 - 96), *(void *)(v59 - 88))) {
          continue;
        }
        sub_9931E8(v59, (uint64_t)&v266);
        int v80 = (void **)v272;
        uint64_t v57 = v253;
        if (!(void)v272)
        {
LABEL_129:
          if (SHIBYTE(v269) < 0) {
            goto LABEL_135;
          }
          goto LABEL_130;
        }
      }
      break;
    }
    BOOL v82 = (void **)*((void *)&v272 + 1);
    if (*((void ***)&v272 + 1) == v80)
    {
      *((void *)&v272 + 1) = v80;
      operator delete(v80);
      if (SHIBYTE(v269) < 0) {
        goto LABEL_135;
      }
LABEL_130:
      uint64_t v81 = *(void **)v267;
      uint64_t v8 = a3;
      if (*(void *)v267) {
        goto LABEL_136;
      }
      goto LABEL_91;
    }
    while (2)
    {
      unint64_t v85 = (void **)*(v82 - 3);
      if (v85)
      {
        unint64_t v86 = (void **)*(v82 - 2);
        unsigned int v87 = *(v82 - 3);
        if (v86 != v85)
        {
          uint64_t v88 = (void **)*(v82 - 2);
          do
          {
            unsigned int v91 = (char *)*(v88 - 3);
            v88 -= 3;
            uint64_t v90 = v91;
            if (v91)
            {
              uint64_t v92 = (char *)*(v86 - 2);
              uint64_t v89 = v90;
              if (v92 != v90)
              {
                do
                {
                  __n128 v93 = (void *)*((void *)v92 - 3);
                  if (v93)
                  {
                    *((void *)v92 - 2) = v93;
                    operator delete(v93);
                  }
                  v92 -= 32;
                }
                while (v92 != v90);
                uint64_t v89 = *v88;
              }
              *(v86 - 2) = v90;
              operator delete(v89);
            }
            unint64_t v86 = v88;
          }
          while (v88 != v85);
          unsigned int v87 = *(v82 - 3);
        }
        *(v82 - 2) = v85;
        operator delete(v87);
      }
      if (*((char *)v82 - 25) < 0)
      {
        operator delete(*(v82 - 6));
        unint64_t v94 = v82 - 9;
        if (*((char *)v82 - 49) < 0) {
          goto LABEL_158;
        }
      }
      else
      {
        unint64_t v94 = v82 - 9;
        if (*((char *)v82 - 49) < 0) {
LABEL_158:
        }
          operator delete(*v94);
      }
      BOOL v82 = v94;
      if (v94 != v80) {
        continue;
      }
      break;
    }
    *((void *)&v272 + 1) = v80;
    operator delete((void *)v272);
    if ((SHIBYTE(v269) & 0x80000000) == 0) {
      goto LABEL_130;
    }
LABEL_135:
    operator delete((void *)v268);
    uint64_t v81 = *(void **)v267;
    uint64_t v8 = a3;
    if (*(void *)v267)
    {
LABEL_136:
      uint64_t v83 = *(void *)&v267[8];
      __n128 v84 = v81;
      if (*(void **)&v267[8] != v81)
      {
        do
          uint64_t v83 = sub_92A5D4(v83 - 5704);
        while ((void *)v83 != v81);
        __n128 v84 = *(void **)v267;
      }
      *(void *)&v267[8] = v81;
      operator delete(v84);
    }
LABEL_91:
    int v55 = v57 + 26;
    uint64_t v56 = v57;
    if (v57 + 26 != (_DWORD *)a2) {
      continue;
    }
    break;
  }
}

void sub_992418(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42)
{
  uint64_t v45 = *(void *)(v43 - 112);
  if (v45)
  {
    uint64_t v47 = *(void *)(v43 - 104);
    BOOL v48 = *(void **)(v43 - 112);
    if (v47 != v45)
    {
      do
      {
        v47 -= 72;
        sub_993404(v42, v47);
      }
      while (v47 != v45);
      BOOL v48 = *(void **)(v43 - 112);
    }
    *(void *)(v43 - 104) = v45;
    operator delete(v48);
    if ((*(char *)(v43 - 137) & 0x80000000) == 0)
    {
LABEL_3:
      BOOL v46 = *(void **)(v43 - 184);
      if (!v46) {
        goto LABEL_14;
      }
      goto LABEL_10;
    }
  }
  else if ((*(char *)(v43 - 137) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v43 - 160));
  BOOL v46 = *(void **)(v43 - 184);
  if (!v46) {
    goto LABEL_14;
  }
LABEL_10:
  uint64_t v49 = *(void *)(v43 - 176);
  uint64_t v50 = v46;
  if ((void *)v49 != v46)
  {
    do
      uint64_t v49 = sub_92A5D4(v49 - 5704);
    while ((void *)v49 != v46);
    uint64_t v50 = *(void **)(v43 - 184);
  }
  *(void *)(v43 - 176) = v46;
  operator delete(v50);
LABEL_14:
  _Unwind_Resume(exception_object);
}

BOOL sub_9928B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2 != a3)
  {
    while (*(_DWORD *)a2 != 2)
    {
      a2 += 5704;
      if (a2 == a3)
      {
        a2 = a3;
        break;
      }
    }
  }
  if (!*(unsigned char *)(a2 + 792)) {
    goto LABEL_40;
  }
  if (a4 != a5)
  {
    while (*(_DWORD *)a4 != 2)
    {
      a4 += 5704;
      if (a4 == a5)
      {
        a4 = a5;
        break;
      }
    }
  }
  if (!*(unsigned char *)(a4 + 792))
  {
LABEL_40:
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  unint64_t v5 = *(void *)(a2 + 752);
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(v6 + 72);
  unint64_t v8 = 0x66FD0EB66FD0EB67 * ((*(void *)(v6 + 80) - v7) >> 3);
  if (v8 <= v5 || (unint64_t v9 = *(void *)(a4 + 752), v8 <= v9)) {
    sub_66748();
  }
  if (**(void **)(a1 + 16) == -1)
  {
    long long v19 = (uint64_t *)(v7 + 696 * v5);
    uint64_t v21 = *v19;
    uint64_t v20 = v19[1];
    if (v21 == v20) {
      return *(void *)(v7 + 696 * v5 + 48) < *(void *)(v7 + 696 * v9 + 48);
    }
    unint64_t v22 = (void *)(v7 + 696 * v9);
    uint64_t v23 = v22[1];
    if (*v22 == v23)
    {
      return *(void *)(v7 + 696 * v5 + 48) < *(void *)(v7 + 696 * v9 + 48);
    }
    else
    {
      unint64_t v26 = *(const UInt8 **)(v20 - 56);
      uint64_t v24 = v20 - 56;
      unint64_t v25 = v26;
      int v27 = *(char *)(v24 + 23);
      if (v27 >= 0) {
        BOOL v28 = (const UInt8 *)v24;
      }
      else {
        BOOL v28 = v25;
      }
      if (v27 >= 0) {
        CFIndex v29 = *(unsigned __int8 *)(v24 + 23);
      }
      else {
        CFIndex v29 = *(void *)(v24 + 8);
      }
      CFStringRef v30 = CFStringCreateWithBytesNoCopy(kCFAllocatorDefault, v28, v29, 0x8000100u, 0, kCFAllocatorNull);
      uint64_t v33 = *(const UInt8 **)(v23 - 56);
      uint64_t v32 = v23 - 56;
      uint64_t v31 = v33;
      int v34 = *(char *)(v32 + 23);
      if (v34 >= 0) {
        uint64_t v35 = (const UInt8 *)v32;
      }
      else {
        uint64_t v35 = v31;
      }
      if (v34 >= 0) {
        CFIndex v36 = *(unsigned __int8 *)(v32 + 23);
      }
      else {
        CFIndex v36 = *(void *)(v32 + 8);
      }
      CFStringRef v37 = CFStringCreateWithBytesNoCopy(kCFAllocatorDefault, v35, v36, 0x8000100u, 0, kCFAllocatorNull);
      CFComparisonResult v38 = CFStringCompare(v30, v37, 0x40uLL);
      CFRelease(v30);
      CFRelease(v37);
      return v38 == kCFCompareLessThan;
    }
  }
  else
  {
    uint64_t v10 = v7 + 696 * v5;
    uint64_t v11 = *(void **)(v10 + 672);
    uint64_t v12 = *(void **)(v10 + 680);
    unint64_t v13 = **(uint64_t ***)(a1 + 24);
    if (v11 != v12)
    {
      while (*v11 != *v13)
      {
        v11 += 2;
        if (v11 == v12)
        {
          uint64_t v11 = v12;
          break;
        }
      }
    }
    uint64_t v14 = v7 + 696 * v9;
    uint64_t v15 = *(void **)(v14 + 672);
    uint64_t v16 = *(void **)(v14 + 680);
    if (v15 != v16)
    {
      uint64_t v17 = *v13;
      while (*v15 != v17)
      {
        v15 += 2;
        if (v15 == v16)
        {
          uint64_t v15 = v16;
          return v11[1] < v15[1];
        }
      }
    }
    return v11[1] < v15[1];
  }
}

void sub_992B6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_9934FC(a1, a2, a3, a4, a6);
  if (sub_9928B0(a6, *(void *)(a5 + 8), *(void *)(a5 + 16), *(void *)(a4 + 8), *(void *)(a4 + 16)))
  {
    sub_9930A0(a4, a5);
    if (sub_9928B0(a6, *(void *)(a4 + 8), *(void *)(a4 + 16), *(void *)(a3 + 8), *(void *)(a3 + 16)))
    {
      sub_9930A0(a3, a4);
      if (sub_9928B0(a6, *(void *)(a3 + 8), *(void *)(a3 + 16), *(void *)(a2 + 8), *(void *)(a2 + 16)))
      {
        sub_9930A0(a2, a3);
        if (sub_9928B0(a6, *(void *)(a2 + 8), *(void *)(a2 + 16), *(void *)(a1 + 8), *(void *)(a1 + 16)))
        {
          sub_9930A0(a1, a2);
        }
      }
    }
  }
}

void sub_992C58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v8 = sub_9928B0(a4, *(void *)(a2 + 8), *(void *)(a2 + 16), *(void *)(a1 + 8), *(void *)(a1 + 16));
  BOOL v9 = sub_9928B0(a4, *(void *)(a3 + 8), *(void *)(a3 + 16), *(void *)(a2 + 8), *(void *)(a2 + 16));
  if (v8)
  {
    if (v9)
    {
      uint64_t v10 = a1;
      goto LABEL_11;
    }
    sub_9930A0(a1, a2);
    if (sub_9928B0(a4, *(void *)(a3 + 8), *(void *)(a3 + 16), *(void *)(a2 + 8), *(void *)(a2 + 16)))
    {
      uint64_t v10 = a2;
LABEL_11:
      uint64_t v11 = a3;
LABEL_8:
      sub_9930A0(v10, v11);
    }
  }
  else if (v9)
  {
    sub_9930A0(a2, a3);
    if (sub_9928B0(a4, *(void *)(a2 + 8), *(void *)(a2 + 16), *(void *)(a1 + 8), *(void *)(a1 + 16)))
    {
      uint64_t v10 = a1;
      uint64_t v11 = a2;
      goto LABEL_8;
    }
  }
}

BOOL sub_992D68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0x4EC4EC4EC4EC4EC5 * v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (!sub_9928B0(a3, *(void *)(a2 - 96), *(void *)(a2 - 88), *(void *)(a1 + 8), *(void *)(a1 + 16))) {
        return 1;
      }
      sub_9930A0(a1, a2 - 104);
      return 1;
    case 3:
      sub_992C58(a1, a1 + 104, a2 - 104, a3);
      return 1;
    case 4:
      sub_9934FC(a1, a1 + 104, a1 + 208, a2 - 104, a3);
      return 1;
    case 5:
      sub_992B6C(a1, a1 + 104, a1 + 208, a1 + 312, a2 - 104, a3);
      return 1;
    default:
      uint64_t v8 = a1 + 208;
      sub_992C58(a1, a1 + 104, a1 + 208, a3);
      uint64_t v9 = a1 + 312;
      if (a1 + 312 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    if (sub_9928B0(a3, *(void *)(v9 + 8), *(void *)(v9 + 16), *(void *)(v8 + 8), *(void *)(v8 + 16)))
    {
      int v20 = *(_DWORD *)v9;
      *(_OWORD *)std::string __p = *(_OWORD *)(v9 + 8);
      uint64_t v22 = *(void *)(v9 + 24);
      *(void *)(v9 + 16) = 0;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 8) = 0;
      long long v23 = *(_OWORD *)(v9 + 32);
      uint64_t v24 = *(void *)(v9 + 48);
      *(void *)(v9 + 32) = 0;
      *(void *)(v9 + 40) = 0;
      *(void *)(v9 + 48) = 0;
      long long v25 = *(_OWORD *)(v9 + 56);
      uint64_t v26 = *(void *)(v9 + 72);
      *(_OWORD *)int v27 = *(_OWORD *)(v9 + 80);
      uint64_t v28 = *(void *)(v9 + 96);
      *(void *)(v9 + 80) = 0;
      *(void *)(v9 + 88) = 0;
      uint64_t v12 = v10;
      *(void *)(v9 + 96) = 0;
      while (1)
      {
        uint64_t v13 = a1 + v12;
        sub_9931E8(a1 + v12 + 312, a1 + v12 + 208);
        if (v12 == -208) {
          break;
        }
        v12 -= 104;
        if (!sub_9928B0(a3, (uint64_t)__p[0], (uint64_t)__p[1], *(void *)(v13 + 112), *(void *)(v13 + 120)))
        {
          sub_9931E8(a1 + v12 + 312, (uint64_t)&v20);
          uint64_t v14 = (char *)v27[0];
          if (!v27[0]) {
            goto LABEL_14;
          }
LABEL_18:
          uint64_t v16 = (char *)v27[1];
          uint64_t v17 = v14;
          if (v27[1] != v14)
          {
            do
            {
              v16 -= 72;
              sub_993404((uint64_t)&v28, (uint64_t)v16);
            }
            while (v16 != v14);
            uint64_t v17 = (char *)v27[0];
          }
          v27[1] = v14;
          operator delete(v17);
          if (SHIBYTE(v24) < 0) {
            goto LABEL_22;
          }
LABEL_15:
          uint64_t v15 = __p[0];
          if (!__p[0]) {
            goto LABEL_7;
          }
          goto LABEL_23;
        }
      }
      sub_9931E8(a1, (uint64_t)&v20);
      uint64_t v14 = (char *)v27[0];
      if (v27[0]) {
        goto LABEL_18;
      }
LABEL_14:
      if ((SHIBYTE(v24) & 0x80000000) == 0) {
        goto LABEL_15;
      }
LABEL_22:
      operator delete((void *)v23);
      uint64_t v15 = __p[0];
      if (!__p[0]) {
        goto LABEL_7;
      }
LABEL_23:
      long long v18 = __p[1];
      long long v19 = v15;
      if (__p[1] != v15)
      {
        do
          long long v18 = (void *)sub_92A5D4((uint64_t)v18 - 5704);
        while (v18 != v15);
        long long v19 = __p[0];
      }
      __p[1] = v15;
      operator delete(v19);
LABEL_7:
      if (++v11 == 8) {
        return v9 + 104 == a2;
      }
    }
    uint64_t v8 = v9;
    v10 += 104;
    v9 += 104;
    if (v9 == a2) {
      return 1;
    }
  }
}

void sub_993074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_993330((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_9930A0(uint64_t a1, uint64_t a2)
{
  int v10 = *(_DWORD *)a1;
  *(_OWORD *)int v11 = *(_OWORD *)(a1 + 8);
  uint64_t v12 = *(void *)(a1 + 24);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  long long v3 = *(_OWORD *)(a1 + 32);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)uint64_t v13 = v3;
  uint64_t v14 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  long long v15 = *(_OWORD *)(a1 + 56);
  uint64_t v16 = *(void *)(a1 + 72);
  *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 80);
  uint64_t v18 = *(void *)(a1 + 96);
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  sub_9931E8(a1, a2);
  sub_9931E8(a2, (uint64_t)&v10);
  unint64_t v4 = (char *)__p[0];
  if (__p[0])
  {
    unint64_t v5 = (char *)__p[1];
    uint64_t v6 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        v5 -= 72;
        sub_993404((uint64_t)&v18, (uint64_t)v5);
      }
      while (v5 != v4);
      uint64_t v6 = __p[0];
    }
    __p[1] = v4;
    operator delete(v6);
  }
  if (SHIBYTE(v14) < 0)
  {
    operator delete(v13[0]);
    uint64_t v7 = v11[0];
    if (!v11[0]) {
      return;
    }
  }
  else
  {
    uint64_t v7 = v11[0];
    if (!v11[0]) {
      return;
    }
  }
  uint64_t v8 = v11[1];
  uint64_t v9 = v7;
  if (v11[1] != v7)
  {
    do
      uint64_t v8 = (void *)sub_92A5D4((uint64_t)v8 - 5704);
    while (v8 != v7);
    uint64_t v9 = v11[0];
  }
  v11[1] = v7;
  operator delete(v9);
}

uint64_t sub_9931E8(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (void *)(a2 + 8);
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v5 = a1 + 8;
  uint64_t v6 = *(void **)(a1 + 8);
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 16);
    uint64_t v8 = v6;
    if ((void *)v7 != v6)
    {
      do
        uint64_t v7 = sub_92A5D4(v7 - 5704);
      while ((void *)v7 != v6);
      uint64_t v8 = *(void **)v5;
    }
    *(void *)(a1 + 16) = v6;
    operator delete(v8);
    *(void *)uint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    *(void *)(v5 + 16) = 0;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *unint64_t v4 = 0;
  v4[1] = 0;
  v4[2] = 0;
  uint64_t v9 = (void **)(a1 + 32);
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*v9);
  }
  long long v10 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)uint64_t v9 = v10;
  *(unsigned char *)(a2 + 55) = 0;
  *(unsigned char *)(a2 + 32) = 0;
  uint64_t v11 = *(void *)(a2 + 72);
  uint64_t v12 = (void **)(a1 + 80);
  uint64_t v13 = *(void **)(a1 + 80);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = v11;
  if (v13)
  {
    uint64_t v14 = *(void *)(a1 + 88);
    long long v15 = v13;
    if ((void *)v14 != v13)
    {
      do
      {
        v14 -= 72;
        sub_993404(a1 + 96, v14);
      }
      while ((void *)v14 != v13);
      long long v15 = *v12;
    }
    *(void *)(a1 + 88) = v13;
    operator delete(v15);
    void *v12 = 0;
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 96) = 0;
  }
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  return a1;
}

uint64_t sub_993330(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 88);
    unint64_t v4 = *(void **)(a1 + 80);
    if (v3 != v2)
    {
      do
      {
        v3 -= 72;
        sub_993404(a1 + 96, v3);
      }
      while (v3 != v2);
      unint64_t v4 = *(void **)(a1 + 80);
    }
    *(void *)(a1 + 88) = v2;
    operator delete(v4);
  }
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    uint64_t v5 = *(void **)(a1 + 8);
    if (!v5) {
      return a1;
    }
  }
  else
  {
    uint64_t v5 = *(void **)(a1 + 8);
    if (!v5) {
      return a1;
    }
  }
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = v5;
  if ((void *)v7 != v5)
  {
    do
      uint64_t v7 = sub_92A5D4(v7 - 5704);
    while ((void *)v7 != v5);
    uint64_t v8 = *(void **)(a1 + 8);
  }
  *(void *)(a1 + 16) = v5;
  operator delete(v8);
  return a1;
}

void sub_993404(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void ***)(a2 + 48);
  if (v3)
  {
    unint64_t v4 = *(void ***)(a2 + 56);
    uint64_t v5 = *(void **)(a2 + 48);
    if (v4 != v3)
    {
      uint64_t v6 = *(void ***)(a2 + 56);
      do
      {
        uint64_t v9 = (char *)*(v6 - 3);
        v6 -= 3;
        uint64_t v8 = v9;
        if (v9)
        {
          long long v10 = (char *)*(v4 - 2);
          uint64_t v7 = v8;
          if (v10 != v8)
          {
            do
            {
              uint64_t v11 = (void *)*((void *)v10 - 3);
              if (v11)
              {
                *((void *)v10 - 2) = v11;
                operator delete(v11);
              }
              v10 -= 32;
            }
            while (v10 != v8);
            uint64_t v7 = *v6;
          }
          *(v4 - 2) = v8;
          operator delete(v7);
        }
        unint64_t v4 = v6;
      }
      while (v6 != v3);
      uint64_t v5 = *(void **)(a2 + 48);
    }
    *(void *)(a2 + 56) = v3;
    operator delete(v5);
  }
  if (*(char *)(a2 + 47) < 0)
  {
    operator delete(*(void **)(a2 + 24));
    if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
      return;
    }
  }
  else if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    return;
  }
  uint64_t v12 = *(void **)a2;

  operator delete(v12);
}

void sub_9934FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_992C58(a1, a2, a3, a5);
  if (sub_9928B0(a5, *(void *)(a4 + 8), *(void *)(a4 + 16), *(void *)(a3 + 8), *(void *)(a3 + 16)))
  {
    sub_9930A0(a3, a4);
    if (sub_9928B0(a5, *(void *)(a3 + 8), *(void *)(a3 + 16), *(void *)(a2 + 8), *(void *)(a2 + 16)))
    {
      sub_9930A0(a2, a3);
      if (sub_9928B0(a5, *(void *)(a2 + 8), *(void *)(a2 + 16), *(void *)(a1 + 8), *(void *)(a1 + 16)))
      {
        sub_9930A0(a1, a2);
      }
    }
  }
}

void sub_9935C4(unint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  while (2)
  {
    BOOL v100 = a2 - 2;
    unint64_t v11 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v11;
          uint64_t v12 = (uint64_t)a2 - v11;
          uint64_t v13 = (uint64_t)((uint64_t)a2 - v11) >> 4;
          if (v6 || !v5)
          {
            switch(v13)
            {
              case 0:
              case 1:
                return;
              case 2:
                unint64_t v43 = *(a2 - 2);
                uint64_t v42 = a2 - 2;
                if (sub_993F28(a3, v43, *(void *)a1))
                {
                  long long v107 = *(_OWORD *)a1;
                  unint64_t v44 = *v42;
                  *(unsigned char *)(a1 + 8) = *((unsigned char *)v42 + 8);
                  *(void *)a1 = v44;
                  *((unsigned char *)v42 + 8) = BYTE8(v107);
                  *uint64_t v42 = v107;
                }
                break;
              case 3:
                sub_994334((long long *)a1, (long long *)(a1 + 16), (uint64_t)v100, a3);
                break;
              case 4:
                uint64_t v45 = (unint64_t *)(a1 + 16);
                BOOL v46 = (unint64_t *)(a1 + 32);
                sub_994334((long long *)a1, (long long *)(a1 + 16), a1 + 32, a3);
                unint64_t v48 = *(a2 - 2);
                uint64_t v47 = a2 - 2;
                if (sub_993F28(a3, v48, *(void *)(a1 + 32)))
                {
                  long long v108 = *(_OWORD *)v46;
                  unint64_t v49 = *v47;
                  *(unsigned char *)(a1 + 40) = *((unsigned char *)v47 + 8);
                  *BOOL v46 = v49;
                  *((unsigned char *)v47 + 8) = BYTE8(v108);
                  unint64_t *v47 = v108;
                  if (sub_993F28(a3, *v46, *v45))
                  {
                    long long v109 = *(_OWORD *)v45;
                    *uint64_t v45 = *v46;
                    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a1 + 40);
                    *BOOL v46 = v109;
                    *(unsigned char *)(a1 + 40) = BYTE8(v109);
                    if (sub_993F28(a3, *(void *)(a1 + 16), *(void *)a1))
                    {
                      long long v110 = *(_OWORD *)a1;
                      *(void *)a1 = *v45;
                      *(unsigned char *)(a1 + 8) = *(unsigned char *)(a1 + 24);
                      *uint64_t v45 = v110;
                      *(unsigned char *)(a1 + 24) = BYTE8(v110);
                    }
                  }
                }
                break;
              case 5:
                sub_99413C(a1, a1 + 16, a1 + 32, (long long *)(a1 + 48), (uint64_t)v100, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v12 <= 383)
          {
            uint64_t v50 = (unint64_t *)(a1 + 16);
            BOOL v52 = (unint64_t *)a1 == a2 || v50 == a2;
            if (a5)
            {
              if (!v52)
              {
                uint64_t v53 = 0;
                unint64_t v54 = a1;
                do
                {
                  uint64_t v56 = v50;
                  if (sub_993F28(a3, *(void *)(v54 + 16), *(void *)v54))
                  {
                    unint64_t v57 = *v56;
                    char v58 = *(unsigned char *)(v54 + 24);
                    uint64_t v59 = v53;
                    do
                    {
                      uint64_t v60 = a1 + v59;
                      *(void *)(v60 + 16) = *(void *)(a1 + v59);
                      *(unsigned char *)(v60 + 24) = *(unsigned char *)(a1 + v59 + 8);
                      if (!v59)
                      {
                        uint64_t v55 = a1;
                        goto LABEL_74;
                      }
                      v59 -= 16;
                    }
                    while (sub_993F28(a3, v57, *(void *)(v60 - 16)));
                    uint64_t v55 = a1 + v59 + 16;
LABEL_74:
                    *(void *)uint64_t v55 = v57;
                    *(unsigned char *)(v55 + 8) = v58;
                  }
                  uint64_t v50 = v56 + 2;
                  v53 += 16;
                  unint64_t v54 = (unint64_t)v56;
                }
                while (v56 + 2 != a2);
              }
            }
            else if (!v52)
            {
              do
              {
                uint64_t v92 = v50;
                if (sub_993F28(a3, *(void *)(a1 + 16), *(void *)a1))
                {
                  unint64_t v93 = *v92;
                  uint64_t v94 = *(void *)(a1 + 24);
                  int64_t v95 = v92;
                  do
                  {
                    int64_t v96 = v95;
                    unint64_t v97 = *(v95 - 2);
                    v95 -= 2;
                    *int64_t v96 = v97;
                    *((unsigned char *)v96 + 8) = *((unsigned char *)v96 - 8);
                  }
                  while (sub_993F28(a3, v93, *(v96 - 4)));
                  unint64_t *v95 = v93;
                  *((unsigned char *)v95 + 8) = v94;
                }
                uint64_t v50 = v92 + 2;
                a1 = (unint64_t)v92;
              }
              while (v92 + 2 != a2);
            }
            return;
          }
          if (!a4)
          {
            if ((unint64_t *)a1 != a2)
            {
              unint64_t v98 = v12;
              int64_t v61 = (unint64_t)(v13 - 2) >> 1;
              int64_t v62 = v61;
              uint64_t v101 = a2;
              do
              {
                int64_t v63 = v62;
                if (v61 >= v62)
                {
                  uint64_t v64 = (2 * v62) | 1;
                  unint64_t v65 = a1 + 16 * v64;
                  uint64_t v66 = 2 * v62 + 2;
                  int64_t v103 = v62;
                  if (v66 < v13)
                  {
                    BOOL v67 = sub_993F28(a3, *(void *)v65, *(void *)(v65 + 16));
                    if (v67) {
                      v65 += 16;
                    }
                    a2 = v101;
                    int64_t v63 = v103;
                    if (v67) {
                      uint64_t v64 = v66;
                    }
                  }
                  unint64_t v68 = a1 + 16 * v63;
                  BOOL v69 = sub_993F28(a3, *(void *)v65, *(void *)v68);
                  int64_t v63 = v103;
                  if (!v69)
                  {
                    unint64_t v70 = *(void *)v68;
                    char v99 = *(unsigned char *)(v68 + 8);
                    do
                    {
                      unint64_t v71 = v68;
                      unint64_t v68 = v65;
                      unint64_t v72 = *(void *)v65;
                      *(unsigned char *)(v71 + 8) = *(unsigned char *)(v65 + 8);
                      *(void *)unint64_t v71 = v72;
                      if (v61 < v64) {
                        break;
                      }
                      uint64_t v73 = (2 * v64) | 1;
                      unint64_t v65 = a1 + 16 * v73;
                      uint64_t v74 = 2 * v64 + 2;
                      if (v74 < v13 && sub_993F28(a3, *(void *)v65, *(void *)(v65 + 16)))
                      {
                        v65 += 16;
                        uint64_t v73 = v74;
                      }
                      uint64_t v64 = v73;
                    }
                    while (!sub_993F28(a3, *(void *)v65, v70));
                    *(void *)unint64_t v68 = v70;
                    *(unsigned char *)(v68 + 8) = v99;
                    a2 = v101;
                    int64_t v63 = v103;
                  }
                }
                int64_t v62 = v63 - 1;
              }
              while (v63);
              uint64_t v75 = v98 >> 4;
              do
              {
                int64_t v77 = a2;
                uint64_t v78 = 0;
                long long v111 = *(_OWORD *)a1;
                unint64_t v79 = a1;
                do
                {
                  uint64_t v81 = v79 + 16 * v78 + 16;
                  uint64_t v82 = (2 * v78) | 1;
                  uint64_t v83 = 2 * v78 + 2;
                  if (v83 < v75 && sub_993F28(a3, *(void *)v81, *(void *)(v79 + 16 * v78 + 32)))
                  {
                    v81 += 16;
                    uint64_t v82 = v83;
                  }
                  unint64_t v80 = *(void *)v81;
                  *(unsigned char *)(v79 + 8) = *(unsigned char *)(v81 + 8);
                  *(void *)unint64_t v79 = v80;
                  unint64_t v79 = v81;
                  uint64_t v78 = v82;
                }
                while (v82 <= (uint64_t)((unint64_t)(v75 - 2) >> 1));
                a2 = v77 - 2;
                if ((unint64_t *)v81 == v77 - 2)
                {
                  *(unsigned char *)(v81 + 8) = BYTE8(v111);
                  *(void *)uint64_t v81 = v111;
                }
                else
                {
                  unint64_t v84 = *a2;
                  *(unsigned char *)(v81 + 8) = *((unsigned char *)v77 - 8);
                  *(void *)uint64_t v81 = v84;
                  *((unsigned char *)v77 - 8) = BYTE8(v111);
                  *a2 = v111;
                  uint64_t v85 = v81 - a1 + 16;
                  if (v85 >= 17)
                  {
                    unint64_t v86 = (((unint64_t)v85 >> 4) - 2) >> 1;
                    uint64_t v87 = a1 + 16 * v86;
                    if (sub_993F28(a3, *(void *)v87, *(void *)v81))
                    {
                      unint64_t v88 = *(void *)v81;
                      char v89 = *(unsigned char *)(v81 + 8);
                      do
                      {
                        uint64_t v90 = v81;
                        uint64_t v81 = v87;
                        unint64_t v91 = *(void *)v87;
                        *(unsigned char *)(v90 + 8) = *(unsigned char *)(v87 + 8);
                        *(void *)uint64_t v90 = v91;
                        if (!v86) {
                          break;
                        }
                        unint64_t v86 = (v86 - 1) >> 1;
                        uint64_t v87 = a1 + 16 * v86;
                      }
                      while (sub_993F28(a3, *(void *)v87, v88));
                      *(void *)uint64_t v81 = v88;
                      *(unsigned char *)(v81 + 8) = v89;
                      a2 = v77 - 2;
                    }
                  }
                }
              }
              while (v75-- > 2);
            }
            return;
          }
          unint64_t v14 = (unint64_t)v13 >> 1;
          unint64_t v15 = a1 + 16 * ((unint64_t)v13 >> 1);
          if ((unint64_t)v12 < 0x801) {
            break;
          }
          sub_994334((long long *)a1, (long long *)v15, (uint64_t)v100, a3);
          uint64_t v16 = 16 * v14;
          sub_994334((long long *)(a1 + 16), (long long *)(v16 + a1 - 16), (uint64_t)(a2 - 4), a3);
          sub_994334((long long *)(a1 + 32), (long long *)(a1 + 16 + v16), (uint64_t)(a2 - 6), a3);
          sub_994334((long long *)(v16 + a1 - 16), (long long *)v15, a1 + 16 + v16, a3);
          long long v104 = *(_OWORD *)a1;
          uint64_t v17 = *(void *)v15;
          *(unsigned char *)(a1 + 8) = *(unsigned char *)(v15 + 8);
          *(void *)a1 = v17;
          *(unsigned char *)(v15 + 8) = BYTE8(v104);
          *(void *)unint64_t v15 = v104;
          --a4;
          if (a5) {
            goto LABEL_11;
          }
LABEL_10:
          if (sub_993F28(a3, *(void *)(a1 - 16), *(void *)a1)) {
            goto LABEL_11;
          }
          unint64_t v33 = *(void *)a1;
          uint64_t v32 = *(void *)(a1 + 8);
          if (sub_993F28(a3, *(void *)a1, *v100))
          {
            unint64_t v11 = a1;
            do
            {
              unint64_t v34 = *(void *)(v11 + 16);
              v11 += 16;
            }
            while (!sub_993F28(a3, v33, v34));
          }
          else
          {
            unint64_t v35 = a1 + 16;
            do
            {
              unint64_t v11 = v35;
              if (v35 >= (unint64_t)a2) {
                break;
              }
              v35 += 16;
            }
            while (!sub_993F28(a3, v33, *(void *)v11));
          }
          CFIndex v36 = a2;
          if (v11 < (unint64_t)a2)
          {
            CFIndex v36 = a2;
            do
            {
              unint64_t v37 = *(v36 - 2);
              v36 -= 2;
            }
            while (sub_993F28(a3, v33, v37));
          }
          while (v11 < (unint64_t)v36)
          {
            long long v106 = *(_OWORD *)v11;
            unint64_t v38 = *v36;
            *(unsigned char *)(v11 + 8) = *((unsigned char *)v36 + 8);
            *(void *)unint64_t v11 = v38;
            *((unsigned char *)v36 + 8) = BYTE8(v106);
            *CFIndex v36 = v106;
            do
            {
              unint64_t v39 = *(void *)(v11 + 16);
              v11 += 16;
            }
            while (!sub_993F28(a3, v33, v39));
            do
            {
              unint64_t v40 = *(v36 - 2);
              v36 -= 2;
            }
            while (sub_993F28(a3, v33, v40));
          }
          BOOL v5 = v11 - 16 >= a1;
          BOOL v6 = v11 - 16 == a1;
          if (v11 - 16 != a1)
          {
            uint64_t v41 = *(void *)(v11 - 16);
            *(unsigned char *)(a1 + 8) = *(unsigned char *)(v11 - 8);
            *(void *)a1 = v41;
          }
          a5 = 0;
          *(void *)(v11 - 16) = v33;
          *(unsigned char *)(v11 - 8) = v32;
        }
        sub_994334((long long *)v15, (long long *)a1, (uint64_t)v100, a3);
        --a4;
        if ((a5 & 1) == 0) {
          goto LABEL_10;
        }
LABEL_11:
        uint64_t v18 = 0;
        unint64_t v20 = *(void *)a1;
        uint64_t v19 = *(void *)(a1 + 8);
        do
        {
          BOOL v21 = sub_993F28(a3, *(void *)(a1 + v18 + 16), v20);
          v18 += 16;
        }
        while (v21);
        unint64_t v22 = a1 + v18;
        long long v23 = a2;
        if (v18 == 16)
        {
          long long v23 = a2;
          do
          {
            if (v22 >= (unint64_t)v23) {
              break;
            }
            unint64_t v25 = *(v23 - 2);
            v23 -= 2;
          }
          while (!sub_993F28(a3, v25, v20));
        }
        else
        {
          do
          {
            unint64_t v24 = *(v23 - 2);
            v23 -= 2;
          }
          while (!sub_993F28(a3, v24, v20));
        }
        unint64_t v11 = a1 + v18;
        if (v22 < (unint64_t)v23)
        {
          unint64_t v26 = (unint64_t)v23;
          do
          {
            long long v105 = *(_OWORD *)v11;
            uint64_t v27 = *(void *)v26;
            *(unsigned char *)(v11 + 8) = *(unsigned char *)(v26 + 8);
            *(void *)unint64_t v11 = v27;
            *(unsigned char *)(v26 + 8) = BYTE8(v105);
            *(void *)unint64_t v26 = v105;
            do
            {
              unint64_t v28 = *(void *)(v11 + 16);
              v11 += 16;
            }
            while (sub_993F28(a3, v28, v20));
            do
            {
              unint64_t v29 = *(void *)(v26 - 16);
              v26 -= 16;
            }
            while (!sub_993F28(a3, v29, v20));
          }
          while (v11 < v26);
        }
        if (v11 - 16 != a1)
        {
          uint64_t v30 = *(void *)(v11 - 16);
          *(unsigned char *)(a1 + 8) = *(unsigned char *)(v11 - 8);
          *(void *)a1 = v30;
        }
        *(void *)(v11 - 16) = v20;
        *(unsigned char *)(v11 - 8) = v19;
        if (v22 >= (unint64_t)v23) {
          break;
        }
LABEL_30:
        sub_9935C4(a1, v11 - 16, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v31 = sub_9944A4(a1, v11 - 16, a3);
      if (sub_9944A4(v11, (uint64_t)a2, a3)) {
        break;
      }
      if (!v31) {
        goto LABEL_30;
      }
    }
    a2 = (unint64_t *)(v11 - 16);
    if (!v31) {
      continue;
    }
    break;
  }
}

BOOL sub_993F28(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(v3 + 72);
  unint64_t v5 = 0x66FD0EB66FD0EB67 * ((*(void *)(v3 + 80) - v4) >> 3);
  if (v5 <= a2 || v5 <= a3) {
    sub_66748();
  }
  if (**(void **)(a1 + 16) == -1)
  {
    unint64_t v15 = (uint64_t *)(v4 + 696 * a2);
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    if (v17 == v16) {
      return *(void *)(v4 + 696 * a2 + 48) < *(void *)(v4 + 696 * a3 + 48);
    }
    uint64_t v18 = (void *)(v4 + 696 * a3);
    uint64_t v19 = v18[1];
    if (*v18 == v19)
    {
      return *(void *)(v4 + 696 * a2 + 48) < *(void *)(v4 + 696 * a3 + 48);
    }
    else
    {
      unint64_t v22 = *(const UInt8 **)(v16 - 56);
      uint64_t v20 = v16 - 56;
      BOOL v21 = v22;
      int v23 = *(char *)(v20 + 23);
      if (v23 >= 0) {
        unint64_t v24 = (const UInt8 *)v20;
      }
      else {
        unint64_t v24 = v21;
      }
      if (v23 >= 0) {
        CFIndex v25 = *(unsigned __int8 *)(v20 + 23);
      }
      else {
        CFIndex v25 = *(void *)(v20 + 8);
      }
      CFStringRef v26 = CFStringCreateWithBytesNoCopy(kCFAllocatorDefault, v24, v25, 0x8000100u, 0, kCFAllocatorNull);
      unint64_t v29 = *(const UInt8 **)(v19 - 56);
      uint64_t v28 = v19 - 56;
      uint64_t v27 = v29;
      int v30 = *(char *)(v28 + 23);
      if (v30 >= 0) {
        BOOL v31 = (const UInt8 *)v28;
      }
      else {
        BOOL v31 = v27;
      }
      if (v30 >= 0) {
        CFIndex v32 = *(unsigned __int8 *)(v28 + 23);
      }
      else {
        CFIndex v32 = *(void *)(v28 + 8);
      }
      CFStringRef v33 = CFStringCreateWithBytesNoCopy(kCFAllocatorDefault, v31, v32, 0x8000100u, 0, kCFAllocatorNull);
      CFComparisonResult v34 = CFStringCompare(v26, v33, 0x40uLL);
      CFRelease(v26);
      CFRelease(v33);
      return v34 == kCFCompareLessThan;
    }
  }
  else
  {
    uint64_t v6 = v4 + 696 * a2;
    uint64_t v7 = *(void **)(v6 + 672);
    uint64_t v8 = *(void **)(v6 + 680);
    uint64_t v9 = **(uint64_t ***)(a1 + 24);
    if (v7 != v8)
    {
      while (*v7 != *v9)
      {
        v7 += 2;
        if (v7 == v8)
        {
          uint64_t v7 = v8;
          break;
        }
      }
    }
    uint64_t v10 = v4 + 696 * a3;
    unint64_t v11 = *(void **)(v10 + 672);
    uint64_t v12 = *(void **)(v10 + 680);
    if (v11 != v12)
    {
      uint64_t v13 = *v9;
      while (*v11 != v13)
      {
        v11 += 2;
        if (v11 == v12)
        {
          unint64_t v11 = v12;
          return v7[1] < v11[1];
        }
      }
    }
    return v7[1] < v11[1];
  }
}

__n128 sub_99413C(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, uint64_t a5, uint64_t a6)
{
  sub_994334((long long *)a1, (long long *)a2, a3, a6);
  if (sub_993F28(a6, *(void *)a4, *(void *)a3))
  {
    long long v20 = *(_OWORD *)a3;
    char v12 = *((unsigned char *)a4 + 8);
    *(void *)a3 = *(void *)a4;
    *(unsigned char *)(a3 + 8) = v12;
    *(void *)a4 = v20;
    *((unsigned char *)a4 + 8) = BYTE8(v20);
    if (sub_993F28(a6, *(void *)a3, *(void *)a2))
    {
      long long v21 = *(_OWORD *)a2;
      char v13 = *(unsigned char *)(a3 + 8);
      *(void *)a2 = *(void *)a3;
      *(unsigned char *)(a2 + 8) = v13;
      *(void *)a3 = v21;
      *(unsigned char *)(a3 + 8) = BYTE8(v21);
      if (sub_993F28(a6, *(void *)a2, *(void *)a1))
      {
        long long v22 = *(_OWORD *)a1;
        char v14 = *(unsigned char *)(a2 + 8);
        *(void *)a1 = *(void *)a2;
        *(unsigned char *)(a1 + 8) = v14;
        *(void *)a2 = v22;
        *(unsigned char *)(a2 + 8) = BYTE8(v22);
      }
    }
  }
  if (sub_993F28(a6, *(void *)a5, *(void *)a4))
  {
    long long v23 = *a4;
    char v16 = *(unsigned char *)(a5 + 8);
    *(void *)a4 = *(void *)a5;
    *((unsigned char *)a4 + 8) = v16;
    *(void *)a5 = v23;
    *(unsigned char *)(a5 + 8) = BYTE8(v23);
    if (sub_993F28(a6, *(void *)a4, *(void *)a3))
    {
      long long v24 = *(_OWORD *)a3;
      char v17 = *((unsigned char *)a4 + 8);
      *(void *)a3 = *(void *)a4;
      *(unsigned char *)(a3 + 8) = v17;
      *(void *)a4 = v24;
      *((unsigned char *)a4 + 8) = BYTE8(v24);
      if (sub_993F28(a6, *(void *)a3, *(void *)a2))
      {
        long long v25 = *(_OWORD *)a2;
        char v18 = *(unsigned char *)(a3 + 8);
        *(void *)a2 = *(void *)a3;
        *(unsigned char *)(a2 + 8) = v18;
        *(void *)a3 = v25;
        *(unsigned char *)(a3 + 8) = BYTE8(v25);
        if (sub_993F28(a6, *(void *)a2, *(void *)a1))
        {
          __n128 result = *(__n128 *)a1;
          long long v26 = *(_OWORD *)a1;
          char v19 = *(unsigned char *)(a2 + 8);
          *(void *)a1 = *(void *)a2;
          *(unsigned char *)(a1 + 8) = v19;
          *(void *)a2 = v26;
          *(unsigned char *)(a2 + 8) = BYTE8(v26);
        }
      }
    }
  }
  return result;
}

BOOL sub_994334(long long *a1, long long *a2, uint64_t a3, uint64_t a4)
{
  BOOL v8 = sub_993F28(a4, *(void *)a2, *(void *)a1);
  BOOL result = sub_993F28(a4, *(void *)a3, *(void *)a2);
  if (v8)
  {
    if (result)
    {
      long long v15 = *a1;
      char v10 = *(unsigned char *)(a3 + 8);
      *(void *)a1 = *(void *)a3;
      *((unsigned char *)a1 + 8) = v10;
LABEL_10:
      *(void *)a3 = v15;
      *(unsigned char *)(a3 + 8) = BYTE8(v15);
      return result;
    }
    long long v18 = *a1;
    char v13 = *((unsigned char *)a2 + 8);
    *(void *)a1 = *(void *)a2;
    *((unsigned char *)a1 + 8) = v13;
    *(void *)a2 = v18;
    *((unsigned char *)a2 + 8) = BYTE8(v18);
    BOOL result = sub_993F28(a4, *(void *)a3, *(void *)a2);
    if (result)
    {
      long long v15 = *a2;
      char v14 = *(unsigned char *)(a3 + 8);
      *(void *)a2 = *(void *)a3;
      *((unsigned char *)a2 + 8) = v14;
      goto LABEL_10;
    }
  }
  else if (result)
  {
    long long v16 = *a2;
    char v11 = *(unsigned char *)(a3 + 8);
    *(void *)a2 = *(void *)a3;
    *((unsigned char *)a2 + 8) = v11;
    *(void *)a3 = v16;
    *(unsigned char *)(a3 + 8) = BYTE8(v16);
    BOOL result = sub_993F28(a4, *(void *)a2, *(void *)a1);
    if (result)
    {
      long long v17 = *a1;
      char v12 = *((unsigned char *)a2 + 8);
      *(void *)a1 = *(void *)a2;
      *((unsigned char *)a1 + 8) = v12;
      *(void *)a2 = v17;
      *((unsigned char *)a2 + 8) = BYTE8(v17);
    }
  }
  return result;
}

BOOL sub_9944A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = a2 - 16;
      if (sub_993F28(a3, *(void *)(a2 - 16), *(void *)a1))
      {
        long long v23 = *(_OWORD *)a1;
        char v9 = *(unsigned char *)(v8 + 8);
        *(void *)a1 = *(void *)v8;
        *(unsigned char *)(a1 + 8) = v9;
        *(void *)uint64_t v8 = v23;
        *(unsigned char *)(v8 + 8) = BYTE8(v23);
      }
      return 1;
    case 3:
      sub_994334((long long *)a1, (long long *)(a1 + 16), a2 - 16, a3);
      return 1;
    case 4:
      long long v18 = (unint64_t *)(a1 + 16);
      char v19 = (unint64_t *)(a1 + 32);
      sub_994334((long long *)a1, (long long *)(a1 + 16), a1 + 32, a3);
      unint64_t v21 = *(void *)(a2 - 16);
      uint64_t v20 = a2 - 16;
      if (sub_993F28(a3, v21, *(void *)(a1 + 32)))
      {
        long long v24 = *(_OWORD *)v19;
        char v22 = *(unsigned char *)(v20 + 8);
        unint64_t *v19 = *(void *)v20;
        *(unsigned char *)(a1 + 40) = v22;
        *(void *)uint64_t v20 = v24;
        *(unsigned char *)(v20 + 8) = BYTE8(v24);
        if (sub_993F28(a3, *v19, *v18))
        {
          long long v25 = *(_OWORD *)v18;
          *long long v18 = *v19;
          *(unsigned char *)(a1 + 24) = *(unsigned char *)(a1 + 40);
          unint64_t *v19 = v25;
          *(unsigned char *)(a1 + 40) = BYTE8(v25);
          if (sub_993F28(a3, *(void *)(a1 + 16), *(void *)a1))
          {
            long long v26 = *(_OWORD *)a1;
            *(void *)a1 = *v18;
            *(unsigned char *)(a1 + 8) = *(unsigned char *)(a1 + 24);
            *long long v18 = v26;
            *(unsigned char *)(a1 + 24) = BYTE8(v26);
          }
        }
      }
      return 1;
    case 5:
      sub_99413C(a1, a1 + 16, a1 + 32, (long long *)(a1 + 48), a2 - 16, a3);
      return 1;
    default:
      char v10 = (unint64_t *)(a1 + 32);
      sub_994334((long long *)a1, (long long *)(a1 + 16), a1 + 32, a3);
      uint64_t v11 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (!sub_993F28(a3, *(void *)v11, *v10))
  {
LABEL_13:
    char v10 = (unint64_t *)v11;
    v12 += 16;
    v11 += 16;
    if (v11 == a2) {
      return 1;
    }
  }
  unint64_t v14 = *(void *)v11;
  char v15 = *(unsigned char *)(v11 + 8);
  uint64_t v16 = v12;
  do
  {
    uint64_t v17 = a1 + v16;
    *(void *)(v17 + 48) = *(void *)(a1 + v16 + 32);
    *(unsigned char *)(v17 + 56) = *(unsigned char *)(a1 + v16 + 40);
    if (v16 == -32)
    {
      *(void *)a1 = v14;
      *(unsigned char *)(a1 + 8) = v15;
      if (++v13 != 8) {
        goto LABEL_13;
      }
      return v11 + 16 == a2;
    }
    v16 -= 16;
  }
  while (sub_993F28(a3, v14, *(void *)(v17 + 16)));
  *(void *)(a1 + v16 + 48) = v14;
  *(unsigned char *)(a1 + v16 + 56) = v15;
  if (++v13 != 8) {
    goto LABEL_13;
  }
  return v11 + 16 == a2;
}

double sub_994770()
{
  byte_25DC1CF = 1;
  word_25DC1B8 = 65;
  byte_25DC1E7 = 1;
  word_25DC1D0 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25DC278 = 0u;
  *(_OWORD *)&qword_25DC288 = 0u;
  dword_25DC298 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25DC278, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25DC278, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25DC278, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25DC278, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25DC1FF = 8;
  strcpy((char *)&qword_25DC1E8, "any_mode");
  byte_25DC217 = 7;
  strcpy((char *)&dword_25DC200, "cycling");
  byte_25DC22F = 7;
  strcpy((char *)&dword_25DC218, "driving");
  byte_25DC247 = 7;
  strcpy((char *)&dword_25DC230, "walking");
  qword_25DC250 = 0;
  qword_25DC258 = 0;
  qword_25DC248 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25DC248 = (uint64_t)v0;
  qword_25DC250 = (uint64_t)(v0 + 9);
  qword_25DC258 = (uint64_t)(v0 + 9);
  qword_25DC260 = 0;
  qword_25DC268 = 0;
  unk_25DC270 = 0;
  unint64_t v1 = (char *)operator new(9uLL);
  qword_25DC268 = (uint64_t)(v1 + 9);
  unk_25DC270 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)unint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25DC260 = (uint64_t)v1;
  return result;
}

void sub_994A38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25DC288) {
    sub_20AD0DC((void **)qword_25DC288);
  }
  unint64_t v37 = (void *)xmmword_25DC278;
  *(void *)&xmmword_25DC278 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void *sub_994AD8@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  double result = sub_994B0C(a2, *a1);
  a2[1] = -1;
  a2[2] = -1;
  return result;
}

void *sub_994B0C(void *result, void *a2)
{
  uint64_t v2 = result;
  result[1] = 0;
  result[2] = 0;
  void *result = a2;
  if (*a2 == a2[1])
  {
    sub_994B0C(&v3);
    *((void *)&v3 + 1) = -1;
    v2[2] = -1;
    *(_OWORD *)uint64_t v2 = v3;
    return v2;
  }
  return result;
}

uint64_t sub_994B7C(uint64_t a1)
{
  sub_994B0C(&v15, *(void **)a1);
  uint64_t v2 = *(void **)a1;
  if (*(void *)a1 == (void)v15 && *(void *)(a1 + 8) == -1)
  {
    unint64_t v3 = *(void *)(a1 + 16);
    if (v3 == -1)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      sub_5E5C(&v15, "Iterated past end");
      int v14 = (void *)sub_2F404((uint64_t)exception, &v15);
    }
  }
  else
  {
    unint64_t v3 = *(void *)(a1 + 16);
  }
  if (v3 >= (uint64_t)(v2[1] - *v2) >> 5) {
    sub_66748();
  }
  char v4 = (uint64_t *)(*v2 + 32 * v3);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (*v4 == v6) {
    goto LABEL_21;
  }
  uint64_t v7 = v6 - v5;
  if (v6 - v5 == 104)
  {
    unint64_t v8 = 0;
  }
  else
  {
    uint64_t v9 = 0;
    while (*(_DWORD *)(v5 + v9))
    {
      v9 += 104;
      if (v5 + v9 == v6)
      {
        uint64_t v9 = v6 - v5;
        break;
      }
    }
    unint64_t v8 = 0x4EC4EC4EC4EC4EC5 * (v9 >> 3);
  }
  if (0x4EC4EC4EC4EC4EC5 * (v7 >> 3) <= v8) {
LABEL_21:
  }
    sub_66748();
  unint64_t v10 = *(void *)(a1 + 8) + 1;
  *(void *)(a1 + 8) = v10;
  if (v10 < 0xBC7FD20AC579B779 * ((uint64_t)(*(void *)(v5 + 104 * v8 + 16) - *(void *)(v5 + 104 * v8 + 8)) >> 3)) {
    return a1;
  }
  uint64_t v11 = *(void *)(v5 + 104 * v8 + 56);
  if (v11 != -1)
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = v11;
    return a1;
  }
  sub_994B0C(&v15, v2);
  *((void *)&v15 + 1) = -1;
  *(void *)(a1 + 16) = -1;
  *(_OWORD *)a1 = v15;
  return a1;
}

void sub_994D44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_994D74(void *a1, void *a2)
{
  return *a1 != *a2 || a1[1] != a2[1] || a1[2] != a2[2];
}

uint64_t sub_994DB0(unint64_t *a1)
{
  unint64_t v1 = a1[2];
  uint64_t v2 = *(void *)*a1;
  if (v1 >= (*(void *)(*a1 + 8) - v2) >> 5) {
    sub_66748();
  }
  unint64_t v3 = (uint64_t *)(v2 + 32 * v1);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (*v3 == v5) {
    goto LABEL_13;
  }
  uint64_t v6 = v5 - v4;
  if (v5 - v4 == 104)
  {
    unint64_t v7 = 0;
  }
  else
  {
    uint64_t v8 = 0;
    while (*(_DWORD *)(v4 + v8))
    {
      v8 += 104;
      if (v4 + v8 == v5)
      {
        uint64_t v8 = v5 - v4;
        break;
      }
    }
    unint64_t v7 = 0x4EC4EC4EC4EC4EC5 * (v8 >> 3);
  }
  if (0x4EC4EC4EC4EC4EC5 * (v6 >> 3) <= v7) {
LABEL_13:
  }
    sub_66748();
  uint64_t v9 = v4 + 104 * v7;
  uint64_t v10 = *(void *)(v9 + 8);
  unint64_t v11 = a1[1];
  if (0xBC7FD20AC579B779 * ((*(void *)(v9 + 16) - v10) >> 3) <= v11) {
    sub_66748();
  }
  return v10 + 5704 * v11;
}

void sub_994EAC(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_994F34((char *)__dst, (unsigned __int8 *)qword_25DC2A0, *(unsigned __int8 **)algn_25DC2A8, *a1, a1[1]);
  *(_OWORD *)a2 = *(_OWORD *)__dst;
  *(void *)(a2 + 16) = v4;
  __dst[1] = 0;
  uint64_t v4 = 0;
  __dst[0] = 0;
  if (v6 < 0)
  {
    operator delete(__p);
    if (SHIBYTE(v4) < 0) {
      operator delete(__dst[0]);
    }
  }
}

__n128 sub_994F34(char *__dst, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  if (a2 == a3 || a4 == a5)
  {
LABEL_3:
    result.n128_u64[0] = 0;
    *(_OWORD *)std::string __dst = 0u;
    *((_OWORD *)__dst + 1) = 0u;
    __dst[24] = 2;
    *((void *)__dst + 5) = 0;
    *((void *)__dst + 6) = 0;
    *((void *)__dst + 4) = 0;
    return result;
  }
LABEL_6:
  int v7 = *a2;
  uint64_t v8 = a4;
  while (*(unsigned __int8 *)(v8 + 24) != v7)
  {
    v8 += 56;
    if (v8 == a5)
    {
LABEL_5:
      if (++a2 == a3) {
        goto LABEL_3;
      }
      goto LABEL_6;
    }
  }
  if (v8 == a5) {
    goto LABEL_5;
  }
  if (*(char *)(v8 + 23) < 0)
  {
    sub_4200(__dst, *(void **)v8, *(void *)(v8 + 8));
    __dst[24] = *(unsigned char *)(v8 + 24);
    uint64_t v9 = __dst + 32;
    if ((*(char *)(v8 + 55) & 0x80000000) == 0) {
      goto LABEL_12;
    }
  }
  else
  {
    *(_OWORD *)std::string __dst = *(_OWORD *)v8;
    *((void *)__dst + 2) = *(void *)(v8 + 16);
    __dst[24] = v7;
    uint64_t v9 = __dst + 32;
    if ((*(char *)(v8 + 55) & 0x80000000) == 0)
    {
LABEL_12:
      __n128 result = *(__n128 *)(v8 + 32);
      *(__n128 *)uint64_t v9 = result;
      *((void *)v9 + 2) = *(void *)(v8 + 48);
      return result;
    }
  }
  sub_4200(v9, *(void **)(v8 + 32), *(void *)(v8 + 40));
  return result;
}

void sub_995028(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_995044(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_994F34((char *)__dst, (unsigned __int8 *)qword_25DC2B8, (unsigned __int8 *)qword_25DC2C0, *a1, a1[1]);
  *(_OWORD *)a2 = *(_OWORD *)__dst;
  *(void *)(a2 + 16) = v4;
  __dst[1] = 0;
  uint64_t v4 = 0;
  __dst[0] = 0;
  if (v6 < 0)
  {
    operator delete(__p);
    if (SHIBYTE(v4) < 0) {
      operator delete(__dst[0]);
    }
  }
}

double sub_9950CC@<D0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  *(void *)&double result = sub_994F34(a2, (unsigned __int8 *)qword_25DC330, (unsigned __int8 *)qword_25DC338, *a1, a1[1]).n128_u64[0];
  return result;
}

double sub_9950E4@<D0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  *(void *)&double result = sub_994F34(a2, (unsigned __int8 *)qword_25DC300, (unsigned __int8 *)qword_25DC308, *a1, a1[1]).n128_u64[0];
  return result;
}

double sub_9950FC@<D0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  *(void *)&double result = sub_994F34(a2, (unsigned __int8 *)qword_25DC318, (unsigned __int8 *)qword_25DC320, *a1, a1[1]).n128_u64[0];
  return result;
}

double sub_995114@<D0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  *(void *)&double result = sub_994F34(a2, (unsigned __int8 *)qword_25DC2D0, (unsigned __int8 *)qword_25DC2D8, *a1, a1[1]).n128_u64[0];
  return result;
}

double sub_99512C@<D0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  *(void *)&double result = sub_994F34(a2, (unsigned __int8 *)qword_25DC2E8, (unsigned __int8 *)qword_25DC2F0, *a1, a1[1]).n128_u64[0];
  return result;
}

double sub_995144@<D0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  *(void *)&double result = sub_994F34(a2, (unsigned __int8 *)qword_25DC2A0, *(unsigned __int8 **)algn_25DC2A8, *a1, a1[1]).n128_u64[0];
  return result;
}

void sub_99515C(int a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = *a2;
  if (*a2 != v4)
  {
    uint64_t v5 = *a2;
    while (*(unsigned __int8 *)(v5 + 24) != a1)
    {
      v5 += 56;
      if (v5 == v4) {
        goto LABEL_10;
      }
    }
  }
  if (v5 == v4)
  {
LABEL_10:
    sub_994F34((char *)__dst, (unsigned __int8 *)qword_25DC2A0, *(unsigned __int8 **)algn_25DC2A8, *a2, v4);
    *(_OWORD *)a3 = *(_OWORD *)__dst;
    *(void *)(a3 + 16) = v10;
    __dst[1] = 0;
    uint64_t v10 = 0;
    __dst[0] = 0;
    if (v12 < 0)
    {
      operator delete(__p);
      if (SHIBYTE(v10) < 0) {
        operator delete(__dst[0]);
      }
    }
  }
  else if (*(char *)(v5 + 23) < 0)
  {
    int v7 = *(void **)v5;
    unint64_t v8 = *(void *)(v5 + 8);
    sub_4200((unsigned char *)a3, v7, v8);
  }
  else
  {
    long long v6 = *(_OWORD *)v5;
    *(void *)(a3 + 16) = *(void *)(v5 + 16);
    *(_OWORD *)a3 = v6;
  }
}

uint64_t sub_995258()
{
  qword_25DC2A0 = 0;
  *(void *)algn_25DC2A8 = 0;
  qword_25DC2B0 = 0;
  uint64_t v0 = (char *)operator new(5uLL);
  *(_DWORD *)uint64_t v0 = 50331906;
  v0[4] = 4;
  qword_25DC2A0 = (uint64_t)v0;
  *(void *)algn_25DC2A8 = v0 + 5;
  qword_25DC2B0 = (uint64_t)(v0 + 5);
  qword_25DC2B8 = 0;
  qword_25DC2C0 = 0;
  unk_25DC2C8 = 0;
  uint64_t v1 = operator new(4uLL);
  qword_25DC2B8 = (uint64_t)v1;
  _DWORD *v1 = 50331906;
  qword_25DC2C0 = (uint64_t)(v1 + 1);
  unk_25DC2C8 = v1 + 1;
  qword_25DC2D8 = 0;
  qword_25DC2E0 = 0;
  qword_25DC2D0 = 0;
  uint64_t v2 = operator new(3uLL);
  *(_WORD *)uint64_t v2 = 258;
  v2[2] = 0;
  qword_25DC2D0 = (uint64_t)v2;
  qword_25DC2D8 = (uint64_t)(v2 + 3);
  qword_25DC2E0 = (uint64_t)(v2 + 3);
  qword_25DC2E8 = 0;
  qword_25DC2F0 = 0;
  unk_25DC2F8 = 0;
  unint64_t v3 = operator new(2uLL);
  qword_25DC2E8 = (uint64_t)v3;
  _WORD *v3 = 1;
  qword_25DC2F0 = (uint64_t)(v3 + 1);
  unk_25DC2F8 = v3 + 1;
  qword_25DC308 = 0;
  qword_25DC310 = 0;
  qword_25DC300 = 0;
  uint64_t v4 = operator new(5uLL);
  *(_DWORD *)uint64_t v4 = 50462976;
  v4[4] = 4;
  qword_25DC300 = (uint64_t)v4;
  qword_25DC308 = (uint64_t)(v4 + 5);
  qword_25DC310 = (uint64_t)(v4 + 5);
  qword_25DC318 = 0;
  qword_25DC320 = 0;
  qword_25DC328 = 0;
  uint64_t v5 = operator new(5uLL);
  *(_DWORD *)uint64_t v5 = 66051;
  v5[4] = 4;
  qword_25DC318 = (uint64_t)v5;
  qword_25DC320 = (uint64_t)(v5 + 5);
  qword_25DC328 = (uint64_t)(v5 + 5);
  qword_25DC330 = 0;
  qword_25DC338 = 0;
  unk_25DC340 = 0;
  long long v6 = operator new(4uLL);
  qword_25DC330 = (uint64_t)v6;
  *long long v6 = 50462976;
  uint64_t result = (uint64_t)(v6 + 1);
  qword_25DC338 = result;
  unk_25DC340 = result;
  return result;
}

void sub_995384(void *a1@<X1>, uint64_t *a2@<X2>, int a3@<W3>, int a4@<W4>, void *a5@<X8>)
{
  if (*a1 == a1[1])
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    return;
  }
  uint64_t v94 = 0;
  int64_t v95 = 0;
  int64_t v96 = 0;
  long long v91 = 0u;
  long long v92 = 0u;
  int v93 = 1065353216;
  size_t prime = std::__next_prime(0x89uLL);
  if (prime) {
    sub_B6C0((uint64_t)&v91, prime);
  }
  int v78 = a3;
  int64_t v77 = a2;
  uint64_t v10 = (void *)*a1;
  unint64_t v80 = (void *)a1[1];
  if ((void *)*a1 != v80)
  {
    unsigned int v79 = -1;
    while (1)
    {
      unint64_t v11 = v10 + 4;
      if (!sub_99A8A8(&v91, (uint64_t)(v10 + 4))) {
        break;
      }
LABEL_33:
      BOOL v31 = (void *)v10[5];
      int v30 = (void *)v10[6];
      while (v31 != v30)
      {
        unint64_t v33 = sub_1132F20((uint64_t)v31);
        unint64_t v34 = *((void *)&v91 + 1);
        if (*((void *)&v91 + 1))
        {
          unint64_t v35 = v33;
          uint8x8_t v36 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v91 + 8));
          v36.i16[0] = vaddlv_u8(v36);
          if (v36.u32[0] > 1uLL)
          {
            unint64_t v37 = v33;
            if (v33 >= *((void *)&v91 + 1)) {
              unint64_t v37 = v33 % *((void *)&v91 + 1);
            }
          }
          else
          {
            unint64_t v37 = (*((void *)&v91 + 1) - 1) & v33;
          }
          unint64_t v38 = *(void **)(v91 + 8 * v37);
          if (v38)
          {
            unint64_t v39 = (void *)*v38;
            if (*v38)
            {
              if (v36.u32[0] < 2uLL)
              {
                uint64_t v40 = *((void *)&v91 + 1) - 1;
                while (1)
                {
                  uint64_t v42 = v39[1];
                  if (v42 == v35)
                  {
                    if (sub_1132FD0((uint64_t)(v39 + 2), (uint64_t)v31)) {
                      goto LABEL_36;
                    }
                  }
                  else if ((v42 & v40) != v37)
                  {
                    goto LABEL_59;
                  }
                  unint64_t v39 = (void *)*v39;
                  if (!v39) {
                    goto LABEL_59;
                  }
                }
              }
              do
              {
                unint64_t v41 = v39[1];
                if (v41 == v35)
                {
                  if (sub_1132FD0((uint64_t)(v39 + 2), (uint64_t)v31)) {
                    goto LABEL_36;
                  }
                }
                else
                {
                  if (v41 >= v34) {
                    v41 %= v34;
                  }
                  if (v41 != v37) {
                    break;
                  }
                }
                unint64_t v39 = (void *)*v39;
              }
              while (v39);
            }
          }
        }
LABEL_59:
        sub_99A9E4((uint64_t)&v91, (uint64_t)v31, v31);
        unint64_t v43 = v95;
        if (v95 < v96)
        {
          *(void *)int64_t v95 = *v31;
          uint64_t v32 = (uint64_t)(v43 + 8);
        }
        else
        {
          unint64_t v44 = v94;
          uint64_t v45 = (v95 - v94) >> 3;
          unint64_t v46 = v45 + 1;
          if ((unint64_t)(v45 + 1) >> 61) {
            sub_2E00();
          }
          uint64_t v47 = v96 - v94;
          if ((v96 - v94) >> 2 > v46) {
            unint64_t v46 = v47 >> 2;
          }
          if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v48 = v46;
          }
          if (v48)
          {
            if (v48 >> 61) {
              sub_188D718();
            }
            unint64_t v49 = operator new(8 * v48);
            uint64_t v50 = &v49[8 * v45];
            *(void *)uint64_t v50 = *v31;
            uint64_t v32 = (uint64_t)(v50 + 8);
            if (v43 != v44)
            {
LABEL_69:
              unint64_t v51 = v43 - 8 - v44;
              if (v51 < 0x58) {
                goto LABEL_132;
              }
              if ((unint64_t)(v44 - v49) < 0x20) {
                goto LABEL_132;
              }
              uint64_t v52 = (v51 >> 3) + 1;
              uint64_t v53 = 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
              unint64_t v54 = &v43[-v53];
              v50 -= v53;
              uint64_t v55 = &v49[8 * v45 - 16];
              uint64_t v56 = v43 - 16;
              uint64_t v57 = v52 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v58 = *(_OWORD *)v56;
                *(v55 - 1) = *((_OWORD *)v56 - 1);
                *uint64_t v55 = v58;
                v55 -= 2;
                v56 -= 32;
                v57 -= 4;
              }
              while (v57);
              unint64_t v43 = v54;
              if (v52 != (v52 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_132:
                do
                {
                  uint64_t v59 = *((void *)v43 - 1);
                  v43 -= 8;
                  *((void *)v50 - 1) = v59;
                  v50 -= 8;
                }
                while (v43 != v44);
              }
              unint64_t v43 = v94;
              uint64_t v94 = v50;
              int64_t v95 = (char *)v32;
              int64_t v96 = &v49[8 * v48];
              if (!v43) {
                goto LABEL_35;
              }
LABEL_79:
              operator delete(v43);
              goto LABEL_35;
            }
          }
          else
          {
            unint64_t v49 = 0;
            uint64_t v50 = (char *)(8 * v45);
            *(void *)(8 * v45) = *v31;
            uint64_t v32 = 8 * v45 + 8;
            if (v43 != v44) {
              goto LABEL_69;
            }
          }
          uint64_t v94 = v50;
          int64_t v95 = (char *)v32;
          int64_t v96 = &v49[8 * v48];
          if (v43) {
            goto LABEL_79;
          }
        }
LABEL_35:
        int64_t v95 = (char *)v32;
LABEL_36:
        v31 += 4;
      }
      v10 += 8;
      if (v10 == v80) {
        goto LABEL_81;
      }
    }
    sub_99A9E4((uint64_t)&v91, (uint64_t)(v10 + 4), v10 + 4);
    char v12 = v95;
    if (v95 < v96)
    {
      *(void *)int64_t v95 = *v11;
      uint64_t v13 = (uint64_t)(v12 + 8);
      goto LABEL_31;
    }
    int v14 = v94;
    uint64_t v15 = (v95 - v94) >> 3;
    unint64_t v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61) {
      sub_2E00();
    }
    uint64_t v17 = v96 - v94;
    if ((v96 - v94) >> 2 > v16) {
      unint64_t v16 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 >> 61) {
        sub_188D718();
      }
      char v19 = operator new(8 * v18);
      uint64_t v20 = &v19[8 * v15];
      *(void *)uint64_t v20 = *v11;
      uint64_t v13 = (uint64_t)(v20 + 8);
      if (v12 != v14)
      {
LABEL_20:
        unint64_t v21 = v12 - 8 - v14;
        if (v21 < 0x58) {
          goto LABEL_133;
        }
        if ((unint64_t)(v14 - v19) < 0x20) {
          goto LABEL_133;
        }
        uint64_t v22 = (v21 >> 3) + 1;
        uint64_t v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
        long long v24 = &v12[-v23];
        v20 -= v23;
        long long v25 = &v19[8 * v15 - 16];
        long long v26 = v12 - 16;
        uint64_t v27 = v22 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *long long v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        char v12 = v24;
        if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_133:
          do
          {
            uint64_t v29 = *((void *)v12 - 1);
            v12 -= 8;
            *((void *)v20 - 1) = v29;
            v20 -= 8;
          }
          while (v12 != v14);
        }
        char v12 = v94;
        uint64_t v94 = v20;
        int64_t v95 = (char *)v13;
        int64_t v96 = &v19[8 * v18];
        if (!v12) {
          goto LABEL_31;
        }
LABEL_30:
        operator delete(v12);
LABEL_31:
        int64_t v95 = (char *)v13;
        if (v79 == -1) {
          unsigned int v79 = ((unint64_t)(v13 - (void)v94) >> 3) - 1;
        }
        goto LABEL_33;
      }
    }
    else
    {
      char v19 = 0;
      uint64_t v20 = (char *)(8 * v15);
      *(void *)(8 * v15) = *v11;
      uint64_t v13 = 8 * v15 + 8;
      if (v12 != v14) {
        goto LABEL_20;
      }
    }
    uint64_t v94 = v20;
    int64_t v95 = (char *)v13;
    int64_t v96 = &v19[8 * v18];
    if (!v12) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  unsigned int v79 = -1;
LABEL_81:
  if (v94 == v95)
  {
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)&v85);
      sub_188FC78(&v85, (uint64_t)"Couldn't find any valid text references in the input vector", 59);
      std::stringbuf::str();
      sub_7246C((uint64_t *)v97, 3u);
      if (v99 < 0) {
        operator delete(v97[0]);
      }
      if (v90 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    BOOL v67 = (void *)v92;
    if (!(void)v92) {
      goto LABEL_110;
    }
    goto LABEL_109;
  }
  int v81 = 50331648;
  uint64_t v82 = 0;
  int v60 = v79;
  if (!v78) {
    int v60 = -1;
  }
  int v83 = 14;
  int v84 = v60;
  uint64_t v61 = sub_656AC();
  int64_t v62 = a5;
  int64_t v63 = (void (__cdecl **)(std::stringbuf *__hidden))v77[1];
  uint64_t v64 = ((uint64_t)v63 - *v77) >> 2;
  uint64_t v85 = *v77;
  unint64_t v86 = v63;
  int v87 = 4;
  uint64_t v88 = v64;
  v97[0] = v94;
  v97[1] = v95;
  int v98 = 2;
  uint64_t v100 = (v95 - v94) >> 3;
  unint64_t v65 = (*(uint64_t (**)(uint64_t, uint64_t *, void **, int *))(*(void *)v61 + 48))(v61, &v85, v97, &v81);
  uint64_t v85 = sub_1133328();
  if (HIDWORD(v65))
  {
    if (!a4 || (v79 & 0x80000000) != 0)
    {
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
      BOOL v67 = (void *)v92;
      if (!(void)v92) {
        goto LABEL_110;
      }
      goto LABEL_109;
    }
    if (v79 >= (unint64_t)((v95 - v94) >> 3)) {
      sub_66748();
    }
    uint64_t v66 = (uint64_t *)&v94[8 * v79];
  }
  else
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F6A40, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_24F6A40))
    {
      qword_24F6A38 = sub_1133328();
      __cxa_guard_release(&qword_24F6A40);
      int64_t v62 = a5;
    }
    uint64_t v66 = &qword_24F6A38;
    if ((v65 & 0x80000000) == 0 && (int)v65 < (int)((unint64_t)(v95 - v94) >> 3)) {
      uint64_t v66 = (uint64_t *)&v94[8 * v65];
    }
  }
  uint64_t v85 = *v66;
  uint64_t v68 = sub_1132F04(&v85);
  size_t v69 = *(void *)(v68 + 8);
  if (v69 >= 8) {
    unint64_t v70 = (const void *)(v68 + 16);
  }
  else {
    unint64_t v70 = (const void *)v68;
  }
  if (v69 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v69 >= 0x17)
  {
    uint64_t v73 = (v69 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v69 | 7) != 0x17) {
      uint64_t v73 = v69 | 7;
    }
    uint64_t v74 = v73 + 1;
    uint64_t v75 = operator new(v73 + 1);
    v62[1] = v69;
    v62[2] = v74 | 0x8000000000000000;
    *int64_t v62 = v75;
    int64_t v62 = v75;
LABEL_118:
    memcpy(v62, v70, v69);
    *((unsigned char *)v62 + v69) = 0;
    BOOL v67 = (void *)v92;
    if (!(void)v92) {
      goto LABEL_110;
    }
    do
    {
LABEL_109:
      unint64_t v71 = (void *)*v67;
      operator delete(v67);
      BOOL v67 = v71;
    }
    while (v71);
    goto LABEL_110;
  }
  *((unsigned char *)v62 + 23) = v69;
  if (v69) {
    goto LABEL_118;
  }
  *(unsigned char *)int64_t v62 = 0;
  BOOL v67 = (void *)v92;
  if ((void)v92) {
    goto LABEL_109;
  }
LABEL_110:
  unint64_t v72 = (void *)v91;
  *(void *)&long long v91 = 0;
  if (v72) {
    operator delete(v72);
  }
  if (v94)
  {
    int64_t v95 = v94;
    operator delete(v94);
  }
}

void sub_995C7C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_24F6A40);
  sub_12168(v1 - 192);
  unint64_t v3 = *(void **)(v1 - 144);
  if (v3)
  {
    *(void *)(v1 - 136) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

void sub_995D20(void *a1@<X1>, uint64_t *a2@<X2>, int a3@<W3>, int a4@<W4>, void *a5@<X8>)
{
  if (*a1 == a1[1])
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    return;
  }
  uint64_t v94 = 0;
  int64_t v95 = 0;
  int64_t v96 = 0;
  long long v91 = 0u;
  long long v92 = 0u;
  int v93 = 1065353216;
  size_t prime = std::__next_prime(0x89uLL);
  if (prime) {
    sub_B6C0((uint64_t)&v91, prime);
  }
  int v78 = a3;
  int64_t v77 = a2;
  uint64_t v10 = (void *)*a1;
  unint64_t v80 = (void *)a1[1];
  if ((void *)*a1 != v80)
  {
    unsigned int v79 = -1;
    while (1)
    {
      unint64_t v11 = v10 + 4;
      if (!sub_99A8A8(&v91, (uint64_t)(v10 + 4))) {
        break;
      }
LABEL_33:
      BOOL v31 = (void *)v10[5];
      int v30 = (void *)v10[6];
      while (v31 != v30)
      {
        unint64_t v33 = sub_1132F20((uint64_t)v31);
        unint64_t v34 = *((void *)&v91 + 1);
        if (*((void *)&v91 + 1))
        {
          unint64_t v35 = v33;
          uint8x8_t v36 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v91 + 8));
          v36.i16[0] = vaddlv_u8(v36);
          if (v36.u32[0] > 1uLL)
          {
            unint64_t v37 = v33;
            if (v33 >= *((void *)&v91 + 1)) {
              unint64_t v37 = v33 % *((void *)&v91 + 1);
            }
          }
          else
          {
            unint64_t v37 = (*((void *)&v91 + 1) - 1) & v33;
          }
          unint64_t v38 = *(void **)(v91 + 8 * v37);
          if (v38)
          {
            unint64_t v39 = (void *)*v38;
            if (*v38)
            {
              if (v36.u32[0] < 2uLL)
              {
                uint64_t v40 = *((void *)&v91 + 1) - 1;
                while (1)
                {
                  uint64_t v42 = v39[1];
                  if (v42 == v35)
                  {
                    if (sub_1132FD0((uint64_t)(v39 + 2), (uint64_t)v31)) {
                      goto LABEL_36;
                    }
                  }
                  else if ((v42 & v40) != v37)
                  {
                    goto LABEL_59;
                  }
                  unint64_t v39 = (void *)*v39;
                  if (!v39) {
                    goto LABEL_59;
                  }
                }
              }
              do
              {
                unint64_t v41 = v39[1];
                if (v41 == v35)
                {
                  if (sub_1132FD0((uint64_t)(v39 + 2), (uint64_t)v31)) {
                    goto LABEL_36;
                  }
                }
                else
                {
                  if (v41 >= v34) {
                    v41 %= v34;
                  }
                  if (v41 != v37) {
                    break;
                  }
                }
                unint64_t v39 = (void *)*v39;
              }
              while (v39);
            }
          }
        }
LABEL_59:
        sub_99A9E4((uint64_t)&v91, (uint64_t)v31, v31);
        unint64_t v43 = v95;
        if (v95 < v96)
        {
          *(void *)int64_t v95 = *v31;
          uint64_t v32 = (uint64_t)(v43 + 8);
        }
        else
        {
          unint64_t v44 = v94;
          uint64_t v45 = (v95 - v94) >> 3;
          unint64_t v46 = v45 + 1;
          if ((unint64_t)(v45 + 1) >> 61) {
            sub_2E00();
          }
          uint64_t v47 = v96 - v94;
          if ((v96 - v94) >> 2 > v46) {
            unint64_t v46 = v47 >> 2;
          }
          if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v48 = v46;
          }
          if (v48)
          {
            if (v48 >> 61) {
              sub_188D718();
            }
            unint64_t v49 = operator new(8 * v48);
            uint64_t v50 = &v49[8 * v45];
            *(void *)uint64_t v50 = *v31;
            uint64_t v32 = (uint64_t)(v50 + 8);
            if (v43 != v44)
            {
LABEL_69:
              unint64_t v51 = v43 - 8 - v44;
              if (v51 < 0x58) {
                goto LABEL_132;
              }
              if ((unint64_t)(v44 - v49) < 0x20) {
                goto LABEL_132;
              }
              uint64_t v52 = (v51 >> 3) + 1;
              uint64_t v53 = 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
              unint64_t v54 = &v43[-v53];
              v50 -= v53;
              uint64_t v55 = &v49[8 * v45 - 16];
              uint64_t v56 = v43 - 16;
              uint64_t v57 = v52 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v58 = *(_OWORD *)v56;
                *(v55 - 1) = *((_OWORD *)v56 - 1);
                *uint64_t v55 = v58;
                v55 -= 2;
                v56 -= 32;
                v57 -= 4;
              }
              while (v57);
              unint64_t v43 = v54;
              if (v52 != (v52 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_132:
                do
                {
                  uint64_t v59 = *((void *)v43 - 1);
                  v43 -= 8;
                  *((void *)v50 - 1) = v59;
                  v50 -= 8;
                }
                while (v43 != v44);
              }
              unint64_t v43 = v94;
              uint64_t v94 = v50;
              int64_t v95 = (char *)v32;
              int64_t v96 = &v49[8 * v48];
              if (!v43) {
                goto LABEL_35;
              }
LABEL_79:
              operator delete(v43);
              goto LABEL_35;
            }
          }
          else
          {
            unint64_t v49 = 0;
            uint64_t v50 = (char *)(8 * v45);
            *(void *)(8 * v45) = *v31;
            uint64_t v32 = 8 * v45 + 8;
            if (v43 != v44) {
              goto LABEL_69;
            }
          }
          uint64_t v94 = v50;
          int64_t v95 = (char *)v32;
          int64_t v96 = &v49[8 * v48];
          if (v43) {
            goto LABEL_79;
          }
        }
LABEL_35:
        int64_t v95 = (char *)v32;
LABEL_36:
        v31 += 4;
      }
      v10 += 8;
      if (v10 == v80) {
        goto LABEL_81;
      }
    }
    sub_99A9E4((uint64_t)&v91, (uint64_t)(v10 + 4), v10 + 4);
    char v12 = v95;
    if (v95 < v96)
    {
      *(void *)int64_t v95 = *v11;
      uint64_t v13 = (uint64_t)(v12 + 8);
      goto LABEL_31;
    }
    int v14 = v94;
    uint64_t v15 = (v95 - v94) >> 3;
    unint64_t v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61) {
      sub_2E00();
    }
    uint64_t v17 = v96 - v94;
    if ((v96 - v94) >> 2 > v16) {
      unint64_t v16 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 >> 61) {
        sub_188D718();
      }
      char v19 = operator new(8 * v18);
      uint64_t v20 = &v19[8 * v15];
      *(void *)uint64_t v20 = *v11;
      uint64_t v13 = (uint64_t)(v20 + 8);
      if (v12 != v14)
      {
LABEL_20:
        unint64_t v21 = v12 - 8 - v14;
        if (v21 < 0x58) {
          goto LABEL_133;
        }
        if ((unint64_t)(v14 - v19) < 0x20) {
          goto LABEL_133;
        }
        uint64_t v22 = (v21 >> 3) + 1;
        uint64_t v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
        long long v24 = &v12[-v23];
        v20 -= v23;
        long long v25 = &v19[8 * v15 - 16];
        long long v26 = v12 - 16;
        uint64_t v27 = v22 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *long long v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        char v12 = v24;
        if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_133:
          do
          {
            uint64_t v29 = *((void *)v12 - 1);
            v12 -= 8;
            *((void *)v20 - 1) = v29;
            v20 -= 8;
          }
          while (v12 != v14);
        }
        char v12 = v94;
        uint64_t v94 = v20;
        int64_t v95 = (char *)v13;
        int64_t v96 = &v19[8 * v18];
        if (!v12) {
          goto LABEL_31;
        }
LABEL_30:
        operator delete(v12);
LABEL_31:
        int64_t v95 = (char *)v13;
        if (v79 == -1) {
          unsigned int v79 = ((unint64_t)(v13 - (void)v94) >> 3) - 1;
        }
        goto LABEL_33;
      }
    }
    else
    {
      char v19 = 0;
      uint64_t v20 = (char *)(8 * v15);
      *(void *)(8 * v15) = *v11;
      uint64_t v13 = 8 * v15 + 8;
      if (v12 != v14) {
        goto LABEL_20;
      }
    }
    uint64_t v94 = v20;
    int64_t v95 = (char *)v13;
    int64_t v96 = &v19[8 * v18];
    if (!v12) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  unsigned int v79 = -1;
LABEL_81:
  if (v94 == v95)
  {
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)&v85);
      sub_188FC78(&v85, (uint64_t)"Couldn't find any valid text references in the input vector", 59);
      std::stringbuf::str();
      sub_7246C((uint64_t *)v97, 3u);
      if (v99 < 0) {
        operator delete(v97[0]);
      }
      if (v90 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    BOOL v67 = (void *)v92;
    if (!(void)v92) {
      goto LABEL_110;
    }
    goto LABEL_109;
  }
  int v81 = 50331648;
  uint64_t v82 = 0;
  int v60 = v79;
  if (!v78) {
    int v60 = -1;
  }
  int v83 = 14;
  int v84 = v60;
  uint64_t v61 = sub_656AC();
  int64_t v62 = a5;
  int64_t v63 = (void (__cdecl **)(std::stringbuf *__hidden))v77[1];
  uint64_t v64 = ((uint64_t)v63 - *v77) >> 3;
  uint64_t v85 = *v77;
  unint64_t v86 = v63;
  int v87 = 2;
  uint64_t v88 = v64;
  v97[0] = v94;
  v97[1] = v95;
  int v98 = 2;
  uint64_t v100 = (v95 - v94) >> 3;
  unint64_t v65 = (*(uint64_t (**)(uint64_t, uint64_t *, void **, int *))(*(void *)v61 + 48))(v61, &v85, v97, &v81);
  uint64_t v85 = sub_1133328();
  if (HIDWORD(v65))
  {
    if (!a4 || (v79 & 0x80000000) != 0)
    {
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
      BOOL v67 = (void *)v92;
      if (!(void)v92) {
        goto LABEL_110;
      }
      goto LABEL_109;
    }
    if (v79 >= (unint64_t)((v95 - v94) >> 3)) {
      sub_66748();
    }
    uint64_t v66 = (uint64_t *)&v94[8 * v79];
  }
  else
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F6A40, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_24F6A40))
    {
      qword_24F6A38 = sub_1133328();
      __cxa_guard_release(&qword_24F6A40);
      int64_t v62 = a5;
    }
    uint64_t v66 = &qword_24F6A38;
    if ((v65 & 0x80000000) == 0 && (int)v65 < (int)((unint64_t)(v95 - v94) >> 3)) {
      uint64_t v66 = (uint64_t *)&v94[8 * v65];
    }
  }
  uint64_t v85 = *v66;
  uint64_t v68 = sub_1132F04(&v85);
  size_t v69 = *(void *)(v68 + 8);
  if (v69 >= 8) {
    unint64_t v70 = (const void *)(v68 + 16);
  }
  else {
    unint64_t v70 = (const void *)v68;
  }
  if (v69 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v69 >= 0x17)
  {
    uint64_t v73 = (v69 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v69 | 7) != 0x17) {
      uint64_t v73 = v69 | 7;
    }
    uint64_t v74 = v73 + 1;
    uint64_t v75 = operator new(v73 + 1);
    v62[1] = v69;
    v62[2] = v74 | 0x8000000000000000;
    *int64_t v62 = v75;
    int64_t v62 = v75;
LABEL_118:
    memcpy(v62, v70, v69);
    *((unsigned char *)v62 + v69) = 0;
    BOOL v67 = (void *)v92;
    if (!(void)v92) {
      goto LABEL_110;
    }
    do
    {
LABEL_109:
      unint64_t v71 = (void *)*v67;
      operator delete(v67);
      BOOL v67 = v71;
    }
    while (v71);
    goto LABEL_110;
  }
  *((unsigned char *)v62 + 23) = v69;
  if (v69) {
    goto LABEL_118;
  }
  *(unsigned char *)int64_t v62 = 0;
  BOOL v67 = (void *)v92;
  if ((void)v92) {
    goto LABEL_109;
  }
LABEL_110:
  unint64_t v72 = (void *)v91;
  *(void *)&long long v91 = 0;
  if (v72) {
    operator delete(v72);
  }
  if (v94)
  {
    int64_t v95 = v94;
    operator delete(v94);
  }
}

void sub_996614(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_24F6A40);
  sub_12168(v1 - 192);
  unint64_t v3 = *(void **)(v1 - 144);
  if (v3)
  {
    *(void *)(v1 - 136) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

void sub_9966B8(void *a1@<X1>, uint64_t *a2@<X2>, int a3@<W3>, int a4@<W4>, void *a5@<X8>)
{
  if (*a1 == a1[1])
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    return;
  }
  uint64_t v94 = 0;
  int64_t v95 = 0;
  int64_t v96 = 0;
  long long v91 = 0u;
  long long v92 = 0u;
  int v93 = 1065353216;
  size_t prime = std::__next_prime(0x89uLL);
  if (prime) {
    sub_B6C0((uint64_t)&v91, prime);
  }
  int v78 = a3;
  int64_t v77 = a2;
  uint64_t v10 = (void *)*a1;
  unint64_t v80 = (void *)a1[1];
  if ((void *)*a1 != v80)
  {
    unsigned int v79 = -1;
    while (1)
    {
      unint64_t v11 = v10 + 6;
      if (!sub_99A8A8(&v91, (uint64_t)(v10 + 6))) {
        break;
      }
LABEL_33:
      BOOL v31 = (void *)v10[7];
      int v30 = (void *)v10[8];
      while (v31 != v30)
      {
        unint64_t v33 = sub_1132F20((uint64_t)v31);
        unint64_t v34 = *((void *)&v91 + 1);
        if (*((void *)&v91 + 1))
        {
          unint64_t v35 = v33;
          uint8x8_t v36 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v91 + 8));
          v36.i16[0] = vaddlv_u8(v36);
          if (v36.u32[0] > 1uLL)
          {
            unint64_t v37 = v33;
            if (v33 >= *((void *)&v91 + 1)) {
              unint64_t v37 = v33 % *((void *)&v91 + 1);
            }
          }
          else
          {
            unint64_t v37 = (*((void *)&v91 + 1) - 1) & v33;
          }
          unint64_t v38 = *(void **)(v91 + 8 * v37);
          if (v38)
          {
            unint64_t v39 = (void *)*v38;
            if (*v38)
            {
              if (v36.u32[0] < 2uLL)
              {
                uint64_t v40 = *((void *)&v91 + 1) - 1;
                while (1)
                {
                  uint64_t v42 = v39[1];
                  if (v42 == v35)
                  {
                    if (sub_1132FD0((uint64_t)(v39 + 2), (uint64_t)v31)) {
                      goto LABEL_36;
                    }
                  }
                  else if ((v42 & v40) != v37)
                  {
                    goto LABEL_59;
                  }
                  unint64_t v39 = (void *)*v39;
                  if (!v39) {
                    goto LABEL_59;
                  }
                }
              }
              do
              {
                unint64_t v41 = v39[1];
                if (v41 == v35)
                {
                  if (sub_1132FD0((uint64_t)(v39 + 2), (uint64_t)v31)) {
                    goto LABEL_36;
                  }
                }
                else
                {
                  if (v41 >= v34) {
                    v41 %= v34;
                  }
                  if (v41 != v37) {
                    break;
                  }
                }
                unint64_t v39 = (void *)*v39;
              }
              while (v39);
            }
          }
        }
LABEL_59:
        sub_99A9E4((uint64_t)&v91, (uint64_t)v31, v31);
        unint64_t v43 = v95;
        if (v95 < v96)
        {
          *(void *)int64_t v95 = *v31;
          uint64_t v32 = (uint64_t)(v43 + 8);
        }
        else
        {
          unint64_t v44 = v94;
          uint64_t v45 = (v95 - v94) >> 3;
          unint64_t v46 = v45 + 1;
          if ((unint64_t)(v45 + 1) >> 61) {
            sub_2E00();
          }
          uint64_t v47 = v96 - v94;
          if ((v96 - v94) >> 2 > v46) {
            unint64_t v46 = v47 >> 2;
          }
          if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v48 = v46;
          }
          if (v48)
          {
            if (v48 >> 61) {
              sub_188D718();
            }
            unint64_t v49 = operator new(8 * v48);
            uint64_t v50 = &v49[8 * v45];
            *(void *)uint64_t v50 = *v31;
            uint64_t v32 = (uint64_t)(v50 + 8);
            if (v43 != v44)
            {
LABEL_69:
              unint64_t v51 = v43 - 8 - v44;
              if (v51 < 0x58) {
                goto LABEL_132;
              }
              if ((unint64_t)(v44 - v49) < 0x20) {
                goto LABEL_132;
              }
              uint64_t v52 = (v51 >> 3) + 1;
              uint64_t v53 = 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
              unint64_t v54 = &v43[-v53];
              v50 -= v53;
              uint64_t v55 = &v49[8 * v45 - 16];
              uint64_t v56 = v43 - 16;
              uint64_t v57 = v52 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v58 = *(_OWORD *)v56;
                *(v55 - 1) = *((_OWORD *)v56 - 1);
                *uint64_t v55 = v58;
                v55 -= 2;
                v56 -= 32;
                v57 -= 4;
              }
              while (v57);
              unint64_t v43 = v54;
              if (v52 != (v52 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_132:
                do
                {
                  uint64_t v59 = *((void *)v43 - 1);
                  v43 -= 8;
                  *((void *)v50 - 1) = v59;
                  v50 -= 8;
                }
                while (v43 != v44);
              }
              unint64_t v43 = v94;
              uint64_t v94 = v50;
              int64_t v95 = (char *)v32;
              int64_t v96 = &v49[8 * v48];
              if (!v43) {
                goto LABEL_35;
              }
LABEL_79:
              operator delete(v43);
              goto LABEL_35;
            }
          }
          else
          {
            unint64_t v49 = 0;
            uint64_t v50 = (char *)(8 * v45);
            *(void *)(8 * v45) = *v31;
            uint64_t v32 = 8 * v45 + 8;
            if (v43 != v44) {
              goto LABEL_69;
            }
          }
          uint64_t v94 = v50;
          int64_t v95 = (char *)v32;
          int64_t v96 = &v49[8 * v48];
          if (v43) {
            goto LABEL_79;
          }
        }
LABEL_35:
        int64_t v95 = (char *)v32;
LABEL_36:
        v31 += 7;
      }
      v10 += 10;
      if (v10 == v80) {
        goto LABEL_81;
      }
    }
    sub_99A9E4((uint64_t)&v91, (uint64_t)(v10 + 6), v10 + 6);
    char v12 = v95;
    if (v95 < v96)
    {
      *(void *)int64_t v95 = *v11;
      uint64_t v13 = (uint64_t)(v12 + 8);
      goto LABEL_31;
    }
    int v14 = v94;
    uint64_t v15 = (v95 - v94) >> 3;
    unint64_t v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61) {
      sub_2E00();
    }
    uint64_t v17 = v96 - v94;
    if ((v96 - v94) >> 2 > v16) {
      unint64_t v16 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 >> 61) {
        sub_188D718();
      }
      char v19 = operator new(8 * v18);
      uint64_t v20 = &v19[8 * v15];
      *(void *)uint64_t v20 = *v11;
      uint64_t v13 = (uint64_t)(v20 + 8);
      if (v12 != v14)
      {
LABEL_20:
        unint64_t v21 = v12 - 8 - v14;
        if (v21 < 0x58) {
          goto LABEL_133;
        }
        if ((unint64_t)(v14 - v19) < 0x20) {
          goto LABEL_133;
        }
        uint64_t v22 = (v21 >> 3) + 1;
        uint64_t v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
        long long v24 = &v12[-v23];
        v20 -= v23;
        long long v25 = &v19[8 * v15 - 16];
        long long v26 = v12 - 16;
        uint64_t v27 = v22 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *long long v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        char v12 = v24;
        if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_133:
          do
          {
            uint64_t v29 = *((void *)v12 - 1);
            v12 -= 8;
            *((void *)v20 - 1) = v29;
            v20 -= 8;
          }
          while (v12 != v14);
        }
        char v12 = v94;
        uint64_t v94 = v20;
        int64_t v95 = (char *)v13;
        int64_t v96 = &v19[8 * v18];
        if (!v12) {
          goto LABEL_31;
        }
LABEL_30:
        operator delete(v12);
LABEL_31:
        int64_t v95 = (char *)v13;
        if (v79 == -1) {
          unsigned int v79 = ((unint64_t)(v13 - (void)v94) >> 3) - 1;
        }
        goto LABEL_33;
      }
    }
    else
    {
      char v19 = 0;
      uint64_t v20 = (char *)(8 * v15);
      *(void *)(8 * v15) = *v11;
      uint64_t v13 = 8 * v15 + 8;
      if (v12 != v14) {
        goto LABEL_20;
      }
    }
    uint64_t v94 = v20;
    int64_t v95 = (char *)v13;
    int64_t v96 = &v19[8 * v18];
    if (!v12) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  unsigned int v79 = -1;
LABEL_81:
  if (v94 == v95)
  {
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)&v85);
      sub_188FC78(&v85, (uint64_t)"Couldn't find any valid text references in the input vector", 59);
      std::stringbuf::str();
      sub_7246C((uint64_t *)v97, 3u);
      if (v99 < 0) {
        operator delete(v97[0]);
      }
      if (v90 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    BOOL v67 = (void *)v92;
    if (!(void)v92) {
      goto LABEL_110;
    }
    goto LABEL_109;
  }
  int v81 = 50331648;
  uint64_t v82 = 0;
  int v60 = v79;
  if (!v78) {
    int v60 = -1;
  }
  int v83 = 14;
  int v84 = v60;
  uint64_t v61 = sub_656AC();
  int64_t v62 = a5;
  int64_t v63 = (void (__cdecl **)(std::stringbuf *__hidden))v77[1];
  uint64_t v64 = ((uint64_t)v63 - *v77) >> 3;
  uint64_t v85 = *v77;
  unint64_t v86 = v63;
  int v87 = 2;
  uint64_t v88 = v64;
  v97[0] = v94;
  v97[1] = v95;
  int v98 = 2;
  uint64_t v100 = (v95 - v94) >> 3;
  unint64_t v65 = (*(uint64_t (**)(uint64_t, uint64_t *, void **, int *))(*(void *)v61 + 48))(v61, &v85, v97, &v81);
  uint64_t v85 = sub_1133328();
  if (HIDWORD(v65))
  {
    if (!a4 || (v79 & 0x80000000) != 0)
    {
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
      BOOL v67 = (void *)v92;
      if (!(void)v92) {
        goto LABEL_110;
      }
      goto LABEL_109;
    }
    if (v79 >= (unint64_t)((v95 - v94) >> 3)) {
      sub_66748();
    }
    uint64_t v66 = (uint64_t *)&v94[8 * v79];
  }
  else
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F6A40, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_24F6A40))
    {
      qword_24F6A38 = sub_1133328();
      __cxa_guard_release(&qword_24F6A40);
      int64_t v62 = a5;
    }
    uint64_t v66 = &qword_24F6A38;
    if ((v65 & 0x80000000) == 0 && (int)v65 < (int)((unint64_t)(v95 - v94) >> 3)) {
      uint64_t v66 = (uint64_t *)&v94[8 * v65];
    }
  }
  uint64_t v85 = *v66;
  uint64_t v68 = sub_1132F04(&v85);
  size_t v69 = *(void *)(v68 + 8);
  if (v69 >= 8) {
    unint64_t v70 = (const void *)(v68 + 16);
  }
  else {
    unint64_t v70 = (const void *)v68;
  }
  if (v69 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v69 >= 0x17)
  {
    uint64_t v73 = (v69 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v69 | 7) != 0x17) {
      uint64_t v73 = v69 | 7;
    }
    uint64_t v74 = v73 + 1;
    uint64_t v75 = operator new(v73 + 1);
    v62[1] = v69;
    v62[2] = v74 | 0x8000000000000000;
    *int64_t v62 = v75;
    int64_t v62 = v75;
LABEL_118:
    memcpy(v62, v70, v69);
    *((unsigned char *)v62 + v69) = 0;
    BOOL v67 = (void *)v92;
    if (!(void)v92) {
      goto LABEL_110;
    }
    do
    {
LABEL_109:
      unint64_t v71 = (void *)*v67;
      operator delete(v67);
      BOOL v67 = v71;
    }
    while (v71);
    goto LABEL_110;
  }
  *((unsigned char *)v62 + 23) = v69;
  if (v69) {
    goto LABEL_118;
  }
  *(unsigned char *)int64_t v62 = 0;
  BOOL v67 = (void *)v92;
  if ((void)v92) {
    goto LABEL_109;
  }
LABEL_110:
  unint64_t v72 = (void *)v91;
  *(void *)&long long v91 = 0;
  if (v72) {
    operator delete(v72);
  }
  if (v94)
  {
    int64_t v95 = v94;
    operator delete(v94);
  }
}

void sub_996FAC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_24F6A40);
  sub_12168(v1 - 192);
  unint64_t v3 = *(void **)(v1 - 144);
  if (v3)
  {
    *(void *)(v1 - 136) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

void sub_997050(uint64_t *a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  if (*a1 == a1[1])
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return;
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v17 = 0;
  long long v6 = (uint64_t *)(a2 + 8);
  if (*(void *)(a2 + 16) - *(void *)(a2 + 8) >= 9uLL
    && (uint64_t v15 = sub_1133298(*(_DWORD *)a2),
        *(void *)&long long v13 = sub_1133030(&v15),
        *(void *)sub_1132EF8(&v13) == 0x30000006E74614CLL))
  {
    long long v13 = 0uLL;
    uint64_t v14 = 0;
    unint64_t v8 = *(uint64_t **)(a2 + 8);
    int v7 = *(uint64_t **)(a2 + 16);
    unint64_t v18 = (void **)&v13;
    while (v8 != v7)
    {
      *(void *)&long long v11 = sub_1133030(v8);
      if (*(void *)sub_1132EF8(&v11) == 0x30000006E74614CLL) {
        sub_2A98DC(&v18, v8);
      }
      ++v8;
    }
    sub_995D20(a1, (uint64_t *)&v13, 1, 0, &v11);
    *(_OWORD *)std::string __p = v11;
    uint64_t v17 = v12;
    if ((void)v13)
    {
      *((void *)&v13 + 1) = v13;
      operator delete((void *)v13);
    }
    char v9 = HIBYTE(v17);
    uint64_t v10 = __p[1];
    if (v17 >= 0) {
      uint64_t v10 = (void *)HIBYTE(v17);
    }
    if (v10) {
      goto LABEL_19;
    }
  }
  else
  {
    char v9 = 0;
  }
  sub_995D20(a1, v6, 1, 1, &v13);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  *(_OWORD *)std::string __p = v13;
  uint64_t v17 = v14;
LABEL_19:
  sub_997270(a1, (unsigned __int8 *)__p, (uint64_t)a3);
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
}

void sub_99722C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, _Unwind_Exception *exception_objecta, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_997270(uint64_t *a1@<X1>, unsigned __int8 *a2@<X2>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 != v4)
  {
    while (1)
    {
      sub_998B78(v3, a2, (uint64_t)v15);
      int v7 = v15[1];
      if (v16 >= 0) {
        int v7 = (void *)HIBYTE(v16);
      }
      uint64_t v8 = HIBYTE(v19);
      char v9 = HIBYTE(v19);
      if (!v7) {
        goto LABEL_12;
      }
      if (v19 < 0) {
        uint64_t v8 = *((void *)&__p + 1);
      }
      if (!v8) {
        goto LABEL_12;
      }
      unint64_t v10 = *(void *)(a3 + 8);
      if (v10 < *(void *)(a3 + 16)) {
        break;
      }
      long long v13 = sub_99A454((void **)a3, (uint64_t)v15);
      char v14 = HIBYTE(v19);
      *(void *)(a3 + 8) = v13;
      if ((v14 & 0x80) == 0)
      {
LABEL_13:
        if (SHIBYTE(v16) < 0) {
          goto LABEL_17;
        }
        goto LABEL_3;
      }
LABEL_16:
      operator delete((void *)__p);
      if (SHIBYTE(v16) < 0) {
LABEL_17:
      }
        operator delete(v15[0]);
LABEL_3:
      v3 += 64;
      if (v3 == v4) {
        return;
      }
    }
    char v9 = 0;
    long long v11 = *(_OWORD *)v15;
    *(void *)(v10 + 16) = v16;
    *(_OWORD *)unint64_t v10 = v11;
    *(unsigned char *)(v10 + 24) = v17;
    long long v12 = __p;
    *(void *)(v10 + 48) = v19;
    v15[1] = 0;
    uint64_t v16 = 0;
    v15[0] = 0;
    *(_OWORD *)(v10 + 32) = v12;
    uint64_t v19 = 0;
    long long __p = 0uLL;
    *(void *)(a3 + 8) = v10 + 56;
LABEL_12:
    if ((v9 & 0x80) == 0) {
      goto LABEL_13;
    }
    goto LABEL_16;
  }
}

void sub_9973AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4A0638((uint64_t)va);
  sub_8E4FE0(v2);
  _Unwind_Resume(a1);
}

void sub_9973C8(_Unwind_Exception *a1)
{
  sub_8E4FE0(v1);
  _Unwind_Resume(a1);
}

void sub_9973DC(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(unsigned __int8 *)(a1 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a1 + 8);
  }
  if (!v4 || (uint64_t v7 = a1 + 32, __dst[0] = (void *)sub_1133328(), !sub_1132FF4(v7, (uint64_t)__dst)))
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(unsigned char *)(a3 + 24) = 2;
    *(void *)(a3 + 40) = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 32) = 0;
    return;
  }
  if (*(char *)(a1 + 23) < 0)
  {
    sub_4200(__dst, *(void **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)std::string __dst = *(_OWORD *)a1;
    uint64_t v30 = *(void *)(a1 + 16);
  }
  long long v31 = *(_OWORD *)(a1 + 24);
  unint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v32 = 0;
  sub_360840(&v32, *(void *)(a1 + 40), *(void *)(a1 + 48), (uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 5);
  sub_997784((char **)&__p, (long long *)__dst, 1uLL);
  sub_997050((uint64_t *)&__p, a2, &v27);
  uint64_t v8 = (void **)__p;
  if (__p)
  {
    char v9 = v26;
    unint64_t v10 = __p;
    if (v26 != __p)
    {
      do
      {
        long long v11 = (void **)*(v9 - 3);
        if (v11)
        {
          long long v12 = (void **)*(v9 - 2);
          long long v13 = *(v9 - 3);
          if (v12 != v11)
          {
            do
            {
              if (*((char *)v12 - 1) < 0) {
                operator delete(*(v12 - 3));
              }
              v12 -= 4;
            }
            while (v12 != v11);
            long long v13 = *(v9 - 3);
          }
          *(v9 - 2) = v11;
          operator delete(v13);
        }
        char v14 = v9 - 8;
        if (*((char *)v9 - 41) < 0) {
          operator delete(*v14);
        }
        v9 -= 8;
      }
      while (v14 != v8);
      unint64_t v10 = __p;
    }
    long long v26 = v8;
    operator delete(v10);
  }
  uint64_t v15 = (void **)v32;
  if (v32)
  {
    uint64_t v16 = v33;
    char v17 = v32;
    if (v33 != v32)
    {
      do
      {
        if (*((char *)v16 - 1) < 0) {
          operator delete(*(v16 - 3));
        }
        v16 -= 4;
      }
      while (v16 != v15);
      char v17 = v32;
    }
    unint64_t v33 = v15;
    operator delete(v17);
  }
  if (SHIBYTE(v30) < 0)
  {
    operator delete(__dst[0]);
    unint64_t v18 = (char *)v27;
    if (v27 != v28) {
      goto LABEL_35;
    }
LABEL_38:
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(unsigned char *)(a3 + 24) = 2;
    *(void *)(a3 + 40) = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 32) = 0;
    goto LABEL_43;
  }
  unint64_t v18 = (char *)v27;
  if (v27 == v28) {
    goto LABEL_38;
  }
LABEL_35:
  if (v18[23] < 0)
  {
    sub_4200((unsigned char *)a3, *(void **)v18, *((void *)v18 + 1));
  }
  else
  {
    long long v19 = *(_OWORD *)v18;
    *(void *)(a3 + 16) = *((void *)v18 + 2);
    *(_OWORD *)a3 = v19;
  }
  *(unsigned char *)(a3 + 24) = v18[24];
  uint64_t v20 = (unsigned char *)(a3 + 32);
  if (v18[55] < 0)
  {
    sub_4200(v20, *((void **)v18 + 4), *((void *)v18 + 5));
  }
  else
  {
    long long v21 = *((_OWORD *)v18 + 2);
    *(void *)(a3 + 48) = *((void *)v18 + 6);
    *(_OWORD *)uint64_t v20 = v21;
  }
LABEL_43:
  uint64_t v22 = (void **)v27;
  if (!v27) {
    return;
  }
  uint64_t v23 = v28;
  long long v24 = v27;
  if (v28 != v27)
  {
    while (1)
    {
      if (*((char *)v23 - 1) < 0)
      {
        operator delete(*(v23 - 3));
        if (*((char *)v23 - 33) < 0) {
LABEL_51:
        }
          operator delete(*(v23 - 7));
      }
      else if (*((char *)v23 - 33) < 0)
      {
        goto LABEL_51;
      }
      v23 -= 7;
      if (v23 == v22)
      {
        long long v24 = v27;
        break;
      }
    }
  }
  long long v28 = v22;
  operator delete(v24);
}

void sub_9976F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if (*(char *)(v4 + 23) < 0)
  {
    operator delete(*(void **)v4);
    sub_8E4FE0((void **)va);
    _Unwind_Resume(a1);
  }
  sub_8E4FE0((void **)va);
  _Unwind_Resume(a1);
}

void sub_997728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
}

char **sub_997784(char **a1, long long *a2, unint64_t a3)
{
  a1[2] = 0;
  int v4 = a1 + 16;
  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    if (a3 >> 58) {
      sub_2E00();
    }
    uint64_t v6 = a3 << 6;
    uint64_t v7 = (char *)operator new(a3 << 6);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[v6];
    a1[1] = sub_9996B8(v4, a2, (long long *)((char *)a2 + v6), v7);
  }
  return a1;
}

void sub_997814(_Unwind_Exception *exception_object)
{
  v1[1] = v2;
  if (*v1) {
    sub_20AD120(v1 + 1, *v1, (void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_997840(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(unsigned __int8 *)(a1 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a1 + 8);
  }
  if (!v4 || (uint64_t v7 = a1 + 32, __dst[0] = (void *)sub_1133328(), !sub_1132FF4(v7, (uint64_t)__dst)))
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(unsigned char *)(a3 + 24) = 2;
    *(void *)(a3 + 40) = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 32) = 0;
    return;
  }
  if (*(char *)(a1 + 23) < 0)
  {
    sub_4200(__dst, *(void **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)std::string __dst = *(_OWORD *)a1;
    uint64_t v32 = *(void *)(a1 + 16);
  }
  long long v33 = *(_OWORD *)(a1 + 24);
  unint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v34 = 0;
  sub_360840(&v34, *(void *)(a1 + 40), *(void *)(a1 + 48), (uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 5);
  sub_997784((char **)&v25, (long long *)__dst, 1uLL);
  sub_995D20(&v25, (uint64_t *)(a2 + 8), 0, 1, __p);
  sub_997270((uint64_t *)&v25, (unsigned __int8 *)__p, (uint64_t)&v27);
  if (v30 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v8 = (void **)v25;
  if (v25)
  {
    char v9 = v26;
    unint64_t v10 = v25;
    if (v26 != v25)
    {
      do
      {
        long long v11 = (void **)*(v9 - 3);
        if (v11)
        {
          long long v12 = (void **)*(v9 - 2);
          long long v13 = *(v9 - 3);
          if (v12 != v11)
          {
            do
            {
              if (*((char *)v12 - 1) < 0) {
                operator delete(*(v12 - 3));
              }
              v12 -= 4;
            }
            while (v12 != v11);
            long long v13 = *(v9 - 3);
          }
          *(v9 - 2) = v11;
          operator delete(v13);
        }
        char v14 = v9 - 8;
        if (*((char *)v9 - 41) < 0) {
          operator delete(*v14);
        }
        v9 -= 8;
      }
      while (v14 != v8);
      unint64_t v10 = v25;
    }
    long long v26 = v8;
    operator delete(v10);
  }
  uint64_t v15 = (void **)v34;
  if (v34)
  {
    uint64_t v16 = v35;
    char v17 = v34;
    if (v35 != v34)
    {
      do
      {
        if (*((char *)v16 - 1) < 0) {
          operator delete(*(v16 - 3));
        }
        v16 -= 4;
      }
      while (v16 != v15);
      char v17 = v34;
    }
    unint64_t v35 = v15;
    operator delete(v17);
  }
  if (SHIBYTE(v32) < 0)
  {
    operator delete(__dst[0]);
    unint64_t v18 = (char *)v27;
    if (v27 != v28) {
      goto LABEL_37;
    }
LABEL_40:
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(unsigned char *)(a3 + 24) = 2;
    *(void *)(a3 + 40) = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 32) = 0;
    goto LABEL_45;
  }
  unint64_t v18 = (char *)v27;
  if (v27 == v28) {
    goto LABEL_40;
  }
LABEL_37:
  if (v18[23] < 0)
  {
    sub_4200((unsigned char *)a3, *(void **)v18, *((void *)v18 + 1));
  }
  else
  {
    long long v19 = *(_OWORD *)v18;
    *(void *)(a3 + 16) = *((void *)v18 + 2);
    *(_OWORD *)a3 = v19;
  }
  *(unsigned char *)(a3 + 24) = v18[24];
  uint64_t v20 = (unsigned char *)(a3 + 32);
  if (v18[55] < 0)
  {
    sub_4200(v20, *((void **)v18 + 4), *((void *)v18 + 5));
  }
  else
  {
    long long v21 = *((_OWORD *)v18 + 2);
    *(void *)(a3 + 48) = *((void *)v18 + 6);
    *(_OWORD *)uint64_t v20 = v21;
  }
LABEL_45:
  uint64_t v22 = (void **)v27;
  if (!v27) {
    return;
  }
  uint64_t v23 = v28;
  long long v24 = v27;
  if (v28 != v27)
  {
    while (1)
    {
      if (*((char *)v23 - 1) < 0)
      {
        operator delete(*(v23 - 3));
        if (*((char *)v23 - 33) < 0) {
LABEL_53:
        }
          operator delete(*(v23 - 7));
      }
      else if (*((char *)v23 - 33) < 0)
      {
        goto LABEL_53;
      }
      v23 -= 7;
      if (v23 == v22)
      {
        long long v24 = v27;
        break;
      }
    }
  }
  long long v28 = v22;
  operator delete(v24);
}

void sub_997B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (*(char *)(v5 + 23) < 0)
  {
    operator delete(*(void **)v5);
    sub_8E4FE0((void **)va);
    _Unwind_Resume(a1);
  }
  sub_8E4FE0((void **)va);
  _Unwind_Resume(a1);
}

void sub_997BB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
}

void sub_997C2C(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(unsigned __int8 *)(a1 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a1 + 8);
  }
  if (!v4 || (uint64_t v7 = (void *)(a1 + 48), __dst = (void *)sub_1133328(), !sub_1132FF4((uint64_t)v7, (uint64_t)&__dst)))
  {
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
    return;
  }
  sub_9982A0(&__dst, (long long *)a1);
  sub_99986C(&__p, (uint64_t)&__dst, 1uLL);
  sub_9966B8(&__p, (uint64_t *)(a2 + 8), 1, 1, &v45);
  if (__p)
  {
    sub_999B30((uint64_t)&__p, (void **)__p);
    operator delete(__p);
  }
  if (v53)
  {
    sub_99957C((uint64_t)&v53, (uint64_t)v53);
    operator delete(v53);
  }
  uint64_t v8 = (void **)v51;
  if (v51)
  {
    char v9 = v52;
    unint64_t v10 = v51;
    if (v52 == v51) {
      goto LABEL_31;
    }
    while (1)
    {
      long long v11 = (void **)*(v9 - 3);
      if (!v11) {
        goto LABEL_24;
      }
      long long v12 = (void **)*(v9 - 2);
      long long v13 = *(v9 - 3);
      if (v12 != v11) {
        break;
      }
LABEL_23:
      *(v9 - 2) = v11;
      operator delete(v13);
LABEL_24:
      if (*((char *)v9 - 25) < 0)
      {
        operator delete(*(v9 - 6));
        char v14 = v9 - 10;
        if (*((char *)v9 - 57) < 0) {
LABEL_28:
        }
          operator delete(*v14);
      }
      else
      {
        char v14 = v9 - 10;
        if (*((char *)v9 - 57) < 0) {
          goto LABEL_28;
        }
      }
      char v9 = v14;
      if (v14 == v8)
      {
        unint64_t v10 = v51;
LABEL_31:
        uint64_t v52 = v8;
        operator delete(v10);
        goto LABEL_32;
      }
    }
    while (1)
    {
      if (*((char *)v12 - 1) < 0)
      {
        operator delete(*(v12 - 3));
        if (*((char *)v12 - 25) < 0) {
LABEL_21:
        }
          operator delete(*(v12 - 6));
      }
      else if (*((char *)v12 - 25) < 0)
      {
        goto LABEL_21;
      }
      v12 -= 6;
      if (v12 == v11)
      {
        long long v13 = *(v9 - 3);
        goto LABEL_23;
      }
    }
  }
LABEL_32:
  if (SHIBYTE(v50) < 0) {
    operator delete(__dst);
  }
  uint64_t v15 = sub_1132F04(v7);
  size_t v16 = *(void *)(v15 + 8);
  if (v16 >= 8) {
    char v17 = (const void *)(v15 + 16);
  }
  else {
    char v17 = (const void *)v15;
  }
  if (v16 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v16 >= 0x17)
  {
    uint64_t v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17) {
      uint64_t v19 = v16 | 7;
    }
    uint64_t v20 = v19 + 1;
    p_dst = operator new(v19 + 1);
    size_t __n = v16;
    int64_t v50 = v20 | 0x8000000000000000;
    std::string __dst = p_dst;
    goto LABEL_44;
  }
  HIBYTE(v50) = *(void *)(v15 + 8);
  p_dst = &__dst;
  if (v16) {
LABEL_44:
  }
    memcpy(p_dst, v17, v16);
  *((unsigned char *)p_dst + v16) = 0;
  uint64_t v21 = HIBYTE(v50);
  if (v50 >= 0) {
    size_t v22 = HIBYTE(v50);
  }
  else {
    size_t v22 = __n;
  }
  uint64_t v23 = v47;
  if ((v47 & 0x80u) != 0) {
    uint64_t v23 = v46;
  }
  if (v22 == v23)
  {
    if ((v47 & 0x80u) == 0) {
      long long v24 = (unsigned __int8 *)&v45;
    }
    else {
      long long v24 = (unsigned __int8 *)v45;
    }
    if ((SHIBYTE(v50) & 0x80000000) == 0)
    {
      if (HIBYTE(v50))
      {
        long long v25 = &__dst;
        while (*(unsigned __int8 *)v25 == *v24)
        {
          long long v25 = (void **)((char *)v25 + 1);
          ++v24;
          if (!--v21) {
            goto LABEL_97;
          }
        }
        goto LABEL_61;
      }
LABEL_97:
      if (*(char *)(a1 + 23) < 0)
      {
        sub_4200((unsigned char *)a3, *(void **)a1, *(void *)(a1 + 8));
      }
      else
      {
        *(_OWORD *)a3 = *(_OWORD *)a1;
        *(void *)(a3 + 16) = *(void *)(a1 + 16);
      }
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 40) = 0;
      sub_94AEF4((void *)(a3 + 24), *(void *)(a1 + 24), *(void *)(a1 + 32), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 4));
      goto LABEL_104;
    }
    if (!memcmp(__dst, v24, __n)) {
      goto LABEL_97;
    }
  }
LABEL_61:
  uint64_t v26 = *(void *)(a1 + 56);
  uint64_t v27 = *(void *)(a1 + 64);
  if (v26 == v27)
  {
LABEL_96:
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
    goto LABEL_104;
  }
  while (1)
  {
    uint64_t v29 = sub_1132F04((void *)v26);
    size_t v30 = *(void *)(v29 + 8);
    if (v30 >= 8) {
      long long v31 = (const void *)(v29 + 16);
    }
    else {
      long long v31 = (const void *)v29;
    }
    if (v30 > 0x7FFFFFFFFFFFFFF7) {
      sub_188D690();
    }
    if (v30 >= 0x17)
    {
      uint64_t v33 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v30 | 7) != 0x17) {
        uint64_t v33 = v30 | 7;
      }
      uint64_t v34 = v33 + 1;
      p_p = operator new(v33 + 1);
      size_t v43 = v30;
      int64_t v44 = v34 | 0x8000000000000000;
      long long __p = p_p;
LABEL_76:
      memcpy(p_p, v31, v30);
      goto LABEL_77;
    }
    HIBYTE(v44) = *(void *)(v29 + 8);
    p_p = &__p;
    if (v30) {
      goto LABEL_76;
    }
LABEL_77:
    *((unsigned char *)p_p + v30) = 0;
    char v35 = HIBYTE(v44);
    if (v44 >= 0) {
      size_t v36 = HIBYTE(v44);
    }
    else {
      size_t v36 = v43;
    }
    uint64_t v37 = v47;
    if ((v47 & 0x80u) != 0) {
      uint64_t v37 = v46;
    }
    if (v36 == v37) {
      break;
    }
LABEL_92:
    if ((v44 & 0x8000000000000000) == 0) {
      goto LABEL_65;
    }
    long long v28 = __p;
LABEL_64:
    operator delete(v28);
LABEL_65:
    v26 += 56;
    if (v26 == v27) {
      goto LABEL_96;
    }
  }
  if ((v47 & 0x80u) == 0) {
    unint64_t v38 = (unsigned __int8 *)&v45;
  }
  else {
    unint64_t v38 = (unsigned __int8 *)v45;
  }
  if (v44 < 0)
  {
    long long v28 = __p;
    if (!memcmp(__p, v38, v43)) {
      goto LABEL_94;
    }
    goto LABEL_64;
  }
  if (HIBYTE(v44))
  {
    unint64_t v39 = &__p;
    uint64_t v40 = HIBYTE(v44);
    while (*(unsigned __int8 *)v39 == *v38)
    {
      unint64_t v39 = (void **)((char *)v39 + 1);
      ++v38;
      if (!--v40) {
        goto LABEL_94;
      }
    }
    goto LABEL_92;
  }
LABEL_94:
  if (*(char *)(v26 + 31) < 0)
  {
    sub_4200((unsigned char *)a3, *(void **)(v26 + 8), *(void *)(v26 + 16));
  }
  else
  {
    long long v41 = *(_OWORD *)(v26 + 8);
    *(void *)(a3 + 16) = *(void *)(v26 + 24);
    *(_OWORD *)a3 = v41;
  }
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  sub_94AEF4((void *)(a3 + 24), *(void *)(v26 + 32), *(void *)(v26 + 40), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v26 + 40) - *(void *)(v26 + 32)) >> 4));
  if (v35 < 0) {
    operator delete(__p);
  }
LABEL_104:
  if ((SHIBYTE(v50) & 0x80000000) == 0)
  {
    if (((char)v47 & 0x80000000) == 0) {
      return;
    }
LABEL_108:
    operator delete(v45);
    return;
  }
  operator delete(__dst);
  if ((char)v47 < 0) {
    goto LABEL_108;
  }
}

void sub_9981A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (v24 < 0)
  {
    operator delete(__p);
    if ((a18 & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
  else if ((a18 & 0x80000000) == 0)
  {
LABEL_6:
    _Unwind_Resume(exception_object);
  }
  operator delete(a13);
  _Unwind_Resume(exception_object);
}

void *sub_9982A0(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_4200(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v4;
  }
  __dst[3] = 0;
  __dst[4] = 0;
  __dst[5] = 0;
  sub_94AEF4(__dst + 3, *((void *)a2 + 3), *((void *)a2 + 4), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 4));
  __dst[6] = *((void *)a2 + 6);
  sub_9991FC(__dst + 7, (uint64_t *)a2 + 7);
  return __dst;
}

void sub_998338(_Unwind_Exception *exception_object)
{
  if (*v2) {
    sub_20AD1E0(v1, *v2, (void **)(v1 + 24));
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_998370(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 56);
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2)
  {
    sub_99957C(a1 + 56, v2);
    operator delete(*v3);
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void **)(a1 + 24);
    if (v5 != v4)
    {
      do
      {
        v5 -= 80;
        sub_94B370(a1 + 40, v5);
      }
      while (v5 != v4);
      uint64_t v6 = *(void **)(a1 + 24);
    }
    *(void *)(a1 + 32) = v4;
    operator delete(v6);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void ***sub_99841C(void ***a1)
{
  if (*a1)
  {
    sub_999B30((uint64_t)a1, *a1);
    operator delete(*a1);
  }
  return a1;
}

void sub_998458(int **a1@<X1>, int a2@<W2>, uint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v46 = 0;
  unsigned __int8 v47 = 0;
  unint64_t v48 = 0;
  sub_8F4980((char **)&v46, 0xCCCCCCCCCCCCCCCDLL * (((char *)a1[1] - (char *)*a1) >> 4));
  uint64_t v8 = *a1;
  char v9 = a1[1];
  while (v8 != v9)
  {
    if (*((char *)v8 + 39) < 0)
    {
      if (!*((void *)v8 + 3)) {
        goto LABEL_4;
      }
    }
    else if (!*((unsigned char *)v8 + 39))
    {
      goto LABEL_4;
    }
    __p[0] = (void *)sub_1133328();
    if (sub_1132FF4((uint64_t)(v8 + 12), (uint64_t)__p))
    {
      long long v11 = (long long *)(v8 + 4);
      long long v12 = v47;
      if ((unint64_t)v47 >= v48)
      {
        unint64_t v10 = (void **)sub_999C8C(&v46, (uint64_t)v11);
      }
      else
      {
        if (*((char *)v8 + 39) < 0)
        {
          sub_4200(v47, *((void **)v8 + 2), *((void *)v8 + 3));
        }
        else
        {
          long long v13 = *v11;
          v47[2] = (void *)*((void *)v8 + 4);
          *(_OWORD *)long long v12 = v13;
        }
        long long v14 = *(_OWORD *)(v8 + 10);
        v12[5] = 0;
        *(_OWORD *)(v12 + 3) = v14;
        v12[6] = 0;
        v12[7] = 0;
        sub_360840((unsigned char *)v12 + 40, *((void *)v8 + 7), *((void *)v8 + 8), (uint64_t)(*((void *)v8 + 8) - *((void *)v8 + 7)) >> 5);
        unint64_t v10 = v12 + 8;
      }
      unsigned __int8 v47 = v10;
    }
LABEL_4:
    v8 += 20;
  }
  uint64_t v15 = operator new(4uLL);
  __p[0] = v15;
  *uint64_t v15 = a2;
  __p[1] = v15 + 1;
  uint64_t v40 = v15 + 1;
  sub_995384(&v46, (uint64_t *)__p, 1, 1, v44);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  sub_998A20(a4, ((char *)v47 - (unsigned char *)v46) >> 6);
  size_t v16 = *a1;
  char v17 = a1[1];
  if (*a1 != v17)
  {
    do
    {
      if (*((char *)v16 + 39) < 0)
      {
        if (!*((void *)v16 + 3)) {
          goto LABEL_21;
        }
      }
      else if (!*((unsigned char *)v16 + 39))
      {
        goto LABEL_21;
      }
      __p[0] = (void *)sub_1133328();
      if (sub_1132FF4((uint64_t)(v16 + 12), (uint64_t)__p))
      {
        sub_998B78((uint64_t)(v16 + 4), (unsigned __int8 *)v44, (uint64_t)__p);
        unint64_t v18 = __p[1];
        if (SHIBYTE(v40) >= 0) {
          unint64_t v18 = (void *)HIBYTE(v40);
        }
        uint64_t v19 = HIBYTE(v43);
        char v20 = HIBYTE(v43);
        if (v18)
        {
          if (v43 < 0) {
            uint64_t v19 = *((void *)&v42 + 1);
          }
          if (v19)
          {
            int v21 = *v16;
            if (*v16 == -1) {
              int v21 = 0;
            }
            int v38 = v21;
            unint64_t v22 = *(void *)(a4 + 8);
            if (v22 >= *(void *)(a4 + 16))
            {
              char v24 = sub_999F84((void **)a4, &v38, (uint64_t)__p);
            }
            else
            {
              *(_DWORD *)unint64_t v22 = v21;
              if (SHIBYTE(v40) < 0)
              {
                sub_4200((unsigned char *)(v22 + 8), __p[0], (unint64_t)__p[1]);
              }
              else
              {
                long long v23 = *(_OWORD *)__p;
                *(void *)(v22 + 24) = v40;
                *(_OWORD *)(v22 + 8) = v23;
              }
              *(unsigned char *)(v22 + 32) = v41;
              long long v25 = (unsigned char *)(v22 + 40);
              if (SHIBYTE(v43) < 0)
              {
                sub_4200(v25, (void *)v42, *((unint64_t *)&v42 + 1));
              }
              else
              {
                long long v26 = v42;
                *(void *)(v22 + 56) = v43;
                *(_OWORD *)long long v25 = v26;
              }
              char v24 = (char *)(v22 + 64);
              *(void *)(a4 + 8) = v22 + 64;
            }
            *(void *)(a4 + 8) = v24;
            char v20 = HIBYTE(v43);
          }
        }
        if (v20 < 0)
        {
          operator delete((void *)v42);
          if (SHIBYTE(v40) < 0) {
            goto LABEL_47;
          }
        }
        else if (SHIBYTE(v40) < 0)
        {
LABEL_47:
          operator delete(__p[0]);
        }
      }
LABEL_21:
      v16 += 20;
    }
    while (v16 != v17);
  }
  if (*(void *)a4 == *(void *)(a4 + 8) && *a3 != a3[1])
  {
    int v38 = 0;
    sub_995144(a3, (char *)__p);
    unint64_t v34 = *(void *)(a4 + 8);
    if (v34 >= *(void *)(a4 + 16))
    {
      *(void *)(a4 + 8) = sub_99A1EC((void **)a4, &v38, (uint64_t)__p);
      if (SHIBYTE(v43) < 0) {
        goto LABEL_80;
      }
    }
    else
    {
      *(_DWORD *)unint64_t v34 = v38;
      if (SHIBYTE(v40) < 0)
      {
        sub_4200((unsigned char *)(v34 + 8), __p[0], (unint64_t)__p[1]);
      }
      else
      {
        long long v35 = *(_OWORD *)__p;
        *(void *)(v34 + 24) = v40;
        *(_OWORD *)(v34 + 8) = v35;
      }
      *(unsigned char *)(v34 + 32) = v41;
      size_t v36 = (unsigned char *)(v34 + 40);
      if (SHIBYTE(v43) < 0)
      {
        sub_4200(v36, (void *)v42, *((unint64_t *)&v42 + 1));
      }
      else
      {
        long long v37 = v42;
        *(void *)(v34 + 56) = v43;
        *(_OWORD *)size_t v36 = v37;
      }
      *(void *)(a4 + 8) = v34 + 64;
      *(void *)(a4 + 8) = v34 + 64;
      if (SHIBYTE(v43) < 0)
      {
LABEL_80:
        operator delete((void *)v42);
        if ((SHIBYTE(v40) & 0x80000000) == 0) {
          goto LABEL_49;
        }
        goto LABEL_81;
      }
    }
    if ((SHIBYTE(v40) & 0x80000000) == 0) {
      goto LABEL_49;
    }
LABEL_81:
    operator delete(__p[0]);
  }
LABEL_49:
  if (v45 < 0) {
    operator delete(v44[0]);
  }
  uint64_t v27 = (void **)v46;
  if (v46)
  {
    long long v28 = v47;
    uint64_t v29 = v46;
    if (v47 != v46)
    {
      do
      {
        size_t v30 = (void **)*(v28 - 3);
        if (v30)
        {
          long long v31 = (void **)*(v28 - 2);
          uint64_t v32 = *(v28 - 3);
          if (v31 != v30)
          {
            do
            {
              if (*((char *)v31 - 1) < 0) {
                operator delete(*(v31 - 3));
              }
              v31 -= 4;
            }
            while (v31 != v30);
            uint64_t v32 = *(v28 - 3);
          }
          *(v28 - 2) = v30;
          operator delete(v32);
        }
        uint64_t v33 = v28 - 8;
        if (*((char *)v28 - 41) < 0) {
          operator delete(*v33);
        }
        v28 -= 8;
      }
      while (v33 != v27);
      uint64_t v29 = v46;
    }
    unsigned __int8 v47 = v27;
    operator delete(v29);
  }
}

void sub_9988E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void **a23,uint64_t a24)
{
  if (*(char *)(v26 + 31) < 0) {
    operator delete(*v25);
  }
  *(void *)(v24 + 8) = v26;
  sub_4A0638((uint64_t)&a10);
  sub_998FBC((void **)v24);
  if (a22 < 0)
  {
    operator delete(__p);
    sub_8F36A0(&a23);
    _Unwind_Resume(a1);
  }
  sub_8F36A0(&a23);
  _Unwind_Resume(a1);
}

void sub_998A20(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void ***)a1;
  if (a2 <= (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 6) {
    return;
  }
  if (a2 >> 58) {
    sub_2E00();
  }
  uint64_t v4 = *(void ***)(a1 + 8);
  unint64_t v5 = a2 << 6;
  uint64_t v6 = (char *)operator new(a2 << 6);
  uint64_t v7 = &v6[v5];
  uint64_t v8 = &v6[(char *)v4 - (char *)v2];
  if (v4 == v2)
  {
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v7;
    if (!v2) {
      return;
    }
    goto LABEL_16;
  }
  uint64_t v9 = 0;
  do
  {
    unint64_t v10 = &v8[v9 * 8];
    long long v11 = &v4[v9];
    *((_DWORD *)v10 - 16) = v4[v9 - 8];
    long long v12 = *(_OWORD *)&v4[v9 - 7];
    *((void *)v10 - 5) = v4[v9 - 5];
    *(_OWORD *)(v10 - 56) = v12;
    *(v11 - 6) = 0;
    *(v11 - 5) = 0;
    *(v11 - 7) = 0;
    *(v10 - 32) = (char)v4[v9 - 4];
    long long v13 = *(_OWORD *)&v4[v9 - 3];
    *((void *)v10 - 1) = v4[v9 - 1];
    *(_OWORD *)(v10 - 24) = v13;
    *(v11 - 2) = 0;
    *(v11 - 1) = 0;
    *(v11 - 3) = 0;
    v9 -= 8;
  }
  while (&v4[v9] != v2);
  long long v14 = *(void ***)a1;
  uint64_t v2 = *(void ***)(a1 + 8);
  *(void *)a1 = &v8[v9 * 8];
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v7;
  if (v2 != v14)
  {
    while (1)
    {
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*(v2 - 3));
        if (*((char *)v2 - 33) < 0) {
LABEL_13:
        }
          operator delete(*(v2 - 7));
      }
      else if (*((char *)v2 - 33) < 0)
      {
        goto LABEL_13;
      }
      v2 -= 8;
      if (v2 == v14)
      {
        uint64_t v2 = v14;
        break;
      }
    }
  }
  if (!v2) {
    return;
  }
LABEL_16:

  operator delete(v2);
}

void sub_998B78(uint64_t a1@<X1>, unsigned __int8 *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_1132F04((void *)(a1 + 32));
  size_t v7 = *(void *)(v6 + 8);
  if (v7 >= 8) {
    uint64_t v8 = (const void *)(v6 + 16);
  }
  else {
    uint64_t v8 = (const void *)v6;
  }
  if (v7 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (const void **)operator new(v10 + 1);
    size_t __n = v7;
    int64_t v47 = v11 | 0x8000000000000000;
    std::string __dst = p_dst;
    goto LABEL_11;
  }
  HIBYTE(v47) = *(void *)(v6 + 8);
  p_dst = (const void **)&__dst;
  if (v7) {
LABEL_11:
  }
    memcpy(p_dst, v8, v7);
  *((unsigned char *)p_dst + v7) = 0;
  uint64_t v12 = HIBYTE(v47);
  if (v47 >= 0) {
    size_t v13 = HIBYTE(v47);
  }
  else {
    size_t v13 = __n;
  }
  uint64_t v14 = a2[23];
  int v15 = (char)v14;
  if ((v14 & 0x80u) != 0) {
    uint64_t v14 = *((void *)a2 + 1);
  }
  if (v13 == v14)
  {
    if (v15 >= 0) {
      size_t v16 = a2;
    }
    else {
      size_t v16 = *(unsigned __int8 **)a2;
    }
    if ((SHIBYTE(v47) & 0x80000000) == 0)
    {
      if (HIBYTE(v47))
      {
        char v17 = (const void **)&__dst;
        while (*(unsigned __int8 *)v17 == *v16)
        {
          char v17 = (const void **)((char *)v17 + 1);
          ++v16;
          if (!--v12) {
            goto LABEL_65;
          }
        }
        goto LABEL_28;
      }
LABEL_65:
      char v37 = *(unsigned char *)(a1 + 24);
      if (*(char *)(a1 + 23) < 0)
      {
        sub_4200((unsigned char *)a3, *(void **)a1, *(void *)(a1 + 8));
        unsigned __int8 v40 = a2[23];
        *(unsigned char *)(a3 + 24) = v37;
        uint64_t v38 = a3 + 32;
        if ((v40 & 0x80) == 0) {
          goto LABEL_67;
        }
      }
      else
      {
        *(_OWORD *)a3 = *(_OWORD *)a1;
        *(void *)(a3 + 16) = *(void *)(a1 + 16);
        *(unsigned char *)(a3 + 24) = v37;
        uint64_t v38 = a3 + 32;
        if ((v15 & 0x80) == 0)
        {
LABEL_67:
          *(_OWORD *)uint64_t v38 = *(_OWORD *)a2;
          *(void *)(v38 + 16) = *((void *)a2 + 2);
          goto LABEL_74;
        }
      }
      sub_4200((unsigned char *)v38, *(void **)a2, *((void *)a2 + 1));
      goto LABEL_74;
    }
    if (!memcmp(__dst, v16, __n)) {
      goto LABEL_65;
    }
  }
LABEL_28:
  uint64_t v18 = *(void *)(a1 + 40);
  uint64_t v19 = *(void *)(a1 + 48);
  while (1)
  {
    if (v18 == v19)
    {
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(unsigned char *)(a3 + 24) = 2;
      *(void *)(a3 + 40) = 0;
      *(void *)(a3 + 48) = 0;
      *(void *)(a3 + 32) = 0;
      goto LABEL_74;
    }
    uint64_t v21 = sub_1132F04((void *)v18);
    size_t v22 = *(void *)(v21 + 8);
    if (v22 >= 8) {
      long long v23 = (const void *)(v21 + 16);
    }
    else {
      long long v23 = (const void *)v21;
    }
    if (v22 > 0x7FFFFFFFFFFFFFF7) {
      sub_188D690();
    }
    if (v22 >= 0x17)
    {
      uint64_t v25 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v22 | 7) != 0x17) {
        uint64_t v25 = v22 | 7;
      }
      uint64_t v26 = v25 + 1;
      p_s1 = operator new(v25 + 1);
      size_t v43 = v22;
      int64_t v44 = v26 | 0x8000000000000000;
      __s1 = p_s1;
LABEL_43:
      memcpy(p_s1, v23, v22);
      goto LABEL_44;
    }
    HIBYTE(v44) = *(void *)(v21 + 8);
    p_s1 = &__s1;
    if (v22) {
      goto LABEL_43;
    }
LABEL_44:
    *((unsigned char *)p_s1 + v22) = 0;
    char v27 = HIBYTE(v44);
    if (v44 >= 0) {
      size_t v28 = HIBYTE(v44);
    }
    else {
      size_t v28 = v43;
    }
    uint64_t v29 = a2[23];
    int v30 = (char)v29;
    if ((v29 & 0x80u) != 0) {
      uint64_t v29 = *((void *)a2 + 1);
    }
    if (v28 != v29) {
      goto LABEL_59;
    }
    if (v30 >= 0) {
      long long v31 = a2;
    }
    else {
      long long v31 = *(unsigned __int8 **)a2;
    }
    if (v44 < 0)
    {
      char v20 = __s1;
      if (!memcmp(__s1, v31, v43)) {
        break;
      }
      goto LABEL_30;
    }
    if (!HIBYTE(v44)) {
      break;
    }
    uint64_t v32 = &__s1;
    uint64_t v33 = HIBYTE(v44);
    while (*(unsigned __int8 *)v32 == *v31)
    {
      uint64_t v32 = (void **)((char *)v32 + 1);
      ++v31;
      if (!--v33) {
        goto LABEL_61;
      }
    }
LABEL_59:
    if (v44 < 0)
    {
      char v20 = __s1;
LABEL_30:
      operator delete(v20);
    }
    v18 += 32;
  }
LABEL_61:
  char v34 = *(unsigned char *)(a1 + 24);
  if (*(char *)(v18 + 31) < 0)
  {
    sub_4200((unsigned char *)a3, *(void **)(v18 + 8), *(void *)(v18 + 16));
    unsigned __int8 v39 = a2[23];
    *(unsigned char *)(a3 + 24) = v34;
    uint64_t v36 = a3 + 32;
    if ((v39 & 0x80) != 0) {
      goto LABEL_69;
    }
LABEL_63:
    *(_OWORD *)uint64_t v36 = *(_OWORD *)a2;
    *(void *)(v36 + 16) = *((void *)a2 + 2);
  }
  else
  {
    long long v35 = *(_OWORD *)(v18 + 8);
    *(void *)(a3 + 16) = *(void *)(v18 + 24);
    *(_OWORD *)a3 = v35;
    *(unsigned char *)(a3 + 24) = v34;
    uint64_t v36 = a3 + 32;
    if ((v30 & 0x80) == 0) {
      goto LABEL_63;
    }
LABEL_69:
    sub_4200((unsigned char *)v36, *(void **)a2, *((void *)a2 + 1));
  }
  if (v27 < 0) {
    operator delete(__s1);
  }
LABEL_74:
  if (SHIBYTE(v47) < 0)
  {
    char v41 = __dst;
    operator delete(v41);
  }
}

void sub_998F2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0)
  {
    operator delete(*(void **)v17);
    if ((v18 & 0x80) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((v18 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void **sub_998FBC(void **a1)
{
  uint64_t v2 = (void **)*a1;
  if (*a1)
  {
    uint64_t v3 = (void **)a1[1];
    uint64_t v4 = *a1;
    if (v3 == v2)
    {
LABEL_11:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (*((char *)v3 - 1) < 0)
      {
        operator delete(*(v3 - 3));
        if (*((char *)v3 - 33) < 0) {
LABEL_9:
        }
          operator delete(*(v3 - 7));
      }
      else if (*((char *)v3 - 33) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 8;
      if (v3 == v2)
      {
        uint64_t v4 = *a1;
        goto LABEL_11;
      }
    }
  }
  return a1;
}

void sub_99904C(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  sub_995114(a1, (char *)v6);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  unint64_t v3 = v7;
  if ((v7 & 0x80u) != 0) {
    unint64_t v3 = (unint64_t)v6[1];
  }
  if (v3)
  {
    uint64_t v4 = v10;
    if ((v10 & 0x80u) != 0) {
      uint64_t v4 = v9;
    }
    if (v4)
    {
      int v5 = 0;
      *(void *)(a2 + 8) = sub_99A640((void **)a2, &v5, (uint64_t)v6);
    }
  }
  if (((char)v10 & 0x80000000) == 0)
  {
    if (((char)v7 & 0x80000000) == 0) {
      return;
    }
LABEL_12:
    operator delete(v6[0]);
    return;
  }
  operator delete(__p);
  if ((char)v7 < 0) {
    goto LABEL_12;
  }
}

void sub_999108(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_998FBC(v2);
  sub_4A0638((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_999124(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  sub_99512C(a1, (char *)v6);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  unint64_t v3 = v7;
  if ((v7 & 0x80u) != 0) {
    unint64_t v3 = (unint64_t)v6[1];
  }
  if (v3)
  {
    uint64_t v4 = v10;
    if ((v10 & 0x80u) != 0) {
      uint64_t v4 = v9;
    }
    if (v4)
    {
      int v5 = 0;
      *(void *)(a2 + 8) = sub_99A640((void **)a2, &v5, (uint64_t)v6);
    }
  }
  if (((char)v10 & 0x80000000) == 0)
  {
    if (((char)v7 & 0x80000000) == 0) {
      return;
    }
LABEL_12:
    operator delete(v6[0]);
    return;
  }
  operator delete(__p);
  if ((char)v7 < 0) {
    goto LABEL_12;
  }
}

void sub_9991E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_998FBC(v2);
  sub_4A0638((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_9991FC(void *a1, uint64_t *a2)
{
  a1[2] = 0;
  uint64_t v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  int64_t v6 = v5 - *a2;
  if (v5 != *a2)
  {
    unint64_t v7 = 0x6DB6DB6DB6DB6DB7 * (v6 >> 3);
    if (v7 >= 0x492492492492493) {
      sub_2E00();
    }
    uint64_t v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[56 * v7];
    a1[1] = sub_9992E4(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_9992B4(_Unwind_Exception *exception_object)
{
  v1[1] = v2;
  if (*v1)
  {
    sub_99957C((uint64_t)v1, *v1);
    operator delete((void *)*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_9992E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  if (a2 != a3)
  {
    int64_t v6 = (long long *)(a2 + 8);
    do
    {
      uint64_t v7 = (uint64_t)v6 - 8;
      *(void *)uint64_t v4 = *((void *)v6 - 1);
      if (*((char *)v6 + 23) < 0)
      {
        sub_4200((unsigned char *)(v4 + 8), *(void **)v6, *((void *)v6 + 1));
      }
      else
      {
        long long v8 = *v6;
        *(void *)(v4 + 24) = *((void *)v6 + 2);
        *(_OWORD *)(v4 + 8) = v8;
      }
      *(void *)(v4 + 32) = 0;
      *(void *)(v4 + 40) = 0;
      *(void *)(v4 + 48) = 0;
      sub_94AEF4((void *)(v4 + 32), *((void *)v6 + 3), *((void *)v6 + 4), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)v6 + 4) - *((void *)v6 + 3)) >> 4));
      uint64_t v4 = v10 + 56;
      v10 += 56;
      int64_t v6 = (long long *)((char *)v6 + 56);
    }
    while (v7 + 56 != a3);
  }
  return v4;
}

void sub_9993C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_9993D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(char *)(v9 + 31) < 0) {
    operator delete(*v10);
  }
  sub_9993FC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_9993FC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_999448(*(void *)a1, **(void **)(a1 + 16), **(void **)(a1 + 16), **(void **)(a1 + 8), **(void **)(a1 + 8));
  }
  return a1;
}

void sub_999448(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3 == a5) {
    return;
  }
  uint64_t v6 = a3;
  do
  {
    uint64_t v7 = *(void ***)(v6 - 24);
    if (!v7) {
      goto LABEL_26;
    }
    long long v8 = *(void ***)(v6 - 16);
    uint64_t v9 = *(void **)(v6 - 24);
    if (v8 != v7)
    {
      while (1)
      {
        uint64_t v10 = (void **)*(v8 - 3);
        if (!v10) {
          goto LABEL_19;
        }
        uint64_t v11 = (void **)*(v8 - 2);
        uint64_t v12 = *(v8 - 3);
        if (v11 != v10) {
          break;
        }
LABEL_18:
        *(v8 - 2) = v10;
        operator delete(v12);
LABEL_19:
        if (*((char *)v8 - 25) < 0)
        {
          operator delete(*(v8 - 6));
          size_t v13 = v8 - 10;
          if (*((char *)v8 - 57) < 0) {
LABEL_23:
          }
            operator delete(*v13);
        }
        else
        {
          size_t v13 = v8 - 10;
          if (*((char *)v8 - 57) < 0) {
            goto LABEL_23;
          }
        }
        long long v8 = v13;
        if (v13 == v7)
        {
          uint64_t v9 = *(void **)(v6 - 24);
          goto LABEL_25;
        }
      }
      while (1)
      {
        if (*((char *)v11 - 1) < 0)
        {
          operator delete(*(v11 - 3));
          if (*((char *)v11 - 25) < 0) {
LABEL_16:
          }
            operator delete(*(v11 - 6));
        }
        else if (*((char *)v11 - 25) < 0)
        {
          goto LABEL_16;
        }
        v11 -= 6;
        if (v11 == v10)
        {
          uint64_t v12 = *(v8 - 3);
          goto LABEL_18;
        }
      }
    }
LABEL_25:
    *(void *)(v6 - 16) = v7;
    operator delete(v9);
LABEL_26:
    if (*(char *)(v6 - 25) < 0) {
      operator delete(*(void **)(v6 - 48));
    }
    v6 -= 56;
  }
  while (v6 != a5);
}

void sub_99957C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4 == a2) {
    goto LABEL_2;
  }
  do
  {
    uint64_t v5 = *(void ***)(v4 - 24);
    if (!v5) {
      goto LABEL_26;
    }
    uint64_t v6 = *(void ***)(v4 - 16);
    uint64_t v7 = *(void **)(v4 - 24);
    if (v6 != v5)
    {
      while (1)
      {
        long long v8 = (void **)*(v6 - 3);
        if (!v8) {
          goto LABEL_19;
        }
        uint64_t v9 = (void **)*(v6 - 2);
        uint64_t v10 = *(v6 - 3);
        if (v9 != v8) {
          break;
        }
LABEL_18:
        *(v6 - 2) = v8;
        operator delete(v10);
LABEL_19:
        if (*((char *)v6 - 25) < 0)
        {
          operator delete(*(v6 - 6));
          uint64_t v11 = v6 - 10;
          if (*((char *)v6 - 57) < 0) {
LABEL_23:
          }
            operator delete(*v11);
        }
        else
        {
          uint64_t v11 = v6 - 10;
          if (*((char *)v6 - 57) < 0) {
            goto LABEL_23;
          }
        }
        uint64_t v6 = v11;
        if (v11 == v5)
        {
          uint64_t v7 = *(void **)(v4 - 24);
          goto LABEL_25;
        }
      }
      while (1)
      {
        if (*((char *)v9 - 1) < 0)
        {
          operator delete(*(v9 - 3));
          if (*((char *)v9 - 25) < 0) {
LABEL_16:
          }
            operator delete(*(v9 - 6));
        }
        else if (*((char *)v9 - 25) < 0)
        {
          goto LABEL_16;
        }
        v9 -= 6;
        if (v9 == v8)
        {
          uint64_t v10 = *(v6 - 3);
          goto LABEL_18;
        }
      }
    }
LABEL_25:
    *(void *)(v4 - 16) = v5;
    operator delete(v7);
LABEL_26:
    if (*(char *)(v4 - 25) < 0) {
      operator delete(*(void **)(v4 - 48));
    }
    v4 -= 56;
  }
  while (v4 != a2);
LABEL_2:
  *(void *)(a1 + 8) = a2;
}

char *sub_9996B8(int a1, long long *a2, long long *a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v10 = __dst;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_4200(v4, *(void **)v6, *((void *)v6 + 1));
      }
      else
      {
        long long v7 = *v6;
        *((void *)v4 + 2) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v4 = v7;
      }
      long long v8 = *(long long *)((char *)v6 + 24);
      *((void *)v4 + 5) = 0;
      *(_OWORD *)(v4 + 24) = v8;
      *((void *)v4 + 6) = 0;
      *((void *)v4 + 7) = 0;
      sub_360840(v4 + 40, *((void *)v6 + 5), *((void *)v6 + 6), (uint64_t)(*((void *)v6 + 6) - *((void *)v6 + 5)) >> 5);
      v6 += 4;
      uint64_t v4 = v10 + 64;
      v10 += 64;
    }
    while (v6 != a3);
  }
  return v4;
}

void sub_999778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_99978C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(char *)(v9 + 23) < 0) {
    operator delete(*(void **)v9);
  }
  sub_9997B0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_9997B0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(void ****)(a1 + 8);
    uint64_t v2 = *(void ****)(a1 + 16);
    uint64_t v4 = *v2;
    uint64_t v5 = *v3;
    if (*v2 != *v3)
    {
      do
      {
        long long v7 = (void **)*(v4 - 3);
        if (v7)
        {
          long long v8 = (void **)*(v4 - 2);
          uint64_t v9 = *(v4 - 3);
          if (v8 != v7)
          {
            do
            {
              if (*((char *)v8 - 1) < 0) {
                operator delete(*(v8 - 3));
              }
              v8 -= 4;
            }
            while (v8 != v7);
            uint64_t v9 = *(v4 - 3);
          }
          *(v4 - 2) = v7;
          operator delete(v9);
        }
        uint64_t v10 = v4 - 8;
        if (*((char *)v4 - 41) < 0) {
          operator delete(*v10);
        }
        v4 -= 8;
      }
      while (v10 != v5);
    }
  }
  return a1;
}

void *sub_99986C(void *a1, uint64_t a2, unint64_t a3)
{
  a1[2] = 0;
  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    if (a3 >= 0x333333333333334) {
      sub_2E00();
    }
    uint64_t v5 = 80 * a3;
    uint64_t v6 = (char *)operator new(80 * a3);
    uint64_t v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    do
    {
      sub_9982A0(&v6[v7], (long long *)(a2 + v7));
      v7 += 80;
    }
    while (v5 != v7);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_999934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_999948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_9999D4(v10, (uint64_t)v12, v12, (uint64_t)v11, v11);
  *(void *)(v9 + 8) = v11;
  sub_99997C(&a9);
  _Unwind_Resume(a1);
}

void ***sub_99997C(void ***a1)
{
  if (*((unsigned char *)a1 + 8)) {
    return a1;
  }
  uint64_t v3 = *a1;
  uint64_t v4 = (void **)**a1;
  if (!v4) {
    return a1;
  }
  sub_999B30((uint64_t)v3, v4);
  operator delete(**a1);
  return a1;
}

void sub_9999D4(uint64_t a1, uint64_t a2, void **a3, uint64_t a4, void **a5)
{
  if (a3 == a5) {
    return;
  }
  uint64_t v6 = a3;
  do
  {
    uint64_t v7 = (uint64_t)*(v6 - 3);
    if (v7)
    {
      sub_99957C((uint64_t)(v6 - 3), v7);
      operator delete(*(v6 - 3));
    }
    long long v8 = (void **)*(v6 - 7);
    if (v8)
    {
      uint64_t v9 = (void **)*(v6 - 6);
      uint64_t v10 = *(v6 - 7);
      if (v9 == v8) {
        goto LABEL_27;
      }
      while (1)
      {
        uint64_t v11 = (void **)*(v9 - 3);
        if (!v11) {
          goto LABEL_21;
        }
        uint64_t v12 = (void **)*(v9 - 2);
        size_t v13 = *(v9 - 3);
        if (v12 != v11) {
          break;
        }
LABEL_20:
        *(v9 - 2) = v11;
        operator delete(v13);
LABEL_21:
        if (*((char *)v9 - 25) < 0)
        {
          operator delete(*(v9 - 6));
          uint64_t v14 = v9 - 10;
          if (*((char *)v9 - 57) < 0) {
LABEL_25:
          }
            operator delete(*v14);
        }
        else
        {
          uint64_t v14 = v9 - 10;
          if (*((char *)v9 - 57) < 0) {
            goto LABEL_25;
          }
        }
        uint64_t v9 = v14;
        if (v14 == v8)
        {
          uint64_t v10 = *(v6 - 7);
LABEL_27:
          *(v6 - 6) = v8;
          operator delete(v10);
          goto LABEL_28;
        }
      }
      while (1)
      {
        if (*((char *)v12 - 1) < 0)
        {
          operator delete(*(v12 - 3));
          if (*((char *)v12 - 25) < 0) {
LABEL_18:
          }
            operator delete(*(v12 - 6));
        }
        else if (*((char *)v12 - 25) < 0)
        {
          goto LABEL_18;
        }
        v12 -= 6;
        if (v12 == v11)
        {
          size_t v13 = *(v9 - 3);
          goto LABEL_20;
        }
      }
    }
LABEL_28:
    int v15 = v6 - 10;
    if (*((char *)v6 - 57) < 0) {
      operator delete(*v15);
    }
    v6 -= 10;
  }
  while (v15 != a5);
}

void sub_999B30(uint64_t a1, void **a2)
{
  uint64_t v4 = *(void ***)(a1 + 8);
  if (v4 == a2) {
    goto LABEL_2;
  }
  do
  {
    uint64_t v5 = (uint64_t)*(v4 - 3);
    if (v5)
    {
      sub_99957C((uint64_t)(v4 - 3), v5);
      operator delete(*(v4 - 3));
    }
    uint64_t v6 = (void **)*(v4 - 7);
    if (v6)
    {
      uint64_t v7 = (void **)*(v4 - 6);
      long long v8 = *(v4 - 7);
      if (v7 == v6) {
        goto LABEL_27;
      }
      while (1)
      {
        uint64_t v9 = (void **)*(v7 - 3);
        if (!v9) {
          goto LABEL_21;
        }
        uint64_t v10 = (void **)*(v7 - 2);
        uint64_t v11 = *(v7 - 3);
        if (v10 != v9) {
          break;
        }
LABEL_20:
        *(v7 - 2) = v9;
        operator delete(v11);
LABEL_21:
        if (*((char *)v7 - 25) < 0)
        {
          operator delete(*(v7 - 6));
          uint64_t v12 = v7 - 10;
          if (*((char *)v7 - 57) < 0) {
LABEL_25:
          }
            operator delete(*v12);
        }
        else
        {
          uint64_t v12 = v7 - 10;
          if (*((char *)v7 - 57) < 0) {
            goto LABEL_25;
          }
        }
        uint64_t v7 = v12;
        if (v12 == v6)
        {
          long long v8 = *(v4 - 7);
LABEL_27:
          *(v4 - 6) = v6;
          operator delete(v8);
          goto LABEL_28;
        }
      }
      while (1)
      {
        if (*((char *)v10 - 1) < 0)
        {
          operator delete(*(v10 - 3));
          if (*((char *)v10 - 25) < 0) {
LABEL_18:
          }
            operator delete(*(v10 - 6));
        }
        else if (*((char *)v10 - 25) < 0)
        {
          goto LABEL_18;
        }
        v10 -= 6;
        if (v10 == v9)
        {
          uint64_t v11 = *(v7 - 3);
          goto LABEL_20;
        }
      }
    }
LABEL_28:
    size_t v13 = v4 - 10;
    if (*((char *)v4 - 57) < 0) {
      operator delete(*v13);
    }
    v4 -= 10;
  }
  while (v13 != a2);
LABEL_2:
  *(void *)(a1 + 8) = a2;
}

uint64_t sub_999C8C(void **a1, uint64_t a2)
{
  uint64_t v3 = ((unsigned char *)a1[1] - (unsigned char *)*a1) >> 6;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 58) {
    sub_2E00();
  }
  uint64_t v6 = (unsigned char *)a1[2] - (unsigned char *)*a1;
  if (v6 >> 5 > v4) {
    unint64_t v4 = v6 >> 5;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFC0) {
    unint64_t v7 = 0x3FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  if (v7)
  {
    if (v7 >> 58) {
      sub_188D718();
    }
    long long v8 = (char *)operator new(v7 << 6);
    uint64_t v9 = &v8[64 * v3];
    uint64_t v23 = (uint64_t)v9;
    uint64_t v24 = (uint64_t)v9;
    uint64_t v25 = &v8[64 * v7];
    if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
      goto LABEL_10;
    }
  }
  else
  {
    long long v8 = 0;
    uint64_t v9 = (char *)(v3 << 6);
    uint64_t v23 = v3 << 6;
    uint64_t v24 = v3 << 6;
    uint64_t v25 = 0;
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    {
LABEL_10:
      *(_OWORD *)uint64_t v9 = *(_OWORD *)a2;
      *((void *)v9 + 2) = *(void *)(a2 + 16);
      goto LABEL_13;
    }
  }
  sub_4200(v9, *(void **)a2, *(void *)(a2 + 8));
LABEL_13:
  uint64_t v10 = &v8[64 * v3];
  long long v11 = *(_OWORD *)(a2 + 24);
  *((void *)v10 + 5) = 0;
  v10 += 40;
  *((_OWORD *)v10 - 1) = v11;
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  sub_360840(v10, *(void *)(a2 + 40), *(void *)(a2 + 48), (uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 5);
  uint64_t v12 = (char *)v23;
  size_t v13 = (void *)(v24 + 64);
  uint64_t v14 = (char *)*a1;
  int v15 = (void **)a1[1];
  if (v15 == *a1)
  {
    *a1 = (void *)v23;
    a1[1] = v13;
    a1[2] = v25;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 4);
      *((void *)v12 - 6) = *(v15 - 6);
      *((_OWORD *)v12 - 4) = v16;
      *(v15 - 7) = 0;
      *(v15 - 6) = 0;
      *(v15 - 8) = 0;
      *(_OWORD *)(v12 - 40) = *(_OWORD *)(v15 - 5);
      *((void *)v12 - 2) = 0;
      *((void *)v12 - 1) = 0;
      *((void *)v12 - 3) = 0;
      *(_OWORD *)(v12 - 24) = *(_OWORD *)(v15 - 3);
      *((void *)v12 - 1) = *(v15 - 1);
      v12 -= 64;
      *(v15 - 3) = 0;
      *(v15 - 2) = 0;
      *(v15 - 1) = 0;
      v15 -= 8;
    }
    while (v15 != (void **)v14);
    uint64_t v17 = (void **)*a1;
    int v15 = (void **)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = v25;
    if (v15 != v17)
    {
      do
      {
        char v18 = (void **)*(v15 - 3);
        if (v18)
        {
          uint64_t v19 = (void **)*(v15 - 2);
          char v20 = *(v15 - 3);
          if (v19 != v18)
          {
            do
            {
              if (*((char *)v19 - 1) < 0) {
                operator delete(*(v19 - 3));
              }
              v19 -= 4;
            }
            while (v19 != v18);
            char v20 = *(v15 - 3);
          }
          *(v15 - 2) = v18;
          operator delete(v20);
        }
        uint64_t v21 = v15 - 8;
        if (*((char *)v15 - 41) < 0) {
          operator delete(*v21);
        }
        v15 -= 8;
      }
      while (v21 != v17);
      int v15 = v17;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v24 + 64;
}

void sub_999EC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_8F4AF8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_999EDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  sub_8F4AF8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_999F00(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 64;
    if (*(char *)(i - 1) < 0)
    {
      operator delete(*(void **)(i - 24));
      if ((*(char *)(i - 33) & 0x80000000) == 0) {
        continue;
      }
    }
    else if ((*(char *)(i - 33) & 0x80000000) == 0)
    {
      continue;
    }
    operator delete(*(void **)(i - 56));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *sub_999F84(void **a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4 = ((unsigned char *)a1[1] - (unsigned char *)*a1) >> 6;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 58) {
    sub_2E00();
  }
  uint64_t v8 = (unsigned char *)a1[2] - (unsigned char *)*a1;
  if (v8 >> 5 > v5) {
    unint64_t v5 = v8 >> 5;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0) {
    unint64_t v9 = 0x3FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 58) {
      sub_188D718();
    }
    uint64_t v10 = (char *)operator new(v9 << 6);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v24 = &v10[64 * v4];
  uint64_t v26 = &v10[64 * v9];
  *(_DWORD *)uint64_t v24 = *a2;
  long long v11 = v24 + 8;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_4200(v11, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)long long v11 = *(_OWORD *)a3;
    *((void *)v24 + 3) = *(void *)(a3 + 16);
  }
  uint64_t v12 = &v10[64 * v4];
  v12[32] = *(unsigned char *)(a3 + 24);
  size_t v13 = v12 + 40;
  if (*(char *)(a3 + 55) < 0)
  {
    sub_4200(v13, *(void **)(a3 + 32), *(void *)(a3 + 40));
  }
  else
  {
    *(_OWORD *)size_t v13 = *(_OWORD *)(a3 + 32);
    *((void *)v12 + 7) = *(void *)(a3 + 48);
  }
  uint64_t v25 = &v10[64 * v4];
  uint64_t v14 = v25 + 64;
  int v15 = (void **)*a1;
  long long v16 = (void **)a1[1];
  if (v16 == *a1)
  {
    *a1 = v24;
    a1[1] = v14;
    a1[2] = v26;
    goto LABEL_30;
  }
  uint64_t v17 = 0;
  do
  {
    char v18 = &v24[v17 * 8];
    uint64_t v19 = &v16[v17];
    *((_DWORD *)v18 - 16) = v16[v17 - 8];
    long long v20 = *(_OWORD *)&v16[v17 - 7];
    *((void *)v18 - 5) = v16[v17 - 5];
    *(_OWORD *)(v18 - 56) = v20;
    *(v19 - 6) = 0;
    *(v19 - 5) = 0;
    *(v19 - 7) = 0;
    *(v18 - 32) = (char)v16[v17 - 4];
    long long v21 = *(_OWORD *)&v16[v17 - 3];
    *((void *)v18 - 1) = v16[v17 - 1];
    *(_OWORD *)(v18 - 24) = v21;
    *(v19 - 2) = 0;
    *(v19 - 1) = 0;
    *(v19 - 3) = 0;
    v17 -= 8;
  }
  while (&v16[v17] != v15);
  size_t v22 = (void **)*a1;
  long long v16 = (void **)a1[1];
  *a1 = &v24[v17 * 8];
  a1[1] = v14;
  a1[2] = v26;
  if (v16 != v22)
  {
    while (1)
    {
      if (*((char *)v16 - 1) < 0)
      {
        operator delete(*(v16 - 3));
        if (*((char *)v16 - 33) < 0) {
LABEL_28:
        }
          operator delete(*(v16 - 7));
      }
      else if (*((char *)v16 - 33) < 0)
      {
        goto LABEL_28;
      }
      v16 -= 8;
      if (v16 == v22)
      {
        long long v16 = v22;
        break;
      }
    }
  }
LABEL_30:
  if (v16) {
    operator delete(v16);
  }
  return v25 + 64;
}

void sub_99A1B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v3 + 31) < 0)
  {
    operator delete(*v2);
    sub_999F00((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_999F00((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_99A1EC(void **a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4 = ((unsigned char *)a1[1] - (unsigned char *)*a1) >> 6;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 58) {
    sub_2E00();
  }
  uint64_t v8 = (unsigned char *)a1[2] - (unsigned char *)*a1;
  if (v8 >> 5 > v5) {
    unint64_t v5 = v8 >> 5;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0) {
    unint64_t v9 = 0x3FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 58) {
      sub_188D718();
    }
    uint64_t v10 = (char *)operator new(v9 << 6);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v24 = &v10[64 * v4];
  uint64_t v26 = &v10[64 * v9];
  *(_DWORD *)uint64_t v24 = *a2;
  long long v11 = v24 + 8;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_4200(v11, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)long long v11 = *(_OWORD *)a3;
    *((void *)v24 + 3) = *(void *)(a3 + 16);
  }
  uint64_t v12 = &v10[64 * v4];
  v12[32] = *(unsigned char *)(a3 + 24);
  size_t v13 = v12 + 40;
  if (*(char *)(a3 + 55) < 0)
  {
    sub_4200(v13, *(void **)(a3 + 32), *(void *)(a3 + 40));
  }
  else
  {
    *(_OWORD *)size_t v13 = *(_OWORD *)(a3 + 32);
    *((void *)v12 + 7) = *(void *)(a3 + 48);
  }
  uint64_t v25 = &v10[64 * v4];
  uint64_t v14 = v25 + 64;
  int v15 = (void **)*a1;
  long long v16 = (void **)a1[1];
  if (v16 == *a1)
  {
    *a1 = v24;
    a1[1] = v14;
    a1[2] = v26;
    goto LABEL_30;
  }
  uint64_t v17 = 0;
  do
  {
    char v18 = &v24[v17 * 8];
    uint64_t v19 = &v16[v17];
    *((_DWORD *)v18 - 16) = v16[v17 - 8];
    long long v20 = *(_OWORD *)&v16[v17 - 7];
    *((void *)v18 - 5) = v16[v17 - 5];
    *(_OWORD *)(v18 - 56) = v20;
    *(v19 - 6) = 0;
    *(v19 - 5) = 0;
    *(v19 - 7) = 0;
    *(v18 - 32) = (char)v16[v17 - 4];
    long long v21 = *(_OWORD *)&v16[v17 - 3];
    *((void *)v18 - 1) = v16[v17 - 1];
    *(_OWORD *)(v18 - 24) = v21;
    *(v19 - 2) = 0;
    *(v19 - 1) = 0;
    *(v19 - 3) = 0;
    v17 -= 8;
  }
  while (&v16[v17] != v15);
  size_t v22 = (void **)*a1;
  long long v16 = (void **)a1[1];
  *a1 = &v24[v17 * 8];
  a1[1] = v14;
  a1[2] = v26;
  if (v16 != v22)
  {
    while (1)
    {
      if (*((char *)v16 - 1) < 0)
      {
        operator delete(*(v16 - 3));
        if (*((char *)v16 - 33) < 0) {
LABEL_28:
        }
          operator delete(*(v16 - 7));
      }
      else if (*((char *)v16 - 33) < 0)
      {
        goto LABEL_28;
      }
      v16 -= 8;
      if (v16 == v22)
      {
        long long v16 = v22;
        break;
      }
    }
  }
LABEL_30:
  if (v16) {
    operator delete(v16);
  }
  return v25 + 64;
}

void sub_99A41C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v3 + 31) < 0)
  {
    operator delete(*v2);
    sub_999F00((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_999F00((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_99A454(void **a1, uint64_t a2)
{
  uint64_t v3 = 0x6DB6DB6DB6DB6DB7 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x492492492492492) {
    sub_2E00();
  }
  if (0xDB6DB6DB6DB6DB6ELL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0xDB6DB6DB6DB6DB6ELL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3)) >= 0x249249249249249) {
    unint64_t v6 = 0x492492492492492;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x492492492492492) {
      sub_188D718();
    }
    unint64_t v7 = (char *)operator new(56 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  uint64_t v8 = &v7[56 * v3];
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)a2;
  unint64_t v9 = &v7[56 * v6];
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  v8[24] = *(unsigned char *)(a2 + 24);
  *((_OWORD *)v8 + 2) = *(_OWORD *)(a2 + 32);
  *((void *)v8 + 6) = *(void *)(a2 + 48);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 32) = 0;
  uint64_t v10 = v8 + 56;
  long long v11 = (void **)*a1;
  uint64_t v12 = (void **)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    if (!v12) {
      return v10;
    }
    goto LABEL_24;
  }
  uint64_t v13 = 0;
  do
  {
    uint64_t v14 = &v8[v13 * 8];
    int v15 = &v12[v13];
    long long v16 = *(_OWORD *)&v12[v13 - 7];
    *((void *)v14 - 5) = v12[v13 - 5];
    *(_OWORD *)(v14 - 56) = v16;
    *(v15 - 6) = 0;
    *(v15 - 5) = 0;
    *(v15 - 7) = 0;
    *(v14 - 32) = (char)v12[v13 - 4];
    long long v17 = *(_OWORD *)&v12[v13 - 3];
    *((void *)v14 - 1) = v12[v13 - 1];
    *(_OWORD *)(v14 - 24) = v17;
    *(v15 - 2) = 0;
    *(v15 - 1) = 0;
    *(v15 - 3) = 0;
    v13 -= 7;
  }
  while (&v12[v13] != v11);
  char v18 = (void **)*a1;
  uint64_t v12 = (void **)a1[1];
  *a1 = &v8[v13 * 8];
  a1[1] = v10;
  a1[2] = v9;
  if (v12 != v18)
  {
    while (1)
    {
      if (*((char *)v12 - 1) < 0)
      {
        operator delete(*(v12 - 3));
        if (*((char *)v12 - 33) < 0) {
LABEL_21:
        }
          operator delete(*(v12 - 7));
      }
      else if (*((char *)v12 - 33) < 0)
      {
        goto LABEL_21;
      }
      v12 -= 7;
      if (v12 == v18)
      {
        uint64_t v12 = v18;
        break;
      }
    }
  }
  if (v12) {
LABEL_24:
  }
    operator delete(v12);
  return v10;
}

char *sub_99A640(void **a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4 = ((unsigned char *)a1[1] - (unsigned char *)*a1) >> 6;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 58) {
    sub_2E00();
  }
  uint64_t v8 = (unsigned char *)a1[2] - (unsigned char *)*a1;
  if (v8 >> 5 > v5) {
    unint64_t v5 = v8 >> 5;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0) {
    unint64_t v9 = 0x3FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 58) {
      sub_188D718();
    }
    uint64_t v10 = (char *)operator new(v9 << 6);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v24 = &v10[64 * v4];
  uint64_t v26 = &v10[64 * v9];
  *(_DWORD *)uint64_t v24 = *a2;
  long long v11 = v24 + 8;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_4200(v11, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)long long v11 = *(_OWORD *)a3;
    *((void *)v24 + 3) = *(void *)(a3 + 16);
  }
  uint64_t v12 = &v10[64 * v4];
  v12[32] = *(unsigned char *)(a3 + 24);
  uint64_t v13 = v12 + 40;
  if (*(char *)(a3 + 55) < 0)
  {
    sub_4200(v13, *(void **)(a3 + 32), *(void *)(a3 + 40));
  }
  else
  {
    *(_OWORD *)uint64_t v13 = *(_OWORD *)(a3 + 32);
    *((void *)v12 + 7) = *(void *)(a3 + 48);
  }
  uint64_t v25 = &v10[64 * v4];
  uint64_t v14 = v25 + 64;
  int v15 = (void **)*a1;
  long long v16 = (void **)a1[1];
  if (v16 == *a1)
  {
    *a1 = v24;
    a1[1] = v14;
    a1[2] = v26;
    goto LABEL_30;
  }
  uint64_t v17 = 0;
  do
  {
    char v18 = &v24[v17 * 8];
    uint64_t v19 = &v16[v17];
    *((_DWORD *)v18 - 16) = v16[v17 - 8];
    long long v20 = *(_OWORD *)&v16[v17 - 7];
    *((void *)v18 - 5) = v16[v17 - 5];
    *(_OWORD *)(v18 - 56) = v20;
    *(v19 - 6) = 0;
    *(v19 - 5) = 0;
    *(v19 - 7) = 0;
    *(v18 - 32) = (char)v16[v17 - 4];
    long long v21 = *(_OWORD *)&v16[v17 - 3];
    *((void *)v18 - 1) = v16[v17 - 1];
    *(_OWORD *)(v18 - 24) = v21;
    *(v19 - 2) = 0;
    *(v19 - 1) = 0;
    *(v19 - 3) = 0;
    v17 -= 8;
  }
  while (&v16[v17] != v15);
  size_t v22 = (void **)*a1;
  long long v16 = (void **)a1[1];
  *a1 = &v24[v17 * 8];
  a1[1] = v14;
  a1[2] = v26;
  if (v16 != v22)
  {
    while (1)
    {
      if (*((char *)v16 - 1) < 0)
      {
        operator delete(*(v16 - 3));
        if (*((char *)v16 - 33) < 0) {
LABEL_28:
        }
          operator delete(*(v16 - 7));
      }
      else if (*((char *)v16 - 33) < 0)
      {
        goto LABEL_28;
      }
      v16 -= 8;
      if (v16 == v22)
      {
        long long v16 = v22;
        break;
      }
    }
  }
LABEL_30:
  if (v16) {
    operator delete(v16);
  }
  return v25 + 64;
}

void sub_99A870(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v3 + 31) < 0)
  {
    operator delete(*v2);
    sub_999F00((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_999F00((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_99A8A8(void *a1, uint64_t a2)
{
  unint64_t v4 = sub_1132F20(a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v8 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v8 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v8 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t v10 = *(void **)(*a1 + 8 * v8);
  if (!v10) {
    return 0;
  }
  unint64_t v9 = (void *)*v10;
  if (*v10)
  {
    if (v7.u32[0] < 2uLL)
    {
      uint64_t v11 = *(void *)&v5 - 1;
      while (1)
      {
        uint64_t v13 = v9[1];
        if (v13 == v6)
        {
          if (sub_1132FD0((uint64_t)(v9 + 2), a2)) {
            return v9;
          }
        }
        else if ((v13 & v11) != v8)
        {
          return 0;
        }
        unint64_t v9 = (void *)*v9;
        if (!v9) {
          return v9;
        }
      }
    }
    do
    {
      unint64_t v12 = v9[1];
      if (v12 == v6)
      {
        if (sub_1132FD0((uint64_t)(v9 + 2), a2)) {
          return v9;
        }
      }
      else
      {
        if (v12 >= *(void *)&v5) {
          v12 %= *(void *)&v5;
        }
        if (v12 != v8) {
          return 0;
        }
      }
      unint64_t v9 = (void *)*v9;
    }
    while (v9);
  }
  return v9;
}

void *sub_99A9E4(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v7 = sub_1132F20(a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      unint64_t v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v14 = v12[1];
            if (v14 == v8)
            {
              if (sub_1132FD0((uint64_t)(v12 + 2), a2)) {
                return v12;
              }
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_23;
            }
            unint64_t v12 = (void *)*v12;
            if (!v12) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (sub_1132FD0((uint64_t)(v12 + 2), a2)) {
              return v12;
            }
          }
          else
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
            if (v13 != v3) {
              break;
            }
          }
          unint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_23:
  unint64_t v12 = operator new(0x18uLL);
  void *v12 = 0;
  v12[1] = v8;
  v12[2] = *a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (v9 && (float)(v16 * (float)v9) >= v15)
  {
    uint64_t v17 = *(void *)a1;
    char v18 = *(void **)(*(void *)a1 + 8 * v3);
    if (v18)
    {
LABEL_26:
      void *v12 = *v18;
LABEL_61:
      *char v18 = v12;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v19 = 1;
    if (v9 >= 3) {
      BOOL v19 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v9);
    unint64_t v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21) {
      size_t prime = v21;
    }
    else {
      size_t prime = v20;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v23 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v23) {
      goto LABEL_37;
    }
    if (prime < *(void *)&v23)
    {
      unint64_t v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v23 < 3uLL || (uint8x8_t v25 = (uint8x8_t)vcnt_s8(v23), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        unint64_t v24 = std::__next_prime(v24);
      }
      else
      {
        uint64_t v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2) {
          unint64_t v24 = v26;
        }
      }
      if (prime <= v24) {
        size_t prime = v24;
      }
      if (prime < *(void *)&v23) {
LABEL_37:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    unint64_t v27 = v9 - 1;
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
      {
        unint64_t v3 = v8 % v9;
        uint64_t v17 = *(void *)a1;
        char v18 = *(void **)(*(void *)a1 + 8 * (v8 % v9));
        if (v18) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v8;
        uint64_t v17 = *(void *)a1;
        char v18 = *(void **)(*(void *)a1 + 8 * v8);
        if (v18) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = v27 & v8;
      uint64_t v17 = *(void *)a1;
      char v18 = *(void **)(*(void *)a1 + 8 * (v27 & v8));
      if (v18) {
        goto LABEL_26;
      }
    }
  }
  void *v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v17 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    unint64_t v28 = *(void *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v28 >= v9) {
        v28 %= v9;
      }
    }
    else
    {
      v28 &= v9 - 1;
    }
    char v18 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_99ACFC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_99AD10(uint64_t a1, void *a2)
{
  uint64_t v11 = 0;
  unint64_t v12 = operator new(0x20uLL);
  long long v13 = xmmword_20B5EB0;
  strcpy((char *)v12, "TransitNotificationBuilder");
  long long __p = 0;
  uint8x8_t v10 = 0;
  unint64_t v4 = sub_374CDC((uint64_t)a2, (uint64_t)&v12, (uint64_t *)&__p);
  sub_99AE34(a1, v4);
  int8x8_t v5 = (void **)__p;
  if (__p)
  {
    unint64_t v6 = v10;
    unint64_t v7 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0) {
          operator delete(*(v6 - 3));
        }
        v6 -= 3;
      }
      while (v6 != v5);
      unint64_t v7 = __p;
    }
    uint8x8_t v10 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(v12);
  }
  *(void *)(a1 + 16) = sub_375500(a2);
  *(void *)(a1 + 24) = sub_3755E4(a2);
  return a1;
}

void sub_99AE0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_99AE34(uint64_t a1, void *a2)
{
  *(void *)long long __p = operator new(0x28uLL);
  *(_OWORD *)&__p[8] = xmmword_20B9260;
  strcpy(*(char **)__p, "max_duration_from_alight_stop_sec");
  *(_DWORD *)a1 = 10 * sub_319F48(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(void *)long long __p = operator new(0x28uLL);
  *(_OWORD *)&__p[8] = xmmword_20B9280;
  strcpy(*(char **)__p, "significant_duration_threshold_sec");
  *(_DWORD *)(a1 + 4) = 10 * sub_319F48(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  __p[23] = 12;
  strcpy(__p, "delay_factor");
  double v4 = sub_5C7E8(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(double *)(a1 + 8) = v4;
  return a1;
}

void sub_99AF6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_99AF90(uint64_t a1@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  sub_5F3B34(a5);
  sub_5F3B34(a5 + 160);
  *(_DWORD *)(a5 + 352) = -1;
  *(_DWORD *)(a5 + 360) = -1;
  *(_DWORD *)(a5 + 363) = -1;
  *(void *)(a5 + 367) = 0;
  *(void *)(a5 + 383) = 0;
  *(void *)(a5 + 375) = 0;
  *(_WORD *)(a5 + 391) = 0;
  *(void *)(a5 + 408) = 0;
  *(void *)(a5 + 416) = 0;
  *(void *)(a5 + 400) = 0;
  *(unsigned char *)(a5 + 424) = 0;
  uint8x8_t v10 = (void **)(a5 + 432);
  *(void *)(a5 + 440) = 0;
  *(void *)(a5 + 448) = 0;
  *(void *)(a5 + 432) = 0;
  *(_DWORD *)(a5 + 456) = 0;
  if (a4)
  {
    sub_99B294(a1, a2, (void **)v28);
    uint64_t v11 = *v10;
    if (*v10)
    {
      *(void *)(a5 + 440) = v11;
      operator delete(v11);
      *uint8x8_t v10 = 0;
      *(void *)(a5 + 440) = 0;
      *(void *)(a5 + 448) = 0;
    }
    unint64_t v12 = *(char **)v28;
    *(void *)(a5 + 432) = *(void *)v28;
    long long v13 = *(char **)&v28[8];
    *(_OWORD *)(a5 + 440) = *(_OWORD *)&v28[8];
    uint64_t v14 = v13;
    if (v12 != v13) {
      goto LABEL_5;
    }
    goto LABEL_7;
  }
  if (0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 4) <= a3) {
    sub_66748();
  }
  sub_99B700(a1, *a2 + 144 * a3, (uint64_t)v28);
  uint64_t v14 = *(char **)(a5 + 440);
  if ((*(_DWORD *)v28 & *(_DWORD *)&v28[4]) != -1 && *(_DWORD *)&v28[16] != 0x7FFFFFFF)
  {
    unint64_t v16 = *(void *)(a5 + 448);
    if ((unint64_t)v14 >= v16)
    {
      char v18 = (char *)*v10;
      unint64_t v19 = 0xCCCCCCCCCCCCCCCDLL * ((v14 - (unsigned char *)*v10) >> 3);
      unint64_t v20 = v19 + 1;
      if (v19 + 1 > 0x666666666666666) {
        sub_2E00();
      }
      unint64_t v21 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v16 - (void)v18) >> 3);
      if (2 * v21 > v20) {
        unint64_t v20 = 2 * v21;
      }
      if (v21 >= 0x333333333333333) {
        unint64_t v22 = 0x666666666666666;
      }
      else {
        unint64_t v22 = v20;
      }
      if (v22)
      {
        if (v22 > 0x666666666666666) {
          sub_188D718();
        }
        int8x8_t v23 = (char *)operator new(40 * v22);
      }
      else
      {
        int8x8_t v23 = 0;
      }
      unint64_t v24 = &v23[40 * v19];
      long long v25 = *(_OWORD *)&v28[16];
      *(_OWORD *)unint64_t v24 = *(_OWORD *)v28;
      *((_OWORD *)v24 + 1) = v25;
      *((void *)v24 + 4) = v29;
      uint64_t v17 = v24 + 40;
      if (v14 != v18)
      {
        do
        {
          long long v26 = *(_OWORD *)(v14 - 40);
          long long v27 = *(_OWORD *)(v14 - 24);
          *(v24 - 8) = *(v14 - 8);
          *(_OWORD *)(v24 - 24) = v27;
          *(_OWORD *)(v24 - 40) = v26;
          v24 -= 40;
          v14 -= 40;
        }
        while (v14 != v18);
        uint64_t v14 = (char *)*v10;
      }
      *(void *)(a5 + 432) = v24;
      *(void *)(a5 + 440) = v17;
      *(void *)(a5 + 448) = &v23[40 * v22];
      if (v14) {
        operator delete(v14);
      }
    }
    else
    {
      *(_OWORD *)uint64_t v14 = *(_OWORD *)v28;
      *((_OWORD *)v14 + 1) = *(_OWORD *)&v28[16];
      *((void *)v14 + 4) = v29;
      uint64_t v17 = v14 + 40;
    }
    *(void *)(a5 + 440) = v17;
    uint64_t v14 = v17;
  }
  unint64_t v12 = (char *)*v10;
  if (*v10 == v14)
  {
LABEL_7:
    int v15 = 0;
    goto LABEL_14;
  }
LABEL_5:
  while (*((void *)v12 + 3) == 1)
  {
    v12 += 40;
    if (v12 == v14) {
      goto LABEL_7;
    }
  }
  int v15 = 1;
LABEL_14:
  *(_DWORD *)(a5 + 456) = v15;
}

void sub_99B244(_Unwind_Exception *a1)
{
  sub_92A294(v1);
  _Unwind_Resume(a1);
}

void sub_99B258(_Unwind_Exception *a1)
{
  sub_92A294(v1);
  _Unwind_Resume(a1);
}

void sub_99B26C(_Unwind_Exception *a1)
{
  sub_92A294(v1);
  _Unwind_Resume(a1);
}

void sub_99B280(_Unwind_Exception *a1)
{
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_99B294(uint64_t a1@<X0>, uint64_t *a2@<X1>, void **a3@<X8>)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v46 = 0;
  int64_t v47 = 0;
  char v45 = 0;
  if (v5 == v4)
  {
    unint64_t v9 = 0;
    unint64_t v8 = 0;
  }
  else
  {
    if (0x8E38E38E38E38E39 * ((v5 - v4) >> 4) > 0x666666666666666) {
      sub_2E00();
    }
    unint64_t v7 = (__n128 *)operator new(0x38E38E38E38E38E8 * ((v5 - v4) >> 4));
    char v45 = v7;
    uint64_t v46 = (char *)v7;
    int64_t v47 = (char *)v7 + 0x38E38E38E38E38E8 * ((v5 - v4) >> 4);
    do
    {
      sub_99B700(a1, v4, (uint64_t)v48);
      unint64_t v7 = (__n128 *)((char *)sub_99C174((char **)&v45, v7, v48) + 40);
      v4 += 144;
    }
    while (v4 != v5);
    unint64_t v8 = (char *)v45;
    unint64_t v9 = (unint64_t)v46;
    if (v45 == (__n128 *)v46)
    {
      unint64_t v8 = v46;
    }
    else
    {
      uint8x8_t v10 = (char *)v45;
      while (1)
      {
        BOOL v11 = *(_DWORD *)v10 == -1 && *((_DWORD *)v10 + 1) == -1;
        if (v11 || *((_DWORD *)v10 + 4) == 0x7FFFFFFF) {
          break;
        }
        v10 += 40;
        if (v10 == v46) {
          goto LABEL_28;
        }
      }
      if (v10 != v46)
      {
        unint64_t v12 = v10 + 40;
        if (v10 + 40 != v46)
        {
          do
          {
            BOOL v13 = *(_DWORD *)v12 == -1 && *((_DWORD *)v12 + 1) == -1;
            if (!v13 && *((_DWORD *)v12 + 4) != 0x7FFFFFFF)
            {
              long long v14 = *(_OWORD *)v12;
              long long v15 = *((_OWORD *)v12 + 1);
              v10[32] = v12[32];
              *(_OWORD *)uint8x8_t v10 = v14;
              *((_OWORD *)v10 + 1) = v15;
              v10 += 40;
            }
            v12 += 40;
          }
          while (v12 != (char *)v9);
        }
      }
      if (v10 != (char *)v9)
      {
        unint64_t v9 = (unint64_t)v10;
        uint64_t v46 = v10;
      }
    }
  }
LABEL_28:
  unint64_t v16 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v9 - (void)v8) >> 3));
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if ((char *)v9 == v8) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = v16;
  }
  sub_99C5C8((unint64_t)v8, v9, v17, 1);
  char v18 = (char *)v45;
  unint64_t v19 = v46;
  if (v45 != (__n128 *)v46)
  {
    unint64_t v20 = (char *)*a3;
    unint64_t v21 = (char *)a3[1];
    while (1)
    {
      while (1)
      {
        while (v20 != v21
             && *(_DWORD *)v18 == *((_DWORD *)v21 - 10)
             && *((_DWORD *)v18 + 1) == *((_DWORD *)v21 - 9)
             && *((_DWORD *)v18 + 2) == *((_DWORD *)v21 - 8))
        {
          int v22 = *((_DWORD *)v18 + 4);
          if (v22 >= *((_DWORD *)v21 - 6)) {
            int v22 = *((_DWORD *)v21 - 6);
          }
          *((_DWORD *)v21 - 6) = v22;
          unsigned int v23 = v18[32];
          unsigned int v24 = *(v21 - 8);
          if (v24 <= v23 && v24 <= 2 || v23 >= 3) {
            LOBYTE(v23) = *(v21 - 8);
          }
          *(v21 - 8) = v23;
          unsigned int v27 = v18[12];
          int v28 = *(v21 - 28);
          BOOL v29 = v18[12] == 0;
          if (v28 != 1) {
            BOOL v29 = v27 < 2;
          }
          if (v28 == 0 || !v29) {
            LOBYTE(v27) = *(v21 - 28);
          }
          *(v21 - 28) = v27;
          unint64_t v30 = *((void *)v21 - 2);
          if (v30 <= *((void *)v18 + 3)) {
            unint64_t v30 = *((void *)v18 + 3);
          }
          *((void *)v21 - 2) = v30;
          v18 += 40;
          if (v18 == v19)
          {
LABEL_78:
            char v18 = (char *)v45;
            goto LABEL_79;
          }
        }
        long long v31 = (char *)a3[2];
        if (v21 >= v31) {
          break;
        }
        long long v32 = *(_OWORD *)v18;
        long long v33 = *((_OWORD *)v18 + 1);
        *((void *)v21 + 4) = *((void *)v18 + 4);
        *(_OWORD *)unint64_t v21 = v32;
        *((_OWORD *)v21 + 1) = v33;
        v21 += 40;
        a3[1] = v21;
        v18 += 40;
        if (v18 == v19) {
          goto LABEL_78;
        }
      }
      unint64_t v34 = 0xCCCCCCCCCCCCCCCDLL * ((v21 - v20) >> 3) + 1;
      if (v34 > 0x666666666666666) {
        sub_2E00();
      }
      unint64_t v35 = 0xCCCCCCCCCCCCCCCDLL * ((v31 - v20) >> 3);
      if (2 * v35 > v34) {
        unint64_t v34 = 2 * v35;
      }
      if (v35 >= 0x333333333333333) {
        unint64_t v36 = 0x666666666666666;
      }
      else {
        unint64_t v36 = v34;
      }
      if (v36)
      {
        if (v36 > 0x666666666666666) {
          sub_188D718();
        }
        char v37 = (char *)operator new(40 * v36);
      }
      else
      {
        char v37 = 0;
      }
      uint64_t v38 = &v37[8 * ((v21 - v20) >> 3)];
      long long v39 = *(_OWORD *)v18;
      long long v40 = *((_OWORD *)v18 + 1);
      *((void *)v38 + 4) = *((void *)v18 + 4);
      *(_OWORD *)uint64_t v38 = v39;
      *((_OWORD *)v38 + 1) = v40;
      if (v20 == v21)
      {
        int64_t v44 = &v37[8 * ((v21 - v20) >> 3)];
        unint64_t v21 = v38 + 40;
        *a3 = v38;
        a3[1] = v38 + 40;
        a3[2] = &v37[40 * v36];
        if (!v20) {
          goto LABEL_74;
        }
      }
      else
      {
        char v41 = &v37[8 * ((v21 - v20) >> 3)];
        do
        {
          long long v42 = *(_OWORD *)(v21 - 40);
          long long v43 = *(_OWORD *)(v21 - 24);
          int64_t v44 = v41 - 40;
          *(v41 - 8) = *(v21 - 8);
          *(_OWORD *)(v41 - 24) = v43;
          *(_OWORD *)(v41 - 40) = v42;
          v21 -= 40;
          v41 -= 40;
        }
        while (v21 != v20);
        unint64_t v21 = v38 + 40;
        *a3 = v44;
        a3[1] = v38 + 40;
        a3[2] = &v37[40 * v36];
        if (!v20) {
          goto LABEL_74;
        }
      }
      operator delete(v20);
LABEL_74:
      unint64_t v20 = v44;
      a3[1] = v21;
      v18 += 40;
      if (v18 == v19) {
        goto LABEL_78;
      }
    }
  }
LABEL_79:
  if (v18)
  {
    uint64_t v46 = v18;
    operator delete(v18);
  }
}

void sub_99B6C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_99B700@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v5 = (void *)(a2 + 8);
  uint64_t v6 = v7;
  int64_t v50 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = v5[1];
  while (v9 != v6)
  {
    uint64_t v10 = v9 - 1096;
    int v11 = *(_DWORD *)(v9 - 8);
    v9 -= 1096;
    if (!v11)
    {
      uint64_t v8 = v10 + 1096;
      break;
    }
  }
  unint64_t v12 = 0xE21A291C077975B9 * ((v8 - v6) >> 3);
  unint64_t v13 = v12 - 1;
  if (0xE21A291C077975B9 * ((v5[1] - v6) >> 3) <= v12 - 1) {
    sub_66748();
  }
  long long v14 = (long long *)(v6 + 1096 * v13);
  long long v15 = *v14;
  long long v16 = v14[1];
  long long v17 = v14[2];
  *(void *)&v53[14] = *(void *)((char *)v14 + 46);
  long long v52 = v16;
  *(_OWORD *)uint64_t v53 = v17;
  long long v51 = v15;
  BYTE4(v54) = *((unsigned char *)v14 + 60);
  if (BYTE4(v54)) {
    LODWORD(v54) = *((_DWORD *)v14 + 14);
  }
  int v55 = 0;
  int v48 = sub_49A0F4((unsigned int *)&v51);
  unint64_t v49 = (unsigned int *)(v6 + 1096 * v13);
  unint64_t v46 = v12 - 1;
  uint64_t v47 = a3;
  if (v55 == 3)
  {
    sub_3AFFFC((uint64_t)v53);
    if (v8 == v6) {
      goto LABEL_37;
    }
  }
  else
  {
    if (v55 == 1 && *(void *)&v53[16])
    {
      uint64_t v54 = *(void *)&v53[16];
      operator delete(*(void **)&v53[16]);
    }
    if (v8 == v6) {
      goto LABEL_37;
    }
  }
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  do
  {
    --v12;
    unint64_t v21 = (unsigned int *)(*v50 + 1096 * v12);
    if (v21[272]) {
      break;
    }
    sub_99BC50((int *)a1, (unsigned int *)(*v50 + 1096 * v12), v48, v18, v19 == 0, v12 != 0, (unint64_t *)&v51);
    if (v51 && DWORD1(v51) != -1)
    {
      sub_99BFFC(a1, v51, SDWORD2(v51), v52, v47);
      return result;
    }
    unsigned int v23 = v21[4];
    unsigned int v22 = v21[5];
    if (v23 <= v22) {
      unsigned int v24 = v21[5];
    }
    else {
      unsigned int v24 = v21[4];
    }
    if (v22 <= v23)
    {
      uint64_t v20 = 0;
    }
    else
    {
      uint64_t v20 = 0;
      do
      {
        uint64_t v26 = v21[1];
        unsigned int v27 = sub_369B60(*(void *)(a1 + 24), v21[2] | (unint64_t)(v26 << 32), 0);
        int v28 = &v27[-*(int *)v27];
        if (*(unsigned __int16 *)v28 < 5u)
        {
          uint64_t v29 = 0;
        }
        else
        {
          uint64_t v29 = *((unsigned __int16 *)v28 + 2);
          if (*((_WORD *)v28 + 2)) {
            v29 += (uint64_t)&v27[*(unsigned int *)&v27[v29]];
          }
        }
        unint64_t v30 = (int *)(v29 + 4 * v26 + 4 + *(unsigned int *)(v29 + 4 * v26 + 4));
        long long v31 = (unsigned __int16 *)((char *)v30 - *v30);
        if (*v31 >= 0xDu && (uint64_t v32 = v31[6]) != 0) {
          int v25 = *(int *)((char *)v30 + v32);
        }
        else {
          int v25 = -1;
        }
        if (!v27[24 * v25
                + 22
                + 24 * v23
                + *((unsigned __int16 *)v28 + 3)
                + *(unsigned int *)&v27[*((unsigned __int16 *)v28 + 3)]])
          ++v20;
        ++v23;
      }
      while (v24 != v23);
    }
    v18 += v20;
    ++v19;
  }
  while (v12);
LABEL_37:
  unsigned int v33 = v49[5];
  uint64_t v34 = v49[1];
  unint64_t v35 = sub_369B60(*(void *)(a1 + 24), v49[2] | (unint64_t)(v34 << 32), 0);
  int v36 = v33 - 1;
  char v37 = &v35[-*(int *)v35];
  if (*(unsigned __int16 *)v37 < 5u)
  {
    uint64_t v38 = 0;
  }
  else
  {
    uint64_t v38 = *((unsigned __int16 *)v37 + 2);
    if (*((_WORD *)v37 + 2)) {
      v38 += (uint64_t)&v35[*(unsigned int *)&v35[v38]];
    }
  }
  long long v39 = (int *)(v38 + 4 * v34 + 4 + *(unsigned int *)(v38 + 4 * v34 + 4));
  long long v40 = (unsigned __int16 *)((char *)v39 - *v39);
  if (*v40 >= 0xDu && (uint64_t v41 = v40[6]) != 0) {
    int v42 = *(int *)((char *)v39 + v41);
  }
  else {
    int v42 = -1;
  }
  unint64_t v43 = *(void *)&v35[24 * (v42 + v36)
                      + 4
                      + *((unsigned __int16 *)v37 + 3)
                      + *(unsigned int *)&v35[*((unsigned __int16 *)v37 + 3)]];
  int v44 = 10 * (v48 - sub_99BB30(a1, (uint64_t)v49, v36, 1));
  if (!v46 && v49[5] - v49[4] == 1 && v44 <= *(_DWORD *)(a1 + 4))
  {
    *(_OWORD *)(v47 + 8) = 0u;
    *(_OWORD *)(v47 + 24) = 0u;
    double result = NAN;
    *(void *)uint64_t v47 = -1;
    *(_DWORD *)(v47 + 8) = 0x7FFFFFFF;
    *(_DWORD *)(v47 + 16) = 0x7FFFFFFF;
    *(unsigned char *)(v47 + 32) = 0;
  }
  else
  {
    sub_99BFFC(a1, v43, v44, 1uLL, v47);
  }
  return result;
}

void sub_99BB18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_99BF7C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_99BB30(uint64_t a1, uint64_t a2, int a3, int a4)
{
  unint64_t v18 = (unint64_t)vrev64_s32(*(int32x2_t *)(a2 + 4));
  uint64_t v8 = (int *)sub_369F8C(*(void *)(a1 + 24), v18, 0, "trip");
  uint64_t v9 = (unsigned __int16 *)((char *)v8 - *v8);
  if (*v9 >= 0x13u && (uint64_t v10 = v9[9]) != 0 && *(int *)((char *)v8 + v10 + *(unsigned int *)((char *)v8 + v10)))
  {
    int v11 = sub_920698(*(void *)(a1 + 24), (uint64_t)&v18, *(unsigned int *)(a2 + 12), *(_DWORD *)(a2 + 16));
    uint64_t v12 = *(void *)(a1 + 24);
    uint64_t v13 = *(unsigned int *)(a2 + 12);
    if (a4) {
      int v14 = sub_920698(v12, (uint64_t)&v18, v13, a3);
    }
    else {
      int v14 = sub_92084C(v12, (uint64_t)&v18, v13, a3);
    }
    return (v14 - v11 + *(_DWORD *)(a2 + 24));
  }
  else
  {
    uint64_t v15 = *(void *)(a1 + 24);
    uint64_t v16 = *(unsigned int *)(a2 + 12);
    if (a4) {
      return sub_920698(v15, (uint64_t)&v18, v16, a3);
    }
    else {
      return sub_92084C(v15, (uint64_t)&v18, v16, a3);
    }
  }
}

int *sub_99BC50@<X0>(int *result@<X0>, unsigned int *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, int a6@<W5>, unint64_t *a7@<X8>)
{
  unsigned int v7 = a2[5] + (a5 ^ 1);
  unsigned int v8 = a2[4] + (a6 ^ 1);
  if (v7 <= v8)
  {
LABEL_29:
    unint64_t v34 = 0;
    unint64_t v35 = a7;
    *a7 = 0xFFFFFFFF00000000;
    int v29 = 0x7FFFFFFF;
  }
  else
  {
    uint64_t v10 = (uint64_t)result;
    uint64_t v11 = a2[1];
    unint64_t v12 = a2[2] | (unint64_t)(v11 << 32);
    uint64_t v13 = 4 * v11;
    unsigned int v14 = v7 - 1;
    while (1)
    {
      double result = (int *)sub_369B60(*(void *)(v10 + 24), v12, 0);
      uint64_t v15 = (unsigned __int16 *)((char *)result - *result);
      if (*v15 < 5u)
      {
        uint64_t v16 = 0;
      }
      else
      {
        uint64_t v16 = v15[2];
        if (v15[2]) {
          v16 += (uint64_t)result + *(unsigned int *)((char *)result + v16);
        }
      }
      long long v17 = (int *)(v16 + v13 + 4 + *(unsigned int *)(v16 + v13 + 4));
      unint64_t v18 = (unsigned __int16 *)((char *)v17 - *v17);
      if (*v18 >= 0xDu && (uint64_t v19 = v18[6]) != 0) {
        int v20 = *(int *)((char *)v17 + v19);
      }
      else {
        int v20 = -1;
      }
      --v7;
      if (!*((unsigned char *)&result[6 * v20 + 5 + 6 * v7] + v15[3] + *(unsigned int *)((char *)result + v15[3]) + 2))
      {
        unint64_t v21 = sub_369B60(*(void *)(v10 + 24), v12, 0);
        unsigned int v22 = &v21[-*(int *)v21];
        if (*(unsigned __int16 *)v22 < 5u)
        {
          uint64_t v23 = 0;
        }
        else
        {
          uint64_t v23 = *((unsigned __int16 *)v22 + 2);
          if (*((_WORD *)v22 + 2)) {
            v23 += (uint64_t)&v21[*(unsigned int *)&v21[v23]];
          }
        }
        unsigned int v24 = (int *)(v23 + v13 + 4 + *(unsigned int *)(v23 + v13 + 4));
        int v25 = (unsigned __int16 *)((char *)v24 - *v24);
        if (*v25 >= 0xDu && (uint64_t v26 = v25[6]) != 0) {
          int v27 = *(int *)((char *)v24 + v26);
        }
        else {
          int v27 = -1;
        }
        unint64_t v28 = *(void *)&v21[24 * v27
                            + 4
                            + 24 * v7
                            + *((unsigned __int16 *)v22 + 3)
                            + *(unsigned int *)&v21[*((unsigned __int16 *)v22 + 3)]];
        double result = (int *)sub_99BB30(v10, (uint64_t)a2, v7, a2[5] > v7);
        int v29 = 10 * (a3 - result);
        if (v29 > *(_DWORD *)v10) {
          goto LABEL_29;
        }
        double result = (int *)sub_498D5C(*(void *)(v10 + 16), v28, 0, "stop");
        unint64_t v30 = (unsigned __int16 *)((char *)result - *result);
        if (*v30 >= 0x3Fu)
        {
          uint64_t v31 = v30[31];
          if (v31)
          {
            if (*((unsigned char *)result + v31) == 1) {
              break;
            }
          }
        }
      }
      --v14;
      if (v8 >= v7) {
        goto LABEL_29;
      }
    }
    unsigned int v32 = a2[5];
    if (v32 <= v7)
    {
      uint64_t v33 = 0;
    }
    else
    {
      uint64_t v33 = 0;
      if (v32 > v14) {
        unsigned int v14 = a2[5];
      }
      do
      {
        uint64_t v37 = a2[1];
        double result = (int *)sub_369B60(*(void *)(v10 + 24), a2[2] | (unint64_t)(v37 << 32), 0);
        uint64_t v38 = (unsigned __int16 *)((char *)result - *result);
        if (*v38 < 5u)
        {
          uint64_t v39 = 0;
        }
        else
        {
          uint64_t v39 = v38[2];
          if (v38[2]) {
            v39 += (uint64_t)result + *(unsigned int *)((char *)result + v39);
          }
        }
        long long v40 = (int *)(v39 + 4 * v37 + 4 + *(unsigned int *)(v39 + 4 * v37 + 4));
        uint64_t v41 = (unsigned __int16 *)((char *)v40 - *v40);
        if (*v41 >= 0xDu && (uint64_t v42 = v41[6]) != 0) {
          int v36 = *(int *)((char *)v40 + v42);
        }
        else {
          int v36 = -1;
        }
        if (!*((unsigned char *)&result[6 * v36 + 5 + 6 * v7] + v38[3] + *(unsigned int *)((char *)result + v38[3]) + 2)) {
          ++v33;
        }
        ++v7;
      }
      while (v14 != v7);
    }
    unint64_t v35 = a7;
    unint64_t v34 = v33 + a4;
    *a7 = v28;
  }
  *((_DWORD *)v35 + 2) = v29;
  void v35[2] = v34;
  return result;
}

uint64_t sub_99BF7C(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 1088);
  if (v2 == 3)
  {
    sub_3AFFFC(a1 + 32);
    return a1;
  }
  else
  {
    if (v2 != 1)
    {
      if (!v2)
      {
        if (*(unsigned char *)(a1 + 60)) {
          *(unsigned char *)(a1 + 60) = 0;
        }
      }
      return a1;
    }
    uint64_t v4 = *(void **)(a1 + 48);
    if (!v4) {
      return a1;
    }
    *(void *)(a1 + 56) = v4;
    operator delete(v4);
    return a1;
  }
}

int *sub_99BFFC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)a5 = -1;
  *(_DWORD *)(a5 + 8) = 0x7FFFFFFF;
  *(unsigned char *)(a5 + 12) = 0;
  *(_DWORD *)(a5 + 16) = 0x7FFFFFFF;
  *(void *)(a5 + 24) = 0;
  *(unsigned char *)(a5 + 32) = 0;
  uint64_t v10 = (int *)sub_498D5C(*(void *)(a1 + 16), a2, 0, "stop");
  uint64_t v11 = (uint64_t)v10 + *(unsigned __int16 *)((char *)v10 - *v10 + 6);
  uint64_t v12 = *(unsigned int *)v11;
  LODWORD(v11) = *(_DWORD *)(v11 + 4);
  if (v11 >= 0xFFFFFFFE) {
    uint64_t v11 = 4294967294;
  }
  else {
    uint64_t v11 = v11;
  }
  *(void *)a5 = v12 | (v11 << 32);
  *(_DWORD *)(a5 + 8) = 0x7FFFFFFF;
  double result = (int *)sub_498D5C(*(void *)(a1 + 16), a2, 0, "stop");
  LOBYTE(v14) = 0;
  uint64_t v15 = (unsigned __int16 *)((char *)result - *result);
  if (*v15 >= 0x3Fu)
  {
    uint64_t v14 = v15[31];
    if (v15[31]) {
      LOBYTE(v14) = *((unsigned char *)result + v14);
    }
  }
  *(unsigned char *)(a5 + 12) = v14;
  *(_DWORD *)(a5 + 16) = 0;
  *(void *)(a5 + 24) = a4;
  if (a4 > 1)
  {
    char v16 = 2;
    goto LABEL_20;
  }
  double v17 = *(double *)(a1 + 8) * (double)a3;
  if (v17 >= 0.0)
  {
    if (v17 >= 4.50359963e15) {
      goto LABEL_17;
    }
    uint64_t v18 = (uint64_t)(v17 + v17) + 1;
  }
  else
  {
    if (v17 <= -4.50359963e15) {
      goto LABEL_17;
    }
    uint64_t v18 = (uint64_t)(v17 + v17);
    if (v18 >= 1) {
      --v18;
    }
  }
  double v17 = (double)(v18 >> 1);
LABEL_17:
  *(_DWORD *)(a5 + 16) = (int)v17;
  if (*(_DWORD *)(a1 + 4) >= a3) {
    char v16 = 1;
  }
  else {
    char v16 = 2;
  }
LABEL_20:
  *(unsigned char *)(a5 + 32) = v16;
  return result;
}

__n128 *sub_99C174(char **a1, __n128 *__src, __n128 *a3)
{
  uint64_t v4 = __src;
  uint64_t v6 = (__n128 *)a1[1];
  unint64_t v7 = (unint64_t)a1[2];
  if ((unint64_t)v6 >= v7)
  {
    uint64_t v15 = (__n128 *)*a1;
    unint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v6 - *a1) >> 3) + 1;
    if (v16 > 0x666666666666666) {
      sub_2E00();
    }
    unint64_t v17 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - (void)v15) >> 3);
    if (2 * v17 > v16) {
      unint64_t v16 = 2 * v17;
    }
    if (v17 >= 0x333333333333333) {
      unint64_t v18 = 0x666666666666666;
    }
    else {
      unint64_t v18 = v16;
    }
    uint64_t v39 = a1 + 2;
    if (v18)
    {
      if (v18 > 0x666666666666666) {
        sub_188D718();
      }
      uint64_t v19 = (__n128 *)operator new(40 * v18);
    }
    else
    {
      uint64_t v19 = 0;
    }
    unint64_t v35 = v19;
    int v36 = &v19->n128_i8[8 * (((char *)v4 - (char *)v15) >> 3)];
    std::string __dst = v36;
    uint64_t v38 = (char *)v19 + 40 * v18;
    sub_99C440((uint64_t)&v35, a3);
    unsigned int v22 = v36;
    uint64_t v23 = (__n128 *)*a1;
    unsigned int v24 = v36;
    if (*a1 != (char *)v4)
    {
      int v25 = v4;
      uint64_t v26 = v36;
      do
      {
        long long v27 = *(long long *)((char *)&v25[-3] + 8);
        long long v28 = *(long long *)((char *)&v25[-2] + 8);
        unsigned int v24 = v26 - 40;
        *(v26 - 8) = v25[-1].n128_i8[8];
        *(_OWORD *)(v26 - 24) = v28;
        *(_OWORD *)(v26 - 40) = v27;
        int v25 = (__n128 *)((char *)v25 - 40);
        v26 -= 40;
      }
      while (v25 != v23);
    }
    int v36 = v24;
    int v29 = (__n128 *)a1[1];
    unint64_t v30 = (char *)__dst;
    int64_t v31 = (char *)v29 - (char *)v4;
    if (v29 != v4)
    {
      memmove(__dst, v4, v31 - 7);
      unsigned int v24 = v36;
      uint64_t v4 = (__n128 *)a1[1];
    }
    unsigned int v32 = (__n128 *)*a1;
    *a1 = v24;
    a1[1] = &v30[v31];
    uint64_t v33 = a1[2];
    a1[2] = v38;
    std::string __dst = v4;
    uint64_t v38 = v33;
    unint64_t v35 = v32;
    int v36 = (char *)v32;
    if (v4 != v32) {
      std::string __dst = (char *)v32 + ((char *)v4 - (char *)v32 - 40) % 0x28uLL;
    }
    if (v32) {
      operator delete(v32);
    }
    return (__n128 *)v22;
  }
  else if (__src == v6)
  {
    __n128 v20 = *a3;
    __n128 v21 = a3[1];
    __src[2].n128_u64[0] = a3[2].n128_u64[0];
    *int __src = v20;
    __src[1] = v21;
    a1[1] = &__src[2].n128_i8[8];
  }
  else
  {
    unsigned int v8 = (__n128 *)((char *)__src + 40);
    uint64_t v9 = &v6[-3].n128_i8[8];
    uint64_t v10 = a1[1];
    if ((unint64_t)v6 >= 0x28)
    {
      do
      {
        long long v11 = *(_OWORD *)v9;
        long long v12 = *((_OWORD *)v9 + 1);
        *((void *)v10 + 4) = *((void *)v9 + 4);
        *(_OWORD *)uint64_t v10 = v11;
        *((_OWORD *)v10 + 1) = v12;
        v9 += 40;
        v10 += 40;
      }
      while (v9 < (char *)v6);
    }
    a1[1] = v10;
    if (v6 != v8) {
      memmove(v8, __src, (char *)v6 - (char *)v8 - 7);
    }
    __n128 v13 = *a3;
    __n128 v14 = a3[1];
    v4[2].n128_u8[0] = a3[2].n128_u8[0];
    *uint64_t v4 = v13;
    v4[1] = v14;
  }
  return v4;
}

void sub_99C3E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (a12 == a11)
  {
    __n128 v13 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  else
  {
    __n128 v13 = __p;
    if (!__p) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

__n128 sub_99C440(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = *(__n128 **)(a1 + 16);
  if (v4 == *(__n128 **)(a1 + 24))
  {
    uint64_t v6 = *(__n128 **)a1;
    unint64_t v5 = *(void *)(a1 + 8);
    if (v5 <= *(void *)a1)
    {
      unint64_t v15 = 0x999999999999999ALL * (((char *)v4 - (char *)v6) >> 3);
      if (v4 == v6) {
        unint64_t v15 = 1;
      }
      if (v15 >= 0x666666666666667) {
        sub_188D718();
      }
      unint64_t v16 = v15 >> 2;
      uint64_t v17 = 40 * v15;
      unint64_t v18 = (char *)operator new(40 * v15);
      uint64_t v19 = (__n128 *)&v18[40 * v16];
      uint64_t v21 = (uint64_t)v4 - v5;
      BOOL v20 = v4 == (__n128 *)v5;
      uint64_t v4 = v19;
      if (!v20)
      {
        uint64_t v22 = v21 / 40;
        uint64_t v4 = (__n128 *)((char *)v19 + 40 * v22);
        uint64_t v23 = 40 * v22;
        unsigned int v24 = &v18[40 * v16];
        do
        {
          __n128 v25 = *(__n128 *)v5;
          long long v26 = *(_OWORD *)(v5 + 16);
          *((void *)v24 + 4) = *(void *)(v5 + 32);
          *(__n128 *)unsigned int v24 = v25;
          *((_OWORD *)v24 + 1) = v26;
          v24 += 40;
          v5 += 40;
          v23 -= 40;
        }
        while (v23);
      }
      *(void *)a1 = v18;
      *(void *)(a1 + 8) = v19;
      *(void *)(a1 + 16) = v4;
      *(void *)(a1 + 24) = &v18[v17];
      if (v6)
      {
        operator delete(v6);
        uint64_t v4 = *(__n128 **)(a1 + 16);
      }
    }
    else
    {
      int64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *(void *)a1) >> 3);
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = v8 >> 1;
      uint64_t v10 = -v9;
      uint64_t v11 = -40 * v9;
      unint64_t v12 = v5 + v11;
      __n128 v13 = (char *)v4 - v5;
      if (v4 != (__n128 *)v5)
      {
        memmove((void *)(v5 + v11), *(const void **)(a1 + 8), (size_t)(v13 - 7));
        uint64_t v4 = *(__n128 **)(a1 + 8);
      }
      __n128 v14 = (char *)v4 + 40 * v10;
      uint64_t v4 = (__n128 *)&v13[v12];
      *(void *)(a1 + 8) = v14;
      *(void *)(a1 + 16) = &v13[v12];
    }
  }
  __n128 result = *a2;
  __n128 v28 = a2[1];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  *uint64_t v4 = result;
  v4[1] = v28;
  *(void *)(a1 + 16) += 40;
  return result;
}

void sub_99C5C8(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
__n128 sub_99DCB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  result.n128_u64[0] = sub_99E928(a1, a2, a3, a4).n128_u64[0];
  int v11 = a5[2];
  int v12 = *(_DWORD *)(a4 + 8);
  if (v11 == 0x7FFFFFFF)
  {
    BOOL v13 = v12 != 0x7FFFFFFF;
    unsigned int v14 = *a5;
    unsigned int v15 = *(_DWORD *)a4;
    if (*a5 < *(_DWORD *)a4) {
      goto LABEL_15;
    }
  }
  else
  {
    if (v12 != 0x7FFFFFFF)
    {
      if (*a5 >= *(_DWORD *)a4)
      {
        if (*(_DWORD *)a4 < *a5) {
          return result;
        }
        unsigned int v43 = a5[1];
        unsigned int v44 = *(_DWORD *)(a4 + 4);
        if (v43 >= v44 && (v11 >= v12 || v44 < v43)) {
          return result;
        }
      }
      goto LABEL_15;
    }
    BOOL v13 = 0;
    unsigned int v14 = *a5;
    unsigned int v15 = *(_DWORD *)a4;
    if (*a5 < *(_DWORD *)a4) {
      goto LABEL_15;
    }
  }
  if (v15 < v14) {
    return result;
  }
  unsigned int v16 = a5[1];
  unsigned int v17 = *(_DWORD *)(a4 + 4);
  if (v16 >= v17)
  {
    BOOL v18 = v11 == 0x7FFFFFFF && v13;
    if (v17 < v16 || !v18) {
      return result;
    }
  }
LABEL_15:
  uint64_t v19 = *(void *)(a4 + 32);
  __n128 result = *(__n128 *)a4;
  long long v20 = *(_OWORD *)(a4 + 16);
  char v21 = *((unsigned char *)a5 + 32);
  long long v22 = *((_OWORD *)a5 + 1);
  *(_OWORD *)a4 = *(_OWORD *)a5;
  *(_OWORD *)(a4 + 16) = v22;
  *(unsigned char *)(a4 + 32) = v21;
  *(__n128 *)a5 = result;
  *((_OWORD *)a5 + 1) = v20;
  *((unsigned char *)a5 + 32) = v19;
  int v23 = *(_DWORD *)(a4 + 8);
  int v24 = *(_DWORD *)(a3 + 8);
  if (v23 == 0x7FFFFFFF)
  {
    BOOL v25 = v24 != 0x7FFFFFFF;
    unsigned int v26 = *(_DWORD *)a4;
    unsigned int v27 = *(_DWORD *)a3;
    if (*(_DWORD *)a4 < *(_DWORD *)a3) {
      goto LABEL_29;
    }
  }
  else
  {
    if (v24 != 0x7FFFFFFF)
    {
      if (*(_DWORD *)a4 >= *(_DWORD *)a3)
      {
        if (*(_DWORD *)a3 < *(_DWORD *)a4) {
          return result;
        }
        unsigned int v57 = *(_DWORD *)(a4 + 4);
        unsigned int v58 = *(_DWORD *)(a3 + 4);
        if (v57 >= v58 && (v23 >= v24 || v58 < v57)) {
          return result;
        }
      }
      goto LABEL_29;
    }
    BOOL v25 = 0;
    unsigned int v26 = *(_DWORD *)a4;
    unsigned int v27 = *(_DWORD *)a3;
    if (*(_DWORD *)a4 < *(_DWORD *)a3) {
      goto LABEL_29;
    }
  }
  if (v27 < v26) {
    return result;
  }
  unsigned int v28 = *(_DWORD *)(a4 + 4);
  unsigned int v29 = *(_DWORD *)(a3 + 4);
  if (v28 >= v29)
  {
    BOOL v30 = v23 == 0x7FFFFFFF && v25;
    if (v29 < v28 || !v30) {
      return result;
    }
  }
LABEL_29:
  uint64_t v31 = *(void *)(a3 + 32);
  __n128 result = *(__n128 *)a3;
  long long v32 = *(_OWORD *)(a3 + 16);
  char v33 = *(unsigned char *)(a4 + 32);
  long long v34 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(_OWORD *)(a3 + 16) = v34;
  *(unsigned char *)(a3 + 32) = v33;
  *(__n128 *)a4 = result;
  *(_OWORD *)(a4 + 16) = v32;
  *(unsigned char *)(a4 + 32) = v31;
  int v35 = *(_DWORD *)(a3 + 8);
  int v36 = *(_DWORD *)(a2 + 8);
  if (v35 == 0x7FFFFFFF)
  {
    BOOL v37 = v36 != 0x7FFFFFFF;
    unsigned int v38 = *(_DWORD *)a3;
    unsigned int v39 = *(_DWORD *)a2;
    if (*(_DWORD *)a3 < *(_DWORD *)a2) {
      goto LABEL_48;
    }
  }
  else
  {
    if (v36 != 0x7FFFFFFF)
    {
      if (*(_DWORD *)a3 >= *(_DWORD *)a2)
      {
        if (*(_DWORD *)a2 < *(_DWORD *)a3) {
          return result;
        }
        unsigned int v63 = *(_DWORD *)(a3 + 4);
        unsigned int v64 = *(_DWORD *)(a2 + 4);
        if (v63 >= v64 && (v35 >= v36 || v64 < v63)) {
          return result;
        }
      }
      goto LABEL_48;
    }
    BOOL v37 = 0;
    unsigned int v38 = *(_DWORD *)a3;
    unsigned int v39 = *(_DWORD *)a2;
    if (*(_DWORD *)a3 < *(_DWORD *)a2) {
      goto LABEL_48;
    }
  }
  if (v39 < v38) {
    return result;
  }
  unsigned int v40 = *(_DWORD *)(a3 + 4);
  unsigned int v41 = *(_DWORD *)(a2 + 4);
  if (v40 >= v41)
  {
    BOOL v42 = v35 == 0x7FFFFFFF && v37;
    if (v41 < v40 || !v42) {
      return result;
    }
  }
LABEL_48:
  uint64_t v45 = *(void *)(a2 + 32);
  __n128 result = *(__n128 *)a2;
  long long v46 = *(_OWORD *)(a2 + 16);
  char v47 = *(unsigned char *)(a3 + 32);
  long long v48 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v48;
  *(unsigned char *)(a2 + 32) = v47;
  *(__n128 *)a3 = result;
  *(_OWORD *)(a3 + 16) = v46;
  *(unsigned char *)(a3 + 32) = v45;
  int v49 = *(_DWORD *)(a2 + 8);
  int v50 = *(_DWORD *)(a1 + 8);
  if (v49 == 0x7FFFFFFF)
  {
    BOOL v51 = v50 != 0x7FFFFFFF;
    unsigned int v52 = *(_DWORD *)a2;
    unsigned int v53 = *(_DWORD *)a1;
    if (*(_DWORD *)a2 < *(_DWORD *)a1) {
      goto LABEL_67;
    }
LABEL_53:
    if (v53 >= v52)
    {
      unsigned int v54 = *(_DWORD *)(a2 + 4);
      unsigned int v55 = *(_DWORD *)(a1 + 4);
      if (v54 < v55) {
        goto LABEL_67;
      }
      BOOL v56 = v49 == 0x7FFFFFFF && v51;
      if (v55 >= v54 && v56) {
        goto LABEL_67;
      }
    }
    return result;
  }
  if (v50 == 0x7FFFFFFF)
  {
    BOOL v51 = 0;
    unsigned int v52 = *(_DWORD *)a2;
    unsigned int v53 = *(_DWORD *)a1;
    if (*(_DWORD *)a2 < *(_DWORD *)a1)
    {
LABEL_67:
      uint64_t v59 = *(void *)(a1 + 32);
      __n128 result = *(__n128 *)a1;
      long long v60 = *(_OWORD *)(a1 + 16);
      char v61 = *(unsigned char *)(a2 + 32);
      long long v62 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v62;
      *(unsigned char *)(a1 + 32) = v61;
      *(__n128 *)a2 = result;
      *(_OWORD *)(a2 + 16) = v60;
      *(unsigned char *)(a2 + 32) = v59;
      return result;
    }
    goto LABEL_53;
  }
  if (*(_DWORD *)a2 < *(_DWORD *)a1) {
    goto LABEL_67;
  }
  if (*(_DWORD *)a1 >= *(_DWORD *)a2)
  {
    unsigned int v65 = *(_DWORD *)(a2 + 4);
    unsigned int v66 = *(_DWORD *)(a1 + 4);
    if (v65 < v66 || v49 < v50 && v66 >= v65) {
      goto LABEL_67;
    }
  }
  return result;
}

unsigned int *sub_99E088(unsigned int *result, unsigned int *a2, unsigned int *a3)
{
  int v3 = a2[2];
  int v4 = result[2];
  if (v3 == 0x7FFFFFFF)
  {
    BOOL v5 = v4 != 0x7FFFFFFF;
    unsigned int v7 = *a2;
    unsigned int v6 = a2[1];
    unsigned int v8 = *result;
    if (*a2 < *result) {
      goto LABEL_45;
    }
  }
  else
  {
    if (v4 != 0x7FFFFFFF)
    {
      unsigned int v7 = *a2;
      unsigned int v6 = a2[1];
      if (*a2 < *result) {
        goto LABEL_45;
      }
      if (*result >= v7)
      {
        unsigned int v28 = result[1];
        if (v6 < v28) {
          goto LABEL_45;
        }
        unsigned int v29 = (int *)(a3 + 2);
        int v9 = a3[2];
        if (v3 < v4 && v28 >= v6)
        {
          if (v9 == 0x7FFFFFFF)
          {
LABEL_46:
            BOOL v30 = v3 != 0x7FFFFFFF;
            int v31 = 1;
            unsigned int v32 = *a3;
            if (*a3 < v7) {
              goto LABEL_64;
            }
            goto LABEL_50;
          }
LABEL_59:
          if (*a3 < v7) {
            goto LABEL_64;
          }
          if (v7 < *a3) {
            goto LABEL_65;
          }
          unsigned int v33 = a3[1];
          if (v33 < v6) {
            goto LABEL_64;
          }
          if (v9 >= v3) {
            goto LABEL_65;
          }
LABEL_63:
          if (v6 < v33) {
            goto LABEL_65;
          }
LABEL_64:
          uint64_t v39 = *((void *)result + 4);
          long long v40 = *(_OWORD *)result;
          long long v41 = *((_OWORD *)result + 1);
          char v42 = *((unsigned char *)a3 + 32);
          long long v43 = *((_OWORD *)a3 + 1);
          *(_OWORD *)__n128 result = *(_OWORD *)a3;
          *((_OWORD *)result + 1) = v43;
          *((unsigned char *)result + 32) = v42;
LABEL_80:
          *(_OWORD *)a3 = v40;
          *((_OWORD *)a3 + 1) = v41;
          *((unsigned char *)a3 + 32) = v39;
          return result;
        }
      }
      else
      {
        int v9 = a3[2];
      }
      if (v9 != 0x7FFFFFFF) {
        goto LABEL_26;
      }
      goto LABEL_15;
    }
    BOOL v5 = 0;
    unsigned int v7 = *a2;
    unsigned int v6 = a2[1];
    unsigned int v8 = *result;
    if (*a2 < *result) {
      goto LABEL_45;
    }
  }
  if (v8 < v7) {
    goto LABEL_7;
  }
  unsigned int v14 = result[1];
  if (v6 >= v14)
  {
    if (v3 != 0x7FFFFFFF) {
      BOOL v5 = 0;
    }
    if (v14 < v6 || !v5)
    {
LABEL_7:
      int v9 = a3[2];
      if (v9 != 0x7FFFFFFF)
      {
        if (v3 == 0x7FFFFFFF)
        {
          int v10 = 0;
          BOOL v11 = 0;
          unsigned int v12 = *a3;
          if (*a3 < v7) {
            goto LABEL_31;
          }
          goto LABEL_16;
        }
LABEL_26:
        if (*a3 < v7) {
          goto LABEL_31;
        }
        if (v7 < *a3) {
          return result;
        }
        unsigned int v13 = a3[1];
        if (v13 < v6) {
          goto LABEL_31;
        }
        if (v9 >= v3) {
          return result;
        }
LABEL_30:
        if (v6 < v13) {
          return result;
        }
LABEL_31:
        uint64_t v15 = *((void *)a2 + 4);
        long long v16 = *(_OWORD *)a2;
        long long v17 = *((_OWORD *)a2 + 1);
        char v18 = *((unsigned char *)a3 + 32);
        long long v19 = *((_OWORD *)a3 + 1);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *((_OWORD *)a2 + 1) = v19;
        *((unsigned char *)a2 + 32) = v18;
        *(_OWORD *)a3 = v16;
        *((_OWORD *)a3 + 1) = v17;
        *((unsigned char *)a3 + 32) = v15;
        int v20 = a2[2];
        int v21 = result[2];
        if (v20 == 0x7FFFFFFF)
        {
          BOOL v22 = v21 != 0x7FFFFFFF;
          unsigned int v23 = *a2;
          unsigned int v24 = *result;
          if (*a2 < *result) {
            goto LABEL_55;
          }
        }
        else
        {
          if (v21 != 0x7FFFFFFF)
          {
            if (*a2 >= *result)
            {
              if (*result < *a2) {
                return result;
              }
              unsigned int v59 = a2[1];
              unsigned int v60 = result[1];
              if (v59 >= v60 && (v20 >= v21 || v60 < v59)) {
                return result;
              }
            }
            goto LABEL_55;
          }
          BOOL v22 = 0;
          unsigned int v23 = *a2;
          unsigned int v24 = *result;
          if (*a2 < *result) {
            goto LABEL_55;
          }
        }
        if (v24 < v23) {
          return result;
        }
        unsigned int v25 = a2[1];
        unsigned int v26 = result[1];
        if (v25 >= v26)
        {
          BOOL v27 = v20 == 0x7FFFFFFF && v22;
          if (v26 < v25 || !v27) {
            return result;
          }
        }
LABEL_55:
        uint64_t v34 = *((void *)result + 4);
        long long v35 = *(_OWORD *)result;
        long long v36 = *((_OWORD *)result + 1);
        char v37 = *((unsigned char *)a2 + 32);
        long long v38 = *((_OWORD *)a2 + 1);
        *(_OWORD *)__n128 result = *(_OWORD *)a2;
        *((_OWORD *)result + 1) = v38;
        *((unsigned char *)result + 32) = v37;
        *(_OWORD *)a2 = v35;
        *((_OWORD *)a2 + 1) = v36;
        *((unsigned char *)a2 + 32) = v34;
        return result;
      }
LABEL_15:
      BOOL v11 = v3 != 0x7FFFFFFF;
      int v10 = 1;
      unsigned int v12 = *a3;
      if (*a3 < v7) {
        goto LABEL_31;
      }
LABEL_16:
      if (v7 < v12) {
        return result;
      }
      unsigned int v13 = a3[1];
      if (v13 < v6) {
        goto LABEL_31;
      }
      if ((v10 & v11) != 1) {
        return result;
      }
      goto LABEL_30;
    }
  }
LABEL_45:
  unsigned int v29 = (int *)(a3 + 2);
  int v9 = a3[2];
  if (v9 == 0x7FFFFFFF) {
    goto LABEL_46;
  }
  if (v3 != 0x7FFFFFFF) {
    goto LABEL_59;
  }
  int v31 = 0;
  BOOL v30 = 0;
  unsigned int v32 = *a3;
  if (*a3 < v7) {
    goto LABEL_64;
  }
LABEL_50:
  if (v7 < v32) {
    goto LABEL_65;
  }
  unsigned int v33 = a3[1];
  if (v33 < v6) {
    goto LABEL_64;
  }
  if ((v31 & v30) == 1) {
    goto LABEL_63;
  }
LABEL_65:
  uint64_t v44 = *((void *)result + 4);
  long long v45 = *(_OWORD *)result;
  long long v46 = *((_OWORD *)result + 1);
  char v47 = *((unsigned char *)a2 + 32);
  long long v48 = *((_OWORD *)a2 + 1);
  *(_OWORD *)__n128 result = *(_OWORD *)a2;
  *((_OWORD *)result + 1) = v48;
  *((unsigned char *)result + 32) = v47;
  *(_OWORD *)a2 = v45;
  *((_OWORD *)a2 + 1) = v46;
  *((unsigned char *)a2 + 32) = v44;
  int v49 = *v29;
  int v50 = a2[2];
  if (*v29 == 0x7FFFFFFF)
  {
    BOOL v51 = v50 != 0x7FFFFFFF;
    unsigned int v52 = *a3;
    unsigned int v53 = *a2;
    if (*a3 < *a2) {
      goto LABEL_79;
    }
LABEL_70:
    if (v53 >= v52)
    {
      unsigned int v54 = a3[1];
      unsigned int v55 = a2[1];
      if (v54 < v55) {
        goto LABEL_79;
      }
      BOOL v56 = v49 == 0x7FFFFFFF && v51;
      if (v55 >= v54 && v56) {
        goto LABEL_79;
      }
    }
    return result;
  }
  if (v50 == 0x7FFFFFFF)
  {
    BOOL v51 = 0;
    unsigned int v52 = *a3;
    unsigned int v53 = *a2;
    if (*a3 < *a2)
    {
LABEL_79:
      uint64_t v39 = *((void *)a2 + 4);
      long long v40 = *(_OWORD *)a2;
      long long v41 = *((_OWORD *)a2 + 1);
      char v57 = *((unsigned char *)a3 + 32);
      long long v58 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_OWORD *)a2 + 1) = v58;
      *((unsigned char *)a2 + 32) = v57;
      goto LABEL_80;
    }
    goto LABEL_70;
  }
  if (*a3 < *a2) {
    goto LABEL_79;
  }
  if (*a2 >= *a3)
  {
    unsigned int v61 = a3[1];
    unsigned int v62 = a2[1];
    if (v61 < v62 || v49 < v50 && v62 >= v61) {
      goto LABEL_79;
    }
  }
  return result;
}

__n128 sub_99E4C4(uint64_t a1, uint64_t a2)
{
  switch(0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3))
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      int v33 = *(_DWORD *)(a2 - 32);
      int v34 = *(_DWORD *)(a1 + 8);
      if (v33 == 0x7FFFFFFF)
      {
        BOOL v35 = v34 != 0x7FFFFFFF;
        unsigned int v36 = *(_DWORD *)(a2 - 40);
        unsigned int v37 = *(_DWORD *)a1;
        if (v36 < *(_DWORD *)a1) {
          goto LABEL_80;
        }
LABEL_70:
        if (v37 >= v36)
        {
          unsigned int v38 = *(_DWORD *)(a2 - 36);
          unsigned int v39 = *(_DWORD *)(a1 + 4);
          if (v38 < v39) {
            goto LABEL_80;
          }
          BOOL v40 = v33 == 0x7FFFFFFF && v35;
          if (v39 >= v38 && v40) {
            goto LABEL_80;
          }
        }
        return result;
      }
      if (v34 == 0x7FFFFFFF)
      {
        BOOL v35 = 0;
        unsigned int v36 = *(_DWORD *)(a2 - 40);
        unsigned int v37 = *(_DWORD *)a1;
        if (v36 < *(_DWORD *)a1)
        {
LABEL_80:
          uint64_t v42 = a2 - 40;
          uint64_t v43 = *(void *)(a1 + 32);
          __n128 result = *(__n128 *)a1;
          long long v44 = *(_OWORD *)(a1 + 16);
          char v45 = *(unsigned char *)(a2 - 8);
          long long v46 = *(_OWORD *)(a2 - 24);
          *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
          *(_OWORD *)(a1 + 16) = v46;
          *(unsigned char *)(a1 + 32) = v45;
          *(__n128 *)uint64_t v42 = result;
          *(_OWORD *)(v42 + 16) = v44;
          *(unsigned char *)(v42 + 32) = v43;
          return result;
        }
        goto LABEL_70;
      }
      unsigned int v41 = *(_DWORD *)(a2 - 40);
      if (v41 < *(_DWORD *)a1) {
        goto LABEL_80;
      }
      if (*(_DWORD *)a1 >= v41)
      {
        unsigned int v47 = *(_DWORD *)(a2 - 36);
        unsigned int v48 = *(_DWORD *)(a1 + 4);
        if (v47 < v48 || v33 < v34 && v48 >= v47) {
          goto LABEL_80;
        }
      }
      return result;
    case 3uLL:
      sub_99E088((unsigned int *)a1, (unsigned int *)(a1 + 40), (unsigned int *)(a2 - 40));
      return result;
    case 4uLL:
      result.n128_u64[0] = sub_99E928(a1, a1 + 40, a1 + 80, a2 - 40).n128_u64[0];
      return result;
    case 5uLL:
      result.n128_u64[0] = sub_99DCB8(a1, a1 + 40, a1 + 80, a1 + 120, (unsigned int *)(a2 - 40)).n128_u64[0];
      return result;
    default:
      uint64_t v4 = a1 + 80;
      sub_99E088((unsigned int *)a1, (unsigned int *)(a1 + 40), (unsigned int *)(a1 + 80));
      uint64_t v6 = a1 + 120;
      if (a1 + 120 == a2) {
        return result;
      }
      uint64_t v7 = 0;
      int v8 = 0;
      while (2)
      {
        int v10 = *(_DWORD *)(v6 + 8);
        int v11 = *(_DWORD *)(v4 + 8);
        unsigned int v12 = *(_DWORD *)v4;
        if (v10 == 0x7FFFFFFF)
        {
          BOOL v13 = v11 != 0x7FFFFFFF;
          unsigned int v14 = *(_DWORD *)v6;
          unsigned int v15 = *(_DWORD *)(v6 + 4);
          if (*(_DWORD *)v6 < v12) {
            goto LABEL_25;
          }
        }
        else
        {
          if (v11 != 0x7FFFFFFF)
          {
            unsigned int v14 = *(_DWORD *)v6;
            unsigned int v15 = *(_DWORD *)(v6 + 4);
            if (*(_DWORD *)v6 >= v12)
            {
              if (v12 < v14) {
                goto LABEL_7;
              }
              unsigned int v17 = *(_DWORD *)(v4 + 4);
              if (v15 >= v17 && (v10 >= v11 || v17 < v15)) {
                goto LABEL_7;
              }
            }
            goto LABEL_25;
          }
          BOOL v13 = 0;
          unsigned int v14 = *(_DWORD *)v6;
          unsigned int v15 = *(_DWORD *)(v6 + 4);
          if (*(_DWORD *)v6 < v12) {
            goto LABEL_25;
          }
        }
        if (v12 < v14) {
          goto LABEL_7;
        }
        unsigned int v16 = *(_DWORD *)(v4 + 4);
        if (v15 >= v16)
        {
          if (v10 != 0x7FFFFFFF) {
            BOOL v13 = 0;
          }
          if (v16 < v15 || !v13) {
            goto LABEL_7;
          }
        }
LABEL_25:
        *(_OWORD *)int v49 = *(_OWORD *)(v6 + 12);
        *(_OWORD *)&v49[12] = *(_OWORD *)(v6 + 24);
        long long v18 = *(_OWORD *)(v4 + 16);
        *(_OWORD *)uint64_t v6 = *(_OWORD *)v4;
        *(_OWORD *)(v6 + 16) = v18;
        *(unsigned char *)(v6 + 32) = *(unsigned char *)(v4 + 32);
        uint64_t v9 = a1;
        if (v4 == a1) {
          goto LABEL_6;
        }
        uint64_t v19 = v7;
        if (v10 != 0x7FFFFFFF)
        {
          while (1)
          {
            uint64_t v21 = a1 + v19;
            BOOL v22 = (unsigned int *)(a1 + v19 + 40);
            int v23 = *(_DWORD *)(a1 + v19 + 48);
            if (v23 == 0x7FFFFFFF)
            {
              if (v14 >= *v22 && (*v22 < v14 || v15 >= *(_DWORD *)(a1 + v19 + 44))) {
                goto LABEL_60;
              }
            }
            else if (v14 >= *v22)
            {
              if (*v22 < v14) {
                goto LABEL_60;
              }
              unsigned int v25 = *(_DWORD *)(v21 + 44);
              if (v15 >= v25 && (v10 >= v23 || v25 < v15)) {
                goto LABEL_59;
              }
            }
            v4 -= 40;
            long long v20 = *(_OWORD *)(a1 + v19 + 56);
            *(_OWORD *)(v21 + 80) = *(_OWORD *)v22;
            *(_OWORD *)(v21 + 96) = v20;
            *(unsigned char *)(v21 + 112) = *(unsigned char *)(a1 + v19 + 72);
            v19 -= 40;
            if (v19 == -80) {
              goto LABEL_5;
            }
          }
        }
        while (2)
        {
          unsigned int v28 = *(_DWORD *)(a1 + v19 + 40);
          if (v14 < v28) {
            goto LABEL_45;
          }
          if (v28 >= v14)
          {
            unsigned int v29 = *(_DWORD *)(a1 + v19 + 44);
            BOOL v31 = v29 >= v15 && *(_DWORD *)(a1 + v19 + 48) != 0x7FFFFFFF;
            if (v15 >= v29 && !v31)
            {
LABEL_59:
              uint64_t v9 = a1 + v19 + 80;
              goto LABEL_6;
            }
LABEL_45:
            v4 -= 40;
            long long v27 = *(_OWORD *)(a1 + v19 + 56);
            *(_OWORD *)(a1 + v19 + 80) = *(_OWORD *)(a1 + v19 + 40);
            *(_OWORD *)(a1 + v19 + 96) = v27;
            *(unsigned char *)(a1 + v19 + 112) = *(unsigned char *)(a1 + v19 + 72);
            v19 -= 40;
            if (v19 == -80)
            {
LABEL_5:
              uint64_t v9 = a1;
              goto LABEL_6;
            }
            continue;
          }
          break;
        }
LABEL_60:
        uint64_t v9 = v4;
LABEL_6:
        *(_DWORD *)uint64_t v9 = v14;
        *(_DWORD *)(v9 + 4) = v15;
        *(_DWORD *)(v9 + 8) = v10;
        __n128 result = *(__n128 *)v49;
        *(void *)(v9 + 25) = *(void *)&v49[13];
        *(_OWORD *)(v9 + 12) = *(_OWORD *)v49;
        if (++v8 != 8)
        {
LABEL_7:
          uint64_t v4 = v6;
          v7 += 40;
          v6 += 40;
          if (v6 == a2) {
            return result;
          }
          continue;
        }
        return result;
      }
  }
}

__n128 sub_99E928(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_99E088((unsigned int *)a1, (unsigned int *)a2, (unsigned int *)a3);
  int v9 = *(_DWORD *)(a4 + 8);
  int v10 = *(_DWORD *)(a3 + 8);
  if (v9 == 0x7FFFFFFF)
  {
    BOOL v11 = v10 != 0x7FFFFFFF;
    unsigned int v12 = *(_DWORD *)a4;
    unsigned int v13 = *(_DWORD *)a3;
    if (*(_DWORD *)a4 < *(_DWORD *)a3) {
      goto LABEL_15;
    }
  }
  else
  {
    if (v10 != 0x7FFFFFFF)
    {
      if (*(_DWORD *)a4 >= *(_DWORD *)a3)
      {
        if (*(_DWORD *)a3 < *(_DWORD *)a4) {
          return result;
        }
        unsigned int v41 = *(_DWORD *)(a4 + 4);
        unsigned int v42 = *(_DWORD *)(a3 + 4);
        if (v41 >= v42 && (v9 >= v10 || v42 < v41)) {
          return result;
        }
      }
      goto LABEL_15;
    }
    BOOL v11 = 0;
    unsigned int v12 = *(_DWORD *)a4;
    unsigned int v13 = *(_DWORD *)a3;
    if (*(_DWORD *)a4 < *(_DWORD *)a3) {
      goto LABEL_15;
    }
  }
  if (v13 < v12) {
    return result;
  }
  unsigned int v14 = *(_DWORD *)(a4 + 4);
  unsigned int v15 = *(_DWORD *)(a3 + 4);
  if (v14 >= v15)
  {
    BOOL v16 = v9 == 0x7FFFFFFF && v11;
    if (v15 < v14 || !v16) {
      return result;
    }
  }
LABEL_15:
  uint64_t v17 = *(void *)(a3 + 32);
  __n128 result = *(__n128 *)a3;
  long long v18 = *(_OWORD *)(a3 + 16);
  char v19 = *(unsigned char *)(a4 + 32);
  long long v20 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(_OWORD *)(a3 + 16) = v20;
  *(unsigned char *)(a3 + 32) = v19;
  *(__n128 *)a4 = result;
  *(_OWORD *)(a4 + 16) = v18;
  *(unsigned char *)(a4 + 32) = v17;
  int v21 = *(_DWORD *)(a3 + 8);
  int v22 = *(_DWORD *)(a2 + 8);
  if (v21 == 0x7FFFFFFF)
  {
    BOOL v23 = v22 != 0x7FFFFFFF;
    unsigned int v24 = *(_DWORD *)a3;
    unsigned int v25 = *(_DWORD *)a2;
    if (*(_DWORD *)a3 < *(_DWORD *)a2) {
      goto LABEL_29;
    }
  }
  else
  {
    if (v22 != 0x7FFFFFFF)
    {
      if (*(_DWORD *)a3 >= *(_DWORD *)a2)
      {
        if (*(_DWORD *)a2 < *(_DWORD *)a3) {
          return result;
        }
        unsigned int v47 = *(_DWORD *)(a3 + 4);
        unsigned int v48 = *(_DWORD *)(a2 + 4);
        if (v47 >= v48 && (v21 >= v22 || v48 < v47)) {
          return result;
        }
      }
      goto LABEL_29;
    }
    BOOL v23 = 0;
    unsigned int v24 = *(_DWORD *)a3;
    unsigned int v25 = *(_DWORD *)a2;
    if (*(_DWORD *)a3 < *(_DWORD *)a2) {
      goto LABEL_29;
    }
  }
  if (v25 < v24) {
    return result;
  }
  unsigned int v26 = *(_DWORD *)(a3 + 4);
  unsigned int v27 = *(_DWORD *)(a2 + 4);
  if (v26 >= v27)
  {
    BOOL v28 = v21 == 0x7FFFFFFF && v23;
    if (v27 < v26 || !v28) {
      return result;
    }
  }
LABEL_29:
  uint64_t v29 = *(void *)(a2 + 32);
  __n128 result = *(__n128 *)a2;
  long long v30 = *(_OWORD *)(a2 + 16);
  char v31 = *(unsigned char *)(a3 + 32);
  long long v32 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v32;
  *(unsigned char *)(a2 + 32) = v31;
  *(__n128 *)a3 = result;
  *(_OWORD *)(a3 + 16) = v30;
  *(unsigned char *)(a3 + 32) = v29;
  int v33 = *(_DWORD *)(a2 + 8);
  int v34 = *(_DWORD *)(a1 + 8);
  if (v33 == 0x7FFFFFFF)
  {
    BOOL v35 = v34 != 0x7FFFFFFF;
    unsigned int v36 = *(_DWORD *)a2;
    unsigned int v37 = *(_DWORD *)a1;
    if (*(_DWORD *)a2 < *(_DWORD *)a1) {
      goto LABEL_48;
    }
LABEL_34:
    if (v37 >= v36)
    {
      unsigned int v38 = *(_DWORD *)(a2 + 4);
      unsigned int v39 = *(_DWORD *)(a1 + 4);
      if (v38 < v39) {
        goto LABEL_48;
      }
      BOOL v40 = v33 == 0x7FFFFFFF && v35;
      if (v39 >= v38 && v40) {
        goto LABEL_48;
      }
    }
    return result;
  }
  if (v34 == 0x7FFFFFFF)
  {
    BOOL v35 = 0;
    unsigned int v36 = *(_DWORD *)a2;
    unsigned int v37 = *(_DWORD *)a1;
    if (*(_DWORD *)a2 < *(_DWORD *)a1)
    {
LABEL_48:
      uint64_t v43 = *(void *)(a1 + 32);
      __n128 result = *(__n128 *)a1;
      long long v44 = *(_OWORD *)(a1 + 16);
      char v45 = *(unsigned char *)(a2 + 32);
      long long v46 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v46;
      *(unsigned char *)(a1 + 32) = v45;
      *(__n128 *)a2 = result;
      *(_OWORD *)(a2 + 16) = v44;
      *(unsigned char *)(a2 + 32) = v43;
      return result;
    }
    goto LABEL_34;
  }
  if (*(_DWORD *)a2 < *(_DWORD *)a1) {
    goto LABEL_48;
  }
  if (*(_DWORD *)a1 >= *(_DWORD *)a2)
  {
    unsigned int v49 = *(_DWORD *)(a2 + 4);
    unsigned int v50 = *(_DWORD *)(a1 + 4);
    if (v49 < v50 || v33 < v34 && v50 >= v49) {
      goto LABEL_48;
    }
  }
  return result;
}

void sub_99EC0C()
{
  unk_25DC35F = 16641;
  word_25DC348 = 65;
  byte_25DC377 = 1;
  byte_25DC361 = 0;
}

double sub_99EC34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = a3;
  *(void *)(a1 + 8) = a2;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 1065353216;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 56) = 0;
  return result;
}

void sub_99EC54(uint64_t a1@<X0>, void ***a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v4 = (uint64_t)a4;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  BOOL v90 = 0;
  int v91 = 0;
  unint64_t v92 = 0;
  BOOL v5 = *a2;
  int v81 = a2[1];
  if (*a2 == v81) {
    return;
  }
  do
  {
    int v8 = *v5;
    uint64_t v9 = sub_3757C8(*(void **)(a1 + 8));
    int v10 = (int *)sub_9A0154(v9, (unint64_t)v8, 0, "payment_method_region");
    BOOL v11 = (unsigned __int16 *)((char *)v10 - *v10);
    if (*v11 >= 0xBu && (uint64_t v12 = v11[5]) != 0) {
      unsigned int v13 = (uint64_t *)((char *)v10 + v12 + *(unsigned int *)((char *)v10 + v12));
    }
    else {
      unsigned int v13 = 0;
    }
    sub_9A06A8(v13, (uint64_t)&v87);
    unsigned int v15 = (char *)v87;
    unsigned int v14 = v88;
    if (v87 != (int8x16_t *)v88)
    {
      unsigned int v82 = v5;
      while (1)
      {
        if (!v15[8] || v15[10] && (sub_375C30(*(void *)(a1 + 8)) & 1) == 0) {
          goto LABEL_11;
        }
        unint64_t v17 = *(void *)v15;
        char v19 = *(void **)a3;
        long long v18 = *(void **)(a3 + 8);
        if (*(void **)a3 != v18)
        {
          while (*v19 != v17)
          {
            if (++v19 == v18) {
              goto LABEL_11;
            }
          }
          if (v19 == v18) {
            goto LABEL_11;
          }
        }
        uint64_t v20 = sub_3757C8(*(void **)(a1 + 8));
        int v21 = (int *)sub_2A4F60(v20, v17, 0, "payment_method");
        int v22 = (unsigned __int16 *)((char *)v21 - *v21);
        if (*v22 < 9u) {
          goto LABEL_11;
        }
        uint64_t v23 = v22[4];
        if (!v23) {
          goto LABEL_11;
        }
        int v24 = *((unsigned __int8 *)v21 + v23);
        if (!v24) {
          goto LABEL_11;
        }
        if (v24 != 1) {
          break;
        }
        int v25 = v15[9];
        if (v15[9])
        {
          int v26 = v15[8];
          BOOL v28 = v90;
          unsigned int v27 = v91;
          if (v90 != v91) {
            goto LABEL_32;
          }
          goto LABEL_40;
        }
LABEL_11:
        v15 += 12;
        if (v15 == v14)
        {
          unsigned int v15 = (char *)v87;
          BOOL v5 = v82;
          goto LABEL_68;
        }
      }
      int v25 = v15[9];
      int v26 = v15[8];
      BOOL v28 = v90;
      unsigned int v27 = v91;
      if (v90 != v91)
      {
LABEL_32:
        while (1)
        {
          BOOL v29 = *(_DWORD *)v28 == v8 && *((_DWORD *)v28 + 1) == HIDWORD(v8);
          if (v29
            && v28[8] == v26
            && v28[9] == v24
            && v28[10] == v25)
          {
            break;
          }
          v28 += 40;
          if (v28 == v27) {
            goto LABEL_43;
          }
        }
      }
LABEL_40:
      if (v28 == v27)
      {
LABEL_43:
        unsigned int v83 = v8;
        LOBYTE(v84) = v26;
        BYTE1(v84) = v24;
        BYTE2(v84) = v25;
        int v33 = operator new(8uLL);
        __p[0] = v33;
        *int v33 = v17;
        __p[1] = v33 + 1;
        unsigned int v86 = v33 + 1;
        if ((unint64_t)v27 < v92)
        {
          BOOL v16 = v83;
          *((_DWORD *)v27 + 2) = v84;
          *(void *)unsigned int v27 = v16;
          *((void *)v27 + 3) = 0;
          *((void *)v27 + 4) = 0;
          *((void *)v27 + 2) = 0;
          *((_OWORD *)v27 + 1) = *(_OWORD *)__p;
          *((void *)v27 + 4) = v86;
          int v91 = v27 + 40;
        }
        else
        {
          int v91 = sub_9A4DDC((void **)&v90, (uint64_t)&v83);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
        goto LABEL_11;
      }
      char v31 = (unint64_t *)*((void *)v28 + 3);
      unint64_t v30 = *((void *)v28 + 4);
      if ((unint64_t)v31 < v30)
      {
        *char v31 = v17;
        uint64_t v32 = (uint64_t)(v31 + 1);
LABEL_66:
        uint64_t v4 = (uint64_t)a4;
        *((void *)v28 + 3) = v32;
        goto LABEL_11;
      }
      int v34 = (unint64_t **)(v28 + 16);
      BOOL v35 = (char *)*((void *)v28 + 2);
      unsigned int v36 = (char *)((char *)v31 - v35);
      uint64_t v37 = ((char *)v31 - v35) >> 3;
      unint64_t v38 = v37 + 1;
      if ((unint64_t)(v37 + 1) >> 61) {
        sub_2E00();
      }
      uint64_t v39 = v30 - (void)v35;
      if (v39 >> 2 > v38) {
        unint64_t v38 = v39 >> 2;
      }
      if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v40 = v38;
      }
      if (v40)
      {
        if (v40 >> 61) {
          sub_188D718();
        }
        unint64_t v79 = v40;
        unsigned int v41 = operator new(8 * v40);
        uint64_t v37 = ((char *)v31 - v35) >> 3;
        int v34 = (unint64_t **)(v28 + 16);
        unint64_t v40 = v79;
        unsigned int v36 = (char *)((char *)v31 - v35);
        unsigned int v42 = (unint64_t *)((char *)v41 + 8 * v37);
        *unsigned int v42 = v17;
        uint64_t v32 = (uint64_t)(v42 + 1);
        if (v31 == (unint64_t *)v35) {
          goto LABEL_64;
        }
      }
      else
      {
        unsigned int v41 = 0;
        unsigned int v42 = (unint64_t *)(8 * v37);
        *(void *)(8 * v37) = v17;
        uint64_t v32 = 8 * v37 + 8;
        if (v31 == (unint64_t *)v35)
        {
LABEL_64:
          *((void *)v28 + 2) = v42;
          *((void *)v28 + 3) = v32;
          *((void *)v28 + 4) = (char *)v41 + 8 * v40;
          if (v31)
          {
            uint64_t v52 = v32;
            operator delete(v31);
            uint64_t v32 = v52;
          }
          goto LABEL_66;
        }
      }
      unint64_t v43 = (char *)(v31 - 1) - v35;
      if (v43 < 0x58) {
        goto LABEL_120;
      }
      if ((unint64_t)((char *)v31 - &v36[(void)v41]) < 0x20) {
        goto LABEL_120;
      }
      uint64_t v44 = (v43 >> 3) + 1;
      uint64_t v45 = 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
      long long v46 = &v31[v45 / 0xFFFFFFFFFFFFFFF8];
      unsigned int v42 = (unint64_t *)((char *)v42 - v45);
      unsigned int v47 = (char *)v41 + 8 * v37 - 16;
      unsigned int v48 = v31 - 2;
      uint64_t v49 = v44 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v50 = *(_OWORD *)v48;
        *(v47 - 1) = *((_OWORD *)v48 - 1);
        _OWORD *v47 = v50;
        v47 -= 2;
        v48 -= 4;
        v49 -= 4;
      }
      while (v49);
      char v31 = v46;
      if (v44 != (v44 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_120:
        do
        {
          unint64_t v51 = *--v31;
          *--unsigned int v42 = v51;
        }
        while (v31 != (unint64_t *)v35);
      }
      char v31 = *v34;
      goto LABEL_64;
    }
LABEL_68:
    if (v15)
    {
      unsigned int v88 = v15;
      operator delete(v15);
    }
    ++v5;
  }
  while (v5 != v81);
  unsigned int v54 = v90;
  unsigned int v53 = v91;
  if (v90 != v91)
  {
    do
    {
      unsigned int v88 = 0;
      BOOL v89 = 0;
      unsigned int v87 = 0;
      BOOL v56 = (unsigned char *)*((void *)v54 + 2);
      unsigned int v55 = (unsigned char *)*((void *)v54 + 3);
      int64_t v57 = v55 - v56;
      if (v55 == v56)
      {
        unsigned int v59 = 0;
        long long v58 = 0;
      }
      else
      {
        if (v57 < 0) {
          sub_2E00();
        }
        long long v58 = (int8x16_t *)operator new(v55 - v56);
        unsigned int v87 = v58;
        unsigned int v88 = (char *)v58;
        unsigned int v59 = (int8x16_t *)((char *)v58 + 8 * (v57 >> 3));
        BOOL v89 = v59;
        memcpy(v58, v56, v57);
        unsigned int v88 = (char *)v59;
      }
      unint64_t v60 = 126 - 2 * __clz(((char *)v59 - (char *)v58) >> 3);
      if (v59 == v58) {
        uint64_t v61 = 0;
      }
      else {
        uint64_t v61 = v60;
      }
      sub_9A4F6C(v58, v59, (uint64_t)&v83, v61, 1);
      unsigned int v63 = (char *)v87;
      unsigned int v62 = v88;
      if (v87 != (int8x16_t *)v88)
      {
        do
        {
          unsigned int v64 = v63 + 8;
          if (v63 + 8 == v88) {
            goto LABEL_98;
          }
          int v65 = *(_DWORD *)v63;
          int v66 = *((_DWORD *)v63 + 1);
          LODWORD(v68) = *((_DWORD *)v63 + 2);
          int v67 = *((_DWORD *)v63 + 3);
          BOOL v69 = v65 == v68 && v66 == v67;
          unsigned int v63 = v64;
        }
        while (!v69);
        unint64_t v70 = v64 + 8;
        long long v71 = v64 - 8;
        if (v64 + 8 == v88)
        {
          long long v72 = v64;
          if (v64 == v88) {
            goto LABEL_98;
          }
LABEL_97:
          unsigned int v88 = v72;
          goto LABEL_98;
        }
        do
        {
          if (v68 != *(_DWORD *)v70 || *((_DWORD *)v71 + 1) != *((_DWORD *)v70 + 1))
          {
            uint64_t v68 = *(void *)v70;
            *((void *)v71 + 1) = *(void *)v70;
            v71 += 8;
          }
          v70 += 8;
        }
        while (v70 != v62);
        long long v72 = v71 + 8;
        if (v71 + 8 != v88) {
          goto LABEL_97;
        }
      }
LABEL_98:
      sub_99F3B4(a1, *(void *)v54, v54[8], v54[9], v54[10], (char **)&v87, (uint64_t)&v83);
      unint64_t v74 = *(void *)(v4 + 8);
      if (v74 >= *(void *)(v4 + 16))
      {
        char v75 = sub_9A5C48((void **)v4, (uint64_t)&v83);
      }
      else
      {
        sub_9A5B84(v4, (uint64_t)&v83);
        char v75 = (char *)(v74 + 568);
      }
      *(void *)(v4 + 8) = v75;
      sub_8E57D0(&__p[1]);
      if (v83)
      {
        unsigned int v84 = v83;
        operator delete(v83);
      }
      if (v87)
      {
        unsigned int v88 = (char *)v87;
        operator delete(v87);
      }
      v54 += 40;
    }
    while (v54 != v53);
    unsigned int v53 = v90;
  }
  if (v53)
  {
    int v76 = v91;
    unsigned int v77 = v53;
    if (v91 != v53)
    {
      do
      {
        BOOL v78 = (void *)*((void *)v76 - 3);
        if (v78)
        {
          *((void *)v76 - 2) = v78;
          operator delete(v78);
        }
        v76 -= 40;
      }
      while (v76 != v53);
      unsigned int v77 = v90;
    }
    int v91 = v53;
    operator delete(v77);
  }
}

void sub_99F2D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20)
{
  int v22 = *(void **)(v20 - 136);
  if (v22)
  {
    *(void *)(v20 - 128) = v22;
    operator delete(v22);
  }
  sub_99FCB4((void **)(v20 - 112));
  sub_9040D0(a14);
  _Unwind_Resume(a1);
}

void sub_99F3B4(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, char **a6@<X5>, uint64_t a7@<X8>)
{
  sub_9A0D4C(a7);
  if ((char **)a7 != a6) {
    sub_326C0((void *)a7, *a6, a6[1], (a6[1] - *a6) >> 3);
  }
  *(unsigned char *)(a7 + 560) = a3;
  int v14 = a5 == 1;
  if (a5 == 2) {
    int v14 = 2;
  }
  if (a4 != 1) {
    int v14 = 0;
  }
  if (a4 == 2) {
    int v15 = 3;
  }
  else {
    int v15 = v14;
  }
  if (a4 == 4) {
    int v16 = 4;
  }
  else {
    int v16 = v15;
  }
  *(_DWORD *)(a7 + 564) = v16;
  uint64_t v17 = sub_3757C8(*(void **)(a1 + 8));
  long long v18 = (int *)sub_9A0154(v17, a2, 0, "payment_method_region");
  char v19 = (unsigned __int16 *)((char *)v18 - *v18);
  if (*v19 >= 5u && (uint64_t v20 = v19[2]) != 0) {
    uint64_t v21 = *(void *)((char *)v18 + v20);
  }
  else {
    uint64_t v21 = 0;
  }
  int v22 = sub_398020(v17, 0);
  uint64_t v23 = &v22[-*(int *)v22];
  if (*(unsigned __int16 *)v23 >= 0xBu)
  {
    uint64_t v24 = *((unsigned __int16 *)v23 + 5);
    if (v24)
    {
      if (v22[v24]) {
        uint64_t v21 = nullsub_1(v21);
      }
    }
  }
  *(void *)(a7 + 24) = v21;
  nullsub_1(&v106);
  uint64_t v25 = *(void *)a1;
  uint64_t v26 = sub_3757C8(*(void **)(a1 + 8));
  unsigned int v27 = (int *)sub_9A0154(v26, a2, 0, "payment_method_region");
  BOOL v28 = (unsigned __int16 *)((char *)v27 - *v27);
  if (*v28 >= 0x11u && (uint64_t v29 = v28[8]) != 0) {
    unint64_t v30 = (int *)((char *)v27 + v29 + *(unsigned int *)((char *)v27 + v29));
  }
  else {
    unint64_t v30 = 0;
  }
  sub_4A0694(v30, (uint64_t)v102);
  uint64_t v31 = v25 + 968;
  sub_9973DC((uint64_t)v102, v31, (uint64_t)v92);
  sub_5F3D48((uint64_t)&v100, (uint64_t)v92);
  sub_4D90B4(a7 + 216, (uint64_t)&v100);
  sub_4D4B58((uint64_t)&v100);
  if (SHIBYTE(v96) < 0)
  {
    operator delete(__p);
    if ((v93 & 0x80000000) == 0) {
      goto LABEL_27;
    }
LABEL_51:
    operator delete(v92[0]);
    goto LABEL_27;
  }
  if (v93 < 0) {
    goto LABEL_51;
  }
LABEL_27:
  int v34 = a6;
  uint64_t v32 = *a6;
  int v33 = v34[1];
  uint64_t v35 = sub_3757C8(*(void **)(a1 + 8));
  unsigned int v36 = (int *)sub_9A0154(v35, a2, 0, "payment_method_region");
  uint64_t v37 = (unsigned __int16 *)((char *)v36 - *v36);
  if (*v37 >= 0x13u && (uint64_t v38 = v37[9]) != 0)
  {
    uint64_t v39 = (unsigned int *)((char *)v36 + v38 + *(unsigned int *)((char *)v36 + v38));
    long long v100 = 0uLL;
    unsigned int v101 = 0;
    sub_9A108C((unint64_t *)&v100, *v39);
    int v40 = *v39;
    v92[0] = v39 + 1;
    v88[0] = &v39[v40 + 1];
    sub_9A141C((unsigned int **)v92, (unsigned int **)v88, (uint64_t)&v100, *((uint64_t *)&v100 + 1), (void (*)(void **__return_ptr, char *))sub_9A0E44);
    long long v41 = v100;
    unsigned int v42 = v101;
  }
  else
  {
    unsigned int v42 = 0;
    long long v41 = 0uLL;
  }
  unint64_t v43 = v33 - v32;
  *(_OWORD *)unsigned int v99 = v41;
  v99[2] = v42;
  sub_99FD28(a1, (uint64_t *)v99, a3, a4, v43 > 8, (uint64_t *)&v97);
  if (v97 != v98) {
    sub_52FD00(a7 + 376, (uint64_t)v97);
  }
  uint64_t v44 = sub_3757C8(*(void **)(a1 + 8));
  uint64_t v45 = (int *)sub_9A0154(v44, a2, 0, "payment_method_region");
  long long v46 = (unsigned __int16 *)((char *)v45 - *v45);
  if (*v46 >= 0xDu && (uint64_t v47 = v46[6]) != 0) {
    unsigned int v48 = (int *)((char *)v45 + v47 + *(unsigned int *)((char *)v45 + v47));
  }
  else {
    unsigned int v48 = 0;
  }
  sub_4A0694(v48, (uint64_t)v92);
  sub_9973DC((uint64_t)v92, v31, (uint64_t)v88);
  sub_5F3D48((uint64_t)&v100, (uint64_t)v88);
  if (v91 < 0)
  {
    operator delete(v90);
    if ((SHIBYTE(v89) & 0x80000000) == 0) {
      goto LABEL_39;
    }
LABEL_53:
    operator delete(v88[0]);
    goto LABEL_39;
  }
  if (SHIBYTE(v89) < 0) {
    goto LABEL_53;
  }
LABEL_39:
  uint64_t v49 = sub_3757C8(*(void **)(a1 + 8));
  long long v50 = (int *)sub_9A0154(v49, a2, 0, "payment_method_region");
  unint64_t v51 = (unsigned __int16 *)((char *)v50 - *v50);
  if (*v51 >= 0xFu && (uint64_t v52 = v51[7]) != 0)
  {
    unsigned int v53 = (unsigned int *)((char *)v50 + v52 + *(unsigned int *)((char *)v50 + v52));
    v88[0] = 0;
    v88[1] = 0;
    uint64_t v89 = 0;
    sub_9A108C((unint64_t *)v88, *v53);
    int v54 = *v53;
    unsigned int v84 = v53 + 1;
    unsigned int v107 = &v53[v54 + 1];
    sub_9A141C((unsigned int **)&v84, &v107, (uint64_t)v88, (uint64_t)v88[1], (void (*)(void **__return_ptr, char *))sub_9A0E44);
    long long v55 = *(_OWORD *)v88;
    uint64_t v56 = v89;
  }
  else
  {
    uint64_t v56 = 0;
    long long v55 = 0uLL;
  }
  *(_OWORD *)unsigned int v86 = v55;
  uint64_t v87 = v56;
  sub_99FD28(a1, (uint64_t *)v86, a3, a4, v43 > 8, (uint64_t *)v88);
  int64_t v57 = v88[0];
  if (v88[0] != v88[1])
  {
    if (!sub_45FB38(&v100))
    {
      sub_52FD00(a7 + 32, (uint64_t)&v100);
      if ((void **)(a7 + 192) != v88) {
        sub_59DF7C((uint64_t *)(a7 + 192), (uint64_t)v88[0], (uint64_t)v88[1], 0xCCCCCCCCCCCCCCCDLL * (((char *)v88[1] - (char *)v88[0]) >> 5));
      }
      uint64_t v58 = sub_3757C8(*(void **)(a1 + 8));
      unsigned int v59 = (int *)sub_9A0154(v58, a2, 0, "payment_method_region");
      unint64_t v60 = (unsigned __int16 *)((char *)v59 - *v59);
      if (*v60 >= 0x15u && (uint64_t v61 = v60[10]) != 0) {
        unsigned int v62 = (unsigned int *)((char *)v59 + v61 + *(unsigned int *)((char *)v59 + v61));
      }
      else {
        unsigned int v62 = 0;
      }
      sub_9A46C4(v62, (void ***)&v84);
      unsigned int v63 = (void **)v84;
      unsigned int v64 = v85;
      if (v84 != v85)
      {
        do
        {
          int v66 = (void *)*((unsigned __int8 *)v63 + 23);
          int v67 = (char)v66;
          if ((char)v66 < 0) {
            int v66 = v63[1];
          }
          if (v66) {
            BOOL v68 = *((unsigned char *)v63 + 24) == 0;
          }
          else {
            BOOL v68 = 1;
          }
          if (!v68)
          {
            unint64_t v69 = *(void *)(a7 + 544);
            if (v69 >= *(void *)(a7 + 552))
            {
              uint64_t v65 = sub_9A656C((char **)(a7 + 536), (uint64_t)v63);
            }
            else
            {
              if (v67 < 0)
              {
                sub_4200(*(unsigned char **)(a7 + 544), *v63, (unint64_t)v63[1]);
              }
              else
              {
                long long v70 = *(_OWORD *)v63;
                *(void *)(v69 + 16) = v63[2];
                *(_OWORD *)unint64_t v69 = v70;
              }
              *(unsigned char *)(v69 + 24) = *((unsigned char *)v63 + 24);
              uint64_t v65 = v69 + 32;
              *(void *)(a7 + 544) = v69 + 32;
            }
            *(void *)(a7 + 544) = v65;
          }
          v63 += 4;
        }
        while (v63 != v64);
        unsigned int v63 = (void **)v84;
      }
      if (v63)
      {
        long long v71 = v85;
        long long v72 = v63;
        if (v85 != v63)
        {
          do
          {
            if (*((char *)v71 - 9) < 0) {
              operator delete(*(v71 - 4));
            }
            v71 -= 4;
          }
          while (v71 != v63);
          long long v72 = v84;
        }
        unsigned int v85 = v63;
        operator delete(v72);
      }
    }
    int64_t v57 = v88[0];
  }
  if (v57)
  {
    __n128 v73 = v88[1];
    unint64_t v74 = v57;
    if (v88[1] != v57)
    {
      do
        __n128 v73 = (void *)sub_4D4B58((uint64_t)v73 - 160);
      while (v73 != v57);
      unint64_t v74 = v88[0];
    }
    v88[1] = v57;
    operator delete(v74);
  }
  if (v86[0])
  {
    sub_9A4C80((uint64_t)v86, (void **)v86[0]);
    operator delete(v86[0]);
  }
  sub_4D4B58((uint64_t)&v100);
  char v75 = (void **)v95;
  if (v95)
  {
    int v76 = v96;
    unsigned int v77 = v95;
    if (v96 != v95)
    {
      do
      {
        if (*((char *)v76 - 1) < 0) {
          operator delete(*(v76 - 3));
        }
        v76 -= 4;
      }
      while (v76 != v75);
      unsigned int v77 = v95;
    }
    BOOL v96 = v75;
    operator delete(v77);
  }
  if (v93 < 0) {
    operator delete(v92[0]);
  }
  BOOL v78 = v97;
  if (v97)
  {
    uint64_t v79 = (uint64_t)v98;
    BOOL v80 = v97;
    if (v98 != v97)
    {
      do
        uint64_t v79 = sub_4D4B58(v79 - 160);
      while ((void *)v79 != v78);
      BOOL v80 = v97;
    }
    int v98 = v78;
    operator delete(v80);
  }
  if (v99[0])
  {
    sub_9A4C80((uint64_t)v99, (void **)v99[0]);
    operator delete(v99[0]);
  }
  int v81 = v104;
  if (v104)
  {
    unsigned int v82 = v105;
    unsigned int v83 = v104;
    if (v105 != v104)
    {
      do
      {
        if (*((char *)v82 - 1) < 0) {
          operator delete(*(v82 - 3));
        }
        v82 -= 4;
      }
      while (v82 != v81);
      unsigned int v83 = v104;
    }
    long long v105 = v81;
    operator delete(v83);
  }
  if (v103 < 0) {
    operator delete(v102[0]);
  }
}

void sub_99FAE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void **a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39)
{
  *(void *)(v39 + 544) = v40;
  sub_3D4D90(&a10);
  sub_59213C(&__p);
  sub_9A0118(&a13);
  sub_4D4B58((uint64_t)&a39);
  sub_35EA08((uint64_t)&a24);
  sub_59213C(&a32);
  sub_9A0118(&a35);
  sub_35EA08(v41 - 176);
  sub_99FC78(v39);
  _Unwind_Resume(a1);
}

void sub_99FC50(_Unwind_Exception *a1)
{
  sub_99FC78(v1);
  _Unwind_Resume(a1);
}

void sub_99FC64(_Unwind_Exception *a1)
{
  sub_99FC78(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_99FC78(uint64_t a1)
{
  sub_8E57D0((void *)(a1 + 24));
  int v2 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void **sub_99FCB4(void **a1)
{
  int v2 = (char *)*a1;
  if (*a1)
  {
    int v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        BOOL v5 = (void *)*((void *)v3 - 3);
        if (v5)
        {
          *((void *)v3 - 2) = v5;
          operator delete(v5);
        }
        v3 -= 40;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_99FD28(uint64_t a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  a6[1] = 0;
  a6[2] = 0;
  *a6 = 0;
  if (v6 != v7)
  {
    if (a4 == 1)
    {
      unsigned __int8 v10 = 4;
      goto LABEL_13;
    }
    if (a4 == 4 || a4 == 2)
    {
      if (a3 == 2)
      {
        unsigned __int8 v10 = 3;
        goto LABEL_13;
      }
      if (a3 == 1)
      {
        if (a5) {
          unsigned __int8 v10 = 2;
        }
        else {
          unsigned __int8 v10 = 1;
        }
LABEL_13:
        BOOL v11 = 0;
        int64x2_t v28 = 0uLL;
        unint64_t v29 = 0;
        do
        {
          if (*(unsigned __int8 *)(v6 + 80) == v10)
          {
            if ((unint64_t)v11 >= v29)
            {
              BOOL v11 = (void **)sub_9A6204(&v28, (long long *)v6);
            }
            else
            {
              sub_9982A0(v11, (long long *)v6);
              v11 += 10;
            }
            v28.i64[1] = (uint64_t)v11;
          }
          v6 += 88;
        }
        while (v6 != v7);
        uint64_t v12 = v28.i64[0];
        if ((void **)v28.i64[0] == v11)
        {
          if (!v11) {
            return;
          }
          goto LABEL_22;
        }
        while (1)
        {
          nullsub_1(__dst);
          sub_997C2C(v12, *(void *)a1 + 968, (uint64_t)&v24);
          sub_949D74(__dst, &v24);
          sub_949F50((uint64_t)__dst, *(_DWORD *)(*(void *)a1 + 968));
          sub_94AA40((uint64_t)__dst, (uint64_t)v22);
          if (!sub_45FB38(v22))
          {
            unint64_t v13 = a6[1];
            if (v13 >= a6[2])
            {
              uint64_t v14 = sub_980BF4(a6, (uint64_t)v22);
            }
            else
            {
              sub_4F58AC(a6[1], (uint64_t)v22);
              uint64_t v14 = v13 + 160;
              a6[1] = v13 + 160;
            }
            a6[1] = v14;
          }
          sub_4D4B58((uint64_t)v22);
          sub_949F1C((uint64_t)__dst);
          int v15 = v26;
          if (!v26) {
            goto LABEL_50;
          }
          int v16 = v27;
          uint64_t v17 = v26;
          if (v27 != v26) {
            break;
          }
LABEL_49:
          unsigned int v27 = v15;
          operator delete(v17);
LABEL_50:
          if (v25 < 0) {
            operator delete((void *)v24);
          }
          v12 += 80;
          if ((void **)v12 == v11)
          {
            BOOL v11 = (void **)v28.i64[0];
            if (!v28.i64[0]) {
              return;
            }
LABEL_22:
            sub_999B30((uint64_t)&v28, v11);
            operator delete((void *)v28.i64[0]);
            return;
          }
        }
        while (1)
        {
          char v19 = (void **)*(v16 - 3);
          if (v19) {
            break;
          }
LABEL_45:
          if (*((char *)v16 - 25) < 0)
          {
            operator delete(*(v16 - 6));
            long long v18 = v16 - 10;
            if ((*((char *)v16 - 57) & 0x80000000) == 0) {
              goto LABEL_34;
            }
LABEL_47:
            operator delete(*v18);
            int v16 = v18;
            if (v18 == v15)
            {
LABEL_48:
              uint64_t v17 = v26;
              goto LABEL_49;
            }
          }
          else
          {
            long long v18 = v16 - 10;
            if (*((char *)v16 - 57) < 0) {
              goto LABEL_47;
            }
LABEL_34:
            int v16 = v18;
            if (v18 == v15) {
              goto LABEL_48;
            }
          }
        }
        uint64_t v20 = (void **)*(v16 - 2);
        uint64_t v21 = *(v16 - 3);
        if (v20 == v19)
        {
LABEL_44:
          *(v16 - 2) = v19;
          operator delete(v21);
          goto LABEL_45;
        }
        while (1)
        {
          if (*((char *)v20 - 1) < 0)
          {
            operator delete(*(v20 - 3));
            if ((*((char *)v20 - 25) & 0x80000000) == 0) {
              goto LABEL_39;
            }
LABEL_42:
            operator delete(*(v20 - 6));
            v20 -= 6;
            if (v20 == v19)
            {
LABEL_43:
              uint64_t v21 = *(v16 - 3);
              goto LABEL_44;
            }
          }
          else
          {
            if (*((char *)v20 - 25) < 0) {
              goto LABEL_42;
            }
LABEL_39:
            v20 -= 6;
            if (v20 == v19) {
              goto LABEL_43;
            }
          }
        }
      }
    }
    unsigned __int8 v10 = 0;
    goto LABEL_13;
  }
}

void sub_99FFF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  *(void *)(v30 + 8) = v31;
  sub_4D4B58((uint64_t)&a10);
  sub_949F1C((uint64_t)&a30);
  sub_9A0088(v32 - 152);
  sub_99841C((void ***)(v32 - 104));
  sub_59213C((void **)v30);
  _Unwind_Resume(a1);
}

uint64_t sub_9A0088(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void **)(a1 + 24);
    if (v3 != v2)
    {
      do
      {
        v3 -= 80;
        sub_94B370(a1 + 40, v3);
      }
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 24);
    }
    *(void *)(a1 + 32) = v2;
    operator delete(v4);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void ***sub_9A0118(void ***a1)
{
  if (*a1)
  {
    sub_9A4C80((uint64_t)a1, *a1);
    operator delete(*a1);
  }
  return a1;
}

uint64_t sub_9A0154(uint64_t a1, unint64_t a2, int a3, char *a4)
{
  unsigned int v6 = a2;
  unint64_t v8 = HIDWORD(a2);
  LODWORD(v61.__r_.__value_.__l.__data_) = a2;
  LODWORD(v60.__r_.__value_.__l.__data_) = a3;
  *(void *)&long long v62 = &v60;
  *((void *)&v62 + 1) = &v61;
  unint64_t v9 = *(void *)(a1 + 3856) + 1;
  *(void *)(a1 + 3856) = v9;
  uint64_t v10 = *(void *)a1;
  if (!v10) {
    goto LABEL_38;
  }
  uint64_t v11 = a1 + 16;
  if (*(_DWORD *)(a1 + 592) == a2)
  {
    unsigned int v12 = 24;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 616) == a2)
  {
    unsigned int v12 = 25;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 640) == a2)
  {
    unsigned int v12 = 26;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 664) == a2)
  {
    unsigned int v12 = 27;
LABEL_10:
    ++*(void *)(a1 + 3864);
    uint64_t v13 = v11 + 24 * v12;
    *(void *)(v13 + 8) = v9;
    uint64_t v14 = *(unsigned int **)(v13 + 16);
    if (v14) {
      goto LABEL_11;
    }
LABEL_38:
    sub_2A54B4((int **)&v62);
    long long v18 = 0;
    if (a3 != 1) {
      goto LABEL_19;
    }
    return 0;
  }
  unint64_t v20 = *(void *)(a1 + 648);
  unint64_t v21 = *(void *)(a1 + 624);
  if (*(void *)(a1 + 600) >= v9)
  {
    int v22 = 0;
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + 600);
    int v22 = 24;
  }
  BOOL v23 = v21 >= v9;
  if (v21 < v9) {
    unint64_t v9 = *(void *)(a1 + 624);
  }
  int v24 = 25;
  if (v23) {
    int v24 = v22;
  }
  if (v20 >= v9) {
    unint64_t v25 = v9;
  }
  else {
    unint64_t v25 = *(void *)(a1 + 648);
  }
  unint64_t v26 = *(void *)(a1 + 672);
  if (v20 >= v9) {
    int v27 = v24;
  }
  else {
    int v27 = 26;
  }
  uint64_t v14 = (unsigned int *)sub_2AB884(v10, 6, a2, 1);
  unsigned int v28 = 27;
  if (v26 >= v25) {
    unsigned int v28 = v27;
  }
  uint64_t v29 = v11 + 24 * v28;
  *(_DWORD *)uint64_t v29 = v61.__r_.__value_.__l.__data_;
  *(void *)(v29 + 8) = *(void *)(a1 + 3856);
  *(void *)(v29 + 16) = v14;
  if (!v14) {
    goto LABEL_38;
  }
LABEL_11:
  int v15 = (int *)((char *)v14 + *v14);
  int v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 < 0x35u)
  {
    long long v18 = 0;
    if (a3 != 1) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v17 = v16[26];
    if (v17)
    {
      long long v18 = (int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17));
      if (*v18 > v8) {
        return (uint64_t)&v18[v8 + 1] + v18[v8 + 1];
      }
    }
    else
    {
      long long v18 = 0;
    }
    if (a3 != 1)
    {
LABEL_19:
      if (!a3)
      {
        exception = __cxa_allocate_exception(0x40uLL);
        uint64_t v31 = a4;
        uint64_t v32 = (uint64_t)exception;
        sub_5E5C(&v55, v31);
        int v33 = std::string::insert(&v55, 0, "Failed to acquire entity \"");
        long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
        v56.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v34;
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        uint64_t v35 = std::string::append(&v56, "\" in quad node ");
        long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v57.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v54, v6);
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v37 = &v54;
        }
        else {
          uint64_t v37 = (std::string *)v54.__r_.__value_.__r.__words[0];
        }
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v54.__r_.__value_.__l.__size_;
        }
        uint64_t v39 = std::string::append(&v57, (const std::string::value_type *)v37, size);
        long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v58.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        uint64_t v41 = std::string::append(&v58, " at position ");
        long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
        v59.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v42;
        v41->__r_.__value_.__l.__size_ = 0;
        v41->__r_.__value_.__r.__words[2] = 0;
        v41->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v53, v8);
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v43 = &v53;
        }
        else {
          unint64_t v43 = (std::string *)v53.__r_.__value_.__r.__words[0];
        }
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v44 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v44 = v53.__r_.__value_.__l.__size_;
        }
        uint64_t v45 = std::string::append(&v59, (const std::string::value_type *)v43, v44);
        long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
        v60.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v46;
        v45->__r_.__value_.__l.__size_ = 0;
        v45->__r_.__value_.__r.__words[2] = 0;
        v45->__r_.__value_.__r.__words[0] = 0;
        uint64_t v47 = std::string::append(&v60, " on layer ");
        long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v61.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        uint64_t v49 = sub_736EC(6u);
        long long v50 = std::string::append(&v61, v49);
        long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
        std::string::size_type v63 = v50->__r_.__value_.__r.__words[2];
        long long v62 = v51;
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        uint64_t v52 = (void *)sub_2F404(v32, &v62);
      }
      return (uint64_t)&v18[v8 + 1] + v18[v8 + 1];
    }
  }
  return 0;
}

void sub_9A04EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (*(char *)(v54 - 105) < 0) {
    operator delete(*(void **)(v54 - 128));
  }
  if (*(char *)(v54 - 137) < 0)
  {
    operator delete(*(void **)(v54 - 160));
    if ((*(char *)(v54 - 169) & 0x80000000) == 0)
    {
LABEL_5:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_15;
    }
  }
  else if ((*(char *)(v54 - 169) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v54 - 192));
  if ((a15 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a54 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(a10);
  if ((a54 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a47 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(a49);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a21 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a42);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a40 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a16);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a33 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a35);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a27 & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_12;
  }
LABEL_20:
  operator delete(a28);
  if ((a27 & 0x80000000) == 0) {
LABEL_21:
  }
    _Unwind_Resume(a1);
LABEL_12:
  operator delete(__p);
  goto LABEL_21;
}

uint64_t *sub_9A06A8@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  long long v3 = 0uLL;
  if (!result || (uint64_t v4 = result, v5 = *(unsigned int *)result, !v5))
  {
    int v15 = 0;
    goto LABEL_20;
  }
  unsigned int v6 = (char *)operator new(12 * v5);
  uint64_t v7 = 0;
  *(void *)&long long v16 = v6;
  *((void *)&v16 + 1) = v6;
  uint64_t v17 = &v6[12 * v5];
  do
  {
    uint64_t v8 = *(unsigned int *)((char *)v4 + v7 + 4);
    uint64_t v9 = v8 - *(int *)((char *)v4 + v7 + v8 + 4);
    uint64_t v10 = (unsigned __int16 *)((char *)v4 + v7 + v9);
    unsigned int v11 = v10[2];
    if (v11 < 7)
    {
      int v13 = 0;
      LODWORD(v12) = 0;
LABEL_13:
      LODWORD(v14) = 0;
      goto LABEL_14;
    }
    uint64_t v12 = v10[5];
    if (v10[5]) {
      LODWORD(v12) = *((unsigned __int8 *)v4 + v7 + v8 + v12 + 4);
    }
    if (v11 < 9)
    {
      int v13 = 0;
      goto LABEL_13;
    }
    if (*(_WORD *)((char *)v4 + v7 + v9 + 12))
    {
      int v13 = *((unsigned __int8 *)v4 + v7 + v8 + *(unsigned __int16 *)((char *)v4 + v7 + v9 + 12) + 4);
      if (v11 < 0xB) {
        goto LABEL_13;
      }
    }
    else
    {
      int v13 = 0;
      if (v11 < 0xB) {
        goto LABEL_13;
      }
    }
    uint64_t v14 = *(unsigned __int16 *)((char *)v4 + v7 + v9 + 14);
    if (v14) {
      LODWORD(v14) = (*((unsigned char *)v4 + v7 + v8 + v14 + 4) != 0) << 16;
    }
LABEL_14:
    uint64_t v18 = *(uint64_t *)((char *)v4 + v7 + v8 + v10[4] + 4);
    int v19 = v14 | (v13 << 8) | v12;
    double result = sub_9A0848(&v16, v6, (uint64_t)&v18);
    unsigned int v6 = (char *)result + 12;
    v7 += 4;
  }
  while (4 * v5 != v7);
  long long v3 = v16;
  int v15 = v17;
LABEL_20:
  *(_OWORD *)a2 = v3;
  *(void *)(a2 + 16) = v15;
  return result;
}

void sub_9A082C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_9A0848(void *a1, char *__src, uint64_t a3)
{
  uint64_t v4 = (uint64_t *)__src;
  unsigned int v6 = (char *)a1[1];
  unint64_t v7 = a1[2];
  if ((unint64_t)v6 >= v7)
  {
    int v13 = (char *)*a1;
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v6[-*a1] >> 2) + 1;
    if (v14 > 0x1555555555555555) {
      sub_2E00();
    }
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)v13) >> 2);
    if (2 * v15 > v14) {
      unint64_t v14 = 2 * v15;
    }
    if (v15 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v16 = 0x1555555555555555;
    }
    else {
      unint64_t v16 = v14;
    }
    uint64_t v35 = a1 + 2;
    if (v16)
    {
      if (v16 > 0x1555555555555555) {
        sub_188D718();
      }
      uint64_t v17 = (char *)operator new(12 * v16);
    }
    else
    {
      uint64_t v17 = 0;
    }
    uint64_t v31 = v17;
    uint64_t v32 = &v17[4 * (((char *)v4 - v13) >> 2)];
    std::string __dst = v32;
    long long v34 = &v17[12 * v16];
    sub_9A0AF8((uint64_t)&v31, (uint64_t *)a3);
    int v19 = v32;
    unint64_t v20 = (uint64_t *)*a1;
    unint64_t v21 = v32;
    if ((uint64_t *)*a1 != v4)
    {
      int v22 = v4;
      unint64_t v21 = v32;
      do
      {
        uint64_t v23 = *(uint64_t *)((char *)v22 - 12);
        int v22 = (uint64_t *)((char *)v22 - 12);
        int v24 = *(_DWORD *)((char *)v22 + 7);
        *(void *)(v21 - 12) = v23;
        v21 -= 12;
        *(_DWORD *)(v21 + 7) = v24;
      }
      while (v22 != v20);
    }
    uint64_t v32 = v21;
    unint64_t v25 = (uint64_t *)a1[1];
    unint64_t v26 = (char *)__dst;
    int64_t v27 = (char *)v25 - (char *)v4;
    if (v25 != v4)
    {
      memmove(__dst, v4, v27 - 1);
      unint64_t v21 = v32;
      uint64_t v4 = (uint64_t *)a1[1];
    }
    unsigned int v28 = (uint64_t *)*a1;
    *a1 = v21;
    a1[1] = &v26[v27];
    uint64_t v29 = (char *)a1[2];
    a1[2] = v34;
    std::string __dst = v4;
    long long v34 = v29;
    uint64_t v31 = (char *)v28;
    uint64_t v32 = (char *)v28;
    if (v4 != v28) {
      std::string __dst = (char *)v28 + ((char *)v4 - (char *)v28 - 12) % 0xCuLL;
    }
    if (v28) {
      operator delete(v28);
    }
    return (uint64_t *)v19;
  }
  else if (__src == v6)
  {
    uint64_t v18 = *(void *)a3;
    *((_DWORD *)__src + 2) = *(_DWORD *)(a3 + 8);
    *(void *)int __src = v18;
    a1[1] = __src + 12;
  }
  else
  {
    uint64_t v8 = __src + 12;
    uint64_t v9 = v6 - 12;
    uint64_t v10 = a1[1];
    if ((unint64_t)v6 >= 0xC)
    {
      do
      {
        uint64_t v11 = *(void *)v9;
        *(_DWORD *)(v10 + 8) = *((_DWORD *)v9 + 2);
        *(void *)uint64_t v10 = v11;
        v10 += 12;
        v9 += 12;
      }
      while (v9 < v6);
    }
    a1[1] = v10;
    if (v6 != v8) {
      memmove(v8, __src, v6 - v8 - 1);
    }
    uint64_t v12 = *(void *)a3;
    *(_DWORD *)((char *)v4 + 7) = *(_DWORD *)(a3 + 7);
    *uint64_t v4 = v12;
  }
  return v4;
}

void sub_9A0A9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (a12 == a11)
  {
    int v13 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  else
  {
    int v13 = __p;
    if (!__p) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

void sub_9A0AF8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(char **)(a1 + 16);
  if (v4 == *(char **)(a1 + 24))
  {
    unsigned int v6 = *(char **)a1;
    uint64_t v5 = *(char **)(a1 + 8);
    if ((unint64_t)v5 <= *(void *)a1)
    {
      unint64_t v15 = 0x5555555555555556 * ((v4 - v6) >> 2);
      if (v4 == v6) {
        unint64_t v15 = 1;
      }
      if (v15 >= 0x1555555555555556) {
        sub_188D718();
      }
      unint64_t v16 = v15 >> 2;
      uint64_t v17 = 12 * v15;
      uint64_t v18 = (char *)operator new(12 * v15);
      int v19 = &v18[12 * v16];
      int64_t v21 = v4 - v5;
      BOOL v20 = v4 == v5;
      uint64_t v4 = v19;
      if (!v20)
      {
        uint64_t v22 = v21 / 12;
        uint64_t v4 = &v19[12 * v22];
        uint64_t v23 = 12 * v22;
        int v24 = &v18[12 * v16];
        do
        {
          uint64_t v25 = *(void *)v5;
          *((_DWORD *)v24 + 2) = *((_DWORD *)v5 + 2);
          *(void *)int v24 = v25;
          v24 += 12;
          v5 += 12;
          v23 -= 12;
        }
        while (v23);
      }
      *(void *)a1 = v18;
      *(void *)(a1 + 8) = v19;
      *(void *)(a1 + 16) = v4;
      *(void *)(a1 + 24) = &v18[v17];
      if (v6)
      {
        operator delete(v6);
        uint64_t v4 = *(char **)(a1 + 16);
      }
    }
    else
    {
      int64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v5[-*(void *)a1] >> 2);
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = v8 >> 1;
      uint64_t v10 = -v9;
      uint64_t v11 = -12 * v9;
      uint64_t v12 = &v5[v11];
      int v13 = (char *)(v4 - v5);
      if (v4 != v5)
      {
        memmove(&v5[v11], *(const void **)(a1 + 8), (size_t)(v13 - 1));
        uint64_t v4 = *(char **)(a1 + 8);
      }
      unint64_t v14 = &v4[12 * v10];
      uint64_t v4 = &v13[(void)v12];
      *(void *)(a1 + 8) = v14;
      *(void *)(a1 + 16) = &v13[(void)v12];
    }
  }
  uint64_t v26 = *a2;
  *((_DWORD *)v4 + 2) = *((_DWORD *)a2 + 2);
  *(void *)uint64_t v4 = v26;
  *(void *)(a1 + 16) += 12;
}

uint64_t sub_9A0C80(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 64);
    uint64_t v4 = *(void **)(a1 + 56);
    if (v3 == v2)
    {
LABEL_11:
      *(void *)(a1 + 64) = v2;
      operator delete(v4);
      goto LABEL_12;
    }
    while (1)
    {
      if (*(char *)(v3 - 1) < 0)
      {
        operator delete(*(void **)(v3 - 24));
        if (*(char *)(v3 - 25) < 0) {
LABEL_9:
        }
          operator delete(*(void **)(v3 - 48));
      }
      else if (*(char *)(v3 - 25) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 48;
      if (v3 == v2)
      {
        uint64_t v4 = *(void **)(a1 + 56);
        goto LABEL_11;
      }
    }
  }
LABEL_12:
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_9A0D4C(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = -1;
  sub_5F3B34(a1 + 32);
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  sub_5F3B34(a1 + 216);
  sub_5F3B34(a1 + 376);
  *(_DWORD *)(a1 + 564) = 0;
  *(void *)(a1 + 536) = 0;
  *(void *)(a1 + 552) = 0;
  *(void *)(a1 + 544) = 0;
  *(unsigned char *)(a1 + 560) = 0;
  return a1;
}

void sub_9A0DCC(_Unwind_Exception *a1)
{
  uint64_t v5 = v3;
  sub_4D4B58(v5);
  int64_t v7 = *v4;
  if (*v4)
  {
    uint64_t v8 = *(void *)(v1 + 200);
    uint64_t v9 = *v4;
    if ((void *)v8 != v7)
    {
      do
        uint64_t v8 = sub_4D4B58(v8 - 160);
      while ((void *)v8 != v7);
      uint64_t v9 = *v4;
    }
    *(void *)(v1 + 200) = v7;
    operator delete(v9);
  }
  sub_4D4B58(v2);
  uint64_t v10 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v10;
    operator delete(v10);
  }
  _Unwind_Resume(a1);
}

void sub_9A0E44(int *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  uint64_t v4 = sub_1133328();
  *(void *)(a2 + 56) = 0;
  uint64_t v5 = (void **)(a2 + 56);
  *(void *)(a2 + 48) = v4;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(unsigned char *)(a2 + 80) = 0;
  if (a1)
  {
    unsigned int v6 = (unsigned __int16 *)((char *)a1 - *a1);
    if (*v6 >= 5u && (uint64_t v7 = v6[2]) != 0) {
      uint64_t v8 = (int *)((char *)a1 + v7 + *(unsigned int *)((char *)a1 + v7));
    }
    else {
      uint64_t v8 = 0;
    }
    sub_9A1DCC(v8, (uint64_t)v21);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    *(_OWORD *)a2 = *(_OWORD *)v21;
    *(void *)(a2 + 16) = v22;
    HIBYTE(v22) = 0;
    LOBYTE(v21[0]) = 0;
    uint64_t v9 = (void **)(a2 + 24);
    uint64_t v10 = *(void *)(a2 + 24);
    if (v10)
    {
      uint64_t v11 = *(void *)(a2 + 32);
      uint64_t v12 = *(void **)(a2 + 24);
      if (v11 != v10)
      {
        do
        {
          v11 -= 80;
          sub_94B370(a2 + 40, v11);
        }
        while (v11 != v10);
        uint64_t v12 = *v9;
      }
      *(void *)(a2 + 32) = v10;
      operator delete(v12);
      *uint64_t v9 = 0;
      *(void *)(a2 + 32) = 0;
      *(void *)(a2 + 40) = 0;
    }
    *(_OWORD *)(a2 + 24) = *(_OWORD *)__p;
    uint64_t v13 = v24[0];
    uint64_t v14 = v24[1];
    __p[1] = 0;
    v24[0] = 0;
    __p[0] = 0;
    *(void *)(a2 + 40) = v13;
    *(void *)(a2 + 48) = v14;
    uint64_t v15 = *(void *)(a2 + 56);
    if (v15)
    {
      sub_99957C(a2 + 56, v15);
      operator delete(*v5);
      *uint64_t v5 = 0;
      *(void *)(a2 + 64) = 0;
      *(void *)(a2 + 72) = 0;
      unint64_t v16 = (char *)__p[0];
    }
    else
    {
      unint64_t v16 = 0;
    }
    *(_OWORD *)(a2 + 56) = v25;
    *(void *)(a2 + 72) = v26;
    uint64_t v26 = 0;
    long long v25 = 0uLL;
    if (v16)
    {
      uint64_t v17 = (char *)__p[1];
      uint64_t v18 = v16;
      if (__p[1] != v16)
      {
        do
        {
          v17 -= 80;
          sub_94B370((uint64_t)v24, (uint64_t)v17);
        }
        while (v17 != v16);
        uint64_t v18 = (char *)__p[0];
      }
      __p[1] = v16;
      operator delete(v18);
    }
    if (SHIBYTE(v22) < 0)
    {
      operator delete(v21[0]);
      int v19 = (unsigned __int16 *)((char *)a1 - *a1);
      if (*v19 >= 7u)
      {
LABEL_23:
        uint64_t v20 = v19[3];
        if (v20) {
          LOBYTE(v20) = *((unsigned char *)a1 + v20);
        }
        goto LABEL_27;
      }
    }
    else
    {
      int v19 = (unsigned __int16 *)((char *)a1 - *a1);
      if (*v19 >= 7u) {
        goto LABEL_23;
      }
    }
    LOBYTE(v20) = 0;
LABEL_27:
    *(unsigned char *)(a2 + 80) = v20;
  }
}

void sub_9A1048(_Unwind_Exception *a1)
{
  sub_998370(v1);
  _Unwind_Resume(a1);
}

void sub_9A105C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 24);
  if (v3) {
    sub_20AD25C(v1, v3);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_9A108C(unint64_t *a1, unint64_t a2)
{
  unint64_t v2 = a1[2];
  unint64_t v3 = *a1;
  if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v2 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x2E8BA2E8BA2E8BBLL) {
      sub_2E00();
    }
    unint64_t v5 = a1[1];
    unint64_t v17 = 0;
    uint64_t v18 = a1 + 2;
    uint64_t v6 = 88 * a2;
    uint64_t v7 = (char *)operator new(88 * a2);
    uint64_t v8 = &v7[v5 - v3];
    if (v5 == v3)
    {
      int64x2_t v13 = vdupq_n_s64(v3);
      uint64_t v14 = &v7[v5 - v3];
    }
    else
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t v10 = &v8[v9];
        uint64_t v11 = v5 + v9;
        long long v12 = *(_OWORD *)(v5 + v9 - 88);
        *((void *)v10 - 9) = *(void *)(v5 + v9 - 72);
        *(_OWORD *)(v10 - 88) = v12;
        *(void *)(v11 - 80) = 0;
        *(void *)(v11 - 72) = 0;
        *(void *)(v11 - 88) = 0;
        *((_OWORD *)v10 - 4) = *(_OWORD *)(v5 + v9 - 64);
        *((void *)v10 - 6) = *(void *)(v5 + v9 - 48);
        *(void *)(v11 - 64) = 0;
        *(void *)(v11 - 56) = 0;
        *(void *)(v11 - 48) = 0;
        *((void *)v10 - 5) = *(void *)(v5 + v9 - 40);
        *((_OWORD *)v10 - 2) = *(_OWORD *)(v5 + v9 - 32);
        *((void *)v10 - 2) = *(void *)(v5 + v9 - 16);
        *(void *)(v11 - 32) = 0;
        *(void *)(v11 - 24) = 0;
        *(void *)(v11 - 16) = 0;
        *(v10 - 8) = *(unsigned char *)(v5 + v9 - 8);
        v9 -= 88;
      }
      while (v5 + v9 != v3);
      int64x2_t v13 = *(int64x2_t *)a1;
      unint64_t v2 = a1[2];
      uint64_t v14 = &v8[v9];
    }
    *a1 = (unint64_t)v14;
    a1[1] = (unint64_t)v8;
    int64x2_t v16 = v13;
    a1[2] = (unint64_t)&v7[v6];
    unint64_t v17 = v2;
    long long __p = (void *)v13.i64[0];
    sub_9A12BC((uint64_t)&__p, v13.i64[0]);
    if (__p) {
      operator delete(__p);
    }
  }
}

uint64_t sub_9A11F4(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_9A122C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    uint64_t v4 = *(void **)(a1 + 32);
    if (v3 != v2)
    {
      do
      {
        v3 -= 80;
        sub_94B370(a1 + 48, v3);
      }
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 32);
    }
    *(void *)(a1 + 40) = v2;
    operator delete(v4);
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_9A12BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == a2) {
    return;
  }
  do
  {
    uint64_t v5 = *(void *)(v2 - 32);
    *(void *)(a1 + 16) = v2 - 88;
    if (v5)
    {
      sub_99957C(v2 - 32, v5);
      operator delete(*(void **)(v2 - 32));
    }
    uint64_t v6 = *(void ***)(v2 - 64);
    if (v6)
    {
      uint64_t v7 = *(void ***)(v2 - 56);
      uint64_t v8 = *(void **)(v2 - 64);
      if (v7 == v6) {
        goto LABEL_27;
      }
      while (1)
      {
        uint64_t v9 = (void **)*(v7 - 3);
        if (!v9) {
          goto LABEL_21;
        }
        uint64_t v10 = (void **)*(v7 - 2);
        uint64_t v11 = *(v7 - 3);
        if (v10 != v9) {
          break;
        }
LABEL_20:
        *(v7 - 2) = v9;
        operator delete(v11);
LABEL_21:
        if (*((char *)v7 - 25) < 0)
        {
          operator delete(*(v7 - 6));
          long long v12 = v7 - 10;
          if (*((char *)v7 - 57) < 0) {
LABEL_25:
          }
            operator delete(*v12);
        }
        else
        {
          long long v12 = v7 - 10;
          if (*((char *)v7 - 57) < 0) {
            goto LABEL_25;
          }
        }
        uint64_t v7 = v12;
        if (v12 == v6)
        {
          uint64_t v8 = *(void **)(v2 - 64);
LABEL_27:
          *(void *)(v2 - 56) = v6;
          operator delete(v8);
          goto LABEL_28;
        }
      }
      while (1)
      {
        if (*((char *)v10 - 1) < 0)
        {
          operator delete(*(v10 - 3));
          if (*((char *)v10 - 25) < 0) {
LABEL_18:
          }
            operator delete(*(v10 - 6));
        }
        else if (*((char *)v10 - 25) < 0)
        {
          goto LABEL_18;
        }
        v10 -= 6;
        if (v10 == v9)
        {
          uint64_t v11 = *(v7 - 3);
          goto LABEL_20;
        }
      }
    }
LABEL_28:
    if (*(char *)(v2 - 65) < 0) {
      operator delete(*(void **)(v2 - 88));
    }
    uint64_t v2 = *(void *)(a1 + 16);
  }
  while (v2 != a2);
}

uint64_t sub_9A141C(unsigned int **a1, unsigned int **a2, uint64_t a3, uint64_t a4, void (*a5)(void **__return_ptr, char *))
{
  if (*a1 == *a2) {
    return a3;
  }
  a5(v20, (char *)*a1 + **a1);
  while (1)
  {
    uint64_t v11 = sub_9A15E8(a3, a4, (uint64_t)v20);
    if (__p)
    {
      sub_99957C((uint64_t)&__p, (uint64_t)__p);
      operator delete(__p);
    }
    long long v12 = (void **)v22;
    if (v22)
    {
      int64x2_t v13 = v23;
      uint64_t v14 = v22;
      if (v23 == v22) {
        goto LABEL_28;
      }
      while (1)
      {
        uint64_t v15 = (void **)*(v13 - 3);
        if (!v15) {
          goto LABEL_22;
        }
        int64x2_t v16 = (void **)*(v13 - 2);
        unint64_t v17 = *(v13 - 3);
        if (v16 != v15) {
          break;
        }
LABEL_21:
        *(v13 - 2) = v15;
        operator delete(v17);
LABEL_22:
        if (*((char *)v13 - 25) < 0)
        {
          operator delete(*(v13 - 6));
          uint64_t v18 = v13 - 10;
          if (*((char *)v13 - 57) < 0) {
LABEL_26:
          }
            operator delete(*v18);
        }
        else
        {
          uint64_t v18 = v13 - 10;
          if (*((char *)v13 - 57) < 0) {
            goto LABEL_26;
          }
        }
        int64x2_t v13 = v18;
        if (v18 == v12)
        {
          uint64_t v14 = v22;
LABEL_28:
          uint64_t v23 = v12;
          operator delete(v14);
          goto LABEL_29;
        }
      }
      while (1)
      {
        if (*((char *)v16 - 1) < 0)
        {
          operator delete(*(v16 - 3));
          if (*((char *)v16 - 25) < 0) {
LABEL_19:
          }
            operator delete(*(v16 - 6));
        }
        else if (*((char *)v16 - 25) < 0)
        {
          goto LABEL_19;
        }
        v16 -= 6;
        if (v16 == v15)
        {
          unint64_t v17 = *(v13 - 3);
          goto LABEL_21;
        }
      }
    }
LABEL_29:
    if (v21 < 0) {
      operator delete(v20[0]);
    }
    a4 = (uint64_t)v11 + 88;
    uint64_t v10 = *a1 + 1;
    *a1 = v10;
    if (v10 == *a2) {
      return a3;
    }
    a5(v20, (char *)v10 + *v10);
  }
}

void sub_9A15D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_998370((uint64_t)va);
  _Unwind_Resume(a1);
}

long long *sub_9A15E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (long long *)a2;
  uint64_t v7 = *(long long **)a1;
  unint64_t v6 = *(void *)(a1 + 8);
  uint64_t v8 = 0x2E8BA2E8BA2E8BA3 * ((a2 - *(void *)a1) >> 3);
  unint64_t v9 = *(void *)(a1 + 16);
  if (v6 >= v9)
  {
    unint64_t v15 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v6 - (void)v7) >> 3) + 1;
    if (v15 > 0x2E8BA2E8BA2E8BALL) {
      sub_2E00();
    }
    unint64_t v16 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v9 - (void)v7) >> 3);
    if (2 * v16 > v15) {
      unint64_t v15 = 2 * v16;
    }
    if (v16 >= 0x1745D1745D1745DLL) {
      unint64_t v17 = 0x2E8BA2E8BA2E8BALL;
    }
    else {
      unint64_t v17 = v15;
    }
    uint64_t v26 = a1 + 16;
    if (v17)
    {
      if (v17 > 0x2E8BA2E8BA2E8BALL) {
        sub_188D718();
      }
      uint64_t v18 = (char *)operator new(88 * v17);
    }
    else
    {
      uint64_t v18 = 0;
    }
    long long __p = v18;
    uint64_t v23 = &v18[88 * v8];
    uint64_t v24 = (uint64_t)v23;
    long long v25 = &v18[88 * v17];
    sub_9A18E4((uint64_t)&__p, (long long *)a3);
    uint64_t v4 = sub_9A1B60((long long **)a1, &__p, v4);
    sub_9A12BC((uint64_t)&__p, (uint64_t)v23);
    if (__p) {
      operator delete(__p);
    }
  }
  else
  {
    if (a2 != v6)
    {
      uint64_t v10 = a2 + 88;
      uint64_t v11 = v6 - 88;
      if (v6 < 0x58)
      {
        *(void *)(a1 + 8) = v6;
        if (v6 == v10)
        {
LABEL_24:
          sub_9A1CC4((uint64_t)v4, (long long *)a3);
          *((unsigned char *)v7 + 88 * v8 + 80) = *(unsigned char *)(a3 + 80);
          return v4;
        }
      }
      else
      {
        unint64_t v12 = v6 - 88;
        uint64_t v13 = *(void *)(a1 + 8);
        do
        {
          long long v14 = *(_OWORD *)v12;
          *(void *)(v13 + 16) = *(void *)(v12 + 16);
          *(_OWORD *)uint64_t v13 = v14;
          *(void *)(v12 + 8) = 0;
          *(void *)(v12 + 16) = 0;
          *(void *)unint64_t v12 = 0;
          *(void *)(v13 + 24) = 0;
          *(void *)(v13 + 32) = 0;
          *(void *)(v13 + 40) = 0;
          *(_OWORD *)(v13 + 24) = *(_OWORD *)(v12 + 24);
          *(void *)(v13 + 40) = *(void *)(v12 + 40);
          *(void *)(v12 + 32) = 0;
          *(void *)(v12 + 40) = 0;
          *(void *)(v12 + 24) = 0;
          *(void *)(v13 + 48) = *(void *)(v12 + 48);
          *(void *)(v13 + 56) = 0;
          *(void *)(v13 + 64) = 0;
          *(void *)(v13 + 72) = 0;
          *(_OWORD *)(v13 + 56) = *(_OWORD *)(v12 + 56);
          *(void *)(v13 + 72) = *(void *)(v12 + 72);
          *(void *)(v12 + 56) = 0;
          *(void *)(v12 + 64) = 0;
          *(void *)(v12 + 72) = 0;
          *(unsigned char *)(v13 + 80) = *(unsigned char *)(v12 + 80);
          v13 += 88;
          v12 += 88;
        }
        while (v12 < v6);
        *(void *)(a1 + 8) = v13;
        if (v6 == v10) {
          goto LABEL_24;
        }
      }
      uint64_t v20 = 8 * ((uint64_t)(v6 - v10) >> 3);
      do
      {
        sub_9A1CC4(v11, (long long *)((char *)v4 + v20 - 88));
        *(unsigned char *)(v11 + 80) = *((unsigned char *)v4 + v20 - 8);
        v11 -= 88;
        v20 -= 88;
      }
      while (v20);
      goto LABEL_24;
    }
    long long v19 = *(_OWORD *)a3;
    *(void *)(a2 + 16) = *(void *)(a3 + 16);
    *(_OWORD *)a2 = v19;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)a3 = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
    *(void *)(a2 + 40) = *(void *)(a3 + 40);
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a2 + 48) = *(void *)(a3 + 48);
    *(void *)(a2 + 56) = 0;
    *(void *)(a2 + 64) = 0;
    *(void *)(a2 + 72) = 0;
    *(_OWORD *)(a2 + 56) = *(_OWORD *)(a3 + 56);
    *(void *)(a2 + 72) = *(void *)(a3 + 72);
    *(void *)(a3 + 64) = 0;
    *(void *)(a3 + 72) = 0;
    *(void *)(a3 + 56) = 0;
    *((unsigned char *)v7 + 88 * v8 + 80) = *(unsigned char *)(a3 + 80);
    *(void *)(a1 + 8) = a2 + 88;
  }
  return v4;
}

void sub_9A18D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_9A11F4((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_9A18E4(uint64_t a1, long long *a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 == *(void *)(a1 + 24))
  {
    unint64_t v6 = *(void **)a1;
    unint64_t v5 = *(void *)(a1 + 8);
    if (v5 <= *(void *)a1)
    {
      unint64_t v13 = 0x5D1745D1745D1746 * ((uint64_t)(v4 - (void)v6) >> 3);
      if ((void *)v4 == v6) {
        unint64_t v13 = 1;
      }
      uint64_t v14 = *(void *)(a1 + 32);
      unint64_t v27 = 0;
      uint64_t v28 = v14;
      if (v13 >= 0x2E8BA2E8BA2E8BBLL) {
        sub_188D718();
      }
      unint64_t v15 = v13 >> 2;
      uint64_t v16 = 88 * v13;
      unint64_t v17 = (char *)operator new(88 * v13);
      uint64_t v18 = &v17[88 * v15];
      if (v4 == v5)
      {
        int64x2_t v22 = vdupq_n_s64(v4);
        long long v19 = &v17[88 * v15];
      }
      else
      {
        long long v19 = &v18[v4 - v5];
        uint64_t v20 = &v17[88 * v15];
        do
        {
          long long v21 = *(_OWORD *)v5;
          *((void *)v20 + 2) = *(void *)(v5 + 16);
          *(_OWORD *)uint64_t v20 = v21;
          *(void *)(v5 + 8) = 0;
          *(void *)(v5 + 16) = 0;
          *(void *)unint64_t v5 = 0;
          *(_OWORD *)(v20 + 24) = *(_OWORD *)(v5 + 24);
          *((void *)v20 + 5) = *(void *)(v5 + 40);
          *(void *)(v5 + 24) = 0;
          *(void *)(v5 + 32) = 0;
          *(void *)(v5 + 40) = 0;
          *((void *)v20 + 6) = *(void *)(v5 + 48);
          *(_OWORD *)(v20 + 56) = *(_OWORD *)(v5 + 56);
          *((void *)v20 + 9) = *(void *)(v5 + 72);
          *(void *)(v5 + 56) = 0;
          *(void *)(v5 + 64) = 0;
          *(void *)(v5 + 72) = 0;
          v20[80] = *(unsigned char *)(v5 + 80);
          v20 += 88;
          v5 += 88;
        }
        while (v20 != v19);
        unint64_t v6 = *(void **)a1;
        int64x2_t v22 = *(int64x2_t *)(a1 + 8);
        unint64_t v4 = *(void *)(a1 + 24);
      }
      long long __p = v6;
      *(void *)a1 = v17;
      *(void *)(a1 + 8) = v18;
      int64x2_t v26 = v22;
      *(void *)(a1 + 16) = v19;
      *(void *)(a1 + 24) = &v17[v16];
      unint64_t v27 = v4;
      sub_9A12BC((uint64_t)&__p, v22.i64[0]);
      if (__p) {
        operator delete(__p);
      }
      unint64_t v4 = *(void *)(a1 + 16);
    }
    else
    {
      uint64_t v7 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v5 - *(void *)a1) >> 3);
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = v8 >> 1;
      uint64_t v10 = -v9;
      if (v5 == v4)
      {
        unint64_t v12 = v5 - 88 * v9;
      }
      else
      {
        uint64_t v11 = -88 * v9;
        do
        {
          sub_9A1CC4(v5 + v11, (long long *)v5);
          *(unsigned char *)(v5 + v11 + 80) = *(unsigned char *)(v5 + 80);
          v5 += 88;
        }
        while (v5 != v4);
        unint64_t v4 = *(void *)(a1 + 8);
        unint64_t v12 = v5 + 88 * v10;
      }
      *(void *)(a1 + 8) = v4 + 88 * v10;
      *(void *)(a1 + 16) = v12;
      unint64_t v4 = v12;
    }
  }
  long long v23 = *a2;
  *(void *)(v4 + 16) = *((void *)a2 + 2);
  *(_OWORD *)unint64_t v4 = v23;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(void *)(v4 + 24) = 0;
  *(void *)(v4 + 32) = 0;
  *(void *)(v4 + 40) = 0;
  *(_OWORD *)(v4 + 24) = *(long long *)((char *)a2 + 24);
  *(void *)(v4 + 40) = *((void *)a2 + 5);
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)(v4 + 48) = *((void *)a2 + 6);
  *(void *)(v4 + 56) = 0;
  *(void *)(v4 + 64) = 0;
  *(void *)(v4 + 72) = 0;
  __n128 result = *(__n128 *)((char *)a2 + 56);
  *(__n128 *)(v4 + 56) = result;
  *(void *)(v4 + 72) = *((void *)a2 + 9);
  *((void *)a2 + 8) = 0;
  *((void *)a2 + 9) = 0;
  *((void *)a2 + 7) = 0;
  *(unsigned char *)(v4 + 80) = *((unsigned char *)a2 + 80);
  *(void *)(a1 + 16) += 88;
  return result;
}

long long *sub_9A1B60(long long **a1, void *a2, long long *a3)
{
  __n128 result = (long long *)a2[1];
  unint64_t v5 = *a1;
  unint64_t v6 = result;
  if (*a1 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = (uint64_t)result + v7;
      uint64_t v9 = (uint64_t)a3 + v7;
      long long v10 = *(long long *)((char *)a3 + v7 - 88);
      *(void *)(v8 - 72) = *(void *)((char *)a3 + v7 - 72);
      *(_OWORD *)(v8 - 88) = v10;
      *(void *)(v9 - 80) = 0;
      *(void *)(v9 - 72) = 0;
      *(void *)(v9 - 88) = 0;
      *(void *)(v8 - 64) = 0;
      *(void *)(v8 - 56) = 0;
      *(void *)(v8 - 48) = 0;
      *(_OWORD *)(v8 - 64) = *(long long *)((char *)a3 + v7 - 64);
      *(void *)(v8 - 48) = *(void *)((char *)a3 + v7 - 48);
      *(void *)(v9 - 56) = 0;
      *(void *)(v9 - 48) = 0;
      *(void *)(v9 - 64) = 0;
      *(void *)(v8 - 40) = *(void *)((char *)a3 + v7 - 40);
      *(void *)(v8 - 32) = 0;
      *(void *)(v8 - 24) = 0;
      *(void *)(v8 - 16) = 0;
      *(_OWORD *)(v8 - 32) = *(long long *)((char *)a3 + v7 - 32);
      *(void *)(v8 - 16) = *(void *)((char *)a3 + v7 - 16);
      *(void *)(v9 - 32) = 0;
      *(void *)(v9 - 24) = 0;
      *(void *)(v9 - 16) = 0;
      *(unsigned char *)(v8 - 8) = *((unsigned char *)a3 + v7 - 8);
      v7 -= 88;
    }
    while ((long long *)((char *)a3 + v7) != v5);
    unint64_t v6 = (long long *)((char *)result + v7);
  }
  a2[1] = v6;
  uint64_t v11 = a1[1];
  uint64_t v12 = a2[2];
  if (v11 != a3)
  {
    do
    {
      long long v13 = *a3;
      *(void *)(v12 + 16) = *((void *)a3 + 2);
      *(_OWORD *)uint64_t v12 = v13;
      *((void *)a3 + 1) = 0;
      *((void *)a3 + 2) = 0;
      *(void *)a3 = 0;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0;
      *(void *)(v12 + 40) = 0;
      *(_OWORD *)(v12 + 24) = *(long long *)((char *)a3 + 24);
      *(void *)(v12 + 40) = *((void *)a3 + 5);
      *((void *)a3 + 4) = 0;
      *((void *)a3 + 5) = 0;
      *((void *)a3 + 3) = 0;
      *(void *)(v12 + 48) = *((void *)a3 + 6);
      *(void *)(v12 + 56) = 0;
      *(void *)(v12 + 64) = 0;
      *(void *)(v12 + 72) = 0;
      *(_OWORD *)(v12 + 56) = *(long long *)((char *)a3 + 56);
      *(void *)(v12 + 72) = *((void *)a3 + 9);
      *((void *)a3 + 7) = 0;
      *((void *)a3 + 8) = 0;
      *((void *)a3 + 9) = 0;
      *(unsigned char *)(v12 + 80) = *((unsigned char *)a3 + 80);
      v12 += 88;
      a3 = (long long *)((char *)a3 + 88);
    }
    while (a3 != v11);
    unint64_t v6 = (long long *)a2[1];
  }
  a2[2] = v12;
  uint64_t v14 = *a1;
  *a1 = v6;
  a2[1] = v14;
  unint64_t v15 = a1[1];
  a1[1] = (long long *)a2[2];
  a2[2] = v15;
  uint64_t v16 = a1[2];
  a1[2] = (long long *)a2[3];
  a2[3] = v16;
  *a2 = a2[1];
  return result;
}

uint64_t sub_9A1CC4(uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  unint64_t v5 = (void **)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 24);
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(void **)(a1 + 24);
    if (v7 != v6)
    {
      do
      {
        v7 -= 80;
        sub_94B370(a1 + 40, v7);
      }
      while (v7 != v6);
      uint64_t v8 = *v5;
    }
    *(void *)(a1 + 32) = v6;
    operator delete(v8);
    *unint64_t v5 = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
  }
  *(_OWORD *)(a1 + 24) = *(long long *)((char *)a2 + 24);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  long long v10 = (void **)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  if (v9)
  {
    sub_99957C(a1 + 56, v9);
    operator delete(*v10);
    *long long v10 = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 72) = 0;
  }
  *(_OWORD *)(a1 + 56) = *(long long *)((char *)a2 + 56);
  *(void *)(a1 + 72) = *((void *)a2 + 9);
  *((void *)a2 + 7) = 0;
  *((void *)a2 + 8) = 0;
  *((void *)a2 + 9) = 0;
  return a1;
}

void sub_9A1DCC(int *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  uint64_t v4 = sub_1133328();
  *(void *)(a2 + 56) = 0;
  unint64_t v5 = (void **)(a2 + 56);
  *(void *)(a2 + 48) = v4;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  if (a1)
  {
    uint64_t v6 = *a1;
    uint64_t v7 = -v6;
    uint64_t v8 = (unsigned __int16 *)((char *)a1 - v6);
    if (*v8 < 7u || (uint64_t v9 = v8[3]) == 0)
    {
LABEL_26:
      uint64_t v24 = (unsigned __int16 *)((char *)a1 + v7);
      if (*v24 >= 5u && (uint64_t v25 = v24[2]) != 0)
      {
        int64x2_t v26 = (unsigned int *)((char *)a1 + v25 + *(unsigned int *)((char *)a1 + v25));
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v33 = 0;
        sub_9A3868((unint64_t *)__p, *v26);
        unsigned int v27 = *v26++;
        long long v36 = &v26[v27];
        uint64_t v37 = v26;
        sub_9A3B2C(&v37, &v36, (char **)__p, (char *)__p[1]);
        long long v28 = *(_OWORD *)__p;
        uint64_t v29 = v33;
        uint64_t v30 = *v5;
        if (!*v5) {
          goto LABEL_32;
        }
      }
      else
      {
        uint64_t v29 = 0;
        long long v28 = 0uLL;
        uint64_t v30 = *v5;
        if (!*v5)
        {
LABEL_32:
          *(_OWORD *)(a2 + 56) = v28;
          *(void *)(a2 + 72) = v29;
          return;
        }
      }
      long long v31 = v28;
      sub_99957C(a2 + 56, (uint64_t)v30);
      operator delete(*v5);
      long long v28 = v31;
      *unint64_t v5 = 0;
      *(void *)(a2 + 64) = 0;
      *(void *)(a2 + 72) = 0;
      goto LABEL_32;
    }
    long long v10 = (int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    uint64_t v11 = (unsigned __int16 *)((char *)v10 - *v10);
    if (*v11 >= 7u && (uint64_t v12 = v11[3]) != 0) {
      long long v13 = (int *)((char *)v10 + v12 + *(unsigned int *)((char *)v10 + v12));
    }
    else {
      long long v13 = 0;
    }
    sub_9A2124(v13, (uint64_t)__p);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    *(_OWORD *)a2 = *(_OWORD *)__p;
    *(void *)(a2 + 16) = v33;
    HIBYTE(v33) = 0;
    LOBYTE(__p[0]) = 0;
    uint64_t v14 = (void **)(a2 + 24);
    uint64_t v15 = *(void *)(a2 + 24);
    if (v15)
    {
      uint64_t v16 = *(void *)(a2 + 32);
      unint64_t v17 = *(void **)(a2 + 24);
      if (v16 != v15)
      {
        do
        {
          v16 -= 80;
          sub_94B370(a2 + 40, v16);
        }
        while (v16 != v15);
        unint64_t v17 = *v14;
      }
      *(void *)(a2 + 32) = v15;
      operator delete(v17);
      long long *v14 = 0;
      *(void *)(a2 + 32) = 0;
      *(void *)(a2 + 40) = 0;
      int v18 = SHIBYTE(v33);
      *(_OWORD *)(a2 + 24) = v34;
      *(void *)(a2 + 40) = v35;
      long long v34 = 0uLL;
      uint64_t v35 = 0;
      if ((v18 & 0x80000000) == 0)
      {
        long long v19 = (unsigned __int16 *)((char *)a1 - *a1);
        if (*v19 >= 7u) {
          goto LABEL_16;
        }
LABEL_21:
        uint64_t v20 = 0;
        long long v21 = (_WORD *)(&loc_1120530 + 1);
        if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u) {
          goto LABEL_24;
        }
        goto LABEL_22;
      }
      operator delete(__p[0]);
      long long v19 = (unsigned __int16 *)((char *)a1 - *a1);
      if (*v19 < 7u) {
        goto LABEL_21;
      }
    }
    else
    {
      *(_OWORD *)(a2 + 24) = v34;
      *(void *)(a2 + 40) = v35;
      uint64_t v35 = 0;
      long long v34 = 0uLL;
      long long v19 = (unsigned __int16 *)((char *)a1 - *a1);
      if (*v19 < 7u) {
        goto LABEL_21;
      }
    }
LABEL_16:
    uint64_t v20 = (int *)v19[3];
    if (v20) {
      uint64_t v20 = (int *)((char *)v20 + (void)a1 + *(unsigned int *)((char *)v20 + (void)a1));
    }
    long long v21 = (unsigned __int16 *)((char *)v20 - *v20);
    if (*v21 < 5u) {
      goto LABEL_24;
    }
LABEL_22:
    uint64_t v22 = v21[2];
    if (v22)
    {
      long long v23 = (char *)v20 + v22 + *(unsigned int *)((char *)v20 + v22);
LABEL_25:
      *(void *)(a2 + 48) = sub_2A56E0(v23);
      uint64_t v7 = -(uint64_t)*a1;
      goto LABEL_26;
    }
LABEL_24:
    long long v23 = 0;
    goto LABEL_25;
  }
}

void sub_9A20A0(_Unwind_Exception *a1)
{
  sub_998370(v1);
  _Unwind_Resume(a1);
}

void sub_9A20B4(_Unwind_Exception *a1)
{
  sub_998370(v1);
  _Unwind_Resume(a1);
}

void sub_9A20C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  if (__p)
  {
    sub_99957C((uint64_t)&__p, (uint64_t)__p);
    operator delete(__p);
  }
  sub_998370(v11);
  _Unwind_Resume(a1);
}

void sub_9A20F4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 24);
  if (v3) {
    sub_20AD25C(v1, v3);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

double sub_9A2124@<D0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  if (!a1) {
    return result;
  }
  unint64_t v5 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v5 < 5u || (uint64_t v6 = v5[2]) == 0)
  {
    HIBYTE(v22) = 0;
    LOBYTE(v21) = 0;
    goto LABEL_9;
  }
  uint64_t v7 = (unsigned int *)((char *)a1 + v6);
  uint64_t v8 = *v7;
  long long v10 = (char *)v7 + v8 + 4;
  size_t v9 = *(unsigned int *)((char *)v7 + v8);
  if (v9 >= 0x17)
  {
    uint64_t v19 = (v9 & 0xFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v19 = v9 | 7;
    }
    uint64_t v20 = v19 + 1;
    uint64_t v11 = (long long *)operator new(v19 + 1);
    *((void *)&v21 + 1) = v9;
    unint64_t v22 = v20 | 0x8000000000000000;
    *(void *)&long long v21 = v11;
LABEL_23:
    memcpy(v11, v10, v9);
    *((unsigned char *)v11 + v9) = 0;
    if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }
  HIBYTE(v22) = *(unsigned int *)((char *)v7 + v8);
  uint64_t v11 = &v21;
  if (v9) {
    goto LABEL_23;
  }
  *((unsigned char *)&v21 + v9) = 0;
  if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
    goto LABEL_9;
  }
LABEL_24:
  operator delete(*(void **)a2);
LABEL_9:
  *(_OWORD *)a2 = v21;
  *(void *)(a2 + 16) = v22;
  uint64_t v12 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v12 >= 7u && (uint64_t v13 = v12[3]) != 0) {
    uint64_t v14 = (char **)((char *)a1 + v13 + *(unsigned int *)((char *)a1 + v13));
  }
  else {
    uint64_t v14 = 0;
  }
  sub_9A22F0(v14, (uint64_t)&v21);
  uint64_t v15 = (void **)(a2 + 24);
  uint64_t v16 = *(void *)(a2 + 24);
  if (v16)
  {
    uint64_t v17 = *(void *)(a2 + 32);
    int v18 = *(void **)(a2 + 24);
    if (v17 != v16)
    {
      do
      {
        v17 -= 80;
        sub_94B370(a2 + 40, v17);
      }
      while (v17 != v16);
      int v18 = *v15;
    }
    *(void *)(a2 + 32) = v16;
    operator delete(v18);
    *uint64_t v15 = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
  }
  double result = *(double *)&v21;
  *(_OWORD *)(a2 + 24) = v21;
  *(void *)(a2 + 40) = v22;
  return result;
}

void sub_9A22C8(_Unwind_Exception *a1)
{
  sub_9A0088(v1);
  _Unwind_Resume(a1);
}

void sub_9A22DC(_Unwind_Exception *a1)
{
  sub_9A0088(v1);
  _Unwind_Resume(a1);
}

char **sub_9A22F0@<X0>(char **result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v7 = 0;
  long long v6 = 0u;
  if (result)
  {
    uint64_t v3 = result;
    sub_9A23A4((char **)&v6, *(unsigned int *)result);
    unsigned int v4 = *(_DWORD *)v3;
    size_t v9 = (unsigned int *)v3 + 1;
    uint64_t v8 = (unsigned int *)v3 + v4 + 1;
    double result = sub_9A256C(&v9, &v8, (char **)&v6, *((uint64_t *)&v6 + 1));
    uint64_t v5 = v7;
    *(_OWORD *)a2 = v6;
    *(void *)(a2 + 16) = v5;
  }
  else
  {
    *(_OWORD *)a2 = 0uLL;
    *(void *)(a2 + 16) = 0;
  }
  return result;
}

void sub_9A2388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    sub_20AD2BC((uint64_t)&a9, a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_9A23A4(char **a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)(a1 + 2);
  uint64_t v3 = *a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= a2) {
    return;
  }
  if (a2 >= 0x333333333333334) {
    sub_2E00();
  }
  uint64_t v5 = a1[1];
  uint64_t v6 = 80 * a2;
  uint64_t v7 = (char *)operator new(80 * a2);
  uint64_t v8 = &v7[v6];
  size_t v9 = &v7[v5 - v3];
  if (v5 == v3)
  {
    *a1 = v9;
    a1[1] = v9;
    a1[2] = v8;
    if (!v3) {
      return;
    }
    goto LABEL_10;
  }
  uint64_t v10 = 0;
  do
  {
    uint64_t v11 = &v9[v10];
    uint64_t v12 = &v5[v10];
    long long v13 = *(_OWORD *)&v5[v10 - 80];
    *((void *)v11 - 8) = *(void *)&v5[v10 - 64];
    *((_OWORD *)v11 - 5) = v13;
    *((void *)v12 - 9) = 0;
    *((void *)v12 - 8) = 0;
    *((void *)v12 - 10) = 0;
    *(v11 - 56) = v5[v10 - 56];
    long long v14 = *(_OWORD *)&v5[v10 - 48];
    *((void *)v11 - 4) = *(void *)&v5[v10 - 32];
    *((_OWORD *)v11 - 3) = v14;
    *((void *)v12 - 5) = 0;
    *((void *)v12 - 4) = 0;
    *((void *)v12 - 6) = 0;
    *(_OWORD *)(v11 - 24) = *(_OWORD *)&v5[v10 - 24];
    *((void *)v11 - 1) = *(void *)&v5[v10 - 8];
    *((void *)v12 - 3) = 0;
    *((void *)v12 - 2) = 0;
    *((void *)v12 - 1) = 0;
    v10 -= 80;
  }
  while (&v5[v10] != v3);
  uint64_t v15 = *a1;
  uint64_t v3 = a1[1];
  *a1 = &v9[v10];
  a1[1] = v9;
  a1[2] = v8;
  if (v3 != v15)
  {
    do
    {
      v3 -= 80;
      sub_94B370(v2, (uint64_t)v3);
    }
    while (v3 != v15);
    uint64_t v3 = v15;
  }
  if (v3)
  {
LABEL_10:
    operator delete(v3);
  }
}

uint64_t sub_9A2514(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 16) = i - 80;
    sub_94B370(v4, i - 80);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char **sub_9A256C(unsigned int **a1, unsigned int **a2, char **a3, uint64_t a4)
{
  uint64_t v6 = *a1;
  if (*a1 != *a2)
  {
    while (1)
    {
      sub_9A26B8((int *)((char *)v6 + *v6), (uint64_t)v14);
      size_t v9 = sub_9A3100(a3, a4, (uint64_t)v14);
      uint64_t v10 = (void **)__p;
      if (!__p) {
        goto LABEL_15;
      }
      uint64_t v11 = v19;
      uint64_t v12 = __p;
      if (v19 != __p) {
        break;
      }
LABEL_14:
      uint64_t v19 = v10;
      operator delete(v12);
LABEL_15:
      if (v17 < 0)
      {
        operator delete(v16);
        if (v15 < 0) {
LABEL_19:
        }
          operator delete(v14[0]);
      }
      else if (v15 < 0)
      {
        goto LABEL_19;
      }
      a4 = (uint64_t)(v9 + 80);
      uint64_t v6 = *a1 + 1;
      *a1 = v6;
      if (v6 == *a2) {
        return a3;
      }
    }
    while (1)
    {
      if (*((char *)v11 - 1) < 0)
      {
        operator delete(*(v11 - 3));
        if (*((char *)v11 - 25) < 0) {
LABEL_12:
        }
          operator delete(*(v11 - 6));
      }
      else if (*((char *)v11 - 25) < 0)
      {
        goto LABEL_12;
      }
      v11 -= 6;
      if (v11 == v10)
      {
        uint64_t v12 = __p;
        goto LABEL_14;
      }
    }
  }
  return a3;
}

void sub_9A26A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_9A0C80((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_9A26B8@<D0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  if (*(unsigned __int16 *)((char *)a1 - v4) >= 5u)
  {
    uint64_t v5 = *(unsigned __int16 *)((char *)a1 - v4 + 4);
    if (*(_WORD *)((char *)a1 - v4 + 4))
    {
      uint64_t v6 = (char *)a1 + v5;
      uint64_t v7 = *(unsigned int *)((char *)a1 + v5);
      size_t v9 = &v6[v7 + 4];
      size_t v8 = *(unsigned int *)&v6[v7];
      if (v8 >= 0x17)
      {
        if ((v8 | 7) == 0x17) {
          uint64_t v14 = (v8 & 0xFFFFFFF8) + 8;
        }
        else {
          uint64_t v14 = v8 | 7;
        }
        p_dst = (long long *)operator new(v14 + 1);
        *((void *)&__dst + 1) = v8;
        uint64_t v33 = v14 - 0x7FFFFFFFFFFFFFFFLL;
        *(void *)&long long __dst = p_dst;
      }
      else
      {
        HIBYTE(v33) = *(_DWORD *)&v6[v7];
        p_dst = &__dst;
        if (!v8)
        {
LABEL_14:
          *((unsigned char *)p_dst + v8) = 0;
          uint64_t v11 = (unsigned __int16 *)((char *)a1 - *a1);
          unsigned int v12 = *v11;
          if (v12 < 7) {
            goto LABEL_15;
          }
          goto LABEL_7;
        }
      }
      memcpy(p_dst, v9, v8);
      goto LABEL_14;
    }
  }
  HIBYTE(v33) = 0;
  LOBYTE(__dst) = 0;
  uint64_t v11 = (unsigned __int16 *)((char *)a1 - v4);
  unsigned int v12 = *v11;
  if (v12 < 7)
  {
LABEL_15:
    LOBYTE(v13) = 0;
    goto LABEL_16;
  }
LABEL_7:
  uint64_t v13 = v11[3];
  if (v11[3]) {
    LOBYTE(v13) = *((unsigned char *)a1 + v13);
  }
LABEL_16:
  *(_OWORD *)a2 = __dst;
  *(void *)(a2 + 16) = v33;
  *(unsigned char *)(a2 + 24) = v13;
  *(_OWORD *)(a2 + 32) = 0u;
  char v15 = (void **)(a2 + 32);
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  if (v12 < 9 || (uint64_t v16 = v11[4]) == 0)
  {
    HIBYTE(v31) = 0;
    LOBYTE(v30) = 0;
    goto LABEL_23;
  }
  char v17 = (unsigned int *)((char *)a1 + v16);
  uint64_t v18 = *v17;
  uint64_t v20 = (char *)v17 + v18 + 4;
  size_t v19 = *(unsigned int *)((char *)v17 + v18);
  if (v19 >= 0x17)
  {
    uint64_t v28 = (v19 & 0xFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17) {
      uint64_t v28 = v19 | 7;
    }
    uint64_t v29 = v28 + 1;
    long long v21 = (long long *)operator new(v28 + 1);
    *((void *)&v30 + 1) = v19;
    unint64_t v31 = v29 | 0x8000000000000000;
    *(void *)&long long v30 = v21;
  }
  else
  {
    HIBYTE(v31) = *(unsigned int *)((char *)v17 + v18);
    long long v21 = &v30;
    if (!v19)
    {
      *((unsigned char *)&v30 + v19) = 0;
      if (*(char *)(a2 + 55) < 0) {
        goto LABEL_41;
      }
      goto LABEL_23;
    }
  }
  memcpy(v21, v20, v19);
  *((unsigned char *)v21 + v19) = 0;
  if (*(char *)(a2 + 55) < 0) {
LABEL_41:
  }
    operator delete(*v15);
LABEL_23:
  *(_OWORD *)char v15 = v30;
  *(void *)(a2 + 48) = v31;
  unint64_t v22 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v22 >= 0xBu && (uint64_t v23 = v22[5]) != 0) {
    uint64_t v24 = (long long **)((char *)a1 + v23 + *(unsigned int *)((char *)a1 + v23));
  }
  else {
    uint64_t v24 = 0;
  }
  sub_9A2974(v24, (uint64_t)&v30);
  uint64_t v25 = *(void ***)(a2 + 56);
  if (v25)
  {
    for (uint64_t i = *(void ***)(a2 + 64); ; i -= 6)
    {
      if (i == v25)
      {
        operator delete(v25);
        *(void *)(a2 + 56) = 0;
        *(void *)(a2 + 64) = 0;
        *(void *)(a2 + 72) = 0;
        break;
      }
      if (*((char *)i - 1) < 0)
      {
        operator delete(*(i - 3));
        if ((*((char *)i - 25) & 0x80000000) == 0) {
          continue;
        }
      }
      else if ((*((char *)i - 25) & 0x80000000) == 0)
      {
        continue;
      }
      operator delete(*(i - 6));
    }
  }
  double result = *(double *)&v30;
  *(_OWORD *)(a2 + 56) = v30;
  *(void *)(a2 + 72) = v31;
  return result;
}

void sub_9A294C(_Unwind_Exception *a1)
{
  sub_9A0C80(v1);
  _Unwind_Resume(a1);
}

void sub_9A2960(_Unwind_Exception *a1)
{
  sub_9A0C80(v1);
  _Unwind_Resume(a1);
}

long long **sub_9A2974@<X0>(long long **result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6 = 0;
  long long v5 = 0u;
  if (result)
  {
    uint64_t v3 = (unsigned int *)result;
    sub_76C8C((uint64_t)&v5, *(unsigned int *)result);
    double result = sub_9A2A18(v3, (long long **)&v5, *((uint64_t *)&v5 + 1));
    uint64_t v4 = v6;
    *(_OWORD *)a2 = v5;
    *(void *)(a2 + 16) = v4;
  }
  else
  {
    *(_OWORD *)a2 = 0uLL;
    *(void *)(a2 + 16) = 0;
  }
  return result;
}

void sub_9A29FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    sub_20AD310((uint64_t)&a9, a9);
  }
  _Unwind_Resume(exception_object);
}

long long **sub_9A2A18(unsigned int *a1, long long **a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = *a1;
  if (v5)
  {
    for (uint64_t i = 4 * v5; i; i -= 4)
    {
      sub_9A2B0C((int *)((char *)v6 + *v6), (uint64_t)v10);
      size_t v8 = sub_9A2CC4(a2, a3, (uint64_t)v10);
      if (v13 < 0)
      {
        operator delete(__p);
        if (v11 < 0) {
LABEL_8:
        }
          operator delete(v10[0]);
      }
      else if (v11 < 0)
      {
        goto LABEL_8;
      }
      a3 = (uint64_t)(v8 + 3);
      ++v6;
    }
  }
  return a2;
}

void sub_9A2AD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

double sub_9A2B0C@<D0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  if (*(unsigned __int16 *)((char *)a1 - v4) >= 5u)
  {
    uint64_t v5 = *(unsigned __int16 *)((char *)a1 - v4 + 4);
    if (*(_WORD *)((char *)a1 - v4 + 4))
    {
      uint64_t v6 = (char *)a1 + v5;
      uint64_t v7 = *(unsigned int *)((char *)a1 + v5);
      size_t v9 = &v6[v7 + 4];
      size_t v8 = *(unsigned int *)&v6[v7];
      if (v8 >= 0x17)
      {
        if ((v8 | 7) == 0x17) {
          uint64_t v12 = (v8 & 0xFFFFFFF8) + 8;
        }
        else {
          uint64_t v12 = v8 | 7;
        }
        p_dst = (long long *)operator new(v12 + 1);
        *((void *)&__dst + 1) = v8;
        uint64_t v25 = v12 - 0x7FFFFFFFFFFFFFFFLL;
        *(void *)&long long __dst = p_dst;
      }
      else
      {
        HIBYTE(v25) = *(_DWORD *)&v6[v7];
        p_dst = &__dst;
        if (!v8)
        {
LABEL_13:
          *((unsigned char *)p_dst + v8) = 0;
          char v11 = (unsigned __int16 *)((char *)a1 - *a1);
          if (*v11 < 7u) {
            goto LABEL_18;
          }
          goto LABEL_14;
        }
      }
      memcpy(p_dst, v9, v8);
      goto LABEL_13;
    }
  }
  HIBYTE(v25) = 0;
  LOBYTE(__dst) = 0;
  char v11 = (unsigned __int16 *)((char *)a1 - v4);
  if (*v11 < 7u) {
    goto LABEL_18;
  }
LABEL_14:
  uint64_t v13 = v11[3];
  if (v13)
  {
    uint64_t v14 = (unsigned int *)((char *)a1 + v13);
    uint64_t v15 = *v14;
    char v17 = (char *)v14 + v15 + 4;
    size_t v16 = *(unsigned int *)((char *)v14 + v15);
    if (v16 >= 0x17)
    {
      uint64_t v19 = (v16 & 0xFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17) {
        uint64_t v19 = v16 | 7;
      }
      uint64_t v20 = v19 + 1;
      uint64_t v18 = (long long *)operator new(v19 + 1);
      *((void *)&v22 + 1) = v16;
      unint64_t v23 = v20 | 0x8000000000000000;
      *(void *)&long long v22 = v18;
    }
    else
    {
      HIBYTE(v23) = *(unsigned int *)((char *)v14 + v15);
      uint64_t v18 = &v22;
      if (!v16) {
        goto LABEL_23;
      }
    }
    memcpy(v18, v17, v16);
LABEL_23:
    *((unsigned char *)v18 + v16) = 0;
    goto LABEL_24;
  }
LABEL_18:
  HIBYTE(v23) = 0;
  LOBYTE(v22) = 0;
LABEL_24:
  *(_OWORD *)a2 = __dst;
  *(void *)(a2 + 16) = v25;
  double result = *(double *)&v22;
  *(_OWORD *)(a2 + 24) = v22;
  *(void *)(a2 + 40) = v23;
  return result;
}

void sub_9A2CA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

long long *sub_9A2CC4(long long **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  unint64_t v6 = (unint64_t)a1[1];
  uint64_t v7 = (a2 - (uint64_t)*a1) / 48;
  size_t v8 = &(*a1)[3 * v7];
  unint64_t v9 = (unint64_t)a1[2];
  if (v6 >= v9)
  {
    unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)v5) >> 4) + 1;
    if (v26 > 0x555555555555555) {
      sub_2E00();
    }
    unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)v5) >> 4);
    if (2 * v27 > v26) {
      unint64_t v26 = 2 * v27;
    }
    if (v27 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v28 = 0x555555555555555;
    }
    else {
      unint64_t v28 = v26;
    }
    uint64_t v54 = a1 + 2;
    if (v28)
    {
      if (v28 > 0x555555555555555) {
        sub_188D718();
      }
      uint64_t v29 = (long long *)operator new(48 * v28);
    }
    else
    {
      uint64_t v29 = 0;
    }
    long long v50 = v29;
    long long v51 = &v29[3 * v7];
    uint64_t v52 = v51;
    std::string v53 = &v29[3 * v28];
    sub_294A40(&v50, (long long *)a3);
    long long v36 = v51;
    uint64_t v37 = *a1;
    uint64_t v38 = v51;
    if (*a1 != v8)
    {
      uint64_t v39 = v51;
      long long v40 = v8;
      do
      {
        uint64_t v38 = v39 - 3;
        long long v41 = *(v40 - 3);
        *((void *)v39 - 4) = *((void *)v40 - 4);
        *(v39 - 3) = v41;
        *((void *)v40 - 5) = 0;
        *((void *)v40 - 4) = 0;
        *((void *)v40 - 6) = 0;
        long long v42 = *(long long *)((char *)v40 - 24);
        *((void *)v39 - 1) = *((void *)v40 - 1);
        *(long long *)((char *)v39 - 24) = v42;
        *((void *)v40 - 2) = 0;
        *((void *)v40 - 1) = 0;
        *((void *)v40 - 3) = 0;
        v39 -= 3;
        v40 -= 3;
      }
      while (v40 != v37);
    }
    long long v51 = v38;
    unint64_t v43 = a1[1];
    std::string::size_type v44 = v52;
    if (v43 != v8)
    {
      do
      {
        long long v45 = *v8;
        *((void *)v44 + 2) = *((void *)v8 + 2);
        long long *v44 = v45;
        *((void *)v8 + 1) = 0;
        *((void *)v8 + 2) = 0;
        *(void *)size_t v8 = 0;
        long long v46 = *(long long *)((char *)v8 + 24);
        *((void *)v44 + 5) = *((void *)v8 + 5);
        *(long long *)((char *)v44 + 24) = v46;
        *((void *)v8 + 4) = 0;
        *((void *)v8 + 5) = 0;
        *((void *)v8 + 3) = 0;
        v44 += 3;
        v8 += 3;
      }
      while (v8 != v43);
      uint64_t v38 = v51;
      size_t v8 = a1[1];
    }
    uint64_t v47 = *a1;
    *a1 = v38;
    a1[1] = v44;
    long long v48 = a1[2];
    a1[2] = v53;
    uint64_t v52 = v8;
    std::string v53 = v48;
    long long v50 = v47;
    long long v51 = v47;
    if (v8 == v47)
    {
      if (!v8) {
        return v36;
      }
      goto LABEL_36;
    }
    while (1)
    {
      uint64_t v52 = v8 - 3;
      if (*((char *)v8 - 1) < 0)
      {
        operator delete(*((void **)v8 - 3));
        if (*((char *)v8 - 25) < 0) {
LABEL_44:
        }
          operator delete(*((void **)v8 - 6));
      }
      else if (*((char *)v8 - 25) < 0)
      {
        goto LABEL_44;
      }
      size_t v8 = v52;
      if (v52 == v47)
      {
        size_t v8 = v50;
        if (!v50) {
          return v36;
        }
LABEL_36:
        operator delete(v8);
        return v36;
      }
    }
  }
  if (v8 == (long long *)v6)
  {
    long long v33 = *(_OWORD *)a3;
    *((void *)v8 + 2) = *(void *)(a3 + 16);
    long long *v8 = v33;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)a3 = 0;
    long long v34 = &v5[3 * v7];
    long long v35 = *(_OWORD *)(a3 + 24);
    *((void *)v34 + 5) = *(void *)(a3 + 40);
    *(long long *)((char *)v34 + 24) = v35;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    *(void *)(a3 + 24) = 0;
    a1[1] = v8 + 3;
  }
  else
  {
    uint64_t v10 = v8 + 3;
    unint64_t v11 = v6 - 48;
    uint64_t v12 = a1[1];
    if (v6 >= 0x30)
    {
      do
      {
        long long v13 = *(_OWORD *)v11;
        *((void *)v12 + 2) = *(void *)(v11 + 16);
        long long *v12 = v13;
        *(void *)(v11 + 8) = 0;
        *(void *)(v11 + 16) = 0;
        *(void *)unint64_t v11 = 0;
        long long v14 = *(_OWORD *)(v11 + 24);
        *((void *)v12 + 5) = *(void *)(v11 + 40);
        *(long long *)((char *)v12 + 24) = v14;
        *(void *)(v11 + 32) = 0;
        *(void *)(v11 + 40) = 0;
        *(void *)(v11 + 24) = 0;
        v12 += 3;
        v11 += 48;
      }
      while (v11 < v6);
    }
    a1[1] = v12;
    if ((long long *)v6 != v10)
    {
      unint64_t v15 = 0;
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)v10) >> 4);
      uint64_t v17 = -48 * v16;
      uint64_t v18 = &v5[3 * v7 + 3 * v16];
      do
      {
        unint64_t v21 = v6 + v15;
        long long v22 = (void **)(v6 + v15 - 48);
        if (*(char *)(v6 + v15 - 25) < 0) {
          operator delete(*v22);
        }
        unint64_t v23 = &v18[v15 / 0x10 - 3];
        long long v24 = *v23;
        *(void *)(v6 + v15 - 32) = *(void *)&v18[v15 / 0x10 - 2];
        *(_OWORD *)long long v22 = v24;
        *((unsigned char *)&v18[v15 / 0x10 - 1] - 9) = 0;
        *(unsigned char *)unint64_t v23 = 0;
        uint64_t v25 = (void **)(v21 - 24);
        if (*(char *)(v21 - 1) < 0) {
          operator delete(*v25);
        }
        uint64_t v19 = &v18[v15 / 0x10];
        long long v20 = *(long long *)((char *)&v18[v15 / 0x10 - 1] - 8);
        *(void *)(v21 - 8) = *((void *)&v18[v15 / 0x10 - 1] + 1);
        *(_OWORD *)uint64_t v25 = v20;
        *((unsigned char *)v19 - 1) = 0;
        *((unsigned char *)v19 - 24) = 0;
        v15 -= 48;
      }
      while (v17 != v15);
    }
    if (*((char *)v8 + 23) < 0) {
      operator delete(*(void **)v8);
    }
    long long v30 = *(_OWORD *)a3;
    *((void *)v8 + 2) = *(void *)(a3 + 16);
    long long *v8 = v30;
    *(unsigned char *)(a3 + 23) = 0;
    *(unsigned char *)a3 = 0;
    unint64_t v31 = (void **)&v5[3 * v7 + 1] + 1;
    if (*((char *)v8 + 47) < 0) {
      operator delete(*v31);
    }
    long long v32 = *(_OWORD *)(a3 + 24);
    *((void *)&v5[3 * v7 + 2] + 1) = *(void *)(a3 + 40);
    *(_OWORD *)unint64_t v31 = v32;
    *(unsigned char *)(a3 + 47) = 0;
    *(unsigned char *)(a3 + 24) = 0;
  }
  return v8;
}

void sub_9A30EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_75890((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_9A3100(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  unint64_t v6 = (unint64_t)a1[1];
  uint64_t v7 = (a2 - (uint64_t)*a1) / 80;
  size_t v8 = &(*a1)[80 * v7];
  unint64_t v9 = (unint64_t)a1[2];
  if (v6 >= v9)
  {
    unint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - (void)v5) >> 4) + 1;
    if (v16 > 0x333333333333333) {
      sub_2E00();
    }
    unint64_t v17 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v9 - (void)v5) >> 4);
    if (2 * v17 > v16) {
      unint64_t v16 = 2 * v17;
    }
    if (v17 >= 0x199999999999999) {
      unint64_t v18 = 0x333333333333333;
    }
    else {
      unint64_t v18 = v16;
    }
    std::string::size_type v44 = a1 + 2;
    if (v18)
    {
      if (v18 > 0x333333333333333) {
        sub_188D718();
      }
      uint64_t v19 = (char *)operator new(80 * v18);
    }
    else
    {
      uint64_t v19 = 0;
    }
    long long v40 = v19;
    long long v41 = &v19[80 * v7];
    long long v42 = v41;
    unint64_t v43 = &v19[80 * v18];
    sub_9A3614((uint64_t)&v40, (long long *)a3);
    unint64_t v23 = v41;
    long long v24 = *a1;
    uint64_t v25 = v41;
    if (*a1 != v8)
    {
      uint64_t v26 = 0;
      do
      {
        unint64_t v27 = &v23[v26];
        unint64_t v28 = &v8[v26];
        long long v29 = *(_OWORD *)&v8[v26 - 80];
        *((void *)v27 - 8) = *(void *)&v8[v26 - 64];
        *((_OWORD *)v27 - 5) = v29;
        *((void *)v28 - 9) = 0;
        *((void *)v28 - 8) = 0;
        *((void *)v28 - 10) = 0;
        *(v27 - 56) = v8[v26 - 56];
        long long v30 = *(_OWORD *)&v8[v26 - 48];
        *((void *)v27 - 4) = *(void *)&v8[v26 - 32];
        *((_OWORD *)v27 - 3) = v30;
        *((void *)v28 - 5) = 0;
        *((void *)v28 - 4) = 0;
        *((void *)v28 - 6) = 0;
        *((void *)v27 - 3) = 0;
        *((void *)v27 - 2) = 0;
        *((void *)v27 - 1) = 0;
        *(_OWORD *)(v27 - 24) = *(_OWORD *)&v8[v26 - 24];
        *((void *)v27 - 1) = *(void *)&v8[v26 - 8];
        *((void *)v28 - 3) = 0;
        *((void *)v28 - 2) = 0;
        *((void *)v28 - 1) = 0;
        v26 -= 80;
      }
      while (&v8[v26] != v24);
      uint64_t v25 = &v23[v26];
    }
    long long v41 = v25;
    unint64_t v31 = a1[1];
    long long v32 = v42;
    if (v31 != v8)
    {
      do
      {
        long long v33 = *(_OWORD *)v8;
        *((void *)v32 + 2) = *((void *)v8 + 2);
        *(_OWORD *)long long v32 = v33;
        *((void *)v8 + 1) = 0;
        *((void *)v8 + 2) = 0;
        *(void *)size_t v8 = 0;
        v32[24] = v8[24];
        long long v34 = *((_OWORD *)v8 + 2);
        *((void *)v32 + 6) = *((void *)v8 + 6);
        *((_OWORD *)v32 + 2) = v34;
        *((void *)v8 + 5) = 0;
        *((void *)v8 + 6) = 0;
        *((void *)v8 + 4) = 0;
        *((void *)v32 + 7) = 0;
        *((void *)v32 + 8) = 0;
        *((void *)v32 + 9) = 0;
        *(_OWORD *)(v32 + 56) = *(_OWORD *)(v8 + 56);
        *((void *)v32 + 9) = *((void *)v8 + 9);
        *((void *)v8 + 7) = 0;
        *((void *)v8 + 8) = 0;
        *((void *)v8 + 9) = 0;
        v32 += 80;
        v8 += 80;
      }
      while (v8 != v31);
      uint64_t v25 = v41;
      size_t v8 = a1[1];
    }
    long long v35 = *a1;
    *a1 = v25;
    a1[1] = v32;
    long long v36 = a1[2];
    a1[2] = v43;
    long long v42 = v8;
    unint64_t v43 = v36;
    long long v40 = v35;
    long long v41 = v35;
    if (v8 != v35)
    {
      do
      {
        long long v42 = v8 - 80;
        sub_94B370((uint64_t)v44, (uint64_t)(v8 - 80));
        size_t v8 = v42;
      }
      while (v42 != v35);
      size_t v8 = v40;
    }
    if (v8) {
      operator delete(v8);
    }
    return v23;
  }
  else
  {
    if (v8 != (char *)v6)
    {
      uint64_t v10 = v8 + 80;
      uint64_t v11 = v6 - 80;
      if (v6 < 0x50)
      {
        a1[1] = (char *)v6;
        if ((void *)v6 == v10)
        {
LABEL_35:
          sub_9A34F4((uint64_t)v8, (long long *)a3);
          return v8;
        }
      }
      else
      {
        unint64_t v12 = v6 - 80;
        long long v13 = a1[1];
        do
        {
          long long v14 = *(_OWORD *)v12;
          *((void *)v13 + 2) = *(void *)(v12 + 16);
          *(_OWORD *)long long v13 = v14;
          *(void *)(v12 + 8) = 0;
          *(void *)(v12 + 16) = 0;
          *(void *)unint64_t v12 = 0;
          v13[24] = *(unsigned char *)(v12 + 24);
          long long v15 = *(_OWORD *)(v12 + 32);
          *((void *)v13 + 6) = *(void *)(v12 + 48);
          *((_OWORD *)v13 + 2) = v15;
          *(void *)(v12 + 40) = 0;
          *(void *)(v12 + 48) = 0;
          *(void *)(v12 + 32) = 0;
          *((void *)v13 + 7) = 0;
          *((void *)v13 + 8) = 0;
          *((void *)v13 + 9) = 0;
          *(_OWORD *)(v13 + 56) = *(_OWORD *)(v12 + 56);
          *((void *)v13 + 9) = *(void *)(v12 + 72);
          *(void *)(v12 + 56) = 0;
          *(void *)(v12 + 64) = 0;
          *(void *)(v12 + 72) = 0;
          v13 += 80;
          v12 += 80;
        }
        while (v12 < v6);
        a1[1] = v13;
        if ((void *)v6 == v10) {
          goto LABEL_35;
        }
      }
      uint64_t v37 = 16 * ((uint64_t)(v6 - (void)v10) >> 4);
      uint64_t v38 = (uint64_t)&v5[80 * v7 - 80];
      do
      {
        sub_9A34F4(v11, (long long *)(v38 + v37));
        v11 -= 80;
        v37 -= 80;
      }
      while (v37);
      goto LABEL_35;
    }
    long long v20 = *(_OWORD *)a3;
    *((void *)v8 + 2) = *(void *)(a3 + 16);
    *(_OWORD *)size_t v8 = v20;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)a3 = 0;
    unint64_t v21 = &v5[80 * v7];
    v21[24] = *(unsigned char *)(a3 + 24);
    long long v22 = *(_OWORD *)(a3 + 32);
    *((void *)v21 + 6) = *(void *)(a3 + 48);
    *((_OWORD *)v21 + 2) = v22;
    *(void *)(a3 + 40) = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 32) = 0;
    *((void *)v21 + 7) = 0;
    *((void *)v21 + 8) = 0;
    *((void *)v21 + 9) = 0;
    *(_OWORD *)(v21 + 56) = *(_OWORD *)(a3 + 56);
    *((void *)v21 + 9) = *(void *)(a3 + 72);
    *(void *)(a3 + 56) = 0;
    *(void *)(a3 + 64) = 0;
    *(void *)(a3 + 72) = 0;
    a1[1] = v8 + 80;
  }
  return v8;
}

void sub_9A34E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_9A2514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_9A34F4(uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
  uint64_t v5 = (void **)(a1 + 32);
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*v5);
  }
  long long v6 = a2[2];
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  *(_OWORD *)uint64_t v5 = v6;
  *((unsigned char *)a2 + 55) = 0;
  *((unsigned char *)a2 + 32) = 0;
  uint64_t v7 = (void **)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 56);
  if (v8)
  {
    uint64_t v9 = *(void *)(a1 + 64);
    uint64_t v10 = *(void **)(a1 + 56);
    if (v9 == v8)
    {
LABEL_15:
      *(void *)(a1 + 64) = v8;
      operator delete(v10);
      *uint64_t v7 = 0;
      *(void *)(a1 + 64) = 0;
      *(void *)(a1 + 72) = 0;
      goto LABEL_16;
    }
    while (1)
    {
      if (*(char *)(v9 - 1) < 0)
      {
        operator delete(*(void **)(v9 - 24));
        if (*(char *)(v9 - 25) < 0) {
LABEL_13:
        }
          operator delete(*(void **)(v9 - 48));
      }
      else if (*(char *)(v9 - 25) < 0)
      {
        goto LABEL_13;
      }
      v9 -= 48;
      if (v9 == v8)
      {
        uint64_t v10 = *v7;
        goto LABEL_15;
      }
    }
  }
LABEL_16:
  *(_OWORD *)(a1 + 56) = *(long long *)((char *)a2 + 56);
  *(void *)(a1 + 72) = *((void *)a2 + 9);
  *((void *)a2 + 7) = 0;
  *((void *)a2 + 8) = 0;
  *((void *)a2 + 9) = 0;
  return a1;
}

__n128 sub_9A3614(uint64_t a1, long long *a2)
{
  long long v4 = *(_OWORD **)(a1 + 16);
  if (v4 != *(_OWORD **)(a1 + 24)) {
    goto LABEL_22;
  }
  long long v6 = *(unsigned char **)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  if (v5 <= *(void *)a1)
  {
    unint64_t v12 = 0x999999999999999ALL * (((char *)v4 - v6) >> 4);
    if (v4 == (_OWORD *)v6) {
      unint64_t v12 = 1;
    }
    if (v12 >= 0x333333333333334) {
      sub_188D718();
    }
    uint64_t v13 = *(void *)(a1 + 32);
    unint64_t v14 = v12 >> 2;
    uint64_t v15 = 80 * v12;
    unint64_t v16 = (char *)operator new(80 * v12);
    unint64_t v17 = &v16[80 * v14];
    unint64_t v18 = &v16[v15];
    if (v4 == (_OWORD *)v5)
    {
      *(void *)a1 = v16;
      *(void *)(a1 + 8) = v17;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = v18;
      if (!v6) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v19 = (char *)v4 + (void)v17 - v5;
      uint64_t v20 = 80 * v14;
      do
      {
        unint64_t v21 = &v16[v20];
        long long v22 = *(_OWORD *)v5;
        *((void *)v21 + 2) = *(void *)(v5 + 16);
        *(_OWORD *)unint64_t v21 = v22;
        *(void *)(v5 + 8) = 0;
        *(void *)(v5 + 16) = 0;
        *(void *)unint64_t v5 = 0;
        v21[24] = *(unsigned char *)(v5 + 24);
        long long v23 = *(_OWORD *)(v5 + 32);
        *((void *)v21 + 6) = *(void *)(v5 + 48);
        *((_OWORD *)v21 + 2) = v23;
        *(void *)(v5 + 40) = 0;
        *(void *)(v5 + 48) = 0;
        *(void *)(v5 + 32) = 0;
        *(_OWORD *)(v21 + 56) = *(_OWORD *)(v5 + 56);
        *((void *)v21 + 9) = *(void *)(v5 + 72);
        *(void *)(v5 + 56) = 0;
        *(void *)(v5 + 64) = 0;
        *(void *)(v5 + 72) = 0;
        v20 += 80;
        v5 += 80;
      }
      while (v21 + 80 != v19);
      long long v6 = *(unsigned char **)a1;
      uint64_t v24 = *(void *)(a1 + 8);
      uint64_t v25 = *(void *)(a1 + 16);
      *(void *)a1 = v16;
      *(void *)(a1 + 8) = v17;
      *(void *)(a1 + 16) = v19;
      *(void *)(a1 + 24) = v18;
      while (v25 != v24)
      {
        v25 -= 80;
        sub_94B370(v13, v25);
      }
      if (!v6) {
        goto LABEL_19;
      }
    }
    operator delete(v6);
LABEL_19:
    long long v4 = *(_OWORD **)(a1 + 16);
    goto LABEL_22;
  }
  int64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *(void *)a1) >> 4);
  if (v7 >= -1) {
    uint64_t v8 = v7 + 1;
  }
  else {
    uint64_t v8 = v7 + 2;
  }
  uint64_t v9 = v8 >> 1;
  uint64_t v10 = -v9;
  if ((_OWORD *)v5 == v4)
  {
    uint64_t v11 = (_OWORD *)(v5 - 80 * v9);
  }
  else
  {
    do
    {
      sub_9A34F4(v5 + 80 * v10, (long long *)v5);
      v5 += 80;
    }
    while ((_OWORD *)v5 != v4);
    long long v4 = *(_OWORD **)(a1 + 8);
    uint64_t v11 = (_OWORD *)(v5 + 80 * v10);
  }
  *(void *)(a1 + 8) = &v4[5 * v10];
  *(void *)(a1 + 16) = v11;
  long long v4 = v11;
LABEL_22:
  long long v26 = *a2;
  *((void *)v4 + 2) = *((void *)a2 + 2);
  *long long v4 = v26;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *((unsigned char *)v4 + 24) = *((unsigned char *)a2 + 24);
  long long v27 = a2[2];
  *((void *)v4 + 6) = *((void *)a2 + 6);
  v4[2] = v27;
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 6) = 0;
  *((void *)a2 + 4) = 0;
  *((void *)v4 + 7) = 0;
  *((void *)v4 + 8) = 0;
  *((void *)v4 + 9) = 0;
  __n128 result = *(__n128 *)((char *)a2 + 56);
  *(__n128 *)((char *)v4 + 56) = result;
  *((void *)v4 + 9) = *((void *)a2 + 9);
  *((void *)a2 + 7) = 0;
  *((void *)a2 + 8) = 0;
  *((void *)a2 + 9) = 0;
  *(void *)(a1 + 16) += 80;
  return result;
}

void sub_9A3868(unint64_t *a1, unint64_t a2)
{
  unint64_t v2 = a1[2];
  unint64_t v3 = *a1;
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v2 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x492492492492493) {
      sub_2E00();
    }
    unint64_t v5 = a1[1];
    unint64_t v18 = a1 + 2;
    uint64_t v6 = 56 * a2;
    int64_t v7 = (char *)operator new(56 * a2);
    uint64_t v8 = &v7[v5 - v3];
    if (v5 == v3)
    {
      int64x2_t v13 = vdupq_n_s64(v3);
      unint64_t v14 = &v7[v5 - v3];
    }
    else
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t v10 = &v8[v9];
        uint64_t v11 = v5 + v9;
        *((void *)v10 - 7) = *(void *)(v5 + v9 - 56);
        long long v12 = *(_OWORD *)(v5 + v9 - 48);
        *((void *)v10 - 4) = *(void *)(v5 + v9 - 32);
        *((_OWORD *)v10 - 3) = v12;
        *(void *)(v11 - 40) = 0;
        *(void *)(v11 - 32) = 0;
        *(void *)(v11 - 48) = 0;
        *(_OWORD *)(v10 - 24) = *(_OWORD *)(v5 + v9 - 24);
        *((void *)v10 - 1) = *(void *)(v5 + v9 - 8);
        *(void *)(v11 - 24) = 0;
        *(void *)(v11 - 16) = 0;
        *(void *)(v11 - 8) = 0;
        v9 -= 56;
      }
      while (v5 + v9 != v3);
      int64x2_t v13 = *(int64x2_t *)a1;
      unint64_t v2 = a1[2];
      unint64_t v14 = &v8[v9];
    }
    *a1 = (unint64_t)v14;
    a1[1] = (unint64_t)v8;
    int64x2_t v16 = v13;
    a1[2] = (unint64_t)&v7[v6];
    unint64_t v17 = v2;
    long long __p = (void *)v13.i64[0];
    sub_9A39E8((uint64_t)&__p, v13.i64[0]);
    if (__p) {
      operator delete(__p);
    }
  }
}

uint64_t sub_9A39B0(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_9A39E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == a2) {
    return;
  }
  do
  {
    *(void *)(a1 + 16) = v2 - 56;
    unint64_t v5 = *(void ***)(v2 - 24);
    if (!v5) {
      goto LABEL_26;
    }
    uint64_t v6 = *(void ***)(v2 - 16);
    int64_t v7 = *(void **)(v2 - 24);
    if (v6 != v5)
    {
      while (1)
      {
        uint64_t v8 = (void **)*(v6 - 3);
        if (!v8) {
          goto LABEL_19;
        }
        uint64_t v9 = (void **)*(v6 - 2);
        uint64_t v10 = *(v6 - 3);
        if (v9 != v8) {
          break;
        }
LABEL_18:
        *(v6 - 2) = v8;
        operator delete(v10);
LABEL_19:
        if (*((char *)v6 - 25) < 0)
        {
          operator delete(*(v6 - 6));
          uint64_t v11 = v6 - 10;
          if (*((char *)v6 - 57) < 0) {
LABEL_23:
          }
            operator delete(*v11);
        }
        else
        {
          uint64_t v11 = v6 - 10;
          if (*((char *)v6 - 57) < 0) {
            goto LABEL_23;
          }
        }
        uint64_t v6 = v11;
        if (v11 == v5)
        {
          int64_t v7 = *(void **)(v2 - 24);
          goto LABEL_25;
        }
      }
      while (1)
      {
        if (*((char *)v9 - 1) < 0)
        {
          operator delete(*(v9 - 3));
          if (*((char *)v9 - 25) < 0) {
LABEL_16:
          }
            operator delete(*(v9 - 6));
        }
        else if (*((char *)v9 - 25) < 0)
        {
          goto LABEL_16;
        }
        v9 -= 6;
        if (v9 == v8)
        {
          uint64_t v10 = *(v6 - 3);
          goto LABEL_18;
        }
      }
    }
LABEL_25:
    *(void *)(v2 - 16) = v5;
    operator delete(v7);
LABEL_26:
    if (*(char *)(v2 - 25) < 0) {
      operator delete(*(void **)(v2 - 48));
    }
    uint64_t v2 = *(void *)(a1 + 16);
  }
  while (v2 != a2);
}

char **sub_9A3B2C(unsigned int **a1, unsigned int **a2, char **a3, char *a4)
{
  uint64_t v6 = *a1;
  if (*a1 == *a2) {
    return a3;
  }
  do
  {
    uint64_t v9 = (int *)((char *)v6 + *v6);
    uint64_t v10 = (unsigned __int16 *)((char *)v9 - *v9);
    if (*v10 >= 5u && (uint64_t v11 = v10[2]) != 0) {
      long long v12 = (char *)v9 + v11 + *(unsigned int *)((char *)v9 + v11);
    }
    else {
      long long v12 = 0;
    }
    uint64_t v13 = sub_2A56E0(v12);
    unint64_t v14 = (unsigned __int16 *)((char *)v9 - *v9);
    if (*v14 >= 7u && (uint64_t v15 = v14[3]) != 0) {
      int64x2_t v16 = (int *)((char *)v9 + v15 + *(unsigned int *)((char *)v9 + v15));
    }
    else {
      int64x2_t v16 = 0;
    }
    sub_9A2124(v16, (uint64_t)&v31);
    uint64_t v26 = v13;
    long long v27 = v31;
    uint64_t v28 = v32;
    *(_OWORD *)long long __p = v33;
    uint64_t v30 = v34;
    unint64_t v17 = sub_9A3D70(a3, a4, (uint64_t)&v26);
    unint64_t v18 = (void **)__p[0];
    if (__p[0])
    {
      uint64_t v19 = (void **)__p[1];
      uint64_t v20 = __p[0];
      if (__p[1] == __p[0]) {
        goto LABEL_31;
      }
      while (1)
      {
        long long v22 = (void **)*(v19 - 3);
        if (v22) {
          break;
        }
LABEL_27:
        if (*((char *)v19 - 25) < 0)
        {
          operator delete(*(v19 - 6));
          unint64_t v21 = v19 - 10;
          if ((*((char *)v19 - 57) & 0x80000000) == 0) {
            goto LABEL_16;
          }
LABEL_29:
          operator delete(*v21);
          uint64_t v19 = v21;
          if (v21 == v18)
          {
LABEL_30:
            uint64_t v20 = __p[0];
LABEL_31:
            __p[1] = v18;
            operator delete(v20);
            goto LABEL_32;
          }
        }
        else
        {
          unint64_t v21 = v19 - 10;
          if (*((char *)v19 - 57) < 0) {
            goto LABEL_29;
          }
LABEL_16:
          uint64_t v19 = v21;
          if (v21 == v18) {
            goto LABEL_30;
          }
        }
      }
      long long v23 = (void **)*(v19 - 2);
      uint64_t v24 = *(v19 - 3);
      if (v23 == v22)
      {
LABEL_26:
        *(v19 - 2) = v22;
        operator delete(v24);
        goto LABEL_27;
      }
      while (1)
      {
        if (*((char *)v23 - 1) < 0)
        {
          operator delete(*(v23 - 3));
          if ((*((char *)v23 - 25) & 0x80000000) == 0) {
            goto LABEL_21;
          }
LABEL_24:
          operator delete(*(v23 - 6));
          v23 -= 6;
          if (v23 == v22)
          {
LABEL_25:
            uint64_t v24 = *(v19 - 3);
            goto LABEL_26;
          }
        }
        else
        {
          if (*((char *)v23 - 25) < 0) {
            goto LABEL_24;
          }
LABEL_21:
          v23 -= 6;
          if (v23 == v22) {
            goto LABEL_25;
          }
        }
      }
    }
LABEL_32:
    if (SHIBYTE(v28) < 0) {
      operator delete((void *)v27);
    }
    a4 = v17 + 56;
    uint64_t v6 = *a1 + 1;
    *a1 = v6;
  }
  while (v6 != *a2);
  return a3;
}

void sub_9A3D5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_9A122C((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_9A3D70(char **a1, char *a2, uint64_t a3)
{
  long long v4 = a2;
  int64_t v7 = *a1;
  unint64_t v6 = (unint64_t)a1[1];
  uint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a2 - *a1) >> 3);
  unint64_t v9 = (unint64_t)a1[2];
  if (v6 >= v9)
  {
    unint64_t v24 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v6 - (void)v7) >> 3) + 1;
    if (v24 > 0x492492492492492) {
      sub_2E00();
    }
    unint64_t v25 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v9 - (void)v7) >> 3);
    if (2 * v25 > v24) {
      unint64_t v24 = 2 * v25;
    }
    if (v25 >= 0x249249249249249) {
      unint64_t v26 = 0x492492492492492;
    }
    else {
      unint64_t v26 = v24;
    }
    uint64_t v47 = a1 + 2;
    if (v26)
    {
      if (v26 > 0x492492492492492) {
        sub_188D718();
      }
      long long v27 = (char *)operator new(56 * v26);
    }
    else
    {
      long long v27 = 0;
    }
    long long __p = v27;
    std::string::size_type v44 = &v27[56 * v8];
    long long v45 = v44;
    long long v46 = &v27[56 * v26];
    sub_9A417C((uint64_t)&__p, a3);
    uint64_t v30 = v44;
    long long v31 = *a1;
    uint64_t v32 = v44;
    if (*a1 != v4)
    {
      uint64_t v33 = 0;
      do
      {
        uint64_t v34 = &v30[v33];
        long long v35 = &v4[v33];
        *((void *)v34 - 7) = *(void *)&v4[v33 - 56];
        long long v36 = *(_OWORD *)&v4[v33 - 48];
        *((void *)v34 - 4) = *(void *)&v4[v33 - 32];
        *((_OWORD *)v34 - 3) = v36;
        *((void *)v35 - 5) = 0;
        *((void *)v35 - 4) = 0;
        *((void *)v35 - 6) = 0;
        *((void *)v34 - 3) = 0;
        *((void *)v34 - 2) = 0;
        *((void *)v34 - 1) = 0;
        *(_OWORD *)(v34 - 24) = *(_OWORD *)&v4[v33 - 24];
        *((void *)v34 - 1) = *(void *)&v4[v33 - 8];
        *((void *)v35 - 3) = 0;
        *((void *)v35 - 2) = 0;
        *((void *)v35 - 1) = 0;
        v33 -= 56;
      }
      while (&v4[v33] != v31);
      uint64_t v32 = &v30[v33];
    }
    std::string::size_type v44 = v32;
    uint64_t v37 = a1[1];
    uint64_t v38 = v45;
    if (v37 != v4)
    {
      do
      {
        *(void *)uint64_t v38 = *(void *)v4;
        long long v39 = *(_OWORD *)(v4 + 8);
        *((void *)v38 + 3) = *((void *)v4 + 3);
        *(_OWORD *)(v38 + 8) = v39;
        *((void *)v4 + 2) = 0;
        *((void *)v4 + 3) = 0;
        *((void *)v4 + 1) = 0;
        *((void *)v38 + 4) = 0;
        *((void *)v38 + 5) = 0;
        *((void *)v38 + 6) = 0;
        *((_OWORD *)v38 + 2) = *((_OWORD *)v4 + 2);
        *((void *)v38 + 6) = *((void *)v4 + 6);
        *((void *)v4 + 4) = 0;
        *((void *)v4 + 5) = 0;
        *((void *)v4 + 6) = 0;
        v38 += 56;
        v4 += 56;
      }
      while (v4 != v37);
      uint64_t v32 = v44;
      long long v4 = a1[1];
    }
    long long v40 = *a1;
    *a1 = v32;
    a1[1] = v38;
    long long v41 = a1[2];
    a1[2] = v46;
    long long v45 = v4;
    long long v46 = v41;
    long long __p = v40;
    std::string::size_type v44 = v40;
    sub_9A39E8((uint64_t)&__p, (uint64_t)v40);
    if (__p) {
      operator delete(__p);
    }
    return v30;
  }
  else if (a2 == (char *)v6)
  {
    *(void *)a2 = *(void *)a3;
    uint64_t v28 = &v7[56 * v8];
    long long v29 = *(_OWORD *)(a3 + 8);
    *((void *)v28 + 3) = *(void *)(a3 + 24);
    *(_OWORD *)(v28 + 8) = v29;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 8) = 0;
    *((void *)v28 + 4) = 0;
    *((void *)v28 + 5) = 0;
    *((void *)v28 + 6) = 0;
    *((_OWORD *)v28 + 2) = *(_OWORD *)(a3 + 32);
    *((void *)v28 + 6) = *(void *)(a3 + 48);
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    *(void *)(a3 + 48) = 0;
    a1[1] = a2 + 56;
  }
  else
  {
    uint64_t v10 = a1[1];
    if (v6 >= 0x38)
    {
      unint64_t v11 = v6 - 56;
      uint64_t v10 = a1[1];
      do
      {
        *(void *)uint64_t v10 = *(void *)v11;
        long long v12 = *(_OWORD *)(v11 + 8);
        *((void *)v10 + 3) = *(void *)(v11 + 24);
        *(_OWORD *)(v10 + 8) = v12;
        *(void *)(v11 + 16) = 0;
        *(void *)(v11 + 24) = 0;
        *(void *)(v11 + 8) = 0;
        *((void *)v10 + 4) = 0;
        *((void *)v10 + 5) = 0;
        *((void *)v10 + 6) = 0;
        *((_OWORD *)v10 + 2) = *(_OWORD *)(v11 + 32);
        *((void *)v10 + 6) = *(void *)(v11 + 48);
        *(void *)(v11 + 32) = 0;
        *(void *)(v11 + 40) = 0;
        *(void *)(v11 + 48) = 0;
        v10 += 56;
        v11 += 56;
      }
      while (v11 < v6);
    }
    a1[1] = v10;
    sub_9A4380((uint64_t)&__p, (uint64_t)a2, v6 - 56, v6);
    *(void *)long long v4 = *(void *)a3;
    uint64_t v13 = (void **)&v7[56 * v8 + 8];
    if (v4[31] < 0) {
      operator delete(*v13);
    }
    long long v14 = *(_OWORD *)(a3 + 8);
    *(void *)&v7[56 * v8 + 24] = *(void *)(a3 + 24);
    *(_OWORD *)uint64_t v13 = v14;
    *(unsigned char *)(a3 + 31) = 0;
    *(unsigned char *)(a3 + 8) = 0;
    uint64_t v15 = &v7[56 * v8];
    unint64_t v18 = (void *)*((void *)v15 + 4);
    int64x2_t v16 = v15 + 32;
    unint64_t v17 = v18;
    if (v18)
    {
      uint64_t v19 = &v7[56 * v8];
      uint64_t v22 = *((void *)v19 + 5);
      unint64_t v21 = v19 + 40;
      uint64_t v20 = v22;
      long long v23 = v17;
      if ((void *)v22 != v17)
      {
        do
        {
          v20 -= 80;
          sub_94B370((uint64_t)&v7[56 * v8 + 48], v20);
        }
        while ((void *)v20 != v17);
        long long v23 = *(void **)v16;
      }
      *unint64_t v21 = v17;
      operator delete(v23);
      *(void *)int64x2_t v16 = 0;
      *((void *)v16 + 1) = 0;
      *((void *)v16 + 2) = 0;
    }
    *(_OWORD *)int64x2_t v16 = *(_OWORD *)(a3 + 32);
    *(void *)&v7[56 * v8 + 48] = *(void *)(a3 + 48);
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    *(void *)(a3 + 48) = 0;
  }
  return v4;
}

void sub_9A4168(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_9A39B0((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_9A417C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 == *(void *)(a1 + 24))
  {
    unint64_t v6 = *(void **)a1;
    unint64_t v5 = *(void *)(a1 + 8);
    if (v5 <= *(void *)a1)
    {
      unint64_t v11 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v4 - (void)v6) >> 3);
      if ((void *)v4 == v6) {
        unint64_t v11 = 1;
      }
      uint64_t v25 = *(void *)(a1 + 32);
      if (v11 >= 0x492492492492493) {
        sub_188D718();
      }
      unint64_t v12 = v11 >> 2;
      uint64_t v13 = 56 * v11;
      long long v14 = (char *)operator new(56 * v11);
      uint64_t v15 = &v14[56 * v12];
      if (v4 == v5)
      {
        int64x2_t v19 = vdupq_n_s64(v4);
        int64x2_t v16 = &v14[56 * v12];
      }
      else
      {
        int64x2_t v16 = &v15[v4 - v5];
        unint64_t v17 = &v14[56 * v12];
        do
        {
          *(void *)unint64_t v17 = *(void *)v5;
          long long v18 = *(_OWORD *)(v5 + 8);
          *((void *)v17 + 3) = *(void *)(v5 + 24);
          *(_OWORD *)(v17 + 8) = v18;
          *(void *)(v5 + 16) = 0;
          *(void *)(v5 + 24) = 0;
          *(void *)(v5 + 8) = 0;
          *((_OWORD *)v17 + 2) = *(_OWORD *)(v5 + 32);
          *((void *)v17 + 6) = *(void *)(v5 + 48);
          *(void *)(v5 + 32) = 0;
          *(void *)(v5 + 40) = 0;
          *(void *)(v5 + 48) = 0;
          v17 += 56;
          v5 += 56;
        }
        while (v17 != v16);
        unint64_t v6 = *(void **)a1;
        int64x2_t v19 = *(int64x2_t *)(a1 + 8);
        unint64_t v4 = *(void *)(a1 + 24);
      }
      long long __p = v6;
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v15;
      int64x2_t v23 = v19;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v14[v13];
      unint64_t v24 = v4;
      sub_9A39E8((uint64_t)&__p, v19.i64[0]);
      if (__p) {
        operator delete(__p);
      }
      unint64_t v4 = *(void *)(a1 + 16);
    }
    else
    {
      uint64_t v7 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5 - *(void *)a1) >> 3);
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = -56 * (v8 >> 1);
      sub_9A4530((uint64_t)&__p, *(void *)(a1 + 8), v4, v5 - 56 * (v8 >> 1));
      unint64_t v4 = v10;
      *(void *)(a1 + 8) += v9;
      *(void *)(a1 + 16) = v10;
    }
  }
  *(void *)unint64_t v4 = *(void *)a2;
  long long v20 = *(_OWORD *)(a2 + 8);
  *(void *)(v4 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(v4 + 8) = v20;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(v4 + 32) = 0;
  *(void *)(v4 + 40) = 0;
  *(void *)(v4 + 48) = 0;
  __n128 result = *(__n128 *)(a2 + 32);
  *(__n128 *)(v4 + 32) = result;
  *(void *)(v4 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a1 + 16) += 56;
  return result;
}

uint64_t sub_9A4380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (a3 != a2)
  {
    uint64_t v6 = a3;
    uint64_t v7 = a3;
    uint64_t v8 = a4;
    while (1)
    {
      uint64_t v10 = *(void *)(v7 - 56);
      v7 -= 56;
      *(void *)(v8 - 56) = v10;
      v8 -= 56;
      unint64_t v11 = (void **)(v8 + 8);
      if (*(char *)(v8 + 31) < 0) {
        operator delete(*v11);
      }
      long long v12 = *(_OWORD *)(v7 + 8);
      *(void *)(v8 + 24) = *(void *)(v7 + 24);
      *(_OWORD *)unint64_t v11 = v12;
      *(unsigned char *)(v6 - 25) = 0;
      *(unsigned char *)(v6 - 48) = 0;
      uint64_t v13 = (void **)(v4 - 24);
      long long v14 = *(void ***)(v4 - 24);
      if (!v14) {
        goto LABEL_5;
      }
      uint64_t v15 = *(void ***)(v4 - 16);
      uint64_t v9 = *(void **)(v4 - 24);
      if (v15 != v14) {
        break;
      }
LABEL_4:
      *(void *)(v4 - 16) = v14;
      operator delete(v9);
      char *v13 = 0;
      *(void *)(v4 - 16) = 0;
      *(void *)(v4 - 8) = 0;
LABEL_5:
      *(_OWORD *)(v4 - 24) = *(_OWORD *)(v6 - 24);
      *(void *)(v4 - 8) = *(void *)(v6 - 8);
      *(void *)(v6 - 24) = 0;
      *(void *)(v6 - 16) = 0;
      *(void *)(v6 - 8) = 0;
      uint64_t v4 = v8;
      uint64_t v6 = v7;
      if (v7 == a2) {
        return a3;
      }
    }
    while (1)
    {
      int64x2_t v16 = (void **)*(v15 - 3);
      if (!v16) {
        goto LABEL_23;
      }
      unint64_t v17 = (void **)*(v15 - 2);
      long long v18 = *(v15 - 3);
      if (v17 != v16) {
        break;
      }
LABEL_22:
      *(v15 - 2) = v16;
      operator delete(v18);
LABEL_23:
      if (*((char *)v15 - 25) < 0)
      {
        operator delete(*(v15 - 6));
        int64x2_t v19 = v15 - 10;
        if (*((char *)v15 - 57) < 0) {
LABEL_27:
        }
          operator delete(*v19);
      }
      else
      {
        int64x2_t v19 = v15 - 10;
        if (*((char *)v15 - 57) < 0) {
          goto LABEL_27;
        }
      }
      uint64_t v15 = v19;
      if (v19 == v14)
      {
        uint64_t v9 = *v13;
        goto LABEL_4;
      }
    }
    while (1)
    {
      if (*((char *)v17 - 1) < 0)
      {
        operator delete(*(v17 - 3));
        if (*((char *)v17 - 25) < 0) {
LABEL_20:
        }
          operator delete(*(v17 - 6));
      }
      else if (*((char *)v17 - 25) < 0)
      {
        goto LABEL_20;
      }
      v17 -= 6;
      if (v17 == v16)
      {
        long long v18 = *(v15 - 3);
        goto LABEL_22;
      }
    }
  }
  return a3;
}

uint64_t sub_9A4530(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    while (1)
    {
      *(void *)a4 = *(void *)v5;
      uint64_t v8 = (void **)(a4 + 8);
      if (*(char *)(a4 + 31) < 0) {
        operator delete(*v8);
      }
      long long v9 = *(_OWORD *)(v5 + 8);
      *(void *)(a4 + 24) = *(void *)(v5 + 24);
      *(_OWORD *)uint64_t v8 = v9;
      *(unsigned char *)(v5 + 31) = 0;
      *(unsigned char *)(v5 + 8) = 0;
      uint64_t v10 = (void **)(a4 + 32);
      unint64_t v11 = *(void ***)(a4 + 32);
      if (!v11) {
        goto LABEL_5;
      }
      long long v12 = *(void ***)(a4 + 40);
      uint64_t v7 = *(void **)(a4 + 32);
      if (v12 != v11) {
        break;
      }
LABEL_4:
      *(void *)(a4 + 40) = v11;
      operator delete(v7);
      *uint64_t v10 = 0;
      *(void *)(a4 + 40) = 0;
      *(void *)(a4 + 48) = 0;
LABEL_5:
      *(_OWORD *)(a4 + 32) = *(_OWORD *)(v5 + 32);
      *(void *)(a4 + 48) = *(void *)(v5 + 48);
      *(void *)(v5 + 32) = 0;
      *(void *)(v5 + 40) = 0;
      *(void *)(v5 + 48) = 0;
      v5 += 56;
      a4 += 56;
      if (v5 == a3) {
        return a3;
      }
    }
    while (1)
    {
      uint64_t v13 = (void **)*(v12 - 3);
      if (!v13) {
        goto LABEL_23;
      }
      long long v14 = (void **)*(v12 - 2);
      uint64_t v15 = *(v12 - 3);
      if (v14 != v13) {
        break;
      }
LABEL_22:
      *(v12 - 2) = v13;
      operator delete(v15);
LABEL_23:
      if (*((char *)v12 - 25) < 0)
      {
        operator delete(*(v12 - 6));
        int64x2_t v16 = v12 - 10;
        if (*((char *)v12 - 57) < 0) {
LABEL_27:
        }
          operator delete(*v16);
      }
      else
      {
        int64x2_t v16 = v12 - 10;
        if (*((char *)v12 - 57) < 0) {
          goto LABEL_27;
        }
      }
      long long v12 = v16;
      if (v16 == v11)
      {
        uint64_t v7 = *v10;
        goto LABEL_4;
      }
    }
    while (1)
    {
      if (*((char *)v14 - 1) < 0)
      {
        operator delete(*(v14 - 3));
        if (*((char *)v14 - 25) < 0) {
LABEL_20:
        }
          operator delete(*(v14 - 6));
      }
      else if (*((char *)v14 - 25) < 0)
      {
        goto LABEL_20;
      }
      v14 -= 6;
      if (v14 == v13)
      {
        uint64_t v15 = *(v12 - 3);
        goto LABEL_22;
      }
    }
  }
  return v5;
}

void sub_9A46C4(unsigned int *a1@<X0>, void ***a2@<X8>)
{
  long long v12 = 0;
  uint64_t v13 = 0;
  long long v14 = 0;
  if (a1)
  {
    sub_92AA0C((uint64_t)&v12, *a1);
    uint64_t v4 = v13;
    unsigned int v7 = *a1;
    uint64_t v6 = a1 + 1;
    uint64_t v5 = v7;
    if (v7)
    {
      uint64_t v8 = 4 * v5;
      do
      {
        sub_9A47D0((int *)((char *)v6 + *v6), (uint64_t)&__p);
        long long v9 = sub_9A4954(&v12, v4, &__p);
        if (v16 < 0) {
          operator delete((void *)__p.n128_u64[0]);
        }
        uint64_t v4 = (__n128 *)(v9 + 4);
        ++v6;
        v8 -= 4;
      }
      while (v8);
      uint64_t v4 = v13;
    }
    uint64_t v10 = v12;
    unint64_t v11 = v14;
  }
  else
  {
    unint64_t v11 = 0;
    uint64_t v4 = 0;
    uint64_t v10 = 0;
  }
  *a2 = v10;
  a2[1] = (void **)v4;
  a2[2] = v11;
}

void sub_9A4794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

double sub_9A47D0@<D0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  if (*(unsigned __int16 *)((char *)a1 - v4) < 5u
    || (uint64_t v5 = *(unsigned __int16 *)((char *)a1 - v4 + 4), !*(_WORD *)((char *)a1 - v4 + 4)))
  {
    HIBYTE(v18) = 0;
    LOBYTE(__dst) = 0;
    unint64_t v11 = (unsigned __int16 *)((char *)a1 - v4);
    if (*v11 < 7u) {
      goto LABEL_19;
    }
    goto LABEL_14;
  }
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = *(unsigned int *)((char *)a1 + v5);
  long long v9 = &v6[v7 + 4];
  size_t v8 = *(unsigned int *)&v6[v7];
  if (v8 >= 0x17)
  {
    if ((v8 | 7) == 0x17) {
      uint64_t v12 = (v8 & 0xFFFFFFF8) + 8;
    }
    else {
      uint64_t v12 = v8 | 7;
    }
    p_dst = (long long *)operator new(v12 + 1);
    *((void *)&__dst + 1) = v8;
    uint64_t v18 = v12 - 0x7FFFFFFFFFFFFFFFLL;
    *(void *)&long long __dst = p_dst;
    goto LABEL_12;
  }
  HIBYTE(v18) = *(_DWORD *)&v6[v7];
  p_dst = &__dst;
  if (v8) {
LABEL_12:
  }
    memcpy(p_dst, v9, v8);
  *((unsigned char *)p_dst + v8) = 0;
  unint64_t v11 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v11 < 7u) {
    goto LABEL_19;
  }
LABEL_14:
  uint64_t v13 = v11[3];
  if (!v13)
  {
LABEL_19:
    char v14 = 0;
    if (SHIBYTE(v18) < 0) {
      goto LABEL_16;
    }
LABEL_20:
    double result = *(double *)&__dst;
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v14;
    return result;
  }
  char v14 = *((unsigned char *)a1 + v13);
  if ((SHIBYTE(v18) & 0x80000000) == 0) {
    goto LABEL_20;
  }
LABEL_16:
  uint64_t v15 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v14;

  operator delete(v15);
  return result;
}

void sub_9A4940(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void **sub_9A4954(void ***a1, __n128 *a2, __n128 *a3)
{
  uint64_t v4 = (void **)a2;
  uint64_t v7 = *a1;
  unint64_t v6 = (unint64_t)a1[1];
  uint64_t v8 = ((char *)a2 - (char *)*a1) >> 5;
  unint64_t v9 = (unint64_t)a1[2];
  if (v6 >= v9)
  {
    unint64_t v15 = ((uint64_t)(v6 - (void)v7) >> 5) + 1;
    if (v15 >> 59) {
      sub_2E00();
    }
    uint64_t v16 = v9 - (void)v7;
    if (v16 >> 4 > v15) {
      unint64_t v15 = v16 >> 4;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v17 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v15;
    }
    long long v41 = a1 + 2;
    if (v17)
    {
      if (v17 >> 59) {
        sub_188D718();
      }
      uint64_t v18 = (void **)operator new(32 * v17);
    }
    else
    {
      uint64_t v18 = 0;
    }
    uint64_t v37 = v18;
    uint64_t v38 = &v18[4 * v8];
    long long v39 = v38;
    long long v40 = (char *)&v18[4 * v17];
    sub_92AE4C((uint64_t)&v37, a3);
    long long v20 = v38;
    unint64_t v21 = *a1;
    uint64_t v22 = v38;
    if (*a1 != v4)
    {
      int64x2_t v23 = v38;
      unint64_t v24 = v4;
      do
      {
        uint64_t v22 = v23 - 4;
        long long v25 = *((_OWORD *)v24 - 2);
        *(v23 - 2) = *(v24 - 2);
        *((_OWORD *)v23 - 2) = v25;
        *(v24 - 3) = 0;
        *(v24 - 2) = 0;
        *(v24 - 4) = 0;
        *((unsigned char *)v23 - 8) = *((unsigned char *)v24 - 8);
        v23 -= 4;
        v24 -= 4;
      }
      while (v24 != v21);
    }
    uint64_t v38 = v22;
    unint64_t v26 = a1[1];
    long long v27 = (__n128 *)v39;
    if (v26 != v4)
    {
      do
      {
        __n128 v28 = *(__n128 *)v4;
        v27[1].n128_u64[0] = (unint64_t)v4[2];
        *long long v27 = v28;
        v4[1] = 0;
        v4[2] = 0;
        *uint64_t v4 = 0;
        v27[1].n128_u8[8] = *((unsigned char *)v4 + 24);
        v27 += 2;
        v4 += 4;
      }
      while (v4 != v26);
      uint64_t v22 = v38;
      uint64_t v4 = a1[1];
    }
    long long v29 = *a1;
    *a1 = v22;
    a1[1] = (void **)v27;
    uint64_t v30 = (char *)a1[2];
    a1[2] = (void **)v40;
    long long v39 = v4;
    long long v40 = v30;
    uint64_t v37 = v29;
    uint64_t v38 = v29;
    if (v4 == v29)
    {
      if (!v4) {
        return v20;
      }
    }
    else
    {
      do
      {
        long long v31 = v4 - 4;
        long long v39 = v4 - 4;
        if (*((char *)v4 - 9) < 0)
        {
          operator delete(*v31);
          long long v31 = v39;
        }
        uint64_t v4 = v31;
      }
      while (v31 != v29);
      uint64_t v4 = v37;
      if (!v37) {
        return v20;
      }
    }
    operator delete(v4);
    return v20;
  }
  if (a2 == (__n128 *)v6)
  {
    __n128 v19 = *a3;
    a2[1].n128_u64[0] = a3[1].n128_u64[0];
    *a2 = v19;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    a3->n128_u64[0] = 0;
    LOBYTE(v7[4 * v8 + 3]) = a3[1].n128_u8[8];
    a1[1] = (void **)&a2[2];
    return v4;
  }
  uint64_t v10 = a2 + 2;
  unint64_t v11 = v6 - 32;
  if (v6 >= 0x20)
  {
    unint64_t v12 = v6 - 32;
    uint64_t v13 = a1[1];
    do
    {
      long long v14 = *(_OWORD *)v12;
      v13[2] = *(void **)(v12 + 16);
      *(_OWORD *)uint64_t v13 = v14;
      *(void *)(v12 + 8) = 0;
      *(void *)(v12 + 16) = 0;
      *(void *)unint64_t v12 = 0;
      *((unsigned char *)v13 + 24) = *(unsigned char *)(v12 + 24);
      v13 += 4;
      v12 += 32;
    }
    while (v12 < v6);
    a1[1] = v13;
    if ((__n128 *)v6 == v10) {
      goto LABEL_39;
    }
LABEL_35:
    uint64_t v32 = 4 * ((uint64_t)(v6 - (void)v10) >> 5);
    do
    {
      if (*(char *)(v11 + 23) < 0) {
        operator delete(*(void **)v11);
      }
      uint64_t v33 = &v4[v32 - 4];
      long long v34 = *(_OWORD *)v33;
      *(void *)(v11 + 16) = v4[v32 - 2];
      *(_OWORD *)unint64_t v11 = v34;
      *((unsigned char *)&v4[v32 - 1] - 1) = 0;
      *(unsigned char *)uint64_t v33 = 0;
      *(unsigned char *)(v11 + 24) = v4[v32 - 1];
      v11 -= 32;
      v32 -= 4;
    }
    while (v32 * 8);
    goto LABEL_39;
  }
  a1[1] = (void **)v6;
  if ((__n128 *)v6 != v10) {
    goto LABEL_35;
  }
LABEL_39:
  if (*((char *)v4 + 23) < 0) {
    operator delete(*v4);
  }
  __n128 v35 = *a3;
  v4[2] = (void *)a3[1].n128_u64[0];
  *(__n128 *)uint64_t v4 = v35;
  a3[1].n128_u8[7] = 0;
  a3->n128_u8[0] = 0;
  LOBYTE(v7[4 * v8 + 3]) = a3[1].n128_u8[8];
  return v4;
}

void sub_9A4C6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3D695C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_9A4C80(uint64_t a1, void **a2)
{
  uint64_t v4 = *(void ***)(a1 + 8);
  if (v4 == a2) {
    goto LABEL_2;
  }
  do
  {
    uint64_t v5 = (uint64_t)*(v4 - 4);
    if (v5)
    {
      sub_99957C((uint64_t)(v4 - 4), v5);
      operator delete(*(v4 - 4));
    }
    unint64_t v6 = (void **)*(v4 - 8);
    if (v6)
    {
      uint64_t v7 = (void **)*(v4 - 7);
      uint64_t v8 = *(v4 - 8);
      if (v7 == v6) {
        goto LABEL_27;
      }
      while (1)
      {
        unint64_t v9 = (void **)*(v7 - 3);
        if (!v9) {
          goto LABEL_21;
        }
        uint64_t v10 = (void **)*(v7 - 2);
        unint64_t v11 = *(v7 - 3);
        if (v10 != v9) {
          break;
        }
LABEL_20:
        *(v7 - 2) = v9;
        operator delete(v11);
LABEL_21:
        if (*((char *)v7 - 25) < 0)
        {
          operator delete(*(v7 - 6));
          unint64_t v12 = v7 - 10;
          if (*((char *)v7 - 57) < 0) {
LABEL_25:
          }
            operator delete(*v12);
        }
        else
        {
          unint64_t v12 = v7 - 10;
          if (*((char *)v7 - 57) < 0) {
            goto LABEL_25;
          }
        }
        uint64_t v7 = v12;
        if (v12 == v6)
        {
          uint64_t v8 = *(v4 - 8);
LABEL_27:
          *(v4 - 7) = v6;
          operator delete(v8);
          goto LABEL_28;
        }
      }
      while (1)
      {
        if (*((char *)v10 - 1) < 0)
        {
          operator delete(*(v10 - 3));
          if (*((char *)v10 - 25) < 0) {
LABEL_18:
          }
            operator delete(*(v10 - 6));
        }
        else if (*((char *)v10 - 25) < 0)
        {
          goto LABEL_18;
        }
        v10 -= 6;
        if (v10 == v9)
        {
          unint64_t v11 = *(v7 - 3);
          goto LABEL_20;
        }
      }
    }
LABEL_28:
    uint64_t v13 = v4 - 11;
    if (*((char *)v4 - 65) < 0) {
      operator delete(*v13);
    }
    v4 -= 11;
  }
  while (v13 != a2);
LABEL_2:
  *(void *)(a1 + 8) = a2;
}

char *sub_9A4DDC(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x666666666666666) {
    sub_2E00();
  }
  if (0x999999999999999ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x999999999999999ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x333333333333333) {
    unint64_t v5 = 0x666666666666666;
  }
  else {
    unint64_t v5 = v4;
  }
  if (v5 > 0x666666666666666) {
    sub_188D718();
  }
  uint64_t v7 = 40 * v5;
  uint64_t v8 = (char *)operator new(40 * v5);
  unint64_t v9 = &v8[40 * v3];
  uint64_t v10 = &v8[v7];
  *(void *)unint64_t v9 = *(void *)a2;
  *((_DWORD *)v9 + 2) = *(_DWORD *)(a2 + 8);
  *((_OWORD *)v9 + 1) = *(_OWORD *)(a2 + 16);
  *((void *)v9 + 4) = *(void *)(a2 + 32);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  unint64_t v11 = v9 + 40;
  unint64_t v12 = (char *)*a1;
  uint64_t v13 = (char *)a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
    if (!v13) {
      return v11;
    }
    goto LABEL_18;
  }
  uint64_t v14 = 0;
  do
  {
    unint64_t v15 = &v9[v14];
    uint64_t v16 = &v13[v14];
    uint64_t v17 = *(void *)&v13[v14 - 40];
    *((_DWORD *)v15 - 8) = *(_DWORD *)&v13[v14 - 32];
    *((void *)v15 - 5) = v17;
    *(_OWORD *)(v15 - 24) = *(_OWORD *)&v13[v14 - 24];
    *((void *)v15 - 1) = *(void *)&v13[v14 - 8];
    *((void *)v16 - 3) = 0;
    *((void *)v16 - 2) = 0;
    *((void *)v16 - 1) = 0;
    v14 -= 40;
  }
  while (&v13[v14] != v12);
  uint64_t v18 = (char *)*a1;
  uint64_t v13 = (char *)a1[1];
  *a1 = &v9[v14];
  a1[1] = v11;
  a1[2] = v10;
  if (v13 != v18)
  {
    do
    {
      __n128 v19 = (void *)*((void *)v13 - 3);
      if (v19)
      {
        *((void *)v13 - 2) = v19;
        operator delete(v19);
      }
      v13 -= 40;
    }
    while (v13 != v18);
    uint64_t v13 = v18;
  }
  if (v13) {
LABEL_18:
  }
    operator delete(v13);
  return v11;
}

int8x16_t sub_9A4F6C(int8x16_t *a1, int8x16_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  while (2)
  {
    unint64_t v12 = a1;
    while (1)
    {
      while (1)
      {
        a1 = v12;
        uint64_t v13 = (char *)a2 - (char *)v12;
        unint64_t v14 = ((char *)a2 - (char *)v12) >> 3;
        if (v6 || !v5)
        {
          switch(v14)
          {
            case 0uLL:
            case 1uLL:
              return result;
            case 2uLL:
              if ((a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)) >= (v12->u32[1] | ((unint64_t)v12->u32[0] << 32))) {
                return result;
              }
              uint64_t v89 = v12->i64[0];
              goto LABEL_106;
            case 3uLL:
              unint64_t v87 = v12->u32[3] | ((unint64_t)v12->u32[2] << 32);
              unint64_t v88 = a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32);
              if (v87 >= (v12->u32[1] | ((unint64_t)v12->u32[0] << 32)))
              {
                if (v88 < v87)
                {
                  uint64_t v104 = v12->i64[1];
                  v12->i64[1] = a2[-1].i64[1];
                  a2[-1].i64[1] = v104;
                  if ((v12->u32[3] | ((unint64_t)v12->u32[2] << 32)) < (v12->u32[1] | ((unint64_t)v12->u32[0] << 32)))
                  {
                    int8x16_t result = vextq_s8(*v12, *v12, 8uLL);
                    int8x16_t *v12 = result;
                  }
                }
              }
              else
              {
                uint64_t v89 = v12->i64[0];
                if (v88 < v87)
                {
LABEL_106:
                  v12->i64[0] = a2[-1].i64[1];
                }
                else
                {
                  v12->i64[0] = v12->i64[1];
                  v12->i64[1] = v89;
                  if ((a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)) >= __ROR8__(v89, 32)) {
                    return result;
                  }
                  v12->i64[1] = a2[-1].i64[1];
                }
                a2[-1].i64[1] = v89;
              }
              break;
            case 4uLL:
              sub_2A9374((unsigned int *)v12, &v12->u32[2], (unsigned int *)&v12[1], &a2[-1].u32[2]);
              return result;
            case 5uLL:
              sub_2A94B0((unsigned int *)v12, &v12->u32[2], (unsigned int *)&v12[1], &v12[1].u32[2], &a2[-1].u32[2]);
              return result;
            default:
              JUMPOUT(0);
          }
          return result;
        }
        if (v13 <= 191)
        {
          BOOL v90 = (int8x16_t *)&v12->u64[1];
          BOOL v92 = v12 == a2 || v90 == a2;
          if (a5)
          {
            if (!v92)
            {
              uint64_t v93 = 0;
              unsigned int v94 = v12;
              do
              {
                uint64_t v96 = v94->u32[2];
                uint64_t v97 = v94->u32[3];
                uint64_t v98 = v94->u32[0];
                uint64_t v99 = v94->u32[1];
                unsigned int v94 = v90;
                if ((v97 | (unint64_t)(v96 << 32)) < (v99 | (unint64_t)(v98 << 32)))
                {
                  uint64_t v100 = v90->i64[0];
                  unint64_t v101 = __ROR8__(v94->i64[0], 32);
                  uint64_t v102 = v93;
                  do
                  {
                    char v103 = &v12->i8[v102];
                    *(uint64_t *)((char *)&v12->i64[1] + v102) = *(uint64_t *)((char *)v12->i64 + v102);
                    if (!v102)
                    {
                      BOOL v95 = (uint64_t *)v12;
                      goto LABEL_124;
                    }
                    v102 -= 8;
                  }
                  while (v101 < (*((unsigned int *)v103 - 1) | ((unint64_t)*((unsigned int *)v103 - 2) << 32)));
                  BOOL v95 = (uint64_t *)((char *)&v12->i64[1] + v102);
LABEL_124:
                  uint64_t *v95 = v100;
                }
                BOOL v90 = (int8x16_t *)&v94->u64[1];
                v93 += 8;
              }
              while (&v94->u64[1] != (unint64_t *)a2);
            }
          }
          else if (!v92)
          {
            do
            {
              uint64_t v105 = a1->u32[2];
              uint64_t v106 = a1->u32[3];
              uint64_t v107 = a1->u32[0];
              uint64_t v108 = a1->u32[1];
              a1 = v90;
              if ((v106 | (unint64_t)(v105 << 32)) < (v108 | (unint64_t)(v107 << 32)))
              {
                uint64_t v109 = v90->i64[0];
                unint64_t v110 = __ROR8__(v90->i64[0], 32);
                do
                {
                  long long v111 = (uint64_t *)v90;
                  uint64_t v112 = v90[-1].i64[1];
                  BOOL v90 = (int8x16_t *)((char *)v90 - 8);
                  *long long v111 = v112;
                }
                while (v110 < (*((unsigned int *)v111 - 3) | ((unint64_t)*((unsigned int *)v111 - 4) << 32)));
                v90->i64[0] = v109;
              }
              BOOL v90 = (int8x16_t *)&a1->u64[1];
            }
            while (&a1->u64[1] != (unint64_t *)a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v12 != a2)
          {
            sub_2A9598((unsigned int *)v12, (unsigned int *)a2, (unsigned int *)a2, a3);
          }
          return result;
        }
        unint64_t v15 = v14 >> 1;
        uint64_t v16 = (unsigned int *)v12 + 2 * (v14 >> 1);
        unint64_t v17 = a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32);
        if ((unint64_t)v13 >= 0x401) {
          break;
        }
        unint64_t v21 = v12->u32[1] | ((unint64_t)v12->u32[0] << 32);
        uint64_t v22 = &v12->u32[2 * v15 + 1];
        if (v21 < (*v22 | ((unint64_t)*v16 << 32)))
        {
          uint64_t v23 = *(void *)v16;
          if (v17 >= v21)
          {
            *(void *)uint64_t v16 = v12->i64[0];
            v12->i64[0] = v23;
            if ((a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)) >= __ROR8__(v23, 32)) {
              goto LABEL_32;
            }
            v12->i64[0] = a2[-1].i64[1];
          }
          else
          {
            *(void *)uint64_t v16 = a2[-1].i64[1];
          }
          a2[-1].i64[1] = v23;
LABEL_32:
          --a4;
          if ((a5 & 1) == 0) {
            goto LABEL_56;
          }
          goto LABEL_33;
        }
        if (v17 >= v21) {
          goto LABEL_32;
        }
        uint64_t v26 = v12->i64[0];
        v12->i64[0] = a2[-1].i64[1];
        a2[-1].i64[1] = v26;
        if ((v12->u32[1] | ((unint64_t)v12->u32[0] << 32)) >= (*v22 | ((unint64_t)*v16 << 32))) {
          goto LABEL_32;
        }
        uint64_t v27 = *(void *)v16;
        *(void *)uint64_t v16 = v12->i64[0];
        v12->i64[0] = v27;
        --a4;
        if (a5) {
          goto LABEL_33;
        }
LABEL_56:
        uint64_t v37 = v12->i64[0];
        if ((v12[-1].u32[3] | ((unint64_t)v12[-1].u32[2] << 32)) < (v12->u32[1] | ((unint64_t)v12->u32[0] << 32))) {
          goto LABEL_57;
        }
        unint64_t v73 = __ROR8__(v37, 32);
        if (v73 < (a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)))
        {
          do
          {
            uint64_t v74 = v12->u32[2];
            uint64_t v75 = v12->u32[3];
            unint64_t v12 = (int8x16_t *)((char *)v12 + 8);
          }
          while (v73 >= (v75 | (unint64_t)(v74 << 32)));
        }
        else
        {
          int v76 = (int8x16_t *)&v12->u64[1];
          do
          {
            unint64_t v12 = v76;
            if (v76 >= a2) {
              break;
            }
            unint64_t v77 = v76->u32[1] | ((unint64_t)v76->u32[0] << 32);
            int v76 = (int8x16_t *)((char *)v76 + 8);
          }
          while (v73 >= v77);
        }
        BOOL v78 = a2;
        if (v12 < a2)
        {
          BOOL v78 = a2;
          do
          {
            uint64_t v79 = v78[-1].u32[2];
            uint64_t v80 = v78[-1].u32[3];
            BOOL v78 = (int8x16_t *)((char *)v78 - 8);
          }
          while (v73 < (v80 | (unint64_t)(v79 << 32)));
        }
        while (v12 < v78)
        {
          uint64_t v81 = v12->i64[0];
          v12->i64[0] = v78->i64[0];
          v78->i64[0] = v81;
          do
          {
            uint64_t v82 = v12->u32[2];
            uint64_t v83 = v12->u32[3];
            unint64_t v12 = (int8x16_t *)((char *)v12 + 8);
          }
          while (v73 >= (v83 | (unint64_t)(v82 << 32)));
          do
          {
            uint64_t v84 = v78[-1].u32[2];
            uint64_t v85 = v78[-1].u32[3];
            BOOL v78 = (int8x16_t *)((char *)v78 - 8);
          }
          while (v73 < (v85 | (unint64_t)(v84 << 32)));
        }
        unsigned int v86 = &v12[-1].i64[1];
        BOOL v5 = &v12[-1].u64[1] >= (unint64_t *)a1;
        BOOL v6 = &v12[-1].u64[1] == (unint64_t *)a1;
        if (&v12[-1].u64[1] != (unint64_t *)a1) {
          a1->i64[0] = *v86;
        }
        a5 = 0;
        *unsigned int v86 = v37;
      }
      uint64_t v18 = &v12->u32[2 * v15 + 1];
      unint64_t v19 = *v18 | ((unint64_t)*v16 << 32);
      if (v19 >= (v12->u32[1] | ((unint64_t)v12->u32[0] << 32)))
      {
        if (v17 < v19)
        {
          uint64_t v24 = *(void *)v16;
          *(void *)uint64_t v16 = a2[-1].i64[1];
          a2[-1].i64[1] = v24;
          if ((*v18 | ((unint64_t)*v16 << 32)) < (v12->u32[1] | ((unint64_t)v12->u32[0] << 32)))
          {
            uint64_t v25 = v12->i64[0];
            v12->i64[0] = *(void *)v16;
            *(void *)uint64_t v16 = v25;
          }
        }
      }
      else
      {
        uint64_t v20 = v12->i64[0];
        if (v17 >= v19)
        {
          v12->i64[0] = *(void *)v16;
          *(void *)uint64_t v16 = v20;
          if ((a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)) >= __ROR8__(v20, 32)) {
            goto LABEL_23;
          }
          *(void *)uint64_t v16 = a2[-1].i64[1];
        }
        else
        {
          v12->i64[0] = a2[-1].i64[1];
        }
        a2[-1].i64[1] = v20;
      }
LABEL_23:
      __n128 v28 = &v12->i8[8 * v15];
      unsigned int v30 = *((_DWORD *)v28 - 2);
      long long v29 = v28 - 8;
      long long v31 = (unsigned int *)(v29 + 4);
      unint64_t v32 = *((unsigned int *)v29 + 1) | ((unint64_t)v30 << 32);
      unint64_t v33 = a2[-1].u32[1] | ((unint64_t)a2[-1].u32[0] << 32);
      if (v32 >= (v12->u32[3] | ((unint64_t)v12->u32[2] << 32)))
      {
        if (v33 < v32)
        {
          uint64_t v35 = *(void *)v29;
          *(void *)long long v29 = a2[-1].i64[0];
          a2[-1].i64[0] = v35;
          if ((*v31 | ((unint64_t)*(unsigned int *)v29 << 32)) < (v12->u32[3] | ((unint64_t)v12->u32[2] << 32)))
          {
            uint64_t v36 = v12->i64[1];
            v12->i64[1] = *(void *)v29;
            *(void *)long long v29 = v36;
          }
        }
      }
      else
      {
        uint64_t v34 = v12->i64[1];
        if (v33 >= v32)
        {
          v12->i64[1] = *(void *)v29;
          *(void *)long long v29 = v34;
          if ((a2[-1].u32[1] | ((unint64_t)a2[-1].u32[0] << 32)) >= __ROR8__(v34, 32)) {
            goto LABEL_37;
          }
          *(void *)long long v29 = a2[-1].i64[0];
        }
        else
        {
          v12->i64[1] = a2[-1].i64[0];
        }
        a2[-1].i64[0] = v34;
      }
LABEL_37:
      uint64_t v38 = &v12->i8[8 * v15];
      unsigned int v40 = *((_DWORD *)v38 + 2);
      long long v39 = (unsigned int *)(v38 + 8);
      long long v41 = v39 + 1;
      unint64_t v42 = v39[1] | ((unint64_t)v40 << 32);
      unint64_t v43 = a2[-2].u32[3] | ((unint64_t)a2[-2].u32[2] << 32);
      if (v42 >= (v12[1].u32[1] | ((unint64_t)v12[1].u32[0] << 32)))
      {
        if (v43 < v42)
        {
          uint64_t v45 = *(void *)v39;
          *(void *)long long v39 = a2[-2].i64[1];
          a2[-2].i64[1] = v45;
          if ((*v41 | ((unint64_t)*v39 << 32)) < (v12[1].u32[1] | ((unint64_t)v12[1].u32[0] << 32)))
          {
            uint64_t v46 = v12[1].i64[0];
            v12[1].i64[0] = *(void *)v39;
            *(void *)long long v39 = v46;
          }
        }
      }
      else
      {
        uint64_t v44 = v12[1].i64[0];
        if (v43 >= v42)
        {
          v12[1].i64[0] = *(void *)v39;
          *(void *)long long v39 = v44;
          if ((a2[-2].u32[3] | ((unint64_t)a2[-2].u32[2] << 32)) >= __ROR8__(v44, 32)) {
            goto LABEL_46;
          }
          *(void *)long long v39 = a2[-2].i64[1];
        }
        else
        {
          v12[1].i64[0] = a2[-2].i64[1];
        }
        a2[-2].i64[1] = v44;
      }
LABEL_46:
      unint64_t v47 = *v18 | ((unint64_t)*v16 << 32);
      unint64_t v48 = *v31 | ((unint64_t)*(unsigned int *)v29 << 32);
      unint64_t v49 = *v41 | ((unint64_t)*v39 << 32);
      if (v47 >= v48)
      {
        uint64_t v50 = *(void *)v16;
        if (v49 < v47)
        {
          uint64_t v51 = *(void *)v39;
          *(void *)uint64_t v16 = *(void *)v39;
          *(void *)long long v39 = v50;
          uint64_t v50 = v51;
          if ((*v18 | (unint64_t)(v51 << 32)) < v48)
          {
            uint64_t v52 = *(void *)v29;
            *(void *)long long v29 = v51;
            *(void *)uint64_t v16 = v52;
LABEL_54:
            uint64_t v50 = v52;
          }
        }
      }
      else
      {
        uint64_t v50 = *(void *)v29;
        if (v49 < v47)
        {
          *(void *)long long v29 = *(void *)v39;
          *(void *)long long v39 = v50;
          uint64_t v50 = *(void *)v16;
          goto LABEL_55;
        }
        *(void *)long long v29 = *(void *)v16;
        *(void *)uint64_t v16 = v50;
        if (v49 < __ROR8__(v50, 32))
        {
          uint64_t v52 = *(void *)v39;
          *(void *)uint64_t v16 = *(void *)v39;
          *(void *)long long v39 = v50;
          goto LABEL_54;
        }
      }
LABEL_55:
      uint64_t v53 = v12->i64[0];
      v12->i64[0] = v50;
      *(void *)uint64_t v16 = v53;
      --a4;
      if ((a5 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_33:
      uint64_t v37 = v12->i64[0];
LABEL_57:
      uint64_t v54 = 0;
      unint64_t v55 = __ROR8__(v37, 32);
      do
      {
        unint64_t v56 = v12->u32[v54 + 3] | ((unint64_t)v12->u32[v54 + 2] << 32);
        v54 += 2;
      }
      while (v56 < v55);
      std::string v57 = &v12->i8[v54 * 4];
      std::string v58 = a2;
      if (v54 == 2)
      {
        std::string v58 = a2;
        do
        {
          if (v57 >= (char *)v58) {
            break;
          }
          uint64_t v61 = v58[-1].u32[2];
          uint64_t v62 = v58[-1].u32[3];
          std::string v58 = (int8x16_t *)((char *)v58 - 8);
        }
        while ((v62 | (unint64_t)(v61 << 32)) >= v55);
      }
      else
      {
        do
        {
          uint64_t v59 = v58[-1].u32[2];
          uint64_t v60 = v58[-1].u32[3];
          std::string v58 = (int8x16_t *)((char *)v58 - 8);
        }
        while ((v60 | (unint64_t)(v59 << 32)) >= v55);
      }
      if (v57 >= (char *)v58)
      {
        long long v70 = v57 - 8;
        if (v57 - 8 == (char *)v12) {
          goto LABEL_75;
        }
LABEL_74:
        v12->i64[0] = *(void *)v70;
        goto LABEL_75;
      }
      unint64_t v63 = (unint64_t)v57;
      unsigned int v64 = (uint64_t *)v58;
      do
      {
        uint64_t v65 = *(void *)v63;
        *(void *)unint64_t v63 = *v64;
        uint64_t *v64 = v65;
        do
        {
          uint64_t v66 = *(unsigned int *)(v63 + 8);
          uint64_t v67 = *(unsigned int *)(v63 + 12);
          v63 += 8;
        }
        while ((v67 | (unint64_t)(v66 << 32)) < v55);
        do
        {
          uint64_t v68 = *((unsigned int *)v64 - 2);
          uint64_t v69 = *((unsigned int *)v64-- - 1);
        }
        while ((v69 | (unint64_t)(v68 << 32)) >= v55);
      }
      while (v63 < (unint64_t)v64);
      long long v70 = (char *)(v63 - 8);
      if ((int8x16_t *)(v63 - 8) != v12) {
        goto LABEL_74;
      }
LABEL_75:
      *(void *)long long v70 = v37;
      if (v57 < (char *)v58) {
        goto LABEL_78;
      }
      BOOL v71 = sub_9A5894(v12, (int8x16_t *)v70);
      unint64_t v12 = (int8x16_t *)(v70 + 8);
      if (sub_9A5894((int8x16_t *)(v70 + 8), a2)) {
        break;
      }
      if (!v71)
      {
LABEL_78:
        sub_9A4F6C(a1, v70, a3, a4, a5 & 1);
        a5 = 0;
        unint64_t v12 = (int8x16_t *)(v70 + 8);
      }
    }
    a2 = (int8x16_t *)v70;
    if (!v71) {
      continue;
    }
    return result;
  }
}

BOOL sub_9A5894(int8x16_t *a1, int8x16_t *a2)
{
  switch(((char *)a2 - (char *)a1) >> 3)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      if ((a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)) >= (a1->u32[1] | ((unint64_t)a1->u32[0] << 32))) {
        return 1;
      }
      uint64_t v3 = a1->i64[0];
      goto LABEL_7;
    case 3:
      unint64_t v4 = a1->u32[3] | ((unint64_t)a1->u32[2] << 32);
      unint64_t v5 = a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32);
      if (v4 >= (a1->u32[1] | ((unint64_t)a1->u32[0] << 32)))
      {
        if (v5 < v4)
        {
          uint64_t v11 = a1->i64[1];
          a1->i64[1] = a2[-1].i64[1];
          a2[-1].i64[1] = v11;
          if ((a1->u32[3] | ((unint64_t)a1->u32[2] << 32)) < (a1->u32[1] | ((unint64_t)a1->u32[0] << 32)))
          {
            *a1 = vextq_s8(*a1, *a1, 8uLL);
            return 1;
          }
        }
      }
      else
      {
        uint64_t v3 = a1->i64[0];
        if (v5 < v4)
        {
LABEL_7:
          a1->i64[0] = a2[-1].i64[1];
          a2[-1].i64[1] = v3;
          return 1;
        }
        a1->i64[0] = a1->i64[1];
        a1->i64[1] = v3;
        if ((a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)) < __ROR8__(v3, 32))
        {
          a1->i64[1] = a2[-1].i64[1];
          a2[-1].i64[1] = v3;
          return 1;
        }
      }
      return 1;
    case 4:
      sub_2A9374((unsigned int *)a1, &a1->u32[2], (unsigned int *)&a1[1], &a2[-1].u32[2]);
      return 1;
    case 5:
      sub_2A94B0((unsigned int *)a1, &a1->u32[2], (unsigned int *)&a1[1], &a1[1].u32[2], &a2[-1].u32[2]);
      return 1;
    default:
      BOOL v6 = a1 + 1;
      unint64_t v7 = a1->u32[3] | ((unint64_t)a1->u32[2] << 32);
      unint64_t v8 = a1->u32[1] | ((unint64_t)a1->u32[0] << 32);
      unint64_t v9 = a1[1].u32[1] | ((unint64_t)a1[1].u32[0] << 32);
      if (v7 >= v8)
      {
        if (v9 < v7)
        {
          uint64_t v13 = a1->i64[1];
          uint64_t v12 = a1[1].i64[0];
          a1->i64[1] = v12;
          a1[1].i64[0] = v13;
          if (__ROR8__(v12, 32) < v8)
          {
            uint64_t v14 = a1->i64[0];
            a1->i64[0] = v12;
            a1->i64[1] = v14;
          }
        }
      }
      else
      {
        uint64_t v10 = a1->i64[0];
        if (v9 >= v7)
        {
          a1->i64[0] = a1->i64[1];
          a1->i64[1] = v10;
          if (v9 >= __ROR8__(v10, 32)) {
            goto LABEL_25;
          }
          a1->i64[1] = a1[1].i64[0];
        }
        else
        {
          a1->i64[0] = a1[1].i64[0];
        }
        a1[1].i64[0] = v10;
      }
LABEL_25:
      unint64_t v15 = &a1[1].u32[2];
      if (&a1[1].u64[1] == (unint64_t *)a2) {
        return 1;
      }
      uint64_t v16 = 0;
      int v17 = 0;
      break;
  }
  while ((v15[1] | ((unint64_t)*v15 << 32)) >= (v6->u32[1] | ((unint64_t)v6->u32[0] << 32)))
  {
LABEL_34:
    BOOL v6 = (int8x16_t *)v15;
    v16 += 8;
    v15 += 2;
    if (v15 == (unsigned int *)a2) {
      return 1;
    }
  }
  uint64_t v18 = *(void *)v15;
  unint64_t v19 = __ROR8__(*(void *)v15, 32);
  uint64_t v20 = v16;
  do
  {
    *(uint64_t *)((char *)&a1[1].i64[1] + v20) = *(uint64_t *)((char *)a1[1].i64 + v20);
    if (v20 == -16)
    {
      a1->i64[0] = v18;
      if (++v17 != 8) {
        goto LABEL_34;
      }
      return v15 + 2 == (unsigned int *)a2;
    }
    unint64_t v21 = *(unsigned int *)((char *)&a1->u32[3] + v20) | ((unint64_t)*(unsigned int *)((char *)&a1->u32[2] + v20) << 32);
    v20 -= 8;
  }
  while (v19 < v21);
  *(uint64_t *)((char *)&a1[1].i64[1] + v20) = v18;
  if (++v17 != 8) {
    goto LABEL_34;
  }
  return v15 + 2 == (unsigned int *)a2;
}

uint64_t sub_9A5B84(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void **)(a1 + 8);
  *unint64_t v4 = 0;
  v4[1] = 0;
  v4[2] = 0;
  BOOL v6 = *(const void **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  int64_t v7 = v5 - *(void *)a2;
  if (v5 != *(void *)a2)
  {
    if (v7 < 0) {
      sub_2E00();
    }
    unint64_t v8 = (char *)operator new(v5 - *(void *)a2);
    *unint64_t v4 = v8;
    v4[1] = v8;
    unint64_t v9 = &v8[8 * (v7 >> 3)];
    v4[2] = v9;
    memcpy(v8, v6, v7);
    v4[1] = v9;
  }
  uint64_t result = sub_8E9C5C((uint64_t)(v4 + 3), (void *)(a2 + 24));
  v4[70] = *(void *)(a2 + 560);
  *(void *)(a1 + 8) = v4 + 71;
  return result;
}

void sub_9A5C24(_Unwind_Exception *exception_object)
{
  unint64_t v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
  }
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

char *sub_9A5C48(void **a1, uint64_t a2)
{
  uint64_t v3 = 0x193D4BB7E327A977 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x73615A240E6C2BLL) {
    sub_2E00();
  }
  if (0x327A976FC64F52EELL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x327A976FC64F52EELL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if ((unint64_t)(0x193D4BB7E327A977 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3)) >= 0x39B0AD12073615) {
    unint64_t v6 = 0x73615A240E6C2BLL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x73615A240E6C2BLL) {
      sub_188D718();
    }
    int64_t v7 = operator new(568 * v6);
  }
  else
  {
    int64_t v7 = 0;
  }
  unint64_t v8 = &v7[71 * v3];
  uint64_t v25 = v8;
  uint64_t v27 = (char *)&v7[71 * v6];
  v8[1] = 0;
  v8[2] = 0;
  void *v8 = 0;
  uint64_t v10 = *(const void **)a2;
  uint64_t v9 = *(void *)(a2 + 8);
  int64_t v11 = v9 - *(void *)a2;
  if (v9 != *(void *)a2)
  {
    if (v11 < 0) {
      sub_2E00();
    }
    uint64_t v12 = (char *)operator new(v9 - *(void *)a2);
    void *v8 = v12;
    v8[1] = v12;
    uint64_t v13 = &v12[8 * (v11 >> 3)];
    v8[2] = v13;
    memcpy(v12, v10, v11);
    v8[1] = v13;
  }
  sub_8E9C5C((uint64_t)&v7[71 * v3 + 3], (void *)(a2 + 24));
  v7[71 * v3 + 70] = *(void *)(a2 + 560);
  uint64_t v26 = (char *)&v7[71 * v3];
  uint64_t v14 = v26 + 568;
  uint64_t v16 = (char *)*a1;
  unint64_t v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v25;
    a1[1] = v14;
    a1[2] = v27;
  }
  else
  {
    uint64_t v17 = 0;
    do
    {
      uint64_t v18 = (uint64_t)&v25[v17 - 71];
      uint64_t v19 = (uint64_t)&v15[v17 * 8 - 568];
      *(void *)(v18 + 16) = 0;
      *(_OWORD *)uint64_t v18 = 0u;
      *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
      v25[v17 - 69] = *(void *)&v15[v17 * 8 - 552];
      *(void *)(v19 + 16) = 0;
      *(_OWORD *)uint64_t v19 = 0u;
      sub_9A5F4C((uint64_t)&v25[v17 - 68], (uint64_t)&v15[v17 * 8 - 544]);
      v25[v17 - 1] = *(void *)&v15[v17 * 8 - 8];
      v17 -= 71;
    }
    while (&v15[v17 * 8] != v16);
    uint64_t v20 = (char *)*a1;
    unint64_t v15 = (char *)a1[1];
    *a1 = &v25[v17];
    a1[1] = v14;
    a1[2] = v27;
    if (v15 != v20)
    {
      unint64_t v21 = v15 - 568;
      do
      {
        sub_8E57D0((void *)v21 + 3);
        uint64_t v23 = *(void **)v21;
        if (*(void *)v21)
        {
          *((void *)v21 + 1) = v23;
          operator delete(v23);
        }
        BOOL v22 = v21 == v20;
        v21 -= 568;
      }
      while (!v22);
      unint64_t v15 = v20;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v26 + 568;
}

void sub_9A5EB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  unint64_t v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
  }
  sub_9A5ED8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_9A5ED8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 568;
    sub_8E57D0((void *)(i - 544));
    unint64_t v4 = *(void **)(i - 568);
    if (v4)
    {
      *(void *)(i - 560) = v4;
      operator delete(v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

double sub_9A5F4C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = 0;
  *(_OWORD *)(a2 + 56) = 0u;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  uint64_t v3 = *(void *)(a2 + 104);
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(void *)(a1 + 104) = v3;
  LODWORD(v3) = *(_DWORD *)(a2 + 112);
  *(unsigned char *)(a1 + 116) = *(unsigned char *)(a2 + 116);
  *(_DWORD *)(a1 + 112) = v3;
  long long v4 = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = v4;
  *(void *)(a2 + 120) = 0;
  *(_OWORD *)(a2 + 128) = 0u;
  long long v5 = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v5;
  *(_OWORD *)(a2 + 152) = 0u;
  *(void *)(a2 + 144) = 0;
  *(void *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a2 + 184) = 0;
  *(_OWORD *)(a2 + 168) = 0u;
  *(void *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  long long v7 = *(_OWORD *)(a2 + 192);
  uint64_t v6 = a2 + 192;
  *(_OWORD *)(a1 + 192) = v7;
  *(void *)(a1 + 208) = *(void *)(v6 + 16);
  *(void *)(v6 + 16) = 0;
  *(_OWORD *)uint64_t v6 = 0u;
  *(void *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(v6 + 24);
  *(void *)(a1 + 232) = *(void *)(v6 + 40);
  *(void *)(v6 + 40) = 0;
  *(_OWORD *)(v6 + 24) = 0u;
  *(void *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(v6 + 48);
  *(void *)(a1 + 256) = *(void *)(v6 + 64);
  *(void *)(v6 + 64) = 0;
  *(_OWORD *)(v6 + 48) = 0u;
  *(void *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  uint64_t v8 = *(void *)(v6 + 80);
  *(void *)(a1 + 264) = *(void *)(v6 + 72);
  *(void *)(a1 + 272) = v8;
  *(void *)(a1 + 280) = *(void *)(v6 + 88);
  *(_OWORD *)(v6 + 72) = 0u;
  uint64_t v9 = *(void *)(v6 + 96);
  *(_OWORD *)(v6 + 88) = 0u;
  *(void *)(a1 + 288) = v9;
  LODWORD(v9) = *(_DWORD *)(v6 + 104);
  *(unsigned char *)(a1 + 300) = *(unsigned char *)(v6 + 108);
  *(_DWORD *)(a1 + 296) = v9;
  long long v10 = *(_OWORD *)(v6 + 112);
  *(void *)(a1 + 320) = *(void *)(v6 + 128);
  *(_OWORD *)(a1 + 304) = v10;
  *(void *)(v6 + 112) = 0;
  *(_OWORD *)(v6 + 120) = 0u;
  long long v11 = *(_OWORD *)(v6 + 136);
  *(void *)(a1 + 344) = *(void *)(v6 + 152);
  *(_OWORD *)(a1 + 328) = v11;
  *(_OWORD *)(v6 + 144) = 0u;
  *(void *)(v6 + 136) = 0;
  *(void *)(a1 + 368) = 0;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(v6 + 160);
  *(void *)(a1 + 368) = *(void *)(v6 + 176);
  *(void *)(v6 + 176) = 0;
  *(_OWORD *)(v6 + 160) = 0u;
  *(void *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 376) = 0u;
  uint64_t v12 = *(void *)(v6 + 192);
  *(void *)(a1 + 376) = *(void *)(v6 + 184);
  *(void *)(a1 + 384) = v12;
  *(void *)(a1 + 392) = *(void *)(v6 + 200);
  *(void *)(v6 + 200) = 0;
  *(_OWORD *)(v6 + 184) = 0u;
  *(void *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(v6 + 208);
  *(void *)(a1 + 416) = *(void *)(v6 + 224);
  *(void *)(v6 + 224) = 0;
  *(_OWORD *)(v6 + 208) = 0u;
  *(void *)(a1 + 440) = 0;
  *(_OWORD *)(a1 + 424) = 0u;
  uint64_t v13 = *(void *)(v6 + 240);
  *(void *)(a1 + 424) = *(void *)(v6 + 232);
  *(void *)(a1 + 432) = v13;
  *(void *)(a1 + 440) = *(void *)(v6 + 248);
  *(_OWORD *)(v6 + 232) = 0u;
  uint64_t v14 = *(void *)(v6 + 256);
  *(_OWORD *)(v6 + 248) = 0u;
  *(void *)(a1 + 448) = v14;
  LODWORD(v14) = *(_DWORD *)(v6 + 264);
  *(unsigned char *)(a1 + 460) = *(unsigned char *)(v6 + 268);
  *(_DWORD *)(a1 + 456) = v14;
  long long v15 = *(_OWORD *)(v6 + 272);
  *(void *)(a1 + 480) = *(void *)(v6 + 288);
  *(_OWORD *)(a1 + 464) = v15;
  *(void *)(v6 + 272) = 0;
  *(_OWORD *)(v6 + 280) = 0u;
  long long v16 = *(_OWORD *)(v6 + 296);
  *(void *)(a1 + 504) = *(void *)(v6 + 312);
  *(_OWORD *)(a1 + 488) = v16;
  *(_OWORD *)(v6 + 304) = 0u;
  *(void *)(v6 + 296) = 0;
  *(void *)(a1 + 528) = 0;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 512) = *(_OWORD *)(v6 + 320);
  *(void *)(a1 + 528) = *(void *)(v6 + 336);
  *(void *)(v6 + 336) = 0;
  *(_OWORD *)(v6 + 320) = 0u;
  return result;
}

uint64_t sub_9A6204(int64x2_t *a1, long long *a2)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1->i64[1] - a1->i64[0]) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333) {
    sub_2E00();
  }
  if (0x999999999999999ALL * ((a1[1].i64[0] - a1->i64[0]) >> 4) > v4) {
    unint64_t v4 = 0x999999999999999ALL * ((a1[1].i64[0] - a1->i64[0]) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[1].i64[0] - a1->i64[0]) >> 4) >= 0x199999999999999) {
    unint64_t v6 = 0x333333333333333;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v23 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x333333333333333) {
      sub_188D718();
    }
    long long v7 = (char *)operator new(80 * v6);
  }
  else
  {
    long long v7 = 0;
  }
  __n128 __p = v7;
  v21.i64[0] = (uint64_t)&v7[80 * v3];
  BOOL v22 = &v7[80 * v6];
  sub_9982A0(v21.i64[0], a2);
  uint64_t v8 = v21.i64[0];
  uint64_t v9 = v21.i64[0] + 80;
  v21.i64[1] = v21.i64[0] + 80;
  uint64_t v11 = a1->i64[0];
  unint64_t v10 = a1->u64[1];
  if (v10 == a1->i64[0])
  {
    int64x2_t v17 = vdupq_n_s64(v10);
  }
  else
  {
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = v8 + v12;
      uint64_t v14 = v10 + v12;
      long long v15 = *(_OWORD *)(v10 + v12 - 80);
      *(void *)(v13 - 64) = *(void *)(v10 + v12 - 64);
      *(_OWORD *)(v13 - 80) = v15;
      *(void *)(v14 - 72) = 0;
      *(void *)(v14 - 64) = 0;
      *(void *)(v14 - 80) = 0;
      *(void *)(v13 - 56) = 0;
      *(void *)(v13 - 48) = 0;
      *(void *)(v13 - 40) = 0;
      *(_OWORD *)(v13 - 56) = *(_OWORD *)(v10 + v12 - 56);
      *(void *)(v13 - 40) = *(void *)(v10 + v12 - 40);
      *(void *)(v14 - 48) = 0;
      *(void *)(v14 - 40) = 0;
      *(void *)(v14 - 56) = 0;
      uint64_t v16 = *(void *)(v10 + v12 - 32);
      *(void *)(v13 - 16) = 0;
      *(void *)(v13 - 8) = 0;
      *(void *)(v13 - 32) = v16;
      *(void *)(v13 - 24) = 0;
      *(_OWORD *)(v13 - 24) = *(_OWORD *)(v10 + v12 - 24);
      *(void *)(v13 - 8) = *(void *)(v10 + v12 - 8);
      *(void *)(v14 - 24) = 0;
      *(void *)(v14 - 16) = 0;
      *(void *)(v14 - 8) = 0;
      v12 -= 80;
    }
    while (v10 + v12 != v11);
    int64x2_t v17 = *a1;
    uint64_t v9 = v21.i64[1];
    v8 += v12;
  }
  a1->i64[0] = v8;
  a1->i64[1] = v9;
  int64x2_t v21 = v17;
  uint64_t v18 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v22;
  BOOL v22 = v18;
  __n128 __p = (void *)v17.i64[0];
  sub_9A640C((uint64_t)&__p, v17.i64[0]);
  if (__p) {
    operator delete(__p);
  }
  return v9;
}

void sub_9A63C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_9A63D4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_9A63D4(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_9A640C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == a2) {
    return;
  }
  do
  {
    uint64_t v5 = *(void *)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 80;
    if (v5)
    {
      sub_99957C(v2 - 24, v5);
      operator delete(*(void **)(v2 - 24));
    }
    unint64_t v6 = *(void ***)(v2 - 56);
    if (v6)
    {
      long long v7 = *(void ***)(v2 - 48);
      uint64_t v8 = *(void **)(v2 - 56);
      if (v7 == v6) {
        goto LABEL_27;
      }
      while (1)
      {
        uint64_t v9 = (void **)*(v7 - 3);
        if (!v9) {
          goto LABEL_21;
        }
        unint64_t v10 = (void **)*(v7 - 2);
        uint64_t v11 = *(v7 - 3);
        if (v10 != v9) {
          break;
        }
LABEL_20:
        *(v7 - 2) = v9;
        operator delete(v11);
LABEL_21:
        if (*((char *)v7 - 25) < 0)
        {
          operator delete(*(v7 - 6));
          uint64_t v12 = v7 - 10;
          if (*((char *)v7 - 57) < 0) {
LABEL_25:
          }
            operator delete(*v12);
        }
        else
        {
          uint64_t v12 = v7 - 10;
          if (*((char *)v7 - 57) < 0) {
            goto LABEL_25;
          }
        }
        long long v7 = v12;
        if (v12 == v6)
        {
          uint64_t v8 = *(void **)(v2 - 56);
LABEL_27:
          *(void *)(v2 - 48) = v6;
          operator delete(v8);
          goto LABEL_28;
        }
      }
      while (1)
      {
        if (*((char *)v10 - 1) < 0)
        {
          operator delete(*(v10 - 3));
          if (*((char *)v10 - 25) < 0) {
LABEL_18:
          }
            operator delete(*(v10 - 6));
        }
        else if (*((char *)v10 - 25) < 0)
        {
          goto LABEL_18;
        }
        v10 -= 6;
        if (v10 == v9)
        {
          uint64_t v11 = *(v7 - 3);
          goto LABEL_20;
        }
      }
    }
LABEL_28:
    if (*(char *)(v2 - 57) < 0) {
      operator delete(*(void **)(v2 - 80));
    }
    uint64_t v2 = *(void *)(a1 + 16);
  }
  while (v2 != a2);
}

uint64_t sub_9A656C(char **a1, uint64_t a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  uint64_t v5 = (v4 - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 4 > v6) {
    unint64_t v6 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v6;
  }
  if (v9)
  {
    if (v9 >> 59) {
      sub_188D718();
    }
    unint64_t v10 = operator new(32 * v9);
    uint64_t v11 = (uint64_t)&v10[32 * v5];
    uint64_t v17 = v11;
    uint64_t v18 = v11;
    uint64_t v19 = &v10[32 * v9];
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    {
LABEL_10:
      *(_OWORD *)uint64_t v11 = *(_OWORD *)a2;
      *(void *)(v11 + 16) = *(void *)(a2 + 16);
      v10[32 * v5 + 24] = *(unsigned char *)(a2 + 24);
      uint64_t v12 = v11 + 32;
      if (v4 == v3) {
        goto LABEL_16;
      }
      goto LABEL_14;
    }
  }
  else
  {
    unint64_t v10 = 0;
    uint64_t v11 = 32 * v5;
    uint64_t v17 = 32 * v5;
    uint64_t v18 = 32 * v5;
    uint64_t v19 = 0;
    if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
      goto LABEL_10;
    }
  }
  sub_4200((unsigned char *)v11, *(void **)a2, *(void *)(a2 + 8));
  unint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  uint64_t v11 = v17;
  v10[32 * v5 + 24] = *(unsigned char *)(a2 + 24);
  uint64_t v12 = v18 + 32;
  if (v4 == v3)
  {
LABEL_16:
    uint64_t v14 = v3;
    goto LABEL_17;
  }
  do
  {
LABEL_14:
    long long v13 = *((_OWORD *)v4 - 2);
    *(void *)(v11 - 16) = *((void *)v4 - 2);
    *(_OWORD *)(v11 - 32) = v13;
    *((void *)v4 - 3) = 0;
    *((void *)v4 - 2) = 0;
    *((void *)v4 - 4) = 0;
    *(unsigned char *)(v11 - 8) = *(v4 - 8);
    v11 -= 32;
    v4 -= 32;
  }
  while (v4 != v3);
  uint64_t v14 = *a1;
  unint64_t v3 = a1[1];
LABEL_17:
  *a1 = (char *)v11;
  a1[1] = (char *)v12;
  a1[2] = v19;
  if (v3 != v14)
  {
    long long v15 = (void **)(v3 - 32);
    do
    {
      if (*((char *)v15 + 23) < 0) {
        operator delete(*v15);
      }
      v15 -= 4;
    }
    while (v15 + 4 != (void **)v14);
    unint64_t v3 = v14;
  }
  if (v3) {
    operator delete(v3);
  }
  return v12;
}

void sub_9A6748(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3D695C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_9A675C(uint64_t a1, uint64_t a2)
{
  return a2;
}

void sub_9A6774()
{
  sub_94B370(v1, v0 - 80);
}

void sub_9A6790()
{
  unk_25DC38F = 16641;
  word_25DC378 = 65;
  byte_25DC3A7 = 1;
  byte_25DC391 = 0;
}

void sub_9A67B8(uint64_t *a1@<X0>, uint64_t **a2@<X1>, void *a3@<X8>)
{
  unint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 == v5)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return;
  }
  if ((char *)v5 - (char *)v4 == 32)
  {
    uint64_t v8 = *v4;
    uint64_t v9 = (*a2)[1];
    if (v9 - v8 == 104)
    {
      if (v8 == v9
        || (v11 = *(void *)(v8 + 8), uint64_t v10 = *(void *)(v8 + 16), v11 == v10)
        || *(_DWORD *)(v10 - 5704) != 4)
      {
        sub_9698EC(*a1, (uint64_t)v32);
        int v28 = -1;
        sub_4F57A0((uint64_t)v27, (uint64_t)v32);
        int v28 = 0;
        sub_9A7F90(&v29, (uint64_t)v27, 1uLL);
        sub_9A8158(__p, (uint64_t)&v29, 1uLL);
        sub_9A8548(a3, (uint64_t)__p, 1uLL);
        if (__p[0])
        {
          sub_965828((uint64_t)__p, (void **)__p[0]);
          operator delete(__p[0]);
        }
        uint64_t v19 = (char *)v29;
        if (!v29)
        {
LABEL_42:
          sub_9A7EB0(v28, (uint64_t)v27);
          if (v40 < 0)
          {
            operator delete(v39);
            if ((v38 & 0x80000000) == 0)
            {
LABEL_44:
              int v26 = v36;
              if (v36 != 1) {
                goto LABEL_45;
              }
              goto LABEL_50;
            }
          }
          else if ((v38 & 0x80000000) == 0)
          {
            goto LABEL_44;
          }
          operator delete(v37);
          int v26 = v36;
          if (v36 != 1)
          {
LABEL_45:
            if (!v26 && v35 < 0) {
              operator delete(v33);
            }
            return;
          }
LABEL_50:
          if (v33)
          {
            uint64_t v34 = v33;
            operator delete(v33);
          }
          return;
        }
        uint64_t v20 = v30;
        int64x2_t v21 = v29;
        if (v30 == v29)
        {
LABEL_41:
          unsigned int v30 = v19;
          operator delete(v21);
          goto LABEL_42;
        }
        while (1)
        {
          BOOL v22 = v20 - 168;
          int v23 = *((_DWORD *)v20 - 2);
          if (v23 == 1)
          {
            sub_4D4B58((uint64_t)(v20 - 168));
          }
          else if (!v23)
          {
            if (*(v20 - 65) < 0)
            {
              operator delete(*((void **)v20 - 11));
              if ((*(v20 - 97) & 0x80000000) == 0) {
                goto LABEL_32;
              }
            }
            else if ((*(v20 - 97) & 0x80000000) == 0)
            {
LABEL_32:
              int v24 = *((_DWORD *)v20 - 34);
              if (v24 == 1) {
                goto LABEL_38;
              }
LABEL_33:
              if (!v24 && *(v20 - 137) < 0) {
                operator delete(*((void **)v20 - 20));
              }
              goto LABEL_27;
            }
            operator delete(*((void **)v20 - 15));
            int v24 = *((_DWORD *)v20 - 34);
            if (v24 == 1)
            {
LABEL_38:
              uint64_t v25 = (void *)*((void *)v20 - 20);
              if (v25)
              {
                *((void *)v20 - 19) = v25;
                operator delete(v25);
              }
              goto LABEL_27;
            }
            goto LABEL_33;
          }
LABEL_27:
          v20 -= 168;
          if (v22 == v19)
          {
            int64x2_t v21 = v29;
            goto LABEL_41;
          }
        }
      }
    }
  }
  uint64_t v12 = 0;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  do
  {
    long long v13 = &(*a2)[4 * v12];
    sub_9A6C3C(a1, v13, (uint64_t)a3);
    uint64_t v14 = *v13;
    uint64_t v15 = v13[1];
    if (*v13 == v15) {
      goto LABEL_52;
    }
    uint64_t v16 = v15 - v14;
    if (v15 - v14 == 104)
    {
      unint64_t v17 = 0;
    }
    else
    {
      uint64_t v18 = 0;
      while (*(_DWORD *)(v14 + v18))
      {
        v18 += 104;
        if (v14 + v18 == v15)
        {
          uint64_t v18 = v15 - v14;
          break;
        }
      }
      unint64_t v17 = 0x4EC4EC4EC4EC4EC5 * (v18 >> 3);
    }
    if (0x4EC4EC4EC4EC4EC5 * (v16 >> 3) <= v17) {
LABEL_52:
    }
      sub_66748();
    uint64_t v12 = *(void *)(v14 + 104 * v17 + 56);
  }
  while (v12 != -1);
}

void sub_9A6AD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_9A6B40(_Unwind_Exception *a1)
{
  sub_964CD4(v1);
  _Unwind_Resume(a1);
}

void sub_9A6B54(_Unwind_Exception *a1)
{
  sub_964CD4(v1);
  _Unwind_Resume(a1);
}

void ***sub_9A6B68(void ***a1)
{
  if (*a1)
  {
    sub_965828((uint64_t)a1, *a1);
    operator delete(*a1);
  }
  return a1;
}

uint64_t sub_9A6BA4(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (*(void *)a1)
  {
    for (uint64_t i = *(void *)(a1 + 8); (void *)i != v2; sub_9A7EB0(v4, i))
    {
      int v4 = *(_DWORD *)(i - 8);
      i -= 168;
    }
    *(void *)(a1 + 8) = v2;
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_9A6C08(uint64_t a1)
{
  return a1;
}

void sub_9A6C3C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 == v5) {
    goto LABEL_72;
  }
  uint64_t v8 = v5 - v4;
  if (v5 - v4 == 104)
  {
    unint64_t v9 = 0;
  }
  else
  {
    uint64_t v10 = 0;
    while (*(_DWORD *)(v4 + v10))
    {
      v10 += 104;
      if (v4 + v10 == v5)
      {
        uint64_t v10 = v5 - v4;
        break;
      }
    }
    unint64_t v9 = 0x4EC4EC4EC4EC4EC5 * (v10 >> 3);
  }
  if (0x4EC4EC4EC4EC4EC5 * (v8 >> 3) <= v9) {
LABEL_72:
  }
    sub_66748();
  unint64_t v11 = v4 + 104 * v9;
  uint64_t v12 = *(_DWORD **)(v11 + 8);
  long long v13 = *(_DWORD **)(v11 + 16);
  if (v12 != v13)
  {
    while ((*v12 - 1) >= 2)
    {
      v12 += 1426;
      if (v12 == v13) {
        goto LABEL_71;
      }
    }
  }
  if (v12 != v13 && *v12 == 1)
  {
    int v14 = v12[1436] - v12[10];
    if (v14 >= 60)
    {
      sub_9698EC(*a1, (uint64_t)&v73);
      sub_5F3D48((uint64_t)&v36, (uint64_t)&dword_25DC468);
      sub_5F657C((uint64_t *)&v36, (uint64_t)&dword_25DC468, 10 * v14);
      int v68 = -1;
      sub_4F57A0((uint64_t)v67, (uint64_t)&v73);
      int v68 = 0;
      sub_9A7F90(&v69, (uint64_t)v67, 1uLL);
      long long v51 = v36;
      long long v36 = 0uLL;
      long long v53 = v38;
      uint64_t v52 = v37;
      uint64_t v54 = v39;
      uint64_t v37 = 0;
      long long v38 = 0uLL;
      uint64_t v39 = 0;
      long long v55 = v40;
      long long v40 = 0uLL;
      long long v57 = v42;
      uint64_t v56 = v41;
      uint64_t v58 = v43;
      uint64_t v59 = v44;
      uint64_t v41 = 0;
      long long v42 = 0uLL;
      uint64_t v43 = 0;
      char v61 = v46;
      int v60 = v45;
      uint64_t v63 = v48;
      long long v62 = v47;
      uint64_t v44 = 0;
      long long v47 = 0uLL;
      uint64_t v65 = v50;
      long long v64 = v49;
      uint64_t v50 = 0;
      uint64_t v48 = 0;
      long long v49 = 0uLL;
      int v66 = 1;
      sub_9A7F90(&v71, (uint64_t)&v51, 1uLL);
      sub_9A8158(__p, (uint64_t)&v69, 2uLL);
      uint64_t v15 = *(void **)(a3 + 8);
      if ((unint64_t)v15 >= *(void *)(a3 + 16))
      {
        uint64_t v16 = sub_9A885C((void ****)a3, (uint64_t)__p);
        unint64_t v17 = (void **)__p[0];
        *(void *)(a3 + 8) = v16;
        if (v17)
        {
          sub_965828((uint64_t)__p, v17);
          operator delete(__p[0]);
        }
      }
      else
      {
        *uint64_t v15 = 0;
        v15[1] = 0;
        v15[2] = 0;
        *(_OWORD *)uint64_t v15 = *(_OWORD *)__p;
        v15[2] = v35;
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v35 = 0;
        *(void *)(a3 + 8) = v15 + 3;
      }
      uint64_t v18 = v71;
      if (!v71) {
        goto LABEL_40;
      }
      uint64_t v19 = v72;
      uint64_t v20 = v71;
      if (v72 == v71)
      {
LABEL_39:
        long long v72 = v18;
        operator delete(v20);
LABEL_40:
        uint64_t v25 = v69;
        if (!v69) {
          goto LABEL_60;
        }
        int v26 = v69;
        if (v70 == v69) {
          goto LABEL_59;
        }
        uint64_t v27 = v70 - 65;
        while (1)
        {
          int v28 = v27 - 103;
          int v29 = *(_DWORD *)(v27 + 57);
          if (v29)
          {
            if (v29 == 1) {
              sub_4D4B58((uint64_t)(v27 - 103));
            }
            goto LABEL_44;
          }
          if (*v27 < 0)
          {
            operator delete(*(void **)(v27 - 23));
            if ((*(v27 - 32) & 0x80000000) == 0)
            {
LABEL_50:
              int v30 = *(_DWORD *)(v27 - 71);
              if (v30) {
                goto LABEL_51;
              }
              goto LABEL_56;
            }
          }
          else if ((*(v27 - 32) & 0x80000000) == 0)
          {
            goto LABEL_50;
          }
          operator delete(*(void **)(v27 - 55));
          int v30 = *(_DWORD *)(v27 - 71);
          if (v30)
          {
LABEL_51:
            if (v30 != 1) {
              goto LABEL_44;
            }
            long long v31 = *(void **)(v27 - 95);
            if (!v31) {
              goto LABEL_44;
            }
            *(void *)(v27 - 87) = v31;
            goto LABEL_43;
          }
LABEL_56:
          if ((*(v27 - 72) & 0x80000000) == 0) {
            goto LABEL_44;
          }
          long long v31 = *(void **)(v27 - 95);
LABEL_43:
          operator delete(v31);
LABEL_44:
          v27 -= 168;
          if (v28 == v25)
          {
            int v26 = v69;
LABEL_59:
            long long v70 = v25;
            operator delete(v26);
LABEL_60:
            sub_9A7EB0(v66, (uint64_t)&v51);
            sub_9A7EB0(v68, (uint64_t)v67);
            sub_4D4B58((uint64_t)&v36);
            if (v81 < 0)
            {
              operator delete(v80);
              if (v79 < 0) {
                goto LABEL_67;
              }
LABEL_62:
              int v32 = v77;
              if (v77 != 1) {
                goto LABEL_63;
              }
LABEL_68:
              unint64_t v33 = v74;
              if (v74)
              {
                uint64_t v75 = v74;
LABEL_70:
                operator delete(v33);
              }
            }
            else
            {
              if ((v79 & 0x80000000) == 0) {
                goto LABEL_62;
              }
LABEL_67:
              operator delete(v78);
              int v32 = v77;
              if (v77 == 1) {
                goto LABEL_68;
              }
LABEL_63:
              if (!v32 && v76 < 0)
              {
                unint64_t v33 = v74;
                goto LABEL_70;
              }
            }
            goto LABEL_71;
          }
        }
      }
      while (1)
      {
        int64x2_t v21 = v19 - 168;
        int v22 = *((_DWORD *)v19 - 2);
        if (v22 == 1)
        {
          sub_4D4B58((uint64_t)(v19 - 168));
        }
        else if (!v22)
        {
          if (*(v19 - 65) < 0)
          {
            operator delete(*((void **)v19 - 11));
            if ((*(v19 - 97) & 0x80000000) == 0) {
              goto LABEL_30;
            }
          }
          else if ((*(v19 - 97) & 0x80000000) == 0)
          {
LABEL_30:
            int v23 = *((_DWORD *)v19 - 34);
            if (v23 == 1) {
              goto LABEL_36;
            }
LABEL_31:
            if (!v23 && *(v19 - 137) < 0) {
              operator delete(*((void **)v19 - 20));
            }
            goto LABEL_25;
          }
          operator delete(*((void **)v19 - 15));
          int v23 = *((_DWORD *)v19 - 34);
          if (v23 == 1)
          {
LABEL_36:
            int v24 = (void *)*((void *)v19 - 20);
            if (v24)
            {
              *((void *)v19 - 19) = v24;
              operator delete(v24);
            }
            goto LABEL_25;
          }
          goto LABEL_31;
        }
LABEL_25:
        v19 -= 168;
        if (v21 == v18)
        {
          uint64_t v20 = v71;
          goto LABEL_39;
        }
      }
    }
  }
LABEL_71:
  sub_9A7208((uint64_t **)a1, a2, a3);
}

void sub_9A7128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  sub_9A6B68(&a9);
  sub_9A6BA4(v55);
  sub_9A6BA4(v56 - 232);
  sub_9A6C08((uint64_t)&a33);
  sub_9A6C08((uint64_t)&a55);
  sub_4D4B58((uint64_t)&a13);
  sub_4D9814(v56 - 184);
  _Unwind_Resume(a1);
}

void sub_9A71E8(_Unwind_Exception *a1)
{
  sub_4D9814(v1 - 184);
  _Unwind_Resume(a1);
}

void sub_9A7208(uint64_t **a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  if (*a2 == a2[1]) {
    return;
  }
  uint64_t v5 = *(void *)(v3 + 8);
  uint64_t v4 = *(void *)(v3 + 16);
  if (v5 == v4 || *(_DWORD *)(v4 - 5704) != 4) {
    return;
  }
  unint64_t v9 = (char *)operator new(0x30uLL);
  char v91 = v9 + 48;
  BOOL v92 = v9 + 48;
  *(_OWORD *)unint64_t v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  *((_OWORD *)v9 + 2) = 0u;
  uint64_t v89 = 0;
  BOOL v90 = v9;
  unint64_t v87 = 0;
  unint64_t v88 = 0;
  sub_9A7A64(a2, (uint64_t *)&v85);
  uint64_t v10 = v86 - (unsigned char *)v85;
  if (v86 == v85)
  {
    int v68 = 0;
    goto LABEL_98;
  }
  uint64_t v79 = v86 - (unsigned char *)v85;
  uint64_t v80 = 0;
  uint64_t v82 = 0;
  uint64_t v83 = 0;
  uint64_t v84 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = v10 >> 4;
  uint64_t v77 = a3;
  uint64_t v78 = v10 >> 4;
  while (2)
  {
    long long v13 = v85;
    unint64_t v14 = *((void *)v85 + 2 * v11);
    int v15 = sub_9A7D80((uint64_t)a1, v14);
    int v16 = v15;
    if (!v11)
    {
      int v17 = BYTE1(v15);
      uint64_t v18 = *a1;
      if (BYTE1(v16))
      {
        uint64_t v19 = sub_9697E8(v18, v14, v17);
        uint64_t v20 = (uint64_t *)v90;
        int v102 = -1;
        sub_4F57A0((uint64_t)v93, (uint64_t)v19);
        int v102 = 0;
        unint64_t v21 = v20[1];
        if (v21 >= v20[2])
        {
          uint64_t v26 = sub_9A8A2C(v20, (uint64_t)v93);
        }
        else
        {
          *(_DWORD *)(v21 + 160) = 0;
          if (v102 == 1)
          {
            unint64_t v21 = sub_4F58AC(v21, (uint64_t)v93);
          }
          else if (!v102)
          {
            unint64_t v21 = sub_4F57A0(v21, (uint64_t)v93);
          }
          uint64_t v26 = v21 + 168;
        }
        v20[1] = v26;
        sub_9A7EB0(v102, (uint64_t)v93);
        uint64_t v84 = 1;
      }
      else
      {
        unint64_t v22 = v14;
        int v23 = sub_9697E8(v18, v14, BYTE2(v16));
        int v24 = (uint64_t *)v90;
        int v102 = -1;
        sub_4F57A0((uint64_t)v93, (uint64_t)v23);
        int v102 = 0;
        unint64_t v25 = v24[4];
        if (v25 >= v24[5])
        {
          uint64_t v27 = sub_9A8A2C(v24 + 3, (uint64_t)v93);
        }
        else
        {
          *(_DWORD *)(v25 + 160) = 0;
          if (v102 == 1)
          {
            unint64_t v25 = sub_4F58AC(v25, (uint64_t)v93);
          }
          else if (!v102)
          {
            unint64_t v25 = sub_4F57A0(v25, (uint64_t)v93);
          }
          uint64_t v27 = v25 + 168;
        }
        void v24[4] = v27;
        sub_9A7EB0(v102, (uint64_t)v93);
        unint64_t v14 = v22;
      }
    }
    unint64_t v81 = v14;
    int v28 = sub_9697E8(*a1, v14, v16);
    int v29 = v90;
    int v30 = (uint64_t *)((char *)v90 + 24 * v84);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    if (*v30 == v31)
    {
      if (v13[16 * v11 + 8]) {
        goto LABEL_44;
      }
      goto LABEL_69;
    }
    do
    {
      if (*(_DWORD *)(v32 + 160)) {
        goto LABEL_30;
      }
      sub_4F57A0((uint64_t)v93, v32);
      char v33 = sub_4F3B98((uint64_t)v93, (uint64_t)v28);
      if (v101 < 0)
      {
        operator delete(v100);
        if ((v99 & 0x80000000) == 0)
        {
LABEL_34:
          int v34 = v97;
          if (v97 != 1) {
            goto LABEL_35;
          }
          goto LABEL_40;
        }
      }
      else if ((v99 & 0x80000000) == 0)
      {
        goto LABEL_34;
      }
      operator delete(v98);
      int v34 = v97;
      if (v97 != 1)
      {
LABEL_35:
        if (!v34 && v96 < 0)
        {
          uint64_t v35 = __p;
LABEL_28:
          operator delete(v35);
          goto LABEL_29;
        }
        goto LABEL_29;
      }
LABEL_40:
      uint64_t v35 = __p;
      if (__p)
      {
        BOOL v95 = __p;
        goto LABEL_28;
      }
LABEL_29:
      if (v33) {
        goto LABEL_43;
      }
LABEL_30:
      v32 += 168;
    }
    while (v32 != v31);
    uint64_t v32 = v31;
LABEL_43:
    int v29 = v90;
    if (!v13[16 * v11 + 8]) {
      goto LABEL_69;
    }
LABEL_44:
    unint64_t v36 = 0xCF3CF3CF3CF3CF3DLL * ((v32 - v29[3 * v84]) >> 3);
    if (v83 < v82)
    {
      *(void *)uint64_t v83 = v36;
      uint64_t v37 = (uint64_t)(v83 + 8);
      goto LABEL_68;
    }
    long long v38 = a1;
    int64_t v39 = v83 - v80;
    uint64_t v40 = (v83 - v80) >> 3;
    unint64_t v41 = v40 + 1;
    if ((unint64_t)(v40 + 1) >> 61) {
      sub_2E00();
    }
    if ((v82 - v80) >> 2 > v41) {
      unint64_t v41 = (v82 - v80) >> 2;
    }
    if ((unint64_t)(v82 - v80) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v42 = v41;
    }
    if (!v42)
    {
      uint64_t v44 = 0;
      int v45 = v80;
      char v46 = v83;
      long long v47 = (unint64_t *)(8 * v40);
      *(void *)(8 * v40) = v36;
      uint64_t v37 = 8 * v40 + 8;
      if (v83 != v80) {
        goto LABEL_55;
      }
      goto LABEL_58;
    }
    if (v42 >> 61) {
      sub_188D718();
    }
    unint64_t v43 = v42;
    uint64_t v44 = (char *)operator new(8 * v42);
    int v45 = v80;
    char v46 = v83;
    unint64_t v42 = v43;
    long long v47 = (unint64_t *)&v44[8 * v40];
    unint64_t *v47 = v36;
    uint64_t v37 = (uint64_t)(v47 + 1);
    if (v83 == v80)
    {
LABEL_58:
      a1 = v38;
      uint64_t v12 = v78;
      uint64_t v10 = v79;
      goto LABEL_65;
    }
LABEL_55:
    uint64_t v48 = v46 - 8;
    long long v49 = v46;
    unint64_t v50 = v46 - 8 - v45;
    if (v50 < 0x168)
    {
      long long v51 = v49;
      goto LABEL_63;
    }
    if (&v44[v39 - 8 - (v50 & 0xFFFFFFFFFFFFFFF8)] <= &v44[v39 - 8]
      && &v48[-(v50 & 0xFFFFFFFFFFFFFFF8)] <= v48
      && (unint64_t)(v48 - &v44[v39] + 8) >= 0x20)
    {
      uint64_t v61 = (v50 >> 3) + 1;
      uint64_t v62 = 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
      long long v51 = &v83[-v62];
      long long v47 = (unint64_t *)((char *)v47 - v62);
      uint64_t v63 = &v44[8 * v40 - 16];
      long long v64 = v83 - 16;
      uint64_t v65 = v61 & 0x3FFFFFFFFFFFFFFCLL;
      a1 = v38;
      do
      {
        long long v66 = *(_OWORD *)v64;
        *((_OWORD *)v63 - 1) = *((_OWORD *)v64 - 1);
        *(_OWORD *)uint64_t v63 = v66;
        v63 -= 32;
        v64 -= 32;
        v65 -= 4;
      }
      while (v65);
      uint64_t v12 = v78;
      uint64_t v10 = v79;
      int v45 = v80;
      if (v61 != (v61 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_64;
      }
    }
    else
    {
      long long v51 = v83;
LABEL_63:
      a1 = v38;
      uint64_t v12 = v78;
      uint64_t v10 = v79;
      int v45 = v80;
      do
      {
LABEL_64:
        unint64_t v52 = *((void *)v51 - 1);
        v51 -= 8;
        *--long long v47 = v52;
      }
      while (v51 != v45);
    }
LABEL_65:
    unint64_t v87 = v47;
    unint64_t v88 = (unint64_t *)v37;
    uint64_t v82 = &v44[8 * v42];
    uint64_t v89 = v82;
    if (v45)
    {
      operator delete(v45);
      int v29 = v90;
    }
    uint64_t v80 = (char *)v47;
LABEL_68:
    unint64_t v88 = (unint64_t *)v37;
    uint64_t v83 = (char *)v37;
LABEL_69:
    long long v53 = (char *)&v29[3 * v84];
    uint64_t v55 = *((void *)v53 + 1);
    uint64_t v54 = (uint64_t *)(v53 + 8);
    if (v32 == v55)
    {
      int v102 = -1;
      sub_4F57A0((uint64_t)v93, (uint64_t)v28);
      int v102 = 0;
      uint64_t v56 = *v54;
      if ((unint64_t)*v54 >= v29[3 * v84 + 2])
      {
        uint64_t v57 = sub_9A8A2C(&v29[3 * v84], (uint64_t)v93);
      }
      else
      {
        *(_DWORD *)(v56 + 160) = 0;
        if (v102 == 1)
        {
          uint64_t v56 = sub_4F58AC(v56, (uint64_t)v93);
        }
        else if (!v102)
        {
          uint64_t v56 = sub_4F57A0(v56, (uint64_t)v93);
        }
        uint64_t v57 = v56 + 168;
      }
      uint64_t *v54 = v57;
      sub_9A7EB0(v102, (uint64_t)v93);
    }
    if (v10 == 16)
    {
      uint64_t v58 = *((void *)v90 + 3 * v84);
      if (*(unsigned char *)(v58 + 72) == 3 && *(_DWORD *)(v58 + 32) == 1)
      {
        int v60 = sub_9697E8(*a1, v81, 1);
        if (!*((_DWORD *)v60 + 8) && *(_DWORD *)v60 != -1)
        {
          *(void *)(v58 + 40) = *(void *)v60;
          std::string::operator=((std::string *)(v58 + 48), (const std::string *)((char *)v60 + 8));
        }
      }
    }
    if (++v11 != v12) {
      continue;
    }
    break;
  }
  int v68 = v87;
  uint64_t v67 = v88;
  if (v87 == v88)
  {
    a3 = v77;
    uint64_t v74 = *(void **)(v77 + 8);
    if ((unint64_t)v74 < *(void *)(v77 + 16)) {
      goto LABEL_99;
    }
  }
  else
  {
    uint64_t v69 = (uint64_t *)((char *)v90 + 24 * v84);
    uint64_t v70 = *v69;
    unint64_t v71 = 0xCF3CF3CF3CF3CF3DLL * ((v69[1] - *v69) >> 3);
    long long v72 = v87;
    a3 = v77;
    do
    {
      unint64_t v73 = *v72;
      if (v71 <= *v72) {
        sub_66748();
      }
      if (*(_DWORD *)(v70 + 168 * v73 + 160))
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_23FDF58;
      }
      *(unsigned char *)(v70 + 168 * v73 + 104) = 1;
      ++v72;
    }
    while (v72 != v67);
LABEL_98:
    uint64_t v74 = *(void **)(a3 + 8);
    if ((unint64_t)v74 < *(void *)(a3 + 16))
    {
LABEL_99:
      *uint64_t v74 = 0;
      v74[1] = 0;
      v74[2] = 0;
      sub_9A8714((uint64_t)v74, (uint64_t)v90, (uint64_t)v91, 0xAAAAAAAAAAAAAAABLL * ((v91 - (unsigned char *)v90) >> 3));
      uint64_t v75 = (char *)(v74 + 3);
      *(void *)(a3 + 8) = v74 + 3;
      goto LABEL_102;
    }
  }
  uint64_t v75 = sub_9A8BD4((void ****)a3, (uint64_t *)&v90);
LABEL_102:
  *(void *)(a3 + 8) = v75;
  if (v85)
  {
    unsigned int v86 = v85;
    operator delete(v85);
  }
  if (v68)
  {
    unint64_t v88 = v68;
    operator delete(v68);
  }
  if (v90)
  {
    sub_965828((uint64_t)&v90, (void **)v90);
    operator delete(v90);
  }
}