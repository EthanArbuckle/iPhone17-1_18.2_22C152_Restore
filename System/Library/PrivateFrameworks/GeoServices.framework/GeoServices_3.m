void sub_188FD8304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23)
{
  uint64_t v23;
  pthread_rwlock_t *v24;
  uint64_t v25;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  uint64_t v28;

  geo::read_write_lock::~read_write_lock(v24);
  MEMORY[0x18C11F580](v23, 0x10F1C40DA10AB66);
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v28 = *(void *)(v25 - 136) + 1912;
  *(void *)(v25 - 120) = "ChapterVenues";
  *(void *)(v25 - 112) = v25 - 120;
  *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v28, (uint64_t *)(v25 - 120), (uint64_t)&std::piecewise_construct, (uint64_t **)(v25 - 112))+ 4) = (double)((rep - a19) / 1000) * 0.001;
  if (a23)
  {
    if (!atomic_fetch_add(&a23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a23->__on_zero_shared)(a23);
      std::__shared_weak_count::__release_weak(a23);
    }
  }
  _Unwind_Resume(a1);
}

void **geo::codec::VectorTile::buildingTileIntersectionInfo(void **this, double a2, double a3, float32x4_t a4, double a5, float32x4_t a6, float32x4_t a7, float32x4_t a8)
{
  v9 = geo::codec::VectorTile::_tileBoundsForBuildings((geo::codec::VectorTile *)this, a2, a3, a4, a5, a6, a7, a8);
  if (-13107 * (unsigned __int16)((*((_DWORD *)this + 582) - *((_DWORD *)this + 580)) >> 3))
  {
    v10 = this[307];
    if (v10 == this[308])
    {
      v12 = v9;
      uint64_t v13 = v9[1] - *v9;
      if (v13)
      {
        size_t v14 = v13 >> 4;
        unint64_t v15 = (unsigned char *)this[309] - v10;
        if (v15 >= v13 >> 4)
        {
          bzero(this[307], v13 >> 4);
          this[308] = &v10[v14];
        }
        else
        {
          if (v13 < 0) {
            std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v16 = 2 * v15;
          if (2 * v15 <= v14) {
            uint64_t v16 = v14;
          }
          if (v15 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v17 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v17 = v16;
          }
          v18 = (char *)operator new(v17);
          bzero(v18, v14);
          this[307] = v18;
          this[308] = &v18[v14];
          this[309] = &v18[v17];
          if (v10) {
            operator delete(v10);
          }
        }
      }
      uint64_t v19 = v12[1];
      uint64_t v20 = v19 - *v12;
      if (v19 != *v12)
      {
        uint64_t v21 = 0;
        unint64_t v22 = v20 >> 4;
        v23 = (uint64_t *)((char *)this[290] + 16);
        v24 = (float *)(*v12 + 8);
        do
        {
          uint64_t v26 = *v23;
          v23 += 5;
          uint64_t v25 = v26;
          if (v26 == 0x1102AA1513BA17CALL || v25 == 0x110205D497D8D032)
          {
            float v28 = *v24;
            float v29 = 1.0 - v24[1];
            BOOL v30 = v29 >= 0.0;
            float v32 = *(v24 - 2);
            float v31 = *(v24 - 1);
            BOOL v33 = v32 >= 0.0;
            if (v32 < 0.0 && v29 < 0.0) {
              *((unsigned char *)this[307] + v21) = 1;
            }
            float v34 = 1.0 - v31;
            BOOL v35 = v29 < 0.0 || v32 >= 0.0;
            if (!v35 && v34 < 1.0) {
              *((unsigned char *)this[307] + v21) = 2;
            }
            BOOL v36 = v34 < 1.0;
            if (v34 < 1.0) {
              BOOL v33 = 1;
            }
            if (!v33) {
              *((unsigned char *)this[307] + v21) = 3;
            }
            BOOL v37 = v32 < 0.0 || v34 < 1.0;
            if (!v37 && v28 < 1.0) {
              *((unsigned char *)this[307] + v21) = 4;
            }
            if (v28 < 1.0) {
              BOOL v36 = 1;
            }
            if (!v36) {
              *((unsigned char *)this[307] + v21) = 5;
            }
            BOOL v38 = v29 < 0.0 || v28 < 1.0;
            if (!v38 && v34 < 1.0) {
              *((unsigned char *)this[307] + v21) = 6;
            }
            if (v28 >= 1.0 && v29 < 0.0) {
              *((unsigned char *)this[307] + v21) = 7;
            }
            if (v28 >= 1.0) {
              BOOL v30 = 1;
            }
            if (v32 >= 0.0 && !v30) {
              *((unsigned char *)this[307] + v21) = 8;
            }
            if (v32 >= 0.0 && v28 < 1.0 && v29 >= 0.0 && v34 < 1.0) {
              *((unsigned char *)this[307] + v21) = 0;
            }
          }
          ++v21;
          v24 += 4;
        }
        while (v22 > (unsigned __int16)v21);
      }
    }
  }
  return this + 307;
}

void *geo::codec::VectorTile::_tileBoundsForBuildings(geo::codec::VectorTile *this, double a2, double a3, float32x4_t a4, double a5, float32x4_t a6, float32x4_t a7, float32x4_t a8)
{
  v8 = (void *)((char *)this + 2424);
  uint64_t v9 = *((void *)this + 303);
  if (v9 == *((void *)this + 304))
  {
    uint64_t v63 = *((void *)this + 289);
    uint64_t v12 = *((void *)this + 282);
    uint64_t v13 = *((void *)this + 287);
    unint64_t v14 = (unsigned __int16)(-13107 * ((*((_DWORD *)this + 582) - *((_DWORD *)this + 580)) >> 3));
    if (v14 > (*((void *)this + 305) - v9) >> 4)
    {
      uint64_t v15 = 16 * v14;
      uint64_t v16 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**((void **)this + 306) + 16))(*((void *)this + 306), 16 * v14, 4);
      uint64_t v17 = *((void *)this + 304);
      uint64_t v18 = *((void *)this + 303);
      uint64_t v19 = v16;
      if (v17 != v18)
      {
        do
        {
          *(_OWORD *)(v19 - 16) = *(_OWORD *)(v17 - 16);
          v19 -= 16;
          v17 -= 16;
        }
        while (v17 != v18);
        uint64_t v17 = *v8;
      }
      *((void *)this + 303) = v19;
      *((void *)this + 304) = v16;
      uint64_t v20 = *((void *)this + 305);
      *((void *)this + 305) = v16 + v15;
      if (v17) {
        (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 306) + 40))(*((void *)this + 306), v17, v20 - v17);
      }
    }
    uint64_t v21 = *((void *)this + 290);
    if (-13107 * (unsigned __int16)((*((_DWORD *)this + 582) - v21) >> 3))
    {
      for (unint64_t i = 0; i < (unsigned __int16)(-13107 * ((*((_DWORD *)this + 582) - v21) >> 3)); ++i)
      {
        uint64_t v24 = v21 + 40 * i;
        uint64_t v25 = *(unsigned __int16 *)(v24 + 34);
        if (*(_WORD *)(v24 + 34))
        {
          uint64_t v26 = 0;
          uint64_t v27 = v63 + 20 * *(unsigned __int16 *)(v24 + 32);
          a4.i32[0] = 2139095039;
          a6.i32[0] = -8388609;
          a8.i32[0] = -8388609;
          a7.i32[0] = 2139095039;
          do
          {
            float v28 = (unsigned int *)(v13 + 8 * *(unsigned int *)(v27 + 20 * v26 + 12));
            uint64_t v29 = *((unsigned __int16 *)v28 + 2);
            if (*((_WORD *)v28 + 2))
            {
              unsigned int v30 = *v28;
              if (v29 >= 9)
              {
                float v32 = (const float *)(v12 + 12 * v30);
                uint64_t v33 = v29 & 7;
                if ((v29 & 7) == 0) {
                  uint64_t v33 = 8;
                }
                float32x4_t v34 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a4.f32, 0);
                uint64_t v31 = v29 - v33;
                float32x4_t v35 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a7.f32, 0);
                float32x4_t v36 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a8.f32, 0);
                uint64_t v37 = v31;
                float32x4_t v38 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a6.f32, 0);
                float32x4_t v39 = v34;
                a7 = v35;
                a8 = v36;
                float32x4_t v40 = v38;
                do
                {
                  v41 = v32;
                  v32 += 24;
                  float32x4x3_t v64 = vld3q_f32(v41);
                  v41 += 12;
                  float32x4_t v35 = vminnmq_f32(v64.val[0], v35);
                  float32x4x3_t v65 = vld3q_f32(v41);
                  a7 = vminnmq_f32(v65.val[0], a7);
                  float32x4_t v36 = vmaxnmq_f32(v36, v64.val[0]);
                  a8 = vmaxnmq_f32(a8, v65.val[0]);
                  float32x4_t v34 = vminnmq_f32(v64.val[1], v34);
                  float32x4_t v39 = vminnmq_f32(v65.val[1], v39);
                  float32x4_t v38 = vmaxnmq_f32(v38, v64.val[1]);
                  float32x4_t v40 = vmaxnmq_f32(v40, v65.val[1]);
                  v37 -= 8;
                }
                while (v37);
                a6 = vmaxnmq_f32(v38, v40);
                a6.f32[0] = vmaxnmvq_f32(a6);
                a4 = vmaxnmq_f32(v36, a8);
                a8.f32[0] = vmaxnmvq_f32(a4);
                a7.f32[0] = vminnmvq_f32(vminnmq_f32(v35, a7));
                a4.f32[0] = vminnmvq_f32(vminnmq_f32(v34, v39));
              }
              else
              {
                uint64_t v31 = 0;
              }
              uint64_t v42 = v29 - v31;
              v43 = (float *)(v12 + 4 + 12 * v31 + 12 * v30);
              do
              {
                float v44 = *(v43 - 1);
                a7.f32[0] = fminf(v44, a7.f32[0]);
                a8.f32[0] = fmaxf(a8.f32[0], v44);
                a4.f32[0] = fminf(*v43, a4.f32[0]);
                a6.f32[0] = fmaxf(a6.f32[0], *v43);
                v43 += 3;
                --v42;
              }
              while (v42);
            }
            ++v26;
          }
          while (v26 != v25);
        }
        else
        {
          a4.i32[0] = 2139095039;
          a6.i32[0] = -8388609;
          a8.i32[0] = -8388609;
          a7.i32[0] = 2139095039;
        }
        v45 = (_DWORD *)*((void *)this + 304);
        unint64_t v46 = *((void *)this + 305);
        if ((unint64_t)v45 < v46)
        {
          if (v45)
          {
            _DWORD *v45 = a7.i32[0];
            v45[1] = a4.i32[0];
            v45[2] = a8.i32[0];
            v45[3] = a6.i32[0];
          }
          v23 = v45 + 4;
          goto LABEL_12;
        }
        v47 = v8;
        uint64_t v48 = *v8;
        uint64_t v49 = ((uint64_t)v45 - *v8) >> 4;
        unint64_t v50 = v49 + 1;
        if ((unint64_t)(v49 + 1) >> 60) {
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v51 = v46 - v48;
        if (v51 >> 3 > v50) {
          unint64_t v50 = v51 >> 3;
        }
        if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v50 = 0xFFFFFFFFFFFFFFFLL;
        }
        if (v50)
        {
          unsigned __int32 v59 = a7.i32[0];
          unint64_t v60 = a8.i64[0];
          unsigned __int32 v61 = a4.i32[0];
          unsigned __int32 v62 = a6.i32[0];
          uint64_t v52 = 16 * v50;
          uint64_t v53 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**((void **)this + 306) + 16))(*((void *)this + 306), 16 * v50, 4);
          v54 = (unsigned __int32 *)(v53 + 16 * v49);
          unint64_t v50 = v53 + v52;
          if (v53)
          {
            a4.i32[1] = HIDWORD(v60);
            unsigned __int32 *v54 = v59;
            v54[1] = v61;
            v54[2] = v60;
            v54[3] = v62;
          }
          v8 = v47;
          uint64_t v55 = *((void *)this + 304);
          uint64_t v56 = *((void *)this + 303);
          v57 = v54;
          if (v55 == v56)
          {
LABEL_40:
            v23 = v54 + 4;
            *((void *)this + 303) = v57;
            *((void *)this + 304) = v54 + 4;
            uint64_t v58 = *((void *)this + 305);
            *((void *)this + 305) = v50;
            if (!v55) {
              goto LABEL_12;
            }
            goto LABEL_41;
          }
        }
        else
        {
          v54 = (unsigned __int32 *)(16 * v49);
          v8 = v47;
          uint64_t v55 = *((void *)this + 304);
          uint64_t v56 = *((void *)this + 303);
          v57 = v54;
          if (v55 == v56) {
            goto LABEL_40;
          }
        }
        do
        {
          *((_OWORD *)v57 - 1) = *(_OWORD *)(v55 - 16);
          v57 -= 4;
          v55 -= 16;
        }
        while (v55 != v56);
        uint64_t v55 = *v8;
        v23 = v54 + 4;
        *((void *)this + 303) = v57;
        *((void *)this + 304) = v54 + 4;
        uint64_t v58 = *((void *)this + 305);
        *((void *)this + 305) = v50;
        if (!v55) {
          goto LABEL_12;
        }
LABEL_41:
        (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 306) + 40))(*((void *)this + 306), v55, v58 - v55);
LABEL_12:
        *((void *)this + 304) = v23;
        uint64_t v21 = *((void *)this + 290);
      }
    }
  }
  return v8;
}

uint64_t mgcl::ints::IntDecompressor<BOOL>::decompress(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, char a4, char a5, size_t a6, int8x16_t *a7)
{
  uint64_t v358 = *MEMORY[0x1E4F143B8];
  if (!a6) {
    return 0;
  }
  v7 = a7;
  bzero(a7, a6);
  size_t v12 = *a2;
  if ((v12 - 66) < 0xFFFFFFBF) {
    return 3;
  }
  if (v12 <= 0x40) {
    size_t v14 = 65 - v12;
  }
  else {
    size_t v14 = 0;
  }
  bzero(&__dst[v12], v14);
  size_t v15 = a6;
  memcpy(__dst, a2 + 1, v12);
  uint64_t v16 = 0;
  size_t v17 = v12 + 1;
  unint64_t __sz = 8 * a6;
  v331 = &v7->i8[a6];
  uint64_t v340 = a3 - 1;
  uint64_t v341 = 8 * a3 - 24;
  unint64_t v336 = 4 * a6;
  uint64_t v337 = 25 - 8 * a3;
  v344 = v7;
  v345 = a1;
  v347 = a2;
  size_t v342 = v12;
  while (2)
  {
    unsigned int v19 = __dst[v16];
    int v20 = a2[v17];
    size_t v21 = v17 + 1;
    uint64_t v346 = v16;
    unint64_t v22 = 0;
    if (__dst[v16])
    {
      unint64_t v23 = 0;
      unint64_t v24 = 0;
      uint64_t v25 = &a2[v21];
      uint64_t v26 = 1;
      uint64_t v27 = v341 - 8 * v17;
      do
      {
        uint64_t v28 = v26;
        uint64_t v29 = v27;
        int v30 = (char)v25[v23];
        v24 |= (unint64_t)(v25[v23] & 0x7F) << v22;
        if (v23 > 8) {
          break;
        }
        ++v23;
        LOBYTE(v22) = v22 + 7;
        ++v26;
        v27 -= 8;
      }
      while (v30 < 0);
      char v31 = 0;
      unint64_t v32 = 0;
      unint64_t v33 = 0;
      float32x4_t v34 = &v347[v17];
      do
      {
        int v35 = (char)v34[v28 + 1];
        v33 |= (unint64_t)(v34[++v28] & 0x7F) << v31;
        if (v32 > 8) {
          break;
        }
        ++v32;
        v31 += 7;
        v29 -= 8;
      }
      while (v35 < 0);
      switch(v20)
      {
        case 1:
          if (!a1[3]) {
            operator new();
          }
          BOOL v36 = v19 == 1;
          unsigned int v37 = v33 - 2;
          if (v33 < 2) {
            return 3;
          }
          float32x4_t v38 = &v347[v17 + v28];
          unsigned int v39 = v38[1];
          int v40 = v38[2];
          uint64_t v41 = *a1;
          uint64_t v42 = (char *)a1[1];
          v43 = &v42[-*a1];
          if (v19 != 1)
          {
            size_t v141 = v336 - (void)v43;
            if (v336 <= (unint64_t)v43)
            {
              v142 = v345;
              unsigned int v148 = a6;
              if (v336 < (unint64_t)v43) {
                v345[1] = v41 + v336;
              }
            }
            else
            {
              v142 = v345;
              uint64_t v143 = v345[2];
              if (v143 - (uint64_t)v42 >= v141)
              {
                v330 = &v42[v141];
                v160 = v42;
                int v161 = v40;
                unsigned int v162 = v39;
                bzero(v160, v336 - (void)v43);
                unsigned int v39 = v162;
                BOOL v36 = v19 == 1;
                int v40 = v161;
                unsigned int v37 = v33 - 2;
                v345[1] = (uint64_t)v330;
                unsigned int v148 = a6;
              }
              else
              {
                unsigned int v322 = v39;
                int v325 = v40;
                if ((v336 & 0x8000000000000000) != 0) {
LABEL_318:
                }
                  std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
                unint64_t v144 = (unint64_t)v43;
                unint64_t v145 = v143 - v41;
                uint64_t v146 = 2 * v145;
                if (2 * v145 <= v336) {
                  uint64_t v146 = 4 * a6;
                }
                if (v145 >= 0x3FFFFFFFFFFFFFFFLL) {
                  size_t v147 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  size_t v147 = v146;
                }
                size_t v319 = v147;
                v316 = (char *)operator new(v147);
                v314 = &v316[v144];
                bzero(&v316[v144], v141);
                if (v42 == (char *)v41)
                {
                  v142 = v345;
                  unsigned int v148 = a6;
                  unsigned int v37 = v33 - 2;
                  int v40 = v325;
                  BOOL v36 = v19 == 1;
                  unsigned int v39 = v322;
                  v150 = v316;
                  size_t v149 = v319;
                  v172 = v314;
                }
                else
                {
                  if (v144 < 8)
                  {
                    v142 = v345;
                    unsigned int v148 = a6;
                    unsigned int v37 = v33 - 2;
                    int v40 = v325;
                    BOOL v36 = v19 == 1;
                    unsigned int v39 = v322;
                    v150 = v316;
                    size_t v149 = v319;
                    v151 = v314;
                    goto LABEL_296;
                  }
                  unint64_t v182 = v144;
                  v150 = v316;
                  size_t v149 = v319;
                  v142 = v345;
                  unsigned int v148 = a6;
                  unsigned int v37 = v33 - 2;
                  int v40 = v325;
                  BOOL v36 = v19 == 1;
                  unsigned int v39 = v322;
                  v151 = v314;
                  if ((unint64_t)(v41 - (void)v316) < 0x20) {
                    goto LABEL_296;
                  }
                  if (v182 >= 0x20)
                  {
                    unint64_t v183 = v182 & 0xFFFFFFFFFFFFFFE0;
                    v224 = &v316[v182 - 16];
                    v225 = v42 - 16;
                    unint64_t v226 = v182 & 0xFFFFFFFFFFFFFFE0;
                    do
                    {
                      long long v227 = *(_OWORD *)v225;
                      *((_OWORD *)v224 - 1) = *((_OWORD *)v225 - 1);
                      *(_OWORD *)v224 = v227;
                      v224 -= 32;
                      v225 -= 32;
                      v226 -= 32;
                    }
                    while (v226);
                    if (v182 != v183)
                    {
                      if ((v182 & 0x18) == 0)
                      {
                        v151 = &v314[-v183];
                        v42 -= v183;
                        goto LABEL_296;
                      }
                      goto LABEL_221;
                    }
                  }
                  else
                  {
                    unint64_t v183 = 0;
LABEL_221:
                    v151 = &v314[-(v182 & 0xFFFFFFFFFFFFFFF8)];
                    v228 = &v42[-v183 - v41 - 8 + (void)v316];
                    v229 = &v42[-v183 - 8];
                    unint64_t v230 = v183 - (v182 & 0xFFFFFFFFFFFFFFF8);
                    do
                    {
                      uint64_t v231 = *(void *)v229;
                      v229 -= 8;
                      *(void *)v228 = v231;
                      v228 -= 8;
                      v230 += 8;
                    }
                    while (v230);
                    v42 -= v182 & 0xFFFFFFFFFFFFFFF8;
                    if (v182 != (v182 & 0xFFFFFFFFFFFFFFF8))
                    {
LABEL_296:
                      v303 = v151 - 1;
                      do
                      {
                        char v304 = *--v42;
                        *v303-- = v304;
                      }
                      while (v42 != (char *)v41);
                    }
                  }
                  uint64_t v42 = (char *)v41;
                  v172 = v150;
                }
                uint64_t *v142 = (uint64_t)v172;
                v142[1] = (uint64_t)&v150[v336];
                v142[2] = (uint64_t)&v150[v149];
                if (v42)
                {
                  operator delete(v42);
                  unsigned int v39 = v322;
                  BOOL v36 = v19 == 1;
                  int v40 = v325;
                  unsigned int v37 = v33 - 2;
                }
              }
            }
            v305 = (int32x4_t *)*v142;
            v306 = *(uint64_t **)v142[3];
            LODWORD(v348) = 0;
            BYTE4(v348) = a4;
            BYTE5(v348) = a5;
            WORD3(v348) = 0;
            uint64_t v349 = 1;
            __int16 v350 = 0;
            char v351 = v36;
            int v352 = 0;
            if (v39 >= 4) {
              char v307 = 1;
            }
            else {
              char v307 = v39;
            }
            char v353 = v307;
            if (v40 == 2) {
              char v308 = 4;
            }
            else {
              char v308 = 1;
            }
            if (!v40) {
              char v308 = 0;
            }
            char v354 = v308;
            *((void *)&v348 + 1) = __PAIR64__(v148, v37);
            uint64_t v309 = *v306;
            uint64_t v355 = (uint64_t)&v347[v17 + 3 + v28];
            uint64_t v356 = v37;
            uint64_t result = gcl::polyline::DecoderImpl::decompressAttributes(v309, (uint64_t)&v355, v305, 0, &v348);
            if (result) {
              goto LABEL_315;
            }
            v310 = (BOOL *)v344;
            a1 = v345;
            size_t v15 = a6;
            size_t v311 = a6;
            do
            {
              uint64_t v312 = v305->i32[0];
              v305 = (int32x4_t *)((char *)v305 + 4);
              unint64_t v313 = v24 + v312;
              if (v19 <= 0x3F) {
                unint64_t v313 = ((unint64_t)*v310 << v19) | v313 & ~(-1 << v19);
              }
              *v310++ = v313 != 0;
              --v311;
            }
            while (v311);
            goto LABEL_294;
          }
          LODWORD(v44) = a6;
          size_t v45 = a6 - (void)v43;
          if (a6 <= (unint64_t)v43)
          {
            unint64_t v46 = v345;
            if (a6 >= (unint64_t)v43) {
              goto LABEL_268;
            }
            size_t v152 = v41 + a6;
            goto LABEL_143;
          }
          unint64_t v46 = v345;
          uint64_t v47 = v345[2];
          if (v47 - (uint64_t)v42 >= v45)
          {
            v329 = &v42[v45];
            v156 = v42;
            int v157 = v40;
            BOOL v158 = v36;
            unsigned int v159 = v39;
            bzero(v156, a6 - (void)v43);
            LODWORD(v44) = a6;
            unsigned int v39 = v159;
            BOOL v36 = v158;
            int v40 = v157;
            unsigned int v37 = v33 - 2;
            size_t v152 = (size_t)v329;
LABEL_143:
            v46[1] = v152;
            goto LABEL_268;
          }
          unsigned int v320 = v39;
          BOOL v332 = v36;
          int v323 = v40;
          if ((a6 & 0x8000000000000000) != 0) {
            goto LABEL_318;
          }
          unint64_t v48 = (unint64_t)v43;
          unint64_t v49 = v47 - v41;
          uint64_t v50 = 2 * v49;
          if (2 * v49 <= a6) {
            uint64_t v50 = a6;
          }
          if (v49 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v51 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v51 = v50;
          }
          v317 = (char *)operator new(v51);
          v315 = &v317[v48];
          bzero(&v317[v48], v45);
          size_t v52 = v51;
          if (v42 == (char *)v41)
          {
            unint64_t v46 = v345;
            size_t v44 = a6;
            unsigned int v37 = v33 - 2;
            int v40 = v323;
            BOOL v36 = v332;
            unsigned int v39 = v320;
            v170 = &v317[v48];
            uint64_t v53 = v317;
            goto LABEL_266;
          }
          if (v48 < 8)
          {
            unint64_t v46 = v345;
            size_t v44 = a6;
            unsigned int v37 = v33 - 2;
            int v40 = v323;
            BOOL v36 = v332;
            unsigned int v39 = v320;
            v54 = &v317[v48];
            uint64_t v53 = v317;
            goto LABEL_263;
          }
          v54 = &v317[v48];
          uint64_t v53 = v317;
          unint64_t v46 = v345;
          size_t v44 = a6;
          unsigned int v37 = v33 - 2;
          int v40 = v323;
          BOOL v36 = v332;
          unsigned int v39 = v320;
          if ((unint64_t)(v41 - (void)v317) < 0x20) {
            goto LABEL_263;
          }
          if (v48 >= 0x20)
          {
            unint64_t v181 = v48 & 0xFFFFFFFFFFFFFFE0;
            v216 = &v317[v48 - 16];
            v217 = v42 - 16;
            unint64_t v218 = v48 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v219 = *(_OWORD *)v217;
              *((_OWORD *)v216 - 1) = *((_OWORD *)v217 - 1);
              *(_OWORD *)v216 = v219;
              v216 -= 32;
              v217 -= 32;
              v218 -= 32;
            }
            while (v218);
            if (v48 == v181) {
              goto LABEL_265;
            }
            if ((v48 & 0x18) == 0)
            {
              v54 = &v315[-v181];
              v42 -= v181;
LABEL_263:
              v248 = v54 - 1;
              do
              {
                char v249 = *--v42;
                *v248-- = v249;
              }
              while (v42 != (char *)v41);
              goto LABEL_265;
            }
          }
          else
          {
            unint64_t v181 = 0;
          }
          v54 = &v315[-(v48 & 0xFFFFFFFFFFFFFFF8)];
          v220 = &v42[-v181 - v41 - 8 + (void)v317];
          v221 = &v42[-v181 - 8];
          unint64_t v222 = v181 - (v48 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v223 = *(void *)v221;
            v221 -= 8;
            *(void *)v220 = v223;
            v220 -= 8;
            v222 += 8;
          }
          while (v222);
          v42 -= v48 & 0xFFFFFFFFFFFFFFF8;
          if (v48 != (v48 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_263;
          }
LABEL_265:
          uint64_t v42 = (char *)v41;
          v170 = v53;
LABEL_266:
          *unint64_t v46 = (uint64_t)v170;
          v46[1] = (uint64_t)&v53[v44];
          v46[2] = (uint64_t)&v53[v52];
          if (v42)
          {
            int v250 = v44;
            operator delete(v42);
            LODWORD(v44) = v250;
            unsigned int v39 = v320;
            BOOL v36 = v332;
            int v40 = v323;
            unsigned int v37 = v33 - 2;
          }
LABEL_268:
          unint64_t v251 = *v46;
          v252 = *(uint64_t **)v46[3];
          LODWORD(v348) = 0;
          BYTE4(v348) = a4;
          BYTE5(v348) = a5;
          WORD3(v348) = 0;
          uint64_t v349 = 1;
          __int16 v350 = 0;
          char v351 = v36;
          int v352 = 0;
          if (v39 >= 4) {
            char v253 = 1;
          }
          else {
            char v253 = v39;
          }
          char v353 = v253;
          if (v40 == 2) {
            char v254 = 4;
          }
          else {
            char v254 = 1;
          }
          if (!v40) {
            char v254 = 0;
          }
          char v354 = v254;
          *((void *)&v348 + 1) = __PAIR64__(v44, v37);
          uint64_t v255 = *v252;
          uint64_t v355 = (uint64_t)&v347[v17 + 3 + v28];
          uint64_t v356 = v37;
          uint64_t result = gcl::polyline::DecoderImpl::decompressAttributes(v255, (uint64_t)&v355, v251, 0, &v348);
          if (result) {
            goto LABEL_315;
          }
          size_t v15 = a6;
          if (a6 < 8)
          {
            unint64_t v257 = 0;
            a1 = v345;
            goto LABEL_292;
          }
          a1 = v345;
          if (v251 + a6 > (unint64_t)v344 && v251 < (unint64_t)v331)
          {
            unint64_t v257 = 0;
LABEL_292:
            size_t v299 = a6 - v257;
            v300 = (BOOL *)&v344->i8[v257];
            v301 = (char *)(v251 + v257);
            do
            {
              char v302 = *v301++;
              BOOL *v300 = (((_BYTE)v24 + v302) & 1 | (2 * *v300)) != 0;
              ++v300;
              --v299;
            }
            while (v299);
            goto LABEL_294;
          }
          uint64x2_t v258 = (uint64x2_t)vdupq_n_s64(v24);
          if (a6 >= 0x10)
          {
            unint64_t v274 = a6 & 0xFFFFFFFFFFFFFFF0;
            v275 = v344;
            v276 = (int8x16_t *)v251;
            v277.i64[0] = 0x101010101010101;
            v277.i64[1] = 0x101010101010101;
            do
            {
              int8x16_t v278 = *v276++;
              uint32x4_t v279 = (uint32x4_t)vqtbl1q_s8(v278, (int8x16_t)xmmword_18A643760);
              uint32x4_t v280 = (uint32x4_t)vqtbl1q_s8(v278, (int8x16_t)xmmword_18A643770);
              uint32x4_t v281 = (uint32x4_t)vqtbl1q_s8(v278, (int8x16_t)xmmword_18A643780);
              uint32x4_t v282 = (uint32x4_t)vqtbl1q_s8(v278, (int8x16_t)xmmword_18A643790);
              uint8x16_t v283 = (uint8x16_t)vaddq_s8(*v275, *v275);
              uint16x8_t v284 = vmovl_u8(*(uint8x8_t *)v283.i8);
              uint32x4_t v285 = vmovl_high_u16(v284);
              v286.i64[0] = v285.u32[2];
              v286.i64[1] = v285.u32[3];
              int8x16_t v287 = v286;
              v286.i64[0] = v285.u32[0];
              v286.i64[1] = v285.u32[1];
              int8x16_t v288 = v286;
              uint32x4_t v289 = vmovl_u16(*(uint16x4_t *)v284.i8);
              v286.i64[0] = v289.u32[2];
              v286.i64[1] = v289.u32[3];
              int8x16_t v290 = v286;
              v286.i64[0] = v289.u32[0];
              v286.i64[1] = v289.u32[1];
              int8x16_t v291 = v286;
              uint16x8_t v292 = vmovl_high_u8(v283);
              uint32x4_t v293 = vmovl_u16(*(uint16x4_t *)v292.i8);
              v286.i64[0] = v293.u32[2];
              v286.i64[1] = v293.u32[3];
              int8x16_t v294 = v286;
              v286.i64[0] = v293.u32[0];
              v286.i64[1] = v293.u32[1];
              int8x16_t v295 = v286;
              uint32x4_t v296 = vmovl_high_u16(v292);
              v286.i64[0] = v296.u32[0];
              v286.i64[1] = v296.u32[1];
              int8x16_t v297 = v286;
              v286.i64[0] = v296.u32[2];
              v286.i64[1] = v296.u32[3];
              int8x16_t v298 = (int8x16_t)vdupq_n_s64(1uLL);
              int16x8_t v256 = (int16x8_t)vandq_s8(vuzp1q_s8(vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vorrq_s8(vandq_s8((int8x16_t)vaddw_u32(v258, *(uint32x2_t *)v281.i8), v298), v291)), (int32x4_t)vceqzq_s64((int64x2_t)vorrq_s8(vandq_s8((int8x16_t)vaddw_high_u32(v258, v281), v298), v290))), (int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vorrq_s8(vandq_s8((int8x16_t)vaddw_u32(v258, *(uint32x2_t *)v282.i8), v298), v288)), (int32x4_t)vceqzq_s64((int64x2_t)vorrq_s8(vandq_s8((int8x16_t)vaddw_high_u32(v258, v282), v298), v287))))), vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vorrq_s8(vandq_s8((int8x16_t)vaddw_u32(v258, *(uint32x2_t *)v280.i8), v298), v295)), (int32x4_t)vceqzq_s64((int64x2_t)vorrq_s8(vandq_s8((int8x16_t)vaddw_high_u32(v258, v280), v298), v294))), (int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vorrq_s8(vandq_s8((int8x16_t)vaddw_u32(v258, *(uint32x2_t *)v279.i8), v298), v297)), (int32x4_t)vceqzq_s64((int64x2_t)vorrq_s8(vandq_s8((int8x16_t)vaddw_high_u32(v258, v279), v298), v286)))))), v277);
              *v275++ = (int8x16_t)v256;
              v274 -= 16;
            }
            while (v274);
            if ((a6 & 0xFFFFFFFFFFFFFFF0) == a6) {
              goto LABEL_294;
            }
            unint64_t v257 = a6 & 0xFFFFFFFFFFFFFFF0;
            unint64_t v259 = a6 & 0xFFFFFFFFFFFFFFF0;
            if ((a6 & 8) == 0) {
              goto LABEL_292;
            }
          }
          else
          {
            unint64_t v259 = 0;
          }
          v260 = (uint64_t *)(v251 + v259);
          v261 = (int8x8_t *)&v344->i8[v259];
          unint64_t v262 = v259 - (a6 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v263 = *v260++;
            v256.i64[0] = v263;
            uint32x4_t v264 = (uint32x4_t)vqtbl1q_s8((int8x16_t)v256, (int8x16_t)xmmword_18A643780);
            uint32x4_t v265 = (uint32x4_t)vqtbl1q_s8((int8x16_t)v256, (int8x16_t)xmmword_18A643790);
            uint16x8_t v266 = vmovl_u8((uint8x8_t)vadd_s8(*v261, *v261));
            uint32x4_t v267 = vmovl_high_u16(v266);
            v268.i64[0] = v267.u32[2];
            v268.i64[1] = v267.u32[3];
            int8x16_t v269 = v268;
            v268.i64[0] = v267.u32[0];
            v268.i64[1] = v267.u32[1];
            int8x16_t v270 = v268;
            uint32x4_t v271 = vmovl_u16(*(uint16x4_t *)v266.i8);
            v268.i64[0] = v271.u32[2];
            v268.i64[1] = v271.u32[3];
            int8x16_t v272 = v268;
            v268.i64[0] = v271.u32[0];
            v268.i64[1] = v271.u32[1];
            int8x16_t v273 = (int8x16_t)vdupq_n_s64(1uLL);
            int16x8_t v256 = (int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vorrq_s8(vandq_s8((int8x16_t)vaddw_u32(v258, *(uint32x2_t *)v264.i8), v273), v268)), (int32x4_t)vceqzq_s64((int64x2_t)vorrq_s8(vandq_s8((int8x16_t)vaddw_high_u32(v258, v264), v273), v272))), (int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vorrq_s8(vandq_s8((int8x16_t)vaddw_u32(v258, *(uint32x2_t *)v265.i8), v273), v270)), (int32x4_t)vceqzq_s64((int64x2_t)vorrq_s8(vandq_s8((int8x16_t)vaddw_high_u32(v258, v265), v273), v269)))));
            *v261++ = vand_s8(vmovn_s16(v256), (int8x8_t)0x101010101010101);
            v262 += 8;
          }
          while (v262);
          unint64_t v257 = a6 & 0xFFFFFFFFFFFFFFF8;
          if ((a6 & 0xFFFFFFFFFFFFFFF8) != a6) {
            goto LABEL_292;
          }
LABEL_294:
          v17 += v33 + v28 + 1;
          v7 = v344;
          goto LABEL_9;
        case 2:
          v102 = (char *)*a1;
          v103 = (char *)a1[1];
          v104 = &v103[-*a1];
          size_t v105 = __sz - (void)v104;
          if (__sz > (unint64_t)v104)
          {
            uint64_t v106 = a1[2];
            if (v106 - (uint64_t)v103 >= v105)
            {
              bzero((void *)a1[1], __sz - (void)v104);
              a1[1] = (uint64_t)&v103[v105];
              unint64_t v111 = a6;
              goto LABEL_233;
            }
            unint64_t v334 = (unint64_t)&v103[-*a1];
            if ((__sz & 0x8000000000000000) != 0) {
              goto LABEL_318;
            }
            unint64_t v107 = v106 - (void)v102;
            uint64_t v108 = 2 * v107;
            if (2 * v107 <= __sz) {
              uint64_t v108 = 8 * a6;
            }
            if (v107 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v109 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v109 = v108;
            }
            v327 = (char *)operator new(v109);
            v324 = &v327[v334];
            bzero(&v327[v334], v105);
            size_t v110 = v109;
            if (v103 == v102)
            {
              a1 = v345;
              unint64_t v111 = a6;
              v163 = &v327[v334];
              v112 = v327;
            }
            else
            {
              if (v334 < 8)
              {
                a1 = v345;
                unint64_t v111 = a6;
                v113 = &v327[v334];
                v112 = v327;
                goto LABEL_228;
              }
              v113 = &v327[v334];
              v112 = v327;
              a1 = v345;
              unint64_t v111 = a6;
              if ((unint64_t)(v102 - v327) < 0x20) {
                goto LABEL_228;
              }
              if (v334 >= 0x20)
              {
                unint64_t v165 = v334 & 0xFFFFFFFFFFFFFFE0;
                v192 = &v327[v334 - 16];
                v193 = v103 - 16;
                unint64_t v194 = v334 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  long long v195 = *(_OWORD *)v193;
                  *((_OWORD *)v192 - 1) = *((_OWORD *)v193 - 1);
                  *(_OWORD *)v192 = v195;
                  v192 -= 32;
                  v193 -= 32;
                  v194 -= 32;
                }
                while (v194);
                if (v334 != v165)
                {
                  if ((v334 & 0x18) == 0)
                  {
                    v113 = &v324[-v165];
                    v103 -= v165;
                    goto LABEL_228;
                  }
                  goto LABEL_189;
                }
              }
              else
              {
                unint64_t v165 = 0;
LABEL_189:
                v113 = &v324[-(v334 & 0xFFFFFFFFFFFFFFF8)];
                v196 = &v327[&v103[-v165] - v102 - 8];
                v197 = &v103[-v165 - 8];
                unint64_t v198 = v165 - (v334 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  uint64_t v199 = *(void *)v197;
                  v197 -= 8;
                  *(void *)v196 = v199;
                  v196 -= 8;
                  v198 += 8;
                }
                while (v198);
                v103 -= v334 & 0xFFFFFFFFFFFFFFF8;
                if (v334 != (v334 & 0xFFFFFFFFFFFFFFF8))
                {
LABEL_228:
                  v232 = v113 - 1;
                  do
                  {
                    char v233 = *--v103;
                    *v232-- = v233;
                  }
                  while (v103 != v102);
                }
              }
              v103 = v102;
              v163 = v112;
            }
            *a1 = (uint64_t)v163;
            a1[1] = (uint64_t)&v112[__sz];
            a1[2] = (uint64_t)&v112[v110];
            if (v103) {
              operator delete(v103);
            }
            goto LABEL_233;
          }
          unint64_t v111 = a6;
          if (__sz < (unint64_t)v104) {
            a1[1] = (uint64_t)&v102[__sz];
          }
LABEL_233:
          v234 = (uint64_t *)*a1;
          uint64_t result = mgcl::muid::decompress((mgcl::muid *)&v347[v17 + 1 + v28], (const char *)v33, 0, 0, *a1, (unint64_t *)8, v111);
          if (result) {
            return result;
          }
          v7 = v344;
          v235 = (BOOL *)v344;
          size_t v15 = a6;
          size_t v236 = a6;
          do
          {
            uint64_t v237 = *v234++;
            unint64_t v238 = v237 + v24;
            if (v19 <= 0x3F) {
              unint64_t v238 = ((unint64_t)*v235 << v19) | v238 & ~(-1 << v19);
            }
            *v235++ = v238 != 0;
            --v236;
          }
          while (v236);
          v17 += v33 + v28 + 1;
          a1 = v345;
LABEL_9:
          a2 = v347;
          size_t v12 = v342;
LABEL_10:
          uint64_t v18 = v346;
LABEL_11:
          uint64_t v16 = v18 + 1;
          if (v16 == v12) {
            return 0;
          }
          continue;
        case 3:
          v83 = (char *)*a1;
          v82 = (char *)a1[1];
          if (v82 != (char *)*a1)
          {
            a1[1] = (uint64_t)v83;
            v82 = v83;
          }
          if (a1[2] - (uint64_t)v83 >= __sz) {
            goto LABEL_68;
          }
          if ((__sz & 0x8000000000000000) != 0) {
            goto LABEL_318;
          }
          v84 = operator new(__sz);
          unint64_t v85 = v82 - v83;
          v86 = &v84[v82 - v83];
          v87 = v86;
          a1 = v345;
          size_t v15 = a6;
          if (v82 == v83) {
            goto LABEL_66;
          }
          v87 = v84;
          if (v85 < 8 || (unint64_t)(v83 - v84) < 0x20)
          {
            v88 = v82;
            v89 = &v84[v82 - v83];
            goto LABEL_64;
          }
          if (v85 >= 0x20)
          {
            unint64_t v164 = v85 & 0xFFFFFFFFFFFFFFE0;
            v173 = &v84[v85 - 16];
            v174 = (long long *)(v82 - 16);
            unint64_t v175 = v85 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v176 = *v174;
              *(v173 - 1) = *(v174 - 1);
              _OWORD *v173 = v176;
              v173 -= 2;
              v174 -= 2;
              v175 -= 32;
            }
            while (v175);
            if (v85 == v164)
            {
LABEL_66:
              v7 = v344;
              uint64_t *v345 = (uint64_t)v87;
              v345[1] = (uint64_t)v86;
              v345[2] = (uint64_t)&v84[__sz];
              if (v83) {
                operator delete(v83);
              }
LABEL_68:
              uint64_t v92 = 0;
              uint64_t v93 = v17 + v28 + 1;
              a2 = v347;
              uint64_t v18 = v346;
              do
              {
                char v94 = 0;
                unint64_t v95 = 0;
                uint64_t v96 = 0;
                uint64_t v97 = v93;
                v98 = &v347[v93];
                do
                {
                  int v99 = (char)v98[v95];
                  v96 |= (unint64_t)(v98[v95] & 0x7F) << v94;
                  unint64_t v100 = v95 + 1;
                  if (v95 > 8) {
                    break;
                  }
                  v94 += 7;
                  ++v95;
                }
                while (v99 < 0);
                unint64_t v101 = v96 + v24;
                if (v19 <= 0x3F) {
                  unint64_t v101 = ((unint64_t)v7->u8[v92] << v19) | v101 & ~(-1 << v19);
                }
                uint64_t v93 = v97 + v100;
                v7->i8[v92++] = v101 != 0;
              }
              while (v92 != v15);
              size_t v17 = v97 + v100;
              size_t v12 = v342;
              goto LABEL_11;
            }
            if ((v85 & 0x18) == 0)
            {
              v89 = &v86[-v164];
              v88 = &v82[-v164];
LABEL_64:
              v90 = v89 - 1;
              do
              {
                char v91 = *--v88;
                *v90-- = v91;
              }
              while (v88 != v83);
              goto LABEL_66;
            }
          }
          else
          {
            unint64_t v164 = 0;
          }
          v88 = &v82[-(v85 & 0xFFFFFFFFFFFFFFF8)];
          v89 = &v86[-(v85 & 0xFFFFFFFFFFFFFFF8)];
          v177 = &v84[&v82[-v164] - v83 - 8];
          v178 = (uint64_t *)&v82[-v164 - 8];
          unint64_t v179 = v164 - (v85 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v180 = *v178--;
            *v177-- = v180;
            v179 += 8;
          }
          while (v179);
          if (v85 != (v85 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_64;
          }
          goto LABEL_66;
        case 4:
          operator new();
        default:
          return 3;
      }
    }
    break;
  }
  uint64_t v55 = &a2[v21];
  uint64_t v56 = v337 + 8 * v17;
  do
  {
    uint64_t v57 = v56;
    unint64_t v58 = v22 + 1;
    if (v22 > 8) {
      break;
    }
    int v59 = (char)v55[v22];
    v56 += 8;
    ++v22;
  }
  while (v59 < 0);
  char v60 = 0;
  unint64_t v61 = 0;
  unint64_t v62 = 0;
  uint64_t v63 = &v347[v17 + v58];
  size_t v64 = v340 - v17;
  do
  {
    int v65 = (char)v63[v61 + 1];
    v62 |= (unint64_t)(v63[v61 + 1] & 0x7F) << v60;
    unint64_t v66 = v61 + 1;
    --v64;
    if (v61 > 8) {
      break;
    }
    v60 += 7;
    v57 += 8;
    ++v61;
  }
  while (v65 < 0);
  switch(v20)
  {
    case 1:
      if (!a1[3]) {
        operator new();
      }
      unsigned int v67 = v62 - 2;
      if (v62 < 2) {
        return 3;
      }
      v68 = &v347[v17 + v58 + v66];
      unsigned int v69 = v68[1];
      int v70 = v68[2];
      uint64_t v71 = *a1;
      v72 = (char *)a1[1];
      unint64_t v73 = (unint64_t)&v72[-*a1];
      size_t v74 = a6 - v73;
      if (a6 > v73)
      {
        uint64_t v75 = a1[2];
        if (v75 - (uint64_t)v72 >= v74)
        {
          v153 = &v72[v74];
          int v154 = v70;
          unsigned int v155 = v69;
          bzero((void *)a1[1], a6 - v73);
          unsigned int v67 = v62 - 2;
          unsigned int v69 = v155;
          int v70 = v154;
          a1[1] = (uint64_t)v153;
          LODWORD(v74) = a6;
          goto LABEL_252;
        }
        unsigned int v326 = v69;
        int v333 = v70;
        if ((a6 & 0x8000000000000000) != 0) {
          goto LABEL_319;
        }
        unint64_t v76 = v75 - v71;
        uint64_t v77 = 2 * v76;
        if (2 * v76 <= a6) {
          uint64_t v77 = a6;
        }
        if (v76 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v78 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v78 = v77;
        }
        v321 = (char *)operator new(v78);
        v318 = &v321[v73];
        bzero(&v321[v73], v74);
        size_t v79 = v78;
        if (v72 == (char *)v71)
        {
          a1 = v345;
          size_t v74 = a6;
          int v70 = v333;
          unsigned int v69 = v326;
          v80 = v321;
          v167 = &v321[v73];
          goto LABEL_250;
        }
        if (v73 < 8)
        {
          a1 = v345;
          size_t v74 = a6;
          int v70 = v333;
          unsigned int v69 = v326;
          v80 = v321;
          v81 = &v321[v73];
          goto LABEL_247;
        }
        v80 = v321;
        a1 = v345;
        size_t v74 = a6;
        int v70 = v333;
        unsigned int v69 = v326;
        v81 = &v321[v73];
        if ((unint64_t)(v71 - (void)v321) >= 0x20)
        {
          if (v73 < 0x20)
          {
            unint64_t v171 = 0;
            goto LABEL_205;
          }
          unint64_t v171 = v73 & 0xFFFFFFFFFFFFFFE0;
          v208 = &v321[v73 - 16];
          v209 = v72 - 16;
          unint64_t v210 = v73 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v211 = *(_OWORD *)v209;
            *((_OWORD *)v208 - 1) = *((_OWORD *)v209 - 1);
            *(_OWORD *)v208 = v211;
            v208 -= 32;
            v209 -= 32;
            v210 -= 32;
          }
          while (v210);
          if (v73 == v171) {
            goto LABEL_249;
          }
          if ((v73 & 0x18) != 0)
          {
LABEL_205:
            v81 = &v318[-(v73 & 0xFFFFFFFFFFFFFFF8)];
            v212 = &v72[-v171 - v71 - 8 + (void)v321];
            v213 = &v72[-v171 - 8];
            unint64_t v214 = v171 - (v73 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              uint64_t v215 = *(void *)v213;
              v213 -= 8;
              *(void *)v212 = v215;
              v212 -= 8;
              v214 += 8;
            }
            while (v214);
            v72 -= v73 & 0xFFFFFFFFFFFFFFF8;
            if (v73 == (v73 & 0xFFFFFFFFFFFFFFF8)) {
              goto LABEL_249;
            }
            goto LABEL_247;
          }
          v81 = &v318[-v171];
          v72 -= v171;
        }
LABEL_247:
        v241 = v81 - 1;
        do
        {
          char v242 = *--v72;
          *v241-- = v242;
        }
        while (v72 != (char *)v71);
LABEL_249:
        v72 = (char *)v71;
        v167 = v80;
LABEL_250:
        unsigned int v67 = v62 - 2;
        *a1 = (uint64_t)v167;
        a1[1] = (uint64_t)&v80[v74];
        a1[2] = (uint64_t)&v80[v79];
        if (v72)
        {
          operator delete(v72);
          unsigned int v67 = v62 - 2;
          unsigned int v69 = v326;
          int v70 = v333;
        }
        goto LABEL_252;
      }
      LODWORD(v74) = a6;
      if (a6 < v73) {
        a1[1] = v71 + a6;
      }
LABEL_252:
      uint64_t v243 = *a1;
      v244 = *(uint64_t **)a1[3];
      LODWORD(v348) = 0;
      BYTE4(v348) = a4;
      BYTE5(v348) = a5;
      WORD3(v348) = 0;
      uint64_t v349 = 1;
      __int16 v350 = 0;
      char v351 = 1;
      int v352 = 0;
      if (v69 >= 4) {
        char v245 = 1;
      }
      else {
        char v245 = v69;
      }
      char v353 = v245;
      if (v70 == 2) {
        char v246 = 4;
      }
      else {
        char v246 = 1;
      }
      if (!v70) {
        char v246 = 0;
      }
      char v354 = v246;
      *((void *)&v348 + 1) = __PAIR64__(v74, v67);
      uint64_t v247 = *v244;
      uint64_t v355 = (uint64_t)&v347[v17 + 3 + v58 + v66];
      uint64_t v356 = v67;
      uint64_t result = gcl::polyline::DecoderImpl::decompressAttributes(v247, (uint64_t)&v355, v243, 0, &v348);
      size_t v12 = v342;
      if (!result)
      {
        v17 += v58 + v62 + v66 + 1;
        v7 = v344;
        a1 = v345;
        size_t v15 = a6;
        a2 = v347;
        goto LABEL_10;
      }
LABEL_315:
      if ((result - 1) >= 4) {
        return 5;
      }
      return result;
    case 2:
      uint64_t v128 = *a1;
      v129 = (char *)a1[1];
      unint64_t v130 = (unint64_t)&v129[-*a1];
      v131 = a1;
      size_t v132 = __sz - v130;
      if (__sz > v130)
      {
        uint64_t v133 = v131[2];
        if (v133 - (uint64_t)v129 >= v132)
        {
          bzero(v129, __sz - v130);
          v131[1] = (uint64_t)&v129[v132];
          v138 = v131;
          goto LABEL_244;
        }
        if ((__sz & 0x8000000000000000) != 0) {
LABEL_319:
        }
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        unint64_t v134 = v133 - v128;
        uint64_t v135 = 2 * v134;
        if (2 * v134 <= __sz) {
          uint64_t v135 = 8 * a6;
        }
        if (v134 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v136 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v136 = v135;
        }
        size_t v137 = v136;
        v335 = (char *)operator new(v136);
        v328 = &v335[v130];
        bzero(&v335[v130], v132);
        if (v129 == (char *)v128)
        {
          v138 = v345;
          v139 = v335;
          v166 = &v335[v130];
        }
        else
        {
          if (v130 < 8)
          {
            v138 = v345;
            v139 = v335;
            v140 = &v335[v130];
            goto LABEL_239;
          }
          v139 = v335;
          v138 = v345;
          v140 = &v335[v130];
          if ((unint64_t)(v128 - (void)v335) < 0x20) {
            goto LABEL_239;
          }
          if (v130 >= 0x20)
          {
            unint64_t v169 = v130 & 0xFFFFFFFFFFFFFFE0;
            v200 = &v335[v130 - 16];
            v201 = v129 - 16;
            unint64_t v202 = v130 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v203 = *(_OWORD *)v201;
              *((_OWORD *)v200 - 1) = *((_OWORD *)v201 - 1);
              *(_OWORD *)v200 = v203;
              v200 -= 32;
              v201 -= 32;
              v202 -= 32;
            }
            while (v202);
            if (v130 != v169)
            {
              if ((v130 & 0x18) == 0)
              {
                v140 = &v328[-v169];
                v129 -= v169;
                goto LABEL_239;
              }
              goto LABEL_197;
            }
          }
          else
          {
            unint64_t v169 = 0;
LABEL_197:
            v140 = &v328[-(v130 & 0xFFFFFFFFFFFFFFF8)];
            v204 = &v129[-v169 - v128 - 8 + (void)v335];
            v205 = &v129[-v169 - 8];
            unint64_t v206 = v169 - (v130 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              uint64_t v207 = *(void *)v205;
              v205 -= 8;
              *(void *)v204 = v207;
              v204 -= 8;
              v206 += 8;
            }
            while (v206);
            v129 -= v130 & 0xFFFFFFFFFFFFFFF8;
            if (v130 != (v130 & 0xFFFFFFFFFFFFFFF8))
            {
LABEL_239:
              v239 = v140 - 1;
              do
              {
                char v240 = *--v129;
                *v239-- = v240;
              }
              while (v129 != (char *)v128);
            }
          }
          v129 = (char *)v128;
          v166 = v139;
        }
        uint64_t *v138 = (uint64_t)v166;
        v138[1] = (uint64_t)&v139[__sz];
        v138[2] = (uint64_t)&v139[v137];
        if (v129) {
          operator delete(v129);
        }
        goto LABEL_244;
      }
      v138 = v131;
      if (__sz < v130) {
        v131[1] = v128 + __sz;
      }
LABEL_244:
      uint64_t result = mgcl::muid::decompress((mgcl::muid *)&v347[v17 + 1 + v58 + v66], (const char *)v62, 0, 0, *v138, (unint64_t *)8, a6);
      if (result) {
        return result;
      }
      v17 += v58 + v62 + v66 + 1;
      v7 = v344;
      a1 = v345;
      size_t v15 = a6;
      goto LABEL_9;
    case 3:
      v115 = (char *)*a1;
      v114 = (char *)a1[1];
      if (v114 != (char *)*a1)
      {
        a1[1] = (uint64_t)v115;
        v114 = v115;
      }
      size_t v15 = a6;
      if (a1[2] - (uint64_t)v115 >= __sz) {
        goto LABEL_100;
      }
      if ((__sz & 0x8000000000000000) != 0) {
        goto LABEL_319;
      }
      v116 = operator new(__sz);
      unint64_t v117 = v114 - v115;
      v118 = &v116[v114 - v115];
      v119 = v118;
      a1 = v345;
      size_t v15 = a6;
      size_t v12 = v342;
      if (v114 == v115) {
        goto LABEL_98;
      }
      v119 = v116;
      if (v117 < 8 || (unint64_t)(v115 - v116) < 0x20)
      {
        v120 = v114;
        v121 = &v116[v114 - v115];
        goto LABEL_96;
      }
      if (v117 >= 0x20)
      {
        unint64_t v168 = v117 & 0xFFFFFFFFFFFFFFE0;
        v184 = &v116[v117 - 16];
        v185 = (long long *)(v114 - 16);
        unint64_t v186 = v117 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v187 = *v185;
          *(v184 - 1) = *(v185 - 1);
          _OWORD *v184 = v187;
          v184 -= 2;
          v185 -= 2;
          v186 -= 32;
        }
        while (v186);
        if (v117 == v168)
        {
LABEL_98:
          uint64_t *v345 = (uint64_t)v119;
          v345[1] = (uint64_t)v118;
          v345[2] = (uint64_t)&v116[__sz];
          if (v115) {
            operator delete(v115);
          }
LABEL_100:
          uint64_t v124 = 0;
          v17 += v58 + v66 + 1;
          v7 = v344;
          a2 = v347;
          uint64_t v18 = v346;
          do
          {
            unint64_t v125 = 0;
            do
            {
              unint64_t v126 = v125 + 1;
              if (v125 > 8) {
                break;
              }
              int v127 = (char)v347[v17 + v125++];
            }
            while (v127 < 0);
            ++v124;
            v17 += v126;
          }
          while (v124 != v15);
          goto LABEL_11;
        }
        if ((v117 & 0x18) == 0)
        {
          v121 = &v118[-v168];
          v120 = &v114[-v168];
LABEL_96:
          v122 = v121 - 1;
          do
          {
            char v123 = *--v120;
            *v122-- = v123;
          }
          while (v120 != v115);
          goto LABEL_98;
        }
      }
      else
      {
        unint64_t v168 = 0;
      }
      v120 = &v114[-(v117 & 0xFFFFFFFFFFFFFFF8)];
      v121 = &v118[-(v117 & 0xFFFFFFFFFFFFFFF8)];
      v188 = &v116[&v114[-v168] - v115 - 8];
      v189 = (uint64_t *)&v114[-v168 - 8];
      unint64_t v190 = v168 - (v117 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v191 = *v189--;
        *v188-- = v191;
        v190 += 8;
      }
      while (v190);
      if (v117 != (v117 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_96;
      }
      goto LABEL_98;
    case 4:
      operator new();
    default:
      return 3;
  }
}

void sub_188FDB038(_Unwind_Exception *a1)
{
  MEMORY[0x18C11F580](v2, 0x20C4093837F09);
  MEMORY[0x18C11F580](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<long long,geo::StdAllocator<long long,geo::codec::Allocator>>::~vector[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 40))(a1[3], v2, a1[2] - v2);
  }
  return a1;
}

geo::codec::Allocator *std::vector<long long,geo::StdAllocator<long long,geo::codec::Allocator>>::vector(geo::codec::Allocator *a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  uint64_t v4 = geo::codec::Allocator::instance(a1);
  *((void *)a1 + 3) = v4;
  if (a2)
  {
    uint64_t v5 = a2;
    v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 16))(v4, v5 * 8, 8);
    *(void *)a1 = v6;
    *((void *)a1 + 1) = v6;
    v7 = &v6[v5];
    *((void *)a1 + 2) = &v6[v5];
    do
    {
      if (v6) {
        void *v6 = 0;
      }
      ++v6;
      --v5;
    }
    while (v5 * 8);
    *((void *)a1 + 1) = v7;
  }
  return a1;
}

void sub_188FDB190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
}

geo::codec::Allocator *std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>::vector(geo::codec::Allocator *a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  uint64_t v4 = geo::codec::Allocator::instance(a1);
  *((void *)a1 + 3) = v4;
  if (a2)
  {
    uint64_t v5 = a2;
    v6 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 16))(v4, v5 * 4, 4);
    *(void *)a1 = v6;
    *((void *)a1 + 1) = v6;
    v7 = &v6[v5];
    *((void *)a1 + 2) = &v6[v5];
    do
    {
      if (v6) {
        _DWORD *v6 = 0;
      }
      ++v6;
      --v5;
    }
    while (v5 * 4);
    *((void *)a1 + 1) = v7;
  }
  return a1;
}

void sub_188FDB250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
}

uint64_t std::vector<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::AnnotationTemplateValue,geo::StdAllocator<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::AnnotationTemplateValue,geo::codec::Allocator>>::resize(uint64_t result, unint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *(void *)result;
  uint64_t v4 = *(void **)(result + 8);
  uint64_t v6 = (uint64_t)v4 - *(void *)result;
  uint64_t v7 = v6 >> 3;
  unint64_t v8 = a2 - (v6 >> 3);
  if (a2 <= v6 >> 3)
  {
    if (a2 >= v6 >> 3) {
      return result;
    }
    uint64_t v16 = (void *)(v5 + 8 * a2);
    goto LABEL_14;
  }
  uint64_t v9 = *(void *)(result + 16);
  if (v8 <= (v9 - (uint64_t)v4) >> 3)
  {
    uint64_t v16 = &v4[v8];
    uint64_t v17 = 8 * a2 - 8 * v7;
    do
    {
      if (v4) {
        *uint64_t v4 = 0;
      }
      ++v4;
      v17 -= 8;
    }
    while (v17);
LABEL_14:
    *(void *)(result + 8) = v16;
    return result;
  }
  unint64_t v10 = v9 - v5;
  unint64_t v11 = (v9 - v5) >> 2;
  if (v11 <= a2) {
    unint64_t v11 = a2;
  }
  if (v10 >= 0x7FFFFFFFFFFFFFF8) {
    uint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v12 = v11;
  }
  uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(result + 24) + 16))(*(void *)(result + 24), 8 * v12, 4);
  uint64_t v13 = (void *)(result + 8 * v7);
  uint64_t v14 = 8 * a2 - 8 * v7;
  size_t v15 = v13;
  do
  {
    if (v15) {
      *size_t v15 = 0;
    }
    ++v15;
    v14 -= 8;
  }
  while (v14);
  uint64_t v19 = *(void *)v3;
  uint64_t v18 = *(void *)(v3 + 8);
  if (v18 != *(void *)v3)
  {
    unint64_t v20 = v18 - *(void *)v3 - 8;
    if (v20 < 0x58) {
      goto LABEL_31;
    }
    if ((unint64_t)(v18 - (v6 + result)) < 0x20) {
      goto LABEL_31;
    }
    uint64_t v21 = (v20 >> 3) + 1;
    uint64_t v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v23 = v18 - v22;
    uint64_t v13 = (void *)((char *)v13 - v22);
    unint64_t v24 = (_OWORD *)(result + 8 * v7 - 16);
    uint64_t v25 = (long long *)(v18 - 16);
    uint64_t v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v27 = *v25;
      *(v24 - 1) = *(v25 - 1);
      _OWORD *v24 = v27;
      v24 -= 2;
      v25 -= 2;
      v26 -= 4;
    }
    while (v26);
    uint64_t v18 = v23;
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_31:
      do
      {
        uint64_t v28 = *(void *)(v18 - 8);
        v18 -= 8;
        *--uint64_t v13 = v28;
      }
      while (v18 != v19);
    }
    uint64_t v18 = *(void *)v3;
  }
  *(void *)uint64_t v3 = v13;
  *(void *)(v3 + 8) = result + 8 * a2;
  uint64_t v29 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = result + 8 * v12;
  if (v18) {
    return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 24) + 40))(*(void *)(v3 + 24), v18, v29 - v18);
  }
  return result;
}

uint64_t *std::vector<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::AnnotationTemplate,geo::StdAllocator<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::AnnotationTemplate,geo::codec::Allocator>>::~vector[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(void *)(v3 - 32);
        if (v5)
        {
          *(void *)(v3 - 24) = v5;
          (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v3 - 8) + 40))(*(void *)(v3 - 8), v5, *(void *)(v3 - 16) - v5);
        }
        v3 -= 40;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 40))(a1[3], v4, a1[2] - v4);
  }
  return a1;
}

geo::codec::Allocator **std::vector<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::AnnotationTemplate,geo::StdAllocator<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::AnnotationTemplate,geo::codec::Allocator>>::vector(geo::codec::Allocator **a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = geo::codec::Allocator::instance((geo::codec::Allocator *)a1);
  a1[3] = (geo::codec::Allocator *)v4;
  if (a2)
  {
    uint64_t v5 = 40 * a2;
    uint64_t v6 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 16))(v4, v5, 8);
    uint64_t v7 = v6;
    *a1 = v6;
    a1[1] = v6;
    unint64_t v8 = (geo::codec::Allocator *)((char *)v6 + v5);
    a1[2] = (geo::codec::Allocator *)((char *)v6 + v5);
    do
    {
      if (v7)
      {
        *((void *)v7 + 4) = 0;
        *(_OWORD *)uint64_t v7 = 0u;
        *((_OWORD *)v7 + 1) = 0u;
        uint64_t v6 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v6);
        *((void *)v7 + 4) = v6;
      }
      uint64_t v7 = (geo::codec::Allocator *)((char *)v7 + 40);
      v5 -= 40;
    }
    while (v5);
    a1[1] = v8;
  }
  return a1;
}

void sub_188FDB5DC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  if (*v1)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        uint64_t v6 = *(void *)(v4 - 32);
        if (v6)
        {
          *(void *)(v4 - 24) = v6;
          (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v4 - 8) + 40))(*(void *)(v4 - 8), v6, *(void *)(v4 - 16) - v6);
        }
        v4 -= 40;
      }
      while (v4 != v3);
      uint64_t v5 = *v1;
    }
    v1[1] = v3;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[3] + 40))(v1[3], v5, v1[2] - v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::ValueArraySpan,geo::StdAllocator<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::ValueArraySpan,geo::codec::Allocator>>::~vector[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 40))(a1[3], v2, a1[2] - v2);
  }
  return a1;
}

uint64_t *std::vector<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::ValueArraySpan,geo::StdAllocator<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::ValueArraySpan,geo::codec::Allocator>>::vector(uint64_t *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = geo::codec::Allocator::instance((geo::codec::Allocator *)a1);
  a1[3] = v4;
  if (a2)
  {
    uint64_t v5 = 12 * a2;
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 16))(v4, v5, 4);
    *a1 = v6;
    a1[1] = v6;
    uint64_t v7 = v6 + v5;
    a1[2] = v6 + v5;
    do
    {
      if (v6)
      {
        *(_DWORD *)(v6 + 8) = 0;
        *(void *)uint64_t v6 = 0;
      }
      v6 += 12;
      v5 -= 12;
    }
    while (v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_188FDB790(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  if (*v1)
  {
    v1[1] = v3;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[3] + 40))(v1[3], v3, v1[2] - v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<GeoCodecsMultiPolygonFeature,geo::StdAllocator<GeoCodecsMultiPolygonFeature,geo::codec::Allocator>>::operator=[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = v4;
    if (v5 != v4)
    {
      do
        GeoCodecsMultiPolygonFeature::~GeoCodecsMultiPolygonFeature((GeoCodecsMultiPolygonFeature *)(v5 - 128));
      while (v5 != v4);
      uint64_t v6 = *a1;
    }
    a1[1] = v4;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 40))(a1[3], v6, a1[2] - v6);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  return a1;
}

void std::vector<GeoCodecsMultiPolygonFeature,geo::StdAllocator<GeoCodecsMultiPolygonFeature,geo::codec::Allocator>>::resize(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = (v5 - *(void *)a1) >> 7;
  unint64_t v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 >= v6) {
      return;
    }
    uint64_t v24 = v4 + (a2 << 7);
    while (v5 != v24)
    {
      v5 -= 128;
      GeoCodecsMultiPolygonFeature::~GeoCodecsMultiPolygonFeature((GeoCodecsMultiPolygonFeature *)v5);
    }
LABEL_15:
    *(void *)(v3 + 8) = v24;
    return;
  }
  uint64_t v8 = *(void *)(a1 + 16);
  if (v7 <= (v8 - v5) >> 7)
  {
    uint64_t v24 = v5 + (v7 << 7);
    unint64_t v25 = (a2 << 7) - (v6 << 7);
    do
    {
      if (v5)
      {
        *(_OWORD *)(v5 + 96) = 0u;
        *(_OWORD *)(v5 + 112) = 0u;
        *(_OWORD *)(v5 + 64) = 0u;
        *(_OWORD *)(v5 + 80) = 0u;
        *(_OWORD *)(v5 + 32) = 0u;
        *(_OWORD *)(v5 + 48) = 0u;
        *(_OWORD *)uint64_t v5 = 0u;
        *(_OWORD *)(v5 + 16) = 0u;
        uint64_t v26 = (geo::codec::Allocator *)geo::codec::Allocator::instance((geo::codec::Allocator *)a1);
        *(void *)(v5 + 56) = v26;
        *(void *)(v5 + 64) = 0;
        *(void *)(v5 + 72) = 0;
        *(void *)(v5 + 80) = 0;
        long long v27 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v26);
        *(void *)(v5 + 88) = v27;
        *(void *)(v5 + 96) = 0;
        *(void *)(v5 + 104) = 0;
        *(void *)(v5 + 112) = 0;
        a1 = geo::codec::Allocator::instance(v27);
        *(void *)(v5 + 120) = a1;
      }
      v5 += 128;
      v25 -= 128;
    }
    while (v25);
    goto LABEL_15;
  }
  if (a2 >> 57) {
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = v8 - v4;
  uint64_t v10 = v9 >> 6;
  if (v9 >> 6 <= a2) {
    uint64_t v10 = a2;
  }
  BOOL v11 = (unint64_t)v9 >= 0x7FFFFFFFFFFFFF80;
  uint64_t v12 = 0x1FFFFFFFFFFFFFFLL;
  if (!v11) {
    uint64_t v12 = v10;
  }
  uint64_t v13 = v12 << 7;
  uint64_t v14 = (geo::codec::Allocator *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24), v12 << 7, 8);
  unint64_t v15 = v6 << 7;
  uint64_t v16 = (char *)v14 + 128 * v6;
  uint64_t v17 = (char *)v14 + v13;
  unint64_t v18 = a2 << 7;
  uint64_t v19 = (char *)v14 + 128 * a2;
  unint64_t v20 = v18 - v15;
  uint64_t v21 = v16;
  do
  {
    if (v21)
    {
      *((_OWORD *)v21 + 6) = 0u;
      *((_OWORD *)v21 + 7) = 0u;
      *((_OWORD *)v21 + 4) = 0u;
      *((_OWORD *)v21 + 5) = 0u;
      *((_OWORD *)v21 + 2) = 0u;
      *((_OWORD *)v21 + 3) = 0u;
      *(_OWORD *)uint64_t v21 = 0u;
      *((_OWORD *)v21 + 1) = 0u;
      uint64_t v22 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v14);
      *((void *)v21 + 7) = v22;
      *((void *)v21 + 8) = 0;
      *((void *)v21 + 9) = 0;
      *((void *)v21 + 10) = 0;
      uint64_t v23 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v22);
      *((void *)v21 + 11) = v23;
      *((void *)v21 + 12) = 0;
      *((void *)v21 + 13) = 0;
      *((void *)v21 + 14) = 0;
      uint64_t v14 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v23);
      *((void *)v21 + 15) = v14;
    }
    v21 += 128;
    v20 -= 128;
  }
  while (v20);
  uint64_t v28 = *(void *)v3;
  uint64_t v29 = *(void *)(v3 + 8);
  if (v29 == *(void *)v3)
  {
    *(void *)uint64_t v3 = v16;
    *(void *)(v3 + 8) = v19;
    uint64_t v35 = *(void *)(v3 + 16);
    *(void *)(v3 + 16) = v17;
    if (!v29) {
      return;
    }
LABEL_28:
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 24) + 40))(*(void *)(v3 + 24), v29, v35 - v29);
    return;
  }
  uint64_t v30 = 0;
  do
  {
    char v31 = &v16[v30];
    uint64_t v32 = v29 + v30;
    long long v33 = *(_OWORD *)(v29 + v30 - 128);
    *(_OWORD *)(v31 - 118) = *(_OWORD *)(v29 + v30 - 118);
    *((void *)v31 - 11) = 0;
    *((void *)v31 - 10) = 0;
    *((void *)v31 - 12) = 0;
    *((_OWORD *)v31 - 8) = v33;
    *((void *)v31 - 9) = *(void *)(v29 + v30 - 72);
    *((_OWORD *)v31 - 6) = *(_OWORD *)(v29 + v30 - 96);
    *((void *)v31 - 10) = *(void *)(v29 + v30 - 80);
    *(void *)(v32 - 96) = 0;
    *(void *)(v32 - 88) = 0;
    *(void *)(v32 - 80) = 0;
    *((void *)v31 - 8) = 0;
    *((void *)v31 - 7) = 0;
    *((void *)v31 - 6) = 0;
    *((void *)v31 - 5) = *(void *)(v29 + v30 - 40);
    *((_OWORD *)v31 - 4) = *(_OWORD *)(v29 + v30 - 64);
    *((void *)v31 - 6) = *(void *)(v29 + v30 - 48);
    *(void *)(v32 - 64) = 0;
    *(void *)(v32 - 56) = 0;
    *(void *)(v32 - 48) = 0;
    *((void *)v31 - 4) = 0;
    *((void *)v31 - 3) = 0;
    *((void *)v31 - 2) = 0;
    *((void *)v31 - 1) = *(void *)(v29 + v30 - 8);
    *((_OWORD *)v31 - 2) = *(_OWORD *)(v29 + v30 - 32);
    *((void *)v31 - 2) = *(void *)(v29 + v30 - 16);
    *(void *)(v32 - 32) = 0;
    *(void *)(v32 - 24) = 0;
    *(void *)(v32 - 16) = 0;
    v30 -= 128;
  }
  while (v29 + v30 != v28);
  uint64_t v29 = *(void *)v3;
  uint64_t v34 = *(void *)(v3 + 8);
  *(void *)uint64_t v3 = &v16[v30];
  *(void *)(v3 + 8) = v19;
  uint64_t v35 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = v17;
  while (v34 != v29)
    GeoCodecsMultiPolygonFeature::~GeoCodecsMultiPolygonFeature((GeoCodecsMultiPolygonFeature *)(v34 - 128));
  if (v29) {
    goto LABEL_28;
  }
}

void std::vector<GeoCodecsPhysicalFeature,geo::StdAllocator<GeoCodecsPhysicalFeature,geo::codec::Allocator>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (_OWORD *)a1[1];
  unint64_t v6 = 0x2E8BA2E8BA2E8BA3 * (((uint64_t)v5 - *a1) >> 4);
  unint64_t v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 >= v6) {
      return;
    }
    unint64_t v18 = (_OWORD *)(v4 + 176 * a2);
    if (v5 == v18)
    {
LABEL_27:
      a1[1] = (uint64_t)v18;
      return;
    }
    while (1)
    {
      uint64_t v19 = (std::__shared_weak_count *)*((void *)v5 - 18);
      if (v19)
      {
        if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          break;
        }
      }
      unint64_t v20 = (std::__shared_weak_count *)*((void *)v5 - 21);
      if (v20) {
        goto LABEL_20;
      }
LABEL_16:
      v5 -= 11;
      if (v5 == v18) {
        goto LABEL_27;
      }
    }
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    unint64_t v20 = (std::__shared_weak_count *)*((void *)v5 - 21);
    if (!v20) {
      goto LABEL_16;
    }
LABEL_20:
    std::__shared_weak_count::__release_weak(v20);
    goto LABEL_16;
  }
  uint64_t v8 = a1[2];
  if (0x2E8BA2E8BA2E8BA3 * ((v8 - (uint64_t)v5) >> 4) >= v7)
  {
    unint64_t v18 = &v5[11 * v7];
    uint64_t v21 = 176 * a2 - 16 * (((uint64_t)v5 - *a1) >> 4);
    do
    {
      if (v5)
      {
        v5[9] = 0uLL;
        v5[10] = 0uLL;
        v5[7] = 0uLL;
        v5[8] = 0uLL;
        v5[5] = 0uLL;
        v5[6] = 0uLL;
        v5[3] = 0uLL;
        v5[4] = 0uLL;
        v5[1] = 0uLL;
        v5[2] = 0uLL;
        *uint64_t v5 = 0uLL;
      }
      v5 += 11;
      v21 -= 176;
    }
    while (v21);
    goto LABEL_27;
  }
  if (a2 > 0x1745D1745D1745DLL) {
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v9 = 0x2E8BA2E8BA2E8BA3 * ((v8 - v4) >> 4);
  uint64_t v10 = 2 * v9;
  if (2 * v9 <= a2) {
    uint64_t v10 = a2;
  }
  if (v9 >= 0xBA2E8BA2E8BA2ELL) {
    uint64_t v11 = 0x1745D1745D1745DLL;
  }
  else {
    uint64_t v11 = v10;
  }
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 16))(a1[3], 176 * v11, 8);
  uint64_t v13 = (_OWORD *)(v12 + 176 * v6);
  unint64_t v14 = v12 + 176 * a2;
  uint64_t v15 = 176 * a2 - 176 * v6;
  __n128 v16 = 0uLL;
  uint64_t v17 = v13;
  do
  {
    if (v17)
    {
      v17[9] = 0uLL;
      v17[10] = 0uLL;
      v17[7] = 0uLL;
      v17[8] = 0uLL;
      v17[5] = 0uLL;
      v17[6] = 0uLL;
      v17[3] = 0uLL;
      v17[4] = 0uLL;
      v17[1] = 0uLL;
      v17[2] = 0uLL;
      *uint64_t v17 = 0uLL;
    }
    v17 += 11;
    v15 -= 176;
  }
  while (v15);
  uint64_t v22 = v12 + 176 * v11;
  uint64_t v23 = *a1;
  uint64_t v24 = a1[1];
  if (v24 == *a1)
  {
    *a1 = (uint64_t)v13;
    a1[1] = v14;
    uint64_t v34 = a1[2];
    a1[2] = v22;
  }
  else
  {
    unint64_t v25 = 0;
    do
    {
      uint64_t v26 = &v13[v25 / 0x10];
      uint64_t v27 = v24 + v25;
      *(v26 - 11) = *(_OWORD *)(v24 + v25 - 176);
      *(void *)(v27 - 176) = 0;
      *(void *)(v27 - 168) = 0;
      *(v26 - 10) = *(_OWORD *)(v24 + v25 - 160);
      *((void *)v26 - 18) = *(void *)(v24 + v25 - 144);
      *(void *)(v27 - 152) = 0;
      *(void *)(v27 - 144) = 0;
      long long v28 = *(_OWORD *)(v24 + v25 - 136);
      long long v29 = *(_OWORD *)(v24 + v25 - 120);
      *((_DWORD *)v26 - 26) = *(_DWORD *)(v24 + v25 - 104);
      *(_OWORD *)((char *)v26 - 120) = v29;
      *(_OWORD *)((char *)v26 - 136) = v28;
      long long v30 = *(_OWORD *)(v24 + v25 - 96);
      *((void *)v26 - 10) = *(void *)(v24 + v25 - 80);
      *(v26 - 6) = v30;
      __n128 v16 = *(__n128 *)(v24 + v25 - 72);
      long long v31 = *(_OWORD *)(v24 + v25 - 56);
      long long v32 = *(_OWORD *)(v24 + v25 - 40);
      *(_OWORD *)((char *)v26 - 29) = *(_OWORD *)(v24 + v25 - 29);
      *(_OWORD *)((char *)v26 - 40) = v32;
      *(_OWORD *)((char *)v26 - 56) = v31;
      *(__n128 *)((char *)v26 - 72) = v16;
      *(void *)((char *)v26 - 12) = *(void *)(v24 + v25 - 12);
      v25 -= 176;
    }
    while (v24 + v25 != v23);
    uint64_t v24 = *a1;
    uint64_t v33 = a1[1];
    *a1 = (uint64_t)&v13[v25 / 0x10];
    a1[1] = v14;
    uint64_t v34 = a1[2];
    a1[2] = v22;
    if (v33 != v24)
    {
      while (1)
      {
        uint64_t v35 = *(std::__shared_weak_count **)(v33 - 144);
        if (v35)
        {
          if (!atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
            break;
          }
        }
        BOOL v36 = *(std::__shared_weak_count **)(v33 - 168);
        if (v36) {
          goto LABEL_37;
        }
LABEL_33:
        v33 -= 176;
        if (v33 == v24) {
          goto LABEL_41;
        }
      }
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
      BOOL v36 = *(std::__shared_weak_count **)(v33 - 168);
      if (!v36) {
        goto LABEL_33;
      }
LABEL_37:
      std::__shared_weak_count::__release_weak(v36);
      goto LABEL_33;
    }
  }
LABEL_41:
  if (v24) {
    (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(void *)a1[3] + 40))(a1[3], v24, v34 - v24, v16);
  }
}

uint64_t std::vector<GeoCodecsAnnotationValue,geo::StdAllocator<GeoCodecsAnnotationValue,geo::codec::Allocator>>::resize(uint64_t result, unint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *(void *)result;
  uint64_t v4 = *(void **)(result + 8);
  unint64_t v6 = ((uint64_t)v4 - *(void *)result) >> 4;
  unint64_t v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 >= v6) {
      return result;
    }
    uint64_t v15 = (void *)(v5 + 16 * a2);
LABEL_15:
    *(void *)(result + 8) = v15;
    return result;
  }
  uint64_t v8 = *(void *)(result + 16);
  if (v7 <= (v8 - (uint64_t)v4) >> 4)
  {
    uint64_t v15 = &v4[2 * v7];
    uint64_t v16 = 16 * a2 - 16 * v6;
    do
    {
      if (v4)
      {
        *uint64_t v4 = 0;
        v4[1] = 0;
      }
      v4 += 2;
      v16 -= 16;
    }
    while (v16);
    goto LABEL_15;
  }
  if (a2 >> 60) {
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v9 = v8 - v5;
  unint64_t v10 = (v8 - v5) >> 3;
  if (v10 <= a2) {
    unint64_t v10 = a2;
  }
  if (v9 >= 0x7FFFFFFFFFFFFFF0) {
    uint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v11 = v10;
  }
  uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(result + 24) + 16))(*(void *)(result + 24), 16 * v11, 8);
  uint64_t v12 = (void *)(result + 16 * v6);
  uint64_t v13 = 16 * a2 - 16 * v6;
  unint64_t v14 = v12;
  do
  {
    if (v14)
    {
      *unint64_t v14 = 0;
      v14[1] = 0;
    }
    v14 += 2;
    v13 -= 16;
  }
  while (v13);
  uint64_t v18 = *(void *)v3;
  uint64_t v17 = *(void *)(v3 + 8);
  if (v17 != *(void *)v3)
  {
    do
    {
      *((_OWORD *)v12 - 1) = *(_OWORD *)(v17 - 16);
      v12 -= 2;
      v17 -= 16;
    }
    while (v17 != v18);
    uint64_t v17 = *(void *)v3;
  }
  *(void *)uint64_t v3 = v12;
  *(void *)(v3 + 8) = result + 16 * a2;
  uint64_t v19 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = result + 16 * v11;
  if (v17) {
    return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 24) + 40))(*(void *)(v3 + 24), v17, v19 - v17);
  }
  return result;
}

uint64_t std::vector<GeoCodecsAnnotation,geo::StdAllocator<GeoCodecsAnnotation,geo::codec::Allocator>>::resize(uint64_t result, unint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *(void *)result;
  uint64_t v4 = *(void **)(result + 8);
  unint64_t v6 = ((uint64_t)v4 - *(void *)result) >> 4;
  unint64_t v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 >= v6) {
      return result;
    }
    uint64_t v15 = (void *)(v5 + 16 * a2);
LABEL_15:
    *(void *)(result + 8) = v15;
    return result;
  }
  uint64_t v8 = *(void *)(result + 16);
  if (v7 <= (v8 - (uint64_t)v4) >> 4)
  {
    uint64_t v15 = &v4[2 * v7];
    uint64_t v16 = 16 * a2 - 16 * v6;
    do
    {
      if (v4)
      {
        *uint64_t v4 = 0;
        v4[1] = 0;
      }
      v4 += 2;
      v16 -= 16;
    }
    while (v16);
    goto LABEL_15;
  }
  if (a2 >> 60) {
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v9 = v8 - v5;
  unint64_t v10 = (v8 - v5) >> 3;
  if (v10 <= a2) {
    unint64_t v10 = a2;
  }
  if (v9 >= 0x7FFFFFFFFFFFFFF0) {
    uint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v11 = v10;
  }
  uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(result + 24) + 16))(*(void *)(result + 24), 16 * v11, 4);
  uint64_t v12 = (void *)(result + 16 * v6);
  uint64_t v13 = 16 * a2 - 16 * v6;
  unint64_t v14 = v12;
  do
  {
    if (v14)
    {
      *unint64_t v14 = 0;
      v14[1] = 0;
    }
    v14 += 2;
    v13 -= 16;
  }
  while (v13);
  uint64_t v18 = *(void *)v3;
  uint64_t v17 = *(void *)(v3 + 8);
  if (v17 != *(void *)v3)
  {
    do
    {
      *((_OWORD *)v12 - 1) = *(_OWORD *)(v17 - 16);
      v12 -= 2;
      v17 -= 16;
    }
    while (v17 != v18);
    uint64_t v17 = *(void *)v3;
  }
  *(void *)uint64_t v3 = v12;
  *(void *)(v3 + 8) = result + 16 * a2;
  uint64_t v19 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = result + 16 * v11;
  if (v17) {
    return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 24) + 40))(*(void *)(v3 + 24), v17, v19 - v17);
  }
  return result;
}

BOOL geo::codec::decodeAttributeSet<GeoCodecsFeature>(int a1, uint64_t *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v90 = 0;
  char v91 = 0;
  long long v89 = 0uLL;
  uint64_t v87 = 0;
  v88 = 0;
  unint64_t v6 = a2[2];
  unint64_t v7 = 8 * a2[1];
  if (v6 + 5 > v7) {
    goto LABEL_17;
  }
  LODWORD(v10) = 0;
  uint64_t v11 = *a2;
  unint64_t v12 = 5;
  do
  {
    unint64_t v13 = 8 - (v6 & 7);
    if (v12 < v13) {
      unint64_t v13 = v12;
    }
    unint64_t v10 = (*(unsigned __int8 *)(v11 + (v6 >> 3)) >> (8 - (v6 & 7) - v13)) & ~(-1 << v13) | (v10 << v13);
    v6 += v13;
    a2[2] = v6;
    v12 -= v13;
  }
  while (v12);
  if (v6 + 5 > v7) {
    goto LABEL_17;
  }
  LODWORD(v14) = 0;
  unint64_t v15 = 5;
  do
  {
    unint64_t v16 = 8 - (v6 & 7);
    if (v15 < v16) {
      unint64_t v16 = v15;
    }
    unint64_t v14 = (*(unsigned __int8 *)(v11 + (v6 >> 3)) >> (8 - (v6 & 7) - v16)) & ~(-1 << v16) | (v14 << v16);
    v6 += v16;
    a2[2] = v6;
    v15 -= v16;
  }
  while (v15);
  if (v6 + 5 > v7) {
    goto LABEL_17;
  }
  LODWORD(v17) = 0;
  unint64_t v18 = 5;
  do
  {
    unint64_t v19 = 8 - (v6 & 7);
    if (v18 < v19) {
      unint64_t v19 = v18;
    }
    unint64_t v17 = (*(unsigned __int8 *)(v11 + (v6 >> 3)) >> (8 - (v6 & 7) - v19)) & ~(-1 << v19) | (v17 << v19);
    v6 += v19;
    a2[2] = v6;
    v18 -= v19;
  }
  while (v18);
  if (v6 + 5 > v7)
  {
LABEL_17:
    BOOL v20 = 0;
    goto LABEL_18;
  }
  LODWORD(v25) = 0;
  unint64_t v26 = 5;
  do
  {
    unint64_t v27 = 8 - (v6 & 7);
    if (v26 < v27) {
      unint64_t v27 = v26;
    }
    unint64_t v25 = (*(unsigned __int8 *)(v11 + (v6 >> 3)) >> (8 - (v6 & 7) - v27)) & ~(-1 << v27) | (v25 << v27);
    v6 += v27;
    a2[2] = v6;
    v26 -= v27;
  }
  while (v26);
  if (!a3)
  {
    BOOL v20 = 1;
    goto LABEL_18;
  }
  uint64_t v85 = 0;
  BOOL v20 = 0;
  unint64_t v81 = a3;
  while (1)
  {
    if (v90)
    {
      geo::codec::copyFeatureStyleAttributes(&v86, v90);
      long long v28 = v86;
      long long v86 = 0uLL;
      long long v29 = (std::__shared_weak_count *)*((void *)&v89 + 1);
      long long v89 = v28;
      if (!v29) {
        goto LABEL_42;
      }
LABEL_40:
      if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
      goto LABEL_42;
    }
    _ZNSt3__115allocate_sharedB8ne180100I22FeatureStyleAttributesNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v86);
    uint64_t v30 = v86;
    if (a1 != -1)
    {
      long long v31 = *(_DWORD **)v86;
      *long long v31 = 5;
      v31[1] = a1;
      *(unsigned char *)(v30 + 33) = 1;
    }
    *(unsigned char *)(v30 + 34) = a1;
    uint64_t v32 = *((void *)&v86 + 1);
    long long v86 = 0uLL;
    long long v29 = (std::__shared_weak_count *)*((void *)&v89 + 1);
    *(void *)&long long v89 = v30;
    *((void *)&v89 + 1) = v32;
    if (v29) {
      goto LABEL_40;
    }
LABEL_42:
    uint64_t v33 = (std::__shared_weak_count *)*((void *)&v86 + 1);
    if (*((void *)&v86 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v86 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
    unint64_t v34 = a2[2];
    unint64_t v35 = 8 * a2[1];
    if (v34 + v17 > v35) {
      goto LABEL_18;
    }
    if (v17)
    {
      int v36 = 0;
      uint64_t v37 = *a2;
      unint64_t v38 = v17;
      do
      {
        unint64_t v39 = 8 - (v34 & 7);
        if (v38 < v39) {
          unint64_t v39 = v38;
        }
        int v36 = (*(unsigned __int8 *)(v37 + (v34 >> 3)) >> (8 - (v34 & 7) - v39)) & ~(-1 << v39) | (v36 << v39);
        v34 += v39;
        a2[2] = v34;
        v38 -= v39;
      }
      while (v38);
      if (v36)
      {
        int v40 = 0;
        uint64_t v41 = (uint64_t *)v89;
        do
        {
          if (v34 + v10 > v35) {
            goto LABEL_18;
          }
          int v42 = 0;
          if (v10)
          {
            unint64_t v43 = v10;
            do
            {
              unint64_t v44 = 8 - (v34 & 7);
              if (v43 < v44) {
                unint64_t v44 = v43;
              }
              int v42 = (*(unsigned __int8 *)(v37 + (v34 >> 3)) >> (8 - (v34 & 7) - v44)) & ~(-1 << v44) | (v42 << v44);
              v34 += v44;
              a2[2] = v34;
              v43 -= v44;
            }
            while (v43);
          }
          if (v34 + v14 > v35) {
            goto LABEL_18;
          }
          int v45 = 0;
          if (v14)
          {
            unint64_t v46 = v14;
            do
            {
              unint64_t v47 = 8 - (v34 & 7);
              if (v46 < v47) {
                unint64_t v47 = v46;
              }
              int v45 = (*(unsigned __int8 *)(v37 + (v34 >> 3)) >> (8 - (v34 & 7) - v47)) & ~(-1 << v47) | (v45 << v47);
              v34 += v47;
              a2[2] = v34;
              v46 -= v47;
            }
            while (v46);
          }
          unsigned int v48 = *((unsigned __int8 *)v41 + 33);
          uint64_t v49 = *v41;
          if (*((unsigned char *)v41 + 33))
          {
            uint64_t v50 = *((unsigned __int8 *)v41 + 33);
            size_t v51 = (int *)(v49 + 4);
            uint64_t v52 = v50;
            do
            {
              if (*(v51 - 1) == v42)
              {
                *size_t v51 = v45;
                goto LABEL_54;
              }
              v51 += 2;
              --v52;
            }
            while (v52);
            if (v48 > 0x1F) {
              goto LABEL_54;
            }
          }
          else
          {
            uint64_t v50 = 0;
          }
          uint64_t v53 = (int *)(v49 + 8 * v50);
          *uint64_t v53 = v42;
          v53[1] = v45;
          *((unsigned char *)v41 + 33) = v48 + 1;
LABEL_54:
          ++v40;
        }
        while (v40 != v36);
      }
    }
    if (v34 + v25 > v35) {
      goto LABEL_18;
    }
    if (v25)
    {
      int v54 = 0;
      uint64_t v55 = *a2;
      unint64_t v56 = v25;
      do
      {
        unint64_t v57 = 8 - (v34 & 7);
        if (v56 < v57) {
          unint64_t v57 = v56;
        }
        int v54 = (*(unsigned __int8 *)(v55 + (v34 >> 3)) >> (8 - (v34 & 7) - v57)) & ~(-1 << v57) | (v54 << v57);
        v34 += v57;
        a2[2] = v34;
        v56 -= v57;
      }
      while (v56);
      if (v54) {
        break;
      }
    }
    uint64_t v65 = v89;
    LODWORD(v59) = *(unsigned __int8 *)(v89 + 33);
LABEL_97:
    qsort(*(void **)v65, v59, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
    *(void *)&long long v86 = v65;
    *((void *)&v86 + 1) = *((void *)&v89 + 1);
    if (*((void *)&v89 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v89 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    unsigned int v69 = FeatureStyleAttributesSet::insert(a4, (uint64_t *)&v86);
    uint64_t v71 = *v69;
    uint64_t v70 = v69[1];
    if (v70) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v70 + 8), 1uLL, memory_order_relaxed);
    }
    v72 = v88;
    uint64_t v87 = v71;
    v88 = (std::__shared_weak_count *)v70;
    if (v72 && !atomic_fetch_add(&v72->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
    unint64_t v73 = (std::__shared_weak_count *)*((void *)&v86 + 1);
    if (*((void *)&v86 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v86 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
    uint64_t v75 = v87;
    size_t v74 = v88;
    if (v88) {
      atomic_fetch_add_explicit(&v88->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v76 = a5 + v85 * a6;
    uint64_t v77 = *(std::__shared_weak_count **)(v76 + 32);
    *(void *)(v76 + 24) = v75;
    *(void *)(v76 + 32) = v74;
    if (v77 && !atomic_fetch_add(&v77->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
    uint64_t v79 = v87;
    size_t v78 = v88;
    if (v88) {
      atomic_fetch_add_explicit(&v88->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v80 = v91;
    uint64_t v90 = v79;
    char v91 = v78;
    if (v80 && !atomic_fetch_add(&v80->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
    BOOL v20 = ++v85 >= v81;
    if (v85 == v81) {
      goto LABEL_18;
    }
  }
  int v58 = 0;
  while (1)
  {
    unint64_t v60 = a2[2];
    if (v60 + v10 > 8 * a2[1]) {
      break;
    }
    int v61 = 0;
    if (v10)
    {
      uint64_t v62 = *a2;
      unint64_t v63 = v10;
      do
      {
        unint64_t v64 = 8 - (v60 & 7);
        if (v63 < v64) {
          unint64_t v64 = v63;
        }
        int v61 = (*(unsigned __int8 *)(v62 + (v60 >> 3)) >> (8 - (v60 & 7) - v64)) & ~(-1 << v64) | (v61 << v64);
        v60 += v64;
        a2[2] = v60;
        v63 -= v64;
      }
      while (v63);
    }
    uint64_t v65 = v89;
    LODWORD(v59) = *(unsigned __int8 *)(v89 + 33);
    if (*(unsigned char *)(v89 + 33))
    {
      uint64_t v66 = *(void *)v89;
      uint64_t v67 = *(unsigned __int8 *)(v89 + 33);
      v68 = *(_DWORD **)v89;
      while (*v68 != v61)
      {
        v68 += 2;
        if (!--v67) {
          goto LABEL_84;
        }
      }
      *(unsigned char *)(v89 + 33) = v59 - 1;
      *(void *)v68 = *(void *)(v66 + 8 * (v59 - 1));
      uint64_t v59 = *(unsigned __int8 *)(v65 + 33);
      *(void *)(*(void *)v65 + 8 * v59) = -1;
    }
LABEL_84:
    if (++v58 == v54) {
      goto LABEL_97;
    }
  }
LABEL_18:
  uint64_t v21 = v88;
  if (v88 && !atomic_fetch_add(&v88->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  uint64_t v22 = (std::__shared_weak_count *)*((void *)&v89 + 1);
  if (*((void *)&v89 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v89 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  uint64_t v23 = v91;
  if (v91 && !atomic_fetch_add(&v91->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  return v20;
}

void sub_188FDCACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_188FDCFA4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLogMsgStateDeviceConnectionReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 36))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOLogMsgStateDeviceConnectionReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 40));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 32) = [v8 position];
  *(_DWORD *)(a1 + 36) = [v8 length];
  if (a3) {
    unint64_t v9 = (int *)&GEOLogMsgStateDeviceConnectionReadAllFrom_recursiveTag;
  }
  else {
    unint64_t v9 = (int *)&GEOLogMsgStateDeviceConnectionReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOLogMsgStateDeviceConnectionReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
  return Specified;
}

void sub_188FDD2A0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEODodgeballDetailsReadAllFrom(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    uint64_t v4 = (int *)MEMORY[0x1E4F940E8];
    uint64_t v5 = (int *)MEMORY[0x1E4F940E0];
    unint64_t v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v3[*v6]) {
          break;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          BOOL v15 = v9++ >= 9;
          if (v15)
          {
            unint64_t v10 = 0;
            int v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v16 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v16 || (v10 & 7) == 4) {
          break;
        }
        if ((v10 >> 3) == 1)
        {
          char v18 = 0;
          unsigned int v19 = 0;
          uint64_t v20 = 0;
          *(unsigned char *)(a1 + 12) |= 1u;
          while (1)
          {
            uint64_t v21 = *v4;
            uint64_t v22 = *(void *)&v3[v21];
            unint64_t v23 = v22 + 1;
            if (v22 == -1 || v23 > *(void *)&v3[*v5]) {
              break;
            }
            char v24 = *(unsigned char *)(*(void *)&v3[*v7] + v22);
            *(void *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0) {
              goto LABEL_30;
            }
            v18 += 7;
            BOOL v15 = v19++ >= 9;
            if (v15)
            {
              LODWORD(v20) = 0;
              goto LABEL_32;
            }
          }
          v3[*v6] = 1;
LABEL_30:
          if (v3[*v6]) {
            LODWORD(v20) = 0;
          }
LABEL_32:
          *(_DWORD *)(a1 + 8) = v20;
        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_35;
        }
      }
      while (*(void *)&v3[*v4] < *(void *)&v3[*v5]);
    }
    BOOL v25 = v3[*v6] == 0;
  }
  else
  {
LABEL_35:
    BOOL v25 = 0;
  }
  objc_sync_exit(v3);

  return v25;
}

void sub_188FDD4E0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey>::get_navigable_outgoing_roads(uint64_t a1, uint64_t a2, void *a3)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 64))(a1);
  uint64_t v5 = (_OWORD *)*a3;
  unint64_t v6 = (_OWORD *)a3[1];
  if ((_OWORD *)*a3 == v6) {
    goto LABEL_21;
  }
  unint64_t v7 = (_OWORD *)a3[1];
  while (1)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, _OWORD *, void))(*(void *)a1 + 32))(&v12, a1, v5, 0);
    int v8 = v15;
    if (v17 < 0) {
      operator delete(__p);
    }
    if (v13)
    {
      char v14 = v13;
      operator delete(v13);
    }
    if (!v8) {
      break;
    }
    v5 += 2;
    if (v5 == v6) {
      goto LABEL_22;
    }
  }
  if (v5 != v6)
  {
    unsigned int v9 = v5 + 2;
    if (v5 + 2 != v6)
    {
      unint64_t v7 = v5;
      do
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t, _OWORD *, void))(*(void *)a1 + 32))(&v12, a1, v9, 0);
        int v10 = v15;
        if (v17 < 0) {
          operator delete(__p);
        }
        if (v13)
        {
          char v14 = v13;
          operator delete(v13);
        }
        if (v10)
        {
          long long v11 = v9[1];
          _OWORD *v7 = *v9;
          v7[1] = v11;
          v7 += 2;
        }
        v9 += 2;
      }
      while (v9 != v6);
      goto LABEL_22;
    }
LABEL_21:
    unint64_t v7 = v5;
  }
LABEL_22:
  if ((_OWORD *)a3[1] != v7) {
    a3[1] = v7;
  }
}

uint64_t geo::codec::decodeIntCompressorArray<long long>(void *a1, uint64_t *a2, char a3, char a4, unint64_t a5, uint64x2_t *a6)
{
  int v17 = 0;
  if (!a2) {
    return 0;
  }
  uint64_t result = geo::codec::chapterReadVarUint32(a1, (unsigned int *)&v17);
  if (result)
  {
    uint64_t v13 = v17;
    uint64_t v14 = a1[6];
    unint64_t v15 = v14 + v17;
    if (v15 <= a1[7])
    {
      int v16 = (unsigned __int8 *)(a1[5] + v14);
      a1[6] = v15;
      return mgcl::ints::IntDecompressor<long long>::decompress(a2, v16, v13, a3, a4, a5, a6) == 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t geo::codec::decodeIntCompressorArray<long long>(void *a1, uint64_t *a2, char a3, char a4, uint64_t a5)
{
  uint64_t v5 = *(uint64x2_t **)a5;
  uint64_t v6 = *(void *)(a5 + 8);
  int v16 = 0;
  if (!a2) {
    return 0;
  }
  uint64_t result = geo::codec::chapterReadVarUint32(a1, (unsigned int *)&v16);
  if (result)
  {
    uint64_t v12 = v16;
    uint64_t v13 = a1[6];
    unint64_t v14 = v13 + v16;
    if (v14 <= a1[7])
    {
      unint64_t v15 = (unsigned __int8 *)(a1[5] + v13);
      a1[6] = v14;
      return mgcl::ints::IntDecompressor<long long>::decompress(a2, v15, v12, a3, a4, (v6 - (uint64_t)v5) >> 3, v5) == 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void std::__function::__func<geo::codec::_readStyleAttributeRasters(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&,BOOL)::$_0,std::allocator<geo::codec::_readStyleAttributeRasters(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&,BOOL)::$_0>,void ()(VMP4Chapter *)>::operator()(uint64_t a1, void **a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  uint64_t v6 = *v4;
  uint64_t v5 = (std::__shared_weak_count *)v4[1];
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if (**(void **)(a1 + 16) >= (unint64_t)(*(void *)(**(void **)(a1 + 8) + 2832)
                                                  + 24 * **(void **)(a1 + 24)))
  {
    uint64_t v12 = (FILE *)*MEMORY[0x1E4F143C8];
    int v13 = 10034;
  }
  else
  {
    unsigned int v46 = 0;
    uint64_t v8 = geo::codec::chapterReadVarUint32(v3, &v46);
    if (v8)
    {
      if (**(unsigned char **)(a1 + 32) && v46 == 71) {
        goto LABEL_16;
      }
      uint64_t v9 = **(void **)(a1 + 16);
      *(_DWORD *)(v9 + 12) = v46;
      uint64_t v10 = v3[6];
      uint64_t v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) <= v3[7])
      {
        int v19 = *(unsigned __int8 *)(v3[5] + v10);
        v3[6] = v11;
        if (v19 == 1)
        {
          char v20 = 0;
        }
        else
        {
          if (v19 != 2)
          {
            uint64_t v12 = (FILE *)*MEMORY[0x1E4F143C8];
            int v13 = 10053;
            goto LABEL_11;
          }
          char v20 = 1;
        }
        *(unsigned char *)(v9 + 16) = v20;
        unsigned int v45 = 0;
        uint64_t v8 = geo::codec::chapterReadVarUint32(v3, &v45);
        if ((v8 & 1) == 0)
        {
          uint64_t v12 = (FILE *)*MEMORY[0x1E4F143C8];
          int v13 = 10057;
          goto LABEL_11;
        }
        uint64_t v21 = *(uint64_t **)(a1 + 16);
        uint64_t v22 = *v21;
        if (*(unsigned char *)(*v21 + 16) == 1)
        {
          uint64_t v44 = 0;
          uint64_t v41 = 0;
          uint64_t v42 = 0;
          int v43 = 0;
          int v40 = 0;
          *(_OWORD *)__p = 0u;
          long long v39 = 0u;
          *(_OWORD *)uint64_t v37 = 0u;
          uint64_t v28 = v3[6];
          uint64_t v29 = v3[5] + v28;
          uint64_t v30 = v45;
          v3[6] = v28 + v45;
          if (mgcl::raster::PolygonRasterDecoder<unsigned char>::decode((uint64_t)v37, v29, v30, (uint64_t)&v41, 0))
          {
            fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 10073);
            int v31 = 6;
          }
          else
          {
            int v31 = 0;
            uint64_t v32 = v44;
            uint64_t v44 = 0;
            uint64_t v33 = *(uint64_t ***)(a1 + 16);
            **uint64_t v33 = v32;
            unint64_t v34 = *v33;
            unsigned __int16 v35 = (unsigned __int16)v41;
            LOWORD(v33) = v42;
            *((_WORD *)v34 + 9) = v42;
            *((_WORD *)v34 + 10) = v35;
            *((_DWORD *)v34 + 2) = v35 * (unsigned __int16)v33;
          }
          int v36 = v40;
          int v40 = 0;
          if (v36)
          {
            mgcl::iarray::Decoder::~Decoder(v36);
            MEMORY[0x18C11F580]();
          }
          if (__p[1])
          {
            *(void **)&long long v39 = __p[1];
            operator delete(__p[1]);
          }
          if (v37[0])
          {
            v37[1] = v37[0];
            operator delete(v37[0]);
          }
          uint64_t v8 = v44;
          uint64_t v44 = 0;
          if (v8) {
            uint64_t v8 = MEMORY[0x18C11F560](v8, 0x1000C8077774924);
          }
          if (v31 == 6) {
            goto LABEL_12;
          }
          uint64_t v21 = *(uint64_t **)(a1 + 16);
          uint64_t v22 = *v21;
        }
        else if (!*(unsigned char *)(*v21 + 16))
        {
          uint64_t v23 = geo::codec::Allocator::instance((geo::codec::Allocator *)v8);
          uint64_t v24 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v23 + 16))(v23, v45, 8);
          BOOL v25 = *(void ****)(a1 + 16);
          **BOOL v25 = (void *)v24;
          uint64_t v26 = v45;
          uint64_t v27 = v3[6];
          if (v27 + (unint64_t)v45 > v3[7])
          {
            uint64_t v12 = (FILE *)*MEMORY[0x1E4F143C8];
            int v13 = 10063;
            goto LABEL_11;
          }
          uint64_t v8 = (uint64_t)memcpy(**v25, (const void *)(v3[5] + v27), v45);
          v3[6] += v26;
          uint64_t v21 = *(uint64_t **)(a1 + 16);
          uint64_t v22 = *v21;
          *(_DWORD *)(*v21 + 8) = v45;
        }
        *uint64_t v21 = v22 + 24;
        ++*(_WORD *)(**(void **)(a1 + 8) + 2840);
        char v14 = 1;
        goto LABEL_13;
      }
      uint64_t v12 = (FILE *)*MEMORY[0x1E4F143C8];
      int v13 = 10046;
    }
    else
    {
      uint64_t v12 = (FILE *)*MEMORY[0x1E4F143C8];
      int v13 = 10037;
    }
  }
LABEL_11:
  uint64_t v8 = fprintf(v12, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v13);
LABEL_12:
  char v14 = 0;
LABEL_13:
  unint64_t v15 = *(char **)(a1 + 48);
  if (!*v15) {
    char v14 = 0;
  }
  *unint64_t v15 = v14;
LABEL_16:
  if (v3 && **(void **)(a1 + 40))
  {
    if (*(unsigned char *)v3)
    {
      uint64_t v16 = geo::codec::Allocator::instance((geo::codec::Allocator *)v8);
      uint64_t v8 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v16 + 40))(v16, v3[5], 0);
    }
    uint64_t v17 = geo::codec::Allocator::instance((geo::codec::Allocator *)v8);
    (*(void (**)(uint64_t, void *, void))(*(void *)v17 + 40))(v17, v3, 0);
  }
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = std::chrono::steady_clock::now().__d_.__rep_;
  uint64_t v41 = "ChapterStyleAttributeRaster2";
  v37[0] = &v41;
  *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v6 + 1912, (uint64_t *)&v41, (uint64_t)&std::piecewise_construct, (uint64_t **)v37)+ 4) = (double)((rep - v7.__d_.__rep_) / 1000) * 0.001;
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_188FDE04C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, const char **a11, const char **a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, mgcl::iarray::Decoder *a17, uint64_t a18, const char *a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v26 = a17;
  a17 = 0;
  if (v26)
  {
    mgcl::iarray::Decoder::~Decoder(v26);
    MEMORY[0x18C11F580]();
    uint64_t v27 = __p;
    if (!__p)
    {
LABEL_3:
      uint64_t v28 = a11;
      if (!a11) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v27 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  a15 = (uint64_t)v27;
  operator delete(v27);
  uint64_t v28 = a11;
  if (!a11)
  {
LABEL_4:
    uint64_t v29 = a22;
    a22 = 0;
    if (!v29)
    {
LABEL_10:
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = std::chrono::steady_clock::now().__d_.__rep_;
      a19 = "ChapterStyleAttributeRaster2";
      a11 = &a19;
      *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v24 + 1912, (uint64_t *)&a19, (uint64_t)&std::piecewise_construct, (uint64_t **)&a11)+ 4) = (double)((rep - v23) / 1000) * 0.001;
      if (v22)
      {
        if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      _Unwind_Resume(a1);
    }
LABEL_9:
    MEMORY[0x18C11F560](v29, 0x1000C8077774924);
    goto LABEL_10;
  }
LABEL_8:
  a12 = v28;
  operator delete(v28);
  uint64_t v29 = a22;
  a22 = 0;
  if (!v29) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

uint64_t mgcl::raster::PolygonRasterDecoder<unsigned char>::decode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  char v5 = 0;
  unint64_t v6 = 0;
  uint64_t v7 = 0;
  do
  {
    unint64_t v8 = v6;
    int v9 = *(char *)(a2 + v6++);
    v7 |= (unint64_t)(v9 & 0x7F) << v5;
    if (v8 > 8) {
      break;
    }
    v5 += 7;
  }
  while (v9 < 0);
  if (v7 != 1) {
    return 4;
  }
  char v10 = 0;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  do
  {
    int v13 = *(char *)(a2 + v11 + v6);
    v12 |= (unint64_t)(*(unsigned char *)(a2 + v11 + v6) & 0x7F) << v10;
    unint64_t v14 = v11 + 1;
    if (v11 > 8) {
      break;
    }
    v10 += 7;
    ++v11;
  }
  while (v13 < 0);
  char v15 = 0;
  unint64_t v16 = 0;
  uint64_t v17 = 0;
  unint64_t v18 = v6 + v14;
  do
  {
    int v19 = *(char *)(a2 + v18++);
    v17 |= (unint64_t)(v19 & 0x7F) << v15;
    if (v16 > 8) {
      break;
    }
    ++v16;
    v15 += 7;
  }
  while (v19 < 0);
  char v20 = 0;
  unint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = (char *)(a2 + v18);
  do
  {
    int v25 = *v23++;
    int v24 = v25;
    ++v18;
    v22 |= (unint64_t)(v25 & 0x7F) << v20;
    if (v21 > 8) {
      break;
    }
    ++v21;
    v20 += 7;
  }
  while (v24 < 0);
  char v26 = 0;
  unint64_t v27 = 0;
  uint64_t v28 = 0;
  do
  {
    int v30 = *v23++;
    int v29 = v30;
    ++v18;
    v28 |= (unint64_t)(v30 & 0x7F) << v26;
    if (v27 > 8) {
      break;
    }
    ++v27;
    v26 += 7;
  }
  while (v29 < 0);
  char v31 = 0;
  unint64_t v32 = 0;
  uint64_t v33 = 0;
  do
  {
    int v35 = *v23++;
    int v34 = v35;
    ++v18;
    v33 |= (unint64_t)(v35 & 0x7F) << v31;
    if (v32 > 8) {
      break;
    }
    ++v32;
    v31 += 7;
  }
  while (v34 < 0);
  *(void *)a4 = v22;
  *(void *)(a4 + 8) = v28;
  *(_DWORD *)(a4 + 16) = v33;
  if (!a5) {
    operator new[]();
  }
  uint64_t v36 = *(void *)(a4 + 24);
  *(void *)(a4 + 24) = 0;
  if (v36) {
    MEMORY[0x18C11F560](v36, 0x1000C8077774924);
  }
  return 0;
}

void sub_188FDEED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v28 = *(void **)(v26 - 136);
    if (!v28)
    {
LABEL_3:
      int v29 = *(void **)(v26 - 112);
      if (!v29) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v28 = *(void **)(v26 - 136);
    if (!v28) {
      goto LABEL_3;
    }
  }
  *(void *)(v26 - 128) = v28;
  operator delete(v28);
  int v29 = *(void **)(v26 - 112);
  if (!v29) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  *(void *)(v26 - 104) = v29;
  operator delete(v29);
  _Unwind_Resume(exception_object);
}

uint64_t mgcl::ints::IntDecompressor<long long>::decompress(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, char a4, char a5, unint64_t a6, uint64x2_t *a7)
{
  uint64_t v393 = *MEMORY[0x1E4F143B8];
  if (!a6) {
    return 0;
  }
  uint64_t v12 = 8 * a6;
  bzero(a7, 8 * a6);
  size_t v13 = *a2;
  if ((v13 - 66) < 0xFFFFFFBF) {
    return 3;
  }
  if (v13 <= 0x40) {
    size_t v15 = 65 - v13;
  }
  else {
    size_t v15 = 0;
  }
  bzero(&__dst[v13], v15);
  unint64_t v16 = a6;
  memcpy(__dst, a2 + 1, v13);
  uint64_t v17 = 0;
  uint64_t v18 = v13 + 1;
  v371 = (int32x4_t *)&a7->i8[v12];
  unint64_t v372 = a6 & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v373 = 4 * a6;
  uint64_t v377 = 8 * a3 - 24;
  unint64_t __sz = v12;
  v379 = a1;
  v380 = a2;
  size_t v376 = v13;
  while (1)
  {
    unint64_t v21 = __dst[v17];
    int v22 = a2[v18];
    uint64_t v23 = v18 + 1;
    uint64_t v381 = v17;
    uint64_t v382 = v18;
    char v24 = 0;
    unint64_t v25 = 0;
    if (!__dst[v17]) {
      break;
    }
    unint64_t v26 = 0;
    unint64_t v27 = &a2[v23];
    uint64_t v28 = 1;
    uint64_t v29 = v377 - 8 * v18;
    do
    {
      uint64_t v30 = v28;
      uint64_t v31 = v29;
      int v32 = (char)v27[v25];
      v26 |= (unint64_t)(v27[v25] & 0x7F) << v24;
      if (v25 > 8) {
        break;
      }
      ++v25;
      v24 += 7;
      ++v28;
      v29 -= 8;
    }
    while (v32 < 0);
    char v33 = 0;
    unint64_t v34 = 0;
    unint64_t v35 = 0;
    uint64_t v36 = &a2[v382];
    do
    {
      int v37 = (char)v36[v30 + 1];
      v35 |= (unint64_t)(v36[++v30] & 0x7F) << v33;
      if (v34 > 8) {
        break;
      }
      ++v34;
      v33 += 7;
      v31 -= 8;
    }
    while (v37 < 0);
    switch(v22)
    {
      case 1:
        if (!a1[3]) {
          operator new();
        }
        BOOL v38 = v21 == 1;
        unsigned int v39 = v35 - 2;
        if (v35 < 2) {
          return 3;
        }
        int v40 = &a2[v382 + v30];
        unsigned int v41 = v40[1];
        int v42 = v40[2];
        uint64_t v43 = *a1;
        uint64_t v44 = (char *)a1[1];
        unsigned int v45 = &v44[-*a1];
        if (v21 == 1)
        {
          LODWORD(v46) = a6;
          size_t v47 = a6 - (void)v45;
          if (a6 <= (unint64_t)v45)
          {
            unsigned int v48 = v379;
            if (a6 >= (unint64_t)v45)
            {
LABEL_293:
              uint64_t v285 = *v48;
              int8x16_t v286 = *(uint64_t **)v48[3];
              LODWORD(v383) = 0;
              BYTE4(v383) = a4;
              BYTE5(v383) = a5;
              WORD3(v383) = 0;
              uint64_t v384 = 1;
              __int16 v385 = 0;
              char v386 = v38;
              int v387 = 0;
              if (v41 >= 4) {
                char v287 = 1;
              }
              else {
                char v287 = v41;
              }
              char v388 = v287;
              if (v42 == 2) {
                char v288 = 4;
              }
              else {
                char v288 = 1;
              }
              if (!v42) {
                char v288 = 0;
              }
              char v389 = v288;
              *((void *)&v383 + 1) = __PAIR64__(v46, v39);
              uint64_t v289 = *v286;
              uint64_t v390 = (uint64_t)&v380[v382 + 3 + v30];
              uint64_t v391 = v39;
              uint64_t result = gcl::polyline::DecoderImpl::decompressAttributes(v289, (uint64_t)&v390, v285, 0, &v383);
              if (result) {
                goto LABEL_345;
              }
              unint64_t v16 = a6;
              if (a6 < 8)
              {
                unint64_t v291 = 0;
                a1 = v379;
LABEL_314:
                unint64_t v320 = a6 - v291;
                v321 = (unint64_t *)a7 + v291;
                unsigned int v322 = (char *)(v285 + v291);
                do
                {
                  char v323 = *v322++;
                  unint64_t *v321 = ((_BYTE)v26 + v323) & 1 | (2 * *v321);
                  ++v321;
                  --v320;
                }
                while (v320);
                goto LABEL_316;
              }
              a1 = v379;
              if (a6 >= 0x10)
              {
                uint64x2_t v303 = (uint64x2_t)vdupq_n_s64(v26);
                unint64_t v304 = a6 & 0xFFFFFFFFFFFFFFF0;
                v305 = (int64x2_t *)a7;
                v306 = (int8x16_t *)v285;
                do
                {
                  int8x16_t v307 = *v306++;
                  uint32x4_t v308 = (uint32x4_t)vqtbl1q_s8(v307, (int8x16_t)xmmword_18A643790);
                  uint32x4_t v309 = (uint32x4_t)vqtbl1q_s8(v307, (int8x16_t)xmmword_18A643780);
                  uint32x4_t v310 = (uint32x4_t)vqtbl1q_s8(v307, (int8x16_t)xmmword_18A643770);
                  uint32x4_t v311 = (uint32x4_t)vqtbl1q_s8(v307, (int8x16_t)xmmword_18A643760);
                  int64x2_t v312 = (int64x2_t)vaddw_u32(v303, *(uint32x2_t *)v308.i8);
                  int64x2_t v313 = (int64x2_t)vaddw_u32(v303, *(uint32x2_t *)v311.i8);
                  int64x2_t v315 = *v305;
                  int64x2_t v314 = v305[1];
                  int64x2_t v316 = v305[4];
                  int64x2_t v317 = v305[5];
                  int8x16_t v290 = (int8x16_t)vsliq_n_s64((int64x2_t)vaddw_high_u32(v303, v311), v305[7], 1uLL);
                  int64x2_t v318 = vsliq_n_s64(v313, v305[6], 1uLL);
                  int64x2_t v319 = vsliq_n_s64((int64x2_t)vaddw_high_u32(v303, v308), v305[3], 1uLL);
                  v305[2] = vsliq_n_s64(v312, v305[2], 1uLL);
                  v305[3] = v319;
                  int64x2_t *v305 = vsliq_n_s64((int64x2_t)vaddw_u32(v303, *(uint32x2_t *)v309.i8), v315, 1uLL);
                  v305[1] = vsliq_n_s64((int64x2_t)vaddw_high_u32(v303, v309), v314, 1uLL);
                  v305[4] = vsliq_n_s64((int64x2_t)vaddw_u32(v303, *(uint32x2_t *)v310.i8), v316, 1uLL);
                  v305[5] = vsliq_n_s64((int64x2_t)vaddw_high_u32(v303, v310), v317, 1uLL);
                  v305[6] = v318;
                  v305[7] = (int64x2_t)v290;
                  v305 += 8;
                  v304 -= 16;
                }
                while (v304);
                if ((a6 & 0xFFFFFFFFFFFFFFF0) == a6) {
                  goto LABEL_316;
                }
                unint64_t v291 = a6 & 0xFFFFFFFFFFFFFFF0;
                unint64_t v292 = a6 & 0xFFFFFFFFFFFFFFF0;
                if ((a6 & 8) == 0) {
                  goto LABEL_314;
                }
              }
              else
              {
                unint64_t v292 = 0;
              }
              uint64x2_t v293 = (uint64x2_t)vdupq_n_s64(v26);
              int8x16_t v294 = (uint64_t *)(v285 + v292);
              int8x16_t v295 = (int64x2_t *)((char *)a7 + 8 * v292);
              unint64_t v296 = v292 - (a6 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                uint64_t v297 = *v294++;
                v290.i64[0] = v297;
                uint32x4_t v298 = (uint32x4_t)vqtbl1q_s8(v290, (int8x16_t)xmmword_18A643790);
                uint32x4_t v299 = (uint32x4_t)vqtbl1q_s8(v290, (int8x16_t)xmmword_18A643780);
                int64x2_t v300 = (int64x2_t)vaddw_high_u32(v293, v299);
                int8x16_t v290 = (int8x16_t)vsliq_n_s64((int64x2_t)vaddw_u32(v293, *(uint32x2_t *)v299.i8), *v295, 1uLL);
                int64x2_t v301 = vsliq_n_s64(v300, v295[1], 1uLL);
                int64x2_t v302 = vsliq_n_s64((int64x2_t)vaddw_high_u32(v293, v298), v295[3], 1uLL);
                v295[2] = vsliq_n_s64((int64x2_t)vaddw_u32(v293, *(uint32x2_t *)v298.i8), v295[2], 1uLL);
                v295[3] = v302;
                *int8x16_t v295 = (int64x2_t)v290;
                v295[1] = v301;
                v295 += 4;
                v296 += 8;
              }
              while (v296);
              unint64_t v291 = a6 & 0xFFFFFFFFFFFFFFF8;
              if ((a6 & 0xFFFFFFFFFFFFFFF8) != a6) {
                goto LABEL_314;
              }
              goto LABEL_316;
            }
            unint64_t v161 = v43 + a6;
          }
          else
          {
            unsigned int v48 = v379;
            uint64_t v49 = v379[2];
            if (v49 - (uint64_t)v44 < v47)
            {
              unsigned int v356 = v41;
              BOOL v367 = v38;
              int v359 = v42;
              if ((a6 & 0x8000000000000000) != 0) {
                goto LABEL_348;
              }
              unint64_t v50 = (unint64_t)v45;
              unint64_t v51 = v49 - v43;
              uint64_t v52 = 2 * v51;
              if (2 * v51 <= a6) {
                uint64_t v52 = a6;
              }
              if (v51 >= 0x3FFFFFFFFFFFFFFFLL) {
                size_t v53 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                size_t v53 = v52;
              }
              char v353 = (char *)operator new(v53);
              char v351 = &v353[v50];
              bzero(&v353[v50], v47);
              size_t v54 = v53;
              if (v44 == (char *)v43)
              {
                unsigned int v48 = v379;
                unint64_t v46 = a6;
                unsigned int v39 = v35 - 2;
                int v42 = v359;
                BOOL v38 = v367;
                unsigned int v41 = v356;
                unint64_t v179 = &v353[v50];
                uint64_t v55 = v353;
                goto LABEL_291;
              }
              if (v50 < 8)
              {
                unsigned int v48 = v379;
                unint64_t v46 = a6;
                unsigned int v39 = v35 - 2;
                int v42 = v359;
                BOOL v38 = v367;
                unsigned int v41 = v356;
                unint64_t v56 = &v353[v50];
                uint64_t v55 = v353;
                goto LABEL_288;
              }
              unint64_t v56 = &v353[v50];
              uint64_t v55 = v353;
              unsigned int v48 = v379;
              unint64_t v46 = a6;
              unsigned int v39 = v35 - 2;
              int v42 = v359;
              BOOL v38 = v367;
              unsigned int v41 = v356;
              if ((unint64_t)(v43 - (void)v353) >= 0x20)
              {
                if (v50 < 0x20)
                {
                  unint64_t v190 = 0;
                  goto LABEL_217;
                }
                unint64_t v190 = v50 & 0xFFFFFFFFFFFFFFE0;
                v225 = &v353[v50 - 16];
                unint64_t v226 = v44 - 16;
                unint64_t v227 = v50 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  long long v228 = *(_OWORD *)v226;
                  *((_OWORD *)v225 - 1) = *((_OWORD *)v226 - 1);
                  *(_OWORD *)v225 = v228;
                  v225 -= 32;
                  v226 -= 32;
                  v227 -= 32;
                }
                while (v227);
                if (v50 == v190) {
                  goto LABEL_290;
                }
                if ((v50 & 0x18) != 0)
                {
LABEL_217:
                  unint64_t v56 = &v351[-(v50 & 0xFFFFFFFFFFFFFFF8)];
                  v229 = &v44[-v190 - v43 - 8 + (void)v353];
                  unint64_t v230 = &v44[-v190 - 8];
                  unint64_t v231 = v190 - (v50 & 0xFFFFFFFFFFFFFFF8);
                  do
                  {
                    uint64_t v232 = *(void *)v230;
                    v230 -= 8;
                    *(void *)v229 = v232;
                    v229 -= 8;
                    v231 += 8;
                  }
                  while (v231);
                  v44 -= v50 & 0xFFFFFFFFFFFFFFF8;
                  if (v50 == (v50 & 0xFFFFFFFFFFFFFFF8)) {
                    goto LABEL_290;
                  }
                  goto LABEL_288;
                }
                unint64_t v56 = &v351[-v190];
                v44 -= v190;
              }
LABEL_288:
              uint32x4_t v282 = v56 - 1;
              do
              {
                char v283 = *--v44;
                *v282-- = v283;
              }
              while (v44 != (char *)v43);
LABEL_290:
              uint64_t v44 = (char *)v43;
              unint64_t v179 = v55;
LABEL_291:
              *unsigned int v48 = (uint64_t)v179;
              v48[1] = (uint64_t)&v55[v46];
              v48[2] = (uint64_t)&v55[v54];
              if (v44)
              {
                int v284 = v46;
                operator delete(v44);
                LODWORD(v46) = v284;
                unsigned int v41 = v356;
                BOOL v38 = v367;
                int v42 = v359;
                unsigned int v39 = v35 - 2;
              }
              goto LABEL_293;
            }
            v365 = &v44[v47];
            unint64_t v165 = v44;
            int v166 = v42;
            BOOL v167 = v38;
            unsigned int v168 = v41;
            bzero(v165, a6 - (void)v45);
            LODWORD(v46) = a6;
            unsigned int v41 = v168;
            BOOL v38 = v167;
            int v42 = v166;
            unsigned int v39 = v35 - 2;
            unint64_t v161 = (unint64_t)v365;
          }
          v48[1] = v161;
          goto LABEL_293;
        }
        size_t v150 = v373 - (void)v45;
        if (v373 > (unint64_t)v45)
        {
          v151 = v379;
          uint64_t v152 = v379[2];
          if (v152 - (uint64_t)v44 >= v150)
          {
            v366 = &v44[v150];
            unint64_t v169 = v44;
            int v170 = v42;
            unsigned int v171 = v41;
            bzero(v169, v373 - (void)v45);
            unsigned int v41 = v171;
            BOOL v38 = v21 == 1;
            int v42 = v170;
            unsigned int v39 = v35 - 2;
            v379[1] = (uint64_t)v366;
            unsigned int v157 = a6;
            goto LABEL_323;
          }
          unsigned int v358 = v41;
          int v361 = v42;
          if ((v373 & 0x8000000000000000) != 0) {
LABEL_348:
          }
            std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
          unint64_t v153 = (unint64_t)v45;
          unint64_t v154 = v152 - v43;
          uint64_t v155 = 2 * v154;
          if (2 * v154 <= v373) {
            uint64_t v155 = 4 * a6;
          }
          if (v154 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v156 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v156 = v155;
          }
          size_t v355 = v156;
          int v352 = (char *)operator new(v156);
          __int16 v350 = &v352[v153];
          bzero(&v352[v153], v150);
          if (v44 == (char *)v43)
          {
            v151 = v379;
            unsigned int v157 = a6;
            unsigned int v39 = v35 - 2;
            int v42 = v361;
            BOOL v38 = v21 == 1;
            unsigned int v41 = v358;
            unsigned int v159 = v352;
            size_t v158 = v355;
            unint64_t v181 = v350;
          }
          else
          {
            if (v153 < 8)
            {
              v151 = v379;
              unsigned int v157 = a6;
              unsigned int v39 = v35 - 2;
              int v42 = v361;
              BOOL v38 = v21 == 1;
              unsigned int v41 = v358;
              unsigned int v159 = v352;
              size_t v158 = v355;
              v160 = v350;
              goto LABEL_318;
            }
            unint64_t v191 = v153;
            unsigned int v159 = v352;
            size_t v158 = v355;
            v151 = v379;
            unsigned int v157 = a6;
            unsigned int v39 = v35 - 2;
            int v42 = v361;
            BOOL v38 = v21 == 1;
            unsigned int v41 = v358;
            v160 = v350;
            if ((unint64_t)(v43 - (void)v352) < 0x20) {
              goto LABEL_318;
            }
            if (v191 >= 0x20)
            {
              unint64_t v192 = v191 & 0xFFFFFFFFFFFFFFE0;
              char v233 = &v352[v191 - 16];
              v234 = v44 - 16;
              unint64_t v235 = v191 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                long long v236 = *(_OWORD *)v234;
                *((_OWORD *)v233 - 1) = *((_OWORD *)v234 - 1);
                *(_OWORD *)char v233 = v236;
                v233 -= 32;
                v234 -= 32;
                v235 -= 32;
              }
              while (v235);
              if (v191 != v192)
              {
                if ((v191 & 0x18) == 0)
                {
                  v160 = &v350[-v192];
                  v44 -= v192;
                  goto LABEL_318;
                }
                goto LABEL_225;
              }
            }
            else
            {
              unint64_t v192 = 0;
LABEL_225:
              v160 = &v350[-(v191 & 0xFFFFFFFFFFFFFFF8)];
              uint64_t v237 = &v44[-v192 - v43 - 8 + (void)v352];
              unint64_t v238 = &v44[-v192 - 8];
              unint64_t v239 = v192 - (v191 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                uint64_t v240 = *(void *)v238;
                v238 -= 8;
                *(void *)uint64_t v237 = v240;
                v237 -= 8;
                v239 += 8;
              }
              while (v239);
              v44 -= v191 & 0xFFFFFFFFFFFFFFF8;
              if (v191 != (v191 & 0xFFFFFFFFFFFFFFF8))
              {
LABEL_318:
                v324 = v160 - 1;
                do
                {
                  char v325 = *--v44;
                  *v324-- = v325;
                }
                while (v44 != (char *)v43);
              }
            }
            uint64_t v44 = (char *)v43;
            unint64_t v181 = v159;
          }
          uint64_t *v151 = (uint64_t)v181;
          v151[1] = (uint64_t)&v159[v373];
          v151[2] = (uint64_t)&v159[v158];
          if (v44)
          {
            operator delete(v44);
            unsigned int v41 = v358;
            BOOL v38 = v21 == 1;
            int v42 = v361;
            unsigned int v39 = v35 - 2;
          }
          goto LABEL_323;
        }
        v151 = v379;
        unsigned int v157 = a6;
        if (v373 < (unint64_t)v45) {
          v379[1] = v43 + v373;
        }
LABEL_323:
        unsigned int v326 = (int32x4_t *)*v151;
        v327 = *(uint64_t **)v151[3];
        LODWORD(v383) = 0;
        BYTE4(v383) = a4;
        BYTE5(v383) = a5;
        WORD3(v383) = 0;
        uint64_t v384 = 1;
        __int16 v385 = 0;
        char v386 = v38;
        int v387 = 0;
        if (v41 >= 4) {
          char v328 = 1;
        }
        else {
          char v328 = v41;
        }
        char v388 = v328;
        if (v42 == 2) {
          char v329 = 4;
        }
        else {
          char v329 = 1;
        }
        if (!v42) {
          char v329 = 0;
        }
        char v389 = v329;
        *((void *)&v383 + 1) = __PAIR64__(v157, v39);
        uint64_t v330 = *v327;
        uint64_t v390 = (uint64_t)&v380[v382 + 3 + v30];
        uint64_t v391 = v39;
        uint64_t result = gcl::polyline::DecoderImpl::decompressAttributes(v330, (uint64_t)&v390, v326, 0, &v383);
        if (result) {
          goto LABEL_345;
        }
        unint64_t v331 = ~(-1 << v21);
        unint64_t v16 = a6;
        if (a6 >= 4)
        {
          a1 = v379;
          if (&v326->i8[v373] <= (__int8 *)a7 || v326 >= v371)
          {
            int64x2_t v333 = vdupq_n_s64(v26);
            uint64x2_t v334 = (uint64x2_t)vdupq_n_s64(v21);
            int8x16_t v335 = (int8x16_t)vdupq_n_s64(v331);
            int32x2_t v336 = vdup_n_s32(v21 > 0x3F);
            uint64_t v337 = (int32x2_t *)&v326->u64[1];
            unint64_t v338 = a6 & 0xFFFFFFFFFFFFFFFCLL;
            v339 = a7 + 1;
            do
            {
              int8x16_t v340 = (int8x16_t)vaddw_s32(v333, v337[-1]);
              int8x16_t v341 = (int8x16_t)vaddw_s32(v333, *v337);
              v342.i64[0] = v336.u32[0];
              v342.i64[1] = v336.u32[1];
              int8x16_t v343 = (int8x16_t)vcltzq_s64(vshlq_n_s64(v342, 0x3FuLL));
              int8x16_t v344 = vbslq_s8(v343, v341, vorrq_s8((int8x16_t)vshlq_u64(*v339, v334), vandq_s8(v341, v335)));
              v339[-1] = (uint64x2_t)vbslq_s8(v343, v340, vorrq_s8((int8x16_t)vshlq_u64(v339[-1], v334), vandq_s8(v340, v335)));
              uint64x2_t *v339 = (uint64x2_t)v344;
              v337 += 2;
              v339 += 2;
              v338 -= 4;
            }
            while (v338);
            unint64_t v332 = a6 & 0xFFFFFFFFFFFFFFFCLL;
            if (v372 == a6) {
              goto LABEL_316;
            }
          }
          else
          {
            unint64_t v332 = 0;
          }
        }
        else
        {
          unint64_t v332 = 0;
          a1 = v379;
        }
        unint64_t v345 = a6 - v332;
        uint64_t v346 = &a7->i8[8 * v332];
        v347 = &v326->i32[v332];
        do
        {
          uint64_t v348 = *v347++;
          unint64_t v349 = v26 + v348;
          if (v21 <= 0x3F) {
            unint64_t v349 = (*(void *)v346 << v21) | v349 & v331;
          }
          *(void *)uint64_t v346 = v349;
          v346 += 8;
          --v345;
        }
        while (v345);
LABEL_316:
        uint64_t v18 = v382 + v35 + v30 + 1;
        a2 = v380;
        goto LABEL_9;
      case 2:
        v104 = (unsigned __int8 *)*a1;
        size_t v105 = (unsigned __int8 *)a1[1];
        uint64_t v106 = (char *)&v105[-*a1];
        size_t v107 = __sz - (void)v106;
        if (__sz > (unint64_t)v106)
        {
          uint64_t v108 = (unsigned __int8 *)a1[2];
          if (v108 - v105 >= v107)
          {
            bzero((void *)a1[1], __sz - (void)v106);
            a1[1] = (uint64_t)&v105[v107];
            unint64_t v113 = a6;
            goto LABEL_237;
          }
          unint64_t v369 = (unint64_t)&v105[-*a1];
          if ((__sz & 0x8000000000000000) != 0) {
            goto LABEL_348;
          }
          unint64_t v109 = v108 - v104;
          uint64_t v110 = 2 * v109;
          if (2 * v109 <= __sz) {
            uint64_t v110 = __sz;
          }
          if (v109 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v111 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v111 = v110;
          }
          v363 = (char *)operator new(v111);
          v360 = &v363[v369];
          bzero(&v363[v369], v107);
          size_t v112 = v111;
          if (v105 == v104)
          {
            a1 = v379;
            unint64_t v113 = a6;
            v172 = &v363[v369];
            v114 = v363;
            goto LABEL_235;
          }
          if (v369 < 8)
          {
            a1 = v379;
            unint64_t v113 = a6;
            v115 = &v363[v369];
            v114 = v363;
            goto LABEL_232;
          }
          v115 = &v363[v369];
          v114 = v363;
          a1 = v379;
          unint64_t v113 = a6;
          if ((unint64_t)(v104 - (unsigned __int8 *)v363) >= 0x20)
          {
            if (v369 < 0x20)
            {
              unint64_t v174 = 0;
              goto LABEL_193;
            }
            unint64_t v174 = v369 & 0xFFFFFFFFFFFFFFE0;
            v201 = &v363[v369 - 16];
            unint64_t v202 = (char *)(v105 - 16);
            unint64_t v203 = v369 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v204 = *(_OWORD *)v202;
              *((_OWORD *)v201 - 1) = *((_OWORD *)v202 - 1);
              *(_OWORD *)v201 = v204;
              v201 -= 32;
              v202 -= 32;
              v203 -= 32;
            }
            while (v203);
            if (v369 == v174) {
              goto LABEL_234;
            }
            if ((v369 & 0x18) != 0)
            {
LABEL_193:
              v115 = &v360[-(v369 & 0xFFFFFFFFFFFFFFF8)];
              v205 = &v363[&v105[-v174] - v104 - 8];
              unint64_t v206 = (char *)&v105[-v174 - 8];
              unint64_t v207 = v174 - (v369 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                uint64_t v208 = *(void *)v206;
                v206 -= 8;
                *(void *)v205 = v208;
                v205 -= 8;
                v207 += 8;
              }
              while (v207);
              v105 -= v369 & 0xFFFFFFFFFFFFFFF8;
              if (v369 == (v369 & 0xFFFFFFFFFFFFFFF8)) {
                goto LABEL_234;
              }
              goto LABEL_232;
            }
            v115 = &v360[-v174];
            v105 -= v174;
          }
LABEL_232:
          v241 = v115 - 1;
          do
          {
            char v242 = *--v105;
            *v241-- = v242;
          }
          while (v105 != v104);
LABEL_234:
          size_t v105 = v104;
          v172 = v114;
LABEL_235:
          *a1 = (uint64_t)v172;
          a1[1] = (uint64_t)&v114[__sz];
          a1[2] = (uint64_t)&v114[v112];
          if (v105) {
            operator delete(v105);
          }
          goto LABEL_237;
        }
        unint64_t v113 = a6;
        if (__sz < (unint64_t)v106) {
          a1[1] = (uint64_t)&v104[__sz];
        }
LABEL_237:
        uint64_t v243 = (int64x2_t *)*a1;
        uint64_t result = mgcl::muid::decompress((mgcl::muid *)&v380[v382 + 1 + v30], (const char *)v35, 0, 0, *a1, (unint64_t *)8, v113);
        if (result) {
          return result;
        }
        unint64_t v244 = ~(-1 << v21);
        unint64_t v16 = a6;
        if (a6 >= 4)
        {
          a1 = v379;
          a2 = v380;
          if (&v243->i8[__sz] <= (__int8 *)a7 || v243 >= (int64x2_t *)v371)
          {
            int64x2_t v246 = vdupq_n_s64(v26);
            uint64x2_t v247 = (uint64x2_t)vdupq_n_s64(v21);
            int8x16_t v248 = (int8x16_t)vdupq_n_s64(v244);
            int32x2_t v249 = vdup_n_s32(v21 > 0x3F);
            int v250 = v243 + 1;
            unint64_t v251 = a6 & 0xFFFFFFFFFFFFFFFCLL;
            v252 = a7 + 1;
            do
            {
              int8x16_t v253 = (int8x16_t)vaddq_s64(v250[-1], v246);
              int8x16_t v254 = (int8x16_t)vaddq_s64(*v250, v246);
              v255.i64[0] = v249.u32[0];
              v255.i64[1] = v249.u32[1];
              int8x16_t v256 = (int8x16_t)vcltzq_s64(vshlq_n_s64(v255, 0x3FuLL));
              int8x16_t v257 = vbslq_s8(v256, v254, vorrq_s8((int8x16_t)vshlq_u64(*v252, v247), vandq_s8(v254, v248)));
              v252[-1] = (uint64x2_t)vbslq_s8(v256, v253, vorrq_s8((int8x16_t)vshlq_u64(v252[-1], v247), vandq_s8(v253, v248)));
              uint64x2_t *v252 = (uint64x2_t)v257;
              v250 += 2;
              v252 += 2;
              v251 -= 4;
            }
            while (v251);
            unint64_t v245 = a6 & 0xFFFFFFFFFFFFFFFCLL;
            if (v372 == a6) {
              goto LABEL_8;
            }
          }
          else
          {
            unint64_t v245 = 0;
          }
        }
        else
        {
          unint64_t v245 = 0;
          a1 = v379;
          a2 = v380;
        }
        unint64_t v258 = a6 - v245;
        uint64_t v259 = v245;
        v260 = &a7->i8[8 * v245];
        v261 = &v243->i64[v259];
        do
        {
          uint64_t v262 = *v261++;
          unint64_t v263 = v262 + v26;
          if (v21 <= 0x3F) {
            unint64_t v263 = (*(void *)v260 << v21) | v263 & v244;
          }
          *(void *)v260 = v263;
          v260 += 8;
          --v258;
        }
        while (v258);
LABEL_8:
        uint64_t v18 = v382 + v35 + v30 + 1;
LABEL_9:
        size_t v19 = v376;
        uint64_t v20 = v381;
        break;
      case 3:
        uint64_t v85 = (unsigned __int8 *)*a1;
        v84 = (unsigned __int8 *)a1[1];
        if (v84 != (unsigned __int8 *)*a1)
        {
          a1[1] = (uint64_t)v85;
          v84 = v85;
        }
        if (a1[2] - (uint64_t)v85 >= __sz) {
          goto LABEL_67;
        }
        if ((__sz & 0x8000000000000000) != 0) {
          goto LABEL_348;
        }
        long long v86 = operator new(__sz);
        unint64_t v87 = v84 - v85;
        v88 = &v86[v84 - v85];
        long long v89 = v88;
        a1 = v379;
        a2 = v380;
        unint64_t v16 = a6;
        if (v84 == v85) {
          goto LABEL_65;
        }
        long long v89 = v86;
        if (v87 < 8 || (unint64_t)(v85 - v86) < 0x20)
        {
          uint64_t v90 = v84;
          char v91 = &v86[v84 - v85];
          goto LABEL_63;
        }
        if (v87 >= 0x20)
        {
          unint64_t v173 = v87 & 0xFFFFFFFFFFFFFFE0;
          unint64_t v182 = &v86[v87 - 16];
          unint64_t v183 = v84 - 16;
          unint64_t v184 = v87 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v185 = *(_OWORD *)v183;
            *(v182 - 1) = *((_OWORD *)v183 - 1);
            *unint64_t v182 = v185;
            v182 -= 2;
            v183 -= 32;
            v184 -= 32;
          }
          while (v184);
          if (v87 == v173) {
            goto LABEL_65;
          }
          if ((v87 & 0x18) == 0)
          {
            char v91 = &v88[-v173];
            uint64_t v90 = &v84[-v173];
LABEL_63:
            uint64_t v92 = v91 - 1;
            do
            {
              char v93 = *--v90;
              *v92-- = v93;
            }
            while (v90 != v85);
            goto LABEL_65;
          }
        }
        else
        {
          unint64_t v173 = 0;
        }
        uint64_t v90 = &v84[-(v87 & 0xFFFFFFFFFFFFFFF8)];
        char v91 = &v88[-(v87 & 0xFFFFFFFFFFFFFFF8)];
        unint64_t v186 = &v86[&v84[-v173] - v85 - 8];
        long long v187 = &v84[-v173 - 8];
        unint64_t v188 = v173 - (v87 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v189 = *(void *)v187;
          v187 -= 8;
          *v186-- = v189;
          v188 += 8;
        }
        while (v188);
        if (v87 != (v87 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_63;
        }
LABEL_65:
        uint64_t *v379 = (uint64_t)v89;
        v379[1] = (uint64_t)v88;
        v379[2] = (uint64_t)&v86[__sz];
        if (v85) {
          operator delete(v85);
        }
LABEL_67:
        uint64_t v94 = 0;
        uint64_t v95 = v382 + v30 + 1;
        size_t v19 = v376;
        uint64_t v20 = v381;
        do
        {
          char v96 = 0;
          unint64_t v97 = 0;
          uint64_t v98 = 0;
          uint64_t v99 = v95;
          unint64_t v100 = &a2[v95];
          do
          {
            int v101 = (char)v100[v97];
            v98 |= (unint64_t)(v100[v97] & 0x7F) << v96;
            unint64_t v102 = v97 + 1;
            if (v97 > 8) {
              break;
            }
            v96 += 7;
            ++v97;
          }
          while (v101 < 0);
          uint64_t v103 = v98 + v26;
          if (v21 <= 0x3F) {
            uint64_t v103 = (a7->i64[v94] << v21) | v103 & ~(-1 << v21);
          }
          uint64_t v95 = v99 + v102;
          a7->i64[v94++] = v103;
        }
        while (v94 != v16);
        uint64_t v18 = v99 + v102;
        break;
      case 4:
        operator new();
      default:
        return 3;
    }
LABEL_10:
    uint64_t v17 = v20 + 1;
    if (v17 == v19) {
      return 0;
    }
  }
  uint64_t v57 = 0;
  int v58 = &a2[v23];
  uint64_t v59 = 1;
  uint64_t v60 = v377 - 8 * v18;
  do
  {
    uint64_t v61 = v59;
    uint64_t v62 = v60;
    int v63 = (char)v58[v25];
    v57 |= (unint64_t)(v58[v25] & 0x7F) << v24;
    if (v25 > 8) {
      break;
    }
    ++v25;
    v24 += 7;
    ++v59;
    v60 -= 8;
  }
  while (v63 < 0);
  char v64 = 0;
  unint64_t v65 = 0;
  unint64_t v66 = 0;
  uint64_t v67 = &a2[v382];
  do
  {
    int v68 = (char)v67[v61 + 1];
    v66 |= (unint64_t)(v67[++v61] & 0x7F) << v64;
    if (v65 > 8) {
      break;
    }
    ++v65;
    v64 += 7;
    v62 -= 8;
  }
  while (v68 < 0);
  switch(v22)
  {
    case 1:
      if (!a1[3]) {
        operator new();
      }
      unsigned int v69 = v66 - 2;
      if (v66 < 2) {
        return 3;
      }
      uint64_t v70 = &a2[v382 + v61];
      unsigned int v71 = v70[1];
      int v72 = v70[2];
      uint64_t v73 = *a1;
      size_t v74 = (char *)a1[1];
      unint64_t v75 = (unint64_t)&v74[-*a1];
      size_t v76 = a6 - v75;
      if (a6 > v75)
      {
        uint64_t v77 = (unsigned __int8 *)a1[2];
        if (v77 - (unsigned __int8 *)v74 >= v76)
        {
          unsigned int v162 = (unsigned __int8 *)&v74[v76];
          int v163 = v72;
          unsigned int v164 = v71;
          bzero((void *)a1[1], a6 - v75);
          unsigned int v69 = v66 - 2;
          unsigned int v71 = v164;
          int v72 = v163;
          a1[1] = (uint64_t)v162;
          LODWORD(v76) = a6;
          goto LABEL_270;
        }
        unsigned int v362 = v71;
        int v368 = v72;
        if ((a6 & 0x8000000000000000) != 0) {
          goto LABEL_349;
        }
        unint64_t v78 = (unint64_t)&v77[-v73];
        uint64_t v79 = 2 * v78;
        if (2 * v78 <= a6) {
          uint64_t v79 = a6;
        }
        if (v78 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v80 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v80 = v79;
        }
        v357 = (char *)operator new(v80);
        char v354 = &v357[v75];
        bzero(&v357[v75], v76);
        size_t v81 = v80;
        if (v74 == (char *)v73)
        {
          a1 = v379;
          size_t v76 = a6;
          int v72 = v368;
          unsigned int v71 = v362;
          long long v176 = &v357[v75];
          v82 = v357;
          goto LABEL_268;
        }
        if (v75 < 8)
        {
          a1 = v379;
          size_t v76 = a6;
          int v72 = v368;
          unsigned int v71 = v362;
          v83 = &v357[v75];
          v82 = v357;
          goto LABEL_265;
        }
        v83 = &v357[v75];
        v82 = v357;
        a1 = v379;
        size_t v76 = a6;
        int v72 = v368;
        unsigned int v71 = v362;
        if ((unint64_t)(v73 - (void)v357) >= 0x20)
        {
          if (v75 < 0x20)
          {
            unint64_t v180 = 0;
            goto LABEL_209;
          }
          unint64_t v180 = v75 & 0xFFFFFFFFFFFFFFE0;
          v217 = &v357[v75 - 16];
          unint64_t v218 = v74 - 16;
          unint64_t v219 = v75 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v220 = *(_OWORD *)v218;
            *((_OWORD *)v217 - 1) = *((_OWORD *)v218 - 1);
            *(_OWORD *)v217 = v220;
            v217 -= 32;
            v218 -= 32;
            v219 -= 32;
          }
          while (v219);
          if (v75 == v180) {
            goto LABEL_267;
          }
          if ((v75 & 0x18) != 0)
          {
LABEL_209:
            v83 = &v354[-(v75 & 0xFFFFFFFFFFFFFFF8)];
            v221 = &v74[-v180 - v73 - 8 + (void)v357];
            unint64_t v222 = &v74[-v180 - 8];
            unint64_t v223 = v180 - (v75 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              uint64_t v224 = *(void *)v222;
              v222 -= 8;
              *(void *)v221 = v224;
              v221 -= 8;
              v223 += 8;
            }
            while (v223);
            v74 -= v75 & 0xFFFFFFFFFFFFFFF8;
            if (v75 == (v75 & 0xFFFFFFFFFFFFFFF8)) {
              goto LABEL_267;
            }
            goto LABEL_265;
          }
          v83 = &v354[-v180];
          v74 -= v180;
        }
LABEL_265:
        uint32x4_t v271 = v83 - 1;
        do
        {
          char v272 = *--v74;
          *v271-- = v272;
        }
        while (v74 != (char *)v73);
LABEL_267:
        size_t v74 = (char *)v73;
        long long v176 = v82;
LABEL_268:
        unsigned int v69 = v66 - 2;
        *a1 = (uint64_t)v176;
        a1[1] = (uint64_t)&v82[v76];
        a1[2] = (uint64_t)&v82[v81];
        if (v74)
        {
          operator delete(v74);
          unsigned int v69 = v66 - 2;
          unsigned int v71 = v362;
          int v72 = v368;
        }
        goto LABEL_270;
      }
      LODWORD(v76) = a6;
      if (a6 < v75) {
        a1[1] = v73 + a6;
      }
LABEL_270:
      int8x16_t v273 = (unsigned __int8 *)*a1;
      unint64_t v274 = *(uint64_t **)a1[3];
      LODWORD(v383) = 0;
      BYTE4(v383) = a4;
      BYTE5(v383) = a5;
      WORD3(v383) = 0;
      uint64_t v384 = 1;
      __int16 v385 = 0;
      char v386 = 1;
      int v387 = 0;
      if (v71 >= 4) {
        char v275 = 1;
      }
      else {
        char v275 = v71;
      }
      char v388 = v275;
      if (v72 == 2) {
        char v276 = 4;
      }
      else {
        char v276 = 1;
      }
      if (!v72) {
        char v276 = 0;
      }
      char v389 = v276;
      *((void *)&v383 + 1) = __PAIR64__(v76, v69);
      uint64_t v277 = *v274;
      uint64_t v390 = (uint64_t)&v380[v382 + 3 + v61];
      uint64_t v391 = v69;
      uint64_t result = gcl::polyline::DecoderImpl::decompressAttributes(v277, (uint64_t)&v390, (uint64_t)v273, 0, &v383);
      if (!result)
      {
        int8x16_t v278 = (unint64_t *)a7;
        a2 = v380;
        unint64_t v16 = a6;
        unint64_t v279 = a6;
        do
        {
          unsigned int v280 = *v273++;
          if (v57 + v280)
          {
            if (*v278) {
              unint64_t v281 = -(uint64_t)*v278;
            }
            else {
              unint64_t v281 = 0x8000000000000000;
            }
            *int8x16_t v278 = v281;
          }
          ++v278;
          --v279;
        }
        while (v279);
LABEL_286:
        uint64_t v18 = v382 + v66 + v61 + 1;
        a1 = v379;
        size_t v19 = v376;
        uint64_t v20 = v381;
        goto LABEL_10;
      }
LABEL_345:
      if ((result - 1) >= 4) {
        return 5;
      }
      return result;
    case 2:
      uint64_t v137 = *a1;
      v138 = (char *)a1[1];
      unint64_t v139 = (unint64_t)&v138[-*a1];
      v140 = a1;
      size_t v141 = __sz - v139;
      if (__sz <= v139)
      {
        size_t v147 = v140;
        if (__sz < v139) {
          v140[1] = v137 + __sz;
        }
LABEL_256:
        uint16x8_t v266 = (uint64_t *)*v147;
        uint64_t result = mgcl::muid::decompress((mgcl::muid *)&v380[v382 + 1 + v61], (const char *)v66, 0, 0, *v147, (unint64_t *)8, a6);
        if (result) {
          return result;
        }
        uint32x4_t v267 = (unint64_t *)a7;
        a2 = v380;
        unint64_t v16 = a6;
        unint64_t v268 = a6;
        do
        {
          uint64_t v269 = *v266++;
          if (v269 != -v57)
          {
            if (*v267) {
              unint64_t v270 = -(uint64_t)*v267;
            }
            else {
              unint64_t v270 = 0x8000000000000000;
            }
            *uint32x4_t v267 = v270;
          }
          ++v267;
          --v268;
        }
        while (v268);
        goto LABEL_286;
      }
      uint64_t v142 = v140[2];
      if (v142 - (uint64_t)v138 >= v141)
      {
        bzero(v138, __sz - v139);
        v140[1] = (uint64_t)&v138[v141];
        size_t v147 = v140;
        goto LABEL_256;
      }
      if ((__sz & 0x8000000000000000) != 0) {
LABEL_349:
      }
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      unint64_t v143 = v142 - v137;
      uint64_t v144 = 2 * v143;
      if (2 * v143 <= __sz) {
        uint64_t v144 = __sz;
      }
      if (v143 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v145 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v145 = v144;
      }
      size_t v146 = v145;
      v370 = (char *)operator new(v145);
      v364 = &v370[v139];
      bzero(&v370[v139], v141);
      if (v138 == (char *)v137)
      {
        size_t v147 = v379;
        unsigned int v148 = v370;
        unint64_t v175 = &v370[v139];
        goto LABEL_254;
      }
      if (v139 < 8)
      {
        size_t v147 = v379;
        unsigned int v148 = v370;
        size_t v149 = &v370[v139];
        goto LABEL_251;
      }
      unsigned int v148 = v370;
      size_t v147 = v379;
      size_t v149 = &v370[v139];
      if ((unint64_t)(v137 - (void)v370) < 0x20) {
        goto LABEL_251;
      }
      if (v139 >= 0x20)
      {
        unint64_t v178 = v139 & 0xFFFFFFFFFFFFFFE0;
        v209 = &v370[v139 - 16];
        unint64_t v210 = v138 - 16;
        unint64_t v211 = v139 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v212 = *(_OWORD *)v210;
          *((_OWORD *)v209 - 1) = *((_OWORD *)v210 - 1);
          *(_OWORD *)v209 = v212;
          v209 -= 32;
          v210 -= 32;
          v211 -= 32;
        }
        while (v211);
        if (v139 == v178) {
          goto LABEL_253;
        }
        if ((v139 & 0x18) == 0)
        {
          size_t v149 = &v364[-v178];
          v138 -= v178;
LABEL_251:
          uint32x4_t v264 = v149 - 1;
          do
          {
            char v265 = *--v138;
            *v264-- = v265;
          }
          while (v138 != (char *)v137);
LABEL_253:
          v138 = (char *)v137;
          unint64_t v175 = v148;
LABEL_254:
          *size_t v147 = (uint64_t)v175;
          v147[1] = (uint64_t)&v148[__sz];
          v147[2] = (uint64_t)&v148[v146];
          if (v138) {
            operator delete(v138);
          }
          goto LABEL_256;
        }
      }
      else
      {
        unint64_t v178 = 0;
      }
      size_t v149 = &v364[-(v139 & 0xFFFFFFFFFFFFFFF8)];
      v213 = &v138[-v178 - v137 - 8 + (void)v370];
      unint64_t v214 = &v138[-v178 - 8];
      unint64_t v215 = v178 - (v139 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v216 = *(void *)v214;
        v214 -= 8;
        *(void *)v213 = v216;
        v213 -= 8;
        v215 += 8;
      }
      while (v215);
      v138 -= v139 & 0xFFFFFFFFFFFFFFF8;
      if (v139 == (v139 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_253;
      }
      goto LABEL_251;
    case 3:
      unint64_t v117 = (unsigned __int8 *)*a1;
      v116 = (unsigned __int8 *)a1[1];
      if (v116 != (unsigned __int8 *)*a1)
      {
        a1[1] = (uint64_t)v117;
        v116 = v117;
      }
      if (a1[2] - (uint64_t)v117 >= __sz) {
        goto LABEL_99;
      }
      if ((__sz & 0x8000000000000000) != 0) {
        goto LABEL_349;
      }
      v118 = operator new(__sz);
      unint64_t v119 = v116 - v117;
      v120 = &v118[v116 - v117];
      v121 = v120;
      a1 = v379;
      a2 = v380;
      unint64_t v16 = a6;
      if (v116 == v117) {
        goto LABEL_97;
      }
      v121 = v118;
      if (v119 < 8 || (unint64_t)(v117 - v118) < 0x20)
      {
        v122 = v116;
        char v123 = &v118[v116 - v117];
        goto LABEL_95;
      }
      if (v119 >= 0x20)
      {
        unint64_t v177 = v119 & 0xFFFFFFFFFFFFFFE0;
        v193 = &v118[v119 - 16];
        unint64_t v194 = v116 - 16;
        unint64_t v195 = v119 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v196 = *(_OWORD *)v194;
          *(v193 - 1) = *((_OWORD *)v194 - 1);
          _OWORD *v193 = v196;
          v193 -= 2;
          v194 -= 32;
          v195 -= 32;
        }
        while (v195);
        if (v119 == v177)
        {
LABEL_97:
          uint64_t *v379 = (uint64_t)v121;
          v379[1] = (uint64_t)v120;
          v379[2] = (uint64_t)&v118[__sz];
          if (v117) {
            operator delete(v117);
          }
LABEL_99:
          uint64_t v126 = 0;
          uint64_t v127 = v382 + v61 + 1;
          size_t v19 = v376;
          uint64_t v20 = v381;
          do
          {
            char v128 = 0;
            unint64_t v129 = 0;
            uint64_t v130 = 0;
            uint64_t v131 = v127;
            size_t v132 = &a2[v127];
            do
            {
              int v133 = (char)v132[v129];
              v130 |= (unint64_t)(v132[v129] & 0x7F) << v128;
              unint64_t v134 = v129 + 1;
              if (v129 > 8) {
                break;
              }
              v128 += 7;
              ++v129;
            }
            while (v133 < 0);
            if (v130 != -v57)
            {
              uint64_t v135 = a7->i64[v126];
              if (v135) {
                unint64_t v136 = -v135;
              }
              else {
                unint64_t v136 = 0x8000000000000000;
              }
              a7->i64[v126] = v136;
            }
            uint64_t v127 = v131 + v134;
            ++v126;
          }
          while (v126 != v16);
          uint64_t v18 = v131 + v134;
          goto LABEL_10;
        }
        if ((v119 & 0x18) == 0)
        {
          char v123 = &v120[-v177];
          v122 = &v116[-v177];
LABEL_95:
          uint64_t v124 = v123 - 1;
          do
          {
            char v125 = *--v122;
            *v124-- = v125;
          }
          while (v122 != v117);
          goto LABEL_97;
        }
      }
      else
      {
        unint64_t v177 = 0;
      }
      v122 = &v116[-(v119 & 0xFFFFFFFFFFFFFFF8)];
      char v123 = &v120[-(v119 & 0xFFFFFFFFFFFFFFF8)];
      v197 = &v118[&v116[-v177] - v117 - 8];
      unint64_t v198 = &v116[-v177 - 8];
      unint64_t v199 = v177 - (v119 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v200 = *(void *)v198;
        v198 -= 8;
        *v197-- = v200;
        v199 += 8;
      }
      while (v199);
      if (v119 != (v119 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_95;
      }
      goto LABEL_97;
    case 4:
      operator new();
    default:
      return 3;
  }
}

void sub_188FE14B8(_Unwind_Exception *a1)
{
  MEMORY[0x18C11F580](v2, 0x20C4093837F09);
  MEMORY[0x18C11F580](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void *std::vector<BOOL>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if ((a2 & 0x8000000000000000) != 0) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v4 = (a2 - 1) >> 6;
    char v5 = operator new(8 * (v4 + 1));
    unint64_t v6 = v5;
    a1[1] = a2;
    a1[2] = v4 + 1;
    *a1 = v5;
    if (a2 >= 0x41) {
      unint64_t v7 = (a2 - 1) >> 6;
    }
    else {
      unint64_t v7 = 0;
    }
    v5[v7] = 0;
    if (a2 >= 0x40) {
      bzero(v5, 8 * (a2 >> 6));
    }
    if ((a2 & 0x3F) != 0) {
      v6[a2 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(a2 & 0x3F));
    }
  }
  return a1;
}

{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  int v11;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v4 = a1[1];
    char v5 = v4 + a2;
    a1[1] = v4 + a2;
    if (v4)
    {
      unint64_t v6 = v5 - 1;
      if (((v5 - 1) ^ (v4 - 1)) < 0x40)
      {
LABEL_10:
        char v10 = *a1 + 8 * (v4 >> 6);
        unint64_t v11 = v4 & 0x3F;
        std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v10, a2);
        return a1;
      }
    }
    else
    {
      unint64_t v6 = v5 - 1;
    }
    unint64_t v7 = v6 >> 6;
    if (v5 >= 0x41) {
      unint64_t v8 = v7;
    }
    else {
      unint64_t v8 = 0;
    }
    *(void *)(*a1 + 8 * v8) = 0;
    goto LABEL_10;
  }
  return a1;
}

void sub_188FE1678(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id _postureRegion(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = v1;
  }
  else
  {
    id v3 = [MEMORY[0x1E4F1CA20] currentLocale];
  }
  unint64_t v4 = v3;
  char v5 = [v3 objectForKey:*MEMORY[0x1E4F1C400]];

  return v5;
}

void sub_188FE2264(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188FE2334(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188FE2588(_Unwind_Exception *a1)
{
}

void sub_188FE2654(_Unwind_Exception *a1)
{
}

void sub_188FE2AAC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188FE2BB4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188FE2CBC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188FE2F54(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188FE3060(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188FE316C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188FE3278(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188FE3384(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188FE34EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id GEOGetNetworkStatusLog()
{
  if (qword_1EB29FC90 != -1) {
    dispatch_once(&qword_1EB29FC90, &__block_literal_global_57_0);
  }
  v0 = (void *)qword_1EB29FC88;

  return v0;
}

void sub_188FE39D8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188FE42A4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188FE4378(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188FE4504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

id _GEOConfigStorageCFPrefsReadOnly()
{
  _initStorage(1);
  v0 = (void *)_MergedGlobals_295[0];
  if (_MergedGlobals_295[0])
  {
    id v1 = (id)_MergedGlobals_295[0];
  }
  else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)id v3 = 0;
    _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Assertion failed: _cfprefs_readonly_storage != ((void *)0)", v3, 2u);
  }

  return v0;
}

void _initStorage(char a1)
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___initStorage_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  char v2 = a1;
  if (_initStorage_onceToken != -1) {
    dispatch_once(&_initStorage_onceToken, block);
  }
}

void sub_188FE4940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188FE5210(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

id GEOGetSignedResourcesLog()
{
  if (qword_1EB29F558 != -1) {
    dispatch_once(&qword_1EB29F558, &__block_literal_global_74);
  }
  v0 = (void *)qword_1EB29F550;

  return v0;
}

void sub_188FE61AC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188FE6278(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t geo::codec::_readDebugBlob(void *a1, uint64_t *a2)
{
  uint64_t v607 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = a1[1];
  if (!v2) {
    return 1;
  }
  uint64_t v4 = 0;
  unsigned int v5 = 0;
  while (*(_WORD *)(*a1 + 16 * v4) != 100)
  {
    uint64_t v4 = ++v5;
    if (v2 <= v5) {
      return 1;
    }
  }
  uint64_t v6 = geo::codec::chapterAt((uint64_t)a1, v5, 100, *a2 + 1912);
  if (!v6) {
    return 1;
  }
  uint64_t v7 = v6;
  uint64_t v9 = *a2;
  uint64_t v8 = a2[1];
  v599 = "ChapterDebugBlob";
  uint64_t v600 = v9;
  v601 = (std::__shared_weak_count *)v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = std::chrono::steady_clock::now().__d_.__rep_;
  uint64_t v10 = *(void *)(v7 + 48);
  unint64_t v11 = *(void *)(v7 + 56);
  unint64_t v12 = v10 + 4;
  if (v10 + 4 <= v11)
  {
    unsigned int v19 = *(_DWORD *)(*(void *)(v7 + 40) + v10);
    int v13 = v19;
    int v14 = BYTE1(v19);
    int v15 = BYTE2(v19);
    unsigned int v16 = HIBYTE(v19);
    *(void *)(v7 + 48) = v12;
  }
  else
  {
    int v13 = 0;
    int v14 = 0;
    int v15 = 0;
    unsigned int v16 = 0;
  }
  long long v596 = 0u;
  long long v597 = 0u;
  int v598 = 1065353216;
  long long __p = 0u;
  long long v594 = 0u;
  int v595 = 1065353216;
  uint64_t v590 = 0;
  uint64_t v589 = 0;
  uint64_t v591 = 0;
  {
    operator new();
  }
  uint64_t v592 = geo::codec::Allocator::instance(void)::alloc;
  uint64_t v586 = 0;
  uint64_t v585 = 0;
  uint64_t v587 = 0;
  {
    operator new();
  }
  uint64_t v588 = geo::codec::Allocator::instance(void)::alloc;
  if (v12 > v11)
  {
LABEL_17:
    char v20 = 1;
    goto LABEL_30;
  }
  if (v13 != 68)
  {
    char v24 = (FILE *)*MEMORY[0x1E4F143C8];
    int v25 = 8068;
    goto LABEL_28;
  }
  if (v14 != 86)
  {
    char v24 = (FILE *)*MEMORY[0x1E4F143C8];
    int v25 = 8069;
    goto LABEL_28;
  }
  if (v15 != 100)
  {
    char v24 = (FILE *)*MEMORY[0x1E4F143C8];
    int v25 = 8070;
    goto LABEL_28;
  }
  if (v16 != 118)
  {
    char v24 = (FILE *)*MEMORY[0x1E4F143C8];
    int v25 = 8071;
    goto LABEL_28;
  }
  uint64_t v22 = *(void *)(v7 + 48);
  unint64_t v21 = *(void *)(v7 + 56);
  uint64_t v23 = v22 + 4;
  if (v22 + 4 > v21)
  {
    char v24 = (FILE *)*MEMORY[0x1E4F143C8];
    int v25 = 8072;
LABEL_28:
    fprintf(v24, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v25);
    goto LABEL_29;
  }
  uint64_t v43 = *(void *)(v7 + 40);
  unsigned int v44 = *(_DWORD *)(v43 + v22);
  *(_DWORD *)(v7 + 64) = v44;
  *(void *)(v7 + 48) = v23;
  if (v44 <= 0xF)
  {
    char v24 = (FILE *)*MEMORY[0x1E4F143C8];
    int v25 = 8073;
    goto LABEL_28;
  }
  uint64_t v45 = *a2;
  *(_DWORD *)(*a2 + 2792) = v44;
  uint64_t v46 = v22 + 8;
  if (v22 + 8 > v21)
  {
    char v24 = (FILE *)*MEMORY[0x1E4F143C8];
    int v25 = 8076;
    goto LABEL_28;
  }
  *(_DWORD *)(v45 + 1952) = *(_DWORD *)(v43 + v23);
  *(void *)(v7 + 48) = v46;
  *(unsigned char *)(v45 + 1956) = 0;
  if (*(_DWORD *)(v7 + 64) >= 0x11u)
  {
    if (v22 + 9 > v21)
    {
      char v24 = (FILE *)*MEMORY[0x1E4F143C8];
      int v25 = 8080;
      goto LABEL_28;
    }
    *(unsigned char *)(v45 + 1956) = *(unsigned char *)(v43 + v46);
    unint64_t v21 = *(void *)(v7 + 56);
    uint64_t v46 = *(void *)(v7 + 48) + 1;
    *(void *)(v7 + 48) = v46;
    uint64_t v45 = *a2;
  }
  uint64_t v47 = v46 + 4;
  if (v46 + 4 > v21)
  {
    char v24 = (FILE *)*MEMORY[0x1E4F143C8];
    int v25 = 8083;
    goto LABEL_28;
  }
  uint64_t v48 = *(void *)(v7 + 40);
  int v49 = *(_DWORD *)(v48 + v46);
  *(_DWORD *)(v45 + 1960) = v49;
  *(void *)(v7 + 48) = v47;
  unint64_t v50 = v46 + 8;
  if (v50 > v21)
  {
    char v24 = (FILE *)*MEMORY[0x1E4F143C8];
    int v25 = 8085;
    goto LABEL_28;
  }
  int v51 = *(_DWORD *)(v48 + v47);
  *(void *)(v7 + 48) = v50;
  std::vector<GeoCodecsVectorTilePoint3D,geo::StdAllocator<GeoCodecsVectorTilePoint3D,geo::codec::Allocator>>::resize(v45 + 1968, (v49 + v51));
  uint64_t v52 = *a2;
  int v53 = *(_DWORD *)(*a2 + 1952);
  char v584 = 0;
  __int16 v575 = 0;
  char v566 = 0;
  if ((v53 & 4) != 0)
  {
    if (!geo::codec::DepthDequantizer::readInfo((uint64_t)&v565, (void *)v7))
    {
      char v24 = (FILE *)*MEMORY[0x1E4F143C8];
      int v25 = 8097;
      goto LABEL_28;
    }
    uint64_t v52 = *a2;
  }
  int v541 = v51;
  __src = "ChapterDebugBlob_UncompressedVertices";
  uint64_t v562 = v52;
  uint64_t v54 = a2[1];
  uint64_t v563 = v54;
  if (v54) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v54 + 8), 1uLL, memory_order_relaxed);
  }
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v564 = std::chrono::steady_clock::now().__d_.__rep_;
  uint64_t v55 = *(void *)(v7 + 48);
  if (*(unsigned char *)(*a2 + 1956) == 1)
  {
    geo::codec::ECEFDequantizer::readInfo((uint64_t)&v567, (void *)v7, (v53 & 4) == 0);
    uint64_t v61 = *(void *)(v7 + 48);
    unint64_t v62 = *(void *)(v7 + 56);
    uint64_t v63 = v61 + 2;
    if (v61 + 2 > v62)
    {
      uint64_t v59 = (FILE *)*MEMORY[0x1E4F143C8];
      int v60 = 8138;
      goto LABEL_198;
    }
    uint64_t v64 = *(void *)(v7 + 40);
    unsigned int v65 = *(unsigned __int16 *)(v64 + v61);
    *(void *)(v7 + 48) = v63;
    uint64_t v66 = v61 + 4;
    if (v61 + 4 > v62)
    {
      uint64_t v59 = (FILE *)*MEMORY[0x1E4F143C8];
      int v60 = 8139;
      goto LABEL_198;
    }
    __int16 v537 = *(_WORD *)(v64 + v63);
    *(void *)(v7 + 48) = v66;
    uint64_t v69 = v61 + 8;
    _CF = v62 >= v61 + 8;
    unint64_t v71 = v62 - (v61 + 8);
    if (!_CF)
    {
      uint64_t v59 = (FILE *)*MEMORY[0x1E4F143C8];
      int v60 = 8141;
      goto LABEL_198;
    }
    unsigned int v533 = *(_DWORD *)(v64 + v66);
    *(void *)(v7 + 8) = v64 + v69;
    size_t v74 = (uint64_t *)(v7 + 8);
    *(void *)(v7 + 48) = v69;
    *(unsigned char *)(v7 + 32) = 1;
    *(void *)(v7 + 16) = v71;
    *(void *)(v7 + 24) = 0;
    if (*(_DWORD *)(*a2 + 1960))
    {
      uint64_t v75 = 0;
      unint64_t v76 = 0;
      do
      {
        *(_DWORD *)buf = 0;
        if (!BitstreamUnpack((uint64_t *)(v7 + 8), (int *)buf, (unsigned __int16)v567))
        {
          uint64_t v59 = (FILE *)*MEMORY[0x1E4F143C8];
          int v60 = 8149;
          goto LABEL_198;
        }
        LODWORD(v559) = 0;
        if (!BitstreamUnpack((uint64_t *)(v7 + 8), (int *)&v559, WORD1(v567)))
        {
          uint64_t v59 = (FILE *)*MEMORY[0x1E4F143C8];
          int v60 = 8152;
          goto LABEL_198;
        }
        LODWORD(v557[0]) = 0;
        if (!BitstreamUnpack((uint64_t *)(v7 + 8), (int *)v557, WORD2(v567)))
        {
          uint64_t v59 = (FILE *)*MEMORY[0x1E4F143C8];
          int v60 = 8155;
          goto LABEL_198;
        }
        uint64_t v77 = *a2;
        unint64_t v78 = (float *)(*(void *)(*a2 + 1968) + v75);
        int v79 = v559;
        int v80 = (int)v557[0];
        *unint64_t v78 = v571 + (float)(v574 * (float)(v568 + *(_DWORD *)buf));
        v78[1] = v572 + (float)(v574 * (float)(v569 + v79));
        v78[2] = v573 + (float)(v574 * (float)(v570 + v80));
        ++v76;
        v75 += 12;
      }
      while (v76 < *(unsigned int *)(v77 + 1960));
    }
  }
  else
  {
    if (*(unsigned char *)(*a2 + 1956))
    {
      uint64_t v59 = (FILE *)*MEMORY[0x1E4F143C8];
      int v60 = 8162;
      goto LABEL_198;
    }
    if ((geo::codec::MercatorDequantizer::readInfo((uint64_t)&v576, (void *)v7) & 1) == 0)
    {
      uint64_t v59 = (FILE *)*MEMORY[0x1E4F143C8];
      int v60 = 8104;
      goto LABEL_198;
    }
    uint64_t v56 = *(void *)(v7 + 48);
    unint64_t v57 = *(void *)(v7 + 56);
    uint64_t v58 = v56 + 2;
    if (v56 + 2 > v57)
    {
      uint64_t v59 = (FILE *)*MEMORY[0x1E4F143C8];
      int v60 = 8107;
      goto LABEL_198;
    }
    uint64_t v67 = *(void *)(v7 + 40);
    unsigned int v65 = *(unsigned __int16 *)(v67 + v56);
    *(void *)(v7 + 48) = v58;
    uint64_t v68 = v56 + 4;
    if (v56 + 4 > v57)
    {
      uint64_t v59 = (FILE *)*MEMORY[0x1E4F143C8];
      int v60 = 8108;
      goto LABEL_198;
    }
    __int16 v537 = *(_WORD *)(v67 + v58);
    *(void *)(v7 + 48) = v68;
    uint64_t v72 = v56 + 8;
    _CF = v57 >= v56 + 8;
    unint64_t v73 = v57 - (v56 + 8);
    if (!_CF)
    {
      uint64_t v59 = (FILE *)*MEMORY[0x1E4F143C8];
      int v60 = 8109;
      goto LABEL_198;
    }
    unsigned int v533 = *(_DWORD *)(v67 + v68);
    *(void *)(v7 + 8) = v67 + v72;
    size_t v74 = (uint64_t *)(v7 + 8);
    *(void *)(v7 + 48) = v72;
    *(unsigned char *)(v7 + 32) = 1;
    *(void *)(v7 + 16) = v73;
    *(void *)(v7 + 24) = 0;
    if (*(_DWORD *)(*a2 + 1960))
    {
      uint64_t v81 = 0;
      unint64_t v82 = 0;
      do
      {
        *(_DWORD *)buf = 0;
        LODWORD(v559) = 0;
        if (!BitstreamUnpack((uint64_t *)(v7 + 8), (int *)buf, (unsigned __int16)v576))
        {
          int v60 = 8117;
          goto LABEL_197;
        }
        if (!BitstreamUnpack((uint64_t *)(v7 + 8), (int *)&v559, (unsigned __int16)v576))
        {
          int v60 = 8118;
          goto LABEL_197;
        }
        uint64_t v83 = *a2;
        int32x2_t v84 = (int32x2_t)vld1_dup_f32((const float *)&v576 + 1);
        *(float32x2_t *)(*(void *)(*a2 + 1968) + v81) = vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_s32(vadd_s32(v84, (int32x2_t)__PAIR64__(v559, *(unsigned int *)buf)))), v580));
        ++v82;
        unint64_t v85 = *(unsigned int *)(v83 + 1960);
        v81 += 12;
      }
      while (v82 < v85);
      if (v85)
      {
        unint64_t v86 = 0;
        uint64_t v87 = 8;
        do
        {
          *(_DWORD *)buf = 0;
          if (!BitstreamUnpack((uint64_t *)(v7 + 8), (int *)buf, v582))
          {
            uint64_t v59 = (FILE *)*MEMORY[0x1E4F143C8];
            int v60 = 8127;
            goto LABEL_198;
          }
          float v88 = ((double)(__int16)v577
               + v581
               * (double)(v583 + (unint64_t)*(unsigned int *)buf)
               * (double)(SHIWORD(v577) - (__int16)v577))
              * v579;
          uint64_t v89 = *a2;
          *(float *)(*(void *)(*a2 + 1968) + v87) = v88;
          ++v86;
          v87 += 12;
        }
        while (v86 < *(unsigned int *)(v89 + 1960));
      }
    }
  }
  LODWORD(v557[0]) = 0;
  BOOL v90 = BitstreamUnpack(v74, (int *)v557, 0x10uLL);
  if (!v90)
  {
    uint64_t v59 = (FILE *)*MEMORY[0x1E4F143C8];
    int v60 = 8168;
    goto LABEL_198;
  }
  uint64_t v91 = geo::codec::Allocator::instance((geo::codec::Allocator *)v90);
  uint64_t v532 = LODWORD(v557[0]);
  uint64_t v92 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v91 + 16))(v91, 16 * LODWORD(v557[0]), 8);
  *(void *)(*a2 + 2008) = v92;
  uint64_t v93 = geo::codec::Allocator::instance(v92);
  uint64_t v94 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v93 + 16))(v93, 24 * v532, 8);
  uint64_t v95 = *a2;
  *(void *)(*a2 + 2024) = v94;
  if (!v532) {
    goto LABEL_158;
  }
  int v530 = 0;
  double v535 = 1.0 / (double)(1 << (v537 - 1));
  unint64_t v538 = v65;
  int32x2_t v96 = vdup_n_s32(v533);
  do
  {
    *(_DWORD *)buf = 0;
    LODWORD(v559) = 0;
    if (!BitstreamUnpack(v74, (int *)buf, 0x20uLL))
    {
      int v60 = 8175;
LABEL_197:
      uint64_t v59 = (FILE *)*MEMORY[0x1E4F143C8];
      goto LABEL_198;
    }
    if (!BitstreamUnpack(v74, (int *)&v559, 0x10uLL))
    {
      int v60 = 8176;
      goto LABEL_197;
    }
    LODWORD(v556[0]) = 0;
    BOOL v97 = BitstreamUnpack(v74, (int *)v556, 8uLL);
    if (!v97)
    {
      uint64_t v59 = (FILE *)*MEMORY[0x1E4F143C8];
      int v60 = 8178;
      goto LABEL_198;
    }
    if (LODWORD(v556[0]) >= 2)
    {
      uint64_t v59 = (FILE *)*MEMORY[0x1E4F143C8];
      int v60 = 8179;
      goto LABEL_198;
    }
    if (LODWORD(v556[0]) == 1)
    {
      uint64_t v110 = *(void *)(*a2 + 2024);
      unsigned int v111 = *(unsigned __int16 *)(*a2 + 2016);
      uint64_t v112 = v110 + 24 * *(unsigned __int16 *)(*a2 + 2016);
      *(_WORD *)(*a2 + 2016) = v111 + 1;
      *(_DWORD *)uint64_t v112 = *(_DWORD *)buf;
      *(_WORD *)(v112 + 4) = v559;
      if (!BitstreamUnpack(v74, (int *)(v112 + 8), 0x20uLL))
      {
        uint64_t v59 = (FILE *)*MEMORY[0x1E4F143C8];
        int v60 = 8206;
        goto LABEL_198;
      }
      if (!BitstreamUnpack(v74, (int *)(v110 + 24 * v111 + 12), 0x20uLL))
      {
        uint64_t v59 = (FILE *)*MEMORY[0x1E4F143C8];
        int v60 = 8207;
        goto LABEL_198;
      }
      if (!BitstreamUnpack(v74, (int *)(v110 + 24 * v111 + 16), 0x20uLL))
      {
        uint64_t v59 = (FILE *)*MEMORY[0x1E4F143C8];
        int v60 = 8208;
        goto LABEL_198;
      }
      uint64_t v94 = BitstreamUnpack(v74, (int *)(v110 + 24 * v111 + 20), 0x20uLL);
      if ((v94 & 1) == 0)
      {
        uint64_t v59 = (FILE *)*MEMORY[0x1E4F143C8];
        int v60 = 8209;
        goto LABEL_198;
      }
    }
    else
    {
      uint64_t v98 = *(void *)(*a2 + 2008);
      uint64_t v99 = *(unsigned __int16 *)(*a2 + 2000);
      uint64_t v100 = v98 + 16 * v99;
      *(_WORD *)(*a2 + 2000) = v99 + 1;
      *(_DWORD *)uint64_t v100 = *(_DWORD *)buf;
      uint64_t v101 = v559;
      *(_WORD *)(v100 + 4) = v559;
      uint64_t v102 = geo::codec::Allocator::instance((geo::codec::Allocator *)v97);
      uint64_t v103 = 8 * v101;
      uint64_t v94 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v102 + 16))(v102, 8 * v101, 8);
      uint64_t v104 = v98 + 16 * v99;
      *(void *)(v104 + 8) = v94;
      size_t v105 = (uint64_t *)(v104 + 8);
      if (v101)
      {
        uint64_t v106 = 0;
        while (1)
        {
          uint64_t v107 = *v105;
          v552[0] = 0;
          LODWORD(v551) = 0;
          if (!BitstreamUnpack(v74, v552, v538))
          {
            int v60 = 0x2000;
            goto LABEL_197;
          }
          uint64_t v94 = BitstreamUnpack(v74, (int *)&v551, v538);
          if (!v94) {
            break;
          }
          int32x2_t v108 = vadd_s32((int32x2_t)__PAIR64__(v551, v552[0]), v96);
          v109.i64[0] = v108.i32[0];
          v109.i64[1] = v108.i32[1];
          *(float32x2_t *)(v107 + v106) = vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_s64(v109), v535));
          v106 += 8;
          if (v103 == v106) {
            goto LABEL_156;
          }
        }
        int v60 = 8193;
        goto LABEL_197;
      }
    }
LABEL_156:
    ++v530;
  }
  while (v530 != v532);
  uint64_t v95 = *a2;
LABEL_158:
  if (*(_WORD *)(v95 + 2000))
  {
    uint64_t v113 = geo::codec::Allocator::instance((geo::codec::Allocator *)v94);
    uint64_t v94 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v113 + 32))(v113, *(void *)(*a2 + 2008), 16 * *(unsigned __int16 *)(*a2 + 2000));
    goto LABEL_168;
  }
  if (*(void *)(v95 + 2008))
  {
    uint64_t v114 = geo::codec::Allocator::instance((geo::codec::Allocator *)v94);
    (*(void (**)(uint64_t, void, void))(*(void *)v114 + 40))(v114, *(void *)(*a2 + 2008), 0);
    uint64_t v94 = 0;
LABEL_168:
    uint64_t v95 = *a2;
    *(void *)(*a2 + 2008) = v94;
  }
  if (*(_WORD *)(v95 + 2016))
  {
    uint64_t v115 = geo::codec::Allocator::instance((geo::codec::Allocator *)v94);
    uint64_t v116 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v115 + 32))(v115, *(void *)(*a2 + 2024), 24 * *(unsigned __int16 *)(*a2 + 2016));
    uint64_t v95 = *a2;
    *(void *)(*a2 + 2024) = v116;
  }
  else if (*(void *)(v95 + 2024))
  {
    uint64_t v117 = geo::codec::Allocator::instance((geo::codec::Allocator *)v94);
    (*(void (**)(uint64_t, void, void))(*(void *)v117 + 40))(v117, *(void *)(*a2 + 2008), 0);
    uint64_t v95 = *a2;
    *(void *)(*a2 + 2008) = 0;
  }
  if ((*(void *)(v7 + 24) & 7) != 0) {
    uint64_t v118 = *(void *)(v7 + 48) + (*(void *)(v7 + 24) >> 3) + 1;
  }
  else {
    uint64_t v118 = *(void *)(v7 + 48) + (*(void *)(v7 + 24) >> 3);
  }
  *(void *)(v7 + 48) = v118;
  *(unsigned char *)(v7 + 32) = 0;
  *(void *)&long long v559 = "ChapterDebugBlob_UncompressedVertices";
  *(void *)buf = &v559;
  std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v95 + 1912, (uint64_t *)&v559, (uint64_t)&std::piecewise_construct, (uint64_t **)buf)[3] = v118 - v55;
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)&__src);
  uint64_t v120 = *(void *)(v7 + 48);
  unint64_t v121 = *(void *)(v7 + 56);
  uint64_t v122 = v120 + 4;
  if (v120 + 4 > v121)
  {
    char v24 = (FILE *)*MEMORY[0x1E4F143C8];
    int v25 = 8234;
    goto LABEL_28;
  }
  uint64_t v123 = *(void *)(v7 + 40);
  *(_DWORD *)(*a2 + 2032) = *(_DWORD *)(v123 + v120);
  *(void *)(v7 + 48) = v122;
  uint64_t v124 = v120 + 8;
  if (v120 + 8 > v121)
  {
    char v24 = (FILE *)*MEMORY[0x1E4F143C8];
    int v25 = 8235;
    goto LABEL_28;
  }
  int v531 = *(_DWORD *)(v123 + v122);
  *(void *)(v7 + 48) = v124;
  if (*(_DWORD *)(v7 + 64) < 0x16u)
  {
    int v126 = 0;
  }
  else
  {
    unint64_t v125 = v120 + 12;
    if (v125 > v121)
    {
      char v24 = (FILE *)*MEMORY[0x1E4F143C8];
      int v25 = 8237;
      goto LABEL_28;
    }
    int v126 = *(_DWORD *)(v123 + v124);
    *(void *)(v7 + 48) = v125;
  }
  uint64_t v127 = geo::codec::Allocator::instance(v119);
  uint64_t v128 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v127 + 24))(v127, (v126 + v531 + *(_DWORD *)(*a2 + 2032)), 2);
  uint64_t v129 = *a2;
  *(void *)(v129 + 2040) = v128;
  __src = "ChapterDebugBlob_UncompressedIndexes";
  uint64_t v562 = v129;
  uint64_t v130 = a2[1];
  uint64_t v563 = v130;
  if (v130) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v130 + 8), 1uLL, memory_order_relaxed);
  }
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v564 = 0;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v564 = std::chrono::steady_clock::now().__d_.__rep_;
  uint64_t v131 = *(void *)(v7 + 48);
  uint64_t v132 = *a2;
  uint64_t v133 = *(unsigned int *)(*a2 + 2032);
  if (v133)
  {
    uint64_t v134 = 0;
    unint64_t v135 = *(void *)(v7 + 56);
    uint64_t v136 = 2 * v133;
    while (1)
    {
      unint64_t v137 = v131 + v134 + 2;
      if (v137 > v135) {
        break;
      }
      *(_WORD *)(*(void *)(v132 + 2040) + v134) = *(_WORD *)(*(void *)(v7 + 40) + v131 + v134);
      *(void *)(v7 + 48) = v137;
      v134 += 2;
      if (v136 == v134)
      {
        uint64_t v138 = v131 + v134;
        goto LABEL_212;
      }
    }
    uint64_t v59 = (FILE *)*MEMORY[0x1E4F143C8];
    int v60 = 8246;
LABEL_198:
    fprintf(v59, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v60);
    geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)&__src);
    goto LABEL_29;
  }
  uint64_t v138 = *(void *)(v7 + 48);
LABEL_212:
  *(void *)&long long v559 = "ChapterDebugBlob_UncompressedIndexes";
  *(void *)buf = &v559;
  std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v132 + 1912, (uint64_t *)&v559, (uint64_t)&std::piecewise_construct, (uint64_t **)buf)[3] = v138 - v131;
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)&__src);
  uint64_t v562 = 0;
  __src = 0;
  uint64_t v563 = 0;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v564 = geo::codec::Allocator::instance(v139);
  uint64_t v140 = geo::codec::_readMaterials(v7, (uint64_t)&__src, (uint64_t)&v585, &v589, *a2 + 1112, 0);
  if ((v140 & 1) == 0)
  {
    size_t v147 = (FILE *)*MEMORY[0x1E4F143C8];
    int v148 = 8252;
    goto LABEL_216;
  }
  *(_WORD *)(*a2 + 2800) = (v562 - __src) >> 3;
  uint64_t v141 = geo::codec::Allocator::instance((geo::codec::Allocator *)v140);
  uint64_t v142 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v141 + 16))(v141, 8 * *(unsigned __int16 *)(*a2 + 2800), 8);
  uint64_t v143 = *a2;
  *(void *)(v143 + 2824) = v142;
  memcpy(v142, __src, 8 * *(unsigned __int16 *)(v143 + 2800));
  uint64_t v144 = *(void *)(v7 + 48);
  unint64_t v145 = *(void *)(v7 + 56);
  uint64_t v146 = v144 + 2;
  if (v144 + 2 > v145)
  {
    size_t v147 = (FILE *)*MEMORY[0x1E4F143C8];
    int v148 = 8259;
LABEL_216:
    fprintf(v147, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v148);
    goto LABEL_217;
  }
  uint64_t v149 = *(void *)(v7 + 40);
  uint64_t v150 = *(unsigned __int16 *)(v149 + v144);
  *(void *)(v7 + 48) = v146;
  uint64_t v151 = *a2;
  uint64_t v527 = v150;
  *(_WORD *)(*a2 + 2048) = v150;
  uint64_t v152 = v144 + 4;
  if (v144 + 4 > v145)
  {
    size_t v147 = (FILE *)*MEMORY[0x1E4F143C8];
    int v148 = 8262;
    goto LABEL_216;
  }
  uint64_t v526 = *(unsigned __int16 *)(v149 + v146);
  *(void *)(v7 + 48) = v152;
  uint64_t v153 = v144 + 6;
  if (v144 + 6 > v145)
  {
    size_t v147 = (FILE *)*MEMORY[0x1E4F143C8];
    int v148 = 8263;
    goto LABEL_216;
  }
  uint64_t v154 = *(unsigned __int16 *)(v149 + v152);
  *(void *)(v7 + 48) = v153;
  if (*(_DWORD *)(v7 + 64) < 0x16u)
  {
    unsigned int v156 = 0;
  }
  else
  {
    unint64_t v155 = v144 + 8;
    if (v155 > v145)
    {
      size_t v147 = (FILE *)*MEMORY[0x1E4F143C8];
      int v148 = 8265;
      goto LABEL_216;
    }
    unsigned int v156 = *(unsigned __int16 *)(v149 + v153);
    *(void *)(v7 + 48) = v155;
  }
  *(void *)buf = "ChapterDebugBlob_UncompressedMesh";
  uint64_t v604 = v151;
  uint64_t v157 = a2[1];
  uint64_t v605 = v157;
  if (v157) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v157 + 8), 1uLL, memory_order_relaxed);
  }
  v606 = 0;
  v606 = (geo::codec::Allocator *)std::chrono::steady_clock::now().__d_.__rep_;
  uint64_t v158 = *(void *)(v7 + 48);
  uint64_t v159 = geo::codec::Allocator::instance(v606);
  uint64_t v160 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v159 + 24))(v159, v526 + v527 + v154 + v156, 64);
  uint64_t v161 = *a2;
  *(void *)(*a2 + 2056) = v160;
  if (v527)
  {
    uint64_t v162 = 0;
    while (1)
    {
      uint64_t v165 = *(void *)(v7 + 48);
      if ((unint64_t)(v165 + 1) > *(void *)(v7 + 56))
      {
        int v210 = 8277;
        goto LABEL_383;
      }
      uint64_t v166 = *(void *)(v161 + 2056);
      unsigned int v167 = *(unsigned __int8 *)(*(void *)(v7 + 40) + v165);
      *(unsigned char *)(v166 + (v162 << 6)) = v167;
      uint64_t v168 = *(void *)(v7 + 48);
      *(void *)(v7 + 48) = v168 + 1;
      if (v167 > 3)
      {
        int v210 = 8278;
        goto LABEL_383;
      }
      uint64_t v169 = v168 + 2;
      unint64_t v170 = *(void *)(v7 + 56);
      if (v168 + 2 > v170)
      {
        int v210 = 8280;
        goto LABEL_383;
      }
      uint64_t v171 = *(void *)(v7 + 40);
      unsigned int v172 = *(unsigned __int8 *)(v171 + v168 + 1);
      *(void *)(v7 + 48) = v169;
      if (v172 > 1)
      {
        int v210 = 8281;
        goto LABEL_383;
      }
      uint64_t v173 = v166 + (v162 << 6);
      *(unsigned char *)(v173 + 24) = v172 != 0;
      uint64_t v174 = v168 + 6;
      if (v168 + 6 > v170)
      {
        int v210 = 8283;
        goto LABEL_383;
      }
      unsigned int v175 = *(_DWORD *)(v171 + v169);
      *(_DWORD *)(v173 + 4) = v175;
      *(void *)(v7 + 48) = v174;
      uint64_t v161 = *a2;
      if (v175 >= *(_DWORD *)(*a2 + 1960))
      {
        int v210 = 8284;
        goto LABEL_383;
      }
      uint64_t v176 = v168 + 10;
      if (v168 + 10 > v170)
      {
        int v210 = 8285;
        goto LABEL_383;
      }
      uint64_t v177 = *(unsigned int *)(v171 + v174);
      *(_DWORD *)(v166 + (v162 << 6) + 12) = v177;
      *(void *)(v7 + 48) = v176;
      if (v177 >= *(_DWORD *)(v161 + 2032))
      {
        int v210 = 8286;
        goto LABEL_383;
      }
      unint64_t v178 = v168 + 14;
      if (v178 > v170)
      {
        int v210 = 8287;
        goto LABEL_383;
      }
      int v179 = *(_DWORD *)(v171 + v176);
      *(_DWORD *)(v166 + (v162 << 6) + 16) = v179;
      *(void *)(v7 + 48) = v178;
      uint64_t v180 = (v177 + v179);
      if (v180 > *(_DWORD *)(v161 + 2032))
      {
        int v210 = 8288;
        goto LABEL_383;
      }
      uint64_t v181 = *(void *)(v161 + 2040);
      if ((v167 | 2) == 3) {
        break;
      }
      if (v177 >= v180) {
        goto LABEL_236;
      }
      uint64_t v186 = v180 - v177;
      if ((unint64_t)(v180 - v177) < 0x10)
      {
        unsigned __int16 v163 = 0;
        uint64_t v187 = v177;
LABEL_263:
        uint64_t v192 = v180 - v187;
        v193 = (unsigned __int16 *)(v181 + 2 * v187);
        do
        {
          unsigned int v195 = *v193++;
          unsigned __int16 v194 = v195;
          if (v163 <= v195) {
            unsigned __int16 v163 = v194;
          }
          --v192;
        }
        while (v192);
        goto LABEL_237;
      }
      uint64_t v187 = (v186 & 0xFFFFFFFFFFFFFFF0) + v177;
      unint64_t v188 = (uint16x8_t *)(v181 + 2 * v177 + 16);
      uint16x8_t v189 = 0uLL;
      unint64_t v190 = v186 & 0xFFFFFFFFFFFFFFF0;
      uint16x8_t v191 = 0uLL;
      do
      {
        uint16x8_t v189 = vmaxq_u16(v189, v188[-1]);
        uint16x8_t v191 = vmaxq_u16(v191, *v188);
        v188 += 2;
        v190 -= 16;
      }
      while (v190);
      unsigned __int16 v163 = vmaxvq_u16(vmaxq_u16(v189, v191));
      if (v186 != (v186 & 0xFFFFFFFFFFFFFFF0)) {
        goto LABEL_263;
      }
LABEL_237:
      uint64_t v164 = v166 + (v162 << 6);
      *(_DWORD *)(v164 + 8) = v163 + 1;
      *(void *)(v164 + 32) = 0;
      *(void *)(v164 + 40) = 0;
      if (++v162 == v527) {
        goto LABEL_268;
      }
    }
    if (v177 < v180)
    {
      unsigned __int16 v163 = 0;
      uint64_t v182 = v180 - v177;
      unint64_t v183 = (unsigned __int16 *)(v181 + 2 * v177);
      do
      {
        unsigned __int16 v185 = *v183++;
        unsigned __int16 v184 = v185;
        if (v185 == 0xFFFF) {
          unsigned __int16 v184 = v163;
        }
        if (v163 <= v184) {
          unsigned __int16 v163 = v184;
        }
        --v182;
      }
      while (v182);
      goto LABEL_237;
    }
LABEL_236:
    unsigned __int16 v163 = 0;
    goto LABEL_237;
  }
LABEL_268:
  uint64_t v196 = *(void *)(v7 + 48);
  v557[0] = (int *)"ChapterDebugBlob_UncompressedMesh";
  *(void *)&long long v559 = v557;
  std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v161 + 1912, (uint64_t *)v557, (uint64_t)&std::piecewise_construct, (uint64_t **)&v559)[3] = v196 - v158;
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)buf);
  if (!v526) {
    goto LABEL_296;
  }
  LODWORD(v547) = 0;
  *(void *)buf = 0;
  uint64_t v604 = 0;
  uint64_t v605 = 0;
  v606 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v197);
  long long v559 = 0uLL;
  *(void *)&long long v560 = 0;
  *((void *)&v560 + 1) = geo::codec::Allocator::instance(v606);
  memset(v557, 0, sizeof(v557));
  v558 = (geo::codec::Allocator *)geo::codec::Allocator::instance(*((geo::codec::Allocator **)&v560 + 1));
  memset(v556, 0, 24);
  v556[3] = (int *)geo::codec::Allocator::instance(v558);
  std::chrono::steady_clock::now();
  uint64_t v199 = *a2;
  uint64_t v198 = a2[1];
  *(void *)v552 = "ChapterDebugBlob_CompressedMeshes";
  uint64_t v553 = v199;
  uint64_t v554 = v198;
  if (v198) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v198 + 8), 1uLL, memory_order_relaxed);
  }
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v555 = 0;
  int v525 = 0;
  unsigned __int16 v528 = 0;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v555 = std::chrono::steady_clock::now().__d_.__rep_;
  uint64_t v524 = *(void *)(v7 + 48);
  while (2)
  {
    uint64_t v200 = *(void *)(*a2 + 2056);
    ++*(_WORD *)(*a2 + 2048);
    uint64_t v201 = *(void *)(v7 + 48);
    unint64_t v202 = *(void *)(v7 + 56);
    uint64_t v203 = v201 + 4;
    if (v201 + 4 > v202)
    {
      int v211 = 8334;
LABEL_294:
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v211);
      char v215 = 0;
      int v214 = 6;
      goto LABEL_295;
    }
    uint64_t v204 = *(void *)(v7 + 40);
    int v529 = *(_DWORD *)(v204 + v201);
    *(void *)(v7 + 48) = v203;
    unint64_t v205 = v201 + 8;
    if (v205 > v202)
    {
      int v211 = 8335;
      goto LABEL_294;
    }
    uint64_t v206 = v200 + (v527 << 6);
    int v207 = *(_DWORD *)(v204 + v203);
    *(void *)(v7 + 48) = v205;
    *(unsigned char *)(v206 + ((unint64_t)v528 << 6)) = 0;
    uint64_t v208 = v206 + ((unint64_t)v528 << 6);
    *(void *)(v208 + 32) = 0;
    v208 += 32;
    *(unsigned char *)(v208 - 8) = 0;
    *(_DWORD *)(v208 - 28) = v529;
    *(_DWORD *)(v208 - 20) = v207;
    *(void *)(v208 + 8) = 0;
    if (!geo::codec::chapterReadVarUint32((void *)v7, (unsigned int *)&v547))
    {
      int v211 = 8344;
      goto LABEL_294;
    }
    ++v528;
    if (!v547)
    {
      if (++v525 >= v526)
      {
        uint64_t v212 = *(void *)(v7 + 48);
        uint64_t v213 = *a2;
        *(void *)&long long v550 = "ChapterDebugBlob_CompressedMeshes";
        *(void *)&long long v551 = &v550;
        int v214 = 0;
        std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v213 + 1912, (uint64_t *)&v550, (uint64_t)&std::piecewise_construct, (uint64_t **)&v551)[3] = v212 - v524;
        char v215 = 1;
        goto LABEL_295;
      }
      continue;
    }
    break;
  }
  uint64_t v209 = *(void *)(v7 + 48);
  if (v209 + (unint64_t)v547 <= *(void *)(v7 + 56)) {
    geo::codec::decompressBinaryBlob(*(void *)(v7 + 40) + v209, v547, (uint64_t)buf, (uint64_t)&v559, (uint64_t)v557, (uint64_t *)v556);
  }
  char v215 = 0;
  int v214 = 1;
LABEL_295:
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)v552);
  *(void *)v552 = v556;
  std::vector<GeoCodecsVertexAttributesData,geo::StdAllocator<GeoCodecsVertexAttributesData,geo::codec::Allocator>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)v552);
  std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)v557);
  std::vector<gm::Matrix<int,3,1>,geo::StdAllocator<gm::Matrix<int,3,1>,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v559);
  std::vector<gm::Matrix<int,3,1>,geo::StdAllocator<gm::Matrix<int,3,1>,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)buf);
  if ((v215 & 1) == 0) {
    goto LABEL_304;
  }
LABEL_296:
  uint64_t v216 = *a2;
  int v217 = *(_DWORD *)(*a2 + 2032) + v531;
  *(_DWORD *)(*a2 + 2032) = v217;
  if (*(_DWORD *)(v7 + 64) < 0x16u) {
    goto LABEL_311;
  }
  v549[0] = 0;
  if ((geo::codec::chapterReadVarInt64((void *)v7, (uint64_t *)v549) & 1) == 0)
  {
    unint64_t v218 = (FILE *)*MEMORY[0x1E4F143C8];
    int v219 = 8483;
LABEL_302:
    fprintf(v218, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v219);
LABEL_303:
    int v214 = 6;
    goto LABEL_304;
  }
  if (v549[0])
  {
    if (*(void *)(v7 + 48) + v549[0] <= *(void *)(v7 + 56))
    {
      uint64_t v221 = *a2;
      uint64_t v220 = a2[1];
      *(void *)buf = "ChapterDebugBlob_CompressedPolyline";
      uint64_t v604 = v221;
      uint64_t v605 = v220;
      if (v220) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v220 + 8), 1uLL, memory_order_relaxed);
      }
      v606 = 0;
      v606 = (geo::codec::Allocator *)std::chrono::steady_clock::now().__d_.__rep_;
      mgcl::polyline::Decoder::Decoder((mgcl::polyline::Decoder *)&v548);
    }
    int v214 = 1;
    goto LABEL_304;
  }
  uint64_t v216 = *a2;
LABEL_311:
  *(_DWORD *)(v216 + 2032) = v217;
  *(_DWORD *)(v216 + 1960) += v541;
  *(void *)buf = "ChapterDebugBlob_Decals";
  uint64_t v604 = v216;
  uint64_t v222 = a2[1];
  uint64_t v605 = v222;
  if (v222) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v222 + 8), 1uLL, memory_order_relaxed);
  }
  v606 = 0;
  v606 = (geo::codec::Allocator *)std::chrono::steady_clock::now().__d_.__rep_;
  uint64_t v223 = *(void *)(v7 + 48);
  if ((unint64_t)(v223 + 2) > *(void *)(v7 + 56))
  {
    uint64_t v224 = (FILE *)*MEMORY[0x1E4F143C8];
    int v210 = 8571;
    goto LABEL_384;
  }
  unint64_t v225 = *(unsigned __int16 *)(*(void *)(v7 + 40) + v223);
  *(void *)(v7 + 48) = v223 + 2;
  std::vector<GeoCodecsDaVinciDecal,geo::StdAllocator<GeoCodecsDaVinciDecal,geo::codec::Allocator>>::resize((unint64_t *)(*a2 + 2200), v225);
  uint64_t v226 = *(void *)(v7 + 48);
  if (!v225)
  {
LABEL_333:
    uint64_t v257 = *a2;
    v557[0] = (int *)"ChapterDebugBlob_Decals";
    *(void *)&long long v559 = v557;
    std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v257 + 1912, (uint64_t *)v557, (uint64_t)&std::piecewise_construct, (uint64_t **)&v559)[3] = v226 - v223;
    geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)buf);
    uint64_t v259 = *a2;
    uint64_t v258 = a2[1];
    *(void *)buf = "ChapterDebugBlob_Building";
    uint64_t v604 = v259;
    uint64_t v605 = v258;
    if (v258) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v258 + 8), 1uLL, memory_order_relaxed);
    }
    v606 = 0;
    v260.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    v606 = (geo::codec::Allocator *)v260.__d_.__rep_;
    uint64_t v262 = *(void *)(v7 + 48);
    unint64_t v261 = *(void *)(v7 + 56);
    uint64_t v263 = v262 + 4;
    if (v262 + 4 > v261)
    {
      int v210 = 8615;
      goto LABEL_383;
    }
    uint64_t v264 = *a2;
    uint64_t v265 = *(void *)(v7 + 40);
    int v266 = *(_DWORD *)(v265 + v262);
    *(_DWORD *)(*a2 + 2248) = v266;
    *(void *)(v7 + 48) = v263;
    uint64_t v267 = v262 + 8;
    if (v262 + 8 > v261)
    {
      int v210 = 8616;
      goto LABEL_383;
    }
    int v268 = *(_DWORD *)(v265 + v263);
    *(_DWORD *)(v264 + 2252) = v268;
    *(void *)(v7 + 48) = v267;
    if ((v266 + v268) > *(_DWORD *)(v264 + 1960))
    {
      int v210 = 8617;
      goto LABEL_383;
    }
    if (v262 + 10 > v261)
    {
      int v210 = 8620;
      goto LABEL_383;
    }
    *(_WORD *)(v264 + 2288) = *(_WORD *)(v265 + v267);
    *(void *)(v7 + 48) = v262 + 10;
    uint64_t v270 = geo::codec::Allocator::instance((geo::codec::Allocator *)v260.__d_.__rep_);
    uint32x4_t v271 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v270 + 16))(v270, 8 * *(unsigned __int16 *)(*a2 + 2288), 8);
    uint64_t v272 = *a2;
    *(void *)(v272 + 2296) = v271;
    uint64_t v274 = *(void *)(v7 + 48);
    unint64_t v273 = *(void *)(v7 + 56);
    if (*(_WORD *)(v272 + 2288))
    {
      unint64_t v275 = 0;
      unsigned int v276 = 0;
      uint64_t v277 = (_WORD *)((char *)v271 + 4);
      while (1)
      {
        *((_DWORD *)v277 - 1) = v276;
        uint64_t v278 = v274 + 2;
        if (v274 + 2 > v273) {
          break;
        }
        int v279 = *(unsigned __int16 *)(*(void *)(v7 + 40) + v274);
        *uint64_t v277 = v279;
        *(void *)(v7 + 48) = v278;
        v276 += v279;
        if (v276 > *(_DWORD *)(v272 + 2252))
        {
          int v210 = 8627;
          goto LABEL_383;
        }
        ++v275;
        v277 += 4;
        uint64_t v274 = v278;
        if (v275 >= *(unsigned __int16 *)(v272 + 2288)) {
          goto LABEL_369;
        }
      }
      int v210 = 8625;
LABEL_383:
      uint64_t v224 = (FILE *)*MEMORY[0x1E4F143C8];
      goto LABEL_384;
    }
    uint64_t v278 = *(void *)(v7 + 48);
LABEL_369:
    if (v278 + 2 > v273)
    {
      int v210 = 8631;
      goto LABEL_383;
    }
    *(_WORD *)(v272 + 2304) = *(_WORD *)(*(void *)(v7 + 40) + v278);
    *(void *)(v7 + 48) = v278 + 2;
    uint64_t v282 = geo::codec::Allocator::instance(v271);
    uint64_t v283 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v282 + 16))(v282, 20 * *(unsigned __int16 *)(*a2 + 2304), 8);
    uint64_t v284 = *a2;
    *(void *)(v284 + 2312) = v283;
    unint64_t v285 = *(void *)(v7 + 48);
    unint64_t v286 = *(void *)(v7 + 56);
    if (*(_WORD *)(v284 + 2304))
    {
      uint64_t v287 = 0;
      unint64_t v288 = 0;
      unsigned __int16 v289 = 0;
      while (1)
      {
        unint64_t v290 = v285 + 1;
        if (v285 + 1 > v286) {
          break;
        }
        uint64_t v291 = *(void *)(v284 + 2312);
        uint64_t v292 = *(void *)(v7 + 40);
        int v293 = *(unsigned __int8 *)(v292 + v285);
        *(void *)(v7 + 48) = v290;
        *(unsigned char *)(v291 + v287) = v293 != 0;
        unint64_t v294 = v285 + 2;
        if (v285 + 2 > v286)
        {
          int v210 = 8638;
          goto LABEL_383;
        }
        char v295 = *(unsigned char *)(v292 + v290);
        *(void *)(v7 + 48) = v294;
        uint64_t v296 = v291 + v287;
        *(unsigned char *)(v291 + v287 + 1) = v295;
        if (v285 + 6 > v286)
        {
          int v210 = 8640;
          goto LABEL_383;
        }
        *(_DWORD *)(v296 + 4) = *(_DWORD *)(v292 + v294);
        uint64_t v297 = *(void *)(v7 + 48);
        uint64_t v298 = v297 + 4;
        *(void *)(v7 + 48) = v297 + 4;
        *(_DWORD *)(v296 + 12) = v289;
        unint64_t v285 = v297 + 6;
        unint64_t v286 = *(void *)(v7 + 56);
        if (v285 > v286)
        {
          int v210 = 8642;
          goto LABEL_383;
        }
        __int16 v299 = *(_WORD *)(*(void *)(v7 + 40) + v298);
        *(_WORD *)(v291 + v287 + 16) = v299;
        *(void *)(v7 + 48) = v285;
        v289 += v299 + 1;
        uint64_t v284 = *a2;
        if (*(unsigned __int16 *)(*a2 + 2288) < v289)
        {
          int v210 = 8644;
          goto LABEL_383;
        }
        ++v288;
        v287 += 20;
        if (v288 >= *(unsigned __int16 *)(v284 + 2304)) {
          goto LABEL_379;
        }
      }
      int v210 = 8636;
      goto LABEL_383;
    }
LABEL_379:
    if (v285 + 2 > v286)
    {
      int v210 = 8649;
      goto LABEL_383;
    }
    unint64_t v300 = *(unsigned __int16 *)(*(void *)(v7 + 40) + v285);
    *(void *)(v7 + 48) = v285 + 2;
    std::vector<GeoCodecsDaVinciBuilding,geo::StdAllocator<GeoCodecsDaVinciBuilding,geo::codec::Allocator>>::resize((unint64_t *)(v284 + 2320), v300);
    uint64_t v301 = *a2;
    uint64_t v302 = *(void *)(v7 + 48);
    if (v300)
    {
      uint64_t v303 = 0;
      unsigned __int16 v304 = 0;
      unint64_t v305 = *(void *)(v7 + 56);
      uint64_t v544 = 40 * v300;
      while (1)
      {
        uint64_t v306 = v302 + 8;
        if (v302 + 8 > v305) {
          break;
        }
        uint64_t v307 = *(void *)(v301 + 2320);
        uint64_t v308 = *(void *)(v7 + 40);
        *(void *)(v307 + v303 + 24) = *(void *)(v308 + v302);
        *(void *)(v7 + 48) = v306;
        if (v302 + 10 > v305)
        {
          int v210 = 8658;
          goto LABEL_383;
        }
        uint64_t v309 = *(unsigned __int16 *)(v308 + v306);
        *(void *)(v7 + 48) = v302 + 10;
        uint32x4_t v310 = (uint64_t *)(v585 + 16 * v309);
        uint32x4_t v311 = (uint64_t *)(*(void *)(v301 + 1136) + 16 * *(void *)(v589 + 8 * v309));
        std::shared_ptr<FeatureStyleAttributes const>::operator=[abi:ne180100]((void *)(v307 + v303), *v311, v311[1]);
        if (!*((unsigned char *)v310 + 8)) {
          uint32x4_t v310 = (uint64_t *)*v310;
        }
        uint64_t v312 = v307 + v303;
        *(void *)(v312 + 16) = *v310;
        *(_WORD *)(v312 + 32) = v304;
        uint64_t v313 = *(void *)(v7 + 48);
        unint64_t v305 = *(void *)(v7 + 56);
        uint64_t v302 = v313 + 2;
        if (v313 + 2 > v305)
        {
          int v210 = 8669;
          goto LABEL_383;
        }
        __int16 v314 = *(_WORD *)(*(void *)(v7 + 40) + v313);
        *(_WORD *)(v312 + 34) = v314;
        *(void *)(v7 + 48) = v302;
        v304 += v314;
        uint64_t v301 = *a2;
        if (*(unsigned __int16 *)(*a2 + 2304) < v304)
        {
          int v210 = 8671;
          goto LABEL_383;
        }
        *(unsigned char *)(v307 + v303 + 36) = 0;
        v303 += 40;
        if (v544 == v303) {
          goto LABEL_394;
        }
      }
      int v210 = 8655;
      goto LABEL_383;
    }
LABEL_394:
    v557[0] = (int *)"ChapterDebugBlob_Building";
    *(void *)&long long v559 = v557;
    std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v301 + 1912, (uint64_t *)v557, (uint64_t)&std::piecewise_construct, (uint64_t **)&v559)[3] = v302 - v262;
    geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)buf);
    uint64_t v315 = *(void *)(v7 + 48);
    uint64_t v317 = *a2;
    uint64_t v316 = a2[1];
    *(void *)buf = "ChapterDebugBlob_Primitives";
    uint64_t v604 = v317;
    uint64_t v605 = v316;
    if (v316) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v316 + 8), 1uLL, memory_order_relaxed);
    }
    v606 = 0;
    v606 = (geo::codec::Allocator *)std::chrono::steady_clock::now().__d_.__rep_;
    uint64_t v319 = *(void *)(v7 + 48);
    unint64_t v318 = *(void *)(v7 + 56);
    unint64_t v320 = v319 + 2;
    if (v319 + 2 > v318)
    {
      int v210 = 8685;
      goto LABEL_383;
    }
    uint64_t v321 = *(void *)(v7 + 40);
    unsigned int v322 = *(unsigned __int16 *)(v321 + v319);
    *(void *)(v7 + 48) = v320;
    if (v322)
    {
      for (unsigned int i = 0; i < v322; ++i)
      {
        unint64_t v324 = v320 + 2;
        if (v320 + 2 > v318)
        {
          int v210 = 8688;
          goto LABEL_383;
        }
        *(void *)(v7 + 48) = v324;
        unint64_t v325 = v320 + 6;
        if (v320 + 6 > v318)
        {
          int v210 = 8690;
          goto LABEL_383;
        }
        int v326 = *(_DWORD *)(v321 + v324);
        *(void *)(v7 + 48) = v325;
        if (v326)
        {
          unint64_t v327 = v320 + 14;
          do
          {
            if (v327 > v318)
            {
              int v210 = 8693;
              goto LABEL_383;
            }
            *(void *)(v7 + 48) = v327;
            if (v327 + 2 > v318)
            {
              int v210 = 8695;
              goto LABEL_383;
            }
            *(void *)(v7 + 48) = v327 + 2;
            if (v327 + 4 > v318)
            {
              int v210 = 8697;
              goto LABEL_383;
            }
            *(void *)(v7 + 48) = v327 + 4;
            v327 += 12;
            --v326;
          }
          while (v326);
          unint64_t v325 = v327 - 8;
        }
        unint64_t v320 = v325;
      }
    }
    else
    {
      unint64_t v325 = v320;
    }
    uint64_t v328 = *a2;
    v557[0] = (int *)"ChapterDebugBlob_Primitives";
    *(void *)&long long v559 = v557;
    std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v328 + 1912, (uint64_t *)v557, (uint64_t)&std::piecewise_construct, (uint64_t **)&v559)[3] = v325 - v315;
    geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)buf);
    uint64_t v542 = *(void *)(v7 + 48);
    uint64_t v330 = *a2;
    uint64_t v329 = a2[1];
    *(void *)buf = "ChapterDebugBlob_Scenes";
    uint64_t v604 = v330;
    uint64_t v605 = v329;
    if (v329) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v329 + 8), 1uLL, memory_order_relaxed);
    }
    v606 = 0;
    v331.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    v606 = (geo::codec::Allocator *)v331.__d_.__rep_;
    uint64_t v332 = *(void *)(v7 + 48);
    if ((unint64_t)(v332 + 2) > *(void *)(v7 + 56))
    {
      int v210 = 8706;
      goto LABEL_383;
    }
    *(_WORD *)(*a2 + 2152) = *(_WORD *)(*(void *)(v7 + 40) + v332);
    *(void *)(v7 + 48) = v332 + 2;
    uint64_t v333 = geo::codec::Allocator::instance((geo::codec::Allocator *)v331.__d_.__rep_);
    uint64x2_t v334 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v333 + 16))(v333, 56 * *(unsigned __int16 *)(*a2 + 2152), 8);
    uint64_t v335 = *a2;
    *(void *)(v335 + 2160) = v334;
    if (*(_WORD *)(v335 + 2152))
    {
      unint64_t v545 = 0;
      do
      {
        uint64_t v336 = *(void *)(v7 + 48);
        unint64_t v337 = *(void *)(v7 + 56);
        uint64_t v338 = v336 + 2;
        if (v336 + 2 > v337)
        {
          int v210 = 8711;
          goto LABEL_383;
        }
        uint64_t v339 = *(void *)(v335 + 2160);
        int8x16_t v340 = (geo::codec::Allocator **)(v339 + 56 * v545);
        int8x16_t v341 = v340 + 5;
        uint64_t v342 = *(void *)(v7 + 40);
        *((_WORD *)v340 + 20) = *(_WORD *)(v342 + v336);
        *(void *)(v7 + 48) = v338;
        uint64_t v343 = v336 + 4;
        if (v336 + 4 > v337)
        {
          int v210 = 8712;
          goto LABEL_383;
        }
        v539 = (_WORD *)(v339 + 56 * v545 + 42);
        _WORD *v539 = *(_WORD *)(v342 + v338);
        *(void *)(v7 + 48) = v343;
        uint64_t v344 = v336 + 6;
        if (v336 + 6 > v337)
        {
          int v210 = 8713;
          goto LABEL_383;
        }
        v536 = (_WORD *)(v339 + 56 * v545 + 44);
        _WORD *v536 = *(_WORD *)(v342 + v343);
        *(void *)(v7 + 48) = v344;
        if (v336 + 7 > v337)
        {
          int v210 = 8714;
          goto LABEL_383;
        }
        v534 = (unsigned char *)(v339 + 56 * v545 + 48);
        unsigned char *v534 = *(unsigned char *)(v342 + v344);
        ++*(void *)(v7 + 48);
        uint64_t v345 = geo::codec::Allocator::instance(v334);
        uint64_t v346 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v345 + 16))(v345, 4 * (unsigned __int16)*v341, 8);
        *int8x16_t v340 = v346;
        unint64_t v347 = *(void *)(v7 + 48);
        unint64_t v348 = *(void *)(v7 + 56);
        if (*v341)
        {
          uint64_t v349 = 0;
          unint64_t v350 = 0;
          do
          {
            if (v347 + 1 > v348)
            {
              int v210 = 8719;
              goto LABEL_383;
            }
            char v351 = *v340;
            *((unsigned char *)*v340 + v349) = *(unsigned char *)(*(void *)(v7 + 40) + v347);
            uint64_t v352 = *(void *)(v7 + 48);
            unint64_t v348 = *(void *)(v7 + 56);
            uint64_t v353 = v352 + 1;
            *(void *)(v7 + 48) = v352 + 1;
            unint64_t v347 = v352 + 3;
            if (v347 > v348)
            {
              int v210 = 8720;
              goto LABEL_383;
            }
            *(_WORD *)((char *)v351 + v349 + 2) = *(_WORD *)(*(void *)(v7 + 40) + v353);
            *(void *)(v7 + 48) = v347;
            ++v350;
            v349 += 4;
          }
          while (v350 < (unsigned __int16)*v341);
        }
        if (v347 + 2 > v348)
        {
          int v210 = 8723;
          goto LABEL_383;
        }
        char v354 = (_WORD *)(v339 + 56 * v545 + 46);
        *char v354 = *(_WORD *)(*(void *)(v7 + 40) + v347);
        *(void *)(v7 + 48) = v347 + 2;
        uint64_t v355 = geo::codec::Allocator::instance(v346);
        unsigned int v356 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v355 + 16))(v355, 16 * (unsigned __int16)*v354, 8);
        uint64_t v357 = v339 + 56 * v545;
        *(void *)(v357 + 24) = v356;
        unsigned int v358 = (void *)(v357 + 24);
        if (*v354)
        {
          unint64_t v359 = 0;
          do
          {
            uint64_t v360 = *(void *)(v7 + 48);
            if ((unint64_t)(v360 + 1) > *(void *)(v7 + 56))
            {
              int v210 = 8727;
              goto LABEL_383;
            }
            uint64_t v361 = *v358 + 16 * v359;
            *(unsigned char *)(v361 + 8) = *(unsigned char *)(*(void *)(v7 + 40) + v360);
            ++*(void *)(v7 + 48);
            uint64_t v362 = geo::codec::Allocator::instance(v356);
            unsigned int v356 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v362 + 16))(v362, 16 * *(unsigned __int8 *)(v361 + 8), 8);
            *(void *)uint64_t v361 = v356;
            uint64_t v363 = *(unsigned __int8 *)(v361 + 8);
            if (*(unsigned char *)(v361 + 8))
            {
              uint64_t v365 = *(void *)(v7 + 48);
              unint64_t v364 = *(void *)(v7 + 56);
              v366 = (_WORD *)((char *)v356 + 8);
              uint64_t v367 = v585;
              do
              {
                if (v365 + 2 > v364)
                {
                  int v210 = 8731;
                  goto LABEL_383;
                }
                uint64_t v369 = *(void *)(v7 + 40);
                _WORD *v366 = *(_WORD *)(v369 + v365);
                *(void *)(v7 + 48) = v365 + 2;
                uint64_t v370 = v365 + 4;
                if (v365 + 4 > v364)
                {
                  int v210 = 8734;
                  goto LABEL_383;
                }
                uint64_t v371 = *(unsigned __int16 *)(v369 + v365 + 2);
                *(void *)(v7 + 48) = v370;
                uint64_t v372 = v367 + 16 * v371;
                if (*(unsigned char *)(v372 + 8))
                {
                  int v368 = *(void **)v372;
                  if (!v368)
                  {
                    int v210 = 8738;
                    goto LABEL_383;
                  }
                }
                else
                {
                  int v368 = **(void ***)v372;
                  if (!v368)
                  {
                    int v210 = 8741;
                    goto LABEL_383;
                  }
                }
                *((void *)v366 - 1) = v368;
                v366 += 8;
                uint64_t v365 = v370;
                --v363;
              }
              while (v363);
            }
            ++v359;
          }
          while (v359 < (unsigned __int16)*v354);
        }
        uint64_t v373 = geo::codec::Allocator::instance(v356);
        v374 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v373 + 16))(v373, 16 * (unsigned __int16)*v539, 8);
        uint64_t v375 = v339 + 56 * v545;
        *(void *)(v375 + 8) = v374;
        size_t v376 = (uint64_t *)(v375 + 8);
        if (*v539)
        {
          unint64_t v377 = 0;
          do
          {
            uint64_t v378 = *(void *)(v7 + 48);
            if ((unint64_t)(v378 + 2) > *(void *)(v7 + 56))
            {
              int v210 = 8751;
              goto LABEL_383;
            }
            uint64_t v379 = *v376;
            v380 = (_WORD *)(*v376 + 16 * v377);
            _WORD *v380 = *(_WORD *)(*(void *)(v7 + 40) + v378);
            *(void *)(v7 + 48) = v378 + 2;
            uint64_t v381 = geo::codec::Allocator::instance(v374);
            v374 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v381 + 16))(v381, 2 * (unsigned __int16)*v380, 8);
            *(void *)(v379 + 16 * v377 + 8) = v374;
            if (*v380)
            {
              unint64_t v382 = 0;
              uint64_t v384 = *(void *)(v7 + 48);
              unint64_t v383 = *(void *)(v7 + 56);
              do
              {
                if (v384 + 2 > v383)
                {
                  int v210 = 8754;
                  goto LABEL_383;
                }
                *((_WORD *)v374 + v382) = *(_WORD *)(*(void *)(v7 + 40) + v384);
                *(void *)(v7 + 48) = v384 + 2;
                ++v382;
                v384 += 2;
              }
              while (v382 < (unsigned __int16)*v380);
            }
            ++v377;
          }
          while (v377 < (unsigned __int16)*v539);
        }
        uint64_t v385 = geo::codec::Allocator::instance(v374);
        uint64_t Transformation = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v385 + 16))(v385, 32 * (unsigned __int16)*v536, 8);
        uint64_t v387 = v339 + 56 * v545;
        *(void *)(v387 + 16) = Transformation;
        char v388 = (uint64_t *)(v387 + 16);
        if (*v536)
        {
          for (unint64_t j = 0; j < (unsigned __int16)*v536; ++j)
          {
            uint64_t v390 = *(void *)(v7 + 48);
            if ((unint64_t)(v390 + 2) > *(void *)(v7 + 56))
            {
              int v210 = 8761;
              goto LABEL_383;
            }
            uint64_t v391 = *v388;
            v392 = (_WORD *)(*v388 + 32 * j);
            _WORD *v392 = *(_WORD *)(*(void *)(v7 + 40) + v390);
            *(void *)(v7 + 48) = v390 + 2;
            uint64_t v393 = geo::codec::Allocator::instance((geo::codec::Allocator *)Transformation);
            v394 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v393 + 16))(v393, 2 * (unsigned __int16)*v392, 8);
            uint64_t v395 = v391 + 32 * j;
            *(void *)(v395 + 8) = v394;
            uint64_t v397 = *(void *)(v7 + 48);
            unint64_t v396 = *(void *)(v7 + 56);
            if (*v392)
            {
              unint64_t v398 = 0;
              do
              {
                uint64_t v399 = v397 + 2;
                if (v397 + 2 > v396)
                {
                  int v210 = 8764;
                  goto LABEL_383;
                }
                *((_WORD *)v394 + v398) = *(_WORD *)(*(void *)(v7 + 40) + v397);
                *(void *)(v7 + 48) = v399;
                ++v398;
                v397 += 2;
              }
              while (v398 < (unsigned __int16)*v392);
            }
            else
            {
              uint64_t v399 = *(void *)(v7 + 48);
            }
            if (v399 + 2 > v396)
            {
              int v210 = 8767;
              goto LABEL_383;
            }
            v400 = (_WORD *)(v395 + 2);
            *(_WORD *)(v395 + 2) = *(_WORD *)(*(void *)(v7 + 40) + v399);
            *(void *)(v7 + 48) = v399 + 2;
            uint64_t v401 = geo::codec::Allocator::instance(v394);
            v402 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v401 + 16))(v401, 2 * (unsigned __int16)*v400, 8);
            *(void *)(v391 + 32 * j + 16) = v402;
            uint64_t v404 = *(void *)(v7 + 48);
            unint64_t v403 = *(void *)(v7 + 56);
            if (*v400)
            {
              unint64_t v405 = 0;
              do
              {
                uint64_t v406 = v404 + 2;
                if (v404 + 2 > v403)
                {
                  int v210 = 8770;
                  goto LABEL_383;
                }
                *((_WORD *)v402 + v405) = *(_WORD *)(*(void *)(v7 + 40) + v404);
                *(void *)(v7 + 48) = v406;
                ++v405;
                v404 += 2;
              }
              while (v405 < (unsigned __int16)*v400);
            }
            else
            {
              uint64_t v406 = *(void *)(v7 + 48);
            }
            if (v406 + 1 > v403)
            {
              int v210 = 8774;
              goto LABEL_383;
            }
            int v407 = *(unsigned __int8 *)(*(void *)(v7 + 40) + v406);
            *(void *)(v7 + 48) = v406 + 1;
            uint64_t v408 = geo::codec::Allocator::instance(v402);
            uint64_t Transformation = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v408 + 24))(v408, 1, 48);
            *(void *)(v391 + 32 * j + 24) = Transformation;
            if (v407)
            {
              uint64_t Transformation = geo::codec::readTransformation((void *)v7, (_DWORD *)Transformation);
              if ((Transformation & 1) == 0)
              {
                int v210 = 8778;
                goto LABEL_383;
              }
            }
            else
            {
              *(_DWORD *)uint64_t Transformation = 1065353216;
              *(_DWORD *)(Transformation + 20) = 1065353216;
              *(_DWORD *)(Transformation + 40) = 1065353216;
            }
          }
        }
        uint64_t v409 = geo::codec::Allocator::instance((geo::codec::Allocator *)Transformation);
        uint64x2_t v334 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v409 + 16))(v409, 2 * *v534, 8);
        *(void *)(v339 + 56 * v545 + 32) = v334;
        uint64_t v410 = *v534;
        if (*v534)
        {
          uint64_t v412 = *(void *)(v7 + 48);
          unint64_t v411 = *(void *)(v7 + 56);
          do
          {
            if (v412 + 2 > v411)
            {
              int v210 = 8788;
              goto LABEL_383;
            }
            *(_WORD *)uint64x2_t v334 = *(_WORD *)(*(void *)(v7 + 40) + v412);
            uint64x2_t v334 = (geo::codec::Allocator *)((char *)v334 + 2);
            *(void *)(v7 + 48) = v412 + 2;
            v412 += 2;
            --v410;
          }
          while (v410);
        }
        uint64_t v335 = *a2;
        ++v545;
      }
      while (v545 < *(unsigned __int16 *)(*a2 + 2152));
    }
    uint64_t v413 = *(void *)(v7 + 48);
    v557[0] = (int *)"ChapterDebugBlob_Scenes";
    *(void *)&long long v559 = v557;
    std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v335 + 1912, (uint64_t *)v557, (uint64_t)&std::piecewise_construct, (uint64_t **)&v559)[3] = v413 - v542;
    geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)buf);
    uint64_t v540 = *(void *)(v7 + 48);
    uint64_t v415 = *a2;
    uint64_t v414 = a2[1];
    *(void *)buf = "ChapterDebugBlob_Assets";
    uint64_t v604 = v415;
    uint64_t v605 = v414;
    if (v414) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v414 + 8), 1uLL, memory_order_relaxed);
    }
    v606 = 0;
    v606 = (geo::codec::Allocator *)std::chrono::steady_clock::now().__d_.__rep_;
    uint64_t v416 = *(void *)(v7 + 48);
    if ((unint64_t)(v416 + 2) > *(void *)(v7 + 56))
    {
      int v210 = 8798;
      goto LABEL_383;
    }
    unint64_t v417 = *(unsigned __int16 *)(*(void *)(v7 + 40) + v416);
    *(void *)(v7 + 48) = v416 + 2;
    unint64_t v543 = v417;
    std::vector<GeoCodecsDaVinciAsset,geo::StdAllocator<GeoCodecsDaVinciAsset,geo::codec::Allocator>>::resize(*a2 + 2072, v417);
    if (v543)
    {
      uint64_t v546 = 0;
      while (1)
      {
        uint64_t v418 = *(void *)(v7 + 48);
        if ((unint64_t)(v418 + 2) > *(void *)(v7 + 56))
        {
          int v210 = 8802;
          goto LABEL_383;
        }
        v419 = (uint64_t *)(*(void *)(*a2 + 2072) + 40 * v546);
        unint64_t v420 = *(unsigned __int16 *)(*(void *)(v7 + 40) + v418);
        *(_WORD *)v419 = v420;
        *(void *)(v7 + 48) = v418 + 2;
        v421 = v419 + 1;
        std::vector<GeoCodecsDaVinciAttributedMesh,geo::StdAllocator<GeoCodecsDaVinciAttributedMesh,geo::codec::Allocator>>::resize(v419 + 1, v420);
        if (*(_WORD *)v419) {
          break;
        }
LABEL_497:
        if (++v546 == v543) {
          goto LABEL_508;
        }
      }
      uint64_t v422 = 0;
      unint64_t v423 = 0;
      while (1)
      {
        uint64_t v424 = *(void *)(v7 + 48);
        unint64_t v425 = *(void *)(v7 + 56);
        uint64_t v426 = v424 + 2;
        if (v424 + 2 > v425) {
          break;
        }
        uint64_t v427 = *(void *)(v7 + 40);
        uint64_t v428 = *v421;
        *(_WORD *)(*v421 + v422) = *(_WORD *)(v427 + v424);
        *(void *)(v7 + 48) = v426;
        unint64_t v429 = v424 + 4;
        if (v429 > v425)
        {
          int v210 = 8808;
          goto LABEL_383;
        }
        uint64_t v430 = *(unsigned __int16 *)(v427 + v426);
        *(void *)(v7 + 48) = v429;
        v431 = (uint64_t *)(*(void *)(*a2 + 1136) + 16 * *(void *)(v589 + 8 * v430));
        uint64_t v432 = v428 + v422;
        std::shared_ptr<FeatureStyleAttributes const>::operator=[abi:ne180100]((void *)(v428 + v422 + 16), *v431, v431[1]);
        v433 = (uint64_t *)(v585 + 16 * v430);
        if (!*((unsigned char *)v433 + 8)) {
          v433 = (uint64_t *)*v433;
        }
        *(void *)(v432 + 8) = *v433;
        ++v423;
        v422 += 32;
        if (v423 >= *(unsigned __int16 *)v419) {
          goto LABEL_497;
        }
      }
      int v210 = 8806;
      goto LABEL_383;
    }
LABEL_508:
    uint64_t v434 = *a2;
    uint64_t v435 = *(void *)(v7 + 48);
    v557[0] = (int *)"ChapterDebugBlob_Assets";
    *(void *)&long long v559 = v557;
    std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v434 + 1912, (uint64_t *)v557, (uint64_t)&std::piecewise_construct, (uint64_t **)&v559)[3] = v435 - v540;
    geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)buf);
    if (v584)
    {
      float v436 = v580;
      float v437 = v581;
      uint64_t v438 = v577;
      uint64_t v439 = v578;
    }
    else
    {
      uint64_t v439 = 0;
      uint64_t v438 = 0;
      float v437 = v574;
      float v436 = v574;
    }
    uint64_t v441 = *a2;
    uint64_t v440 = a2[1];
    *(void *)buf = "ChapterDebugBlob_CompressedAssetLocations";
    uint64_t v604 = v441;
    uint64_t v605 = v440;
    if (v440) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v440 + 8), 1uLL, memory_order_relaxed);
    }
    v606 = 0;
    v606 = (geo::codec::Allocator *)std::chrono::steady_clock::now().__d_.__rep_;
    uint64_t v442 = *(void *)(v7 + 48);
    if (!geo::codec::readRenderableTransforms((geo::codec::Allocator *)&v596, (uint64_t)&__p, (void *)v7, v438 | ((unint64_t)LODWORD(v436) << 32), LODWORD(v437) | (unint64_t)(v439 << 32)))
    {
      uint64_t v224 = (FILE *)*MEMORY[0x1E4F143C8];
      int v210 = 8845;
      goto LABEL_384;
    }
    uint64_t v443 = *a2;
    uint64_t v444 = *(void *)(v7 + 48);
    v557[0] = (int *)"ChapterDebugBlob_CompressedAssetLocations";
    *(void *)&long long v559 = v557;
    std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v443 + 1912, (uint64_t *)v557, (uint64_t)&std::piecewise_construct, (uint64_t **)&v559)[3] = v444 - v442;
    geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)buf);
    uint64_t v446 = *a2;
    uint64_t v445 = a2[1];
    *(void *)buf = "ChapterDebugBlob_AssetsLocation";
    uint64_t v604 = v446;
    uint64_t v605 = v445;
    if (v445) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v445 + 8), 1uLL, memory_order_relaxed);
    }
    v606 = 0;
    v606 = (geo::codec::Allocator *)std::chrono::steady_clock::now().__d_.__rep_;
    long long v559 = 0uLL;
    *(void *)&long long v560 = 0;
    *((void *)&v560 + 1) = geo::codec::Allocator::instance(v606);
    *(void *)v552 = 0;
    int v447 = geo::codec::_decodeDaVinciRenderables((geo::codec::Allocator *)v7, &v596, (uint64_t)&__p, (uint64_t *)(*a2 + 2176), (_WORD *)(*a2 + 2168), (uint64_t)&v559, v552);
    if (v447)
    {
      uint64_t v448 = *a2;
      uint64_t v449 = *(void *)v552;
      v556[0] = (int *)"ChapterDebugBlob_AssetsLocation";
      v557[0] = (int *)v556;
      v450 = (geo::codec::Allocator *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v448 + 1912, (uint64_t *)v556, (uint64_t)&std::piecewise_construct, (uint64_t **)v557);
      *((void *)v450 + 3) = v449;
      *(_WORD *)(*a2 + 2796) = (DWORD2(v559) - v559) >> 3;
      uint64_t v451 = geo::codec::Allocator::instance(v450);
      v452 = (void *)(*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v451 + 16))(v451, *((void *)&v559 + 1) - v559, 8);
      *(void *)(*a2 + 2808) = v452;
      memcpy(v452, (const void *)v559, *((void *)&v559 + 1) - v559);
      int v214 = 0;
    }
    else
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 8857);
      int v214 = 6;
    }
    std::vector<unsigned long long,geo::StdAllocator<unsigned long long,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v559);
    geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)buf);
    if (v447)
    {
      if (*(_DWORD *)(v7 + 64) < 0x12u) {
        goto LABEL_572;
      }
      if ((geo::codec::_decodeMaterialModifiers((void *)v7, a2) & 1) == 0)
      {
        size_t v147 = (FILE *)*MEMORY[0x1E4F143C8];
        int v148 = 8866;
        goto LABEL_216;
      }
      uint64_t v453 = *(void *)(v7 + 48);
      uint64_t v455 = *a2;
      uint64_t v454 = a2[1];
      *(void *)buf = "ChapterDebugBlob_MaterialModifiers";
      uint64_t v604 = v455;
      uint64_t v605 = v454;
      if (v454) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v454 + 8), 1uLL, memory_order_relaxed);
      }
      v606 = 0;
      v606 = (geo::codec::Allocator *)std::chrono::steady_clock::now().__d_.__rep_;
      LODWORD(v556[0]) = 0;
      if ((geo::codec::chapterReadVarUint32((void *)v7, (unsigned int *)v556) & 1) == 0)
      {
        int v210 = 8871;
        goto LABEL_383;
      }
      std::unordered_map<unsigned short,unsigned short>::reserve[abi:ne180100](*a2 + 2384, LODWORD(v556[0]));
      if (LODWORD(v556[0]))
      {
        int v456 = 0;
        while (1)
        {
          uint64_t v457 = *(void *)(v7 + 48);
          unint64_t v458 = *(void *)(v7 + 56);
          uint64_t v459 = v457 + 2;
          if (v457 + 2 > v458) {
            break;
          }
          uint64_t v460 = *(void *)(v7 + 40);
          unint64_t v461 = *(unsigned __int16 *)(v460 + v457);
          *(void *)(v7 + 48) = v459;
          unint64_t v462 = v457 + 4;
          if (v462 > v458)
          {
            int v210 = 8877;
            goto LABEL_383;
          }
          unint64_t v463 = *(unsigned __int16 *)(v460 + v459);
          *(void *)(v7 + 48) = v462;
          uint64_t v464 = *a2;
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(*a2 + 2328) - *(void *)(*a2 + 2320)) >> 3) <= v461)
          {
            int v210 = 8878;
            goto LABEL_383;
          }
          if (v463 >= (uint64_t)(*(void *)(v464 + 2112) - *(void *)(v464 + 2104)) >> 4)
          {
            int v210 = 8879;
            goto LABEL_383;
          }
          std::__hash_table<std::__hash_value_type<unsigned short,unsigned short>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,unsigned short>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,unsigned short>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,unsigned short>>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short,unsigned short>>(v464 + 2384, v461, v461, v463);
          if (++v456 >= LODWORD(v556[0])) {
            goto LABEL_542;
          }
        }
        int v210 = 8876;
        goto LABEL_383;
      }
LABEL_542:
      uint64_t v465 = *a2;
      uint64_t v466 = *(void *)(v7 + 48);
      v557[0] = (int *)"ChapterDebugBlob_MaterialModifiers";
      *(void *)&long long v559 = v557;
      std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v465 + 1912, (uint64_t *)v557, (uint64_t)&std::piecewise_construct, (uint64_t **)&v559)[3] = v466 - v453;
      uint64_t v467 = *(unsigned __int16 *)(*a2 + 2168);
      if (*(_WORD *)(*a2 + 2168))
      {
        uint64_t v468 = 0;
        do
        {
          if (std::unordered_map<unsigned int,std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>>::find[abi:ne180100](__p, *((unint64_t *)&__p + 1), v468))
          {
            uint64_t v469 = *(void *)(*a2 + 2176);
            uint64_t v470 = v469 + 48 * v468;
            int v472 = *(unsigned __int16 *)(v470 + 42);
            v471 = (unsigned __int16 *)(v470 + 42);
            if (v472)
            {
              unint64_t v473 = 0;
              v474 = (void *)(v469 + 48 * v468 + 8);
              do
              {
                int v475 = *(_DWORD *)(*std::unordered_map<unsigned int,std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>>::at(__p, *((unint64_t *)&__p + 1), v468)+ 4 * v473);
                if (v475)
                {
                  unint64_t v476 = (v475 - 1);
                  uint64_t v477 = *(void *)(*a2 + 2104);
                  if (v476 >= (*(void *)(*a2 + 2112) - v477) >> 4)
                  {
                    uint64_t v224 = (FILE *)*MEMORY[0x1E4F143C8];
                    int v210 = 8896;
                    goto LABEL_384;
                  }
                  uint64_t v478 = v477 + 16 * v476;
                  if (*(unsigned char *)(v478 + 12)) {
                    *(unsigned char *)(*v474 + v473) |= 1u;
                  }
                  if (*(unsigned char *)(v478 + 13)) {
                    *(unsigned char *)(*v474 + v473) |= 2u;
                  }
                }
                ++v473;
              }
              while (v473 < *v471);
            }
          }
          ++v468;
        }
        while (v468 != v467);
      }
      geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)buf);
      if (*(_DWORD *)(v7 + 64) <= 0x16u)
      {
LABEL_572:
        LOBYTE(v480) = 15;
      }
      else
      {
        uint64_t v479 = *(void *)(v7 + 48);
        if ((unint64_t)(v479 + 1) > *(void *)(v7 + 56))
        {
          size_t v147 = (FILE *)*MEMORY[0x1E4F143C8];
          int v148 = 8918;
          goto LABEL_216;
        }
        int v480 = *(unsigned __int8 *)(*(void *)(v7 + 40) + v479);
        *(void *)(v7 + 48) = v479 + 1;
        if (!v480)
        {
          if (qword_1EB2A09B0 != -1) {
            dispatch_once(&qword_1EB2A09B0, &__block_literal_global_218);
          }
          v510 = _MergedGlobals_355;
          LOBYTE(v480) = 15;
          if (os_log_type_enabled((os_log_t)_MergedGlobals_355, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = 15;
            _os_log_impl(&dword_188D96000, v510, OS_LOG_TYPE_ERROR, "Signed distance resolution cannot be 0. Defaulting to %d", buf, 8u);
          }
        }
      }
      uint64_t v481 = *(unsigned __int16 *)(*a2 + 2048);
      if (*(_WORD *)(*a2 + 2048))
      {
        uint64_t v482 = 0;
        uint64_t v483 = *(void *)(*a2 + 2056);
        int v484 = ~(-1 << v480);
        __asm { FMOV            V2.2D, #1.0 }
        float64x2_t v489 = vdivq_f64(_Q2, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v484), 0));
        double v490 = 1.0 / (double)v484;
        do
        {
          uint64_t v491 = v483 + (v482 << 6);
          v492 = *(float32x2_t **)(v491 + 40);
          if (!v492) {
            goto LABEL_575;
          }
          uint64_t v493 = *(unsigned int *)(v491 + 8);
          if (!v493) {
            goto LABEL_575;
          }
          if (v493 >= 8)
          {
            uint64_t v494 = v493 & 0xFFFFFFF8;
            v495 = v492 + 2;
            uint64_t v496 = v494;
            do
            {
              float32x4_t v497 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(*v495), v489)), vmulq_f64(vcvt_hight_f64_f32(*(float32x4_t *)v495->f32), v489));
              *(float32x4_t *)v495[-2].f32 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(v495[-2]), v489)), vmulq_f64(vcvt_hight_f64_f32(*(float32x4_t *)v495[-2].f32), v489));
              *(float32x4_t *)v495->f32 = v497;
              v495 += 4;
              v496 -= 8;
            }
            while (v496);
            if (v494 == v493) {
              goto LABEL_575;
            }
          }
          else
          {
            uint64_t v494 = 0;
          }
          uint64_t v498 = v493 - v494;
          v499 = (float *)v492 + v494;
          do
          {
            float v500 = *v499 * v490;
            *v499++ = v500;
            --v498;
          }
          while (v498);
LABEL_575:
          ++v482;
        }
        while (v482 != v481);
      }
      if (*(_DWORD *)(v7 + 64) <= 0x17u) {
        goto LABEL_629;
      }
      LODWORD(v557[0]) = 0;
      LODWORD(v556[0]) = 0;
      v552[0] = 0;
      LODWORD(v551) = 0;
      if ((geo::codec::chapterReadVarUint32((void *)v7, (unsigned int *)v557) & 1) == 0)
      {
        unint64_t v218 = (FILE *)*MEMORY[0x1E4F143C8];
        int v219 = 8939;
        goto LABEL_302;
      }
      if ((geo::codec::chapterReadVarUint32((void *)v7, (unsigned int *)v556) & 1) == 0)
      {
        unint64_t v218 = (FILE *)*MEMORY[0x1E4F143C8];
        int v219 = 8940;
        goto LABEL_302;
      }
      if ((geo::codec::chapterReadVarUint32((void *)v7, (unsigned int *)v552) & 1) == 0)
      {
        unint64_t v218 = (FILE *)*MEMORY[0x1E4F143C8];
        int v219 = 8941;
        goto LABEL_302;
      }
      if ((geo::codec::chapterReadVarUint32((void *)v7, (unsigned int *)&v551) & 1) == 0)
      {
        unint64_t v218 = (FILE *)*MEMORY[0x1E4F143C8];
        int v219 = 8942;
        goto LABEL_302;
      }
      if (!LODWORD(v557[0]))
      {
LABEL_629:
        std::vector<unsigned long long,geo::StdAllocator<unsigned long long,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&__src);
        goto LABEL_17;
      }
      LODWORD(v550) = 0;
      uint64_t VarUint32 = geo::codec::chapterReadVarUint32((void *)v7, (unsigned int *)&v550);
      if ((VarUint32 & 1) == 0)
      {
        unint64_t v218 = (FILE *)*MEMORY[0x1E4F143C8];
        int v219 = 8946;
        goto LABEL_302;
      }
      uint64_t v502 = *(void *)(v7 + 48);
      unint64_t v503 = v502 + v550;
      if (v503 > *(void *)(v7 + 56))
      {
        unint64_t v218 = (FILE *)*MEMORY[0x1E4F143C8];
        int v219 = 8949;
        goto LABEL_302;
      }
      uint64_t v504 = *(void *)(v7 + 40);
      *(void *)(v7 + 48) = v503;
      *(void *)buf = 0;
      uint64_t v604 = 0;
      uint64_t v605 = 0;
      v606 = (geo::codec::Allocator *)geo::codec::Allocator::instance((geo::codec::Allocator *)VarUint32);
      if ((geo::codec::decompressiArray(v504 + v502, v550, buf) & 1) == 0)
      {
        v508 = (FILE *)*MEMORY[0x1E4F143C8];
        int v509 = 8952;
        goto LABEL_616;
      }
      LODWORD(v549[0]) = 0;
      uint64_t v505 = geo::codec::chapterReadVarUint32((void *)v7, (unsigned int *)v549);
      if ((v505 & 1) == 0)
      {
        v508 = (FILE *)*MEMORY[0x1E4F143C8];
        int v509 = 8955;
        goto LABEL_616;
      }
      uint64_t v506 = *(void *)(v7 + 48);
      unint64_t v507 = v506 + LODWORD(v549[0]);
      if (v507 > *(void *)(v7 + 56))
      {
        v508 = (FILE *)*MEMORY[0x1E4F143C8];
        int v509 = 8958;
LABEL_616:
        fprintf(v508, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v509);
        std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)buf);
        goto LABEL_303;
      }
      uint64_t v511 = *(void *)(v7 + 40);
      *(void *)(v7 + 48) = v507;
      uint64_t v512 = geo::codec::Allocator::instance((geo::codec::Allocator *)v505);
      v513 = (uint64x2_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v512 + 16))(v512, 8 * LODWORD(v557[0]), 8);
      *(void *)(*a2 + 2064) = v513;
      long long v559 = 0u;
      long long v560 = 0u;
      if (mgcl::ints::IntDecompressor<unsigned long long>::decompress((uint64_t *)&v559, (unsigned __int8 *)(v511 + v506), LODWORD(v549[0]), (char)v556[0], v552[0], LODWORD(v557[0]), v513))
      {
        int v514 = 8963;
      }
      else
      {
        uint64_t v515 = *a2;
        uint64_t v516 = (v551 + 1);
        if (v516 <= *(unsigned __int16 *)(*a2 + 2048))
        {
          if (v551 != -1)
          {
            uint64_t v518 = *(void *)(v515 + 2064);
            uint64_t v519 = *(void *)(v515 + 2056);
            v520 = *(int **)buf;
            uint64_t v521 = v519 + 48;
            do
            {
              *(void *)uint64_t v521 = 0;
              *(_DWORD *)(v521 + 8) = *v520;
              int v523 = *v520++;
              uint64_t v522 = v523;
              if (v523 >= 1)
              {
                *(void *)uint64_t v521 = v518;
                v518 += 8 * v522;
              }
              v521 += 64;
              --v516;
            }
            while (v516);
          }
          int v214 = 0;
          char v517 = 1;
LABEL_628:
          mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&v559);
          std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)buf);
          if ((v517 & 1) == 0) {
            goto LABEL_304;
          }
          goto LABEL_629;
        }
        int v514 = 8967;
      }
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v514);
      char v517 = 0;
      int v214 = 6;
      goto LABEL_628;
    }
LABEL_304:
    std::vector<unsigned long long,geo::StdAllocator<unsigned long long,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&__src);
    if (v214)
    {
      char v20 = 0;
      uint64_t v17 = 0;
      if (v214 == 6) {
        goto LABEL_30;
      }
      goto LABEL_66;
    }
    goto LABEL_17;
  }
  uint64_t v227 = 0;
  unint64_t v228 = *(void *)(v7 + 56);
  uint64_t v229 = 72 * v225;
  while (1)
  {
    if (v226 + 4 > v228)
    {
      uint64_t v224 = (FILE *)*MEMORY[0x1E4F143C8];
      int v210 = 8575;
      goto LABEL_384;
    }
    uint64_t v230 = *(void *)(*a2 + 2200);
    *(_DWORD *)(v230 + v227 + 8) = *(_DWORD *)(*(void *)(v7 + 40) + v226);
    uint64_t v231 = *(void *)(v7 + 48);
    unint64_t v232 = *(void *)(v7 + 56);
    *(void *)(v7 + 48) = v231 + 4;
    if (v231 + 8 > v232)
    {
      uint64_t v224 = (FILE *)*MEMORY[0x1E4F143C8];
      int v210 = 8576;
      goto LABEL_384;
    }
    *(_DWORD *)(v230 + v227 + 12) = *(_DWORD *)(*(void *)(v7 + 40) + v231 + 4);
    uint64_t v233 = *(void *)(v7 + 48);
    unint64_t v234 = *(void *)(v7 + 56);
    *(void *)(v7 + 48) = v233 + 4;
    if (v233 + 8 > v234)
    {
      uint64_t v224 = (FILE *)*MEMORY[0x1E4F143C8];
      int v210 = 8577;
      goto LABEL_384;
    }
    *(_DWORD *)(v230 + v227 + 16) = *(_DWORD *)(*(void *)(v7 + 40) + v233 + 4);
    uint64_t v235 = *(void *)(v7 + 48);
    unint64_t v236 = *(void *)(v7 + 56);
    *(void *)(v7 + 48) = v235 + 4;
    if (v235 + 8 > v236)
    {
      uint64_t v224 = (FILE *)*MEMORY[0x1E4F143C8];
      int v210 = 8578;
      goto LABEL_384;
    }
    *(_DWORD *)(v230 + v227 + 20) = *(_DWORD *)(*(void *)(v7 + 40) + v235 + 4);
    uint64_t v237 = *(void *)(v7 + 48);
    unint64_t v238 = *(void *)(v7 + 56);
    *(void *)(v7 + 48) = v237 + 4;
    if (v237 + 8 > v238)
    {
      uint64_t v224 = (FILE *)*MEMORY[0x1E4F143C8];
      int v210 = 8579;
      goto LABEL_384;
    }
    *(_DWORD *)(v230 + v227 + 24) = *(_DWORD *)(*(void *)(v7 + 40) + v237 + 4);
    uint64_t v239 = *(void *)(v7 + 48);
    unint64_t v240 = *(void *)(v7 + 56);
    *(void *)(v7 + 48) = v239 + 4;
    if (v239 + 8 > v240)
    {
      uint64_t v224 = (FILE *)*MEMORY[0x1E4F143C8];
      int v210 = 8580;
      goto LABEL_384;
    }
    *(_DWORD *)(v230 + v227 + 28) = *(_DWORD *)(*(void *)(v7 + 40) + v239 + 4);
    uint64_t v241 = *(void *)(v7 + 48);
    unint64_t v242 = *(void *)(v7 + 56);
    *(void *)(v7 + 48) = v241 + 4;
    if (v241 + 8 > v242)
    {
      uint64_t v224 = (FILE *)*MEMORY[0x1E4F143C8];
      int v210 = 8581;
      goto LABEL_384;
    }
    *(_DWORD *)(v230 + v227 + 32) = *(_DWORD *)(*(void *)(v7 + 40) + v241 + 4);
    uint64_t v243 = *(void *)(v7 + 48);
    unint64_t v244 = *(void *)(v7 + 56);
    *(void *)(v7 + 48) = v243 + 4;
    if (v243 + 8 > v244)
    {
      uint64_t v224 = (FILE *)*MEMORY[0x1E4F143C8];
      int v210 = 8582;
      goto LABEL_384;
    }
    *(_DWORD *)(v230 + v227 + 36) = *(_DWORD *)(*(void *)(v7 + 40) + v243 + 4);
    uint64_t v245 = *(void *)(v7 + 48);
    unint64_t v246 = *(void *)(v7 + 56);
    *(void *)(v7 + 48) = v245 + 4;
    if (v245 + 8 > v246)
    {
      uint64_t v224 = (FILE *)*MEMORY[0x1E4F143C8];
      int v210 = 8583;
      goto LABEL_384;
    }
    *(_DWORD *)(v230 + v227 + 40) = *(_DWORD *)(*(void *)(v7 + 40) + v245 + 4);
    uint64_t v247 = *(void *)(v7 + 48);
    unint64_t v248 = *(void *)(v7 + 56);
    uint64_t v249 = v247 + 4;
    *(void *)(v7 + 48) = v247 + 4;
    if (*(_DWORD *)(v7 + 64) <= 0xFu) {
      break;
    }
    unint64_t v250 = v247 + 6;
    if (v250 > v248)
    {
      uint64_t v224 = (FILE *)*MEMORY[0x1E4F143C8];
      int v210 = 8594;
      goto LABEL_384;
    }
    uint64_t v251 = *(unsigned __int16 *)(*(void *)(v7 + 40) + v249);
    *(void *)(v7 + 48) = v250;
    v252 = (uint64_t *)(v585 + 16 * v251);
    int8x16_t v253 = (uint64_t *)(*(void *)(*a2 + 1136) + 16 * *(void *)(v589 + 8 * v251));
    std::shared_ptr<FeatureStyleAttributes const>::operator=[abi:ne180100]((void *)(v230 + v227 + 48), *v253, v253[1]);
    if (!*((unsigned char *)v252 + 8)) {
      v252 = (uint64_t *)*v252;
    }
    *(void *)(v230 + v227) = *v252;
    uint64_t v254 = *(void *)(v7 + 48);
    unint64_t v228 = *(void *)(v7 + 56);
    uint64_t v255 = v254 + 2;
    if (v254 + 2 > v228)
    {
      uint64_t v224 = (FILE *)*MEMORY[0x1E4F143C8];
      int v210 = 8605;
      goto LABEL_384;
    }
    uint64_t v256 = *(void *)(v7 + 40);
    *(_WORD *)(v230 + v227 + 66) = *(_WORD *)(v256 + v254);
    *(void *)(v7 + 48) = v255;
    uint64_t v226 = v254 + 4;
    if (v254 + 4 > v228)
    {
      uint64_t v224 = (FILE *)*MEMORY[0x1E4F143C8];
      int v210 = 8606;
      goto LABEL_384;
    }
    *(_WORD *)(v230 + v227 + 64) = *(_WORD *)(v256 + v255);
    *(void *)(v7 + 48) = v226;
    v227 += 72;
    if (v229 == v227) {
      goto LABEL_333;
    }
  }
  unint64_t v269 = v247 + 12;
  if (v247 + 12 <= v248)
  {
    *(void *)(v230 + v227) = *(void *)(*(void *)(v7 + 40) + v249);
    unint64_t v280 = v247 + 14;
    BOOL v281 = v280 > v248;
    if (v280 > v248) {
      unint64_t v280 = v269;
    }
    *(void *)(v7 + 48) = v280;
    uint64_t v224 = (FILE *)*MEMORY[0x1E4F143C8];
    int v210 = 8587;
    if (!v281) {
      int v210 = 8588;
    }
  }
  else
  {
    uint64_t v224 = (FILE *)*MEMORY[0x1E4F143C8];
    int v210 = 8585;
  }
LABEL_384:
  fprintf(v224, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v210);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)buf);
LABEL_217:
  std::vector<unsigned long long,geo::StdAllocator<unsigned long long,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&__src);
LABEL_29:
  char v20 = 0;
LABEL_30:
  if (*(unsigned char *)v7)
  {
    {
      operator new();
    }
    (*(void (**)(uint64_t, void, void))(*(void *)geo::codec::Allocator::instance(void)::alloc + 40))(geo::codec::Allocator::instance(void)::alloc, *(void *)(v7 + 40), 0);
  }
  {
    operator new();
  }
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)geo::codec::Allocator::instance(void)::alloc + 40))(geo::codec::Allocator::instance(void)::alloc, v7, 0);
  if (v20)
  {
    uint64_t v17 = 1;
  }
  else
  {
    geo::codec::VectorTile::DaVinciReadDebugBlobDealloc((geo::codec::Allocator **)*a2);
    uint64_t v26 = v585;
    for (uint64_t k = v586; v26 != k; v26 += 16)
    {
      if (v26)
      {
        if (!*(unsigned char *)(v26 + 8))
        {
          uint64_t v28 = *(void **)v26;
          if (*(void *)v26)
          {
            if (v28[2])
            {
              {
                operator new();
              }
              (*(void (**)(uint64_t, void, void))(*(void *)geo::codec::Allocator::instance(void)::alloc
                                                              + 40))(geo::codec::Allocator::instance(void)::alloc, v28[2], 0);
            }
            if (v28[3])
            {
              {
                operator new();
              }
              (*(void (**)(uint64_t, void, void))(*(void *)geo::codec::Allocator::instance(void)::alloc
                                                              + 40))(geo::codec::Allocator::instance(void)::alloc, v28[3], 0);
            }
            uint64_t v29 = v28[4];
            if (v29)
            {
              if (*(void *)(v29 + 8))
              {
                {
                  operator new();
                }
                (*(void (**)(uint64_t, void, void))(*(void *)geo::codec::Allocator::instance(void)::alloc
                                                                + 40))(geo::codec::Allocator::instance(void)::alloc, *(void *)(v28[4] + 8), 0);
              }
              {
                operator new();
              }
              (*(void (**)(uint64_t, void, void))(*(void *)geo::codec::Allocator::instance(void)::alloc
                                                              + 40))(geo::codec::Allocator::instance(void)::alloc, v28[4], 0);
            }
          }
        }
      }
    }
    if (*(void *)(*a2 + 2064))
    {
      {
        operator new();
      }
      (*(void (**)(uint64_t, void, void))(*(void *)geo::codec::Allocator::instance(void)::alloc + 40))(geo::codec::Allocator::instance(void)::alloc, *(void *)(*a2 + 2064), 0);
      uint64_t v17 = 0;
      *(void *)(*a2 + 2064) = 0;
    }
    else
    {
      uint64_t v17 = 0;
    }
  }
LABEL_66:
  if (v585)
  {
    uint64_t v586 = v585;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v588 + 40))(v588, v585, v587 - v585);
  }
  if (v589)
  {
    uint64_t v590 = v589;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v592 + 40))(v592, v589, v591 - v589);
  }
  uint64_t v30 = (void **)v594;
  if ((void)v594)
  {
    do
    {
      unsigned int v39 = (void **)*v30;
      int v40 = v30[3];
      if (v40)
      {
        v30[4] = v40;
        (*(void (**)(void *, void *, int64_t))(*(void *)v30[6] + 40))(v30[6], v40, (unsigned char *)v30[5] - (unsigned char *)v40);
      }
      operator delete(v30);
      uint64_t v30 = v39;
    }
    while (v39);
  }
  uint64_t v31 = (void *)__p;
  *(void *)&long long __p = 0;
  if (v31) {
    operator delete(v31);
  }
  int v32 = (void **)v597;
  if ((void)v597)
  {
    do
    {
      unsigned int v41 = (void **)*v32;
      int v42 = v32[3];
      if (v42)
      {
        v32[4] = v42;
        (*(void (**)(void *, void *, int64_t))(*(void *)v32[6] + 40))(v32[6], v42, (unsigned char *)v32[5] - (unsigned char *)v42);
      }
      operator delete(v32);
      int v32 = v41;
    }
    while (v41);
  }
  char v33 = (void *)v596;
  *(void *)&long long v596 = 0;
  if (v33) {
    operator delete(v33);
  }
  uint64_t v35 = (uint64_t)v599;
  uint64_t v34 = v600;
  v36.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v37 = rep;
  uint64_t v576 = v35;
  if (v35)
  {
    v567 = &v576;
    *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v34 + 1912, &v576, (uint64_t)&std::piecewise_construct, &v567)+ 4) = (double)((v36.__d_.__rep_ - v37) / 1000) * 0.001;
  }
  BOOL v38 = v601;
  if (v601 && !atomic_fetch_add(&v601->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  return v17;
}

void sub_188FEB0A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&a71);
  std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)(v71 - 176));
  std::vector<unsigned long long,geo::StdAllocator<unsigned long long,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&STACK[0x218]);
  std::vector<VMP4Material,geo::StdAllocator<VMP4Material,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&STACK[0x2C0]);
  std::vector<unsigned long,geo::StdAllocator<unsigned long,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&STACK[0x2E0]);
  std::unordered_map<unsigned int,std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>>::~unordered_map[abi:ne180100]((uint64_t)&STACK[0x300]);
  std::unordered_map<unsigned int,std::vector<geo::Transform<float>,geo::StdAllocator<geo::Transform<float>,geo::codec::Allocator>>>::~unordered_map[abi:ne180100](v71 - 256);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v71 - 216));
  _Unwind_Resume(a1);
}

void sub_188FEB36C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer(geo::codec::ChapterDecodeTimer *this)
{
  uint64_t v3 = *(void *)this;
  uint64_t v2 = *((void *)this + 1);
  v4.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  uint64_t v5 = *((void *)this + 3);
  uint64_t v7 = v3;
  if (v3)
  {
    uint64_t v8 = &v7;
    *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v2 + 1912, &v7, (uint64_t)&std::piecewise_construct, &v8)+ 4) = (double)((v4.__d_.__rep_ - v5) / 1000) * 0.001;
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

uint64_t *std::vector<gm::Matrix<int,3,1>,geo::StdAllocator<gm::Matrix<int,3,1>,geo::codec::Allocator>>::~vector[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 40))(a1[3], v2, a1[2] - v2);
  }
  return a1;
}

void std::vector<GeoCodecsDaVinciAttributedMesh,geo::StdAllocator<GeoCodecsDaVinciAttributedMesh,geo::codec::Allocator>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (_OWORD *)a1[1];
  unint64_t v6 = ((uint64_t)v5 - *a1) >> 5;
  unint64_t v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 >= v6) {
      return;
    }
    for (unsigned int i = (_OWORD *)(v4 + 32 * a2); v5 != i; v5 -= 2)
    {
      unsigned int v19 = (std::__shared_weak_count *)*((void *)v5 - 1);
      if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
LABEL_24:
    a1[1] = (uint64_t)i;
    return;
  }
  uint64_t v8 = a1[2];
  if (v7 <= (v8 - (uint64_t)v5) >> 5)
  {
    unsigned int i = &v5[2 * v7];
    uint64_t v20 = 32 * a2 - 32 * v6;
    do
    {
      if (v5)
      {
        *uint64_t v5 = 0uLL;
        v5[1] = 0uLL;
      }
      v5 += 2;
      v20 -= 32;
    }
    while (v20);
    goto LABEL_24;
  }
  if (a2 >> 59) {
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = v8 - v4;
  uint64_t v10 = v9 >> 4;
  if (v9 >> 4 <= a2) {
    uint64_t v10 = a2;
  }
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0) {
    uint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v11 = v10;
  }
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 16))(a1[3], 32 * v11, 8);
  int v13 = (_OWORD *)(v12 + 32 * v6);
  unint64_t v14 = v12 + 32 * a2;
  uint64_t v15 = 32 * a2 - 32 * v6;
  __n128 v16 = 0uLL;
  uint64_t v17 = v13;
  do
  {
    if (v17)
    {
      *uint64_t v17 = 0uLL;
      v17[1] = 0uLL;
    }
    v17 += 2;
    v15 -= 32;
  }
  while (v15);
  uint64_t v21 = v12 + 32 * v11;
  uint64_t v22 = *a1;
  uint64_t v23 = a1[1];
  if (v23 == *a1)
  {
    *a1 = (uint64_t)v13;
    a1[1] = v14;
    uint64_t v25 = a1[2];
    a1[2] = v21;
  }
  else
  {
    do
    {
      *(v13 - 2) = *(_OWORD *)(v23 - 32);
      __n128 v16 = *(__n128 *)(v23 - 16);
      *(v13 - 1) = v16;
      v13 -= 2;
      *(void *)(v23 - 16) = 0;
      *(void *)(v23 - 8) = 0;
      v23 -= 32;
    }
    while (v23 != v22);
    uint64_t v23 = *a1;
    uint64_t v24 = a1[1];
    *a1 = (uint64_t)v13;
    a1[1] = v14;
    uint64_t v25 = a1[2];
    for (a1[2] = v21; v24 != v23; v24 -= 32)
    {
      uint64_t v26 = *(std::__shared_weak_count **)(v24 - 8);
      if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
  }
  if (v23) {
    (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(void *)a1[3] + 40))(a1[3], v23, v25 - v23, v16);
  }
}

uint64_t *std::unordered_map<unsigned int,std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>>::find[abi:ne180100](uint64_t a1, unint64_t a2, unsigned int a3)
{
  if (!a2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a3;
    if (a3 >= a2) {
      unint64_t v4 = a3 % a2;
    }
  }
  else
  {
    unint64_t v4 = (a2 - 1) & a3;
  }
  uint64_t v5 = *(uint64_t ***)(a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  uint64_t result = *v5;
  if (*v5)
  {
    if (v3.u32[0] < 2uLL)
    {
      while (1)
      {
        uint64_t v8 = result[1];
        if (v8 == a3)
        {
          if (*((_DWORD *)result + 4) == a3) {
            return result;
          }
        }
        else if ((v8 & (a2 - 1)) != v4)
        {
          return 0;
        }
        uint64_t result = (uint64_t *)*result;
        if (!result) {
          return result;
        }
      }
    }
    do
    {
      unint64_t v7 = result[1];
      if (v7 == a3)
      {
        if (*((_DWORD *)result + 4) == a3) {
          return result;
        }
      }
      else
      {
        if (v7 >= a2) {
          v7 %= a2;
        }
        if (v7 != v4) {
          return 0;
        }
      }
      uint64_t result = (uint64_t *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t **std::vector<GeoCodecsVertexAttributesData,geo::StdAllocator<GeoCodecsVertexAttributesData,geo::codec::Allocator>>::__destroy_vector::operator()[abi:ne180100](uint64_t **result)
{
  uint64_t v1 = *result;
  uint64_t v2 = **result;
  if (v2)
  {
    uint64_t v3 = v1[1];
    uint64_t v4 = **result;
    uint64_t v5 = *result;
    if (v3 != v2)
    {
      unint64_t v6 = result;
      do
      {
        uint64_t v7 = *(void *)(v3 - 32);
        if (v7)
        {
          *(void *)(v3 - 24) = v7;
          (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v3 - 8) + 40))(*(void *)(v3 - 8), v7, *(void *)(v3 - 16) - v7);
        }
        uint64_t v8 = *(void *)(v3 - 64);
        if (v8)
        {
          *(void *)(v3 - 56) = v8;
          (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v3 - 40) + 40))(*(void *)(v3 - 40), v8, *(void *)(v3 - 48) - v8);
        }
        v3 -= 72;
      }
      while (v3 != v2);
      uint64_t v5 = *v6;
      uint64_t v4 = **v6;
    }
    v1[1] = v2;
    return (uint64_t **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[3] + 40))(v5[3], v4, v5[2] - v4);
  }
  return result;
}

uint64_t std::vector<GeoCodecsVectorTilePoint3D,geo::StdAllocator<GeoCodecsVectorTilePoint3D,geo::codec::Allocator>>::resize(uint64_t result, unint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *(void *)result;
  uint64_t v4 = *(void *)(result + 8);
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *(void *)result) >> 2);
  unint64_t v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 >= v6) {
      return result;
    }
    uint64_t v15 = v5 + 12 * a2;
LABEL_15:
    *(void *)(result + 8) = v15;
    return result;
  }
  uint64_t v8 = *(void *)(result + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - v4) >> 2) >= v7)
  {
    uint64_t v15 = v4 + 12 * v7;
    uint64_t v16 = 12 * a2 - 4 * ((v4 - *(void *)result) >> 2);
    do
    {
      if (v4)
      {
        *(_DWORD *)(v4 + 8) = 0;
        *(void *)uint64_t v4 = 0;
      }
      v4 += 12;
      v16 -= 12;
    }
    while (v16);
    goto LABEL_15;
  }
  if (a2 > 0x1555555555555555) {
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v5) >> 2);
  uint64_t v10 = 2 * v9;
  if (2 * v9 <= a2) {
    uint64_t v10 = a2;
  }
  if (v9 >= 0xAAAAAAAAAAAAAAALL) {
    uint64_t v11 = 0x1555555555555555;
  }
  else {
    uint64_t v11 = v10;
  }
  uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(result + 24) + 16))(*(void *)(result + 24), 12 * v11, 4);
  unint64_t v12 = result + 12 * v6;
  uint64_t v13 = 12 * a2 - 12 * v6;
  unint64_t v14 = v12;
  do
  {
    if (v14)
    {
      *(_DWORD *)(v14 + 8) = 0;
      *(void *)unint64_t v14 = 0;
    }
    v14 += 12;
    v13 -= 12;
  }
  while (v13);
  uint64_t v18 = *(void *)v3;
  uint64_t v17 = *(void *)(v3 + 8);
  if (v17 != *(void *)v3)
  {
    do
    {
      uint64_t v19 = *(void *)(v17 - 12);
      v17 -= 12;
      int v20 = *(_DWORD *)(v17 + 8);
      *(void *)(v12 - 12) = v19;
      v12 -= 12;
      *(_DWORD *)(v12 + 8) = v20;
    }
    while (v17 != v18);
    uint64_t v17 = *(void *)v3;
  }
  *(void *)uint64_t v3 = v12;
  *(void *)(v3 + 8) = result + 12 * a2;
  uint64_t v21 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = result + 12 * v11;
  if (v17) {
    return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 24) + 40))(*(void *)(v3 + 24), v17, v21 - v17);
  }
  return result;
}

void std::vector<GeoCodecsDaVinciBuilding,geo::StdAllocator<GeoCodecsDaVinciBuilding,geo::codec::Allocator>>::resize(unint64_t *a1, unint64_t a2)
{
  unint64_t v3 = a1[1];
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<GeoCodecsDaVinciBuilding,geo::StdAllocator<GeoCodecsDaVinciBuilding,geo::codec::Allocator>>::__append(a1, v6);
  }
  else if (!v5)
  {
    for (uint64_t i = *a1 + 40 * a2; v3 != i; v3 -= 40)
    {
      uint64_t v8 = *(std::__shared_weak_count **)(v3 - 32);
      if (v8)
      {
        if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    a1[1] = i;
  }
}

void std::vector<GeoCodecsDaVinciDecal,geo::StdAllocator<GeoCodecsDaVinciDecal,geo::codec::Allocator>>::resize(unint64_t *a1, unint64_t a2)
{
  unint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  unint64_t v6 = 0x8E38E38E38E38E39 * ((uint64_t)(v5 - *a1) >> 3);
  unint64_t v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 >= v6) {
      return;
    }
    for (unint64_t i = v4 + 72 * a2; v5 != i; v5 -= 72)
    {
      uint64_t v19 = *(std::__shared_weak_count **)(v5 - 16);
      if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
LABEL_24:
    a1[1] = i;
    return;
  }
  unint64_t v8 = a1[2];
  if (0x8E38E38E38E38E39 * ((uint64_t)(v8 - v5) >> 3) >= v7)
  {
    unint64_t i = v5 + 72 * v7;
    uint64_t v20 = 72 * a2 - 8 * ((uint64_t)(v5 - *a1) >> 3);
    do
    {
      if (v5)
      {
        *(void *)(v5 + 64) = 0;
        *(_OWORD *)(v5 + 32) = 0uLL;
        *(_OWORD *)(v5 + 48) = 0uLL;
        *(_OWORD *)unint64_t v5 = 0uLL;
        *(_OWORD *)(v5 + 16) = 0uLL;
      }
      v5 += 72;
      v20 -= 72;
    }
    while (v20);
    goto LABEL_24;
  }
  if (a2 > 0x38E38E38E38E38ELL) {
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v9 = 0x8E38E38E38E38E39 * ((uint64_t)(v8 - v4) >> 3);
  uint64_t v10 = 2 * v9;
  if (2 * v9 <= a2) {
    uint64_t v10 = a2;
  }
  if (v9 >= 0x1C71C71C71C71C7) {
    uint64_t v11 = 0x38E38E38E38E38ELL;
  }
  else {
    uint64_t v11 = v10;
  }
  uint64_t v12 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 16))(a1[3], 72 * v11, 8);
  unint64_t v13 = v12 + 72 * v6;
  unint64_t v14 = v12 + 72 * a2;
  uint64_t v15 = 72 * a2 - 72 * v6;
  __n128 v16 = 0uLL;
  unint64_t v17 = v13;
  do
  {
    if (v17)
    {
      *(void *)(v17 + 64) = 0;
      *(_OWORD *)(v17 + 32) = 0uLL;
      *(_OWORD *)(v17 + 48) = 0uLL;
      *(_OWORD *)unint64_t v17 = 0uLL;
      *(_OWORD *)(v17 + 16) = 0uLL;
    }
    v17 += 72;
    v15 -= 72;
  }
  while (v15);
  uint64_t v21 = v12 + 72 * v11;
  unint64_t v22 = *a1;
  unint64_t v23 = a1[1];
  if (v23 == *a1)
  {
    *a1 = v13;
    a1[1] = v14;
    unint64_t v30 = a1[2];
    a1[2] = v21;
  }
  else
  {
    uint64_t v24 = 0;
    do
    {
      uint64_t v25 = v13 + v24;
      uint64_t v26 = v23 + v24;
      long long v27 = *(_OWORD *)(v23 + v24 - 72);
      long long v28 = *(_OWORD *)(v23 + v24 - 56);
      *(_OWORD *)(v25 - 44) = *(_OWORD *)(v23 + v24 - 44);
      *(_OWORD *)(v25 - 56) = v28;
      *(_OWORD *)(v25 - 72) = v27;
      __n128 v16 = *(__n128 *)(v23 + v24 - 24);
      *(__n128 *)(v25 - 24) = v16;
      *(void *)(v26 - 24) = 0;
      *(void *)(v26 - 16) = 0;
      *(_DWORD *)(v25 - 8) = *(_DWORD *)(v23 + v24 - 8);
      v24 -= 72;
    }
    while (v23 + v24 != v22);
    unint64_t v23 = *a1;
    unint64_t v29 = a1[1];
    *a1 = v13 + v24;
    a1[1] = v14;
    unint64_t v30 = a1[2];
    for (a1[2] = v21; v29 != v23; v29 -= 72)
    {
      uint64_t v31 = *(std::__shared_weak_count **)(v29 - 16);
      if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
  if (v23) {
    (*(void (**)(unint64_t, unint64_t, unint64_t, __n128))(*(void *)a1[3] + 40))(a1[3], v23, v30 - v23, v16);
  }
}

uint64_t std::vector<GeoCodecsDaVinciAsset,geo::StdAllocator<GeoCodecsDaVinciAsset,geo::codec::Allocator>>::resize(uint64_t result, unint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(void *)(result + 8);
  unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *(void *)result) >> 3);
  unint64_t v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 >= v6) {
      return result;
    }
    for (uint64_t i = v4 + 40 * a2; v5 != i; v5 -= 40)
    {
      uint64_t v20 = *(void *)(v5 - 32);
      if (v20)
      {
        uint64_t v21 = *(void *)(v5 - 24);
        uint64_t v19 = *(void *)(v5 - 32);
        if (v21 != v20)
        {
          do
          {
            unint64_t v22 = *(std::__shared_weak_count **)(v21 - 8);
            if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *, uint64_t))v22->__on_zero_shared)(v22, v19);
              std::__shared_weak_count::__release_weak(v22);
            }
            v21 -= 32;
          }
          while (v21 != v20);
          uint64_t v19 = *(void *)(v5 - 32);
        }
        *(void *)(v5 - 24) = v20;
        uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v5 - 8) + 40))(*(void *)(v5 - 8), v19, *(void *)(v5 - 16) - v19);
      }
    }
LABEL_30:
    *(void *)(v3 + 8) = i;
    return result;
  }
  uint64_t v8 = *(void *)(result + 16);
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - v5) >> 3) >= v7)
  {
    uint64_t i = v5 + 40 * v7;
    uint64_t v23 = 40 * a2 - 8 * ((v5 - *(void *)result) >> 3);
    do
    {
      if (v5)
      {
        *(void *)(v5 + 32) = 0;
        *(_OWORD *)uint64_t v5 = 0u;
        *(_OWORD *)(v5 + 16) = 0u;
        uint64_t result = geo::codec::Allocator::instance((geo::codec::Allocator *)result);
        *(void *)(v5 + 32) = result;
      }
      v5 += 40;
      v23 -= 40;
    }
    while (v23);
    goto LABEL_30;
  }
  if (a2 > 0x666666666666666) {
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - v4) >> 3);
  uint64_t v10 = 2 * v9;
  if (2 * v9 <= a2) {
    uint64_t v10 = a2;
  }
  if (v9 >= 0x333333333333333) {
    uint64_t v11 = 0x666666666666666;
  }
  else {
    uint64_t v11 = v10;
  }
  uint64_t v12 = 40 * v11;
  uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(result + 24) + 16))(*(void *)(result + 24), 40 * v11, 8);
  unint64_t v13 = result + 40 * v6;
  uint64_t v14 = result + v12;
  unint64_t v15 = result + 40 * a2;
  uint64_t v16 = 40 * a2 - 40 * v6;
  unint64_t v17 = v13;
  do
  {
    if (v17)
    {
      *(void *)(v17 + 32) = 0;
      *(_OWORD *)unint64_t v17 = 0u;
      *(_OWORD *)(v17 + 16) = 0u;
      uint64_t result = geo::codec::Allocator::instance((geo::codec::Allocator *)result);
      *(void *)(v17 + 32) = result;
    }
    v17 += 40;
    v16 -= 40;
  }
  while (v16);
  uint64_t v24 = *(void *)v3;
  uint64_t v25 = *(void *)(v3 + 8);
  if (v25 == *(void *)v3)
  {
    *(void *)uint64_t v3 = v13;
    *(void *)(v3 + 8) = v15;
    uint64_t v30 = *(void *)(v3 + 16);
    *(void *)(v3 + 16) = v14;
  }
  else
  {
    uint64_t v26 = 0;
    do
    {
      uint64_t v27 = v13 + v26;
      uint64_t v28 = v25 + v26;
      *(_WORD *)(v27 - 40) = *(_WORD *)(v25 + v26 - 40);
      *(void *)(v27 - 24) = 0;
      *(void *)(v27 - 16) = 0;
      *(void *)(v27 - 32) = 0;
      *(void *)(v27 - 8) = *(void *)(v25 + v26 - 8);
      *(_OWORD *)(v27 - 32) = *(_OWORD *)(v25 + v26 - 32);
      *(void *)(v27 - 16) = *(void *)(v25 + v26 - 16);
      *(void *)(v28 - 32) = 0;
      *(void *)(v28 - 24) = 0;
      *(void *)(v28 - 16) = 0;
      v26 -= 40;
    }
    while (v25 + v26 != v24);
    uint64_t v25 = *(void *)v3;
    uint64_t v29 = *(void *)(v3 + 8);
    *(void *)uint64_t v3 = v13 + v26;
    *(void *)(v3 + 8) = v15;
    uint64_t v30 = *(void *)(v3 + 16);
    for (*(void *)(v3 + 16) = v14; v29 != v25; v29 -= 40)
    {
      uint64_t v32 = *(void *)(v29 - 32);
      if (v32)
      {
        uint64_t v33 = *(void *)(v29 - 24);
        uint64_t v31 = *(void *)(v29 - 32);
        if (v33 != v32)
        {
          do
          {
            uint64_t v34 = *(std::__shared_weak_count **)(v33 - 8);
            if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *, uint64_t))v34->__on_zero_shared)(v34, v31);
              std::__shared_weak_count::__release_weak(v34);
            }
            v33 -= 32;
          }
          while (v33 != v32);
          uint64_t v31 = *(void *)(v29 - 32);
        }
        *(void *)(v29 - 24) = v32;
        uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v29 - 8) + 40))(*(void *)(v29 - 8), v31, *(void *)(v29 - 16) - v31);
      }
    }
  }
  if (v25) {
    return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 24) + 40))(*(void *)(v3 + 24), v25, v30 - v25);
  }
  return result;
}

void std::unordered_map<unsigned short,unsigned short>::reserve[abi:ne180100](uint64_t a1, unint64_t a2)
{
  unint64_t prime = vcvtps_u32_f32((float)a2 / *(float *)(a1 + 32));
  if (prime == 1)
  {
    unint64_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    unint64_t prime = std::__next_prime(prime);
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_18;
  }
  if (prime >= *(void *)&v4) {
    return;
  }
  size_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
  if (*(void *)&v4 >= 3uLL)
  {
    uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] <= 1uLL)
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        size_t v5 = v7;
      }
      if (prime <= v5) {
        unint64_t prime = v5;
      }
      if (prime >= *(void *)&v4) {
        return;
      }
LABEL_18:
      std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
      return;
    }
  }
  size_t v8 = std::__next_prime(v5);
  if (prime <= v8) {
    unint64_t prime = v8;
  }
  if (prime < *(void *)&v4) {
    goto LABEL_18;
  }
}

uint64_t geo::codec::_decodeDaVinciRenderables(geo::codec::Allocator *a1, void *a2, uint64_t a3, uint64_t *a4, _WORD *a5, uint64_t a6, void *a7)
{
  *a7 = 0;
  uint64_t v7 = *((void *)a1 + 6);
  uint64_t v8 = v7 + 2;
  if ((unint64_t)(v7 + 2) > *((void *)a1 + 7))
  {
    unint64_t v9 = (FILE *)*MEMORY[0x1E4F143C8];
    int v10 = 7820;
    goto LABEL_3;
  }
  uint64_t v12 = a7;
  uint64_t v14 = a5;
  uint64_t v16 = a1;
  unint64_t v17 = *(unsigned __int16 *)(*((void *)a1 + 5) + v7);
  *a5 = v17;
  *((void *)a1 + 6) = v8;
  uint64_t v18 = *(void *)a6;
  *(void *)(a6 + 8) = *(void *)a6;
  if (v17 <= (*(void *)(a6 + 16) - v18) >> 3) {
    goto LABEL_16;
  }
  uint64_t v19 = 8 * v17;
  a1 = (geo::codec::Allocator *)(*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(a6 + 24)
                                                                                             + 16))(*(void *)(a6 + 24), 8 * v17, 8);
  uint64_t v20 = *(void *)a6;
  uint64_t v21 = *(void *)(a6 + 8);
  unint64_t v22 = a1;
  if (v21 != *(void *)a6)
  {
    unint64_t v23 = v21 - *(void *)a6 - 8;
    if (v23 < 0x38)
    {
      unint64_t v22 = a1;
    }
    else
    {
      unint64_t v22 = a1;
      if ((unint64_t)(v21 - (void)a1) >= 0x20)
      {
        uint64_t v24 = (v23 >> 3) + 1;
        uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v26 = v21 - v25;
        unint64_t v22 = (geo::codec::Allocator *)((char *)a1 - v25);
        uint64_t v27 = (_OWORD *)((char *)a1 - 16);
        uint64_t v28 = (long long *)(v21 - 16);
        uint64_t v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v30 = *v28;
          *(v27 - 1) = *(v28 - 1);
          *uint64_t v27 = v30;
          v27 -= 2;
          v28 -= 2;
          v29 -= 4;
        }
        while (v29);
        uint64_t v21 = v26;
        if (v24 == (v24 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_14;
        }
      }
    }
    do
    {
      uint64_t v31 = *(void *)(v21 - 8);
      v21 -= 8;
      *((void *)v22 - 1) = v31;
      unint64_t v22 = (geo::codec::Allocator *)((char *)v22 - 8);
    }
    while (v21 != v20);
  }
LABEL_14:
  *(void *)a6 = v22;
  *(void *)(a6 + 8) = a1;
  uint64_t v32 = *(void *)(a6 + 16);
  *(void *)(a6 + 16) = (char *)a1 + v19;
  if (v20) {
    a1 = (geo::codec::Allocator *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a6 + 24) + 40))(*(void *)(a6 + 24), v20, v32 - v20);
  }
LABEL_16:
  uint64_t v33 = geo::codec::Allocator::instance(a1);
  uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v33 + 24))(v33, (unsigned __int16)*v14, 48);
  *a4 = result;
  if (!*v14) {
    return 1;
  }
  unint64_t v34 = 0;
  uint64_t v161 = a4;
  while (1)
  {
    uint64_t v36 = *((void *)v16 + 6);
    unint64_t v35 = *((void *)v16 + 7);
    uint64_t v37 = v36 + 1;
    if (v36 + 1 > v35)
    {
      unint64_t v9 = (FILE *)*MEMORY[0x1E4F143C8];
      int v10 = 7830;
      goto LABEL_3;
    }
    uint64_t v38 = *a4;
    uint64_t v39 = *((void *)v16 + 5);
    char v40 = *(unsigned char *)(v39 + v36);
    *((void *)v16 + 6) = v37;
    *(unsigned char *)(v38 + 48 * v34 + 45) = v40 & 1;
    if ((v40 & 1) == 0)
    {
      uint64_t v41 = v36 + 3;
      if (v36 + 3 > v35)
      {
        unint64_t v9 = (FILE *)*MEMORY[0x1E4F143C8];
        int v10 = 7854;
        goto LABEL_3;
      }
      uint64_t v42 = *(unsigned __int16 *)(v39 + v37);
      *((void *)v16 + 6) = v41;
      *(void *)(v38 + 48 * v34 + 24) = v42;
      uint64_t v43 = (void *)(v38 + 48 * v34 + 16);
      if ((v40 & 2) != 0) {
        goto LABEL_31;
      }
      goto LABEL_42;
    }
    unsigned int v44 = (void *)(v38 + 48 * v34 + 24);
    if (*((_DWORD *)v16 + 16) < 0x11u)
    {
      unint64_t v45 = v36 + 5;
      if (v45 > v35)
      {
        unint64_t v9 = (FILE *)*MEMORY[0x1E4F143C8];
        int v10 = 7842;
        goto LABEL_3;
      }
      *(_DWORD *)unsigned int v44 = *(_DWORD *)(v39 + v37);
    }
    else
    {
      unint64_t v45 = v36 + 9;
      if (v45 > v35)
      {
        unint64_t v9 = (FILE *)*MEMORY[0x1E4F143C8];
        int v10 = 7840;
        goto LABEL_3;
      }
      *unsigned int v44 = *(void *)(v39 + v37);
    }
    *((void *)v16 + 6) = v45;
    uint64_t result = std::vector<unsigned long long,geo::StdAllocator<unsigned long long,geo::codec::Allocator>>::emplace_back<unsigned long long &>(a6, v44);
    uint64_t v46 = *((void *)v16 + 6);
    unint64_t v35 = *((void *)v16 + 7);
    if (*((_DWORD *)v16 + 16) < 0x15u) {
      break;
    }
    uint64_t v41 = v46 + 8;
    if (v46 + 8 > v35)
    {
      unint64_t v9 = (FILE *)*MEMORY[0x1E4F143C8];
      int v10 = 7847;
      goto LABEL_3;
    }
    uint64_t v39 = *((void *)v16 + 5);
    *(void *)(v38 + 48 * v34 + 32) = *(void *)(v39 + v46);
    *((void *)v16 + 6) = v41;
    uint64_t v43 = (void *)(v38 + 48 * v34 + 16);
    if ((v40 & 2) != 0) {
      goto LABEL_31;
    }
LABEL_42:
    void *v43 = 0;
    uint64_t v47 = (unsigned char *)(v38 + 48 * v34 + 44);
    if ((v40 & 0x10) != 0) {
      goto LABEL_33;
    }
LABEL_43:
    unsigned char *v47 = 0;
    uint64_t v48 = (geo::codec::Allocator **)(v38 + 48 * v34);
    int v49 = (_WORD *)v48 + 21;
    if ((v40 & 4) != 0) {
      goto LABEL_35;
    }
LABEL_44:
    *int v49 = 1;
    uint64_t v59 = geo::codec::Allocator::instance((geo::codec::Allocator *)result);
    int v60 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v59 + 24))(v59, 1, 48);
    *uint64_t v48 = v60;
    *(_DWORD *)int v60 = 1065353216;
    *((_DWORD *)v60 + 5) = 1065353216;
    *((_DWORD *)v60 + 10) = 1065353216;
LABEL_113:
    ++v34;
    uint64_t result = 1;
    a4 = v161;
    if (v34 >= (unsigned __int16)*v14) {
      return result;
    }
  }
  uint64_t v41 = v46 + 2;
  if (v46 + 2 > v35)
  {
    unint64_t v9 = (FILE *)*MEMORY[0x1E4F143C8];
    int v10 = 7849;
    goto LABEL_3;
  }
  uint64_t v39 = *((void *)v16 + 5);
  unint64_t v58 = v38 + 48 * v34;
  *(_WORD *)(v58 + 40) = *(_WORD *)(v39 + v46);
  *((void *)v16 + 6) = v41;
  *(void *)(v58 + 32) = 0;
  uint64_t v43 = (void *)(v58 + 16);
  if ((v40 & 2) == 0) {
    goto LABEL_42;
  }
LABEL_31:
  if (v41 + 8 > v35)
  {
    unint64_t v9 = (FILE *)*MEMORY[0x1E4F143C8];
    int v10 = 7860;
    goto LABEL_3;
  }
  void *v43 = *(void *)(v39 + v41);
  *((void *)v16 + 6) = v41 + 8;
  v41 += 8;
  uint64_t v47 = (unsigned char *)(v38 + 48 * v34 + 44);
  if ((v40 & 0x10) == 0) {
    goto LABEL_43;
  }
LABEL_33:
  if (v41 + 1 > v35)
  {
    unint64_t v9 = (FILE *)*MEMORY[0x1E4F143C8];
    int v10 = 7866;
    goto LABEL_3;
  }
  unsigned char *v47 = *(unsigned char *)(v39 + v41);
  uint64_t v41 = *((void *)v16 + 6) + 1;
  *((void *)v16 + 6) = v41;
  uint64_t v48 = (geo::codec::Allocator **)(v38 + 48 * v34);
  int v49 = (_WORD *)v48 + 21;
  if ((v40 & 4) == 0) {
    goto LABEL_44;
  }
LABEL_35:
  if ((unint64_t)(v41 + 2) > *((void *)v16 + 7))
  {
    unint64_t v9 = (FILE *)*MEMORY[0x1E4F143C8];
    int v10 = 7873;
    goto LABEL_3;
  }
  *int v49 = *(_WORD *)(*((void *)v16 + 5) + v41);
  *((void *)v16 + 6) = v41 + 2;
  uint64_t v50 = geo::codec::Allocator::instance((geo::codec::Allocator *)result);
  int v51 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v50 + 24))(v50, (unsigned __int16)*v49, 48);
  *uint64_t v48 = v51;
  uint64_t v52 = geo::codec::Allocator::instance(v51);
  uint64_t v53 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v52 + 24))(v52, (unsigned __int16)*v49, 1);
  unint64_t v54 = v38 + 48 * v34;
  *(void *)(v54 + 8) = v53;
  uint64_t v162 = (void *)(v54 + 8);
  unsigned __int16 v163 = v48;
  if ((v40 & 8) != 0)
  {
    LODWORD(v61) = (unsigned __int16)*v49;
    goto LABEL_46;
  }
  int8x8_t v55 = (int8x8_t)a2[1];
  if (!*(void *)&v55) {
    goto LABEL_155;
  }
  uint8x8_t v56 = (uint8x8_t)vcnt_s8(v55);
  v56.i16[0] = vaddlv_u8(v56);
  if (v56.u32[0] > 1uLL)
  {
    unint64_t v57 = v34;
    if (*(void *)&v55 <= v34) {
      unint64_t v57 = v34 % *(void *)&v55;
    }
  }
  else
  {
    unint64_t v57 = (*(void *)&v55 + 0xFFFFLL) & v34;
  }
  unint64_t v145 = *(uint64_t ***)(*a2 + 8 * v57);
  if (!v145 || (uint64_t v146 = *v145) == 0)
  {
LABEL_155:
    unint64_t v9 = (FILE *)*MEMORY[0x1E4F143C8];
    int v10 = 7879;
    goto LABEL_3;
  }
  uint64_t v147 = *(void *)&v55 - 1;
  if (v56.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v148 = v146[1];
      if (v148 == v34)
      {
        if (*((_DWORD *)v146 + 4) == v34) {
          goto LABEL_133;
        }
      }
      else if ((v148 & v147) != v57)
      {
        goto LABEL_155;
      }
      uint64_t v146 = (uint64_t *)*v146;
      if (!v146) {
        goto LABEL_155;
      }
    }
  }
  while (2)
  {
    unint64_t v149 = v146[1];
    if (v149 != v34)
    {
      if (v149 >= *(void *)&v55) {
        v149 %= *(void *)&v55;
      }
      if (v149 != v57) {
        goto LABEL_155;
      }
      goto LABEL_127;
    }
    if (*((_DWORD *)v146 + 4) != v34)
    {
LABEL_127:
      uint64_t v146 = (uint64_t *)*v146;
      if (!v146) {
        goto LABEL_155;
      }
      continue;
    }
    break;
  }
LABEL_133:
  if (v56.u32[0] > 1uLL)
  {
    unint64_t v150 = v34;
    if (*(void *)&v55 <= v34) {
      unint64_t v150 = v34 % *(void *)&v55;
    }
  }
  else
  {
    unint64_t v150 = (*(void *)&v55 + 0xFFFFLL) & v34;
  }
  uint64_t v151 = *(uint64_t ***)(*a2 + 8 * v150);
  if (!v151) {
    goto LABEL_176;
  }
  uint64_t v152 = *v151;
  if (!*v151) {
    goto LABEL_176;
  }
  uint64_t v61 = (unsigned __int16)*v49;
  if (v56.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v153 = v152[1];
      if (v153 == v34)
      {
        if (*((_DWORD *)v152 + 4) == v34) {
          goto LABEL_145;
        }
      }
      else if ((v153 & v147) != v150)
      {
        goto LABEL_176;
      }
      uint64_t v152 = (uint64_t *)*v152;
      if (!v152) {
        goto LABEL_176;
      }
    }
  }
  while (2)
  {
    unint64_t v154 = v152[1];
    if (v154 != v34)
    {
      if (v154 >= *(void *)&v55) {
        v154 %= *(void *)&v55;
      }
      if (v154 != v150) {
        goto LABEL_176;
      }
      goto LABEL_148;
    }
    if (*((_DWORD *)v152 + 4) != v34)
    {
LABEL_148:
      uint64_t v152 = (uint64_t *)*v152;
      if (!v152) {
        goto LABEL_176;
      }
      continue;
    }
    break;
  }
LABEL_145:
  if (0xCCCCCCCCCCCCCCCDLL * ((v152[4] - v152[3]) >> 3) != v61)
  {
    unint64_t v9 = (FILE *)*MEMORY[0x1E4F143C8];
    int v10 = 7880;
    goto LABEL_3;
  }
LABEL_46:
  if (!v61)
  {
LABEL_112:
    *v12 += *((void *)v16 + 6) - v41;
    goto LABEL_113;
  }
  uint64_t v62 = 0;
  while (2)
  {
    if ((v40 & 8) == 0)
    {
      BOOL v97 = v163;
      int8x8_t v98 = (int8x8_t)a2[1];
      if (v98)
      {
        uint8x8_t v99 = (uint8x8_t)vcnt_s8(v98);
        v99.i16[0] = vaddlv_u8(v99);
        if (v99.u32[0] > 1uLL)
        {
          unint64_t v100 = v34;
          if (*(void *)&v98 <= v34) {
            unint64_t v100 = v34 % *(void *)&v98;
          }
        }
        else
        {
          unint64_t v100 = (*(void *)&v98 + 0xFFFFLL) & v34;
        }
        unint64_t v121 = *(uint64_t ***)(*a2 + 8 * v100);
        if (v121)
        {
          uint64_t v122 = *v121;
          if (v122)
          {
            if (v99.u32[0] < 2uLL)
            {
              uint64_t v123 = *(void *)&v98 - 1;
              while (1)
              {
                uint64_t v125 = v122[1];
                if (v125 == v34)
                {
                  if (*((_DWORD *)v122 + 4) == v34) {
                    goto LABEL_48;
                  }
                }
                else if ((v125 & v123) != v100)
                {
                  goto LABEL_176;
                }
                uint64_t v122 = (uint64_t *)*v122;
                if (!v122) {
                  goto LABEL_176;
                }
              }
            }
            do
            {
              unint64_t v124 = v122[1];
              if (v124 == v34)
              {
                if (*((_DWORD *)v122 + 4) == v34)
                {
LABEL_48:
                  uint64_t v63 = v122[3] + 40 * v62;
                  float v65 = *(float *)(v63 + 16);
                  float v64 = *(float *)(v63 + 20);
                  int v67 = *(_DWORD *)v63;
                  int v66 = *(_DWORD *)(v63 + 4);
                  int v68 = *(_DWORD *)(v63 + 8);
                  float v69 = *(float *)(v63 + 12);
                  float v70 = *(float *)(v63 + 24);
                  unsigned int v71 = *(_DWORD *)(v63 + 28);
                  int v72 = *(_DWORD *)(v63 + 32);
                  int v73 = *(_DWORD *)(v63 + 36);
                  goto LABEL_49;
                }
              }
              else
              {
                if (v124 >= *(void *)&v98) {
                  v124 %= *(void *)&v98;
                }
                if (v124 != v100) {
                  break;
                }
              }
              uint64_t v122 = (uint64_t *)*v122;
            }
            while (v122);
          }
        }
      }
LABEL_176:
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    uint64_t v101 = *((void *)v16 + 6);
    unint64_t v102 = *((void *)v16 + 7);
    uint64_t v103 = v101 + 4;
    BOOL v97 = v163;
    if (v101 + 4 > v102)
    {
      unint64_t v9 = (FILE *)*MEMORY[0x1E4F143C8];
      int v10 = 7890;
      goto LABEL_3;
    }
    uint64_t v104 = *((void *)v16 + 5);
    int v67 = *(_DWORD *)(v104 + v101);
    *((void *)v16 + 6) = v103;
    uint64_t v105 = v101 + 8;
    if (v101 + 8 > v102)
    {
      unint64_t v9 = (FILE *)*MEMORY[0x1E4F143C8];
      int v10 = 7891;
      goto LABEL_3;
    }
    int v66 = *(_DWORD *)(v104 + v103);
    *((void *)v16 + 6) = v105;
    uint64_t v106 = v101 + 12;
    if (v101 + 12 > v102)
    {
      unint64_t v9 = (FILE *)*MEMORY[0x1E4F143C8];
      int v10 = 7892;
      goto LABEL_3;
    }
    int v68 = *(_DWORD *)(v104 + v105);
    *((void *)v16 + 6) = v106;
    uint64_t v107 = v101 + 16;
    if (v101 + 16 > v102)
    {
      unint64_t v9 = (FILE *)*MEMORY[0x1E4F143C8];
      int v10 = 7894;
      goto LABEL_3;
    }
    unsigned int v71 = *(_DWORD *)(v104 + v106);
    *((void *)v16 + 6) = v107;
    uint64_t v108 = v101 + 20;
    if (v101 + 20 > v102)
    {
      unint64_t v9 = (FILE *)*MEMORY[0x1E4F143C8];
      int v10 = 7895;
      goto LABEL_3;
    }
    int v72 = *(_DWORD *)(v104 + v107);
    *((void *)v16 + 6) = v108;
    uint64_t v109 = v101 + 24;
    if (v101 + 24 > v102)
    {
      unint64_t v9 = (FILE *)*MEMORY[0x1E4F143C8];
      int v10 = 7896;
      goto LABEL_3;
    }
    int v73 = *(_DWORD *)(v104 + v108);
    *((void *)v16 + 6) = v109;
    uint64_t v110 = v101 + 28;
    if (v101 + 28 > v102)
    {
      unint64_t v9 = (FILE *)*MEMORY[0x1E4F143C8];
      int v10 = 7898;
      goto LABEL_3;
    }
    float v69 = *(float *)(v104 + v109);
    *((void *)v16 + 6) = v110;
    uint64_t v111 = v101 + 32;
    if (v101 + 32 > v102)
    {
      unint64_t v9 = (FILE *)*MEMORY[0x1E4F143C8];
      int v10 = 7899;
      goto LABEL_3;
    }
    float v65 = *(float *)(v104 + v110);
    *((void *)v16 + 6) = v111;
    uint64_t v112 = v101 + 36;
    if (v101 + 36 > v102)
    {
      unint64_t v9 = (FILE *)*MEMORY[0x1E4F143C8];
      int v10 = 7900;
      goto LABEL_3;
    }
    float v64 = *(float *)(v104 + v111);
    *((void *)v16 + 6) = v112;
    uint64_t v113 = v101 + 40;
    if (v101 + 40 > v102)
    {
      unint64_t v9 = (FILE *)*MEMORY[0x1E4F143C8];
      int v10 = 7901;
      goto LABEL_3;
    }
    float v70 = *(float *)(v104 + v112);
    *((void *)v16 + 6) = v113;
    if (*((_DWORD *)v16 + 16) < 0x14u) {
      goto LABEL_49;
    }
    unint64_t v114 = v101 + 42;
    if (v114 <= v102)
    {
      int v115 = *(unsigned __int16 *)(v104 + v113);
      *((void *)v16 + 6) = v114;
      if (v115)
      {
        unsigned int v158 = v71;
        int v159 = v67;
        uint64_t v157 = v14;
        unsigned int v175 = v34;
        v181.i64[0] = (uint64_t)&v175;
        uint64_t v116 = std::__hash_table<std::__hash_value_type<unsigned int,std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(a3, &v175, (uint64_t)&std::piecewise_construct, &v181);
        uint64_t v117 = v116;
        uint64_t v118 = (_DWORD *)v116[4];
        unint64_t v119 = v116[5];
        if ((unint64_t)v118 < v119)
        {
          if (v118) {
            _DWORD *v118 = v115;
          }
          uint64_t v120 = v118 + 1;
LABEL_110:
          unsigned int v71 = v158;
          int v67 = v159;
          goto LABEL_111;
        }
        unsigned int v156 = v12;
        uint64_t v126 = v116[3];
        uint64_t v127 = ((uint64_t)v118 - v126) >> 2;
        unint64_t v128 = v127 + 1;
        if ((unint64_t)(v127 + 1) >> 62) {
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v129 = v119 - v126;
        if (v129 >> 1 > v128) {
          unint64_t v128 = v129 >> 1;
        }
        if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v128 = 0x3FFFFFFFFFFFFFFFLL;
        }
        if (v128)
        {
          uint64_t v155 = 4 * v128;
          uint64_t v130 = (*(uint64_t (**)(void))(*(void *)v116[6] + 16))(v116[6]);
          uint64_t v131 = (_DWORD *)(v130 + 4 * v127);
          unint64_t v128 = v130 + v155;
          if (v130) {
            _DWORD *v131 = v115;
          }
        }
        else
        {
          uint64_t v131 = (_DWORD *)(4 * v127);
        }
        uint64_t v12 = v156;
        uint64_t v132 = v117[3];
        uint64_t v133 = v117[4];
        uint64_t v134 = v131;
        if (v133 != v132)
        {
          unint64_t v135 = v133 - v132 - 4;
          if (v135 < 0x1C)
          {
            uint64_t v134 = v131;
          }
          else
          {
            uint64_t v134 = v131;
            if ((unint64_t)(v133 - (void)v131) >= 0x20)
            {
              uint64_t v136 = (v135 >> 2) + 1;
              uint64_t v137 = 4 * (v136 & 0x7FFFFFFFFFFFFFF8);
              uint64_t v138 = v133 - v137;
              uint64_t v134 = &v131[v137 / 0xFFFFFFFFFFFFFFFCLL];
              unint64_t v139 = v131 - 4;
              uint64_t v140 = (long long *)(v133 - 16);
              uint64_t v141 = v136 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v142 = *v140;
                *(v139 - 1) = *(v140 - 1);
                _OWORD *v139 = v142;
                v139 -= 2;
                v140 -= 2;
                v141 -= 8;
              }
              while (v141);
              uint64_t v133 = v138;
              if (v136 == (v136 & 0x7FFFFFFFFFFFFFF8)) {
                goto LABEL_108;
              }
            }
          }
          do
          {
            int v143 = *(_DWORD *)(v133 - 4);
            v133 -= 4;
            *--uint64_t v134 = v143;
          }
          while (v133 != v132);
        }
LABEL_108:
        uint64_t v120 = v131 + 1;
        v117[3] = v134;
        v117[4] = v131 + 1;
        uint64_t v144 = v117[5];
        v117[5] = v128;
        if (!v132) {
          goto LABEL_110;
        }
        (*(void (**)(void, uint64_t, uint64_t))(*(void *)v117[6] + 40))(v117[6], v132, v144 - v132);
        unsigned int v71 = v158;
        int v67 = v159;
LABEL_111:
        v117[4] = v120;
        uint64_t v14 = v157;
        BOOL v97 = v163;
      }
      else
      {
        BOOL v97 = v163;
      }
LABEL_49:
      *(unsigned char *)(*v162 + v62) = 0;
      size_t v74 = *v97;
      float v75 = (float)(v65 + v65) * v65;
      float v76 = (float)(v64 + v64) * v64;
      float v77 = (float)(v69 + v69) * v65;
      float v78 = (float)(v64 + v64) * v70;
      float v79 = v77 - v78;
      v181.f32[0] = 1.0 - (float)(v75 + v76);
      v181.f32[1] = v78 + v77;
      float v80 = 1.0 - (float)((float)(v69 + v69) * v69);
      float v182 = v79;
      float v183 = v80 - v76;
      float v81 = v64 * (float)(v69 + v69);
      float v82 = v70 * (float)(v65 + v65);
      float v83 = v64 * (float)(v65 + v65);
      float v84 = v70 * (float)(v69 + v69);
      float v186 = v81 + v82;
      float v187 = v83 - v84;
      v181.f32[2] = v81 - v82;
      float v184 = v83 + v84;
      float v188 = v80 - v75;
      v181.i32[3] = 0;
      int v185 = 0;
      unint64_t v85 = (_DWORD *)((char *)v74 + 48 * v62);
      int v189 = 0;
      int v190 = v67;
      int v191 = v66;
      int v192 = v68;
      int v193 = 1065353216;
      uint64_t v179 = 0;
      long long v177 = 0u;
      long long v178 = 0u;
      long long v176 = 0u;
      int v180 = 1065353216;
      unsigned int v175 = v71;
      LODWORD(v177) = v72;
      DWORD1(v178) = v73;
      gm::operator*<float,4,4,4>(&v181, (uint64_t)&v175, &v165);
      __int32 v86 = v165.i32[1];
      int v87 = v169;
      int v88 = v170;
      int v89 = v166;
      int v90 = v167;
      __int32 v91 = v165.i32[2];
      int v92 = v168;
      int v93 = v172;
      int v94 = v173;
      int v95 = v171;
      int v96 = v174;
      *unint64_t v85 = v165.i32[0];
      v85[1] = v89;
      v85[2] = v87;
      v85[3] = v93;
      v85[4] = v86;
      v85[5] = v90;
      v85[6] = v88;
      v85[7] = v94;
      v85[8] = v91;
      v85[9] = v92;
      v85[10] = v95;
      v85[11] = v96;
      if (++v62 >= (unint64_t)(unsigned __int16)*v49) {
        goto LABEL_112;
      }
      continue;
    }
    break;
  }
  unint64_t v9 = (FILE *)*MEMORY[0x1E4F143C8];
  int v10 = 7905;
LABEL_3:
  fprintf(v9, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v10);
  return 0;
}

BOOL geo::codec::readRenderableTransforms(geo::codec::Allocator *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  v33[0] = a4;
  v33[1] = a5;
  uint64_t v5 = a3[6];
  if ((unint64_t)(v5 + 4) > a3[7]) {
    return 0;
  }
  unsigned int v7 = *(_DWORD *)(a3[5] + v5);
  a3[6] = v5 + 4;
  if (!v7) {
    return 1;
  }
  v19[0] = 0;
  v19[1] = 0;
  uint64_t v20 = 0;
  uint64_t v21 = (geo::codec::Allocator *)geo::codec::Allocator::instance(a1);
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v21);
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = geo::codec::Allocator::instance(v25);
  v30[1] = v7;
  uint64_t v10 = a3[6];
  unint64_t v11 = a3[7];
  uint64_t v12 = v10 + 4;
  if (v10 + 4 > v11) {
    goto LABEL_10;
  }
  uint64_t v13 = a3[5];
  v30[2] = *(_DWORD *)(v13 + v10);
  a3[6] = v12;
  uint64_t v14 = v10 + 8;
  if (v10 + 8 > v11) {
    goto LABEL_10;
  }
  v30[3] = *(_DWORD *)(v13 + v12);
  a3[6] = v14;
  uint64_t v15 = v10 + 10;
  if (v10 + 10 > v11) {
    goto LABEL_10;
  }
  __int16 v31 = *(_WORD *)(v13 + v14);
  a3[6] = v15;
  unint64_t v16 = v10 + 12;
  if (v16 <= v11
    && (__int16 v32 = *(_WORD *)(v13 + v15), a3[6] = v16, geo::codec::chapterReadVarUint32(a3, v30))
    && geo::codec::decodePointCloud((uint64_t)a3, v30))
  {
    geo::codec::dequantizePointCloud((geo::codec::Allocator *)v19, (float *)v33, (uint64_t *)a1, a2, (uint64_t)v30);
    int v17 = 1;
  }
  else
  {
LABEL_10:
    int v17 = 0;
  }
  if (v26) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v29 + 40))(v29, v26, v28 - v26);
  }
  if (v22) {
    (*(void (**)(geo::codec::Allocator *, uint64_t, uint64_t))(*(void *)v25 + 40))(v25, v22, v24 - v22);
  }
  if (v19[0]) {
    (*(void (**)(geo::codec::Allocator *, void, uint64_t))(*(void *)v21 + 40))(v21, v19[0], v20 - v19[0]);
  }
  return v17 != 0;
}

void sub_188FED3A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  GeoCodecsPointCloud::~GeoCodecsPointCloud((GeoCodecsPointCloud *)va);
  _Unwind_Resume(a1);
}

uint64_t geo::codec::_decodeMaterialModifiers(void *a1, uint64_t *a2)
{
  uint64_t v48 = 0;
  if (!geo::codec::chapterReadVarUint32(a1, (unsigned int *)&v48 + 1))
  {
    int v5 = 7959;
    goto LABEL_6;
  }
  if (HIDWORD(v48))
  {
    uint64_t v4 = a1[6];
    if ((unint64_t)(v4 + 1) > a1[7])
    {
      int v5 = 7964;
      goto LABEL_6;
    }
    unsigned int v7 = *(unsigned __int8 *)(a1[5] + v4);
    a1[6] = v4 + 1;
    if (!geo::codec::chapterReadVarUint32(a1, (unsigned int *)&v48))
    {
      int v5 = 7965;
      goto LABEL_6;
    }
    int v22 = v48;
    if (v48)
    {
      unint64_t v23 = a1[7];
      unint64_t v24 = a1[6] + 1;
      do
      {
        if (v24 > v23)
        {
          int v5 = 7969;
          goto LABEL_6;
        }
        a1[6] = v24;
        if (v24 + 1 > v23)
        {
          int v5 = 7970;
          goto LABEL_6;
        }
        a1[6] = v24 + 1;
        v24 += 2;
        --v22;
      }
      while (v22);
    }
  }
  else
  {
    unsigned int v7 = 0;
  }
  uint64_t v8 = *a2;
  unint64_t v9 = HIDWORD(v48);
  uint64_t v10 = *(void **)(*a2 + 2112);
  uint64_t v11 = *(void *)(*a2 + 2104);
  unint64_t v12 = ((uint64_t)v10 - v11) >> 4;
  unint64_t v13 = HIDWORD(v48) - v12;
  if (HIDWORD(v48) <= v12)
  {
    if (HIDWORD(v48) >= v12) {
      goto LABEL_41;
    }
    *(void *)(v8 + 2112) = v11 + 16 * HIDWORD(v48);
    if (v9) {
      goto LABEL_42;
    }
    return 1;
  }
  uint64_t v14 = *(void *)(v8 + 2120);
  if (v13 <= (v14 - (uint64_t)v10) >> 4)
  {
    uint64_t v25 = &v10[2 * v13];
    uint64_t v26 = 16 * HIDWORD(v48) - 16 * v12;
    do
    {
      if (v10)
      {
        void *v10 = 0;
        v10[1] = 0;
      }
      v10 += 2;
      v26 -= 16;
    }
    while (v26);
    *(void *)(v8 + 2112) = v25;
    unint64_t v9 = HIDWORD(v48);
    if (HIDWORD(v48)) {
      goto LABEL_42;
    }
    return 1;
  }
  unint64_t v15 = v14 - v11;
  unint64_t v16 = (v14 - v11) >> 3;
  if (v16 <= HIDWORD(v48)) {
    unint64_t v16 = HIDWORD(v48);
  }
  if (v15 >= 0x7FFFFFFFFFFFFFF0) {
    uint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v17 = v16;
  }
  uint64_t v18 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v8 + 2128) + 16))(*(void *)(v8 + 2128), 16 * v17, 8);
  uint64_t v19 = (void *)(v18 + 16 * v12);
  uint64_t v20 = 16 * v9 - 16 * v12;
  uint64_t v21 = v19;
  do
  {
    if (v21)
    {
      *uint64_t v21 = 0;
      v21[1] = 0;
    }
    v21 += 2;
    v20 -= 16;
  }
  while (v20);
  uint64_t v27 = *(void *)(v8 + 2112);
  uint64_t v28 = *(void *)(v8 + 2104);
  if (v27 != v28)
  {
    do
    {
      *((_OWORD *)v19 - 1) = *(_OWORD *)(v27 - 16);
      v19 -= 2;
      v27 -= 16;
    }
    while (v27 != v28);
    uint64_t v27 = *(void *)(v8 + 2104);
  }
  *(void *)(v8 + 2104) = v19;
  *(void *)(v8 + 2112) = v18 + 16 * v9;
  uint64_t v29 = *(void *)(v8 + 2120);
  *(void *)(v8 + 2120) = v18 + 16 * v17;
  if (v27) {
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v8 + 2128) + 40))(*(void *)(v8 + 2128), v27, v29 - v27);
  }
  unint64_t v9 = HIDWORD(v48);
LABEL_41:
  if (!v9) {
    return 1;
  }
LABEL_42:
  int v5 = 8005;
  if (v7 <= 8 && ((1 << v7) & 0x116) != 0)
  {
    uint64_t v30 = 0;
    unint64_t v31 = 0;
    uint64_t result = 1;
    while (1)
    {
      uint64_t v32 = *(void *)(*a2 + 2104);
      switch(v7)
      {
        case 4u:
          uint64_t v38 = a1[6];
          unint64_t v33 = a1[7];
          uint64_t v35 = v38 + 4;
          if (v38 + 4 > v33)
          {
            int v5 = 7993;
            goto LABEL_6;
          }
          uint64_t v36 = a1[5];
          uint64_t v37 = *(unsigned int *)(v36 + v38);
          a1[6] = v35;
          *(void *)(v32 + v30) = v37;
          if (v37) {
            goto LABEL_60;
          }
          break;
        case 2u:
          uint64_t v39 = a1[6];
          unint64_t v33 = a1[7];
          uint64_t v35 = v39 + 2;
          if (v39 + 2 > v33)
          {
            int v5 = 7987;
            goto LABEL_6;
          }
          uint64_t v36 = a1[5];
          uint64_t v37 = *(unsigned __int16 *)(v36 + v39);
          a1[6] = v35;
          *(void *)(v32 + v30) = v37;
          if (v37) {
            goto LABEL_60;
          }
          break;
        case 1u:
          uint64_t v34 = a1[6];
          unint64_t v33 = a1[7];
          uint64_t v35 = v34 + 1;
          if (v34 + 1 > v33)
          {
            int v5 = 7981;
            goto LABEL_6;
          }
          uint64_t v36 = a1[5];
          uint64_t v37 = *(unsigned __int8 *)(v36 + v34);
          a1[6] = v35;
          *(void *)(v32 + v30) = v37;
          if (v37) {
            goto LABEL_60;
          }
          break;
        default:
          uint64_t v40 = a1[6];
          unint64_t v33 = a1[7];
          uint64_t v35 = v40 + 8;
          if (v40 + 8 > v33)
          {
            int v5 = 7999;
            goto LABEL_6;
          }
          uint64_t v36 = a1[5];
          uint64_t v37 = *(void *)(v36 + v40);
          a1[6] = v35;
          *(void *)(v32 + v30) = v37;
          if (v37) {
LABEL_60:
          }
            *(unsigned char *)(v32 + v30 + 12) = 1;
          break;
      }
      if ((v37 & 4) != 0)
      {
        *(unsigned char *)(v32 + v30 + 13) = 1;
        if ((v37 & 2) == 0) {
          goto LABEL_45;
        }
      }
      else if ((v37 & 2) == 0)
      {
        goto LABEL_45;
      }
      if (v35 + 1 > v33)
      {
        int v5 = 8019;
        break;
      }
      *(unsigned char *)(v32 + v30 + 8) = *(unsigned char *)(v36 + v35);
      uint64_t v41 = a1[6];
      unint64_t v42 = a1[7];
      a1[6] = v41 + 1;
      if (v41 + 2 > v42)
      {
        int v5 = 8020;
        break;
      }
      *(unsigned char *)(v32 + v30 + 9) = *(unsigned char *)(a1[5] + v41 + 1);
      uint64_t v43 = a1[6];
      unint64_t v44 = a1[7];
      a1[6] = v43 + 1;
      if (v43 + 2 > v44)
      {
        int v5 = 8021;
        break;
      }
      uint64_t v45 = v32 + v30;
      *(unsigned char *)(v45 + 10) = *(unsigned char *)(a1[5] + v43 + 1);
      uint64_t v46 = a1[6];
      unint64_t v47 = a1[7];
      a1[6] = v46 + 1;
      if (v46 + 2 > v47)
      {
        int v5 = 8022;
        break;
      }
      *(unsigned char *)(v45 + 11) = *(unsigned char *)(a1[5] + v46 + 1);
      ++a1[6];
      unint64_t v9 = HIDWORD(v48);
LABEL_45:
      ++v31;
      v30 += 16;
      if (v31 >= v9) {
        return result;
      }
    }
  }
LABEL_6:
  fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v5);
  return 0;
}

uint64_t geo::codec::MercatorDequantizer::readInfo(uint64_t a1, void *a2)
{
  uint64_t v2 = a2[6];
  unint64_t v3 = a2[7];
  uint64_t v4 = v2 + 2;
  if (v2 + 2 > v3) {
    return 0;
  }
  uint64_t v6 = a2[5];
  *(_WORD *)a1 = *(_WORD *)(v6 + v2);
  a2[6] = v4;
  uint64_t v7 = v2 + 4;
  if (v2 + 4 > v3) {
    return 0;
  }
  unsigned int v8 = *(unsigned __int16 *)(v6 + v4);
  *(_WORD *)(a1 + 2) = v8;
  a2[6] = v7;
  uint64_t v9 = v2 + 8;
  if (v2 + 8 > v3) {
    return 0;
  }
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(v6 + v7);
  a2[6] = v9;
  uint64_t v10 = v2 + 10;
  if (v2 + 10 > v3) {
    return 0;
  }
  *(_WORD *)(a1 + 8) = *(_WORD *)(v6 + v9);
  a2[6] = v10;
  uint64_t v11 = v2 + 12;
  if (v2 + 12 > v3) {
    return 0;
  }
  *(_WORD *)(a1 + 10) = *(_WORD *)(v6 + v10);
  a2[6] = v11;
  if (v2 + 16 > v3) {
    return 0;
  }
  float v12 = *(float *)(v6 + v11);
  *(float *)(a1 + 12) = v12;
  uint64_t v13 = a2[6];
  unint64_t v14 = a2[7];
  a2[6] = v13 + 4;
  double v15 = 1.0 / v12;
  *(double *)(a1 + 16) = v15;
  uint64_t v16 = v13 + 6;
  if (v13 + 6 > v14) {
    return 0;
  }
  uint64_t v17 = a2[5];
  *(_WORD *)(a1 + 40) = *(_WORD *)(v17 + v13 + 4);
  a2[6] = v16;
  uint64_t v18 = v13 + 8;
  if (v13 + 8 > v14) {
    return 0;
  }
  unsigned int v19 = *(unsigned __int16 *)(v17 + v16);
  *(_WORD *)(a1 + 42) = v19;
  a2[6] = v18;
  unint64_t v20 = v13 + 12;
  if (v20 > v14) {
    return 0;
  }
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(v17 + v18);
  a2[6] = v20;
  v21.i64[0] = -1;
  v21.i64[1] = -1;
  int8x16_t v22 = (int8x16_t)vaddw_u32(v21, (uint32x2_t)__PAIR64__(v19, v8));
  v21.i64[0] = 0xFFFFFFFFLL;
  v21.i64[1] = 0xFFFFFFFFLL;
  float64x2_t v23 = vcvtq_f64_s64((int64x2_t)vshlq_u64((uint64x2_t)vdupq_n_s64(1uLL), (uint64x2_t)vandq_s8(v22, (int8x16_t)v21)));
  __asm { FMOV            V2.2D, #1.0 }
  *(float64x2_t *)(a1 + 24) = vdivq_f64(_Q2, v23);
  *(double *)(a1 + 16) = v15;
  *(unsigned char *)(a1 + 48) = 1;
  return 1;
}

uint64_t geo::codec::DepthDequantizer::readInfo(uint64_t a1, void *a2)
{
  uint64_t v2 = a2[6];
  unint64_t v3 = a2[7];
  uint64_t v4 = v2 + 4;
  if (v2 + 4 > v3) {
    return 0;
  }
  uint64_t v6 = a2[5];
  *(_DWORD *)a1 = *(_DWORD *)(v6 + v2);
  a2[6] = v4;
  if (v2 + 8 > v3) {
    return 0;
  }
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(v6 + v4);
  uint64_t v7 = a2[6];
  unint64_t v8 = a2[7];
  a2[6] = v7 + 4;
  if (v7 + 8 > v8) {
    return 0;
  }
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2[5] + v7 + 4);
  a2[6] += 4;
  *(unsigned char *)(a1 + 12) = 1;
  return 1;
}

void sub_188FEDE14(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188FEE784(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL geo_isDayLightForLocation(double *a1, double a2, double a3)
{
  double v5 = *a1;
  double v4 = a1[1];
  double v6 = (*MEMORY[0x1E4F1CF78] + a2) / 86400.0;
  uint64_t v20 = 0;
  long long v19 = 0u;
  long long v18 = 0u;
  long long v17 = 0u;
  long long v16 = 0u;
  long long v15 = 0u;
  long long v14 = 0u;
  long long v13 = 0u;
  long long v12 = 0u;
  long long v11 = 0u;
  long long v10 = 0u;
  double v9 = v6 + 2440587.5;
  geo_getSunPosition((const GEODayCache *)&v9, v5, -v4);
  return v7 - a3 >= 0.0;
}

void sub_188FEE99C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188FEED04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_188FF0038(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188FF0368(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unsigned char *AddrObjGoogle::protobuf::internal::ExtensionSet::Extension::Clear(unsigned char *this)
{
  uint64_t v1 = this;
  if (this[9])
  {
    switch(this[8])
    {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
        *(_DWORD *)(*(void *)this + 8) = 0;
        break;
      case 9:
      case 0xC:
        uint64_t v5 = *(void *)this;
        this = (unsigned char *)AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Clear<AddrObjGoogle::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v5);
        break;
      case 0xA:
      case 0xB:
        uint64_t v6 = *(void *)this;
        this = (unsigned char *)AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Clear<AddrObjGoogle::protobuf::RepeatedPtrField<addr_obj::FingerprintProto>::TypeHandler>(v6);
        break;
      default:
        return this;
    }
  }
  else if ((this[10] & 1) == 0)
  {
    int v2 = AddrObjGoogle::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[this[8]];
    if (v2 == 10)
    {
      uint64_t v4 = **(void **)this;
      if ((this[10] & 0x10) != 0) {
        this = (unsigned char *)(*(uint64_t (**)(void))(v4 + 88))();
      }
      else {
        this = (unsigned char *)(*(uint64_t (**)(void))(v4 + 32))();
      }
    }
    else if (v2 == 9)
    {
      unint64_t v3 = *(void **)this;
      if (*(char *)(*(void *)this + 23) < 0)
      {
        *(unsigned char *)*unint64_t v3 = 0;
        v3[1] = 0;
      }
      else
      {
        *(unsigned char *)unint64_t v3 = 0;
        *((unsigned char *)v3 + 23) = 0;
      }
    }
    v1[10] = v1[10] & 0xF0 | 1;
  }
  return this;
}

AddrObjGoogle::protobuf::UnknownFieldSet *addr_obj::V2AddressObjectProto::Clear(addr_obj::V2AddressObjectProto *this)
{
  uint64_t result = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::internal::ExtensionSet::Clear((unsigned char *)this + 8);
  if (*((unsigned char *)this + 140))
  {
    if (*((unsigned char *)this + 140))
    {
      unint64_t v3 = (AddrObjGoogle::protobuf::UnknownFieldSet *)*((void *)this + 5);
      uint64_t result = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::internal::kEmptyString(result);
      if (v3 != result)
      {
        uint64_t v4 = *((void *)this + 5);
        if (*(char *)(v4 + 23) < 0)
        {
          **(unsigned char **)uint64_t v4 = 0;
          *(void *)(v4 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v4 = 0;
          *(unsigned char *)(v4 + 23) = 0;
        }
      }
    }
    if ((*((unsigned char *)this + 140) & 2) != 0)
    {
      uint64_t v5 = (AddrObjGoogle::protobuf::UnknownFieldSet *)*((void *)this + 6);
      uint64_t result = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::internal::kEmptyString(result);
      if (v5 != result)
      {
        uint64_t v6 = *((void *)this + 6);
        if (*(char *)(v6 + 23) < 0)
        {
          **(unsigned char **)uint64_t v6 = 0;
          *(void *)(v6 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v6 = 0;
          *(unsigned char *)(v6 + 23) = 0;
        }
      }
    }
    if ((*((unsigned char *)this + 140) & 4) != 0)
    {
      double v7 = (AddrObjGoogle::protobuf::UnknownFieldSet *)*((void *)this + 7);
      uint64_t result = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::internal::kEmptyString(result);
      if (v7 != result)
      {
        uint64_t v8 = *((void *)this + 7);
        if (*(char *)(v8 + 23) < 0)
        {
          **(unsigned char **)uint64_t v8 = 0;
          *(void *)(v8 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v8 = 0;
          *(unsigned char *)(v8 + 23) = 0;
        }
      }
    }
    if ((*((unsigned char *)this + 140) & 8) != 0)
    {
      double v9 = (AddrObjGoogle::protobuf::UnknownFieldSet *)*((void *)this + 8);
      uint64_t result = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::internal::kEmptyString(result);
      if (v9 != result)
      {
        uint64_t v10 = *((void *)this + 8);
        if (*(char *)(v10 + 23) < 0)
        {
          **(unsigned char **)uint64_t v10 = 0;
          *(void *)(v10 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v10 = 0;
          *(unsigned char *)(v10 + 23) = 0;
        }
      }
    }
    if ((*((unsigned char *)this + 140) & 0x10) != 0)
    {
      long long v11 = (AddrObjGoogle::protobuf::UnknownFieldSet *)*((void *)this + 9);
      uint64_t result = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::internal::kEmptyString(result);
      if (v11 != result)
      {
        uint64_t v12 = *((void *)this + 9);
        if (*(char *)(v12 + 23) < 0)
        {
          **(unsigned char **)uint64_t v12 = 0;
          *(void *)(v12 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v12 = 0;
          *(unsigned char *)(v12 + 23) = 0;
        }
      }
    }
    if ((*((unsigned char *)this + 140) & 0x20) != 0)
    {
      long long v13 = (AddrObjGoogle::protobuf::UnknownFieldSet *)*((void *)this + 10);
      uint64_t result = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::internal::kEmptyString(result);
      if (v13 != result)
      {
        uint64_t v14 = *((void *)this + 10);
        if (*(char *)(v14 + 23) < 0)
        {
          **(unsigned char **)uint64_t v14 = 0;
          *(void *)(v14 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v14 = 0;
          *(unsigned char *)(v14 + 23) = 0;
        }
      }
    }
    if ((*((unsigned char *)this + 140) & 0x40) != 0)
    {
      long long v15 = (AddrObjGoogle::protobuf::UnknownFieldSet *)*((void *)this + 11);
      uint64_t result = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::internal::kEmptyString(result);
      if (v15 != result)
      {
        uint64_t v16 = *((void *)this + 11);
        if (*(char *)(v16 + 23) < 0)
        {
          **(unsigned char **)uint64_t v16 = 0;
          *(void *)(v16 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v16 = 0;
          *(unsigned char *)(v16 + 23) = 0;
        }
      }
    }
    if ((*((unsigned char *)this + 140) & 0x80) != 0)
    {
      long long v17 = (AddrObjGoogle::protobuf::UnknownFieldSet *)*((void *)this + 12);
      uint64_t result = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::internal::kEmptyString(result);
      if (v17 != result)
      {
        uint64_t v18 = *((void *)this + 12);
        if (*(char *)(v18 + 23) < 0)
        {
          **(unsigned char **)uint64_t v18 = 0;
          *(void *)(v18 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v18 = 0;
          *(unsigned char *)(v18 + 23) = 0;
        }
      }
    }
  }
  int v19 = *((_DWORD *)this + 35);
  if ((v19 & 0xFF00) != 0)
  {
    if ((v19 & 0x100) != 0)
    {
      uint64_t v20 = (AddrObjGoogle::protobuf::UnknownFieldSet *)*((void *)this + 13);
      uint64_t result = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::internal::kEmptyString(result);
      if (v20 != result)
      {
        uint64_t v21 = *((void *)this + 13);
        if (*(char *)(v21 + 23) < 0)
        {
          **(unsigned char **)uint64_t v21 = 0;
          *(void *)(v21 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v21 = 0;
          *(unsigned char *)(v21 + 23) = 0;
        }
      }
    }
    if ((*((unsigned char *)this + 141) & 2) != 0)
    {
      int8x16_t v22 = (AddrObjGoogle::protobuf::UnknownFieldSet *)*((void *)this + 14);
      uint64_t result = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::internal::kEmptyString(result);
      if (v22 != result)
      {
        uint64_t v23 = *((void *)this + 14);
        if (*(char *)(v23 + 23) < 0)
        {
          **(unsigned char **)uint64_t v23 = 0;
          *(void *)(v23 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v23 = 0;
          *(unsigned char *)(v23 + 23) = 0;
        }
      }
    }
    if ((*((unsigned char *)this + 141) & 4) != 0)
    {
      unint64_t v24 = (AddrObjGoogle::protobuf::UnknownFieldSet *)*((void *)this + 15);
      uint64_t result = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::internal::kEmptyString(result);
      if (v24 != result)
      {
        uint64_t v25 = *((void *)this + 15);
        if (*(char *)(v25 + 23) < 0)
        {
          **(unsigned char **)uint64_t v25 = 0;
          *(void *)(v25 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v25 = 0;
          *(unsigned char *)(v25 + 23) = 0;
        }
      }
    }
    if ((*((unsigned char *)this + 141) & 8) != 0)
    {
      uint64_t v26 = (AddrObjGoogle::protobuf::UnknownFieldSet *)*((void *)this + 16);
      uint64_t result = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::internal::kEmptyString(result);
      if (v26 != result)
      {
        uint64_t v27 = *((void *)this + 16);
        if (*(char *)(v27 + 23) < 0)
        {
          **(unsigned char **)uint64_t v27 = 0;
          *(void *)(v27 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v27 = 0;
          *(unsigned char *)(v27 + 23) = 0;
        }
      }
    }
  }
  uint64_t v29 = *((void *)this + 4);
  uint64_t v28 = (addr_obj::V2AddressObjectProto *)((char *)this + 32);
  *((_DWORD *)v28 + 27) = 0;
  if (v29)
  {
    return AddrObjGoogle::protobuf::UnknownFieldSet::ClearFallback(v28);
  }
  return result;
}

AddrObjGoogle::protobuf::UnknownFieldSet *addr_obj::V1AddressObjectProto::Clear(addr_obj::V1AddressObjectProto *this)
{
  uint64_t result = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::internal::ExtensionSet::Clear((unsigned char *)this + 8);
  if (*((unsigned char *)this + 100))
  {
    if (*((unsigned char *)this + 100))
    {
      unint64_t v3 = (AddrObjGoogle::protobuf::UnknownFieldSet *)*((void *)this + 5);
      uint64_t result = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::internal::kEmptyString(result);
      if (v3 != result)
      {
        uint64_t v4 = *((void *)this + 5);
        if (*(char *)(v4 + 23) < 0)
        {
          **(unsigned char **)uint64_t v4 = 0;
          *(void *)(v4 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v4 = 0;
          *(unsigned char *)(v4 + 23) = 0;
        }
      }
    }
    int v5 = *((_DWORD *)this + 25);
    if ((v5 & 2) != 0)
    {
      uint64_t result = (AddrObjGoogle::protobuf::UnknownFieldSet *)*((void *)this + 6);
      if (result)
      {
        uint64_t result = addr_obj::geo3::Address::Clear(result);
        int v5 = *((_DWORD *)this + 25);
      }
    }
    if ((v5 & 4) != 0)
    {
      uint64_t v6 = (AddrObjGoogle::protobuf::UnknownFieldSet *)*((void *)this + 7);
      uint64_t result = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::internal::kEmptyString(result);
      if (v6 != result)
      {
        uint64_t v7 = *((void *)this + 7);
        if (*(char *)(v7 + 23) < 0)
        {
          **(unsigned char **)uint64_t v7 = 0;
          *(void *)(v7 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v7 = 0;
          *(unsigned char *)(v7 + 23) = 0;
        }
      }
    }
    if ((*((unsigned char *)this + 100) & 8) != 0)
    {
      uint64_t v8 = (AddrObjGoogle::protobuf::UnknownFieldSet *)*((void *)this + 8);
      uint64_t result = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::internal::kEmptyString(result);
      if (v8 != result)
      {
        uint64_t v9 = *((void *)this + 8);
        if (*(char *)(v9 + 23) < 0)
        {
          **(unsigned char **)uint64_t v9 = 0;
          *(void *)(v9 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v9 = 0;
          *(unsigned char *)(v9 + 23) = 0;
        }
      }
    }
    int v10 = *((_DWORD *)this + 25);
    if ((v10 & 0x10) != 0)
    {
      uint64_t result = (AddrObjGoogle::protobuf::UnknownFieldSet *)*((void *)this + 9);
      if (result)
      {
        uint64_t result = addr_obj::geo3::StructuredAddress::Clear((addr_obj::geo3::StructuredAddress **)result);
        int v10 = *((_DWORD *)this + 25);
      }
    }
    if ((v10 & 0x20) != 0)
    {
      long long v11 = (AddrObjGoogle::protobuf::UnknownFieldSet *)*((void *)this + 10);
      uint64_t result = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::internal::kEmptyString(result);
      if (v11 != result)
      {
        uint64_t v12 = *((void *)this + 10);
        if (*(char *)(v12 + 23) < 0)
        {
          **(unsigned char **)uint64_t v12 = 0;
          *(void *)(v12 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v12 = 0;
          *(unsigned char *)(v12 + 23) = 0;
        }
      }
    }
    if ((*((unsigned char *)this + 100) & 0x40) != 0)
    {
      uint64_t result = (AddrObjGoogle::protobuf::UnknownFieldSet *)*((void *)this + 11);
      if (result) {
        uint64_t result = addr_obj::geo3::Address::Clear(result);
      }
    }
  }
  uint64_t v14 = *((void *)this + 4);
  long long v13 = (addr_obj::V1AddressObjectProto *)((char *)this + 32);
  *((_DWORD *)v13 + 17) = 0;
  if (v14)
  {
    return AddrObjGoogle::protobuf::UnknownFieldSet::ClearFallback(v13);
  }
  return result;
}

unsigned char *AddrObjGoogle::protobuf::internal::ExtensionSet::Clear(unsigned char *this)
{
  uint64_t v1 = this + 8;
  int v2 = *(void **)this;
  if (*(unsigned char **)this != this + 8)
  {
    do
    {
      this = AddrObjGoogle::protobuf::internal::ExtensionSet::Extension::Clear((unsigned char *)v2 + 40);
      unint64_t v3 = (void *)v2[1];
      if (v3)
      {
        do
        {
          uint64_t v4 = v3;
          unint64_t v3 = (void *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          uint64_t v4 = (void *)v2[2];
          BOOL v5 = *v4 == (void)v2;
          int v2 = v4;
        }
        while (!v5);
      }
      int v2 = v4;
    }
    while (v4 != v1);
  }
  return this;
}

BOOL _GEOMapDataSubscriptionIdentifierIsCompatible(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  BOOL v7 = 1;
  if (([v3 isEqualToString:v4] & 1) == 0
    && ([v3 isEqualToString:@"*"] & 1) == 0)
  {
    if (![v3 hasSuffix:@"*"]
      || (objc_msgSend(v3, "substringToIndex:", objc_msgSend(v3, "length") - 1),
          BOOL v5 = objc_claimAutoreleasedReturnValue(),
          char v6 = [v4 hasPrefix:v5],
          v5,
          (v6 & 1) == 0))
    {
      BOOL v7 = 0;
    }
  }

  return v7;
}

void sub_188FF0EA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t GEOPDSearchResultReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 216));
  char v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 212);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 208)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unint64_t v12 = *(void *)(a1 + 248);
  uint32x4_t v13 = (uint32x4_t)vdupq_n_s32(v12);
  v14.i64[0] = 0x100000001;
  v14.i64[1] = 0x100000001;
  unsigned int v15 = vaddvq_s32(vaddq_s32(vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v13, (uint32x4_t)xmmword_18A62F7F0), v14), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v13, (uint32x4_t)xmmword_18A62F800), v14)), vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v13, (uint32x4_t)xmmword_18A62F810), v14), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v13, (uint32x4_t)xmmword_18A62F820), v14))))+ ((v12 >> 23) & 1)+ (BYTE4(v12) & 1)+ ((v12 >> 27) & 1)+ ((v12 >> 11) & 1)+ ((v12 >> 21) & 1)+ ((v12 >> 33) & 1)+ ((v12 >> 10) & 1)+ (v12 >> 31);
  while (2)
  {
    uint64_t v16 = 1;
    uint64_t v17 = 1;
    uint64_t v18 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v15;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v17 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v19 = v15 > 0x12;
        char v153 = v19 & ~(_BYTE)v11 | v9;
        char v154 = v19 | v11 | v153;
        if (((v19 | v11) | v8)) {
          uint64_t v20 = 0;
        }
        else {
          uint64_t v20 = a3;
        }
        uint64_t v21 = (int *)MEMORY[0x1E4F940E8];
        int8x16_t v22 = (int *)MEMORY[0x1E4F940C8];
        char v155 = (v20 == 0) | v19 | v11;
        char v156 = v19 | v11;
        uint64_t v23 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v15;
LABEL_7:
        uint64_t v16 = v9;
LABEL_8:
        uint64_t v17 = v10;
        uint64_t v18 = v11;
LABEL_10:
        ++v7;
        uint64_t v9 = v16;
        uint64_t v10 = v17;
        uint64_t v11 = v18;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v21) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v22)) {
      goto LABEL_319;
    }
    char v24 = 0;
    unsigned int v25 = 0;
    unint64_t v26 = 0;
    while (1)
    {
      uint64_t v27 = *v21;
      uint64_t v28 = *(void *)(v3 + v27);
      unint64_t v29 = v28 + 1;
      if (v28 == -1 || v29 > *(void *)(v3 + *v6)) {
        break;
      }
      char v30 = *(unsigned char *)(*(void *)(v3 + *v23) + v28);
      *(void *)(v3 + v27) = v29;
      v26 |= (unint64_t)(v30 & 0x7F) << v24;
      if ((v30 & 0x80) == 0) {
        goto LABEL_25;
      }
      v24 += 7;
      BOOL v31 = v25++ >= 9;
      if (v31)
      {
        unint64_t v26 = 0;
        int v32 = *(unsigned __int8 *)(v3 + *v22);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v22) = 1;
LABEL_25:
    int v32 = *(unsigned __int8 *)(v3 + *v22);
    if (*(unsigned char *)(v3 + *v22)) {
      unint64_t v26 = 0;
    }
LABEL_27:
    if (v32 || (v26 & 7) == 4)
    {
LABEL_319:
      int v152 = 1;
      goto LABEL_320;
    }
    unint64_t v34 = v26 >> 3;
    BOOL v35 = v156;
    if ((v155 & 1) == 0)
    {
      uint64_t v36 = v20;
      do
      {
        int v38 = *v36++;
        int v37 = v38;
        BOOL v35 = v38 != 0;
        if (v38) {
          BOOL v39 = v37 == v34;
        }
        else {
          BOOL v39 = 1;
        }
      }
      while (!v39);
    }
    switch((int)v34)
    {
      case 1:
        if (!v35) {
          goto LABEL_241;
        }
        if ((*(unsigned char *)(a1 + 250) & 2) == 0)
        {
          char v40 = PBReaderPlaceMark();
          char v6 = (int *)MEMORY[0x1E4F940E0];
          if ((v40 & 1) == 0) {
            goto LABEL_357;
          }
          uint64_t v41 = objc_alloc_init(GEOMapRegion);
          if (GEOMapRegionReadAllFrom((uint64_t)v41, (void *)v3))
          {
            PBReaderRecallMark();
            uint64_t v42 = 72;
            goto LABEL_240;
          }
          goto LABEL_356;
        }
        char v132 = PBReaderSkipValueWithTag();
        char v6 = (int *)MEMORY[0x1E4F940E0];
        if ((v132 & 1) == 0) {
          goto LABEL_357;
        }
        uint64_t v133 = *(void *)(a1 + 248) << 46;
        goto LABEL_315;
      case 2:
        if (!v35 || (*(unsigned char *)(a1 + 249) & 0x80) != 0) {
          goto LABEL_241;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_357;
        }
        uint64_t v41 = objc_alloc_init(GEOPDMultiLocalizedString);
        if (!GEOPDMultiLocalizedStringReadAllFrom((uint64_t)v41, (void *)v3, v10 & 1)) {
          goto LABEL_356;
        }
        PBReaderRecallMark();
        -[GEOPDSearchResult _addNoFlagsDisambiguationLabel:](a1, v41);
        goto LABEL_155;
      case 3:
        if ((v8 & 1) == 0) {
          goto LABEL_241;
        }
        char v43 = 0;
        unsigned int v44 = 0;
        uint64_t v45 = 0;
        *(void *)(a1 + 248) |= 0x100uLL;
        char v6 = (int *)MEMORY[0x1E4F940E0];
        while (2)
        {
          uint64_t v46 = *v21;
          uint64_t v47 = *(void *)(v3 + v46);
          unint64_t v48 = v47 + 1;
          if (v47 == -1 || v48 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v22) = 1;
          }
          else
          {
            char v49 = *(unsigned char *)(*(void *)(v3 + *v23) + v47);
            *(void *)(v3 + v46) = v48;
            v45 |= (unint64_t)(v49 & 0x7F) << v43;
            if (v49 < 0)
            {
              v43 += 7;
              BOOL v31 = v44++ >= 9;
              if (v31)
              {
                uint64_t v45 = 0;
                goto LABEL_246;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v22)) {
          uint64_t v45 = 0;
        }
LABEL_246:
        BOOL v129 = v45 != 0;
        uint64_t v130 = 243;
        goto LABEL_279;
      case 4:
        if (!v35 || (*(unsigned char *)(a1 + 251) & 1) != 0) {
          goto LABEL_241;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_357;
        }
        uint64_t v41 = objc_alloc_init(GEOPDRelatedSearchSuggestion);
        if (!GEOPDRelatedSearchSuggestionReadAllFrom((uint64_t)v41, (void *)v3, v10 & 1)) {
          goto LABEL_356;
        }
        PBReaderRecallMark();
        -[GEOPDSearchResult _addNoFlagsRelatedSearchSuggestion:](a1, v41);
        goto LABEL_155;
      case 5:
        if ((v8 & 1) == 0) {
          goto LABEL_241;
        }
        char v50 = 0;
        unsigned int v51 = 0;
        uint64_t v52 = 0;
        *(void *)(a1 + 248) |= 8uLL;
        char v6 = (int *)MEMORY[0x1E4F940E0];
        while (2)
        {
          uint64_t v53 = *v21;
          uint64_t v54 = *(void *)(v3 + v53);
          unint64_t v55 = v54 + 1;
          if (v54 == -1 || v55 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v22) = 1;
          }
          else
          {
            char v56 = *(unsigned char *)(*(void *)(v3 + *v23) + v54);
            *(void *)(v3 + v53) = v55;
            v52 |= (unint64_t)(v56 & 0x7F) << v50;
            if (v56 < 0)
            {
              v50 += 7;
              BOOL v31 = v51++ >= 9;
              if (v31)
              {
                LODWORD(v52) = 0;
                goto LABEL_250;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v22)) {
          LODWORD(v52) = 0;
        }
LABEL_250:
        uint64_t v131 = 232;
        goto LABEL_284;
      case 6:
        if (!v35) {
          goto LABEL_241;
        }
        if ((*(unsigned char *)(a1 + 251) & 4) == 0)
        {
          uint64_t v57 = PBReaderReadString();
          unint64_t v58 = *(void **)(a1 + 144);
          *(void *)(a1 + 144) = v57;

          --v7;
LABEL_156:
          int8x16_t v22 = (int *)MEMORY[0x1E4F940C8];
          char v6 = (int *)MEMORY[0x1E4F940E0];
          goto LABEL_317;
        }
        char v134 = PBReaderSkipValueWithTag();
        char v6 = (int *)MEMORY[0x1E4F940E0];
        if ((v134 & 1) == 0) {
          goto LABEL_357;
        }
        uint64_t v133 = *(void *)(a1 + 248) << 37;
        goto LABEL_315;
      case 7:
        if (!v35) {
          goto LABEL_241;
        }
        if ((*(unsigned char *)(a1 + 249) & 0x20) != 0)
        {
          char v135 = PBReaderSkipValueWithTag();
          char v6 = (int *)MEMORY[0x1E4F940E0];
          if ((v135 & 1) == 0) {
            goto LABEL_357;
          }
          uint64_t v133 = *(void *)(a1 + 248) << 50;
          goto LABEL_315;
        }
        char v59 = PBReaderPlaceMark();
        char v6 = (int *)MEMORY[0x1E4F940E0];
        if ((v59 & 1) == 0) {
          goto LABEL_357;
        }
        uint64_t v41 = objc_alloc_init(GEOPDRelatedSearchSuggestion);
        if (!GEOPDRelatedSearchSuggestionReadAllFrom((uint64_t)v41, (void *)v3, v10 & 1)) {
          goto LABEL_356;
        }
        PBReaderRecallMark();
        uint64_t v42 = 40;
        goto LABEL_240;
      case 8:
        if (!v35) {
          goto LABEL_241;
        }
        if ((*(unsigned char *)(a1 + 251) & 0x20) != 0)
        {
          char v136 = PBReaderSkipValueWithTag();
          char v6 = (int *)MEMORY[0x1E4F940E0];
          if ((v136 & 1) == 0) {
            goto LABEL_357;
          }
          uint64_t v133 = *(void *)(a1 + 248) << 34;
          goto LABEL_315;
        }
        char v60 = PBReaderPlaceMark();
        char v6 = (int *)MEMORY[0x1E4F940E0];
        if ((v60 & 1) == 0) {
          goto LABEL_357;
        }
        uint64_t v41 = objc_alloc_init(GEOPDSearchClientBehavior);
        if (!GEOPDSearchClientBehaviorReadAllFrom((uint64_t)v41, (void *)v3)) {
          goto LABEL_356;
        }
        PBReaderRecallMark();
        uint64_t v42 = 168;
        goto LABEL_240;
      case 9:
        if (!v35 || (*(unsigned char *)(a1 + 251) & 2) != 0) {
          goto LABEL_241;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_357;
        }
        uint64_t v41 = objc_alloc_init(GEOPDResultDetourInfo);
        if (!GEOPDResultDetourInfoReadAllFrom((uint64_t)v41, (void *)v3)) {
          goto LABEL_356;
        }
        PBReaderRecallMark();
        -[GEOPDSearchResult _addNoFlagsResultDetourInfo:](a1, v41);
        goto LABEL_155;
      case 10:
        if (!v35) {
          goto LABEL_241;
        }
        if ((*(unsigned char *)(a1 + 249) & 0x40) != 0)
        {
          char v137 = PBReaderSkipValueWithTag();
          char v6 = (int *)MEMORY[0x1E4F940E0];
          if ((v137 & 1) == 0) {
            goto LABEL_357;
          }
          uint64_t v133 = *(void *)(a1 + 248) << 49;
          goto LABEL_315;
        }
        char v61 = PBReaderPlaceMark();
        char v6 = (int *)MEMORY[0x1E4F940E0];
        if ((v61 & 1) == 0) {
          goto LABEL_357;
        }
        uint64_t v41 = objc_alloc_init(GEOPDDirectionIntent);
        if (!GEOPDDirectionIntentReadAllFrom((uint64_t)v41, (void *)v3, v10 & 1)) {
          goto LABEL_356;
        }
        PBReaderRecallMark();
        uint64_t v42 = 48;
        goto LABEL_240;
      case 11:
        if (!v35) {
          goto LABEL_241;
        }
        if ((*(unsigned char *)(a1 + 249) & 0x10) != 0)
        {
          char v138 = PBReaderSkipValueWithTag();
          char v6 = (int *)MEMORY[0x1E4F940E0];
          if ((v138 & 1) == 0) {
            goto LABEL_357;
          }
          uint64_t v133 = *(void *)(a1 + 248) << 51;
          goto LABEL_315;
        }
        char v62 = PBReaderPlaceMark();
        char v6 = (int *)MEMORY[0x1E4F940E0];
        if ((v62 & 1) == 0) {
          goto LABEL_357;
        }
        uint64_t v41 = objc_alloc_init(GEOPDResolvedItem);
        if (!GEOPDResolvedItemReadAllFrom((uint64_t)v41, (void *)v3)) {
          goto LABEL_356;
        }
        PBReaderRecallMark();
        uint64_t v42 = 32;
        goto LABEL_240;
      case 12:
        if (!v35 || (*(unsigned char *)(a1 + 250) & 1) != 0) {
          goto LABEL_241;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_357;
        }
        uint64_t v41 = objc_alloc_init(GEOPDDisplayHeaderSubstitute);
        if (!GEOPDDisplayHeaderSubstituteReadAllFrom((uint64_t)v41, (void *)v3, v10 & 1)) {
          goto LABEL_356;
        }
        PBReaderRecallMark();
        -[GEOPDSearchResult _addNoFlagsDisplayHeaderSubstitute:](a1, v41);
        goto LABEL_155;
      case 13:
        if ((v8 & 1) == 0) {
          goto LABEL_241;
        }
        char v63 = 0;
        unsigned int v64 = 0;
        uint64_t v65 = 0;
        *(void *)(a1 + 248) |= 0x40uLL;
        char v6 = (int *)MEMORY[0x1E4F940E0];
        while (2)
        {
          uint64_t v66 = *v21;
          uint64_t v67 = *(void *)(v3 + v66);
          unint64_t v68 = v67 + 1;
          if (v67 == -1 || v68 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v22) = 1;
          }
          else
          {
            char v69 = *(unsigned char *)(*(void *)(v3 + *v23) + v67);
            *(void *)(v3 + v66) = v68;
            v65 |= (unint64_t)(v69 & 0x7F) << v63;
            if (v69 < 0)
            {
              v63 += 7;
              BOOL v31 = v64++ >= 9;
              if (v31)
              {
                uint64_t v65 = 0;
                goto LABEL_254;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v22)) {
          uint64_t v65 = 0;
        }
LABEL_254:
        BOOL v129 = v65 != 0;
        uint64_t v130 = 241;
        goto LABEL_279;
      case 14:
        if ((v8 & 1) == 0) {
          goto LABEL_241;
        }
        char v70 = 0;
        unsigned int v71 = 0;
        uint64_t v52 = 0;
        *(void *)(a1 + 248) |= 1uLL;
        char v6 = (int *)MEMORY[0x1E4F940E0];
        while (2)
        {
          uint64_t v72 = *v21;
          uint64_t v73 = *(void *)(v3 + v72);
          unint64_t v74 = v73 + 1;
          if (v73 == -1 || v74 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v22) = 1;
          }
          else
          {
            char v75 = *(unsigned char *)(*(void *)(v3 + *v23) + v73);
            *(void *)(v3 + v72) = v74;
            v52 |= (unint64_t)(v75 & 0x7F) << v70;
            if (v75 < 0)
            {
              v70 += 7;
              BOOL v31 = v71++ >= 9;
              if (v31)
              {
                LODWORD(v52) = 0;
                goto LABEL_258;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v22)) {
          LODWORD(v52) = 0;
        }
LABEL_258:
        uint64_t v131 = 220;
        goto LABEL_284;
      case 15:
        if ((v8 & 1) == 0) {
          goto LABEL_241;
        }
        char v76 = 0;
        unsigned int v77 = 0;
        uint64_t v78 = 0;
        *(void *)(a1 + 248) |= 0x200uLL;
        char v6 = (int *)MEMORY[0x1E4F940E0];
        while (2)
        {
          uint64_t v79 = *v21;
          uint64_t v80 = *(void *)(v3 + v79);
          unint64_t v81 = v80 + 1;
          if (v80 == -1 || v81 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v22) = 1;
          }
          else
          {
            char v82 = *(unsigned char *)(*(void *)(v3 + *v23) + v80);
            *(void *)(v3 + v79) = v81;
            v78 |= (unint64_t)(v82 & 0x7F) << v76;
            if (v82 < 0)
            {
              v76 += 7;
              BOOL v31 = v77++ >= 9;
              if (v31)
              {
                uint64_t v78 = 0;
                goto LABEL_262;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v22)) {
          uint64_t v78 = 0;
        }
LABEL_262:
        BOOL v129 = v78 != 0;
        uint64_t v130 = 244;
        goto LABEL_279;
      case 16:
        if ((v8 & 1) == 0) {
          goto LABEL_241;
        }
        char v83 = 0;
        unsigned int v84 = 0;
        uint64_t v52 = 0;
        *(void *)(a1 + 248) |= 4uLL;
        char v6 = (int *)MEMORY[0x1E4F940E0];
        while (2)
        {
          uint64_t v85 = *v21;
          uint64_t v86 = *(void *)(v3 + v85);
          unint64_t v87 = v86 + 1;
          if (v86 == -1 || v87 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v22) = 1;
          }
          else
          {
            char v88 = *(unsigned char *)(*(void *)(v3 + *v23) + v86);
            *(void *)(v3 + v85) = v87;
            v52 |= (unint64_t)(v88 & 0x7F) << v83;
            if (v88 < 0)
            {
              v83 += 7;
              BOOL v31 = v84++ >= 9;
              if (v31)
              {
                LODWORD(v52) = 0;
                goto LABEL_266;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v22)) {
          LODWORD(v52) = 0;
        }
LABEL_266:
        uint64_t v131 = 228;
        goto LABEL_284;
      case 17:
        if (!v35 || (*(unsigned char *)(a1 + 251) & 0x10) != 0) {
          goto LABEL_241;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_357;
        }
        uint64_t v41 = objc_alloc_init(GEOPDRetainedSearchMetadata);
        if (!GEOPDRetainedSearchMetadataReadAllFrom((uint64_t)v41, (void *)v3, v10 & 1)) {
          goto LABEL_356;
        }
        PBReaderRecallMark();
        -[GEOPDSearchResult _addNoFlagsRetainSearch:](a1, v41);
        goto LABEL_155;
      case 18:
        if (!v35 || (*(unsigned char *)(a1 + 251) & 0x40) != 0) {
          goto LABEL_241;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_357;
        }
        uint64_t v41 = objc_alloc_init(GEOPDSSearchResultSection);
        if (!GEOPDSSearchResultSectionReadAllFrom((uint64_t)v41, (void *)v3, v10 & 1)) {
          goto LABEL_356;
        }
        PBReaderRecallMark();
        -[GEOPDSearchResult _addNoFlagsSearchResultSection:](a1, v41);
        goto LABEL_155;
      case 19:
        if (!v35 || (*(unsigned char *)(a1 + 250) & 0x80) != 0) {
          goto LABEL_241;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_357;
        }
        uint64_t v41 = objc_alloc_init(GEOPDRelatedEntitySection);
        if (!GEOPDRelatedEntitySectionReadAllFrom((uint64_t)v41, (void *)v3, v10 & 1)) {
          goto LABEL_356;
        }
        PBReaderRecallMark();
        -[GEOPDSearchResult _addNoFlagsRelatedEntitySection:](a1, v41);
        goto LABEL_155;
      case 20:
        if (!v35 || (*(unsigned char *)(a1 + 252) & 1) != 0) {
          goto LABEL_241;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_357;
        }
        uint64_t v41 = objc_alloc_init(GEOPDSSearchTierMetadata);
        if (!GEOPDSSearchTierMetadataReadAllFrom((uint64_t)v41, (void *)v3)) {
          goto LABEL_356;
        }
        PBReaderRecallMark();
        -[GEOPDSearchResult _addNoFlagsSearchTierMetadata:](a1, v41);
LABEL_155:

        goto LABEL_156;
      case 21:
        if (!v35) {
          goto LABEL_241;
        }
        if ((*(unsigned char *)(a1 + 251) & 8) != 0)
        {
          char v139 = PBReaderSkipValueWithTag();
          char v6 = (int *)MEMORY[0x1E4F940E0];
          if ((v139 & 1) == 0) {
            goto LABEL_357;
          }
          uint64_t v133 = *(void *)(a1 + 248) << 36;
          goto LABEL_315;
        }
        char v89 = PBReaderPlaceMark();
        char v6 = (int *)MEMORY[0x1E4F940E0];
        if ((v89 & 1) == 0) {
          goto LABEL_357;
        }
        uint64_t v41 = objc_alloc_init(GEOPDResultRefinementGroup);
        if (!GEOPDResultRefinementGroupReadAllFrom((uint64_t)v41, (void *)v3, v10 & 1)) {
          goto LABEL_356;
        }
        PBReaderRecallMark();
        uint64_t v42 = 152;
        goto LABEL_240;
      case 22:
        if (!v35) {
          goto LABEL_241;
        }
        if ((*(unsigned char *)(a1 + 249) & 8) != 0)
        {
          char v140 = PBReaderSkipValueWithTag();
          char v6 = (int *)MEMORY[0x1E4F940E0];
          if ((v140 & 1) == 0) {
            goto LABEL_357;
          }
          uint64_t v133 = *(void *)(a1 + 248) << 52;
          goto LABEL_315;
        }
        char v90 = PBReaderPlaceMark();
        char v6 = (int *)MEMORY[0x1E4F940E0];
        if ((v90 & 1) == 0) {
          goto LABEL_357;
        }
        uint64_t v41 = objc_alloc_init(GEOPDSSearchAutoRedoThreshold);
        if (!GEOPDSSearchAutoRedoThresholdReadAllFrom((uint64_t)v41, (void *)v3)) {
          goto LABEL_356;
        }
        PBReaderRecallMark();
        uint64_t v42 = 24;
        goto LABEL_240;
      case 23:
        if (!v35) {
          goto LABEL_241;
        }
        if ((*(unsigned char *)(a1 + 250) & 0x20) != 0)
        {
          char v141 = PBReaderSkipValueWithTag();
          char v6 = (int *)MEMORY[0x1E4F940E0];
          if ((v141 & 1) == 0) {
            goto LABEL_357;
          }
          uint64_t v133 = *(void *)(a1 + 248) << 42;
          goto LABEL_315;
        }
        char v91 = PBReaderPlaceMark();
        char v6 = (int *)MEMORY[0x1E4F940E0];
        if ((v91 & 1) == 0) {
          goto LABEL_357;
        }
        uint64_t v41 = objc_alloc_init(GEOPDPlaceSummaryLayoutMetadata);
        if (!GEOPDPlaceSummaryLayoutMetadataReadAllFrom((uint64_t)v41, (void *)v3, v10 & 1)) {
          goto LABEL_356;
        }
        PBReaderRecallMark();
        uint64_t v42 = 104;
        goto LABEL_240;
      case 24:
        if (!v35) {
          goto LABEL_241;
        }
        if ((*(unsigned char *)(a1 + 252) & 2) != 0)
        {
          char v142 = PBReaderSkipValueWithTag();
          char v6 = (int *)MEMORY[0x1E4F940E0];
          if ((v142 & 1) == 0) {
            goto LABEL_357;
          }
          uint64_t v133 = *(void *)(a1 + 248) << 30;
          goto LABEL_315;
        }
        char v92 = PBReaderPlaceMark();
        char v6 = (int *)MEMORY[0x1E4F940E0];
        if ((v92 & 1) == 0) {
          goto LABEL_357;
        }
        uint64_t v41 = objc_alloc_init(GEOPDSearchSectionList);
        if (!GEOPDSearchSectionListReadAllFrom((uint64_t)v41, (void *)v3, v10 & 1)) {
          goto LABEL_356;
        }
        PBReaderRecallMark();
        uint64_t v42 = 200;
        goto LABEL_240;
      case 25:
        if ((v8 & 1) == 0) {
          goto LABEL_241;
        }
        char v93 = 0;
        unsigned int v94 = 0;
        uint64_t v95 = 0;
        *(void *)(a1 + 248) |= 0x20uLL;
        char v6 = (int *)MEMORY[0x1E4F940E0];
        while (2)
        {
          uint64_t v96 = *v21;
          uint64_t v97 = *(void *)(v3 + v96);
          unint64_t v98 = v97 + 1;
          if (v97 == -1 || v98 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v22) = 1;
          }
          else
          {
            char v99 = *(unsigned char *)(*(void *)(v3 + *v23) + v97);
            *(void *)(v3 + v96) = v98;
            v95 |= (unint64_t)(v99 & 0x7F) << v93;
            if (v99 < 0)
            {
              v93 += 7;
              BOOL v31 = v94++ >= 9;
              if (v31)
              {
                uint64_t v95 = 0;
                goto LABEL_270;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v22)) {
          uint64_t v95 = 0;
        }
LABEL_270:
        BOOL v129 = v95 != 0;
        uint64_t v130 = 240;
        goto LABEL_279;
      case 26:
        if ((v8 & 1) == 0) {
          goto LABEL_241;
        }
        char v100 = 0;
        unsigned int v101 = 0;
        uint64_t v52 = 0;
        *(void *)(a1 + 248) |= 0x10uLL;
        char v6 = (int *)MEMORY[0x1E4F940E0];
        while (2)
        {
          uint64_t v102 = *v21;
          uint64_t v103 = *(void *)(v3 + v102);
          unint64_t v104 = v103 + 1;
          if (v103 == -1 || v104 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v22) = 1;
          }
          else
          {
            char v105 = *(unsigned char *)(*(void *)(v3 + *v23) + v103);
            *(void *)(v3 + v102) = v104;
            v52 |= (unint64_t)(v105 & 0x7F) << v100;
            if (v105 < 0)
            {
              v100 += 7;
              BOOL v31 = v101++ >= 9;
              if (v31)
              {
                LODWORD(v52) = 0;
                goto LABEL_274;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v22)) {
          LODWORD(v52) = 0;
        }
LABEL_274:
        uint64_t v131 = 236;
        goto LABEL_284;
      case 28:
        if ((v8 & 1) == 0) {
          goto LABEL_241;
        }
        char v109 = 0;
        unsigned int v110 = 0;
        uint64_t v111 = 0;
        *(void *)(a1 + 248) |= 0x80uLL;
        char v6 = (int *)MEMORY[0x1E4F940E0];
        while (2)
        {
          uint64_t v112 = *v21;
          uint64_t v113 = *(void *)(v3 + v112);
          unint64_t v114 = v113 + 1;
          if (v113 == -1 || v114 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v22) = 1;
          }
          else
          {
            char v115 = *(unsigned char *)(*(void *)(v3 + *v23) + v113);
            *(void *)(v3 + v112) = v114;
            v111 |= (unint64_t)(v115 & 0x7F) << v109;
            if (v115 < 0)
            {
              v109 += 7;
              BOOL v31 = v110++ >= 9;
              if (v31)
              {
                uint64_t v111 = 0;
                goto LABEL_278;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v22)) {
          uint64_t v111 = 0;
        }
LABEL_278:
        BOOL v129 = v111 != 0;
        uint64_t v130 = 242;
LABEL_279:
        *(unsigned char *)(a1 + v130) = v129;
        goto LABEL_318;
      case 29:
        if (!v35) {
          goto LABEL_241;
        }
        if ((*(unsigned char *)(a1 + 251) & 0x80) != 0)
        {
          char v143 = PBReaderSkipValueWithTag();
          char v6 = (int *)MEMORY[0x1E4F940E0];
          if ((v143 & 1) == 0) {
            goto LABEL_357;
          }
          uint64_t v133 = *(void *)(a1 + 248) << 32;
          goto LABEL_315;
        }
        char v116 = PBReaderPlaceMark();
        char v6 = (int *)MEMORY[0x1E4F940E0];
        if ((v116 & 1) == 0) {
          goto LABEL_357;
        }
        uint64_t v41 = objc_alloc_init(GEOPDSSearchSessionData);
        if (!GEOPDSSearchSessionDataReadAllFrom((uint64_t)v41, (void *)v3)) {
          goto LABEL_356;
        }
        PBReaderRecallMark();
        uint64_t v42 = 184;
        goto LABEL_240;
      case 30:
        if (!v35) {
          goto LABEL_241;
        }
        if ((*(unsigned char *)(a1 + 250) & 8) != 0)
        {
          char v144 = PBReaderSkipValueWithTag();
          char v6 = (int *)MEMORY[0x1E4F940E0];
          if ((v144 & 1) == 0) {
            goto LABEL_357;
          }
          uint64_t v133 = *(void *)(a1 + 248) << 44;
          goto LABEL_315;
        }
        char v117 = PBReaderPlaceMark();
        char v6 = (int *)MEMORY[0x1E4F940E0];
        if ((v117 & 1) == 0) {
          goto LABEL_357;
        }
        uint64_t v41 = objc_alloc_init(GEOPDMapsIdentifier);
        if (!GEOPDMapsIdentifierReadAllFrom((uint64_t)v41, (void *)v3)) {
          goto LABEL_356;
        }
        PBReaderRecallMark();
        uint64_t v42 = 88;
        goto LABEL_240;
      case 31:
        if ((v8 & 1) == 0) {
          goto LABEL_241;
        }
        char v118 = 0;
        unsigned int v119 = 0;
        uint64_t v52 = 0;
        *(void *)(a1 + 248) |= 2uLL;
        char v6 = (int *)MEMORY[0x1E4F940E0];
        while (2)
        {
          uint64_t v120 = *v21;
          uint64_t v121 = *(void *)(v3 + v120);
          unint64_t v122 = v121 + 1;
          if (v121 == -1 || v122 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v22) = 1;
          }
          else
          {
            char v123 = *(unsigned char *)(*(void *)(v3 + *v23) + v121);
            *(void *)(v3 + v120) = v122;
            v52 |= (unint64_t)(v123 & 0x7F) << v118;
            if (v123 < 0)
            {
              v118 += 7;
              BOOL v31 = v119++ >= 9;
              if (v31)
              {
                LODWORD(v52) = 0;
                goto LABEL_283;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v22)) {
          LODWORD(v52) = 0;
        }
LABEL_283:
        uint64_t v131 = 224;
LABEL_284:
        *(_DWORD *)(a1 + v131) = v52;
        goto LABEL_318;
      case 32:
        if (!v35) {
          goto LABEL_241;
        }
        if ((*(unsigned char *)(a1 + 250) & 4) != 0)
        {
          char v145 = PBReaderSkipValueWithTag();
          char v6 = (int *)MEMORY[0x1E4F940E0];
          if ((v145 & 1) == 0) {
            goto LABEL_357;
          }
          uint64_t v133 = *(void *)(a1 + 248) << 45;
          goto LABEL_315;
        }
        char v124 = PBReaderPlaceMark();
        char v6 = (int *)MEMORY[0x1E4F940E0];
        if ((v124 & 1) == 0) {
          goto LABEL_357;
        }
        uint64_t v41 = objc_alloc_init(GEOPDGuideSummaryLayoutMetadata);
        if (!GEOPDGuideSummaryLayoutMetadataReadAllFrom((uint64_t)v41, (void *)v3)) {
          goto LABEL_356;
        }
        PBReaderRecallMark();
        uint64_t v42 = 80;
        goto LABEL_240;
      case 33:
        if (!v35) {
          goto LABEL_241;
        }
        if ((*(unsigned char *)(a1 + 250) & 0x10) != 0)
        {
          char v146 = PBReaderSkipValueWithTag();
          char v6 = (int *)MEMORY[0x1E4F940E0];
          if ((v146 & 1) == 0) {
            goto LABEL_357;
          }
          uint64_t v133 = *(void *)(a1 + 248) << 43;
          goto LABEL_315;
        }
        char v125 = PBReaderPlaceMark();
        char v6 = (int *)MEMORY[0x1E4F940E0];
        if ((v125 & 1) == 0) {
          goto LABEL_357;
        }
        uint64_t v41 = objc_alloc_init(GEOPDPaginationInfo);
        if (!GEOPDPaginationInfoReadAllFrom((uint64_t)v41, (void *)v3, v10 & 1)) {
          goto LABEL_356;
        }
        PBReaderRecallMark();
        uint64_t v42 = 96;
        goto LABEL_240;
      case 34:
        if (!v35) {
          goto LABEL_241;
        }
        if ((*(unsigned char *)(a1 + 250) & 0x40) != 0)
        {
          char v147 = PBReaderSkipValueWithTag();
          char v6 = (int *)MEMORY[0x1E4F940E0];
          if ((v147 & 1) == 0) {
            goto LABEL_357;
          }
          uint64_t v133 = *(void *)(a1 + 248) << 41;
LABEL_315:
          v7 += v133 >> 63;
LABEL_316:
          int8x16_t v22 = (int *)MEMORY[0x1E4F940C8];
LABEL_317:
          uint64_t v23 = (int *)MEMORY[0x1E4F940B8];
LABEL_318:
          if (!(v154 & 1 | (v7 != 0))) {
            goto LABEL_319;
          }
          continue;
        }
        char v126 = PBReaderPlaceMark();
        char v6 = (int *)MEMORY[0x1E4F940E0];
        if ((v126 & 1) == 0) {
          goto LABEL_357;
        }
        uint64_t v41 = objc_alloc_init(GEOPDSSearchRedoButtonThreshold);
        if (GEOPDSSearchRedoButtonThresholdReadAllFrom((uint64_t)v41, (void *)v3))
        {
          PBReaderRecallMark();
          uint64_t v42 = 112;
LABEL_240:
          uint64_t v127 = *(void **)(a1 + v42);
          *(void *)(a1 + v42) = v41;

          --v7;
          goto LABEL_316;
        }
LABEL_356:

LABEL_357:
        int v152 = 0;
        int8x16_t v22 = (int *)MEMORY[0x1E4F940C8];
LABEL_320:
        if (v153) {
LABEL_321:
        }
          *(void *)(a1 + 248) |= 0x400uLL;
        if (v156 & 1 | ((v152 & 1) == 0))
        {
          *(void *)(a1 + 248) |= 0x3FFFFF800uLL;
        }
        else if (v20)
        {
          while (1)
          {
            int v149 = *v20++;
            uint64_t v148 = 0x20000;
            switch(v149)
            {
              case 0:
                goto LABEL_350;
              case 1:
                goto LABEL_348;
              case 2:
                uint64_t v148 = 0x8000;
                goto LABEL_348;
              case 4:
                uint64_t v148 = 0x1000000;
                goto LABEL_348;
              case 6:
                uint64_t v148 = 0x4000000;
                goto LABEL_348;
              case 7:
                uint64_t v148 = 0x2000;
                goto LABEL_348;
              case 8:
                uint64_t v148 = 0x20000000;
                goto LABEL_348;
              case 9:
                uint64_t v148 = 0x2000000;
                goto LABEL_348;
              case 10:
                uint64_t v148 = 0x4000;
                goto LABEL_348;
              case 11:
                uint64_t v148 = 4096;
                goto LABEL_348;
              case 12:
                uint64_t v148 = 0x10000;
                goto LABEL_348;
              case 17:
                uint64_t v148 = 0x10000000;
                goto LABEL_348;
              case 18:
                uint64_t v148 = 0x40000000;
                goto LABEL_348;
              case 19:
                uint64_t v148 = 0x800000;
                goto LABEL_348;
              case 20:
                uint64_t v148 = 0x100000000;
                goto LABEL_348;
              case 21:
                uint64_t v148 = 0x8000000;
                goto LABEL_348;
              case 22:
                uint64_t v148 = 2048;
                goto LABEL_348;
              case 23:
                uint64_t v148 = 0x200000;
                goto LABEL_348;
              case 24:
                uint64_t v148 = 0x200000000;
                goto LABEL_348;
              case 29:
                uint64_t v148 = 0x80000000;
                goto LABEL_348;
              case 30:
                uint64_t v148 = 0x80000;
                goto LABEL_348;
              case 32:
                uint64_t v148 = 0x40000;
                goto LABEL_348;
              case 33:
                uint64_t v148 = 0x100000;
                goto LABEL_348;
              case 34:
                uint64_t v148 = 0x400000;
LABEL_348:
                *(void *)(a1 + 248) |= v148;
                break;
              default:
                continue;
            }
          }
        }
LABEL_350:
        if (v152) {
          unint64_t v3 = *(unsigned char *)(v3 + *v22) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v156)
        {
          unint64_t v150 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      default:
        if ((v153 & 1) == 0 || (*(unsigned char *)(a1 + 249) & 4) != 0)
        {
LABEL_241:
          char v128 = PBReaderSkipValueWithTag();
          uint64_t v23 = (int *)MEMORY[0x1E4F940B8];
          int8x16_t v22 = (int *)MEMORY[0x1E4F940C8];
          char v6 = (int *)MEMORY[0x1E4F940E0];
          if ((v128 & 1) == 0)
          {
            int v152 = 0;
            goto LABEL_320;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v106 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            uint64_t v107 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v106;
          }
          int v108 = PBUnknownFieldAdd();
          int8x16_t v22 = (int *)MEMORY[0x1E4F940C8];
          char v6 = (int *)MEMORY[0x1E4F940E0];
          uint64_t v23 = (int *)MEMORY[0x1E4F940B8];
          if (!v108)
          {
            int v152 = 0;
            goto LABEL_321;
          }
        }
        goto LABEL_318;
    }
  }
}

BOOL GEOPDAutocompleteEntryQueryIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  int v2 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v3 = (int *)MEMORY[0x1E4F940E0];
  id v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    BOOL v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        break;
      }
      switch((v8 >> 3))
      {
        case 1u:
          if (v15 != 2) {
            goto LABEL_58;
          }
          goto LABEL_20;
        case 2u:
          if ((v8 & 7) != 0) {
            goto LABEL_58;
          }
          unsigned int v17 = 0;
          while (1)
          {
            uint64_t v18 = *v2;
            uint64_t v19 = *(void *)&a1[v18];
            unint64_t v20 = v19 + 1;
            if (v19 == -1 || v20 > *(void *)&a1[*v3]) {
              goto LABEL_54;
            }
            int v21 = *(char *)(*(void *)&a1[*v5] + v19);
            *(void *)&a1[v18] = v20;
            if (v21 < 0)
            {
              BOOL v22 = v17++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_55;
          }
        case 3u:
          if ((v8 & 7) != 0) {
            goto LABEL_58;
          }
          unsigned int v23 = 0;
          while (1)
          {
            uint64_t v24 = *v2;
            uint64_t v25 = *(void *)&a1[v24];
            unint64_t v26 = v25 + 1;
            if (v25 == -1 || v26 > *(void *)&a1[*v3]) {
              goto LABEL_54;
            }
            int v27 = *(char *)(*(void *)&a1[*v5] + v25);
            *(void *)&a1[v24] = v26;
            if (v27 < 0)
            {
              BOOL v22 = v23++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_55;
          }
        case 4u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDResultRefinementIsValid(a1)) {
            goto LABEL_58;
          }
          goto LABEL_45;
        case 5u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOStyleAttributesIsValid(a1)) {
            goto LABEL_58;
          }
LABEL_45:
          PBReaderRecallMark();
          continue;
        case 6u:
          if ((v8 & 7) != 0) {
            goto LABEL_58;
          }
          unsigned int v28 = 0;
          break;
        default:
LABEL_20:
          if (PBReaderSkipValueWithTag()) {
            continue;
          }
LABEL_58:
          PBReaderRecallMark();
          return 0;
      }
      while (1)
      {
        uint64_t v29 = *v2;
        uint64_t v30 = *(void *)&a1[v29];
        unint64_t v31 = v30 + 1;
        if (v30 == -1 || v31 > *(void *)&a1[*v3]) {
          break;
        }
        int v32 = *(char *)(*(void *)&a1[*v5] + v30);
        *(void *)&a1[v29] = v31;
        if (v32 < 0)
        {
          BOOL v22 = v28++ > 8;
          if (!v22) {
            continue;
          }
        }
        goto LABEL_55;
      }
LABEL_54:
      a1[*v4] = 1;
LABEL_55:
      ;
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v33 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v33;
}

unint64_t GEOPDBatchSpatialLookupResultReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  char v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 44);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 40)];
  char v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  char v12 = &OBJC_IVAR___GEOMapDataSubscriptionDownloadGroup__completedSubscriptions;
  int v13 = ((*(unsigned __int8 *)(a1 + 56) >> 3) & 1)
      + ((*(unsigned __int8 *)(a1 + 56) >> 2) & 1)
      + ((*(unsigned __int8 *)(a1 + 56) >> 1) & 1);
  while (2)
  {
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    uint64_t v16 = 1;
    switch(a3[v8])
    {
      case -4:
        ++v13;
        goto LABEL_8;
      case -3:
        char v7 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v15 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v17 = v13 != 0;
        int v18 = v17 & ~v11 | v9;
        int v19 = v17 | v11;
        if (((v17 | v11) | v7)) {
          unint64_t v20 = 0;
        }
        else {
          unint64_t v20 = a3;
        }
        int v21 = (int *)MEMORY[0x1E4F940E8];
        BOOL v22 = v8 != 0;
        int v23 = 1;
        if (*(void *)(v3 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(v3 + *v6)) {
          goto LABEL_77;
        }
        char v57 = v17 & ~(_BYTE)v11 | v9;
        int v59 = v22 | v19 | v18;
        char v60 = (v20 == 0) | v19;
        uint64_t v24 = (int *)MEMORY[0x1E4F940C8];
        uint64_t v25 = (int *)MEMORY[0x1E4F940B8];
        char v58 = v17 | v11;
        break;
      default:
        ++v13;
LABEL_7:
        uint64_t v14 = v9;
LABEL_8:
        uint64_t v15 = v10;
        uint64_t v16 = v11;
LABEL_10:
        ++v8;
        uint64_t v9 = v14;
        uint64_t v10 = v15;
        uint64_t v11 = v16;
        continue;
    }
    break;
  }
  do
  {
    if (*(unsigned char *)(v3 + *v24)) {
      break;
    }
    char v26 = 0;
    unsigned int v27 = 0;
    unint64_t v28 = 0;
    while (1)
    {
      uint64_t v29 = *v21;
      uint64_t v30 = *(void *)(v3 + v29);
      unint64_t v31 = v30 + 1;
      if (v30 == -1 || v31 > *(void *)(v3 + *v6)) {
        break;
      }
      char v32 = *(unsigned char *)(*(void *)(v3 + *v25) + v30);
      *(void *)(v3 + v29) = v31;
      v28 |= (unint64_t)(v32 & 0x7F) << v26;
      if ((v32 & 0x80) == 0) {
        goto LABEL_25;
      }
      v26 += 7;
      BOOL v33 = v27++ >= 9;
      if (v33)
      {
        unint64_t v28 = 0;
        int v34 = *(unsigned __int8 *)(v3 + *v24);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v24) = 1;
LABEL_25:
    int v34 = *(unsigned __int8 *)(v3 + *v24);
    if (*(unsigned char *)(v3 + *v24)) {
      unint64_t v28 = 0;
    }
LABEL_27:
    if (v34 || (v28 & 7) == 4) {
      break;
    }
    unint64_t v36 = v28 >> 3;
    BOOL v37 = v19;
    if ((v60 & 1) == 0)
    {
      int v38 = v20;
      do
      {
        int v40 = *v38++;
        int v39 = v40;
        BOOL v37 = v40 != 0;
        if (v40) {
          BOOL v41 = v39 == v36;
        }
        else {
          BOOL v41 = 1;
        }
      }
      while (!v41);
    }
    switch(v36)
    {
      case 3:
        if (v37 && (*(unsigned char *)(a1 + 56) & 4) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_96;
          }
          char v49 = objc_alloc_init(GEOPDSpatialEventLookupResult);
          if (!GEOPDSpatialEventLookupResultReadAllFrom((uint64_t)v49, (void *)v3, v10 & 1)) {
            goto LABEL_95;
          }
          PBReaderRecallMark();
          -[GEOPDBatchSpatialLookupResult _addNoFlagsSpatialEventLookupResult:](a1, v49);
          goto LABEL_59;
        }
        break;
      case 2:
        if (v37 && (*(unsigned char *)(a1 + 56) & 8) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_96;
          }
          char v49 = objc_alloc_init(GEOPDSpatialPlaceLookupResult);
          if (!GEOPDSpatialPlaceLookupResultReadAllFrom((uint64_t)v49, (void *)v3, v10 & 1))
          {
LABEL_95:

LABEL_96:
            int v23 = 0;
            char v12 = &OBJC_IVAR___GEOMapDataSubscriptionDownloadGroup__completedSubscriptions;
            LOBYTE(v19) = v58;
            goto LABEL_76;
          }
          PBReaderRecallMark();
          -[GEOPDBatchSpatialLookupResult _addNoFlagsSpatialPlaceLookupResult:](a1, v49);
LABEL_59:

          LOBYTE(v19) = v58;
          uint64_t v24 = (int *)MEMORY[0x1E4F940C8];
LABEL_72:
          if ((v59 & 1) == 0) {
            goto LABEL_74;
          }
          continue;
        }
        break;
      case 1:
        if (v7)
        {
          char v42 = 0;
          unsigned int v43 = 0;
          uint64_t v44 = 0;
          *(unsigned char *)(a1 + 56) |= 1u;
          while (1)
          {
            uint64_t v45 = *v21;
            uint64_t v46 = *(void *)(v3 + v45);
            unint64_t v47 = v46 + 1;
            if (v46 == -1 || v47 > *(void *)(v3 + *v6)) {
              break;
            }
            char v48 = *(unsigned char *)(*(void *)(v3 + *v25) + v46);
            *(void *)(v3 + v45) = v47;
            v44 |= (unint64_t)(v48 & 0x7F) << v42;
            if ((v48 & 0x80) == 0) {
              goto LABEL_69;
            }
            v42 += 7;
            BOOL v33 = v43++ >= 9;
            if (v33)
            {
              LODWORD(v44) = 0;
              goto LABEL_71;
            }
          }
          *(unsigned char *)(v3 + *v24) = 1;
LABEL_69:
          if (*(unsigned char *)(v3 + *v24)) {
            LODWORD(v44) = 0;
          }
LABEL_71:
          *(_DWORD *)(a1 + 52) = v44;
          goto LABEL_72;
        }
        break;
      default:
        if ((v57 & 1) != 0 && (*(unsigned char *)(a1 + 56) & 2) == 0)
        {
          if (!*(void *)(a1 + 16))
          {
            id v50 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            unsigned int v51 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v50;
          }
          int v23 = PBUnknownFieldAdd();
          LOBYTE(v19) = v58;
          uint64_t v24 = (int *)MEMORY[0x1E4F940C8];
          if (!v23)
          {
            char v12 = &OBJC_IVAR___GEOMapDataSubscriptionDownloadGroup__completedSubscriptions;
            goto LABEL_78;
          }
          goto LABEL_72;
        }
        break;
    }
    int v23 = PBReaderSkipValueWithTag();
    uint64_t v24 = (int *)MEMORY[0x1E4F940C8];
    LOBYTE(v19) = v58;
    if ((v23 & v59 & 1) == 0) {
      goto LABEL_75;
    }
  }
  while (*(void *)(v3 + *v21) < *(void *)(v3 + *v6));
LABEL_74:
  int v23 = 1;
LABEL_75:
  char v12 = &OBJC_IVAR___GEOMapDataSubscriptionDownloadGroup__completedSubscriptions;
LABEL_76:
  LOBYTE(v18) = v57;
LABEL_77:
  if (v18) {
LABEL_78:
  }
    *(unsigned char *)(a1 + v12[192]) |= 2u;
  if (v19 & 1 | ((v23 & 1) == 0))
  {
    *(unsigned char *)(a1 + v12[192]) |= 8u;
    *(unsigned char *)(a1 + v12[192]) |= 4u;
    goto LABEL_89;
  }
  if (v20)
  {
    while (2)
    {
      while (1)
      {
        int v53 = *v20++;
        int v52 = v53;
        if (v53 == 2) {
          break;
        }
        if (v52 == 3)
        {
          char v54 = 4;
          goto LABEL_88;
        }
        if (!v52) {
          goto LABEL_89;
        }
      }
      char v54 = 8;
LABEL_88:
      *(unsigned char *)(a1 + v12[192]) |= v54;
      continue;
    }
  }
LABEL_89:
  if (v23)
  {
    unint64_t v3 = *(unsigned char *)(v3 + (int)*MEMORY[0x1E4F940C8]) == 0;
    if ((v19 & 1) == 0) {
      return v3;
    }
LABEL_93:
    unint64_t v55 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  else
  {
    unint64_t v3 = 0;
    if (v19) {
      goto LABEL_93;
    }
  }
  return v3;
}

unint64_t GEOPDSpatialEventLookupResultReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 44))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOPDSpatialEventLookupResultReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = [v8 position];
  *(_DWORD *)(a1 + 44) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOPDSpatialEventLookupResultReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOPDSpatialEventLookupResultReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOPDSpatialEventLookupResultReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOPDSpatialEventLookupResultCallReadAllRecursiveWithoutSynchronized(a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_188FF3338(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188FF3E50(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPFeedbackUserInfoReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 96));
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 92);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 88)];
  uint64_t v6 = 0;
  char v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  unsigned int v11 = *(unsigned __int16 *)(a1 + 100);
  unsigned int v12 = ((v11 >> 5) & 1)
      + (v11 & 1)
      + (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16((uint16x4_t)vdup_n_s16(v11), (uint16x4_t)0xFFFDFFF8FFF9FFFELL), (int8x8_t)0x1000100010001))+ ((v11 >> 6) & 1)+ ((v11 >> 1) & 1)+ ((v11 >> 4) & 1));
  while (2)
  {
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    switch(a3[v6])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        char v7 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v14 = v9;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v16 = v12 > 5;
        char v17 = v16 & ~(_BYTE)v10 | v8;
        unsigned __int8 v18 = v16 | v10;
        char v55 = v17;
        char v56 = v18 | v17;
        if ((v18 | v7)) {
          int v19 = 0;
        }
        else {
          int v19 = a3;
        }
        unint64_t v20 = (int *)MEMORY[0x1E4F940E8];
        int v21 = (int *)MEMORY[0x1E4F940C8];
        char v57 = (v19 == 0) | v18;
        BOOL v58 = v18;
        BOOL v22 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v12;
LABEL_7:
        uint64_t v13 = v8;
LABEL_8:
        uint64_t v14 = v9;
        uint64_t v15 = v10;
LABEL_10:
        ++v6;
        uint64_t v8 = v13;
        uint64_t v9 = v14;
        uint64_t v10 = v15;
        continue;
    }
    break;
  }
  while (2)
  {
    int v23 = (int *)MEMORY[0x1E4F940E0];
    if (*(void *)(v3 + *v20) >= *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) || *(unsigned char *)(v3 + *v21)) {
      goto LABEL_101;
    }
    char v24 = 0;
    unsigned int v25 = 0;
    unint64_t v26 = 0;
    while (1)
    {
      uint64_t v27 = *v20;
      uint64_t v28 = *(void *)(v3 + v27);
      unint64_t v29 = v28 + 1;
      if (v28 == -1 || v29 > *(void *)(v3 + *v23)) {
        break;
      }
      char v30 = *(unsigned char *)(*(void *)(v3 + *v22) + v28);
      *(void *)(v3 + v27) = v29;
      v26 |= (unint64_t)(v30 & 0x7F) << v24;
      if ((v30 & 0x80) == 0) {
        goto LABEL_25;
      }
      v24 += 7;
      if (v25++ >= 9)
      {
        unint64_t v26 = 0;
        int v32 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v21) = 1;
LABEL_25:
    int v32 = *(unsigned __int8 *)(v3 + *v21);
    if (*(unsigned char *)(v3 + *v21)) {
      unint64_t v26 = 0;
    }
LABEL_27:
    if (v32 || (v26 & 7) == 4)
    {
LABEL_101:
      int v54 = 1;
      goto LABEL_102;
    }
    unint64_t v34 = v26 >> 3;
    BOOL v35 = v58;
    if ((v57 & 1) == 0)
    {
      unint64_t v36 = v19;
      do
      {
        int v38 = *v36++;
        int v37 = v38;
        BOOL v35 = v38 != 0;
        if (v38) {
          BOOL v39 = v37 == v34;
        }
        else {
          BOOL v39 = 1;
        }
      }
      while (!v39);
    }
    switch((int)v34)
    {
      case 1:
        if (!v35) {
          goto LABEL_80;
        }
        if ((*(_WORD *)(a1 + 100) & 0x80) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_123;
          }
          int v40 = objc_alloc_init(GEORPUserCredentials);
          if (GEORPUserCredentialsReadAllFrom((uint64_t)v40, (void *)v3, v9 & 1))
          {
            PBReaderRecallMark();
            uint64_t v41 = 72;
            goto LABEL_78;
          }
          goto LABEL_122;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_123;
        }
        __int16 v49 = *(_WORD *)(a1 + 100) << 8;
        goto LABEL_98;
      case 2:
        if (!v35) {
          goto LABEL_80;
        }
        if ((*(_WORD *)(a1 + 100) & 4) == 0)
        {
          uint64_t v45 = PBReaderReadData();
          uint64_t v46 = 32;
          goto LABEL_62;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_123;
        }
        __int16 v49 = *(_WORD *)(a1 + 100) << 13;
        goto LABEL_98;
      case 3:
        if (!v35) {
          goto LABEL_80;
        }
        if ((*(_WORD *)(a1 + 100) & 0x100) == 0)
        {
          uint64_t v45 = PBReaderReadString();
          uint64_t v46 = 80;
          goto LABEL_62;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_123;
        }
        __int16 v49 = *(_WORD *)(a1 + 100) << 7;
        goto LABEL_98;
      case 4:
        if (!v35) {
          goto LABEL_80;
        }
        if ((*(_WORD *)(a1 + 100) & 8) == 0)
        {
          uint64_t v45 = PBReaderReadString();
          uint64_t v46 = 40;
          goto LABEL_62;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_123;
        }
        __int16 v49 = *(_WORD *)(a1 + 100) << 12;
        goto LABEL_98;
      case 5:
        if (!v35) {
          goto LABEL_80;
        }
        if ((*(_WORD *)(a1 + 100) & 0x40) == 0)
        {
          uint64_t v45 = PBReaderReadString();
          uint64_t v46 = 64;
LABEL_62:
          unint64_t v47 = *(void **)(a1 + v46);
          *(void *)(a1 + v46) = v45;
          goto LABEL_79;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_123;
        }
        __int16 v49 = *(_WORD *)(a1 + 100) << 9;
        goto LABEL_98;
      case 6:
        if (!v35) {
          goto LABEL_80;
        }
        if ((*(_WORD *)(a1 + 100) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_123;
          }
          __int16 v49 = *(_WORD *)(a1 + 100) << 14;
          goto LABEL_98;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_123;
        }
        int v40 = objc_alloc_init(GEORPAppAttestInfo);
        if (!GEORPAppAttestInfoReadAllFrom((uint64_t)v40, (void *)v3, v9 & 1)) {
          goto LABEL_122;
        }
        PBReaderRecallMark();
        uint64_t v41 = 24;
        goto LABEL_78;
      case 7:
        if (!v35) {
          goto LABEL_80;
        }
        if ((*(_WORD *)(a1 + 100) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_123;
          }
          __int16 v49 = *(_WORD *)(a1 + 100) << 11;
          goto LABEL_98;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_123;
        }
        int v40 = objc_alloc_init(GEORPAppAttestInfo);
        if (!GEORPAppAttestInfoReadAllFrom((uint64_t)v40, (void *)v3, v9 & 1)) {
          goto LABEL_122;
        }
        PBReaderRecallMark();
        uint64_t v41 = 48;
        goto LABEL_78;
      case 8:
        if (!v35) {
          goto LABEL_80;
        }
        if ((*(_WORD *)(a1 + 100) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_123;
          }
          __int16 v49 = *(_WORD *)(a1 + 100) << 10;
LABEL_98:
          v6 += v49 >> 15;
LABEL_99:
          int v21 = (int *)MEMORY[0x1E4F940C8];
LABEL_100:
          if (!(v56 & 1 | (v6 != 0))) {
            goto LABEL_101;
          }
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_123;
        }
        int v40 = objc_alloc_init(GEORPTdmInfo);
        if (GEORPTdmInfoReadAllFrom((uint64_t)v40, (void *)v3, v9 & 1))
        {
          PBReaderRecallMark();
          uint64_t v41 = 56;
LABEL_78:
          unint64_t v47 = *(void **)(a1 + v41);
          *(void *)(a1 + v41) = v40;
LABEL_79:

          --v6;
          goto LABEL_99;
        }
LABEL_122:

LABEL_123:
        int v54 = 0;
        int v21 = (int *)MEMORY[0x1E4F940C8];
LABEL_102:
        if (v55) {
LABEL_103:
        }
          *(_WORD *)(a1 + 100) |= 1u;
        if (v58 || (v54 & 1) == 0)
        {
          *(_WORD *)(a1 + 100) |= 0x80u;
          *(_WORD *)(a1 + 100) |= 4u;
          *(_WORD *)(a1 + 100) |= 0x100u;
          *(_WORD *)(a1 + 100) |= 8u;
          *(_WORD *)(a1 + 100) |= 0x40u;
          *(_WORD *)(a1 + 100) |= 2u;
          *(_WORD *)(a1 + 100) |= 0x10u;
          *(_WORD *)(a1 + 100) |= 0x20u;
        }
        else if (v19)
        {
          while (1)
          {
            int v50 = *v19++;
            __int16 v51 = 128;
            switch(v50)
            {
              case 0:
                goto LABEL_116;
              case 1:
                goto LABEL_115;
              case 2:
                __int16 v51 = 4;
                goto LABEL_115;
              case 3:
                __int16 v51 = 256;
                goto LABEL_115;
              case 4:
                __int16 v51 = 8;
                goto LABEL_115;
              case 5:
                __int16 v51 = 64;
                goto LABEL_115;
              case 6:
                __int16 v51 = 2;
                goto LABEL_115;
              case 7:
                __int16 v51 = 16;
                goto LABEL_115;
              case 8:
                __int16 v51 = 32;
LABEL_115:
                *(_WORD *)(a1 + 100) |= v51;
                break;
              default:
                continue;
            }
          }
        }
LABEL_116:
        if (v54) {
          unint64_t v3 = *(unsigned char *)(v3 + *v21) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v58)
        {
          int v52 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      default:
        if (v55 & 1) == 0 || (*(_WORD *)(a1 + 100))
        {
LABEL_80:
          char v48 = PBReaderSkipValueWithTag();
          int v21 = (int *)MEMORY[0x1E4F940C8];
          if ((v48 & 1) == 0)
          {
            int v54 = 0;
            goto LABEL_102;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v42 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            unsigned int v43 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v42;
          }
          int v44 = PBUnknownFieldAdd();
          int v21 = (int *)MEMORY[0x1E4F940C8];
          if (!v44)
          {
            int v54 = 0;
            goto LABEL_103;
          }
        }
        goto LABEL_100;
    }
  }
}

unint64_t GEOTraitsTransitScheduleFilterReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 52))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOTraitsTransitScheduleFilterReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = [v8 position];
  *(_DWORD *)(a1 + 52) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOTraitsTransitScheduleFilterReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOTraitsTransitScheduleFilterReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOTraitsTransitScheduleFilterReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
  {
    [*(id *)(a1 + 24) readAll:1];
    [*(id *)(a1 + 32) readAll:1];
    [*(id *)(a1 + 40) readAll:1];
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return Specified;
}

void sub_188FF4E5C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTraitsTransitScheduleFilterReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 52);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 48)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  unsigned int v11 = ((*(unsigned __int8 *)(a1 + 60) >> 2) & 1)
      + (*(unsigned char *)(a1 + 60) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 1) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 3) & 1);
  while (2)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v11;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_9;
      case 0:
        BOOL v14 = v11 > 1;
        char v15 = v14 & ~(_BYTE)v10 | v9;
        unsigned __int8 v16 = v14 | v10;
        char v50 = v15;
        char v51 = v16 | v15;
        if ((v16 | v8)) {
          char v17 = 0;
        }
        else {
          char v17 = a3;
        }
        unsigned __int8 v18 = (int *)MEMORY[0x1E4F940E8];
        int v19 = (int *)MEMORY[0x1E4F940C8];
        char v52 = (v17 == 0) | v16;
        BOOL v53 = v16;
        unint64_t v20 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v11;
LABEL_7:
        uint64_t v12 = v9;
LABEL_8:
        uint64_t v13 = v10;
LABEL_9:
        ++v7;
        uint64_t v9 = v12;
        uint64_t v10 = v13;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(void *)(v3 + *v18) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v19)) {
      goto LABEL_73;
    }
    char v21 = 0;
    unsigned int v22 = 0;
    unint64_t v23 = 0;
    while (1)
    {
      uint64_t v24 = *v18;
      uint64_t v25 = *(void *)(v3 + v24);
      unint64_t v26 = v25 + 1;
      if (v25 == -1 || v26 > *(void *)(v3 + *v6)) {
        break;
      }
      char v27 = *(unsigned char *)(*(void *)(v3 + *v20) + v25);
      *(void *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0) {
        goto LABEL_24;
      }
      v21 += 7;
      if (v22++ >= 9)
      {
        unint64_t v23 = 0;
        int v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_26;
      }
    }
    *(unsigned char *)(v3 + *v19) = 1;
LABEL_24:
    int v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(unsigned char *)(v3 + *v19)) {
      unint64_t v23 = 0;
    }
LABEL_26:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_73:
      int v49 = 1;
      goto LABEL_74;
    }
    unint64_t v31 = v23 >> 3;
    BOOL v32 = v53;
    if ((v52 & 1) == 0)
    {
      BOOL v33 = v17;
      do
      {
        int v35 = *v33++;
        int v34 = v35;
        BOOL v32 = v35 != 0;
        if (v35) {
          BOOL v36 = v34 == v31;
        }
        else {
          BOOL v36 = 1;
        }
      }
      while (!v36);
    }
    if (v31 == 3)
    {
      if (!v32) {
        goto LABEL_62;
      }
      if ((*(unsigned char *)(a1 + 60) & 8) != 0)
      {
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_91;
        }
        char v44 = 16 * *(unsigned char *)(a1 + 60);
        goto LABEL_70;
      }
      if ((PBReaderPlaceMark() & 1) == 0) {
        goto LABEL_91;
      }
      int v37 = objc_alloc_init(GEOTraitsTransitScheduleTimeRange);
      if (!GEOTraitsTransitScheduleTimeRangeReadAllFrom((uint64_t)v37, (void *)v3)) {
        goto LABEL_90;
      }
      PBReaderRecallMark();
      uint64_t v38 = 40;
LABEL_55:
      BOOL v39 = *(void **)(a1 + v38);
      *(void *)(a1 + v38) = v37;

      --v7;
      goto LABEL_71;
    }
    if (v31 == 2) {
      break;
    }
    if (v31 == 1)
    {
      if (!v32) {
        goto LABEL_62;
      }
      if ((*(unsigned char *)(a1 + 60) & 2) == 0)
      {
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_91;
        }
        int v37 = objc_alloc_init(GEOTraitsTransitScheduleModeFilter);
        if (!GEOTraitsTransitScheduleModeFilterReadAllFrom((uint64_t)v37, (void *)v3)) {
          goto LABEL_90;
        }
        PBReaderRecallMark();
        uint64_t v38 = 24;
        goto LABEL_55;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        goto LABEL_91;
      }
      char v44 = *(unsigned char *)(a1 + 60) << 6;
LABEL_70:
      v7 += v44 >> 7;
LABEL_71:
      int v19 = (int *)MEMORY[0x1E4F940C8];
      goto LABEL_72;
    }
    if (v50 & 1) == 0 || (*(unsigned char *)(a1 + 60))
    {
LABEL_62:
      char v43 = PBReaderSkipValueWithTag();
      int v19 = (int *)MEMORY[0x1E4F940C8];
      if ((v43 & 1) == 0)
      {
        int v49 = 0;
        goto LABEL_74;
      }
      goto LABEL_72;
    }
    if (!*(void *)(a1 + 16))
    {
      id v40 = objc_alloc_init(MEMORY[0x1E4F940B0]);
      uint64_t v41 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v40;
    }
    int v42 = PBUnknownFieldAdd();
    int v19 = (int *)MEMORY[0x1E4F940C8];
    if (!v42)
    {
      int v49 = 0;
      goto LABEL_75;
    }
LABEL_72:
    if (!(v51 & 1 | (v7 != 0))) {
      goto LABEL_73;
    }
  }
  if (!v32) {
    goto LABEL_62;
  }
  if ((*(unsigned char *)(a1 + 60) & 4) != 0)
  {
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      goto LABEL_91;
    }
    char v44 = 32 * *(unsigned char *)(a1 + 60);
    goto LABEL_70;
  }
  if ((PBReaderPlaceMark() & 1) == 0) {
    goto LABEL_91;
  }
  int v37 = objc_alloc_init(GEOTraitsTransitScheduleModeFilter);
  if (GEOTraitsTransitScheduleModeFilterReadAllFrom((uint64_t)v37, (void *)v3))
  {
    PBReaderRecallMark();
    uint64_t v38 = 32;
    goto LABEL_55;
  }
LABEL_90:

LABEL_91:
  int v49 = 0;
  int v19 = (int *)MEMORY[0x1E4F940C8];
LABEL_74:
  if ((v50 & 1) == 0) {
    goto LABEL_76;
  }
LABEL_75:
  *(unsigned char *)(a1 + 60) |= 1u;
LABEL_76:
  if (v53 || (v49 & 1) == 0)
  {
    *(unsigned char *)(a1 + 60) |= 2u;
    *(unsigned char *)(a1 + 60) |= 4u;
    *(unsigned char *)(a1 + 60) |= 8u;
  }
  else if (v17)
  {
    while (1)
    {
      int v46 = *v17++;
      char v45 = 2;
      switch(v46)
      {
        case 0:
          goto LABEL_84;
        case 1:
          goto LABEL_82;
        case 2:
          char v45 = 4;
          goto LABEL_82;
        case 3:
          char v45 = 8;
LABEL_82:
          *(unsigned char *)(a1 + 60) |= v45;
          break;
        default:
          continue;
      }
    }
  }
LABEL_84:
  if (v49) {
    unint64_t v3 = *(unsigned char *)(v3 + *v19) == 0;
  }
  else {
    unint64_t v3 = 0;
  }
  if (v53)
  {
    unint64_t v47 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  return v3;
}

BOOL GEOTraitsTransitScheduleModeFilterReadAllFrom(uint64_t a1, void *a2)
{
  unint64_t v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    id v4 = (int *)MEMORY[0x1E4F940E8];
    BOOL v5 = (int *)MEMORY[0x1E4F940E0];
    uint64_t v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v3[*v6]) {
          break;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          BOOL v15 = v9++ >= 9;
          if (v15)
          {
            unint64_t v10 = 0;
            int v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v16 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v16 || (v10 & 7) == 4) {
          break;
        }
        if ((v10 >> 3) == 2)
        {
          char v20 = 0;
          unsigned int v21 = 0;
          uint64_t v22 = 0;
          *(unsigned char *)(a1 + 28) |= 1u;
          while (1)
          {
            uint64_t v23 = *v4;
            uint64_t v24 = *(void *)&v3[v23];
            unint64_t v25 = v24 + 1;
            if (v24 == -1 || v25 > *(void *)&v3[*v5]) {
              break;
            }
            char v26 = *(unsigned char *)(*(void *)&v3[*v7] + v24);
            *(void *)&v3[v23] = v25;
            v22 |= (unint64_t)(v26 & 0x7F) << v20;
            if ((v26 & 0x80) == 0) {
              goto LABEL_36;
            }
            v20 += 7;
            BOOL v15 = v21++ >= 9;
            if (v15)
            {
              LODWORD(v22) = 0;
              goto LABEL_38;
            }
          }
          v3[*v6] = 1;
LABEL_36:
          if (v3[*v6]) {
            LODWORD(v22) = 0;
          }
LABEL_38:
          *(_DWORD *)(a1 + 24) = v22;
        }
        else if ((v10 >> 3) == 1)
        {
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_42;
          }
          unsigned __int8 v18 = objc_alloc_init(GEOTraitsTransitScheduleTimeRange);
          if (!GEOTraitsTransitScheduleTimeRangeReadAllFrom((uint64_t)v18, v3))
          {

            goto LABEL_42;
          }
          PBReaderRecallMark();
          int v19 = *(void **)(a1 + 16);
          *(void *)(a1 + 16) = v18;
        }
        else
        {
          if (!*(void *)(a1 + 8))
          {
            id v27 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            uint64_t v28 = *(void **)(a1 + 8);
            *(void *)(a1 + 8) = v27;
          }
          if (!PBUnknownFieldAdd()) {
            goto LABEL_42;
          }
        }
      }
      while (*(void *)&v3[*v4] < *(void *)&v3[*v5]);
    }
    BOOL v29 = v3[*v6] == 0;
  }
  else
  {
LABEL_42:
    BOOL v29 = 0;
  }
  objc_sync_exit(v3);

  return v29;
}

void sub_188FF5730(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTraitsTransitScheduleTimeRangeReadAllFrom(uint64_t a1, void *a2)
{
  unint64_t v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    id v4 = (int *)MEMORY[0x1E4F940E8];
    BOOL v5 = (int *)MEMORY[0x1E4F940E0];
    uint64_t v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
      while (1)
      {
        if (v3[*v6]) {
          goto LABEL_37;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          if (v9++ >= 9)
          {
            unint64_t v10 = 0;
            int v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v16 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v16 || (v10 & 7) == 4) {
          goto LABEL_37;
        }
        if ((v10 >> 3) == 2) {
          break;
        }
        if ((v10 >> 3) == 1)
        {
          *(unsigned char *)(a1 + 32) |= 2u;
          uint64_t v18 = *v4;
          unint64_t v19 = *(void *)&v3[v18];
          if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(void *)&v3[*v5])
          {
            uint64_t v20 = *(void *)(*(void *)&v3[*v7] + v19);
            *(void *)&v3[v18] = v19 + 8;
          }
          else
          {
            v3[*v6] = 1;
            uint64_t v20 = 0;
          }
          unint64_t v25 = &OBJC_IVAR___GEOTraitsTransitScheduleTimeRange__startTime;
LABEL_35:
          *(void *)(a1 + *v25) = v20;
          goto LABEL_36;
        }
        if (!*(void *)(a1 + 8))
        {
          id v23 = objc_alloc_init(MEMORY[0x1E4F940B0]);
          uint64_t v24 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = v23;
        }
        if ((PBUnknownFieldAdd() & 1) == 0) {
          goto LABEL_38;
        }
LABEL_36:
        if (*(void *)&v3[*v4] >= *(void *)&v3[*v5]) {
          goto LABEL_37;
        }
      }
      *(unsigned char *)(a1 + 32) |= 1u;
      uint64_t v21 = *v4;
      unint64_t v22 = *(void *)&v3[v21];
      if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(void *)&v3[*v5])
      {
        uint64_t v20 = *(void *)(*(void *)&v3[*v7] + v22);
        *(void *)&v3[v21] = v22 + 8;
      }
      else
      {
        v3[*v6] = 1;
        uint64_t v20 = 0;
      }
      unint64_t v25 = &OBJC_IVAR___GEOTraitsTransitScheduleTimeRange__duration;
      goto LABEL_35;
    }
LABEL_37:
    BOOL v26 = v3[*v6] == 0;
  }
  else
  {
LABEL_38:
    BOOL v26 = 0;
  }
  objc_sync_exit(v3);

  return v26;
}

void sub_188FF59E4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188FF5B7C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOETARequestReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 292))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOETARequestReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)unint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 296));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 288) = [v8 position];
  *(_DWORD *)(a1 + 292) = [v8 length];
  if (a3) {
    unsigned int v9 = (int *)&GEOETARequestReadAllFrom_recursiveTag;
  }
  else {
    unsigned int v9 = (int *)&GEOETARequestReadAllFrom_initialTag;
  }
  uint64_t Specified = GEOETARequestReadSpecified(a1, (uint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOETARequestCallReadAllRecursiveWithoutSynchronized((id *)a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 296));
  return Specified;
}

void sub_188FF5D18(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOETARequestReadSpecified(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 296));
  uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 292);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 288)];
  uint64_t v7 = v6;
  uint64_t v8 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  unint64_t v13 = *(void *)(a1 + 320);
  uint32x4_t v14 = (uint32x4_t)vdupq_n_s32(v13);
  v15.i64[0] = 0x100000001;
  v15.i64[1] = 0x100000001;
  uint64x2_t v16 = (uint64x2_t)vdupq_n_s64(v13);
  *(int32x2_t *)v16.i8 = vadd_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)vmovn_s64((int64x2_t)vshlq_u64(v16, (uint64x2_t)xmmword_18A6373C0)), (int8x8_t)0x100000001), (int32x2_t)vand_s8((int8x8_t)vmovn_s64((int64x2_t)vshlq_u64(v16, (uint64x2_t)xmmword_18A6415E0)), (int8x8_t)0x100000001)), vadd_s32((int32x2_t)vand_s8((int8x8_t)vmovn_s64((int64x2_t)vshlq_u64(v16, (uint64x2_t)xmmword_18A6415F0)), (int8x8_t)0x100000001), (int32x2_t)vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v14.i8, (uint32x2_t)0xFFFFFFF3FFFFFFE2), (int8x8_t)0x100000001)));
  unsigned int v17 = vaddvq_s32(vaddq_s32(vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_18A6415B0), v15), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_18A6415C0), v15)), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_18A6415D0), v15)))+ ((v13 >> 39) & 1)+ ((v13 >> 40) & 1)+ ((v13 >> 18) & 1)+ ((v13 >> 36) & 1)+ ((v13 >> 17) & 1)+ (BYTE3(v13) & 1)+ ((v13 >> 14) & 1)+ vadd_s32(*(int32x2_t *)v16.i8, vdup_lane_s32(*(int32x2_t *)v16.i8, 1)).u32[0]+ (v13 >> 31);
  while (2)
  {
    uint64_t v18 = 1;
    uint64_t v19 = 1;
    uint64_t v20 = 1;
    switch(a3[v8])
    {
      case -4:
        ++v17;
        goto LABEL_8;
      case -3:
        char v9 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v19 = v11;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v21 = v17 > 0x14;
        char v134 = v21 & ~(_BYTE)v12 | v10;
        char v135 = v21 | v12 | v134;
        if (((v21 | v12) | v9)) {
          unint64_t v22 = 0;
        }
        else {
          unint64_t v22 = a3;
        }
        char v136 = (v22 == 0) | v21 | v12;
        char v137 = v21 | v12;
        id v23 = (int *)MEMORY[0x1E4F940E8];
        uint64_t v24 = (int *)MEMORY[0x1E4F940C8];
        unint64_t v25 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v17;
LABEL_7:
        uint64_t v18 = v10;
LABEL_8:
        uint64_t v19 = v11;
        uint64_t v20 = v12;
LABEL_10:
        ++v8;
        uint64_t v10 = v18;
        uint64_t v11 = v19;
        uint64_t v12 = v20;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v23) >= *(void *)(v3 + *v7) || *(unsigned char *)(v3 + *v24)) {
      goto LABEL_372;
    }
    char v26 = 0;
    unsigned int v27 = 0;
    unint64_t v28 = 0;
    while (1)
    {
      uint64_t v29 = *v23;
      uint64_t v30 = *(void *)(v3 + v29);
      unint64_t v31 = v30 + 1;
      if (v30 == -1 || v31 > *(void *)(v3 + *v7)) {
        break;
      }
      char v32 = *(unsigned char *)(*(void *)(v3 + *v25) + v30);
      *(void *)(v3 + v29) = v31;
      v28 |= (unint64_t)(v32 & 0x7F) << v26;
      if ((v32 & 0x80) == 0) {
        goto LABEL_25;
      }
      v26 += 7;
      BOOL v33 = v27++ >= 9;
      if (v33)
      {
        unint64_t v28 = 0;
        int v34 = *(unsigned __int8 *)(v3 + *v24);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v24) = 1;
LABEL_25:
    int v34 = *(unsigned __int8 *)(v3 + *v24);
    if (*(unsigned char *)(v3 + *v24)) {
      unint64_t v28 = 0;
    }
LABEL_27:
    if (v34 || (v28 & 7) == 4)
    {
LABEL_372:
      int v133 = 1;
      goto LABEL_373;
    }
    unint64_t v36 = v28 >> 3;
    BOOL v37 = v137;
    if ((v136 & 1) == 0)
    {
      uint64_t v38 = v22;
      do
      {
        int v40 = *v38++;
        int v39 = v40;
        BOOL v37 = v40 != 0;
        if (v40) {
          BOOL v41 = v39 == v36;
        }
        else {
          BOOL v41 = 1;
        }
      }
      while (!v41);
    }
    switch((int)v36)
    {
      case 1:
        if ((v9 & 1) == 0) {
          goto LABEL_284;
        }
        char v42 = 0;
        unsigned int v43 = 0;
        uint64_t v44 = 0;
        *(void *)(a1 + 320) |= 0x10uLL;
        while (1)
        {
          uint64_t v45 = *v23;
          uint64_t v46 = *(void *)(v3 + v45);
          unint64_t v47 = v46 + 1;
          if (v46 == -1 || v47 > *(void *)(v3 + *v7)) {
            break;
          }
          char v48 = *(unsigned char *)(*(void *)(v3 + *v25) + v46);
          *(void *)(v3 + v45) = v47;
          v44 |= (unint64_t)(v48 & 0x7F) << v42;
          if ((v48 & 0x80) == 0) {
            goto LABEL_287;
          }
          v42 += 7;
          BOOL v33 = v43++ >= 9;
          if (v33)
          {
            LODWORD(v44) = 0;
            goto LABEL_289;
          }
        }
        *(unsigned char *)(v3 + *v24) = 1;
LABEL_287:
        if (*(unsigned char *)(v3 + *v24)) {
          LODWORD(v44) = 0;
        }
LABEL_289:
        uint64_t v124 = 304;
        goto LABEL_369;
      case 2:
        if ((v9 & 1) == 0) {
          goto LABEL_282;
        }
        if (!PBReaderPlaceMark() || (GEOTimepointReadAllFrom(a1 + 24, v3) & 1) == 0) {
          goto LABEL_419;
        }
        PBReaderRecallMark();
        uint64_t v53 = *(void *)(a1 + 320) | 1;
        goto LABEL_102;
      case 3:
        if (!v37) {
          goto LABEL_284;
        }
        if ((*(unsigned char *)(a1 + 323) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_419;
          }
          uint64_t v127 = *(void *)(a1 + 320) << 34;
          goto LABEL_361;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_419;
        }
        int v49 = objc_alloc_init(GEOWaypoint);
        if (!GEOWaypointReadAllFrom((uint64_t)v49, (void *)v3, v11 & 1)) {
          goto LABEL_418;
        }
        PBReaderRecallMark();
        uint64_t v54 = 184;
        goto LABEL_249;
      case 4:
        if (!v37 || (*(unsigned char *)(a1 + 322) & 0x20) != 0) {
          goto LABEL_282;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_419;
        }
        int v49 = objc_alloc_init(GEOWaypoint);
        if (!GEOWaypointReadAllFrom((uint64_t)v49, (void *)v3, v11 & 1)) {
          goto LABEL_418;
        }
        PBReaderRecallMark();
        -[GEOETARequest _addNoFlagsDestination:](a1, v49);
        goto LABEL_259;
      case 5:
        if ((v9 & 1) == 0) {
          goto LABEL_284;
        }
        char v55 = 0;
        unsigned int v56 = 0;
        uint64_t v57 = 0;
        *(void *)(a1 + 320) |= 0x100uLL;
        while (2)
        {
          uint64_t v58 = *v23;
          uint64_t v59 = *(void *)(v3 + v58);
          unint64_t v60 = v59 + 1;
          if (v59 == -1 || v60 > *(void *)(v3 + *v7))
          {
            *(unsigned char *)(v3 + *v24) = 1;
          }
          else
          {
            char v61 = *(unsigned char *)(*(void *)(v3 + *v25) + v59);
            *(void *)(v3 + v58) = v60;
            v57 |= (unint64_t)(v61 & 0x7F) << v55;
            if (v61 < 0)
            {
              v55 += 7;
              BOOL v33 = v56++ >= 9;
              if (v33)
              {
                uint64_t v57 = 0;
                goto LABEL_293;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v24)) {
          uint64_t v57 = 0;
        }
LABEL_293:
        BOOL v125 = v57 != 0;
        uint64_t v126 = 314;
        goto LABEL_322;
      case 6:
        if ((v9 & 1) == 0) {
          goto LABEL_284;
        }
        char v62 = 0;
        unsigned int v63 = 0;
        uint64_t v64 = 0;
        *(void *)(a1 + 320) |= 0x40uLL;
        while (2)
        {
          uint64_t v65 = *v23;
          uint64_t v66 = *(void *)(v3 + v65);
          unint64_t v67 = v66 + 1;
          if (v66 == -1 || v67 > *(void *)(v3 + *v7))
          {
            *(unsigned char *)(v3 + *v24) = 1;
          }
          else
          {
            char v68 = *(unsigned char *)(*(void *)(v3 + *v25) + v66);
            *(void *)(v3 + v65) = v67;
            v64 |= (unint64_t)(v68 & 0x7F) << v62;
            if (v68 < 0)
            {
              v62 += 7;
              BOOL v33 = v63++ >= 9;
              if (v33)
              {
                uint64_t v64 = 0;
                goto LABEL_297;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v24)) {
          uint64_t v64 = 0;
        }
LABEL_297:
        BOOL v125 = v64 != 0;
        uint64_t v126 = 312;
        goto LABEL_322;
      case 7:
        if ((v9 & 1) == 0) {
          goto LABEL_284;
        }
        char v69 = 0;
        unsigned int v70 = 0;
        uint64_t v71 = 0;
        *(void *)(a1 + 320) |= 0x80uLL;
        while (2)
        {
          uint64_t v72 = *v23;
          uint64_t v73 = *(void *)(v3 + v72);
          unint64_t v74 = v73 + 1;
          if (v73 == -1 || v74 > *(void *)(v3 + *v7))
          {
            *(unsigned char *)(v3 + *v24) = 1;
          }
          else
          {
            char v75 = *(unsigned char *)(*(void *)(v3 + *v25) + v73);
            *(void *)(v3 + v72) = v74;
            v71 |= (unint64_t)(v75 & 0x7F) << v69;
            if (v75 < 0)
            {
              v69 += 7;
              BOOL v33 = v70++ >= 9;
              if (v33)
              {
                uint64_t v71 = 0;
                goto LABEL_301;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v24)) {
          uint64_t v71 = 0;
        }
LABEL_301:
        BOOL v125 = v71 != 0;
        uint64_t v126 = 313;
        goto LABEL_322;
      case 8:
        if ((v9 & 1) == 0) {
          goto LABEL_282;
        }
        if (!PBReaderPlaceMark() || (GEOSessionIDReadAllFrom((void *)(a1 + 48), v3) & 1) == 0) {
          goto LABEL_419;
        }
        PBReaderRecallMark();
        uint64_t v53 = *(void *)(a1 + 320) | 2;
LABEL_102:
        *(void *)(a1 + 320) = v53;
        goto LABEL_362;
      case 9:
        if ((v9 & 1) == 0) {
          goto LABEL_284;
        }
        char v76 = 0;
        unsigned int v77 = 0;
        uint64_t v44 = 0;
        *(void *)(a1 + 320) |= 0x20uLL;
        while (2)
        {
          uint64_t v78 = *v23;
          uint64_t v79 = *(void *)(v3 + v78);
          unint64_t v80 = v79 + 1;
          if (v79 == -1 || v80 > *(void *)(v3 + *v7))
          {
            *(unsigned char *)(v3 + *v24) = 1;
          }
          else
          {
            char v81 = *(unsigned char *)(*(void *)(v3 + *v25) + v79);
            *(void *)(v3 + v78) = v80;
            v44 |= (unint64_t)(v81 & 0x7F) << v76;
            if (v81 < 0)
            {
              v76 += 7;
              BOOL v33 = v77++ >= 9;
              if (v33)
              {
                LODWORD(v44) = 0;
                goto LABEL_305;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v24)) {
          LODWORD(v44) = 0;
        }
LABEL_305:
        uint64_t v124 = 308;
        goto LABEL_369;
      case 10:
        if (!v37) {
          goto LABEL_284;
        }
        if ((*(unsigned char *)(a1 + 321) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_419;
          }
          uint64_t v127 = *(void *)(a1 + 320) << 48;
          goto LABEL_361;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_419;
        }
        int v49 = objc_alloc_init(GEOAdditionalEnabledMarkets);
        if (!GEOAdditionalEnabledMarketsReadAllFrom((uint64_t)v49, (void *)v3, v11 & 1)) {
          goto LABEL_418;
        }
        PBReaderRecallMark();
        uint64_t v54 = 72;
        goto LABEL_249;
      case 11:
        if (!v37) {
          goto LABEL_284;
        }
        if ((*(unsigned char *)(a1 + 323) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_419;
          }
          uint64_t v127 = *(void *)(a1 + 320) << 38;
          goto LABEL_361;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_419;
        }
        int v49 = objc_alloc_init(GEOWaypointTyped);
        if (!GEOWaypointTypedReadAllFrom((uint64_t)v49, (void *)v3, v11 & 1)) {
          goto LABEL_418;
        }
        PBReaderRecallMark();
        uint64_t v54 = 152;
        goto LABEL_249;
      case 12:
        if (!v37 || (*(unsigned char *)(a1 + 322) & 0x10) != 0) {
          goto LABEL_282;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_419;
        }
        int v49 = objc_alloc_init(GEOWaypointTyped);
        if (!GEOWaypointTypedReadAllFrom((uint64_t)v49, (void *)v3, v11 & 1)) {
          goto LABEL_418;
        }
        PBReaderRecallMark();
        -[GEOETARequest _addNoFlagsDestinationWaypointTyped:](a1, v49);
        goto LABEL_259;
      case 13:
        if (!v37) {
          goto LABEL_284;
        }
        if (*(unsigned char *)(a1 + 322))
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_419;
          }
          uint64_t v127 = *(void *)(a1 + 320) << 47;
          goto LABEL_361;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_419;
        }
        int v49 = objc_alloc_init(GEOAutomobileOptions);
        if (!GEOAutomobileOptionsReadAllFrom((uint64_t)v49, (void *)v3, v11 & 1)) {
          goto LABEL_418;
        }
        PBReaderRecallMark();
        uint64_t v54 = 80;
        goto LABEL_249;
      case 14:
        if (!v37) {
          goto LABEL_284;
        }
        if ((*(unsigned char *)(a1 + 324) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_419;
          }
          uint64_t v127 = *(void *)(a1 + 320) << 24;
          goto LABEL_361;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_419;
        }
        int v49 = objc_alloc_init(GEOTransitOptions);
        if (!GEOTransitOptionsReadAllFrom((uint64_t)v49, (void *)v3, v11 & 1)) {
          goto LABEL_418;
        }
        PBReaderRecallMark();
        uint64_t v54 = 272;
        goto LABEL_249;
      case 15:
        if (!v37) {
          goto LABEL_284;
        }
        if (*(unsigned char *)(a1 + 325))
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_419;
          }
          uint64_t v127 = *(void *)(a1 + 320) << 23;
          goto LABEL_361;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_419;
        }
        int v49 = objc_alloc_init(GEOWalkingOptions);
        if (!GEOWalkingOptionsReadAllFrom((uint64_t)v49, (void *)v3, v11 & 1)) {
          goto LABEL_418;
        }
        PBReaderRecallMark();
        uint64_t v54 = 280;
        goto LABEL_249;
      case 16:
        if ((v9 & 1) == 0) {
          goto LABEL_284;
        }
        char v82 = 0;
        unsigned int v83 = 0;
        uint64_t v84 = 0;
        *(void *)(a1 + 320) |= 0x1000uLL;
        while (2)
        {
          uint64_t v85 = *v23;
          uint64_t v86 = *(void *)(v3 + v85);
          unint64_t v87 = v86 + 1;
          if (v86 == -1 || v87 > *(void *)(v3 + *v7))
          {
            *(unsigned char *)(v3 + *v24) = 1;
          }
          else
          {
            char v88 = *(unsigned char *)(*(void *)(v3 + *v25) + v86);
            *(void *)(v3 + v85) = v87;
            v84 |= (unint64_t)(v88 & 0x7F) << v82;
            if (v88 < 0)
            {
              v82 += 7;
              BOOL v33 = v83++ >= 9;
              if (v33)
              {
                uint64_t v84 = 0;
                goto LABEL_309;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v24)) {
          uint64_t v84 = 0;
        }
LABEL_309:
        BOOL v125 = v84 != 0;
        uint64_t v126 = 318;
        goto LABEL_322;
      case 17:
LABEL_53:
        if ((v134 & 1) == 0 || (*(unsigned char *)(a1 + 321) & 0x20) != 0) {
          goto LABEL_284;
        }
        if (!*(void *)(a1 + 16))
        {
          id v50 = objc_alloc_init(MEMORY[0x1E4F940B0]);
          char v51 = *(void **)(a1 + 16);
          *(void *)(a1 + 16) = v50;
        }
        int v52 = PBUnknownFieldAdd();
        uint64_t v24 = (int *)MEMORY[0x1E4F940C8];
        uint64_t v7 = (int *)MEMORY[0x1E4F940E0];
        unint64_t v25 = (int *)MEMORY[0x1E4F940B8];
        if (v52) {
          goto LABEL_363;
        }
        int v133 = 0;
        goto LABEL_374;
      case 18:
        if (!v37) {
          goto LABEL_284;
        }
        if ((*(unsigned char *)(a1 + 322) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_419;
          }
          uint64_t v127 = *(void *)(a1 + 320) << 45;
          goto LABEL_361;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_419;
        }
        int v49 = objc_alloc_init(GEOCommonOptions);
        if (!GEOCommonOptionsReadAllFrom((uint64_t)v49, (void *)v3)) {
          goto LABEL_418;
        }
        PBReaderRecallMark();
        uint64_t v54 = 96;
        goto LABEL_249;
      case 19:
        if (!v37) {
          goto LABEL_284;
        }
        if ((*(unsigned char *)(a1 + 324) & 0x10) == 0)
        {
          uint64_t v89 = PBReaderReadData();
          uint64_t v90 = 248;
          goto LABEL_206;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_419;
        }
        uint64_t v127 = *(void *)(a1 + 320) << 27;
        goto LABEL_361;
      case 20:
        if (!v37) {
          goto LABEL_284;
        }
        if ((*(unsigned char *)(a1 + 323) & 4) == 0)
        {
          uint64_t v89 = PBReaderReadData();
          uint64_t v90 = 160;
          goto LABEL_206;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_419;
        }
        uint64_t v127 = *(void *)(a1 + 320) << 37;
        goto LABEL_361;
      case 21:
        if (!v37 || (*(unsigned char *)(a1 + 323) & 8) != 0) {
          goto LABEL_282;
        }
        PBReaderReadData();
        int v49 = (GEOWaypoint *)objc_claimAutoreleasedReturnValue();
        if (v49) {
          -[GEOETARequest _addNoFlagsOriginalRouteZilchPoints:](a1, v49);
        }
        goto LABEL_259;
      case 22:
        if (!v37 || (*(unsigned char *)(a1 + 322) & 0x40) != 0) {
          goto LABEL_282;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_419;
        }
        int v49 = objc_alloc_init(GEOLocation);
        if (!GEOLocationReadAllFrom((uint64_t)v49, (void *)v3, v11 & 1)) {
          goto LABEL_418;
        }
        PBReaderRecallMark();
        -[GEOETARequest _addNoFlagsDeviceHistoricalLocation:](a1, v49);
        goto LABEL_259;
      case 23:
        if (!v37) {
          goto LABEL_284;
        }
        if ((*(unsigned char *)(a1 + 322) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_419;
          }
          uint64_t v127 = *(void *)(a1 + 320) << 46;
          goto LABEL_361;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_419;
        }
        int v49 = objc_alloc_init(GEOClientCapabilities);
        if (!GEOClientCapabilitiesReadAllFrom((uint64_t)v49, (void *)v3, v11 & 1)) {
          goto LABEL_418;
        }
        PBReaderRecallMark();
        uint64_t v54 = 88;
        goto LABEL_249;
      case 24:
        if (!v37) {
          goto LABEL_284;
        }
        if (*(unsigned char *)(a1 + 323))
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_419;
          }
          uint64_t v127 = *(void *)(a1 + 320) << 39;
          goto LABEL_361;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_419;
        }
        int v49 = objc_alloc_init(GEOLocation);
        if (!GEOLocationReadAllFrom((uint64_t)v49, (void *)v3, v11 & 1)) {
          goto LABEL_418;
        }
        PBReaderRecallMark();
        uint64_t v54 = 144;
        goto LABEL_249;
      case 25:
        if (!v37) {
          goto LABEL_284;
        }
        if ((*(unsigned char *)(a1 + 321) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_419;
          }
          uint64_t v127 = *(void *)(a1 + 320) << 49;
          goto LABEL_361;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_419;
        }
        int v49 = objc_alloc_init(GEOPDABClientDatasetMetadata);
        if (!GEOPDABClientDatasetMetadataReadAllFrom((uint64_t)v49, (void *)v3)) {
          goto LABEL_418;
        }
        PBReaderRecallMark();
        uint64_t v54 = 64;
        goto LABEL_249;
      case 26:
        if ((v9 & 1) == 0) {
          goto LABEL_284;
        }
        char v91 = 0;
        unsigned int v92 = 0;
        uint64_t v93 = 0;
        *(void *)(a1 + 320) |= 0x400uLL;
        while (2)
        {
          uint64_t v94 = *v23;
          uint64_t v95 = *(void *)(v3 + v94);
          unint64_t v96 = v95 + 1;
          if (v95 == -1 || v96 > *(void *)(v3 + *v7))
          {
            *(unsigned char *)(v3 + *v24) = 1;
          }
          else
          {
            char v97 = *(unsigned char *)(*(void *)(v3 + *v25) + v95);
            *(void *)(v3 + v94) = v96;
            v93 |= (unint64_t)(v97 & 0x7F) << v91;
            if (v97 < 0)
            {
              v91 += 7;
              BOOL v33 = v92++ >= 9;
              if (v33)
              {
                uint64_t v93 = 0;
                goto LABEL_313;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v24)) {
          uint64_t v93 = 0;
        }
LABEL_313:
        BOOL v125 = v93 != 0;
        uint64_t v126 = 316;
        goto LABEL_322;
      case 27:
        if ((v9 & 1) == 0) {
          goto LABEL_284;
        }
        char v98 = 0;
        unsigned int v99 = 0;
        uint64_t v100 = 0;
        *(void *)(a1 + 320) |= 0x800uLL;
        while (2)
        {
          uint64_t v101 = *v23;
          uint64_t v102 = *(void *)(v3 + v101);
          unint64_t v103 = v102 + 1;
          if (v102 == -1 || v103 > *(void *)(v3 + *v7))
          {
            *(unsigned char *)(v3 + *v24) = 1;
          }
          else
          {
            char v104 = *(unsigned char *)(*(void *)(v3 + *v25) + v102);
            *(void *)(v3 + v101) = v103;
            v100 |= (unint64_t)(v104 & 0x7F) << v98;
            if (v104 < 0)
            {
              v98 += 7;
              BOOL v33 = v99++ >= 9;
              if (v33)
              {
                uint64_t v100 = 0;
                goto LABEL_317;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v24)) {
          uint64_t v100 = 0;
        }
LABEL_317:
        BOOL v125 = v100 != 0;
        uint64_t v126 = 317;
        goto LABEL_322;
      case 28:
        if (!v37) {
          goto LABEL_284;
        }
        if ((*(unsigned char *)(a1 + 323) & 0x80) == 0)
        {
          uint64_t v89 = PBReaderReadString();
          uint64_t v90 = 200;
          goto LABEL_206;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_419;
        }
        uint64_t v127 = *(void *)(a1 + 320) << 32;
        goto LABEL_361;
      case 29:
        if (!v37) {
          goto LABEL_284;
        }
        if ((*(unsigned char *)(a1 + 324) & 4) == 0)
        {
          uint64_t v89 = PBReaderReadString();
          uint64_t v90 = 224;
LABEL_206:
          char v105 = *(void **)(a1 + v90);
          *(void *)(a1 + v90) = v89;
          goto LABEL_250;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_419;
        }
        uint64_t v127 = *(void *)(a1 + 320) << 29;
        goto LABEL_361;
      case 30:
        if ((v9 & 1) == 0) {
          goto LABEL_284;
        }
        *(void *)(a1 + 320) |= 4uLL;
        uint64_t v106 = *v23;
        unint64_t v107 = *(void *)(v3 + v106);
        if (v107 <= 0xFFFFFFFFFFFFFFF7 && v107 + 8 <= *(void *)(v3 + *v7))
        {
          uint64_t v108 = *(void *)(*(void *)(v3 + *v25) + v107);
          *(void *)(v3 + v106) = v107 + 8;
        }
        else
        {
          *(unsigned char *)(v3 + *v24) = 1;
          uint64_t v108 = 0;
        }
        *(void *)(a1 + 240) = v108;
        goto LABEL_363;
      case 31:
        if (!v37) {
          goto LABEL_284;
        }
        if ((*(unsigned char *)(a1 + 322) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_419;
          }
          uint64_t v127 = *(void *)(a1 + 320) << 44;
          goto LABEL_361;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_419;
        }
        int v49 = objc_alloc_init(GEOCyclingOptions);
        if (!GEOCyclingOptionsReadAllFrom((uint64_t)v49, (void *)v3, v11 & 1)) {
          goto LABEL_418;
        }
        PBReaderRecallMark();
        uint64_t v54 = 104;
        goto LABEL_249;
      case 32:
        if (!v37) {
          goto LABEL_284;
        }
        if ((*(unsigned char *)(a1 + 323) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_419;
          }
          uint64_t v127 = *(void *)(a1 + 320) << 35;
          goto LABEL_361;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_419;
        }
        int v49 = objc_alloc_init(GEOOriginalWaypointRoute);
        if (!GEOOriginalWaypointRouteReadAllFrom((uint64_t)v49, (void *)v3, v11 & 1)) {
          goto LABEL_418;
        }
        PBReaderRecallMark();
        uint64_t v54 = 176;
        goto LABEL_249;
      case 33:
        if ((v9 & 1) == 0) {
          goto LABEL_284;
        }
        char v109 = 0;
        unsigned int v110 = 0;
        uint64_t v111 = 0;
        *(void *)(a1 + 320) |= 0x200uLL;
        while (2)
        {
          uint64_t v112 = *v23;
          uint64_t v113 = *(void *)(v3 + v112);
          unint64_t v114 = v113 + 1;
          if (v113 == -1 || v114 > *(void *)(v3 + *v7))
          {
            *(unsigned char *)(v3 + *v24) = 1;
          }
          else
          {
            char v115 = *(unsigned char *)(*(void *)(v3 + *v25) + v113);
            *(void *)(v3 + v112) = v114;
            v111 |= (unint64_t)(v115 & 0x7F) << v109;
            if (v115 < 0)
            {
              v109 += 7;
              BOOL v33 = v110++ >= 9;
              if (v33)
              {
                uint64_t v111 = 0;
                goto LABEL_321;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v24)) {
          uint64_t v111 = 0;
        }
LABEL_321:
        BOOL v125 = v111 != 0;
        uint64_t v126 = 315;
LABEL_322:
        *(unsigned char *)(a1 + v126) = v125;
        goto LABEL_363;
      case 34:
        if (!v37 || (*(unsigned char *)(a1 + 322) & 0x80) != 0)
        {
LABEL_282:
          char v122 = PBReaderSkipValueWithTag();
          uint64_t v24 = (int *)MEMORY[0x1E4F940C8];
          uint64_t v7 = (int *)MEMORY[0x1E4F940E0];
          unint64_t v25 = (int *)MEMORY[0x1E4F940B8];
          if ((v122 & 1) == 0) {
            goto LABEL_417;
          }
          goto LABEL_363;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_419;
        }
        int v49 = objc_alloc_init(GEOWaypointTyped);
        if (!GEOWaypointTypedReadAllFrom((uint64_t)v49, (void *)v3, v11 & 1)) {
          goto LABEL_418;
        }
        PBReaderRecallMark();
        -[GEOETARequest _addNoFlagsIntermediateWaypointTyped:](a1, v49);
LABEL_259:

        goto LABEL_362;
      case 35:
        if (!v37) {
          goto LABEL_284;
        }
        if ((*(unsigned char *)(a1 + 324) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_419;
          }
          uint64_t v127 = *(void *)(a1 + 320) << 30;
          goto LABEL_361;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_419;
        }
        int v49 = objc_alloc_init(GEORecentLocationHistory);
        if (!GEORecentLocationHistoryReadAllFrom((uint64_t)v49, (void *)v3, v11 & 1)) {
          goto LABEL_418;
        }
        PBReaderRecallMark();
        uint64_t v54 = 216;
        goto LABEL_249;
      case 36:
        if (!v37) {
          goto LABEL_284;
        }
        if (*(unsigned char *)(a1 + 324))
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_419;
          }
          uint64_t v127 = *(void *)(a1 + 320) << 31;
          goto LABEL_361;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_419;
        }
        int v49 = objc_alloc_init(GEOPrivacyMetadata);
        if (!GEOPrivacyMetadataReadAllFrom((uint64_t)v49, (void *)v3)) {
          goto LABEL_418;
        }
        PBReaderRecallMark();
        uint64_t v54 = 208;
        goto LABEL_249;
      case 37:
        if (!v37)
        {
LABEL_284:
          char v123 = PBReaderSkipValueWithTag();
          unint64_t v25 = (int *)MEMORY[0x1E4F940B8];
          uint64_t v7 = (int *)MEMORY[0x1E4F940E0];
          uint64_t v24 = (int *)MEMORY[0x1E4F940C8];
          if ((v123 & 1) == 0)
          {
LABEL_417:
            int v133 = 0;
            goto LABEL_373;
          }
LABEL_363:
          if (!(v135 & 1 | (v8 != 0))) {
            goto LABEL_372;
          }
          continue;
        }
        if ((*(unsigned char *)(a1 + 323) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_419;
          }
          uint64_t v127 = *(void *)(a1 + 320) << 33;
LABEL_361:
          v8 += v127 >> 63;
LABEL_362:
          uint64_t v24 = (int *)MEMORY[0x1E4F940C8];
          uint64_t v7 = (int *)MEMORY[0x1E4F940E0];
          unint64_t v25 = (int *)MEMORY[0x1E4F940B8];
          goto LABEL_363;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_419;
        }
        int v49 = objc_alloc_init(GEOPathComputationOptions);
        if (GEOPathComputationOptionsReadAllFrom((uint64_t)v49, (void *)v3))
        {
          PBReaderRecallMark();
          uint64_t v54 = 192;
LABEL_249:
          char v105 = *(void **)(a1 + v54);
          *(void *)(a1 + v54) = v49;
LABEL_250:

          --v8;
          goto LABEL_362;
        }
LABEL_418:

LABEL_419:
        int v133 = 0;
        uint64_t v24 = (int *)MEMORY[0x1E4F940C8];
LABEL_373:
        if (v134) {
LABEL_374:
        }
          *(void *)(a1 + 320) |= 0x2000uLL;
        if (v137 & 1 | ((v133 & 1) == 0))
        {
          *(void *)(a1 + 320) |= 0x1FFFFFFC000uLL;
          goto LABEL_411;
        }
        if (v22)
        {
          while (1)
          {
            int v130 = *v22++;
            int v129 = v130;
            if (v130 <= 99)
            {
              uint64_t v128 = 0x20000000;
              switch(v129)
              {
                case 0:
                  goto LABEL_411;
                case 3:
                  goto LABEL_408;
                case 4:
                  uint64_t v128 = 0x200000;
                  goto LABEL_408;
                case 10:
                  uint64_t v128 = 0x8000;
                  goto LABEL_408;
                case 11:
                  uint64_t v128 = 0x2000000;
                  goto LABEL_408;
                case 12:
                  uint64_t v128 = 0x100000;
                  goto LABEL_408;
                case 13:
                  uint64_t v128 = 0x10000;
                  goto LABEL_408;
                case 14:
                  uint64_t v128 = 0x8000000000;
                  goto LABEL_408;
                case 15:
                  uint64_t v128 = 0x10000000000;
                  goto LABEL_408;
                case 18:
                  uint64_t v128 = 0x40000;
                  goto LABEL_408;
                case 19:
                  uint64_t v128 = 0x1000000000;
                  goto LABEL_408;
                case 20:
                  uint64_t v128 = 0x4000000;
                  goto LABEL_408;
                case 21:
                  uint64_t v128 = 0x8000000;
                  goto LABEL_408;
                case 22:
                  uint64_t v128 = 0x400000;
                  goto LABEL_408;
                case 23:
                  uint64_t v128 = 0x20000;
                  goto LABEL_408;
                case 24:
                  uint64_t v128 = 0x1000000;
                  goto LABEL_408;
                case 25:
                  uint64_t v128 = 0x4000;
                  goto LABEL_408;
                case 28:
                  uint64_t v128 = 0x80000000;
                  goto LABEL_408;
                case 29:
                  uint64_t v128 = 0x400000000;
                  goto LABEL_408;
                case 31:
                  uint64_t v128 = 0x80000;
                  goto LABEL_408;
                case 32:
                  uint64_t v128 = 0x10000000;
                  goto LABEL_408;
                case 34:
                  uint64_t v128 = 0x800000;
                  goto LABEL_408;
                case 35:
                  uint64_t v128 = 0x200000000;
                  goto LABEL_408;
                case 36:
                  uint64_t v128 = 0x100000000;
                  goto LABEL_408;
                case 37:
                  uint64_t v128 = 0x40000000;
                  goto LABEL_408;
                default:
                  continue;
              }
              goto LABEL_411;
            }
            if (v129 == 100) {
              break;
            }
            if (v129 == 101)
            {
              uint64_t v128 = 0x2000000000;
LABEL_408:
              *(void *)(a1 + 320) |= v128;
            }
            else if (v129 == 102)
            {
              uint64_t v128 = 0x4000000000;
              goto LABEL_408;
            }
          }
          uint64_t v128 = 0x800000000;
          goto LABEL_408;
        }
LABEL_411:
        if (v133) {
          uint64_t v3 = *(unsigned char *)(v3 + *v24) == 0;
        }
        else {
          uint64_t v3 = 0;
        }
        if (v137)
        {
          uint64_t v131 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      default:
        switch((int)v36)
        {
          case 'd':
            if (!v37 || (*(unsigned char *)(a1 + 324) & 8) != 0) {
              goto LABEL_282;
            }
            if ((PBReaderPlaceMark() & 1) == 0) {
              goto LABEL_419;
            }
            int v49 = objc_alloc_init(GEOGeoServiceTag);
            if (!GEOGeoServiceTagReadAllFrom((uint64_t)v49, (void *)v3)) {
              goto LABEL_418;
            }
            PBReaderRecallMark();
            -[GEOETARequest _addNoFlagsServiceTag:](a1, v49);
            goto LABEL_259;
          case 'e':
            if (!v37 || (*(unsigned char *)(a1 + 324) & 0x20) != 0) {
              goto LABEL_282;
            }
            PBReaderReadData();
            int v49 = (GEOWaypoint *)objc_claimAutoreleasedReturnValue();
            if (v49) {
              -[GEOETARequest _addNoFlagsTrafficApiResponses:](a1, v49);
            }
            goto LABEL_259;
          case 'f':
            if (!v37 || (*(unsigned char *)(a1 + 324) & 0x40) != 0) {
              goto LABEL_282;
            }
            PBReaderReadString();
            int v49 = (GEOWaypoint *)objc_claimAutoreleasedReturnValue();
            if (v49) {
              -[GEOETARequest _addNoFlagsTrafficSnapshotIds:](a1, v49);
            }
            goto LABEL_259;
          case 'g':
            if ((v9 & 1) == 0) {
              goto LABEL_284;
            }
            char v116 = 0;
            unsigned int v117 = 0;
            uint64_t v44 = 0;
            *(void *)(a1 + 320) |= 8uLL;
            break;
          default:
            goto LABEL_53;
        }
        while (2)
        {
          uint64_t v118 = *v23;
          uint64_t v119 = *(void *)(v3 + v118);
          unint64_t v120 = v119 + 1;
          if (v119 == -1 || v120 > *(void *)(v3 + *v7))
          {
            *(unsigned char *)(v3 + *v24) = 1;
          }
          else
          {
            char v121 = *(unsigned char *)(*(void *)(v3 + *v25) + v119);
            *(void *)(v3 + v118) = v120;
            v44 |= (unint64_t)(v121 & 0x7F) << v116;
            if (v121 < 0)
            {
              v116 += 7;
              BOOL v33 = v117++ >= 9;
              if (v33)
              {
                LODWORD(v44) = 0;
                goto LABEL_368;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v24)) {
          LODWORD(v44) = 0;
        }
LABEL_368:
        uint64_t v124 = 300;
LABEL_369:
        *(_DWORD *)(a1 + v124) = v44;
        goto LABEL_363;
    }
  }
}

BOOL GEOAPSessionDataReadAllFrom(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    id v4 = (int *)MEMORY[0x1E4F940E8];
    BOOL v5 = (int *)MEMORY[0x1E4F940E0];
    uint64_t v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v3[*v6]) {
          break;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          BOOL v15 = v9++ >= 9;
          if (v15)
          {
            unint64_t v10 = 0;
            int v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v16 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v16 || (v10 & 7) == 4) {
          break;
        }
        switch((v10 >> 3))
        {
          case 1u:
            if (!PBReaderPlaceMark()
              || (GEOSessionIDReadAllFrom((void *)(a1 + 8), (uint64_t)v3) & 1) == 0)
            {
              goto LABEL_89;
            }
            PBReaderRecallMark();
            *(unsigned char *)(a1 + 72) |= 1u;
            continue;
          case 2u:
            *(unsigned char *)(a1 + 72) |= 4u;
            uint64_t v18 = *v4;
            unint64_t v19 = *(void *)&v3[v18];
            if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(void *)&v3[*v5])
            {
              uint64_t v20 = *(void *)(*(void *)&v3[*v7] + v19);
              *(void *)&v3[v18] = v19 + 8;
            }
            else
            {
              v3[*v6] = 1;
              uint64_t v20 = 0;
            }
            uint64_t v57 = 32;
            goto LABEL_86;
          case 3u:
            char v21 = 0;
            unsigned int v22 = 0;
            uint64_t v23 = 0;
            *(unsigned char *)(a1 + 72) |= 0x10u;
            while (2)
            {
              uint64_t v24 = *v4;
              uint64_t v25 = *(void *)&v3[v24];
              unint64_t v26 = v25 + 1;
              if (v25 == -1 || v26 > *(void *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                char v27 = *(unsigned char *)(*(void *)&v3[*v7] + v25);
                *(void *)&v3[v24] = v26;
                v23 |= (unint64_t)(v27 & 0x7F) << v21;
                if (v27 < 0)
                {
                  v21 += 7;
                  BOOL v15 = v22++ >= 9;
                  if (v15)
                  {
                    uint64_t v23 = 0;
                    goto LABEL_66;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6]) {
              uint64_t v23 = 0;
            }
LABEL_66:
            *(void *)(a1 + 56) = v23;
            continue;
          case 4u:
            *(unsigned char *)(a1 + 72) |= 8u;
            uint64_t v28 = *v4;
            unint64_t v29 = *(void *)&v3[v28];
            if (v29 <= 0xFFFFFFFFFFFFFFF7 && v29 + 8 <= *(void *)&v3[*v5])
            {
              uint64_t v20 = *(void *)(*(void *)&v3[*v7] + v29);
              *(void *)&v3[v28] = v29 + 8;
            }
            else
            {
              v3[*v6] = 1;
              uint64_t v20 = 0;
            }
            uint64_t v57 = 40;
            goto LABEL_86;
          case 5u:
            char v30 = 0;
            unsigned int v31 = 0;
            uint64_t v32 = 0;
            *(unsigned char *)(a1 + 72) |= 0x20u;
            while (2)
            {
              uint64_t v33 = *v4;
              uint64_t v34 = *(void *)&v3[v33];
              unint64_t v35 = v34 + 1;
              if (v34 == -1 || v35 > *(void *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                char v36 = *(unsigned char *)(*(void *)&v3[*v7] + v34);
                *(void *)&v3[v33] = v35;
                v32 |= (unint64_t)(v36 & 0x7F) << v30;
                if (v36 < 0)
                {
                  v30 += 7;
                  BOOL v15 = v31++ >= 9;
                  if (v15)
                  {
                    LODWORD(v32) = 0;
                    goto LABEL_70;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6]) {
              LODWORD(v32) = 0;
            }
LABEL_70:
            *(_DWORD *)(a1 + 64) = v32;
            continue;
          case 6u:
            uint64_t v37 = PBReaderReadString();
            uint64_t v38 = *(void **)(a1 + 48);
            *(void *)(a1 + 48) = v37;

            continue;
          case 7u:
            *(unsigned char *)(a1 + 72) |= 2u;
            uint64_t v39 = *v4;
            unint64_t v40 = *(void *)&v3[v39];
            if (v40 <= 0xFFFFFFFFFFFFFFF7 && v40 + 8 <= *(void *)&v3[*v5])
            {
              uint64_t v20 = *(void *)(*(void *)&v3[*v7] + v40);
              *(void *)&v3[v39] = v40 + 8;
            }
            else
            {
              v3[*v6] = 1;
              uint64_t v20 = 0;
            }
            uint64_t v57 = 24;
LABEL_86:
            *(void *)(a1 + v57) = v20;
            continue;
          case 8u:
            char v41 = 0;
            unsigned int v42 = 0;
            uint64_t v43 = 0;
            *(unsigned char *)(a1 + 72) |= 0x80u;
            while (2)
            {
              uint64_t v44 = *v4;
              uint64_t v45 = *(void *)&v3[v44];
              unint64_t v46 = v45 + 1;
              if (v45 == -1 || v46 > *(void *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                char v47 = *(unsigned char *)(*(void *)&v3[*v7] + v45);
                *(void *)&v3[v44] = v46;
                v43 |= (unint64_t)(v47 & 0x7F) << v41;
                if (v47 < 0)
                {
                  v41 += 7;
                  BOOL v15 = v42++ >= 9;
                  if (v15)
                  {
                    uint64_t v43 = 0;
                    goto LABEL_74;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6]) {
              uint64_t v43 = 0;
            }
LABEL_74:
            BOOL v55 = v43 != 0;
            uint64_t v56 = 69;
            goto LABEL_79;
          case 9u:
            char v48 = 0;
            unsigned int v49 = 0;
            uint64_t v50 = 0;
            *(unsigned char *)(a1 + 72) |= 0x40u;
            break;
          default:
            if (!PBReaderSkipValueWithTag()) {
              goto LABEL_89;
            }
            continue;
        }
        while (1)
        {
          uint64_t v51 = *v4;
          uint64_t v52 = *(void *)&v3[v51];
          unint64_t v53 = v52 + 1;
          if (v52 == -1 || v53 > *(void *)&v3[*v5]) {
            break;
          }
          char v54 = *(unsigned char *)(*(void *)&v3[*v7] + v52);
          *(void *)&v3[v51] = v53;
          v50 |= (unint64_t)(v54 & 0x7F) << v48;
          if ((v54 & 0x80) == 0) {
            goto LABEL_76;
          }
          v48 += 7;
          BOOL v15 = v49++ >= 9;
          if (v15)
          {
            uint64_t v50 = 0;
            goto LABEL_78;
          }
        }
        v3[*v6] = 1;
LABEL_76:
        if (v3[*v6]) {
          uint64_t v50 = 0;
        }
LABEL_78:
        BOOL v55 = v50 != 0;
        uint64_t v56 = 68;
LABEL_79:
        *(unsigned char *)(a1 + v56) = v55;
      }
      while (*(void *)&v3[*v4] < *(void *)&v3[*v5]);
    }
    BOOL v58 = v3[*v6] == 0;
  }
  else
  {
LABEL_89:
    BOOL v58 = 0;
  }
  objc_sync_exit(v3);

  return v58;
}

void sub_188FF7ED8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOSessionIDReadAllFrom(void *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  BOOL v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v27 = 0;
        while (1)
        {
          uint64_t v28 = *v3;
          uint64_t v29 = *(void *)(a2 + v28);
          unint64_t v30 = v29 + 1;
          if (v29 == -1 || v30 > *(void *)(a2 + *v4)) {
            break;
          }
          char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
          *(void *)(a2 + v28) = v30;
          v27 |= (unint64_t)(v31 & 0x7F) << v25;
          if ((v31 & 0x80) == 0) {
            goto LABEL_41;
          }
          v25 += 7;
          BOOL v15 = v26++ >= 9;
          if (v15)
          {
            uint64_t v27 = 0;
            goto LABEL_43;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_41:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v27 = 0;
        }
LABEL_43:
        a1[1] = v27;
      }
      else if ((v10 >> 3) == 2)
      {
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        while (1)
        {
          uint64_t v21 = *v3;
          uint64_t v22 = *(void *)(a2 + v21);
          unint64_t v23 = v22 + 1;
          if (v22 == -1 || v23 > *(void *)(a2 + *v4)) {
            break;
          }
          char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v23;
          v20 |= (unint64_t)(v24 & 0x7F) << v18;
          if ((v24 & 0x80) == 0) {
            goto LABEL_37;
          }
          v18 += 7;
          BOOL v15 = v19++ >= 9;
          if (v15)
          {
            uint64_t v20 = 0;
            goto LABEL_39;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_37:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v20 = 0;
        }
LABEL_39:
        *a1 = v20;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

unint64_t GEOWaypointTypedReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 68))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOWaypointTypedReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)unint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 72));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 64) = [v8 position];
  *(_DWORD *)(a1 + 68) = [v8 length];
  if (a3) {
    unsigned int v9 = (int *)&GEOWaypointTypedReadAllFrom_recursiveTag;
  }
  else {
    unsigned int v9 = (int *)&GEOWaypointTypedReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOWaypointTypedReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOWaypointTypedCallReadAllRecursiveWithoutSynchronized(a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 72));
  return Specified;
}

void sub_188FF82E4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOWaypointTypedReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 72));
  uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 68);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 64)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = &OBJC_IVAR___GEOPDRelatedCollectionSection__collectionIds;
  unsigned int v13 = (unsigned __int16)(vaddv_s16((int16x4_t)(*(void *)&vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int16 *)(a1 + 96)), (uint16x4_t)0xFFF6FFF7FFF8FFF5) & 0xFF01FF01FF01FF01))+ ((*(_WORD *)(a1 + 96) >> 7) & 1)+ ((*(_WORD *)(a1 + 96) >> 6) & 1));
  while (2)
  {
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    uint64_t v16 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v13;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v15 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v17 = v13 > 3;
        char v18 = v17 & ~(_BYTE)v11 | v9;
        unsigned __int8 v19 = v17 | v11;
        char v95 = v18;
        char v96 = v19 | v18;
        if ((v19 | v8)) {
          uint64_t v20 = 0;
        }
        else {
          uint64_t v20 = a3;
        }
        uint64_t v21 = (int *)MEMORY[0x1E4F940E8];
        char v97 = (v20 == 0) | v19;
        BOOL v98 = v19;
        uint64_t v22 = (int *)MEMORY[0x1E4F940C8];
        unint64_t v23 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v13;
LABEL_7:
        uint64_t v14 = v9;
LABEL_8:
        uint64_t v15 = v10;
        uint64_t v16 = v11;
LABEL_10:
        ++v7;
        uint64_t v9 = v14;
        uint64_t v10 = v15;
        uint64_t v11 = v16;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v21) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v22)) {
      goto LABEL_160;
    }
    char v24 = 0;
    unsigned int v25 = 0;
    unint64_t v26 = 0;
    while (1)
    {
      uint64_t v27 = *v21;
      uint64_t v28 = *(void *)(v3 + v27);
      unint64_t v29 = v28 + 1;
      if (v28 == -1 || v29 > *(void *)(v3 + *v6)) {
        break;
      }
      char v30 = *(unsigned char *)(*(void *)(v3 + *v23) + v28);
      *(void *)(v3 + v27) = v29;
      v26 |= (unint64_t)(v30 & 0x7F) << v24;
      if ((v30 & 0x80) == 0) {
        goto LABEL_25;
      }
      v24 += 7;
      BOOL v31 = v25++ >= 9;
      if (v31)
      {
        unint64_t v26 = 0;
        int v32 = *(unsigned __int8 *)(v3 + *v22);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v22) = 1;
LABEL_25:
    int v32 = *(unsigned __int8 *)(v3 + *v22);
    if (*(unsigned char *)(v3 + *v22)) {
      unint64_t v26 = 0;
    }
LABEL_27:
    if (v32 || (v26 & 7) == 4)
    {
LABEL_160:
      int v94 = 1;
      goto LABEL_161;
    }
    unint64_t v34 = v26 >> 3;
    BOOL v35 = v98;
    if ((v97 & 1) == 0)
    {
      char v36 = v20;
      do
      {
        int v38 = *v36++;
        int v37 = v38;
        BOOL v35 = v38 != 0;
        if (v38) {
          BOOL v39 = v37 == v34;
        }
        else {
          BOOL v39 = 1;
        }
      }
      while (!v39);
    }
    switch((int)v34)
    {
      case 1:
        if ((v8 & 1) == 0) {
          goto LABEL_119;
        }
        char v40 = 0;
        unsigned int v41 = 0;
        uint64_t v42 = 0;
        *(_WORD *)(a1 + v12[429]) |= 8u;
        while (1)
        {
          uint64_t v43 = *v21;
          uint64_t v44 = *(void *)(v3 + v43);
          unint64_t v45 = v44 + 1;
          if (v44 == -1 || v45 > *(void *)(v3 + *v6)) {
            break;
          }
          char v46 = *(unsigned char *)(*(void *)(v3 + *v23) + v44);
          *(void *)(v3 + v43) = v45;
          v42 |= (unint64_t)(v46 & 0x7F) << v40;
          if ((v46 & 0x80) == 0) {
            goto LABEL_122;
          }
          v40 += 7;
          BOOL v31 = v41++ >= 9;
          if (v31)
          {
            LODWORD(v42) = 0;
            goto LABEL_124;
          }
        }
        *(unsigned char *)(v3 + *v22) = 1;
LABEL_122:
        if (*(unsigned char *)(v3 + *v22)) {
          LODWORD(v42) = 0;
        }
LABEL_124:
        uint64_t v86 = 88;
        goto LABEL_146;
      case 2:
        if (!v35) {
          goto LABEL_119;
        }
        if ((*(_WORD *)(a1 + v12[429]) & 0x100) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_179;
          }
          uint64_t v12 = &OBJC_IVAR___GEOPDRelatedCollectionSection__collectionIds;
          __int16 v89 = *(_WORD *)(a1 + 96) << 7;
          goto LABEL_157;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_179;
        }
        uint64_t v50 = objc_alloc_init(GEOWaypointID);
        if (!GEOWaypointIDReadAllFrom((uint64_t)v50, (void *)v3, v10 & 1)) {
          goto LABEL_178;
        }
        PBReaderRecallMark();
        uint64_t v51 = 32;
        goto LABEL_102;
      case 3:
        if (!v35) {
          goto LABEL_119;
        }
        if ((*(_WORD *)(a1 + v12[429]) & 0x800) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_179;
          }
          uint64_t v12 = &OBJC_IVAR___GEOPDRelatedCollectionSection__collectionIds;
          __int16 v89 = 16 * *(_WORD *)(a1 + 96);
          goto LABEL_157;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_179;
        }
        uint64_t v50 = objc_alloc_init(GEOWaypointPlace);
        if (!GEOWaypointPlaceReadAllFrom((uint64_t)v50, (void *)v3, v10 & 1)) {
          goto LABEL_178;
        }
        PBReaderRecallMark();
        uint64_t v51 = 56;
        goto LABEL_102;
      case 4:
        if (!v35) {
          goto LABEL_119;
        }
        if ((*(_WORD *)(a1 + v12[429]) & 0x200) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_179;
          }
          uint64_t v12 = &OBJC_IVAR___GEOPDRelatedCollectionSection__collectionIds;
          __int16 v89 = *(_WORD *)(a1 + 96) << 6;
          goto LABEL_157;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_179;
        }
        uint64_t v50 = objc_alloc_init(GEOWaypointLocation);
        if (!GEOWaypointLocationReadAllFrom((uint64_t)v50, (void *)v3, v10 & 1)) {
          goto LABEL_178;
        }
        PBReaderRecallMark();
        uint64_t v51 = 40;
        goto LABEL_102;
      case 5:
        if ((v8 & 1) == 0) {
          goto LABEL_119;
        }
        char v52 = 0;
        unsigned int v53 = 0;
        uint64_t v54 = 0;
        *(_WORD *)(a1 + v12[429]) |= 0x10u;
        while (2)
        {
          uint64_t v55 = *v21;
          uint64_t v56 = *(void *)(v3 + v55);
          unint64_t v57 = v56 + 1;
          if (v56 == -1 || v57 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v22) = 1;
          }
          else
          {
            char v58 = *(unsigned char *)(*(void *)(v3 + *v23) + v56);
            *(void *)(v3 + v55) = v57;
            v54 |= (unint64_t)(v58 & 0x7F) << v52;
            if (v58 < 0)
            {
              v52 += 7;
              BOOL v31 = v53++ >= 9;
              if (v31)
              {
                uint64_t v54 = 0;
                goto LABEL_128;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v22)) {
          uint64_t v54 = 0;
        }
LABEL_128:
        BOOL v87 = v54 != 0;
        uint64_t v88 = 92;
        goto LABEL_133;
      case 6:
        if ((v8 & 1) == 0) {
          goto LABEL_119;
        }
        char v59 = 0;
        unsigned int v60 = 0;
        uint64_t v61 = 0;
        *(_WORD *)(a1 + v12[429]) |= 0x20u;
        while (2)
        {
          uint64_t v62 = *v21;
          uint64_t v63 = *(void *)(v3 + v62);
          unint64_t v64 = v63 + 1;
          if (v63 == -1 || v64 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v22) = 1;
          }
          else
          {
            char v65 = *(unsigned char *)(*(void *)(v3 + *v23) + v63);
            *(void *)(v3 + v62) = v64;
            v61 |= (unint64_t)(v65 & 0x7F) << v59;
            if (v65 < 0)
            {
              v59 += 7;
              BOOL v31 = v60++ >= 9;
              if (v31)
              {
                uint64_t v61 = 0;
                goto LABEL_132;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v22)) {
          uint64_t v61 = 0;
        }
LABEL_132:
        BOOL v87 = v61 != 0;
        uint64_t v88 = 93;
LABEL_133:
        *(unsigned char *)(a1 + v88) = v87;
        goto LABEL_159;
      case 7:
        if ((v8 & 1) == 0) {
          goto LABEL_119;
        }
        char v66 = 0;
        unsigned int v67 = 0;
        uint64_t v42 = 0;
        *(_WORD *)(a1 + v12[429]) |= 4u;
        while (2)
        {
          uint64_t v68 = *v21;
          uint64_t v69 = *(void *)(v3 + v68);
          unint64_t v70 = v69 + 1;
          if (v69 == -1 || v70 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v22) = 1;
          }
          else
          {
            char v71 = *(unsigned char *)(*(void *)(v3 + *v23) + v69);
            *(void *)(v3 + v68) = v70;
            v42 |= (unint64_t)(v71 & 0x7F) << v66;
            if (v71 < 0)
            {
              v66 += 7;
              BOOL v31 = v67++ >= 9;
              if (v31)
              {
                LODWORD(v42) = 0;
                goto LABEL_137;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v22)) {
          LODWORD(v42) = 0;
        }
LABEL_137:
        uint64_t v86 = 84;
        goto LABEL_146;
      case 8:
        if (!v35) {
          goto LABEL_119;
        }
        if ((*(_WORD *)(a1 + v12[429]) & 0x400) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_179;
          }
          uint64_t v12 = &OBJC_IVAR___GEOPDRelatedCollectionSection__collectionIds;
          __int16 v89 = 32 * *(_WORD *)(a1 + 96);
          goto LABEL_157;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_179;
        }
        uint64_t v50 = objc_alloc_init(GEOWaypointNameProperties);
        if (!GEOWaypointNamePropertiesReadAllFrom((uint64_t)v50, (void *)v3)) {
          goto LABEL_178;
        }
        PBReaderRecallMark();
        uint64_t v51 = 48;
        goto LABEL_102;
      case 9:
        if (!v35) {
          goto LABEL_119;
        }
        if ((*(_WORD *)(a1 + v12[429]) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_179;
          }
          uint64_t v12 = &OBJC_IVAR___GEOPDRelatedCollectionSection__collectionIds;
          __int16 v89 = *(_WORD *)(a1 + 96) << 8;
LABEL_157:
          v7 += v89 >> 15;
LABEL_158:
          uint64_t v22 = (int *)MEMORY[0x1E4F940C8];
          unint64_t v23 = (int *)MEMORY[0x1E4F940B8];
LABEL_159:
          if (!(v96 & 1 | (v7 != 0))) {
            goto LABEL_160;
          }
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_179;
        }
        uint64_t v50 = objc_alloc_init(GEOWaypointUUID);
        if (GEOWaypointUUIDReadAllFrom((uint64_t)v50, (void *)v3))
        {
          PBReaderRecallMark();
          uint64_t v51 = 24;
LABEL_102:
          uint64_t v72 = *(void **)(a1 + v51);
          *(void *)(a1 + v51) = v50;

          --v7;
          uint64_t v12 = &OBJC_IVAR___GEOPDRelatedCollectionSection__collectionIds;
          goto LABEL_158;
        }
LABEL_178:

LABEL_179:
        int v94 = 0;
        uint64_t v12 = &OBJC_IVAR___GEOPDRelatedCollectionSection__collectionIds;
        uint64_t v22 = (int *)MEMORY[0x1E4F940C8];
LABEL_161:
        if (v95) {
LABEL_162:
        }
          *(_WORD *)(a1 + v12[429]) |= 0x40u;
        if (v98 || (v94 & 1) == 0)
        {
          *(_WORD *)(a1 + v12[429]) |= 0x100u;
          *(_WORD *)(a1 + v12[429]) |= 0x800u;
          *(_WORD *)(a1 + v12[429]) |= 0x200u;
          *(_WORD *)(a1 + v12[429]) |= 0x400u;
          *(_WORD *)(a1 + v12[429]) |= 0x80u;
        }
        else if (v20)
        {
          while (1)
          {
            int v90 = *v20++;
            __int16 v91 = 256;
            switch(v90)
            {
              case 0:
                goto LABEL_172;
              case 2:
                goto LABEL_171;
              case 3:
                __int16 v91 = 2048;
                goto LABEL_171;
              case 4:
                __int16 v91 = 512;
                goto LABEL_171;
              case 8:
                __int16 v91 = 1024;
                goto LABEL_171;
              case 9:
                __int16 v91 = 128;
LABEL_171:
                *(_WORD *)(a1 + v12[429]) |= v91;
                break;
              default:
                continue;
            }
          }
        }
LABEL_172:
        if (v94) {
          unint64_t v3 = *(unsigned char *)(v3 + *v22) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v98)
        {
          unsigned int v92 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      case 10:
        if ((v8 & 1) == 0) {
          goto LABEL_119;
        }
        char v73 = 0;
        unsigned int v74 = 0;
        uint64_t v42 = 0;
        *(_WORD *)(a1 + v12[429]) |= 1u;
        while (2)
        {
          uint64_t v75 = *v21;
          uint64_t v76 = *(void *)(v3 + v75);
          unint64_t v77 = v76 + 1;
          if (v76 == -1 || v77 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v22) = 1;
          }
          else
          {
            char v78 = *(unsigned char *)(*(void *)(v3 + *v23) + v76);
            *(void *)(v3 + v75) = v77;
            v42 |= (unint64_t)(v78 & 0x7F) << v73;
            if (v78 < 0)
            {
              v73 += 7;
              BOOL v31 = v74++ >= 9;
              if (v31)
              {
                LODWORD(v42) = 0;
                goto LABEL_141;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v22)) {
          LODWORD(v42) = 0;
        }
LABEL_141:
        uint64_t v86 = 76;
        goto LABEL_146;
      case 11:
        if ((v8 & 1) == 0) {
          goto LABEL_119;
        }
        char v79 = 0;
        unsigned int v80 = 0;
        uint64_t v42 = 0;
        *(_WORD *)(a1 + v12[429]) |= 2u;
        while (2)
        {
          uint64_t v81 = *v21;
          uint64_t v82 = *(void *)(v3 + v81);
          unint64_t v83 = v82 + 1;
          if (v82 == -1 || v83 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v22) = 1;
          }
          else
          {
            char v84 = *(unsigned char *)(*(void *)(v3 + *v23) + v82);
            *(void *)(v3 + v81) = v83;
            v42 |= (unint64_t)(v84 & 0x7F) << v79;
            if (v84 < 0)
            {
              v79 += 7;
              BOOL v31 = v80++ >= 9;
              if (v31)
              {
                LODWORD(v42) = 0;
                goto LABEL_145;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v22)) {
          LODWORD(v42) = 0;
        }
LABEL_145:
        uint64_t v86 = 80;
LABEL_146:
        *(_DWORD *)(a1 + v86) = v42;
        goto LABEL_159;
      default:
        if ((v95 & 1) == 0 || (*(_WORD *)(a1 + v12[429]) & 0x40) != 0)
        {
LABEL_119:
          char v85 = PBReaderSkipValueWithTag();
          unint64_t v23 = (int *)MEMORY[0x1E4F940B8];
          uint64_t v22 = (int *)MEMORY[0x1E4F940C8];
          uint64_t v12 = &OBJC_IVAR___GEOPDRelatedCollectionSection__collectionIds;
          if ((v85 & 1) == 0)
          {
            int v94 = 0;
            goto LABEL_161;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v47 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            char v48 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v47;
          }
          int v49 = PBUnknownFieldAdd();
          uint64_t v12 = &OBJC_IVAR___GEOPDRelatedCollectionSection__collectionIds;
          uint64_t v22 = (int *)MEMORY[0x1E4F940C8];
          unint64_t v23 = (int *)MEMORY[0x1E4F940B8];
          if (!v49)
          {
            int v94 = 0;
            goto LABEL_162;
          }
        }
        goto LABEL_159;
    }
  }
}

uint64_t GEOTimepointReadAllFrom(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  BOOL v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          uint64_t v16 = *v5;
          int v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      uint64_t v16 = *v5;
      int v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(unsigned char *)(a2 + v16)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v17 || (v10 & 7) == 4) {
        break;
      }
      unint64_t v19 = v10 >> 3;
      if ((v10 >> 3) == 4)
      {
        *(unsigned char *)(a1 + 20) |= 1u;
        uint64_t v23 = *v3;
        unint64_t v24 = *(void *)(a2 + v23);
        if (v24 <= 0xFFFFFFFFFFFFFFF7 && v24 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v25 = *(void *)(*(void *)(a2 + *v7) + v24);
          *(void *)(a2 + v23) = v24 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + v16) = 1;
          uint64_t v25 = 0;
        }
        *(void *)a1 = v25;
      }
      else if (v19 == 2)
      {
        char v26 = 0;
        unsigned int v27 = 0;
        uint64_t v28 = 0;
        *(unsigned char *)(a1 + 20) |= 4u;
        while (1)
        {
          uint64_t v29 = *v3;
          uint64_t v30 = *(void *)(a2 + v29);
          unint64_t v31 = v30 + 1;
          if (v30 == -1 || v31 > *(void *)(a2 + *v4)) {
            break;
          }
          char v32 = *(unsigned char *)(*(void *)(a2 + *v7) + v30);
          *(void *)(a2 + v29) = v31;
          v28 |= (unint64_t)(v32 & 0x7F) << v26;
          if ((v32 & 0x80) == 0) {
            goto LABEL_37;
          }
          v26 += 7;
          BOOL v15 = v27++ >= 9;
          if (v15)
          {
            LODWORD(v28) = 0;
            goto LABEL_39;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_37:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v28) = 0;
        }
LABEL_39:
        *(_DWORD *)(a1 + 16) = v28;
      }
      else if (v19 == 1)
      {
        *(unsigned char *)(a1 + 20) |= 2u;
        uint64_t v20 = *v3;
        unint64_t v21 = *(void *)(a2 + v20);
        if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v22 = *(void *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + v16) = 1;
          uint64_t v22 = 0;
        }
        *(void *)(a1 + 8) = v22;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_188FF9808(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188FF9AA4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188FF9B6C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDExploreGuidesReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 44);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 40)];
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  int v12 = ((*(unsigned __int8 *)(a1 + 52) >> 1) & 1)
      + (*(unsigned char *)(a1 + 52) & 1)
      + ((*(unsigned __int8 *)(a1 + 52) >> 2) & 1);
  while (2)
  {
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    switch(a3[v10])
    {
      case -4:
        ++v12;
        uint64_t v13 = v7;
        goto LABEL_8;
      case -3:
        char v9 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v13 = v7;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v16 = v12 != 0;
        char v17 = v16 & ~(_BYTE)v11 | v8;
        unsigned __int8 v18 = v16 | v11;
        char v53 = v17;
        char v54 = v18 | v17;
        if ((v18 | v9)) {
          unint64_t v19 = 0;
        }
        else {
          unint64_t v19 = a3;
        }
        char v55 = (v19 == 0) | v18;
        BOOL v56 = v18;
        uint64_t v20 = (int *)MEMORY[0x1E4F940E8];
        unint64_t v21 = (int *)MEMORY[0x1E4F940C8];
        uint64_t v22 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v12;
LABEL_7:
        uint64_t v13 = v7;
        uint64_t v14 = v8;
LABEL_8:
        uint64_t v15 = v11;
LABEL_10:
        ++v10;
        uint64_t v7 = v13;
        uint64_t v8 = v14;
        uint64_t v11 = v15;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(void *)(v3 + *v20) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v21)) {
      goto LABEL_64;
    }
    char v23 = 0;
    unsigned int v24 = 0;
    unint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = *v20;
      uint64_t v27 = *(void *)(v3 + v26);
      unint64_t v28 = v27 + 1;
      if (v27 == -1 || v28 > *(void *)(v3 + *v6)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(v3 + *v22) + v27);
      *(void *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0) {
        goto LABEL_25;
      }
      v23 += 7;
      if (v24++ >= 9)
      {
        unint64_t v25 = 0;
        int v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v21) = 1;
LABEL_25:
    int v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(unsigned char *)(v3 + *v21)) {
      unint64_t v25 = 0;
    }
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_64:
      int v51 = 1;
      goto LABEL_65;
    }
    unint64_t v33 = v25 >> 3;
    BOOL v34 = v56;
    if ((v55 & 1) == 0)
    {
      BOOL v35 = v19;
      do
      {
        int v37 = *v35++;
        int v36 = v37;
        BOOL v34 = v37 != 0;
        if (v37) {
          BOOL v38 = v36 == v33;
        }
        else {
          BOOL v38 = 1;
        }
      }
      while (!v38);
    }
    if (v33 != 2) {
      break;
    }
    if (v34)
    {
      if ((*(unsigned char *)(a1 + 52) & 2) == 0)
      {
        uint64_t v41 = PBReaderReadString();
        char v40 = *(void **)(a1 + 24);
        *(void *)(a1 + 24) = v41;
LABEL_48:

        --v10;
LABEL_62:
        unint64_t v21 = (int *)MEMORY[0x1E4F940C8];
        goto LABEL_63;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        goto LABEL_84;
      }
      char v46 = *(unsigned char *)(a1 + 52) << 6;
LABEL_61:
      v10 += v46 >> 7;
      goto LABEL_62;
    }
LABEL_55:
    char v45 = PBReaderSkipValueWithTag();
    unint64_t v21 = (int *)MEMORY[0x1E4F940C8];
    if ((v45 & 1) == 0)
    {
      int v51 = 0;
LABEL_65:
      char v52 = &OBJC_IVAR___GEOXPCReply__error;
      goto LABEL_66;
    }
LABEL_63:
    if (!(v54 & 1 | (v10 != 0))) {
      goto LABEL_64;
    }
  }
  if (v33 != 1)
  {
    if ((v53 & 1) != 0 && (*(unsigned char *)(a1 + 52) & 1) == 0)
    {
      if (!*(void *)(a1 + 16))
      {
        id v42 = objc_alloc_init(MEMORY[0x1E4F940B0]);
        uint64_t v43 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v42;
      }
      int v44 = PBUnknownFieldAdd();
      unint64_t v21 = (int *)MEMORY[0x1E4F940C8];
      if (!v44)
      {
        int v51 = 0;
        char v52 = &OBJC_IVAR___GEOXPCReply__error;
        goto LABEL_67;
      }
      goto LABEL_63;
    }
    goto LABEL_55;
  }
  if (!v34) {
    goto LABEL_55;
  }
  if ((*(unsigned char *)(a1 + 52) & 4) != 0)
  {
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      goto LABEL_84;
    }
    char v46 = 32 * *(unsigned char *)(a1 + 52);
    goto LABEL_61;
  }
  if ((PBReaderPlaceMark() & 1) == 0) {
    goto LABEL_84;
  }
  BOOL v39 = objc_alloc_init(GEOPDGuidesLocationEntry);
  if (GEOPDGuidesLocationEntryReadAllFrom((uint64_t)v39, (void *)v3, v7 & 1))
  {
    PBReaderRecallMark();
    char v40 = *(void **)(a1 + 32);
    *(void *)(a1 + 32) = v39;
    goto LABEL_48;
  }

LABEL_84:
  int v51 = 0;
  char v52 = &OBJC_IVAR___GEOXPCReply__error;
  unint64_t v21 = (int *)MEMORY[0x1E4F940C8];
LABEL_66:
  if ((v53 & 1) == 0) {
    goto LABEL_68;
  }
LABEL_67:
  *(unsigned char *)(a1 + v52[980]) |= 1u;
LABEL_68:
  if (v56 || (v51 & 1) == 0)
  {
    *(unsigned char *)(a1 + v52[980]) |= 4u;
    *(unsigned char *)(a1 + v52[980]) |= 2u;
    goto LABEL_77;
  }
  if (v19)
  {
    while (2)
    {
      while (1)
      {
        int v48 = *v19++;
        int v47 = v48;
        if (v48 == 1) {
          break;
        }
        if (v47 == 2) {
          goto LABEL_76;
        }
        if (!v47) {
          goto LABEL_77;
        }
      }
      LOBYTE(v47) = 4;
LABEL_76:
      *(unsigned char *)(a1 + v52[980]) |= v47;
      continue;
    }
  }
LABEL_77:
  if (v51) {
    unint64_t v3 = *(unsigned char *)(v3 + *v21) == 0;
  }
  else {
    unint64_t v3 = 0;
  }
  if (v56)
  {
    int v49 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  return v3;
}

unint64_t GEOPDGuidesLocationEntryReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 84))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOPDGuidesLocationEntryReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 88));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 80) = [v8 position];
  *(_DWORD *)(a1 + 84) = [v8 length];
  if (a3) {
    char v9 = (int *)&GEOPDGuidesLocationEntryReadAllFrom_recursiveTag;
  }
  else {
    char v9 = (int *)&GEOPDGuidesLocationEntryReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOPDGuidesLocationEntryReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOPDGuidesLocationEntryCallReadAllRecursiveWithoutSynchronized(a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 88));
  return Specified;
}

void sub_188FFA23C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDGuidesLocationEntryReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 88));
  uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 84);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 80)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unsigned int v12 = (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int16 *)(a1 + 100)), (uint16x4_t)0xFFFCFFFBFFFAFFF9), (int8x8_t)0x1000100010001))+ ((*(_WORD *)(a1 + 100) >> 3) & 1)+ ((*(_WORD *)(a1 + 100) >> 2) & 1));
  while (2)
  {
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v16 = v12 > 3;
        char v17 = v16 & ~(_BYTE)v11 | v9;
        char v18 = v16 | v11;
        if (((v16 | v11) | v8)) {
          unint64_t v19 = 0;
        }
        else {
          unint64_t v19 = a3;
        }
        uint64_t v20 = (int *)MEMORY[0x1E4F940E8];
        int v90 = 1;
        unint64_t v21 = (int *)MEMORY[0x1E4F940C8];
        char v22 = v17;
        if (*(void *)(v3 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(v3 + *v6)) {
          goto LABEL_138;
        }
        char v88 = v17;
        char v91 = v18 | v17;
        char v92 = (v19 == 0) | v18;
        char v23 = (int *)MEMORY[0x1E4F940B8];
        char v89 = v18;
        break;
      default:
        ++v12;
LABEL_7:
        uint64_t v13 = v9;
LABEL_8:
        uint64_t v14 = v10;
        uint64_t v15 = v11;
LABEL_10:
        ++v7;
        uint64_t v9 = v13;
        uint64_t v10 = v14;
        uint64_t v11 = v15;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(unsigned char *)(v3 + *v21)) {
      goto LABEL_136;
    }
    char v24 = 0;
    unsigned int v25 = 0;
    unint64_t v26 = 0;
    while (1)
    {
      uint64_t v27 = *v20;
      uint64_t v28 = *(void *)(v3 + v27);
      unint64_t v29 = v28 + 1;
      if (v28 == -1 || v29 > *(void *)(v3 + *v6)) {
        break;
      }
      char v30 = *(unsigned char *)(*(void *)(v3 + *v23) + v28);
      *(void *)(v3 + v27) = v29;
      v26 |= (unint64_t)(v30 & 0x7F) << v24;
      if ((v30 & 0x80) == 0) {
        goto LABEL_25;
      }
      v24 += 7;
      BOOL v31 = v25++ >= 9;
      if (v31)
      {
        unint64_t v26 = 0;
        int v32 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v21) = 1;
LABEL_25:
    int v32 = *(unsigned __int8 *)(v3 + *v21);
    if (*(unsigned char *)(v3 + *v21)) {
      unint64_t v26 = 0;
    }
LABEL_27:
    int v33 = v26 & 7;
    if (v32 || v33 == 4)
    {
LABEL_136:
      int v90 = 1;
      goto LABEL_137;
    }
    BOOL v35 = v21;
    unint64_t v36 = v26 >> 3;
    BOOL v37 = v18;
    if ((v92 & 1) == 0)
    {
      BOOL v38 = v19;
      do
      {
        int v40 = *v38++;
        int v39 = v40;
        BOOL v37 = v40 != 0;
        if (v40) {
          BOOL v41 = v39 == v36;
        }
        else {
          BOOL v41 = 1;
        }
      }
      while (!v41);
    }
    switch((int)v36)
    {
      case 1:
        unint64_t v21 = v35;
        if (!v37) {
          goto LABEL_99;
        }
        uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
        if ((*(_WORD *)(a1 + 100) & 0x40) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_156;
          }
          id v42 = objc_alloc_init(GEOPDMapsIdentifier);
          if (GEOPDMapsIdentifierReadAllFrom((uint64_t)v42, (void *)v3))
          {
            PBReaderRecallMark();
            uint64_t v43 = 64;
            goto LABEL_71;
          }
          goto LABEL_155;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_156;
        }
        __int16 v74 = *(_WORD *)(a1 + 100) << 9;
        goto LABEL_119;
      case 2:
        unint64_t v21 = v35;
        if ((v8 & 1) == 0) {
          goto LABEL_99;
        }
        char v47 = 0;
        unsigned int v48 = 0;
        uint64_t v49 = 0;
        *(_WORD *)(a1 + 100) |= 1u;
        uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
        while (2)
        {
          uint64_t v50 = *v20;
          uint64_t v51 = *(void *)(v3 + v50);
          unint64_t v52 = v51 + 1;
          if (v51 == -1 || v52 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v21) = 1;
          }
          else
          {
            char v53 = *(unsigned char *)(*(void *)(v3 + *v23) + v51);
            *(void *)(v3 + v50) = v52;
            v49 |= (unint64_t)(v53 & 0x7F) << v47;
            if (v53 < 0)
            {
              v47 += 7;
              BOOL v31 = v48++ >= 9;
              if (v31)
              {
                LODWORD(v49) = 0;
                goto LABEL_105;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v21)) {
          LODWORD(v49) = 0;
        }
LABEL_105:
        uint64_t v73 = 92;
        goto LABEL_110;
      case 3:
        unint64_t v21 = v35;
        if ((v8 & 1) == 0) {
          goto LABEL_99;
        }
        char v54 = 0;
        unsigned int v55 = 0;
        uint64_t v49 = 0;
        *(_WORD *)(a1 + 100) |= 2u;
        uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
        while (2)
        {
          uint64_t v56 = *v20;
          uint64_t v57 = *(void *)(v3 + v56);
          unint64_t v58 = v57 + 1;
          if (v57 == -1 || v58 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v21) = 1;
          }
          else
          {
            char v59 = *(unsigned char *)(*(void *)(v3 + *v23) + v57);
            *(void *)(v3 + v56) = v58;
            v49 |= (unint64_t)(v59 & 0x7F) << v54;
            if (v59 < 0)
            {
              v54 += 7;
              BOOL v31 = v55++ >= 9;
              if (v31)
              {
                LODWORD(v49) = 0;
                goto LABEL_109;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v21)) {
          LODWORD(v49) = 0;
        }
LABEL_109:
        uint64_t v73 = 96;
LABEL_110:
        *(_DWORD *)(a1 + v73) = v49;
        goto LABEL_123;
      case 4:
        unint64_t v21 = v35;
        if (!v37) {
          goto LABEL_99;
        }
        uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
        if ((*(_WORD *)(a1 + 100) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_156;
          }
          __int16 v74 = *(_WORD *)(a1 + 100) << 8;
          goto LABEL_119;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_156;
        }
        id v42 = objc_alloc_init(GEOPDGuidesLocationEntryTypeWorldWide);
        if (!GEOPDGuidesLocationEntryTypeWorldWideReadAllFrom((uint64_t)v42, (void *)v3, v10 & 1)) {
          goto LABEL_155;
        }
        PBReaderRecallMark();
        uint64_t v43 = 72;
LABEL_71:
        unsigned int v60 = *(void **)(a1 + v43);
        *(void *)(a1 + v43) = v42;

        --v7;
        goto LABEL_120;
      case 5:
        unint64_t v21 = v35;
        if (!v37) {
          goto LABEL_99;
        }
        if ((*(_WORD *)(a1 + 100) & 0x20) != 0)
        {
          char v75 = PBReaderSkipValueWithTag();
          uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
          if ((v75 & 1) == 0) {
            goto LABEL_156;
          }
          __int16 v74 = *(_WORD *)(a1 + 100) << 10;
          goto LABEL_119;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_156;
        }
        id v42 = objc_alloc_init(GEOMapRegion);
        if (!GEOMapRegionReadAllFrom((uint64_t)v42, (void *)v3)) {
          goto LABEL_155;
        }
        PBReaderRecallMark();
        uint64_t v61 = 56;
        goto LABEL_82;
      case 6:
        unint64_t v21 = v35;
        if (!v37) {
          goto LABEL_99;
        }
        if ((*(_WORD *)(a1 + 100) & 0x10) != 0)
        {
          char v76 = PBReaderSkipValueWithTag();
          uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
          if ((v76 & 1) == 0) {
            goto LABEL_156;
          }
          __int16 v74 = *(_WORD *)(a1 + 100) << 11;
LABEL_119:
          v7 += v74 >> 15;
LABEL_120:
          char v18 = v89;
LABEL_121:
          uint64_t v20 = (int *)MEMORY[0x1E4F940E8];
LABEL_122:
          char v23 = (int *)MEMORY[0x1E4F940B8];
LABEL_123:
          if (!(v91 & 1 | (v7 != 0)) || *(void *)(v3 + *v20) >= *(void *)(v3 + *v6)) {
            goto LABEL_136;
          }
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_156;
        }
        id v42 = objc_alloc_init(GEOLatLng);
        if (GEOLatLngReadAllFrom((uint64_t)v42, (void *)v3))
        {
          PBReaderRecallMark();
          uint64_t v61 = 48;
LABEL_82:
          uint64_t v62 = *(void **)(a1 + v61);
          *(void *)(a1 + v61) = v42;

          --v7;
          char v18 = v89;
          uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
          goto LABEL_121;
        }
LABEL_155:

LABEL_156:
        int v90 = 0;
        char v18 = v89;
LABEL_137:
        char v22 = v88;
LABEL_138:
        if (v22) {
LABEL_139:
        }
          *(_WORD *)(a1 + 100) |= 4u;
        if (v18 & 1 | ((v90 & 1) == 0))
        {
          *(_WORD *)(a1 + 100) |= 0x40u;
          *(_WORD *)(a1 + 100) |= 0x80u;
          *(_WORD *)(a1 + 100) |= 0x20u;
          *(_WORD *)(a1 + 100) |= 0x10u;
          *(_WORD *)(a1 + 100) |= 8u;
        }
        else if (v19)
        {
          while (1)
          {
            int v84 = *v19++;
            __int16 v85 = 64;
            switch(v84)
            {
              case 0:
                goto LABEL_149;
              case 1:
                goto LABEL_148;
              case 4:
                __int16 v85 = 128;
                goto LABEL_148;
              case 5:
                __int16 v85 = 32;
                goto LABEL_148;
              case 6:
                __int16 v85 = 16;
                goto LABEL_148;
              case 7:
                __int16 v85 = 8;
LABEL_148:
                *(_WORD *)(a1 + 100) |= v85;
                break;
              default:
                continue;
            }
          }
        }
LABEL_149:
        if (v90)
        {
          unint64_t v3 = *(unsigned char *)(v3 + *v21) == 0;
          if ((v18 & 1) == 0) {
            return v3;
          }
LABEL_153:
          uint64_t v86 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        else
        {
          unint64_t v3 = 0;
          if (v18) {
            goto LABEL_153;
          }
        }
        return v3;
      case 7:
        unint64_t v21 = v35;
        if (!v37 || (*(_WORD *)(a1 + 100) & 8) != 0)
        {
LABEL_99:
          char v72 = PBReaderSkipValueWithTag();
          char v23 = (int *)MEMORY[0x1E4F940B8];
          uint64_t v20 = (int *)MEMORY[0x1E4F940E8];
          char v18 = v89;
          goto LABEL_100;
        }
        uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
        if (v33 != 2)
        {
          char v77 = 0;
          unsigned int v78 = 0;
          uint64_t v79 = 0;
          while (1)
          {
            uint64_t v80 = *v20;
            uint64_t v81 = *(void *)(v3 + v80);
            unint64_t v82 = v81 + 1;
            if (v81 == -1 || v82 > *(void *)(v3 + *v6)) {
              break;
            }
            char v83 = *(unsigned char *)(*(void *)(v3 + *v23) + v81);
            *(void *)(v3 + v80) = v82;
            v79 |= (unint64_t)(v83 & 0x7F) << v77;
            if (v83 < 0)
            {
              v77 += 7;
              BOOL v31 = v78++ >= 9;
              if (!v31) {
                continue;
              }
            }
            goto LABEL_135;
          }
          *(unsigned char *)(v3 + *v21) = 1;
LABEL_135:
          PBRepeatedUInt64Add();
          goto LABEL_120;
        }
        if (!PBReaderPlaceMark()) {
          goto LABEL_156;
        }
        while (1)
        {
          uint64_t v63 = (int *)MEMORY[0x1E4F940E8];
          if (*(void *)(v3 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v21)) {
            break;
          }
          char v64 = 0;
          unsigned int v65 = 0;
          uint64_t v66 = 0;
          unsigned int v67 = (int *)MEMORY[0x1E4F940B8];
          while (1)
          {
            uint64_t v68 = *v63;
            uint64_t v69 = *(void *)(v3 + v68);
            unint64_t v70 = v69 + 1;
            if (v69 == -1 || v70 > *(void *)(v3 + *v6)) {
              break;
            }
            char v71 = *(unsigned char *)(*(void *)(v3 + *v67) + v69);
            *(void *)(v3 + v68) = v70;
            v66 |= (unint64_t)(v71 & 0x7F) << v64;
            if (v71 < 0)
            {
              v64 += 7;
              BOOL v31 = v65++ >= 9;
              if (!v31) {
                continue;
              }
            }
            goto LABEL_97;
          }
          *(unsigned char *)(v3 + *v21) = 1;
LABEL_97:
          PBRepeatedUInt64Add();
        }
        PBReaderRecallMark();
        uint64_t v20 = (int *)MEMORY[0x1E4F940E8];
        char v18 = v89;
        goto LABEL_122;
      default:
        if ((v88 & 1) == 0 || (*(_WORD *)(a1 + 100) & 4) != 0)
        {
          char v72 = PBReaderSkipValueWithTag();
          char v23 = (int *)MEMORY[0x1E4F940B8];
          uint64_t v20 = (int *)MEMORY[0x1E4F940E8];
          char v18 = v89;
          unint64_t v21 = v35;
LABEL_100:
          uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
          if ((v72 & 1) == 0)
          {
            int v90 = 0;
            goto LABEL_137;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v44 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            char v45 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v44;
          }
          int v46 = PBUnknownFieldAdd();
          char v18 = v89;
          unint64_t v21 = v35;
          uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
          uint64_t v20 = (int *)MEMORY[0x1E4F940E8];
          char v23 = (int *)MEMORY[0x1E4F940B8];
          if (!v46)
          {
            int v90 = 0;
            goto LABEL_139;
          }
        }
        goto LABEL_123;
    }
  }
}

geo::codec::Allocator *geo::codec::VectorTile::DaVinciReadDebugBlobDealloc(geo::codec::Allocator **this)
{
  int v2 = geo::codec::DaVinciExplicitTextureMappingDataDealloc(this[251], (GeoCodecsDaVinciExplicitTextureMappingData *)*((unsigned __int16 *)this + 1000));
  this[251] = 0;
  *((_WORD *)this + 1000) = 0;
  if (this[253])
  {
    uint64_t v3 = geo::codec::Allocator::instance(v2);
    int v2 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, geo::codec::Allocator *, void))(*(void *)v3 + 40))(v3, this[253], 0);
    this[253] = 0;
  }
  if (this[255])
  {
    uint64_t v4 = geo::codec::Allocator::instance(v2);
    int v2 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, geo::codec::Allocator *, void))(*(void *)v4 + 40))(v4, this[255], 0);
    this[255] = 0;
  }
  if (this[257])
  {
    unsigned int v5 = *((unsigned __int16 *)this + 1024);
    if (*((_WORD *)this + 1024))
    {
      uint64_t v6 = 0;
      unint64_t v7 = 0;
      do
      {
        if (!*((unsigned char *)this[257] + v6 + 24))
        {
          uint64_t v8 = geo::codec::Allocator::instance(v2);
          uint64_t v9 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v8 + 40))(v8, *(void *)((char *)this[257] + v6 + 40), 0);
          uint64_t v10 = geo::codec::Allocator::instance(v9);
          int v2 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v10 + 40))(v10, *(void *)((char *)this[257] + v6 + 32), 0);
          unsigned int v5 = *((unsigned __int16 *)this + 1024);
        }
        ++v7;
        v6 += 64;
      }
      while (v7 < v5);
    }
    uint64_t v11 = geo::codec::Allocator::instance(v2);
    int v2 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, geo::codec::Allocator *, void))(*(void *)v11 + 40))(v11, this[257], 0);
    this[257] = 0;
    *((_WORD *)this + 1024) = 0;
  }
  if (this[258])
  {
    uint64_t v12 = geo::codec::Allocator::instance(v2);
    int v2 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, geo::codec::Allocator *, void))(*(void *)v12 + 40))(v12, this[258], 0);
    this[258] = 0;
  }
  uint64_t v13 = this[272];
  if (v13)
  {
    uint64_t v14 = *((unsigned __int16 *)this + 1084);
    if (*((_WORD *)this + 1084))
    {
      uint64_t v15 = (uint64_t *)((char *)v13 + 8);
      do
      {
        uint64_t v16 = geo::codec::Allocator::instance(v2);
        char v17 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v16 + 40))(v16, *(v15 - 1), 0);
        uint64_t v18 = geo::codec::Allocator::instance(v17);
        uint64_t v19 = *v15;
        v15 += 6;
        int v2 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v18 + 40))(v18, v19, 0);
        --v14;
      }
      while (v14);
    }
    uint64_t v20 = geo::codec::Allocator::instance(v2);
    int v2 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, geo::codec::Allocator *, void))(*(void *)v20 + 40))(v20, v13, 0);
  }
  this[272] = 0;
  *((_WORD *)this + 1084) = 0;
  unint64_t v21 = this[274];
  if (v21)
  {
    uint64_t v22 = *((unsigned __int16 *)this + 1092);
    if (*((_WORD *)this + 1092))
    {
      char v23 = (uint64_t *)((char *)v21 + 8);
      do
      {
        uint64_t v24 = geo::codec::Allocator::instance(v2);
        unsigned int v25 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v24 + 40))(v24, *(v23 - 1), 0);
        uint64_t v26 = geo::codec::Allocator::instance(v25);
        uint64_t v27 = *v23;
        v23 += 6;
        int v2 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v26 + 40))(v26, v27, 0);
        --v22;
      }
      while (v22);
    }
    uint64_t v28 = geo::codec::Allocator::instance(v2);
    int v2 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, geo::codec::Allocator *, void))(*(void *)v28 + 40))(v28, v21, 0);
  }
  this[274] = 0;
  *((_WORD *)this + 1092) = 0;
  if (this[287])
  {
    uint64_t v29 = geo::codec::Allocator::instance(v2);
    int v2 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, geo::codec::Allocator *, void))(*(void *)v29 + 40))(v29, this[287], 0);
    this[287] = 0;
  }
  if (this[289])
  {
    uint64_t v30 = geo::codec::Allocator::instance(v2);
    int v2 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, geo::codec::Allocator *, void))(*(void *)v30 + 40))(v30, this[289], 0);
    this[289] = 0;
  }
  if (this[351])
  {
    uint64_t v31 = geo::codec::Allocator::instance(v2);
    int v2 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, geo::codec::Allocator *, void))(*(void *)v31 + 40))(v31, this[351], 0);
    this[351] = 0;
  }
  if (this[352])
  {
    uint64_t v32 = geo::codec::Allocator::instance(v2);
    int v2 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, geo::codec::Allocator *, void))(*(void *)v32 + 40))(v32, this[352], 0);
    this[352] = 0;
  }
  if (this[353])
  {
    uint64_t v33 = geo::codec::Allocator::instance(v2);
    int v2 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, geo::codec::Allocator *, void))(*(void *)v33 + 40))(v33, this[353], 0);
    this[353] = 0;
  }
  if (this[356])
  {
    if (*((_WORD *)this + 1428))
    {
      uint64_t v34 = 0;
      for (unint64_t i = 0; i < *((unsigned __int16 *)this + 1428); ++i)
      {
        id v42 = this[356];
        if (*((unsigned char *)v42 + v34 + 20) != 1)
        {
          if (!*((unsigned char *)v42 + v34 + 20))
          {
            uint64_t v43 = geo::codec::Allocator::instance(v2);
            int v2 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v43 + 40))(v43, *(void *)((char *)v42 + v34 + 8), 0);
          }
          goto LABEL_38;
        }
        int v44 = *((unsigned __int8 *)v42 + v34 + 26);
        if (v44 == 16)
        {
          int v2 = *(geo::codec::Allocator **)((char *)v42 + v34 + 8);
          if (!v2) {
            goto LABEL_38;
          }
        }
        else
        {
          if (v44 != 8) {
            goto LABEL_38;
          }
          int v2 = *(geo::codec::Allocator **)((char *)v42 + v34 + 8);
          if (!v2) {
            goto LABEL_38;
          }
        }
        int v2 = (geo::codec::Allocator *)MEMORY[0x18C11F560]();
LABEL_38:
        uint64_t v36 = geo::codec::Allocator::instance(v2);
        BOOL v37 = (void *)((char *)v42 + v34);
        BOOL v38 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v36 + 40))(v36, v37[6], 0);
        uint64_t v39 = geo::codec::Allocator::instance(v38);
        int v40 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v39 + 40))(v39, v37[8], 0);
        uint64_t v41 = geo::codec::Allocator::instance(v40);
        int v2 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v41 + 40))(v41, v37[4], 0);
        v34 += 80;
      }
    }
    uint64_t v45 = geo::codec::Allocator::instance(v2);
    int v2 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, geo::codec::Allocator *, void))(*(void *)v45 + 40))(v45, this[356], 0);
    this[356] = 0;
    *((_WORD *)this + 1428) = 0;
  }
  if (this[354])
  {
    if (*((_WORD *)this + 1420))
    {
      uint64_t v46 = 0;
      unint64_t v47 = 0;
      do
      {
        unsigned int v48 = this[354];
        if (*((unsigned char *)v48 + v46 + 16) == 1)
        {
          int v2 = *(geo::codec::Allocator **)((char *)v48 + v46);
          if (v2) {
            int v2 = (geo::codec::Allocator *)MEMORY[0x18C11F560](v2, 0x1000C8077774924);
          }
        }
        else if (!*((unsigned char *)v48 + v46 + 16))
        {
          uint64_t v49 = geo::codec::Allocator::instance(v2);
          int v2 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v49 + 40))(v49, *(void *)((char *)this[354] + v46), 0);
        }
        ++v47;
        v46 += 24;
      }
      while (v47 < *((unsigned __int16 *)this + 1420));
    }
    uint64_t v50 = geo::codec::Allocator::instance(v2);
    (*(void (**)(uint64_t, geo::codec::Allocator *, void))(*(void *)v50 + 40))(v50, this[354], 0);
    this[354] = 0;
    *((_WORD *)this + 1420) = 0;
  }
  geo::codec::DaVinciMaterialSheetsDealloc(this[268], (GeoCodecsDaVinciMaterialSheet *)*((unsigned __int16 *)this + 1068));
  this[268] = 0;
  *((_WORD *)this + 1068) = 0;
  uint64_t result = geo::codec::DaVinciScenesDealloc(this[270], (GeoCodecsDaVinciScene *)*((unsigned __int16 *)this + 1076));
  this[270] = 0;
  *((_WORD *)this + 1076) = 0;
  return result;
}

geo::codec::Allocator *geo::codec::DaVinciExplicitTextureMappingDataDealloc(geo::codec::Allocator *this, GeoCodecsDaVinciExplicitTextureMappingData *a2)
{
  if (this)
  {
    int v2 = this;
    if (a2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = a2;
      do
      {
        unsigned int v5 = (char *)v2 + 16 * v3;
        int v7 = *((unsigned __int16 *)v5 + 2);
        uint64_t v6 = (unsigned __int16 *)(v5 + 4);
        if (v7)
        {
          unsigned int v8 = 0;
          do
          {
            {
              operator new();
            }
            this = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)geo::codec::Allocator::instance(void)::alloc
                                                                                               + 40))(geo::codec::Allocator::instance(void)::alloc, *((void *)v2 + 2 * v3 + 1), 0);
            ++v8;
          }
          while (v8 < *v6);
        }
        ++v3;
      }
      while (v3 != v4);
    }
    uint64_t v9 = *(uint64_t (**)(void))(*(void *)geo::codec::Allocator::instance(this) + 40);
    return (geo::codec::Allocator *)v9();
  }
  return this;
}

void sub_188FFB90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void sub_188FFB93C(_Unwind_Exception *a1)
{
}

geo::codec::Allocator *geo::codec::DaVinciMaterialSheetsDealloc(geo::codec::Allocator *this, GeoCodecsDaVinciMaterialSheet *a2)
{
  uint64_t v32 = this;
  if (this)
  {
    if (a2)
    {
      uint64_t v2 = 0;
      uint64_t v31 = a2;
      do
      {
        uint64_t v33 = v2;
        uint64_t v4 = (char *)v32 + 40 * v2;
        int v6 = v4[12];
        unsigned int v5 = (unsigned __int8 *)(v4 + 12);
        if (v6)
        {
          unint64_t v7 = 0;
          unsigned int v8 = (uint64_t *)((char *)v32 + 40 * v2 + 32);
          uint64_t v9 = 8;
          do
          {
            uint64_t v10 = *v8;
            {
              operator new();
            }
            (*(void (**)(uint64_t, void, void))(*(void *)geo::codec::Allocator::instance(void)::alloc
                                                            + 40))(geo::codec::Allocator::instance(void)::alloc, *(void *)(v10 + v9), 0);
            {
              operator new();
            }
            this = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)geo::codec::Allocator::instance(void)::alloc
                                                                                                + 40))(geo::codec::Allocator::instance(void)::alloc, v10 + v9 - 8, 0);
            ++v7;
            v9 += 16;
          }
          while (v7 < *v5);
        }
        BOOL v35 = (_WORD *)((char *)v32 + 40 * v33 + 10);
        if (*v35)
        {
          unint64_t v11 = 0;
          uint64_t v34 = (uint64_t *)((char *)v32 + 40 * v33 + 24);
          do
          {
            uint64_t v12 = *v34;
            uint64_t v13 = *v34 + 24 * v11;
            if (*(_WORD *)(v13 + 18))
            {
              uint64_t v14 = 0;
              unint64_t v15 = 0;
              do
              {
                uint64_t v16 = *(void *)(v12 + 24 * v11 + 8);
                {
                  operator new();
                }
                (*(void (**)(uint64_t, uint64_t, void))(*(void *)geo::codec::Allocator::instance(void)::alloc
                                                                 + 40))(geo::codec::Allocator::instance(void)::alloc, v16 + v14, 0);
                ++v15;
                v14 += 8;
              }
              while (v15 < *(unsigned __int16 *)(v13 + 18));
            }
            uint64_t v17 = v12 + 24 * v11;
            int v19 = *(unsigned __int16 *)(v17 + 16);
            uint64_t v18 = (unsigned __int16 *)(v17 + 16);
            if (v19)
            {
              uint64_t v20 = 0;
              unint64_t v21 = 0;
              do
              {
                uint64_t v22 = *(void *)v13;
                {
                  operator new();
                }
                (*(void (**)(uint64_t, void, void))(*(void *)geo::codec::Allocator::instance(void)::alloc
                                                                + 40))(geo::codec::Allocator::instance(void)::alloc, *(void *)(v22 + v20 + 8), 0);
                {
                  operator new();
                }
                (*(void (**)(uint64_t, void, void))(*(void *)geo::codec::Allocator::instance(void)::alloc
                                                                + 40))(geo::codec::Allocator::instance(void)::alloc, *(void *)(v22 + v20 + 16), 0);
                {
                  operator new();
                }
                (*(void (**)(uint64_t, void, void))(*(void *)geo::codec::Allocator::instance(void)::alloc
                                                                + 40))(geo::codec::Allocator::instance(void)::alloc, *(void *)(v22 + v20 + 24), 0);
                ++v21;
                v20 += 32;
              }
              while (v21 < *v18);
            }
            {
              operator new();
            }
            this = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)geo::codec::Allocator::instance(void)::alloc
                                                                                                + 40))(geo::codec::Allocator::instance(void)::alloc, v13, 0);
            ++v11;
          }
          while (v11 < (unsigned __int16)*v35);
        }
        char v23 = (uint64_t *)*((void *)v32 + 5 * v33 + 2);
        if (*((_WORD *)v23 + 9))
        {
          uint64_t v24 = 0;
          unint64_t v25 = 0;
          do
          {
            uint64_t v26 = v23[1];
            {
              operator new();
            }
            this = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)geo::codec::Allocator::instance(void)::alloc
                                                                                                + 40))(geo::codec::Allocator::instance(void)::alloc, v26 + v24, 0);
            ++v25;
            v24 += 8;
          }
          while (v25 < *((unsigned __int16 *)v23 + 9));
        }
        if (*((_WORD *)v23 + 8))
        {
          uint64_t v27 = 0;
          unint64_t v28 = 0;
          do
          {
            uint64_t v29 = *v23;
            {
              operator new();
            }
            (*(void (**)(uint64_t, void, void))(*(void *)geo::codec::Allocator::instance(void)::alloc
                                                            + 40))(geo::codec::Allocator::instance(void)::alloc, *(void *)(v29 + v27 + 8), 0);
            {
              operator new();
            }
            (*(void (**)(uint64_t, void, void))(*(void *)geo::codec::Allocator::instance(void)::alloc
                                                            + 40))(geo::codec::Allocator::instance(void)::alloc, *(void *)(v29 + v27 + 16), 0);
            {
              operator new();
            }
            this = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)geo::codec::Allocator::instance(void)::alloc
                                                                                               + 40))(geo::codec::Allocator::instance(void)::alloc, *(void *)(v29 + v27 + 24), 0);
            ++v28;
            v27 += 32;
          }
          while (v28 < *((unsigned __int16 *)v23 + 8));
        }
        uint64_t v3 = geo::codec::Allocator::instance(this);
        this = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t *, void))(*(void *)v3 + 40))(v3, v23, 0);
        uint64_t v2 = v33 + 1;
      }
      while (v33 + 1 != v31);
    }
    uint64_t v30 = *(uint64_t (**)(void))(*(void *)geo::codec::Allocator::instance(this) + 40);
    return (geo::codec::Allocator *)v30();
  }
  return this;
}

void sub_188FFC228(_Unwind_Exception *a1)
{
  MEMORY[0x18C11F580](v1, 0x10F1C40DA10AB66);
  _Unwind_Resume(a1);
}

void sub_188FFC388(_Unwind_Exception *a1)
{
}

geo::codec::Allocator *geo::codec::DaVinciScenesDealloc(geo::codec::Allocator *this, GeoCodecsDaVinciScene *a2)
{
  if (this)
  {
    uint64_t v2 = this;
    if (a2)
    {
      uint64_t v3 = 0;
      uint64_t v33 = a2;
      do
      {
        unsigned int v8 = (char *)v2 + 56 * v3;
        uint64_t v9 = geo::codec::Allocator::instance(this);
        uint64_t v10 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v9 + 40))(v9, *(void *)v8, 0);
        int v12 = *((unsigned __int16 *)v8 + 21);
        unint64_t v11 = (unsigned __int16 *)(v8 + 42);
        if (v12)
        {
          unint64_t v13 = 0;
          uint64_t v14 = 8;
          do
          {
            uint64_t v15 = *((void *)v2 + 7 * v3 + 1);
            {
              operator new();
            }
            uint64_t v10 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)geo::codec::Allocator::instance(void)::alloc
                                                                                              + 40))(geo::codec::Allocator::instance(void)::alloc, *(void *)(v15 + v14), 0);
            ++v13;
            v14 += 16;
          }
          while (v13 < *v11);
        }
        uint64_t v16 = geo::codec::Allocator::instance(v10);
        uint64_t v17 = (char *)v2 + 56 * v3;
        uint64_t v18 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v16 + 40))(v16, *((void *)v17 + 1), 0);
        int v20 = *((unsigned __int16 *)v17 + 23);
        int v19 = (unsigned __int16 *)(v17 + 46);
        if (v20)
        {
          uint64_t v21 = 0;
          unint64_t v22 = 0;
          do
          {
            uint64_t v23 = *((void *)v2 + 7 * v3 + 3);
            {
              operator new();
            }
            uint64_t v18 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)geo::codec::Allocator::instance(void)::alloc
                                                                                              + 40))(geo::codec::Allocator::instance(void)::alloc, *(void *)(v23 + v21), 0);
            ++v22;
            v21 += 16;
          }
          while (v22 < *v19);
        }
        uint64_t v24 = geo::codec::Allocator::instance(v18);
        unint64_t v25 = (char *)v2 + 56 * v3;
        uint64_t v26 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v24 + 40))(v24, *((void *)v25 + 3), 0);
        int v28 = *((unsigned __int16 *)v25 + 22);
        uint64_t v27 = (unsigned __int16 *)(v25 + 44);
        if (v28)
        {
          uint64_t v29 = 0;
          unint64_t v30 = 0;
          do
          {
            uint64_t v31 = *((void *)v2 + 7 * v3 + 2);
            {
              operator new();
            }
            (*(void (**)(uint64_t, void, void))(*(void *)geo::codec::Allocator::instance(void)::alloc
                                                            + 40))(geo::codec::Allocator::instance(void)::alloc, *(void *)(v31 + v29 + 8), 0);
            {
              operator new();
            }
            (*(void (**)(uint64_t, void, void))(*(void *)geo::codec::Allocator::instance(void)::alloc
                                                            + 40))(geo::codec::Allocator::instance(void)::alloc, *(void *)(v31 + v29 + 16), 0);
            {
              operator new();
            }
            uint64_t v26 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)geo::codec::Allocator::instance(void)::alloc
                                                                                              + 40))(geo::codec::Allocator::instance(void)::alloc, *(void *)(v31 + v29 + 24), 0);
            ++v30;
            v29 += 32;
          }
          while (v30 < *v27);
        }
        uint64_t v4 = geo::codec::Allocator::instance(v26);
        unsigned int v5 = (char *)v2 + 56 * v3;
        int v6 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v4 + 40))(v4, *((void *)v5 + 2), 0);
        uint64_t v7 = geo::codec::Allocator::instance(v6);
        this = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v7 + 40))(v7, *((void *)v5 + 4), 0);
        ++v3;
      }
      while (v3 != v33);
    }
    uint64_t v32 = *(uint64_t (**)(void))(*(void *)geo::codec::Allocator::instance(this) + 40);
    return (geo::codec::Allocator *)v32();
  }
  return this;
}

void sub_188FFC90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_188FFC9AC(_Unwind_Exception *a1)
{
}

unint64_t GEOVLMetadataTileReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 76))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOVLMetadataTileReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 72) = [v8 position];
  *(_DWORD *)(a1 + 76) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOVLMetadataTileReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOVLMetadataTileReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOVLMetadataTileReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOVLMetadataTileCallReadAllRecursiveWithoutSynchronized((id *)a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 80));
  return Specified;
}

void sub_188FFD0DC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOMapServiceTraitsReadSpecified(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 616));
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 612);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 608)];
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  long long v10 = *(_OWORD *)(a1 + 756);
  char v11 = 0;
  int v12 = (int *)MEMORY[0x1E4F940E0];
  *(int32x2_t *)v13.i8 = vzip1_s32((int32x2_t)(*((void *)&v10 + 1) >> 17), (int32x2_t)(*((void *)&v10 + 1) >> 40));
  v13.u64[1] = (unint64_t)vzip1_s32((int32x2_t)(*((void *)&v10 + 1) >> 24), (int32x2_t)HIDWORD(*((void *)&v10 + 1)));
  *(int32x2_t *)v14.i8 = vzip1_s32((int32x2_t)(*((void *)&v10 + 1) >> 19), (int32x2_t)(*((void *)&v10 + 1) >> 25));
  v14.u64[1] = (unint64_t)vzip1_s32((int32x2_t)(*((void *)&v10 + 1) >> 7), (int32x2_t)(*((void *)&v10 + 1) >> 1));
  *(int32x2_t *)v15.i8 = vzip1_s32((int32x2_t)(*((void *)&v10 + 1) >> 8), (int32x2_t)(*((void *)&v10 + 1) >> 28));
  v15.u64[1] = (unint64_t)vzip1_s32((int32x2_t)(*((void *)&v10 + 1) >> 21), (int32x2_t)(*((void *)&v10 + 1) >> 22));
  *(int32x2_t *)v16.i8 = vzip1_s32((int32x2_t)(v10 >> 63), *(int32x2_t *)((char *)&v10 + 8));
  v16.u64[1] = (unint64_t)vzip1_s32((int32x2_t)(*((void *)&v10 + 1) >> 43), (int32x2_t)(*((void *)&v10 + 1) >> 10));
  *(int32x2_t *)v17.i8 = vzip1_s32((int32x2_t)(*((void *)&v10 + 1) >> 23), (int32x2_t)(*((void *)&v10 + 1) >> 29));
  v17.u64[1] = (unint64_t)vzip1_s32((int32x2_t)(*((void *)&v10 + 1) >> 35), (int32x2_t)(*((void *)&v10 + 1) >> 16));
  *(int32x2_t *)v18.i8 = vzip1_s32((int32x2_t)(*((void *)&v10 + 1) >> 3), (int32x2_t)(*((void *)&v10 + 1) >> 41));
  v18.u64[1] = (unint64_t)vzip1_s32((int32x2_t)(*((void *)&v10 + 1) >> 5), (int32x2_t)(*((void *)&v10 + 1) >> 4));
  *(int32x2_t *)v19.i8 = vzip1_s32((int32x2_t)(*((void *)&v10 + 1) >> 12), (int32x2_t)(*((void *)&v10 + 1) >> 11));
  v19.u64[1] = (unint64_t)vzip1_s32((int32x2_t)(*((void *)&v10 + 1) >> 13), (int32x2_t)(*((void *)&v10 + 1) >> 20));
  *(int32x2_t *)v20.i8 = vzip1_s32((int32x2_t)(*((void *)&v10 + 1) >> 27), (int32x2_t)(*((void *)&v10 + 1) >> 15));
  v20.u64[1] = (unint64_t)vzip1_s32((int32x2_t)(*((void *)&v10 + 1) >> 39), (int32x2_t)(*((void *)&v10 + 1) >> 44));
  v21.i64[0] = 0x100000001;
  v21.i64[1] = 0x100000001;
  *(int32x2_t *)v22.i8 = vzip1_s32((int32x2_t)(*((void *)&v10 + 1) >> 30), (int32x2_t)(*((void *)&v10 + 1) >> 34));
  v22.u64[1] = (unint64_t)vzip1_s32((int32x2_t)(*((void *)&v10 + 1) >> 18), (int32x2_t)(*((void *)&v10 + 1) >> 6));
  *(int32x2_t *)v23.i8 = vzip1_s32((int32x2_t)(*((void *)&v10 + 1) >> 14), (int32x2_t)(*((void *)&v10 + 1) >> 37));
  v23.u64[1] = (unint64_t)vzip1_s32((int32x2_t)(*((void *)&v10 + 1) >> 9), (int32x2_t)(*((void *)&v10 + 1) >> 31));
  int32x4_t v24 = (int32x4_t)vandq_s8(v23, v21);
  *(int32x2_t *)v23.i8 = vzip1_s32((int32x2_t)(*((void *)&v10 + 1) >> 2), (int32x2_t)(*((void *)&v10 + 1) >> 36));
  v23.u64[1] = (unint64_t)vzip1_s32((int32x2_t)(*((void *)&v10 + 1) >> 38), (int32x2_t)(*((void *)&v10 + 1) >> 33));
  unsigned int v25 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)vandq_s8(v19, v21), (int32x4_t)vandq_s8(v20, v21)), vaddq_s32((int32x4_t)vandq_s8(v17, v21), (int32x4_t)vandq_s8(v18, v21))), vaddq_s32((int32x4_t)vandq_s8(v22, v21), v24)), vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)vandq_s8(v15, v21), (int32x4_t)vandq_s8(v16, v21)), vaddq_s32((int32x4_t)vandq_s8(v13, v21), (int32x4_t)vandq_s8(v14, v21))), (int32x4_t)vandq_s8(v23, v21))))+ ((*((void *)&v10 + 1) >> 42) & 1)+ ((DWORD2(v10) >> 26) & 1)+ ((v10 & 0x4000000000000000) != 0);
  while (2)
  {
    uint64_t v26 = 1;
    uint64_t v27 = 1;
    uint64_t v28 = 1;
    switch(a3[v6])
    {
      case -4:
        ++v25;
        goto LABEL_8;
      case -3:
        char v11 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v27 = v8;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v29 = v25 > 0x23;
        char v30 = v29 & ~(_BYTE)v9 | v7;
        char v31 = v29 | v9;
        char v603 = v11;
        uint64_t v32 = (int *)MEMORY[0x1E4F940E8];
        if (((v29 | v9) | v11)) {
          uint64_t v33 = 0;
        }
        else {
          uint64_t v33 = a3;
        }
        int v34 = 1;
        BOOL v35 = (int *)MEMORY[0x1E4F940C8];
        if (*(void *)(v3 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(v3 + (int)*MEMORY[0x1E4F940E0])) {
          goto LABEL_1261;
        }
        char v601 = v31 | v30;
        uint64_t v36 = (int *)MEMORY[0x1E4F940B8];
        char v602 = v29 & ~(_BYTE)v9 | v7;
        break;
      default:
        ++v25;
LABEL_7:
        uint64_t v26 = v7;
LABEL_8:
        uint64_t v27 = v8;
        uint64_t v28 = v9;
LABEL_10:
        ++v6;
        uint64_t v7 = v26;
        uint64_t v8 = v27;
        uint64_t v9 = v28;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(unsigned char *)(v3 + *v35)) {
      goto LABEL_1253;
    }
    char v37 = 0;
    unsigned int v38 = 0;
    unint64_t v39 = 0;
    while (1)
    {
      uint64_t v40 = *v32;
      unint64_t v41 = *(void *)(v3 + v40);
      if (v41 == -1 || v41 >= *(void *)(v3 + *v12)) {
        break;
      }
      char v42 = *(unsigned char *)(*(void *)(v3 + *v36) + v41);
      *(void *)(v3 + v40) = v41 + 1;
      v39 |= (unint64_t)(v42 & 0x7F) << v37;
      if ((v42 & 0x80) == 0) {
        goto LABEL_25;
      }
      v37 += 7;
      BOOL v43 = v38++ >= 9;
      if (v43)
      {
        unint64_t v39 = 0;
        int v44 = *(unsigned __int8 *)(v3 + *v35);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v35) = 1;
LABEL_25:
    int v44 = *(unsigned __int8 *)(v3 + *v35);
    if (*(unsigned char *)(v3 + *v35)) {
      unint64_t v39 = 0;
    }
LABEL_27:
    int v45 = v39 & 7;
    if (v44 || v45 == 4)
    {
LABEL_1253:
      int v34 = 1;
      if (v30) {
        goto LABEL_1262;
      }
      goto LABEL_1263;
    }
    unint64_t v47 = v39 >> 3;
    BOOL v48 = v31;
    if (!((v33 == 0) | v31 & 1))
    {
      uint64_t v49 = v33;
      do
      {
        int v51 = *v49++;
        int v50 = v51;
        BOOL v48 = v51 != 0;
        if (v51) {
          BOOL v52 = v50 == v47;
        }
        else {
          BOOL v52 = 1;
        }
      }
      while (!v52);
    }
    switch((int)v47)
    {
      case 1:
        if ((v603 & 1) == 0) {
          goto LABEL_871;
        }
        if (!PBReaderPlaceMark() || (GEOSessionIDReadAllFrom((void *)(a1 + 264), v3) & 1) == 0) {
          goto LABEL_1260;
        }
        PBReaderRecallMark();
        *(void *)(a1 + 756) |= 1uLL;
        goto LABEL_1164;
      case 2:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        char v214 = 0;
        unsigned int v215 = 0;
        uint64_t v56 = 0;
        *(void *)(a1 + 756) |= 0x10000000uLL;
        while (2)
        {
          uint64_t v216 = *v32;
          uint64_t v217 = *(void *)(v3 + v216);
          unint64_t v218 = v217 + 1;
          if (v217 == -1 || v218 > *(void *)(v3 + *v12))
          {
            *(unsigned char *)(v3 + *v35) = 1;
          }
          else
          {
            char v219 = *(unsigned char *)(*(void *)(v3 + *v36) + v217);
            *(void *)(v3 + v216) = v218;
            v56 |= (unint64_t)(v219 & 0x7F) << v214;
            if (v219 < 0)
            {
              v214 += 7;
              BOOL v43 = v215++ >= 9;
              if (v43)
              {
                LODWORD(v56) = 0;
                goto LABEL_966;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v35)) {
          LODWORD(v56) = 0;
        }
LABEL_966:
        uint64_t v518 = 708;
        goto LABEL_1079;
      case 3:
        if (!v48) {
          goto LABEL_873;
        }
        if ((*(unsigned char *)(a1 + 765) & 8) == 0)
        {
          uint64_t v61 = PBReaderReadString();
          uint64_t v62 = 296;
          goto LABEL_823;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_1260;
        }
        uint64_t v521 = *(void *)(a1 + 764) << 52;
        goto LABEL_1163;
      case 4:
        if (!v48) {
          goto LABEL_873;
        }
        if ((*(unsigned char *)(a1 + 765) & 0x10) == 0)
        {
          uint64_t v61 = PBReaderReadString();
          uint64_t v62 = 304;
          goto LABEL_823;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_1260;
        }
        uint64_t v521 = *(void *)(a1 + 764) << 51;
        goto LABEL_1163;
      case 5:
        if (!v48) {
          goto LABEL_873;
        }
        if ((*(unsigned char *)(a1 + 765) & 0x20) == 0)
        {
          uint64_t v61 = PBReaderReadString();
          uint64_t v62 = 312;
          goto LABEL_823;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_1260;
        }
        uint64_t v521 = *(void *)(a1 + 764) << 50;
        goto LABEL_1163;
      case 6:
        if (!v48) {
          goto LABEL_873;
        }
        if ((*(unsigned char *)(a1 + 766) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_1260;
          }
          uint64_t v521 = *(void *)(a1 + 764) << 43;
          goto LABEL_1163;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_1260;
        }
        char v53 = objc_alloc_init(GEOLocation);
        if (!GEOLocationReadAllFrom((uint64_t)v53, (void *)v3, v8 & 1)) {
          goto LABEL_1259;
        }
        PBReaderRecallMark();
        uint64_t v66 = 384;
        goto LABEL_768;
      case 7:
        if (!v48 || (*(unsigned char *)(a1 + 765) & 1) != 0) {
          goto LABEL_873;
        }
        if (v45 != 2)
        {
          char v536 = 0;
          unsigned int v537 = 0;
          uint64_t v538 = 0;
          while (1)
          {
            uint64_t v539 = *v32;
            uint64_t v540 = *(void *)(v3 + v539);
            unint64_t v541 = v540 + 1;
            if (v540 == -1 || v541 > *(void *)(v3 + *v12)) {
              goto LABEL_1249;
            }
            char v542 = *(unsigned char *)(*(void *)(v3 + *v36) + v540);
            *(void *)(v3 + v539) = v541;
            v538 |= (unint64_t)(v542 & 0x7F) << v536;
            if (v542 < 0)
            {
              v536 += 7;
              BOOL v43 = v537++ >= 9;
              if (!v43) {
                continue;
              }
            }
            goto LABEL_1250;
          }
        }
        if (!PBReaderPlaceMark()) {
          goto LABEL_1260;
        }
        while (1)
        {
          uint64_t v220 = (int *)MEMORY[0x1E4F940E0];
          uint64_t v221 = (int *)MEMORY[0x1E4F940C8];
          if (*(void *)(v3 + *v32) >= *(void *)(v3 + (int)*MEMORY[0x1E4F940E0])
            || *(unsigned char *)(v3 + (int)*MEMORY[0x1E4F940C8]))
          {
            goto LABEL_731;
          }
          char v222 = 0;
          unsigned int v223 = 0;
          uint64_t v224 = 0;
          unint64_t v225 = (int *)MEMORY[0x1E4F940B8];
          while (1)
          {
            uint64_t v226 = *v32;
            uint64_t v227 = *(void *)(v3 + v226);
            unint64_t v228 = v227 + 1;
            if (v227 == -1 || v228 > *(void *)(v3 + *v220)) {
              break;
            }
            char v229 = *(unsigned char *)(*(void *)(v3 + *v225) + v227);
            *(void *)(v3 + v226) = v228;
            v224 |= (unint64_t)(v229 & 0x7F) << v222;
            if (v229 < 0)
            {
              v222 += 7;
              BOOL v43 = v223++ >= 9;
              if (!v43) {
                continue;
              }
            }
            goto LABEL_324;
          }
          *(unsigned char *)(v3 + *v221) = 1;
LABEL_324:
          PBRepeatedInt32Add();
        }
      case 8:
        if (!v48) {
          goto LABEL_873;
        }
        if ((*(unsigned char *)(a1 + 767) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_1260;
          }
          uint64_t v521 = *(void *)(a1 + 764) << 35;
          goto LABEL_1163;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_1260;
        }
        char v53 = objc_alloc_init(GEOMapRegion);
        if (!GEOMapRegionReadAllFrom((uint64_t)v53, (void *)v3)) {
          goto LABEL_1259;
        }
        PBReaderRecallMark();
        uint64_t v66 = 456;
        goto LABEL_768;
      case 9:
        if (!v48 || (*(unsigned char *)(a1 + 766) & 0x20) != 0) {
          goto LABEL_871;
        }
        PBReaderReadString();
        char v53 = (GEOLocation *)objc_claimAutoreleasedReturnValue();
        if (v53) {
          -[GEOMapServiceTraits _addNoFlagsDeviceDisplayLanguage:](a1, v53);
        }
        goto LABEL_658;
      case 10:
        if (!v48) {
          goto LABEL_873;
        }
        if ((*(unsigned char *)(a1 + 766) & 0x40) == 0)
        {
          uint64_t v61 = PBReaderReadString();
          uint64_t v62 = 400;
          goto LABEL_823;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_1260;
        }
        uint64_t v521 = *(void *)(a1 + 764) << 41;
        goto LABEL_1163;
      case 11:
        if (!v48) {
          goto LABEL_873;
        }
        if ((*(unsigned char *)(a1 + 766) & 0x80) == 0)
        {
          uint64_t v61 = PBReaderReadString();
          uint64_t v62 = 408;
          goto LABEL_823;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_1260;
        }
        uint64_t v521 = *(void *)(a1 + 764) << 40;
        goto LABEL_1163;
      case 14:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        char v233 = 0;
        unsigned int v234 = 0;
        uint64_t v235 = 0;
        *(void *)(a1 + 756) |= 0x8000000000uLL;
        while (2)
        {
          uint64_t v236 = *v32;
          uint64_t v237 = *(void *)(v3 + v236);
          unint64_t v238 = v237 + 1;
          if (v237 == -1 || v238 > *(void *)(v3 + *v12))
          {
            *(unsigned char *)(v3 + *v35) = 1;
          }
          else
          {
            char v239 = *(unsigned char *)(*(void *)(v3 + *v36) + v237);
            *(void *)(v3 + v236) = v238;
            v235 |= (unint64_t)(v239 & 0x7F) << v233;
            if (v239 < 0)
            {
              v233 += 7;
              BOOL v43 = v234++ >= 9;
              if (v43)
              {
                uint64_t v235 = 0;
                goto LABEL_970;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v35)) {
          uint64_t v235 = 0;
        }
LABEL_970:
        BOOL v519 = v235 != 0;
        uint64_t v520 = 731;
        goto LABEL_1100;
      case 15:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        char v240 = 0;
        unsigned int v241 = 0;
        uint64_t v56 = 0;
        *(void *)(a1 + 756) |= 0x20000000uLL;
        while (2)
        {
          uint64_t v242 = *v32;
          uint64_t v243 = *(void *)(v3 + v242);
          unint64_t v244 = v243 + 1;
          if (v243 == -1 || v244 > *(void *)(v3 + *v12))
          {
            *(unsigned char *)(v3 + *v35) = 1;
          }
          else
          {
            char v245 = *(unsigned char *)(*(void *)(v3 + *v36) + v243);
            *(void *)(v3 + v242) = v244;
            v56 |= (unint64_t)(v245 & 0x7F) << v240;
            if (v245 < 0)
            {
              v240 += 7;
              BOOL v43 = v241++ >= 9;
              if (v43)
              {
                LODWORD(v56) = 0;
                goto LABEL_974;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v35)) {
          LODWORD(v56) = 0;
        }
LABEL_974:
        uint64_t v518 = 712;
        goto LABEL_1079;
      case 16:
        if (!v48 || (*(unsigned char *)(a1 + 767) & 0x20) != 0) {
          goto LABEL_871;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_1260;
        }
        char v53 = objc_alloc_init(GEOTraitsPhotoSize);
        if (!GEOTraitsPhotoSizeReadAllFrom((uint64_t)v53, (void *)v3)) {
          goto LABEL_1259;
        }
        PBReaderRecallMark();
        -[GEOMapServiceTraits _addNoFlagsPhotoSizes:](a1, v53);
        goto LABEL_658;
      case 17:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        char v246 = 0;
        unsigned int v247 = 0;
        uint64_t v56 = 0;
        *(void *)(a1 + 756) |= 0x20000uLL;
        while (2)
        {
          uint64_t v248 = *v32;
          uint64_t v249 = *(void *)(v3 + v248);
          unint64_t v250 = v249 + 1;
          if (v249 == -1 || v250 > *(void *)(v3 + *v12))
          {
            *(unsigned char *)(v3 + *v35) = 1;
          }
          else
          {
            char v251 = *(unsigned char *)(*(void *)(v3 + *v36) + v249);
            *(void *)(v3 + v248) = v250;
            v56 |= (unint64_t)(v251 & 0x7F) << v246;
            if (v251 < 0)
            {
              v246 += 7;
              BOOL v43 = v247++ >= 9;
              if (v43)
              {
                LODWORD(v56) = 0;
                goto LABEL_978;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v35)) {
          LODWORD(v56) = 0;
        }
LABEL_978:
        uint64_t v518 = 664;
        goto LABEL_1079;
      case 18:
        if (!v48 || (*(unsigned char *)(a1 + 768) & 8) != 0) {
          goto LABEL_871;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_1260;
        }
        char v53 = objc_alloc_init(GEOTraitsPhotoSize);
        if (!GEOTraitsPhotoSizeReadAllFrom((uint64_t)v53, (void *)v3)) {
          goto LABEL_1259;
        }
        PBReaderRecallMark();
        -[GEOMapServiceTraits _addNoFlagsReviewUserPhotoSizes:](a1, v53);
        goto LABEL_658;
      case 19:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        char v252 = 0;
        unsigned int v253 = 0;
        uint64_t v56 = 0;
        *(void *)(a1 + 756) |= 0x1000000uLL;
        while (2)
        {
          uint64_t v254 = *v32;
          uint64_t v255 = *(void *)(v3 + v254);
          unint64_t v256 = v255 + 1;
          if (v255 == -1 || v256 > *(void *)(v3 + *v12))
          {
            *(unsigned char *)(v3 + *v35) = 1;
          }
          else
          {
            char v257 = *(unsigned char *)(*(void *)(v3 + *v36) + v255);
            *(void *)(v3 + v254) = v256;
            v56 |= (unint64_t)(v257 & 0x7F) << v252;
            if (v257 < 0)
            {
              v252 += 7;
              BOOL v43 = v253++ >= 9;
              if (v43)
              {
                LODWORD(v56) = 0;
                goto LABEL_982;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v35)) {
          LODWORD(v56) = 0;
        }
LABEL_982:
        uint64_t v518 = 692;
        goto LABEL_1079;
      case 20:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        char v258 = 0;
        unsigned int v259 = 0;
        uint64_t v56 = 0;
        *(void *)(a1 + 756) |= 0x40000000uLL;
        while (2)
        {
          uint64_t v260 = *v32;
          uint64_t v261 = *(void *)(v3 + v260);
          unint64_t v262 = v261 + 1;
          if (v261 == -1 || v262 > *(void *)(v3 + *v12))
          {
            *(unsigned char *)(v3 + *v35) = 1;
          }
          else
          {
            char v263 = *(unsigned char *)(*(void *)(v3 + *v36) + v261);
            *(void *)(v3 + v260) = v262;
            v56 |= (unint64_t)(v263 & 0x7F) << v258;
            if (v263 < 0)
            {
              v258 += 7;
              BOOL v43 = v259++ >= 9;
              if (v43)
              {
                LODWORD(v56) = 0;
                goto LABEL_986;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v35)) {
          LODWORD(v56) = 0;
        }
LABEL_986:
        uint64_t v518 = 716;
        goto LABEL_1079;
      case 21:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        char v54 = 0;
        unsigned int v55 = 0;
        uint64_t v56 = 0;
        *(void *)(a1 + 756) |= 0x80000000uLL;
        while (2)
        {
          uint64_t v57 = *v32;
          uint64_t v58 = *(void *)(v3 + v57);
          unint64_t v59 = v58 + 1;
          if (v58 == -1 || v59 > *(void *)(v3 + *v12))
          {
            *(unsigned char *)(v3 + *v35) = 1;
          }
          else
          {
            char v60 = *(unsigned char *)(*(void *)(v3 + *v36) + v58);
            *(void *)(v3 + v57) = v59;
            v56 |= (unint64_t)(v60 & 0x7F) << v54;
            if (v60 < 0)
            {
              v54 += 7;
              BOOL v43 = v55++ >= 9;
              if (v43)
              {
                LODWORD(v56) = 0;
                goto LABEL_878;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v35)) {
          LODWORD(v56) = 0;
        }
LABEL_878:
        uint64_t v518 = 720;
        goto LABEL_1079;
      case 23:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        char v264 = 0;
        unsigned int v265 = 0;
        uint64_t v56 = 0;
        *(void *)(a1 + 756) |= 0x200uLL;
        while (2)
        {
          uint64_t v266 = *v32;
          uint64_t v267 = *(void *)(v3 + v266);
          unint64_t v268 = v267 + 1;
          if (v267 == -1 || v268 > *(void *)(v3 + *v12))
          {
            *(unsigned char *)(v3 + *v35) = 1;
          }
          else
          {
            char v269 = *(unsigned char *)(*(void *)(v3 + *v36) + v267);
            *(void *)(v3 + v266) = v268;
            v56 |= (unint64_t)(v269 & 0x7F) << v264;
            if (v269 < 0)
            {
              v264 += 7;
              BOOL v43 = v265++ >= 9;
              if (v43)
              {
                LODWORD(v56) = 0;
                goto LABEL_990;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v35)) {
          LODWORD(v56) = 0;
        }
LABEL_990:
        uint64_t v518 = 632;
        goto LABEL_1079;
      case 24:
        if (!v48) {
          goto LABEL_873;
        }
        if ((*(unsigned char *)(a1 + 766) & 1) == 0)
        {
          uint64_t v61 = PBReaderReadString();
          uint64_t v62 = 336;
          goto LABEL_823;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_1260;
        }
        uint64_t v521 = *(void *)(a1 + 764) << 47;
        goto LABEL_1163;
      case 25:
        if (!v48) {
          goto LABEL_873;
        }
        if ((*(unsigned char *)(a1 + 766) & 2) == 0)
        {
          uint64_t v61 = PBReaderReadString();
          uint64_t v62 = 344;
          goto LABEL_823;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_1260;
        }
        uint64_t v521 = *(void *)(a1 + 764) << 46;
        goto LABEL_1163;
      case 26:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        *(void *)(a1 + 756) |= 4uLL;
        uint64_t v270 = *v32;
        unint64_t v271 = *(void *)(v3 + v270);
        if (v271 <= 0xFFFFFFFFFFFFFFF7 && v271 + 8 <= *(void *)(v3 + *v12))
        {
          uint64_t v65 = *(void *)(*(void *)(v3 + *v36) + v271);
          *(void *)(v3 + v270) = v271 + 8;
        }
        else
        {
          *(unsigned char *)(v3 + *v35) = 1;
          uint64_t v65 = 0;
        }
        uint64_t v522 = 360;
        goto LABEL_1213;
      case 27:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        *(void *)(a1 + 756) |= 2uLL;
        uint64_t v272 = *v32;
        unint64_t v273 = *(void *)(v3 + v272);
        if (v273 <= 0xFFFFFFFFFFFFFFF7 && v273 + 8 <= *(void *)(v3 + *v12))
        {
          uint64_t v65 = *(void *)(*(void *)(v3 + *v36) + v273);
          *(void *)(v3 + v272) = v273 + 8;
        }
        else
        {
          *(unsigned char *)(v3 + *v35) = 1;
          uint64_t v65 = 0;
        }
        uint64_t v522 = 352;
        goto LABEL_1213;
      case 28:
        if (!v48) {
          goto LABEL_873;
        }
        if (*(unsigned char *)(a1 + 769))
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_1260;
          }
          uint64_t v521 = *(void *)(a1 + 764) << 23;
          goto LABEL_1163;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_1260;
        }
        char v53 = objc_alloc_init(GEOTraitsTransitScheduleFilter);
        if (!GEOTraitsTransitScheduleFilterReadAllFrom((uint64_t)v53, (void *)v3, v8 & 1)) {
          goto LABEL_1259;
        }
        PBReaderRecallMark();
        uint64_t v66 = 568;
        goto LABEL_768;
      case 29:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        *(void *)(a1 + 756) |= 0x10uLL;
        uint64_t v63 = *v32;
        unint64_t v64 = *(void *)(v3 + v63);
        if (v64 <= 0xFFFFFFFFFFFFFFF7 && v64 + 8 <= *(void *)(v3 + *v12))
        {
          uint64_t v65 = *(void *)(*(void *)(v3 + *v36) + v64);
          *(void *)(v3 + v63) = v64 + 8;
        }
        else
        {
          *(unsigned char *)(v3 + *v35) = 1;
          uint64_t v65 = 0;
        }
        uint64_t v522 = 464;
        goto LABEL_1213;
      case 30:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        char v274 = 0;
        unsigned int v275 = 0;
        uint64_t v56 = 0;
        *(void *)(a1 + 756) |= 0x4000uLL;
        while (2)
        {
          uint64_t v276 = *v32;
          uint64_t v277 = *(void *)(v3 + v276);
          unint64_t v278 = v277 + 1;
          if (v277 == -1 || v278 > *(void *)(v3 + *v12))
          {
            *(unsigned char *)(v3 + *v35) = 1;
          }
          else
          {
            char v279 = *(unsigned char *)(*(void *)(v3 + *v36) + v277);
            *(void *)(v3 + v276) = v278;
            v56 |= (unint64_t)(v279 & 0x7F) << v274;
            if (v279 < 0)
            {
              v274 += 7;
              BOOL v43 = v275++ >= 9;
              if (v43)
              {
                LODWORD(v56) = 0;
                goto LABEL_994;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v35)) {
          LODWORD(v56) = 0;
        }
LABEL_994:
        uint64_t v518 = 652;
        goto LABEL_1079;
      case 31:
        if (!v48) {
          goto LABEL_873;
        }
        if ((*(unsigned char *)(a1 + 767) & 1) == 0)
        {
          uint64_t v61 = PBReaderReadString();
          uint64_t v62 = 416;
          goto LABEL_823;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_1260;
        }
        uint64_t v521 = *(void *)(a1 + 764) << 39;
        goto LABEL_1163;
      case 32:
        if (!v48) {
          goto LABEL_873;
        }
        if ((*(unsigned char *)(a1 + 768) & 1) == 0)
        {
          uint64_t v61 = PBReaderReadString();
          uint64_t v62 = 496;
          goto LABEL_823;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_1260;
        }
        uint64_t v521 = *(void *)(a1 + 764) << 31;
        goto LABEL_1163;
      case 33:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        char v280 = 0;
        unsigned int v281 = 0;
        uint64_t v56 = 0;
        *(void *)(a1 + 756) |= 0x800uLL;
        while (2)
        {
          uint64_t v282 = *v32;
          uint64_t v283 = *(void *)(v3 + v282);
          unint64_t v284 = v283 + 1;
          if (v283 == -1 || v284 > *(void *)(v3 + *v12))
          {
            *(unsigned char *)(v3 + *v35) = 1;
          }
          else
          {
            char v285 = *(unsigned char *)(*(void *)(v3 + *v36) + v283);
            *(void *)(v3 + v282) = v284;
            v56 |= (unint64_t)(v285 & 0x7F) << v280;
            if (v285 < 0)
            {
              v280 += 7;
              BOOL v43 = v281++ >= 9;
              if (v43)
              {
                LODWORD(v56) = 0;
                goto LABEL_998;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v35)) {
          LODWORD(v56) = 0;
        }
LABEL_998:
        uint64_t v518 = 640;
        goto LABEL_1079;
      case 34:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        char v286 = 0;
        unsigned int v287 = 0;
        uint64_t v56 = 0;
        *(void *)(a1 + 756) |= 0x400uLL;
        while (2)
        {
          uint64_t v288 = *v32;
          uint64_t v289 = *(void *)(v3 + v288);
          unint64_t v290 = v289 + 1;
          if (v289 == -1 || v290 > *(void *)(v3 + *v12))
          {
            *(unsigned char *)(v3 + *v35) = 1;
          }
          else
          {
            char v291 = *(unsigned char *)(*(void *)(v3 + *v36) + v289);
            *(void *)(v3 + v288) = v290;
            v56 |= (unint64_t)(v291 & 0x7F) << v286;
            if (v291 < 0)
            {
              v286 += 7;
              BOOL v43 = v287++ >= 9;
              if (v43)
              {
                LODWORD(v56) = 0;
                goto LABEL_1002;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v35)) {
          LODWORD(v56) = 0;
        }
LABEL_1002:
        uint64_t v518 = 636;
        goto LABEL_1079;
      case 35:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        char v292 = 0;
        unsigned int v293 = 0;
        uint64_t v56 = 0;
        *(void *)(a1 + 756) |= 0x100uLL;
        while (2)
        {
          uint64_t v294 = *v32;
          uint64_t v295 = *(void *)(v3 + v294);
          unint64_t v296 = v295 + 1;
          if (v295 == -1 || v296 > *(void *)(v3 + *v12))
          {
            *(unsigned char *)(v3 + *v35) = 1;
          }
          else
          {
            char v297 = *(unsigned char *)(*(void *)(v3 + *v36) + v295);
            *(void *)(v3 + v294) = v296;
            v56 |= (unint64_t)(v297 & 0x7F) << v292;
            if (v297 < 0)
            {
              v292 += 7;
              BOOL v43 = v293++ >= 9;
              if (v43)
              {
                LODWORD(v56) = 0;
                goto LABEL_1006;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v35)) {
          LODWORD(v56) = 0;
        }
LABEL_1006:
        uint64_t v518 = 628;
        goto LABEL_1079;
      case 36:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        char v298 = 0;
        unsigned int v299 = 0;
        uint64_t v300 = 0;
        *(void *)(a1 + 756) |= 0x400000000000uLL;
        while (2)
        {
          uint64_t v301 = *v32;
          uint64_t v302 = *(void *)(v3 + v301);
          unint64_t v303 = v302 + 1;
          if (v302 == -1 || v303 > *(void *)(v3 + *v12))
          {
            *(unsigned char *)(v3 + *v35) = 1;
          }
          else
          {
            char v304 = *(unsigned char *)(*(void *)(v3 + *v36) + v302);
            *(void *)(v3 + v301) = v303;
            v300 |= (unint64_t)(v304 & 0x7F) << v298;
            if (v304 < 0)
            {
              v298 += 7;
              BOOL v43 = v299++ >= 9;
              if (v43)
              {
                uint64_t v300 = 0;
                goto LABEL_1010;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v35)) {
          uint64_t v300 = 0;
        }
LABEL_1010:
        BOOL v519 = v300 != 0;
        uint64_t v520 = 738;
        goto LABEL_1100;
      case 38:
        if (!v48 || (*(unsigned char *)(a1 + 767) & 8) != 0) {
          goto LABEL_871;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_1260;
        }
        char v53 = objc_alloc_init(GEOLocation);
        if (!GEOLocationReadAllFrom((uint64_t)v53, (void *)v3, v8 & 1)) {
          goto LABEL_1259;
        }
        PBReaderRecallMark();
        -[GEOMapServiceTraits _addNoFlagsHistoricalLocations:](a1, v53);
        goto LABEL_658;
      case 39:
        if (!v48) {
          goto LABEL_873;
        }
        if ((*(unsigned char *)(a1 + 765) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_1260;
          }
          uint64_t v521 = *(void *)(a1 + 764) << 48;
          goto LABEL_1163;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_1260;
        }
        char v53 = objc_alloc_init(GEOAutomobileOptions);
        if (!GEOAutomobileOptionsReadAllFrom((uint64_t)v53, (void *)v3, v8 & 1)) {
          goto LABEL_1259;
        }
        PBReaderRecallMark();
        uint64_t v66 = 328;
        goto LABEL_768;
      case 40:
        if (!v48) {
          goto LABEL_873;
        }
        if ((*(unsigned char *)(a1 + 768) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_1260;
          }
          uint64_t v521 = *(void *)(a1 + 764) << 24;
          goto LABEL_1163;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_1260;
        }
        char v53 = objc_alloc_init(GEOTransitOptions);
        if (!GEOTransitOptionsReadAllFrom((uint64_t)v53, (void *)v3, v8 & 1)) {
          goto LABEL_1259;
        }
        PBReaderRecallMark();
        uint64_t v66 = 560;
        goto LABEL_768;
      case 41:
        if (!v48) {
          goto LABEL_873;
        }
        if ((*(unsigned char *)(a1 + 769) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_1260;
          }
          uint64_t v521 = *(void *)(a1 + 764) << 19;
          goto LABEL_1163;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_1260;
        }
        char v53 = objc_alloc_init(GEOWalkingOptions);
        if (!GEOWalkingOptionsReadAllFrom((uint64_t)v53, (void *)v3, v8 & 1)) {
          goto LABEL_1259;
        }
        PBReaderRecallMark();
        uint64_t v66 = 600;
        goto LABEL_768;
      case 42:
        if (!v48 || (*(unsigned char *)(a1 + 763) & 0x80) != 0) {
          goto LABEL_873;
        }
        if (v45 != 2)
        {
          char v543 = 0;
          unsigned int v544 = 0;
          uint64_t v545 = 0;
          uint64_t v546 = (int *)MEMORY[0x1E4F940B8];
          while (1)
          {
            uint64_t v547 = *v32;
            uint64_t v548 = *(void *)(v3 + v547);
            unint64_t v549 = v548 + 1;
            if (v548 == -1 || v549 > *(void *)(v3 + *v12)) {
              goto LABEL_1249;
            }
            char v550 = *(unsigned char *)(*(void *)(v3 + *v546) + v548);
            *(void *)(v3 + v547) = v549;
            v545 |= (unint64_t)(v550 & 0x7F) << v543;
            if (v550 < 0)
            {
              v543 += 7;
              BOOL v43 = v544++ >= 9;
              if (!v43) {
                continue;
              }
            }
            goto LABEL_1250;
          }
        }
        if (!PBReaderPlaceMark()) {
          goto LABEL_1260;
        }
        while (1)
        {
          unint64_t v305 = (int *)MEMORY[0x1E4F940E0];
          uint64_t v306 = (int *)MEMORY[0x1E4F940C8];
          if (*(void *)(v3 + *v32) >= *(void *)(v3 + (int)*MEMORY[0x1E4F940E0])
            || *(unsigned char *)(v3 + (int)*MEMORY[0x1E4F940C8]))
          {
            goto LABEL_731;
          }
          char v307 = 0;
          unsigned int v308 = 0;
          uint64_t v309 = 0;
          uint32x4_t v310 = (int *)MEMORY[0x1E4F940B8];
          while (1)
          {
            uint64_t v311 = *v32;
            uint64_t v312 = *(void *)(v3 + v311);
            unint64_t v313 = v312 + 1;
            if (v312 == -1 || v313 > *(void *)(v3 + *v305)) {
              break;
            }
            char v314 = *(unsigned char *)(*(void *)(v3 + *v310) + v312);
            *(void *)(v3 + v311) = v313;
            v309 |= (unint64_t)(v314 & 0x7F) << v307;
            if (v314 < 0)
            {
              v307 += 7;
              BOOL v43 = v308++ >= 9;
              if (!v43) {
                continue;
              }
            }
            goto LABEL_490;
          }
          *(unsigned char *)(v3 + *v306) = 1;
LABEL_490:
          PBRepeatedInt32Add();
        }
      case 43:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        char v67 = 0;
        unsigned int v68 = 0;
        uint64_t v56 = 0;
        *(void *)(a1 + 756) |= 0x200000uLL;
        while (2)
        {
          uint64_t v69 = *v32;
          uint64_t v70 = *(void *)(v3 + v69);
          unint64_t v71 = v70 + 1;
          if (v70 == -1 || v71 > *(void *)(v3 + *v12))
          {
            *(unsigned char *)(v3 + *v35) = 1;
          }
          else
          {
            char v72 = *(unsigned char *)(*(void *)(v3 + *v36) + v70);
            *(void *)(v3 + v69) = v71;
            v56 |= (unint64_t)(v72 & 0x7F) << v67;
            if (v72 < 0)
            {
              v67 += 7;
              BOOL v43 = v68++ >= 9;
              if (v43)
              {
                LODWORD(v56) = 0;
                goto LABEL_882;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v35)) {
          LODWORD(v56) = 0;
        }
LABEL_882:
        uint64_t v518 = 680;
        goto LABEL_1079;
      case 44:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        char v73 = 0;
        unsigned int v74 = 0;
        uint64_t v75 = 0;
        *(void *)(a1 + 756) |= 0x80000000000000uLL;
        while (2)
        {
          uint64_t v76 = *v32;
          uint64_t v77 = *(void *)(v3 + v76);
          unint64_t v78 = v77 + 1;
          if (v77 == -1 || v78 > *(void *)(v3 + *v12))
          {
            *(unsigned char *)(v3 + *v35) = 1;
          }
          else
          {
            char v79 = *(unsigned char *)(*(void *)(v3 + *v36) + v77);
            *(void *)(v3 + v76) = v78;
            v75 |= (unint64_t)(v79 & 0x7F) << v73;
            if (v79 < 0)
            {
              v73 += 7;
              BOOL v43 = v74++ >= 9;
              if (v43)
              {
                uint64_t v75 = 0;
                goto LABEL_886;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v35)) {
          uint64_t v75 = 0;
        }
LABEL_886:
        BOOL v519 = v75 != 0;
        uint64_t v520 = 747;
        goto LABEL_1100;
      case 45:
        if (!v48 || (*(unsigned char *)(a1 + 764) & 1) != 0) {
          goto LABEL_873;
        }
        if (v45 != 2)
        {
          char v551 = 0;
          unsigned int v552 = 0;
          uint64_t v553 = 0;
          while (1)
          {
            uint64_t v554 = *v32;
            uint64_t v555 = *(void *)(v3 + v554);
            unint64_t v556 = v555 + 1;
            if (v555 == -1 || v556 > *(void *)(v3 + *v12)) {
              goto LABEL_1249;
            }
            char v557 = *(unsigned char *)(*(void *)(v3 + *v36) + v555);
            *(void *)(v3 + v554) = v556;
            v553 |= (unint64_t)(v557 & 0x7F) << v551;
            if (v557 < 0)
            {
              v551 += 7;
              BOOL v43 = v552++ >= 9;
              if (!v43) {
                continue;
              }
            }
            goto LABEL_1250;
          }
        }
        if (!PBReaderPlaceMark()) {
          goto LABEL_1260;
        }
        while (1)
        {
          uint64_t v315 = (int *)MEMORY[0x1E4F940E0];
          uint64_t v316 = (int *)MEMORY[0x1E4F940C8];
          if (*(void *)(v3 + *v32) >= *(void *)(v3 + (int)*MEMORY[0x1E4F940E0])
            || *(unsigned char *)(v3 + (int)*MEMORY[0x1E4F940C8]))
          {
            goto LABEL_731;
          }
          char v317 = 0;
          unsigned int v318 = 0;
          uint64_t v319 = 0;
          unint64_t v320 = (int *)MEMORY[0x1E4F940B8];
          while (1)
          {
            uint64_t v321 = *v32;
            uint64_t v322 = *(void *)(v3 + v321);
            unint64_t v323 = v322 + 1;
            if (v322 == -1 || v323 > *(void *)(v3 + *v315)) {
              break;
            }
            char v324 = *(unsigned char *)(*(void *)(v3 + *v320) + v322);
            *(void *)(v3 + v321) = v323;
            v319 |= (unint64_t)(v324 & 0x7F) << v317;
            if (v324 < 0)
            {
              v317 += 7;
              BOOL v43 = v318++ >= 9;
              if (!v43) {
                continue;
              }
            }
            goto LABEL_505;
          }
          *(unsigned char *)(v3 + *v316) = 1;
LABEL_505:
          PBRepeatedInt32Add();
        }
      case 46:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        char v325 = 0;
        unsigned int v326 = 0;
        uint64_t v327 = 0;
        *(void *)(a1 + 756) |= 0x1000000000000000uLL;
        while (2)
        {
          uint64_t v328 = *v32;
          uint64_t v329 = *(void *)(v3 + v328);
          unint64_t v330 = v329 + 1;
          if (v329 == -1 || v330 > *(void *)(v3 + *v12))
          {
            *(unsigned char *)(v3 + *v35) = 1;
          }
          else
          {
            char v331 = *(unsigned char *)(*(void *)(v3 + *v36) + v329);
            *(void *)(v3 + v328) = v330;
            v327 |= (unint64_t)(v331 & 0x7F) << v325;
            if (v331 < 0)
            {
              v325 += 7;
              BOOL v43 = v326++ >= 9;
              if (v43)
              {
                uint64_t v327 = 0;
                goto LABEL_1014;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v35)) {
          uint64_t v327 = 0;
        }
LABEL_1014:
        BOOL v519 = v327 != 0;
        uint64_t v520 = 752;
        goto LABEL_1100;
      case 47:
        if (!v48) {
          goto LABEL_873;
        }
        if ((*(unsigned char *)(a1 + 769) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_1260;
          }
          uint64_t v521 = *(void *)(a1 + 764) << 20;
          goto LABEL_1163;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_1260;
        }
        char v53 = objc_alloc_init(GEOPDVenueIdentifier);
        if (!GEOPDVenueIdentifierReadAllFrom((uint64_t)v53, (void *)v3, v8 & 1)) {
          goto LABEL_1259;
        }
        PBReaderRecallMark();
        uint64_t v66 = 592;
        goto LABEL_768;
      case 48:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        char v80 = 0;
        unsigned int v81 = 0;
        uint64_t v82 = 0;
        *(void *)(a1 + 756) |= 0x100000000000000uLL;
        while (2)
        {
          uint64_t v83 = *v32;
          uint64_t v84 = *(void *)(v3 + v83);
          unint64_t v85 = v84 + 1;
          if (v84 == -1 || v85 > *(void *)(v3 + *v12))
          {
            *(unsigned char *)(v3 + *v35) = 1;
          }
          else
          {
            char v86 = *(unsigned char *)(*(void *)(v3 + *v36) + v84);
            *(void *)(v3 + v83) = v85;
            v82 |= (unint64_t)(v86 & 0x7F) << v80;
            if (v86 < 0)
            {
              v80 += 7;
              BOOL v43 = v81++ >= 9;
              if (v43)
              {
                uint64_t v82 = 0;
                goto LABEL_890;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v35)) {
          uint64_t v82 = 0;
        }
LABEL_890:
        BOOL v519 = v82 != 0;
        uint64_t v520 = 748;
        goto LABEL_1100;
      case 49:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        char v87 = 0;
        unsigned int v88 = 0;
        uint64_t v89 = 0;
        *(void *)(a1 + 756) |= 0x4000000000uLL;
        while (2)
        {
          uint64_t v90 = *v32;
          uint64_t v91 = *(void *)(v3 + v90);
          unint64_t v92 = v91 + 1;
          if (v91 == -1 || v92 > *(void *)(v3 + *v12))
          {
            *(unsigned char *)(v3 + *v35) = 1;
          }
          else
          {
            char v93 = *(unsigned char *)(*(void *)(v3 + *v36) + v91);
            *(void *)(v3 + v90) = v92;
            v89 |= (unint64_t)(v93 & 0x7F) << v87;
            if (v93 < 0)
            {
              v87 += 7;
              BOOL v43 = v88++ >= 9;
              if (v43)
              {
                uint64_t v89 = 0;
                goto LABEL_894;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v35)) {
          uint64_t v89 = 0;
        }
LABEL_894:
        BOOL v519 = v89 != 0;
        uint64_t v520 = 730;
        goto LABEL_1100;
      case 50:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        char v332 = 0;
        unsigned int v333 = 0;
        uint64_t v56 = 0;
        *(void *)(a1 + 756) |= 0x400000uLL;
        while (2)
        {
          uint64_t v334 = *v32;
          uint64_t v335 = *(void *)(v3 + v334);
          unint64_t v336 = v335 + 1;
          if (v335 == -1 || v336 > *(void *)(v3 + *v12))
          {
            *(unsigned char *)(v3 + *v35) = 1;
          }
          else
          {
            char v337 = *(unsigned char *)(*(void *)(v3 + *v36) + v335);
            *(void *)(v3 + v334) = v336;
            v56 |= (unint64_t)(v337 & 0x7F) << v332;
            if (v337 < 0)
            {
              v332 += 7;
              BOOL v43 = v333++ >= 9;
              if (v43)
              {
                LODWORD(v56) = 0;
                goto LABEL_1018;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v35)) {
          LODWORD(v56) = 0;
        }
LABEL_1018:
        uint64_t v518 = 684;
        goto LABEL_1079;
      case 51:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        char v338 = 0;
        unsigned int v339 = 0;
        uint64_t v56 = 0;
        *(void *)(a1 + 756) |= 0x2000uLL;
        while (2)
        {
          uint64_t v340 = *v32;
          uint64_t v341 = *(void *)(v3 + v340);
          unint64_t v342 = v341 + 1;
          if (v341 == -1 || v342 > *(void *)(v3 + *v12))
          {
            *(unsigned char *)(v3 + *v35) = 1;
          }
          else
          {
            char v343 = *(unsigned char *)(*(void *)(v3 + *v36) + v341);
            *(void *)(v3 + v340) = v342;
            v56 |= (unint64_t)(v343 & 0x7F) << v338;
            if (v343 < 0)
            {
              v338 += 7;
              BOOL v43 = v339++ >= 9;
              if (v43)
              {
                LODWORD(v56) = 0;
                goto LABEL_1022;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v35)) {
          LODWORD(v56) = 0;
        }
LABEL_1022:
        uint64_t v518 = 648;
        goto LABEL_1079;
      case 52:
        if (!v48) {
          goto LABEL_873;
        }
        if ((*(unsigned char *)(a1 + 765) & 4) == 0)
        {
          uint64_t v61 = PBReaderReadString();
          uint64_t v62 = 288;
          goto LABEL_823;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_1260;
        }
        uint64_t v521 = *(void *)(a1 + 764) << 53;
        goto LABEL_1163;
      case 53:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        *(void *)(a1 + 756) |= 0x20uLL;
        uint64_t v344 = *v32;
        unint64_t v345 = *(void *)(v3 + v344);
        if (v345 <= 0xFFFFFFFFFFFFFFF7 && v345 + 8 <= *(void *)(v3 + *v12))
        {
          uint64_t v65 = *(void *)(*(void *)(v3 + *v36) + v345);
          *(void *)(v3 + v344) = v345 + 8;
        }
        else
        {
          *(unsigned char *)(v3 + *v35) = 1;
          uint64_t v65 = 0;
        }
        uint64_t v522 = 544;
        goto LABEL_1213;
      case 54:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        char v94 = 0;
        unsigned int v95 = 0;
        uint64_t v96 = 0;
        *(void *)(a1 + 756) |= 0x40000000000000uLL;
        while (2)
        {
          uint64_t v97 = *v32;
          uint64_t v98 = *(void *)(v3 + v97);
          unint64_t v99 = v98 + 1;
          if (v98 == -1 || v99 > *(void *)(v3 + *v12))
          {
            *(unsigned char *)(v3 + *v35) = 1;
          }
          else
          {
            char v100 = *(unsigned char *)(*(void *)(v3 + *v36) + v98);
            *(void *)(v3 + v97) = v99;
            v96 |= (unint64_t)(v100 & 0x7F) << v94;
            if (v100 < 0)
            {
              v94 += 7;
              BOOL v43 = v95++ >= 9;
              if (v43)
              {
                uint64_t v96 = 0;
                goto LABEL_898;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v35)) {
          uint64_t v96 = 0;
        }
LABEL_898:
        BOOL v519 = v96 != 0;
        uint64_t v520 = 746;
        goto LABEL_1100;
      case 55:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        char v101 = 0;
        unsigned int v102 = 0;
        uint64_t v103 = 0;
        *(void *)(a1 + 756) |= 0x400000000000000uLL;
        while (2)
        {
          uint64_t v104 = *v32;
          uint64_t v105 = *(void *)(v3 + v104);
          unint64_t v106 = v105 + 1;
          if (v105 == -1 || v106 > *(void *)(v3 + *v12))
          {
            *(unsigned char *)(v3 + *v35) = 1;
          }
          else
          {
            char v107 = *(unsigned char *)(*(void *)(v3 + *v36) + v105);
            *(void *)(v3 + v104) = v106;
            v103 |= (unint64_t)(v107 & 0x7F) << v101;
            if (v107 < 0)
            {
              v101 += 7;
              BOOL v43 = v102++ >= 9;
              if (v43)
              {
                uint64_t v103 = 0;
                goto LABEL_902;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v35)) {
          uint64_t v103 = 0;
        }
LABEL_902:
        BOOL v519 = v103 != 0;
        uint64_t v520 = 750;
        goto LABEL_1100;
      case 56:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        char v346 = 0;
        unsigned int v347 = 0;
        uint64_t v348 = 0;
        *(void *)(a1 + 756) |= 0x2000000000uLL;
        while (2)
        {
          uint64_t v349 = *v32;
          uint64_t v350 = *(void *)(v3 + v349);
          unint64_t v351 = v350 + 1;
          if (v350 == -1 || v351 > *(void *)(v3 + *v12))
          {
            *(unsigned char *)(v3 + *v35) = 1;
          }
          else
          {
            char v352 = *(unsigned char *)(*(void *)(v3 + *v36) + v350);
            *(void *)(v3 + v349) = v351;
            v348 |= (unint64_t)(v352 & 0x7F) << v346;
            if (v352 < 0)
            {
              v346 += 7;
              BOOL v43 = v347++ >= 9;
              if (v43)
              {
                uint64_t v348 = 0;
                goto LABEL_1026;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v35)) {
          uint64_t v348 = 0;
        }
LABEL_1026:
        BOOL v519 = v348 != 0;
        uint64_t v520 = 729;
        goto LABEL_1100;
      case 57:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        char v353 = 0;
        unsigned int v354 = 0;
        uint64_t v355 = 0;
        *(void *)(a1 + 756) |= 0x200000000uLL;
        while (2)
        {
          uint64_t v356 = *v32;
          uint64_t v357 = *(void *)(v3 + v356);
          unint64_t v358 = v357 + 1;
          if (v357 == -1 || v358 > *(void *)(v3 + *v12))
          {
            *(unsigned char *)(v3 + *v35) = 1;
          }
          else
          {
            char v359 = *(unsigned char *)(*(void *)(v3 + *v36) + v357);
            *(void *)(v3 + v356) = v358;
            v355 |= (unint64_t)(v359 & 0x7F) << v353;
            if (v359 < 0)
            {
              v353 += 7;
              BOOL v43 = v354++ >= 9;
              if (v43)
              {
                uint64_t v355 = 0;
                goto LABEL_1030;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v35)) {
          uint64_t v355 = 0;
        }
LABEL_1030:
        BOOL v519 = v355 != 0;
        uint64_t v520 = 725;
        goto LABEL_1100;
      case 58:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        char v108 = 0;
        unsigned int v109 = 0;
        uint64_t v110 = 0;
        *(void *)(a1 + 756) |= 0x800000000000000uLL;
        while (2)
        {
          uint64_t v111 = *v32;
          uint64_t v112 = *(void *)(v3 + v111);
          unint64_t v113 = v112 + 1;
          if (v112 == -1 || v113 > *(void *)(v3 + *v12))
          {
            *(unsigned char *)(v3 + *v35) = 1;
          }
          else
          {
            char v114 = *(unsigned char *)(*(void *)(v3 + *v36) + v112);
            *(void *)(v3 + v111) = v113;
            v110 |= (unint64_t)(v114 & 0x7F) << v108;
            if (v114 < 0)
            {
              v108 += 7;
              BOOL v43 = v109++ >= 9;
              if (v43)
              {
                uint64_t v110 = 0;
                goto LABEL_906;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v35)) {
          uint64_t v110 = 0;
        }
LABEL_906:
        BOOL v519 = v110 != 0;
        uint64_t v520 = 751;
        goto LABEL_1100;
      case 59:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        char v360 = 0;
        unsigned int v361 = 0;
        uint64_t v56 = 0;
        *(void *)(a1 + 756) |= 0x800000uLL;
        while (2)
        {
          uint64_t v362 = *v32;
          uint64_t v363 = *(void *)(v3 + v362);
          unint64_t v364 = v363 + 1;
          if (v363 == -1 || v364 > *(void *)(v3 + *v12))
          {
            *(unsigned char *)(v3 + *v35) = 1;
          }
          else
          {
            char v365 = *(unsigned char *)(*(void *)(v3 + *v36) + v363);
            *(void *)(v3 + v362) = v364;
            v56 |= (unint64_t)(v365 & 0x7F) << v360;
            if (v365 < 0)
            {
              v360 += 7;
              BOOL v43 = v361++ >= 9;
              if (v43)
              {
                LODWORD(v56) = 0;
                goto LABEL_1034;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v35)) {
          LODWORD(v56) = 0;
        }
LABEL_1034:
        uint64_t v518 = 688;
        goto LABEL_1079;
      case 60:
        if (!v48 || (*(unsigned char *)(a1 + 764) & 8) != 0) {
          goto LABEL_873;
        }
        if (v45 != 2)
        {
          char v558 = 0;
          unsigned int v559 = 0;
          uint64_t v560 = 0;
          while (1)
          {
            uint64_t v561 = *v32;
            uint64_t v562 = *(void *)(v3 + v561);
            unint64_t v563 = v562 + 1;
            if (v562 == -1 || v563 > *(void *)(v3 + *v12)) {
              goto LABEL_1249;
            }
            char v564 = *(unsigned char *)(*(void *)(v3 + *v36) + v562);
            *(void *)(v3 + v561) = v563;
            v560 |= (unint64_t)(v564 & 0x7F) << v558;
            if (v564 < 0)
            {
              v558 += 7;
              BOOL v43 = v559++ >= 9;
              if (!v43) {
                continue;
              }
            }
            goto LABEL_1250;
          }
        }
        if (!PBReaderPlaceMark()) {
          goto LABEL_1260;
        }
        while (1)
        {
          v366 = (int *)MEMORY[0x1E4F940E0];
          uint64_t v367 = (int *)MEMORY[0x1E4F940C8];
          if (*(void *)(v3 + *v32) >= *(void *)(v3 + (int)*MEMORY[0x1E4F940E0])
            || *(unsigned char *)(v3 + (int)*MEMORY[0x1E4F940C8]))
          {
            goto LABEL_731;
          }
          char v368 = 0;
          unsigned int v369 = 0;
          uint64_t v370 = 0;
          uint64_t v371 = (int *)MEMORY[0x1E4F940B8];
          while (1)
          {
            uint64_t v372 = *v32;
            uint64_t v373 = *(void *)(v3 + v372);
            unint64_t v374 = v373 + 1;
            if (v373 == -1 || v374 > *(void *)(v3 + *v366)) {
              break;
            }
            char v375 = *(unsigned char *)(*(void *)(v3 + *v371) + v373);
            *(void *)(v3 + v372) = v374;
            v370 |= (unint64_t)(v375 & 0x7F) << v368;
            if (v375 < 0)
            {
              v368 += 7;
              BOOL v43 = v369++ >= 9;
              if (!v43) {
                continue;
              }
            }
            goto LABEL_580;
          }
          *(unsigned char *)(v3 + *v367) = 1;
LABEL_580:
          PBRepeatedInt32Add();
        }
      case 61:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        char v115 = 0;
        unsigned int v116 = 0;
        uint64_t v117 = 0;
        *(void *)(a1 + 756) |= 0x40000000000uLL;
        while (2)
        {
          uint64_t v118 = *v32;
          uint64_t v119 = *(void *)(v3 + v118);
          unint64_t v120 = v119 + 1;
          if (v119 == -1 || v120 > *(void *)(v3 + *v12))
          {
            *(unsigned char *)(v3 + *v35) = 1;
          }
          else
          {
            char v121 = *(unsigned char *)(*(void *)(v3 + *v36) + v119);
            *(void *)(v3 + v118) = v120;
            v117 |= (unint64_t)(v121 & 0x7F) << v115;
            if (v121 < 0)
            {
              v115 += 7;
              BOOL v43 = v116++ >= 9;
              if (v43)
              {
                uint64_t v117 = 0;
                goto LABEL_910;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v35)) {
          uint64_t v117 = 0;
        }
LABEL_910:
        BOOL v519 = v117 != 0;
        uint64_t v520 = 734;
        goto LABEL_1100;
      case 62:
        if (!v48) {
          goto LABEL_873;
        }
        if ((*(unsigned char *)(a1 + 769) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_1260;
          }
          uint64_t v521 = *(void *)(a1 + 764) << 22;
          goto LABEL_1163;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_1260;
        }
        char v53 = objc_alloc_init(GEOTraitsTransitScheduleFilter);
        if (!GEOTraitsTransitScheduleFilterReadAllFrom((uint64_t)v53, (void *)v3, v8 & 1)) {
          goto LABEL_1259;
        }
        PBReaderRecallMark();
        uint64_t v66 = 576;
        goto LABEL_768;
      case 63:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        char v376 = 0;
        unsigned int v377 = 0;
        uint64_t v378 = 0;
        *(void *)(a1 + 756) |= 0x20000000000000uLL;
        while (2)
        {
          uint64_t v379 = *v32;
          uint64_t v380 = *(void *)(v3 + v379);
          unint64_t v381 = v380 + 1;
          if (v380 == -1 || v381 > *(void *)(v3 + *v12))
          {
            *(unsigned char *)(v3 + *v35) = 1;
          }
          else
          {
            char v382 = *(unsigned char *)(*(void *)(v3 + *v36) + v380);
            *(void *)(v3 + v379) = v381;
            v378 |= (unint64_t)(v382 & 0x7F) << v376;
            if (v382 < 0)
            {
              v376 += 7;
              BOOL v43 = v377++ >= 9;
              if (v43)
              {
                uint64_t v378 = 0;
                goto LABEL_1038;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v35)) {
          uint64_t v378 = 0;
        }
LABEL_1038:
        BOOL v519 = v378 != 0;
        uint64_t v520 = 745;
        goto LABEL_1100;
      case 64:
        if (!v48 || (*(unsigned char *)(a1 + 764) & 0x20) != 0) {
          goto LABEL_873;
        }
        if (v45 != 2)
        {
          char v565 = 0;
          unsigned int v566 = 0;
          uint64_t v567 = 0;
          while (1)
          {
            uint64_t v568 = *v32;
            uint64_t v569 = *(void *)(v3 + v568);
            unint64_t v570 = v569 + 1;
            if (v569 == -1 || v570 > *(void *)(v3 + *v12)) {
              goto LABEL_1249;
            }
            char v571 = *(unsigned char *)(*(void *)(v3 + *v36) + v569);
            *(void *)(v3 + v568) = v570;
            v567 |= (unint64_t)(v571 & 0x7F) << v565;
            if (v571 < 0)
            {
              v565 += 7;
              BOOL v43 = v566++ >= 9;
              if (!v43) {
                continue;
              }
            }
            goto LABEL_1250;
          }
        }
        if (!PBReaderPlaceMark()) {
          goto LABEL_1260;
        }
        while (1)
        {
          unint64_t v383 = (int *)MEMORY[0x1E4F940E0];
          uint64_t v384 = (int *)MEMORY[0x1E4F940C8];
          if (*(void *)(v3 + *v32) >= *(void *)(v3 + (int)*MEMORY[0x1E4F940E0])
            || *(unsigned char *)(v3 + (int)*MEMORY[0x1E4F940C8]))
          {
            goto LABEL_731;
          }
          char v385 = 0;
          unsigned int v386 = 0;
          uint64_t v387 = 0;
          char v388 = (int *)MEMORY[0x1E4F940B8];
          while (1)
          {
            uint64_t v389 = *v32;
            uint64_t v390 = *(void *)(v3 + v389);
            unint64_t v391 = v390 + 1;
            if (v390 == -1 || v391 > *(void *)(v3 + *v383)) {
              break;
            }
            char v392 = *(unsigned char *)(*(void *)(v3 + *v388) + v390);
            *(void *)(v3 + v389) = v391;
            v387 |= (unint64_t)(v392 & 0x7F) << v385;
            if (v392 < 0)
            {
              v385 += 7;
              BOOL v43 = v386++ >= 9;
              if (!v43) {
                continue;
              }
            }
            goto LABEL_608;
          }
          *(unsigned char *)(v3 + *v384) = 1;
LABEL_608:
          PBRepeatedInt32Add();
        }
      case 65:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        char v393 = 0;
        unsigned int v394 = 0;
        uint64_t v395 = 0;
        *(void *)(a1 + 756) |= 0x8000000000000uLL;
        while (2)
        {
          uint64_t v396 = *v32;
          uint64_t v397 = *(void *)(v3 + v396);
          unint64_t v398 = v397 + 1;
          if (v397 == -1 || v398 > *(void *)(v3 + *v12))
          {
            *(unsigned char *)(v3 + *v35) = 1;
          }
          else
          {
            char v399 = *(unsigned char *)(*(void *)(v3 + *v36) + v397);
            *(void *)(v3 + v396) = v398;
            v395 |= (unint64_t)(v399 & 0x7F) << v393;
            if (v399 < 0)
            {
              v393 += 7;
              BOOL v43 = v394++ >= 9;
              if (v43)
              {
                uint64_t v395 = 0;
                goto LABEL_1042;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v35)) {
          uint64_t v395 = 0;
        }
LABEL_1042:
        BOOL v519 = v395 != 0;
        uint64_t v520 = 743;
        goto LABEL_1100;
      case 66:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        char v400 = 0;
        unsigned int v401 = 0;
        uint64_t v402 = 0;
        *(void *)(a1 + 756) |= 0x10000000000uLL;
        while (2)
        {
          uint64_t v403 = *v32;
          uint64_t v404 = *(void *)(v3 + v403);
          unint64_t v405 = v404 + 1;
          if (v404 == -1 || v405 > *(void *)(v3 + *v12))
          {
            *(unsigned char *)(v3 + *v35) = 1;
          }
          else
          {
            char v406 = *(unsigned char *)(*(void *)(v3 + *v36) + v404);
            *(void *)(v3 + v403) = v405;
            v402 |= (unint64_t)(v406 & 0x7F) << v400;
            if (v406 < 0)
            {
              v400 += 7;
              BOOL v43 = v401++ >= 9;
              if (v43)
              {
                uint64_t v402 = 0;
                goto LABEL_1046;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v35)) {
          uint64_t v402 = 0;
        }
LABEL_1046:
        BOOL v519 = v402 != 0;
        uint64_t v520 = 732;
        goto LABEL_1100;
      case 67:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        char v407 = 0;
        unsigned int v408 = 0;
        uint64_t v409 = 0;
        *(void *)(a1 + 756) |= 0x800000000uLL;
        while (2)
        {
          uint64_t v410 = *v32;
          uint64_t v411 = *(void *)(v3 + v410);
          unint64_t v412 = v411 + 1;
          if (v411 == -1 || v412 > *(void *)(v3 + *v12))
          {
            *(unsigned char *)(v3 + *v35) = 1;
          }
          else
          {
            char v413 = *(unsigned char *)(*(void *)(v3 + *v36) + v411);
            *(void *)(v3 + v410) = v412;
            v409 |= (unint64_t)(v413 & 0x7F) << v407;
            if (v413 < 0)
            {
              v407 += 7;
              BOOL v43 = v408++ >= 9;
              if (v43)
              {
                uint64_t v409 = 0;
                goto LABEL_1050;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v35)) {
          uint64_t v409 = 0;
        }
LABEL_1050:
        BOOL v519 = v409 != 0;
        uint64_t v520 = 727;
        goto LABEL_1100;
      case 68:
        if (!v48 || (*(unsigned char *)(a1 + 764) & 0x10) != 0) {
          goto LABEL_873;
        }
        if (v45 != 2)
        {
          char v572 = 0;
          unsigned int v573 = 0;
          uint64_t v574 = 0;
          __int16 v575 = (int *)MEMORY[0x1E4F940B8];
          while (1)
          {
            uint64_t v576 = *v32;
            uint64_t v577 = *(void *)(v3 + v576);
            unint64_t v578 = v577 + 1;
            if (v577 == -1 || v578 > *(void *)(v3 + *v12)) {
              goto LABEL_1249;
            }
            char v579 = *(unsigned char *)(*(void *)(v3 + *v575) + v577);
            *(void *)(v3 + v576) = v578;
            v574 |= (unint64_t)(v579 & 0x7F) << v572;
            if (v579 < 0)
            {
              v572 += 7;
              BOOL v43 = v573++ >= 9;
              if (!v43) {
                continue;
              }
            }
            goto LABEL_1250;
          }
        }
        if (!PBReaderPlaceMark()) {
          goto LABEL_1260;
        }
        while (1)
        {
          uint64_t v414 = (int *)MEMORY[0x1E4F940E0];
          uint64_t v415 = (int *)MEMORY[0x1E4F940C8];
          if (*(void *)(v3 + *v32) >= *(void *)(v3 + (int)*MEMORY[0x1E4F940E0])
            || *(unsigned char *)(v3 + (int)*MEMORY[0x1E4F940C8]))
          {
            goto LABEL_731;
          }
          char v416 = 0;
          unsigned int v417 = 0;
          uint64_t v418 = 0;
          v419 = (int *)MEMORY[0x1E4F940B8];
          while (1)
          {
            uint64_t v420 = *v32;
            uint64_t v421 = *(void *)(v3 + v420);
            unint64_t v422 = v421 + 1;
            if (v421 == -1 || v422 > *(void *)(v3 + *v414)) {
              break;
            }
            char v423 = *(unsigned char *)(*(void *)(v3 + *v419) + v421);
            *(void *)(v3 + v420) = v422;
            v418 |= (unint64_t)(v423 & 0x7F) << v416;
            if (v423 < 0)
            {
              v416 += 7;
              BOOL v43 = v417++ >= 9;
              if (!v43) {
                continue;
              }
            }
            goto LABEL_647;
          }
          *(unsigned char *)(v3 + *v415) = 1;
LABEL_647:
          PBRepeatedInt32Add();
        }
      case 70:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        char v122 = 0;
        unsigned int v123 = 0;
        uint64_t v56 = 0;
        *(void *)(a1 + 756) |= 0x8000uLL;
        while (2)
        {
          uint64_t v124 = *v32;
          uint64_t v125 = *(void *)(v3 + v124);
          unint64_t v126 = v125 + 1;
          if (v125 == -1 || v126 > *(void *)(v3 + *v12))
          {
            *(unsigned char *)(v3 + *v35) = 1;
          }
          else
          {
            char v127 = *(unsigned char *)(*(void *)(v3 + *v36) + v125);
            *(void *)(v3 + v124) = v126;
            v56 |= (unint64_t)(v127 & 0x7F) << v122;
            if (v127 < 0)
            {
              v122 += 7;
              BOOL v43 = v123++ >= 9;
              if (v43)
              {
                LODWORD(v56) = 0;
                goto LABEL_914;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v35)) {
          LODWORD(v56) = 0;
        }
LABEL_914:
        uint64_t v518 = 656;
        goto LABEL_1079;
      case 71:
        if (!v48) {
          goto LABEL_873;
        }
        if ((*(unsigned char *)(a1 + 766) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_1260;
          }
          uint64_t v521 = *(void *)(a1 + 764) << 44;
          goto LABEL_1163;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_1260;
        }
        char v53 = objc_alloc_init(GEOCyclingOptions);
        if (!GEOCyclingOptionsReadAllFrom((uint64_t)v53, (void *)v3, v8 & 1)) {
          goto LABEL_1259;
        }
        PBReaderRecallMark();
        uint64_t v66 = 376;
        goto LABEL_768;
      case 72:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        char v128 = 0;
        unsigned int v129 = 0;
        uint64_t v56 = 0;
        *(void *)(a1 + 756) |= 0x80000uLL;
        while (2)
        {
          uint64_t v130 = *v32;
          uint64_t v131 = *(void *)(v3 + v130);
          unint64_t v132 = v131 + 1;
          if (v131 == -1 || v132 > *(void *)(v3 + *v12))
          {
            *(unsigned char *)(v3 + *v35) = 1;
          }
          else
          {
            char v133 = *(unsigned char *)(*(void *)(v3 + *v36) + v131);
            *(void *)(v3 + v130) = v132;
            v56 |= (unint64_t)(v133 & 0x7F) << v128;
            if (v133 < 0)
            {
              v128 += 7;
              BOOL v43 = v129++ >= 9;
              if (v43)
              {
                LODWORD(v56) = 0;
                goto LABEL_918;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v35)) {
          LODWORD(v56) = 0;
        }
LABEL_918:
        uint64_t v518 = 672;
        goto LABEL_1079;
      case 73:
        if (!v48 || (*(unsigned char *)(a1 + 767) & 2) != 0)
        {
LABEL_871:
          char v516 = PBReaderSkipValueWithTag();
          BOOL v35 = (int *)MEMORY[0x1E4F940C8];
          int v12 = (int *)MEMORY[0x1E4F940E0];
          if ((v516 & 1) == 0) {
            goto LABEL_1256;
          }
          goto LABEL_1165;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_1260;
        }
        char v53 = objc_alloc_init(GEOPDEvChargingPort);
        if (!GEOPDEvChargingPortReadAllFrom((uint64_t)v53, (void *)v3)) {
          goto LABEL_1259;
        }
        PBReaderRecallMark();
        -[GEOMapServiceTraits _addNoFlagsEvChargingPort:](a1, v53);
LABEL_658:

        goto LABEL_1164;
      case 74:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        char v424 = 0;
        unsigned int v425 = 0;
        uint64_t v426 = 0;
        *(void *)(a1 + 756) |= 0x80000000000uLL;
        while (2)
        {
          uint64_t v427 = *v32;
          uint64_t v428 = *(void *)(v3 + v427);
          unint64_t v429 = v428 + 1;
          if (v428 == -1 || v429 > *(void *)(v3 + *v12))
          {
            *(unsigned char *)(v3 + *v35) = 1;
          }
          else
          {
            char v430 = *(unsigned char *)(*(void *)(v3 + *v36) + v428);
            *(void *)(v3 + v427) = v429;
            v426 |= (unint64_t)(v430 & 0x7F) << v424;
            if (v430 < 0)
            {
              v424 += 7;
              BOOL v43 = v425++ >= 9;
              if (v43)
              {
                uint64_t v426 = 0;
                goto LABEL_1054;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v35)) {
          uint64_t v426 = 0;
        }
LABEL_1054:
        BOOL v519 = v426 != 0;
        uint64_t v520 = 735;
        goto LABEL_1100;
      case 75:
        if (!v48 || (*(unsigned char *)(a1 + 764) & 0x80) != 0) {
          goto LABEL_873;
        }
        if (v45 != 2)
        {
          char v580 = 0;
          unsigned int v581 = 0;
          uint64_t v582 = 0;
          int v583 = (int *)MEMORY[0x1E4F940B8];
          while (1)
          {
            uint64_t v584 = *v32;
            uint64_t v585 = *(void *)(v3 + v584);
            unint64_t v586 = v585 + 1;
            if (v585 == -1 || v586 > *(void *)(v3 + *v12)) {
              goto LABEL_1249;
            }
            char v587 = *(unsigned char *)(*(void *)(v3 + *v583) + v585);
            *(void *)(v3 + v584) = v586;
            v582 |= (unint64_t)(v587 & 0x7F) << v580;
            if (v587 < 0)
            {
              v580 += 7;
              BOOL v43 = v581++ >= 9;
              if (!v43) {
                continue;
              }
            }
            goto LABEL_1250;
          }
        }
        if (!PBReaderPlaceMark()) {
          goto LABEL_1260;
        }
        while (1)
        {
          v431 = (int *)MEMORY[0x1E4F940E0];
          uint64_t v432 = (int *)MEMORY[0x1E4F940C8];
          if (*(void *)(v3 + *v32) >= *(void *)(v3 + (int)*MEMORY[0x1E4F940E0])
            || *(unsigned char *)(v3 + (int)*MEMORY[0x1E4F940C8]))
          {
            goto LABEL_731;
          }
          char v433 = 0;
          unsigned int v434 = 0;
          uint64_t v435 = 0;
          float v436 = (int *)MEMORY[0x1E4F940B8];
          while (1)
          {
            uint64_t v437 = *v32;
            uint64_t v438 = *(void *)(v3 + v437);
            unint64_t v439 = v438 + 1;
            if (v438 == -1 || v439 > *(void *)(v3 + *v431)) {
              break;
            }
            char v440 = *(unsigned char *)(*(void *)(v3 + *v436) + v438);
            *(void *)(v3 + v437) = v439;
            v435 |= (unint64_t)(v440 & 0x7F) << v433;
            if (v440 < 0)
            {
              v433 += 7;
              BOOL v43 = v434++ >= 9;
              if (!v43) {
                continue;
              }
            }
            goto LABEL_681;
          }
          *(unsigned char *)(v3 + *v432) = 1;
LABEL_681:
          PBRepeatedInt32Add();
        }
      case 76:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        char v441 = 0;
        unsigned int v442 = 0;
        uint64_t v56 = 0;
        *(void *)(a1 + 756) |= 0x80uLL;
        while (2)
        {
          uint64_t v443 = *v32;
          uint64_t v444 = *(void *)(v3 + v443);
          unint64_t v445 = v444 + 1;
          if (v444 == -1 || v445 > *(void *)(v3 + *v12))
          {
            *(unsigned char *)(v3 + *v35) = 1;
          }
          else
          {
            char v446 = *(unsigned char *)(*(void *)(v3 + *v36) + v444);
            *(void *)(v3 + v443) = v445;
            v56 |= (unint64_t)(v446 & 0x7F) << v441;
            if (v446 < 0)
            {
              v441 += 7;
              BOOL v43 = v442++ >= 9;
              if (v43)
              {
                LODWORD(v56) = 0;
                goto LABEL_1058;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v35)) {
          LODWORD(v56) = 0;
        }
LABEL_1058:
        uint64_t v518 = 624;
        goto LABEL_1079;
      case 77:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        char v447 = 0;
        unsigned int v448 = 0;
        uint64_t v56 = 0;
        *(void *)(a1 + 756) |= 0x40000uLL;
        while (2)
        {
          uint64_t v449 = *v32;
          uint64_t v450 = *(void *)(v3 + v449);
          unint64_t v451 = v450 + 1;
          if (v450 == -1 || v451 > *(void *)(v3 + *v12))
          {
            *(unsigned char *)(v3 + *v35) = 1;
          }
          else
          {
            char v452 = *(unsigned char *)(*(void *)(v3 + *v36) + v450);
            *(void *)(v3 + v449) = v451;
            v56 |= (unint64_t)(v452 & 0x7F) << v447;
            if (v452 < 0)
            {
              v447 += 7;
              BOOL v43 = v448++ >= 9;
              if (v43)
              {
                LODWORD(v56) = 0;
                goto LABEL_1062;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v35)) {
          LODWORD(v56) = 0;
        }
LABEL_1062:
        uint64_t v518 = 668;
        goto LABEL_1079;
      case 78:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        *(void *)(a1 + 756) |= 8uLL;
        uint64_t v134 = *v32;
        unint64_t v135 = *(void *)(v3 + v134);
        if (v135 <= 0xFFFFFFFFFFFFFFF7 && v135 + 8 <= *(void *)(v3 + *v12))
        {
          uint64_t v65 = *(void *)(*(void *)(v3 + *v36) + v135);
          *(void *)(v3 + v134) = v135 + 8;
        }
        else
        {
          *(unsigned char *)(v3 + *v35) = 1;
          uint64_t v65 = 0;
        }
        uint64_t v522 = 448;
LABEL_1213:
        *(void *)(a1 + v522) = v65;
        goto LABEL_1165;
      case 79:
        if (!v48 || (*(unsigned char *)(a1 + 764) & 2) != 0) {
          goto LABEL_873;
        }
        if (v45 != 2)
        {
          char v523 = 0;
          unsigned int v524 = 0;
          uint64_t v525 = 0;
          while (1)
          {
            uint64_t v526 = *v32;
            unint64_t v527 = *(void *)(v3 + v526);
            if (v527 == -1 || v527 >= *(void *)(v3 + *v12)) {
              goto LABEL_1249;
            }
            char v528 = *(unsigned char *)(*(void *)(v3 + *v36) + v527);
            *(void *)(v3 + v526) = v527 + 1;
            v525 |= (unint64_t)(v528 & 0x7F) << v523;
            if (v528 < 0)
            {
              v523 += 7;
              BOOL v43 = v524++ >= 9;
              if (!v43) {
                continue;
              }
            }
            goto LABEL_1250;
          }
        }
        if (!PBReaderPlaceMark()) {
          goto LABEL_1260;
        }
        while (1)
        {
          char v136 = (int *)MEMORY[0x1E4F940E0];
          char v137 = (int *)MEMORY[0x1E4F940C8];
          if (*(void *)(v3 + *v32) >= *(void *)(v3 + (int)*MEMORY[0x1E4F940E0])
            || *(unsigned char *)(v3 + (int)*MEMORY[0x1E4F940C8]))
          {
            goto LABEL_731;
          }
          char v138 = 0;
          unsigned int v139 = 0;
          uint64_t v140 = 0;
          char v141 = (int *)MEMORY[0x1E4F940B8];
          while (1)
          {
            uint64_t v142 = *v32;
            unint64_t v143 = *(void *)(v3 + v142);
            if (v143 == -1 || v143 >= *(void *)(v3 + *v136)) {
              break;
            }
            char v144 = *(unsigned char *)(*(void *)(v3 + *v141) + v143);
            *(void *)(v3 + v142) = v143 + 1;
            v140 |= (unint64_t)(v144 & 0x7F) << v138;
            if (v144 < 0)
            {
              v138 += 7;
              BOOL v43 = v139++ >= 9;
              if (!v43) {
                continue;
              }
            }
            goto LABEL_166;
          }
          *(unsigned char *)(v3 + *v137) = 1;
LABEL_166:
          PBRepeatedInt32Add();
        }
      case 80:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        char v453 = 0;
        unsigned int v454 = 0;
        uint64_t v455 = 0;
        *(void *)(a1 + 756) |= 0x4000000000000uLL;
        while (2)
        {
          uint64_t v456 = *v32;
          unint64_t v457 = *(void *)(v3 + v456);
          if (v457 == -1 || v457 >= *(void *)(v3 + *v12))
          {
            *(unsigned char *)(v3 + *v35) = 1;
          }
          else
          {
            char v458 = *(unsigned char *)(*(void *)(v3 + *v36) + v457);
            *(void *)(v3 + v456) = v457 + 1;
            v455 |= (unint64_t)(v458 & 0x7F) << v453;
            if (v458 < 0)
            {
              v453 += 7;
              BOOL v43 = v454++ >= 9;
              if (v43)
              {
                uint64_t v455 = 0;
                goto LABEL_1066;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v35)) {
          uint64_t v455 = 0;
        }
LABEL_1066:
        BOOL v519 = v455 != 0;
        uint64_t v520 = 742;
        goto LABEL_1100;
      case 81:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        char v145 = 0;
        unsigned int v146 = 0;
        uint64_t v147 = 0;
        *(void *)(a1 + 756) |= 0x2000000000000uLL;
        while (2)
        {
          uint64_t v148 = *v32;
          unint64_t v149 = *(void *)(v3 + v148);
          if (v149 == -1 || v149 >= *(void *)(v3 + *v12))
          {
            *(unsigned char *)(v3 + *v35) = 1;
          }
          else
          {
            char v150 = *(unsigned char *)(*(void *)(v3 + *v36) + v149);
            *(void *)(v3 + v148) = v149 + 1;
            v147 |= (unint64_t)(v150 & 0x7F) << v145;
            if (v150 < 0)
            {
              v145 += 7;
              BOOL v43 = v146++ >= 9;
              if (v43)
              {
                uint64_t v147 = 0;
                goto LABEL_922;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v35)) {
          uint64_t v147 = 0;
        }
LABEL_922:
        BOOL v519 = v147 != 0;
        uint64_t v520 = 741;
        goto LABEL_1100;
      case 82:
        if (!v48) {
          goto LABEL_873;
        }
        if ((*(unsigned char *)(a1 + 767) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_1319;
          }
          uint64_t v521 = *(void *)(a1 + 764) << 33;
          goto LABEL_1163;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_1260;
        }
        char v53 = objc_alloc_init(GEOPDViewportInfo);
        if (!GEOPDViewportInfoReadAllFrom((uint64_t)v53, (void *)v3)) {
          goto LABEL_1259;
        }
        PBReaderRecallMark();
        uint64_t v66 = 480;
        goto LABEL_768;
      case 83:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        char v151 = 0;
        unsigned int v152 = 0;
        uint64_t v56 = 0;
        *(void *)(a1 + 756) |= 0x10000uLL;
        while (2)
        {
          uint64_t v153 = *v32;
          unint64_t v154 = *(void *)(v3 + v153);
          if (v154 == -1 || v154 >= *(void *)(v3 + *v12))
          {
            *(unsigned char *)(v3 + *v35) = 1;
          }
          else
          {
            char v155 = *(unsigned char *)(*(void *)(v3 + *v36) + v154);
            *(void *)(v3 + v153) = v154 + 1;
            v56 |= (unint64_t)(v155 & 0x7F) << v151;
            if (v155 < 0)
            {
              v151 += 7;
              BOOL v43 = v152++ >= 9;
              if (v43)
              {
                LODWORD(v56) = 0;
                goto LABEL_926;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v35)) {
          LODWORD(v56) = 0;
        }
LABEL_926:
        uint64_t v518 = 660;
        goto LABEL_1079;
      case 84:
        if (!v48) {
          goto LABEL_873;
        }
        if ((*(unsigned char *)(a1 + 768) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_1319;
          }
          uint64_t v521 = *(void *)(a1 + 764) << 29;
          goto LABEL_1163;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_1260;
        }
        char v53 = objc_alloc_init(GEOPDResultRefinementQuery);
        if (!GEOPDResultRefinementQueryReadAllFrom((uint64_t)v53, (void *)v3, v8 & 1)) {
          goto LABEL_1259;
        }
        PBReaderRecallMark();
        uint64_t v66 = 512;
        goto LABEL_768;
      case 85:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        char v156 = 0;
        unsigned int v157 = 0;
        uint64_t v56 = 0;
        *(void *)(a1 + 756) |= 0x100000uLL;
        while (2)
        {
          uint64_t v158 = *v32;
          unint64_t v159 = *(void *)(v3 + v158);
          if (v159 == -1 || v159 >= *(void *)(v3 + *v12))
          {
            *(unsigned char *)(v3 + *v35) = 1;
          }
          else
          {
            char v160 = *(unsigned char *)(*(void *)(v3 + *v36) + v159);
            *(void *)(v3 + v158) = v159 + 1;
            v56 |= (unint64_t)(v160 & 0x7F) << v156;
            if (v160 < 0)
            {
              v156 += 7;
              BOOL v43 = v157++ >= 9;
              if (v43)
              {
                LODWORD(v56) = 0;
                goto LABEL_930;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v35)) {
          LODWORD(v56) = 0;
        }
LABEL_930:
        uint64_t v518 = 676;
        goto LABEL_1079;
      case 86:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        char v161 = 0;
        unsigned int v162 = 0;
        uint64_t v56 = 0;
        *(void *)(a1 + 756) |= 0x4000000uLL;
        while (2)
        {
          uint64_t v163 = *v32;
          unint64_t v164 = *(void *)(v3 + v163);
          if (v164 == -1 || v164 >= *(void *)(v3 + *v12))
          {
            *(unsigned char *)(v3 + *v35) = 1;
          }
          else
          {
            char v165 = *(unsigned char *)(*(void *)(v3 + *v36) + v164);
            *(void *)(v3 + v163) = v164 + 1;
            v56 |= (unint64_t)(v165 & 0x7F) << v161;
            if (v165 < 0)
            {
              v161 += 7;
              BOOL v43 = v162++ >= 9;
              if (v43)
              {
                LODWORD(v56) = 0;
                goto LABEL_934;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v35)) {
          LODWORD(v56) = 0;
        }
LABEL_934:
        uint64_t v518 = 700;
        goto LABEL_1079;
      case 87:
        if (!v48) {
          goto LABEL_873;
        }
        if ((*(unsigned char *)(a1 + 766) & 4) == 0)
        {
          uint64_t v61 = PBReaderReadString();
          uint64_t v62 = 368;
          goto LABEL_823;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_1319;
        }
        uint64_t v521 = *(void *)(a1 + 764) << 45;
        goto LABEL_1163;
      case 88:
        if (!v48 || (*(unsigned char *)(a1 + 764) & 0x40) != 0) {
          goto LABEL_873;
        }
        if (v45 != 2)
        {
          char v588 = 0;
          unsigned int v589 = 0;
          uint64_t v590 = 0;
          while (1)
          {
            uint64_t v591 = *v32;
            unint64_t v592 = *(void *)(v3 + v591);
            if (v592 == -1 || v592 >= *(void *)(v3 + *v12)) {
              break;
            }
            char v593 = *(unsigned char *)(*(void *)(v3 + *v36) + v592);
            *(void *)(v3 + v591) = v592 + 1;
            v590 |= (unint64_t)(v593 & 0x7F) << v588;
            if (v593 < 0)
            {
              v588 += 7;
              BOOL v43 = v589++ >= 9;
              if (!v43) {
                continue;
              }
            }
            goto LABEL_1250;
          }
LABEL_1249:
          *(unsigned char *)(v3 + *v35) = 1;
LABEL_1250:
          PBRepeatedInt32Add();
          goto LABEL_1164;
        }
        if (!PBReaderPlaceMark()) {
          goto LABEL_1260;
        }
        while (1)
        {
          uint64_t v459 = (int *)MEMORY[0x1E4F940E0];
          uint64_t v460 = (int *)MEMORY[0x1E4F940C8];
          if (*(void *)(v3 + *v32) >= *(void *)(v3 + (int)*MEMORY[0x1E4F940E0])
            || *(unsigned char *)(v3 + (int)*MEMORY[0x1E4F940C8]))
          {
            break;
          }
          char v461 = 0;
          unsigned int v462 = 0;
          uint64_t v463 = 0;
          uint64_t v464 = (int *)MEMORY[0x1E4F940B8];
          while (1)
          {
            uint64_t v465 = *v32;
            unint64_t v466 = *(void *)(v3 + v465);
            if (v466 == -1 || v466 >= *(void *)(v3 + *v459)) {
              break;
            }
            char v467 = *(unsigned char *)(*(void *)(v3 + *v464) + v466);
            *(void *)(v3 + v465) = v466 + 1;
            v463 |= (unint64_t)(v467 & 0x7F) << v461;
            if (v467 < 0)
            {
              v461 += 7;
              BOOL v43 = v462++ >= 9;
              if (!v43) {
                continue;
              }
            }
            goto LABEL_730;
          }
          *(unsigned char *)(v3 + *v460) = 1;
LABEL_730:
          PBRepeatedInt32Add();
        }
LABEL_731:
        PBReaderRecallMark();
        int v12 = (int *)MEMORY[0x1E4F940E0];
        BOOL v35 = (int *)MEMORY[0x1E4F940C8];
        goto LABEL_1165;
      case 89:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        char v166 = 0;
        unsigned int v167 = 0;
        uint64_t v56 = 0;
        *(void *)(a1 + 756) |= 0x40uLL;
        while (2)
        {
          uint64_t v168 = *v32;
          unint64_t v169 = *(void *)(v3 + v168);
          if (v169 == -1 || v169 >= *(void *)(v3 + *v12))
          {
            *(unsigned char *)(v3 + *v35) = 1;
          }
          else
          {
            char v170 = *(unsigned char *)(*(void *)(v3 + *v36) + v169);
            *(void *)(v3 + v168) = v169 + 1;
            v56 |= (unint64_t)(v170 & 0x7F) << v166;
            if (v170 < 0)
            {
              v166 += 7;
              BOOL v43 = v167++ >= 9;
              if (v43)
              {
                LODWORD(v56) = 0;
                goto LABEL_938;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v35)) {
          LODWORD(v56) = 0;
        }
LABEL_938:
        uint64_t v518 = 620;
        goto LABEL_1079;
      case 90:
        if (!v48) {
          goto LABEL_873;
        }
        if ((*(unsigned char *)(a1 + 765) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_1319;
          }
          uint64_t v521 = *(void *)(a1 + 764) << 49;
          goto LABEL_1163;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_1260;
        }
        char v53 = objc_alloc_init(GEOLatLng);
        if (!GEOLatLngReadAllFrom((uint64_t)v53, (void *)v3)) {
          goto LABEL_1259;
        }
        PBReaderRecallMark();
        uint64_t v66 = 320;
        goto LABEL_768;
      case 91:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        char v171 = 0;
        unsigned int v172 = 0;
        uint64_t v56 = 0;
        *(void *)(a1 + 756) |= 0x8000000uLL;
        while (2)
        {
          uint64_t v173 = *v32;
          unint64_t v174 = *(void *)(v3 + v173);
          if (v174 == -1 || v174 >= *(void *)(v3 + *v12))
          {
            *(unsigned char *)(v3 + *v35) = 1;
          }
          else
          {
            char v175 = *(unsigned char *)(*(void *)(v3 + *v36) + v174);
            *(void *)(v3 + v173) = v174 + 1;
            v56 |= (unint64_t)(v175 & 0x7F) << v171;
            if (v175 < 0)
            {
              v171 += 7;
              BOOL v43 = v172++ >= 9;
              if (v43)
              {
                LODWORD(v56) = 0;
                goto LABEL_942;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v35)) {
          LODWORD(v56) = 0;
        }
LABEL_942:
        uint64_t v518 = 704;
        goto LABEL_1079;
      case 92:
        if (!v48) {
          goto LABEL_873;
        }
        if ((*(unsigned char *)(a1 + 768) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_1319;
          }
          uint64_t v521 = *(void *)(a1 + 764) << 26;
          goto LABEL_1163;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_1260;
        }
        char v53 = objc_alloc_init(GEOLatLng);
        if (!GEOLatLngReadAllFrom((uint64_t)v53, (void *)v3)) {
          goto LABEL_1259;
        }
        PBReaderRecallMark();
        uint64_t v66 = 536;
        goto LABEL_768;
      case 94:
        if (!v48) {
          goto LABEL_873;
        }
        if ((*(unsigned char *)(a1 + 765) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_1319;
          }
          uint64_t v521 = *(void *)(a1 + 764) << 54;
          goto LABEL_1163;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_1260;
        }
        char v53 = objc_alloc_init(GEOAddStopRouteInfo);
        if (!GEOAddStopRouteInfoReadAllFrom((uint64_t)v53, (void *)v3, v8 & 1)) {
          goto LABEL_1259;
        }
        PBReaderRecallMark();
        uint64_t v66 = 280;
        goto LABEL_768;
      case 95:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        char v176 = 0;
        unsigned int v177 = 0;
        uint64_t v178 = 0;
        *(void *)(a1 + 756) |= 0x400000000uLL;
        while (2)
        {
          uint64_t v179 = *v32;
          unint64_t v180 = *(void *)(v3 + v179);
          if (v180 == -1 || v180 >= *(void *)(v3 + *v12))
          {
            *(unsigned char *)(v3 + *v35) = 1;
          }
          else
          {
            char v181 = *(unsigned char *)(*(void *)(v3 + *v36) + v180);
            *(void *)(v3 + v179) = v180 + 1;
            v178 |= (unint64_t)(v181 & 0x7F) << v176;
            if (v181 < 0)
            {
              v176 += 7;
              BOOL v43 = v177++ >= 9;
              if (v43)
              {
                uint64_t v178 = 0;
                goto LABEL_946;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v35)) {
          uint64_t v178 = 0;
        }
LABEL_946:
        BOOL v519 = v178 != 0;
        uint64_t v520 = 726;
        goto LABEL_1100;
      case 96:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        char v468 = 0;
        unsigned int v469 = 0;
        uint64_t v470 = 0;
        *(void *)(a1 + 756) |= 0x1000000000000uLL;
        while (2)
        {
          uint64_t v471 = *v32;
          unint64_t v472 = *(void *)(v3 + v471);
          if (v472 == -1 || v472 >= *(void *)(v3 + *v12))
          {
            *(unsigned char *)(v3 + *v35) = 1;
          }
          else
          {
            char v473 = *(unsigned char *)(*(void *)(v3 + *v36) + v472);
            *(void *)(v3 + v471) = v472 + 1;
            v470 |= (unint64_t)(v473 & 0x7F) << v468;
            if (v473 < 0)
            {
              v468 += 7;
              BOOL v43 = v469++ >= 9;
              if (v43)
              {
                uint64_t v470 = 0;
                goto LABEL_1070;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v35)) {
          uint64_t v470 = 0;
        }
LABEL_1070:
        BOOL v519 = v470 != 0;
        uint64_t v520 = 740;
        goto LABEL_1100;
      case 97:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        char v182 = 0;
        unsigned int v183 = 0;
        uint64_t v184 = 0;
        *(void *)(a1 + 756) |= 0x10000000000000uLL;
        while (2)
        {
          uint64_t v185 = *v32;
          unint64_t v186 = *(void *)(v3 + v185);
          if (v186 == -1 || v186 >= *(void *)(v3 + *v12))
          {
            *(unsigned char *)(v3 + *v35) = 1;
          }
          else
          {
            char v187 = *(unsigned char *)(*(void *)(v3 + *v36) + v186);
            *(void *)(v3 + v185) = v186 + 1;
            v184 |= (unint64_t)(v187 & 0x7F) << v182;
            if (v187 < 0)
            {
              v182 += 7;
              BOOL v43 = v183++ >= 9;
              if (v43)
              {
                uint64_t v184 = 0;
                goto LABEL_950;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v35)) {
          uint64_t v184 = 0;
        }
LABEL_950:
        BOOL v519 = v184 != 0;
        uint64_t v520 = 744;
        goto LABEL_1100;
      case 98:
        if (!v48) {
          goto LABEL_873;
        }
        if ((*(unsigned char *)(a1 + 767) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_1319;
          }
          uint64_t v521 = *(void *)(a1 + 764) << 32;
          goto LABEL_1163;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_1260;
        }
        char v53 = objc_alloc_init(GEOPrivacyMetadata);
        if (!GEOPrivacyMetadataReadAllFrom((uint64_t)v53, (void *)v3)) {
          goto LABEL_1259;
        }
        PBReaderRecallMark();
        uint64_t v66 = 488;
        goto LABEL_768;
      case 99:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        char v188 = 0;
        unsigned int v189 = 0;
        uint64_t v56 = 0;
        *(void *)(a1 + 756) |= 0x2000000uLL;
        while (2)
        {
          uint64_t v190 = *v32;
          unint64_t v191 = *(void *)(v3 + v190);
          if (v191 == -1 || v191 >= *(void *)(v3 + *v12))
          {
            *(unsigned char *)(v3 + *v35) = 1;
          }
          else
          {
            char v192 = *(unsigned char *)(*(void *)(v3 + *v36) + v191);
            *(void *)(v3 + v190) = v191 + 1;
            v56 |= (unint64_t)(v192 & 0x7F) << v188;
            if (v192 < 0)
            {
              v188 += 7;
              BOOL v43 = v189++ >= 9;
              if (v43)
              {
                LODWORD(v56) = 0;
                goto LABEL_954;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v35)) {
          LODWORD(v56) = 0;
        }
LABEL_954:
        uint64_t v518 = 696;
        goto LABEL_1079;
      case 100:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        char v193 = 0;
        unsigned int v194 = 0;
        uint64_t v195 = 0;
        *(void *)(a1 + 756) |= 0x200000000000000uLL;
        while (2)
        {
          uint64_t v196 = *v32;
          unint64_t v197 = *(void *)(v3 + v196);
          if (v197 == -1 || v197 >= *(void *)(v3 + *v12))
          {
            *(unsigned char *)(v3 + *v35) = 1;
          }
          else
          {
            char v198 = *(unsigned char *)(*(void *)(v3 + *v36) + v197);
            *(void *)(v3 + v196) = v197 + 1;
            v195 |= (unint64_t)(v198 & 0x7F) << v193;
            if (v198 < 0)
            {
              v193 += 7;
              BOOL v43 = v194++ >= 9;
              if (v43)
              {
                uint64_t v195 = 0;
                goto LABEL_958;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v35)) {
          uint64_t v195 = 0;
        }
LABEL_958:
        BOOL v519 = v195 != 0;
        uint64_t v520 = 749;
        goto LABEL_1100;
      case 102:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        char v199 = 0;
        unsigned int v200 = 0;
        uint64_t v201 = 0;
        *(void *)(a1 + 756) |= 0x20000000000uLL;
        while (2)
        {
          uint64_t v202 = *v32;
          unint64_t v203 = *(void *)(v3 + v202);
          if (v203 == -1 || v203 >= *(void *)(v3 + *v12))
          {
            *(unsigned char *)(v3 + *v35) = 1;
          }
          else
          {
            char v204 = *(unsigned char *)(*(void *)(v3 + *v36) + v203);
            *(void *)(v3 + v202) = v203 + 1;
            v201 |= (unint64_t)(v204 & 0x7F) << v199;
            if (v204 < 0)
            {
              v199 += 7;
              BOOL v43 = v200++ >= 9;
              if (v43)
              {
                uint64_t v201 = 0;
                goto LABEL_962;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v35)) {
          uint64_t v201 = 0;
        }
LABEL_962:
        BOOL v519 = v201 != 0;
        uint64_t v520 = 733;
        goto LABEL_1100;
      case 103:
        if (!v48 || (*(unsigned char *)(a1 + 764) & 4) != 0) {
          goto LABEL_873;
        }
        if (v45 != 2)
        {
          char v529 = 0;
          unsigned int v530 = 0;
          uint64_t v531 = 0;
          uint64_t v532 = (int *)MEMORY[0x1E4F940B8];
          while (1)
          {
            uint64_t v533 = *v32;
            unint64_t v534 = *(void *)(v3 + v533);
            if (v534 == -1 || v534 >= *(void *)(v3 + *v12)) {
              break;
            }
            char v535 = *(unsigned char *)(*(void *)(v3 + *v532) + v534);
            *(void *)(v3 + v533) = v534 + 1;
            v531 |= (unint64_t)(v535 & 0x7F) << v529;
            if (v535 < 0)
            {
              v529 += 7;
              BOOL v43 = v530++ >= 9;
              if (!v43) {
                continue;
              }
            }
            goto LABEL_1252;
          }
          *(unsigned char *)(v3 + *v35) = 1;
LABEL_1252:
          PBRepeatedUInt64Add();
          goto LABEL_1164;
        }
        if (!PBReaderPlaceMark()) {
          goto LABEL_1260;
        }
        while (1)
        {
          unint64_t v205 = (int *)MEMORY[0x1E4F940E0];
          uint64_t v206 = (int *)MEMORY[0x1E4F940C8];
          if (*(void *)(v3 + *v32) >= *(void *)(v3 + (int)*MEMORY[0x1E4F940E0])
            || *(unsigned char *)(v3 + (int)*MEMORY[0x1E4F940C8]))
          {
            goto LABEL_731;
          }
          char v207 = 0;
          unsigned int v208 = 0;
          uint64_t v209 = 0;
          int v210 = (int *)MEMORY[0x1E4F940B8];
          while (1)
          {
            uint64_t v211 = *v32;
            unint64_t v212 = *(void *)(v3 + v211);
            if (v212 == -1 || v212 >= *(void *)(v3 + *v205)) {
              break;
            }
            char v213 = *(unsigned char *)(*(void *)(v3 + *v210) + v212);
            *(void *)(v3 + v211) = v212 + 1;
            v209 |= (unint64_t)(v213 & 0x7F) << v207;
            if (v213 < 0)
            {
              v207 += 7;
              BOOL v43 = v208++ >= 9;
              if (!v43) {
                continue;
              }
            }
            goto LABEL_277;
          }
          *(unsigned char *)(v3 + *v206) = 1;
LABEL_277:
          PBRepeatedUInt64Add();
        }
      case 104:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        char v474 = 0;
        unsigned int v475 = 0;
        uint64_t v476 = 0;
        *(void *)(a1 + 756) |= 0x100000000000uLL;
        while (2)
        {
          uint64_t v477 = *v32;
          unint64_t v478 = *(void *)(v3 + v477);
          if (v478 == -1 || v478 >= *(void *)(v3 + *v12))
          {
            *(unsigned char *)(v3 + *v35) = 1;
          }
          else
          {
            char v479 = *(unsigned char *)(*(void *)(v3 + *v36) + v478);
            *(void *)(v3 + v477) = v478 + 1;
            v476 |= (unint64_t)(v479 & 0x7F) << v474;
            if (v479 < 0)
            {
              v474 += 7;
              BOOL v43 = v475++ >= 9;
              if (v43)
              {
                uint64_t v476 = 0;
                goto LABEL_1074;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v35)) {
          uint64_t v476 = 0;
        }
LABEL_1074:
        BOOL v519 = v476 != 0;
        uint64_t v520 = 736;
        goto LABEL_1100;
      case 105:
        if (!v48) {
          goto LABEL_873;
        }
        if ((*(unsigned char *)(a1 + 768) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_1319;
          }
          uint64_t v521 = *(void *)(a1 + 764) << 27;
LABEL_1163:
          v6 += v521 >> 63;
          goto LABEL_1164;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_1260;
        }
        char v53 = objc_alloc_init(GEOSearchImplicitFilterInfo);
        if (GEOSearchImplicitFilterInfoReadAllFrom((uint64_t)v53, (void *)v3))
        {
          PBReaderRecallMark();
          uint64_t v66 = 528;
LABEL_768:
          int v480 = *(void **)(a1 + v66);
          *(void *)(a1 + v66) = v53;
          goto LABEL_824;
        }
LABEL_1259:

LABEL_1260:
        int v34 = 0;
        BOOL v35 = (int *)MEMORY[0x1E4F940C8];
        char v30 = v602;
LABEL_1261:
        if (v30) {
LABEL_1262:
        }
          *(void *)(a1 + 756) |= 0x4000000000000000uLL;
LABEL_1263:
        if (v31 & 1 | ((v34 & 1) == 0))
        {
          uint64_t v594 = *(void *)(a1 + 764) | 0x1FFFFFFFFFFFLL;
          *(void *)(a1 + 756) |= 0x8000000000000000;
          *(void *)(a1 + 764) = v594;
        }
        else if (v33)
        {
          while (1)
          {
            int v595 = *v33++;
            unint64_t v596 = 0;
            uint64_t v597 = 2048;
            switch(v595)
            {
              case 0:
                goto LABEL_1313;
              case 3:
                goto LABEL_1312;
              case 4:
                unint64_t v596 = 0;
                uint64_t v597 = 4096;
                goto LABEL_1312;
              case 5:
                unint64_t v596 = 0;
                uint64_t v597 = 0x2000;
                goto LABEL_1312;
              case 6:
                unint64_t v596 = 0;
                uint64_t v597 = 0x100000;
                goto LABEL_1312;
              case 7:
                unint64_t v596 = 0;
                uint64_t v597 = 256;
                goto LABEL_1312;
              case 8:
                unint64_t v596 = 0;
                uint64_t v597 = 0x10000000;
                goto LABEL_1312;
              case 9:
                unint64_t v596 = 0;
                uint64_t v597 = 0x200000;
                goto LABEL_1312;
              case 10:
                unint64_t v596 = 0;
                uint64_t v597 = 0x400000;
                goto LABEL_1312;
              case 11:
                unint64_t v596 = 0;
                uint64_t v597 = 0x800000;
                goto LABEL_1312;
              case 16:
                unint64_t v596 = 0;
                uint64_t v597 = 0x20000000;
                goto LABEL_1312;
              case 18:
                unint64_t v596 = 0;
                uint64_t v597 = 0x800000000;
                goto LABEL_1312;
              case 24:
                unint64_t v596 = 0;
                uint64_t v597 = 0x10000;
                goto LABEL_1312;
              case 25:
                unint64_t v596 = 0;
                uint64_t v597 = 0x20000;
                goto LABEL_1312;
              case 28:
                unint64_t v596 = 0;
                uint64_t v597 = 0x10000000000;
                goto LABEL_1312;
              case 31:
                unint64_t v596 = 0;
                uint64_t v597 = 0x1000000;
                goto LABEL_1312;
              case 32:
                unint64_t v596 = 0;
                uint64_t v597 = 0x100000000;
                goto LABEL_1312;
              case 38:
                unint64_t v596 = 0;
                uint64_t v597 = 0x8000000;
                goto LABEL_1312;
              case 39:
                unint64_t v596 = 0;
                uint64_t v597 = 0x8000;
                goto LABEL_1312;
              case 40:
                unint64_t v596 = 0;
                uint64_t v597 = 0x8000000000;
                goto LABEL_1312;
              case 41:
                unint64_t v596 = 0;
                uint64_t v597 = 0x100000000000;
                goto LABEL_1312;
              case 42:
                uint64_t v597 = 0;
                unint64_t v596 = 0x8000000000000000;
                goto LABEL_1312;
              case 45:
                unint64_t v596 = 0;
                uint64_t v597 = 1;
                goto LABEL_1312;
              case 47:
                unint64_t v596 = 0;
                uint64_t v597 = 0x80000000000;
                goto LABEL_1312;
              case 52:
                unint64_t v596 = 0;
                uint64_t v597 = 1024;
                goto LABEL_1312;
              case 60:
                unint64_t v596 = 0;
                uint64_t v597 = 8;
                goto LABEL_1312;
              case 62:
                unint64_t v596 = 0;
                uint64_t v597 = 0x20000000000;
                goto LABEL_1312;
              case 64:
                unint64_t v596 = 0;
                uint64_t v597 = 32;
                goto LABEL_1312;
              case 68:
                unint64_t v596 = 0;
                uint64_t v597 = 16;
                goto LABEL_1312;
              case 71:
                unint64_t v596 = 0;
                uint64_t v597 = 0x80000;
                goto LABEL_1312;
              case 73:
                unint64_t v596 = 0;
                uint64_t v597 = 0x2000000;
                goto LABEL_1312;
              case 75:
                unint64_t v596 = 0;
                uint64_t v597 = 128;
                goto LABEL_1312;
              case 79:
                unint64_t v596 = 0;
                uint64_t v597 = 2;
                goto LABEL_1312;
              case 82:
                unint64_t v596 = 0;
                uint64_t v597 = 0x40000000;
                goto LABEL_1312;
              case 84:
                unint64_t v596 = 0;
                uint64_t v597 = 0x400000000;
                goto LABEL_1312;
              case 87:
                unint64_t v596 = 0;
                uint64_t v597 = 0x40000;
                goto LABEL_1312;
              case 88:
                unint64_t v596 = 0;
                uint64_t v597 = 64;
                goto LABEL_1312;
              case 90:
                unint64_t v596 = 0;
                uint64_t v597 = 0x4000;
                goto LABEL_1312;
              case 92:
                unint64_t v596 = 0;
                uint64_t v597 = 0x2000000000;
                goto LABEL_1312;
              case 94:
                unint64_t v596 = 0;
                uint64_t v597 = 512;
                goto LABEL_1312;
              case 98:
                unint64_t v596 = 0;
                uint64_t v597 = 0x80000000;
                goto LABEL_1312;
              case 103:
                unint64_t v596 = 0;
                uint64_t v597 = 4;
                goto LABEL_1312;
              case 105:
                unint64_t v596 = 0;
                uint64_t v597 = 0x1000000000;
                goto LABEL_1312;
              case 109:
                unint64_t v596 = 0;
                uint64_t v597 = 0x4000000000;
                goto LABEL_1312;
              case 112:
                unint64_t v596 = 0;
                uint64_t v597 = 0x200000000;
                goto LABEL_1312;
              case 114:
                unint64_t v596 = 0;
                uint64_t v597 = 0x40000000000;
                goto LABEL_1312;
              case 116:
                unint64_t v596 = 0;
                uint64_t v597 = 0x4000000;
LABEL_1312:
                uint64_t v598 = *(void *)(a1 + 764) | v597;
                *(void *)(a1 + 756) |= v596;
                *(void *)(a1 + 764) = v598;
                break;
              default:
                continue;
            }
          }
        }
LABEL_1313:
        if (v34)
        {
          uint64_t v3 = *(unsigned char *)(v3 + *v35) == 0;
          if ((v31 & 1) == 0) {
            return v3;
          }
LABEL_1317:
          v599 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        else
        {
          uint64_t v3 = 0;
          if (v31) {
            goto LABEL_1317;
          }
        }
        return v3;
      case 106:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        char v481 = 0;
        unsigned int v482 = 0;
        uint64_t v56 = 0;
        *(void *)(a1 + 756) |= 0x1000uLL;
        while (2)
        {
          uint64_t v483 = *v32;
          unint64_t v484 = *(void *)(v3 + v483);
          if (v484 == -1 || v484 >= *(void *)(v3 + *v12))
          {
            *(unsigned char *)(v3 + *v35) = 1;
          }
          else
          {
            char v485 = *(unsigned char *)(*(void *)(v3 + *v36) + v484);
            *(void *)(v3 + v483) = v484 + 1;
            v56 |= (unint64_t)(v485 & 0x7F) << v481;
            if (v485 < 0)
            {
              v481 += 7;
              BOOL v43 = v482++ >= 9;
              if (v43)
              {
                LODWORD(v56) = 0;
                goto LABEL_1078;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v35)) {
          LODWORD(v56) = 0;
        }
LABEL_1078:
        uint64_t v518 = 644;
LABEL_1079:
        *(_DWORD *)(a1 + v518) = v56;
        goto LABEL_1165;
      case 107:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        char v486 = 0;
        unsigned int v487 = 0;
        uint64_t v488 = 0;
        *(void *)(a1 + 756) |= 0x1000000000uLL;
        while (2)
        {
          uint64_t v489 = *v32;
          unint64_t v490 = *(void *)(v3 + v489);
          if (v490 == -1 || v490 >= *(void *)(v3 + *v12))
          {
            *(unsigned char *)(v3 + *v35) = 1;
          }
          else
          {
            char v491 = *(unsigned char *)(*(void *)(v3 + *v36) + v490);
            *(void *)(v3 + v489) = v490 + 1;
            v488 |= (unint64_t)(v491 & 0x7F) << v486;
            if (v491 < 0)
            {
              v486 += 7;
              BOOL v43 = v487++ >= 9;
              if (v43)
              {
                uint64_t v488 = 0;
                goto LABEL_1083;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v35)) {
          uint64_t v488 = 0;
        }
LABEL_1083:
        BOOL v519 = v488 != 0;
        uint64_t v520 = 728;
        goto LABEL_1100;
      case 108:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        char v492 = 0;
        unsigned int v493 = 0;
        uint64_t v494 = 0;
        *(void *)(a1 + 756) |= 0x200000000000uLL;
        while (2)
        {
          uint64_t v495 = *v32;
          unint64_t v496 = *(void *)(v3 + v495);
          if (v496 == -1 || v496 >= *(void *)(v3 + *v12))
          {
            *(unsigned char *)(v3 + *v35) = 1;
          }
          else
          {
            char v497 = *(unsigned char *)(*(void *)(v3 + *v36) + v496);
            *(void *)(v3 + v495) = v496 + 1;
            v494 |= (unint64_t)(v497 & 0x7F) << v492;
            if (v497 < 0)
            {
              v492 += 7;
              BOOL v43 = v493++ >= 9;
              if (v43)
              {
                uint64_t v494 = 0;
                goto LABEL_1087;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v35)) {
          uint64_t v494 = 0;
        }
LABEL_1087:
        BOOL v519 = v494 != 0;
        uint64_t v520 = 737;
        goto LABEL_1100;
      case 109:
        if (!v48) {
          goto LABEL_873;
        }
        if ((*(unsigned char *)(a1 + 768) & 0x40) == 0)
        {
          uint64_t v61 = PBReaderReadString();
          uint64_t v62 = 552;
          goto LABEL_823;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_1319;
        }
        uint64_t v521 = *(void *)(a1 + 764) << 25;
        goto LABEL_1163;
      case 110:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        char v498 = 0;
        unsigned int v499 = 0;
        uint64_t v500 = 0;
        *(void *)(a1 + 756) |= 0x800000000000uLL;
        while (2)
        {
          uint64_t v501 = *v32;
          unint64_t v502 = *(void *)(v3 + v501);
          if (v502 == -1 || v502 >= *(void *)(v3 + *v12))
          {
            *(unsigned char *)(v3 + *v35) = 1;
          }
          else
          {
            char v503 = *(unsigned char *)(*(void *)(v3 + *v36) + v502);
            *(void *)(v3 + v501) = v502 + 1;
            v500 |= (unint64_t)(v503 & 0x7F) << v498;
            if (v503 < 0)
            {
              v498 += 7;
              BOOL v43 = v499++ >= 9;
              if (v43)
              {
                uint64_t v500 = 0;
                goto LABEL_1091;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v35)) {
          uint64_t v500 = 0;
        }
LABEL_1091:
        BOOL v519 = v500 != 0;
        uint64_t v520 = 739;
        goto LABEL_1100;
      case 112:
        if (!v48) {
          goto LABEL_873;
        }
        if ((*(unsigned char *)(a1 + 768) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_1319;
          }
          uint64_t v521 = *(void *)(a1 + 764) << 30;
          goto LABEL_1163;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_1260;
        }
        char v53 = objc_alloc_init(GEOPDAutocompleteSessionData);
        if (!GEOPDAutocompleteSessionDataReadAllFrom((uint64_t)v53, (void *)v3)) {
          goto LABEL_1259;
        }
        PBReaderRecallMark();
        uint64_t v66 = 504;
        goto LABEL_768;
      case 113:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        char v504 = 0;
        unsigned int v505 = 0;
        uint64_t v506 = 0;
        *(void *)(a1 + 756) |= 0x100000000uLL;
        while (2)
        {
          uint64_t v507 = *v32;
          unint64_t v508 = *(void *)(v3 + v507);
          if (v508 == -1 || v508 >= *(void *)(v3 + *v12))
          {
            *(unsigned char *)(v3 + *v35) = 1;
          }
          else
          {
            char v509 = *(unsigned char *)(*(void *)(v3 + *v36) + v508);
            *(void *)(v3 + v507) = v508 + 1;
            v506 |= (unint64_t)(v509 & 0x7F) << v504;
            if (v509 < 0)
            {
              v504 += 7;
              BOOL v43 = v505++ >= 9;
              if (v43)
              {
                uint64_t v506 = 0;
                goto LABEL_1095;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v35)) {
          uint64_t v506 = 0;
        }
LABEL_1095:
        BOOL v519 = v506 != 0;
        uint64_t v520 = 724;
        goto LABEL_1100;
      case 114:
        if (!v48) {
          goto LABEL_873;
        }
        if ((*(unsigned char *)(a1 + 769) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_1319;
          }
          uint64_t v521 = *(void *)(a1 + 764) << 21;
          goto LABEL_1163;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_1260;
        }
        char v53 = objc_alloc_init(GEOPDSSessionUserActionMetadata);
        if (!GEOPDSSessionUserActionMetadataReadAllFrom(v53, (void *)v3)) {
          goto LABEL_1259;
        }
        PBReaderRecallMark();
        uint64_t v66 = 584;
        goto LABEL_768;
      case 115:
        if ((v603 & 1) == 0) {
          goto LABEL_873;
        }
        char v510 = 0;
        unsigned int v511 = 0;
        uint64_t v512 = 0;
        *(void *)(a1 + 756) |= 0x2000000000000000uLL;
        while (2)
        {
          uint64_t v513 = *v32;
          unint64_t v514 = *(void *)(v3 + v513);
          if (v514 == -1 || v514 >= *(void *)(v3 + *v12))
          {
            *(unsigned char *)(v3 + *v35) = 1;
          }
          else
          {
            char v515 = *(unsigned char *)(*(void *)(v3 + *v36) + v514);
            *(void *)(v3 + v513) = v514 + 1;
            v512 |= (unint64_t)(v515 & 0x7F) << v510;
            if (v515 < 0)
            {
              v510 += 7;
              BOOL v43 = v511++ >= 9;
              if (v43)
              {
                uint64_t v512 = 0;
                goto LABEL_1099;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v35)) {
          uint64_t v512 = 0;
        }
LABEL_1099:
        BOOL v519 = v512 != 0;
        uint64_t v520 = 753;
LABEL_1100:
        *(unsigned char *)(a1 + v520) = v519;
        goto LABEL_1165;
      case 116:
        if (!v48) {
          goto LABEL_873;
        }
        if ((*(unsigned char *)(a1 + 767) & 4) == 0)
        {
          uint64_t v61 = PBReaderReadString();
          uint64_t v62 = 432;
LABEL_823:
          int v480 = *(void **)(a1 + v62);
          *(void *)(a1 + v62) = v61;
LABEL_824:

          --v6;
LABEL_1164:
          BOOL v35 = (int *)MEMORY[0x1E4F940C8];
          int v12 = (int *)MEMORY[0x1E4F940E0];
          goto LABEL_1165;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
        {
LABEL_1319:
          int v34 = 0;
          BOOL v35 = (int *)MEMORY[0x1E4F940C8];
          goto LABEL_1257;
        }
        uint64_t v521 = *(void *)(a1 + 764) << 37;
        goto LABEL_1163;
      default:
        if ((v30 & 1) == 0 || (*(unsigned char *)(a1 + 763) & 0x40) != 0)
        {
LABEL_873:
          char v517 = PBReaderSkipValueWithTag();
          int v12 = (int *)MEMORY[0x1E4F940E0];
          BOOL v35 = (int *)MEMORY[0x1E4F940C8];
          if (v517) {
            goto LABEL_1165;
          }
LABEL_1256:
          int v34 = 0;
LABEL_1257:
          if (v602) {
            goto LABEL_1262;
          }
          goto LABEL_1263;
        }
        if (!*(void *)(a1 + 16))
        {
          id v230 = objc_alloc_init(MEMORY[0x1E4F940B0]);
          uint64_t v231 = *(void **)(a1 + 16);
          *(void *)(a1 + 16) = v230;
        }
        int v232 = PBUnknownFieldAdd();
        BOOL v35 = (int *)MEMORY[0x1E4F940C8];
        int v12 = (int *)MEMORY[0x1E4F940E0];
        if (!v232)
        {
          int v34 = 0;
          goto LABEL_1262;
        }
LABEL_1165:
        if (!(v601 & 1 | (v6 != 0)))
        {
          int v34 = 1;
          goto LABEL_1257;
        }
        char v30 = v602;
        uint64_t v36 = (int *)MEMORY[0x1E4F940B8];
        if (*(void *)(v3 + *v32) >= *(void *)(v3 + *v12)) {
          goto LABEL_1253;
        }
        continue;
    }
  }
}

BOOL GEOTraitsPhotoSizeReadAllFrom(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    uint64_t v4 = (int *)MEMORY[0x1E4F940E8];
    unsigned int v5 = (int *)MEMORY[0x1E4F940E0];
    uint64_t v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
      while (1)
      {
        if (v3[*v6]) {
          goto LABEL_49;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          if (v9++ >= 9)
          {
            unint64_t v10 = 0;
            int v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v16 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v16 || (v10 & 7) == 4) {
          goto LABEL_49;
        }
        if ((v10 >> 3) == 2) {
          break;
        }
        if ((v10 >> 3) == 1)
        {
          char v18 = 0;
          unsigned int v19 = 0;
          uint64_t v20 = 0;
          *(unsigned char *)(a1 + 24) |= 2u;
          while (1)
          {
            uint64_t v21 = *v4;
            uint64_t v22 = *(void *)&v3[v21];
            unint64_t v23 = v22 + 1;
            if (v22 == -1 || v23 > *(void *)&v3[*v5])
            {
              uint64_t v26 = &OBJC_IVAR___GEOTraitsPhotoSize__width;
              goto LABEL_41;
            }
            char v24 = *(unsigned char *)(*(void *)&v3[*v7] + v22);
            *(void *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0) {
              break;
            }
            v18 += 7;
            BOOL v25 = v19++ > 8;
            if (v25)
            {
              LODWORD(v20) = 0;
              uint64_t v26 = &OBJC_IVAR___GEOTraitsPhotoSize__width;
              goto LABEL_44;
            }
          }
          uint64_t v26 = &OBJC_IVAR___GEOTraitsPhotoSize__width;
LABEL_42:
          if (v3[*v6]) {
            LODWORD(v20) = 0;
          }
LABEL_44:
          *(_DWORD *)(a1 + *v26) = v20;
          goto LABEL_45;
        }
        if (!*(void *)(a1 + 8))
        {
          id v33 = objc_alloc_init(MEMORY[0x1E4F940B0]);
          int v34 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = v33;
        }
        if ((PBUnknownFieldAdd() & 1) == 0) {
          goto LABEL_50;
        }
LABEL_45:
        if (*(void *)&v3[*v4] >= *(void *)&v3[*v5]) {
          goto LABEL_49;
        }
      }
      char v27 = 0;
      unsigned int v28 = 0;
      uint64_t v20 = 0;
      *(unsigned char *)(a1 + 24) |= 1u;
      while (1)
      {
        uint64_t v29 = *v4;
        uint64_t v30 = *(void *)&v3[v29];
        unint64_t v31 = v30 + 1;
        if (v30 == -1 || v31 > *(void *)&v3[*v5]) {
          break;
        }
        char v32 = *(unsigned char *)(*(void *)&v3[*v7] + v30);
        *(void *)&v3[v29] = v31;
        v20 |= (unint64_t)(v32 & 0x7F) << v27;
        if ((v32 & 0x80) == 0)
        {
          uint64_t v26 = &OBJC_IVAR___GEOTraitsPhotoSize__height;
          goto LABEL_42;
        }
        v27 += 7;
        BOOL v25 = v28++ > 8;
        if (v25)
        {
          LODWORD(v20) = 0;
          uint64_t v26 = &OBJC_IVAR___GEOTraitsPhotoSize__height;
          goto LABEL_44;
        }
      }
      uint64_t v26 = &OBJC_IVAR___GEOTraitsPhotoSize__height;
LABEL_41:
      v3[*v6] = 1;
      goto LABEL_42;
    }
LABEL_49:
    BOOL v35 = v3[*v6] == 0;
  }
  else
  {
LABEL_50:
    BOOL v35 = 0;
  }
  objc_sync_exit(v3);

  return v35;
}

void sub_1890029E8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189002CD4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189002FAC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPUserPathReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 60);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 56)];
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  int v11 = ((*(unsigned __int8 *)(a1 + 68) >> 2) & 1)
      + (*(unsigned char *)(a1 + 68) & 1)
      + ((*(unsigned __int8 *)(a1 + 68) >> 1) & 1);
  while (2)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    switch(a3[v10])
    {
      case -4:
        ++v11;
        uint64_t v12 = v7;
        goto LABEL_8;
      case -3:
        char v9 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_8;
      case 0:
        BOOL v14 = v11 != 0;
        int v15 = v14 | v7;
        int v16 = v14 & ~v7 | v8;
        if ((v15 | v9)) {
          int8x16_t v17 = 0;
        }
        else {
          int8x16_t v17 = a3;
        }
        char v18 = (int *)MEMORY[0x1E4F940E8];
        int v19 = 1;
        uint64_t v20 = (int *)MEMORY[0x1E4F940C8];
        if (*(void *)(v3 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(v3 + *v6)) {
          goto LABEL_80;
        }
        char v61 = v16;
        int v62 = (v10 != 0) | v15 | v16;
        uint64_t v21 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v11;
LABEL_7:
        uint64_t v12 = v7;
        uint64_t v13 = v8;
LABEL_8:
        ++v10;
        uint64_t v7 = v12;
        uint64_t v8 = v13;
        continue;
    }
    break;
  }
  do
  {
    if (*(unsigned char *)(v3 + *v20)) {
      break;
    }
    char v22 = 0;
    unsigned int v23 = 0;
    unint64_t v24 = 0;
    while (1)
    {
      uint64_t v25 = *v18;
      uint64_t v26 = *(void *)(v3 + v25);
      unint64_t v27 = v26 + 1;
      if (v26 == -1 || v27 > *(void *)(v3 + *v6)) {
        break;
      }
      char v28 = *(unsigned char *)(*(void *)(v3 + *v21) + v26);
      *(void *)(v3 + v25) = v27;
      v24 |= (unint64_t)(v28 & 0x7F) << v22;
      if ((v28 & 0x80) == 0) {
        goto LABEL_23;
      }
      v22 += 7;
      BOOL v29 = v23++ >= 9;
      if (v29)
      {
        unint64_t v24 = 0;
        int v30 = *(unsigned __int8 *)(v3 + *v20);
        goto LABEL_25;
      }
    }
    *(unsigned char *)(v3 + *v20) = 1;
LABEL_23:
    int v30 = *(unsigned __int8 *)(v3 + *v20);
    if (*(unsigned char *)(v3 + *v20)) {
      unint64_t v24 = 0;
    }
LABEL_25:
    int v31 = v24 & 7;
    if (v30 || v31 == 4) {
      break;
    }
    unint64_t v33 = v24 >> 3;
    BOOL v34 = v15;
    if (!((v17 == 0) | v15 & 1))
    {
      BOOL v35 = v17;
      do
      {
        int v37 = *v35++;
        int v36 = v37;
        BOOL v34 = v37 != 0;
        if (v37) {
          BOOL v38 = v36 == v33;
        }
        else {
          BOOL v38 = 1;
        }
      }
      while (!v38);
    }
    if (v33 == 2)
    {
      if (v34 && (*(unsigned char *)(a1 + 68) & 4) == 0)
      {
        uint64_t v46 = PBReaderReadString();
        if (v46) {
          -[GEORPUserPath _addNoFlagsWebPath:](a1, v46);
        }

        goto LABEL_76;
      }
    }
    else if (v33 == 1)
    {
      if (v34 && (*(unsigned char *)(a1 + 68) & 2) == 0)
      {
        if (v31 == 2)
        {
          int v19 = PBReaderPlaceMark();
          if (!v19) {
            goto LABEL_79;
          }
          while (*(void *)(v3 + *v18) < *(void *)(v3 + *v6) && !*(unsigned char *)(v3 + *v20))
          {
            char v39 = 0;
            unsigned int v40 = 0;
            uint64_t v41 = 0;
            while (1)
            {
              uint64_t v42 = *v18;
              uint64_t v43 = *(void *)(v3 + v42);
              unint64_t v44 = v43 + 1;
              if (v43 == -1 || v44 > *(void *)(v3 + *v6)) {
                break;
              }
              char v45 = *(unsigned char *)(*(void *)(v3 + *v21) + v43);
              *(void *)(v3 + v42) = v44;
              v41 |= (unint64_t)(v45 & 0x7F) << v39;
              if (v45 < 0)
              {
                v39 += 7;
                BOOL v29 = v40++ >= 9;
                if (!v29) {
                  continue;
                }
              }
              goto LABEL_52;
            }
            *(unsigned char *)(v3 + *v20) = 1;
LABEL_52:
            PBRepeatedInt32Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          char v49 = 0;
          unsigned int v50 = 0;
          uint64_t v51 = 0;
          while (1)
          {
            uint64_t v52 = *v18;
            uint64_t v53 = *(void *)(v3 + v52);
            unint64_t v54 = v53 + 1;
            if (v53 == -1 || v54 > *(void *)(v3 + *v6)) {
              break;
            }
            char v55 = *(unsigned char *)(*(void *)(v3 + *v21) + v53);
            *(void *)(v3 + v52) = v54;
            v51 |= (unint64_t)(v55 & 0x7F) << v49;
            if (v55 < 0)
            {
              v49 += 7;
              BOOL v29 = v50++ >= 9;
              if (!v29) {
                continue;
              }
            }
            goto LABEL_75;
          }
          *(unsigned char *)(v3 + *v20) = 1;
LABEL_75:
          PBRepeatedInt32Add();
        }
LABEL_76:
        if ((v62 & 1) == 0) {
          break;
        }
        continue;
      }
    }
    else if ((v61 & 1) != 0 && (*(unsigned char *)(a1 + 68) & 1) == 0)
    {
      if (!*(void *)(a1 + 16))
      {
        id v47 = objc_alloc_init(MEMORY[0x1E4F940B0]);
        BOOL v48 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v47;
      }
      int v19 = PBUnknownFieldAdd();
      if (!v19) {
        goto LABEL_81;
      }
      goto LABEL_76;
    }
    int v19 = PBReaderSkipValueWithTag();
    if ((v19 & v62 & 1) == 0) {
      goto LABEL_79;
    }
  }
  while (*(void *)(v3 + *v18) < *(void *)(v3 + *v6));
  int v19 = 1;
LABEL_79:
  LOBYTE(v16) = v61;
LABEL_80:
  if (v16) {
LABEL_81:
  }
    *(unsigned char *)(a1 + 68) |= 1u;
  if (v15 & 1 | ((v19 & 1) == 0))
  {
    *(unsigned char *)(a1 + 68) |= 2u;
    *(unsigned char *)(a1 + 68) |= 4u;
    goto LABEL_92;
  }
  if (v17)
  {
    while (2)
    {
      while (1)
      {
        int v57 = *v17++;
        int v56 = v57;
        if (v57 == 1) {
          break;
        }
        if (v56 == 2)
        {
          char v58 = 4;
          goto LABEL_91;
        }
        if (!v56) {
          goto LABEL_92;
        }
      }
      char v58 = 2;
LABEL_91:
      *(unsigned char *)(a1 + 68) |= v58;
      continue;
    }
  }
LABEL_92:
  if (v19)
  {
    unint64_t v3 = *(unsigned char *)(v3 + *v20) == 0;
    if ((v15 & 1) == 0) {
      return v3;
    }
LABEL_96:
    unint64_t v59 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  else
  {
    unint64_t v3 = 0;
    if (v15) {
      goto LABEL_96;
    }
  }
  return v3;
}

void sub_189003738(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189003FA0(_Unwind_Exception *a1)
{
}

uint64_t GEOPDPlaceResponseHasSensitiveFields(void *a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  uint64_t v4 = [a1 globalResult];
  char HasSensitiveFields = GEOPDPlaceGlobalResultHasSensitiveFields(v4, a2);

  if ((HasSensitiveFields & 1) == 0)
  {
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    uint64_t v7 = [a1 legacyPlaceResults];
    uint64_t v8 = [v7 countByEnumeratingWithState:&v21 objects:v26 count:16];
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(void *)v22;
LABEL_7:
      uint64_t v11 = 0;
      while (1)
      {
        if (*(void *)v22 != v10) {
          objc_enumerationMutation(v7);
        }
        if (GEOPDPlaceHasSensitiveFields(*(void **)(*((void *)&v21 + 1) + 8 * v11), a2)) {
          break;
        }
        if (v9 == ++v11)
        {
          uint64_t v9 = [v7 countByEnumeratingWithState:&v21 objects:v26 count:16];
          if (v9) {
            goto LABEL_7;
          }
          goto LABEL_13;
        }
      }
    }
    else
    {
LABEL_13:

      long long v19 = 0u;
      long long v20 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      uint64_t v7 = objc_msgSend(a1, "mapsResults", 0);
      uint64_t v12 = [v7 countByEnumeratingWithState:&v17 objects:v25 count:16];
      if (!v12)
      {
LABEL_21:
        uint64_t v6 = 0;
LABEL_23:

        return v6;
      }
      uint64_t v13 = v12;
      uint64_t v14 = *(void *)v18;
LABEL_15:
      uint64_t v15 = 0;
      while (1)
      {
        if (*(void *)v18 != v14) {
          objc_enumerationMutation(v7);
        }
        if (GEOPDMapsResultHasSensitiveFields(*(void **)(*((void *)&v17 + 1) + 8 * v15), a2)) {
          break;
        }
        if (v13 == ++v15)
        {
          uint64_t v13 = [v7 countByEnumeratingWithState:&v17 objects:v25 count:16];
          if (v13) {
            goto LABEL_15;
          }
          goto LABEL_21;
        }
      }
    }
    uint64_t v6 = 1;
    goto LABEL_23;
  }
  return 1;
}

uint64_t GEOPDMapsResultHasSensitiveFields(void *a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v4 = [a1 place];
  if (GEOPDPlaceHasSensitiveFields(v4, a2))
  {
    uint64_t HasSensitiveFields = 1;
  }
  else
  {
    uint64_t v6 = [a1 batchReverseGeocode];
    uint64_t HasSensitiveFields = GEOPDBatchReverseGeocodeResultHasSensitiveFields(v6, a2);
  }
  return HasSensitiveFields;
}

void sub_189004E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t geo_CTServerConnectionCopyISOForMCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CTServerConnectionCopyISOForMCCSymbolLoc = (uint64_t (*)(uint64_t, uint64_t, uint64_t))get_CTServerConnectionCopyISOForMCCSymbolLoc();
  if (CTServerConnectionCopyISOForMCCSymbolLoc)
  {
    return CTServerConnectionCopyISOForMCCSymbolLoc(a1, a2, a3);
  }
  else
  {
    dlerror();
    abort_report_np();
    return get_CTServerConnectionCopyISOForMCCSymbolLoc();
  }
}

uint64_t get_CTServerConnectionCopyISOForMCCSymbolLoc()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = get_CTServerConnectionCopyISOForMCCSymbolLoc_ptr;
  uint64_t v6 = get_CTServerConnectionCopyISOForMCCSymbolLoc_ptr;
  if (!get_CTServerConnectionCopyISOForMCCSymbolLoc_ptr)
  {
    uint64_t v1 = (void *)CoreTelephonyLibrary();
    v4[3] = (uint64_t)dlsym(v1, "_CTServerConnectionCopyISOForMCC");
    get_CTServerConnectionCopyISOForMCCSymbolLoc_ptr = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_189004FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

unint64_t GEOPDGuidesHomeParametersReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 108))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOPDGuidesHomeParametersReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 104) = [v8 position];
  *(_DWORD *)(a1 + 108) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOPDGuidesHomeParametersReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOPDGuidesHomeParametersReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOPDGuidesHomeParametersReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOPDGuidesHomeParametersCallReadAllRecursiveWithoutSynchronized(a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 112));
  return Specified;
}

void sub_189005718(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t geo::codec::decodeIntCompressorArray<unsigned char>(void *a1, uint64_t *a2, char a3, char a4, size_t a5, uint8x8_t *a6)
{
  int v17 = 0;
  if (!a2) {
    return 0;
  }
  uint64_t result = geo::codec::chapterReadVarUint32(a1, (unsigned int *)&v17);
  if (result)
  {
    uint64_t v13 = v17;
    uint64_t v14 = a1[6];
    unint64_t v15 = v14 + v17;
    if (v15 <= a1[7])
    {
      int v16 = (unsigned __int8 *)(a1[5] + v14);
      a1[6] = v15;
      return mgcl::ints::IntDecompressor<unsigned char>::decompress(a2, v16, v13, a3, a4, a5, a6) == 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t geo::codec::decodeIntCompressorArray<unsigned char>(void *a1, uint64_t *a2, char a3, char a4, uint64_t a5)
{
  uint64_t v5 = *(uint8x8_t **)a5;
  uint64_t v6 = *(void *)(a5 + 8);
  int v16 = 0;
  if (!a2) {
    return 0;
  }
  uint64_t result = geo::codec::chapterReadVarUint32(a1, (unsigned int *)&v16);
  if (result)
  {
    uint64_t v12 = v16;
    uint64_t v13 = a1[6];
    unint64_t v14 = v13 + v16;
    if (v14 <= a1[7])
    {
      unint64_t v15 = (unsigned __int8 *)(a1[5] + v13);
      a1[6] = v14;
      return mgcl::ints::IntDecompressor<unsigned char>::decompress(a2, v15, v12, a3, a4, v6 - (void)v5, v5) == 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t mgcl::ints::IntDecompressor<unsigned char>::decompress(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, char a4, char a5, size_t a6, uint8x8_t *a7)
{
  uint64_t v379 = *MEMORY[0x1E4F143B8];
  if (!a6) {
    return 0;
  }
  bzero(a7, a6);
  size_t v12 = *a2;
  if ((v12 - 66) < 0xFFFFFFBF) {
    return 3;
  }
  if (v12 <= 0x40) {
    size_t v14 = 65 - v12;
  }
  else {
    size_t v14 = 0;
  }
  bzero(&__dst[v12], v14);
  size_t v15 = a6;
  memcpy(__dst, a2 + 1, v12);
  uint64_t v16 = 0;
  uint64_t v17 = v12 + 1;
  unint64_t __sz = 8 * a6;
  unint64_t v357 = 4 * a6;
  uint64_t v362 = 8 * a3 - 24;
  uint64_t v363 = a1;
  unint64_t v364 = a2;
  size_t v361 = v12;
  while (2)
  {
    while (1)
    {
      unsigned int v18 = __dst[v16];
      int v19 = a2[v17];
      uint64_t v20 = v17 + 1;
      uint64_t v365 = v16;
      char v21 = 0;
      unint64_t v22 = 0;
      if (!__dst[v16]) {
        break;
      }
      uint64_t v23 = v17;
      unint64_t v24 = 0;
      uint64_t v25 = &a2[v20];
      uint64_t v26 = 1;
      uint64_t v366 = v23;
      uint64_t v27 = v362 - 8 * v23;
      do
      {
        uint64_t v28 = v26;
        uint64_t v29 = v27;
        int v30 = (char)v25[v22];
        v24 |= (unint64_t)(v25[v22] & 0x7F) << v21;
        if (v22 > 8) {
          break;
        }
        ++v22;
        v21 += 7;
        ++v26;
        v27 -= 8;
      }
      while (v30 < 0);
      char v31 = 0;
      unint64_t v32 = 0;
      unint64_t v33 = 0;
      BOOL v34 = &a2[v366];
      do
      {
        int v35 = (char)v34[v28 + 1];
        v33 |= (unint64_t)(v34[++v28] & 0x7F) << v31;
        if (v32 > 8) {
          break;
        }
        ++v32;
        v31 += 7;
        v29 -= 8;
      }
      while (v35 < 0);
      switch(v19)
      {
        case 1:
          if (!a1[3]) {
            operator new();
          }
          BOOL v36 = v18 == 1;
          unsigned int v37 = v33 - 2;
          if (v33 < 2) {
            return 3;
          }
          BOOL v38 = &a2[v366 + v28];
          unsigned int v39 = v38[1];
          int v40 = v38[2];
          uint64_t v41 = *a1;
          uint64_t v42 = (char *)a1[1];
          uint64_t v43 = &v42[-*a1];
          if (v18 != 1)
          {
            size_t v146 = v357 - (void)v43;
            if (v357 <= (unint64_t)v43)
            {
              uint64_t v147 = v363;
              unsigned int v153 = a6;
              if (v357 < (unint64_t)v43) {
                v363[1] = v41 + v357;
              }
              goto LABEL_311;
            }
            uint64_t v147 = v363;
            uint64_t v148 = v363[2];
            if (v148 - (uint64_t)v42 >= v146)
            {
              char v353 = &v42[v146];
              char v165 = v42;
              int v166 = v40;
              unsigned int v167 = v39;
              bzero(v165, v357 - (void)v43);
              unsigned int v39 = v167;
              BOOL v36 = v18 == 1;
              int v40 = v166;
              unsigned int v37 = v33 - 2;
              v363[1] = (uint64_t)v353;
              unsigned int v153 = a6;
LABEL_311:
              uint64_t v327 = (int32x4_t *)*v147;
              uint64_t v328 = *(uint64_t **)v147[3];
              LODWORD(v369) = 0;
              BYTE4(v369) = a4;
              BYTE5(v369) = a5;
              WORD3(v369) = 0;
              uint64_t v370 = 1;
              __int16 v371 = 0;
              char v372 = v36;
              int v373 = 0;
              if (v39 >= 4) {
                char v329 = 1;
              }
              else {
                char v329 = v39;
              }
              char v374 = v329;
              if (v40 == 2) {
                char v330 = 4;
              }
              else {
                char v330 = 1;
              }
              if (!v40) {
                char v330 = 0;
              }
              char v375 = v330;
              *((void *)&v369 + 1) = __PAIR64__(v153, v37);
              uint64_t v331 = *v328;
              uint64_t v376 = (uint64_t)&v364[v366 + 3 + v28];
              uint64_t v377 = v37;
              uint64_t result = gcl::polyline::DecoderImpl::decompressAttributes(v331, (uint64_t)&v376, v327, 0, &v369);
              if (result) {
                goto LABEL_325;
              }
              char v332 = a7;
              size_t v15 = a6;
              size_t v333 = a6;
              a1 = v363;
              do
              {
                __int32 v334 = v327->i32[0];
                uint64_t v327 = (int32x4_t *)((char *)v327 + 4);
                __int8 v335 = v24 + v334;
                if (v18 < 0x40) {
                  __int8 v335 = ((unint64_t)v332->u8[0] << v18) | v335 & ~(-1 << v18);
                }
                v332->i8[0] = v335;
                char v332 = (uint8x8_t *)((char *)v332 + 1);
                --v333;
              }
              while (v333);
              goto LABEL_303;
            }
            unsigned int v344 = v39;
            int v348 = v40;
            if ((v357 & 0x8000000000000000) != 0) {
LABEL_328:
            }
              std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
            unint64_t v149 = (unint64_t)v43;
            unint64_t v150 = v148 - v41;
            uint64_t v151 = 2 * v150;
            if (2 * v150 <= v357) {
              uint64_t v151 = 4 * a6;
            }
            if (v150 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v152 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v152 = v151;
            }
            size_t v341 = v152;
            char v338 = (char *)operator new(v152);
            unint64_t v336 = &v338[v149];
            bzero(&v338[v149], v146);
            if (v42 == (char *)v41)
            {
              uint64_t v147 = v363;
              unsigned int v153 = a6;
              unsigned int v37 = v33 - 2;
              int v40 = v348;
              BOOL v36 = v18 == 1;
              unsigned int v39 = v344;
              char v155 = v338;
              size_t v154 = v341;
              unsigned int v177 = v336;
              goto LABEL_309;
            }
            if (v149 < 8)
            {
              uint64_t v147 = v363;
              unsigned int v153 = a6;
              unsigned int v37 = v33 - 2;
              int v40 = v348;
              BOOL v36 = v18 == 1;
              unsigned int v39 = v344;
              char v155 = v338;
              size_t v154 = v341;
              char v156 = v336;
              goto LABEL_306;
            }
            unint64_t v187 = v149;
            char v155 = v338;
            size_t v154 = v341;
            uint64_t v147 = v363;
            unsigned int v153 = a6;
            unsigned int v37 = v33 - 2;
            int v40 = v348;
            BOOL v36 = v18 == 1;
            unsigned int v39 = v344;
            char v156 = v336;
            if ((unint64_t)(v41 - (void)v338) >= 0x20)
            {
              if (v187 < 0x20)
              {
                unint64_t v188 = 0;
                goto LABEL_218;
              }
              unint64_t v188 = v187 & 0xFFFFFFFFFFFFFFE0;
              char v229 = &v338[v187 - 16];
              id v230 = v42 - 16;
              unint64_t v231 = v187 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                long long v232 = *(_OWORD *)v230;
                *((_OWORD *)v229 - 1) = *((_OWORD *)v230 - 1);
                *(_OWORD *)char v229 = v232;
                v229 -= 32;
                v230 -= 32;
                v231 -= 32;
              }
              while (v231);
              if (v187 == v188) {
                goto LABEL_308;
              }
              if ((v187 & 0x18) != 0)
              {
LABEL_218:
                char v156 = &v336[-(v187 & 0xFFFFFFFFFFFFFFF8)];
                char v233 = &v42[-v188 - v41 - 8 + (void)v338];
                unsigned int v234 = &v42[-v188 - 8];
                unint64_t v235 = v188 - (v187 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  uint64_t v236 = *(void *)v234;
                  v234 -= 8;
                  *(void *)char v233 = v236;
                  v233 -= 8;
                  v235 += 8;
                }
                while (v235);
                v42 -= v187 & 0xFFFFFFFFFFFFFFF8;
                if (v187 == (v187 & 0xFFFFFFFFFFFFFFF8)) {
                  goto LABEL_308;
                }
                goto LABEL_306;
              }
              char v156 = &v336[-v188];
              v42 -= v188;
            }
LABEL_306:
            char v325 = v156 - 1;
            do
            {
              char v326 = *--v42;
              *v325-- = v326;
            }
            while (v42 != (char *)v41);
LABEL_308:
            uint64_t v42 = (char *)v41;
            unsigned int v177 = v155;
LABEL_309:
            *uint64_t v147 = (uint64_t)v177;
            v147[1] = (uint64_t)&v155[v357];
            v147[2] = (uint64_t)&v155[v154];
            if (v42)
            {
              operator delete(v42);
              unsigned int v39 = v344;
              BOOL v36 = v18 == 1;
              int v40 = v348;
              unsigned int v37 = v33 - 2;
            }
            goto LABEL_311;
          }
          LODWORD(v44) = a6;
          size_t v45 = a6 - (void)v43;
          if (a6 > (unint64_t)v43)
          {
            uint64_t v46 = v363;
            uint64_t v47 = v363[2];
            if (v47 - (uint64_t)v42 < v45)
            {
              unsigned int v342 = v39;
              BOOL v354 = v36;
              int v345 = v40;
              if ((a6 & 0x8000000000000000) != 0) {
                goto LABEL_328;
              }
              unint64_t v48 = (unint64_t)v43;
              unint64_t v49 = v47 - v41;
              uint64_t v50 = 2 * v49;
              if (2 * v49 <= a6) {
                uint64_t v50 = a6;
              }
              if (v49 >= 0x3FFFFFFFFFFFFFFFLL) {
                size_t v51 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                size_t v51 = v50;
              }
              unsigned int v339 = (char *)operator new(v51);
              char v337 = &v339[v48];
              bzero(&v339[v48], v45);
              size_t v52 = v51;
              if (v42 == (char *)v41)
              {
                uint64_t v46 = v363;
                size_t v44 = a6;
                unsigned int v37 = v33 - 2;
                int v40 = v345;
                BOOL v36 = v354;
                unsigned int v39 = v342;
                char v175 = &v339[v48];
                uint64_t v53 = v339;
                goto LABEL_275;
              }
              if (v48 < 8)
              {
                uint64_t v46 = v363;
                size_t v44 = a6;
                unsigned int v37 = v33 - 2;
                int v40 = v345;
                BOOL v36 = v354;
                unsigned int v39 = v342;
                unint64_t v54 = &v339[v48];
                uint64_t v53 = v339;
                goto LABEL_272;
              }
              unint64_t v54 = &v339[v48];
              uint64_t v53 = v339;
              uint64_t v46 = v363;
              size_t v44 = a6;
              unsigned int v37 = v33 - 2;
              int v40 = v345;
              BOOL v36 = v354;
              unsigned int v39 = v342;
              if ((unint64_t)(v41 - (void)v339) >= 0x20)
              {
                if (v48 < 0x20)
                {
                  unint64_t v186 = 0;
                  goto LABEL_210;
                }
                unint64_t v186 = v48 & 0xFFFFFFFFFFFFFFE0;
                uint64_t v221 = &v339[v48 - 16];
                char v222 = v42 - 16;
                unint64_t v223 = v48 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  long long v224 = *(_OWORD *)v222;
                  *((_OWORD *)v221 - 1) = *((_OWORD *)v222 - 1);
                  *(_OWORD *)uint64_t v221 = v224;
                  v221 -= 32;
                  v222 -= 32;
                  v223 -= 32;
                }
                while (v223);
                if (v48 == v186) {
                  goto LABEL_274;
                }
                if ((v48 & 0x18) != 0)
                {
LABEL_210:
                  unint64_t v54 = &v337[-(v48 & 0xFFFFFFFFFFFFFFF8)];
                  unint64_t v225 = &v42[-v186 - v41 - 8 + (void)v339];
                  uint64_t v226 = &v42[-v186 - 8];
                  unint64_t v227 = v186 - (v48 & 0xFFFFFFFFFFFFFFF8);
                  do
                  {
                    uint64_t v228 = *(void *)v226;
                    v226 -= 8;
                    *(void *)unint64_t v225 = v228;
                    v225 -= 8;
                    v227 += 8;
                  }
                  while (v227);
                  v42 -= v48 & 0xFFFFFFFFFFFFFFF8;
                  if (v48 == (v48 & 0xFFFFFFFFFFFFFFF8)) {
                    goto LABEL_274;
                  }
                  goto LABEL_272;
                }
                unint64_t v54 = &v337[-v186];
                v42 -= v186;
              }
LABEL_272:
              unint64_t v262 = v54 - 1;
              do
              {
                char v263 = *--v42;
                *v262-- = v263;
              }
              while (v42 != (char *)v41);
LABEL_274:
              uint64_t v42 = (char *)v41;
              char v175 = v53;
LABEL_275:
              *uint64_t v46 = (uint64_t)v175;
              v46[1] = (uint64_t)&v53[v44];
              v46[2] = (uint64_t)&v53[v52];
              if (v42)
              {
                int v264 = v44;
                operator delete(v42);
                LODWORD(v44) = v264;
                unsigned int v39 = v342;
                BOOL v36 = v354;
                int v40 = v345;
                unsigned int v37 = v33 - 2;
              }
              goto LABEL_277;
            }
            char v352 = &v42[v45];
            char v161 = v42;
            int v162 = v40;
            BOOL v163 = v36;
            unsigned int v164 = v39;
            bzero(v161, a6 - (void)v43);
            LODWORD(v44) = a6;
            unsigned int v39 = v164;
            BOOL v36 = v163;
            int v40 = v162;
            unsigned int v37 = v33 - 2;
            size_t v157 = (size_t)v352;
            goto LABEL_140;
          }
          uint64_t v46 = v363;
          if (a6 < (unint64_t)v43)
          {
            size_t v157 = v41 + a6;
LABEL_140:
            v46[1] = v157;
          }
LABEL_277:
          unint64_t v265 = *v46;
          uint64_t v266 = *(uint64_t **)v46[3];
          LODWORD(v369) = 0;
          BYTE4(v369) = a4;
          BYTE5(v369) = a5;
          WORD3(v369) = 0;
          uint64_t v370 = 1;
          __int16 v371 = 0;
          char v372 = v36;
          int v373 = 0;
          if (v39 >= 4) {
            char v267 = 1;
          }
          else {
            char v267 = v39;
          }
          char v374 = v267;
          if (v40 == 2) {
            char v268 = 4;
          }
          else {
            char v268 = 1;
          }
          if (!v40) {
            char v268 = 0;
          }
          char v375 = v268;
          *((void *)&v369 + 1) = __PAIR64__(v44, v37);
          uint64_t v269 = *v266;
          uint64_t v376 = (uint64_t)&v364[v366 + 3 + v28];
          uint64_t v377 = v37;
          uint64_t result = gcl::polyline::DecoderImpl::decompressAttributes(v269, (uint64_t)&v376, v265, 0, &v369);
          if (result) {
            goto LABEL_325;
          }
          size_t v15 = a6;
          if (a6 < 8)
          {
            unint64_t v271 = 0;
            a1 = v363;
            goto LABEL_301;
          }
          a1 = v363;
          if (v265 + a6 > (unint64_t)a7 && v265 < (unint64_t)a7 + a6)
          {
            unint64_t v271 = 0;
LABEL_301:
            size_t v321 = a6 - v271;
            uint64_t v322 = (char *)a7 + v271;
            unint64_t v323 = (char *)(v265 + v271);
            do
            {
              char v324 = *v323++;
              *uint64_t v322 = (v24 + v324) & 1 | (2 * *v322);
              ++v322;
              --v321;
            }
            while (v321);
            goto LABEL_303;
          }
          uint64x2_t v272 = (uint64x2_t)vdupq_n_s64(v24);
          if (a6 >= 0x10)
          {
            unint64_t v291 = a6 & 0xFFFFFFFFFFFFFFF0;
            char v292 = a7;
            unsigned int v293 = (int8x16_t *)v265;
            do
            {
              int8x16_t v294 = *v293++;
              uint32x4_t v295 = (uint32x4_t)vqtbl1q_s8(v294, (int8x16_t)xmmword_18A643780);
              uint32x4_t v296 = (uint32x4_t)vqtbl1q_s8(v294, (int8x16_t)xmmword_18A643790);
              uint32x4_t v297 = (uint32x4_t)vqtbl1q_s8(v294, (int8x16_t)xmmword_18A643760);
              uint32x4_t v298 = (uint32x4_t)vqtbl1q_s8(v294, (int8x16_t)xmmword_18A643770);
              int64x2_t v299 = (int64x2_t)vaddw_u32(v272, *(uint32x2_t *)v295.i8);
              int64x2_t v300 = (int64x2_t)vaddw_high_u32(v272, v295);
              int64x2_t v301 = (int64x2_t)vaddw_u32(v272, *(uint32x2_t *)v296.i8);
              int64x2_t v302 = (int64x2_t)vaddw_high_u32(v272, v296);
              int64x2_t v303 = (int64x2_t)vaddw_high_u32(v272, v297);
              int64x2_t v304 = (int64x2_t)vaddw_u32(v272, *(uint32x2_t *)v297.i8);
              int64x2_t v305 = (int64x2_t)vaddw_u32(v272, *(uint32x2_t *)v298.i8);
              int64x2_t v306 = (int64x2_t)vaddw_high_u32(v272, v298);
              uint16x8_t v307 = vmovl_u8(*v292);
              uint32x4_t v308 = vmovl_u16(*(uint16x4_t *)v307.i8);
              v309.i64[0] = v308.u32[0];
              v309.i64[1] = v308.u32[1];
              int64x2_t v310 = v309;
              v309.i64[0] = v308.u32[2];
              v309.i64[1] = v308.u32[3];
              int64x2_t v311 = v309;
              uint32x4_t v312 = vmovl_high_u16(v307);
              v309.i64[0] = v312.u32[0];
              v309.i64[1] = v312.u32[1];
              int64x2_t v313 = v309;
              v309.i64[0] = v312.u32[2];
              v309.i64[1] = v312.u32[3];
              int64x2_t v314 = v309;
              uint16x8_t v315 = vmovl_high_u8(*(uint8x16_t *)v292->i8);
              uint32x4_t v316 = vmovl_high_u16(v315);
              v309.i64[0] = v316.u32[2];
              v309.i64[1] = v316.u32[3];
              int64x2_t v317 = v309;
              v309.i64[0] = v316.u32[0];
              v309.i64[1] = v316.u32[1];
              int64x2_t v318 = v309;
              uint32x4_t v319 = vmovl_u16(*(uint16x4_t *)v315.i8);
              v309.i64[0] = v319.u32[0];
              v309.i64[1] = v319.u32[1];
              int64x2_t v320 = v309;
              v309.i64[0] = v319.u32[2];
              v309.i64[1] = v319.u32[3];
              v382.val[1] = (int8x16_t)vsliq_n_s64(v306, v309, 1uLL);
              v382.val[0] = (int8x16_t)vsliq_n_s64(v305, v320, 1uLL);
              v382.val[2] = (int8x16_t)vsliq_n_s64(v304, v318, 1uLL);
              v382.val[3] = (int8x16_t)vsliq_n_s64(v303, v317, 1uLL);
              v381.val[3] = (int8x16_t)vsliq_n_s64(v302, v314, 1uLL);
              v381.val[2] = (int8x16_t)vsliq_n_s64(v301, v313, 1uLL);
              v381.val[1] = (int8x16_t)vsliq_n_s64(v300, v311, 1uLL);
              v381.val[0] = (int8x16_t)vsliq_n_s64(v299, v310, 1uLL);
              v270.i64[0] = vqtbl4q_s8(v381, (int8x16_t)xmmword_18A6437A0).u64[0];
              v270.i64[1] = vqtbl4q_s8(v382, (int8x16_t)xmmword_18A6437A0).u64[0];
              *(int8x16_t *)v292->i8 = v270;
              v292 += 2;
              v291 -= 16;
            }
            while (v291);
            if ((a6 & 0xFFFFFFFFFFFFFFF0) == a6) {
              goto LABEL_303;
            }
            unint64_t v271 = a6 & 0xFFFFFFFFFFFFFFF0;
            unint64_t v273 = a6 & 0xFFFFFFFFFFFFFFF0;
            if ((a6 & 8) == 0) {
              goto LABEL_301;
            }
          }
          else
          {
            unint64_t v273 = 0;
          }
          char v274 = (uint64_t *)(v265 + v273);
          unsigned int v275 = (uint8x8_t *)((char *)a7 + v273);
          unint64_t v276 = v273 - (a6 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v277 = *v274++;
            v270.i64[0] = v277;
            uint32x4_t v278 = (uint32x4_t)vqtbl1q_s8(v270, (int8x16_t)xmmword_18A643780);
            uint32x4_t v279 = (uint32x4_t)vqtbl1q_s8(v270, (int8x16_t)xmmword_18A643790);
            int64x2_t v280 = (int64x2_t)vaddw_u32(v272, *(uint32x2_t *)v278.i8);
            int64x2_t v281 = (int64x2_t)vaddw_high_u32(v272, v278);
            int64x2_t v282 = (int64x2_t)vaddw_u32(v272, *(uint32x2_t *)v279.i8);
            int64x2_t v283 = (int64x2_t)vaddw_high_u32(v272, v279);
            uint16x8_t v284 = vmovl_u8(*v275);
            uint32x4_t v285 = vmovl_u16(*(uint16x4_t *)v284.i8);
            v286.i64[0] = v285.u32[0];
            v286.i64[1] = v285.u32[1];
            int64x2_t v287 = v286;
            v286.i64[0] = v285.u32[2];
            v286.i64[1] = v285.u32[3];
            int64x2_t v288 = v286;
            uint32x4_t v289 = vmovl_high_u16(v284);
            v286.i64[0] = v289.u32[0];
            v286.i64[1] = v289.u32[1];
            int64x2_t v290 = v286;
            v286.i64[0] = v289.u32[2];
            v286.i64[1] = v289.u32[3];
            v380.val[3] = (int8x16_t)vsliq_n_s64(v283, v286, 1uLL);
            v380.val[2] = (int8x16_t)vsliq_n_s64(v282, v290, 1uLL);
            v380.val[1] = (int8x16_t)vsliq_n_s64(v281, v288, 1uLL);
            v380.val[0] = (int8x16_t)vsliq_n_s64(v280, v287, 1uLL);
            int8x16_t v270 = vqtbl4q_s8(v380, (int8x16_t)xmmword_18A6437B0);
            *v275++ = *(uint8x8_t *)v270.i8;
            v276 += 8;
          }
          while (v276);
          unint64_t v271 = a6 & 0xFFFFFFFFFFFFFFF8;
          if ((a6 & 0xFFFFFFFFFFFFFFF8) != a6) {
            goto LABEL_301;
          }
LABEL_303:
          uint64_t v17 = v366 + v33 + v28 + 1;
          a2 = v364;
          uint64_t v16 = v365 + 1;
          if (v365 + 1 == v361) {
            return 0;
          }
          continue;
        case 2:
          uint64_t v104 = (unsigned __int8 *)*a1;
          uint64_t v105 = (unsigned __int8 *)a1[1];
          unint64_t v106 = (char *)&v105[-*a1];
          size_t v107 = __sz - (void)v106;
          if (__sz > (unint64_t)v106)
          {
            char v108 = (unsigned __int8 *)a1[2];
            if (v108 - v105 >= v107)
            {
              bzero((void *)a1[1], __sz - (void)v106);
              a1[1] = (uint64_t)&v105[v107];
              unint64_t v113 = a6;
              goto LABEL_230;
            }
            unint64_t v355 = (unint64_t)&v105[-*a1];
            if ((__sz & 0x8000000000000000) != 0) {
              goto LABEL_328;
            }
            unint64_t v109 = v108 - v104;
            uint64_t v110 = 2 * v109;
            if (2 * v109 <= __sz) {
              uint64_t v110 = 8 * a6;
            }
            if (v109 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v111 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v111 = v110;
            }
            uint64_t v350 = (char *)operator new(v111);
            unsigned int v347 = &v350[v355];
            bzero(&v350[v355], v107);
            size_t v112 = v111;
            if (v105 == v104)
            {
              a1 = v363;
              unint64_t v113 = a6;
              uint64_t v168 = &v350[v355];
              char v114 = v350;
              goto LABEL_228;
            }
            if (v355 < 8)
            {
              a1 = v363;
              unint64_t v113 = a6;
              char v115 = &v350[v355];
              char v114 = v350;
              goto LABEL_225;
            }
            char v115 = &v350[v355];
            char v114 = v350;
            a1 = v363;
            unint64_t v113 = a6;
            if ((unint64_t)(v104 - (unsigned __int8 *)v350) >= 0x20)
            {
              if (v355 < 0x20)
              {
                unint64_t v170 = 0;
                goto LABEL_186;
              }
              unint64_t v170 = v355 & 0xFFFFFFFFFFFFFFE0;
              unint64_t v197 = &v350[v355 - 16];
              char v198 = (char *)(v105 - 16);
              unint64_t v199 = v355 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                long long v200 = *(_OWORD *)v198;
                *((_OWORD *)v197 - 1) = *((_OWORD *)v198 - 1);
                *(_OWORD *)unint64_t v197 = v200;
                v197 -= 32;
                v198 -= 32;
                v199 -= 32;
              }
              while (v199);
              if (v355 == v170) {
                goto LABEL_227;
              }
              if ((v355 & 0x18) != 0)
              {
LABEL_186:
                char v115 = &v347[-(v355 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v201 = &v350[&v105[-v170] - v104 - 8];
                uint64_t v202 = (char *)&v105[-v170 - 8];
                unint64_t v203 = v170 - (v355 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  uint64_t v204 = *(void *)v202;
                  v202 -= 8;
                  *(void *)uint64_t v201 = v204;
                  v201 -= 8;
                  v203 += 8;
                }
                while (v203);
                v105 -= v355 & 0xFFFFFFFFFFFFFFF8;
                if (v355 == (v355 & 0xFFFFFFFFFFFFFFF8)) {
                  goto LABEL_227;
                }
                goto LABEL_225;
              }
              char v115 = &v347[-v170];
              v105 -= v170;
            }
LABEL_225:
            uint64_t v237 = v115 - 1;
            do
            {
              char v238 = *--v105;
              *v237-- = v238;
            }
            while (v105 != v104);
LABEL_227:
            uint64_t v105 = v104;
            uint64_t v168 = v114;
LABEL_228:
            *a1 = (uint64_t)v168;
            a1[1] = (uint64_t)&v114[__sz];
            a1[2] = (uint64_t)&v114[v112];
            if (v105) {
              operator delete(v105);
            }
            goto LABEL_230;
          }
          unint64_t v113 = a6;
          if (__sz < (unint64_t)v106) {
            a1[1] = (uint64_t)&v104[__sz];
          }
LABEL_230:
          char v239 = (uint64_t *)*a1;
          uint64_t result = mgcl::muid::decompress((mgcl::muid *)&v364[v366 + 1 + v28], (const char *)v33, 0, 0, *a1, (unint64_t *)8, v113);
          if (result) {
            return result;
          }
          char v240 = a7;
          a2 = v364;
          size_t v15 = a6;
          size_t v241 = a6;
          do
          {
            uint64_t v242 = *v239++;
            __int8 v243 = v242 + v24;
            if (v18 < 0x40) {
              __int8 v243 = ((unint64_t)v240->u8[0] << v18) | v243 & ~(-1 << v18);
            }
            v240->i8[0] = v243;
            char v240 = (uint8x8_t *)((char *)v240 + 1);
            --v241;
          }
          while (v241);
          unint64_t v244 = (const char *)(v366 + v33 + v28);
          goto LABEL_269;
        case 3:
          uint64_t v83 = (unsigned __int8 *)*a1;
          uint64_t v82 = (unsigned __int8 *)a1[1];
          if (v82 != (unsigned __int8 *)*a1)
          {
            a1[1] = (uint64_t)v83;
            uint64_t v82 = v83;
          }
          if (a1[2] - (uint64_t)v83 >= __sz) {
            goto LABEL_65;
          }
          if ((__sz & 0x8000000000000000) != 0) {
            goto LABEL_328;
          }
          uint64_t v84 = operator new(__sz);
          unint64_t v85 = v82 - v83;
          char v86 = &v84[v82 - v83];
          char v87 = v86;
          a1 = v363;
          a2 = v364;
          size_t v15 = a6;
          if (v82 == v83) {
            goto LABEL_63;
          }
          char v87 = v84;
          if (v85 < 8 || (unint64_t)(v83 - v84) < 0x20)
          {
            unsigned int v88 = v82;
            uint64_t v89 = &v84[v82 - v83];
            goto LABEL_61;
          }
          if (v85 >= 0x20)
          {
            unint64_t v169 = v85 & 0xFFFFFFFFFFFFFFE0;
            uint64_t v178 = &v84[v85 - 16];
            uint64_t v179 = v82 - 16;
            unint64_t v180 = v85 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v181 = *(_OWORD *)v179;
              *(v178 - 1) = *((_OWORD *)v179 - 1);
              _OWORD *v178 = v181;
              v178 -= 2;
              v179 -= 32;
              v180 -= 32;
            }
            while (v180);
            if (v85 == v169) {
              goto LABEL_63;
            }
            if ((v85 & 0x18) == 0)
            {
              uint64_t v89 = &v86[-v169];
              unsigned int v88 = &v82[-v169];
LABEL_61:
              uint64_t v90 = v89 - 1;
              do
              {
                char v91 = *--v88;
                *v90-- = v91;
              }
              while (v88 != v83);
              goto LABEL_63;
            }
          }
          else
          {
            unint64_t v169 = 0;
          }
          unsigned int v88 = &v82[-(v85 & 0xFFFFFFFFFFFFFFF8)];
          uint64_t v89 = &v86[-(v85 & 0xFFFFFFFFFFFFFFF8)];
          char v182 = &v84[&v82[-v169] - v83 - 8];
          unsigned int v183 = &v82[-v169 - 8];
          unint64_t v184 = v169 - (v85 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v185 = *(void *)v183;
            v183 -= 8;
            *v182-- = v185;
            v184 += 8;
          }
          while (v184);
          if (v85 != (v85 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_61;
          }
LABEL_63:
          uint64_t *v363 = (uint64_t)v87;
          v363[1] = (uint64_t)v86;
          v363[2] = (uint64_t)&v84[__sz];
          if (v83) {
            operator delete(v83);
          }
LABEL_65:
          uint64_t v92 = 0;
          uint64_t v93 = v365;
          uint64_t v94 = v366 + v28 + 1;
          size_t v95 = v361;
          do
          {
            char v96 = 0;
            unint64_t v97 = 0;
            uint64_t v98 = 0;
            uint64_t v99 = v94;
            char v100 = &a2[v94];
            do
            {
              int v101 = (char)v100[v97];
              v98 |= (unint64_t)(v100[v97] & 0x7F) << v96;
              unint64_t v102 = v97 + 1;
              if (v97 > 8) {
                break;
              }
              v96 += 7;
              ++v97;
            }
            while (v101 < 0);
            char v103 = v98 + v24;
            if (v18 < 0x40) {
              char v103 = ((unint64_t)a7->u8[v92] << v18) | v103 & ~(-1 << v18);
            }
            a7->i8[v92] = v103;
            uint64_t v94 = v99 + v102;
            ++v92;
          }
          while (v92 != v15);
          break;
        case 4:
          operator new();
        default:
          return 3;
      }
LABEL_8:
      uint64_t v17 = v99 + v102;
      uint64_t v16 = v93 + 1;
      if (v16 == v95) {
        return 0;
      }
    }
    uint64_t v55 = 0;
    int v56 = &a2[v20];
    uint64_t v57 = 1;
    uint64_t v58 = v362 - 8 * v17;
    do
    {
      uint64_t v59 = v57;
      uint64_t v60 = v58;
      int v61 = (char)v56[v22];
      v55 |= (unint64_t)(v56[v22] & 0x7F) << v21;
      if (v22 > 8) {
        break;
      }
      ++v22;
      v21 += 7;
      ++v57;
      v58 -= 8;
    }
    while (v61 < 0);
    char v62 = 0;
    unint64_t v63 = 0;
    unint64_t v64 = 0;
    uint64_t v65 = &a2[v17];
    do
    {
      int v66 = (char)v65[v59 + 1];
      v64 |= (unint64_t)(v65[++v59] & 0x7F) << v62;
      if (v63 > 8) {
        break;
      }
      ++v63;
      v62 += 7;
      v60 -= 8;
    }
    while (v66 < 0);
    switch(a2[v17])
    {
      case 1u:
        if (!a1[3]) {
          operator new();
        }
        uint64_t v367 = v17;
        unsigned int v67 = v64 - 2;
        if (v64 < 2) {
          return 3;
        }
        unsigned int v68 = &a2[v17 + v59];
        unsigned int v69 = v68[1];
        int v70 = v68[2];
        uint64_t v71 = *a1;
        char v72 = (char *)a1[1];
        unint64_t v73 = (unint64_t)&v72[-*a1];
        size_t v74 = a6 - v73;
        if (a6 > v73)
        {
          uint64_t v75 = (unsigned __int8 *)a1[2];
          if (v75 - (unsigned __int8 *)v72 >= v74)
          {
            uint64_t v158 = (unsigned __int8 *)&v72[v74];
            int v159 = v70;
            unsigned int v160 = v69;
            bzero((void *)a1[1], v74);
            unsigned int v69 = v160;
            int v70 = v159;
            unsigned int v67 = v64 - 2;
            a1[1] = (uint64_t)v158;
            LODWORD(v74) = a6;
            goto LABEL_254;
          }
          unsigned int v346 = v69;
          int v349 = v70;
          if ((a6 & 0x8000000000000000) != 0) {
            goto LABEL_329;
          }
          unint64_t v76 = (unint64_t)&v75[-v71];
          uint64_t v77 = 2 * v76;
          if (2 * v76 <= a6) {
            uint64_t v77 = a6;
          }
          if (v76 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v78 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v78 = v77;
          }
          char v343 = (char *)operator new(v78);
          uint64_t v340 = &v343[v73];
          bzero(&v343[v73], v74);
          size_t v79 = v78;
          if (v72 == (char *)v71)
          {
            a1 = v363;
            size_t v74 = a6;
            unsigned int v67 = v64 - 2;
            int v70 = v349;
            unsigned int v69 = v346;
            char v80 = v343;
            unsigned int v172 = &v343[v73];
            goto LABEL_252;
          }
          if (v73 < 8)
          {
            a1 = v363;
            size_t v74 = a6;
            unsigned int v67 = v64 - 2;
            int v70 = v349;
            unsigned int v69 = v346;
            char v80 = v343;
            unsigned int v81 = &v343[v73];
            goto LABEL_249;
          }
          char v80 = v343;
          a1 = v363;
          size_t v74 = a6;
          unsigned int v67 = v64 - 2;
          int v70 = v349;
          unsigned int v69 = v346;
          unsigned int v81 = &v343[v73];
          if ((unint64_t)(v71 - (void)v343) >= 0x20)
          {
            if (v73 < 0x20)
            {
              unint64_t v176 = 0;
              goto LABEL_202;
            }
            unint64_t v176 = v73 & 0xFFFFFFFFFFFFFFE0;
            char v213 = &v343[v73 - 16];
            char v214 = v72 - 16;
            unint64_t v215 = v73 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v216 = *(_OWORD *)v214;
              *((_OWORD *)v213 - 1) = *((_OWORD *)v214 - 1);
              *(_OWORD *)char v213 = v216;
              v213 -= 32;
              v214 -= 32;
              v215 -= 32;
            }
            while (v215);
            if (v73 == v176) {
              goto LABEL_251;
            }
            if ((v73 & 0x18) != 0)
            {
LABEL_202:
              unsigned int v81 = &v340[-(v73 & 0xFFFFFFFFFFFFFFF8)];
              uint64_t v217 = &v72[-v176 - v71 - 8 + (void)v343];
              unint64_t v218 = &v72[-v176 - 8];
              unint64_t v219 = v176 - (v73 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                uint64_t v220 = *(void *)v218;
                v218 -= 8;
                *(void *)uint64_t v217 = v220;
                v217 -= 8;
                v219 += 8;
              }
              while (v219);
              v72 -= v73 & 0xFFFFFFFFFFFFFFF8;
              if (v73 == (v73 & 0xFFFFFFFFFFFFFFF8)) {
                goto LABEL_251;
              }
              goto LABEL_249;
            }
            unsigned int v81 = &v340[-v176];
            v72 -= v176;
          }
LABEL_249:
          char v252 = v81 - 1;
          do
          {
            char v253 = *--v72;
            *v252-- = v253;
          }
          while (v72 != (char *)v71);
LABEL_251:
          char v72 = (char *)v71;
          unsigned int v172 = v80;
LABEL_252:
          *a1 = (uint64_t)v172;
          a1[1] = (uint64_t)&v80[v74];
          a1[2] = (uint64_t)&v80[v79];
          if (v72)
          {
            operator delete(v72);
            unsigned int v69 = v346;
            int v70 = v349;
            unsigned int v67 = v64 - 2;
          }
          goto LABEL_254;
        }
        LODWORD(v74) = a6;
        if (a6 < v73) {
          a1[1] = v71 + a6;
        }
LABEL_254:
        uint64_t v254 = (unsigned __int8 *)*a1;
        uint64_t v255 = *(uint64_t **)a1[3];
        LODWORD(v369) = 0;
        BYTE4(v369) = a4;
        BYTE5(v369) = a5;
        WORD3(v369) = 0;
        uint64_t v370 = 1;
        __int16 v371 = 0;
        char v372 = 1;
        int v373 = 0;
        if (v69 >= 4) {
          char v256 = 1;
        }
        else {
          char v256 = v69;
        }
        char v374 = v256;
        if (v70 == 2) {
          char v257 = 4;
        }
        else {
          char v257 = 1;
        }
        if (!v70) {
          char v257 = 0;
        }
        char v375 = v257;
        *((void *)&v369 + 1) = __PAIR64__(v74, v67);
        uint64_t v258 = *v255;
        uint64_t v376 = (uint64_t)&v364[v367 + 3 + v59];
        uint64_t v377 = v67;
        uint64_t result = gcl::polyline::DecoderImpl::decompressAttributes(v258, (uint64_t)&v376, (uint64_t)v254, 0, &v369);
        if (!result)
        {
          unsigned int v259 = a7;
          a2 = v364;
          size_t v15 = a6;
          size_t v260 = a6;
          do
          {
            unsigned int v261 = *v254++;
            if (v55 + v261) {
              v259->i8[0] = -v259->i8[0];
            }
            unsigned int v259 = (uint8x8_t *)((char *)v259 + 1);
            --v260;
          }
          while (v260);
          char v251 = (const char *)(v367 + v64);
LABEL_268:
          unint64_t v244 = &v251[v59];
LABEL_269:
          uint64_t v17 = (uint64_t)(v244 + 1);
          a1 = v363;
          uint64_t v16 = v365 + 1;
          if (v365 + 1 == v361) {
            return 0;
          }
          continue;
        }
LABEL_325:
        if ((result - 1) >= 4) {
          return 5;
        }
        return result;
      case 2u:
        uint64_t v368 = v17;
        uint64_t v133 = *a1;
        uint64_t v134 = (char *)a1[1];
        unint64_t v135 = (unint64_t)&v134[-*a1];
        char v136 = a1;
        size_t v137 = __sz - v135;
        if (__sz <= v135)
        {
          unint64_t v143 = v136;
          if (__sz < v135) {
            v136[1] = v133 + __sz;
          }
LABEL_242:
          unsigned int v247 = (uint64_t *)*v143;
          uint64_t result = mgcl::muid::decompress((mgcl::muid *)&v364[v368 + 1 + v59], (const char *)v64, 0, 0, *v143, (unint64_t *)8, a6);
          if (result) {
            return result;
          }
          uint64_t v248 = a7;
          a2 = v364;
          size_t v15 = a6;
          size_t v249 = a6;
          do
          {
            uint64_t v250 = *v247++;
            if (v250 != -v55) {
              v248->i8[0] = -v248->i8[0];
            }
            uint64_t v248 = (uint8x8_t *)((char *)v248 + 1);
            --v249;
          }
          while (v249);
          char v251 = (const char *)(v368 + v64);
          goto LABEL_268;
        }
        uint64_t v138 = v136[2];
        if (v138 - (uint64_t)v134 >= v137)
        {
          bzero(v134, __sz - v135);
          v136[1] = (uint64_t)&v134[v137];
          unint64_t v143 = v136;
          goto LABEL_242;
        }
        if ((__sz & 0x8000000000000000) != 0) {
LABEL_329:
        }
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        unint64_t v139 = v138 - v133;
        uint64_t v140 = 2 * v139;
        if (2 * v139 <= __sz) {
          uint64_t v140 = 8 * a6;
        }
        if (v139 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v141 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v141 = v140;
        }
        size_t v142 = v141;
        uint64_t v356 = (char *)operator new(v141);
        unint64_t v351 = &v356[v135];
        bzero(&v356[v135], v137);
        if (v134 == (char *)v133)
        {
          unint64_t v143 = v363;
          char v144 = v356;
          char v171 = &v356[v135];
          goto LABEL_240;
        }
        if (v135 < 8)
        {
          unint64_t v143 = v363;
          char v144 = v356;
          char v145 = &v356[v135];
          goto LABEL_237;
        }
        char v144 = v356;
        unint64_t v143 = v363;
        char v145 = &v356[v135];
        if ((unint64_t)(v133 - (void)v356) < 0x20) {
          goto LABEL_237;
        }
        if (v135 >= 0x20)
        {
          unint64_t v174 = v135 & 0xFFFFFFFFFFFFFFE0;
          unint64_t v205 = &v356[v135 - 16];
          uint64_t v206 = v134 - 16;
          unint64_t v207 = v135 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v208 = *(_OWORD *)v206;
            *((_OWORD *)v205 - 1) = *((_OWORD *)v206 - 1);
            *(_OWORD *)unint64_t v205 = v208;
            v205 -= 32;
            v206 -= 32;
            v207 -= 32;
          }
          while (v207);
          if (v135 == v174) {
            goto LABEL_239;
          }
          if ((v135 & 0x18) == 0)
          {
            char v145 = &v351[-v174];
            v134 -= v174;
LABEL_237:
            char v245 = v145 - 1;
            do
            {
              char v246 = *--v134;
              *v245-- = v246;
            }
            while (v134 != (char *)v133);
LABEL_239:
            uint64_t v134 = (char *)v133;
            char v171 = v144;
LABEL_240:
            *unint64_t v143 = (uint64_t)v171;
            v143[1] = (uint64_t)&v144[__sz];
            v143[2] = (uint64_t)&v144[v142];
            if (v134) {
              operator delete(v134);
            }
            goto LABEL_242;
          }
        }
        else
        {
          unint64_t v174 = 0;
        }
        char v145 = &v351[-(v135 & 0xFFFFFFFFFFFFFFF8)];
        uint64_t v209 = &v134[-v174 - v133 - 8 + (void)v356];
        int v210 = &v134[-v174 - 8];
        unint64_t v211 = v174 - (v135 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v212 = *(void *)v210;
          v210 -= 8;
          *(void *)uint64_t v209 = v212;
          v209 -= 8;
          v211 += 8;
        }
        while (v211);
        v134 -= v135 & 0xFFFFFFFFFFFFFFF8;
        if (v135 == (v135 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_239;
        }
        goto LABEL_237;
      case 3u:
        uint64_t v117 = (unsigned __int8 *)*a1;
        unsigned int v116 = (unsigned __int8 *)a1[1];
        if (v116 != (unsigned __int8 *)*a1)
        {
          a1[1] = (uint64_t)v117;
          unsigned int v116 = v117;
        }
        if (a1[2] - (uint64_t)v117 >= __sz) {
          goto LABEL_96;
        }
        if ((__sz & 0x8000000000000000) != 0) {
          goto LABEL_329;
        }
        uint64_t v118 = operator new(__sz);
        unint64_t v119 = v116 - v117;
        unint64_t v120 = &v118[v116 - v117];
        char v121 = v120;
        a1 = v363;
        a2 = v364;
        size_t v15 = a6;
        if (v116 == v117) {
          goto LABEL_94;
        }
        char v121 = v118;
        if (v119 < 8 || (unint64_t)(v117 - v118) < 0x20)
        {
          char v122 = v116;
          unsigned int v123 = &v118[v116 - v117];
          goto LABEL_92;
        }
        if (v119 >= 0x20)
        {
          unint64_t v173 = v119 & 0xFFFFFFFFFFFFFFE0;
          unsigned int v189 = &v118[v119 - 16];
          uint64_t v190 = v116 - 16;
          unint64_t v191 = v119 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v192 = *(_OWORD *)v190;
            *(v189 - 1) = *((_OWORD *)v190 - 1);
            _OWORD *v189 = v192;
            v189 -= 2;
            v190 -= 32;
            v191 -= 32;
          }
          while (v191);
          if (v119 == v173)
          {
LABEL_94:
            uint64_t *v363 = (uint64_t)v121;
            v363[1] = (uint64_t)v120;
            v363[2] = (uint64_t)&v118[__sz];
            if (v117) {
              operator delete(v117);
            }
LABEL_96:
            uint64_t v126 = 0;
            uint64_t v127 = v17 + v59 + 1;
            size_t v95 = v361;
            uint64_t v93 = v365;
            do
            {
              char v128 = 0;
              unint64_t v129 = 0;
              uint64_t v130 = 0;
              uint64_t v99 = v127;
              uint64_t v131 = &a2[v127];
              do
              {
                int v132 = (char)v131[v129];
                v130 |= (unint64_t)(v131[v129] & 0x7F) << v128;
                unint64_t v102 = v129 + 1;
                if (v129 > 8) {
                  break;
                }
                v128 += 7;
                ++v129;
              }
              while (v132 < 0);
              if (v130 != -v55) {
                a7->i8[v126] = -a7->i8[v126];
              }
              uint64_t v127 = v99 + v102;
              ++v126;
            }
            while (v126 != v15);
            goto LABEL_8;
          }
          if ((v119 & 0x18) == 0)
          {
            unsigned int v123 = &v120[-v173];
            char v122 = &v116[-v173];
LABEL_92:
            uint64_t v124 = v123 - 1;
            do
            {
              char v125 = *--v122;
              *v124-- = v125;
            }
            while (v122 != v117);
            goto LABEL_94;
          }
        }
        else
        {
          unint64_t v173 = 0;
        }
        char v122 = &v116[-(v119 & 0xFFFFFFFFFFFFFFF8)];
        unsigned int v123 = &v120[-(v119 & 0xFFFFFFFFFFFFFFF8)];
        char v193 = &v118[&v116[-v173] - v117 - 8];
        unsigned int v194 = &v116[-v173 - 8];
        unint64_t v195 = v173 - (v119 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v196 = *(void *)v194;
          v194 -= 8;
          *v193-- = v196;
          v195 += 8;
        }
        while (v195);
        if (v119 != (v119 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_92;
        }
        goto LABEL_94;
      case 4u:
        operator new();
      default:
        return 3;
    }
  }
}

void sub_1890083BC(_Unwind_Exception *a1)
{
  MEMORY[0x18C11F580](v2, 0x20C4093837F09);
  MEMORY[0x18C11F580](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void sub_1890086AC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1890089D8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189008A98(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1890094F8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOTimepointWriteTo(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = *(unsigned char *)(result + 20);
  if ((v2 & 2) == 0)
  {
    if ((*(unsigned char *)(result + 20) & 4) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = PBDataWriterWriteInt32Field();
    if ((*(unsigned char *)(v1 + 20) & 1) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t result = PBDataWriterWriteDoubleField();
  char v2 = *(unsigned char *)(v1 + 20);
  if ((v2 & 4) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v2 & 1) == 0) {
    return result;
  }
LABEL_7:

  return PBDataWriterWriteDoubleField();
}

void sub_189009658(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOETARequestIsDirty(uint64_t a1)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 296));
  uint64_t v2 = *(void *)(a1 + 320);
  if ((v2 & 0x20000000000) != 0) {
    return 1;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if (GEOWaypointIsDirty(*(os_unfair_lock_s **)(a1 + 184))) {
      return 1;
    }
    uint64_t v2 = *(void *)(a1 + 320);
  }
  if ((v2 & 0x200000) == 0)
  {
    if ((v2 & 0x8000) != 0)
    {
      if (GEOAdditionalEnabledMarketsIsDirty(*(void *)(a1 + 72))) {
        return 1;
      }
      uint64_t v2 = *(void *)(a1 + 320);
    }
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_12;
    }
    if ((GEOWaypointTypedIsDirty(*(os_unfair_lock_s **)(a1 + 152)) & 1) == 0)
    {
      uint64_t v2 = *(void *)(a1 + 320);
LABEL_12:
      if ((v2 & 0x900000) != 0) {
        return 1;
      }
      if ((v2 & 0x10000) != 0)
      {
        if (GEOAutomobileOptionsIsDirty(*(os_unfair_lock_s **)(a1 + 80))) {
          return 1;
        }
        uint64_t v2 = *(void *)(a1 + 320);
      }
      if ((v2 & 0x80000) != 0)
      {
        if (GEOCyclingOptionsIsDirty(*(void *)(a1 + 104))) {
          return 1;
        }
        uint64_t v2 = *(void *)(a1 + 320);
      }
      if ((v2 & 0x8000000000) != 0)
      {
        if (GEOTransitOptionsIsDirty(*(void *)(a1 + 272))) {
          return 1;
        }
        uint64_t v2 = *(void *)(a1 + 320);
      }
      if ((v2 & 0x10000000000) != 0)
      {
        if (GEOWalkingOptionsIsDirty(*(void *)(a1 + 280))) {
          return 1;
        }
        uint64_t v2 = *(void *)(a1 + 320);
      }
      if ((v2 & 0x101C440000) != 0) {
        return 1;
      }
      if ((v2 & 0x20000) != 0)
      {
        if (GEOClientCapabilitiesIsDirty(*(void *)(a1 + 88))) {
          return 1;
        }
        uint64_t v2 = *(void *)(a1 + 320);
      }
      if ((v2 & 0x1000000) != 0)
      {
        if (GEOLocationIsDirty(*(os_unfair_lock_s **)(a1 + 144))) {
          return 1;
        }
        uint64_t v2 = *(void *)(a1 + 320);
      }
      if ((v2 & 0x480004000) != 0) {
        return 1;
      }
      if ((v2 & 0x200000000) != 0)
      {
        if (GEORecentLocationHistoryIsDirty(*(void *)(a1 + 216))) {
          return 1;
        }
        uint64_t v2 = *(void *)(a1 + 320);
      }
      if ((v2 & 0x6940000000) != 0) {
        return 1;
      }
      if ((v2 & 0x200000) != 0)
      {
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        id v5 = *(id *)(a1 + 120);
        uint64_t v6 = [v5 countByEnumeratingWithState:&v32 objects:v39 count:16];
        if (v6)
        {
          uint64_t v7 = v6;
          uint64_t v8 = *(void *)v33;
LABEL_42:
          uint64_t v9 = 0;
          while (1)
          {
            if (*(void *)v33 != v8) {
              objc_enumerationMutation(v5);
            }
            if (GEOWaypointIsDirty(*(os_unfair_lock_s **)(*((void *)&v32 + 1) + 8 * v9))) {
              goto LABEL_80;
            }
            if (v7 == ++v9)
            {
              uint64_t v7 = [v5 countByEnumeratingWithState:&v32 objects:v39 count:16];
              if (v7) {
                goto LABEL_42;
              }
              break;
            }
          }
        }

        uint64_t v2 = *(void *)(a1 + 320);
      }
      if ((v2 & 0x100000) != 0)
      {
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        id v5 = *(id *)(a1 + 112);
        uint64_t v10 = [v5 countByEnumeratingWithState:&v28 objects:v38 count:16];
        if (v10)
        {
          uint64_t v11 = v10;
          uint64_t v12 = *(void *)v29;
LABEL_52:
          uint64_t v13 = 0;
          while (1)
          {
            if (*(void *)v29 != v12) {
              objc_enumerationMutation(v5);
            }
            if (GEOWaypointTypedIsDirty(*(os_unfair_lock_s **)(*((void *)&v28 + 1) + 8 * v13))) {
              goto LABEL_80;
            }
            if (v11 == ++v13)
            {
              uint64_t v11 = [v5 countByEnumeratingWithState:&v28 objects:v38 count:16];
              if (v11) {
                goto LABEL_52;
              }
              break;
            }
          }
        }

        uint64_t v2 = *(void *)(a1 + 320);
      }
      if ((v2 & 0x800000) != 0)
      {
        long long v26 = 0u;
        long long v27 = 0u;
        long long v24 = 0u;
        long long v25 = 0u;
        id v5 = *(id *)(a1 + 136);
        uint64_t v14 = [v5 countByEnumeratingWithState:&v24 objects:v37 count:16];
        if (v14)
        {
          uint64_t v15 = v14;
          uint64_t v16 = *(void *)v25;
LABEL_62:
          uint64_t v17 = 0;
          while (1)
          {
            if (*(void *)v25 != v16) {
              objc_enumerationMutation(v5);
            }
            if (GEOWaypointTypedIsDirty(*(os_unfair_lock_s **)(*((void *)&v24 + 1) + 8 * v17))) {
              goto LABEL_80;
            }
            if (v15 == ++v17)
            {
              uint64_t v15 = [v5 countByEnumeratingWithState:&v24 objects:v37 count:16];
              if (v15) {
                goto LABEL_62;
              }
              break;
            }
          }
        }

        uint64_t v2 = *(void *)(a1 + 320);
      }
      if ((v2 & 0x400000) == 0) {
        return 0;
      }
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      id v5 = *(id *)(a1 + 128);
      uint64_t v3 = [v5 countByEnumeratingWithState:&v20 objects:v36 count:16];
      if (!v3)
      {
LABEL_81:

        return v3;
      }
      uint64_t v18 = *(void *)v21;
LABEL_73:
      uint64_t v19 = 0;
      while (1)
      {
        if (*(void *)v21 != v18) {
          objc_enumerationMutation(v5);
        }
        if (GEOLocationIsDirty(*(os_unfair_lock_s **)(*((void *)&v20 + 1) + 8 * v19))) {
          break;
        }
        if (v3 == ++v19)
        {
          uint64_t v3 = [v5 countByEnumeratingWithState:&v20 objects:v36 count:16];
          if (v3) {
            goto LABEL_73;
          }
          goto LABEL_81;
        }
      }
LABEL_80:
      uint64_t v3 = 1;
      goto LABEL_81;
    }
  }
  return 1;
}

void sub_18900A030(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18900A104(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

#error "18900A224: too complex function (funcsize=7824)"

void sub_189013450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1890138E0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOETAResultIsDirty(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  __int16 v2 = *(_WORD *)(a1 + 76);
  if ((v2 & 0x100) != 0) {
    return 1;
  }
  if ((v2 & 0x40) != 0)
  {
    if (GEOPlaceSearchResponseIsDirty(*(os_unfair_lock_s **)(a1 + 32))) {
      return 1;
    }
    __int16 v2 = *(_WORD *)(a1 + 76);
  }
  if ((v2 & 0xA0) != 0) {
    return 1;
  }
  if ((v2 & 0x80) == 0) {
    return 0;
  }
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v5 = *(id *)(a1 + 40);
  uint64_t v3 = [v5 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    uint64_t v6 = *(void *)v9;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v9 != v6) {
          objc_enumerationMutation(v5);
        }
        if (GEOETAResultByTypeIsDirty(*(os_unfair_lock_s **)(*((void *)&v8 + 1) + 8 * i)))
        {
          uint64_t v3 = 1;
          goto LABEL_20;
        }
      }
      uint64_t v3 = [v5 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v3) {
        continue;
      }
      break;
    }
  }
LABEL_20:

  return v3;
}

void sub_189013CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _GEOPDSpatialPlaceLookupResultCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v2 = *(id *)(a1 + 32);
  uint64_t v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        objc_msgSend(*(id *)(*((void *)&v8 + 1) + 8 * v6++), "readAll:", 1, (void)v8);
      }
      while (v4 != v6);
      uint64_t v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v4);
  }

  return [*(id *)(a1 + 24) readAll:1];
}

uint64_t geo::codec::_readMaterials(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, int a6)
{
  *(void *)(a2 + 8) = *(void *)a2;
  a4[1] = *a4;
  uint64_t v6 = *(void **)a3;
  *(void *)(a3 + 8) = *(void *)a3;
  uint64_t v7 = *(void *)(a1 + 48);
  if ((unint64_t)(v7 + 2) > *(void *)(a1 + 56))
  {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 7725);
    return 0;
  }
  uint64_t v13 = (void *)a1;
  unint64_t v14 = *(unsigned __int16 *)(*(void *)(a1 + 40) + v7);
  *(void *)(a1 + 48) = v7 + 2;
  if (!v14)
  {
LABEL_23:
    uint64_t v27 = *(void *)a2;
    if (v14 <= (uint64_t)(*(void *)(a2 + 16) - *(void *)a2) >> 3) {
      goto LABEL_36;
    }
LABEL_26:
    uint64_t v28 = *(void *)(a2 + 8) - v27;
    a1 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(a2 + 24) + 16))(*(void *)(a2 + 24), 8 * v14, 8);
    unint64_t v29 = a1 + (v28 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v30 = *(void *)a2;
    uint64_t v31 = *(void *)(a2 + 8);
    unint64_t v32 = v29;
    if (v31 == *(void *)a2) {
      goto LABEL_34;
    }
    unint64_t v33 = v31 - *(void *)a2 - 8;
    if (v33 >= 0x58)
    {
      unint64_t v32 = a1 + (v28 & 0xFFFFFFFFFFFFFFF8);
      if (v31 - (v28 & 0xFFFFFFFFFFFFFFF8) - a1 >= 0x20)
      {
        uint64_t v34 = (v33 >> 3) + 1;
        uint64_t v35 = 8 * (v34 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v36 = v31 - v35;
        unint64_t v32 = v29 - v35;
        unsigned int v37 = (_OWORD *)(a1 + 8 * (v28 >> 3) - 16);
        BOOL v38 = (long long *)(v31 - 16);
        uint64_t v39 = v34 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v40 = *v38;
          *(v37 - 1) = *(v38 - 1);
          *unsigned int v37 = v40;
          v37 -= 2;
          v38 -= 2;
          v39 -= 4;
        }
        while (v39);
        uint64_t v31 = v36;
        if (v34 == (v34 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_34:
          *(void *)a2 = v32;
          *(void *)(a2 + 8) = v29;
          uint64_t v42 = *(void *)(a2 + 16);
          *(void *)(a2 + 16) = a1 + 8 * v14;
          if (v30) {
            a1 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24), v30, v42 - v30);
          }
          goto LABEL_36;
        }
      }
    }
    else
    {
      unint64_t v32 = a1 + (v28 & 0xFFFFFFFFFFFFFFF8);
    }
    do
    {
      uint64_t v41 = *(void *)(v31 - 8);
      v31 -= 8;
      *(void *)(v32 - 8) = v41;
      v32 -= 8;
    }
    while (v31 != v30);
    goto LABEL_34;
  }
  uint64_t v15 = *(void *)(a3 + 16) - (void)v6;
  uint64_t v16 = 16 * v14;
  if (v14 > v15 >> 4)
  {
    uint64_t v17 = v15 >> 3;
    if (v15 >> 3 <= v14) {
      uint64_t v17 = v14;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
      uint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v18 = v17;
    }
    a1 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a3 + 24) + 16))(*(void *)(a3 + 24), 16 * v18, 8);
    uint64_t v19 = 0;
    uint64_t v20 = a1 + v16;
    do
    {
      long long v21 = (void *)(a1 + v19);
      if (a1 + v19)
      {
        *long long v21 = 0;
        v21[1] = 0;
      }
      v19 += 16;
    }
    while (v16 != v19);
    uint64_t v23 = a1 + 16 * v18;
    long long v25 = *(void **)a3;
    long long v24 = *(void **)(a3 + 8);
    if (v24 != *(void **)a3)
    {
      do
      {
        *(_OWORD *)(a1 - 16) = *((_OWORD *)v24 - 1);
        a1 -= 16;
        v24 -= 2;
      }
      while (v24 != v25);
      long long v24 = *(void **)a3;
    }
    *(void *)a3 = a1;
    *(void *)(a3 + 8) = v20;
    uint64_t v26 = *(void *)(a3 + 16);
    *(void *)(a3 + 16) = v23;
    if (v24) {
      a1 = (*(uint64_t (**)(void, void *, uint64_t))(**(void **)(a3 + 24) + 40))(*(void *)(a3 + 24), v24, v26 - (void)v24);
    }
    goto LABEL_23;
  }
  long long v22 = &v6[(unint64_t)v16 / 8];
  do
  {
    if (v6)
    {
      void *v6 = 0;
      v6[1] = 0;
    }
    v6 += 2;
    v16 -= 16;
  }
  while (v16);
  *(void *)(a3 + 8) = v22;
  uint64_t v27 = *(void *)a2;
  if (v14 > (uint64_t)(*(void *)(a2 + 16) - *(void *)a2) >> 3) {
    goto LABEL_26;
  }
LABEL_36:
  if (v14 > (a4[2] - *a4) >> 3)
  {
    uint64_t v43 = a4[1] - *a4;
    a1 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a4[3] + 16))(a4[3], 8 * v14, 8);
    unint64_t v44 = a1 + (v43 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v45 = *a4;
    uint64_t v46 = a4[1];
    unint64_t v47 = v44;
    if (v46 == *a4) {
      goto LABEL_45;
    }
    unint64_t v48 = v46 - *a4 - 8;
    if (v48 >= 0x58)
    {
      unint64_t v47 = a1 + (v43 & 0xFFFFFFFFFFFFFFF8);
      if (v46 - (v43 & 0xFFFFFFFFFFFFFFF8) - a1 >= 0x20)
      {
        uint64_t v49 = (v48 >> 3) + 1;
        uint64_t v50 = 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v51 = v46 - v50;
        unint64_t v47 = v44 - v50;
        size_t v52 = (_OWORD *)(a1 + 8 * (v43 >> 3) - 16);
        uint64_t v53 = (long long *)(v46 - 16);
        uint64_t v54 = v49 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v55 = *v53;
          *(v52 - 1) = *(v53 - 1);
          *size_t v52 = v55;
          v52 -= 2;
          v53 -= 2;
          v54 -= 4;
        }
        while (v54);
        uint64_t v46 = v51;
        if (v49 == (v49 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_45:
          *a4 = v47;
          a4[1] = v44;
          uint64_t v57 = a4[2];
          a4[2] = a1 + 8 * v14;
          if (v45) {
            a1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a4[3] + 40))(a4[3], v45, v57 - v45);
          }
          goto LABEL_47;
        }
      }
    }
    else
    {
      unint64_t v47 = a1 + (v43 & 0xFFFFFFFFFFFFFFF8);
    }
    do
    {
      uint64_t v56 = *(void *)(v46 - 8);
      v46 -= 8;
      *(void *)(v47 - 8) = v56;
      v47 -= 8;
    }
    while (v46 != v45);
    goto LABEL_45;
  }
LABEL_47:
  if (!v14) {
    return 1;
  }
  uint64_t v58 = 0;
  unsigned int v164 = (void *)(a5 + 8);
  unint64_t v165 = v14;
  uint64_t v59 = a5 + 16;
  uint64_t v167 = a5;
  uint64_t v163 = a5 + 24;
  int v166 = a6;
  while (1)
  {
    int v61 = *(void **)a3;
    uint64_t v62 = *(void *)a3 + 16 * v58;
    if (a6)
    {
      *(unsigned char *)(v62 + 8) = a6;
      uint64_t v63 = v13[6];
      unint64_t v64 = v13[7];
LABEL_75:
      if (v63 + 8 > v64)
      {
        unsigned int v160 = (FILE *)*MEMORY[0x1E4F143C8];
        int v161 = 7742;
        goto LABEL_187;
      }
      *(void *)uint64_t v62 = *(void *)(v13[5] + v63);
      v13[6] = v63 + 8;
      if (*(void *)v62) {
        std::vector<unsigned long long,geo::StdAllocator<unsigned long long,geo::codec::Allocator>>::emplace_back<unsigned long long &>(a2, (void *)v62);
      }
      goto LABEL_78;
    }
    uint64_t v65 = v13[6];
    unint64_t v64 = v13[7];
    uint64_t v63 = v65 + 1;
    if (v65 + 1 > v64)
    {
      unsigned int v160 = (FILE *)*MEMORY[0x1E4F143C8];
      int v161 = 7735;
      goto LABEL_187;
    }
    char v66 = *(unsigned char *)(v13[5] + v65);
    v13[6] = v63;
    uint64_t v67 = *(void *)v62;
    LOBYTE(v61[2 * v58 + 1]) = v66 & 1;
    if (v66) {
      goto LABEL_75;
    }
    uint64_t v68 = geo::codec::Allocator::instance((geo::codec::Allocator *)a1);
    unsigned int v69 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v68 + 16))(v68, 40, 8);
    *(void *)uint64_t v62 = v69;
    if (!v69)
    {
      unsigned int v160 = (FILE *)*MEMORY[0x1E4F143C8];
      int v161 = 7748;
      goto LABEL_187;
    }
    uint64_t v70 = v13[6];
    unint64_t v71 = v13[7];
    uint64_t v72 = v70 + 8;
    if (v70 + 8 > v71)
    {
      unsigned int v160 = (FILE *)*MEMORY[0x1E4F143C8];
      int v161 = 7749;
      goto LABEL_187;
    }
    uint64_t v73 = v13[5];
    *(void *)uint64_t v67 = *(void *)(v73 + v70);
    v13[6] = v72;
    unint64_t v74 = v70 + 10;
    if (v74 > v71)
    {
      unsigned int v160 = (FILE *)*MEMORY[0x1E4F143C8];
      int v161 = 7750;
      goto LABEL_187;
    }
    *(_WORD *)(v67 + 8) = *(_WORD *)(v73 + v72);
    v13[6] = v74;
    uint64_t v75 = geo::codec::Allocator::instance(v69);
    unint64_t v76 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v75 + 16))(v75, 24, 8);
    *(void *)(v67 + 16) = v76;
    if (!v76)
    {
      unsigned int v160 = (FILE *)*MEMORY[0x1E4F143C8];
      int v161 = 7754;
      goto LABEL_187;
    }
    uint64_t Material = geo::codec::readMaterial(v13, v76, 0);
    if ((Material & 1) == 0)
    {
      unsigned int v160 = (FILE *)*MEMORY[0x1E4F143C8];
      int v161 = 7755;
      goto LABEL_187;
    }
    uint64_t v78 = v13[6];
    if ((unint64_t)(v78 + 2) > v13[7])
    {
      unsigned int v160 = (FILE *)*MEMORY[0x1E4F143C8];
      int v161 = 7758;
      goto LABEL_187;
    }
    *(_WORD *)(v67 + 10) = *(_WORD *)(v13[5] + v78);
    v13[6] = v78 + 2;
    uint64_t v79 = geo::codec::Allocator::instance((geo::codec::Allocator *)Material);
    uint64_t v80 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v79 + 16))(v79, 24 * *(unsigned __int16 *)(v67 + 10), 8);
    *(void *)(v67 + 24) = v80;
    if (!v80)
    {
      unsigned int v160 = (FILE *)*MEMORY[0x1E4F143C8];
      int v161 = 7760;
      goto LABEL_187;
    }
    if (*(_WORD *)(v67 + 10)) {
      break;
    }
LABEL_68:
    uint64_t v83 = v13[6];
    if ((unint64_t)(v83 + 1) > v13[7])
    {
      unsigned int v160 = (FILE *)*MEMORY[0x1E4F143C8];
      int v161 = 7766;
      goto LABEL_187;
    }
    *(unsigned char *)(v67 + 12) = *(unsigned char *)(v13[5] + v83);
    ++v13[6];
    uint64_t v84 = geo::codec::Allocator::instance((geo::codec::Allocator *)v80);
    uint64_t v85 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v84 + 16))(v84, 16 * *(unsigned __int8 *)(v67 + 12), 8);
    *(void *)(v67 + 32) = v85;
    if (!v85)
    {
      unsigned int v160 = (FILE *)*MEMORY[0x1E4F143C8];
      int v161 = 7768;
      goto LABEL_187;
    }
    if (*(unsigned char *)(v67 + 12))
    {
      uint64_t v86 = 0;
      unint64_t v87 = 0;
      while (1)
      {
        unsigned int v88 = (unsigned int *)(*(void *)(v67 + 32) + v86);
        uint64_t VarUint32 = (geo::codec::Allocator *)geo::codec::chapterReadVarUint32(v13, v88);
        if (!VarUint32) {
          break;
        }
        uint64_t v90 = geo::codec::Allocator::instance(VarUint32);
        char v91 = (void *)(*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v90 + 16))(v90, *v88, 8);
        *((void *)v88 + 1) = v91;
        memcpy(v91, (const void *)(v13[5] + v13[6]), *v88);
        v13[6] += *v88;
        ++v87;
        v86 += 16;
        if (v87 >= *(unsigned __int8 *)(v67 + 12)) {
          goto LABEL_78;
        }
      }
      unsigned int v160 = (FILE *)*MEMORY[0x1E4F143C8];
      int v161 = 7771;
      goto LABEL_187;
    }
LABEL_78:
    uint64_t v92 = v13[6];
    if ((unint64_t)(v92 + 1) > v13[7])
    {
      unsigned int v160 = (FILE *)*MEMORY[0x1E4F143C8];
      int v161 = 7778;
      goto LABEL_187;
    }
    unsigned int v93 = *(unsigned __int8 *)(v13[5] + v92);
    v13[6] = v92 + 1;
    _ZNSt3__115allocate_sharedB8ne180100I22FeatureStyleAttributesNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v169);
    if (!v93)
    {
LABEL_96:
      long long v168 = v169;
      if (*((void *)&v169 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v169 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      FeatureStyleAttributesSet::insert(v167, (uint64_t *)&v168);
      size_t v111 = (std::__shared_weak_count *)*((void *)&v168 + 1);
      if (*((void *)&v168 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v168 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
        std::__shared_weak_count::__release_weak(v111);
      }
      long long v168 = v169;
      if (*((void *)&v169 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v169 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      size_t v112 = (void *)*v164;
      if (!*v164) {
        goto LABEL_110;
      }
      unint64_t v113 = v164;
      do
      {
        BOOL v114 = FeatureStyleAttributesSet::FeatureStyleAttributesCompare::operator()(v59, v112 + 4, (uint64_t *)&v168);
        char v115 = v112 + 1;
        if (!v114)
        {
          char v115 = v112;
          unint64_t v113 = v112;
        }
        size_t v112 = (void *)*v115;
      }
      while (*v115);
      if (v113 == v164
        || (a1 = FeatureStyleAttributesSet::FeatureStyleAttributesCompare::operator()(v59, (uint64_t *)&v168, v113 + 4),
            (a1 & 1) != 0))
      {
LABEL_110:
        std::__tree<std::shared_ptr<FeatureStyleAttributes const>,FeatureStyleAttributesSet::FeatureStyleAttributesCompare,std::allocator<std::shared_ptr<FeatureStyleAttributes const>>>::__emplace_unique_key_args<std::shared_ptr<FeatureStyleAttributes const>,std::shared_ptr<FeatureStyleAttributes const> const&>((uint64_t **)v167, (uint64_t *)&v168, (uint64_t *)&v168);
        unsigned int v116 = *(void **)(v167 + 32);
        if ((unint64_t)v116 >= *(void *)(v167 + 40))
        {
          a1 = std::vector<std::shared_ptr<FeatureStyleAttributes const>,geo::StdAllocator<std::shared_ptr<FeatureStyleAttributes const>,geo::codec::Allocator>>::__emplace_back_slow_path<std::shared_ptr<FeatureStyleAttributes const> const&>(v163, &v168);
        }
        else
        {
          if (v116)
          {
            void *v116 = v168;
            uint64_t v117 = *((void *)&v168 + 1);
            v116[1] = *((void *)&v168 + 1);
            if (v117) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v117 + 8), 1uLL, memory_order_relaxed);
            }
          }
          a1 = (uint64_t)(v116 + 2);
        }
        *(void *)(v167 + 32) = a1;
        uint64_t v118 = ((a1 - *(void *)(v167 + 24)) >> 4) - 1;
      }
      else
      {
        uint64_t v135 = *(void *)(v167 + 24);
        uint64_t v136 = *(void *)(v167 + 32) - v135;
        if (v136)
        {
          unint64_t v137 = v136 >> 4;
          if (v137 <= 1) {
            unint64_t v137 = 1;
          }
          uint64_t v118 = 0;
          if (*(unsigned char *)(v168 + 33))
          {
            unint64_t v138 = *(unsigned __int8 *)(v168 + 33);
            while (1)
            {
              uint64_t v147 = *(void *)(v135 + 16 * v118);
              if (v138 == *(unsigned __int8 *)(v147 + 33))
              {
                uint64_t v148 = *(void *)v168;
                unint64_t v149 = *(_DWORD **)v147;
                if (**(_DWORD **)v168 == *v149 && *(_DWORD *)(v148 + 4) == v149[1]) {
                  break;
                }
              }
LABEL_152:
              if (++v118 == v137) {
                goto LABEL_143;
              }
            }
            unint64_t v150 = v149 + 3;
            uint64_t v151 = (int *)(v148 + 12);
            uint64_t v152 = 1;
            while (v138 != v152)
            {
              unint64_t v153 = v152;
              if (*(v151 - 1) == *(v150 - 1))
              {
                int v155 = *v151;
                v151 += 2;
                int v154 = v155;
                int v156 = *v150;
                v150 += 2;
                ++v152;
                if (v154 == v156) {
                  continue;
                }
              }
              if (v153 >= v138) {
                break;
              }
              goto LABEL_152;
            }
          }
          else
          {
            while (*(unsigned char *)(*(void *)v135 + 33))
            {
              ++v118;
              v135 += 16;
              if (v137 == v118)
              {
LABEL_143:
                uint64_t v118 = v137;
                break;
              }
            }
          }
        }
        else
        {
          uint64_t v118 = 0;
        }
      }
      unint64_t v119 = (uint64_t *)a4[1];
      unint64_t v120 = a4[2];
      if ((unint64_t)v119 < v120)
      {
        if (v119) {
          uint64_t *v119 = v118;
        }
        char v121 = v119 + 1;
        goto LABEL_165;
      }
      uint64_t v122 = ((uint64_t)v119 - *a4) >> 3;
      unint64_t v123 = v122 + 1;
      if ((unint64_t)(v122 + 1) >> 61) {
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v124 = v120 - *a4;
      if (v124 >> 2 > v123) {
        unint64_t v123 = v124 >> 2;
      }
      if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFF8) {
        uint64_t v125 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v125 = v123;
      }
      if (v125)
      {
        a1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a4[3] + 16))(a4[3], 8 * v125, 8);
        uint64_t v126 = (uint64_t *)(a1 + 8 * v122);
        uint64_t v127 = a1 + 8 * v125;
        if (a1) {
          *uint64_t v126 = v118;
        }
        uint64_t v128 = *a4;
        uint64_t v129 = a4[1];
        uint64_t v130 = a1 + 8 * v122;
        uint64_t v131 = v129 - *a4;
        if (v129 == *a4) {
          goto LABEL_163;
        }
      }
      else
      {
        uint64_t v127 = 0;
        uint64_t v126 = (uint64_t *)(8 * v122);
        uint64_t v128 = *a4;
        uint64_t v129 = a4[1];
        uint64_t v130 = 8 * v122;
        uint64_t v131 = v129 - *a4;
        if (v129 == *a4) {
          goto LABEL_163;
        }
      }
      unint64_t v139 = v131 - 8;
      if (v139 < 0x38)
      {
        uint64_t v130 = (uint64_t)v126;
      }
      else
      {
        uint64_t v130 = (uint64_t)v126;
        if ((unint64_t)(v129 - (void)v126) >= 0x20)
        {
          uint64_t v140 = (v139 >> 3) + 1;
          uint64_t v141 = 8 * (v140 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v142 = v129 - v141;
          uint64_t v130 = (uint64_t)&v126[v141 / 0xFFFFFFFFFFFFFFF8];
          unint64_t v143 = v126 - 2;
          char v144 = (long long *)(v129 - 16);
          uint64_t v145 = v140 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v146 = *v144;
            *((_OWORD *)v143 - 1) = *(v144 - 1);
            *(_OWORD *)unint64_t v143 = v146;
            v143 -= 4;
            v144 -= 2;
            v145 -= 4;
          }
          while (v145);
          uint64_t v129 = v142;
          if (v140 == (v140 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_163:
            char v121 = v126 + 1;
            *a4 = v130;
            a4[1] = (uint64_t)(v126 + 1);
            uint64_t v158 = a4[2];
            a4[2] = v127;
            if (v128) {
              a1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a4[3] + 40))(a4[3], v128, v158 - v128);
            }
LABEL_165:
            a4[1] = (uint64_t)v121;
            int v159 = (std::__shared_weak_count *)*((void *)&v168 + 1);
            if (*((void *)&v168 + 1)
              && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v168 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
              std::__shared_weak_count::__release_weak(v159);
            }
            uint64_t v133 = 1;
            uint64_t v134 = (std::__shared_weak_count *)*((void *)&v169 + 1);
            if (!*((void *)&v169 + 1)) {
              goto LABEL_49;
            }
            goto LABEL_169;
          }
        }
      }
      do
      {
        uint64_t v157 = *(void *)(v129 - 8);
        v129 -= 8;
        *(void *)(v130 - 8) = v157;
        v130 -= 8;
      }
      while (v129 != v128);
      goto LABEL_163;
    }
    int v94 = 0;
    while (1)
    {
      uint64_t v96 = v13[6];
      unint64_t v97 = v13[7];
      uint64_t v98 = v96 + 2;
      if (v96 + 2 > v97)
      {
        int v132 = 7783;
        goto LABEL_134;
      }
      uint64_t v99 = v13[5];
      uint64_t v100 = *(unsigned __int16 *)(v99 + v96);
      v13[6] = v98;
      unint64_t v101 = v96 + 6;
      if (v101 > v97) {
        break;
      }
      uint64_t v102 = *(unsigned int *)(v99 + v98);
      v13[6] = v101;
      uint64_t v103 = v169;
      uint64_t v104 = *(unsigned __int8 *)(v169 + 33);
      uint64_t v105 = *(void *)v169;
      if (*(unsigned char *)(v169 + 33))
      {
        if (v104 >= 0x20)
        {
          uint64_t v106 = 0;
          unint64_t v109 = *(int **)v169;
          while (1)
          {
            int v110 = *v109;
            v109 += 2;
            if (v110 == v100) {
              break;
            }
            if (v104 == ++v106) {
              goto LABEL_82;
            }
          }
        }
        else
        {
          uint64_t v106 = 0;
          size_t v107 = *(int **)v169;
          while (1)
          {
            int v108 = *v107;
            v107 += 2;
            if (v108 == v100) {
              break;
            }
            if (v104 == ++v106) {
              goto LABEL_81;
            }
          }
        }
        *(_DWORD *)(v105 + 8 * v106 + 4) = v102;
      }
      else
      {
LABEL_81:
        *(void *)(v105 + 8 * v104) = v100 | (v102 << 32);
        unsigned __int8 v95 = *(unsigned char *)(v103 + 33) + 1;
        *(unsigned char *)(v103 + 33) = v95;
        qsort(*(void **)v103, v95, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
      }
LABEL_82:
      if (++v94 >= v93) {
        goto LABEL_96;
      }
    }
    int v132 = 7784;
LABEL_134:
    a1 = fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v132);
    uint64_t v133 = 0;
    uint64_t v134 = (std::__shared_weak_count *)*((void *)&v169 + 1);
    if (!*((void *)&v169 + 1)) {
      goto LABEL_49;
    }
LABEL_169:
    if (!atomic_fetch_add(&v134->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
LABEL_49:
    if (++v58 < v165) {
      char v60 = v133;
    }
    else {
      char v60 = 0;
    }
    a6 = v166;
    if ((v60 & 1) == 0) {
      return v133;
    }
  }
  uint64_t v81 = 0;
  unint64_t v82 = 0;
  while (1)
  {
    uint64_t v80 = geo::codec::readMaterial(v13, (uint64_t *)(*(void *)(v67 + 24) + v81), 1);
    if ((v80 & 1) == 0) {
      break;
    }
    ++v82;
    v81 += 24;
    if (v82 >= *(unsigned __int16 *)(v67 + 10)) {
      goto LABEL_68;
    }
  }
  unsigned int v160 = (FILE *)*MEMORY[0x1E4F143C8];
  int v161 = 7763;
LABEL_187:
  fprintf(v160, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v161);
  return 0;
}

void sub_189014C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<unsigned long long,geo::StdAllocator<unsigned long long,geo::codec::Allocator>>::emplace_back<unsigned long long &>(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void **)(result + 8);
  unint64_t v5 = *(void *)(result + 16);
  if ((unint64_t)v4 < v5)
  {
    if (v4) {
      *uint64_t v4 = *a2;
    }
    *(void *)(result + 8) = v4 + 1;
    return result;
  }
  uint64_t v6 = ((uint64_t)v4 - *(void *)result) >> 3;
  unint64_t v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) >> 61) {
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = v5 - *(void *)result;
  if (v8 >> 2 > v7) {
    unint64_t v7 = v8 >> 2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v7 = 0x1FFFFFFFFFFFFFFFLL;
  }
  if (v7)
  {
    uint64_t v9 = 8 * v7;
    uint64_t result = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(result + 24) + 16))(*(void *)(result + 24), 8 * v7, 8);
    uint64_t v10 = (void *)(result + 8 * v6);
    unint64_t v7 = result + v9;
    if (result) {
      void *v10 = *a2;
    }
    uint64_t v11 = (uint64_t)(v10 + 1);
    uint64_t v12 = *(void *)v3;
    uint64_t v13 = *(void *)(v3 + 8);
    uint64_t v14 = v13 - *(void *)v3;
    if (v13 != *(void *)v3) {
      goto LABEL_14;
    }
LABEL_21:
    uint64_t v19 = v10;
    goto LABEL_24;
  }
  uint64_t v10 = (void *)(8 * v6);
  uint64_t v11 = 8 * v6 + 8;
  uint64_t v12 = *(void *)result;
  uint64_t v13 = *(void *)(result + 8);
  uint64_t v14 = v13 - *(void *)result;
  if (v13 == *(void *)result) {
    goto LABEL_21;
  }
LABEL_14:
  unint64_t v15 = v14 - 8;
  if (v15 < 0x38 || (unint64_t)(v13 - (void)v10) < 0x20)
  {
    uint64_t v18 = v13;
    uint64_t v19 = v10;
  }
  else
  {
    uint64_t v16 = (v15 >> 3) + 1;
    uint64_t v17 = 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v18 = v13 - v17;
    uint64_t v19 = &v10[v17 / 0xFFFFFFFFFFFFFFF8];
    uint64_t v20 = v10 - 2;
    long long v21 = (long long *)(v13 - 16);
    uint64_t v22 = v16 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v23 = *v21;
      *(v20 - 1) = *(v21 - 1);
      *uint64_t v20 = v23;
      v20 -= 2;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    if (v16 == (v16 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_24;
    }
  }
  do
  {
    uint64_t v24 = *(void *)(v18 - 8);
    v18 -= 8;
    *--uint64_t v19 = v24;
  }
  while (v18 != v12);
LABEL_24:
  *(void *)uint64_t v3 = v19;
  *(void *)(v3 + 8) = v11;
  uint64_t v25 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = v7;
  if (v12) {
    uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 24) + 40))(*(void *)(v3 + 24), v12, v25 - v12);
  }
  *(void *)(v3 + 8) = v11;
  return result;
}

unint64_t GEOPDPlaceContextMetadataReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 52))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOPDPlaceContextMetadataReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = [v8 position];
  *(_DWORD *)(a1 + 52) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOPDPlaceContextMetadataReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOPDPlaceContextMetadataReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOPDPlaceContextMetadataReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
  {
    -[GEOPDSearchPlaceContextMetadata readAll:](*(void *)(a1 + 40), 1);
    -[GEOPDAutocompletePlaceContextMetadata readAll:](*(void *)(a1 + 24), 1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return Specified;
}

void sub_189015010(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDPlaceContextMetadataReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 52);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 48)];
  unint64_t v7 = v6;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  int v13 = ((*(unsigned __int8 *)(a1 + 64) >> 4) & 1)
      + ((*(unsigned __int8 *)(a1 + 64) >> 3) & 1)
      + ((*(unsigned __int8 *)(a1 + 64) >> 2) & 1);
  while (2)
  {
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    uint64_t v16 = 1;
    switch(a3[v9])
    {
      case -4:
        ++v13;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v15 = v11;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v17 = v13 != 0;
        char v18 = v17 & ~(_BYTE)v12 | v10;
        unsigned __int8 v19 = v17 | v12;
        char v69 = v18;
        char v70 = v19 | v18;
        if ((v19 | v8)) {
          uint64_t v20 = 0;
        }
        else {
          uint64_t v20 = a3;
        }
        long long v21 = (int *)MEMORY[0x1E4F940E8];
        uint64_t v22 = (int *)MEMORY[0x1E4F940C8];
        char v71 = (v20 == 0) | v19;
        BOOL v72 = v19;
        long long v23 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v13;
LABEL_7:
        uint64_t v14 = v10;
LABEL_8:
        uint64_t v15 = v11;
        uint64_t v16 = v12;
LABEL_10:
        ++v9;
        uint64_t v10 = v14;
        uint64_t v11 = v15;
        uint64_t v12 = v16;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v21) >= *(void *)(v3 + *v7) || *(unsigned char *)(v3 + *v22)) {
      goto LABEL_89;
    }
    char v24 = 0;
    unsigned int v25 = 0;
    unint64_t v26 = 0;
    while (1)
    {
      uint64_t v27 = *v21;
      uint64_t v28 = *(void *)(v3 + v27);
      unint64_t v29 = v28 + 1;
      if (v28 == -1 || v29 > *(void *)(v3 + *v7)) {
        break;
      }
      char v30 = *(unsigned char *)(*(void *)(v3 + *v23) + v28);
      *(void *)(v3 + v27) = v29;
      v26 |= (unint64_t)(v30 & 0x7F) << v24;
      if ((v30 & 0x80) == 0) {
        goto LABEL_25;
      }
      v24 += 7;
      BOOL v31 = v25++ >= 9;
      if (v31)
      {
        unint64_t v26 = 0;
        int v32 = *(unsigned __int8 *)(v3 + *v22);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v22) = 1;
LABEL_25:
    int v32 = *(unsigned __int8 *)(v3 + *v22);
    if (*(unsigned char *)(v3 + *v22)) {
      unint64_t v26 = 0;
    }
LABEL_27:
    if (v32 || (v26 & 7) == 4)
    {
LABEL_89:
      int v67 = 1;
      goto LABEL_90;
    }
    unint64_t v34 = v26 >> 3;
    BOOL v35 = v72;
    if ((v71 & 1) == 0)
    {
      uint64_t v36 = v20;
      do
      {
        int v38 = *v36++;
        int v37 = v38;
        BOOL v35 = v38 != 0;
        if (v38) {
          BOOL v39 = v37 == v34;
        }
        else {
          BOOL v39 = 1;
        }
      }
      while (!v39);
    }
    switch((int)v34)
    {
      case 1:
        if ((v8 & 1) == 0) {
          goto LABEL_72;
        }
        char v40 = 0;
        unsigned int v41 = 0;
        uint64_t v42 = 0;
        *(unsigned char *)(a1 + 64) |= 1u;
        while (1)
        {
          uint64_t v43 = *v21;
          uint64_t v44 = *(void *)(v3 + v43);
          unint64_t v45 = v44 + 1;
          if (v44 == -1 || v45 > *(void *)(v3 + *v7)) {
            break;
          }
          char v46 = *(unsigned char *)(*(void *)(v3 + *v23) + v44);
          *(void *)(v3 + v43) = v45;
          v42 |= (unint64_t)(v46 & 0x7F) << v40;
          if ((v46 & 0x80) == 0) {
            goto LABEL_75;
          }
          v40 += 7;
          BOOL v31 = v41++ >= 9;
          if (v31)
          {
            uint64_t v42 = 0;
            goto LABEL_77;
          }
        }
        *(unsigned char *)(v3 + *v22) = 1;
LABEL_75:
        if (*(unsigned char *)(v3 + *v22)) {
          uint64_t v42 = 0;
        }
LABEL_77:
        *(void *)(a1 + 32) = v42;
        goto LABEL_88;
      case 2:
        if ((v8 & 1) == 0) {
          goto LABEL_72;
        }
        char v50 = 0;
        unsigned int v51 = 0;
        uint64_t v52 = 0;
        *(unsigned char *)(a1 + 64) |= 2u;
        while (2)
        {
          uint64_t v53 = *v21;
          uint64_t v54 = *(void *)(v3 + v53);
          unint64_t v55 = v54 + 1;
          if (v54 == -1 || v55 > *(void *)(v3 + *v7))
          {
            *(unsigned char *)(v3 + *v22) = 1;
          }
          else
          {
            char v56 = *(unsigned char *)(*(void *)(v3 + *v23) + v54);
            *(void *)(v3 + v53) = v55;
            v52 |= (unint64_t)(v56 & 0x7F) << v50;
            if (v56 < 0)
            {
              v50 += 7;
              BOOL v31 = v51++ >= 9;
              if (v31)
              {
                LODWORD(v52) = 0;
                goto LABEL_81;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v22)) {
          LODWORD(v52) = 0;
        }
LABEL_81:
        *(_DWORD *)(a1 + 60) = v52;
        goto LABEL_88;
      case 3:
        if (!v35) {
          goto LABEL_72;
        }
        if ((*(unsigned char *)(a1 + 64) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_110;
          }
          char v61 = 8 * *(unsigned char *)(a1 + 64);
          goto LABEL_86;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_110;
        }
        uint64_t v57 = objc_alloc_init(GEOPDSearchPlaceContextMetadata);
        if (!GEOPDSearchPlaceContextMetadataReadAllFrom((uint64_t)v57, (void *)v3, v11 & 1)) {
          goto LABEL_109;
        }
        PBReaderRecallMark();
        uint64_t v58 = 40;
        goto LABEL_71;
      case 4:
        if (!v35) {
          goto LABEL_72;
        }
        if ((*(unsigned char *)(a1 + 64) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_110;
          }
          char v61 = 16 * *(unsigned char *)(a1 + 64);
LABEL_86:
          v9 += v61 >> 7;
LABEL_87:
          uint64_t v22 = (int *)MEMORY[0x1E4F940C8];
          unint64_t v7 = (int *)MEMORY[0x1E4F940E0];
          goto LABEL_88;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_110;
        }
        uint64_t v57 = objc_alloc_init(GEOPDAutocompletePlaceContextMetadata);
        if (GEOPDAutocompletePlaceContextMetadataReadAllFrom((uint64_t)v57, (void *)v3, v11 & 1))
        {
          PBReaderRecallMark();
          uint64_t v58 = 24;
LABEL_71:
          uint64_t v59 = *(void **)(a1 + v58);
          *(void *)(a1 + v58) = v57;

          --v9;
          goto LABEL_87;
        }
LABEL_109:

LABEL_110:
        int v67 = 0;
        uint64_t v68 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__flags;
        uint64_t v22 = (int *)MEMORY[0x1E4F940C8];
LABEL_91:
        if (v69) {
LABEL_92:
        }
          *(unsigned char *)(a1 + v68[212]) |= 4u;
        if (v72 || (v67 & 1) == 0)
        {
          *(unsigned char *)(a1 + v68[212]) |= 0x10u;
          *(unsigned char *)(a1 + v68[212]) |= 8u;
          goto LABEL_103;
        }
        if (v20)
        {
          while (2)
          {
            while (1)
            {
              int v63 = *v20++;
              int v62 = v63;
              if (v63 == 3) {
                break;
              }
              if (v62 == 4)
              {
                char v64 = 8;
                goto LABEL_102;
              }
              if (!v62) {
                goto LABEL_103;
              }
            }
            char v64 = 16;
LABEL_102:
            *(unsigned char *)(a1 + v68[212]) |= v64;
            continue;
          }
        }
LABEL_103:
        if (v67) {
          unint64_t v3 = *(unsigned char *)(v3 + *v22) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v72)
        {
          uint64_t v65 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      default:
        if ((v69 & 1) == 0 || (*(unsigned char *)(a1 + 64) & 4) != 0)
        {
LABEL_72:
          char v60 = PBReaderSkipValueWithTag();
          unint64_t v7 = (int *)MEMORY[0x1E4F940E0];
          uint64_t v22 = (int *)MEMORY[0x1E4F940C8];
          if ((v60 & 1) == 0)
          {
            int v67 = 0;
LABEL_90:
            uint64_t v68 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__flags;
            goto LABEL_91;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v47 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            unint64_t v48 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v47;
          }
          int v49 = PBUnknownFieldAdd();
          uint64_t v22 = (int *)MEMORY[0x1E4F940C8];
          unint64_t v7 = (int *)MEMORY[0x1E4F940E0];
          if (!v49)
          {
            int v67 = 0;
            uint64_t v68 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__flags;
            goto LABEL_92;
          }
        }
LABEL_88:
        if (!(v70 & 1 | (v9 != 0))) {
          goto LABEL_89;
        }
        continue;
    }
  }
}

void sub_189015C80(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189015DF0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189015ED8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189017524(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOResourcesReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 484))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOResourcesReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 488));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 480) = [v8 position];
  *(_DWORD *)(a1 + 484) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOResourcesReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOResourcesReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOResourcesReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOResourcesCallReadAllRecursiveWithoutSynchronized((id *)a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 488));
  return Specified;
}

void sub_1890176C4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOResourcesReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 488));
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 484);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 480)];
  uint64_t v6 = 0;
  char v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  unint64_t v11 = *(void *)(a1 + 496);
  uint64x2_t v12 = (uint64x2_t)vdupq_n_s64(v11);
  v13.i64[0] = 0x100000001;
  v13.i64[1] = 0x100000001;
  uint32x4_t v14 = (uint32x4_t)vdupq_n_s32(v11);
  unsigned int v15 = (BYTE4(v11) & 1)
      + ((v11 >> 1) & 1)
      + vaddvq_s32(vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vshlq_u64(v12, (uint64x2_t)xmmword_18A632360), (int32x4_t)vshlq_u64(v12, (uint64x2_t)xmmword_18A632350)), v13), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_18A632380), v13)))+ vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_18A632340), v13))+ (v11 >> 31)+ vaddvq_s32(vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vshlq_u64(v12, (uint64x2_t)xmmword_18A632310), (int32x4_t)vshlq_u64(v12, (uint64x2_t)xmmword_18A632300)), v13), (int32x4_t)vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vshlq_u64(v12, (uint64x2_t)xmmword_18A632330),
                                      (int32x4_t)vshlq_u64(v12, (uint64x2_t)xmmword_18A632320)),
                         v13)));
  v16.i32[0] = v11 >> 40;
  v16.i32[1] = BYTE3(v11);
  *(int32x2_t *)v12.i8 = vadd_s32(vadd_s32(vadd_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v14.i8, (uint32x2_t)0xFFFFFFEAFFFFFFE7), (int8x8_t)0x100000001), (int32x2_t)vand_s8(v16, (int8x8_t)0x100000001)), vadd_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v14.i8, (uint32x2_t)0xFFFFFFFCFFFFFFF9), (int8x8_t)0x100000001), (int32x2_t)vand_s8((int8x8_t)vmovn_s64((int64x2_t)vshlq_u64(v12,
                                                                                 (uint64x2_t)xmmword_18A632390)),
                                                (int8x8_t)0x100000001)),
                                 vadd_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v14.i8, (uint32x2_t)0xFFFFFFF0FFFFFFF7), (int8x8_t)0x100000001), (int32x2_t)vand_s8((int8x8_t)vmovn_s64((int64x2_t)vshlq_u64(v12, (uint64x2_t)xmmword_18A6323A0)), (int8x8_t)0x100000001)))), vadd_s32(vadd_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v14.i8, (uint32x2_t)0xFFFFFFF3FFFFFFEELL), (int8x8_t)0x100000001), (int32x2_t)vand_s8(
                                                (int8x8_t)vmovn_s64((int64x2_t)vshlq_u64(v12, (uint64x2_t)xmmword_18A6323B0)), (int8x8_t)0x100000001)), vadd_s32((int32x2_t)vand_s8((int8x8_t)vmovn_s64((int64x2_t)vshlq_u64(v12, (uint64x2_t)xmmword_18A6323C0)), (int8x8_t)0x100000001), (int32x2_t)vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v14.i8, (uint32x2_t)0xFFFFFFE3FFFFFFEBLL), (int8x8_t)0x100000001))), vadd_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v14.i8,
                                                            (uint32x2_t)0xFFFFFFF8FFFFFFF4),
                                                (int8x8_t)0x100000001),
                                   vadd_s32((int32x2_t)vand_s8((int8x8_t)__PAIR64__(v11 >> 30, HIWORD(v11)), (int8x8_t)0x100000001), (int32x2_t)vand_s8((int8x8_t)__PAIR64__(v11 >> 20, v11 >> 50), (int8x8_t)0x100000001))), (int32x2_t)vand_s8((int8x8_t)vmovn_s64((int64x2_t)vshlq_u64(v12, (uint64x2_t)xmmword_18A6323D0)), (int8x8_t)0x100000001)))), vadd_s32((int32x2_t)__PAIR64__((v11 & 0x200000000000000) != 0, vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_18A632370), v13))),
                             (int32x2_t)vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v14.i8, (uint32x2_t)0xFFFFFFFDFFFFFFE9), (int8x8_t)0x100000001)));
  unsigned int v17 = vadd_s32(*(int32x2_t *)v12.i8, vdup_lane_s32(*(int32x2_t *)v12.i8, 1)).u32[0] + v15;
  while (2)
  {
    uint64_t v18 = 1;
    uint64_t v19 = 1;
    uint64_t v20 = 1;
    switch(a3[v6])
    {
      case -4:
        ++v17;
        goto LABEL_8;
      case -3:
        char v7 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v19 = v9;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v21 = v17 > 0x2C;
        char v63 = v21 & ~(_BYTE)v10 | v8;
        char v64 = v21 | v10 | v63;
        if (((v21 | v10) | v7)) {
          uint64_t v22 = 0;
        }
        else {
          uint64_t v22 = a3;
        }
        char v65 = (v22 == 0) | v21 | v10;
        char v66 = v21 | v10;
        long long v23 = (int *)MEMORY[0x1E4F940E8];
        char v24 = (int *)MEMORY[0x1E4F940C8];
        unsigned int v25 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v17;
LABEL_7:
        uint64_t v18 = v8;
LABEL_8:
        uint64_t v19 = v9;
        uint64_t v20 = v10;
LABEL_10:
        ++v6;
        uint64_t v8 = v18;
        uint64_t v9 = v19;
        uint64_t v10 = v20;
        continue;
    }
    break;
  }
  while (2)
  {
    unint64_t v26 = (int *)MEMORY[0x1E4F940E0];
    if (*(void *)(v3 + *v23) >= *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) || *(unsigned char *)(v3 + *v24)) {
      goto LABEL_341;
    }
    char v27 = 0;
    unsigned int v28 = 0;
    unint64_t v29 = 0;
    while (1)
    {
      uint64_t v30 = *v23;
      unint64_t v31 = *(void *)(v3 + v30);
      if (v31 == -1 || v31 >= *(void *)(v3 + *v26)) {
        break;
      }
      char v32 = *(unsigned char *)(*(void *)(v3 + *v25) + v31);
      *(void *)(v3 + v30) = v31 + 1;
      v29 |= (unint64_t)(v32 & 0x7F) << v27;
      if ((v32 & 0x80) == 0) {
        goto LABEL_25;
      }
      v27 += 7;
      BOOL v33 = v28++ >= 9;
      if (v33)
      {
        unint64_t v29 = 0;
        int v34 = *(unsigned __int8 *)(v3 + *v24);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v24) = 1;
LABEL_25:
    int v34 = *(unsigned __int8 *)(v3 + *v24);
    if (*(unsigned char *)(v3 + *v24)) {
      unint64_t v29 = 0;
    }
LABEL_27:
    if (v34 || (v29 & 7) == 4)
    {
LABEL_341:
      int v62 = 1;
      goto LABEL_342;
    }
    unint64_t v36 = v29 >> 3;
    BOOL v37 = v66;
    if ((v65 & 1) == 0)
    {
      int v38 = v22;
      do
      {
        int v40 = *v38++;
        int v39 = v40;
        BOOL v37 = v40 != 0;
        if (v40) {
          BOOL v41 = v39 == v36;
        }
        else {
          BOOL v41 = 1;
        }
      }
      while (!v41);
    }
    switch((int)v36)
    {
      case 1:
        if (!v37 || (*(unsigned char *)(a1 + 502) & 0x10) != 0) {
          goto LABEL_266;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_413;
        }
        uint64_t v42 = objc_alloc_init(GEOTileGroup);
        if (!GEOTileGroupReadAllFrom((uint64_t)v42, (void *)v3, v9 & 1)) {
          goto LABEL_412;
        }
        PBReaderRecallMark();
        -[GEOResources _addNoFlagsTileGroup:](a1, v42);
        goto LABEL_265;
      case 2:
        if (!v37 || (*(unsigned char *)(a1 + 502) & 0x20) != 0) {
          goto LABEL_266;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_413;
        }
        uint64_t v42 = objc_alloc_init(GEOTileSet);
        if (!GEOTileSetReadAllFrom((uint64_t)v42, (void *)v3, v9 & 1)) {
          goto LABEL_412;
        }
        PBReaderRecallMark();
        -[GEOResources _addNoFlagsTileSet:](a1, v42);
        goto LABEL_265;
      case 3:
        if (!v37 || (*(unsigned char *)(a1 + 502) & 2) != 0) {
          goto LABEL_266;
        }
        PBReaderReadString();
        uint64_t v42 = (GEOTileGroup *)objc_claimAutoreleasedReturnValue();
        if (v42) {
          -[GEOResources _addNoFlagsStyleSheet:](a1, v42);
        }
        goto LABEL_265;
      case 4:
        if (!v37 || (*(unsigned char *)(a1 + 502) & 8) != 0) {
          goto LABEL_266;
        }
        PBReaderReadString();
        uint64_t v42 = (GEOTileGroup *)objc_claimAutoreleasedReturnValue();
        if (v42) {
          -[GEOResources _addNoFlagsTexture:](a1, v42);
        }
        goto LABEL_265;
      case 5:
        if (!v37 || (*(unsigned char *)(a1 + 498) & 0x80) != 0) {
          goto LABEL_266;
        }
        PBReaderReadString();
        uint64_t v42 = (GEOTileGroup *)objc_claimAutoreleasedReturnValue();
        if (v42) {
          -[GEOResources _addNoFlagsFont:](a1, v42);
        }
        goto LABEL_265;
      case 6:
        if (!v37 || (*(unsigned char *)(a1 + 499) & 2) != 0) {
          goto LABEL_266;
        }
        PBReaderReadString();
        uint64_t v42 = (GEOTileGroup *)objc_claimAutoreleasedReturnValue();
        if (v42) {
          -[GEOResources _addNoFlagsIcon:](a1, v42);
        }
        goto LABEL_265;
      case 8:
        if (!v37 || (*(unsigned char *)(a1 + 501) & 1) != 0) {
          goto LABEL_266;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_413;
        }
        uint64_t v42 = objc_alloc_init(GEORegionalResource);
        if (!GEORegionalResourceReadAllFrom((uint64_t)v42, (void *)v3, v9 & 1)) {
          goto LABEL_412;
        }
        PBReaderRecallMark();
        -[GEOResources _addNoFlagsRegionalResource:](a1, v42);
        goto LABEL_265;
      case 9:
        if (!v37 || (*(unsigned char *)(a1 + 503) & 4) != 0) {
          goto LABEL_266;
        }
        PBReaderReadString();
        uint64_t v42 = (GEOTileGroup *)objc_claimAutoreleasedReturnValue();
        if (v42) {
          -[GEOResources _addNoFlagsXml:](a1, v42);
        }
        goto LABEL_265;
      case 11:
        if (!v37 || (*(unsigned char *)(a1 + 496) & 0x80) != 0) {
          goto LABEL_266;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_413;
        }
        uint64_t v42 = objc_alloc_init(GEOAttribution);
        if (!GEOAttributionReadAllFrom((uint64_t)v42, (void *)v3, v9 & 1)) {
          goto LABEL_412;
        }
        PBReaderRecallMark();
        -[GEOResources _addNoFlagsAttribution:](a1, v42);
        goto LABEL_265;
      case 30:
        if (!v37) {
          goto LABEL_266;
        }
        if ((*(unsigned char *)(a1 + 497) & 2) == 0)
        {
          uint64_t v46 = PBReaderReadString();
          uint64_t v47 = 80;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_413;
        }
        uint64_t v57 = *(void *)(a1 + 496) << 54;
        goto LABEL_338;
      case 31:
        if (!v37) {
          goto LABEL_266;
        }
        if ((*(unsigned char *)(a1 + 501) & 4) == 0)
        {
          uint64_t v46 = PBReaderReadString();
          uint64_t v47 = 344;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_413;
        }
        uint64_t v57 = *(void *)(a1 + 496) << 21;
        goto LABEL_338;
      case 33:
        if (!v37) {
          goto LABEL_266;
        }
        if ((*(unsigned char *)(a1 + 501) & 0x20) == 0)
        {
          uint64_t v46 = PBReaderReadString();
          uint64_t v47 = 368;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_413;
        }
        uint64_t v57 = *(void *)(a1 + 496) << 18;
        goto LABEL_338;
      case 37:
        if (!v37) {
          goto LABEL_266;
        }
        if ((*(unsigned char *)(a1 + 498) & 4) == 0)
        {
          uint64_t v46 = PBReaderReadString();
          uint64_t v47 = 152;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_413;
        }
        uint64_t v57 = *(void *)(a1 + 496) << 45;
        goto LABEL_338;
      case 38:
        if (!v37) {
          goto LABEL_266;
        }
        if ((*(unsigned char *)(a1 + 498) & 0x20) == 0)
        {
          uint64_t v46 = PBReaderReadString();
          uint64_t v47 = 176;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_413;
        }
        uint64_t v57 = *(void *)(a1 + 496) << 42;
        goto LABEL_338;
      case 40:
        if (!v37) {
          goto LABEL_266;
        }
        if ((*(unsigned char *)(a1 + 501) & 2) == 0)
        {
          uint64_t v46 = PBReaderReadString();
          uint64_t v47 = 336;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_413;
        }
        uint64_t v57 = *(void *)(a1 + 496) << 22;
        goto LABEL_338;
      case 41:
        if (!v37) {
          goto LABEL_266;
        }
        if ((*(unsigned char *)(a1 + 497) & 0x10) == 0)
        {
          uint64_t v46 = PBReaderReadString();
          uint64_t v47 = 104;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_413;
        }
        uint64_t v57 = *(void *)(a1 + 496) << 51;
        goto LABEL_338;
      case 43:
        if (!v37) {
          goto LABEL_266;
        }
        if ((*(unsigned char *)(a1 + 501) & 0x40) == 0)
        {
          uint64_t v46 = PBReaderReadString();
          uint64_t v47 = 376;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_413;
        }
        uint64_t v57 = *(void *)(a1 + 496) << 17;
        goto LABEL_338;
      case 44:
        if (!v37 || (*(unsigned char *)(a1 + 502) & 1) != 0) {
          goto LABEL_266;
        }
        PBReaderReadString();
        uint64_t v42 = (GEOTileGroup *)objc_claimAutoreleasedReturnValue();
        if (v42) {
          -[GEOResources _addNoFlagsStyleSheetChecksum:](a1, v42);
        }
        goto LABEL_265;
      case 45:
        if (!v37 || (*(unsigned char *)(a1 + 502) & 4) != 0) {
          goto LABEL_266;
        }
        PBReaderReadString();
        uint64_t v42 = (GEOTileGroup *)objc_claimAutoreleasedReturnValue();
        if (v42) {
          -[GEOResources _addNoFlagsTextureChecksum:](a1, v42);
        }
        goto LABEL_265;
      case 46:
        if (!v37 || (*(unsigned char *)(a1 + 498) & 0x40) != 0) {
          goto LABEL_266;
        }
        PBReaderReadString();
        uint64_t v42 = (GEOTileGroup *)objc_claimAutoreleasedReturnValue();
        if (v42) {
          -[GEOResources _addNoFlagsFontChecksum:](a1, v42);
        }
        goto LABEL_265;
      case 47:
        if (!v37 || (*(unsigned char *)(a1 + 499) & 1) != 0) {
          goto LABEL_266;
        }
        PBReaderReadString();
        uint64_t v42 = (GEOTileGroup *)objc_claimAutoreleasedReturnValue();
        if (v42) {
          -[GEOResources _addNoFlagsIconChecksum:](a1, v42);
        }
        goto LABEL_265;
      case 48:
        if (!v37 || (*(unsigned char *)(a1 + 503) & 2) != 0) {
          goto LABEL_266;
        }
        PBReaderReadString();
        uint64_t v42 = (GEOTileGroup *)objc_claimAutoreleasedReturnValue();
        if (v42) {
          -[GEOResources _addNoFlagsXmlChecksum:](a1, v42);
        }
        goto LABEL_265;
      case 49:
        if (!v37) {
          goto LABEL_266;
        }
        if ((*(unsigned char *)(a1 + 496) & 8) == 0)
        {
          uint64_t v46 = PBReaderReadString();
          uint64_t v47 = 32;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_413;
        }
        uint64_t v57 = *(void *)(a1 + 496) << 60;
        goto LABEL_338;
      case 50:
        if (!v37) {
          goto LABEL_266;
        }
        if ((*(unsigned char *)(a1 + 496) & 0x10) == 0)
        {
          uint64_t v46 = PBReaderReadString();
          uint64_t v47 = 40;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_413;
        }
        uint64_t v57 = *(void *)(a1 + 496) << 59;
        goto LABEL_338;
      case 51:
        if (!v37) {
          goto LABEL_266;
        }
        if ((*(unsigned char *)(a1 + 500) & 2) == 0)
        {
          uint64_t v46 = PBReaderReadString();
          uint64_t v47 = 272;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_413;
        }
        uint64_t v57 = *(void *)(a1 + 496) << 30;
        goto LABEL_338;
      case 52:
        if (!v37) {
          goto LABEL_266;
        }
        if ((*(unsigned char *)(a1 + 500) & 0x40) == 0)
        {
          uint64_t v46 = PBReaderReadString();
          uint64_t v47 = 312;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_413;
        }
        uint64_t v57 = *(void *)(a1 + 496) << 25;
        goto LABEL_338;
      case 53:
        if (!v37) {
          goto LABEL_266;
        }
        if ((*(unsigned char *)(a1 + 500) & 0x20) == 0)
        {
          uint64_t v46 = PBReaderReadString();
          uint64_t v47 = 304;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_413;
        }
        uint64_t v57 = *(void *)(a1 + 496) << 26;
        goto LABEL_338;
      case 54:
        if (!v37) {
          goto LABEL_266;
        }
        if ((*(unsigned char *)(a1 + 501) & 0x10) == 0)
        {
          uint64_t v46 = PBReaderReadString();
          uint64_t v47 = 360;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_413;
        }
        uint64_t v57 = *(void *)(a1 + 496) << 19;
        goto LABEL_338;
      case 55:
        if (!v37) {
          goto LABEL_266;
        }
        if ((*(unsigned char *)(a1 + 500) & 8) == 0)
        {
          uint64_t v46 = PBReaderReadString();
          uint64_t v47 = 288;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_413;
        }
        uint64_t v57 = *(void *)(a1 + 496) << 28;
        goto LABEL_338;
      case 61:
        if (!v37) {
          goto LABEL_266;
        }
        if ((*(unsigned char *)(a1 + 496) & 0x40) == 0)
        {
          uint64_t v46 = PBReaderReadString();
          uint64_t v47 = 56;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_413;
        }
        uint64_t v57 = *(void *)(a1 + 496) << 57;
        goto LABEL_338;
      case 62:
        if (!v37 || (*(unsigned char *)(a1 + 496) & 0x20) != 0) {
          goto LABEL_266;
        }
        PBReaderReadString();
        uint64_t v42 = (GEOTileGroup *)objc_claimAutoreleasedReturnValue();
        if (v42) {
          -[GEOResources _addNoFlagsAnnouncementsSupportedLanguages:](a1, v42);
        }
        goto LABEL_265;
      case 64:
        if (!v37) {
          goto LABEL_266;
        }
        if ((*(unsigned char *)(a1 + 498) & 8) == 0)
        {
          uint64_t v46 = PBReaderReadString();
          uint64_t v47 = 160;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_413;
        }
        uint64_t v57 = *(void *)(a1 + 496) << 44;
        goto LABEL_338;
      case 65:
        if (!v37) {
          goto LABEL_266;
        }
        if ((*(unsigned char *)(a1 + 500) & 0x10) == 0)
        {
          uint64_t v46 = PBReaderReadString();
          uint64_t v47 = 296;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_413;
        }
        uint64_t v57 = *(void *)(a1 + 496) << 27;
        goto LABEL_338;
      case 66:
        if (!v37) {
          goto LABEL_266;
        }
        if ((*(unsigned char *)(a1 + 502) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_413;
          }
          uint64_t v57 = *(void *)(a1 + 496) << 8;
LABEL_338:
          v6 += v57 >> 63;
          goto LABEL_339;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_413;
        }
        uint64_t v42 = objc_alloc_init(GEOVersionManifest);
        if (GEOVersionManifestReadAllFrom(v42, (void *)v3))
        {
          PBReaderRecallMark();
          unint64_t v48 = *(void **)(a1 + 448);
          *(void *)(a1 + 448) = v42;
LABEL_244:

          --v6;
LABEL_339:
          char v24 = (int *)MEMORY[0x1E4F940C8];
LABEL_340:
          unsigned int v25 = (int *)MEMORY[0x1E4F940B8];
          if (!(v64 & 1 | (v6 != 0))) {
            goto LABEL_341;
          }
          continue;
        }
LABEL_412:

LABEL_413:
        int v62 = 0;
        char v24 = (int *)MEMORY[0x1E4F940C8];
LABEL_342:
        if (v63) {
LABEL_343:
        }
          *(void *)(a1 + 496) |= 2uLL;
        if (v66 & 1 | ((v62 & 1) == 0))
        {
          *(void *)(a1 + 496) |= 0x7FFFFFFFFFFFFFCuLL;
        }
        else if (v22)
        {
          while (1)
          {
            int v59 = *v22++;
            uint64_t v58 = 0x10000000000000;
            switch(v59)
            {
              case 0:
                goto LABEL_406;
              case 1:
                goto LABEL_404;
              case 2:
                uint64_t v58 = 0x20000000000000;
                goto LABEL_404;
              case 3:
                uint64_t v58 = 0x2000000000000;
                goto LABEL_404;
              case 4:
                uint64_t v58 = 0x8000000000000;
                goto LABEL_404;
              case 5:
                uint64_t v58 = 0x800000;
                goto LABEL_404;
              case 6:
                uint64_t v58 = 0x2000000;
                goto LABEL_404;
              case 8:
                uint64_t v58 = 0x10000000000;
                goto LABEL_404;
              case 9:
                uint64_t v58 = 0x400000000000000;
                goto LABEL_404;
              case 11:
                uint64_t v58 = 128;
                goto LABEL_404;
              case 30:
                uint64_t v58 = 512;
                goto LABEL_404;
              case 31:
                uint64_t v58 = 0x40000000000;
                goto LABEL_404;
              case 33:
                uint64_t v58 = 0x200000000000;
                goto LABEL_404;
              case 37:
                uint64_t v58 = 0x40000;
                goto LABEL_404;
              case 38:
                uint64_t v58 = 0x200000;
                goto LABEL_404;
              case 40:
                uint64_t v58 = 0x20000000000;
                goto LABEL_404;
              case 41:
                uint64_t v58 = 4096;
                goto LABEL_404;
              case 43:
                uint64_t v58 = 0x400000000000;
                goto LABEL_404;
              case 44:
                uint64_t v58 = 0x1000000000000;
                goto LABEL_404;
              case 45:
                uint64_t v58 = 0x4000000000000;
                goto LABEL_404;
              case 46:
                uint64_t v58 = 0x400000;
                goto LABEL_404;
              case 47:
                uint64_t v58 = 0x1000000;
                goto LABEL_404;
              case 48:
                uint64_t v58 = 0x200000000000000;
                goto LABEL_404;
              case 49:
                uint64_t v58 = 8;
                goto LABEL_404;
              case 50:
                uint64_t v58 = 16;
                goto LABEL_404;
              case 51:
                uint64_t v58 = 0x200000000;
                goto LABEL_404;
              case 52:
                uint64_t v58 = 0x4000000000;
                goto LABEL_404;
              case 53:
                uint64_t v58 = 0x2000000000;
                goto LABEL_404;
              case 54:
                uint64_t v58 = 0x100000000000;
                goto LABEL_404;
              case 55:
                uint64_t v58 = 0x800000000;
                goto LABEL_404;
              case 61:
                uint64_t v58 = 64;
                goto LABEL_404;
              case 62:
                uint64_t v58 = 32;
                goto LABEL_404;
              case 64:
                uint64_t v58 = 0x80000;
                goto LABEL_404;
              case 65:
                uint64_t v58 = 0x1000000000;
                goto LABEL_404;
              case 66:
                uint64_t v58 = 0x80000000000000;
                goto LABEL_404;
              case 67:
                uint64_t v58 = 4;
                goto LABEL_404;
              case 68:
                uint64_t v58 = 0x8000;
                goto LABEL_404;
              case 69:
                uint64_t v58 = 0x8000000;
                goto LABEL_404;
              case 70:
                uint64_t v58 = 0x4000000;
                goto LABEL_404;
              case 72:
                uint64_t v58 = 0x80000000000;
                goto LABEL_404;
              case 73:
                uint64_t v58 = 0x800000000000;
                goto LABEL_404;
              case 74:
                uint64_t v58 = 0x20000;
                goto LABEL_404;
              case 75:
                uint64_t v58 = 0x10000;
                goto LABEL_404;
              case 77:
                uint64_t v58 = 0x8000000000;
                goto LABEL_404;
              case 78:
                uint64_t v58 = 0x2000;
                goto LABEL_404;
              case 79:
                uint64_t v58 = 0x400000000;
                goto LABEL_404;
              case 80:
                uint64_t v58 = 0x10000000;
                goto LABEL_404;
              case 81:
                uint64_t v58 = 1024;
                goto LABEL_404;
              case 82:
                uint64_t v58 = 0x4000;
                goto LABEL_404;
              case 83:
                uint64_t v58 = 2048;
                goto LABEL_404;
              case 85:
                uint64_t v58 = 0x100000000000000;
                goto LABEL_404;
              case 88:
                uint64_t v58 = 0x20000000;
                goto LABEL_404;
              case 89:
                uint64_t v58 = 0x80000000;
                goto LABEL_404;
              case 91:
                uint64_t v58 = 256;
                goto LABEL_404;
              case 92:
                uint64_t v58 = 0x40000000000000;
                goto LABEL_404;
              case 93:
                uint64_t v58 = 0x40000000;
                goto LABEL_404;
              case 94:
                uint64_t v58 = 0x100000;
                goto LABEL_404;
              case 95:
                uint64_t v58 = 0x100000000;
LABEL_404:
                *(void *)(a1 + 496) |= v58;
                break;
              default:
                continue;
            }
          }
        }
LABEL_406:
        if (v62) {
          unint64_t v3 = *(unsigned char *)(v3 + *v24) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v66)
        {
          char v60 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      case 67:
        if (!v37) {
          goto LABEL_266;
        }
        if ((*(unsigned char *)(a1 + 496) & 4) == 0)
        {
          uint64_t v46 = PBReaderReadString();
          uint64_t v47 = 24;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_413;
        }
        uint64_t v57 = *(void *)(a1 + 496) << 61;
        goto LABEL_338;
      case 68:
        if (!v37) {
          goto LABEL_266;
        }
        if ((*(unsigned char *)(a1 + 497) & 0x80) == 0)
        {
          uint64_t v46 = PBReaderReadString();
          uint64_t v47 = 128;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_413;
        }
        uint64_t v57 = *(void *)(a1 + 496) << 48;
        goto LABEL_338;
      case 69:
        if (!v37) {
          goto LABEL_266;
        }
        if ((*(unsigned char *)(a1 + 499) & 8) == 0)
        {
          uint64_t v46 = PBReaderReadString();
          uint64_t v47 = 224;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_413;
        }
        uint64_t v57 = *(void *)(a1 + 496) << 36;
        goto LABEL_338;
      case 70:
        if (!v37 || (*(unsigned char *)(a1 + 499) & 4) != 0) {
          goto LABEL_266;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_413;
        }
        uint64_t v42 = objc_alloc_init(GEOMapRegion);
        if (!GEOMapRegionReadAllFrom((uint64_t)v42, (void *)v3)) {
          goto LABEL_412;
        }
        PBReaderRecallMark();
        -[GEOResources _addNoFlagsLocationShiftEnabledRegion:](a1, v42);
        goto LABEL_265;
      case 71:
        if ((v7 & 1) == 0) {
          goto LABEL_266;
        }
        char v49 = 0;
        unsigned int v50 = 0;
        uint64_t v51 = 0;
        *(void *)(a1 + 496) |= 1uLL;
        uint64_t v52 = (int *)MEMORY[0x1E4F940E0];
        while (2)
        {
          uint64_t v53 = *v23;
          unint64_t v54 = *(void *)(v3 + v53);
          if (v54 == -1 || v54 >= *(void *)(v3 + *v52))
          {
            *(unsigned char *)(v3 + *v24) = 1;
          }
          else
          {
            char v55 = *(unsigned char *)(*(void *)(v3 + *v25) + v54);
            *(void *)(v3 + v53) = v54 + 1;
            v51 |= (unint64_t)(v55 & 0x7F) << v49;
            if (v55 < 0)
            {
              v49 += 7;
              BOOL v33 = v50++ >= 9;
              if (v33)
              {
                LODWORD(v51) = 0;
                goto LABEL_271;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v24)) {
          LODWORD(v51) = 0;
        }
LABEL_271:
        *(_DWORD *)(a1 + 492) = v51;
        goto LABEL_340;
      case 72:
        if (!v37 || (*(unsigned char *)(a1 + 501) & 8) != 0) {
          goto LABEL_266;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_413;
        }
        uint64_t v42 = objc_alloc_init(GEOResource);
        if (!GEOResourceReadAllFrom((uint64_t)v42, (void *)v3, v9 & 1)) {
          goto LABEL_412;
        }
        PBReaderRecallMark();
        -[GEOResources _addNoFlagsResource:](a1, v42);
        goto LABEL_265;
      case 73:
        if (!v37) {
          goto LABEL_266;
        }
        if ((*(unsigned char *)(a1 + 501) & 0x80) == 0)
        {
          uint64_t v46 = PBReaderReadString();
          uint64_t v47 = 384;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_413;
        }
        uint64_t v57 = *(void *)(a1 + 496) << 16;
        goto LABEL_338;
      case 74:
        if (!v37 || (*(unsigned char *)(a1 + 498) & 2) != 0) {
          goto LABEL_266;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_413;
        }
        uint64_t v42 = objc_alloc_init(GEODataSetDescription);
        if (!GEODataSetDescriptionReadAllFrom((uint64_t)v42, (void *)v3)) {
          goto LABEL_412;
        }
        PBReaderRecallMark();
        -[GEOResources _addNoFlagsDataSet:](a1, v42);
        goto LABEL_265;
      case 75:
        if (!v37 || (*(unsigned char *)(a1 + 498) & 1) != 0) {
          goto LABEL_266;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_413;
        }
        uint64_t v42 = objc_alloc_init(GEODataSetURLOverride);
        if (!GEODataSetURLOverrideReadAllFrom((uint64_t)v42, (void *)v3, v9 & 1)) {
          goto LABEL_412;
        }
        PBReaderRecallMark();
        -[GEOResources _addNoFlagsDataSetURLOverride:](a1, v42);
        goto LABEL_265;
      case 77:
        if (!v37) {
          goto LABEL_266;
        }
        if ((*(unsigned char *)(a1 + 500) & 0x80) == 0)
        {
          uint64_t v46 = PBReaderReadString();
          uint64_t v47 = 320;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_413;
        }
        uint64_t v57 = *(void *)(a1 + 496) << 24;
        goto LABEL_338;
      case 78:
        if (!v37) {
          goto LABEL_266;
        }
        if ((*(unsigned char *)(a1 + 497) & 0x20) == 0)
        {
          uint64_t v46 = PBReaderReadString();
          uint64_t v47 = 112;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_413;
        }
        uint64_t v57 = *(void *)(a1 + 496) << 50;
        goto LABEL_338;
      case 79:
        if (!v37) {
          goto LABEL_266;
        }
        if ((*(unsigned char *)(a1 + 500) & 4) == 0)
        {
          uint64_t v46 = PBReaderReadString();
          uint64_t v47 = 280;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_413;
        }
        uint64_t v57 = *(void *)(a1 + 496) << 29;
        goto LABEL_338;
      case 80:
        if (!v37) {
          goto LABEL_266;
        }
        if ((*(unsigned char *)(a1 + 499) & 0x10) == 0)
        {
          uint64_t v46 = PBReaderReadString();
          uint64_t v47 = 232;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_413;
        }
        uint64_t v57 = *(void *)(a1 + 496) << 35;
        goto LABEL_338;
      case 81:
        if (!v37) {
          goto LABEL_266;
        }
        if ((*(unsigned char *)(a1 + 497) & 4) == 0)
        {
          uint64_t v46 = PBReaderReadString();
          uint64_t v47 = 88;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_413;
        }
        uint64_t v57 = *(void *)(a1 + 496) << 53;
        goto LABEL_338;
      case 82:
        if (!v37) {
          goto LABEL_266;
        }
        if ((*(unsigned char *)(a1 + 497) & 0x40) == 0)
        {
          uint64_t v46 = PBReaderReadString();
          uint64_t v47 = 120;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_413;
        }
        uint64_t v57 = *(void *)(a1 + 496) << 49;
        goto LABEL_338;
      case 83:
        if (!v37) {
          goto LABEL_266;
        }
        if ((*(unsigned char *)(a1 + 497) & 8) == 0)
        {
          uint64_t v46 = PBReaderReadString();
          uint64_t v47 = 96;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_413;
        }
        uint64_t v57 = *(void *)(a1 + 496) << 52;
        goto LABEL_338;
      case 85:
        if (!v37) {
          goto LABEL_266;
        }
        if ((*(unsigned char *)(a1 + 503) & 1) == 0)
        {
          uint64_t v46 = PBReaderReadString();
          uint64_t v47 = 456;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_413;
        }
        uint64_t v57 = *(void *)(a1 + 496) << 7;
        goto LABEL_338;
      case 88:
        if (!v37) {
          goto LABEL_266;
        }
        if ((*(unsigned char *)(a1 + 499) & 0x20) == 0)
        {
          uint64_t v46 = PBReaderReadString();
          uint64_t v47 = 240;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_413;
        }
        uint64_t v57 = *(void *)(a1 + 496) << 34;
        goto LABEL_338;
      case 89:
        if (!v37 || (*(unsigned char *)(a1 + 499) & 0x80) != 0) {
          goto LABEL_266;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_413;
        }
        uint64_t v42 = objc_alloc_init(GEOMuninVersion);
        if (!GEOMuninVersionReadAllFrom((uint64_t)v42, (void *)v3)) {
          goto LABEL_412;
        }
        PBReaderRecallMark();
        -[GEOResources _addNoFlagsMuninVersion:](a1, v42);
        goto LABEL_265;
      case 91:
        if (!v37) {
          goto LABEL_266;
        }
        if ((*(unsigned char *)(a1 + 497) & 1) == 0)
        {
          uint64_t v46 = PBReaderReadString();
          uint64_t v47 = 72;
LABEL_243:
          unint64_t v48 = *(void **)(a1 + v47);
          *(void *)(a1 + v47) = v46;
          goto LABEL_244;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_413;
        }
        uint64_t v57 = *(void *)(a1 + 496) << 55;
        goto LABEL_338;
      case 92:
        if (!v37 || (*(unsigned char *)(a1 + 502) & 0x40) != 0) {
          goto LABEL_266;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_413;
        }
        uint64_t v42 = objc_alloc_init(GEOURLInfoSet);
        if (!GEOURLInfoSetReadAllFrom((uint64_t)v42, (void *)v3, v9 & 1)) {
          goto LABEL_412;
        }
        PBReaderRecallMark();
        -[GEOResources _addNoFlagsUrlInfoSet:](a1, v42);
        goto LABEL_265;
      case 93:
        if (!v37 || (*(unsigned char *)(a1 + 499) & 0x40) != 0) {
          goto LABEL_266;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_413;
        }
        uint64_t v42 = objc_alloc_init(GEOMuninBucket);
        if (!GEOMuninBucketReadAllFrom((uint64_t)v42, (void *)v3)) {
          goto LABEL_412;
        }
        PBReaderRecallMark();
        -[GEOResources _addNoFlagsMuninBucket:](a1, v42);
        goto LABEL_265;
      case 94:
        if (!v37 || (*(unsigned char *)(a1 + 498) & 0x10) != 0) {
          goto LABEL_266;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_413;
        }
        uint64_t v42 = objc_alloc_init(GEODisplayString);
        if (!GEODisplayStringReadAllFrom(v42, (void *)v3, v9 & 1)) {
          goto LABEL_412;
        }
        PBReaderRecallMark();
        -[GEOResources _addNoFlagsDisplayStrings:](a1, v42);
        goto LABEL_265;
      case 95:
        if (!v37 || (*(unsigned char *)(a1 + 500) & 1) != 0) {
          goto LABEL_266;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_413;
        }
        uint64_t v42 = objc_alloc_init(GEOOfflineMetadata);
        if (!GEOOfflineMetadataReadAllFrom((uint64_t)v42, (void *)v3)) {
          goto LABEL_412;
        }
        PBReaderRecallMark();
        -[GEOResources _addNoFlagsOfflineMetadata:](a1, v42);
LABEL_265:

        goto LABEL_339;
      default:
        if ((v63 & 1) == 0 || (*(unsigned char *)(a1 + 496) & 2) != 0)
        {
LABEL_266:
          char v56 = PBReaderSkipValueWithTag();
          char v24 = (int *)MEMORY[0x1E4F940C8];
          if ((v56 & 1) == 0)
          {
            int v62 = 0;
            goto LABEL_342;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v43 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            uint64_t v44 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v43;
          }
          int v45 = PBUnknownFieldAdd();
          char v24 = (int *)MEMORY[0x1E4F940C8];
          if (!v45)
          {
            int v62 = 0;
            goto LABEL_343;
          }
        }
        goto LABEL_340;
    }
  }
}

void sub_1890196B8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1890198E0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1890199A0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189019B00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL GEOSetSHA1OnExtendedAttribute(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  if (![v5 length] || !objc_msgSend(v6, "length")) {
    goto LABEL_6;
  }
  id v7 = v5;
  uint64_t v8 = (const char *)[v7 fileSystemRepresentation];
  id v9 = v6;
  int v10 = setxattr(v8, "com.apple.GeoServices.SHA1", (const void *)[v9 bytes], objc_msgSend(v9, "length"), 0, 0);
  BOOL v11 = v10 == 0;
  if (a3 && v10)
  {
    uint64x2_t v12 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v13 = *MEMORY[0x1E4F28798];
    uint64_t v14 = *__error();
    unsigned int v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:v7 forKey:*MEMORY[0x1E4F28328]];
    *a3 = [v12 errorWithDomain:v13 code:v14 userInfo:v15];

LABEL_6:
    BOOL v11 = 0;
  }

  return v11;
}

BOOL GEORoutingSettingsVirtualGarageSetttingsReadAllFrom(uint64_t a1, void *a2)
{
  unint64_t v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    uint64_t v4 = (int *)MEMORY[0x1E4F940E8];
    id v5 = (int *)MEMORY[0x1E4F940E0];
    id v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      id v7 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v3[*v6]) {
          break;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          if (v9++ >= 9)
          {
            unint64_t v10 = 0;
            int v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v16 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v16 || (v10 & 7) == 4) {
          break;
        }
        if ((v10 >> 3) == 2)
        {
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v20 = 0;
          *(unsigned char *)(a1 + 16) |= 2u;
          while (1)
          {
            uint64_t v29 = *v4;
            uint64_t v30 = *(void *)&v3[v29];
            unint64_t v31 = v30 + 1;
            if (v30 == -1 || v31 > *(void *)&v3[*v5]) {
              break;
            }
            char v32 = *(unsigned char *)(*(void *)&v3[*v7] + v30);
            *(void *)&v3[v29] = v31;
            v20 |= (unint64_t)(v32 & 0x7F) << v27;
            if ((v32 & 0x80) == 0)
            {
              unint64_t v26 = &OBJC_IVAR___GEORoutingSettingsVirtualGarageSetttings__licensePlateCount;
              goto LABEL_40;
            }
            v27 += 7;
            BOOL v25 = v28++ > 8;
            if (v25)
            {
              LODWORD(v20) = 0;
              unint64_t v26 = &OBJC_IVAR___GEORoutingSettingsVirtualGarageSetttings__licensePlateCount;
              goto LABEL_42;
            }
          }
          unint64_t v26 = &OBJC_IVAR___GEORoutingSettingsVirtualGarageSetttings__licensePlateCount;
LABEL_39:
          v3[*v6] = 1;
        }
        else
        {
          if ((v10 >> 3) != 1)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_48;
            }
            continue;
          }
          char v18 = 0;
          unsigned int v19 = 0;
          uint64_t v20 = 0;
          *(unsigned char *)(a1 + 16) |= 1u;
          while (1)
          {
            uint64_t v21 = *v4;
            uint64_t v22 = *(void *)&v3[v21];
            unint64_t v23 = v22 + 1;
            if (v22 == -1 || v23 > *(void *)&v3[*v5])
            {
              unint64_t v26 = &OBJC_IVAR___GEORoutingSettingsVirtualGarageSetttings__electronicVehicleCount;
              goto LABEL_39;
            }
            char v24 = *(unsigned char *)(*(void *)&v3[*v7] + v22);
            *(void *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0) {
              break;
            }
            v18 += 7;
            BOOL v25 = v19++ > 8;
            if (v25)
            {
              LODWORD(v20) = 0;
              unint64_t v26 = &OBJC_IVAR___GEORoutingSettingsVirtualGarageSetttings__electronicVehicleCount;
              goto LABEL_42;
            }
          }
          unint64_t v26 = &OBJC_IVAR___GEORoutingSettingsVirtualGarageSetttings__electronicVehicleCount;
        }
LABEL_40:
        if (v3[*v6]) {
          LODWORD(v20) = 0;
        }
LABEL_42:
        *(_DWORD *)(a1 + *v26) = v20;
      }
      while (*(void *)&v3[*v4] < *(void *)&v3[*v5]);
    }
    BOOL v33 = v3[*v6] == 0;
  }
  else
  {
LABEL_48:
    BOOL v33 = 0;
  }
  objc_sync_exit(v3);

  return v33;
}

void sub_18901B858(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18901B924(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18901B9F0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18901BAF8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18901BBC4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLogMsgEventReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 520));
  id v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 516);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 512)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  unint64_t v11 = *(void *)(a1 + 528);
  uint64x2_t v12 = (uint64x2_t)vdupq_n_s64(v11);
  v13.i64[0] = 0x100000001;
  v13.i64[1] = 0x100000001;
  uint32x4_t v14 = (uint32x4_t)vdupq_n_s32(v11);
  v15.i32[0] = v11 >> 9;
  v15.i32[1] = v11 >> 47;
  int32x2_t v16 = vadd_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v14.i8, (uint32x2_t)0xFFFFFFFDFFFFFFEELL), (int8x8_t)0x100000001), (int32x2_t)vand_s8((int8x8_t)vmovn_s64((int64x2_t)vshlq_u64(v12, (uint64x2_t)xmmword_18A641CB0)), (int8x8_t)0x100000001)), vadd_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v14.i8, (uint32x2_t)0xFFFFFFEDFFFFFFEBLL), (int8x8_t)0x100000001), (int32x2_t)vand_s8(v15, (int8x8_t)0x100000001)));
  *(int32x2_t *)v12.i8 = vadd_s32(vadd_s32(vadd_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v14.i8, (uint32x2_t)0xFFFFFFFBFFFFFFEALL), (int8x8_t)0x100000001), (int32x2_t)vand_s8((int8x8_t)__PAIR64__(v11 >> 42, v11 >> 27), (int8x8_t)0x100000001)), vadd_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)vmovn_s64((int64x2_t)vshlq_u64(v12, (uint64x2_t)xmmword_18A641CC0)), (int8x8_t)0x100000001), (int32x2_t)vand_s8(
                                                (int8x8_t)__PAIR64__(v11 >> 34, v11 >> 11),
                                                (int8x8_t)0x100000001)),
                                 vadd_s32((int32x2_t)vand_s8((int8x8_t)vmovn_s64((int64x2_t)vshlq_u64(v12, (uint64x2_t)xmmword_18A641CD0)), (int8x8_t)0x100000001), (int32x2_t)vand_s8((int8x8_t)__PAIR64__(v11 >> 17, HIBYTE(v11)), (int8x8_t)0x100000001)))), vadd_s32(vadd_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v14.i8, (uint32x2_t)0xFFFFFFF3FFFFFFE3), (int8x8_t)0x100000001), (int32x2_t)vand_s8((int8x8_t)vmovn_s64((int64x2_t)vshlq_u64(v12,
                                                                                 (uint64x2_t)xmmword_18A641CE0)),
                                                (int8x8_t)0x100000001)),
                                 vadd_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v14.i8, (uint32x2_t)0xFFFFFFE9FFFFFFECLL), (int8x8_t)0x100000001), (int32x2_t)vand_s8((int8x8_t)vmovn_s64((int64x2_t)vshlq_u64(v12, (uint64x2_t)xmmword_18A641CF0)), (int8x8_t)0x100000001))), vadd_s32(vadd_s32((int32x2_t)(*(void *)&vshl_u32(*(uint32x2_t *)v14.i8, (uint32x2_t)0xFFFFFFE2FFFFFFE8) & 0xFFFFFF01FFFFFF01), (int32x2_t)vand_s8((int8x8_t)vmovn_s64((int64x2_t)vshlq_u64(v12, (uint64x2_t)xmmword_18A641D00)),
                                                (int8x8_t)0x100000001)),
                                 vadd_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v14.i8, (uint32x2_t)0xFFFFFFF8FFFFFFF0), (int8x8_t)0x100000001), (int32x2_t)vand_s8((int8x8_t)__PAIR64__(v11 >> 25, v11 >> 51), (int8x8_t)0x100000001))))), vadd_s32((int32x2_t)__PAIR64__((v11 >> 4) & 1, vaddvq_s32(vaddq_s32(vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vshlq_u64(v12, (uint64x2_t)xmmword_18A641C50),
                                                                          (int32x4_t)vshlq_u64(v12, (uint64x2_t)xmmword_18A641C40)), v13), (int32x4_t)vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vshlq_u64(v12, (uint64x2_t)xmmword_18A641C70), (int32x4_t)vshlq_u64(v12, (uint64x2_t)xmmword_18A641C60)), v13)), vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_18A641C80), v13), (int32x4_t)vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vshlq_u64(
                                                                                       v12,
                                                                                       (uint64x2_t)xmmword_18A641CA0),
                                                                          (int32x4_t)vshlq_u64(v12, (uint64x2_t)xmmword_18A641C90)), v13))))), (int32x2_t)vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v14.i8, (uint32x2_t)0xFFFFFFFAFFFFFFFELL), (int8x8_t)0x100000001)));
  unsigned int v17 = vadd_s32(*(int32x2_t *)v12.i8, vdup_lane_s32(*(int32x2_t *)v12.i8, 1)).u32[0]
      + vadd_s32(v16, vdup_lane_s32(v16, 1)).u32[0]
      + ((v11 >> 36) & 1)
      + ((v11 >> 10) & 1)
      + ((v11 >> 28) & 1)
      + ((v11 >> 46) & 1)
      + ((v11 >> 26) & 1)
      + (v11 >> 31);
  while (2)
  {
    uint64_t v18 = 1;
    uint64_t v19 = 1;
    switch(a3[v7])
    {
      case -3:
        char v8 = 1;
        goto LABEL_6;
      case -2:
        uint64_t v18 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        unsigned __int8 v20 = v10 | (v17 > 0x2F);
        if ((v20 | v8)) {
          uint64_t v21 = 0;
        }
        else {
          uint64_t v21 = a3;
        }
        BOOL v22 = v20;
        char v64 = (v21 == 0) | v20;
        unint64_t v23 = (int *)MEMORY[0x1E4F940E8];
        char v24 = (int *)MEMORY[0x1E4F940C8];
        BOOL v25 = (int *)MEMORY[0x1E4F940B8];
        BOOL v63 = v20;
        break;
      default:
        ++v17;
LABEL_6:
        uint64_t v18 = v9;
        uint64_t v19 = v10;
LABEL_8:
        ++v7;
        uint64_t v9 = v18;
        uint64_t v10 = v19;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(void *)(v3 + *v23) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v24)) {
      goto LABEL_492;
    }
    char v26 = 0;
    unsigned int v27 = 0;
    unint64_t v28 = 0;
    while (1)
    {
      uint64_t v29 = *v23;
      uint64_t v30 = *(void *)(v3 + v29);
      unint64_t v31 = v30 + 1;
      if (v30 == -1 || v31 > *(void *)(v3 + *v6)) {
        break;
      }
      char v32 = *(unsigned char *)(*(void *)(v3 + *v25) + v30);
      *(void *)(v3 + v29) = v31;
      v28 |= (unint64_t)(v32 & 0x7F) << v26;
      if ((v32 & 0x80) == 0) {
        goto LABEL_23;
      }
      v26 += 7;
      BOOL v33 = v27++ >= 9;
      if (v33)
      {
        unint64_t v28 = 0;
        int v34 = *(unsigned __int8 *)(v3 + *v24);
        goto LABEL_25;
      }
    }
    *(unsigned char *)(v3 + *v24) = 1;
LABEL_23:
    int v34 = *(unsigned __int8 *)(v3 + *v24);
    if (*(unsigned char *)(v3 + *v24)) {
      unint64_t v28 = 0;
    }
LABEL_25:
    if (v34 || (v28 & 7) == 4)
    {
LABEL_492:
      if (v22)
      {
        *(void *)(a1 + 528) |= 0x7FFFFFFFFFFFFFFCuLL;
      }
      else if (v21)
      {
        while (2)
        {
          int v58 = *v21++;
          int v59 = v58 - 101;
          switch(v58)
          {
            case 101:
              uint64_t v60 = 0x1000000000000000;
              goto LABEL_557;
            case 102:
              uint64_t v60 = 0x1000000000000;
              goto LABEL_557;
            case 103:
            case 107:
            case 112:
            case 122:
            case 128:
            case 130:
              continue;
            case 104:
              uint64_t v60 = 0x80000000000000;
              goto LABEL_557;
            case 105:
              uint64_t v60 = 0x2000000000;
              goto LABEL_557;
            case 106:
              uint64_t v60 = 0x100000000;
              goto LABEL_557;
            case 108:
              uint64_t v60 = 2048;
              goto LABEL_557;
            case 109:
              uint64_t v60 = 0x400000000000000;
              goto LABEL_557;
            case 110:
              uint64_t v60 = 0x100000000000000;
              goto LABEL_557;
            case 111:
              uint64_t v60 = 0x200000000000000;
              goto LABEL_557;
            case 113:
              uint64_t v60 = 0x20000000;
              goto LABEL_557;
            case 114:
              uint64_t v60 = 0x100000;
              goto LABEL_557;
            case 115:
              uint64_t v60 = 0x80000000000;
              goto LABEL_557;
            case 116:
              uint64_t v60 = 0x20000000000;
              goto LABEL_557;
            case 117:
              uint64_t v60 = 0x1000000;
              goto LABEL_557;
            case 118:
              uint64_t v60 = 0x200000000000;
              goto LABEL_557;
            case 119:
              uint64_t v60 = 0x100000000000;
              goto LABEL_557;
            case 120:
              uint64_t v60 = 0x4000000000000;
              goto LABEL_557;
            case 121:
              uint64_t v60 = 0x2000000000000;
              goto LABEL_557;
            case 123:
              uint64_t v60 = 0x10000;
              goto LABEL_557;
            case 124:
              uint64_t v60 = 0x8000000000000;
              goto LABEL_557;
            case 125:
              uint64_t v60 = 32;
              goto LABEL_557;
            case 126:
              uint64_t v60 = 0x40000000000;
              goto LABEL_557;
            case 127:
              uint64_t v60 = 16;
              goto LABEL_557;
            case 129:
              uint64_t v60 = 64;
              goto LABEL_557;
            case 131:
              uint64_t v60 = 0x4000000000000000;
              goto LABEL_557;
            case 132:
              uint64_t v60 = 0x400000000;
              goto LABEL_557;
            case 133:
              uint64_t v60 = 0x40000000000000;
              goto LABEL_557;
            case 134:
              uint64_t v60 = 0x20000;
              goto LABEL_557;
            case 135:
              uint64_t v60 = 0x2000;
              goto LABEL_557;
            case 136:
              uint64_t v60 = 0x20000000000000;
              goto LABEL_557;
            case 137:
              uint64_t v60 = 0x800000;
              goto LABEL_557;
            case 138:
              uint64_t v60 = 0x8000000000;
              goto LABEL_557;
            case 139:
              uint64_t v60 = 0x40000000;
              goto LABEL_557;
            case 140:
              uint64_t v60 = 0x800000000000000;
              goto LABEL_557;
            case 141:
              uint64_t v60 = 4096;
              goto LABEL_557;
            case 142:
              uint64_t v60 = 0x4000;
              goto LABEL_557;
            case 143:
              uint64_t v60 = 0x8000;
              goto LABEL_557;
            case 144:
              uint64_t v60 = 128;
              goto LABEL_557;
            case 145:
              uint64_t v60 = 256;
              goto LABEL_557;
            case 146:
              uint64_t v60 = 0x2000000;
              goto LABEL_557;
            case 147:
              uint64_t v60 = 0x40000;
              goto LABEL_557;
            case 148:
              uint64_t v60 = 0x2000000000000000;
              goto LABEL_557;
            case 149:
              uint64_t v60 = 0x200000;
              goto LABEL_557;
            case 150:
              uint64_t v60 = 512;
              goto LABEL_557;
            case 151:
              uint64_t v60 = 0x10000000000;
              goto LABEL_557;
            case 152:
              uint64_t v60 = 0x4000000000;
              goto LABEL_557;
            case 153:
              uint64_t v60 = 0x800000000;
              goto LABEL_557;
            case 154:
              uint64_t v60 = 0x10000000000000;
              goto LABEL_557;
            case 155:
              uint64_t v60 = 8;
              goto LABEL_557;
            case 156:
              uint64_t v60 = 0x200000000;
              goto LABEL_557;
            case 157:
              uint64_t v60 = 0x80000;
              goto LABEL_557;
            case 158:
              uint64_t v60 = 0x800000000000;
              goto LABEL_557;
            case 159:
              uint64_t v60 = 0x1000000000;
              goto LABEL_557;
            case 160:
              uint64_t v60 = 1024;
              goto LABEL_557;
            case 161:
              uint64_t v60 = 0x10000000;
              goto LABEL_557;
            case 162:
              uint64_t v60 = 0x80000000;
              goto LABEL_557;
            case 163:
              uint64_t v60 = 0x400000000000;
              goto LABEL_557;
            case 164:
              uint64_t v60 = 0x4000000;
LABEL_557:
              *(void *)(a1 + 528) |= v60;
              continue;
            default:
              uint64_t v60 = 0x400000;
              switch(v59)
              {
                case 0:
                  goto LABEL_558;
                case 1:
                  goto LABEL_557;
                case 2:
                  uint64_t v60 = 4;
                  goto LABEL_557;
                case 3:
                  uint64_t v60 = 0x8000000;
                  goto LABEL_557;
                default:
                  continue;
              }
              goto LABEL_558;
          }
        }
      }
LABEL_558:
      unint64_t v3 = *(unsigned char *)(v3 + *v24) == 0;
      if (!v22) {
        return v3;
      }
      goto LABEL_559;
    }
    unint64_t v36 = v28 >> 3;
    BOOL v37 = v22;
    if ((v64 & 1) == 0)
    {
      int v38 = v21;
      do
      {
        int v40 = *v38++;
        int v39 = v40;
        BOOL v37 = v40 != 0;
        if (v40) {
          BOOL v41 = v39 == v36;
        }
        else {
          BOOL v41 = 1;
        }
      }
      while (!v41);
    }
    if ((int)v36 > 99)
    {
      switch((int)v36)
      {
        case 100:
          if ((v8 & 1) == 0) {
            goto LABEL_361;
          }
          char v42 = 0;
          unsigned int v43 = 0;
          uint64_t v44 = 0;
          *(void *)(a1 + 528) |= 2uLL;
          while (2)
          {
            uint64_t v45 = *v23;
            uint64_t v46 = *(void *)(v3 + v45);
            unint64_t v47 = v46 + 1;
            if (v46 == -1 || v47 > *(void *)(v3 + *v6))
            {
              *(unsigned char *)(v3 + *v24) = 1;
            }
            else
            {
              char v48 = *(unsigned char *)(*(void *)(v3 + *v25) + v46);
              *(void *)(v3 + v45) = v47;
              v44 |= (unint64_t)(v48 & 0x7F) << v42;
              if (v48 < 0)
              {
                v42 += 7;
                BOOL v33 = v43++ >= 9;
                if (v33)
                {
                  LODWORD(v44) = 0;
                  goto LABEL_366;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(v3 + *v24)) {
            LODWORD(v44) = 0;
          }
LABEL_366:
          *(_DWORD *)(a1 + 524) = v44;
          goto LABEL_488;
        case 101:
          if (!v37) {
            goto LABEL_361;
          }
          if ((*(unsigned char *)(a1 + 535) & 0x10) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_562;
            }
            uint64_t v57 = 8 * *(void *)(a1 + 528);
            goto LABEL_487;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_562;
          }
          unint64_t v54 = objc_alloc_init(GEOLogMsgEventUserAction);
          if (!GEOLogMsgEventUserActionReadAllFrom((uint64_t)v54, (void *)v3, v9 & 1)) {
            goto LABEL_561;
          }
          PBReaderRecallMark();
          uint64_t v55 = 488;
          break;
        case 102:
          if (!v37) {
            goto LABEL_361;
          }
          if (*(unsigned char *)(a1 + 534))
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_562;
            }
            uint64_t v57 = *(void *)(a1 + 528) << 15;
            goto LABEL_487;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_562;
          }
          unint64_t v54 = objc_alloc_init(GEOLogMsgEventStateTiming);
          if (!GEOLogMsgEventStateTimingReadAllFrom((uint64_t)v54, (void *)v3)) {
            goto LABEL_561;
          }
          PBReaderRecallMark();
          uint64_t v55 = 384;
          break;
        case 103:
        case 107:
        case 112:
        case 122:
        case 128:
        case 130:
          goto LABEL_57;
        case 104:
          if (!v37) {
            goto LABEL_361;
          }
          if ((*(unsigned char *)(a1 + 534) & 0x80) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_562;
            }
            uint64_t v57 = *(void *)(a1 + 528) << 8;
            goto LABEL_487;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_562;
          }
          unint64_t v54 = objc_alloc_init(GEOLogMsgEventTileSetState);
          if (!GEOLogMsgEventTileSetStateReadAllFrom((uint64_t)v54, (void *)v3)) {
            goto LABEL_561;
          }
          PBReaderRecallMark();
          uint64_t v55 = 440;
          break;
        case 105:
          if (!v37) {
            goto LABEL_361;
          }
          if ((*(unsigned char *)(a1 + 532) & 0x20) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_562;
            }
            uint64_t v57 = *(void *)(a1 + 528) << 26;
            goto LABEL_487;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_562;
          }
          unint64_t v54 = objc_alloc_init(GEOLogMsgEventPlaceDataCache);
          if (!GEOLogMsgEventPlaceDataCacheReadAllFrom((uint64_t)v54, (void *)v3)) {
            goto LABEL_561;
          }
          PBReaderRecallMark();
          uint64_t v55 = 296;
          break;
        case 106:
          if (!v37) {
            goto LABEL_361;
          }
          if (*(unsigned char *)(a1 + 532))
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_562;
            }
            uint64_t v57 = *(void *)(a1 + 528) << 31;
            goto LABEL_487;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_562;
          }
          unint64_t v54 = objc_alloc_init(GEOLogMsgEventNetwork);
          if (!GEOLogMsgEventNetworkReadAllFrom((uint64_t)v54, (void *)v3, v9 & 1)) {
            goto LABEL_561;
          }
          PBReaderRecallMark();
          uint64_t v55 = 256;
          break;
        case 108:
          if (!v37) {
            goto LABEL_361;
          }
          if ((*(unsigned char *)(a1 + 529) & 8) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_562;
            }
            uint64_t v57 = *(void *)(a1 + 528) << 52;
            goto LABEL_487;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_562;
          }
          unint64_t v54 = objc_alloc_init(GEOLogMsgEventDirections);
          if (!GEOLogMsgEventDirectionsReadAllFrom((uint64_t)v54, (void *)v3, v9 & 1)) {
            goto LABEL_561;
          }
          PBReaderRecallMark();
          uint64_t v55 = 88;
          break;
        case 109:
          if (!v37) {
            goto LABEL_361;
          }
          if ((*(unsigned char *)(a1 + 535) & 4) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_562;
            }
            uint64_t v57 = 32 * *(void *)(a1 + 528);
            goto LABEL_487;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_562;
          }
          unint64_t v54 = objc_alloc_init(GEOLogMsgEventTransitAppLaunch);
          if (!GEOLogMsgEventTransitAppLaunchReadAllFrom((uint64_t)v54, (void *)v3, v9 & 1)) {
            goto LABEL_561;
          }
          PBReaderRecallMark();
          uint64_t v55 = 464;
          break;
        case 110:
          if (!v37) {
            goto LABEL_361;
          }
          if (*(unsigned char *)(a1 + 535))
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_562;
            }
            uint64_t v57 = *(void *)(a1 + 528) << 7;
            goto LABEL_487;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_562;
          }
          unint64_t v54 = objc_alloc_init(GEOLogMsgEventTimeToLeaveHypothesis);
          if (!GEOLogMsgEventTimeToLeaveHypothesisReadAllFrom((uint64_t)v54, (void *)v3)) {
            goto LABEL_561;
          }
          PBReaderRecallMark();
          uint64_t v55 = 448;
          break;
        case 111:
          if (!v37) {
            goto LABEL_361;
          }
          if ((*(unsigned char *)(a1 + 535) & 2) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_562;
            }
            uint64_t v57 = *(void *)(a1 + 528) << 6;
            goto LABEL_487;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_562;
          }
          unint64_t v54 = objc_alloc_init(GEOLogMsgEventTimeToLeaveInitialTravelTime);
          if (!GEOLogMsgEventTimeToLeaveInitialTravelTimeReadAllFrom((uint64_t)v54, (void *)v3)) {
            goto LABEL_561;
          }
          PBReaderRecallMark();
          uint64_t v55 = 456;
          break;
        case 113:
          if (!v37) {
            goto LABEL_361;
          }
          if ((*(unsigned char *)(a1 + 531) & 0x20) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_562;
            }
            uint64_t v57 = *(void *)(a1 + 528) << 34;
            goto LABEL_487;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_562;
          }
          unint64_t v54 = objc_alloc_init(GEOLogMsgEventMapsWidgetsInteractionSession);
          if (!GEOLogMsgEventMapsWidgetsInteractionSessionReadAllFrom((uint64_t)v54, (void *)v3, v9 & 1)) {
            goto LABEL_561;
          }
          PBReaderRecallMark();
          uint64_t v55 = 232;
          break;
        case 114:
          if (!v37) {
            goto LABEL_361;
          }
          if ((*(unsigned char *)(a1 + 530) & 0x10) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_562;
            }
            uint64_t v57 = *(void *)(a1 + 528) << 43;
            goto LABEL_487;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_562;
          }
          unint64_t v54 = objc_alloc_init(GEOLogMsgEventListInteractionSession);
          if (!GEOLogMsgEventListInteractionSessionReadAllFrom((uint64_t)v54, (void *)v3, v9 & 1)) {
            goto LABEL_561;
          }
          PBReaderRecallMark();
          uint64_t v55 = 160;
          break;
        case 115:
          if (!v37) {
            goto LABEL_361;
          }
          if ((*(unsigned char *)(a1 + 533) & 8) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_562;
            }
            uint64_t v57 = *(void *)(a1 + 528) << 20;
            goto LABEL_487;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_562;
          }
          unint64_t v54 = objc_alloc_init(GEOLogMsgEventRefineSearchSession);
          if (!GEOLogMsgEventRefineSearchSessionReadAllFrom((uint64_t)v54, (void *)v3, v9 & 1)) {
            goto LABEL_561;
          }
          PBReaderRecallMark();
          uint64_t v55 = 344;
          break;
        case 116:
          if (!v37) {
            goto LABEL_361;
          }
          if ((*(unsigned char *)(a1 + 533) & 2) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_562;
            }
            uint64_t v57 = *(void *)(a1 + 528) << 22;
            goto LABEL_487;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_562;
          }
          unint64_t v54 = objc_alloc_init(GEOLogMsgEventProactiveSuggestionInteractionSession);
          if (!GEOLogMsgEventProactiveSuggestionInteractionSessionReadAllFrom(v54, (void *)v3)) {
            goto LABEL_561;
          }
          PBReaderRecallMark();
          uint64_t v55 = 328;
          break;
        case 117:
          if (!v37) {
            goto LABEL_361;
          }
          if (*(unsigned char *)(a1 + 531))
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_562;
            }
            uint64_t v57 = *(void *)(a1 + 528) << 39;
            goto LABEL_487;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_562;
          }
          unint64_t v54 = objc_alloc_init(GEOLogMsgEventMapLaunch);
          if (!GEOLogMsgEventMapLaunchReadAllFrom((uint64_t)v54, (void *)v3, v9 & 1)) {
            goto LABEL_561;
          }
          PBReaderRecallMark();
          uint64_t v55 = 192;
          break;
        case 118:
          if (!v37) {
            goto LABEL_361;
          }
          if ((*(unsigned char *)(a1 + 533) & 0x20) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_562;
            }
            uint64_t v57 = *(void *)(a1 + 528) << 18;
            goto LABEL_487;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_562;
          }
          unint64_t v54 = objc_alloc_init(GEOLogMsgEventRideBookingSession);
          if (!GEOLogMsgEventRideBookingSessionReadAllFrom((uint64_t)v54, (void *)v3, v9 & 1)) {
            goto LABEL_561;
          }
          PBReaderRecallMark();
          uint64_t v55 = 360;
          break;
        case 119:
          if (!v37) {
            goto LABEL_361;
          }
          if ((*(unsigned char *)(a1 + 533) & 0x10) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_562;
            }
            uint64_t v57 = *(void *)(a1 + 528) << 19;
            goto LABEL_487;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_562;
          }
          unint64_t v54 = objc_alloc_init(GEOLogMsgEventRideBookedSession);
          if (!GEOLogMsgEventRideBookedSessionReadAllFrom((uint64_t)v54, (void *)v3, v9 & 1)) {
            goto LABEL_561;
          }
          PBReaderRecallMark();
          uint64_t v55 = 352;
          break;
        case 120:
          if (!v37) {
            goto LABEL_361;
          }
          if ((*(unsigned char *)(a1 + 534) & 4) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_562;
            }
            uint64_t v57 = *(void *)(a1 + 528) << 13;
            goto LABEL_487;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_562;
          }
          unint64_t v54 = objc_alloc_init(GEOLogMsgEventTableBookingSession);
          if (!GEOLogMsgEventTableBookingSessionReadAllFrom((uint64_t)v54, (void *)v3, v9 & 1)) {
            goto LABEL_561;
          }
          PBReaderRecallMark();
          uint64_t v55 = 400;
          break;
        case 121:
          if (!v37) {
            goto LABEL_361;
          }
          if ((*(unsigned char *)(a1 + 534) & 2) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_562;
            }
            uint64_t v57 = *(void *)(a1 + 528) << 14;
            goto LABEL_487;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_562;
          }
          unint64_t v54 = objc_alloc_init(GEOLogMsgEventTableBookedSession);
          if (!GEOLogMsgEventTableBookedSessionReadAllFrom((uint64_t)v54, (void *)v3, v9 & 1)) {
            goto LABEL_561;
          }
          PBReaderRecallMark();
          uint64_t v55 = 392;
          break;
        case 123:
          if (!v37) {
            goto LABEL_361;
          }
          if (*(unsigned char *)(a1 + 530))
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_562;
            }
            uint64_t v57 = *(void *)(a1 + 528) << 47;
            goto LABEL_487;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_562;
          }
          unint64_t v54 = objc_alloc_init(GEOLogMsgEventFullNavTrace);
          if (!GEOLogMsgEventFullNavTraceReadAllFrom((uint64_t)v54, (void *)v3)) {
            goto LABEL_561;
          }
          PBReaderRecallMark();
          uint64_t v55 = 128;
          break;
        case 124:
          if (!v37) {
            goto LABEL_361;
          }
          if ((*(unsigned char *)(a1 + 534) & 8) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_562;
            }
            uint64_t v57 = *(void *)(a1 + 528) << 12;
            goto LABEL_487;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_562;
          }
          unint64_t v54 = objc_alloc_init(GEOLogMsgEventTelemetric);
          if (!GEOLogMsgEventTelemetricReadAllFrom(v54, (void *)v3)) {
            goto LABEL_561;
          }
          PBReaderRecallMark();
          uint64_t v55 = 408;
          break;
        case 125:
          if (!v37) {
            goto LABEL_361;
          }
          if ((*(unsigned char *)(a1 + 528) & 0x20) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_562;
            }
            uint64_t v57 = *(void *)(a1 + 528) << 58;
            goto LABEL_487;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_562;
          }
          unint64_t v54 = objc_alloc_init(GEOLogMsgEventClientACSuggestions);
          if (!GEOLogMsgEventClientACSuggestionsReadAllFrom((uint64_t)v54, (void *)v3, v9 & 1)) {
            goto LABEL_561;
          }
          PBReaderRecallMark();
          uint64_t v55 = 40;
          break;
        case 126:
          if (!v37) {
            goto LABEL_361;
          }
          if ((*(unsigned char *)(a1 + 533) & 4) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_562;
            }
            uint64_t v57 = *(void *)(a1 + 528) << 21;
            goto LABEL_487;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_562;
          }
          unint64_t v54 = objc_alloc_init(GEOLogMsgEventRealtimeTrafficProbe);
          if (!GEOLogMsgEventRealtimeTrafficProbeReadAllFrom((uint64_t)v54, (void *)v3)) {
            goto LABEL_561;
          }
          PBReaderRecallMark();
          uint64_t v55 = 336;
          break;
        case 127:
          if (!v37) {
            goto LABEL_361;
          }
          if ((*(unsigned char *)(a1 + 528) & 0x10) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_562;
            }
            uint64_t v57 = *(void *)(a1 + 528) << 59;
            goto LABEL_487;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_562;
          }
          unint64_t v54 = objc_alloc_init(GEOLogMsgEventBatchTrafficProbe);
          if (!GEOLogMsgEventBatchTrafficProbeReadAllFrom((uint64_t)v54, (void *)v3)) {
            goto LABEL_561;
          }
          PBReaderRecallMark();
          uint64_t v55 = 32;
          break;
        case 129:
          if (!v37) {
            goto LABEL_361;
          }
          if ((*(unsigned char *)(a1 + 528) & 0x40) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_562;
            }
            uint64_t v57 = *(void *)(a1 + 528) << 57;
            goto LABEL_487;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_562;
          }
          unint64_t v54 = objc_alloc_init(GEOLogMsgEventCommuteWindow);
          if (!GEOLogMsgEventCommuteWindowReadAllFrom((uint64_t)v54, (void *)v3)) {
            goto LABEL_561;
          }
          PBReaderRecallMark();
          uint64_t v55 = 48;
          break;
        case 131:
          if (!v37) {
            goto LABEL_361;
          }
          if ((*(unsigned char *)(a1 + 535) & 0x40) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_562;
            }
            uint64_t v57 = 2 * *(void *)(a1 + 528);
            goto LABEL_487;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_562;
          }
          unint64_t v54 = objc_alloc_init(GEOLogMsgEventWifiConnectionQualityProbe);
          if (!GEOLogMsgEventWifiConnectionQualityProbeReadAllFrom((uint64_t)v54, (void *)v3, v9 & 1)) {
            goto LABEL_561;
          }
          PBReaderRecallMark();
          uint64_t v55 = 504;
          break;
        case 132:
          if (!v37) {
            goto LABEL_361;
          }
          if ((*(unsigned char *)(a1 + 532) & 4) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_562;
            }
            uint64_t v57 = *(void *)(a1 + 528) << 29;
            goto LABEL_487;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_562;
          }
          unint64_t v54 = objc_alloc_init(GEOLogMsgEventParkedCar);
          if (!GEOLogMsgEventParkedCarReadAllFrom((uint64_t)v54, (void *)v3)) {
            goto LABEL_561;
          }
          PBReaderRecallMark();
          uint64_t v55 = 272;
          break;
        case 133:
          if (!v37) {
            goto LABEL_361;
          }
          if ((*(unsigned char *)(a1 + 534) & 0x40) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_562;
            }
            uint64_t v57 = *(void *)(a1 + 528) << 9;
            goto LABEL_487;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_562;
          }
          unint64_t v54 = objc_alloc_init(GEOLogMsgEventTileCacheAnalytic);
          if (!GEOLogMsgEventTileCacheAnalyticReadAllFrom((uint64_t)v54, (void *)v3, v9 & 1)) {
            goto LABEL_561;
          }
          PBReaderRecallMark();
          uint64_t v55 = 432;
          break;
        case 134:
          if (!v37) {
            goto LABEL_361;
          }
          if ((*(unsigned char *)(a1 + 530) & 2) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_562;
            }
            uint64_t v57 = *(void *)(a1 + 528) << 46;
            goto LABEL_487;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_562;
          }
          unint64_t v54 = objc_alloc_init(GEOLogMsgEventGridDuration);
          if (!GEOLogMsgEventGridDurationReadAllFrom(v54, (void *)v3)) {
            goto LABEL_561;
          }
          PBReaderRecallMark();
          uint64_t v55 = 136;
          break;
        case 135:
          if (!v37) {
            goto LABEL_361;
          }
          if ((*(unsigned char *)(a1 + 529) & 0x20) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_562;
            }
            uint64_t v57 = *(void *)(a1 + 528) << 50;
            goto LABEL_487;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_562;
          }
          unint64_t v54 = objc_alloc_init(GEOLogMsgEventDisplayAnalytic);
          if (!GEOLogMsgEventDisplayAnalyticReadAllFrom((uint64_t)v54, (void *)v3)) {
            goto LABEL_561;
          }
          PBReaderRecallMark();
          uint64_t v55 = 104;
          break;
        case 136:
          if (!v37) {
            goto LABEL_361;
          }
          if ((*(unsigned char *)(a1 + 534) & 0x20) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_562;
            }
            uint64_t v57 = *(void *)(a1 + 528) << 10;
            goto LABEL_487;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_562;
          }
          unint64_t v54 = objc_alloc_init(GEOLogMsgEventThrottle);
          if (!GEOLogMsgEventThrottleReadAllFrom((uint64_t)v54, (void *)v3, v9 & 1)) {
            goto LABEL_561;
          }
          PBReaderRecallMark();
          uint64_t v55 = 424;
          break;
        case 137:
          if (!v37) {
            goto LABEL_361;
          }
          if ((*(unsigned char *)(a1 + 530) & 0x80) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_562;
            }
            uint64_t v57 = *(void *)(a1 + 528) << 40;
            goto LABEL_487;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_562;
          }
          unint64_t v54 = objc_alloc_init(GEOLogMsgEventMapKitCounts);
          if (!GEOLogMsgEventMapKitCountsReadAllFrom(v54, (void *)v3)) {
            goto LABEL_561;
          }
          PBReaderRecallMark();
          uint64_t v55 = 184;
          break;
        case 138:
          if (!v37) {
            goto LABEL_361;
          }
          if ((*(unsigned char *)(a1 + 532) & 0x80) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_562;
            }
            uint64_t v57 = *(void *)(a1 + 528) << 24;
            goto LABEL_487;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_562;
          }
          unint64_t v54 = objc_alloc_init(GEOLogMsgEventPredExTrainingData);
          if (!GEOLogMsgEventPredExTrainingDataReadAllFrom((uint64_t)v54, (void *)v3, v9 & 1)) {
            goto LABEL_561;
          }
          PBReaderRecallMark();
          uint64_t v55 = 312;
          break;
        case 139:
          if (!v37) {
            goto LABEL_361;
          }
          if ((*(unsigned char *)(a1 + 531) & 0x40) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_562;
            }
            uint64_t v57 = *(void *)(a1 + 528) << 33;
            goto LABEL_487;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_562;
          }
          unint64_t v54 = objc_alloc_init(GEOLogMsgEventMarcoLiteUsage);
          if (!GEOLogMsgEventMarcoLiteUsageReadAllFrom(v54, (void *)v3)) {
            goto LABEL_561;
          }
          PBReaderRecallMark();
          uint64_t v55 = 240;
          break;
        case 140:
          if (!v37) {
            goto LABEL_361;
          }
          if ((*(unsigned char *)(a1 + 535) & 8) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_562;
            }
            uint64_t v57 = 16 * *(void *)(a1 + 528);
            goto LABEL_487;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_562;
          }
          unint64_t v54 = objc_alloc_init(GEOLogMsgEventTripDepartureFeedback);
          if (!GEOLogMsgEventTripDepartureFeedbackReadAllFrom((uint64_t)v54, (void *)v3)) {
            goto LABEL_561;
          }
          PBReaderRecallMark();
          uint64_t v55 = 472;
          break;
        case 141:
          if (!v37) {
            goto LABEL_361;
          }
          if ((*(unsigned char *)(a1 + 529) & 0x10) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_562;
            }
            uint64_t v57 = *(void *)(a1 + 528) << 51;
            goto LABEL_487;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_562;
          }
          unint64_t v54 = objc_alloc_init(GEOLogMsgEventDirectionsRequestDetails);
          if (!GEOLogMsgEventDirectionsRequestDetailsReadAllFrom((uint64_t)v54, (void *)v3)) {
            goto LABEL_561;
          }
          PBReaderRecallMark();
          uint64_t v55 = 96;
          break;
        case 142:
          if (!v37) {
            goto LABEL_361;
          }
          if ((*(unsigned char *)(a1 + 529) & 0x40) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_562;
            }
            uint64_t v57 = *(void *)(a1 + 528) << 49;
            goto LABEL_487;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_562;
          }
          unint64_t v54 = objc_alloc_init(GEOLogMsgEventEVRoutingVehicleDetails);
          if (!GEOLogMsgEventEVRoutingVehicleDetailsReadAllFrom((uint64_t)v54, (void *)v3, v9 & 1)) {
            goto LABEL_561;
          }
          PBReaderRecallMark();
          uint64_t v55 = 112;
          break;
        case 143:
          if (!v37) {
            goto LABEL_361;
          }
          if ((*(unsigned char *)(a1 + 529) & 0x80) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_562;
            }
            uint64_t v57 = *(void *)(a1 + 528) << 48;
            goto LABEL_487;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_562;
          }
          unint64_t v54 = objc_alloc_init(GEOLogMsgEventEVTrip);
          if (!GEOLogMsgEventEVTripReadAllFrom((uint64_t)v54, (void *)v3, v9 & 1)) {
            goto LABEL_561;
          }
          PBReaderRecallMark();
          uint64_t v55 = 120;
          break;
        case 144:
          if (!v37) {
            goto LABEL_361;
          }
          if ((*(unsigned char *)(a1 + 528) & 0x80) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_562;
            }
            uint64_t v57 = *(void *)(a1 + 528) << 56;
            goto LABEL_487;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_562;
          }
          unint64_t v54 = objc_alloc_init(GEOLogMsgEventCuratedCollectionStats);
          if (!GEOLogMsgEventCuratedCollectionStatsReadAllFrom((uint64_t)v54, (void *)v3)) {
            goto LABEL_561;
          }
          PBReaderRecallMark();
          uint64_t v55 = 56;
          break;
        case 145:
          if (!v37) {
            goto LABEL_361;
          }
          if (*(unsigned char *)(a1 + 529))
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_562;
            }
            uint64_t v57 = *(void *)(a1 + 528) << 55;
            goto LABEL_487;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_562;
          }
          unint64_t v54 = objc_alloc_init(GEOLogMsgEventCuratedCollectionUsage);
          if (!GEOLogMsgEventCuratedCollectionUsageReadAllFrom((uint64_t)v54, (void *)v3, v9 & 1)) {
            goto LABEL_561;
          }
          PBReaderRecallMark();
          uint64_t v55 = 64;
          break;
        case 146:
          if (!v37) {
            goto LABEL_361;
          }
          if ((*(unsigned char *)(a1 + 531) & 2) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_562;
            }
            uint64_t v57 = *(void *)(a1 + 528) << 38;
            goto LABEL_487;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_562;
          }
          unint64_t v54 = objc_alloc_init(GEOLogMsgEventMapsDeviceSettings);
          if (!GEOLogMsgEventMapsDeviceSettingsReadAllFrom((uint64_t)v54, (void *)v3)) {
            goto LABEL_561;
          }
          PBReaderRecallMark();
          uint64_t v55 = 200;
          break;
        case 147:
          if (!v37) {
            goto LABEL_361;
          }
          if ((*(unsigned char *)(a1 + 530) & 4) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_562;
            }
            uint64_t v57 = *(void *)(a1 + 528) << 45;
            goto LABEL_487;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_562;
          }
          unint64_t v54 = objc_alloc_init(GEOLogMsgEventHardStop);
          if (!GEOLogMsgEventHardStopReadAllFrom((uint64_t)v54, (void *)v3, v9 & 1)) {
            goto LABEL_561;
          }
          PBReaderRecallMark();
          uint64_t v55 = 144;
          break;
        case 148:
          if (!v37) {
            goto LABEL_361;
          }
          if ((*(unsigned char *)(a1 + 535) & 0x20) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_562;
            }
            uint64_t v57 = 4 * *(void *)(a1 + 528);
            goto LABEL_487;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_562;
          }
          unint64_t v54 = objc_alloc_init(GEOLogMsgEventVLFUsage);
          if (!GEOLogMsgEventVLFUsageReadAllFrom((uint64_t)v54, (void *)v3, v9 & 1)) {
            goto LABEL_561;
          }
          PBReaderRecallMark();
          uint64_t v55 = 496;
          break;
        case 149:
          if (!v37) {
            goto LABEL_361;
          }
          if ((*(unsigned char *)(a1 + 530) & 0x20) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_562;
            }
            uint64_t v57 = *(void *)(a1 + 528) << 42;
            goto LABEL_487;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_562;
          }
          unint64_t v54 = objc_alloc_init(GEOLogMsgEventLogDiscard);
          if (!GEOLogMsgEventLogDiscardReadAllFrom((uint64_t)v54, (void *)v3, v9 & 1)) {
            goto LABEL_561;
          }
          PBReaderRecallMark();
          uint64_t v55 = 168;
          break;
        case 150:
          if (!v37) {
            goto LABEL_361;
          }
          if ((*(unsigned char *)(a1 + 529) & 2) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_562;
            }
            uint64_t v57 = *(void *)(a1 + 528) << 54;
            goto LABEL_487;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_562;
          }
          unint64_t v54 = objc_alloc_init(GEOLogMsgEventDailyUseSummary);
          if (!GEOLogMsgEventDailyUseSummaryReadAllFrom((uint64_t)v54, (void *)v3, v9 & 1)) {
            goto LABEL_561;
          }
          PBReaderRecallMark();
          uint64_t v55 = 72;
          break;
        case 151:
          if (!v37) {
            goto LABEL_361;
          }
          if (*(unsigned char *)(a1 + 533))
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_562;
            }
            uint64_t v57 = *(void *)(a1 + 528) << 23;
            goto LABEL_487;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_562;
          }
          unint64_t v54 = objc_alloc_init(GEOLogMsgEventPressureData);
          if (!GEOLogMsgEventPressureDataReadAllFrom((uint64_t)v54, (void *)v3)) {
            goto LABEL_561;
          }
          PBReaderRecallMark();
          uint64_t v55 = 320;
          break;
        case 152:
          if (!v37) {
            goto LABEL_361;
          }
          if ((*(unsigned char *)(a1 + 532) & 0x40) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_562;
            }
            uint64_t v57 = *(void *)(a1 + 528) << 25;
            goto LABEL_487;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_562;
          }
          unint64_t v54 = objc_alloc_init(GEOLogMsgEventPOIBusynessData);
          if (!GEOLogMsgEventPOIBusynessDataReadAllFrom((uint64_t)v54, (void *)v3, v9 & 1)) {
            goto LABEL_561;
          }
          PBReaderRecallMark();
          uint64_t v55 = 304;
          break;
        case 153:
          if (!v37) {
            goto LABEL_361;
          }
          if ((*(unsigned char *)(a1 + 532) & 8) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_562;
            }
            uint64_t v57 = *(void *)(a1 + 528) << 28;
            goto LABEL_487;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_562;
          }
          unint64_t v54 = objc_alloc_init(GEOLogMsgEventPeriodicSettingsSummary);
          if (!GEOLogMsgEventPeriodicSettingsSummaryReadAllFrom((uint64_t)v54, (void *)v3, v9 & 1)) {
            goto LABEL_561;
          }
          PBReaderRecallMark();
          uint64_t v55 = 280;
          break;
        case 154:
          if (!v37) {
            goto LABEL_361;
          }
          if ((*(unsigned char *)(a1 + 534) & 0x10) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_562;
            }
            uint64_t v57 = *(void *)(a1 + 528) << 11;
            goto LABEL_487;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_562;
          }
          unint64_t v54 = objc_alloc_init(GEOLogMsgEventThermalPressure);
          if (!GEOLogMsgEventThermalPressureReadAllFrom((uint64_t)v54, (void *)v3)) {
            goto LABEL_561;
          }
          PBReaderRecallMark();
          uint64_t v55 = 416;
          break;
        case 155:
          if (!v37) {
            goto LABEL_361;
          }
          if ((*(unsigned char *)(a1 + 528) & 8) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_562;
            }
            uint64_t v57 = *(void *)(a1 + 528) << 60;
            goto LABEL_487;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_562;
          }
          unint64_t v54 = objc_alloc_init(GEOLogMsgEventARSessionUsage);
          if (!GEOLogMsgEventARSessionUsageReadAllFrom((uint64_t)v54, (void *)v3, v9 & 1)) {
            goto LABEL_561;
          }
          PBReaderRecallMark();
          uint64_t v55 = 24;
          break;
        case 156:
          if (!v37) {
            goto LABEL_361;
          }
          if ((*(unsigned char *)(a1 + 532) & 2) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_562;
            }
            uint64_t v57 = *(void *)(a1 + 528) << 30;
            goto LABEL_487;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_562;
          }
          unint64_t v54 = objc_alloc_init(GEOLogMsgEventNetworkSelectionHarvest);
          if (!GEOLogMsgEventNetworkSelectionHarvestReadAllFrom((uint64_t)v54, (void *)v3)) {
            goto LABEL_561;
          }
          PBReaderRecallMark();
          uint64_t v55 = 264;
          break;
        case 157:
          if (!v37) {
            goto LABEL_361;
          }
          if ((*(unsigned char *)(a1 + 530) & 8) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_562;
            }
            uint64_t v57 = *(void *)(a1 + 528) << 44;
            goto LABEL_487;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_562;
          }
          unint64_t v54 = objc_alloc_init(GEOLogMsgEventImpressionEvent);
          if (!GEOLogMsgEventImpressionEventReadAllFrom((uint64_t)v54, (void *)v3)) {
            goto LABEL_561;
          }
          PBReaderRecallMark();
          uint64_t v55 = 152;
          break;
        case 158:
          if (!v37) {
            goto LABEL_361;
          }
          if ((*(unsigned char *)(a1 + 533) & 0x80) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_562;
            }
            uint64_t v57 = *(void *)(a1 + 528) << 16;
            goto LABEL_487;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_562;
          }
          unint64_t v54 = objc_alloc_init(GEOLogMsgEventShowcaseSuppression);
          if (!GEOLogMsgEventShowcaseSuppressionReadAllFrom((uint64_t)v54, (void *)v3, v9 & 1)) {
            goto LABEL_561;
          }
          PBReaderRecallMark();
          uint64_t v55 = 376;
          break;
        case 159:
          if (!v37) {
            goto LABEL_361;
          }
          if ((*(unsigned char *)(a1 + 532) & 0x10) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_562;
            }
            uint64_t v57 = *(void *)(a1 + 528) << 27;
            goto LABEL_487;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_562;
          }
          unint64_t v54 = objc_alloc_init(GEOLogMsgEventPlaceCacheLookup);
          if (!GEOLogMsgEventPlaceCacheLookupReadAllFrom((uint64_t)v54, (void *)v3)) {
            goto LABEL_561;
          }
          PBReaderRecallMark();
          uint64_t v55 = 288;
          break;
        case 160:
          if (!v37) {
            goto LABEL_361;
          }
          if ((*(unsigned char *)(a1 + 529) & 4) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_562;
            }
            uint64_t v57 = *(void *)(a1 + 528) << 53;
            goto LABEL_487;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_562;
          }
          unint64_t v54 = objc_alloc_init(GEOLogMsgEventDeviceSyncStatus);
          if (!GEOLogMsgEventDeviceSyncStatusReadAllFrom(v54, (void *)v3)) {
            goto LABEL_561;
          }
          PBReaderRecallMark();
          uint64_t v55 = 80;
          break;
        case 161:
          if (!v37) {
            goto LABEL_361;
          }
          if ((*(unsigned char *)(a1 + 531) & 0x10) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_562;
            }
            uint64_t v57 = *(void *)(a1 + 528) << 35;
            goto LABEL_487;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_562;
          }
          unint64_t v54 = objc_alloc_init(GEOLogMsgEventMapsInteraction);
          if (!GEOLogMsgEventMapsInteractionReadAllFrom((uint64_t)v54, (void *)v3)) {
            goto LABEL_561;
          }
          PBReaderRecallMark();
          uint64_t v55 = 224;
          break;
        case 162:
          if (!v37) {
            goto LABEL_361;
          }
          if ((*(unsigned char *)(a1 + 531) & 0x80) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_562;
            }
            uint64_t v57 = *(void *)(a1 + 528) << 32;
            goto LABEL_487;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_562;
          }
          unint64_t v54 = objc_alloc_init(GEOLogMsgEventNetworkEventSummary);
          if (!GEOLogMsgEventNetworkEventSummaryReadAllFrom(v54, (void *)v3, v9 & 1)) {
            goto LABEL_561;
          }
          PBReaderRecallMark();
          uint64_t v55 = 248;
          break;
        case 163:
          if (!v37) {
            goto LABEL_361;
          }
          if ((*(unsigned char *)(a1 + 533) & 0x40) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_562;
            }
            uint64_t v57 = *(void *)(a1 + 528) << 17;
            goto LABEL_487;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_562;
          }
          unint64_t v54 = objc_alloc_init(GEOLogMsgEventServiceMetadata);
          if (!GEOLogMsgEventServiceMetadataReadAllFrom((uint64_t)v54, (void *)v3, v9 & 1)) {
            goto LABEL_561;
          }
          PBReaderRecallMark();
          uint64_t v55 = 368;
          break;
        case 164:
          if (!v37) {
            goto LABEL_361;
          }
          if ((*(unsigned char *)(a1 + 531) & 4) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_562;
            }
            uint64_t v57 = *(void *)(a1 + 528) << 37;
            goto LABEL_487;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_562;
          }
          unint64_t v54 = objc_alloc_init(GEOLogMsgEventMapsEngagement);
          if (!GEOLogMsgEventMapsEngagementReadAllFrom((uint64_t)v54, (void *)v3)) {
            goto LABEL_561;
          }
          PBReaderRecallMark();
          uint64_t v55 = 208;
          break;
        default:
          if (v36 != 2000) {
            goto LABEL_57;
          }
          if ((v8 & 1) == 0) {
            goto LABEL_361;
          }
          *(void *)(a1 + 528) |= 1uLL;
          uint64_t v51 = *v23;
          unint64_t v52 = *(void *)(v3 + v51);
          if (v52 <= 0xFFFFFFFFFFFFFFF7 && v52 + 8 <= *(void *)(v3 + *v6))
          {
            uint64_t v53 = *(void *)(*(void *)(v3 + (int)*MEMORY[0x1E4F940B8]) + v52);
            *(void *)(v3 + v51) = v52 + 8;
          }
          else
          {
            *(unsigned char *)(v3 + (int)*MEMORY[0x1E4F940C8]) = 1;
            uint64_t v53 = 0;
          }
          *(void *)(a1 + 480) = v53;
          goto LABEL_488;
      }
LABEL_359:
      char v56 = *(void **)(a1 + v55);
      *(void *)(a1 + v55) = v54;

      --v7;
LABEL_360:
      BOOL v22 = v63;
      goto LABEL_488;
    }
    if (v36 == 1)
    {
      if (!v37 || (*(unsigned char *)(a1 + 530) & 0x40) != 0)
      {
LABEL_361:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_562;
        }
        goto LABEL_488;
      }
      if ((PBReaderPlaceMark() & 1) == 0) {
        goto LABEL_562;
      }
      unint64_t v54 = objc_alloc_init(GEOLogMsgState);
      if (!GEOLogMsgStateReadAllFrom((uint64_t)v54, (void *)v3, v9 & 1)) {
        goto LABEL_561;
      }
      PBReaderRecallMark();
      -[GEOLogMsgEvent _addNoFlagsLogMsgState:](a1, v54);

      goto LABEL_360;
    }
    if (v36 == 2) {
      break;
    }
    if (v36 != 3)
    {
LABEL_57:
      if (!PBReaderSkipValueWithTag()) {
        goto LABEL_562;
      }
      goto LABEL_488;
    }
    if (!v37) {
      goto LABEL_361;
    }
    if ((*(unsigned char *)(a1 + 531) & 8) != 0)
    {
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        goto LABEL_562;
      }
      uint64_t v57 = *(void *)(a1 + 528) << 36;
LABEL_487:
      v7 += v57 >> 63;
      goto LABEL_488;
    }
    uint64_t v49 = PBReaderReadString();
    unsigned int v50 = *(void **)(a1 + 216);
    *(void *)(a1 + 216) = v49;

    --v7;
LABEL_488:
    char v24 = (int *)MEMORY[0x1E4F940C8];
    BOOL v25 = (int *)MEMORY[0x1E4F940B8];
    if (!v22 && v7 == 0) {
      goto LABEL_492;
    }
  }
  if (!v37) {
    goto LABEL_361;
  }
  if ((*(unsigned char *)(a1 + 528) & 4) != 0)
  {
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      goto LABEL_562;
    }
    uint64_t v57 = *(void *)(a1 + 528) << 61;
    goto LABEL_487;
  }
  if ((PBReaderPlaceMark() & 1) == 0) {
    goto LABEL_562;
  }
  unint64_t v54 = objc_alloc_init(GEOLogMsgEventId);
  if (GEOLogMsgEventIdReadAllFrom((uint64_t)v54, (void *)v3))
  {
    PBReaderRecallMark();
    uint64_t v55 = 16;
    goto LABEL_359;
  }
LABEL_561:

  BOOL v22 = v63;
LABEL_562:
  unint64_t v3 = 0;
  *(void *)(a1 + 528) |= 0x7FFFFFFFFFFFFFFCuLL;
  if (v22)
  {
LABEL_559:
    char v61 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  return v3;
}

unint64_t GEOPDMerchantBrandLookupResponseReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (a2)
  {
    os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 136));
    id v6 = (int *)MEMORY[0x1E4F940E0];
    *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 132);
    [(id)v3 seekToOffset:*(unsigned int *)(a1 + 128)];
    uint64_t v7 = 0;
    char v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    unsigned int v11 = (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int16 *)(a1 + 144)), (uint16x4_t)0xFFFAFFFBFFF8FFF9), (int8x8_t)0x1000100010001))+ ((*(_WORD *)(a1 + 144) >> 4) & 1)+ ((*(_WORD *)(a1 + 144) >> 3) & 1));
    while (2)
    {
      uint64_t v12 = 1;
      uint64_t v13 = 1;
      switch(a3[v7])
      {
        case -4:
          ++v11;
          goto LABEL_8;
        case -3:
          char v8 = 1;
          goto LABEL_7;
        case -2:
        case -1:
          goto LABEL_9;
        case 0:
          BOOL v14 = v11 > 3;
          char v15 = v14 & ~(_BYTE)v10 | v9;
          char v16 = v14 | v10;
          if (((v14 | v10) | v8)) {
            unsigned int v17 = 0;
          }
          else {
            unsigned int v17 = a3;
          }
          uint64_t v18 = (int *)MEMORY[0x1E4F940E8];
          int v121 = 1;
          uint64_t v19 = (int *)MEMORY[0x1E4F940C8];
          char v20 = v14 & ~(_BYTE)v10 | v9;
          if (*(void *)(v3 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(v3 + *v6)) {
            goto LABEL_170;
          }
          char v119 = v15;
          char v122 = v16 | v15;
          char v123 = (v17 == 0) | v16;
          uint64_t v21 = (int *)MEMORY[0x1E4F940B8];
          char v120 = v16;
          break;
        default:
          ++v11;
LABEL_7:
          uint64_t v12 = v9;
LABEL_8:
          uint64_t v13 = v10;
LABEL_9:
          ++v7;
          uint64_t v9 = v12;
          uint64_t v10 = v13;
          continue;
      }
      break;
    }
    do
    {
      if (*(unsigned char *)(v3 + *v19)) {
        break;
      }
      char v22 = 0;
      unsigned int v23 = 0;
      unint64_t v24 = 0;
      while (1)
      {
        uint64_t v25 = *v18;
        uint64_t v26 = *(void *)(v3 + v25);
        unint64_t v27 = v26 + 1;
        if (v26 == -1 || v27 > *(void *)(v3 + *v6)) {
          break;
        }
        char v28 = *(unsigned char *)(*(void *)(v3 + *v21) + v26);
        *(void *)(v3 + v25) = v27;
        v24 |= (unint64_t)(v28 & 0x7F) << v22;
        if ((v28 & 0x80) == 0) {
          goto LABEL_24;
        }
        v22 += 7;
        BOOL v29 = v23++ >= 9;
        if (v29)
        {
          unint64_t v24 = 0;
          int v30 = *(unsigned __int8 *)(v3 + *v19);
          goto LABEL_26;
        }
      }
      *(unsigned char *)(v3 + *v19) = 1;
LABEL_24:
      int v30 = *(unsigned __int8 *)(v3 + *v19);
      if (*(unsigned char *)(v3 + *v19)) {
        unint64_t v24 = 0;
      }
LABEL_26:
      int v31 = v24 & 7;
      if (v30 || v31 == 4) {
        break;
      }
      BOOL v33 = v21;
      int v34 = v19;
      unint64_t v35 = v24 >> 3;
      BOOL v36 = v16;
      if ((v123 & 1) == 0)
      {
        BOOL v37 = v17;
        do
        {
          int v39 = *v37++;
          int v38 = v39;
          BOOL v36 = v39 != 0;
          if (v39) {
            BOOL v40 = v38 == v35;
          }
          else {
            BOOL v40 = 1;
          }
        }
        while (!v40);
      }
      switch((int)v35)
      {
        case 1:
          uint64_t v19 = v34;
          if ((v8 & 1) == 0) {
            goto LABEL_123;
          }
          char v41 = 0;
          unsigned int v42 = 0;
          uint64_t v43 = 0;
          *(_WORD *)(a1 + 144) |= 1u;
          uint64_t v21 = v33;
          id v6 = (int *)MEMORY[0x1E4F940E0];
          while (1)
          {
            uint64_t v44 = *v18;
            uint64_t v45 = *(void *)(v3 + v44);
            unint64_t v46 = v45 + 1;
            if (v45 == -1 || v46 > *(void *)(v3 + *v6)) {
              break;
            }
            char v47 = *(unsigned char *)(*(void *)(v3 + *v21) + v45);
            *(void *)(v3 + v44) = v46;
            v43 |= (unint64_t)(v47 & 0x7F) << v41;
            if ((v47 & 0x80) == 0) {
              goto LABEL_130;
            }
            v41 += 7;
            BOOL v29 = v42++ >= 9;
            if (v29)
            {
              uint64_t v43 = 0;
              goto LABEL_132;
            }
          }
          *(unsigned char *)(v3 + *v19) = 1;
LABEL_130:
          if (*(unsigned char *)(v3 + *v19)) {
            uint64_t v43 = 0;
          }
LABEL_132:
          uint64_t v92 = 104;
          goto LABEL_141;
        case 2:
          uint64_t v19 = v34;
          if (!v36) {
            goto LABEL_123;
          }
          uint64_t v21 = v33;
          if ((*(_WORD *)(a1 + 144) & 0x100) == 0)
          {
            uint64_t v51 = PBReaderReadString();
            unint64_t v52 = *(void **)(a1 + 120);
            *(void *)(a1 + 120) = v51;

            --v7;
LABEL_60:
            char v16 = v120;
            id v6 = (int *)MEMORY[0x1E4F940E0];
            break;
          }
          char v93 = PBReaderSkipValueWithTag();
          id v6 = (int *)MEMORY[0x1E4F940E0];
          if ((v93 & 1) == 0)
          {
LABEL_188:
            int v121 = 0;
            char v16 = v120;
            goto LABEL_169;
          }
          v7 += *(unsigned __int16 *)(a1 + 144) << 23 >> 31;
          goto LABEL_167;
        case 3:
          uint64_t v19 = v34;
          if (!v36 || (*(_WORD *)(a1 + 144) & 0x80) != 0) {
            goto LABEL_123;
          }
          uint64_t v53 = PBReaderReadString();
          uint64_t v21 = v33;
          if (v53) {
            -[GEOPDMerchantBrandLookupResponse _addNoFlagsGeoHash:](a1, v53);
          }

          goto LABEL_60;
        case 4:
          uint64_t v19 = v34;
          if (!v36 || (*(_WORD *)(a1 + 144) & 0x20) != 0) {
            goto LABEL_123;
          }
          uint64_t v21 = v33;
          if (v31 != 2)
          {
            char v94 = 0;
            unsigned int v95 = 0;
            uint64_t v96 = 0;
            id v6 = (int *)MEMORY[0x1E4F940E0];
            while (1)
            {
              uint64_t v97 = *v18;
              uint64_t v98 = *(void *)(v3 + v97);
              unint64_t v99 = v98 + 1;
              if (v98 == -1 || v99 > *(void *)(v3 + *v6)) {
                goto LABEL_165;
              }
              char v100 = *(unsigned char *)(*(void *)(v3 + *v21) + v98);
              *(void *)(v3 + v97) = v99;
              v96 |= (unint64_t)(v100 & 0x7F) << v94;
              if (v100 < 0)
              {
                v94 += 7;
                BOOL v29 = v95++ >= 9;
                if (!v29) {
                  continue;
                }
              }
              goto LABEL_166;
            }
          }
          int v54 = PBReaderPlaceMark();
          id v6 = (int *)MEMORY[0x1E4F940E0];
          if (!v54) {
            goto LABEL_188;
          }
          while (*(void *)(v3 + *v18) < *(void *)(v3 + *v6) && !*(unsigned char *)(v3 + *v19))
          {
            char v55 = 0;
            unsigned int v56 = 0;
            uint64_t v57 = 0;
            while (1)
            {
              uint64_t v58 = *v18;
              uint64_t v59 = *(void *)(v3 + v58);
              unint64_t v60 = v59 + 1;
              if (v59 == -1 || v60 > *(void *)(v3 + *v6)) {
                break;
              }
              char v61 = *(unsigned char *)(*(void *)(v3 + *v21) + v59);
              *(void *)(v3 + v58) = v60;
              v57 |= (unint64_t)(v61 & 0x7F) << v55;
              if (v61 < 0)
              {
                v55 += 7;
                BOOL v29 = v56++ >= 9;
                if (!v29) {
                  continue;
                }
              }
              goto LABEL_75;
            }
            *(unsigned char *)(v3 + *v19) = 1;
LABEL_75:
            PBRepeatedUInt64Add();
          }
          goto LABEL_128;
        case 5:
          uint64_t v19 = v34;
          if (!v36 || (*(_WORD *)(a1 + 144) & 0x40) != 0) {
            goto LABEL_123;
          }
          uint64_t v21 = v33;
          if (v31 != 2)
          {
            char v101 = 0;
            unsigned int v102 = 0;
            uint64_t v103 = 0;
            id v6 = (int *)MEMORY[0x1E4F940E0];
            while (1)
            {
              uint64_t v104 = *v18;
              uint64_t v105 = *(void *)(v3 + v104);
              unint64_t v106 = v105 + 1;
              if (v105 == -1 || v106 > *(void *)(v3 + *v6)) {
                goto LABEL_165;
              }
              char v107 = *(unsigned char *)(*(void *)(v3 + *v21) + v105);
              *(void *)(v3 + v104) = v106;
              v103 |= (unint64_t)(v107 & 0x7F) << v101;
              if (v107 < 0)
              {
                v101 += 7;
                BOOL v29 = v102++ >= 9;
                if (!v29) {
                  continue;
                }
              }
              goto LABEL_166;
            }
          }
          int v62 = PBReaderPlaceMark();
          id v6 = (int *)MEMORY[0x1E4F940E0];
          if (!v62) {
            goto LABEL_188;
          }
          while (*(void *)(v3 + *v18) < *(void *)(v3 + *v6) && !*(unsigned char *)(v3 + *v19))
          {
            char v63 = 0;
            unsigned int v64 = 0;
            uint64_t v65 = 0;
            while (1)
            {
              uint64_t v66 = *v18;
              uint64_t v67 = *(void *)(v3 + v66);
              unint64_t v68 = v67 + 1;
              if (v67 == -1 || v68 > *(void *)(v3 + *v6)) {
                break;
              }
              char v69 = *(unsigned char *)(*(void *)(v3 + *v21) + v67);
              *(void *)(v3 + v66) = v68;
              v65 |= (unint64_t)(v69 & 0x7F) << v63;
              if (v69 < 0)
              {
                v63 += 7;
                BOOL v29 = v64++ >= 9;
                if (!v29) {
                  continue;
                }
              }
              goto LABEL_90;
            }
            *(unsigned char *)(v3 + *v19) = 1;
LABEL_90:
            PBRepeatedUInt64Add();
          }
          goto LABEL_128;
        case 6:
          uint64_t v19 = v34;
          if ((v8 & 1) == 0) {
            goto LABEL_123;
          }
          char v70 = 0;
          unsigned int v71 = 0;
          uint64_t v72 = 0;
          *(_WORD *)(a1 + 144) |= 4u;
          uint64_t v21 = v33;
          id v6 = (int *)MEMORY[0x1E4F940E0];
          while (2)
          {
            uint64_t v73 = *v18;
            uint64_t v74 = *(void *)(v3 + v73);
            unint64_t v75 = v74 + 1;
            if (v74 == -1 || v75 > *(void *)(v3 + *v6))
            {
              *(unsigned char *)(v3 + *v19) = 1;
            }
            else
            {
              char v76 = *(unsigned char *)(*(void *)(v3 + *v21) + v74);
              *(void *)(v3 + v73) = v75;
              v72 |= (unint64_t)(v76 & 0x7F) << v70;
              if (v76 < 0)
              {
                v70 += 7;
                BOOL v29 = v71++ >= 9;
                if (v29)
                {
                  uint64_t v72 = 0;
                  goto LABEL_136;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(v3 + *v19)) {
            uint64_t v72 = 0;
          }
LABEL_136:
          *(unsigned char *)(a1 + 140) = v72 != 0;
          break;
        case 7:
          uint64_t v19 = v34;
          if ((v8 & 1) == 0) {
            goto LABEL_123;
          }
          char v77 = 0;
          unsigned int v78 = 0;
          uint64_t v43 = 0;
          *(_WORD *)(a1 + 144) |= 2u;
          uint64_t v21 = v33;
          id v6 = (int *)MEMORY[0x1E4F940E0];
          while (2)
          {
            uint64_t v79 = *v18;
            uint64_t v80 = *(void *)(v3 + v79);
            unint64_t v81 = v80 + 1;
            if (v80 == -1 || v81 > *(void *)(v3 + *v6))
            {
              *(unsigned char *)(v3 + *v19) = 1;
            }
            else
            {
              char v82 = *(unsigned char *)(*(void *)(v3 + *v21) + v80);
              *(void *)(v3 + v79) = v81;
              v43 |= (unint64_t)(v82 & 0x7F) << v77;
              if (v82 < 0)
              {
                v77 += 7;
                BOOL v29 = v78++ >= 9;
                if (v29)
                {
                  uint64_t v43 = 0;
                  goto LABEL_140;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(v3 + *v19)) {
            uint64_t v43 = 0;
          }
LABEL_140:
          uint64_t v92 = 112;
LABEL_141:
          *(void *)(a1 + v92) = v43;
          break;
        case 8:
          uint64_t v19 = v34;
          if (!v36 || (*(_WORD *)(a1 + 144) & 0x10) != 0)
          {
LABEL_123:
            char v91 = PBReaderSkipValueWithTag();
            char v16 = v120;
            goto LABEL_124;
          }
          uint64_t v21 = v33;
          if (v31 == 2)
          {
            int v83 = PBReaderPlaceMark();
            id v6 = (int *)MEMORY[0x1E4F940E0];
            if (!v83) {
              goto LABEL_188;
            }
            while (*(void *)(v3 + *v18) < *(void *)(v3 + *v6) && !*(unsigned char *)(v3 + *v19))
            {
              char v84 = 0;
              unsigned int v85 = 0;
              uint64_t v86 = 0;
              while (1)
              {
                uint64_t v87 = *v18;
                uint64_t v88 = *(void *)(v3 + v87);
                unint64_t v89 = v88 + 1;
                if (v88 == -1 || v89 > *(void *)(v3 + *v6)) {
                  break;
                }
                char v90 = *(unsigned char *)(*(void *)(v3 + *v21) + v88);
                *(void *)(v3 + v87) = v89;
                v86 |= (unint64_t)(v90 & 0x7F) << v84;
                if (v90 < 0)
                {
                  v84 += 7;
                  BOOL v29 = v85++ >= 9;
                  if (!v29) {
                    continue;
                  }
                }
                goto LABEL_121;
              }
              *(unsigned char *)(v3 + *v19) = 1;
LABEL_121:
              PBRepeatedUInt64Add();
            }
LABEL_128:
            PBReaderRecallMark();
          }
          else
          {
            char v108 = 0;
            unsigned int v109 = 0;
            uint64_t v110 = 0;
            id v6 = (int *)MEMORY[0x1E4F940E0];
            while (1)
            {
              uint64_t v111 = *v18;
              uint64_t v112 = *(void *)(v3 + v111);
              unint64_t v113 = v112 + 1;
              if (v112 == -1 || v113 > *(void *)(v3 + *v6)) {
                break;
              }
              char v114 = *(unsigned char *)(*(void *)(v3 + *v21) + v112);
              *(void *)(v3 + v111) = v113;
              v110 |= (unint64_t)(v114 & 0x7F) << v108;
              if (v114 < 0)
              {
                v108 += 7;
                BOOL v29 = v109++ >= 9;
                if (!v29) {
                  continue;
                }
              }
              goto LABEL_166;
            }
LABEL_165:
            *(unsigned char *)(v3 + *v19) = 1;
LABEL_166:
            PBRepeatedUInt64Add();
          }
LABEL_167:
          char v16 = v120;
          break;
        default:
          if ((v119 & 1) == 0 || (*(_WORD *)(a1 + 144) & 8) != 0)
          {
            char v91 = PBReaderSkipValueWithTag();
            char v16 = v120;
            uint64_t v19 = v34;
LABEL_124:
            uint64_t v21 = v33;
            id v6 = (int *)MEMORY[0x1E4F940E0];
            if ((v91 & 1) == 0)
            {
              int v121 = 0;
              goto LABEL_169;
            }
          }
          else
          {
            if (!*(void *)(a1 + 16))
            {
              id v48 = objc_alloc_init(MEMORY[0x1E4F940B0]);
              uint64_t v49 = *(void **)(a1 + 16);
              *(void *)(a1 + 16) = v48;
            }
            int v50 = PBUnknownFieldAdd();
            char v16 = v120;
            uint64_t v19 = v34;
            uint64_t v21 = v33;
            id v6 = (int *)MEMORY[0x1E4F940E0];
            if (!v50)
            {
              int v121 = 0;
              goto LABEL_171;
            }
          }
          break;
      }
    }
    while (v122 & 1 | (v7 != 0) && *(void *)(v3 + *v18) < *(void *)(v3 + *v6));
    int v121 = 1;
LABEL_169:
    char v20 = v119;
LABEL_170:
    if (v20) {
LABEL_171:
    }
      *(_WORD *)(a1 + 144) |= 8u;
    if (v16 & 1 | ((v121 & 1) == 0))
    {
      *(_WORD *)(a1 + 144) |= 0x100u;
      *(_WORD *)(a1 + 144) |= 0x80u;
      *(_WORD *)(a1 + 144) |= 0x20u;
      *(_WORD *)(a1 + 144) |= 0x40u;
      *(_WORD *)(a1 + 144) |= 0x10u;
    }
    else if (v17)
    {
      while (1)
      {
        int v115 = *v17++;
        __int16 v116 = 256;
        switch(v115)
        {
          case 0:
            goto LABEL_181;
          case 2:
            goto LABEL_180;
          case 3:
            __int16 v116 = 128;
            goto LABEL_180;
          case 4:
            __int16 v116 = 32;
            goto LABEL_180;
          case 5:
            __int16 v116 = 64;
            goto LABEL_180;
          case 8:
            __int16 v116 = 16;
LABEL_180:
            *(_WORD *)(a1 + 144) |= v116;
            break;
          default:
            continue;
        }
      }
    }
LABEL_181:
    if (v121)
    {
      unint64_t v3 = *(unsigned char *)(v3 + *v19) == 0;
      if ((v16 & 1) == 0) {
        return v3;
      }
      goto LABEL_185;
    }
    unint64_t v3 = 0;
    if (v16)
    {
LABEL_185:
      uint64_t v117 = *(void **)(a1 + 8);
      *(void *)(a1 + 8) = 0;
    }
  }
  return v3;
}

void sub_18901F6B8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18901FCB0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18901FD7C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOPDAutocompleteEntryCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  [*(id *)(a1 + 88) readAll:1];
  [*(id *)(a1 + 80) readAll:1];
  [*(id *)(a1 + 128) readAll:1];
  [*(id *)(a1 + 40) readAll:1];
  [*(id *)(a1 + 24) readAll:1];
  [*(id *)(a1 + 48) readAll:1];
  [*(id *)(a1 + 32) readAll:1];
  [*(id *)(a1 + 96) readAll:1];
  [*(id *)(a1 + 56) readAll:1];
  [*(id *)(a1 + 72) readAll:1];
  -[GEOPDRetainedSearchMetadata readAll:](*(void *)(a1 + 136), 1);
  [*(id *)(a1 + 104) readAll:1];
  [*(id *)(a1 + 64) readAll:1];
  id v2 = *(void **)(a1 + 112);

  return [v2 readAll:1];
}

uint64_t GEOETAResponseReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 116))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOETAResponseReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 120));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 112) = [v8 position];
  *(_DWORD *)(a1 + 116) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOETAResponseReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOETAResponseReadAllFrom_initialTag;
  }
  uint64_t Specified = GEOETAResponseReadSpecified(a1, (uint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOETAResponseCallReadAllRecursiveWithoutSynchronized(a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 120));
  return Specified;
}

void sub_189020028(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOETAResponseReadSpecified(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 120));
  id v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 116);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 112)];
  uint64_t v7 = v6;
  uint64_t v8 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  unsigned int v13 = *(unsigned __int16 *)(a1 + 128);
  unsigned int v14 = ((v13 >> 3) & 1)
      + ((v13 >> 10) & 1)
      + ((v13 >> 1) & 1)
      + (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16((uint16x4_t)vdup_n_s16(v13), (uint16x4_t)0xFFF9FFFEFFF8FFF7), (int8x8_t)0x1000100010001))+ ((v13 >> 6) & 1)+ ((v13 >> 4) & 1)+ ((v13 >> 5) & 1));
  while (2)
  {
    uint64_t v15 = 1;
    uint64_t v16 = 1;
    uint64_t v17 = 1;
    switch(a3[v8])
    {
      case -4:
        ++v14;
        goto LABEL_8;
      case -3:
        char v9 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v16 = v11;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v18 = v14 > 6;
        char v19 = v18 & ~(_BYTE)v12 | v10;
        unsigned __int8 v20 = v18 | v12;
        char v63 = v19;
        char v64 = v20 | v19;
        if ((v20 | v9)) {
          uint64_t v21 = 0;
        }
        else {
          uint64_t v21 = a3;
        }
        char v65 = (v21 == 0) | v20;
        BOOL v66 = v20;
        char v22 = (int *)MEMORY[0x1E4F940E8];
        unsigned int v23 = (int *)MEMORY[0x1E4F940C8];
        unint64_t v24 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v14;
LABEL_7:
        uint64_t v15 = v10;
LABEL_8:
        uint64_t v16 = v11;
        uint64_t v17 = v12;
LABEL_10:
        ++v8;
        uint64_t v10 = v15;
        uint64_t v11 = v16;
        uint64_t v12 = v17;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v22) >= *(void *)(v3 + *v7) || *(unsigned char *)(v3 + *v23)) {
      goto LABEL_121;
    }
    char v25 = 0;
    unsigned int v26 = 0;
    unint64_t v27 = 0;
    while (1)
    {
      uint64_t v28 = *v22;
      uint64_t v29 = *(void *)(v3 + v28);
      unint64_t v30 = v29 + 1;
      if (v29 == -1 || v30 > *(void *)(v3 + *v7)) {
        break;
      }
      char v31 = *(unsigned char *)(*(void *)(v3 + *v24) + v29);
      *(void *)(v3 + v28) = v30;
      v27 |= (unint64_t)(v31 & 0x7F) << v25;
      if ((v31 & 0x80) == 0) {
        goto LABEL_25;
      }
      v25 += 7;
      BOOL v32 = v26++ >= 9;
      if (v32)
      {
        unint64_t v27 = 0;
        int v33 = *(unsigned __int8 *)(v3 + *v23);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v23) = 1;
LABEL_25:
    int v33 = *(unsigned __int8 *)(v3 + *v23);
    if (*(unsigned char *)(v3 + *v23)) {
      unint64_t v27 = 0;
    }
LABEL_27:
    if (v33 || (v27 & 7) == 4)
    {
LABEL_121:
      int v62 = 1;
      goto LABEL_122;
    }
    unint64_t v35 = v27 >> 3;
    BOOL v36 = v66;
    if ((v65 & 1) == 0)
    {
      BOOL v37 = v21;
      do
      {
        int v39 = *v37++;
        int v38 = v39;
        BOOL v36 = v39 != 0;
        if (v39) {
          BOOL v40 = v38 == v35;
        }
        else {
          BOOL v40 = 1;
        }
      }
      while (!v40);
    }
    switch((int)v35)
    {
      case 1:
        if ((v9 & 1) == 0) {
          goto LABEL_100;
        }
        char v41 = 0;
        unsigned int v42 = 0;
        uint64_t v43 = 0;
        *(_WORD *)(a1 + 128) |= 1u;
        while (1)
        {
          uint64_t v44 = *v22;
          uint64_t v45 = *(void *)(v3 + v44);
          unint64_t v46 = v45 + 1;
          if (v45 == -1 || v46 > *(void *)(v3 + *v7)) {
            break;
          }
          char v47 = *(unsigned char *)(*(void *)(v3 + *v24) + v45);
          *(void *)(v3 + v44) = v46;
          v43 |= (unint64_t)(v47 & 0x7F) << v41;
          if ((v47 & 0x80) == 0) {
            goto LABEL_103;
          }
          v41 += 7;
          BOOL v32 = v42++ >= 9;
          if (v32)
          {
            LODWORD(v43) = 0;
            goto LABEL_105;
          }
        }
        *(unsigned char *)(v3 + *v23) = 1;
LABEL_103:
        if (*(unsigned char *)(v3 + *v23)) {
          LODWORD(v43) = 0;
        }
LABEL_105:
        *(_DWORD *)(a1 + 124) = v43;
        goto LABEL_120;
      case 2:
        if (!v36 || (*(_WORD *)(a1 + 128) & 0x100) != 0) {
          goto LABEL_100;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_146;
        }
        id v48 = objc_alloc_init(GEOETAResult);
        if (!GEOETAResultReadAllFrom((uint64_t)v48, (void *)v3, v11 & 1)) {
          goto LABEL_145;
        }
        PBReaderRecallMark();
        -[GEOETAResponse _addNoFlagsEtaResult:](a1, v48);
        goto LABEL_78;
      case 3:
        if (!v36) {
          goto LABEL_100;
        }
        if ((*(_WORD *)(a1 + 128) & 0x200) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_146;
          }
          __int16 v56 = *(_WORD *)(a1 + 128) << 6;
          goto LABEL_118;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_146;
        }
        id v48 = objc_alloc_init(GEOPlaceSearchResponse);
        if (!GEOPlaceSearchResponseReadAllFrom((uint64_t)v48, (void *)v3, v11 & 1)) {
          goto LABEL_145;
        }
        PBReaderRecallMark();
        uint64_t v49 = 96;
        goto LABEL_92;
      case 4:
        if (!v36 || (*(_WORD *)(a1 + 128) & 4) != 0) {
          goto LABEL_100;
        }
        if (!PBReaderPlaceMark()) {
          goto LABEL_146;
        }
        -[GEOETAResponse _reserveProblemDetails:](a1, 1uLL);
        if (!GEOProblemDetailReadAllFrom(*(void *)(a1 + 24) + 12 * *(void *)(a1 + 32), v3)) {
          goto LABEL_146;
        }
        PBReaderRecallMark();
        ++*(void *)(a1 + 32);
        goto LABEL_119;
      case 5:
        if (!v36) {
          goto LABEL_100;
        }
        if ((*(_WORD *)(a1 + 128) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_146;
          }
          __int16 v56 = *(_WORD *)(a1 + 128) << 8;
          goto LABEL_118;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_146;
        }
        id v48 = objc_alloc_init(GEOETAResult);
        if (!GEOETAResultReadAllFrom((uint64_t)v48, (void *)v3, v11 & 1)) {
          goto LABEL_145;
        }
        PBReaderRecallMark();
        uint64_t v49 = 80;
        goto LABEL_92;
      case 6:
        if (!v36 || (*(_WORD *)(a1 + 128) & 0x40) != 0) {
          goto LABEL_100;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_146;
        }
        id v48 = objc_alloc_init(GEOETAResult);
        if (!GEOETAResultReadAllFrom((uint64_t)v48, (void *)v3, v11 & 1)) {
          goto LABEL_145;
        }
        PBReaderRecallMark();
        -[GEOETAResponse _addNoFlagsEtaResultReferencePointDestination:](a1, v48);
LABEL_78:

        goto LABEL_119;
      case 7:
        if (!v36) {
          goto LABEL_100;
        }
        if ((*(_WORD *)(a1 + 128) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_146;
          }
          __int16 v56 = *(_WORD *)(a1 + 128) << 11;
          goto LABEL_118;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_146;
        }
        id v48 = objc_alloc_init(GEOPDDatasetABStatus);
        if (!GEOPDDatasetABStatusReadAllFrom((uint64_t)v48, (void *)v3)) {
          goto LABEL_145;
        }
        PBReaderRecallMark();
        uint64_t v49 = 56;
        goto LABEL_92;
      case 8:
        if (!v36) {
          goto LABEL_100;
        }
        if ((*(_WORD *)(a1 + 128) & 0x20) == 0)
        {
          uint64_t v50 = PBReaderReadString();
          uint64_t v51 = *(void **)(a1 + 64);
          *(void *)(a1 + 64) = v50;
          goto LABEL_93;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_146;
        }
        __int16 v56 = *(_WORD *)(a1 + 128) << 10;
        goto LABEL_118;
      case 9:
        if (!v36) {
          goto LABEL_100;
        }
        if ((*(_WORD *)(a1 + 128) & 0x400) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_146;
          }
          __int16 v56 = 32 * *(_WORD *)(a1 + 128);
LABEL_118:
          v8 += v56 >> 15;
LABEL_119:
          unsigned int v23 = (int *)MEMORY[0x1E4F940C8];
          uint64_t v7 = (int *)MEMORY[0x1E4F940E0];
          unint64_t v24 = (int *)MEMORY[0x1E4F940B8];
LABEL_120:
          if (!(v64 & 1 | (v8 != 0))) {
            goto LABEL_121;
          }
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_146;
        }
        id v48 = objc_alloc_init(GEOCommonResponseAttributes);
        if (GEOCommonResponseAttributesReadAllFrom((uint64_t)v48, (void *)v3))
        {
          PBReaderRecallMark();
          uint64_t v49 = 104;
LABEL_92:
          uint64_t v51 = *(void **)(a1 + v49);
          *(void *)(a1 + v49) = v48;
LABEL_93:

          --v8;
          goto LABEL_119;
        }
LABEL_145:

LABEL_146:
        int v62 = 0;
        unsigned int v23 = (int *)MEMORY[0x1E4F940C8];
LABEL_122:
        if (v63) {
LABEL_123:
        }
          *(_WORD *)(a1 + 128) |= 2u;
        if (v66 || (v62 & 1) == 0)
        {
          *(_WORD *)(a1 + 128) |= 0x100u;
          *(_WORD *)(a1 + 128) |= 0x200u;
          *(_WORD *)(a1 + 128) |= 4u;
          *(_WORD *)(a1 + 128) |= 0x80u;
          *(_WORD *)(a1 + 128) |= 0x40u;
          *(_WORD *)(a1 + 128) |= 0x10u;
          *(_WORD *)(a1 + 128) |= 0x20u;
          *(_WORD *)(a1 + 128) |= 0x400u;
          *(_WORD *)(a1 + 128) |= 8u;
        }
        else if (v21)
        {
          while (1)
          {
            int v59 = *v21++;
            int v58 = v59;
            __int16 v57 = 256;
            switch(v59)
            {
              case 0:
                goto LABEL_139;
              case 1:
                continue;
              case 2:
                goto LABEL_137;
              case 3:
                __int16 v57 = 512;
                goto LABEL_137;
              case 4:
                __int16 v57 = 4;
                goto LABEL_137;
              case 5:
                __int16 v57 = 128;
                goto LABEL_137;
              case 6:
                __int16 v57 = 64;
                goto LABEL_137;
              case 7:
                __int16 v57 = 16;
                goto LABEL_137;
              case 8:
                __int16 v57 = 32;
                goto LABEL_137;
              case 9:
                __int16 v57 = 1024;
                goto LABEL_137;
              default:
                if (v58 != 1051) {
                  continue;
                }
                __int16 v57 = 8;
LABEL_137:
                *(_WORD *)(a1 + 128) |= v57;
                break;
            }
          }
        }
LABEL_139:
        if (v62) {
          uint64_t v3 = *(unsigned char *)(v3 + *v23) == 0;
        }
        else {
          uint64_t v3 = 0;
        }
        if (v66)
        {
          unint64_t v60 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      default:
        if (v35 == 1051)
        {
          if (!v36) {
            goto LABEL_100;
          }
          if ((*(_WORD *)(a1 + 128) & 8) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_146;
            }
            __int16 v56 = *(_WORD *)(a1 + 128) << 12;
            goto LABEL_118;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_146;
          }
          id v48 = objc_alloc_init(GEOClientMetrics);
          if (!GEOClientMetricsReadAllFrom((uint64_t)v48, (void *)v3, v11 & 1)) {
            goto LABEL_145;
          }
          PBReaderRecallMark();
          uint64_t v49 = 48;
          goto LABEL_92;
        }
        if ((v63 & 1) == 0 || (*(_WORD *)(a1 + 128) & 2) != 0)
        {
LABEL_100:
          char v55 = PBReaderSkipValueWithTag();
          unint64_t v24 = (int *)MEMORY[0x1E4F940B8];
          uint64_t v7 = (int *)MEMORY[0x1E4F940E0];
          unsigned int v23 = (int *)MEMORY[0x1E4F940C8];
          if ((v55 & 1) == 0)
          {
            int v62 = 0;
            goto LABEL_122;
          }
          goto LABEL_120;
        }
        if (!*(void *)(a1 + 16))
        {
          id v52 = objc_alloc_init(MEMORY[0x1E4F940B0]);
          uint64_t v53 = *(void **)(a1 + 16);
          *(void *)(a1 + 16) = v52;
        }
        int v54 = PBUnknownFieldAdd();
        unsigned int v23 = (int *)MEMORY[0x1E4F940C8];
        uint64_t v7 = (int *)MEMORY[0x1E4F940E0];
        unint64_t v24 = (int *)MEMORY[0x1E4F940B8];
        if (!v54)
        {
          int v62 = 0;
          goto LABEL_123;
        }
        goto LABEL_120;
    }
  }
}

unint64_t GEOETAResultReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 52))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOETAResultReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = [v8 position];
  *(_DWORD *)(a1 + 52) = [v8 length];
  if (a3) {
    char v9 = (int *)&GEOETAResultReadAllFrom_recursiveTag;
  }
  else {
    char v9 = (int *)&GEOETAResultReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOETAResultReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOETAResultCallReadAllRecursiveWithoutSynchronized((id *)a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return Specified;
}

void sub_189020C78(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOETAResultReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  id v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 52);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 48)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = (const __int16 *)(a1 + 76);
  uint16x4_t v13 = (uint16x4_t)vld1_dup_s16(v12);
  int16x4_t v14 = (int16x4_t)vand_s8((int8x8_t)vshl_u16(v13, (uint16x4_t)0xFFFCFFFBFFFAFFF9), (int8x8_t)0x1000100010001);
  v14.i16[0] = vaddv_s16(v14);
  unsigned int v15 = v14.i32[0];
  while (2)
  {
    uint64_t v16 = 1;
    uint64_t v17 = 1;
    uint64_t v18 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v15;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v17 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v19 = v15 > 1;
        char v20 = v19 & ~(_BYTE)v11 | v9;
        unsigned __int8 v21 = v19 | v11;
        char v80 = v20;
        char v81 = v8;
        char v82 = v21 | v20;
        if ((v21 | v8)) {
          char v22 = 0;
        }
        else {
          char v22 = a3;
        }
        char v83 = (v22 == 0) | v21;
        BOOL v84 = v21;
        unsigned int v23 = (int *)MEMORY[0x1E4F940E8];
        unint64_t v24 = (int *)MEMORY[0x1E4F940C8];
        char v25 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v15;
LABEL_7:
        uint64_t v16 = v9;
LABEL_8:
        uint64_t v17 = v10;
        uint64_t v18 = v11;
LABEL_10:
        ++v7;
        uint64_t v9 = v16;
        uint64_t v10 = v17;
        uint64_t v11 = v18;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v23) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v24)) {
      goto LABEL_116;
    }
    char v26 = 0;
    unsigned int v27 = 0;
    unint64_t v28 = 0;
    while (1)
    {
      uint64_t v29 = *v23;
      uint64_t v30 = *(void *)(v3 + v29);
      unint64_t v31 = v30 + 1;
      if (v30 == -1 || v31 > *(void *)(v3 + *v6)) {
        break;
      }
      char v32 = *(unsigned char *)(*(void *)(v3 + *v25) + v30);
      *(void *)(v3 + v29) = v31;
      v28 |= (unint64_t)(v32 & 0x7F) << v26;
      if ((v32 & 0x80) == 0) {
        goto LABEL_25;
      }
      v26 += 7;
      BOOL v33 = v27++ >= 9;
      if (v33)
      {
        unint64_t v28 = 0;
        int v34 = *(unsigned __int8 *)(v3 + *v24);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v24) = 1;
LABEL_25:
    int v34 = *(unsigned __int8 *)(v3 + *v24);
    if (*(unsigned char *)(v3 + *v24)) {
      unint64_t v28 = 0;
    }
LABEL_27:
    if (v34 || (v28 & 7) == 4)
    {
LABEL_116:
      int v78 = 1;
      goto LABEL_117;
    }
    unint64_t v36 = v28 >> 3;
    BOOL v37 = v84;
    if ((v83 & 1) == 0)
    {
      int v38 = v22;
      do
      {
        int v40 = *v38++;
        int v39 = v40;
        BOOL v37 = v40 != 0;
        if (v40) {
          BOOL v41 = v39 == v36;
        }
        else {
          BOOL v41 = 1;
        }
      }
      while (!v41);
    }
    switch((int)v36)
    {
      case 1:
        if ((v81 & 1) == 0) {
          goto LABEL_93;
        }
        char v42 = 0;
        unsigned int v43 = 0;
        uint64_t v44 = 0;
        *(_WORD *)(a1 + 76) |= 8u;
        while (1)
        {
          uint64_t v45 = *v23;
          uint64_t v46 = *(void *)(v3 + v45);
          unint64_t v47 = v46 + 1;
          if (v46 == -1 || v47 > *(void *)(v3 + *v6)) {
            break;
          }
          char v48 = *(unsigned char *)(*(void *)(v3 + *v25) + v46);
          *(void *)(v3 + v45) = v47;
          v44 |= (unint64_t)(v48 & 0x7F) << v42;
          if ((v48 & 0x80) == 0) {
            goto LABEL_96;
          }
          v42 += 7;
          BOOL v33 = v43++ >= 9;
          if (v33)
          {
            LODWORD(v44) = 0;
            goto LABEL_98;
          }
        }
        *(unsigned char *)(v3 + *v24) = 1;
LABEL_96:
        if (*(unsigned char *)(v3 + *v24)) {
          LODWORD(v44) = 0;
        }
LABEL_98:
        uint64_t v73 = 72;
        goto LABEL_111;
      case 2:
        if ((v81 & 1) == 0) {
          goto LABEL_93;
        }
        char v52 = 0;
        unsigned int v53 = 0;
        uint64_t v44 = 0;
        *(_WORD *)(a1 + 76) |= 4u;
        while (2)
        {
          uint64_t v54 = *v23;
          uint64_t v55 = *(void *)(v3 + v54);
          unint64_t v56 = v55 + 1;
          if (v55 == -1 || v56 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v24) = 1;
          }
          else
          {
            char v57 = *(unsigned char *)(*(void *)(v3 + *v25) + v55);
            *(void *)(v3 + v54) = v56;
            v44 |= (unint64_t)(v57 & 0x7F) << v52;
            if (v57 < 0)
            {
              v52 += 7;
              BOOL v33 = v53++ >= 9;
              if (v33)
              {
                LODWORD(v44) = 0;
                goto LABEL_102;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v24)) {
          LODWORD(v44) = 0;
        }
LABEL_102:
        uint64_t v73 = 68;
        goto LABEL_111;
      case 3:
        if ((v81 & 1) == 0) {
          goto LABEL_93;
        }
        char v58 = 0;
        unsigned int v59 = 0;
        uint64_t v44 = 0;
        *(_WORD *)(a1 + 76) |= 2u;
        while (2)
        {
          uint64_t v60 = *v23;
          uint64_t v61 = *(void *)(v3 + v60);
          unint64_t v62 = v61 + 1;
          if (v61 == -1 || v62 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v24) = 1;
          }
          else
          {
            char v63 = *(unsigned char *)(*(void *)(v3 + *v25) + v61);
            *(void *)(v3 + v60) = v62;
            v44 |= (unint64_t)(v63 & 0x7F) << v58;
            if (v63 < 0)
            {
              v58 += 7;
              BOOL v33 = v59++ >= 9;
              if (v33)
              {
                LODWORD(v44) = 0;
                goto LABEL_106;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v24)) {
          LODWORD(v44) = 0;
        }
LABEL_106:
        uint64_t v73 = 64;
        goto LABEL_111;
      case 4:
        if (!v37) {
          goto LABEL_93;
        }
        if ((*(_WORD *)(a1 + 76) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_134;
          }
          v7 += *(unsigned __int16 *)(a1 + 76) << 25 >> 31;
          goto LABEL_114;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_134;
        }
        char v64 = objc_alloc_init(GEOPlaceSearchResponse);
        if (GEOPlaceSearchResponseReadAllFrom((uint64_t)v64, (void *)v3, v10 & 1))
        {
          PBReaderRecallMark();
          char v65 = *(void **)(a1 + 32);
          *(void *)(a1 + 32) = v64;

          --v7;
LABEL_114:
          unint64_t v24 = (int *)MEMORY[0x1E4F940C8];
          goto LABEL_115;
        }
LABEL_133:

LABEL_134:
        int v78 = 0;
        uint64_t v79 = &OBJC_IVAR___GEOArrivalTimeAndDistanceInfo__distanceRemainingToEndOfRoute;
        unint64_t v24 = (int *)MEMORY[0x1E4F940C8];
LABEL_118:
        if (v80) {
LABEL_119:
        }
          *(_WORD *)(a1 + v79[368]) |= 0x10u;
        if (v84 || (v78 & 1) == 0)
        {
          *(_WORD *)(a1 + v79[368]) |= 0x40u;
          *(_WORD *)(a1 + v79[368]) |= 0x80u;
          *(_WORD *)(a1 + v79[368]) |= 0x20u;
        }
        else if (v22)
        {
          while (1)
          {
            int v74 = *v22++;
            __int16 v75 = 64;
            switch(v74)
            {
              case 0:
                goto LABEL_127;
              case 4:
                goto LABEL_126;
              case 6:
                __int16 v75 = 128;
                goto LABEL_126;
              case 7:
                __int16 v75 = 32;
LABEL_126:
                *(_WORD *)(a1 + v79[368]) |= v75;
                break;
              default:
                continue;
            }
          }
        }
LABEL_127:
        if (v78) {
          unint64_t v3 = *(unsigned char *)(v3 + *v24) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v84)
        {
          char v76 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      case 5:
        if ((v81 & 1) == 0) {
          goto LABEL_93;
        }
        char v66 = 0;
        unsigned int v67 = 0;
        uint64_t v44 = 0;
        *(_WORD *)(a1 + 76) |= 1u;
        while (2)
        {
          uint64_t v68 = *v23;
          uint64_t v69 = *(void *)(v3 + v68);
          unint64_t v70 = v69 + 1;
          if (v69 == -1 || v70 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v24) = 1;
          }
          else
          {
            char v71 = *(unsigned char *)(*(void *)(v3 + *v25) + v69);
            *(void *)(v3 + v68) = v70;
            v44 |= (unint64_t)(v71 & 0x7F) << v66;
            if (v71 < 0)
            {
              v66 += 7;
              BOOL v33 = v67++ >= 9;
              if (v33)
              {
                LODWORD(v44) = 0;
                goto LABEL_110;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v24)) {
          LODWORD(v44) = 0;
        }
LABEL_110:
        uint64_t v73 = 60;
LABEL_111:
        *(_DWORD *)(a1 + v73) = v44;
        goto LABEL_115;
      case 6:
        if (!v37 || (*(_WORD *)(a1 + 76) & 0x80) != 0) {
          goto LABEL_93;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_134;
        }
        char v64 = objc_alloc_init(GEOETAResultByType);
        if (!GEOETAResultByTypeReadAllFrom((uint64_t)v64, (void *)v3, v10 & 1)) {
          goto LABEL_133;
        }
        PBReaderRecallMark();
        -[GEOETAResult _addNoFlagsSortedETA:](a1, v64);
        goto LABEL_92;
      case 7:
        if (!v37 || (*(_WORD *)(a1 + 76) & 0x20) != 0) {
          goto LABEL_93;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_134;
        }
        char v64 = objc_alloc_init(GEOETARouteIncident);
        if (!GEOETARouteIncidentReadAllFrom((uint64_t)v64, (void *)v3, v10 & 1)) {
          goto LABEL_133;
        }
        PBReaderRecallMark();
        -[GEOETAResult _addNoFlagsEtaRouteIncident:](a1, v64);
LABEL_92:

        goto LABEL_114;
      default:
        if ((v80 & 1) == 0 || (*(_WORD *)(a1 + 76) & 0x10) != 0)
        {
LABEL_93:
          char v72 = PBReaderSkipValueWithTag();
          unint64_t v24 = (int *)MEMORY[0x1E4F940C8];
          if ((v72 & 1) == 0)
          {
            int v78 = 0;
LABEL_117:
            uint64_t v79 = &OBJC_IVAR___GEOArrivalTimeAndDistanceInfo__distanceRemainingToEndOfRoute;
            goto LABEL_118;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v49 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            uint64_t v50 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v49;
          }
          int v51 = PBUnknownFieldAdd();
          unint64_t v24 = (int *)MEMORY[0x1E4F940C8];
          if (!v51)
          {
            int v78 = 0;
            uint64_t v79 = &OBJC_IVAR___GEOArrivalTimeAndDistanceInfo__distanceRemainingToEndOfRoute;
            goto LABEL_119;
          }
        }
LABEL_115:
        if (!(v82 & 1 | (v7 != 0))) {
          goto LABEL_116;
        }
        continue;
    }
  }
}

unint64_t GEOETAResultByTypeReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 60))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOETAResultByTypeReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 56) = [v8 position];
  *(_DWORD *)(a1 + 60) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOETAResultByTypeReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOETAResultByTypeReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOETAResultByTypeReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOETAResultByTypeCallReadAllRecursiveWithoutSynchronized(a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return Specified;
}

void sub_1890217E8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOETAResultByTypeReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  id v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 60);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 56)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = (const __int16 *)(a1 + 104);
  uint16x4_t v13 = (uint16x4_t)vld1_dup_s16(v12);
  unint64_t v14 = *(void *)&vshl_u16(v13, (uint16x4_t)0xFFF6FFF4FFF3FFF5) & 0xFFC1FFC1FFC1FFC1;
  LOWORD(v14) = vaddv_s16((int16x4_t)v14);
  unsigned int v15 = v14;
  while (2)
  {
    uint64_t v16 = 1;
    uint64_t v17 = 1;
    uint64_t v18 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v15;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v17 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v19 = v15 > 1;
        char v20 = v19 | v11;
        char v116 = v19 & ~(_BYTE)v11 | v9;
        char v119 = v19 | v11 | v116;
        if (((v19 | v11) | v8)) {
          unsigned __int8 v21 = 0;
        }
        else {
          unsigned __int8 v21 = a3;
        }
        char v22 = (int *)MEMORY[0x1E4F940E8];
        char v120 = (v21 == 0) | v20;
        unsigned int v23 = (int *)MEMORY[0x1E4F940C8];
        unint64_t v24 = &OBJC_IVAR___GEORPFeedbackComponent__unknownFields;
        char v25 = (int *)MEMORY[0x1E4F940B8];
        char v117 = v8;
        char v118 = v19 | v11;
        break;
      default:
        ++v15;
LABEL_7:
        uint64_t v16 = v9;
LABEL_8:
        uint64_t v17 = v10;
        uint64_t v18 = v11;
LABEL_10:
        ++v7;
        uint64_t v9 = v16;
        uint64_t v10 = v17;
        uint64_t v11 = v18;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v22) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v23)) {
      goto LABEL_186;
    }
    char v26 = 0;
    unsigned int v27 = 0;
    unint64_t v28 = 0;
    while (1)
    {
      uint64_t v29 = *v22;
      uint64_t v30 = *(void *)(v3 + v29);
      unint64_t v31 = v30 + 1;
      if (v30 == -1 || v31 > *(void *)(v3 + *v6)) {
        break;
      }
      char v32 = *(unsigned char *)(*(void *)(v3 + *v25) + v30);
      *(void *)(v3 + v29) = v31;
      v28 |= (unint64_t)(v32 & 0x7F) << v26;
      if ((v32 & 0x80) == 0) {
        goto LABEL_25;
      }
      v26 += 7;
      BOOL v33 = v27++ >= 9;
      if (v33)
      {
        unint64_t v28 = 0;
        int v34 = *(unsigned __int8 *)(v3 + *v23);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v23) = 1;
LABEL_25:
    int v34 = *(unsigned __int8 *)(v3 + *v23);
    if (*(unsigned char *)(v3 + *v23)) {
      unint64_t v28 = 0;
    }
LABEL_27:
    if (v34 || (v28 & 7) == 4)
    {
LABEL_186:
      int v115 = 1;
      goto LABEL_187;
    }
    unint64_t v36 = v28 >> 3;
    BOOL v37 = v20;
    if ((v120 & 1) == 0)
    {
      int v38 = v21;
      do
      {
        int v40 = *v38++;
        int v39 = v40;
        BOOL v37 = v40 != 0;
        if (v40) {
          BOOL v41 = v39 == v36;
        }
        else {
          BOOL v41 = 1;
        }
      }
      while (!v41);
    }
    switch((int)v36)
    {
      case 1:
        if ((v8 & 1) == 0) {
          goto LABEL_138;
        }
        char v42 = 0;
        unsigned int v43 = 0;
        uint64_t v44 = 0;
        *(_WORD *)(a1 + v24[328]) |= 0x40u;
        while (1)
        {
          uint64_t v45 = *v22;
          uint64_t v46 = *(void *)(v3 + v45);
          unint64_t v47 = v46 + 1;
          if (v46 == -1 || v47 > *(void *)(v3 + *v6)) {
            break;
          }
          char v48 = *(unsigned char *)(*(void *)(v3 + *v25) + v46);
          *(void *)(v3 + v45) = v47;
          v44 |= (unint64_t)(v48 & 0x7F) << v42;
          if ((v48 & 0x80) == 0) {
            goto LABEL_141;
          }
          v42 += 7;
          BOOL v33 = v43++ >= 9;
          if (v33)
          {
            LODWORD(v44) = 0;
            goto LABEL_143;
          }
        }
        *(unsigned char *)(v3 + *v23) = 1;
LABEL_141:
        if (*(unsigned char *)(v3 + *v23)) {
          LODWORD(v44) = 0;
        }
LABEL_143:
        uint64_t v107 = 88;
        goto LABEL_176;
      case 2:
        if ((v8 & 1) == 0) {
          goto LABEL_138;
        }
        char v52 = 0;
        unsigned int v53 = 0;
        uint64_t v44 = 0;
        *(_WORD *)(a1 + v24[328]) |= 0x20u;
        while (2)
        {
          uint64_t v54 = *v22;
          uint64_t v55 = *(void *)(v3 + v54);
          unint64_t v56 = v55 + 1;
          if (v55 == -1 || v56 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v23) = 1;
          }
          else
          {
            char v57 = *(unsigned char *)(*(void *)(v3 + *v25) + v55);
            *(void *)(v3 + v54) = v56;
            v44 |= (unint64_t)(v57 & 0x7F) << v52;
            if (v57 < 0)
            {
              v52 += 7;
              BOOL v33 = v53++ >= 9;
              if (v33)
              {
                LODWORD(v44) = 0;
                goto LABEL_147;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v23)) {
          LODWORD(v44) = 0;
        }
LABEL_147:
        uint64_t v107 = 84;
        goto LABEL_176;
      case 3:
        if ((v8 & 1) == 0) {
          goto LABEL_138;
        }
        char v58 = 0;
        unsigned int v59 = 0;
        uint64_t v44 = 0;
        *(_WORD *)(a1 + v24[328]) |= 0x80u;
        while (2)
        {
          uint64_t v60 = *v22;
          uint64_t v61 = *(void *)(v3 + v60);
          unint64_t v62 = v61 + 1;
          if (v61 == -1 || v62 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v23) = 1;
          }
          else
          {
            char v63 = *(unsigned char *)(*(void *)(v3 + *v25) + v61);
            *(void *)(v3 + v60) = v62;
            v44 |= (unint64_t)(v63 & 0x7F) << v58;
            if (v63 < 0)
            {
              v58 += 7;
              BOOL v33 = v59++ >= 9;
              if (v33)
              {
                LODWORD(v44) = 0;
                goto LABEL_151;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v23)) {
          LODWORD(v44) = 0;
        }
LABEL_151:
        uint64_t v107 = 92;
        goto LABEL_176;
      case 4:
        if ((v8 & 1) == 0) {
          goto LABEL_138;
        }
        char v64 = 0;
        unsigned int v65 = 0;
        uint64_t v44 = 0;
        *(_WORD *)(a1 + v24[328]) |= 4u;
        while (2)
        {
          uint64_t v66 = *v22;
          uint64_t v67 = *(void *)(v3 + v66);
          unint64_t v68 = v67 + 1;
          if (v67 == -1 || v68 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v23) = 1;
          }
          else
          {
            char v69 = *(unsigned char *)(*(void *)(v3 + *v25) + v67);
            *(void *)(v3 + v66) = v68;
            v44 |= (unint64_t)(v69 & 0x7F) << v64;
            if (v69 < 0)
            {
              v64 += 7;
              BOOL v33 = v65++ >= 9;
              if (v33)
              {
                LODWORD(v44) = 0;
                goto LABEL_155;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v23)) {
          LODWORD(v44) = 0;
        }
LABEL_155:
        uint64_t v107 = 72;
        goto LABEL_176;
      case 5:
        if ((v8 & 1) == 0) {
          goto LABEL_138;
        }
        char v70 = 0;
        unsigned int v71 = 0;
        uint64_t v44 = 0;
        *(_WORD *)(a1 + v24[328]) |= 2u;
        while (2)
        {
          uint64_t v72 = *v22;
          uint64_t v73 = *(void *)(v3 + v72);
          unint64_t v74 = v73 + 1;
          if (v73 == -1 || v74 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v23) = 1;
          }
          else
          {
            char v75 = *(unsigned char *)(*(void *)(v3 + *v25) + v73);
            *(void *)(v3 + v72) = v74;
            v44 |= (unint64_t)(v75 & 0x7F) << v70;
            if (v75 < 0)
            {
              v70 += 7;
              BOOL v33 = v71++ >= 9;
              if (v33)
              {
                LODWORD(v44) = 0;
                goto LABEL_159;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v23)) {
          LODWORD(v44) = 0;
        }
LABEL_159:
        uint64_t v107 = 68;
        goto LABEL_176;
      case 6:
        if ((v8 & 1) == 0) {
          goto LABEL_138;
        }
        *(_WORD *)(a1 + v24[328]) |= 1u;
        uint64_t v76 = *v22;
        unint64_t v77 = *(void *)(v3 + v76);
        if (v77 <= 0xFFFFFFFFFFFFFFF7 && v77 + 8 <= *(void *)(v3 + *v6))
        {
          uint64_t v78 = *(void *)(*(void *)(v3 + *v25) + v77);
          *(void *)(v3 + v76) = v77 + 8;
        }
        else
        {
          *(unsigned char *)(v3 + *v23) = 1;
          uint64_t v78 = 0;
        }
        *(void *)(a1 + 24) = v78;
        goto LABEL_177;
      case 7:
        if ((v8 & 1) == 0) {
          goto LABEL_138;
        }
        char v79 = 0;
        unsigned int v80 = 0;
        uint64_t v44 = 0;
        *(_WORD *)(a1 + v24[328]) |= 0x200u;
        while (2)
        {
          uint64_t v81 = *v22;
          uint64_t v82 = *(void *)(v3 + v81);
          unint64_t v83 = v82 + 1;
          if (v82 == -1 || v83 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v23) = 1;
          }
          else
          {
            char v84 = *(unsigned char *)(*(void *)(v3 + *v25) + v82);
            *(void *)(v3 + v81) = v83;
            v44 |= (unint64_t)(v84 & 0x7F) << v79;
            if (v84 < 0)
            {
              v79 += 7;
              BOOL v33 = v80++ >= 9;
              if (v33)
              {
                LODWORD(v44) = 0;
                goto LABEL_163;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v23)) {
          LODWORD(v44) = 0;
        }
LABEL_163:
        uint64_t v107 = 100;
        goto LABEL_176;
      case 8:
        if ((v8 & 1) == 0) {
          goto LABEL_138;
        }
        char v85 = 0;
        unsigned int v86 = 0;
        uint64_t v44 = 0;
        *(_WORD *)(a1 + v24[328]) |= 0x100u;
        while (2)
        {
          uint64_t v87 = *v22;
          uint64_t v88 = *(void *)(v3 + v87);
          unint64_t v89 = v88 + 1;
          if (v88 == -1 || v89 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v23) = 1;
          }
          else
          {
            char v90 = *(unsigned char *)(*(void *)(v3 + *v25) + v88);
            *(void *)(v3 + v87) = v89;
            v44 |= (unint64_t)(v90 & 0x7F) << v85;
            if (v90 < 0)
            {
              v85 += 7;
              BOOL v33 = v86++ >= 9;
              if (v33)
              {
                LODWORD(v44) = 0;
                goto LABEL_167;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v23)) {
          LODWORD(v44) = 0;
        }
LABEL_167:
        uint64_t v107 = 96;
        goto LABEL_176;
      case 9:
        if ((v8 & 1) == 0) {
          goto LABEL_138;
        }
        char v91 = 0;
        unsigned int v92 = 0;
        uint64_t v44 = 0;
        *(_WORD *)(a1 + v24[328]) |= 0x10u;
        while (2)
        {
          uint64_t v93 = *v22;
          uint64_t v94 = *(void *)(v3 + v93);
          unint64_t v95 = v94 + 1;
          if (v94 == -1 || v95 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v23) = 1;
          }
          else
          {
            char v96 = *(unsigned char *)(*(void *)(v3 + *v25) + v94);
            *(void *)(v3 + v93) = v95;
            v44 |= (unint64_t)(v96 & 0x7F) << v91;
            if (v96 < 0)
            {
              v91 += 7;
              BOOL v33 = v92++ >= 9;
              if (v33)
              {
                LODWORD(v44) = 0;
                goto LABEL_171;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v23)) {
          LODWORD(v44) = 0;
        }
LABEL_171:
        uint64_t v107 = 80;
        goto LABEL_176;
      case 10:
        if (!v37 || (*(_WORD *)(a1 + v24[328]) & 0x2000) != 0) {
          goto LABEL_138;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_209;
        }
        uint64_t v97 = objc_alloc_init(GEOFormattedString);
        if (!GEOFormattedStringReadAllFrom((uint64_t)v97, (void *)v3, v10 & 1)) {
          goto LABEL_208;
        }
        PBReaderRecallMark();
        -[GEOETAResultByType _addNoFlagsSummaryForPredictedDestination:](a1, v97);

        goto LABEL_129;
      case 11:
        if (!v37) {
          goto LABEL_138;
        }
        if ((*(_WORD *)(a1 + v24[328]) & 0x800) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_209;
          }
          unint64_t v24 = &OBJC_IVAR___GEORPFeedbackComponent__unknownFields;
          __int16 v108 = 16 * *(_WORD *)(a1 + 104);
          goto LABEL_183;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_209;
        }
        uint64_t v97 = objc_alloc_init(GEORouteTrafficDetail);
        if (!GEORouteTrafficDetailReadAllFrom((uint64_t)v97, (void *)v3, v10 & 1)) {
          goto LABEL_208;
        }
        PBReaderRecallMark();
        uint64_t v98 = 32;
        goto LABEL_128;
      case 12:
        if (!v37) {
          goto LABEL_138;
        }
        if ((*(_WORD *)(a1 + v24[328]) & 0x1000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_209;
          }
          unint64_t v24 = &OBJC_IVAR___GEORPFeedbackComponent__unknownFields;
          __int16 v108 = 8 * *(_WORD *)(a1 + 104);
LABEL_183:
          v7 += v108 >> 15;
          char v8 = v117;
          char v20 = v118;
          unsigned int v23 = (int *)MEMORY[0x1E4F940C8];
          goto LABEL_177;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_209;
        }
        uint64_t v97 = objc_alloc_init(GEOShortTrafficSummary);
        if (GEOShortTrafficSummaryReadAllFrom((uint64_t)v97, (void *)v3, v10 & 1))
        {
          PBReaderRecallMark();
          uint64_t v98 = 40;
LABEL_128:
          unint64_t v99 = *(void **)(a1 + v98);
          *(void *)(a1 + v98) = v97;

          --v7;
LABEL_129:
          char v8 = v117;
          char v20 = v118;
          unsigned int v23 = (int *)MEMORY[0x1E4F940C8];
          unint64_t v24 = &OBJC_IVAR___GEORPFeedbackComponent__unknownFields;
LABEL_177:
          if (!(v119 & 1 | (v7 != 0))) {
            goto LABEL_186;
          }
          continue;
        }
LABEL_208:

LABEL_209:
        int v115 = 0;
        char v20 = v118;
        unsigned int v23 = (int *)MEMORY[0x1E4F940C8];
        unint64_t v24 = &OBJC_IVAR___GEORPFeedbackComponent__unknownFields;
LABEL_187:
        if (v116) {
LABEL_188:
        }
          *(_WORD *)(a1 + v24[328]) |= 0x400u;
        if (v20 & 1 | ((v115 & 1) == 0))
        {
          *(_WORD *)(a1 + v24[328]) |= 0x2000u;
          *(_WORD *)(a1 + v24[328]) |= 0x800u;
          *(_WORD *)(a1 + v24[328]) |= 0x1000u;
          goto LABEL_202;
        }
        if (v21)
        {
          while (2)
          {
            while (1)
            {
              int v110 = *v21++;
              int v109 = v110;
              BOOL v111 = v110 == 10;
              if (v110 > 10) {
                break;
              }
              if (v111)
              {
                __int16 v112 = 0x2000;
LABEL_200:
                *(_WORD *)(a1 + v24[328]) |= v112;
                continue;
              }
              if (!v109) {
                goto LABEL_202;
              }
            }
            if (v109 == 12)
            {
              __int16 v112 = 4096;
            }
            else
            {
              if (v109 != 11) {
                continue;
              }
              __int16 v112 = 2048;
            }
            goto LABEL_200;
          }
        }
LABEL_202:
        if (v115)
        {
          unint64_t v3 = *(unsigned char *)(v3 + *v23) == 0;
          if ((v20 & 1) == 0) {
            return v3;
          }
LABEL_206:
          unint64_t v113 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        else
        {
          unint64_t v3 = 0;
          if (v20) {
            goto LABEL_206;
          }
        }
        return v3;
      case 13:
        if ((v8 & 1) == 0) {
          goto LABEL_138;
        }
        char v100 = 0;
        unsigned int v101 = 0;
        uint64_t v44 = 0;
        *(_WORD *)(a1 + v24[328]) |= 8u;
        while (2)
        {
          uint64_t v102 = *v22;
          uint64_t v103 = *(void *)(v3 + v102);
          unint64_t v104 = v103 + 1;
          if (v103 == -1 || v104 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v23) = 1;
          }
          else
          {
            char v105 = *(unsigned char *)(*(void *)(v3 + *v25) + v103);
            *(void *)(v3 + v102) = v104;
            v44 |= (unint64_t)(v105 & 0x7F) << v100;
            if (v105 < 0)
            {
              v100 += 7;
              BOOL v33 = v101++ >= 9;
              if (v33)
              {
                LODWORD(v44) = 0;
                goto LABEL_175;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v23)) {
          LODWORD(v44) = 0;
        }
LABEL_175:
        uint64_t v107 = 76;
LABEL_176:
        *(_DWORD *)(a1 + v107) = v44;
        goto LABEL_177;
      default:
        if ((v116 & 1) == 0 || (*(_WORD *)(a1 + v24[328]) & 0x400) != 0)
        {
LABEL_138:
          char v106 = PBReaderSkipValueWithTag();
          char v8 = v117;
          char v20 = v118;
          unint64_t v24 = &OBJC_IVAR___GEORPFeedbackComponent__unknownFields;
          unsigned int v23 = (int *)MEMORY[0x1E4F940C8];
          if ((v106 & 1) == 0)
          {
            int v115 = 0;
            goto LABEL_187;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v49 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            uint64_t v50 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v49;
          }
          int v51 = PBUnknownFieldAdd();
          char v8 = v117;
          char v20 = v118;
          unsigned int v23 = (int *)MEMORY[0x1E4F940C8];
          unint64_t v24 = &OBJC_IVAR___GEORPFeedbackComponent__unknownFields;
          if (!v51)
          {
            int v115 = 0;
            goto LABEL_188;
          }
        }
        goto LABEL_177;
    }
  }
}

#error "1890225C8: too complex function (funcsize=7824)"

unint64_t GEOPDWifiMeasurementReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 60))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOPDWifiMeasurementReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 56) = [v8 position];
  *(_DWORD *)(a1 + 60) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOPDWifiMeasurementReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOPDWifiMeasurementReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOPDWifiMeasurementReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOPDWifiMeasurementCallReadAllRecursiveWithoutSynchronized(a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return Specified;
}

void sub_18902BC00(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDWifiMeasurementReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  id v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 60);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 56)];
  char v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = &OBJC_IVAR___GEOMapDataSubscriptionDownloadGroup__completedSubscriptions;
  int v13 = ((*(unsigned __int8 *)(a1 + 68) >> 3) & 1)
      + ((*(unsigned __int8 *)(a1 + 68) >> 4) & 1)
      + ((*(unsigned __int8 *)(a1 + 68) >> 2) & 1);
  while (2)
  {
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    uint64_t v16 = 1;
    switch(a3[v8])
    {
      case -4:
        ++v13;
        goto LABEL_8;
      case -3:
        char v7 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v15 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v17 = v13 != 0;
        int v18 = v17 & ~v11 | v9;
        int v19 = v17 | v11;
        if (((v17 | v11) | v7)) {
          char v20 = 0;
        }
        else {
          char v20 = a3;
        }
        unsigned __int8 v21 = (int *)MEMORY[0x1E4F940E8];
        BOOL v22 = v8 != 0;
        int v23 = 1;
        if (*(void *)(v3 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(v3 + *v6)) {
          goto LABEL_88;
        }
        char v64 = v17 & ~(_BYTE)v11 | v9;
        int v66 = v22 | v19 | v18;
        char v67 = (v20 == 0) | v19;
        unint64_t v24 = (int *)MEMORY[0x1E4F940C8];
        char v25 = (int *)MEMORY[0x1E4F940B8];
        char v65 = v17 | v11;
        break;
      default:
        ++v13;
LABEL_7:
        uint64_t v14 = v9;
LABEL_8:
        uint64_t v15 = v10;
        uint64_t v16 = v11;
LABEL_10:
        ++v8;
        uint64_t v9 = v14;
        uint64_t v10 = v15;
        uint64_t v11 = v16;
        continue;
    }
    break;
  }
  while (!*(unsigned char *)(v3 + *v24))
  {
    char v26 = 0;
    unsigned int v27 = 0;
    unint64_t v28 = 0;
    while (1)
    {
      uint64_t v29 = *v21;
      uint64_t v30 = *(void *)(v3 + v29);
      unint64_t v31 = v30 + 1;
      if (v30 == -1 || v31 > *(void *)(v3 + *v6)) {
        break;
      }
      char v32 = *(unsigned char *)(*(void *)(v3 + *v25) + v30);
      *(void *)(v3 + v29) = v31;
      v28 |= (unint64_t)(v32 & 0x7F) << v26;
      if ((v32 & 0x80) == 0) {
        goto LABEL_25;
      }
      v26 += 7;
      BOOL v33 = v27++ >= 9;
      if (v33)
      {
        unint64_t v28 = 0;
        int v34 = *(unsigned __int8 *)(v3 + *v24);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v24) = 1;
LABEL_25:
    int v34 = *(unsigned __int8 *)(v3 + *v24);
    if (*(unsigned char *)(v3 + *v24)) {
      unint64_t v28 = 0;
    }
LABEL_27:
    if (v34 || (v28 & 7) == 4) {
      break;
    }
    unint64_t v36 = v28 >> 3;
    BOOL v37 = v19;
    if ((v67 & 1) == 0)
    {
      int v38 = v20;
      do
      {
        int v40 = *v38++;
        int v39 = v40;
        BOOL v37 = v40 != 0;
        if (v40) {
          BOOL v41 = v39 == v36;
        }
        else {
          BOOL v41 = 1;
        }
      }
      while (!v41);
    }
    switch((int)v36)
    {
      case 1:
        if (!v37 || (*(unsigned char *)(a1 + 68) & 8) != 0) {
          goto LABEL_72;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_107;
        }
        char v42 = objc_alloc_init(GEOLocation);
        if (!GEOLocationReadAllFrom((uint64_t)v42, (void *)v3, v10 & 1)) {
          goto LABEL_106;
        }
        PBReaderRecallMark();
        -[GEOPDWifiMeasurement _addNoFlagsLocation:](a1, v42);
        goto LABEL_55;
      case 2:
        if (!v37 || (*(unsigned char *)(a1 + 68) & 0x10) != 0) {
          goto LABEL_72;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_107;
        }
        char v42 = objc_alloc_init(GEOPDWifiAccessPoint);
        if (!GEOPDWifiAccessPointReadAllFrom((uint64_t)v42, (void *)v3))
        {
LABEL_106:

LABEL_107:
          int v23 = 0;
          uint64_t v12 = &OBJC_IVAR___GEOMapDataSubscriptionDownloadGroup__completedSubscriptions;
          LOBYTE(v19) = v65;
          goto LABEL_87;
        }
        PBReaderRecallMark();
        -[GEOPDWifiMeasurement _addNoFlagsWifiAccessPoint:](a1, v42);
LABEL_55:

        LOBYTE(v19) = v65;
        unint64_t v24 = (int *)MEMORY[0x1E4F940C8];
        goto LABEL_83;
      case 3:
        if ((v7 & 1) == 0) {
          goto LABEL_72;
        }
        char v45 = 0;
        unsigned int v46 = 0;
        uint64_t v47 = 0;
        *(unsigned char *)(a1 + 68) |= 1u;
        while (2)
        {
          uint64_t v48 = *v21;
          uint64_t v49 = *(void *)(v3 + v48);
          unint64_t v50 = v49 + 1;
          if (v49 == -1 || v50 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v24) = 1;
          }
          else
          {
            char v51 = *(unsigned char *)(*(void *)(v3 + *v25) + v49);
            *(void *)(v3 + v48) = v50;
            v47 |= (unint64_t)(v51 & 0x7F) << v45;
            if (v51 < 0)
            {
              v45 += 7;
              BOOL v33 = v46++ >= 9;
              if (v33)
              {
                uint64_t v47 = 0;
                goto LABEL_77;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v24)) {
          uint64_t v47 = 0;
        }
LABEL_77:
        uint64_t v58 = 24;
        goto LABEL_82;
      case 4:
        if ((v7 & 1) == 0) {
          goto LABEL_72;
        }
        char v52 = 0;
        unsigned int v53 = 0;
        uint64_t v47 = 0;
        *(unsigned char *)(a1 + 68) |= 2u;
        while (2)
        {
          uint64_t v54 = *v21;
          uint64_t v55 = *(void *)(v3 + v54);
          unint64_t v56 = v55 + 1;
          if (v55 == -1 || v56 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v24) = 1;
          }
          else
          {
            char v57 = *(unsigned char *)(*(void *)(v3 + *v25) + v55);
            *(void *)(v3 + v54) = v56;
            v47 |= (unint64_t)(v57 & 0x7F) << v52;
            if (v57 < 0)
            {
              v52 += 7;
              BOOL v33 = v53++ >= 9;
              if (v33)
              {
                uint64_t v47 = 0;
                goto LABEL_81;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v24)) {
          uint64_t v47 = 0;
        }
LABEL_81:
        uint64_t v58 = 32;
LABEL_82:
        *(void *)(a1 + v58) = v47;
        goto LABEL_83;
      default:
        if ((v64 & 1) == 0 || (*(unsigned char *)(a1 + 68) & 4) != 0)
        {
LABEL_72:
          int v23 = PBReaderSkipValueWithTag();
          unint64_t v24 = (int *)MEMORY[0x1E4F940C8];
          LOBYTE(v19) = v65;
          if ((v23 & v66 & 1) == 0) {
            goto LABEL_86;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v43 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            uint64_t v44 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v43;
          }
          int v23 = PBUnknownFieldAdd();
          LOBYTE(v19) = v65;
          unint64_t v24 = (int *)MEMORY[0x1E4F940C8];
          if (!v23)
          {
            uint64_t v12 = &OBJC_IVAR___GEOMapDataSubscriptionDownloadGroup__completedSubscriptions;
            goto LABEL_89;
          }
LABEL_83:
          if ((v66 & 1) == 0) {
            goto LABEL_85;
          }
        }
        if (*(void *)(v3 + *v21) >= *(void *)(v3 + *v6)) {
          goto LABEL_85;
        }
        break;
    }
  }
LABEL_85:
  int v23 = 1;
LABEL_86:
  uint64_t v12 = &OBJC_IVAR___GEOMapDataSubscriptionDownloadGroup__completedSubscriptions;
LABEL_87:
  LOBYTE(v18) = v64;
LABEL_88:
  if (v18) {
LABEL_89:
  }
    *(unsigned char *)(a1 + v12[680]) |= 4u;
  if (!(v19 & 1 | ((v23 & 1) == 0)))
  {
    if (!v20) {
      goto LABEL_100;
    }
    while (1)
    {
      int v61 = *v20++;
      int v60 = v61;
      if (v61 == 1) {
        break;
      }
      if (v60 == 2)
      {
        char v59 = 16;
LABEL_96:
        *(unsigned char *)(a1 + v12[680]) |= v59;
      }
      else if (!v60)
      {
        goto LABEL_100;
      }
    }
    char v59 = 8;
    goto LABEL_96;
  }
  *(unsigned char *)(a1 + v12[680]) |= 8u;
  *(unsigned char *)(a1 + v12[680]) |= 0x10u;
LABEL_100:
  if (v23)
  {
    unint64_t v3 = *(unsigned char *)(v3 + (int)*MEMORY[0x1E4F940C8]) == 0;
    if ((v19 & 1) == 0) {
      return v3;
    }
    goto LABEL_104;
  }
  unint64_t v3 = 0;
  if (v19)
  {
LABEL_104:
    unint64_t v62 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  return v3;
}

void sub_18902C964(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEODurationInNavigationModeIsValid(char *a1)
{
  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  id v2 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    id v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          uint64_t v14 = *v4;
          int v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      uint64_t v14 = *v4;
      int v15 = a1[v14];
      if (a1[v14]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v16 = v8 & 7;
      if (v15 || v16 == 4) {
        break;
      }
      if ((v8 >> 3) == 2)
      {
        if (v16 != 1) {
          goto LABEL_39;
        }
        uint64_t v24 = *v2;
        unint64_t v25 = *(void *)&a1[v24];
        if (v25 <= 0xFFFFFFFFFFFFFFF7 && (unint64_t v26 = v25 + 8, v26 <= *(void *)&a1[*v3])) {
          *(void *)&a1[v24] = v26;
        }
        else {
          a1[v14] = 1;
        }
      }
      else if ((v8 >> 3) == 1)
      {
        if ((v8 & 7) != 0) {
          goto LABEL_39;
        }
        unsigned int v18 = 0;
        while (1)
        {
          uint64_t v19 = *v2;
          uint64_t v20 = *(void *)&a1[v19];
          unint64_t v21 = v20 + 1;
          if (v20 == -1 || v21 > *(void *)&a1[*v3]) {
            break;
          }
          int v22 = *(char *)(*(void *)&a1[*v5] + v20);
          *(void *)&a1[v19] = v21;
          if (v22 < 0 && v18++ <= 8) {
            continue;
          }
          goto LABEL_36;
        }
        a1[*v4] = 1;
      }
      else if (!PBReaderSkipValueWithTag())
      {
LABEL_39:
        BOOL v27 = 0;
        goto LABEL_38;
      }
LABEL_36:
      ;
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v27 = a1[*v4] == 0;
LABEL_38:
  PBReaderRecallMark();
  return v27;
}

void sub_18902CE00(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDJoeColorReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 68))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOPDJoeColorReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 72));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 64) = [v8 position];
  *(_DWORD *)(a1 + 68) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOPDJoeColorReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOPDJoeColorReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOPDJoeColorReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 72));
  return Specified;
}

void sub_18902CF8C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDJoeColorReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 72));
  char v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 68);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 64)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  unsigned int v11 = (vaddv_s16((int16x4_t)(*(void *)&vshl_u16((uint16x4_t)(*(void *)&vdup_n_s16(*(unsigned __int8 *)(a1 + 80)) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFAFFFBFFFEFFFDLL) & 0xFF01FF01FF01FF01))+ ((*(unsigned char *)(a1 + 80) & 0x10) != 0)+ ((*(unsigned char *)(a1 + 80) & 2) != 0));
  while (2)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    switch(a3[v9])
    {
      case -4:
        ++v11;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_9;
      case 0:
        BOOL v14 = v11 > 3;
        char v15 = v14 & ~(_BYTE)v10 | v7;
        unsigned __int8 v16 = v14 | v10;
        char v58 = v15;
        char v59 = v16 | v15;
        if ((v16 | v8)) {
          BOOL v17 = 0;
        }
        else {
          BOOL v17 = a3;
        }
        unsigned int v18 = (int *)MEMORY[0x1E4F940E8];
        uint64_t v19 = (int *)MEMORY[0x1E4F940C8];
        char v60 = (v17 == 0) | v16;
        BOOL v61 = v16;
        uint64_t v20 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v11;
LABEL_7:
        uint64_t v12 = v7;
LABEL_8:
        uint64_t v13 = v10;
LABEL_9:
        ++v9;
        uint64_t v7 = v12;
        uint64_t v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v18) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v19)) {
      goto LABEL_87;
    }
    char v21 = 0;
    unsigned int v22 = 0;
    unint64_t v23 = 0;
    while (1)
    {
      uint64_t v24 = *v18;
      uint64_t v25 = *(void *)(v3 + v24);
      unint64_t v26 = v25 + 1;
      if (v25 == -1 || v26 > *(void *)(v3 + *v6)) {
        break;
      }
      char v27 = *(unsigned char *)(*(void *)(v3 + *v20) + v25);
      *(void *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0) {
        goto LABEL_24;
      }
      v21 += 7;
      BOOL v28 = v22++ >= 9;
      if (v28)
      {
        unint64_t v23 = 0;
        int v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_26;
      }
    }
    *(unsigned char *)(v3 + *v19) = 1;
LABEL_24:
    int v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(unsigned char *)(v3 + *v19)) {
      unint64_t v23 = 0;
    }
LABEL_26:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_87:
      int v56 = 1;
      goto LABEL_88;
    }
    unint64_t v31 = v23 >> 3;
    BOOL v32 = v61;
    if ((v60 & 1) == 0)
    {
      BOOL v33 = v17;
      do
      {
        int v35 = *v33++;
        int v34 = v35;
        BOOL v32 = v35 != 0;
        if (v35) {
          BOOL v36 = v34 == v31;
        }
        else {
          BOOL v36 = 1;
        }
      }
      while (!v36);
    }
    switch((int)v31)
    {
      case 1:
        if (!v32) {
          goto LABEL_68;
        }
        if ((*(unsigned char *)(a1 + 80) & 4) == 0)
        {
          uint64_t v37 = PBReaderReadString();
          uint64_t v38 = 24;
          goto LABEL_59;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_106;
        }
        char v51 = 32 * *(unsigned char *)(a1 + 80);
        goto LABEL_84;
      case 2:
        if (!v32) {
          goto LABEL_68;
        }
        if ((*(unsigned char *)(a1 + 80) & 8) == 0)
        {
          uint64_t v37 = PBReaderReadString();
          uint64_t v38 = 32;
          goto LABEL_59;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_106;
        }
        char v51 = 16 * *(unsigned char *)(a1 + 80);
        goto LABEL_84;
      case 3:
        if (!v32) {
          goto LABEL_68;
        }
        if ((*(unsigned char *)(a1 + 80) & 0x20) == 0)
        {
          uint64_t v37 = PBReaderReadString();
          uint64_t v38 = 48;
          goto LABEL_59;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_106;
        }
        char v51 = 4 * *(unsigned char *)(a1 + 80);
        goto LABEL_84;
      case 4:
        if (!v32) {
          goto LABEL_68;
        }
        if ((*(unsigned char *)(a1 + 80) & 0x40) == 0)
        {
          uint64_t v37 = PBReaderReadString();
          uint64_t v38 = 56;
          goto LABEL_59;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_106;
        }
        char v51 = 2 * *(unsigned char *)(a1 + 80);
        goto LABEL_84;
      case 5:
        if (!v32) {
          goto LABEL_68;
        }
        if ((*(unsigned char *)(a1 + 80) & 0x10) == 0)
        {
          uint64_t v37 = PBReaderReadString();
          uint64_t v38 = 40;
LABEL_59:
          char v42 = *(void **)(a1 + v38);
          *(void *)(a1 + v38) = v37;

          --v9;
LABEL_85:
          uint64_t v19 = (int *)MEMORY[0x1E4F940C8];
          goto LABEL_86;
        }
        if (PBReaderSkipValueWithTag())
        {
          char v51 = 8 * *(unsigned char *)(a1 + 80);
LABEL_84:
          v9 += v51 >> 7;
          goto LABEL_85;
        }
LABEL_106:
        int v56 = 0;
        char v57 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__flags;
        uint64_t v19 = (int *)MEMORY[0x1E4F940C8];
LABEL_89:
        if (v58) {
LABEL_90:
        }
          *(unsigned char *)(a1 + v57[49]) |= 2u;
        if (v61 || (v56 & 1) == 0)
        {
          *(unsigned char *)(a1 + v57[49]) |= 4u;
          *(unsigned char *)(a1 + v57[49]) |= 8u;
          *(unsigned char *)(a1 + v57[49]) |= 0x20u;
          *(unsigned char *)(a1 + v57[49]) |= 0x40u;
          *(unsigned char *)(a1 + v57[49]) |= 0x10u;
        }
        else if (v17)
        {
          while (1)
          {
            int v52 = *v17++;
            char v53 = 4;
            switch(v52)
            {
              case 0:
                goto LABEL_100;
              case 1:
                goto LABEL_99;
              case 2:
                char v53 = 8;
                goto LABEL_99;
              case 3:
                char v53 = 32;
                goto LABEL_99;
              case 4:
                char v53 = 64;
                goto LABEL_99;
              case 5:
                char v53 = 16;
LABEL_99:
                *(unsigned char *)(a1 + v57[49]) |= v53;
                break;
              default:
                continue;
            }
          }
        }
LABEL_100:
        if (v56) {
          unint64_t v3 = *(unsigned char *)(v3 + *v19) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v61)
        {
          uint64_t v54 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      case 6:
        if ((v8 & 1) == 0) {
          goto LABEL_68;
        }
        char v43 = 0;
        unsigned int v44 = 0;
        uint64_t v45 = 0;
        *(unsigned char *)(a1 + 80) |= 1u;
        while (2)
        {
          uint64_t v46 = *v18;
          uint64_t v47 = *(void *)(v3 + v46);
          unint64_t v48 = v47 + 1;
          if (v47 == -1 || v48 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v19) = 1;
          }
          else
          {
            char v49 = *(unsigned char *)(*(void *)(v3 + *v20) + v47);
            *(void *)(v3 + v46) = v48;
            v45 |= (unint64_t)(v49 & 0x7F) << v43;
            if (v49 < 0)
            {
              v43 += 7;
              BOOL v28 = v44++ >= 9;
              if (v28)
              {
                uint64_t v45 = 0;
                goto LABEL_73;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v19)) {
          uint64_t v45 = 0;
        }
LABEL_73:
        *(unsigned char *)(a1 + 76) = v45 != 0;
        goto LABEL_86;
      default:
        if ((v58 & 1) == 0 || (*(unsigned char *)(a1 + 80) & 2) != 0)
        {
LABEL_68:
          char v50 = PBReaderSkipValueWithTag();
          uint64_t v19 = (int *)MEMORY[0x1E4F940C8];
          if ((v50 & 1) == 0)
          {
            int v56 = 0;
LABEL_88:
            char v57 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__flags;
            goto LABEL_89;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v39 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            int v40 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v39;
          }
          int v41 = PBUnknownFieldAdd();
          uint64_t v19 = (int *)MEMORY[0x1E4F940C8];
          if (!v41)
          {
            int v56 = 0;
            char v57 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__flags;
            goto LABEL_90;
          }
        }
LABEL_86:
        if (!(v59 & 1 | (v9 != 0))) {
          goto LABEL_87;
        }
        continue;
    }
  }
}

void sub_18902D8F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_18902DDB8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18902DE88(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18902DF54(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDSearchParametersReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 336));
  char v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 332);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 328)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unint64_t v12 = *(void *)(a1 + 372);
  uint64x2_t v13 = (uint64x2_t)vdupq_n_s64(v12);
  v14.i64[0] = 0x100000001;
  v14.i64[1] = 0x100000001;
  uint32x4_t v15 = (uint32x4_t)vdupq_n_s32(v12);
  unsigned __int8 v16 = v6;
  unsigned int v17 = vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vshlq_u64(v13, (uint64x2_t)xmmword_18A62F7B0), (int32x4_t)vshlq_u64(v13, (uint64x2_t)xmmword_18A62F7A0)), v14))+ ((v12 >> 12) & 1)+ ((v12 >> 23) & 1)+ ((v12 >> 36) & 1)+ ((v12 >> 25) & 1)+ ((v12 >> 22) & 1)+ ((v12 >> 33) & 1)+ ((v12 >> 29) & 1)+ ((v12 >> 18) & 1)+ (BYTE4(v12) & 1)+ (WORD1(v12) & 1)+ ((v12 >> 34) & 1)+ ((v12 >> 40) & 1)+ vaddvq_s32(vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v15, (uint32x4_t)xmmword_18A62F7C0), v14),
            (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v15, (uint32x4_t)xmmword_18A62F7D0), v14)))
      + vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v15, (uint32x4_t)xmmword_18A62F7E0), v14))
      + (v12 >> 31);
  while (2)
  {
    uint64_t v18 = 1;
    uint64_t v19 = 1;
    uint64_t v20 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v17;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v19 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v21 = v17 > 0x15;
        char v22 = v21 & ~(_BYTE)v11 | v9;
        char v23 = v21 | v11;
        uint64_t v24 = (int *)MEMORY[0x1E4F940E8];
        if (((v21 | v11) | v8)) {
          uint64_t v25 = 0;
        }
        else {
          uint64_t v25 = a3;
        }
        int v227 = 1;
        if (*(void *)(v3 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(v3 + *v6)) {
          goto LABEL_475;
        }
        char v228 = v23 | v22;
        char v231 = (v25 == 0) | v23;
        unint64_t v26 = (int *)MEMORY[0x1E4F940C8];
        char v27 = (int *)MEMORY[0x1E4F940B8];
        char v229 = v21 & ~(_BYTE)v11 | v9;
        char v230 = v21 | v11;
        break;
      default:
        ++v17;
LABEL_7:
        uint64_t v18 = v9;
LABEL_8:
        uint64_t v19 = v10;
        uint64_t v20 = v11;
LABEL_10:
        ++v7;
        uint64_t v9 = v18;
        uint64_t v10 = v19;
        uint64_t v11 = v20;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(unsigned char *)(v3 + *v26)) {
      goto LABEL_474;
    }
    char v28 = 0;
    unsigned int v29 = 0;
    unint64_t v30 = 0;
    while (1)
    {
      uint64_t v31 = *v24;
      uint64_t v32 = *(void *)(v3 + v31);
      unint64_t v33 = v32 + 1;
      if (v32 == -1 || v33 > *(void *)(v3 + *v16)) {
        break;
      }
      char v34 = *(unsigned char *)(*(void *)(v3 + *v27) + v32);
      *(void *)(v3 + v31) = v33;
      v30 |= (unint64_t)(v34 & 0x7F) << v28;
      if ((v34 & 0x80) == 0) {
        goto LABEL_25;
      }
      v28 += 7;
      BOOL v35 = v29++ >= 9;
      if (v35)
      {
        unint64_t v30 = 0;
        int v36 = *(unsigned __int8 *)(v3 + *v26);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v26) = 1;
LABEL_25:
    int v36 = *(unsigned __int8 *)(v3 + *v26);
    if (*(unsigned char *)(v3 + *v26)) {
      unint64_t v30 = 0;
    }
LABEL_27:
    int v37 = v30 & 7;
    if (v36 || v37 == 4)
    {
LABEL_474:
      int v227 = 1;
LABEL_475:
      if ((v22 & 1) == 0) {
        goto LABEL_477;
      }
      goto LABEL_476;
    }
    unint64_t v39 = v30 >> 3;
    BOOL v40 = v23;
    if ((v231 & 1) == 0)
    {
      int v41 = v25;
      do
      {
        int v43 = *v41++;
        int v42 = v43;
        BOOL v40 = v43 != 0;
        if (v43) {
          BOOL v44 = v42 == v39;
        }
        else {
          BOOL v44 = 1;
        }
      }
      while (!v44);
    }
    switch((int)v39)
    {
      case 1:
        if ((v8 & 1) == 0) {
          goto LABEL_335;
        }
        char v45 = 0;
        unsigned int v46 = 0;
        uint64_t v47 = 0;
        *(void *)(a1 + 372) |= 0x20uLL;
        while (1)
        {
          uint64_t v48 = *v24;
          uint64_t v49 = *(void *)(v3 + v48);
          unint64_t v50 = v49 + 1;
          if (v49 == -1 || v50 > *(void *)(v3 + *v16)) {
            break;
          }
          char v51 = *(unsigned char *)(*(void *)(v3 + *v27) + v49);
          *(void *)(v3 + v48) = v50;
          v47 |= (unint64_t)(v51 & 0x7F) << v45;
          if ((v51 & 0x80) == 0) {
            goto LABEL_338;
          }
          v45 += 7;
          BOOL v35 = v46++ >= 9;
          if (v35)
          {
            LODWORD(v47) = 0;
            goto LABEL_340;
          }
        }
        *(unsigned char *)(v3 + *v26) = 1;
LABEL_338:
        if (*(unsigned char *)(v3 + *v26)) {
          LODWORD(v47) = 0;
        }
LABEL_340:
        uint64_t v184 = 360;
        goto LABEL_377;
      case 2:
        if ((v8 & 1) == 0) {
          goto LABEL_335;
        }
        char v52 = 0;
        unsigned int v53 = 0;
        uint64_t v47 = 0;
        *(void *)(a1 + 372) |= 2uLL;
        while (2)
        {
          uint64_t v54 = *v24;
          uint64_t v55 = *(void *)(v3 + v54);
          unint64_t v56 = v55 + 1;
          if (v55 == -1 || v56 > *(void *)(v3 + *v16))
          {
            *(unsigned char *)(v3 + *v26) = 1;
          }
          else
          {
            char v57 = *(unsigned char *)(*(void *)(v3 + *v27) + v55);
            *(void *)(v3 + v54) = v56;
            v47 |= (unint64_t)(v57 & 0x7F) << v52;
            if (v57 < 0)
            {
              v52 += 7;
              BOOL v35 = v53++ >= 9;
              if (v35)
              {
                LODWORD(v47) = 0;
                goto LABEL_344;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v26)) {
          LODWORD(v47) = 0;
        }
LABEL_344:
        uint64_t v184 = 344;
        goto LABEL_377;
      case 3:
        if (!v40) {
          goto LABEL_335;
        }
        if ((*(unsigned char *)(a1 + 376) & 4) == 0)
        {
          uint64_t v58 = PBReaderReadString();
          uint64_t v59 = 272;
          goto LABEL_293;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_518;
        }
        uint64_t v187 = *(void *)(a1 + 372) << 29;
        goto LABEL_431;
      case 4:
        if (!v40) {
          goto LABEL_335;
        }
        if (*(unsigned char *)(a1 + 377))
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_518;
          }
          uint64_t v187 = *(void *)(a1 + 372) << 23;
          goto LABEL_431;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_518;
        }
        char v60 = objc_alloc_init(GEOPDViewportInfo);
        if (!GEOPDViewportInfoReadAllFrom((uint64_t)v60, (void *)v3)) {
          goto LABEL_517;
        }
        PBReaderRecallMark();
        uint64_t v61 = 320;
        goto LABEL_324;
      case 5:
        if (!v40) {
          goto LABEL_335;
        }
        if ((*(unsigned char *)(a1 + 376) & 0x80) == 0)
        {
          uint64_t v58 = PBReaderReadData();
          uint64_t v59 = 312;
          goto LABEL_293;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_518;
        }
        uint64_t v187 = *(void *)(a1 + 372) << 24;
        goto LABEL_431;
      case 6:
        if (!v40) {
          goto LABEL_335;
        }
        if ((*(unsigned char *)(a1 + 376) & 0x20) == 0)
        {
          uint64_t v58 = PBReaderReadData();
          uint64_t v59 = 296;
          goto LABEL_293;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_518;
        }
        uint64_t v187 = *(void *)(a1 + 372) << 26;
        goto LABEL_431;
      case 7:
        if (!v40) {
          goto LABEL_335;
        }
        if ((*(unsigned char *)(a1 + 376) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_518;
          }
          uint64_t v187 = *(void *)(a1 + 372) << 25;
          goto LABEL_431;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_518;
        }
        char v60 = objc_alloc_init(GEOPDAutocompleteEntry);
        if (!GEOPDAutocompleteEntryReadAllFrom((uint64_t)v60, (void *)v3, v10 & 1)) {
          goto LABEL_517;
        }
        PBReaderRecallMark();
        uint64_t v61 = 304;
        goto LABEL_324;
      case 8:
        if ((v8 & 1) == 0) {
          goto LABEL_335;
        }
        char v62 = 0;
        unsigned int v63 = 0;
        uint64_t v47 = 0;
        *(void *)(a1 + 372) |= 8uLL;
        while (2)
        {
          uint64_t v64 = *v24;
          uint64_t v65 = *(void *)(v3 + v64);
          unint64_t v66 = v65 + 1;
          if (v65 == -1 || v66 > *(void *)(v3 + *v16))
          {
            *(unsigned char *)(v3 + *v26) = 1;
          }
          else
          {
            char v67 = *(unsigned char *)(*(void *)(v3 + *v27) + v65);
            *(void *)(v3 + v64) = v66;
            v47 |= (unint64_t)(v67 & 0x7F) << v62;
            if (v67 < 0)
            {
              v62 += 7;
              BOOL v35 = v63++ >= 9;
              if (v35)
              {
                LODWORD(v47) = 0;
                goto LABEL_348;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v26)) {
          LODWORD(v47) = 0;
        }
LABEL_348:
        uint64_t v184 = 352;
        goto LABEL_377;
      case 9:
        if (!v40) {
          goto LABEL_335;
        }
        if ((*(unsigned char *)(a1 + 376) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_518;
          }
          uint64_t v187 = *(void *)(a1 + 372) << 28;
          goto LABEL_431;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_518;
        }
        char v60 = objc_alloc_init(GEOPDSSearchStructureIntentRequestType);
        if (!GEOPDSSearchStructureIntentRequestTypeReadAllFrom((uint64_t)v60, (void *)v3)) {
          goto LABEL_517;
        }
        PBReaderRecallMark();
        uint64_t v61 = 280;
        goto LABEL_324;
      case 10:
        if (!v40) {
          goto LABEL_335;
        }
        if ((*(unsigned char *)(a1 + 375) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_518;
          }
          uint64_t v187 = *(void *)(a1 + 372) << 32;
          goto LABEL_431;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_518;
        }
        char v60 = objc_alloc_init(GEOPDSSearchLocationParameters);
        if (!GEOPDSSearchLocationParametersReadAllFrom((uint64_t)v60, (void *)v3)) {
          goto LABEL_517;
        }
        PBReaderRecallMark();
        uint64_t v61 = 248;
        goto LABEL_324;
      case 11:
        if (!v40) {
          goto LABEL_335;
        }
        if ((*(unsigned char *)(a1 + 375) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_518;
          }
          uint64_t v187 = *(void *)(a1 + 372) << 37;
          goto LABEL_431;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_518;
        }
        char v60 = objc_alloc_init(GEOPDRecentRouteInfo);
        if (!GEOPDRecentRouteInfoReadAllFrom((uint64_t)v60, (void *)v3, v10 & 1)) {
          goto LABEL_517;
        }
        PBReaderRecallMark();
        uint64_t v61 = 208;
        goto LABEL_324;
      case 12:
        if (!v40) {
          goto LABEL_335;
        }
        if ((*(unsigned char *)(a1 + 375) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_518;
          }
          uint64_t v187 = *(void *)(a1 + 372) << 33;
          goto LABEL_431;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_518;
        }
        char v60 = objc_alloc_init(GEOPDSSearchFilter);
        if (!GEOPDSSearchFilterReadAllFrom((uint64_t)v60, (void *)v3, v10 & 1)) {
          goto LABEL_517;
        }
        PBReaderRecallMark();
        uint64_t v61 = 240;
        goto LABEL_324;
      case 14:
        if ((v8 & 1) == 0) {
          goto LABEL_335;
        }
        char v71 = 0;
        unsigned int v72 = 0;
        uint64_t v73 = 0;
        *(void *)(a1 + 372) |= 0x80uLL;
        while (2)
        {
          uint64_t v74 = *v24;
          uint64_t v75 = *(void *)(v3 + v74);
          unint64_t v76 = v75 + 1;
          if (v75 == -1 || v76 > *(void *)(v3 + *v16))
          {
            *(unsigned char *)(v3 + *v26) = 1;
          }
          else
          {
            char v77 = *(unsigned char *)(*(void *)(v3 + *v27) + v75);
            *(void *)(v3 + v74) = v76;
            v73 |= (unint64_t)(v77 & 0x7F) << v71;
            if (v77 < 0)
            {
              v71 += 7;
              BOOL v35 = v72++ >= 9;
              if (v35)
              {
                uint64_t v73 = 0;
                goto LABEL_352;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v26)) {
          uint64_t v73 = 0;
        }
LABEL_352:
        BOOL v185 = v73 != 0;
        uint64_t v186 = 365;
        goto LABEL_386;
      case 15:
        if ((v8 & 1) == 0) {
          goto LABEL_335;
        }
        char v78 = 0;
        unsigned int v79 = 0;
        uint64_t v80 = 0;
        *(void *)(a1 + 372) |= 0x40uLL;
        while (2)
        {
          uint64_t v81 = *v24;
          uint64_t v82 = *(void *)(v3 + v81);
          unint64_t v83 = v82 + 1;
          if (v82 == -1 || v83 > *(void *)(v3 + *v16))
          {
            *(unsigned char *)(v3 + *v26) = 1;
          }
          else
          {
            char v84 = *(unsigned char *)(*(void *)(v3 + *v27) + v82);
            *(void *)(v3 + v81) = v83;
            v80 |= (unint64_t)(v84 & 0x7F) << v78;
            if (v84 < 0)
            {
              v78 += 7;
              BOOL v35 = v79++ >= 9;
              if (v35)
              {
                uint64_t v80 = 0;
                goto LABEL_356;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v26)) {
          uint64_t v80 = 0;
        }
LABEL_356:
        BOOL v185 = v80 != 0;
        uint64_t v186 = 364;
        goto LABEL_386;
      case 16:
        if (!v40) {
          goto LABEL_335;
        }
        if ((*(unsigned char *)(a1 + 375) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_518;
          }
          uint64_t v187 = *(void *)(a1 + 372) << 35;
          goto LABEL_431;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_518;
        }
        char v60 = objc_alloc_init(GEOPDRetainedSearchMetadata);
        if (!GEOPDRetainedSearchMetadataReadAllFrom((uint64_t)v60, (void *)v3, v10 & 1)) {
          goto LABEL_517;
        }
        PBReaderRecallMark();
        uint64_t v61 = 224;
        goto LABEL_324;
      case 17:
        if ((v8 & 1) == 0) {
          goto LABEL_335;
        }
        char v85 = 0;
        unsigned int v86 = 0;
        uint64_t v87 = 0;
        *(void *)(a1 + 372) |= 0x800uLL;
        while (2)
        {
          uint64_t v88 = *v24;
          uint64_t v89 = *(void *)(v3 + v88);
          unint64_t v90 = v89 + 1;
          if (v89 == -1 || v90 > *(void *)(v3 + *v16))
          {
            *(unsigned char *)(v3 + *v26) = 1;
          }
          else
          {
            char v91 = *(unsigned char *)(*(void *)(v3 + *v27) + v89);
            *(void *)(v3 + v88) = v90;
            v87 |= (unint64_t)(v91 & 0x7F) << v85;
            if (v91 < 0)
            {
              v85 += 7;
              BOOL v35 = v86++ >= 9;
              if (v35)
              {
                uint64_t v87 = 0;
                goto LABEL_360;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v26)) {
          uint64_t v87 = 0;
        }
LABEL_360:
        BOOL v185 = v87 != 0;
        uint64_t v186 = 369;
        goto LABEL_386;
      case 18:
        if ((v8 & 1) == 0) {
          goto LABEL_335;
        }
        char v92 = 0;
        unsigned int v93 = 0;
        uint64_t v94 = 0;
        *(void *)(a1 + 372) |= 0x200uLL;
        while (2)
        {
          uint64_t v95 = *v24;
          uint64_t v96 = *(void *)(v3 + v95);
          unint64_t v97 = v96 + 1;
          if (v96 == -1 || v97 > *(void *)(v3 + *v16))
          {
            *(unsigned char *)(v3 + *v26) = 1;
          }
          else
          {
            char v98 = *(unsigned char *)(*(void *)(v3 + *v27) + v96);
            *(void *)(v3 + v95) = v97;
            v94 |= (unint64_t)(v98 & 0x7F) << v92;
            if (v98 < 0)
            {
              v92 += 7;
              BOOL v35 = v93++ >= 9;
              if (v35)
              {
                uint64_t v94 = 0;
                goto LABEL_364;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v26)) {
          uint64_t v94 = 0;
        }
LABEL_364:
        BOOL v185 = v94 != 0;
        uint64_t v186 = 367;
        goto LABEL_386;
      case 19:
        if ((v8 & 1) == 0) {
          goto LABEL_335;
        }
        char v99 = 0;
        unsigned int v100 = 0;
        uint64_t v47 = 0;
        *(void *)(a1 + 372) |= 0x10uLL;
        while (2)
        {
          uint64_t v101 = *v24;
          uint64_t v102 = *(void *)(v3 + v101);
          unint64_t v103 = v102 + 1;
          if (v102 == -1 || v103 > *(void *)(v3 + *v16))
          {
            *(unsigned char *)(v3 + *v26) = 1;
          }
          else
          {
            char v104 = *(unsigned char *)(*(void *)(v3 + *v27) + v102);
            *(void *)(v3 + v101) = v103;
            v47 |= (unint64_t)(v104 & 0x7F) << v99;
            if (v104 < 0)
            {
              v99 += 7;
              BOOL v35 = v100++ >= 9;
              if (v35)
              {
                LODWORD(v47) = 0;
                goto LABEL_368;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v26)) {
          LODWORD(v47) = 0;
        }
LABEL_368:
        uint64_t v184 = 356;
        goto LABEL_377;
      case 20:
        if (!v40) {
          goto LABEL_335;
        }
        if ((*(unsigned char *)(a1 + 374) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_518;
          }
          uint64_t v187 = *(void *)(a1 + 372) << 42;
          goto LABEL_431;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_518;
        }
        char v60 = objc_alloc_init(GEOPDSInferredSignals);
        if (!GEOPDSInferredSignalsReadAllFrom((uint64_t)v60, (void *)v3, v10 & 1)) {
          goto LABEL_517;
        }
        PBReaderRecallMark();
        uint64_t v61 = 168;
        goto LABEL_324;
      case 21:
        if (!v40 || (*(unsigned char *)(a1 + 373) & 0x80) != 0) {
          goto LABEL_335;
        }
        if (v37 != 2)
        {
          char v188 = 0;
          unsigned int v189 = 0;
          uint64_t v190 = 0;
          while (1)
          {
            uint64_t v191 = *v24;
            uint64_t v192 = *(void *)(v3 + v191);
            unint64_t v193 = v192 + 1;
            if (v192 == -1 || v193 > *(void *)(v3 + *v16)) {
              goto LABEL_472;
            }
            char v194 = *(unsigned char *)(*(void *)(v3 + *v27) + v192);
            *(void *)(v3 + v191) = v193;
            v190 |= (unint64_t)(v194 & 0x7F) << v188;
            if (v194 < 0)
            {
              v188 += 7;
              BOOL v35 = v189++ >= 9;
              if (!v35) {
                continue;
              }
            }
            goto LABEL_473;
          }
        }
        if (!PBReaderPlaceMark()) {
          goto LABEL_518;
        }
        while (1)
        {
          char v105 = (int *)MEMORY[0x1E4F940E0];
          char v106 = (int *)MEMORY[0x1E4F940C8];
          if (*(void *)(v3 + *v24) >= *(void *)(v3 + (int)*MEMORY[0x1E4F940E0])
            || *(unsigned char *)(v3 + (int)*MEMORY[0x1E4F940C8]))
          {
            goto LABEL_334;
          }
          char v107 = 0;
          unsigned int v108 = 0;
          uint64_t v109 = 0;
          int v110 = (int *)MEMORY[0x1E4F940B8];
          while (1)
          {
            uint64_t v111 = *v24;
            uint64_t v112 = *(void *)(v3 + v111);
            unint64_t v113 = v112 + 1;
            if (v112 == -1 || v113 > *(void *)(v3 + *v105)) {
              break;
            }
            char v114 = *(unsigned char *)(*(void *)(v3 + *v110) + v112);
            *(void *)(v3 + v111) = v113;
            v109 |= (unint64_t)(v114 & 0x7F) << v107;
            if (v114 < 0)
            {
              v107 += 7;
              BOOL v35 = v108++ >= 9;
              if (!v35) {
                continue;
              }
            }
            goto LABEL_172;
          }
          *(unsigned char *)(v3 + *v106) = 1;
LABEL_172:
          PBRepeatedInt32Add();
        }
      case 22:
        if (!v40) {
          goto LABEL_335;
        }
        if ((*(unsigned char *)(a1 + 374) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_518;
          }
          uint64_t v187 = *(void *)(a1 + 372) << 43;
          goto LABEL_431;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_518;
        }
        char v60 = objc_alloc_init(GEOPDSSearchEvChargingParameters);
        if (!GEOPDSSearchEvChargingParametersReadAllFrom((uint64_t)v60, (void *)v3, v10 & 1)) {
          goto LABEL_517;
        }
        PBReaderRecallMark();
        uint64_t v61 = 160;
        goto LABEL_324;
      case 23:
        if (!v40) {
          goto LABEL_335;
        }
        if ((*(unsigned char *)(a1 + 374) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_518;
          }
          uint64_t v187 = *(void *)(a1 + 372) << 44;
          goto LABEL_431;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_518;
        }
        char v60 = objc_alloc_init(GEOPDETAFilter);
        if (!GEOPDETAFilterReadAllFrom((uint64_t)v60, (void *)v3, v10 & 1)) {
          goto LABEL_517;
        }
        PBReaderRecallMark();
        uint64_t v61 = 152;
        goto LABEL_324;
      case 24:
        if (!v40 || (*(unsigned char *)(a1 + 374) & 2) != 0) {
          goto LABEL_335;
        }
        if (v37 != 2)
        {
          char v195 = 0;
          unsigned int v196 = 0;
          uint64_t v197 = 0;
          while (1)
          {
            uint64_t v198 = *v24;
            uint64_t v199 = *(void *)(v3 + v198);
            unint64_t v200 = v199 + 1;
            if (v199 == -1 || v200 > *(void *)(v3 + *v16)) {
              goto LABEL_472;
            }
            char v201 = *(unsigned char *)(*(void *)(v3 + *v27) + v199);
            *(void *)(v3 + v198) = v200;
            v197 |= (unint64_t)(v201 & 0x7F) << v195;
            if (v201 < 0)
            {
              v195 += 7;
              BOOL v35 = v196++ >= 9;
              if (!v35) {
                continue;
              }
            }
            goto LABEL_473;
          }
        }
        if (!PBReaderPlaceMark()) {
          goto LABEL_518;
        }
        while (1)
        {
          int v115 = (int *)MEMORY[0x1E4F940E0];
          char v116 = (int *)MEMORY[0x1E4F940C8];
          if (*(void *)(v3 + *v24) >= *(void *)(v3 + (int)*MEMORY[0x1E4F940E0])
            || *(unsigned char *)(v3 + (int)*MEMORY[0x1E4F940C8]))
          {
            goto LABEL_334;
          }
          char v117 = 0;
          unsigned int v118 = 0;
          uint64_t v119 = 0;
          char v120 = (int *)MEMORY[0x1E4F940B8];
          while (1)
          {
            uint64_t v121 = *v24;
            uint64_t v122 = *(void *)(v3 + v121);
            unint64_t v123 = v122 + 1;
            if (v122 == -1 || v123 > *(void *)(v3 + *v115)) {
              break;
            }
            char v124 = *(unsigned char *)(*(void *)(v3 + *v120) + v122);
            *(void *)(v3 + v121) = v123;
            v119 |= (unint64_t)(v124 & 0x7F) << v117;
            if (v124 < 0)
            {
              v117 += 7;
              BOOL v35 = v118++ >= 9;
              if (!v35) {
                continue;
              }
            }
            goto LABEL_197;
          }
          *(unsigned char *)(v3 + *v116) = 1;
LABEL_197:
          PBRepeatedInt32Add();
        }
      case 25:
        if ((v8 & 1) == 0) {
          goto LABEL_335;
        }
        char v125 = 0;
        unsigned int v126 = 0;
        uint64_t v47 = 0;
        *(void *)(a1 + 372) |= 1uLL;
        while (2)
        {
          uint64_t v127 = *v24;
          uint64_t v128 = *(void *)(v3 + v127);
          unint64_t v129 = v128 + 1;
          if (v128 == -1 || v129 > *(void *)(v3 + *v16))
          {
            *(unsigned char *)(v3 + *v26) = 1;
          }
          else
          {
            char v130 = *(unsigned char *)(*(void *)(v3 + *v27) + v128);
            *(void *)(v3 + v127) = v129;
            v47 |= (unint64_t)(v130 & 0x7F) << v125;
            if (v130 < 0)
            {
              v125 += 7;
              BOOL v35 = v126++ >= 9;
              if (v35)
              {
                LODWORD(v47) = 0;
                goto LABEL_372;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v26)) {
          LODWORD(v47) = 0;
        }
LABEL_372:
        uint64_t v184 = 340;
        goto LABEL_377;
      case 26:
        if (!v40) {
          goto LABEL_335;
        }
        if ((*(unsigned char *)(a1 + 375) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_518;
          }
          uint64_t v187 = *(void *)(a1 + 372) << 36;
          goto LABEL_431;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_518;
        }
        char v60 = objc_alloc_init(GEOPDResultRefinementQuery);
        if (!GEOPDResultRefinementQueryReadAllFrom((uint64_t)v60, (void *)v3, v10 & 1)) {
          goto LABEL_517;
        }
        PBReaderRecallMark();
        uint64_t v61 = 216;
        goto LABEL_324;
      case 27:
        if (!v40 || (*(unsigned char *)(a1 + 373) & 0x20) != 0) {
          goto LABEL_335;
        }
        if (v37 != 2)
        {
          char v202 = 0;
          unsigned int v203 = 0;
          uint64_t v204 = 0;
          while (1)
          {
            uint64_t v205 = *v24;
            uint64_t v206 = *(void *)(v3 + v205);
            unint64_t v207 = v206 + 1;
            if (v206 == -1 || v207 > *(void *)(v3 + *v16)) {
              goto LABEL_472;
            }
            char v208 = *(unsigned char *)(*(void *)(v3 + *v27) + v206);
            *(void *)(v3 + v205) = v207;
            v204 |= (unint64_t)(v208 & 0x7F) << v202;
            if (v208 < 0)
            {
              v202 += 7;
              BOOL v35 = v203++ >= 9;
              if (!v35) {
                continue;
              }
            }
            goto LABEL_473;
          }
        }
        if (!PBReaderPlaceMark()) {
          goto LABEL_518;
        }
        while (1)
        {
          uint64_t v131 = (int *)MEMORY[0x1E4F940E0];
          int v132 = (int *)MEMORY[0x1E4F940C8];
          if (*(void *)(v3 + *v24) >= *(void *)(v3 + (int)*MEMORY[0x1E4F940E0])
            || *(unsigned char *)(v3 + (int)*MEMORY[0x1E4F940C8]))
          {
            goto LABEL_334;
          }
          char v133 = 0;
          unsigned int v134 = 0;
          uint64_t v135 = 0;
          uint64_t v136 = (int *)MEMORY[0x1E4F940B8];
          while (1)
          {
            uint64_t v137 = *v24;
            uint64_t v138 = *(void *)(v3 + v137);
            unint64_t v139 = v138 + 1;
            if (v138 == -1 || v139 > *(void *)(v3 + *v131)) {
              break;
            }
            char v140 = *(unsigned char *)(*(void *)(v3 + *v136) + v138);
            *(void *)(v3 + v137) = v139;
            v135 |= (unint64_t)(v140 & 0x7F) << v133;
            if (v140 < 0)
            {
              v133 += 7;
              BOOL v35 = v134++ >= 9;
              if (!v35) {
                continue;
              }
            }
            goto LABEL_225;
          }
          *(unsigned char *)(v3 + *v132) = 1;
LABEL_225:
          PBRepeatedInt32Add();
        }
      case 28:
        if ((v8 & 1) == 0) {
          goto LABEL_335;
        }
        char v141 = 0;
        unsigned int v142 = 0;
        uint64_t v47 = 0;
        *(void *)(a1 + 372) |= 4uLL;
        while (2)
        {
          uint64_t v143 = *v24;
          uint64_t v144 = *(void *)(v3 + v143);
          unint64_t v145 = v144 + 1;
          if (v144 == -1 || v145 > *(void *)(v3 + *v16))
          {
            *(unsigned char *)(v3 + *v26) = 1;
          }
          else
          {
            char v146 = *(unsigned char *)(*(void *)(v3 + *v27) + v144);
            *(void *)(v3 + v143) = v145;
            v47 |= (unint64_t)(v146 & 0x7F) << v141;
            if (v146 < 0)
            {
              v141 += 7;
              BOOL v35 = v142++ >= 9;
              if (v35)
              {
                LODWORD(v47) = 0;
                goto LABEL_376;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v26)) {
          LODWORD(v47) = 0;
        }
LABEL_376:
        uint64_t v184 = 348;
LABEL_377:
        *(_DWORD *)(a1 + v184) = v47;
        goto LABEL_434;
      case 29:
        if (!v40) {
          goto LABEL_335;
        }
        if (*(unsigned char *)(a1 + 375))
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_518;
          }
          uint64_t v187 = *(void *)(a1 + 372) << 39;
          goto LABEL_431;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_518;
        }
        char v60 = objc_alloc_init(GEOPDViewportInfo);
        if (!GEOPDViewportInfoReadAllFrom((uint64_t)v60, (void *)v3)) {
          goto LABEL_517;
        }
        PBReaderRecallMark();
        uint64_t v61 = 192;
        goto LABEL_324;
      case 30:
        if (!v40 || (*(unsigned char *)(a1 + 373) & 0x40) != 0) {
          goto LABEL_335;
        }
        if (v37 != 2)
        {
          char v209 = 0;
          unsigned int v210 = 0;
          uint64_t v211 = 0;
          while (1)
          {
            uint64_t v212 = *v24;
            uint64_t v213 = *(void *)(v3 + v212);
            unint64_t v214 = v213 + 1;
            if (v213 == -1 || v214 > *(void *)(v3 + *v16)) {
              goto LABEL_472;
            }
            char v215 = *(unsigned char *)(*(void *)(v3 + *v27) + v213);
            *(void *)(v3 + v212) = v214;
            v211 |= (unint64_t)(v215 & 0x7F) << v209;
            if (v215 < 0)
            {
              v209 += 7;
              BOOL v35 = v210++ >= 9;
              if (!v35) {
                continue;
              }
            }
            goto LABEL_473;
          }
        }
        if (!PBReaderPlaceMark()) {
          goto LABEL_518;
        }
        while (1)
        {
          uint64_t v147 = (int *)MEMORY[0x1E4F940E0];
          uint64_t v148 = (int *)MEMORY[0x1E4F940C8];
          if (*(void *)(v3 + *v24) >= *(void *)(v3 + (int)*MEMORY[0x1E4F940E0])
            || *(unsigned char *)(v3 + (int)*MEMORY[0x1E4F940C8]))
          {
            goto LABEL_334;
          }
          char v149 = 0;
          unsigned int v150 = 0;
          uint64_t v151 = 0;
          uint64_t v152 = (int *)MEMORY[0x1E4F940B8];
          while (1)
          {
            uint64_t v153 = *v24;
            uint64_t v154 = *(void *)(v3 + v153);
            unint64_t v155 = v154 + 1;
            if (v154 == -1 || v155 > *(void *)(v3 + *v147)) {
              break;
            }
            char v156 = *(unsigned char *)(*(void *)(v3 + *v152) + v154);
            *(void *)(v3 + v153) = v155;
            v151 |= (unint64_t)(v156 & 0x7F) << v149;
            if (v156 < 0)
            {
              v149 += 7;
              BOOL v35 = v150++ >= 9;
              if (!v35) {
                continue;
              }
            }
            goto LABEL_253;
          }
          *(unsigned char *)(v3 + *v148) = 1;
LABEL_253:
          PBRepeatedInt32Add();
        }
      case 31:
        if (!v40 || (*(unsigned char *)(a1 + 374) & 1) != 0) {
          goto LABEL_335;
        }
        if (v37 != 2)
        {
          char v216 = 0;
          unsigned int v217 = 0;
          uint64_t v218 = 0;
          while (1)
          {
            uint64_t v219 = *v24;
            uint64_t v220 = *(void *)(v3 + v219);
            unint64_t v221 = v220 + 1;
            if (v220 == -1 || v221 > *(void *)(v3 + *v16)) {
              break;
            }
            char v222 = *(unsigned char *)(*(void *)(v3 + *v27) + v220);
            *(void *)(v3 + v219) = v221;
            v218 |= (unint64_t)(v222 & 0x7F) << v216;
            if (v222 < 0)
            {
              v216 += 7;
              BOOL v35 = v217++ >= 9;
              if (!v35) {
                continue;
              }
            }
            goto LABEL_473;
          }
LABEL_472:
          *(unsigned char *)(v3 + *v26) = 1;
LABEL_473:
          PBRepeatedInt32Add();
          goto LABEL_432;
        }
        if (!PBReaderPlaceMark()) {
          goto LABEL_518;
        }
        while (1)
        {
          uint64_t v157 = (int *)MEMORY[0x1E4F940E0];
          uint64_t v158 = (int *)MEMORY[0x1E4F940C8];
          if (*(void *)(v3 + *v24) >= *(void *)(v3 + (int)*MEMORY[0x1E4F940E0])
            || *(unsigned char *)(v3 + (int)*MEMORY[0x1E4F940C8]))
          {
            break;
          }
          char v159 = 0;
          unsigned int v160 = 0;
          uint64_t v161 = 0;
          int v162 = (int *)MEMORY[0x1E4F940B8];
          while (1)
          {
            uint64_t v163 = *v24;
            uint64_t v164 = *(void *)(v3 + v163);
            unint64_t v165 = v164 + 1;
            if (v164 == -1 || v165 > *(void *)(v3 + *v157)) {
              break;
            }
            char v166 = *(unsigned char *)(*(void *)(v3 + *v162) + v164);
            *(void *)(v3 + v163) = v165;
            v161 |= (unint64_t)(v166 & 0x7F) << v159;
            if (v166 < 0)
            {
              v159 += 7;
              BOOL v35 = v160++ >= 9;
              if (!v35) {
                continue;
              }
            }
            goto LABEL_268;
          }
          *(unsigned char *)(v3 + *v158) = 1;
LABEL_268:
          PBRepeatedInt32Add();
        }
LABEL_334:
        PBReaderRecallMark();
        unint64_t v26 = (int *)MEMORY[0x1E4F940C8];
        unsigned __int8 v16 = (int *)MEMORY[0x1E4F940E0];
        goto LABEL_433;
      case 32:
        if ((v8 & 1) == 0) {
          goto LABEL_335;
        }
        char v167 = 0;
        unsigned int v168 = 0;
        uint64_t v169 = 0;
        *(void *)(a1 + 372) |= 0x100uLL;
        while (2)
        {
          uint64_t v170 = *v24;
          uint64_t v171 = *(void *)(v3 + v170);
          unint64_t v172 = v171 + 1;
          if (v171 == -1 || v172 > *(void *)(v3 + *v16))
          {
            *(unsigned char *)(v3 + *v26) = 1;
          }
          else
          {
            char v173 = *(unsigned char *)(*(void *)(v3 + *v27) + v171);
            *(void *)(v3 + v170) = v172;
            v169 |= (unint64_t)(v173 & 0x7F) << v167;
            if (v173 < 0)
            {
              v167 += 7;
              BOOL v35 = v168++ >= 9;
              if (v35)
              {
                uint64_t v169 = 0;
                goto LABEL_381;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v26)) {
          uint64_t v169 = 0;
        }
LABEL_381:
        BOOL v185 = v169 != 0;
        uint64_t v186 = 366;
        goto LABEL_386;
      case 33:
        if (!v40) {
          goto LABEL_335;
        }
        if (*(unsigned char *)(a1 + 376))
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_518;
          }
          uint64_t v187 = *(void *)(a1 + 372) << 31;
          goto LABEL_431;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_518;
        }
        char v60 = objc_alloc_init(GEOPDSearchOriginationInfo);
        if (!GEOPDSearchOriginationInfoReadAllFrom((uint64_t)v60, (void *)v3, v10 & 1)) {
          goto LABEL_517;
        }
        PBReaderRecallMark();
        uint64_t v61 = 256;
        goto LABEL_324;
      case 34:
        if ((v8 & 1) == 0) {
          goto LABEL_335;
        }
        char v174 = 0;
        unsigned int v175 = 0;
        uint64_t v176 = 0;
        *(void *)(a1 + 372) |= 0x400uLL;
        while (2)
        {
          uint64_t v177 = *v24;
          uint64_t v178 = *(void *)(v3 + v177);
          unint64_t v179 = v178 + 1;
          if (v178 == -1 || v179 > *(void *)(v3 + *v16))
          {
            *(unsigned char *)(v3 + *v26) = 1;
          }
          else
          {
            char v180 = *(unsigned char *)(*(void *)(v3 + *v27) + v178);
            *(void *)(v3 + v177) = v179;
            v176 |= (unint64_t)(v180 & 0x7F) << v174;
            if (v180 < 0)
            {
              v174 += 7;
              BOOL v35 = v175++ >= 9;
              if (v35)
              {
                uint64_t v176 = 0;
                goto LABEL_385;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v26)) {
          uint64_t v176 = 0;
        }
LABEL_385:
        BOOL v185 = v176 != 0;
        uint64_t v186 = 368;
LABEL_386:
        *(unsigned char *)(a1 + v186) = v185;
        goto LABEL_434;
      case 35:
        if (!v40) {
          goto LABEL_335;
        }
        if ((*(unsigned char *)(a1 + 374) & 4) == 0)
        {
          uint64_t v58 = PBReaderReadString();
          uint64_t v59 = 144;
LABEL_293:
          long long v181 = *(void **)(a1 + v59);
          *(void *)(a1 + v59) = v58;
          goto LABEL_325;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_518;
        }
        uint64_t v187 = *(void *)(a1 + 372) << 45;
        goto LABEL_431;
      case 36:
        if (!v40 || (*(unsigned char *)(a1 + 375) & 0x20) != 0)
        {
          char v182 = PBReaderSkipValueWithTag();
          unsigned __int8 v16 = (int *)MEMORY[0x1E4F940E0];
          unint64_t v26 = (int *)MEMORY[0x1E4F940C8];
          char v27 = (int *)MEMORY[0x1E4F940B8];
          if ((v182 & 1) == 0) {
            goto LABEL_518;
          }
          goto LABEL_434;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_518;
        }
        char v60 = objc_alloc_init(GEOPDSearchEnrichmentRevisionMetadata);
        if (!GEOPDSearchEnrichmentRevisionMetadataReadAllFrom((uint64_t)v60, (void *)v3)) {
          goto LABEL_517;
        }
        PBReaderRecallMark();
        -[GEOPDSearchParameters _addNoFlagsSearchEnrichmentRevisionMetadata:](a1, v60);

        goto LABEL_432;
      case 37:
        if (!v40) {
          goto LABEL_335;
        }
        if ((*(unsigned char *)(a1 + 376) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_518;
          }
          uint64_t v187 = *(void *)(a1 + 372) << 30;
          goto LABEL_431;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_518;
        }
        char v60 = objc_alloc_init(GEOPDSSearchSessionData);
        if (!GEOPDSSearchSessionDataReadAllFrom((uint64_t)v60, (void *)v3)) {
          goto LABEL_517;
        }
        PBReaderRecallMark();
        uint64_t v61 = 264;
        goto LABEL_324;
      case 38:
        if (!v40) {
          goto LABEL_335;
        }
        if ((*(unsigned char *)(a1 + 374) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_518;
          }
          uint64_t v187 = *(void *)(a1 + 372) << 41;
          goto LABEL_431;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_518;
        }
        char v60 = objc_alloc_init(GEOPDAutocompleteSessionData);
        if (!GEOPDAutocompleteSessionDataReadAllFrom((uint64_t)v60, (void *)v3)) {
          goto LABEL_517;
        }
        PBReaderRecallMark();
        uint64_t v61 = 176;
        goto LABEL_324;
      case 39:
        if (!v40) {
          goto LABEL_335;
        }
        if ((*(unsigned char *)(a1 + 375) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_518;
          }
          uint64_t v187 = *(void *)(a1 + 372) << 38;
          goto LABEL_431;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_518;
        }
        char v60 = objc_alloc_init(GEOPDSPunchInHints);
        if (!GEOPDSPunchInHintsReadAllFrom((uint64_t)v60, (void *)v3, v10 & 1)) {
          goto LABEL_517;
        }
        PBReaderRecallMark();
        uint64_t v61 = 200;
        goto LABEL_324;
      case 40:
        if (!v40) {
          goto LABEL_335;
        }
        if ((*(unsigned char *)(a1 + 376) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_518;
          }
          uint64_t v187 = *(void *)(a1 + 372) << 27;
          goto LABEL_431;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_518;
        }
        char v60 = objc_alloc_init(GEOPDSSessionUserActionMetadata);
        if (!GEOPDSSessionUserActionMetadataReadAllFrom(v60, (void *)v3)) {
          goto LABEL_517;
        }
        PBReaderRecallMark();
        uint64_t v61 = 288;
        goto LABEL_324;
      case 41:
        if (!v40) {
          goto LABEL_335;
        }
        if ((*(unsigned char *)(a1 + 374) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_518;
          }
          uint64_t v187 = *(void *)(a1 + 372) << 40;
LABEL_431:
          v7 += v187 >> 63;
LABEL_432:
          unsigned __int8 v16 = (int *)MEMORY[0x1E4F940E0];
          unint64_t v26 = (int *)MEMORY[0x1E4F940C8];
LABEL_433:
          char v27 = (int *)MEMORY[0x1E4F940B8];
          goto LABEL_434;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_518;
        }
        char v60 = objc_alloc_init(GEOPDPaginationParameters);
        if (GEOPDPaginationParametersReadAllFrom((uint64_t)v60, (void *)v3))
        {
          PBReaderRecallMark();
          uint64_t v61 = 184;
LABEL_324:
          long long v181 = *(void **)(a1 + v61);
          *(void *)(a1 + v61) = v60;
LABEL_325:

          --v7;
          goto LABEL_432;
        }
LABEL_517:

LABEL_518:
        int v227 = 0;
LABEL_519:
        char v23 = v230;
        if (v229) {
          goto LABEL_476;
        }
LABEL_477:
        if (v23 & 1 | ((v227 & 1) == 0))
        {
          *(void *)(a1 + 372) |= 0x1FFFFFFE000uLL;
        }
        else if (v25)
        {
          while (1)
          {
            int v224 = *v25++;
            uint64_t v223 = 0x400000000;
            switch(v224)
            {
              case 0:
                goto LABEL_510;
              case 3:
                goto LABEL_508;
              case 4:
                uint64_t v223 = 0x10000000000;
                goto LABEL_508;
              case 5:
                uint64_t v223 = 0x8000000000;
                goto LABEL_508;
              case 6:
                uint64_t v223 = 0x2000000000;
                goto LABEL_508;
              case 7:
                uint64_t v223 = 0x4000000000;
                goto LABEL_508;
              case 9:
                uint64_t v223 = 0x800000000;
                goto LABEL_508;
              case 10:
                uint64_t v223 = 0x80000000;
                goto LABEL_508;
              case 11:
                uint64_t v223 = 0x4000000;
                goto LABEL_508;
              case 12:
                uint64_t v223 = 0x40000000;
                goto LABEL_508;
              case 16:
                uint64_t v223 = 0x10000000;
                goto LABEL_508;
              case 20:
                uint64_t v223 = 0x200000;
                goto LABEL_508;
              case 21:
                uint64_t v223 = 0x8000;
                goto LABEL_508;
              case 22:
                uint64_t v223 = 0x100000;
                goto LABEL_508;
              case 23:
                uint64_t v223 = 0x80000;
                goto LABEL_508;
              case 24:
                uint64_t v223 = 0x20000;
                goto LABEL_508;
              case 26:
                uint64_t v223 = 0x8000000;
                goto LABEL_508;
              case 27:
                uint64_t v223 = 0x2000;
                goto LABEL_508;
              case 29:
                uint64_t v223 = 0x1000000;
                goto LABEL_508;
              case 30:
                uint64_t v223 = 0x4000;
                goto LABEL_508;
              case 31:
                uint64_t v223 = 0x10000;
                goto LABEL_508;
              case 33:
                uint64_t v223 = 0x100000000;
                goto LABEL_508;
              case 35:
                uint64_t v223 = 0x40000;
                goto LABEL_508;
              case 36:
                uint64_t v223 = 0x20000000;
                goto LABEL_508;
              case 37:
                uint64_t v223 = 0x200000000;
                goto LABEL_508;
              case 38:
                uint64_t v223 = 0x400000;
                goto LABEL_508;
              case 39:
                uint64_t v223 = 0x2000000;
                goto LABEL_508;
              case 40:
                uint64_t v223 = 0x1000000000;
                goto LABEL_508;
              case 41:
                uint64_t v223 = 0x800000;
LABEL_508:
                *(void *)(a1 + 372) |= v223;
                break;
              default:
                continue;
            }
          }
        }
LABEL_510:
        if (v227)
        {
          unint64_t v3 = *(unsigned char *)(v3 + (int)*MEMORY[0x1E4F940C8]) == 0;
          if ((v23 & 1) == 0) {
            return v3;
          }
LABEL_514:
          unint64_t v225 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        else
        {
          unint64_t v3 = 0;
          if (v23) {
            goto LABEL_514;
          }
        }
        return v3;
      default:
        if ((v22 & 1) != 0 && (*(unsigned char *)(a1 + 373) & 0x10) == 0)
        {
          if (!*(void *)(a1 + 16))
          {
            id v68 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            char v69 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v68;
          }
          int v70 = PBUnknownFieldAdd();
          unsigned __int8 v16 = (int *)MEMORY[0x1E4F940E0];
          unint64_t v26 = (int *)MEMORY[0x1E4F940C8];
          char v27 = (int *)MEMORY[0x1E4F940B8];
          if (v70) {
            goto LABEL_434;
          }
          int v227 = 0;
          char v23 = v230;
LABEL_476:
          *(void *)(a1 + 372) |= 0x1000uLL;
          goto LABEL_477;
        }
LABEL_335:
        char v183 = PBReaderSkipValueWithTag();
        char v27 = (int *)MEMORY[0x1E4F940B8];
        unint64_t v26 = (int *)MEMORY[0x1E4F940C8];
        unsigned __int8 v16 = (int *)MEMORY[0x1E4F940E0];
        if ((v183 & 1) == 0) {
          goto LABEL_518;
        }
LABEL_434:
        if (!(v228 & 1 | (v7 != 0)))
        {
          int v227 = 1;
          goto LABEL_519;
        }
        char v22 = v229;
        char v23 = v230;
        if (*(void *)(v3 + *v24) >= *(void *)(v3 + *v16)) {
          goto LABEL_474;
        }
        continue;
    }
  }
}

#error "189030E24: too complex function (funcsize=7824)"

void sub_18903DE08(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18903DEF8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOMapItemClientAttributesReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 60))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOMapItemClientAttributesReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 56) = [v8 position];
  *(_DWORD *)(a1 + 60) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOMapItemClientAttributesReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOMapItemClientAttributesReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOMapItemClientAttributesReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOMapItemClientAttributesCallReadAllRecursiveWithoutSynchronized(a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return Specified;
}

void sub_18903E090(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOMapItemClientAttributesReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  char v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 60);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 56)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unsigned int v12 = (vaddv_s16((int16x4_t)(*(void *)&vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int8 *)(a1 + 68)), (uint16x4_t)0xFFFDFFFEFFFFFFFCLL) & 0xFF01FF01FF01FF01))+ (*(unsigned char *)(a1 + 68) & 1));
  while (2)
  {
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v16 = v12 > 2;
        char v17 = v16 & ~(_BYTE)v11 | v9;
        unsigned __int8 v18 = v16 | v11;
        char v53 = v17;
        char v54 = v18 | v17;
        if ((v18 | v8)) {
          uint64_t v19 = 0;
        }
        else {
          uint64_t v19 = a3;
        }
        char v55 = (v19 == 0) | v18;
        BOOL v56 = v18;
        uint64_t v20 = (int *)MEMORY[0x1E4F940E8];
        BOOL v21 = (int *)MEMORY[0x1E4F940C8];
        char v22 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v12;
LABEL_7:
        uint64_t v13 = v9;
LABEL_8:
        uint64_t v14 = v10;
        uint64_t v15 = v11;
LABEL_10:
        ++v7;
        uint64_t v9 = v13;
        uint64_t v10 = v14;
        uint64_t v11 = v15;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v20) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v21)) {
      goto LABEL_79;
    }
    char v23 = 0;
    unsigned int v24 = 0;
    unint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = *v20;
      uint64_t v27 = *(void *)(v3 + v26);
      unint64_t v28 = v27 + 1;
      if (v27 == -1 || v28 > *(void *)(v3 + *v6)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(v3 + *v22) + v27);
      *(void *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0) {
        goto LABEL_25;
      }
      v23 += 7;
      if (v24++ >= 9)
      {
        unint64_t v25 = 0;
        int v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v21) = 1;
LABEL_25:
    int v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(unsigned char *)(v3 + *v21)) {
      unint64_t v25 = 0;
    }
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_79:
      int v51 = 1;
      goto LABEL_80;
    }
    unint64_t v33 = v25 >> 3;
    BOOL v34 = v56;
    if ((v55 & 1) == 0)
    {
      BOOL v35 = v19;
      do
      {
        int v37 = *v35++;
        int v36 = v37;
        BOOL v34 = v37 != 0;
        if (v37) {
          BOOL v38 = v36 == v33;
        }
        else {
          BOOL v38 = 1;
        }
      }
      while (!v38);
    }
    switch((int)v33)
    {
      case 1:
        if (!v34) {
          goto LABEL_66;
        }
        if ((*(unsigned char *)(a1 + 68) & 2) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_98;
          }
          unint64_t v39 = objc_alloc_init(GEOMapItemAddressBookAttributes);
          if (GEOMapItemAddressBookAttributesReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1))
          {
            PBReaderRecallMark();
            uint64_t v40 = 24;
            goto LABEL_65;
          }
          goto LABEL_97;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_98;
        }
        char v46 = *(unsigned char *)(a1 + 68) << 6;
        goto LABEL_76;
      case 2:
        if (!v34) {
          goto LABEL_66;
        }
        if ((*(unsigned char *)(a1 + 68) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_98;
          }
          char v46 = 8 * *(unsigned char *)(a1 + 68);
          goto LABEL_76;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_98;
        }
        unint64_t v39 = objc_alloc_init(GEOMapItemRoutineAttributes);
        if (!GEOMapItemRoutineAttributesReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1)) {
          goto LABEL_97;
        }
        PBReaderRecallMark();
        uint64_t v40 = 48;
        goto LABEL_65;
      case 3:
        if (!v34) {
          goto LABEL_66;
        }
        if ((*(unsigned char *)(a1 + 68) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_98;
          }
          char v46 = 32 * *(unsigned char *)(a1 + 68);
          goto LABEL_76;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_98;
        }
        unint64_t v39 = objc_alloc_init(GEOMapItemCorrectedLocationAttributes);
        if (!GEOMapItemCorrectedLocationAttributesReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1)) {
          goto LABEL_97;
        }
        PBReaderRecallMark();
        uint64_t v40 = 32;
        goto LABEL_65;
      case 4:
        if (!v34) {
          goto LABEL_66;
        }
        if ((*(unsigned char *)(a1 + 68) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_98;
          }
          char v46 = 16 * *(unsigned char *)(a1 + 68);
LABEL_76:
          v7 += v46 >> 7;
LABEL_77:
          BOOL v21 = (int *)MEMORY[0x1E4F940C8];
          goto LABEL_78;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_98;
        }
        unint64_t v39 = objc_alloc_init(GEOMapItemMapsSyncAttributes);
        if (GEOMapItemMapsSyncAttributesReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1))
        {
          PBReaderRecallMark();
          uint64_t v40 = 40;
LABEL_65:
          BOOL v44 = *(void **)(a1 + v40);
          *(void *)(a1 + v40) = v39;

          --v7;
          goto LABEL_77;
        }
LABEL_97:

LABEL_98:
        int v51 = 0;
        char v52 = &OBJC_IVAR___GEOPDRelatedCollectionSection__collectionIds;
        BOOL v21 = (int *)MEMORY[0x1E4F940C8];
LABEL_81:
        if (v53) {
LABEL_82:
        }
          *(unsigned char *)(a1 + v52[515]) |= 1u;
        if (v56 || (v51 & 1) == 0)
        {
          *(unsigned char *)(a1 + v52[515]) |= 2u;
          *(unsigned char *)(a1 + v52[515]) |= 0x10u;
          *(unsigned char *)(a1 + v52[515]) |= 4u;
          *(unsigned char *)(a1 + v52[515]) |= 8u;
        }
        else if (v19)
        {
          while (1)
          {
            int v47 = *v19++;
            char v48 = 2;
            switch(v47)
            {
              case 0:
                goto LABEL_91;
              case 1:
                goto LABEL_90;
              case 2:
                char v48 = 16;
                goto LABEL_90;
              case 3:
                char v48 = 4;
                goto LABEL_90;
              case 4:
                char v48 = 8;
LABEL_90:
                *(unsigned char *)(a1 + v52[515]) |= v48;
                break;
              default:
                continue;
            }
          }
        }
LABEL_91:
        if (v51) {
          unint64_t v3 = *(unsigned char *)(v3 + *v21) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v56)
        {
          uint64_t v49 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      default:
        if (v53 & 1) == 0 || (*(unsigned char *)(a1 + 68))
        {
LABEL_66:
          char v45 = PBReaderSkipValueWithTag();
          BOOL v21 = (int *)MEMORY[0x1E4F940C8];
          if ((v45 & 1) == 0)
          {
            int v51 = 0;
LABEL_80:
            char v52 = &OBJC_IVAR___GEOPDRelatedCollectionSection__collectionIds;
            goto LABEL_81;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v41 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            int v42 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v41;
          }
          int v43 = PBUnknownFieldAdd();
          BOOL v21 = (int *)MEMORY[0x1E4F940C8];
          if (!v43)
          {
            int v51 = 0;
            char v52 = &OBJC_IVAR___GEOPDRelatedCollectionSection__collectionIds;
            goto LABEL_82;
          }
        }
LABEL_78:
        if (!(v54 & 1 | (v7 != 0))) {
          goto LABEL_79;
        }
        continue;
    }
  }
}

BOOL GEOVLFDeviceOrientationReadAllFrom(uint64_t a1, void *a2)
{
  unint64_t v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    uint64_t v4 = (int *)MEMORY[0x1E4F940E8];
    id v5 = (int *)MEMORY[0x1E4F940E0];
    char v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v3[*v6]) {
          break;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          if (v9++ >= 9)
          {
            unint64_t v10 = 0;
            int v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v16 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v16 || (v10 & 7) == 4) {
          break;
        }
        if ((v10 >> 3) == 2)
        {
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v20 = 0;
          *(unsigned char *)(a1 + 16) |= 1u;
          while (1)
          {
            uint64_t v29 = *v4;
            uint64_t v30 = *(void *)&v3[v29];
            unint64_t v31 = v30 + 1;
            if (v30 == -1 || v31 > *(void *)&v3[*v5]) {
              break;
            }
            char v32 = *(unsigned char *)(*(void *)&v3[*v7] + v30);
            *(void *)&v3[v29] = v31;
            v20 |= (unint64_t)(v32 & 0x7F) << v27;
            if ((v32 & 0x80) == 0)
            {
              uint64_t v26 = &OBJC_IVAR___GEOVLFDeviceOrientation__orientation;
              goto LABEL_40;
            }
            v27 += 7;
            BOOL v25 = v28++ > 8;
            if (v25)
            {
              LODWORD(v20) = 0;
              uint64_t v26 = &OBJC_IVAR___GEOVLFDeviceOrientation__orientation;
              goto LABEL_42;
            }
          }
          uint64_t v26 = &OBJC_IVAR___GEOVLFDeviceOrientation__orientation;
LABEL_39:
          v3[*v6] = 1;
        }
        else
        {
          if ((v10 >> 3) != 1)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_48;
            }
            continue;
          }
          char v18 = 0;
          unsigned int v19 = 0;
          uint64_t v20 = 0;
          *(unsigned char *)(a1 + 16) |= 2u;
          while (1)
          {
            uint64_t v21 = *v4;
            uint64_t v22 = *(void *)&v3[v21];
            unint64_t v23 = v22 + 1;
            if (v22 == -1 || v23 > *(void *)&v3[*v5])
            {
              uint64_t v26 = &OBJC_IVAR___GEOVLFDeviceOrientation__relativeTimestampMs;
              goto LABEL_39;
            }
            char v24 = *(unsigned char *)(*(void *)&v3[*v7] + v22);
            *(void *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0) {
              break;
            }
            v18 += 7;
            BOOL v25 = v19++ > 8;
            if (v25)
            {
              LODWORD(v20) = 0;
              uint64_t v26 = &OBJC_IVAR___GEOVLFDeviceOrientation__relativeTimestampMs;
              goto LABEL_42;
            }
          }
          uint64_t v26 = &OBJC_IVAR___GEOVLFDeviceOrientation__relativeTimestampMs;
        }
LABEL_40:
        if (v3[*v6]) {
          LODWORD(v20) = 0;
        }
LABEL_42:
        *(_DWORD *)(a1 + *v26) = v20;
      }
      while (*(void *)&v3[*v4] < *(void *)&v3[*v5]);
    }
    BOOL v33 = v3[*v6] == 0;
  }
  else
  {
LABEL_48:
    BOOL v33 = 0;
  }
  objc_sync_exit(v3);

  return v33;
}

void sub_18903EA80(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18903ED68(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id GEODictionaryRepresentationWithExternalInfo(void *a1)
{
  id v1 = a1;
  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  unint64_t v3 = [v1 appId];
  [v2 setValue:v3 forKey:@"appId"];

  uint64_t v4 = [v1 startTime];

  if (v4)
  {
    id v5 = [v1 startTime];
    [v2 setValue:v5 forKey:@"start"];
  }
  char v6 = [v1 endTime];

  if (v6)
  {
    uint64_t v7 = [v1 endTime];
    [v2 setValue:v7 forKey:@"end"];
  }
  if ([v1 xmitBytes] >= 1)
  {
    char v8 = objc_msgSend(NSNumber, "numberWithLongLong:", objc_msgSend(v1, "xmitBytes"));
    [v2 setValue:v8 forKey:@"xmit"];
  }
  if ([v1 recvBytes] >= 1)
  {
    unsigned int v9 = objc_msgSend(NSNumber, "numberWithLongLong:", objc_msgSend(v1, "recvBytes"));
    [v2 setValue:v9 forKey:@"recv"];
  }
  if ([v1 usedInterface])
  {
    unint64_t v10 = objc_msgSend(NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v1, "usedInterface"));
    [v2 setValue:v10 forKey:@"interface"];
  }
  uint64_t v11 = [v1 requestType];
  [v2 setValue:v11 forKey:@"requestType"];

  uint64_t v12 = [v1 requestSubtype];
  uint64_t v13 = [v12 length];

  if (v13)
  {
    char v14 = [v1 requestSubtype];
    [v2 setValue:v14 forKey:@"requestSubtype"];
  }
  uint64_t v15 = [v1 source];
  uint64_t v16 = [v15 length];

  if (v16)
  {
    char v17 = [v1 source];
    [v2 setValue:v17 forKey:@"source"];
  }
  char v18 = (void *)[v2 copy];

  return v18;
}

void sub_18903F584(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18903F674(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18903F8C4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18903F998(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18903FFAC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDPlacecardLayoutDataReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 44))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOPDPlacecardLayoutDataReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)unint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = [v8 position];
  *(_DWORD *)(a1 + 44) = [v8 length];
  if (a3) {
    unsigned int v9 = (int *)&GEOPDPlacecardLayoutDataReadAllFrom_recursiveTag;
  }
  else {
    unsigned int v9 = (int *)&GEOPDPlacecardLayoutDataReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOPDPlacecardLayoutDataReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOPDPlacecardLayoutDataCallReadAllRecursiveWithoutSynchronized(a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_189045DA0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDPlacecardLayoutDataReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  char v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 44);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 40)];
  char v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  int v12 = ((*(unsigned __int8 *)(a1 + 52) >> 1) & 1)
      + (*(unsigned char *)(a1 + 52) & 1)
      + ((*(unsigned __int8 *)(a1 + 52) >> 2) & 1);
  while (2)
  {
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    switch(a3[v8])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        char v7 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v16 = v12 != 0;
        char v17 = v16 & ~(_BYTE)v11 | v9;
        unsigned __int8 v18 = v16 | v11;
        char v51 = v17;
        char v52 = v18 | v17;
        if ((v18 | v7)) {
          unsigned int v19 = 0;
        }
        else {
          unsigned int v19 = a3;
        }
        char v53 = (v19 == 0) | v18;
        BOOL v54 = v18;
        uint64_t v20 = (int *)MEMORY[0x1E4F940E8];
        uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
        uint64_t v22 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v12;
LABEL_7:
        uint64_t v13 = v9;
LABEL_8:
        uint64_t v14 = v10;
        uint64_t v15 = v11;
LABEL_10:
        ++v8;
        uint64_t v9 = v13;
        uint64_t v10 = v14;
        uint64_t v11 = v15;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(void *)(v3 + *v20) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v21)) {
      goto LABEL_62;
    }
    char v23 = 0;
    unsigned int v24 = 0;
    unint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = *v20;
      uint64_t v27 = *(void *)(v3 + v26);
      unint64_t v28 = v27 + 1;
      if (v27 == -1 || v28 > *(void *)(v3 + *v6)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(v3 + *v22) + v27);
      *(void *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0) {
        goto LABEL_25;
      }
      v23 += 7;
      if (v24++ >= 9)
      {
        unint64_t v25 = 0;
        int v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v21) = 1;
LABEL_25:
    int v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(unsigned char *)(v3 + *v21)) {
      unint64_t v25 = 0;
    }
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_62:
      int v49 = 1;
      goto LABEL_63;
    }
    unint64_t v33 = v25 >> 3;
    BOOL v34 = v54;
    if ((v53 & 1) == 0)
    {
      BOOL v35 = v19;
      do
      {
        int v37 = *v35++;
        int v36 = v37;
        BOOL v34 = v37 != 0;
        if (v37) {
          BOOL v38 = v36 == v33;
        }
        else {
          BOOL v38 = 1;
        }
      }
      while (!v38);
    }
    if (v33 == 2) {
      break;
    }
    if (v33 == 1)
    {
      if (v34 && (*(unsigned char *)(a1 + 52) & 4) == 0)
      {
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_82;
        }
        unint64_t v39 = objc_alloc_init(GEOPDModuleConfiguration);
        if (!GEOPDModuleConfigurationReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1)) {
          goto LABEL_81;
        }
        PBReaderRecallMark();
        -[GEOPDPlacecardLayoutData _addNoFlagsModuleConfiguration:](a1, v39);

        goto LABEL_60;
      }
    }
    else if ((v51 & 1) != 0 && (*(unsigned char *)(a1 + 52) & 1) == 0)
    {
      if (!*(void *)(a1 + 16))
      {
        id v41 = objc_alloc_init(MEMORY[0x1E4F940B0]);
        int v42 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v41;
      }
      int v43 = PBUnknownFieldAdd();
      uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
      if (!v43)
      {
        int v49 = 0;
        unint64_t v50 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__flags;
        goto LABEL_65;
      }
      goto LABEL_61;
    }
LABEL_56:
    char v44 = PBReaderSkipValueWithTag();
    uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
    if ((v44 & 1) == 0)
    {
      int v49 = 0;
LABEL_63:
      unint64_t v50 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__flags;
      goto LABEL_64;
    }
LABEL_61:
    if (!(v52 & 1 | (v8 != 0))) {
      goto LABEL_62;
    }
  }
  if (!v34) {
    goto LABEL_56;
  }
  if ((*(unsigned char *)(a1 + 52) & 2) != 0)
  {
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      goto LABEL_82;
    }
    v8 += *(unsigned __int8 *)(a1 + 52) << 30 >> 31;
    goto LABEL_60;
  }
  if ((PBReaderPlaceMark() & 1) == 0) {
    goto LABEL_82;
  }
  unint64_t v39 = objc_alloc_init(GEOPDPlacecardLayoutConfiguration);
  if (GEOPDPlacecardLayoutConfigurationReadAllFrom(v39, (void *)v3, v10 & 1))
  {
    PBReaderRecallMark();
    uint64_t v40 = *(void **)(a1 + 24);
    *(void *)(a1 + 24) = v39;

    --v8;
LABEL_60:
    uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
    goto LABEL_61;
  }
LABEL_81:

LABEL_82:
  int v49 = 0;
  unint64_t v50 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__flags;
  uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
LABEL_64:
  if ((v51 & 1) == 0) {
    goto LABEL_66;
  }
LABEL_65:
  *(unsigned char *)(a1 + v50[235]) |= 1u;
LABEL_66:
  if (v54 || (v49 & 1) == 0)
  {
    *(unsigned char *)(a1 + v50[235]) |= 4u;
    *(unsigned char *)(a1 + v50[235]) |= 2u;
    goto LABEL_75;
  }
  if (v19)
  {
    while (1)
    {
      int v46 = *v19++;
      int v45 = v46;
      if (v46 == 1) {
        break;
      }
      if (v45 == 2)
      {
LABEL_71:
        *(unsigned char *)(a1 + v50[235]) |= v45;
      }
      else if (!v45)
      {
        goto LABEL_75;
      }
    }
    LOBYTE(v45) = 4;
    goto LABEL_71;
  }
LABEL_75:
  if (v49) {
    unint64_t v3 = *(unsigned char *)(v3 + *v21) == 0;
  }
  else {
    unint64_t v3 = 0;
  }
  if (v54)
  {
    int v47 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  return v3;
}

void sub_1890469FC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOURLCameraReadAllFrom(uint64_t a1, void *a2)
{
  unint64_t v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    uint64_t v4 = (int *)MEMORY[0x1E4F940E8];
    id v5 = (int *)MEMORY[0x1E4F940E0];
    char v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      char v7 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v3[*v6]) {
          break;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          if (v9++ >= 9)
          {
            unint64_t v10 = 0;
            int v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v16 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v16 || (v10 & 7) == 4) {
          break;
        }
        switch((v10 >> 3))
        {
          case 1u:
            *(unsigned char *)(a1 + 48) |= 4u;
            uint64_t v18 = *v4;
            unint64_t v19 = *(void *)&v3[v18];
            if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(void *)&v3[*v5])
            {
              uint64_t v20 = *(void *)(*(void *)&v3[*v7] + v19);
              *(void *)&v3[v18] = v19 + 8;
            }
            else
            {
              v3[*v6] = 1;
              uint64_t v20 = 0;
            }
            char v29 = &OBJC_IVAR___GEOURLCamera__latitude;
            goto LABEL_47;
          case 2u:
            *(unsigned char *)(a1 + 48) |= 8u;
            uint64_t v21 = *v4;
            unint64_t v22 = *(void *)&v3[v21];
            if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(void *)&v3[*v5])
            {
              uint64_t v20 = *(void *)(*(void *)&v3[*v7] + v22);
              *(void *)&v3[v21] = v22 + 8;
            }
            else
            {
              v3[*v6] = 1;
              uint64_t v20 = 0;
            }
            char v29 = &OBJC_IVAR___GEOURLCamera__longitude;
            goto LABEL_47;
          case 3u:
            *(unsigned char *)(a1 + 48) |= 2u;
            uint64_t v23 = *v4;
            unint64_t v24 = *(void *)&v3[v23];
            if (v24 <= 0xFFFFFFFFFFFFFFF7 && v24 + 8 <= *(void *)&v3[*v5])
            {
              uint64_t v20 = *(void *)(*(void *)&v3[*v7] + v24);
              *(void *)&v3[v23] = v24 + 8;
            }
            else
            {
              v3[*v6] = 1;
              uint64_t v20 = 0;
            }
            char v29 = &OBJC_IVAR___GEOURLCamera__heading;
            goto LABEL_47;
          case 4u:
            *(unsigned char *)(a1 + 48) |= 0x10u;
            uint64_t v25 = *v4;
            unint64_t v26 = *(void *)&v3[v25];
            if (v26 <= 0xFFFFFFFFFFFFFFF7 && v26 + 8 <= *(void *)&v3[*v5])
            {
              uint64_t v20 = *(void *)(*(void *)&v3[*v7] + v26);
              *(void *)&v3[v25] = v26 + 8;
            }
            else
            {
              v3[*v6] = 1;
              uint64_t v20 = 0;
            }
            char v29 = &OBJC_IVAR___GEOURLCamera__pitch;
            goto LABEL_47;
          case 5u:
            *(unsigned char *)(a1 + 48) |= 1u;
            uint64_t v27 = *v4;
            unint64_t v28 = *(void *)&v3[v27];
            if (v28 <= 0xFFFFFFFFFFFFFFF7 && v28 + 8 <= *(void *)&v3[*v5])
            {
              uint64_t v20 = *(void *)(*(void *)&v3[*v7] + v28);
              *(void *)&v3[v27] = v28 + 8;
            }
            else
            {
              v3[*v6] = 1;
              uint64_t v20 = 0;
            }
            char v29 = &OBJC_IVAR___GEOURLCamera__altitude;
LABEL_47:
            *(void *)(a1 + *v29) = v20;
            break;
          default:
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_50;
            }
            break;
        }
      }
      while (*(void *)&v3[*v4] < *(void *)&v3[*v5]);
    }
    BOOL v30 = v3[*v6] == 0;
  }
  else
  {
LABEL_50:
    BOOL v30 = 0;
  }
  objc_sync_exit(v3);

  return v30;
}

void sub_189046DBC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void ___initStorage_block_invoke(uint64_t a1)
{
  BOOL v1 = *(unsigned char *)(a1 + 32) == 0;
  id v2 = off_1E53D3C60;
  if (*(unsigned char *)(a1 + 32)) {
    id v2 = off_1E53D3C58;
  }
  id v3 = objc_alloc_init(*v2);
  uint64_t v4 = (void *)_MergedGlobals_295[v1];
  _MergedGlobals_295[v1] = (uint64_t)v3;
}

void ___initStorage_block_invoke_0()
{
  v35[1] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v0 = +[GEOFilePaths pathFor:4];
  BOOL v1 = [v0 stringByAppendingPathComponent:@"GEODefaultsStore.db"];

  id v2 = +[GEOFilePaths pathFor:32800];
  id v3 = +[GEOFilePaths pathFor:32];
  uint64_t v4 = [MEMORY[0x1E4F28CB8] defaultManager];
  if (([v4 fileExistsAtPath:v3] & 1) == 0)
  {
    id v34 = (id)*MEMORY[0x1E4F28330];
    v35[0] = &unk_1ED73E098;
    id v5 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v35 forKeys:&v34 count:1];
    char v6 = [MEMORY[0x1E4F28CB8] defaultManager];
    char v7 = [v3 stringByDeletingLastPathComponent];
    [v6 createDirectoryAtPath:v7 withIntermediateDirectories:1 attributes:v5 error:0];
  }
  char v8 = [MEMORY[0x1E4F28CB8] defaultManager];
  char v9 = [v8 fileExistsAtPath:v3];

  if (!+[GEOSQLiteDB migrateAllDBFilesFrom:v1 to:v3]
    || (BOOL v10 = +[GEOSQLiteDB migrateAllDBFilesFrom:v2 to:v3],
        uint64_t v11 = v3,
        !v10))
  {
    uint64_t v11 = v1;
  }
  id v12 = v11;
  unint64_t v13 = [[GEOConfigPersistence alloc] initWithDBPath:v12];

  if ((v9 & 1) == 0)
  {
    char v14 = v13;
    uint64_t v15 = +[GEOFilePaths pathFor:4];
    int v16 = [v15 stringByAppendingPathComponent:@"GEOCacheStore.plist"];

    char v17 = [MEMORY[0x1E4F28CB8] defaultManager];
    int v18 = [v17 fileExistsAtPath:v16];

    if (!v18)
    {
LABEL_13:

      goto LABEL_14;
    }
    id v19 = objc_alloc(MEMORY[0x1E4F1C9E8]);
    uint64_t v20 = [MEMORY[0x1E4F1CB10] fileURLWithPath:v16];
    v35[0] = 0;
    uint64_t v21 = (void *)[v19 initWithContentsOfURL:v20 error:v35];
    id v22 = v35[0];

    if (v21)
    {
      [(GEOConfigPersistence *)v14 setDefault:v21 forKeyPath:@"/"];
      uint64_t v23 = [MEMORY[0x1E4F28CB8] defaultManager];
      id v34 = v22;
      [v23 removeItemAtPath:v16 error:&v34];
      id v24 = v34;

      id v22 = v24;
    }
    else
    {
      if (v22) {
        goto LABEL_12;
      }
      uint64_t v23 = [MEMORY[0x1E4F28CB8] defaultManager];
      id v34 = 0;
      [v23 removeItemAtPath:v16 error:&v34];
      id v22 = v34;
    }

LABEL_12:
    goto LABEL_13;
  }
LABEL_14:
  uint64_t v25 = -[GEOConfigStorageSQLiteBase initWithSource:persister:]((id *)[GEOConfigStorageSQLite alloc], (void *)7, v13);
  unint64_t v26 = (void *)qword_1EB2A02E0;
  qword_1EB2A02E0 = (uint64_t)v25;

  uint64_t v27 = +[GEOPlatform sharedPlatform];
  if ([v27 supportsMultiUser])
  {
    unint64_t v28 = +[GEOFilePaths pathFor:31];
    char v29 = [[GEOConfigPersistence alloc] initWithDBPath:v28];
  }
  else
  {
    char v29 = v13;
  }

  BOOL v30 = -[GEOConfigStorageSQLiteBase initWithSource:persister:]((id *)[GEOConfigStorageSQLite alloc], (void *)6, v29);
  int v31 = (void *)_MergedGlobals_302;
  _MergedGlobals_302 = (uint64_t)v30;

  char v32 = -[GEOConfigStorageSQLiteBase initWithSource:persister:]((id *)[GEOConfigStorageXPC alloc], (void *)8, v29);
  unint64_t v33 = (void *)qword_1EB2A02E8;
  qword_1EB2A02E8 = (uint64_t)v32;
}

uint64_t GEORPSearchFeedbackContextHasSensitiveFields(void *a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  uint64_t v4 = [a1 requestContext];
  unsigned __int8 v5 = GEORPPlaceRequestResponseHasSensitiveFields(v4, a2);

  if (v5) {
    return 1;
  }
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  char v7 = objc_msgSend(a1, "autocompleteSuggestionLists", 0);
  uint64_t v8 = [v7 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v14;
    while (2)
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v14 != v10) {
          objc_enumerationMutation(v7);
        }
        if (GEORPSuggestionListHasSensitiveFields(*(void **)(*((void *)&v13 + 1) + 8 * v11), a2))
        {
          uint64_t v6 = 1;
          goto LABEL_15;
        }
        ++v11;
      }
      while (v9 != v11);
      uint64_t v9 = [v7 countByEnumeratingWithState:&v13 objects:v17 count:16];
      if (v9) {
        continue;
      }
      break;
    }
  }
  uint64_t v6 = 0;
LABEL_15:

  return v6;
}

unint64_t GEOPDVectorPoiDisplayDVReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 72));
  uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 68);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 64)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unsigned int v12 = (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int16 *)(a1 + 92)), (uint16x4_t)0xFFFBFFF7FFF9FFF8), (int8x8_t)0x1000100010001))+ ((*(_WORD *)(a1 + 92) >> 6) & 1)+ ((*(_WORD *)(a1 + 92) >> 4) & 1));
  while (2)
  {
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v16 = v12 > 3;
        char v17 = v16 & ~(_BYTE)v11 | v9;
        unsigned __int8 v18 = v16 | v11;
        char v80 = v17;
        char v81 = v18 | v17;
        if ((v18 | v8)) {
          id v19 = 0;
        }
        else {
          id v19 = a3;
        }
        uint64_t v20 = (int *)MEMORY[0x1E4F940E8];
        uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
        char v82 = (v19 == 0) | v18;
        BOOL v83 = v18;
        id v22 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v12;
LABEL_7:
        uint64_t v13 = v9;
LABEL_8:
        uint64_t v14 = v10;
        uint64_t v15 = v11;
LABEL_10:
        ++v7;
        uint64_t v9 = v13;
        uint64_t v10 = v14;
        uint64_t v11 = v15;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v20) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v21)) {
      goto LABEL_135;
    }
    char v23 = 0;
    unsigned int v24 = 0;
    unint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = *v20;
      uint64_t v27 = *(void *)(v3 + v26);
      unint64_t v28 = v27 + 1;
      if (v27 == -1 || v28 > *(void *)(v3 + *v6)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(v3 + *v22) + v27);
      *(void *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0) {
        goto LABEL_25;
      }
      v23 += 7;
      BOOL v30 = v24++ >= 9;
      if (v30)
      {
        unint64_t v25 = 0;
        int v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v21) = 1;
LABEL_25:
    int v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(unsigned char *)(v3 + *v21)) {
      unint64_t v25 = 0;
    }
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_135:
      int v78 = 1;
      goto LABEL_136;
    }
    unint64_t v33 = v25 >> 3;
    BOOL v34 = v83;
    if ((v82 & 1) == 0)
    {
      BOOL v35 = v19;
      do
      {
        int v37 = *v35++;
        int v36 = v37;
        BOOL v34 = v37 != 0;
        if (v37) {
          BOOL v38 = v36 == v33;
        }
        else {
          BOOL v38 = 1;
        }
      }
      while (!v38);
    }
    switch((int)v33)
    {
      case 1:
        if ((v8 & 1) == 0) {
          goto LABEL_103;
        }
        char v39 = 0;
        unsigned int v40 = 0;
        uint64_t v41 = 0;
        *(_WORD *)(a1 + 92) |= 2u;
        while (1)
        {
          uint64_t v42 = *v20;
          uint64_t v43 = *(void *)(v3 + v42);
          unint64_t v44 = v43 + 1;
          if (v43 == -1 || v44 > *(void *)(v3 + *v6)) {
            break;
          }
          char v45 = *(unsigned char *)(*(void *)(v3 + *v22) + v43);
          *(void *)(v3 + v42) = v44;
          v41 |= (unint64_t)(v45 & 0x7F) << v39;
          if ((v45 & 0x80) == 0) {
            goto LABEL_106;
          }
          v39 += 7;
          BOOL v30 = v40++ >= 9;
          if (v30)
          {
            LODWORD(v41) = 0;
            goto LABEL_108;
          }
        }
        *(unsigned char *)(v3 + *v21) = 1;
LABEL_106:
        if (*(unsigned char *)(v3 + *v21)) {
          LODWORD(v41) = 0;
        }
LABEL_108:
        uint64_t v72 = 80;
        goto LABEL_117;
      case 2:
        if (!v34) {
          goto LABEL_103;
        }
        if ((*(_WORD *)(a1 + 92) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_154;
          }
          __int16 v73 = *(_WORD *)(a1 + 92) << 8;
          goto LABEL_132;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_154;
        }
        int v46 = objc_alloc_init(GEOPDZoomInfo);
        if (!GEOPDZoomInfoReadAllFrom((uint64_t)v46, (void *)v3)) {
          goto LABEL_153;
        }
        PBReaderRecallMark();
        uint64_t v47 = 40;
        goto LABEL_88;
      case 3:
        if ((v8 & 1) == 0) {
          goto LABEL_103;
        }
        char v48 = 0;
        unsigned int v49 = 0;
        uint64_t v41 = 0;
        *(_WORD *)(a1 + 92) |= 1u;
        while (2)
        {
          uint64_t v50 = *v20;
          uint64_t v51 = *(void *)(v3 + v50);
          unint64_t v52 = v51 + 1;
          if (v51 == -1 || v52 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v21) = 1;
          }
          else
          {
            char v53 = *(unsigned char *)(*(void *)(v3 + *v22) + v51);
            *(void *)(v3 + v50) = v52;
            v41 |= (unint64_t)(v53 & 0x7F) << v48;
            if (v53 < 0)
            {
              v48 += 7;
              BOOL v30 = v49++ >= 9;
              if (v30)
              {
                LODWORD(v41) = 0;
                goto LABEL_112;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v21)) {
          LODWORD(v41) = 0;
        }
LABEL_112:
        uint64_t v72 = 76;
        goto LABEL_117;
      case 4:
        if (!v34) {
          goto LABEL_103;
        }
        if ((*(_WORD *)(a1 + 92) & 0x100) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_154;
          }
          __int16 v73 = *(_WORD *)(a1 + 92) << 7;
          goto LABEL_132;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_154;
        }
        int v46 = objc_alloc_init(GEOPDZoomInfo);
        if (!GEOPDZoomInfoReadAllFrom((uint64_t)v46, (void *)v3)) {
          goto LABEL_153;
        }
        PBReaderRecallMark();
        uint64_t v47 = 48;
        goto LABEL_88;
      case 5:
        if (!v34) {
          goto LABEL_103;
        }
        if ((*(_WORD *)(a1 + 92) & 0x200) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_154;
          }
          __int16 v73 = *(_WORD *)(a1 + 92) << 6;
          goto LABEL_132;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_154;
        }
        int v46 = objc_alloc_init(GEOPDCustomLandmark);
        if (!GEOPDCustomLandmarkReadAllFrom((uint64_t)v46, (void *)v3)) {
          goto LABEL_153;
        }
        PBReaderRecallMark();
        uint64_t v47 = 56;
        goto LABEL_88;
      case 6:
        if ((v8 & 1) == 0) {
          goto LABEL_103;
        }
        char v54 = 0;
        unsigned int v55 = 0;
        uint64_t v41 = 0;
        *(_WORD *)(a1 + 92) |= 4u;
        while (2)
        {
          uint64_t v56 = *v20;
          uint64_t v57 = *(void *)(v3 + v56);
          unint64_t v58 = v57 + 1;
          if (v57 == -1 || v58 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v21) = 1;
          }
          else
          {
            char v59 = *(unsigned char *)(*(void *)(v3 + *v22) + v57);
            *(void *)(v3 + v56) = v58;
            v41 |= (unint64_t)(v59 & 0x7F) << v54;
            if (v59 < 0)
            {
              v54 += 7;
              BOOL v30 = v55++ >= 9;
              if (v30)
              {
                LODWORD(v41) = 0;
                goto LABEL_116;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v21)) {
          LODWORD(v41) = 0;
        }
LABEL_116:
        uint64_t v72 = 84;
LABEL_117:
        *(_DWORD *)(a1 + v72) = v41;
        goto LABEL_134;
      case 7:
        if (!v34) {
          goto LABEL_103;
        }
        if ((*(_WORD *)(a1 + 92) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_154;
          }
          __int16 v73 = *(_WORD *)(a1 + 92) << 10;
          goto LABEL_132;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_154;
        }
        int v46 = objc_alloc_init(GEOPDZoomInfo);
        if (!GEOPDZoomInfoReadAllFrom((uint64_t)v46, (void *)v3)) {
          goto LABEL_153;
        }
        PBReaderRecallMark();
        uint64_t v47 = 24;
        goto LABEL_88;
      case 8:
        if (!v34) {
          goto LABEL_103;
        }
        if ((*(_WORD *)(a1 + 92) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_154;
          }
          __int16 v73 = *(_WORD *)(a1 + 92) << 9;
LABEL_132:
          v7 += v73 >> 15;
LABEL_133:
          uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
          id v22 = (int *)MEMORY[0x1E4F940B8];
LABEL_134:
          if (!(v81 & 1 | (v7 != 0))) {
            goto LABEL_135;
          }
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_154;
        }
        int v46 = objc_alloc_init(GEOPDZoomInfo);
        if (GEOPDZoomInfoReadAllFrom((uint64_t)v46, (void *)v3))
        {
          PBReaderRecallMark();
          uint64_t v47 = 32;
LABEL_88:
          char v60 = *(void **)(a1 + v47);
          *(void *)(a1 + v47) = v46;

          --v7;
          goto LABEL_133;
        }
LABEL_153:

LABEL_154:
        int v78 = 0;
        uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
LABEL_136:
        unsigned int v79 = &OBJC_IVAR___GEOPDAutocompleteParametersAllEntriesWithBrowse__querySuggestionEntry;
        if (v80) {
LABEL_137:
        }
          *(_WORD *)(a1 + v79[835]) |= 0x10u;
        if (v83 || (v78 & 1) == 0)
        {
          *(_WORD *)(a1 + v79[835]) |= 0x80u;
          *(_WORD *)(a1 + v79[835]) |= 0x100u;
          *(_WORD *)(a1 + v79[835]) |= 0x200u;
          *(_WORD *)(a1 + v79[835]) |= 0x20u;
          *(_WORD *)(a1 + v79[835]) |= 0x40u;
        }
        else if (v19)
        {
          while (1)
          {
            int v74 = *v19++;
            __int16 v75 = 128;
            switch(v74)
            {
              case 0:
                goto LABEL_147;
              case 2:
                goto LABEL_146;
              case 4:
                __int16 v75 = 256;
                goto LABEL_146;
              case 5:
                __int16 v75 = 512;
                goto LABEL_146;
              case 7:
                __int16 v75 = 32;
                goto LABEL_146;
              case 8:
                __int16 v75 = 64;
LABEL_146:
                *(_WORD *)(a1 + v79[835]) |= v75;
                break;
              default:
                continue;
            }
          }
        }
LABEL_147:
        if (v78) {
          unint64_t v3 = *(unsigned char *)(v3 + *v21) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v83)
        {
          unint64_t v76 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      case 9:
        if ((v8 & 1) == 0) {
          goto LABEL_103;
        }
        char v61 = 0;
        unsigned int v62 = 0;
        uint64_t v63 = 0;
        *(_WORD *)(a1 + 92) |= 8u;
        while (2)
        {
          uint64_t v64 = *v20;
          uint64_t v65 = *(void *)(v3 + v64);
          unint64_t v66 = v65 + 1;
          if (v65 == -1 || v66 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v21) = 1;
          }
          else
          {
            char v67 = *(unsigned char *)(*(void *)(v3 + *v22) + v65);
            *(void *)(v3 + v64) = v66;
            v63 |= (unint64_t)(v67 & 0x7F) << v61;
            if (v67 < 0)
            {
              v61 += 7;
              BOOL v30 = v62++ >= 9;
              if (v30)
              {
                uint64_t v63 = 0;
                goto LABEL_121;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v21)) {
          uint64_t v63 = 0;
        }
LABEL_121:
        *(unsigned char *)(a1 + 88) = v63 != 0;
        goto LABEL_134;
      default:
        if ((v80 & 1) == 0 || (*(_WORD *)(a1 + 92) & 0x10) != 0)
        {
LABEL_103:
          char v71 = PBReaderSkipValueWithTag();
          id v22 = (int *)MEMORY[0x1E4F940B8];
          uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
          if ((v71 & 1) == 0)
          {
            int v78 = 0;
            goto LABEL_136;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v68 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            char v69 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v68;
          }
          int v70 = PBUnknownFieldAdd();
          uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
          id v22 = (int *)MEMORY[0x1E4F940B8];
          if (!v70)
          {
            int v78 = 0;
            unsigned int v79 = &OBJC_IVAR___GEOPDAutocompleteParametersAllEntriesWithBrowse__querySuggestionEntry;
            goto LABEL_137;
          }
        }
        goto LABEL_134;
    }
  }
}

void sub_189049E50(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOResourcesIsDirty(uint64_t a1)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 488));
  uint64_t v2 = *(void *)(a1 + 496);
  if ((v2 & 0xFFFFFFFFFFFFFFCLL) == 0)
  {
    if ((v2 & 0x20000000000000) != 0)
    {
      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      id v4 = *(id *)(a1 + 432);
      uint64_t v5 = [v4 countByEnumeratingWithState:&v52 objects:v61 count:16];
      if (v5)
      {
        uint64_t v6 = v5;
        uint64_t v7 = *(void *)v53;
LABEL_6:
        uint64_t v8 = 0;
        while (1)
        {
          if (*(void *)v53 != v7) {
            objc_enumerationMutation(v4);
          }
          if (GEOTileSetIsDirty(*(os_unfair_lock_s **)(*((void *)&v52 + 1) + 8 * v8))) {
            goto LABEL_66;
          }
          if (v6 == ++v8)
          {
            uint64_t v6 = [v4 countByEnumeratingWithState:&v52 objects:v61 count:16];
            if (v6) {
              goto LABEL_6;
            }
            break;
          }
        }
      }

      uint64_t v2 = *(void *)(a1 + 496);
    }
    if ((v2 & 0x10000000000) != 0)
    {
      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      id v4 = *(id *)(a1 + 328);
      uint64_t v9 = [v4 countByEnumeratingWithState:&v48 objects:v60 count:16];
      if (v9)
      {
        uint64_t v10 = v9;
        uint64_t v11 = *(void *)v49;
LABEL_16:
        uint64_t v12 = 0;
        while (1)
        {
          if (*(void *)v49 != v11) {
            objc_enumerationMutation(v4);
          }
          uint64_t v13 = *(void *)(*((void *)&v48 + 1) + 8 * v12);
          if (v13)
          {
            os_unfair_lock_lock_with_options();
            os_unfair_lock_assert_owner((const os_unfair_lock *)(v13 + 80));
            int v14 = *(_WORD *)(v13 + 96) & 0x1F0;
            os_unfair_lock_unlock((os_unfair_lock_t)(v13 + 80));
            if (v14) {
              goto LABEL_66;
            }
          }
          if (v10 == ++v12)
          {
            uint64_t v10 = [v4 countByEnumeratingWithState:&v48 objects:v60 count:16];
            if (v10) {
              goto LABEL_16;
            }
            break;
          }
        }
      }

      uint64_t v2 = *(void *)(a1 + 496);
    }
    if ((v2 & 0x80) != 0)
    {
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      id v4 = *(id *)(a1 + 64);
      uint64_t v15 = [v4 countByEnumeratingWithState:&v44 objects:v59 count:16];
      if (v15)
      {
        uint64_t v16 = v15;
        uint64_t v17 = *(void *)v45;
LABEL_27:
        uint64_t v18 = 0;
        while (1)
        {
          if (*(void *)v45 != v17) {
            objc_enumerationMutation(v4);
          }
          if (GEOAttributionIsDirty(*(void *)(*((void *)&v44 + 1) + 8 * v18))) {
            goto LABEL_66;
          }
          if (v16 == ++v18)
          {
            uint64_t v16 = [v4 countByEnumeratingWithState:&v44 objects:v59 count:16];
            if (v16) {
              goto LABEL_27;
            }
            break;
          }
        }
      }

      uint64_t v2 = *(void *)(a1 + 496);
    }
    if ((v2 & 0x80000000000) != 0)
    {
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      id v4 = *(id *)(a1 + 352);
      uint64_t v19 = [v4 countByEnumeratingWithState:&v40 objects:v58 count:16];
      if (v19)
      {
        uint64_t v20 = v19;
        uint64_t v21 = *(void *)v41;
LABEL_37:
        uint64_t v22 = 0;
        while (1)
        {
          if (*(void *)v41 != v21) {
            objc_enumerationMutation(v4);
          }
          if (GEOResourceIsDirty(*(os_unfair_lock_s **)(*((void *)&v40 + 1) + 8 * v22))) {
            goto LABEL_66;
          }
          if (v20 == ++v22)
          {
            uint64_t v20 = [v4 countByEnumeratingWithState:&v40 objects:v58 count:16];
            if (v20) {
              goto LABEL_37;
            }
            break;
          }
        }
      }

      uint64_t v2 = *(void *)(a1 + 496);
    }
    if ((v2 & 0x10000) != 0)
    {
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      id v4 = *(id *)(a1 + 136);
      uint64_t v23 = [v4 countByEnumeratingWithState:&v36 objects:v57 count:16];
      if (v23)
      {
        uint64_t v24 = v23;
        uint64_t v25 = *(void *)v37;
LABEL_47:
        uint64_t v26 = 0;
        while (1)
        {
          if (*(void *)v37 != v25) {
            objc_enumerationMutation(v4);
          }
          uint64_t v27 = *(os_unfair_lock_s **)(*((void *)&v36 + 1) + 8 * v26);
          if (v27)
          {
            os_unfair_lock_lock_with_options();
            os_unfair_lock_assert_owner(v27 + 38);
            int v28 = v27[40]._os_unfair_lock_opaque & 0x3FFFC;
            os_unfair_lock_unlock(v27 + 38);
            if (v28) {
              goto LABEL_66;
            }
          }
          if (v24 == ++v26)
          {
            uint64_t v24 = [v4 countByEnumeratingWithState:&v36 objects:v57 count:16];
            if (v24) {
              goto LABEL_47;
            }
            break;
          }
        }
      }

      uint64_t v2 = *(void *)(a1 + 496);
    }
    if ((v2 & 0x40000000000000) == 0) {
      return 0;
    }
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    id v4 = *(id *)(a1 + 440);
    uint64_t v3 = [v4 countByEnumeratingWithState:&v32 objects:v56 count:16];
    if (!v3)
    {
LABEL_67:

      return v3;
    }
    uint64_t v29 = *(void *)v33;
LABEL_59:
    uint64_t v30 = 0;
    while (1)
    {
      if (*(void *)v33 != v29) {
        objc_enumerationMutation(v4);
      }
      if (GEOURLInfoSetIsDirty(*(void *)(*((void *)&v32 + 1) + 8 * v30))) {
        break;
      }
      if (v3 == ++v30)
      {
        uint64_t v3 = [v4 countByEnumeratingWithState:&v32 objects:v56 count:16];
        if (v3) {
          goto LABEL_59;
        }
        goto LABEL_67;
      }
    }
LABEL_66:
    uint64_t v3 = 1;
    goto LABEL_67;
  }
  return 1;
}

#error "18904A7B0: too complex function (funcsize=11162)"

void sub_189057720(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189057F24(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDSearchBrowseCategorySuggestionParametersReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 104));
  uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 100);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 96)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unsigned int v12 = (unsigned __int16)(vaddv_s16((int16x4_t)(*(void *)&vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int16 *)(a1 + 124)), (uint16x4_t)0xFFF6FFF3FFF2FFF7) & 0xFF81FF81FF81FF81))+ ((*(_WORD *)(a1 + 124) >> 12) & 1)+ ((*(_WORD *)(a1 + 124) >> 11) & 1)+ (HIBYTE(*(_WORD *)(a1 + 124)) & 1));
  while (2)
  {
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v16 = v12 > 3;
        char v17 = v16 & ~(_BYTE)v11 | v9;
        char v18 = v16 | v11;
        if (((v16 | v11) | v8)) {
          uint64_t v19 = 0;
        }
        else {
          uint64_t v19 = a3;
        }
        uint64_t v20 = (int *)MEMORY[0x1E4F940E8];
        int v21 = 1;
        uint64_t v22 = (int *)MEMORY[0x1E4F940C8];
        char v23 = v17;
        if (*(void *)(v3 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(v3 + *v6)) {
          goto LABEL_210;
        }
        char v127 = v17;
        char v129 = v18 | v17;
        char v130 = (v19 == 0) | v18;
        uint64_t v24 = (int *)MEMORY[0x1E4F940B8];
        char v128 = v18;
        break;
      default:
        ++v12;
LABEL_7:
        uint64_t v13 = v9;
LABEL_8:
        uint64_t v14 = v10;
        uint64_t v15 = v11;
LABEL_10:
        ++v7;
        uint64_t v9 = v13;
        uint64_t v10 = v14;
        uint64_t v11 = v15;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(unsigned char *)(v3 + *v22)) {
      goto LABEL_208;
    }
    char v25 = 0;
    unsigned int v26 = 0;
    unint64_t v27 = 0;
    while (1)
    {
      uint64_t v28 = *v20;
      uint64_t v29 = *(void *)(v3 + v28);
      unint64_t v30 = v29 + 1;
      if (v29 == -1 || v30 > *(void *)(v3 + *v6)) {
        break;
      }
      char v31 = *(unsigned char *)(*(void *)(v3 + *v24) + v29);
      *(void *)(v3 + v28) = v30;
      v27 |= (unint64_t)(v31 & 0x7F) << v25;
      if ((v31 & 0x80) == 0) {
        goto LABEL_25;
      }
      v25 += 7;
      BOOL v32 = v26++ >= 9;
      if (v32)
      {
        unint64_t v27 = 0;
        int v33 = *(unsigned __int8 *)(v3 + *v22);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v22) = 1;
LABEL_25:
    int v33 = *(unsigned __int8 *)(v3 + *v22);
    if (*(unsigned char *)(v3 + *v22)) {
      unint64_t v27 = 0;
    }
LABEL_27:
    int v34 = v27 & 7;
    if (v33 || v34 == 4)
    {
LABEL_208:
      int v21 = 1;
      goto LABEL_209;
    }
    unint64_t v36 = v27 >> 3;
    BOOL v37 = v18;
    if ((v130 & 1) == 0)
    {
      long long v38 = v19;
      do
      {
        int v40 = *v38++;
        int v39 = v40;
        BOOL v37 = v40 != 0;
        if (v40) {
          BOOL v41 = v39 == v36;
        }
        else {
          BOOL v41 = 1;
        }
      }
      while (!v41);
    }
    switch((int)v36)
    {
      case 1:
        if (!v37) {
          goto LABEL_150;
        }
        if ((*(_WORD *)(a1 + 124) & 0x4000) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_230;
          }
          long long v42 = objc_alloc_init(GEOPDViewportInfo);
          if (GEOPDViewportInfoReadAllFrom((uint64_t)v42, (void *)v3))
          {
            PBReaderRecallMark();
            uint64_t v43 = 88;
            goto LABEL_134;
          }
          goto LABEL_229;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_230;
        }
        __int16 v114 = 2 * *(_WORD *)(a1 + 124);
        goto LABEL_190;
      case 2:
        if ((v8 & 1) == 0) {
          goto LABEL_150;
        }
        *(_WORD *)(a1 + 124) |= 1u;
        uint64_t v44 = *v20;
        unint64_t v45 = *(void *)(v3 + v44);
        if (v45 <= 0xFFFFFFFFFFFFFFF7 && v45 + 8 <= *(void *)(v3 + *v6))
        {
          uint64_t v46 = *(void *)(*(void *)(v3 + *v24) + v45);
          *(void *)(v3 + v44) = v45 + 8;
        }
        else
        {
          *(unsigned char *)(v3 + *v22) = 1;
          uint64_t v46 = 0;
        }
        *(void *)(a1 + 64) = v46;
        goto LABEL_193;
      case 3:
        if ((v8 & 1) == 0) {
          goto LABEL_150;
        }
        char v47 = 0;
        unsigned int v48 = 0;
        uint64_t v49 = 0;
        *(_WORD *)(a1 + 124) |= 2u;
        while (2)
        {
          uint64_t v50 = *v20;
          uint64_t v51 = *(void *)(v3 + v50);
          unint64_t v52 = v51 + 1;
          if (v51 == -1 || v52 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v22) = 1;
          }
          else
          {
            char v53 = *(unsigned char *)(*(void *)(v3 + *v24) + v51);
            *(void *)(v3 + v50) = v52;
            v49 |= (unint64_t)(v53 & 0x7F) << v47;
            if (v53 < 0)
            {
              v47 += 7;
              BOOL v32 = v48++ >= 9;
              if (v32)
              {
                LODWORD(v49) = 0;
                goto LABEL_155;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v22)) {
          LODWORD(v49) = 0;
        }
LABEL_155:
        uint64_t v111 = 108;
        goto LABEL_176;
      case 4:
        if ((v8 & 1) == 0) {
          goto LABEL_150;
        }
        char v54 = 0;
        unsigned int v55 = 0;
        uint64_t v56 = 0;
        *(_WORD *)(a1 + 124) |= 0x10u;
        while (2)
        {
          uint64_t v57 = *v20;
          uint64_t v58 = *(void *)(v3 + v57);
          unint64_t v59 = v58 + 1;
          if (v58 == -1 || v59 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v22) = 1;
          }
          else
          {
            char v60 = *(unsigned char *)(*(void *)(v3 + *v24) + v58);
            *(void *)(v3 + v57) = v59;
            v56 |= (unint64_t)(v60 & 0x7F) << v54;
            if (v60 < 0)
            {
              v54 += 7;
              BOOL v32 = v55++ >= 9;
              if (v32)
              {
                uint64_t v56 = 0;
                goto LABEL_159;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v22)) {
          uint64_t v56 = 0;
        }
LABEL_159:
        BOOL v112 = v56 != 0;
        uint64_t v113 = 120;
        goto LABEL_181;
      case 5:
        if ((v8 & 1) == 0) {
          goto LABEL_150;
        }
        char v61 = 0;
        unsigned int v62 = 0;
        uint64_t v49 = 0;
        *(_WORD *)(a1 + 124) |= 8u;
        while (2)
        {
          uint64_t v63 = *v20;
          uint64_t v64 = *(void *)(v3 + v63);
          unint64_t v65 = v64 + 1;
          if (v64 == -1 || v65 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v22) = 1;
          }
          else
          {
            char v66 = *(unsigned char *)(*(void *)(v3 + *v24) + v64);
            *(void *)(v3 + v63) = v65;
            v49 |= (unint64_t)(v66 & 0x7F) << v61;
            if (v66 < 0)
            {
              v61 += 7;
              BOOL v32 = v62++ >= 9;
              if (v32)
              {
                LODWORD(v49) = 0;
                goto LABEL_163;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v22)) {
          LODWORD(v49) = 0;
        }
LABEL_163:
        uint64_t v111 = 116;
        goto LABEL_176;
      case 6:
        if (!v37 || (*(_WORD *)(a1 + 124) & 0x200) != 0)
        {
          char v109 = PBReaderSkipValueWithTag();
          uint64_t v20 = (int *)MEMORY[0x1E4F940E8];
          uint64_t v22 = (int *)MEMORY[0x1E4F940C8];
          char v18 = v128;
          goto LABEL_148;
        }
        if (v34 != 2)
        {
          char v115 = 0;
          unsigned int v116 = 0;
          uint64_t v117 = 0;
          unsigned int v118 = (int *)MEMORY[0x1E4F940B8];
          while (1)
          {
            uint64_t v119 = *v20;
            uint64_t v120 = *(void *)(v3 + v119);
            unint64_t v121 = v120 + 1;
            if (v120 == -1 || v121 > *(void *)(v3 + *v6)) {
              break;
            }
            char v122 = *(unsigned char *)(*(void *)(v3 + *v118) + v120);
            *(void *)(v3 + v119) = v121;
            v117 |= (unint64_t)(v122 & 0x7F) << v115;
            if (v122 < 0)
            {
              v115 += 7;
              BOOL v32 = v116++ >= 9;
              if (!v32) {
                continue;
              }
            }
            goto LABEL_207;
          }
          *(unsigned char *)(v3 + *v22) = 1;
LABEL_207:
          PBRepeatedInt32Add();
          goto LABEL_191;
        }
        if (!PBReaderPlaceMark()) {
          goto LABEL_230;
        }
        while (1)
        {
          char v67 = (int *)MEMORY[0x1E4F940E8];
          id v68 = (int *)MEMORY[0x1E4F940C8];
          if (*(void *)(v3 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(v3 + *v6)
            || *(unsigned char *)(v3 + (int)*MEMORY[0x1E4F940C8]))
          {
            break;
          }
          char v69 = 0;
          unsigned int v70 = 0;
          uint64_t v71 = 0;
          uint64_t v72 = (int *)MEMORY[0x1E4F940B8];
          while (1)
          {
            uint64_t v73 = *v67;
            uint64_t v74 = *(void *)(v3 + v73);
            unint64_t v75 = v74 + 1;
            if (v74 == -1 || v75 > *(void *)(v3 + *v6)) {
              break;
            }
            char v76 = *(unsigned char *)(*(void *)(v3 + *v72) + v74);
            *(void *)(v3 + v73) = v75;
            v71 |= (unint64_t)(v76 & 0x7F) << v69;
            if (v76 < 0)
            {
              v69 += 7;
              BOOL v32 = v70++ >= 9;
              if (!v32) {
                continue;
              }
            }
            goto LABEL_86;
          }
          *(unsigned char *)(v3 + *v68) = 1;
LABEL_86:
          PBRepeatedInt32Add();
        }
        PBReaderRecallMark();
        uint64_t v20 = (int *)MEMORY[0x1E4F940E8];
        uint64_t v22 = (int *)MEMORY[0x1E4F940C8];
        char v18 = v128;
        goto LABEL_192;
      case 7:
        if (!v37) {
          goto LABEL_150;
        }
        if ((*(_WORD *)(a1 + 124) & 0x2000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_230;
          }
          __int16 v114 = 4 * *(_WORD *)(a1 + 124);
          goto LABEL_190;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_230;
        }
        long long v42 = objc_alloc_init(GEOPDVenueIdentifier);
        if (!GEOPDVenueIdentifierReadAllFrom((uint64_t)v42, (void *)v3, v10 & 1)) {
          goto LABEL_229;
        }
        PBReaderRecallMark();
        uint64_t v43 = 80;
        goto LABEL_134;
      case 8:
        if ((v8 & 1) == 0) {
          goto LABEL_150;
        }
        char v77 = 0;
        unsigned int v78 = 0;
        uint64_t v79 = 0;
        *(_WORD *)(a1 + 124) |= 0x40u;
        while (2)
        {
          uint64_t v80 = *v20;
          uint64_t v81 = *(void *)(v3 + v80);
          unint64_t v82 = v81 + 1;
          if (v81 == -1 || v82 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v22) = 1;
          }
          else
          {
            char v83 = *(unsigned char *)(*(void *)(v3 + *v24) + v81);
            *(void *)(v3 + v80) = v82;
            v79 |= (unint64_t)(v83 & 0x7F) << v77;
            if (v83 < 0)
            {
              v77 += 7;
              BOOL v32 = v78++ >= 9;
              if (v32)
              {
                uint64_t v79 = 0;
                goto LABEL_167;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v22)) {
          uint64_t v79 = 0;
        }
LABEL_167:
        BOOL v112 = v79 != 0;
        uint64_t v113 = 122;
        goto LABEL_181;
      case 9:
        if ((v8 & 1) == 0) {
          goto LABEL_150;
        }
        char v84 = 0;
        unsigned int v85 = 0;
        uint64_t v86 = 0;
        *(_WORD *)(a1 + 124) |= 0x20u;
        while (2)
        {
          uint64_t v87 = *v20;
          uint64_t v88 = *(void *)(v3 + v87);
          unint64_t v89 = v88 + 1;
          if (v88 == -1 || v89 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v22) = 1;
          }
          else
          {
            char v90 = *(unsigned char *)(*(void *)(v3 + *v24) + v88);
            *(void *)(v3 + v87) = v89;
            v86 |= (unint64_t)(v90 & 0x7F) << v84;
            if (v90 < 0)
            {
              v84 += 7;
              BOOL v32 = v85++ >= 9;
              if (v32)
              {
                uint64_t v86 = 0;
                goto LABEL_171;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v22)) {
          uint64_t v86 = 0;
        }
LABEL_171:
        BOOL v112 = v86 != 0;
        uint64_t v113 = 121;
        goto LABEL_181;
      case 10:
        if ((v8 & 1) == 0) {
          goto LABEL_150;
        }
        char v91 = 0;
        unsigned int v92 = 0;
        uint64_t v49 = 0;
        *(_WORD *)(a1 + 124) |= 4u;
        while (2)
        {
          uint64_t v93 = *v20;
          uint64_t v94 = *(void *)(v3 + v93);
          unint64_t v95 = v94 + 1;
          if (v94 == -1 || v95 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v22) = 1;
          }
          else
          {
            char v96 = *(unsigned char *)(*(void *)(v3 + *v24) + v94);
            *(void *)(v3 + v93) = v95;
            v49 |= (unint64_t)(v96 & 0x7F) << v91;
            if (v96 < 0)
            {
              v91 += 7;
              BOOL v32 = v92++ >= 9;
              if (v32)
              {
                LODWORD(v49) = 0;
                goto LABEL_175;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v22)) {
          LODWORD(v49) = 0;
        }
LABEL_175:
        uint64_t v111 = 112;
LABEL_176:
        *(_DWORD *)(a1 + v111) = v49;
        goto LABEL_193;
      case 11:
        if ((v8 & 1) == 0) {
          goto LABEL_150;
        }
        char v97 = 0;
        unsigned int v98 = 0;
        uint64_t v99 = 0;
        *(_WORD *)(a1 + 124) |= 0x80u;
        while (2)
        {
          uint64_t v100 = *v20;
          uint64_t v101 = *(void *)(v3 + v100);
          unint64_t v102 = v101 + 1;
          if (v101 == -1 || v102 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v22) = 1;
          }
          else
          {
            char v103 = *(unsigned char *)(*(void *)(v3 + *v24) + v101);
            *(void *)(v3 + v100) = v102;
            v99 |= (unint64_t)(v103 & 0x7F) << v97;
            if (v103 < 0)
            {
              v97 += 7;
              BOOL v32 = v98++ >= 9;
              if (v32)
              {
                uint64_t v99 = 0;
                goto LABEL_180;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v22)) {
          uint64_t v99 = 0;
        }
LABEL_180:
        BOOL v112 = v99 != 0;
        uint64_t v113 = 123;
LABEL_181:
        *(unsigned char *)(a1 + v113) = v112;
        goto LABEL_193;
      case 12:
        if (!v37) {
          goto LABEL_150;
        }
        if ((*(_WORD *)(a1 + 124) & 0x400) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_230;
          }
          __int16 v114 = 32 * *(_WORD *)(a1 + 124);
          goto LABEL_190;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_230;
        }
        long long v42 = objc_alloc_init(GEOPDSSearchEvChargingParameters);
        if (!GEOPDSSearchEvChargingParametersReadAllFrom((uint64_t)v42, (void *)v3, v10 & 1)) {
          goto LABEL_229;
        }
        PBReaderRecallMark();
        uint64_t v43 = 48;
        goto LABEL_134;
      case 13:
        if (!v37) {
          goto LABEL_150;
        }
        if ((*(_WORD *)(a1 + 124) & 0x1000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_230;
          }
          __int16 v114 = 8 * *(_WORD *)(a1 + 124);
LABEL_190:
          v7 += v114 >> 15;
LABEL_191:
          char v18 = v128;
          uint64_t v22 = (int *)MEMORY[0x1E4F940C8];
          uint64_t v20 = (int *)MEMORY[0x1E4F940E8];
LABEL_192:
          uint64_t v24 = (int *)MEMORY[0x1E4F940B8];
LABEL_193:
          if (!(v129 & 1 | (v7 != 0)) || *(void *)(v3 + *v20) >= *(void *)(v3 + *v6)) {
            goto LABEL_208;
          }
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_230;
        }
        long long v42 = objc_alloc_init(GEOPDSearchOriginationInfo);
        if (GEOPDSearchOriginationInfoReadAllFrom((uint64_t)v42, (void *)v3, v10 & 1))
        {
          PBReaderRecallMark();
          uint64_t v43 = 72;
LABEL_134:
          char v104 = *(void **)(a1 + v43);
          *(void *)(a1 + v43) = v42;

          --v7;
          goto LABEL_191;
        }
LABEL_229:

LABEL_230:
        int v21 = 0;
        char v18 = v128;
        uint64_t v22 = (int *)MEMORY[0x1E4F940C8];
LABEL_209:
        char v23 = v127;
LABEL_210:
        if (v23) {
LABEL_211:
        }
          *(_WORD *)(a1 + 124) |= 0x100u;
        if (v18 & 1 | ((v21 & 1) == 0))
        {
          *(_WORD *)(a1 + 124) |= 0x4000u;
          *(_WORD *)(a1 + 124) |= 0x200u;
          *(_WORD *)(a1 + 124) |= 0x2000u;
          *(_WORD *)(a1 + 124) |= 0x400u;
          *(_WORD *)(a1 + 124) |= 0x1000u;
          *(_WORD *)(a1 + 124) |= 0x800u;
        }
        else if (v19)
        {
          while (1)
          {
            int v123 = *v19++;
            __int16 v124 = 0x4000;
            switch(v123)
            {
              case 0:
                goto LABEL_222;
              case 1:
                goto LABEL_221;
              case 6:
                __int16 v124 = 512;
                goto LABEL_221;
              case 7:
                __int16 v124 = 0x2000;
                goto LABEL_221;
              case 12:
                __int16 v124 = 1024;
                goto LABEL_221;
              case 13:
                __int16 v124 = 4096;
                goto LABEL_221;
              case 14:
                __int16 v124 = 2048;
LABEL_221:
                *(_WORD *)(a1 + 124) |= v124;
                break;
              default:
                continue;
            }
          }
        }
LABEL_222:
        if (v21)
        {
          unint64_t v3 = *(unsigned char *)(v3 + *v22) == 0;
          if ((v18 & 1) == 0) {
            return v3;
          }
LABEL_226:
          char v125 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        else
        {
          unint64_t v3 = 0;
          if (v18) {
            goto LABEL_226;
          }
        }
        return v3;
      case 14:
        if (v37 && (*(_WORD *)(a1 + 124) & 0x800) == 0)
        {
          char v105 = PBReaderReadString();
          if (v105) {
            -[GEOPDSearchBrowseCategorySuggestionParameters _addNoFlagsInputCategory:](a1, v105);
          }

          goto LABEL_191;
        }
        char v109 = PBReaderSkipValueWithTag();
        char v18 = v128;
        uint64_t v22 = (int *)MEMORY[0x1E4F940C8];
        uint64_t v20 = (int *)MEMORY[0x1E4F940E8];
LABEL_148:
        uint64_t v24 = (int *)MEMORY[0x1E4F940B8];
        if ((v109 & 1) == 0) {
          goto LABEL_228;
        }
        goto LABEL_193;
      default:
        if ((v127 & 1) == 0 || (*(_WORD *)(a1 + 124) & 0x100) != 0)
        {
LABEL_150:
          char v110 = PBReaderSkipValueWithTag();
          uint64_t v24 = (int *)MEMORY[0x1E4F940B8];
          uint64_t v20 = (int *)MEMORY[0x1E4F940E8];
          uint64_t v22 = (int *)MEMORY[0x1E4F940C8];
          char v18 = v128;
          if ((v110 & 1) == 0)
          {
LABEL_228:
            int v21 = 0;
            goto LABEL_209;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v106 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            char v107 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v106;
          }
          int v108 = PBUnknownFieldAdd();
          char v18 = v128;
          uint64_t v22 = (int *)MEMORY[0x1E4F940C8];
          uint64_t v20 = (int *)MEMORY[0x1E4F940E8];
          uint64_t v24 = (int *)MEMORY[0x1E4F940B8];
          if (!v108)
          {
            int v21 = 0;
            goto LABEL_211;
          }
        }
        goto LABEL_193;
    }
  }
}

unint64_t GEOAutomobileOptionsReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 44))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOAutomobileOptionsReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = [v8 position];
  *(_DWORD *)(a1 + 44) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOAutomobileOptionsReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOAutomobileOptionsReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOAutomobileOptionsReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
  {
    [*(id *)(a1 + 24) readAll:1];
    [*(id *)(a1 + 32) readAll:1];
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_189059014(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOAutomobileOptionsReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 44);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 40)];
  char v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  int v12 = ((*(unsigned __int8 *)(a1 + 60) >> 4) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 5) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 3) & 1);
  while (2)
  {
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    switch(a3[v8])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        char v7 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v16 = v12 != 0;
        char v17 = v16 & ~(_BYTE)v11 | v9;
        unsigned __int8 v18 = v16 | v11;
        char v77 = v17;
        char v78 = v7;
        char v79 = v18 | v17;
        if ((v18 | v7)) {
          uint64_t v19 = 0;
        }
        else {
          uint64_t v19 = a3;
        }
        char v80 = (v19 == 0) | v18;
        BOOL v81 = v18;
        uint64_t v20 = (int *)MEMORY[0x1E4F940E8];
        int v21 = (int *)MEMORY[0x1E4F940C8];
        uint64_t v22 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v12;
LABEL_7:
        uint64_t v13 = v9;
LABEL_8:
        uint64_t v14 = v10;
        uint64_t v15 = v11;
LABEL_10:
        ++v8;
        uint64_t v9 = v13;
        uint64_t v10 = v14;
        uint64_t v11 = v15;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v20) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v21)) {
      goto LABEL_102;
    }
    char v23 = 0;
    unsigned int v24 = 0;
    unint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = *v20;
      uint64_t v27 = *(void *)(v3 + v26);
      unint64_t v28 = v27 + 1;
      if (v27 == -1 || v28 > *(void *)(v3 + *v6)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(v3 + *v22) + v27);
      *(void *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0) {
        goto LABEL_25;
      }
      v23 += 7;
      BOOL v30 = v24++ >= 9;
      if (v30)
      {
        unint64_t v25 = 0;
        int v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v21) = 1;
LABEL_25:
    int v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(unsigned char *)(v3 + *v21)) {
      unint64_t v25 = 0;
    }
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_102:
      int v75 = 1;
      goto LABEL_103;
    }
    unint64_t v33 = v25 >> 3;
    BOOL v34 = v81;
    if ((v80 & 1) == 0)
    {
      long long v35 = v19;
      do
      {
        int v37 = *v35++;
        int v36 = v37;
        BOOL v34 = v37 != 0;
        if (v37) {
          BOOL v38 = v36 == v33;
        }
        else {
          BOOL v38 = 1;
        }
      }
      while (!v38);
    }
    switch((int)v33)
    {
      case 1:
        if ((v78 & 1) == 0) {
          goto LABEL_80;
        }
        char v39 = 0;
        unsigned int v40 = 0;
        uint64_t v41 = 0;
        *(unsigned char *)(a1 + 60) |= 2u;
        while (1)
        {
          uint64_t v42 = *v20;
          uint64_t v43 = *(void *)(v3 + v42);
          unint64_t v44 = v43 + 1;
          if (v43 == -1 || v44 > *(void *)(v3 + *v6)) {
            break;
          }
          char v45 = *(unsigned char *)(*(void *)(v3 + *v22) + v43);
          *(void *)(v3 + v42) = v44;
          v41 |= (unint64_t)(v45 & 0x7F) << v39;
          if ((v45 & 0x80) == 0) {
            goto LABEL_83;
          }
          v39 += 7;
          BOOL v30 = v40++ >= 9;
          if (v30)
          {
            uint64_t v41 = 0;
            goto LABEL_85;
          }
        }
        *(unsigned char *)(v3 + *v21) = 1;
LABEL_83:
        if (*(unsigned char *)(v3 + *v21)) {
          uint64_t v41 = 0;
        }
LABEL_85:
        BOOL v67 = v41 != 0;
        uint64_t v68 = 56;
        goto LABEL_94;
      case 2:
        if ((v78 & 1) == 0) {
          goto LABEL_80;
        }
        char v46 = 0;
        unsigned int v47 = 0;
        uint64_t v48 = 0;
        *(unsigned char *)(a1 + 60) |= 1u;
        while (2)
        {
          uint64_t v49 = *v20;
          uint64_t v50 = *(void *)(v3 + v49);
          unint64_t v51 = v50 + 1;
          if (v50 == -1 || v51 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v21) = 1;
          }
          else
          {
            char v52 = *(unsigned char *)(*(void *)(v3 + *v22) + v50);
            *(void *)(v3 + v49) = v51;
            v48 |= (unint64_t)(v52 & 0x7F) << v46;
            if (v52 < 0)
            {
              v46 += 7;
              BOOL v30 = v47++ >= 9;
              if (v30)
              {
                LODWORD(v48) = 0;
                goto LABEL_89;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v21)) {
          LODWORD(v48) = 0;
        }
LABEL_89:
        *(_DWORD *)(a1 + 52) = v48;
        goto LABEL_101;
      case 3:
        if ((v78 & 1) == 0) {
          goto LABEL_80;
        }
        char v53 = 0;
        unsigned int v54 = 0;
        uint64_t v55 = 0;
        *(unsigned char *)(a1 + 60) |= 4u;
        while (2)
        {
          uint64_t v56 = *v20;
          uint64_t v57 = *(void *)(v3 + v56);
          unint64_t v58 = v57 + 1;
          if (v57 == -1 || v58 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v21) = 1;
          }
          else
          {
            char v59 = *(unsigned char *)(*(void *)(v3 + *v22) + v57);
            *(void *)(v3 + v56) = v58;
            v55 |= (unint64_t)(v59 & 0x7F) << v53;
            if (v59 < 0)
            {
              v53 += 7;
              BOOL v30 = v54++ >= 9;
              if (v30)
              {
                uint64_t v55 = 0;
                goto LABEL_93;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v21)) {
          uint64_t v55 = 0;
        }
LABEL_93:
        BOOL v67 = v55 != 0;
        uint64_t v68 = 57;
LABEL_94:
        *(unsigned char *)(a1 + v68) = v67;
        goto LABEL_101;
      case 6:
        if (!v34) {
          goto LABEL_80;
        }
        if ((*(unsigned char *)(a1 + 60) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_123;
          }
          char v69 = 8 * *(unsigned char *)(a1 + 60);
          goto LABEL_99;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_123;
        }
        uint64_t v63 = objc_alloc_init(GEOUserPreferences);
        if (!GEOUserPreferencesReadAllFrom((uint64_t)v63, (void *)v3)) {
          goto LABEL_122;
        }
        PBReaderRecallMark();
        uint64_t v64 = 24;
        goto LABEL_79;
      case 9:
        if (!v34) {
          goto LABEL_80;
        }
        if ((*(unsigned char *)(a1 + 60) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_123;
          }
          char v69 = 4 * *(unsigned char *)(a1 + 60);
LABEL_99:
          v8 += v69 >> 7;
LABEL_100:
          int v21 = (int *)MEMORY[0x1E4F940C8];
          goto LABEL_101;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_123;
        }
        uint64_t v63 = objc_alloc_init(GEOVehicleSpecifications);
        if (GEOVehicleSpecificationsReadAllFrom((uint64_t)v63, (void *)v3, v10 & 1))
        {
          PBReaderRecallMark();
          uint64_t v64 = 32;
LABEL_79:
          unint64_t v65 = *(void **)(a1 + v64);
          *(void *)(a1 + v64) = v63;

          --v8;
          goto LABEL_100;
        }
LABEL_122:

LABEL_123:
        int v75 = 0;
        char v76 = &OBJC_IVAR___GEOComposedRoute__visualInfosForRouteNameLabels;
        int v21 = (int *)MEMORY[0x1E4F940C8];
LABEL_104:
        if (v77) {
LABEL_105:
        }
          *(unsigned char *)(a1 + v76[607]) |= 8u;
        if (v81 || (v75 & 1) == 0)
        {
          *(unsigned char *)(a1 + v76[607]) |= 0x10u;
          *(unsigned char *)(a1 + v76[607]) |= 0x20u;
          goto LABEL_116;
        }
        if (v19)
        {
          while (1)
          {
            int v72 = *v19++;
            int v71 = v72;
            if (v72 == 6) {
              break;
            }
            if (v71 == 9)
            {
              char v70 = 32;
LABEL_112:
              *(unsigned char *)(a1 + v76[607]) |= v70;
            }
            else if (!v71)
            {
              goto LABEL_116;
            }
          }
          char v70 = 16;
          goto LABEL_112;
        }
LABEL_116:
        if (v75) {
          unint64_t v3 = *(unsigned char *)(v3 + *v21) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v81)
        {
          uint64_t v73 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      default:
        if ((v77 & 1) == 0 || (*(unsigned char *)(a1 + 60) & 8) != 0)
        {
LABEL_80:
          char v66 = PBReaderSkipValueWithTag();
          int v21 = (int *)MEMORY[0x1E4F940C8];
          if ((v66 & 1) == 0)
          {
            int v75 = 0;
LABEL_103:
            char v76 = &OBJC_IVAR___GEOComposedRoute__visualInfosForRouteNameLabels;
            goto LABEL_104;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v60 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            char v61 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v60;
          }
          int v62 = PBUnknownFieldAdd();
          int v21 = (int *)MEMORY[0x1E4F940C8];
          if (!v62)
          {
            int v75 = 0;
            char v76 = &OBJC_IVAR___GEOComposedRoute__visualInfosForRouteNameLabels;
            goto LABEL_105;
          }
        }
LABEL_101:
        if (!(v79 & 1 | (v8 != 0))) {
          goto LABEL_102;
        }
        continue;
    }
  }
}

uint64_t geo::codec::decodeSectionEncoding(geo::codec::Allocator *a1, geo::codec::Allocator **a2, int a3, void *a4, uint64_t a5)
{
  uint64_t v43 = 0;
  unint64_t v6 = *((void *)a1 + 2);
  unint64_t v7 = 8 * *((void *)a1 + 1);
  if (v6 + 5 > v7) {
    goto LABEL_59;
  }
  int v9 = 0;
  uint64_t v10 = *(void *)a1;
  unint64_t v11 = 5;
  do
  {
    unint64_t v12 = 8 - (v6 & 7);
    if (v11 < v12) {
      unint64_t v12 = v11;
    }
    int v9 = (*(unsigned __int8 *)(v10 + (v6 >> 3)) >> (8 - (v6 & 7) - v12)) & ~(-1 << v12) | (v9 << v12);
    v6 += v12;
    *((void *)a1 + 2) = v6;
    v11 -= v12;
  }
  while (v11);
  unint64_t v13 = (v9 + 1);
  if (v6 + v13 > v7) {
    goto LABEL_59;
  }
  int v14 = 0;
  if (v13)
  {
    do
    {
      unint64_t v15 = 8 - (v6 & 7);
      if (v13 < v15) {
        unint64_t v15 = v13;
      }
      int v14 = (*(unsigned __int8 *)(v10 + (v6 >> 3)) >> (8 - (v6 & 7) - v15)) & ~(-1 << v15) | (v14 << v15);
      v6 += v15;
      *((void *)a1 + 2) = v6;
      v13 -= v15;
    }
    while (v13);
  }
  v44[0] = v14;
  if (v6 + 5 > v7) {
    goto LABEL_59;
  }
  int v16 = 0;
  unint64_t v17 = 5;
  do
  {
    unint64_t v18 = 8 - (v6 & 7);
    if (v17 < v18) {
      unint64_t v18 = v17;
    }
    int v16 = (*(unsigned __int8 *)(v10 + (v6 >> 3)) >> (8 - (v6 & 7) - v18)) & ~(-1 << v18) | (v16 << v18);
    v6 += v18;
    *((void *)a1 + 2) = v6;
    v17 -= v18;
  }
  while (v17);
  unint64_t v19 = (v16 + 1);
  if (v6 + v19 > v7) {
    goto LABEL_59;
  }
  int v20 = 0;
  if (v16 != -1)
  {
    do
    {
      unint64_t v21 = 8 - (v6 & 7);
      if (v19 < v21) {
        unint64_t v21 = v19;
      }
      int v20 = (*(unsigned __int8 *)(v10 + (v6 >> 3)) >> (8 - (v6 & 7) - v21)) & ~(-1 << v21) | (v20 << v21);
      v6 += v21;
      *((void *)a1 + 2) = v6;
      v19 -= v21;
    }
    while (v19);
  }
  v44[1] = v20;
  if (v6 + 5 > v7) {
    goto LABEL_59;
  }
  int v22 = 0;
  unint64_t v23 = 5;
  do
  {
    unint64_t v24 = 8 - (v6 & 7);
    if (v23 < v24) {
      unint64_t v24 = v23;
    }
    int v22 = (*(unsigned __int8 *)(v10 + (v6 >> 3)) >> (8 - (v6 & 7) - v24)) & ~(-1 << v24) | (v22 << v24);
    v6 += v24;
    *((void *)a1 + 2) = v6;
    v23 -= v24;
  }
  while (v23);
  v44[2] = v22;
  if (v6 + 5 > v7) {
    goto LABEL_59;
  }
  int v25 = 0;
  unint64_t v26 = 5;
  do
  {
    unint64_t v27 = 8 - (v6 & 7);
    if (v26 < v27) {
      unint64_t v27 = v26;
    }
    int v25 = (*(unsigned __int8 *)(v10 + (v6 >> 3)) >> (8 - (v6 & 7) - v27)) & ~(-1 << v27) | (v25 << v27);
    v6 += v27;
    *((void *)a1 + 2) = v6;
    v26 -= v27;
  }
  while (v26);
  v44[3] = v25;
  if (v6 + 4 > v7) {
    goto LABEL_59;
  }
  int v28 = 0;
  unint64_t v29 = 4;
  do
  {
    unint64_t v30 = 8 - (v6 & 7);
    if (v29 < v30) {
      unint64_t v30 = v29;
    }
    int v28 = (*(unsigned __int8 *)(v10 + (v6 >> 3)) >> (8 - (v6 & 7) - v30)) & ~(-1 << v30) | (v28 << v30);
    v6 += v30;
    *((void *)a1 + 2) = v6;
    v29 -= v30;
  }
  while (v29);
  v44[4] = v28;
  if (v6 + 5 > v7) {
    goto LABEL_59;
  }
  int v31 = 0;
  unint64_t v32 = 5;
  do
  {
    unint64_t v33 = 8 - (v6 & 7);
    if (v32 < v33) {
      unint64_t v33 = v32;
    }
    int v31 = (*(unsigned __int8 *)(v10 + (v6 >> 3)) >> (8 - (v6 & 7) - v33)) & ~(-1 << v33) | (v31 << v33);
    v6 += v33;
    *((void *)a1 + 2) = v6;
    v32 -= v33;
  }
  while (v32);
  v44[5] = v31;
  if (v6 + 1 > v7
    || (unsigned int v34 = *(unsigned __int8 *)(v10 + (v6 >> 3)),
        *((void *)a1 + 2) = v6 + 1,
        char v45 = (v34 >> (~(_BYTE)v6 & 7)) & 1,
        long long v35 = (geo::codec::Allocator *)geo::codec::decodeSectionEncodingWithHeader(a1, &v43, a2, v44, a3, a5),
        !v35))
  {
LABEL_59:
    if (*a2)
    {
      geo::codec::VertexPoolDealloc(*a2, (GeoCodecsVertexPool *)a2);
      uint64_t v40 = 0;
      *a2 = 0;
      uint64_t v41 = v43;
      if (!v43) {
        return v40;
      }
      goto LABEL_51;
    }
    goto LABEL_50;
  }
  int v36 = v43;
  if (v43)
  {
    uint64_t v37 = geo::codec::Allocator::instance(v35);
    BOOL v38 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v37 + 24))(v37, 1, 72);
    *a2 = v38;
    if (v38)
    {
      *((void *)v38 + 5) = *((void *)v36 + 5);
      *(unsigned char *)BOOL v38 = *(unsigned char *)v36;
      if (a4) {
        BOOL v39 = (*a4 & 0x3F00uLL) > 0xE00;
      }
      else {
        BOOL v39 = 0;
      }
      geo::codec::_createLOD(v36, v38, 0, v39, 0, 0, 0, 0);
      uint64_t v40 = 1;
      uint64_t v41 = v43;
      if (!v43) {
        return v40;
      }
      goto LABEL_51;
    }
LABEL_50:
    uint64_t v40 = 0;
    uint64_t v41 = v43;
    if (!v43) {
      return v40;
    }
LABEL_51:
    geo::codec::CurveVertexPoolDealloc(v41, (GeoCodecsCurveVertexPool *)a2);
    return v40;
  }
  return 1;
}

uint64_t geo::codec::decodeSectionEncodingWithHeader(geo::codec::Allocator *a1, geo::codec::Allocator **a2, geo::codec::Allocator **a3, unsigned int *a4, int a5, uint64_t a6)
{
  if (*((unsigned char *)a4 + 24)) {
    int v11 = a5;
  }
  else {
    int v11 = 0;
  }
  unint64_t v12 = *(uint64_t (**)(void))(*(void *)geo::codec::Allocator::instance(a1) + 24);
  if (v11 == 1)
  {
    unint64_t v13 = (geo::codec::Allocator *)v12();
    *a2 = v13;
    if (v13)
    {
      *(unsigned char *)unint64_t v13 = a4[2];
      uint64_t v14 = *a4;
      *((void *)v13 + 5) = v14;
      if (v14)
      {
        uint64_t v15 = geo::codec::Allocator::instance(v13);
        *((void *)*a2 + 4) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v15 + 16))(v15, 16 * *((void *)*a2 + 5), 8);
        unint64_t v13 = *a2;
        uint64_t v16 = *((void *)*a2 + 4);
        if (!v16) {
          return v16 & 1;
        }
      }
      uint64_t v17 = a4[1];
      *((void *)v13 + 2) = v17;
      if (v17)
      {
        uint64_t v18 = geo::codec::Allocator::instance(v13);
        *((void *)*a2 + 1) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v18 + 16))(v18, 12 * *((void *)*a2 + 2), 8);
        uint64_t v16 = *((void *)*a2 + 1);
        if (!v16) {
          return v16 & 1;
        }
      }
      goto LABEL_16;
    }
LABEL_79:
    LOBYTE(v16) = 0;
    return v16 & 1;
  }
  unint64_t v19 = (geo::codec::Allocator *)v12();
  *a3 = v19;
  if (!v19) {
    goto LABEL_79;
  }
  *(unsigned char *)unint64_t v19 = a4[2];
  uint64_t v20 = *a4;
  *((void *)v19 + 5) = v20;
  if (!v20
    || (uint64_t v21 = geo::codec::Allocator::instance(v19),
        *((void *)*a3 + 4) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v21 + 16))(v21, 16 * *((void *)*a3 + 5), 8), v19 = *a3, (uint64_t v16 = *((void *)*a3 + 4)) != 0))
  {
    uint64_t v22 = a4[1];
    *((void *)v19 + 2) = v22;
    if (!v22
      || (uint64_t v23 = geo::codec::Allocator::instance(v19),
          *((void *)*a3 + 1) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v23 + 16))(v23, 8 * *((void *)*a3 + 2), 8), (uint64_t v16 = *((void *)*a3 + 1)) != 0))
    {
LABEL_16:
      if (!a4[1] || (unint64_t v74 = *a4, !v74))
      {
        LOBYTE(v16) = 1;
        return v16 & 1;
      }
      LOBYTE(v16) = 0;
      uint64_t v24 = 0;
      unint64_t v25 = 0;
      unint64_t v26 = *((void *)a1 + 2);
      unint64_t v27 = 8 * *((void *)a1 + 1);
      unint64_t v28 = a4[5];
      char v29 = 32 - v28;
      while (1)
      {
        if (v26 + v28 > v27) {
          return v16 & 1;
        }
        if (!v28) {
          break;
        }
        int v30 = 0;
        uint64_t v31 = *(void *)a1;
        unint64_t v32 = v28;
        do
        {
          unint64_t v33 = 8 - (v26 & 7);
          if (v32 < v33) {
            unint64_t v33 = v32;
          }
          int v30 = (*(unsigned __int8 *)(v31 + (v26 >> 3)) >> (8 - (v26 & 7) - v33)) & ~(-1 << v33) | (v30 << v33);
          v26 += v33;
          *((void *)a1 + 2) = v26;
          v32 -= v33;
        }
        while (v32);
        if (v26 + v28 > v27) {
          return v16 & 1;
        }
        int v34 = 0;
        int v35 = v30 << v29 >> v29;
        unint64_t v36 = v28;
        do
        {
          unint64_t v37 = 8 - (v26 & 7);
          if (v36 < v37) {
            unint64_t v37 = v36;
          }
          int v34 = (*(unsigned __int8 *)(v31 + (v26 >> 3)) >> (8 - (v26 & 7) - v37)) & ~(-1 << v37) | (v34 << v37);
          v26 += v37;
          *((void *)a1 + 2) = v26;
          v36 -= v37;
        }
        while (v36);
        int v38 = v34 << v29 >> v29;
        if (a6) {
          goto LABEL_31;
        }
LABEL_32:
        unint64_t v40 = a4[3];
        if (v26 + v40 > v27) {
          return v16 & 1;
        }
        unsigned int v41 = 0;
        if (v40)
        {
          uint64_t v42 = *(void *)a1;
          do
          {
            unint64_t v43 = 8 - (v26 & 7);
            if (v40 < v43) {
              unint64_t v43 = v40;
            }
            unsigned int v41 = (*(unsigned __int8 *)(v42 + (v26 >> 3)) >> (8 - (v26 & 7) - v43)) & ~(-1 << v43) | (v41 << v43);
            v26 += v43;
            *((void *)a1 + 2) = v26;
            v40 -= v43;
          }
          while (v40);
        }
        unint64_t v44 = a4[4];
        if (v26 + v44 > v27) {
          return v16 & 1;
        }
        unsigned int v45 = 0;
        if (v44)
        {
          uint64_t v46 = *(void *)a1;
          do
          {
            unint64_t v47 = 8 - (v26 & 7);
            if (v44 < v47) {
              unint64_t v47 = v44;
            }
            unsigned int v45 = (*(unsigned __int8 *)(v46 + (v26 >> 3)) >> (8 - (v26 & 7) - v47)) & ~(-1 << v47) | (v45 << v47);
            v26 += v47;
            *((void *)a1 + 2) = v26;
            v44 -= v47;
          }
          while (v44);
        }
        unint64_t v48 = v24 + v41;
        if (!v11)
        {
          char v69 = *a3;
          if (v48 >= *((void *)*a3 + 2)) {
            return v16 & 1;
          }
          float v70 = (float)~(-1 << *(unsigned char *)v69);
          int v71 = (float *)(*((void *)v69 + 1) + 8 * v24);
          *int v71 = (float)v35 / v70;
          v71[1] = (float)v38 / v70;
          uint64_t v52 = v24 + 1;
          if (!v41) {
            goto LABEL_71;
          }
LABEL_47:
          char v53 = 32 - v45;
          uint64_t v54 = v52 + v41;
          unint64_t v55 = v26;
          while (2)
          {
            if (v55 + v45 > v27) {
              return v16 & 1;
            }
            int v56 = 0;
            if (v45)
            {
              uint64_t v57 = *(void *)a1;
              unint64_t v58 = v45;
              do
              {
                unint64_t v59 = 8 - (v55 & 7);
                if (v58 < v59) {
                  unint64_t v59 = v58;
                }
                int v56 = (*(unsigned __int8 *)(v57 + (v55 >> 3)) >> (8 - (v55 & 7) - v59)) & ~(-1 << v59) | (v56 << v59);
                v55 += v59;
                *((void *)a1 + 2) = v55;
                v58 -= v59;
              }
              while (v58);
              if (v55 + v45 > v27) {
                return v16 & 1;
              }
              int v60 = 0;
              int v61 = v56 << v53 >> v53;
              unint64_t v62 = v45;
              do
              {
                unint64_t v63 = 8 - (v55 & 7);
                if (v62 < v63) {
                  unint64_t v63 = v62;
                }
                int v60 = (*(unsigned __int8 *)(v57 + (v55 >> 3)) >> (8 - (v55 & 7) - v63)) & ~(-1 << v63) | (v60 << v63);
                v55 += v63;
                *((void *)a1 + 2) = v55;
                v62 -= v63;
              }
              while (v62);
              int v56 = v60 << v53 >> v53;
              unint64_t v26 = v55;
              v35 += v61;
              float v64 = (float)v35;
              if (v11)
              {
LABEL_62:
                float v65 = (float)~(-1 << *(unsigned char *)*a2);
                float v66 = v64 / v65;
                BOOL v67 = (float *)(*((void *)*a2 + 1) + 12 * v52);
                goto LABEL_65;
              }
            }
            else
            {
              float v64 = (float)v35;
              if (v11) {
                goto LABEL_62;
              }
            }
            float v65 = (float)~(-1 << *(unsigned char *)*a3);
            float v66 = v64 / v65;
            BOOL v67 = (float *)(*((void *)*a3 + 1) + 8 * v52);
LABEL_65:
            *BOOL v67 = v66;
            v38 += v56;
            v67[1] = (float)v38 / v65;
            if (*((unsigned char *)a4 + 24))
            {
              unint64_t v26 = v55 + 1;
              if (v55 + 1 > v27) {
                return v16 & 1;
              }
              unsigned int v68 = *(unsigned __int8 *)(*(void *)a1 + (v55 >> 3));
              *((void *)a1 + 2) = v26;
              if (v11) {
                *(unsigned char *)(*((void *)*a2 + 1) + 12 * v52 + 8) = (v68 >> (~(_BYTE)v55 & 7)) & 1;
              }
              ++v55;
            }
            if (++v52 == v54)
            {
              uint64_t v52 = v54;
              if (v11) {
                goto LABEL_72;
              }
              goto LABEL_76;
            }
            continue;
          }
        }
        uint64_t v49 = *a2;
        if (v48 >= *((void *)*a2 + 2)) {
          return v16 & 1;
        }
        float v50 = (float)~(-1 << *(unsigned char *)v49);
        unint64_t v51 = (float *)(*((void *)v49 + 1) + 12 * v24);
        *unint64_t v51 = (float)v35 / v50;
        v51[1] = (float)v38 / v50;
        uint64_t v52 = v24 + 1;
        if (v41) {
          goto LABEL_47;
        }
LABEL_71:
        if (v11) {
LABEL_72:
        }
          int v72 = *a2;
        else {
LABEL_76:
        }
          int v72 = *a3;
        uint64_t v16 = *((void *)v72 + 4) + 16 * v25;
        *(void *)uint64_t v16 = v24;
        *(void *)(v16 + 8) = v52 - v24;
        ++v25;
        uint64_t v24 = v52;
        LOBYTE(v16) = v25 >= v74;
        if (v25 == v74) {
          return v16 & 1;
        }
      }
      int v38 = 0;
      int v35 = 0;
      if (!a6) {
        goto LABEL_32;
      }
LABEL_31:
      BOOL v39 = (int *)(a6 + 8 * v25);
      *BOOL v39 = v35;
      v39[1] = v38;
      goto LABEL_32;
    }
  }
  return v16 & 1;
}

BOOL GEOPDAutocompleteEntryCollectionReadAllFrom(uint64_t a1, void *a2)
{
  unint64_t v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    id v4 = (int *)MEMORY[0x1E4F940E8];
    uint64_t v5 = (int *)MEMORY[0x1E4F940E0];
    unint64_t v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v3[*v6]) {
          break;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          if (v9++ >= 9)
          {
            unint64_t v10 = 0;
            int v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v16 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v16 || (v10 & 7) == 4) {
          break;
        }
        if ((v10 >> 3) == 1)
        {
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_29;
          }
          uint64_t v18 = objc_alloc_init(GEOPDMapsIdentifier);
          if (!GEOPDMapsIdentifierReadAllFrom((uint64_t)v18, v3))
          {

            goto LABEL_29;
          }
          PBReaderRecallMark();
          unint64_t v19 = *(void **)(a1 + 16);
          *(void *)(a1 + 16) = v18;
        }
        else
        {
          if (!*(void *)(a1 + 8))
          {
            id v20 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            uint64_t v21 = *(void **)(a1 + 8);
            *(void *)(a1 + 8) = v20;
          }
          if (!PBUnknownFieldAdd()) {
            goto LABEL_29;
          }
        }
      }
      while (*(void *)&v3[*v4] < *(void *)&v3[*v5]);
    }
    BOOL v22 = v3[*v6] == 0;
  }
  else
  {
LABEL_29:
    BOOL v22 = 0;
  }
  objc_sync_exit(v3);

  return v22;
}

void sub_18905A574(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDVendorSpecificPlaceRefinementParametersReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 96));
  unint64_t v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 92);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 88)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unsigned int v12 = ((*(unsigned __int16 *)(a1 + 112) >> 4) & 1)
      + (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int16 *)(a1 + 112)), (uint16x4_t)0xFFFBFFF7FFF5FFF9), (int8x8_t)0x1000100010001))+ ((*(_WORD *)(a1 + 112) >> 10) & 1)+ (HIBYTE(*(_WORD *)(a1 + 112)) & 1)+ ((*(_WORD *)(a1 + 112) >> 6) & 1));
  while (2)
  {
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v16 = v12 > 4;
        char v17 = v16 & ~(_BYTE)v11 | v9;
        unsigned __int8 v18 = v16 | v11;
        char v83 = v17;
        char v84 = v18 | v17;
        if ((v18 | v8)) {
          unint64_t v19 = 0;
        }
        else {
          unint64_t v19 = a3;
        }
        id v20 = (int *)MEMORY[0x1E4F940E8];
        uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
        char v85 = (v19 == 0) | v18;
        BOOL v86 = v18;
        BOOL v22 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v12;
LABEL_7:
        uint64_t v13 = v9;
LABEL_8:
        uint64_t v14 = v10;
        uint64_t v15 = v11;
LABEL_10:
        ++v7;
        uint64_t v9 = v13;
        uint64_t v10 = v14;
        uint64_t v11 = v15;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v20) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v21)) {
      goto LABEL_141;
    }
    char v23 = 0;
    unsigned int v24 = 0;
    unint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = *v20;
      uint64_t v27 = *(void *)(v3 + v26);
      unint64_t v28 = v27 + 1;
      if (v27 == -1 || v28 > *(void *)(v3 + *v6)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(v3 + *v22) + v27);
      *(void *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0) {
        goto LABEL_25;
      }
      v23 += 7;
      BOOL v30 = v24++ >= 9;
      if (v30)
      {
        unint64_t v25 = 0;
        int v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v21) = 1;
LABEL_25:
    int v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(unsigned char *)(v3 + *v21)) {
      unint64_t v25 = 0;
    }
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_141:
      int v81 = 1;
      goto LABEL_142;
    }
    unint64_t v33 = v25 >> 3;
    BOOL v34 = v86;
    if ((v85 & 1) == 0)
    {
      int v35 = v19;
      do
      {
        int v37 = *v35++;
        int v36 = v37;
        BOOL v34 = v37 != 0;
        if (v37) {
          BOOL v38 = v36 == v33;
        }
        else {
          BOOL v38 = 1;
        }
      }
      while (!v38);
    }
    switch((int)v33)
    {
      case 1:
        if ((v8 & 1) == 0) {
          goto LABEL_107;
        }
        char v39 = 0;
        unsigned int v40 = 0;
        uint64_t v41 = 0;
        *(_WORD *)(a1 + 112) |= 8u;
        while (1)
        {
          uint64_t v42 = *v20;
          uint64_t v43 = *(void *)(v3 + v42);
          unint64_t v44 = v43 + 1;
          if (v43 == -1 || v44 > *(void *)(v3 + *v6)) {
            break;
          }
          char v45 = *(unsigned char *)(*(void *)(v3 + *v22) + v43);
          *(void *)(v3 + v42) = v44;
          v41 |= (unint64_t)(v45 & 0x7F) << v39;
          if ((v45 & 0x80) == 0) {
            goto LABEL_110;
          }
          v39 += 7;
          BOOL v30 = v40++ >= 9;
          if (v30)
          {
            LODWORD(v41) = 0;
            goto LABEL_112;
          }
        }
        *(unsigned char *)(v3 + *v21) = 1;
LABEL_110:
        if (*(unsigned char *)(v3 + *v21)) {
          LODWORD(v41) = 0;
        }
LABEL_112:
        uint64_t v75 = 108;
        goto LABEL_125;
      case 2:
        if ((v8 & 1) == 0) {
          goto LABEL_107;
        }
        char v49 = 0;
        unsigned int v50 = 0;
        uint64_t v51 = 0;
        *(_WORD *)(a1 + 112) |= 1u;
        while (2)
        {
          uint64_t v52 = *v20;
          uint64_t v53 = *(void *)(v3 + v52);
          unint64_t v54 = v53 + 1;
          if (v53 == -1 || v54 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v21) = 1;
          }
          else
          {
            char v55 = *(unsigned char *)(*(void *)(v3 + *v22) + v53);
            *(void *)(v3 + v52) = v54;
            v51 |= (unint64_t)(v55 & 0x7F) << v49;
            if (v55 < 0)
            {
              v49 += 7;
              BOOL v30 = v50++ >= 9;
              if (v30)
              {
                uint64_t v51 = 0;
                goto LABEL_116;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v21)) {
          uint64_t v51 = 0;
        }
LABEL_116:
        *(void *)(a1 + 64) = v51;
        goto LABEL_140;
      case 3:
        if (!v34) {
          goto LABEL_107;
        }
        if ((*(_WORD *)(a1 + 112) & 0x800) == 0)
        {
          uint64_t v56 = PBReaderReadString();
          uint64_t v57 = 80;
          goto LABEL_105;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_163;
        }
        __int16 v76 = 16 * *(_WORD *)(a1 + 112);
        goto LABEL_138;
      case 4:
        if (!v34) {
          goto LABEL_107;
        }
        if ((*(_WORD *)(a1 + 112) & 0x80) == 0)
        {
          uint64_t v56 = PBReaderReadString();
          uint64_t v57 = 40;
          goto LABEL_105;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_163;
        }
        __int16 v76 = *(_WORD *)(a1 + 112) << 8;
        goto LABEL_138;
      case 5:
        if (!v34) {
          goto LABEL_107;
        }
        if ((*(_WORD *)(a1 + 112) & 0x200) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_163;
          }
          __int16 v76 = *(_WORD *)(a1 + 112) << 6;
          goto LABEL_138;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_163;
        }
        unint64_t v58 = objc_alloc_init(GEOLatLng);
        if (!GEOLatLngReadAllFrom((uint64_t)v58, (void *)v3)) {
          goto LABEL_162;
        }
        PBReaderRecallMark();
        uint64_t v59 = 56;
        goto LABEL_77;
      case 6:
        if (!v34) {
          goto LABEL_107;
        }
        if ((*(_WORD *)(a1 + 112) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_163;
          }
          __int16 v76 = *(_WORD *)(a1 + 112) << 10;
LABEL_138:
          v7 += v76 >> 15;
LABEL_139:
          uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
          BOOL v22 = (int *)MEMORY[0x1E4F940B8];
          goto LABEL_140;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_163;
        }
        unint64_t v58 = objc_alloc_init(GEOStructuredAddress);
        if (GEOStructuredAddressReadAllFrom(v58, (void *)v3))
        {
          PBReaderRecallMark();
          uint64_t v59 = 24;
LABEL_77:
          int v60 = *(void **)(a1 + v59);
          *(void *)(a1 + v59) = v58;
LABEL_106:

          --v7;
          goto LABEL_139;
        }
LABEL_162:

LABEL_163:
        int v81 = 0;
        unint64_t v82 = &OBJC_IVAR___GEOMapDataSubscriptionDownloadGroup__completedSubscriptions;
        uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
LABEL_143:
        if (v83) {
LABEL_144:
        }
          *(_WORD *)(a1 + v82[654]) |= 0x10u;
        if (v86 || (v81 & 1) == 0)
        {
          *(_WORD *)(a1 + v82[654]) |= 0x800u;
          *(_WORD *)(a1 + v82[654]) |= 0x80u;
          *(_WORD *)(a1 + v82[654]) |= 0x200u;
          *(_WORD *)(a1 + v82[654]) |= 0x20u;
          *(_WORD *)(a1 + v82[654]) |= 0x400u;
          *(_WORD *)(a1 + v82[654]) |= 0x100u;
          *(_WORD *)(a1 + v82[654]) |= 0x40u;
        }
        else if (v19)
        {
          while (1)
          {
            int v77 = *v19++;
            __int16 v78 = 2048;
            switch(v77)
            {
              case 0:
                goto LABEL_156;
              case 3:
                goto LABEL_155;
              case 4:
                __int16 v78 = 128;
                goto LABEL_155;
              case 5:
                __int16 v78 = 512;
                goto LABEL_155;
              case 6:
                __int16 v78 = 32;
                goto LABEL_155;
              case 7:
                __int16 v78 = 1024;
                goto LABEL_155;
              case 8:
                __int16 v78 = 256;
                goto LABEL_155;
              case 11:
                __int16 v78 = 64;
LABEL_155:
                *(_WORD *)(a1 + v82[654]) |= v78;
                break;
              default:
                continue;
            }
          }
        }
LABEL_156:
        if (v81) {
          unint64_t v3 = *(unsigned char *)(v3 + *v21) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v86)
        {
          char v79 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      case 7:
        if (!v34) {
          goto LABEL_107;
        }
        if ((*(_WORD *)(a1 + 112) & 0x400) == 0)
        {
          uint64_t v56 = PBReaderReadString();
          uint64_t v57 = 72;
          goto LABEL_105;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_163;
        }
        __int16 v76 = 32 * *(_WORD *)(a1 + 112);
        goto LABEL_138;
      case 8:
        if (!v34 || (*(_WORD *)(a1 + 112) & 0x100) != 0) {
          goto LABEL_107;
        }
        int v61 = PBReaderReadString();
        if (v61) {
          -[GEOPDVendorSpecificPlaceRefinementParameters _addNoFlagsFormattedAddressLineHint:](a1, v61);
        }

        goto LABEL_139;
      case 9:
        if ((v8 & 1) == 0) {
          goto LABEL_107;
        }
        char v62 = 0;
        unsigned int v63 = 0;
        uint64_t v41 = 0;
        *(_WORD *)(a1 + 112) |= 4u;
        while (2)
        {
          uint64_t v64 = *v20;
          uint64_t v65 = *(void *)(v3 + v64);
          unint64_t v66 = v65 + 1;
          if (v65 == -1 || v66 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v21) = 1;
          }
          else
          {
            char v67 = *(unsigned char *)(*(void *)(v3 + *v22) + v65);
            *(void *)(v3 + v64) = v66;
            v41 |= (unint64_t)(v67 & 0x7F) << v62;
            if (v67 < 0)
            {
              v62 += 7;
              BOOL v30 = v63++ >= 9;
              if (v30)
              {
                LODWORD(v41) = 0;
                goto LABEL_120;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v21)) {
          LODWORD(v41) = 0;
        }
LABEL_120:
        uint64_t v75 = 104;
        goto LABEL_125;
      case 10:
        if ((v8 & 1) == 0) {
          goto LABEL_107;
        }
        char v68 = 0;
        unsigned int v69 = 0;
        uint64_t v41 = 0;
        *(_WORD *)(a1 + 112) |= 2u;
        while (2)
        {
          uint64_t v70 = *v20;
          uint64_t v71 = *(void *)(v3 + v70);
          unint64_t v72 = v71 + 1;
          if (v71 == -1 || v72 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v21) = 1;
          }
          else
          {
            char v73 = *(unsigned char *)(*(void *)(v3 + *v22) + v71);
            *(void *)(v3 + v70) = v72;
            v41 |= (unint64_t)(v73 & 0x7F) << v68;
            if (v73 < 0)
            {
              v68 += 7;
              BOOL v30 = v69++ >= 9;
              if (v30)
              {
                LODWORD(v41) = 0;
                goto LABEL_124;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v21)) {
          LODWORD(v41) = 0;
        }
LABEL_124:
        uint64_t v75 = 100;
LABEL_125:
        *(_DWORD *)(a1 + v75) = v41;
        goto LABEL_140;
      case 11:
        if (!v34) {
          goto LABEL_107;
        }
        if ((*(_WORD *)(a1 + 112) & 0x40) == 0)
        {
          uint64_t v56 = PBReaderReadData();
          uint64_t v57 = 32;
LABEL_105:
          int v60 = *(void **)(a1 + v57);
          *(void *)(a1 + v57) = v56;
          goto LABEL_106;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_163;
        }
        __int16 v76 = *(_WORD *)(a1 + 112) << 9;
        goto LABEL_138;
      default:
        if ((v83 & 1) == 0 || (*(_WORD *)(a1 + 112) & 0x10) != 0)
        {
LABEL_107:
          char v74 = PBReaderSkipValueWithTag();
          BOOL v22 = (int *)MEMORY[0x1E4F940B8];
          uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
          if ((v74 & 1) == 0)
          {
            int v81 = 0;
LABEL_142:
            unint64_t v82 = &OBJC_IVAR___GEOMapDataSubscriptionDownloadGroup__completedSubscriptions;
            goto LABEL_143;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v46 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            unint64_t v47 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v46;
          }
          int v48 = PBUnknownFieldAdd();
          uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
          BOOL v22 = (int *)MEMORY[0x1E4F940B8];
          if (!v48)
          {
            int v81 = 0;
            unint64_t v82 = &OBJC_IVAR___GEOMapDataSubscriptionDownloadGroup__completedSubscriptions;
            goto LABEL_144;
          }
        }
LABEL_140:
        if (!(v84 & 1 | (v7 != 0))) {
          goto LABEL_141;
        }
        continue;
    }
  }
}

BOOL GEOPDAutocompleteEntryBrandProfileReadAllFrom(uint64_t a1, void *a2)
{
  unint64_t v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    id v4 = (int *)MEMORY[0x1E4F940E8];
    uint64_t v5 = (int *)MEMORY[0x1E4F940E0];
    unint64_t v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v3[*v6]) {
          break;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          if (v9++ >= 9)
          {
            unint64_t v10 = 0;
            int v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v16 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v16 || (v10 & 7) == 4) {
          break;
        }
        if ((v10 >> 3) == 1)
        {
          uint64_t v18 = PBReaderReadString();
          unint64_t v19 = *(void **)(a1 + 16);
          *(void *)(a1 + 16) = v18;
        }
        else
        {
          if (!*(void *)(a1 + 8))
          {
            id v20 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            uint64_t v21 = *(void **)(a1 + 8);
            *(void *)(a1 + 8) = v20;
          }
          if (!PBUnknownFieldAdd()) {
            goto LABEL_26;
          }
        }
      }
      while (*(void *)&v3[*v4] < *(void *)&v3[*v5]);
    }
    BOOL v22 = v3[*v6] == 0;
  }
  else
  {
LABEL_26:
    BOOL v22 = 0;
  }
  objc_sync_exit(v3);

  return v22;
}

void sub_18905B428(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void GEORPFeedbackDetailsClearSensitiveFields(void *a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if ([a1 hasPoiFeedback]
      && ([a1 poiFeedback],
          unint64_t v6 = objc_claimAutoreleasedReturnValue(),
          unsigned int v7 = GEORPPoiFeedbackHasSensitiveFields(v6, a2),
          v6,
          v7))
    {
      char v8 = [a1 poiFeedback];
      unsigned int v9 = (void *)[v8 copy];

      unint64_t v10 = [v9 placeRequest];
      [v10 clearSensitiveFields:a2];

      [a1 setPoiFeedback:v9];
    }
    else
    {
      unsigned int v9 = [a1 poiFeedback];
      [v9 clearSensitiveFields:a2];
    }

    if ([a1 hasTransitPoiFeedback])
    {
      uint64_t v12 = [a1 transitPoiFeedback];
      int HasSensitiveFields = GEORPTransitPoiFeedbackHasSensitiveFields(v12, a2);

      if (HasSensitiveFields)
      {
        char v14 = [a1 transitPoiFeedback];
        uint64_t v15 = (id *)[v14 copy];

        GEORPTransitPoiFeedbackClearSensitiveFields(v15, a2, 0);
        [a1 setTransitPoiFeedback:v15];

        goto LABEL_11;
      }
    }
  }
  else
  {
    uint64_t v11 = [a1 poiFeedback];
    [v11 clearSensitiveFields:a2];
  }
  int v16 = [a1 transitPoiFeedback];
  [v16 clearSensitiveFields:a2];

  if (!a3)
  {
    BOOL v22 = [a1 searchFeedback];
    [v22 clearSensitiveFields:a2];

    goto LABEL_19;
  }
LABEL_11:
  if ([a1 hasSearchFeedback]
    && ([a1 searchFeedback],
        char v17 = objc_claimAutoreleasedReturnValue(),
        unsigned int v18 = GEORPSearchFeedbackHasSensitiveFields(v17, a2),
        v17,
        v18))
  {
    unint64_t v19 = [a1 searchFeedback];
    id v20 = (void *)[v19 copy];

    uint64_t v21 = [v20 context];
    [v21 clearSensitiveFields:a2];

    [a1 setSearchFeedback:v20];
  }
  else
  {
    id v20 = [a1 searchFeedback];
    [v20 clearSensitiveFields:a2];
  }

  if ([a1 hasMerchantLookupFeedback])
  {
    char v23 = [a1 merchantLookupFeedback];
    unsigned int v24 = GEORPMerchantLookupFeedbackHasSensitiveFields(v23);

    if (v24)
    {
      unint64_t v25 = [a1 merchantLookupFeedback];
      uint64_t v26 = (void *)[v25 copy];

      uint64_t v27 = [v26 context];
      [v27 clearSensitiveFields:a2];

      [a1 setMerchantLookupFeedback:v26];
      goto LABEL_20;
    }
  }
LABEL_19:
  unint64_t v28 = [a1 merchantLookupFeedback];
  [v28 clearSensitiveFields:a2];

  if (!a3)
  {
    BOOL v34 = [a1 directionsFeedback];
    [v34 clearSensitiveFields:a2];

    goto LABEL_28;
  }
LABEL_20:
  if ([a1 hasDirectionsFeedback]
    && ([a1 directionsFeedback],
        char v29 = objc_claimAutoreleasedReturnValue(),
        unsigned int v30 = GEORPDirectionsFeedbackHasSensitiveFields(v29, a2),
        v29,
        v30))
  {
    int v31 = [a1 directionsFeedback];
    unint64_t v32 = (void *)[v31 copy];

    unint64_t v33 = [v32 directionsContext];
    [v33 clearSensitiveFields:a2];

    [a1 setDirectionsFeedback:v32];
  }
  else
  {
    unint64_t v32 = [a1 directionsFeedback];
    [v32 clearSensitiveFields:a2];
  }

  if ([a1 hasAddressPointFeedback])
  {
    int v35 = [a1 addressPointFeedback];
    unsigned int v36 = GEORPAddressFeedbackHasSensitiveFields(v35, a2);

    if (v36)
    {
      int v37 = [a1 addressPointFeedback];
      BOOL v38 = (void *)[v37 copy];

      char v39 = [v38 placeRequest];
      [v39 clearSensitiveFields:a2];

      [a1 setAddressPointFeedback:v38];
      goto LABEL_29;
    }
  }
LABEL_28:
  unsigned int v40 = [a1 addressPointFeedback];
  [v40 clearSensitiveFields:a2];

  if (!a3)
  {
    char v45 = [a1 poiEnrichmentUpdate];
    [v45 clearSensitiveFields:a2];

    goto LABEL_37;
  }
LABEL_29:
  if ([a1 hasPoiEnrichmentUpdate]
    && ([a1 poiEnrichmentUpdate],
        uint64_t v41 = objc_claimAutoreleasedReturnValue(),
        int v42 = GEORPPoiEnrichmentUpdateHasSensitiveFields(v41),
        v41,
        v42))
  {
    uint64_t v43 = [a1 poiEnrichmentUpdate];
    unint64_t v44 = (void *)[v43 copy];

    GEORPPoiEnrichmentUpdateClearSensitiveFields((uint64_t)v44, a2, 0);
    [a1 setPoiEnrichmentUpdate:v44];
  }
  else
  {
    unint64_t v44 = [a1 poiEnrichmentUpdate];
    [v44 clearSensitiveFields:a2];
  }

  if (![a1 hasIncidentFeedback]
    || ([a1 incidentFeedback],
        id v46 = objc_claimAutoreleasedReturnValue(),
        int v47 = GEORPIncidentFeedbackHasSensitiveFields(v46),
        v46,
        !v47))
  {
LABEL_37:
    unsigned int v50 = [a1 incidentFeedback];
    [v50 clearSensitiveFields:a2];

    if (!a3) {
      goto LABEL_41;
    }
    goto LABEL_38;
  }
  int v48 = [a1 incidentFeedback];
  char v49 = (void *)[v48 copy];

  GEORPIncidentFeedbackClearSensitiveFields(v49, a2, 0);
  [a1 setIncidentFeedback:v49];

LABEL_38:
  if ([a1 hasLocalityFeedback])
  {
    uint64_t v51 = [a1 localityFeedback];
    unsigned int v52 = GEORPLocalityFeedbackHasSensitiveFields(v51, a2);

    if (v52)
    {
      uint64_t v53 = [a1 localityFeedback];
      id v55 = (id)[v53 copy];

      unint64_t v54 = [v55 placeRequest];
      [v54 clearSensitiveFields:a2];

      [a1 setLocalityFeedback:v55];
      goto LABEL_42;
    }
  }
LABEL_41:
  id v55 = [a1 localityFeedback];
  [v55 clearSensitiveFields:a2];
LABEL_42:
}

void sub_18905BAEC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDAllCollectionsViewResultReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  unint64_t v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 52);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 48)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unsigned int v12 = ((*(unsigned __int8 *)(a1 + 60) >> 3) & 1)
      + (*(unsigned char *)(a1 + 60) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 2) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 1) & 1);
  while (2)
  {
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v16 = v12 > 1;
        char v17 = v16 & ~(_BYTE)v11 | v9;
        unsigned __int8 v18 = v16 | v11;
        char v51 = v17;
        char v52 = v18 | v17;
        if ((v18 | v8)) {
          unint64_t v19 = 0;
        }
        else {
          unint64_t v19 = a3;
        }
        id v20 = (int *)MEMORY[0x1E4F940E8];
        char v53 = (v19 == 0) | v18;
        BOOL v54 = v18;
        uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
        BOOL v22 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v12;
LABEL_7:
        uint64_t v13 = v9;
LABEL_8:
        uint64_t v14 = v10;
        uint64_t v15 = v11;
LABEL_10:
        ++v7;
        uint64_t v9 = v13;
        uint64_t v10 = v14;
        uint64_t v11 = v15;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(void *)(v3 + *v20) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v21)) {
      goto LABEL_69;
    }
    char v23 = 0;
    unsigned int v24 = 0;
    unint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = *v20;
      uint64_t v27 = *(void *)(v3 + v26);
      unint64_t v28 = v27 + 1;
      if (v27 == -1 || v28 > *(void *)(v3 + *v6)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(v3 + *v22) + v27);
      *(void *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0) {
        goto LABEL_25;
      }
      v23 += 7;
      if (v24++ >= 9)
      {
        unint64_t v25 = 0;
        int v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v21) = 1;
LABEL_25:
    int v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(unsigned char *)(v3 + *v21)) {
      unint64_t v25 = 0;
    }
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_69:
      int v49 = 1;
      goto LABEL_70;
    }
    unint64_t v33 = v25 >> 3;
    BOOL v34 = v54;
    if ((v53 & 1) == 0)
    {
      int v35 = v19;
      do
      {
        int v37 = *v35++;
        int v36 = v37;
        BOOL v34 = v37 != 0;
        if (v37) {
          BOOL v38 = v36 == v33;
        }
        else {
          BOOL v38 = 1;
        }
      }
      while (!v38);
    }
    if (v33 != 3) {
      break;
    }
    if (v34 && (*(unsigned char *)(a1 + 60) & 2) == 0)
    {
      if ((PBReaderPlaceMark() & 1) == 0) {
        goto LABEL_87;
      }
      char v39 = objc_alloc_init(GEOPDMapsIdentifier);
      if (!GEOPDMapsIdentifierReadAllFrom((uint64_t)v39, (void *)v3)) {
        goto LABEL_86;
      }
      PBReaderRecallMark();
      -[GEOPDAllCollectionsViewResult _addNoFlagsCollectionId:](a1, v39);
LABEL_56:

LABEL_67:
      uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
      goto LABEL_68;
    }
LABEL_63:
    char v44 = PBReaderSkipValueWithTag();
    uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
    if ((v44 & 1) == 0)
    {
      int v49 = 0;
LABEL_70:
      unsigned int v50 = &OBJC_IVAR___GEOMapDataSubscriptionDownloadGroup__completedSubscriptions;
      goto LABEL_71;
    }
LABEL_68:
    if (!(v52 & 1 | (v7 != 0))) {
      goto LABEL_69;
    }
  }
  if (v33 != 2)
  {
    if (v33 == 1)
    {
      if (v34)
      {
        if ((*(unsigned char *)(a1 + 60) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_87;
          }
          v7 += *(unsigned __int8 *)(a1 + 60) << 29 >> 31;
        }
        else
        {
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_87;
          }
          char v39 = objc_alloc_init(GEOPDPublisherSuggestionResult);
          if (!GEOPDPublisherSuggestionResultReadAllFrom((uint64_t)v39, (void *)v3)) {
            goto LABEL_86;
          }
          PBReaderRecallMark();
          unsigned int v40 = *(void **)(a1 + 32);
          *(void *)(a1 + 32) = v39;

          --v7;
        }
        goto LABEL_67;
      }
    }
    else if ((v51 & 1) != 0 && (*(unsigned char *)(a1 + 60) & 1) == 0)
    {
      if (!*(void *)(a1 + 16))
      {
        id v41 = objc_alloc_init(MEMORY[0x1E4F940B0]);
        int v42 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v41;
      }
      int v43 = PBUnknownFieldAdd();
      uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
      if (!v43)
      {
        int v49 = 0;
        unsigned int v50 = &OBJC_IVAR___GEOMapDataSubscriptionDownloadGroup__completedSubscriptions;
        goto LABEL_72;
      }
      goto LABEL_68;
    }
    goto LABEL_63;
  }
  if (!v34 || (*(unsigned char *)(a1 + 60) & 8) != 0) {
    goto LABEL_63;
  }
  if ((PBReaderPlaceMark() & 1) == 0) {
    goto LABEL_87;
  }
  char v39 = objc_alloc_init(GEOPDAllCollectionsViewResultFilter);
  if (GEOPDAllCollectionsViewResultFilterReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1))
  {
    PBReaderRecallMark();
    -[GEOPDAllCollectionsViewResult _addNoFlagsResultFilter:](a1, v39);
    goto LABEL_56;
  }
LABEL_86:

LABEL_87:
  int v49 = 0;
  unsigned int v50 = &OBJC_IVAR___GEOMapDataSubscriptionDownloadGroup__completedSubscriptions;
  uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
LABEL_71:
  if ((v51 & 1) == 0) {
    goto LABEL_73;
  }
LABEL_72:
  *(unsigned char *)(a1 + v50[115]) |= 1u;
LABEL_73:
  if (v54 || (v49 & 1) == 0)
  {
    *(unsigned char *)(a1 + v50[115]) |= 4u;
    *(unsigned char *)(a1 + v50[115]) |= 8u;
    *(unsigned char *)(a1 + v50[115]) |= 2u;
  }
  else if (v19)
  {
    while (1)
    {
      int v45 = *v19++;
      char v46 = 4;
      switch(v45)
      {
        case 0:
          goto LABEL_80;
        case 1:
          goto LABEL_79;
        case 2:
          char v46 = 8;
          goto LABEL_79;
        case 3:
          char v46 = 2;
LABEL_79:
          *(unsigned char *)(a1 + v50[115]) |= v46;
          break;
        default:
          continue;
      }
    }
  }
LABEL_80:
  if (v49) {
    unint64_t v3 = *(unsigned char *)(v3 + *v21) == 0;
  }
  else {
    unint64_t v3 = 0;
  }
  if (v54)
  {
    int v47 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  return v3;
}

void sub_18905C92C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDAutocompleteEntryAddressReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 72));
  unint64_t v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 68);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 64)];
  uint64_t v7 = v6;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  int v13 = ((*(unsigned __int16 *)(a1 + 84) >> 6) & 1)
      + ((*(unsigned __int16 *)(a1 + 84) >> 7) & 1)
      + ((*(unsigned __int16 *)(a1 + 84) >> 5) & 1);
  while (2)
  {
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    uint64_t v16 = 1;
    switch(a3[v9])
    {
      case -4:
        ++v13;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v15 = v11;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v17 = v13 != 0;
        char v18 = v17 | v12;
        char v81 = v17 & ~(_BYTE)v12 | v10;
        char v83 = v17 | v12 | v81;
        if (((v17 | v12) | v8)) {
          unint64_t v19 = 0;
        }
        else {
          unint64_t v19 = a3;
        }
        id v20 = (int *)MEMORY[0x1E4F940E8];
        char v84 = (v19 == 0) | v18;
        uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
        BOOL v22 = &OBJC_IVAR___GEOPDAutocompleteParametersAllEntriesWithBrowse__querySuggestionEntry;
        char v23 = (int *)MEMORY[0x1E4F940B8];
        char v82 = v17 | v12;
        break;
      default:
        ++v13;
LABEL_7:
        uint64_t v14 = v10;
LABEL_8:
        uint64_t v15 = v11;
        uint64_t v16 = v12;
LABEL_10:
        ++v9;
        uint64_t v10 = v14;
        uint64_t v11 = v15;
        uint64_t v12 = v16;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v20) >= *(void *)(v3 + *v7) || *(unsigned char *)(v3 + *v21)) {
      goto LABEL_114;
    }
    char v24 = 0;
    unsigned int v25 = 0;
    unint64_t v26 = 0;
    while (1)
    {
      uint64_t v27 = *v20;
      uint64_t v28 = *(void *)(v3 + v27);
      unint64_t v29 = v28 + 1;
      if (v28 == -1 || v29 > *(void *)(v3 + *v7)) {
        break;
      }
      char v30 = *(unsigned char *)(*(void *)(v3 + *v23) + v28);
      *(void *)(v3 + v27) = v29;
      v26 |= (unint64_t)(v30 & 0x7F) << v24;
      if ((v30 & 0x80) == 0) {
        goto LABEL_25;
      }
      v24 += 7;
      BOOL v31 = v25++ >= 9;
      if (v31)
      {
        unint64_t v26 = 0;
        int v32 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v21) = 1;
LABEL_25:
    int v32 = *(unsigned __int8 *)(v3 + *v21);
    if (*(unsigned char *)(v3 + *v21)) {
      unint64_t v26 = 0;
    }
LABEL_27:
    if (v32 || (v26 & 7) == 4)
    {
LABEL_114:
      int v80 = 1;
      goto LABEL_115;
    }
    unint64_t v34 = v26 >> 3;
    BOOL v35 = v18;
    if ((v84 & 1) == 0)
    {
      int v36 = v19;
      do
      {
        int v38 = *v36++;
        int v37 = v38;
        BOOL v35 = v38 != 0;
        if (v38) {
          BOOL v39 = v37 == v34;
        }
        else {
          BOOL v39 = 1;
        }
      }
      while (!v39);
    }
    switch((int)v34)
    {
      case 1:
        if (!v35) {
          goto LABEL_88;
        }
        if ((*(_WORD *)(a1 + v22[904]) & 0x40) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_135;
          }
          unsigned int v40 = objc_alloc_init(GEOLatLng);
          if (GEOLatLngReadAllFrom((uint64_t)v40, (void *)v3))
          {
            PBReaderRecallMark();
            uint64_t v41 = 24;
            goto LABEL_79;
          }
          goto LABEL_134;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_135;
        }
        BOOL v22 = &OBJC_IVAR___GEOPDAutocompleteParametersAllEntriesWithBrowse__querySuggestionEntry;
        __int16 v73 = *(_WORD *)(a1 + 84) << 9;
        goto LABEL_107;
      case 2:
        if ((v8 & 1) == 0) {
          goto LABEL_88;
        }
        char v45 = 0;
        unsigned int v46 = 0;
        uint64_t v47 = 0;
        *(_WORD *)(a1 + v22[904]) |= 4u;
        while (2)
        {
          uint64_t v48 = *v20;
          uint64_t v49 = *(void *)(v3 + v48);
          unint64_t v50 = v49 + 1;
          if (v49 == -1 || v50 > *(void *)(v3 + *v7))
          {
            *(unsigned char *)(v3 + *v21) = 1;
          }
          else
          {
            char v51 = *(unsigned char *)(*(void *)(v3 + *v23) + v49);
            *(void *)(v3 + v48) = v50;
            v47 |= (unint64_t)(v51 & 0x7F) << v45;
            if (v51 < 0)
            {
              v45 += 7;
              BOOL v31 = v46++ >= 9;
              if (v31)
              {
                uint64_t v47 = 0;
                goto LABEL_94;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v21)) {
          uint64_t v47 = 0;
        }
LABEL_94:
        *(void *)(a1 + 56) = v47;
        goto LABEL_89;
      case 3:
        if ((v8 & 1) == 0) {
          goto LABEL_88;
        }
        *(_WORD *)(a1 + v22[904]) |= 2u;
        uint64_t v52 = *v20;
        unint64_t v53 = *(void *)(v3 + v52);
        if (v53 <= 0xFFFFFFFFFFFFFFF7 && v53 + 8 <= *(void *)(v3 + *v7))
        {
          uint64_t v54 = *(void *)(*(void *)(v3 + *v23) + v53);
          *(void *)(v3 + v52) = v53 + 8;
        }
        else
        {
          *(unsigned char *)(v3 + *v21) = 1;
          uint64_t v54 = 0;
        }
        uint64_t v74 = 40;
        goto LABEL_113;
      case 4:
        if ((v8 & 1) == 0) {
          goto LABEL_88;
        }
        char v55 = 0;
        unsigned int v56 = 0;
        uint64_t v57 = 0;
        *(_WORD *)(a1 + v22[904]) |= 8u;
        while (2)
        {
          uint64_t v58 = *v20;
          uint64_t v59 = *(void *)(v3 + v58);
          unint64_t v60 = v59 + 1;
          if (v59 == -1 || v60 > *(void *)(v3 + *v7))
          {
            *(unsigned char *)(v3 + *v21) = 1;
          }
          else
          {
            char v61 = *(unsigned char *)(*(void *)(v3 + *v23) + v59);
            *(void *)(v3 + v58) = v60;
            v57 |= (unint64_t)(v61 & 0x7F) << v55;
            if (v61 < 0)
            {
              v55 += 7;
              BOOL v31 = v56++ >= 9;
              if (v31)
              {
                LODWORD(v57) = 0;
                goto LABEL_98;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v21)) {
          LODWORD(v57) = 0;
        }
LABEL_98:
        *(_DWORD *)(a1 + 76) = v57;
        goto LABEL_89;
      case 5:
        if ((v8 & 1) == 0) {
          goto LABEL_88;
        }
        *(_WORD *)(a1 + v22[904]) |= 1u;
        uint64_t v62 = *v20;
        unint64_t v63 = *(void *)(v3 + v62);
        if (v63 <= 0xFFFFFFFFFFFFFFF7 && v63 + 8 <= *(void *)(v3 + *v7))
        {
          uint64_t v54 = *(void *)(*(void *)(v3 + *v23) + v63);
          *(void *)(v3 + v62) = v63 + 8;
        }
        else
        {
          *(unsigned char *)(v3 + *v21) = 1;
          uint64_t v54 = 0;
        }
        uint64_t v74 = 32;
LABEL_113:
        *(void *)(a1 + v74) = v54;
        goto LABEL_89;
      case 6:
        if (!v35) {
          goto LABEL_88;
        }
        if ((*(_WORD *)(a1 + v22[904]) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_135;
          }
          BOOL v22 = &OBJC_IVAR___GEOPDAutocompleteParametersAllEntriesWithBrowse__querySuggestionEntry;
          __int16 v73 = *(_WORD *)(a1 + 84) << 8;
LABEL_107:
          v9 += v73 >> 15;
          char v18 = v82;
          uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
          goto LABEL_108;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_135;
        }
        unsigned int v40 = objc_alloc_init(GEOPDMapsIdentifier);
        if (GEOPDMapsIdentifierReadAllFrom((uint64_t)v40, (void *)v3))
        {
          PBReaderRecallMark();
          uint64_t v41 = 48;
LABEL_79:
          uint64_t v64 = *(void **)(a1 + v41);
          *(void *)(a1 + v41) = v40;

          --v9;
          char v18 = v82;
          uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
          BOOL v22 = &OBJC_IVAR___GEOPDAutocompleteParametersAllEntriesWithBrowse__querySuggestionEntry;
LABEL_108:
          uint64_t v7 = (int *)MEMORY[0x1E4F940E0];
LABEL_89:
          if (!(v83 & 1 | (v9 != 0))) {
            goto LABEL_114;
          }
          continue;
        }
LABEL_134:

LABEL_135:
        int v80 = 0;
        char v18 = v82;
        uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
        BOOL v22 = &OBJC_IVAR___GEOPDAutocompleteParametersAllEntriesWithBrowse__querySuggestionEntry;
LABEL_115:
        if (v81) {
LABEL_116:
        }
          *(_WORD *)(a1 + v22[904]) |= 0x20u;
        if (v18 & 1 | ((v80 & 1) == 0))
        {
          *(_WORD *)(a1 + v22[904]) |= 0x40u;
          *(_WORD *)(a1 + v22[904]) |= 0x80u;
          goto LABEL_127;
        }
        if (v19)
        {
          while (2)
          {
            while (1)
            {
              int v76 = *v19++;
              int v75 = v76;
              if (v76 == 1) {
                break;
              }
              if (v75 == 6)
              {
                __int16 v77 = 128;
                goto LABEL_126;
              }
              if (!v75) {
                goto LABEL_127;
              }
            }
            __int16 v77 = 64;
LABEL_126:
            *(_WORD *)(a1 + v22[904]) |= v77;
            continue;
          }
        }
LABEL_127:
        if (v80)
        {
          unint64_t v3 = *(unsigned char *)(v3 + *v21) == 0;
          if ((v18 & 1) == 0) {
            return v3;
          }
LABEL_131:
          __int16 v78 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        else
        {
          unint64_t v3 = 0;
          if (v18) {
            goto LABEL_131;
          }
        }
        return v3;
      case 7:
        if ((v8 & 1) == 0) {
          goto LABEL_88;
        }
        char v65 = 0;
        unsigned int v66 = 0;
        uint64_t v67 = 0;
        *(_WORD *)(a1 + v22[904]) |= 0x10u;
        while (2)
        {
          uint64_t v68 = *v20;
          uint64_t v69 = *(void *)(v3 + v68);
          unint64_t v70 = v69 + 1;
          if (v69 == -1 || v70 > *(void *)(v3 + *v7))
          {
            *(unsigned char *)(v3 + *v21) = 1;
          }
          else
          {
            char v71 = *(unsigned char *)(*(void *)(v3 + *v23) + v69);
            *(void *)(v3 + v68) = v70;
            v67 |= (unint64_t)(v71 & 0x7F) << v65;
            if (v71 < 0)
            {
              v65 += 7;
              BOOL v31 = v66++ >= 9;
              if (v31)
              {
                uint64_t v67 = 0;
                goto LABEL_102;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v21)) {
          uint64_t v67 = 0;
        }
LABEL_102:
        *(unsigned char *)(a1 + 80) = v67 != 0;
        goto LABEL_89;
      default:
        if ((v81 & 1) == 0 || (*(_WORD *)(a1 + v22[904]) & 0x20) != 0)
        {
LABEL_88:
          char v72 = PBReaderSkipValueWithTag();
          uint64_t v7 = (int *)MEMORY[0x1E4F940E0];
          BOOL v22 = &OBJC_IVAR___GEOPDAutocompleteParametersAllEntriesWithBrowse__querySuggestionEntry;
          uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
          char v18 = v82;
          if ((v72 & 1) == 0)
          {
            int v80 = 0;
            goto LABEL_115;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v42 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            int v43 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v42;
          }
          int v44 = PBUnknownFieldAdd();
          char v18 = v82;
          uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
          BOOL v22 = &OBJC_IVAR___GEOPDAutocompleteParametersAllEntriesWithBrowse__querySuggestionEntry;
          uint64_t v7 = (int *)MEMORY[0x1E4F940E0];
          if (!v44)
          {
            int v80 = 0;
            goto LABEL_116;
          }
        }
        goto LABEL_89;
    }
  }
}

void sub_189069980(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDLocalizedQueryUnderstandingTaxonomyResultItemBrandReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 160));
  unint64_t v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 156);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 152)];
  uint64_t v7 = v6;
  uint64_t v8 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  unsigned int v13 = *(_DWORD *)(a1 + 168);
  uint32x4_t v14 = (uint32x4_t)vdupq_n_s32(v13);
  v15.i64[0] = 0x100000001;
  v15.i64[1] = 0x100000001;
  unsigned int v16 = vaddvq_s32(vaddq_s32(vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_18A62F600), v15), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_18A62F610), v15)), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_18A62F620), v15)))+ ((v13 >> 5) & 1)+ ((v13 >> 8) & 1)+ ((v13 >> 3) & 1);
  while (2)
  {
    uint64_t v17 = 1;
    uint64_t v18 = 1;
    uint64_t v19 = 1;
    switch(a3[v8])
    {
      case -4:
        ++v16;
        goto LABEL_8;
      case -3:
        char v9 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v18 = v11;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v20 = v16 > 0xA;
        char v21 = v20 & ~(_BYTE)v12 | v10;
        unsigned __int8 v22 = v20 | v12;
        char v79 = v21;
        char v80 = v22 | v21;
        if ((v22 | v9)) {
          char v23 = 0;
        }
        else {
          char v23 = a3;
        }
        char v81 = (v23 == 0) | v22;
        BOOL v82 = v22;
        char v24 = (int *)MEMORY[0x1E4F940E8];
        unsigned int v25 = (int *)MEMORY[0x1E4F940C8];
        unint64_t v26 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v16;
LABEL_7:
        uint64_t v17 = v10;
LABEL_8:
        uint64_t v18 = v11;
        uint64_t v19 = v12;
LABEL_10:
        ++v8;
        uint64_t v10 = v17;
        uint64_t v11 = v18;
        uint64_t v12 = v19;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v24) >= *(void *)(v3 + *v7) || *(unsigned char *)(v3 + *v25)) {
      goto LABEL_166;
    }
    char v27 = 0;
    unsigned int v28 = 0;
    unint64_t v29 = 0;
    while (1)
    {
      uint64_t v30 = *v24;
      uint64_t v31 = *(void *)(v3 + v30);
      unint64_t v32 = v31 + 1;
      if (v31 == -1 || v32 > *(void *)(v3 + *v7)) {
        break;
      }
      char v33 = *(unsigned char *)(*(void *)(v3 + *v26) + v31);
      *(void *)(v3 + v30) = v32;
      v29 |= (unint64_t)(v33 & 0x7F) << v27;
      if ((v33 & 0x80) == 0) {
        goto LABEL_25;
      }
      v27 += 7;
      BOOL v34 = v28++ >= 9;
      if (v34)
      {
        unint64_t v29 = 0;
        int v35 = *(unsigned __int8 *)(v3 + *v25);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v25) = 1;
LABEL_25:
    int v35 = *(unsigned __int8 *)(v3 + *v25);
    if (*(unsigned char *)(v3 + *v25)) {
      unint64_t v29 = 0;
    }
LABEL_27:
    if (v35 || (v29 & 7) == 4)
    {
LABEL_166:
      int v78 = 1;
      goto LABEL_167;
    }
    unint64_t v37 = v29 >> 3;
    BOOL v38 = v82;
    if ((v81 & 1) == 0)
    {
      BOOL v39 = v23;
      do
      {
        int v41 = *v39++;
        int v40 = v41;
        BOOL v38 = v41 != 0;
        if (v41) {
          BOOL v42 = v40 == v37;
        }
        else {
          BOOL v42 = 1;
        }
      }
      while (!v42);
    }
    switch((int)v37)
    {
      case 1:
        if ((v9 & 1) == 0) {
          goto LABEL_130;
        }
        char v43 = 0;
        unsigned int v44 = 0;
        uint64_t v45 = 0;
        *(_DWORD *)(a1 + 168) |= 2u;
        while (1)
        {
          uint64_t v46 = *v24;
          uint64_t v47 = *(void *)(v3 + v46);
          unint64_t v48 = v47 + 1;
          if (v47 == -1 || v48 > *(void *)(v3 + *v7)) {
            break;
          }
          char v49 = *(unsigned char *)(*(void *)(v3 + *v26) + v47);
          *(void *)(v3 + v46) = v48;
          v45 |= (unint64_t)(v49 & 0x7F) << v43;
          if ((v49 & 0x80) == 0) {
            goto LABEL_133;
          }
          v43 += 7;
          BOOL v34 = v44++ >= 9;
          if (v34)
          {
            uint64_t v45 = 0;
            goto LABEL_135;
          }
        }
        *(unsigned char *)(v3 + *v25) = 1;
LABEL_133:
        if (*(unsigned char *)(v3 + *v25)) {
          uint64_t v45 = 0;
        }
LABEL_135:
        uint64_t v72 = 104;
        goto LABEL_144;
      case 2:
        if (!v38) {
          goto LABEL_130;
        }
        if ((*(unsigned char *)(a1 + 170) & 1) == 0)
        {
          uint64_t v53 = PBReaderReadString();
          uint64_t v54 = 136;
          goto LABEL_107;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_195;
        }
        int v73 = (int)(*(_DWORD *)(a1 + 168) << 15) >> 31;
        goto LABEL_163;
      case 3:
        if (!v38) {
          goto LABEL_130;
        }
        if ((*(unsigned char *)(a1 + 170) & 2) == 0)
        {
          uint64_t v53 = PBReaderReadString();
          uint64_t v54 = 144;
          goto LABEL_107;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_195;
        }
        int v73 = (int)(*(_DWORD *)(a1 + 168) << 14) >> 31;
        goto LABEL_163;
      case 4:
        if (!v38) {
          goto LABEL_130;
        }
        if ((*(unsigned char *)(a1 + 169) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_195;
          }
          int v73 = (int)(*(_DWORD *)(a1 + 168) << 16) >> 31;
          goto LABEL_163;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_195;
        }
        char v55 = objc_alloc_init(GEOLocalizedString);
        if (!GEOLocalizedStringReadAllFrom((uint64_t)v55, (void *)v3, v11 & 1)) {
          goto LABEL_194;
        }
        PBReaderRecallMark();
        uint64_t v56 = 128;
        goto LABEL_128;
      case 5:
        if (!v38 || (*(unsigned char *)(a1 + 169) & 2) != 0) {
          goto LABEL_130;
        }
        PBReaderReadString();
        char v55 = (GEOLocalizedString *)objc_claimAutoreleasedReturnValue();
        if (v55) {
          -[GEOPDLocalizedQueryUnderstandingTaxonomyResultItemBrand _addNoFlagsCategory:](a1, v55);
        }
        goto LABEL_122;
      case 6:
        if (!v38) {
          goto LABEL_130;
        }
        if ((*(unsigned char *)(a1 + 169) & 4) == 0)
        {
          uint64_t v53 = PBReaderReadString();
          uint64_t v54 = 80;
          goto LABEL_107;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_195;
        }
        int v73 = (int)(*(_DWORD *)(a1 + 168) << 21) >> 31;
        goto LABEL_163;
      case 7:
        if ((v9 & 1) == 0) {
          goto LABEL_130;
        }
        char v57 = 0;
        unsigned int v58 = 0;
        uint64_t v59 = 0;
        *(_DWORD *)(a1 + 168) |= 4u;
        while (2)
        {
          uint64_t v60 = *v24;
          uint64_t v61 = *(void *)(v3 + v60);
          unint64_t v62 = v61 + 1;
          if (v61 == -1 || v62 > *(void *)(v3 + *v7))
          {
            *(unsigned char *)(v3 + *v25) = 1;
          }
          else
          {
            char v63 = *(unsigned char *)(*(void *)(v3 + *v26) + v61);
            *(void *)(v3 + v60) = v62;
            v59 |= (unint64_t)(v63 & 0x7F) << v57;
            if (v63 < 0)
            {
              v57 += 7;
              BOOL v34 = v58++ >= 9;
              if (v34)
              {
                uint64_t v59 = 0;
                goto LABEL_139;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v25)) {
          uint64_t v59 = 0;
        }
LABEL_139:
        *(unsigned char *)(a1 + 164) = v59 != 0;
        goto LABEL_165;
      case 8:
        if ((v9 & 1) == 0) {
          goto LABEL_130;
        }
        char v64 = 0;
        unsigned int v65 = 0;
        uint64_t v45 = 0;
        *(_DWORD *)(a1 + 168) |= 1u;
        while (2)
        {
          uint64_t v66 = *v24;
          uint64_t v67 = *(void *)(v3 + v66);
          unint64_t v68 = v67 + 1;
          if (v67 == -1 || v68 > *(void *)(v3 + *v7))
          {
            *(unsigned char *)(v3 + *v25) = 1;
          }
          else
          {
            char v69 = *(unsigned char *)(*(void *)(v3 + *v26) + v67);
            *(void *)(v3 + v66) = v68;
            v45 |= (unint64_t)(v69 & 0x7F) << v64;
            if (v69 < 0)
            {
              v64 += 7;
              BOOL v34 = v65++ >= 9;
              if (v34)
              {
                uint64_t v45 = 0;
                goto LABEL_143;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v25)) {
          uint64_t v45 = 0;
        }
LABEL_143:
        uint64_t v72 = 48;
LABEL_144:
        *(void *)(a1 + v72) = v45;
        goto LABEL_165;
      case 9:
        if (!v38) {
          goto LABEL_130;
        }
        if ((*(unsigned char *)(a1 + 168) & 0x80) == 0)
        {
          uint64_t v53 = PBReaderReadString();
          uint64_t v54 = 56;
          goto LABEL_107;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_195;
        }
        int v73 = (int)(*(_DWORD *)(a1 + 168) << 24) >> 31;
        goto LABEL_163;
      case 10:
        if (!v38) {
          goto LABEL_130;
        }
        if ((*(unsigned char *)(a1 + 169) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_195;
          }
          int v73 = (int)(*(_DWORD *)(a1 + 168) << 17) >> 31;
          goto LABEL_163;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_195;
        }
        char v55 = objc_alloc_init(GEOPDMultiLocalizedString);
        if (!GEOPDMultiLocalizedStringReadAllFrom((uint64_t)v55, (void *)v3, v11 & 1)) {
          goto LABEL_194;
        }
        PBReaderRecallMark();
        uint64_t v56 = 120;
        goto LABEL_128;
      case 11:
        if (!v38 || (*(unsigned char *)(a1 + 169) & 0x20) != 0) {
          goto LABEL_130;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_195;
        }
        char v55 = objc_alloc_init(GEOPDIconMapping);
        if (!GEOPDIconMappingReadAllFrom((uint64_t)v55, (void *)v3, v11 & 1)) {
          goto LABEL_194;
        }
        PBReaderRecallMark();
        -[GEOPDLocalizedQueryUnderstandingTaxonomyResultItemBrand _addNoFlagsPrefCategoryIcon:](a1, v55);
        goto LABEL_122;
      case 12:
        if (!v38 || (*(unsigned char *)(a1 + 168) & 0x10) != 0) {
          goto LABEL_130;
        }
        PBReaderReadString();
        char v55 = (GEOLocalizedString *)objc_claimAutoreleasedReturnValue();
        if (v55) {
          -[GEOPDLocalizedQueryUnderstandingTaxonomyResultItemBrand _addNoFlagsBusinessCardAltCategories:](a1, v55);
        }
        goto LABEL_122;
      case 13:
        if (!v38) {
          goto LABEL_130;
        }
        if ((*(unsigned char *)(a1 + 168) & 0x40) == 0)
        {
          uint64_t v53 = PBReaderReadString();
          uint64_t v54 = 40;
LABEL_107:
          unint64_t v70 = *(void **)(a1 + v54);
          *(void *)(a1 + v54) = v53;
          goto LABEL_129;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_195;
        }
        int v73 = (int)(*(_DWORD *)(a1 + 168) << 25) >> 31;
        goto LABEL_163;
      case 14:
        if (!v38 || (*(unsigned char *)(a1 + 169) & 8) != 0) {
          goto LABEL_130;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_195;
        }
        char v55 = objc_alloc_init(GEOPDIconMapping);
        if (!GEOPDIconMappingReadAllFrom((uint64_t)v55, (void *)v3, v11 & 1)) {
          goto LABEL_194;
        }
        PBReaderRecallMark();
        -[GEOPDLocalizedQueryUnderstandingTaxonomyResultItemBrand _addNoFlagsModernPrimaryCategoryIcon:](a1, v55);
LABEL_122:

        goto LABEL_164;
      case 15:
        if (!v38) {
          goto LABEL_130;
        }
        if ((*(unsigned char *)(a1 + 169) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_195;
          }
          int v73 = (int)(*(_DWORD *)(a1 + 168) << 19) >> 31;
          goto LABEL_163;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_195;
        }
        char v55 = objc_alloc_init(GEOPDMultiLocalizedString);
        if (!GEOPDMultiLocalizedStringReadAllFrom((uint64_t)v55, (void *)v3, v11 & 1)) {
          goto LABEL_194;
        }
        PBReaderRecallMark();
        uint64_t v56 = 96;
        goto LABEL_128;
      case 16:
        if (!v38 || (*(unsigned char *)(a1 + 168) & 0x20) != 0) {
          goto LABEL_130;
        }
        PBReaderReadString();
        char v55 = (GEOLocalizedString *)objc_claimAutoreleasedReturnValue();
        if (v55) {
          -[GEOPDLocalizedQueryUnderstandingTaxonomyResultItemBrand _addNoFlagsBusinessCardModernAlternateCategories:](a1, v55);
        }
        goto LABEL_122;
      case 17:
        if (!v38) {
          goto LABEL_130;
        }
        if (*(unsigned char *)(a1 + 169))
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_195;
          }
          int v73 = (int)(*(_DWORD *)(a1 + 168) << 23) >> 31;
LABEL_163:
          v8 += v73;
LABEL_164:
          unsigned int v25 = (int *)MEMORY[0x1E4F940C8];
          uint64_t v7 = (int *)MEMORY[0x1E4F940E0];
          unint64_t v26 = (int *)MEMORY[0x1E4F940B8];
LABEL_165:
          if (!(v80 & 1 | (v8 != 0))) {
            goto LABEL_166;
          }
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_195;
        }
        char v55 = objc_alloc_init(GEOPDBusinessConnectAttributes);
        if (GEOPDBusinessConnectAttributesReadAllFrom((uint64_t)v55, (void *)v3, v11 & 1))
        {
          PBReaderRecallMark();
          uint64_t v56 = 64;
LABEL_128:
          unint64_t v70 = *(void **)(a1 + v56);
          *(void *)(a1 + v56) = v55;
LABEL_129:

          --v8;
          goto LABEL_164;
        }
LABEL_194:

LABEL_195:
        int v78 = 0;
        unsigned int v25 = (int *)MEMORY[0x1E4F940C8];
LABEL_167:
        if (v79) {
LABEL_168:
        }
          *(_DWORD *)(a1 + 168) |= 8u;
        if (v82 || (v78 & 1) == 0)
        {
          *(_DWORD *)(a1 + 168) |= 0x10000u;
          *(_DWORD *)(a1 + 168) |= 0x20000u;
          *(_DWORD *)(a1 + 168) |= 0x8000u;
          *(_DWORD *)(a1 + 168) |= 0x200u;
          *(_DWORD *)(a1 + 168) |= 0x400u;
          *(_DWORD *)(a1 + 168) |= 0x80u;
          *(_DWORD *)(a1 + 168) |= 0x4000u;
          *(_DWORD *)(a1 + 168) |= 0x2000u;
          *(_DWORD *)(a1 + 168) |= 0x10u;
          *(_DWORD *)(a1 + 168) |= 0x40u;
          *(_DWORD *)(a1 + 168) |= 0x800u;
          *(_DWORD *)(a1 + 168) |= 0x1000u;
          *(_DWORD *)(a1 + 168) |= 0x20u;
          *(_DWORD *)(a1 + 168) |= 0x100u;
        }
        else if (v23)
        {
          while (1)
          {
            int v75 = *v23++;
            int v74 = 0x10000;
            switch(v75)
            {
              case 0:
                goto LABEL_188;
              case 2:
                goto LABEL_186;
              case 3:
                int v74 = 0x20000;
                goto LABEL_186;
              case 4:
                int v74 = 0x8000;
                goto LABEL_186;
              case 5:
                int v74 = 512;
                goto LABEL_186;
              case 6:
                int v74 = 1024;
                goto LABEL_186;
              case 9:
                int v74 = 128;
                goto LABEL_186;
              case 10:
                int v74 = 0x4000;
                goto LABEL_186;
              case 11:
                int v74 = 0x2000;
                goto LABEL_186;
              case 12:
                int v74 = 16;
                goto LABEL_186;
              case 13:
                int v74 = 64;
                goto LABEL_186;
              case 14:
                int v74 = 2048;
                goto LABEL_186;
              case 15:
                int v74 = 4096;
                goto LABEL_186;
              case 16:
                int v74 = 32;
                goto LABEL_186;
              case 17:
                int v74 = 256;
LABEL_186:
                *(_DWORD *)(a1 + 168) |= v74;
                break;
              default:
                continue;
            }
          }
        }
LABEL_188:
        if (v78) {
          unint64_t v3 = *(unsigned char *)(v3 + *v25) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v82)
        {
          int v76 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      default:
        if ((v79 & 1) == 0 || (*(unsigned char *)(a1 + 168) & 8) != 0)
        {
LABEL_130:
          char v71 = PBReaderSkipValueWithTag();
          unint64_t v26 = (int *)MEMORY[0x1E4F940B8];
          uint64_t v7 = (int *)MEMORY[0x1E4F940E0];
          unsigned int v25 = (int *)MEMORY[0x1E4F940C8];
          if ((v71 & 1) == 0)
          {
            int v78 = 0;
            goto LABEL_167;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v50 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            char v51 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v50;
          }
          int v52 = PBUnknownFieldAdd();
          unsigned int v25 = (int *)MEMORY[0x1E4F940C8];
          uint64_t v7 = (int *)MEMORY[0x1E4F940E0];
          unint64_t v26 = (int *)MEMORY[0x1E4F940B8];
          if (!v52)
          {
            int v78 = 0;
            goto LABEL_168;
          }
        }
        goto LABEL_165;
    }
  }
}

void GEOPathMatcherRoadNetwork::get_road_properties(GEOPathMatcherRoadNetwork *this@<X0>, GEOPathMatcherRoadKey *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = a2;
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = (void *)*((void *)this + 16);
  long long v8 = *(_OWORD *)&a2->var2;
  v59[0] = *(_OWORD *)&a2->var0;
  v59[1] = v8;
  char v9 = [v7 roadForKey:v59];
  uint64_t v10 = v9;
  if (v9)
  {
    int v11 = *((_DWORD *)this + 34);
    if (v11 == 3)
    {
      int v16 = [v9 bikeableSide];
    }
    else if (v11 == 2)
    {
      int v16 = [v9 walkableSide];
    }
    else
    {
      if (v11) {
        goto LABEL_24;
      }
      if [v9 isDrivable] && (objc_msgSend(v10, "isValidTravelDirection"))
      {
        BOOL v12 = 1;
LABEL_27:
        char v47 = v12;
        goto LABEL_28;
      }
      if ([v10 isDrivable])
      {
LABEL_24:
        char v47 = 0;
LABEL_28:
        uint64_t v54 = 0;
        char v55 = 0;
        v56[0] = 0;
        if (!a3) {
          goto LABEL_55;
        }
        for (unint64_t i = 0; i < [v10 coordinateCount]; ++i)
        {
          uint64_t v18 = (maps::path_codec::Coordinate *)[v10 coordinates3d];
          unint64_t v19 = maps::path_codec::Coordinate::from_lat_lon(v18, *((double *)v18 + 3 * i), *((double *)v18 + 3 * i + 1));
          unint64_t v21 = v19;
          uint64_t v5 = v20;
          unsigned __int8 v22 = v55;
          if ((unint64_t)v55 >= v56[0])
          {
            unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * (((char *)v55 - (unsigned char *)v54) >> 2);
            unint64_t v25 = v24 + 1;
            if (v24 + 1 > 0x1555555555555555) {
              std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
            }
            if (0x5555555555555556 * ((uint64_t)(v56[0] - (void)v54) >> 2) > v25) {
              unint64_t v25 = 0x5555555555555556 * ((uint64_t)(v56[0] - (void)v54) >> 2);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v56[0] - (void)v54) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
              unint64_t v26 = 0x1555555555555555;
            }
            else {
              unint64_t v26 = v25;
            }
            if (v26) {
              char v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::GeoCoordinates>>((uint64_t)v56, v26);
            }
            else {
              char v27 = 0;
            }
            unsigned int v28 = &v27[4 * (((char *)v55 - (unsigned char *)v54) >> 2)];
            *(void *)unsigned int v28 = v21;
            *((_DWORD *)v28 + 2) = v5;
            uint64_t v30 = v54;
            unint64_t v29 = v55;
            uint64_t v31 = &v27[12 * v24];
            if (v55 != v54)
            {
              do
              {
                uint64_t v32 = *(void *)(v29 - 3);
                v29 -= 3;
                int v33 = v29[2];
                *(void *)(v31 - 12) = v32;
                v31 -= 12;
                *((_DWORD *)v31 + 2) = v33;
              }
              while (v29 != v30);
              unint64_t v29 = v54;
            }
            char v23 = (unint64_t *)(v28 + 12);
            uint64_t v54 = v31;
            char v55 = (unint64_t *)(v28 + 12);
            v56[0] = &v27[12 * v26];
            if (v29) {
              operator delete(v29);
            }
          }
          else
          {
            *char v55 = v19;
            *((_DWORD *)v22 + 2) = v20;
            char v23 = (unint64_t *)((char *)v22 + 12);
          }
          char v55 = v23;
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v55 - (unsigned char *)v54) >> 2) < 2)
        {
          BOOL v34 = GEOGetGEOPathMatcherLog();
          if (os_log_type_enabled(v34, OS_LOG_TYPE_FAULT))
          {
            int v35 = [v10 coordinatesDescription];
            *(_DWORD *)uint64_t v60 = 138478083;
            *(void *)&v60[4] = v10;
            __int16 v61 = 2113;
            unint64_t v62 = v35;
            _os_log_impl(&dword_188D96000, v34, OS_LOG_TYPE_FAULT, "Returning a road to path-codec that has fewer than 2 points. This will cause a crash. %{private}@ | %{private}@", v60, 0x16u);
          }
          memset(v52, 0, sizeof(v52));
          std::string::basic_string[abi:ne180100]<0>(v60, "");
          maps::path_codec::RoadProperties::RoadProperties(a4, 0, 0, 0, (uint64_t)v52, 0, (long long *)v60);
          if (v63 < 0) {
            operator delete(*(void **)v60);
          }
          int v36 = (void *)v52[0];
          if (!v52[0]) {
            goto LABEL_71;
          }
        }
        else
        {
LABEL_55:
          unint64_t v37 = [v10 internalRoadName];
          if (v37)
          {
            uint64_t v5 = [v10 internalRoadName];
            BOOL v38 = (char *)[(GEOPathMatcherRoadKey *)v5 cStringUsingEncoding:4];
          }
          else
          {
            BOOL v38 = "";
          }
          std::string::basic_string[abi:ne180100]<0>(v60, v38);
          if (v37) {

          }
          __int16 v39 = [v10 roadClass];
          __int16 v40 = [v10 formOfWay];
          [v10 length];
          double v42 = v41;
          char v49 = 0;
          id v50 = 0;
          uint64_t v51 = 0;
          std::vector<maps::path_codec::Coordinate>::__init_with_size[abi:ne180100]<maps::path_codec::Coordinate*,maps::path_codec::Coordinate*>(&v49, v54, (uint64_t)v55, 0xAAAAAAAAAAAAAAABLL * (((char *)v55 - (unsigned char *)v54) >> 2));
          double v43 = v42 * 100.0;
          BOOL v44 = v42 * 100.0 >= -2147483650.0 && v43 < 2147483650.0;
          unsigned int v45 = llround(v43);
          if (v44) {
            int v46 = v45;
          }
          else {
            int v46 = 0x7FFFFFFF;
          }
          maps::path_codec::RoadProperties::RoadProperties(a4, v39, v40, v46, (uint64_t)&v49, v47, (long long *)v60);
          if (v49)
          {
            id v50 = v49;
            operator delete(v49);
          }
          if ((v63 & 0x80000000) == 0) {
            goto LABEL_71;
          }
          int v36 = *(void **)v60;
        }
        operator delete(v36);
LABEL_71:
        if (v54)
        {
          char v55 = (unint64_t *)v54;
          operator delete(v54);
        }
        goto LABEL_73;
      }
      int v16 = [v10 walkableSide];
    }
    BOOL v12 = v16 != 0;
    goto LABEL_27;
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v54);
  operator<<(v56, v5);
  unsigned int v13 = GEOGetGEOPathMatcherLog();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    std::stringbuf::str();
    uint32x4_t v14 = v63 >= 0 ? v60 : *(unsigned char **)v60;
    *(_DWORD *)buf = 136380675;
    unsigned int v65 = v14;
    _os_log_impl(&dword_188D96000, v13, OS_LOG_TYPE_ERROR, "Unable to find road for key: %{private}s", buf, 0xCu);
    if (v63 < 0) {
      operator delete(*(void **)v60);
    }
  }

  memset(__p, 0, sizeof(__p));
  std::string::basic_string[abi:ne180100]<0>(v60, "");
  maps::path_codec::RoadProperties::RoadProperties(a4, 0, 0, 0, (uint64_t)__p, 0, (long long *)v60);
  if (v63 < 0) {
    operator delete(*(void **)v60);
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
  uint64_t v54 = (void *)*MEMORY[0x1E4FBA408];
  uint64_t v15 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void **)((char *)&v54 + *((void *)v54 - 3)) = *(void **)(MEMORY[0x1E4FBA408] + 64);
  v56[0] = v15;
  v56[1] = MEMORY[0x1E4FBA470] + 16;
  if (v57 < 0) {
    operator delete((void *)v56[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x18C11F4F0](&v58);
LABEL_73:
}

void sub_18906FE04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

unint64_t maps::path_codec::Coordinate::from_lat_lon(maps::path_codec::Coordinate *this, double a2, double a3)
{
  unint64_t result = -1;
  if (a3 <= 180.0 && a2 >= -85.0511288 && a2 <= 85.0511288 && a3 >= -180.0)
  {
    double v5 = fmax(a2, -85.0511288);
    double v6 = v5 * 3.14159265 / 180.0;
    BOOL v7 = v5 < 85.0511288;
    double v8 = 1.48442223;
    if (v7) {
      double v8 = v6;
    }
    long double v9 = sin(v8);
    LODWORD(v10) = ((log((v9 + 1.0) / (1.0 - v9)) / -12.5663706 + 0.5) * 4294967300.0);
    if (v10 >= 0xFFFFFFFE) {
      uint64_t v10 = 4294967294;
    }
    else {
      uint64_t v10 = v10;
    }
    return ((a3 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v10 << 32);
  }
  return result;
}

BOOL GEORPRapUserResponseFeedbackIsValid(char *a1)
{
  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  uint64_t v2 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v3 = (int *)MEMORY[0x1E4F940E0];
  id v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    double v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        break;
      }
      if ((v8 >> 3) == 1)
      {
        if (v15 != 2 || (PBReaderSkipValueWithTag() & 1) == 0)
        {
LABEL_26:
          BOOL v17 = 0;
          goto LABEL_25;
        }
      }
      else if (!PBReaderSkipValueWithTag())
      {
        goto LABEL_26;
      }
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v17 = a1[*v4] == 0;
LABEL_25:
  PBReaderRecallMark();
  return v17;
}

BOOL GEORPMerchantLookupFeedbackIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  uint64_t v2 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v3 = (int *)MEMORY[0x1E4F940E0];
  id v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    double v5 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (a1[*v4]) {
        goto LABEL_30;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        goto LABEL_30;
      }
      if ((v8 >> 3) == 2) {
        break;
      }
      if ((v8 >> 3) == 1)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEORPMerchantLookupContextIsValid(a1)) {
          goto LABEL_31;
        }
LABEL_27:
        PBReaderRecallMark();
        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        goto LABEL_31;
      }
LABEL_29:
      if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
        goto LABEL_30;
      }
    }
    if (v15 != 2 || !PBReaderPlaceMark() || !GEORPMerchantLookupCorrectionsIsValid(a1))
    {
LABEL_31:
      PBReaderRecallMark();
      return 0;
    }
    goto LABEL_27;
  }
LABEL_30:
  BOOL v17 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v17;
}

void sub_18907382C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDFeatureBuildingReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 52))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOPDFeatureBuildingReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = [v8 position];
  *(_DWORD *)(a1 + 52) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOPDFeatureBuildingReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOPDFeatureBuildingReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOPDFeatureBuildingReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOPDFeatureBuildingCallReadAllRecursiveWithoutSynchronized(a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return Specified;
}

void sub_1890739E0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOClientCapabilitiesReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 236))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOClientCapabilitiesReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 240));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 232) = [v8 position];
  *(_DWORD *)(a1 + 236) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOClientCapabilitiesReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOClientCapabilitiesReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOClientCapabilitiesReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOClientCapabilitiesCallReadAllRecursiveWithoutSynchronized(a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 240));
  return Specified;
}

void sub_189073DAC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOClientCapabilitiesReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 240));
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 236);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 232)];
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  int32x2_t v10 = (int32x2_t)*(unsigned __int8 *)(a1 + 320);
  *((int32x2_t *)&v12 + 1) = v10;
  *(void *)&long long v12 = *(void *)(a1 + 312);
  int32x2_t v11 = (int32x2_t)(v12 >> 52);
  *((int32x2_t *)&v12 + 1) = v10;
  int32x2_t v13 = (int32x2_t)(v12 >> 51);
  *((int32x2_t *)&v12 + 1) = v10;
  int32x2_t v14 = (int32x2_t)(v12 >> 57);
  *((int32x2_t *)&v12 + 1) = v10;
  int32x2_t v15 = (int32x2_t)(v12 >> 63);
  *((int32x2_t *)&v12 + 1) = v10;
  int32x2_t v16 = (int32x2_t)(v12 >> 49);
  *((int32x2_t *)&v12 + 1) = v10;
  int32x2_t v17 = (int32x2_t)(v12 >> 53);
  *((int32x2_t *)&v12 + 1) = v10;
  int32x2_t v18 = (int32x2_t)(v12 >> 54);
  *((int32x2_t *)&v12 + 1) = v10;
  int32x2_t v19 = (int32x2_t)(v12 >> 62);
  *((int32x2_t *)&v12 + 1) = v10;
  int32x2_t v20 = (int32x2_t)(v12 >> 61);
  *((int32x2_t *)&v12 + 1) = v10;
  int32x2_t v21 = (int32x2_t)(v12 >> 59);
  *((int32x2_t *)&v12 + 1) = v10;
  int32x2_t v22 = (int32x2_t)(v12 >> 58);
  *((int32x2_t *)&v12 + 1) = v10;
  int32x2_t v23 = (int32x2_t)(v12 >> 60);
  *((int32x2_t *)&v12 + 1) = v10;
  int32x2_t v24 = (int32x2_t)(v12 >> 56);
  *((int32x2_t *)&v12 + 1) = v10;
  int32x2_t v25 = (int32x2_t)(v12 >> 50);
  *((int32x2_t *)&v12 + 1) = v10;
  int32x2_t v26 = (int32x2_t)(v12 >> 55);
  *((int32x2_t *)&v12 + 1) = v10;
  int32x2_t v27 = v14;
  char v28 = 0;
  int32x2_t v29 = v20;
  uint64_t v30 = (int *)MEMORY[0x1E4F940E0];
  *(int32x2_t *)v31.i8 = vzip1_s32(v22, v21);
  v31.u64[1] = (unint64_t)vzip1_s32(v24, v23);
  *(int32x2_t *)v32.i8 = vzip1_s32(v18, v17);
  v32.u64[1] = (unint64_t)vzip1_s32(v29, v19);
  *(int32x2_t *)v33.i8 = vzip1_s32(v16, v15);
  v33.u64[1] = (unint64_t)vzip1_s32(v27, v10);
  *(int32x2_t *)v34.i8 = vzip1_s32(v11, (int32x2_t)(*(void *)&v10 >> 2));
  v34.u64[1] = (unint64_t)vzip1_s32(v13, (int32x2_t)(*(void *)&v10 >> 1));
  v35.i64[0] = 0x100000001;
  v35.i64[1] = 0x100000001;
  int32x4_t v36 = (int32x4_t)vandq_s8(v32, v35);
  *(int32x2_t *)v32.i8 = vzip1_s32(v25, (int32x2_t)(*(void *)&v10 >> 3));
  v32.u64[1] = (unint64_t)vzip1_s32((int32x2_t)(v12 >> 48), v26);
  unsigned int v37 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v36, (int32x4_t)vandq_s8(v34, v35)), vaddq_s32((int32x4_t)vandq_s8(v31, v35), (int32x4_t)vandq_s8(v33, v35))), (int32x4_t)vandq_s8(v32, v35)))+ (((unint64_t)v12 >> 47) & 1);
  while (2)
  {
    uint64_t v38 = 1;
    uint64_t v39 = 1;
    uint64_t v40 = 1;
    switch(a3[v6])
    {
      case -4:
        ++v37;
        goto LABEL_8;
      case -3:
        char v28 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v39 = v8;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v41 = v37 > 0xF;
        char v42 = v41 & ~(_BYTE)v9 | v7;
        char v43 = v41 | v9;
        char v463 = v28;
        BOOL v44 = (int *)MEMORY[0x1E4F940E8];
        if (((v41 | v9) | v28)) {
          unsigned int v45 = 0;
        }
        else {
          unsigned int v45 = a3;
        }
        int v46 = 1;
        if (*(void *)(v3 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(v3 + (int)*MEMORY[0x1E4F940E0])) {
          goto LABEL_796;
        }
        char v464 = v43 | v42;
        char v47 = (int *)MEMORY[0x1E4F940C8];
        unint64_t v48 = (int *)MEMORY[0x1E4F940B8];
        char v465 = v41 & ~(_BYTE)v9 | v7;
        break;
      default:
        ++v37;
LABEL_7:
        uint64_t v38 = v7;
LABEL_8:
        uint64_t v39 = v8;
        uint64_t v40 = v9;
LABEL_10:
        ++v6;
        uint64_t v7 = v38;
        uint64_t v8 = v39;
        uint64_t v9 = v40;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(unsigned char *)(v3 + *v47)) {
      goto LABEL_793;
    }
    char v49 = 0;
    unsigned int v50 = 0;
    unint64_t v51 = 0;
    while (1)
    {
      uint64_t v52 = *v44;
      uint64_t v53 = *(void *)(v3 + v52);
      unint64_t v54 = v53 + 1;
      if (v53 == -1 || v54 > *(void *)(v3 + *v30)) {
        break;
      }
      char v55 = *(unsigned char *)(*(void *)(v3 + *v48) + v53);
      *(void *)(v3 + v52) = v54;
      v51 |= (unint64_t)(v55 & 0x7F) << v49;
      if ((v55 & 0x80) == 0) {
        goto LABEL_25;
      }
      v49 += 7;
      BOOL v56 = v50++ >= 9;
      if (v56)
      {
        unint64_t v51 = 0;
        int v57 = *(unsigned __int8 *)(v3 + *v47);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v47) = 1;
LABEL_25:
    int v57 = *(unsigned __int8 *)(v3 + *v47);
    if (*(unsigned char *)(v3 + *v47)) {
      unint64_t v51 = 0;
    }
LABEL_27:
    int v58 = v51 & 7;
    if (v57 || v58 == 4)
    {
LABEL_793:
      int v46 = 1;
      if ((v42 & 1) == 0) {
        goto LABEL_798;
      }
      goto LABEL_797;
    }
    unint64_t v60 = v51 >> 3;
    BOOL v61 = v43;
    if (!((v45 == 0) | v43 & 1))
    {
      unint64_t v62 = v45;
      do
      {
        int v64 = *v62++;
        int v63 = v64;
        BOOL v61 = v64 != 0;
        if (v64) {
          BOOL v65 = v63 == v60;
        }
        else {
          BOOL v65 = 1;
        }
      }
      while (!v65);
    }
    switch((int)v60)
    {
      case 1:
        if (!v61) {
          goto LABEL_538;
        }
        if ((*(void *)(a1 + 312) & 0x20000000000000) == 0)
        {
          uint64_t v66 = PBReaderReadString();
          uint64_t v67 = 112;
          goto LABEL_512;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_839;
        }
        uint64_t v433 = (uint64_t)(*(void *)(a1 + 312) << 10) >> 56;
        goto LABEL_760;
      case 2:
        if (!v61) {
          goto LABEL_538;
        }
        if ((*(void *)(a1 + 312) & 0x40000000000000) == 0)
        {
          uint64_t v66 = PBReaderReadString();
          uint64_t v67 = 120;
          goto LABEL_512;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_839;
        }
        uint64_t v433 = (uint64_t)(*(void *)(a1 + 312) << 9) >> 56;
        goto LABEL_760;
      case 3:
        if (!v61) {
          goto LABEL_538;
        }
        if ((*(void *)(a1 + 312) & 0x2000000000000000) == 0)
        {
          uint64_t v66 = PBReaderReadString();
          uint64_t v67 = 176;
          goto LABEL_512;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_839;
        }
        uint64_t v433 = (4 * *(void *)(a1 + 312)) >> 56;
        goto LABEL_760;
      case 4:
        if ((v463 & 1) == 0) {
          goto LABEL_538;
        }
        char v68 = 0;
        unsigned int v69 = 0;
        uint64_t v70 = 0;
        *(void *)(a1 + 312) |= 2uLL;
        while (2)
        {
          uint64_t v71 = *v44;
          uint64_t v72 = *(void *)(v3 + v71);
          unint64_t v73 = v72 + 1;
          if (v72 == -1 || v73 > *(void *)(v3 + *v30))
          {
            *(unsigned char *)(v3 + *v47) = 1;
          }
          else
          {
            char v74 = *(unsigned char *)(*(void *)(v3 + *v48) + v72);
            *(void *)(v3 + v71) = v73;
            v70 |= (unint64_t)(v74 & 0x7F) << v68;
            if (v74 < 0)
            {
              v68 += 7;
              BOOL v56 = v69++ >= 9;
              if (v56)
              {
                LODWORD(v70) = 0;
                goto LABEL_544;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v47)) {
          LODWORD(v70) = 0;
        }
LABEL_544:
        uint64_t v430 = 248;
        goto LABEL_689;
      case 5:
        if ((v463 & 1) == 0) {
          goto LABEL_538;
        }
        char v75 = 0;
        unsigned int v76 = 0;
        uint64_t v77 = 0;
        *(void *)(a1 + 312) |= 0x200uLL;
        while (2)
        {
          uint64_t v78 = *v44;
          uint64_t v79 = *(void *)(v3 + v78);
          unint64_t v80 = v79 + 1;
          if (v79 == -1 || v80 > *(void *)(v3 + *v30))
          {
            *(unsigned char *)(v3 + *v47) = 1;
          }
          else
          {
            char v81 = *(unsigned char *)(*(void *)(v3 + *v48) + v79);
            *(void *)(v3 + v78) = v80;
            v77 |= (unint64_t)(v81 & 0x7F) << v75;
            if (v81 < 0)
            {
              v75 += 7;
              BOOL v56 = v76++ >= 9;
              if (v56)
              {
                uint64_t v77 = 0;
                goto LABEL_548;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v47)) {
          uint64_t v77 = 0;
        }
LABEL_548:
        BOOL v431 = v77 != 0;
        uint64_t v432 = 274;
        goto LABEL_730;
      case 6:
        if (v61 && (*(void *)(a1 + 312) & 0x400000000000000) == 0)
        {
          BOOL v82 = PBReaderReadString();
          if (v82) {
            -[GEOClientCapabilities _addNoFlagsDisplayLanguages:](a1, v82);
          }

          goto LABEL_761;
        }
        char v428 = PBReaderSkipValueWithTag();
        uint64_t v30 = (int *)MEMORY[0x1E4F940E0];
        char v47 = (int *)MEMORY[0x1E4F940C8];
        unint64_t v48 = (int *)MEMORY[0x1E4F940B8];
        if ((v428 & 1) == 0) {
          goto LABEL_839;
        }
        goto LABEL_763;
      case 7:
        if (!v61) {
          goto LABEL_538;
        }
        if ((*(void *)(a1 + 312) & 0x800000000000000) == 0)
        {
          uint64_t v66 = PBReaderReadString();
          uint64_t v67 = 160;
          goto LABEL_512;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_839;
        }
        uint64_t v433 = (16 * *(void *)(a1 + 312)) >> 56;
        goto LABEL_760;
      case 8:
        if ((v463 & 1) == 0) {
          goto LABEL_538;
        }
        char v83 = 0;
        unsigned int v84 = 0;
        uint64_t v70 = 0;
        *(void *)(a1 + 312) |= 8uLL;
        while (2)
        {
          uint64_t v85 = *v44;
          uint64_t v86 = *(void *)(v3 + v85);
          unint64_t v87 = v86 + 1;
          if (v86 == -1 || v87 > *(void *)(v3 + *v30))
          {
            *(unsigned char *)(v3 + *v47) = 1;
          }
          else
          {
            char v88 = *(unsigned char *)(*(void *)(v3 + *v48) + v86);
            *(void *)(v3 + v85) = v87;
            v70 |= (unint64_t)(v88 & 0x7F) << v83;
            if (v88 < 0)
            {
              v83 += 7;
              BOOL v56 = v84++ >= 9;
              if (v56)
              {
                LODWORD(v70) = 0;
                goto LABEL_552;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v47)) {
          LODWORD(v70) = 0;
        }
LABEL_552:
        uint64_t v430 = 256;
        goto LABEL_689;
      case 9:
        if ((v463 & 1) == 0) {
          goto LABEL_538;
        }
        char v89 = 0;
        unsigned int v90 = 0;
        uint64_t v70 = 0;
        *(void *)(a1 + 312) |= 4uLL;
        while (2)
        {
          uint64_t v91 = *v44;
          uint64_t v92 = *(void *)(v3 + v91);
          unint64_t v93 = v92 + 1;
          if (v92 == -1 || v93 > *(void *)(v3 + *v30))
          {
            *(unsigned char *)(v3 + *v47) = 1;
          }
          else
          {
            char v94 = *(unsigned char *)(*(void *)(v3 + *v48) + v92);
            *(void *)(v3 + v91) = v93;
            v70 |= (unint64_t)(v94 & 0x7F) << v89;
            if (v94 < 0)
            {
              v89 += 7;
              BOOL v56 = v90++ >= 9;
              if (v56)
              {
                LODWORD(v70) = 0;
                goto LABEL_556;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v47)) {
          LODWORD(v70) = 0;
        }
LABEL_556:
        uint64_t v430 = 252;
        goto LABEL_689;
      case 10:
        if ((v463 & 1) == 0) {
          goto LABEL_538;
        }
        char v95 = 0;
        unsigned int v96 = 0;
        uint64_t v70 = 0;
        *(void *)(a1 + 312) |= 1uLL;
        while (2)
        {
          uint64_t v97 = *v44;
          uint64_t v98 = *(void *)(v3 + v97);
          unint64_t v99 = v98 + 1;
          if (v98 == -1 || v99 > *(void *)(v3 + *v30))
          {
            *(unsigned char *)(v3 + *v47) = 1;
          }
          else
          {
            char v100 = *(unsigned char *)(*(void *)(v3 + *v48) + v98);
            *(void *)(v3 + v97) = v99;
            v70 |= (unint64_t)(v100 & 0x7F) << v95;
            if (v100 < 0)
            {
              v95 += 7;
              BOOL v56 = v96++ >= 9;
              if (v56)
              {
                LODWORD(v70) = 0;
                goto LABEL_560;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v47)) {
          LODWORD(v70) = 0;
        }
LABEL_560:
        uint64_t v430 = 244;
        goto LABEL_689;
      case 11:
        if (!v61) {
          goto LABEL_538;
        }
        if ((*(void *)(a1 + 312) & 0x100000000000000) == 0)
        {
          uint64_t v66 = PBReaderReadString();
          uint64_t v67 = 136;
          goto LABEL_512;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_839;
        }
        uint64_t v433 = (uint64_t)(*(void *)(a1 + 312) << 7) >> 56;
        goto LABEL_760;
      case 12:
        if ((v463 & 1) == 0) {
          goto LABEL_538;
        }
        char v101 = 0;
        unsigned int v102 = 0;
        uint64_t v103 = 0;
        *(void *)(a1 + 312) |= 0x80uLL;
        while (2)
        {
          uint64_t v104 = *v44;
          uint64_t v105 = *(void *)(v3 + v104);
          unint64_t v106 = v105 + 1;
          if (v105 == -1 || v106 > *(void *)(v3 + *v30))
          {
            *(unsigned char *)(v3 + *v47) = 1;
          }
          else
          {
            char v107 = *(unsigned char *)(*(void *)(v3 + *v48) + v105);
            *(void *)(v3 + v104) = v106;
            v103 |= (unint64_t)(v107 & 0x7F) << v101;
            if (v107 < 0)
            {
              v101 += 7;
              BOOL v56 = v102++ >= 9;
              if (v56)
              {
                uint64_t v103 = 0;
                goto LABEL_564;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v47)) {
          uint64_t v103 = 0;
        }
LABEL_564:
        BOOL v431 = v103 != 0;
        uint64_t v432 = 272;
        goto LABEL_730;
      case 13:
        if ((v463 & 1) == 0) {
          goto LABEL_538;
        }
        char v108 = 0;
        unsigned int v109 = 0;
        uint64_t v110 = 0;
        *(void *)(a1 + 312) |= 0x4000uLL;
        while (2)
        {
          uint64_t v111 = *v44;
          uint64_t v112 = *(void *)(v3 + v111);
          unint64_t v113 = v112 + 1;
          if (v112 == -1 || v113 > *(void *)(v3 + *v30))
          {
            *(unsigned char *)(v3 + *v47) = 1;
          }
          else
          {
            char v114 = *(unsigned char *)(*(void *)(v3 + *v48) + v112);
            *(void *)(v3 + v111) = v113;
            v110 |= (unint64_t)(v114 & 0x7F) << v108;
            if (v114 < 0)
            {
              v108 += 7;
              BOOL v56 = v109++ >= 9;
              if (v56)
              {
                uint64_t v110 = 0;
                goto LABEL_568;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v47)) {
          uint64_t v110 = 0;
        }
LABEL_568:
        BOOL v431 = v110 != 0;
        uint64_t v432 = 279;
        goto LABEL_730;
      case 14:
        if ((v463 & 1) == 0) {
          goto LABEL_538;
        }
        char v115 = 0;
        unsigned int v116 = 0;
        uint64_t v70 = 0;
        *(void *)(a1 + 312) |= 0x40uLL;
        while (2)
        {
          uint64_t v117 = *v44;
          uint64_t v118 = *(void *)(v3 + v117);
          unint64_t v119 = v118 + 1;
          if (v118 == -1 || v119 > *(void *)(v3 + *v30))
          {
            *(unsigned char *)(v3 + *v47) = 1;
          }
          else
          {
            char v120 = *(unsigned char *)(*(void *)(v3 + *v48) + v118);
            *(void *)(v3 + v117) = v119;
            v70 |= (unint64_t)(v120 & 0x7F) << v115;
            if (v120 < 0)
            {
              v115 += 7;
              BOOL v56 = v116++ >= 9;
              if (v56)
              {
                LODWORD(v70) = 0;
                goto LABEL_572;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v47)) {
          LODWORD(v70) = 0;
        }
LABEL_572:
        uint64_t v430 = 268;
        goto LABEL_689;
      case 16:
        if (!v61) {
          goto LABEL_538;
        }
        if ((*(void *)(a1 + 312) & 0x1000000000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_839;
          }
          uint64_t v433 = (8 * *(void *)(a1 + 312)) >> 56;
          goto LABEL_760;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_839;
        }
        __int16 v124 = objc_alloc_init(GEOFormattedStringClientCapabilities);
        if (!GEOFormattedStringClientCapabilitiesReadAllFrom((uint64_t)v124, (void *)v3)) {
          goto LABEL_838;
        }
        PBReaderRecallMark();
        uint64_t v125 = 168;
        goto LABEL_526;
      case 17:
        if ((v463 & 1) == 0) {
          goto LABEL_538;
        }
        char v126 = 0;
        unsigned int v127 = 0;
        uint64_t v128 = 0;
        *(void *)(a1 + 312) |= 0x8000uLL;
        while (2)
        {
          uint64_t v129 = *v44;
          uint64_t v130 = *(void *)(v3 + v129);
          unint64_t v131 = v130 + 1;
          if (v130 == -1 || v131 > *(void *)(v3 + *v30))
          {
            *(unsigned char *)(v3 + *v47) = 1;
          }
          else
          {
            char v132 = *(unsigned char *)(*(void *)(v3 + *v48) + v130);
            *(void *)(v3 + v129) = v131;
            v128 |= (unint64_t)(v132 & 0x7F) << v126;
            if (v132 < 0)
            {
              v126 += 7;
              BOOL v56 = v127++ >= 9;
              if (v56)
              {
                uint64_t v128 = 0;
                goto LABEL_576;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v47)) {
          uint64_t v128 = 0;
        }
LABEL_576:
        BOOL v431 = v128 != 0;
        uint64_t v432 = 280;
        goto LABEL_730;
      case 18:
        if ((v463 & 1) == 0) {
          goto LABEL_538;
        }
        char v133 = 0;
        unsigned int v134 = 0;
        uint64_t v135 = 0;
        *(void *)(a1 + 312) |= 0x100uLL;
        while (2)
        {
          uint64_t v136 = *v44;
          uint64_t v137 = *(void *)(v3 + v136);
          unint64_t v138 = v137 + 1;
          if (v137 == -1 || v138 > *(void *)(v3 + *v30))
          {
            *(unsigned char *)(v3 + *v47) = 1;
          }
          else
          {
            char v139 = *(unsigned char *)(*(void *)(v3 + *v48) + v137);
            *(void *)(v3 + v136) = v138;
            v135 |= (unint64_t)(v139 & 0x7F) << v133;
            if (v139 < 0)
            {
              v133 += 7;
              BOOL v56 = v134++ >= 9;
              if (v56)
              {
                uint64_t v135 = 0;
                goto LABEL_580;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v47)) {
          uint64_t v135 = 0;
        }
LABEL_580:
        BOOL v431 = v135 != 0;
        uint64_t v432 = 273;
        goto LABEL_730;
      case 19:
        if (!v61) {
          goto LABEL_538;
        }
        if ((*(unsigned char *)(a1 + 320) & 4) == 0)
        {
          uint64_t v66 = PBReaderReadString();
          uint64_t v67 = 216;
          goto LABEL_512;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_839;
        }
        LOBYTE(v433) = 32 * *(unsigned char *)(a1 + 320);
        goto LABEL_759;
      case 20:
        if ((v463 & 1) == 0) {
          goto LABEL_538;
        }
        char v140 = 0;
        unsigned int v141 = 0;
        uint64_t v142 = 0;
        *(void *)(a1 + 312) |= 0x800000000uLL;
        while (2)
        {
          uint64_t v143 = *v44;
          uint64_t v144 = *(void *)(v3 + v143);
          unint64_t v145 = v144 + 1;
          if (v144 == -1 || v145 > *(void *)(v3 + *v30))
          {
            *(unsigned char *)(v3 + *v47) = 1;
          }
          else
          {
            char v146 = *(unsigned char *)(*(void *)(v3 + *v48) + v144);
            *(void *)(v3 + v143) = v145;
            v142 |= (unint64_t)(v146 & 0x7F) << v140;
            if (v146 < 0)
            {
              v140 += 7;
              BOOL v56 = v141++ >= 9;
              if (v56)
              {
                uint64_t v142 = 0;
                goto LABEL_584;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v47)) {
          uint64_t v142 = 0;
        }
LABEL_584:
        BOOL v431 = v142 != 0;
        uint64_t v432 = 300;
        goto LABEL_730;
      case 21:
        if ((v463 & 1) == 0) {
          goto LABEL_538;
        }
        char v147 = 0;
        unsigned int v148 = 0;
        uint64_t v149 = 0;
        *(void *)(a1 + 312) |= 0x100000000uLL;
        while (2)
        {
          uint64_t v150 = *v44;
          uint64_t v151 = *(void *)(v3 + v150);
          unint64_t v152 = v151 + 1;
          if (v151 == -1 || v152 > *(void *)(v3 + *v30))
          {
            *(unsigned char *)(v3 + *v47) = 1;
          }
          else
          {
            char v153 = *(unsigned char *)(*(void *)(v3 + *v48) + v151);
            *(void *)(v3 + v150) = v152;
            v149 |= (unint64_t)(v153 & 0x7F) << v147;
            if (v153 < 0)
            {
              v147 += 7;
              BOOL v56 = v148++ >= 9;
              if (v56)
              {
                uint64_t v149 = 0;
                goto LABEL_588;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v47)) {
          uint64_t v149 = 0;
        }
LABEL_588:
        BOOL v431 = v149 != 0;
        uint64_t v432 = 297;
        goto LABEL_730;
      case 22:
        if ((v463 & 1) == 0) {
          goto LABEL_538;
        }
        char v154 = 0;
        unsigned int v155 = 0;
        uint64_t v156 = 0;
        *(void *)(a1 + 312) |= 0x80000000uLL;
        while (2)
        {
          uint64_t v157 = *v44;
          uint64_t v158 = *(void *)(v3 + v157);
          unint64_t v159 = v158 + 1;
          if (v158 == -1 || v159 > *(void *)(v3 + *v30))
          {
            *(unsigned char *)(v3 + *v47) = 1;
          }
          else
          {
            char v160 = *(unsigned char *)(*(void *)(v3 + *v48) + v158);
            *(void *)(v3 + v157) = v159;
            v156 |= (unint64_t)(v160 & 0x7F) << v154;
            if (v160 < 0)
            {
              v154 += 7;
              BOOL v56 = v155++ >= 9;
              if (v56)
              {
                uint64_t v156 = 0;
                goto LABEL_592;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v47)) {
          uint64_t v156 = 0;
        }
LABEL_592:
        BOOL v431 = v156 != 0;
        uint64_t v432 = 296;
        goto LABEL_730;
      case 23:
        if ((v463 & 1) == 0) {
          goto LABEL_538;
        }
        char v161 = 0;
        unsigned int v162 = 0;
        uint64_t v163 = 0;
        *(void *)(a1 + 312) |= 0x400uLL;
        while (2)
        {
          uint64_t v164 = *v44;
          uint64_t v165 = *(void *)(v3 + v164);
          unint64_t v166 = v165 + 1;
          if (v165 == -1 || v166 > *(void *)(v3 + *v30))
          {
            *(unsigned char *)(v3 + *v47) = 1;
          }
          else
          {
            char v167 = *(unsigned char *)(*(void *)(v3 + *v48) + v165);
            *(void *)(v3 + v164) = v166;
            v163 |= (unint64_t)(v167 & 0x7F) << v161;
            if (v167 < 0)
            {
              v161 += 7;
              BOOL v56 = v162++ >= 9;
              if (v56)
              {
                uint64_t v163 = 0;
                goto LABEL_596;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v47)) {
          uint64_t v163 = 0;
        }
LABEL_596:
        BOOL v431 = v163 != 0;
        uint64_t v432 = 275;
        goto LABEL_730;
      case 24:
        if (!v61) {
          goto LABEL_538;
        }
        if ((*(void *)(a1 + 312) & 0x8000000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_839;
          }
          uint64_t v433 = (uint64_t)(*(void *)(a1 + 312) << 12) >> 56;
          goto LABEL_760;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_839;
        }
        __int16 v124 = objc_alloc_init(GEOAbAssignInfo);
        if (!GEOAbAssignInfoReadAllFrom((uint64_t)v124, (void *)v3)) {
          goto LABEL_838;
        }
        PBReaderRecallMark();
        uint64_t v125 = 96;
        goto LABEL_526;
      case 25:
        if (!v61) {
          goto LABEL_538;
        }
        if ((*(unsigned char *)(a1 + 320) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_839;
          }
          LOBYTE(v433) = *(unsigned char *)(a1 + 320) << 6;
          goto LABEL_759;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_839;
        }
        __int16 v124 = objc_alloc_init(GEOLocalTime);
        if (!GEOLocalTimeReadAllFrom((uint64_t)v124, (void *)v3)) {
          goto LABEL_838;
        }
        PBReaderRecallMark();
        uint64_t v125 = 208;
        goto LABEL_526;
      case 26:
        if ((v463 & 1) == 0) {
          goto LABEL_538;
        }
        char v168 = 0;
        unsigned int v169 = 0;
        uint64_t v70 = 0;
        *(void *)(a1 + 312) |= 0x20uLL;
        while (2)
        {
          uint64_t v170 = *v44;
          uint64_t v171 = *(void *)(v3 + v170);
          unint64_t v172 = v171 + 1;
          if (v171 == -1 || v172 > *(void *)(v3 + *v30))
          {
            *(unsigned char *)(v3 + *v47) = 1;
          }
          else
          {
            char v173 = *(unsigned char *)(*(void *)(v3 + *v48) + v171);
            *(void *)(v3 + v170) = v172;
            v70 |= (unint64_t)(v173 & 0x7F) << v168;
            if (v173 < 0)
            {
              v168 += 7;
              BOOL v56 = v169++ >= 9;
              if (v56)
              {
                LODWORD(v70) = 0;
                goto LABEL_600;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v47)) {
          LODWORD(v70) = 0;
        }
LABEL_600:
        uint64_t v430 = 264;
        goto LABEL_689;
      case 27:
        if (!v61 || (*(void *)(a1 + 312) & 0x2000000000000) != 0) {
          goto LABEL_538;
        }
        if (v58 != 2)
        {
          char v434 = 0;
          unsigned int v435 = 0;
          uint64_t v436 = 0;
          while (1)
          {
            uint64_t v437 = *v44;
            uint64_t v438 = *(void *)(v3 + v437);
            unint64_t v439 = v438 + 1;
            if (v438 == -1 || v439 > *(void *)(v3 + *v30)) {
              goto LABEL_791;
            }
            char v440 = *(unsigned char *)(*(void *)(v3 + *v48) + v438);
            *(void *)(v3 + v437) = v439;
            v436 |= (unint64_t)(v440 & 0x7F) << v434;
            if (v440 < 0)
            {
              v434 += 7;
              BOOL v56 = v435++ >= 9;
              if (!v56) {
                continue;
              }
            }
            goto LABEL_792;
          }
        }
        if (!PBReaderPlaceMark()) {
          goto LABEL_839;
        }
        while (1)
        {
          char v174 = (int *)MEMORY[0x1E4F940E0];
          unsigned int v175 = (int *)MEMORY[0x1E4F940C8];
          if (*(void *)(v3 + *v44) >= *(void *)(v3 + (int)*MEMORY[0x1E4F940E0])
            || *(unsigned char *)(v3 + (int)*MEMORY[0x1E4F940C8]))
          {
            goto LABEL_540;
          }
          char v176 = 0;
          unsigned int v177 = 0;
          uint64_t v178 = 0;
          unint64_t v179 = (int *)MEMORY[0x1E4F940B8];
          while (1)
          {
            uint64_t v180 = *v44;
            uint64_t v181 = *(void *)(v3 + v180);
            unint64_t v182 = v181 + 1;
            if (v181 == -1 || v182 > *(void *)(v3 + *v174)) {
              break;
            }
            char v183 = *(unsigned char *)(*(void *)(v3 + *v179) + v181);
            *(void *)(v3 + v180) = v182;
            v178 |= (unint64_t)(v183 & 0x7F) << v176;
            if (v183 < 0)
            {
              v176 += 7;
              BOOL v56 = v177++ >= 9;
              if (!v56) {
                continue;
              }
            }
            goto LABEL_217;
          }
          *(unsigned char *)(v3 + *v175) = 1;
LABEL_217:
          PBRepeatedInt32Add();
        }
      case 28:
        if ((v463 & 1) == 0) {
          goto LABEL_538;
        }
        char v184 = 0;
        unsigned int v185 = 0;
        uint64_t v186 = 0;
        *(void *)(a1 + 312) |= 0x80000uLL;
        while (2)
        {
          uint64_t v187 = *v44;
          uint64_t v188 = *(void *)(v3 + v187);
          unint64_t v189 = v188 + 1;
          if (v188 == -1 || v189 > *(void *)(v3 + *v30))
          {
            *(unsigned char *)(v3 + *v47) = 1;
          }
          else
          {
            char v190 = *(unsigned char *)(*(void *)(v3 + *v48) + v188);
            *(void *)(v3 + v187) = v189;
            v186 |= (unint64_t)(v190 & 0x7F) << v184;
            if (v190 < 0)
            {
              v184 += 7;
              BOOL v56 = v185++ >= 9;
              if (v56)
              {
                uint64_t v186 = 0;
                goto LABEL_604;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v47)) {
          uint64_t v186 = 0;
        }
LABEL_604:
        BOOL v431 = v186 != 0;
        uint64_t v432 = 284;
        goto LABEL_730;
      case 29:
        if ((v463 & 1) == 0) {
          goto LABEL_538;
        }
        char v191 = 0;
        unsigned int v192 = 0;
        uint64_t v193 = 0;
        *(void *)(a1 + 312) |= 0x1000000000uLL;
        while (2)
        {
          uint64_t v194 = *v44;
          uint64_t v195 = *(void *)(v3 + v194);
          unint64_t v196 = v195 + 1;
          if (v195 == -1 || v196 > *(void *)(v3 + *v30))
          {
            *(unsigned char *)(v3 + *v47) = 1;
          }
          else
          {
            char v197 = *(unsigned char *)(*(void *)(v3 + *v48) + v195);
            *(void *)(v3 + v194) = v196;
            v193 |= (unint64_t)(v197 & 0x7F) << v191;
            if (v197 < 0)
            {
              v191 += 7;
              BOOL v56 = v192++ >= 9;
              if (v56)
              {
                uint64_t v193 = 0;
                goto LABEL_608;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v47)) {
          uint64_t v193 = 0;
        }
LABEL_608:
        BOOL v431 = v193 != 0;
        uint64_t v432 = 301;
        goto LABEL_730;
      case 30:
        if ((v463 & 1) == 0) {
          goto LABEL_538;
        }
        char v198 = 0;
        unsigned int v199 = 0;
        uint64_t v200 = 0;
        *(void *)(a1 + 312) |= 0x200000000uLL;
        while (2)
        {
          uint64_t v201 = *v44;
          uint64_t v202 = *(void *)(v3 + v201);
          unint64_t v203 = v202 + 1;
          if (v202 == -1 || v203 > *(void *)(v3 + *v30))
          {
            *(unsigned char *)(v3 + *v47) = 1;
          }
          else
          {
            char v204 = *(unsigned char *)(*(void *)(v3 + *v48) + v202);
            *(void *)(v3 + v201) = v203;
            v200 |= (unint64_t)(v204 & 0x7F) << v198;
            if (v204 < 0)
            {
              v198 += 7;
              BOOL v56 = v199++ >= 9;
              if (v56)
              {
                uint64_t v200 = 0;
                goto LABEL_612;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v47)) {
          uint64_t v200 = 0;
        }
LABEL_612:
        BOOL v431 = v200 != 0;
        uint64_t v432 = 298;
        goto LABEL_730;
      case 31:
        if (!v61) {
          goto LABEL_538;
        }
        if ((*(void *)(a1 + 312) & 0x8000000000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_839;
          }
          uint64_t v433 = *(char *)(a1 + 319);
          goto LABEL_760;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_839;
        }
        __int16 v124 = objc_alloc_init(GEOLocalizationCapabilities);
        if (!GEOLocalizationCapabilitiesReadAllFrom((uint64_t)v124, (void *)v3)) {
          goto LABEL_838;
        }
        PBReaderRecallMark();
        uint64_t v125 = 192;
        goto LABEL_526;
      case 32:
        if (!v61) {
          goto LABEL_538;
        }
        if ((*(void *)(a1 + 312) & 0x200000000000000) == 0)
        {
          uint64_t v66 = PBReaderReadString();
          uint64_t v67 = 144;
          goto LABEL_512;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_839;
        }
        uint64_t v433 = (uint64_t)(*(void *)(a1 + 312) << 6) >> 56;
        goto LABEL_760;
      case 33:
        if ((v463 & 1) == 0) {
          goto LABEL_538;
        }
        char v205 = 0;
        unsigned int v206 = 0;
        uint64_t v207 = 0;
        *(void *)(a1 + 312) |= 0x400000uLL;
        while (2)
        {
          uint64_t v208 = *v44;
          uint64_t v209 = *(void *)(v3 + v208);
          unint64_t v210 = v209 + 1;
          if (v209 == -1 || v210 > *(void *)(v3 + *v30))
          {
            *(unsigned char *)(v3 + *v47) = 1;
          }
          else
          {
            char v211 = *(unsigned char *)(*(void *)(v3 + *v48) + v209);
            *(void *)(v3 + v208) = v210;
            v207 |= (unint64_t)(v211 & 0x7F) << v205;
            if (v211 < 0)
            {
              v205 += 7;
              BOOL v56 = v206++ >= 9;
              if (v56)
              {
                uint64_t v207 = 0;
                goto LABEL_616;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v47)) {
          uint64_t v207 = 0;
        }
LABEL_616:
        BOOL v431 = v207 != 0;
        uint64_t v432 = 287;
        goto LABEL_730;
      case 34:
        if ((v463 & 1) == 0) {
          goto LABEL_538;
        }
        char v212 = 0;
        unsigned int v213 = 0;
        uint64_t v214 = 0;
        *(void *)(a1 + 312) |= 0x400000000uLL;
        while (2)
        {
          uint64_t v215 = *v44;
          uint64_t v216 = *(void *)(v3 + v215);
          unint64_t v217 = v216 + 1;
          if (v216 == -1 || v217 > *(void *)(v3 + *v30))
          {
            *(unsigned char *)(v3 + *v47) = 1;
          }
          else
          {
            char v218 = *(unsigned char *)(*(void *)(v3 + *v48) + v216);
            *(void *)(v3 + v215) = v217;
            v214 |= (unint64_t)(v218 & 0x7F) << v212;
            if (v218 < 0)
            {
              v212 += 7;
              BOOL v56 = v213++ >= 9;
              if (v56)
              {
                uint64_t v214 = 0;
                goto LABEL_620;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v47)) {
          uint64_t v214 = 0;
        }
LABEL_620:
        BOOL v431 = v214 != 0;
        uint64_t v432 = 299;
        goto LABEL_730;
      case 35:
        if ((v463 & 1) == 0) {
          goto LABEL_538;
        }
        char v219 = 0;
        unsigned int v220 = 0;
        uint64_t v221 = 0;
        *(void *)(a1 + 312) |= 0x4000000uLL;
        while (2)
        {
          uint64_t v222 = *v44;
          uint64_t v223 = *(void *)(v3 + v222);
          unint64_t v224 = v223 + 1;
          if (v223 == -1 || v224 > *(void *)(v3 + *v30))
          {
            *(unsigned char *)(v3 + *v47) = 1;
          }
          else
          {
            char v225 = *(unsigned char *)(*(void *)(v3 + *v48) + v223);
            *(void *)(v3 + v222) = v224;
            v221 |= (unint64_t)(v225 & 0x7F) << v219;
            if (v225 < 0)
            {
              v219 += 7;
              BOOL v56 = v220++ >= 9;
              if (v56)
              {
                uint64_t v221 = 0;
                goto LABEL_624;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v47)) {
          uint64_t v221 = 0;
        }
LABEL_624:
        BOOL v431 = v221 != 0;
        uint64_t v432 = 291;
        goto LABEL_730;
      case 36:
        if ((v463 & 1) == 0) {
          goto LABEL_538;
        }
        char v226 = 0;
        unsigned int v227 = 0;
        uint64_t v228 = 0;
        *(void *)(a1 + 312) |= 0x40000000000uLL;
        while (2)
        {
          uint64_t v229 = *v44;
          uint64_t v230 = *(void *)(v3 + v229);
          unint64_t v231 = v230 + 1;
          if (v230 == -1 || v231 > *(void *)(v3 + *v30))
          {
            *(unsigned char *)(v3 + *v47) = 1;
          }
          else
          {
            char v232 = *(unsigned char *)(*(void *)(v3 + *v48) + v230);
            *(void *)(v3 + v229) = v231;
            v228 |= (unint64_t)(v232 & 0x7F) << v226;
            if (v232 < 0)
            {
              v226 += 7;
              BOOL v56 = v227++ >= 9;
              if (v56)
              {
                uint64_t v228 = 0;
                goto LABEL_628;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v47)) {
          uint64_t v228 = 0;
        }
LABEL_628:
        BOOL v431 = v228 != 0;
        uint64_t v432 = 307;
        goto LABEL_730;
      case 37:
        if ((v463 & 1) == 0) {
          goto LABEL_538;
        }
        char v233 = 0;
        unsigned int v234 = 0;
        uint64_t v235 = 0;
        *(void *)(a1 + 312) |= 0x200000000000uLL;
        while (2)
        {
          uint64_t v236 = *v44;
          uint64_t v237 = *(void *)(v3 + v236);
          unint64_t v238 = v237 + 1;
          if (v237 == -1 || v238 > *(void *)(v3 + *v30))
          {
            *(unsigned char *)(v3 + *v47) = 1;
          }
          else
          {
            char v239 = *(unsigned char *)(*(void *)(v3 + *v48) + v237);
            *(void *)(v3 + v236) = v238;
            v235 |= (unint64_t)(v239 & 0x7F) << v233;
            if (v239 < 0)
            {
              v233 += 7;
              BOOL v56 = v234++ >= 9;
              if (v56)
              {
                uint64_t v235 = 0;
                goto LABEL_632;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v47)) {
          uint64_t v235 = 0;
        }
LABEL_632:
        BOOL v431 = v235 != 0;
        uint64_t v432 = 310;
        goto LABEL_730;
      case 38:
        if (!v61) {
          goto LABEL_538;
        }
        if ((*(unsigned char *)(a1 + 320) & 1) == 0)
        {
          uint64_t v66 = PBReaderReadString();
          uint64_t v67 = 200;
          goto LABEL_512;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_839;
        }
        LOBYTE(v433) = *(unsigned char *)(a1 + 320) << 7;
        goto LABEL_759;
      case 39:
        if ((v463 & 1) == 0) {
          goto LABEL_538;
        }
        char v240 = 0;
        unsigned int v241 = 0;
        uint64_t v242 = 0;
        *(void *)(a1 + 312) |= 0x400000000000uLL;
        while (2)
        {
          uint64_t v243 = *v44;
          uint64_t v244 = *(void *)(v3 + v243);
          unint64_t v245 = v244 + 1;
          if (v244 == -1 || v245 > *(void *)(v3 + *v30))
          {
            *(unsigned char *)(v3 + *v47) = 1;
          }
          else
          {
            char v246 = *(unsigned char *)(*(void *)(v3 + *v48) + v244);
            *(void *)(v3 + v243) = v245;
            v242 |= (unint64_t)(v246 & 0x7F) << v240;
            if (v246 < 0)
            {
              v240 += 7;
              BOOL v56 = v241++ >= 9;
              if (v56)
              {
                uint64_t v242 = 0;
                goto LABEL_636;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v47)) {
          uint64_t v242 = 0;
        }
LABEL_636:
        BOOL v431 = v242 != 0;
        uint64_t v432 = 311;
        goto LABEL_730;
      case 40:
        if ((v463 & 1) == 0) {
          goto LABEL_538;
        }
        char v247 = 0;
        unsigned int v248 = 0;
        uint64_t v249 = 0;
        *(void *)(a1 + 312) |= 0x2000000000uLL;
        while (2)
        {
          uint64_t v250 = *v44;
          uint64_t v251 = *(void *)(v3 + v250);
          unint64_t v252 = v251 + 1;
          if (v251 == -1 || v252 > *(void *)(v3 + *v30))
          {
            *(unsigned char *)(v3 + *v47) = 1;
          }
          else
          {
            char v253 = *(unsigned char *)(*(void *)(v3 + *v48) + v251);
            *(void *)(v3 + v250) = v252;
            v249 |= (unint64_t)(v253 & 0x7F) << v247;
            if (v253 < 0)
            {
              v247 += 7;
              BOOL v56 = v248++ >= 9;
              if (v56)
              {
                uint64_t v249 = 0;
                goto LABEL_640;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v47)) {
          uint64_t v249 = 0;
        }
LABEL_640:
        BOOL v431 = v249 != 0;
        uint64_t v432 = 302;
        goto LABEL_730;
      case 41:
        if (!v61) {
          goto LABEL_538;
        }
        if ((*(void *)(a1 + 312) & 0x10000000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_839;
          }
          uint64_t v433 = (uint64_t)(*(void *)(a1 + 312) << 11) >> 56;
          goto LABEL_760;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_839;
        }
        __int16 v124 = objc_alloc_init(GEOAdvisoryClientCapabilities);
        if (!GEOAdvisoryClientCapabilitiesReadAllFrom((uint64_t)v124, (void *)v3)) {
          goto LABEL_838;
        }
        PBReaderRecallMark();
        uint64_t v125 = 104;
        goto LABEL_526;
      case 42:
        if ((v463 & 1) == 0) {
          goto LABEL_538;
        }
        char v254 = 0;
        unsigned int v255 = 0;
        uint64_t v256 = 0;
        *(void *)(a1 + 312) |= 0x20000000000uLL;
        while (2)
        {
          uint64_t v257 = *v44;
          uint64_t v258 = *(void *)(v3 + v257);
          unint64_t v259 = v258 + 1;
          if (v258 == -1 || v259 > *(void *)(v3 + *v30))
          {
            *(unsigned char *)(v3 + *v47) = 1;
          }
          else
          {
            char v260 = *(unsigned char *)(*(void *)(v3 + *v48) + v258);
            *(void *)(v3 + v257) = v259;
            v256 |= (unint64_t)(v260 & 0x7F) << v254;
            if (v260 < 0)
            {
              v254 += 7;
              BOOL v56 = v255++ >= 9;
              if (v56)
              {
                uint64_t v256 = 0;
                goto LABEL_644;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v47)) {
          uint64_t v256 = 0;
        }
LABEL_644:
        BOOL v431 = v256 != 0;
        uint64_t v432 = 306;
        goto LABEL_730;
      case 43:
        if ((v463 & 1) == 0) {
          goto LABEL_538;
        }
        char v261 = 0;
        unsigned int v262 = 0;
        uint64_t v263 = 0;
        *(void *)(a1 + 312) |= 0x80000000000uLL;
        while (2)
        {
          uint64_t v264 = *v44;
          uint64_t v265 = *(void *)(v3 + v264);
          unint64_t v266 = v265 + 1;
          if (v265 == -1 || v266 > *(void *)(v3 + *v30))
          {
            *(unsigned char *)(v3 + *v47) = 1;
          }
          else
          {
            char v267 = *(unsigned char *)(*(void *)(v3 + *v48) + v265);
            *(void *)(v3 + v264) = v266;
            v263 |= (unint64_t)(v267 & 0x7F) << v261;
            if (v267 < 0)
            {
              v261 += 7;
              BOOL v56 = v262++ >= 9;
              if (v56)
              {
                uint64_t v263 = 0;
                goto LABEL_648;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v47)) {
          uint64_t v263 = 0;
        }
LABEL_648:
        BOOL v431 = v263 != 0;
        uint64_t v432 = 308;
        goto LABEL_730;
      case 44:
        if ((v463 & 1) == 0) {
          goto LABEL_538;
        }
        char v268 = 0;
        unsigned int v269 = 0;
        uint64_t v270 = 0;
        *(void *)(a1 + 312) |= 0x40000uLL;
        while (2)
        {
          uint64_t v271 = *v44;
          uint64_t v272 = *(void *)(v3 + v271);
          unint64_t v273 = v272 + 1;
          if (v272 == -1 || v273 > *(void *)(v3 + *v30))
          {
            *(unsigned char *)(v3 + *v47) = 1;
          }
          else
          {
            char v274 = *(unsigned char *)(*(void *)(v3 + *v48) + v272);
            *(void *)(v3 + v271) = v273;
            v270 |= (unint64_t)(v274 & 0x7F) << v268;
            if (v274 < 0)
            {
              v268 += 7;
              BOOL v56 = v269++ >= 9;
              if (v56)
              {
                uint64_t v270 = 0;
                goto LABEL_652;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v47)) {
          uint64_t v270 = 0;
        }
LABEL_652:
        BOOL v431 = v270 != 0;
        uint64_t v432 = 283;
        goto LABEL_730;
      case 45:
        if ((v463 & 1) == 0) {
          goto LABEL_538;
        }
        char v275 = 0;
        unsigned int v276 = 0;
        uint64_t v277 = 0;
        *(void *)(a1 + 312) |= 0x20000uLL;
        while (2)
        {
          uint64_t v278 = *v44;
          uint64_t v279 = *(void *)(v3 + v278);
          unint64_t v280 = v279 + 1;
          if (v279 == -1 || v280 > *(void *)(v3 + *v30))
          {
            *(unsigned char *)(v3 + *v47) = 1;
          }
          else
          {
            char v281 = *(unsigned char *)(*(void *)(v3 + *v48) + v279);
            *(void *)(v3 + v278) = v280;
            v277 |= (unint64_t)(v281 & 0x7F) << v275;
            if (v281 < 0)
            {
              v275 += 7;
              BOOL v56 = v276++ >= 9;
              if (v56)
              {
                uint64_t v277 = 0;
                goto LABEL_656;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v47)) {
          uint64_t v277 = 0;
        }
LABEL_656:
        BOOL v431 = v277 != 0;
        uint64_t v432 = 282;
        goto LABEL_730;
      case 46:
        if ((v463 & 1) == 0) {
          goto LABEL_538;
        }
        char v282 = 0;
        unsigned int v283 = 0;
        uint64_t v284 = 0;
        *(void *)(a1 + 312) |= 0x10000000000uLL;
        while (2)
        {
          uint64_t v285 = *v44;
          uint64_t v286 = *(void *)(v3 + v285);
          unint64_t v287 = v286 + 1;
          if (v286 == -1 || v287 > *(void *)(v3 + *v30))
          {
            *(unsigned char *)(v3 + *v47) = 1;
          }
          else
          {
            char v288 = *(unsigned char *)(*(void *)(v3 + *v48) + v286);
            *(void *)(v3 + v285) = v287;
            v284 |= (unint64_t)(v288 & 0x7F) << v282;
            if (v288 < 0)
            {
              v282 += 7;
              BOOL v56 = v283++ >= 9;
              if (v56)
              {
                uint64_t v284 = 0;
                goto LABEL_660;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v47)) {
          uint64_t v284 = 0;
        }
LABEL_660:
        BOOL v431 = v284 != 0;
        uint64_t v432 = 305;
        goto LABEL_730;
      case 47:
        if ((v463 & 1) == 0) {
          goto LABEL_538;
        }
        char v289 = 0;
        unsigned int v290 = 0;
        uint64_t v291 = 0;
        *(void *)(a1 + 312) |= 0x2000uLL;
        while (2)
        {
          uint64_t v292 = *v44;
          uint64_t v293 = *(void *)(v3 + v292);
          unint64_t v294 = v293 + 1;
          if (v293 == -1 || v294 > *(void *)(v3 + *v30))
          {
            *(unsigned char *)(v3 + *v47) = 1;
          }
          else
          {
            char v295 = *(unsigned char *)(*(void *)(v3 + *v48) + v293);
            *(void *)(v3 + v292) = v294;
            v291 |= (unint64_t)(v295 & 0x7F) << v289;
            if (v295 < 0)
            {
              v289 += 7;
              BOOL v56 = v290++ >= 9;
              if (v56)
              {
                uint64_t v291 = 0;
                goto LABEL_664;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v47)) {
          uint64_t v291 = 0;
        }
LABEL_664:
        BOOL v431 = v291 != 0;
        uint64_t v432 = 278;
        goto LABEL_730;
      case 48:
        if ((v463 & 1) == 0) {
          goto LABEL_538;
        }
        char v296 = 0;
        unsigned int v297 = 0;
        uint64_t v298 = 0;
        *(void *)(a1 + 312) |= 0x40000000uLL;
        while (2)
        {
          uint64_t v299 = *v44;
          uint64_t v300 = *(void *)(v3 + v299);
          unint64_t v301 = v300 + 1;
          if (v300 == -1 || v301 > *(void *)(v3 + *v30))
          {
            *(unsigned char *)(v3 + *v47) = 1;
          }
          else
          {
            char v302 = *(unsigned char *)(*(void *)(v3 + *v48) + v300);
            *(void *)(v3 + v299) = v301;
            v298 |= (unint64_t)(v302 & 0x7F) << v296;
            if (v302 < 0)
            {
              v296 += 7;
              BOOL v56 = v297++ >= 9;
              if (v56)
              {
                uint64_t v298 = 0;
                goto LABEL_668;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v47)) {
          uint64_t v298 = 0;
        }
LABEL_668:
        BOOL v431 = v298 != 0;
        uint64_t v432 = 295;
        goto LABEL_730;
      case 49:
        if ((v463 & 1) == 0) {
          goto LABEL_538;
        }
        char v303 = 0;
        unsigned int v304 = 0;
        uint64_t v305 = 0;
        *(void *)(a1 + 312) |= 0x20000000uLL;
        while (2)
        {
          uint64_t v306 = *v44;
          uint64_t v307 = *(void *)(v3 + v306);
          unint64_t v308 = v307 + 1;
          if (v307 == -1 || v308 > *(void *)(v3 + *v30))
          {
            *(unsigned char *)(v3 + *v47) = 1;
          }
          else
          {
            char v309 = *(unsigned char *)(*(void *)(v3 + *v48) + v307);
            *(void *)(v3 + v306) = v308;
            v305 |= (unint64_t)(v309 & 0x7F) << v303;
            if (v309 < 0)
            {
              v303 += 7;
              BOOL v56 = v304++ >= 9;
              if (v56)
              {
                uint64_t v305 = 0;
                goto LABEL_672;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v47)) {
          uint64_t v305 = 0;
        }
LABEL_672:
        BOOL v431 = v305 != 0;
        uint64_t v432 = 294;
        goto LABEL_730;
      case 50:
        if ((v463 & 1) == 0) {
          goto LABEL_538;
        }
        char v310 = 0;
        unsigned int v311 = 0;
        uint64_t v312 = 0;
        *(void *)(a1 + 312) |= 0x800uLL;
        while (2)
        {
          uint64_t v313 = *v44;
          uint64_t v314 = *(void *)(v3 + v313);
          unint64_t v315 = v314 + 1;
          if (v314 == -1 || v315 > *(void *)(v3 + *v30))
          {
            *(unsigned char *)(v3 + *v47) = 1;
          }
          else
          {
            char v316 = *(unsigned char *)(*(void *)(v3 + *v48) + v314);
            *(void *)(v3 + v313) = v315;
            v312 |= (unint64_t)(v316 & 0x7F) << v310;
            if (v316 < 0)
            {
              v310 += 7;
              BOOL v56 = v311++ >= 9;
              if (v56)
              {
                uint64_t v312 = 0;
                goto LABEL_676;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v47)) {
          uint64_t v312 = 0;
        }
LABEL_676:
        BOOL v431 = v312 != 0;
        uint64_t v432 = 276;
        goto LABEL_730;
      case 51:
        if ((v463 & 1) == 0) {
          goto LABEL_538;
        }
        char v317 = 0;
        unsigned int v318 = 0;
        uint64_t v319 = 0;
        *(void *)(a1 + 312) |= 0x1000uLL;
        while (2)
        {
          uint64_t v320 = *v44;
          uint64_t v321 = *(void *)(v3 + v320);
          unint64_t v322 = v321 + 1;
          if (v321 == -1 || v322 > *(void *)(v3 + *v30))
          {
            *(unsigned char *)(v3 + *v47) = 1;
          }
          else
          {
            char v323 = *(unsigned char *)(*(void *)(v3 + *v48) + v321);
            *(void *)(v3 + v320) = v322;
            v319 |= (unint64_t)(v323 & 0x7F) << v317;
            if (v323 < 0)
            {
              v317 += 7;
              BOOL v56 = v318++ >= 9;
              if (v56)
              {
                uint64_t v319 = 0;
                goto LABEL_680;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v47)) {
          uint64_t v319 = 0;
        }
LABEL_680:
        BOOL v431 = v319 != 0;
        uint64_t v432 = 277;
        goto LABEL_730;
      case 52:
        if (!v61 || (*(void *)(a1 + 312) & 0x4000000000000) != 0) {
          goto LABEL_538;
        }
        if (v58 != 2)
        {
          char v441 = 0;
          unsigned int v442 = 0;
          uint64_t v443 = 0;
          while (1)
          {
            uint64_t v444 = *v44;
            uint64_t v445 = *(void *)(v3 + v444);
            unint64_t v446 = v445 + 1;
            if (v445 == -1 || v446 > *(void *)(v3 + *v30)) {
              goto LABEL_791;
            }
            char v447 = *(unsigned char *)(*(void *)(v3 + *v48) + v445);
            *(void *)(v3 + v444) = v446;
            v443 |= (unint64_t)(v447 & 0x7F) << v441;
            if (v447 < 0)
            {
              v441 += 7;
              BOOL v56 = v442++ >= 9;
              if (!v56) {
                continue;
              }
            }
            goto LABEL_792;
          }
        }
        if (!PBReaderPlaceMark()) {
          goto LABEL_839;
        }
        while (1)
        {
          char v324 = (int *)MEMORY[0x1E4F940E0];
          char v325 = (int *)MEMORY[0x1E4F940C8];
          if (*(void *)(v3 + *v44) >= *(void *)(v3 + (int)*MEMORY[0x1E4F940E0])
            || *(unsigned char *)(v3 + (int)*MEMORY[0x1E4F940C8]))
          {
            goto LABEL_540;
          }
          char v326 = 0;
          unsigned int v327 = 0;
          uint64_t v328 = 0;
          char v329 = (int *)MEMORY[0x1E4F940B8];
          while (1)
          {
            uint64_t v330 = *v44;
            uint64_t v331 = *(void *)(v3 + v330);
            unint64_t v332 = v331 + 1;
            if (v331 == -1 || v332 > *(void *)(v3 + *v324)) {
              break;
            }
            char v333 = *(unsigned char *)(*(void *)(v3 + *v329) + v331);
            *(void *)(v3 + v330) = v332;
            v328 |= (unint64_t)(v333 & 0x7F) << v326;
            if (v333 < 0)
            {
              v326 += 7;
              BOOL v56 = v327++ >= 9;
              if (!v56) {
                continue;
              }
            }
            goto LABEL_408;
          }
          *(unsigned char *)(v3 + *v325) = 1;
LABEL_408:
          PBRepeatedInt32Add();
        }
      case 53:
        if ((v463 & 1) == 0) {
          goto LABEL_538;
        }
        char v334 = 0;
        unsigned int v335 = 0;
        uint64_t v336 = 0;
        *(void *)(a1 + 312) |= 0x800000uLL;
        while (2)
        {
          uint64_t v337 = *v44;
          uint64_t v338 = *(void *)(v3 + v337);
          unint64_t v339 = v338 + 1;
          if (v338 == -1 || v339 > *(void *)(v3 + *v30))
          {
            *(unsigned char *)(v3 + *v47) = 1;
          }
          else
          {
            char v340 = *(unsigned char *)(*(void *)(v3 + *v48) + v338);
            *(void *)(v3 + v337) = v339;
            v336 |= (unint64_t)(v340 & 0x7F) << v334;
            if (v340 < 0)
            {
              v334 += 7;
              BOOL v56 = v335++ >= 9;
              if (v56)
              {
                uint64_t v336 = 0;
                goto LABEL_684;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v47)) {
          uint64_t v336 = 0;
        }
LABEL_684:
        BOOL v431 = v336 != 0;
        uint64_t v432 = 288;
        goto LABEL_730;
      case 54:
        if (!v61) {
          goto LABEL_538;
        }
        if ((*(unsigned char *)(a1 + 320) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_839;
          }
          LOBYTE(v433) = 16 * *(unsigned char *)(a1 + 320);
LABEL_759:
          uint64_t v433 = (char)v433;
          goto LABEL_760;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_839;
        }
        __int16 v124 = objc_alloc_init(GEOWalkingSupportedFeatures);
        if (!GEOWalkingSupportedFeaturesReadAllFrom((uint64_t)v124, (void *)v3)) {
          goto LABEL_838;
        }
        PBReaderRecallMark();
        uint64_t v125 = 224;
        goto LABEL_526;
      case 55:
        if ((v463 & 1) == 0) {
          goto LABEL_538;
        }
        char v341 = 0;
        unsigned int v342 = 0;
        uint64_t v70 = 0;
        *(void *)(a1 + 312) |= 0x10uLL;
        while (2)
        {
          uint64_t v343 = *v44;
          uint64_t v344 = *(void *)(v3 + v343);
          unint64_t v345 = v344 + 1;
          if (v344 == -1 || v345 > *(void *)(v3 + *v30))
          {
            *(unsigned char *)(v3 + *v47) = 1;
          }
          else
          {
            char v346 = *(unsigned char *)(*(void *)(v3 + *v48) + v344);
            *(void *)(v3 + v343) = v345;
            v70 |= (unint64_t)(v346 & 0x7F) << v341;
            if (v346 < 0)
            {
              v341 += 7;
              BOOL v56 = v342++ >= 9;
              if (v56)
              {
                LODWORD(v70) = 0;
                goto LABEL_688;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v47)) {
          LODWORD(v70) = 0;
        }
LABEL_688:
        uint64_t v430 = 260;
LABEL_689:
        *(_DWORD *)(a1 + v430) = v70;
        goto LABEL_763;
      case 56:
        if ((v463 & 1) == 0) {
          goto LABEL_538;
        }
        char v347 = 0;
        unsigned int v348 = 0;
        uint64_t v349 = 0;
        *(void *)(a1 + 312) |= 0x1000000uLL;
        while (2)
        {
          uint64_t v350 = *v44;
          uint64_t v351 = *(void *)(v3 + v350);
          unint64_t v352 = v351 + 1;
          if (v351 == -1 || v352 > *(void *)(v3 + *v30))
          {
            *(unsigned char *)(v3 + *v47) = 1;
          }
          else
          {
            char v353 = *(unsigned char *)(*(void *)(v3 + *v48) + v351);
            *(void *)(v3 + v350) = v352;
            v349 |= (unint64_t)(v353 & 0x7F) << v347;
            if (v353 < 0)
            {
              v347 += 7;
              BOOL v56 = v348++ >= 9;
              if (v56)
              {
                uint64_t v349 = 0;
                goto LABEL_693;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v47)) {
          uint64_t v349 = 0;
        }
LABEL_693:
        BOOL v431 = v349 != 0;
        uint64_t v432 = 289;
        goto LABEL_730;
      case 57:
        if ((v463 & 1) == 0) {
          goto LABEL_538;
        }
        char v354 = 0;
        unsigned int v355 = 0;
        uint64_t v356 = 0;
        *(void *)(a1 + 312) |= 0x200000uLL;
        while (2)
        {
          uint64_t v357 = *v44;
          uint64_t v358 = *(void *)(v3 + v357);
          unint64_t v359 = v358 + 1;
          if (v358 == -1 || v359 > *(void *)(v3 + *v30))
          {
            *(unsigned char *)(v3 + *v47) = 1;
          }
          else
          {
            char v360 = *(unsigned char *)(*(void *)(v3 + *v48) + v358);
            *(void *)(v3 + v357) = v359;
            v356 |= (unint64_t)(v360 & 0x7F) << v354;
            if (v360 < 0)
            {
              v354 += 7;
              BOOL v56 = v355++ >= 9;
              if (v56)
              {
                uint64_t v356 = 0;
                goto LABEL_697;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v47)) {
          uint64_t v356 = 0;
        }
LABEL_697:
        BOOL v431 = v356 != 0;
        uint64_t v432 = 286;
        goto LABEL_730;
      case 58:
        if ((v463 & 1) == 0) {
          goto LABEL_538;
        }
        char v361 = 0;
        unsigned int v362 = 0;
        uint64_t v363 = 0;
        *(void *)(a1 + 312) |= 0x8000000uLL;
        while (2)
        {
          uint64_t v364 = *v44;
          uint64_t v365 = *(void *)(v3 + v364);
          unint64_t v366 = v365 + 1;
          if (v365 == -1 || v366 > *(void *)(v3 + *v30))
          {
            *(unsigned char *)(v3 + *v47) = 1;
          }
          else
          {
            char v367 = *(unsigned char *)(*(void *)(v3 + *v48) + v365);
            *(void *)(v3 + v364) = v366;
            v363 |= (unint64_t)(v367 & 0x7F) << v361;
            if (v367 < 0)
            {
              v361 += 7;
              BOOL v56 = v362++ >= 9;
              if (v56)
              {
                uint64_t v363 = 0;
                goto LABEL_701;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v47)) {
          uint64_t v363 = 0;
        }
LABEL_701:
        BOOL v431 = v363 != 0;
        uint64_t v432 = 292;
        goto LABEL_730;
      case 59:
        if ((v463 & 1) == 0) {
          goto LABEL_538;
        }
        char v368 = 0;
        unsigned int v369 = 0;
        uint64_t v370 = 0;
        *(void *)(a1 + 312) |= 0x8000000000uLL;
        while (2)
        {
          uint64_t v371 = *v44;
          uint64_t v372 = *(void *)(v3 + v371);
          unint64_t v373 = v372 + 1;
          if (v372 == -1 || v373 > *(void *)(v3 + *v30))
          {
            *(unsigned char *)(v3 + *v47) = 1;
          }
          else
          {
            char v374 = *(unsigned char *)(*(void *)(v3 + *v48) + v372);
            *(void *)(v3 + v371) = v373;
            v370 |= (unint64_t)(v374 & 0x7F) << v368;
            if (v374 < 0)
            {
              v368 += 7;
              BOOL v56 = v369++ >= 9;
              if (v56)
              {
                uint64_t v370 = 0;
                goto LABEL_705;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v47)) {
          uint64_t v370 = 0;
        }
LABEL_705:
        BOOL v431 = v370 != 0;
        uint64_t v432 = 304;
        goto LABEL_730;
      case 60:
        if ((v463 & 1) == 0) {
          goto LABEL_538;
        }
        char v375 = 0;
        unsigned int v376 = 0;
        uint64_t v377 = 0;
        *(void *)(a1 + 312) |= 0x100000000000uLL;
        while (2)
        {
          uint64_t v378 = *v44;
          uint64_t v379 = *(void *)(v3 + v378);
          unint64_t v380 = v379 + 1;
          if (v379 == -1 || v380 > *(void *)(v3 + *v30))
          {
            *(unsigned char *)(v3 + *v47) = 1;
          }
          else
          {
            char v381 = *(unsigned char *)(*(void *)(v3 + *v48) + v379);
            *(void *)(v3 + v378) = v380;
            v377 |= (unint64_t)(v381 & 0x7F) << v375;
            if (v381 < 0)
            {
              v375 += 7;
              BOOL v56 = v376++ >= 9;
              if (v56)
              {
                uint64_t v377 = 0;
                goto LABEL_709;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v47)) {
          uint64_t v377 = 0;
        }
LABEL_709:
        BOOL v431 = v377 != 0;
        uint64_t v432 = 309;
        goto LABEL_730;
      case 61:
        if ((v463 & 1) == 0) {
          goto LABEL_538;
        }
        char v382 = 0;
        unsigned int v383 = 0;
        uint64_t v384 = 0;
        *(void *)(a1 + 312) |= 0x10000000uLL;
        while (2)
        {
          uint64_t v385 = *v44;
          uint64_t v386 = *(void *)(v3 + v385);
          unint64_t v387 = v386 + 1;
          if (v386 == -1 || v387 > *(void *)(v3 + *v30))
          {
            *(unsigned char *)(v3 + *v47) = 1;
          }
          else
          {
            char v388 = *(unsigned char *)(*(void *)(v3 + *v48) + v386);
            *(void *)(v3 + v385) = v387;
            v384 |= (unint64_t)(v388 & 0x7F) << v382;
            if (v388 < 0)
            {
              v382 += 7;
              BOOL v56 = v383++ >= 9;
              if (v56)
              {
                uint64_t v384 = 0;
                goto LABEL_713;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v47)) {
          uint64_t v384 = 0;
        }
LABEL_713:
        BOOL v431 = v384 != 0;
        uint64_t v432 = 293;
        goto LABEL_730;
      case 62:
        if ((v463 & 1) == 0) {
          goto LABEL_538;
        }
        char v389 = 0;
        unsigned int v390 = 0;
        uint64_t v391 = 0;
        *(void *)(a1 + 312) |= 0x4000000000uLL;
        while (2)
        {
          uint64_t v392 = *v44;
          uint64_t v393 = *(void *)(v3 + v392);
          unint64_t v394 = v393 + 1;
          if (v393 == -1 || v394 > *(void *)(v3 + *v30))
          {
            *(unsigned char *)(v3 + *v47) = 1;
          }
          else
          {
            char v395 = *(unsigned char *)(*(void *)(v3 + *v48) + v393);
            *(void *)(v3 + v392) = v394;
            v391 |= (unint64_t)(v395 & 0x7F) << v389;
            if (v395 < 0)
            {
              v389 += 7;
              BOOL v56 = v390++ >= 9;
              if (v56)
              {
                uint64_t v391 = 0;
                goto LABEL_717;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v47)) {
          uint64_t v391 = 0;
        }
LABEL_717:
        BOOL v431 = v391 != 0;
        uint64_t v432 = 303;
        goto LABEL_730;
      case 63:
        if (!v61 || (*(void *)(a1 + 312) & 0x1000000000000) != 0) {
          goto LABEL_538;
        }
        if (v58 != 2)
        {
          char v448 = 0;
          unsigned int v449 = 0;
          uint64_t v450 = 0;
          while (1)
          {
            uint64_t v451 = *v44;
            uint64_t v452 = *(void *)(v3 + v451);
            unint64_t v453 = v452 + 1;
            if (v452 == -1 || v453 > *(void *)(v3 + *v30)) {
              break;
            }
            char v454 = *(unsigned char *)(*(void *)(v3 + *v48) + v452);
            *(void *)(v3 + v451) = v453;
            v450 |= (unint64_t)(v454 & 0x7F) << v448;
            if (v454 < 0)
            {
              v448 += 7;
              BOOL v56 = v449++ >= 9;
              if (!v56) {
                continue;
              }
            }
            goto LABEL_792;
          }
LABEL_791:
          *(unsigned char *)(v3 + *v47) = 1;
LABEL_792:
          PBRepeatedInt32Add();
          goto LABEL_761;
        }
        if (!PBReaderPlaceMark()) {
          goto LABEL_839;
        }
        while (1)
        {
          uint64_t v396 = (int *)MEMORY[0x1E4F940E0];
          uint64_t v397 = (int *)MEMORY[0x1E4F940C8];
          if (*(void *)(v3 + *v44) >= *(void *)(v3 + (int)*MEMORY[0x1E4F940E0])
            || *(unsigned char *)(v3 + (int)*MEMORY[0x1E4F940C8]))
          {
            break;
          }
          char v398 = 0;
          unsigned int v399 = 0;
          uint64_t v400 = 0;
          unsigned int v401 = (int *)MEMORY[0x1E4F940B8];
          while (1)
          {
            uint64_t v402 = *v44;
            uint64_t v403 = *(void *)(v3 + v402);
            unint64_t v404 = v403 + 1;
            if (v403 == -1 || v404 > *(void *)(v3 + *v396)) {
              break;
            }
            char v405 = *(unsigned char *)(*(void *)(v3 + *v401) + v403);
            *(void *)(v3 + v402) = v404;
            v400 |= (unint64_t)(v405 & 0x7F) << v398;
            if (v405 < 0)
            {
              v398 += 7;
              BOOL v56 = v399++ >= 9;
              if (!v56) {
                continue;
              }
            }
            goto LABEL_500;
          }
          *(unsigned char *)(v3 + *v397) = 1;
LABEL_500:
          PBRepeatedInt32Add();
        }
LABEL_540:
        PBReaderRecallMark();
        char v47 = (int *)MEMORY[0x1E4F940C8];
        uint64_t v30 = (int *)MEMORY[0x1E4F940E0];
        goto LABEL_762;
      case 64:
        if ((v463 & 1) == 0) {
          goto LABEL_538;
        }
        char v406 = 0;
        unsigned int v407 = 0;
        uint64_t v408 = 0;
        *(void *)(a1 + 312) |= 0x2000000uLL;
        while (2)
        {
          uint64_t v409 = *v44;
          uint64_t v410 = *(void *)(v3 + v409);
          unint64_t v411 = v410 + 1;
          if (v410 == -1 || v411 > *(void *)(v3 + *v30))
          {
            *(unsigned char *)(v3 + *v47) = 1;
          }
          else
          {
            char v412 = *(unsigned char *)(*(void *)(v3 + *v48) + v410);
            *(void *)(v3 + v409) = v411;
            v408 |= (unint64_t)(v412 & 0x7F) << v406;
            if (v412 < 0)
            {
              v406 += 7;
              BOOL v56 = v407++ >= 9;
              if (v56)
              {
                uint64_t v408 = 0;
                goto LABEL_721;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v47)) {
          uint64_t v408 = 0;
        }
LABEL_721:
        BOOL v431 = v408 != 0;
        uint64_t v432 = 290;
        goto LABEL_730;
      case 65:
        if (!v61) {
          goto LABEL_538;
        }
        if ((*(void *)(a1 + 312) & 0x4000000000000000) == 0)
        {
          uint64_t v66 = PBReaderReadString();
          uint64_t v67 = 184;
LABEL_512:
          char v413 = *(void **)(a1 + v67);
          *(void *)(a1 + v67) = v66;
          goto LABEL_527;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_839;
        }
        uint64_t v433 = (2 * *(void *)(a1 + 312)) >> 56;
        goto LABEL_760;
      case 66:
        if ((v463 & 1) == 0) {
          goto LABEL_538;
        }
        char v414 = 0;
        unsigned int v415 = 0;
        uint64_t v416 = 0;
        *(void *)(a1 + 312) |= 0x10000uLL;
        while (2)
        {
          uint64_t v417 = *v44;
          uint64_t v418 = *(void *)(v3 + v417);
          unint64_t v419 = v418 + 1;
          if (v418 == -1 || v419 > *(void *)(v3 + *v30))
          {
            *(unsigned char *)(v3 + *v47) = 1;
          }
          else
          {
            char v420 = *(unsigned char *)(*(void *)(v3 + *v48) + v418);
            *(void *)(v3 + v417) = v419;
            v416 |= (unint64_t)(v420 & 0x7F) << v414;
            if (v420 < 0)
            {
              v414 += 7;
              BOOL v56 = v415++ >= 9;
              if (v56)
              {
                uint64_t v416 = 0;
                goto LABEL_725;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v47)) {
          uint64_t v416 = 0;
        }
LABEL_725:
        BOOL v431 = v416 != 0;
        uint64_t v432 = 281;
        goto LABEL_730;
      case 67:
        if (!v61) {
          goto LABEL_538;
        }
        if ((*(void *)(a1 + 312) & 0x80000000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_839;
          }
          uint64_t v433 = *(char *)(a1 + 318);
LABEL_760:
          v6 += v433 >> 7;
LABEL_761:
          uint64_t v30 = (int *)MEMORY[0x1E4F940E0];
          char v47 = (int *)MEMORY[0x1E4F940C8];
LABEL_762:
          unint64_t v48 = (int *)MEMORY[0x1E4F940B8];
LABEL_763:
          if (!(v464 & 1 | (v6 != 0)))
          {
            int v46 = 1;
            char v42 = v465;
LABEL_796:
            if ((v42 & 1) == 0) {
              goto LABEL_798;
            }
LABEL_797:
            *(void *)(a1 + 312) |= 0x800000000000uLL;
            goto LABEL_798;
          }
          char v42 = v465;
          if (*(void *)(v3 + *v44) >= *(void *)(v3 + *v30)) {
            goto LABEL_793;
          }
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_839;
        }
        __int16 v124 = objc_alloc_init(GEOArtworkCapabilities);
        if (GEOArtworkCapabilitiesReadAllFrom((uint64_t)v124, (void *)v3))
        {
          PBReaderRecallMark();
          uint64_t v125 = 128;
LABEL_526:
          char v413 = *(void **)(a1 + v125);
          *(void *)(a1 + v125) = v124;
LABEL_527:

          --v6;
          goto LABEL_761;
        }
LABEL_838:

LABEL_839:
        int v46 = 0;
        if (v465) {
          goto LABEL_797;
        }
LABEL_798:
        if (v43 & 1 | ((v46 & 1) == 0))
        {
          char v455 = *(unsigned char *)(a1 + 320) | 0xF;
          *(void *)(a1 + 312) |= 0xFFFF000000000000;
          *(unsigned char *)(a1 + 320) = v455;
          goto LABEL_832;
        }
        if (v45)
        {
          while (1)
          {
            int v457 = *v45++;
            int v456 = v457;
            if (v457 <= 37)
            {
              char v458 = 0;
              unint64_t v459 = 0x20000000000000;
              switch(v456)
              {
                case 0:
                  goto LABEL_832;
                case 1:
                  goto LABEL_831;
                case 2:
                  char v458 = 0;
                  unint64_t v459 = 0x40000000000000;
                  goto LABEL_831;
                case 3:
                  char v458 = 0;
                  unint64_t v459 = 0x2000000000000000;
                  goto LABEL_831;
                case 6:
                  char v458 = 0;
                  unint64_t v459 = 0x400000000000000;
                  goto LABEL_831;
                case 7:
                  char v458 = 0;
                  unint64_t v459 = 0x800000000000000;
                  goto LABEL_831;
                case 11:
                  char v458 = 0;
                  unint64_t v459 = 0x100000000000000;
                  goto LABEL_831;
                case 16:
                  char v458 = 0;
                  unint64_t v459 = 0x1000000000000000;
                  goto LABEL_831;
                case 19:
                  unint64_t v459 = 0;
                  char v458 = 4;
                  goto LABEL_831;
                case 24:
                  char v458 = 0;
                  unint64_t v459 = 0x8000000000000;
                  goto LABEL_831;
                case 25:
                  unint64_t v459 = 0;
                  char v458 = 2;
                  goto LABEL_831;
                case 27:
                  char v458 = 0;
                  unint64_t v459 = 0x2000000000000;
                  goto LABEL_831;
                case 31:
                  char v458 = 0;
                  unint64_t v459 = 0x8000000000000000;
                  goto LABEL_831;
                case 32:
                  char v458 = 0;
                  unint64_t v459 = 0x200000000000000;
                  goto LABEL_831;
                default:
                  continue;
              }
              break;
            }
            if (v456 <= 53)
            {
              switch(v456)
              {
                case '&':
                  unint64_t v459 = 0;
                  char v458 = 1;
                  break;
                case ')':
                  char v458 = 0;
                  unint64_t v459 = 0x10000000000000;
                  break;
                case '4':
                  char v458 = 0;
                  unint64_t v459 = 0x4000000000000;
                  break;
                default:
                  continue;
              }
            }
            else if (v456 > 64)
            {
              if (v456 == 65)
              {
                char v458 = 0;
                unint64_t v459 = 0x4000000000000000;
              }
              else
              {
                if (v456 != 67) {
                  continue;
                }
                char v458 = 0;
                unint64_t v459 = 0x80000000000000;
              }
            }
            else if (v456 == 54)
            {
              unint64_t v459 = 0;
              char v458 = 8;
            }
            else
            {
              if (v456 != 63) {
                continue;
              }
              char v458 = 0;
              unint64_t v459 = 0x1000000000000;
            }
LABEL_831:
            char v460 = *(unsigned char *)(a1 + 320) | v458;
            *(void *)(a1 + 312) |= v459;
            *(unsigned char *)(a1 + 320) = v460;
          }
        }
LABEL_832:
        if (v46)
        {
          unint64_t v3 = *(unsigned char *)(v3 + (int)*MEMORY[0x1E4F940C8]) == 0;
          if ((v43 & 1) == 0) {
            return v3;
          }
LABEL_836:
          char v461 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        else
        {
          unint64_t v3 = 0;
          if (v43) {
            goto LABEL_836;
          }
        }
        return v3;
      case 100:
        if ((v463 & 1) == 0) {
          goto LABEL_538;
        }
        char v421 = 0;
        unsigned int v422 = 0;
        uint64_t v423 = 0;
        *(void *)(a1 + 312) |= 0x100000uLL;
        while (2)
        {
          uint64_t v424 = *v44;
          uint64_t v425 = *(void *)(v3 + v424);
          unint64_t v426 = v425 + 1;
          if (v425 == -1 || v426 > *(void *)(v3 + *v30))
          {
            *(unsigned char *)(v3 + *v47) = 1;
          }
          else
          {
            char v427 = *(unsigned char *)(*(void *)(v3 + *v48) + v425);
            *(void *)(v3 + v424) = v426;
            v423 |= (unint64_t)(v427 & 0x7F) << v421;
            if (v427 < 0)
            {
              v421 += 7;
              BOOL v56 = v422++ >= 9;
              if (v56)
              {
                uint64_t v423 = 0;
                goto LABEL_729;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v47)) {
          uint64_t v423 = 0;
        }
LABEL_729:
        BOOL v431 = v423 != 0;
        uint64_t v432 = 285;
LABEL_730:
        *(unsigned char *)(a1 + v432) = v431;
        goto LABEL_763;
      default:
        if ((v42 & 1) == 0 || (*(void *)(a1 + 312) & 0x800000000000) != 0)
        {
LABEL_538:
          char v429 = PBReaderSkipValueWithTag();
          unint64_t v48 = (int *)MEMORY[0x1E4F940B8];
          char v47 = (int *)MEMORY[0x1E4F940C8];
          uint64_t v30 = (int *)MEMORY[0x1E4F940E0];
          if ((v429 & 1) == 0) {
            goto LABEL_839;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v121 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            char v122 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v121;
          }
          int v123 = PBUnknownFieldAdd();
          uint64_t v30 = (int *)MEMORY[0x1E4F940E0];
          char v47 = (int *)MEMORY[0x1E4F940C8];
          unint64_t v48 = (int *)MEMORY[0x1E4F940B8];
          if (!v123)
          {
            int v46 = 0;
            goto LABEL_797;
          }
        }
        goto LABEL_763;
    }
  }
}

id getAMSMediaArtworkCropStyleSourceSize()
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  uint64_t v0 = (void **)getAMSMediaArtworkCropStyleSourceSizeSymbolLoc_ptr;
  uint64_t v8 = getAMSMediaArtworkCropStyleSourceSizeSymbolLoc_ptr;
  if (!getAMSMediaArtworkCropStyleSourceSizeSymbolLoc_ptr)
  {
    BOOL v1 = (void *)AppleMediaServicesLibrary();
    v6[3] = (uint64_t)dlsym(v1, "AMSMediaArtworkCropStyleSourceSize");
    getAMSMediaArtworkCropStyleSourceSizeSymbolLoc_ptr = v6[3];
    uint64_t v0 = (void **)v6[3];
  }
  _Block_object_dispose(&v5, 8);
  if (!v0)
  {
    dlerror();
    id v4 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v5, 8);
    _Unwind_Resume(v4);
  }
  uint64_t v2 = *v0;

  return v2;
}

uint64_t _loadCertsFromFile(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v24 = 0;
  uint64_t v8 = [MEMORY[0x1E4F1C9B8] dataWithContentsOfFile:@"/AppleInternal/Library/Preferences/GeoServices/GEOResourceCertIds.plist" options:0 error:&v24];
  id v9 = v24;
  if (v8) {
    BOOL v10 = v9 == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (!v10)
  {
    id v11 = v9;
    long long v12 = GEOGetSignedResourcesLog();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      *(void *)&uint8_t buf[4] = @"/AppleInternal/Library/Preferences/GeoServices/GEOResourceCertIds.plist";
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v11;
      _os_log_impl(&dword_188D96000, v12, OS_LOG_TYPE_ERROR, "Could not read plist at \"%@\": %@", buf, 0x16u);
    }
LABEL_17:
    uint64_t v16 = 0;
    goto LABEL_18;
  }
  id v23 = 0;
  long long v12 = [MEMORY[0x1E4F28F98] propertyListWithData:v8 options:0 format:0 error:&v23];
  id v11 = v23;
  if (v11 || !v12 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0) || ![v12 count])
  {
    int32x2_t v17 = GEOGetSignedResourcesLog();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      *(void *)&uint8_t buf[4] = @"/AppleInternal/Library/Preferences/GeoServices/GEOResourceCertIds.plist";
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v11;
      _os_log_impl(&dword_188D96000, v17, OS_LOG_TYPE_ERROR, "Could not read/badly formatted plist at \"%@\": %@", buf, 0x16u);
    }

    int32x2_t v18 = GEOGetSignedResourcesLog();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      *(void *)&uint8_t buf[4] = v12;
      _os_log_impl(&dword_188D96000, v18, OS_LOG_TYPE_ERROR, "    Contents: %@", buf, 0xCu);
    }

    goto LABEL_17;
  }
  int32x2_t v13 = malloc_type_malloc(16 * [v12 count] + 16, 0x600405BB7FD7CuLL);
  *(void *)buf = 0;
  *(void *)&uint8_t buf[8] = buf;
  *(void *)&buf[16] = 0x2020000000;
  *int32x2_t v13 = a1;
  v13[1] = a2;
  uint64_t v26 = 1;
  v22[0] = MEMORY[0x1E4F143A8];
  v22[1] = 3221225472;
  v22[2] = ___loadCertsFromFile_block_invoke;
  v22[3] = &unk_1E53DA170;
  v22[4] = buf;
  v22[5] = v13;
  int32x2_t v14 = (void *)MEMORY[0x18C120660](v22);
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 3221225472;
  v20[2] = ___loadCertsFromFile_block_invoke_2;
  v20[3] = &unk_1E53DA198;
  id v15 = v14;
  id v21 = v15;
  [v12 enumerateKeysAndObjectsUsingBlock:v20];
  *a3 = v13;
  *a4 = *(void *)(*(void *)&buf[8] + 24);

  _Block_object_dispose(buf, 8);
  id v11 = 0;
  uint64_t v16 = 1;
LABEL_18:

  return v16;
}

void sub_18908EC0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __SetSubscriptionDownloadState_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void **)(a1 + 32);
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  obunint64_t j = *(id *)(v6 + 40);
  int v7 = [v5 bindInt64Parameter:"@subscription_pk" toValue:v4 inStatement:a2 error:&obj];
  objc_storeStrong((id *)(v6 + 40), obj);
  if (!v7) {
    return 0;
  }
  uint64_t v8 = *(unsigned int *)(a1 + 56);
  id v9 = *(void **)(a1 + 32);
  uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8);
  id v13 = *(id *)(v10 + 40);
  uint64_t v11 = [v9 bindIntParameter:"@download_state" toValue:v8 inStatement:a2 error:&v13];
  objc_storeStrong((id *)(v10 + 40), v13);
  return v11;
}

uint64_t __RemoveExactShiftEntry_block_invoke(double *a1, uint64_t a2)
{
  double v4 = a1[6];
  uint64_t v5 = (void *)*((void *)a1 + 4);
  uint64_t v6 = *(void *)(*((void *)a1 + 5) + 8);
  obunint64_t j = *(id *)(v6 + 40);
  int v7 = [v5 bindRealParameter:"@lat" toValue:a2 inStatement:&obj error:v4];
  objc_storeStrong((id *)(v6 + 40), obj);
  if (!v7) {
    return 0;
  }
  double v8 = a1[7];
  id v9 = (void *)*((void *)a1 + 4);
  uint64_t v10 = *(void *)(*((void *)a1 + 5) + 8);
  id v13 = *(id *)(v10 + 40);
  uint64_t v11 = [v9 bindRealParameter:"@lng" toValue:a2 inStatement:&v13 error:v8];
  objc_storeStrong((id *)(v10 + 40), v13);
  return v11;
}

uint64_t __PruneCachedShiftEntriesByCount_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 48);
  unint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  obunint64_t j = *(id *)(v4 + 40);
  uint64_t v5 = [v3 bindIntParameter:"@count" toValue:v2 inStatement:a2 error:&obj];
  objc_storeStrong((id *)(v4 + 40), obj);
  return v5;
}

uint64_t __InsertOfflineDataBatch_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(unsigned int *)(a1 + 80);
  uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8);
  obunint64_t j = *(id *)(v6 + 40);
  int v7 = [v4 bindIntParameter:"@layer" toValue:v5 inStatement:a2 error:&obj];
  objc_storeStrong((id *)(v6 + 40), obj);
  if (!v7) {
    return 0;
  }
  double v8 = *(void **)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(*(void *)(a1 + 56) + 8);
  id v28 = *(id *)(v10 + 40);
  int v11 = [v8 bindBlobParameter:"@key" toValue:v9 inStatement:a2 error:&v28];
  objc_storeStrong((id *)(v10 + 40), v28);
  if (!v11) {
    return 0;
  }
  long long v12 = *(void **)(a1 + 32);
  uint64_t v13 = *(void *)(a1 + 64);
  uint64_t v14 = *(void *)(*(void *)(a1 + 56) + 8);
  id v27 = *(id *)(v14 + 40);
  int v15 = [v12 bindInt64Parameter:"@version" toValue:v13 inStatement:a2 error:&v27];
  objc_storeStrong((id *)(v14 + 40), v27);
  if (!v15) {
    return 0;
  }
  uint64_t v16 = *(void **)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 48);
  uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8);
  id v26 = *(id *)(v18 + 40);
  int v19 = [v16 bindTextParameter:"@etag" toValue:v17 inStatement:a2 error:&v26];
  objc_storeStrong((id *)(v18 + 40), v26);
  if (!v19) {
    return 0;
  }
  int32x2_t v20 = *(void **)(a1 + 32);
  uint64_t v21 = *(void *)(a1 + 72);
  uint64_t v22 = *(void *)(*(void *)(a1 + 56) + 8);
  id v25 = *(id *)(v22 + 40);
  uint64_t v23 = [v20 bindInt64Parameter:"@data_pk" toValue:v21 inStatement:a2 error:&v25];
  objc_storeStrong((id *)(v22 + 40), v25);
  return v23;
}

uint64_t __GetSubscriptionsForSyncToPairedDevice_block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8);
  obunint64_t j = *(id *)(v6 + 40);
  uint64_t v7 = [v4 bindUUIDParameter:"@paired_device_subscription_sync_device_id" toValue:v5 inStatement:a2 error:&obj];
  objc_storeStrong((id *)(v6 + 40), obj);
  if (v7)
  {
    uint64_t v8 = sqlite3_step(a2);
    while (v8 == 100)
    {
      uint64_t v9 = [*(id *)(a1 + 32) stringForColumn:0 inStatment:a2];
      uint64_t v7 = 1;
      [*(id *)(a1 + 32) intForColumn:1 inStatment:a2];
      if (!(*(unsigned int (**)(void))(*(void *)(a1 + 48) + 16))()) {
        goto LABEL_9;
      }
      uint64_t v8 = sqlite3_step(a2);
    }
    if (v8 == 101) {
      return 1;
    }
    uint64_t v10 = *(void **)(a1 + 32);
    uint64_t v11 = *(void *)(*(void *)(a1 + 56) + 8);
    id v14 = *(id *)(v11 + 40);
    [v10 reportSQLiteErrorCode:v8 method:@"step" error:&v14];
    id v12 = v14;
    uint64_t v7 = 0;
    uint64_t v9 = *(void **)(v11 + 40);
    *(void *)(v11 + 40) = v12;
LABEL_9:
  }
  return v7;
}

uint64_t __GetSubscriptionSizeForTileset_block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8);
  obunint64_t j = *(id *)(v6 + 40);
  int v7 = [v4 bindInt64Parameter:"@subscription_pk" toValue:v5 inStatement:a2 error:&obj];
  objc_storeStrong((id *)(v6 + 40), obj);
  if (!v7) {
    return 0;
  }
  uint64_t v8 = *(void **)(a1 + 32);
  uint64_t v9 = *(unsigned int *)(a1 + 64);
  uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8);
  id v23 = *(id *)(v10 + 40);
  int v11 = [v8 bindIntParameter:"@tileset" toValue:v9 inStatement:a2 error:&v23];
  objc_storeStrong((id *)(v10 + 40), v23);
  if (!v11) {
    return 0;
  }
  id v12 = *(void **)(a1 + 32);
  uint64_t v13 = *(unsigned __int8 *)(a1 + 68);
  uint64_t v14 = *(void *)(*(void *)(a1 + 48) + 8);
  id v22 = *(id *)(v14 + 40);
  int v15 = [v12 bindIntParameter:"@is_current" toValue:v13 inStatement:a2 error:&v22];
  objc_storeStrong((id *)(v14 + 40), v22);
  if (!v15) {
    return 0;
  }
  uint64_t v16 = sqlite3_step(a2);
  uint64_t v17 = 1;
  while (v16 == 100)
  {
    [*(id *)(a1 + 32) int64ForColumn:0 inStatment:a2];
    [*(id *)(a1 + 32) intForColumn:1 inStatment:a2];
    if (!(*(unsigned int (**)(void))(*(void *)(a1 + 40) + 16))()) {
      return v17;
    }
    uint64_t v16 = sqlite3_step(a2);
  }
  if (v16 != 101)
  {
    uint64_t v18 = *(void **)(a1 + 32);
    uint64_t v19 = *(void *)(*(void *)(a1 + 48) + 8);
    id v21 = *(id *)(v19 + 40);
    [v18 reportSQLiteErrorCode:v16 method:@"step" error:&v21];
    objc_storeStrong((id *)(v19 + 40), v21);
    return 0;
  }
  return 1;
}

uint64_t __DeleteDataForOfflineBatchesNotMatchingVersions_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 64);
  uint64_t v5 = *(void **)(a1 + 32);
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  obunint64_t j = *(id *)(v6 + 40);
  int v7 = [v5 bindIntParameter:"@layer" toValue:v4 inStatement:a2 error:&obj];
  objc_storeStrong((id *)(v6 + 40), obj);
  if (!v7) {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = *(void **)(a1 + 32);
  uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8);
  id v18 = *(id *)(v10 + 40);
  int v11 = [v9 bindInt64Parameter:"@versionA" toValue:v8 inStatement:a2 error:&v18];
  objc_storeStrong((id *)(v10 + 40), v18);
  if (!v11) {
    return 0;
  }
  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v13 = *(void **)(a1 + 32);
  uint64_t v14 = *(void *)(*(void *)(a1 + 40) + 8);
  id v17 = *(id *)(v14 + 40);
  uint64_t v15 = [v13 bindInt64Parameter:"@versionB" toValue:v12 inStatement:a2 error:&v17];
  objc_storeStrong((id *)(v14 + 40), v17);
  return v15;
}

void sub_18908F9D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Block_object_dispose(&a32, 8);
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose((const void *)(v40 - 216), 8);
  char v42 = *(void **)(v40 - 168);
  if (v42)
  {
    *(void *)(v40 - 160) = v42;
    operator delete(v42);
  }
  _Block_object_dispose((const void *)(v40 - 144), 8);

  _Unwind_Resume(a1);
}

void sub_189090B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_189092078(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void *operator<<(void *a1, void *a2)
{
  *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 8) |= 4u;
  if (*a2)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"muid: ", 6);
    std::ostream::operator<<();
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"roadID: ", 8);
    std::ostream::operator<<();
  }
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)", ", 2);
  *(void *)((char *)v3 + *(void *)(*v3 - 24) + 16) = 6;
  uint64_t v4 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)", ", 2);
  std::ostream::operator<<();
  *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 8) &= ~4u;
  return a1;
}

void *std::__hash_table<std::__hash_value_type<GEOPathMatcherRoadKey,unsigned int>,std::__unordered_map_hasher<GEOPathMatcherRoadKey,std::__hash_value_type<GEOPathMatcherRoadKey,unsigned int>,std::hash<GEOPathMatcherRoadKey>,std::equal_to<GEOPathMatcherRoadKey>,true>,std::__unordered_map_equal<GEOPathMatcherRoadKey,std::__hash_value_type<GEOPathMatcherRoadKey,unsigned int>,std::equal_to<GEOPathMatcherRoadKey>,std::hash<GEOPathMatcherRoadKey>,true>,std::allocator<std::__hash_value_type<GEOPathMatcherRoadKey,unsigned int>>>::__emplace_unique_key_args<GEOPathMatcherRoadKey,std::piecewise_construct_t const&,std::tuple<GEOPathMatcherRoadKey const&>,std::tuple<>>(uint64_t a1, uint64_t *a2, uint64_t a3, _OWORD **a4)
{
  if (*a2) {
    uint64_t v7 = *a2;
  }
  else {
    uint64_t v7 = a2[1];
  }
  unint64_t v8 = v7 - 0x61C8864680B583EBLL;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v7 - 0x61C8864680B583EBLL;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      uint64_t v12 = *v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            uint64_t v14 = v12[2];
            if (v14)
            {
              uint64_t v15 = *a2;
            }
            else
            {
              uint64_t v14 = v12[3];
              uint64_t v15 = a2[1];
            }
            if (v14 == v15) {
              return v12;
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4) {
              break;
            }
          }
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  uint64_t v12 = operator new(0x38uLL);
  void *v12 = 0;
  v12[1] = v8;
  long long v16 = (*a4)[1];
  *((_OWORD *)v12 + 1) = **a4;
  *((_OWORD *)v12 + 2) = v16;
  *((_DWORD *)v12 + 12) = 0;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    BOOL v19 = 1;
    if (v9 >= 3) {
      BOOL v19 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v9);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::__rehash<true>(a1, v22);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v23 = *(void *)a1;
  id v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    void *v12 = *v24;
LABEL_44:
    void *v24 = v12;
    goto LABEL_45;
  }
  void *v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v23 + 8 * v4) = a1 + 16;
  if (*v12)
  {
    unint64_t v25 = *(void *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v25 >= v9) {
        v25 %= v9;
      }
    }
    else
    {
      v25 &= v9 - 1;
    }
    id v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_44;
  }
LABEL_45:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_189092538(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<GEOPathMatcherRoadKey,unsigned int>,std::__unordered_map_hasher<GEOPathMatcherRoadKey,std::__hash_value_type<GEOPathMatcherRoadKey,unsigned int>,std::hash<GEOPathMatcherRoadKey>,std::equal_to<GEOPathMatcherRoadKey>,true>,std::__unordered_map_equal<GEOPathMatcherRoadKey,std::__hash_value_type<GEOPathMatcherRoadKey,unsigned int>,std::equal_to<GEOPathMatcherRoadKey>,std::hash<GEOPathMatcherRoadKey>,true>,std::allocator<std::__hash_value_type<GEOPathMatcherRoadKey,unsigned int>>>::find<GEOPathMatcherRoadKey>(void *a1, uint64_t *a2)
{
  if (*a2) {
    uint64_t v2 = *a2;
  }
  else {
    uint64_t v2 = a2[1];
  }
  int8x8_t v3 = (int8x8_t)a1[1];
  if (!*(void *)&v3) {
    return 0;
  }
  unint64_t v4 = v2 - 0x61C8864680B583EBLL;
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = v4;
    if (v4 >= *(void *)&v3) {
      unint64_t v6 = v4 % *(void *)&v3;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v3 - 1) & v4;
  }
  uint64_t v7 = *(void **)(*a1 + 8 * v6);
  if (!v7) {
    return 0;
  }
  unint64_t result = (void *)*v7;
  if (*v7)
  {
    do
    {
      unint64_t v9 = result[1];
      if (v4 == v9)
      {
        uint64_t v10 = result[2];
        if (v10)
        {
          uint64_t v11 = *a2;
        }
        else
        {
          uint64_t v10 = result[3];
          uint64_t v11 = a2[1];
        }
        if (v10 == v11) {
          return result;
        }
      }
      else
      {
        if (v5.u32[0] > 1uLL)
        {
          if (v9 >= *(void *)&v3) {
            v9 %= *(void *)&v3;
          }
        }
        else
        {
          v9 &= *(void *)&v3 - 1;
        }
        if (v9 != v6) {
          return 0;
        }
      }
      unint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t maps::path_codec::compute_angle_of_contact_degrees(uint64_t *a1, int a2, int *a3, double a4, double a5, double a6, double a7, double a8)
{
  uint64_t v8 = *a1;
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2);
  uint64_t v10 = v9 - 2;
  if (v9 < 2) {
    return 0;
  }
  unint64_t v14 = v9 - 1;
  if (a2) {
    unint64_t v15 = 0;
  }
  else {
    unint64_t v15 = v14;
  }
  if (a2) {
    uint64_t v16 = 1;
  }
  else {
    uint64_t v16 = v10;
  }
  float v17 = (maps::path_codec *)(v8 + 12 * v15);
  LODWORD(a4) = *(_DWORD *)v17;
  LODWORD(a5) = *((_DWORD *)v17 + 1);
  double v18 = (double)*(unint64_t *)&a4;
  double v19 = (double)*(unint64_t *)&a5;
  int v20 = *((_DWORD *)v17 + 2);
  HIDWORD(v21) = 1079574528;
  double v22 = (double)a3[22] / 100.0;
  if (a2) {
    uint64_t v23 = 1;
  }
  else {
    uint64_t v23 = -1;
  }
  id v24 = (_DWORD *)(v8 + 12 * v16);
  do
  {
    uint64_t v25 = v16;
    LODWORD(v21) = *v24;
    LODWORD(a8) = v24[1];
    double v26 = (v18 - (double)*(unint64_t *)&v21) / 100.0;
    double v27 = (v19 - (double)*(unint64_t *)&a8) / 100.0;
    if (v20 == 0x7FFFFFFF || (int v28 = v24[2], v28 == 0x7FFFFFFF))
    {
      a8 = v27 * v27;
      double v29 = a8 + v26 * v26;
    }
    else
    {
      int v30 = v20 - v28;
      if (v30 < 0) {
        int v30 = -v30;
      }
      a8 = v27 * v27;
      double v29 = a8 + v26 * v26 + (double)v30 / 100.0 * ((double)v30 / 100.0);
    }
    v16 += v23;
    v24 += 3 * v23;
    if (!v25) {
      break;
    }
    if (v14 == v25) {
      break;
    }
    double v21 = sqrt(v29);
  }
  while (v21 < v22);
  unsigned __int16 v31 = maps::path_codec::compute_bearing(v17, (const maps::path_codec::Coordinate *)&v24[-3 * v23], (const maps::path_codec::Coordinate *)a3, v18, v19, v22);
  double v36 = NAN;
  uint64_t v80 = -1;
  int v81 = 0x7FFFFFFF;
  if (v25)
  {
    unsigned __int16 v37 = v31;
    double v36 = (double)a3[23];
    double v33 = 100.0;
    uint64_t v38 = v25;
    double v39 = v36 / 100.0;
    uint64_t v40 = -v23;
    uint64_t v41 = v25;
    uint64_t v42 = v25;
    unsigned __int16 v43 = v31;
    while (1)
    {
      uint64_t v44 = *a1;
      if (v40 + v16 == -1 - 0x5555555555555555 * ((a1[1] - *a1) >> 2)) {
        return maps::path_codec::compute_bearing((maps::path_codec *)(*a1 + 12 * v15), (const maps::path_codec::Coordinate *)(*a1 + 12 * v38), v32, v36, v33, v34);
      }
      unsigned int v45 = (_DWORD *)(v44 + 12 * v15);
      int v46 = (_DWORD *)(v44 + 12 * v16);
      char v47 = (maps::path_codec *)(v44 + 12 * v41);
      LODWORD(v36) = *v45;
      LODWORD(v34) = v45[1];
      double v48 = (double)*(unint64_t *)&v36;
      double v49 = (double)*(unint64_t *)&v34;
      LODWORD(v34) = *v46;
      LODWORD(v35) = v46[1];
      double v50 = (double)*(unint64_t *)&v34 - v48;
      double v51 = (double)v35 - v49;
      double v52 = v51 * v51 + v50 * v50;
      double v53 = fabs(v52);
      HIDWORD(v54) = 1018167296;
      if (v52 == 0.0 || v53 < 2.22044605e-16) {
        break;
      }
      LODWORD(v53) = *(_DWORD *)v47;
      LODWORD(v54) = *(_DWORD *)(v44 + 12 * v41 + 4);
      double v56 = (v51 * ((double)v54 - v49) + ((double)*(unint64_t *)&v53 - v48) * v50) / v52;
      if (v56 <= 0.0)
      {
        uint64_t v59 = *(void *)v45;
        int v60 = v45[2];
        goto LABEL_36;
      }
      if (v56 >= 1.0) {
        break;
      }
      double v49 = v49 + v56 * v51;
      LODWORD(v80) = llround(v48 + v56 * v50);
      HIDWORD(v80) = llround(v49);
      int v57 = *(_DWORD *)(v44 + 12 * v15 + 8);
      if (v57 != 0x7FFFFFFF)
      {
        int v58 = *(_DWORD *)(v44 + 12 * v16 + 8);
        if (v58 != 0x7FFFFFFF)
        {
          double v49 = (double)v57 + v56 * (double)(v58 - v57);
          int v81 = (int)v49;
        }
      }
LABEL_37:
      maps::path_codec::great_circle_distance_in_m(v47, (const maps::path_codec::Coordinate *)&v80, (const maps::path_codec::Coordinate *)1, v49);
      if (v36 >= v39)
      {
        uint64_t v38 = v16 - v23;
        return maps::path_codec::compute_bearing((maps::path_codec *)(*a1 + 12 * v15), (const maps::path_codec::Coordinate *)(*a1 + 12 * v38), v32, v36, v33, v34);
      }
      uint64_t v62 = *a1;
      int v63 = (_DWORD *)(*a1 + 12 * v15);
      int v64 = (_DWORD *)(*a1 + 12 * v16);
      BOOL v65 = (maps::path_codec *)(*a1 + 12 * v42);
      LODWORD(v36) = *v63;
      LODWORD(v34) = v63[1];
      double v66 = (double)*(unint64_t *)&v36;
      double v67 = (double)*(unint64_t *)&v34;
      LODWORD(v34) = *v64;
      LODWORD(v61) = v64[1];
      double v68 = (double)*(unint64_t *)&v34 - v66;
      double v69 = (double)v61 - v67;
      double v70 = v69 * v69 + v68 * v68;
      double v71 = fabs(v70);
      HIDWORD(v72) = 1018167296;
      if (v70 != 0.0 && v71 >= 2.22044605e-16)
      {
        LODWORD(v71) = *(_DWORD *)v65;
        LODWORD(v72) = *(_DWORD *)(v62 + 12 * v42 + 4);
        double v76 = (v69 * ((double)v72 - v67) + ((double)*(unint64_t *)&v71 - v66) * v68) / v70;
        if (v76 <= 0.0)
        {
          uint64_t v74 = *(void *)v63;
          int v75 = v63[2];
          goto LABEL_50;
        }
        if (v76 < 1.0)
        {
          double v67 = v67 + v76 * v69;
          LODWORD(v80) = llround(v66 + v76 * v68);
          HIDWORD(v80) = llround(v67);
          int v77 = *(_DWORD *)(v62 + 12 * v15 + 8);
          if (v77 != 0x7FFFFFFF)
          {
            int v78 = *(_DWORD *)(v62 + 12 * v16 + 8);
            if (v78 != 0x7FFFFFFF)
            {
              double v67 = (double)v77 + v76 * (double)(v78 - v77);
              int v81 = (int)v67;
            }
          }
          goto LABEL_51;
        }
      }
      uint64_t v74 = *(void *)v64;
      int v75 = v64[2];
LABEL_50:
      int v81 = v75;
      uint64_t v80 = v74;
LABEL_51:
      maps::path_codec::great_circle_distance_in_m(v65, (const maps::path_codec::Coordinate *)&v80, (const maps::path_codec::Coordinate *)1, v67);
      if (v36 >= v39) {
        return maps::path_codec::compute_bearing((maps::path_codec *)(*a1 + 12 * v15), (const maps::path_codec::Coordinate *)(*a1 + 12 * v38), v32, v36, v33, v34);
      }
      v38 += v23;
      unsigned int v79 = (unsigned __int16)maps::path_codec::compute_bearing((maps::path_codec *)(*a1 + 12 * v15), (const maps::path_codec::Coordinate *)(*a1 + 12 * v16), v32, v36, v33, v34);
      if (v79 < v37)
      {
        unsigned __int16 v37 = v79;
        uint64_t v41 = v16;
      }
      if (v79 > v43)
      {
        unsigned __int16 v43 = v79;
        uint64_t v42 = v16;
      }
      v16 += v23;
      uint64_t v40 = -v23;
      if (v16 == v23) {
        goto LABEL_57;
      }
    }
    uint64_t v59 = *(void *)v46;
    int v60 = v46[2];
LABEL_36:
    int v81 = v60;
    uint64_t v80 = v59;
    goto LABEL_37;
  }
LABEL_57:
  uint64_t v38 = 0;
  return maps::path_codec::compute_bearing((maps::path_codec *)(*a1 + 12 * v15), (const maps::path_codec::Coordinate *)(*a1 + 12 * v38), v32, v36, v33, v34);
}

uint64_t maps::path_codec::RoadProperties::RoadProperties(uint64_t a1, __int16 a2, __int16 a3, int a4, uint64_t a5, char a6, long long *a7)
{
  *(_WORD *)a1 = a2;
  *(_WORD *)(a1 + 2) = a3;
  *(_DWORD *)(a1 + 4) = a4;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a5;
  *(void *)(a1 + 24) = *(void *)(a5 + 16);
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  *(_DWORD *)(a1 + 32) = 23593320;
  *(unsigned char *)(a1 + 36) = a6;
  uint64_t v8 = (std::string *)(a1 + 40);
  if (*((char *)a7 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a7, *((void *)a7 + 1));
  }
  else
  {
    long long v9 = *a7;
    v8->__r_.__value_.__r.__words[2] = *((void *)a7 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  return a1;
}

void sub_189092B08(_Unwind_Exception *exception_object)
{
  int8x8_t v3 = v2;
  uint8x8_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 16) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t geo::WriteBitstream::flag(void ***this, uint64_t a2)
{
  unint64_t v4 = *this;
  uint64_t v5 = *((unsigned int *)*this + 6);
  if (((v5 + 1) & 7) != 0) {
    unint64_t v6 = ((unint64_t)(v5 + 1) >> 3) + 1;
  }
  else {
    unint64_t v6 = (unint64_t)(v5 + 1) >> 3;
  }
  uint64_t v8 = (char *)*v4;
  uint64_t v7 = (char *)v4[1];
  unint64_t v9 = v7 - (unsigned char *)*v4;
  if (v9 < v6)
  {
    unint64_t v10 = 2 * v9 + 2;
    size_t v11 = v10 - v9;
    if (v10 <= v9)
    {
      if (v10 < v9) {
        v4[1] = &v8[v10];
      }
      goto LABEL_35;
    }
    uint64_t v12 = v4[2];
    if (v12 - v7 >= v11)
    {
      bzero(v4[1], v10 - v9);
      v4[1] = &v7[v11];
LABEL_35:
      bzero((char *)**this + v9, (unsigned char *)(*this)[1] - ((unsigned char *)**this + v9));
      LODWORD(v5) = *((_DWORD *)*this + 6);
      uint64_t v8 = (char *)**this;
      goto LABEL_36;
    }
    unint64_t v13 = v12 - v8;
    uint64_t v14 = 2 * v13;
    if (2 * v13 <= v10) {
      uint64_t v14 = 2 * v9 + 2;
    }
    if (v13 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v14;
    }
    uint64_t v16 = operator new(v15);
    float v17 = (char *)v16 + v15;
    unsigned __int16 v31 = (char *)v16 + v10;
    double v18 = (char *)v16 + v9;
    bzero((char *)v16 + v9, v11);
    if (v7 == v8)
    {
      uint64_t v16 = (char *)v16 + v9;
      goto LABEL_33;
    }
    if (v9 >= 8 && (unint64_t)(v8 - (unsigned char *)v16) >= 0x20)
    {
      if (v9 < 0x20)
      {
        unint64_t v19 = 0;
        goto LABEL_25;
      }
      unint64_t v19 = v9 & 0xFFFFFFFFFFFFFFE0;
      int v20 = v7 - 16;
      double v21 = (char *)v16 + v7 - 16 - v8;
      unint64_t v22 = v9 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v23 = *(_OWORD *)v20;
        *((_OWORD *)v21 - 1) = *((_OWORD *)v20 - 1);
        *(_OWORD *)double v21 = v23;
        v21 -= 32;
        v20 -= 32;
        v22 -= 32;
      }
      while (v22);
      if (v9 == v19) {
        goto LABEL_32;
      }
      if ((v9 & 0x18) != 0)
      {
LABEL_25:
        v18 -= v9 & 0xFFFFFFFFFFFFFFF8;
        id v24 = &v7[-v19 - 8];
        uint64_t v25 = (char *)(v24 - v8);
        unint64_t v26 = v19 - (v9 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v27 = *(void *)v24;
          v24 -= 8;
          *(void *)&v25[(void)v16] = v27;
          v25 -= 8;
          v26 += 8;
        }
        while (v26);
        v7 -= v9 & 0xFFFFFFFFFFFFFFF8;
        if (v9 == (v9 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_32;
        }
        goto LABEL_30;
      }
      v18 -= v19;
      v7 -= v19;
    }
LABEL_30:
    int v28 = v18 - 1;
    do
    {
      char v29 = *--v7;
      *v28-- = v29;
    }
    while (v7 != v8);
LABEL_32:
    uint64_t v7 = v8;
LABEL_33:
    *unint64_t v4 = v16;
    v4[1] = v31;
    v4[2] = v17;
    if (v7) {
      operator delete(v7);
    }
    goto LABEL_35;
  }
LABEL_36:
  v8[(unint64_t)v5 >> 3] |= a2 << (~(_BYTE)v5 & 7);
  ++*((_DWORD *)*this + 6);
  return a2;
}

void _GEOPDWifiMeasurementCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v2 = *(id *)(a1 + 40);
  uint64_t v3 = [v2 countByEnumeratingWithState:&v15 objects:v20 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v16;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v16 != v5) {
          objc_enumerationMutation(v2);
        }
        [*(id *)(*((void *)&v15 + 1) + 8 * v6++) readAll:1];
      }
      while (v4 != v6);
      uint64_t v4 = [v2 countByEnumeratingWithState:&v15 objects:v20 count:16];
    }
    while (v4);
  }

  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v7 = *(id *)(a1 + 48);
  uint64_t v8 = [v7 countByEnumeratingWithState:&v11 objects:v19 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v12;
    while (1)
    {
      if (*(void *)v12 != v10) {
        objc_enumerationMutation(v7);
      }
      if (!--v9)
      {
        uint64_t v9 = [v7 countByEnumeratingWithState:&v11 objects:v19 count:16];
        if (!v9) {
          break;
        }
      }
    }
  }
}

void _GEOPDTransitPaymentMethodInfoCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v2 = *(id *)(a1 + 32);
  uint64_t v3 = [v2 countByEnumeratingWithState:&v16 objects:v21 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v17;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v17 != v5) {
          objc_enumerationMutation(v2);
        }
        [*(id *)(*((void *)&v16 + 1) + 8 * v6++) readAll:1];
      }
      while (v4 != v6);
      uint64_t v4 = [v2 countByEnumeratingWithState:&v16 objects:v21 count:16];
    }
    while (v4);
  }

  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v7 = *(id *)(a1 + 40);
  uint64_t v8 = [v7 countByEnumeratingWithState:&v12 objects:v20 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v13;
    do
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v13 != v10) {
          objc_enumerationMutation(v7);
        }
        objc_msgSend(*(id *)(*((void *)&v12 + 1) + 8 * v11++), "readAll:", 1, (void)v12);
      }
      while (v9 != v11);
      uint64_t v9 = [v7 countByEnumeratingWithState:&v12 objects:v20 count:16];
    }
    while (v9);
  }
}

uint64_t _GEOPDTransitInfoSnippetCallReadAllRecursiveWithoutSynchronized(id *a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v2 = a1[3];
  uint64_t v3 = [v2 countByEnumeratingWithState:&v17 objects:v22 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v18;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v18 != v5) {
          objc_enumerationMutation(v2);
        }
        [*(id *)(*((void *)&v17 + 1) + 8 * v6++) readAll:1];
      }
      while (v4 != v6);
      uint64_t v4 = [v2 countByEnumeratingWithState:&v17 objects:v22 count:16];
    }
    while (v4);
  }

  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v7 = a1[4];
  uint64_t v8 = [v7 countByEnumeratingWithState:&v13 objects:v21 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v14;
    do
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v14 != v10) {
          objc_enumerationMutation(v7);
        }
        objc_msgSend(*(id *)(*((void *)&v13 + 1) + 8 * v11++), "readAll:", 1, (void)v13);
      }
      while (v9 != v11);
      uint64_t v9 = [v7 countByEnumeratingWithState:&v13 objects:v21 count:16];
    }
    while (v9);
  }

  [a1[6] readAll:1];
  return [a1[7] readAll:1];
}

void _GEOPDLocalizedQueryUnderstandingTaxonomyResultItemBrandCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  [*(id *)(a1 + 128) readAll:1];
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v2 = *(id *)(a1 + 112);
  uint64_t v3 = [v2 countByEnumeratingWithState:&v16 objects:v21 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v17;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v17 != v5) {
          objc_enumerationMutation(v2);
        }
        -[GEOPDIconMapping readAll:](*(void *)(*((void *)&v16 + 1) + 8 * v6++), 1);
      }
      while (v4 != v6);
      uint64_t v4 = [v2 countByEnumeratingWithState:&v16 objects:v21 count:16];
    }
    while (v4);
  }

  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v7 = *(id *)(a1 + 88);
  uint64_t v8 = [v7 countByEnumeratingWithState:&v12 objects:v20 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v13;
    do
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v13 != v10) {
          objc_enumerationMutation(v7);
        }
        -[GEOPDIconMapping readAll:](*(void *)(*((void *)&v12 + 1) + 8 * v11++), 1);
      }
      while (v9 != v11);
      uint64_t v9 = [v7 countByEnumeratingWithState:&v12 objects:v20 count:16];
    }
    while (v9);
  }

  -[GEOPDBusinessConnectAttributes readAll:](*(void *)(a1 + 64), 1);
}

void _GEOPDAllCollectionsViewResultCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v2 = *(id *)(a1 + 40);
  uint64_t v3 = [v2 countByEnumeratingWithState:&v16 objects:v21 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v17;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v17 != v5) {
          objc_enumerationMutation(v2);
        }
        -[GEOPDAllCollectionsViewResultFilter readAll:](*(void *)(*((void *)&v16 + 1) + 8 * v6++), 1);
      }
      while (v4 != v6);
      uint64_t v4 = [v2 countByEnumeratingWithState:&v16 objects:v21 count:16];
    }
    while (v4);
  }

  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v7 = *(id *)(a1 + 24);
  uint64_t v8 = [v7 countByEnumeratingWithState:&v12 objects:v20 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v13;
    do
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v13 != v10) {
          objc_enumerationMutation(v7);
        }
        objc_msgSend(*(id *)(*((void *)&v12 + 1) + 8 * v11++), "readAll:", 1, (void)v12);
      }
      while (v9 != v11);
      uint64_t v9 = [v7 countByEnumeratingWithState:&v12 objects:v20 count:16];
    }
    while (v9);
  }
}

uint64_t _GEOPDAllCollectionsViewParametersIsDirty(uint64_t a1)
{
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  unsigned int v2 = *(unsigned __int8 *)(a1 + 64);
  if ((v2 & 0x24) != 0) {
    return 1;
  }
  if ((v2 & 8) != 0)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4)
    {
      os_unfair_lock_lock_with_options();
      os_unfair_lock_assert_owner((const os_unfair_lock *)(v4 + 48));
      int v5 = *(unsigned char *)(v4 + 56) & 0x1C;
      os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 48));
      if (v5) {
        return 1;
      }
      unsigned int v2 = *(unsigned __int8 *)(a1 + 64);
    }
  }
  return (v2 >> 4) & 1;
}

uint64_t _GEOPBTransitIncidentCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v2 = *(id *)(a1 + 24);
  uint64_t v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v8;
    while (1)
    {
      if (*(void *)v8 != v5) {
        objc_enumerationMutation(v2);
      }
      if (!--v4)
      {
        uint64_t v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
        if (!v4) {
          break;
        }
      }
    }
  }

  return objc_msgSend(*(id *)(a1 + 40), "readAll:", 1, v7);
}

void _GEOLogMsgEventDailyUseSummaryCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v1 = *(id *)(a1 + 40);
  uint64_t v2 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v7;
    do
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v7 != v4) {
          objc_enumerationMutation(v1);
        }
        objc_msgSend(*(id *)(*((void *)&v6 + 1) + 8 * v5++), "readAll:", 1, (void)v6);
      }
      while (v3 != v5);
      uint64_t v3 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
    }
    while (v3);
  }
}

uint64_t _GEOETAResponseIsDirty(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 120));
  __int16 v2 = *(_WORD *)(a1 + 128);
  if ((v2 & 0x900) != 0) {
    return 1;
  }
  if ((*(_WORD *)(a1 + 128) & 0x200) != 0)
  {
    if (GEOPlaceSearchResponseIsDirty(*(os_unfair_lock_s **)(a1 + 96))) {
      return 1;
    }
    __int16 v2 = *(_WORD *)(a1 + 128);
  }
  if ((v2 & 4) == 0)
  {
    if ((v2 & 0x80) != 0)
    {
      if (GEOETAResultIsDirty(*(os_unfair_lock_s **)(a1 + 80))) {
        return 1;
      }
      __int16 v2 = *(_WORD *)(a1 + 128);
    }
    if ((v2 & 0x478) == 0)
    {
      if ((v2 & 0x100) != 0)
      {
        long long v18 = 0u;
        long long v19 = 0u;
        long long v16 = 0u;
        long long v17 = 0u;
        id v5 = *(id *)(a1 + 88);
        uint64_t v6 = [v5 countByEnumeratingWithState:&v16 objects:v21 count:16];
        if (v6)
        {
          uint64_t v7 = v6;
          uint64_t v8 = *(void *)v17;
LABEL_15:
          uint64_t v9 = 0;
          while (1)
          {
            if (*(void *)v17 != v8) {
              objc_enumerationMutation(v5);
            }
            if (GEOETAResultIsDirty(*(os_unfair_lock_s **)(*((void *)&v16 + 1) + 8 * v9))) {
              goto LABEL_33;
            }
            if (v7 == ++v9)
            {
              uint64_t v7 = [v5 countByEnumeratingWithState:&v16 objects:v21 count:16];
              if (v7) {
                goto LABEL_15;
              }
              break;
            }
          }
        }

        __int16 v2 = *(_WORD *)(a1 + 128);
      }
      if ((v2 & 0x40) == 0) {
        return 0;
      }
      long long v14 = 0u;
      long long v15 = 0u;
      long long v12 = 0u;
      long long v13 = 0u;
      id v5 = *(id *)(a1 + 72);
      uint64_t v3 = [v5 countByEnumeratingWithState:&v12 objects:v20 count:16];
      if (!v3)
      {
LABEL_34:

        return v3;
      }
      uint64_t v10 = *(void *)v13;
LABEL_26:
      uint64_t v11 = 0;
      while (1)
      {
        if (*(void *)v13 != v10) {
          objc_enumerationMutation(v5);
        }
        if (GEOETAResultIsDirty(*(os_unfair_lock_s **)(*((void *)&v12 + 1) + 8 * v11))) {
          break;
        }
        if (v3 == ++v11)
        {
          uint64_t v3 = [v5 countByEnumeratingWithState:&v12 objects:v20 count:16];
          if (v3) {
            goto LABEL_26;
          }
          goto LABEL_34;
        }
      }
LABEL_33:
      uint64_t v3 = 1;
      goto LABEL_34;
    }
  }
  return 1;
}

uint64_t MapsFeature_IsEnabled_PedestrianAR()
{
  return GEOConfigGetBOOL(MapsFeaturesConfig_PedestrianAREnabled, (uint64_t)off_1E9111CF8);
}

uint64_t MapsFeature_IsAvailable_PedestrianAR()
{
  return 1;
}

BOOL GEOTFTrafficSnapshotIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  __int16 v2 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] >= *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
LABEL_559:
    BOOL v301 = a1[*v4] == 0;
    PBReaderRecallMark();
    return v301;
  }
  id v5 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (a1[*v4]) {
      goto LABEL_559;
    }
    char v6 = 0;
    unsigned int v7 = 0;
    unint64_t v8 = 0;
    while (1)
    {
      uint64_t v9 = *v2;
      uint64_t v10 = *(void *)&a1[v9];
      unint64_t v11 = v10 + 1;
      if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
        break;
      }
      char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
      *(void *)&a1[v9] = v11;
      v8 |= (unint64_t)(v12 & 0x7F) << v6;
      if ((v12 & 0x80) == 0) {
        goto LABEL_12;
      }
      v6 += 7;
      BOOL v13 = v7++ >= 9;
      if (v13)
      {
        unint64_t v8 = 0;
        int v14 = a1[*v4];
        goto LABEL_14;
      }
    }
    a1[*v4] = 1;
LABEL_12:
    int v14 = a1[*v4];
    if (a1[*v4]) {
      unint64_t v8 = 0;
    }
LABEL_14:
    int v15 = v8 & 7;
    if (v14 || v15 == 4) {
      goto LABEL_559;
    }
    switch((v8 >> 3))
    {
      case 1u:
        if (v15 == 2) {
          goto LABEL_550;
        }
        goto LABEL_562;
      case 2u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_562;
        }
        objc_msgSend(a1, "position", 0, 0);
        [a1 length];
LABEL_24:
        while (2)
        {
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
            goto LABEL_547;
          }
          char v17 = 0;
          unsigned int v18 = 0;
          unint64_t v19 = 0;
          while (2)
          {
            uint64_t v20 = *v2;
            uint64_t v21 = *(void *)&a1[v20];
            unint64_t v22 = v21 + 1;
            if (v21 == -1 || v22 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              char v23 = *(unsigned char *)(*(void *)&a1[*v5] + v21);
              *(void *)&a1[v20] = v22;
              v19 |= (unint64_t)(v23 & 0x7F) << v17;
              if (v23 < 0)
              {
                v17 += 7;
                BOOL v13 = v18++ >= 9;
                if (v13)
                {
                  unint64_t v19 = 0;
                  uint64_t v24 = *v4;
                  int v25 = a1[v24];
                  goto LABEL_36;
                }
                continue;
              }
            }
            break;
          }
          uint64_t v24 = *v4;
          int v25 = a1[v24];
          if (a1[v24]) {
            unint64_t v19 = 0;
          }
LABEL_36:
          int v26 = v19 & 7;
          if (v25) {
            BOOL v27 = 1;
          }
          else {
            BOOL v27 = v26 == 4;
          }
          if (v27) {
            goto LABEL_547;
          }
          switch((v19 >> 3))
          {
            case 1u:
              if ((v19 & 7) != 0) {
                goto LABEL_561;
              }
              unsigned int v32 = 0;
              while (1)
              {
                uint64_t v33 = *v2;
                uint64_t v34 = *(void *)&a1[v33];
                unint64_t v35 = v34 + 1;
                if (v34 == -1 || v35 > *(void *)&a1[*v3]) {
                  goto LABEL_228;
                }
                int v36 = *(char *)(*(void *)&a1[*v5] + v34);
                *(void *)&a1[v33] = v35;
                if (v36 < 0)
                {
                  BOOL v37 = v32++ > 8;
                  if (!v37) {
                    continue;
                  }
                }
                goto LABEL_24;
              }
            case 2u:
              if (v26 == 2)
              {
                if (PBReaderPlaceMark())
                {
LABEL_236:
                  while (*(void *)&a1[*v2] < *(void *)&a1[*v3])
                  {
                    unsigned int v134 = a1[*v4];
                    if (a1[*v4]) {
                      break;
                    }
                    while (1)
                    {
                      uint64_t v135 = *v2;
                      uint64_t v136 = *(void *)&a1[v135];
                      unint64_t v137 = v136 + 1;
                      if (v136 == -1 || v137 > *(void *)&a1[*v3]) {
                        break;
                      }
                      int v138 = *(char *)(*(void *)&a1[*v5] + v136);
                      *(void *)&a1[v135] = v137;
                      if (v138 < 0)
                      {
                        BOOL v13 = v134++ >= 9;
                        if (!v13) {
                          continue;
                        }
                      }
                      goto LABEL_236;
                    }
                    a1[*v4] = 1;
                  }
LABEL_245:
                  PBReaderRecallMark();
                  continue;
                }
              }
              else if ((v19 & 7) == 0)
              {
                while (1)
                {
                  uint64_t v38 = *v2;
                  uint64_t v39 = *(void *)&a1[v38];
                  unint64_t v40 = v39 + 1;
                  if (v39 == -1 || v40 > *(void *)&a1[*v3]) {
                    break;
                  }
                  int v41 = *(char *)(*(void *)&a1[*v5] + v39);
                  *(void *)&a1[v38] = v40;
                  if (v41 < 0)
                  {
                    unsigned int v42 = v26++;
                    if (v42 <= 8) {
                      continue;
                    }
                  }
                  goto LABEL_24;
                }
LABEL_228:
                uint64_t v24 = *v4;
LABEL_229:
                a1[v24] = 1;
                continue;
              }
              break;
            case 3u:
              if (v26 != 2 || !PBReaderPlaceMark()) {
                goto LABEL_561;
              }
              [a1 position];
              [a1 length];
              while (2)
              {
                if (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
                {
                  char v43 = 0;
                  unsigned int v44 = 0;
                  unint64_t v45 = 0;
                  while (1)
                  {
                    uint64_t v46 = *v2;
                    uint64_t v47 = *(void *)&a1[v46];
                    unint64_t v48 = v47 + 1;
                    if (v47 == -1 || v48 > *(void *)&a1[*v3]) {
                      break;
                    }
                    char v49 = *(unsigned char *)(*(void *)&a1[*v5] + v47);
                    *(void *)&a1[v46] = v48;
                    v45 |= (unint64_t)(v49 & 0x7F) << v43;
                    if ((v49 & 0x80) == 0) {
                      goto LABEL_77;
                    }
                    v43 += 7;
                    BOOL v13 = v44++ >= 9;
                    if (v13)
                    {
                      unint64_t v45 = 0;
                      int v50 = a1[*v4];
                      goto LABEL_79;
                    }
                  }
                  a1[*v4] = 1;
LABEL_77:
                  int v50 = a1[*v4];
                  if (a1[*v4]) {
                    unint64_t v45 = 0;
                  }
LABEL_79:
                  int v51 = v45 & 7;
                  if (!v50 && v51 != 4)
                  {
                    if ((v45 >> 3) == 101)
                    {
                      if (v51 != 2) {
                        goto LABEL_560;
                      }
                    }
                    else
                    {
                      if ((v45 >> 3) != 100)
                      {
                        if (!PBReaderSkipValueWithTag()) {
                          goto LABEL_560;
                        }
                        continue;
                      }
                      if (v51 != 2) {
                        goto LABEL_560;
                      }
                    }
                    if ((PBReaderSkipValueWithTag() & 1) == 0) {
                      goto LABEL_560;
                    }
                    continue;
                  }
                }
                break;
              }
              int v133 = a1[*v4];
              PBReaderRecallMark();
              if (!v133) {
                goto LABEL_245;
              }
              goto LABEL_561;
            case 4u:
              if (v26 != 2) {
                goto LABEL_561;
              }
              goto LABEL_231;
            case 5u:
            case 6u:
            case 0x13u:
            case 0x14u:
              if (v26 != 1) {
                goto LABEL_561;
              }
              uint64_t v28 = *v2;
              unint64_t v29 = *(void *)&a1[v28];
              if (v29 > 0xFFFFFFFFFFFFFFF7) {
                goto LABEL_229;
              }
              unint64_t v30 = v29 + 8;
              goto LABEL_47;
            case 8u:
              if ((v19 & 7) != 0) {
                goto LABEL_561;
              }
              unsigned int v53 = 0;
              while (1)
              {
                uint64_t v54 = *v2;
                uint64_t v55 = *(void *)&a1[v54];
                unint64_t v56 = v55 + 1;
                if (v55 == -1 || v56 > *(void *)&a1[*v3]) {
                  goto LABEL_228;
                }
                int v57 = *(char *)(*(void *)&a1[*v5] + v55);
                *(void *)&a1[v54] = v56;
                if (v57 < 0)
                {
                  BOOL v37 = v53++ > 8;
                  if (!v37) {
                    continue;
                  }
                }
                goto LABEL_24;
              }
            case 0xAu:
              if ((v19 & 7) != 0) {
                goto LABEL_561;
              }
              unsigned int v58 = 0;
              while (1)
              {
                uint64_t v59 = *v2;
                uint64_t v60 = *(void *)&a1[v59];
                unint64_t v61 = v60 + 1;
                if (v60 == -1 || v61 > *(void *)&a1[*v3]) {
                  goto LABEL_228;
                }
                int v62 = *(char *)(*(void *)&a1[*v5] + v60);
                *(void *)&a1[v59] = v61;
                if (v62 < 0)
                {
                  BOOL v37 = v58++ > 8;
                  if (!v37) {
                    continue;
                  }
                }
                goto LABEL_24;
              }
            case 0xBu:
              if ((v19 & 7) != 0) {
                goto LABEL_561;
              }
              unsigned int v63 = 0;
              while (1)
              {
                uint64_t v64 = *v2;
                uint64_t v65 = *(void *)&a1[v64];
                unint64_t v66 = v65 + 1;
                if (v65 == -1 || v66 > *(void *)&a1[*v3]) {
                  goto LABEL_228;
                }
                int v67 = *(char *)(*(void *)&a1[*v5] + v65);
                *(void *)&a1[v64] = v66;
                if (v67 < 0)
                {
                  BOOL v37 = v63++ > 8;
                  if (!v37) {
                    continue;
                  }
                }
                goto LABEL_24;
              }
            case 0xCu:
              if (v26 != 2) {
                goto LABEL_561;
              }
              goto LABEL_231;
            case 0xDu:
              if (v26 != 2) {
                goto LABEL_561;
              }
              goto LABEL_231;
            case 0xEu:
              if ((v19 & 7) != 0) {
                goto LABEL_561;
              }
              unsigned int v68 = 0;
              while (1)
              {
                uint64_t v69 = *v2;
                uint64_t v70 = *(void *)&a1[v69];
                unint64_t v71 = v70 + 1;
                if (v70 == -1 || v71 > *(void *)&a1[*v3]) {
                  goto LABEL_228;
                }
                int v72 = *(char *)(*(void *)&a1[*v5] + v70);
                *(void *)&a1[v69] = v71;
                if (v72 < 0)
                {
                  BOOL v37 = v68++ > 8;
                  if (!v37) {
                    continue;
                  }
                }
                goto LABEL_24;
              }
            case 0x10u:
              if ((v19 & 7) != 0) {
                goto LABEL_561;
              }
              unsigned int v73 = 0;
              while (1)
              {
                uint64_t v74 = *v2;
                uint64_t v75 = *(void *)&a1[v74];
                unint64_t v76 = v75 + 1;
                if (v75 == -1 || v76 > *(void *)&a1[*v3]) {
                  goto LABEL_228;
                }
                int v77 = *(char *)(*(void *)&a1[*v5] + v75);
                *(void *)&a1[v74] = v76;
                if (v77 < 0)
                {
                  BOOL v37 = v73++ > 8;
                  if (!v37) {
                    continue;
                  }
                }
                goto LABEL_24;
              }
            case 0x11u:
              if ((v19 & 7) != 0) {
                goto LABEL_561;
              }
              unsigned int v78 = 0;
              while (1)
              {
                uint64_t v79 = *v2;
                uint64_t v80 = *(void *)&a1[v79];
                unint64_t v81 = v80 + 1;
                if (v80 == -1 || v81 > *(void *)&a1[*v3]) {
                  goto LABEL_228;
                }
                int v82 = *(char *)(*(void *)&a1[*v5] + v80);
                *(void *)&a1[v79] = v81;
                if (v82 < 0)
                {
                  BOOL v37 = v78++ > 8;
                  if (!v37) {
                    continue;
                  }
                }
                goto LABEL_24;
              }
            case 0x12u:
              if ((v19 & 7) != 0) {
                goto LABEL_561;
              }
              unsigned int v83 = 0;
              while (1)
              {
                uint64_t v84 = *v2;
                uint64_t v85 = *(void *)&a1[v84];
                unint64_t v86 = v85 + 1;
                if (v85 == -1 || v86 > *(void *)&a1[*v3]) {
                  goto LABEL_228;
                }
                int v87 = *(char *)(*(void *)&a1[*v5] + v85);
                *(void *)&a1[v84] = v86;
                if (v87 < 0)
                {
                  BOOL v37 = v83++ > 8;
                  if (!v37) {
                    continue;
                  }
                }
                goto LABEL_24;
              }
            case 0x15u:
            case 0x19u:
              if (v26 != 5) {
                goto LABEL_561;
              }
              uint64_t v28 = *v2;
              unint64_t v31 = *(void *)&a1[v28];
              if (v31 > 0xFFFFFFFFFFFFFFFBLL) {
                goto LABEL_229;
              }
              unint64_t v30 = v31 + 4;
LABEL_47:
              if (v30 > *(void *)&a1[*v3]) {
                goto LABEL_229;
              }
              *(void *)&a1[v28] = v30;
              continue;
            case 0x16u:
              if ((v19 & 7) != 0) {
                goto LABEL_561;
              }
              unsigned int v88 = 0;
              while (1)
              {
                uint64_t v89 = *v2;
                uint64_t v90 = *(void *)&a1[v89];
                unint64_t v91 = v90 + 1;
                if (v90 == -1 || v91 > *(void *)&a1[*v3]) {
                  goto LABEL_228;
                }
                int v92 = *(char *)(*(void *)&a1[*v5] + v90);
                *(void *)&a1[v89] = v91;
                if (v92 < 0)
                {
                  BOOL v37 = v88++ > 8;
                  if (!v37) {
                    continue;
                  }
                }
                goto LABEL_24;
              }
            case 0x17u:
              if ((v19 & 7) != 0) {
                goto LABEL_561;
              }
              unsigned int v93 = 0;
              while (1)
              {
                uint64_t v94 = *v2;
                uint64_t v95 = *(void *)&a1[v94];
                unint64_t v96 = v95 + 1;
                if (v95 == -1 || v96 > *(void *)&a1[*v3]) {
                  goto LABEL_228;
                }
                int v97 = *(char *)(*(void *)&a1[*v5] + v95);
                *(void *)&a1[v94] = v96;
                if (v97 < 0)
                {
                  BOOL v37 = v93++ > 8;
                  if (!v37) {
                    continue;
                  }
                }
                goto LABEL_24;
              }
            case 0x18u:
              if ((v19 & 7) != 0) {
                goto LABEL_561;
              }
              unsigned int v98 = 0;
              while (1)
              {
                uint64_t v99 = *v2;
                uint64_t v100 = *(void *)&a1[v99];
                unint64_t v101 = v100 + 1;
                if (v100 == -1 || v101 > *(void *)&a1[*v3]) {
                  goto LABEL_228;
                }
                int v102 = *(char *)(*(void *)&a1[*v5] + v100);
                *(void *)&a1[v99] = v101;
                if (v102 < 0)
                {
                  BOOL v37 = v98++ > 8;
                  if (!v37) {
                    continue;
                  }
                }
                goto LABEL_24;
              }
            case 0x1Au:
              if ((v19 & 7) != 0) {
                goto LABEL_561;
              }
              unsigned int v103 = 0;
              while (1)
              {
                uint64_t v104 = *v2;
                uint64_t v105 = *(void *)&a1[v104];
                unint64_t v106 = v105 + 1;
                if (v105 == -1 || v106 > *(void *)&a1[*v3]) {
                  goto LABEL_228;
                }
                int v107 = *(char *)(*(void *)&a1[*v5] + v105);
                *(void *)&a1[v104] = v106;
                if (v107 < 0)
                {
                  BOOL v37 = v103++ > 8;
                  if (!v37) {
                    continue;
                  }
                }
                goto LABEL_24;
              }
            case 0x1Bu:
              if ((v19 & 7) != 0) {
                goto LABEL_561;
              }
              unsigned int v108 = 0;
              while (1)
              {
                uint64_t v109 = *v2;
                uint64_t v110 = *(void *)&a1[v109];
                unint64_t v111 = v110 + 1;
                if (v110 == -1 || v111 > *(void *)&a1[*v3]) {
                  goto LABEL_228;
                }
                int v112 = *(char *)(*(void *)&a1[*v5] + v110);
                *(void *)&a1[v109] = v111;
                if (v112 < 0)
                {
                  BOOL v37 = v108++ > 8;
                  if (!v37) {
                    continue;
                  }
                }
                goto LABEL_24;
              }
            case 0x1Cu:
              if ((v19 & 7) != 0) {
                goto LABEL_561;
              }
              unsigned int v113 = 0;
              while (1)
              {
                uint64_t v114 = *v2;
                uint64_t v115 = *(void *)&a1[v114];
                unint64_t v116 = v115 + 1;
                if (v115 == -1 || v116 > *(void *)&a1[*v3]) {
                  goto LABEL_228;
                }
                int v117 = *(char *)(*(void *)&a1[*v5] + v115);
                *(void *)&a1[v114] = v116;
                if (v117 < 0)
                {
                  BOOL v37 = v113++ > 8;
                  if (!v37) {
                    continue;
                  }
                }
                goto LABEL_24;
              }
            case 0x1Du:
              if ((v19 & 7) != 0) {
                goto LABEL_561;
              }
              unsigned int v118 = 0;
              while (1)
              {
                uint64_t v119 = *v2;
                uint64_t v120 = *(void *)&a1[v119];
                unint64_t v121 = v120 + 1;
                if (v120 == -1 || v121 > *(void *)&a1[*v3]) {
                  goto LABEL_228;
                }
                int v122 = *(char *)(*(void *)&a1[*v5] + v120);
                *(void *)&a1[v119] = v121;
                if (v122 < 0)
                {
                  BOOL v37 = v118++ > 8;
                  if (!v37) {
                    continue;
                  }
                }
                goto LABEL_24;
              }
            case 0x1Eu:
              if (v26 != 2) {
                goto LABEL_561;
              }
              goto LABEL_231;
            case 0x1Fu:
              if ((v19 & 7) != 0) {
                goto LABEL_561;
              }
              unsigned int v123 = 0;
              while (1)
              {
                uint64_t v124 = *v2;
                uint64_t v125 = *(void *)&a1[v124];
                unint64_t v126 = v125 + 1;
                if (v125 == -1 || v126 > *(void *)&a1[*v3]) {
                  goto LABEL_228;
                }
                int v127 = *(char *)(*(void *)&a1[*v5] + v125);
                *(void *)&a1[v124] = v126;
                if (v127 < 0)
                {
                  BOOL v37 = v123++ > 8;
                  if (!v37) {
                    continue;
                  }
                }
                goto LABEL_24;
              }
            case 0x20u:
              if ((v19 & 7) != 0) {
                goto LABEL_561;
              }
              unsigned int v128 = 0;
              while (1)
              {
                uint64_t v129 = *v2;
                uint64_t v130 = *(void *)&a1[v129];
                unint64_t v131 = v130 + 1;
                if (v130 == -1 || v131 > *(void *)&a1[*v3]) {
                  goto LABEL_228;
                }
                int v132 = *(char *)(*(void *)&a1[*v5] + v130);
                *(void *)&a1[v129] = v131;
                if (v132 < 0)
                {
                  BOOL v37 = v128++ > 8;
                  if (!v37) {
                    continue;
                  }
                }
                goto LABEL_24;
              }
            case 0x21u:
              if (v26 != 2) {
                goto LABEL_561;
              }
              goto LABEL_231;
            default:
LABEL_231:
              if ((PBReaderSkipValueWithTag() & 1) == 0) {
                goto LABEL_561;
              }
              continue;
          }
          goto LABEL_561;
        }
      case 3u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_562;
        }
        objc_msgSend(a1, "position", 0, 0);
        [a1 length];
        if (*(void *)&a1[*v2] >= *(void *)&a1[*v3])
        {
          int v139 = 0;
LABEL_553:
          int v299 = a1[*v4];
          PBReaderRecallMark();
          if (v299) {
            BOOL v300 = 1;
          }
          else {
            BOOL v300 = v139 == 0;
          }
          if (v300) {
            goto LABEL_562;
          }
LABEL_557:
          PBReaderRecallMark();
LABEL_558:
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
            goto LABEL_559;
          }
          continue;
        }
        int v139 = 0;
        while (2)
        {
          if (a1[*v4]) {
            goto LABEL_553;
          }
          char v140 = 0;
          unsigned int v141 = 0;
          unint64_t v142 = 0;
          while (1)
          {
            uint64_t v143 = *v2;
            uint64_t v144 = *(void *)&a1[v143];
            unint64_t v145 = v144 + 1;
            if (v144 == -1 || v145 > *(void *)&a1[*v3]) {
              break;
            }
            char v146 = *(unsigned char *)(*(void *)&a1[*v5] + v144);
            *(void *)&a1[v143] = v145;
            v142 |= (unint64_t)(v146 & 0x7F) << v140;
            if ((v146 & 0x80) == 0) {
              goto LABEL_259;
            }
            v140 += 7;
            BOOL v13 = v141++ >= 9;
            if (v13)
            {
              unint64_t v142 = 0;
              uint64_t v147 = *v4;
              int v148 = a1[v147];
              goto LABEL_261;
            }
          }
          a1[*v4] = 1;
LABEL_259:
          uint64_t v147 = *v4;
          int v148 = a1[v147];
          if (a1[v147]) {
            unint64_t v142 = 0;
          }
LABEL_261:
          int v149 = v142 & 7;
          if (v148 || v149 == 4) {
            goto LABEL_553;
          }
          switch((v142 >> 3))
          {
            case 1u:
              if (v139 || (v142 & 7) != 0) {
                goto LABEL_561;
              }
              unsigned int v154 = 0;
              while (1)
              {
                uint64_t v155 = *v2;
                uint64_t v156 = *(void *)&a1[v155];
                unint64_t v157 = v156 + 1;
                if (v156 == -1 || v157 > *(void *)&a1[*v3]) {
                  break;
                }
                int v158 = *(char *)(*(void *)&a1[*v5] + v156);
                *(void *)&a1[v155] = v157;
                int v139 = 1;
                if (v158 < 0)
                {
                  BOOL v37 = v154++ > 8;
                  if (!v37) {
                    continue;
                  }
                }
                goto LABEL_397;
              }
              int v139 = 1;
              a1[*v4] = 1;
              goto LABEL_397;
            case 3u:
            case 4u:
            case 0xBu:
              if (v149 == 5) {
                goto LABEL_267;
              }
              goto LABEL_561;
            case 5u:
              if ((v142 & 7) != 0) {
                goto LABEL_561;
              }
              unsigned int v159 = 0;
              while (1)
              {
                uint64_t v160 = *v2;
                uint64_t v161 = *(void *)&a1[v160];
                unint64_t v162 = v161 + 1;
                if (v161 == -1 || v162 > *(void *)&a1[*v3]) {
                  goto LABEL_378;
                }
                int v163 = *(char *)(*(void *)&a1[*v5] + v161);
                *(void *)&a1[v160] = v162;
                if (v163 < 0)
                {
                  BOOL v37 = v159++ > 8;
                  if (!v37) {
                    continue;
                  }
                }
                goto LABEL_397;
              }
            case 6u:
              if (v149 != 2 || !PBReaderPlaceMark()) {
                goto LABEL_561;
              }
              [a1 position];
              [a1 length];
LABEL_290:
              if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
                goto LABEL_383;
              }
              char v164 = 0;
              unsigned int v165 = 0;
              unint64_t v166 = 0;
              while (1)
              {
                uint64_t v167 = *v2;
                uint64_t v168 = *(void *)&a1[v167];
                unint64_t v169 = v168 + 1;
                if (v168 == -1 || v169 > *(void *)&a1[*v3]) {
                  break;
                }
                char v170 = *(unsigned char *)(*(void *)&a1[*v5] + v168);
                *(void *)&a1[v167] = v169;
                v166 |= (unint64_t)(v170 & 0x7F) << v164;
                if ((v170 & 0x80) == 0) {
                  goto LABEL_300;
                }
                v164 += 7;
                BOOL v13 = v165++ >= 9;
                if (v13)
                {
                  unint64_t v166 = 0;
                  int v171 = a1[*v4];
                  goto LABEL_302;
                }
              }
              a1[*v4] = 1;
LABEL_300:
              int v171 = a1[*v4];
              if (a1[*v4]) {
                unint64_t v166 = 0;
              }
LABEL_302:
              if (v171 || (v166 & 7) == 4)
              {
LABEL_383:
                int v213 = a1[*v4];
                PBReaderRecallMark();
                if (v213) {
                  goto LABEL_561;
                }
LABEL_396:
                PBReaderRecallMark();
LABEL_397:
                if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
                  goto LABEL_553;
                }
                continue;
              }
              if ((v166 >> 3) == 3)
              {
                if ((v166 & 7) == 0)
                {
                  unsigned int v178 = 0;
                  while (1)
                  {
                    uint64_t v179 = *v2;
                    uint64_t v180 = *(void *)&a1[v179];
                    unint64_t v181 = v180 + 1;
                    if (v180 == -1 || v181 > *(void *)&a1[*v3]) {
                      break;
                    }
                    int v182 = *(char *)(*(void *)&a1[*v5] + v180);
                    *(void *)&a1[v179] = v181;
                    if (v182 < 0)
                    {
                      BOOL v37 = v178++ > 8;
                      if (!v37) {
                        continue;
                      }
                    }
                    goto LABEL_290;
                  }
LABEL_324:
                  a1[*v4] = 1;
                  goto LABEL_290;
                }
              }
              else
              {
                if ((v166 >> 3) != 1)
                {
                  if ((PBReaderSkipValueWithTag() & 1) == 0) {
                    goto LABEL_560;
                  }
                  goto LABEL_290;
                }
                if ((v166 & 7) == 0)
                {
                  unsigned int v173 = 0;
                  while (1)
                  {
                    uint64_t v174 = *v2;
                    uint64_t v175 = *(void *)&a1[v174];
                    unint64_t v176 = v175 + 1;
                    if (v175 == -1 || v176 > *(void *)&a1[*v3]) {
                      goto LABEL_324;
                    }
                    int v177 = *(char *)(*(void *)&a1[*v5] + v175);
                    *(void *)&a1[v174] = v176;
                    if (v177 < 0)
                    {
                      BOOL v37 = v173++ > 8;
                      if (!v37) {
                        continue;
                      }
                    }
                    goto LABEL_290;
                  }
                }
              }
LABEL_560:
              PBReaderRecallMark();
LABEL_561:
              PBReaderRecallMark();
LABEL_562:
              PBReaderRecallMark();
              return 0;
            case 7u:
              if ((v142 & 7) != 0) {
                goto LABEL_561;
              }
              unsigned int v183 = 0;
              while (1)
              {
                uint64_t v184 = *v2;
                uint64_t v185 = *(void *)&a1[v184];
                unint64_t v186 = v185 + 1;
                if (v185 == -1 || v186 > *(void *)&a1[*v3]) {
                  goto LABEL_378;
                }
                int v187 = *(char *)(*(void *)&a1[*v5] + v185);
                *(void *)&a1[v184] = v186;
                if (v187 < 0)
                {
                  BOOL v37 = v183++ > 8;
                  if (!v37) {
                    continue;
                  }
                }
                goto LABEL_397;
              }
            case 8u:
              if ((v142 & 7) != 0) {
                goto LABEL_561;
              }
              unsigned int v188 = 0;
              while (1)
              {
                uint64_t v189 = *v2;
                uint64_t v190 = *(void *)&a1[v189];
                unint64_t v191 = v190 + 1;
                if (v190 == -1 || v191 > *(void *)&a1[*v3]) {
                  goto LABEL_378;
                }
                int v192 = *(char *)(*(void *)&a1[*v5] + v190);
                *(void *)&a1[v189] = v191;
                if (v192 < 0)
                {
                  BOOL v37 = v188++ > 8;
                  if (!v37) {
                    continue;
                  }
                }
                goto LABEL_397;
              }
            case 9u:
              if (v149 == 2) {
                goto LABEL_381;
              }
              goto LABEL_561;
            case 0xAu:
              if ((v142 & 7) != 0) {
                goto LABEL_561;
              }
              unsigned int v193 = 0;
              while (1)
              {
                uint64_t v194 = *v2;
                uint64_t v195 = *(void *)&a1[v194];
                unint64_t v196 = v195 + 1;
                if (v195 == -1 || v196 > *(void *)&a1[*v3]) {
                  goto LABEL_378;
                }
                int v197 = *(char *)(*(void *)&a1[*v5] + v195);
                *(void *)&a1[v194] = v196;
                if (v197 < 0)
                {
                  BOOL v37 = v193++ > 8;
                  if (!v37) {
                    continue;
                  }
                }
                goto LABEL_397;
              }
            case 0xCu:
              if (v149 == 5) {
                goto LABEL_267;
              }
              if (v149 != 2 || !PBReaderPlaceMark()) {
                goto LABEL_561;
              }
              while (1)
              {
                char v198 = (unint64_t *)&a1[*v2];
                unint64_t v199 = *v198;
                unint64_t v200 = *(void *)&a1[*v3];
                if (*v198 >= v200) {
                  break;
                }
                uint64_t v201 = *v4;
                if (a1[v201]) {
                  break;
                }
                if (v199 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t v202 = v199 + 4, v202 > v200)) {
                  a1[v201] = 1;
                }
                else {
                  *char v198 = v202;
                }
              }
              goto LABEL_396;
            case 0xDu:
              if (v149 == 5)
              {
LABEL_267:
                uint64_t v151 = *v2;
                unint64_t v152 = *(void *)&a1[v151];
                if (v152 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t v153 = v152 + 4, v153 > *(void *)&a1[*v3])) {
LABEL_379:
                }
                  a1[v147] = 1;
                else {
                  *(void *)&a1[v151] = v153;
                }
                goto LABEL_397;
              }
              if (v149 != 2 || !PBReaderPlaceMark()) {
                goto LABEL_561;
              }
              while (1)
              {
                unint64_t v203 = (unint64_t *)&a1[*v2];
                unint64_t v204 = *v203;
                unint64_t v205 = *(void *)&a1[*v3];
                if (*v203 >= v205) {
                  break;
                }
                uint64_t v206 = *v4;
                if (a1[v206]) {
                  break;
                }
                if (v204 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t v207 = v204 + 4, v207 > v205)) {
                  a1[v206] = 1;
                }
                else {
                  *unint64_t v203 = v207;
                }
              }
              goto LABEL_396;
            case 0xEu:
              if (v149 != 2)
              {
                if ((v142 & 7) != 0) {
                  goto LABEL_561;
                }
                while (1)
                {
                  uint64_t v208 = *v2;
                  uint64_t v209 = *(void *)&a1[v208];
                  unint64_t v210 = v209 + 1;
                  if (v209 == -1 || v210 > *(void *)&a1[*v3]) {
                    break;
                  }
                  int v211 = *(char *)(*(void *)&a1[*v5] + v209);
                  *(void *)&a1[v208] = v210;
                  if (v211 < 0)
                  {
                    unsigned int v212 = v149++;
                    if (v212 <= 8) {
                      continue;
                    }
                  }
                  goto LABEL_397;
                }
LABEL_378:
                uint64_t v147 = *v4;
                goto LABEL_379;
              }
              if (!PBReaderPlaceMark()) {
                goto LABEL_561;
              }
LABEL_387:
              while (*(void *)&a1[*v2] < *(void *)&a1[*v3])
              {
                unsigned int v214 = a1[*v4];
                if (a1[*v4]) {
                  break;
                }
                while (1)
                {
                  uint64_t v215 = *v2;
                  uint64_t v216 = *(void *)&a1[v215];
                  unint64_t v217 = v216 + 1;
                  if (v216 == -1 || v217 > *(void *)&a1[*v3]) {
                    break;
                  }
                  int v218 = *(char *)(*(void *)&a1[*v5] + v216);
                  *(void *)&a1[v215] = v217;
                  if (v218 < 0)
                  {
                    BOOL v13 = v214++ >= 9;
                    if (!v13) {
                      continue;
                    }
                  }
                  goto LABEL_387;
                }
                a1[*v4] = 1;
              }
              goto LABEL_396;
            case 0xFu:
              if (v149 == 2) {
                goto LABEL_381;
              }
              goto LABEL_561;
            default:
LABEL_381:
              if ((PBReaderSkipValueWithTag() & 1) == 0) {
                goto LABEL_561;
              }
              goto LABEL_397;
          }
        }
      case 4u:
        if ((v8 & 7) != 0) {
          goto LABEL_562;
        }
        unsigned int v219 = 0;
        while (1)
        {
          uint64_t v220 = *v2;
          uint64_t v221 = *(void *)&a1[v220];
          unint64_t v222 = v221 + 1;
          if (v221 == -1 || v222 > *(void *)&a1[*v3]) {
            goto LABEL_425;
          }
          int v223 = *(char *)(*(void *)&a1[*v5] + v221);
          *(void *)&a1[v220] = v222;
          if (v223 < 0)
          {
            BOOL v37 = v219++ > 8;
            if (!v37) {
              continue;
            }
          }
          goto LABEL_558;
        }
      case 5u:
        if (v15 == 2) {
          goto LABEL_550;
        }
        goto LABEL_562;
      case 6u:
        if ((v8 & 7) != 0) {
          goto LABEL_562;
        }
        unsigned int v224 = 0;
        while (1)
        {
          uint64_t v225 = *v2;
          uint64_t v226 = *(void *)&a1[v225];
          unint64_t v227 = v226 + 1;
          if (v226 == -1 || v227 > *(void *)&a1[*v3]) {
            goto LABEL_425;
          }
          int v228 = *(char *)(*(void *)&a1[*v5] + v226);
          *(void *)&a1[v225] = v227;
          if (v228 < 0)
          {
            BOOL v37 = v224++ > 8;
            if (!v37) {
              continue;
            }
          }
          goto LABEL_558;
        }
      case 7u:
        if ((v8 & 7) != 0) {
          goto LABEL_562;
        }
        unsigned int v229 = 0;
        while (1)
        {
          uint64_t v230 = *v2;
          uint64_t v231 = *(void *)&a1[v230];
          unint64_t v232 = v231 + 1;
          if (v231 == -1 || v232 > *(void *)&a1[*v3]) {
            break;
          }
          int v233 = *(char *)(*(void *)&a1[*v5] + v231);
          *(void *)&a1[v230] = v232;
          if (v233 < 0)
          {
            BOOL v37 = v229++ > 8;
            if (!v37) {
              continue;
            }
          }
          goto LABEL_558;
        }
LABEL_425:
        a1[*v4] = 1;
        goto LABEL_558;
      case 8u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_562;
        }
        objc_msgSend(a1, "position", 0, 0);
        [a1 length];
LABEL_429:
        while (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
        {
          char v234 = 0;
          unsigned int v235 = 0;
          unint64_t v236 = 0;
          while (2)
          {
            uint64_t v237 = *v2;
            uint64_t v238 = *(void *)&a1[v237];
            unint64_t v239 = v238 + 1;
            if (v238 == -1 || v239 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              char v240 = *(unsigned char *)(*(void *)&a1[*v5] + v238);
              *(void *)&a1[v237] = v239;
              v236 |= (unint64_t)(v240 & 0x7F) << v234;
              if (v240 < 0)
              {
                v234 += 7;
                BOOL v13 = v235++ >= 9;
                if (v13)
                {
                  unint64_t v236 = 0;
                  uint64_t v241 = *v4;
                  int v242 = a1[v241];
                  goto LABEL_441;
                }
                continue;
              }
            }
            break;
          }
          uint64_t v241 = *v4;
          int v242 = a1[v241];
          if (a1[v241]) {
            unint64_t v236 = 0;
          }
LABEL_441:
          int v243 = v236 & 7;
          if (v242) {
            BOOL v244 = 1;
          }
          else {
            BOOL v244 = v243 == 4;
          }
          if (!v244)
          {
            switch((v236 >> 3))
            {
              case 1u:
                if (v243 != 2)
                {
                  if ((v236 & 7) == 0)
                  {
                    while (1)
                    {
                      uint64_t v248 = *v2;
                      uint64_t v249 = *(void *)&a1[v248];
                      unint64_t v250 = v249 + 1;
                      if (v249 == -1 || v250 > *(void *)&a1[*v3]) {
                        break;
                      }
                      int v251 = *(char *)(*(void *)&a1[*v5] + v249);
                      *(void *)&a1[v248] = v250;
                      if (v251 < 0)
                      {
                        unsigned int v252 = v243++;
                        if (v252 <= 8) {
                          continue;
                        }
                      }
                      goto LABEL_429;
                    }
LABEL_529:
                    uint64_t v241 = *v4;
LABEL_530:
                    a1[v241] = 1;
                    continue;
                  }
                  goto LABEL_561;
                }
                if (!PBReaderPlaceMark()) {
                  goto LABEL_561;
                }
LABEL_537:
                while (*(void *)&a1[*v2] < *(void *)&a1[*v3])
                {
                  unsigned int v293 = a1[*v4];
                  if (a1[*v4]) {
                    break;
                  }
                  while (1)
                  {
                    uint64_t v294 = *v2;
                    uint64_t v295 = *(void *)&a1[v294];
                    unint64_t v296 = v295 + 1;
                    if (v295 == -1 || v296 > *(void *)&a1[*v3]) {
                      break;
                    }
                    int v297 = *(char *)(*(void *)&a1[*v5] + v295);
                    *(void *)&a1[v294] = v296;
                    if (v297 < 0)
                    {
                      BOOL v13 = v293++ >= 9;
                      if (!v13) {
                        continue;
                      }
                    }
                    goto LABEL_537;
                  }
                  a1[*v4] = 1;
                }
                goto LABEL_546;
              case 2u:
              case 3u:
              case 9u:
                if (v243 != 5) {
                  goto LABEL_561;
                }
                uint64_t v245 = *v2;
                unint64_t v246 = *(void *)&a1[v245];
                if (v246 > 0xFFFFFFFFFFFFFFFBLL) {
                  goto LABEL_530;
                }
                unint64_t v247 = v246 + 4;
                if (v247 > *(void *)&a1[*v3]) {
                  goto LABEL_530;
                }
                *(void *)&a1[v245] = v247;
                continue;
              case 4u:
                if ((v236 & 7) != 0) {
                  goto LABEL_561;
                }
                unsigned int v253 = 0;
                while (1)
                {
                  uint64_t v254 = *v2;
                  uint64_t v255 = *(void *)&a1[v254];
                  unint64_t v256 = v255 + 1;
                  if (v255 == -1 || v256 > *(void *)&a1[*v3]) {
                    goto LABEL_529;
                  }
                  int v257 = *(char *)(*(void *)&a1[*v5] + v255);
                  *(void *)&a1[v254] = v256;
                  if (v257 < 0)
                  {
                    BOOL v37 = v253++ > 8;
                    if (!v37) {
                      continue;
                    }
                  }
                  goto LABEL_429;
                }
              case 5u:
                if (v243 != 2 || !PBReaderPlaceMark()) {
                  goto LABEL_561;
                }
                [a1 position];
                [a1 length];
                break;
              case 6u:
                if ((v236 & 7) != 0) {
                  goto LABEL_561;
                }
                unsigned int v277 = 0;
                while (1)
                {
                  uint64_t v278 = *v2;
                  uint64_t v279 = *(void *)&a1[v278];
                  unint64_t v280 = v279 + 1;
                  if (v279 == -1 || v280 > *(void *)&a1[*v3]) {
                    goto LABEL_529;
                  }
                  int v281 = *(char *)(*(void *)&a1[*v5] + v279);
                  *(void *)&a1[v278] = v280;
                  if (v281 < 0)
                  {
                    BOOL v37 = v277++ > 8;
                    if (!v37) {
                      continue;
                    }
                  }
                  goto LABEL_429;
                }
              case 7u:
                if ((v236 & 7) != 0) {
                  goto LABEL_561;
                }
                unsigned int v282 = 0;
                while (1)
                {
                  uint64_t v283 = *v2;
                  uint64_t v284 = *(void *)&a1[v283];
                  unint64_t v285 = v284 + 1;
                  if (v284 == -1 || v285 > *(void *)&a1[*v3]) {
                    goto LABEL_529;
                  }
                  int v286 = *(char *)(*(void *)&a1[*v5] + v284);
                  *(void *)&a1[v283] = v285;
                  if (v286 < 0)
                  {
                    BOOL v37 = v282++ > 8;
                    if (!v37) {
                      continue;
                    }
                  }
                  goto LABEL_429;
                }
              case 8u:
                if ((v236 & 7) != 0) {
                  goto LABEL_561;
                }
                unsigned int v287 = 0;
                while (1)
                {
                  uint64_t v288 = *v2;
                  uint64_t v289 = *(void *)&a1[v288];
                  unint64_t v290 = v289 + 1;
                  if (v289 == -1 || v290 > *(void *)&a1[*v3]) {
                    goto LABEL_529;
                  }
                  int v291 = *(char *)(*(void *)&a1[*v5] + v289);
                  *(void *)&a1[v288] = v290;
                  if (v291 < 0)
                  {
                    BOOL v37 = v287++ > 8;
                    if (!v37) {
                      continue;
                    }
                  }
                  goto LABEL_429;
                }
              case 0xAu:
                if (v243 == 2) {
                  goto LABEL_532;
                }
                goto LABEL_561;
              default:
LABEL_532:
                if ((PBReaderSkipValueWithTag() & 1) == 0) {
                  goto LABEL_561;
                }
                continue;
            }
LABEL_468:
            while (2)
            {
              if (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
              {
                char v258 = 0;
                unsigned int v259 = 0;
                unint64_t v260 = 0;
                while (1)
                {
                  uint64_t v261 = *v2;
                  uint64_t v262 = *(void *)&a1[v261];
                  unint64_t v263 = v262 + 1;
                  if (v262 == -1 || v263 > *(void *)&a1[*v3]) {
                    break;
                  }
                  char v264 = *(unsigned char *)(*(void *)&a1[*v5] + v262);
                  *(void *)&a1[v261] = v263;
                  v260 |= (unint64_t)(v264 & 0x7F) << v258;
                  if ((v264 & 0x80) == 0) {
                    goto LABEL_478;
                  }
                  v258 += 7;
                  BOOL v13 = v259++ >= 9;
                  if (v13)
                  {
                    unint64_t v260 = 0;
                    int v265 = a1[*v4];
                    goto LABEL_480;
                  }
                }
                a1[*v4] = 1;
LABEL_478:
                int v265 = a1[*v4];
                if (a1[*v4]) {
                  unint64_t v260 = 0;
                }
LABEL_480:
                if (v265) {
                  BOOL v266 = 1;
                }
                else {
                  BOOL v266 = (v260 & 7) == 4;
                }
                if (!v266)
                {
                  if ((v260 >> 3) == 2)
                  {
                    if ((v260 & 7) != 0) {
                      goto LABEL_560;
                    }
                    unsigned int v272 = 0;
                    while (1)
                    {
                      uint64_t v273 = *v2;
                      uint64_t v274 = *(void *)&a1[v273];
                      unint64_t v275 = v274 + 1;
                      if (v274 == -1 || v275 > *(void *)&a1[*v3]) {
                        break;
                      }
                      int v276 = *(char *)(*(void *)&a1[*v5] + v274);
                      *(void *)&a1[v273] = v275;
                      if (v276 < 0)
                      {
                        BOOL v37 = v272++ > 8;
                        if (!v37) {
                          continue;
                        }
                      }
                      goto LABEL_468;
                    }
                  }
                  else
                  {
                    if ((v260 >> 3) != 1)
                    {
                      if ((PBReaderSkipValueWithTag() & 1) == 0) {
                        goto LABEL_560;
                      }
                      continue;
                    }
                    if ((v260 & 7) != 0) {
                      goto LABEL_560;
                    }
                    unsigned int v267 = 0;
                    while (1)
                    {
                      uint64_t v268 = *v2;
                      uint64_t v269 = *(void *)&a1[v268];
                      unint64_t v270 = v269 + 1;
                      if (v269 == -1 || v270 > *(void *)&a1[*v3]) {
                        break;
                      }
                      int v271 = *(char *)(*(void *)&a1[*v5] + v269);
                      *(void *)&a1[v268] = v270;
                      if (v271 < 0)
                      {
                        BOOL v37 = v267++ > 8;
                        if (!v37) {
                          continue;
                        }
                      }
                      goto LABEL_468;
                    }
                  }
                  a1[*v4] = 1;
                  continue;
                }
              }
              break;
            }
            int v292 = a1[*v4];
            PBReaderRecallMark();
            if (v292) {
              goto LABEL_561;
            }
LABEL_546:
            PBReaderRecallMark();
            continue;
          }
          break;
        }
LABEL_547:
        int v298 = a1[*v4];
        PBReaderRecallMark();
        if (v298) {
          goto LABEL_562;
        }
        goto LABEL_557;
      case 0xAu:
        if (v15 == 2) {
          goto LABEL_550;
        }
        goto LABEL_562;
      default:
LABEL_550:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_562;
        }
        goto LABEL_558;
    }
  }
}

id GEOStringForRequestCounterLogArray(void *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = objc_alloc_init(MEMORY[0x1E4F28E78]);
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v3 = v1;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v11;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v3);
        }
        objc_msgSend(*(id *)(*((void *)&v10 + 1) + 8 * i), "_appendFormattedStringTo:", v2, (void)v10);
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v5);
  }

  unint64_t v8 = (void *)[v2 copy];

  return v8;
}

unint64_t GEORevealedPlaceCardModuleTypeShowcaseReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 40));
  uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 36);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 32)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  int v11 = ((*(unsigned __int8 *)(a1 + 44) >> 1) & 1) + (*(unsigned char *)(a1 + 44) & 1);
  while (2)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    switch(a3[v9])
    {
      case -3:
        char v8 = 1;
        goto LABEL_6;
      case -2:
        uint64_t v12 = v7;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        int v14 = v10 & 1 | v11;
        BOOL v15 = v14 != 0;
        if ((v14 != 0) | v8 & 1) {
          long long v16 = 0;
        }
        else {
          long long v16 = a3;
        }
        BOOL v17 = v16 == 0;
        if (v14) {
          BOOL v17 = 1;
        }
        BOOL v47 = v17;
        unsigned int v18 = (int *)MEMORY[0x1E4F940E8];
        unint64_t v19 = (int *)MEMORY[0x1E4F940C8];
        uint64_t v20 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v11;
LABEL_6:
        uint64_t v12 = v7;
        uint64_t v13 = v10;
LABEL_8:
        ++v9;
        uint64_t v7 = v12;
        uint64_t v10 = v13;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(void *)(v3 + *v18) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v19)) {
      goto LABEL_58;
    }
    char v21 = 0;
    unsigned int v22 = 0;
    unint64_t v23 = 0;
    while (1)
    {
      uint64_t v24 = *v18;
      uint64_t v25 = *(void *)(v3 + v24);
      unint64_t v26 = v25 + 1;
      if (v25 == -1 || v26 > *(void *)(v3 + *v6)) {
        break;
      }
      char v27 = *(unsigned char *)(*(void *)(v3 + *v20) + v25);
      *(void *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0) {
        goto LABEL_25;
      }
      v21 += 7;
      if (v22++ >= 9)
      {
        unint64_t v23 = 0;
        int v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v19) = 1;
LABEL_25:
    int v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(unsigned char *)(v3 + *v19)) {
      unint64_t v23 = 0;
    }
LABEL_27:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_58:
      if (v15)
      {
        char v41 = 1;
        goto LABEL_70;
      }
      if (!v16) {
        goto LABEL_71;
      }
      while (1)
      {
        int v44 = *v16++;
        int v43 = v44;
        if (v44 == 1) {
          break;
        }
        if (v43 == 2)
        {
          char v42 = 1;
LABEL_64:
          *(unsigned char *)(a1 + 44) |= v42;
        }
        else if (!v43)
        {
          goto LABEL_71;
        }
      }
      char v42 = 2;
      goto LABEL_64;
    }
    unint64_t v31 = v23 >> 3;
    BOOL v32 = v15;
    if (!v47)
    {
      uint64_t v33 = v16;
      do
      {
        int v35 = *v33++;
        int v34 = v35;
        BOOL v32 = v35 != 0;
        if (v35) {
          BOOL v36 = v34 == v31;
        }
        else {
          BOOL v36 = 1;
        }
      }
      while (!v36);
    }
    if (v31 == 2) {
      break;
    }
    if (v31 == 1)
    {
      if (!v32) {
        goto LABEL_50;
      }
      if ((*(unsigned char *)(a1 + 44) & 2) != 0)
      {
        if ((PBReaderSkipValueWithTag() & 1) == 0)
        {
LABEL_69:
          char v41 = 0;
          goto LABEL_70;
        }
        v9 += *(unsigned __int8 *)(a1 + 44) << 30 >> 31;
      }
      else
      {
        uint64_t v37 = PBReaderReadString();
        uint64_t v38 = *(void **)(a1 + 24);
        *(void *)(a1 + 24) = v37;

        --v9;
      }
    }
    else if (!PBReaderSkipValueWithTag())
    {
      goto LABEL_69;
    }
LABEL_51:
    if (v9) {
      char v40 = 1;
    }
    else {
      char v40 = v15;
    }
    if ((v40 & 1) == 0) {
      goto LABEL_58;
    }
  }
  if (!v32 || (*(unsigned char *)(a1 + 44) & 1) != 0)
  {
LABEL_50:
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      goto LABEL_69;
    }
    goto LABEL_51;
  }
  if ((PBReaderPlaceMark() & 1) == 0) {
    goto LABEL_69;
  }
  uint64_t v39 = objc_alloc_init(GEORevealedPlaceCardModuleButton);
  if (GEORevealedPlaceCardModuleButtonReadAllFrom((uint64_t)v39, (void *)v3, v7 & 1))
  {
    PBReaderRecallMark();
    -[GEORevealedPlaceCardModuleTypeShowcase _addNoFlagsButtons:](a1, v39);

    unint64_t v19 = (int *)MEMORY[0x1E4F940C8];
    goto LABEL_51;
  }

  char v41 = 0;
  unint64_t v19 = (int *)MEMORY[0x1E4F940C8];
LABEL_70:
  *(unsigned char *)(a1 + 44) |= 2u;
  *(unsigned char *)(a1 + 44) |= 1u;
  if (v41)
  {
LABEL_71:
    unint64_t v3 = *(unsigned char *)(v3 + *v19) == 0;
    if (v15) {
      goto LABEL_72;
    }
  }
  else
  {
    unint64_t v3 = 0;
    if (v15)
    {
LABEL_72:
      unint64_t v45 = *(void **)(a1 + 8);
      *(void *)(a1 + 8) = 0;
    }
  }
  return v3;
}

BOOL GEORPTdmUserMapsStatusReadAllFrom(uint64_t a1, void *a2)
{
  unint64_t v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    uint64_t v4 = (int *)MEMORY[0x1E4F940E8];
    uint64_t v5 = (int *)MEMORY[0x1E4F940E0];
    uint64_t v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
      while (1)
      {
        if (v3[*v6]) {
          goto LABEL_61;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          BOOL v15 = v9++ >= 9;
          if (v15)
          {
            unint64_t v10 = 0;
            int v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v16 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v16 || (v10 & 7) == 4) {
          goto LABEL_61;
        }
        unint64_t v18 = v10 >> 3;
        if ((v10 >> 3) == 3) {
          break;
        }
        if (v18 == 2)
        {
          char v33 = 0;
          unsigned int v34 = 0;
          uint64_t v35 = 0;
          *(unsigned char *)(a1 + 28) |= 1u;
          while (1)
          {
            uint64_t v36 = *v4;
            uint64_t v37 = *(void *)&v3[v36];
            unint64_t v38 = v37 + 1;
            if (v37 == -1 || v38 > *(void *)&v3[*v5]) {
              break;
            }
            char v39 = *(unsigned char *)(*(void *)&v3[*v7] + v37);
            *(void *)&v3[v36] = v38;
            v35 |= (unint64_t)(v39 & 0x7F) << v33;
            if ((v39 & 0x80) == 0) {
              goto LABEL_57;
            }
            v33 += 7;
            BOOL v15 = v34++ >= 9;
            if (v15)
            {
              uint64_t v35 = 0;
              goto LABEL_59;
            }
          }
          v3[*v6] = 1;
LABEL_57:
          if (v3[*v6]) {
            uint64_t v35 = 0;
          }
LABEL_59:
          *(void *)(a1 + 16) = v35;
          goto LABEL_60;
        }
        if (v18 == 1)
        {
          char v19 = 0;
          unsigned int v20 = 0;
          uint64_t v21 = 0;
          *(unsigned char *)(a1 + 28) |= 2u;
          while (1)
          {
            uint64_t v22 = *v4;
            uint64_t v23 = *(void *)&v3[v22];
            unint64_t v24 = v23 + 1;
            if (v23 == -1 || v24 > *(void *)&v3[*v5]) {
              break;
            }
            char v25 = *(unsigned char *)(*(void *)&v3[*v7] + v23);
            *(void *)&v3[v22] = v24;
            v21 |= (unint64_t)(v25 & 0x7F) << v19;
            if ((v25 & 0x80) == 0) {
              goto LABEL_48;
            }
            v19 += 7;
            BOOL v15 = v20++ >= 9;
            if (v15)
            {
              uint64_t v21 = 0;
              goto LABEL_50;
            }
          }
          v3[*v6] = 1;
LABEL_48:
          if (v3[*v6]) {
            uint64_t v21 = 0;
          }
LABEL_50:
          BOOL v42 = v21 != 0;
          uint64_t v43 = 24;
LABEL_55:
          *(unsigned char *)(a1 + v43) = v42;
          goto LABEL_60;
        }
        if (!*(void *)(a1 + 8))
        {
          id v40 = objc_alloc_init(MEMORY[0x1E4F940B0]);
          char v41 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = v40;
        }
        if (!PBUnknownFieldAdd()) {
          goto LABEL_62;
        }
LABEL_60:
        if (*(void *)&v3[*v4] >= *(void *)&v3[*v5]) {
          goto LABEL_61;
        }
      }
      char v26 = 0;
      unsigned int v27 = 0;
      uint64_t v28 = 0;
      *(unsigned char *)(a1 + 28) |= 4u;
      while (1)
      {
        uint64_t v29 = *v4;
        uint64_t v30 = *(void *)&v3[v29];
        unint64_t v31 = v30 + 1;
        if (v30 == -1 || v31 > *(void *)&v3[*v5]) {
          break;
        }
        char v32 = *(unsigned char *)(*(void *)&v3[*v7] + v30);
        *(void *)&v3[v29] = v31;
        v28 |= (unint64_t)(v32 & 0x7F) << v26;
        if ((v32 & 0x80) == 0) {
          goto LABEL_52;
        }
        v26 += 7;
        BOOL v15 = v27++ >= 9;
        if (v15)
        {
          uint64_t v28 = 0;
          goto LABEL_54;
        }
      }
      v3[*v6] = 1;
LABEL_52:
      if (v3[*v6]) {
        uint64_t v28 = 0;
      }
LABEL_54:
      BOOL v42 = v28 != 0;
      uint64_t v43 = 25;
      goto LABEL_55;
    }
LABEL_61:
    BOOL v44 = v3[*v6] == 0;
  }
  else
  {
LABEL_62:
    BOOL v44 = 0;
  }
  objc_sync_exit(v3);

  return v44;
}

void sub_189095E04(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

os_unfair_lock_s *GEORPSearchFeedbackIsDirty(os_unfair_lock_s *result)
{
  if (result)
  {
    id v1 = result;
    os_unfair_lock_lock_with_options();
    uint64_t IsDirty = _GEORPSearchFeedbackIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 12);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

BOOL GEORPRunningTrackFeedbackIsValid(char *a1)
{
  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  id v2 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        break;
      }
      if ((v8 >> 3) == 1)
      {
        if (v15 != 2 || (PBReaderSkipValueWithTag() & 1) == 0)
        {
LABEL_26:
          BOOL v17 = 0;
          goto LABEL_25;
        }
      }
      else if (!PBReaderSkipValueWithTag())
      {
        goto LABEL_26;
      }
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v17 = a1[*v4] == 0;
LABEL_25:
  PBReaderRecallMark();
  return v17;
}

unint64_t GEORPFeedbackResultReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 88));
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 84);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 80)];
  uint64_t v6 = 0;
  char v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  unsigned int v11 = (*(_WORD *)(a1 + 92) & 1)
      + (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int16 *)(a1 + 92)), (uint16x4_t)0xFFFEFFFBFFFAFFFFLL), (int8x8_t)0x1000100010001))+ ((*(_WORD *)(a1 + 92) >> 3) & 1)+ ((*(_WORD *)(a1 + 92) >> 7) & 1)+ ((*(_WORD *)(a1 + 92) >> 4) & 1));
  while (2)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    switch(a3[v6])
    {
      case -4:
        ++v11;
        goto LABEL_8;
      case -3:
        char v7 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v13 = v9;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v15 = v11 > 4;
        char v16 = v15 & ~(_BYTE)v10 | v8;
        unsigned __int8 v17 = v15 | v10;
        char v52 = v16;
        char v53 = v17 | v16;
        if ((v17 | v7)) {
          unint64_t v18 = 0;
        }
        else {
          unint64_t v18 = a3;
        }
        char v54 = (v18 == 0) | v17;
        BOOL v55 = v17;
        char v19 = (int *)MEMORY[0x1E4F940E8];
        unsigned int v20 = (int *)MEMORY[0x1E4F940C8];
        uint64_t v21 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v11;
LABEL_7:
        uint64_t v12 = v8;
LABEL_8:
        uint64_t v13 = v9;
        uint64_t v14 = v10;
LABEL_10:
        ++v6;
        uint64_t v8 = v12;
        uint64_t v9 = v13;
        uint64_t v10 = v14;
        continue;
    }
    break;
  }
  while (2)
  {
    uint64_t v22 = (int *)MEMORY[0x1E4F940E0];
    if (*(void *)(v3 + *v19) >= *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) || *(unsigned char *)(v3 + *v20)) {
      goto LABEL_100;
    }
    char v23 = 0;
    unsigned int v24 = 0;
    unint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = *v19;
      uint64_t v27 = *(void *)(v3 + v26);
      unint64_t v28 = v27 + 1;
      if (v27 == -1 || v28 > *(void *)(v3 + *v22)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(v3 + *v21) + v27);
      *(void *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0) {
        goto LABEL_25;
      }
      v23 += 7;
      if (v24++ >= 9)
      {
        unint64_t v25 = 0;
        int v31 = *(unsigned __int8 *)(v3 + *v20);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v20) = 1;
LABEL_25:
    int v31 = *(unsigned __int8 *)(v3 + *v20);
    if (*(unsigned char *)(v3 + *v20)) {
      unint64_t v25 = 0;
    }
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_100:
      int v51 = 1;
      goto LABEL_101;
    }
    unint64_t v33 = v25 >> 3;
    BOOL v34 = v55;
    if ((v54 & 1) == 0)
    {
      uint64_t v35 = v18;
      do
      {
        int v37 = *v35++;
        int v36 = v37;
        BOOL v34 = v37 != 0;
        if (v37) {
          BOOL v38 = v36 == v33;
        }
        else {
          BOOL v38 = 1;
        }
      }
      while (!v38);
    }
    switch((int)v33)
    {
      case 1:
        if (!v34) {
          goto LABEL_81;
        }
        if ((*(_WORD *)(a1 + 92) & 0x40) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_121;
          }
          char v39 = objc_alloc_init(GEORPFeedbackSubmissionResult);
          if (GEORPFeedbackSubmissionResultReadAllFrom((uint64_t)v39, (void *)v3, v9 & 1))
          {
            PBReaderRecallMark();
            uint64_t v40 = 64;
            goto LABEL_80;
          }
          goto LABEL_120;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_121;
        }
        __int16 v46 = *(_WORD *)(a1 + 92) << 9;
        goto LABEL_97;
      case 2:
        if (!v34) {
          goto LABEL_81;
        }
        if ((*(_WORD *)(a1 + 92) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_121;
          }
          __int16 v46 = *(_WORD *)(a1 + 92) << 14;
          goto LABEL_97;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_121;
        }
        char v39 = objc_alloc_init(GEORPFeedbackIdLookupResult);
        if (!GEORPFeedbackIdLookupResultReadAllFrom(v39, (void *)v3, v9 & 1)) {
          goto LABEL_120;
        }
        PBReaderRecallMark();
        uint64_t v40 = 24;
        goto LABEL_80;
      case 3:
        if (!v34) {
          goto LABEL_81;
        }
        if ((*(_WORD *)(a1 + 92) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_121;
          }
          __int16 v46 = *(_WORD *)(a1 + 92) << 10;
          goto LABEL_97;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_121;
        }
        char v39 = objc_alloc_init(GEORPFeedbackQueryResult);
        if (!GEORPFeedbackQueryResultReadAllFrom((uint64_t)v39, (void *)v3, v9 & 1)) {
          goto LABEL_120;
        }
        PBReaderRecallMark();
        uint64_t v40 = 56;
        goto LABEL_80;
      case 4:
        if (!v34) {
          goto LABEL_81;
        }
        if ((*(_WORD *)(a1 + 92) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_121;
          }
          __int16 v46 = *(_WORD *)(a1 + 92) << 13;
          goto LABEL_97;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_121;
        }
        char v39 = objc_alloc_init(GEORPFeedbackImageUploadResult);
        if (!GEORPFeedbackImageUploadResultReadAllFrom(v39, (void *)v3, v9 & 1)) {
          goto LABEL_120;
        }
        PBReaderRecallMark();
        uint64_t v40 = 32;
        goto LABEL_80;
      case 5:
        if (!v34) {
          goto LABEL_81;
        }
        if ((*(_WORD *)(a1 + 92) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_121;
          }
          __int16 v46 = *(_WORD *)(a1 + 92) << 12;
          goto LABEL_97;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_121;
        }
        char v39 = objc_alloc_init(GEORPFeedbackLayoutConfigResult);
        if (!GEORPFeedbackLayoutConfigResultReadAllFrom(v39, (void *)v3, v9 & 1)) {
          goto LABEL_120;
        }
        PBReaderRecallMark();
        uint64_t v40 = 40;
        goto LABEL_80;
      case 6:
        if (!v34) {
          goto LABEL_81;
        }
        if ((*(_WORD *)(a1 + 92) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_121;
          }
          __int16 v46 = *(_WORD *)(a1 + 92) << 8;
          goto LABEL_97;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_121;
        }
        char v39 = objc_alloc_init(GEORPFeedbackTdmFraudNotificationResult);
        if (!GEORPFeedbackTdmFraudNotificationResultReadAllFrom((uint64_t)v39, (void *)v3)) {
          goto LABEL_120;
        }
        PBReaderRecallMark();
        uint64_t v40 = 72;
        goto LABEL_80;
      case 7:
        if (!v34) {
          goto LABEL_81;
        }
        if ((*(_WORD *)(a1 + 92) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_121;
          }
          __int16 v46 = *(_WORD *)(a1 + 92) << 11;
LABEL_97:
          v6 += v46 >> 15;
LABEL_98:
          unsigned int v20 = (int *)MEMORY[0x1E4F940C8];
LABEL_99:
          if (!(v53 & 1 | (v6 != 0))) {
            goto LABEL_100;
          }
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_121;
        }
        char v39 = objc_alloc_init(GEORPFeedbackLogEventResult);
        if (GEORPFeedbackLogEventResultReadAllFrom((uint64_t)v39, (void *)v3))
        {
          PBReaderRecallMark();
          uint64_t v40 = 48;
LABEL_80:
          BOOL v44 = *(void **)(a1 + v40);
          *(void *)(a1 + v40) = v39;

          --v6;
          goto LABEL_98;
        }
LABEL_120:

LABEL_121:
        int v51 = 0;
        unsigned int v20 = (int *)MEMORY[0x1E4F940C8];
LABEL_101:
        if (v52) {
LABEL_102:
        }
          *(_WORD *)(a1 + 92) |= 1u;
        if (v55 || (v51 & 1) == 0)
        {
          *(_WORD *)(a1 + 92) |= 0x40u;
          *(_WORD *)(a1 + 92) |= 2u;
          *(_WORD *)(a1 + 92) |= 0x20u;
          *(_WORD *)(a1 + 92) |= 4u;
          *(_WORD *)(a1 + 92) |= 8u;
          *(_WORD *)(a1 + 92) |= 0x80u;
          *(_WORD *)(a1 + 92) |= 0x10u;
        }
        else if (v18)
        {
          while (1)
          {
            int v47 = *v18++;
            __int16 v48 = 64;
            switch(v47)
            {
              case 0:
                goto LABEL_114;
              case 1:
                goto LABEL_113;
              case 2:
                __int16 v48 = 2;
                goto LABEL_113;
              case 3:
                __int16 v48 = 32;
                goto LABEL_113;
              case 4:
                __int16 v48 = 4;
                goto LABEL_113;
              case 5:
                __int16 v48 = 8;
                goto LABEL_113;
              case 6:
                __int16 v48 = 128;
                goto LABEL_113;
              case 7:
                __int16 v48 = 16;
LABEL_113:
                *(_WORD *)(a1 + 92) |= v48;
                break;
              default:
                continue;
            }
          }
        }
LABEL_114:
        if (v51) {
          unint64_t v3 = *(unsigned char *)(v3 + *v20) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v55)
        {
          char v49 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      default:
        if (v52 & 1) == 0 || (*(_WORD *)(a1 + 92))
        {
LABEL_81:
          char v45 = PBReaderSkipValueWithTag();
          unsigned int v20 = (int *)MEMORY[0x1E4F940C8];
          if ((v45 & 1) == 0)
          {
            int v51 = 0;
            goto LABEL_101;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v41 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            BOOL v42 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v41;
          }
          int v43 = PBUnknownFieldAdd();
          unsigned int v20 = (int *)MEMORY[0x1E4F940C8];
          if (!v43)
          {
            int v51 = 0;
            goto LABEL_102;
          }
        }
        goto LABEL_99;
    }
  }
}

BOOL GEORPFeedbackImageIdMapEntryIsValid(char *a1)
{
  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  id v2 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (a1[*v4]) {
        goto LABEL_27;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        goto LABEL_27;
      }
      if ((v8 >> 3) == 2) {
        break;
      }
      if ((v8 >> 3) == 1)
      {
        if (v15 != 2) {
          goto LABEL_29;
        }
        goto LABEL_23;
      }
      if (!PBReaderSkipValueWithTag())
      {
LABEL_29:
        BOOL v17 = 0;
        goto LABEL_28;
      }
LABEL_26:
      if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
        goto LABEL_27;
      }
    }
    if (v15 != 2) {
      goto LABEL_29;
    }
LABEL_23:
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      goto LABEL_29;
    }
    goto LABEL_26;
  }
LABEL_27:
  BOOL v17 = a1[*v4] == 0;
LABEL_28:
  PBReaderRecallMark();
  return v17;
}

unint64_t GEOPublisherAttributionManifestIndexReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 36))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOPublisherAttributionManifestIndexReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 40));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 32) = [v8 position];
  *(_DWORD *)(a1 + 36) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOPublisherAttributionManifestIndexReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOPublisherAttributionManifestIndexReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOPublisherAttributionManifestIndexReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
  return Specified;
}

void sub_189096C24(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDTransitInfoSnippetReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 100))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOPDTransitInfoSnippetReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 104));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 96) = [v8 position];
  *(_DWORD *)(a1 + 100) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOPDTransitInfoSnippetReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOPDTransitInfoSnippetReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOPDTransitInfoSnippetReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOPDTransitInfoSnippetCallReadAllRecursiveWithoutSynchronized((id *)a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 104));
  return Specified;
}

void sub_189096DBC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDSiriSearchParametersReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 88));
  char v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 84);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 80)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unsigned int v12 = ((*(unsigned __int16 *)(a1 + 104) >> 4) & 1)
      + (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int16 *)(a1 + 104)), (uint16x4_t)0xFFFAFFFBFFF7FFF5), (int8x8_t)0x1000100010001))+ ((*(_WORD *)(a1 + 104) >> 10) & 1)+ ((*(_WORD *)(a1 + 104) >> 7) & 1)+ (HIBYTE(*(_WORD *)(a1 + 104)) & 1));
  while (2)
  {
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v16 = v12 > 4;
        char v17 = v16 & ~(_BYTE)v11 | v9;
        unsigned __int8 v18 = v16 | v11;
        char v84 = v17;
        char v85 = v18 | v17;
        if ((v18 | v8)) {
          char v19 = 0;
        }
        else {
          char v19 = a3;
        }
        char v86 = (v19 == 0) | v18;
        BOOL v87 = v18;
        unsigned int v20 = (int *)MEMORY[0x1E4F940E8];
        uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
        uint64_t v22 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v12;
LABEL_7:
        uint64_t v13 = v9;
LABEL_8:
        uint64_t v14 = v10;
        uint64_t v15 = v11;
LABEL_10:
        ++v7;
        uint64_t v9 = v13;
        uint64_t v10 = v14;
        uint64_t v11 = v15;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v20) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v21)) {
      goto LABEL_145;
    }
    char v23 = 0;
    unsigned int v24 = 0;
    unint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = *v20;
      uint64_t v27 = *(void *)(v3 + v26);
      unint64_t v28 = v27 + 1;
      if (v27 == -1 || v28 > *(void *)(v3 + *v6)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(v3 + *v22) + v27);
      *(void *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0) {
        goto LABEL_25;
      }
      v23 += 7;
      BOOL v30 = v24++ >= 9;
      if (v30)
      {
        unint64_t v25 = 0;
        int v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v21) = 1;
LABEL_25:
    int v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(unsigned char *)(v3 + *v21)) {
      unint64_t v25 = 0;
    }
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_145:
      int v82 = 1;
      goto LABEL_146;
    }
    unint64_t v33 = v25 >> 3;
    BOOL v34 = v87;
    if ((v86 & 1) == 0)
    {
      uint64_t v35 = v19;
      do
      {
        int v37 = *v35++;
        int v36 = v37;
        BOOL v34 = v37 != 0;
        if (v37) {
          BOOL v38 = v36 == v33;
        }
        else {
          BOOL v38 = 1;
        }
      }
      while (!v38);
    }
    switch((int)v33)
    {
      case 1:
        if ((v8 & 1) == 0) {
          goto LABEL_112;
        }
        char v39 = 0;
        unsigned int v40 = 0;
        uint64_t v41 = 0;
        *(_WORD *)(a1 + 104) |= 2u;
        while (1)
        {
          uint64_t v42 = *v20;
          uint64_t v43 = *(void *)(v3 + v42);
          unint64_t v44 = v43 + 1;
          if (v43 == -1 || v44 > *(void *)(v3 + *v6)) {
            break;
          }
          char v45 = *(unsigned char *)(*(void *)(v3 + *v22) + v43);
          *(void *)(v3 + v42) = v44;
          v41 |= (unint64_t)(v45 & 0x7F) << v39;
          if ((v45 & 0x80) == 0) {
            goto LABEL_115;
          }
          v39 += 7;
          BOOL v30 = v40++ >= 9;
          if (v30)
          {
            LODWORD(v41) = 0;
            goto LABEL_117;
          }
        }
        *(unsigned char *)(v3 + *v21) = 1;
LABEL_115:
        if (*(unsigned char *)(v3 + *v21)) {
          LODWORD(v41) = 0;
        }
LABEL_117:
        uint64_t v74 = 96;
        goto LABEL_122;
      case 2:
        if ((v8 & 1) == 0) {
          goto LABEL_112;
        }
        char v46 = 0;
        unsigned int v47 = 0;
        uint64_t v41 = 0;
        *(_WORD *)(a1 + 104) |= 1u;
        while (2)
        {
          uint64_t v48 = *v20;
          uint64_t v49 = *(void *)(v3 + v48);
          unint64_t v50 = v49 + 1;
          if (v49 == -1 || v50 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v21) = 1;
          }
          else
          {
            char v51 = *(unsigned char *)(*(void *)(v3 + *v22) + v49);
            *(void *)(v3 + v48) = v50;
            v41 |= (unint64_t)(v51 & 0x7F) << v46;
            if (v51 < 0)
            {
              v46 += 7;
              BOOL v30 = v47++ >= 9;
              if (v30)
              {
                LODWORD(v41) = 0;
                goto LABEL_121;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v21)) {
          LODWORD(v41) = 0;
        }
LABEL_121:
        uint64_t v74 = 92;
LABEL_122:
        *(_DWORD *)(a1 + v74) = v41;
        goto LABEL_144;
      case 3:
        if (!v34) {
          goto LABEL_112;
        }
        if ((*(_WORD *)(a1 + 104) & 0x200) == 0)
        {
          uint64_t v52 = PBReaderReadString();
          char v53 = *(void **)(a1 + 56);
          *(void *)(a1 + 56) = v52;
          goto LABEL_111;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_166;
        }
        __int16 v77 = *(_WORD *)(a1 + 104) << 6;
        goto LABEL_142;
      case 4:
        if (!v34) {
          goto LABEL_112;
        }
        if ((*(_WORD *)(a1 + 104) & 0x800) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_166;
          }
          __int16 v77 = 16 * *(_WORD *)(a1 + 104);
          goto LABEL_142;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_166;
        }
        char v54 = objc_alloc_init(GEOPDViewportInfo);
        if (!GEOPDViewportInfoReadAllFrom((uint64_t)v54, (void *)v3)) {
          goto LABEL_165;
        }
        PBReaderRecallMark();
        uint64_t v55 = 72;
        goto LABEL_110;
      case 5:
        if (!v34) {
          goto LABEL_112;
        }
        if ((*(_WORD *)(a1 + 104) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_166;
          }
          __int16 v77 = *(_WORD *)(a1 + 104) << 10;
          goto LABEL_142;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_166;
        }
        char v54 = objc_alloc_init(GEOAddress);
        if (!GEOAddressReadAllFrom((uint64_t)v54, (void *)v3, v10 & 1)) {
          goto LABEL_165;
        }
        PBReaderRecallMark();
        uint64_t v55 = 24;
        goto LABEL_110;
      case 6:
        if (!v34 || (*(_WORD *)(a1 + 104) & 0x40) != 0) {
          goto LABEL_112;
        }
        PBReaderReadString();
        char v54 = (GEOPDViewportInfo *)objc_claimAutoreleasedReturnValue();
        if (v54) {
          -[GEOPDSiriSearchParameters _addNoFlagsBusinessCategoryFilter:](a1, v54);
        }
        goto LABEL_99;
      case 7:
        if ((v8 & 1) == 0) {
          goto LABEL_112;
        }
        char v56 = 0;
        unsigned int v57 = 0;
        uint64_t v58 = 0;
        *(_WORD *)(a1 + 104) |= 4u;
        while (2)
        {
          uint64_t v59 = *v20;
          uint64_t v60 = *(void *)(v3 + v59);
          unint64_t v61 = v60 + 1;
          if (v60 == -1 || v61 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v21) = 1;
          }
          else
          {
            char v62 = *(unsigned char *)(*(void *)(v3 + *v22) + v60);
            *(void *)(v3 + v59) = v61;
            v58 |= (unint64_t)(v62 & 0x7F) << v56;
            if (v62 < 0)
            {
              v56 += 7;
              BOOL v30 = v57++ >= 9;
              if (v30)
              {
                uint64_t v58 = 0;
                goto LABEL_126;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v21)) {
          uint64_t v58 = 0;
        }
LABEL_126:
        BOOL v75 = v58 != 0;
        uint64_t v76 = 100;
        goto LABEL_131;
      case 9:
        if ((v8 & 1) == 0) {
          goto LABEL_112;
        }
        char v66 = 0;
        unsigned int v67 = 0;
        uint64_t v68 = 0;
        *(_WORD *)(a1 + 104) |= 8u;
        while (2)
        {
          uint64_t v69 = *v20;
          uint64_t v70 = *(void *)(v3 + v69);
          unint64_t v71 = v70 + 1;
          if (v70 == -1 || v71 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v21) = 1;
          }
          else
          {
            char v72 = *(unsigned char *)(*(void *)(v3 + *v22) + v70);
            *(void *)(v3 + v69) = v71;
            v68 |= (unint64_t)(v72 & 0x7F) << v66;
            if (v72 < 0)
            {
              v66 += 7;
              BOOL v30 = v67++ >= 9;
              if (v30)
              {
                uint64_t v68 = 0;
                goto LABEL_130;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v21)) {
          uint64_t v68 = 0;
        }
LABEL_130:
        BOOL v75 = v68 != 0;
        uint64_t v76 = 101;
LABEL_131:
        *(unsigned char *)(a1 + v76) = v75;
        goto LABEL_144;
      case 10:
        if (!v34 || (*(_WORD *)(a1 + 104) & 0x400) != 0) {
          goto LABEL_112;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_166;
        }
        char v54 = objc_alloc_init(GEOPDSearchSubstringDescriptor);
        if (!GEOPDSearchSubstringDescriptorReadAllFrom((uint64_t)v54, (void *)v3)) {
          goto LABEL_165;
        }
        PBReaderRecallMark();
        -[GEOPDSiriSearchParameters _addNoFlagsSearchSubstringDescriptor:](a1, v54);
LABEL_99:

        goto LABEL_143;
      case 11:
        if (!v34) {
          goto LABEL_112;
        }
        if ((*(_WORD *)(a1 + 104) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_166;
          }
          __int16 v77 = *(_WORD *)(a1 + 104) << 8;
          goto LABEL_142;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_166;
        }
        char v54 = objc_alloc_init(GEOPDIndexQueryNode);
        if (!GEOPDIndexQueryNodeReadAllFrom((uint64_t)v54, (void *)v3, v10 & 1)) {
          goto LABEL_165;
        }
        PBReaderRecallMark();
        uint64_t v55 = 40;
        goto LABEL_110;
      case 12:
        if (!v34) {
          goto LABEL_112;
        }
        if ((*(_WORD *)(a1 + 104) & 0x100) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_166;
          }
          __int16 v77 = *(_WORD *)(a1 + 104) << 7;
LABEL_142:
          v7 += v77 >> 15;
LABEL_143:
          uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
          uint64_t v22 = (int *)MEMORY[0x1E4F940B8];
LABEL_144:
          if (!(v85 & 1 | (v7 != 0))) {
            goto LABEL_145;
          }
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_166;
        }
        char v54 = objc_alloc_init(GEOPDRecentRouteInfo);
        if (GEOPDRecentRouteInfoReadAllFrom((uint64_t)v54, (void *)v3, v10 & 1))
        {
          PBReaderRecallMark();
          uint64_t v55 = 48;
LABEL_110:
          char v53 = *(void **)(a1 + v55);
          *(void *)(a1 + v55) = v54;
LABEL_111:

          --v7;
          goto LABEL_143;
        }
LABEL_165:

LABEL_166:
        int v82 = 0;
        uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
LABEL_146:
        unsigned int v83 = &OBJC_IVAR___GEOPDAutocompleteParametersAllEntriesWithBrowse__querySuggestionEntry;
        if (v84) {
LABEL_147:
        }
          *(_WORD *)(a1 + v83[791]) |= 0x10u;
        if (v87 || (v82 & 1) == 0)
        {
          *(_WORD *)(a1 + v83[791]) |= 0x200u;
          *(_WORD *)(a1 + v83[791]) |= 0x800u;
          *(_WORD *)(a1 + v83[791]) |= 0x20u;
          *(_WORD *)(a1 + v83[791]) |= 0x40u;
          *(_WORD *)(a1 + v83[791]) |= 0x400u;
          *(_WORD *)(a1 + v83[791]) |= 0x80u;
          *(_WORD *)(a1 + v83[791]) |= 0x100u;
        }
        else if (v19)
        {
          while (1)
          {
            int v78 = *v19++;
            __int16 v79 = 512;
            switch(v78)
            {
              case 0:
                goto LABEL_159;
              case 3:
                goto LABEL_158;
              case 4:
                __int16 v79 = 2048;
                goto LABEL_158;
              case 5:
                __int16 v79 = 32;
                goto LABEL_158;
              case 6:
                __int16 v79 = 64;
                goto LABEL_158;
              case 10:
                __int16 v79 = 1024;
                goto LABEL_158;
              case 11:
                __int16 v79 = 128;
                goto LABEL_158;
              case 12:
                __int16 v79 = 256;
LABEL_158:
                *(_WORD *)(a1 + v83[791]) |= v79;
                break;
              default:
                continue;
            }
          }
        }
LABEL_159:
        if (v82) {
          unint64_t v3 = *(unsigned char *)(v3 + *v21) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v87)
        {
          uint64_t v80 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      default:
        if ((v84 & 1) == 0 || (*(_WORD *)(a1 + 104) & 0x10) != 0)
        {
LABEL_112:
          char v73 = PBReaderSkipValueWithTag();
          uint64_t v22 = (int *)MEMORY[0x1E4F940B8];
          uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
          if ((v73 & 1) == 0)
          {
            int v82 = 0;
            goto LABEL_146;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v63 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            uint64_t v64 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v63;
          }
          int v65 = PBUnknownFieldAdd();
          uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
          uint64_t v22 = (int *)MEMORY[0x1E4F940B8];
          if (!v65)
          {
            int v82 = 0;
            unsigned int v83 = &OBJC_IVAR___GEOPDAutocompleteParametersAllEntriesWithBrowse__querySuggestionEntry;
            goto LABEL_147;
          }
        }
        goto LABEL_144;
    }
  }
}

BOOL GEOPDSInferredInfoIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  id v2 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] >= *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
LABEL_134:
    BOOL v74 = a1[*v4] == 0;
    PBReaderRecallMark();
    return v74;
  }
  uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (a1[*v4]) {
      goto LABEL_134;
    }
    char v6 = 0;
    unsigned int v7 = 0;
    unint64_t v8 = 0;
    while (1)
    {
      uint64_t v9 = *v2;
      uint64_t v10 = *(void *)&a1[v9];
      unint64_t v11 = v10 + 1;
      if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
        break;
      }
      char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
      *(void *)&a1[v9] = v11;
      v8 |= (unint64_t)(v12 & 0x7F) << v6;
      if ((v12 & 0x80) == 0) {
        goto LABEL_12;
      }
      v6 += 7;
      BOOL v13 = v7++ >= 9;
      if (v13)
      {
        unint64_t v8 = 0;
        int v14 = a1[*v4];
        goto LABEL_14;
      }
    }
    a1[*v4] = 1;
LABEL_12:
    int v14 = a1[*v4];
    if (a1[*v4]) {
      unint64_t v8 = 0;
    }
LABEL_14:
    int v15 = v8 & 7;
    if (v14 || v15 == 4) {
      goto LABEL_134;
    }
    switch((v8 >> 3))
    {
      case 1u:
        if ((v8 & 7) != 0) {
          goto LABEL_137;
        }
        unsigned int v17 = 0;
        while (1)
        {
          uint64_t v18 = *v2;
          uint64_t v19 = *(void *)&a1[v18];
          unint64_t v20 = v19 + 1;
          if (v19 == -1 || v20 > *(void *)&a1[*v3]) {
            goto LABEL_126;
          }
          int v21 = *(char *)(*(void *)&a1[*v5] + v19);
          *(void *)&a1[v18] = v20;
          if (v21 < 0)
          {
            BOOL v22 = v17++ > 8;
            if (!v22) {
              continue;
            }
          }
          goto LABEL_133;
        }
      case 2u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_137;
        }
        objc_msgSend(a1, "position", 0, 0);
        [a1 length];
LABEL_32:
        if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
          goto LABEL_131;
        }
        char v23 = 0;
        unsigned int v24 = 0;
        unint64_t v25 = 0;
        while (2)
        {
          uint64_t v26 = *v2;
          uint64_t v27 = *(void *)&a1[v26];
          unint64_t v28 = v27 + 1;
          if (v27 == -1 || v28 > *(void *)&a1[*v3])
          {
            a1[*v4] = 1;
          }
          else
          {
            char v29 = *(unsigned char *)(*(void *)&a1[*v5] + v27);
            *(void *)&a1[v26] = v28;
            v25 |= (unint64_t)(v29 & 0x7F) << v23;
            if (v29 < 0)
            {
              v23 += 7;
              BOOL v13 = v24++ >= 9;
              if (v13)
              {
                unint64_t v25 = 0;
                int v30 = a1[*v4];
                goto LABEL_44;
              }
              continue;
            }
          }
          break;
        }
        int v30 = a1[*v4];
        if (a1[*v4]) {
          unint64_t v25 = 0;
        }
LABEL_44:
        int v31 = v25 & 7;
        if (v30) {
          BOOL v32 = 1;
        }
        else {
          BOOL v32 = v31 == 4;
        }
        if (v32)
        {
LABEL_131:
          int v73 = a1[*v4];
          PBReaderRecallMark();
          if (v73) {
            goto LABEL_137;
          }
LABEL_132:
          PBReaderRecallMark();
LABEL_133:
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
            goto LABEL_134;
          }
          continue;
        }
        switch((v25 >> 3))
        {
          case 1u:
            if ((v25 & 7) != 0) {
              goto LABEL_136;
            }
            unsigned int v33 = 0;
            while (1)
            {
              uint64_t v34 = *v2;
              uint64_t v35 = *(void *)&a1[v34];
              unint64_t v36 = v35 + 1;
              if (v35 == -1 || v36 > *(void *)&a1[*v3]) {
                goto LABEL_115;
              }
              int v37 = *(char *)(*(void *)&a1[*v5] + v35);
              *(void *)&a1[v34] = v36;
              if (v37 < 0)
              {
                BOOL v22 = v33++ > 8;
                if (!v22) {
                  continue;
                }
              }
              goto LABEL_32;
            }
          case 2u:
            if ((v25 & 7) != 0) {
              goto LABEL_136;
            }
            unsigned int v38 = 0;
            while (1)
            {
              uint64_t v39 = *v2;
              uint64_t v40 = *(void *)&a1[v39];
              unint64_t v41 = v40 + 1;
              if (v40 == -1 || v41 > *(void *)&a1[*v3]) {
                goto LABEL_115;
              }
              int v42 = *(char *)(*(void *)&a1[*v5] + v40);
              *(void *)&a1[v39] = v41;
              if (v42 < 0)
              {
                BOOL v22 = v38++ > 8;
                if (!v22) {
                  continue;
                }
              }
              goto LABEL_32;
            }
          case 3u:
            if (v31 != 2 || !PBReaderPlaceMark()) {
              goto LABEL_136;
            }
            [a1 position];
            [a1 length];
            break;
          case 4u:
            if ((v25 & 7) != 0) {
              goto LABEL_136;
            }
            unsigned int v62 = 0;
            do
            {
              uint64_t v63 = *v2;
              uint64_t v64 = *(void *)&a1[v63];
              unint64_t v65 = v64 + 1;
              if (v64 == -1 || v65 > *(void *)&a1[*v3])
              {
LABEL_115:
                a1[*v4] = 1;
                goto LABEL_32;
              }
              int v66 = *(char *)(*(void *)&a1[*v5] + v64);
              *(void *)&a1[v63] = v65;
              if ((v66 & 0x80000000) == 0) {
                break;
              }
              BOOL v22 = v62++ > 8;
            }
            while (!v22);
            goto LABEL_32;
          default:
            if (PBReaderSkipValueWithTag()) {
              goto LABEL_32;
            }
            goto LABEL_136;
        }
LABEL_70:
        while (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
        {
          char v43 = 0;
          unsigned int v44 = 0;
          unint64_t v45 = 0;
          while (1)
          {
            uint64_t v46 = *v2;
            uint64_t v47 = *(void *)&a1[v46];
            unint64_t v48 = v47 + 1;
            if (v47 == -1 || v48 > *(void *)&a1[*v3]) {
              break;
            }
            char v49 = *(unsigned char *)(*(void *)&a1[*v5] + v47);
            *(void *)&a1[v46] = v48;
            v45 |= (unint64_t)(v49 & 0x7F) << v43;
            if ((v49 & 0x80) == 0) {
              goto LABEL_80;
            }
            v43 += 7;
            BOOL v13 = v44++ >= 9;
            if (v13)
            {
              unint64_t v45 = 0;
              int v50 = a1[*v4];
              goto LABEL_82;
            }
          }
          a1[*v4] = 1;
LABEL_80:
          int v50 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v45 = 0;
          }
LABEL_82:
          if (v50 || (v45 & 7) == 4) {
            break;
          }
          if ((v45 >> 3) == 2)
          {
            if ((v45 & 7) == 0)
            {
              unsigned int v57 = 0;
              while (1)
              {
                uint64_t v58 = *v2;
                uint64_t v59 = *(void *)&a1[v58];
                unint64_t v60 = v59 + 1;
                if (v59 == -1 || v60 > *(void *)&a1[*v3]) {
                  break;
                }
                int v61 = *(char *)(*(void *)&a1[*v5] + v59);
                *(void *)&a1[v58] = v60;
                if (v61 < 0)
                {
                  BOOL v22 = v57++ > 8;
                  if (!v22) {
                    continue;
                  }
                }
                goto LABEL_70;
              }
LABEL_104:
              a1[*v4] = 1;
              continue;
            }
            goto LABEL_135;
          }
          if ((v45 >> 3) == 1)
          {
            if ((v45 & 7) == 0)
            {
              unsigned int v52 = 0;
              while (1)
              {
                uint64_t v53 = *v2;
                uint64_t v54 = *(void *)&a1[v53];
                unint64_t v55 = v54 + 1;
                if (v54 == -1 || v55 > *(void *)&a1[*v3]) {
                  goto LABEL_104;
                }
                int v56 = *(char *)(*(void *)&a1[*v5] + v54);
                *(void *)&a1[v53] = v55;
                if (v56 < 0)
                {
                  BOOL v22 = v52++ > 8;
                  if (!v22) {
                    continue;
                  }
                }
                goto LABEL_70;
              }
            }
LABEL_135:
            PBReaderRecallMark();
            goto LABEL_136;
          }
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_135;
          }
        }
        int v67 = a1[*v4];
        PBReaderRecallMark();
        if (!v67)
        {
          PBReaderRecallMark();
          goto LABEL_32;
        }
LABEL_136:
        PBReaderRecallMark();
LABEL_137:
        PBReaderRecallMark();
        return 0;
      case 3u:
        if ((v8 & 7) != 0) {
          goto LABEL_137;
        }
        unsigned int v68 = 0;
        while (1)
        {
          uint64_t v69 = *v2;
          uint64_t v70 = *(void *)&a1[v69];
          unint64_t v71 = v70 + 1;
          if (v70 == -1 || v71 > *(void *)&a1[*v3]) {
            break;
          }
          int v72 = *(char *)(*(void *)&a1[*v5] + v70);
          *(void *)&a1[v69] = v71;
          if (v72 < 0)
          {
            BOOL v22 = v68++ > 8;
            if (!v22) {
              continue;
            }
          }
          goto LABEL_133;
        }
LABEL_126:
        a1[*v4] = 1;
        goto LABEL_133;
      case 4u:
        if (v15 == 2 && PBReaderPlaceMark() && GEOPDSInferredInfoIsValid(a1)) {
          goto LABEL_132;
        }
        goto LABEL_137;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_137;
        }
        goto LABEL_133;
    }
  }
}

unint64_t GEOPDSCategorySearchResultSectionReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  char v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 60);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 56)];
  char v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unsigned int v12 = (vaddv_s16((int16x4_t)(*(void *)&vshl_u16((uint16x4_t)(*(void *)&vdup_n_s16(*(unsigned __int8 *)(a1 + 72)) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFDFFFBFFFEFFFCLL) & 0xFF01FF01FF01FF01))+ ((*(unsigned char *)(a1 + 72) & 2) != 0));
  while (2)
  {
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    switch(a3[v8])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        char v7 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v16 = v12 > 2;
        char v17 = v16 & ~(_BYTE)v11 | v9;
        unsigned __int8 v18 = v16 | v11;
        char v62 = v17;
        char v63 = v18 | v17;
        char v61 = v7;
        if ((v18 | v7)) {
          uint64_t v19 = 0;
        }
        else {
          uint64_t v19 = a3;
        }
        unint64_t v20 = (int *)MEMORY[0x1E4F940E8];
        int v21 = (int *)MEMORY[0x1E4F940C8];
        char v64 = (v19 == 0) | v18;
        BOOL v65 = v18;
        BOOL v22 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v12;
LABEL_7:
        uint64_t v13 = v9;
LABEL_8:
        uint64_t v14 = v10;
        uint64_t v15 = v11;
LABEL_10:
        ++v8;
        uint64_t v9 = v13;
        uint64_t v10 = v14;
        uint64_t v11 = v15;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v20) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v21)) {
      goto LABEL_86;
    }
    char v23 = 0;
    unsigned int v24 = 0;
    unint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = *v20;
      uint64_t v27 = *(void *)(v3 + v26);
      unint64_t v28 = v27 + 1;
      if (v27 == -1 || v28 > *(void *)(v3 + *v6)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(v3 + *v22) + v27);
      *(void *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0) {
        goto LABEL_25;
      }
      v23 += 7;
      BOOL v30 = v24++ >= 9;
      if (v30)
      {
        unint64_t v25 = 0;
        int v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v21) = 1;
LABEL_25:
    int v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(unsigned char *)(v3 + *v21)) {
      unint64_t v25 = 0;
    }
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_86:
      int v59 = 1;
      goto LABEL_87;
    }
    unint64_t v33 = v25 >> 3;
    BOOL v34 = v65;
    if ((v64 & 1) == 0)
    {
      uint64_t v35 = v19;
      do
      {
        int v37 = *v35++;
        int v36 = v37;
        BOOL v34 = v37 != 0;
        if (v37) {
          BOOL v38 = v36 == v33;
        }
        else {
          BOOL v38 = 1;
        }
      }
      while (!v38);
    }
    switch((int)v33)
    {
      case 1:
        if (!v34) {
          goto LABEL_69;
        }
        if ((*(unsigned char *)(a1 + 72) & 4) == 0)
        {
          uint64_t v39 = PBReaderReadString();
          uint64_t v40 = 24;
          goto LABEL_67;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_105;
        }
        char v54 = 32 * *(unsigned char *)(a1 + 72);
        goto LABEL_83;
      case 2:
        if (!v34) {
          goto LABEL_69;
        }
        if ((*(unsigned char *)(a1 + 72) & 0x10) == 0)
        {
          uint64_t v39 = PBReaderReadString();
          uint64_t v40 = 40;
          goto LABEL_67;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_105;
        }
        char v54 = 8 * *(unsigned char *)(a1 + 72);
        goto LABEL_83;
      case 3:
        if ((v61 & 1) == 0) {
          goto LABEL_69;
        }
        char v44 = 0;
        unsigned int v45 = 0;
        uint64_t v46 = 0;
        *(unsigned char *)(a1 + 72) |= 1u;
        while (2)
        {
          uint64_t v47 = *v20;
          uint64_t v48 = *(void *)(v3 + v47);
          unint64_t v49 = v48 + 1;
          if (v48 == -1 || v49 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v21) = 1;
          }
          else
          {
            char v50 = *(unsigned char *)(*(void *)(v3 + *v22) + v48);
            *(void *)(v3 + v47) = v49;
            v46 |= (unint64_t)(v50 & 0x7F) << v44;
            if (v50 < 0)
            {
              v44 += 7;
              BOOL v30 = v45++ >= 9;
              if (v30)
              {
                LODWORD(v46) = 0;
                goto LABEL_74;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v21)) {
          LODWORD(v46) = 0;
        }
LABEL_74:
        *(_DWORD *)(a1 + 68) = v46;
        goto LABEL_85;
      case 4:
        if (!v34) {
          goto LABEL_69;
        }
        if ((*(unsigned char *)(a1 + 72) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_105;
          }
          char v54 = 4 * *(unsigned char *)(a1 + 72);
LABEL_83:
          v8 += v54 >> 7;
          goto LABEL_84;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_105;
        }
        char v51 = objc_alloc_init(GEOStyleAttributes);
        if (GEOStyleAttributesReadAllFrom((uint64_t)v51, (void *)v3))
        {
          PBReaderRecallMark();
          unsigned int v52 = *(void **)(a1 + 48);
          *(void *)(a1 + 48) = v51;
LABEL_68:

          --v8;
LABEL_84:
          int v21 = (int *)MEMORY[0x1E4F940C8];
          goto LABEL_85;
        }

LABEL_105:
        int v59 = 0;
        unint64_t v60 = &OBJC_IVAR___GEOMapDataSubscriptionDownloadGroup__completedSubscriptions;
        int v21 = (int *)MEMORY[0x1E4F940C8];
LABEL_88:
        if (v62) {
LABEL_89:
        }
          *(unsigned char *)(a1 + v60[803]) |= 2u;
        if (v65 || (v59 & 1) == 0)
        {
          *(unsigned char *)(a1 + v60[803]) |= 4u;
          *(unsigned char *)(a1 + v60[803]) |= 0x10u;
          *(unsigned char *)(a1 + v60[803]) |= 0x20u;
          *(unsigned char *)(a1 + v60[803]) |= 8u;
        }
        else if (v19)
        {
          while (1)
          {
            int v55 = *v19++;
            char v56 = 4;
            switch(v55)
            {
              case 0:
                goto LABEL_98;
              case 1:
                goto LABEL_97;
              case 2:
                char v56 = 16;
                goto LABEL_97;
              case 4:
                char v56 = 32;
                goto LABEL_97;
              case 5:
                char v56 = 8;
LABEL_97:
                *(unsigned char *)(a1 + v60[803]) |= v56;
                break;
              default:
                continue;
            }
          }
        }
LABEL_98:
        if (v59) {
          unint64_t v3 = *(unsigned char *)(v3 + *v21) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v65)
        {
          unsigned int v57 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      case 5:
        if (!v34) {
          goto LABEL_69;
        }
        if ((*(unsigned char *)(a1 + 72) & 8) == 0)
        {
          uint64_t v39 = PBReaderReadString();
          uint64_t v40 = 32;
LABEL_67:
          unsigned int v52 = *(void **)(a1 + v40);
          *(void *)(a1 + v40) = v39;
          goto LABEL_68;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_105;
        }
        char v54 = 16 * *(unsigned char *)(a1 + 72);
        goto LABEL_83;
      default:
        if ((v62 & 1) == 0 || (*(unsigned char *)(a1 + 72) & 2) != 0)
        {
LABEL_69:
          char v53 = PBReaderSkipValueWithTag();
          int v21 = (int *)MEMORY[0x1E4F940C8];
          if ((v53 & 1) == 0)
          {
            int v59 = 0;
LABEL_87:
            unint64_t v60 = &OBJC_IVAR___GEOMapDataSubscriptionDownloadGroup__completedSubscriptions;
            goto LABEL_88;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v41 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            int v42 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v41;
          }
          int v43 = PBUnknownFieldAdd();
          int v21 = (int *)MEMORY[0x1E4F940C8];
          if (!v43)
          {
            int v59 = 0;
            unint64_t v60 = &OBJC_IVAR___GEOMapDataSubscriptionDownloadGroup__completedSubscriptions;
            goto LABEL_89;
          }
        }
LABEL_85:
        if (!(v63 & 1 | (v8 != 0))) {
          goto LABEL_86;
        }
        continue;
    }
  }
}

unint64_t GEOPDResultRefinementToggleReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 44))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOPDResultRefinementToggleReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = [v8 position];
  *(_DWORD *)(a1 + 44) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOPDResultRefinementToggleReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOPDResultRefinementToggleReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOPDResultRefinementToggleReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    [*(id *)(a1 + 32) readAll:1];
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_1890988E4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDRecentRouteInfoReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 84))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOPDRecentRouteInfoReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 88));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 80) = [v8 position];
  *(_DWORD *)(a1 + 84) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOPDRecentRouteInfoReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOPDRecentRouteInfoReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOPDRecentRouteInfoReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 88));
  return Specified;
}

void sub_189098A70(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDQueryUnderstandingTaxonomyResultItemBrandReadAllFrom(uint64_t a1, void *a2, int a3)
{
  uint64_t v5 = a2;
  objc_sync_enter(v5);
  if (v5)
  {
    char v6 = (int *)MEMORY[0x1E4F940E8];
    char v7 = (int *)MEMORY[0x1E4F940E0];
    id v8 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v5[*MEMORY[0x1E4F940E8]] < *(void *)&v5[*MEMORY[0x1E4F940E0]])
    {
      uint64_t v9 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v5[*v8]) {
          break;
        }
        char v10 = 0;
        unsigned int v11 = 0;
        unint64_t v12 = 0;
        while (1)
        {
          uint64_t v13 = *v6;
          uint64_t v14 = *(void *)&v5[v13];
          unint64_t v15 = v14 + 1;
          if (v14 == -1 || v15 > *(void *)&v5[*v7]) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)&v5[*v9] + v14);
          *(void *)&v5[v13] = v15;
          v12 |= (unint64_t)(v16 & 0x7F) << v10;
          if ((v16 & 0x80) == 0) {
            goto LABEL_13;
          }
          v10 += 7;
          if (v11++ >= 9)
          {
            unint64_t v12 = 0;
            int v18 = v5[*v8];
            goto LABEL_15;
          }
        }
        v5[*v8] = 1;
LABEL_13:
        int v18 = v5[*v8];
        if (v5[*v8]) {
          unint64_t v12 = 0;
        }
LABEL_15:
        if (v18 || (v12 & 7) == 4) {
          break;
        }
        if ((v12 >> 3) == 1)
        {
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_29;
          }
          unint64_t v20 = objc_alloc_init(GEOPDLocalizedQueryUnderstandingTaxonomyResultItemBrand);
          if (!GEOPDLocalizedQueryUnderstandingTaxonomyResultItemBrandReadAllFrom((uint64_t)v20, v5, a3))
          {

            goto LABEL_29;
          }
          PBReaderRecallMark();
          -[GEOPDQueryUnderstandingTaxonomyResultItemBrand addLocalizedTaxonomyResultBrand:](a1, v20);
        }
        else
        {
          if (!*(void *)(a1 + 8))
          {
            id v21 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            BOOL v22 = *(void **)(a1 + 8);
            *(void *)(a1 + 8) = v21;
          }
          if (!PBUnknownFieldAdd()) {
            goto LABEL_29;
          }
        }
      }
      while (*(void *)&v5[*v6] < *(void *)&v5[*v7]);
    }
    BOOL v23 = v5[*v8] == 0;
  }
  else
  {
LABEL_29:
    BOOL v23 = 0;
  }
  objc_sync_exit(v5);

  return v23;
}

void sub_189098CAC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOPDPopularNearbyResultReadSpecified(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  char v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 60);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 56)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  int v11 = ((*(unsigned __int8 *)(a1 + 68) >> 1) & 1)
      + (*(unsigned char *)(a1 + 68) & 1)
      + ((*(unsigned __int8 *)(a1 + 68) >> 2) & 1);
  while (2)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    switch(a3[v9])
    {
      case -4:
        ++v11;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_9;
      case 0:
        BOOL v14 = v11 != 0;
        char v15 = v14 & ~(_BYTE)v10 | v7;
        unsigned __int8 v16 = v14 | v10;
        char v50 = v15;
        char v51 = v16 | v15;
        if ((v16 | v8)) {
          char v17 = 0;
        }
        else {
          char v17 = a3;
        }
        char v52 = (v17 == 0) | v16;
        BOOL v53 = v16;
        int v18 = (int *)MEMORY[0x1E4F940E8];
        uint64_t v19 = (int *)MEMORY[0x1E4F940C8];
        unint64_t v20 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v11;
LABEL_7:
        uint64_t v12 = v7;
LABEL_8:
        uint64_t v13 = v10;
LABEL_9:
        ++v9;
        uint64_t v7 = v12;
        uint64_t v10 = v13;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(void *)(v3 + *v18) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v19)) {
      goto LABEL_59;
    }
    char v21 = 0;
    unsigned int v22 = 0;
    unint64_t v23 = 0;
    while (1)
    {
      uint64_t v24 = *v18;
      uint64_t v25 = *(void *)(v3 + v24);
      unint64_t v26 = v25 + 1;
      if (v25 == -1 || v26 > *(void *)(v3 + *v6)) {
        break;
      }
      char v27 = *(unsigned char *)(*(void *)(v3 + *v20) + v25);
      *(void *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0) {
        goto LABEL_24;
      }
      v21 += 7;
      if (v22++ >= 9)
      {
        unint64_t v23 = 0;
        int v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_26;
      }
    }
    *(unsigned char *)(v3 + *v19) = 1;
LABEL_24:
    int v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(unsigned char *)(v3 + *v19)) {
      unint64_t v23 = 0;
    }
LABEL_26:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_59:
      int v48 = 1;
      goto LABEL_60;
    }
    unint64_t v31 = v23 >> 3;
    BOOL v32 = v53;
    if ((v52 & 1) == 0)
    {
      unint64_t v33 = v17;
      do
      {
        int v35 = *v33++;
        int v34 = v35;
        BOOL v32 = v35 != 0;
        if (v35) {
          BOOL v36 = v34 == v31;
        }
        else {
          BOOL v36 = 1;
        }
      }
      while (!v36);
    }
    if (v31 == 3) {
      break;
    }
    if (v31 != 1)
    {
      if ((v50 & 1) != 0 && (*(unsigned char *)(a1 + 68) & 1) == 0)
      {
        if (!*(void *)(a1 + 16))
        {
          id v39 = objc_alloc_init(MEMORY[0x1E4F940B0]);
          uint64_t v40 = *(void **)(a1 + 16);
          *(void *)(a1 + 16) = v39;
        }
        int v41 = PBUnknownFieldAdd();
        uint64_t v19 = (int *)MEMORY[0x1E4F940C8];
        if (!v41)
        {
          int v48 = 0;
          unint64_t v49 = &OBJC_IVAR___GEOMapDataSubscriptionDownloadGroup__completedSubscriptions;
          goto LABEL_62;
        }
        goto LABEL_54;
      }
      goto LABEL_53;
    }
    if (!v32) {
      goto LABEL_53;
    }
    if ((*(unsigned char *)(a1 + 68) & 4) != 0)
    {
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        goto LABEL_80;
      }
      v9 += *(unsigned __int8 *)(a1 + 68) << 29 >> 31;
      goto LABEL_58;
    }
    uint64_t v37 = PBReaderReadString();
    BOOL v38 = *(void **)(a1 + 48);
    *(void *)(a1 + 48) = v37;

    uint64_t v19 = (int *)MEMORY[0x1E4F940C8];
    --v9;
LABEL_54:
    if (!(v51 & 1 | (v9 != 0))) {
      goto LABEL_59;
    }
  }
  if (!v32 || (*(unsigned char *)(a1 + 68) & 2) != 0)
  {
LABEL_53:
    char v42 = PBReaderSkipValueWithTag();
    uint64_t v19 = (int *)MEMORY[0x1E4F940C8];
    if (v42) {
      goto LABEL_54;
    }
    int v48 = 0;
LABEL_60:
    unint64_t v49 = &OBJC_IVAR___GEOMapDataSubscriptionDownloadGroup__completedSubscriptions;
    goto LABEL_61;
  }
  if (PBReaderPlaceMark())
  {
    -[GEOPDPopularNearbyResult _reserveLitePlaceResults:](a1, 1uLL);
    if (GEOPDLitePlaceResultReadAllFrom(*(void *)(a1 + 24) + 16 * *(void *)(a1 + 32), v3))
    {
      PBReaderRecallMark();
      ++*(void *)(a1 + 32);
LABEL_58:
      uint64_t v19 = (int *)MEMORY[0x1E4F940C8];
      goto LABEL_54;
    }
  }
LABEL_80:
  int v48 = 0;
  unint64_t v49 = &OBJC_IVAR___GEOMapDataSubscriptionDownloadGroup__completedSubscriptions;
  uint64_t v19 = (int *)MEMORY[0x1E4F940C8];
LABEL_61:
  if ((v50 & 1) == 0) {
    goto LABEL_63;
  }
LABEL_62:
  *(unsigned char *)(a1 + v49[488]) |= 1u;
LABEL_63:
  if (v53 || (v48 & 1) == 0)
  {
    *(unsigned char *)(a1 + v49[488]) |= 4u;
    *(unsigned char *)(a1 + v49[488]) |= 2u;
    goto LABEL_73;
  }
  if (v17)
  {
    while (1)
    {
      int v45 = *v17++;
      int v44 = v45;
      if (v45 == 1) {
        break;
      }
      if (v44 == 3)
      {
        char v43 = 2;
LABEL_69:
        *(unsigned char *)(a1 + v49[488]) |= v43;
      }
      else if (!v44)
      {
        goto LABEL_73;
      }
    }
    char v43 = 4;
    goto LABEL_69;
  }
LABEL_73:
  if (v48) {
    uint64_t v3 = *(unsigned char *)(v3 + *v19) == 0;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v53)
  {
    uint64_t v46 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  return v3;
}

BOOL GEOPDPoiEventFilterReadAllFrom(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    uint64_t v4 = (int *)MEMORY[0x1E4F940E8];
    uint64_t v5 = (int *)MEMORY[0x1E4F940E0];
    char v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v3[*v6]) {
          break;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          BOOL v15 = v9++ >= 9;
          if (v15)
          {
            unint64_t v10 = 0;
            int v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v16 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v16 || (v10 & 7) == 4) {
          break;
        }
        if ((v10 >> 3) == 1)
        {
          char v18 = 0;
          unsigned int v19 = 0;
          uint64_t v20 = 0;
          *(unsigned char *)(a1 + 20) |= 1u;
          while (1)
          {
            uint64_t v21 = *v4;
            uint64_t v22 = *(void *)&v3[v21];
            unint64_t v23 = v22 + 1;
            if (v22 == -1 || v23 > *(void *)&v3[*v5]) {
              break;
            }
            char v24 = *(unsigned char *)(*(void *)&v3[*v7] + v22);
            *(void *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0) {
              goto LABEL_32;
            }
            v18 += 7;
            BOOL v15 = v19++ >= 9;
            if (v15)
            {
              uint64_t v20 = 0;
              goto LABEL_34;
            }
          }
          v3[*v6] = 1;
LABEL_32:
          if (v3[*v6]) {
            uint64_t v20 = 0;
          }
LABEL_34:
          *(unsigned char *)(a1 + 16) = v20 != 0;
        }
        else
        {
          if (!*(void *)(a1 + 8))
          {
            id v25 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            unint64_t v26 = *(void **)(a1 + 8);
            *(void *)(a1 + 8) = v25;
          }
          if (!PBUnknownFieldAdd()) {
            goto LABEL_37;
          }
        }
      }
      while (*(void *)&v3[*v4] < *(void *)&v3[*v5]);
    }
    BOOL v27 = v3[*v6] == 0;
  }
  else
  {
LABEL_37:
    BOOL v27 = 0;
  }
  objc_sync_exit(v3);

  return v27;
}

void sub_189099444(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDMultiLocalizedStringIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  id v2 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        break;
      }
      if ((v8 >> 3) == 1)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOLocalizedStringIsValid(a1))
        {
LABEL_27:
          PBReaderRecallMark();
          return 0;
        }
        PBReaderRecallMark();
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        goto LABEL_27;
      }
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v17 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v17;
}

unint64_t GEOPDMapsHomeSectionReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  char v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 60);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 56)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unsigned int v12 = (vaddv_s16((int16x4_t)(*(void *)&vshl_u16((uint16x4_t)(*(void *)&vdup_n_s16(*(unsigned __int8 *)(a1 + 72)) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFCFFFDFFFBFFFELL) & 0xFF01FF01FF01FF01))+ ((*(unsigned char *)(a1 + 72) & 2) != 0));
  while (2)
  {
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v16 = v12 > 2;
        char v17 = v16 & ~(_BYTE)v11 | v9;
        unsigned __int8 v18 = v16 | v11;
        char v63 = v17;
        char v64 = v18 | v17;
        char v62 = v8;
        if ((v18 | v8)) {
          unsigned int v19 = 0;
        }
        else {
          unsigned int v19 = a3;
        }
        char v65 = (v19 == 0) | v18;
        BOOL v66 = v18;
        uint64_t v20 = (int *)MEMORY[0x1E4F940E8];
        uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
        uint64_t v22 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v12;
LABEL_7:
        uint64_t v13 = v9;
LABEL_8:
        uint64_t v14 = v10;
        uint64_t v15 = v11;
LABEL_10:
        ++v7;
        uint64_t v9 = v13;
        uint64_t v10 = v14;
        uint64_t v11 = v15;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v20) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v21)) {
      goto LABEL_89;
    }
    char v23 = 0;
    unsigned int v24 = 0;
    unint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = *v20;
      uint64_t v27 = *(void *)(v3 + v26);
      unint64_t v28 = v27 + 1;
      if (v27 == -1 || v28 > *(void *)(v3 + *v6)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(v3 + *v22) + v27);
      *(void *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0) {
        goto LABEL_25;
      }
      v23 += 7;
      BOOL v30 = v24++ >= 9;
      if (v30)
      {
        unint64_t v25 = 0;
        int v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v21) = 1;
LABEL_25:
    int v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(unsigned char *)(v3 + *v21)) {
      unint64_t v25 = 0;
    }
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_89:
      int v60 = 1;
      goto LABEL_90;
    }
    unint64_t v33 = v25 >> 3;
    BOOL v34 = v66;
    if ((v65 & 1) == 0)
    {
      int v35 = v19;
      do
      {
        int v37 = *v35++;
        int v36 = v37;
        BOOL v34 = v37 != 0;
        if (v37) {
          BOOL v38 = v36 == v33;
        }
        else {
          BOOL v38 = 1;
        }
      }
      while (!v38);
    }
    switch((int)v33)
    {
      case 1:
        if ((v62 & 1) == 0) {
          goto LABEL_72;
        }
        char v39 = 0;
        unsigned int v40 = 0;
        uint64_t v41 = 0;
        *(unsigned char *)(a1 + 72) |= 1u;
        while (1)
        {
          uint64_t v42 = *v20;
          uint64_t v43 = *(void *)(v3 + v42);
          unint64_t v44 = v43 + 1;
          if (v43 == -1 || v44 > *(void *)(v3 + *v6)) {
            break;
          }
          char v45 = *(unsigned char *)(*(void *)(v3 + *v22) + v43);
          *(void *)(v3 + v42) = v44;
          v41 |= (unint64_t)(v45 & 0x7F) << v39;
          if ((v45 & 0x80) == 0) {
            goto LABEL_75;
          }
          v39 += 7;
          BOOL v30 = v40++ >= 9;
          if (v30)
          {
            LODWORD(v41) = 0;
            goto LABEL_77;
          }
        }
        *(unsigned char *)(v3 + *v21) = 1;
LABEL_75:
        if (*(unsigned char *)(v3 + *v21)) {
          LODWORD(v41) = 0;
        }
LABEL_77:
        *(_DWORD *)(a1 + 68) = v41;
        goto LABEL_88;
      case 2:
        if (!v34) {
          goto LABEL_72;
        }
        if ((*(unsigned char *)(a1 + 72) & 0x20) == 0)
        {
          uint64_t v49 = PBReaderReadString();
          uint64_t v50 = 48;
          goto LABEL_70;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_109;
        }
        char v55 = 4 * *(unsigned char *)(a1 + 72);
        goto LABEL_86;
      case 3:
        if (!v34) {
          goto LABEL_72;
        }
        if ((*(unsigned char *)(a1 + 72) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_109;
          }
          char v55 = 32 * *(unsigned char *)(a1 + 72);
          goto LABEL_86;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_109;
        }
        char v51 = objc_alloc_init(GEOPDCollectionSuggestionResult);
        if (!GEOPDCollectionSuggestionResultReadAllFrom((uint64_t)v51, (void *)v3, v10 & 1)) {
          goto LABEL_108;
        }
        PBReaderRecallMark();
        uint64_t v52 = 24;
        goto LABEL_66;
      case 4:
        if (!v34) {
          goto LABEL_72;
        }
        if ((*(unsigned char *)(a1 + 72) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_109;
          }
          char v55 = 16 * *(unsigned char *)(a1 + 72);
LABEL_86:
          v7 += v55 >> 7;
LABEL_87:
          uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
          goto LABEL_88;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_109;
        }
        char v51 = objc_alloc_init(GEOPDGuidesLocationEntry);
        if (GEOPDGuidesLocationEntryReadAllFrom((uint64_t)v51, (void *)v3, v10 & 1))
        {
          PBReaderRecallMark();
          uint64_t v52 = 32;
LABEL_66:
          BOOL v53 = *(void **)(a1 + v52);
          *(void *)(a1 + v52) = v51;
LABEL_71:

          --v7;
          goto LABEL_87;
        }
LABEL_108:

LABEL_109:
        int v60 = 0;
        char v61 = &OBJC_IVAR___GEOMapDataSubscriptionDownloadGroup__completedSubscriptions;
        uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
LABEL_91:
        if (v63) {
LABEL_92:
        }
          *(unsigned char *)(a1 + v61[352]) |= 2u;
        if (v66 || (v60 & 1) == 0)
        {
          *(unsigned char *)(a1 + v61[352]) |= 0x20u;
          *(unsigned char *)(a1 + v61[352]) |= 4u;
          *(unsigned char *)(a1 + v61[352]) |= 8u;
          *(unsigned char *)(a1 + v61[352]) |= 0x10u;
        }
        else if (v19)
        {
          while (1)
          {
            int v57 = *v19++;
            char v56 = 32;
            switch(v57)
            {
              case 0:
                goto LABEL_102;
              case 2:
                goto LABEL_100;
              case 3:
                char v56 = 4;
                goto LABEL_100;
              case 4:
                char v56 = 8;
                goto LABEL_100;
              case 5:
                char v56 = 16;
LABEL_100:
                *(unsigned char *)(a1 + v61[352]) |= v56;
                break;
              default:
                continue;
            }
          }
        }
LABEL_102:
        if (v60) {
          unint64_t v3 = *(unsigned char *)(v3 + *v21) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v66)
        {
          uint64_t v58 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      case 5:
        if (!v34) {
          goto LABEL_72;
        }
        if ((*(unsigned char *)(a1 + 72) & 0x10) == 0)
        {
          uint64_t v49 = PBReaderReadString();
          uint64_t v50 = 40;
LABEL_70:
          BOOL v53 = *(void **)(a1 + v50);
          *(void *)(a1 + v50) = v49;
          goto LABEL_71;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_109;
        }
        char v55 = 8 * *(unsigned char *)(a1 + 72);
        goto LABEL_86;
      default:
        if ((v63 & 1) == 0 || (*(unsigned char *)(a1 + 72) & 2) != 0)
        {
LABEL_72:
          char v54 = PBReaderSkipValueWithTag();
          uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
          if ((v54 & 1) == 0)
          {
            int v60 = 0;
LABEL_90:
            char v61 = &OBJC_IVAR___GEOMapDataSubscriptionDownloadGroup__completedSubscriptions;
            goto LABEL_91;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v46 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            uint64_t v47 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v46;
          }
          int v48 = PBUnknownFieldAdd();
          uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
          if (!v48)
          {
            int v60 = 0;
            char v61 = &OBJC_IVAR___GEOMapDataSubscriptionDownloadGroup__completedSubscriptions;
            goto LABEL_92;
          }
        }
LABEL_88:
        if (!(v64 & 1 | (v7 != 0))) {
          goto LABEL_89;
        }
        continue;
    }
  }
}

unint64_t GEOPDMapsHomeSectionReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 60))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOPDMapsHomeSectionReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 56) = [v8 position];
  *(_DWORD *)(a1 + 60) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOPDMapsHomeSectionReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOPDMapsHomeSectionReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOPDMapsHomeSectionReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
  {
    -[GEOPDCollectionSuggestionResult readAll:](*(void *)(a1 + 24), 1);
    -[GEOPDGuidesLocationEntry readAll:](*(void *)(a1 + 32), 1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return Specified;
}

void sub_189099F24(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDMapsHomeResultReadAllFrom(uint64_t a1, void *a2, int a3)
{
  uint64_t v5 = a2;
  objc_sync_enter(v5);
  if (v5)
  {
    char v6 = (int *)MEMORY[0x1E4F940E8];
    uint64_t v7 = (int *)MEMORY[0x1E4F940E0];
    id v8 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v5[*MEMORY[0x1E4F940E8]] < *(void *)&v5[*MEMORY[0x1E4F940E0]])
    {
      uint64_t v9 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v5[*v8]) {
          break;
        }
        char v10 = 0;
        unsigned int v11 = 0;
        unint64_t v12 = 0;
        while (1)
        {
          uint64_t v13 = *v6;
          uint64_t v14 = *(void *)&v5[v13];
          unint64_t v15 = v14 + 1;
          if (v14 == -1 || v15 > *(void *)&v5[*v7]) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)&v5[*v9] + v14);
          *(void *)&v5[v13] = v15;
          v12 |= (unint64_t)(v16 & 0x7F) << v10;
          if ((v16 & 0x80) == 0) {
            goto LABEL_13;
          }
          v10 += 7;
          if (v11++ >= 9)
          {
            unint64_t v12 = 0;
            int v18 = v5[*v8];
            goto LABEL_15;
          }
        }
        v5[*v8] = 1;
LABEL_13:
        int v18 = v5[*v8];
        if (v5[*v8]) {
          unint64_t v12 = 0;
        }
LABEL_15:
        if (v18 || (v12 & 7) == 4) {
          break;
        }
        if ((v12 >> 3) == 1)
        {
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_29;
          }
          uint64_t v20 = objc_alloc_init(GEOPDMapsHomeSection);
          if (!GEOPDMapsHomeSectionReadAllFrom((uint64_t)v20, v5, a3))
          {

            goto LABEL_29;
          }
          PBReaderRecallMark();
          -[GEOPDMapsHomeResult addMapsHomeSection:](a1, v20);
        }
        else
        {
          if (!*(void *)(a1 + 8))
          {
            id v21 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            uint64_t v22 = *(void **)(a1 + 8);
            *(void *)(a1 + 8) = v21;
          }
          if (!PBUnknownFieldAdd()) {
            goto LABEL_29;
          }
        }
      }
      while (*(void *)&v5[*v6] < *(void *)&v5[*v7]);
    }
    BOOL v23 = v5[*v8] == 0;
  }
  else
  {
LABEL_29:
    BOOL v23 = 0;
  }
  objc_sync_exit(v5);

  return v23;
}

void sub_18909A160(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDLocalizedQueryUnderstandingTaxonomyResultItemBrandReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 156))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOPDLocalizedQueryUnderstandingTaxonomyResultItemBrandReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)char v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 152) = [v8 position];
  *(_DWORD *)(a1 + 156) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOPDLocalizedQueryUnderstandingTaxonomyResultItemBrandReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOPDLocalizedQueryUnderstandingTaxonomyResultItemBrandReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOPDLocalizedQueryUnderstandingTaxonomyResultItemBrandReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOPDLocalizedQueryUnderstandingTaxonomyResultItemBrandCallReadAllRecursiveWithoutSynchronized(a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 160));
  return Specified;
}

void sub_18909A2FC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDGuidesLocationEntryIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  id v2 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] >= *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
LABEL_105:
    BOOL v50 = a1[*v4] == 0;
    PBReaderRecallMark();
    return v50;
  }
  uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (a1[*v4]) {
      goto LABEL_105;
    }
    char v6 = 0;
    unsigned int v7 = 0;
    unint64_t v8 = 0;
    while (1)
    {
      uint64_t v9 = *v2;
      uint64_t v10 = *(void *)&a1[v9];
      unint64_t v11 = v10 + 1;
      if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
        break;
      }
      char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
      *(void *)&a1[v9] = v11;
      v8 |= (unint64_t)(v12 & 0x7F) << v6;
      if ((v12 & 0x80) == 0) {
        goto LABEL_12;
      }
      v6 += 7;
      BOOL v13 = v7++ >= 9;
      if (v13)
      {
        unint64_t v8 = 0;
        int v14 = a1[*v4];
        goto LABEL_14;
      }
    }
    a1[*v4] = 1;
LABEL_12:
    int v14 = a1[*v4];
    if (a1[*v4]) {
      unint64_t v8 = 0;
    }
LABEL_14:
    int v15 = v8 & 7;
    if (v14 || v15 == 4) {
      goto LABEL_105;
    }
    switch((v8 >> 3))
    {
      case 1u:
        if (v15 == 2 && PBReaderPlaceMark() && GEOPDMapsIdentifierIsValid(a1)) {
          goto LABEL_82;
        }
        goto LABEL_107;
      case 2u:
        if ((v8 & 7) != 0) {
          goto LABEL_107;
        }
        unsigned int v17 = 0;
        while (1)
        {
          uint64_t v18 = *v2;
          uint64_t v19 = *(void *)&a1[v18];
          unint64_t v20 = v19 + 1;
          if (v19 == -1 || v20 > *(void *)&a1[*v3]) {
            goto LABEL_90;
          }
          int v21 = *(char *)(*(void *)&a1[*v5] + v19);
          *(void *)&a1[v18] = v20;
          if (v21 < 0)
          {
            BOOL v22 = v17++ > 8;
            if (!v22) {
              continue;
            }
          }
          goto LABEL_91;
        }
      case 3u:
        if ((v8 & 7) != 0) {
          goto LABEL_107;
        }
        unsigned int v23 = 0;
        while (1)
        {
          uint64_t v24 = *v2;
          uint64_t v25 = *(void *)&a1[v24];
          unint64_t v26 = v25 + 1;
          if (v25 == -1 || v26 > *(void *)&a1[*v3]) {
            goto LABEL_90;
          }
          int v27 = *(char *)(*(void *)&a1[*v5] + v25);
          *(void *)&a1[v24] = v26;
          if (v27 < 0)
          {
            BOOL v22 = v23++ > 8;
            if (!v22) {
              continue;
            }
          }
          goto LABEL_91;
        }
      case 4u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_107;
        }
        objc_msgSend(a1, "position", 0, 0);
        [a1 length];
LABEL_44:
        if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
          goto LABEL_93;
        }
        char v28 = 0;
        unsigned int v29 = 0;
        unint64_t v30 = 0;
        while (1)
        {
          uint64_t v31 = *v2;
          uint64_t v32 = *(void *)&a1[v31];
          unint64_t v33 = v32 + 1;
          if (v32 == -1 || v33 > *(void *)&a1[*v3]) {
            break;
          }
          char v34 = *(unsigned char *)(*(void *)&a1[*v5] + v32);
          *(void *)&a1[v31] = v33;
          v30 |= (unint64_t)(v34 & 0x7F) << v28;
          if ((v34 & 0x80) == 0) {
            goto LABEL_54;
          }
          v28 += 7;
          BOOL v13 = v29++ >= 9;
          if (v13)
          {
            unint64_t v30 = 0;
            int v35 = a1[*v4];
            goto LABEL_56;
          }
        }
        a1[*v4] = 1;
LABEL_54:
        int v35 = a1[*v4];
        if (a1[*v4]) {
          unint64_t v30 = 0;
        }
LABEL_56:
        int v36 = v30 & 7;
        if (v35 || v36 == 4)
        {
LABEL_93:
          int v44 = a1[*v4];
          PBReaderRecallMark();
          if (v44) {
            goto LABEL_107;
          }
LABEL_82:
          PBReaderRecallMark();
LABEL_91:
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
            goto LABEL_105;
          }
          continue;
        }
        unint64_t v38 = v30 >> 3;
        if ((v30 >> 3) == 3)
        {
          if (v36 == 2 && PBReaderPlaceMark() && GEOPDGuideLocationImageIsValid(a1)) {
            goto LABEL_72;
          }
        }
        else
        {
          if (v38 != 2)
          {
            if (v38 == 1 && v36 != 2 || (PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_106;
            }
            goto LABEL_44;
          }
          if (v36 == 2 && PBReaderPlaceMark() && GEOPDCaptionedPhotoIsValid(a1))
          {
LABEL_72:
            PBReaderRecallMark();
            goto LABEL_44;
          }
        }
LABEL_106:
        PBReaderRecallMark();
LABEL_107:
        PBReaderRecallMark();
        return 0;
      case 5u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOMapRegionIsValid(a1)) {
          goto LABEL_107;
        }
        goto LABEL_82;
      case 6u:
        if (v15 == 2 && PBReaderPlaceMark() && GEOLatLngIsValid(a1)) {
          goto LABEL_82;
        }
        goto LABEL_107;
      case 7u:
        if (v15 != 2)
        {
          if ((v8 & 7) != 0) {
            goto LABEL_107;
          }
          while (1)
          {
            uint64_t v39 = *v2;
            uint64_t v40 = *(void *)&a1[v39];
            unint64_t v41 = v40 + 1;
            if (v40 == -1 || v41 > *(void *)&a1[*v3]) {
              break;
            }
            int v42 = *(char *)(*(void *)&a1[*v5] + v40);
            *(void *)&a1[v39] = v41;
            if (v42 < 0)
            {
              unsigned int v43 = v15++;
              if (v43 <= 8) {
                continue;
              }
            }
            goto LABEL_91;
          }
LABEL_90:
          a1[*v4] = 1;
          goto LABEL_91;
        }
        if (!PBReaderPlaceMark()) {
          goto LABEL_107;
        }
LABEL_96:
        while (*(void *)&a1[*v2] < *(void *)&a1[*v3])
        {
          unsigned int v45 = a1[*v4];
          if (a1[*v4]) {
            break;
          }
          while (1)
          {
            uint64_t v46 = *v2;
            uint64_t v47 = *(void *)&a1[v46];
            unint64_t v48 = v47 + 1;
            if (v47 == -1 || v48 > *(void *)&a1[*v3]) {
              break;
            }
            int v49 = *(char *)(*(void *)&a1[*v5] + v47);
            *(void *)&a1[v46] = v48;
            if (v49 < 0)
            {
              BOOL v13 = v45++ >= 9;
              if (!v13) {
                continue;
              }
            }
            goto LABEL_96;
          }
          a1[*v4] = 1;
        }
        goto LABEL_82;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_107;
        }
        goto LABEL_91;
    }
  }
}

unint64_t GEOPDExploreGuidesReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 44))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOPDExploreGuidesReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = [v8 position];
  *(_DWORD *)(a1 + 44) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOPDExploreGuidesReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOPDExploreGuidesReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOPDExploreGuidesReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    -[GEOPDGuidesLocationEntry readAll:](*(void *)(a1 + 32), 1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_18909AA3C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDExploreGuidesIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  id v2 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (a1[*v4]) {
        goto LABEL_27;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        goto LABEL_27;
      }
      if ((v8 >> 3) == 2) {
        break;
      }
      if ((v8 >> 3) != 1) {
        goto LABEL_25;
      }
      if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDGuidesLocationEntryIsValid(a1))
      {
LABEL_28:
        PBReaderRecallMark();
        return 0;
      }
      PBReaderRecallMark();
LABEL_26:
      if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
        goto LABEL_27;
      }
    }
    if (v15 != 2) {
      goto LABEL_28;
    }
LABEL_25:
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      goto LABEL_28;
    }
    goto LABEL_26;
  }
LABEL_27:
  BOOL v17 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v17;
}

unint64_t GEOPDCollectionSuggestionResultReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 44))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOPDCollectionSuggestionResultReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = [v8 position];
  *(_DWORD *)(a1 + 44) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOPDCollectionSuggestionResultReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOPDCollectionSuggestionResultReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOPDCollectionSuggestionResultReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOPDCollectionSuggestionResultCallReadAllRecursiveWithoutSynchronized(a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_18909ADB8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDAutocompleteParametersAllEntriesWithBrowseReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 220))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOPDAutocompleteParametersAllEntriesWithBrowseReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 224));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 216) = [v8 position];
  *(_DWORD *)(a1 + 220) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOPDAutocompleteParametersAllEntriesWithBrowseReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOPDAutocompleteParametersAllEntriesWithBrowseReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOPDAutocompleteParametersAllEntriesWithBrowseReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOPDAutocompleteParametersAllEntriesWithBrowseCallReadAllRecursiveWithoutSynchronized(a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 224));
  return Specified;
}

void sub_18909AF54(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDAutocompleteEntryReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 160));
  char v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 156);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 152)];
  unsigned int v7 = v6;
  uint64_t v8 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  unsigned int v13 = *(_DWORD *)(a1 + 184);
  uint32x4_t v14 = (uint32x4_t)vdupq_n_s32(v13);
  v15.i64[0] = 0x100000001;
  v15.i64[1] = 0x100000001;
  unsigned int v16 = vaddvq_s32(vaddq_s32(vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_18A631860), v15), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_18A631870), v15)), vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_18A631840), v15), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_18A631850), v15))))+ ((v13 >> 5) & 1);
  while (2)
  {
    uint64_t v17 = 1;
    uint64_t v18 = 1;
    uint64_t v19 = 1;
    switch(a3[v8])
    {
      case -4:
        ++v16;
        goto LABEL_8;
      case -3:
        char v9 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v18 = v11;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v20 = v16 > 0xB;
        char v21 = v20 & ~(_BYTE)v12 | v10;
        unsigned __int8 v22 = v20 | v12;
        char v90 = v21;
        char v91 = v22 | v21;
        if ((v22 | v9)) {
          unsigned int v23 = 0;
        }
        else {
          unsigned int v23 = a3;
        }
        uint64_t v24 = (int *)MEMORY[0x1E4F940E8];
        uint64_t v25 = (int *)MEMORY[0x1E4F940C8];
        char v92 = (v23 == 0) | v22;
        BOOL v93 = v22;
        unint64_t v26 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v16;
LABEL_7:
        uint64_t v17 = v10;
LABEL_8:
        uint64_t v18 = v11;
        uint64_t v19 = v12;
LABEL_10:
        ++v8;
        uint64_t v10 = v17;
        uint64_t v11 = v18;
        uint64_t v12 = v19;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v24) >= *(void *)(v3 + *v7) || *(unsigned char *)(v3 + *v25)) {
      goto LABEL_223;
    }
    char v27 = 0;
    unsigned int v28 = 0;
    unint64_t v29 = 0;
    while (1)
    {
      uint64_t v30 = *v24;
      uint64_t v31 = *(void *)(v3 + v30);
      unint64_t v32 = v31 + 1;
      if (v31 == -1 || v32 > *(void *)(v3 + *v7)) {
        break;
      }
      char v33 = *(unsigned char *)(*(void *)(v3 + *v26) + v31);
      *(void *)(v3 + v30) = v32;
      v29 |= (unint64_t)(v33 & 0x7F) << v27;
      if ((v33 & 0x80) == 0) {
        goto LABEL_25;
      }
      v27 += 7;
      BOOL v34 = v28++ >= 9;
      if (v34)
      {
        unint64_t v29 = 0;
        int v35 = *(unsigned __int8 *)(v3 + *v25);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v25) = 1;
LABEL_25:
    int v35 = *(unsigned __int8 *)(v3 + *v25);
    if (*(unsigned char *)(v3 + *v25)) {
      unint64_t v29 = 0;
    }
LABEL_27:
    if (v35 || (v29 & 7) == 4)
    {
LABEL_223:
      int v89 = 1;
      goto LABEL_224;
    }
    unint64_t v37 = v29 >> 3;
    BOOL v38 = v93;
    if ((v92 & 1) == 0)
    {
      uint64_t v39 = v23;
      do
      {
        int v41 = *v39++;
        int v40 = v41;
        BOOL v38 = v41 != 0;
        if (v41) {
          BOOL v42 = v40 == v37;
        }
        else {
          BOOL v42 = 1;
        }
      }
      while (!v42);
    }
    switch((int)v37)
    {
      case 1:
        if (!v38) {
          goto LABEL_165;
        }
        if ((*(unsigned char *)(a1 + 185) & 0x40) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_254;
          }
          unsigned int v43 = objc_alloc_init(GEOPDAutocompleteEntryHighlightLine);
          if (GEOPDAutocompleteEntryHighlightLineReadAllFrom((uint64_t)v43, (void *)v3, v11 & 1))
          {
            PBReaderRecallMark();
            uint64_t v44 = 88;
            goto LABEL_155;
          }
          goto LABEL_253;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_254;
        }
        int v84 = (int)(*(_DWORD *)(a1 + 184) << 17) >> 31;
        goto LABEL_220;
      case 2:
        if (!v38) {
          goto LABEL_165;
        }
        if ((*(unsigned char *)(a1 + 185) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_254;
          }
          int v84 = (int)(*(_DWORD *)(a1 + 184) << 18) >> 31;
          goto LABEL_220;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_254;
        }
        unsigned int v43 = objc_alloc_init(GEOPDAutocompleteEntryHighlightLine);
        if (!GEOPDAutocompleteEntryHighlightLineReadAllFrom((uint64_t)v43, (void *)v3, v11 & 1)) {
          goto LABEL_253;
        }
        PBReaderRecallMark();
        uint64_t v44 = 80;
        goto LABEL_155;
      case 3:
        if ((v9 & 1) == 0) {
          goto LABEL_165;
        }
        char v48 = 0;
        unsigned int v49 = 0;
        uint64_t v50 = 0;
        *(_DWORD *)(a1 + 184) |= 8u;
        while (2)
        {
          uint64_t v51 = *v24;
          uint64_t v52 = *(void *)(v3 + v51);
          unint64_t v53 = v52 + 1;
          if (v52 == -1 || v53 > *(void *)(v3 + *v7))
          {
            *(unsigned char *)(v3 + *v25) = 1;
          }
          else
          {
            char v54 = *(unsigned char *)(*(void *)(v3 + *v26) + v52);
            *(void *)(v3 + v51) = v53;
            v50 |= (unint64_t)(v54 & 0x7F) << v48;
            if (v54 < 0)
            {
              v48 += 7;
              BOOL v34 = v49++ >= 9;
              if (v34)
              {
                LODWORD(v50) = 0;
                goto LABEL_170;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v25)) {
          LODWORD(v50) = 0;
        }
LABEL_170:
        uint64_t v83 = 176;
        goto LABEL_187;
      case 4:
        if (!v38) {
          goto LABEL_165;
        }
        if ((*(unsigned char *)(a1 + 186) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_254;
          }
          int v84 = (int)(*(_DWORD *)(a1 + 184) << 12) >> 31;
          goto LABEL_220;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_254;
        }
        unsigned int v43 = objc_alloc_init(GEOPDAutocompleteEntryQuery);
        if (!GEOPDAutocompleteEntryQueryReadAllFrom((uint64_t)v43, (void *)v3, v11 & 1)) {
          goto LABEL_253;
        }
        PBReaderRecallMark();
        uint64_t v44 = 128;
        goto LABEL_155;
      case 5:
        if (!v38) {
          goto LABEL_165;
        }
        if (*(unsigned char *)(a1 + 185))
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_254;
          }
          int v84 = (int)(*(_DWORD *)(a1 + 184) << 23) >> 31;
          goto LABEL_220;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_254;
        }
        unsigned int v43 = objc_alloc_init(GEOPDAutocompleteEntryBusiness);
        if (!GEOPDAutocompleteEntryBusinessReadAllFrom((uint64_t)v43, (void *)v3, v11 & 1)) {
          goto LABEL_253;
        }
        PBReaderRecallMark();
        uint64_t v44 = 40;
        goto LABEL_155;
      case 6:
        if (!v38) {
          goto LABEL_165;
        }
        if ((*(unsigned char *)(a1 + 184) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_254;
          }
          int v84 = (int)(*(_DWORD *)(a1 + 184) << 25) >> 31;
          goto LABEL_220;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_254;
        }
        unsigned int v43 = objc_alloc_init(GEOPDAutocompleteEntryAddress);
        if (!GEOPDAutocompleteEntryAddressReadAllFrom((uint64_t)v43, (void *)v3, v11 & 1)) {
          goto LABEL_253;
        }
        PBReaderRecallMark();
        uint64_t v44 = 24;
        goto LABEL_155;
      case 7:
        if (!v38) {
          goto LABEL_165;
        }
        if ((*(unsigned char *)(a1 + 185) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_254;
          }
          int v84 = (int)(*(_DWORD *)(a1 + 184) << 22) >> 31;
          goto LABEL_220;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_254;
        }
        unsigned int v43 = objc_alloc_init(GEOPDAutocompleteEntryCategory);
        if (!GEOPDAutocompleteEntryCategoryReadAllFrom((uint64_t)v43, (void *)v3, v11 & 1)) {
          goto LABEL_253;
        }
        PBReaderRecallMark();
        uint64_t v44 = 48;
        goto LABEL_155;
      case 8:
        if (!v38) {
          goto LABEL_165;
        }
        if ((*(unsigned char *)(a1 + 184) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_254;
          }
          int v84 = (int)(*(_DWORD *)(a1 + 184) << 24) >> 31;
          goto LABEL_220;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_254;
        }
        unsigned int v43 = objc_alloc_init(GEOPDAutocompleteEntryBrandProfile);
        if (!GEOPDAutocompleteEntryBrandProfileReadAllFrom((uint64_t)v43, (void *)v3)) {
          goto LABEL_253;
        }
        PBReaderRecallMark();
        uint64_t v44 = 32;
        goto LABEL_155;
      case 9:
        if (!v38) {
          goto LABEL_165;
        }
        if ((*(unsigned char *)(a1 + 185) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_254;
          }
          int v84 = (int)(*(_DWORD *)(a1 + 184) << 16) >> 31;
          goto LABEL_220;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_254;
        }
        unsigned int v43 = objc_alloc_init(GEOPDAutocompleteEntryOfflineArea);
        if (!GEOPDAutocompleteEntryOfflineAreaReadAllFrom((uint64_t)v43, (void *)v3)) {
          goto LABEL_253;
        }
        PBReaderRecallMark();
        uint64_t v44 = 96;
        goto LABEL_155;
      case 10:
        if (!v38) {
          goto LABEL_165;
        }
        if ((*(unsigned char *)(a1 + 185) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_254;
          }
          int v84 = (int)(*(_DWORD *)(a1 + 184) << 21) >> 31;
          goto LABEL_220;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_254;
        }
        unsigned int v43 = objc_alloc_init(GEOPDAutocompleteEntryClientResolved);
        if (!GEOPDAutocompleteEntryClientResolvedReadAllFrom((uint64_t)v43, (void *)v3)) {
          goto LABEL_253;
        }
        PBReaderRecallMark();
        uint64_t v44 = 56;
        goto LABEL_155;
      case 11:
        if (!v38) {
          goto LABEL_165;
        }
        if ((*(unsigned char *)(a1 + 185) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_254;
          }
          int v84 = (int)(*(_DWORD *)(a1 + 184) << 19) >> 31;
          goto LABEL_220;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_254;
        }
        unsigned int v43 = objc_alloc_init(GEOPDAutocompleteEntryDirectionIntent);
        if (!GEOPDAutocompleteEntryDirectionIntentReadAllFrom((uint64_t)v43, (void *)v3, v11 & 1)) {
          goto LABEL_253;
        }
        PBReaderRecallMark();
        uint64_t v44 = 72;
        goto LABEL_155;
      case 12:
        if (!v38) {
          goto LABEL_165;
        }
        if ((*(unsigned char *)(a1 + 186) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_254;
          }
          int v84 = (int)(*(_DWORD *)(a1 + 184) << 11) >> 31;
          goto LABEL_220;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_254;
        }
        unsigned int v43 = objc_alloc_init(GEOPDRetainedSearchMetadata);
        if (!GEOPDRetainedSearchMetadataReadAllFrom((uint64_t)v43, (void *)v3, v11 & 1)) {
          goto LABEL_253;
        }
        PBReaderRecallMark();
        uint64_t v44 = 136;
        goto LABEL_155;
      case 13:
        if (!v38) {
          goto LABEL_165;
        }
        if (*(unsigned char *)(a1 + 186))
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_254;
          }
          int v84 = (int)(*(_DWORD *)(a1 + 184) << 15) >> 31;
          goto LABEL_220;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_254;
        }
        unsigned int v43 = objc_alloc_init(GEOPDParsecRankingFeatures);
        if (!GEOPDParsecRankingFeaturesReadAllFrom((uint64_t)v43, (void *)v3)) {
          goto LABEL_253;
        }
        PBReaderRecallMark();
        uint64_t v44 = 104;
        goto LABEL_155;
      case 14:
        if ((v9 & 1) == 0) {
          goto LABEL_165;
        }
        char v55 = 0;
        unsigned int v56 = 0;
        uint64_t v50 = 0;
        *(_DWORD *)(a1 + 184) |= 4u;
        while (2)
        {
          uint64_t v57 = *v24;
          uint64_t v58 = *(void *)(v3 + v57);
          unint64_t v59 = v58 + 1;
          if (v58 == -1 || v59 > *(void *)(v3 + *v7))
          {
            *(unsigned char *)(v3 + *v25) = 1;
          }
          else
          {
            char v60 = *(unsigned char *)(*(void *)(v3 + *v26) + v58);
            *(void *)(v3 + v57) = v59;
            v50 |= (unint64_t)(v60 & 0x7F) << v55;
            if (v60 < 0)
            {
              v55 += 7;
              BOOL v34 = v56++ >= 9;
              if (v34)
              {
                LODWORD(v50) = 0;
                goto LABEL_174;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v25)) {
          LODWORD(v50) = 0;
        }
LABEL_174:
        uint64_t v83 = 172;
        goto LABEL_187;
      case 15:
        if ((v9 & 1) == 0) {
          goto LABEL_165;
        }
        char v61 = 0;
        unsigned int v62 = 0;
        uint64_t v50 = 0;
        *(_DWORD *)(a1 + 184) |= 2u;
        while (2)
        {
          uint64_t v63 = *v24;
          uint64_t v64 = *(void *)(v3 + v63);
          unint64_t v65 = v64 + 1;
          if (v64 == -1 || v65 > *(void *)(v3 + *v7))
          {
            *(unsigned char *)(v3 + *v25) = 1;
          }
          else
          {
            char v66 = *(unsigned char *)(*(void *)(v3 + *v26) + v64);
            *(void *)(v3 + v63) = v65;
            v50 |= (unint64_t)(v66 & 0x7F) << v61;
            if (v66 < 0)
            {
              v61 += 7;
              BOOL v34 = v62++ >= 9;
              if (v34)
              {
                LODWORD(v50) = 0;
                goto LABEL_178;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v25)) {
          LODWORD(v50) = 0;
        }
LABEL_178:
        uint64_t v83 = 168;
        goto LABEL_187;
      case 16:
        if (!v38) {
          goto LABEL_165;
        }
        if ((*(unsigned char *)(a1 + 186) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_254;
          }
          int v84 = (int)(*(_DWORD *)(a1 + 184) << 10) >> 31;
          goto LABEL_220;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_254;
        }
        unsigned int v43 = objc_alloc_init(GEOPDServerResultScoreMetadata);
        if (!GEOPDServerResultScoreMetadataReadAllFrom((uint64_t)v43, (void *)v3)) {
          goto LABEL_253;
        }
        PBReaderRecallMark();
        uint64_t v44 = 144;
        goto LABEL_155;
      case 17:
        if ((v9 & 1) == 0) {
          goto LABEL_165;
        }
        char v67 = 0;
        unsigned int v68 = 0;
        uint64_t v69 = 0;
        *(_DWORD *)(a1 + 184) |= 0x10u;
        while (2)
        {
          uint64_t v70 = *v24;
          uint64_t v71 = *(void *)(v3 + v70);
          unint64_t v72 = v71 + 1;
          if (v71 == -1 || v72 > *(void *)(v3 + *v7))
          {
            *(unsigned char *)(v3 + *v25) = 1;
          }
          else
          {
            char v73 = *(unsigned char *)(*(void *)(v3 + *v26) + v71);
            *(void *)(v3 + v70) = v72;
            v69 |= (unint64_t)(v73 & 0x7F) << v67;
            if (v73 < 0)
            {
              v67 += 7;
              BOOL v34 = v68++ >= 9;
              if (v34)
              {
                uint64_t v69 = 0;
                goto LABEL_182;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v25)) {
          uint64_t v69 = 0;
        }
LABEL_182:
        *(unsigned char *)(a1 + 180) = v69 != 0;
        goto LABEL_222;
      case 18:
        if (!v38) {
          goto LABEL_165;
        }
        if ((*(unsigned char *)(a1 + 186) & 4) == 0)
        {
          uint64_t v74 = PBReaderReadString();
          BOOL v75 = *(void **)(a1 + 120);
          *(void *)(a1 + 120) = v74;
          goto LABEL_156;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_254;
        }
        int v84 = (int)(*(_DWORD *)(a1 + 184) << 13) >> 31;
        goto LABEL_220;
      case 19:
        if (!v38) {
          goto LABEL_165;
        }
        if ((*(unsigned char *)(a1 + 185) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_254;
          }
          int v84 = (int)(*(_DWORD *)(a1 + 184) << 20) >> 31;
          goto LABEL_220;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_254;
        }
        unsigned int v43 = objc_alloc_init(GEOPDAutocompleteEntryCollection);
        if (!GEOPDAutocompleteEntryCollectionReadAllFrom((uint64_t)v43, (void *)v3)) {
          goto LABEL_253;
        }
        PBReaderRecallMark();
        uint64_t v44 = 64;
        goto LABEL_155;
      case 20:
        if (!v38) {
          goto LABEL_165;
        }
        if ((*(unsigned char *)(a1 + 186) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_254;
          }
          int v84 = (int)(*(_DWORD *)(a1 + 184) << 14) >> 31;
LABEL_220:
          v8 += v84;
LABEL_221:
          uint64_t v25 = (int *)MEMORY[0x1E4F940C8];
          unsigned int v7 = (int *)MEMORY[0x1E4F940E0];
          unint64_t v26 = (int *)MEMORY[0x1E4F940B8];
LABEL_222:
          if (!(v91 & 1 | (v8 != 0))) {
            goto LABEL_223;
          }
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_254;
        }
        unsigned int v43 = objc_alloc_init(GEOPDAutocompleteEntryPublisher);
        if (GEOPDAutocompleteEntryPublisherReadAllFrom((uint64_t)v43, (void *)v3))
        {
          PBReaderRecallMark();
          uint64_t v44 = 112;
LABEL_155:
          BOOL v75 = *(void **)(a1 + v44);
          *(void *)(a1 + v44) = v43;
LABEL_156:

          --v8;
          goto LABEL_221;
        }
LABEL_253:

LABEL_254:
        int v89 = 0;
        uint64_t v25 = (int *)MEMORY[0x1E4F940C8];
LABEL_224:
        if (v90) {
LABEL_225:
        }
          *(_DWORD *)(a1 + 184) |= 0x20u;
        if (v93 || (v89 & 1) == 0)
        {
          *(_DWORD *)(a1 + 184) |= 0x4000u;
          *(_DWORD *)(a1 + 184) |= 0x2000u;
          *(_DWORD *)(a1 + 184) |= 0x80000u;
          *(_DWORD *)(a1 + 184) |= 0x100u;
          *(_DWORD *)(a1 + 184) |= 0x40u;
          *(_DWORD *)(a1 + 184) |= 0x200u;
          *(_DWORD *)(a1 + 184) |= 0x80u;
          *(_DWORD *)(a1 + 184) |= 0x8000u;
          *(_DWORD *)(a1 + 184) |= 0x400u;
          *(_DWORD *)(a1 + 184) |= 0x1000u;
          *(_DWORD *)(a1 + 184) |= 0x100000u;
          *(_DWORD *)(a1 + 184) |= 0x10000u;
          *(_DWORD *)(a1 + 184) |= 0x200000u;
          *(_DWORD *)(a1 + 184) |= 0x40000u;
          *(_DWORD *)(a1 + 184) |= 0x800u;
          *(_DWORD *)(a1 + 184) |= 0x20000u;
        }
        else if (v23)
        {
          while (1)
          {
            int v86 = *v23++;
            int v85 = 0x4000;
            switch(v86)
            {
              case 0:
                goto LABEL_247;
              case 1:
                goto LABEL_245;
              case 2:
                int v85 = 0x2000;
                goto LABEL_245;
              case 4:
                int v85 = 0x80000;
                goto LABEL_245;
              case 5:
                int v85 = 256;
                goto LABEL_245;
              case 6:
                int v85 = 64;
                goto LABEL_245;
              case 7:
                int v85 = 512;
                goto LABEL_245;
              case 8:
                int v85 = 128;
                goto LABEL_245;
              case 9:
                int v85 = 0x8000;
                goto LABEL_245;
              case 10:
                int v85 = 1024;
                goto LABEL_245;
              case 11:
                int v85 = 4096;
                goto LABEL_245;
              case 12:
                int v85 = 0x100000;
                goto LABEL_245;
              case 13:
                int v85 = 0x10000;
                goto LABEL_245;
              case 16:
                int v85 = 0x200000;
                goto LABEL_245;
              case 18:
                int v85 = 0x40000;
                goto LABEL_245;
              case 19:
                int v85 = 2048;
                goto LABEL_245;
              case 20:
                int v85 = 0x20000;
LABEL_245:
                *(_DWORD *)(a1 + 184) |= v85;
                break;
              default:
                continue;
            }
          }
        }
LABEL_247:
        if (v89) {
          unint64_t v3 = *(unsigned char *)(v3 + *v25) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v93)
        {
          BOOL v87 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      case 21:
        if ((v9 & 1) == 0) {
          goto LABEL_165;
        }
        char v76 = 0;
        unsigned int v77 = 0;
        uint64_t v50 = 0;
        *(_DWORD *)(a1 + 184) |= 1u;
        while (2)
        {
          uint64_t v78 = *v24;
          uint64_t v79 = *(void *)(v3 + v78);
          unint64_t v80 = v79 + 1;
          if (v79 == -1 || v80 > *(void *)(v3 + *v7))
          {
            *(unsigned char *)(v3 + *v25) = 1;
          }
          else
          {
            char v81 = *(unsigned char *)(*(void *)(v3 + *v26) + v79);
            *(void *)(v3 + v78) = v80;
            v50 |= (unint64_t)(v81 & 0x7F) << v76;
            if (v81 < 0)
            {
              v76 += 7;
              BOOL v34 = v77++ >= 9;
              if (v34)
              {
                LODWORD(v50) = 0;
                goto LABEL_186;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v25)) {
          LODWORD(v50) = 0;
        }
LABEL_186:
        uint64_t v83 = 164;
LABEL_187:
        *(_DWORD *)(a1 + v83) = v50;
        goto LABEL_222;
      default:
        if ((v90 & 1) == 0 || (*(unsigned char *)(a1 + 184) & 0x20) != 0)
        {
LABEL_165:
          char v82 = PBReaderSkipValueWithTag();
          unint64_t v26 = (int *)MEMORY[0x1E4F940B8];
          unsigned int v7 = (int *)MEMORY[0x1E4F940E0];
          uint64_t v25 = (int *)MEMORY[0x1E4F940C8];
          if ((v82 & 1) == 0)
          {
            int v89 = 0;
            goto LABEL_224;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v45 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            uint64_t v46 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v45;
          }
          int v47 = PBUnknownFieldAdd();
          uint64_t v25 = (int *)MEMORY[0x1E4F940C8];
          unsigned int v7 = (int *)MEMORY[0x1E4F940E0];
          unint64_t v26 = (int *)MEMORY[0x1E4F940B8];
          if (!v47)
          {
            int v89 = 0;
            goto LABEL_225;
          }
        }
        goto LABEL_222;
    }
  }
}

BOOL GEOPDAutocompleteEntryIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  id v2 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] >= *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
LABEL_146:
    BOOL v58 = a1[*v4] == 0;
    PBReaderRecallMark();
    return v58;
  }
  uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (a1[*v4]) {
      goto LABEL_146;
    }
    char v6 = 0;
    unsigned int v7 = 0;
    unint64_t v8 = 0;
    while (1)
    {
      uint64_t v9 = *v2;
      uint64_t v10 = *(void *)&a1[v9];
      unint64_t v11 = v10 + 1;
      if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
        break;
      }
      char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
      *(void *)&a1[v9] = v11;
      v8 |= (unint64_t)(v12 & 0x7F) << v6;
      if ((v12 & 0x80) == 0) {
        goto LABEL_12;
      }
      v6 += 7;
      BOOL v13 = v7++ >= 9;
      if (v13)
      {
        unint64_t v8 = 0;
        int v14 = a1[*v4];
        goto LABEL_14;
      }
    }
    a1[*v4] = 1;
LABEL_12:
    int v14 = a1[*v4];
    if (a1[*v4]) {
      unint64_t v8 = 0;
    }
LABEL_14:
    int v15 = v8 & 7;
    if (v14 || v15 == 4) {
      goto LABEL_146;
    }
    switch((v8 >> 3))
    {
      case 1u:
      case 2u:
        if (v15 == 2 && PBReaderPlaceMark() && GEOPDAutocompleteEntryHighlightLineIsValid(a1)) {
          goto LABEL_132;
        }
        goto LABEL_148;
      case 3u:
        if ((v8 & 7) != 0) {
          goto LABEL_148;
        }
        unsigned int v17 = 0;
        while (1)
        {
          uint64_t v18 = *v2;
          uint64_t v19 = *(void *)&a1[v18];
          unint64_t v20 = v19 + 1;
          if (v19 == -1 || v20 > *(void *)&a1[*v3]) {
            goto LABEL_143;
          }
          int v21 = *(char *)(*(void *)&a1[*v5] + v19);
          *(void *)&a1[v18] = v20;
          if (v21 < 0)
          {
            BOOL v22 = v17++ > 8;
            if (!v22) {
              continue;
            }
          }
          goto LABEL_133;
        }
      case 4u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDAutocompleteEntryQueryIsValid(a1)) {
          goto LABEL_148;
        }
        goto LABEL_132;
      case 5u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDAutocompleteEntryBusinessIsValid(a1)) {
          goto LABEL_148;
        }
        goto LABEL_132;
      case 6u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDAutocompleteEntryAddressIsValid(a1)) {
          goto LABEL_148;
        }
        goto LABEL_132;
      case 7u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDAutocompleteEntryCategoryIsValid(a1)) {
          goto LABEL_148;
        }
        goto LABEL_132;
      case 8u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDAutocompleteEntryBrandProfileIsValid(a1)) {
          goto LABEL_148;
        }
        goto LABEL_132;
      case 9u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDAutocompleteEntryOfflineAreaIsValid(a1)) {
          goto LABEL_148;
        }
        goto LABEL_132;
      case 0xAu:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDAutocompleteEntryClientResolvedIsValid(a1)) {
          goto LABEL_148;
        }
        goto LABEL_132;
      case 0xBu:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDAutocompleteEntryDirectionIntentIsValid(a1)) {
          goto LABEL_148;
        }
        goto LABEL_132;
      case 0xCu:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDRetainedSearchMetadataIsValid(a1)) {
          goto LABEL_148;
        }
        goto LABEL_132;
      case 0xDu:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDParsecRankingFeaturesIsValid(a1)) {
          goto LABEL_148;
        }
        goto LABEL_132;
      case 0xEu:
        if ((v8 & 7) != 0) {
          goto LABEL_148;
        }
        unsigned int v23 = 0;
        while (1)
        {
          uint64_t v24 = *v2;
          uint64_t v25 = *(void *)&a1[v24];
          unint64_t v26 = v25 + 1;
          if (v25 == -1 || v26 > *(void *)&a1[*v3]) {
            goto LABEL_143;
          }
          int v27 = *(char *)(*(void *)&a1[*v5] + v25);
          *(void *)&a1[v24] = v26;
          if (v27 < 0)
          {
            BOOL v22 = v23++ > 8;
            if (!v22) {
              continue;
            }
          }
          goto LABEL_133;
        }
      case 0xFu:
        if ((v8 & 7) != 0) {
          goto LABEL_148;
        }
        unsigned int v28 = 0;
        while (1)
        {
          uint64_t v29 = *v2;
          uint64_t v30 = *(void *)&a1[v29];
          unint64_t v31 = v30 + 1;
          if (v30 == -1 || v31 > *(void *)&a1[*v3]) {
            goto LABEL_143;
          }
          int v32 = *(char *)(*(void *)&a1[*v5] + v30);
          *(void *)&a1[v29] = v31;
          if (v32 < 0)
          {
            BOOL v22 = v28++ > 8;
            if (!v22) {
              continue;
            }
          }
          goto LABEL_133;
        }
      case 0x10u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_148;
        }
        objc_msgSend(a1, "position", 0, 0);
        [a1 length];
LABEL_90:
        if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
          goto LABEL_144;
        }
        char v33 = 0;
        unsigned int v34 = 0;
        unint64_t v35 = 0;
        while (1)
        {
          uint64_t v36 = *v2;
          uint64_t v37 = *(void *)&a1[v36];
          unint64_t v38 = v37 + 1;
          if (v37 == -1 || v38 > *(void *)&a1[*v3]) {
            break;
          }
          char v39 = *(unsigned char *)(*(void *)&a1[*v5] + v37);
          *(void *)&a1[v36] = v38;
          v35 |= (unint64_t)(v39 & 0x7F) << v33;
          if ((v39 & 0x80) == 0) {
            goto LABEL_100;
          }
          v33 += 7;
          BOOL v13 = v34++ >= 9;
          if (v13)
          {
            unint64_t v35 = 0;
            uint64_t v40 = *v4;
            int v41 = a1[v40];
            goto LABEL_102;
          }
        }
        a1[*v4] = 1;
LABEL_100:
        uint64_t v40 = *v4;
        int v41 = a1[v40];
        if (a1[v40]) {
          unint64_t v35 = 0;
        }
LABEL_102:
        int v42 = v35 & 7;
        if (v41 || v42 == 4)
        {
LABEL_144:
          int v57 = a1[*v4];
          PBReaderRecallMark();
          if (v57) {
            goto LABEL_148;
          }
LABEL_132:
          PBReaderRecallMark();
LABEL_133:
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
            goto LABEL_146;
          }
          continue;
        }
        if ((v35 >> 3) != 1)
        {
          if (!PBReaderSkipValueWithTag()) {
            goto LABEL_147;
          }
          goto LABEL_90;
        }
        if (v42 == 5)
        {
          uint64_t v44 = *v2;
          unint64_t v45 = *(void *)&a1[v44];
          if (v45 <= 0xFFFFFFFFFFFFFFFBLL && (unint64_t v46 = v45 + 4, v46 <= *(void *)&a1[*v3])) {
            *(void *)&a1[v44] = v46;
          }
          else {
            a1[v40] = 1;
          }
          goto LABEL_90;
        }
LABEL_147:
        PBReaderRecallMark();
LABEL_148:
        PBReaderRecallMark();
        return 0;
      case 0x11u:
        if ((v8 & 7) != 0) {
          goto LABEL_148;
        }
        unsigned int v47 = 0;
        while (1)
        {
          uint64_t v48 = *v2;
          uint64_t v49 = *(void *)&a1[v48];
          unint64_t v50 = v49 + 1;
          if (v49 == -1 || v50 > *(void *)&a1[*v3]) {
            goto LABEL_143;
          }
          int v51 = *(char *)(*(void *)&a1[*v5] + v49);
          *(void *)&a1[v48] = v50;
          if (v51 < 0)
          {
            BOOL v22 = v47++ > 8;
            if (!v22) {
              continue;
            }
          }
          goto LABEL_133;
        }
      case 0x12u:
        if (v15 == 2) {
          goto LABEL_123;
        }
        goto LABEL_148;
      case 0x13u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDAutocompleteEntryCollectionIsValid(a1)) {
          goto LABEL_148;
        }
        goto LABEL_132;
      case 0x14u:
        if (v15 == 2 && PBReaderPlaceMark() && GEOPDAutocompleteEntryPublisherIsValid(a1)) {
          goto LABEL_132;
        }
        goto LABEL_148;
      case 0x15u:
        if ((v8 & 7) != 0) {
          goto LABEL_148;
        }
        unsigned int v52 = 0;
        while (1)
        {
          uint64_t v53 = *v2;
          uint64_t v54 = *(void *)&a1[v53];
          unint64_t v55 = v54 + 1;
          if (v54 == -1 || v55 > *(void *)&a1[*v3]) {
            break;
          }
          int v56 = *(char *)(*(void *)&a1[*v5] + v54);
          *(void *)&a1[v53] = v55;
          if (v56 < 0)
          {
            BOOL v22 = v52++ > 8;
            if (!v22) {
              continue;
            }
          }
          goto LABEL_133;
        }
LABEL_143:
        a1[*v4] = 1;
        goto LABEL_133;
      default:
LABEL_123:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_148;
        }
        goto LABEL_133;
    }
  }
}

unint64_t GEOPDAutocompleteEntryHighlightLineReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 44))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOPDAutocompleteEntryHighlightLineReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = [v8 position];
  *(_DWORD *)(a1 + 44) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOPDAutocompleteEntryHighlightLineReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOPDAutocompleteEntryHighlightLineReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOPDAutocompleteEntryHighlightLineReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOPDAutocompleteEntryHighlightLineCallReadAllRecursiveWithoutSynchronized(a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_18909CA8C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDAutocompleteEntryCategoryIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  id v2 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    while (!a1[*v4])
    {
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        break;
      }
      switch((v8 >> 3))
      {
        case 1u:
          if (v15 == 2 && PBReaderPlaceMark() && GEOLocalizedStringIsValid(a1)) {
            goto LABEL_33;
          }
          goto LABEL_36;
        case 2u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOStyleAttributesIsValid(a1)) {
            goto LABEL_36;
          }
          goto LABEL_33;
        case 3u:
          if (v15 == 2) {
            goto LABEL_28;
          }
          goto LABEL_36;
        case 4u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDVenueIdentifierIsValid(a1)) {
            goto LABEL_36;
          }
LABEL_33:
          PBReaderRecallMark();
          goto LABEL_34;
        default:
LABEL_28:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_36:
            PBReaderRecallMark();
            return 0;
          }
LABEL_34:
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
            goto LABEL_35;
          }
          break;
      }
    }
  }
LABEL_35:
  BOOL v17 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v17;
}

BOOL GEOPDAutocompleteEntryBrandProfileIsValid(char *a1)
{
  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  id v2 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        break;
      }
      if ((v8 >> 3) == 1)
      {
        if (v15 != 2 || (PBReaderSkipValueWithTag() & 1) == 0)
        {
LABEL_26:
          BOOL v17 = 0;
          goto LABEL_25;
        }
      }
      else if (!PBReaderSkipValueWithTag())
      {
        goto LABEL_26;
      }
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v17 = a1[*v4] == 0;
LABEL_25:
  PBReaderRecallMark();
  return v17;
}

BOOL GEOPDAutocompleteEntryAddressIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  id v2 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          uint64_t v14 = *v4;
          int v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      uint64_t v14 = *v4;
      int v15 = a1[v14];
      if (a1[v14]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v16 = v8 & 7;
      if (v15 || v16 == 4) {
        break;
      }
      switch((v8 >> 3))
      {
        case 1u:
          if (v16 == 2 && PBReaderPlaceMark() && GEOLatLngIsValid(a1)) {
            goto LABEL_48;
          }
          goto LABEL_62;
        case 2u:
          if ((v8 & 7) != 0) {
            goto LABEL_62;
          }
          unsigned int v21 = 0;
          while (1)
          {
            uint64_t v22 = *v2;
            uint64_t v23 = *(void *)&a1[v22];
            unint64_t v24 = v23 + 1;
            if (v23 == -1 || v24 > *(void *)&a1[*v3]) {
              goto LABEL_57;
            }
            int v25 = *(char *)(*(void *)&a1[*v5] + v23);
            *(void *)&a1[v22] = v24;
            if (v25 < 0)
            {
              BOOL v26 = v21++ > 8;
              if (!v26) {
                continue;
              }
            }
            goto LABEL_59;
          }
        case 3u:
        case 5u:
          if (v16 != 1) {
            goto LABEL_62;
          }
          uint64_t v18 = *v2;
          unint64_t v19 = *(void *)&a1[v18];
          if (v19 > 0xFFFFFFFFFFFFFFF7) {
            goto LABEL_58;
          }
          unint64_t v20 = v19 + 8;
          if (v20 > *(void *)&a1[*v3]) {
            goto LABEL_58;
          }
          *(void *)&a1[v18] = v20;
          continue;
        case 4u:
          if ((v8 & 7) != 0) {
            goto LABEL_62;
          }
          unsigned int v27 = 0;
          while (1)
          {
            uint64_t v28 = *v2;
            uint64_t v29 = *(void *)&a1[v28];
            unint64_t v30 = v29 + 1;
            if (v29 == -1 || v30 > *(void *)&a1[*v3]) {
              goto LABEL_57;
            }
            int v31 = *(char *)(*(void *)&a1[*v5] + v29);
            *(void *)&a1[v28] = v30;
            if (v31 < 0)
            {
              BOOL v26 = v27++ > 8;
              if (!v26) {
                continue;
              }
            }
            goto LABEL_59;
          }
        case 6u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOPDMapsIdentifierIsValid(a1)) {
            goto LABEL_62;
          }
LABEL_48:
          PBReaderRecallMark();
          continue;
        case 7u:
          if ((v8 & 7) != 0) {
            goto LABEL_62;
          }
          unsigned int v32 = 0;
          break;
        default:
          if (PBReaderSkipValueWithTag()) {
            continue;
          }
LABEL_62:
          PBReaderRecallMark();
          return 0;
      }
      while (1)
      {
        uint64_t v33 = *v2;
        uint64_t v34 = *(void *)&a1[v33];
        unint64_t v35 = v34 + 1;
        if (v34 == -1 || v35 > *(void *)&a1[*v3]) {
          break;
        }
        int v36 = *(char *)(*(void *)&a1[*v5] + v34);
        *(void *)&a1[v33] = v35;
        if (v36 < 0)
        {
          BOOL v26 = v32++ > 8;
          if (!v26) {
            continue;
          }
        }
        goto LABEL_59;
      }
LABEL_57:
      uint64_t v14 = *v4;
LABEL_58:
      a1[v14] = 1;
LABEL_59:
      ;
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v37 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v37;
}

unint64_t GEOPDAddressWithComponentsReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 52))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOPDAddressWithComponentsReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = [v8 position];
  *(_DWORD *)(a1 + 52) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOPDAddressWithComponentsReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOPDAddressWithComponentsReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOPDAddressWithComponentsReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOPDAddressWithComponentsCallReadAllRecursiveWithoutSynchronized(a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return Specified;
}

void sub_18909D364(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDAddressRecommendationParametersReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  char v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 44);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 40)];
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  int v12 = ((*(unsigned __int8 *)(a1 + 52) >> 1) & 1)
      + (*(unsigned char *)(a1 + 52) & 1)
      + ((*(unsigned __int8 *)(a1 + 52) >> 2) & 1);
  while (2)
  {
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    switch(a3[v10])
    {
      case -4:
        ++v12;
        uint64_t v13 = v7;
        goto LABEL_8;
      case -3:
        char v9 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v13 = v7;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v16 = v12 != 0;
        char v17 = v16 & ~(_BYTE)v11 | v8;
        unsigned __int8 v18 = v16 | v11;
        char v53 = v17;
        char v54 = v18 | v17;
        if ((v18 | v9)) {
          unint64_t v19 = 0;
        }
        else {
          unint64_t v19 = a3;
        }
        unint64_t v20 = (int *)MEMORY[0x1E4F940E8];
        char v55 = (v19 == 0) | v18;
        BOOL v56 = v18;
        unsigned int v21 = (int *)MEMORY[0x1E4F940C8];
        uint64_t v22 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v12;
LABEL_7:
        uint64_t v13 = v7;
        uint64_t v14 = v8;
LABEL_8:
        uint64_t v15 = v11;
LABEL_10:
        ++v10;
        uint64_t v7 = v13;
        uint64_t v8 = v14;
        uint64_t v11 = v15;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(void *)(v3 + *v20) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v21)) {
      goto LABEL_64;
    }
    char v23 = 0;
    unsigned int v24 = 0;
    unint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = *v20;
      uint64_t v27 = *(void *)(v3 + v26);
      unint64_t v28 = v27 + 1;
      if (v27 == -1 || v28 > *(void *)(v3 + *v6)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(v3 + *v22) + v27);
      *(void *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0) {
        goto LABEL_25;
      }
      v23 += 7;
      if (v24++ >= 9)
      {
        unint64_t v25 = 0;
        int v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v21) = 1;
LABEL_25:
    int v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(unsigned char *)(v3 + *v21)) {
      unint64_t v25 = 0;
    }
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_64:
      int v51 = 1;
      goto LABEL_65;
    }
    unint64_t v33 = v25 >> 3;
    BOOL v34 = v56;
    if ((v55 & 1) == 0)
    {
      unint64_t v35 = v19;
      do
      {
        int v37 = *v35++;
        int v36 = v37;
        BOOL v34 = v37 != 0;
        if (v37) {
          BOOL v38 = v36 == v33;
        }
        else {
          BOOL v38 = 1;
        }
      }
      while (!v38);
    }
    if (v33 == 2) {
      break;
    }
    if (v33 == 1)
    {
      if (!v34) {
        goto LABEL_55;
      }
      if ((*(unsigned char *)(a1 + 52) & 4) == 0)
      {
        uint64_t v39 = PBReaderReadString();
        uint64_t v40 = *(void **)(a1 + 32);
        *(void *)(a1 + 32) = v39;
        goto LABEL_48;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        goto LABEL_83;
      }
      char v46 = 32 * *(unsigned char *)(a1 + 52);
LABEL_61:
      v10 += v46 >> 7;
LABEL_62:
      unsigned int v21 = (int *)MEMORY[0x1E4F940C8];
      goto LABEL_63;
    }
    if (v53 & 1) == 0 || (*(unsigned char *)(a1 + 52))
    {
LABEL_55:
      char v45 = PBReaderSkipValueWithTag();
      unsigned int v21 = (int *)MEMORY[0x1E4F940C8];
      if ((v45 & 1) == 0)
      {
        int v51 = 0;
        goto LABEL_65;
      }
      goto LABEL_63;
    }
    if (!*(void *)(a1 + 16))
    {
      id v42 = objc_alloc_init(MEMORY[0x1E4F940B0]);
      unsigned int v43 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v42;
    }
    int v44 = PBUnknownFieldAdd();
    unsigned int v21 = (int *)MEMORY[0x1E4F940C8];
    if (!v44)
    {
      int v51 = 0;
      unsigned int v52 = &OBJC_IVAR___GEOTransitSectionOption__defaultSectionIndex;
      goto LABEL_66;
    }
LABEL_63:
    if (!(v54 & 1 | (v10 != 0))) {
      goto LABEL_64;
    }
  }
  if (!v34) {
    goto LABEL_55;
  }
  if ((*(unsigned char *)(a1 + 52) & 2) != 0)
  {
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      goto LABEL_83;
    }
    char v46 = *(unsigned char *)(a1 + 52) << 6;
    goto LABEL_61;
  }
  if ((PBReaderPlaceMark() & 1) == 0) {
    goto LABEL_83;
  }
  int v41 = objc_alloc_init(GEOPDAddressWithComponents);
  if (GEOPDAddressWithComponentsReadAllFrom((uint64_t)v41, (void *)v3, v7 & 1))
  {
    PBReaderRecallMark();
    uint64_t v40 = *(void **)(a1 + 24);
    *(void *)(a1 + 24) = v41;
LABEL_48:

    --v10;
    goto LABEL_62;
  }

LABEL_83:
  int v51 = 0;
  unsigned int v21 = (int *)MEMORY[0x1E4F940C8];
LABEL_65:
  unsigned int v52 = &OBJC_IVAR___GEOTransitSectionOption__defaultSectionIndex;
  if ((v53 & 1) == 0) {
    goto LABEL_67;
  }
LABEL_66:
  *(unsigned char *)(a1 + v52[901]) |= 1u;
LABEL_67:
  if (v56 || (v51 & 1) == 0)
  {
    *(unsigned char *)(a1 + v52[901]) |= 4u;
    *(unsigned char *)(a1 + v52[901]) |= 2u;
    goto LABEL_76;
  }
  if (v19)
  {
    while (2)
    {
      while (1)
      {
        int v48 = *v19++;
        int v47 = v48;
        if (v48 == 1) {
          break;
        }
        if (v47 == 2) {
          goto LABEL_75;
        }
        if (!v47) {
          goto LABEL_76;
        }
      }
      LOBYTE(v47) = 4;
LABEL_75:
      *(unsigned char *)(a1 + v52[901]) |= v47;
      continue;
    }
  }
LABEL_76:
  if (v51) {
    unint64_t v3 = *(unsigned char *)(v3 + *v21) == 0;
  }
  else {
    unint64_t v3 = 0;
  }
  if (v56)
  {
    uint64_t v49 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  return v3;
}

unint64_t GEOPDAddressRecommendationParametersReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 44))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOPDAddressRecommendationParametersReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = [v8 position];
  *(_DWORD *)(a1 + 44) = [v8 length];
  if (a3) {
    char v9 = (int *)&GEOPDAddressRecommendationParametersReadAllFrom_recursiveTag;
  }
  else {
    char v9 = (int *)&GEOPDAddressRecommendationParametersReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOPDAddressRecommendationParametersReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    -[GEOPDAddressWithComponents readAll:](*(void *)(a1 + 24), 1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_18909DA38(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDAddressObjectGeocodingResultReadAllFrom(uint64_t a1, void *a2, int a3)
{
  uint64_t v5 = a2;
  objc_sync_enter(v5);
  if (v5)
  {
    char v6 = (int *)MEMORY[0x1E4F940E8];
    uint64_t v7 = (int *)MEMORY[0x1E4F940E0];
    id v8 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v5[*MEMORY[0x1E4F940E8]] < *(void *)&v5[*MEMORY[0x1E4F940E0]])
    {
      char v9 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v5[*v8]) {
          break;
        }
        char v10 = 0;
        unsigned int v11 = 0;
        unint64_t v12 = 0;
        while (1)
        {
          uint64_t v13 = *v6;
          uint64_t v14 = *(void *)&v5[v13];
          unint64_t v15 = v14 + 1;
          if (v14 == -1 || v15 > *(void *)&v5[*v7]) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)&v5[*v9] + v14);
          *(void *)&v5[v13] = v15;
          v12 |= (unint64_t)(v16 & 0x7F) << v10;
          if ((v16 & 0x80) == 0) {
            goto LABEL_13;
          }
          v10 += 7;
          if (v11++ >= 9)
          {
            unint64_t v12 = 0;
            int v18 = v5[*v8];
            goto LABEL_15;
          }
        }
        v5[*v8] = 1;
LABEL_13:
        int v18 = v5[*v8];
        if (v5[*v8]) {
          unint64_t v12 = 0;
        }
LABEL_15:
        if (v18 || (v12 & 7) == 4) {
          break;
        }
        if ((v12 >> 3) == 1)
        {
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_29;
          }
          unint64_t v20 = objc_alloc_init(GEOPDMultiLocalizedString);
          if (!GEOPDMultiLocalizedStringReadAllFrom((uint64_t)v20, v5, a3))
          {

            goto LABEL_29;
          }
          PBReaderRecallMark();
          -[GEOPDAddressObjectGeocodingResult addDisambiguationLabel:](a1, v20);
        }
        else
        {
          if (!*(void *)(a1 + 8))
          {
            id v21 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            uint64_t v22 = *(void **)(a1 + 8);
            *(void *)(a1 + 8) = v21;
          }
          if (!PBUnknownFieldAdd()) {
            goto LABEL_29;
          }
        }
      }
      while (*(void *)&v5[*v6] < *(void *)&v5[*v7]);
    }
    BOOL v23 = v5[*v8] == 0;
  }
  else
  {
LABEL_29:
    BOOL v23 = 0;
  }
  objc_sync_exit(v5);

  return v23;
}

void sub_18909DC74(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDAddressObjectGeocodingParametersReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 44);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 40)];
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  int v11 = ((*(unsigned __int8 *)(a1 + 56) >> 2) & 1)
      + ((*(unsigned __int8 *)(a1 + 56) >> 3) & 1)
      + ((*(unsigned __int8 *)(a1 + 56) >> 1) & 1);
  while (2)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    switch(a3[v9])
    {
      case -4:
        ++v11;
        uint64_t v12 = v6;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v12 = v6;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v15 = v11 != 0;
        char v16 = v15 & ~(_BYTE)v10 | v7;
        unsigned __int8 v17 = v15 | v10;
        char v61 = v16;
        char v62 = v17 | v16;
        if ((v17 | v8)) {
          int v18 = 0;
        }
        else {
          int v18 = a3;
        }
        char v63 = (v18 == 0) | v17;
        BOOL v64 = v17;
        unint64_t v19 = (int *)MEMORY[0x1E4F940E8];
        unint64_t v20 = (int *)MEMORY[0x1E4F940C8];
        id v21 = (int *)MEMORY[0x1E4F940B8];
        uint64_t v22 = (int *)MEMORY[0x1E4F940E0];
        break;
      default:
        ++v11;
LABEL_7:
        uint64_t v12 = v6;
        uint64_t v13 = v7;
LABEL_8:
        uint64_t v14 = v10;
LABEL_10:
        ++v9;
        uint64_t v6 = v12;
        uint64_t v7 = v13;
        uint64_t v10 = v14;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(void *)(v3 + *v19) >= *(void *)(v3 + *v22) || *(unsigned char *)(v3 + *v20)) {
      goto LABEL_77;
    }
    char v23 = 0;
    unsigned int v24 = 0;
    unint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = *v19;
      uint64_t v27 = *(void *)(v3 + v26);
      unint64_t v28 = v27 + 1;
      if (v27 == -1 || v28 > *(void *)(v3 + *v22)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(v3 + *v21) + v27);
      *(void *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0) {
        goto LABEL_25;
      }
      v23 += 7;
      BOOL v30 = v24++ >= 9;
      if (v30)
      {
        unint64_t v25 = 0;
        int v31 = *(unsigned __int8 *)(v3 + *v20);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v20) = 1;
LABEL_25:
    int v31 = *(unsigned __int8 *)(v3 + *v20);
    if (*(unsigned char *)(v3 + *v20)) {
      unint64_t v25 = 0;
    }
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_77:
      int v59 = 1;
      goto LABEL_78;
    }
    unint64_t v33 = v25 >> 3;
    BOOL v34 = v64;
    if ((v63 & 1) == 0)
    {
      unint64_t v35 = v18;
      do
      {
        int v37 = *v35++;
        int v36 = v37;
        BOOL v34 = v37 != 0;
        if (v37) {
          BOOL v38 = v36 == v33;
        }
        else {
          BOOL v38 = 1;
        }
      }
      while (!v38);
    }
    if (v33 == 3) {
      break;
    }
    if (v33 == 2)
    {
      if ((v8 & 1) == 0) {
        goto LABEL_64;
      }
      char v42 = 0;
      unsigned int v43 = 0;
      uint64_t v44 = 0;
      *(unsigned char *)(a1 + 56) |= 1u;
      while (1)
      {
        uint64_t v45 = *v19;
        uint64_t v46 = *(void *)(v3 + v45);
        unint64_t v47 = v46 + 1;
        if (v46 == -1 || v47 > *(void *)(v3 + *v22)) {
          break;
        }
        char v48 = *(unsigned char *)(*(void *)(v3 + *v21) + v46);
        *(void *)(v3 + v45) = v47;
        v44 |= (unint64_t)(v48 & 0x7F) << v42;
        if ((v48 & 0x80) == 0) {
          goto LABEL_67;
        }
        v42 += 7;
        BOOL v30 = v43++ >= 9;
        if (v30)
        {
          LODWORD(v44) = 0;
          goto LABEL_69;
        }
      }
      *(unsigned char *)(v3 + *v20) = 1;
LABEL_67:
      if (*(unsigned char *)(v3 + *v20)) {
        LODWORD(v44) = 0;
      }
LABEL_69:
      *(_DWORD *)(a1 + 52) = v44;
    }
    else
    {
      if (v33 == 1)
      {
        if (!v34) {
          goto LABEL_64;
        }
        if ((*(unsigned char *)(a1 + 56) & 4) == 0)
        {
          uint64_t v39 = PBReaderReadData();
          uint64_t v40 = *(void **)(a1 + 24);
          *(void *)(a1 + 24) = v39;
          goto LABEL_49;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_97;
        }
        char v53 = 32 * *(unsigned char *)(a1 + 56);
LABEL_74:
        v9 += v53 >> 7;
LABEL_75:
        unint64_t v20 = (int *)MEMORY[0x1E4F940C8];
        uint64_t v22 = (int *)MEMORY[0x1E4F940E0];
        goto LABEL_76;
      }
      if ((v61 & 1) == 0 || (*(unsigned char *)(a1 + 56) & 2) != 0)
      {
LABEL_64:
        char v52 = PBReaderSkipValueWithTag();
        uint64_t v22 = (int *)MEMORY[0x1E4F940E0];
        unint64_t v20 = (int *)MEMORY[0x1E4F940C8];
        if ((v52 & 1) == 0)
        {
          int v59 = 0;
          goto LABEL_78;
        }
        goto LABEL_76;
      }
      if (!*(void *)(a1 + 16))
      {
        id v49 = objc_alloc_init(MEMORY[0x1E4F940B0]);
        unint64_t v50 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v49;
      }
      int v51 = PBUnknownFieldAdd();
      unint64_t v20 = (int *)MEMORY[0x1E4F940C8];
      uint64_t v22 = (int *)MEMORY[0x1E4F940E0];
      if (!v51)
      {
        int v59 = 0;
        char v60 = &OBJC_IVAR___GEOTransitSectionOption__defaultSectionIndex;
        goto LABEL_79;
      }
    }
LABEL_76:
    if (!(v62 & 1 | (v9 != 0))) {
      goto LABEL_77;
    }
  }
  if (!v34) {
    goto LABEL_64;
  }
  if ((*(unsigned char *)(a1 + 56) & 8) != 0)
  {
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      goto LABEL_97;
    }
    char v53 = 16 * *(unsigned char *)(a1 + 56);
    goto LABEL_74;
  }
  if ((PBReaderPlaceMark() & 1) == 0) {
    goto LABEL_97;
  }
  int v41 = objc_alloc_init(GEOPDViewportInfo);
  if (GEOPDViewportInfoReadAllFrom((uint64_t)v41, (void *)v3))
  {
    PBReaderRecallMark();
    uint64_t v40 = *(void **)(a1 + 32);
    *(void *)(a1 + 32) = v41;
LABEL_49:

    --v9;
    goto LABEL_75;
  }

LABEL_97:
  int v59 = 0;
  unint64_t v20 = (int *)MEMORY[0x1E4F940C8];
LABEL_78:
  char v60 = &OBJC_IVAR___GEOTransitSectionOption__defaultSectionIndex;
  if ((v61 & 1) == 0) {
    goto LABEL_80;
  }
LABEL_79:
  *(unsigned char *)(a1 + v60[890]) |= 2u;
LABEL_80:
  if (v64 || (v59 & 1) == 0)
  {
    *(unsigned char *)(a1 + v60[890]) |= 4u;
    *(unsigned char *)(a1 + v60[890]) |= 8u;
    goto LABEL_90;
  }
  if (v18)
  {
    while (2)
    {
      while (1)
      {
        int v55 = *v18++;
        int v54 = v55;
        if (v55 == 1) {
          break;
        }
        if (v54 == 3)
        {
          char v56 = 8;
          goto LABEL_89;
        }
        if (!v54) {
          goto LABEL_90;
        }
      }
      char v56 = 4;
LABEL_89:
      *(unsigned char *)(a1 + v60[890]) |= v56;
      continue;
    }
  }
LABEL_90:
  if (v59) {
    unint64_t v3 = *(unsigned char *)(v3 + *v20) == 0;
  }
  else {
    unint64_t v3 = 0;
  }
  if (v64)
  {
    int v57 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  return v3;
}

unint64_t GEOPDAddressObjectGeocodingParametersReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 44))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOPDAddressObjectGeocodingParametersReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = [v8 position];
  *(_DWORD *)(a1 + 44) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOPDAddressObjectGeocodingParametersReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOPDAddressObjectGeocodingParametersReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOPDAddressObjectGeocodingParametersReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    [*(id *)(a1 + 32) readAll:1];
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_18909E430(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDAdamAppIdentifierReadAllFrom(uint64_t a1, void *a2)
{
  unint64_t v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    uint64_t v4 = (int *)MEMORY[0x1E4F940E8];
    uint64_t v5 = (int *)MEMORY[0x1E4F940E0];
    uint64_t v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v3[*v6]) {
          break;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          if (v9++ >= 9)
          {
            unint64_t v10 = 0;
            int v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v16 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v16 || (v10 & 7) == 4) {
          break;
        }
        if ((v10 >> 3) == 1)
        {
          uint64_t v18 = PBReaderReadString();
          unint64_t v19 = *(void **)(a1 + 16);
          *(void *)(a1 + 16) = v18;
        }
        else
        {
          if (!*(void *)(a1 + 8))
          {
            id v20 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            id v21 = *(void **)(a1 + 8);
            *(void *)(a1 + 8) = v20;
          }
          if (!PBUnknownFieldAdd()) {
            goto LABEL_26;
          }
        }
      }
      while (*(void *)&v3[*v4] < *(void *)&v3[*v5]);
    }
    BOOL v22 = v3[*v6] == 0;
  }
  else
  {
LABEL_26:
    BOOL v22 = 0;
  }
  objc_sync_exit(v3);

  return v22;
}

void sub_18909E62C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPBTransitIncidentReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 104));
  uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 100);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 96)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unsigned int v12 = *(_DWORD *)(a1 + 136);
  uint32x4_t v13 = (uint32x4_t)vdupq_n_s32(v12);
  v14.i64[0] = 0x100000001;
  v14.i64[1] = 0x100000001;
  unsigned int v15 = vaddvq_s32(vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v13, (uint32x4_t)xmmword_18A63AB80), v14), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v13, (uint32x4_t)xmmword_18A63AB90), v14)))+ ((v12 >> 8) & 1);
  while (2)
  {
    uint64_t v16 = 1;
    uint64_t v17 = 1;
    uint64_t v18 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v15;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v17 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v19 = v15 > 5;
        char v20 = v19 & ~(_BYTE)v11 | v9;
        unsigned __int8 v21 = v19 | v11;
        char v108 = v20;
        char v109 = v8;
        char v110 = v21 | v20;
        if ((v21 | v8)) {
          BOOL v22 = 0;
        }
        else {
          BOOL v22 = a3;
        }
        char v111 = (v22 == 0) | v21;
        BOOL v112 = v21;
        char v23 = (int *)MEMORY[0x1E4F940E8];
        unsigned int v24 = (int *)MEMORY[0x1E4F940C8];
        unint64_t v25 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v15;
LABEL_7:
        uint64_t v16 = v9;
LABEL_8:
        uint64_t v17 = v10;
        uint64_t v18 = v11;
LABEL_10:
        ++v7;
        uint64_t v9 = v16;
        uint64_t v10 = v17;
        uint64_t v11 = v18;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v23) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v24)) {
      goto LABEL_192;
    }
    char v26 = 0;
    unsigned int v27 = 0;
    unint64_t v28 = 0;
    while (1)
    {
      uint64_t v29 = *v23;
      uint64_t v30 = *(void *)(v3 + v29);
      unint64_t v31 = v30 + 1;
      if (v30 == -1 || v31 > *(void *)(v3 + *v6)) {
        break;
      }
      char v32 = *(unsigned char *)(*(void *)(v3 + *v25) + v30);
      *(void *)(v3 + v29) = v31;
      v28 |= (unint64_t)(v32 & 0x7F) << v26;
      if ((v32 & 0x80) == 0) {
        goto LABEL_25;
      }
      v26 += 7;
      BOOL v33 = v27++ >= 9;
      if (v33)
      {
        unint64_t v28 = 0;
        int v34 = *(unsigned __int8 *)(v3 + *v24);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v24) = 1;
LABEL_25:
    int v34 = *(unsigned __int8 *)(v3 + *v24);
    if (*(unsigned char *)(v3 + *v24)) {
      unint64_t v28 = 0;
    }
LABEL_27:
    if (v34 || (v28 & 7) == 4)
    {
LABEL_192:
      int v107 = 1;
      goto LABEL_193;
    }
    unint64_t v36 = v28 >> 3;
    BOOL v37 = v112;
    if ((v111 & 1) == 0)
    {
      BOOL v38 = v22;
      do
      {
        int v40 = *v38++;
        int v39 = v40;
        BOOL v37 = v40 != 0;
        if (v40) {
          BOOL v41 = v39 == v36;
        }
        else {
          BOOL v41 = 1;
        }
      }
      while (!v41);
    }
    switch((int)v36)
    {
      case 1:
        if ((v109 & 1) == 0) {
          goto LABEL_140;
        }
        char v42 = 0;
        unsigned int v43 = 0;
        uint64_t v44 = 0;
        *(_DWORD *)(a1 + 136) |= 1u;
        while (1)
        {
          uint64_t v45 = *v23;
          uint64_t v46 = *(void *)(v3 + v45);
          unint64_t v47 = v46 + 1;
          if (v46 == -1 || v47 > *(void *)(v3 + *v6)) {
            break;
          }
          char v48 = *(unsigned char *)(*(void *)(v3 + *v25) + v46);
          *(void *)(v3 + v45) = v47;
          v44 |= (unint64_t)(v48 & 0x7F) << v42;
          if ((v48 & 0x80) == 0) {
            goto LABEL_143;
          }
          v42 += 7;
          BOOL v33 = v43++ >= 9;
          if (v33)
          {
            uint64_t v44 = 0;
            goto LABEL_145;
          }
        }
        *(unsigned char *)(v3 + *v24) = 1;
LABEL_143:
        if (*(unsigned char *)(v3 + *v24)) {
          uint64_t v44 = 0;
        }
LABEL_145:
        *(void *)(a1 + 32) = v44;
        goto LABEL_191;
      case 2:
      case 3:
      case 4:
        goto LABEL_56;
      case 5:
        if ((v109 & 1) == 0) {
          goto LABEL_140;
        }
        char v59 = 0;
        unsigned int v60 = 0;
        uint64_t v51 = 0;
        *(_DWORD *)(a1 + 136) |= 8u;
        while (2)
        {
          uint64_t v61 = *v23;
          uint64_t v62 = *(void *)(v3 + v61);
          unint64_t v63 = v62 + 1;
          if (v62 == -1 || v63 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v24) = 1;
          }
          else
          {
            char v64 = *(unsigned char *)(*(void *)(v3 + *v25) + v62);
            *(void *)(v3 + v61) = v63;
            v51 |= (unint64_t)(v64 & 0x7F) << v59;
            if (v64 < 0)
            {
              v59 += 7;
              BOOL v33 = v60++ >= 9;
              if (v33)
              {
                LODWORD(v51) = 0;
                goto LABEL_149;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v24)) {
          LODWORD(v51) = 0;
        }
LABEL_149:
        uint64_t v101 = 116;
        goto LABEL_190;
      case 6:
        if ((v109 & 1) == 0) {
          goto LABEL_140;
        }
        char v65 = 0;
        unsigned int v66 = 0;
        uint64_t v51 = 0;
        *(_DWORD *)(a1 + 136) |= 0x20u;
        while (2)
        {
          uint64_t v67 = *v23;
          uint64_t v68 = *(void *)(v3 + v67);
          unint64_t v69 = v68 + 1;
          if (v68 == -1 || v69 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v24) = 1;
          }
          else
          {
            char v70 = *(unsigned char *)(*(void *)(v3 + *v25) + v68);
            *(void *)(v3 + v67) = v69;
            v51 |= (unint64_t)(v70 & 0x7F) << v65;
            if (v70 < 0)
            {
              v65 += 7;
              BOOL v33 = v66++ >= 9;
              if (v33)
              {
                LODWORD(v51) = 0;
                goto LABEL_153;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v24)) {
          LODWORD(v51) = 0;
        }
LABEL_153:
        uint64_t v101 = 124;
        goto LABEL_190;
      case 7:
        if ((v109 & 1) == 0) {
          goto LABEL_140;
        }
        char v71 = 0;
        unsigned int v72 = 0;
        uint64_t v51 = 0;
        *(_DWORD *)(a1 + 136) |= 4u;
        while (2)
        {
          uint64_t v73 = *v23;
          uint64_t v74 = *(void *)(v3 + v73);
          unint64_t v75 = v74 + 1;
          if (v74 == -1 || v75 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v24) = 1;
          }
          else
          {
            char v76 = *(unsigned char *)(*(void *)(v3 + *v25) + v74);
            *(void *)(v3 + v73) = v75;
            v51 |= (unint64_t)(v76 & 0x7F) << v71;
            if (v76 < 0)
            {
              v71 += 7;
              BOOL v33 = v72++ >= 9;
              if (v33)
              {
                LODWORD(v51) = 0;
                goto LABEL_157;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v24)) {
          LODWORD(v51) = 0;
        }
LABEL_157:
        uint64_t v101 = 112;
        goto LABEL_190;
      case 8:
        if ((v109 & 1) == 0) {
          goto LABEL_140;
        }
        char v77 = 0;
        unsigned int v78 = 0;
        uint64_t v51 = 0;
        *(_DWORD *)(a1 + 136) |= 2u;
        while (2)
        {
          uint64_t v79 = *v23;
          uint64_t v80 = *(void *)(v3 + v79);
          unint64_t v81 = v80 + 1;
          if (v80 == -1 || v81 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v24) = 1;
          }
          else
          {
            char v82 = *(unsigned char *)(*(void *)(v3 + *v25) + v80);
            *(void *)(v3 + v79) = v81;
            v51 |= (unint64_t)(v82 & 0x7F) << v77;
            if (v82 < 0)
            {
              v77 += 7;
              BOOL v33 = v78++ >= 9;
              if (v33)
              {
                LODWORD(v51) = 0;
                goto LABEL_161;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v24)) {
          LODWORD(v51) = 0;
        }
LABEL_161:
        uint64_t v101 = 108;
        goto LABEL_190;
      case 9:
        if ((v109 & 1) == 0) {
          goto LABEL_140;
        }
        char v83 = 0;
        unsigned int v84 = 0;
        uint64_t v51 = 0;
        *(_DWORD *)(a1 + 136) |= 0x40u;
        while (2)
        {
          uint64_t v85 = *v23;
          uint64_t v86 = *(void *)(v3 + v85);
          unint64_t v87 = v86 + 1;
          if (v86 == -1 || v87 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v24) = 1;
          }
          else
          {
            char v88 = *(unsigned char *)(*(void *)(v3 + *v25) + v86);
            *(void *)(v3 + v85) = v87;
            v51 |= (unint64_t)(v88 & 0x7F) << v83;
            if (v88 < 0)
            {
              v83 += 7;
              BOOL v33 = v84++ >= 9;
              if (v33)
              {
                LODWORD(v51) = 0;
                goto LABEL_165;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v24)) {
          LODWORD(v51) = 0;
        }
LABEL_165:
        uint64_t v101 = 128;
        goto LABEL_190;
      case 10:
        if (!v37 || (*(unsigned char *)(a1 + 137) & 2) != 0) {
          goto LABEL_140;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_214;
        }
        int v89 = objc_alloc_init(GEOPBTransitIncidentEntity);
        if (!GEOPBTransitIncidentEntityReadAllFrom((uint64_t)v89, (void *)v3)) {
          goto LABEL_213;
        }
        PBReaderRecallMark();
        -[GEOPBTransitIncident _addNoFlagsAffectedEntity:](a1, v89);

        goto LABEL_185;
      case 11:
        if ((v109 & 1) == 0) {
          goto LABEL_140;
        }
        char v90 = 0;
        unsigned int v91 = 0;
        uint64_t v92 = 0;
        *(_DWORD *)(a1 + 136) |= 0x80u;
        while (2)
        {
          uint64_t v93 = *v23;
          uint64_t v94 = *(void *)(v3 + v93);
          unint64_t v95 = v94 + 1;
          if (v94 == -1 || v95 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v24) = 1;
          }
          else
          {
            char v96 = *(unsigned char *)(*(void *)(v3 + *v25) + v94);
            *(void *)(v3 + v93) = v95;
            v92 |= (unint64_t)(v96 & 0x7F) << v90;
            if (v96 < 0)
            {
              v90 += 7;
              BOOL v33 = v91++ >= 9;
              if (v33)
              {
                uint64_t v92 = 0;
                goto LABEL_169;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v24)) {
          uint64_t v92 = 0;
        }
LABEL_169:
        *(unsigned char *)(a1 + 132) = v92 != 0;
        goto LABEL_191;
      case 12:
        if (!v37) {
          goto LABEL_140;
        }
        if ((*(unsigned char *)(a1 + 137) & 8) == 0)
        {
          uint64_t v97 = PBReaderReadString();
          uint64_t v98 = 48;
          goto LABEL_133;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_214;
        }
        int v102 = (int)(*(_DWORD *)(a1 + 136) << 20) >> 31;
        goto LABEL_184;
      case 13:
        if (!v37) {
          goto LABEL_140;
        }
        if ((*(unsigned char *)(a1 + 137) & 0x80) == 0)
        {
          uint64_t v97 = PBReaderReadString();
          uint64_t v98 = 80;
          goto LABEL_133;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_214;
        }
        int v102 = (int)(*(_DWORD *)(a1 + 136) << 16) >> 31;
        goto LABEL_184;
      case 14:
        if (!v37) {
          goto LABEL_140;
        }
        if ((*(unsigned char *)(a1 + 138) & 1) == 0)
        {
          uint64_t v97 = PBReaderReadString();
          uint64_t v98 = 88;
          goto LABEL_133;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_214;
        }
        int v102 = (int)(*(_DWORD *)(a1 + 136) << 15) >> 31;
        goto LABEL_184;
      case 15:
        if (!v37) {
          goto LABEL_140;
        }
        if ((*(unsigned char *)(a1 + 137) & 0x40) == 0)
        {
          uint64_t v97 = PBReaderReadString();
          uint64_t v98 = 72;
          goto LABEL_133;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_214;
        }
        int v102 = (int)(*(_DWORD *)(a1 + 136) << 17) >> 31;
        goto LABEL_184;
      case 16:
        if (!v37) {
          goto LABEL_140;
        }
        if ((*(unsigned char *)(a1 + 137) & 0x10) == 0)
        {
          uint64_t v97 = PBReaderReadString();
          uint64_t v98 = 56;
          goto LABEL_133;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_214;
        }
        int v102 = (int)(*(_DWORD *)(a1 + 136) << 19) >> 31;
        goto LABEL_184;
      case 17:
        if (!v37) {
          goto LABEL_140;
        }
        if ((*(unsigned char *)(a1 + 137) & 0x20) == 0)
        {
          uint64_t v97 = PBReaderReadString();
          uint64_t v98 = 64;
LABEL_133:
          uint64_t v99 = *(void **)(a1 + v98);
          *(void *)(a1 + v98) = v97;
          goto LABEL_134;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_214;
        }
        int v102 = (int)(*(_DWORD *)(a1 + 136) << 18) >> 31;
        goto LABEL_184;
      case 18:
        if (!v37) {
          goto LABEL_140;
        }
        if ((*(unsigned char *)(a1 + 137) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_214;
          }
          int v102 = (int)(*(_DWORD *)(a1 + 136) << 21) >> 31;
LABEL_184:
          v7 += v102;
          goto LABEL_185;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_214;
        }
        int v89 = objc_alloc_init(GEOPBTransitArtwork);
        if (GEOPBTransitArtworkReadAllFrom((uint64_t)v89, (void *)v3, v10 & 1))
        {
          PBReaderRecallMark();
          uint64_t v99 = *(void **)(a1 + 40);
          *(void *)(a1 + 40) = v89;
LABEL_134:

          --v7;
LABEL_185:
          unsigned int v24 = (int *)MEMORY[0x1E4F940C8];
          unint64_t v25 = (int *)MEMORY[0x1E4F940B8];
LABEL_191:
          if (!(v110 & 1 | (v7 != 0))) {
            goto LABEL_192;
          }
          continue;
        }
LABEL_213:

LABEL_214:
        int v107 = 0;
        unsigned int v24 = (int *)MEMORY[0x1E4F940C8];
LABEL_193:
        if (v108) {
LABEL_194:
        }
          *(_DWORD *)(a1 + 136) |= 0x100u;
        if (v112 || (v107 & 1) == 0)
        {
          *(_DWORD *)(a1 + 136) |= 0x200u;
          *(_DWORD *)(a1 + 136) |= 0x800u;
          *(_DWORD *)(a1 + 136) |= 0x8000u;
          *(_DWORD *)(a1 + 136) |= 0x10000u;
          *(_DWORD *)(a1 + 136) |= 0x4000u;
          *(_DWORD *)(a1 + 136) |= 0x1000u;
          *(_DWORD *)(a1 + 136) |= 0x2000u;
          *(_DWORD *)(a1 + 136) |= 0x400u;
        }
        else if (v22)
        {
          while (1)
          {
            int v103 = *v22++;
            int v104 = 512;
            switch(v103)
            {
              case 0:
                goto LABEL_207;
              case 10:
                goto LABEL_206;
              case 12:
                int v104 = 2048;
                goto LABEL_206;
              case 13:
                int v104 = 0x8000;
                goto LABEL_206;
              case 14:
                int v104 = 0x10000;
                goto LABEL_206;
              case 15:
                int v104 = 0x4000;
                goto LABEL_206;
              case 16:
                int v104 = 4096;
                goto LABEL_206;
              case 17:
                int v104 = 0x2000;
                goto LABEL_206;
              case 18:
                int v104 = 1024;
LABEL_206:
                *(_DWORD *)(a1 + 136) |= v104;
                break;
              default:
                continue;
            }
          }
        }
LABEL_207:
        if (v107) {
          unint64_t v3 = *(unsigned char *)(v3 + *v24) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v112)
        {
          uint64_t v105 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      default:
        if (v36 == 2047)
        {
          if (v109)
          {
            char v49 = 0;
            unsigned int v50 = 0;
            uint64_t v51 = 0;
            *(_DWORD *)(a1 + 136) |= 0x10u;
            while (1)
            {
              uint64_t v52 = *v23;
              uint64_t v53 = *(void *)(v3 + v52);
              unint64_t v54 = v53 + 1;
              if (v53 == -1 || v54 > *(void *)(v3 + *v6)) {
                break;
              }
              char v55 = *(unsigned char *)(*(void *)(v3 + *v25) + v53);
              *(void *)(v3 + v52) = v54;
              v51 |= (unint64_t)(v55 & 0x7F) << v49;
              if ((v55 & 0x80) == 0) {
                goto LABEL_187;
              }
              v49 += 7;
              BOOL v33 = v50++ >= 9;
              if (v33)
              {
                LODWORD(v51) = 0;
                goto LABEL_189;
              }
            }
            *(unsigned char *)(v3 + *v24) = 1;
LABEL_187:
            if (*(unsigned char *)(v3 + *v24)) {
              LODWORD(v51) = 0;
            }
LABEL_189:
            uint64_t v101 = 120;
LABEL_190:
            *(_DWORD *)(a1 + v101) = v51;
            goto LABEL_191;
          }
LABEL_140:
          char v100 = PBReaderSkipValueWithTag();
          unint64_t v25 = (int *)MEMORY[0x1E4F940B8];
          unsigned int v24 = (int *)MEMORY[0x1E4F940C8];
          if ((v100 & 1) == 0)
          {
            int v107 = 0;
            goto LABEL_193;
          }
          goto LABEL_191;
        }
LABEL_56:
        if (v108 & 1) == 0 || (*(unsigned char *)(a1 + 137)) {
          goto LABEL_140;
        }
        if (!*(void *)(a1 + 16))
        {
          id v56 = objc_alloc_init(MEMORY[0x1E4F940B0]);
          int v57 = *(void **)(a1 + 16);
          *(void *)(a1 + 16) = v56;
        }
        int v58 = PBUnknownFieldAdd();
        unsigned int v24 = (int *)MEMORY[0x1E4F940C8];
        unint64_t v25 = (int *)MEMORY[0x1E4F940B8];
        if (!v58)
        {
          int v107 = 0;
          goto LABEL_194;
        }
        goto LABEL_191;
    }
  }
}

BOOL GEONetEventDimensionalGroupingIsDirty(os_unfair_lock_s *a1)
{
  if (!a1) {
    return 0;
  }
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner(a1 + 28);
  BOOL v2 = (a1[39]._os_unfair_lock_opaque & 0xFFC000) != 0;
  os_unfair_lock_unlock(a1 + 28);
  return v2;
}

BOOL GEONetEventAggregateStatsReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  BOOL AllFrom = GEONetEventAggregateStatsReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18909F520(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEONavigationAudioFeedbackReadAllFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v18 = 0;
          unsigned int v19 = 0;
          uint64_t v20 = 0;
          *(_DWORD *)(a1 + 40) |= 0x40u;
          while (1)
          {
            uint64_t v21 = *v3;
            uint64_t v22 = *(void *)(a2 + v21);
            unint64_t v23 = v22 + 1;
            if (v22 == -1 || v23 > *(void *)(a2 + *v4)) {
              break;
            }
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
            *(void *)(a2 + v21) = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0) {
              goto LABEL_148;
            }
            v18 += 7;
            BOOL v15 = v19++ >= 9;
            if (v15)
            {
              uint64_t v20 = 0;
              goto LABEL_150;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_148:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v20 = 0;
          }
LABEL_150:
          *(unsigned char *)(a1 + 10) = v20 != 0;
          continue;
        case 2u:
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v28 = 0;
          *(_DWORD *)(a1 + 40) |= 0x80u;
          while (2)
          {
            uint64_t v29 = *v3;
            uint64_t v30 = *(void *)(a2 + v29);
            unint64_t v31 = v30 + 1;
            if (v30 == -1 || v31 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v32 = *(unsigned char *)(*(void *)(a2 + *v7) + v30);
              *(void *)(a2 + v29) = v31;
              v28 |= (unint64_t)(v32 & 0x7F) << v26;
              if (v32 < 0)
              {
                v26 += 7;
                BOOL v15 = v27++ >= 9;
                if (v15)
                {
                  uint64_t v28 = 0;
                  goto LABEL_154;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v28 = 0;
          }
LABEL_154:
          *(unsigned char *)(a1 + 11) = v28 != 0;
          continue;
        case 3u:
          char v33 = 0;
          unsigned int v34 = 0;
          uint64_t v35 = 0;
          *(_DWORD *)(a1 + 40) |= 0x100u;
          while (2)
          {
            uint64_t v36 = *v3;
            uint64_t v37 = *(void *)(a2 + v36);
            unint64_t v38 = v37 + 1;
            if (v37 == -1 || v38 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v37);
              *(void *)(a2 + v36) = v38;
              v35 |= (unint64_t)(v39 & 0x7F) << v33;
              if (v39 < 0)
              {
                v33 += 7;
                BOOL v15 = v34++ >= 9;
                if (v15)
                {
                  uint64_t v35 = 0;
                  goto LABEL_158;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v35 = 0;
          }
LABEL_158:
          *(unsigned char *)(a1 + 12) = v35 != 0;
          continue;
        case 4u:
          char v40 = 0;
          unsigned int v41 = 0;
          uint64_t v42 = 0;
          *(_DWORD *)(a1 + 40) |= 0x10u;
          while (2)
          {
            uint64_t v43 = *v3;
            uint64_t v44 = *(void *)(a2 + v43);
            unint64_t v45 = v44 + 1;
            if (v44 == -1 || v45 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v46 = *(unsigned char *)(*(void *)(a2 + *v7) + v44);
              *(void *)(a2 + v43) = v45;
              v42 |= (unint64_t)(v46 & 0x7F) << v40;
              if (v46 < 0)
              {
                v40 += 7;
                BOOL v15 = v41++ >= 9;
                if (v15)
                {
                  uint64_t v42 = 0;
                  goto LABEL_162;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v42 = 0;
          }
LABEL_162:
          *(unsigned char *)(a1 + 8) = v42 != 0;
          continue;
        case 5u:
          char v47 = 0;
          unsigned int v48 = 0;
          uint64_t v49 = 0;
          *(_DWORD *)(a1 + 40) |= 0x20u;
          while (2)
          {
            uint64_t v50 = *v3;
            uint64_t v51 = *(void *)(a2 + v50);
            unint64_t v52 = v51 + 1;
            if (v51 == -1 || v52 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v53 = *(unsigned char *)(*(void *)(a2 + *v7) + v51);
              *(void *)(a2 + v50) = v52;
              v49 |= (unint64_t)(v53 & 0x7F) << v47;
              if (v53 < 0)
              {
                v47 += 7;
                BOOL v15 = v48++ >= 9;
                if (v15)
                {
                  uint64_t v49 = 0;
                  goto LABEL_166;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v49 = 0;
          }
LABEL_166:
          *(unsigned char *)(a1 + 9) = v49 != 0;
          continue;
        case 6u:
          char v54 = 0;
          unsigned int v55 = 0;
          uint64_t v56 = 0;
          *(_DWORD *)(a1 + 40) |= 0x2000u;
          while (2)
          {
            uint64_t v57 = *v3;
            uint64_t v58 = *(void *)(a2 + v57);
            unint64_t v59 = v58 + 1;
            if (v58 == -1 || v59 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v60 = *(unsigned char *)(*(void *)(a2 + *v7) + v58);
              *(void *)(a2 + v57) = v59;
              v56 |= (unint64_t)(v60 & 0x7F) << v54;
              if (v60 < 0)
              {
                v54 += 7;
                BOOL v15 = v55++ >= 9;
                if (v15)
                {
                  LODWORD(v56) = 0;
                  goto LABEL_170;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v56) = 0;
          }
LABEL_170:
          *(_DWORD *)(a1 + 32) = v56;
          continue;
        case 7u:
          char v61 = 0;
          unsigned int v62 = 0;
          uint64_t v63 = 0;
          *(_DWORD *)(a1 + 40) |= 0x20000u;
          while (2)
          {
            uint64_t v64 = *v3;
            uint64_t v65 = *(void *)(a2 + v64);
            unint64_t v66 = v65 + 1;
            if (v65 == -1 || v66 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v67 = *(unsigned char *)(*(void *)(a2 + *v7) + v65);
              *(void *)(a2 + v64) = v66;
              v63 |= (unint64_t)(v67 & 0x7F) << v61;
              if (v67 < 0)
              {
                v61 += 7;
                BOOL v15 = v62++ >= 9;
                if (v15)
                {
                  uint64_t v63 = 0;
                  goto LABEL_174;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v63 = 0;
          }
LABEL_174:
          *(unsigned char *)(a1 + 39) = v63 != 0;
          continue;
        case 8u:
          char v68 = 0;
          unsigned int v69 = 0;
          uint64_t v70 = 0;
          *(_DWORD *)(a1 + 40) |= 2u;
          while (2)
          {
            uint64_t v71 = *v3;
            uint64_t v72 = *(void *)(a2 + v71);
            unint64_t v73 = v72 + 1;
            if (v72 == -1 || v73 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v74 = *(unsigned char *)(*(void *)(a2 + *v7) + v72);
              *(void *)(a2 + v71) = v73;
              v70 |= (unint64_t)(v74 & 0x7F) << v68;
              if (v74 < 0)
              {
                v68 += 7;
                BOOL v15 = v69++ >= 9;
                if (v15)
                {
                  uint64_t v70 = 0;
                  goto LABEL_178;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v70 = 0;
          }
LABEL_178:
          *(unsigned char *)(a1 + 1) = v70 != 0;
          continue;
        case 9u:
          char v75 = 0;
          unsigned int v76 = 0;
          uint64_t v77 = 0;
          *(_DWORD *)(a1 + 40) |= 0x4000u;
          while (2)
          {
            uint64_t v78 = *v3;
            uint64_t v79 = *(void *)(a2 + v78);
            unint64_t v80 = v79 + 1;
            if (v79 == -1 || v80 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v81 = *(unsigned char *)(*(void *)(a2 + *v7) + v79);
              *(void *)(a2 + v78) = v80;
              v77 |= (unint64_t)(v81 & 0x7F) << v75;
              if (v81 < 0)
              {
                v75 += 7;
                BOOL v15 = v76++ >= 9;
                if (v15)
                {
                  uint64_t v77 = 0;
                  goto LABEL_182;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v77 = 0;
          }
LABEL_182:
          *(unsigned char *)(a1 + 36) = v77 != 0;
          continue;
        case 0xAu:
          char v82 = 0;
          unsigned int v83 = 0;
          uint64_t v84 = 0;
          *(_DWORD *)(a1 + 40) |= 0x8000u;
          while (2)
          {
            uint64_t v85 = *v3;
            uint64_t v86 = *(void *)(a2 + v85);
            unint64_t v87 = v86 + 1;
            if (v86 == -1 || v87 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v88 = *(unsigned char *)(*(void *)(a2 + *v7) + v86);
              *(void *)(a2 + v85) = v87;
              v84 |= (unint64_t)(v88 & 0x7F) << v82;
              if (v88 < 0)
              {
                v82 += 7;
                BOOL v15 = v83++ >= 9;
                if (v15)
                {
                  uint64_t v84 = 0;
                  goto LABEL_186;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v84 = 0;
          }
LABEL_186:
          *(unsigned char *)(a1 + 37) = v84 != 0;
          continue;
        case 0xBu:
          char v89 = 0;
          unsigned int v90 = 0;
          uint64_t v91 = 0;
          *(_DWORD *)(a1 + 40) |= 0x10000u;
          while (2)
          {
            uint64_t v92 = *v3;
            uint64_t v93 = *(void *)(a2 + v92);
            unint64_t v94 = v93 + 1;
            if (v93 == -1 || v94 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v95 = *(unsigned char *)(*(void *)(a2 + *v7) + v93);
              *(void *)(a2 + v92) = v94;
              v91 |= (unint64_t)(v95 & 0x7F) << v89;
              if (v95 < 0)
              {
                v89 += 7;
                BOOL v15 = v90++ >= 9;
                if (v15)
                {
                  uint64_t v91 = 0;
                  goto LABEL_190;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v91 = 0;
          }
LABEL_190:
          *(unsigned char *)(a1 + 38) = v91 != 0;
          continue;
        case 0xCu:
          char v96 = 0;
          unsigned int v97 = 0;
          uint64_t v98 = 0;
          *(_DWORD *)(a1 + 40) |= 0x200u;
          while (2)
          {
            uint64_t v99 = *v3;
            uint64_t v100 = *(void *)(a2 + v99);
            unint64_t v101 = v100 + 1;
            if (v100 == -1 || v101 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v102 = *(unsigned char *)(*(void *)(a2 + *v7) + v100);
              *(void *)(a2 + v99) = v101;
              v98 |= (unint64_t)(v102 & 0x7F) << v96;
              if (v102 < 0)
              {
                v96 += 7;
                BOOL v15 = v97++ >= 9;
                if (v15)
                {
                  LODWORD(v98) = 0;
                  goto LABEL_194;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v98) = 0;
          }
LABEL_194:
          *(_DWORD *)(a1 + 16) = v98;
          continue;
        case 0xDu:
          char v103 = 0;
          unsigned int v104 = 0;
          uint64_t v105 = 0;
          *(_DWORD *)(a1 + 40) |= 0x800u;
          while (2)
          {
            uint64_t v106 = *v3;
            uint64_t v107 = *(void *)(a2 + v106);
            unint64_t v108 = v107 + 1;
            if (v107 == -1 || v108 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v109 = *(unsigned char *)(*(void *)(a2 + *v7) + v107);
              *(void *)(a2 + v106) = v108;
              v105 |= (unint64_t)(v109 & 0x7F) << v103;
              if (v109 < 0)
              {
                v103 += 7;
                BOOL v15 = v104++ >= 9;
                if (v15)
                {
                  LODWORD(v105) = 0;
                  goto LABEL_198;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v105) = 0;
          }
LABEL_198:
          *(_DWORD *)(a1 + 24) = v105;
          continue;
        case 0xEu:
          char v110 = 0;
          unsigned int v111 = 0;
          uint64_t v112 = 0;
          *(_DWORD *)(a1 + 40) |= 0x400u;
          while (2)
          {
            uint64_t v113 = *v3;
            uint64_t v114 = *(void *)(a2 + v113);
            unint64_t v115 = v114 + 1;
            if (v114 == -1 || v115 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v116 = *(unsigned char *)(*(void *)(a2 + *v7) + v114);
              *(void *)(a2 + v113) = v115;
              v112 |= (unint64_t)(v116 & 0x7F) << v110;
              if (v116 < 0)
              {
                v110 += 7;
                BOOL v15 = v111++ >= 9;
                if (v15)
                {
                  LODWORD(v112) = 0;
                  goto LABEL_202;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v112) = 0;
          }
LABEL_202:
          *(_DWORD *)(a1 + 20) = v112;
          continue;
        case 0xFu:
          char v117 = 0;
          unsigned int v118 = 0;
          uint64_t v119 = 0;
          *(_DWORD *)(a1 + 40) |= 1u;
          while (2)
          {
            uint64_t v120 = *v3;
            uint64_t v121 = *(void *)(a2 + v120);
            unint64_t v122 = v121 + 1;
            if (v121 == -1 || v122 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v123 = *(unsigned char *)(*(void *)(a2 + *v7) + v121);
              *(void *)(a2 + v120) = v122;
              v119 |= (unint64_t)(v123 & 0x7F) << v117;
              if (v123 < 0)
              {
                v117 += 7;
                BOOL v15 = v118++ >= 9;
                if (v15)
                {
                  uint64_t v119 = 0;
                  goto LABEL_206;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v119 = 0;
          }
LABEL_206:
          *(unsigned char *)a1 = v119 != 0;
          continue;
        case 0x10u:
          char v124 = 0;
          unsigned int v125 = 0;
          uint64_t v126 = 0;
          *(_DWORD *)(a1 + 40) |= 8u;
          while (2)
          {
            uint64_t v127 = *v3;
            uint64_t v128 = *(void *)(a2 + v127);
            unint64_t v129 = v128 + 1;
            if (v128 == -1 || v129 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v130 = *(unsigned char *)(*(void *)(a2 + *v7) + v128);
              *(void *)(a2 + v127) = v129;
              v126 |= (unint64_t)(v130 & 0x7F) << v124;
              if (v130 < 0)
              {
                v124 += 7;
                BOOL v15 = v125++ >= 9;
                if (v15)
                {
                  LODWORD(v126) = 0;
                  goto LABEL_210;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v126) = 0;
          }
LABEL_210:
          *(_DWORD *)(a1 + 4) = v126;
          continue;
        case 0x11u:
          char v131 = 0;
          unsigned int v132 = 0;
          uint64_t v133 = 0;
          *(_DWORD *)(a1 + 40) |= 4u;
          while (2)
          {
            uint64_t v134 = *v3;
            uint64_t v135 = *(void *)(a2 + v134);
            unint64_t v136 = v135 + 1;
            if (v135 == -1 || v136 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v137 = *(unsigned char *)(*(void *)(a2 + *v7) + v135);
              *(void *)(a2 + v134) = v136;
              v133 |= (unint64_t)(v137 & 0x7F) << v131;
              if (v137 < 0)
              {
                v131 += 7;
                BOOL v15 = v132++ >= 9;
                if (v15)
                {
                  uint64_t v133 = 0;
                  goto LABEL_214;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v133 = 0;
          }
LABEL_214:
          *(unsigned char *)(a1 + 2) = v133 != 0;
          continue;
        case 0x12u:
          char v138 = 0;
          unsigned int v139 = 0;
          uint64_t v140 = 0;
          *(_DWORD *)(a1 + 40) |= 0x1000u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v141 = *v3;
        uint64_t v142 = *(void *)(a2 + v141);
        unint64_t v143 = v142 + 1;
        if (v142 == -1 || v143 > *(void *)(a2 + *v4)) {
          break;
        }
        char v144 = *(unsigned char *)(*(void *)(a2 + *v7) + v142);
        *(void *)(a2 + v141) = v143;
        v140 |= (unint64_t)(v144 & 0x7F) << v138;
        if ((v144 & 0x80) == 0) {
          goto LABEL_216;
        }
        v138 += 7;
        BOOL v15 = v139++ >= 9;
        if (v15)
        {
          uint64_t v140 = 0;
          goto LABEL_218;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_216:
      if (*(unsigned char *)(a2 + *v5)) {
        uint64_t v140 = 0;
      }
LABEL_218:
      *(unsigned char *)(a1 + 28) = v140 != 0;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

unint64_t GEOMapItemMapsSyncAttributesReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 44);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 40)];
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  int v11 = ((*(unsigned __int8 *)(a1 + 56) >> 2) & 1)
      + ((*(unsigned __int8 *)(a1 + 56) >> 3) & 1)
      + ((*(unsigned __int8 *)(a1 + 56) >> 1) & 1);
  while (2)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    switch(a3[v10])
    {
      case -4:
        ++v11;
        uint64_t v12 = v7;
        goto LABEL_8;
      case -3:
        char v9 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_8;
      case 0:
        BOOL v14 = v11 != 0;
        char v15 = v14 & ~(_BYTE)v7;
        unsigned __int8 v16 = v14 | v7;
        char v59 = v15 | v8;
        char v60 = v16 | v15 | v8;
        if ((v16 | v9)) {
          uint64_t v17 = 0;
        }
        else {
          uint64_t v17 = a3;
        }
        char v61 = (v17 == 0) | v16;
        BOOL v62 = v16;
        char v18 = (int *)MEMORY[0x1E4F940E8];
        unsigned int v19 = (int *)MEMORY[0x1E4F940C8];
        uint64_t v20 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v11;
LABEL_7:
        uint64_t v12 = v7;
        uint64_t v13 = v8;
LABEL_8:
        ++v10;
        uint64_t v7 = v12;
        uint64_t v8 = v13;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(void *)(v3 + *v18) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v19)) {
      goto LABEL_73;
    }
    char v21 = 0;
    unsigned int v22 = 0;
    unint64_t v23 = 0;
    while (1)
    {
      uint64_t v24 = *v18;
      uint64_t v25 = *(void *)(v3 + v24);
      unint64_t v26 = v25 + 1;
      if (v25 == -1 || v26 > *(void *)(v3 + *v6)) {
        break;
      }
      char v27 = *(unsigned char *)(*(void *)(v3 + *v20) + v25);
      *(void *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0) {
        goto LABEL_23;
      }
      v21 += 7;
      BOOL v28 = v22++ >= 9;
      if (v28)
      {
        unint64_t v23 = 0;
        int v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_25;
      }
    }
    *(unsigned char *)(v3 + *v19) = 1;
LABEL_23:
    int v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(unsigned char *)(v3 + *v19)) {
      unint64_t v23 = 0;
    }
LABEL_25:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_73:
      int v57 = 1;
      goto LABEL_74;
    }
    unint64_t v31 = v23 >> 3;
    BOOL v32 = v62;
    if ((v61 & 1) == 0)
    {
      char v33 = v17;
      do
      {
        int v35 = *v33++;
        int v34 = v35;
        BOOL v32 = v35 != 0;
        if (v35) {
          BOOL v36 = v34 == v31;
        }
        else {
          BOOL v36 = 1;
        }
      }
      while (!v36);
    }
    if (v31 == 3)
    {
      if (v9)
      {
        char v39 = 0;
        unsigned int v40 = 0;
        uint64_t v41 = 0;
        *(unsigned char *)(a1 + 56) |= 1u;
        while (1)
        {
          uint64_t v42 = *v18;
          uint64_t v43 = *(void *)(v3 + v42);
          unint64_t v44 = v43 + 1;
          if (v43 == -1 || v44 > *(void *)(v3 + *v6)) {
            break;
          }
          char v45 = *(unsigned char *)(*(void *)(v3 + *v20) + v43);
          *(void *)(v3 + v42) = v44;
          v41 |= (unint64_t)(v45 & 0x7F) << v39;
          if ((v45 & 0x80) == 0) {
            goto LABEL_63;
          }
          v39 += 7;
          BOOL v28 = v40++ >= 9;
          if (v28)
          {
            LODWORD(v41) = 0;
            goto LABEL_65;
          }
        }
        *(unsigned char *)(v3 + *v19) = 1;
LABEL_63:
        if (*(unsigned char *)(v3 + *v19)) {
          LODWORD(v41) = 0;
        }
LABEL_65:
        *(_DWORD *)(a1 + 52) = v41;
        goto LABEL_72;
      }
      goto LABEL_60;
    }
    if (v31 == 2) {
      break;
    }
    if (v31 == 1)
    {
      if (v32)
      {
        if ((*(unsigned char *)(a1 + 56) & 4) == 0)
        {
          uint64_t v37 = PBReaderReadString();
          uint64_t v38 = 24;
          goto LABEL_53;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_93;
        }
        char v51 = 32 * *(unsigned char *)(a1 + 56);
        goto LABEL_70;
      }
    }
    else if ((v59 & 1) != 0 && (*(unsigned char *)(a1 + 56) & 2) == 0)
    {
      if (!*(void *)(a1 + 16))
      {
        id v47 = objc_alloc_init(MEMORY[0x1E4F940B0]);
        unsigned int v48 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v47;
      }
      int v49 = PBUnknownFieldAdd();
      unsigned int v19 = (int *)MEMORY[0x1E4F940C8];
      if (!v49)
      {
        int v57 = 0;
        uint64_t v58 = &OBJC_IVAR___GEOPDRelatedCollectionSection__collectionIds;
        goto LABEL_76;
      }
      goto LABEL_72;
    }
LABEL_60:
    char v50 = PBReaderSkipValueWithTag();
    unsigned int v19 = (int *)MEMORY[0x1E4F940C8];
    if ((v50 & 1) == 0)
    {
      int v57 = 0;
LABEL_74:
      uint64_t v58 = &OBJC_IVAR___GEOPDRelatedCollectionSection__collectionIds;
      goto LABEL_75;
    }
LABEL_72:
    if (!(v60 & 1 | (v10 != 0))) {
      goto LABEL_73;
    }
  }
  if (!v32) {
    goto LABEL_60;
  }
  if ((*(unsigned char *)(a1 + 56) & 8) == 0)
  {
    uint64_t v37 = PBReaderReadString();
    uint64_t v38 = 32;
LABEL_53:
    char v46 = *(void **)(a1 + v38);
    *(void *)(a1 + v38) = v37;

    --v10;
LABEL_71:
    unsigned int v19 = (int *)MEMORY[0x1E4F940C8];
    goto LABEL_72;
  }
  if (PBReaderSkipValueWithTag())
  {
    char v51 = 16 * *(unsigned char *)(a1 + 56);
LABEL_70:
    v10 += v51 >> 7;
    goto LABEL_71;
  }
LABEL_93:
  int v57 = 0;
  uint64_t v58 = &OBJC_IVAR___GEOPDRelatedCollectionSection__collectionIds;
  unsigned int v19 = (int *)MEMORY[0x1E4F940C8];
LABEL_75:
  if ((v59 & 1) == 0) {
    goto LABEL_77;
  }
LABEL_76:
  *(unsigned char *)(a1 + v58[524]) |= 2u;
LABEL_77:
  if (v62 || (v57 & 1) == 0)
  {
    *(unsigned char *)(a1 + v58[524]) |= 4u;
    *(unsigned char *)(a1 + v58[524]) |= 8u;
    goto LABEL_87;
  }
  if (v17)
  {
    while (2)
    {
      while (1)
      {
        int v53 = *v17++;
        int v52 = v53;
        if (v53 == 1) {
          break;
        }
        if (v52 == 2)
        {
          char v54 = 8;
          goto LABEL_86;
        }
        if (!v52) {
          goto LABEL_87;
        }
      }
      char v54 = 4;
LABEL_86:
      *(unsigned char *)(a1 + v58[524]) |= v54;
      continue;
    }
  }
LABEL_87:
  if (v57) {
    unint64_t v3 = *(unsigned char *)(v3 + *v19) == 0;
  }
  else {
    unint64_t v3 = 0;
  }
  if (v62)
  {
    unsigned int v55 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  return v3;
}

unint64_t GEOMapItemMapsSyncAttributesReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 44))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOMapItemMapsSyncAttributesReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = [v8 position];
  *(_DWORD *)(a1 + 44) = [v8 length];
  if (a3) {
    char v9 = (int *)&GEOMapItemMapsSyncAttributesReadAllFrom_recursiveTag;
  }
  else {
    char v9 = (int *)&GEOMapItemMapsSyncAttributesReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOMapItemMapsSyncAttributesReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_1890A08A8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMsgEventPOIBusynessDataIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  BOOL v2 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    while (!a1[*v4])
    {
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          uint64_t v14 = *v4;
          int v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      uint64_t v14 = *v4;
      int v15 = a1[v14];
      if (a1[v14]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v16 = v8 & 7;
      if (v15 || v16 == 4) {
        break;
      }
      switch((v8 >> 3))
      {
        case 1u:
        case 3u:
        case 4u:
        case 5u:
          if (v16 != 1) {
            goto LABEL_37;
          }
          uint64_t v18 = *v2;
          unint64_t v19 = *(void *)&a1[v18];
          if (v19 <= 0xFFFFFFFFFFFFFFF7 && (unint64_t v20 = v19 + 8, v20 <= *(void *)&a1[*v3])) {
            *(void *)&a1[v18] = v20;
          }
          else {
            a1[v14] = 1;
          }
          goto LABEL_34;
        case 2u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOLatLngIsValid(a1)) {
            goto LABEL_37;
          }
          goto LABEL_32;
        case 6u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOLogMsgEventPOIPredictionDataIsValid(a1)) {
            goto LABEL_37;
          }
LABEL_32:
          PBReaderRecallMark();
          goto LABEL_34;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_37:
            PBReaderRecallMark();
            return 0;
          }
LABEL_34:
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
            goto LABEL_35;
          }
          break;
      }
    }
  }
LABEL_35:
  BOOL v21 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v21;
}

uint64_t GEOLogMsgEventDirectionsReadSpecified(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 176));
  char v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 172);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 168)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  unint64_t v11 = *(void *)(a1 + 240);
  uint64x2_t v12 = (uint64x2_t)vdupq_n_s64(v11);
  v13.i64[0] = 0x100000001;
  v13.i64[1] = 0x100000001;
  unsigned int v14 = vaddvq_s32(vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vshlq_u64(v12, (uint64x2_t)xmmword_18A641D40), (int32x4_t)vshlq_u64(v12, (uint64x2_t)xmmword_18A641D30)), v13), (int32x4_t)vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vshlq_u64(v12, (uint64x2_t)xmmword_18A641D20), (int32x4_t)vshlq_u64(v12, (uint64x2_t)xmmword_18A641D10)), v13)))+ ((v11 >> 36) & 1);
  while (2)
  {
    uint64_t v15 = 1;
    uint64_t v16 = 1;
    switch(a3[v7])
    {
      case -3:
        char v8 = 1;
        goto LABEL_6;
      case -2:
        uint64_t v15 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        char v17 = v10 | (v14 > 6);
        if (v10 & 1 | (v14 > 6) | v8 & 1) {
          uint64_t v18 = 0;
        }
        else {
          uint64_t v18 = a3;
        }
        unint64_t v19 = (int *)MEMORY[0x1E4F940E8];
        unint64_t v20 = (int *)MEMORY[0x1E4F940C8];
        BOOL v21 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v14;
LABEL_6:
        uint64_t v15 = v9;
        uint64_t v16 = v10;
LABEL_8:
        ++v7;
        uint64_t v9 = v15;
        uint64_t v10 = v16;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v19) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v20)) {
      goto LABEL_509;
    }
    char v22 = 0;
    unsigned int v23 = 0;
    unint64_t v24 = 0;
    while (1)
    {
      uint64_t v25 = *v19;
      uint64_t v26 = *(void *)(v3 + v25);
      unint64_t v27 = v26 + 1;
      if (v26 == -1 || v27 > *(void *)(v3 + *v6)) {
        break;
      }
      char v28 = *(unsigned char *)(*(void *)(v3 + *v21) + v26);
      *(void *)(v3 + v25) = v27;
      v24 |= (unint64_t)(v28 & 0x7F) << v22;
      if ((v28 & 0x80) == 0) {
        goto LABEL_23;
      }
      v22 += 7;
      BOOL v29 = v23++ >= 9;
      if (v29)
      {
        unint64_t v24 = 0;
        int v30 = *(unsigned __int8 *)(v3 + *v20);
        goto LABEL_25;
      }
    }
    *(unsigned char *)(v3 + *v20) = 1;
LABEL_23:
    int v30 = *(unsigned __int8 *)(v3 + *v20);
    if (*(unsigned char *)(v3 + *v20)) {
      unint64_t v24 = 0;
    }
LABEL_25:
    if (v30 || (v24 & 7) == 4)
    {
LABEL_509:
      if (v17)
      {
        *(void *)(a1 + 240) |= 0x1FF000000000uLL;
      }
      else if (v18)
      {
        while (2)
        {
          while (1)
          {
            int v278 = *v18++;
            int v277 = v278;
            if (v278 <= 16) {
              break;
            }
            int v279 = v277 - 17;
            switch(v279)
            {
              case 0:
                uint64_t v280 = 0x80000000000;
                break;
              case 1:
              case 2:
              case 3:
              case 4:
              case 5:
              case 6:
                continue;
              case 7:
                uint64_t v280 = 0x100000000000;
                break;
              case 8:
                uint64_t v280 = 0x10000000000;
                break;
              case 9:
                uint64_t v280 = 0x8000000000;
                break;
              default:
                if (v279 == 41)
                {
                  uint64_t v280 = 0x40000000000;
                }
                else
                {
                  if (v279 != 45) {
                    continue;
                  }
                  uint64_t v280 = 0x1000000000;
                }
                break;
            }
LABEL_525:
            *(void *)(a1 + 240) |= v280;
          }
          uint64_t v280 = 0x2000000000;
          switch(v277)
          {
            case 0:
              break;
            case 1:
              goto LABEL_525;
            case 2:
              uint64_t v280 = 0x20000000000;
              goto LABEL_525;
            case 7:
              uint64_t v280 = 0x4000000000;
              goto LABEL_525;
            default:
              continue;
          }
          break;
        }
      }
      uint64_t v3 = *(unsigned char *)(v3 + *v20) == 0;
      if ((v17 & 1) == 0) {
        return v3;
      }
LABEL_527:
      int v281 = *(void **)(a1 + 8);
      *(void *)(a1 + 8) = 0;

      return v3;
    }
    unint64_t v32 = v24 >> 3;
    BOOL v33 = v17;
    if (!((v18 == 0) | v17 & 1))
    {
      int v34 = v18;
      do
      {
        int v36 = *v34++;
        int v35 = v36;
        BOOL v33 = v36 != 0;
        if (v36) {
          BOOL v37 = v35 == v32;
        }
        else {
          BOOL v37 = 1;
        }
      }
      while (!v37);
    }
    switch((int)v32)
    {
      case 1:
        if (!v33 || (*(unsigned char *)(a1 + 244) & 0x20) != 0) {
          goto LABEL_358;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_530;
        }
        uint64_t v283 = objc_alloc_init(GEODirectionsFeedback);
        if (!GEODirectionsFeedbackReadAllFrom((uint64_t)v283, (void *)v3, v9 & 1)) {
          goto LABEL_529;
        }
        PBReaderRecallMark();
        -[GEOLogMsgEventDirections _addNoFlagsDirectionsFeedback:](a1, v283);
        goto LABEL_205;
      case 2:
        if (!v33) {
          goto LABEL_358;
        }
        if ((*(unsigned char *)(a1 + 245) & 2) != 0)
        {
          char v269 = PBReaderSkipValueWithTag();
          unint64_t v20 = (int *)MEMORY[0x1E4F940C8];
          if ((v269 & 1) == 0) {
            goto LABEL_530;
          }
          uint64_t v270 = *(void *)(a1 + 240) << 22;
          goto LABEL_502;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_530;
        }
        uint64_t v283 = objc_alloc_init(GEOLocation);
        if (!GEOLocationReadAllFrom((uint64_t)v283, (void *)v3, v9 & 1)) {
          goto LABEL_529;
        }
        PBReaderRecallMark();
        uint64_t v39 = 128;
        goto LABEL_355;
      case 3:
        if ((v8 & 1) == 0) {
          goto LABEL_358;
        }
        char v40 = 0;
        unsigned int v41 = 0;
        uint64_t v42 = 0;
        *(void *)(a1 + 240) |= 0x20000uLL;
        while (2)
        {
          uint64_t v43 = *v19;
          uint64_t v44 = *(void *)(v3 + v43);
          unint64_t v45 = v44 + 1;
          if (v44 == -1 || v45 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v20) = 1;
          }
          else
          {
            char v46 = *(unsigned char *)(*(void *)(v3 + *v21) + v44);
            *(void *)(v3 + v43) = v45;
            v42 |= (unint64_t)(v46 & 0x7F) << v40;
            if (v46 < 0)
            {
              v40 += 7;
              BOOL v29 = v41++ >= 9;
              if (v29)
              {
                uint64_t v42 = 0;
                goto LABEL_363;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v20)) {
          uint64_t v42 = 0;
        }
LABEL_363:
        BOOL v266 = v42 != 0;
        uint64_t v267 = 220;
        goto LABEL_480;
      case 4:
        if ((v8 & 1) == 0) {
          goto LABEL_358;
        }
        if (!PBReaderPlaceMark() || (GEONavigationAudioFeedbackReadAllFrom(a1 + 16, v3) & 1) == 0) {
          goto LABEL_530;
        }
        PBReaderRecallMark();
        uint64_t v47 = *(void *)(a1 + 240) | 1;
        goto LABEL_69;
      case 5:
        if ((v8 & 1) == 0) {
          goto LABEL_358;
        }
        *(void *)(a1 + 240) |= 4uLL;
        uint64_t v48 = *v19;
        unint64_t v49 = *(void *)(v3 + v48);
        if (v49 <= 0xFFFFFFFFFFFFFFF7 && v49 + 8 <= *(void *)(v3 + *v6))
        {
          uint64_t v50 = *(void *)(*(void *)(v3 + *v21) + v49);
          *(void *)(v3 + v48) = v49 + 8;
        }
        else
        {
          *(unsigned char *)(v3 + *v20) = 1;
          uint64_t v50 = 0;
        }
        uint64_t v276 = 104;
        goto LABEL_507;
      case 6:
        if ((v8 & 1) == 0) {
          goto LABEL_358;
        }
        if (!PBReaderPlaceMark() || (GEOSessionIDReadAllFrom((void *)(a1 + 64), v3) & 1) == 0) {
          goto LABEL_530;
        }
        PBReaderRecallMark();
        uint64_t v47 = *(void *)(a1 + 240) | 2;
LABEL_69:
        *(void *)(a1 + 240) = v47;
        goto LABEL_357;
      case 7:
        if (!v33 || (*(unsigned char *)(a1 + 244) & 0x40) != 0) {
          goto LABEL_358;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_530;
        }
        uint64_t v283 = objc_alloc_init(GEODurationInNavigationMode);
        if (!GEODurationInNavigationModeReadAllFrom((uint64_t)v283, (void *)v3)) {
          goto LABEL_529;
        }
        PBReaderRecallMark();
        -[GEOLogMsgEventDirections _addNoFlagsDurationInNavigationMode:](a1, v283);
        goto LABEL_205;
      case 8:
        if ((v8 & 1) == 0) {
          goto LABEL_358;
        }
        char v51 = 0;
        unsigned int v52 = 0;
        uint64_t v53 = 0;
        *(void *)(a1 + 240) |= 0x80uLL;
        while (2)
        {
          uint64_t v54 = *v19;
          uint64_t v55 = *(void *)(v3 + v54);
          unint64_t v56 = v55 + 1;
          if (v55 == -1 || v56 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v20) = 1;
          }
          else
          {
            char v57 = *(unsigned char *)(*(void *)(v3 + *v21) + v55);
            *(void *)(v3 + v54) = v56;
            v53 |= (unint64_t)(v57 & 0x7F) << v51;
            if (v57 < 0)
            {
              v51 += 7;
              BOOL v29 = v52++ >= 9;
              if (v29)
              {
                LODWORD(v53) = 0;
                goto LABEL_367;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v20)) {
          LODWORD(v53) = 0;
        }
LABEL_367:
        uint64_t v268 = 192;
        goto LABEL_489;
      case 9:
        if ((v8 & 1) == 0) {
          goto LABEL_358;
        }
        char v58 = 0;
        unsigned int v59 = 0;
        uint64_t v60 = 0;
        *(void *)(a1 + 240) |= 0x800000000uLL;
        while (2)
        {
          uint64_t v61 = *v19;
          uint64_t v62 = *(void *)(v3 + v61);
          unint64_t v63 = v62 + 1;
          if (v62 == -1 || v63 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v20) = 1;
          }
          else
          {
            char v64 = *(unsigned char *)(*(void *)(v3 + *v21) + v62);
            *(void *)(v3 + v61) = v63;
            v60 |= (unint64_t)(v64 & 0x7F) << v58;
            if (v64 < 0)
            {
              v58 += 7;
              BOOL v29 = v59++ >= 9;
              if (v29)
              {
                uint64_t v60 = 0;
                goto LABEL_371;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v20)) {
          uint64_t v60 = 0;
        }
LABEL_371:
        BOOL v266 = v60 != 0;
        uint64_t v267 = 238;
        goto LABEL_480;
      case 10:
        if ((v8 & 1) == 0) {
          goto LABEL_358;
        }
        char v65 = 0;
        unsigned int v66 = 0;
        uint64_t v67 = 0;
        *(void *)(a1 + 240) |= 0x400000uLL;
        while (2)
        {
          uint64_t v68 = *v19;
          uint64_t v69 = *(void *)(v3 + v68);
          unint64_t v70 = v69 + 1;
          if (v69 == -1 || v70 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v20) = 1;
          }
          else
          {
            char v71 = *(unsigned char *)(*(void *)(v3 + *v21) + v69);
            *(void *)(v3 + v68) = v70;
            v67 |= (unint64_t)(v71 & 0x7F) << v65;
            if (v71 < 0)
            {
              v65 += 7;
              BOOL v29 = v66++ >= 9;
              if (v29)
              {
                uint64_t v67 = 0;
                goto LABEL_375;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v20)) {
          uint64_t v67 = 0;
        }
LABEL_375:
        BOOL v266 = v67 != 0;
        uint64_t v267 = 225;
        goto LABEL_480;
      case 11:
        if ((v8 & 1) == 0) {
          goto LABEL_358;
        }
        char v72 = 0;
        unsigned int v73 = 0;
        uint64_t v74 = 0;
        *(void *)(a1 + 240) |= 0x200000uLL;
        while (2)
        {
          uint64_t v75 = *v19;
          uint64_t v76 = *(void *)(v3 + v75);
          unint64_t v77 = v76 + 1;
          if (v76 == -1 || v77 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v20) = 1;
          }
          else
          {
            char v78 = *(unsigned char *)(*(void *)(v3 + *v21) + v76);
            *(void *)(v3 + v75) = v77;
            v74 |= (unint64_t)(v78 & 0x7F) << v72;
            if (v78 < 0)
            {
              v72 += 7;
              BOOL v29 = v73++ >= 9;
              if (v29)
              {
                uint64_t v74 = 0;
                goto LABEL_379;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v20)) {
          uint64_t v74 = 0;
        }
LABEL_379:
        BOOL v266 = v74 != 0;
        uint64_t v267 = 224;
        goto LABEL_480;
      case 12:
        if ((v8 & 1) == 0) {
          goto LABEL_358;
        }
        char v79 = 0;
        unsigned int v80 = 0;
        uint64_t v81 = 0;
        *(void *)(a1 + 240) |= 0x400000000uLL;
        while (2)
        {
          uint64_t v82 = *v19;
          uint64_t v83 = *(void *)(v3 + v82);
          unint64_t v84 = v83 + 1;
          if (v83 == -1 || v84 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v20) = 1;
          }
          else
          {
            char v85 = *(unsigned char *)(*(void *)(v3 + *v21) + v83);
            *(void *)(v3 + v82) = v84;
            v81 |= (unint64_t)(v85 & 0x7F) << v79;
            if (v85 < 0)
            {
              v79 += 7;
              BOOL v29 = v80++ >= 9;
              if (v29)
              {
                uint64_t v81 = 0;
                goto LABEL_383;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v20)) {
          uint64_t v81 = 0;
        }
LABEL_383:
        BOOL v266 = v81 != 0;
        uint64_t v267 = 237;
        goto LABEL_480;
      case 13:
        if ((v8 & 1) == 0) {
          goto LABEL_358;
        }
        char v86 = 0;
        unsigned int v87 = 0;
        uint64_t v88 = 0;
        *(void *)(a1 + 240) |= 0x4000uLL;
        while (2)
        {
          uint64_t v89 = *v19;
          uint64_t v90 = *(void *)(v3 + v89);
          unint64_t v91 = v90 + 1;
          if (v90 == -1 || v91 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v20) = 1;
          }
          else
          {
            char v92 = *(unsigned char *)(*(void *)(v3 + *v21) + v90);
            *(void *)(v3 + v89) = v91;
            v88 |= (unint64_t)(v92 & 0x7F) << v86;
            if (v92 < 0)
            {
              v86 += 7;
              BOOL v29 = v87++ >= 9;
              if (v29)
              {
                uint64_t v88 = 0;
                goto LABEL_387;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v20)) {
          uint64_t v88 = 0;
        }
LABEL_387:
        BOOL v266 = v88 != 0;
        uint64_t v267 = 217;
        goto LABEL_480;
      case 14:
        if ((v8 & 1) == 0) {
          goto LABEL_358;
        }
        char v93 = 0;
        unsigned int v94 = 0;
        uint64_t v95 = 0;
        *(void *)(a1 + 240) |= 0x40000uLL;
        while (2)
        {
          uint64_t v96 = *v19;
          uint64_t v97 = *(void *)(v3 + v96);
          unint64_t v98 = v97 + 1;
          if (v97 == -1 || v98 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v20) = 1;
          }
          else
          {
            char v99 = *(unsigned char *)(*(void *)(v3 + *v21) + v97);
            *(void *)(v3 + v96) = v98;
            v95 |= (unint64_t)(v99 & 0x7F) << v93;
            if (v99 < 0)
            {
              v93 += 7;
              BOOL v29 = v94++ >= 9;
              if (v29)
              {
                uint64_t v95 = 0;
                goto LABEL_391;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v20)) {
          uint64_t v95 = 0;
        }
LABEL_391:
        BOOL v266 = v95 != 0;
        uint64_t v267 = 221;
        goto LABEL_480;
      case 15:
        if ((v8 & 1) == 0) {
          goto LABEL_358;
        }
        char v100 = 0;
        unsigned int v101 = 0;
        uint64_t v102 = 0;
        *(void *)(a1 + 240) |= 0x80000uLL;
        while (2)
        {
          uint64_t v103 = *v19;
          uint64_t v104 = *(void *)(v3 + v103);
          unint64_t v105 = v104 + 1;
          if (v104 == -1 || v105 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v20) = 1;
          }
          else
          {
            char v106 = *(unsigned char *)(*(void *)(v3 + *v21) + v104);
            *(void *)(v3 + v103) = v105;
            v102 |= (unint64_t)(v106 & 0x7F) << v100;
            if (v106 < 0)
            {
              v100 += 7;
              BOOL v29 = v101++ >= 9;
              if (v29)
              {
                uint64_t v102 = 0;
                goto LABEL_395;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v20)) {
          uint64_t v102 = 0;
        }
LABEL_395:
        BOOL v266 = v102 != 0;
        uint64_t v267 = 222;
        goto LABEL_480;
      case 16:
        if ((v8 & 1) == 0) {
          goto LABEL_358;
        }
        char v107 = 0;
        unsigned int v108 = 0;
        uint64_t v109 = 0;
        *(void *)(a1 + 240) |= 0x8000000uLL;
        while (2)
        {
          uint64_t v110 = *v19;
          uint64_t v111 = *(void *)(v3 + v110);
          unint64_t v112 = v111 + 1;
          if (v111 == -1 || v112 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v20) = 1;
          }
          else
          {
            char v113 = *(unsigned char *)(*(void *)(v3 + *v21) + v111);
            *(void *)(v3 + v110) = v112;
            v109 |= (unint64_t)(v113 & 0x7F) << v107;
            if (v113 < 0)
            {
              v107 += 7;
              BOOL v29 = v108++ >= 9;
              if (v29)
              {
                uint64_t v109 = 0;
                goto LABEL_399;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v20)) {
          uint64_t v109 = 0;
        }
LABEL_399:
        BOOL v266 = v109 != 0;
        uint64_t v267 = 230;
        goto LABEL_480;
      case 17:
        if (!v33) {
          goto LABEL_358;
        }
        if ((*(unsigned char *)(a1 + 245) & 8) != 0)
        {
          char v271 = PBReaderSkipValueWithTag();
          unint64_t v20 = (int *)MEMORY[0x1E4F940C8];
          if ((v271 & 1) == 0) {
            goto LABEL_530;
          }
          uint64_t v270 = *(void *)(a1 + 240) << 20;
          goto LABEL_502;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_530;
        }
        uint64_t v283 = objc_alloc_init(GEOLatLng);
        if (!GEOLatLngReadAllFrom((uint64_t)v283, (void *)v3)) {
          goto LABEL_529;
        }
        PBReaderRecallMark();
        uint64_t v39 = 152;
        goto LABEL_355;
      case 18:
        if ((v8 & 1) == 0) {
          goto LABEL_358;
        }
        char v114 = 0;
        unsigned int v115 = 0;
        uint64_t v116 = 0;
        *(void *)(a1 + 240) |= 0x100000uLL;
        while (2)
        {
          uint64_t v117 = *v19;
          uint64_t v118 = *(void *)(v3 + v117);
          unint64_t v119 = v118 + 1;
          if (v118 == -1 || v119 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v20) = 1;
          }
          else
          {
            char v120 = *(unsigned char *)(*(void *)(v3 + *v21) + v118);
            *(void *)(v3 + v117) = v119;
            v116 |= (unint64_t)(v120 & 0x7F) << v114;
            if (v120 < 0)
            {
              v114 += 7;
              BOOL v29 = v115++ >= 9;
              if (v29)
              {
                uint64_t v116 = 0;
                goto LABEL_403;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v20)) {
          uint64_t v116 = 0;
        }
LABEL_403:
        BOOL v266 = v116 != 0;
        uint64_t v267 = 223;
        goto LABEL_480;
      case 19:
        if ((v8 & 1) == 0) {
          goto LABEL_358;
        }
        char v121 = 0;
        unsigned int v122 = 0;
        uint64_t v123 = 0;
        *(void *)(a1 + 240) |= 0x1000000uLL;
        while (2)
        {
          uint64_t v124 = *v19;
          uint64_t v125 = *(void *)(v3 + v124);
          unint64_t v126 = v125 + 1;
          if (v125 == -1 || v126 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v20) = 1;
          }
          else
          {
            char v127 = *(unsigned char *)(*(void *)(v3 + *v21) + v125);
            *(void *)(v3 + v124) = v126;
            v123 |= (unint64_t)(v127 & 0x7F) << v121;
            if (v127 < 0)
            {
              v121 += 7;
              BOOL v29 = v122++ >= 9;
              if (v29)
              {
                uint64_t v123 = 0;
                goto LABEL_407;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v20)) {
          uint64_t v123 = 0;
        }
LABEL_407:
        BOOL v266 = v123 != 0;
        uint64_t v267 = 227;
        goto LABEL_480;
      case 20:
        if ((v8 & 1) == 0) {
          goto LABEL_358;
        }
        char v128 = 0;
        unsigned int v129 = 0;
        uint64_t v53 = 0;
        *(void *)(a1 + 240) |= 0x400uLL;
        while (2)
        {
          uint64_t v130 = *v19;
          uint64_t v131 = *(void *)(v3 + v130);
          unint64_t v132 = v131 + 1;
          if (v131 == -1 || v132 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v20) = 1;
          }
          else
          {
            char v133 = *(unsigned char *)(*(void *)(v3 + *v21) + v131);
            *(void *)(v3 + v130) = v132;
            v53 |= (unint64_t)(v133 & 0x7F) << v128;
            if (v133 < 0)
            {
              v128 += 7;
              BOOL v29 = v129++ >= 9;
              if (v29)
              {
                LODWORD(v53) = 0;
                goto LABEL_411;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v20)) {
          LODWORD(v53) = 0;
        }
LABEL_411:
        uint64_t v268 = 204;
        goto LABEL_489;
      case 21:
        if ((v8 & 1) == 0) {
          goto LABEL_358;
        }
        char v134 = 0;
        unsigned int v135 = 0;
        uint64_t v53 = 0;
        *(void *)(a1 + 240) |= 0x200uLL;
        while (2)
        {
          uint64_t v136 = *v19;
          uint64_t v137 = *(void *)(v3 + v136);
          unint64_t v138 = v137 + 1;
          if (v137 == -1 || v138 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v20) = 1;
          }
          else
          {
            char v139 = *(unsigned char *)(*(void *)(v3 + *v21) + v137);
            *(void *)(v3 + v136) = v138;
            v53 |= (unint64_t)(v139 & 0x7F) << v134;
            if (v139 < 0)
            {
              v134 += 7;
              BOOL v29 = v135++ >= 9;
              if (v29)
              {
                LODWORD(v53) = 0;
                goto LABEL_415;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v20)) {
          LODWORD(v53) = 0;
        }
LABEL_415:
        uint64_t v268 = 200;
        goto LABEL_489;
      case 22:
        if ((v8 & 1) == 0) {
          goto LABEL_358;
        }
        char v140 = 0;
        unsigned int v141 = 0;
        uint64_t v53 = 0;
        *(void *)(a1 + 240) |= 0x100uLL;
        while (2)
        {
          uint64_t v142 = *v19;
          uint64_t v143 = *(void *)(v3 + v142);
          unint64_t v144 = v143 + 1;
          if (v143 == -1 || v144 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v20) = 1;
          }
          else
          {
            char v145 = *(unsigned char *)(*(void *)(v3 + *v21) + v143);
            *(void *)(v3 + v142) = v144;
            v53 |= (unint64_t)(v145 & 0x7F) << v140;
            if (v145 < 0)
            {
              v140 += 7;
              BOOL v29 = v141++ >= 9;
              if (v29)
              {
                LODWORD(v53) = 0;
                goto LABEL_419;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v20)) {
          LODWORD(v53) = 0;
        }
LABEL_419:
        uint64_t v268 = 196;
        goto LABEL_489;
      case 23:
        if ((v8 & 1) == 0) {
          goto LABEL_358;
        }
        char v146 = 0;
        unsigned int v147 = 0;
        uint64_t v53 = 0;
        *(void *)(a1 + 240) |= 0x800uLL;
        while (2)
        {
          uint64_t v148 = *v19;
          uint64_t v149 = *(void *)(v3 + v148);
          unint64_t v150 = v149 + 1;
          if (v149 == -1 || v150 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v20) = 1;
          }
          else
          {
            char v151 = *(unsigned char *)(*(void *)(v3 + *v21) + v149);
            *(void *)(v3 + v148) = v150;
            v53 |= (unint64_t)(v151 & 0x7F) << v146;
            if (v151 < 0)
            {
              v146 += 7;
              BOOL v29 = v147++ >= 9;
              if (v29)
              {
                LODWORD(v53) = 0;
                goto LABEL_423;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v20)) {
          LODWORD(v53) = 0;
        }
LABEL_423:
        uint64_t v268 = 208;
        goto LABEL_489;
      case 24:
        if (!v33 || (*(unsigned char *)(a1 + 245) & 0x10) != 0) {
          goto LABEL_358;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_530;
        }
        uint64_t v283 = objc_alloc_init(GEOWaypointInfo);
        if (!GEOWaypointInfoReadAllFrom((uint64_t)v283, (void *)v3, v9 & 1)) {
          goto LABEL_529;
        }
        PBReaderRecallMark();
        -[GEOLogMsgEventDirections _addNoFlagsWaypoints:](a1, v283);
LABEL_205:

        goto LABEL_357;
      case 25:
        if (!v33) {
          goto LABEL_358;
        }
        if ((*(unsigned char *)(a1 + 245) & 1) == 0)
        {
          uint64_t v152 = PBReaderReadString();
          uint64_t v153 = 120;
          goto LABEL_212;
        }
        char v272 = PBReaderSkipValueWithTag();
        unint64_t v20 = (int *)MEMORY[0x1E4F940C8];
        if ((v272 & 1) == 0) {
          goto LABEL_530;
        }
        uint64_t v270 = *(void *)(a1 + 240) << 23;
        goto LABEL_502;
      case 26:
        if (!v33) {
          goto LABEL_358;
        }
        if ((*(unsigned char *)(a1 + 244) & 0x80) == 0)
        {
          uint64_t v152 = PBReaderReadString();
          uint64_t v153 = 112;
LABEL_212:
          unsigned int v154 = *(void **)(a1 + v153);
          *(void *)(a1 + v153) = v152;
          goto LABEL_356;
        }
        char v273 = PBReaderSkipValueWithTag();
        unint64_t v20 = (int *)MEMORY[0x1E4F940C8];
        if ((v273 & 1) == 0) {
          goto LABEL_530;
        }
        uint64_t v270 = *(void *)(a1 + 240) << 24;
        goto LABEL_502;
      case 27:
        if ((v8 & 1) == 0) {
          goto LABEL_358;
        }
        char v155 = 0;
        unsigned int v156 = 0;
        uint64_t v53 = 0;
        *(void *)(a1 + 240) |= 0x10uLL;
        while (2)
        {
          uint64_t v157 = *v19;
          uint64_t v158 = *(void *)(v3 + v157);
          unint64_t v159 = v158 + 1;
          if (v158 == -1 || v159 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v20) = 1;
          }
          else
          {
            char v160 = *(unsigned char *)(*(void *)(v3 + *v21) + v158);
            *(void *)(v3 + v157) = v159;
            v53 |= (unint64_t)(v160 & 0x7F) << v155;
            if (v160 < 0)
            {
              v155 += 7;
              BOOL v29 = v156++ >= 9;
              if (v29)
              {
                LODWORD(v53) = 0;
                goto LABEL_427;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v20)) {
          LODWORD(v53) = 0;
        }
LABEL_427:
        uint64_t v268 = 180;
        goto LABEL_489;
      case 28:
        if ((v8 & 1) == 0) {
          goto LABEL_358;
        }
        char v161 = 0;
        unsigned int v162 = 0;
        uint64_t v163 = 0;
        *(void *)(a1 + 240) |= 0x10000uLL;
        while (2)
        {
          uint64_t v164 = *v19;
          uint64_t v165 = *(void *)(v3 + v164);
          unint64_t v166 = v165 + 1;
          if (v165 == -1 || v166 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v20) = 1;
          }
          else
          {
            char v167 = *(unsigned char *)(*(void *)(v3 + *v21) + v165);
            *(void *)(v3 + v164) = v166;
            v163 |= (unint64_t)(v167 & 0x7F) << v161;
            if (v167 < 0)
            {
              v161 += 7;
              BOOL v29 = v162++ >= 9;
              if (v29)
              {
                uint64_t v163 = 0;
                goto LABEL_431;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v20)) {
          uint64_t v163 = 0;
        }
LABEL_431:
        BOOL v266 = v163 != 0;
        uint64_t v267 = 219;
        goto LABEL_480;
      case 29:
        if ((v8 & 1) == 0) {
          goto LABEL_358;
        }
        char v168 = 0;
        unsigned int v169 = 0;
        uint64_t v170 = 0;
        *(void *)(a1 + 240) |= 0x8000uLL;
        while (2)
        {
          uint64_t v171 = *v19;
          uint64_t v172 = *(void *)(v3 + v171);
          unint64_t v173 = v172 + 1;
          if (v172 == -1 || v173 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v20) = 1;
          }
          else
          {
            char v174 = *(unsigned char *)(*(void *)(v3 + *v21) + v172);
            *(void *)(v3 + v171) = v173;
            v170 |= (unint64_t)(v174 & 0x7F) << v168;
            if (v174 < 0)
            {
              v168 += 7;
              BOOL v29 = v169++ >= 9;
              if (v29)
              {
                uint64_t v170 = 0;
                goto LABEL_435;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v20)) {
          uint64_t v170 = 0;
        }
LABEL_435:
        BOOL v266 = v170 != 0;
        uint64_t v267 = 218;
        goto LABEL_480;
      case 30:
        if ((v8 & 1) == 0) {
          goto LABEL_358;
        }
        char v175 = 0;
        unsigned int v176 = 0;
        uint64_t v53 = 0;
        *(void *)(a1 + 240) |= 0x1000uLL;
        while (2)
        {
          uint64_t v177 = *v19;
          uint64_t v178 = *(void *)(v3 + v177);
          unint64_t v179 = v178 + 1;
          if (v178 == -1 || v179 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v20) = 1;
          }
          else
          {
            char v180 = *(unsigned char *)(*(void *)(v3 + *v21) + v178);
            *(void *)(v3 + v177) = v179;
            v53 |= (unint64_t)(v180 & 0x7F) << v175;
            if (v180 < 0)
            {
              v175 += 7;
              BOOL v29 = v176++ >= 9;
              if (v29)
              {
                LODWORD(v53) = 0;
                goto LABEL_439;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v20)) {
          LODWORD(v53) = 0;
        }
LABEL_439:
        uint64_t v268 = 212;
        goto LABEL_489;
      case 31:
        if ((v8 & 1) == 0) {
          goto LABEL_358;
        }
        char v181 = 0;
        unsigned int v182 = 0;
        uint64_t v183 = 0;
        *(void *)(a1 + 240) |= 0x2000uLL;
        while (2)
        {
          uint64_t v184 = *v19;
          uint64_t v185 = *(void *)(v3 + v184);
          unint64_t v186 = v185 + 1;
          if (v185 == -1 || v186 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v20) = 1;
          }
          else
          {
            char v187 = *(unsigned char *)(*(void *)(v3 + *v21) + v185);
            *(void *)(v3 + v184) = v186;
            v183 |= (unint64_t)(v187 & 0x7F) << v181;
            if (v187 < 0)
            {
              v181 += 7;
              BOOL v29 = v182++ >= 9;
              if (v29)
              {
                uint64_t v183 = 0;
                goto LABEL_443;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v20)) {
          uint64_t v183 = 0;
        }
LABEL_443:
        BOOL v266 = v183 != 0;
        uint64_t v267 = 216;
        goto LABEL_480;
      case 32:
        if ((v8 & 1) == 0) {
          goto LABEL_358;
        }
        char v188 = 0;
        unsigned int v189 = 0;
        uint64_t v190 = 0;
        *(void *)(a1 + 240) |= 0x2000000uLL;
        while (2)
        {
          uint64_t v191 = *v19;
          uint64_t v192 = *(void *)(v3 + v191);
          unint64_t v193 = v192 + 1;
          if (v192 == -1 || v193 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v20) = 1;
          }
          else
          {
            char v194 = *(unsigned char *)(*(void *)(v3 + *v21) + v192);
            *(void *)(v3 + v191) = v193;
            v190 |= (unint64_t)(v194 & 0x7F) << v188;
            if (v194 < 0)
            {
              v188 += 7;
              BOOL v29 = v189++ >= 9;
              if (v29)
              {
                uint64_t v190 = 0;
                goto LABEL_447;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v20)) {
          uint64_t v190 = 0;
        }
LABEL_447:
        BOOL v266 = v190 != 0;
        uint64_t v267 = 228;
        goto LABEL_480;
      case 33:
        if ((v8 & 1) == 0) {
          goto LABEL_358;
        }
        char v195 = 0;
        unsigned int v196 = 0;
        uint64_t v197 = 0;
        *(void *)(a1 + 240) |= 0x20000000uLL;
        while (2)
        {
          uint64_t v198 = *v19;
          uint64_t v199 = *(void *)(v3 + v198);
          unint64_t v200 = v199 + 1;
          if (v199 == -1 || v200 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v20) = 1;
          }
          else
          {
            char v201 = *(unsigned char *)(*(void *)(v3 + *v21) + v199);
            *(void *)(v3 + v198) = v200;
            v197 |= (unint64_t)(v201 & 0x7F) << v195;
            if (v201 < 0)
            {
              v195 += 7;
              BOOL v29 = v196++ >= 9;
              if (v29)
              {
                uint64_t v197 = 0;
                goto LABEL_451;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v20)) {
          uint64_t v197 = 0;
        }
LABEL_451:
        BOOL v266 = v197 != 0;
        uint64_t v267 = 232;
        goto LABEL_480;
      case 34:
        if ((v8 & 1) == 0) {
          goto LABEL_358;
        }
        char v202 = 0;
        unsigned int v203 = 0;
        uint64_t v204 = 0;
        *(void *)(a1 + 240) |= 0x80000000uLL;
        while (2)
        {
          uint64_t v205 = *v19;
          uint64_t v206 = *(void *)(v3 + v205);
          unint64_t v207 = v206 + 1;
          if (v206 == -1 || v207 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v20) = 1;
          }
          else
          {
            char v208 = *(unsigned char *)(*(void *)(v3 + *v21) + v206);
            *(void *)(v3 + v205) = v207;
            v204 |= (unint64_t)(v208 & 0x7F) << v202;
            if (v208 < 0)
            {
              v202 += 7;
              BOOL v29 = v203++ >= 9;
              if (v29)
              {
                uint64_t v204 = 0;
                goto LABEL_455;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v20)) {
          uint64_t v204 = 0;
        }
LABEL_455:
        BOOL v266 = v204 != 0;
        uint64_t v267 = 234;
        goto LABEL_480;
      case 35:
        if ((v8 & 1) == 0) {
          goto LABEL_358;
        }
        char v209 = 0;
        unsigned int v210 = 0;
        uint64_t v211 = 0;
        *(void *)(a1 + 240) |= 0x10000000uLL;
        while (2)
        {
          uint64_t v212 = *v19;
          uint64_t v213 = *(void *)(v3 + v212);
          unint64_t v214 = v213 + 1;
          if (v213 == -1 || v214 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v20) = 1;
          }
          else
          {
            char v215 = *(unsigned char *)(*(void *)(v3 + *v21) + v213);
            *(void *)(v3 + v212) = v214;
            v211 |= (unint64_t)(v215 & 0x7F) << v209;
            if (v215 < 0)
            {
              v209 += 7;
              BOOL v29 = v210++ >= 9;
              if (v29)
              {
                uint64_t v211 = 0;
                goto LABEL_459;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v20)) {
          uint64_t v211 = 0;
        }
LABEL_459:
        BOOL v266 = v211 != 0;
        uint64_t v267 = 231;
        goto LABEL_480;
      case 36:
        if ((v8 & 1) == 0) {
          goto LABEL_358;
        }
        char v216 = 0;
        unsigned int v217 = 0;
        uint64_t v218 = 0;
        *(void *)(a1 + 240) |= 0x40000000uLL;
        while (2)
        {
          uint64_t v219 = *v19;
          uint64_t v220 = *(void *)(v3 + v219);
          unint64_t v221 = v220 + 1;
          if (v220 == -1 || v221 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v20) = 1;
          }
          else
          {
            char v222 = *(unsigned char *)(*(void *)(v3 + *v21) + v220);
            *(void *)(v3 + v219) = v221;
            v218 |= (unint64_t)(v222 & 0x7F) << v216;
            if (v222 < 0)
            {
              v216 += 7;
              BOOL v29 = v217++ >= 9;
              if (v29)
              {
                uint64_t v218 = 0;
                goto LABEL_463;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v20)) {
          uint64_t v218 = 0;
        }
LABEL_463:
        BOOL v266 = v218 != 0;
        uint64_t v267 = 233;
        goto LABEL_480;
      case 37:
        if ((v8 & 1) == 0) {
          goto LABEL_358;
        }
        char v223 = 0;
        unsigned int v224 = 0;
        uint64_t v225 = 0;
        *(void *)(a1 + 240) |= 0x800000uLL;
        while (2)
        {
          uint64_t v226 = *v19;
          uint64_t v227 = *(void *)(v3 + v226);
          unint64_t v228 = v227 + 1;
          if (v227 == -1 || v228 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v20) = 1;
          }
          else
          {
            char v229 = *(unsigned char *)(*(void *)(v3 + *v21) + v227);
            *(void *)(v3 + v226) = v228;
            v225 |= (unint64_t)(v229 & 0x7F) << v223;
            if (v229 < 0)
            {
              v223 += 7;
              BOOL v29 = v224++ >= 9;
              if (v29)
              {
                uint64_t v225 = 0;
                goto LABEL_467;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v20)) {
          uint64_t v225 = 0;
        }
LABEL_467:
        BOOL v266 = v225 != 0;
        uint64_t v267 = 226;
        goto LABEL_480;
      case 38:
        if ((v8 & 1) == 0) {
          goto LABEL_358;
        }
        char v230 = 0;
        unsigned int v231 = 0;
        uint64_t v232 = 0;
        *(void *)(a1 + 240) |= 0x4000000uLL;
        while (2)
        {
          uint64_t v233 = *v19;
          uint64_t v234 = *(void *)(v3 + v233);
          unint64_t v235 = v234 + 1;
          if (v234 == -1 || v235 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v20) = 1;
          }
          else
          {
            char v236 = *(unsigned char *)(*(void *)(v3 + *v21) + v234);
            *(void *)(v3 + v233) = v235;
            v232 |= (unint64_t)(v236 & 0x7F) << v230;
            if (v236 < 0)
            {
              v230 += 7;
              BOOL v29 = v231++ >= 9;
              if (v29)
              {
                uint64_t v232 = 0;
                goto LABEL_471;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v20)) {
          uint64_t v232 = 0;
        }
LABEL_471:
        BOOL v266 = v232 != 0;
        uint64_t v267 = 229;
        goto LABEL_480;
      case 39:
        if ((v8 & 1) == 0) {
          goto LABEL_358;
        }
        char v237 = 0;
        unsigned int v238 = 0;
        uint64_t v239 = 0;
        *(void *)(a1 + 240) |= 0x200000000uLL;
        while (2)
        {
          uint64_t v240 = *v19;
          uint64_t v241 = *(void *)(v3 + v240);
          unint64_t v242 = v241 + 1;
          if (v241 == -1 || v242 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v20) = 1;
          }
          else
          {
            char v243 = *(unsigned char *)(*(void *)(v3 + *v21) + v241);
            *(void *)(v3 + v240) = v242;
            v239 |= (unint64_t)(v243 & 0x7F) << v237;
            if (v243 < 0)
            {
              v237 += 7;
              BOOL v29 = v238++ >= 9;
              if (v29)
              {
                uint64_t v239 = 0;
                goto LABEL_475;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v20)) {
          uint64_t v239 = 0;
        }
LABEL_475:
        BOOL v266 = v239 != 0;
        uint64_t v267 = 236;
        goto LABEL_480;
      case 40:
        if ((v8 & 1) == 0) {
          goto LABEL_358;
        }
        char v244 = 0;
        unsigned int v245 = 0;
        uint64_t v246 = 0;
        *(void *)(a1 + 240) |= 0x100000000uLL;
        while (2)
        {
          uint64_t v247 = *v19;
          uint64_t v248 = *(void *)(v3 + v247);
          unint64_t v249 = v248 + 1;
          if (v248 == -1 || v249 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v20) = 1;
          }
          else
          {
            char v250 = *(unsigned char *)(*(void *)(v3 + *v21) + v248);
            *(void *)(v3 + v247) = v249;
            v246 |= (unint64_t)(v250 & 0x7F) << v244;
            if (v250 < 0)
            {
              v244 += 7;
              BOOL v29 = v245++ >= 9;
              if (v29)
              {
                uint64_t v246 = 0;
                goto LABEL_479;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v20)) {
          uint64_t v246 = 0;
        }
LABEL_479:
        BOOL v266 = v246 != 0;
        uint64_t v267 = 235;
LABEL_480:
        *(unsigned char *)(a1 + v267) = v266;
        goto LABEL_508;
      case 41:
        if (!v33) {
          goto LABEL_358;
        }
        if ((*(unsigned char *)(a1 + 245) & 4) != 0)
        {
          char v274 = PBReaderSkipValueWithTag();
          unint64_t v20 = (int *)MEMORY[0x1E4F940C8];
          if ((v274 & 1) == 0) {
            goto LABEL_530;
          }
          uint64_t v270 = *(void *)(a1 + 240) << 21;
          goto LABEL_502;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_530;
        }
        uint64_t v283 = objc_alloc_init(GEOLocation);
        if (!GEOLocationReadAllFrom((uint64_t)v283, (void *)v3, v9 & 1)) {
          goto LABEL_529;
        }
        PBReaderRecallMark();
        uint64_t v39 = 136;
        goto LABEL_355;
      case 42:
        if ((v8 & 1) == 0) {
          goto LABEL_358;
        }
        *(void *)(a1 + 240) |= 8uLL;
        uint64_t v251 = *v19;
        unint64_t v252 = *(void *)(v3 + v251);
        if (v252 <= 0xFFFFFFFFFFFFFFF7 && v252 + 8 <= *(void *)(v3 + *v6))
        {
          uint64_t v50 = *(void *)(*(void *)(v3 + *v21) + v252);
          *(void *)(v3 + v251) = v252 + 8;
        }
        else
        {
          *(unsigned char *)(v3 + *v20) = 1;
          uint64_t v50 = 0;
        }
        uint64_t v276 = 144;
LABEL_507:
        *(void *)(a1 + v276) = v50;
        goto LABEL_508;
      case 43:
        if ((v8 & 1) == 0) {
          goto LABEL_358;
        }
        char v253 = 0;
        unsigned int v254 = 0;
        uint64_t v53 = 0;
        *(void *)(a1 + 240) |= 0x20uLL;
        while (2)
        {
          uint64_t v255 = *v19;
          uint64_t v256 = *(void *)(v3 + v255);
          unint64_t v257 = v256 + 1;
          if (v256 == -1 || v257 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v20) = 1;
          }
          else
          {
            char v258 = *(unsigned char *)(*(void *)(v3 + *v21) + v256);
            *(void *)(v3 + v255) = v257;
            v53 |= (unint64_t)(v258 & 0x7F) << v253;
            if (v258 < 0)
            {
              v253 += 7;
              BOOL v29 = v254++ >= 9;
              if (v29)
              {
                LODWORD(v53) = 0;
                goto LABEL_484;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v20)) {
          LODWORD(v53) = 0;
        }
LABEL_484:
        uint64_t v268 = 184;
        goto LABEL_489;
      case 44:
        if ((v8 & 1) == 0) {
          goto LABEL_358;
        }
        char v259 = 0;
        unsigned int v260 = 0;
        uint64_t v53 = 0;
        *(void *)(a1 + 240) |= 0x40uLL;
        while (2)
        {
          uint64_t v261 = *v19;
          uint64_t v262 = *(void *)(v3 + v261);
          unint64_t v263 = v262 + 1;
          if (v262 == -1 || v263 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v20) = 1;
          }
          else
          {
            char v264 = *(unsigned char *)(*(void *)(v3 + *v21) + v262);
            *(void *)(v3 + v261) = v263;
            v53 |= (unint64_t)(v264 & 0x7F) << v259;
            if (v264 < 0)
            {
              v259 += 7;
              BOOL v29 = v260++ >= 9;
              if (v29)
              {
                LODWORD(v53) = 0;
                goto LABEL_488;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v20)) {
          LODWORD(v53) = 0;
        }
LABEL_488:
        uint64_t v268 = 188;
LABEL_489:
        *(_DWORD *)(a1 + v268) = v53;
        goto LABEL_508;
      case 45:
        if (!v33)
        {
LABEL_358:
          char v265 = PBReaderSkipValueWithTag();
          unint64_t v20 = (int *)MEMORY[0x1E4F940C8];
          if ((v265 & 1) == 0) {
            goto LABEL_530;
          }
          goto LABEL_508;
        }
        if ((*(unsigned char *)(a1 + 244) & 0x10) != 0)
        {
          char v275 = PBReaderSkipValueWithTag();
          unint64_t v20 = (int *)MEMORY[0x1E4F940C8];
          if ((v275 & 1) == 0) {
            goto LABEL_530;
          }
          uint64_t v270 = *(void *)(a1 + 240) << 27;
LABEL_502:
          v7 += v270 >> 63;
          goto LABEL_508;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_530;
        }
        uint64_t v283 = objc_alloc_init(GEOLocation);
        if (GEOLocationReadAllFrom((uint64_t)v283, (void *)v3, v9 & 1))
        {
          PBReaderRecallMark();
          uint64_t v39 = 80;
LABEL_355:
          unsigned int v154 = *(void **)(a1 + v39);
          *(void *)(a1 + v39) = v283;
LABEL_356:

          --v7;
LABEL_357:
          unint64_t v20 = (int *)MEMORY[0x1E4F940C8];
LABEL_508:
          if (!(v17 & 1 | (v7 != 0))) {
            goto LABEL_509;
          }
          continue;
        }
LABEL_529:

LABEL_530:
        uint64_t v3 = 0;
        *(void *)(a1 + 240) |= 0x1FF000000000uLL;
        if (v17) {
          goto LABEL_527;
        }
        return v3;
      default:
        int v38 = PBReaderSkipValueWithTag();
        unint64_t v20 = (int *)MEMORY[0x1E4F940C8];
        if (!v38) {
          goto LABEL_530;
        }
        goto LABEL_508;
    }
  }
}

id GEOGetSubscriptionsDownloadManagerLog()
{
  if (qword_1EB29F6F8 != -1) {
    dispatch_once(&qword_1EB29F6F8, &__block_literal_global_315);
  }
  uint64_t v0 = (void *)_MergedGlobals_200;

  return v0;
}

id GEOGetSubscriptionsDownloadManagerLog_0()
{
  if (qword_1EB29F868 != -1) {
    dispatch_once(&qword_1EB29F868, &__block_literal_global_55);
  }
  uint64_t v0 = (void *)_MergedGlobals_215;

  return v0;
}

id GEOGetRequestCountPowerLoggerLog()
{
  if (qword_1EB29F858 != -1) {
    dispatch_once(&qword_1EB29F858, &__block_literal_global_85_0);
  }
  uint64_t v0 = (void *)qword_1EB29F850;

  return v0;
}

BOOL GEOETAResultIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  BOOL v2 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        break;
      }
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0) {
            goto LABEL_69;
          }
          unsigned int v17 = 0;
          while (1)
          {
            uint64_t v18 = *v2;
            uint64_t v19 = *(void *)&a1[v18];
            unint64_t v20 = v19 + 1;
            if (v19 == -1 || v20 > *(void *)&a1[*v3]) {
              goto LABEL_57;
            }
            int v21 = *(char *)(*(void *)&a1[*v5] + v19);
            *(void *)&a1[v18] = v20;
            if (v21 < 0)
            {
              BOOL v22 = v17++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_66;
          }
        case 2u:
          if ((v8 & 7) != 0) {
            goto LABEL_69;
          }
          unsigned int v23 = 0;
          while (1)
          {
            uint64_t v24 = *v2;
            uint64_t v25 = *(void *)&a1[v24];
            unint64_t v26 = v25 + 1;
            if (v25 == -1 || v26 > *(void *)&a1[*v3]) {
              goto LABEL_57;
            }
            int v27 = *(char *)(*(void *)&a1[*v5] + v25);
            *(void *)&a1[v24] = v26;
            if (v27 < 0)
            {
              BOOL v22 = v23++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_66;
          }
        case 3u:
          if ((v8 & 7) != 0) {
            goto LABEL_69;
          }
          unsigned int v28 = 0;
          while (1)
          {
            uint64_t v29 = *v2;
            uint64_t v30 = *(void *)&a1[v29];
            unint64_t v31 = v30 + 1;
            if (v30 == -1 || v31 > *(void *)&a1[*v3]) {
              goto LABEL_57;
            }
            int v32 = *(char *)(*(void *)&a1[*v5] + v30);
            *(void *)&a1[v29] = v31;
            if (v32 < 0)
            {
              BOOL v22 = v28++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_66;
          }
        case 4u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPlaceSearchResponseIsValid(a1)) {
            goto LABEL_69;
          }
          goto LABEL_65;
        case 5u:
          if ((v8 & 7) != 0) {
            goto LABEL_69;
          }
          unsigned int v33 = 0;
          break;
        case 6u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOETAResultByTypeIsValid(a1)) {
            goto LABEL_69;
          }
          goto LABEL_65;
        case 7u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOETARouteIncidentIsValid(a1)) {
            goto LABEL_69;
          }
LABEL_65:
          PBReaderRecallMark();
          continue;
        default:
          if (PBReaderSkipValueWithTag()) {
            continue;
          }
LABEL_69:
          PBReaderRecallMark();
          return 0;
      }
      while (1)
      {
        uint64_t v34 = *v2;
        uint64_t v35 = *(void *)&a1[v34];
        unint64_t v36 = v35 + 1;
        if (v35 == -1 || v36 > *(void *)&a1[*v3]) {
          break;
        }
        int v37 = *(char *)(*(void *)&a1[*v5] + v35);
        *(void *)&a1[v34] = v36;
        if (v37 < 0)
        {
          BOOL v22 = v33++ > 8;
          if (!v22) {
            continue;
          }
        }
        goto LABEL_66;
      }
LABEL_57:
      a1[*v4] = 1;
LABEL_66:
      ;
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v38 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v38;
}

BOOL GEOETAResultByTypeIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  BOOL v2 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] >= *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
LABEL_137:
    BOOL v78 = a1[*v4] == 0;
    PBReaderRecallMark();
    return v78;
  }
  uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (a1[*v4]) {
      goto LABEL_137;
    }
    char v6 = 0;
    unsigned int v7 = 0;
    unint64_t v8 = 0;
    while (1)
    {
      uint64_t v9 = *v2;
      uint64_t v10 = *(void *)&a1[v9];
      unint64_t v11 = v10 + 1;
      if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
        break;
      }
      char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
      *(void *)&a1[v9] = v11;
      v8 |= (unint64_t)(v12 & 0x7F) << v6;
      if ((v12 & 0x80) == 0) {
        goto LABEL_12;
      }
      v6 += 7;
      BOOL v13 = v7++ >= 9;
      if (v13)
      {
        unint64_t v8 = 0;
        uint64_t v14 = *v4;
        int v15 = a1[v14];
        goto LABEL_14;
      }
    }
    a1[*v4] = 1;
LABEL_12:
    uint64_t v14 = *v4;
    int v15 = a1[v14];
    if (a1[v14]) {
      unint64_t v8 = 0;
    }
LABEL_14:
    int v16 = v8 & 7;
    if (v15 || v16 == 4) {
      goto LABEL_137;
    }
    switch((v8 >> 3))
    {
      case 1u:
        if ((v8 & 7) != 0) {
          goto LABEL_140;
        }
        unsigned int v18 = 0;
        while (1)
        {
          uint64_t v19 = *v2;
          uint64_t v20 = *(void *)&a1[v19];
          unint64_t v21 = v20 + 1;
          if (v20 == -1 || v21 > *(void *)&a1[*v3]) {
            goto LABEL_132;
          }
          int v22 = *(char *)(*(void *)&a1[*v5] + v20);
          *(void *)&a1[v19] = v21;
          if (v22 < 0)
          {
            BOOL v23 = v18++ > 8;
            if (!v23) {
              continue;
            }
          }
          goto LABEL_136;
        }
      case 2u:
        if ((v8 & 7) != 0) {
          goto LABEL_140;
        }
        unsigned int v24 = 0;
        while (1)
        {
          uint64_t v25 = *v2;
          uint64_t v26 = *(void *)&a1[v25];
          unint64_t v27 = v26 + 1;
          if (v26 == -1 || v27 > *(void *)&a1[*v3]) {
            goto LABEL_132;
          }
          int v28 = *(char *)(*(void *)&a1[*v5] + v26);
          *(void *)&a1[v25] = v27;
          if (v28 < 0)
          {
            BOOL v23 = v24++ > 8;
            if (!v23) {
              continue;
            }
          }
          goto LABEL_136;
        }
      case 3u:
        if ((v8 & 7) != 0) {
          goto LABEL_140;
        }
        unsigned int v29 = 0;
        while (1)
        {
          uint64_t v30 = *v2;
          uint64_t v31 = *(void *)&a1[v30];
          unint64_t v32 = v31 + 1;
          if (v31 == -1 || v32 > *(void *)&a1[*v3]) {
            goto LABEL_132;
          }
          int v33 = *(char *)(*(void *)&a1[*v5] + v31);
          *(void *)&a1[v30] = v32;
          if (v33 < 0)
          {
            BOOL v23 = v29++ > 8;
            if (!v23) {
              continue;
            }
          }
          goto LABEL_136;
        }
      case 4u:
        if ((v8 & 7) != 0) {
          goto LABEL_140;
        }
        unsigned int v34 = 0;
        while (1)
        {
          uint64_t v35 = *v2;
          uint64_t v36 = *(void *)&a1[v35];
          unint64_t v37 = v36 + 1;
          if (v36 == -1 || v37 > *(void *)&a1[*v3]) {
            goto LABEL_132;
          }
          int v38 = *(char *)(*(void *)&a1[*v5] + v36);
          *(void *)&a1[v35] = v37;
          if (v38 < 0)
          {
            BOOL v23 = v34++ > 8;
            if (!v23) {
              continue;
            }
          }
          goto LABEL_136;
        }
      case 5u:
        if ((v8 & 7) != 0) {
          goto LABEL_140;
        }
        unsigned int v39 = 0;
        while (1)
        {
          uint64_t v40 = *v2;
          uint64_t v41 = *(void *)&a1[v40];
          unint64_t v42 = v41 + 1;
          if (v41 == -1 || v42 > *(void *)&a1[*v3]) {
            goto LABEL_132;
          }
          int v43 = *(char *)(*(void *)&a1[*v5] + v41);
          *(void *)&a1[v40] = v42;
          if (v43 < 0)
          {
            BOOL v23 = v39++ > 8;
            if (!v23) {
              continue;
            }
          }
          goto LABEL_136;
        }
      case 6u:
        if (v16 != 1) {
          goto LABEL_140;
        }
        uint64_t v44 = *v2;
        unint64_t v45 = *(void *)&a1[v44];
        if (v45 > 0xFFFFFFFFFFFFFFF7) {
          goto LABEL_133;
        }
        unint64_t v46 = v45 + 8;
        if (v46 > *(void *)&a1[*v3]) {
          goto LABEL_133;
        }
        *(void *)&a1[v44] = v46;
        goto LABEL_136;
      case 7u:
        if ((v8 & 7) != 0) {
          goto LABEL_140;
        }
        unsigned int v47 = 0;
        while (1)
        {
          uint64_t v48 = *v2;
          uint64_t v49 = *(void *)&a1[v48];
          unint64_t v50 = v49 + 1;
          if (v49 == -1 || v50 > *(void *)&a1[*v3]) {
            goto LABEL_132;
          }
          int v51 = *(char *)(*(void *)&a1[*v5] + v49);
          *(void *)&a1[v48] = v50;
          if (v51 < 0)
          {
            BOOL v23 = v47++ > 8;
            if (!v23) {
              continue;
            }
          }
          goto LABEL_136;
        }
      case 8u:
        if ((v8 & 7) != 0) {
          goto LABEL_140;
        }
        unsigned int v52 = 0;
        while (1)
        {
          uint64_t v53 = *v2;
          uint64_t v54 = *(void *)&a1[v53];
          unint64_t v55 = v54 + 1;
          if (v54 == -1 || v55 > *(void *)&a1[*v3]) {
            goto LABEL_132;
          }
          int v56 = *(char *)(*(void *)&a1[*v5] + v54);
          *(void *)&a1[v53] = v55;
          if (v56 < 0)
          {
            BOOL v23 = v52++ > 8;
            if (!v23) {
              continue;
            }
          }
          goto LABEL_136;
        }
      case 9u:
        if ((v8 & 7) != 0) {
          goto LABEL_140;
        }
        unsigned int v57 = 0;
        while (1)
        {
          uint64_t v58 = *v2;
          uint64_t v59 = *(void *)&a1[v58];
          unint64_t v60 = v59 + 1;
          if (v59 == -1 || v60 > *(void *)&a1[*v3]) {
            goto LABEL_132;
          }
          int v61 = *(char *)(*(void *)&a1[*v5] + v59);
          *(void *)&a1[v58] = v60;
          if (v61 < 0)
          {
            BOOL v23 = v57++ > 8;
            if (!v23) {
              continue;
            }
          }
          goto LABEL_136;
        }
      case 0xAu:
        if (v16 != 2 || !PBReaderPlaceMark() || !GEOFormattedStringIsValid(a1)) {
          goto LABEL_140;
        }
        goto LABEL_135;
      case 0xBu:
        if (v16 == 2 && PBReaderPlaceMark() && GEORouteTrafficDetailIsValid(a1)) {
          goto LABEL_135;
        }
        goto LABEL_140;
      case 0xCu:
        if (v16 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_140;
        }
        objc_msgSend(a1, "position", 0, 0);
        [a1 length];
LABEL_100:
        if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
          goto LABEL_134;
        }
        char v62 = 0;
        unsigned int v63 = 0;
        unint64_t v64 = 0;
        while (1)
        {
          uint64_t v65 = *v2;
          uint64_t v66 = *(void *)&a1[v65];
          unint64_t v67 = v66 + 1;
          if (v66 == -1 || v67 > *(void *)&a1[*v3]) {
            break;
          }
          char v68 = *(unsigned char *)(*(void *)&a1[*v5] + v66);
          *(void *)&a1[v65] = v67;
          v64 |= (unint64_t)(v68 & 0x7F) << v62;
          if ((v68 & 0x80) == 0) {
            goto LABEL_110;
          }
          v62 += 7;
          BOOL v13 = v63++ >= 9;
          if (v13)
          {
            unint64_t v64 = 0;
            int v69 = a1[*v4];
            goto LABEL_112;
          }
        }
        a1[*v4] = 1;
LABEL_110:
        int v69 = a1[*v4];
        if (a1[*v4]) {
          unint64_t v64 = 0;
        }
LABEL_112:
        int v70 = v64 & 7;
        if (v69 || v70 == 4)
        {
LABEL_134:
          int v77 = a1[*v4];
          PBReaderRecallMark();
          if (v77) {
            goto LABEL_140;
          }
LABEL_135:
          PBReaderRecallMark();
LABEL_136:
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
            goto LABEL_137;
          }
          continue;
        }
        if ((v64 >> 3) != 2 && (v64 >> 3) != 1)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_139;
          }
          goto LABEL_100;
        }
        if (v70 == 2 && PBReaderPlaceMark() && GEOFormattedStringIsValid(a1))
        {
          PBReaderRecallMark();
          goto LABEL_100;
        }
LABEL_139:
        PBReaderRecallMark();
LABEL_140:
        PBReaderRecallMark();
        return 0;
      case 0xDu:
        if ((v8 & 7) != 0) {
          goto LABEL_140;
        }
        unsigned int v72 = 0;
        while (1)
        {
          uint64_t v73 = *v2;
          uint64_t v74 = *(void *)&a1[v73];
          unint64_t v75 = v74 + 1;
          if (v74 == -1 || v75 > *(void *)&a1[*v3]) {
            break;
          }
          int v76 = *(char *)(*(void *)&a1[*v5] + v74);
          *(void *)&a1[v73] = v75;
          if (v76 < 0)
          {
            BOOL v23 = v72++ > 8;
            if (!v23) {
              continue;
            }
          }
          goto LABEL_136;
        }
LABEL_132:
        uint64_t v14 = *v4;
LABEL_133:
        a1[v14] = 1;
        goto LABEL_136;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_140;
        }
        goto LABEL_136;
    }
  }
}

BOOL GEOETAResponseIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  BOOL v2 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    while (!a1[*v4])
    {
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        break;
      }
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0) {
            goto LABEL_59;
          }
          unsigned int v17 = 0;
          do
          {
            uint64_t v18 = *v2;
            uint64_t v19 = *(void *)&a1[v18];
            unint64_t v20 = v19 + 1;
            if (v19 == -1 || v20 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
              goto LABEL_57;
            }
            int v21 = *(char *)(*(void *)&a1[*v5] + v19);
            *(void *)&a1[v18] = v20;
            if ((v21 & 0x80000000) == 0) {
              break;
            }
          }
          while (v17++ <= 8);
          goto LABEL_57;
        case 2u:
        case 5u:
        case 6u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOETAResultIsValid(a1)) {
            goto LABEL_59;
          }
          goto LABEL_53;
        case 3u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPlaceSearchResponseIsValid(a1)) {
            goto LABEL_59;
          }
          goto LABEL_53;
        case 4u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOProblemDetailIsValid(a1)) {
            goto LABEL_59;
          }
          goto LABEL_53;
        case 7u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDDatasetABStatusIsValid(a1)) {
            goto LABEL_59;
          }
          goto LABEL_53;
        case 8u:
          if (v15 == 2) {
            goto LABEL_54;
          }
          goto LABEL_59;
        case 9u:
          if (v15 == 2 && PBReaderPlaceMark() && GEOCommonResponseAttributesIsValid(a1)) {
            goto LABEL_53;
          }
          goto LABEL_59;
        default:
          if ((v8 >> 3) == 1051)
          {
            if (v15 != 2 || !PBReaderPlaceMark() || !GEOClientMetricsIsValid(a1))
            {
LABEL_59:
              PBReaderRecallMark();
              return 0;
            }
LABEL_53:
            PBReaderRecallMark();
          }
          else
          {
LABEL_54:
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_59;
            }
          }
LABEL_57:
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
            goto LABEL_58;
          }
          break;
      }
    }
  }
LABEL_58:
  BOOL v23 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v23;
}

BOOL GEODodgeballDetailsReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  BOOL AllFrom = GEODodgeballDetailsReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1890A3BC8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1890A43EC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1890A44B8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1890A4584(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1890A4AC4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 80));
  _Unwind_Resume(a1);
}

void sub_1890A52C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1890A5420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1890A9644(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1890A9A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1890A9BC4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1890A9C90(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1890AA27C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1890AA4FC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1890AAE50(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1890ABA28(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1890ABAE4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1890AC9D0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1890AD51C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1890ADD64(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1890AE6AC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1890AEAB8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1890AEDA8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1890AFE78(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1890AFF34(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1890B03F8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1890B0B14(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1890B0C08(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1890B0DA8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1890B113C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1890B1E50(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1890B33FC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1890B3510(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1890B39E4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1890B3AAC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1890B45E4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1890B4788(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1890B4854(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1890B491C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1890B53BC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1890B5540(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1890B588C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1890B62A8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1890B6FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1890B8054(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1890B8564(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1890BD198(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

#error "1890BD1AC: too complex function (funcsize=10954)"

#error "1890CF3D8: too complex function (funcsize=7824)"

void sub_1890D83EC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1890DDE44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1890DE5BC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1890DE650(_Unwind_Exception *a1)
{
}

void sub_1890DED64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

zilch::GeoPolyline::Walker *zilch::GeoPolyline::Walker::Walker(zilch::GeoPolyline::Walker *this, const zilch::GeoPolyline *a2)
{
  *(void *)this = a2;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  id v3 = (char *)this + 20;
  zilch::GeoCoordinates::GeoCoordinates((zilch::GeoPolyline::Walker *)((char *)this + 20));
  uint64_t v4 = *(zilch::GeoPolyline **)this;
  uint64_t v5 = **(void ***)this;
  if (v5)
  {
    if (v5[1] == *v5
      || (char v6 = zilch::GeoPolyline::getPoint(v4, 0),
          uint64_t v7 = *(void *)v6,
          *((_DWORD *)v3 + 2) = v6[2],
          *(void *)id v3 = v7,
          uint64_t v4 = *(zilch::GeoPolyline **)this,
          (uint64_t v5 = **(void ***)this) != 0))
    {
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5[1] - *v5) >> 2) >= 2)
      {
        Point = (zilch::GeoCoordinates *)zilch::GeoPolyline::getPoint(v4, 0);
        uint64_t v9 = (const zilch::GeoCoordinates *)zilch::GeoPolyline::getPoint(*(zilch::GeoPolyline **)this, 1uLL);
        *((_DWORD *)this + 4) = zilch::GeoCoordinates::distanceTo(Point, v9);
      }
    }
  }
  return this;
}

unint64_t zilch::GeoPolyline::size(zilch::GeoPolyline *this)
{
  if (*(void *)this) {
    return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)this + 8) - **(void **)this) >> 2);
  }
  else {
    return 0;
  }
}

_DWORD *zilch::GeoPolyline::getPoint(zilch::GeoPolyline *this, unint64_t a2)
{
  if (!*(void *)this) {
    return zilch::GeoCoordinates::null(this);
  }
  uint64_t v2 = **(void **)this;
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(*(void *)this + 8) - v2) >> 2);
  if (v3 <= a2) {
    return zilch::GeoCoordinates::null(this);
  }
  int v4 = *((_DWORD *)this + 4);
  uint64_t v5 = v2 + 12 * (v3 + ~a2);
  uint64_t v6 = v2 + 12 * a2;
  uint64_t v7 = v6;
  if (v4) {
    uint64_t v7 = v6;
  }
  if (v4 == 1) {
    return (_DWORD *)v5;
  }
  else {
    return (_DWORD *)v7;
  }
}

BOOL zilch::GeoPolyline::Walker::done(unint64_t **this)
{
  unint64_t v1 = **this;
  if (v1) {
    unint64_t v1 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v1 + 8) - *(void *)v1) >> 2);
  }
  return (unint64_t)this[1] + 1 >= v1;
}

uint64_t zilch::GeoPolyline::Walker::position(zilch::GeoPolyline::Walker *this)
{
  return *(void *)((char *)this + 20);
}

uint64_t zilch::GeoPolyline::Walker::point(zilch::GeoPolyline::Walker *this)
{
  return *((void *)this + 1);
}

uint64_t zilch::GeoPolyline::Walker::heading(uint64_t **this)
{
  unsigned long long v2 = *((_OWORD *)this + 1);
  long long v19 = *(_OWORD *)this;
  unsigned long long v20 = v2;
  uint64_t v17 = v2 >> 32;
  int v18 = HIDWORD(v2);
  if (zilch::GeoPolyline::Walker::advance((zilch::GeoPolyline::Walker *)&v19, 0x32u, *(double *)&v2, *(double *)&v19))
  {
    *(void *)&long long v12 = *(void *)((char *)&v20 + 4);
    DWORD2(v12) = HIDWORD(v20);
    zilch::Angle::Angle((zilch::Angle *)&v21, (const zilch::GeoCoordinates *)&v17, (const zilch::GeoCoordinates *)&v12);
    return v21;
  }
  int v4 = *this;
  uint64_t v5 = (std::__shared_weak_count *)(*this)[1];
  uint64_t v14 = **this;
  int v15 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v6 = *((_DWORD *)v4 + 4);
  int v16 = v6;
  if (v6)
  {
    if (v6 != 1) {
      goto LABEL_10;
    }
    int v7 = 0;
  }
  else
  {
    int v7 = 1;
  }
  int v16 = v7;
LABEL_10:
  zilch::GeoPolyline::Walker::Walker((zilch::GeoPolyline::Walker *)&v12, (const zilch::GeoPolyline *)&v14);
  long long v19 = v12;
  unsigned long long v20 = v13;
  uint64_t v17 = v13 >> 32;
  int v18 = HIDWORD(v13);
  zilch::GeoPolyline::Walker::advance((zilch::GeoPolyline::Walker *)&v19, 0x32u, *(double *)&v13, *(double *)&v12);
  *(void *)&long long v12 = *(void *)((char *)&v20 + 4);
  DWORD2(v12) = HIDWORD(v20);
  unint64_t v8 = zilch::Angle::Angle((zilch::Angle *)&v11, (const zilch::GeoCoordinates *)&v17, (const zilch::GeoCoordinates *)&v12);
  unsigned __int16 v9 = zilch::Angle::pi(v8);
  uint64_t v3 = zilch::Angle::operator+(&v11, v9);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  return v3;
}

void sub_1890DF5C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  _Unwind_Resume(exception_object);
}

BOOL zilch::GeoPolyline::Walker::advance(zilch::GeoPolyline::Walker *this, unsigned int a2, double a3, double a4)
{
  int v6 = *(zilch::GeoPolyline **)this;
  if (*(void *)v6)
  {
    uint64_t v7 = *((void *)this + 1);
    for (uint64_t i = (uint64_t)(*(void *)(*(void *)v6 + 8) - **(void **)v6) >> 2; ; uint64_t i = (uint64_t)(v14[1] - *v14) >> 2)
    {
      unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * i;
      unint64_t v10 = v7 + 1;
      if (v7 + 1 >= v9) {
        break;
      }
      unsigned int v11 = *((_DWORD *)this + 4);
      BOOL v12 = a2 >= v11;
      unsigned int v13 = a2 - v11;
      if (!v12) {
        break;
      }
      a2 = v13;
      zilch::GeoPolyline::Walker::advanceToNextPoint((zilch::GeoPolyline **)this);
      int v6 = *(zilch::GeoPolyline **)this;
      uint64_t v14 = **(void ***)this;
      if (!v14) {
        return a2 == 0;
      }
      uint64_t v7 = *((void *)this + 1);
    }
    if (v10 < v9 && a2)
    {
      LODWORD(a4) = *((_DWORD *)this + 4);
      double v15 = (double)a2 / (double)*(unint64_t *)&a4;
      uint64_t v35 = *(void *)((char *)this + 20);
      int v36 = *((_DWORD *)this + 7);
      Point = zilch::GeoPolyline::getPoint(v6, v10);
      int v17 = Point[2];
      uint64_t v33 = *(void *)Point;
      int v34 = v17;
      int v32 = zilch::GeoCoordinates::x((zilch::GeoCoordinates *)&v33);
      int v18 = zilch::Longitude::toUint32((zilch::Longitude *)&v32);
      int v31 = zilch::GeoCoordinates::x((zilch::GeoCoordinates *)&v35);
      int v19 = v18 - zilch::Longitude::toUint32((zilch::Longitude *)&v31);
      int v32 = zilch::GeoCoordinates::y((zilch::GeoCoordinates *)&v33);
      int v20 = zilch::Latitude::toUint32((zilch::Latitude *)&v32);
      int v31 = zilch::GeoCoordinates::y((zilch::GeoCoordinates *)&v35);
      int v21 = v20 - zilch::Latitude::toUint32((zilch::Latitude *)&v31);
      int v32 = zilch::GeoCoordinates::x((zilch::GeoCoordinates *)&v35);
      int v22 = (zilch::Longitude *)((double)zilch::Longitude::toUint32((zilch::Longitude *)&v32)
                                             + v15 * (double)v19);
      int v32 = zilch::GeoCoordinates::y((zilch::GeoCoordinates *)&v35);
      BOOL v23 = (zilch::Latitude *)((double)zilch::Latitude::toUint32((zilch::Latitude *)&v32)
                                            + v15 * (double)v21);
      LODWORD(v22) = zilch::Longitude::fromUint32(v22, v24);
      unsigned int v26 = zilch::Latitude::fromUint32(v23, v25);
      v27.var0 = v22;
      v28.var0 = v26;
      zilch::GeoCoordinates::set((uint64_t)this + 20, v27, v28);
      unsigned int v29 = *((_DWORD *)this + 4) - a2;
      a2 = 0;
      *((_DWORD *)this + 4) = v29;
    }
  }
  return a2 == 0;
}

uint64_t zilch::GeoPolyline::flip(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 16);
  if (v1)
  {
    if (v1 != 1) {
      return this;
    }
    int v2 = 0;
  }
  else
  {
    int v2 = 1;
  }
  *(_DWORD *)(this + 16) = v2;
  return this;
}

zilch::GeoPolyline::Walker *zilch::GeoPolyline::walk@<X0>(zilch::GeoPolyline *this@<X0>, zilch::GeoPolyline::Walker *a2@<X8>)
{
  return zilch::GeoPolyline::Walker::Walker(a2, this);
}

uint64_t zilch::GeoPolyline::Walker::advanceToNextPoint(zilch::GeoPolyline **this)
{
  int v2 = *this;
  unint64_t v4 = (unint64_t)this[1] + 1;
  this[1] = (zilch::GeoPolyline *)v4;
  Point = zilch::GeoPolyline::getPoint(v2, v4);
  int v6 = Point[2];
  *(zilch::GeoPolyline **)((char *)this + 20) = *(zilch::GeoPolyline **)Point;
  *((_DWORD *)this + 7) = v6;
  uint64_t v7 = *(void **)*this;
  if (v7 && (unint64_t v8 = (unint64_t)this[1] + 1, v8 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7[1] - *v7) >> 2)))
  {
    unint64_t v9 = (const zilch::GeoCoordinates *)zilch::GeoPolyline::getPoint(*this, v8);
    uint64_t result = zilch::GeoCoordinates::distanceTo((zilch::GeoCoordinates *)((char *)this + 20), v9);
  }
  else
  {
    uint64_t result = 0;
  }
  *((_DWORD *)this + 4) = result;
  return result;
}

uint64_t zilch::GeoPolyline::Walker::calcAngleAt(zilch::GeoPolyline::Walker *this, uint64_t a2, const zilch::GeoCoordinates *a3)
{
  long long v5 = *(_OWORD *)this;
  uint64_t v3 = *((void *)this + 2);
  *((void *)&v5 + 1) = a2;
  *(void *)int v6 = v3;
  int v7 = *((_DWORD *)a3 + 2);
  *(void *)&v6[4] = *(void *)a3;
  zilch::GeoPolyline::Walker::updateDistanceToNext((zilch::GeoPolyline **)&v5);
  return zilch::GeoPolyline::Walker::heading((uint64_t **)&v5);
}

uint64_t zilch::GeoPolyline::Walker::updateDistanceToNext(zilch::GeoPolyline **this)
{
  int v2 = *this;
  if (*(void *)v2
    && (unint64_t v3 = (unint64_t)this[1] + 1,
        v3 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)v2 + 8) - **(void **)v2) >> 2)))
  {
    Point = (const zilch::GeoCoordinates *)zilch::GeoPolyline::getPoint(v2, v3);
    uint64_t result = zilch::GeoCoordinates::distanceTo((zilch::GeoCoordinates *)((char *)this + 20), Point);
  }
  else
  {
    uint64_t result = 0;
  }
  *((_DWORD *)this + 4) = result;
  return result;
}

BOOL zilch::GeoPolyline::Walker::advanceTo(zilch::GeoPolyline::Walker *this, const zilch::GeoCoordinates *a2, const zilch::Angle *a3)
{
  unint64_t v3 = **(void ***)this;
  if (!v3 || 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[1] - *v3) >> 2) < 2) {
    return 0;
  }
  zilch::GeoCoordinates::GeoCoordinates((zilch::GeoCoordinates *)&v29);
  Point = zilch::GeoPolyline::getPoint(*(zilch::GeoPolyline **)this, 0);
  BOOL v9 = 0;
  int v10 = Point[2];
  *(void *)&v28.var0.var0 = *(void *)Point;
  v28.var2 = v10;
  unsigned int v11 = 1000000;
  uint64_t v12 = -1;
  for (unint64_t i = 1; ; ++i)
  {
    unint64_t v14 = **(void **)this;
    if (v14) {
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v14 + 8) - *(void *)v14) >> 2);
    }
    if (i >= v14) {
      break;
    }
    double v15 = zilch::GeoPolyline::getPoint(*(zilch::GeoPolyline **)this, i);
    int v16 = v15[2];
    *(void *)&v27.var0.var0 = *(void *)v15;
    v27.var2 = v16;
    zilch::GeoLineSegment::GeoLineSegment((uint64_t)v26, &v28, &v27);
    uint64_t ClosestPoint = zilch::GeoLineSegment::getClosestPoint((zilch::GeoLineSegment *)v26, a2);
    int v25 = v17;
    unsigned int v18 = zilch::GeoCoordinates::distanceTo((zilch::GeoCoordinates *)&ClosestPoint, a2);
    if (v18 <= 9)
    {
      unsigned int v19 = v18;
      if (a3)
      {
        long long v31 = *(_OWORD *)this;
        uint64_t v20 = *((void *)this + 2);
        *((void *)&v31 + 1) = i - 1;
        v32[0] = v20;
        v32[3] = v25;
        *(void *)&v32[1] = ClosestPoint;
        zilch::GeoPolyline::Walker::updateDistanceToNext((zilch::GeoPolyline **)&v31);
        LOWORD(v31) = zilch::GeoPolyline::Walker::heading((uint64_t **)&v31);
        BOOL v22 = zilch::Angle::radiansFrom(&v31, *(_WORD *)a3, v21) < 0.785398163;
      }
      else
      {
        BOOL v22 = 0;
      }
      if (v11 > 0xA || !v9 && v22 || ((v9 ^ v22) & 1) == 0 && v19 < v11)
      {
        uint64_t v29 = ClosestPoint;
        int v30 = v25;
        uint64_t v12 = i - !zilch::GeoCoordinates::operator==(&ClosestPoint, &v27.var0.var0);
        BOOL v9 = v22;
        unsigned int v11 = v19;
      }
    }
    GeoCoordinates v28 = v27;
  }
  BOOL v4 = v12 != -1;
  if (v12 != -1)
  {
    *((void *)this + 1) = v12;
    *(void *)((char *)this + 20) = v29;
    *((_DWORD *)this + 7) = v30;
    zilch::GeoPolyline::Walker::updateDistanceToNext((zilch::GeoPolyline **)this);
  }
  return v4;
}

uint64_t zilch::GeoPolyline::GeoPolyline(uint64_t result, void *a2, int a3)
{
  uint64_t v3 = a2[1];
  *(void *)uint64_t result = *a2;
  *(void *)(result + 8) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(result + 16) = a3;
  return result;
}

{
  uint64_t v3;

  uint64_t v3 = a2[1];
  *(void *)uint64_t result = *a2;
  *(void *)(result + 8) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(result + 16) = a3;
  return result;
}

uint64_t zilch::GeoPolyline::GeoPolyline(uint64_t this)
{
  *(void *)this = 0;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(void *)this = 0;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

void zilch::GeoPolyline::reset(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  int v7 = *(std::__shared_weak_count **)(a1 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v5;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  *(_DWORD *)(a1 + 16) = a3;
}

_DWORD *zilch::GeoPolyline::front(zilch::GeoPolyline *this)
{
  return zilch::GeoPolyline::getPoint(this, 0);
}

_DWORD *zilch::GeoPolyline::back(zilch::GeoPolyline *this)
{
  if (*(void *)this) {
    unint64_t v1 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)this + 8) - **(void **)this) >> 2) - 1;
  }
  else {
    unint64_t v1 = -1;
  }
  return zilch::GeoPolyline::getPoint(this, v1);
}

uint64_t zilch::GeoPolyline::distanceTo(zilch::GeoPolyline *this, const zilch::GeoCoordinates *a2)
{
  unsigned int v3 = 0;
  zilch::GeoPolyline::getClosestPoint(this, a2, &v3, 0);
  return v3;
}

uint64_t zilch::GeoPolyline::getClosestPoint(zilch::GeoPolyline *this, const zilch::GeoCoordinates *a2, unsigned int *a3, unint64_t *a4)
{
  unsigned int v8 = 40030230;
  zilch::GeoCoordinates::GeoCoordinates((zilch::GeoCoordinates *)&v24);
  Point = zilch::GeoPolyline::getPoint(this, 0);
  uint64_t v10 = *(void *)Point;
  v23.var2 = Point[2];
  *(void *)&v23.var0.var0 = v10;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)this + 8) - **(void **)this) >> 2) < 2)
  {
    unint64_t v11 = 0;
    if (a3) {
LABEL_7:
    }
      *a3 = v8;
  }
  else
  {
    unint64_t v11 = 0;
    unint64_t v12 = 1;
    do
    {
      unsigned int v13 = zilch::GeoPolyline::getPoint(this, v12);
      int v14 = v13[2];
      *(void *)&v22.var0.var0 = *(void *)v13;
      v22.var2 = v14;
      zilch::GeoLineSegment::GeoLineSegment((uint64_t)v21, &v23, &v22);
      uint64_t ClosestPoint = zilch::GeoLineSegment::getClosestPoint((zilch::GeoLineSegment *)v21, a2);
      int v20 = v15;
      unsigned int v16 = zilch::GeoCoordinates::distanceTo((zilch::GeoCoordinates *)&ClosestPoint, a2);
      if (v16 < v8)
      {
        unsigned int v17 = v16;
        uint64_t v24 = ClosestPoint;
        int v25 = v20;
        unint64_t v11 = v12 - !zilch::GeoCoordinates::operator==(&ClosestPoint, &v22.var0.var0);
        unsigned int v8 = v17;
      }
      GeoCoordinates v23 = v22;
      ++v12;
    }
    while (v12 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)this + 8) - **(void **)this) >> 2));
    if (a3) {
      goto LABEL_7;
    }
  }
  if (a4) {
    *a4 = v11;
  }
  return v24;
}

uint64_t zilch::GeoPolyline::getLength(zilch::GeoPolyline *this)
{
  if (!*(void *)this) {
    return 0;
  }
  if (**(void **)this == *(void *)(*(void *)this + 8)) {
    return 0;
  }
  Point = zilch::GeoPolyline::getPoint(this, 0);
  uint64_t v3 = *(void *)Point;
  int v12 = Point[2];
  uint64_t v11 = v3;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)this + 8) - **(void **)this) >> 2) < 2) {
    return 0;
  }
  LODWORD(v4) = 0;
  unint64_t v5 = 1;
  do
  {
    uint64_t v6 = zilch::GeoPolyline::getPoint(this, v5);
    int v7 = v6[2];
    uint64_t v9 = *(void *)v6;
    int v10 = v7;
    uint64_t v4 = zilch::GeoCoordinates::distanceTo((zilch::GeoCoordinates *)&v11, (const zilch::GeoCoordinates *)&v9)+ v4;
    uint64_t v11 = v9;
    int v12 = v10;
    ++v5;
  }
  while (v5 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)this + 8) - **(void **)this) >> 2));
  return v4;
}

uint64_t zilch::GeoPolyline::getStartHeading(zilch::GeoPolyline *this)
{
  zilch::GeoPolyline::Walker::Walker((zilch::GeoPolyline::Walker *)v2, this);
  return zilch::GeoPolyline::Walker::heading(v2);
}

uint64_t zilch::GeoPolyline::getEndHeading(zilch::GeoPolyline *this)
{
  unint64_t v1 = (std::__shared_weak_count *)*((void *)this + 1);
  uint64_t v9 = *(void *)this;
  int v10 = v1;
  if (v1) {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v2 = *((_DWORD *)this + 4);
  int v11 = v2;
  if (v2)
  {
    if (v2 != 1) {
      goto LABEL_8;
    }
    int v3 = 0;
  }
  else
  {
    int v3 = 1;
  }
  int v11 = v3;
LABEL_8:
  zilch::GeoPolyline::Walker::Walker((zilch::GeoPolyline::Walker *)v12, (const zilch::GeoPolyline *)&v9);
  uint64_t v4 = (zilch::Angle *)zilch::GeoPolyline::Walker::heading(v12);
  unsigned __int16 v8 = (unsigned __int16)v4;
  unsigned __int16 v5 = zilch::Angle::pi(v4);
  uint64_t v6 = zilch::Angle::operator+(&v8, v5);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  return v6;
}

void sub_1890DFFC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t zilch::GeoPolyline::getAngleAtPos(zilch::GeoPolyline *this, const zilch::GeoCoordinates *a2)
{
  zilch::GeoPolyline::Walker::Walker((zilch::GeoPolyline::Walker *)v5, this);
  BOOL v3 = zilch::GeoPolyline::Walker::advanceTo((zilch::GeoPolyline::Walker *)v5, a2, 0);
  if (v3) {
    return zilch::GeoPolyline::Walker::heading(v5);
  }
  else {
    return zilch::Angle::zero((zilch::Angle *)v3);
  }
}

std::string *zilch::GeoPolyline::toString@<X0>(uint64_t **this@<X0>, std::string *a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(a2, "GeoPolyline(");
  uint64_t v5 = **this;
  if ((*this)[1] != v5)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    while (1)
    {
      zilch::GeoCoordinates::toString((zilch::GeoCoordinates *)(v5 + v6), __p, v4);
      if (v12 >= 0) {
        unsigned __int16 v8 = __p;
      }
      else {
        unsigned __int16 v8 = (void **)__p[0];
      }
      snprintf(__str, 0x400uLL, "%s", (const char *)v8);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
      std::string::append(a2, __str);
      ++v7;
      uint64_t v9 = *this;
      if (v7 < 0xAAAAAAAAAAAAAAABLL * (((*this)[1] - **this) >> 2))
      {
        std::string::append(a2, ",");
        uint64_t v9 = *this;
      }
      uint64_t v5 = *v9;
      if (v7 >= 0xAAAAAAAAAAAAAAABLL * ((v9[1] - *v9) >> 2)) {
        break;
      }
      v6 += 12;
    }
  }
  return std::string::append(a2, ")");
}

void sub_1890E01AC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D0] + 16);
  return result;
}

void std::vector<zilch::GeoCoordinates>::__throw_out_of_range[abi:ne180100]()
{
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E53D6E60, MEMORY[0x1E4FBA1D0]);
}

void sub_1890E0268(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
  return result;
}

uint64_t zilch::PathElement::PathElement(uint64_t result, int a2, uint64_t a3)
{
  *(void *)uint64_t result = &unk_1ED514248;
  *(_DWORD *)(result + 8) = a2;
  *(void *)(result + 16) = a3;
  return result;
}

uint64_t zilch::PathElement::type(zilch::PathElement *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t zilch::PathElement::controlPointIndex(zilch::PathElement *this)
{
  return *((void *)this + 2);
}

uint64_t zilch::GeometryPathElement::GeometryPathElement(uint64_t this, uint64_t a2)
{
  *(_DWORD *)(this + 8) = 1;
  *(void *)(this + 16) = a2;
  *(void *)(this + 24) = 0;
  *(void *)this = &unk_1ED514298;
  *(void *)(this + 32) = 0;
  *(void *)(this + 40) = 0;
  return this;
}

{
  *(_DWORD *)(this + 8) = 1;
  *(void *)(this + 16) = a2;
  *(void *)(this + 24) = 0;
  *(void *)this = &unk_1ED514298;
  *(void *)(this + 32) = 0;
  *(void *)(this + 40) = 0;
  return this;
}

uint64_t zilch::GeometryPathElement::getPoint(zilch::GeometryPathElement *this, uint64_t a2)
{
  return *((void *)this + 3) + 12 * a2;
}

uint64_t zilch::GeometryPathElement::operator[](uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 24) + 12 * a2;
}

uint64_t zilch::GeometryPathElement::back(zilch::GeometryPathElement *this)
{
  return *((void *)this + 4) - 12;
}

unint64_t zilch::GeometryPathElement::size(zilch::GeometryPathElement *this)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 4) - *((void *)this + 3)) >> 2);
}

void zilch::GeometryPathElement::addPoint(zilch::GeometryPathElement *this, const zilch::GeoCoordinates *a2)
{
  unint64_t v6 = *((void *)this + 5);
  double v4 = (char *)this + 40;
  unint64_t v5 = v6;
  unint64_t v7 = *((void *)v4 - 1);
  if (v7 >= v6)
  {
    int v10 = v4 - 16;
    uint64_t v11 = *((void *)v4 - 2);
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v11) >> 2);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0x1555555555555555) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - v11) >> 2);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v15 = 0x1555555555555555;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15) {
      unsigned int v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::GeoCoordinates>>((uint64_t)v4, v15);
    }
    else {
      unsigned int v16 = 0;
    }
    unsigned int v17 = &v16[12 * v12];
    unsigned int v18 = &v16[12 * v15];
    uint64_t v19 = *(void *)a2;
    *((_DWORD *)v17 + 2) = *((_DWORD *)a2 + 2);
    *(void *)unsigned int v17 = v19;
    uint64_t v9 = v17 + 12;
    double v21 = (_DWORD *)*((void *)this + 3);
    int v20 = (_DWORD *)*((void *)this + 4);
    if (v20 != v21)
    {
      do
      {
        uint64_t v22 = *(void *)(v20 - 3);
        v20 -= 3;
        int v23 = v20[2];
        *(void *)(v17 - 12) = v22;
        v17 -= 12;
        *((_DWORD *)v17 + 2) = v23;
      }
      while (v20 != v21);
      int v20 = *(_DWORD **)v10;
    }
    *((void *)this + 3) = v17;
    *((void *)this + 4) = v9;
    *((void *)this + 5) = v18;
    if (v20) {
      operator delete(v20);
    }
  }
  else
  {
    uint64_t v8 = *(void *)a2;
    *(_DWORD *)(v7 + 8) = *((_DWORD *)a2 + 2);
    *(void *)unint64_t v7 = v8;
    uint64_t v9 = (char *)(v7 + 12);
  }
  *((void *)this + 4) = v9;
}

std::string *zilch::GeometryPathElement::toString@<X0>(zilch::GeometryPathElement *this@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(a2, "GeometryPathElement(");
  uint64_t v5 = *((void *)this + 3);
  if (*((void *)this + 4) != v5)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      zilch::GeoCoordinates::toString((zilch::GeoCoordinates *)(v5 + v6), __p, v4);
      if ((v13 & 0x80u) == 0) {
        uint64_t v8 = __p;
      }
      else {
        uint64_t v8 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        std::string::size_type v9 = v13;
      }
      else {
        std::string::size_type v9 = (std::string::size_type)__p[1];
      }
      std::string::append(a2, (const std::string::value_type *)v8, v9);
      if ((char)v13 < 0) {
        operator delete(__p[0]);
      }
      ++v7;
      uint64_t v5 = *((void *)this + 3);
      unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 4) - v5) >> 2);
      if (v7 < v10)
      {
        std::string::append(a2, ",");
        uint64_t v5 = *((void *)this + 3);
        unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 4) - v5) >> 2);
      }
      v6 += 12;
    }
    while (v7 < v10);
  }
  return std::string::append(a2, ")");
}

void sub_1890E05BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

void zilch::GeometryPathElement::~GeometryPathElement(zilch::GeometryPathElement *this)
{
  *(void *)this = &unk_1ED514298;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1ED514298;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }

  JUMPOUT(0x18C11F580);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::GeoCoordinates>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(12 * a2);
}

void *zilch::Probability::Probability(void *this)
{
  *this = 0;
  return this;
}

{
  *this = 0;
  return this;
}

double *zilch::Probability::Probability(double *this, double a2)
{
  *this = a2;
  return this;
}

{
  *this = a2;
  return this;
}

double zilch::Probability::zero(zilch::Probability *this)
{
  return 0.0;
}

double zilch::Probability::one(zilch::Probability *this)
{
  return 1.0;
}

double zilch::Probability::toDouble(zilch::Probability *this)
{
  return *(double *)this;
}

double zilch::Probability::operator*=(double *a1, double a2)
{
  double result = a2 * *a1;
  *a1 = result;
  return result;
}

double zilch::Probability::operator/=(double *a1, double result)
{
  if (result != 0.0)
  {
    double result = *a1 / result;
    *a1 = result;
  }
  return result;
}

BOOL zilch::Probability::operator==(double *a1, double a2)
{
  return *a1 == a2;
}

BOOL zilch::Probability::operator!=(double *a1, double a2)
{
  return *a1 != a2;
}

BOOL zilch::Probability::operator<(double *a1, double a2)
{
  return *a1 < a2;
}

BOOL zilch::Probability::operator<=(double *a1, double a2)
{
  return *a1 <= a2;
}

BOOL zilch::Probability::operator>(double *a1, double a2)
{
  return *a1 > a2;
}

BOOL zilch::Probability::operator>=(double *a1, double a2)
{
  return *a1 >= a2;
}

double zilch::Probability::operator+=(double *a1, double a2)
{
  double result = a2 + *a1;
  *a1 = result;
  return result;
}

double *zilch::Probability::operator-=(double *result, double a2)
{
  double v2 = *result - a2;
  BOOL v3 = a2 < *result;
  double v4 = 0.0;
  if (v3) {
    double v4 = v2;
  }
  *double result = v4;
  return result;
}

double zilch::Probability::operator*(double *a1, double a2)
{
  return a2 * *a1;
}

double zilch::Probability::operator/(double *a1, double a2)
{
  if (a2 == 0.0) {
    a2 = 1.0;
  }
  return *a1 / a2;
}

double zilch::Probability::operator+(double *a1, double a2)
{
  return a2 + *a1;
}

double zilch::Probability::operator-(double *a1, double a2)
{
  double v2 = *a1 - a2;
  BOOL v3 = a2 < *a1;
  double result = 0.0;
  if (v3) {
    return v2;
  }
  return result;
}

uint64_t zilch::GeoLineSegment::GeoLineSegment(uint64_t this, const GeoCoordinates *a2, const GeoCoordinates *a3)
{
  uint64_t v3 = *(void *)&a2->var0.var0;
  *(_DWORD *)(this + 8) = a2->var2;
  *(void *)this = v3;
  uint64_t v4 = *(void *)&a3->var0.var0;
  *(_DWORD *)(this + 20) = a3->var2;
  *(void *)(this + 12) = v4;
  return this;
}

{
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *(void *)&a2->var0.var0;
  *(_DWORD *)(this + 8) = a2->var2;
  *(void *)this = v3;
  uint64_t v4 = *(void *)&a3->var0.var0;
  *(_DWORD *)(this + 20) = a3->var2;
  *(void *)(this + 12) = v4;
  return this;
}

uint64_t zilch::GeoLineSegment::b(zilch::GeoLineSegment *this)
{
  return (uint64_t)this + 12;
}

uint64_t zilch::GeoLineSegment::getClosestPoint(zilch::GeoLineSegment *this, const zilch::GeoCoordinates *a2)
{
  uint64_t v4 = (zilch::GeoLineSegment *)((char *)this + 12);
  int v34 = zilch::GeoCoordinates::x((zilch::GeoLineSegment *)((char *)this + 12));
  double v6 = zilch::Longitude::toDegrees((zilch::Longitude *)&v34, v5);
  int v33 = zilch::GeoCoordinates::x(this);
  double v8 = v6 - zilch::Longitude::toDegrees((zilch::Longitude *)&v33, v7);
  int v34 = zilch::GeoCoordinates::y(v4);
  double v10 = zilch::Latitude::toDegrees((zilch::Latitude *)&v34, v9);
  int v33 = zilch::GeoCoordinates::y(this);
  double v12 = v10 - zilch::Latitude::toDegrees((zilch::Latitude *)&v33, v11);
  int v34 = zilch::GeoCoordinates::x(a2);
  double v14 = zilch::Longitude::toDegrees((zilch::Longitude *)&v34, v13);
  int v33 = zilch::GeoCoordinates::x(this);
  double v16 = v14 - zilch::Longitude::toDegrees((zilch::Longitude *)&v33, v15);
  int v34 = zilch::GeoCoordinates::y(a2);
  double v18 = zilch::Latitude::toDegrees((zilch::Latitude *)&v34, v17);
  int v33 = zilch::GeoCoordinates::y(this);
  double v20 = (v12 * (v18 - zilch::Latitude::toDegrees((zilch::Latitude *)&v33, v19)) + v8 * v16) / (v12 * v12 + v8 * v8);
  if (v20 <= 0.0)
  {
    uint64_t v35 = *(void *)this;
    int v31 = *((_DWORD *)this + 2);
LABEL_6:
    int v36 = v31;
    return v35;
  }
  if (v20 >= 1.0)
  {
    uint64_t v35 = *(void *)v4;
    int v31 = *((_DWORD *)v4 + 2);
    goto LABEL_6;
  }
  int v34 = zilch::GeoCoordinates::x(this);
  double v22 = zilch::Longitude::toDegrees((zilch::Longitude *)&v34, v21) + v20 * v8;
  int v34 = zilch::GeoCoordinates::y(this);
  double v24 = zilch::Latitude::toDegrees((zilch::Latitude *)&v34, v23) + v20 * v12;
  unsigned int v26 = (zilch::Latitude *)zilch::Longitude::fromDegrees(v25, v22);
  unsigned int v27 = v26;
  unsigned int v28 = zilch::Latitude::fromDegrees(v26, v24);
  v29.var0 = v27;
  v30.var0 = v28;
  zilch::GeoCoordinates::GeoCoordinates((uint64_t)&v35, v29, v30);
  return v35;
}

uint64_t zilch::GeoLineSegment::distanceTo(zilch::GeoLineSegment *this, const zilch::GeoCoordinates *a2)
{
  uint64_t ClosestPoint = zilch::GeoLineSegment::getClosestPoint(this, a2);
  int v6 = v3;
  return zilch::GeoCoordinates::distanceTo((zilch::GeoCoordinates *)&ClosestPoint, a2);
}

void *zilch::GeoLineSegment::toString@<X0>(zilch::GeoLineSegment *this@<X0>, void *a2@<X8>, double a3@<D0>)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  zilch::GeoCoordinates::toString(this, v13, a3);
  int v5 = v14;
  int v6 = (void **)v13[0];
  zilch::GeoCoordinates::toString((zilch::GeoLineSegment *)((char *)this + 12), __p, v7);
  double v8 = v13;
  if (v5 < 0) {
    double v8 = v6;
  }
  if (v12 >= 0) {
    double v9 = __p;
  }
  else {
    double v9 = (void **)__p[0];
  }
  snprintf(__str, 0x400uLL, "GeoLineSegment(%s, %s)", (const char *)v8, (const char *)v9);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, __str);
}

void sub_1890E0B60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double zilch::HuffmanCode::HuffmanCode(zilch::HuffmanCode *this)
{
  double result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 18) = 1065353216;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = 0;
  return result;
}

{
  double result;

  double result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 18) = 1065353216;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = 0;
  return result;
}

zilch::HuffmanCode *zilch::HuffmanCode::HuffmanCode(zilch::HuffmanCode *this, zilch::HuffmanCode *a2, unsigned int *a3, zilch::HuffmanCode *a4)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 18) = 1065353216;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  zilch::HuffmanCode::encodeKeys(a2, a3, this, a4);
  return this;
}

void sub_1890E0C3C(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  int v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 88) = v6;
    operator delete(v6);
  }
  std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::~__hash_table(v2);
  std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void zilch::HuffmanCode::encodeKeys(zilch::HuffmanCode *this, const unsigned int *a2, zilch::HuffmanCode *a3, zilch::HuffmanCode *a4)
{
  uint64_t v137 = 0;
  uint64_t v138 = 0;
  uint64_t v136 = (uint64_t *)&v137;
  if (a2)
  {
    double v7 = 0;
    uint64_t v8 = 0;
    while (1)
    {
      double v9 = (unsigned int *)((char *)this + 4 * v8);
      if (!v7) {
        goto LABEL_13;
      }
      unsigned int v10 = *v9;
      double v11 = &v137;
      do
      {
        char v12 = v7;
        double v13 = v11;
        unsigned int v14 = *((_DWORD *)v7 + 8);
        double v15 = v7 + 1;
        if (v14 >= v10)
        {
          double v15 = v12;
          double v11 = (void **)v12;
        }
        double v7 = (void *)*v15;
      }
      while (v7);
      if (v11 != &v137 && (v14 >= v10 ? (uint64_t v16 = v12) : (uint64_t v16 = v13), v10 >= *((_DWORD *)v16 + 8)))
      {
        v11[5] = (void *)((char *)v11[5] + 1);
      }
      else
      {
LABEL_13:
        *(void *)char v139 = (char *)this + 4 * v8;
        std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(&v136, v9, (uint64_t)&unk_18A5C6F80, (_DWORD **)v139)[5] = (uint64_t *)1;
      }
      if ((const unsigned int *)++v8 == a2) {
        break;
      }
      double v7 = v137;
    }
    uint64_t v17 = v138;
  }
  else
  {
    uint64_t v17 = 0;
  }
  char v133 = 0;
  char v134 = 0;
  unsigned int v135 = 0;
  std::vector<zilch::HuffmanCode::Node>::reserve(&v133, 2 * v17);
  uint64_t v128 = v17;
  long long __p = 0;
  uint64_t v131 = 0;
  v132[0] = 0;
  double v18 = v136;
  if (v136 == (uint64_t *)&v137)
  {
    uint64_t v48 = 0;
    uint64_t v49 = 0;
  }
  else
  {
    do
    {
      int v19 = *((_DWORD *)v18 + 8);
      double v20 = (char *)v133;
      double v21 = v134;
      uint64_t v22 = (v134 - (unsigned char *)v133) / 48;
      uint64_t v23 = v18[5];
      if (v134 >= v135)
      {
        unint64_t v25 = v22 + 1;
        if ((unint64_t)(v22 + 1) > 0x555555555555555) {
          goto LABEL_132;
        }
        if (0x5555555555555556 * ((v135 - (unsigned char *)v133) >> 4) > v25) {
          unint64_t v25 = 0x5555555555555556 * ((v135 - (unsigned char *)v133) >> 4);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v135 - (unsigned char *)v133) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v26 = 0x555555555555555;
        }
        else {
          unint64_t v26 = v25;
        }
        if (v26)
        {
          unsigned int v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::HuffmanCode::Node>>((uint64_t)&v135, v26);
          double v20 = (char *)v133;
          double v21 = v134;
        }
        else
        {
          unsigned int v27 = 0;
        }
        unsigned int v28 = &v27[48 * v22];
        *(_DWORD *)unsigned int v28 = v19;
        *((void *)v28 + 1) = v22;
        *((void *)v28 + 2) = v23;
        *((void *)v28 + 3) = -1;
        *((void *)v28 + 4) = -1;
        *((void *)v28 + 5) = -1;
        if (v21 == v20)
        {
          int v32 = &v27[48 * v22];
        }
        else
        {
          Longitude v29 = &v27[48 * v22];
          do
          {
            long long v30 = *((_OWORD *)v21 - 3);
            long long v31 = *((_OWORD *)v21 - 1);
            int v32 = v29 - 48;
            *((_OWORD *)v29 - 2) = *((_OWORD *)v21 - 2);
            *((_OWORD *)v29 - 1) = v31;
            *((_OWORD *)v29 - 3) = v30;
            v21 -= 48;
            v29 -= 48;
          }
          while (v21 != v20);
        }
        double v24 = v28 + 48;
        char v133 = v32;
        char v134 = v28 + 48;
        unsigned int v135 = &v27[48 * v26];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *(_DWORD *)char v134 = v19;
        *((void *)v21 + 1) = v22;
        *((void *)v21 + 2) = v23;
        double v24 = v21 + 48;
        *((void *)v21 + 3) = -1;
        *((void *)v21 + 4) = -1;
        *((void *)v21 + 5) = -1;
      }
      char v134 = v24;
      int v33 = v131;
      if ((unint64_t)v131 >= v132[0])
      {
        uint64_t v35 = (char *)__p;
        unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((v131 - (unsigned char *)__p) >> 4);
        unint64_t v37 = v36 + 1;
        if (v36 + 1 > 0x555555555555555) {
LABEL_132:
        }
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((uint64_t)(v132[0] - (void)__p) >> 4) > v37) {
          unint64_t v37 = 0x5555555555555556 * ((uint64_t)(v132[0] - (void)__p) >> 4);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v132[0] - (void)__p) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v38 = 0x555555555555555;
        }
        else {
          unint64_t v38 = v37;
        }
        if (v38)
        {
          unsigned int v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::HuffmanCode::Node>>((uint64_t)v132, v38);
          uint64_t v35 = (char *)__p;
          int v33 = v131;
        }
        else
        {
          unsigned int v39 = 0;
        }
        uint64_t v40 = &v39[16 * ((v131 - (unsigned char *)__p) >> 4)];
        *(_DWORD *)uint64_t v40 = v19;
        *((void *)v40 + 1) = v22;
        *((void *)v40 + 2) = v23;
        *((void *)v40 + 3) = -1;
        *((void *)v40 + 4) = -1;
        *((void *)v40 + 5) = -1;
        if (v33 == v35)
        {
          uint64_t v44 = &v39[48 * v36];
        }
        else
        {
          uint64_t v41 = &v39[48 * v36];
          do
          {
            long long v42 = *((_OWORD *)v33 - 3);
            long long v43 = *((_OWORD *)v33 - 1);
            uint64_t v44 = v41 - 48;
            *((_OWORD *)v41 - 2) = *((_OWORD *)v33 - 2);
            *((_OWORD *)v41 - 1) = v43;
            *((_OWORD *)v41 - 3) = v42;
            v33 -= 48;
            v41 -= 48;
          }
          while (v33 != v35);
        }
        uint64_t v34 = (uint64_t)(v40 + 48);
        long long __p = v44;
        uint64_t v131 = v40 + 48;
        v132[0] = &v39[48 * v38];
        if (v35) {
          operator delete(v35);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v131 = v19;
        *((void *)v33 + 1) = v22;
        *((void *)v33 + 2) = v23;
        uint64_t v34 = (uint64_t)(v33 + 48);
        *((void *)v33 + 3) = -1;
        *((void *)v33 + 4) = -1;
        *((void *)v33 + 5) = -1;
      }
      uint64_t v131 = (char *)v34;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<zilch::HuffmanCode::Node> &,std::__wrap_iter<zilch::HuffmanCode::Node*>>((uint64_t)__p, v34, (uint64_t)v139, 0xAAAAAAAAAAAAAAABLL * ((v34 - (uint64_t)__p) >> 4));
      unint64_t v45 = (uint64_t *)v18[1];
      if (v45)
      {
        do
        {
          unint64_t v46 = v45;
          unint64_t v45 = (uint64_t *)*v45;
        }
        while (v45);
      }
      else
      {
        do
        {
          unint64_t v46 = (uint64_t *)v18[2];
          BOOL v47 = *v46 == (void)v18;
          double v18 = v46;
        }
        while (!v47);
      }
      double v18 = v46;
    }
    while (v46 != (uint64_t *)&v137);
    uint64_t v48 = (char *)__p;
    uint64_t v49 = v131;
  }
  uint64_t v50 = v49 - v48;
  unint64_t v51 = 0xAAAAAAAAAAAAAAABLL * ((v49 - v48) >> 4);
  if (v51 >= 2)
  {
    while (1)
    {
      uint64_t v52 = *((void *)v48 + 1);
      uint64_t v53 = (char *)v133;
      if (v50 < 49)
      {
        char v71 = (char *)v133;
        uint64_t v72 = *((void *)v48 + 1);
      }
      else
      {
        uint64_t v54 = 0;
        long long v55 = *(_OWORD *)v48;
        long long v56 = *((_OWORD *)v48 + 2);
        long long v140 = *((_OWORD *)v48 + 1);
        long long v141 = v56;
        *(_OWORD *)char v139 = v55;
        unsigned int v57 = v48;
        do
        {
          uint64_t v58 = v54 + 1;
          uint64_t v59 = &v57[48 * v54 + 48];
          uint64_t v60 = (2 * v54) | 1;
          uint64_t v61 = 2 * v54 + 2;
          if (v61 < (uint64_t)v51)
          {
            unint64_t v62 = *(void *)&v57[48 * v58 + 16];
            unint64_t v63 = *((void *)v59 + 8);
            v59 += 48 * (v62 > v63);
            if (v62 > v63) {
              uint64_t v60 = v61;
            }
          }
          long long v64 = *(_OWORD *)v59;
          long long v65 = *((_OWORD *)v59 + 2);
          *((_OWORD *)v57 + 1) = *((_OWORD *)v59 + 1);
          *((_OWORD *)v57 + 2) = v65;
          *(_OWORD *)unsigned int v57 = v64;
          unsigned int v57 = v59;
          uint64_t v54 = v60;
        }
        while (v60 <= (uint64_t)((v51 - 2) >> 1));
        uint64_t v66 = (long long *)(v49 - 48);
        if (v59 == v49 - 48)
        {
          long long v73 = *(_OWORD *)v139;
          long long v74 = v141;
          *((_OWORD *)v59 + 1) = v140;
          *((_OWORD *)v59 + 2) = v74;
          *(_OWORD *)uint64_t v59 = v73;
          char v71 = v53;
        }
        else
        {
          long long v67 = *v66;
          long long v68 = *((_OWORD *)v49 - 1);
          *((_OWORD *)v59 + 1) = *((_OWORD *)v49 - 2);
          *((_OWORD *)v59 + 2) = v68;
          *(_OWORD *)uint64_t v59 = v67;
          long long v69 = *(_OWORD *)v139;
          long long v70 = v141;
          *((_OWORD *)v49 - 2) = v140;
          *((_OWORD *)v49 - 1) = v70;
          *uint64_t v66 = v69;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<zilch::HuffmanCode::Node> &,std::__wrap_iter<zilch::HuffmanCode::Node*>>((uint64_t)v48, (uint64_t)(v59 + 48), (uint64_t)&v129, 0xAAAAAAAAAAAAAAABLL * ((v59 + 48 - v48) >> 4));
          uint64_t v48 = (char *)__p;
          uint64_t v49 = v131;
          char v71 = (char *)v133;
        }
        uint64_t v72 = *((void *)v48 + 1);
      }
      unint64_t v75 = v49 - 48;
      uint64_t v131 = v49 - 48;
      uint64_t v76 = v49 - 48 - v48;
      if (v76 < 49) {
        goto LABEL_85;
      }
      uint64_t v77 = 0;
      int64_t v78 = 0xAAAAAAAAAAAAAAABLL * (v76 >> 4);
      long long v79 = *(_OWORD *)v48;
      long long v80 = *((_OWORD *)v48 + 2);
      long long v140 = *((_OWORD *)v48 + 1);
      long long v141 = v80;
      *(_OWORD *)char v139 = v79;
      uint64_t v81 = v48;
      do
      {
        uint64_t v82 = v77 + 1;
        uint64_t v83 = (long long *)&v81[48 * v77 + 48];
        uint64_t v84 = (2 * v77) | 1;
        uint64_t v85 = 2 * v77 + 2;
        if (v85 < v78)
        {
          unint64_t v86 = *(void *)&v81[48 * v82 + 16];
          unint64_t v87 = *((void *)v83 + 8);
          v83 += 3 * (v86 > v87);
          if (v86 > v87) {
            uint64_t v84 = v85;
          }
        }
        long long v88 = *v83;
        long long v89 = v83[2];
        *((_OWORD *)v81 + 1) = v83[1];
        *((_OWORD *)v81 + 2) = v89;
        *(_OWORD *)uint64_t v81 = v88;
        uint64_t v81 = (char *)v83;
        uint64_t v77 = v84;
      }
      while (v84 <= (uint64_t)((unint64_t)(v78 - 2) >> 1));
      uint64_t v90 = (long long *)(v49 - 96);
      if (v83 == v90) {
        break;
      }
      long long v91 = *v90;
      long long v92 = v90[2];
      v83[1] = v90[1];
      v83[2] = v92;
      long long *v83 = v91;
      long long v93 = *(_OWORD *)v139;
      long long v94 = v141;
      v90[1] = v140;
      v90[2] = v94;
      long long *v90 = v93;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<zilch::HuffmanCode::Node> &,std::__wrap_iter<zilch::HuffmanCode::Node*>>((uint64_t)v48, (uint64_t)(v83 + 3), (uint64_t)&v129, 0xAAAAAAAAAAAAAAABLL * (((char *)(v83 + 3) - v48) >> 4));
      unint64_t v75 = v131;
      uint64_t v95 = v133;
LABEL_86:
      uint64_t v131 = v75 - 48;
      unint64_t v98 = v134;
      uint64_t v99 = (v134 - v95) / 48;
      char v100 = &v53[48 * v52];
      unsigned int v101 = &v71[48 * v72];
      uint64_t v102 = *((void *)v100 + 1);
      uint64_t v103 = *((void *)v101 + 1);
      uint64_t v104 = *((void *)v101 + 2) + *((void *)v100 + 2);
      *((void *)v100 + 5) = v99;
      *((void *)v101 + 5) = v99;
      if (v98 >= v135)
      {
        unint64_t v106 = v99 + 1;
        if ((unint64_t)(v99 + 1) > 0x555555555555555) {
          goto LABEL_133;
        }
        if (0x5555555555555556 * ((v135 - v95) >> 4) > v106) {
          unint64_t v106 = 0x5555555555555556 * ((v135 - v95) >> 4);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v135 - v95) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v107 = 0x555555555555555;
        }
        else {
          unint64_t v107 = v106;
        }
        if (v107)
        {
          unsigned int v108 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::HuffmanCode::Node>>((uint64_t)&v135, v107);
          uint64_t v95 = v133;
          unint64_t v98 = v134;
        }
        else
        {
          unsigned int v108 = 0;
        }
        uint64_t v109 = &v108[48 * v99];
        *((void *)v109 + 1) = v99;
        *((void *)v109 + 2) = v104;
        *((void *)v109 + 3) = v102;
        *((void *)v109 + 4) = v103;
        *((void *)v109 + 5) = -1;
        if (v98 == v95)
        {
          char v113 = &v108[48 * v99];
        }
        else
        {
          uint64_t v110 = &v108[48 * v99];
          do
          {
            long long v111 = *((_OWORD *)v98 - 3);
            long long v112 = *((_OWORD *)v98 - 1);
            char v113 = v110 - 48;
            *((_OWORD *)v110 - 2) = *((_OWORD *)v98 - 2);
            *((_OWORD *)v110 - 1) = v112;
            *((_OWORD *)v110 - 3) = v111;
            v98 -= 48;
            v110 -= 48;
          }
          while (v98 != v95);
        }
        unint64_t v105 = v109 + 48;
        char v133 = v113;
        char v134 = v109 + 48;
        unsigned int v135 = &v108[48 * v107];
        if (v95) {
          operator delete(v95);
        }
      }
      else
      {
        *((void *)v98 + 1) = v99;
        *((void *)v98 + 2) = v104;
        *((void *)v98 + 3) = v102;
        *((void *)v98 + 4) = v103;
        unint64_t v105 = v98 + 48;
        *((void *)v98 + 5) = -1;
      }
      char v134 = v105;
      char v114 = v131;
      if ((unint64_t)v131 >= v132[0])
      {
        uint64_t v116 = (char *)__p;
        unint64_t v117 = 0xAAAAAAAAAAAAAAABLL * ((v131 - (unsigned char *)__p) >> 4);
        unint64_t v118 = v117 + 1;
        if (v117 + 1 > 0x555555555555555) {
LABEL_133:
        }
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((uint64_t)(v132[0] - (void)__p) >> 4) > v118) {
          unint64_t v118 = 0x5555555555555556 * ((uint64_t)(v132[0] - (void)__p) >> 4);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v132[0] - (void)__p) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v119 = 0x555555555555555;
        }
        else {
          unint64_t v119 = v118;
        }
        if (v119)
        {
          char v120 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::HuffmanCode::Node>>((uint64_t)v132, v119);
          uint64_t v116 = (char *)__p;
          char v114 = v131;
        }
        else
        {
          char v120 = 0;
        }
        char v121 = &v120[48 * v117];
        *((void *)v121 + 1) = v99;
        *((void *)v121 + 2) = v104;
        *((void *)v121 + 3) = v102;
        *((void *)v121 + 4) = v103;
        *((void *)v121 + 5) = -1;
        if (v114 == v116)
        {
          uint64_t v125 = &v120[48 * v117];
        }
        else
        {
          unsigned int v122 = &v120[48 * v117];
          do
          {
            long long v123 = *((_OWORD *)v114 - 3);
            long long v124 = *((_OWORD *)v114 - 1);
            uint64_t v125 = v122 - 48;
            *((_OWORD *)v122 - 2) = *((_OWORD *)v114 - 2);
            *((_OWORD *)v122 - 1) = v124;
            *((_OWORD *)v122 - 3) = v123;
            v114 -= 48;
            v122 -= 48;
          }
          while (v114 != v116);
        }
        uint64_t v115 = (uint64_t)(v121 + 48);
        long long __p = v125;
        uint64_t v131 = v121 + 48;
        v132[0] = &v120[48 * v119];
        if (v116) {
          operator delete(v116);
        }
      }
      else
      {
        *((void *)v131 + 1) = v99;
        *((void *)v114 + 2) = v104;
        *((void *)v114 + 3) = v102;
        *((void *)v114 + 4) = v103;
        uint64_t v115 = (uint64_t)(v114 + 48);
        *((void *)v114 + 5) = -1;
      }
      uint64_t v131 = (char *)v115;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<zilch::HuffmanCode::Node> &,std::__wrap_iter<zilch::HuffmanCode::Node*>>((uint64_t)__p, v115, (uint64_t)v139, 0xAAAAAAAAAAAAAAABLL * ((v115 - (uint64_t)__p) >> 4));
      uint64_t v48 = (char *)__p;
      uint64_t v49 = v131;
      uint64_t v50 = v131 - (unsigned char *)__p;
      unint64_t v51 = 0xAAAAAAAAAAAAAAABLL * ((v131 - (unsigned char *)__p) >> 4);
      if (v51 <= 1) {
        goto LABEL_123;
      }
    }
    long long v96 = *(_OWORD *)v139;
    long long v97 = v141;
    v83[1] = v140;
    v83[2] = v97;
    long long *v83 = v96;
LABEL_85:
    uint64_t v95 = v71;
    goto LABEL_86;
  }
LABEL_123:
  if (v128)
  {
    uint64_t v126 = 0;
    for (uint64_t i = 0; i != v128; ++i)
    {
      v139[0] = 0;
      unsigned int v129 = 0;
      zilch::HuffmanCode::extractCode(&v133, i, (int *)v139, (int *)&v129);
      zilch::HuffmanCode::insert(a3, *(unsigned int *)((char *)v133 + v126), v139[0], v129);
      v126 += 48;
    }
    uint64_t v48 = (char *)__p;
  }
  if (v48)
  {
    uint64_t v131 = v48;
    operator delete(v48);
  }
  if (v133)
  {
    char v134 = (char *)v133;
    operator delete(v133);
  }
  std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::destroy((uint64_t)&v136, v137);
}

void sub_1890E1550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,char a22,void *a23)
{
  if (__p) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::destroy((uint64_t)&a22, a23);
  _Unwind_Resume(a1);
}

uint64_t zilch::HuffmanCode::size(zilch::HuffmanCode *this)
{
  return -1431655765 * ((*((void *)this + 11) - *((void *)this + 10)) >> 2);
}

uint64_t zilch::HuffmanCode::key(zilch::HuffmanCode *this, unsigned int a2)
{
  return *(unsigned int *)(*((void *)this + 10) + 12 * a2);
}

uint64_t zilch::HuffmanCode::code(zilch::HuffmanCode *this, unsigned int a2)
{
  return *(unsigned int *)(*((void *)this + 10) + 12 * a2 + 8);
}

uint64_t zilch::HuffmanCode::codeLength(zilch::HuffmanCode *this, unsigned int a2)
{
  return *(unsigned int *)(*((void *)this + 10) + 12 * a2 + 4);
}

void *zilch::HuffmanCode::clear(zilch::HuffmanCode *this)
{
  *((void *)this + 11) = *((void *)this + 10);
  std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::clear((void *)this + 5);

  return std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::clear(this);
}

void zilch::HuffmanCode::insert(zilch::HuffmanCode *this, uint64_t a2, unsigned int a3, unsigned int a4)
{
  int v4 = a2;
  unsigned int v24 = a2;
  int v6 = (_DWORD *)(a4 | ((unint64_t)a3 << 32));
  v23[0] = (_DWORD *)(a3 | (unint64_t)(a2 << 32));
  v23[1] = v6;
  std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int,zilch::HuffmanCode::KeyInfo>>((uint64_t)this, (unsigned int *)v23, (uint64_t)v23);
  v23[0] = &v24;
  double v7 = std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)this + 40, &v24, (uint64_t)&unk_18A5C6F80, v23);
  *((_DWORD *)v7 + 5) = v4;
  v7[3] = v6;
  unint64_t v8 = *((void *)this + 12);
  unint64_t v9 = *((void *)this + 11);
  if (v9 >= v8)
  {
    uint64_t v11 = *((void *)this + 10);
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - v11) >> 2);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0x1555555555555555) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - v11) >> 2);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v15 = 0x1555555555555555;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15) {
      uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::GeoCoordinates>>((uint64_t)this + 96, v15);
    }
    else {
      uint64_t v16 = 0;
    }
    uint64_t v17 = &v16[12 * v12];
    double v18 = &v16[12 * v15];
    *(_DWORD *)uint64_t v17 = v4;
    *(void *)(v17 + 4) = v6;
    unsigned int v10 = v17 + 12;
    double v20 = (_DWORD *)*((void *)this + 10);
    int v19 = (_DWORD *)*((void *)this + 11);
    if (v19 != v20)
    {
      do
      {
        uint64_t v21 = *(void *)(v19 - 3);
        v19 -= 3;
        int v22 = v19[2];
        *(void *)(v17 - 12) = v21;
        v17 -= 12;
        *((_DWORD *)v17 + 2) = v22;
      }
      while (v19 != v20);
      int v19 = (_DWORD *)*((void *)this + 10);
    }
    *((void *)this + 10) = v17;
    *((void *)this + 11) = v10;
    *((void *)this + 12) = v18;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    *(_DWORD *)unint64_t v9 = v4;
    *(void *)(v9 + 4) = v6;
    unsigned int v10 = (char *)(v9 + 12);
  }
  *((void *)this + 11) = v10;
}

uint64_t zilch::HuffmanCode::getKeyForCode(zilch::HuffmanCode *this, unsigned int a2, int a3)
{
  unsigned int v6 = a2;
  int v4 = std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::find<unsigned int>(this, &v6);
  if (v4)
  {
    while (*((_DWORD *)v4 + 4) == v6)
    {
      if (*((_DWORD *)v4 + 6) == a3) {
        return *((unsigned int *)v4 + 5);
      }
      int v4 = (uint64_t *)*v4;
      if (!v4) {
        return 0xFFFFFFFFLL;
      }
    }
  }
  return 0xFFFFFFFFLL;
}

void std::vector<zilch::HuffmanCode::Node>::reserve(void **a1, unint64_t a2)
{
  int v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)*a1) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = ((unsigned char *)a1[1] - (unsigned char *)*a1) / 48;
    unsigned int v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::HuffmanCode::Node>>(v3, a2);
    double v7 = &v6[48 * v5];
    unint64_t v9 = &v6[48 * v8];
    uint64_t v11 = (char *)*a1;
    unsigned int v10 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *((_OWORD *)v10 - 3);
        long long v14 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v12 - 1) = v14;
        *((_OWORD *)v12 - 3) = v13;
        v12 -= 48;
        v10 -= 48;
      }
      while (v10 != v11);
      unsigned int v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void *zilch::HuffmanCode::extractCode(void *result, uint64_t a2, int *a3, int *a4)
{
  uint64_t v7 = *result;
  uint64_t v8 = *(void *)(*result + 48 * a2 + 40);
  if (v8 != -1)
  {
    unint64_t v9 = result;
    double result = (void *)zilch::HuffmanCode::extractCode();
    int v10 = 2 * *a3;
    *a3 = v10;
    if (*(void *)(*v9 + 48 * v8 + 24) != a2) {
      *a3 = v10 | 1;
    }
    int v11 = *a4 + 1;
    goto LABEL_5;
  }
  if (*(void *)(v7 + 48 * a2 + 24) == -1 && *(void *)(v7 + 48 * a2 + 32) == -1)
  {
    *a3 = 0;
    int v11 = 1;
LABEL_5:
    *a4 = v11;
  }
  return result;
}

uint64_t zilch::HuffmanCode::getCodeForKey(zilch::HuffmanCode *this, unsigned int a2, unsigned int *a3)
{
  unsigned int v6 = a2;
  int v4 = std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::find<unsigned int>((void *)this + 5, &v6);
  if (!v4) {
    return 0xFFFFFFFFLL;
  }
  *a3 = *((_DWORD *)v4 + 6);
  return *((unsigned int *)v4 + 7);
}

void *std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::clear(void *result)
{
  if (result[3])
  {
    uint64_t v1 = result;
    double result = (void *)result[2];
    if (result)
    {
      do
      {
        uint64_t v2 = (void *)*result;
        operator delete(result);
        double result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    uint64_t v3 = v1[1];
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int,zilch::HuffmanCode::KeyInfo>>(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      int v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          int v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  int v10 = operator new(0x20uLL);
  void *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *(_DWORD *)a3;
  *(void *)((char *)v10 + 20) = *(void *)(a3 + 4);
  *((_DWORD *)v10 + 7) = *(_DWORD *)(a3 + 12);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  int v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    void *v10 = *v19;
LABEL_38:
    *int v19 = v10;
    goto LABEL_39;
  }
  void *v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    int v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_1890E1CC4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    int v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  unint64_t v11 = operator new(0x20uLL);
  *unint64_t v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_DWORD *)v11 + 7) = 0;
  *(void *)((char *)v11 + 20) = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  unint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *unint64_t v11 = *v20;
LABEL_38:
    *unint64_t v20 = v11;
    goto LABEL_39;
  }
  *unint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    unint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_1890E1EF0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::find<unsigned int>(void *a1, unsigned int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (v2.i32[0] - 1) & v3;
  }
  unint64_t v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (double result = *v6; result; double result = (uint64_t *)*result)
  {
    unint64_t v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t **std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = a1 + 1;
  unint64_t v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint8x8_t v9 = (uint64_t **)v6;
        unsigned int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        unint64_t v6 = *v9;
        unint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      unint64_t v6 = v9[1];
      if (!v6)
      {
        unint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint8x8_t v9 = a1 + 1;
LABEL_10:
    unint64_t v11 = operator new(0x30uLL);
    v11[8] = **a4;
    *((void *)v11 + 5) = 0;
    std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::HuffmanCode::Node>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(48 * a2);
}

__n128 std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<zilch::HuffmanCode::Node> &,std::__wrap_iter<zilch::HuffmanCode::Node*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v4 = (unint64_t)(a4 - 2) >> 1;
    unint64_t v5 = *(void *)(a2 - 32);
    if (*(void *)(a1 + 48 * v4 + 16) > v5)
    {
      unint64_t v6 = (long long *)(a2 - 48);
      long long v13 = *(_OWORD *)(a2 - 48);
      __n128 v11 = *(__n128 *)(a2 - 24);
      uint64_t v12 = *(void *)(a2 - 8);
      do
      {
        unint64_t v7 = v6;
        unint64_t v6 = (long long *)(a1 + 48 * v4);
        long long v8 = *v6;
        long long v9 = v6[2];
        v7[1] = v6[1];
        v7[2] = v9;
        _OWORD *v7 = v8;
        if (!v4) {
          break;
        }
        unint64_t v4 = (v4 - 1) >> 1;
      }
      while (*(void *)(a1 + 48 * v4 + 16) > v5);
      long long *v6 = v13;
      *((void *)v6 + 2) = v5;
      __n128 result = v11;
      *(long long *)((char *)v6 + 24) = (__int128)v11;
      *((void *)v6 + 5) = v12;
    }
  }
  return result;
}

uint64_t zilch::Angle::pi(zilch::Angle *this)
{
  return 0x8000;
}

_WORD *zilch::Angle::Angle(_WORD *this)
{
  *this = 0;
  return this;
}

{
  *this = 0;
  return this;
}

uint64_t zilch::Angle::zero(zilch::Angle *this)
{
  return 0;
}

zilch::Angle *zilch::Angle::Angle(zilch::Angle *this, const zilch::GeoCoordinates *a2, const zilch::GeoCoordinates *a3)
{
  *(_WORD *)this = 0;
  zilch::Angle::set(this, a2, a3);
  return this;
}

{
  *(_WORD *)this = 0;
  zilch::Angle::set(this, a2, a3);
  return this;
}

double zilch::Angle::set(zilch::Angle *this, const zilch::GeoCoordinates *a2, const zilch::GeoCoordinates *a3)
{
  unint64_t v3 = a3;
  int v6 = zilch::GeoCoordinates::x(a3);
  int v7 = zilch::GeoCoordinates::x(a2);
  int v21 = zilch::operator-(v6, v7);
  int v8 = zilch::GeoCoordinates::y(v3);
  int v9 = zilch::GeoCoordinates::y(a2);
  int v20 = zilch::operator-(v8, v9);
  LODWORD(a2) = zilch::GeoCoordinates::y(a2);
  int v10 = zilch::GeoCoordinates::y(v3);
  LODWORD(v3) = zilch::Latitude::average((int)a2, v10);
  double v12 = zilch::Latitude::toDegrees((zilch::Latitude *)&v20, v11);
  double v14 = zilch::cos((int)v3, v13);
  long double v15 = v12 * v14;
  double v16 = zilch::Longitude::toDegrees((zilch::Longitude *)&v21, v14);
  long double v17 = 1.57079633 - atan2(v15, v16);
  double v18 = fmod(v17, 6.28318531);
  if (v17 < 0.0) {
    double v18 = v18 + 6.28318531;
  }
  double result = v18 * 65536.0 / 6.28318531;
  *(_WORD *)this = (int)result;
  return result;
}

uint64_t zilch::Angle::fromRadians(zilch::Angle *this, long double a2)
{
  double v3 = fmod(a2, 6.28318531);
  if (a2 < 0.0) {
    double v3 = v3 + 6.28318531;
  }
  return (int)(v3 * 65536.0 / 6.28318531);
}

double zilch::Angle::setRadians(zilch::Angle *this, long double a2)
{
  double v4 = fmod(a2, 6.28318531);
  if (a2 < 0.0) {
    double v4 = v4 + 6.28318531;
  }
  double result = v4 * 65536.0 / 6.28318531;
  *(_WORD *)this = (int)result;
  return result;
}

uint64_t zilch::Angle::fromDegrees(zilch::Angle *this, long double a2)
{
  double v3 = fmod(a2, 360.0);
  if (a2 < 0.0) {
    double v3 = v3 + 360.0;
  }
  return (int)(v3 * 65536.0 / 360.0);
}

double zilch::Angle::setDegrees(zilch::Angle *this, long double a2)
{
  double v4 = fmod(a2, 360.0);
  if (a2 < 0.0) {
    double v4 = v4 + 360.0;
  }
  double result = v4 * 65536.0 / 360.0;
  *(_WORD *)this = (int)result;
  return result;
}

double zilch::Angle::toRadians(zilch::Angle *this, double a2)
{
  LOWORD(a2) = *(_WORD *)this;
  return (double)*(unint64_t *)&a2 * 6.28318531 * 0.0000152587891;
}

double zilch::Angle::toDegrees(zilch::Angle *this, double a2)
{
  LOWORD(a2) = *(_WORD *)this;
  return (double)*(unint64_t *)&a2 * 360.0 * 0.0000152587891;
}

uint64_t zilch::Angle::toUint16(zilch::Angle *this)
{
  return *(unsigned __int16 *)this;
}

_WORD *zilch::Angle::setUint16(_WORD *this, __int16 a2)
{
  *this = a2;
  return this;
}

long double zilch::Angle::sin(zilch::Angle *this)
{
  return zilch::SinTable::calculateSinFromUInt16((zilch::SinTable *)*(unsigned __int16 *)this);
}

long double zilch::SinTable::calculateSinFromUInt16(zilch::SinTable *this)
{
  if (((unsigned __int16)this & 0xC000) == 0)
  {
    double v1 = (double)this;
LABEL_5:
    double v2 = v1 * 6.28318531 * 0.0000152587891;
    return sin(v2);
  }
  if (((unsigned __int16)this & 0x8000) == 0)
  {
    double v1 = (double)(unsigned __int16)(0x8000 - (_WORD)this);
    goto LABEL_5;
  }
  if (this >> 14 > 2) {
    unsigned int v4 = (unsigned __int16)-(__int16)this;
  }
  else {
    unsigned int v4 = this ^ 0x8000;
  }
  return sin((double)v4 * -6.28318531 * 0.0000152587891);
}

long double zilch::Angle::cos(zilch::Angle *this)
{
  return zilch::SinTable::calculateSinFromUInt16((zilch::SinTable *)(unsigned __int16)(*(_WORD *)this + 0x4000));
}

_WORD *zilch::Angle::operator+=(_WORD *result, __int16 a2)
{
  *result += a2;
  return result;
}

_WORD *zilch::Angle::operator-=(_WORD *result, __int16 a2)
{
  *result -= a2;
  return result;
}

uint64_t zilch::Angle::operator+(unsigned __int16 *a1, int a2)
{
  return *a1 + a2;
}

uint64_t zilch::Angle::operator-(unsigned __int16 *a1, int a2)
{
  return *a1 - a2;
}

double zilch::Angle::radiansFrom(_WORD *a1, unsigned __int16 a2, double a3)
{
  LOWORD(a3) = *a1;
  double v3 = (double)*(unint64_t *)&a3 * 6.28318531 * 0.0000152587891 - (double)a2 * 6.28318531 * 0.0000152587891;
  if (v3 <= 3.14159265)
  {
    if (v3 < -3.14159265) {
      double v3 = v3 + 6.28318531;
    }
  }
  else
  {
    double v3 = v3 + -6.28318531;
  }
  return fabs(fmod(v3, 6.28318531));
}

double zilch::Angle::degreesFrom(_WORD *a1, unsigned __int16 a2, double a3)
{
  LOWORD(a3) = *a1;
  double v3 = (double)*(unint64_t *)&a3 * 6.28318531 * 0.0000152587891 - (double)a2 * 6.28318531 * 0.0000152587891;
  if (v3 <= 3.14159265)
  {
    if (v3 < -3.14159265) {
      double v3 = v3 + 6.28318531;
    }
  }
  else
  {
    double v3 = v3 + -6.28318531;
  }
  return fabs(fmod(v3, 6.28318531)) * 360.0 / 6.28318531;
}

BOOL zilch::Angle::operator==(unsigned __int16 *a1, unsigned __int16 a2)
{
  return *a1 == a2;
}

BOOL zilch::Angle::operator!=(unsigned __int16 *a1, unsigned __int16 a2)
{
  return *a1 != a2;
}

double zilch::sin(unsigned __int16 a1)
{
  return zilch::SinTable::calculateSinFromUInt16((zilch::SinTable *)a1);
}

double zilch::cos(__int16 a1)
{
  return zilch::SinTable::calculateSinFromUInt16((zilch::SinTable *)(unsigned __int16)(a1 + 0x4000));
}

zilch::ControlPoint *zilch::ControlPoint::ControlPoint(zilch::ControlPoint *this)
{
  *(_DWORD *)this = 1;
  zilch::GeoCoordinates::GeoCoordinates((zilch::ControlPoint *)((char *)this + 4));
  zilch::Angle::Angle((_WORD *)this + 8);
  zilch::FormOfWay::FormOfWay((_DWORD *)this + 5, 0);
  zilch::FunctionalClass::FunctionalClass((_DWORD *)this + 6, 9);
  *((_DWORD *)this + 7) = 0;
  return this;
}

uint64_t zilch::ControlPoint::ControlPoint(uint64_t a1, uint64_t *a2, __int16 a3)
{
  *(_DWORD *)a1 = 0;
  uint64_t v4 = *a2;
  *(_DWORD *)(a1 + 12) = *((_DWORD *)a2 + 2);
  *(void *)(a1 + 4) = v4;
  *(_WORD *)(a1 + 16) = a3;
  zilch::FormOfWay::FormOfWay((_DWORD *)(a1 + 20), 0);
  zilch::FunctionalClass::FunctionalClass((_DWORD *)(a1 + 24), 9);
  *(_DWORD *)(a1 + 28) = 0;
  return a1;
}

{
  uint64_t v4;

  *(_DWORD *)a1 = 0;
  uint64_t v4 = *a2;
  *(_DWORD *)(a1 + 12) = *((_DWORD *)a2 + 2);
  *(void *)(a1 + 4) = v4;
  *(_WORD *)(a1 + 16) = a3;
  zilch::FormOfWay::FormOfWay((_DWORD *)(a1 + 20), 0);
  zilch::FunctionalClass::FunctionalClass((_DWORD *)(a1 + 24), 9);
  *(_DWORD *)(a1 + 28) = 0;
  return a1;
}

zilch::ControlPoint *zilch::ControlPoint::ControlPoint(zilch::ControlPoint *this, const zilch::GeoCoordinates *a2)
{
  *(_DWORD *)this = 1;
  uint64_t v3 = *(void *)a2;
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 2);
  *(void *)((char *)this + 4) = v3;
  zilch::Angle::Angle((_WORD *)this + 8);
  zilch::FormOfWay::FormOfWay((_DWORD *)this + 5, 0);
  zilch::FunctionalClass::FunctionalClass((_DWORD *)this + 6, 9);
  *((_DWORD *)this + 7) = 0;
  return this;
}

uint64_t zilch::ControlPoint::type(zilch::ControlPoint *this)
{
  return *(unsigned int *)this;
}

BOOL zilch::ControlPoint::dummy(zilch::ControlPoint *this)
{
  return *(_DWORD *)this == 1;
}

uint64_t zilch::ControlPoint::position(zilch::ControlPoint *this)
{
  return (uint64_t)this + 4;
}

uint64_t zilch::ControlPoint::heading(zilch::ControlPoint *this)
{
  return *((unsigned __int16 *)this + 8);
}

uint64_t zilch::ControlPoint::formOfWay(zilch::ControlPoint *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t zilch::ControlPoint::functionalClass(zilch::ControlPoint *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t zilch::ControlPoint::uturnFlag(zilch::ControlPoint *this)
{
  return *((unsigned int *)this + 7);
}

_DWORD *zilch::ControlPoint::setType(_DWORD *result, int a2)
{
  *double result = a2;
  return result;
}

uint64_t zilch::ControlPoint::setPosition(uint64_t this, const GeoCoordinates *a2)
{
  uint64_t v2 = *(void *)&a2->var0.var0;
  *(_DWORD *)(this + 12) = a2->var2;
  *(void *)(this + 4) = v2;
  return this;
}

uint64_t zilch::ControlPoint::setHeading(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 16) = a2;
  return result;
}

FormOfWay *zilch::ControlPoint::setFormOfWay(FormOfWay *this, FormOfWay a2)
{
  this[5].var0 = a2.var0;
  return this;
}

FunctionalClass *zilch::ControlPoint::setFunctionalClass(FunctionalClass *this, FunctionalClass a2)
{
  this[6].var0 = a2.var0;
  return this;
}

uint64_t zilch::ControlPoint::setUTurnFlag(uint64_t result, int a2)
{
  *(_DWORD *)(result + 28) = a2;
  return result;
}

zilch::ControlPoint *zilch::ControlPoint::null@<X0>(zilch::ControlPoint *a1@<X8>)
{
  return zilch::ControlPoint::ControlPoint(a1);
}

BOOL zilch::ControlPoint::operator==(_DWORD *a1, _DWORD *a2)
{
  BOOL result = 0;
  if (*a1 == *a2 && !zilch::GeoCoordinates::operator!=(a1 + 1, a2 + 1))
  {
    if (*a1 == 1) {
      return 1;
    }
    double v6 = zilch::Angle::toDegrees((zilch::Angle *)(a1 + 4), v4);
    if (vabdd_f64(v6, zilch::Angle::toDegrees((zilch::Angle *)(a2 + 4), v6)) < 1.0
      && !zilch::FormOfWay::operator!=(a1 + 5, a2[5])
      && !zilch::FunctionalClass::operator!=(a1 + 6, a2[6]))
    {
      return 1;
    }
  }
  return result;
}

BOOL zilch::ControlPoint::operator!=(_DWORD *a1, _DWORD *a2)
{
  return !zilch::ControlPoint::operator==(a1, a2);
}

void zilch::ControlPoint::encode(zilch::ControlPoint *this, zilch::WriteBitstream *a2)
{
  zilch::WriteBitstream::put(a2, *(_DWORD *)this, 2);
  int v10 = zilch::GeoCoordinates::x((zilch::ControlPoint *)((char *)this + 4));
  unsigned int v4 = zilch::Longitude::toUint32((zilch::Longitude *)&v10);
  zilch::WriteBitstream::put(a2, v4, 32);
  int v9 = zilch::GeoCoordinates::y((zilch::ControlPoint *)((char *)this + 4));
  unsigned int v5 = zilch::Latitude::toUint32((zilch::Latitude *)&v9);
  zilch::WriteBitstream::put(a2, v5, 32);
  if (*(_DWORD *)this != 1)
  {
    unsigned int v6 = zilch::Angle::toUint16((zilch::ControlPoint *)((char *)this + 16));
    zilch::WriteBitstream::put(a2, v6, 16);
    unsigned int v7 = zilch::FormOfWay::type((zilch::ControlPoint *)((char *)this + 20));
    zilch::WriteBitstream::put(a2, v7, 5);
    unsigned int v8 = zilch::FunctionalClass::toInteger((zilch::ControlPoint *)((char *)this + 24));
    zilch::WriteBitstream::put(a2, v8, 4);
    zilch::WriteBitstream::put(a2, *((_DWORD *)this + 7) == 1);
  }
}

uint64_t zilch::ControlPoint::decode(zilch::ControlPoint *this, zilch::ReadBitstream *a2)
{
  *(_DWORD *)this = zilch::ReadBitstream::get(a2, 2);
  unsigned int v4 = (zilch::Longitude *)zilch::ReadBitstream::get(a2, 32);
  unsigned int v5 = (zilch::Latitude *)zilch::ReadBitstream::get(a2, 32);
  LODWORD(v4) = zilch::Longitude::fromUint32(v4, v6);
  unsigned int v8 = zilch::Latitude::fromUint32(v5, v7);
  v9.var0 = v4;
  v10.var0 = v8;
  uint64_t result = zilch::GeoCoordinates::set((uint64_t)this + 4, v9, v10);
  if (*(_DWORD *)this != 1)
  {
    __int16 v12 = zilch::ReadBitstream::get(a2, 16);
    zilch::Angle::setUint16((_WORD *)this + 8, v12);
    int v13 = zilch::ReadBitstream::get(a2, 5);
    zilch::FormOfWay::FormOfWay(&v19, v13);
    *((_DWORD *)this + 5) = v19;
    unsigned int v14 = zilch::ReadBitstream::get(a2, 4);
    uint64_t result = (uint64_t)zilch::FunctionalClass::FunctionalClass(&v18, v14);
    *((_DWORD *)this + 6) = v18;
    unint64_t v15 = *((void *)a2 + 3);
    if (v15 >= *((void *)a2 + 1))
    {
      int v17 = 0;
      *((unsigned char *)a2 + 36) = 1;
    }
    else
    {
      int v16 = *((_DWORD *)a2 + 8);
      int v17 = (*(_DWORD *)(*(void *)a2 + 4 * v15) >> v16) & 1;
      *((_DWORD *)a2 + 8) = v16 + 1;
      if (v16 >= 31)
      {
        *((_DWORD *)a2 + 8) = 0;
        *((void *)a2 + 3) = v15 + 1;
      }
    }
    *((_DWORD *)this + 7) = v17;
  }
  return result;
}

void *zilch::ControlPoint::toString@<X0>(zilch::ControlPoint *this@<X0>, void *a2@<X8>, double a3@<D0>)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  int v6 = *(_DWORD *)this;
  unsigned int v5 = (zilch::ControlPoint *)((char *)this + 4);
  if (v6 == 1)
  {
    zilch::GeoCoordinates::toString(v5, v20, a3);
    if (v21 >= 0) {
      unsigned int v7 = v20;
    }
    else {
      unsigned int v7 = (void **)v20[0];
    }
    snprintf(__str, 0x400uLL, "ControlPoint(%s)", (const char *)v7);
  }
  else
  {
    unsigned int v8 = v20;
    zilch::GeoCoordinates::toString(v5, v20, a3);
    if (v21 < 0) {
      unsigned int v8 = (void **)v20[0];
    }
    double v10 = zilch::Angle::toDegrees((zilch::ControlPoint *)((char *)this + 16), v9);
    zilch::FormOfWay::toString((zilch::ControlPoint *)((char *)this + 20), v18);
    int v11 = v19;
    __int16 v12 = (void **)v18[0];
    zilch::FunctionalClass::toString((zilch::ControlPoint *)((char *)this + 24), __p);
    int v13 = v18;
    if (v11 < 0) {
      int v13 = v12;
    }
    if (v17 >= 0) {
      unsigned int v14 = __p;
    }
    else {
      unsigned int v14 = (void **)__p[0];
    }
    snprintf(__str, 0x400uLL, "ControlPoint(%s, %f, %s, %s)", (const char *)v8, v10, (const char *)v13, (const char *)v14);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    if (v19 < 0) {
      operator delete(v18[0]);
    }
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, __str);
}

void sub_1890E2D80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t zilch::ControlPoint::toJson(zilch::ControlPoint *this)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v28);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"{", 1);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"\"type\":\"", 8);
  uint64_t v3 = *(int *)this;
  unsigned int v4 = "(unknown)";
  if (v3 <= 2) {
    unsigned int v4 = off_1E53D7098[v3];
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, v4);
  if ((v27 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if ((v27 & 0x80u) == 0) {
    uint64_t v6 = v27;
  }
  else {
    uint64_t v6 = v26;
  }
  unsigned int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)p_p, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"\",", 2);
  if ((char)v27 < 0) {
    operator delete(__p);
  }
  unsigned int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"\"position\":", 11);
  zilch::GeoCoordinates::toJson((uint64_t *)&__p, (zilch::ControlPoint *)((char *)this + 4));
  if ((v27 & 0x80u) == 0) {
    double v9 = &__p;
  }
  else {
    double v9 = __p;
  }
  if ((v27 & 0x80u) == 0) {
    uint64_t v10 = v27;
  }
  else {
    uint64_t v10 = v26;
  }
  int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)",", 1);
  if ((char)v27 < 0) {
    operator delete(__p);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"\"angle\":\"", 9);
  zilch::Angle::toDegrees((zilch::ControlPoint *)((char *)this + 16), v12);
  int v13 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\",", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"\"formOfWay\":\"", 13);
  zilch::FormOfWay::type((zilch::ControlPoint *)((char *)this + 20));
  unsigned int v14 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\",", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"\"functionalClass\":\"", 19);
  zilch::FunctionalClass::toInteger((zilch::ControlPoint *)((char *)this + 24));
  unint64_t v15 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\",", 2);
  int v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"\"uTurn\":\"", 9);
  int v17 = *((_DWORD *)this + 7);
  int v18 = "FALSE";
  if (v17) {
    int v18 = "(unknown)";
  }
  if (v17 == 1) {
    char v19 = "TRUE";
  }
  else {
    char v19 = (char *)v18;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, v19);
  if ((v27 & 0x80u) == 0) {
    int v20 = &__p;
  }
  else {
    int v20 = __p;
  }
  if ((v27 & 0x80u) == 0) {
    uint64_t v21 = v27;
  }
  else {
    uint64_t v21 = v26;
  }
  int v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v20, v21);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"\"", 1);
  if ((char)v27 < 0) {
    operator delete(__p);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"}", 1);
  std::stringbuf::str();
  v28[0] = *MEMORY[0x1E4FBA408];
  uint64_t v23 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v28 + *(void *)(v28[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v29[0] = v23;
  v29[1] = MEMORY[0x1E4FBA470] + 16;
  if (v30 < 0) {
    operator delete((void *)v29[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x18C11F4F0](&v31);
}

void sub_1890E3180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA408];
  uint64_t v3 = *MEMORY[0x1E4FBA408];
  *(void *)a1 = *MEMORY[0x1E4FBA408];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x18C11F4F0](a1 + 128);
  return a1;
}

void __clang_call_terminate(void *a1)
{
}

void *std::string::basic_string[abi:ne180100](void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

uint64_t zilch::EndianUtils::getEndianType(zilch::EndianUtils *this)
{
  return 0;
}

uint64_t zilch::EndianUtils::swapEndian(zilch::EndianUtils *this)
{
  return bswap32(this);
}

_DWORD *zilch::FormOfWay::FormOfWay(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

{
  *uint64_t result = a2;
  return result;
}

uint64_t zilch::FormOfWay::type(zilch::FormOfWay *this)
{
  return *(unsigned int *)this;
}

void *zilch::FormOfWay::toString@<X0>(zilch::FormOfWay *this@<X0>, void *a2@<X8>)
{
  unsigned int v4 = *(_DWORD *)this - 1;
  if (v4 > 0x15) {
    unsigned int v5 = "FormOfWay::UNKNOWN";
  }
  else {
    unsigned int v5 = off_1E53D70B0[v4];
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v5);
}

BOOL zilch::FormOfWay::operator==(_DWORD *a1, int a2)
{
  return *a1 == a2;
}

BOOL zilch::FormOfWay::operator!=(_DWORD *a1, int a2)
{
  return *a1 != a2;
}

_DWORD *zilch::FunctionalClass::FunctionalClass(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

{
  *uint64_t result = a2;
  return result;
}

int *zilch::FunctionalClass::FunctionalClass(int *this, unsigned int a2)
{
  if (a2 >= 9) {
    int v2 = 9;
  }
  else {
    int v2 = a2;
  }
  *this = v2;
  return this;
}

{
  int v2;

  if (a2 >= 9) {
    int v2 = 9;
  }
  else {
    int v2 = a2;
  }
  *this = v2;
  return this;
}

uint64_t zilch::FunctionalClass::toInteger(zilch::FunctionalClass *this)
{
  return *(unsigned int *)this;
}

BOOL zilch::FunctionalClass::operator==(_DWORD *a1, int a2)
{
  return *a1 == a2;
}

BOOL zilch::FunctionalClass::operator!=(_DWORD *a1, int a2)
{
  return *a1 != a2;
}

void *zilch::FunctionalClass::toString@<X0>(zilch::FunctionalClass *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(int *)this;
  if (v4 > 8) {
    unsigned int v5 = "UNKNOWN";
  }
  else {
    unsigned int v5 = off_1E53D7160[v4];
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v5);
}

_DWORD *zilch::GeoCoordinates::null(zilch::GeoCoordinates *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9116AB8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E9116AB8))
  {
    zilch::Longitude::Longitude(&dword_1E9116AA8);
    zilch::Latitude::Latitude(&dword_1E9116AAC);
    dword_1E9116AB0 = 0x7FFFFFFF;
    __cxa_guard_release(&qword_1E9116AB8);
  }
  return &dword_1E9116AA8;
}

void sub_1890E3540(_Unwind_Exception *a1)
{
}

zilch::GeoCoordinates *zilch::GeoCoordinates::GeoCoordinates(zilch::GeoCoordinates *this)
{
  int v2 = zilch::Longitude::Longitude(this);
  zilch::Latitude::Latitude(v2 + 1);
  *((_DWORD *)this + 2) = 0x7FFFFFFF;
  return this;
}

{
  _DWORD *v2;

  int v2 = zilch::Longitude::Longitude(this);
  zilch::Latitude::Latitude(v2 + 1);
  *((_DWORD *)this + 2) = 0x7FFFFFFF;
  return this;
}

uint64_t zilch::GeoCoordinates::GeoCoordinates(uint64_t this, Longitude a2, Latitude a3)
{
  *(Longitude *)this = a2;
  *(Latitude *)(this + 4) = a3;
  *(_DWORD *)(this + 8) = 0x7FFFFFFF;
  return this;
}

{
  *(Longitude *)this = a2;
  *(Latitude *)(this + 4) = a3;
  *(_DWORD *)(this + 8) = 0x7FFFFFFF;
  return this;
}

uint64_t zilch::GeoCoordinates::GeoCoordinates(uint64_t this, Longitude a2, Latitude a3, int a4)
{
  *(Longitude *)this = a2;
  *(Latitude *)(this + 4) = a3;
  *(_DWORD *)(this + 8) = a4;
  return this;
}

{
  *(Longitude *)this = a2;
  *(Latitude *)(this + 4) = a3;
  *(_DWORD *)(this + 8) = a4;
  return this;
}

uint64_t zilch::GeoCoordinates::set(uint64_t this, Longitude a2, Latitude a3)
{
  *(Longitude *)this = a2;
  *(Latitude *)(this + 4) = a3;
  return this;
}

uint64_t zilch::GeoCoordinates::set(uint64_t this, Longitude a2, Latitude a3, int a4)
{
  *(Longitude *)this = a2;
  *(Latitude *)(this + 4) = a3;
  *(_DWORD *)(this + 8) = a4;
  return this;
}

uint64_t zilch::GeoCoordinates::x(zilch::GeoCoordinates *this)
{
  return *(unsigned int *)this;
}

uint64_t zilch::GeoCoordinates::y(zilch::GeoCoordinates *this)
{
  return *((unsigned int *)this + 1);
}

zilch *zilch::GeoCoordinates::z(zilch::GeoCoordinates *this)
{
  return (zilch *)*((unsigned int *)this + 2);
}

_DWORD *zilch::GeoCoordinates::operator+=(_DWORD *a1, int *a2)
{
  zilch::Longitude::operator+=(a1, *a2);
  int v4 = a2[1];

  return zilch::Latitude::operator+=(a1 + 1, v4);
}

_DWORD *zilch::GeoCoordinates::operator-=(_DWORD *a1, int *a2)
{
  zilch::Longitude::operator-=(a1, *a2);
  int v4 = a2[1];

  return zilch::Latitude::operator-=(a1 + 1, v4);
}

BOOL zilch::GeoCoordinates::operator==(_DWORD *a1, unsigned int *a2)
{
  BOOL result = zilch::Longitude::operator==(a1, *a2);
  if (result)
  {
    BOOL result = zilch::Latitude::operator==(a1 + 1, a2[1]);
    if (result) {
      return a1[2] == a2[2];
    }
  }
  return result;
}

BOOL zilch::GeoCoordinates::operator!=(_DWORD *a1, unsigned int *a2)
{
  return !zilch::GeoCoordinates::operator==(a1, a2);
}

uint64_t zilch::operator+(uint64_t *a1, int *a2)
{
  uint64_t v4 = *a1;
  int v5 = *((_DWORD *)a1 + 2);
  zilch::Longitude::operator+=(&v4, *a2);
  zilch::Latitude::operator+=((_DWORD *)&v4 + 1, a2[1]);
  return v4;
}

uint64_t zilch::operator-(uint64_t *a1, int *a2)
{
  uint64_t v4 = *a1;
  int v5 = *((_DWORD *)a1 + 2);
  zilch::Longitude::operator-=(&v4, *a2);
  zilch::Latitude::operator-=((_DWORD *)&v4 + 1, a2[1]);
  return v4;
}

void *zilch::GeoCoordinates::toString@<X0>(zilch::GeoCoordinates *this@<X0>, void *a2@<X8>, double a3@<D0>)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  double v5 = zilch::Latitude::toDegrees((zilch::GeoCoordinates *)((char *)this + 4), a3);
  double v6 = zilch::Longitude::toDegrees(this, v5);
  snprintf(__str, 0x400uLL, "LatLng(%f, %f, %d)", v5, v6, *((_DWORD *)this + 2));
  return std::string::basic_string[abi:ne180100]<0>(a2, __str);
}

uint64_t zilch::GeoCoordinates::distanceTo(zilch::GeoCoordinates *this, const zilch::GeoCoordinates *a2)
{
  int v4 = zilch::Longitude::toUint32(this);
  int v5 = v4 - zilch::Longitude::toUint32(a2);
  if (v5 >= 0) {
    unsigned int v6 = v5;
  }
  else {
    unsigned int v6 = -v5;
  }
  int v7 = zilch::Latitude::toUint32((zilch::GeoCoordinates *)((char *)this + 4));
  size_t v8 = (const zilch::GeoCoordinates *)((char *)a2 + 4);
  int v9 = v7 - zilch::Latitude::toUint32(v8);
  if (v9 >= 0) {
    unsigned int v10 = v9;
  }
  else {
    unsigned int v10 = -v9;
  }
  int v11 = zilch::Latitude::toUint32(v8);
  __int16 v13 = zilch::Angle::fromUint16((zilch::Angle *)(unsigned __int16)(((v11 + (v10 >> 1)) >> 16) - 0x4000), v12);
  double v14 = zilch::cos(v13);
  return sqrt((double)(((40008000 * (unint64_t)v10) >> 32)
                                   * ((40008000 * (unint64_t)v10) >> 32)
                                   + ((unint64_t)(v14 * (double)(40075160 * (unint64_t)v6)) >> 32)
                                   * ((unint64_t)(v14 * (double)(40075160 * (unint64_t)v6)) >> 32)));
}

uint64_t zilch::GeoCoordinates::toJson(zilch::GeoCoordinates *this)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"{", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\"latitude\":\"", 12);
  zilch::Latitude::toDegrees((zilch::GeoCoordinates *)((char *)this + 4), v2);
  uint64_t v3 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"\",", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\"longitude\":\"", 13);
  zilch::Longitude::toDegrees(this, v4);
  int v5 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"\"", 1);
  if (*((_DWORD *)this + 2) != 0x7FFFFFFF)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\",elevation\":\"", 14);
    unsigned int v6 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"\"", 1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"}", 1);
  std::stringbuf::str();
  v9[0] = *MEMORY[0x1E4FBA408];
  uint64_t v7 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v9 + *(void *)(v9[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v10[0] = v7;
  v10[1] = MEMORY[0x1E4FBA470] + 16;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x18C11F4F0](&v12);
}

void sub_1890E3B8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL zilch::GeoCoordinates::has_elevation(zilch::GeoCoordinates *this)
{
  return *((_DWORD *)this + 2) != 0x7FFFFFFF;
}

_DWORD *zilch::Latitude::Latitude(_DWORD *this)
{
  *this = 0;
  return this;
}

{
  *this = 0;
  return this;
}

uint64_t zilch::Latitude::fromDegrees(zilch::Latitude *this, double a2)
{
  for (double i = a2 + 90.0; i < 0.0; double i = i + 360.0)
    ;
  for (; i >= 360.0; double i = i + -360.0)
    ;
  return (i * 4294967300.0 / 360.0);
}

uint64_t zilch::Latitude::null(zilch::Latitude *this)
{
  return 0xFFFFFFFFLL;
}

uint64_t zilch::Latitude::average(int a1, int a2)
{
  return (a2 + a1) >> 1;
}

double zilch::Latitude::toDegrees(zilch::Latitude *this, double a2)
{
  LODWORD(a2) = *(_DWORD *)this;
  double result = (double)*(unint64_t *)&a2 * 360.0 * 2.32830644e-10 + -90.0;
  if (result >= 180.0) {
    return result + -360.0;
  }
  return result;
}

double zilch::Latitude::toRadians(zilch::Latitude *this, double a2)
{
  LODWORD(a2) = *(_DWORD *)this;
  double v2 = (double)*(unint64_t *)&a2 * 360.0 * 2.32830644e-10 + -90.0;
  if (v2 >= 180.0) {
    double v2 = v2 + -360.0;
  }
  return v2 * 0.0174532925;
}

uint64_t zilch::Latitude::toUint32(zilch::Latitude *this)
{
  return *(unsigned int *)this;
}

uint64_t zilch::Latitude::toAngle(zilch::Latitude *this, unsigned __int16 a2)
{
  return zilch::Angle::fromUint16((zilch::Angle *)((*(_DWORD *)this - 0x40000000) >> 16), a2);
}

_DWORD *zilch::Latitude::operator+=(_DWORD *result, int a2)
{
  *result += a2 - 0x40000000;
  return result;
}

_DWORD *zilch::Latitude::operator-=(_DWORD *result, int a2)
{
  *double result = *result - a2 + 0x40000000;
  return result;
}

BOOL zilch::Latitude::operator==(_DWORD *a1, unsigned int a2)
{
  unsigned int v2 = *a1 - a2;
  if (*a1 < a2) {
    unsigned int v2 = a2 - *a1;
  }
  return v2 < 2;
}

BOOL zilch::Latitude::operator!=(_DWORD *a1, unsigned int a2)
{
  unsigned int v2 = *a1 - a2;
  if (*a1 < a2) {
    unsigned int v2 = a2 - *a1;
  }
  return v2 > 1;
}

uint64_t zilch::operator+(int a1, int a2)
{
  return (a1 + a2 - 0x40000000);
}

{
  return (a2 + a1);
}

uint64_t zilch::operator-(int a1, int a2)
{
  return (a1 - a2 + 0x40000000);
}

{
  return (a1 - a2);
}

double zilch::cos(int a1, unsigned __int16 a2)
{
  __int16 v2 = zilch::Angle::fromUint16((zilch::Angle *)((a1 - 0x40000000) >> 16), a2);

  return zilch::cos(v2);
}

_DWORD *zilch::Longitude::Longitude(_DWORD *this)
{
  *this = 0;
  return this;
}

{
  *this = 0;
  return this;
}

uint64_t zilch::Longitude::fromDegrees(zilch::Longitude *this, double a2)
{
  for (; a2 < 0.0; a2 = a2 + 360.0)
    ;
  for (; a2 >= 360.0; a2 = a2 + -360.0)
    ;
  return (a2 * 4294967300.0 / 360.0);
}

uint64_t zilch::Longitude::null(zilch::Longitude *this)
{
  return 0xFFFFFFFFLL;
}

double zilch::Longitude::toDegrees(zilch::Longitude *this, double a2)
{
  LODWORD(a2) = *(_DWORD *)this;
  double result = (double)*(unint64_t *)&a2 * 360.0 / 4294967300.0;
  if (result >= 180.0) {
    return result + -360.0;
  }
  return result;
}

double zilch::Longitude::toRadians(zilch::Longitude *this, double a2)
{
  LODWORD(a2) = *(_DWORD *)this;
  double v2 = (double)*(unint64_t *)&a2 * 360.0 / 4294967300.0;
  if (v2 >= 180.0) {
    double v2 = v2 + -360.0;
  }
  return v2 * 0.0174532925;
}

uint64_t zilch::Longitude::toUint32(zilch::Longitude *this)
{
  return *(unsigned int *)this;
}

_DWORD *zilch::Longitude::operator+=(_DWORD *result, int a2)
{
  *result += a2;
  return result;
}

_DWORD *zilch::Longitude::operator-=(_DWORD *result, int a2)
{
  *result -= a2;
  return result;
}

BOOL zilch::Longitude::operator==(_DWORD *a1, unsigned int a2)
{
  unsigned int v2 = *a1 - a2;
  if (*a1 < a2) {
    unsigned int v2 = a2 - *a1;
  }
  return v2 < 2;
}

BOOL zilch::Longitude::operator!=(_DWORD *a1, unsigned int a2)
{
  unsigned int v2 = *a1 - a2;
  if (*a1 < a2) {
    unsigned int v2 = a2 - *a1;
  }
  return v2 > 1;
}

void zilch::Message::Message(zilch::Message *this)
{
}

{
  operator new();
}

void zilch::Message::Message(zilch::Message *this, const zilch::Message *a2)
{
}

void sub_1890E402C(_Unwind_Exception *a1)
{
  MEMORY[0x18C11F580](v1, 0x20C40960023A9);
  _Unwind_Resume(a1);
}

void zilch::Message::Message(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *a1 = v2;
  operator new();
}

void sub_1890E40BC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  *uint64_t v1 = 0;
  if (v3) {
    std::default_delete<zilch::MessageData>::operator()[abi:ne180100]((uint64_t)v1, v3);
  }
  _Unwind_Resume(exception_object);
}

void zilch::Message::~Message(zilch::Message *this)
{
  uint64_t v1 = *(void *)this;
  *(void *)this = 0;
  if (v1) {
    std::default_delete<zilch::MessageData>::operator()[abi:ne180100]((uint64_t)this, v1);
  }
}

{
  uint64_t v1;

  uint64_t v1 = *(void *)this;
  *(void *)this = 0;
  if (v1) {
    std::default_delete<zilch::MessageData>::operator()[abi:ne180100]((uint64_t)this, v1);
  }
}

uint64_t zilch::Message::toJson(uint64_t **this)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"[", 1);
  uint64_t v2 = **this;
  if ((*this)[1] != v2)
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    do
    {
      zilch::ControlPoint::toJson((uint64_t *)__p, (zilch::ControlPoint *)(v2 + v3));
      if ((v11 & 0x80u) == 0) {
        int v5 = __p;
      }
      else {
        int v5 = (void **)__p[0];
      }
      if ((v11 & 0x80u) == 0) {
        uint64_t v6 = v11;
      }
      else {
        uint64_t v6 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v5, v6);
      if ((char)v11 < 0) {
        operator delete(__p[0]);
      }
      ++v4;
      uint64_t v2 = **this;
      uint64_t v7 = (*this)[1] - v2;
      if (v4 < v7 >> 5)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)",", 1);
        uint64_t v2 = **this;
        uint64_t v7 = (*this)[1] - v2;
      }
      v3 += 32;
    }
    while (v4 < v7 >> 5);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"]", 1);
  std::stringbuf::str();
  v12[0] = *MEMORY[0x1E4FBA408];
  uint64_t v8 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v12 + *(void *)(v12[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v13[0] = v8;
  v13[1] = MEMORY[0x1E4FBA470] + 16;
  if (v14 < 0) {
    operator delete((void *)v13[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x18C11F4F0](&v15);
}

void sub_1890E438C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void zilch::Message::Message(zilch::Message *this, zilch::ReadBitstream *a2)
{
}

void sub_1890E4418(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  *uint64_t v1 = 0;
  if (v3) {
    std::default_delete<zilch::MessageData>::operator()[abi:ne180100]((uint64_t)v1, v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t zilch::Message::decode(zilch::Message *this, zilch::ReadBitstream *a2)
{
  std::vector<zilch::ControlPoint>::resize(*(void *)this, 0);
  int v4 = zilch::ReadBitstream::get(a2, 8);
  if (v4 > 3)
  {
    if (v4 == 4)
    {
      int v5 = (void ***)this;
      uint64_t v6 = a2;
      int v7 = 1;
      goto LABEL_12;
    }
    if (v4 != 64) {
      return 2;
    }
  }
  else if (v4 != 2)
  {
    if (v4 == 3)
    {
      int v5 = (void ***)this;
      uint64_t v6 = a2;
      int v7 = 0;
LABEL_12:
      return zilch::Message::decode_v3_v4(v5, v6, v7);
    }
    return 2;
  }

  return zilch::Message::decode_v2((void ***)this, a2);
}

char **zilch::Message::operator=(char **a1, char ***a2)
{
  uint64_t v3 = *a1;
  if (v3 != (char *)*a2) {
    std::vector<zilch::ControlPoint>::__assign_with_size[abi:ne180100]<zilch::ControlPoint*,zilch::ControlPoint*>(v3, **a2, (uint64_t)(*a2)[1], ((*a2)[1] - **a2) >> 5);
  }
  return a1;
}

uint64_t *zilch::Message::operator=(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *double result = *a2;
  *a2 = v2;
  return result;
}

uint64_t zilch::Message::getPoint(zilch::Message *this, unsigned int a2)
{
  return **(void **)this + 32 * a2;
}

uint64_t zilch::Message::operator[](void **a1, unsigned int a2)
{
  return **a1 + 32 * a2;
}

uint64_t zilch::Message::front(zilch::Message *this)
{
  return **(void **)this;
}

uint64_t zilch::Message::back(zilch::Message *this)
{
  return *(void *)(*(void *)this + 8) - 32;
}

uint64_t zilch::Message::size(zilch::Message *this)
{
  return (*(void *)(*(void *)this + 8) - **(void **)this) >> 5;
}

void zilch::Message::addPoint(void ***this, const zilch::ControlPoint *a2)
{
  zilch::ControlPoint::null((zilch::ControlPoint *)v20);
  if (zilch::ControlPoint::operator!=(a2, v20))
  {
    int v4 = *this;
    int v5 = v4[1];
    unint64_t v6 = (unint64_t)v4[2];
    if ((unint64_t)v5 >= v6)
    {
      uint64_t v9 = ((char *)v5 - (unsigned char *)*v4) >> 5;
      unint64_t v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 59) {
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v11 = v6 - (void)*v4;
      if (v11 >> 4 > v10) {
        unint64_t v10 = v11 >> 4;
      }
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v10;
      }
      if (v12) {
        __int16 v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::ControlPoint>>((uint64_t)(v4 + 2), v12);
      }
      else {
        __int16 v13 = 0;
      }
      char v14 = &v13[32 * v9];
      uint64_t v15 = &v13[32 * v12];
      long long v16 = *((_OWORD *)a2 + 1);
      *(_OWORD *)char v14 = *(_OWORD *)a2;
      *((_OWORD *)v14 + 1) = v16;
      uint64_t v8 = v14 + 32;
      int v18 = (char *)*v4;
      int v17 = (char *)v4[1];
      if (v17 != *v4)
      {
        do
        {
          long long v19 = *((_OWORD *)v17 - 1);
          *((_OWORD *)v14 - 2) = *((_OWORD *)v17 - 2);
          *((_OWORD *)v14 - 1) = v19;
          v14 -= 32;
          v17 -= 32;
        }
        while (v17 != v18);
        int v17 = (char *)*v4;
      }
      *int v4 = v14;
      v4[1] = v8;
      v4[2] = v15;
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      long long v7 = *((_OWORD *)a2 + 1);
      *int v5 = *(_OWORD *)a2;
      v5[1] = v7;
      uint64_t v8 = v5 + 2;
    }
    v4[1] = v8;
  }
}

void std::vector<zilch::ControlPoint>::push_back[abi:ne180100](void **a1, _OWORD *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  long long v7 = *(_OWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((char *)v7 - (unsigned char *)*a1) >> 5;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 59) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - (void)*a1;
    if (v12 >> 4 > v11) {
      unint64_t v11 = v12 >> 4;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13) {
      char v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::ControlPoint>>(v4, v13);
    }
    else {
      char v14 = 0;
    }
    uint64_t v15 = &v14[32 * v10];
    long long v16 = &v14[32 * v13];
    long long v17 = a2[1];
    *(_OWORD *)uint64_t v15 = *a2;
    *((_OWORD *)v15 + 1) = v17;
    uint64_t v9 = v15 + 32;
    long long v19 = (char *)*a1;
    int v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        long long v20 = *((_OWORD *)v18 - 1);
        *((_OWORD *)v15 - 2) = *((_OWORD *)v18 - 2);
        *((_OWORD *)v15 - 1) = v20;
        v15 -= 32;
        v18 -= 32;
      }
      while (v18 != v19);
      int v18 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v9;
    a1[2] = v16;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    long long v8 = a2[1];
    _OWORD *v7 = *a2;
    v7[1] = v8;
    uint64_t v9 = v7 + 2;
  }
  a1[1] = v9;
}

uint64_t zilch::Message::popBack(uint64_t this)
{
  uint64_t v1 = *(void *)(*(void *)this + 8);
  if (**(void **)this != v1) {
    *(void *)(*(void *)this + 8) = v1 - 32;
  }
  return this;
}

void zilch::Message::encode(zilch::ControlPoint ***this, zilch::WriteBitstream *a2, int a3)
{
  if (a3 == 4)
  {
    zilch::WriteBitstream::setUseOldBitOrder((uint64_t)a2, 0);
    zilch::WriteBitstream::put(a2, 4u, 8);
    unint64_t v5 = this;
    unint64_t v6 = a2;
    int v7 = 1;
  }
  else
  {
    if (a3 != 3)
    {
      if (a3 == 2)
      {
        zilch::WriteBitstream::setUseOldBitOrder((uint64_t)a2, 1);
        zilch::WriteBitstream::put(a2, 2u, 8);
        zilch::Message::encode_v2(this, a2);
      }
      return;
    }
    zilch::WriteBitstream::setUseOldBitOrder((uint64_t)a2, 0);
    zilch::WriteBitstream::put(a2, 3u, 8);
    unint64_t v5 = this;
    unint64_t v6 = a2;
    int v7 = 0;
  }

  zilch::Message::encode_v3_v4(v5, v6, v7);
}

void zilch::Message::encode_v2(zilch::ControlPoint ***this, zilch::WriteBitstream *a2)
{
  unint64_t v4 = (*this)[1] - **this;
  zilch::WriteBitstream::put(a2, v4 >> 5, 32);
  zilch::WriteBitstream::put(a2, 0, 1);
  unint64_t v5 = (zilch::GeoCoordinates *)zilch::ControlPoint::position(**this);
  int v33 = zilch::GeoCoordinates::x(v5);
  unsigned int v6 = zilch::Longitude::toUint32((zilch::Longitude *)&v33);
  int v7 = (zilch::GeoCoordinates *)zilch::ControlPoint::position(**this);
  int v33 = zilch::GeoCoordinates::y(v7);
  unsigned int v8 = zilch::Latitude::toUint32((zilch::Latitude *)&v33);
  zilch::WriteBitstream::put(a2, v6, 32);
  zilch::WriteBitstream::put(a2, v8, 32);
  LOWORD(v33) = zilch::ControlPoint::heading(**this);
  unsigned int v9 = zilch::Angle::toUint16((zilch::Angle *)&v33);
  zilch::WriteBitstream::put(a2, v9, 16);
  int v33 = zilch::ControlPoint::formOfWay(**this);
  unsigned int v10 = zilch::FormOfWay::type((zilch::FormOfWay *)&v33);
  zilch::WriteBitstream::put(a2, v10, 5);
  uint64_t v31 = this;
  int v33 = zilch::ControlPoint::functionalClass(**this);
  unsigned int v11 = zilch::FunctionalClass::toInteger((zilch::FunctionalClass *)&v33);
  zilch::WriteBitstream::put(a2, v11, 4);
  if ((v4 >> 5) >= 2)
  {
    uint64_t v12 = (v4 >> 5) - 1;
    uint64_t v13 = 32;
    do
    {
      char v14 = (zilch::GeoCoordinates *)zilch::ControlPoint::position((zilch::ControlPoint *)((char *)**v31 + v13));
      int v33 = zilch::GeoCoordinates::x(v14);
      unsigned int v15 = zilch::Longitude::toUint32((zilch::Longitude *)&v33);
      long long v16 = (zilch::GeoCoordinates *)zilch::ControlPoint::position((zilch::ControlPoint *)((char *)**v31 + v13));
      int v33 = zilch::GeoCoordinates::y(v16);
      unsigned int v17 = zilch::Latitude::toUint32((zilch::Latitude *)&v33);
      unsigned int v32 = v17;
      unsigned int v18 = v15 < v6;
      if (v15 >= v6) {
        unsigned int v19 = v15 - v6;
      }
      else {
        unsigned int v19 = v6 - v15;
      }
      unsigned int v20 = v8 - v17;
      BOOL v21 = v17 >= v8;
      unsigned int v22 = v17 - v8;
      unsigned int v23 = v17 < v8;
      if (v21) {
        unsigned int v24 = v22;
      }
      else {
        unsigned int v24 = v20;
      }
      zilch::WriteBitstream::put(a2, v18);
      if (HIWORD(v19)) {
        int v25 = 24;
      }
      else {
        int v25 = 16;
      }
      zilch::WriteBitstream::put(a2, HIWORD(v19) != 0);
      zilch::WriteBitstream::put(a2, v19, v25);
      zilch::WriteBitstream::put(a2, v23);
      if (HIWORD(v24)) {
        int v26 = 24;
      }
      else {
        int v26 = 16;
      }
      zilch::WriteBitstream::put(a2, HIWORD(v24) != 0);
      zilch::WriteBitstream::put(a2, v24, v26);
      unsigned int v27 = zilch::ControlPoint::type((zilch::ControlPoint *)((char *)**v31 + v13));
      zilch::WriteBitstream::put(a2, v27, 2);
      if (zilch::ControlPoint::type((zilch::ControlPoint *)((char *)**v31 + v13)) != 1)
      {
        LOWORD(v33) = zilch::ControlPoint::heading((zilch::ControlPoint *)((char *)**v31 + v13));
        unsigned int v28 = zilch::Angle::toUint16((zilch::Angle *)&v33);
        zilch::WriteBitstream::put(a2, v28, 16);
        int v33 = zilch::ControlPoint::formOfWay((zilch::ControlPoint *)((char *)**v31 + v13));
        unsigned int v29 = zilch::FormOfWay::type((zilch::FormOfWay *)&v33);
        zilch::WriteBitstream::put(a2, v29, 5);
        int v33 = zilch::ControlPoint::functionalClass((zilch::ControlPoint *)((char *)**v31 + v13));
        unsigned int v30 = zilch::FunctionalClass::toInteger((zilch::FunctionalClass *)&v33);
        zilch::WriteBitstream::put(a2, v30, 4);
      }
      v13 += 32;
      unsigned int v8 = v32;
      unsigned int v6 = v15;
      --v12;
    }
    while (v12);
  }
}

void zilch::Message::encode_v3_v4(zilch::ControlPoint ***this, zilch::WriteBitstream *a2, int a3)
{
  unint64_t v5 = (*this)[1] - **this;
  zilch::WriteBitstream::putEliasGamma(a2, v5 >> 5);
  long long __p = 0;
  long long v94 = 0;
  uint64_t v95 = 0;
  uint64_t v90 = 0;
  long long v91 = 0;
  long long v92 = 0;
  *(void *)&v87[4] = 0;
  long long v88 = 0;
  long long v89 = 0;
  unsigned int v6 = (zilch::GeoCoordinates *)zilch::ControlPoint::position(**this);
  *(void *)unint64_t v87 = zilch::GeoCoordinates::x(v6);
  int v7 = zilch::Longitude::toUint32((zilch::Longitude *)v87);
  unsigned int v8 = (zilch::GeoCoordinates *)zilch::ControlPoint::position(**this);
  *(_DWORD *)unint64_t v87 = zilch::GeoCoordinates::y(v8);
  int v9 = zilch::Latitude::toUint32((zilch::Latitude *)v87);
  unint64_t v81 = v5;
  unint64_t v82 = v5 >> 5;
  if (a3)
  {
    unsigned int v10 = (zilch::GeoCoordinates *)zilch::ControlPoint::position(**this);
    unsigned int v11 = zilch::GeoCoordinates::z(v10);
  }
  else
  {
    unsigned int v11 = 0;
  }
  uint64_t v12 = **this;
  if ((unint64_t)((*this)[1] - v12) >= 0x21)
  {
    unint64_t v13 = 1;
    do
    {
      char v14 = (zilch::GeoCoordinates *)zilch::ControlPoint::position((zilch::ControlPoint *)((char *)v12 + 32 * v13));
      *(_DWORD *)unint64_t v87 = zilch::GeoCoordinates::x(v14);
      int v15 = zilch::Longitude::toUint32((zilch::Longitude *)v87);
      long long v16 = (zilch::GeoCoordinates *)zilch::ControlPoint::position((zilch::ControlPoint *)((char *)**this + 32 * v13));
      *(_DWORD *)unint64_t v87 = zilch::GeoCoordinates::y(v16);
      int v17 = zilch::Latitude::toUint32((zilch::Latitude *)v87);
      if (a3)
      {
        unsigned int v18 = (zilch::GeoCoordinates *)zilch::ControlPoint::position((zilch::ControlPoint *)((char *)**this + 32 * v13));
        unsigned int v19 = zilch::GeoCoordinates::z(v18);
      }
      else
      {
        unsigned int v19 = 0;
      }
      if (v15 - v7 >= 0) {
        int v20 = v15 - v7;
      }
      else {
        int v20 = v7 - v15;
      }
      BOOL v21 = v94;
      if (v94 >= v95)
      {
        unsigned int v23 = (char *)__p;
        uint64_t v24 = (v94 - (unsigned char *)__p) >> 2;
        unint64_t v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 62) {
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v26 = v95 - (unsigned char *)__p;
        if ((v95 - (unsigned char *)__p) >> 1 > v25) {
          unint64_t v25 = v26 >> 1;
        }
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v25;
        }
        if (v27)
        {
          unsigned int v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v95, v27);
          unsigned int v23 = (char *)__p;
          BOOL v21 = v94;
        }
        else
        {
          unsigned int v28 = 0;
        }
        unsigned int v29 = &v28[4 * v24];
        *(_DWORD *)unsigned int v29 = v20;
        unsigned int v22 = v29 + 4;
        while (v21 != v23)
        {
          int v30 = *((_DWORD *)v21 - 1);
          v21 -= 4;
          *((_DWORD *)v29 - 1) = v30;
          v29 -= 4;
        }
        long long __p = v29;
        long long v94 = v22;
        uint64_t v95 = &v28[4 * v27];
        if (v23) {
          operator delete(v23);
        }
      }
      else
      {
        *(_DWORD *)long long v94 = v20;
        unsigned int v22 = v21 + 4;
      }
      long long v94 = v22;
      if (v17 - v9 >= 0) {
        int v31 = v17 - v9;
      }
      else {
        int v31 = v9 - v17;
      }
      unsigned int v32 = v91;
      if (v91 >= v92)
      {
        uint64_t v34 = (char *)v90;
        uint64_t v35 = (v91 - (unsigned char *)v90) >> 2;
        unint64_t v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) >> 62) {
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v37 = v92 - (unsigned char *)v90;
        if ((v92 - (unsigned char *)v90) >> 1 > v36) {
          unint64_t v36 = v37 >> 1;
        }
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v38 = v36;
        }
        if (v38)
        {
          unsigned int v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v92, v38);
          uint64_t v34 = (char *)v90;
          unsigned int v32 = v91;
        }
        else
        {
          unsigned int v39 = 0;
        }
        uint64_t v40 = &v39[4 * v35];
        *(_DWORD *)uint64_t v40 = v31;
        int v33 = v40 + 4;
        while (v32 != v34)
        {
          int v41 = *((_DWORD *)v32 - 1);
          v32 -= 4;
          *((_DWORD *)v40 - 1) = v41;
          v40 -= 4;
        }
        uint64_t v90 = v40;
        long long v91 = v33;
        long long v92 = &v39[4 * v38];
        if (v34) {
          operator delete(v34);
        }
      }
      else
      {
        *(_DWORD *)long long v91 = v31;
        int v33 = v32 + 4;
      }
      long long v91 = v33;
      if (a3)
      {
        if ((int)(v19 - v11) >= 0) {
          unsigned int v42 = v19 - v11;
        }
        else {
          unsigned int v42 = v11 - v19;
        }
        long long v43 = v88;
        if (v88 >= (unsigned int *)v89)
        {
          unint64_t v45 = *(unsigned int **)&v87[4];
          uint64_t v46 = ((uint64_t)v88 - *(void *)&v87[4]) >> 2;
          unint64_t v47 = v46 + 1;
          if ((unint64_t)(v46 + 1) >> 62) {
            std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v48 = (uint64_t)&v89[-*(void *)&v87[4]];
          if ((uint64_t)&v89[-*(void *)&v87[4]] >> 1 > v47) {
            unint64_t v47 = v48 >> 1;
          }
          if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v49 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v49 = v47;
          }
          if (v49)
          {
            uint64_t v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v89, v49);
            unint64_t v45 = *(unsigned int **)&v87[4];
            long long v43 = v88;
          }
          else
          {
            uint64_t v50 = 0;
          }
          unint64_t v51 = (unsigned int *)&v50[4 * v46];
          *unint64_t v51 = v42;
          uint64_t v44 = v51 + 1;
          while (v43 != v45)
          {
            unsigned int v52 = *--v43;
            *--unint64_t v51 = v52;
          }
          *(void *)&v87[4] = v51;
          long long v88 = v44;
          long long v89 = &v50[4 * v49];
          if (v45) {
            operator delete(v45);
          }
        }
        else
        {
          unsigned int *v88 = v42;
          uint64_t v44 = v43 + 1;
        }
        long long v88 = v44;
      }
      unint64_t v13 = (v13 + 1);
      uint64_t v12 = **this;
      unsigned int v11 = v19;
      int v9 = v17;
      int v7 = v15;
    }
    while (v13 < ((*this)[1] - v12) >> 5);
  }
  int v85 = zilch::WriteBitstream::computeOptimalRiceBits((zilch::WriteBitstream *)__p, (const unsigned int *)((v94 - (unsigned char *)__p) >> 2));
  int v84 = zilch::WriteBitstream::computeOptimalRiceBits((zilch::WriteBitstream *)v90, (const unsigned int *)((v91 - (unsigned char *)v90) >> 2));
  if (a3) {
    int v83 = zilch::WriteBitstream::computeOptimalRiceBits(*(zilch::WriteBitstream **)&v87[4], (const unsigned int *)(((uint64_t)v88 - *(void *)&v87[4]) >> 2));
  }
  else {
    int v83 = 0;
  }
  zilch::WriteBitstream::putEliasGamma(a2, v85 + 1);
  zilch::WriteBitstream::putEliasGamma(a2, v84 + 1);
  if (a3) {
    zilch::WriteBitstream::putEliasGamma(a2, v83 + 1);
  }
  uint64_t v53 = (zilch::GeoCoordinates *)zilch::ControlPoint::position(**this);
  *(_DWORD *)unint64_t v87 = zilch::GeoCoordinates::x(v53);
  unsigned int v54 = zilch::Longitude::toUint32((zilch::Longitude *)v87);
  long long v55 = (zilch::GeoCoordinates *)zilch::ControlPoint::position(**this);
  *(_DWORD *)unint64_t v87 = zilch::GeoCoordinates::y(v55);
  unsigned int v56 = zilch::Latitude::toUint32((zilch::Latitude *)v87);
  if (a3)
  {
    unsigned int v57 = (zilch::GeoCoordinates *)zilch::ControlPoint::position(**this);
    int v58 = zilch::GeoCoordinates::z(v57);
  }
  else
  {
    int v58 = 0;
  }
  zilch::WriteBitstream::put(a2, v54, 32);
  zilch::WriteBitstream::put(a2, v56, 32);
  if (a3)
  {
    zilch::WriteBitstream::put(a2, v58 >> 31);
    if (v58 >= 0) {
      unsigned int v59 = v58;
    }
    else {
      unsigned int v59 = -v58;
    }
    zilch::WriteBitstream::put(a2, v59, 32);
  }
  *(_WORD *)unint64_t v87 = zilch::ControlPoint::heading(**this);
  double v61 = zilch::Angle::toDegrees((zilch::Angle *)v87, v60);
  zilch::WriteBitstream::put(a2, rint(v61), 9);
  *(_DWORD *)unint64_t v87 = zilch::ControlPoint::formOfWay(**this);
  unsigned int v62 = zilch::FormOfWay::type((zilch::FormOfWay *)v87);
  zilch::WriteBitstream::put(a2, v62, 5);
  *(_DWORD *)unint64_t v87 = zilch::ControlPoint::functionalClass(**this);
  unsigned int v63 = zilch::FunctionalClass::toInteger((zilch::FunctionalClass *)v87);
  zilch::WriteBitstream::put(a2, v63, 4);
  if (v82 >= 2)
  {
    uint64_t v64 = (v81 >> 5) - 1;
    uint64_t v65 = 32;
    do
    {
      uint64_t v66 = (zilch::GeoCoordinates *)zilch::ControlPoint::position((zilch::ControlPoint *)((char *)**this + v65));
      *(_DWORD *)unint64_t v87 = zilch::GeoCoordinates::x(v66);
      unsigned int v67 = zilch::Longitude::toUint32((zilch::Longitude *)v87);
      long long v68 = (zilch::GeoCoordinates *)zilch::ControlPoint::position((zilch::ControlPoint *)((char *)**this + v65));
      *(_DWORD *)unint64_t v87 = zilch::GeoCoordinates::y(v68);
      int v69 = zilch::Latitude::toUint32((zilch::Latitude *)v87);
      if (a3)
      {
        long long v70 = (zilch::GeoCoordinates *)zilch::ControlPoint::position((zilch::ControlPoint *)((char *)**this + v65));
        unsigned int v71 = zilch::GeoCoordinates::z(v70);
      }
      else
      {
        unsigned int v71 = 0;
      }
      int v72 = v67 - v54;
      zilch::WriteBitstream::put(a2, v72 >> 31);
      if (v72 >= 0) {
        unsigned int v73 = v72;
      }
      else {
        unsigned int v73 = -v72;
      }
      zilch::WriteBitstream::putRice(a2, v73, v85);
      zilch::WriteBitstream::put(a2, (v69 - v56) >> 31);
      if ((int)(v69 - v56) >= 0) {
        unsigned int v74 = v69 - v56;
      }
      else {
        unsigned int v74 = v56 - v69;
      }
      zilch::WriteBitstream::putRice(a2, v74, v84);
      if (a3)
      {
        zilch::WriteBitstream::put(a2, (v71 - v58) >> 31);
        if ((int)(v71 - v58) >= 0) {
          unsigned int v75 = v71 - v58;
        }
        else {
          unsigned int v75 = v58 - v71;
        }
        zilch::WriteBitstream::putRice(a2, v75, v83);
      }
      unsigned int v76 = zilch::ControlPoint::type((zilch::ControlPoint *)((char *)**this + v65));
      zilch::WriteBitstream::put(a2, v76, 2);
      if (zilch::ControlPoint::type((zilch::ControlPoint *)((char *)**this + v65)) != 1)
      {
        *(_WORD *)unint64_t v87 = zilch::ControlPoint::heading((zilch::ControlPoint *)((char *)**this + v65));
        double v78 = zilch::Angle::toDegrees((zilch::Angle *)v87, v77);
        zilch::WriteBitstream::put(a2, rint(v78), 9);
        *(_DWORD *)unint64_t v87 = zilch::ControlPoint::formOfWay((zilch::ControlPoint *)((char *)**this + v65));
        unsigned int v79 = zilch::FormOfWay::type((zilch::FormOfWay *)v87);
        zilch::WriteBitstream::put(a2, v79, 5);
        *(_DWORD *)unint64_t v87 = zilch::ControlPoint::functionalClass((zilch::ControlPoint *)((char *)**this + v65));
        unsigned int v80 = zilch::FunctionalClass::toInteger((zilch::FunctionalClass *)v87);
        zilch::WriteBitstream::put(a2, v80, 4);
      }
      v65 += 32;
      int v58 = v71;
      unsigned int v56 = v69;
      unsigned int v54 = v67;
      --v64;
    }
    while (v64);
  }
  if (*(void *)&v87[4])
  {
    long long v88 = *(unsigned int **)&v87[4];
    operator delete(*(void **)&v87[4]);
  }
  if (v90)
  {
    long long v91 = (char *)v90;
    operator delete(v90);
  }
  if (__p)
  {
    long long v94 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1890E5360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a19) {
    operator delete(a19);
  }
  if (a22) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<zilch::ControlPoint>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 5;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 32 * a2;
    }
  }
  else
  {
    std::vector<zilch::ControlPoint>::__append((void **)a1, a2 - v2);
  }
}

uint64_t zilch::Message::decode_v2(void ***this, zilch::ReadBitstream *a2)
{
  zilch::ReadBitstream::setUseOldBitOrder((uint64_t)a2, 1);
  unsigned int v4 = zilch::ReadBitstream::get(a2, 32);
  zilch::ReadBitstream::get(a2, 1);
  zilch::ControlPoint::ControlPoint((zilch::ControlPoint *)&v82);
  uint64_t v5 = zilch::ReadBitstream::get(a2, 32);
  uint64_t v6 = zilch::ReadBitstream::get(a2, 32);
  zilch::ControlPoint::setType(&v82, 0);
  unsigned int v8 = zilch::Longitude::fromUint32((zilch::Longitude *)v5, v7);
  unsigned int v10 = zilch::Latitude::fromUint32((zilch::Latitude *)v6, v9);
  v11.var0 = v8;
  v12.var0 = v10;
  zilch::GeoCoordinates::GeoCoordinates((uint64_t)&v81, v11, v12);
  zilch::ControlPoint::setPosition((uint64_t)&v82, &v81);
  unsigned __int16 v13 = zilch::ReadBitstream::get(a2, 16);
  __int16 v15 = zilch::Angle::fromUint16((zilch::Angle *)v13, v14);
  zilch::ControlPoint::setHeading((uint64_t)&v82, v15);
  int v16 = zilch::ReadBitstream::get(a2, 5);
  zilch::FormOfWay::FormOfWay(&v80, v16);
  v17.var0 = v80.var0;
  zilch::ControlPoint::setFormOfWay((FormOfWay *)&v82, v17);
  unsigned int v18 = zilch::ReadBitstream::get(a2, 4);
  zilch::FunctionalClass::FunctionalClass(&v79.var0, v18);
  v19.var0 = v79.var0;
  zilch::ControlPoint::setFunctionalClass((FunctionalClass *)&v82, v19);
  int v20 = *this;
  BOOL v21 = (*this)[1];
  unint64_t v22 = (unint64_t)(*this)[2];
  if ((unint64_t)v21 >= v22)
  {
    uint64_t v25 = ((char *)v21 - (unsigned char *)*v20) >> 5;
    unint64_t v26 = v25 + 1;
    if ((unint64_t)(v25 + 1) >> 59) {
LABEL_56:
    }
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    uint64_t v27 = v22 - (void)*v20;
    if (v27 >> 4 > v26) {
      unint64_t v26 = v27 >> 4;
    }
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v28 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v28 = v26;
    }
    if (v28) {
      unsigned int v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::ControlPoint>>((uint64_t)(*this + 2), v28);
    }
    else {
      unsigned int v29 = 0;
    }
    int v30 = &v29[32 * v25];
    int v31 = &v29[32 * v28];
    long long v32 = v83;
    *(_OWORD *)int v30 = v82;
    *((_OWORD *)v30 + 1) = v32;
    uint64_t v24 = v30 + 32;
    uint64_t v34 = (char *)*v20;
    int v33 = (char *)v20[1];
    if (v33 != *v20)
    {
      do
      {
        long long v35 = *((_OWORD *)v33 - 1);
        *((_OWORD *)v30 - 2) = *((_OWORD *)v33 - 2);
        *((_OWORD *)v30 - 1) = v35;
        v30 -= 32;
        v33 -= 32;
      }
      while (v33 != v34);
      int v33 = (char *)*v20;
    }
    *int v20 = v30;
    v20[1] = v24;
    v20[2] = v31;
    if (v33) {
      operator delete(v33);
    }
  }
  else
  {
    long long v23 = v83;
    *BOOL v21 = v82;
    v21[1] = v23;
    uint64_t v24 = v21 + 2;
  }
  v20[1] = v24;
  int v36 = *((unsigned __int8 *)a2 + 36);
  if (v4 >= 2 && !*((unsigned char *)a2 + 36))
  {
    unsigned int v37 = 1;
    do
    {
      int v38 = zilch::ReadBitstream::get(a2, 1);
      if (zilch::ReadBitstream::get(a2, 1)) {
        int v39 = 24;
      }
      else {
        int v39 = 16;
      }
      int v40 = zilch::ReadBitstream::get(a2, v39);
      if (v38) {
        int v41 = -v40;
      }
      else {
        int v41 = v40;
      }
      uint64_t v5 = (v41 + v5);
      int v42 = zilch::ReadBitstream::get(a2, 1);
      if (zilch::ReadBitstream::get(a2, 1)) {
        int v43 = 24;
      }
      else {
        int v43 = 16;
      }
      int v44 = zilch::ReadBitstream::get(a2, v43);
      if (v42) {
        int v46 = -v44;
      }
      else {
        int v46 = v44;
      }
      uint64_t v6 = (v46 + v6);
      unsigned int v47 = zilch::Longitude::fromUint32((zilch::Longitude *)v5, v45);
      unsigned int v49 = zilch::Latitude::fromUint32((zilch::Latitude *)v6, v48);
      v50.var0 = v47;
      v51.var0 = v49;
      zilch::GeoCoordinates::GeoCoordinates((uint64_t)&v81, v50, v51);
      zilch::ControlPoint::setPosition((uint64_t)&v82, &v81);
      int v52 = zilch::ReadBitstream::get(a2, 2);
      zilch::ControlPoint::setType(&v82, v52);
      if (!zilch::ControlPoint::dummy((zilch::ControlPoint *)&v82))
      {
        unsigned __int16 v53 = zilch::ReadBitstream::get(a2, 16);
        __int16 v55 = zilch::Angle::fromUint16((zilch::Angle *)v53, v54);
        zilch::ControlPoint::setHeading((uint64_t)&v82, v55);
        int v56 = zilch::ReadBitstream::get(a2, 5);
        zilch::FormOfWay::FormOfWay(&v78, v56);
        v57.var0 = v78.var0;
        zilch::ControlPoint::setFormOfWay((FormOfWay *)&v82, v57);
        unsigned int v58 = zilch::ReadBitstream::get(a2, 4);
        zilch::FunctionalClass::FunctionalClass(&v77.var0, v58);
        v59.var0 = v77.var0;
        zilch::ControlPoint::setFunctionalClass((FunctionalClass *)&v82, v59);
      }
      double v60 = *this;
      double v61 = (*this)[1];
      unint64_t v62 = (unint64_t)(*this)[2];
      if ((unint64_t)v61 >= v62)
      {
        uint64_t v65 = ((char *)v61 - (unsigned char *)*v60) >> 5;
        unint64_t v66 = v65 + 1;
        if ((unint64_t)(v65 + 1) >> 59) {
          goto LABEL_56;
        }
        uint64_t v67 = v62 - (void)*v60;
        if (v67 >> 4 > v66) {
          unint64_t v66 = v67 >> 4;
        }
        if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v68 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v68 = v66;
        }
        if (v68) {
          int v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::ControlPoint>>((uint64_t)(*this + 2), v68);
        }
        else {
          int v69 = 0;
        }
        long long v70 = &v69[32 * v65];
        long long v71 = v83;
        *(_OWORD *)long long v70 = v82;
        *((_OWORD *)v70 + 1) = v71;
        unsigned int v73 = (char *)*v60;
        int v72 = (char *)v60[1];
        unsigned int v74 = v70;
        if (v72 != *v60)
        {
          do
          {
            long long v75 = *((_OWORD *)v72 - 1);
            *((_OWORD *)v74 - 2) = *((_OWORD *)v72 - 2);
            *((_OWORD *)v74 - 1) = v75;
            v74 -= 32;
            v72 -= 32;
          }
          while (v72 != v73);
          int v72 = (char *)*v60;
        }
        uint64_t v64 = v70 + 32;
        *double v60 = v74;
        v60[1] = v70 + 32;
        v60[2] = &v69[32 * v68];
        if (v72) {
          operator delete(v72);
        }
      }
      else
      {
        long long v63 = v83;
        *double v61 = v82;
        v61[1] = v63;
        uint64_t v64 = v61 + 2;
      }
      v60[1] = v64;
      ++v37;
      int v36 = *((unsigned __int8 *)a2 + 36);
    }
    while (v37 < v4 && !*((unsigned char *)a2 + 36));
  }
  if (!v36) {
    return 0;
  }
  (*this)[1] = **this;
  return 1;
}

uint64_t zilch::Message::decode_v3_v4(void ***this, zilch::ReadBitstream *a2, int a3)
{
  zilch::ReadBitstream::setUseOldBitOrder((uint64_t)a2, 0);
  unsigned int v87 = 0;
  uint64_t result = zilch::ReadBitstream::getEliasGamma(a2, &v87);
  if (!result)
  {
    unsigned int v86 = 0;
    uint64_t result = zilch::ReadBitstream::getEliasGamma(a2, &v86);
    if (!result)
    {
      if (--v86 > 0x20) {
        return 1;
      }
      unsigned int v85 = 0;
      uint64_t result = zilch::ReadBitstream::getEliasGamma(a2, &v85);
      if (!result)
      {
        if (--v85 > 0x20) {
          return 1;
        }
        unsigned int v84 = 0;
        if (a3)
        {
          uint64_t result = zilch::ReadBitstream::getEliasGamma(a2, &v84);
          if (result) {
            return result;
          }
          if (--v84 > 0x20) {
            return 1;
          }
        }
        zilch::ControlPoint::ControlPoint((zilch::ControlPoint *)v83);
        uint64_t v7 = zilch::ReadBitstream::get(a2, 32);
        uint64_t v8 = zilch::ReadBitstream::get(a2, 32);
        if (a3)
        {
          int v9 = zilch::ReadBitstream::get(a2);
          int v10 = zilch::ReadBitstream::get(a2, 32);
          if (v9) {
            int v11 = -v10;
          }
          else {
            int v11 = v10;
          }
          zilch::ControlPoint::setType(v83, 0);
          unsigned int v13 = zilch::Longitude::fromUint32((zilch::Longitude *)v7, v12);
          unsigned int v15 = zilch::Latitude::fromUint32((zilch::Latitude *)v8, v14);
          v16.var0 = v13;
          v17.var0 = v15;
          zilch::GeoCoordinates::GeoCoordinates((uint64_t)&v79, v16, v17, v11);
        }
        else
        {
          zilch::ControlPoint::setType(v83, 0);
          unsigned int v19 = zilch::Longitude::fromUint32((zilch::Longitude *)v7, v18);
          unsigned int v21 = zilch::Latitude::fromUint32((zilch::Latitude *)v8, v20);
          v22.var0 = v19;
          v23.var0 = v21;
          zilch::GeoCoordinates::GeoCoordinates((uint64_t)&v79, v22, v23);
          int v11 = 0;
        }
        zilch::ControlPoint::setPosition((uint64_t)v83, (const GeoCoordinates *)&v79);
        uint64_t v24 = (zilch::Angle *)zilch::ReadBitstream::get(a2, 9);
        __int16 v25 = zilch::Angle::fromDegrees(v24, (double)v24);
        zilch::ControlPoint::setHeading((uint64_t)v83, v25);
        int v26 = zilch::ReadBitstream::get(a2, 5);
        zilch::FormOfWay::FormOfWay(&v82, v26);
        v27.var0 = v82.var0;
        zilch::ControlPoint::setFormOfWay((FormOfWay *)v83, v27);
        unsigned int v28 = zilch::ReadBitstream::get(a2, 4);
        zilch::FunctionalClass::FunctionalClass(&v81.var0, v28);
        v29.var0 = v81.var0;
        zilch::ControlPoint::setFunctionalClass((FunctionalClass *)v83, v29);
        std::vector<zilch::ControlPoint>::push_back[abi:ne180100](*this, v83);
        int v30 = *((unsigned __int8 *)a2 + 36);
        if (v87 >= 2 && !*((unsigned char *)a2 + 36))
        {
          unsigned int v31 = 1;
          do
          {
            zilch::ControlPoint::ControlPoint((zilch::ControlPoint *)&v79);
            int v32 = zilch::ReadBitstream::get(a2, 1);
            int Rice = zilch::ReadBitstream::getRice(a2, v86);
            if (v32) {
              int v34 = -Rice;
            }
            else {
              int v34 = Rice;
            }
            uint64_t v7 = (v34 + v7);
            int v35 = zilch::ReadBitstream::get(a2, 1);
            int v36 = zilch::ReadBitstream::getRice(a2, v85);
            if (v35) {
              int v38 = -v36;
            }
            else {
              int v38 = v36;
            }
            uint64_t v8 = (v38 + v8);
            if (a3)
            {
              int v39 = zilch::ReadBitstream::get(a2, 1);
              int v40 = zilch::ReadBitstream::getRice(a2, v84);
              if (v39) {
                int v42 = -v40;
              }
              else {
                int v42 = v40;
              }
              v11 += v42;
              unsigned int v43 = zilch::Longitude::fromUint32((zilch::Longitude *)v7, v41);
              unsigned int v45 = zilch::Latitude::fromUint32((zilch::Latitude *)v8, v44);
              v46.var0 = v43;
              v47.var0 = v45;
              zilch::GeoCoordinates::GeoCoordinates((uint64_t)&v78, v46, v47, v11);
            }
            else
            {
              unsigned int v48 = zilch::Longitude::fromUint32((zilch::Longitude *)v7, v37);
              unsigned int v50 = zilch::Latitude::fromUint32((zilch::Latitude *)v8, v49);
              v51.var0 = v48;
              v52.var0 = v50;
              zilch::GeoCoordinates::GeoCoordinates((uint64_t)&v78, v51, v52);
              int v11 = 0;
            }
            zilch::ControlPoint::setPosition((uint64_t)&v79, &v78);
            int v53 = zilch::ReadBitstream::get(a2, 2);
            zilch::ControlPoint::setType(&v79, v53);
            if (!zilch::ControlPoint::dummy((zilch::ControlPoint *)&v79))
            {
              unsigned __int16 v54 = (zilch::Angle *)zilch::ReadBitstream::get(a2, 9);
              __int16 v55 = zilch::Angle::fromDegrees(v54, (double)v54);
              zilch::ControlPoint::setHeading((uint64_t)&v79, v55);
              int v56 = zilch::ReadBitstream::get(a2, 5);
              zilch::FormOfWay::FormOfWay(&v77, v56);
              v57.var0 = v77.var0;
              zilch::ControlPoint::setFormOfWay((FormOfWay *)&v79, v57);
              unsigned int v58 = zilch::ReadBitstream::get(a2, 4);
              zilch::FunctionalClass::FunctionalClass(&v76.var0, v58);
              v59.var0 = v76.var0;
              zilch::ControlPoint::setFunctionalClass((FunctionalClass *)&v79, v59);
            }
            double v60 = *this;
            double v61 = (char *)(*this)[1];
            unint64_t v62 = (char *)(*this)[2];
            if (v61 >= v62)
            {
              uint64_t v65 = (v61 - (unsigned char *)*v60) >> 5;
              unint64_t v66 = v65 + 1;
              if ((unint64_t)(v65 + 1) >> 59) {
                std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v67 = v62 - (unsigned char *)*v60;
              if (v67 >> 4 > v66) {
                unint64_t v66 = v67 >> 4;
              }
              if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFE0) {
                unint64_t v68 = 0x7FFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v68 = v66;
              }
              if (v68) {
                int v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::ControlPoint>>((uint64_t)(*this + 2), v68);
              }
              else {
                int v69 = 0;
              }
              long long v70 = &v69[32 * v65];
              long long v71 = v80;
              *(_OWORD *)long long v70 = v79;
              *((_OWORD *)v70 + 1) = v71;
              unsigned int v73 = (char *)*v60;
              int v72 = (char *)v60[1];
              unsigned int v74 = v70;
              if (v72 != *v60)
              {
                do
                {
                  long long v75 = *((_OWORD *)v72 - 1);
                  *((_OWORD *)v74 - 2) = *((_OWORD *)v72 - 2);
                  *((_OWORD *)v74 - 1) = v75;
                  v74 -= 32;
                  v72 -= 32;
                }
                while (v72 != v73);
                int v72 = (char *)*v60;
              }
              uint64_t v64 = v70 + 32;
              *double v60 = v74;
              v60[1] = v70 + 32;
              v60[2] = &v69[32 * v68];
              if (v72) {
                operator delete(v72);
              }
            }
            else
            {
              long long v63 = v80;
              *(_OWORD *)double v61 = v79;
              *((_OWORD *)v61 + 1) = v63;
              uint64_t v64 = v61 + 32;
            }
            v60[1] = v64;
            ++v31;
            int v30 = *((unsigned __int8 *)a2 + 36);
          }
          while (v31 < v87 && !*((unsigned char *)a2 + 36));
        }
        if (v30)
        {
          (*this)[1] = **this;
          return 1;
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t zilch::ReadBitstream::get(zilch::ReadBitstream *this)
{
  unint64_t v1 = *((void *)this + 3);
  if (v1 >= *((void *)this + 1))
  {
    uint64_t v3 = 0;
    *((unsigned char *)this + 36) = 1;
  }
  else
  {
    int v2 = *((_DWORD *)this + 8);
    uint64_t v3 = (*(_DWORD *)(*(void *)this + 4 * v1) >> v2) & 1;
    *((_DWORD *)this + 8) = v2 + 1;
    if (v2 >= 31)
    {
      *((_DWORD *)this + 8) = 0;
      *((void *)this + 3) = v1 + 1;
    }
  }
  return v3;
}

std::string *zilch::Message::toString@<X0>(uint64_t **this@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(a2, "Message(");
  uint64_t v5 = **this;
  if ((((*this)[1] - v5) & 0x1FFFFFFFE0) != 0)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      zilch::ControlPoint::toString((zilch::ControlPoint *)(v5 + v6), __p, v4);
      if ((v13 & 0x80u) == 0) {
        uint64_t v8 = __p;
      }
      else {
        uint64_t v8 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        std::string::size_type v9 = v13;
      }
      else {
        std::string::size_type v9 = (std::string::size_type)__p[1];
      }
      std::string::append(a2, (const std::string::value_type *)v8, v9);
      if ((char)v13 < 0) {
        operator delete(__p[0]);
      }
      ++v7;
      uint64_t v5 = **this;
      unint64_t v10 = (*this)[1] - v5;
      if (v7 < (v10 >> 5))
      {
        std::string::append(a2, ",");
        uint64_t v5 = **this;
        unint64_t v10 = (*this)[1] - v5;
      }
      v6 += 32;
    }
    while (v7 < (v10 >> 5));
  }
  return std::string::append(a2, ")");
}

void sub_1890E5E98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

void zilch_newZilchMessage()
{
}

void sub_1890E5F74(_Unwind_Exception *a1)
{
  MEMORY[0x18C11F580](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t *zilch_deleteZilchMessage(uint64_t *result)
{
  if (result)
  {
    uint64_t v1 = *result;
    *uint64_t result = 0;
    if (v1) {
      std::default_delete<zilch::MessageData>::operator()[abi:ne180100]((uint64_t)result, v1);
    }
    JUMPOUT(0x18C11F580);
  }
  return result;
}

uint64_t zilch_getZilchPointSize_ints()
{
  return 6;
}

BOOL zilch_getZilchPoint(uint64_t **a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v4 = **a1;
  BOOL v6 = a4 > 5 && ((unint64_t)((*a1)[1] - v4) >> 5) > a3;
  if (v6)
  {
    uint64_t v8 = (zilch::ControlPoint *)(v4 + 32 * a3);
    std::string::size_type v9 = (zilch::GeoCoordinates *)zilch::ControlPoint::position(v8);
    int v16 = zilch::GeoCoordinates::y(v9);
    *(_DWORD *)a2 = llround(zilch::Latitude::toDegrees((zilch::Latitude *)&v16, v10) * 1000000.0);
    int v11 = (zilch::GeoCoordinates *)zilch::ControlPoint::position(v8);
    int v16 = zilch::GeoCoordinates::x(v11);
    *(_DWORD *)(a2 + 4) = llround(zilch::Longitude::toDegrees((zilch::Longitude *)&v16, v12) * 1000000.0);
    if (zilch::ControlPoint::dummy(v8))
    {
      int v13 = 0;
      *(void *)(a2 + 8) = 0xFFFFFFFFLL;
      *(_DWORD *)(a2 + 16) = 0;
    }
    else
    {
      LOWORD(v16) = zilch::ControlPoint::heading(v8);
      *(_DWORD *)(a2 + 8) = llround(zilch::Angle::toDegrees((zilch::Angle *)&v16, v14));
      int v16 = zilch::ControlPoint::formOfWay(v8);
      *(_DWORD *)(a2 + 12) = zilch::FormOfWay::type((zilch::FormOfWay *)&v16);
      int v16 = zilch::ControlPoint::functionalClass(v8);
      *(_DWORD *)(a2 + 16) = zilch::FunctionalClass::toInteger((zilch::FunctionalClass *)&v16);
      int v13 = zilch::ControlPoint::uturnFlag(v8);
    }
    *(_DWORD *)(a2 + 20) = v13;
  }
  return v6;
}

uint64_t zilch_addZilchPoint(zilch::Latitude *a1, int *a2)
{
  uint64_t v4 = (zilch::Longitude *)zilch::Latitude::fromDegrees(a1, (double)*a2 / 1000000.0);
  unsigned int v5 = v4;
  v6.var0 = zilch::Longitude::fromDegrees(v4, (double)a2[1] / 1000000.0);
  v7.var0 = v5;
  zilch::GeoCoordinates::GeoCoordinates((uint64_t)v18, v6, v7);
  uint64_t v8 = (zilch::Angle *)zilch::ControlPoint::ControlPoint((zilch::ControlPoint *)v17, (const zilch::GeoCoordinates *)v18);
  int v9 = a2[2];
  if (v9 > 0x168)
  {
    int v13 = 1;
  }
  else
  {
    __int16 v10 = zilch::Angle::fromDegrees(v8, (double)v9);
    zilch::ControlPoint::setHeading((uint64_t)v17, v10);
    zilch::FormOfWay::FormOfWay(&v16, a2[3]);
    v11.var0 = v16.var0;
    zilch::ControlPoint::setFormOfWay(v17, v11);
    zilch::FunctionalClass::FunctionalClass(&v15, a2[4]);
    v12.var0 = v15.var0;
    zilch::ControlPoint::setFunctionalClass((FunctionalClass *)v17, v12);
    zilch::ControlPoint::setUTurnFlag((uint64_t)v17, a2[5]);
    int v13 = 0;
  }
  zilch::ControlPoint::setType(v17, v13);
  zilch::Message::addPoint((void ***)a1, (const zilch::ControlPoint *)v17);
  return (*(void *)(*(void *)a1 + 8) - **(void **)a1) >> 5;
}

uint64_t zilch_getNbrPoints(uint64_t a1)
{
  return (*(void *)(*(void *)a1 + 8) - **(void **)a1) >> 5;
}

void zilch_serialize()
{
  zilch::WriteBitstream::WriteBitstream((zilch::WriteBitstream *)v0);
}

void sub_1890E62EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  zilch::WriteBitstream::~WriteBitstream((zilch::WriteBitstream *)va);
  _Unwind_Resume(a1);
}

uint64_t zilchToJson_c(char *a1, size_t __sz, uint64_t a3, uint64_t a4)
{
  if (a1 && __sz && a3 && a4)
  {
    Longitude v6 = 0;
    Latitude v7 = 0;
    uint64_t v8 = 0;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<char const*,char const*>((char *)&v6, a1, &a1[__sz], __sz);
    if (v6 != v7)
    {
      zilch::ReadBitstream::ReadBitstream((uint64_t)v5, v6, v7 - v6);
      operator new();
    }
    if (v6)
    {
      Latitude v7 = v6;
      operator delete(v6);
    }
  }
  return 0;
}

void sub_1890E6450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v14 = a12;
  a12 = 0;
  if (v14) {
    std::default_delete<zilch::MessageData>::operator()[abi:ne180100]((uint64_t)&a12, v14);
  }
  FunctionalClass v15 = *(void **)(v12 - 56);
  if (v15)
  {
    *(void *)(v12 - 48) = v15;
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<zilch::ControlPoint>::__init_with_size[abi:ne180100]<zilch::ControlPoint*,zilch::ControlPoint*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    Longitude v6 = result;
    uint64_t result = std::vector<zilch::ControlPoint>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1890E64F0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<zilch::ControlPoint>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::ControlPoint>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void std::default_delete<zilch::MessageData>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    int v2 = *(void **)a2;
    if (*(void *)a2)
    {
      *(void *)(a2 + 8) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x18C11F580);
  }
}

char *std::vector<zilch::ControlPoint>::__assign_with_size[abi:ne180100]<zilch::ControlPoint*,zilch::ControlPoint*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  int v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 5)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 59) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    if (v8 >> 4 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<zilch::ControlPoint>::__vallocate[abi:ne180100](v7, v11);
    int v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    int v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      unsigned int v18 = v9;
      unsigned int v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 5;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  FormOfWay v16 = &__src[32 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    int v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    unsigned int v18 = v9;
    unsigned int v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  zilch::ControlPoint *v12 = &v9[v17];
  return result;
}

void std::vector<zilch::ControlPoint>::__append(void **a1, unint64_t a2)
{
  Longitude v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unsigned int v5 = v6;
  uint64_t v7 = *(zilch::ControlPoint **)(v4 - 8);
  if (a2 <= (v6 - (unsigned char *)v7) >> 5)
  {
    if (a2)
    {
      uint64_t v14 = 32 * a2;
      unint64_t v15 = (zilch::ControlPoint *)((char *)v7 + 32 * a2);
      do
      {
        zilch::ControlPoint::ControlPoint(v7);
        uint64_t v7 = (zilch::ControlPoint *)((char *)v7 + 32);
        v14 -= 32;
      }
      while (v14);
      uint64_t v7 = v15;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (zilch::ControlPoint *)*a1;
    unint64_t v9 = a2 + (v8 >> 5);
    if (v9 >> 59) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 5;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 4 > v9) {
      unint64_t v9 = v11 >> 4;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      int v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::ControlPoint>>(v4, v12);
    }
    else {
      int v13 = 0;
    }
    FormOfWay v16 = (zilch::ControlPoint *)&v13[32 * v10];
    size_t v17 = &v13[32 * v12];
    uint64_t v18 = 32 * a2;
    unsigned int v19 = v16;
    unsigned int v20 = (char *)v16 + 32 * a2;
    do
    {
      unsigned int v19 = (zilch::ControlPoint *)(zilch::ControlPoint::ControlPoint(v19) + 32);
      v18 -= 32;
    }
    while (v18);
    Longitude v22 = (char *)*a1;
    unsigned int v21 = (char *)a1[1];
    if (v21 != *a1)
    {
      do
      {
        long long v23 = *((_OWORD *)v21 - 1);
        *((_OWORD *)v16 - 2) = *((_OWORD *)v21 - 2);
        *((_OWORD *)v16 - 1) = v23;
        FormOfWay v16 = (zilch::ControlPoint *)((char *)v16 - 32);
        v21 -= 32;
      }
      while (v21 != v22);
      unsigned int v21 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v20;
    a1[2] = v17;
    if (v21)
    {
      operator delete(v21);
    }
  }
}

void sub_1890E67FC(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned char>::__init_with_size[abi:ne180100]<char const*,char const*>(char *result, char *a2, char *a3, size_t __sz)
{
  if (__sz)
  {
    Longitude v6 = result;
    uint64_t result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = (unsigned char *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      char v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_1890E6878(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t zilch::ReadBitstream::ReadBitstream(uint64_t this, const unsigned __int8 *a2, uint64_t a3)
{
  *(void *)this = a2;
  *(void *)(this + 8) = (unint64_t)(a3 + 3) >> 2;
  *(unsigned char *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(unsigned char *)(this + 36) = 0;
  return this;
}

{
  *(void *)this = a2;
  *(void *)(this + 8) = (unint64_t)(a3 + 3) >> 2;
  *(unsigned char *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(unsigned char *)(this + 36) = 0;
  return this;
}

uint64_t zilch::ReadBitstream::setUseOldBitOrder(uint64_t this, char a2)
{
  *(unsigned char *)(this + 16) = a2;
  return this;
}

uint64_t zilch::ReadBitstream::get(zilch::ReadBitstream *this, int a2)
{
  if (*((unsigned char *)this + 16))
  {
    if (a2)
    {
      int v2 = 0;
      LODWORD(v3) = 0;
      unint64_t v4 = *((void *)this + 1);
      unint64_t v5 = *((void *)this + 3);
      do
      {
        if (v5 >= v4)
        {
          int v7 = 0;
          *((unsigned char *)this + 36) = 1;
        }
        else
        {
          int v6 = *((_DWORD *)this + 8);
          int v7 = (*(_DWORD *)(*(void *)this + 4 * v5) >> v6) & 1;
          *((_DWORD *)this + 8) = v6 + 1;
          if (v6 >= 31)
          {
            *((_DWORD *)this + 8) = 0;
            *((void *)this + 3) = ++v5;
          }
        }
        uint64_t v3 = (v7 << v2++) | v3;
      }
      while (a2 != v2);
      return v3;
    }
    return 0;
  }
  if (!a2) {
    return 0;
  }
  LODWORD(v3) = 0;
  unint64_t v8 = *((void *)this + 1);
  unint64_t v9 = *((void *)this + 3);
  int v10 = a2 - 1;
  do
  {
    if (v9 >= v8)
    {
      int v12 = 0;
      *((unsigned char *)this + 36) = 1;
    }
    else
    {
      int v11 = *((_DWORD *)this + 8);
      int v12 = (*(_DWORD *)(*(void *)this + 4 * v9) >> v11) & 1;
      *((_DWORD *)this + 8) = v11 + 1;
      if (v11 >= 31)
      {
        *((_DWORD *)this + 8) = 0;
        *((void *)this + 3) = ++v9;
      }
    }
    uint64_t v3 = (v12 << v10--) | v3;
  }
  while (v10 != -1);
  return v3;
}

uint64_t zilch::ReadBitstream::get64(zilch::ReadBitstream *this, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t result = 0;
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 3);
  uint64_t v6 = a2 - 1;
  do
  {
    if (v5 >= v4)
    {
      unsigned int v8 = 0;
      *((unsigned char *)this + 36) = 1;
    }
    else
    {
      int v7 = *((_DWORD *)this + 8);
      unsigned int v8 = (*(_DWORD *)(*(void *)this + 4 * v5) >> v7) & 1;
      *((_DWORD *)this + 8) = v7 + 1;
      if (v7 >= 31)
      {
        *((_DWORD *)this + 8) = 0;
        *((void *)this + 3) = ++v5;
      }
    }
    result |= (unint64_t)v8 << v6;
  }
  while ((unint64_t)v6--);
  return result;
}

uint64_t zilch::ReadBitstream::getEliasGamma(zilch::ReadBitstream *this, unsigned int *a2)
{
  if (!a2) {
    return 4;
  }
  unint64_t v3 = *((void *)this + 1);
  unint64_t v4 = *((void *)this + 3);
  int v5 = -1;
  do
  {
    if (v4 >= v3)
    {
      LOBYTE(v7) = 0;
      *((unsigned char *)this + 36) = 1;
    }
    else
    {
      int v6 = *((_DWORD *)this + 8);
      int v7 = (*(_DWORD *)(*(void *)this + 4 * v4) >> v6) & 1;
      *((_DWORD *)this + 8) = v6 + 1;
      if (v6 >= 31)
      {
        *((_DWORD *)this + 8) = 0;
        *((void *)this + 3) = ++v4;
      }
    }
    unsigned int v8 = ++v5;
  }
  while ((v7 & 1) == 0 && v8 < 0x20);
  uint64_t v9 = 1;
  if (v8 <= 0x1F)
  {
    *a2 = 1 << v5;
    if (v5)
    {
      int v10 = zilch::ReadBitstream::get(this, v5);
      uint64_t v9 = 0;
      *a2 |= v10;
    }
    else
    {
      return 0;
    }
  }
  return v9;
}

uint64_t zilch::ReadBitstream::getRice(zilch::ReadBitstream *this, int a2)
{
  char v2 = a2;
  unint64_t v3 = *((void *)this + 1);
  unint64_t v4 = *((void *)this + 3);
  if (v4 >= v3)
  {
    int v5 = 0;
  }
  else
  {
    int v5 = 0;
    uint64_t v6 = *(void *)this;
    int v7 = *((_DWORD *)this + 8);
    do
    {
      int v8 = (1 << v7) & *(_DWORD *)(v6 + 4 * v4);
      *((_DWORD *)this + 8) = v7 + 1;
      if (v7 >= 31)
      {
        *((_DWORD *)this + 8) = 0;
        *((void *)this + 3) = ++v4;
        if (!v8) {
          goto LABEL_12;
        }
        int v7 = 0;
      }
      else
      {
        ++v7;
        if (!v8) {
          goto LABEL_12;
        }
      }
      ++v5;
    }
    while (v4 < v3);
  }
  *((unsigned char *)this + 36) = 1;
LABEL_12:
  if (a2) {
    int v9 = zilch::ReadBitstream::get(this, a2);
  }
  else {
    int v9 = 0;
  }
  return (v9 + (v5 << v2));
}

uint64_t zilch::ReadBitstream::getRice64(zilch::ReadBitstream *this, unsigned int a2)
{
  char v2 = a2;
  unint64_t v3 = *((void *)this + 1);
  unint64_t v4 = *((void *)this + 3);
  if (v4 >= v3)
  {
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)this;
    int v7 = *((_DWORD *)this + 8);
    do
    {
      int v8 = (1 << v7) & *(_DWORD *)(v6 + 4 * v4);
      *((_DWORD *)this + 8) = v7 + 1;
      if (v7 >= 31)
      {
        *((_DWORD *)this + 8) = 0;
        *((void *)this + 3) = ++v4;
        if (!v8) {
          goto LABEL_12;
        }
        int v7 = 0;
      }
      else
      {
        ++v7;
        if (!v8) {
          goto LABEL_12;
        }
      }
      ++v5;
    }
    while (v4 < v3);
  }
  *((unsigned char *)this + 36) = 1;
LABEL_12:
  if (a2) {
    uint64_t v9 = zilch::ReadBitstream::get64(this, a2);
  }
  else {
    uint64_t v9 = 0;
  }
  return v9 + (v5 << v2);
}

uint64_t zilch::ReadBitstream::getVariableWidth(zilch::ReadBitstream *this)
{
  int v2 = zilch::ReadBitstream::get(this, 5) + 1;

  return zilch::ReadBitstream::get(this, v2);
}

uint64_t zilch::ReadBitstream::getVariableWidth64(zilch::ReadBitstream *this)
{
  unsigned int v2 = zilch::ReadBitstream::get(this, 6) + 1;

  return zilch::ReadBitstream::get64(this, v2);
}

uint64_t zilch::ReadBitstream::align(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 32);
  if (v1)
  {
    unint64_t v2 = *(void *)(this + 8);
    unint64_t v3 = *(void *)(this + 24);
    do
    {
      if (v3 >= v2)
      {
        *(unsigned char *)(this + 36) = 1;
      }
      else
      {
        *(_DWORD *)(this + 32) = v1 + 1;
        BOOL v5 = __OFSUB__(v1, 31);
        BOOL v4 = v1 - 31 < 0;
        ++v1;
        if (v4 == v5)
        {
          *(_DWORD *)(this + 32) = 0;
          *(void *)(this + 24) = v3 + 1;
          return this;
        }
      }
    }
    while (v1);
  }
  return this;
}

void zilch::ReadBitstream::getByteArray(uint64_t a1, unsigned int a2, unint64_t *a3)
{
  zilch::ReadBitstream::align(a1);
  unint64_t v6 = *(void *)(a1 + 8);
  if (*(void *)(a1 + 24) + (unint64_t)((a2 + 3) >> 2) > v6)
  {
    *(unsigned char *)(a1 + 36) = 1;
    *(void *)(a1 + 24) = v6;
    return;
  }
  unint64_t v7 = *a3;
  unint64_t v8 = a3[1];
  if (v8 != *a3)
  {
    a3[1] = v7;
    unint64_t v8 = v7;
  }
  std::vector<unsigned char>::reserve(a3, v8 - v7 + a2);
  if (a2)
  {
    unsigned int v9 = 0;
    int v10 = (unsigned char *)a3[1];
    while (1)
    {
      uint64_t v11 = *(void *)a1;
      uint64_t v12 = *(void *)(a1 + 24);
      *(void *)(a1 + 24) = v12 + 1;
      int v13 = *(_DWORD *)(v11 + 4 * v12);
      unint64_t v14 = a3[2];
      if ((unint64_t)v10 >= v14)
      {
        unint64_t v16 = *a3;
        size_t v17 = &v10[-*a3];
        unint64_t v18 = (unint64_t)(v17 + 1);
        if ((uint64_t)(v17 + 1) < 0) {
          goto LABEL_86;
        }
        unint64_t v19 = v14 - v16;
        if (2 * v19 > v18) {
          unint64_t v18 = 2 * v19;
        }
        if (v19 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v20 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v20 = v18;
        }
        if (v20) {
          unsigned int v21 = (char *)operator new(v20);
        }
        else {
          unsigned int v21 = 0;
        }
        Longitude v22 = &v17[(void)v21];
        long long v23 = &v17[(void)v21];
        unsigned char *v23 = HIBYTE(v13);
        unint64_t v15 = v23 + 1;
        if (v10 != (unsigned char *)v16)
        {
          uint64_t v24 = &v10[~v16];
          do
          {
            char v25 = *--v10;
            (v24--)[(void)v21] = v25;
          }
          while (v10 != (unsigned char *)v16);
          int v10 = (unsigned char *)*a3;
          Longitude v22 = v21;
        }
        *a3 = (unint64_t)v22;
        a3[1] = (unint64_t)v15;
        a3[2] = (unint64_t)&v21[v20];
        if (v10) {
          operator delete(v10);
        }
      }
      else
      {
        unsigned char *v10 = HIBYTE(v13);
        unint64_t v15 = v10 + 1;
      }
      a3[1] = (unint64_t)v15;
      if ((v9 | 1) < a2) {
        break;
      }
LABEL_44:
      if ((v9 | 2) >= a2) {
        goto LABEL_64;
      }
      unint64_t v37 = a3[2];
      if ((unint64_t)v15 >= v37)
      {
        unint64_t v39 = *a3;
        int v40 = &v15[-*a3];
        unint64_t v41 = (unint64_t)(v40 + 1);
        if ((uint64_t)(v40 + 1) < 0) {
          goto LABEL_86;
        }
        unint64_t v42 = v37 - v39;
        if (2 * v42 > v41) {
          unint64_t v41 = 2 * v42;
        }
        if (v42 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v43 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v43 = v41;
        }
        if (v43) {
          unint64_t v44 = (unint64_t)operator new(v43);
        }
        else {
          unint64_t v44 = 0;
        }
        unsigned int v45 = (char *)(v44 + v43);
        v40[v44] = BYTE1(v13);
        uint64_t v38 = (uint64_t)&v40[v44 + 1];
        if (v15 == (unsigned char *)v39)
        {
          *a3 = (unint64_t)&v40[v44];
          a3[1] = v38;
          a3[2] = (unint64_t)v45;
        }
        else
        {
          Longitude v46 = &v15[~v39];
          do
          {
            char v47 = *--v15;
            (v46--)[v44] = v47;
          }
          while (v15 != (unsigned char *)v39);
          unint64_t v15 = (unsigned char *)*a3;
          *a3 = v44;
          a3[1] = v38;
          a3[2] = (unint64_t)v45;
          if (!v15) {
            goto LABEL_63;
          }
        }
        operator delete(v15);
      }
      else
      {
        *unint64_t v15 = BYTE1(v13);
        uint64_t v38 = (uint64_t)(v15 + 1);
      }
LABEL_63:
      a3[1] = v38;
      unint64_t v15 = (unsigned char *)v38;
LABEL_64:
      if ((v9 | 3) < a2)
      {
        unint64_t v48 = a3[2];
        if ((unint64_t)v15 >= v48)
        {
          unint64_t v50 = *a3;
          Longitude v51 = &v15[-*a3];
          unint64_t v52 = (unint64_t)(v51 + 1);
          if ((uint64_t)(v51 + 1) < 0) {
LABEL_86:
          }
            std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
          unint64_t v53 = v48 - v50;
          if (2 * v53 > v52) {
            unint64_t v52 = 2 * v53;
          }
          if (v53 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v54 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v54 = v52;
          }
          if (v54) {
            unint64_t v55 = (unint64_t)operator new(v54);
          }
          else {
            unint64_t v55 = 0;
          }
          int v56 = (char *)(v55 + v54);
          v51[v55] = v13;
          uint64_t v49 = (uint64_t)&v51[v55 + 1];
          if (v15 == (unsigned char *)v50)
          {
            *a3 = (unint64_t)&v51[v55];
            a3[1] = v49;
            a3[2] = (unint64_t)v56;
          }
          else
          {
            FormOfWay v57 = &v15[~v50];
            do
            {
              char v58 = *--v15;
              (v57--)[v55] = v58;
            }
            while (v15 != (unsigned char *)v50);
            unint64_t v15 = (unsigned char *)*a3;
            *a3 = v55;
            a3[1] = v49;
            a3[2] = (unint64_t)v56;
            if (!v15) {
              goto LABEL_83;
            }
          }
          operator delete(v15);
        }
        else
        {
          *unint64_t v15 = v13;
          uint64_t v49 = (uint64_t)(v15 + 1);
        }
LABEL_83:
        a3[1] = v49;
        unint64_t v15 = (unsigned char *)v49;
      }
      v9 += 4;
      int v10 = v15;
      if (v9 >= a2) {
        return;
      }
    }
    unint64_t v26 = a3[2];
    if ((unint64_t)v15 >= v26)
    {
      unint64_t v28 = *a3;
      FunctionalClass v29 = &v15[-*a3];
      unint64_t v30 = (unint64_t)(v29 + 1);
      if ((uint64_t)(v29 + 1) < 0) {
        goto LABEL_86;
      }
      unint64_t v31 = v26 - v28;
      if (2 * v31 > v30) {
        unint64_t v30 = 2 * v31;
      }
      if (v31 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v32 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v32 = v30;
      }
      if (v32) {
        unint64_t v33 = (unint64_t)operator new(v32);
      }
      else {
        unint64_t v33 = 0;
      }
      int v34 = (char *)(v33 + v32);
      v29[v33] = BYTE2(v13);
      uint64_t v27 = (uint64_t)&v29[v33 + 1];
      if (v15 == (unsigned char *)v28)
      {
        *a3 = (unint64_t)&v29[v33];
        a3[1] = v27;
        a3[2] = (unint64_t)v34;
      }
      else
      {
        int v35 = &v15[~v28];
        do
        {
          char v36 = *--v15;
          (v35--)[v33] = v36;
        }
        while (v15 != (unsigned char *)v28);
        unint64_t v15 = (unsigned char *)*a3;
        *a3 = v33;
        a3[1] = v27;
        a3[2] = (unint64_t)v34;
        if (!v15) {
          goto LABEL_43;
        }
      }
      operator delete(v15);
    }
    else
    {
      *unint64_t v15 = BYTE2(v13);
      uint64_t v27 = (uint64_t)(v15 + 1);
    }
LABEL_43:
    a3[1] = v27;
    unint64_t v15 = (unsigned char *)v27;
    goto LABEL_44;
  }
}

float zilch::ReadBitstream::getBoundedFloat(zilch::ReadBitstream *this, float a2, float a3, int a4)
{
  return a2
       + (float)((float)((float)zilch::ReadBitstream::get(this, a4) / (float)~(-1 << a4))
               * (float)(a3 - a2));
}

uint64_t zilch::ReadBitstream::getHuffmanCode(zilch::ReadBitstream *this, zilch::HuffmanCode *a2)
{
  zilch::HuffmanCode::clear(a2);
  int v4 = zilch::ReadBitstream::get(this, 5);
  uint64_t result = zilch::ReadBitstream::get(this, v4 + 1);
  if (result)
  {
    int v6 = result;
    while (1)
    {
      int v7 = zilch::ReadBitstream::get(this, 5);
      uint64_t v8 = zilch::ReadBitstream::get(this, v7 + 1);
      unsigned int v11 = 0;
      uint64_t result = zilch::ReadBitstream::getEliasGamma(this, &v11);
      if (result) {
        break;
      }
      unsigned int v9 = v11;
      unsigned int v10 = zilch::ReadBitstream::get(this, v11);
      zilch::HuffmanCode::insert(a2, v8, v10, v9);
      if (!--v6) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t zilch::ReadBitstream::getHuffmanKey(zilch::ReadBitstream *this, const zilch::HuffmanCode *a2)
{
  int v4 = 0;
  int v5 = 1;
  while (1)
  {
    unint64_t v6 = *((void *)this + 3);
    if (v6 >= *((void *)this + 1))
    {
      int v8 = 0;
      *((unsigned char *)this + 36) = 1;
    }
    else
    {
      int v7 = *((_DWORD *)this + 8);
      int v8 = (*(_DWORD *)(*(void *)this + 4 * v6) >> v7) & 1;
      *((_DWORD *)this + 8) = v7 + 1;
      if (v7 >= 31)
      {
        *((_DWORD *)this + 8) = 0;
        *((void *)this + 3) = v6 + 1;
      }
    }
    int v9 = 2 * v4;
    int v4 = (2 * v4) | v8;
    uint64_t result = zilch::HuffmanCode::getKeyForCode(a2, v9 | v8, v5);
    if (result != -1) {
      break;
    }
    if (++v5 == 33) {
      return 0;
    }
  }
  return result;
}

uint64_t zilch::ReadBitstream::skipBytes(zilch::ReadBitstream *this, int a2)
{
  uint64_t result = zilch::ReadBitstream::align((uint64_t)this);
  *((void *)this + 3) += (a2 + 3) >> 2;
  return result;
}

void *zilch::String::String(void *this)
{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  return this;
}

{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  return this;
}

void *zilch::String::String(void *a1, char *a2)
{
  unint64_t v3 = *((void *)a2 + 1);
  if (a2[23] >= 0)
  {
    unint64_t v4 = a2[23];
  }
  else
  {
    a2 = *(char **)a2;
    unint64_t v4 = v3;
  }
  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(a1, a2, &a2[v4], v4);
  return a1;
}

{
  unint64_t v3;
  unint64_t v4;

  unint64_t v3 = *((void *)a2 + 1);
  if (a2[23] >= 0)
  {
    unint64_t v4 = a2[23];
  }
  else
  {
    a2 = *(char **)a2;
    unint64_t v4 = v3;
  }
  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(a1, a2, &a2[v4], v4);
  return a1;
}

zilch::String *zilch::String::String(zilch::String *this, const zilch::String *a2)
{
  unint64_t v3 = *((void *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    unint64_t v4 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(const zilch::String **)a2;
    unint64_t v4 = v3;
  }
  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(this, (char *)a2, (char *)a2 + v4, v4);
  return this;
}

{
  unint64_t v3;
  unint64_t v4;

  unint64_t v3 = *((void *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    unint64_t v4 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(const zilch::String **)a2;
    unint64_t v4 = v3;
  }
  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(this, (char *)a2, (char *)a2 + v4, v4);
  return this;
}

std::string *zilch::String::operator=(std::string *a1, std::string::value_type *a2)
{
  std::string::size_type v3 = *((void *)a2 + 1);
  if (a2[23] >= 0)
  {
    std::string::size_type v4 = a2[23];
  }
  else
  {
    a2 = *(std::string::value_type **)a2;
    std::string::size_type v4 = v3;
  }
  std::string::__assign_trivial[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(a1, a2, &a2[v4], v4);
  return a1;
}

{
  std::string::size_type v3;
  std::string::size_type v4;

  std::string::size_type v3 = *((void *)a2 + 1);
  if (a2[23] >= 0)
  {
    std::string::size_type v4 = a2[23];
  }
  else
  {
    a2 = *(std::string::value_type **)a2;
    std::string::size_type v4 = v3;
  }
  std::string::__assign_trivial[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(a1, a2, &a2[v4], v4);
  return a1;
}

uint64_t zilch::String::operator=(uint64_t a1)
{
  return a1;
}

BOOL zilch::String::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) == 0;
  }
  if (!a1[23]) {
    return 1;
  }
  uint64_t v6 = v2 - 1;
  do
  {
    int v8 = *a1++;
    int v7 = v8;
    int v10 = *a2++;
    int v9 = v10;
    BOOL v12 = v6-- != 0;
    BOOL v13 = v7 == v9;
    BOOL v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

BOOL zilch::String::operator!=(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 1;
  }
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) != 0;
  }
  if (a1[23])
  {
    uint64_t v6 = v2 - 1;
    do
    {
      int v8 = *a1++;
      int v7 = v8;
      int v9 = *a2++;
      BOOL v10 = v7 == v9;
      uint64_t v2 = v7 != v9;
      BOOL v10 = !v10 || v6-- == 0;
    }
    while (!v10);
  }
  return v2;
}

void std::string::__assign_trivial[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(std::string *this, std::string::value_type *a2, std::string::value_type *a3, std::string::size_type a4)
{
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    int v8 = this;
    if (a4 <= 0x16) {
      goto LABEL_11;
    }
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v10 = 22;
    goto LABEL_6;
  }
  unint64_t v11 = this->__r_.__value_.__r.__words[2];
  std::string::size_type v10 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v10 < a4)
  {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
LABEL_6:
    std::string::__grow_by(this, v10, a4 - v10, size, 0, size, 0);
    this->__r_.__value_.__l.__size_ = 0;
    LOBYTE(v12) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    goto LABEL_8;
  }
  unint64_t v12 = HIBYTE(v11);
LABEL_8:
  int v8 = this;
  if ((v12 & 0x80) != 0) {
    int v8 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
LABEL_11:
  while (a2 != a3)
  {
    std::string::value_type v13 = *a2++;
    v8->__r_.__value_.__s.__data_[0] = v13;
    int v8 = (std::string *)((char *)v8 + 1);
  }
  v8->__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    this->__r_.__value_.__l.__size_ = a4;
  }
  else {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = a4 & 0x7F;
  }
}

double zilch::StringList::StringList(zilch::StringList *this)
{
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return result;
}

zilch::StringList *zilch::StringList::StringList(zilch::StringList *this, zilch::ReadBitstream *a2)
{
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  zilch::StringList::decode(this, a2);
  return this;
}

void sub_1890E7798(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)(v1 + 24);
  if (v3)
  {
    *(void *)(v1 + 32) = v3;
    operator delete(v3);
  }
  sub_1890E80D4(v1);
  _Unwind_Resume(a1);
}

void zilch::StringList::decode(zilch::StringList *this, zilch::ReadBitstream *a2)
{
  unsigned int VariableWidth = zilch::ReadBitstream::getVariableWidth(a2);
  int v5 = (uint64_t *)((char *)this + 24);
  uint64_t v6 = VariableWidth;
  std::vector<zilch::StringList::Entry>::resize((uint64_t)this + 24, VariableWidth);
  if (VariableWidth)
  {
    uint64_t v7 = 0;
    int v8 = 0;
    uint64_t v9 = *v5;
    uint64_t v10 = 8 * v6;
    do
    {
      *(_DWORD *)(v9 + v7) = v8;
      int v11 = zilch::ReadBitstream::getVariableWidth(a2);
      uint64_t v9 = *v5;
      *(_DWORD *)(*v5 + v7 + 4) = v11;
      v8 += v11;
      v7 += 8;
    }
    while (v10 != v7);
  }
  unsigned int v12 = zilch::ReadBitstream::getVariableWidth(a2);
  unsigned int v13 = zilch::ReadBitstream::getVariableWidth(a2);
  uLongf v14 = v13;
  unint64_t v15 = *((void *)this + 1) - *(void *)this;
  if (v13 <= v15)
  {
    if (v13 < v15) {
      *((void *)this + 1) = *(void *)this + v13;
    }
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this, v13 - v15);
  }
  source = 0;
  size_t v20 = 0;
  uint64_t v21 = 0;
  zilch::ReadBitstream::getByteArray((uint64_t)a2, v12, (unint64_t *)&source);
  if (v14)
  {
    uLongf v18 = v14;
    int v16 = uncompress(*(Bytef **)this, &v18, source, v12);
    uLongf v17 = *((void *)this + 1) - *(void *)this;
    if (v18 <= v17)
    {
      if (v18 < v17) {
        *((void *)this + 1) = *(void *)this + v18;
      }
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)this, v18 - v17);
    }
    if (v16)
    {
      *((void *)this + 4) = *((void *)this + 3);
      *((void *)this + 1) = *(void *)this;
    }
  }
  if (source)
  {
    size_t v20 = source;
    operator delete(source);
  }
}

void sub_1890E791C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void zilch::StringList::~StringList(zilch::StringList *this)
{
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v3;
    operator delete(v3);
  }
}

char *zilch::StringList::addString(zilch::StringList *this, const zilch::String *a2)
{
  if (*((char *)a2 + 23) >= 0) {
    LODWORD(v4) = *((unsigned __int8 *)a2 + 23);
  }
  else {
    uint64_t v4 = *((void *)a2 + 1);
  }
  uint64_t v5 = *((void *)this + 1) - *(void *)this;
  uint64_t v6 = (unint64_t *)*((void *)this + 4);
  unint64_t v9 = *((void *)this + 5);
  uint64_t v7 = (char *)this + 40;
  unint64_t v8 = v9;
  if ((unint64_t)v6 >= v9)
  {
    uint64_t v11 = *((void *)this + 3);
    uint64_t v12 = ((uint64_t)v6 - v11) >> 3;
    if ((unint64_t)(v12 + 1) >> 61) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = v8 - v11;
    uint64_t v14 = v13 >> 2;
    if (v13 >> 2 <= (unint64_t)(v12 + 1)) {
      uint64_t v14 = v12 + 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v14;
    }
    if (v15) {
      int v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::StringList::Entry>>((uint64_t)v7, v15);
    }
    else {
      int v16 = 0;
    }
    uLongf v17 = (unint64_t *)&v16[8 * v12];
    uLongf v18 = &v16[8 * v15];
    *uLongf v17 = v5 | ((unint64_t)v4 << 32);
    uint64_t v10 = v17 + 1;
    size_t v20 = (char *)*((void *)this + 3);
    unint64_t v19 = (char *)*((void *)this + 4);
    if (v19 != v20)
    {
      do
      {
        unint64_t v21 = *((void *)v19 - 1);
        v19 -= 8;
        *--uLongf v17 = v21;
      }
      while (v19 != v20);
      unint64_t v19 = (char *)*((void *)this + 3);
    }
    *((void *)this + 3) = v17;
    *((void *)this + 4) = v10;
    *((void *)this + 5) = v18;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    unint64_t *v6 = v5 | ((unint64_t)v4 << 32);
    uint64_t v10 = v6 + 1;
  }
  *((void *)this + 4) = v10;
  Longitude v22 = (char *)*((void *)this + 1);
  int v23 = *((char *)a2 + 23);
  if (v23 >= 0) {
    uint64_t v24 = (char *)a2;
  }
  else {
    uint64_t v24 = *(char **)a2;
  }
  if (v23 >= 0) {
    uint64_t v25 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    uint64_t v25 = *((void *)a2 + 1);
  }

  return std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>((char **)this, v22, v24, &v24[v25], v25);
}

uint64_t zilch::StringList::size(zilch::StringList *this)
{
  return (*((void *)this + 4) - *((void *)this + 3)) >> 3;
}

uint64_t zilch::StringList::string(zilch::StringList *this, unsigned int a2)
{
  return *(void *)this + *(unsigned int *)(*((void *)this + 3) + 8 * a2);
}

uint64_t zilch::StringList::stringLength(zilch::StringList *this, unsigned int a2)
{
  return *(unsigned int *)(*((void *)this + 3) + 8 * a2 + 4);
}

void zilch::StringList::encode(zilch::StringList *this, zilch::WriteBitstream *a2)
{
  uLongf destLen = (unint64_t)((double)(unint64_t)(*((void *)this + 1) - *(void *)this) * 1.1 + 12.0);
  std::vector<unsigned char>::vector(&dest, destLen);
  if (j__compress(dest, &destLen, *(const Bytef **)this, *((void *)this + 1) - *(void *)this))
  {
    zilch::WriteBitstream::putVariableWidth(a2, 0);
  }
  else
  {
    if (destLen <= v8 - dest)
    {
      if (destLen < v8 - dest) {
        unint64_t v8 = &dest[destLen];
      }
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)&dest, destLen - (v8 - dest));
    }
    unint64_t v4 = *((void *)this + 4) - *((void *)this + 3);
    zilch::WriteBitstream::putVariableWidth(a2, v4 >> 3);
    if ((v4 >> 3))
    {
      uint64_t v5 = 0;
      uint64_t v6 = v4 & 0x7FFFFFFF8;
      do
      {
        zilch::WriteBitstream::putVariableWidth(a2, *(_DWORD *)(*((void *)this + 3) + v5 + 4));
        v5 += 8;
      }
      while (v6 != v5);
    }
    zilch::WriteBitstream::putVariableWidth(a2, destLen);
    zilch::WriteBitstream::putVariableWidth(a2, *((_DWORD *)this + 2) - *(_DWORD *)this);
    zilch::WriteBitstream::putByteArray(a2, dest, v8 - dest);
  }
  if (dest)
  {
    unint64_t v8 = dest;
    operator delete(dest);
  }
}

void sub_1890E7C38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<zilch::StringList::Entry>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<zilch::StringList::Entry>::__append((void **)a1, a2 - v2);
  }
}

char *std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(char **a1, char *__dst, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = __dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v6 = a5;
  uint64_t v7 = __src;
  uint64_t v10 = a1[1];
  unint64_t v9 = a1[2];
  if (v9 - v10 >= a5)
  {
    uint64_t v17 = v10 - __dst;
    if (v10 - __dst >= a5)
    {
      uLongf v18 = &__src[a5];
      size_t v20 = a1[1];
    }
    else
    {
      uLongf v18 = &__src[v17];
      if (&__src[v17] == a4)
      {
        size_t v20 = a1[1];
      }
      else
      {
        int64_t v19 = __src - __dst;
        size_t v20 = a1[1];
        unint64_t v21 = v20;
        do
          *v21++ = (v20++)[v19];
        while (&v20[v19] != a4);
      }
      a1[1] = v20;
      if (v17 < 1) {
        return v5;
      }
    }
    size_t v32 = &__dst[a5];
    unint64_t v33 = &v20[-a5];
    int v34 = v20;
    if (&v20[-a5] < v10)
    {
      uint64_t v35 = &v10[a5] - v20;
      int v34 = v20;
      do
      {
        char v36 = *v33++;
        *v34++ = v36;
        --v35;
      }
      while (v35);
    }
    a1[1] = v34;
    if (v20 != v32) {
      memmove(&__dst[a5], __dst, v20 - v32);
    }
    if (v18 != v7) {
      memmove(v5, v7, v18 - v7);
    }
  }
  else
  {
    uint64_t v11 = *a1;
    uint64_t v12 = v10 - *a1 + a5;
    if (v12 < 0) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = (char *)(__dst - v11);
    unint64_t v14 = v9 - v11;
    if (2 * v14 > v12) {
      uint64_t v12 = 2 * v14;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v12;
    }
    if (v15) {
      int v16 = operator new(v15);
    }
    else {
      int v16 = 0;
    }
    Longitude v22 = &v13[(void)v16];
    int v23 = &v13[(void)v16 + v6];
    uint64_t v24 = v22;
    do
    {
      char v25 = *v7++;
      *v24++ = v25;
      --v6;
    }
    while (v6);
    unint64_t v26 = *a1;
    if (*a1 == v5)
    {
      unint64_t v28 = v22;
    }
    else
    {
      uint64_t v27 = v5;
      unint64_t v28 = v22;
      do
      {
        char v29 = *--v27;
        *--unint64_t v28 = v29;
      }
      while (v27 != v26);
      uint64_t v10 = a1[1];
    }
    unint64_t v30 = (char *)v16 + v15;
    if (v10 != v5) {
      memmove(v23, v5, v10 - v5);
    }
    unint64_t v31 = *a1;
    *a1 = v28;
    a1[1] = &v23[v10 - v5];
    a1[2] = v30;
    if (v31) {
      operator delete(v31);
    }
    return v22;
  }
  return v5;
}

void std::vector<unsigned char>::__append(unint64_t *a1, size_t a2)
{
  uint64_t v5 = (char *)a1[1];
  unint64_t v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    unint64_t v6 = *a1;
    uint64_t v7 = &v5[-*a1];
    unint64_t v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10) {
      unint64_t v11 = (unint64_t)operator new(v10);
    }
    else {
      unint64_t v11 = 0;
    }
    uint64_t v12 = &v7[v11];
    uint64_t v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      unint64_t v11 = (unint64_t)v12;
    }
    else
    {
      unint64_t v14 = &v5[~v6];
      do
      {
        char v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      uint64_t v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void std::vector<zilch::StringList::Entry>::__append(void **a1, unint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::StringList::Entry>>(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    unint64_t v14 = &v13[8 * v10];
    char v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    int v16 = &v14[8 * a2];
    uLongf v18 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      uint64_t v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void sub_1890E80D4(uint64_t a1)
{
  unint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
}

uint64_t zilch::TrafficDynamicTile::Flow::Flow(uint64_t result, uint64_t a2, int a3, float a4, float a5)
{
  *(void *)double result = a2;
  *(float *)(result + 8) = a4;
  *(float *)(result + 12) = a5;
  *(_DWORD *)(result + 16) = a3;
  return result;
}

{
  *(void *)double result = a2;
  *(float *)(result + 8) = a4;
  *(float *)(result + 12) = a5;
  *(_DWORD *)(result + 16) = a3;
  return result;
}

double zilch::TrafficDynamicTile::Flow::Flow(zilch::TrafficDynamicTile::Flow *this)
{
  *(void *)this = 0;
  double result = 0.0078125;
  *((void *)this + 1) = 0x3F80000000000000;
  *((_DWORD *)this + 4) = 3;
  return result;
}

{
  double result;

  *(void *)this = 0;
  double result = 0.0078125;
  *((void *)this + 1) = 0x3F80000000000000;
  *((_DWORD *)this + 4) = 3;
  return result;
}

zilch::TrafficDynamicTile::Incident *zilch::TrafficDynamicTile::Incident::Incident(zilch::TrafficDynamicTile::Incident *this)
{
  unint64_t v2 = zilch::GeoCoordinates::GeoCoordinates(this);
  zilch::String::String((void *)v2 + 2);
  zilch::String::String((void *)this + 5);
  *((_DWORD *)this + 16) = 0;
  zilch::String::String((void *)this + 9);
  zilch::String::String((void *)this + 12);
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_DWORD *)this + 38) = 7;
  *((_WORD *)this + 78) = 0;
  *((_DWORD *)this + 40) = 0;
  *((_WORD *)this + 82) = -248;
  *((unsigned char *)this + 166) = -1;
  return this;
}

void sub_1890E81D8(_Unwind_Exception *exception_object)
{
  if (v1[95] < 0) {
    operator delete(*v4);
  }
  if (v1[63] < 0) {
    operator delete(*v3);
  }
  if (v1[39] < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

double zilch::TrafficDynamicTile::TrafficDynamicTile(zilch::TrafficDynamicTile *this)
{
  *(_DWORD *)this = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 9) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 7) = 0;
  *((_DWORD *)this + 24) = 10;
  *((_DWORD *)this + 16) = 0;
  *((unsigned char *)this + 95) = 0;
  return result;
}

{
  double result;

  *(_DWORD *)this = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 9) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 7) = 0;
  *((_DWORD *)this + 24) = 10;
  *((_DWORD *)this + 16) = 0;
  return result;
}

zilch::TrafficDynamicTile *zilch::TrafficDynamicTile::TrafficDynamicTile(zilch::TrafficDynamicTile *this, zilch::ReadBitstream *a2)
{
  *(_DWORD *)this = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 7) = 0;
  *((_DWORD *)this + 24) = 10;
  *((_DWORD *)this + 16) = 0;
  *((unsigned char *)this + 95) = 0;
  zilch::TrafficDynamicTile::decode(this, a2);
  return this;
}

void sub_1890E82FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 95) < 0) {
    operator delete(*v3);
  }
  std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  uint64_t v5 = *(void **)(v2 + 16);
  if (v5)
  {
    *(void *)(v2 + 24) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t zilch::TrafficDynamicTile::decode(zilch::TrafficDynamicTile *this, zilch::ReadBitstream *a2)
{
  if (zilch::ReadBitstream::get(a2, 8) != 1) {
    return 2;
  }
  uint64_t v4 = (uint64_t *)((char *)this + 40);
  std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::__clear[abi:ne180100]((uint64_t *)this + 5);
  uint64_t v5 = zilch::TrafficDynamicTile::decode_flows_and_incidents((uint64_t)this, a2, (uint64_t *)this + 5);
  if (!v5)
  {
    if (zilch::TrafficDynamicTile::decode_incident_attributes(this, a2, (uint64_t *)this + 5)) {
      return 1;
    }
    unint64_t v7 = *((void *)a2 + 1);
    unint64_t v8 = *((void *)a2 + 3);
    if (v7 != v8)
    {
      if (v8 >= v7)
      {
        *((unsigned char *)a2 + 36) = 1;
      }
      else
      {
        int v9 = *((_DWORD *)a2 + 8);
        int v10 = (1 << v9) & *(_DWORD *)(*(void *)a2 + 4 * v8);
        *((_DWORD *)a2 + 8) = v9 + 1;
        if (v9 >= 31)
        {
          *((_DWORD *)a2 + 8) = 0;
          *((void *)a2 + 3) = v8 + 1;
        }
        if (v10)
        {
          long long v39 = 0uLL;
          *(void *)&long long v40 = 0;
          uint64_t v5 = zilch::TrafficDynamicTile::decode_incidents((uint64_t)this, a2, (uint64_t *)&v39);
          if (v5)
          {
LABEL_15:
            unint64_t v42 = &v39;
            std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
            return v5;
          }
          if (zilch::TrafficDynamicTile::decode_incident_attributes(this, a2, (uint64_t *)&v39))
          {
            uint64_t v5 = 1;
            goto LABEL_15;
          }
          uint64_t v35 = v39;
          if (*((void *)&v39 + 1) != (void)v39)
          {
            uint64_t v36 = 0;
            unint64_t v37 = 0;
            do
            {
              *(_DWORD *)(*(void *)(v35 + v36) + 64) = 7;
              std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::push_back[abi:ne180100]((uint64_t *)this + 5, (long long *)(v35 + v36));
              ++v37;
              uint64_t v35 = v39;
              v36 += 16;
            }
            while (v37 < (uint64_t)(*((void *)&v39 + 1) - v39) >> 4);
          }
          unint64_t v42 = &v39;
          std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
        }
      }
    }
    zilch::ReadBitstream::align((uint64_t)a2);
    if (*((void *)a2 + 1) == *((void *)a2 + 3)) {
      return 0;
    }
    uint64_t v12 = *((void *)this + 5);
    uint64_t v11 = *((void *)this + 6);
    unsigned int VariableWidth = zilch::ReadBitstream::getVariableWidth(a2);
    if (!VariableWidth) {
      return 0;
    }
    unsigned int v14 = VariableWidth;
    char v15 = zilch::ReadBitstream::getVariableWidth(a2);
    char v16 = zilch::ReadBitstream::getVariableWidth(a2);
    int v17 = zilch::ReadBitstream::getVariableWidth(a2);
    unint64_t v42 = 0;
    size_t v43 = 0;
    uint64_t v44 = 0;
    std::vector<unsigned char>::vector(__p, (v11 - v12) >> 4, zilch::TrafficDynamicTile::INVALID_MZR);
    std::vector<unsigned char>::resize((unint64_t *)&v42, 0);
    unsigned int v18 = zilch::ReadBitstream::getVariableWidth(a2);
    zilch::ReadBitstream::getByteArray((uint64_t)a2, v18, (unint64_t *)&v42);
    long long v39 = 0u;
    long long v40 = 0u;
    int v19 = mgcl::ints::IntDecompressor<unsigned char>::decompress((uint64_t *)&v39, (unsigned __int8 *)v42, v43 - (unsigned char *)v42, v15, v16, (v11 - v12) >> 4, (uint8x8_t *)__p[0]);
    mgcl::ints::IntDecompressor<unsigned char>::~IntDecompressor((uint64_t)&v39);
    if (v19)
    {
      int v20 = 1;
    }
    else
    {
      std::vector<int>::vector(&v38, v14);
      std::vector<unsigned char>::resize((unint64_t *)&v42, 0);
      unsigned int v21 = zilch::ReadBitstream::getVariableWidth(a2);
      zilch::ReadBitstream::getByteArray((uint64_t)a2, v21, (unint64_t *)&v42);
      long long v39 = 0u;
      long long v40 = 0u;
      int v22 = mgcl::ints::IntDecompressor<int>::decompress((uint64_t *)&v39, (unsigned __int8 *)v42, v43 - (unsigned char *)v42, v15, v16, v14, (int8x16_t *)v38.__begin_);
      mgcl::ints::IntDecompressor<unsigned char>::~IntDecompressor((uint64_t)&v39);
      if (v22)
      {
        int v20 = 1;
      }
      else
      {
        if (v11 != v12)
        {
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          unint64_t v25 = 0;
          if ((unint64_t)((v11 - v12) >> 4) <= 1) {
            uint64_t v26 = 1;
          }
          else {
            uint64_t v26 = (v11 - v12) >> 4;
          }
          do
          {
            uint64_t v27 = *v4;
            int v28 = *((unsigned __int8 *)__p[0] + v24);
            char v29 = *(zilch::GeoCoordinates **)(*v4 + v23);
            *((unsigned char *)v29 + 166) = v28;
            if (v28 != 255)
            {
              if (v25 >= v38.__end_ - v38.__begin_) {
                std::vector<zilch::GeoCoordinates>::__throw_out_of_range[abi:ne180100]();
              }
              int v30 = v38.__begin_[v25];
              unsigned int v31 = zilch::GeoCoordinates::x(v29);
              unsigned int v32 = zilch::GeoCoordinates::y(*(zilch::GeoCoordinates **)(v27 + v23));
              v33.var0 = v31;
              v34.var0 = v32;
              zilch::GeoCoordinates::set((uint64_t)v29, v33, v34, v30 * v17);
              ++v25;
            }
            ++v24;
            v23 += 16;
          }
          while (v26 != v24);
        }
        int v20 = 0;
      }
      if (v38.__begin_)
      {
        v38.__end_ = v38.__begin_;
        operator delete(v38.__begin_);
      }
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v42)
    {
      size_t v43 = v42;
      operator delete(v42);
    }
    return v20 != 0;
  }
  return v5;
}

void sub_1890E86F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17)
  {
    a18 = (uint64_t)a17;
    operator delete(a17);
  }
  if (a20)
  {
    a21 = (uint64_t)a20;
    operator delete(a20);
  }
  _Unwind_Resume(a1);
}

void zilch::TrafficDynamicTile::~TrafficDynamicTile(void **this)
{
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  uint64_t v3 = this + 5;
  std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = this[2];
  if (v2)
  {
    this[3] = v2;
    operator delete(v2);
  }
}

_DWORD *zilch::TrafficDynamicTile::setTrafficVersion(_DWORD *this, int a2)
{
  *this = a2;
  return this;
}

uint64_t zilch::TrafficDynamicTile::trafficVersion(zilch::TrafficDynamicTile *this)
{
  return *(unsigned int *)this;
}

uint64_t zilch::TrafficDynamicTile::setFeedUpdateTimeSeconds(uint64_t this, uint64_t a2)
{
  *(void *)(this + 8) = a2;
  return this;
}

uint64_t zilch::TrafficDynamicTile::feedUpdateTimeSeconds(zilch::TrafficDynamicTile *this)
{
  return *((void *)this + 1);
}

uint64_t zilch::TrafficDynamicTile::setEncodedElevationScaleCm(uint64_t this, int a2)
{
  *(_DWORD *)(this + 96) = a2;
  return this;
}

uint64_t zilch::TrafficDynamicTile::encodedElevationScaleCm(zilch::TrafficDynamicTile *this)
{
  return *((unsigned int *)this + 24);
}

void zilch::TrafficDynamicTile::addFlow(zilch::TrafficDynamicTile *this, const zilch::TrafficDynamicTile::Flow *a2)
{
  unint64_t v6 = *((void *)this + 4);
  uint64_t v4 = (char *)this + 32;
  unint64_t v5 = v6;
  unint64_t v7 = *((void *)v4 - 1);
  if (v7 >= v6)
  {
    int v10 = (void **)(v4 - 16);
    uint64_t v11 = *((void *)v4 - 2);
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v11) >> 3);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - v11) >> 3);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x555555555555555) {
      unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15) {
      char v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::TrafficDynamicTile::Flow>>((uint64_t)v4, v15);
    }
    else {
      char v16 = 0;
    }
    int v17 = &v16[24 * v12];
    unsigned int v18 = &v16[24 * v15];
    long long v19 = *(_OWORD *)a2;
    *((void *)v17 + 2) = *((void *)a2 + 2);
    *(_OWORD *)int v17 = v19;
    int v9 = v17 + 24;
    unsigned int v21 = (char *)*((void *)this + 2);
    int v20 = (char *)*((void *)this + 3);
    if (v20 != v21)
    {
      do
      {
        long long v22 = *(_OWORD *)(v20 - 24);
        *((_DWORD *)v17 - 2) = *((_DWORD *)v20 - 2);
        *(_OWORD *)(v17 - 24) = v22;
        v17 -= 24;
        v20 -= 24;
      }
      while (v20 != v21);
      int v20 = (char *)*v10;
    }
    *((void *)this + 2) = v17;
    *((void *)this + 3) = v9;
    *((void *)this + 4) = v18;
    if (v20) {
      operator delete(v20);
    }
  }
  else
  {
    long long v8 = *(_OWORD *)a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    int v9 = (char *)(v7 + 24);
  }
  *((void *)this + 3) = v9;
}

void **zilch::TrafficDynamicTile::addIncident(uint64_t a1, long long *a2)
{
  return std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::push_back[abi:ne180100]((uint64_t *)(a1 + 40), a2);
}

void **std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  double result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>>((uint64_t)result, v13);
    unint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)unint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::__swap_out_circular_buffer(a1, v18);
    int v9 = (void *)a1[1];
    double result = std::__split_buffer<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::~__split_buffer(v18);
  }
  else
  {
    void *v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    int v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_1890E8A64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

unint64_t zilch::TrafficDynamicTile::flowCount(zilch::TrafficDynamicTile *this)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 3) - *((void *)this + 2)) >> 3);
}

uint64_t zilch::TrafficDynamicTile::flow(zilch::TrafficDynamicTile *this, uint64_t a2)
{
  return *((void *)this + 2) + 24 * a2;
}

uint64_t zilch::TrafficDynamicTile::incidentCount(zilch::TrafficDynamicTile *this)
{
  return (uint64_t)(*((void *)this + 6) - *((void *)this + 5)) >> 4;
}

uint64_t zilch::TrafficDynamicTile::incident(zilch::TrafficDynamicTile *this, uint64_t a2)
{
  return *(void *)(*((void *)this + 5) + 16 * a2);
}

uint64_t zilch::TrafficDynamicTile::encode(zilch::TrafficDynamicTile *this, zilch::WriteBitstream *a2, unsigned int a3)
{
  if (a3 - 5 < 0xFFFFFFFC) {
    return 2;
  }
  zilch::WriteBitstream::put(a2, 1u, 8);
  unint64_t v7 = (uint64_t *)*((void *)this + 5);
  uint64_t v8 = (uint64_t *)*((void *)this + 6);
  unint64_t v9 = 126 - 2 * __clz(((char *)v8 - (char *)v7) >> 4);
  if (v8 == v7) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = v9;
  }
  std::__introsort<std::_ClassicAlgPolicy,zilch::SortIncidentsByType &,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *,false>(v7, v8, (uint64_t)&v67, v10, 1);
  memset(v78, 0, 24);
  long long v75 = 0;
  FunctionalClass v76 = 0;
  uint64_t v77 = 0;
  uint64_t v11 = *((void *)this + 5);
  if (*((void *)this + 6) != v11)
  {
    uint64_t v12 = 0;
    unint64_t v13 = 0;
    do
    {
      if (*(_DWORD *)(*(void *)(v11 + v12) + 64) == 7) {
        unint64_t v14 = &v75;
      }
      else {
        unint64_t v14 = v78;
      }
      std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::push_back[abi:ne180100]((uint64_t *)v14, (long long *)(v11 + v12));
      ++v13;
      uint64_t v11 = *((void *)this + 5);
      v12 += 16;
    }
    while (v13 < (*((void *)this + 6) - v11) >> 4);
  }
  uint64_t v15 = zilch::TrafficDynamicTile::encode_flows_and_incidents((uint64_t)this, a2, v78);
  uint64_t v3 = v15;
  if (a3 >= 2)
  {
    zilch::TrafficDynamicTile::encode_incident_attributes(v15, a2, v78);
    if (a3 >= 3)
    {
      uint64_t v16 = v75;
      long long v17 = v76;
      zilch::WriteBitstream::put(a2, v75 != v76);
      if (v16 != v17)
      {
        uint64_t v3 = zilch::TrafficDynamicTile::encode_incidents((uint64_t)this, a2, &v75);
        zilch::TrafficDynamicTile::encode_incident_attributes(v3, a2, &v75);
      }
    }
  }
  long long v19 = (char *)*((void *)this + 5);
  unsigned int v18 = (char *)*((void *)this + 6);
  unint64_t v20 = v18 - v19;
  if (v18 != v19)
  {
    unsigned int v21 = 0;
    do
    {
      uint64_t v22 = *(void *)v19;
      v19 += 16;
      if (*(unsigned __int8 *)(v22 + 166) != 255) {
        ++v21;
      }
    }
    while (v19 != v18);
    if (a3 >= 4 && v21)
    {
      zilch::WriteBitstream::align(a2);
      zilch::WriteBitstream::putVariableWidth(a2, v21);
      long long v73 = 0u;
      long long v74 = 0u;
      long long v71 = 0u;
      long long v72 = 0u;
      long long v69 = 0u;
      long long v70 = 0u;
      long long v67 = 0u;
      long long v68 = 0u;
      long long v65 = 0u;
      long long v66 = 0u;
      long long v63 = 0u;
      long long v64 = 0u;
      long long v62 = 0u;
      *(_OWORD *)double v60 = 0u;
      long long v61 = 0u;
      *(_OWORD *)FunctionalClass v59 = 0u;
      int v56 = 0;
      FormOfWay v57 = 0;
      uint64_t v58 = 0;
      unint64_t v53 = 0;
      size_t v54 = 0;
      uint64_t v55 = 0;
      unsigned int v23 = mgcl::ints::IntCompressor<unsigned char>::gclVersionMajor();
      zilch::WriteBitstream::putVariableWidth(a2, v23);
      unsigned int v24 = mgcl::ints::IntCompressor<unsigned char>::gclVersionMinor();
      zilch::WriteBitstream::putVariableWidth(a2, v24);
      zilch::WriteBitstream::putVariableWidth(a2, *((_DWORD *)this + 24));
      size_t v25 = (v20 >> 4);
      std::vector<unsigned char>::vector(&__p, v25);
      if ((v20 >> 4))
      {
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        do
        {
          *((unsigned char *)__p.__begin_ + v27++) = *(unsigned char *)(*(void *)(*((void *)this + 5) + v26) + 166);
          v26 += 16;
        }
        while (v25 != v27);
      }
      unint64_t v28 = mgcl::ints::IntCompressor<unsigned char>::estimateMaxCompressedSize((uint64_t)&v67, v21);
      char v29 = v56;
      int v30 = v57;
      if (v28 <= v57 - v56)
      {
        if (v28 < v57 - v56)
        {
          int v30 = &v56[v28];
          FormOfWay v57 = &v56[v28];
        }
      }
      else
      {
        std::vector<unsigned char>::__append((unint64_t *)&v56, v28 - (v57 - v56));
        char v29 = v56;
        int v30 = v57;
      }
      if (mgcl::ints::IntCompressor<unsigned char>::compress((uint64_t)&v67, (unsigned __int8 *)__p.__begin_, (char *)__p.__end_ - (char *)__p.__begin_, (uint64_t)v29, v30 - v29, v52, 0x1C0F07070FLL))
      {
        if (__p.__begin_)
        {
          __p.__end_ = __p.__begin_;
          operator delete(__p.__begin_);
        }
        int v31 = 1;
      }
      else
      {
        zilch::WriteBitstream::putVariableWidth(a2, v52[0]);
        zilch::WriteBitstream::putByteArray(a2, v56, v52[0]);
        if (__p.__begin_)
        {
          __p.__end_ = __p.__begin_;
          operator delete(__p.__begin_);
        }
        memset(&__p, 0, sizeof(__p));
        std::vector<int>::reserve(&__p, v21);
        if ((v20 >> 4))
        {
          uint64_t v32 = 0;
          do
          {
            Longitude v33 = *(unsigned __int8 **)(*((void *)this + 5) + 16 * v32);
            if (v33[166] != 255)
            {
              int v34 = zilch::GeoCoordinates::z((zilch::GeoCoordinates *)v33);
              LODWORD(v35) = *((_DWORD *)this + 24);
              unsigned int v36 = llround((double)v34 / (double)v35);
              std::vector<unsigned int>::pointer end = __p.__end_;
              if (__p.__end_ >= __p.__end_cap_.__value_)
              {
                std::vector<unsigned int>::pointer begin = __p.__begin_;
                int64_t v40 = __p.__end_ - __p.__begin_;
                unint64_t v41 = v40 + 1;
                if ((unint64_t)(v40 + 1) >> 62) {
                  std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
                }
                int64_t v42 = (char *)__p.__end_cap_.__value_ - (char *)__p.__begin_;
                if (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 1 > v41) {
                  unint64_t v41 = v42 >> 1;
                }
                if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v43 = v41;
                }
                if (v43)
                {
                  uint64_t v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&__p.__end_cap_, v43);
                  std::vector<unsigned int>::pointer begin = __p.__begin_;
                  std::vector<unsigned int>::pointer end = __p.__end_;
                }
                else
                {
                  uint64_t v44 = 0;
                }
                unsigned int v45 = (unsigned int *)&v44[4 * v40];
                unsigned int *v45 = v36;
                std::vector<int> v38 = v45 + 1;
                while (end != begin)
                {
                  unsigned int v46 = *--end;
                  *--unsigned int v45 = v46;
                }
                __p.__begin_ = v45;
                __p.__end_ = v38;
                __p.__end_cap_.__value_ = (unsigned int *)&v44[4 * v43];
                if (begin) {
                  operator delete(begin);
                }
              }
              else
              {
                *__p.__end_ = v36;
                std::vector<int> v38 = end + 1;
              }
              __p.__end_ = v38;
            }
            ++v32;
          }
          while (v32 != v25);
        }
        if (v21 == __p.__end_ - __p.__begin_
          && (unint64_t v47 = mgcl::ints::IntCompressor<unsigned char>::estimateMaxCompressedSize((uint64_t)v59, v21),
              std::vector<unsigned char>::resize((unint64_t *)&v56, v47),
              !mgcl::ints::IntCompressor<int>::compress((uint64_t)v59, (int *)__p.__begin_, __p.__end_ - __p.__begin_, (uint64_t)v56, v57 - v56, v52, 0x1C0F07070FLL)))
        {
          zilch::WriteBitstream::putVariableWidth(a2, v52[0]);
          zilch::WriteBitstream::putByteArray(a2, v56, v52[0]);
          int v31 = 0;
        }
        else
        {
          int v31 = 1;
        }
        if (__p.__begin_)
        {
          __p.__end_ = __p.__begin_;
          operator delete(__p.__begin_);
        }
      }
      if (v53)
      {
        size_t v54 = v53;
        operator delete(v53);
      }
      if (v56)
      {
        FormOfWay v57 = v56;
        operator delete(v56);
      }
      unint64_t v48 = (mgcl::iarray::Encoder *)*((void *)&v66 + 1);
      *((void *)&v66 + 1) = 0;
      if (v48)
      {
        mgcl::iarray::Encoder::~Encoder(v48);
        MEMORY[0x18C11F580]();
      }
      if ((void)v65)
      {
        *((void *)&v65 + 1) = v65;
        operator delete((void *)v65);
      }
      if (*((void *)&v63 + 1))
      {
        *(void *)&long long v64 = *((void *)&v63 + 1);
        operator delete(*((void **)&v63 + 1));
      }
      if ((void)v62)
      {
        *((void *)&v62 + 1) = v62;
        operator delete((void *)v62);
      }
      if (v60[1])
      {
        *(void **)&long long v61 = v60[1];
        operator delete(v60[1]);
      }
      if (v59[0])
      {
        v59[1] = v59[0];
        operator delete(v59[0]);
      }
      uint64_t v49 = (mgcl::iarray::Encoder *)*((void *)&v74 + 1);
      *((void *)&v74 + 1) = 0;
      if (v49)
      {
        mgcl::iarray::Encoder::~Encoder(v49);
        MEMORY[0x18C11F580]();
      }
      if ((void)v73)
      {
        *((void *)&v73 + 1) = v73;
        operator delete((void *)v73);
      }
      if (*((void *)&v71 + 1))
      {
        *(void *)&long long v72 = *((void *)&v71 + 1);
        operator delete(*((void **)&v71 + 1));
      }
      if ((void)v70)
      {
        *((void *)&v70 + 1) = v70;
        operator delete((void *)v70);
      }
      if (*((void *)&v68 + 1))
      {
        *(void *)&long long v69 = *((void *)&v68 + 1);
        operator delete(*((void **)&v68 + 1));
      }
      if ((void)v67)
      {
        *((void *)&v67 + 1) = v67;
        operator delete((void *)v67);
      }
      if (v31) {
        uint64_t v3 = 1;
      }
    }
  }
  *(void *)&long long v67 = &v75;
  std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
  *(void *)&long long v67 = v78;
  std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
  return v3;
}

void sub_1890E9098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  if (a18) {
    operator delete(a18);
  }
  mgcl::ints::IntCompressor<int>::~IntCompressor((uint64_t)&a21);
  mgcl::ints::IntCompressor<int>::~IntCompressor((uint64_t)&a37);
  a37 = v37 - 144;
  std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a37);
  a37 = v37 - 120;
  std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a37);
  _Unwind_Resume(a1);
}

uint64_t zilch::TrafficDynamicTile::encode_flows_and_incidents(uint64_t a1, zilch::WriteBitstream *this, uint64_t **a3)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  zilch::WriteBitstream::putVariableWidth(this, *(_DWORD *)a1);
  uint64_t v7 = *(void *)(a1 + 16);
  unint64_t v6 = *(__n128 **)(a1 + 24);
  uint64_t v8 = v6;
  uint64_t v9 = v7;
  uint64_t v10 = (uint64_t)v6;
  if ((__n128 *)v7 != v6)
  {
    uint64_t v11 = *(__n128 **)(a1 + 16);
    while (1)
    {
      float v12 = v11->n128_f32[2];
      if (v12 >= 1.0 || v12 < 0.0) {
        break;
      }
      float v13 = v11->n128_f32[3];
      BOOL v14 = v13 > v12 && v13 <= 1.0;
      if (!v14 || v13 <= 0.0) {
        break;
      }
      uint64_t v11 = (__n128 *)((char *)v11 + 24);
      if (v11 == v6) {
        goto LABEL_28;
      }
    }
    if (v11 != v6)
    {
      uint64_t v15 = (__n128 *)((char *)v11 + 24);
      if (&v11[1].n128_i8[8] != (__int8 *)v6)
      {
        do
        {
          float v16 = v15->n128_f32[2];
          if (v16 < 1.0 && v16 >= 0.0)
          {
            float v17 = v15->n128_f32[3];
            BOOL v18 = v17 > v16 && v17 <= 1.0;
            if (v18 && v17 > 0.0)
            {
              __n128 v19 = *v15;
              v11[1].n128_u32[0] = v15[1].n128_u32[0];
              *uint64_t v11 = v19;
              uint64_t v11 = (__n128 *)((char *)v11 + 24);
            }
          }
          uint64_t v15 = (__n128 *)((char *)v15 + 24);
        }
        while (v15 != v6);
        uint64_t v9 = *(void *)(a1 + 16);
        uint64_t v8 = *(__n128 **)(a1 + 24);
      }
    }
    if (v11 != v8)
    {
      uint64_t v10 = v9;
      uint64_t v8 = v11;
      *(void *)(a1 + 24) = v11;
      goto LABEL_29;
    }
LABEL_28:
    uint64_t v10 = v9;
  }
LABEL_29:
  unint64_t v20 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v8 - v9) >> 3));
  if (v8 == (__n128 *)v9) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = v20;
  }
  BOOL v22 = (char *)v6 - v7 != (char *)v8 - v10;
  std::__introsort<std::_ClassicAlgPolicy,zilch::SortFlowsBySpeedClass &,zilch::TrafficDynamicTile::Flow *,false>(v9, v8, (uint64_t)&v82, v21, 1);
  unsigned int v84 = 0;
  uint64_t v85 = 0;
  std::vector<unsigned int> __p = 0;
  std::vector<zilch::TrafficDynamicTile::Flow>::__init_with_size[abi:ne180100]<zilch::TrafficDynamicTile::Flow*,zilch::TrafficDynamicTile::Flow*>(&__p, *(const void **)(a1 + 16), *(void *)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3));
  unsigned int v23 = -1431655765 * ((v84 - (unsigned char *)__p) >> 3);
  zilch::WriteBitstream::putVariableWidth(this, v23);
  if (__p)
  {
    unsigned int v84 = __p;
    operator delete(__p);
  }
  unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3);
  if (HIDWORD(v24))
  {
    std::to_string(&v81, v24);
    size_t v25 = std::string::insert(&v81, 0, "Too many flows for the tile. Received: ");
    long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v88.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    uint64_t v27 = std::string::append(&v88, ". Expected at most: ");
    long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v82.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v80, 0xFFFFFFFFuLL);
    if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v29 = &v80;
    }
    else {
      char v29 = (std::string *)v80.__r_.__value_.__r.__words[0];
    }
    if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v80.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v80.__r_.__value_.__l.__size_;
    }
    int v31 = std::string::append(&v82, (const std::string::value_type *)v29, size);
    std::string::size_type v32 = v31->__r_.__value_.__r.__words[0];
    v86.__r_.__value_.__r.__words[0] = v31->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v86.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v31->__r_.__value_.__r.__words[1] + 7);
    char v33 = HIBYTE(v31->__r_.__value_.__r.__words[2]);
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    if (*(char *)(a1 + 95) < 0) {
      operator delete(*(void **)(a1 + 72));
    }
    std::string::size_type v34 = v86.__r_.__value_.__r.__words[0];
    *(void *)(a1 + 72) = v32;
    *(void *)(a1 + 80) = v34;
    *(void *)(a1 + 87) = *(std::string::size_type *)((char *)v86.__r_.__value_.__r.__words + 7);
    *(unsigned char *)(a1 + 95) = v33;
    if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v80.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v82.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v88.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v81.__r_.__value_.__l.__data_);
    }
    *(_DWORD *)(a1 + 64) = 5;
    return 4;
  }
  zilch::TrafficSegmentList::TrafficSegmentList((zilch::TrafficSegmentList *)&v82, v23);
  if (v23)
  {
    for (uint64_t i = 0; i != v23; *(void *)zilch::TrafficSegmentList::operator[](&v82, i++) = v37)
      uint64_t v37 = *(void *)(*(void *)(a1 + 16) + 24 * i);
  }
  zilch::TrafficSegmentList::encode((zilch::TrafficSegmentList *)&v82, this);
  if (v23)
  {
    uint64_t v38 = *(void *)(a1 + 16);
    BOOL v39 = 0;
    if (*(float *)(v38 + 8) == 0.0)
    {
      int64_t v40 = (float *)(v38 + 32);
      unint64_t v41 = 1;
      do
      {
        if (*(v40 - 5) != 1.0) {
          break;
        }
        BOOL v39 = v41 >= v23;
        if (v23 == v41) {
          break;
        }
        float v42 = *v40;
        v40 += 6;
        ++v41;
      }
      while (v42 == 0.0);
    }
  }
  else
  {
    BOOL v39 = 1;
  }
  zilch::WriteBitstream::put(this, v39);
  if (v39)
  {
LABEL_85:
    *(_OWORD *)&v88.__r_.__value_.__l.__data_ = 0uLL;
    if (v23)
    {
      int v51 = 0;
      uint64_t v52 = v23;
      unint64_t v53 = (int *)(*(void *)(a1 + 16) + 16);
      do
      {
        int v55 = *v53;
        v53 += 6;
        int v54 = v55;
        if (v55 > v51) {
          int v51 = v54;
        }
        if (v51 <= 3) {
          ++*((_DWORD *)&v88.__r_.__value_.__l.__data_ + v51);
        }
        --v52;
      }
      while (v52);
      unsigned int data = v88.__r_.__value_.__l.__data_;
    }
    else
    {
      unsigned int data = 0;
    }
    goto LABEL_95;
  }
  if (!v23)
  {
    unsigned int data = 0;
    *(_OWORD *)&v88.__r_.__value_.__l.__data_ = 0uLL;
LABEL_95:
    zilch::WriteBitstream::putVariableWidth(this, data);
    zilch::WriteBitstream::putVariableWidth(this, HIDWORD(v88.__r_.__value_.__r.__words[0]));
    zilch::WriteBitstream::putVariableWidth(this, v88.__r_.__value_.__r.__words[1]);
    zilch::WriteBitstream::putVariableWidth(this, HIDWORD(v88.__r_.__value_.__r.__words[1]));
    unsigned int v57 = zilch::TrafficDynamicTile::encode_incidents(a1, this, a3);
    if (v57) {
      uint64_t v35 = v57;
    }
    else {
      uint64_t v35 = (4 * v22);
    }
    goto LABEL_98;
  }
  unint64_t v43 = 0;
  uint64_t v44 = 8;
  while (1)
  {
    float v45 = *(float *)(*(void *)(a1 + 16) + v44);
    if (v45 != 0.0) {
      break;
    }
    zilch::WriteBitstream::put(this, 1u);
LABEL_74:
    ++v43;
    v44 += 24;
    if (v23 == v43)
    {
      unint64_t v47 = 0;
      uint64_t v48 = 12;
      while (1)
      {
        float v49 = *(float *)(*(void *)(a1 + 16) + v48);
        if (v49 == 1.0)
        {
          zilch::WriteBitstream::put(this, 1u);
        }
        else
        {
          if (v49 <= 0.0 || v49 >= 1.0)
          {
            std::to_string(&v80, v47);
            long long v70 = std::string::insert(&v80, 0, "Invalid end offset for flow number: ");
            long long v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
            v81.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v71;
            v70->__r_.__value_.__l.__size_ = 0;
            v70->__r_.__value_.__r.__words[2] = 0;
            v70->__r_.__value_.__r.__words[0] = 0;
            long long v72 = std::string::append(&v81, " having value: ");
            long long v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
            v88.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v73;
            v72->__r_.__value_.__l.__size_ = 0;
            v72->__r_.__value_.__r.__words[2] = 0;
            v72->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v86, *(float *)(*(void *)(a1 + 16) + v48));
            if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              long long v74 = &v86;
            }
            else {
              long long v74 = (std::string *)v86.__r_.__value_.__r.__words[0];
            }
            if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v75 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v75 = v86.__r_.__value_.__l.__size_;
            }
            FunctionalClass v76 = std::string::append(&v88, (const std::string::value_type *)v74, v75);
            std::string::size_type v77 = v76->__r_.__value_.__r.__words[0];
            v87[0] = v76->__r_.__value_.__l.__size_;
            *(void *)((char *)v87 + 7) = *(std::string::size_type *)((char *)&v76->__r_.__value_.__r.__words[1] + 7);
            char v78 = HIBYTE(v76->__r_.__value_.__r.__words[2]);
            v76->__r_.__value_.__l.__size_ = 0;
            v76->__r_.__value_.__r.__words[2] = 0;
            v76->__r_.__value_.__r.__words[0] = 0;
            if (*(char *)(a1 + 95) < 0) {
              operator delete(*(void **)(a1 + 72));
            }
            uint64_t v79 = v87[0];
            *(void *)(a1 + 72) = v77;
            *(void *)(a1 + 80) = v79;
            *(void *)(a1 + 87) = *(void *)((char *)v87 + 7);
            *(unsigned char *)(a1 + 95) = v78;
            if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v86.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v88.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v81.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v80.__r_.__value_.__l.__data_);
            }
            int v69 = 3;
            goto LABEL_134;
          }
          zilch::WriteBitstream::put(this, 0);
          zilch::WriteBitstream::put(this, (float)(*(float *)(*(void *)(a1 + 16) + v48) * 255.0), 8);
        }
        ++v47;
        v48 += 24;
        if (v23 == v47) {
          goto LABEL_85;
        }
      }
    }
  }
  if (v45 > 0.0 && v45 < 1.0)
  {
    zilch::WriteBitstream::put(this, 0);
    zilch::WriteBitstream::put(this, (float)(*(float *)(*(void *)(a1 + 16) + v44) * 255.0), 8);
    goto LABEL_74;
  }
  std::to_string(&v80, v43);
  FunctionalClass v59 = std::string::insert(&v80, 0, "Invalid start offset for flow number: ");
  long long v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
  v81.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v60;
  v59->__r_.__value_.__l.__size_ = 0;
  v59->__r_.__value_.__r.__words[2] = 0;
  v59->__r_.__value_.__r.__words[0] = 0;
  long long v61 = std::string::append(&v81, " having value: ");
  long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
  v88.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v62;
  v61->__r_.__value_.__l.__size_ = 0;
  v61->__r_.__value_.__r.__words[2] = 0;
  v61->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v86, *(float *)(*(void *)(a1 + 16) + v44));
  if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v63 = &v86;
  }
  else {
    long long v63 = (std::string *)v86.__r_.__value_.__r.__words[0];
  }
  if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v64 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v64 = v86.__r_.__value_.__l.__size_;
  }
  long long v65 = std::string::append(&v88, (const std::string::value_type *)v63, v64);
  std::string::size_type v66 = v65->__r_.__value_.__r.__words[0];
  v87[0] = v65->__r_.__value_.__l.__size_;
  *(void *)((char *)v87 + 7) = *(std::string::size_type *)((char *)&v65->__r_.__value_.__r.__words[1] + 7);
  char v67 = HIBYTE(v65->__r_.__value_.__r.__words[2]);
  v65->__r_.__value_.__l.__size_ = 0;
  v65->__r_.__value_.__r.__words[2] = 0;
  v65->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  uint64_t v68 = v87[0];
  *(void *)(a1 + 72) = v66;
  *(void *)(a1 + 80) = v68;
  *(void *)(a1 + 87) = *(void *)((char *)v87 + 7);
  *(unsigned char *)(a1 + 95) = v67;
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v86.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v88.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v81.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v80.__r_.__value_.__l.__data_);
  }
  int v69 = 1;
LABEL_134:
  *(_DWORD *)(a1 + 64) = v69;
  uint64_t v35 = 4;
LABEL_98:
  zilch::TrafficSegmentList::~TrafficSegmentList((zilch::TrafficSegmentList *)&v82);
  return v35;
}

void sub_1890E9948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v38 - 121) < 0) {
    operator delete(*(void **)(v38 - 144));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  zilch::TrafficSegmentList::~TrafficSegmentList((zilch::TrafficSegmentList *)&a23);
  _Unwind_Resume(a1);
}

void zilch::TrafficDynamicTile::encode_incident_attributes(uint64_t a1, zilch::WriteBitstream *a2, uint64_t **a3)
{
  unint64_t v5 = (char *)a3[1] - (char *)*a3;
  unint64_t v6 = v5 >> 4;
  zilch::TrafficDynamicTile::Incident::Incident((zilch::TrafficDynamicTile::Incident *)v24);
  if ((v5 >> 4))
  {
    unsigned int v7 = 0;
    LOBYTE(v8) = 0;
    LOBYTE(v9) = 0;
    uint64_t v10 = *a3;
    uint64_t v11 = (v5 >> 4);
    do
    {
      unsigned int v9 = (v9 & 1) != 0 || *(_DWORD *)(*v10 + 160) != v33;
      uint64_t v12 = *v10;
      unsigned int v8 = (v8 & 1) != 0 || *(unsigned __int8 *)(v12 + 164) != v34;
      unsigned int v13 = *(unsigned __int8 *)(v12 + 165);
      if (v13 < 0xF && v13 != v35) {
        ++v7;
      }
      v10 += 2;
      --v11;
    }
    while (v11);
  }
  else
  {
    unsigned int v9 = 0;
    unsigned int v8 = 0;
    unsigned int v7 = 0;
  }
  zilch::WriteBitstream::put(a2, v9);
  if (v6) {
    unsigned int v15 = v9;
  }
  else {
    unsigned int v15 = 0;
  }
  if (v15 == 1)
  {
    unint64_t v16 = 0;
    do
    {
      unsigned int v17 = 0;
      switch(*(_DWORD *)((*a3)[v16 / 8] + 160))
      {
        case 1:
          goto LABEL_28;
        case 2:
          zilch::WriteBitstream::put(a2, 1u);
          unsigned int v17 = 0;
          goto LABEL_26;
        case 3:
          zilch::WriteBitstream::put(a2, 1u);
          unsigned int v17 = 0;
          goto LABEL_28;
        case 4:
          unsigned int v17 = 1;
          zilch::WriteBitstream::put(a2, 1u);
          goto LABEL_26;
        case 5:
          unsigned int v17 = 1;
          zilch::WriteBitstream::put(a2, 1u);
LABEL_28:
          zilch::WriteBitstream::put(a2, v17);
          unsigned int v18 = 1;
          break;
        default:
LABEL_26:
          zilch::WriteBitstream::put(a2, v17);
          unsigned int v18 = 0;
          break;
      }
      zilch::WriteBitstream::put(a2, v18);
      v16 += 16;
    }
    while ((v5 & 0xFFFFFFFF0) != v16);
  }
  zilch::WriteBitstream::put(a2, v8);
  if (v6) {
    unsigned int v19 = v8;
  }
  else {
    unsigned int v19 = 0;
  }
  if (v19 == 1)
  {
    unint64_t v20 = 0;
    do
    {
      zilch::WriteBitstream::put(a2, *(unsigned __int8 *)((*a3)[v20 / 8] + 164) - 8, 3);
      v20 += 16;
    }
    while ((v5 & 0xFFFFFFFF0) != v20);
  }
  zilch::WriteBitstream::putVariableWidth(a2, v7);
  if (v7 && v6)
  {
    unint64_t v21 = 0;
    unsigned int v22 = 0;
    do
    {
      if (*(unsigned __int8 *)((*a3)[v21 / 8] + 165) != v35)
      {
        zilch::WriteBitstream::putVariableWidth(a2, v22);
        unsigned int v23 = *(unsigned __int8 *)((*a3)[v21 / 8] + 165);
        if (v23 >= 0xF) {
          unsigned int v23 = 15;
        }
        zilch::WriteBitstream::put(a2, v23 - 8, 3);
      }
      ++v22;
      v21 += 16;
    }
    while ((v5 & 0xFFFFFFFF0) != v21);
  }
  if (v32 < 0) {
    operator delete(__p);
  }
  if (v30 < 0) {
    operator delete(v29);
  }
  if (v28 < 0) {
    operator delete(v27);
  }
  if (v26 < 0) {
    operator delete(v25);
  }
}

void sub_1890E9D38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  zilch::TrafficDynamicTile::Incident::~Incident((void **)va);
  _Unwind_Resume(a1);
}

uint64_t zilch::TrafficDynamicTile::encode_incidents(uint64_t a1, zilch::WriteBitstream *a2, uint64_t **a3)
{
  uint64_t v110 = *MEMORY[0x1E4F143B8];
  uint64_t v104 = 0;
  uint64_t v105 = 0;
  uint64_t v103 = 0;
  std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::__init_with_size[abi:ne180100]<std::shared_ptr<zilch::TrafficDynamicTile::Incident>*,std::shared_ptr<zilch::TrafficDynamicTile::Incident>*>(&v103, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
  unint64_t v6 = v104 - v103;
  unint64_t v7 = (unint64_t)(v104 - v103) >> 4;
  zilch::WriteBitstream::putVariableWidth(a2, v7);
  v101.__r_.__value_.__r.__words[0] = (std::string::size_type)&v103;
  std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v101);
  unsigned int v8 = *a3;
  uint64_t v9 = (char *)a3[1] - (char *)*a3;
  if ((unint64_t)v9 >= 0xFFFFFFFF1)
  {
    std::to_string(&v108, v9 >> 4);
    uint64_t v10 = std::string::insert(&v108, 0, "Too many incidents for the tile. Received: ");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v99.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    uint64_t v12 = std::string::append(&v99, ". Expected at most: ");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v101.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v102, 0xFFFFFFFFuLL);
    if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      BOOL v14 = &v102;
    }
    else {
      BOOL v14 = (std::string *)v102.__r_.__value_.__r.__words[0];
    }
    if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v102.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v102.__r_.__value_.__l.__size_;
    }
    unint64_t v16 = std::string::append(&v101, (const std::string::value_type *)v14, size);
    std::string::size_type v17 = v16->__r_.__value_.__r.__words[0];
    *(void *)&long long v106 = v16->__r_.__value_.__l.__size_;
    *(void *)((char *)&v106 + 7) = *(std::string::size_type *)((char *)&v16->__r_.__value_.__r.__words[1] + 7);
    char v18 = HIBYTE(v16->__r_.__value_.__r.__words[2]);
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if (*(char *)(a1 + 95) < 0) {
      operator delete(*(void **)(a1 + 72));
    }
    uint64_t v19 = v106;
    *(void *)(a1 + 72) = v17;
    *(void *)(a1 + 80) = v19;
    *(void *)(a1 + 87) = *(void *)((char *)&v106 + 7);
    *(unsigned char *)(a1 + 95) = v18;
    if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v102.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v101.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v99.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v108.__r_.__value_.__l.__data_);
    }
    *(_DWORD *)(a1 + 64) = 7;
    return 4;
  }
  memset(&v108, 0, sizeof(v108));
  unsigned int v109 = 0;
  unint64_t v93 = v6;
  unint64_t v21 = (v6 >> 4);
  if (v7)
  {
    LOBYTE(v22) = 0;
    LOBYTE(v23) = 0;
    LOBYTE(v24) = 0;
    LOBYTE(v25) = 0;
    LOBYTE(v26) = 0;
    int v27 = 0;
    unint64_t v28 = v21;
    while (1)
    {
      uint64_t v29 = *v8;
      if (*(_DWORD *)(*v8 + 64) > v27) {
        int v27 = *(_DWORD *)(*v8 + 64);
      }
      if (v27 <= 6) {
        ++*((_DWORD *)&v108.__r_.__value_.__l.__data_ + v27);
      }
      if (v26)
      {
        BOOL v26 = 1;
        if ((v25 & 1) == 0) {
          goto LABEL_27;
        }
      }
      else
      {
        if (*(char *)(v29 + 39) < 0) {
          uint64_t v30 = *(void *)(v29 + 24);
        }
        else {
          uint64_t v30 = *(unsigned __int8 *)(v29 + 39);
        }
        BOOL v26 = v30 != 0;
        if ((v25 & 1) == 0)
        {
LABEL_27:
          unsigned int v25 = *(void *)(v29 + 120) != 0;
          if ((v24 & 1) == 0) {
            goto LABEL_28;
          }
          goto LABEL_36;
        }
      }
      unsigned int v25 = 1;
      if ((v24 & 1) == 0)
      {
LABEL_28:
        unsigned int v24 = *(void *)(v29 + 128) != 0;
        if ((v23 & 1) == 0) {
          goto LABEL_29;
        }
        goto LABEL_37;
      }
LABEL_36:
      unsigned int v24 = 1;
      if ((v23 & 1) == 0)
      {
LABEL_29:
        unsigned int v23 = *(void *)(v29 + 136) != 0;
        if (v22) {
          goto LABEL_38;
        }
        goto LABEL_30;
      }
LABEL_37:
      unsigned int v23 = 1;
      if (v22)
      {
LABEL_38:
        unsigned int v22 = 1;
        goto LABEL_39;
      }
LABEL_30:
      unsigned int v22 = *(unsigned __int8 *)(v29 + 156) != 0;
LABEL_39:
      v8 += 2;
      if (!--v28)
      {
        unsigned int data = v108.__r_.__value_.__l.__data_;
        unsigned int v32 = HIDWORD(v108.__r_.__value_.__r.__words[0]);
        unsigned int v96 = HIDWORD(v108.__r_.__value_.__r.__words[1]);
        unsigned int v97 = v108.__r_.__value_.__r.__words[1];
        *(void *)long long v94 = __PAIR64__(v26, v108.__r_.__value_.__r.__words[2]);
        goto LABEL_42;
      }
    }
  }
  *(void *)long long v94 = 0;
  unsigned int v96 = 0;
  unsigned int v97 = 0;
  unsigned int v32 = 0;
  unsigned int data = 0;
  unsigned int v25 = 0;
  unsigned int v24 = 0;
  unsigned int v23 = 0;
  unsigned int v22 = 0;
LABEL_42:
  unsigned int v95 = v7;
  zilch::WriteBitstream::putVariableWidth(a2, data);
  zilch::WriteBitstream::putVariableWidth(a2, v32);
  zilch::WriteBitstream::putVariableWidth(a2, v97);
  zilch::WriteBitstream::putVariableWidth(a2, v96);
  zilch::WriteBitstream::putVariableWidth(a2, *(unsigned int *)v94);
  zilch::StringList::StringList((zilch::StringList *)&v101);
  *(void *)unint64_t v98 = a1;
  if (v7)
  {
    unint64_t v33 = 0;
    do
    {
      uint64_t v34 = (*a3)[v33 / 8];
      zilch::StringList::addString((zilch::StringList *)&v101, (const zilch::String *)(v34 + 72));
      zilch::StringList::addString((zilch::StringList *)&v101, (const zilch::String *)(v34 + 40));
      zilch::StringList::addString((zilch::StringList *)&v101, (const zilch::String *)(v34 + 96));
      v33 += 16;
    }
    while ((v93 & 0xFFFFFFFF0) != v33);
  }
  zilch::StringList::encode((zilch::StringList *)&v101, a2);
  zilch::TrafficSegmentList::TrafficSegmentList((zilch::TrafficSegmentList *)&v102, v95);
  if (v21)
  {
    uint64_t v35 = 0;
    for (uint64_t i = 0; i != v21; ++i)
    {
      uint64_t v37 = *(void *)((*a3)[v35] + 144);
      *(void *)zilch::TrafficSegmentList::operator[](&v102, i) = v37;
      v35 += 2;
    }
  }
  zilch::TrafficSegmentList::encode((zilch::TrafficSegmentList *)&v102, a2);
  zilch::WriteBitstream::put(a2, 0);
  zilch::WriteBitstream::put(a2, 0);
  zilch::WriteBitstream::put(a2, v25);
  if (v25)
  {
    std::vector<unsigned long long>::vector(&v99, v21);
    uint64_t v38 = (zilch::WriteBitstream *)v99.__r_.__value_.__r.__words[0];
    if (v95)
    {
      BOOL v39 = *a3;
      unint64_t v40 = v21;
      unint64_t v41 = (void *)v99.__r_.__value_.__r.__words[0];
      do
      {
        uint64_t v42 = *v39;
        v39 += 2;
        *v41++ = *(void *)(v42 + 120);
        --v40;
      }
      while (v40);
    }
    int v43 = zilch::WriteBitstream::computeOptimalRiceBits64(v38, (const unint64_t *)v21);
    zilch::WriteBitstream::putEliasGamma(a2, v43 + 1);
    if (v95)
    {
      uint64_t v44 = 0;
      do
      {
        zilch::WriteBitstream::putRice64(a2, *(void *)(v99.__r_.__value_.__r.__words[0] + v44), v43);
        v44 += 8;
      }
      while (8 * v21 != v44);
    }
    if (v99.__r_.__value_.__r.__words[0])
    {
      v99.__r_.__value_.__l.__size_ = v99.__r_.__value_.__r.__words[0];
      operator delete(v99.__r_.__value_.__l.__data_);
    }
  }
  zilch::WriteBitstream::put(a2, v24);
  if (v24)
  {
    std::vector<unsigned long long>::vector(&v99, v21);
    float v45 = (zilch::WriteBitstream *)v99.__r_.__value_.__r.__words[0];
    if (v95)
    {
      unsigned int v46 = *a3;
      unint64_t v47 = v21;
      uint64_t v48 = (void *)v99.__r_.__value_.__r.__words[0];
      do
      {
        uint64_t v49 = *v46;
        v46 += 2;
        *v48++ = *(void *)(v49 + 128);
        --v47;
      }
      while (v47);
    }
    int v50 = zilch::WriteBitstream::computeOptimalRiceBits64(v45, (const unint64_t *)v21);
    zilch::WriteBitstream::putEliasGamma(a2, v50 + 1);
    if (v95)
    {
      uint64_t v51 = 0;
      do
      {
        zilch::WriteBitstream::putRice64(a2, *(void *)(v99.__r_.__value_.__r.__words[0] + v51), v50);
        v51 += 8;
      }
      while (8 * v21 != v51);
    }
    if (v99.__r_.__value_.__r.__words[0])
    {
      v99.__r_.__value_.__l.__size_ = v99.__r_.__value_.__r.__words[0];
      operator delete(v99.__r_.__value_.__l.__data_);
    }
  }
  zilch::WriteBitstream::put(a2, v23);
  if (v23)
  {
    std::vector<unsigned long long>::vector(&v99, v21);
    uint64_t v52 = (zilch::WriteBitstream *)v99.__r_.__value_.__r.__words[0];
    if (v95)
    {
      unint64_t v53 = *a3;
      unint64_t v54 = v21;
      int v55 = (void *)v99.__r_.__value_.__r.__words[0];
      do
      {
        uint64_t v56 = *v53;
        v53 += 2;
        *v55++ = *(void *)(v56 + 136);
        --v54;
      }
      while (v54);
    }
    int v57 = zilch::WriteBitstream::computeOptimalRiceBits64(v52, (const unint64_t *)v21);
    zilch::WriteBitstream::putEliasGamma(a2, v57 + 1);
    if (v95)
    {
      uint64_t v58 = 0;
      do
      {
        zilch::WriteBitstream::putRice64(a2, *(void *)(v99.__r_.__value_.__r.__words[0] + v58), v57);
        v58 += 8;
      }
      while (8 * v21 != v58);
    }
    if (v99.__r_.__value_.__r.__words[0])
    {
      v99.__r_.__value_.__l.__size_ = v99.__r_.__value_.__r.__words[0];
      operator delete(v99.__r_.__value_.__l.__data_);
    }
  }
  zilch::WriteBitstream::putVariableWidth64(a2, *(void *)(*(void *)v98 + 8));
  if (*a3 != a3[1])
  {
    uint64_t v59 = 0;
    memset(&v99, 0, sizeof(v99));
    long long v106 = 0uLL;
    unint64_t v107 = 0;
    do
    {
      int v100 = zilch::GeoCoordinates::x((zilch::GeoCoordinates *)(*a3)[2 * v59]);
      int v60 = zilch::Longitude::toUint32((zilch::Longitude *)&v100);
      int v61 = v60;
      std::string::size_type v62 = v99.__r_.__value_.__l.__size_;
      if (v99.__r_.__value_.__l.__size_ >= v99.__r_.__value_.__r.__words[2])
      {
        std::string::size_type v64 = (void *)v99.__r_.__value_.__r.__words[0];
        uint64_t v65 = (uint64_t)(v99.__r_.__value_.__l.__size_ - v99.__r_.__value_.__r.__words[0]) >> 2;
        unint64_t v66 = v65 + 1;
        if ((unint64_t)(v65 + 1) >> 62) {
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        }
        int64_t v67 = v99.__r_.__value_.__r.__words[2] - v99.__r_.__value_.__r.__words[0];
        if ((uint64_t)(v99.__r_.__value_.__r.__words[2] - v99.__r_.__value_.__r.__words[0]) >> 1 > v66) {
          unint64_t v66 = v67 >> 1;
        }
        if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v68 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v68 = v66;
        }
        if (v68)
        {
          int v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v99.__r_.__value_.__r.__words[2], v68);
          std::string::size_type v62 = v99.__r_.__value_.__l.__size_;
          std::string::size_type v64 = (void *)v99.__r_.__value_.__r.__words[0];
        }
        else
        {
          int v69 = 0;
        }
        long long v70 = &v69[4 * v65];
        *(_DWORD *)long long v70 = v61;
        std::string::size_type v63 = (std::string::size_type)(v70 + 4);
        while ((void *)v62 != v64)
        {
          int v71 = *(_DWORD *)(v62 - 4);
          v62 -= 4;
          *((_DWORD *)v70 - 1) = v71;
          v70 -= 4;
        }
        v99.__r_.__value_.__r.__words[0] = (std::string::size_type)v70;
        v99.__r_.__value_.__l.__size_ = v63;
        v99.__r_.__value_.__r.__words[2] = (std::string::size_type)&v69[4 * v68];
        if (v64) {
          operator delete(v64);
        }
      }
      else
      {
        *(_DWORD *)v99.__r_.__value_.__l.__size_ = v60;
        std::string::size_type v63 = v62 + 4;
      }
      v99.__r_.__value_.__l.__size_ = v63;
      int v100 = zilch::GeoCoordinates::y((zilch::GeoCoordinates *)(*a3)[2 * v59]);
      int v72 = zilch::Latitude::toUint32((zilch::Latitude *)&v100);
      int v73 = v72;
      long long v74 = (char *)*((void *)&v106 + 1);
      if (*((void *)&v106 + 1) >= (unint64_t)v107)
      {
        FunctionalClass v76 = (char *)v106;
        uint64_t v77 = (uint64_t)(*((void *)&v106 + 1) - v106) >> 2;
        unint64_t v78 = v77 + 1;
        if ((unint64_t)(v77 + 1) >> 62) {
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v79 = (uint64_t)&v107[-v106];
        if ((uint64_t)&v107[-v106] >> 1 > v78) {
          unint64_t v78 = v79 >> 1;
        }
        if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v80 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v80 = v78;
        }
        if (v80)
        {
          std::string v81 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v107, v80);
          long long v74 = (char *)*((void *)&v106 + 1);
          FunctionalClass v76 = (char *)v106;
        }
        else
        {
          std::string v81 = 0;
        }
        std::string v82 = &v81[4 * v77];
        *(_DWORD *)std::string v82 = v73;
        std::string::size_type v75 = v82 + 4;
        while (v74 != v76)
        {
          int v83 = *((_DWORD *)v74 - 1);
          v74 -= 4;
          *((_DWORD *)v82 - 1) = v83;
          v82 -= 4;
        }
        *(void *)&long long v106 = v82;
        *((void *)&v106 + 1) = v75;
        unint64_t v107 = &v81[4 * v80];
        if (v76) {
          operator delete(v76);
        }
      }
      else
      {
        **((_DWORD **)&v106 + 1) = v72;
        std::string::size_type v75 = v74 + 4;
      }
      *((void *)&v106 + 1) = v75;
      ++v59;
    }
    while (v59 != v21);
    int v84 = zilch::WriteBitstream::computeOptimalRiceBits((zilch::WriteBitstream *)v99.__r_.__value_.__l.__data_, (const unsigned int *)((uint64_t)(v99.__r_.__value_.__l.__size_ - v99.__r_.__value_.__r.__words[0]) >> 2));
    int v85 = zilch::WriteBitstream::computeOptimalRiceBits((zilch::WriteBitstream *)v106, (const unsigned int *)((uint64_t)(*((void *)&v106 + 1) - v106) >> 2));
    zilch::WriteBitstream::putEliasGamma(a2, v84 + 1);
    zilch::WriteBitstream::putEliasGamma(a2, v85 + 1);
    if (v95)
    {
      uint64_t v86 = 0;
      do
      {
        zilch::WriteBitstream::putRice(a2, *(_DWORD *)(v99.__r_.__value_.__r.__words[0] + v86), v84);
        zilch::WriteBitstream::putRice(a2, *(_DWORD *)(v106 + v86), v85);
        v86 += 4;
      }
      while (4 * v21 != v86);
    }
    if ((void)v106)
    {
      *((void *)&v106 + 1) = v106;
      operator delete((void *)v106);
    }
    if (v99.__r_.__value_.__r.__words[0])
    {
      v99.__r_.__value_.__l.__size_ = v99.__r_.__value_.__r.__words[0];
      operator delete(v99.__r_.__value_.__l.__data_);
    }
  }
  zilch::WriteBitstream::put(a2, v22);
  if (!v22) {
    goto LABEL_126;
  }
  if (v95)
  {
    unint64_t v87 = 0;
    uint64_t v88 = 16 * v21;
    do
    {
      if (*(unsigned char *)((*a3)[v87 / 8] + 156))
      {
        zilch::WriteBitstream::put(a2, 1u);
        zilch::WriteBitstream::putEliasGamma(a2, *(unsigned __int8 *)((*a3)[v87 / 8] + 156));
      }
      else
      {
        zilch::WriteBitstream::put(a2, 0);
      }
      v87 += 16;
    }
    while (v88 != v87);
    unint64_t v89 = 0;
    do
    {
      zilch::WriteBitstream::put(a2, *(_DWORD *)((*a3)[v89 / 8] + 152), 4);
      v89 += 16;
    }
    while (v88 != v89);
LABEL_126:
    if (v95)
    {
      uint64_t v90 = 0;
      do
      {
        zilch::WriteBitstream::put(a2, *(unsigned __int8 *)((*a3)[v90] + 157));
        v90 += 2;
      }
      while (2 * v21 != v90);
    }
  }
  zilch::WriteBitstream::put(a2, *(unsigned int *)&v94[4]);
  if (*(_DWORD *)&v94[4])
  {
    zilch::StringList::StringList((zilch::StringList *)&v99);
    if (v95)
    {
      unint64_t v91 = 0;
      uint64_t v92 = 16 * v21;
      do
      {
        zilch::StringList::addString((zilch::StringList *)&v99, (const zilch::String *)((*a3)[v91 / 8] + 16));
        v91 += 16;
      }
      while (v92 != v91);
    }
    zilch::StringList::encode((zilch::StringList *)&v99, a2);
    zilch::StringList::~StringList((zilch::StringList *)&v99);
  }
  zilch::WriteBitstream::putVariableWidth(a2, HIDWORD(v108.__r_.__value_.__r.__words[2]));
  zilch::WriteBitstream::putVariableWidth(a2, v109);
  zilch::TrafficSegmentList::~TrafficSegmentList((zilch::TrafficSegmentList *)&v102);
  zilch::StringList::~StringList((zilch::StringList *)&v101);
  return 0;
}

void sub_1890EA744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
}

void std::vector<unsigned char>::resize(unint64_t *a1, unint64_t a2)
{
  unint64_t v2 = a1[1] - *a1;
  BOOL v3 = a2 >= v2;
  size_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<unsigned char>::__append(a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + a2;
  }
}

void std::vector<int>::reserve(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (__n > value - this->__begin_)
  {
    if (__n >> 62) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (char *)this->__end_ - (char *)this->__begin_;
    unint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)p_end_cap, __n);
    unint64_t v7 = (unsigned int *)&v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v9 = (unsigned int *)&v6[4 * v8];
    std::vector<unsigned int>::pointer begin = this->__begin_;
    std::vector<unsigned int>::pointer end = this->__end_;
    uint64_t v12 = v7;
    if (end != this->__begin_)
    {
      uint64_t v12 = v7;
      do
      {
        unsigned int v13 = *--end;
        *--uint64_t v12 = v13;
      }
      while (end != begin);
    }
    this->__begin_ = v12;
    this->__end_ = v7;
    this->__end_cap_.__value_ = v9;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

uint64_t mgcl::ints::IntCompressor<int>::~IntCompressor(uint64_t a1)
{
  std::unique_ptr<mgcl::iarray::Encoder>::reset[abi:ne180100]((mgcl::iarray::Encoder **)(a1 + 120), 0);
  unint64_t v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(void *)(a1 + 104) = v2;
    operator delete(v2);
  }
  BOOL v3 = *(void **)(a1 + 72);
  if (v3)
  {
    *(void *)(a1 + 80) = v3;
    operator delete(v3);
  }
  size_t v4 = *(void **)(a1 + 48);
  if (v4)
  {
    *(void *)(a1 + 56) = v4;
    operator delete(v4);
  }
  int64_t v5 = *(void **)(a1 + 24);
  if (v5)
  {
    *(void *)(a1 + 32) = v5;
    operator delete(v5);
  }
  unint64_t v6 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v6;
    operator delete(v6);
  }
  return a1;
}

uint64_t zilch::TrafficDynamicTile::decode_flows_and_incidents(uint64_t a1, zilch::ReadBitstream *this, uint64_t *a3)
{
  v62[2] = *MEMORY[0x1E4F143B8];
  *(_DWORD *)a1 = zilch::ReadBitstream::getVariableWidth(this);
  unint64_t v6 = (void *)(a1 + 16);
  unsigned int VariableWidth = zilch::ReadBitstream::getVariableWidth(this);
  uint64_t v8 = VariableWidth;
  std::vector<zilch::TrafficDynamicTile::Flow>::resize(a1 + 16, VariableWidth);
  zilch::TrafficSegmentList::TrafficSegmentList((zilch::TrafficSegmentList *)v60, VariableWidth, this);
  if (VariableWidth)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 8;
    do
    {
      long long v11 = (void *)zilch::TrafficSegmentList::operator[](v60, v9);
      uint64_t v12 = (void *)(*v6 + v10);
      *(v12 - 1) = *v11;
      void *v12 = 0x3F80000000000000;
      ++v9;
      v10 += 24;
    }
    while (v8 != v9);
  }
  unint64_t v13 = *((void *)this + 3);
  if (v13 >= *((void *)this + 1))
  {
    *((unsigned char *)this + 36) = 1;
    if (!v8) {
      goto LABEL_35;
    }
  }
  else
  {
    int v14 = *((_DWORD *)this + 8);
    int v15 = (1 << v14) & *(_DWORD *)(*(void *)this + 4 * v13);
    *((_DWORD *)this + 8) = v14 + 1;
    if (v14 >= 31)
    {
      *((_DWORD *)this + 8) = 0;
      *((void *)this + 3) = v13 + 1;
    }
    if (v15) {
      BOOL v16 = 1;
    }
    else {
      BOOL v16 = v8 == 0;
    }
    if (v16) {
      goto LABEL_35;
    }
  }
  uint64_t v17 = 0;
  uint64_t v18 = 8;
  while (1)
  {
    unint64_t v19 = *((void *)this + 3);
    if (v19 >= *((void *)this + 1))
    {
      *((unsigned char *)this + 36) = 1;
    }
    else
    {
      int v20 = *((_DWORD *)this + 8);
      int v21 = (1 << v20) & *(_DWORD *)(*(void *)this + 4 * v19);
      *((_DWORD *)this + 8) = v20 + 1;
      if (v20 >= 31)
      {
        *((_DWORD *)this + 8) = 0;
        *((void *)this + 3) = v19 + 1;
      }
      if (v21) {
        goto LABEL_23;
      }
    }
    float v22 = (float)zilch::ReadBitstream::get(this, 8) / 255.0;
    if (v22 >= 1.0) {
      break;
    }
    *(float *)(*v6 + v18) = v22;
LABEL_23:
    ++v17;
    v18 += 24;
    if (v8 == v17)
    {
      if (v8)
      {
        unint64_t v23 = 0;
        uint64_t v24 = 12;
        do
        {
          unint64_t v25 = *((void *)this + 3);
          if (v25 >= *((void *)this + 1))
          {
            *((unsigned char *)this + 36) = 1;
          }
          else
          {
            int v26 = *((_DWORD *)this + 8);
            int v27 = (1 << v26) & *(_DWORD *)(*(void *)this + 4 * v25);
            *((_DWORD *)this + 8) = v26 + 1;
            if (v26 >= 31)
            {
              *((_DWORD *)this + 8) = 0;
              *((void *)this + 3) = v25 + 1;
            }
            if (v27) {
              goto LABEL_34;
            }
          }
          float v28 = (float)zilch::ReadBitstream::get(this, 8) / 255.0;
          if (v28 >= 1.0)
          {
            std::to_string(&v58, v23);
            unsigned int v46 = std::string::insert(&v58, 0, "Invalid end offset for flow number: ");
            long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
            v59.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v47;
            v46->__r_.__value_.__l.__size_ = 0;
            v46->__r_.__value_.__r.__words[2] = 0;
            v46->__r_.__value_.__r.__words[0] = 0;
            uint64_t v48 = std::string::append(&v59, " having value: ");
            long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
            v61.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v49;
            v48->__r_.__value_.__l.__size_ = 0;
            v48->__r_.__value_.__r.__words[2] = 0;
            v48->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&__p, v28);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_p = &__p;
            }
            else {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = __p.__r_.__value_.__l.__size_;
            }
            uint64_t v52 = std::string::append(&v61, (const std::string::value_type *)p_p, size);
            std::string::size_type v53 = v52->__r_.__value_.__r.__words[0];
            v62[0] = v52->__r_.__value_.__l.__size_;
            *(void *)((char *)v62 + 7) = *(std::string::size_type *)((char *)&v52->__r_.__value_.__r.__words[1] + 7);
            char v54 = HIBYTE(v52->__r_.__value_.__r.__words[2]);
            v52->__r_.__value_.__l.__size_ = 0;
            v52->__r_.__value_.__r.__words[2] = 0;
            v52->__r_.__value_.__r.__words[0] = 0;
            if (*(char *)(a1 + 95) < 0) {
              operator delete(*(void **)(a1 + 72));
            }
            uint64_t v55 = v62[0];
            *(void *)(a1 + 72) = v53;
            *(void *)(a1 + 80) = v55;
            *(void *)(a1 + 87) = *(void *)((char *)v62 + 7);
            *(unsigned char *)(a1 + 95) = v54;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v61.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v59.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v58.__r_.__value_.__l.__data_);
            }
            uint64_t v35 = 4;
            *(_DWORD *)(a1 + 64) = 4;
            *(void *)(a1 + 24) = *(void *)(a1 + 16);
            std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::__clear[abi:ne180100]((uint64_t *)(a1 + 40));
            goto LABEL_76;
          }
          *(float *)(*v6 + v24) = v28;
LABEL_34:
          ++v23;
          v24 += 24;
        }
        while (v8 != v23);
      }
LABEL_35:
      LODWORD(v61.__r_.__value_.__l.__data_) = zilch::ReadBitstream::getVariableWidth(this);
      HIDWORD(v61.__r_.__value_.__r.__words[0]) = zilch::ReadBitstream::getVariableWidth(this);
      LODWORD(v61.__r_.__value_.__r.__words[1]) = zilch::ReadBitstream::getVariableWidth(this);
      int v29 = zilch::ReadBitstream::getVariableWidth(this);
      uint64_t v30 = 0;
      LODWORD(v31) = 0;
      unsigned int v32 = 0;
      HIDWORD(v61.__r_.__value_.__r.__words[1]) = v29;
      do
      {
        uint64_t v31 = (*((_DWORD *)&v61.__r_.__value_.__l.__data_ + v30) + v31);
        if (v32 < v31)
        {
          unint64_t v33 = (_DWORD *)(*v6 + 24 * v32 + 16);
          uint64_t v34 = v31 - v32;
          do
          {
            *unint64_t v33 = v30;
            v33 += 6;
            --v34;
          }
          while (v34);
          unsigned int v32 = v31;
        }
        ++v30;
      }
      while (v30 != 4);
      uint64_t v35 = zilch::TrafficDynamicTile::decode_incidents(a1, this, a3);
      goto LABEL_76;
    }
  }
  std::to_string(&v58, v17);
  unsigned int v36 = std::string::insert(&v58, 0, "Invalid start offset for flow number: ");
  long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v37;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  uint64_t v38 = std::string::append(&v59, " having value: ");
  long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  v61.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, v22);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v40 = &__p;
  }
  else {
    unint64_t v40 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v41 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v41 = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v42 = std::string::append(&v61, (const std::string::value_type *)v40, v41);
  std::string::size_type v43 = v42->__r_.__value_.__r.__words[0];
  v62[0] = v42->__r_.__value_.__l.__size_;
  *(void *)((char *)v62 + 7) = *(std::string::size_type *)((char *)&v42->__r_.__value_.__r.__words[1] + 7);
  char v44 = HIBYTE(v42->__r_.__value_.__r.__words[2]);
  v42->__r_.__value_.__l.__size_ = 0;
  v42->__r_.__value_.__r.__words[2] = 0;
  v42->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  uint64_t v45 = v62[0];
  *(void *)(a1 + 72) = v43;
  *(void *)(a1 + 80) = v45;
  *(void *)(a1 + 87) = *(void *)((char *)v62 + 7);
  *(unsigned char *)(a1 + 95) = v44;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v61.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
  *(_DWORD *)(a1 + 64) = 2;
  *(void *)(a1 + 24) = *(void *)(a1 + 16);
  std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::__clear[abi:ne180100]((uint64_t *)(a1 + 40));
  uint64_t v35 = 4;
LABEL_76:
  zilch::TrafficSegmentList::~TrafficSegmentList((zilch::TrafficSegmentList *)v60);
  return v35;
}

void sub_1890EAF64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  zilch::TrafficSegmentList::~TrafficSegmentList((zilch::TrafficSegmentList *)&a27);
  _Unwind_Resume(a1);
}

uint64_t zilch::TrafficDynamicTile::decode_incident_attributes(void *a1, zilch::ReadBitstream *this, uint64_t *a3)
{
  unint64_t v6 = *((void *)this + 1);
  unint64_t v7 = *((void *)this + 3);
  if (v6 != v7)
  {
    uint64_t v8 = *a3;
    unint64_t v9 = a3[1] - *a3;
    unint64_t v10 = v9 >> 4;
    if (v7 >= v6)
    {
      *((unsigned char *)this + 36) = 1;
    }
    else
    {
      uint64_t v11 = *(void *)this;
      int v12 = *((_DWORD *)this + 8);
      int v13 = (1 << v12) & *(_DWORD *)(*(void *)this + 4 * v7);
      int v14 = v12 + 1;
      *((_DWORD *)this + 8) = v12 + 1;
      if (v12 >= 31)
      {
        int v14 = 0;
        *((_DWORD *)this + 8) = 0;
        *((void *)this + 3) = ++v7;
      }
      if (v13 && v10)
      {
        for (uint64_t i = (v9 >> 4); i; --i)
        {
          if (v7 >= v6)
          {
            *((unsigned char *)this + 36) = 1;
          }
          else
          {
            int v16 = (1 << v14) & *(_DWORD *)(v11 + 4 * v7);
            *((_DWORD *)this + 8) = v14 + 1;
            if (v14 >= 31)
            {
              int v14 = 0;
              *((_DWORD *)this + 8) = 0;
              *((void *)this + 3) = ++v7;
              if (v16)
              {
LABEL_19:
                if (v7 >= v6)
                {
                  *((unsigned char *)this + 36) = 1;
                  goto LABEL_24;
                }
                int v19 = (1 << v14) & *(_DWORD *)(v11 + 4 * v7);
                *((_DWORD *)this + 8) = v14 + 1;
                if (v14 < 31)
                {
                  ++v14;
                  if (!v19) {
                    goto LABEL_24;
                  }
                }
                else
                {
                  int v14 = 0;
                  *((_DWORD *)this + 8) = 0;
                  *((void *)this + 3) = ++v7;
                  if (!v19)
                  {
LABEL_24:
                    if (v7 >= v6)
                    {
                      *((unsigned char *)this + 36) = 1;
                      goto LABEL_31;
                    }
                    int v20 = (1 << v14) & *(_DWORD *)(v11 + 4 * v7);
                    int v21 = v14 + 1;
                    *((_DWORD *)this + 8) = v14 + 1;
                    if (v14 >= 31)
                    {
                      int v14 = 0;
                      *((_DWORD *)this + 8) = 0;
                      *((void *)this + 3) = ++v7;
                      if (!v20)
                      {
LABEL_31:
                        int v22 = 2;
LABEL_48:
                        *(_DWORD *)(*(void *)v8 + 160) = v22;
                        goto LABEL_49;
                      }
LABEL_39:
                      int v22 = 3;
                      goto LABEL_48;
                    }
                    if (v20)
                    {
                      ++v14;
                      goto LABEL_39;
                    }
                    int v22 = 2;
LABEL_47:
                    int v14 = v21;
                    goto LABEL_48;
                  }
                }
                if (v7 < v6)
                {
                  int v23 = (1 << v14) & *(_DWORD *)(v11 + 4 * v7);
                  int v21 = v14 + 1;
                  *((_DWORD *)this + 8) = v14 + 1;
                  if (v14 < 31)
                  {
                    if (!v23)
                    {
                      int v22 = 4;
                      goto LABEL_47;
                    }
                    ++v14;
                  }
                  else
                  {
                    int v14 = 0;
                    *((_DWORD *)this + 8) = 0;
                    *((void *)this + 3) = ++v7;
                    if (!v23) {
                      goto LABEL_41;
                    }
                  }
                  int v22 = 5;
                  goto LABEL_48;
                }
                *((unsigned char *)this + 36) = 1;
LABEL_41:
                int v22 = 4;
                goto LABEL_48;
              }
            }
            else
            {
              ++v14;
              if (v16) {
                goto LABEL_19;
              }
            }
          }
          if (v7 >= v6)
          {
            *((unsigned char *)this + 36) = 1;
          }
          else
          {
            int v17 = (1 << v14) & *(_DWORD *)(v11 + 4 * v7);
            int v18 = v14 + 1;
            *((_DWORD *)this + 8) = v14 + 1;
            if (v14 < 31)
            {
              ++v14;
              if (!v17) {
                goto LABEL_49;
              }
LABEL_29:
              *(_DWORD *)(*(void *)v8 + 160) = 1;
              int v14 = v18;
              goto LABEL_49;
            }
            int v18 = 0;
            int v14 = 0;
            *((_DWORD *)this + 8) = 0;
            *((void *)this + 3) = ++v7;
            if (v17) {
              goto LABEL_29;
            }
          }
LABEL_49:
          v8 += 16;
        }
      }
    }
    if (v6 != v7)
    {
      if (v7 >= v6)
      {
        *((unsigned char *)this + 36) = 1;
      }
      else
      {
        int v24 = *((_DWORD *)this + 8);
        int v25 = (1 << v24) & *(_DWORD *)(*(void *)this + 4 * v7);
        *((_DWORD *)this + 8) = v24 + 1;
        if (v24 >= 31)
        {
          *((_DWORD *)this + 8) = 0;
          *((void *)this + 3) = v7 + 1;
        }
        if (v25) {
          BOOL v26 = v10 == 0;
        }
        else {
          BOOL v26 = 1;
        }
        if (!v26)
        {
          uint64_t v27 = 0;
          uint64_t v28 = (v9 >> 4);
          do
          {
            *(unsigned char *)(*(void *)(*a3 + v27) + 164) = zilch::ReadBitstream::get(this, 3) + 8;
            v27 += 16;
            --v28;
          }
          while (v28);
        }
      }
    }
  }
  zilch::TrafficDynamicTile::Incident::Incident((zilch::TrafficDynamicTile::Incident *)v35);
  if (*((void *)this + 1) != *((void *)this + 3))
  {
    unsigned int VariableWidth = zilch::ReadBitstream::getVariableWidth(this);
    if (VariableWidth)
    {
      uint64_t v30 = VariableWidth;
      do
      {
        unsigned int v31 = zilch::ReadBitstream::getVariableWidth(this);
        unsigned __int8 v32 = zilch::ReadBitstream::get(this, 3) + 8;
        if (v32 > 0xEu) {
          unsigned __int8 v32 = v44;
        }
        *(unsigned char *)(*(void *)(*a3 + 16 * v31) + 165) = v32;
        --v30;
      }
      while (v30);
    }
  }
  if (*((unsigned char *)this + 36))
  {
    a1[3] = a1[2];
    std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::__clear[abi:ne180100](a1 + 5);
    uint64_t v33 = 1;
  }
  else
  {
    uint64_t v33 = 0;
  }
  if (v43 < 0) {
    operator delete(__p);
  }
  if (v41 < 0) {
    operator delete(v40);
  }
  if (v39 < 0) {
    operator delete(v38);
  }
  if (v37 < 0) {
    operator delete(v36);
  }
  return v33;
}

void sub_1890EB3E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  zilch::TrafficDynamicTile::Incident::~Incident((void **)va);
  _Unwind_Resume(a1);
}

uint64_t zilch::TrafficDynamicTile::decode_incidents(uint64_t a1, zilch::ReadBitstream *this, uint64_t *a3)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  unsigned int VariableWidth = zilch::ReadBitstream::getVariableWidth(this);
  std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::reserve(a3, VariableWidth);
  if (VariableWidth) {
    operator new();
  }
  int v75 = zilch::ReadBitstream::getVariableWidth(this);
  int v76 = zilch::ReadBitstream::getVariableWidth(this);
  int v77 = zilch::ReadBitstream::getVariableWidth(this);
  int v78 = zilch::ReadBitstream::getVariableWidth(this);
  int v66 = zilch::ReadBitstream::getVariableWidth(this);
  uint64_t v6 = 0;
  LODWORD(v7) = 0;
  unsigned int v8 = 0;
  int v79 = v66;
  int v64 = v76 + v75 + v77 + v78;
  uint64_t v9 = *a3;
  do
  {
    uint64_t v7 = (*(&v75 + v6) + v7);
    if (v8 < v7)
    {
      unint64_t v10 = (uint64_t *)(v9 + 16 * v8);
      uint64_t v11 = v7 - v8;
      do
      {
        uint64_t v12 = *v10;
        v10 += 2;
        *(_DWORD *)(v12 + 64) = v6;
        --v11;
      }
      while (v11);
      unsigned int v8 = v7;
    }
    ++v6;
  }
  while (v6 != 5);
  zilch::StringList::StringList((zilch::StringList *)v72, this);
  if (!zilch::StringList::size((zilch::StringList *)v72))
  {
    zilch::TrafficSegmentList::TrafficSegmentList((zilch::TrafficSegmentList *)&v71, 0, this);
    unint64_t v13 = *((void *)this + 3);
    unint64_t v14 = *((void *)this + 1);
    if (v13 >= v14)
    {
      *((unsigned char *)this + 36) = 1;
    }
    else
    {
      int v15 = *((_DWORD *)this + 8);
      *((_DWORD *)this + 8) = v15 + 1;
      if (v15 >= 31)
      {
        *((_DWORD *)this + 8) = 0;
        *((void *)this + 3) = ++v13;
      }
    }
    if (v13 >= v14)
    {
      *((unsigned char *)this + 36) = 1;
    }
    else
    {
      int v28 = *((_DWORD *)this + 8);
      *((_DWORD *)this + 8) = v28 + 1;
      if (v28 >= 31)
      {
        *((_DWORD *)this + 8) = 0;
        *((void *)this + 3) = ++v13;
      }
    }
    if (v13 >= v14)
    {
      *((unsigned char *)this + 36) = 1;
    }
    else
    {
      int v29 = *((_DWORD *)this + 8);
      int v30 = (1 << v29) & *(_DWORD *)(*(void *)this + 4 * v13);
      *((_DWORD *)this + 8) = v29 + 1;
      if (v29 >= 31)
      {
        *((_DWORD *)this + 8) = 0;
        *((void *)this + 3) = ++v13;
      }
      if (v30)
      {
        LODWORD(v68.__r_.__value_.__l.__data_) = 0;
        uint64_t EliasGamma = zilch::ReadBitstream::getEliasGamma(this, (unsigned int *)&v68);
        if (EliasGamma) {
          goto LABEL_96;
        }
        --LODWORD(v68.__r_.__value_.__l.__data_);
        unint64_t v13 = *((void *)this + 3);
        unint64_t v14 = *((void *)this + 1);
      }
    }
    if (v13 >= v14)
    {
      *((unsigned char *)this + 36) = 1;
    }
    else
    {
      int v31 = *((_DWORD *)this + 8);
      int v32 = (1 << v31) & *(_DWORD *)(*(void *)this + 4 * v13);
      *((_DWORD *)this + 8) = v31 + 1;
      if (v31 >= 31)
      {
        *((_DWORD *)this + 8) = 0;
        *((void *)this + 3) = ++v13;
      }
      if (v32)
      {
        LODWORD(v68.__r_.__value_.__l.__data_) = 0;
        uint64_t EliasGamma = zilch::ReadBitstream::getEliasGamma(this, (unsigned int *)&v68);
        if (EliasGamma) {
          goto LABEL_96;
        }
        --LODWORD(v68.__r_.__value_.__l.__data_);
        unint64_t v13 = *((void *)this + 3);
        unint64_t v14 = *((void *)this + 1);
      }
    }
    if (v13 >= v14)
    {
      *((unsigned char *)this + 36) = 1;
    }
    else
    {
      int v33 = *((_DWORD *)this + 8);
      int v34 = (1 << v33) & *(_DWORD *)(*(void *)this + 4 * v13);
      *((_DWORD *)this + 8) = v33 + 1;
      if (v33 >= 31)
      {
        *((_DWORD *)this + 8) = 0;
        *((void *)this + 3) = v13 + 1;
      }
      if (v34)
      {
        LODWORD(v68.__r_.__value_.__l.__data_) = 0;
        uint64_t EliasGamma = zilch::ReadBitstream::getEliasGamma(this, (unsigned int *)&v68);
        if (EliasGamma) {
          goto LABEL_96;
        }
        --LODWORD(v68.__r_.__value_.__l.__data_);
      }
    }
    *(void *)(a1 + 8) = zilch::ReadBitstream::getVariableWidth64(this);
    unint64_t v35 = *((void *)this + 3);
    if (v35 >= *((void *)this + 1))
    {
      *((unsigned char *)this + 36) = 1;
    }
    else
    {
      int v36 = *((_DWORD *)this + 8);
      int v37 = (1 << v36) & *(_DWORD *)(*(void *)this + 4 * v35);
      *((_DWORD *)this + 8) = v36 + 1;
      if (v36 >= 31)
      {
        *((_DWORD *)this + 8) = 0;
        *((void *)this + 3) = v35 + 1;
      }
      if (v37)
      {
        unint64_t v62 = *((void *)this + 3);
        unint64_t v63 = *((void *)this + 1);
LABEL_63:
        if (v62 >= v63)
        {
          *((unsigned char *)this + 36) = 1;
        }
        else
        {
          int v38 = *((_DWORD *)this + 8);
          int v39 = (1 << v38) & *(_DWORD *)(*(void *)this + 4 * v62);
          *((_DWORD *)this + 8) = v38 + 1;
          if (v38 >= 31)
          {
            *((_DWORD *)this + 8) = 0;
            *((void *)this + 3) = v62 + 1;
          }
          if (v39)
          {
            zilch::StringList::StringList((zilch::StringList *)&v68, this);
            if (zilch::StringList::size((zilch::StringList *)&v68))
            {
              unsigned int v50 = zilch::StringList::size((zilch::StringList *)&v68);
              std::to_string(&v73, v50);
              uint64_t v51 = std::string::insert(&v73, 0, "Unable to validate incident feed. Feed size: ");
              long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
              v69.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v52;
              v51->__r_.__value_.__l.__size_ = 0;
              v51->__r_.__value_.__r.__words[2] = 0;
              v51->__r_.__value_.__r.__words[0] = 0;
              std::string::size_type v53 = std::string::append(&v69, ". Expected value: ");
              long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
              v70.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v54;
              v53->__r_.__value_.__l.__size_ = 0;
              v53->__r_.__value_.__r.__words[2] = 0;
              v53->__r_.__value_.__r.__words[0] = 0;
              std::to_string(&v67, VariableWidth);
              if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v55 = &v67;
              }
              else {
                uint64_t v55 = (std::string *)v67.__r_.__value_.__r.__words[0];
              }
              if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type size = HIBYTE(v67.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type size = v67.__r_.__value_.__l.__size_;
              }
              int v57 = std::string::append(&v70, (const std::string::value_type *)v55, size);
              std::string::size_type v58 = v57->__r_.__value_.__r.__words[0];
              v74[0] = v57->__r_.__value_.__l.__size_;
              *(void *)((char *)v74 + 7) = *(std::string::size_type *)((char *)&v57->__r_.__value_.__r.__words[1] + 7);
              char v59 = HIBYTE(v57->__r_.__value_.__r.__words[2]);
              v57->__r_.__value_.__l.__size_ = 0;
              v57->__r_.__value_.__r.__words[2] = 0;
              v57->__r_.__value_.__r.__words[0] = 0;
              if (*(char *)(a1 + 95) < 0) {
                operator delete(*(void **)(a1 + 72));
              }
              uint64_t v60 = v74[0];
              *(void *)(a1 + 72) = v58;
              *(void *)(a1 + 80) = v60;
              *(void *)(a1 + 87) = *(void *)((char *)v74 + 7);
              *(unsigned char *)(a1 + 95) = v59;
              if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v67.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v70.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v69.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v73.__r_.__value_.__l.__data_);
              }
              *(_DWORD *)(a1 + 64) = 8;
              *(void *)(a1 + 24) = *(void *)(a1 + 16);
              std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::__clear[abi:ne180100](a3);
              zilch::StringList::~StringList((zilch::StringList *)&v68);
              uint64_t EliasGamma = 4;
              goto LABEL_96;
            }
            zilch::StringList::~StringList((zilch::StringList *)&v68);
          }
        }
        int v40 = zilch::ReadBitstream::getVariableWidth(this);
        unsigned int v41 = v64 + v66;
        uint64_t v42 = (v40 + v64 + v66);
        if (v64 + v66 < v42)
        {
          char v43 = (uint64_t *)(*a3 + 16 * v41);
          uint64_t v44 = v42 - v41;
          do
          {
            uint64_t v45 = *v43;
            v43 += 2;
            *(_DWORD *)(v45 + 64) = 5;
            --v44;
          }
          while (v44);
        }
        uint64_t v46 = zilch::ReadBitstream::getVariableWidth(this) + v42;
        if (v42 < v46)
        {
          long long v47 = (uint64_t *)(*a3 + 16 * v42);
          uint64_t v48 = v46 - v42;
          do
          {
            uint64_t v49 = *v47;
            v47 += 2;
            *(_DWORD *)(v49 + 64) = 6;
            --v48;
          }
          while (v48);
        }
        if (*((unsigned char *)this + 36))
        {
          *(void *)(a1 + 24) = *(void *)(a1 + 16);
          std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::__clear[abi:ne180100]((uint64_t *)(a1 + 40));
          uint64_t EliasGamma = 1;
        }
        else
        {
          uint64_t EliasGamma = 0;
        }
LABEL_96:
        zilch::TrafficSegmentList::~TrafficSegmentList((zilch::TrafficSegmentList *)&v71);
        goto LABEL_97;
      }
    }
    unint64_t v62 = *((void *)this + 3);
    unint64_t v63 = *((void *)this + 1);
    goto LABEL_63;
  }
  unsigned int v16 = zilch::StringList::size((zilch::StringList *)v72);
  std::to_string(&v70, v16);
  int v17 = std::string::insert(&v70, 0, "Unable to validate incident feed. Feed size: ");
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v71.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  int v19 = std::string::append(&v71, ". Expected value: ");
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v68.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v69, 0);
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v21 = &v69;
  }
  else {
    int v21 = (std::string *)v69.__r_.__value_.__r.__words[0];
  }
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v22 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v22 = v69.__r_.__value_.__l.__size_;
  }
  int v23 = std::string::append(&v68, (const std::string::value_type *)v21, v22);
  std::string::size_type v24 = v23->__r_.__value_.__r.__words[0];
  v73.__r_.__value_.__r.__words[0] = v23->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v73.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v23->__r_.__value_.__r.__words[1] + 7);
  char v25 = HIBYTE(v23->__r_.__value_.__r.__words[2]);
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::string::size_type v26 = v73.__r_.__value_.__r.__words[0];
  *(void *)(a1 + 72) = v24;
  *(void *)(a1 + 80) = v26;
  *(void *)(a1 + 87) = *(std::string::size_type *)((char *)v73.__r_.__value_.__r.__words + 7);
  *(unsigned char *)(a1 + 95) = v25;
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v69.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v68.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v71.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v70.__r_.__value_.__l.__data_);
  }
  *(_DWORD *)(a1 + 64) = 8;
  *(void *)(a1 + 24) = *(void *)(a1 + 16);
  std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::__clear[abi:ne180100](a3);
  uint64_t EliasGamma = 4;
LABEL_97:
  zilch::StringList::~StringList((zilch::StringList *)v72);
  return EliasGamma;
}

void sub_1890EBFD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,char a47,uint64_t a48)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (*(char *)(v48 - 145) < 0) {
    operator delete(*(void **)(v48 - 168));
  }
  zilch::StringList::~StringList((zilch::StringList *)&a18);
  zilch::TrafficSegmentList::~TrafficSegmentList((zilch::TrafficSegmentList *)&a41);
  zilch::StringList::~StringList((zilch::StringList *)&a47);
  _Unwind_Resume(a1);
}

uint64_t zilch::TrafficDynamicTile::reportError(uint64_t a1, std::string *this)
{
  if (this) {
    std::string::operator=(this, (const std::string *)(a1 + 72));
  }
  return *(unsigned int *)(a1 + 64);
}

uint64_t zilch::TrafficDynamicTile::resetErrorState(uint64_t this)
{
  *(_DWORD *)(this + 64) = 0;
  if (*(char *)(this + 95) < 0)
  {
    **(unsigned char **)(this + 72) = 0;
    *(void *)(this + 80) = 0;
  }
  else
  {
    *(unsigned char *)(this + 72) = 0;
    *(unsigned char *)(this + 95) = 0;
  }
  return this;
}

void zilch::TrafficDynamicTile::Incident::~Incident(void **this)
{
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

void std::vector<zilch::TrafficDynamicTile::Flow>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<zilch::TrafficDynamicTile::Flow>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 24 * a2;
  }
}

void **std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  double result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 16 * v6;
    std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::~__split_buffer(v7);
  }
  return result;
}

void sub_1890EC2DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

unint64_t zilch::TrafficDynamicTile::spaceUsed(zilch::TrafficDynamicTile *this)
{
  uint64_t v1 = (uint64_t *)*((void *)this + 5);
  unint64_t v2 = (uint64_t *)*((void *)this + 6);
  unint64_t v3 = ((char *)v2 - (char *)v1) >> 4;
  unint64_t result = *((void *)this + 3) - *((void *)this + 2) + 184 * v3 + 104;
  if (v2 != v1)
  {
    if (v3 <= 1) {
      unint64_t v3 = 1;
    }
    do
    {
      uint64_t v5 = *v1;
      if (*(char *)(*v1 + 95) < 0) {
        uint64_t v6 = *(void *)(v5 + 80);
      }
      else {
        uint64_t v6 = *(unsigned __int8 *)(*v1 + 95);
      }
      if (*(char *)(v5 + 63) < 0) {
        uint64_t v7 = *(void *)(v5 + 48);
      }
      else {
        uint64_t v7 = *(unsigned __int8 *)(v5 + 63);
      }
      if (*(char *)(v5 + 119) < 0) {
        uint64_t v8 = *(void *)(v5 + 104);
      }
      else {
        uint64_t v8 = *(unsigned __int8 *)(v5 + 119);
      }
      result += v6 + v7 + v8;
      v1 += 2;
      --v3;
    }
    while (v3);
  }
  return result;
}

mgcl::iarray::Encoder *std::unique_ptr<mgcl::iarray::Encoder>::reset[abi:ne180100](mgcl::iarray::Encoder **a1, mgcl::iarray::Encoder *a2)
{
  unint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    mgcl::iarray::Encoder::~Encoder(result);
    JUMPOUT(0x18C11F580);
  }
  return result;
}

void std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::__clear[abi:ne180100]((uint64_t *)v2);
    unint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  a1[1] = v2;
}

uint64_t std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>,std::reverse_iterator<std::shared_ptr<zilch::TrafficDynamicTile::Incident>*>,std::reverse_iterator<std::shared_ptr<zilch::TrafficDynamicTile::Incident>*>,std::reverse_iterator<std::shared_ptr<zilch::TrafficDynamicTile::Incident>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>,std::reverse_iterator<std::shared_ptr<zilch::TrafficDynamicTile::Incident>*>,std::reverse_iterator<std::shared_ptr<zilch::TrafficDynamicTile::Incident>*>,std::reverse_iterator<std::shared_ptr<zilch::TrafficDynamicTile::Incident>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>,std::reverse_iterator<std::shared_ptr<zilch::TrafficDynamicTile::Incident>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>,std::reverse_iterator<std::shared_ptr<zilch::TrafficDynamicTile::Incident>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>,std::reverse_iterator<std::shared_ptr<zilch::TrafficDynamicTile::Incident>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>,std::reverse_iterator<std::shared_ptr<zilch::TrafficDynamicTile::Incident>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    unint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 += 16;
  }
}

void **std::__split_buffer<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 16;
    uint64_t v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 16;
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,zilch::SortIncidentsByType &,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *,false>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortIncidentsByType &,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *>(uint64_t *a1, uint64_t *a2)
{
  if (a1 == a2) {
    return;
  }
  uint64_t v4 = a1 + 2;
  if (a1 + 2 == a2) {
    return;
  }
  uint64_t v5 = 0;
  char v6 = a1;
  do
  {
    uint64_t v7 = v6;
    char v6 = v4;
    uint64_t v8 = v7[2];
    long long v9 = (std::__shared_weak_count *)v7[3];
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = *v7;
    uint64_t v10 = (std::__shared_weak_count *)v7[1];
    if (!v10)
    {
      BOOL v12 = *(_DWORD *)(v8 + 64) < *(_DWORD *)(v11 + 64);
      if (!v9) {
        goto LABEL_9;
      }
LABEL_8:
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      goto LABEL_9;
    }
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    BOOL v12 = *(_DWORD *)(v8 + 64) < *(_DWORD *)(v11 + 64);
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    if (!v12) {
      goto LABEL_29;
    }
    uint64_t v13 = *v6;
    uint64_t v14 = (std::__shared_weak_count *)v7[3];
    uint64_t v15 = v5;
    uint64_t *v6 = 0;
    v6[1] = 0;
    while (1)
    {
      unint64_t v16 = (char *)a1 + v15;
      long long v17 = *(_OWORD *)((char *)a1 + v15);
      *(void *)unint64_t v16 = 0;
      *((void *)v16 + 1) = 0;
      long long v18 = *(std::__shared_weak_count **)((char *)a1 + v15 + 24);
      *((_OWORD *)v16 + 1) = v17;
      if (v18) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      }
      if (!v15)
      {
        uint64_t v22 = a1;
        goto LABEL_27;
      }
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v20 = *(uint64_t *)((char *)a1 + v15 - 16);
      uint64_t v19 = *(std::__shared_weak_count **)((char *)a1 + v15 - 8);
      if (!v19) {
        break;
      }
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      BOOL v21 = *(_DWORD *)(v13 + 64) < *(_DWORD *)(v20 + 64);
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      if (!v14) {
        goto LABEL_21;
      }
LABEL_18:
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      if (!v21) {
        goto LABEL_26;
      }
LABEL_22:
      v15 -= 16;
    }
    BOOL v21 = *(_DWORD *)(v13 + 64) < *(_DWORD *)(v20 + 64);
    if (v14) {
      goto LABEL_18;
    }
LABEL_21:
    if (v21) {
      goto LABEL_22;
    }
LABEL_26:
    uint64_t v22 = (uint64_t *)((char *)a1 + v15);
LABEL_27:
    BOOL v23 = (std::__shared_weak_count *)v22[1];
    *uint64_t v22 = v13;
    v22[1] = (uint64_t)v14;
    if (v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
LABEL_29:
    uint64_t v4 = v6 + 2;
    v5 += 16;
  }
  while (v6 + 2 != a2);
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortIncidentsByType &,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *>(uint64_t *a1, uint64_t *a2)
{
  if (a1 == a2) {
    return;
  }
  unint64_t v3 = a1;
  uint64_t v4 = a1 + 2;
  if (a1 + 2 == a2) {
    return;
  }
  uint64_t v5 = (std::__shared_weak_count **)(a1 + 3);
  do
  {
    char v6 = v3;
    unint64_t v3 = v4;
    uint64_t v7 = v6[2];
    uint64_t v8 = (std::__shared_weak_count *)v6[3];
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v10 = *v6;
    long long v9 = (std::__shared_weak_count *)v6[1];
    if (!v9)
    {
      BOOL v11 = *(_DWORD *)(v7 + 64) < *(_DWORD *)(v10 + 64);
      if (!v8) {
        goto LABEL_9;
      }
LABEL_8:
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      goto LABEL_9;
    }
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    BOOL v11 = *(_DWORD *)(v7 + 64) < *(_DWORD *)(v10 + 64);
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    if (v8) {
      goto LABEL_8;
    }
LABEL_9:
    if (!v11) {
      goto LABEL_24;
    }
    uint64_t v12 = *v3;
    uint64_t v13 = (std::__shared_weak_count *)v6[3];
    uint64_t v14 = v5;
    *unint64_t v3 = 0;
    v3[1] = 0;
    do
    {
      long long v15 = *(_OWORD *)(v14 - 3);
      *(v14 - 3) = 0;
      *(v14 - 2) = 0;
      unint64_t v16 = *v14;
      *(_OWORD *)(v14 - 1) = v15;
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v18 = (uint64_t)*(v14 - 5);
      long long v17 = *(v14 - 4);
      if (v17)
      {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        BOOL v19 = *(_DWORD *)(v12 + 64) < *(_DWORD *)(v18 + 64);
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
        if (!v13) {
          goto LABEL_18;
        }
LABEL_17:
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        goto LABEL_18;
      }
      BOOL v19 = *(_DWORD *)(v12 + 64) < *(_DWORD *)(v18 + 64);
      if (v13) {
        goto LABEL_17;
      }
LABEL_18:
      v14 -= 2;
    }
    while (v19);
    uint64_t v20 = *v14;
    *(v14 - 1) = (std::__shared_weak_count *)v12;
    *uint64_t v14 = v13;
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
LABEL_24:
    uint64_t v4 = v3 + 2;
    v5 += 2;
  }
  while (v3 + 2 != a2);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortIncidentsByType &,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *>(void *a1, void *a2, void *a3)
{
  uint64_t v6 = *a2;
  uint64_t v8 = (std::__shared_weak_count **)(a2 + 1);
  uint64_t v7 = (std::__shared_weak_count *)a2[1];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *a1;
  BOOL v11 = (std::__shared_weak_count **)(a1 + 1);
  uint64_t v10 = (std::__shared_weak_count *)a1[1];
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    BOOL v12 = *(_DWORD *)(v6 + 64) < *(_DWORD *)(v9 + 64);
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    if (!v7) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  BOOL v12 = *(_DWORD *)(v6 + 64) < *(_DWORD *)(v9 + 64);
  if (v7) {
LABEL_5:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
LABEL_6:
  uint64_t v13 = *a3;
  uint64_t v14 = (std::__shared_weak_count *)a3[1];
  if (v12)
  {
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v16 = *a2;
    long long v15 = (std::__shared_weak_count *)a2[1];
    if (v15)
    {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      BOOL v17 = *(_DWORD *)(v13 + 64) < *(_DWORD *)(v16 + 64);
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      if (!v14) {
        goto LABEL_12;
      }
    }
    else
    {
      BOOL v17 = *(_DWORD *)(v13 + 64) < *(_DWORD *)(v16 + 64);
      if (!v14)
      {
LABEL_12:
        uint64_t v18 = *a1;
        if (v17)
        {
          *a1 = *a3;
          *a3 = v18;
          uint64_t result = 1;
LABEL_36:
          uint64_t v8 = (std::__shared_weak_count **)(a3 + 1);
          goto LABEL_37;
        }
        *a1 = *a2;
        *a2 = v18;
        BOOL v31 = (std::__shared_weak_count *)a1[1];
        a1[1] = a2[1];
        a2[1] = v31;
        uint64_t v32 = *a3;
        uint64_t v33 = (std::__shared_weak_count *)a3[1];
        if (v33)
        {
          atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
          BOOL v31 = *v8;
        }
        uint64_t v34 = *a2;
        if (v31)
        {
          atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
          BOOL v35 = *(_DWORD *)(v32 + 64) < *(_DWORD *)(v34 + 64);
          std::__shared_weak_count::__release_shared[abi:ne180100](v31);
          if (!v33) {
            goto LABEL_34;
          }
        }
        else
        {
          BOOL v35 = *(_DWORD *)(v32 + 64) < *(_DWORD *)(v34 + 64);
          if (!v33)
          {
LABEL_34:
            if (v35)
            {
              uint64_t v36 = *a2;
              *a2 = *a3;
              *a3 = v36;
              uint64_t result = 2;
              BOOL v11 = v8;
              goto LABEL_36;
            }
            return 1;
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v33);
        goto LABEL_34;
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    goto LABEL_12;
  }
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v21 = *a2;
  uint64_t v20 = (std::__shared_weak_count *)a2[1];
  if (v20)
  {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    BOOL v22 = *(_DWORD *)(v13 + 64) < *(_DWORD *)(v21 + 64);
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    if (!v14) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  BOOL v22 = *(_DWORD *)(v13 + 64) < *(_DWORD *)(v21 + 64);
  if (v14) {
LABEL_18:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
LABEL_19:
  if (!v22) {
    return 0;
  }
  uint64_t v23 = *a2;
  *a2 = *a3;
  *a3 = v23;
  uint64_t v24 = a2[1];
  a2[1] = a3[1];
  a3[1] = v24;
  uint64_t v25 = *a2;
  BOOL v26 = (std::__shared_weak_count *)a2[1];
  if (v26) {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v28 = *a1;
  uint64_t v27 = (std::__shared_weak_count *)a1[1];
  if (v27)
  {
    atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
    BOOL v29 = *(_DWORD *)(v25 + 64) < *(_DWORD *)(v28 + 64);
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    if (!v26) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  BOOL v29 = *(_DWORD *)(v25 + 64) < *(_DWORD *)(v28 + 64);
  if (v26) {
LABEL_24:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
LABEL_25:
  if (v29)
  {
    uint64_t v30 = *a1;
    *a1 = *a2;
    *a2 = v30;
    uint64_t result = 2;
LABEL_37:
    int v37 = *v11;
    *BOOL v11 = *v8;
    std::__shared_weak_count *v8 = v37;
    return result;
  }
  return 1;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *,zilch::SortIncidentsByType &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  uint64_t v5 = *a1;
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(a2 - 2);
  uint64_t v6 = (std::__shared_weak_count *)*(a2 - 1);
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v8 = (_DWORD *)(v5 + 64);
    BOOL v9 = *(_DWORD *)(v5 + 64) < *(_DWORD *)(v7 + 64);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    if (!v4) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v8 = (_DWORD *)(v5 + 64);
  BOOL v9 = *(_DWORD *)(v5 + 64) < *(_DWORD *)(v7 + 64);
  if (v4) {
LABEL_5:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
LABEL_6:
  if (v9)
  {
    uint64_t i = a1;
    while (1)
    {
      if (v4) {
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v12 = i[2];
      BOOL v11 = (std::__shared_weak_count *)i[3];
      if (!v11) {
        break;
      }
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      BOOL v13 = *v8 < *(_DWORD *)(v12 + 64);
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      if (v4) {
        goto LABEL_12;
      }
LABEL_13:
      i += 2;
      if (v13) {
        goto LABEL_27;
      }
    }
    BOOL v13 = *v8 < *(_DWORD *)(v12 + 64);
    if (!v4) {
      goto LABEL_13;
    }
LABEL_12:
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    goto LABEL_13;
  }
  for (uint64_t i = a1 + 2; i < v2; i += 2)
  {
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v15 = *i;
    uint64_t v14 = (std::__shared_weak_count *)i[1];
    if (v14)
    {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      BOOL v16 = *v8 >= *(_DWORD *)(v15 + 64);
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      if (!v4) {
        goto LABEL_25;
      }
    }
    else
    {
      BOOL v16 = *v8 >= *(_DWORD *)(v15 + 64);
      if (!v4)
      {
LABEL_25:
        if (!v16) {
          break;
        }
        continue;
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    if (!v16) {
      break;
    }
  }
LABEL_27:
  if (i < v2)
  {
    while (1)
    {
      if (v4) {
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v18 = *(v2 - 2);
      BOOL v17 = (std::__shared_weak_count *)*(v2 - 1);
      if (!v17) {
        break;
      }
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      BOOL v19 = *v8 < *(_DWORD *)(v18 + 64);
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      if (v4) {
        goto LABEL_32;
      }
LABEL_33:
      v2 -= 2;
      if (!v19) {
        goto LABEL_37;
      }
    }
    BOOL v19 = *v8 < *(_DWORD *)(v18 + 64);
    if (!v4) {
      goto LABEL_33;
    }
LABEL_32:
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    goto LABEL_33;
  }
LABEL_37:
  if (i < v2)
  {
LABEL_38:
    uint64_t v20 = *i;
    *uint64_t i = *v2;
    *uint64_t v2 = v20;
    uint64_t v21 = i[1];
    i[1] = v2[1];
    v2[1] = v21;
    while (1)
    {
      if (v4) {
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v23 = i[2];
      BOOL v22 = (std::__shared_weak_count *)i[3];
      if (!v22) {
        break;
      }
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
      BOOL v24 = *v8 < *(_DWORD *)(v23 + 64);
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      if (v4) {
        goto LABEL_43;
      }
LABEL_44:
      i += 2;
      if (v24)
      {
        while (1)
        {
          if (v4) {
            atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v27 = *(v2 - 2);
          BOOL v26 = (std::__shared_weak_count *)*(v2 - 1);
          if (!v26) {
            break;
          }
          atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
          BOOL v25 = *v8 < *(_DWORD *)(v27 + 64);
          std::__shared_weak_count::__release_shared[abi:ne180100](v26);
          if (v4) {
            goto LABEL_54;
          }
LABEL_55:
          v2 -= 2;
          if (!v25)
          {
            if (i >= v2) {
              goto LABEL_57;
            }
            goto LABEL_38;
          }
        }
        BOOL v25 = *v8 < *(_DWORD *)(v27 + 64);
        if (!v4) {
          goto LABEL_55;
        }
LABEL_54:
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
        goto LABEL_55;
      }
    }
    BOOL v24 = *v8 < *(_DWORD *)(v23 + 64);
    if (!v4) {
      goto LABEL_44;
    }
LABEL_43:
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    goto LABEL_44;
  }
LABEL_57:
  uint64_t v28 = (long long *)(i - 2);
  if (i - 2 != a1)
  {
    long long v29 = *v28;
    *(void *)uint64_t v28 = 0;
    *(i - 1) = 0;
    uint64_t v30 = (std::__shared_weak_count *)a1[1];
    *(_OWORD *)a1 = v29;
    if (v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    }
  }
  BOOL v31 = (std::__shared_weak_count *)*(i - 1);
  *(i - 2) = v5;
  *(i - 1) = (uint64_t)v4;
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  return i;
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *,zilch::SortIncidentsByType &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = 0;
  uint64_t v6 = *a1;
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  do
  {
    uint64_t v7 = a1[v4 + 2];
    uint64_t v8 = (std::__shared_weak_count *)a1[v4 + 3];
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      BOOL v9 = *(_DWORD *)(v7 + 64) < *(_DWORD *)(v6 + 64);
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      if (!v8) {
        goto LABEL_7;
      }
LABEL_6:
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      goto LABEL_7;
    }
    BOOL v9 = *(_DWORD *)(v7 + 64) < *(_DWORD *)(v6 + 64);
    if (v8) {
      goto LABEL_6;
    }
LABEL_7:
    v4 += 2;
  }
  while (v9);
  uint64_t v10 = &a1[v4];
  if (v4 != 2)
  {
    while (1)
    {
      uint64_t v11 = *(a2 - 2);
      uint64_t v12 = (std::__shared_weak_count *)*(a2 - 1);
      a2 -= 2;
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v5) {
        break;
      }
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      BOOL v13 = *(_DWORD *)(v11 + 64) < *(_DWORD *)(v6 + 64);
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      if (v12) {
        goto LABEL_16;
      }
LABEL_17:
      if (v13) {
        goto LABEL_37;
      }
    }
    BOOL v13 = *(_DWORD *)(v11 + 64) < *(_DWORD *)(v6 + 64);
    if (!v12) {
      goto LABEL_17;
    }
LABEL_16:
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    goto LABEL_17;
  }
  if (v10 < a2)
  {
    for (a2 -= 2; ; a2 -= 2)
    {
      uint64_t v14 = *a2;
      uint64_t v15 = (std::__shared_weak_count *)a2[1];
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v5)
      {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        BOOL v16 = *(_DWORD *)(v14 + 64) >= *(_DWORD *)(v6 + 64);
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
        if (v15) {
          goto LABEL_27;
        }
      }
      else
      {
        BOOL v16 = *(_DWORD *)(v14 + 64) >= *(_DWORD *)(v6 + 64);
        if (v15)
        {
LABEL_27:
          std::__shared_weak_count::__release_shared[abi:ne180100](v15);
          if (v10 >= a2 || !v16) {
            break;
          }
          continue;
        }
      }
      char v18 = !v16;
      if (v10 >= a2) {
        char v18 = 1;
      }
      if (v18) {
        break;
      }
    }
  }
LABEL_37:
  if (v10 < a2)
  {
    BOOL v19 = &a1[v4];
    uint64_t v20 = a2;
    while (1)
    {
      uint64_t v21 = *v19;
      *BOOL v19 = *v20;
      *uint64_t v20 = v21;
      uint64_t v22 = v19[1];
      v19[1] = v20[1];
      v20[1] = v22;
      do
      {
        uint64_t v23 = v19[2];
        BOOL v24 = (std::__shared_weak_count *)v19[3];
        v19 += 2;
        if (v24) {
          atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v5)
        {
          atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
          BOOL v25 = *(_DWORD *)(v23 + 64) < *(_DWORD *)(v6 + 64);
          std::__shared_weak_count::__release_shared[abi:ne180100](v5);
          if (!v24) {
            continue;
          }
LABEL_44:
          std::__shared_weak_count::__release_shared[abi:ne180100](v24);
          continue;
        }
        BOOL v25 = *(_DWORD *)(v23 + 64) < *(_DWORD *)(v6 + 64);
        if (v24) {
          goto LABEL_44;
        }
      }
      while (v25);
      do
      {
        uint64_t v27 = *(v20 - 2);
        uint64_t v28 = (std::__shared_weak_count *)*(v20 - 1);
        v20 -= 2;
        if (v28) {
          atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v5)
        {
          atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
          BOOL v26 = *(_DWORD *)(v27 + 64) < *(_DWORD *)(v6 + 64);
          std::__shared_weak_count::__release_shared[abi:ne180100](v5);
          if (!v28) {
            continue;
          }
LABEL_55:
          std::__shared_weak_count::__release_shared[abi:ne180100](v28);
          continue;
        }
        BOOL v26 = *(_DWORD *)(v27 + 64) < *(_DWORD *)(v6 + 64);
        if (v28) {
          goto LABEL_55;
        }
      }
      while (!v26);
      if (v19 >= v20) {
        goto LABEL_60;
      }
    }
  }
  BOOL v19 = &a1[v4];
LABEL_60:
  long long v29 = (long long *)(v19 - 2);
  if (v19 - 2 != a1)
  {
    long long v30 = *v29;
    *(void *)long long v29 = 0;
    *(v19 - 1) = 0;
    BOOL v31 = (std::__shared_weak_count *)a1[1];
    *(_OWORD *)a1 = v30;
    if (v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v31);
    }
  }
  uint64_t v32 = (std::__shared_weak_count *)*(v19 - 1);
  *(v19 - 2) = v6;
  *(v19 - 1) = (uint64_t)v5;
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  return v19 - 2;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortIncidentsByType &,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 2);
      uint64_t v7 = (std::__shared_weak_count *)*(a2 - 1);
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v9 = *a1;
      uint64_t v8 = (std::__shared_weak_count *)a1[1];
      if (v8)
      {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        BOOL v10 = *(_DWORD *)(v6 + 64) < *(_DWORD *)(v9 + 64);
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        if (!v7) {
          goto LABEL_7;
        }
      }
      else
      {
        BOOL v10 = *(_DWORD *)(v6 + 64) < *(_DWORD *)(v9 + 64);
        if (!v7)
        {
LABEL_7:
          if (v10)
          {
            uint64_t v11 = *a1;
            *a1 = *(v2 - 2);
            *(v2 - 2) = v11;
            uint64_t v12 = a1[1];
            a1[1] = *(v2 - 1);
            *(v2 - 1) = v12;
          }
          return 1;
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      goto LABEL_7;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortIncidentsByType &,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortIncidentsByType &,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortIncidentsByType &,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      BOOL v13 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortIncidentsByType &,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *>(a1, a1 + 2, a1 + 4);
      uint64_t v14 = a1 + 6;
      if (a1 + 6 == v2) {
        return 1;
      }
      uint64_t v15 = 0;
      int v16 = 0;
      uint64_t v32 = v2;
LABEL_11:
      uint64_t v17 = *v14;
      char v18 = (std::__shared_weak_count *)v14[1];
      if (v18) {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v20 = *v13;
      BOOL v19 = (std::__shared_weak_count *)v13[1];
      if (v19)
      {
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
        BOOL v21 = *(_DWORD *)(v17 + 64) < *(_DWORD *)(v20 + 64);
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
        if (!v18) {
          goto LABEL_16;
        }
        goto LABEL_15;
      }
      BOOL v21 = *(_DWORD *)(v17 + 64) < *(_DWORD *)(v20 + 64);
      if (v18) {
LABEL_15:
      }
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
LABEL_16:
      if (!v21) {
        goto LABEL_36;
      }
      uint64_t v23 = *v14;
      uint64_t v22 = (std::__shared_weak_count *)v14[1];
      uint64_t v24 = v15;
      *uint64_t v14 = 0;
      v14[1] = 0;
      break;
  }
  while (1)
  {
    BOOL v25 = (char *)a1 + v24;
    long long v26 = *(_OWORD *)((char *)a1 + v24 + 32);
    *((void *)v25 + 4) = 0;
    *((void *)v25 + 5) = 0;
    uint64_t v27 = *(std::__shared_weak_count **)((char *)a1 + v24 + 56);
    *((_OWORD *)v25 + 3) = v26;
    if (v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    }
    if (v24 == -32) {
      break;
    }
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v29 = *(uint64_t *)((char *)a1 + v24 + 16);
    uint64_t v28 = *(std::__shared_weak_count **)((char *)a1 + v24 + 24);
    if (v28)
    {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      BOOL v30 = *(_DWORD *)(v23 + 64) < *(_DWORD *)(v29 + 64);
      std::__shared_weak_count::__release_shared[abi:ne180100](v28);
      if (!v22) {
        goto LABEL_28;
      }
    }
    else
    {
      BOOL v30 = *(_DWORD *)(v23 + 64) < *(_DWORD *)(v29 + 64);
      if (!v22)
      {
LABEL_28:
        if (!v30) {
          goto LABEL_33;
        }
        goto LABEL_29;
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    if (!v30)
    {
      BOOL v13 = (uint64_t *)((char *)a1 + v24 + 32);
      goto LABEL_33;
    }
LABEL_29:
    v13 -= 2;
    v24 -= 16;
  }
  BOOL v13 = a1;
LABEL_33:
  uint64_t v2 = v32;
  BOOL v31 = (std::__shared_weak_count *)v13[1];
  *BOOL v13 = v23;
  v13[1] = (uint64_t)v22;
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  if (++v16 != 8)
  {
LABEL_36:
    BOOL v13 = v14;
    v15 += 16;
    v14 += 2;
    if (v14 == v2) {
      return 1;
    }
    goto LABEL_11;
  }
  return v14 + 2 == v32;
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortIncidentsByType &,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortIncidentsByType &,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *>(a1, a2, a3);
  uint64_t v8 = *a4;
  uint64_t v9 = (std::__shared_weak_count *)a4[1];
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = *a3;
  BOOL v10 = (std::__shared_weak_count *)a3[1];
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    BOOL v12 = *(_DWORD *)(v8 + 64) < *(_DWORD *)(v11 + 64);
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    if (!v9) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  BOOL v12 = *(_DWORD *)(v8 + 64) < *(_DWORD *)(v11 + 64);
  if (v9) {
LABEL_5:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
LABEL_6:
  if (!v12) {
    return;
  }
  uint64_t v13 = *a3;
  *a3 = *a4;
  *a4 = v13;
  uint64_t v14 = a3[1];
  a3[1] = a4[1];
  a4[1] = v14;
  uint64_t v15 = *a3;
  int v16 = (std::__shared_weak_count *)a3[1];
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v18 = *a2;
  uint64_t v17 = (std::__shared_weak_count *)a2[1];
  if (v17)
  {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    BOOL v19 = *(_DWORD *)(v15 + 64) < *(_DWORD *)(v18 + 64);
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    if (!v16) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  BOOL v19 = *(_DWORD *)(v15 + 64) < *(_DWORD *)(v18 + 64);
  if (v16) {
LABEL_11:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
LABEL_12:
  if (!v19) {
    return;
  }
  uint64_t v20 = *a2;
  *a2 = *a3;
  *a3 = v20;
  uint64_t v21 = a2[1];
  a2[1] = a3[1];
  a3[1] = v21;
  uint64_t v22 = *a2;
  uint64_t v23 = (std::__shared_weak_count *)a2[1];
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v25 = *a1;
  uint64_t v24 = (std::__shared_weak_count *)a1[1];
  if (v24)
  {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    BOOL v26 = *(_DWORD *)(v22 + 64) < *(_DWORD *)(v25 + 64);
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    if (!v23) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  BOOL v26 = *(_DWORD *)(v22 + 64) < *(_DWORD *)(v25 + 64);
  if (v23) {
LABEL_17:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
LABEL_18:
  if (v26)
  {
    uint64_t v27 = *a1;
    *a1 = *a2;
    *a2 = v27;
    uint64_t v28 = a1[1];
    a1[1] = a2[1];
    a2[1] = v28;
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortIncidentsByType &,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortIncidentsByType &,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *>(a1, a2, a3, a4);
  uint64_t v10 = *a5;
  uint64_t v11 = (std::__shared_weak_count *)a5[1];
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = *a4;
  BOOL v12 = (std::__shared_weak_count *)a4[1];
  if (v12)
  {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    BOOL v14 = *(_DWORD *)(v10 + 64) < *(_DWORD *)(v13 + 64);
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    if (!v11) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  BOOL v14 = *(_DWORD *)(v10 + 64) < *(_DWORD *)(v13 + 64);
  if (v11) {
LABEL_5:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
LABEL_6:
  if (!v14) {
    return;
  }
  uint64_t v15 = *a4;
  *a4 = *a5;
  *a5 = v15;
  uint64_t v16 = a4[1];
  a4[1] = a5[1];
  a5[1] = v16;
  uint64_t v17 = *a4;
  uint64_t v18 = (std::__shared_weak_count *)a4[1];
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v20 = *a3;
  BOOL v19 = (std::__shared_weak_count *)a3[1];
  if (v19)
  {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    BOOL v21 = *(_DWORD *)(v17 + 64) < *(_DWORD *)(v20 + 64);
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    if (!v18) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  BOOL v21 = *(_DWORD *)(v17 + 64) < *(_DWORD *)(v20 + 64);
  if (v18) {
LABEL_11:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
LABEL_12:
  if (!v21) {
    return;
  }
  uint64_t v22 = *a3;
  *a3 = *a4;
  *a4 = v22;
  uint64_t v23 = a3[1];
  a3[1] = a4[1];
  a4[1] = v23;
  uint64_t v24 = *a3;
  uint64_t v25 = (std::__shared_weak_count *)a3[1];
  if (v25) {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v27 = *a2;
  BOOL v26 = (std::__shared_weak_count *)a2[1];
  if (v26)
  {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    BOOL v28 = *(_DWORD *)(v24 + 64) < *(_DWORD *)(v27 + 64);
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
    if (!v25) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  BOOL v28 = *(_DWORD *)(v24 + 64) < *(_DWORD *)(v27 + 64);
  if (v25) {
LABEL_17:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
LABEL_18:
  if (!v28) {
    return;
  }
  uint64_t v29 = *a2;
  *a2 = *a3;
  *a3 = v29;
  uint64_t v30 = a2[1];
  a2[1] = a3[1];
  a3[1] = v30;
  uint64_t v31 = *a2;
  uint64_t v32 = (std::__shared_weak_count *)a2[1];
  if (v32) {
    atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v34 = *a1;
  uint64_t v33 = (std::__shared_weak_count *)a1[1];
  if (v33)
  {
    atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
    BOOL v35 = *(_DWORD *)(v31 + 64) < *(_DWORD *)(v34 + 64);
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    if (!v32) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  BOOL v35 = *(_DWORD *)(v31 + 64) < *(_DWORD *)(v34 + 64);
  if (v32) {
LABEL_23:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
LABEL_24:
  if (v35)
  {
    uint64_t v36 = *a1;
    *a1 = *a2;
    *a2 = v36;
    uint64_t v37 = a1[1];
    a1[1] = a2[1];
    a2[1] = v37;
  }
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortIncidentsByType &,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v6 = (uint64_t)a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      BOOL v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortIncidentsByType &,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if ((uint64_t *)v6 != a3)
    {
      BOOL v14 = (uint64_t *)v6;
      while (1)
      {
        uint64_t v15 = *v14;
        uint64_t v16 = (std::__shared_weak_count *)v14[1];
        if (v16) {
          atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = *a1;
        uint64_t v17 = (std::__shared_weak_count *)a1[1];
        if (!v17) {
          break;
        }
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        BOOL v19 = *(_DWORD *)(v15 + 64) < *(_DWORD *)(v18 + 64);
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
        if (v16) {
          goto LABEL_11;
        }
LABEL_12:
        if (v19)
        {
          uint64_t v20 = *v14;
          *BOOL v14 = *a1;
          *a1 = v20;
          uint64_t v21 = v14[1];
          v14[1] = a1[1];
          a1[1] = v21;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortIncidentsByType &,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
        if (v14 == a3)
        {
          uint64_t v13 = (uint64_t)a3;
          goto LABEL_18;
        }
      }
      BOOL v19 = *(_DWORD *)(v15 + 64) < *(_DWORD *)(v18 + 64);
      if (!v16) {
        goto LABEL_12;
      }
LABEL_11:
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      goto LABEL_12;
    }
LABEL_18:
    if (v8 >= 17)
    {
      unint64_t v22 = (unint64_t)v8 >> 4;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortIncidentsByType,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *>(a1, v6, a4, v22);
        v6 -= 16;
      }
      while (v22-- > 2);
    }
    return (uint64_t *)v13;
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortIncidentsByType &,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 < 2) {
    return;
  }
  uint64_t v5 = a4;
  uint64_t v6 = a1;
  uint64_t v39 = v4 >> 1;
  if ((uint64_t)(v4 >> 1) < ((uint64_t)a4 - a1) >> 4) {
    return;
  }
  uint64_t v8 = ((uint64_t)a4 - a1) >> 3;
  uint64_t v9 = v8 + 1;
  unint64_t v10 = (void *)(a1 + 16 * (v8 + 1));
  uint64_t v11 = v8 + 2;
  if (v8 + 2 < a3)
  {
    uint64_t v12 = *v10;
    uint64_t v13 = (std::__shared_weak_count *)v10[1];
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v15 = v10[2];
    BOOL v14 = (std::__shared_weak_count *)v10[3];
    if (v14)
    {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      BOOL v16 = *(_DWORD *)(v12 + 64) < *(_DWORD *)(v15 + 64);
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      if (v13) {
        goto LABEL_8;
      }
    }
    else
    {
      BOOL v16 = *(_DWORD *)(v12 + 64) < *(_DWORD *)(v15 + 64);
      if (v13)
      {
LABEL_8:
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        if (!v16) {
          goto LABEL_10;
        }
        goto LABEL_9;
      }
    }
    if (v16)
    {
LABEL_9:
      v10 += 2;
      uint64_t v9 = v11;
    }
  }
LABEL_10:
  uint64_t v17 = *v10;
  uint64_t v18 = (std::__shared_weak_count *)v10[1];
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v20 = *v5;
  BOOL v19 = (std::__shared_weak_count *)v5[1];
  if (!v19)
  {
    BOOL v21 = *(_DWORD *)(v17 + 64) < *(_DWORD *)(v20 + 64);
    if (!v18) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  BOOL v21 = *(_DWORD *)(v17 + 64) < *(_DWORD *)(v20 + 64);
  std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  if (v18) {
LABEL_14:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
LABEL_15:
  if (v21) {
    return;
  }
  unint64_t v22 = (std::__shared_weak_count *)v5[1];
  uint64_t v38 = *v5;
  *uint64_t v5 = 0;
  v5[1] = 0;
  uint64_t v23 = v6;
  do
  {
    uint64_t v24 = v5;
    uint64_t v5 = v10;
    long long v25 = *(_OWORD *)v10;
    void *v10 = 0;
    v10[1] = 0;
    BOOL v26 = (std::__shared_weak_count *)v24[1];
    *(_OWORD *)uint64_t v24 = v25;
    if (v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v26);
    }
    if (v39 < v9) {
      break;
    }
    uint64_t v27 = 2 * v9;
    uint64_t v9 = (2 * v9) | 1;
    unint64_t v10 = (void *)(v6 + 16 * v9);
    uint64_t v28 = v27 + 2;
    if (v27 + 2 < a3)
    {
      uint64_t v29 = *v10;
      uint64_t v30 = (std::__shared_weak_count *)v10[1];
      if (v30) {
        atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v32 = v10[2];
      uint64_t v31 = (std::__shared_weak_count *)v10[3];
      if (v31)
      {
        atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
        BOOL v33 = *(_DWORD *)(v29 + 64) < *(_DWORD *)(v32 + 64);
        std::__shared_weak_count::__release_shared[abi:ne180100](v31);
        if (!v30) {
          goto LABEL_37;
        }
      }
      else
      {
        BOOL v33 = *(_DWORD *)(v29 + 64) < *(_DWORD *)(v32 + 64);
        if (!v30)
        {
LABEL_37:
          if (!v33) {
            goto LABEL_27;
          }
LABEL_26:
          v10 += 2;
          uint64_t v9 = v28;
          goto LABEL_27;
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v30);
      if (v33) {
        goto LABEL_26;
      }
    }
LABEL_27:
    uint64_t v34 = *v10;
    BOOL v35 = (std::__shared_weak_count *)v10[1];
    if (v35) {
      atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v22)
    {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
      BOOL v36 = *(_DWORD *)(v34 + 64) < *(_DWORD *)(v38 + 64);
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
    else
    {
      BOOL v36 = *(_DWORD *)(v34 + 64) < *(_DWORD *)(v38 + 64);
    }
    uint64_t v6 = v23;
    if (v35) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v35);
    }
  }
  while (!v36);
  uint64_t v37 = (std::__shared_weak_count *)v5[1];
  *uint64_t v5 = v38;
  v5[1] = v22;
  if (v37)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortIncidentsByType,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v8 = *a1;
    uint64_t v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v9 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortIncidentsByType &,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *>(a1, a3, a4);
    unint64_t v10 = v9;
    if (v9 == (void *)(a2 - 16))
    {
      uint64_t v15 = (std::__shared_weak_count *)v9[1];
      void *v10 = v8;
      v10[1] = v7;
      if (v15)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
    }
    else
    {
      long long v11 = *(_OWORD *)(a2 - 16);
      *(void *)(a2 - 16) = 0;
      *(void *)(a2 - 8) = 0;
      uint64_t v12 = (std::__shared_weak_count *)v9[1];
      *(_OWORD *)unint64_t v10 = v11;
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      uint64_t v13 = (uint64_t)(v10 + 2);
      BOOL v14 = *(std::__shared_weak_count **)(a2 - 8);
      *(void *)(a2 - 16) = v8;
      *(void *)(a2 - 8) = v7;
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortIncidentsByType &,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *>((uint64_t)a1, v13, a3, (v13 - (uint64_t)a1) >> 4);
    }
  }
}

void sub_1890EE384(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortIncidentsByType &,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    uint64_t v8 = &a1[2 * v5 + 2];
    uint64_t v9 = 2 * v5;
    uint64_t v5 = (2 * v5) | 1;
    uint64_t v10 = v9 + 2;
    if (v9 + 2 >= a3) {
      goto LABEL_11;
    }
    uint64_t v11 = *v8;
    uint64_t v12 = (std::__shared_weak_count *)v8[1];
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v14 = v8[2];
    uint64_t v13 = (std::__shared_weak_count *)v8[3];
    if (v13)
    {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      BOOL v15 = *(_DWORD *)(v11 + 64) < *(_DWORD *)(v14 + 64);
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      if (v12) {
        goto LABEL_9;
      }
    }
    else
    {
      BOOL v15 = *(_DWORD *)(v11 + 64) < *(_DWORD *)(v14 + 64);
      if (v12)
      {
LABEL_9:
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        if (!v15) {
          goto LABEL_11;
        }
LABEL_10:
        v8 += 2;
        uint64_t v5 = v10;
        goto LABEL_11;
      }
    }
    if (v15) {
      goto LABEL_10;
    }
LABEL_11:
    long long v16 = *(_OWORD *)v8;
    void *v8 = 0;
    v8[1] = 0;
    uint64_t v17 = (std::__shared_weak_count *)a1[1];
    *(_OWORD *)a1 = v16;
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
    a1 = v8;
  }
  while (v5 <= v7);
  return v8;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortIncidentsByType &,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 < 2) {
    return;
  }
  unint64_t v7 = v4 >> 1;
  uint64_t v8 = (void *)(a1 + 16 * (v4 >> 1));
  uint64_t v9 = *v8;
  uint64_t v10 = (std::__shared_weak_count *)v8[1];
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *(void *)(a2 - 16);
  uint64_t v11 = *(std::__shared_weak_count **)(a2 - 8);
  uint64_t v13 = (void *)(a2 - 16);
  if (!v11)
  {
    BOOL v14 = *(_DWORD *)(v9 + 64) < *(_DWORD *)(v12 + 64);
    if (!v10) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  BOOL v14 = *(_DWORD *)(v9 + 64) < *(_DWORD *)(v12 + 64);
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  if (v10) {
LABEL_6:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
LABEL_7:
  if (!v14) {
    return;
  }
  uint64_t v16 = *(void *)(a2 - 16);
  BOOL v15 = *(std::__shared_weak_count **)(a2 - 8);
  *uint64_t v13 = 0;
  v13[1] = 0;
  do
  {
    uint64_t v17 = v13;
    uint64_t v13 = v8;
    long long v18 = *(_OWORD *)v8;
    void *v8 = 0;
    v8[1] = 0;
    BOOL v19 = (std::__shared_weak_count *)v17[1];
    *(_OWORD *)uint64_t v17 = v18;
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    if (!v7) {
      break;
    }
    unint64_t v7 = (v7 - 1) >> 1;
    uint64_t v8 = (void *)(a1 + 16 * v7);
    uint64_t v20 = *v8;
    BOOL v21 = (std::__shared_weak_count *)v8[1];
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (!v15)
    {
      BOOL v22 = *(_DWORD *)(v20 + 64) < *(_DWORD *)(v16 + 64);
      if (!v21) {
        continue;
      }
LABEL_16:
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      continue;
    }
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    BOOL v22 = *(_DWORD *)(v20 + 64) < *(_DWORD *)(v16 + 64);
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    if (v21) {
      goto LABEL_16;
    }
  }
  while (v22);
  uint64_t v23 = (std::__shared_weak_count *)v13[1];
  *uint64_t v13 = v16;
  v13[1] = v15;
  if (v23)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
}

void *std::vector<unsigned char>::vector(void *a1, size_t a2, unsigned char *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    size_t v5 = a2;
    std::vector<unsigned char>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (unsigned char *)a1[1];
    unint64_t v7 = &v6[v5];
    do
    {
      *v6++ = *a3;
      --v5;
    }
    while (v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_1890EE6A8(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1890EE720(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<int>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  }
  BOOL result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,zilch::SortFlowsBySpeedClass &,zilch::TrafficDynamicTile::Flow *,false>(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4, char a5)
{
uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortFlowsBySpeedClass &,zilch::TrafficDynamicTile::Flow *>(uint64_t result, _OWORD *a2)
{
  if ((_OWORD *)result != a2)
  {
    uint64_t v2 = (_OWORD *)(result + 24);
    if ((_OWORD *)(result + 24) != a2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = (_OWORD *)result;
      do
      {
        int v5 = *((_DWORD *)v4 + 10);
        int v6 = *((_DWORD *)v4 + 4);
        uint64_t v4 = v2;
        if (v5 < v6)
        {
          long long v10 = *v2;
          uint64_t v7 = v3;
          while (1)
          {
            uint64_t v8 = result + v7;
            *(_OWORD *)(v8 + 24) = *(_OWORD *)(result + v7);
            *(_DWORD *)(v8 + 40) = *(_DWORD *)(result + v7 + 16);
            if (!v7) {
              break;
            }
            v7 -= 24;
            if (v5 >= *(_DWORD *)(v8 - 8))
            {
              uint64_t v9 = result + v7 + 24;
              goto LABEL_10;
            }
          }
          uint64_t v9 = result;
LABEL_10:
          *(_OWORD *)uint64_t v9 = v10;
          *(_DWORD *)(v9 + 16) = v5;
        }
        uint64_t v2 = (_OWORD *)((char *)v4 + 24);
        v3 += 24;
      }
      while ((_OWORD *)((char *)v4 + 24) != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortFlowsBySpeedClass &,zilch::TrafficDynamicTile::Flow *>(long long *a1, long long *a2, long long *a3)
{
  int v3 = *((_DWORD *)a2 + 4);
  int v4 = *((_DWORD *)a3 + 4);
  if (v3 < *((_DWORD *)a1 + 4))
  {
    if (v4 < v3)
    {
      long long v5 = *a1;
      uint64_t v6 = *((void *)a1 + 2);
      int v7 = *((_DWORD *)a3 + 4);
      *a1 = *a3;
      *((_DWORD *)a1 + 4) = v7;
      *((_DWORD *)a3 + 4) = v6;
      *a3 = v5;
      return 1;
    }
    long long v14 = *a1;
    uint64_t v15 = *((void *)a1 + 2);
    int v16 = *((_DWORD *)a2 + 4);
    *a1 = *a2;
    *((_DWORD *)a1 + 4) = v16;
    *((_DWORD *)a2 + 4) = v15;
    *a2 = v14;
    if (*((_DWORD *)a3 + 4) >= *((_DWORD *)a2 + 4)) {
      return 1;
    }
    long long v17 = *a2;
    uint64_t v18 = *((void *)a2 + 2);
    int v19 = *((_DWORD *)a3 + 4);
    *a2 = *a3;
    *((_DWORD *)a2 + 4) = v19;
    *((_DWORD *)a3 + 4) = v18;
    *a3 = v17;
    return 2;
  }
  if (v4 < v3)
  {
    long long v8 = *a2;
    uint64_t v9 = *((void *)a2 + 2);
    int v10 = *((_DWORD *)a3 + 4);
    *a2 = *a3;
    *((_DWORD *)a2 + 4) = v10;
    *((_DWORD *)a3 + 4) = v9;
    *a3 = v8;
    if (*((_DWORD *)a2 + 4) >= *((_DWORD *)a1 + 4)) {
      return 1;
    }
    long long v11 = *a1;
    uint64_t v12 = *((void *)a1 + 2);
    int v13 = *((_DWORD *)a2 + 4);
    *a1 = *a2;
    *((_DWORD *)a1 + 4) = v13;
    *((_DWORD *)a2 + 4) = v12;
    *a2 = v11;
    return 2;
  }
  return 0;
}

long long *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TrafficDynamicTile::Flow *,zilch::SortFlowsBySpeedClass &>(uint64_t a1, long long *a2)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if (v2 >= *((_DWORD *)a2 - 2))
  {
    uint64_t v6 = (long long *)(a1 + 24);
    do
    {
      int v4 = v6;
      if (v6 >= a2) {
        break;
      }
      int v7 = *((_DWORD *)v6 + 4);
      uint64_t v6 = (long long *)((char *)v6 + 24);
    }
    while (v2 >= v7);
  }
  else
  {
    uint64_t v3 = a1;
    do
    {
      int v4 = (long long *)(v3 + 24);
      int v5 = *(_DWORD *)(v3 + 40);
      v3 += 24;
    }
    while (v2 >= v5);
  }
  if (v4 >= a2)
  {
    long long v8 = a2;
  }
  else
  {
    do
    {
      long long v8 = (long long *)((char *)a2 - 24);
      int v9 = *((_DWORD *)a2 - 2);
      a2 = (long long *)((char *)a2 - 24);
    }
    while (v2 < v9);
  }
  while (v4 < v8)
  {
    uint64_t v18 = *((void *)v4 + 2);
    long long v17 = *v4;
    long long v10 = *v8;
    *((_DWORD *)v4 + 4) = *((_DWORD *)v8 + 4);
    *int v4 = v10;
    *((_DWORD *)v8 + 4) = v18;
    long long *v8 = v17;
    do
    {
      int v11 = *((_DWORD *)v4 + 10);
      int v4 = (long long *)((char *)v4 + 24);
    }
    while (v2 >= v11);
    do
    {
      int v12 = *((_DWORD *)v8 - 2);
      long long v8 = (long long *)((char *)v8 - 24);
    }
    while (v2 < v12);
  }
  int v13 = (long long *)((char *)v4 - 24);
  if ((long long *)((char *)v4 - 24) != (long long *)a1)
  {
    long long v14 = *v13;
    *(_DWORD *)(a1 + 16) = *((_DWORD *)v4 - 2);
    *(_OWORD *)a1 = v14;
  }
  *int v13 = v16;
  *((_DWORD *)v4 - 2) = v2;
  return v4;
}

uint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TrafficDynamicTile::Flow *,zilch::SortFlowsBySpeedClass &>(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = 0;
  int v3 = *(_DWORD *)(a1 + 16);
  do
  {
    int v4 = *(_DWORD *)(a1 + v2 + 40);
    v2 += 24;
  }
  while (v4 < v3);
  int v5 = (long long *)(a1 + v2);
  if (v2 == 24)
  {
    while ((unint64_t)v5 < a2)
    {
      unint64_t v6 = a2 - 24;
      int v8 = *(_DWORD *)(a2 - 8);
      a2 -= 24;
      if (v8 < v3) {
        goto LABEL_9;
      }
    }
    unint64_t v6 = a2;
  }
  else
  {
    do
    {
      unint64_t v6 = a2 - 24;
      int v7 = *(_DWORD *)(a2 - 8);
      a2 -= 24;
    }
    while (v7 >= v3);
  }
LABEL_9:
  int v9 = v5;
  if ((unint64_t)v5 < v6)
  {
    unint64_t v10 = v6;
    do
    {
      long long v11 = *v9;
      uint64_t v12 = *((void *)v9 + 2);
      int v13 = *(_DWORD *)(v10 + 16);
      long long *v9 = *(_OWORD *)v10;
      *((_DWORD *)v9 + 4) = v13;
      *(_DWORD *)(v10 + 16) = v12;
      *(_OWORD *)unint64_t v10 = v11;
      do
      {
        int v14 = *((_DWORD *)v9 + 10);
        int v9 = (long long *)((char *)v9 + 24);
      }
      while (v14 < v3);
      do
      {
        int v15 = *(_DWORD *)(v10 - 8);
        v10 -= 24;
      }
      while (v15 >= v3);
    }
    while ((unint64_t)v9 < v10);
  }
  long long v16 = (long long *)((char *)v9 - 24);
  if ((long long *)((char *)v9 - 24) != (long long *)a1)
  {
    long long v17 = *v16;
    *(_DWORD *)(a1 + 16) = *((_DWORD *)v9 - 2);
    *(_OWORD *)a1 = v17;
  }
  *long long v16 = v19;
  *((_DWORD *)v9 - 2) = v3;
  return (uint64_t)v9 - 24;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortFlowsBySpeedClass &,zilch::TrafficDynamicTile::Flow *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(_DWORD *)(a2 - 8) < *(_DWORD *)(a1 + 16))
      {
        long long v6 = *(_OWORD *)a1;
        uint64_t v7 = *(void *)(a1 + 16);
        int v8 = *(_DWORD *)(a2 - 8);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 24);
        *(_DWORD *)(a1 + 16) = v8;
        *(_DWORD *)(a2 - 8) = v7;
        *(_OWORD *)(a2 - 24) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortFlowsBySpeedClass &,zilch::TrafficDynamicTile::Flow *>((long long *)a1, (long long *)(a1 + 24), (long long *)(a2 - 24));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortFlowsBySpeedClass &,zilch::TrafficDynamicTile::Flow *>(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortFlowsBySpeedClass &,zilch::TrafficDynamicTile::Flow *>((__n128 *)a1, (__n128 *)(a1 + 24), (__n128 *)(a1 + 48), (__n128 *)(a1 + 72), (__n128 *)(a2 - 24));
      return 1;
    default:
      uint64_t v9 = a1 + 48;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortFlowsBySpeedClass &,zilch::TrafficDynamicTile::Flow *>((long long *)a1, (long long *)(a1 + 24), (long long *)(a1 + 48));
      uint64_t v10 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    int v13 = *(_DWORD *)(v10 + 16);
    if (v13 < *(_DWORD *)(v9 + 16))
    {
      long long v17 = *(_OWORD *)v10;
      uint64_t v14 = v11;
      while (1)
      {
        uint64_t v15 = a1 + v14;
        *(_OWORD *)(v15 + 72) = *(_OWORD *)(a1 + v14 + 48);
        *(_DWORD *)(v15 + 88) = *(_DWORD *)(a1 + v14 + 64);
        if (v14 == -48) {
          break;
        }
        v14 -= 24;
        if (v13 >= *(_DWORD *)(v15 + 40))
        {
          uint64_t v16 = a1 + v14 + 72;
          goto LABEL_12;
        }
      }
      uint64_t v16 = a1;
LABEL_12:
      *(_OWORD *)uint64_t v16 = v17;
      *(_DWORD *)(v16 + 16) = v13;
      if (++v12 == 8) {
        return v10 + 24 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 24;
    v10 += 24;
    if (v10 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortFlowsBySpeedClass &,zilch::TrafficDynamicTile::Flow *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortFlowsBySpeedClass &,zilch::TrafficDynamicTile::Flow *>((long long *)a1, (long long *)a2, (long long *)a3);
  if (*(_DWORD *)(a4 + 16) < *(_DWORD *)(a3 + 16))
  {
    __n128 result = *(__n128 *)a3;
    uint64_t v9 = *(void *)(a3 + 16);
    int v10 = *(_DWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_DWORD *)(a3 + 16) = v10;
    *(_DWORD *)(a4 + 16) = v9;
    *(__n128 *)a4 = result;
    if (*(_DWORD *)(a3 + 16) < *(_DWORD *)(a2 + 16))
    {
      __n128 result = *(__n128 *)a2;
      uint64_t v11 = *(void *)(a2 + 16);
      int v12 = *(_DWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_DWORD *)(a2 + 16) = v12;
      *(_DWORD *)(a3 + 16) = v11;
      *(__n128 *)a3 = result;
      if (*(_DWORD *)(a2 + 16) < *(_DWORD *)(a1 + 16))
      {
        __n128 result = *(__n128 *)a1;
        uint64_t v13 = *(void *)(a1 + 16);
        int v14 = *(_DWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_DWORD *)(a1 + 16) = v14;
        *(_DWORD *)(a2 + 16) = v13;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortFlowsBySpeedClass &,zilch::TrafficDynamicTile::Flow *>(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5)
{
  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortFlowsBySpeedClass &,zilch::TrafficDynamicTile::Flow *>((uint64_t)a1, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4).n128_u64[0];
  if ((signed __int32)a5[1].n128_u32[0] < (signed __int32)a4[1].n128_u32[0])
  {
    __n128 result = *a4;
    unint64_t v11 = a4[1].n128_u64[0];
    unsigned __int32 v12 = a5[1].n128_u32[0];
    *a4 = *a5;
    a4[1].n128_u32[0] = v12;
    a5[1].n128_u32[0] = v11;
    *a5 = result;
    if ((signed __int32)a4[1].n128_u32[0] < (signed __int32)a3[1].n128_u32[0])
    {
      __n128 result = *a3;
      unint64_t v13 = a3[1].n128_u64[0];
      unsigned __int32 v14 = a4[1].n128_u32[0];
      *a3 = *a4;
      a3[1].n128_u32[0] = v14;
      a4[1].n128_u32[0] = v13;
      *a4 = result;
      if ((signed __int32)a3[1].n128_u32[0] < (signed __int32)a2[1].n128_u32[0])
      {
        __n128 result = *a2;
        unint64_t v15 = a2[1].n128_u64[0];
        unsigned __int32 v16 = a3[1].n128_u32[0];
        *a2 = *a3;
        a2[1].n128_u32[0] = v16;
        a3[1].n128_u32[0] = v15;
        *a3 = result;
        if ((signed __int32)a2[1].n128_u32[0] < (signed __int32)a1[1].n128_u32[0])
        {
          __n128 result = *a1;
          unint64_t v17 = a1[1].n128_u64[0];
          unsigned __int32 v18 = a2[1].n128_u32[0];
          *a1 = *a2;
          a1[1].n128_u32[0] = v18;
          a2[1].n128_u32[0] = v17;
          *a2 = result;
        }
      }
    }
  }
  return result;
}

__n128 *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortFlowsBySpeedClass &,zilch::TrafficDynamicTile::Flow *,zilch::TrafficDynamicTile::Flow *>(__n128 *a1, __n128 *a2, __n128 *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    long long v6 = a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) / 24;
    if ((char *)a2 - (char *)a1 >= 25)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      unsigned __int32 v12 = (__n128 *)((char *)a1 + 24 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortFlowsBySpeedClass &,zilch::TrafficDynamicTile::Flow *>((uint64_t)a1, a4, v9, v12);
        unsigned __int32 v12 = (__n128 *)((char *)v12 - 24);
        --v11;
      }
      while (v11);
    }
    unint64_t v13 = v6;
    if (v6 != a3)
    {
      unsigned __int32 v14 = v6;
      do
      {
        if ((signed __int32)v14[1].n128_u32[0] < (signed __int32)a1[1].n128_u32[0])
        {
          __n128 v15 = *v14;
          uint64_t v16 = v14[1].n128_i64[0];
          unsigned __int32 v17 = a1[1].n128_u32[0];
          *unsigned __int32 v14 = *a1;
          v14[1].n128_u32[0] = v17;
          a1[1].n128_u32[0] = v16;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortFlowsBySpeedClass &,zilch::TrafficDynamicTile::Flow *>((uint64_t)a1, a4, v9, a1);
        }
        unsigned __int32 v14 = (__n128 *)((char *)v14 + 24);
      }
      while (v14 != a3);
      unint64_t v13 = a3;
    }
    if (v8 >= 25)
    {
      int64_t v18 = v8 / 0x18uLL;
      do
      {
        uint64_t v19 = 0;
        __n128 v31 = *a1;
        unint64_t v32 = a1[1].n128_u64[0];
        uint64_t v20 = a1;
        do
        {
          uint64_t v21 = v19 + 1;
          long long v22 = (__n128 *)((char *)v20 + 24 * v19 + 24);
          uint64_t v23 = (2 * v19) | 1;
          uint64_t v24 = 2 * v19 + 2;
          if (v24 < v18)
          {
            signed __int32 v25 = v20[1].n128_i32[6 * v21];
            signed __int32 v26 = v22[2].n128_i32[2];
            long long v22 = (__n128 *)((char *)v22 + 24 * (v25 < v26));
            if (v25 < v26) {
              uint64_t v23 = v24;
            }
          }
          __n128 v27 = *v22;
          v20[1].n128_u32[0] = v22[1].n128_u32[0];
          *uint64_t v20 = v27;
          uint64_t v20 = v22;
          uint64_t v19 = v23;
        }
        while (v23 <= (uint64_t)((unint64_t)(v18 - 2) >> 1));
        long long v6 = (__n128 *)((char *)v6 - 24);
        if (v22 == v6)
        {
          v22[1].n128_u32[0] = v32;
          *long long v22 = v31;
        }
        else
        {
          __n128 v28 = *v6;
          v22[1].n128_u32[0] = v6[1].n128_u32[0];
          *long long v22 = v28;
          __n128 *v6 = v31;
          v6[1].n128_u32[0] = v32;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortFlowsBySpeedClass &,zilch::TrafficDynamicTile::Flow *>((uint64_t)a1, (uint64_t)&v22[1].n128_i64[1], a4, 0xAAAAAAAAAAAAAAABLL * ((&v22[1].n128_i8[8] - (__int8 *)a1) >> 3));
        }
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortFlowsBySpeedClass &,zilch::TrafficDynamicTile::Flow *>(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  if (a3 >= 2)
  {
    int64_t v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 3)))
    {
      uint64_t v5 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3)) | 1;
      long long v6 = (__n128 *)(a1 + 24 * v5);
      if (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2 < a3)
      {
        int v7 = *(_DWORD *)(a1 + 24 * v5 + 16);
        __int32 v8 = v6[2].n128_i32[2];
        long long v6 = (__n128 *)((char *)v6 + 24 * (v7 < v8));
        if (v7 < v8) {
          uint64_t v5 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2;
        }
      }
      signed __int32 v9 = a4[1].n128_i32[0];
      if ((signed __int32)v6[1].n128_u32[0] >= v9)
      {
        __n128 v17 = *a4;
        do
        {
          unint64_t v10 = a4;
          a4 = v6;
          __n128 v11 = *v6;
          v10[1].n128_u32[0] = v6[1].n128_u32[0];
          __n128 *v10 = v11;
          if (v4 < v5) {
            break;
          }
          uint64_t v12 = (2 * v5) | 1;
          long long v6 = (__n128 *)(a1 + 24 * v12);
          uint64_t v13 = 2 * v5 + 2;
          if (v13 < a3)
          {
            int v14 = *(_DWORD *)(a1 + 24 * v12 + 16);
            __int32 v15 = v6[2].n128_i32[2];
            long long v6 = (__n128 *)((char *)v6 + 24 * (v14 < v15));
            if (v14 < v15) {
              uint64_t v12 = v13;
            }
          }
          uint64_t v5 = v12;
        }
        while ((signed __int32)v6[1].n128_u32[0] >= v9);
        __n128 result = v17;
        *a4 = v17;
        a4[1].n128_u32[0] = v9;
      }
    }
  }
  return result;
}

__n128 std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortFlowsBySpeedClass &,zilch::TrafficDynamicTile::Flow *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v4 = (unint64_t)(a4 - 2) >> 1;
    signed __int32 v5 = *(_DWORD *)(a2 - 8);
    if (*(_DWORD *)(a1 + 24 * v4 + 16) < v5)
    {
      long long v6 = (__n128 *)(a2 - 24);
      __n128 v10 = *(__n128 *)(a2 - 24);
      do
      {
        int v7 = v6;
        long long v6 = (__n128 *)(a1 + 24 * v4);
        __n128 v8 = *v6;
        v7[1].n128_u32[0] = v6[1].n128_u32[0];
        __n128 *v7 = v8;
        if (!v4) {
          break;
        }
        unint64_t v4 = (v4 - 1) >> 1;
      }
      while (*(_DWORD *)(a1 + 24 * v4 + 16) < v5);
      __n128 result = v10;
      __n128 *v6 = v10;
      v6[1].n128_u32[0] = v5;
    }
  }
  return result;
}

void *std::vector<zilch::TrafficDynamicTile::Flow>::__init_with_size[abi:ne180100]<zilch::TrafficDynamicTile::Flow*,zilch::TrafficDynamicTile::Flow*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    __n128 result = std::vector<zilch::TrafficDynamicTile::Flow>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    uint64_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8 - 4);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1890EF744(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::__init_with_size[abi:ne180100]<std::shared_ptr<zilch::TrafficDynamicTile::Incident>*,std::shared_ptr<zilch::TrafficDynamicTile::Incident>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::__vallocate[abi:ne180100](result, a4);
    __n128 result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>,std::shared_ptr<zilch::TrafficDynamicTile::Incident>*,std::shared_ptr<zilch::TrafficDynamicTile::Incident>*,std::shared_ptr<zilch::TrafficDynamicTile::Incident>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1890EF7C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>,std::shared_ptr<zilch::TrafficDynamicTile::Incident>*,std::shared_ptr<zilch::TrafficDynamicTile::Incident>*,std::shared_ptr<zilch::TrafficDynamicTile::Incident>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *uint64_t v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>,std::shared_ptr<zilch::TrafficDynamicTile::Incident>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>,std::shared_ptr<zilch::TrafficDynamicTile::Incident>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>,std::shared_ptr<zilch::TrafficDynamicTile::Incident>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>,std::shared_ptr<zilch::TrafficDynamicTile::Incident>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    int v3 = *(std::__shared_weak_count **)(v1 - 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 -= 16;
  }
}

void *std::vector<unsigned long long>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long long>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1890EF994(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long long>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::StringList::Entry>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void std::vector<zilch::TrafficDynamicTile::Flow>::__append(void **a1, unint64_t a2)
{
  long long v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (unsigned char *)v7) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = &v7[3 * a2];
      do
      {
        void *v7 = 0;
        v7[1] = 0x3F80000000000000;
        *((_DWORD *)v7 + 4) = 3;
        v7 += 3;
      }
      while (v7 != v13);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (unsigned char *)*a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::TrafficDynamicTile::Flow>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    int v14 = &v12[24 * v8];
    __int32 v15 = &v14[24 * a2];
    uint64_t v16 = v14;
    do
    {
      *(void *)uint64_t v16 = 0;
      *((void *)v16 + 1) = 0x3F80000000000000;
      *((_DWORD *)v16 + 4) = 3;
      v16 += 24;
    }
    while (v16 != v15);
    __n128 v17 = &v12[24 * v11];
    uint64_t v19 = (char *)*a1;
    int64_t v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        long long v20 = *(_OWORD *)(v18 - 24);
        *((_DWORD *)v14 - 2) = *((_DWORD *)v18 - 2);
        *(_OWORD *)(v14 - 24) = v20;
        v14 -= 24;
        v18 -= 24;
      }
      while (v18 != v19);
      int64_t v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v15;
    a1[2] = v17;
    if (v18)
    {
      operator delete(v18);
    }
  }
}

void std::shared_ptr<zilch::TrafficDynamicTile::Incident>::shared_ptr[abi:ne180100]<zilch::TrafficDynamicTile::Incident,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1890EFBF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  if (v10) {
    std::default_delete<zilch::TrafficDynamicTile::Incident>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<zilch::TrafficDynamicTile::Incident *,std::shared_ptr<zilch::TrafficDynamicTile::Incident>::__shared_ptr_default_delete<zilch::TrafficDynamicTile::Incident,zilch::TrafficDynamicTile::Incident>,std::allocator<zilch::TrafficDynamicTile::Incident>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18C11F580);
}

void std::__shared_ptr_pointer<zilch::TrafficDynamicTile::Incident *,std::shared_ptr<zilch::TrafficDynamicTile::Incident>::__shared_ptr_default_delete<zilch::TrafficDynamicTile::Incident,zilch::TrafficDynamicTile::Incident>,std::allocator<zilch::TrafficDynamicTile::Incident>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<zilch::TrafficDynamicTile::Incident *,std::shared_ptr<zilch::TrafficDynamicTile::Incident>::__shared_ptr_default_delete<zilch::TrafficDynamicTile::Incident,zilch::TrafficDynamicTile::Incident>,std::allocator<zilch::TrafficDynamicTile::Incident>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::default_delete<zilch::TrafficDynamicTile::Incident>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 119) < 0) {
      operator delete(*(void **)(a2 + 96));
    }
    if (*(char *)(a2 + 95) < 0) {
      operator delete(*(void **)(a2 + 72));
    }
    if (*(char *)(a2 + 63) < 0) {
      operator delete(*(void **)(a2 + 40));
    }
    if (*(char *)(a2 + 39) < 0) {
      operator delete(*(void **)(a2 + 16));
    }
    JUMPOUT(0x18C11F580);
  }
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

void *zilch::TrafficSegmentList::TrafficSegmentList(zilch::TrafficSegmentList *this, unsigned int a2)
{
  return std::vector<long long>::vector(this, a2);
}

zilch::TrafficSegmentList *zilch::TrafficSegmentList::TrafficSegmentList(zilch::TrafficSegmentList *this, unsigned int a2, zilch::ReadBitstream *a3)
{
  uint64_t v5 = (zilch::TrafficSegmentList *)std::vector<long long>::vector(this, a2);
  zilch::TrafficSegmentList::decode(v5, a3);
  return this;
}

void sub_1890EFDB4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t zilch::TrafficSegmentList::decode(zilch::TrafficSegmentList *this, zilch::ReadBitstream *a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (*(void *)this == v2) {
    return 0;
  }
  uint64_t v33 = *(void *)this;
  unint64_t VariableWidth = zilch::ReadBitstream::getVariableWidth(a2);
  std::vector<zilch::TileKey>::vector(__p, VariableWidth);
  int v6 = zilch::ReadBitstream::get(a2, 8);
  *(_DWORD *)__p[0] = v6;
  int v7 = zilch::ReadBitstream::get(a2, 8);
  *((_DWORD *)__p[0] + 1) = v7;
  if (VariableWidth < 2)
  {
LABEL_19:
    double v20 = log2((double)VariableWidth);
    unsigned int v35 = 0;
    uint64_t EliasGamma = zilch::ReadBitstream::getEliasGamma(a2, &v35);
    if (!EliasGamma)
    {
      if (--v35 <= 0x20)
      {
        if (((v2 - v33) & 0x7FFFFFFF8) != 0)
        {
          uint64_t v21 = 0;
          int v22 = vcvtpd_u64_f64(v20);
          uint64_t v23 = ((unint64_t)(v2 - v33) >> 3);
          do
          {
            unint64_t v24 = *((void *)a2 + 3);
            if (v24 >= *((void *)a2 + 1))
            {
              int v26 = 0;
              *((unsigned char *)a2 + 36) = 1;
            }
            else
            {
              int v25 = *((_DWORD *)a2 + 8);
              int v26 = (*(_DWORD *)(*(void *)a2 + 4 * v24) >> v25) & 1;
              *((_DWORD *)a2 + 8) = v25 + 1;
              if (v25 >= 31)
              {
                *((_DWORD *)a2 + 8) = 0;
                *((void *)a2 + 3) = v24 + 1;
              }
            }
            if (VariableWidth < 2) {
              unsigned int v27 = 0;
            }
            else {
              unsigned int v27 = zilch::ReadBitstream::get(a2, v22);
            }
            __n128 v28 = (unsigned int *)((char *)__p[0] + 8 * v27);
            uint64_t v29 = *v28;
            uint64_t v30 = v28[1];
            uint64_t v31 = (v30 << 32) | (v29 << 47) | zilch::ReadBitstream::getRice(a2, v35);
            if (v26) {
              uint64_t v31 = -v31;
            }
            *(void *)(*(void *)this + 8 * v21++) = v31;
          }
          while (v23 != v21);
        }
        uint64_t EliasGamma = 0;
      }
      else
      {
        uint64_t EliasGamma = 1;
      }
    }
  }
  else
  {
    uint64_t v8 = 0;
    while (1)
    {
      unint64_t v9 = *((void *)a2 + 3);
      if (v9 >= *((void *)a2 + 1))
      {
        int v11 = 0;
        *((unsigned char *)a2 + 36) = 1;
      }
      else
      {
        int v10 = *((_DWORD *)a2 + 8);
        int v11 = (*(_DWORD *)(*(void *)a2 + 4 * v9) >> v10) & 1;
        *((_DWORD *)a2 + 8) = v10 + 1;
        if (v10 >= 31)
        {
          *((_DWORD *)a2 + 8) = 0;
          *((void *)a2 + 3) = v9 + 1;
        }
      }
      unsigned int v35 = 0;
      uint64_t EliasGamma = zilch::ReadBitstream::getEliasGamma(a2, &v35);
      if (EliasGamma) {
        break;
      }
      --v35;
      unint64_t v13 = *((void *)a2 + 3);
      if (v13 >= *((void *)a2 + 1))
      {
        int v15 = 0;
        *((unsigned char *)a2 + 36) = 1;
      }
      else
      {
        int v14 = *((_DWORD *)a2 + 8);
        int v15 = (*(_DWORD *)(*(void *)a2 + 4 * v13) >> v14) & 1;
        *((_DWORD *)a2 + 8) = v14 + 1;
        if (v14 >= 31)
        {
          *((_DWORD *)a2 + 8) = 0;
          *((void *)a2 + 3) = v13 + 1;
        }
      }
      unsigned int v34 = 0;
      uint64_t EliasGamma = zilch::ReadBitstream::getEliasGamma(a2, &v34);
      if (EliasGamma) {
        break;
      }
      unsigned int v16 = v35;
      --v34;
      __n128 v17 = (char *)__p[0] + v8;
      if (v11) {
        unsigned int v16 = -v35;
      }
      int v18 = v17[1];
      v17[2] = *v17 + v16;
      unsigned int v19 = v34;
      if (v15) {
        unsigned int v19 = -v34;
      }
      v17[3] = v18 + v19;
      v8 += 8;
      if (8 * VariableWidth - 8 == v8) {
        goto LABEL_19;
      }
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return EliasGamma;
}

void sub_1890F00D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void zilch::TrafficSegmentList::~TrafficSegmentList(zilch::TrafficSegmentList *this)
{
  uint64_t v2 = *(void **)this;
  if (v2)
  {
    *((void *)this + 1) = v2;
    operator delete(v2);
  }
}

uint64_t zilch::TrafficSegmentList::operator[](void *a1, uint64_t a2)
{
  return *a1 + 8 * a2;
}

void zilch::TrafficSegmentList::encode(zilch::TrafficSegmentList *this, zilch::WriteBitstream *a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (*(void *)this != v2)
  {
    unint64_t v5 = v2 - *(void *)this;
    uint64_t v65 = 0;
    int v66 = 0;
    std::string v67 = 0;
    int v6 = (const unsigned int *)(v5 >> 3);
    int v7 = 0;
    uint64_t v8 = v5 & 0x7FFFFFFF8;
    if ((v5 & 0x7FFFFFFF8) != 0)
    {
      unint64_t v9 = 0;
      do
      {
        uint64_t v10 = *(void *)(*(void *)this + 8 * (void)v9);
        if (v10 < 0) {
          uint64_t v10 = -v10;
        }
        uint64_t v11 = v10 & 0x7FFF00000000 | ((unint64_t)v10 >> 47) & 0x7FFF;
        if (v7 >= v67)
        {
          uint64_t v12 = ((char *)v7 - (unsigned char *)v65) >> 3;
          if ((unint64_t)(v12 + 1) >> 61) {
            std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v13 = ((char *)v67 - (unsigned char *)v65) >> 2;
          if (v13 <= v12 + 1) {
            unint64_t v13 = v12 + 1;
          }
          if ((unint64_t)((char *)v67 - (unsigned char *)v65) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v13;
          }
          if (v14) {
            int v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::StringList::Entry>>((uint64_t)&v67, v14);
          }
          else {
            int v15 = 0;
          }
          unsigned int v16 = (uint32x2_t *)&v15[8 * v12];
          *unsigned int v16 = (uint32x2_t)v11;
          int v7 = v16 + 1;
          int v18 = v65;
          __n128 v17 = v66;
          if (v66 != v65)
          {
            do
            {
              uint32x2_t v19 = *(uint32x2_t *)(v17 - 2);
              v17 -= 2;
              v16[-1] = v19;
              --v16;
            }
            while (v17 != v18);
            __n128 v17 = v65;
          }
          uint64_t v65 = v16;
          int v66 = (char *)v7;
          std::string v67 = (uint32x2_t *)&v15[8 * v14];
          if (v17) {
            operator delete(v17);
          }
        }
        else
        {
          *v7++ = (uint32x2_t)v11;
        }
        int v66 = (char *)v7;
        unint64_t v9 = (const unsigned int *)((char *)v9 + 1);
      }
      while (v9 != v6);
      double v20 = (uint32x2_t *)v65;
    }
    else
    {
      double v20 = 0;
    }
    unint64_t v21 = 126 - 2 * __clz(v7 - v20);
    if (v7 == v20) {
      uint64_t v22 = 0;
    }
    else {
      uint64_t v22 = v21;
    }
    std::__introsort<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *,false>((uint64_t)v20, v7, (uint64_t)&v63, v22, 1);
    uint64_t v23 = (char *)std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<zilch::TileKey *>,std::__wrap_iter<zilch::TileKey *>,std::__equal_to &>(v65, v66);
    uint64_t v58 = v8;
    if (v66 != v23) {
      int v66 = v23;
    }
    unint64_t v24 = v23 - (unsigned char *)v65;
    unint64_t v25 = v24 >> 3;
    v64[0] = 0;
    v64[1] = 0;
    unint64_t v63 = (uint64_t *)v64;
    if ((v24 >> 3))
    {
      uint64_t v26 = 0;
      int v27 = 0;
      uint64_t v28 = v24 & 0x7FFFFFFF8;
      do
      {
        std::string __p = (char *)v65 + v26;
        *((_DWORD *)std::__tree<std::__value_type<zilch::TileKey,unsigned int>,std::__map_value_compare<zilch::TileKey,std::__value_type<zilch::TileKey,unsigned int>,zilch::TileKeyCompare,true>,std::allocator<std::__value_type<zilch::TileKey,unsigned int>>>::__emplace_unique_key_args<zilch::TileKey,std::piecewise_construct_t const&,std::tuple<zilch::TileKey const&>,std::tuple<>>(&v63, (unsigned int *)((char *)v65 + v26), (uint64_t)&unk_18A5C7149, (void **)&__p)+ 9) = v27++;
        v26 += 8;
      }
      while (v28 != v26);
    }
    zilch::WriteBitstream::putVariableWidth(a2, v25);
    unsigned int v30 = *(_DWORD *)v65;
    unsigned int v29 = *((_DWORD *)v65 + 1);
    zilch::WriteBitstream::put(a2, *(_DWORD *)v65, 8);
    zilch::WriteBitstream::put(a2, v29, 8);
    if (v25 >= 2)
    {
      uint64_t v31 = 0;
      uint64_t v32 = 1 - v25;
      do
      {
        unsigned int v33 = *(_DWORD *)((char *)v65 + v31 + 8);
        unsigned int v34 = *(_DWORD *)((char *)v65 + v31 + 12);
        if (v34 >= v29) {
          int v35 = v34 - v29;
        }
        else {
          int v35 = v29 - v34;
        }
        zilch::WriteBitstream::put(a2, v33 < v30);
        unsigned int v36 = v30 - v33;
        if (v33 >= v30) {
          unsigned int v36 = v33 - v30;
        }
        zilch::WriteBitstream::putEliasGamma(a2, v36 + 1);
        zilch::WriteBitstream::put(a2, v34 < v29);
        zilch::WriteBitstream::putEliasGamma(a2, v35 + 1);
        v31 += 8;
        unsigned int v30 = v33;
        unsigned int v29 = v34;
      }
      while (!__CFADD__(v32++, 1));
    }
    double v38 = log2((double)(unint64_t)((v66 - (unsigned char *)v65) >> 3));
    uint64_t v39 = 0;
    int v40 = 0;
    int v41 = vcvtpd_u64_f64(v38);
    std::string __p = 0;
    std::string v61 = 0;
    unint64_t v62 = 0;
    do
    {
      uint64_t v42 = *(void *)(*(void *)this + 8 * (void)v40);
      if (v42 >= 0) {
        uint64_t v43 = *(void *)(*(void *)this + 8 * (void)v40);
      }
      else {
        uint64_t v43 = -v42;
      }
      if (v39 >= v62)
      {
        uint64_t v45 = (char *)__p;
        uint64_t v46 = (v39 - (unsigned char *)__p) >> 2;
        unint64_t v47 = v46 + 1;
        if ((unint64_t)(v46 + 1) >> 62) {
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v48 = v62 - (unsigned char *)__p;
        if ((v62 - (unsigned char *)__p) >> 1 > v47) {
          unint64_t v47 = v48 >> 1;
        }
        if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v49 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v49 = v47;
        }
        if (v49)
        {
          unsigned int v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v62, v49);
          uint64_t v45 = (char *)__p;
          uint64_t v39 = v61;
        }
        else
        {
          unsigned int v50 = 0;
        }
        uint64_t v51 = &v50[4 * v46];
        *(_DWORD *)uint64_t v51 = v43;
        uint64_t v44 = v51 + 4;
        while (v39 != v45)
        {
          int v52 = *((_DWORD *)v39 - 1);
          v39 -= 4;
          *((_DWORD *)v51 - 1) = v52;
          v51 -= 4;
        }
        std::string __p = v51;
        std::string v61 = v44;
        unint64_t v62 = &v50[4 * v49];
        if (v45) {
          operator delete(v45);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v39 = v43;
        uint64_t v44 = v39 + 4;
      }
      std::string v61 = v44;
      int v40 = (const unsigned int *)((char *)v40 + 1);
      uint64_t v39 = v44;
    }
    while (v40 != v6);
    int v53 = zilch::WriteBitstream::computeOptimalRiceBits((zilch::WriteBitstream *)__p, v6);
    zilch::WriteBitstream::putEliasGamma(a2, v53 + 1);
    if (v58)
    {
      long long v54 = 0;
      do
      {
        uint64_t v55 = *(void *)(*(void *)this + 8 * (void)v54);
        zilch::WriteBitstream::put(a2, (unint64_t)v55 >> 63);
        if ((unint64_t)(v66 - (unsigned char *)v65) >= 9)
        {
          if (v55 >= 0) {
            unint64_t v56 = v55;
          }
          else {
            unint64_t v56 = -v55;
          }
          uint64_t v59 = v56 & 0x7FFF00000000 | (v56 >> 47) & 0x7FFF;
          std::string v68 = &v59;
          int v57 = std::__tree<std::__value_type<zilch::TileKey,unsigned int>,std::__map_value_compare<zilch::TileKey,std::__value_type<zilch::TileKey,unsigned int>,zilch::TileKeyCompare,true>,std::allocator<std::__value_type<zilch::TileKey,unsigned int>>>::__emplace_unique_key_args<zilch::TileKey,std::piecewise_construct_t const&,std::tuple<zilch::TileKey const&>,std::tuple<>>(&v63, (unsigned int *)&v59, (uint64_t)&unk_18A5C7149, &v68);
          zilch::WriteBitstream::put(a2, *((_DWORD *)v57 + 9), v41);
        }
        zilch::WriteBitstream::putRice(a2, *((_DWORD *)__p + (void)v54), v53);
        long long v54 = (const unsigned int *)((char *)v54 + 1);
      }
      while (v6 != v54);
    }
    if (__p)
    {
      std::string v61 = (char *)__p;
      operator delete(__p);
    }
    std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::destroy((uint64_t)&v63, v64[0]);
    if (v65)
    {
      int v66 = (char *)v65;
      operator delete(v65);
    }
  }
}

void sub_1890F0620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, char a15, void *a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *std::vector<long long>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long long>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1890F06EC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *,false>(uint64_t result, uint32x2_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = (uint32x2_t *)result;
LABEL_2:
  uint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = a2 - v11;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          unsigned __int32 v24 = a2[-1].u32[0];
          BOOL v6 = v24 == v11->i32[0];
          BOOL v25 = v24 < v11->i32[0];
          if (v6) {
            BOOL v25 = a2[-1].i32[1] < (unsigned __int32)v11->i32[1];
          }
          if (v25)
          {
            uint32x2_t v26 = *v11;
            *uint64_t v11 = a2[-1];
            a2[-1] = v26;
          }
          break;
        case 3uLL:
          __n128 result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>((unsigned int *)v11, (unsigned int *)&v11[1], (unsigned int *)&a2[-1]);
          break;
        case 4uLL:
          __n128 result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>((unsigned int *)v11, (unsigned int *)&v11[1], (unsigned int *)&v11[2], (unsigned int *)&a2[-1]);
          break;
        case 5uLL:
          __n128 result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>((unsigned int *)v11, (unsigned int *)&v11[1], (unsigned int *)&v11[2], (unsigned int *)&v11[3], (unsigned int *)&a2[-1]);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 191) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *,zilch::TileKey *>(v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    __n128 v17 = (unsigned int *)&v11[v15 >> 1];
    if ((unint64_t)v14 >= 0x401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>((unsigned int *)v11, (unsigned int *)&v11[v15 >> 1], (unsigned int *)&a2[-1]);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>((unsigned int *)&v11[1], v17 - 2, (unsigned int *)&a2[-2]);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>((unsigned int *)&v11[2], (unsigned int *)&v11[v16 + 1], (unsigned int *)&a2[-3]);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>(v17 - 2, v17, (unsigned int *)&v11[v16 + 1]);
      uint32x2_t v18 = *v11;
      *uint64_t v11 = *(uint32x2_t *)v17;
      *(uint32x2_t *)__n128 v17 = v18;
      if (a5) {
        goto LABEL_16;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>((unsigned int *)&v11[v15 >> 1], (unsigned int *)v11, (unsigned int *)&a2[-1]);
      if (a5) {
        goto LABEL_16;
      }
    }
    unsigned __int32 v19 = v11[-1].u32[0];
    BOOL v6 = v19 == v11->i32[0];
    BOOL v20 = v19 < v11->i32[0];
    if (v6) {
      BOOL v20 = v11[-1].i32[1] < (unsigned __int32)v11->i32[1];
    }
    if (!v20)
    {
      __n128 result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKey *,zilch::TileKeyCompare &>((unsigned int *)v11, (unsigned int *)a2);
      uint64_t v11 = (uint32x2_t *)result;
      goto LABEL_21;
    }
LABEL_16:
    unint64_t v21 = (unsigned int *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKey *,zilch::TileKeyCompare &>((uint64_t *)v11, (uint64_t *)a2);
    if ((v22 & 1) == 0) {
      goto LABEL_19;
    }
    BOOL v23 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>((unsigned int *)v11, v21);
    uint64_t v11 = (uint32x2_t *)(v21 + 2);
    __n128 result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>(v21 + 2, (unsigned int *)a2);
    if (result)
    {
      a4 = -v13;
      a2 = (uint32x2_t *)v21;
      if (v23) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v23)
    {
LABEL_19:
      __n128 result = std::__introsort<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *,false>(v10, v21, a3, -v13, a5 & 1);
      uint64_t v11 = (uint32x2_t *)(v21 + 2);
LABEL_21:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>((unsigned int *)v11, (unsigned int *)a2);
  }
  else
  {
    return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>((unsigned int *)v11, (unsigned int *)a2);
  }
}

unsigned int *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>(unsigned int *result, unsigned int *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 2;
    if (result + 2 != a2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = result;
      do
      {
        unsigned int v5 = v4[2];
        unsigned int v6 = v4[3];
        unsigned int v7 = *v4;
        unsigned int v8 = v4[1];
        uint64_t v4 = v2;
        BOOL v9 = v6 < v8;
        BOOL v10 = v5 == v7;
        BOOL v11 = v5 < v7;
        if (!v10) {
          BOOL v9 = v11;
        }
        if (v9)
        {
          uint64_t v12 = *(void *)v4;
          uint64_t v13 = HIDWORD(*(void *)v4);
          uint64_t v14 = v3;
          while (1)
          {
            unint64_t v15 = (char *)result + v14;
            *(void *)((char *)result + v14 + 8) = *(void *)((char *)result + v14);
            if (!v14) {
              break;
            }
            unsigned int v16 = *((_DWORD *)v15 - 2);
            BOOL v17 = *((_DWORD *)v15 - 1) > v13;
            BOOL v10 = v16 == v12;
            BOOL v18 = v16 > v12;
            if (!v10) {
              BOOL v17 = v18;
            }
            v14 -= 8;
            if (!v17)
            {
              unsigned __int32 v19 = (unsigned int *)((char *)result + v14 + 8);
              goto LABEL_14;
            }
          }
          unsigned __int32 v19 = result;
LABEL_14:
          *(void *)unsigned __int32 v19 = v12;
        }
        uint64_t v2 = v4 + 2;
        v3 += 8;
      }
      while (v4 + 2 != a2);
    }
  }
  return result;
}

unsigned int *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>(unsigned int *result, unsigned int *a2)
{
  if (result != a2)
  {
    while (result + 2 != a2)
    {
      unsigned int v2 = result[2];
      unsigned int v3 = result[3];
      unsigned int v4 = *result;
      unsigned int v5 = result[1];
      result += 2;
      BOOL v6 = v3 < v5;
      BOOL v7 = v2 == v4;
      BOOL v8 = v2 < v4;
      if (!v7) {
        BOOL v6 = v8;
      }
      if (v6)
      {
        uint64_t v9 = *(void *)result;
        uint64_t v10 = HIDWORD(*(void *)result);
        BOOL v11 = result;
        do
        {
          uint64_t v12 = v11;
          uint64_t v13 = *((void *)v11 - 1);
          v11 -= 2;
          *(void *)uint64_t v12 = v13;
          unsigned int v14 = *(v12 - 4);
          BOOL v15 = *(v12 - 3) > v10;
          BOOL v7 = v14 == v9;
          BOOL v16 = v14 > v9;
          if (!v7) {
            BOOL v15 = v16;
          }
        }
        while (v15);
        *(void *)BOOL v11 = v9;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>(unsigned int *a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3 = *a2;
  unsigned int v4 = a2[1];
  BOOL v5 = *a2 < *a1;
  if (*a2 == *a1) {
    BOOL v5 = v4 < a1[1];
  }
  BOOL v6 = a3[1] < v4;
  BOOL v7 = *a3 == v3;
  BOOL v8 = *a3 < v3;
  if (!v7) {
    BOOL v6 = v8;
  }
  if (v5)
  {
    uint64_t v9 = *(void *)a1;
    if (v6)
    {
      *(void *)a1 = *(void *)a3;
      *(void *)a3 = v9;
      return 1;
    }
    *(void *)a1 = *(void *)a2;
    *(void *)a2 = v9;
    BOOL v13 = *a3 < v9;
    if (*a3 == v9) {
      BOOL v13 = a3[1] < HIDWORD(v9);
    }
    if (!v13) {
      return 1;
    }
    *(void *)a2 = *(void *)a3;
    *(void *)a3 = v9;
    return 2;
  }
  if (v6)
  {
    uint64_t v10 = *(void *)a2;
    *(void *)a2 = *(void *)a3;
    *(void *)a3 = v10;
    BOOL v11 = *a2 < *a1;
    if (*a2 == *a1) {
      BOOL v11 = a2[1] < a1[1];
    }
    if (!v11) {
      return 1;
    }
    uint64_t v12 = *(void *)a1;
    *(void *)a1 = *(void *)a2;
    *(void *)a2 = v12;
    return 2;
  }
  return 0;
}

unsigned int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKey *,zilch::TileKeyCompare &>(unsigned int *a1, unsigned int *a2)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = HIDWORD(*(void *)a1);
  unsigned int v4 = *(a2 - 2);
  BOOL v5 = v4 == *(void *)a1;
  BOOL v6 = v4 > *(void *)a1;
  if (v5) {
    BOOL v6 = *(a2 - 1) > v3;
  }
  if (v6)
  {
    BOOL v7 = a1;
    do
    {
      unsigned int v8 = v7[2];
      unsigned int v9 = v7[3];
      v7 += 2;
      BOOL v10 = v9 > v3;
      BOOL v5 = v8 == v2;
      BOOL v11 = v8 > v2;
      if (v5) {
        BOOL v11 = v10;
      }
    }
    while (!v11);
  }
  else
  {
    uint64_t v12 = a1 + 2;
    do
    {
      BOOL v7 = v12;
      if (v12 >= a2) {
        break;
      }
      unsigned int v13 = *v12;
      BOOL v14 = v7[1] > v3;
      BOOL v5 = v13 == v2;
      BOOL v15 = v13 > v2;
      if (!v5) {
        BOOL v14 = v15;
      }
      uint64_t v12 = v7 + 2;
    }
    while (!v14);
  }
  if (v7 < a2)
  {
    do
    {
      unsigned int v16 = *(a2 - 2);
      unsigned int v17 = *(a2 - 1);
      a2 -= 2;
      BOOL v18 = v17 > v3;
      BOOL v5 = v16 == v2;
      BOOL v19 = v16 > v2;
      if (v5) {
        BOOL v19 = v18;
      }
    }
    while (v19);
  }
  while (v7 < a2)
  {
    uint64_t v20 = *(void *)v7;
    *(void *)BOOL v7 = *(void *)a2;
    *(void *)a2 = v20;
    do
    {
      unsigned int v21 = v7[2];
      unsigned int v22 = v7[3];
      v7 += 2;
      BOOL v23 = v22 > v3;
      BOOL v5 = v21 == v2;
      BOOL v24 = v21 > v2;
      if (v5) {
        BOOL v24 = v23;
      }
    }
    while (!v24);
    do
    {
      unsigned int v25 = *(a2 - 2);
      unsigned int v26 = *(a2 - 1);
      a2 -= 2;
      BOOL v27 = v26 > v3;
      BOOL v5 = v25 == v2;
      BOOL v28 = v25 > v2;
      if (v5) {
        BOOL v28 = v27;
      }
    }
    while (v28);
  }
  if (v7 - 2 != a1) {
    *(void *)a1 = *((void *)v7 - 1);
  }
  *((void *)v7 - 1) = v2;
  return v7;
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKey *,zilch::TileKeyCompare &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a1;
  unint64_t v4 = HIDWORD(*a1);
  do
  {
    unsigned int v5 = a1[v2 + 1];
    BOOL v6 = HIDWORD(a1[v2 + 1]) < v4;
    BOOL v7 = v5 == v3;
    BOOL v8 = v5 < v3;
    if (!v7) {
      BOOL v6 = v8;
    }
    ++v2;
  }
  while (v6);
  unsigned int v9 = &a1[v2];
  BOOL v10 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v9 >= a2) {
        break;
      }
      unsigned int v15 = *((_DWORD *)a2 - 2);
      unsigned int v16 = *((_DWORD *)a2-- - 1);
      BOOL v17 = v16 < v4;
      BOOL v7 = v15 == v3;
      BOOL v18 = v15 < v3;
      if (v7) {
        BOOL v18 = v17;
      }
    }
    while (!v18);
  }
  else
  {
    do
    {
      unsigned int v11 = *((_DWORD *)a2 - 2);
      unsigned int v12 = *((_DWORD *)a2-- - 1);
      BOOL v13 = v12 < v4;
      BOOL v7 = v11 == v3;
      BOOL v14 = v11 < v3;
      if (v7) {
        BOOL v14 = v13;
      }
    }
    while (!v14);
  }
  if (v9 < a2)
  {
    unint64_t v19 = (unint64_t)v9;
    uint64_t v20 = a2;
    do
    {
      uint64_t v21 = *(void *)v19;
      *(void *)unint64_t v19 = *v20;
      *uint64_t v20 = v21;
      do
      {
        unsigned int v22 = *(_DWORD *)(v19 + 8);
        unsigned int v23 = *(_DWORD *)(v19 + 12);
        v19 += 8;
        BOOL v24 = v23 < v4;
        BOOL v7 = v22 == v3;
        BOOL v25 = v22 < v3;
        if (v7) {
          BOOL v25 = v24;
        }
      }
      while (v25);
      do
      {
        unsigned int v26 = *((_DWORD *)v20 - 2);
        unsigned int v27 = *((_DWORD *)v20-- - 1);
        BOOL v28 = v27 < v4;
        BOOL v7 = v26 == v3;
        BOOL v29 = v26 < v3;
        if (v7) {
          BOOL v29 = v28;
        }
      }
      while (!v29);
    }
    while (v19 < (unint64_t)v20);
    BOOL v10 = (uint64_t *)(v19 - 8);
  }
  if (v10 != a1) {
    *a1 = *v10;
  }
  uint64_t *v10 = v3;
  return v10;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>(unsigned int *a1, unsigned int *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned int v6 = *(a2 - 2);
      BOOL v7 = v6 == *a1;
      BOOL v8 = v6 < *a1;
      if (v7) {
        BOOL v8 = *(a2 - 1) < a1[1];
      }
      if (v8)
      {
        uint64_t v9 = *(void *)a1;
        *(void *)a1 = *((void *)a2 - 1);
        *((void *)a2 - 1) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      BOOL v10 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>(a1, a1 + 2, a1 + 4);
      unsigned int v11 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    BOOL v14 = *v11 < *v10;
    if (*v11 == *v10) {
      BOOL v14 = v11[1] < v10[1];
    }
    if (v14)
    {
      uint64_t v15 = *(void *)v11;
      uint64_t v16 = HIDWORD(*(void *)v11);
      uint64_t v17 = v12;
      while (1)
      {
        BOOL v18 = (char *)a1 + v17;
        *(void *)((char *)a1 + v17 + 24) = *(void *)((char *)a1 + v17 + 16);
        if (v17 == -16) {
          break;
        }
        unsigned int v19 = *((_DWORD *)v18 + 2);
        BOOL v20 = *((_DWORD *)v18 + 3) > v16;
        BOOL v7 = v19 == v15;
        BOOL v21 = v19 > v15;
        if (!v7) {
          BOOL v20 = v21;
        }
        v17 -= 8;
        if (!v20)
        {
          unsigned int v22 = (unsigned int *)((char *)a1 + v17 + 24);
          goto LABEL_18;
        }
      }
      unsigned int v22 = a1;
LABEL_18:
      *(void *)unsigned int v22 = v15;
      if (++v13 == 8) {
        return v11 + 2 == a2;
      }
    }
    BOOL v10 = v11;
    v12 += 8;
    v11 += 2;
    if (v11 == a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>(a1, a2, a3);
  BOOL v9 = *a4 < *a3;
  if (*a4 == *a3) {
    BOOL v9 = a4[1] < a3[1];
  }
  if (v9)
  {
    uint64_t v10 = *(void *)a3;
    *(void *)a3 = *(void *)a4;
    *(void *)a4 = v10;
    BOOL v11 = *a3 < *a2;
    if (*a3 == *a2) {
      BOOL v11 = a3[1] < a2[1];
    }
    if (v11)
    {
      uint64_t v12 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v12;
      BOOL v13 = *a2 < *a1;
      if (*a2 == *a1) {
        BOOL v13 = a2[1] < a1[1];
      }
      if (v13)
      {
        uint64_t v14 = *(void *)a1;
        *(void *)a1 = *(void *)a2;
        *(void *)a2 = v14;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>(a1, a2, a3, a4);
  BOOL v11 = *a5 < *a4;
  if (*a5 == *a4) {
    BOOL v11 = a5[1] < a4[1];
  }
  if (v11)
  {
    uint64_t v12 = *(void *)a4;
    *(void *)a4 = *(void *)a5;
    *(void *)a5 = v12;
    BOOL v13 = *a4 < *a3;
    if (*a4 == *a3) {
      BOOL v13 = a4[1] < a3[1];
    }
    if (v13)
    {
      uint64_t v14 = *(void *)a3;
      *(void *)a3 = *(void *)a4;
      *(void *)a4 = v14;
      BOOL v15 = *a3 < *a2;
      if (*a3 == *a2) {
        BOOL v15 = a3[1] < a2[1];
      }
      if (v15)
      {
        uint64_t v16 = *(void *)a2;
        *(void *)a2 = *(void *)a3;
        *(void *)a3 = v16;
        BOOL v17 = *a2 < *a1;
        if (*a2 == *a1) {
          BOOL v17 = a2[1] < a1[1];
        }
        if (v17)
        {
          uint64_t v18 = *(void *)a1;
          *(void *)a1 = *(void *)a2;
          *(void *)a2 = v18;
        }
      }
    }
  }
  return result;
}

uint32x2_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *,zilch::TileKey *>(uint32x2_t *a1, uint32x2_t *a2, uint32x2_t *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    BOOL v13 = a2;
    if (a2 != a3)
    {
      uint64_t v14 = a2;
      do
      {
        BOOL v15 = v14->i32[0] < (unsigned __int32)a1->i32[0];
        if (v14->i32[0] == a1->i32[0]) {
          BOOL v15 = v14->i32[1] < (unsigned __int32)a1->i32[1];
        }
        if (v15)
        {
          uint32x2_t v16 = *v14;
          *uint64_t v14 = *a1;
          *a1 = v16;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      BOOL v13 = a3;
    }
    if (v8 >= 9)
    {
      uint64_t v17 = (unint64_t)v8 >> 3;
      uint64_t v18 = (int32x2_t *)&a2[-1];
      do
      {
        uint32x2_t v19 = *a1;
        BOOL v20 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>((int32x2_t *)a1, a4, v17);
        if (v18 == v20)
        {
          *BOOL v20 = (int32x2_t)v19;
        }
        else
        {
          *BOOL v20 = *v18;
          int32x2_t *v18 = (int32x2_t)v19;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>((uint64_t)a1, (uint64_t)&v20[1], a4, ((char *)&v20[1] - (char *)a1) >> 3);
        }
        --v18;
      }
      while (v17-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>(uint64_t result, uint64_t a2, uint64_t a3, uint32x2_t *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = (v4 >> 2) + 1;
      uint64_t v8 = (uint32x2_t *)(result + 8 * v7);
      uint64_t v9 = v6 + 2;
      if (v6 + 2 >= a3)
      {
        unsigned __int32 v12 = v8->i32[0];
      }
      else
      {
        uint32x2_t v10 = v8[1];
        uint32x2_t v11 = vcgt_u32(v10, *v8);
        unsigned __int32 v12 = (unsigned __int32)*v8;
        __int8 v13 = v11.i8[4];
        if (v12 != v10.i32[0]) {
          __int8 v13 = v11.i8[0];
        }
        if (v13)
        {
          unsigned __int32 v12 = (unsigned __int32)v8[1];
          ++v8;
          uint64_t v7 = v9;
        }
      }
      BOOL v14 = v12 == a4->i32[0];
      BOOL v15 = v12 < a4->i32[0];
      if (v14) {
        BOOL v15 = v8->i32[1] < (unsigned __int32)a4->i32[1];
      }
      if (!v15)
      {
        uint32x2_t v16 = *a4;
        unint64_t v17 = HIDWORD(*(unint64_t *)a4);
        do
        {
          uint64_t v18 = a4;
          a4 = v8;
          uint32x2_t *v18 = *v8;
          if (v5 < v7) {
            break;
          }
          uint64_t v19 = (2 * v7) | 1;
          uint64_t v8 = (uint32x2_t *)(result + 8 * v19);
          uint64_t v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            unsigned int v22 = v8->i32[0];
            uint64_t v7 = v19;
          }
          else
          {
            uint32x2_t v20 = v8[1];
            uint32x2_t v21 = vcgt_u32(v20, *v8);
            unsigned int v22 = *v8;
            __int8 v23 = v21.i8[4];
            if (v22 != v20.i32[0]) {
              __int8 v23 = v21.i8[0];
            }
            if (v23)
            {
              unsigned int v22 = v8[1];
              ++v8;
            }
            else
            {
              uint64_t v7 = v19;
            }
          }
          BOOL v24 = v8->i32[1] < v17;
          BOOL v14 = v22 == v16.i32[0];
          BOOL v25 = v22 < v16.i32[0];
          if (!v14) {
            BOOL v24 = v25;
          }
        }
        while (!v24);
        *a4 = v16;
      }
    }
  }
  return result;
}

int32x2_t *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>(int32x2_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = &a1[v3 + 1];
    uint64_t v7 = (2 * v3) | 1;
    uint64_t v8 = 2 * v3 + 2;
    if (v8 < a3)
    {
      int32x2_t v9 = v6[1];
      unsigned __int8 v10 = vceq_s32(*v6, v9).u8[0];
      uint32x2_t v11 = vcgt_u32((uint32x2_t)v9, (uint32x2_t)*v6);
      if (v10) {
        __int8 v12 = v11.i8[4];
      }
      else {
        __int8 v12 = v11.i8[0];
      }
      if (v12)
      {
        ++v6;
        uint64_t v7 = v8;
      }
    }
    *a1 = *v6;
    a1 = v6;
    uint64_t v3 = v7;
  }
  while (v7 <= v5);
  return v6;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v4 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v5 = (uint32x2_t *)(result + 8 * v4);
    int32x2_t v7 = *(int32x2_t *)(a2 - 8);
    uint64_t v6 = (uint32x2_t *)(a2 - 8);
    uint32x2_t v8 = vcgt_u32((uint32x2_t)v7, *v5);
    __int8 v9 = (vceq_s32((int32x2_t)*v5, v7).u8[0] & 1) != 0 ? v8.i8[4] : v8.i8[0];
    if (v9)
    {
      uint32x2_t v10 = *v6;
      unint64_t v11 = HIDWORD(*(unint64_t *)v6);
      do
      {
        __int8 v12 = v6;
        uint64_t v6 = v5;
        uint32x2_t *v12 = *v5;
        if (!v4) {
          break;
        }
        unint64_t v4 = (v4 - 1) >> 1;
        uint64_t v5 = (uint32x2_t *)(result + 8 * v4);
        BOOL v13 = v5->i32[0] < (unsigned __int32)v10.i32[0];
        if (v5->i32[0] == v10.i32[0]) {
          BOOL v13 = v5->i32[1] < v11;
        }
      }
      while (v13);
      uint32x2_t *v6 = v10;
    }
  }
  return result;
}

_DWORD *std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<zilch::TileKey *>,std::__wrap_iter<zilch::TileKey *>,std::__equal_to &>(_DWORD *a1, _DWORD *a2)
{
  uint64_t result = a2;
  if (a1 != a2)
  {
    unint64_t v4 = a1 - 2;
    do
    {
      if (v4 + 4 == a2) {
        return a2;
      }
      int v6 = v4[2];
      v4 += 2;
      LODWORD(v5) = v6;
    }
    while (v6 != v4[2] || v4[1] != v4[3]);
    for (uint64_t i = v4 + 4; i != a2; i += 2)
    {
      if (v5 != *i || v4[1] != i[1])
      {
        uint64_t v5 = *(void *)i;
        *((void *)v4 + 1) = *(void *)i;
        v4 += 2;
      }
    }
    return v4 + 2;
  }
  return result;
}

char *std::__tree<std::__value_type<zilch::TileKey,unsigned int>,std::__map_value_compare<zilch::TileKey,std::__value_type<zilch::TileKey,unsigned int>,zilch::TileKeyCompare,true>,std::allocator<std::__value_type<zilch::TileKey,unsigned int>>>::__emplace_unique_key_args<zilch::TileKey,std::piecewise_construct_t const&,std::tuple<zilch::TileKey const&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, void **a4)
{
  int v6 = std::__tree<std::__value_type<zilch::TileKey,unsigned int>,std::__map_value_compare<zilch::TileKey,std::__value_type<zilch::TileKey,unsigned int>,zilch::TileKeyCompare,true>,std::allocator<std::__value_type<zilch::TileKey,unsigned int>>>::__find_equal<zilch::TileKey>((uint64_t)a1, &v10, a2);
  int32x2_t v7 = (char *)*v6;
  if (!*v6)
  {
    uint32x2_t v8 = (uint64_t **)v6;
    int32x2_t v7 = (char *)operator new(0x28uLL);
    *(void *)(v7 + 28) = **a4;
    *((_DWORD *)v7 + 9) = 0;
    std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::__insert_node_at(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<zilch::TileKey,unsigned int>,std::__map_value_compare<zilch::TileKey,std::__value_type<zilch::TileKey,unsigned int>,zilch::TileKeyCompare,true>,std::allocator<std::__value_type<zilch::TileKey,unsigned int>>>::__find_equal<zilch::TileKey>(uint64_t a1, void *a2, unsigned int *a3)
{
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  uint64_t result = (uint64_t *)(a1 + 8);
  unint64_t v4 = v5;
  if (v5)
  {
    unsigned int v6 = *a3;
    unsigned int v7 = a3[1];
    do
    {
      while (1)
      {
        uint32x2_t v8 = v4;
        unsigned int v9 = *((_DWORD *)v4 + 7);
        unsigned int v10 = *((_DWORD *)v8 + 8);
        BOOL v11 = v7 < v10;
        if (v6 != v9) {
          BOOL v11 = v6 < v9;
        }
        if (!v11) {
          break;
        }
        unint64_t v4 = (uint64_t *)*v8;
        uint64_t result = v8;
        if (!*v8) {
          goto LABEL_15;
        }
      }
      BOOL v12 = v10 < v7;
      if (v6 == v9) {
        BOOL v13 = v12;
      }
      else {
        BOOL v13 = v9 < v6;
      }
      if (!v13) {
        break;
      }
      uint64_t result = v8 + 1;
      unint64_t v4 = (uint64_t *)v8[1];
    }
    while (v4);
  }
  else
  {
    uint32x2_t v8 = result;
  }
LABEL_15:
  *a2 = v8;
  return result;
}

void *std::vector<zilch::TileKey>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long long>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1890F1888(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *zilch::TrafficSkeletonTile::TrafficSkeletonTile(void *this)
{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  return this;
}

{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  return this;
}

zilch::TrafficSkeletonTile *zilch::TrafficSkeletonTile::TrafficSkeletonTile(zilch::TrafficSkeletonTile *this, zilch::ReadBitstream *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  zilch::TrafficSkeletonTile::decode(this, a2);
  return this;
}

void sub_1890F18EC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t zilch::TrafficSkeletonTile::decode(zilch::TrafficSkeletonTile *this, zilch::ReadBitstream *a2)
{
  int v4 = zilch::ReadBitstream::get(a2, 8);
  if (v4 == 2)
  {
    return zilch::TrafficSkeletonTile::decode_v2(this, a2);
  }
  else if (v4 == 1)
  {
    return zilch::TrafficSkeletonTile::decode_v1((__n128 **)this, a2);
  }
  else
  {
    return 2;
  }
}

void zilch::TrafficSkeletonTile::addRecord(void **a1, long long *a2)
{
  unsigned int v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= (unint64_t)v6)
  {
    unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - (void)*a1) >> 3);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0x666666666666666) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (unsigned char *)*a1) >> 3);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x333333333333333) {
      unint64_t v14 = 0x666666666666666;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14) {
      BOOL v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::TrafficSkeletonTile::Record>>(v4, v14);
    }
    else {
      BOOL v15 = 0;
    }
    uint32x2_t v16 = &v15[40 * v11];
    unint64_t v17 = &v15[40 * v14];
    long long v18 = *a2;
    long long v19 = a2[1];
    *((void *)v16 + 4) = *((void *)a2 + 4);
    *(_OWORD *)uint32x2_t v16 = v18;
    *((_OWORD *)v16 + 1) = v19;
    unsigned int v10 = v16 + 40;
    uint32x2_t v21 = (char *)*a1;
    uint32x2_t v20 = (char *)a1[1];
    if (v20 != *a1)
    {
      do
      {
        long long v22 = *(_OWORD *)(v20 - 40);
        long long v23 = *(_OWORD *)(v20 - 24);
        *((void *)v16 - 1) = *((void *)v20 - 1);
        *(_OWORD *)(v16 - 24) = v23;
        *(_OWORD *)(v16 - 40) = v22;
        v16 -= 40;
        v20 -= 40;
      }
      while (v20 != v21);
      uint32x2_t v20 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v10;
    a1[2] = v17;
    if (v20) {
      operator delete(v20);
    }
  }
  else
  {
    long long v8 = *a2;
    long long v9 = a2[1];
    *(void *)(v7 + 32) = *((void *)a2 + 4);
    *(_OWORD *)unint64_t v7 = v8;
    *(_OWORD *)(v7 + 16) = v9;
    unsigned int v10 = (char *)(v7 + 40);
  }
  a1[1] = v10;
}

void zilch::TrafficSkeletonTile::addRecord(void **a1, unsigned int a2, unsigned int a3, uint64_t a4, int a5, int a6, float a7, float a8, float a9, float a10)
{
  *(void *)&long long v10 = __PAIR64__(a3, a2);
  *((void *)&v10 + 1) = __PAIR64__(LODWORD(a8), LODWORD(a7));
  uint64_t v11 = a4;
  int v12 = a5;
  float v13 = a9;
  float v14 = a10;
  int v15 = a6;
  zilch::TrafficSkeletonTile::addRecord(a1, &v10);
}

unint64_t zilch::TrafficSkeletonTile::size(zilch::TrafficSkeletonTile *this)
{
  return 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 3);
}

uint64_t zilch::TrafficSkeletonTile::operator[](void *a1, uint64_t a2)
{
  return *a1 + 40 * a2;
}

void zilch::TrafficSkeletonTile::encode(zilch::TrafficSkeletonTile *this, zilch::WriteBitstream *a2, unsigned int a3, unsigned int a4)
{
  zilch::WriteBitstream::put(a2, a3, 8);
  if (a3 == 2)
  {
    zilch::TrafficSkeletonTile::encode_v2(this, a2, a4);
  }
  else if (a3 == 1)
  {
    zilch::TrafficSkeletonTile::encode_v1(this, a2);
  }
}

void zilch::TrafficSkeletonTile::encode_v1(zilch::TrafficSkeletonTile *this, zilch::WriteBitstream *a2)
{
  unsigned int v4 = -858993459 * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 3);
  zilch::WriteBitstream::putVariableWidth(a2, v4);
  uint64_t v6 = *(void *)this;
  unint64_t v7 = (__n128 *)*((void *)this + 1);
  unint64_t v8 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v7 - *(void *)this) >> 3));
  BOOL v9 = v7 == *(__n128 **)this;
  unint64_t v56 = sub_1890F2A80;
  if (v9) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = v8;
  }
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&),zilch::TrafficSkeletonTile::Record*,false>(v6, v7, (uint64_t (**)(long long *, long long *))&v56, v10, 1, v5);
  if (!v4)
  {
    std::vector<unsigned int>::size_type v21 = 0;
    std::vector<unsigned long long>::vector(&v56, 0);
    BOOL v24 = (zilch::WriteBitstream *)v56;
    goto LABEL_24;
  }
  int v11 = 0;
  for (unsigned int i = 0; i < v4; i += v17)
  {
    if (i + 1 >= v4)
    {
      unsigned int v17 = 1;
      if (i) {
        goto LABEL_12;
      }
    }
    else
    {
      float v13 = (int *)(*(void *)this + 40 * i);
      int v16 = *v13;
      float v14 = v13 + 10;
      int v15 = v16;
      unsigned int v17 = 1;
      while (1)
      {
        int v18 = *v14;
        v14 += 10;
        if (v18 != v15) {
          break;
        }
        if (v4 - i == ++v17)
        {
          unsigned int v17 = v4 - i;
          break;
        }
      }
      if (i)
      {
LABEL_12:
        unsigned int v19 = i;
        zilch::WriteBitstream::putEliasGamma(a2, *(_DWORD *)(*(void *)this + 40 * i) - v11);
        goto LABEL_15;
      }
    }
    zilch::WriteBitstream::putVariableWidth(a2, **(_DWORD **)this);
    unsigned int v19 = 0;
LABEL_15:
    zilch::WriteBitstream::putEliasGamma(a2, v17);
    int v11 = *(_DWORD *)(*(void *)this + 40 * v19);
  }
  uint64_t v20 = 0;
  std::vector<unsigned int>::size_type v21 = v4;
  do
  {
    int v22 = *(_DWORD *)(*(void *)this + v20 + 4);
    zilch::WriteBitstream::put(a2, v22 == 0);
    if (v22) {
      zilch::WriteBitstream::putEliasGamma(a2, *(_DWORD *)(*(void *)this + v20 + 4));
    }
    v20 += 40;
  }
  while (40 * v4 != v20);
  std::vector<unsigned long long>::vector(&v56, v4);
  uint64_t v23 = 0;
  BOOL v24 = (zilch::WriteBitstream *)v56;
  BOOL v25 = (uint64_t *)(*(void *)this + 16);
  do
  {
    uint64_t v26 = *v25;
    v25 += 5;
    *(void *)((char *)v24 + v23) = v26;
    v23 += 8;
  }
  while (8 * v4 != v23);
LABEL_24:
  int v27 = zilch::WriteBitstream::computeOptimalRiceBits64(v24, (const unint64_t *)(((char *)v57 - (char *)v24) >> 3));
  zilch::WriteBitstream::putEliasGamma(a2, v27 + 1);
  if (v4)
  {
    uint64_t v28 = 0;
    do
    {
      zilch::WriteBitstream::putRice64(a2, *(void *)((char *)v56 + v28), v27);
      v28 += 8;
    }
    while (8 * v4 != v28);
  }
  std::vector<unsigned int>::vector(&v55, v21);
  std::vector<unsigned int>::vector(&v54, v21);
  std::vector<unsigned int>::pointer begin = (zilch::WriteBitstream *)v55.__begin_;
  if (v4)
  {
    std::vector<unsigned int>::pointer v30 = v54.__begin_;
    uint64_t v31 = v4;
    uint64_t v32 = (float *)(*(void *)this + 8);
    std::vector<unsigned int>::pointer v33 = v55.__begin_;
    do
    {
      float v34 = *v32;
      v32 += 10;
      *v33++ = v34;
      *v30++ = vcvts_n_u32_f32(v34 - (float)v34, 0x1FuLL);
      --v31;
    }
    while (v31);
  }
  int v35 = zilch::WriteBitstream::computeOptimalRiceBits(begin, (const unsigned int *)v21);
  int v36 = zilch::WriteBitstream::computeOptimalRiceBits((zilch::WriteBitstream *)v54.__begin_, (const unsigned int *)v21);
  zilch::WriteBitstream::putEliasGamma(a2, v35 + 1);
  zilch::WriteBitstream::putEliasGamma(a2, v36 + 1);
  if (v4)
  {
    for (uint64_t j = 0; j != v4; ++j)
    {
      zilch::WriteBitstream::putRice(a2, v55.__begin_[j], v35);
      zilch::WriteBitstream::putRice(a2, v54.__begin_[j], v36);
    }
  }
  std::vector<unsigned int>::vector(&v53, v21);
  std::vector<unsigned int>::vector(&v52, v21);
  std::vector<BOOL>::vector(&__p, v21);
  double v38 = (zilch::WriteBitstream *)v53.__begin_;
  if (v4)
  {
    unint64_t v39 = 0;
    int v40 = __p;
    std::vector<unsigned int>::pointer v41 = v52.__begin_;
    uint64_t v42 = (float *)(*(void *)this + 12);
    do
    {
      float v43 = *v42;
      unint64_t v44 = v39 >> 6;
      uint64_t v45 = 1 << v39;
      if (*v42 >= 0.0) {
        uint64_t v46 = v40[v44] & ~v45;
      }
      else {
        uint64_t v46 = v40[v44] | v45;
      }
      v40[v44] = v46;
      float v47 = fabsf(v43);
      *((_DWORD *)v38 + v39) = v47;
      v41[v39++] = vcvts_n_u32_f32(v47 - (float)v47, 0x1FuLL);
      v42 += 10;
    }
    while (v4 != v39);
  }
  int v48 = zilch::WriteBitstream::computeOptimalRiceBits(v38, (const unsigned int *)v21);
  int v49 = zilch::WriteBitstream::computeOptimalRiceBits((zilch::WriteBitstream *)v52.__begin_, (const unsigned int *)v21);
  zilch::WriteBitstream::putEliasGamma(a2, v48 + 1);
  zilch::WriteBitstream::putEliasGamma(a2, v49 + 1);
  if (v4)
  {
    for (unint64_t k = 0; k != v4; zilch::WriteBitstream::putRice(a2, v52.__begin_[k++], v49))
    {
      zilch::WriteBitstream::put(a2, (*(void *)((char *)__p + ((k >> 3) & 0x1FFFFFFFFFFFFFF8)) >> k) & 1);
      zilch::WriteBitstream::putRice(a2, v53.__begin_[k], v48);
    }
  }
  if (__p) {
    operator delete(__p);
  }
  if (v52.__begin_)
  {
    v52.__end_ = v52.__begin_;
    operator delete(v52.__begin_);
  }
  if (v53.__begin_)
  {
    v53.__end_ = v53.__begin_;
    operator delete(v53.__begin_);
  }
  if (v54.__begin_)
  {
    v54.__end_ = v54.__begin_;
    operator delete(v54.__begin_);
  }
  if (v55.__begin_)
  {
    v55.__end_ = v55.__begin_;
    operator delete(v55.__begin_);
  }
  if (v56)
  {
    int v57 = v56;
    operator delete(v56);
  }
}

void sub_1890F208C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  if (a15) {
    operator delete(a15);
  }
  if (a18) {
    operator delete(a18);
  }
  if (a21) {
    operator delete(a21);
  }
  BOOL v24 = *(void **)(v22 - 88);
  if (v24)
  {
    *(void *)(v22 - 80) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void zilch::TrafficSkeletonTile::encode_v2(zilch::TrafficSkeletonTile *this, zilch::WriteBitstream *a2, unsigned int a3)
{
  unsigned int v6 = -858993459 * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 3);
  zilch::WriteBitstream::putVariableWidth(a2, v6);
  uint64_t v8 = *(void *)this;
  BOOL v9 = (__n128 *)*((void *)this + 1);
  unint64_t v10 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v9 - *(void *)this) >> 3));
  BOOL v11 = v9 == *(__n128 **)this;
  v92[0] = (uint64_t (*)(long long *, long long *))sub_1890F2A80;
  if (v11) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = v10;
  }
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&),zilch::TrafficSkeletonTile::Record*,false>(v8, v9, v92, v12, 1, v7);
  if (!v6)
  {
LABEL_19:
    zilch::WriteBitstream::put(a2, 1u);
    goto LABEL_20;
  }
  int v13 = 0;
  for (unsigned int i = 0; i < v6; i += v19)
  {
    if (i + 1 >= v6)
    {
      unsigned int v19 = 1;
      if (i) {
        goto LABEL_12;
      }
    }
    else
    {
      int v15 = (int *)(*(void *)this + 40 * i);
      int v18 = *v15;
      int v16 = v15 + 10;
      int v17 = v18;
      unsigned int v19 = 1;
      while (1)
      {
        int v20 = *v16;
        v16 += 10;
        if (v20 != v17) {
          break;
        }
        if (v6 - i == ++v19)
        {
          unsigned int v19 = v6 - i;
          break;
        }
      }
      if (i)
      {
LABEL_12:
        unsigned int v21 = i;
        zilch::WriteBitstream::putEliasGamma(a2, *(_DWORD *)(*(void *)this + 40 * i) - v13);
        goto LABEL_15;
      }
    }
    zilch::WriteBitstream::putVariableWidth(a2, **(_DWORD **)this);
    unsigned int v21 = 0;
LABEL_15:
    zilch::WriteBitstream::putEliasGamma(a2, v19);
    int v13 = *(_DWORD *)(*(void *)this + 40 * v21);
  }
  uint64_t v22 = (int *)(*(void *)this + 4);
  uint64_t v23 = v6;
  while (1)
  {
    int v24 = *v22;
    v22 += 10;
    if (v24) {
      break;
    }
    if (!--v23) {
      goto LABEL_19;
    }
  }
  zilch::WriteBitstream::put(a2, 0);
  uint64_t v67 = 0;
  do
  {
    int v68 = *(_DWORD *)(*(void *)this + v67 + 4);
    zilch::WriteBitstream::put(a2, v68 == 0);
    if (v68) {
      zilch::WriteBitstream::putEliasGamma(a2, *(_DWORD *)(*(void *)this + v67 + 4));
    }
    v67 += 40;
  }
  while (40 * v6 != v67);
LABEL_20:
  zilch::TrafficSegmentList::TrafficSegmentList((zilch::TrafficSegmentList *)v92, v6);
  if (v6)
  {
    uint64_t v25 = 0;
    uint64_t v26 = 16;
    do
    {
      uint64_t v27 = *(void *)(*(void *)this + v26);
      *(void *)zilch::TrafficSegmentList::operator[](v92, v25++) = v27;
      v26 += 40;
    }
    while (v6 != v25);
  }
  unsigned int v85 = a3;
  zilch::TrafficSegmentList::encode((zilch::TrafficSegmentList *)v92, a2);
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  std::string __p = 0;
  uint64_t v90 = 0;
  unint64_t v91 = 0;
  uint64_t v30 = v6;
  do
  {
    unsigned int v31 = *(float *)(*(void *)this + 40 * v29 + 8);
    if (v28 >= v91)
    {
      std::vector<unsigned int>::pointer v33 = (unsigned int *)__p;
      uint64_t v34 = ((char *)v28 - (unsigned char *)__p) >> 2;
      unint64_t v35 = v34 + 1;
      if ((unint64_t)(v34 + 1) >> 62) {
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v36 = (char *)v91 - (unsigned char *)__p;
      if (((char *)v91 - (unsigned char *)__p) >> 1 > v35) {
        unint64_t v35 = v36 >> 1;
      }
      if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v37 = v35;
      }
      if (v37)
      {
        double v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v91, v37);
        std::vector<unsigned int>::pointer v33 = (unsigned int *)__p;
        uint64_t v28 = v90;
      }
      else
      {
        double v38 = 0;
      }
      unint64_t v39 = (unsigned int *)&v38[4 * v34];
      *unint64_t v39 = v31;
      uint64_t v32 = v39 + 1;
      while (v28 != v33)
      {
        unsigned int v40 = *--v28;
        *--unint64_t v39 = v40;
      }
      std::string __p = v39;
      uint64_t v90 = v32;
      unint64_t v91 = (unsigned int *)&v38[4 * v37];
      if (v33) {
        operator delete(v33);
      }
    }
    else
    {
      *uint64_t v28 = v31;
      uint64_t v32 = v28 + 1;
    }
    uint64_t v90 = v32;
    ++v29;
    uint64_t v28 = v32;
  }
  while (v29 != v6);
  int v41 = zilch::WriteBitstream::computeOptimalRiceBits((zilch::WriteBitstream *)__p, (const unsigned int *)v6);
  zilch::WriteBitstream::putEliasGamma(a2, v41 + 1);
  uint64_t v42 = 0;
  uint64_t v43 = 4 * v6;
  do
  {
    zilch::WriteBitstream::putRice(a2, *(_DWORD *)((char *)__p + v42), v41);
    v42 += 4;
  }
  while (v43 != v42);
  uint64_t v44 = 0;
  do
  {
    zilch::WriteBitstream::put(a2, vcvtd_n_u64_f64((float)(*(float *)(*(void *)this + v44 + 8) - floorf(*(float *)(*(void *)this + v44 + 8))), 8uLL), 8);
    v44 += 40;
  }
  while (40 * v6 != v44);
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  uint64_t v86 = 0;
  unint64_t v87 = 0;
  uint64_t v88 = 0;
  do
  {
    int v47 = (int)*(float *)(*(void *)this + 40 * v46 + 12);
    if (v47 >= 0) {
      int v48 = (int)*(float *)(*(void *)this + 40 * v46 + 12);
    }
    else {
      int v48 = -v47;
    }
    if (v45 >= v88)
    {
      unsigned int v50 = v86;
      uint64_t v51 = ((char *)v45 - (char *)v86) >> 2;
      unint64_t v52 = v51 + 1;
      if ((unint64_t)(v51 + 1) >> 62) {
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v53 = (char *)v88 - (char *)v86;
      if (((char *)v88 - (char *)v86) >> 1 > v52) {
        unint64_t v52 = v53 >> 1;
      }
      if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v54 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v54 = v52;
      }
      if (v54)
      {
        std::vector<unsigned int> v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v88, v54);
        unsigned int v50 = v86;
        uint64_t v45 = v87;
      }
      else
      {
        std::vector<unsigned int> v55 = 0;
      }
      unint64_t v56 = (int *)&v55[4 * v51];
      *unint64_t v56 = v48;
      int v49 = v56 + 1;
      while (v45 != (int *)v50)
      {
        int v57 = *--v45;
        *--unint64_t v56 = v57;
      }
      uint64_t v86 = (zilch::WriteBitstream *)v56;
      uint64_t v88 = (int *)&v55[4 * v54];
      if (v50) {
        operator delete(v50);
      }
    }
    else
    {
      int *v45 = v48;
      int v49 = v45 + 1;
    }
    unint64_t v87 = v49;
    ++v46;
    uint64_t v45 = v49;
  }
  while (v46 != v6);
  int v58 = zilch::WriteBitstream::computeOptimalRiceBits(v86, (const unsigned int *)v6);
  zilch::WriteBitstream::putEliasGamma(a2, v58 + 1);
  if (v6)
  {
    uint64_t v59 = 0;
    uint64_t v60 = 12;
    do
    {
      zilch::WriteBitstream::put(a2, *(float *)(*(void *)this + v60) < 0.0);
      zilch::WriteBitstream::putRice(a2, *(_DWORD *)((char *)v86 + v59), v58);
      zilch::WriteBitstream::put(a2, vcvtd_n_u64_f64((float)(fabsf(*(float *)(*(void *)this + v60)) - (float)*(unsigned int *)((char *)v86 + v59)), 8uLL), 8);
      v59 += 4;
      v60 += 40;
    }
    while (v43 != v59);
    if (v6 == 1)
    {
      unsigned int v61 = v85;
    }
    else
    {
      int v62 = *(_DWORD *)(*(void *)this + 24);
      unsigned int v61 = v85;
      if (*(_DWORD *)(*(void *)this + 64) == v62)
      {
        unint64_t v63 = (int *)(*(void *)this + 104);
        uint64_t v64 = 2;
        do
        {
          unint64_t v65 = v64;
          if (v6 == v64) {
            break;
          }
          int v66 = *v63;
          v63 += 10;
          ++v64;
        }
        while (v66 == v62);
        unsigned int v6 = v65 >= v6;
      }
      else
      {
        unsigned int v6 = 0;
      }
    }
    zilch::WriteBitstream::put(a2, v6);
    if (v6)
    {
      zilch::WriteBitstream::put(a2, *(_DWORD *)(*(void *)this + 24) == 0);
    }
    else
    {
      uint64_t v69 = 0;
      do
      {
        zilch::WriteBitstream::put(a2, *(_DWORD *)(*(void *)this + v69 + 24) == 0);
        v69 += 40;
      }
      while (40 * v30 != v69);
    }
    uint64_t v70 = 0;
    do
    {
      if (*(float *)(*(void *)this + v70 + 28) >= 0.0039062)
      {
        zilch::WriteBitstream::put(a2, 1u);
        zilch::WriteBitstream::putBoundedFloat(a2, *(float *)(*(void *)this + v70 + 28), 0.0, 1.0, 8);
      }
      else
      {
        zilch::WriteBitstream::put(a2, 0);
      }
      v70 += 40;
    }
    while (40 * v30 != v70);
    uint64_t v71 = 0;
    do
    {
      if (*(float *)(*(void *)this + v71 + 32) <= 0.99609)
      {
        zilch::WriteBitstream::put(a2, 1u);
        zilch::WriteBitstream::putBoundedFloat(a2, *(float *)(*(void *)this + v71 + 32), 0.0, 1.0, 8);
      }
      else
      {
        zilch::WriteBitstream::put(a2, 0);
      }
      v71 += 40;
    }
    while (40 * v30 != v71);
    zilch::WriteBitstream::put(a2, v61, 32);
    uint64_t v72 = *((void *)this + 1) - *(void *)this;
    if (!v72)
    {
      if (!v61) {
        goto LABEL_111;
      }
      goto LABEL_110;
    }
    unint64_t v73 = v72 / 40;
    if (v73 <= 1) {
      unint64_t v73 = 1;
    }
    long long v74 = (int *)(*(void *)this + 36);
    LOBYTE(v75) = 1;
    char v76 = 1;
    LOBYTE(v77) = 1;
    do
    {
      int v78 = *v74;
      v74 += 10;
      int v77 = (v78 == 3) & v77;
      v76 &= v78 == 4;
      int v75 = ((v78 - 3) < 2) & v75;
      --v73;
    }
    while (v73);
    if (v61)
    {
      if ((v76 & 1) == 0)
      {
        zilch::WriteBitstream::put(a2, 0);
        if (!v77)
        {
          zilch::WriteBitstream::put(a2, 0);
          if (v75)
          {
            zilch::WriteBitstream::put(a2, 1u);
            uint64_t v79 = *(void *)this;
            if (*((void *)this + 1) != *(void *)this)
            {
              unint64_t v80 = 0;
              uint64_t v81 = 36;
              do
              {
                zilch::WriteBitstream::put(a2, *(_DWORD *)(v79 + v81) == 3);
                ++v80;
                uint64_t v79 = *(void *)this;
                v81 += 40;
              }
              while (v80 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 3));
            }
          }
          else
          {
            zilch::WriteBitstream::put(a2, 0);
            uint64_t v82 = *(void *)this;
            if (*((void *)this + 1) != *(void *)this)
            {
              unint64_t v83 = 0;
              uint64_t v84 = 36;
              do
              {
                zilch::WriteBitstream::put(a2, *(_DWORD *)(v82 + v84), 3);
                ++v83;
                uint64_t v82 = *(void *)this;
                v84 += 40;
              }
              while (v83 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 3));
            }
          }
          goto LABEL_111;
        }
      }
LABEL_110:
      zilch::WriteBitstream::put(a2, 1u);
    }
  }
LABEL_111:
  if (v86) {
    operator delete(v86);
  }
  if (__p)
  {
    uint64_t v90 = (unsigned int *)__p;
    operator delete(__p);
  }
  zilch::TrafficSegmentList::~TrafficSegmentList((zilch::TrafficSegmentList *)v92);
}

void sub_1890F29A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, char a16)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  zilch::TrafficSegmentList::~TrafficSegmentList((zilch::TrafficSegmentList *)&a16);
  _Unwind_Resume(a1);
}

void std::sort[abi:ne180100]<std::__wrap_iter<zilch::TrafficSkeletonTile::Record *>,BOOL (*)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&)>(uint64_t a1, __n128 *a2, uint64_t (*a3)(long long *, long long *), __n128 a4)
{
  unint64_t v4 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a2 - a1) >> 3));
  unsigned int v6 = a3;
  if (a2 == (__n128 *)a1) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v4;
  }
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&),zilch::TrafficSkeletonTile::Record*,false>(a1, a2, &v6, v5, 1, a4);
}

BOOL sub_1890F2A80(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 < *(_DWORD *)a2) {
    return 1;
  }
  if (*(_DWORD *)a1 > *(_DWORD *)a2) {
    return 0;
  }
  unsigned int v3 = *(_DWORD *)(a1 + 4);
  unsigned int v4 = *(_DWORD *)(a2 + 4);
  if (v3 < v4) {
    return 1;
  }
  if (v3 > v4) {
    return 0;
  }
  float v5 = *(float *)(a1 + 12);
  float v6 = *(float *)(a2 + 12);
  if (v5 < 0.0 && v6 > 0.0) {
    return 1;
  }
  if (v5 > 0.0 && v6 < 0.0) {
    return 0;
  }
  float v7 = *(float *)(a1 + 8);
  float v8 = *(float *)(a2 + 8);
  if (v5 >= 0.0) {
    return v7 < v8;
  }
  else {
    return v7 > v8;
  }
}

uint64_t zilch::TrafficSkeletonTile::decode_v1(__n128 **this, zilch::ReadBitstream *a2)
{
  unsigned int VariableWidth = zilch::ReadBitstream::getVariableWidth(a2);
  uint64_t v5 = VariableWidth;
  std::vector<zilch::TrafficSkeletonTile::Record>::resize((uint64_t)this, VariableWidth);
  if (VariableWidth)
  {
    int v6 = 0;
    unsigned int v7 = 0;
    do
    {
      if (v7)
      {
        unsigned int v28 = 0;
        uint64_t result = zilch::ReadBitstream::getEliasGamma(a2, &v28);
        if (result) {
          return result;
        }
        v6 += v28;
      }
      else
      {
        int v6 = zilch::ReadBitstream::getVariableWidth(a2);
      }
      unsigned int v28 = 0;
      uint64_t result = zilch::ReadBitstream::getEliasGamma(a2, &v28);
      if (result) {
        return result;
      }
      LODWORD(v9) = v28 + v7;
      if (v7 < v28 + v7)
      {
        unint64_t v10 = v7;
        BOOL v11 = (_DWORD *)*this + 10 * v7;
        do
        {
          *BOOL v11 = v6;
          v11 += 10;
          ++v10;
          unint64_t v9 = v28 + v7;
        }
        while (v10 < v9);
      }
      unsigned int v7 = v9;
    }
    while (v9 < v5);
    if (v5)
    {
      uint64_t v12 = 0;
      while (1)
      {
        unint64_t v13 = *((void *)a2 + 3);
        if (v13 >= *((void *)a2 + 1)) {
          break;
        }
        int v14 = *((_DWORD *)a2 + 8);
        int v15 = (1 << v14) & *(_DWORD *)(*(void *)a2 + 4 * v13);
        *((_DWORD *)a2 + 8) = v14 + 1;
        if (v14 >= 31)
        {
          *((_DWORD *)a2 + 8) = 0;
          *((void *)a2 + 3) = v13 + 1;
        }
        if (!v15) {
          goto LABEL_20;
        }
        (*this)->n128_u32[v12 + 1] = 0;
LABEL_22:
        v12 += 10;
        if (10 * v5 == v12) {
          goto LABEL_23;
        }
      }
      *((unsigned char *)a2 + 36) = 1;
LABEL_20:
      unsigned int v28 = 0;
      uint64_t result = zilch::ReadBitstream::getEliasGamma(a2, &v28);
      if (result) {
        return result;
      }
      (*this)->n128_u32[v12 + 1] = v28;
      goto LABEL_22;
    }
  }
LABEL_23:
  unsigned int v28 = 0;
  uint64_t result = zilch::ReadBitstream::getEliasGamma(a2, &v28);
  if (!result)
  {
    --v28;
    if (v5)
    {
      uint64_t v16 = 0;
      do
      {
        (*this)[1].n128_u64[v16] = zilch::ReadBitstream::getRice64(a2, v28);
        v16 += 5;
      }
      while (5 * v5 != v16);
    }
    unsigned int v27 = 0;
    uint64_t result = zilch::ReadBitstream::getEliasGamma(a2, &v27);
    if (!result)
    {
      if (--v27 > 0x20) {
        return 1;
      }
      unsigned int v26 = 0;
      uint64_t result = zilch::ReadBitstream::getEliasGamma(a2, &v26);
      if (!result)
      {
        if (--v26 > 0x20) {
          return 1;
        }
        if (v5)
        {
          uint64_t v17 = 0;
          do
          {
            (*this)->n128_f32[v17 + 2] = (float)zilch::ReadBitstream::getRice(a2, v27);
            (*this)->n128_f32[v17 + 2] = (*this)->n128_f32[v17 + 2]
                                       + (float)((float)zilch::ReadBitstream::getRice(a2, v26) * 4.6566e-10);
            v17 += 10;
          }
          while (10 * v5 != v17);
        }
        unsigned int v25 = 0;
        uint64_t result = zilch::ReadBitstream::getEliasGamma(a2, &v25);
        if (!result)
        {
          unsigned int v24 = 0;
          --v25;
          uint64_t result = zilch::ReadBitstream::getEliasGamma(a2, &v24);
          if (!result)
          {
            --v24;
            if (v5)
            {
              unint64_t v19 = 0;
              uint64_t v20 = 40 * v5;
              do
              {
                int v21 = zilch::ReadBitstream::get(a2);
                (*this)->n128_f32[v19 / 4 + 3] = (float)zilch::ReadBitstream::getRice(a2, v25);
                v18.n128_f32[0] = (float)zilch::ReadBitstream::getRice(a2, v24) * 4.6566e-10;
                uint64_t v22 = (uint64_t)*this;
                uint64_t v23 = (float *)((char *)*this + v19);
                v18.n128_f32[0] = v23[3] + v18.n128_f32[0];
                if (v21) {
                  v18.n128_f32[0] = -v18.n128_f32[0];
                }
                v23[3] = v18.n128_f32[0];
                v19 += 40;
              }
              while (v20 != v19);
            }
            else
            {
              uint64_t v22 = (uint64_t)*this;
            }
            std::sort[abi:ne180100]<std::__wrap_iter<zilch::TrafficSkeletonTile::Record *>,BOOL (*)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&)>(v22, this[1], (uint64_t (*)(long long *, long long *))sub_1890F2A80, v18);
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t zilch::TrafficSkeletonTile::decode_v2(zilch::TrafficSkeletonTile *this, zilch::ReadBitstream *a2)
{
  unsigned int VariableWidth = zilch::ReadBitstream::getVariableWidth(a2);
  std::vector<zilch::TrafficSkeletonTile::Record>::resize((uint64_t)this, VariableWidth);
  if (!VariableWidth) {
    return 0;
  }
  unsigned int v5 = 0;
  int v6 = 0;
  do
  {
    if (v5)
    {
      v72[0] = 0;
      uint64_t EliasGamma = zilch::ReadBitstream::getEliasGamma(a2, v72);
      if (EliasGamma) {
        return EliasGamma;
      }
      v6 += v72[0];
    }
    else
    {
      int v6 = zilch::ReadBitstream::getVariableWidth(a2);
    }
    v72[0] = 0;
    uint64_t EliasGamma = zilch::ReadBitstream::getEliasGamma(a2, v72);
    if (EliasGamma) {
      return EliasGamma;
    }
    LODWORD(v8) = v72[0] + v5;
    if (v5 < v72[0] + v5)
    {
      unint64_t v9 = v5;
      unint64_t v10 = (_DWORD *)(*(void *)this + 40 * v5);
      do
      {
        _DWORD *v10 = v6;
        v10 += 10;
        ++v9;
        unint64_t v8 = v72[0] + v5;
      }
      while (v9 < v8);
    }
    unsigned int v5 = v8;
  }
  while (v8 < VariableWidth);
  unint64_t v11 = *((void *)a2 + 3);
  if (v11 >= *((void *)a2 + 1))
  {
    LOBYTE(v13) = 0;
    *((unsigned char *)a2 + 36) = 1;
  }
  else
  {
    int v12 = *((_DWORD *)a2 + 8);
    int v13 = (*(_DWORD *)(*(void *)a2 + 4 * v11) >> v12) & 1;
    *((_DWORD *)a2 + 8) = v12 + 1;
    if (v12 >= 31)
    {
      *((_DWORD *)a2 + 8) = 0;
      *((void *)a2 + 3) = v11 + 1;
    }
  }
  uint64_t v15 = 0;
  if (VariableWidth <= 1) {
    uint64_t v16 = 1;
  }
  else {
    uint64_t v16 = VariableWidth;
  }
  do
  {
    if (v13)
    {
LABEL_25:
      *(_DWORD *)(*(void *)this + v15 + 4) = 0;
      goto LABEL_29;
    }
    unint64_t v17 = *((void *)a2 + 3);
    if (v17 >= *((void *)a2 + 1))
    {
      *((unsigned char *)a2 + 36) = 1;
    }
    else
    {
      int v18 = *((_DWORD *)a2 + 8);
      int v19 = (1 << v18) & *(_DWORD *)(*(void *)a2 + 4 * v17);
      *((_DWORD *)a2 + 8) = v18 + 1;
      if (v18 >= 31)
      {
        *((_DWORD *)a2 + 8) = 0;
        *((void *)a2 + 3) = v17 + 1;
      }
      if (v19) {
        goto LABEL_25;
      }
    }
    v72[0] = 0;
    uint64_t EliasGamma = zilch::ReadBitstream::getEliasGamma(a2, v72);
    if (EliasGamma) {
      return EliasGamma;
    }
    *(_DWORD *)(*(void *)this + v15 + 4) = v72[0];
LABEL_29:
    v15 += 40;
  }
  while (8 * (v16 + 4 * v16) != v15);
  zilch::TrafficSegmentList::TrafficSegmentList((zilch::TrafficSegmentList *)v72, VariableWidth, a2);
  uint64_t v20 = 0;
  uint64_t v21 = 16;
  do
  {
    *(void *)(*(void *)this + v21) = *(void *)zilch::TrafficSegmentList::operator[](v72, v20++);
    v21 += 40;
  }
  while (v16 != v20);
  unsigned int v71 = 0;
  uint64_t v14 = zilch::ReadBitstream::getEliasGamma(a2, &v71);
  if (!v14)
  {
    if (--v71 > 0x20)
    {
      uint64_t v14 = 1;
      goto LABEL_95;
    }
    uint64_t v22 = 0;
    do
    {
      *(float *)(*(void *)this + v22 + 8) = (float)zilch::ReadBitstream::getRice(a2, v71);
      v22 += 40;
    }
    while (40 * v16 != v22);
    uint64_t v23 = 0;
    do
    {
      *(float *)(*(void *)this + v23 + 8) = (float)((float)zilch::ReadBitstream::get(a2, 8) * 0.0039062)
                                            + *(float *)(*(void *)this + v23 + 8);
      v23 += 40;
    }
    while (40 * v16 != v23);
    unsigned int v70 = 0;
    uint64_t v14 = zilch::ReadBitstream::getEliasGamma(a2, &v70);
    if (!v14)
    {
      --v70;
      uint64_t v14 = 1;
      if (v70 <= 0x20)
      {
        uint64_t v24 = 0;
        do
        {
          unint64_t v25 = *((void *)a2 + 3);
          if (v25 >= *((void *)a2 + 1))
          {
            int v27 = 0;
            *((unsigned char *)a2 + 36) = 1;
          }
          else
          {
            int v26 = *((_DWORD *)a2 + 8);
            int v27 = (*(_DWORD *)(*(void *)a2 + 4 * v25) >> v26) & 1;
            *((_DWORD *)a2 + 8) = v26 + 1;
            if (v26 >= 31)
            {
              *((_DWORD *)a2 + 8) = 0;
              *((void *)a2 + 3) = v25 + 1;
            }
          }
          *(float *)(*(void *)this + v24 + 12) = (float)zilch::ReadBitstream::getRice(a2, v70);
          unsigned int v28 = zilch::ReadBitstream::get(a2, 8);
          uint64_t v29 = *(void *)this + v24;
          float v30 = (float)((float)v28 * 0.0039062) + *(float *)(v29 + 12);
          if (v27) {
            float v30 = -v30;
          }
          *(float *)(v29 + 12) = v30;
          v24 += 40;
        }
        while (40 * v16 != v24);
        if (zilch::ReadBitstream::get(a2))
        {
          int v31 = zilch::ReadBitstream::get(a2);
          uint64_t v32 = 0;
          uint64_t v33 = *(void *)this;
          do
          {
            *(_DWORD *)(v33 + v32 + 24) = v31 ^ 1;
            v32 += 40;
          }
          while (40 * v16 != v32);
        }
        else
        {
          uint64_t v34 = 0;
          uint64_t v33 = *(void *)this;
          unint64_t v35 = *((void *)a2 + 3);
          uint64_t v37 = *(void *)a2;
          unint64_t v36 = *((void *)a2 + 1);
          int v38 = *((_DWORD *)a2 + 8);
          do
          {
            if (v35 >= v36)
            {
              int v39 = 0;
              *((unsigned char *)a2 + 36) = 1;
            }
            else
            {
              int v39 = (*(_DWORD *)(v37 + 4 * v35) >> v38) & 1;
              *((_DWORD *)a2 + 8) = v38 + 1;
              if (v38 >= 31)
              {
                int v38 = 0;
                *((_DWORD *)a2 + 8) = 0;
                *((void *)a2 + 3) = ++v35;
              }
              else
              {
                ++v38;
              }
            }
            *(_DWORD *)(v33 + v34 + 24) = v39 ^ 1;
            v34 += 40;
          }
          while (40 * v16 != v34);
        }
        uint64_t v40 = 0;
        while (2)
        {
          unint64_t v41 = *((void *)a2 + 3);
          if (v41 >= *((void *)a2 + 1))
          {
            *((unsigned char *)a2 + 36) = 1;
            goto LABEL_67;
          }
          int v42 = *((_DWORD *)a2 + 8);
          int v43 = (1 << v42) & *(_DWORD *)(*(void *)a2 + 4 * v41);
          *((_DWORD *)a2 + 8) = v42 + 1;
          if (v42 < 31)
          {
            if (!v43) {
              goto LABEL_67;
            }
          }
          else
          {
            *((_DWORD *)a2 + 8) = 0;
            *((void *)a2 + 3) = v41 + 1;
            if (!v43)
            {
LABEL_67:
              float BoundedFloat = 0.0;
              goto LABEL_70;
            }
          }
          float BoundedFloat = zilch::ReadBitstream::getBoundedFloat(a2, 0.0, 1.0, 8);
          uint64_t v33 = *(void *)this;
LABEL_70:
          *(float *)(v33 + v40 + 28) = BoundedFloat;
          v40 += 40;
          if (40 * v16 != v40) {
            continue;
          }
          break;
        }
        uint64_t v45 = 0;
        while (2)
        {
          unint64_t v46 = *((void *)a2 + 3);
          if (v46 >= *((void *)a2 + 1))
          {
            *((unsigned char *)a2 + 36) = 1;
            goto LABEL_77;
          }
          int v47 = *((_DWORD *)a2 + 8);
          int v48 = (1 << v47) & *(_DWORD *)(*(void *)a2 + 4 * v46);
          *((_DWORD *)a2 + 8) = v47 + 1;
          if (v47 < 31)
          {
            if (!v48) {
              goto LABEL_77;
            }
          }
          else
          {
            *((_DWORD *)a2 + 8) = 0;
            *((void *)a2 + 3) = v46 + 1;
            if (!v48)
            {
LABEL_77:
              float v49 = 1.0;
              goto LABEL_80;
            }
          }
          float v49 = zilch::ReadBitstream::getBoundedFloat(a2, 0.0, 1.0, 8);
          uint64_t v33 = *(void *)this;
LABEL_80:
          *(float *)(v33 + v45 + 32) = v49;
          v45 += 40;
          if (40 * v16 == v45)
          {
            if (zilch::ReadBitstream::get(a2, 32))
            {
              if (zilch::ReadBitstream::get(a2))
              {
                uint64_t v50 = *((void *)this + 1) - *(void *)this;
                if (v50)
                {
                  unint64_t v51 = v50 / 40;
                  if (v51 <= 1) {
                    unint64_t v51 = 1;
                  }
                  unint64_t v52 = (_DWORD *)(*(void *)this + 36);
                  do
                  {
                    *unint64_t v52 = 4;
                    v52 += 10;
                    --v51;
                  }
                  while (v51);
                }
                goto LABEL_94;
              }
              if (zilch::ReadBitstream::get(a2))
              {
                uint64_t v57 = *((void *)this + 1) - *(void *)this;
                if (!v57) {
                  goto LABEL_94;
                }
                unint64_t v58 = v57 / 40;
                if (v58 <= 1) {
                  unint64_t v58 = 1;
                }
                uint64_t v59 = (_DWORD *)(*(void *)this + 36);
                uint64_t v14 = 0;
                do
                {
                  *uint64_t v59 = 3;
                  v59 += 10;
                  --v58;
                }
                while (v58);
              }
              else
              {
                char v60 = zilch::ReadBitstream::get(a2);
                uint64_t v61 = *((void *)this + 1);
                if (v60)
                {
                  if (v61 == *(void *)this) {
                    goto LABEL_94;
                  }
                  unint64_t v62 = 0;
                  uint64_t v63 = 36;
                  do
                  {
                    uint64_t v14 = 0;
                    if (zilch::ReadBitstream::get(a2)) {
                      int v64 = 3;
                    }
                    else {
                      int v64 = 4;
                    }
                    uint64_t v65 = *(void *)this;
                    *(_DWORD *)(v65 + v63) = v64;
                    ++v62;
                    v63 += 40;
                  }
                  while (v62 < 0xCCCCCCCCCCCCCCCDLL * ((*((void *)this + 1) - v65) >> 3));
                }
                else
                {
                  if (v61 == *(void *)this) {
                    goto LABEL_94;
                  }
                  unint64_t v66 = 0;
                  uint64_t v67 = 36;
                  do
                  {
                    int v68 = zilch::ReadBitstream::get(a2, 3);
                    uint64_t v14 = 0;
                    uint64_t v69 = *(void *)this;
                    *(_DWORD *)(v69 + v67) = v68;
                    ++v66;
                    v67 += 40;
                  }
                  while (v66 < 0xCCCCCCCCCCCCCCCDLL * ((*((void *)this + 1) - v69) >> 3));
                }
              }
            }
            else
            {
              uint64_t v53 = *((void *)this + 1) - *(void *)this;
              if (v53)
              {
                unint64_t v54 = v53 / 40;
                if (v54 <= 1) {
                  unint64_t v54 = 1;
                }
                std::vector<unsigned int> v55 = (_DWORD *)(*(void *)this + 36);
                do
                {
                  *std::vector<unsigned int> v55 = 4;
                  v55 += 10;
                  --v54;
                }
                while (v54);
              }
LABEL_94:
              uint64_t v14 = 0;
            }
            break;
          }
          continue;
        }
      }
    }
  }
LABEL_95:
  zilch::TrafficSegmentList::~TrafficSegmentList((zilch::TrafficSegmentList *)v72);
  return v14;
}

void sub_1890F35FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  zilch::TrafficSegmentList::~TrafficSegmentList((zilch::TrafficSegmentList *)va);
  _Unwind_Resume(a1);
}

void std::vector<zilch::TrafficSkeletonTile::Record>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<zilch::TrafficSkeletonTile::Record>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 40 * a2;
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::TrafficSkeletonTile::Record>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(40 * a2);
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&),zilch::TrafficSkeletonTile::Record*,false>(uint64_t a1, __n128 *a2, uint64_t (**a3)(long long *, long long *), uint64_t a4, char a5, __n128 a6)
{
uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&),zilch::TrafficSkeletonTile::Record*>(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  if (result != a2)
  {
    uint64_t v21 = v3;
    uint64_t v22 = v4;
    uint64_t v6 = result;
    uint64_t v7 = result + 40;
    if (result + 40 != a2)
    {
      uint64_t v9 = 0;
      uint64_t v10 = result;
      do
      {
        uint64_t v11 = v10;
        uint64_t v10 = v7;
        uint64_t result = (*a3)(v7, v11);
        if (result)
        {
          long long v12 = *(_OWORD *)(v10 + 16);
          long long v18 = *(_OWORD *)v10;
          long long v19 = v12;
          uint64_t v20 = *(void *)(v10 + 32);
          uint64_t v13 = v9;
          while (1)
          {
            uint64_t v14 = v6 + v13;
            long long v15 = *(_OWORD *)(v6 + v13 + 16);
            *(_OWORD *)(v14 + 40) = *(_OWORD *)(v6 + v13);
            *(_OWORD *)(v14 + 56) = v15;
            *(void *)(v14 + 72) = *(void *)(v6 + v13 + 32);
            if (!v13) {
              break;
            }
            v13 -= 40;
            uint64_t result = (*a3)((uint64_t)&v18, v13 + v6);
            if ((result & 1) == 0)
            {
              uint64_t v16 = v6 + v13 + 40;
              goto LABEL_10;
            }
          }
          uint64_t v16 = v6;
LABEL_10:
          long long v17 = v19;
          *(_OWORD *)uint64_t v16 = v18;
          *(_OWORD *)(v16 + 16) = v17;
          *(void *)(v16 + 32) = v20;
        }
        uint64_t v7 = v10 + 40;
        v9 += 40;
      }
      while (v10 + 40 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&),zilch::TrafficSkeletonTile::Record*>(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  if (result != a2)
  {
    uint64_t v18 = v3;
    uint64_t v19 = v4;
    uint64_t v6 = result;
    uint64_t v7 = result + 40;
    if (result + 40 != a2)
    {
      uint64_t v9 = result - 40;
      do
      {
        uint64_t v10 = v6;
        uint64_t v6 = v7;
        uint64_t result = (*a3)(v7, v10);
        if (result)
        {
          long long v11 = *(_OWORD *)(v6 + 16);
          long long v15 = *(_OWORD *)v6;
          long long v16 = v11;
          uint64_t v17 = *(void *)(v6 + 32);
          uint64_t v12 = v9;
          do
          {
            long long v13 = *(_OWORD *)(v12 + 56);
            *(_OWORD *)(v12 + 80) = *(_OWORD *)(v12 + 40);
            *(_OWORD *)(v12 + 96) = v13;
            *(void *)(v12 + 112) = *(void *)(v12 + 72);
            uint64_t result = (*a3)((uint64_t)&v15, v12);
            v12 -= 40;
          }
          while ((result & 1) != 0);
          long long v14 = v16;
          *(_OWORD *)(v12 + 80) = v15;
          *(_OWORD *)(v12 + 96) = v14;
          *(void *)(v12 + 112) = v17;
        }
        uint64_t v7 = v6 + 40;
        v9 += 40;
      }
      while (v6 + 40 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&),zilch::TrafficSkeletonTile::Record*>(long long *a1, long long *a2, long long *a3, uint64_t (**a4)(long long *, long long *))
{
  char v8 = (*a4)(a2, a1);
  uint64_t result = (*a4)(a3, a2);
  if (v8)
  {
    if (result)
    {
      long long v10 = *a1;
      long long v11 = a1[1];
      uint64_t v12 = *((void *)a1 + 4);
      uint64_t v13 = *((void *)a3 + 4);
      long long v14 = a3[1];
      *a1 = *a3;
      a1[1] = v14;
      *((void *)a1 + 4) = v13;
      *((void *)a3 + 4) = v12;
      uint64_t result = 1;
LABEL_9:
      *a3 = v10;
      a3[1] = v11;
      return result;
    }
    long long v25 = *a1;
    long long v26 = a1[1];
    uint64_t v27 = *((void *)a1 + 4);
    uint64_t v28 = *((void *)a2 + 4);
    long long v29 = a2[1];
    *a1 = *a2;
    a1[1] = v29;
    *((void *)a1 + 4) = v28;
    *((void *)a2 + 4) = v27;
    *a2 = v25;
    a2[1] = v26;
    if ((*a4)(a3, a2))
    {
      long long v10 = *a2;
      long long v11 = a2[1];
      uint64_t v30 = *((void *)a2 + 4);
      uint64_t v31 = *((void *)a3 + 4);
      long long v32 = a3[1];
      *a2 = *a3;
      a2[1] = v32;
      *((void *)a2 + 4) = v31;
      *((void *)a3 + 4) = v30;
      uint64_t result = 2;
      goto LABEL_9;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    long long v15 = *a2;
    long long v16 = a2[1];
    uint64_t v17 = *((void *)a2 + 4);
    uint64_t v18 = *((void *)a3 + 4);
    long long v19 = a3[1];
    *a2 = *a3;
    a2[1] = v19;
    *((void *)a2 + 4) = v18;
    *((void *)a3 + 4) = v17;
    *a3 = v15;
    a3[1] = v16;
    if ((*a4)(a2, a1))
    {
      long long v20 = *a1;
      long long v21 = a1[1];
      uint64_t v22 = *((void *)a1 + 4);
      uint64_t v23 = *((void *)a2 + 4);
      long long v24 = a2[1];
      *a1 = *a2;
      a1[1] = v24;
      *((void *)a1 + 4) = v23;
      *((void *)a2 + 4) = v22;
      uint64_t result = 2;
      *a2 = v20;
      a2[1] = v21;
      return result;
    }
  }
  return 1;
}

long long *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TrafficSkeletonTile::Record *,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&)>(long long *a1, long long *a2, uint64_t (**a3)(long long *, long long *))
{
  uint64_t v4 = a2;
  long long v6 = a1[1];
  long long v22 = *a1;
  long long v23 = v6;
  uint64_t v24 = *((void *)a1 + 4);
  if ((*a3)(&v22, (long long *)((char *)a2 - 40)))
  {
    uint64_t v7 = a1;
    do
      uint64_t v7 = (long long *)((char *)v7 + 40);
    while (((*a3)(&v22, v7) & 1) == 0);
  }
  else
  {
    char v8 = (long long *)((char *)a1 + 40);
    do
    {
      uint64_t v7 = v8;
      if (v8 >= v4) {
        break;
      }
      int v9 = (*a3)(&v22, v8);
      char v8 = (long long *)((char *)v7 + 40);
    }
    while (!v9);
  }
  if (v7 < v4)
  {
    do
      uint64_t v4 = (long long *)((char *)v4 - 40);
    while (((*a3)(&v22, v4) & 1) != 0);
  }
  while (v7 < v4)
  {
    long long v10 = *v7;
    long long v11 = v7[1];
    uint64_t v27 = *((void *)v7 + 4);
    long long v25 = v10;
    long long v26 = v11;
    long long v12 = *v4;
    long long v13 = v4[1];
    *((void *)v7 + 4) = *((void *)v4 + 4);
    long long *v7 = v12;
    v7[1] = v13;
    long long v14 = v25;
    long long v15 = v26;
    *((void *)v4 + 4) = v27;
    *uint64_t v4 = v14;
    v4[1] = v15;
    do
      uint64_t v7 = (long long *)((char *)v7 + 40);
    while (!(*a3)(&v22, v7));
    do
      uint64_t v4 = (long long *)((char *)v4 - 40);
    while (((*a3)(&v22, v4) & 1) != 0);
  }
  long long v16 = (long long *)((char *)v7 - 40);
  if ((long long *)((char *)v7 - 40) != a1)
  {
    long long v17 = *v16;
    long long v18 = *(long long *)((char *)v7 - 24);
    *((void *)a1 + 4) = *((void *)v7 - 1);
    *a1 = v17;
    a1[1] = v18;
  }
  long long v19 = v22;
  long long v20 = v23;
  *((void *)v7 - 1) = v24;
  *long long v16 = v19;
  *(long long *)((char *)v7 - 24) = v20;
  return v7;
}

uint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TrafficSkeletonTile::Record *,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&)>(long long *a1, char *a2, uint64_t (**a3)(char *, long long *))
{
  uint64_t v6 = 0;
  long long v7 = a1[1];
  long long v22 = *a1;
  long long v23 = v7;
  uint64_t v24 = *((void *)a1 + 4);
  do
    v6 += 40;
  while (((*a3)((char *)a1 + v6, &v22) & 1) != 0);
  unint64_t v8 = (unint64_t)a1 + v6;
  uint64_t v9 = (uint64_t)a1 + v6 - 40;
  if (v6 == 40)
  {
    do
    {
      if (v8 >= (unint64_t)a2) {
        break;
      }
      a2 -= 40;
    }
    while (((*a3)(a2, &v22) & 1) == 0);
  }
  else
  {
    do
      a2 -= 40;
    while (!(*a3)(a2, &v22));
  }
  if (v8 < (unint64_t)a2)
  {
    long long v10 = (long long *)((char *)a1 + v6);
    long long v11 = (long long *)a2;
    do
    {
      long long v13 = v10[1];
      long long v25 = *v10;
      long long v12 = v25;
      long long v26 = v13;
      uint64_t v27 = *((void *)v10 + 4);
      uint64_t v14 = v27;
      long long v16 = *v11;
      long long v15 = v11[1];
      *((void *)v10 + 4) = *((void *)v11 + 4);
      long long *v10 = v16;
      v10[1] = v15;
      *((void *)v11 + 4) = v14;
      *long long v11 = v12;
      v11[1] = v13;
      do
        long long v10 = (long long *)((char *)v10 + 40);
      while (((*a3)((char *)v10, &v22) & 1) != 0);
      do
        long long v11 = (long long *)((char *)v11 - 40);
      while (!(*a3)((char *)v11, &v22));
    }
    while (v10 < v11);
    uint64_t v9 = (uint64_t)v10 - 40;
  }
  if ((long long *)v9 != a1)
  {
    long long v17 = *(_OWORD *)v9;
    long long v18 = *(_OWORD *)(v9 + 16);
    *((void *)a1 + 4) = *(void *)(v9 + 32);
    *a1 = v17;
    a1[1] = v18;
  }
  long long v19 = v22;
  long long v20 = v23;
  *(void *)(v9 + 32) = v24;
  *(_OWORD *)uint64_t v9 = v19;
  *(_OWORD *)(v9 + 16) = v20;
  return v9;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&),zilch::TrafficSkeletonTile::Record*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(long long *, long long *))
{
  uint64_t v6 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      unint64_t v8 = (long long *)(a2 - 40);
      if (!(*a3)((long long *)(a2 - 40), (long long *)a1)) {
        return 1;
      }
      long long v9 = *(_OWORD *)a1;
      long long v10 = *(_OWORD *)(a1 + 16);
      uint64_t v11 = *(void *)(a1 + 32);
      uint64_t v12 = *(void *)(a2 - 8);
      long long v13 = *(_OWORD *)(a2 - 24);
      *(_OWORD *)a1 = *v8;
      *(_OWORD *)(a1 + 16) = v13;
      *(void *)(a1 + 32) = v12;
      *(void *)(a2 - 8) = v11;
      BOOL result = 1;
      long long *v8 = v9;
      *(_OWORD *)(a2 - 24) = v10;
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&),zilch::TrafficSkeletonTile::Record*>((long long *)a1, (long long *)(a1 + 40), (long long *)(a2 - 40), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&),zilch::TrafficSkeletonTile::Record*>(a1, a1 + 40, a1 + 80, a2 - 40, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&),zilch::TrafficSkeletonTile::Record*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40, a3);
      return 1;
    default:
      uint64_t v14 = (long long *)(a1 + 80);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&),zilch::TrafficSkeletonTile::Record*>((long long *)a1, (long long *)(a1 + 40), (long long *)(a1 + 80), a3);
      uint64_t v15 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v16 = 0;
      int v17 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((long long *)v15, v14))
    {
      long long v18 = *(_OWORD *)(v15 + 16);
      long long v24 = *(_OWORD *)v15;
      long long v25 = v18;
      uint64_t v26 = *(void *)(v15 + 32);
      uint64_t v19 = v16;
      while (1)
      {
        uint64_t v20 = a1 + v19;
        long long v21 = *(_OWORD *)(a1 + v19 + 96);
        *(_OWORD *)(v20 + 120) = *(_OWORD *)(a1 + v19 + 80);
        *(_OWORD *)(v20 + 136) = v21;
        *(void *)(v20 + 152) = *(void *)(a1 + v19 + 112);
        if (v19 == -80) {
          break;
        }
        v19 -= 40;
        if (((*a3)(&v24, (long long *)(v20 + 40)) & 1) == 0)
        {
          uint64_t v22 = a1 + v19 + 120;
          goto LABEL_12;
        }
      }
      uint64_t v22 = a1;
LABEL_12:
      long long v23 = v25;
      *(_OWORD *)uint64_t v22 = v24;
      *(_OWORD *)(v22 + 16) = v23;
      *(void *)(v22 + 32) = v26;
      if (++v17 == 8) {
        return v15 + 40 == a2;
      }
    }
    uint64_t v14 = (long long *)v15;
    v16 += 40;
    v15 += 40;
    if (v15 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&),zilch::TrafficSkeletonTile::Record*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(long long *, long long *))
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&),zilch::TrafficSkeletonTile::Record*>((long long *)a1, (long long *)a2, (long long *)a3, a5);
  if ((*a5)((long long *)a4, (long long *)a3))
  {
    long long v11 = *(_OWORD *)a3;
    long long v12 = *(_OWORD *)(a3 + 16);
    uint64_t v13 = *(void *)(a3 + 32);
    uint64_t v14 = *(void *)(a4 + 32);
    long long v15 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v15;
    *(void *)(a3 + 32) = v14;
    *(void *)(a4 + 32) = v13;
    *(_OWORD *)a4 = v11;
    *(_OWORD *)(a4 + 16) = v12;
    if ((*a5)((long long *)a3, (long long *)a2))
    {
      long long v16 = *(_OWORD *)a2;
      long long v17 = *(_OWORD *)(a2 + 16);
      uint64_t v18 = *(void *)(a2 + 32);
      uint64_t v19 = *(void *)(a3 + 32);
      long long v20 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v20;
      *(void *)(a2 + 32) = v19;
      *(void *)(a3 + 32) = v18;
      *(_OWORD *)a3 = v16;
      *(_OWORD *)(a3 + 16) = v17;
      if ((*a5)((long long *)a2, (long long *)a1))
      {
        __n128 result = *(__n128 *)a1;
        long long v21 = *(_OWORD *)(a1 + 16);
        uint64_t v22 = *(void *)(a1 + 32);
        uint64_t v23 = *(void *)(a2 + 32);
        long long v24 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v24;
        *(void *)(a1 + 32) = v23;
        *(void *)(a2 + 32) = v22;
        *(__n128 *)a2 = result;
        *(_OWORD *)(a2 + 16) = v21;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&),zilch::TrafficSkeletonTile::Record*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(long long *, long long *))
{
  __n128 v12 = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&),zilch::TrafficSkeletonTile::Record*>(a1, a2, a3, a4, a6);
  if (((unsigned int (*)(uint64_t, uint64_t, __n128))*a6)(a5, a4, v12))
  {
    long long v14 = *(_OWORD *)a4;
    long long v15 = *(_OWORD *)(a4 + 16);
    uint64_t v16 = *(void *)(a4 + 32);
    uint64_t v17 = *(void *)(a5 + 32);
    long long v18 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)(a4 + 16) = v18;
    *(void *)(a4 + 32) = v17;
    *(void *)(a5 + 32) = v16;
    *(_OWORD *)a5 = v14;
    *(_OWORD *)(a5 + 16) = v15;
    if ((*a6)((long long *)a4, (long long *)a3))
    {
      long long v19 = *(_OWORD *)a3;
      long long v20 = *(_OWORD *)(a3 + 16);
      uint64_t v21 = *(void *)(a3 + 32);
      uint64_t v22 = *(void *)(a4 + 32);
      long long v23 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v23;
      *(void *)(a3 + 32) = v22;
      *(void *)(a4 + 32) = v21;
      *(_OWORD *)a4 = v19;
      *(_OWORD *)(a4 + 16) = v20;
      if ((*a6)((long long *)a3, (long long *)a2))
      {
        __n128 v24 = *(__n128 *)a2;
        long long v25 = *(_OWORD *)(a2 + 16);
        uint64_t v26 = *(void *)(a2 + 32);
        uint64_t v27 = *(void *)(a3 + 32);
        long long v28 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 16) = v28;
        *(void *)(a2 + 32) = v27;
        *(void *)(a3 + 32) = v26;
        *(__n128 *)a3 = v24;
        *(_OWORD *)(a3 + 16) = v25;
        if ((*a6)((long long *)a2, (long long *)a1))
        {
          __n128 result = *(__n128 *)a1;
          long long v29 = *(_OWORD *)(a1 + 16);
          uint64_t v30 = *(void *)(a1 + 32);
          uint64_t v31 = *(void *)(a2 + 32);
          long long v32 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v32;
          *(void *)(a1 + 32) = v31;
          *(void *)(a2 + 32) = v30;
          *(__n128 *)a2 = result;
          *(_OWORD *)(a2 + 16) = v29;
        }
      }
    }
  }
  return result;
}

__n128 *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&),zilch::TrafficSkeletonTile::Record*,zilch::TrafficSkeletonTile::Record*>(uint64_t a1, __n128 *a2, __n128 *a3, unsigned int (**a4)(int64_t, uint64_t), __n128 a5)
{
  if ((__n128 *)a1 != a2)
  {
    long long v7 = a2;
    uint64_t v9 = (uint64_t)a2 - a1;
    uint64_t v10 = ((uint64_t)a2 - a1) / 40;
    if ((uint64_t)a2 - a1 >= 41)
    {
      unint64_t v11 = (unint64_t)(v10 - 2) >> 1;
      unint64_t v12 = v11 + 1;
      uint64_t v13 = (__n128 *)(a1 + 40 * v11);
      do
      {
        a5 = std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&),zilch::TrafficSkeletonTile::Record*>(a1, a4, v10, v13);
        uint64_t v13 = (__n128 *)((char *)v13 - 40);
        --v12;
      }
      while (v12);
    }
    long long v14 = v7;
    if (v7 != a3)
    {
      long long v15 = v7;
      do
      {
        if (((unsigned int (*)(__n128 *, uint64_t, __n128))*a4)(v15, a1, a5))
        {
          __n128 v16 = *v15;
          __n128 v17 = v15[1];
          unint64_t v18 = v15[2].n128_u64[0];
          unint64_t v19 = *(void *)(a1 + 32);
          __n128 v20 = *(__n128 *)(a1 + 16);
          *long long v15 = *(__n128 *)a1;
          v15[1] = v20;
          v15[2].n128_u64[0] = v19;
          *(void *)(a1 + 32) = v18;
          *(__n128 *)a1 = v16;
          *(__n128 *)(a1 + 16) = v17;
          a5 = std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&),zilch::TrafficSkeletonTile::Record*>(a1, a4, v10, (__n128 *)a1);
        }
        long long v15 = (__n128 *)((char *)v15 + 40);
      }
      while (v15 != a3);
      long long v14 = a3;
    }
    if (v9 < 41)
    {
      return v14;
    }
    else
    {
      long long v33 = v14;
      int64_t v21 = v9 / 0x28uLL;
      do
      {
        __n128 v34 = v7;
        uint64_t v22 = 0;
        __n128 v35 = *(__n128 *)a1;
        __n128 v36 = *(__n128 *)(a1 + 16);
        unint64_t v37 = *(void *)(a1 + 32);
        uint64_t v23 = a1;
        do
        {
          uint64_t v24 = v23 + 40 * v22 + 40;
          uint64_t v25 = (2 * v22) | 1;
          uint64_t v26 = 2 * v22 + 2;
          if (v26 < v21 && (*a4)(v23 + 40 * v22 + 40, v23 + 40 * v22 + 80))
          {
            v24 += 40;
            uint64_t v25 = v26;
          }
          long long v27 = *(_OWORD *)v24;
          long long v28 = *(_OWORD *)(v24 + 16);
          *(void *)(v23 + 32) = *(void *)(v24 + 32);
          *(_OWORD *)uint64_t v23 = v27;
          *(_OWORD *)(v23 + 16) = v28;
          uint64_t v23 = v24;
          uint64_t v22 = v25;
        }
        while (v25 <= (uint64_t)((unint64_t)(v21 - 2) >> 1));
        long long v7 = (__n128 *)((char *)v34 - 40);
        if ((__int8 *)v24 == &v34[-3].n128_i8[8])
        {
          *(void *)(v24 + 32) = v37;
          *(__n128 *)uint64_t v24 = v35;
          *(__n128 *)(v24 + 16) = v36;
        }
        else
        {
          __n128 v29 = *v7;
          long long v30 = *(long long *)((char *)&v34[-2] + 8);
          *(void *)(v24 + 32) = v34[-1].n128_u64[1];
          *(__n128 *)uint64_t v24 = v29;
          *(_OWORD *)(v24 + 16) = v30;
          __n128 *v7 = v35;
          *(__n128 *)((char *)v34 - 24) = v36;
          v34[-1].n128_u64[1] = v37;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&),zilch::TrafficSkeletonTile::Record*>(a1, v24 + 40, (uint64_t (**)(long long *, long long *))a4, 0xCCCCCCCCCCCCCCCDLL * ((v24 + 40 - a1) >> 3));
        }
      }
      while (v21-- > 2);
      return v33;
    }
  }
  return a3;
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&),zilch::TrafficSkeletonTile::Record*>(uint64_t a1, unsigned int (**a2)(int64_t, uint64_t), uint64_t a3, __n128 *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v26 = v4;
    uint64_t v27 = v5;
    long long v7 = a4;
    int64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a4 - a1) >> 3)))
    {
      int64_t v12 = (0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3)) | 1;
      uint64_t v13 = (long long *)(a1 + 40 * v12);
      int64_t v14 = 0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v14 < a3 && (*a2)(a1 + 40 * v12, (uint64_t)v13 + 40))
      {
        uint64_t v13 = (long long *)((char *)v13 + 40);
        int64_t v12 = v14;
      }
      if ((((uint64_t (*)(long long *, __n128 *))*a2)(v13, v7) & 1) == 0)
      {
        __n128 v16 = v7[1];
        __n128 v23 = *v7;
        __n128 v24 = v16;
        uint64_t v25 = v7[2].n128_i64[0];
        do
        {
          __n128 v17 = (__n128 *)v13;
          __n128 v18 = (__n128)*v13;
          long long v19 = v13[1];
          v7[2].n128_u64[0] = *((void *)v13 + 4);
          __n128 *v7 = v18;
          v7[1] = (__n128)v19;
          if (v9 < v12) {
            break;
          }
          uint64_t v20 = (2 * v12) | 1;
          uint64_t v13 = (long long *)(a1 + 40 * v20);
          uint64_t v21 = 2 * v12 + 2;
          if (v21 < a3)
          {
            if ((*a2)(a1 + 40 * v20, (uint64_t)v13 + 40))
            {
              uint64_t v13 = (long long *)((char *)v13 + 40);
              uint64_t v20 = v21;
            }
          }
          long long v7 = v17;
          int64_t v12 = v20;
        }
        while (!(*a2)((int64_t)v13, (uint64_t)&v23));
        __n128 result = v23;
        __n128 v22 = v24;
        v17[2].n128_u64[0] = v25;
        *__n128 v17 = result;
        v17[1] = v22;
      }
    }
  }
  return result;
}

double std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&),zilch::TrafficSkeletonTile::Record*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(long long *, long long *), uint64_t a4)
{
  unint64_t v6 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v21 = v4;
    uint64_t v22 = v5;
    unint64_t v9 = v6 >> 1;
    uint64_t v10 = (long long *)(a1 + 40 * (v6 >> 1));
    unint64_t v11 = (long long *)(a2 - 40);
    if ((*a3)(v10, (long long *)(a2 - 40)))
    {
      long long v13 = v11[1];
      long long v18 = *v11;
      long long v19 = v13;
      uint64_t v20 = *((void *)v11 + 4);
      do
      {
        int64_t v14 = v10;
        long long v15 = *v10;
        long long v16 = v10[1];
        *((void *)v11 + 4) = *((void *)v10 + 4);
        *unint64_t v11 = v15;
        v11[1] = v16;
        if (!v9) {
          break;
        }
        unint64_t v9 = (v9 - 1) >> 1;
        uint64_t v10 = (long long *)(a1 + 40 * v9);
        unint64_t v11 = v14;
      }
      while (((*a3)(v10, &v18) & 1) != 0);
      double result = *(double *)&v18;
      long long v17 = v19;
      *int64_t v14 = v18;
      v14[1] = v17;
      *((void *)v14 + 4) = v20;
    }
  }
  return result;
}

std::vector<unsigned int> *__cdecl std::vector<unsigned int>::vector(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<int>::__vallocate[abi:ne180100](this, __n);
    std::vector<unsigned int>::pointer end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_1890F49D4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<BOOL>::__vallocate[abi:ne180100](void *a1, uint64_t a2)
{
  if (a2 < 0) {
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  }
  double result = std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::StringList::Entry>>((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  int v4 = *(_DWORD *)(a1 + 8);
  uint64_t v5 = *(void **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    unint64_t v2 = a2 - v6;
    *(void *)a1 = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    bzero(v5, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    unint64_t v8 = &v5[v7];
    *(void *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

void std::vector<zilch::TrafficSkeletonTile::Record>::__append(void **a1, unint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  unint64_t v7 = *(char **)(v4 - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 40 * ((40 * a2 - 40) / 0x28) + 40;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - (unsigned char *)*a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x666666666666666) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (unsigned char *)*a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x333333333333333) {
      unint64_t v11 = 0x666666666666666;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      int64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::TrafficSkeletonTile::Record>>(v4, v11);
    }
    else {
      int64_t v12 = 0;
    }
    int64_t v14 = &v12[40 * v8];
    long long v15 = &v12[40 * v11];
    size_t v16 = 40 * ((40 * a2 - 40) / 0x28) + 40;
    bzero(v14, v16);
    long long v17 = &v14[v16];
    long long v19 = (char *)*a1;
    long long v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        long long v20 = *(_OWORD *)(v18 - 40);
        long long v21 = *(_OWORD *)(v18 - 24);
        *((void *)v14 - 1) = *((void *)v18 - 1);
        *(_OWORD *)(v14 - 24) = v21;
        *(_OWORD *)(v14 - 40) = v20;
        v14 -= 40;
        v18 -= 40;
      }
      while (v18 != v19);
      long long v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
    {
      operator delete(v18);
    }
  }
}

void zilch::WriteBitstream::WriteBitstream(zilch::WriteBitstream *this)
{
}

{
  operator new();
}

void zilch::WriteBitstream::WriteBitstream(zilch::WriteBitstream *this, const zilch::WriteBitstream *a2)
{
}

void sub_1890F4E40(_Unwind_Exception *a1)
{
  MEMORY[0x18C11F580](v1, 0x1010C409C1ECA2DLL);
  _Unwind_Resume(a1);
}

void *zilch::WriteBitstream::WriteBitstream(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *double result = v2;
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = *a2;
  *a2 = 0;
  *double result = v2;
  return result;
}

void zilch::WriteBitstream::WriteBitstream()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1890F5110(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  *uint64_t v1 = 0;
  if (v3) {
    std::default_delete<zilch::WriteBitstreamData>::operator()[abi:ne180100]((uint64_t)v1, v3);
  }
  _Unwind_Resume(exception_object);
}

void zilch::WriteBitstream::~WriteBitstream(zilch::WriteBitstream *this)
{
  uint64_t v1 = *(void *)this;
  *(void *)this = 0;
  if (v1) {
    std::default_delete<zilch::WriteBitstreamData>::operator()[abi:ne180100]((uint64_t)this, v1);
  }
}

{
  uint64_t v1;

  uint64_t v1 = *(void *)this;
  *(void *)this = 0;
  if (v1) {
    std::default_delete<zilch::WriteBitstreamData>::operator()[abi:ne180100]((uint64_t)this, v1);
  }
}

char **zilch::WriteBitstream::operator=(char **a1, char **a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a1;
  if (*a1 != *a2) {
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(*a1, *(char **)v3, *((void *)v3 + 1), (uint64_t)(*((void *)v3 + 1) - *(void *)v3) >> 2);
  }
  uint64_t v5 = *((void *)v3 + 3);
  *((_WORD *)v4 + 16) = *((_WORD *)v3 + 16);
  *((void *)v4 + 3) = v5;
  return a1;
}

uint64_t *zilch::WriteBitstream::operator=(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *double result = *a2;
  *a2 = v2;
  return result;
}

uint64_t zilch::WriteBitstream::setUseOldBitOrder(uint64_t this, char a2)
{
  *(unsigned char *)(*(void *)this + 33) = a2;
  return this;
}

void zilch::WriteBitstream::put(zilch::WriteBitstream *this, unsigned int a2)
{
  uint64_t v3 = *(void *)this;
  int v4 = *(_DWORD *)(*(void *)this + 24);
  uint64_t v5 = (zilch::EndianUtils *)(*(_DWORD *)(*(void *)this + 28) | (a2 << v4));
  *(_DWORD *)(v3 + 24) = v4 + 1;
  *(_DWORD *)(v3 + 28) = v5;
  if (v4 >= 31)
  {
    int v6 = zilch::EndianUtils::toLittleEndian(v5, a2);
    int v7 = v6;
    unint64_t v8 = *(void *)(v3 + 16);
    unint64_t v9 = *(_DWORD **)(v3 + 8);
    if ((unint64_t)v9 >= v8)
    {
      unint64_t v11 = *(_DWORD **)v3;
      uint64_t v12 = ((uint64_t)v9 - *(void *)v3) >> 2;
      unint64_t v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 62) {
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v14 = v8 - (void)v11;
      if (v14 >> 1 > v13) {
        unint64_t v13 = v14 >> 1;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v13;
      }
      if (v15)
      {
        size_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v3 + 16, v15);
        unint64_t v11 = *(_DWORD **)v3;
        unint64_t v9 = *(_DWORD **)(v3 + 8);
      }
      else
      {
        size_t v16 = 0;
      }
      long long v17 = &v16[4 * v12];
      long long v18 = &v16[4 * v15];
      *(_DWORD *)long long v17 = v7;
      unint64_t v10 = v17 + 4;
      while (v9 != v11)
      {
        int v19 = *--v9;
        *((_DWORD *)v17 - 1) = v19;
        v17 -= 4;
      }
      *(void *)uint64_t v3 = v17;
      *(void *)(v3 + 8) = v10;
      *(void *)(v3 + 16) = v18;
      if (v11) {
        operator delete(v11);
      }
    }
    else
    {
      _DWORD *v9 = v6;
      unint64_t v10 = v9 + 1;
    }
    *(void *)(v3 + 8) = v10;
    *(void *)(*(void *)this + 24) = 0;
  }
}

void zilch::WriteBitstream::finalize(zilch::WriteBitstream *this)
{
  uint64_t v1 = *(void *)this;
  if (*(int *)(*(void *)this + 24) >= 1)
  {
    unint64_t v3 = *(void *)(v1 + 16);
    int v4 = *(_DWORD **)(v1 + 8);
    if ((unint64_t)v4 >= v3)
    {
      int v6 = *(_DWORD **)v1;
      uint64_t v7 = ((uint64_t)v4 - *(void *)v1) >> 2;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 62) {
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v3 - (void)v6;
      if (v9 >> 1 > v8) {
        unint64_t v8 = v9 >> 1;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v10 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      if (v10)
      {
        unint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v1 + 16, v10);
        int v6 = *(_DWORD **)v1;
        int v4 = *(_DWORD **)(v1 + 8);
      }
      else
      {
        unint64_t v11 = 0;
      }
      uint64_t v12 = &v11[4 * v7];
      unint64_t v13 = &v11[4 * v10];
      *(_DWORD *)uint64_t v12 = *(_DWORD *)(v1 + 28);
      uint64_t v5 = v12 + 4;
      while (v4 != v6)
      {
        int v14 = *--v4;
        *((_DWORD *)v12 - 1) = v14;
        v12 -= 4;
      }
      *(void *)uint64_t v1 = v12;
      *(void *)(v1 + 8) = v5;
      *(void *)(v1 + 16) = v13;
      if (v6) {
        operator delete(v6);
      }
    }
    else
    {
      *int v4 = *(_DWORD *)(v1 + 28);
      uint64_t v5 = v4 + 1;
    }
    *(void *)(v1 + 8) = v5;
    uint64_t v1 = *(void *)this;
  }
  *(unsigned char *)(v1 + 32) = 1;
}