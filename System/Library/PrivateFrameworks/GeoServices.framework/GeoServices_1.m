void sub_188E44880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a69;

  if (__p) {
    operator delete(__p);
  }
  gcl::polyline::ACContext::~ACContext((gcl::polyline::ACContext *)&a69);
  gcl::polyline::ACContext::~ACContext((gcl::polyline::ACContext *)&a54);
  gcl::polyline::ACContext::~ACContext((gcl::polyline::ACContext *)&a39);
  _Unwind_Resume(a1);
}

void gcl::tmesh::DecoderImpl::decodeResidual(uint64_t a1, int32x4_t *a2, uint64_t a3, unsigned int a4, uint64_t *a5, int32x4_t *a6)
{
  uint64_t v8 = a3;
  if (!a3)
  {
    v10 = 0;
    goto LABEL_6;
  }
  if ((a3 & 0x80000000) != 0) {
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  }
  v10 = (int32x4_t *)operator new(4 * (int)a3);
  bzero(v10, 4 * (int)v8);
  if (a4 <= 4)
  {
LABEL_6:
    v308 = v10;
    switch(a4)
    {
      case 0u:
        if (!v8) {
          goto LABEL_356;
        }
        uint64_t v11 = 0;
        while (1)
        {
          uint64_t v13 = *a5;
          unsigned int v14 = *(unsigned __int16 *)(*a5 + 2 * v11);
          unsigned int v15 = *(_DWORD *)(a1 + 2732);
          unsigned int v16 = *(_DWORD *)(a1 + 2736);
          if (v15 < 0x40000001)
          {
            int v17 = *(_DWORD *)(a1 + 2744);
            while (1)
            {
              v16 *= 2;
              *(_DWORD *)(a1 + 2744) = --v17;
              if (v17) {
                goto LABEL_17;
              }
              uint64_t v20 = *(void *)(a1 + 2720);
              *(void *)(a1 + 2720) = v20 + 1;
              unint64_t v21 = *(unsigned int *)(a1 + 2704);
              if (v20 + 1 >= v21)
              {
                int v22 = 65280;
                unint64_t v23 = v20 + 2;
                *(void *)(a1 + 2720) = v23;
                if (v23 >= v21)
                {
LABEL_23:
                  int v18 = 255;
                  goto LABEL_16;
                }
              }
              else
              {
                int v22 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v20 + 1) << 8;
                unint64_t v23 = v20 + 2;
                *(void *)(a1 + 2720) = v23;
                if (v23 >= v21) {
                  goto LABEL_23;
                }
              }
              int v18 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v23);
LABEL_16:
              v16 |= v22 | v18;
              int v17 = 16;
              *(_DWORD *)(a1 + 2744) = 16;
LABEL_17:
              unsigned int v19 = 2 * v15;
              BOOL v27 = v15 >= 0x20000001;
              v15 *= 2;
              if (v27) {
                goto LABEL_25;
              }
            }
          }
          unsigned int v19 = *(_DWORD *)(a1 + 2732);
LABEL_25:
          int v12 = 0;
          unsigned int v24 = (HIWORD(v19) * v14) & 0xFFFF0000;
          unsigned int v25 = v16 < v24 ? 0 : (HIWORD(v19) * v14) & 0xFFFF0000;
          unsigned int v26 = v16 - v25;
          BOOL v27 = v16 >= v24;
          unsigned int v28 = (v14 >> 7) & 0x1FE | (v16 >= v24);
          unsigned int v29 = v19 - v24;
          *(_WORD *)(v13 + 2 * v11) = *(_WORD *)(a1 + 2 * v28 + 2752) + v14;
          unsigned int v30 = v27 ? v19 - v24 : (HIWORD(v19) * v14) & 0xFFFF0000;
          *(_DWORD *)(a1 + 2732) = v30;
          *(_DWORD *)(a1 + 2736) = v26;
          if (v27) {
            break;
          }
LABEL_12:
          v10->i32[v11++] = v12;
          if (v11 == v8) {
            goto LABEL_349;
          }
        }
        uint64_t v31 = a5[3];
        unsigned int v32 = *(unsigned __int16 *)(v31 + 2 * v11);
        if (v29 < 0x40000001)
        {
          int v33 = *(_DWORD *)(a1 + 2744);
          while (1)
          {
            v26 *= 2;
            *(_DWORD *)(a1 + 2744) = --v33;
            if (v33) {
              goto LABEL_37;
            }
            uint64_t v36 = *(void *)(a1 + 2720);
            *(void *)(a1 + 2720) = v36 + 1;
            unint64_t v37 = *(unsigned int *)(a1 + 2704);
            if (v36 + 1 >= v37)
            {
              int v38 = 65280;
              unint64_t v39 = v36 + 2;
              *(void *)(a1 + 2720) = v39;
              if (v39 >= v37)
              {
LABEL_43:
                int v34 = 255;
                goto LABEL_36;
              }
            }
            else
            {
              int v38 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v36 + 1) << 8;
              unint64_t v39 = v36 + 2;
              *(void *)(a1 + 2720) = v39;
              if (v39 >= v37) {
                goto LABEL_43;
              }
            }
            int v34 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v39);
LABEL_36:
            v26 |= v38 | v34;
            int v33 = 16;
            *(_DWORD *)(a1 + 2744) = 16;
LABEL_37:
            unsigned int v35 = 2 * v29;
            BOOL v27 = v29 >= 0x20000001;
            v29 *= 2;
            if (v27) {
              goto LABEL_45;
            }
          }
        }
        unsigned int v35 = v19 - v24;
LABEL_45:
        unsigned int v40 = (HIWORD(v35) * v32) & 0xFFFF0000;
        *(_WORD *)(v31 + 2 * v11) = *(_WORD *)(a1 + 2 * ((v32 >> 7) & 0x1FE | (v26 >= v40)) + 2752) + v32;
        if (v26 < v40) {
          unsigned int v41 = (HIWORD(v35) * v32) & 0xFFFF0000;
        }
        else {
          unsigned int v41 = v35 - v40;
        }
        if (v26 < v40) {
          unsigned int v42 = 0;
        }
        else {
          unsigned int v42 = v40;
        }
        unsigned int v43 = v26 - v42;
        *(_DWORD *)(a1 + 2732) = v41;
        *(_DWORD *)(a1 + 2736) = v26 - v42;
        v44 = (_WORD *)(a5[6] + 2 * (int)(v11 << 6));
        unsigned int v45 = (unsigned __int16)*v44;
        if (v41 < 0x40000001)
        {
          int v46 = *(_DWORD *)(a1 + 2744);
          while (1)
          {
            v43 *= 2;
            *(_DWORD *)(a1 + 2744) = --v46;
            if (v46) {
              goto LABEL_55;
            }
            uint64_t v49 = *(void *)(a1 + 2720);
            *(void *)(a1 + 2720) = v49 + 1;
            unint64_t v50 = *(unsigned int *)(a1 + 2704);
            if (v49 + 1 >= v50)
            {
              int v51 = 65280;
              unint64_t v52 = v49 + 2;
              *(void *)(a1 + 2720) = v52;
              if (v52 >= v50)
              {
LABEL_61:
                int v47 = 255;
                goto LABEL_54;
              }
            }
            else
            {
              int v51 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v49 + 1) << 8;
              unint64_t v52 = v49 + 2;
              *(void *)(a1 + 2720) = v52;
              if (v52 >= v50) {
                goto LABEL_61;
              }
            }
            int v47 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v52);
LABEL_54:
            v43 |= v51 | v47;
            int v46 = 16;
            *(_DWORD *)(a1 + 2744) = 16;
LABEL_55:
            unsigned int v48 = 2 * v41;
            BOOL v27 = v41 >= 0x20000001;
            v41 *= 2;
            if (v27) {
              goto LABEL_63;
            }
          }
        }
        unsigned int v48 = v41;
LABEL_63:
        unsigned int v53 = (HIWORD(v48) * v45) & 0xFFFF0000;
        unsigned int v54 = v48 - v53;
        BOOL v55 = v43 >= v53;
        _WORD *v44 = *(_WORD *)(a1 + 2 * ((v45 >> 7) & 0x1FE | v55) + 2752) + v45;
        if (v43 >= v53)
        {
          uint64_t v56 = 2;
        }
        else
        {
          unsigned int v54 = v53;
          unsigned int v53 = 0;
          uint64_t v56 = 1;
        }
        unsigned int v57 = v43 - v53;
        *(_DWORD *)(a1 + 2732) = v54;
        *(_DWORD *)(a1 + 2736) = v57;
        unsigned int v58 = (unsigned __int16)v44[v56];
        if (v54 < 0x40000001)
        {
          int v59 = *(_DWORD *)(a1 + 2744);
          while (1)
          {
            v57 *= 2;
            *(_DWORD *)(a1 + 2744) = --v59;
            if (v59) {
              goto LABEL_70;
            }
            uint64_t v62 = *(void *)(a1 + 2720);
            *(void *)(a1 + 2720) = v62 + 1;
            unint64_t v63 = *(unsigned int *)(a1 + 2704);
            if (v62 + 1 >= v63)
            {
              int v64 = 65280;
              unint64_t v65 = v62 + 2;
              *(void *)(a1 + 2720) = v65;
              if (v65 >= v63)
              {
LABEL_76:
                int v60 = 255;
                goto LABEL_69;
              }
            }
            else
            {
              int v64 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v62 + 1) << 8;
              unint64_t v65 = v62 + 2;
              *(void *)(a1 + 2720) = v65;
              if (v65 >= v63) {
                goto LABEL_76;
              }
            }
            int v60 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v65);
LABEL_69:
            v57 |= v64 | v60;
            int v59 = 16;
            *(_DWORD *)(a1 + 2744) = 16;
LABEL_70:
            unsigned int v61 = 2 * v54;
            BOOL v27 = v54 >= 0x20000001;
            v54 *= 2;
            if (v27) {
              goto LABEL_78;
            }
          }
        }
        unsigned int v61 = v54;
LABEL_78:
        unsigned int v66 = (HIWORD(v61) * v58) & 0xFFFF0000;
        unsigned int v67 = v61 - v66;
        BOOL v68 = v57 >= v66;
        v44[v56] = *(_WORD *)(a1 + 2 * ((v58 >> 7) & 0x1FE | v68) + 2752) + v58;
        if (v57 < v66) {
          unsigned int v69 = v66;
        }
        else {
          unsigned int v69 = v67;
        }
        if (v57 < v66) {
          unsigned int v70 = 0;
        }
        else {
          unsigned int v70 = v66;
        }
        unsigned int v71 = v57 - v70;
        *(_DWORD *)(a1 + 2732) = v69;
        *(_DWORD *)(a1 + 2736) = v71;
        int v72 = v55 | (2 * v68);
        uint64_t v73 = (v72 + 3);
        unsigned int v74 = (unsigned __int16)v44[v73];
        if (v69 < 0x40000001)
        {
          int v75 = *(_DWORD *)(a1 + 2744);
          while (1)
          {
            v71 *= 2;
            *(_DWORD *)(a1 + 2744) = --v75;
            if (v75) {
              goto LABEL_88;
            }
            uint64_t v78 = *(void *)(a1 + 2720);
            *(void *)(a1 + 2720) = v78 + 1;
            unint64_t v79 = *(unsigned int *)(a1 + 2704);
            if (v78 + 1 >= v79)
            {
              int v80 = 65280;
              unint64_t v81 = v78 + 2;
              *(void *)(a1 + 2720) = v81;
              if (v81 >= v79)
              {
LABEL_94:
                int v76 = 255;
                goto LABEL_87;
              }
            }
            else
            {
              int v80 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v78 + 1) << 8;
              unint64_t v81 = v78 + 2;
              *(void *)(a1 + 2720) = v81;
              if (v81 >= v79) {
                goto LABEL_94;
              }
            }
            int v76 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v81);
LABEL_87:
            v71 |= v80 | v76;
            int v75 = 16;
            *(_DWORD *)(a1 + 2744) = 16;
LABEL_88:
            unsigned int v77 = 2 * v69;
            BOOL v27 = v69 >= 0x20000001;
            v69 *= 2;
            if (v27) {
              goto LABEL_96;
            }
          }
        }
        unsigned int v77 = v69;
LABEL_96:
        unsigned int v82 = (HIWORD(v77) * v74) & 0xFFFF0000;
        unsigned int v83 = v77 - v82;
        BOOL v84 = v71 >= v82;
        v44[v73] = *(_WORD *)(a1 + 2 * ((v74 >> 7) & 0x1FE | v84) + 2752) + v74;
        if (v71 < v82) {
          unsigned int v85 = v82;
        }
        else {
          unsigned int v85 = v83;
        }
        if (v71 < v82) {
          unsigned int v86 = 0;
        }
        else {
          unsigned int v86 = v82;
        }
        unsigned int v87 = v71 - v86;
        *(_DWORD *)(a1 + 2732) = v85;
        *(_DWORD *)(a1 + 2736) = v87;
        int v88 = v72 | (4 * v84);
        uint64_t v89 = (v88 + 7);
        unsigned int v90 = (unsigned __int16)v44[v89];
        if (v85 < 0x40000001)
        {
          int v91 = *(_DWORD *)(a1 + 2744);
          while (1)
          {
            v87 *= 2;
            *(_DWORD *)(a1 + 2744) = --v91;
            if (v91) {
              goto LABEL_106;
            }
            uint64_t v94 = *(void *)(a1 + 2720);
            *(void *)(a1 + 2720) = v94 + 1;
            unint64_t v95 = *(unsigned int *)(a1 + 2704);
            if (v94 + 1 >= v95)
            {
              int v96 = 65280;
              unint64_t v97 = v94 + 2;
              *(void *)(a1 + 2720) = v97;
              if (v97 >= v95)
              {
LABEL_112:
                int v92 = 255;
                goto LABEL_105;
              }
            }
            else
            {
              int v96 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v94 + 1) << 8;
              unint64_t v97 = v94 + 2;
              *(void *)(a1 + 2720) = v97;
              if (v97 >= v95) {
                goto LABEL_112;
              }
            }
            int v92 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v97);
LABEL_105:
            v87 |= v96 | v92;
            int v91 = 16;
            *(_DWORD *)(a1 + 2744) = 16;
LABEL_106:
            unsigned int v93 = 2 * v85;
            BOOL v27 = v85 >= 0x20000001;
            v85 *= 2;
            if (v27) {
              goto LABEL_114;
            }
          }
        }
        unsigned int v93 = v85;
LABEL_114:
        unsigned int v98 = (HIWORD(v93) * v90) & 0xFFFF0000;
        unsigned int v99 = v93 - v98;
        BOOL v100 = v87 >= v98;
        v44[v89] = *(_WORD *)(a1 + 2 * ((v90 >> 7) & 0x1FE | v100) + 2752) + v90;
        if (v87 < v98) {
          unsigned int v101 = v98;
        }
        else {
          unsigned int v101 = v99;
        }
        if (v87 < v98) {
          unsigned int v102 = 0;
        }
        else {
          unsigned int v102 = v98;
        }
        unsigned int v103 = v87 - v102;
        *(_DWORD *)(a1 + 2732) = v101;
        *(_DWORD *)(a1 + 2736) = v103;
        int v104 = v88 | (8 * v100);
        uint64_t v105 = (v104 + 15);
        unsigned int v106 = (unsigned __int16)v44[v105];
        if (v101 < 0x40000001)
        {
          int v107 = *(_DWORD *)(a1 + 2744);
          while (1)
          {
            v103 *= 2;
            *(_DWORD *)(a1 + 2744) = --v107;
            if (v107) {
              goto LABEL_124;
            }
            uint64_t v110 = *(void *)(a1 + 2720);
            *(void *)(a1 + 2720) = v110 + 1;
            unint64_t v111 = *(unsigned int *)(a1 + 2704);
            if (v110 + 1 >= v111)
            {
              int v112 = 65280;
              unint64_t v113 = v110 + 2;
              *(void *)(a1 + 2720) = v113;
              if (v113 >= v111)
              {
LABEL_130:
                int v108 = 255;
                goto LABEL_123;
              }
            }
            else
            {
              int v112 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v110 + 1) << 8;
              unint64_t v113 = v110 + 2;
              *(void *)(a1 + 2720) = v113;
              if (v113 >= v111) {
                goto LABEL_130;
              }
            }
            int v108 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v113);
LABEL_123:
            v103 |= v112 | v108;
            int v107 = 16;
            *(_DWORD *)(a1 + 2744) = 16;
LABEL_124:
            unsigned int v109 = 2 * v101;
            BOOL v27 = v101 >= 0x20000001;
            v101 *= 2;
            if (v27) {
              goto LABEL_132;
            }
          }
        }
        unsigned int v109 = v101;
LABEL_132:
        unsigned int v114 = (HIWORD(v109) * v106) & 0xFFFF0000;
        unsigned int v115 = v109 - v114;
        BOOL v116 = v103 >= v114;
        v44[v105] = *(_WORD *)(a1 + 2 * ((v106 >> 7) & 0x1FE | v116) + 2752) + v106;
        if (v103 < v114) {
          unsigned int v117 = v114;
        }
        else {
          unsigned int v117 = v115;
        }
        if (v103 < v114) {
          unsigned int v118 = 0;
        }
        else {
          unsigned int v118 = v114;
        }
        unsigned int v119 = v103 - v118;
        *(_DWORD *)(a1 + 2732) = v117;
        *(_DWORD *)(a1 + 2736) = v119;
        int v120 = v104 | (16 * v116);
        uint64_t v121 = (v120 + 31);
        unsigned int v122 = (unsigned __int16)v44[v121];
        if (v117 >= 0x40000001)
        {
          unsigned int v125 = v117;
LABEL_150:
          unsigned int v130 = (HIWORD(v125) * v122) & 0xFFFF0000;
          unsigned int v131 = v125 - v130;
          BOOL v132 = v119 >= v130;
          v44[v121] = *(_WORD *)(a1 + 2 * ((v122 >> 7) & 0x1FE | v132) + 2752) + v122;
          if (v119 < v130) {
            unsigned int v133 = v130;
          }
          else {
            unsigned int v133 = v131;
          }
          if (v119 < v130) {
            unsigned int v134 = 0;
          }
          else {
            unsigned int v134 = v130;
          }
          *(_DWORD *)(a1 + 2732) = v133;
          *(_DWORD *)(a1 + 2736) = v119 - v134;
          int v135 = v120 | (32 * v132);
          if (v135 == 63) {
            int v135 = gcl::ArithmeticDecoder::decodeExpGolomb((unsigned int *)(a1 + 2704), *(_DWORD *)(a5[12] + 4 * v11), (_WORD *)(a5[9] + 2 * v11))+ 63;
          }
          if (v26 >= v40) {
            int v12 = v135 + 1;
          }
          else {
            int v12 = ~v135;
          }
          goto LABEL_12;
        }
        int v123 = *(_DWORD *)(a1 + 2744);
        while (1)
        {
          v119 *= 2;
          *(_DWORD *)(a1 + 2744) = --v123;
          if (v123) {
            goto LABEL_142;
          }
          uint64_t v126 = *(void *)(a1 + 2720);
          *(void *)(a1 + 2720) = v126 + 1;
          unint64_t v127 = *(unsigned int *)(a1 + 2704);
          if (v126 + 1 >= v127)
          {
            int v128 = 65280;
            unint64_t v129 = v126 + 2;
            *(void *)(a1 + 2720) = v129;
            if (v129 >= v127)
            {
LABEL_148:
              int v124 = 255;
              goto LABEL_141;
            }
          }
          else
          {
            int v128 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v126 + 1) << 8;
            unint64_t v129 = v126 + 2;
            *(void *)(a1 + 2720) = v129;
            if (v129 >= v127) {
              goto LABEL_148;
            }
          }
          int v124 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v129);
LABEL_141:
          v119 |= v128 | v124;
          int v123 = 16;
          *(_DWORD *)(a1 + 2744) = 16;
LABEL_142:
          unsigned int v125 = 2 * v117;
          BOOL v27 = v117 >= 0x20000001;
          v117 *= 2;
          if (v27) {
            goto LABEL_150;
          }
        }
      case 2u:
        if (!v8) {
          goto LABEL_356;
        }
        unint64_t v152 = 0;
        uint64_t v153 = 0;
        v154 = (unsigned int *)(a1 + 2704);
        while (1)
        {
          uint64_t v156 = a5[12];
          int v157 = gcl::ArithmeticDecoder::decodeSignedExpGolomb(v154, *(_DWORD *)(v156 + v152), (_WORD *)(a5[3] + v153), (_WORD *)(a5[9] + v153));
          if (v157 >= 0) {
            unsigned int v158 = v157;
          }
          else {
            unsigned int v158 = -v157;
          }
          int v159 = *(_DWORD *)(v156 + v152);
          unsigned int v160 = v158 >> v159;
          if (v159) {
            BOOL v161 = v160 == 0;
          }
          else {
            BOOL v161 = 0;
          }
          if (v161)
          {
            int v155 = -1;
          }
          else
          {
            if (v160 < 2) {
              goto LABEL_183;
            }
            int v155 = 1;
          }
          *(_DWORD *)(v156 + v152) = v155 + v159;
LABEL_183:
          v10->i32[v152 / 4] = v157;
          v153 += 2;
          v152 += 4;
          if (2 * v8 == v153) {
            goto LABEL_349;
          }
        }
      case 3u:
        if (!v8) {
          goto LABEL_356;
        }
        uint64_t v136 = 0;
        uint64_t v137 = *(void *)(a1 + 2664);
        while (1)
        {
          int v139 = *(_DWORD *)(v137 + 4 * v136);
          if (v139 >= 1) {
            break;
          }
          __int32 v138 = 0;
LABEL_161:
          v10->i32[v136++] = v138;
          if (v136 == v8) {
            goto LABEL_349;
          }
        }
        int v140 = 0;
        __int32 v138 = 0;
        unsigned int v141 = *(_DWORD *)(a1 + 2732);
        unsigned int v142 = *(_DWORD *)(a1 + 2736);
        while (v141 >= 0x40000001)
        {
          unsigned int v143 = v141;
LABEL_165:
          unsigned int v144 = (v143 >> 1) & 0x7FFF0000;
          unsigned int v141 = v143 - v144;
          int v145 = v142 >= v144;
          if (v142 < v144)
          {
            unsigned int v141 = v144;
            unsigned int v144 = 0;
          }
          v142 -= v144;
          *(_DWORD *)(a1 + 2732) = v141;
          *(_DWORD *)(a1 + 2736) = v142;
          v138 += v145 << v140++;
          if (v140 == v139) {
            goto LABEL_161;
          }
        }
        int v146 = *(_DWORD *)(a1 + 2744);
        while (1)
        {
          v142 *= 2;
          *(_DWORD *)(a1 + 2744) = --v146;
          if (v146) {
            goto LABEL_172;
          }
          uint64_t v148 = *(void *)(a1 + 2720);
          *(void *)(a1 + 2720) = v148 + 1;
          unint64_t v149 = *(unsigned int *)(a1 + 2704);
          if (v148 + 1 >= v149)
          {
            int v150 = 65280;
            unint64_t v151 = v148 + 2;
            *(void *)(a1 + 2720) = v151;
            if (v151 >= v149)
            {
LABEL_178:
              int v147 = 255;
              goto LABEL_171;
            }
          }
          else
          {
            int v150 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v148 + 1) << 8;
            unint64_t v151 = v148 + 2;
            *(void *)(a1 + 2720) = v151;
            if (v151 >= v149) {
              goto LABEL_178;
            }
          }
          int v147 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v151);
LABEL_171:
          v142 |= v150 | v147;
          int v146 = 16;
          *(_DWORD *)(a1 + 2744) = 16;
LABEL_172:
          unsigned int v143 = 2 * v141;
          BOOL v27 = v141 >= 0x20000001;
          v141 *= 2;
          if (v27) {
            goto LABEL_165;
          }
        }
      case 4u:
        if (!v8) {
          goto LABEL_356;
        }
        uint64_t v162 = 0;
        uint64_t v163 = v8;
        break;
      default:
        goto LABEL_349;
    }
    while (1)
    {
      uint64_t v166 = *a5;
      unsigned int v167 = *(unsigned __int16 *)(*a5 + 2 * v162);
      unsigned int v168 = *(_DWORD *)(a1 + 2732);
      unsigned int v169 = *(_DWORD *)(a1 + 2736);
      if (v168 < 0x40000001)
      {
        int v170 = *(_DWORD *)(a1 + 2744);
        while (1)
        {
          v169 *= 2;
          *(_DWORD *)(a1 + 2744) = --v170;
          if (v170) {
            goto LABEL_205;
          }
          uint64_t v173 = *(void *)(a1 + 2720);
          *(void *)(a1 + 2720) = v173 + 1;
          unint64_t v174 = *(unsigned int *)(a1 + 2704);
          if (v173 + 1 >= v174)
          {
            int v175 = 65280;
            unint64_t v176 = v173 + 2;
            *(void *)(a1 + 2720) = v176;
            if (v176 >= v174)
            {
LABEL_211:
              int v171 = 255;
              goto LABEL_204;
            }
          }
          else
          {
            int v175 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v173 + 1) << 8;
            unint64_t v176 = v173 + 2;
            *(void *)(a1 + 2720) = v176;
            if (v176 >= v174) {
              goto LABEL_211;
            }
          }
          int v171 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v176);
LABEL_204:
          v169 |= v175 | v171;
          int v170 = 16;
          *(_DWORD *)(a1 + 2744) = 16;
LABEL_205:
          unsigned int v172 = 2 * v168;
          BOOL v27 = v168 >= 0x20000001;
          v168 *= 2;
          if (v27) {
            goto LABEL_213;
          }
        }
      }
      unsigned int v172 = *(_DWORD *)(a1 + 2732);
LABEL_213:
      int v165 = 0;
      unsigned int v177 = (HIWORD(v172) * v167) & 0xFFFF0000;
      unsigned int v178 = v169 < v177 ? 0 : (HIWORD(v172) * v167) & 0xFFFF0000;
      unsigned int v179 = v169 - v178;
      BOOL v180 = v169 >= v177;
      unsigned int v181 = (v167 >> 7) & 0x1FE | (v169 >= v177);
      unsigned int v182 = v172 - v177;
      *(_WORD *)(v166 + 2 * v162) = *(_WORD *)(a1 + 2 * v181 + 2752) + v167;
      unsigned int v183 = v180 ? v172 - v177 : (HIWORD(v172) * v167) & 0xFFFF0000;
      *(_DWORD *)(a1 + 2732) = v183;
      *(_DWORD *)(a1 + 2736) = v179;
      if (v180) {
        break;
      }
LABEL_200:
      v10->i32[v162++] = v165;
      if (v162 == v163) {
        goto LABEL_349;
      }
    }
    uint64_t v184 = a5[3];
    unsigned int v185 = *(unsigned __int16 *)(v184 + 2 * v162);
    if (v182 < 0x40000001)
    {
      int v186 = *(_DWORD *)(a1 + 2744);
      while (1)
      {
        v179 *= 2;
        *(_DWORD *)(a1 + 2744) = --v186;
        if (v186) {
          goto LABEL_225;
        }
        uint64_t v189 = *(void *)(a1 + 2720);
        *(void *)(a1 + 2720) = v189 + 1;
        unint64_t v190 = *(unsigned int *)(a1 + 2704);
        if (v189 + 1 >= v190)
        {
          int v191 = 65280;
          unint64_t v192 = v189 + 2;
          *(void *)(a1 + 2720) = v192;
          if (v192 >= v190)
          {
LABEL_231:
            int v187 = 255;
            goto LABEL_224;
          }
        }
        else
        {
          int v191 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v189 + 1) << 8;
          unint64_t v192 = v189 + 2;
          *(void *)(a1 + 2720) = v192;
          if (v192 >= v190) {
            goto LABEL_231;
          }
        }
        int v187 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v192);
LABEL_224:
        v179 |= v191 | v187;
        int v186 = 16;
        *(_DWORD *)(a1 + 2744) = 16;
LABEL_225:
        unsigned int v188 = 2 * v182;
        BOOL v27 = v182 >= 0x20000001;
        v182 *= 2;
        if (v27) {
          goto LABEL_233;
        }
      }
    }
    unsigned int v188 = v172 - v177;
LABEL_233:
    unsigned int v193 = (HIWORD(v188) * v185) & 0xFFFF0000;
    *(_WORD *)(v184 + 2 * v162) = *(_WORD *)(a1 + 2 * ((v185 >> 7) & 0x1FE | (v179 >= v193)) + 2752) + v185;
    if (v179 < v193) {
      unsigned int v194 = (HIWORD(v188) * v185) & 0xFFFF0000;
    }
    else {
      unsigned int v194 = v188 - v193;
    }
    if (v179 < v193) {
      unsigned int v195 = 0;
    }
    else {
      unsigned int v195 = (HIWORD(v188) * v185) & 0xFFFF0000;
    }
    unsigned int v196 = v179 - v195;
    *(_DWORD *)(a1 + 2732) = v194;
    *(_DWORD *)(a1 + 2736) = v179 - v195;
    v197 = (_WORD *)(a5[6] + 2 * (int)(v162 << 6));
    unsigned int v198 = (unsigned __int16)*v197;
    if (v194 < 0x40000001)
    {
      int v199 = *(_DWORD *)(a1 + 2744);
      while (1)
      {
        v196 *= 2;
        *(_DWORD *)(a1 + 2744) = --v199;
        if (v199) {
          goto LABEL_243;
        }
        uint64_t v202 = *(void *)(a1 + 2720);
        *(void *)(a1 + 2720) = v202 + 1;
        unint64_t v203 = *(unsigned int *)(a1 + 2704);
        if (v202 + 1 >= v203)
        {
          int v204 = 65280;
          unint64_t v205 = v202 + 2;
          *(void *)(a1 + 2720) = v205;
          if (v205 >= v203)
          {
LABEL_249:
            int v200 = 255;
            goto LABEL_242;
          }
        }
        else
        {
          int v204 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v202 + 1) << 8;
          unint64_t v205 = v202 + 2;
          *(void *)(a1 + 2720) = v205;
          if (v205 >= v203) {
            goto LABEL_249;
          }
        }
        int v200 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v205);
LABEL_242:
        v196 |= v204 | v200;
        int v199 = 16;
        *(_DWORD *)(a1 + 2744) = 16;
LABEL_243:
        unsigned int v201 = 2 * v194;
        BOOL v27 = v194 >= 0x20000001;
        v194 *= 2;
        if (v27) {
          goto LABEL_251;
        }
      }
    }
    unsigned int v201 = v194;
LABEL_251:
    unsigned int v206 = (HIWORD(v201) * v198) & 0xFFFF0000;
    unsigned int v207 = v201 - v206;
    BOOL v208 = v196 >= v206;
    _WORD *v197 = *(_WORD *)(a1 + 2 * ((v198 >> 7) & 0x1FE | v208) + 2752) + v198;
    if (v196 >= v206)
    {
      unsigned int v209 = v206;
    }
    else
    {
      unsigned int v207 = v206;
      unsigned int v209 = 0;
    }
    unsigned int v210 = v196 - v209;
    *(_DWORD *)(a1 + 2732) = v207;
    *(_DWORD *)(a1 + 2736) = v210;
    uint64_t v211 = (v208 & 0x7FFFFFFu) + 1;
    unsigned int v212 = (unsigned __int16)v197[v211];
    if (v207 < 0x40000001)
    {
      int v213 = *(_DWORD *)(a1 + 2744);
      while (1)
      {
        v210 *= 2;
        *(_DWORD *)(a1 + 2744) = --v213;
        if (v213) {
          goto LABEL_258;
        }
        uint64_t v216 = *(void *)(a1 + 2720);
        *(void *)(a1 + 2720) = v216 + 1;
        unint64_t v217 = *(unsigned int *)(a1 + 2704);
        if (v216 + 1 >= v217)
        {
          int v218 = 65280;
          unint64_t v219 = v216 + 2;
          *(void *)(a1 + 2720) = v219;
          if (v219 >= v217)
          {
LABEL_264:
            int v214 = 255;
            goto LABEL_257;
          }
        }
        else
        {
          int v218 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v216 + 1) << 8;
          unint64_t v219 = v216 + 2;
          *(void *)(a1 + 2720) = v219;
          if (v219 >= v217) {
            goto LABEL_264;
          }
        }
        int v214 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v219);
LABEL_257:
        v210 |= v218 | v214;
        int v213 = 16;
        *(_DWORD *)(a1 + 2744) = 16;
LABEL_258:
        unsigned int v215 = 2 * v207;
        BOOL v27 = v207 >= 0x20000001;
        v207 *= 2;
        if (v27) {
          goto LABEL_266;
        }
      }
    }
    unsigned int v215 = v207;
LABEL_266:
    int v220 = 32 * v208;
    unsigned int v221 = (HIWORD(v215) * v212) & 0xFFFF0000;
    BOOL v222 = v210 >= v221;
    v197[v211] = *(_WORD *)(a1 + 2 * ((v212 >> 7) & 0x1FE | v222) + 2752) + v212;
    if (v210 < v221) {
      unsigned int v223 = (HIWORD(v215) * v212) & 0xFFFF0000;
    }
    else {
      unsigned int v223 = v215 - v221;
    }
    if (v210 < v221) {
      unsigned int v221 = 0;
    }
    unsigned int v224 = v210 - v221;
    *(_DWORD *)(a1 + 2732) = v223;
    *(_DWORD *)(a1 + 2736) = v224;
    unsigned int v225 = v220 | (16 * v222);
    uint64_t v226 = (v225 >> 4) + 3;
    unsigned int v227 = (unsigned __int16)v197[v226];
    if (v223 < 0x40000001)
    {
      int v228 = *(_DWORD *)(a1 + 2744);
      while (1)
      {
        v224 *= 2;
        *(_DWORD *)(a1 + 2744) = --v228;
        if (v228) {
          goto LABEL_275;
        }
        uint64_t v231 = *(void *)(a1 + 2720);
        *(void *)(a1 + 2720) = v231 + 1;
        unint64_t v232 = *(unsigned int *)(a1 + 2704);
        if (v231 + 1 >= v232)
        {
          int v233 = 65280;
          unint64_t v234 = v231 + 2;
          *(void *)(a1 + 2720) = v234;
          if (v234 >= v232)
          {
LABEL_281:
            int v229 = 255;
            goto LABEL_274;
          }
        }
        else
        {
          int v233 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v231 + 1) << 8;
          unint64_t v234 = v231 + 2;
          *(void *)(a1 + 2720) = v234;
          if (v234 >= v232) {
            goto LABEL_281;
          }
        }
        int v229 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v234);
LABEL_274:
        v224 |= v233 | v229;
        int v228 = 16;
        *(_DWORD *)(a1 + 2744) = 16;
LABEL_275:
        unsigned int v230 = 2 * v223;
        BOOL v27 = v223 >= 0x20000001;
        v223 *= 2;
        if (v27) {
          goto LABEL_283;
        }
      }
    }
    unsigned int v230 = v223;
LABEL_283:
    unsigned int v235 = (HIWORD(v230) * v227) & 0xFFFF0000;
    BOOL v236 = v224 >= v235;
    v197[v226] = *(_WORD *)(a1 + 2 * ((v227 >> 7) & 0x1FE | v236) + 2752) + v227;
    if (v224 < v235) {
      unsigned int v237 = (HIWORD(v230) * v227) & 0xFFFF0000;
    }
    else {
      unsigned int v237 = v230 - v235;
    }
    if (v224 < v235) {
      unsigned int v238 = 0;
    }
    else {
      unsigned int v238 = (HIWORD(v230) * v227) & 0xFFFF0000;
    }
    unsigned int v239 = v224 - v238;
    *(_DWORD *)(a1 + 2732) = v237;
    *(_DWORD *)(a1 + 2736) = v239;
    unsigned int v240 = v225 | (8 * v236);
    uint64_t v241 = (v240 >> 3) + 7;
    unsigned int v242 = (unsigned __int16)v197[v241];
    if (v237 < 0x40000001)
    {
      int v243 = *(_DWORD *)(a1 + 2744);
      while (1)
      {
        v239 *= 2;
        *(_DWORD *)(a1 + 2744) = --v243;
        if (v243) {
          goto LABEL_293;
        }
        uint64_t v246 = *(void *)(a1 + 2720);
        *(void *)(a1 + 2720) = v246 + 1;
        unint64_t v247 = *(unsigned int *)(a1 + 2704);
        if (v246 + 1 >= v247)
        {
          int v248 = 65280;
          unint64_t v249 = v246 + 2;
          *(void *)(a1 + 2720) = v249;
          if (v249 >= v247)
          {
LABEL_299:
            int v244 = 255;
            goto LABEL_292;
          }
        }
        else
        {
          int v248 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v246 + 1) << 8;
          unint64_t v249 = v246 + 2;
          *(void *)(a1 + 2720) = v249;
          if (v249 >= v247) {
            goto LABEL_299;
          }
        }
        int v244 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v249);
LABEL_292:
        v239 |= v248 | v244;
        int v243 = 16;
        *(_DWORD *)(a1 + 2744) = 16;
LABEL_293:
        unsigned int v245 = 2 * v237;
        BOOL v27 = v237 >= 0x20000001;
        v237 *= 2;
        if (v27) {
          goto LABEL_301;
        }
      }
    }
    unsigned int v245 = v237;
LABEL_301:
    unsigned int v250 = (HIWORD(v245) * v242) & 0xFFFF0000;
    BOOL v251 = v239 >= v250;
    v197[v241] = *(_WORD *)(a1 + 2 * ((v242 >> 7) & 0x1FE | v251) + 2752) + v242;
    if (v239 < v250) {
      unsigned int v252 = (HIWORD(v245) * v242) & 0xFFFF0000;
    }
    else {
      unsigned int v252 = v245 - v250;
    }
    if (v239 < v250) {
      unsigned int v253 = 0;
    }
    else {
      unsigned int v253 = (HIWORD(v245) * v242) & 0xFFFF0000;
    }
    unsigned int v254 = v239 - v253;
    *(_DWORD *)(a1 + 2732) = v252;
    *(_DWORD *)(a1 + 2736) = v254;
    unsigned int v255 = v240 | (4 * v251);
    uint64_t v256 = (v255 >> 2) + 15;
    unsigned int v257 = (unsigned __int16)v197[v256];
    if (v252 < 0x40000001)
    {
      int v258 = *(_DWORD *)(a1 + 2744);
      while (1)
      {
        v254 *= 2;
        *(_DWORD *)(a1 + 2744) = --v258;
        if (v258) {
          goto LABEL_311;
        }
        uint64_t v261 = *(void *)(a1 + 2720);
        *(void *)(a1 + 2720) = v261 + 1;
        unint64_t v262 = *(unsigned int *)(a1 + 2704);
        if (v261 + 1 >= v262)
        {
          int v263 = 65280;
          unint64_t v264 = v261 + 2;
          *(void *)(a1 + 2720) = v264;
          if (v264 >= v262)
          {
LABEL_317:
            int v259 = 255;
            goto LABEL_310;
          }
        }
        else
        {
          int v263 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v261 + 1) << 8;
          unint64_t v264 = v261 + 2;
          *(void *)(a1 + 2720) = v264;
          if (v264 >= v262) {
            goto LABEL_317;
          }
        }
        int v259 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v264);
LABEL_310:
        v254 |= v263 | v259;
        int v258 = 16;
        *(_DWORD *)(a1 + 2744) = 16;
LABEL_311:
        unsigned int v260 = 2 * v252;
        BOOL v27 = v252 >= 0x20000001;
        v252 *= 2;
        if (v27) {
          goto LABEL_319;
        }
      }
    }
    unsigned int v260 = v252;
LABEL_319:
    unsigned int v265 = (HIWORD(v260) * v257) & 0xFFFF0000;
    BOOL v266 = v254 >= v265;
    v197[v256] = *(_WORD *)(a1 + 2 * ((v257 >> 7) & 0x1FE | v266) + 2752) + v257;
    if (v254 < v265) {
      unsigned int v267 = (HIWORD(v260) * v257) & 0xFFFF0000;
    }
    else {
      unsigned int v267 = v260 - v265;
    }
    if (v254 < v265) {
      unsigned int v268 = 0;
    }
    else {
      unsigned int v268 = (HIWORD(v260) * v257) & 0xFFFF0000;
    }
    unsigned int v269 = v254 - v268;
    *(_DWORD *)(a1 + 2732) = v267;
    *(_DWORD *)(a1 + 2736) = v269;
    unsigned int v270 = v255 | (2 * v266);
    uint64_t v271 = (v270 >> 1) + 31;
    unsigned int v272 = (unsigned __int16)v197[v271];
    if (v267 < 0x40000001)
    {
      int v273 = *(_DWORD *)(a1 + 2744);
      while (1)
      {
        v269 *= 2;
        *(_DWORD *)(a1 + 2744) = --v273;
        if (v273) {
          goto LABEL_329;
        }
        uint64_t v276 = *(void *)(a1 + 2720);
        *(void *)(a1 + 2720) = v276 + 1;
        unint64_t v277 = *(unsigned int *)(a1 + 2704);
        if (v276 + 1 >= v277)
        {
          int v278 = 65280;
          unint64_t v279 = v276 + 2;
          *(void *)(a1 + 2720) = v279;
          if (v279 >= v277)
          {
LABEL_335:
            int v274 = 255;
            goto LABEL_328;
          }
        }
        else
        {
          int v278 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v276 + 1) << 8;
          unint64_t v279 = v276 + 2;
          *(void *)(a1 + 2720) = v279;
          if (v279 >= v277) {
            goto LABEL_335;
          }
        }
        int v274 = *(unsigned __int8 *)(*(void *)(a1 + 2712) + v279);
LABEL_328:
        v269 |= v278 | v274;
        int v273 = 16;
        *(_DWORD *)(a1 + 2744) = 16;
LABEL_329:
        unsigned int v275 = 2 * v267;
        BOOL v27 = v267 >= 0x20000001;
        v267 *= 2;
        if (v27) {
          goto LABEL_337;
        }
      }
    }
    unsigned int v275 = v267;
LABEL_337:
    unsigned int v280 = (HIWORD(v275) * v272) & 0xFFFF0000;
    unsigned int v281 = v275 - v280;
    BOOL v282 = v269 >= v280;
    v197[v271] = *(_WORD *)(a1 + 2 * ((v272 >> 7) & 0x1FE | v282) + 2752) + v272;
    if (v269 < v280) {
      unsigned int v283 = v280;
    }
    else {
      unsigned int v283 = v281;
    }
    if (v269 < v280) {
      unsigned int v284 = 0;
    }
    else {
      unsigned int v284 = v280;
    }
    *(_DWORD *)(a1 + 2732) = v283;
    *(_DWORD *)(a1 + 2736) = v269 - v284;
    int v285 = v270 | v282;
    if ((v270 | v282) == 0x3F)
    {
      uint64_t v286 = v8;
      uint64_t v287 = a5[12];
      int v285 = gcl::ArithmeticDecoder::decodeExpGolomb((unsigned int *)(a1 + 2704), *(_DWORD *)(v287 + 4 * v162), (_WORD *)(a5[9] + 2 * v162))+ 63;
      int v288 = *(_DWORD *)(v287 + 4 * v162);
      int v289 = v285 >> v288;
      if (v288 && !v289)
      {
        int v164 = -1;
LABEL_196:
        *(_DWORD *)(v287 + 4 * v162) = v164 + v288;
        uint64_t v8 = v286;
        v10 = v308;
        goto LABEL_197;
      }
      if (v289 >= 2)
      {
        int v164 = 1;
        goto LABEL_196;
      }
      uint64_t v8 = v286;
      v10 = v308;
    }
LABEL_197:
    if (v179 >= v193) {
      int v165 = v285 + 1;
    }
    else {
      int v165 = ~v285;
    }
    goto LABEL_200;
  }
LABEL_349:
  if ((int)v8 < 1)
  {
LABEL_356:
    if (!v10) {
      return;
    }
    goto LABEL_361;
  }
  uint64_t v290 = 0;
  if (v8 < 8)
  {
    v292 = a6;
    v291 = a2;
LABEL_359:
    uint64_t v298 = v8 - v290;
    uint64_t v299 = v290;
    v300 = &v292->i32[v290];
    v301 = &v10->i32[v299];
    v302 = &v291->i32[v299];
    do
    {
      int v304 = *v302++;
      int v303 = v304;
      int v305 = *v301++;
      *v300++ = v305 + v303;
      --v298;
    }
    while (v298);
    goto LABEL_361;
  }
  v292 = a6;
  v291 = a2;
  if ((unint64_t)((char *)a6 - (char *)a2) < 0x20) {
    goto LABEL_359;
  }
  uint64_t v290 = v8 & 0xFFFFFFF8;
  v293 = a2 + 1;
  v294 = v10 + 1;
  v295 = a6 + 1;
  uint64_t v296 = v290;
  do
  {
    int32x4_t v297 = vaddq_s32(*v294, *v293);
    v295[-1] = vaddq_s32(v294[-1], v293[-1]);
    int32x4_t *v295 = v297;
    v293 += 2;
    v294 += 2;
    v295 += 2;
    v296 -= 8;
  }
  while (v296);
  if (v290 != v8) {
    goto LABEL_359;
  }
LABEL_361:

  operator delete(v10);
}

void sub_188E45E34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MapsFeature_IsEnabled_ShelbyvilleTerrain()
{
  return GEOConfigGetBOOL(MapsFeaturesConfig_ShelbyvilleTerrain, (uint64_t)off_1E9111C98);
}

id GEOConfig_pruneEntitledKeysForAuditToken(void *a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  v5 = [v3 objectForKeyedSubscript:@"entitled"];

  if (v5)
  {
    v6 = [v4 valuesForEntitlement:@"com.apple.GeoServices.Config"];
    if ([v6 containsObject:@"*"])
    {
      id v17 = v3;
      goto LABEL_18;
    }
    if ([v6 count])
    {
      v7 = [v3 objectForKeyedSubscript:@"entitled"];
      uint64_t v8 = (void *)[v7 mutableCopy];

      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        v9 = [v8 allKeys];
        long long v20 = 0u;
        long long v21 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        uint64_t v10 = [v9 countByEnumeratingWithState:&v20 objects:v24 count:16];
        if (v10)
        {
          uint64_t v11 = v10;
          uint64_t v12 = *(void *)v21;
          do
          {
            for (uint64_t i = 0; i != v11; ++i)
            {
              if (*(void *)v21 != v12) {
                objc_enumerationMutation(v9);
              }
              uint64_t v14 = *(void *)(*((void *)&v20 + 1) + 8 * i);
              if (([v6 containsObject:v14] & 1) == 0) {
                [v8 setObject:0 forKeyedSubscript:v14];
              }
            }
            uint64_t v11 = [v9 countByEnumeratingWithState:&v20 objects:v24 count:16];
          }
          while (v11);
        }
        unsigned int v15 = (void *)[v3 mutableCopy];
        unsigned int v16 = (void *)[v8 copy];
        [v15 setObject:v16 forKeyedSubscript:@"entitled"];

        id v17 = (id)[v15 copy];
        goto LABEL_17;
      }
      id v18 = v3;
    }
    else
    {
      uint64_t v8 = (void *)[v3 mutableCopy];
      [v8 setObject:0 forKeyedSubscript:@"entitled"];
      id v18 = (id)[v8 copy];
    }
    id v17 = v18;
LABEL_17:

LABEL_18:
    goto LABEL_19;
  }
  id v17 = v3;
LABEL_19:

  return v17;
}

void sub_188E46B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  GeoCodecsVMP4DecodingOptions::~GeoCodecsVMP4DecodingOptions((GeoCodecsVMP4DecodingOptions *)&a15);
  geo::codec::PBDataReaderObjC::~PBDataReaderObjC((geo::codec::PBDataReaderObjC *)&a9);

  _Unwind_Resume(a1);
}

void sub_188E46D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16)
{
  _Unwind_Resume(a1);
}

void sub_188E47218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, id *location, void *a11, void *a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18, id a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a19);

  _Unwind_Resume(a1);
}

void sub_188E47574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_188E476BC(_Unwind_Exception *a1)
{
}

void sub_188E47BA8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(&stru_1EB29F9BC);
  _Unwind_Resume(a1);
}

void sub_188E47DE0(_Unwind_Exception *exception_object)
{
}

id _GEOURLInfoFromActiveTileGroup(uint64_t a1)
{
  v2 = +[GEOResourceManifestManager modernManager];
  id v3 = [v2 activeTileGroup];
  id v4 = [v3 urlInfoSet];

  v5 = 0;
  switch(a1)
  {
    case 2:
      uint64_t v6 = [v4 directionsURL];
      goto LABEL_55;
    case 5:
      uint64_t v6 = [v4 etaURL];
      goto LABEL_55;
    case 9:
      uint64_t v6 = [v4 searchAttributionManifestURL];
      goto LABEL_55;
    case 10:
      uint64_t v6 = [v4 problemSubmissionURL];
      goto LABEL_55;
    case 11:
      uint64_t v6 = [v4 problemStatusURL];
      goto LABEL_55;
    case 12:
      uint64_t v6 = [v4 problemCategoriesURL];
      goto LABEL_55;
    case 15:
      uint64_t v6 = [v4 polyLocationShiftURL];
      goto LABEL_55;
    case 16:
      uint64_t v6 = [v4 batchReverseGeocoderURL];
      goto LABEL_55;
    case 18:
      uint64_t v6 = [v4 simpleETAURL];
      goto LABEL_55;
    case 19:
      uint64_t v6 = [v4 addressCorrectionInitURL];
      goto LABEL_55;
    case 20:
      uint64_t v6 = [v4 addressCorrectionUpdateURL];
      goto LABEL_55;
    case 21:
      uint64_t v6 = [v4 reverseGeocoderVersionsURL];
      goto LABEL_55;
    case 23:
      uint64_t v6 = [v4 announcementsURL];
      goto LABEL_55;
    case 24:
      uint64_t v6 = [v4 dispatcherURL];
      goto LABEL_55;
    case 25:
      uint64_t v6 = [v4 problemOptInURL];
      goto LABEL_55;
    case 26:
      uint64_t v6 = [v4 abExperimentURL];
      goto LABEL_55;
    case 27:
      uint64_t v6 = [v4 businessPortalBaseURL];
      goto LABEL_55;
    case 28:
      uint64_t v6 = [v4 logMessageUsageURL];
      goto LABEL_55;
    case 29:
      uint64_t v6 = [v4 spatialLookupURL];
      goto LABEL_55;
    case 30:
      uint64_t v6 = [v4 realtimeTrafficProbeURL];
      goto LABEL_55;
    case 31:
      uint64_t v6 = [v4 batchTrafficProbeURL];
      goto LABEL_55;
    case 32:
      uint64_t v6 = [v4 logMessageUsageV3URL];
      goto LABEL_55;
    case 33:
      uint64_t v6 = [v4 proactiveRoutingURL];
      goto LABEL_55;
    case 34:
      uint64_t v6 = [v4 backgroundDispatcherURL];
      goto LABEL_55;
    case 35:
      uint64_t v6 = [v4 bluePOIDispatcherURL];
      goto LABEL_55;
    case 36:
      uint64_t v6 = [v4 backgroundRevGeoURL];
      goto LABEL_55;
    case 37:
      uint64_t v6 = [v4 junctionImageServiceURL];
      goto LABEL_55;
    case 38:
      uint64_t v6 = [v4 wifiConnectionQualityProbeURL];
      goto LABEL_55;
    case 39:
      uint64_t v6 = [v4 authProxyURL];
      goto LABEL_55;
    case 40:
      uint64_t v6 = [v4 muninBaseURL];
      goto LABEL_55;
    case 41:
      uint64_t v6 = [v4 wifiQualityURL];
      goto LABEL_55;
    case 42:
      uint64_t v6 = [v4 feedbackSubmissionURL];
      goto LABEL_55;
    case 43:
      uint64_t v6 = [v4 feedbackLookupURL];
      goto LABEL_55;
    case 44:
      uint64_t v6 = [v4 analyticsCohortSessionURL];
      goto LABEL_55;
    case 45:
      uint64_t v6 = [v4 analyticsLongSessionURL];
      goto LABEL_55;
    case 46:
      uint64_t v6 = [v4 analyticsShortSessionURL];
      goto LABEL_55;
    case 47:
      uint64_t v6 = [v4 analyticsSessionlessURL];
      goto LABEL_55;
    case 48:
      uint64_t v6 = [v4 webModuleBaseURL];
      goto LABEL_55;
    case 49:
      uint64_t v6 = [v4 wifiQualityTileURL];
      goto LABEL_55;
    case 50:
      uint64_t v6 = [v4 tokenAuthenticationURL];
      goto LABEL_55;
    case 51:
      uint64_t v6 = [v4 authenticatedClientFeatureFlagURL];
      goto LABEL_55;
    case 52:
      uint64_t v6 = [v4 addressCorrectionTaggedLocationURL];
      goto LABEL_55;
    case 53:
      uint64_t v6 = [v4 enrichmentSubmissionURL];
      goto LABEL_55;
    case 54:
      uint64_t v6 = [v4 ugcLogDiscardURL];
      goto LABEL_55;
    case 55:
      uint64_t v6 = [v4 batchReverseGeocoderPlaceRequestURL];
      goto LABEL_55;
    case 56:
      uint64_t v6 = [v4 pressureProbeDataURL];
      goto LABEL_55;
    case 57:
      uint64_t v6 = [v4 poiBusynessActivityCollectionURL];
      goto LABEL_55;
    case 58:
      uint64_t v6 = [v4 rapWebBundleURL];
      goto LABEL_55;
    case 59:
      uint64_t v6 = [v4 networkSelectionHarvestURL];
      goto LABEL_55;
    case 60:
      uint64_t v6 = [v4 offlineDataBatchListURL];
      goto LABEL_55;
    case 61:
      uint64_t v6 = [v4 offlineDataSizeURL];
      goto LABEL_55;
    case 62:
      uint64_t v6 = [v4 offlineDataDownloadBaseURL];
      goto LABEL_55;
    case 63:
      uint64_t v6 = [v4 bcxDispatcherURL];
LABEL_55:
      v5 = (void *)v6;
      break;
    default:
      break;
  }

  return v5;
}

void sub_188E48568(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E489B4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E48AC0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<std::unordered_set<unsigned long long> ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void geo::codec::PBDataReaderObjC::~PBDataReaderObjC(geo::codec::PBDataReaderObjC *this)
{
  *(void *)this = &unk_1ED513A90;
  v1 = (void *)*((void *)this + 1);
  if (v1) {
}
  }

{
  void *v1;
  uint64_t vars8;

  *(void *)this = &unk_1ED513A90;
  v1 = (void *)*((void *)this + 1);
  if (v1) {

  }
  JUMPOUT(0x18C11F580);
}

geo::codec::PBDataReaderObjC *geo::codec::PBDataReaderObjC::PBDataReaderObjC(geo::codec::PBDataReaderObjC *this, const unsigned __int8 *a2, uint64_t a3)
{
  *(void *)this = &unk_1ED513A90;
  *((void *)this + 1) = 0;
  if (a2 && a3)
  {
    uint64_t v4 = [MEMORY[0x1E4F1C9B8] dataWithBytes:a2 length:a3];
    *((void *)this + 1) = [objc_alloc(MEMORY[0x1E4F94090]) initWithData:v4];
  }
  return this;
}

id GEOResourceCachesDirectory(void *a1)
{
  if (a1) {
    [a1 dataDirectoryFor:7];
  }
  else {
  v1 = +[GEOFilePaths pathFor:7];
  }

  return v1;
}

id GEORegionalResourcesDirectory(void *a1)
{
  if (a1) {
    [a1 dataDirectoryFor:8];
  }
  else {
  v1 = +[GEOFilePaths pathFor:8];
  }
  v2 = [v1 stringByAppendingPathComponent:@"RegionalResources"];

  return v2;
}

void sub_188E490A0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id GEOActiveTileGroupPath(void *a1)
{
  v1 = GEOResourceCachesDirectory(a1);
  v2 = [v1 stringByAppendingPathComponent:@"ActiveTileGroup.pbd"];

  return v2;
}

void sub_188E49240(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E4930C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void ___initKeyChangeListeners_block_invoke()
{
  v0 = [MEMORY[0x1E4F28EB8] defaultCenter];
  uint64_t v1 = [v0 addObserverForName:@"_GEOConfigKeysChangedNotification" object:0 queue:0 usingBlock:&__block_literal_global_132_0];
  v2 = (void *)unk_1EB29FF18;
  unk_1EB29FF18 = v1;

  id v3 = [MEMORY[0x1E4F28EB8] defaultCenter];
  uint64_t v4 = [v3 addObserverForName:@"GEOCountryConfigurationCountryCodeDidChangeNotification" object:0 queue:0 usingBlock:&__block_literal_global_137_0];
  v5 = (void *)unk_1EB29FF20;
  unk_1EB29FF20 = v4;

  global_queue = geo_get_global_queue();
  notify_register_dispatch("GEODaemonDidStartDarwinNotification", &dword_1EB29FEDC, global_queue, &__block_literal_global_140);

  uint64_t v7 = GEOReadStoredCountryCode();
  uint64_t v8 = (void *)qword_1EB29FEE8;
  qword_1EB29FEE8 = v7;

  uint64_t v9 = geo_isolater_create();
  uint64_t v10 = (void *)qword_1EB29FEF0;
  qword_1EB29FEF0 = v9;

  uint64_t v11 = [MEMORY[0x1E4F1CA60] dictionary];
  uint64_t v12 = (void *)qword_1EB29FEF8;
  qword_1EB29FEF8 = v11;

  uint64_t v13 = [MEMORY[0x1E4F1CA60] dictionary];
  uint64_t v14 = (void *)unk_1EB29FF00;
  unk_1EB29FF00 = v13;

  uint64_t v15 = [MEMORY[0x1E4F1CA60] dictionary];
  unsigned int v16 = (void *)qword_1EB29FF08;
  qword_1EB29FF08 = v15;

  uint64_t v17 = [MEMORY[0x1E4F1CA60] dictionary];
  id v18 = (void *)unk_1EB29FF10;
  unk_1EB29FF10 = v17;
}

void *GEOReadStoredCountryCode()
{
  v0 = _GEOReadStoredCountryCodeWithFallback();
  uint64_t v1 = v0;
  if (v0) {
    v0 = (void *)v0[2];
  }
  v2 = v0;

  return v2;
}

void sub_188E49CF8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id GEOResourcesPath(void *a1)
{
  uint64_t v1 = GEOResourceCachesDirectory(a1);
  v2 = [v1 stringByAppendingPathComponent:@"Resources"];

  return v2;
}

void sub_188E49E58(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E4A258(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188E4AE40(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E4AF0C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E4AFD8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E4B0A4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E4B170(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E4B23C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E4B308(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E4B3D4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E4B4A0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E4B56C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E4B638(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E4B704(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E4B7D0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E4B89C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E4B968(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E4BA34(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E4BB00(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E4BBCC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E4BC98(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E4BD64(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E4BE30(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E4BEFC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E4BFC8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E4C094(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E4C160(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E4C22C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E4C2F8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E4C3C4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E4C490(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E4C55C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E4C628(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E4C6F4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E4C7C0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E4C88C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E4C958(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E4CA24(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E4CAF0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E4CBBC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E4CC88(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E4CD54(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E4CE1C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E4CEE4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E4CFAC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDPublisherViewParametersReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 52);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 48)];
  uint64_t v7 = v6;
  uint64_t v8 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  unsigned int v13 = vaddv_s16((int16x4_t)(*(void *)&vshl_u16((uint16x4_t)(*(void *)&vdup_n_s16(*(unsigned __int8 *)(a1 + 64)) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFFFFFCFFFEFFFDLL) & 0xFF01FF01FF01FF01));
  while (2)
  {
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    uint64_t v16 = 1;
    switch(a3[v8])
    {
      case -4:
        ++v13;
        goto LABEL_8;
      case -3:
        char v9 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v15 = v11;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v17 = v13 > 1;
        char v18 = v17 & ~(_BYTE)v12 | v10;
        unsigned __int8 v19 = v17 | v12;
        char v61 = v18;
        char v62 = v19 | v18;
        if ((v19 | v9)) {
          long long v20 = 0;
        }
        else {
          long long v20 = a3;
        }
        char v63 = (v20 == 0) | v19;
        BOOL v64 = v19;
        long long v21 = (int *)MEMORY[0x1E4F940E8];
        long long v22 = (int *)MEMORY[0x1E4F940C8];
        long long v23 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v13;
LABEL_7:
        uint64_t v14 = v10;
LABEL_8:
        uint64_t v15 = v11;
        uint64_t v16 = v12;
LABEL_10:
        ++v8;
        uint64_t v10 = v14;
        uint64_t v11 = v15;
        uint64_t v12 = v16;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v21) >= *(void *)(v3 + *v7) || *(unsigned char *)(v3 + *v22)) {
      goto LABEL_84;
    }
    char v24 = 0;
    unsigned int v25 = 0;
    unint64_t v26 = 0;
    while (1)
    {
      uint64_t v27 = *v21;
      uint64_t v28 = *(void *)(v3 + v27);
      unint64_t v29 = v28 + 1;
      if (v28 == -1 || v29 > *(void *)(v3 + *v7)) {
        break;
      }
      char v30 = *(unsigned char *)(*(void *)(v3 + *v23) + v28);
      *(void *)(v3 + v27) = v29;
      v26 |= (unint64_t)(v30 & 0x7F) << v24;
      if ((v30 & 0x80) == 0) {
        goto LABEL_25;
      }
      v24 += 7;
      BOOL v31 = v25++ >= 9;
      if (v31)
      {
        unint64_t v26 = 0;
        int v32 = *(unsigned __int8 *)(v3 + *v22);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v22) = 1;
LABEL_25:
    int v32 = *(unsigned __int8 *)(v3 + *v22);
    if (*(unsigned char *)(v3 + *v22)) {
      unint64_t v26 = 0;
    }
LABEL_27:
    if (v32 || (v26 & 7) == 4)
    {
LABEL_84:
      int v59 = 1;
      goto LABEL_85;
    }
    unint64_t v34 = v26 >> 3;
    BOOL v35 = v64;
    if ((v63 & 1) == 0)
    {
      uint64_t v36 = v20;
      do
      {
        int v38 = *v36++;
        int v37 = v38;
        BOOL v35 = v38 != 0;
        if (v38) {
          BOOL v39 = v37 == v34;
        }
        else {
          BOOL v39 = 1;
        }
      }
      while (!v39);
    }
    switch((int)v34)
    {
      case 1:
        if (!v35) {
          goto LABEL_69;
        }
        if ((*(unsigned char *)(a1 + 64) & 4) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_102;
          }
          unsigned int v40 = objc_alloc_init(GEOPDMapsIdentifier);
          if (GEOPDMapsIdentifierReadAllFrom((uint64_t)v40, (void *)v3))
          {
            PBReaderRecallMark();
            uint64_t v41 = 24;
            goto LABEL_68;
          }
          goto LABEL_101;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_102;
        }
        char v54 = 32 * *(unsigned char *)(a1 + 64);
        goto LABEL_81;
      case 2:
        if ((v9 & 1) == 0) {
          goto LABEL_69;
        }
        char v45 = 0;
        unsigned int v46 = 0;
        uint64_t v47 = 0;
        *(unsigned char *)(a1 + 64) |= 1u;
        while (2)
        {
          uint64_t v48 = *v21;
          uint64_t v49 = *(void *)(v3 + v48);
          unint64_t v50 = v49 + 1;
          if (v49 == -1 || v50 > *(void *)(v3 + *v7))
          {
            *(unsigned char *)(v3 + *v22) = 1;
          }
          else
          {
            char v51 = *(unsigned char *)(*(void *)(v3 + *v23) + v49);
            *(void *)(v3 + v48) = v50;
            v47 |= (unint64_t)(v51 & 0x7F) << v45;
            if (v51 < 0)
            {
              v45 += 7;
              BOOL v31 = v46++ >= 9;
              if (v31)
              {
                LODWORD(v47) = 0;
                goto LABEL_74;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v22)) {
          LODWORD(v47) = 0;
        }
LABEL_74:
        *(_DWORD *)(a1 + 60) = v47;
        goto LABEL_83;
      case 3:
        if (!v35) {
          goto LABEL_69;
        }
        if ((*(unsigned char *)(a1 + 64) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_102;
          }
          char v54 = 16 * *(unsigned char *)(a1 + 64);
          goto LABEL_81;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_102;
        }
        unsigned int v40 = objc_alloc_init(GEOPDPublisherViewResultFilter);
        if (!GEOPDPublisherViewResultFilterReadAllFrom((uint64_t)v40, (void *)v3, v11 & 1)) {
          goto LABEL_101;
        }
        PBReaderRecallMark();
        uint64_t v41 = 32;
        goto LABEL_68;
      case 4:
        if (!v35) {
          goto LABEL_69;
        }
        if ((*(unsigned char *)(a1 + 64) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_102;
          }
          char v54 = 8 * *(unsigned char *)(a1 + 64);
LABEL_81:
          v8 += v54 >> 7;
LABEL_82:
          long long v22 = (int *)MEMORY[0x1E4F940C8];
          uint64_t v7 = (int *)MEMORY[0x1E4F940E0];
          goto LABEL_83;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_102;
        }
        unsigned int v40 = objc_alloc_init(GEOPDViewportInfo);
        if (GEOPDViewportInfoReadAllFrom((uint64_t)v40, (void *)v3))
        {
          PBReaderRecallMark();
          uint64_t v41 = 40;
LABEL_68:
          unint64_t v52 = *(void **)(a1 + v41);
          *(void *)(a1 + v41) = v40;

          --v8;
          goto LABEL_82;
        }
LABEL_101:

LABEL_102:
        int v59 = 0;
        int v60 = &OBJC_IVAR___GEOMapDataSubscriptionDownloadGroup__completedSubscriptions;
        long long v22 = (int *)MEMORY[0x1E4F940C8];
LABEL_86:
        if (v61) {
LABEL_87:
        }
          *(unsigned char *)(a1 + v60[504]) |= 2u;
        if (v64 || (v59 & 1) == 0)
        {
          *(unsigned char *)(a1 + v60[504]) |= 4u;
          *(unsigned char *)(a1 + v60[504]) |= 8u;
          *(unsigned char *)(a1 + v60[504]) |= 0x10u;
        }
        else if (v20)
        {
          while (1)
          {
            int v55 = *v20++;
            char v56 = 4;
            switch(v55)
            {
              case 0:
                goto LABEL_95;
              case 1:
                goto LABEL_94;
              case 3:
                char v56 = 8;
                goto LABEL_94;
              case 4:
                char v56 = 16;
LABEL_94:
                *(unsigned char *)(a1 + v60[504]) |= v56;
                break;
              default:
                continue;
            }
          }
        }
LABEL_95:
        if (v59) {
          unint64_t v3 = *(unsigned char *)(v3 + *v22) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v64)
        {
          unsigned int v57 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      default:
        if ((v61 & 1) == 0 || (*(unsigned char *)(a1 + 64) & 2) != 0)
        {
LABEL_69:
          char v53 = PBReaderSkipValueWithTag();
          uint64_t v7 = (int *)MEMORY[0x1E4F940E0];
          long long v22 = (int *)MEMORY[0x1E4F940C8];
          if ((v53 & 1) == 0)
          {
            int v59 = 0;
LABEL_85:
            int v60 = &OBJC_IVAR___GEOMapDataSubscriptionDownloadGroup__completedSubscriptions;
            goto LABEL_86;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v42 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            unsigned int v43 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v42;
          }
          int v44 = PBUnknownFieldAdd();
          long long v22 = (int *)MEMORY[0x1E4F940C8];
          uint64_t v7 = (int *)MEMORY[0x1E4F940E0];
          if (!v44)
          {
            int v59 = 0;
            int v60 = &OBJC_IVAR___GEOMapDataSubscriptionDownloadGroup__completedSubscriptions;
            goto LABEL_87;
          }
        }
LABEL_83:
        if (!(v62 & 1 | (v8 != 0))) {
          goto LABEL_84;
        }
        continue;
    }
  }
}

void sub_188E4D7D4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E4DBA0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t MapsFeature_IsEnabled_HikingiOS()
{
  return GEOConfigGetBOOL(MapsFeaturesConfig_HikingiOSEnabled, (uint64_t)off_1E9111E38);
}

unint64_t GEOPDAmenitiesReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 44))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOPDAmenitiesReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = [v8 position];
  *(_DWORD *)(a1 + 44) = [v8 length];
  if (a3) {
    char v9 = (int *)&GEOPDAmenitiesReadAllFrom_recursiveTag;
  }
  else {
    char v9 = (int *)&GEOPDAmenitiesReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOPDAmenitiesReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOPDAmenitiesCallReadAllRecursiveWithoutSynchronized(a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_188E4DD4C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDAmenitiesReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 44);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 40)];
  char v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  int v12 = ((*(unsigned __int8 *)(a1 + 52) >> 1) & 1)
      + (*(unsigned char *)(a1 + 52) & 1)
      + ((*(unsigned __int8 *)(a1 + 52) >> 2) & 1);
  while (2)
  {
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    switch(a3[v8])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        char v7 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v16 = v12 != 0;
        int v17 = v16 & ~v11 | v9;
        int v18 = v16 | v11;
        if (((v16 | v11) | v7)) {
          unsigned __int8 v19 = 0;
        }
        else {
          unsigned __int8 v19 = a3;
        }
        BOOL v20 = v8 != 0;
        long long v21 = (int *)MEMORY[0x1E4F940E8];
        int v22 = 1;
        long long v23 = (int *)MEMORY[0x1E4F940C8];
        if (*(void *)(v3 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(v3 + *v6)) {
          goto LABEL_62;
        }
        char v48 = v17;
        int v49 = v20 | v18 | v17;
        char v24 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v12;
LABEL_7:
        uint64_t v13 = v9;
LABEL_8:
        uint64_t v14 = v10;
        uint64_t v15 = v11;
LABEL_10:
        ++v8;
        uint64_t v9 = v13;
        uint64_t v10 = v14;
        uint64_t v11 = v15;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(unsigned char *)(v3 + *v23)) {
      goto LABEL_60;
    }
    char v25 = 0;
    unsigned int v26 = 0;
    unint64_t v27 = 0;
    while (1)
    {
      uint64_t v28 = *v21;
      uint64_t v29 = *(void *)(v3 + v28);
      unint64_t v30 = v29 + 1;
      if (v29 == -1 || v30 > *(void *)(v3 + *v6)) {
        break;
      }
      char v31 = *(unsigned char *)(*(void *)(v3 + *v24) + v29);
      *(void *)(v3 + v28) = v30;
      v27 |= (unint64_t)(v31 & 0x7F) << v25;
      if ((v31 & 0x80) == 0) {
        goto LABEL_25;
      }
      v25 += 7;
      if (v26++ >= 9)
      {
        unint64_t v27 = 0;
        int v33 = *(unsigned __int8 *)(v3 + *v23);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v23) = 1;
LABEL_25:
    int v33 = *(unsigned __int8 *)(v3 + *v23);
    if (*(unsigned char *)(v3 + *v23)) {
      unint64_t v27 = 0;
    }
LABEL_27:
    if (v33 || (v27 & 7) == 4)
    {
LABEL_60:
      int v22 = 1;
      goto LABEL_61;
    }
    unint64_t v35 = v27 >> 3;
    BOOL v36 = v18;
    if (!((v19 == 0) | v18 & 1))
    {
      int v37 = v19;
      do
      {
        int v39 = *v37++;
        int v38 = v39;
        BOOL v36 = v39 != 0;
        if (v39) {
          BOOL v40 = v38 == v35;
        }
        else {
          BOOL v40 = 1;
        }
      }
      while (!v40);
    }
    if (v35 == 2) {
      break;
    }
    if (v35 == 1)
    {
      if (!v36 || (*(unsigned char *)(a1 + 52) & 4) != 0) {
        goto LABEL_58;
      }
      if ((PBReaderPlaceMark() & 1) == 0) {
        goto LABEL_80;
      }
      uint64_t v41 = objc_alloc_init(GEOPDAmenityValue);
      if (!GEOPDAmenityValueReadAllFrom((uint64_t)v41, (void *)v3, v10 & 1)) {
        goto LABEL_79;
      }
      PBReaderRecallMark();
      -[GEOPDAmenities _addNoFlagsAmenity:](a1, v41);
      goto LABEL_50;
    }
    if (v48 & 1) == 0 || (*(unsigned char *)(a1 + 52)) {
      goto LABEL_58;
    }
    if (!*(void *)(a1 + 16))
    {
      id v42 = objc_alloc_init(MEMORY[0x1E4F940B0]);
      unsigned int v43 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v42;
    }
    int v22 = PBUnknownFieldAdd();
    long long v23 = (int *)MEMORY[0x1E4F940C8];
    if (!v22) {
      goto LABEL_63;
    }
LABEL_56:
    if ((v49 & 1) == 0) {
      goto LABEL_60;
    }
LABEL_59:
    if (*(void *)(v3 + *v21) >= *(void *)(v3 + *v6)) {
      goto LABEL_60;
    }
  }
  if (!v36 || (*(unsigned char *)(a1 + 52) & 2) != 0)
  {
LABEL_58:
    int v22 = PBReaderSkipValueWithTag();
    long long v23 = (int *)MEMORY[0x1E4F940C8];
    if ((v22 & v49 & 1) == 0) {
      goto LABEL_61;
    }
    goto LABEL_59;
  }
  if ((PBReaderPlaceMark() & 1) == 0) {
    goto LABEL_80;
  }
  uint64_t v41 = objc_alloc_init(GEOPDAmenityValue);
  if (GEOPDAmenityValueReadAllFrom((uint64_t)v41, (void *)v3, v10 & 1))
  {
    PBReaderRecallMark();
    -[GEOPDAmenities _addNoFlagsAmenityV2:](a1, v41);
LABEL_50:

    long long v23 = (int *)MEMORY[0x1E4F940C8];
    goto LABEL_56;
  }
LABEL_79:

LABEL_80:
  int v22 = 0;
  long long v23 = (int *)MEMORY[0x1E4F940C8];
LABEL_61:
  LOBYTE(v17) = v48;
LABEL_62:
  if (v17) {
LABEL_63:
  }
    *(unsigned char *)(a1 + 52) |= 1u;
  if (v18 & 1 | ((v22 & 1) == 0))
  {
    *(unsigned char *)(a1 + 52) |= 4u;
    *(unsigned char *)(a1 + 52) |= 2u;
    goto LABEL_73;
  }
  if (v19)
  {
    while (2)
    {
      while (1)
      {
        int v45 = *v19++;
        int v44 = v45;
        if (v45 == 1) {
          break;
        }
        if (v44 == 2) {
          goto LABEL_72;
        }
        if (!v44) {
          goto LABEL_73;
        }
      }
      LOBYTE(v44) = 4;
LABEL_72:
      *(unsigned char *)(a1 + 52) |= v44;
      continue;
    }
  }
LABEL_73:
  if (v22)
  {
    unint64_t v3 = *(unsigned char *)(v3 + *v23) == 0;
    if ((v18 & 1) == 0) {
      return v3;
    }
LABEL_77:
    unsigned int v46 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  else
  {
    unint64_t v3 = 0;
    if (v18) {
      goto LABEL_77;
    }
  }
  return v3;
}

void sub_188E4E3E8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E4EFDC(_Unwind_Exception *exception_object)
{
}

uint64_t GEOErrorToCounterInfoResult(void *a1)
{
  id v1 = a1;
  v2 = v1;
  if (!v1)
  {
LABEL_6:
    unsigned __int8 v7 = 0;
    goto LABEL_20;
  }
  unint64_t v3 = [v1 domain];
  uint64_t v4 = GEOErrorDomain();
  int v5 = [v3 isEqualToString:v4];

  if (v5)
  {
    uint64_t v6 = [v2 code];
    if (v6 > -4)
    {
      if (v6 == -3)
      {
        unsigned __int8 v7 = 3;
        goto LABEL_20;
      }
      if (v6 == -2)
      {
        unsigned __int8 v7 = 4;
        goto LABEL_20;
      }
    }
    else
    {
      if (v6 == -19)
      {
        unsigned __int8 v7 = 2;
        goto LABEL_20;
      }
      if (v6 == -8) {
        goto LABEL_6;
      }
    }
    unsigned __int8 v7 = 1;
    goto LABEL_20;
  }
  uint64_t v8 = [v2 domain];
  int v9 = [v8 isEqualToString:*MEMORY[0x1E4F289A0]];

  unsigned __int8 v7 = 1;
  if (v9)
  {
    uint64_t v10 = [v2 code];
    if (v10 == -1001) {
      char v11 = 2;
    }
    else {
      char v11 = 1;
    }
    if (v10 == -999) {
      unsigned __int8 v7 = 4;
    }
    else {
      unsigned __int8 v7 = v11;
    }
  }
LABEL_20:

  return v7;
}

void sub_188E4FFE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_188E50EA0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id GEOGetNetworkRequestLog()
{
  if (qword_1EB29F568 != -1) {
    dispatch_once(&qword_1EB29F568, &__block_literal_global_12);
  }
  v0 = (void *)_MergedGlobals_186;

  return v0;
}

uint64_t GEORequestCounterNWActivityDomainForAppId(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    if ([v1 isEqualToString:@"com.apple.Maps"])
    {
      uint64_t v2 = 27;
    }
    else if ([v1 hasPrefix:@"com.apple."])
    {
      uint64_t v2 = 28;
    }
    else
    {
      uint64_t v2 = 29;
    }
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

uint64_t GEODataRequestKindToNWActivityLabel(uint64_t a1)
{
  uint64_t result = 0;
  if ((int)a1 > 1791)
  {
    if ((int)a1 <= 2816)
    {
      if (a1 != 1792)
      {
        unsigned int v3 = 20;
        if (a1 == 2816) {
          unsigned int v5 = 41;
        }
        else {
          unsigned int v5 = 0;
        }
        BOOL v6 = a1 == 2560;
        goto LABEL_21;
      }
      goto LABEL_27;
    }
    switch((int)a1)
    {
      case 2848:
      case 2849:
        uint64_t result = 40;
        break;
      case 2850:
        uint64_t result = 36;
        break;
      case 2851:
      case 2852:
      case 2854:
      case 2855:
        return result;
      case 2853:
        uint64_t result = 41;
        break;
      case 2856:
        uint64_t result = 48;
        break;
      case 2857:
        uint64_t result = 54;
        break;
      case 2858:
        uint64_t result = 53;
        break;
      default:
        if (a1 == 2817) {
          uint64_t result = 41;
        }
        else {
          uint64_t result = 0;
        }
        break;
    }
  }
  else
  {
    if ((int)a1 <= 255)
    {
      switch((int)a1)
      {
        case 1:
          uint64_t result = 42;
          break;
        case 2:
          uint64_t result = 38;
          break;
        case 3:
          uint64_t result = 37;
          break;
        case 4:
          uint64_t result = 43;
          break;
        case 5:
          uint64_t result = 39;
          break;
        case 6:
          uint64_t result = 44;
          break;
        default:
          return result;
      }
      return result;
    }
    if ((int)a1 <= 672)
    {
      unsigned int v3 = 30;
      if (a1 == 672) {
        int v4 = 22;
      }
      else {
        int v4 = 0;
      }
      if (a1 == 512) {
        unsigned int v5 = 21;
      }
      else {
        unsigned int v5 = v4;
      }
      BOOL v6 = a1 == 256;
LABEL_21:
      if (v6) {
        return v3;
      }
      else {
        return v5;
      }
    }
    if (a1 == 673) {
      return 23;
    }
    if (a1 == 768 || a1 == 1280)
    {
LABEL_27:
      if ((HIDWORD(a1) - 1) >= 0x35) {
        return 0;
      }
      else {
        return dword_18A62D178[HIDWORD(a1) - 1];
      }
    }
  }
  return result;
}

id GEOGetServiceRequesterLog()
{
  if (qword_1EB2A06E0 != -1) {
    dispatch_once(&qword_1EB2A06E0, &__block_literal_global_155_0);
  }
  v0 = (void *)_MergedGlobals_330;

  return v0;
}

void _GEORequestResponseLogResponse(void *a1, void *a2, void *a3)
{
  unsigned int v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if ((GEOConfigGetBOOL(GeoServicesConfig_MapsRequestResponseLoggingPersisted, (uint64_t)off_1E9113ED8) & 1) != 0
    || os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = _GEORequestResponseLogQueue();
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = ___GEORequestResponseLogResponse_block_invoke;
    block[3] = &unk_1E53D99F0;
    id v10 = v7;
    char v11 = v5;
    id v12 = v6;
    dispatch_async(v8, block);
  }
}

uint64_t shouldCountRequest(unint64_t a1, int a2)
{
  uint64_t result = 0;
  if ((int)a1 > 767)
  {
    if (a1 == 768 || a1 == 1792)
    {
      unint64_t v4 = HIDWORD(a1);
      if (((1 << v4) & 0x1004108000880A94) != 0) {
        BOOL v5 = a2 == 1;
      }
      else {
        BOOL v5 = ((1 << v4) & 0x1402) != 0;
      }
      return v4 <= 0x3C && v5;
    }
    else if (a1 == 2860)
    {
      return 1;
    }
  }
  else
  {
    if ((a1 - 672) < 2) {
      return a2 == 1;
    }
    if (a1 == 512) {
      return 1;
    }
  }
  return result;
}

__CFString *GEOErrorDomain()
{
  return @"GEOErrorDomain";
}

void _GEOConfigRegisterStateCaptureFunctions(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock_with_options();
  if (a1)
  {
    unint64_t v4 = (void *)qword_1EB2A07B0;
    if (!qword_1EB2A07B0)
    {
      uint64_t v5 = [MEMORY[0x1E4F28F50] pointerArrayWithOptions:258];
      id v6 = (void *)qword_1EB2A07B0;
      qword_1EB2A07B0 = v5;

      unint64_t v4 = (void *)qword_1EB2A07B0;
    }
    [v4 addPointer:a1];
  }
  if (a2)
  {
    id v7 = (void *)qword_1EB2A07B8;
    if (!qword_1EB2A07B8)
    {
      uint64_t v8 = [MEMORY[0x1E4F28F50] pointerArrayWithOptions:258];
      int v9 = (void *)qword_1EB2A07B8;
      qword_1EB2A07B8 = v8;

      id v7 = (void *)qword_1EB2A07B8;
    }
    [v7 addPointer:a2];
  }

  os_unfair_lock_unlock((os_unfair_lock_t)&_MergedGlobals_337);
}

unint64_t GEOPublisherAttributionManifestIndexReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 40));
  id v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 36);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 32)];
  char v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  int v10 = ((*(unsigned __int8 *)(a1 + 44) >> 1) & 1) + (*(unsigned char *)(a1 + 44) & 1);
  while (1)
  {
    unsigned int v11 = a3[v9];
    if (v11 >= 0xFFFFFFFE)
    {
      char v7 = 1;
      goto LABEL_9;
    }
    if (v11 != -3) {
      break;
    }
    char v8 = 1;
LABEL_9:
    ++v9;
  }
  if (v11)
  {
    ++v10;
    goto LABEL_9;
  }
  int v12 = v7 & 1 | v10;
  BOOL v13 = v9 != 0;
  BOOL v14 = v12 != 0;
  BOOL v15 = v14 | v8;
  if (v12) {
    BOOL v13 = 1;
  }
  if (v15) {
    BOOL v16 = 0;
  }
  else {
    BOOL v16 = a3;
  }
  BOOL v17 = v13;
  BOOL v18 = v16 == 0;
  if (v12) {
    BOOL v18 = 1;
  }
  BOOL v64 = v18;
  unsigned __int8 v19 = (int *)MEMORY[0x1E4F940E8];
  BOOL v20 = (int *)MEMORY[0x1E4F940C8];
  long long v21 = &OBJC_IVAR___GEONonTiledAssets__flags;
  int v22 = (int *)MEMORY[0x1E4F940B8];
  BOOL v62 = v13;
  while (2)
  {
    if (*(void *)(v3 + *v19) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v20)) {
      goto LABEL_89;
    }
    char v23 = 0;
    unsigned int v24 = 0;
    unint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = *v19;
      unint64_t v27 = *(void *)(v3 + v26);
      if (v27 == -1 || v27 >= *(void *)(v3 + *v6)) {
        break;
      }
      char v28 = *(unsigned char *)(*(void *)(v3 + *v22) + v27);
      *(void *)(v3 + v26) = v27 + 1;
      v25 |= (unint64_t)(v28 & 0x7F) << v23;
      if ((v28 & 0x80) == 0) {
        goto LABEL_28;
      }
      v23 += 7;
      BOOL v29 = v24++ >= 9;
      if (v29)
      {
        unint64_t v25 = 0;
        int v30 = *(unsigned __int8 *)(v3 + *v20);
        goto LABEL_30;
      }
    }
    *(unsigned char *)(v3 + *v20) = 1;
LABEL_28:
    int v30 = *(unsigned __int8 *)(v3 + *v20);
    if (*(unsigned char *)(v3 + *v20)) {
      unint64_t v25 = 0;
    }
LABEL_30:
    if (v30 || (v25 & 7) == 4)
    {
LABEL_89:
      if (v14)
      {
        char v54 = 1;
        goto LABEL_100;
      }
      if (v16)
      {
        do
        {
          while (1)
          {
            int v56 = *v16++;
            int v55 = v56;
            if (v56 != 1 && v55 != 2) {
              break;
            }
            *(unsigned char *)(a1 + v21[263]) |= v55;
          }
        }
        while (v55);
      }
LABEL_101:
      unint64_t v3 = *(unsigned char *)(v3 + *v20) == 0;
      if (!v14) {
        return v3;
      }
      goto LABEL_102;
    }
    unint64_t v32 = v25 >> 3;
    BOOL v33 = v14;
    if (!v64)
    {
      unint64_t v34 = v16;
      do
      {
        int v36 = *v34++;
        int v35 = v36;
        BOOL v33 = v36 != 0;
        if (v36) {
          BOOL v37 = v35 == v32;
        }
        else {
          BOOL v37 = 1;
        }
      }
      while (!v37);
    }
    if (v32 != 2)
    {
      if (v32 == 1)
      {
        if (v33 && (*(unsigned char *)(a1 + v21[263]) & 1) == 0)
        {
          int v38 = PBReaderReadString();
          if (v38) {
            -[GEOPublisherAttributionManifestIndex _addNoFlagsPublisherAttributionFiles:](a1, v38);
          }

          BOOL v17 = v62;
          goto LABEL_88;
        }
LABEL_87:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_99;
        }
      }
      else if (!PBReaderSkipValueWithTag())
      {
        goto LABEL_99;
      }
LABEL_88:
      if (!v17) {
        goto LABEL_89;
      }
      continue;
    }
    break;
  }
  if (!v33 || (*(unsigned char *)(a1 + v21[263]) & 2) != 0) {
    goto LABEL_87;
  }
  if (!PBReaderPlaceMark()) {
    goto LABEL_99;
  }
  if (*(void *)(v3 + *v19) < *(void *)(v3 + *v6))
  {
    char v60 = 0;
    char v61 = 0;
    uint64_t v59 = 0;
    char v63 = 0;
    do
    {
      if (*(unsigned char *)(v3 + *v20)) {
        break;
      }
      char v39 = 0;
      unsigned int v40 = 0;
      unint64_t v41 = 0;
      while (1)
      {
        uint64_t v42 = *v19;
        unint64_t v43 = *(void *)(v3 + v42);
        if (v43 == -1 || v43 >= *(void *)(v3 + *v6)) {
          break;
        }
        char v44 = *(unsigned char *)(*(void *)(v3 + *v22) + v43);
        *(void *)(v3 + v42) = v43 + 1;
        v41 |= (unint64_t)(v44 & 0x7F) << v39;
        if ((v44 & 0x80) == 0) {
          goto LABEL_62;
        }
        v39 += 7;
        if (v40++ > 8) {
          goto LABEL_74;
        }
      }
      *(unsigned char *)(v3 + *v20) = 1;
LABEL_62:
      if (*(unsigned char *)(v3 + *v20)) {
        unint64_t v41 = 0;
      }
      if ((v41 >> 3) == 1)
      {
        PBReaderReadString();
        v53 = BOOL v52 = v14;

        char v61 = 1;
        char v63 = (void *)v53;
        BOOL v14 = v52;
        BOOL v17 = v62;
        continue;
      }
      if ((v41 >> 3) == 2)
      {
        char v46 = 0;
        unsigned int v47 = 0;
        uint64_t v48 = 0;
        while (1)
        {
          uint64_t v49 = *v19;
          unint64_t v50 = *(void *)(v3 + v49);
          if (v50 == -1 || v50 >= *(void *)(v3 + *v6)) {
            break;
          }
          char v51 = *(unsigned char *)(*(void *)(v3 + *v22) + v50);
          *(void *)(v3 + v49) = v50 + 1;
          v48 |= (unint64_t)(v51 & 0x7F) << v46;
          if ((v51 & 0x80) == 0) {
            goto LABEL_77;
          }
          v46 += 7;
          BOOL v29 = v47++ >= 9;
          if (v29)
          {
            uint64_t v59 = 0;
            goto LABEL_80;
          }
        }
        *(unsigned char *)(v3 + *v20) = 1;
LABEL_77:
        if (*(unsigned char *)(v3 + *v20)) {
          uint64_t v48 = 0;
        }
        uint64_t v59 = v48;
LABEL_80:
        char v60 = 1;
        continue;
      }
LABEL_74:
      if (!PBReaderSkipValueWithTag()) {
        goto LABEL_98;
      }
    }
    while (*(void *)(v3 + *v19) < *(void *)(v3 + *v6));
    if ((v61 & 1) == 0 || (v60 & 1) == 0) {
      goto LABEL_98;
    }
    -[GEOPublisherAttributionManifestIndex _setNoFlagsPublisherToFileIndexValue:forKey:](a1, v59, v63);
    PBReaderRecallMark();

    long long v21 = &OBJC_IVAR___GEONonTiledAssets__flags;
    goto LABEL_88;
  }
  char v63 = 0;
LABEL_98:

LABEL_99:
  char v54 = 0;
LABEL_100:
  *(unsigned char *)(a1 + v21[263]) |= 1u;
  *(unsigned char *)(a1 + v21[263]) |= 2u;
  if (v54) {
    goto LABEL_101;
  }
  unint64_t v3 = 0;
  if (v14)
  {
LABEL_102:
    unsigned int v57 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  return v3;
}

void GEOConfigGetPropertiesForKey(int a1, uint64_t a2, void *a3)
{
  uint64_t v5 = a3;
  MetadataStruct = (void *)_getMetadataStruct(a1, a2);
  if (MetadataStruct)
  {
    uint64_t v7 = MetadataStruct[1];
    uint64_t v8 = MetadataStruct[2];
    uint64_t v9 = MetadataStruct[3];
    (*(void (**)(void))(MetadataStruct[4] + 16))();
    id v11 = (id)objc_claimAutoreleasedReturnValue();
    v5[2](v5, v7, v8, v9, v11);
  }
  else
  {
    int v10 = j__GEOGetUserDefaultsLog();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_188D96000, v10, OS_LOG_TYPE_ERROR, "tried to get properties for invalid config key", buf, 2u);
    }

    v5[2](v5, @"__invalid__", 0, 0, &__block_literal_global_119);
  }
}

void __GEODefaultsKeyStringForConfigKey_block_invoke(uint64_t a1, void *a2)
{
}

void sub_188E556DC(_Unwind_Exception *a1)
{
}

void sub_188E5575C(_Unwind_Exception *a1)
{
}

uint64_t _GEOTileResponseIsCacheable(unsigned __int8 *a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = *a1;
  uint64_t v5 = [v3 objectForKeyedSubscript:@"TileIsCacheable"];
  objc_opt_class();
  int v6 = objc_opt_isKindOfClass() ^ 1;
  uint64_t v7 = v6 & (v4 < 0x40);
  if ((v6 & 1) == 0 && v4 <= 0x3F) {
    uint64_t v7 = [v5 BOOLValue];
  }

  return v7;
}

BOOL _GEOTileResponseIsAllowable(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a1;
  id v10 = a2;
  id v11 = a3;
  id v12 = a4;
  id v13 = a5;
  BOOL v14 = ([v9 isDisputedBordersAllowlistedForCountry:v10 region:v11] & 1) == 0
     && ![v9 isDisputedBordersAllowlistedForCountry:v12 region:v13]
     || (v10 == v12 || [v10 isEqualToString:v12])
     && (v11 == v13 || [v11 isEqualToString:v13]);

  return v14;
}

void _remove(void *a1, void *a2)
{
  id v3 = a1;
  if (*((void **)v3 + 1) == a2) {
    *((void *)v3 + 1) = a2[2];
  }
  if (*((void **)v3 + 2) == a2) {
    *((void *)v3 + 2) = a2[3];
  }
  uint64_t v5 = a2[2];
  uint64_t v4 = a2[3];
  if (v4) {
    *(void *)(v4 + 16) = v5;
  }
  if (v5) {
    *(void *)(v5 + 24) = v4;
  }
  int v6 = v3;
  [*((id *)v3 + 3) removeObjectForKey:a2];
  free(a2);
  --v6[4];
  ++v6[6];
}

void sub_188E55D28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id GEOGetDataSessionURLLog()
{
  if (qword_1EB29FB90 != -1) {
    dispatch_once(&qword_1EB29FB90, &__block_literal_global_87);
  }
  v0 = (void *)_MergedGlobals_237;

  return v0;
}

void sub_188E577DC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<_GEOTileKey,std::__list_iterator<CacheItem,void *>>,std::__unordered_map_hasher<_GEOTileKey,std::__hash_value_type<_GEOTileKey,std::__list_iterator<CacheItem,void *>>,hashkey,eqkey,true>,std::__unordered_map_equal<_GEOTileKey,std::__hash_value_type<_GEOTileKey,std::__list_iterator<CacheItem,void *>>,eqkey,hashkey,true>,std::allocator<std::__hash_value_type<_GEOTileKey,std::__list_iterator<CacheItem,void *>>>>::find<_GEOTileKey>(void *a1, void *a2)
{
  unint64_t v4 = GEOTileKeyHash(a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v7 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t i = *(void **)(*a1 + 8 * v7);
  if (i)
  {
    for (uint64_t i = (void *)*i; i; uint64_t i = (void *)*i)
    {
      unint64_t v9 = i[1];
      if (v9 == v4)
      {
        if (i[2] == *a2 && i[3] == a2[1]) {
          return i;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v9 >= *(void *)&v5) {
            v9 %= *(void *)&v5;
          }
        }
        else
        {
          v9 &= *(void *)&v5 - 1;
        }
        if (v9 != v7) {
          return 0;
        }
      }
    }
  }
  return i;
}

unint64_t GEOTileKeyHash(void *a1)
{
  unint64_t v1 = ~*a1 + (*a1 << 18);
  unint64_t v2 = 65 * ((21 * (v1 ^ (v1 >> 31))) ^ ((21 * (v1 ^ (v1 >> 31))) >> 11));
  unint64_t v3 = 21 * ((~a1[1] + (a1[1] << 18)) ^ ((~a1[1] + (a1[1] << 18)) >> 31));
  return v2 ^ (((65 * (v3 ^ (v3 >> 11))) ^ v2) >> 22) ^ (65 * (v3 ^ (v3 >> 11)));
}

uint64_t GEOTileKeyStyle(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = 0;
  LODWORD(v3) = 47;
  switch(*(unsigned char *)a1 & 0x7F)
  {
    case 2:
      LODWORD(v3) = *(unsigned __int16 *)(a1 + 13) >> 2;
      goto LABEL_12;
    case 3:
      unint64_t v3 = ((*(unsigned int *)(a1 + 9) | ((unint64_t)(*(unsigned __int16 *)(a1 + 13) | (*(unsigned __int8 *)(a1 + 15) << 16)) << 32)) >> 26) & 0x3FFF;
      goto LABEL_12;
    case 4:
      LODWORD(v3) = *(_DWORD *)(a1 + 8) & 0x3FFF;
      goto LABEL_12;
    case 9:
      LODWORD(v3) = *(unsigned __int8 *)(a1 + 10);
      goto LABEL_12;
    case 0xA:
      goto LABEL_12;
    case 0xB:
      LODWORD(v3) = 69;
      goto LABEL_12;
    case 0xC:
      LODWORD(v3) = ((*(unsigned __int16 *)(a1 + 9) | (*(unsigned __int8 *)(a1 + 11) << 16)) >> 6) & 0x3FFF;
      goto LABEL_12;
    case 0xD:
    case 0xF:
      LODWORD(v3) = 71;
      goto LABEL_12;
    case 0xE:
      LODWORD(v3) = 70;
      goto LABEL_12;
    case 0x13:
      LODWORD(v3) = 87;
      goto LABEL_12;
    case 0x14:
      LODWORD(v3) = 90;
LABEL_12:
      *a2 = v3;
      uint64_t v2 = 1;
      break;
    default:
      return v2;
  }
  return v2;
}

void sub_188E57AFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__hash_table<google::protobuf::Descriptor const*,std::hash<google::protobuf::Descriptor const*>,std::equal_to<google::protobuf::Descriptor const*>,std::allocator<google::protobuf::Descriptor const*>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(void *)&v4)
  {
    if (prime >= *(void *)&v4) {
      return;
    }
    unint64_t v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      unint64_t v11 = std::__next_prime(v11);
    }
    else
    {
      uint64_t v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2) {
        unint64_t v11 = v13;
      }
    }
    if (prime <= v11) {
      size_t prime = v11;
    }
    if (prime >= *(void *)&v4) {
      return;
    }
    if (!prime)
    {
      BOOL v16 = *(void **)a1;
      *(void *)a1 = 0;
      if (v16) {
        operator delete(v16);
      }
      *(void *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  int8x8_t v5 = operator new(8 * prime);
  uint8x8_t v6 = *(void **)a1;
  *(void *)a1 = v5;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = 0;
  *(void *)(a1 + 8) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  uint64_t v8 = *(void **)(a1 + 16);
  if (v8)
  {
    size_t v9 = v8[1];
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime) {
        v9 %= prime;
      }
    }
    else
    {
      v9 &= prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v9) = a1 + 16;
    BOOL v14 = (void *)*v8;
    if (*v8)
    {
      do
      {
        size_t v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime) {
            v15 %= prime;
          }
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(void *)(*(void *)a1 + 8 * v15))
          {
            *(void *)(*(void *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          *uint64_t v8 = *v14;
          *BOOL v14 = **(void **)(*(void *)a1 + 8 * v15);
          **(void **)(*(void *)a1 + 8 * v15) = v14;
          BOOL v14 = v8;
        }
        size_t v15 = v9;
LABEL_31:
        uint64_t v8 = v14;
        BOOL v14 = (void *)*v14;
        size_t v9 = v15;
      }
      while (v14);
    }
  }
}

void setManifestConfiguration(void *a1, void *a2)
{
  id v5 = a1;
  id v3 = a2;
  int8x8_t v4 = v3;
  if (v3 && ([v3 isDefaultConfiguration] & 1) == 0) {
    GEOEncodeXPCValue(v5, "mcfg", v4, 0);
  }
}

void setLocale(void *a1, void *a2)
{
  xpc_object_t xdict = a1;
  id v3 = [a2 localeIdentifier];
  int8x8_t v4 = v3;
  if (v3) {
    xpc_dictionary_set_string(xdict, "lcl", (const char *)[v3 UTF8String]);
  }
}

void sub_188E58810(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t geo::BatchLoadHelper::BatchLoadHelper(uint64_t a1, long long **a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = malloc_type_malloc(0xB6DB6DB6DB6DB6DCLL * (((char *)a2[1] - (char *)*a2) >> 3), 0x100004052888210uLL);
  *(void *)(a1 + 8) = malloc_type_malloc(0x6DB6DB6DB6DB6DB7 * (((char *)a2[1] - (char *)*a2) >> 3), 0x100004077774924uLL);
  *(void *)(a1 + 16) = malloc_type_calloc(0x6DB6DB6DB6DB6DB7 * (((char *)a2[1] - (char *)*a2) >> 3), 0x10uLL, 0x1000040451B5BE8uLL);
  *(void *)(a1 + 24) = malloc_type_malloc(0x6DB6DB6DB6DB6DB8 * ((unint64_t)((char *)a2[1] - (char *)*a2) >> 3), 0x100004000313F17uLL);
  *(void *)(a1 + 32) = [[GEOTileKeyList alloc] initWithCapacity:0x6DB6DB6DB6DB6DB7 * (((char *)a2[1] - (char *)*a2) >> 3)];
  *(void *)(a1 + 40) = malloc_type_malloc(0x6DB6DB6DB6DB6DB8 * ((unint64_t)((char *)a2[1] - (char *)*a2) >> 3), 0x100004000313F17uLL);
  id v5 = *a2;
  int8x8_t v4 = a2[1];
  if (v5 != v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    do
    {
      long long v8 = *v5;
      long long v9 = v5[1];
      long long v10 = v5[2];
      uint64_t v15 = *((void *)v5 + 6);
      *(_OWORD *)BOOL v14 = v9;
      *(_OWORD *)&v14[16] = v10;
      long long v13 = v8;
      [*(id *)(a1 + 32) _addKeyToBack:&v13];
      *(_DWORD *)(*(void *)a1 + 4 * v7) = *(_DWORD *)v14;
      *(unsigned char *)(*(void *)(a1 + 8) + v7) = v14[4];
      if (v14[4]) {
        *(_OWORD *)(*(void *)(a1 + 16) + v6) = *(_OWORD *)&v14[8];
      }
      *(void *)(*(void *)(a1 + 24) + 8 * v7) = *(void *)&v14[24];
      uint64_t v11 = *(void *)(a1 + 40);
      if (v11) {
        *(void *)(v11 + 8 * v7) = v15;
      }
      ++v7;
      id v5 = (long long *)((char *)v5 + 56);
      v6 += 16;
    }
    while (v5 != v4);
  }
  return a1;
}

void sub_188E58A5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188E58B34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188E58F7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_188E594E4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void gloria::ShardPool::Close(gloria::ShardPool *this@<X0>, std::string *a2@<X8>)
{
  v10.__r_.__value_.__s.__data_[0] = 1;
  HIDWORD(v10.__r_.__value_.__r.__words[0]) = 0;
  v10.__r_.__value_.__l.__size_ = (std::string::size_type)&str_5;
  v10.__r_.__value_.__r.__words[2] = 0;
  gloria::Status::Status((uint64_t)a2, 0, (uint64_t)&v10);
  uint64_t v6 = *(char **)this;
  int8x8_t v4 = (char *)this + 8;
  id v5 = v6;
  if (v6 != v4)
  {
    do
    {
      gloria::Shard::Close((gloria::Shard *)(v5 + 40), &v10);
      if (LODWORD(v10.__r_.__value_.__l.__data_)) {
        gloria::Status::operator=(a2, (uint64_t)&v10);
      }
      if (v11 < 0) {
        operator delete((void *)v10.__r_.__value_.__l.__size_);
      }
      uint64_t v7 = (char *)*((void *)v5 + 1);
      if (v7)
      {
        do
        {
          long long v8 = v7;
          uint64_t v7 = *(char **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          long long v8 = (char *)*((void *)v5 + 2);
          BOOL v9 = *(void *)v8 == (void)v5;
          id v5 = v8;
        }
        while (!v9);
      }
      id v5 = v8;
    }
    while (v8 != v4);
  }
}

void sub_188E59664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 31) < 0) {
    operator delete(*(void **)(v15 + 8));
  }
  _Unwind_Resume(exception_object);
}

void gloria::Shard::Close(gloria::Shard *this@<X0>, std::string *a2@<X8>)
{
  LOBYTE(v8) = 1;
  HIDWORD(v8) = 0;
  __p = &str_5;
  uint64_t v10 = 0;
  gloria::Status::Status((uint64_t)a2, 0, (uint64_t)&v8);
  if (*(void *)this)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)this + 24))(&v8);
    if (*(void *)this) {
      (*(void (**)(void))(**(void **)this + 16))(*(void *)this);
    }
    *(void *)this = 0;
    if (v8) {
      gloria::Status::operator=(a2, (uint64_t)&v8);
    }
    if (v11 < 0) {
      operator delete(__p);
    }
  }
  uint64_t v4 = *((void *)this + 1);
  if (v4)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v4 + 24))(&v8);
    uint64_t v5 = *((void *)this + 1);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
    }
    *((void *)this + 1) = 0;
    if (v8 && LODWORD(a2->__r_.__value_.__l.__data_)) {
      gloria::Status::operator=(a2, (uint64_t)&v8);
    }
    if (v11 < 0) {
      operator delete(__p);
    }
  }
  uint64_t v6 = *((void *)this + 2);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v6 + 24))(&v8);
    uint64_t v7 = *((void *)this + 2);
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
    }
    *((void *)this + 2) = 0;
    if (v8 && LODWORD(a2->__r_.__value_.__l.__data_)) {
      gloria::Status::operator=(a2, (uint64_t)&v8);
    }
    if (v11 < 0) {
      operator delete(__p);
    }
  }
}

void sub_188E59888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 31) < 0) {
    operator delete(*(void **)(v15 + 8));
  }
  _Unwind_Resume(exception_object);
}

void gloria::MmapMemoryBuffer::~MmapMemoryBuffer(gloria::MmapMemoryBuffer *this)
{
  gloria::MmapMemoryBuffer::~MmapMemoryBuffer(this);

  JUMPOUT(0x18C11F580);
}

{
  *(void *)this = &unk_1ED5143F8;
  std::unique_ptr<gloria::MemoryMappedFile>::reset[abi:ne180100]((void ***)this + 8, 0);
  *(void *)this = &unk_1ED514478;
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
}

void **std::unique_ptr<gloria::MemoryMappedFile>::reset[abi:ne180100](void ***a1, void **a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    gloria::MemoryMappedFile::~MemoryMappedFile(result);
    JUMPOUT(0x18C11F580);
  }
  return result;
}

void gloria::MemoryMappedFile::~MemoryMappedFile(void **this)
{
  if (*((_DWORD *)this + 6) != -1)
  {
    gloria::MemoryMappedFile::UnMap((gloria::MemoryMappedFile *)this, (uint64_t)&v2);
    if (v4 < 0) {
      operator delete(__p);
    }
  }
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
}

void gloria::MmapMemoryBuffer::Close(gloria::MemoryMappedFile **this@<X0>, std::string *a2@<X8>)
{
}

void gloria::MemoryMappedFile::Close(gloria::MemoryMappedFile *this@<X0>, std::string *a2@<X8>)
{
  v4[0] = 1;
  int v5 = 0;
  __p = "could not unmap mmap file";
  uint64_t v7 = 25;
  gloria::Status::Status((uint64_t)a2, 7, (uint64_t)v4);
  if (*((_DWORD *)this + 6) != -1)
  {
    gloria::MemoryMappedFile::UnMap(this, (uint64_t)v4);
    gloria::Status::operator=(a2, (uint64_t)v4);
    if (v8 < 0) {
      operator delete(__p);
    }
  }
}

void sub_188E59AC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 31) < 0) {
    operator delete(*(void **)(v15 + 8));
  }
  _Unwind_Resume(exception_object);
}

void gloria::MemoryMappedFile::UnMap(gloria::MemoryMappedFile *this@<X0>, uint64_t a2@<X8>)
{
  if (*((_DWORD *)this + 14) == 1 && (int v4 = munlock(*(const void **)this, *((void *)this + 2))) != 0)
  {
    int v5 = v4;
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"munlock() failed to unlock file: ", 33);
    uint64_t v7 = (char *)this + 32;
    if (*((char *)this + 55) < 0) {
      uint64_t v7 = *(const char **)v7;
    }
    size_t v8 = strlen(v7);
    BOOL v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"; size_=", 8);
    uint64_t v10 = (void *)std::ostream::operator<<();
    char v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"; error=", 8);
    uint8x8_t v12 = __error();
    long long v13 = strerror(*v12);
    size_t v14 = strlen(v13);
    uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v13, v14);
    std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24)));
    uint64_t v16 = std::locale::use_facet(&v39, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
    std::locale::~locale(&v39);
    std::ostream::put();
    std::ostream::flush();
    std::to_string(&v36, v5);
    BOOL v17 = std::string::insert(&v36, 0, "could not munlock file, munlock error code: ");
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    int64_t v38 = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    LOBYTE(v39.__locale_) = 1;
    unsigned __int8 v19 = (void *)HIBYTE(v38);
    BOOL v20 = __p;
    if (v38 < 0) {
      BOOL v20 = (void **)__p[0];
    }
    HIDWORD(v39.__locale_) = 0;
    if (v38 < 0) {
      unsigned __int8 v19 = __p[1];
    }
  }
  else
  {
    int v21 = munmap(*(void **)this, *((void *)this + 2));
    if (!v21)
    {
      close(*((_DWORD *)this + 6));
      *(void *)this = 0;
      *((_DWORD *)this + 6) = -1;
      *((void *)this + 2) = -1;
      LOBYTE(v39.__locale_) = 1;
      HIDWORD(v39.__locale_) = 0;
      unsigned int v40 = "";
      unint64_t v41 = 0;
      gloria::Status::Status(a2, 0, (uint64_t)&v39);
      return;
    }
    int v22 = v21;
    char v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"munmap() failed to unmap file: ", 31);
    unsigned int v24 = (char *)this + 32;
    if (*((char *)this + 55) < 0) {
      unsigned int v24 = *(const char **)v24;
    }
    size_t v25 = strlen(v24);
    uint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"; size_=", 8);
    unint64_t v27 = (void *)std::ostream::operator<<();
    char v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"; error=", 8);
    BOOL v29 = __error();
    int v30 = strerror(*v29);
    size_t v31 = strlen(v30);
    unint64_t v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v30, v31);
    std::ios_base::getloc((const std::ios_base *)((char *)v32 + *(void *)(*v32 - 24)));
    BOOL v33 = std::locale::use_facet(&v39, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v33->__vftable[2].~facet_0)(v33, 10);
    std::locale::~locale(&v39);
    std::ostream::put();
    std::ostream::flush();
    std::to_string(&v36, v22);
    unint64_t v34 = std::string::insert(&v36, 0, "could not unmap file, unmap error code: ");
    long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    int64_t v38 = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    LOBYTE(v39.__locale_) = 1;
    unsigned __int8 v19 = (void *)HIBYTE(v38);
    BOOL v20 = __p;
    if (v38 < 0) {
      BOOL v20 = (void **)__p[0];
    }
    HIDWORD(v39.__locale_) = 0;
    if (v38 < 0) {
      unsigned __int8 v19 = __p[1];
    }
  }
  unsigned int v40 = (const char *)v20;
  unint64_t v41 = v19;
  gloria::Status::Status(a2, 7, (uint64_t)&v39);
  if (SHIBYTE(v38) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
}

void sub_188E59EDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::locale a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_188E5A2EC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E5A4AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t GEOPDCaptionedPhotoFilterReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 60))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOPDCaptionedPhotoFilterReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 56) = [v8 position];
  *(_DWORD *)(a1 + 60) = [v8 length];
  if (a3) {
    BOOL v9 = (int *)&GEOPDCaptionedPhotoFilterReadAllFrom_recursiveTag;
  }
  else {
    BOOL v9 = (int *)&GEOPDCaptionedPhotoFilterReadAllFrom_initialTag;
  }
  uint64_t Specified = GEOPDCaptionedPhotoFilterReadSpecified(a1, (uint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return Specified;
}

void sub_188E5A6B4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOPDCaptionedPhotoFilterReadSpecified(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 60);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 56)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  int v11 = ((*(unsigned __int8 *)(a1 + 68) >> 2) & 1)
      + (*(unsigned char *)(a1 + 68) & 1)
      + ((*(unsigned __int8 *)(a1 + 68) >> 1) & 1);
  while (2)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    switch(a3[v9])
    {
      case -4:
        ++v11;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_9;
      case 0:
        BOOL v14 = v11 != 0;
        char v15 = v14 & ~(_BYTE)v10 | v7;
        unsigned __int8 v16 = v14 | v10;
        char v50 = v15;
        char v51 = v16 | v15;
        if ((v16 | v8)) {
          BOOL v17 = 0;
        }
        else {
          BOOL v17 = a3;
        }
        long long v18 = (int *)MEMORY[0x1E4F940E8];
        char v52 = (v17 == 0) | v16;
        BOOL v53 = v16;
        unsigned __int8 v19 = (int *)MEMORY[0x1E4F940C8];
        BOOL v20 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v11;
LABEL_7:
        uint64_t v12 = v7;
LABEL_8:
        uint64_t v13 = v10;
LABEL_9:
        ++v9;
        uint64_t v7 = v12;
        uint64_t v10 = v13;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(void *)(v3 + *v18) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v19)) {
      goto LABEL_59;
    }
    char v21 = 0;
    unsigned int v22 = 0;
    unint64_t v23 = 0;
    while (1)
    {
      uint64_t v24 = *v18;
      uint64_t v25 = *(void *)(v3 + v24);
      unint64_t v26 = v25 + 1;
      if (v25 == -1 || v26 > *(void *)(v3 + *v6)) {
        break;
      }
      char v27 = *(unsigned char *)(*(void *)(v3 + *v20) + v25);
      *(void *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0) {
        goto LABEL_24;
      }
      v21 += 7;
      if (v22++ >= 9)
      {
        unint64_t v23 = 0;
        int v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_26;
      }
    }
    *(unsigned char *)(v3 + *v19) = 1;
LABEL_24:
    int v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(unsigned char *)(v3 + *v19)) {
      unint64_t v23 = 0;
    }
LABEL_26:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_59:
      int v48 = 1;
      goto LABEL_60;
    }
    unint64_t v31 = v23 >> 3;
    BOOL v32 = v53;
    if ((v52 & 1) == 0)
    {
      BOOL v33 = v17;
      do
      {
        int v35 = *v33++;
        int v34 = v35;
        BOOL v32 = v35 != 0;
        if (v35) {
          BOOL v36 = v34 == v31;
        }
        else {
          BOOL v36 = 1;
        }
      }
      while (!v36);
    }
    if (v31 != 2) {
      break;
    }
    if (!v32) {
      goto LABEL_53;
    }
    if ((*(unsigned char *)(a1 + 68) & 4) != 0)
    {
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        goto LABEL_80;
      }
      v9 += *(unsigned __int8 *)(a1 + 68) << 29 >> 31;
      goto LABEL_58;
    }
    uint64_t v37 = PBReaderReadString();
    int64_t v38 = *(void **)(a1 + 48);
    *(void *)(a1 + 48) = v37;

    unsigned __int8 v19 = (int *)MEMORY[0x1E4F940C8];
    --v9;
LABEL_54:
    if (!(v51 & 1 | (v9 != 0))) {
      goto LABEL_59;
    }
  }
  if (v31 != 1)
  {
    if ((v50 & 1) != 0 && (*(unsigned char *)(a1 + 68) & 1) == 0)
    {
      if (!*(void *)(a1 + 16))
      {
        id v39 = objc_alloc_init(MEMORY[0x1E4F940B0]);
        unsigned int v40 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v39;
      }
      int v41 = PBUnknownFieldAdd();
      unsigned __int8 v19 = (int *)MEMORY[0x1E4F940C8];
      if (!v41)
      {
        int v48 = 0;
        uint64_t v49 = &OBJC_IVAR___GEOXPCReply__error;
        goto LABEL_62;
      }
      goto LABEL_54;
    }
    goto LABEL_53;
  }
  if (!v32 || (*(unsigned char *)(a1 + 68) & 2) != 0)
  {
LABEL_53:
    char v42 = PBReaderSkipValueWithTag();
    unsigned __int8 v19 = (int *)MEMORY[0x1E4F940C8];
    if (v42) {
      goto LABEL_54;
    }
    int v48 = 0;
LABEL_60:
    uint64_t v49 = &OBJC_IVAR___GEOXPCReply__error;
    goto LABEL_61;
  }
  if (PBReaderPlaceMark())
  {
    -[GEOPDCaptionedPhotoFilter _reservePhotoSizeFilters:](a1, 1uLL);
    if (GEOPDPhotoSizeFilterValueReadAllFrom(*(void *)(a1 + 24) + 12 * *(void *)(a1 + 32), v3))
    {
      PBReaderRecallMark();
      ++*(void *)(a1 + 32);
LABEL_58:
      unsigned __int8 v19 = (int *)MEMORY[0x1E4F940C8];
      goto LABEL_54;
    }
  }
LABEL_80:
  int v48 = 0;
  uint64_t v49 = &OBJC_IVAR___GEOXPCReply__error;
  unsigned __int8 v19 = (int *)MEMORY[0x1E4F940C8];
LABEL_61:
  if ((v50 & 1) == 0) {
    goto LABEL_63;
  }
LABEL_62:
  *(unsigned char *)(a1 + v49[678]) |= 1u;
LABEL_63:
  if (v53 || (v48 & 1) == 0)
  {
    *(unsigned char *)(a1 + v49[678]) |= 2u;
    *(unsigned char *)(a1 + v49[678]) |= 4u;
    goto LABEL_73;
  }
  if (v17)
  {
    while (1)
    {
      int v45 = *v17++;
      int v44 = v45;
      if (v45 == 1) {
        break;
      }
      if (v44 == 2)
      {
        char v43 = 4;
LABEL_69:
        *(unsigned char *)(a1 + v49[678]) |= v43;
      }
      else if (!v44)
      {
        goto LABEL_73;
      }
    }
    char v43 = 2;
    goto LABEL_69;
  }
LABEL_73:
  if (v48) {
    uint64_t v3 = *(unsigned char *)(v3 + *v19) == 0;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v53)
  {
    char v46 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  return v3;
}

BOOL GEOPDAnnotatedItemListFilterReadAllFrom(void *a1, void *a2)
{
  uint64_t v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    int v4 = (int *)MEMORY[0x1E4F940E8];
    int v5 = (int *)MEMORY[0x1E4F940E0];
    uint64_t v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v3[*v6]) {
          break;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          if (v9++ >= 9)
          {
            unint64_t v10 = 0;
            int v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v16 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v16 || (v10 & 7) == 4) {
          break;
        }
        if ((v10 >> 3) == 1)
        {
          if (!PBReaderPlaceMark()) {
            goto LABEL_28;
          }
          -[GEOPDAnnotatedItemListFilter _reservePhotoSizeFilters:]((uint64_t)a1, 1uLL);
          if (!GEOPDPhotoSizeFilterValueReadAllFrom(a1[2] + 12 * a1[3], (uint64_t)v3)) {
            goto LABEL_28;
          }
          PBReaderRecallMark();
          ++a1[3];
        }
        else
        {
          if (!a1[1])
          {
            id v18 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            unsigned __int8 v19 = (void *)a1[1];
            a1[1] = v18;
          }
          if (!PBUnknownFieldAdd()) {
            goto LABEL_28;
          }
        }
      }
      while (*(void *)&v3[*v4] < *(void *)&v3[*v5]);
    }
    BOOL v20 = v3[*v6] == 0;
  }
  else
  {
LABEL_28:
    BOOL v20 = 0;
  }
  objc_sync_exit(v3);

  return v20;
}

void sub_188E5AE18(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDPhotoSizeFilterValueReadAllFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  int v4 = (int *)MEMORY[0x1E4F940E0];
  int v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (_DWORD *)(a1 + 4);
    char v8 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        uint64_t v12 = *v3;
        uint64_t v13 = *(void *)(a2 + v12);
        unint64_t v14 = v13 + 1;
        if (v13 == -1 || v14 > *(void *)(a2 + *v4)) {
          break;
        }
        char v15 = *(unsigned char *)(*(void *)(a2 + *v8) + v13);
        *(void *)(a2 + v12) = v14;
        v11 |= (unint64_t)(v15 & 0x7F) << v9;
        if ((v15 & 0x80) == 0) {
          goto LABEL_12;
        }
        v9 += 7;
        if (v10++ >= 9)
        {
          unint64_t v11 = 0;
          int v17 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v17 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v11 = 0;
      }
LABEL_14:
      if (v17 || (v11 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v11 >> 3) == 2) {
        break;
      }
      if ((v11 >> 3) == 1)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        *(unsigned char *)(a1 + 8) |= 2u;
        while (1)
        {
          uint64_t v22 = *v3;
          uint64_t v23 = *(void *)(a2 + v22);
          unint64_t v24 = v23 + 1;
          if (v23 == -1 || v24 > *(void *)(a2 + *v4))
          {
            char v27 = v7;
            goto LABEL_38;
          }
          char v25 = *(unsigned char *)(*(void *)(a2 + *v8) + v23);
          *(void *)(a2 + v22) = v24;
          v21 |= (unint64_t)(v25 & 0x7F) << v19;
          if ((v25 & 0x80) == 0) {
            break;
          }
          v19 += 7;
          BOOL v26 = v20++ > 8;
          if (v26)
          {
            LODWORD(v21) = 0;
            char v27 = v7;
            goto LABEL_41;
          }
        }
        char v27 = v7;
LABEL_39:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v21) = 0;
        }
LABEL_41:
        *char v27 = v21;
        goto LABEL_42;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_42:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v28 = 0;
    unsigned int v29 = 0;
    uint64_t v21 = 0;
    *(unsigned char *)(a1 + 8) |= 1u;
    while (1)
    {
      uint64_t v30 = *v3;
      uint64_t v31 = *(void *)(a2 + v30);
      unint64_t v32 = v31 + 1;
      if (v31 == -1 || v32 > *(void *)(a2 + *v4)) {
        break;
      }
      char v33 = *(unsigned char *)(*(void *)(a2 + *v8) + v31);
      *(void *)(a2 + v30) = v32;
      v21 |= (unint64_t)(v33 & 0x7F) << v28;
      if ((v33 & 0x80) == 0)
      {
        char v27 = (_DWORD *)a1;
        goto LABEL_39;
      }
      v28 += 7;
      BOOL v26 = v29++ > 8;
      if (v26)
      {
        LODWORD(v21) = 0;
        char v27 = (_DWORD *)a1;
        goto LABEL_41;
      }
    }
    char v27 = (_DWORD *)a1;
LABEL_38:
    *(unsigned char *)(a2 + *v5) = 1;
    goto LABEL_39;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t GEOConfigGetUInteger(int a1, uint64_t a2)
{
  uint64_t v2 = _getValue(a1, a2, 1, 0, 0, 0);
  uint64_t v3 = [v2 unsignedIntegerValue];

  return v3;
}

id GEOApplicationIdentifierOrProcessName()
{
  if (qword_1EB2A0178 != -1) {
    dispatch_once(&qword_1EB2A0178, &__block_literal_global_165);
  }
  v0 = (void *)qword_1EB2A0170;

  return v0;
}

void sub_188E5BE50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_188E5BFA4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E5C0B0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E5C1BC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E5C3C4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E5D318(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E5DE88(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E5E058(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E5E16C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E5E378(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDPlaceSummaryResultLayoutTemplatePairReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 60);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 56)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  unsigned int v11 = ((*(unsigned __int8 *)(a1 + 68) >> 1) & 1)
      + (*(unsigned char *)(a1 + 68) & 1)
      + ((*(unsigned __int8 *)(a1 + 68) >> 2) & 1);
  while (2)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    switch(a3[v7])
    {
      case -3:
        char v8 = 1;
        goto LABEL_6;
      case -2:
        uint64_t v12 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        int v14 = v10 | (v11 > 1);
        if ((v14 | v8)) {
          char v15 = 0;
        }
        else {
          char v15 = a3;
        }
        LODWORD(v16) = v14;
        int v17 = (int *)MEMORY[0x1E4F940E8];
        id v18 = (int *)MEMORY[0x1E4F940C8];
        if (*(void *)(v3 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(v3 + *v6)) {
          goto LABEL_84;
        }
        char v58 = (v15 == 0) | v14;
        char v19 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v11;
LABEL_6:
        uint64_t v12 = v9;
        uint64_t v13 = v10;
LABEL_8:
        ++v7;
        uint64_t v9 = v12;
        uint64_t v10 = v13;
        continue;
    }
    break;
  }
  do
  {
    if (*(unsigned char *)(v3 + *v18)) {
      break;
    }
    char v20 = 0;
    unsigned int v21 = 0;
    unint64_t v22 = 0;
    while (1)
    {
      uint64_t v23 = *v17;
      unint64_t v24 = *(void *)(v3 + v23);
      if (v24 == -1 || v24 >= *(void *)(v3 + *v6)) {
        break;
      }
      char v25 = *(unsigned char *)(*(void *)(v3 + *v19) + v24);
      *(void *)(v3 + v23) = v24 + 1;
      v22 |= (unint64_t)(v25 & 0x7F) << v20;
      if ((v25 & 0x80) == 0) {
        goto LABEL_23;
      }
      v20 += 7;
      BOOL v26 = v21++ >= 9;
      if (v26)
      {
        unint64_t v22 = 0;
        int v27 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_25;
      }
    }
    *(unsigned char *)(v3 + *v18) = 1;
LABEL_23:
    int v27 = *(unsigned __int8 *)(v3 + *v18);
    if (*(unsigned char *)(v3 + *v18)) {
      unint64_t v22 = 0;
    }
LABEL_25:
    int v28 = v22 & 7;
    if (v27 || v28 == 4) {
      break;
    }
    unint64_t v30 = v22 >> 3;
    BOOL v31 = (char)v16;
    if ((v58 & 1) == 0)
    {
      unint64_t v32 = v15;
      do
      {
        int v34 = *v32++;
        int v33 = v34;
        BOOL v31 = v34 != 0;
        if (v34) {
          BOOL v35 = v33 == v30;
        }
        else {
          BOOL v35 = 1;
        }
      }
      while (!v35);
    }
    switch(v30)
    {
      case 3:
        if (!v31 || (*(unsigned char *)(a1 + 68) & 1) != 0)
        {
LABEL_67:
          char v45 = PBReaderSkipValueWithTag();
          id v18 = (int *)MEMORY[0x1E4F940C8];
          if ((v45 & 1) == 0)
          {
LABEL_98:
            char v52 = 0;
            goto LABEL_86;
          }
          continue;
        }
        if (v28 == 2)
        {
          if (!PBReaderPlaceMark()) {
            goto LABEL_99;
          }
          while (1)
          {
            BOOL v36 = (int *)MEMORY[0x1E4F940C8];
            if (*(void *)(v3 + *v17) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + (int)*MEMORY[0x1E4F940C8])) {
              break;
            }
            char v37 = 0;
            unsigned int v38 = 0;
            uint64_t v39 = 0;
            while (1)
            {
              uint64_t v40 = *v17;
              unint64_t v41 = *(void *)(v3 + v40);
              if (v41 == -1 || v41 >= *(void *)(v3 + *v6)) {
                break;
              }
              char v42 = *(unsigned char *)(*(void *)(v3 + *v19) + v41);
              *(void *)(v3 + v40) = v41 + 1;
              v39 |= (unint64_t)(v42 & 0x7F) << v37;
              if (v42 < 0)
              {
                v37 += 7;
                BOOL v26 = v38++ >= 9;
                if (!v26) {
                  continue;
                }
              }
              goto LABEL_58;
            }
            *(unsigned char *)(v3 + *v36) = 1;
LABEL_58:
            PBRepeatedInt32Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          char v46 = 0;
          unsigned int v47 = 0;
          uint64_t v48 = 0;
          while (1)
          {
            uint64_t v49 = *v17;
            unint64_t v50 = *(void *)(v3 + v49);
            if (v50 == -1 || v50 >= *(void *)(v3 + *v6)) {
              break;
            }
            char v51 = *(unsigned char *)(*(void *)(v3 + *v19) + v50);
            *(void *)(v3 + v49) = v50 + 1;
            v48 |= (unint64_t)(v51 & 0x7F) << v46;
            if (v51 < 0)
            {
              v46 += 7;
              BOOL v26 = v47++ >= 9;
              if (!v26) {
                continue;
              }
            }
            goto LABEL_80;
          }
          *(unsigned char *)(v3 + *v18) = 1;
LABEL_80:
          PBRepeatedInt32Add();
        }
        goto LABEL_81;
      case 2:
        if (!v31) {
          goto LABEL_67;
        }
        if ((*(unsigned char *)(a1 + 68) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_99:
            char v52 = 0;
LABEL_101:
            id v18 = (int *)MEMORY[0x1E4F940C8];
            goto LABEL_86;
          }
          v7 += *(unsigned __int8 *)(a1 + 68) << 30 >> 31;
          goto LABEL_81;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_99;
        }
        int v57 = (int)v16;
        int v16 = objc_alloc_init(GEOPDPlaceSummaryLayoutTemplate);
        if (!GEOPDPlaceSummaryLayoutTemplateReadAllFrom((uint64_t)v16, (void *)v3, v9 & 1))
        {
LABEL_100:

          char v52 = 0;
          LOBYTE(v16) = v57;
          goto LABEL_101;
        }
        PBReaderRecallMark();
        char v43 = *(void **)(a1 + 40);
        *(void *)(a1 + 40) = v16;

        --v7;
        break;
      case 1:
        if (!v31 || (*(unsigned char *)(a1 + 68) & 4) != 0) {
          goto LABEL_67;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_99;
        }
        int v57 = (int)v16;
        int v16 = objc_alloc_init(GEOPDMapsIdentifier);
        if (!GEOPDMapsIdentifierReadAllFrom((uint64_t)v16, (void *)v3)) {
          goto LABEL_100;
        }
        PBReaderRecallMark();
        -[GEOPDPlaceSummaryResultLayoutTemplatePair _addNoFlagsMapsId:](a1, v16);

        break;
      default:
        int v44 = PBReaderSkipValueWithTag();
        id v18 = (int *)MEMORY[0x1E4F940C8];
        if (!v44) {
          goto LABEL_98;
        }
        continue;
    }
    LODWORD(v16) = v57;
LABEL_81:
    id v18 = (int *)MEMORY[0x1E4F940C8];
  }
  while (v16 & 1 | (v7 != 0) && *(void *)(v3 + *v17) < *(void *)(v3 + *v6));
LABEL_84:
  if ((v16 & 1) == 0)
  {
    if (v15)
    {
      while (1)
      {
        int v54 = *v15++;
        char v53 = 4;
        switch(v54)
        {
          case 0:
            goto LABEL_95;
          case 1:
            goto LABEL_93;
          case 2:
            char v53 = 2;
            goto LABEL_93;
          case 3:
            char v53 = 1;
LABEL_93:
            *(unsigned char *)(a1 + 68) |= v53;
            break;
          default:
            continue;
        }
      }
    }
    goto LABEL_95;
  }
  char v52 = 1;
LABEL_86:
  *(unsigned char *)(a1 + 68) |= 4u;
  *(unsigned char *)(a1 + 68) |= 2u;
  *(unsigned char *)(a1 + 68) |= 1u;
  if ((v52 & 1) == 0)
  {
    unint64_t v3 = 0;
    if ((v16 & 1) == 0) {
      return v3;
    }
    goto LABEL_96;
  }
LABEL_95:
  unint64_t v3 = *(unsigned char *)(v3 + *v18) == 0;
  if ((v16 & 1) == 0) {
    return v3;
  }
LABEL_96:
  int v55 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = 0;

  return v3;
}

id GEOURLString(uint64_t a1)
{
  return _GEOGetURLWithSource(a1, 0, 1, 0);
}

void addr_obj::V2AddressObject::~V2AddressObject(void **this)
{
  addr_obj::V2AddressObject::~V2AddressObject(this);

  JUMPOUT(0x18C11F580);
}

{
  uint64_t vars8;

  *this = &unk_1ED5167C8;
  if (*((char *)this + 1015) < 0) {
    operator delete(this[124]);
  }
  if (*((char *)this + 991) < 0) {
    operator delete(this[121]);
  }
  if (*((char *)this + 967) < 0) {
    operator delete(this[118]);
  }
  if (*((char *)this + 943) < 0) {
    operator delete(this[115]);
  }
  if (*((char *)this + 919) < 0) {
    operator delete(this[112]);
  }
  if (*((char *)this + 895) < 0) {
    operator delete(this[109]);
  }
  if (*((char *)this + 871) < 0) {
    operator delete(this[106]);
  }
  if (*((char *)this + 847) < 0) {
    operator delete(this[103]);
  }
  if (*((char *)this + 823) < 0) {
    operator delete(this[100]);
  }
  if (*((char *)this + 799) < 0) {
    operator delete(this[97]);
  }
  if (*((char *)this + 775) < 0) {
    operator delete(this[94]);
  }
  if (*((char *)this + 751) < 0) {
    operator delete(this[91]);
  }

  addr_obj::V1AddressObject::~V1AddressObject((addr_obj::V1AddressObject *)this);
}

void addr_obj::V1AddressObject::toProto(addr_obj::V1AddressObject *this, addr_obj::VenueInfoProto **a2)
{
  int v4 = addr_obj::AddressObjectBase::toProto(this, (addr_obj::AddressObjectProto *)a2);
  *((_DWORD *)a2 + 22) |= 0x20u;
  int v5 = a2[8];
  if (!v5) {
    operator new();
  }
  if (*((char *)this + 271) < 0)
  {
    if (!*((void *)this + 32)) {
      goto LABEL_10;
    }
  }
  else if (!*((unsigned char *)this + 271))
  {
    goto LABEL_10;
  }
  *((_DWORD *)v5 + 25) |= 1u;
  uint64_t v6 = (uint64_t *)*((void *)v5 + 5);
  if (v6 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v4)) {
    operator new();
  }
  std::string::operator=(*((std::string **)v5 + 5), (const std::string *)((char *)this + 248));
LABEL_10:
  *((_DWORD *)v5 + 25) |= 2u;
  uint64_t v7 = (void ***)*((void *)v5 + 6);
  if (!v7) {
    operator new();
  }
  char v8 = (AddrObjGoogle::protobuf::internal *)addr_obj::geo3::Address::CopyFrom(v7, (void ***)this + 34);
  if (*((char *)this + 359) < 0)
  {
    if (!*((void *)this + 43)) {
      goto LABEL_19;
    }
  }
  else if (!*((unsigned char *)this + 359))
  {
    goto LABEL_19;
  }
  *((_DWORD *)v5 + 25) |= 4u;
  uint64_t v9 = (uint64_t *)*((void *)v5 + 7);
  if (v9 == AddrObjGoogle::protobuf::internal::kEmptyString(v8)) {
    operator new();
  }
  char v8 = (AddrObjGoogle::protobuf::internal *)std::string::operator=(*((std::string **)v5 + 7), (const std::string *)this + 14);
LABEL_19:
  if (*((char *)this + 383) < 0)
  {
    if (!*((void *)this + 46)) {
      goto LABEL_26;
    }
  }
  else if (!*((unsigned char *)this + 383))
  {
    goto LABEL_26;
  }
  *((_DWORD *)v5 + 25) |= 8u;
  uint64_t v10 = (uint64_t *)*((void *)v5 + 8);
  if (v10 == AddrObjGoogle::protobuf::internal::kEmptyString(v8)) {
    operator new();
  }
  std::string::operator=(*((std::string **)v5 + 8), (const std::string *)this + 15);
LABEL_26:
  *((_DWORD *)v5 + 25) |= 0x10u;
  unsigned int v11 = (void ***)*((void *)v5 + 9);
  if (!v11) {
    operator new();
  }
  uint64_t v12 = addr_obj::geo3::StructuredAddress::CopyFrom(v11, (void ***)this + 48);
  if (*((char *)this + 655) < 0)
  {
    if (!*((void *)this + 80)) {
      goto LABEL_35;
    }
  }
  else if (!*((unsigned char *)this + 655))
  {
    goto LABEL_35;
  }
  *((_DWORD *)v5 + 25) |= 0x20u;
  uint64_t v13 = (uint64_t *)*((void *)v5 + 10);
  if (v13 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v12)) {
    operator new();
  }
  std::string::operator=(*((std::string **)v5 + 10), (const std::string *)((char *)this + 632));
LABEL_35:
  *((_DWORD *)v5 + 25) |= 0x40u;
  int v14 = (void ***)*((void *)v5 + 11);
  if (!v14) {
    operator new();
  }
  addr_obj::geo3::Address::CopyFrom(v14, (void ***)this + 82);
  char v15 = (addr_obj::VenueInfo *)*((void *)this + 90);
  if (v15 && !addr_obj::VenueInfo::empty(v15))
  {
    *((_DWORD *)a2 + 22) |= 0x40u;
    if (!a2[9]) {
      operator new();
    }
    int v16 = (const std::string **)*((void *)this + 90);
    int v17 = a2[9];
    addr_obj::VenueInfo::toProto(v16, v17);
  }
}

void sub_188E5EF7C(_Unwind_Exception *a1)
{
  MEMORY[0x18C11F580](v1, 0x10A1C40A7563026);
  _Unwind_Resume(a1);
}

void addr_obj::AddressObjectBase::~AddressObjectBase(void **this)
{
  *this = &unk_1ED516A70;
  addr_obj::AddressObjectProto::~AddressObjectProto((addr_obj::AddressObjectProto *)(this + 17));
  uint64_t v2 = this + 14;
  std::vector<addr_obj::Fingerprints::Fingerprint>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 111) < 0) {
    operator delete(this[11]);
  }
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

void addr_obj::AddressObjectFactory::fromProto(addr_obj::AddressObjectFactory *this, const addr_obj::AddressObjectProto *a2, const addr_obj::Localization *a3)
{
  if ((*((unsigned char *)a2 + 88) & 2) != 0)
  {
    uint64_t v4 = *((void *)a2 + 2);
    if (*(char *)(v4 + 23) < 0)
    {
      if (*(void *)(v4 + 8)) {
        goto LABEL_4;
      }
    }
    else if (*(unsigned char *)(v4 + 23))
    {
LABEL_4:
      addr_obj::Fingerprints::Fingerprints((addr_obj::Fingerprints *)__p, a2);
      switch(*((_DWORD *)a2 + 20))
      {
        case 0:
          operator new();
        case 1:
          operator new();
        case 2:
          operator new();
        case 3:
          addr_obj::AddressObjectProto::AddressObjectProto((addr_obj::AddressObjectProto *)v43);
          int v17 = addr_obj::AddressObjectProto::CopyFrom((void ***)v43, (void ***)a2);
          v45 |= 1u;
          int v44 = 1;
          id v18 = (void **)*((void *)a2 + 8);
          if (!v18)
          {
            int v17 = (void ***)addr_obj::AddressObjectProto::default_instance_((addr_obj::AddressObjectProto *)v17);
            id v18 = v17[8];
          }
          char v19 = addr_obj::V3AddressObjectProto::v3address((addr_obj::V3AddressObjectProto *)v17);
          Message = (addr_obj::V3AddressObjectProto *)AddrObjGoogle::protobuf::internal::ExtensionSet::GetMessage((uint64_t)(v18 + 1), *v19, *((void *)v19 + 1));
          if (!*((void *)Message + 2)) {
            addr_obj::V3AddressObjectProto::default_instance_(Message);
          }
          std::string::basic_string[abi:ne180100]<0>(v41, "downconvert_v3_v1+venue");
          std::string::basic_string[abi:ne180100]<0>(v37, "fromProto");
          addr_obj::Fingerprints::add((uint64_t *)__p, (uint64_t)v41, (uint64_t)v37);
          if ((char)v38 < 0) {
            operator delete(v37[0]);
          }
          if (v42 < 0) {
            operator delete(v41[0]);
          }
          operator new();
        case 4:
          addr_obj::AddressObjectProto::AddressObjectProto((addr_obj::AddressObjectProto *)v43);
          unsigned int v11 = addr_obj::AddressObjectProto::CopyFrom((void ***)v43, (void ***)a2);
          v45 |= 1u;
          int v44 = 2;
          uint64_t v12 = (void **)*((void *)a2 + 8);
          if (!v12)
          {
            unsigned int v11 = (void ***)addr_obj::AddressObjectProto::default_instance_((addr_obj::AddressObjectProto *)v11);
            uint64_t v12 = v11[8];
          }
          uint64_t v13 = addr_obj::V2AddressObjectProto::v2address((addr_obj::V2AddressObjectProto *)v11);
          int v14 = (addr_obj::V4AddressObjectProto *)AddrObjGoogle::protobuf::internal::ExtensionSet::GetMessage((uint64_t)(v12 + 1), *v13, *((void *)v13 + 1));
          char v15 = addr_obj::V4AddressObjectProto::v4address(v14);
          int v16 = (addr_obj::V4AddressObjectProto *)AddrObjGoogle::protobuf::internal::ExtensionSet::GetMessage((uint64_t)v14 + 8, *v15, *((void *)v15 + 1));
          if (!*((void *)v16 + 2)) {
            addr_obj::V4AddressObjectProto::default_instance_(v16);
          }
          std::string::basic_string[abi:ne180100]<0>(v41, "downconvert_v4_v2+venue");
          std::string::basic_string[abi:ne180100]<0>(v37, "fromProto");
          addr_obj::Fingerprints::add((uint64_t *)__p, (uint64_t)v41, (uint64_t)v37);
          if ((char)v38 < 0) {
            operator delete(v37[0]);
          }
          if (v42 < 0) {
            operator delete(v41[0]);
          }
          operator new();
        default:
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v43);
          unsigned int v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"unexpected proto.address_object_version in ", 43);
          unint64_t v22 = addr_obj::operator<<(v21, a2);
          uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"; library version: ",
                  19);
          unint64_t v24 = (addr_obj::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"11.3.0", 6);
          if (addr_obj::Logger::isInitialized(v24))
          {
            std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v41);
            std::stringbuf::str();
            if ((v38 & 0x80u) == 0) {
              char v25 = v37;
            }
            else {
              char v25 = (void **)v37[0];
            }
            if ((v38 & 0x80u) == 0) {
              uint64_t v26 = v38;
            }
            else {
              uint64_t v26 = (uint64_t)v37[1];
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)v25, v26);
            if ((char)v38 < 0) {
              operator delete(v37[0]);
            }
            std::string::basic_string[abi:ne180100]<0>(v37, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectFactory.cpp");
            std::string::basic_string[abi:ne180100]<0>(&v36, "fromProto");
            std::stringbuf::str();
            std::string::basic_string[abi:ne180100]<0>(v33, "");
            addr_obj::Logger::log(16, (uint64_t)v37, 109, (uint64_t)&v36, (uint64_t)&v35, (uint64_t)v33);
            if (v34 < 0) {
              operator delete(v33[0]);
            }
            if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v35.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v36.__r_.__value_.__l.__data_);
            }
            if ((char)v38 < 0) {
              operator delete(v37[0]);
            }
            std::ostringstream::~ostringstream((uint64_t)v41);
          }
          int v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"; at ", 5);
          int v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectFactory.cpp", 94);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)":", 1);
          std::ostream::operator<<();
          exception = (std::runtime_error *)__cxa_allocate_exception(0x28uLL);
          std::string::basic_string[abi:ne180100]<0>(v41, "DataError");
          std::stringbuf::str();
          addr_obj::Exception<std::runtime_error>::Exception(exception, (const void **)v41, (uint64_t)v37);
      }
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v43);
  int v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"library_version is missing in proto: ", 37);
  uint64_t v6 = addr_obj::operator<<(v5, a2);
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"; library version: ",
         19);
  char v8 = (addr_obj::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"11.3.0", 6);
  if (addr_obj::Logger::isInitialized(v8))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v41);
    std::stringbuf::str();
    if ((v40 & 0x80u) == 0) {
      uint64_t v9 = __p;
    }
    else {
      uint64_t v9 = (void **)__p[0];
    }
    if ((v40 & 0x80u) == 0) {
      uint64_t v10 = v40;
    }
    else {
      uint64_t v10 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)v9, v10);
    if ((char)v40 < 0) {
      operator delete(__p[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectFactory.cpp");
    std::string::basic_string[abi:ne180100]<0>(v37, "fromProto");
    std::stringbuf::str();
    std::string::basic_string[abi:ne180100]<0>(&v35, "");
    addr_obj::Logger::log(16, (uint64_t)__p, 72, (uint64_t)v37, (uint64_t)&v36, (uint64_t)&v35);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v35.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v36.__r_.__value_.__l.__data_);
    }
    if ((char)v38 < 0) {
      operator delete(v37[0]);
    }
    if ((char)v40 < 0) {
      operator delete(__p[0]);
    }
    std::ostringstream::~ostringstream((uint64_t)v41);
  }
  unint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"; at ", 5);
  BOOL v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectFactory.cpp", 94);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)":", 1);
  std::ostream::operator<<();
  unint64_t v32 = (std::runtime_error *)__cxa_allocate_exception(0x28uLL);
  std::string::basic_string[abi:ne180100]<0>(v41, "DataError");
  std::stringbuf::str();
  addr_obj::Exception<std::runtime_error>::Exception(v32, (const void **)v41, (uint64_t)__p);
}

void sub_188E5FF48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a35 < 0)
  {
    operator delete(a30);
    if ((v36 & 1) == 0)
    {
LABEL_8:
      std::ostringstream::~ostringstream((uint64_t)&v38);
      _Unwind_Resume(a1);
    }
  }
  else if (!v36)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v35);
  goto LABEL_8;
}

void sub_188E5FFA8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  std::ostringstream::~ostringstream((uint64_t)&v2);
  _Unwind_Resume(a1);
}

void sub_188E5FFC8()
{
  uint64_t v1 = (void **)&v0;
  std::vector<addr_obj::Fingerprints::Fingerprint>::__destroy_vector::operator()[abi:ne180100](&v1);
  JUMPOUT(0x188E600F8);
}

void sub_188E600C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
}

void std::vector<addr_obj::Fingerprints::Fingerprint>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    int v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        std::allocator<addr_obj::Fingerprints::Fingerprint>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<addr_obj::Fingerprints::Fingerprint>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 79) < 0) {
    operator delete(*(void **)(a2 + 56));
  }
  if (*(char *)(a2 + 55) < 0) {
    operator delete(*(void **)(a2 + 32));
  }
  if (*(char *)(a2 + 23) < 0)
  {
    unint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

uint64_t addr_obj::V1AddressObject::V1AddressObject(uint64_t a1, long long *a2, long long **a3, uint64_t a4, int *a5)
{
  uint64_t v7 = (void *)addr_obj::AddressObjectBase::AddressObjectBase(a1, a5, a2, a3);
  void *v7 = &unk_1ED516680;
  v7[31] = 0;
  v7[32] = 0;
  v7[33] = 0;
  addr_obj::geo3::Address::Address((addr_obj::geo3::Address *)(v7 + 34));
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  addr_obj::geo3::StructuredAddress::StructuredAddress((addr_obj::geo3::StructuredAddress *)(a1 + 384));
  *(void *)(a1 + 648) = 0;
  *(_OWORD *)(a1 + 632) = 0u;
  addr_obj::geo3::Address::Address((addr_obj::geo3::Address *)(a1 + 656));
  *(void *)(a1 + 720) = 0;
  if ((*(unsigned char *)(a4 + 88) & 0x40) != 0) {
    operator new();
  }
  addr_obj::V1AddressObject::init((addr_obj::V1AddressObject *)a1, (void ***)a4);
  return a1;
}

void sub_188E6031C(_Unwind_Exception *a1)
{
  MEMORY[0x18C11F580](v6, 0x20C40DC1BFBCFLL);
  std::unique_ptr<addr_obj::VenueInfo const>::reset[abi:ne180100](v5, 0);
  addr_obj::geo3::Address::~Address(v4);
  if (*(char *)(v1 + 655) < 0) {
    operator delete(*v8);
  }
  addr_obj::geo3::StructuredAddress::~StructuredAddress(v3);
  if (*(char *)(v1 + 383) < 0) {
    operator delete(*(void **)(v1 + 360));
  }
  if (*(char *)(v1 + 359) < 0) {
    operator delete(*(void **)(v1 + 336));
  }
  addr_obj::geo3::Address::~Address(v2);
  if (*(char *)(v1 + 271) < 0) {
    operator delete(*v7);
  }
  addr_obj::AddressObjectBase::~AddressObjectBase((void **)v1);
  _Unwind_Resume(a1);
}

addr_obj::geo3::Address *addr_obj::geo3::Address::Address(addr_obj::geo3::Address *this)
{
  *(void *)this = &unk_1ED5173F8;
  AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((void *)this + 1);
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  return this;
}

void sub_188E60424(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

void ***addr_obj::V1AddressObject::init(addr_obj::V1AddressObject *this, void ***a2)
{
  if (((_BYTE)a2[11] & 0x20) == 0)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v32);
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"v1address is missing in the ", 28);
    unsigned int v11 = addr_obj::operator<<(v10, (AddrObjGoogle::protobuf::Message *)a2);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"; base64==", 10);
    (*(void (**)(void **__return_ptr, addr_obj::V1AddressObject *))(*(void *)this + 200))(__p, this);
    if ((v31 & 0x80u) == 0) {
      uint64_t v13 = __p;
    }
    else {
      uint64_t v13 = (void **)__p[0];
    }
    if ((v31 & 0x80u) == 0) {
      uint64_t v14 = v31;
    }
    else {
      uint64_t v14 = (uint64_t)__p[1];
    }
    char v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
    int v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"; library version: ",
            19);
    int v17 = (addr_obj::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"11.3.0", 6);
    if ((char)v31 < 0) {
      operator delete(__p[0]);
    }
    if (addr_obj::Logger::isInitialized(v17))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
      std::stringbuf::str();
      if ((v29 & 0x80u) == 0) {
        id v18 = v28;
      }
      else {
        id v18 = (void **)v28[0];
      }
      if ((v29 & 0x80u) == 0) {
        uint64_t v19 = v29;
      }
      else {
        uint64_t v19 = (uint64_t)v28[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)v18, v19);
      if ((char)v29 < 0) {
        operator delete(v28[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(v28, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/V1AddressObject.cpp");
      std::string::basic_string[abi:ne180100]<0>(v26, "init");
      std::stringbuf::str();
      std::string::basic_string[abi:ne180100]<0>(v23, "");
      addr_obj::Logger::log(16, (uint64_t)v28, 57, (uint64_t)v26, (uint64_t)&v25, (uint64_t)v23);
      if (v24 < 0) {
        operator delete(v23[0]);
      }
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v25.__r_.__value_.__l.__data_);
      }
      if (v27 < 0) {
        operator delete(v26[0]);
      }
      if ((char)v29 < 0) {
        operator delete(v28[0]);
      }
      std::ostringstream::~ostringstream((uint64_t)__p);
    }
    char v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"; at ", 5);
    unsigned int v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/V1AddressObject.cpp", 89);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)":", 1);
    std::ostream::operator<<();
    exception = (std::runtime_error *)__cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "DataError");
    std::stringbuf::str();
    addr_obj::Exception<std::runtime_error>::Exception(exception, (const void **)__p, (uint64_t)v28);
  }
  uint64_t result = (void ***)addr_obj::AddressObjectBase::fromProto(this, (const std::string **)a2);
  int v5 = a2[8];
  if (!v5)
  {
    uint64_t result = (void ***)addr_obj::AddressObjectProto::default_instance_((addr_obj::AddressObjectProto *)result);
    int v5 = result[8];
  }
  int v6 = *((_DWORD *)v5 + 25);
  if (v6)
  {
    uint64_t result = (void ***)std::string::operator=((std::string *)((char *)this + 248), (const std::string *)v5[5]);
    int v6 = *((_DWORD *)v5 + 25);
  }
  if ((v6 & 2) != 0)
  {
    uint64_t v7 = (void ***)v5[6];
    if (!v7) {
      uint64_t v7 = *(void ****)(addr_obj::V1AddressObjectProto::default_instance_((addr_obj::V1AddressObjectProto *)result) + 48);
    }
    uint64_t result = addr_obj::geo3::Address::CopyFrom((void ***)this + 34, v7);
    int v6 = *((_DWORD *)v5 + 25);
  }
  if ((v6 & 4) != 0)
  {
    uint64_t result = (void ***)std::string::operator=((std::string *)this + 14, (const std::string *)v5[7]);
    int v6 = *((_DWORD *)v5 + 25);
  }
  if ((v6 & 8) != 0)
  {
    uint64_t result = (void ***)std::string::operator=((std::string *)this + 15, (const std::string *)v5[8]);
    int v6 = *((_DWORD *)v5 + 25);
  }
  if ((v6 & 0x10) != 0)
  {
    char v8 = (void ***)v5[9];
    if (!v8) {
      char v8 = *(void ****)(addr_obj::V1AddressObjectProto::default_instance_((addr_obj::V1AddressObjectProto *)result) + 72);
    }
    uint64_t result = addr_obj::geo3::StructuredAddress::CopyFrom((void ***)this + 48, v8);
    int v6 = *((_DWORD *)v5 + 25);
  }
  if ((v6 & 0x20) != 0)
  {
    uint64_t result = (void ***)std::string::operator=((std::string *)((char *)this + 632), (const std::string *)v5[10]);
    int v6 = *((_DWORD *)v5 + 25);
  }
  if ((v6 & 0x40) != 0)
  {
    uint64_t v9 = (void ***)v5[11];
    if (!v9) {
      uint64_t v9 = *(void ****)(addr_obj::V1AddressObjectProto::default_instance_((addr_obj::V1AddressObjectProto *)result) + 88);
    }
    return addr_obj::geo3::Address::CopyFrom((void ***)this + 82, v9);
  }
  return result;
}

void sub_188E60B14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
    {
LABEL_8:
      std::ostringstream::~ostringstream((uint64_t)&v32);
      _Unwind_Resume(a1);
    }
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void sub_188E60B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::ostringstream::~ostringstream((uint64_t)&v27);
  _Unwind_Resume(a1);
}

void ***addr_obj::geo3::StructuredAddress::CopyFrom(void ***this, void ***a2)
{
  if (a2 != this)
  {
    uint64_t v4 = (addr_obj::geo3::StructuredAddress *)this;
    ((void (*)(void ***))(*this)[4])(this);
    return addr_obj::geo3::StructuredAddress::MergeFrom(v4, (const addr_obj::geo3::StructuredAddress *)a2);
  }
  return this;
}

std::string *addr_obj::AddressObjectBase::fromProto(addr_obj::AddressObjectBase *this, const std::string **a2)
{
  if (*((_DWORD *)this + 3) != *((_DWORD *)a2 + 20))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"major version mismatch, expected ", 33);
    int v6 = (void *)addr_obj::operator<<();
    uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" but got: ", 10);
    char v8 = addr_obj::operator<<(v7, (AddrObjGoogle::protobuf::Message *)a2);
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"; library version: ",
           19);
    uint64_t v10 = (addr_obj::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"11.3.0", 6);
    if (addr_obj::Logger::isInitialized(v10))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v23);
      std::stringbuf::str();
      if ((v22 & 0x80u) == 0) {
        unsigned int v11 = __p;
      }
      else {
        unsigned int v11 = (void **)__p[0];
      }
      if ((v22 & 0x80u) == 0) {
        uint64_t v12 = v22;
      }
      else {
        uint64_t v12 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v11, v12);
      if ((char)v22 < 0) {
        operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
      std::string::basic_string[abi:ne180100]<0>(v19, "fromProto");
      std::stringbuf::str();
      std::string::basic_string[abi:ne180100]<0>(v16, "");
      addr_obj::Logger::log(16, (uint64_t)__p, 137, (uint64_t)v19, (uint64_t)&v18, (uint64_t)v16);
      if (v17 < 0) {
        operator delete(v16[0]);
      }
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v18.__r_.__value_.__l.__data_);
      }
      if (v20 < 0) {
        operator delete(v19[0]);
      }
      if ((char)v22 < 0) {
        operator delete(__p[0]);
      }
      std::ostringstream::~ostringstream((uint64_t)v23);
    }
    uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"; at ", 5);
    uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp", 91);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)":", 1);
    std::ostream::operator<<();
    exception = (std::runtime_error *)__cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(v23, "DataError");
    std::stringbuf::str();
    addr_obj::Exception<std::runtime_error>::Exception(exception, (const void **)v23, (uint64_t)__p);
  }
  unint64_t v3 = a2[2];
  uint64_t v4 = (std::string *)((char *)this + 16);

  return std::string::operator=(v4, v3);
}

void sub_188E611E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
    {
LABEL_8:
      std::ostringstream::~ostringstream((uint64_t)&v32);
      _Unwind_Resume(a1);
    }
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void sub_188E6123C(_Unwind_Exception *a1)
{
  std::ostringstream::~ostringstream((uint64_t)&v2);
  _Unwind_Resume(a1);
}

addr_obj::Fingerprints *addr_obj::Fingerprints::Fingerprints(addr_obj::Fingerprints *this, const addr_obj::AddressObjectProto *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  if (!*((_DWORD *)a2 + 10)) {
    goto LABEL_23;
  }
  uint64_t v4 = *((void *)a2 + 4);
  do
  {
    int v5 = *(long long **)(*(void *)v4 + 16);
    if (*((char *)v5 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)v5, *((void *)v5 + 1));
    }
    else
    {
      long long v6 = *v5;
      v18.__r_.__value_.__r.__words[2] = *((void *)v5 + 2);
      *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v6;
    }
    uint64_t v7 = *(long long **)(*(void *)v4 + 32);
    uint64_t v19 = *(void *)(*(void *)v4 + 24);
    if (*((char *)v7 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)v7, *((void *)v7 + 1));
    }
    else
    {
      long long v8 = *v7;
      v20.__r_.__value_.__r.__words[2] = *((void *)v7 + 2);
      *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v8;
    }
    uint64_t v9 = *(long long **)(*(void *)v4 + 40);
    if (*((char *)v9 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v9, *((void *)v9 + 1));
    }
    else
    {
      long long v10 = *v9;
      __p.__r_.__value_.__r.__words[2] = *((void *)v9 + 2);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v10;
    }
    unint64_t v11 = *((void *)this + 1);
    if (v11 >= *((void *)this + 2))
    {
      uint64_t v12 = std::vector<addr_obj::Fingerprints::Fingerprint>::__push_back_slow_path<addr_obj::Fingerprints::Fingerprint const&>((uint64_t *)this, (long long *)&v18);
    }
    else
    {
      std::allocator<addr_obj::Fingerprints::Fingerprint>::construct[abi:ne180100]<addr_obj::Fingerprints::Fingerprint,addr_obj::Fingerprints::Fingerprint const&>(this + 16, *((std::string **)this + 1), (long long *)&v18);
      uint64_t v12 = v11 + 80;
      *((void *)this + 1) = v11 + 80;
    }
    *((void *)this + 1) = v12;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
    v4 += 8;
  }
  while (v4 != *((void *)a2 + 4) + 8 * *((int *)a2 + 10));
  if (*((void *)this + 1) == *(void *)this)
  {
LABEL_23:
    if ((*((unsigned char *)a2 + 88) & 2) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&v18, "unk");
      uint64_t v19 = 0;
      std::string::basic_string[abi:ne180100]<0>(&v20, "unk");
      uint64_t v13 = (long long *)*((void *)a2 + 2);
      if (*((char *)v13 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v13, *((void *)v13 + 1));
      }
      else
      {
        long long v14 = *v13;
        __p.__r_.__value_.__r.__words[2] = *((void *)v13 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v14;
      }
      unint64_t v15 = *((void *)this + 1);
      if (v15 >= *((void *)this + 2))
      {
        uint64_t v16 = std::vector<addr_obj::Fingerprints::Fingerprint>::__push_back_slow_path<addr_obj::Fingerprints::Fingerprint const&>((uint64_t *)this, (long long *)&v18);
      }
      else
      {
        std::allocator<addr_obj::Fingerprints::Fingerprint>::construct[abi:ne180100]<addr_obj::Fingerprints::Fingerprint,addr_obj::Fingerprints::Fingerprint const&>(this + 16, *((std::string **)this + 1), (long long *)&v18);
        uint64_t v16 = v15 + 80;
        *((void *)this + 1) = v15 + 80;
      }
      *((void *)this + 1) = v16;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v20.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v18.__r_.__value_.__l.__data_);
      }
    }
  }
  return this;
}

void sub_188E614BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  std::vector<addr_obj::Fingerprints::Fingerprint>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  _Unwind_Resume(a1);
}

char *std::vector<addr_obj::Fingerprints::Fingerprint>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334) {
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<addr_obj::Fingerprints::Fingerprint>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[80 * v4];
  return result;
}

uint64_t std::vector<addr_obj::Fingerprints::Fingerprint>::__push_back_slow_path<addr_obj::Fingerprints::Fingerprint const&>(uint64_t *a1, long long *a2)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333) {
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999) {
    unint64_t v6 = 0x333333333333333;
  }
  else {
    unint64_t v6 = v4;
  }
  long long v14 = a1 + 2;
  if (v6) {
    uint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<addr_obj::Fingerprints::Fingerprint>>((uint64_t)(a1 + 2), v6);
  }
  else {
    uint64_t v7 = 0;
  }
  long long v10 = v7;
  unint64_t v11 = (std::string *)&v7[80 * v3];
  uint64_t v13 = &v7[80 * v6];
  std::allocator<addr_obj::Fingerprints::Fingerprint>::construct[abi:ne180100]<addr_obj::Fingerprints::Fingerprint,addr_obj::Fingerprints::Fingerprint const&>(a1 + 16, v11, a2);
  uint64_t v12 = &v11[3].__r_.__value_.__s.__data_[8];
  std::vector<addr_obj::Fingerprints::Fingerprint>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<addr_obj::Fingerprints::Fingerprint>::~__split_buffer(&v10);
  return v8;
}

void sub_188E6168C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<addr_obj::Fingerprints::Fingerprint>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<addr_obj::Fingerprints::Fingerprint>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(80 * a2);
}

void std::allocator<addr_obj::Fingerprints::Fingerprint>::construct[abi:ne180100]<addr_obj::Fingerprints::Fingerprint,addr_obj::Fingerprints::Fingerprint const&>(int a1, std::string *this, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__r.__words[0] = *((void *)a3 + 3);
  if (*((char *)a3 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 32), *((const std::string::value_type **)a3 + 4), *((void *)a3 + 5));
  }
  else
  {
    long long v6 = a3[2];
    this[2].__r_.__value_.__r.__words[0] = *((void *)a3 + 6);
    *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = v6;
  }
  uint64_t v7 = (std::string *)((char *)this + 56);
  if (*((char *)a3 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a3 + 7), *((void *)a3 + 8));
  }
  else
  {
    long long v8 = *(long long *)((char *)a3 + 56);
    this[3].__r_.__value_.__r.__words[0] = *((void *)a3 + 9);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
}

void sub_188E617A0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void **std::__split_buffer<addr_obj::Fingerprints::Fingerprint>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<addr_obj::Fingerprints::Fingerprint>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 80;
    std::allocator<addr_obj::Fingerprints::Fingerprint>::destroy[abi:ne180100](v4, i - 80);
  }
}

uint64_t std::vector<addr_obj::Fingerprints::Fingerprint>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<addr_obj::Fingerprints::Fingerprint>,std::reverse_iterator<addr_obj::Fingerprints::Fingerprint*>,std::reverse_iterator<addr_obj::Fingerprints::Fingerprint*>,std::reverse_iterator<addr_obj::Fingerprints::Fingerprint*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<addr_obj::Fingerprints::Fingerprint>,std::reverse_iterator<addr_obj::Fingerprints::Fingerprint*>,std::reverse_iterator<addr_obj::Fingerprints::Fingerprint*>,std::reverse_iterator<addr_obj::Fingerprints::Fingerprint*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)&long long v18 = a6;
  *((void *)&v18 + 1) = a7;
  long long v17 = v18;
  v15[0] = a1;
  v15[1] = &v17;
  v15[2] = &v18;
  if (a3 == a5)
  {
    uint64_t v13 = a6;
  }
  else
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a7 + v7;
      uint64_t v9 = a3 + v7;
      long long v10 = *(_OWORD *)(a3 + v7 - 80);
      *(void *)(v8 - 64) = *(void *)(a3 + v7 - 64);
      *(_OWORD *)(v8 - 80) = v10;
      *(void *)(v9 - 72) = 0;
      *(void *)(v9 - 64) = 0;
      *(void *)(v9 - 80) = 0;
      *(void *)(v8 - 56) = *(void *)(a3 + v7 - 56);
      long long v11 = *(_OWORD *)(a3 + v7 - 48);
      *(void *)(v8 - 32) = *(void *)(a3 + v7 - 32);
      *(_OWORD *)(v8 - 48) = v11;
      *(void *)(v9 - 40) = 0;
      *(void *)(v9 - 32) = 0;
      *(void *)(v9 - 48) = 0;
      long long v12 = *(_OWORD *)(a3 + v7 - 24);
      *(void *)(v8 - 8) = *(void *)(a3 + v7 - 8);
      *(_OWORD *)(v8 - 24) = v12;
      *(void *)(v9 - 16) = 0;
      *(void *)(v9 - 8) = 0;
      *(void *)(v9 - 24) = 0;
      v7 -= 80;
    }
    while (a3 + v7 != a5);
    *((void *)&v18 + 1) = a7 + v7;
    uint64_t v13 = v18;
  }
  char v16 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<addr_obj::Fingerprints::Fingerprint>,std::reverse_iterator<addr_obj::Fingerprints::Fingerprint*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v15);
  return v13;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<addr_obj::Fingerprints::Fingerprint>,std::reverse_iterator<addr_obj::Fingerprints::Fingerprint*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<addr_obj::Fingerprints::Fingerprint>,std::reverse_iterator<addr_obj::Fingerprints::Fingerprint*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::shared_ptr<addr_obj::V1AddressObject>::shared_ptr[abi:ne180100]<addr_obj::V1AddressObject,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_188E61A50(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_189113EE8(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::shared_ptr<addr_obj::V2AddressObject>::shared_ptr[abi:ne180100]<addr_obj::V2AddressObject,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_188E61AD4(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_189113EE8(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t addr_obj::V2AddressObject::V2AddressObject(uint64_t a1, long long *a2, long long **a3, const addr_obj::AddressObjectProto *a4, int *a5)
{
  uint64_t v7 = addr_obj::V1AddressObject::V1AddressObject(a1, a2, a3, (uint64_t)a4, a5);
  *(void *)uint64_t v7 = &unk_1ED5167C8;
  *(_OWORD *)(v7 + 728) = 0u;
  *(_OWORD *)(v7 + 744) = 0u;
  *(_OWORD *)(v7 + 760) = 0u;
  *(_OWORD *)(v7 + 776) = 0u;
  *(_OWORD *)(v7 + 792) = 0u;
  *(_OWORD *)(v7 + 808) = 0u;
  *(_OWORD *)(v7 + 824) = 0u;
  *(_OWORD *)(v7 + 840) = 0u;
  *(_OWORD *)(v7 + 856) = 0u;
  *(_OWORD *)(v7 + 872) = 0u;
  *(_OWORD *)(v7 + 888) = 0u;
  *(_OWORD *)(v7 + 904) = 0u;
  *(_OWORD *)(v7 + 920) = 0u;
  *(_OWORD *)(v7 + 936) = 0u;
  *(_OWORD *)(v7 + 952) = 0u;
  *(_OWORD *)(v7 + 968) = 0u;
  *(_OWORD *)(v7 + 984) = 0u;
  *(_OWORD *)(v7 + 1000) = 0u;
  addr_obj::V2AddressObject::init((addr_obj::V2AddressObject *)v7, a4);
  return a1;
}

void sub_188E61B70(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 1015) < 0) {
    operator delete(*(void **)(v1 + 992));
  }
  if (*(char *)(v1 + 991) < 0) {
    operator delete(*(void **)(v1 + 968));
  }
  if (*(char *)(v1 + 967) < 0) {
    operator delete(*(void **)(v1 + 944));
  }
  if (*(char *)(v1 + 943) < 0) {
    operator delete(*(void **)(v1 + 920));
  }
  if (*(char *)(v1 + 919) < 0) {
    operator delete(*(void **)(v1 + 896));
  }
  if (*(char *)(v1 + 895) < 0) {
    operator delete(*(void **)(v1 + 872));
  }
  if (*(char *)(v1 + 871) < 0) {
    operator delete(*(void **)(v1 + 848));
  }
  if (*(char *)(v1 + 847) < 0) {
    operator delete(*(void **)(v1 + 824));
  }
  if (*(char *)(v1 + 823) < 0) {
    operator delete(*(void **)(v1 + 800));
  }
  if (*(char *)(v1 + 799) < 0) {
    operator delete(*(void **)(v1 + 776));
  }
  if (*(char *)(v1 + 775) < 0) {
    operator delete(*(void **)(v1 + 752));
  }
  if (*(char *)(v1 + 751) < 0) {
    operator delete(*v2);
  }
  addr_obj::V1AddressObject::~V1AddressObject((addr_obj::V1AddressObject *)v1);
  _Unwind_Resume(a1);
}

uint64_t addr_obj::V2AddressObject::init(addr_obj::V2AddressObject *this, const addr_obj::AddressObjectProto *a2)
{
  if ((*((unsigned char *)a2 + 88) & 0x20) == 0)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v27);
    long long v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"the incoming protobuf is missing the v1address field", 52);
    long long v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"; library version: ",
            19);
    uint64_t v13 = (addr_obj::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"11.3.0", 6);
    if (addr_obj::Logger::isInitialized(v13))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v26);
      std::stringbuf::str();
      if ((v25 & 0x80u) == 0) {
        long long v14 = __p;
      }
      else {
        long long v14 = (void **)__p[0];
      }
      if ((v25 & 0x80u) == 0) {
        uint64_t v15 = v25;
      }
      else {
        uint64_t v15 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v14, v15);
      if ((char)v25 < 0) {
        operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/V2AddressObject.cpp");
      std::string::basic_string[abi:ne180100]<0>(v22, "init");
      std::stringbuf::str();
      std::string::basic_string[abi:ne180100]<0>(v19, "");
      addr_obj::Logger::log(16, (uint64_t)__p, 28, (uint64_t)v22, (uint64_t)&v21, (uint64_t)v19);
      if (v20 < 0) {
        operator delete(v19[0]);
      }
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v21.__r_.__value_.__l.__data_);
      }
      if (v23 < 0) {
        operator delete(v22[0]);
      }
      if ((char)v25 < 0) {
        operator delete(__p[0]);
      }
      std::ostringstream::~ostringstream((uint64_t)v26);
    }
    char v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"; at ", 5);
    long long v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/V2AddressObject.cpp", 89);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)":", 1);
    std::ostream::operator<<();
    exception = (std::runtime_error *)__cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(v26, "DataError");
    std::stringbuf::str();
    addr_obj::Exception<std::runtime_error>::Exception(exception, (const void **)v26, (uint64_t)__p);
  }
  unint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 8);
  if (!v4)
  {
    this = (addr_obj::V2AddressObject *)addr_obj::AddressObjectProto::default_instance_(this);
    uint64_t v4 = *((void *)this + 8);
  }
  uint64_t v5 = addr_obj::V2AddressObjectProto::v2address(this);
  uint64_t result = AddrObjGoogle::protobuf::internal::ExtensionSet::Has((AddrObjGoogle::protobuf::internal::ExtensionSet *)(v4 + 8), *v5);
  if (result)
  {
    uint64_t v7 = *((void *)a2 + 8);
    if (!v7)
    {
      uint64_t result = addr_obj::AddressObjectProto::default_instance_((addr_obj::AddressObjectProto *)result);
      uint64_t v7 = *(void *)(result + 64);
    }
    uint64_t v8 = addr_obj::V2AddressObjectProto::v2address((addr_obj::V2AddressObjectProto *)result);
    uint64_t Message = AddrObjGoogle::protobuf::internal::ExtensionSet::GetMessage(v7 + 8, *v8, *((void *)v8 + 1));
    std::string::operator=((std::string *)((char *)v3 + 728), *(const std::string **)(Message + 40));
    std::string::operator=((std::string *)((char *)v3 + 752), *(const std::string **)(Message + 56));
    std::string::operator=((std::string *)((char *)v3 + 776), *(const std::string **)(Message + 88));
    std::string::operator=((std::string *)((char *)v3 + 800), *(const std::string **)(Message + 96));
    std::string::operator=((std::string *)((char *)v3 + 824), *(const std::string **)(Message + 48));
    std::string::operator=((std::string *)((char *)v3 + 848), *(const std::string **)(Message + 64));
    std::string::operator=((std::string *)((char *)v3 + 872), *(const std::string **)(Message + 72));
    std::string::operator=((std::string *)((char *)v3 + 896), *(const std::string **)(Message + 80));
    std::string::operator=((std::string *)((char *)v3 + 920), *(const std::string **)(Message + 104));
    std::string::operator=((std::string *)((char *)v3 + 944), *(const std::string **)(Message + 112));
    std::string::operator=((std::string *)((char *)v3 + 968), *(const std::string **)(Message + 120));
    long long v10 = *(const std::string **)(Message + 128);
    return (uint64_t)std::string::operator=((std::string *)((char *)v3 + 992), v10);
  }
  return result;
}

void sub_188E622BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
    {
LABEL_8:
      std::ostringstream::~ostringstream((uint64_t)&v32);
      _Unwind_Resume(a1);
    }
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void sub_188E62318(_Unwind_Exception *a1)
{
  std::ostringstream::~ostringstream((uint64_t)&v2);
  _Unwind_Resume(a1);
}

int *addr_obj::V2AddressObjectProto::v2address(addr_obj::V2AddressObjectProto *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9117178, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (addr_obj::V2AddressObjectProto *)__cxa_guard_acquire(&qword_1E9117178);
    if (v2)
    {
      uint64_t v3 = addr_obj::V2AddressObjectProto::default_instance(v2);
      dword_1E9117168 = 100;
      qword_1E9117170 = v3;
      __cxa_guard_release(&qword_1E9117178);
    }
  }
  return &dword_1E9117168;
}

void sub_188E623AC(_Unwind_Exception *a1)
{
}

BOOL AddrObjGoogle::protobuf::internal::ExtensionSet::Has(AddrObjGoogle::protobuf::internal::ExtensionSet *this, int a2)
{
  uint64_t v4 = (char *)*((void *)this + 1);
  uint64_t v2 = (char *)this + 8;
  uint64_t v3 = v4;
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v2;
  do
  {
    int v6 = *((_DWORD *)v3 + 8);
    BOOL v7 = v6 < a2;
    if (v6 >= a2) {
      uint64_t v8 = (char **)v3;
    }
    else {
      uint64_t v8 = (char **)(v3 + 8);
    }
    if (!v7) {
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  return v5 != v2 && *((_DWORD *)v5 + 8) <= a2 && (v5[50] & 1) == 0;
}

uint64_t AddrObjGoogle::protobuf::internal::ExtensionSet::GetMessage(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v3 = a1 + 8;
  uint64_t v4 = v5;
  if (!v5) {
    return a3;
  }
  uint64_t v6 = v3;
  do
  {
    int v7 = *(_DWORD *)(v4 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      uint64_t v9 = (uint64_t *)v4;
    }
    else {
      uint64_t v9 = (uint64_t *)(v4 + 8);
    }
    if (!v8) {
      uint64_t v6 = v4;
    }
    uint64_t v4 = *v9;
  }
  while (*v9);
  if (v6 == v3 || *(_DWORD *)(v6 + 32) > a2) {
    return a3;
  }
  if ((*(unsigned char *)(v6 + 50) & 0x10) == 0) {
    return *(void *)(v6 + 40);
  }
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(v6 + 40) + 24))(*(void *)(v6 + 40), a3);
}

std::string *addr_obj::AddressObjectBase::toProto(addr_obj::AddressObjectBase *this, addr_obj::AddressObjectProto *a2)
{
  int v4 = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 20) = *((_DWORD *)this + 3);
  *((_DWORD *)a2 + 22) = v4 | 3;
  uint64_t v5 = (uint64_t *)*((void *)a2 + 2);
  if (v5 == AddrObjGoogle::protobuf::internal::kEmptyString(this)) {
    operator new();
  }
  std::string::operator=(*((std::string **)a2 + 2), (const std::string *)((char *)this + 16));
  addr_obj::Localization::toProto((std::string *)((char *)this + 40), a2);

  return addr_obj::Fingerprints::toProto((std::string *)((char *)this + 112), a2);
}

std::string *addr_obj::Fingerprints::toProto(std::string *this, addr_obj::AddressObjectProto *a2)
{
  uint64_t v2 = (const std::string *)this->__r_.__value_.__r.__words[0];
  if (this->__r_.__value_.__r.__words[0] != this->__r_.__value_.__l.__size_)
  {
    int v4 = this;
    uint64_t v5 = (char *)a2 + 32;
    do
    {
      int v6 = *((_DWORD *)a2 + 11);
      uint64_t v7 = *((int *)a2 + 10);
      if ((int)v7 >= v6)
      {
        if (v6 == *((_DWORD *)a2 + 12))
        {
          AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Reserve((uint64_t)v5, v6 + 1);
          int v6 = *((_DWORD *)a2 + 11);
        }
        *((_DWORD *)a2 + 11) = v6 + 1;
        AddrObjGoogle::protobuf::internal::GenericTypeHandler<addr_obj::FingerprintProto>::New();
      }
      uint64_t v8 = *((void *)a2 + 4);
      *((_DWORD *)a2 + 10) = v7 + 1;
      uint64_t v9 = *(void *)(v8 + 8 * v7);
      *(_DWORD *)(v9 + 52) |= 1u;
      long long v10 = *(uint64_t **)(v9 + 16);
      if (v10 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this)) {
        operator new();
      }
      long long v11 = std::string::operator=(*(std::string **)(v9 + 16), v2);
      int v12 = *(_DWORD *)(v9 + 52);
      *(void *)(v9 + 24) = v2[1].__r_.__value_.__l.__data_;
      *(_DWORD *)(v9 + 52) = v12 | 6;
      uint64_t v13 = *(uint64_t **)(v9 + 32);
      if (v13 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v11)) {
        operator new();
      }
      long long v14 = (const std::string *)((char *)v2 + 32);
      uint64_t v15 = std::string::operator=(*(std::string **)(v9 + 32), v14);
      *(_DWORD *)(v9 + 52) |= 8u;
      char v16 = *(uint64_t **)(v9 + 40);
      if (v16 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v15)) {
        operator new();
      }
      this = std::string::operator=(*(std::string **)(v9 + 40), v14 + 1);
      uint64_t v2 = v14 + 2;
    }
    while (v2 != (const std::string *)v4->__r_.__value_.__l.__size_);
  }
  return this;
}

BOOL addr_obj::VenueInfo::empty(addr_obj::VenueInfo *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (*(void *)this == v1) {
    return 1;
  }
  uint64_t v2 = *(void *)this + 24;
  do
  {
    if (*(char *)(v2 - 1) < 0) {
      uint64_t v3 = *(void *)(v2 - 16);
    }
    else {
      uint64_t v3 = *(unsigned __int8 *)(v2 - 1);
    }
    BOOL result = v3 == 0;
    if (v3) {
      BOOL v5 = 1;
    }
    else {
      BOOL v5 = v2 == v1;
    }
    v2 += 24;
  }
  while (!v5);
  return result;
}

void sub_188E6294C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOTerritoryDataTerritoryInfoContainsLocation(void *a1, unint64_t a2, void *a3)
{
  uint64_t v132 = *MEMORY[0x1E4F143B8];
  BOOL v5 = a1;
  id v6 = a3;
  id v112 = v6;
  uint64_t v7 = +[GEOPlatform sharedPlatform];
  if ([v7 isInternalInstall])
  {
    unint64_t UInteger = GEOConfigGetUInteger(GeoServicesConfig_GloriaVerbosity, (uint64_t)off_1E9114F48);

    if (UInteger)
    {
      uint64_t v9 = GEOGetGloriaUtilLog();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        if (v5) {
          uint64_t v10 = v5[8];
        }
        else {
          uint64_t v10 = 0;
        }
        *(_DWORD *)buf = 134217984;
        *(void *)&buf[4] = v10;
        _os_log_impl(&dword_188D96000, v9, OS_LOG_TYPE_DEBUG, "\nChecking intersection for feature %llu", buf, 0xCu);
      }
    }
  }
  else
  {

    unint64_t UInteger = 0;
  }
  [v6 coordinate];
  uint64_t v12 = v11;
  [v6 coordinate];
  double v14 = v13;
  *(void *)&long long v129 = v12;
  *((double *)&v129 + 1) = v13;
  [v6 horizontalAccuracy];
  double v16 = v15;
  double v17 = v14 * 0.0174532925;
  double v18 = cos(v14 * 0.0174532925 * 6.0);
  double v19 = cos(v17 * 4.0);
  long long v127 = v129;
  double v128 = v16 / (cos(v17 + v17) * -559.82 + 111132.92 + v19 * 1.175 + v18 * -0.0023);
  int v20 = __clz(a2);
  unsigned __int8 v126 = (int)((63 - v20 + (((63 - v20) & 0x80u) >> 7)) << 24) >> 25;
  unint64_t v125 = a2 - gloria::LEADING_BITS_VALUE_LUT[v126];
  double v21 = gloria::TileId::ToBBOX((gloria::TileId *)&v125);
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  double v27 = v26;
  v124[0] = v26;
  v124[1] = v21;
  v123[0] = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  v123[1] = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  if (v5 && (-[GEOTerritoryDataTerritoryInfo _readPolygon]((uint64_t)v5), v5[11]))
  {
    uint64_t v28 = -[GEOTerritoryDataTerritoryInfo polygon]((id *)v5);
    unsigned __int8 v29 = (void *)v28;
    if (v28)
    {
      -[GEOTerritoryDataPolygon _readShells](v28);
      uint64_t v30 = v29[2];
    }
    else
    {
      uint64_t v30 = 0;
    }
    uint64_t v31 = -[GEOTerritoryDataTerritoryInfo polygon]((id *)v5);
    uint64_t v32 = (void *)v31;
    if (v31)
    {
      -[GEOTerritoryDataPolygon _readShells](v31);
      unint64_t v33 = v32[3];
    }
    else
    {
      unint64_t v33 = 0;
    }
    _polygonForPackedPoints((char **)&v120, v30, v33, v124, 5, v123);
  }
  else
  {
    memset(buf, 0, 24);
    std::vector<gm::Matrix<double,2,1>>::reserve((void **)buf, 5uLL);
    uint64_t v35 = *(void *)&buf[8];
    char v34 = *(char **)&buf[16];
    if (*(void *)&buf[8] >= *(void *)&buf[16])
    {
      char v37 = *(void **)buf;
      uint64_t v38 = (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 4;
      unint64_t v39 = v38 + 1;
      if ((unint64_t)(v38 + 1) >> 60) {
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v40 = *(void *)&buf[16] - *(void *)buf;
      if ((uint64_t)(*(void *)&buf[16] - *(void *)buf) >> 3 > v39) {
        unint64_t v39 = v40 >> 3;
      }
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v41 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v41 = v39;
      }
      if (v41)
      {
        char v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>>((uint64_t)&buf[16], v41);
        char v37 = *(void **)buf;
        uint64_t v35 = *(void *)&buf[8];
      }
      else
      {
        char v42 = 0;
      }
      char v43 = &v42[16 * v38];
      char v34 = &v42[16 * v41];
      *(double *)char v43 = v27;
      *((double *)v43 + 1) = v21;
      int v36 = v43 + 16;
      if ((void *)v35 != v37)
      {
        do
        {
          *((_OWORD *)v43 - 1) = *(_OWORD *)(v35 - 16);
          v43 -= 16;
          v35 -= 16;
        }
        while ((void *)v35 != v37);
        char v37 = *(void **)buf;
      }
      *(void *)buf = v43;
      *(void *)&buf[8] = v36;
      *(void *)&uint8_t buf[16] = v34;
      if (v37)
      {
        operator delete(v37);
        char v34 = *(char **)&buf[16];
      }
    }
    else
    {
      **(double **)&buf[8] = v27;
      *(double *)(v35 + 8) = v21;
      int v36 = (char *)(v35 + 16);
    }
    *(void *)&buf[8] = v36;
    if (v36 >= v34)
    {
      int v45 = *(char **)buf;
      uint64_t v46 = (uint64_t)&v36[-*(void *)buf] >> 4;
      unint64_t v47 = v46 + 1;
      if ((unint64_t)(v46 + 1) >> 60) {
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v48 = (uint64_t)&v34[-*(void *)buf];
      if (v48 >> 3 > v47) {
        unint64_t v47 = v48 >> 3;
      }
      if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v49 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v49 = v47;
      }
      if (v49)
      {
        unint64_t v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>>((uint64_t)&buf[16], v49);
        int v45 = *(char **)buf;
        int v36 = *(char **)&buf[8];
      }
      else
      {
        unint64_t v50 = 0;
      }
      char v51 = &v50[16 * v46];
      char v34 = &v50[16 * v49];
      *(double *)char v51 = v27;
      *((void *)v51 + 1) = v23;
      int v44 = v51 + 16;
      if (v36 != v45)
      {
        do
        {
          *((_OWORD *)v51 - 1) = *((_OWORD *)v36 - 1);
          v51 -= 16;
          v36 -= 16;
        }
        while (v36 != v45);
        int v45 = *(char **)buf;
      }
      *(void *)buf = v51;
      *(void *)&buf[8] = v44;
      *(void *)&uint8_t buf[16] = v34;
      if (v45)
      {
        operator delete(v45);
        char v34 = *(char **)&buf[16];
      }
    }
    else
    {
      *(double *)int v36 = v27;
      *((void *)v36 + 1) = v23;
      int v44 = v36 + 16;
    }
    *(void *)&buf[8] = v44;
    if (v44 >= v34)
    {
      char v53 = *(char **)buf;
      uint64_t v54 = (uint64_t)&v44[-*(void *)buf] >> 4;
      unint64_t v55 = v54 + 1;
      if ((unint64_t)(v54 + 1) >> 60) {
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v56 = (uint64_t)&v34[-*(void *)buf];
      if (v56 >> 3 > v55) {
        unint64_t v55 = v56 >> 3;
      }
      if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v57 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v57 = v55;
      }
      if (v57)
      {
        char v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>>((uint64_t)&buf[16], v57);
        char v53 = *(char **)buf;
        int v44 = *(char **)&buf[8];
      }
      else
      {
        char v58 = 0;
      }
      uint64_t v59 = &v58[16 * v54];
      char v34 = &v58[16 * v57];
      *(void *)uint64_t v59 = v25;
      *((void *)v59 + 1) = v23;
      char v52 = v59 + 16;
      if (v44 != v53)
      {
        do
        {
          *((_OWORD *)v59 - 1) = *((_OWORD *)v44 - 1);
          v59 -= 16;
          v44 -= 16;
        }
        while (v44 != v53);
        char v53 = *(char **)buf;
      }
      *(void *)buf = v59;
      *(void *)&buf[8] = v52;
      *(void *)&uint8_t buf[16] = v34;
      if (v53)
      {
        operator delete(v53);
        char v34 = *(char **)&buf[16];
      }
    }
    else
    {
      *(void *)int v44 = v25;
      *((void *)v44 + 1) = v23;
      char v52 = v44 + 16;
    }
    *(void *)&buf[8] = v52;
    if (v52 >= v34)
    {
      char v61 = *(char **)buf;
      uint64_t v62 = (uint64_t)&v52[-*(void *)buf] >> 4;
      unint64_t v63 = v62 + 1;
      if ((unint64_t)(v62 + 1) >> 60) {
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v64 = (uint64_t)&v34[-*(void *)buf];
      if (v64 >> 3 > v63) {
        unint64_t v63 = v64 >> 3;
      }
      if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v65 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v65 = v63;
      }
      if (v65)
      {
        unsigned int v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>>((uint64_t)&buf[16], v65);
        char v61 = *(char **)buf;
        char v52 = *(char **)&buf[8];
      }
      else
      {
        unsigned int v66 = 0;
      }
      unsigned int v67 = &v66[16 * v62];
      char v34 = &v66[16 * v65];
      *(void *)unsigned int v67 = v25;
      *((double *)v67 + 1) = v21;
      char v60 = v67 + 16;
      if (v52 != v61)
      {
        do
        {
          *((_OWORD *)v67 - 1) = *((_OWORD *)v52 - 1);
          v67 -= 16;
          v52 -= 16;
        }
        while (v52 != v61);
        char v61 = *(char **)buf;
      }
      *(void *)buf = v67;
      *(void *)&buf[8] = v60;
      *(void *)&uint8_t buf[16] = v34;
      if (v61)
      {
        operator delete(v61);
        char v34 = *(char **)&buf[16];
      }
    }
    else
    {
      *(void *)char v52 = v25;
      *((double *)v52 + 1) = v21;
      char v60 = v52 + 16;
    }
    *(void *)&buf[8] = v60;
    if (v60 >= v34)
    {
      unsigned int v69 = *(char **)buf;
      uint64_t v70 = (uint64_t)&v60[-*(void *)buf] >> 4;
      unint64_t v71 = v70 + 1;
      if ((unint64_t)(v70 + 1) >> 60) {
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v72 = (uint64_t)&v34[-*(void *)buf];
      if (v72 >> 3 > v71) {
        unint64_t v71 = v72 >> 3;
      }
      if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v73 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v73 = v71;
      }
      if (v73)
      {
        unsigned int v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>>((uint64_t)&buf[16], v73);
        unsigned int v69 = *(char **)buf;
        char v60 = *(char **)&buf[8];
      }
      else
      {
        unsigned int v74 = 0;
      }
      int v75 = (double *)&v74[16 * v70];
      char v34 = &v74[16 * v73];
      *int v75 = v27;
      v75[1] = v21;
      BOOL v68 = v75 + 2;
      if (v60 != v69)
      {
        do
        {
          *((_OWORD *)v75 - 1) = *((_OWORD *)v60 - 1);
          v75 -= 2;
          v60 -= 16;
        }
        while (v60 != v69);
        unsigned int v69 = *(char **)buf;
      }
      *(void *)buf = v75;
      *(void *)&buf[8] = v68;
      *(void *)&uint8_t buf[16] = v34;
      if (v69)
      {
        operator delete(v69);
        char v34 = *(char **)&buf[16];
      }
    }
    else
    {
      *(double *)char v60 = v27;
      *((double *)v60 + 1) = v21;
      BOOL v68 = v60 + 16;
    }
    int v120 = *(void **)buf;
    uint64_t v121 = v68;
    unsigned int v122 = v34;
  }
  if (UInteger >= 4)
  {
    int v76 = GEOGetGloriaUtilLog();
    if (os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v78 = v120;
      unsigned int v77 = v121;
      unint64_t v79 = _polygonToString(&v120);
      *(_DWORD *)buf = 134218242;
      *(void *)&buf[4] = (v77 - v78) >> 4;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v79;
      _os_log_impl(&dword_188D96000, v76, OS_LOG_TYPE_DEBUG, "  polygon has %zd points: %@", buf, 0x16u);
    }
LABEL_103:

    -[GEOTerritoryDataTerritoryInfo polygon]((id *)v5);
    int v80 = (id *)objc_claimAutoreleasedReturnValue();
    unint64_t v81 = -[GEOTerritoryDataPolygon holes](v80);
    BOOL v82 = [v81 count] == 0;

    if (v82)
    {
      unsigned int v83 = GEOGetGloriaUtilLog();
      if (os_log_type_enabled(v83, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_188D96000, v83, OS_LOG_TYPE_DEBUG, "  polygon has no holes", buf, 2u);
      }
    }
    int v84 = 1;
    goto LABEL_109;
  }
  if (UInteger >= 2)
  {
    int v76 = GEOGetGloriaUtilLog();
    if (os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      *(void *)&buf[4] = (v121 - (unsigned char *)v120) >> 4;
      _os_log_impl(&dword_188D96000, v76, OS_LOG_TYPE_DEBUG, "  polygon has %zd points", buf, 0xCu);
    }
    goto LABEL_103;
  }
  int v84 = 0;
LABEL_109:
  if ((geo::containsPoint<double>((uint64_t *)&v120, (double *)&v129) & 1) == 0
    && !geo::Polygon2<double>::intersects((uint64_t *)&v120, (double *)&v127))
  {
    uint64_t v107 = 0;
    goto LABEL_144;
  }
  long long v118 = 0u;
  long long v119 = 0u;
  long long v116 = 0u;
  long long v117 = 0u;
  -[GEOTerritoryDataTerritoryInfo polygon]((id *)v5);
  unsigned int v85 = (id *)objc_claimAutoreleasedReturnValue();
  unsigned int v86 = -[GEOTerritoryDataPolygon holes](v85);

  uint64_t v87 = [v86 countByEnumeratingWithState:&v116 objects:v130 count:16];
  if (!v87)
  {
    uint64_t v107 = 1;
    goto LABEL_142;
  }
  uint64_t v88 = *(void *)v117;
  int64x2_t v110 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  int64x2_t v111 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  while (2)
  {
    uint64_t v109 = v87;
    for (uint64_t i = 0; i != v109; ++i)
    {
      if (*(void *)v117 != v88) {
        objc_enumerationMutation(v86);
      }
      uint64_t v90 = *(void *)(*((void *)&v116 + 1) + 8 * i);
      v115[0] = v111;
      v115[1] = v110;
      if (v90)
      {
        int v91 = (uint64_t *)(v90 + 8);
        uint64_t v92 = *v91;
        unint64_t v93 = v91[1];
      }
      else
      {
        uint64_t v92 = 0;
        unint64_t v93 = 0;
      }
      _polygonForPackedPoints((char **)&__p, v92, v93, v124, 5, v115);
      if (UInteger < 4)
      {
        if (!v84) {
          goto LABEL_125;
        }
        uint64_t v94 = GEOGetGloriaUtilLog();
        if (os_log_type_enabled(v94, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134217984;
          *(void *)&buf[4] = (v114 - (unsigned char *)__p) >> 4;
          _os_log_impl(&dword_188D96000, v94, OS_LOG_TYPE_DEBUG, "  hole has %zd points", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v94 = GEOGetGloriaUtilLog();
        if (os_log_type_enabled(v94, OS_LOG_TYPE_DEBUG))
        {
          unint64_t v95 = v86;
          unint64_t v96 = UInteger;
          unint64_t v97 = v5;
          unsigned int v99 = __p;
          unsigned int v98 = v114;
          BOOL v100 = _polygonToString(&__p);
          *(_DWORD *)buf = 134218242;
          *(void *)&buf[4] = (v98 - v99) >> 4;
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v100;
          _os_log_impl(&dword_188D96000, v94, OS_LOG_TYPE_DEBUG, "  hole has %zd points: %@", buf, 0x16u);

          BOOL v5 = v97;
          unint64_t UInteger = v96;
          unsigned int v86 = v95;
        }
      }

LABEL_125:
      unint64_t v101 = UInteger;
      if (geo::containsPoint<double>((uint64_t *)&__p, (double *)&v129))
      {
        unsigned int v103 = (float64x2_t *)__p;
        unsigned int v102 = (float64x2_t *)v114;
        if (__p == v114)
        {
LABEL_138:
          id v6 = v112;
          if (v102)
          {
            unsigned int v114 = v102;
            operator delete(v102);
          }
          uint64_t v107 = 0;
          goto LABEL_142;
        }
        double v104 = v128 * v128;
        uint64_t v105 = (float64x2_t *)(v114 - 16);
        while (1)
        {
          float64x2_t v106 = vsubq_f64(*v103, *v105);
          *(float64x2_t *)buf = *v105;
          *(float64x2_t *)&uint8_t buf[16] = v106;
          if (gm::LineSegment<double,2>::distanceSquaredTo((double *)buf, (double *)&v127) <= v104) {
            break;
          }
          uint64_t v105 = v103++;
          if (v103 == v102)
          {
            unsigned int v102 = (float64x2_t *)__p;
            goto LABEL_138;
          }
        }
      }
      if (__p)
      {
        unsigned int v114 = __p;
        operator delete(__p);
      }
      id v6 = v112;
      unint64_t UInteger = v101;
    }
    uint64_t v87 = [v86 countByEnumeratingWithState:&v116 objects:v130 count:16];
    uint64_t v107 = 1;
    if (v87) {
      continue;
    }
    break;
  }
LABEL_142:

LABEL_144:
  if (v120)
  {
    uint64_t v121 = v120;
    operator delete(v120);
  }

  return v107;
}

void sub_188E63B2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_188E63D88(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t geo::containsPoint<double>(uint64_t *a1, double *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = v2 - *a1;
  if (v2 == *a1)
  {
    int v5 = 0;
  }
  else
  {
    int v5 = 0;
    unint64_t v6 = 0;
    unint64_t v7 = v4 >> 4;
    double v9 = *a2;
    double v8 = a2[1];
    if ((unint64_t)(v4 >> 4) <= 1) {
      uint64_t v10 = 1;
    }
    else {
      uint64_t v10 = v4 >> 4;
    }
    LODWORD(v4) = 1;
    do
    {
      uint64_t v11 = 0;
      uint64_t v12 = (double *)(v3 + 16 * v6++);
      char v13 = 1;
      do
      {
        double v14 = v12[v11];
        double v15 = a2[v11];
        double v16 = vabdd_f64(v14, v15);
        BOOL v17 = v16 <= fabs(v14 + v15) * 2.22044605e-16 * 100.0 || v16 <= 2.22507386e-308;
        if ((v13 & 1) == 0) {
          break;
        }
        char v13 = 0;
        uint64_t v11 = 1;
      }
      while (v17);
      unint64_t v18 = v6 == v7 ? 0 : v6;
      if (v17) {
        break;
      }
      double v19 = (double *)(v3 + 16 * v18);
      double v20 = v12[1];
      double v21 = v19[1];
      if (v20 == v21 && v20 == v8)
      {
        double v23 = *v19;
        if (*v12 <= v9 && v23 >= v9) {
          break;
        }
        if (*v12 >= v9 && v23 <= v9) {
          break;
        }
      }
      BOOL v26 = v20 > v8 || v21 <= v8;
      if (!v26 || (v20 > v8 ? (BOOL v27 = v21 > v8) : (BOOL v27 = 1), !v27))
      {
        double v28 = *v12;
        if (*v12 != *v19) {
          double v28 = v28 + (v8 - v20) / ((v21 - v20) / (*v19 - v28));
        }
        double v29 = vabdd_f64(v9, v28);
        double v30 = fabs(v9 + v28) * 2.22044605e-16 * 100.0;
        if (v29 < 2.22507386e-308 || v29 <= v30) {
          return (v4 | v5) & 1;
        }
        if (v28 < v9) {
          ++v5;
        }
      }
      LODWORD(v4) = v6 < v7;
    }
    while (v6 != v10);
  }
  return (v4 | v5) & 1;
}

id _GEOURLWorldDefaultURLStringWithSource(uint64_t a1, uint64_t *a2, int a3)
{
  long long v17 = 0u;
  memset(v16, 0, sizeof(v16));
  unint64_t v6 = +[GEOPlatform sharedPlatform];
  int v7 = [v6 isInternalInstall];

  if (v7)
  {
    int BOOL = GEOConfigGetBOOL(GeoServicesConfig_UseProductionURLs, (uint64_t)off_1E9115608);
    if (!a3)
    {
LABEL_8:
      char v13 = (void *)*((void *)&v17 + 1);
      uint64_t v12 = (void *)v17;
      if (BOOL) {
        uint64_t v12 = (void *)*((void *)&v17 + 1);
      }
      id v10 = v12;
      if (v10) {
        char v14 = 1;
      }
      else {
        char v14 = BOOL;
      }
      if ((v14 & 1) == 0) {
        id v10 = v13;
      }
      uint64_t v11 = 7;
      if (!v10) {
        uint64_t v11 = 0;
      }
      if (a2) {
        goto LABEL_18;
      }
      goto LABEL_19;
    }
  }
  else
  {
    int BOOL = 1;
    if (!a3) {
      goto LABEL_8;
    }
  }
  double v9 = _GEOURLInfoFromActiveTileGroup(a1);
  id v10 = [v9 url];

  if (!v10) {
    goto LABEL_8;
  }
  uint64_t v11 = 6;
  if (a2) {
LABEL_18:
  }
    *a2 = v11;
LABEL_19:

  return v10;
}

id _GEOGetURLWithSource(uint64_t a1, void *a2, int a3, void *a4)
{
  id v7 = a4;
  v32[0] = MEMORY[0x1E4F143A8];
  v32[1] = 3221225472;
  v32[2] = ___GEOGetURLWithSource_block_invoke;
  v32[3] = &unk_1E53EADD8;
  id v33 = v7;
  uint64_t v34 = a1;
  id v8 = v7;
  double v9 = (void (**)(void, void))MEMORY[0x18C120660](v32);
  long long v30 = 0u;
  long long v31 = 0u;
  long long v29 = 0u;
  _recordForType(a1, (uint64_t)&v29);
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  int v10 = DWORD2(v29);
  uint64_t v11 = v30;
  uint64_t v12 = _getValue(SDWORD2(v29), v30, 1, 0, &v27, v9);
  char v13 = v12;
  if (v12)
  {
    switch(v27)
    {
      case 1:
        uint64_t v15 = 1;
        goto LABEL_7;
      case 2:
      case 7:
      case 8:
        uint64_t v28 = 2;
        id v14 = v12;
        goto LABEL_21;
      case 3:
        uint64_t v15 = 4;
        goto LABEL_7;
      case 4:
        uint64_t v15 = 5;
LABEL_7:
        uint64_t v28 = v15;
        break;
      default:
        break;
    }
    id v16 = v12;
  }
  long long v17 = _getValue(GeoServicesConfig_CustomEnvironmentConfiguration, (uint64_t)off_1E91155F8, 1, 0, 0, 0);
  if (v17) {
    BOOL v18 = v10 == 0;
  }
  else {
    BOOL v18 = 1;
  }
  BOOL v19 = v18 || v11 == 0;
  id v14 = v13;
  if (!v19)
  {
    int v26 = a3;
    double v20 = GEODefaultsKeyStringForConfigKey(v10, v11);
    double v21 = [v17 objectForKey:v20];
    uint64_t v22 = ((void (**)(void, void *))v9)[2](v9, v21);
    double v23 = v22;
    id v14 = v13;
    if (v22)
    {
      id v14 = v22;

      uint64_t v28 = 3;
    }

    a3 = v26;
  }

  if (!v14)
  {
    uint64_t v24 = _GEOURLWorldDefaultURLStringWithSource(a1, &v28, a3);
    ((void (**)(void, void *))v9)[2](v9, v24);
    id v14 = (id)objc_claimAutoreleasedReturnValue();
  }
LABEL_21:
  if (a2) {
    *a2 = v28;
  }

  return v14;
}

__n128 _recordForType@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v295 = *MEMORY[0x1E4F143B8];
  self;
  if (registerStateCaptureIfNecessary_onceToken != -1) {
    dispatch_once(&registerStateCaptureIfNecessary_onceToken, &__block_literal_global_261_1);
  }
  uint64_t v5 = 0;
  uint64_t v7 = 0;
  long long v8 = GeoServicesConfig_NetworkDefaultsURL;
  uint64_t v9 = 0;
  v10[0] = @"https://configuration-carry.ls.apple.com/config/defaults";
  v10[1] = @"https://configuration.ls.apple.com/config/defaults";
  v10[2] = 1;
  long long v11 = GeoServicesConfig_ResourceManifestURL;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  id v14 = @"https://gspe35-ssl.ls.apple.com/geo_manifest/dynamic/config%{DEVICE_QUERY}";
  uint64_t v15 = 2;
  long long v16 = GeoServicesConfig_VoltaireDirectionsURL;
  long long v17 = @"Directions";
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 5;
  long long v21 = GeoServicesConfig_VoltaireETAURL;
  uint64_t v22 = @"ETA";
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 9;
  long long v26 = GeoServicesConfig_SearchAttributionManifestURL;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 10;
  long long v31 = GeoServicesConfig_VoltaireProblemSubmissionURL;
  uint64_t v32 = @"ProblemSubmission";
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 11;
  long long v36 = GeoServicesConfig_VoltaireProblemStatusURL;
  char v37 = @"ProblemStatus";
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v40 = 12;
  long long v41 = GeoServicesConfig_LocalizedCategoriesURL;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  uint64_t v45 = 14;
  long long v46 = GeoServicesConfig_CurrentCountryURL;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  unint64_t v49 = @"https://gspe1-ssl.ls.apple.com/pep/gcc";
  uint64_t v50 = 15;
  long long v51 = GeoServicesConfig_VoltairePolyLocationShiftURL;
  char v52 = @"LocationShift";
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  uint64_t v55 = 16;
  long long v56 = GeoServicesConfig_VoltaireBatchReverseGeocoderURL;
  uint64_t v59 = 0;
  uint64_t v60 = 18;
  unint64_t v57 = @"BatchReverseGeocode";
  uint64_t v58 = 0;
  long long v61 = GeoServicesConfig_URLSimpleETAURL;
  uint64_t v62 = @"SimpleETA";
  uint64_t v64 = 0;
  uint64_t v65 = 19;
  uint64_t v63 = 0;
  long long v66 = GeoServicesConfig_URLAddressCorrectionInitURL;
  unsigned int v67 = @"AddressCorrection";
  uint64_t v70 = 20;
  uint64_t v69 = 0;
  uint64_t v68 = 0;
  long long v71 = GeoServicesConfig_URLAddressCorrectionUpdateURL;
  uint64_t v72 = @"AddressCorrection";
  uint64_t v74 = 0;
  uint64_t v73 = 0;
  uint64_t v75 = 21;
  long long v76 = GeoServicesConfig_URLReverseGeocoderVersionFileURL;
  uint64_t v78 = 0;
  uint64_t v77 = 0;
  uint64_t v79 = 0;
  uint64_t v80 = 23;
  long long v81 = GeoServicesConfig_VoltaireAnnouncementsURL;
  uint64_t v83 = 0;
  uint64_t v82 = 0;
  uint64_t v85 = 24;
  uint64_t v84 = 0;
  long long v86 = GeoServicesConfig_DispatcherURL;
  uint64_t v87 = @"PlaceDataLookup";
  uint64_t v89 = 0;
  uint64_t v90 = 25;
  uint64_t v88 = 0;
  long long v91 = GeoServicesConfig_ProblemOptInURL;
  uint64_t v92 = @"ProblemOptIn";
  uint64_t v94 = 0;
  uint64_t v95 = 26;
  uint64_t v93 = 0;
  long long v96 = GeoServicesConfig_ExperimentsURL;
  unint64_t v97 = @"ExperimentRequest";
  uint64_t v99 = 0;
  uint64_t v100 = 27;
  uint64_t v98 = 0;
  long long v101 = GeoServicesConfig_BusinessPortalBaseURL;
  unsigned int v102 = @"BusinessPortalBaseURL";
  uint64_t v104 = 0;
  uint64_t v105 = 28;
  uint64_t v103 = 0;
  long long v106 = GeoServicesConfig_VoltaireLogMessageUsageURL;
  uint64_t v107 = @"LogMessageUsageURL";
  uint64_t v109 = 0;
  uint64_t v110 = 29;
  uint64_t v108 = 0;
  long long v111 = GeoServicesConfig_SpatialLookupURL;
  id v112 = @"SpatialLookup";
  uint64_t v114 = 0;
  uint64_t v115 = 30;
  uint64_t v113 = 0;
  long long v116 = GeoServicesConfig_RealtimeTrafficProbeURL;
  long long v117 = @"RealtimeTrafficProbe";
  uint64_t v119 = 0;
  uint64_t v120 = 31;
  uint64_t v118 = 0;
  long long v121 = GeoServicesConfig_BatchTrafficProbeURL;
  unsigned int v122 = @"BatchTrafficProbe";
  uint64_t v124 = 0;
  uint64_t v125 = 32;
  uint64_t v123 = 0;
  long long v126 = GeoServicesConfig_LogMessageUsageV3URL;
  long long v127 = @"LogMessageUsageV3URL";
  uint64_t v129 = 0;
  uint64_t v130 = 33;
  uint64_t v128 = 0;
  long long v131 = GeoServicesConfig_ProactiveRoutingURL;
  uint64_t v132 = @"ProactiveRouting";
  uint64_t v134 = 0;
  uint64_t v135 = 34;
  uint64_t v133 = 0;
  long long v136 = GeoServicesConfig_BackgroundDispatcherURL;
  uint64_t v137 = @"BackgroundDispatcher";
  uint64_t v139 = 0;
  uint64_t v140 = 35;
  uint64_t v138 = 0;
  long long v141 = GeoServicesConfig_BluePOIURL;
  unsigned int v142 = @"BluePOI";
  uint64_t v144 = 0;
  uint64_t v145 = 36;
  uint64_t v143 = 0;
  long long v146 = GeoServicesConfig_BackgroundRevGeoURL;
  int v147 = @"BackgroundRevGeo";
  uint64_t v149 = 0;
  uint64_t v150 = 37;
  uint64_t v148 = 0;
  long long v151 = GeoServicesConfig_ImageServiceURL;
  unint64_t v152 = @"ImageService";
  uint64_t v154 = 0;
  uint64_t v155 = 38;
  uint64_t v153 = 0;
  long long v156 = GeoServicesConfig_WiFiConnectionQualityProbeURL;
  int v157 = @"WiFiConnectionQualityProbe";
  unsigned int v158 = @"https://gsp10-carry.ls.apple.com/hvr/wcq";
  uint64_t v159 = 0;
  uint64_t v160 = 39;
  long long v161 = GeoServicesConfig_MapsAuthProxy;
  uint64_t v163 = 0;
  uint64_t v162 = 0;
  uint64_t v165 = 40;
  uint64_t v164 = 0;
  long long v166 = GeoServicesConfig_MuninBaseURL;
  unsigned int v167 = @"MuninBase";
  uint64_t v169 = 0;
  uint64_t v170 = 41;
  uint64_t v168 = 0;
  long long v171 = GeoServicesConfig_WiFiQualityURL;
  unsigned int v172 = @"WiFiQuality";
  uint64_t v174 = 0;
  uint64_t v175 = 42;
  uint64_t v173 = 0;
  long long v176 = GeoServicesConfig_FeedbackSubmissionURL;
  unsigned int v177 = @"RAPFeedbackSubmission";
  uint64_t v179 = 0;
  uint64_t v180 = 43;
  uint64_t v178 = 0;
  long long v181 = GeoServicesConfig_FeedbackLookupURL;
  unsigned int v182 = @"RAPFeedbackLookup";
  uint64_t v184 = 0;
  uint64_t v185 = 44;
  uint64_t v183 = 0;
  long long v186 = GeoServicesConfig_AnalyticsCohortSessionURL;
  uint64_t v188 = 0;
  uint64_t v187 = 0;
  uint64_t v189 = 0;
  uint64_t v190 = 45;
  long long v191 = GeoServicesConfig_AnalyticsLongSessionURL;
  uint64_t v193 = 0;
  uint64_t v192 = 0;
  uint64_t v194 = 0;
  uint64_t v195 = 46;
  long long v196 = GeoServicesConfig_AnalyticsShortSessionURL;
  uint64_t v198 = 0;
  uint64_t v197 = 0;
  uint64_t v200 = 47;
  uint64_t v199 = 0;
  long long v201 = GeoServicesConfig_AnalyticsSessionlessURL;
  uint64_t v203 = 0;
  uint64_t v202 = 0;
  uint64_t v204 = 0;
  uint64_t v205 = 48;
  long long v206 = GeoServicesConfig_WebModuleBaseURL;
  unsigned int v207 = @"WebModuleBase";
  uint64_t v209 = 0;
  uint64_t v208 = 0;
  uint64_t v210 = 49;
  long long v211 = GeoServicesConfig_WiFiTileURL;
  unsigned int v212 = @"WiFiTile";
  int v213 = @"https://gsp85-carry.ls.apple.com/wifi_request_tile";
  uint64_t v214 = 0;
  uint64_t v215 = 50;
  long long v216 = GeoServicesConfig_TokenAuthenticationURL;
  unint64_t v217 = @"UGCTokenAuthentication";
  uint64_t v219 = 0;
  uint64_t v220 = 51;
  uint64_t v218 = 0;
  long long v221 = GeoServicesConfig_MapsAuthClientFeatureFlags;
  uint64_t v223 = 0;
  uint64_t v222 = 0;
  uint64_t v224 = 0;
  uint64_t v225 = 52;
  long long v226 = GeoServicesConfig_AddressCorrectionTaggedLocationURL;
  uint64_t v228 = 0;
  uint64_t v227 = 0;
  uint64_t v229 = 0;
  uint64_t v230 = 53;
  long long v231 = GeoServicesConfig_EnrichmentSubmissionURL;
  unint64_t v232 = @"POIEnrichmentSubmission";
  uint64_t v234 = 0;
  uint64_t v233 = 0;
  uint64_t v235 = 54;
  long long v236 = GeoServicesConfig_UGCDeleteServiceURL;
  uint64_t v238 = 0;
  uint64_t v237 = 0;
  uint64_t v240 = 55;
  uint64_t v239 = 0;
  long long v241 = GeoServicesConfig_BatchRevGeoPlaceRequestURL;
  uint64_t v243 = 0;
  uint64_t v242 = 0;
  uint64_t v244 = 0;
  uint64_t v245 = 56;
  long long v246 = GeoServicesConfig_PressureDataURL;
  uint64_t v248 = 0;
  uint64_t v247 = 0;
  uint64_t v249 = 0;
  uint64_t v250 = 57;
  long long v251 = GeoServicesConfig_BusynessDataURL;
  uint64_t v253 = 0;
  uint64_t v252 = 0;
  uint64_t v255 = 58;
  uint64_t v254 = 0;
  long long v256 = GeoServicesConfig_RAPWebModuleBaseURL;
  uint64_t v258 = 0;
  uint64_t v257 = 0;
  uint64_t v259 = 0;
  uint64_t v260 = 59;
  long long v261 = GeoServicesConfig_NetworkSelectionHarvestURL;
  uint64_t v263 = 0;
  uint64_t v262 = 0;
  uint64_t v264 = 0;
  uint64_t v265 = 60;
  long long v266 = GeoOfflineConfig_BatchListURL;
  uint64_t v268 = 0;
  uint64_t v267 = 0;
  uint64_t v270 = 61;
  uint64_t v269 = 0;
  long long v271 = GeoOfflineConfig_SizeURL;
  uint64_t v273 = 0;
  uint64_t v272 = 0;
  uint64_t v274 = 0;
  uint64_t v275 = 62;
  long long v276 = GeoOfflineConfig_DownloadURL;
  uint64_t v278 = 0;
  uint64_t v277 = 0;
  uint64_t v279 = 0;
  uint64_t v280 = 63;
  long long v281 = GeoServicesConfig_BCXDispatcherURL;
  uint64_t v283 = 0;
  uint64_t v282 = 0;
  uint64_t v285 = 64;
  uint64_t v284 = 0;
  long long v286 = GeoServicesConfig_ConnectivityCheckURL;
  uint64_t v288 = 0;
  uint64_t v287 = 0;
  int v289 = @"https://gspe1-ssl.ls.apple.com/pep/gcc";
  uint64_t v290 = 65;
  long long v291 = GeoServicesConfig_CoreLocationKACURL;
  uint64_t v293 = 0;
  uint64_t v292 = 0;
  v294 = @"https://gspe79-ssl.ls.apple.com/ligl/v1/ligl.bin";
  while (*(uint64_t *)((char *)&v7 + v5 * 8) != a1)
  {
    v5 += 6;
    if (v5 == 348)
    {
      *(void *)a2 = 0;
      result.n128_u64[0] = GEOConfigKey_InvalidString;
      *(_OWORD *)(a2 + 8) = GEOConfigKey_InvalidString;
      *(void *)(a2 + 32) = 0;
      *(void *)(a2 + 40) = 0;
      *(void *)(a2 + 24) = 0;
      return result;
    }
  }
  long long v6 = *(long long *)((char *)&v8 + v5 * 8 + 8);
  *(_OWORD *)a2 = *(_OWORD *)((char *)&v7 + v5 * 8);
  *(_OWORD *)(a2 + 16) = v6;
  __n128 result = *(__n128 *)&v10[v5];
  *(__n128 *)(a2 + 32) = result;
  return result;
}

void sub_188E6500C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTerritoryDataTerritoryInfoReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 104));
  long long v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 100);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 96)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  unsigned int v11 = (vaddv_s16((int16x4_t)(*(void *)&vshl_u16((uint16x4_t)(*(void *)&vdup_n_s16(*(unsigned __int8 *)(a1 + 112)) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFEFFFAFFFDFFFBLL) & 0xFF01FF01FF01FF01))+ ((*(unsigned char *)(a1 + 112) & 0x10) != 0));
  while (2)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    switch(a3[v7])
    {
      case -3:
        char v8 = 1;
        goto LABEL_6;
      case -2:
        uint64_t v12 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        BOOL v14 = v11 > 3;
        char v15 = v10 | v14;
        if (((v10 | v14) | v8)) {
          long long v16 = 0;
        }
        else {
          long long v16 = a3;
        }
        long long v17 = (int *)MEMORY[0x1E4F940E8];
        uint64_t v18 = (int *)MEMORY[0x1E4F940C8];
        if (*(void *)(v3 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(v3 + *v6)) {
          goto LABEL_138;
        }
        char v87 = (v16 == 0) | v15;
        uint64_t v19 = (int *)MEMORY[0x1E4F940B8];
        char v86 = v10 | v14;
        break;
      default:
        ++v11;
LABEL_6:
        uint64_t v12 = v9;
        uint64_t v13 = v10;
LABEL_8:
        ++v7;
        uint64_t v9 = v12;
        uint64_t v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(unsigned char *)(v3 + *v18)) {
      goto LABEL_138;
    }
    char v20 = 0;
    unsigned int v21 = 0;
    unint64_t v22 = 0;
    while (1)
    {
      uint64_t v23 = *v17;
      unint64_t v24 = *(void *)(v3 + v23);
      if (v24 == -1 || v24 >= *(void *)(v3 + *v6)) {
        break;
      }
      char v25 = *(unsigned char *)(*(void *)(v3 + *v19) + v24);
      *(void *)(v3 + v23) = v24 + 1;
      v22 |= (unint64_t)(v25 & 0x7F) << v20;
      if ((v25 & 0x80) == 0) {
        goto LABEL_23;
      }
      v20 += 7;
      BOOL v26 = v21++ >= 9;
      if (v26)
      {
        unint64_t v22 = 0;
        int v27 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_25;
      }
    }
    *(unsigned char *)(v3 + *v18) = 1;
LABEL_23:
    int v27 = *(unsigned __int8 *)(v3 + *v18);
    if (*(unsigned char *)(v3 + *v18)) {
      unint64_t v22 = 0;
    }
LABEL_25:
    int v28 = v22 & 7;
    if (v27 || v28 == 4)
    {
LABEL_138:
      if (v15)
      {
        char v80 = 1;
        goto LABEL_140;
      }
      if (v16)
      {
        while (1)
        {
          int v81 = *v16++;
          char v82 = 8;
          switch(v81)
          {
            case 0:
              goto LABEL_150;
            case 1:
              goto LABEL_149;
            case 3:
              char v82 = 32;
              goto LABEL_149;
            case 5:
              char v82 = 64;
              goto LABEL_149;
            case 6:
              char v82 = 4;
              goto LABEL_149;
            case 7:
              char v82 = 16;
LABEL_149:
              *(unsigned char *)(a1 + 112) |= v82;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_150;
    }
    unint64_t v30 = v22 >> 3;
    BOOL v31 = v15;
    if ((v87 & 1) == 0)
    {
      uint64_t v32 = v16;
      do
      {
        int v34 = *v32++;
        int v33 = v34;
        BOOL v31 = v34 != 0;
        if (v34) {
          BOOL v35 = v33 == v30;
        }
        else {
          BOOL v35 = 1;
        }
      }
      while (!v35);
    }
    switch((int)v30)
    {
      case 1:
        if (!v31 || (*(unsigned char *)(a1 + 112) & 8) != 0) {
          goto LABEL_98;
        }
        if (v28 != 2)
        {
          char v68 = 0;
          unsigned int v69 = 0;
          uint64_t v70 = 0;
          while (1)
          {
            uint64_t v71 = *v17;
            unint64_t v72 = *(void *)(v3 + v71);
            if (v72 == -1 || v72 >= *(void *)(v3 + *v6)) {
              break;
            }
            char v73 = *(unsigned char *)(*(void *)(v3 + *v19) + v72);
            *(void *)(v3 + v71) = v72 + 1;
            v70 |= (unint64_t)(v73 & 0x7F) << v68;
            if (v73 < 0)
            {
              v68 += 7;
              BOOL v26 = v69++ >= 9;
              if (!v26) {
                continue;
              }
            }
            goto LABEL_135;
          }
          *(unsigned char *)(v3 + *v18) = 1;
LABEL_135:
          PBRepeatedInt32Add();
          goto LABEL_115;
        }
        if (!PBReaderPlaceMark()) {
          goto LABEL_155;
        }
        while (1)
        {
          long long v36 = (int *)MEMORY[0x1E4F940C8];
          if (*(void *)(v3 + *v17) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + (int)*MEMORY[0x1E4F940C8])) {
            goto LABEL_119;
          }
          char v37 = 0;
          unsigned int v38 = 0;
          uint64_t v39 = 0;
          while (1)
          {
            uint64_t v40 = *v17;
            unint64_t v41 = *(void *)(v3 + v40);
            if (v41 == -1 || v41 >= *(void *)(v3 + *v6)) {
              break;
            }
            char v42 = *(unsigned char *)(*(void *)(v3 + *v19) + v41);
            *(void *)(v3 + v40) = v41 + 1;
            v39 |= (unint64_t)(v42 & 0x7F) << v37;
            if (v42 < 0)
            {
              v37 += 7;
              BOOL v26 = v38++ >= 9;
              if (!v26) {
                continue;
              }
            }
            goto LABEL_51;
          }
          *(unsigned char *)(v3 + *v36) = 1;
LABEL_51:
          PBRepeatedInt32Add();
        }
      case 2:
        if ((v8 & 1) == 0) {
          goto LABEL_98;
        }
        char v44 = 0;
        unsigned int v45 = 0;
        uint64_t v46 = 0;
        *(unsigned char *)(a1 + 112) |= 2u;
        while (2)
        {
          uint64_t v47 = *v17;
          unint64_t v48 = *(void *)(v3 + v47);
          if (v48 == -1 || v48 >= *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v18) = 1;
          }
          else
          {
            char v49 = *(unsigned char *)(*(void *)(v3 + *v19) + v48);
            *(void *)(v3 + v47) = v48 + 1;
            v46 |= (unint64_t)(v49 & 0x7F) << v44;
            if (v49 < 0)
            {
              v44 += 7;
              BOOL v26 = v45++ >= 9;
              if (v26)
              {
                LODWORD(v46) = 0;
                goto LABEL_103;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v18)) {
          LODWORD(v46) = 0;
        }
LABEL_103:
        *(_DWORD *)(a1 + 108) = v46;
        goto LABEL_116;
      case 3:
        if (!v31) {
          goto LABEL_98;
        }
        if ((*(unsigned char *)(a1 + 112) & 0x20) == 0)
        {
          uint64_t v50 = PBReaderReadString();
          uint64_t v51 = 80;
          goto LABEL_96;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_155;
        }
        char v67 = 4 * *(unsigned char *)(a1 + 112);
        goto LABEL_114;
      case 4:
        if ((v8 & 1) == 0) {
          goto LABEL_98;
        }
        char v52 = 0;
        unsigned int v53 = 0;
        uint64_t v54 = 0;
        *(unsigned char *)(a1 + 112) |= 1u;
        while (2)
        {
          uint64_t v55 = *v17;
          unint64_t v56 = *(void *)(v3 + v55);
          if (v56 == -1 || v56 >= *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v18) = 1;
          }
          else
          {
            char v57 = *(unsigned char *)(*(void *)(v3 + *v19) + v56);
            *(void *)(v3 + v55) = v56 + 1;
            v54 |= (unint64_t)(v57 & 0x7F) << v52;
            if (v57 < 0)
            {
              v52 += 7;
              BOOL v26 = v53++ >= 9;
              if (v26)
              {
                uint64_t v54 = 0;
                goto LABEL_107;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v18)) {
          uint64_t v54 = 0;
        }
LABEL_107:
        *(void *)(a1 + 64) = v54;
        goto LABEL_116;
      case 5:
        if (!v31) {
          goto LABEL_98;
        }
        if ((*(unsigned char *)(a1 + 112) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_155;
          }
          char v67 = 2 * *(unsigned char *)(a1 + 112);
LABEL_114:
          v7 += v67 >> 7;
LABEL_115:
          char v15 = v86;
          uint64_t v18 = (int *)MEMORY[0x1E4F940C8];
LABEL_116:
          if (!(v15 & 1 | (v7 != 0)) || *(void *)(v3 + *v17) >= *(void *)(v3 + *v6)) {
            goto LABEL_138;
          }
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_155;
        }
        uint64_t v85 = objc_alloc_init(GEOTerritoryDataPolygon);
        if (GEOTerritoryDataPolygonReadAllFrom((uint64_t)v85, (void *)v3, v9 & 1))
        {
          PBReaderRecallMark();
          uint64_t v58 = *(void **)(a1 + 88);
          *(void *)(a1 + 88) = v85;
LABEL_97:

          --v7;
          goto LABEL_115;
        }

LABEL_155:
        char v80 = 0;
        char v15 = v86;
        uint64_t v18 = (int *)MEMORY[0x1E4F940C8];
LABEL_140:
        *(unsigned char *)(a1 + 112) |= 8u;
        *(unsigned char *)(a1 + 112) |= 0x20u;
        *(unsigned char *)(a1 + 112) |= 0x40u;
        *(unsigned char *)(a1 + 112) |= 4u;
        *(unsigned char *)(a1 + 112) |= 0x10u;
        if (v80)
        {
LABEL_150:
          unint64_t v3 = *(unsigned char *)(v3 + *v18) == 0;
          if (v15) {
            goto LABEL_151;
          }
          return v3;
        }
        unint64_t v3 = 0;
        if ((v15 & 1) == 0) {
          return v3;
        }
LABEL_151:
        uint64_t v83 = *(void **)(a1 + 8);
        *(void *)(a1 + 8) = 0;

        return v3;
      case 6:
        if (!v31 || (*(unsigned char *)(a1 + 112) & 4) != 0) {
          goto LABEL_98;
        }
        if (v28 != 2)
        {
          char v74 = 0;
          unsigned int v75 = 0;
          uint64_t v76 = 0;
          while (1)
          {
            uint64_t v77 = *v17;
            unint64_t v78 = *(void *)(v3 + v77);
            if (v78 == -1 || v78 >= *(void *)(v3 + *v6)) {
              break;
            }
            char v79 = *(unsigned char *)(*(void *)(v3 + *v19) + v78);
            *(void *)(v3 + v77) = v78 + 1;
            v76 |= (unint64_t)(v79 & 0x7F) << v74;
            if (v79 < 0)
            {
              v74 += 7;
              BOOL v26 = v75++ >= 9;
              if (!v26) {
                continue;
              }
            }
            goto LABEL_137;
          }
          *(unsigned char *)(v3 + *v18) = 1;
LABEL_137:
          PBRepeatedUInt32Add();
          goto LABEL_115;
        }
        if (!PBReaderPlaceMark()) {
          goto LABEL_155;
        }
        while (1)
        {
          uint64_t v59 = (int *)MEMORY[0x1E4F940C8];
          if (*(void *)(v3 + *v17) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + (int)*MEMORY[0x1E4F940C8])) {
            break;
          }
          char v60 = 0;
          unsigned int v61 = 0;
          uint64_t v62 = 0;
          while (1)
          {
            uint64_t v63 = *v17;
            unint64_t v64 = *(void *)(v3 + v63);
            if (v64 == -1 || v64 >= *(void *)(v3 + *v6)) {
              break;
            }
            char v65 = *(unsigned char *)(*(void *)(v3 + *v19) + v64);
            *(void *)(v3 + v63) = v64 + 1;
            v62 |= (unint64_t)(v65 & 0x7F) << v60;
            if (v65 < 0)
            {
              v60 += 7;
              BOOL v26 = v61++ >= 9;
              if (!v26) {
                continue;
              }
            }
            goto LABEL_92;
          }
          *(unsigned char *)(v3 + *v59) = 1;
LABEL_92:
          PBRepeatedUInt32Add();
        }
LABEL_119:
        PBReaderRecallMark();
        uint64_t v18 = (int *)MEMORY[0x1E4F940C8];
        char v15 = v86;
        goto LABEL_116;
      case 7:
        if (!v31)
        {
LABEL_98:
          char v66 = PBReaderSkipValueWithTag();
          uint64_t v18 = (int *)MEMORY[0x1E4F940C8];
          char v15 = v86;
          if ((v66 & 1) == 0)
          {
LABEL_153:
            char v80 = 0;
            goto LABEL_140;
          }
          goto LABEL_116;
        }
        if ((*(unsigned char *)(a1 + 112) & 0x10) == 0)
        {
          uint64_t v50 = PBReaderReadString();
          uint64_t v51 = 72;
LABEL_96:
          uint64_t v58 = *(void **)(a1 + v51);
          *(void *)(a1 + v51) = v50;
          goto LABEL_97;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_155;
        }
        char v67 = 8 * *(unsigned char *)(a1 + 112);
        goto LABEL_114;
      default:
        int v43 = PBReaderSkipValueWithTag();
        uint64_t v18 = (int *)MEMORY[0x1E4F940C8];
        char v15 = v86;
        if (!v43) {
          goto LABEL_153;
        }
        goto LABEL_116;
    }
  }
}

void sub_188E65B08(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTerritoryDataPolygonReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  long long v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 52);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 48)];
  char v7 = 0;
  uint64_t v8 = 0;
  char v9 = 0;
  int v10 = ((*(unsigned __int8 *)(a1 + 60) >> 1) & 1) + (*(unsigned char *)(a1 + 60) & 1);
  while (1)
  {
    unsigned int v11 = a3[v8];
    if (v11 >= 0xFFFFFFFE)
    {
      char v9 = 1;
      goto LABEL_9;
    }
    if (v11 != -3) {
      break;
    }
    char v7 = 1;
LABEL_9:
    ++v8;
  }
  if (v11)
  {
    ++v10;
    goto LABEL_9;
  }
  BOOL v12 = (v9 & 1 | v10) != 0;
  if (((v9 & 1 | v10) != 0) | v7 & 1) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = a3;
  }
  BOOL v14 = (int *)MEMORY[0x1E4F940E8];
  char v15 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(v3 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(v3 + *v6))
  {
    if (v13) {
      BOOL v16 = (v9 & 1 | v10) != 0;
    }
    else {
      BOOL v16 = 1;
    }
    if (v8) {
      BOOL v17 = 1;
    }
    else {
      BOOL v17 = (v9 & 1 | v10) != 0;
    }
    BOOL v56 = v17;
    uint64_t v18 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(v3 + *v15)) {
        goto LABEL_82;
      }
      char v19 = 0;
      unsigned int v20 = 0;
      unint64_t v21 = 0;
      while (1)
      {
        uint64_t v22 = *v14;
        unint64_t v23 = *(void *)(v3 + v22);
        if (v23 == -1 || v23 >= *(void *)(v3 + *v6)) {
          break;
        }
        char v24 = *(unsigned char *)(*(void *)(v3 + *v18) + v23);
        *(void *)(v3 + v22) = v23 + 1;
        v21 |= (unint64_t)(v24 & 0x7F) << v19;
        if ((v24 & 0x80) == 0) {
          goto LABEL_30;
        }
        v19 += 7;
        BOOL v25 = v20++ >= 9;
        if (v25)
        {
          unint64_t v21 = 0;
          int v26 = *(unsigned __int8 *)(v3 + *v15);
          goto LABEL_32;
        }
      }
      *(unsigned char *)(v3 + *v15) = 1;
LABEL_30:
      int v26 = *(unsigned __int8 *)(v3 + *v15);
      if (*(unsigned char *)(v3 + *v15)) {
        unint64_t v21 = 0;
      }
LABEL_32:
      int v27 = v21 & 7;
      if (v26 || v27 == 4) {
        goto LABEL_82;
      }
      unint64_t v29 = v21 >> 3;
      BOOL v30 = v12;
      if (!v16)
      {
        BOOL v31 = v13;
        do
        {
          int v33 = *v31++;
          int v32 = v33;
          BOOL v30 = v33 != 0;
          if (v33) {
            BOOL v34 = v32 == v29;
          }
          else {
            BOOL v34 = 1;
          }
        }
        while (!v34);
      }
      if (v29 == 2) {
        break;
      }
      if (v29 != 1)
      {
        if (!PBReaderSkipValueWithTag()) {
          goto LABEL_96;
        }
        goto LABEL_68;
      }
      if (!v30 || (*(unsigned char *)(a1 + 60) & 1) != 0) {
        goto LABEL_67;
      }
      if (v27 != 2)
      {
        char v44 = 0;
        unsigned int v45 = 0;
        uint64_t v46 = 0;
        while (1)
        {
          uint64_t v47 = *v14;
          unint64_t v48 = *(void *)(v3 + v47);
          if (v48 == -1 || v48 >= *(void *)(v3 + *v6)) {
            break;
          }
          char v49 = *(unsigned char *)(*(void *)(v3 + *v18) + v48);
          *(void *)(v3 + v47) = v48 + 1;
          v46 |= (unint64_t)(v49 & 0x7F) << v44;
          if (v49 < 0)
          {
            v44 += 7;
            BOOL v25 = v45++ >= 9;
            if (!v25) {
              continue;
            }
          }
          goto LABEL_81;
        }
        *(unsigned char *)(v3 + *v15) = 1;
LABEL_81:
        PBRepeatedUInt32Add();
        goto LABEL_68;
      }
      if (!PBReaderPlaceMark()) {
        goto LABEL_96;
      }
      while (*(void *)(v3 + *v14) < *(void *)(v3 + *v6) && !*(unsigned char *)(v3 + *v15))
      {
        char v35 = 0;
        unsigned int v36 = 0;
        uint64_t v37 = 0;
        while (1)
        {
          uint64_t v38 = *v14;
          unint64_t v39 = *(void *)(v3 + v38);
          if (v39 == -1 || v39 >= *(void *)(v3 + *v6)) {
            break;
          }
          char v40 = *(unsigned char *)(*(void *)(v3 + *v18) + v39);
          *(void *)(v3 + v38) = v39 + 1;
          v37 |= (unint64_t)(v40 & 0x7F) << v35;
          if (v40 < 0)
          {
            v35 += 7;
            BOOL v25 = v36++ >= 9;
            if (!v25) {
              continue;
            }
          }
          goto LABEL_59;
        }
        *(unsigned char *)(v3 + *v15) = 1;
LABEL_59:
        PBRepeatedUInt32Add();
      }
      PBReaderRecallMark();
      if (!v56) {
        goto LABEL_82;
      }
LABEL_69:
      if (*(void *)(v3 + *v14) >= *(void *)(v3 + *v6)) {
        goto LABEL_82;
      }
    }
    if (!v30 || (*(unsigned char *)(a1 + 60) & 2) != 0)
    {
LABEL_67:
      if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
LABEL_96:
        char v50 = 0;
        goto LABEL_84;
      }
    }
    else
    {
      if ((PBReaderPlaceMark() & 1) == 0) {
        goto LABEL_96;
      }
      BOOL v55 = v12;
      unint64_t v41 = v15;
      BOOL v42 = v16;
      int v43 = objc_alloc_init(GEOTerritoryDataRing);
      if (!GEOTerritoryDataRingReadAllFrom((uint64_t)v43, (void *)v3))
      {

        char v50 = 0;
        char v15 = v41;
        BOOL v12 = v55;
        goto LABEL_84;
      }
      PBReaderRecallMark();
      -[GEOTerritoryDataPolygon _addNoFlagsHole:](a1, v43);

      BOOL v16 = v42;
      char v15 = v41;
      BOOL v12 = v55;
    }
LABEL_68:
    if (!v56) {
      goto LABEL_82;
    }
    goto LABEL_69;
  }
LABEL_82:
  if (!v12)
  {
    if (v13)
    {
      do
      {
        while (1)
        {
          int v52 = *v13++;
          int v51 = v52;
          if (v52 != 1 && v51 != 2) {
            break;
          }
          *(unsigned char *)(a1 + 60) |= v51;
        }
      }
      while (v51);
    }
    goto LABEL_93;
  }
  char v50 = 1;
LABEL_84:
  *(unsigned char *)(a1 + 60) |= 1u;
  *(unsigned char *)(a1 + 60) |= 2u;
  if (v50)
  {
LABEL_93:
    unint64_t v3 = *(unsigned char *)(v3 + *v15) == 0;
    if (v12) {
      goto LABEL_94;
    }
    return v3;
  }
  unint64_t v3 = 0;
  if (!v12) {
    return v3;
  }
LABEL_94:
  unsigned int v53 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = 0;

  return v3;
}

double gloria::TileId::ToBBOX(gloria::TileId *this)
{
  gloria::TileId::ToXYZ(this, (int8x16_t *)&v6);
  int v1 = v7;
  int64x2_t v4 = vaddq_s64(v6, vdupq_n_s64(1uLL));
  unsigned __int8 v5 = v7;
  double v2 = gloria::TileCoordinate::YToLat((gloria::TileCoordinate *)&v6);
  gloria::TileCoordinate::YToLat((gloria::TileCoordinate *)&v4);
  ldexp(1.0, v1);
  ldexp(1.0, v1);
  return v2;
}

long double gloria::TileCoordinate::YToLat(gloria::TileCoordinate *this)
{
  double v1 = (double)*((unint64_t *)this + 1) * -6.28318531;
  long double v2 = v1 / ldexp(1.0, *((unsigned __int8 *)this + 16)) + 3.14159265;
  double v3 = exp(v2);
  long double v4 = exp(-v2);
  return atan((v3 - v4) * 0.5) * 57.2957795;
}

int8x16_t gloria::TileId::ToXYZ@<Q0>(gloria::TileId *this@<X0>, int8x16_t *a2@<X8>)
{
  v2.i64[0] = *(void *)this & 0x1111111111111111 | ((*(void *)this & 0x5555555555555555uLL) >> 1) & 0x3333333333333333;
  v2.i64[1] = (*(void *)this >> 1) & 0x4444444444444444 | *(void *)this & 0x2222222222222222;
  int8x16_t v3 = (int8x16_t)vshlq_u64(v2, (uint64x2_t)xmmword_18A627530);
  v2.i64[1] = (unint64_t)v2.i64[1] >> 1;
  __int8 v4 = *((unsigned char *)this + 8);
  int8x16_t v5 = vorrq_s8(v3, (int8x16_t)v2);
  v3.i64[0] = 0xF0F0F0F0F0F0F0FLL;
  v3.i64[1] = 0xF0F0F0F0F0F0F0FLL;
  int8x16_t v6 = vandq_s8(v5, v3);
  v3.i64[0] = 0xFF00FF00FF00FFLL;
  v3.i64[1] = 0xFF00FF00FF00FFLL;
  int8x16_t v7 = vandq_s8(vorrq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v6, 4uLL), v6), v3);
  int8x16_t v8 = vorrq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v7, 8uLL), v7);
  v9.i64[0] = 4294901760;
  v9.i64[1] = 4294901760;
  int8x16_t v10 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v8, 0x10uLL), v9);
  v9.i64[0] = 0xFFFFLL;
  v9.i64[1] = 0xFFFFLL;
  int8x16_t result = vorrq_s8(v10, vandq_s8(v8, v9));
  *a2 = result;
  a2[1].i8[0] = v4;
  return result;
}

BOOL geo::Polygon2<double>::intersects(uint64_t *a1, double *a2)
{
  if (geo::containsPoint<double>(a1, a2)) {
    return 1;
  }
  int8x16_t v7 = a1;
  uint64_t v5 = *a1;
  uint64_t v6 = v7[1];
  if (v5 == v6) {
    return 0;
  }
  double v8 = a2[2] * a2[2];
  int8x16_t v9 = (float64x2_t *)(v6 - 16);
  uint64_t v10 = v5 + 16;
  do
  {
    float64x2_t v11 = vsubq_f64(*(float64x2_t *)(v10 - 16), *v9);
    v14[0] = *v9;
    v14[1] = v11;
    double v12 = gm::LineSegment<double,2>::distanceSquaredTo((double *)v14, a2);
    BOOL result = v12 <= v8;
    int8x16_t v9 = (float64x2_t *)v5;
    v5 += 16;
    BOOL v13 = v12 <= v8 || v10 == v6;
    v10 += 16;
  }
  while (!v13);
  return result;
}

double gm::LineSegment<double,2>::distanceSquaredTo(double *a1, double *a2)
{
  double v2 = *a2;
  double v3 = a2[1];
  double v5 = *a1;
  double v4 = a1[1];
  double v7 = a1[2];
  double v6 = a1[3];
  double v8 = ((*a2 - *a1) * v7 + 0.0 + (v3 - v4) * v6) / (v7 * v7 + 0.0 + v6 * v6);
  if (v8 >= 0.0)
  {
    if (v8 <= 1.0)
    {
      double v7 = v7 * v8;
      double v6 = v6 * v8;
    }
    double v9 = v4 + v6 - v3;
    double v10 = (v5 + v7 - v2) * (v5 + v7 - v2) + 0.0;
  }
  else
  {
    double v9 = v4 - v3;
    double v10 = (v5 - v2) * (v5 - v2) + 0.0;
  }
  return v10 + v9 * v9;
}

void _polygonForPackedPoints(char **a1, uint64_t a2, unint64_t a3, double *a4, int a5, int64x2_t *a6)
{
  int v32 = 0;
  int v33 = 0;
  BOOL v34 = 0;
  std::vector<gm::Matrix<double,2,1>>::reserve((void **)&v32, a3);
  double v12 = __exp10((double)a5);
  *a6 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  a6[1] = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  BOOL v13 = a6 + 1;
  if (a3)
  {
    uint64_t v14 = 0;
    char v15 = v33;
    do
    {
      double v16 = a4[1] - (double)(unsigned __int16)*(_DWORD *)(a2 + 4 * v14) / v12;
      *(double *)&long long v31 = *a4 + (double)HIWORD(*(_DWORD *)(a2 + 4 * v14)) / v12;
      *((double *)&v31 + 1) = v16;
      if (v15 >= v34)
      {
        uint64_t v17 = (v15 - v32) >> 4;
        if ((unint64_t)(v17 + 1) >> 60) {
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v18 = (v34 - v32) >> 3;
        if (v18 <= v17 + 1) {
          unint64_t v18 = v17 + 1;
        }
        if ((unint64_t)(v34 - v32) >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v19 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v18;
        }
        if (v19) {
          unsigned int v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>>((uint64_t)&v34, v19);
        }
        else {
          unsigned int v20 = 0;
        }
        unint64_t v21 = &v20[16 * v17];
        *(_OWORD *)unint64_t v21 = v31;
        unint64_t v23 = v32;
        uint64_t v22 = v33;
        char v24 = v21;
        if (v33 != v32)
        {
          do
          {
            *((_OWORD *)v24 - 1) = *((_OWORD *)v22 - 1);
            v24 -= 16;
            v22 -= 16;
          }
          while (v22 != v23);
          uint64_t v22 = v32;
        }
        char v15 = v21 + 16;
        int v32 = v24;
        int v33 = v21 + 16;
        BOOL v34 = &v20[16 * v19];
        if (v22) {
          operator delete(v22);
        }
      }
      else
      {
        *(_OWORD *)char v15 = v31;
        v15 += 16;
      }
      uint64_t v25 = 0;
      int v33 = v15;
      char v26 = 1;
      do
      {
        char v27 = v26;
        double v28 = *((double *)&v31 + v25);
        double v29 = *(double *)&a6->i64[v25];
        if (v28 < v29) {
          double v29 = *((double *)&v31 + v25);
        }
        *(double *)&a6->i64[v25] = v29;
        if (*(double *)&v13->i64[v25] >= v28) {
          double v28 = *(double *)&v13->i64[v25];
        }
        *(double *)&v13->i64[v25] = v28;
        uint64_t v25 = 1;
        char v26 = 0;
      }
      while ((v27 & 1) != 0);
      ++v14;
    }
    while (v14 != a3);
  }
  else
  {
    char v15 = v33;
  }
  BOOL v30 = v34;
  *a1 = v32;
  a1[1] = v15;
  a1[2] = v30;
}

void sub_188E6661C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<gm::Matrix<double,2,1>>::reserve(void **a1, unint64_t a2)
{
  double v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    double v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>>(v3, a2);
    double v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    double v9 = &v6[16 * v8];
    float64x2_t v11 = (char *)*a1;
    double v10 = (char *)a1[1];
    double v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      double v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a2);
}

unint64_t GEOTerritoryDataPolygonReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 52))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOTerritoryDataPolygonReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)double v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = [v8 position];
  *(_DWORD *)(a1 + 52) = [v8 length];
  if (a3) {
    double v9 = (int *)&GEOTerritoryDataPolygonReadAllFrom_recursiveTag;
  }
  else {
    double v9 = (int *)&GEOTerritoryDataPolygonReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOTerritoryDataPolygonReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOTerritoryDataPolygonCallReadAllRecursiveWithoutSynchronized(a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return Specified;
}

void sub_188E668B0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id __GEOGetURLWithSource_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = [MEMORY[0x1E4F1CB10] URLWithString:a2];
  if (!v3)
  {
    double v4 = GEOGetUserDefaultsLog();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      unint64_t v5 = *(void *)(a1 + 32);
      if (v5 > 0x41) {
        double v6 = 0;
      }
      else {
        double v6 = off_1E53EADF8[v5];
      }
      int v8 = 138543362;
      double v9 = v6;
      _os_log_impl(&dword_188D96000, v4, OS_LOG_TYPE_ERROR, "URL value for type '%{public}@' is not a valid URL", (uint8_t *)&v8, 0xCu);
    }
  }

  return v3;
}

id GEODefaultsKeyStringForConfigKey(int a1, uint64_t a2)
{
  uint64_t v5 = 0;
  double v6 = &v5;
  uint64_t v7 = 0x3032000000;
  int v8 = __Block_byref_object_copy__79;
  double v9 = __Block_byref_object_dispose__79;
  id v10 = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __GEODefaultsKeyStringForConfigKey_block_invoke;
  v4[3] = &unk_1E53E84E8;
  unsigned char v4[4] = &v5;
  GEOConfigGetPropertiesForKey(a1, a2, v4);
  id v2 = (id)v6[5];
  _Block_object_dispose(&v5, 8);

  return v2;
}

void sub_188E66B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL GEOTerritoryDataRingReadAllFrom(uint64_t a1, void *a2)
{
  id v2 = a2;
  objc_sync_enter(v2);
  if (v2)
  {
    uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
    double v4 = (int *)MEMORY[0x1E4F940E0];
    uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v2[*MEMORY[0x1E4F940E8]] < *(void *)&v2[*MEMORY[0x1E4F940E0]])
    {
      double v6 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v2[*v5]) {
          break;
        }
        char v7 = 0;
        unsigned int v8 = 0;
        unint64_t v9 = 0;
        while (1)
        {
          uint64_t v10 = *v3;
          unint64_t v11 = *(void *)&v2[v10];
          if (v11 == -1 || v11 >= *(void *)&v2[*v4]) {
            break;
          }
          char v12 = *(unsigned char *)(*(void *)&v2[*v6] + v11);
          *(void *)&v2[v10] = v11 + 1;
          v9 |= (unint64_t)(v12 & 0x7F) << v7;
          if ((v12 & 0x80) == 0) {
            goto LABEL_13;
          }
          v7 += 7;
          BOOL v13 = v8++ >= 9;
          if (v13)
          {
            unint64_t v9 = 0;
            int v14 = v2[*v5];
            goto LABEL_15;
          }
        }
        v2[*v5] = 1;
LABEL_13:
        int v14 = v2[*v5];
        if (v2[*v5]) {
          unint64_t v9 = 0;
        }
LABEL_15:
        int v15 = v9 & 7;
        if (v14 || v15 == 4) {
          break;
        }
        if ((v9 >> 3) == 1)
        {
          if (v15 == 2)
          {
            if (!PBReaderPlaceMark()) {
              goto LABEL_47;
            }
            while (*(void *)&v2[*v3] < *(void *)&v2[*v4] && !v2[*v5])
            {
              char v17 = 0;
              unsigned int v18 = 0;
              uint64_t v19 = 0;
              while (1)
              {
                uint64_t v20 = *v3;
                unint64_t v21 = *(void *)&v2[v20];
                if (v21 == -1 || v21 >= *(void *)&v2[*v4]) {
                  break;
                }
                char v22 = *(unsigned char *)(*(void *)&v2[*v6] + v21);
                *(void *)&v2[v20] = v21 + 1;
                v19 |= (unint64_t)(v22 & 0x7F) << v17;
                if (v22 < 0)
                {
                  v17 += 7;
                  BOOL v13 = v18++ >= 9;
                  if (!v13) {
                    continue;
                  }
                }
                goto LABEL_32;
              }
              v2[*v5] = 1;
LABEL_32:
              PBRepeatedUInt32Add();
            }
            PBReaderRecallMark();
          }
          else
          {
            char v23 = 0;
            unsigned int v24 = 0;
            uint64_t v25 = 0;
            while (1)
            {
              uint64_t v26 = *v3;
              unint64_t v27 = *(void *)&v2[v26];
              if (v27 == -1 || v27 >= *(void *)&v2[*v4]) {
                break;
              }
              char v28 = *(unsigned char *)(*(void *)&v2[*v6] + v27);
              *(void *)&v2[v26] = v27 + 1;
              v25 |= (unint64_t)(v28 & 0x7F) << v23;
              if (v28 < 0)
              {
                v23 += 7;
                BOOL v13 = v24++ >= 9;
                if (!v13) {
                  continue;
                }
              }
              goto LABEL_44;
            }
            v2[*v5] = 1;
LABEL_44:
            PBRepeatedUInt32Add();
          }
        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_47;
        }
      }
      while (*(void *)&v2[*v3] < *(void *)&v2[*v4]);
    }
    BOOL v29 = v2[*v5] == 0;
  }
  else
  {
LABEL_47:
    BOOL v29 = 0;
  }
  objc_sync_exit(v2);

  return v29;
}

void sub_188E66E58(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t **std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::$_3::operator() const(geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*,std::vector<geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem*,geo::StdAllocator<geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem*,geo::codec::Allocator>> &)::{lambda(geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*)#1} &,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem**,0>(unint64_t **a1, unint64_t **a2, unint64_t **a3, unint64_t **a4, unint64_t **a5)
{
  BOOL result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::$_3::operator() const(geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*,std::vector<geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem*,geo::StdAllocator<geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem*,geo::codec::Allocator>> &)::{lambda(geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*)#1} &,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem**>(a1, a2, a3, a4);
  unint64_t v11 = *a5;
  char v12 = *a4;
  unint64_t v13 = **a5;
  unint64_t v14 = **a4;
  if (v13 != v14)
  {
    if (v13 >= v14) {
      return result;
    }
    goto LABEL_7;
  }
  unsigned int v15 = *((_DWORD *)v11 + 14);
  unsigned int v16 = *((_DWORD *)v12 + 14);
  BOOL v17 = v15 >= v16;
  if (v15 == v16) {
    BOOL v17 = *((_DWORD *)v11 + 15) >= *((_DWORD *)v12 + 15);
  }
  if (!v17)
  {
LABEL_7:
    *a4 = v11;
    *a5 = v12;
    unsigned int v18 = *a4;
    uint64_t v19 = *a3;
    unint64_t v20 = **a4;
    unint64_t v21 = **a3;
    BOOL v22 = v20 >= v21;
    if (v20 == v21)
    {
      unsigned int v23 = *((_DWORD *)v18 + 14);
      unsigned int v24 = *((_DWORD *)v19 + 14);
      BOOL v22 = v23 >= v24;
      if (v23 == v24) {
        BOOL v22 = *((_DWORD *)v18 + 15) >= *((_DWORD *)v19 + 15);
      }
    }
    if (!v22)
    {
      *a3 = v18;
      *a4 = v19;
      uint64_t v25 = *a3;
      uint64_t v26 = *a2;
      unint64_t v27 = **a3;
      unint64_t v28 = **a2;
      BOOL v29 = v27 >= v28;
      if (v27 == v28)
      {
        unsigned int v30 = *((_DWORD *)v25 + 14);
        unsigned int v31 = *((_DWORD *)v26 + 14);
        BOOL v29 = v30 >= v31;
        if (v30 == v31) {
          BOOL v29 = *((_DWORD *)v25 + 15) >= *((_DWORD *)v26 + 15);
        }
      }
      if (!v29)
      {
        *a2 = v25;
        *a3 = v26;
        int v32 = *a2;
        int v33 = *a1;
        unint64_t v34 = **a2;
        unint64_t v35 = **a1;
        BOOL v36 = v34 >= v35;
        if (v34 == v35)
        {
          unsigned int v37 = *((_DWORD *)v32 + 14);
          unsigned int v38 = *((_DWORD *)v33 + 14);
          BOOL v36 = v37 >= v38;
          if (v37 == v38) {
            BOOL v36 = *((_DWORD *)v32 + 15) >= *((_DWORD *)v33 + 15);
          }
        }
        if (!v36)
        {
          *a1 = v32;
          *a2 = v33;
        }
      }
    }
  }
  return result;
}

unint64_t **std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::$_3::operator() const(geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*,std::vector<geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem*,geo::StdAllocator<geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem*,geo::codec::Allocator>> &)::{lambda(geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*)#1} &,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem**>(unint64_t **a1, unint64_t **a2, unint64_t **a3, unint64_t **a4)
{
  BOOL result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::$_3::operator() const(geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*,std::vector<geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem*,geo::StdAllocator<geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem*,geo::codec::Allocator>> &)::{lambda(geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*)#1} &,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem**>(a1, a2, a3);
  unint64_t v9 = *a4;
  uint64_t v10 = *a3;
  unint64_t v11 = **a4;
  unint64_t v12 = **a3;
  if (v11 != v12)
  {
    if (v11 >= v12) {
      return result;
    }
    goto LABEL_7;
  }
  unsigned int v13 = *((_DWORD *)v9 + 14);
  unsigned int v14 = *((_DWORD *)v10 + 14);
  BOOL v15 = v13 >= v14;
  if (v13 == v14) {
    BOOL v15 = *((_DWORD *)v9 + 15) >= *((_DWORD *)v10 + 15);
  }
  if (!v15)
  {
LABEL_7:
    *a3 = v9;
    *a4 = v10;
    unsigned int v16 = *a3;
    BOOL v17 = *a2;
    unint64_t v18 = **a3;
    unint64_t v19 = **a2;
    BOOL v20 = v18 >= v19;
    if (v18 == v19)
    {
      unsigned int v21 = *((_DWORD *)v16 + 14);
      unsigned int v22 = *((_DWORD *)v17 + 14);
      BOOL v20 = v21 >= v22;
      if (v21 == v22) {
        BOOL v20 = *((_DWORD *)v16 + 15) >= *((_DWORD *)v17 + 15);
      }
    }
    if (!v20)
    {
      *a2 = v16;
      *a3 = v17;
      unsigned int v23 = *a2;
      unsigned int v24 = *a1;
      unint64_t v25 = **a2;
      unint64_t v26 = **a1;
      BOOL v27 = v25 >= v26;
      if (v25 == v26)
      {
        unsigned int v28 = *((_DWORD *)v23 + 14);
        unsigned int v29 = *((_DWORD *)v24 + 14);
        BOOL v27 = v28 >= v29;
        if (v28 == v29) {
          BOOL v27 = *((_DWORD *)v23 + 15) >= *((_DWORD *)v24 + 15);
        }
      }
      if (!v27)
      {
        *a1 = v23;
        *a2 = v24;
      }
    }
  }
  return result;
}

void sub_188E681E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188E685DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_188E68C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188E6971C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188E69BA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_188E6A2BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_188E6B030(_Unwind_Exception *a1)
{
}

void sub_188E6B2D0(_Unwind_Exception *a1)
{
}

id daemonXPCUtilIsolater()
{
  if (qword_1EB29F9F8 != -1) {
    dispatch_once(&qword_1EB29F9F8, &__block_literal_global_362);
  }
  uint64_t v0 = (void *)_MergedGlobals_228;

  return v0;
}

void sub_188E6B820(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEORegionalResourceTileKeyMake(unsigned int a1, char a2, unsigned __int8 a3, unsigned __int8 a4)
{
  *(void *)&v5[1] = *(void *)&v5[1] & 0xC000000000000000 | ((unint64_t)(a2 & 0x3F) << 40) | ((unint64_t)a3 << 54) | a1 | ((unint64_t)a4 << 32) | 0x800000000000;
  return *(void *)v5;
}

id GEOConfigGetDate(int a1, uint64_t a2)
{
  return _getValue(a1, a2, 1, 0, 0, 0);
}

void sub_188E6C504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  std::__list_imp<geo::Batch>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t LoadItem::options(LoadItem *this)
{
  if (!*((void *)this + 11)) {
    return 0;
  }
  double v1 = (void *)*((void *)this + 10);
  if (!v1) {
    return 524;
  }
  LOBYTE(result) = 0;
  LOBYTE(v3) = 0;
  LOBYTE(v4) = 0;
  char v5 = 0;
  LOBYTE(v6) = 1;
  LOBYTE(v7) = 1;
  LOBYTE(v8) = 1;
  do
  {
    uint64_t v9 = v1[18];
    uint64_t result = (v9 | result) & 1;
    int v3 = v3 & 1 | ((v9 & 2) != 0);
    v5 |= (v9 & 0x60) != 0;
    int v4 = (v4 | BYTE1(v9)) & 1;
    int v8 = v8 & ((v9 & 8) != 0);
    int v7 = v7 & ((v9 & 4) != 0);
    int v6 = v6 & ((v9 & 0x200) != 0);
    double v1 = (void *)*v1;
  }
  while (v1);
  if (v3) {
    result |= 2uLL;
  }
  if (v5) {
    result |= 0x20uLL;
  }
  if (v4)
  {
    result |= 0x100uLL;
    if (v8) {
      goto LABEL_11;
    }
  }
  else if (v8)
  {
LABEL_11:
    result |= 8uLL;
    if ((v7 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_19;
  }
  if (!v7)
  {
LABEL_12:
    if (v6) {
      return result | 0x200;
    }
    return result;
  }
LABEL_19:
  if (v6) {
    return result | 0x204;
  }
  else {
    return result | 4;
  }
}

void sub_188E6CC58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  std::__function::__value_func<void ()(LoadItem::Requester &)>::~__value_func[abi:ne180100](&a43);

  _Unwind_Resume(a1);
}

uint64_t LoadItem::foreachRequester(uint64_t result, uint64_t a2)
{
  if (result)
  {
    int v3 = (void *)result;
    do
    {
      uint64_t v4 = *(void *)(a2 + 24);
      if (!v4) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)v4 + 48))(v4, v3 + 3);
      int v3 = (void *)*v3;
    }
    while (v3);
  }
  return result;
}

void *std::__function::__value_func<void ()(LoadItem::Requester &)>::~__value_func[abi:ne180100](void *a1)
{
  id v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__destroy_at[abi:ne180100]<LoadItem,0>(uint64_t a1)
{
  *(void *)(a1 + 136) = &unk_1ED513630;

  *(void *)(a1 + 112) = &unk_1ED513630;
  id v2 = *(void **)(a1 + 80);
  if (v2)
  {
    do
    {
      int v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},LoadItem::Requester>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      id v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  if (v4)
  {
    operator delete(v4);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},LoadItem::Requester>,0>(uint64_t a1)
{
  *(void *)(a1 + 104) = off_1ED513730;
  *(void *)(a1 + 80) = off_1ED513750;

  *(void *)(a1 + 56) = off_1ED513710;
  *(void *)(a1 + 32) = off_1ED5136B0;

  *(void *)(a1 + 8) = off_1ED5136F0;
  id v2 = *(void **)a1;
}

void _ZNSt3__110__function6__funcIZZ41__GEOTileLoader__loadedTile_forKey_info__EUb0_E3__5NS_9allocatorIS2_EEFvRN8LoadItem9RequesterEEE18destroy_deallocateEv(id *a1)
{
  operator delete(a1);
}

void sub_188E6D1BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZZ41__GEOTileLoader__loadedTile_forKey_info__EUb0_E3__5NS_9allocatorIS2_EEFvRN8LoadItem9RequesterEEEclES7_(uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (**(unsigned char **)(a1 + 40))
  {
    uint64_t v4 = a2[15];
    if ((v4 & 0x40) != 0)
    {
      char v5 = **(void ***)(a1 + 48);
      if (!v5)
      {
        uint64_t v6 = [MEMORY[0x1E4F1CA48] array];
        int v7 = *(void ***)(a1 + 48);
        int v8 = *v7;
        char *v7 = (void *)v6;

        char v5 = **(void ***)(a1 + 48);
      }
      [v5 addObject:a2[1]];
    }
    else if ((v4 & 0x20) == 0)
    {
      return;
    }
  }
  uint64_t v9 = (void *)MEMORY[0x18C120660](a2[13]);
  id v10 = *(id *)(a1 + 32);
  uint64_t v11 = [*(id *)(a1 + 32) length];
  if ((a2[15] & 4) != 0)
  {

    id v10 = 0;
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___ZZZ41__GEOTileLoader__loadedTile_forKey_info__EUb0_ENK3__5clERKN8LoadItem9RequesterE_block_invoke;
  block[3] = &unk_1E53D8670;
  long long v19 = *(_OWORD *)(a1 + 16);
  id v12 = v9;
  id v17 = v12;
  id v13 = v10;
  id v15 = v13;
  uint64_t v18 = v11;
  id v16 = *(id *)(a1 + 8);
  LoadItem::Requester::performAsyncOnCallbackQueue((uint64_t)a2, block);
}

void sub_188E6D388(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void LoadItem::Requester::performAsyncOnCallbackQueue(uint64_t a1, dispatch_block_t block)
{
  id v3 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, (dispatch_qos_class_t)*(_DWORD *)(a1 + 156), 0, block);
  dispatch_async(*(dispatch_queue_t *)(a1 + 56), v3);
}

void sub_188E6D65C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_188E6D8F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id a29)
{
  _Block_object_dispose(&a24, 8);
  _Unwind_Resume(a1);
}

uint64_t LoadItem::reason(LoadItem *this)
{
  for (unsigned int i = 0; this; this = *(LoadItem **)this)
  {
    switch(*((unsigned char *)this + 152))
    {
      case 1:
        goto LABEL_11;
      case 2:
        if (i && i != 5) {
          continue;
        }
        goto LABEL_11;
      case 3:
        if (i > 5 || ((1 << i) & 0x25) == 0) {
          continue;
        }
        goto LABEL_11;
      case 4:
        if (i <= 5 && ((1 << i) & 0x2D) != 0) {
          goto LABEL_11;
        }
        continue;
      case 5:
        if (!i) {
LABEL_11:
        }
          unsigned int i = *((unsigned __int8 *)this + 152);
        break;
      default:
        continue;
    }
  }
  return i;
}

id LoadItem::voucher(LoadItem *this)
{
  if (*((void *)this + 11) && (double v1 = (uint64_t *)*((void *)this + 10)) != 0)
  {
    unsigned int v2 = 0;
    id v3 = 0;
    do
    {
      id v4 = (id)v1[23];
      if (v4)
      {
        unsigned int v5 = *((_DWORD *)v1 + 45);

        if (v5 > v2)
        {
          unsigned int v2 = *((_DWORD *)v1 + 45);
          id v6 = (id)v1[23];

          id v3 = v6;
        }
      }
      double v1 = (uint64_t *)*v1;
    }
    while (v1);
  }
  else
  {
    id v3 = 0;
  }

  return v3;
}

void sub_188E6DEE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  std::mutex::unlock(v11);
  objc_storeWeak((id *)&a9, 0);
  objc_destroyWeak((id *)&a9);
  objc_storeWeak(&location, 0);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_188E6E110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  std::mutex::unlock(v10);

  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<_GEOTileKey,std::__list_iterator<geo::detail::_CacheItem<_GEOTileKey,GEOTileData * {__strong},geo::detail::_GEOGenericContainer<_GEOTileKey,GEOTileData * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::_value_ptr>,void *>>,std::__unordered_map_hasher<_GEOTileKey,std::__hash_value_type<_GEOTileKey,std::__list_iterator<geo::detail::_CacheItem<_GEOTileKey,GEOTileData * {__strong},geo::detail::_GEOGenericContainer<_GEOTileKey,GEOTileData * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::_value_ptr>,void *>>,std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,true>,std::__unordered_map_equal<_GEOTileKey,std::__hash_value_type<_GEOTileKey,std::__list_iterator<geo::detail::_CacheItem<_GEOTileKey,GEOTileData * {__strong},geo::detail::_GEOGenericContainer<_GEOTileKey,GEOTileData * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::_value_ptr>,void *>>,std::equal_to<_GEOTileKey>,std::hash<_GEOTileKey>,true>,std::allocator<std::__hash_value_type<_GEOTileKey,std::__list_iterator<geo::detail::_CacheItem<_GEOTileKey,GEOTileData * {__strong},geo::detail::_GEOGenericContainer<_GEOTileKey,GEOTileData * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::_value_ptr>,void *>>>>::__emplace_unique_key_args<_GEOTileKey,std::piecewise_construct_t const&,std::tuple<_GEOTileKey const&>,std::tuple<>>(float *a1, void *a2, _OWORD *a3)
{
  unint64_t v7 = GEOTileKeyHash(a2);
  unint64_t v8 = v7;
  unint64_t v9 = *((void *)a1 + 1);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (unsigned int i = *v11; i; unsigned int i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v7)
        {
          if (i[2] == *a2 && i[3] == a2[1]) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  unsigned int i = operator new(0x28uLL);
  *unsigned int i = 0;
  i[1] = v8;
  *((_OWORD *)i + 1) = *a3;
  i[4] = 0;
  float v15 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v16 = a1[8];
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      int8x8_t prime = (int8x8_t)v19;
    }
    else {
      int8x8_t prime = (int8x8_t)v18;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v9 = *((void *)a1 + 1);
    }
    if (*(void *)&prime > v9) {
      goto LABEL_34;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v27 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (*(void *)&prime <= v27) {
        int8x8_t prime = (int8x8_t)v27;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *((void *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_34:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unsigned int v21 = operator new(8 * *(void *)&prime);
          uint64_t v22 = *(void **)a1;
          *(void *)a1 = v21;
          if (v22) {
            operator delete(v22);
          }
          uint64_t v23 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v23++) = 0;
          while (*(void *)&prime != v23);
          unsigned int v24 = (void *)*((void *)a1 + 2);
          if (v24)
          {
            unint64_t v25 = v24[1];
            uint8x8_t v26 = (uint8x8_t)vcnt_s8(prime);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              if (v25 >= *(void *)&prime) {
                v25 %= *(void *)&prime;
              }
            }
            else
            {
              v25 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v25) = a1 + 4;
            unsigned int v30 = (void *)*v24;
            if (*v24)
            {
              do
              {
                unint64_t v31 = v30[1];
                if (v26.u32[0] > 1uLL)
                {
                  if (v31 >= *(void *)&prime) {
                    v31 %= *(void *)&prime;
                  }
                }
                else
                {
                  v31 &= *(void *)&prime - 1;
                }
                if (v31 != v25)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v31))
                  {
                    *(void *)(*(void *)a1 + 8 * v31) = v24;
                    goto LABEL_59;
                  }
                  *unsigned int v24 = *v30;
                  *unsigned int v30 = **(void **)(*(void *)a1 + 8 * v31);
                  **(void **)(*(void *)a1 + 8 * v31) = v30;
                  unsigned int v30 = v24;
                }
                unint64_t v31 = v25;
LABEL_59:
                unsigned int v24 = v30;
                unsigned int v30 = (void *)*v30;
                unint64_t v25 = v31;
              }
              while (v30);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_63;
        }
        BOOL v36 = *(void **)a1;
        *(void *)a1 = 0;
        if (v36) {
          operator delete(v36);
        }
        unint64_t v9 = 0;
        *((void *)a1 + 1) = 0;
      }
    }
LABEL_63:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  int v32 = *(void **)a1;
  int v33 = *(void **)(*(void *)a1 + 8 * v3);
  if (v33)
  {
    *unsigned int i = *v33;
LABEL_76:
    *int v33 = i;
    goto LABEL_77;
  }
  *unsigned int i = *((void *)a1 + 2);
  *((void *)a1 + 2) = i;
  v32[v3] = a1 + 4;
  if (*i)
  {
    unint64_t v34 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v34 >= v9) {
        v34 %= v9;
      }
    }
    else
    {
      v34 &= v9 - 1;
    }
    int v33 = (void *)(*(void *)a1 + 8 * v34);
    goto LABEL_76;
  }
LABEL_77:
  ++*((void *)a1 + 3);
  return i;
}

void sub_188E6E698(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<_GEOTileKey,std::__list_iterator<CacheItem,void *>>,std::__unordered_map_hasher<_GEOTileKey,std::__hash_value_type<_GEOTileKey,std::__list_iterator<CacheItem,void *>>,hashkey,eqkey,true>,std::__unordered_map_equal<_GEOTileKey,std::__hash_value_type<_GEOTileKey,std::__list_iterator<CacheItem,void *>>,eqkey,hashkey,true>,std::allocator<std::__hash_value_type<_GEOTileKey,std::__list_iterator<CacheItem,void *>>>>::__emplace_unique_key_args<_GEOTileKey,std::piecewise_construct_t const&,std::tuple<_GEOTileKey const&>,std::tuple<>>(float *a1, void *a2, _OWORD *a3)
{
  unint64_t v7 = GEOTileKeyHash(a2);
  unint64_t v8 = v7;
  unint64_t v9 = *((void *)a1 + 1);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (unsigned int i = *v11; i; unsigned int i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v7)
        {
          if (i[2] == *a2 && i[3] == a2[1]) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  unsigned int i = operator new(0x28uLL);
  *unsigned int i = 0;
  i[1] = v8;
  *((_OWORD *)i + 1) = *a3;
  i[4] = 0;
  float v15 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v16 = a1[8];
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      int8x8_t prime = (int8x8_t)v19;
    }
    else {
      int8x8_t prime = (int8x8_t)v18;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v9 = *((void *)a1 + 1);
    }
    if (*(void *)&prime > v9) {
      goto LABEL_34;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v27 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (*(void *)&prime <= v27) {
        int8x8_t prime = (int8x8_t)v27;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *((void *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_34:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unsigned int v21 = operator new(8 * *(void *)&prime);
          uint64_t v22 = *(void **)a1;
          *(void *)a1 = v21;
          if (v22) {
            operator delete(v22);
          }
          uint64_t v23 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v23++) = 0;
          while (*(void *)&prime != v23);
          unsigned int v24 = (void *)*((void *)a1 + 2);
          if (v24)
          {
            unint64_t v25 = v24[1];
            uint8x8_t v26 = (uint8x8_t)vcnt_s8(prime);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              if (v25 >= *(void *)&prime) {
                v25 %= *(void *)&prime;
              }
            }
            else
            {
              v25 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v25) = a1 + 4;
            unsigned int v30 = (void *)*v24;
            if (*v24)
            {
              do
              {
                unint64_t v31 = v30[1];
                if (v26.u32[0] > 1uLL)
                {
                  if (v31 >= *(void *)&prime) {
                    v31 %= *(void *)&prime;
                  }
                }
                else
                {
                  v31 &= *(void *)&prime - 1;
                }
                if (v31 != v25)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v31))
                  {
                    *(void *)(*(void *)a1 + 8 * v31) = v24;
                    goto LABEL_59;
                  }
                  *unsigned int v24 = *v30;
                  *unsigned int v30 = **(void **)(*(void *)a1 + 8 * v31);
                  **(void **)(*(void *)a1 + 8 * v31) = v30;
                  unsigned int v30 = v24;
                }
                unint64_t v31 = v25;
LABEL_59:
                unsigned int v24 = v30;
                unsigned int v30 = (void *)*v30;
                unint64_t v25 = v31;
              }
              while (v30);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_63;
        }
        BOOL v36 = *(void **)a1;
        *(void *)a1 = 0;
        if (v36) {
          operator delete(v36);
        }
        unint64_t v9 = 0;
        *((void *)a1 + 1) = 0;
      }
    }
LABEL_63:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  int v32 = *(void **)a1;
  int v33 = *(void **)(*(void *)a1 + 8 * v3);
  if (v33)
  {
    *unsigned int i = *v33;
LABEL_76:
    *int v33 = i;
    goto LABEL_77;
  }
  *unsigned int i = *((void *)a1 + 2);
  *((void *)a1 + 2) = i;
  v32[v3] = a1 + 4;
  if (*i)
  {
    unint64_t v34 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v34 >= v9) {
        v34 %= v9;
      }
    }
    else
    {
      v34 &= v9 - 1;
    }
    int v33 = (void *)(*(void *)a1 + 8 * v34);
    goto LABEL_76;
  }
LABEL_77:
  ++*((void *)a1 + 3);
  return i;
}

void sub_188E6EAB0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

id *geo::_geo_weak_ptr<GEOTileData * {__strong}>::operator=(id *a1, id *location)
{
  if (a1 != location)
  {
    id WeakRetained = objc_loadWeakRetained(location);
    objc_storeWeak(a1, WeakRetained);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZZ47__GEOTileLoader_proxy_willGoToNetworkForTiles__EUb1_E3__8NS_9allocatorIS2_EEFvRN8LoadItem9RequesterEEEclES7_(uint64_t a1, id *this)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (((unint64_t)this[15] & 0x42) == 2)
  {
    LoadItem::Requester::fireBeginNetwork((LoadItem::Requester *)this);
    id v4 = **(void ***)(a1 + 32);
    if (v4)
    {
      unsigned int v5 = [v4 objectForKey:this[1]];
      if (!v5)
      {
        id v6 = objc_alloc_init(GEOTileKeyList);
        objc_msgSend(**(id **)(a1 + 32), "setObject:forKey:", v6, this[1], 0);
        unsigned int v5 = v6;
      }
      objc_msgSend(v5, "addKey:", a1 + 16, v5);
    }
  }
  else
  {
    unint64_t v7 = *(uint64_t **)(a1 + 8);
    id v8 = this[1];
    unint64_t v9 = operator new(0x18uLL);
    v9[1] = v7;
    v9[2] = v8;
    uint64_t v10 = *v7;
    void *v9 = *v7;
    *(void *)(v10 + 8) = v9;
    uint64_t *v7 = (uint64_t)v9;
    ++v7[2];
    uint64_t v11 = (void *)MEMORY[0x18C120660](this[13]);
    if (((_BYTE)this[15] & 0x40) != 0) {
      _cacheMissErr();
    }
    else {
    id v12 = _noNetErr();
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = ___ZZZ47__GEOTileLoader_proxy_willGoToNetworkForTiles__EUb1_ENK3__8clERN8LoadItem9RequesterE_block_invoke;
    block[3] = &unk_1E53D82D8;
    long long v19 = *(_OWORD *)(a1 + 16);
    id v17 = v12;
    id v18 = v11;
    id v13 = v12;
    id v14 = v11;
    LoadItem::Requester::performAsyncOnCallbackQueue((uint64_t)this, block);
  }
}

void sub_188E6ED14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void LoadItem::Requester::fireBeginNetwork(LoadItem::Requester *this)
{
  *((unsigned char *)this + 136) = 1;
  unsigned int v2 = (void *)MEMORY[0x18C120660](*((void *)this + 10));
  if (v2)
  {
    unint64_t v3 = v2;
    dispatch_async(*((dispatch_queue_t *)this + 7), v2);
    unsigned int v2 = v3;
  }
}

void sub_188E6EF84(_Unwind_Exception *exception_object)
{
}

uint64_t geo::Batch::Batch(uint64_t a1, uint64_t a2, char a3, int a4, int a5, void *a6)
{
  id v11 = a6;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = a2;
  *(unsigned char *)(a1 + 32) = a3;
  *(_DWORD *)(a1 + 36) = a4;
  id v12 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
  *(void *)(a1 + 40) = &unk_1ED513650;
  *(void *)(a1 + 48) = v12;
  *(_DWORD *)(a1 + 68) = a5;
  *(void *)(a1 + 72) = v11;
  return a1;
}

void sub_188E6FBB0(_Unwind_Exception *a1)
{
  id v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(a1);
}

void geo::BatchLoadHelper::~BatchLoadHelper(void **this)
{
  free(*this);
  free(this[1]);
  free(this[2]);
  free(this[3]);
  uint64_t v2 = this[5];
  if (v2) {
    free(v2);
  }
}

void std::__list_imp<geo::Batch>::clear(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    unint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        unsigned int v5 = (uint64_t *)v3[1];

        v3[7] = (uint64_t)&unk_1ED513650;
        id v6 = (void *)v3[2];
        if (v6)
        {
          v3[3] = (uint64_t)v6;
          operator delete(v6);
        }
        operator delete(v3);
        unint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void std::__hash_table<std::__hash_value_type<_GEOTileKey,std::__list_iterator<CacheItem,void *>>,std::__unordered_map_hasher<_GEOTileKey,std::__hash_value_type<_GEOTileKey,std::__list_iterator<CacheItem,void *>>,hashkey,eqkey,true>,std::__unordered_map_equal<_GEOTileKey,std::__hash_value_type<_GEOTileKey,std::__list_iterator<CacheItem,void *>>,eqkey,hashkey,true>,std::allocator<std::__hash_value_type<_GEOTileKey,std::__list_iterator<CacheItem,void *>>>>::erase(void *a1, uint64_t *__p)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  uint64_t v3 = *__p;
  unint64_t v4 = __p[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v2) {
      v4 %= *(void *)&v2;
    }
  }
  else
  {
    v4 &= *(void *)&v2 - 1;
  }
  id v6 = *(uint64_t **)(*a1 + 8 * v4);
  do
  {
    unint64_t v7 = v6;
    id v6 = (uint64_t *)*v6;
  }
  while (v6 != __p);
  if (v7 != a1 + 2)
  {
    unint64_t v8 = v7[1];
    if (v5.u32[0] > 1uLL)
    {
      if (v8 >= *(void *)&v2) {
        v8 %= *(void *)&v2;
      }
    }
    else
    {
      v8 &= *(void *)&v2 - 1;
    }
    if (v8 == v4)
    {
LABEL_20:
      if (!v3) {
        goto LABEL_27;
      }
      goto LABEL_21;
    }
  }
  if (!v3) {
    goto LABEL_19;
  }
  unint64_t v9 = *(void *)(v3 + 8);
  if (v5.u32[0] > 1uLL)
  {
    if (v9 >= *(void *)&v2) {
      v9 %= *(void *)&v2;
    }
  }
  else
  {
    v9 &= *(void *)&v2 - 1;
  }
  if (v9 != v4)
  {
LABEL_19:
    *(void *)(*a1 + 8 * v4) = 0;
    uint64_t v3 = *__p;
    goto LABEL_20;
  }
LABEL_21:
  unint64_t v10 = *(void *)(v3 + 8);
  if (v5.u32[0] > 1uLL)
  {
    if (v10 >= *(void *)&v2) {
      v10 %= *(void *)&v2;
    }
  }
  else
  {
    v10 &= *(void *)&v2 - 1;
  }
  if (v10 != v4)
  {
    *(void *)(*a1 + 8 * v10) = v7;
    uint64_t v3 = *__p;
  }
LABEL_27:
  uint64_t *v7 = v3;
  void *__p = 0;
  --a1[3];
  operator delete(__p);
}

void GEOTileKeyAssertIsStandard(uint64_t a1)
{
  if ((*(void *)(a1 + 1) & 0xFFFFFFFFFFLL) != 0 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)double v1 = 0;
    _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Assertion failed: key->standard.reserved == 0", v1, 2u);
  }
}

void sub_188E70008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

xpc_connection_t __defaultGEODaemonXPCConnectionCreationBlock_block_invoke(int a1, NSObject *a2, char *name)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  xpc_connection_t mach_service = xpc_connection_create_mach_service(name, a2, 0);
  if (xpc_user_sessions_enabled())
  {
    int foreground_uid = xpc_user_sessions_get_foreground_uid();
    uint8x8_t v5 = GEOFindOrCreateLog("com.apple.GeoServices", "GEOXPC");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      int v8 = foreground_uid;
      _os_log_impl(&dword_188D96000, v5, OS_LOG_TYPE_DEBUG, "using xpc foreground uid %d", buf, 8u);
    }

    xpc_connection_set_target_user_session_uid();
  }

  return mach_service;
}

uint64_t std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(void)>>(uint64_t (***a1)(void))
{
  return (**a1)();
}

unint64_t GEOPDResultSnippetReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 84))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOPDResultSnippetReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)unint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 88));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 80) = [v8 position];
  *(_DWORD *)(a1 + 84) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOPDResultSnippetReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOPDResultSnippetReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOPDResultSnippetReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOPDResultSnippetCallReadAllRecursiveWithoutSynchronized(a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 88));
  return Specified;
}

void sub_188E70398(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDResultSnippetReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 88));
  id v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 84);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 80)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unsigned int v12 = ((*(unsigned __int16 *)(a1 + 96) >> 1) & 1)
      + (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int16 *)(a1 + 96)), (uint16x4_t)0xFFFBFFF8FFFAFFFELL), (int8x8_t)0x1000100010001))+ ((*(_WORD *)(a1 + 96) >> 4) & 1)+ ((*(_WORD *)(a1 + 96) >> 7) & 1)+ ((*(_WORD *)(a1 + 96) >> 3) & 1));
  while (2)
  {
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v16 = v12 > 4;
        char v17 = v16 & ~(_BYTE)v11 | v9;
        unsigned __int8 v18 = v16 | v11;
        char v70 = v17;
        char v71 = v18 | v17;
        if ((v18 | v8)) {
          long long v19 = 0;
        }
        else {
          long long v19 = a3;
        }
        uint64_t v20 = (int *)MEMORY[0x1E4F940E8];
        char v72 = (v19 == 0) | v18;
        BOOL v73 = v18;
        unsigned int v21 = (int *)MEMORY[0x1E4F940C8];
        uint64_t v22 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v12;
LABEL_7:
        uint64_t v13 = v9;
LABEL_8:
        uint64_t v14 = v10;
        uint64_t v15 = v11;
LABEL_10:
        ++v7;
        uint64_t v9 = v13;
        uint64_t v10 = v14;
        uint64_t v11 = v15;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v20) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v21)) {
      goto LABEL_105;
    }
    char v23 = 0;
    unsigned int v24 = 0;
    unint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = *v20;
      uint64_t v27 = *(void *)(v3 + v26);
      unint64_t v28 = v27 + 1;
      if (v27 == -1 || v28 > *(void *)(v3 + *v6)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(v3 + *v22) + v27);
      *(void *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0) {
        goto LABEL_25;
      }
      v23 += 7;
      BOOL v30 = v24++ >= 9;
      if (v30)
      {
        unint64_t v25 = 0;
        int v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v21) = 1;
LABEL_25:
    int v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(unsigned char *)(v3 + *v21)) {
      unint64_t v25 = 0;
    }
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_105:
      int v68 = 1;
      goto LABEL_106;
    }
    unint64_t v33 = v25 >> 3;
    BOOL v34 = v73;
    if ((v72 & 1) == 0)
    {
      unint64_t v35 = v19;
      do
      {
        int v37 = *v35++;
        int v36 = v37;
        BOOL v34 = v37 != 0;
        if (v37) {
          BOOL v38 = v36 == v33;
        }
        else {
          BOOL v38 = 1;
        }
      }
      while (!v38);
    }
    switch((int)v33)
    {
      case 1:
        if (!v34) {
          goto LABEL_86;
        }
        if ((*(_WORD *)(a1 + 96) & 0x40) == 0)
        {
          uint64_t v39 = PBReaderReadString();
          uint64_t v40 = 56;
          goto LABEL_59;
        }
        char v58 = PBReaderSkipValueWithTag();
        id v6 = (int *)MEMORY[0x1E4F940E0];
        if ((v58 & 1) == 0) {
          goto LABEL_127;
        }
        __int16 v59 = *(_WORD *)(a1 + 96) << 9;
        goto LABEL_102;
      case 2:
        if (!v34) {
          goto LABEL_86;
        }
        if ((*(_WORD *)(a1 + 96) & 4) == 0)
        {
          uint64_t v39 = PBReaderReadString();
          uint64_t v40 = 24;
          goto LABEL_59;
        }
        char v60 = PBReaderSkipValueWithTag();
        id v6 = (int *)MEMORY[0x1E4F940E0];
        if ((v60 & 1) == 0) {
          goto LABEL_127;
        }
        __int16 v59 = *(_WORD *)(a1 + 96) << 13;
        goto LABEL_102;
      case 3:
        if (!v34) {
          goto LABEL_86;
        }
        if ((*(_WORD *)(a1 + 96) & 0x100) != 0)
        {
          char v61 = PBReaderSkipValueWithTag();
          id v6 = (int *)MEMORY[0x1E4F940E0];
          if ((v61 & 1) == 0) {
            goto LABEL_127;
          }
          __int16 v59 = *(_WORD *)(a1 + 96) << 7;
          goto LABEL_102;
        }
        char v41 = PBReaderPlaceMark();
        id v6 = (int *)MEMORY[0x1E4F940E0];
        if ((v41 & 1) == 0) {
          goto LABEL_127;
        }
        BOOL v42 = objc_alloc_init(GEOPDRating);
        if (!GEOPDRatingReadAllFrom((uint64_t)v42, (void *)v3, v10 & 1)) {
          goto LABEL_126;
        }
        PBReaderRecallMark();
        uint64_t v43 = 72;
        goto LABEL_78;
      case 5:
        if (!v34) {
          goto LABEL_86;
        }
        if ((*(_WORD *)(a1 + 96) & 0x20) == 0)
        {
          uint64_t v39 = PBReaderReadString();
          uint64_t v40 = 48;
LABEL_59:
          uint64_t v47 = *(void **)(a1 + v40);
          *(void *)(a1 + v40) = v39;

          --v7;
LABEL_85:
          unsigned int v21 = (int *)MEMORY[0x1E4F940C8];
          id v6 = (int *)MEMORY[0x1E4F940E0];
          goto LABEL_104;
        }
        char v62 = PBReaderSkipValueWithTag();
        id v6 = (int *)MEMORY[0x1E4F940E0];
        if ((v62 & 1) == 0) {
          goto LABEL_127;
        }
        __int16 v59 = *(_WORD *)(a1 + 96) << 10;
        goto LABEL_102;
      case 6:
        if ((v8 & 1) == 0) {
          goto LABEL_86;
        }
        char v48 = 0;
        unsigned int v49 = 0;
        uint64_t v50 = 0;
        *(_WORD *)(a1 + 96) |= 1u;
        id v6 = (int *)MEMORY[0x1E4F940E0];
        while (2)
        {
          uint64_t v51 = *v20;
          uint64_t v52 = *(void *)(v3 + v51);
          unint64_t v53 = v52 + 1;
          if (v52 == -1 || v53 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v21) = 1;
          }
          else
          {
            char v54 = *(unsigned char *)(*(void *)(v3 + *v22) + v52);
            *(void *)(v3 + v51) = v53;
            v50 |= (unint64_t)(v54 & 0x7F) << v48;
            if (v54 < 0)
            {
              v48 += 7;
              BOOL v30 = v49++ >= 9;
              if (v30)
              {
                LODWORD(v50) = 0;
                goto LABEL_91;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v21)) {
          LODWORD(v50) = 0;
        }
LABEL_91:
        *(_DWORD *)(a1 + 92) = v50;
        goto LABEL_104;
      case 8:
        if (!v34 || (*(_WORD *)(a1 + 96) & 0x10) != 0) {
          goto LABEL_86;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_127;
        }
        BOOL v42 = objc_alloc_init(GEOPDChildPlace);
        if (!GEOPDChildPlaceReadAllFrom((uint64_t)v42, (void *)v3, v10 & 1)) {
          goto LABEL_126;
        }
        PBReaderRecallMark();
        -[GEOPDResultSnippet _addNoFlagsChildPlace:](a1, v42);
        goto LABEL_84;
      case 9:
        if (!v34) {
          goto LABEL_86;
        }
        if ((*(_WORD *)(a1 + 96) & 0x80) != 0)
        {
          char v63 = PBReaderSkipValueWithTag();
          id v6 = (int *)MEMORY[0x1E4F940E0];
          if ((v63 & 1) == 0) {
            goto LABEL_127;
          }
          __int16 v59 = *(_WORD *)(a1 + 96) << 8;
LABEL_102:
          v7 += v59 >> 15;
LABEL_103:
          unsigned int v21 = (int *)MEMORY[0x1E4F940C8];
          goto LABEL_104;
        }
        char v55 = PBReaderPlaceMark();
        id v6 = (int *)MEMORY[0x1E4F940E0];
        if ((v55 & 1) == 0) {
          goto LABEL_127;
        }
        BOOL v42 = objc_alloc_init(GEOPDPriceDescription);
        if (GEOPDPriceDescriptionReadAllFrom((uint64_t)v42, (void *)v3))
        {
          PBReaderRecallMark();
          uint64_t v43 = 64;
LABEL_78:
          BOOL v56 = *(void **)(a1 + v43);
          *(void *)(a1 + v43) = v42;

          --v7;
          goto LABEL_103;
        }
LABEL_126:

LABEL_127:
        int v68 = 0;
        unsigned int v69 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__flags;
        unsigned int v21 = (int *)MEMORY[0x1E4F940C8];
LABEL_107:
        if (v70) {
LABEL_108:
        }
          *(_WORD *)(a1 + v69[322]) |= 2u;
        if (v73 || (v68 & 1) == 0)
        {
          *(_WORD *)(a1 + v69[322]) |= 0x40u;
          *(_WORD *)(a1 + v69[322]) |= 4u;
          *(_WORD *)(a1 + v69[322]) |= 0x100u;
          *(_WORD *)(a1 + v69[322]) |= 0x20u;
          *(_WORD *)(a1 + v69[322]) |= 0x10u;
          *(_WORD *)(a1 + v69[322]) |= 0x80u;
          *(_WORD *)(a1 + v69[322]) |= 8u;
        }
        else if (v19)
        {
          while (1)
          {
            int v64 = *v19++;
            __int16 v65 = 64;
            switch(v64)
            {
              case 0:
                goto LABEL_120;
              case 1:
                goto LABEL_119;
              case 2:
                __int16 v65 = 4;
                goto LABEL_119;
              case 3:
                __int16 v65 = 256;
                goto LABEL_119;
              case 5:
                __int16 v65 = 32;
                goto LABEL_119;
              case 8:
                __int16 v65 = 16;
                goto LABEL_119;
              case 9:
                __int16 v65 = 128;
                goto LABEL_119;
              case 10:
                __int16 v65 = 8;
LABEL_119:
                *(_WORD *)(a1 + v69[322]) |= v65;
                break;
              default:
                continue;
            }
          }
        }
LABEL_120:
        if (v68) {
          unint64_t v3 = *(unsigned char *)(v3 + *v21) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v73)
        {
          char v66 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      case 10:
        if (!v34 || (*(_WORD *)(a1 + 96) & 8) != 0) {
          goto LABEL_86;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_127;
        }
        BOOL v42 = objc_alloc_init(GEOPDChildItem);
        if (!GEOPDChildItemReadAllFrom((uint64_t)v42, (void *)v3, v10 & 1)) {
          goto LABEL_126;
        }
        PBReaderRecallMark();
        -[GEOPDResultSnippet _addNoFlagsChildItem:](a1, v42);
LABEL_84:

        goto LABEL_85;
      default:
        if ((v70 & 1) == 0 || (*(_WORD *)(a1 + 96) & 2) != 0)
        {
LABEL_86:
          char v57 = PBReaderSkipValueWithTag();
          unsigned int v21 = (int *)MEMORY[0x1E4F940C8];
          id v6 = (int *)MEMORY[0x1E4F940E0];
          if ((v57 & 1) == 0)
          {
            int v68 = 0;
LABEL_106:
            unsigned int v69 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__flags;
            goto LABEL_107;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v44 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            unsigned int v45 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v44;
          }
          int v46 = PBUnknownFieldAdd();
          unsigned int v21 = (int *)MEMORY[0x1E4F940C8];
          id v6 = (int *)MEMORY[0x1E4F940E0];
          if (!v46)
          {
            int v68 = 0;
            unsigned int v69 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__flags;
            goto LABEL_108;
          }
        }
LABEL_104:
        if (!(v71 & 1 | (v7 != 0))) {
          goto LABEL_105;
        }
        continue;
    }
  }
}

uint64_t MapsFeature_IsEnabled_Maps269()
{
  return GEOConfigGetBOOL(MapsFeaturesConfig_Maps269Enabled, (uint64_t)off_1E9111CE8);
}

BOOL GEOMapItemHandleShouldStoreRequestData(int a1)
{
  return ((a1 - 2) & 0xFFFFFFFD) == 0;
}

void sub_188E710F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188E715DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188E718EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FetchSubscriptions(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a3;
  uint64_t v16 = 0;
  char v17 = &v16;
  uint64_t v18 = 0x3032000000;
  long long v19 = __Block_byref_object_copy__5;
  uint64_t v20 = __Block_byref_object_dispose__5;
  id v21 = 0;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = __FetchSubscriptions_block_invoke;
  v12[3] = &unk_1E53D7C78;
  id v7 = v5;
  id v13 = v7;
  id v8 = v6;
  id v14 = v8;
  uint64_t v15 = &v16;
  uint64_t v9 = [v7 statementForKey:@"FetchSubscriptions" statementBlock:v12];
  if (a2)
  {
    uint64_t v10 = (void *)v17[5];
    if (v10) {
      *a2 = v10;
    }
  }

  _Block_object_dispose(&v16, 8);
  return v9;
}

void sub_188E71A60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t SetValue(void *a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  id v9 = a1;
  id v10 = a4;
  id v11 = a5;
  uint64_t v24 = 0;
  unint64_t v25 = &v24;
  uint64_t v26 = 0x3032000000;
  uint64_t v27 = __Block_byref_object_copy_;
  unint64_t v28 = __Block_byref_object_dispose_;
  id v29 = 0;
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 3221225472;
  v18[2] = __SetValue_block_invoke;
  v18[3] = &unk_1E53D7DE0;
  id v12 = v9;
  uint64_t v22 = &v24;
  uint64_t v23 = a3;
  id v19 = v12;
  id v13 = v10;
  id v20 = v13;
  id v14 = v11;
  id v21 = v14;
  uint64_t v15 = [v12 executeStatement:@"SetValue" statementBlock:v18];
  if (a2)
  {
    uint64_t v16 = (void *)v25[5];
    if (v16) {
      *a2 = v16;
    }
  }

  _Block_object_dispose(&v24, 8);
  return v15;
}

void sub_188E71EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __SetValue_block_invoke(void *a1, uint64_t a2)
{
  unint64_t v4 = (void *)a1[4];
  uint64_t v5 = a1[8];
  uint64_t v6 = *(void *)(a1[7] + 8);
  id obj = *(id *)(v6 + 40);
  int v7 = [v4 bindInt64Parameter:"@rowid" toValue:v5 inStatement:a2 error:&obj];
  objc_storeStrong((id *)(v6 + 40), obj);
  if (!v7) {
    return 0;
  }
  id v8 = (void *)a1[4];
  uint64_t v9 = a1[5];
  uint64_t v10 = *(void *)(a1[7] + 8);
  id v18 = *(id *)(v10 + 40);
  int v11 = [v8 bindTextParameter:"@type" toValue:v9 inStatement:a2 error:&v18];
  objc_storeStrong((id *)(v10 + 40), v18);
  if (!v11) {
    return 0;
  }
  id v12 = (void *)a1[4];
  uint64_t v13 = a1[6];
  uint64_t v14 = *(void *)(a1[7] + 8);
  id v17 = *(id *)(v14 + 40);
  uint64_t v15 = [v12 bindTextParameter:"@value" toValue:v13 inStatement:a2 error:&v17];
  objc_storeStrong((id *)(v14 + 40), v17);
  return v15;
}

void sub_188E72468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void LookupTileRowForKey(void *a1, int a2, int a3, int a4, int a5, void *a6)
{
  id v11 = a1;
  id v12 = a6;
  v23[0] = 0;
  v23[1] = v23;
  v23[2] = 0x3032000000;
  v23[3] = __Block_byref_object_copy__5;
  v23[4] = __Block_byref_object_dispose__5;
  id v24 = 0;
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = __LookupTileRowForKey_block_invoke;
  void v15[3] = &unk_1E53D9C40;
  id v13 = v11;
  id v16 = v13;
  id v18 = v23;
  int v19 = a2;
  int v20 = a3;
  int v21 = a4;
  int v22 = a5;
  id v14 = v12;
  id v17 = v14;
  [v13 statementForKey:@"LookupTileRowForKey" statementBlock:v15];

  _Block_object_dispose(v23, 8);
}

void sub_188E725C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188E7279C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
}

id GEOGetTileDBLog()
{
  if (qword_1EB29F500 != -1) {
    dispatch_once(&qword_1EB29F500, &__block_literal_global_961);
  }
  uint64_t v0 = (void *)qword_1EB29F4F8;

  return v0;
}

id GEOGetTileDBLog_0()
{
  if (qword_1EB2A0070 != -1) {
    dispatch_once(&qword_1EB2A0070, &__block_literal_global_143);
  }
  uint64_t v0 = (void *)_MergedGlobals_284;

  return v0;
}

void sub_188E72D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
}

uint64_t __LookupTileRowForKey_block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  unint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(unsigned int *)(a1 + 56);
  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8);
  id obj = *(id *)(v6 + 40);
  int v7 = [v4 bindIntParameter:"@key_a" toValue:v5 inStatement:a2 error:&obj];
  objc_storeStrong((id *)(v6 + 40), obj);
  if (v7)
  {
    id v8 = *(void **)(a1 + 32);
    uint64_t v9 = *(unsigned int *)(a1 + 60);
    uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8);
    id v28 = *(id *)(v10 + 40);
    int v11 = [v8 bindIntParameter:"@key_b" toValue:v9 inStatement:a2 error:&v28];
    objc_storeStrong((id *)(v10 + 40), v28);
    if (v11)
    {
      id v12 = *(void **)(a1 + 32);
      uint64_t v13 = *(unsigned int *)(a1 + 64);
      uint64_t v14 = *(void *)(*(void *)(a1 + 48) + 8);
      id v27 = *(id *)(v14 + 40);
      int v15 = [v12 bindIntParameter:"@key_c" toValue:v13 inStatement:a2 error:&v27];
      objc_storeStrong((id *)(v14 + 40), v27);
      if (v15)
      {
        id v16 = *(void **)(a1 + 32);
        uint64_t v17 = *(unsigned int *)(a1 + 68);
        uint64_t v18 = *(void *)(*(void *)(a1 + 48) + 8);
        id v26 = *(id *)(v18 + 40);
        int v19 = [v16 bindIntParameter:"@key_d" toValue:v17 inStatement:a2 error:&v26];
        objc_storeStrong((id *)(v18 + 40), v26);
        if (v19)
        {
          while (1)
          {
            uint64_t v20 = sqlite3_step(a2);
            uint64_t v21 = v20;
            if (v20 != 100) {
              break;
            }
            [*(id *)(a1 + 32) int64ForColumn:0 inStatment:a2];
            if (!(*(unsigned int (**)(void))(*(void *)(a1 + 40) + 16))()) {
              return 1;
            }
          }
          if (v20 == 101) {
            return 1;
          }
          uint64_t v23 = *(void **)(a1 + 32);
          uint64_t v24 = *(void *)(*(void *)(a1 + 48) + 8);
          id v25 = *(id *)(v24 + 40);
          [v23 reportSQLiteErrorCode:v21 method:@"step" error:&v25];
          objc_storeStrong((id *)(v24 + 40), v25);
        }
      }
    }
  }
  return 0;
}

uint64_t __GetDataForKey_block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  unint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(unsigned int *)(a1 + 56);
  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8);
  id obj = *(id *)(v6 + 40);
  int v7 = [v4 bindIntParameter:"@tiles_key_a" toValue:v5 inStatement:a2 error:&obj];
  objc_storeStrong((id *)(v6 + 40), obj);
  if (!v7) {
    return 0;
  }
  id v8 = *(void **)(a1 + 32);
  uint64_t v9 = *(unsigned int *)(a1 + 60);
  uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8);
  id v32 = *(id *)(v10 + 40);
  int v11 = [v8 bindIntParameter:"@tiles_key_b" toValue:v9 inStatement:a2 error:&v32];
  objc_storeStrong((id *)(v10 + 40), v32);
  if (!v11) {
    return 0;
  }
  id v12 = *(void **)(a1 + 32);
  uint64_t v13 = *(unsigned int *)(a1 + 64);
  uint64_t v14 = *(void *)(*(void *)(a1 + 48) + 8);
  id v31 = *(id *)(v14 + 40);
  int v15 = [v12 bindIntParameter:"@tiles_key_c" toValue:v13 inStatement:a2 error:&v31];
  objc_storeStrong((id *)(v14 + 40), v31);
  if (!v15) {
    return 0;
  }
  id v16 = *(void **)(a1 + 32);
  uint64_t v17 = *(unsigned int *)(a1 + 68);
  uint64_t v18 = *(void *)(*(void *)(a1 + 48) + 8);
  id v30 = *(id *)(v18 + 40);
  int v19 = [v16 bindIntParameter:"@tiles_key_d" toValue:v17 inStatement:a2 error:&v30];
  objc_storeStrong((id *)(v18 + 40), v30);
  if (!v19) {
    return 0;
  }
  uint64_t v20 = sqlite3_step(a2);
  if (v20 == 100)
  {
    while (1)
    {
      [*(id *)(a1 + 32) intForColumn:0 inStatment:a2];
      [*(id *)(a1 + 32) int64ForColumn:1 inStatment:a2];
      uint64_t v21 = [*(id *)(a1 + 32) blobForColumn:2 inStatment:a2];
      int v22 = [*(id *)(a1 + 32) UUIDForColumn:3 inStatment:a2];
      uint64_t v23 = [*(id *)(a1 + 32) stringForColumn:4 inStatment:a2];
      [*(id *)(a1 + 32) intForColumn:5 inStatment:a2];
      [*(id *)(a1 + 32) intForColumn:6 inStatment:a2];
      if (((*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))() & 1) == 0) {
        break;
      }
      uint64_t v20 = sqlite3_step(a2);

      if (v20 != 100) {
        goto LABEL_8;
      }
    }

    uint64_t v24 = 1;
    goto LABEL_12;
  }
LABEL_8:
  if (v20 != 101)
  {
    id v25 = *(void **)(a1 + 32);
    uint64_t v26 = *(void *)(*(void *)(a1 + 48) + 8);
    id v29 = *(id *)(v26 + 40);
    [v25 reportSQLiteErrorCode:v20 method:@"step" error:&v29];
    id v27 = v29;
    uint64_t v24 = 0;
    uint64_t v21 = *(void **)(v26 + 40);
    *(void *)(v26 + 40) = v27;
LABEL_12:

    return v24;
  }
  return 1;
}

void sub_188E74048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL __FetchSubscriptions_block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v4 = sqlite3_step(a2);
  do
  {
    if (v4 != 100) {
      break;
    }
    [*(id *)(a1 + 32) int64ForColumn:0 inStatment:a2];
    uint64_t v5 = [*(id *)(a1 + 32) stringForColumn:1 inStatment:a2];
    uint64_t v6 = [*(id *)(a1 + 32) stringForColumn:2 inStatment:a2];
    [*(id *)(a1 + 32) int64ForColumn:3 inStatment:a2];
    [*(id *)(a1 + 32) int64ForColumn:4 inStatment:a2];
    [*(id *)(a1 + 32) int64ForColumn:5 inStatment:a2];
    int v7 = [*(id *)(a1 + 32) blobForColumn:6 inStatment:a2];
    id v8 = [*(id *)(a1 + 32) stringForColumn:7 inStatment:a2];
    int v9 = (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40));
    char v10 = v9;
    uint64_t v4 = v9 ? sqlite3_step(a2) : 101;
  }
  while ((v10 & 1) != 0);
  if (v4 != 101)
  {
    int v11 = *(void **)(a1 + 32);
    uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8);
    id obj = *(id *)(v12 + 40);
    [v11 reportSQLiteErrorCode:v4 method:@"step" error:&obj];
    objc_storeStrong((id *)(v12 + 40), obj);
  }
  return v4 == 101;
}

void sub_188E74994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188E74C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL __FetchExpiredSubscriptions_block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v4 = sqlite3_step(a2);
  do
  {
    if (v4 != 100) {
      break;
    }
    uint64_t v5 = [*(id *)(a1 + 32) stringForColumn:0 inStatment:a2];
    uint64_t v6 = [*(id *)(a1 + 32) stringForColumn:1 inStatment:a2];
    [*(id *)(a1 + 32) int64ForColumn:2 inStatment:a2];
    [*(id *)(a1 + 32) int64ForColumn:3 inStatment:a2];
    int v7 = [*(id *)(a1 + 32) blobForColumn:4 inStatment:a2];
    id v8 = [*(id *)(a1 + 32) stringForColumn:5 inStatment:a2];
    [*(id *)(a1 + 32) intForColumn:6 inStatment:a2];
    int v9 = (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
    char v10 = v9;
    uint64_t v4 = v9 ? sqlite3_step(a2) : 101;
  }
  while ((v10 & 1) != 0);
  if (v4 != 101)
  {
    int v11 = *(void **)(a1 + 32);
    uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8);
    id obj = *(id *)(v12 + 40);
    [v11 reportSQLiteErrorCode:v4 method:@"step" error:&obj];
    objc_storeStrong((id *)(v12 + 40), obj);
  }
  return v4 == 101;
}

uint64_t __ClearXPCValue_block_invoke(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[6];
  unint64_t v3 = (void *)a1[4];
  uint64_t v4 = *(void *)(a1[5] + 8);
  id obj = *(id *)(v4 + 40);
  uint64_t v5 = [v3 bindInt64Parameter:"@rowid" toValue:v2 inStatement:a2 error:&obj];
  objc_storeStrong((id *)(v4 + 40), obj);
  return v5;
}

BOOL __CalculateTotalOfflineDataSize_block_invoke(void *a1, sqlite3_stmt *a2)
{
  uint64_t v4 = sqlite3_step(a2);
  uint64_t v5 = (void *)a1[4];
  if (v4 == 100)
  {
    *(void *)(*(void *)(a1[5] + 8) + 24) = [v5 int64ForColumn:0 inStatment:a2];
  }
  else
  {
    uint64_t v6 = *(void *)(a1[6] + 8);
    id obj = *(id *)(v6 + 40);
    [v5 reportSQLiteErrorCode:v4 method:@"step" error:&obj];
    objc_storeStrong((id *)(v6 + 40), obj);
  }
  return v4 == 100;
}

void sub_188E75408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_188E75938(_Unwind_Exception *exception_object)
{
  if (v1) {

  }
  _Unwind_Resume(exception_object);
}

void ___registerSupportSourcesIfNecessary_block_invoke()
{
  uint64_t v0 = (void *)MEMORY[0x1E4F14428];
  uint64_t v1 = _GEOConfigAddBlockListenerForKey(GeoOfflineConfig_SupportsOffline, (uint64_t)off_1E9115908, MEMORY[0x1E4F14428], &__block_literal_global_53_0);
  uint64_t v2 = (void *)_MergedGlobals_231;
  _MergedGlobals_231 = v1;

  uint64_t v3 = _GEOConfigAddBlockListenerForKey(GeoOfflineConfig_OfflineSupportDeprecated, (uint64_t)off_1E9115918, v0, &__block_literal_global_55_1);
  uint64_t v4 = (void *)qword_1EB29FA38;
  qword_1EB29FA38 = v3;

  uint64_t v5 = objc_alloc_init(_GEOOfflineSupportTileGroupObserver);
  uint64_t v6 = (void *)qword_1EB29FA40;
  qword_1EB29FA40 = (uint64_t)v5;

  id v7 = +[GEOResourceManifestManager modernManager];
  [v7 addTileGroupObserver:qword_1EB29FA40 queue:v0];
}

void MapsFeature_AddDelegateListener(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  uint64_t v18 = 0;
  int v19 = &v18;
  uint64_t v20 = 0x3032000000;
  uint64_t v21 = __Block_byref_object_copy__96;
  int v22 = __Block_byref_object_dispose__96;
  id v23 = 0;
  objc_initWeak(&location, v8);
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = __MapsFeature_AddDelegateListener_block_invoke;
  void v15[3] = &unk_1E53F5B50;
  objc_copyWeak(v16, &location);
  void v15[4] = &v18;
  v16[1] = a1;
  _OWORD v16[2] = a2;
  uint64_t v9 = MapsFeature_AddBlockListener((uint64_t)a1, a2, v7, v15);
  char v10 = (void *)v19[5];
  v19[5] = v9;

  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = __MapsFeature_AddDelegateListener_block_invoke_2;
  v12[3] = &unk_1E53F5B00;
  id v11 = v8;
  id v13 = v11;
  uint64_t v14 = &v18;
  withSFFDelegateListeners(v12);

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Block_object_dispose(&v18, 8);
}

void sub_188E75BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location,char a25)
{
  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a25, 8);
  _Unwind_Resume(a1);
}

void withSFFDelegateListeners(void *a1)
{
  uint64_t v3 = a1;
  os_unfair_lock_lock(&stru_1EB2A0754);
  if (!qword_1EB2A0760)
  {
    uint64_t v1 = [MEMORY[0x1E4F28E10] weakToStrongObjectsMapTable];
    uint64_t v2 = (void *)qword_1EB2A0760;
    qword_1EB2A0760 = v1;
  }
  v3[2]();
  os_unfair_lock_unlock(&stru_1EB2A0754);
}

void sub_188E75CA0(_Unwind_Exception *a1)
{
}

void ___notifyListenersOfKeyChange_block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v20 = a2;
  id v19 = a3;
  id v7 = a4;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id v8 = *(id *)(a1 + 32);
  uint64_t v9 = [v8 countByEnumeratingWithState:&v21 objects:v25 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v22;
    do
    {
      uint64_t v12 = 0;
      do
      {
        if (*(void *)v22 != v11) {
          objc_enumerationMutation(v8);
        }
        id v13 = objc_msgSend(v7, "objectForKeyedSubscript:", *(void *)(*((void *)&v21 + 1) + 8 * v12), v19);
        if (-[_GEOConfigKeyHelper valueChanged](v13))
        {
          uint64_t v14 = *(void **)(a1 + 40);
          uint64_t v15 = [v20 objectForKeyedSubscript:v13];
          [v14 addObjectsFromArray:v15];

          id v16 = [v19 objectForKeyedSubscript:v13];
          [v16 compact];
          uint64_t v17 = *(void **)(a1 + 40);
          uint64_t v18 = [v16 allObjects];
          [v17 addObjectsFromArray:v18];
        }
        ++v12;
      }
      while (v10 != v12);
      uint64_t v10 = [v8 countByEnumeratingWithState:&v21 objects:v25 count:16];
    }
    while (v10);
  }
}

void sub_188E76464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::destroy(v29 - 160, *(void **)(v29 - 152));
  _Block_object_dispose(&a28, 8);

  _Unwind_Resume(a1);
}

void sub_188E76840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  gloria::ManagedSlice::~ManagedSlice(&a16);

  _Unwind_Resume(a1);
}

void gloria::GloriaDB::Get(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v9[0] = 1;
  int v10 = 0;
  uint64_t v11 = "";
  uint64_t v12 = 0;
  gloria::GloriaDB::Get(&v7, a1, a2, (uint64_t)v9);
  if (LODWORD(v7.__r_.__value_.__l.__data_)) {
    gloria::Status::Status(a4, (uint64_t)&v7);
  }
  else {
    (***(void (****)(void, unsigned char *, uint64_t))(a1 + 192))(*(void *)(a1 + 192), v9, a3);
  }
  if (v8 < 0) {
    operator delete((void *)v7.__r_.__value_.__l.__size_);
  }
}

void sub_188E76950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void gloria::GloriaDB::Get(std::string *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::string::basic_string[abi:ne180100](__dst, *(void **)(a3 + 8), *(void *)(a3 + 16));
  uint64_t v8 = (****(uint64_t (*****)(void))(a2 + 184))();
  uint64_t v9 = v8;
  unint64_t v10 = *(unsigned int *)(a2 + 152);
  if (v8 >= 0) {
    unint64_t v11 = v8;
  }
  else {
    unint64_t v11 = -v8;
  }
  uint64_t v21 = 0;
  gloria::ShardPool::Get((gloria::ShardPool *)v18, (unsigned int *)(a2 + 136), (const gloria::Shard **)(v11 % v10), &v21);
  if (v20 < 0) {
    operator delete(__p);
  }
  uint64_t v12 = (const gloria::Shard *)v21;
  if (*(char *)(v21 + 127) < 0)
  {
    if (!*(void *)(v21 + 112))
    {
LABEL_11:
      gloria::ShardManager::DoGet(a2 + 72, v12, a3, a4, a1);
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v21 + 127))
  {
    goto LABEL_11;
  }
  uint64_t v13 = (*(uint64_t (**)(void, void **, uint64_t))(***(void ***)(a2 + 184) + 8))(**(void **)(a2 + 184), __dst, v9);
  if (gloria::Shard::BloomFilterHas(v12, v9, v13)) {
    goto LABEL_11;
  }
  v14[0] = 1;
  int v15 = 0;
  id v16 = "key was not found";
  uint64_t v17 = 17;
  gloria::Status::Status((uint64_t)a1, 1, (uint64_t)v14);
LABEL_13:
  if (v23 < 0) {
    operator delete(__dst[0]);
  }
}

void sub_188E76AFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t gloria::XXHashFn::Hash(uint64_t a1, uint64_t a2, unint64_t a3)
{
  int v3 = *(char *)(a2 + 23);
  if (v3 >= 0) {
    uint64_t v4 = (unsigned int *)a2;
  }
  else {
    uint64_t v4 = *(unsigned int **)a2;
  }
  if (v3 >= 0) {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v5 = *(void *)(a2 + 8);
  }
  return XXH64_endian_align(v4, v5, a3);
}

uint64_t gloria::XXHashFn::Hash(void *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void *, uint64_t, void))(*a1 + 8))(a1, a2, a1[1]);
}

uint64_t gloria::ShardPool::Get(gloria::ShardPool *this, unsigned int *a2, const gloria::Shard **a3, void *a4)
{
  int v4 = (int)a3;
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (*((void *)a2 + 2) <= (unint64_t)a3
    || (uint64_t v8 = a2 + 2, (v7 = (uint64_t *)*((void *)a2 + 1)) == 0))
  {
LABEL_8:
    snprintf(__str, 0x64uLL, "shard_ id %d not found ", a3);
    v17[0] = 1;
    int v18 = 0;
    id v19 = __str;
    size_t v20 = strlen(__str);
    return gloria::Status::Status((uint64_t)this, 1, (uint64_t)v17);
  }
  unint64_t v10 = (uint64_t *)*((void *)a2 + 1);
  while (1)
  {
    int v11 = *((_DWORD *)v10 + 8);
    if (v11 <= (int)a3) {
      break;
    }
LABEL_7:
    unint64_t v10 = (uint64_t *)*v10;
    if (!v10) {
      goto LABEL_8;
    }
  }
  if (v11 < (int)a3)
  {
    ++v10;
    goto LABEL_7;
  }
  do
  {
    while (1)
    {
      uint64_t v13 = (uint64_t **)v7;
      int v14 = *((_DWORD *)v7 + 8);
      if (v14 <= (int)a3) {
        break;
      }
      std::string v7 = *v13;
      if (!*v13)
      {
        int v15 = v13;
        goto LABEL_15;
      }
    }
    if (v14 >= (int)a3) {
      goto LABEL_16;
    }
    std::string v7 = v13[1];
  }
  while (v7);
  int v15 = v13 + 1;
LABEL_15:
  id v16 = (char *)operator new(0xD8uLL);
  long long v22 = (const char *)v8;
  *((_DWORD *)v16 + 8) = v4;
  *(_OWORD *)(v16 + 40) = 0u;
  *(_OWORD *)(v16 + 56) = 0u;
  *((_DWORD *)v16 + 18) = -1;
  *((_OWORD *)v16 + 5) = 0u;
  *((_OWORD *)v16 + 6) = 0u;
  *((_OWORD *)v16 + 7) = 0u;
  *((_OWORD *)v16 + 8) = 0u;
  *((_OWORD *)v16 + 9) = 0u;
  *((_OWORD *)v16 + 10) = 0u;
  *((_OWORD *)v16 + 11) = 0u;
  *((_OWORD *)v16 + 12) = 0u;
  *((void *)v16 + 26) = 0;
  LOBYTE(v23) = 1;
  std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::__insert_node_at((uint64_t **)a2, (uint64_t)v13, v15, (uint64_t *)v16);
  *(void *)__str = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<int,gloria::Shard>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,gloria::Shard>,void *>>>>::reset[abi:ne180100]((uint64_t *)__str, 0);
  uint64_t v13 = (uint64_t **)v16;
LABEL_16:
  *a4 = v13 + 5;
  __str[0] = 1;
  *(_DWORD *)&__str[4] = 0;
  long long v22 = "";
  uint64_t v23 = 0;
  return gloria::Status::Status((uint64_t)this, 0, (uint64_t)__str);
}

void gloria::ShardManager::DoGet(uint64_t a1@<X0>, const gloria::Shard *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, std::string *a5@<X8>)
{
  uint64_t v11 = 0;
  gloria::ShardManager::DoContains(a1, a2, a3, &v11, (uint64_t)a5);
  if (!LODWORD(a5->__r_.__value_.__l.__data_))
  {
    gloria::RecordReader::ReadPayloadAt(*((void (****)(void *__return_ptr, void, void, void, void))a2 + 1), v11, a4, (uint64_t)v8);
    gloria::Status::operator=(a5, (uint64_t)v8);
    if (v10 < 0) {
      operator delete(__p);
    }
  }
}

void sub_188E76DB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v16 + 31) < 0) {
    operator delete(*(void **)(v16 + 8));
  }
  _Unwind_Resume(exception_object);
}

void gloria::ShardManager::DoContains(uint64_t a1@<X0>, const gloria::Shard *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  void (***v12)(void **__return_ptr, void, uint64_t *, uint64_t *, char *);
  uint64_t v13;
  std::string *v14;
  std::string *v15;
  std::string *v16;
  std::string::size_type size;
  std::string *v18;
  std::string *v19;
  std::string *v20;
  std::string::size_type v21;
  std::string::size_type v22;
  std::string *v23;
  int v24;
  std::string v25;
  std::string v26;
  std::string v27;
  int v28;
  void *__p;
  char v30;

  gloria::ShardManager::CheckShardInitialization(a2, (uint64_t)&v28);
  if (v28)
  {
    gloria::Status::Status(a5, (uint64_t)&v28);
  }
  else
  {
    uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
    if (*(void *)(a3 + 16) == v10)
    {
      v27.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1ED514450;
      int v11 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
      uint64_t v12 = *(void (****)(void **__return_ptr, void, uint64_t *, uint64_t *, char *))a2;
      uint64_t v13 = *(void *)(*(void *)a2 + 24) - *(void *)(*(void *)a2 + 16);
      uint64_t v24 = *(void *)(a1 + 48) + v11;
      v26.__r_.__value_.__r.__words[0] = 0;
      v25.__r_.__value_.__r.__words[0] = v13 / v24;
      gloria::BinarySearchStrategy::search(v12, a3, &v24, (uint64_t *)&v26, (uint64_t *)&v25, a4, a5);
    }
    else
    {
      memset(&v27, 0, sizeof(v27));
      int v14 = std::string::append(&v27, "the size_ of the key provided is not matching the expected size_");
      int v15 = std::string::append(v14, "expected: ");
      std::to_string(&v26, v10);
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v16 = &v26;
      }
      else {
        uint64_t v16 = (std::string *)v26.__r_.__value_.__r.__words[0];
      }
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
      }
      else {
        size = v26.__r_.__value_.__l.__size_;
      }
      int v18 = std::string::append(v15, (const std::string::value_type *)v16, size);
      id v19 = std::string::append(v18, " but found:");
      std::to_string(&v25, *(void *)(a3 + 16));
      if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v20 = &v25;
      }
      else {
        size_t v20 = (std::string *)v25.__r_.__value_.__r.__words[0];
      }
      if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v21 = HIBYTE(v25.__r_.__value_.__r.__words[2]);
      }
      else {
        uint64_t v21 = v25.__r_.__value_.__l.__size_;
      }
      std::string::append(v19, (const std::string::value_type *)v20, v21);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v25.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
      v26.__r_.__value_.__s.__data_[0] = 1;
      HIDWORD(v26.__r_.__value_.__r.__words[0]) = 0;
      long long v22 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
      uint64_t v23 = &v27;
      if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      {
        long long v22 = v27.__r_.__value_.__l.__size_;
        uint64_t v23 = (std::string *)v27.__r_.__value_.__r.__words[0];
      }
      v26.__r_.__value_.__l.__size_ = (std::string::size_type)v23;
      v26.__r_.__value_.__r.__words[2] = v22;
      gloria::Status::Status(a5, 3, (uint64_t)&v26);
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v27.__r_.__value_.__l.__data_);
      }
    }
  }
  if (v30 < 0) {
    operator delete(__p);
  }
}

void sub_188E77030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  _Unwind_Resume(exception_object);
}

uint64_t geo::GloriaDB::QuadKey::Size(geo::GloriaDB::QuadKey *this)
{
  return 8;
}

uint64_t gloria::ShardManager::CheckShardInitialization@<X0>(const gloria::Shard *a1@<X1>, uint64_t a2@<X8>)
{
  if (*(_OWORD *)a1 != 0) {
    goto LABEL_10;
  }
  uint64_t v4 = *((unsigned __int8 *)a1 + 127);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a1 + 14);
  }
  if (!v4 || *((void *)a1 + 2) == 0)
  {
    v8[0] = 1;
    int v9 = 0;
    uint64_t v10 = "the shard_ was not initialized and cannot be queried: the index was not loaded previously or may have failed loading it";
    uint64_t v11 = 119;
    int v6 = 4;
  }
  else
  {
LABEL_10:
    v8[0] = 1;
    int v9 = 0;
    uint64_t v10 = (const char *)&str_5;
    uint64_t v11 = 0;
    int v6 = 0;
  }
  return gloria::Status::Status(a2, v6, (uint64_t)v8);
}

unint64_t XXH64_endian_align(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = (unint64_t)a1 + a2;
  if (a2 < 0x20)
  {
    unint64_t v13 = a3 + 0x27D4EB2F165667C5;
    std::string v7 = a1;
  }
  else
  {
    unint64_t v4 = a3 + 0x60EA27EEADC0B5D6;
    unint64_t v5 = a3 - 0x3D4D51C2D82B14B1;
    unint64_t v6 = a3 + 0x61C8864E7A143579;
    std::string v7 = a1;
    do
    {
      uint64_t v8 = __ROR8__(v4 - 0x3D4D51C2D82B14B1 * *(void *)v7, 33);
      unint64_t v4 = 0x9E3779B185EBCA87 * v8;
      uint64_t v9 = __ROR8__(v5 - 0x3D4D51C2D82B14B1 * *((void *)v7 + 1), 33);
      unint64_t v5 = 0x9E3779B185EBCA87 * v9;
      uint64_t v10 = *((void *)v7 + 3);
      uint64_t v11 = __ROR8__(a3 - 0x3D4D51C2D82B14B1 * *((void *)v7 + 2), 33);
      a3 = 0x9E3779B185EBCA87 * v11;
      v7 += 8;
      uint64_t v12 = __ROR8__(v6 - 0x3D4D51C2D82B14B1 * v10, 33);
      unint64_t v6 = 0x9E3779B185EBCA87 * v12;
    }
    while ((unint64_t)v7 <= v3 - 32);
    unint64_t v13 = 0x85EBCA77C2B2AE63
        - 0x61C8864E7A143579
        * ((0x85EBCA77C2B2AE63
          - 0x61C8864E7A143579
          * ((0x85EBCA77C2B2AE63
            - 0x61C8864E7A143579
            * ((0x85EBCA77C2B2AE63
              - 0x61C8864E7A143579
              * ((((0x3C6EF3630BD7950ELL * v8) | (v4 >> 63))
                + 0x1BBCD8C2F5E54380 * v9
                + (v5 >> 57)
                + 0x779B185EBCA87000 * v11
                + (a3 >> 52)
                - 0x1939E850D5E40000 * v12
                + (v6 >> 46)) ^ (0x9E3779B185EBCA87
                               * ((0x87BCB65480000000 * v8) | ((0xDEF35B010F796CA9 * v8) >> 33))))) ^ (0x9E3779B185EBCA87 * ((0x87BCB65480000000 * v9) | ((0xDEF35B010F796CA9 * v9) >> 33))))) ^ (0x9E3779B185EBCA87 * ((0x87BCB65480000000 * v11) | ((0xDEF35B010F796CA9 * v11) >> 33))))) ^ (0x9E3779B185EBCA87 * ((0x87BCB65480000000 * v12) | ((0xDEF35B010F796CA9 * v12) >> 33))));
  }
  unint64_t v14 = v13 + a2;
  if ((unint64_t)(v7 + 2) <= v3)
  {
    do
    {
      int v15 = v7 + 2;
      unint64_t v14 = 0x85EBCA77C2B2AE63
          - 0x61C8864E7A143579
          * __ROR8__((0x9E3779B185EBCA87* ((0x93EA75A780000000 * *(void *)v7) | ((0xC2B2AE3D27D4EB4FLL * *(void *)v7) >> 33))) ^ v14, 37);
      BOOL v16 = (unint64_t)(v7 + 4) > v3;
      v7 += 2;
    }
    while (!v16);
  }
  else
  {
    int v15 = v7;
  }
  if ((unint64_t)(v15 + 1) <= v3) {
    unint64_t v14 = 0x165667B19E3779F9 - 0x3D4D51C2D82B14B1 * __ROR8__((0x9E3779B185EBCA87 * *v15++) ^ v14, 41);
  }
  if ((unint64_t)v15 < v3)
  {
    unint64_t v17 = (char *)a1 + a2 - (char *)v15;
    do
    {
      unsigned int v18 = *(unsigned __int8 *)v15;
      int v15 = (unsigned int *)((char *)v15 + 1);
      unint64_t v14 = 0x9E3779B185EBCA87 * __ROR8__((0x27D4EB2F165667C5 * v18) ^ v14, 53);
      --v17;
    }
    while (v17);
  }
  unint64_t v19 = 0x165667B19E3779F9
      * ((0xC2B2AE3D27D4EB4FLL * (v14 ^ (v14 >> 33))) ^ ((0xC2B2AE3D27D4EB4FLL * (v14 ^ (v14 >> 33))) >> 29));
  return v19 ^ HIDWORD(v19);
}

void gloria::ManagedSlice::~ManagedSlice(void **this)
{
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
}

uint64_t gloria::ManagedSlice::Clean(uint64_t this)
{
  uint64_t v1 = this;
  *(void *)(this + 8) = "";
  *(void *)(this + 16) = 0;
  if (*(unsigned char *)(this + 56))
  {
    uint64_t v2 = *(void *)(this + 48);
    if (v2)
    {
      if (*(char *)(v2 + 23) < 0) {
        operator delete(*(void **)v2);
      }
      this = MEMORY[0x18C11F580](v2, 0x1012C40EC159624);
    }
    *(void *)(v1 + 48) = 0;
  }
  if (*(unsigned char *)(v1 + 57))
  {
    if (*(char *)(v1 + 47) < 0)
    {
      **(unsigned char **)(v1 + 24) = 0;
      *(void *)(v1 + 32) = 0;
    }
    else
    {
      *(unsigned char *)(v1 + 24) = 0;
      *(unsigned char *)(v1 + 47) = 0;
    }
  }
  *(_WORD *)(v1 + 56) = 0;
  return this;
}

BOOL _isAncestor(gloria::TileId *a1, unsigned __int8 a2, unint64_t a3)
{
  int v3 = __clz(a3);
  int v4 = (int)((63 - v3 + (((63 - v3) & 0x80u) >> 7)) << 24) >> 25;
  if (v4 <= a2)
  {
    BOOL result = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT);
    if (result)
    {
      *(_WORD *)std::string v7 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Assertion failed: root.zoom() < tileID.zoom()", v7, 2u);
      return 0;
    }
  }
  else
  {
    unint64_t v5 = (a3 - gloria::LEADING_BITS_VALUE_LUT[v4]) >> (2 * (v4 - a2));
    if (!a2) {
      unint64_t v5 = 0;
    }
    return v5 == (void)a1;
  }
  return result;
}

void gloria::RecordReader::ReadPayloadAt(void (***a1)(void *__return_ptr, void, void, void, void)@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  LODWORD(v11.__r_.__value_.__l.__data_) = 10;
  uint64_t v12 = 0;
  *(_OWORD *)&v11.__r_.__value_.__r.__words[1] = 0uLL;
  LOBYTE(v19) = 1;
  HIDWORD(v19) = 0;
  size_t v20 = (unsigned int *)&str_5;
  uint64_t v21 = 0;
  v13[0] = a2;
  uint64_t v14 = 4;
  (**a1)(&v15, a1, v13, &v14, &v19);
  if (v18 < 0) {
    operator delete(__p);
  }
  uint64_t v8 = *v20;
  LOBYTE(v13[0]) = 1;
  HIDWORD(v13[0]) = 0;
  v13[1] = &str_5;
  v13[2] = 0;
  gloria::Status::Status((uint64_t)v9, 0, (uint64_t)v13);
  gloria::Status::operator=(&v11, (uint64_t)v9);
  if (v10 < 0) {
    operator delete((void *)v9[1]);
  }
  if (LODWORD(v11.__r_.__value_.__l.__data_)) {
    goto LABEL_9;
  }
  v9[0] = a2 + 4;
  uint64_t v19 = v8;
  (**a1)(&v15, a1, v9, &v19, a3);
  gloria::Status::operator=(&v11, (uint64_t)&v15);
  if (v18 < 0) {
    operator delete(__p);
  }
  if (LODWORD(v11.__r_.__value_.__l.__data_))
  {
LABEL_9:
    gloria::Status::Status(a4, (uint64_t)&v11);
  }
  else
  {
    LOBYTE(v15) = 1;
    HIDWORD(v15) = 0;
    std::string __p = &str_5;
    uint64_t v17 = 0;
    gloria::Status::Status(a4, 0, (uint64_t)&v15);
  }
  if (SHIBYTE(v12) < 0) {
    operator delete((void *)v11.__r_.__value_.__l.__size_);
  }
}

void sub_188E7771C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t gloria::NoopDecompressor::decompress@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  *(unsigned char *)(a2 + 56) = 0;
  *(void *)(a2 + 8) = *(void *)(a1 + 8);
  *(void *)(a2 + 16) = *(void *)(a1 + 16);
  v4[0] = 1;
  int v5 = 0;
  unint64_t v6 = "";
  uint64_t v7 = 0;
  return gloria::Status::Status(a3, 0, (uint64_t)v4);
}

void sub_188E778BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id GEOGetGeographicMetadataLog()
{
  if (qword_1EB2A03C8 != -1) {
    dispatch_once(&qword_1EB2A03C8, &__block_literal_global_176);
  }
  uint64_t v0 = (void *)_MergedGlobals_314;

  return v0;
}

void gloria::Status::ToString(gloria::Status *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  __p[0] = 0;
  __p[1] = 0;
  std::string::size_type v10 = 0;
  uint64_t v4 = *(int *)this;
  if v4 < 0xF && ((0x7DFFu >> v4))
  {
    int v5 = off_1E53D7330[v4];
  }
  else
  {
    int v5 = __str;
    snprintf(__str, 0x1EuLL, "Unknown code(%d): ", *(_DWORD *)this);
  }
  MEMORY[0x18C11F1C0](__p, v5);
  if (SHIBYTE(v10) < 0)
  {
    std::string::__init_copy_ctor_external(a2, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    a2->__r_.__value_.__r.__words[2] = v10;
  }
  char v6 = *((unsigned char *)this + 31);
  if (v6 < 0)
  {
    if (!*((void *)this + 2)) {
      goto LABEL_19;
    }
  }
  else if (!*((unsigned char *)this + 31))
  {
    goto LABEL_19;
  }
  if (v6 >= 0) {
    uint64_t v7 = (char *)this + 8;
  }
  else {
    uint64_t v7 = (const std::string::value_type *)*((void *)this + 1);
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *((unsigned __int8 *)this + 31);
  }
  else {
    std::string::size_type v8 = *((void *)this + 2);
  }
  std::string::append(a2, v7, v8);
LABEL_19:
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
}

void sub_188E77D20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (*(char *)(v16 + 23) < 0) {
    operator delete(*(void **)v16);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t gloria::Status::Status(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = 10;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  std::string::operator=((std::string *)(a1 + 8), (const std::string *)(a2 + 8));
  *(_DWORD *)a1 = *(_DWORD *)a2;
  return a1;
}

void sub_188E77DAC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

id MapsFeature_AddBlockListener(uint64_t a1, void *a2, void *a3, void *a4)
{
  v24[4] = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  id v8 = a4;
  v22[0] = 0;
  v22[1] = v22;
  v22[2] = 0x2020000000;
  char IsEnabled = 0;
  char IsEnabled = MapsFeature_IsEnabled(a1, a2);
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3221225472;
  v17[2] = __MapsFeature_AddBlockListener_block_invoke;
  v17[3] = &unk_1E53F5B28;
  uint64_t v20 = a1;
  uint64_t v21 = a2;
  uint64_t v19 = v22;
  id v9 = v8;
  id v18 = v9;
  std::string::size_type v10 = (void *)MEMORY[0x18C120660](v17);
  std::string v11 = _GEOConfigAddBlockListenerForKey(a1, (uint64_t)a2, v7, v10);
  uint64_t v12 = _GEOConfigAddBlockListenerForKey(MapsFeaturesConfig_RemoteFeatureFlags, (uint64_t)off_1E9111BD8, v7, v10);
  unint64_t v13 = _GEOConfigAddBlockListenerForKey(GeoServicesConfig_ClientAuthFeatureFlagsStateInfo, (uint64_t)off_1E9114AD8, v7, v10);
  uint64_t v14 = _GEOConfigAddBlockListenerForKey(GeoServicesConfig_MapsAuthClientFeatureFlagsLastUpdated, (uint64_t)off_1E9114B28, v7, v10);
  v24[0] = v11;
  v24[1] = v12;
  v24[2] = v13;
  v24[3] = v14;
  uint64_t v15 = [MEMORY[0x1E4F1C978] arrayWithObjects:v24 count:4];

  _Block_object_dispose(v22, 8);

  return v15;
}

void sub_188E77FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _GEOConfigAddBlockListenerForKey(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  v13[2] = ___GEOConfigAddBlockListenerForKey_block_invoke;
  void v13[3] = &unk_1E53E8560;
  id v14 = v7;
  id v15 = v8;
  id v9 = v8;
  id v10 = v7;
  std::string v11 = _GEOConfigAddListenerForKey(a1, a2, v13);

  return v11;
}

id _GEOConfigAddListenerForKey(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v36 = 0;
  int v37 = &v36;
  uint64_t v38 = 0x3032000000;
  uint64_t v39 = __Block_byref_object_copy__65;
  uint64_t v40 = __Block_byref_object_dispose__65;
  id v41 = 0;
  uint64_t v30 = 0;
  id v31 = &v30;
  uint64_t v32 = 0x3032000000;
  unint64_t v33 = __Block_byref_object_copy__65;
  BOOL v34 = __Block_byref_object_dispose__65;
  id v35 = 0;
  char v6 = [NSNumber numberWithUnsignedLongLong:a1 | (unint64_t)(a2 << 16)];
  v27[0] = MEMORY[0x1E4F143A8];
  v27[1] = 3221225472;
  v27[2] = ___GEOConfigAddListenerForKey_block_invoke;
  v27[3] = &unk_1E53E8510;
  uint64_t v29 = &v30;
  id v7 = v6;
  id v28 = v7;
  id v8 = v27;
  if (qword_1EB29FF28 != -1) {
    dispatch_once(&qword_1EB29FF28, &__block_literal_global_128);
  }
  *(void *)buf = MEMORY[0x1E4F143A8];
  uint64_t v43 = 3221225472;
  id v44 = ___withKeyListeners_block_invoke;
  unsigned int v45 = &unk_1E53DA028;
  id v9 = v8;
  id v46 = v9;
  geo_isolate_sync();

  if (!v31[5])
  {
    id v10 = (objc_class *)self;
    if (a2 && a1)
    {
      std::string v11 = objc_alloc_init(v10);
      uint64_t v12 = v11;
      if (v11)
      {
        v11[5] = a1;
        v11[6] = a2;
        v11[2] = 0;
        uint64_t v13 = [(_GEOConfigKeyHelper *)a1 _currentValue];
        id v14 = (void *)v12[1];
        v12[1] = v13;
      }
    }
    else
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Assertion failed: _GEOConfigKeyIsValid(key)", buf, 2u);
      }
      uint64_t v12 = 0;
    }
    id v15 = (void *)v31[5];
    v31[5] = (uint64_t)v12;
  }
  v22[0] = MEMORY[0x1E4F143A8];
  v22[1] = 3221225472;
  v22[2] = ___GEOConfigAddListenerForKey_block_invoke_2;
  void v22[3] = &unk_1E53E8538;
  id v16 = v7;
  id v23 = v16;
  id v25 = &v30;
  uint64_t v26 = &v36;
  id v17 = v5;
  id v24 = v17;
  id v18 = v22;
  if (qword_1EB29FF28 != -1) {
    dispatch_once(&qword_1EB29FF28, &__block_literal_global_128);
  }
  *(void *)buf = MEMORY[0x1E4F143A8];
  uint64_t v43 = 3221225472;
  id v44 = ___withKeyListeners_block_invoke;
  unsigned int v45 = &unk_1E53DA028;
  uint64_t v19 = v18;
  id v46 = v19;
  geo_isolate_sync();

  id v20 = (id)v37[5];
  _Block_object_dispose(&v30, 8);

  _Block_object_dispose(&v36, 8);

  return v20;
}

void sub_188E784A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

uint64_t MapsFeature_IsEnabled(int a1, void *a2)
{
  switch(a1)
  {
    case 4:
      int v2 = MapsFeaturesConfig_IsMuninEnabled;
      int v3 = off_1E9111BE8;
      BOOL v4 = MapsFeaturesConfig_IsMuninEnabled == 4;
      goto LABEL_69;
    case 5:
      int v2 = MapsFeaturesConfig_EnableEVRouting;
      int v3 = off_1E9111BF8;
      BOOL v4 = MapsFeaturesConfig_EnableEVRouting == 5;
      goto LABEL_69;
    case 6:
      int v2 = MapsFeaturesConfig_ShouldEnableLagunaBeach;
      int v3 = off_1E9111C08;
      BOOL v4 = MapsFeaturesConfig_ShouldEnableLagunaBeach == 6;
      goto LABEL_69;
    case 7:
      int v2 = MapsFeaturesConfig_EnableAlberta;
      int v3 = off_1E9111C18;
      BOOL v4 = MapsFeaturesConfig_EnableAlberta == 7;
      goto LABEL_69;
    case 8:
      if (MapsFeaturesConfig_Watermarking != 8 || a2 != off_1E9111C28) {
        goto LABEL_73;
      }
      return MapsFeature_IsEnabled_Watermarking();
    case 9:
      int v2 = MapsFeaturesConfig_ShelbyvilleGlobe;
      int v3 = off_1E9111C38;
      BOOL v4 = MapsFeaturesConfig_ShelbyvilleGlobe == 9;
      goto LABEL_69;
    case 10:
      int v2 = MapsFeaturesConfig_ShelbyvilleAdvancedWater;
      int v3 = off_1E9111C48;
      BOOL v4 = MapsFeaturesConfig_ShelbyvilleAdvancedWater == 10;
      goto LABEL_69;
    case 11:
      int v2 = MapsFeaturesConfig_ShelbyvilleAdvancedLighting;
      int v3 = off_1E9111C58;
      BOOL v4 = MapsFeaturesConfig_ShelbyvilleAdvancedLighting == 11;
      goto LABEL_69;
    case 12:
      int v2 = MapsFeaturesConfig_ShelbyvilleRoundedBuildings;
      int v3 = off_1E9111C68;
      BOOL v4 = MapsFeaturesConfig_ShelbyvilleRoundedBuildings == 12;
      goto LABEL_69;
    case 13:
      int v2 = MapsFeaturesConfig_ShelbyvilleColorizedBuildings;
      int v3 = off_1E9111C78;
      BOOL v4 = MapsFeaturesConfig_ShelbyvilleColorizedBuildings == 13;
      goto LABEL_69;
    case 14:
      int v2 = MapsFeaturesConfig_ShelbyvilleBuildingHeights;
      int v3 = off_1E9111C88;
      BOOL v4 = MapsFeaturesConfig_ShelbyvilleBuildingHeights == 14;
      goto LABEL_69;
    case 15:
      int v2 = MapsFeaturesConfig_ShelbyvilleTerrain;
      int v3 = off_1E9111C98;
      BOOL v4 = MapsFeaturesConfig_ShelbyvilleTerrain == 15;
      goto LABEL_69;
    case 16:
      int v2 = MapsFeaturesConfig_ShelbyvilleStonehenge;
      int v3 = off_1E9111CA8;
      BOOL v4 = MapsFeaturesConfig_ShelbyvilleStonehenge == 16;
      goto LABEL_69;
    case 17:
      int v2 = MapsFeaturesConfig_ShelbyvilleSearch;
      int v3 = off_1E9111CB8;
      BOOL v4 = MapsFeaturesConfig_ShelbyvilleSearch == 17;
      goto LABEL_69;
    case 18:
      int v2 = MapsFeaturesConfig_ShelbyvillePuck;
      int v3 = off_1E9111CC8;
      BOOL v4 = MapsFeaturesConfig_ShelbyvillePuck == 18;
      goto LABEL_69;
    case 19:
      int v2 = MapsFeaturesConfig_EnableBakersfield;
      int v3 = off_1E9111CD8;
      BOOL v4 = MapsFeaturesConfig_EnableBakersfield == 19;
      goto LABEL_69;
    case 20:
      int v2 = MapsFeaturesConfig_Maps269Enabled;
      int v3 = off_1E9111CE8;
      BOOL v4 = MapsFeaturesConfig_Maps269Enabled == 20;
      goto LABEL_69;
    case 21:
      int v2 = MapsFeaturesConfig_PedestrianAREnabled;
      int v3 = off_1E9111CF8;
      BOOL v4 = MapsFeaturesConfig_PedestrianAREnabled == 21;
      goto LABEL_69;
    case 22:
      int v2 = MapsFeaturesConfig_Maps298Enabled;
      int v3 = off_1E9111D08;
      BOOL v4 = MapsFeaturesConfig_Maps298Enabled == 22;
      goto LABEL_69;
    case 23:
      int v2 = MapsFeaturesConfig_Maps357RoutePlanningEnabled;
      int v3 = off_1E9111D18;
      BOOL v4 = MapsFeaturesConfig_Maps357RoutePlanningEnabled == 23;
      goto LABEL_69;
    case 24:
      int v2 = MapsFeaturesConfig_PlaceCardShowcase;
      int v3 = off_1E9111D28;
      BOOL v4 = MapsFeaturesConfig_PlaceCardShowcase == 24;
      goto LABEL_69;
    case 25:
      int v2 = MapsFeaturesConfig_GuidesMediaIntegrationEnabled;
      int v3 = off_1E9111D38;
      BOOL v4 = MapsFeaturesConfig_GuidesMediaIntegrationEnabled == 25;
      goto LABEL_69;
    case 26:
      int v2 = MapsFeaturesConfig_GuidesMediaIntegrationThirdPartyLinksEnabled;
      int v3 = off_1E9111D48;
      BOOL v4 = MapsFeaturesConfig_GuidesMediaIntegrationThirdPartyLinksEnabled == 26;
      goto LABEL_69;
    case 27:
      int v2 = MapsFeaturesConfig_ShelbyvilleMapKitEnabled;
      int v3 = off_1E9111D58;
      BOOL v4 = MapsFeaturesConfig_ShelbyvilleMapKitEnabled == 27;
      goto LABEL_69;
    case 28:
      int v2 = MapsFeaturesConfig_DrivingMultiWaypointRoutesEnabled;
      int v3 = off_1E9111D68;
      BOOL v4 = MapsFeaturesConfig_DrivingMultiWaypointRoutesEnabled == 28;
      goto LABEL_69;
    case 29:
      int v2 = MapsFeaturesConfig_Maps420;
      int v3 = off_1E9111D78;
      BOOL v4 = MapsFeaturesConfig_Maps420 == 29;
      goto LABEL_69;
    case 30:
      int v2 = MapsFeaturesConfig_TransitPayEnabled;
      int v3 = off_1E9111D88;
      BOOL v4 = MapsFeaturesConfig_TransitPayEnabled == 30;
      goto LABEL_69;
    case 31:
      int v2 = MapsFeaturesConfig_RAPSydneyEnabled;
      int v3 = off_1E9111D98;
      BOOL v4 = MapsFeaturesConfig_RAPSydneyEnabled == 31;
      goto LABEL_69;
    case 32:
      int v2 = MapsFeaturesConfig_PlaceCardWebViewEnabled;
      int v3 = off_1E9111DA8;
      BOOL v4 = MapsFeaturesConfig_PlaceCardWebViewEnabled == 32;
      goto LABEL_69;
    case 33:
      int v2 = MapsFeaturesConfig_SydneyARPEnabled;
      int v3 = off_1E9111DB8;
      BOOL v4 = MapsFeaturesConfig_SydneyARPEnabled == 33;
      goto LABEL_69;
    case 34:
      int v2 = MapsFeaturesConfig_VisualLocalizationCrowdsourcingEnabled;
      int v3 = off_1E9111DC8;
      BOOL v4 = MapsFeaturesConfig_VisualLocalizationCrowdsourcingEnabled == 34;
      goto LABEL_69;
    case 35:
      int v2 = MapsFeaturesConfig_ElevatedPolygonsEnabled;
      int v3 = off_1E9111DD8;
      BOOL v4 = MapsFeaturesConfig_ElevatedPolygonsEnabled == 35;
      goto LABEL_69;
    case 36:
      int v2 = MapsFeaturesConfig_SearchResultsImpressions;
      int v3 = off_1E9111DE8;
      BOOL v4 = MapsFeaturesConfig_SearchResultsImpressions == 36;
      goto LABEL_69;
    case 37:
      int v2 = MapsFeaturesConfig_StandaloneWatchOffline;
      int v3 = off_1E9111DF8;
      BOOL v4 = MapsFeaturesConfig_StandaloneWatchOffline == 37;
      goto LABEL_69;
    case 38:
      int v2 = MapsFeaturesConfig_RAPCommunityIDEnabled;
      int v3 = off_1E9111E08;
      BOOL v4 = MapsFeaturesConfig_RAPCommunityIDEnabled == 38;
      goto LABEL_69;
    case 39:
      int v2 = MapsFeaturesConfig_RealTimeEVCharger;
      int v3 = off_1E9111E18;
      BOOL v4 = MapsFeaturesConfig_RealTimeEVCharger == 39;
      goto LABEL_69;
    case 40:
      int v2 = MapsFeaturesConfig_HikingWatchEnabled;
      int v3 = off_1E9111E28;
      BOOL v4 = MapsFeaturesConfig_HikingWatchEnabled == 40;
      goto LABEL_69;
    case 41:
      int v2 = MapsFeaturesConfig_HikingiOSEnabled;
      int v3 = off_1E9111E38;
      BOOL v4 = MapsFeaturesConfig_HikingiOSEnabled == 41;
      goto LABEL_69;
    case 42:
      int v2 = MapsFeaturesConfig_EVRoutingEnhancements;
      int v3 = off_1E9111E48;
      BOOL v4 = MapsFeaturesConfig_EVRoutingEnhancements == 42;
      goto LABEL_69;
    case 43:
      int v2 = MapsFeaturesConfig_MapsWally;
      int v3 = off_1E9111E58;
      BOOL v4 = MapsFeaturesConfig_MapsWally == 43;
      goto LABEL_69;
    case 44:
      int v2 = MapsFeaturesConfig_ARPCommunityIDEnabled;
      int v3 = off_1E9111E68;
      BOOL v4 = MapsFeaturesConfig_ARPCommunityIDEnabled == 44;
      goto LABEL_69;
    case 45:
      int v2 = MapsFeaturesConfig_SSAOEnabled;
      int v3 = off_1E9111E78;
      BOOL v4 = MapsFeaturesConfig_SSAOEnabled == 45;
      goto LABEL_69;
    case 46:
      int v2 = MapsFeaturesConfig_OrderPickupEnabled;
      int v3 = off_1E9111E88;
      BOOL v4 = MapsFeaturesConfig_OrderPickupEnabled == 46;
      goto LABEL_69;
    case 47:
      int v2 = MapsFeaturesConfig_SPRForMapSnapshots;
      int v3 = off_1E9111E98;
      BOOL v4 = MapsFeaturesConfig_SPRForMapSnapshots == 47;
      goto LABEL_69;
    case 48:
      int v2 = MapsFeaturesConfig_OptimizeSearchResultComponents;
      int v3 = off_1E9111EA8;
      BOOL v4 = MapsFeaturesConfig_OptimizeSearchResultComponents == 48;
      goto LABEL_69;
    case 49:
      int v2 = MapsFeaturesConfig_SearchAndDiscovery;
      int v3 = off_1E9111EB8;
      BOOL v4 = MapsFeaturesConfig_SearchAndDiscovery == 49;
      goto LABEL_69;
    case 50:
      int v2 = MapsFeaturesConfig_MyPlacesFeatures;
      int v3 = off_1E9111EC8;
      BOOL v4 = MapsFeaturesConfig_MyPlacesFeatures == 50;
      goto LABEL_69;
    case 51:
      if (MapsFeaturesConfig_Maps102 != 51 || a2 != off_1E9111ED8) {
        goto LABEL_73;
      }
      return MapsFeature_IsEnabled_Maps102();
    case 52:
      int v2 = MapsFeaturesConfig_FlexibleActionLinksEnabled;
      int v3 = off_1E9111EE8;
      BOOL v4 = MapsFeaturesConfig_FlexibleActionLinksEnabled == 52;
      goto LABEL_69;
    case 53:
      int v2 = MapsFeaturesConfig_FrenchClimateLaw;
      int v3 = off_1E9111EF8;
      BOOL v4 = MapsFeaturesConfig_FrenchClimateLaw == 53;
      goto LABEL_69;
    case 54:
      int v2 = MapsFeaturesConfig_VKMLayoutEnabled_SPR;
      int v3 = off_1E9111F08;
      BOOL v4 = MapsFeaturesConfig_VKMLayoutEnabled_SPR == 54;
      goto LABEL_69;
    case 55:
      int v2 = MapsFeaturesConfig_VKMLayoutEnabled_Navigation;
      int v3 = off_1E9111F18;
      BOOL v4 = MapsFeaturesConfig_VKMLayoutEnabled_Navigation == 55;
      goto LABEL_69;
    case 56:
      int v2 = MapsFeaturesConfig_VKMLayoutEnabled_Flyover;
      int v3 = off_1E9111F28;
      BOOL v4 = MapsFeaturesConfig_VKMLayoutEnabled_Flyover == 56;
      goto LABEL_69;
    case 58:
      int v2 = MapsFeaturesConfig_Maps182;
      int v3 = off_1E9111F48;
      BOOL v4 = MapsFeaturesConfig_Maps182 == 58;
      goto LABEL_69;
    case 59:
      int v2 = MapsFeaturesConfig_URLUnification;
      int v3 = off_1E9111F58;
      BOOL v4 = MapsFeaturesConfig_URLUnification == 59;
      goto LABEL_69;
    case 60:
      int v2 = MapsFeaturesConfig_FCLWithEmissionsAndETA;
      int v3 = off_1E9111F68;
      BOOL v4 = MapsFeaturesConfig_FCLWithEmissionsAndETA == 60;
      goto LABEL_69;
    case 61:
      int v2 = MapsFeaturesConfig_FCLShowETA;
      int v3 = off_1E9111F78;
      BOOL v4 = MapsFeaturesConfig_FCLShowETA == 61;
LABEL_69:
      if (!v4 || a2 != v3) {
        goto LABEL_73;
      }
      uint64_t result = GEOConfigGetBOOL(v2, (uint64_t)v3);
      break;
    default:
LABEL_73:
      uint64_t result = 0;
      break;
  }
  return result;
}

BOOL _quadKeySetsMatch(void *a1, void *a2)
{
  id v3 = a1;
  if ([v3 count] && objc_msgSend(v3, "count") == a2[2])
  {
    char v6 = (void *)*a2;
    BOOL v4 = a2 + 1;
    id v5 = v6;
    if (v6 == v4)
    {
      uint64_t v7 = 0;
    }
    else
    {
      uint64_t v7 = 0;
      do
      {
        id v8 = [NSNumber numberWithUnsignedLongLong:v5[4]];
        unsigned int v9 = [v3 containsObject:v8];

        if ((v9 & 1) == 0) {
          break;
        }
        id v10 = (void *)v5[1];
        if (v10)
        {
          do
          {
            std::string v11 = v10;
            id v10 = (void *)*v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            std::string v11 = (void *)v5[2];
            BOOL v12 = *v11 == (void)v5;
            id v5 = v11;
          }
          while (!v12);
        }
        v7 += v9;
        id v5 = v11;
      }
      while (v11 != v4);
    }
    BOOL v13 = v7 == [v3 count];
  }
  else
  {
    BOOL v13 = 0;
  }

  return v13;
}

void sub_188E78ACC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void GEOGloriaPopulateQuadKeysWithinRadiusFromCoordinate(int a1, uint64_t **a2, double a3, double a4, double a5, uint64_t a6, const unsigned __int8 *a7)
{
  *(double *)&v20[1] = a3;
  double v21 = a4;
  v20[0] = a1;
  BOOL v7 = a5 >= 0.0 && (a1 - 31) >= 0xFFFFFFE2;
  if (v7 && a4 >= -180.0 && a4 <= 180.0 && a3 >= -90.0 && a3 <= 90.0)
  {
    char v10 = a1;
    gloria::TileId::FromLatLng((gloria::TileId *)&v20[1], &v21, (const double *)v20, a7);
    v19[0] = v12;
    v19[1] = v13;
    long double v14 = cos(a3 * 0.0174532925);
    gloria::TileId::Neighbors((gloria::TileId *)v19, vcvtpd_u64_f64(a5 / (v14 * (40075016.7 / (double)(1 << v10)))), (uint64_t)&v23);
    id v15 = v23;
    if (v23 != v24)
    {
      do
      {
        unint64_t v22 = gloria::LEADING_BITS_VALUE_LUT[*((unsigned __int8 *)v15 + 40)] | (unint64_t)v15[4];
        std::__tree<AddrObjGoogle::protobuf::Descriptor const*>::__emplace_unique_key_args<AddrObjGoogle::protobuf::Descriptor const*,AddrObjGoogle::protobuf::Descriptor const*>(a2, &v22, (uint64_t *)&v22);
        id v16 = v15[1];
        if (v16)
        {
          do
          {
            id v17 = (void **)v16;
            id v16 = (void *)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            id v17 = (void **)v15[2];
            BOOL v18 = *v17 == v15;
            id v15 = v17;
          }
          while (!v18);
        }
        id v15 = v17;
      }
      while (v17 != v24);
    }
    std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::destroy((uint64_t)&v23, v24[0]);
  }
}

void sub_188E78C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, void *a17)
{
}

uint64_t *std::__tree<AddrObjGoogle::protobuf::Descriptor const*>::__emplace_unique_key_args<AddrObjGoogle::protobuf::Descriptor const*,AddrObjGoogle::protobuf::Descriptor const*>(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  char v6 = a1 + 1;
  id v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        id v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        id v5 = *v8;
        char v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      id v5 = v8[1];
      if (!v5)
      {
        char v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    id v8 = a1 + 1;
LABEL_10:
    char v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

void gloria::TileId::Neighbors(gloria::TileId *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  gloria::TileId::ToXYZ(this, &v20);
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)a3 = a3 + 8;
  double v6 = ldexp(1.0, *((unsigned __int8 *)this + 8));
  uint64_t v7 = v20.i64[0] - a2;
  uint64_t v8 = v20.i64[0] + a2;
  if (v7 <= v8)
  {
    uint64_t v9 = (uint64_t)v6;
    uint64_t v10 = a2;
    uint64_t v11 = (v20.i64[1] - a2) & ~((v20.i64[1] - a2) >> 63);
    uint64_t v12 = v20.i64[1] + v10;
    if ((uint64_t)v6 - 1 >= v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = (uint64_t)v6 - 1;
    }
    do
    {
      uint64_t v14 = v11;
      if (v11 <= v13)
      {
        do
        {
          id v15 = (gloria::MortonUtils *)v7;
          if (v7 < 0) {
            id v15 = (gloria::MortonUtils *)(v7 % v9 + v9);
          }
          uint64_t v16 = *((unsigned __int8 *)this + 8);
          gloria::MortonUtils::XYToQuadId(v15, v14 % v9);
          *(void *)&long long v19 = v17;
          *((void *)&v19 + 1) = v16;
          std::__tree<gloria::TileId>::__emplace_unique_key_args<gloria::TileId,gloria::TileId const&>((uint64_t **)a3, (unint64_t *)&v19, &v19);
          ++v14;
        }
        while (v13 + 1 != v14);
      }
    }
    while (v7++ != v8);
  }
}

void sub_188E78E54(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

double gloria::MortonUtils::XYToQuadId(gloria::MortonUtils *this, uint64_t a2)
{
  v2.i64[0] = a2;
  v2.i64[1] = (uint64_t)this;
  v3.i64[0] = 0xFFFFFFFFLL;
  v3.i64[1] = 0xFFFFFFFFLL;
  int8x16_t v4 = vorrq_s8((int8x16_t)vshlq_n_s64(v2, 0x10uLL), vandq_s8((int8x16_t)v2, v3));
  v3.i64[0] = 0xFFFF0000FFFFLL;
  v3.i64[1] = 0xFFFF0000FFFFLL;
  int64x2_t v5 = (int64x2_t)vandq_s8(v4, v3);
  unsigned long long v6 = *(_OWORD *)&vorrq_s8((int8x16_t)vshlq_n_s64(v5, 8uLL), (int8x16_t)v5) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL);
  unsigned long long v7 = *(_OWORD *)&vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v6, 4uLL), (int8x16_t)v6) & __PAIR128__(0xFF0FFF0FFF0FFF0FLL, 0xFF0FFF0FFF0FFF0FLL);
  v3.i64[0] = 0x3333333333333333;
  v3.i64[1] = 0x3333333333333333;
  int8x16_t v8 = vandq_s8(vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v7, 2uLL), (int8x16_t)v7), v3);
  int8x16_t v9 = (int8x16_t)vshlq_u64((uint64x2_t)v8, (uint64x2_t)xmmword_18A627540);
  v8.i64[0] *= 2;
  int64x2_t v10 = (int64x2_t)vandq_s8(vorrq_s8(v9, v8), (int8x16_t)xmmword_18A627550);
  *(void *)&double result = vorrq_s8((int8x16_t)v10, (int8x16_t)vdupq_laneq_s64(v10, 1)).u64[0];
  return result;
}

uint64_t **std::__tree<gloria::TileId>::__emplace_unique_key_args<gloria::TileId,gloria::TileId const&>(uint64_t **a1, unint64_t *a2, _OWORD *a3)
{
  unsigned long long v6 = a1 + 1;
  int64x2_t v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        int8x16_t v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        int64x2_t v5 = *v8;
        unsigned long long v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      int64x2_t v5 = v8[1];
      if (!v5)
      {
        unsigned long long v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    int8x16_t v8 = a1 + 1;
LABEL_10:
    int64x2_t v10 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v10 + 2) = *a3;
    std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

double gloria::TileId::FromLatLng(gloria::TileId *this, double *a2, const double *a3, const unsigned __int8 *a4)
{
  gloria::TileCoordinate::FromLatLng(this, a2, a3, &v5);
  return gloria::MortonUtils::XYToQuadId((gloria::MortonUtils *)v5.i64[0], v5.i64[1]);
}

int8x16_t gloria::TileCoordinate::FromLatLng@<Q0>(gloria::TileCoordinate *this@<X0>, double *a2@<X1>, const double *a3@<X2>, int8x16_t *a4@<X8>)
{
  double v7 = fmax(*a2, -180.0);
  double v8 = fmax(*(double *)this, -85.0511288);
  if (v7 >= 180.0) {
    double v9 = 1.0;
  }
  else {
    double v9 = (v7 + 180.0) / 360.0;
  }
  float64_t v19 = v9;
  double v10 = v8 * 3.14159265 / 180.0;
  if (v8 >= 85.0511288) {
    double v10 = 1.48442223;
  }
  long double v11 = sin(v10);
  long double v12 = log((v11 + 1.0) / (1.0 - v11));
  __int8 v13 = *(unsigned char *)a3;
  unint64_t v14 = 1 << *(unsigned char *)a3;
  v15.f64[0] = v19;
  v15.f64[1] = v12 / -12.5663706 + 0.5;
  int8x16_t v16 = (int8x16_t)vcvtq_u64_f64(vrndmq_f64(vmulq_n_f64(v15, (double)v14)));
  int8x16_t v17 = (int8x16_t)vdupq_n_s64(v14 - 1);
  int8x16_t result = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v16, (uint64x2_t)v17), v17, v16);
  *a4 = result;
  a4[1].i8[0] = v13;
  return result;
}

void sub_188E79564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188E79634(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E7997C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E79A70(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id GEOCSVStringForExternalRequestCounterInfoArray(void *a1)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = objc_alloc_init(MEMORY[0x1E4F28E78]);
  [v2 appendString:@"App ID, Start Time, End Time, Bytes Sent, Bytes Received, Type, Subtype, Source, "];
  int8x16_t v3 = GEORequestCounterInterfaceTypesToStrings(287);
  int8x16_t v4 = [v3 componentsJoinedByString:@", "];
  [v2 appendString:v4];

  [v2 appendString:@"\n"];
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  id obj = v1;
  uint64_t v28 = [obj countByEnumeratingWithState:&v36 objects:v41 count:16];
  if (v28)
  {
    uint64_t v27 = *(void *)v37;
    do
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v37 != v27) {
          objc_enumerationMutation(obj);
        }
        uint64_t v35 = v5;
        unsigned long long v6 = *(void **)(*((void *)&v36 + 1) + 8 * v5);
        BOOL v34 = [v6 appId];
        v40[0] = v34;
        double v7 = NSString;
        unint64_t v33 = [v6 startTime];
        [v33 timeIntervalSinceReferenceDate];
        uint64_t v32 = objc_msgSend(v7, "stringWithFormat:", @"%f", v8);
        v40[1] = v32;
        double v9 = NSString;
        id v31 = [v6 endTime];
        [v31 timeIntervalSinceReferenceDate];
        uint64_t v30 = objc_msgSend(v9, "stringWithFormat:", @"%f", v10);
        v40[2] = v30;
        uint64_t v29 = objc_msgSend(NSString, "stringWithFormat:", @"%lld", objc_msgSend(v6, "xmitBytes"));
        v40[3] = v29;
        long double v11 = objc_msgSend(NSString, "stringWithFormat:", @"%lld", objc_msgSend(v6, "recvBytes"));
        v40[4] = v11;
        long double v12 = [v6 requestType];
        v40[5] = v12;
        uint64_t v13 = [v6 requestSubtype];
        unint64_t v14 = (void *)v13;
        if (v13) {
          float64x2_t v15 = (__CFString *)v13;
        }
        else {
          float64x2_t v15 = @"N/A";
        }
        v40[6] = v15;
        uint64_t v16 = [v6 source];
        int8x16_t v17 = (void *)v16;
        if (v16) {
          BOOL v18 = (__CFString *)v16;
        }
        else {
          BOOL v18 = @"N/A";
        }
        v40[7] = v18;
        float64_t v19 = [MEMORY[0x1E4F1C978] arrayWithObjects:v40 count:8];

        int8x16_t v20 = [v19 componentsJoinedByString:@", "];
        [v2 appendString:v20];

        uint64_t v21 = [v6 usedInterface];
        for (uint64_t i = 0; i != 6; ++i)
        {
          if ((GEOAllRequestCounterInterfaceTypes[i] & v21) != 0) {
            id v23 = @", Y";
          }
          else {
            id v23 = @", N";
          }
          [v2 appendString:v23];
        }
        [v2 appendString:@"\n"];

        uint64_t v5 = v35 + 1;
      }
      while (v35 + 1 != v28);
      uint64_t v28 = [obj countByEnumeratingWithState:&v36 objects:v41 count:16];
    }
    while (v28);
  }

  id v24 = (void *)[v2 copy];

  return v24;
}

BOOL GEONetworkSessionTaskTransactionMetricsReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  BOOL AllFrom = GEONetworkSessionTaskTransactionMetricsReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_188E7A1F8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPTdmFraudRequestInfoIsDirty(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 80));
  BOOL v2 = *(unsigned __int8 *)(a1 + 84) > 1u;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 80));
  return v2;
}

unint64_t GEORPSearchFeedbackReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  unsigned long long v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 44);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 40)];
  char v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  int v12 = ((*(unsigned __int8 *)(a1 + 52) >> 2) & 1)
      + (*(unsigned char *)(a1 + 52) & 1)
      + ((*(unsigned __int8 *)(a1 + 52) >> 1) & 1);
  while (2)
  {
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    switch(a3[v8])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        char v7 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v16 = v12 != 0;
        char v17 = v16 & ~(_BYTE)v11 | v9;
        unsigned __int8 v18 = v16 | v11;
        char v54 = v17;
        char v55 = v18 | v17;
        if ((v18 | v7)) {
          float64_t v19 = 0;
        }
        else {
          float64_t v19 = a3;
        }
        char v56 = (v19 == 0) | v18;
        BOOL v57 = v18;
        int8x16_t v20 = (int *)MEMORY[0x1E4F940E8];
        uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
        unint64_t v22 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v12;
LABEL_7:
        uint64_t v13 = v9;
LABEL_8:
        uint64_t v14 = v10;
        uint64_t v15 = v11;
LABEL_10:
        ++v8;
        uint64_t v9 = v13;
        uint64_t v10 = v14;
        uint64_t v11 = v15;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(void *)(v3 + *v20) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v21)) {
      goto LABEL_66;
    }
    char v23 = 0;
    unsigned int v24 = 0;
    unint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = *v20;
      uint64_t v27 = *(void *)(v3 + v26);
      unint64_t v28 = v27 + 1;
      if (v27 == -1 || v28 > *(void *)(v3 + *v6)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(v3 + *v22) + v27);
      *(void *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0) {
        goto LABEL_25;
      }
      v23 += 7;
      if (v24++ >= 9)
      {
        unint64_t v25 = 0;
        int v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v21) = 1;
LABEL_25:
    int v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(unsigned char *)(v3 + *v21)) {
      unint64_t v25 = 0;
    }
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_66:
      int v52 = 1;
      goto LABEL_67;
    }
    unint64_t v33 = v25 >> 3;
    BOOL v34 = v57;
    if ((v56 & 1) == 0)
    {
      uint64_t v35 = v19;
      do
      {
        int v37 = *v35++;
        int v36 = v37;
        BOOL v34 = v37 != 0;
        if (v37) {
          BOOL v38 = v36 == v33;
        }
        else {
          BOOL v38 = 1;
        }
      }
      while (!v38);
    }
    if (v33 == 2) {
      break;
    }
    if (v33 == 1)
    {
      if (!v34) {
        goto LABEL_57;
      }
      if ((*(unsigned char *)(a1 + 52) & 2) == 0)
      {
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_86;
        }
        long long v39 = objc_alloc_init(GEORPSearchFeedbackContext);
        if (!GEORPSearchFeedbackContextReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1)) {
          goto LABEL_85;
        }
        PBReaderRecallMark();
        uint64_t v40 = 24;
LABEL_50:
        id v41 = *(void **)(a1 + v40);
        *(void *)(a1 + v40) = v39;

        --v8;
LABEL_64:
        uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
        goto LABEL_65;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        goto LABEL_86;
      }
      char v46 = *(unsigned char *)(a1 + 52) << 6;
LABEL_63:
      v8 += v46 >> 7;
      goto LABEL_64;
    }
    if (v54 & 1) == 0 || (*(unsigned char *)(a1 + 52))
    {
LABEL_57:
      char v45 = PBReaderSkipValueWithTag();
      uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
      if ((v45 & 1) == 0)
      {
        int v52 = 0;
        goto LABEL_67;
      }
      goto LABEL_65;
    }
    if (!*(void *)(a1 + 16))
    {
      id v42 = objc_alloc_init(MEMORY[0x1E4F940B0]);
      uint64_t v43 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v42;
    }
    int v44 = PBUnknownFieldAdd();
    uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
    if (!v44)
    {
      int v52 = 0;
      unint64_t v53 = &OBJC_IVAR___GEOTransitSectionOption__defaultSectionIndex;
      goto LABEL_68;
    }
LABEL_65:
    if (!(v55 & 1 | (v8 != 0))) {
      goto LABEL_66;
    }
  }
  if (!v34) {
    goto LABEL_57;
  }
  if ((*(unsigned char *)(a1 + 52) & 4) != 0)
  {
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      goto LABEL_86;
    }
    char v46 = 32 * *(unsigned char *)(a1 + 52);
    goto LABEL_63;
  }
  if ((PBReaderPlaceMark() & 1) == 0) {
    goto LABEL_86;
  }
  long long v39 = objc_alloc_init(GEORPSearchFeedbackCorrections);
  if (GEORPSearchFeedbackCorrectionsReadAllFrom((uint64_t)v39, (void *)v3))
  {
    PBReaderRecallMark();
    uint64_t v40 = 32;
    goto LABEL_50;
  }
LABEL_85:

LABEL_86:
  int v52 = 0;
  uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
LABEL_67:
  unint64_t v53 = &OBJC_IVAR___GEOTransitSectionOption__defaultSectionIndex;
  if ((v54 & 1) == 0) {
    goto LABEL_69;
  }
LABEL_68:
  *(unsigned char *)(a1 + v53[777]) |= 1u;
LABEL_69:
  if (v57 || (v52 & 1) == 0)
  {
    *(unsigned char *)(a1 + v53[777]) |= 2u;
    *(unsigned char *)(a1 + v53[777]) |= 4u;
    goto LABEL_79;
  }
  if (v19)
  {
    while (1)
    {
      int v49 = *v19++;
      int v48 = v49;
      if (v49 == 1) {
        break;
      }
      if (v48 == 2)
      {
        char v47 = 4;
LABEL_75:
        *(unsigned char *)(a1 + v53[777]) |= v47;
      }
      else if (!v48)
      {
        goto LABEL_79;
      }
    }
    char v47 = 2;
    goto LABEL_75;
  }
LABEL_79:
  if (v52) {
    unint64_t v3 = *(unsigned char *)(v3 + *v21) == 0;
  }
  else {
    unint64_t v3 = 0;
  }
  if (v57)
  {
    uint64_t v50 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  return v3;
}

unint64_t GEORPSearchCommonContextReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  unsigned long long v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 44);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 40)];
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  int v11 = ((*(unsigned __int8 *)(a1 + 52) >> 2) & 1)
      + (*(unsigned char *)(a1 + 52) & 1)
      + ((*(unsigned __int8 *)(a1 + 52) >> 1) & 1);
  while (2)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    switch(a3[v10])
    {
      case -4:
        ++v11;
        uint64_t v12 = v7;
        goto LABEL_8;
      case -3:
        char v9 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_8;
      case 0:
        BOOL v14 = v11 != 0;
        char v15 = v14 & ~(_BYTE)v7;
        unsigned __int8 v16 = v14 | v7;
        char v51 = v15 | v8;
        if ((v16 | v9)) {
          char v17 = 0;
        }
        else {
          char v17 = a3;
        }
        BOOL v54 = v16;
        char v52 = v16 | v15 | v8;
        char v53 = (v17 == 0) | v16;
        unsigned __int8 v18 = (int *)MEMORY[0x1E4F940E8];
        float64_t v19 = (int *)MEMORY[0x1E4F940C8];
        int8x16_t v20 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v11;
LABEL_7:
        uint64_t v12 = v7;
        uint64_t v13 = v8;
LABEL_8:
        ++v10;
        uint64_t v7 = v12;
        uint64_t v8 = v13;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(void *)(v3 + *v18) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v19)) {
      goto LABEL_59;
    }
    char v21 = 0;
    unsigned int v22 = 0;
    unint64_t v23 = 0;
    while (1)
    {
      uint64_t v24 = *v18;
      uint64_t v25 = *(void *)(v3 + v24);
      unint64_t v26 = v25 + 1;
      if (v25 == -1 || v26 > *(void *)(v3 + *v6)) {
        break;
      }
      char v27 = *(unsigned char *)(*(void *)(v3 + *v20) + v25);
      *(void *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0) {
        goto LABEL_23;
      }
      v21 += 7;
      if (v22++ >= 9)
      {
        unint64_t v23 = 0;
        int v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_25;
      }
    }
    *(unsigned char *)(v3 + *v19) = 1;
LABEL_23:
    int v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(unsigned char *)(v3 + *v19)) {
      unint64_t v23 = 0;
    }
LABEL_25:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_59:
      int v50 = 1;
      goto LABEL_60;
    }
    unint64_t v31 = v23 >> 3;
    BOOL v32 = v54;
    if ((v53 & 1) == 0)
    {
      unint64_t v33 = v17;
      do
      {
        int v35 = *v33++;
        int v34 = v35;
        BOOL v32 = v35 != 0;
        if (v35) {
          BOOL v36 = v34 == v31;
        }
        else {
          BOOL v36 = 1;
        }
      }
      while (!v36);
    }
    if (v31 == 2) {
      break;
    }
    if (v31 == 1)
    {
      if (!v32) {
        goto LABEL_51;
      }
      if ((*(unsigned char *)(a1 + 52) & 2) != 0)
      {
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_78;
        }
        char v44 = *(unsigned char *)(a1 + 52) << 6;
        goto LABEL_57;
      }
      uint64_t v37 = PBReaderReadString();
      uint64_t v38 = 24;
      goto LABEL_44;
    }
    if (v51 & 1) == 0 || (*(unsigned char *)(a1 + 52))
    {
LABEL_51:
      char v43 = PBReaderSkipValueWithTag();
      float64_t v19 = (int *)MEMORY[0x1E4F940C8];
      if ((v43 & 1) == 0)
      {
        int v50 = 0;
        goto LABEL_60;
      }
      goto LABEL_58;
    }
    if (!*(void *)(a1 + 16))
    {
      id v40 = objc_alloc_init(MEMORY[0x1E4F940B0]);
      id v41 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v40;
    }
    int v42 = PBUnknownFieldAdd();
    float64_t v19 = (int *)MEMORY[0x1E4F940C8];
    if (!v42)
    {
      int v50 = 0;
      goto LABEL_61;
    }
LABEL_58:
    if (!(v52 & 1 | (v10 != 0))) {
      goto LABEL_59;
    }
  }
  if (!v32) {
    goto LABEL_51;
  }
  if ((*(unsigned char *)(a1 + 52) & 4) == 0)
  {
    uint64_t v37 = PBReaderReadString();
    uint64_t v38 = 32;
LABEL_44:
    long long v39 = *(void **)(a1 + v38);
    *(void *)(a1 + v38) = v37;

    float64_t v19 = (int *)MEMORY[0x1E4F940C8];
    --v10;
    goto LABEL_58;
  }
  if (PBReaderSkipValueWithTag())
  {
    char v44 = 32 * *(unsigned char *)(a1 + 52);
LABEL_57:
    v10 += v44 >> 7;
    float64_t v19 = (int *)MEMORY[0x1E4F940C8];
    goto LABEL_58;
  }
LABEL_78:
  int v50 = 0;
  float64_t v19 = (int *)MEMORY[0x1E4F940C8];
LABEL_60:
  if ((v51 & 1) == 0) {
    goto LABEL_62;
  }
LABEL_61:
  *(unsigned char *)(a1 + 52) |= 1u;
LABEL_62:
  if (v54 || (v50 & 1) == 0)
  {
    *(unsigned char *)(a1 + 52) |= 2u;
    *(unsigned char *)(a1 + 52) |= 4u;
    goto LABEL_72;
  }
  if (v17)
  {
    while (1)
    {
      int v47 = *v17++;
      int v46 = v47;
      if (v47 == 1) {
        break;
      }
      if (v46 == 2)
      {
        char v45 = 4;
LABEL_68:
        *(unsigned char *)(a1 + 52) |= v45;
      }
      else if (!v46)
      {
        goto LABEL_72;
      }
    }
    char v45 = 2;
    goto LABEL_68;
  }
LABEL_72:
  if (v50) {
    unint64_t v3 = *(unsigned char *)(v3 + *v19) == 0;
  }
  else {
    unint64_t v3 = 0;
  }
  if (v54)
  {
    int v48 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  return v3;
}

unint64_t GEORPSearchFeedbackContextReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 44))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEORPSearchFeedbackContextReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = [v8 position];
  *(_DWORD *)(a1 + 44) = [v8 length];
  if (a3) {
    char v9 = (int *)&GEORPSearchFeedbackContextReadAllFrom_recursiveTag;
  }
  else {
    char v9 = (int *)&GEORPSearchFeedbackContextReadAllFrom_initialTag;
  }
  unint64_t Specified = GEORPSearchFeedbackContextReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEORPSearchFeedbackContextCallReadAllRecursiveWithoutSynchronized(a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_188E7AE24(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

atomic_ullong *AddrObjGoogle::protobuf::GoogleOnceInitImpl(atomic_ullong *result, uint64_t a2)
{
  atomic_ullong v2 = *result;
  __dmb(0xBu);
  if (v2 != 2)
  {
    unint64_t v3 = result;
    do
    {
      uint64_t v4 = 0;
      atomic_compare_exchange_strong(result, (unint64_t *)&v4, 1uLL);
      if (!v4)
      {
        int8x16_t result = (atomic_ullong *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
        __dmb(0xBu);
        *unint64_t v3 = 2;
        return result;
      }
    }
    while (!*result);
    if (*result == 1)
    {
      do
      {
        int8x16_t result = (atomic_ullong *)sched_yield();
        uint64_t v5 = *v3;
        __dmb(0xBu);
      }
      while (v5 == 1);
    }
  }
  return result;
}

uint64_t AddrObjGoogle::protobuf::internal::FunctionClosure0::Run(uint64_t (**this)(void))
{
  int v2 = *((unsigned __int8 *)this + 16);
  uint64_t result = this[1]();
  if (this && v2)
  {
    uint64_t v4 = (uint64_t (*)(uint64_t (**)(void)))*((void *)*this + 1);
    return v4(this);
  }
  return result;
}

void AddrObjGoogle::protobuf::internal::OnShutdown(AddrObjGoogle::protobuf::internal *this, void (*a2)(void))
{
  uint64_t v3 = AddrObjGoogle::protobuf::internal::shutdown_functions_init;
  __dmb(0xBu);
  if (v3 != 2)
  {
    v19[0] = &unk_1ED513270;
    v19[1] = AddrObjGoogle::protobuf::internal::InitShutdownFunctions;
    char v20 = 0;
    AddrObjGoogle::protobuf::GoogleOnceInitImpl(&AddrObjGoogle::protobuf::internal::shutdown_functions_init, (uint64_t)v19);
  }
  uint64_t v4 = (pthread_mutex_t **)AddrObjGoogle::protobuf::internal::shutdown_functions_mutex;
  AddrObjGoogle::protobuf::internal::Mutex::Lock((pthread_mutex_t **)AddrObjGoogle::protobuf::internal::shutdown_functions_mutex);
  uint64_t v5 = (void **)AddrObjGoogle::protobuf::internal::shutdown_functions;
  unsigned long long v6 = *(void **)(AddrObjGoogle::protobuf::internal::shutdown_functions + 8);
  unint64_t v7 = *(void *)(AddrObjGoogle::protobuf::internal::shutdown_functions + 16);
  if ((unint64_t)v6 >= v7)
  {
    uint64_t v9 = ((uint64_t)v6 - *(void *)AddrObjGoogle::protobuf::internal::shutdown_functions) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v7 - *(void *)AddrObjGoogle::protobuf::internal::shutdown_functions;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::StringList::Entry>>(AddrObjGoogle::protobuf::internal::shutdown_functions + 16, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    BOOL v14 = &v13[8 * v9];
    char v15 = &v13[8 * v12];
    *(void *)BOOL v14 = this;
    id v8 = v14 + 8;
    char v17 = (char *)*v5;
    unsigned __int8 v16 = (char *)v5[1];
    if (v16 != *v5)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      unsigned __int8 v16 = (char *)*v5;
    }
    uint64_t *v5 = v14;
    v5[1] = v8;
    v5[2] = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    void *v6 = this;
    id v8 = v6 + 1;
  }
  v5[1] = v8;
  AddrObjGoogle::protobuf::internal::Mutex::Unlock(v4);
}

void sub_188E7B794(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::internal::Mutex::Unlock(v1);
  _Unwind_Resume(a1);
}

void AddrObjGoogle::protobuf::internal::Mutex::Unlock(pthread_mutex_t **this)
{
  int v1 = pthread_mutex_unlock(*this);
  if (v1)
  {
    int v2 = v1;
    int v4 = 3;
    uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/AddrObjGoogle/protobuf/stubs/common.cc";
    int v6 = 312;
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "pthread_mutex_unlock: ");
    uint64_t v3 = strerror(v2);
    std::string::append(&__p, v3);
    AddrObjGoogle::protobuf::internal::LogMessage::Finish((AddrObjGoogle::protobuf::internal::LogMessage *)&v4);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_188E7B84C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void AddrObjGoogle::protobuf::internal::Mutex::Lock(pthread_mutex_t **this)
{
  int v1 = pthread_mutex_lock(*this);
  if (v1)
  {
    int v2 = v1;
    int v4 = 3;
    uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/AddrObjGoogle/protobuf/stubs/common.cc";
    int v6 = 305;
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "pthread_mutex_lock: ");
    uint64_t v3 = strerror(v2);
    std::string::append(&__p, v3);
    AddrObjGoogle::protobuf::internal::LogMessage::Finish((AddrObjGoogle::protobuf::internal::LogMessage *)&v4);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_188E7B908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<std::__hash_value_type<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>,AddrObjGoogle::protobuf::internal::ExtensionInfo>,std::__unordered_map_hasher<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>,std::__hash_value_type<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>,AddrObjGoogle::protobuf::internal::ExtensionInfo>,AddrObjGoogle::protobuf::hash<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>>,std::equal_to<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>>,true>,std::__unordered_map_equal<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>,std::__hash_value_type<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>,AddrObjGoogle::protobuf::internal::ExtensionInfo>,std::equal_to<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>>,AddrObjGoogle::protobuf::hash<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>>,true>,std::allocator<std::__hash_value_type<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>,AddrObjGoogle::protobuf::internal::ExtensionInfo>>>::__emplace_unique_key_args<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>,std::pair<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int> const,AddrObjGoogle::protobuf::internal::ExtensionInfo>>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v6 = *(int *)(a2 + 8);
  unint64_t v7 = v6 - *(void *)a2 + (*(void *)a2 << 16);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = v6 - *(void *)a2 + (*(void *)a2 << 16);
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == *(void *)a2 && *((_DWORD *)v11 + 6) == v6) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v3) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v11 = operator new(0x40uLL);
  *uint64_t v11 = 0;
  v11[1] = v7;
  long long v14 = a3[1];
  *((_OWORD *)v11 + 1) = *a3;
  *((_OWORD *)v11 + 2) = v14;
  *((_OWORD *)v11 + 3) = a3[2];
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::__rehash<true>(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
      else {
        unint64_t v3 = v7;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
  }
  uint64_t v21 = *(void *)a1;
  unsigned int v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *uint64_t v11 = *v22;
LABEL_42:
    *unsigned int v22 = v11;
    goto LABEL_43;
  }
  *uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v21 + 8 * v3) = a1 + 16;
  if (*v11)
  {
    unint64_t v23 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8) {
        v23 %= v8;
      }
    }
    else
    {
      v23 &= v8 - 1;
    }
    unsigned int v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_188E7BB50(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void AddrObjGoogle::protobuf::internal::Mutex::Mutex(AddrObjGoogle::protobuf::internal::Mutex *this)
{
}

void addr_obj::Formatting::getLanguageCandidates(char *a1, uint64_t *a2)
{
  std::vector<std::string>::__clear[abi:ne180100](a2);
  memset(&v36, 0, sizeof(v36));
  int v4 = a1[23];
  if (v4 >= 0) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = *(char **)a1;
  }
  if (v4 >= 0) {
    uint64_t v6 = a1[23];
  }
  else {
    uint64_t v6 = *((void *)a1 + 1);
  }
  uint64_t v7 = MEMORY[0x1E4F14390];
  if (v6)
  {
    unint64_t v8 = &v5[v6];
    while (1)
    {
      unsigned int v9 = *v5;
      if ((v9 & 0x80000000) != 0 ? __maskrune(v9, 0x500uLL) : *(_DWORD *)(v7 + 4 * v9 + 60) & 0x500) {
        break;
      }
      ++v5;
      if (!--v6)
      {
        uint64_t v5 = v8;
        break;
      }
    }
  }
LABEL_15:
  while (1)
  {
    if (a1[23] < 0)
    {
      uint64_t v13 = *(char **)a1;
      uint64_t v11 = *((void *)a1 + 1);
      unint64_t v12 = (char *)(*(void *)a1 + v11);
    }
    else
    {
      uint64_t v11 = a1[23];
      unint64_t v12 = &a1[v11];
      uint64_t v13 = a1;
    }
    if (v5 == v12) {
      break;
    }
    long long v14 = &v13[v11];
    if (v5 != &v13[v11])
    {
      float v15 = v5;
      while (1)
      {
        unsigned int v16 = *v15;
        if (!((v16 & 0x80000000) != 0 ? __maskrune(v16, 0x500uLL) : *(_DWORD *)(v7 + 4 * v16 + 60) & 0x500)) {
          break;
        }
        if (++v15 == v14)
        {
          float v15 = v14;
          break;
        }
      }
      if (v5 != v15)
      {
        do
        {
          std::string::value_type v18 = __tolower(*v5);
          std::string::push_back(&v36, v18);
          ++v5;
        }
        while (v5 != v15);
        uint64_t v5 = v15;
      }
    }
    unint64_t v19 = a2[1];
    if (v19 >= a2[2])
    {
      uint64_t v21 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a2, (long long *)&v36);
    }
    else
    {
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)a2[1], v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v20 = *(_OWORD *)&v36.__r_.__value_.__l.__data_;
        *(void *)(v19 + 16) = *((void *)&v36.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v19 = v20;
      }
      uint64_t v21 = v19 + 24;
      a2[1] = v19 + 24;
    }
    a2[1] = v21;
    std::string::push_back(&v36, 95);
    uint64_t v22 = a1[23];
    if ((v22 & 0x80u) == 0) {
      unint64_t v23 = a1;
    }
    else {
      unint64_t v23 = *(char **)a1;
    }
    if ((v22 & 0x80u) != 0) {
      uint64_t v22 = *((void *)a1 + 1);
    }
    uint64_t v24 = &v23[v22];
    if (v5 != &v23[v22])
    {
      while (1)
      {
        unsigned int v25 = *v5;
        if ((v25 & 0x80000000) != 0 ? __maskrune(v25, 0x500uLL) : *(_DWORD *)(v7 + 4 * v25 + 60) & 0x500) {
          break;
        }
        if (++v5 == v24)
        {
          uint64_t v5 = v24;
          goto LABEL_15;
        }
      }
    }
  }
  unint64_t v27 = *a2;
  uint64_t v28 = a2[1];
  unint64_t v29 = v28 - 24;
  if (*a2 != v28 && v29 > v27)
  {
    unint64_t v31 = v27 + 24;
    do
    {
      uint64_t v32 = *(void *)(v31 - 8);
      long long v33 = *(_OWORD *)(v31 - 24);
      uint64_t v34 = *(void *)(v29 + 16);
      *(_OWORD *)(v31 - 24) = *(_OWORD *)v29;
      *(void *)(v31 - 8) = v34;
      *(_OWORD *)unint64_t v29 = v33;
      *(void *)(v29 + 16) = v32;
      v29 -= 24;
      BOOL v35 = v31 >= v29;
      v31 += 24;
    }
    while (!v35);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
}

void sub_188E7BE10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void AddrObjGoogle::protobuf::internal::InitShutdownFunctions(AddrObjGoogle::protobuf::internal *this)
{
}

void sub_188E7BED4(_Unwind_Exception *a1)
{
  MEMORY[0x18C11F580](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void *AddrObjGoogle::protobuf::EncodedDescriptorDatabase::EncodedDescriptorDatabase(void *this)
{
  this[2] = 0;
  *this = &unk_1ED513020;
  this[1] = this + 2;
  this[5] = 0;
  this[3] = 0;
  this[4] = this + 5;
  this[8] = 0;
  this[9] = 0;
  this[10] = 0;
  this[6] = 0;
  this[7] = this + 8;
  this[11] = 0;
  this[12] = 0;
  return this;
}

void AddrObjGoogle::protobuf::DescriptorPool::DescriptorPool()
{
}

void sub_188E7C024(_Unwind_Exception *a1)
{
  MEMORY[0x18C11F580](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<unsigned long long>::unordered_set(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(a1, i + 2, i + 2);
  return a1;
}

void sub_188E7C368(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    unsigned int v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x18uLL);
  *uint64_t i = 0;
  i[1] = v6;
  i[2] = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  unint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *uint64_t i = *v19;
LABEL_38:
    *unint64_t v19 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v20 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    unint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_188E7C588(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::__do_rehash<true>(a1, prime);
    }
  }
}

void std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      unint64_t v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            void *v7 = *v11;
            *unint64_t v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            unint64_t v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          unint64_t v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    uint64_t v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void sub_188E7CA20(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTerritoryDataTerritoryInfoReadAllFrom(uint64_t a1, void *a2)
{
  if (*(_DWORD *)(a1 + 100))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOTerritoryDataTerritoryInfoReadAllFrom can only be called once per object"];
  }
  else
  {
    if (!((unint64_t)[a2 position] >> 32)
      && !((unint64_t)[a2 length] >> 32))
    {
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 104));
      id v6 = a2;
      objc_sync_enter(v6);
      objc_storeStrong((id *)(a1 + 8), a2);
      *(_DWORD *)(a1 + 96) = [v6 position];
      *(_DWORD *)(a1 + 100) = [v6 length];
      unint64_t Specified = GEOTerritoryDataTerritoryInfoReadSpecified(a1, (unint64_t)v6, (int *)&GEOTerritoryDataTerritoryInfoReadAllFrom_initialTag);
      objc_sync_exit(v6);

      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 104));
      return Specified;
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v7 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v7, 2u);
    }
  }
  return 0;
}

void sub_188E7CB98(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _PlaceTypeForMapItemPlaceType(int a1)
{
  if ((a1 - 1) > 0x13) {
    return 0;
  }
  else {
    return dword_18A639B10[a1 - 1];
  }
}

void ___mapItemFromHandleContents_block_invoke(uint64_t a1, void *a2)
{
  id v13 = a2;
  unint64_t v3 = [*(id *)(a1 + 32) placeRefinementParameters];
  int8x8_t v4 = -[GEOPDPlaceRefinementParameters locationHint](v3);
  [v13 setLatlng:v4];

  unint64_t v5 = -[GEOPDPlaceRefinementParameters formattedAddressLineHints](v3);
  if (v5)
  {
  }
  else
  {
    id v6 = -[GEOPDPlaceRefinementParameters addressHint](v3);

    if (!v6) {
      goto LABEL_5;
    }
  }
  uint64_t v7 = objc_alloc_init(GEOAddress);
  [v13 setAddress:v7];

  unint64_t v8 = -[GEOPDPlaceRefinementParameters formattedAddressLineHints](v3);
  uint8x8_t v9 = [v13 address];
  [v9 setFormattedAddressLines:v8];

  uint64_t v10 = -[GEOPDPlaceRefinementParameters addressHint](v3);
  unint64_t v11 = [v13 address];
  [v11 setStructuredAddress:v10];

LABEL_5:
  unint64_t v12 = -[GEOPDPlaceRefinementParameters placeNameHint](v3);
  [v13 setName:v12];
}

void sub_188E7D678(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E7D924(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E7DABC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id _mapItemFromHandleContents(void *a1)
{
  id v1 = a1;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = ___mapItemFromHandleContents_block_invoke;
  v7[3] = &unk_1E53E2320;
  id v2 = v1;
  id v8 = v2;
  unint64_t v3 = +[GEOMapItemBuilder buildWithSetterBlock:v7];
  if (v3)
  {
    int8x8_t v4 = +[GEOMapItemStorage mapItemStorageForGEOMapItem:v3];
    unint64_t v5 = [v2 clientAttributes];
    [v4 setClientAttributes:v5];
  }
  else
  {
    int8x8_t v4 = 0;
  }

  return v4;
}

void sub_188E7E52C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E7E5F4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E7E6BC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E7EB54(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void ___attributedGeoMapItemsForPlaceDatas_block_invoke(uint64_t a1, void *a2, unint64_t a3)
{
  id v11 = a2;
  if ([v11 statusCodeIsValid])
  {
    if (*(void *)(a1 + 80) <= a3)
    {
      unint64_t v5 = 0;
    }
    else
    {
      unint64_t v5 = [*(id *)(a1 + 32) objectAtIndex:a3];
    }
    uint64_t v6 = [*(id *)(a1 + 40) count];
    if (v6 == [*(id *)(a1 + 48) count])
    {
      uint64_t v7 = [*(id *)(a1 + 40) objectAtIndexedSubscript:a3];
    }
    else
    {
      uint64_t v7 = 0;
    }
    uint64_t v8 = [*(id *)(a1 + 56) count];
    if (v8 == [*(id *)(a1 + 48) count])
    {
      uint8x8_t v9 = [*(id *)(a1 + 56) objectAtIndexedSubscript:a3];
    }
    else
    {
      uint8x8_t v9 = 0;
    }
    uint64_t v10 = [[_GEOPlaceDataItem alloc] initWithPlaceData:v11 attributionMap:*(void *)(a1 + 64) disambiguationLabel:v5 detourInfo:v7 externalTransitStationCode:v9 additionalPlaces:0];
    [*(id *)(a1 + 72) addObject:v10];
  }
}

void sub_188E8057C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

long double GEOCoordinate2DForMapPoint(double a1, double a2)
{
  long double v2 = exp((a2 * 0.0078125 + -1048576.0) / 333772.107);
  return (atan(v2) * -2.0 + 1.57079633) * 57.2957795;
}

void sub_188E80B90(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void AddrObjGoogle::protobuf::protobuf_AddDesc_google_2fprotobuf_2fdescriptor_2eproto(AddrObjGoogle::protobuf *this, uint64_t a2, uint64_t a3, const char *a4)
{
  if ((byte_1E9117570 & 1) == 0)
  {
    byte_1E9117570 = 1;
    AddrObjGoogle::protobuf::internal::VerifyVersion((AddrObjGoogle::protobuf::internal *)0x1E9808, (AddrObjGoogle::protobuf::internal *)0x1E9808, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/AddrObjGoogle/protobuf/descriptor.pb.cc", a4);
    AddrObjGoogle::protobuf::DescriptorPool::InternalAddGeneratedFile((AddrObjGoogle::protobuf::DescriptorPool *)&unk_18A5C8D34, (const void *)0x1027);
    AddrObjGoogle::protobuf::MessageFactory::InternalRegisterGeneratedFile("google/protobuf/descriptor.proto", (std::string::size_type)sub_189165EE4);
    unint64_t v5 = (AddrObjGoogle::protobuf::FileDescriptorProto *)AddrObjGoogle::protobuf::FileDescriptorSet::default_instance_(v4);
    uint64_t v6 = (AddrObjGoogle::protobuf::FileOptions *)AddrObjGoogle::protobuf::FileDescriptorProto::default_instance_(v5);
    uint64_t v7 = (AddrObjGoogle::protobuf::SourceCodeInfo *)AddrObjGoogle::protobuf::FileOptions::default_instance(v6);
    *((void *)v6 + 23) = v7;
    uint64_t v8 = (AddrObjGoogle::protobuf::DescriptorProto *)AddrObjGoogle::protobuf::SourceCodeInfo::default_instance(v7);
    *((void *)v6 + 24) = v8;
    uint8x8_t v9 = (AddrObjGoogle::protobuf::MessageOptions *)AddrObjGoogle::protobuf::DescriptorProto::default_instance_(v8);
    uint64_t v10 = (AddrObjGoogle::protobuf::DescriptorProto_ExtensionRange *)AddrObjGoogle::protobuf::MessageOptions::default_instance(v9);
    *((void *)v9 + 18) = v10;
    id v11 = (AddrObjGoogle::protobuf::FieldDescriptorProto *)AddrObjGoogle::protobuf::DescriptorProto_ExtensionRange::default_instance_(v10);
    unint64_t v12 = (AddrObjGoogle::protobuf::FieldOptions *)AddrObjGoogle::protobuf::FieldDescriptorProto::default_instance_(v11);
    id v13 = (AddrObjGoogle::protobuf::EnumDescriptorProto *)AddrObjGoogle::protobuf::FieldOptions::default_instance(v12);
    *((void *)v12 + 7) = v13;
    BOOL v14 = (AddrObjGoogle::protobuf::EnumOptions *)AddrObjGoogle::protobuf::EnumDescriptorProto::default_instance_(v13);
    unint64_t v15 = (AddrObjGoogle::protobuf::EnumValueDescriptorProto *)AddrObjGoogle::protobuf::EnumOptions::default_instance(v14);
    *((void *)v14 + 6) = v15;
    unint64_t v16 = (AddrObjGoogle::protobuf::EnumValueOptions *)AddrObjGoogle::protobuf::EnumValueDescriptorProto::default_instance_(v15);
    size_t v17 = (AddrObjGoogle::protobuf::ServiceDescriptorProto *)AddrObjGoogle::protobuf::EnumValueOptions::default_instance(v16);
    *((void *)v16 + 3) = v17;
    uint64_t v18 = (AddrObjGoogle::protobuf::ServiceOptions *)AddrObjGoogle::protobuf::ServiceDescriptorProto::default_instance_(v17);
    unint64_t v19 = (AddrObjGoogle::protobuf::MethodDescriptorProto *)AddrObjGoogle::protobuf::ServiceOptions::default_instance(v18);
    *((void *)v18 + 6) = v19;
    unint64_t v20 = (AddrObjGoogle::protobuf::MethodOptions *)AddrObjGoogle::protobuf::MethodDescriptorProto::default_instance_(v19);
    uint64_t v21 = (AddrObjGoogle::protobuf::FileOptions *)AddrObjGoogle::protobuf::MethodOptions::default_instance(v20);
    *((void *)v20 + 5) = v21;
    uint64_t v22 = (AddrObjGoogle::protobuf::MessageOptions *)AddrObjGoogle::protobuf::FileOptions::default_instance_(v21);
    unint64_t v23 = (AddrObjGoogle::protobuf::FieldOptions *)AddrObjGoogle::protobuf::MessageOptions::default_instance_(v22);
    uint64_t v24 = (AddrObjGoogle::protobuf::EnumOptions *)AddrObjGoogle::protobuf::FieldOptions::default_instance_(v23);
    unsigned int v25 = (AddrObjGoogle::protobuf::EnumValueOptions *)AddrObjGoogle::protobuf::EnumOptions::default_instance_(v24);
    unint64_t v26 = (AddrObjGoogle::protobuf::ServiceOptions *)AddrObjGoogle::protobuf::EnumValueOptions::default_instance_(v25);
    unint64_t v27 = (AddrObjGoogle::protobuf::MethodOptions *)AddrObjGoogle::protobuf::ServiceOptions::default_instance_(v26);
    uint64_t v28 = (AddrObjGoogle::protobuf::UninterpretedOption *)AddrObjGoogle::protobuf::MethodOptions::default_instance_(v27);
    unint64_t v29 = (AddrObjGoogle::protobuf::UninterpretedOption_NamePart *)AddrObjGoogle::protobuf::UninterpretedOption::default_instance_(v28);
    uint64_t v30 = (AddrObjGoogle::protobuf::SourceCodeInfo *)AddrObjGoogle::protobuf::UninterpretedOption_NamePart::default_instance_(v29);
    unint64_t v31 = (AddrObjGoogle::protobuf::SourceCodeInfo_Location *)AddrObjGoogle::protobuf::SourceCodeInfo::default_instance_(v30);
    AddrObjGoogle::protobuf::SourceCodeInfo_Location::default_instance_(v31);
    AddrObjGoogle::protobuf::internal::OnShutdown((AddrObjGoogle::protobuf::internal *)AddrObjGoogle::protobuf::protobuf_ShutdownFile_google_2fprotobuf_2fdescriptor_2eproto, v32);
  }
}

void AddrObjGoogle::protobuf::DescriptorProto_ExtensionRange::~DescriptorProto_ExtensionRange(AddrObjGoogle::protobuf::DescriptorProto_ExtensionRange *this)
{
  AddrObjGoogle::protobuf::DescriptorProto_ExtensionRange::~DescriptorProto_ExtensionRange(this);

  JUMPOUT(0x18C11F580);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1ED5131C0;
  AddrObjGoogle::protobuf::DescriptorProto_ExtensionRange::default_instance_(this);
  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet((AddrObjGoogle::protobuf::DescriptorProto_ExtensionRange *)((char *)this + 8));

  AddrObjGoogle::protobuf::Message::~Message(this);
}

uint64_t AddrObjGoogle::protobuf::DescriptorProto_ExtensionRange::default_instance_(AddrObjGoogle::protobuf::DescriptorProto_ExtensionRange *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E91172F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E91172F8))
  {
    operator new();
  }
  return qword_1E91172F0;
}

void sub_188E80E04(_Unwind_Exception *a1)
{
  MEMORY[0x18C11F580](v1, 0x10A1C40380937A6);
  __cxa_guard_abort(&qword_1E91172F8);
  _Unwind_Resume(a1);
}

uint64_t AddrObjGoogle::protobuf::EnumValueOptions::default_instance_(AddrObjGoogle::protobuf::EnumValueOptions *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E91173A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E91173A8))
  {
    operator new();
  }
  return qword_1E91173A0;
}

void sub_188E80EB4(_Unwind_Exception *a1)
{
  MEMORY[0x18C11F580](v1, 0x10A1C406A05FE54);
  __cxa_guard_abort(&qword_1E91173A8);
  _Unwind_Resume(a1);
}

uint64_t AddrObjGoogle::protobuf::SourceCodeInfo::default_instance_(AddrObjGoogle::protobuf::SourceCodeInfo *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9117408, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E9117408))
  {
    operator new();
  }
  return qword_1E9117400;
}

void sub_188E80F64(_Unwind_Exception *a1)
{
  MEMORY[0x18C11F580](v1, 0x10A1C40F1948F29);
  __cxa_guard_abort(&qword_1E9117408);
  _Unwind_Resume(a1);
}

uint64_t AddrObjGoogle::protobuf::ServiceOptions::default_instance_(AddrObjGoogle::protobuf::ServiceOptions *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E91173B8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E91173B8))
  {
    operator new();
  }
  return qword_1E91173B0;
}

void sub_188E81014(_Unwind_Exception *a1)
{
  MEMORY[0x18C11F580](v1, 0x10A1C406A05FE54);
  __cxa_guard_abort(&qword_1E91173B8);
  _Unwind_Resume(a1);
}

uint64_t AddrObjGoogle::protobuf::MessageOptions::default_instance_(AddrObjGoogle::protobuf::MessageOptions *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9117378, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E9117378))
  {
    operator new();
  }
  return qword_1E9117370;
}

void sub_188E810C4(_Unwind_Exception *a1)
{
  MEMORY[0x18C11F580](v1, 0x10A1C40ABAA5818);
  __cxa_guard_abort(&qword_1E9117378);
  _Unwind_Resume(a1);
}

uint64_t AddrObjGoogle::protobuf::MethodOptions::default_instance_(AddrObjGoogle::protobuf::MethodOptions *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E91173C8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E91173C8))
  {
    operator new();
  }
  return qword_1E91173C0;
}

void sub_188E81174(_Unwind_Exception *a1)
{
  MEMORY[0x18C11F580](v1, 0x10A1C406A05FE54);
  __cxa_guard_abort(&qword_1E91173C8);
  _Unwind_Resume(a1);
}

uint64_t AddrObjGoogle::protobuf::EnumOptions::default_instance_(AddrObjGoogle::protobuf::EnumOptions *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9117398, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E9117398))
  {
    operator new();
  }
  return qword_1E9117390;
}

void sub_188E81224(_Unwind_Exception *a1)
{
  MEMORY[0x18C11F580](v1, 0x10A1C40FFAE3E5BLL);
  __cxa_guard_abort(&qword_1E9117398);
  _Unwind_Resume(a1);
}

void AddrObjGoogle::protobuf::FieldOptions::~FieldOptions(AddrObjGoogle::protobuf::FieldOptions *this)
{
  AddrObjGoogle::protobuf::FieldOptions::~FieldOptions(this);

  JUMPOUT(0x18C11F580);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1ED5123F8;
  AddrObjGoogle::protobuf::FieldOptions::SharedDtor(this);
  AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Destroy<AddrObjGoogle::protobuf::RepeatedPtrField<addr_obj::FingerprintProto>::TypeHandler>((uint64_t *)this + 7);
  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet((AddrObjGoogle::protobuf::FieldOptions *)((char *)this + 32));
  AddrObjGoogle::protobuf::internal::ExtensionSet::~ExtensionSet((AddrObjGoogle::protobuf::FieldOptions *)((char *)this + 8));

  AddrObjGoogle::protobuf::Message::~Message(this);
}

uint64_t AddrObjGoogle::protobuf::FieldOptions::default_instance_(AddrObjGoogle::protobuf::FieldOptions *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9117388, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E9117388))
  {
    operator new();
  }
  return qword_1E9117380;
}

void sub_188E81380(_Unwind_Exception *a1)
{
  MEMORY[0x18C11F580](v1, 0x10A1C409A5D65B8);
  __cxa_guard_abort(&qword_1E9117388);
  _Unwind_Resume(a1);
}

AddrObjGoogle::protobuf::FieldOptions *AddrObjGoogle::protobuf::FieldOptions::FieldOptions(AddrObjGoogle::protobuf::FieldOptions *this)
{
  *(void *)this = &unk_1ED5123F8;
  AddrObjGoogle::protobuf::internal::ExtensionSet::ExtensionSet((void *)this + 1);
  long double v2 = (AddrObjGoogle::protobuf::internal *)AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((void *)this + 4);
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  *((_DWORD *)this + 20) = 0;
  *((_DWORD *)this + 10) = 0;
  *(_DWORD *)((char *)this + 43) = 0;
  *((void *)this + 6) = AddrObjGoogle::protobuf::internal::kEmptyString(v2);
  *((unsigned char *)this + 47) = 0;
  *((_DWORD *)this + 21) = 0;
  return this;
}

void sub_188E81440(_Unwind_Exception *a1)
{
  unint64_t v5 = v4;
  AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Destroy<AddrObjGoogle::protobuf::RepeatedPtrField<addr_obj::FingerprintProto>::TypeHandler>(v5);
  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet(v3);
  AddrObjGoogle::protobuf::internal::ExtensionSet::~ExtensionSet(v2);
  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t AddrObjGoogle::protobuf::FieldOptions::SharedDtor(AddrObjGoogle::protobuf::FieldOptions *this)
{
  long double v2 = (uint64_t *)*((void *)this + 6);
  unint64_t v3 = AddrObjGoogle::protobuf::internal::kEmptyString(this);
  if (v2 != v3)
  {
    uint64_t v4 = *((void *)this + 6);
    if (v4)
    {
      if (*(char *)(v4 + 23) < 0) {
        operator delete(*(void **)v4);
      }
      unint64_t v3 = (uint64_t *)MEMORY[0x18C11F580](v4, 0x1012C40EC159624);
    }
  }

  return AddrObjGoogle::protobuf::FieldOptions::default_instance_((AddrObjGoogle::protobuf::FieldOptions *)v3);
}

void AddrObjGoogle::protobuf::FileOptions::~FileOptions(AddrObjGoogle::protobuf::FileOptions *this)
{
  AddrObjGoogle::protobuf::FileOptions::~FileOptions(this);

  JUMPOUT(0x18C11F580);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1ED512348;
  AddrObjGoogle::protobuf::FileOptions::SharedDtor(this);
  AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Destroy<AddrObjGoogle::protobuf::RepeatedPtrField<addr_obj::FingerprintProto>::TypeHandler>((uint64_t *)this + 9);
  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet((AddrObjGoogle::protobuf::FileOptions *)((char *)this + 32));
  AddrObjGoogle::protobuf::internal::ExtensionSet::~ExtensionSet((AddrObjGoogle::protobuf::FileOptions *)((char *)this + 8));

  AddrObjGoogle::protobuf::Message::~Message(this);
}

uint64_t AddrObjGoogle::protobuf::FileOptions::default_instance_(AddrObjGoogle::protobuf::FileOptions *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9117368, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E9117368))
  {
    operator new();
  }
  return qword_1E9117360;
}

void sub_188E81618(_Unwind_Exception *a1)
{
  MEMORY[0x18C11F580](v1, 0x10A1C4072609925);
  __cxa_guard_abort(&qword_1E9117368);
  _Unwind_Resume(a1);
}

uint64_t AddrObjGoogle::protobuf::FileOptions::SharedDtor(AddrObjGoogle::protobuf::FileOptions *this)
{
  long double v2 = (uint64_t *)*((void *)this + 5);
  unint64_t v3 = AddrObjGoogle::protobuf::internal::kEmptyString(this);
  if (v2 != v3)
  {
    uint64_t v4 = *((void *)this + 5);
    if (v4)
    {
      if (*(char *)(v4 + 23) < 0) {
        operator delete(*(void **)v4);
      }
      unint64_t v3 = (uint64_t *)MEMORY[0x18C11F580](v4, 0x1012C40EC159624);
    }
  }
  unint64_t v5 = (uint64_t *)*((void *)this + 6);
  uint64_t v6 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v3);
  if (v5 != v6)
  {
    uint64_t v7 = *((void *)this + 6);
    if (v7)
    {
      if (*(char *)(v7 + 23) < 0) {
        operator delete(*(void **)v7);
      }
      uint64_t v6 = (uint64_t *)MEMORY[0x18C11F580](v7, 0x1012C40EC159624);
    }
  }
  uint64_t v8 = (uint64_t *)*((void *)this + 8);
  uint8x8_t v9 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v6);
  if (v8 != v9)
  {
    uint64_t v10 = *((void *)this + 8);
    if (v10)
    {
      if (*(char *)(v10 + 23) < 0) {
        operator delete(*(void **)v10);
      }
      uint8x8_t v9 = (uint64_t *)MEMORY[0x18C11F580](v10, 0x1012C40EC159624);
    }
  }

  return AddrObjGoogle::protobuf::FileOptions::default_instance_((AddrObjGoogle::protobuf::FileOptions *)v9);
}

void addr_obj::protobuf_AddDesc_AddressObject_2eproto(addr_obj *this, uint64_t a2, uint64_t a3, const char *a4)
{
  if ((byte_1E91170F8 & 1) == 0)
  {
    byte_1E91170F8 = 1;
    AddrObjGoogle::protobuf::internal::VerifyVersion((AddrObjGoogle::protobuf::internal *)0x1E9808, (AddrObjGoogle::protobuf::internal *)0x1E9808, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObject.pb.cc", a4);
    addr_obj::geo3::protobuf_AddDesc_geo3_2dslim_2eproto(v4, v5, v6, v7);
    AddrObjGoogle::protobuf::DescriptorPool::InternalAddGeneratedFile((AddrObjGoogle::protobuf::DescriptorPool *)&unk_18A5C795C, (const void *)0xA09);
    AddrObjGoogle::protobuf::MessageFactory::InternalRegisterGeneratedFile("AddressObject.proto", (std::string::size_type)sub_189151A70);
    uint8x8_t v9 = (addr_obj::FingerprintProto *)addr_obj::LocalizationProto::default_instance_(v8);
    uint64_t v10 = (addr_obj::AddressObjectProto *)addr_obj::FingerprintProto::default_instance_(v9);
    id v11 = (addr_obj::AddressObjectProto *)addr_obj::AddressObjectProto::default_instance_(v10);
    inited = (addr_obj::V0AddressObjectProto *)addr_obj::AddressObjectProto::InitAsDefaultInstance(v11);
    id v13 = (addr_obj::V1AddressObjectProto *)addr_obj::V0AddressObjectProto::default_instance_(inited);
    BOOL v14 = (addr_obj::geo3::Address *)addr_obj::V1AddressObjectProto::default_instance_(v13);
    unint64_t v15 = (addr_obj::geo3::StructuredAddress *)addr_obj::geo3::Address::default_instance(v14);
    *((void *)v14 + 6) = v15;
    unint64_t v16 = (addr_obj::geo3::Address *)addr_obj::geo3::StructuredAddress::default_instance(v15);
    *((void *)v14 + 9) = v16;
    size_t v17 = (addr_obj::V2AddressObjectProto *)addr_obj::geo3::Address::default_instance(v16);
    *((void *)v14 + 11) = v17;
    uint64_t v18 = (addr_obj::V1AddressObjectProto *)addr_obj::V2AddressObjectProto::default_instance_(v17);
    unint64_t v19 = (addr_obj::V2AddressObjectProto *)addr_obj::V1AddressObjectProto::default_instance(v18);
    uint64_t v20 = addr_obj::V2AddressObjectProto::default_instance(v19);
    AddrObjGoogle::protobuf::internal::ExtensionSet::RegisterMessageExtension(v19, (const AddrObjGoogle::protobuf::MessageLite *)0x64, 11, 0, 0, v20, v21);
    unint64_t v23 = (addr_obj::VenueFieldProto *)addr_obj::VenueDecoratorProto::default_instance_(v22);
    uint64_t v24 = (addr_obj::VenueTemplateProto *)addr_obj::VenueFieldProto::default_instance_(v23);
    unsigned int v25 = (addr_obj::VenueFormatterProto *)addr_obj::VenueTemplateProto::default_instance_(v24);
    unint64_t v26 = (addr_obj::VenueInfoProto *)addr_obj::VenueFormatterProto::default_instance_(v25);
    unint64_t v27 = (addr_obj::V3AddressObjectProto *)addr_obj::VenueInfoProto::default_instance_(v26);
    uint64_t v28 = (addr_obj::VenueInfoProto *)addr_obj::V3AddressObjectProto::default_instance_(v27);
    unint64_t v29 = (addr_obj::V1AddressObjectProto *)addr_obj::VenueInfoProto::default_instance(v28);
    *((void *)v28 + 2) = v29;
    uint64_t v30 = (addr_obj::V3AddressObjectProto *)addr_obj::V1AddressObjectProto::default_instance(v29);
    uint64_t v31 = addr_obj::V3AddressObjectProto::default_instance(v30);
    AddrObjGoogle::protobuf::internal::ExtensionSet::RegisterMessageExtension(v30, (const AddrObjGoogle::protobuf::MessageLite *)0x65, 11, 0, 0, v31, v32);
    uint64_t v34 = (addr_obj::VenueInfoProto *)addr_obj::V4AddressObjectProto::default_instance_(v33);
    BOOL v35 = (addr_obj::V2AddressObjectProto *)addr_obj::VenueInfoProto::default_instance(v34);
    *((void *)v34 + 2) = v35;
    std::string v36 = (addr_obj::V4AddressObjectProto *)addr_obj::V2AddressObjectProto::default_instance(v35);
    uint64_t v37 = addr_obj::V4AddressObjectProto::default_instance(v36);
    AddrObjGoogle::protobuf::internal::ExtensionSet::RegisterMessageExtension(v36, (const AddrObjGoogle::protobuf::MessageLite *)0x66, 11, 0, 0, v37, v38);
    AddrObjGoogle::protobuf::internal::OnShutdown((AddrObjGoogle::protobuf::internal *)addr_obj::protobuf_ShutdownFile_AddressObject_2eproto, v39);
  }
}

uint64_t addr_obj::VenueInfoProto::default_instance_(addr_obj::VenueInfoProto *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9117258, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E9117258))
  {
    operator new();
  }
  return qword_1E9117250;
}

void sub_188E81944(_Unwind_Exception *a1)
{
  MEMORY[0x18C11F580](v1, 0x10A1C40A7563026);
  __cxa_guard_abort(&qword_1E9117258);
  _Unwind_Resume(a1);
}

void addr_obj::V2AddressObjectProto::~V2AddressObjectProto(addr_obj::V2AddressObjectProto *this)
{
  addr_obj::V2AddressObjectProto::~V2AddressObjectProto(this);

  JUMPOUT(0x18C11F580);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1ED517088;
  addr_obj::V2AddressObjectProto::SharedDtor(this);
  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet((addr_obj::V2AddressObjectProto *)((char *)this + 32));
  AddrObjGoogle::protobuf::internal::ExtensionSet::~ExtensionSet((addr_obj::V2AddressObjectProto *)((char *)this + 8));

  AddrObjGoogle::protobuf::Message::~Message(this);
}

void addr_obj::V1AddressObjectProto::~V1AddressObjectProto(addr_obj::V1AddressObjectProto *this)
{
  addr_obj::V1AddressObjectProto::~V1AddressObjectProto(this);

  JUMPOUT(0x18C11F580);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1ED516FD8;
  addr_obj::V1AddressObjectProto::SharedDtor(this);
  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet((addr_obj::V1AddressObjectProto *)((char *)this + 32));
  AddrObjGoogle::protobuf::internal::ExtensionSet::~ExtensionSet((addr_obj::V1AddressObjectProto *)((char *)this + 8));

  AddrObjGoogle::protobuf::Message::~Message(this);
}

void AddrObjGoogle::protobuf::internal::ExtensionSet::~ExtensionSet(AddrObjGoogle::protobuf::internal::ExtensionSet **this)
{
  long double v2 = this + 1;
  unint64_t v3 = *this;
  if (*this != (AddrObjGoogle::protobuf::internal::ExtensionSet *)(this + 1))
  {
    do
    {
      AddrObjGoogle::protobuf::internal::ExtensionSet::Extension::Free((int *)v3 + 10);
      uint64_t v4 = (AddrObjGoogle::protobuf::internal::ExtensionSet *)*((void *)v3 + 1);
      if (v4)
      {
        do
        {
          uint64_t v5 = (AddrObjGoogle::protobuf::internal::ExtensionSet **)v4;
          uint64_t v4 = *(AddrObjGoogle::protobuf::internal::ExtensionSet **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          uint64_t v5 = (AddrObjGoogle::protobuf::internal::ExtensionSet **)*((void *)v3 + 2);
          BOOL v6 = *v5 == v3;
          unint64_t v3 = (AddrObjGoogle::protobuf::internal::ExtensionSet *)v5;
        }
        while (!v6);
      }
      unint64_t v3 = (AddrObjGoogle::protobuf::internal::ExtensionSet *)v5;
    }
    while (v5 != v2);
  }
  std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::destroy((uint64_t)this, this[1]);
}

void std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

addr_obj::V1AddressObjectProto *addr_obj::V1AddressObjectProto::SharedDtor(addr_obj::V1AddressObjectProto *this)
{
  long double v2 = (uint64_t *)*((void *)this + 5);
  unint64_t v3 = AddrObjGoogle::protobuf::internal::kEmptyString(this);
  if (v2 != v3)
  {
    uint64_t v4 = *((void *)this + 5);
    if (v4)
    {
      if (*(char *)(v4 + 23) < 0) {
        operator delete(*(void **)v4);
      }
      unint64_t v3 = (uint64_t *)MEMORY[0x18C11F580](v4, 0x1012C40EC159624);
    }
  }
  uint64_t v5 = (uint64_t *)*((void *)this + 7);
  BOOL v6 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v3);
  if (v5 != v6)
  {
    uint64_t v7 = *((void *)this + 7);
    if (v7)
    {
      if (*(char *)(v7 + 23) < 0) {
        operator delete(*(void **)v7);
      }
      BOOL v6 = (uint64_t *)MEMORY[0x18C11F580](v7, 0x1012C40EC159624);
    }
  }
  uint64_t v8 = (uint64_t *)*((void *)this + 8);
  uint8x8_t v9 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v6);
  if (v8 != v9)
  {
    uint64_t v10 = *((void *)this + 8);
    if (v10)
    {
      if (*(char *)(v10 + 23) < 0) {
        operator delete(*(void **)v10);
      }
      uint8x8_t v9 = (uint64_t *)MEMORY[0x18C11F580](v10, 0x1012C40EC159624);
    }
  }
  id v11 = (uint64_t *)*((void *)this + 10);
  unint64_t v12 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v9);
  if (v11 != v12)
  {
    uint64_t v13 = *((void *)this + 10);
    if (v13)
    {
      if (*(char *)(v13 + 23) < 0) {
        operator delete(*(void **)v13);
      }
      unint64_t v12 = (uint64_t *)MEMORY[0x18C11F580](v13, 0x1012C40EC159624);
    }
  }
  uint64_t result = (addr_obj::V1AddressObjectProto *)addr_obj::V1AddressObjectProto::default_instance_((addr_obj::V1AddressObjectProto *)v12);
  if (result != this)
  {
    uint64_t v15 = *((void *)this + 6);
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
    uint64_t v16 = *((void *)this + 9);
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
    uint64_t result = (addr_obj::V1AddressObjectProto *)*((void *)this + 11);
    if (result)
    {
      size_t v17 = *(uint64_t (**)(void))(*(void *)result + 8);
      return (addr_obj::V1AddressObjectProto *)v17();
    }
  }
  return result;
}

uint64_t addr_obj::V1AddressObjectProto::default_instance_(addr_obj::V1AddressObjectProto *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E91171F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E91171F8))
  {
    operator new();
  }
  return qword_1E91171F0;
}

void sub_188E81E18(_Unwind_Exception *a1)
{
  MEMORY[0x18C11F580](v1, 0x10A1C40D9981018);
  __cxa_guard_abort(&qword_1E91171F8);
  _Unwind_Resume(a1);
}

uint64_t addr_obj::V2AddressObjectProto::default_instance_(addr_obj::V2AddressObjectProto *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9117208, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E9117208))
  {
    operator new();
  }
  return qword_1E9117200;
}

void sub_188E81EC8(_Unwind_Exception *a1)
{
  MEMORY[0x18C11F580](v1, 0x10A1C40BACA7D59);
  __cxa_guard_abort(&qword_1E9117208);
  _Unwind_Resume(a1);
}

uint64_t addr_obj::V2AddressObjectProto::SharedDtor(addr_obj::V2AddressObjectProto *this)
{
  long double v2 = (uint64_t *)*((void *)this + 5);
  unint64_t v3 = AddrObjGoogle::protobuf::internal::kEmptyString(this);
  if (v2 != v3)
  {
    uint64_t v4 = *((void *)this + 5);
    if (v4)
    {
      if (*(char *)(v4 + 23) < 0) {
        operator delete(*(void **)v4);
      }
      unint64_t v3 = (uint64_t *)MEMORY[0x18C11F580](v4, 0x1012C40EC159624);
    }
  }
  uint64_t v5 = (uint64_t *)*((void *)this + 6);
  BOOL v6 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v3);
  if (v5 != v6)
  {
    uint64_t v7 = *((void *)this + 6);
    if (v7)
    {
      if (*(char *)(v7 + 23) < 0) {
        operator delete(*(void **)v7);
      }
      BOOL v6 = (uint64_t *)MEMORY[0x18C11F580](v7, 0x1012C40EC159624);
    }
  }
  uint64_t v8 = (uint64_t *)*((void *)this + 7);
  uint8x8_t v9 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v6);
  if (v8 != v9)
  {
    uint64_t v10 = *((void *)this + 7);
    if (v10)
    {
      if (*(char *)(v10 + 23) < 0) {
        operator delete(*(void **)v10);
      }
      uint8x8_t v9 = (uint64_t *)MEMORY[0x18C11F580](v10, 0x1012C40EC159624);
    }
  }
  id v11 = (uint64_t *)*((void *)this + 8);
  unint64_t v12 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v9);
  if (v11 != v12)
  {
    uint64_t v13 = *((void *)this + 8);
    if (v13)
    {
      if (*(char *)(v13 + 23) < 0) {
        operator delete(*(void **)v13);
      }
      unint64_t v12 = (uint64_t *)MEMORY[0x18C11F580](v13, 0x1012C40EC159624);
    }
  }
  BOOL v14 = (uint64_t *)*((void *)this + 9);
  uint64_t v15 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v12);
  if (v14 != v15)
  {
    uint64_t v16 = *((void *)this + 9);
    if (v16)
    {
      if (*(char *)(v16 + 23) < 0) {
        operator delete(*(void **)v16);
      }
      uint64_t v15 = (uint64_t *)MEMORY[0x18C11F580](v16, 0x1012C40EC159624);
    }
  }
  size_t v17 = (uint64_t *)*((void *)this + 10);
  uint64_t v18 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v15);
  if (v17 != v18)
  {
    uint64_t v19 = *((void *)this + 10);
    if (v19)
    {
      if (*(char *)(v19 + 23) < 0) {
        operator delete(*(void **)v19);
      }
      uint64_t v18 = (uint64_t *)MEMORY[0x18C11F580](v19, 0x1012C40EC159624);
    }
  }
  uint64_t v20 = (uint64_t *)*((void *)this + 11);
  uint64_t v21 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v18);
  if (v20 != v21)
  {
    uint64_t v22 = *((void *)this + 11);
    if (v22)
    {
      if (*(char *)(v22 + 23) < 0) {
        operator delete(*(void **)v22);
      }
      uint64_t v21 = (uint64_t *)MEMORY[0x18C11F580](v22, 0x1012C40EC159624);
    }
  }
  unint64_t v23 = (uint64_t *)*((void *)this + 12);
  uint64_t v24 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v21);
  if (v23 != v24)
  {
    uint64_t v25 = *((void *)this + 12);
    if (v25)
    {
      if (*(char *)(v25 + 23) < 0) {
        operator delete(*(void **)v25);
      }
      uint64_t v24 = (uint64_t *)MEMORY[0x18C11F580](v25, 0x1012C40EC159624);
    }
  }
  unint64_t v26 = (uint64_t *)*((void *)this + 13);
  unint64_t v27 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v24);
  if (v26 != v27)
  {
    uint64_t v28 = *((void *)this + 13);
    if (v28)
    {
      if (*(char *)(v28 + 23) < 0) {
        operator delete(*(void **)v28);
      }
      unint64_t v27 = (uint64_t *)MEMORY[0x18C11F580](v28, 0x1012C40EC159624);
    }
  }
  unint64_t v29 = (uint64_t *)*((void *)this + 14);
  uint64_t v30 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v27);
  if (v29 != v30)
  {
    uint64_t v31 = *((void *)this + 14);
    if (v31)
    {
      if (*(char *)(v31 + 23) < 0) {
        operator delete(*(void **)v31);
      }
      uint64_t v30 = (uint64_t *)MEMORY[0x18C11F580](v31, 0x1012C40EC159624);
    }
  }
  uint64_t v32 = (uint64_t *)*((void *)this + 15);
  long long v33 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v30);
  if (v32 != v33)
  {
    uint64_t v34 = *((void *)this + 15);
    if (v34)
    {
      if (*(char *)(v34 + 23) < 0) {
        operator delete(*(void **)v34);
      }
      long long v33 = (uint64_t *)MEMORY[0x18C11F580](v34, 0x1012C40EC159624);
    }
  }
  BOOL v35 = (uint64_t *)*((void *)this + 16);
  std::string v36 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v33);
  if (v35 != v36)
  {
    uint64_t v37 = *((void *)this + 16);
    if (v37)
    {
      if (*(char *)(v37 + 23) < 0) {
        operator delete(*(void **)v37);
      }
      std::string v36 = (uint64_t *)MEMORY[0x18C11F580](v37, 0x1012C40EC159624);
    }
  }

  return addr_obj::V2AddressObjectProto::default_instance_((addr_obj::V2AddressObjectProto *)v36);
}

int *AddrObjGoogle::protobuf::internal::ExtensionSet::Extension::Free(int *this)
{
  int v1 = AddrObjGoogle::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[*((unsigned __int8 *)this + 8)];
  if (*((unsigned char *)this + 9))
  {
    switch(*((unsigned char *)this + 8))
    {
      case 1:
        if (!*(void *)this) {
          return this;
        }
        if (**(void **)this) {
          goto LABEL_29;
        }
        goto LABEL_39;
      case 2:
        if (!*(void *)this) {
          return this;
        }
        if (**(void **)this) {
LABEL_29:
        }
          MEMORY[0x18C11F560]();
        goto LABEL_39;
      case 3:
      case 4:
      case 6:
      case 0x10:
      case 0x12:
        if (!*(void *)this) {
          return this;
        }
        if (**(void **)this) {
          goto LABEL_33;
        }
        goto LABEL_39;
      case 5:
      case 7:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x11:
        if (!*(void *)this) {
          return this;
        }
        if (**(void **)this) {
          goto LABEL_33;
        }
        goto LABEL_39;
      case 8:
        if (!*(void *)this) {
          return this;
        }
        if (**(void **)this) {
LABEL_33:
        }
          MEMORY[0x18C11F560]();
        break;
      case 9:
      case 0xC:
        if (!*(void *)this) {
          return this;
        }
        AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Destroy<AddrObjGoogle::protobuf::RepeatedPtrField<std::string>::TypeHandler>(*(int **)this);
        break;
      case 0xA:
      case 0xB:
        if (!*(void *)this) {
          return this;
        }
        AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Destroy<AddrObjGoogle::protobuf::RepeatedPtrField<addr_obj::FingerprintProto>::TypeHandler>(*(uint64_t **)this);
        break;
      default:
        return this;
    }
    goto LABEL_39;
  }
  if (v1 == 10)
  {
    char v3 = *((unsigned char *)this + 10);
    this = *(int **)this;
    if ((v3 & 0x10) != 0)
    {
      if (!this) {
        return this;
      }
      uint64_t v4 = *(uint64_t (**)(void))(*(void *)this + 8);
    }
    else
    {
      if (!this) {
        return this;
      }
      uint64_t v4 = *(uint64_t (**)(void))(*(void *)this + 8);
    }
    return (int *)v4();
  }
  if (v1 == 9)
  {
    long double v2 = *(int **)this;
    if (*(void *)this)
    {
      if (*((char *)v2 + 23) < 0) {
        operator delete(*(void **)v2);
      }
LABEL_39:
      JUMPOUT(0x18C11F580);
    }
  }
  return this;
}

uint64_t addr_obj::V2AddressObjectProto::default_instance(addr_obj::V2AddressObjectProto *this)
{
  int v1 = (addr_obj::V2AddressObjectProto *)addr_obj::V2AddressObjectProto::default_instance_(this);
  if (!v1) {
    addr_obj::protobuf_AddDesc_AddressObject_2eproto(0, v2, v3, v4);
  }

  return addr_obj::V2AddressObjectProto::default_instance_(v1);
}

uint64_t addr_obj::V4AddressObjectProto::default_instance_(addr_obj::V4AddressObjectProto *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9117228, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E9117228))
  {
    operator new();
  }
  return qword_1E9117220;
}

void sub_188E8251C(_Unwind_Exception *a1)
{
  MEMORY[0x18C11F580](v1, 0x10A1C40A4A8B666);
  __cxa_guard_abort(&qword_1E9117228);
  _Unwind_Resume(a1);
}

uint64_t addr_obj::V3AddressObjectProto::default_instance_(addr_obj::V3AddressObjectProto *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9117218, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E9117218))
  {
    operator new();
  }
  return qword_1E9117210;
}

void sub_188E825CC(_Unwind_Exception *a1)
{
  MEMORY[0x18C11F580](v1, 0x10A1C40A4A8B666);
  __cxa_guard_abort(&qword_1E9117218);
  _Unwind_Resume(a1);
}

uint64_t addr_obj::V1AddressObjectProto::default_instance(addr_obj::V1AddressObjectProto *this)
{
  uint64_t v1 = (addr_obj::V1AddressObjectProto *)addr_obj::V1AddressObjectProto::default_instance_(this);
  if (!v1) {
    uint64_t v1 = (addr_obj::V1AddressObjectProto *)addr_obj::protobuf_AddDesc_AddressObject_2eproto(0);
  }

  return addr_obj::V1AddressObjectProto::default_instance_(v1);
}

uint64_t addr_obj::VenueInfoProto::default_instance(addr_obj::VenueInfoProto *this)
{
  uint64_t v1 = (addr_obj::VenueInfoProto *)addr_obj::VenueInfoProto::default_instance_(this);
  if (!v1) {
    uint64_t v1 = (addr_obj::VenueInfoProto *)addr_obj::protobuf_AddDesc_AddressObject_2eproto(0);
  }

  return addr_obj::VenueInfoProto::default_instance_(v1);
}

void AddrObjGoogle::protobuf::internal::ExtensionSet::RegisterMessageExtension(AddrObjGoogle::protobuf::internal::ExtensionSet *this, const AddrObjGoogle::protobuf::MessageLite *a2, char a3, char a4, char a5, uint64_t a6, const AddrObjGoogle::protobuf::MessageLite *a7)
{
  unsigned int v11 = a2;
  if ((a3 & 0xFE) != 0xA)
  {
    AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)v17, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/AddrObjGoogle/protobuf/extension_set.cc", 153);
    uint64_t v13 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v17, "CHECK failed: type == WireFormatLite::TYPE_MESSAGE || type == WireFormatLite::TYPE_GROUP: ");
    AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v16, (AddrObjGoogle::protobuf::internal::LogMessage *)v13);
    AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&v17[0].__r_.__value_.__l.__data_);
  }
  LOBYTE(v14) = a3;
  BYTE1(v14) = a4;
  BYTE2(v14) = a5;
  *((void *)&v14 + 1) = a6;
  uint64_t v15 = 0;
  sub_18917A730((uint64_t)this, v11, &v14);
}

void sub_188E8271C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t addr_obj::geo3::Address::default_instance(addr_obj::geo3::Address *this)
{
  uint64_t v1 = (addr_obj::geo3::Address *)addr_obj::geo3::Address::default_instance_(this);
  if (!v1) {
    addr_obj::geo3::protobuf_AddDesc_geo3_2dslim_2eproto(0, v2, v3, v4);
  }

  return addr_obj::geo3::Address::default_instance_(v1);
}

uint64_t addr_obj::V0AddressObjectProto::default_instance_(addr_obj::V0AddressObjectProto *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E91171E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E91171E8))
  {
    operator new();
  }
  return qword_1E91171E0;
}

void sub_188E827DC(_Unwind_Exception *a1)
{
  MEMORY[0x18C11F580](v1, 0x10A1C40892FDF1FLL);
  __cxa_guard_abort(&qword_1E91171E8);
  _Unwind_Resume(a1);
}

void AddrObjGoogle::protobuf::internal::VerifyVersion(AddrObjGoogle::protobuf::internal *this, AddrObjGoogle::protobuf::internal *a2, const std::string::value_type *a3, const char *a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if ((int)a2 > 2005000)
  {
    int v21 = 3;
    uint64_t v22 = "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/AddrObjGoogle/protobuf/stubs/common.cc";
    int v23 = 62;
    memset(&v24, 0, sizeof(v24));
    std::string::append(&v24, "This program requires version ");
    AddrObjGoogle::protobuf::internal::VersionString(a2, &v18);
    if ((v20 & 0x80u) == 0) {
      uint64_t v7 = (const std::string::value_type *)&v18;
    }
    else {
      uint64_t v7 = (const std::string::value_type *)v18;
    }
    if ((v20 & 0x80u) == 0) {
      std::string::size_type v8 = v20;
    }
    else {
      std::string::size_type v8 = v19;
    }
    std::string::append(&v24, v7, v8);
    std::string::append(&v24, " of the Protocol Buffer runtime library, but the installed version is ");
    snprintf(__str, 0x80uLL, "%d.%d.%d", 2, 5, 0);
    char v26 = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, __str);
    if ((v17 & 0x80u) == 0) {
      p_p = (const std::string::value_type *)&__p;
    }
    else {
      p_p = (const std::string::value_type *)__p;
    }
    if ((v17 & 0x80u) == 0) {
      std::string::size_type v10 = v17;
    }
    else {
      std::string::size_type v10 = v16;
    }
    std::string::append(&v24, p_p, v10);
    std::string::append(&v24, ".  Please update your library.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in \"");
    std::string::append(&v24, a3);
    std::string::append(&v24, "\".)");
    AddrObjGoogle::protobuf::internal::LogMessage::Finish((AddrObjGoogle::protobuf::internal::LogMessage *)&v21);
    if ((char)v17 < 0) {
      operator delete(__p);
    }
    if ((char)v20 < 0) {
      operator delete(v18);
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
  }
  if ((int)this < 2005000)
  {
    int v21 = 3;
    uint64_t v22 = "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/AddrObjGoogle/protobuf/stubs/common.cc";
    int v23 = 73;
    memset(&v24, 0, sizeof(v24));
    std::string::append(&v24, "This program was compiled against version ");
    AddrObjGoogle::protobuf::internal::VersionString(this, &v18);
    if ((v20 & 0x80u) == 0) {
      unsigned int v11 = (const std::string::value_type *)&v18;
    }
    else {
      unsigned int v11 = (const std::string::value_type *)v18;
    }
    if ((v20 & 0x80u) == 0) {
      std::string::size_type v12 = v20;
    }
    else {
      std::string::size_type v12 = v19;
    }
    std::string::append(&v24, v11, v12);
    std::string::append(&v24, " of the Protocol Buffer runtime library, which is not compatible with the installed version (");
    snprintf(__str, 0x80uLL, "%d.%d.%d", 2, 5, 0);
    char v26 = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, __str);
    if ((v17 & 0x80u) == 0) {
      uint64_t v13 = (const std::string::value_type *)&__p;
    }
    else {
      uint64_t v13 = (const std::string::value_type *)__p;
    }
    if ((v17 & 0x80u) == 0) {
      std::string::size_type v14 = v17;
    }
    else {
      std::string::size_type v14 = v16;
    }
    std::string::append(&v24, v13, v14);
    std::string::append(&v24, ").  Contact the program author for an update.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in \"");
    std::string::append(&v24, a3);
    std::string::append(&v24, "\".)");
    AddrObjGoogle::protobuf::internal::LogMessage::Finish((AddrObjGoogle::protobuf::internal::LogMessage *)&v21);
    if ((char)v17 < 0) {
      operator delete(__p);
    }
    if ((char)v20 < 0) {
      operator delete(v18);
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
  }
}

void sub_188E82B10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

void AddrObjGoogle::protobuf::MessageFactory::InternalRegisterGeneratedFile(const std::string::value_type *a1, std::string::size_type a2)
{
  uint64_t v4 = sub_18915DE94();
  v9[0].__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
  v9[0].__r_.__value_.__l.__size_ = a2;
  std::__hash_table<std::__hash_value_type<char const*,void (*)(std::string const&)>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,void (*)(std::string const&)>,AddrObjGoogle::protobuf::hash<char const*>,AddrObjGoogle::protobuf::streq,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,void (*)(std::string const&)>,AddrObjGoogle::protobuf::streq,AddrObjGoogle::protobuf::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,void (*)(std::string const&)>>>::__emplace_unique_key_args<char const*,std::pair<char const* const,void (*)(std::string const&)>>(v4 + 8, (const char **)&v9[0].__r_.__value_.__l.__data_, v9);
  if ((v5 & 1) == 0)
  {
    AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/AddrObjGoogle/protobuf/message.cc", 281);
    BOOL v6 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v9, "File is already registered: ");
    uint64_t v7 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v6, a1);
    AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v8, (AddrObjGoogle::protobuf::internal::LogMessage *)v7);
    AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&v9[0].__r_.__value_.__l.__data_);
  }
}

void sub_188E82C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<char const*,void (*)(std::string const&)>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,void (*)(std::string const&)>,AddrObjGoogle::protobuf::hash<char const*>,AddrObjGoogle::protobuf::streq,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,void (*)(std::string const&)>,AddrObjGoogle::protobuf::streq,AddrObjGoogle::protobuf::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,void (*)(std::string const&)>>>::__emplace_unique_key_args<char const*,std::pair<char const* const,void (*)(std::string const&)>>(uint64_t a1, const char **a2, _OWORD *a3)
{
  BOOL v6 = *a2;
  char v7 = **a2;
  if (v7)
  {
    unint64_t v8 = 0;
    uint8x8_t v9 = (unsigned __int8 *)(v6 + 1);
    do
    {
      unint64_t v8 = 5 * v8 + v7;
      int v10 = *v9++;
      char v7 = v10;
    }
    while (v10);
  }
  else
  {
    unint64_t v8 = 0;
  }
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v11) {
        unint64_t v3 = v8 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v8;
    }
    std::string::size_type v14 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(void **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v8)
        {
          if (!strcmp(*((const char **)i + 2), v6)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v8;
  *((_OWORD *)i + 1) = *a3;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v8 >= v11) {
        unint64_t v3 = v8 % v11;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v8;
    }
  }
  uint64_t v23 = *(void *)a1;
  std::string v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    *(void *)uint64_t i = *v24;
LABEL_43:
    *std::string v24 = i;
    goto LABEL_44;
  }
  *(void *)uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v23 + 8 * v3) = a1 + 16;
  if (*(void *)i)
  {
    unint64_t v25 = *(void *)(*(void *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v25 >= v11) {
        v25 %= v11;
      }
    }
    else
    {
      v25 &= v11 - 1;
    }
    std::string v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_43;
  }
LABEL_44:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_188E82E68(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void addr_obj::geo3::protobuf_AddDesc_geo3_2dslim_2eproto(addr_obj::geo3 *this, uint64_t a2, uint64_t a3, const char *a4)
{
  if ((byte_1E9117148 & 1) == 0)
  {
    byte_1E9117148 = 1;
    AddrObjGoogle::protobuf::internal::VerifyVersion((AddrObjGoogle::protobuf::internal *)0x1E9808, (AddrObjGoogle::protobuf::internal *)0x1E9808, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/geo3-slim.pb.cc", a4);
    AddrObjGoogle::protobuf::DescriptorPool::InternalAddGeneratedFile((AddrObjGoogle::protobuf::DescriptorPool *)&unk_18A5C8574, (const void *)0x3CE);
    AddrObjGoogle::protobuf::MessageFactory::InternalRegisterGeneratedFile("geo3-slim.proto", (std::string::size_type)sub_18915B0DC);
    char v5 = (addr_obj::geo3::StructuredAddress_SubPremise *)addr_obj::geo3::StructuredAddress::default_instance_(v4);
    BOOL v6 = (addr_obj::geo3::Address *)addr_obj::geo3::StructuredAddress_SubPremise::default_instance_(v5);
    char v7 = (addr_obj::geo3::StructuredAddress *)addr_obj::geo3::Address::default_instance_(v6);
    *((void *)v7 + 5) = addr_obj::geo3::StructuredAddress::default_instance(v7);
    AddrObjGoogle::protobuf::internal::OnShutdown((AddrObjGoogle::protobuf::internal *)addr_obj::geo3::protobuf_ShutdownFile_geo3_2dslim_2eproto, v8);
  }
}

uint64_t addr_obj::geo3::StructuredAddress::default_instance(addr_obj::geo3::StructuredAddress *this)
{
  uint64_t v1 = (addr_obj::geo3::StructuredAddress *)addr_obj::geo3::StructuredAddress::default_instance_(this);
  if (!v1) {
    uint64_t v1 = (addr_obj::geo3::StructuredAddress *)addr_obj::geo3::protobuf_AddDesc_geo3_2dslim_2eproto(0);
  }

  return addr_obj::geo3::StructuredAddress::default_instance_(v1);
}

uint64_t addr_obj::geo3::StructuredAddress_SubPremise::default_instance_(addr_obj::geo3::StructuredAddress_SubPremise *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E91172C8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E91172C8))
  {
    operator new();
  }
  return qword_1E91172C0;
}

void sub_188E82FE0(_Unwind_Exception *a1)
{
  MEMORY[0x18C11F580](v1, 0x10A1C40BEA49330);
  __cxa_guard_abort(&qword_1E91172C8);
  _Unwind_Resume(a1);
}

addr_obj::geo3::StructuredAddress_SubPremise *addr_obj::geo3::StructuredAddress_SubPremise::StructuredAddress_SubPremise(addr_obj::geo3::StructuredAddress_SubPremise *this)
{
  *(void *)this = &unk_1ED517348;
  uint64_t v2 = (AddrObjGoogle::protobuf::internal *)AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((void *)this + 1);
  *((void *)this + 3) = 0;
  *((void *)this + 2) = AddrObjGoogle::protobuf::internal::kEmptyString(v2);
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_188E8307C(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

addr_obj::V4AddressObjectProto *addr_obj::V4AddressObjectProto::V4AddressObjectProto(addr_obj::V4AddressObjectProto *this)
{
  *(void *)this = &unk_1ED5171E8;
  AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((void *)this + 1);
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  return this;
}

void sub_188E830EC(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t addr_obj::V4AddressObjectProto::default_instance(addr_obj::V4AddressObjectProto *this)
{
  uint64_t v1 = (addr_obj::V4AddressObjectProto *)addr_obj::V4AddressObjectProto::default_instance_(this);
  if (!v1) {
    uint64_t v1 = (addr_obj::V4AddressObjectProto *)addr_obj::protobuf_AddDesc_AddressObject_2eproto(0);
  }

  return addr_obj::V4AddressObjectProto::default_instance_(v1);
}

addr_obj::V3AddressObjectProto *addr_obj::V3AddressObjectProto::V3AddressObjectProto(addr_obj::V3AddressObjectProto *this)
{
  *(void *)this = &unk_1ED517138;
  AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((void *)this + 1);
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  return this;
}

void sub_188E8317C(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t addr_obj::V3AddressObjectProto::default_instance(addr_obj::V3AddressObjectProto *this)
{
  uint64_t v1 = (addr_obj::V3AddressObjectProto *)addr_obj::V3AddressObjectProto::default_instance_(this);
  if (!v1) {
    uint64_t v1 = (addr_obj::V3AddressObjectProto *)addr_obj::protobuf_AddDesc_AddressObject_2eproto(0);
  }

  return addr_obj::V3AddressObjectProto::default_instance_(v1);
}

addr_obj::V0AddressObjectProto *addr_obj::V0AddressObjectProto::V0AddressObjectProto(addr_obj::V0AddressObjectProto *this)
{
  *(void *)this = &unk_1ED516F28;
  AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((void *)this + 1);
  addr_obj::V0AddressObjectProto::SharedCtor(this);
  return this;
}

void sub_188E83224(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t *addr_obj::V0AddressObjectProto::SharedCtor(addr_obj::V0AddressObjectProto *this)
{
  *((_DWORD *)this + 22) = 0;
  uint64_t v2 = AddrObjGoogle::protobuf::internal::kEmptyString(this);
  *((void *)this + 2) = v2;
  unint64_t v3 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v2);
  *((void *)this + 3) = v3;
  uint64_t v4 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v3);
  *((void *)this + 4) = v4;
  char v5 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v4);
  *((void *)this + 5) = v5;
  BOOL v6 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v5);
  *((void *)this + 6) = v6;
  char v7 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v6);
  *((void *)this + 7) = v7;
  unint64_t v8 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v7);
  *((void *)this + 8) = v8;
  uint8x8_t v9 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v8);
  *((void *)this + 9) = v9;
  uint64_t result = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v9);
  *((void *)this + 10) = result;
  *((_DWORD *)this + 23) = 0;
  return result;
}

uint64_t addr_obj::VenueFormatterProto::default_instance_(addr_obj::VenueFormatterProto *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9117288, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E9117288))
  {
    operator new();
  }
  return qword_1E9117280;
}

void sub_188E83334(_Unwind_Exception *a1)
{
  MEMORY[0x18C11F580](v1, 0x10A1C40F1948F29);
  __cxa_guard_abort(&qword_1E9117288);
  _Unwind_Resume(a1);
}

addr_obj::VenueFormatterProto *addr_obj::VenueFormatterProto::VenueFormatterProto(addr_obj::VenueFormatterProto *this)
{
  *(void *)this = &unk_1ED516E78;
  AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((void *)this + 1);
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  *((void *)this + 5) = 0;
  return this;
}

void sub_188E833BC(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t addr_obj::VenueDecoratorProto::default_instance_(addr_obj::VenueDecoratorProto *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9117278, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E9117278))
  {
    operator new();
  }
  return qword_1E9117270;
}

void sub_188E8344C(_Unwind_Exception *a1)
{
  MEMORY[0x18C11F580](v1, 0x10A1C4093195C21);
  __cxa_guard_abort(&qword_1E9117278);
  _Unwind_Resume(a1);
}

addr_obj::VenueDecoratorProto *addr_obj::VenueDecoratorProto::VenueDecoratorProto(addr_obj::VenueDecoratorProto *this)
{
  *(void *)this = &unk_1ED516DC8;
  AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((void *)this + 1);
  addr_obj::VenueDecoratorProto::SharedCtor(this);
  return this;
}

void sub_188E834E0(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t *addr_obj::VenueDecoratorProto::SharedCtor(addr_obj::VenueDecoratorProto *this)
{
  *((_DWORD *)this + 12) = 0;
  uint64_t v2 = AddrObjGoogle::protobuf::internal::kEmptyString(this);
  *((void *)this + 2) = v2;
  unint64_t v3 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v2);
  *((void *)this + 3) = v3;
  uint64_t v4 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v3);
  *((void *)this + 4) = v4;
  uint64_t result = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v4);
  *((void *)this + 5) = result;
  *((_DWORD *)this + 13) = 0;
  return result;
}

uint64_t addr_obj::VenueTemplateProto::default_instance_(addr_obj::VenueTemplateProto *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9117268, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E9117268))
  {
    operator new();
  }
  return qword_1E9117260;
}

void sub_188E835C8(_Unwind_Exception *a1)
{
  MEMORY[0x18C11F580](v1, 0x10B1C40B7099809);
  __cxa_guard_abort(&qword_1E9117268);
  _Unwind_Resume(a1);
}

addr_obj::VenueTemplateProto *addr_obj::VenueTemplateProto::VenueTemplateProto(addr_obj::VenueTemplateProto *this)
{
  *(void *)this = &unk_1ED516D18;
  AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((void *)this + 1);
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((_DWORD *)this + 22) = 0;
  *((void *)this + 12) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_DWORD *)this + 16) = 0;
  return this;
}

void sub_188E83660(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t addr_obj::AddressObjectProto::InitAsDefaultInstance(addr_obj::AddressObjectProto *this)
{
  uint64_t v2 = (addr_obj::V0AddressObjectProto *)addr_obj::LocalizationProto::default_instance(this);
  *((void *)this + 3) = v2;
  unint64_t v3 = (addr_obj::V1AddressObjectProto *)addr_obj::V0AddressObjectProto::default_instance(v2);
  *((void *)this + 7) = v3;
  uint64_t v4 = (addr_obj::VenueInfoProto *)addr_obj::V1AddressObjectProto::default_instance(v3);
  *((void *)this + 8) = v4;
  uint64_t result = addr_obj::VenueInfoProto::default_instance(v4);
  *((void *)this + 9) = result;
  return result;
}

uint64_t addr_obj::V0AddressObjectProto::default_instance(addr_obj::V0AddressObjectProto *this)
{
  uint64_t v1 = (addr_obj::V0AddressObjectProto *)addr_obj::V0AddressObjectProto::default_instance_(this);
  if (!v1) {
    uint64_t v1 = (addr_obj::V0AddressObjectProto *)addr_obj::protobuf_AddDesc_AddressObject_2eproto(0);
  }

  return addr_obj::V0AddressObjectProto::default_instance_(v1);
}

uint64_t addr_obj::LocalizationProto::default_instance(addr_obj::LocalizationProto *this)
{
  uint64_t v1 = (addr_obj::LocalizationProto *)addr_obj::LocalizationProto::default_instance_(this);
  if (!v1) {
    uint64_t v1 = (addr_obj::LocalizationProto *)addr_obj::protobuf_AddDesc_AddressObject_2eproto(0);
  }

  return addr_obj::LocalizationProto::default_instance_(v1);
}

uint64_t addr_obj::VenueFieldProto::default_instance_(addr_obj::VenueFieldProto *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9117298, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E9117298))
  {
    operator new();
  }
  return qword_1E9117290;
}

void sub_188E83790(_Unwind_Exception *a1)
{
  MEMORY[0x18C11F580](v1, 0x10A1C40380937A6);
  __cxa_guard_abort(&qword_1E9117298);
  _Unwind_Resume(a1);
}

addr_obj::VenueFieldProto *addr_obj::VenueFieldProto::VenueFieldProto(addr_obj::VenueFieldProto *this)
{
  *(void *)this = &unk_1ED516910;
  AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((void *)this + 1);
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  return this;
}

void sub_188E83810(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

addr_obj::VenueInfoProto *addr_obj::VenueInfoProto::VenueInfoProto(addr_obj::VenueInfoProto *this)
{
  *(void *)this = &unk_1ED516488;
  AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((void *)this + 1);
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = 0;
  return this;
}

void sub_188E83880(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t AddrObjGoogle::protobuf::UninterpretedOption_NamePart::default_instance_(AddrObjGoogle::protobuf::UninterpretedOption_NamePart *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E91173D8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E91173D8))
  {
    operator new();
  }
  return qword_1E91173D0;
}

void sub_188E83914(_Unwind_Exception *a1)
{
  MEMORY[0x18C11F580](v1, 0x10A1C40ED7A6C83);
  __cxa_guard_abort(&qword_1E91173D8);
  _Unwind_Resume(a1);
}

AddrObjGoogle::protobuf::UninterpretedOption_NamePart *AddrObjGoogle::protobuf::UninterpretedOption_NamePart::UninterpretedOption_NamePart(AddrObjGoogle::protobuf::UninterpretedOption_NamePart *this)
{
  *(void *)this = &unk_1ED513060;
  uint64_t v2 = (AddrObjGoogle::protobuf::internal *)AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((void *)this + 1);
  *((_DWORD *)this + 7) = 0;
  *((void *)this + 2) = AddrObjGoogle::protobuf::internal::kEmptyString(v2);
  *((unsigned char *)this + 24) = 0;
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_188E839B4(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t AddrObjGoogle::protobuf::SourceCodeInfo_Location::default_instance_(AddrObjGoogle::protobuf::SourceCodeInfo_Location *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E91173F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E91173F8))
  {
    operator new();
  }
  return qword_1E91173F0;
}

void sub_188E83A54(_Unwind_Exception *a1)
{
  MEMORY[0x18C11F580](v1, 0x10B1C40E36E17E1);
  __cxa_guard_abort(&qword_1E91173F8);
  _Unwind_Resume(a1);
}

AddrObjGoogle::protobuf::SourceCodeInfo_Location *AddrObjGoogle::protobuf::SourceCodeInfo_Location::SourceCodeInfo_Location(AddrObjGoogle::protobuf::SourceCodeInfo_Location *this)
{
  *(void *)this = &unk_1ED512EC0;
  uint64_t v2 = (AddrObjGoogle::protobuf::internal *)AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((void *)this + 1);
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((_DWORD *)this + 20) = 0;
  unint64_t v3 = AddrObjGoogle::protobuf::internal::kEmptyString(v2);
  *((void *)this + 8) = v3;
  *((void *)this + 9) = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v3);
  *((_DWORD *)this + 21) = 0;
  return this;
}

void sub_188E83B0C(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t AddrObjGoogle::protobuf::ServiceDescriptorProto::default_instance_(AddrObjGoogle::protobuf::ServiceDescriptorProto *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9117348, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E9117348))
  {
    operator new();
  }
  return qword_1E9117340;
}

void sub_188E83BD0(_Unwind_Exception *a1)
{
  MEMORY[0x18C11F580](v1, 0x10A1C407FD52222);
  __cxa_guard_abort(&qword_1E9117348);
  _Unwind_Resume(a1);
}

AddrObjGoogle::protobuf::ServiceDescriptorProto *AddrObjGoogle::protobuf::ServiceDescriptorProto::ServiceDescriptorProto(AddrObjGoogle::protobuf::ServiceDescriptorProto *this)
{
  *(void *)this = &unk_1ED512E10;
  uint64_t v2 = (AddrObjGoogle::protobuf::internal *)AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((void *)this + 1);
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 2) = AddrObjGoogle::protobuf::internal::kEmptyString(v2);
  *((void *)this + 6) = 0;
  *((_DWORD *)this + 15) = 0;
  return this;
}

void sub_188E83C7C(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Destroy<AddrObjGoogle::protobuf::RepeatedPtrField<addr_obj::FingerprintProto>::TypeHandler>(v4);
  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t AddrObjGoogle::protobuf::MethodDescriptorProto::default_instance_(AddrObjGoogle::protobuf::MethodDescriptorProto *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9117358, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E9117358))
  {
    operator new();
  }
  return qword_1E9117350;
}

void sub_188E83D2C(_Unwind_Exception *a1)
{
  MEMORY[0x18C11F580](v1, 0x10A1C4093195C21);
  __cxa_guard_abort(&qword_1E9117358);
  _Unwind_Resume(a1);
}

AddrObjGoogle::protobuf::MethodDescriptorProto *AddrObjGoogle::protobuf::MethodDescriptorProto::MethodDescriptorProto(AddrObjGoogle::protobuf::MethodDescriptorProto *this)
{
  *(void *)this = &unk_1ED512D60;
  AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((void *)this + 1);
  AddrObjGoogle::protobuf::MethodDescriptorProto::SharedCtor(this);
  return this;
}

void sub_188E83DC0(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t *AddrObjGoogle::protobuf::MethodDescriptorProto::SharedCtor(AddrObjGoogle::protobuf::MethodDescriptorProto *this)
{
  *((_DWORD *)this + 12) = 0;
  uint64_t v2 = AddrObjGoogle::protobuf::internal::kEmptyString(this);
  *((void *)this + 2) = v2;
  unint64_t v3 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v2);
  *((void *)this + 3) = v3;
  uint64_t result = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v3);
  *((void *)this + 4) = result;
  *((void *)this + 5) = 0;
  *((_DWORD *)this + 13) = 0;
  return result;
}

uint64_t AddrObjGoogle::protobuf::UninterpretedOption::default_instance_(AddrObjGoogle::protobuf::UninterpretedOption *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E91173E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E91173E8))
  {
    operator new();
  }
  return qword_1E91173E0;
}

void sub_188E83EA0(_Unwind_Exception *a1)
{
  MEMORY[0x18C11F580](v1, 0x10A1C40AD0F7D02);
  __cxa_guard_abort(&qword_1E91173E8);
  _Unwind_Resume(a1);
}

AddrObjGoogle::protobuf::UninterpretedOption *AddrObjGoogle::protobuf::UninterpretedOption::UninterpretedOption(AddrObjGoogle::protobuf::UninterpretedOption *this)
{
  *(void *)this = &unk_1ED512BD8;
  AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((void *)this + 1);
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  AddrObjGoogle::protobuf::UninterpretedOption::SharedCtor(this);
  return this;
}

void sub_188E83F44(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Destroy<AddrObjGoogle::protobuf::RepeatedPtrField<addr_obj::FingerprintProto>::TypeHandler>(v4);
  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t *AddrObjGoogle::protobuf::UninterpretedOption::SharedCtor(AddrObjGoogle::protobuf::UninterpretedOption *this)
{
  *((_DWORD *)this + 22) = 0;
  uint64_t v2 = AddrObjGoogle::protobuf::internal::kEmptyString(this);
  *((void *)this + 5) = v2;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  unint64_t v3 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v2);
  *((void *)this + 9) = v3;
  uint64_t result = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v3);
  *((void *)this + 10) = result;
  *((_DWORD *)this + 23) = 0;
  return result;
}

uint64_t AddrObjGoogle::protobuf::FileDescriptorSet::default_instance_(AddrObjGoogle::protobuf::FileDescriptorSet *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E91172D8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E91172D8))
  {
    operator new();
  }
  return qword_1E91172D0;
}

void sub_188E84038(_Unwind_Exception *a1)
{
  MEMORY[0x18C11F580](v1, 0x10A1C40F1948F29);
  __cxa_guard_abort(&qword_1E91172D8);
  _Unwind_Resume(a1);
}

AddrObjGoogle::protobuf::FileDescriptorSet *AddrObjGoogle::protobuf::FileDescriptorSet::FileDescriptorSet(AddrObjGoogle::protobuf::FileDescriptorSet *this)
{
  *(void *)this = &unk_1ED5129C8;
  AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((void *)this + 1);
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  *((void *)this + 5) = 0;
  return this;
}

void sub_188E840C0(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

AddrObjGoogle::protobuf::EnumValueOptions *AddrObjGoogle::protobuf::EnumValueOptions::EnumValueOptions(AddrObjGoogle::protobuf::EnumValueOptions *this)
{
  *(void *)this = &unk_1ED5128F0;
  AddrObjGoogle::protobuf::internal::ExtensionSet::ExtensionSet((void *)this + 1);
  AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((void *)this + 4);
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = 0;
  return this;
}

void sub_188E84140(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::internal::ExtensionSet::~ExtensionSet(v2);
  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t AddrObjGoogle::protobuf::EnumValueOptions::default_instance(AddrObjGoogle::protobuf::EnumValueOptions *this)
{
  uint64_t v1 = (AddrObjGoogle::protobuf::EnumValueOptions *)AddrObjGoogle::protobuf::EnumValueOptions::default_instance_(this);
  if (!v1) {
    uint64_t v1 = (AddrObjGoogle::protobuf::EnumValueOptions *)AddrObjGoogle::protobuf::protobuf_AddDesc_google_2fprotobuf_2fdescriptor_2eproto(0);
  }

  return AddrObjGoogle::protobuf::EnumValueOptions::default_instance_(v1);
}

AddrObjGoogle::protobuf::SourceCodeInfo *AddrObjGoogle::protobuf::SourceCodeInfo::SourceCodeInfo(AddrObjGoogle::protobuf::SourceCodeInfo *this)
{
  *(void *)this = &unk_1ED512790;
  AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((void *)this + 1);
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  *((void *)this + 5) = 0;
  return this;
}

void sub_188E841E8(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t AddrObjGoogle::protobuf::SourceCodeInfo::default_instance(AddrObjGoogle::protobuf::SourceCodeInfo *this)
{
  uint64_t v1 = (AddrObjGoogle::protobuf::SourceCodeInfo *)AddrObjGoogle::protobuf::SourceCodeInfo::default_instance_(this);
  if (!v1) {
    AddrObjGoogle::protobuf::protobuf_AddDesc_google_2fprotobuf_2fdescriptor_2eproto(0, v2, v3, v4);
  }

  return AddrObjGoogle::protobuf::SourceCodeInfo::default_instance_(v1);
}

AddrObjGoogle::protobuf::ServiceOptions *AddrObjGoogle::protobuf::ServiceOptions::ServiceOptions(AddrObjGoogle::protobuf::ServiceOptions *this)
{
  *(void *)this = &unk_1ED5126E0;
  AddrObjGoogle::protobuf::internal::ExtensionSet::ExtensionSet((void *)this + 1);
  AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((void *)this + 4);
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = 0;
  return this;
}

void sub_188E84298(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::internal::ExtensionSet::~ExtensionSet(v2);
  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t AddrObjGoogle::protobuf::ServiceOptions::default_instance(AddrObjGoogle::protobuf::ServiceOptions *this)
{
  uint64_t v1 = (AddrObjGoogle::protobuf::ServiceOptions *)AddrObjGoogle::protobuf::ServiceOptions::default_instance_(this);
  if (!v1) {
    uint64_t v1 = (AddrObjGoogle::protobuf::ServiceOptions *)AddrObjGoogle::protobuf::protobuf_AddDesc_google_2fprotobuf_2fdescriptor_2eproto(0);
  }

  return AddrObjGoogle::protobuf::ServiceOptions::default_instance_(v1);
}

AddrObjGoogle::protobuf::MessageOptions *AddrObjGoogle::protobuf::MessageOptions::MessageOptions(AddrObjGoogle::protobuf::MessageOptions *this)
{
  *(void *)this = &unk_1ED512630;
  AddrObjGoogle::protobuf::internal::ExtensionSet::ExtensionSet((void *)this + 1);
  AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((void *)this + 4);
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_WORD *)this + 32) = 0;
  *((_DWORD *)this + 17) = 0;
  *((_DWORD *)this + 18) = 0;
  return this;
}

void sub_188E8435C(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::internal::ExtensionSet::~ExtensionSet(v2);
  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t AddrObjGoogle::protobuf::MessageOptions::default_instance(AddrObjGoogle::protobuf::MessageOptions *this)
{
  uint64_t v1 = (AddrObjGoogle::protobuf::MessageOptions *)AddrObjGoogle::protobuf::MessageOptions::default_instance_(this);
  if (!v1) {
    uint64_t v1 = (AddrObjGoogle::protobuf::MessageOptions *)AddrObjGoogle::protobuf::protobuf_AddDesc_google_2fprotobuf_2fdescriptor_2eproto(0);
  }

  return AddrObjGoogle::protobuf::MessageOptions::default_instance_(v1);
}

AddrObjGoogle::protobuf::MethodOptions *AddrObjGoogle::protobuf::MethodOptions::MethodOptions(AddrObjGoogle::protobuf::MethodOptions *this)
{
  *(void *)this = &unk_1ED5124A8;
  AddrObjGoogle::protobuf::internal::ExtensionSet::ExtensionSet((void *)this + 1);
  AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((void *)this + 4);
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = 0;
  return this;
}

void sub_188E8441C(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::internal::ExtensionSet::~ExtensionSet(v2);
  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t AddrObjGoogle::protobuf::MethodOptions::default_instance(AddrObjGoogle::protobuf::MethodOptions *this)
{
  uint64_t v1 = (AddrObjGoogle::protobuf::MethodOptions *)AddrObjGoogle::protobuf::MethodOptions::default_instance_(this);
  if (!v1) {
    uint64_t v1 = (AddrObjGoogle::protobuf::MethodOptions *)AddrObjGoogle::protobuf::protobuf_AddDesc_google_2fprotobuf_2fdescriptor_2eproto(0);
  }

  return AddrObjGoogle::protobuf::MethodOptions::default_instance_(v1);
}

uint64_t AddrObjGoogle::protobuf::FieldOptions::default_instance(AddrObjGoogle::protobuf::FieldOptions *this)
{
  uint64_t v1 = (AddrObjGoogle::protobuf::FieldOptions *)AddrObjGoogle::protobuf::FieldOptions::default_instance_(this);
  if (!v1) {
    uint64_t v1 = (AddrObjGoogle::protobuf::FieldOptions *)AddrObjGoogle::protobuf::protobuf_AddDesc_google_2fprotobuf_2fdescriptor_2eproto(0);
  }

  return AddrObjGoogle::protobuf::FieldOptions::default_instance_(v1);
}

uint64_t AddrObjGoogle::protobuf::FileOptions::default_instance(AddrObjGoogle::protobuf::FileOptions *this)
{
  uint64_t v1 = (AddrObjGoogle::protobuf::FileOptions *)AddrObjGoogle::protobuf::FileOptions::default_instance_(this);
  if (!v1) {
    uint64_t v1 = (AddrObjGoogle::protobuf::FileOptions *)AddrObjGoogle::protobuf::protobuf_AddDesc_google_2fprotobuf_2fdescriptor_2eproto(0);
  }

  return AddrObjGoogle::protobuf::FileOptions::default_instance_(v1);
}

AddrObjGoogle::protobuf::EnumOptions *AddrObjGoogle::protobuf::EnumOptions::EnumOptions(AddrObjGoogle::protobuf::EnumOptions *this)
{
  *(void *)this = &unk_1ED512298;
  AddrObjGoogle::protobuf::internal::ExtensionSet::ExtensionSet((void *)this + 1);
  AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((void *)this + 4);
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  *((unsigned char *)this + 64) = 1;
  *((_DWORD *)this + 17) = 0;
  *((_DWORD *)this + 18) = 0;
  return this;
}

void sub_188E8454C(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::internal::ExtensionSet::~ExtensionSet(v2);
  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t AddrObjGoogle::protobuf::EnumOptions::default_instance(AddrObjGoogle::protobuf::EnumOptions *this)
{
  uint64_t v1 = (AddrObjGoogle::protobuf::EnumOptions *)AddrObjGoogle::protobuf::EnumOptions::default_instance_(this);
  if (!v1) {
    uint64_t v1 = (AddrObjGoogle::protobuf::EnumOptions *)AddrObjGoogle::protobuf::protobuf_AddDesc_google_2fprotobuf_2fdescriptor_2eproto(0);
  }

  return AddrObjGoogle::protobuf::EnumOptions::default_instance_(v1);
}

void AddrObjGoogle::protobuf::EnumDescriptorProto::~EnumDescriptorProto(AddrObjGoogle::protobuf::EnumDescriptorProto *this)
{
  AddrObjGoogle::protobuf::EnumDescriptorProto::~EnumDescriptorProto(this);

  JUMPOUT(0x18C11F580);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1ED512A78;
  AddrObjGoogle::protobuf::EnumDescriptorProto::SharedDtor(this);
  AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Destroy<AddrObjGoogle::protobuf::RepeatedPtrField<addr_obj::FingerprintProto>::TypeHandler>((uint64_t *)this + 3);
  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet((AddrObjGoogle::protobuf::EnumDescriptorProto *)((char *)this + 8));

  AddrObjGoogle::protobuf::Message::~Message(this);
}

AddrObjGoogle::protobuf::EnumDescriptorProto *AddrObjGoogle::protobuf::EnumDescriptorProto::SharedDtor(AddrObjGoogle::protobuf::EnumDescriptorProto *this)
{
  uint64_t v2 = (uint64_t *)*((void *)this + 2);
  uint64_t v3 = AddrObjGoogle::protobuf::internal::kEmptyString(this);
  if (v2 != v3)
  {
    uint64_t v4 = *((void *)this + 2);
    if (v4)
    {
      if (*(char *)(v4 + 23) < 0) {
        operator delete(*(void **)v4);
      }
      uint64_t v3 = (uint64_t *)MEMORY[0x18C11F580](v4, 0x1012C40EC159624);
    }
  }
  uint64_t result = (AddrObjGoogle::protobuf::EnumDescriptorProto *)AddrObjGoogle::protobuf::EnumDescriptorProto::default_instance_((AddrObjGoogle::protobuf::EnumDescriptorProto *)v3);
  if (result != this)
  {
    uint64_t result = (AddrObjGoogle::protobuf::EnumDescriptorProto *)*((void *)this + 6);
    if (result)
    {
      BOOL v6 = *(uint64_t (**)(void))(*(void *)result + 8);
      return (AddrObjGoogle::protobuf::EnumDescriptorProto *)v6();
    }
  }
  return result;
}

uint64_t AddrObjGoogle::protobuf::EnumDescriptorProto::default_instance_(AddrObjGoogle::protobuf::EnumDescriptorProto *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9117328, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E9117328))
  {
    operator new();
  }
  return qword_1E9117320;
}

void sub_188E84770(_Unwind_Exception *a1)
{
  MEMORY[0x18C11F580](v1, 0x10A1C407FD52222);
  __cxa_guard_abort(&qword_1E9117328);
  _Unwind_Resume(a1);
}

void AddrObjGoogle::protobuf::internal::GenericTypeHandler<AddrObjGoogle::protobuf::EnumDescriptorProto>::New()
{
}

void sub_188E847E8(_Unwind_Exception *a1)
{
  MEMORY[0x18C11F580](v1, 0x10A1C407FD52222);
  _Unwind_Resume(a1);
}

AddrObjGoogle::protobuf::EnumDescriptorProto *AddrObjGoogle::protobuf::EnumDescriptorProto::EnumDescriptorProto(AddrObjGoogle::protobuf::EnumDescriptorProto *this)
{
  *(void *)this = &unk_1ED512A78;
  uint64_t v2 = (AddrObjGoogle::protobuf::internal *)AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((void *)this + 1);
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 2) = AddrObjGoogle::protobuf::internal::kEmptyString(v2);
  *((void *)this + 6) = 0;
  *((_DWORD *)this + 15) = 0;
  return this;
}

void sub_188E84880(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Destroy<AddrObjGoogle::protobuf::RepeatedPtrField<addr_obj::FingerprintProto>::TypeHandler>(v4);
  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

void sub_188E856EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id GEOURLAuthenticationGenerateURL(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = [MEMORY[0x1E4F29088] componentsWithURL:a1 resolvingAgainstBaseURL:1];
    uint64_t v2 = GEOURLAuthenticationGenerateURLFromComponents(v1);
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id GEOURLAuthenticationGenerateURLFromComponents(void *a1)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = +[GEOResourceManifestManager modernManager];
  uint64_t v3 = [v2 authToken];

  if (!v3)
  {
    uint64_t v23 = [v1 URL];
    goto LABEL_32;
  }
  uint64_t v4 = +[GEOCountryConfiguration sharedConfiguration];
  [v4 urlAuthenticationTimeToLive];
  double v6 = v5;

  char v7 = [@"4cjLaD4jGRwlQ9U" stringByAppendingString:v3];
  double Current = CFAbsoluteTimeGetCurrent();
  id v69 = v1;
  id v9 = v1;
  id v10 = v7;
  unint64_t v11 = [MEMORY[0x1E4F28E78] string];
  uint32_t v12 = [@"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789" length];
  uint64_t v13 = 16;
  do
  {
    [v11 appendFormat:@"%c", objc_msgSend(@"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789", "characterAtIndex:", arc4random_uniform(v12))];
    --v13;
  }
  while (v13);
  id v14 = v9;
  uint64_t v15 = [v14 string];
  unint64_t v16 = [v14 rangeOfPath];
  uint64_t v18 = v17;
  unint64_t v19 = [v14 rangeOfQuery];
  uint64_t v21 = v20;

  if (v16 == 0x7FFFFFFFFFFFFFFFLL)
  {
    id v22 = v15;
  }
  else
  {
    if (v19 == 0x7FFFFFFFFFFFFFFFLL)
    {
      std::string v24 = v15;
      unint64_t v25 = v16;
      uint64_t v26 = v18;
    }
    else
    {
      if (v16 >= v19) {
        unint64_t v25 = v19;
      }
      else {
        unint64_t v25 = v16;
      }
      uint64_t v27 = v16 + v18;
      if (v16 + v18 <= v19 + v21) {
        uint64_t v27 = v19 + v21;
      }
      uint64_t v26 = v27 - v25;
      std::string v24 = v15;
    }
    objc_msgSend(v24, "substringWithRange:", v25, v26);
    id v22 = (id)objc_claimAutoreleasedReturnValue();
  }
  uint64_t v28 = v22;

  id v29 = v28;
  id v30 = v11;
  int v68 = v10;
  [v10 stringByAppendingString:v30];
  memset(&c, 0, sizeof(c));
  id v31 = objc_claimAutoreleasedReturnValue();
  uint64_t v32 = (const void *)[v31 cStringUsingEncoding:1];
  CC_LONG v33 = [v31 lengthOfBytesUsingEncoding:1];
  CC_SHA256_Init(&c);
  CC_SHA256_Update(&c, v32, v33);
  CC_SHA256_Final(md, &c);
  uint64_t v34 = (uint64_t)(v6 + Current + *MEMORY[0x1E4F1CF78]);
  BOOL v35 = [MEMORY[0x1E4F28E78] stringWithString:v29];
  objc_msgSend(v35, "appendFormat:", @"%li", v34);
  [v35 appendString:v30];
  char v36 = [v35 lengthOfBytesUsingEncoding:1];
  uint64_t v37 = 16 - (v36 & 0xFu);
  unint64_t v38 = v36 & 0xF | 0xFFFFFFFFFFFFFFF0;
  do
    objc_msgSend(v35, "appendFormat:", @"%c", v37);
  while (!__CFADD__(v38++, 1));
  id v40 = v35;
  id v41 = (const void *)[v40 cStringUsingEncoding:1];
  unsigned int v42 = [v40 lengthOfBytesUsingEncoding:1];
  CCCryptorRef cryptorRef = 0;
  uint64_t v43 = CCCryptorCreate(0, 0, 0, md, 0x20uLL, 0, &cryptorRef);
  char v67 = v3;
  if (v43)
  {
    NSLog(&cfstr_ErrorCreatingC.isa, v43);
    char v44 = cryptorRef;
    if (!cryptorRef) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  size_t OutputLength = CCCryptorGetOutputLength(cryptorRef, v42, 1);
  if (!OutputLength)
  {
    NSLog(&cfstr_ZeroSizeOutput.isa);
LABEL_28:
    char v44 = cryptorRef;
LABEL_29:
    CCCryptorRelease(v44);
    goto LABEL_30;
  }
  size_t v46 = OutputLength;
  int v47 = malloc_type_malloc(OutputLength, 0xA4577BE6uLL);
  if (!v47)
  {
    NSLog(&cfstr_ErrorAllocatin.isa);
    goto LABEL_28;
  }
  size_t v48 = v42;
  int v49 = v47;
  uint64_t v50 = CCCryptorUpdate(cryptorRef, v41, v48, v47, v46, 0);
  if (v50)
  {
    NSLog(&cfstr_ErrorUpdatingC.isa, v50);
  }
  else
  {
    uint64_t v64 = CCCryptorFinal(cryptorRef, v49, v46, 0);
    if (!v64)
    {
      __int16 v65 = v49;
      char v66 = (void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytesNoCopy:v49 length:v46 freeWhenDone:0];
      char v51 = [v66 base64EncodedStringWithOptions:0];
      CCCryptorRelease(cryptorRef);
      free(v65);

      goto LABEL_31;
    }
    NSLog(&cfstr_ErrorFinalizin.isa, v64);
  }
  CCCryptorRelease(cryptorRef);
  free(v49);
LABEL_30:
  uint64_t v34 = 0;
  char v51 = 0;
LABEL_31:

  char v52 = objc_msgSend(MEMORY[0x1E4F28E78], "stringWithFormat:", @"%lu_", v34);
  [v52 appendString:v30];
  [v52 appendString:@"_"];
  [v52 appendString:v51];
  char v53 = escapeChars();
  BOOL v54 = [v52 stringByAddingPercentEncodingWithAllowedCharacters:v53];

  char v55 = (void *)MEMORY[0x1E4F1C978];
  char v56 = [v14 queryItems];
  BOOL v57 = [v55 arrayWithArray:v56];
  char v58 = [MEMORY[0x1E4F290C8] queryItemWithName:@"accessKey" value:@"A"];
  __int16 v59 = [v57 arrayByAddingObject:v58];
  [v14 setQueryItems:v59];

  char v60 = (void *)MEMORY[0x1E4F28E78];
  char v61 = [v14 string];
  char v62 = [v60 stringWithString:v61];

  objc_msgSend(v62, "replaceCharactersInRange:withString:", objc_msgSend(v62, "length") - 1, 1, v54);
  uint64_t v23 = [MEMORY[0x1E4F1CB10] URLWithString:v62];

  id v1 = v69;
  uint64_t v3 = v67;
LABEL_32:

  return v23;
}

id escapeChars()
{
  if (qword_1EB2A0020 != -1) {
    dispatch_once(&qword_1EB2A0020, &__block_literal_global_140);
  }
  uint64_t v0 = (void *)_MergedGlobals_281;

  return v0;
}

void sub_188E85F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188E86394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,id location)
{
  objc_destroyWeak(v31);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_188E868C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t bodySizeEstimateFromResponse(void *a1)
{
  id v1 = [a1 allHeaderFields];
  uint64_t v2 = [v1 objectForKeyedSubscript:@"Content-Length"];

  if (v2)
  {
    uint64_t v3 = newlocale(63, 0, 0);
    uint64_t v7 = 0;
    int v4 = sscanf_l((const char *)[v2 UTF8String], v3, "%zu", &v7);
    freelocale(v3);
    if (v4 == 1) {
      uint64_t v5 = v7;
    }
    else {
      uint64_t v5 = 0;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

void sub_188E87964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
}

void sub_188E87DA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
}

void sub_188E884AC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void __GEODefaultsDomain_block_invoke()
{
  uint64_t v0 = (void *)qword_1EB29F670;
  qword_1EB29F670 = @"com.apple.GEO";
}

void sub_188E88F20(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E89028(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E8AFF4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E8B0C0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E8B18C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E8B3D0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E8B7F0(_Unwind_Exception *a1)
{
}

void _attributedGeoMapItemsForPlaceDatasWithHandler(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v12 = a2;
  id v13 = a3;
  id v14 = a4;
  id v15 = a5;
  id v16 = a6;
  id v17 = a7;
  if (v17)
  {
    if ([v12 count] || objc_msgSend(v16, "count"))
    {
      uint64_t v18 = _attributionsToRequestForPlaceDatas(v12);
      if ([v18 count])
      {
        v21[0] = MEMORY[0x1E4F143A8];
        v21[1] = 3221225472;
        v21[2] = ___attributedGeoMapItemsForPlaceDatasWithHandler_block_invoke;
        v21[3] = &unk_1E53E4E70;
        id v22 = v12;
        id v23 = v13;
        id v24 = v14;
        id v25 = v15;
        id v26 = v17;
        _loadAttributions(v18, v21);
      }
      else
      {
        unint64_t v19 = _attributedGeoMapItemsForPlaceDatas(v12, v13, v14, v15, 0);
        if ([v19 count])
        {
          (*((void (**)(id, void *, void))v17 + 2))(v17, v19, 0);
        }
        else
        {
          uint64_t v20 = [MEMORY[0x1E4F28C58] GEOErrorWithCode:-8 reason:@"No Results"];
          (*((void (**)(id, void, void *))v17 + 2))(v17, 0, v20);
        }
      }
    }
    else
    {
      uint64_t v18 = [MEMORY[0x1E4F28C58] GEOErrorWithCode:-8 reason:@"No Results"];
      (*((void (**)(id, void, void *))v17 + 2))(v17, 0, v18);
    }
  }
}

id _attributedGeoMapItemsForPlaceDatas(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a1;
  id v10 = a2;
  id v11 = a3;
  id v12 = a4;
  id v13 = a5;
  id v14 = (id)[v9 count];
  if (v14)
  {
    uint64_t v15 = [v10 count];
    id v16 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:v14];
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 3221225472;
    v20[2] = ___attributedGeoMapItemsForPlaceDatas_block_invoke;
    v20[3] = &unk_1E53E4ED8;
    uint64_t v27 = v15;
    id v21 = v10;
    id v22 = v11;
    id v23 = v9;
    id v24 = v12;
    id v25 = v13;
    id v17 = v16;
    id v26 = v17;
    [v23 enumerateObjectsUsingBlock:v20];
    uint64_t v18 = v26;
    id v14 = v17;
  }

  return v14;
}

void sub_188E8BDDC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E8BF38(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E8C004(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E8C0D0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E8C19C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E8C618(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDBusinessHoursReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 76))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOPDBusinessHoursReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)id v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 72) = [v8 position];
  *(_DWORD *)(a1 + 76) = [v8 length];
  if (a3) {
    id v9 = (int *)&GEOPDBusinessHoursReadAllFrom_recursiveTag;
  }
  else {
    id v9 = (int *)&GEOPDBusinessHoursReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOPDBusinessHoursReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOPDBusinessHoursCallReadAllRecursiveWithoutSynchronized((id *)a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 80));
  return Specified;
}

void sub_188E8C878(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDBusinessHoursReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 80));
  double v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 76);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 72)];
  uint64_t v7 = v6;
  uint64_t v8 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  unsigned int v13 = (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int16 *)(a1 + 88)), (uint16x4_t)0xFFFCFFFAFFF9FFFBLL), (int8x8_t)0x1000100010001))+ ((*(_WORD *)(a1 + 88) >> 3) & 1));
  while (2)
  {
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    uint64_t v16 = 1;
    switch(a3[v8])
    {
      case -4:
        ++v13;
        goto LABEL_8;
      case -3:
        char v9 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v15 = v11;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v17 = v13 > 2;
        char v18 = v17 & ~(_BYTE)v12 | v10;
        unsigned __int8 v19 = v17 | v12;
        char v75 = v18;
        char v76 = v19 | v18;
        if ((v19 | v9)) {
          uint64_t v20 = 0;
        }
        else {
          uint64_t v20 = a3;
        }
        char v77 = (v20 == 0) | v19;
        BOOL v78 = v19;
        id v21 = (int *)MEMORY[0x1E4F940E8];
        id v22 = (int *)MEMORY[0x1E4F940C8];
        id v23 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v13;
LABEL_7:
        uint64_t v14 = v10;
LABEL_8:
        uint64_t v15 = v11;
        uint64_t v16 = v12;
LABEL_10:
        ++v8;
        uint64_t v10 = v14;
        uint64_t v11 = v15;
        uint64_t v12 = v16;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v21) >= *(void *)(v3 + *v7) || *(unsigned char *)(v3 + *v22)) {
      goto LABEL_114;
    }
    char v24 = 0;
    unsigned int v25 = 0;
    unint64_t v26 = 0;
    while (1)
    {
      uint64_t v27 = *v21;
      uint64_t v28 = *(void *)(v3 + v27);
      unint64_t v29 = v28 + 1;
      if (v28 == -1 || v29 > *(void *)(v3 + *v7)) {
        break;
      }
      char v30 = *(unsigned char *)(*(void *)(v3 + *v23) + v28);
      *(void *)(v3 + v27) = v29;
      v26 |= (unint64_t)(v30 & 0x7F) << v24;
      if ((v30 & 0x80) == 0) {
        goto LABEL_25;
      }
      v24 += 7;
      BOOL v31 = v25++ >= 9;
      if (v31)
      {
        unint64_t v26 = 0;
        int v32 = *(unsigned __int8 *)(v3 + *v22);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v22) = 1;
LABEL_25:
    int v32 = *(unsigned __int8 *)(v3 + *v22);
    if (*(unsigned char *)(v3 + *v22)) {
      unint64_t v26 = 0;
    }
LABEL_27:
    if (v32 || (v26 & 7) == 4)
    {
LABEL_114:
      int v73 = 1;
      goto LABEL_115;
    }
    unint64_t v34 = v26 >> 3;
    BOOL v35 = v78;
    if ((v77 & 1) == 0)
    {
      char v36 = v20;
      do
      {
        int v38 = *v36++;
        int v37 = v38;
        BOOL v35 = v38 != 0;
        if (v38) {
          BOOL v39 = v37 == v34;
        }
        else {
          BOOL v39 = 1;
        }
      }
      while (!v39);
    }
    switch((int)v34)
    {
      case 1:
        if (!v35 || (*(_WORD *)(a1 + 88) & 0x80) != 0) {
          goto LABEL_90;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_133;
        }
        id v40 = objc_alloc_init(GEOPDHours);
        if (!GEOPDHoursReadAllFrom((uint64_t)v40, (void *)v3, v11 & 1)) {
          goto LABEL_132;
        }
        PBReaderRecallMark();
        -[GEOPDBusinessHours _addNoFlagsWeeklyHours:](a1, v40);

        goto LABEL_112;
      case 2:
        if ((v9 & 1) == 0) {
          goto LABEL_90;
        }
        char v44 = 0;
        unsigned int v45 = 0;
        uint64_t v46 = 0;
        *(_WORD *)(a1 + 88) |= 2u;
        while (2)
        {
          uint64_t v47 = *v21;
          uint64_t v48 = *(void *)(v3 + v47);
          unint64_t v49 = v48 + 1;
          if (v48 == -1 || v49 > *(void *)(v3 + *v7))
          {
            *(unsigned char *)(v3 + *v22) = 1;
          }
          else
          {
            char v50 = *(unsigned char *)(*(void *)(v3 + *v23) + v48);
            *(void *)(v3 + v47) = v49;
            v46 |= (unint64_t)(v50 & 0x7F) << v44;
            if (v50 < 0)
            {
              v44 += 7;
              BOOL v31 = v45++ >= 9;
              if (v31)
              {
                uint64_t v46 = 0;
                goto LABEL_95;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v22)) {
          uint64_t v46 = 0;
        }
LABEL_95:
        uint64_t v67 = 56;
        goto LABEL_100;
      case 3:
        if ((v9 & 1) == 0) {
          goto LABEL_90;
        }
        char v51 = 0;
        unsigned int v52 = 0;
        uint64_t v46 = 0;
        *(_WORD *)(a1 + 88) |= 1u;
        while (2)
        {
          uint64_t v53 = *v21;
          uint64_t v54 = *(void *)(v3 + v53);
          unint64_t v55 = v54 + 1;
          if (v54 == -1 || v55 > *(void *)(v3 + *v7))
          {
            *(unsigned char *)(v3 + *v22) = 1;
          }
          else
          {
            char v56 = *(unsigned char *)(*(void *)(v3 + *v23) + v54);
            *(void *)(v3 + v53) = v55;
            v46 |= (unint64_t)(v56 & 0x7F) << v51;
            if (v56 < 0)
            {
              v51 += 7;
              BOOL v31 = v52++ >= 9;
              if (v31)
              {
                uint64_t v46 = 0;
                goto LABEL_99;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v22)) {
          uint64_t v46 = 0;
        }
LABEL_99:
        uint64_t v67 = 24;
LABEL_100:
        *(void *)(a1 + v67) = v46;
        goto LABEL_113;
      case 4:
        if (!v35) {
          goto LABEL_90;
        }
        if ((*(_WORD *)(a1 + 88) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_133;
          }
          __int16 v68 = *(_WORD *)(a1 + 88) << 10;
          goto LABEL_111;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_133;
        }
        id v40 = objc_alloc_init(GEOLocalizedString);
        if (!GEOLocalizedStringReadAllFrom((uint64_t)v40, (void *)v3, v11 & 1)) {
          goto LABEL_132;
        }
        PBReaderRecallMark();
        uint64_t v57 = 40;
        goto LABEL_89;
      case 5:
        if (!v35) {
          goto LABEL_90;
        }
        if ((*(_WORD *)(a1 + 88) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_133;
          }
          __int16 v68 = *(_WORD *)(a1 + 88) << 9;
          goto LABEL_111;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_133;
        }
        id v40 = objc_alloc_init(GEOLocalizedString);
        if (!GEOLocalizedStringReadAllFrom((uint64_t)v40, (void *)v3, v11 & 1)) {
          goto LABEL_132;
        }
        PBReaderRecallMark();
        uint64_t v57 = 48;
        goto LABEL_89;
      case 6:
        if ((v9 & 1) == 0) {
          goto LABEL_90;
        }
        char v58 = 0;
        unsigned int v59 = 0;
        uint64_t v60 = 0;
        *(_WORD *)(a1 + 88) |= 4u;
        while (2)
        {
          uint64_t v61 = *v21;
          uint64_t v62 = *(void *)(v3 + v61);
          unint64_t v63 = v62 + 1;
          if (v62 == -1 || v63 > *(void *)(v3 + *v7))
          {
            *(unsigned char *)(v3 + *v22) = 1;
          }
          else
          {
            char v64 = *(unsigned char *)(*(void *)(v3 + *v23) + v62);
            *(void *)(v3 + v61) = v63;
            v60 |= (unint64_t)(v64 & 0x7F) << v58;
            if (v64 < 0)
            {
              v58 += 7;
              BOOL v31 = v59++ >= 9;
              if (v31)
              {
                LODWORD(v60) = 0;
                goto LABEL_104;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v22)) {
          LODWORD(v60) = 0;
        }
LABEL_104:
        *(_DWORD *)(a1 + 84) = v60;
        goto LABEL_113;
      case 7:
        if (!v35) {
          goto LABEL_90;
        }
        if ((*(_WORD *)(a1 + 88) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_133;
          }
          __int16 v68 = *(_WORD *)(a1 + 88) << 11;
LABEL_111:
          v8 += v68 >> 15;
LABEL_112:
          id v22 = (int *)MEMORY[0x1E4F940C8];
          uint64_t v7 = (int *)MEMORY[0x1E4F940E0];
          goto LABEL_113;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_133;
        }
        id v40 = objc_alloc_init(GEOPDHoursThreshold);
        if (GEOPDHoursThresholdReadAllFrom((uint64_t)v40, (void *)v3))
        {
          PBReaderRecallMark();
          uint64_t v57 = 32;
LABEL_89:
          __int16 v65 = *(void **)(a1 + v57);
          *(void *)(a1 + v57) = v40;

          --v8;
          goto LABEL_112;
        }
LABEL_132:

LABEL_133:
        int v73 = 0;
        char v74 = &OBJC_IVAR___GEOXPCReply__error;
        id v22 = (int *)MEMORY[0x1E4F940C8];
LABEL_116:
        if (v75) {
LABEL_117:
        }
          *(_WORD *)(a1 + v74[649]) |= 8u;
        if (v78 || (v73 & 1) == 0)
        {
          *(_WORD *)(a1 + v74[649]) |= 0x80u;
          *(_WORD *)(a1 + v74[649]) |= 0x20u;
          *(_WORD *)(a1 + v74[649]) |= 0x40u;
          *(_WORD *)(a1 + v74[649]) |= 0x10u;
        }
        else if (v20)
        {
          while (1)
          {
            int v69 = *v20++;
            __int16 v70 = 128;
            switch(v69)
            {
              case 0:
                goto LABEL_126;
              case 1:
                goto LABEL_125;
              case 4:
                __int16 v70 = 32;
                goto LABEL_125;
              case 5:
                __int16 v70 = 64;
                goto LABEL_125;
              case 7:
                __int16 v70 = 16;
LABEL_125:
                *(_WORD *)(a1 + v74[649]) |= v70;
                break;
              default:
                continue;
            }
          }
        }
LABEL_126:
        if (v73) {
          unint64_t v3 = *(unsigned char *)(v3 + *v22) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v78)
        {
          char v71 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      default:
        if ((v75 & 1) == 0 || (*(_WORD *)(a1 + 88) & 8) != 0)
        {
LABEL_90:
          char v66 = PBReaderSkipValueWithTag();
          uint64_t v7 = (int *)MEMORY[0x1E4F940E0];
          id v22 = (int *)MEMORY[0x1E4F940C8];
          if ((v66 & 1) == 0)
          {
            int v73 = 0;
LABEL_115:
            char v74 = &OBJC_IVAR___GEOXPCReply__error;
            goto LABEL_116;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v41 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            unsigned int v42 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v41;
          }
          int v43 = PBUnknownFieldAdd();
          id v22 = (int *)MEMORY[0x1E4F940C8];
          uint64_t v7 = (int *)MEMORY[0x1E4F940E0];
          if (!v43)
          {
            int v73 = 0;
            char v74 = &OBJC_IVAR___GEOXPCReply__error;
            goto LABEL_117;
          }
        }
LABEL_113:
        if (!(v76 & 1 | (v8 != 0))) {
          goto LABEL_114;
        }
        continue;
    }
  }
}

void sub_188E8D2D8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void __GEOConfigRemoveDelegateListenerForKey_block_invoke(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  id v9 = a2;
  id v28 = a3;
  id v30 = a4;
  id v29 = a5;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  uint64_t v10 = [v9 allKeys];
  uint64_t v11 = [v10 countByEnumeratingWithState:&v33 objects:v37 count:16];
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)v34;
    do
    {
      uint64_t v14 = 0;
      do
      {
        if (*(void *)v34 != v13) {
          objc_enumerationMutation(v10);
        }
        uint64_t v15 = *(void **)(*((void *)&v33 + 1) + 8 * v14);
        uint64_t v16 = *(void *)(a1 + 48);
        if (*(_DWORD *)(a1 + 40)) {
          BOOL v17 = v16 == 0;
        }
        else {
          BOOL v17 = 1;
        }
        if (v17
          || (!v15 ? (uint64_t v18 = 0, LODWORD(v19) = 0) : (v19 = v15[5], uint64_t v18 = v15[6]),
              *(_DWORD *)(a1 + 40) == v19 ? (BOOL v20 = v16 == v18) : (BOOL v20 = 0),
              v20))
        {
          id v21 = [v9 objectForKeyedSubscript:*(void *)(*((void *)&v33 + 1) + 8 * v14)];
          v31[0] = MEMORY[0x1E4F143A8];
          v31[1] = 3221225472;
          v31[2] = __GEOConfigRemoveDelegateListenerForKey_block_invoke_2;
          v31[3] = &unk_1E53E85D8;
          id v32 = *(id *)(a1 + 32);
          uint64_t v22 = [v21 indexOfObjectPassingTest:v31];
          if (v22 != 0x7FFFFFFFFFFFFFFFLL)
          {
            [v21 removeObjectAtIndex:v22];
            if (![v21 count])
            {
              id v23 = -[_GEOConfigKeyHelper keyString](v15);
              -[_GEOConfigKeyHelper keyNumber](v15);
              v25 = char v24 = v10;
              [v9 setObject:0 forKeyedSubscript:v15];
              [v30 setObject:0 forKeyedSubscript:v23];
              [v29 setObject:0 forKeyedSubscript:v25];
              unint64_t v26 = [MEMORY[0x1E4F1CAD0] setWithObject:v23];
              _GEORemoveChangeListenerForKeys(v26);

              uint64_t v10 = v24;
            }
          }
        }
        ++v14;
      }
      while (v12 != v14);
      uint64_t v27 = [v10 countByEnumeratingWithState:&v33 objects:v37 count:16];
      uint64_t v12 = v27;
    }
    while (v27);
  }
}

void sub_188E8DAE0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOTileKeyMake(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, char a8)
{
  *(void *)((char *)&v9 + 1) = (a1 << 46) | ((unint64_t)(a3 & 0x3F) << 40);
  LOBYTE(v9) = a7 & 0x7F | (a8 << 7);
  return v9;
}

void sub_188E8DD7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_188E8DFEC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E8E1C0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E8EA78(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E8EBD0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E8EC8C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E8F298(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOAddressReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 44))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOAddressReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = [v8 position];
  *(_DWORD *)(a1 + 44) = [v8 length];
  if (a3) {
    long long v9 = (int *)&GEOAddressReadAllFrom_recursiveTag;
  }
  else {
    long long v9 = (int *)&GEOAddressReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOAddressReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_188E8F424(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOAddressReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  double v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 44);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 40)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  int v11 = ((*(unsigned __int8 *)(a1 + 56) >> 2) & 1)
      + ((*(unsigned __int8 *)(a1 + 56) >> 3) & 1)
      + ((*(unsigned __int8 *)(a1 + 56) >> 1) & 1);
  while (2)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    switch(a3[v9])
    {
      case -4:
        ++v11;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_9;
      case 0:
        BOOL v14 = v11 != 0;
        char v15 = v14 & ~(_BYTE)v10 | v7;
        unsigned __int8 v16 = v14 | v10;
        char v58 = v15;
        char v59 = v16 | v15;
        if ((v16 | v8)) {
          BOOL v17 = 0;
        }
        else {
          BOOL v17 = a3;
        }
        char v60 = (v17 == 0) | v16;
        BOOL v61 = v16;
        uint64_t v18 = (int *)MEMORY[0x1E4F940E8];
        uint64_t v19 = (int *)MEMORY[0x1E4F940C8];
        BOOL v20 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v11;
LABEL_7:
        uint64_t v12 = v7;
LABEL_8:
        uint64_t v13 = v10;
LABEL_9:
        ++v9;
        uint64_t v7 = v12;
        uint64_t v10 = v13;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(void *)(v3 + *v18) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v19)) {
      goto LABEL_74;
    }
    char v21 = 0;
    unsigned int v22 = 0;
    unint64_t v23 = 0;
    while (1)
    {
      uint64_t v24 = *v18;
      uint64_t v25 = *(void *)(v3 + v24);
      unint64_t v26 = v25 + 1;
      if (v25 == -1 || v26 > *(void *)(v3 + *v6)) {
        break;
      }
      char v27 = *(unsigned char *)(*(void *)(v3 + *v20) + v25);
      *(void *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0) {
        goto LABEL_24;
      }
      v21 += 7;
      BOOL v28 = v22++ >= 9;
      if (v28)
      {
        unint64_t v23 = 0;
        int v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_26;
      }
    }
    *(unsigned char *)(v3 + *v19) = 1;
LABEL_24:
    int v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(unsigned char *)(v3 + *v19)) {
      unint64_t v23 = 0;
    }
LABEL_26:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_74:
      int v56 = 1;
      goto LABEL_75;
    }
    unint64_t v31 = v23 >> 3;
    BOOL v32 = v61;
    if ((v60 & 1) == 0)
    {
      long long v33 = v17;
      do
      {
        int v35 = *v33++;
        int v34 = v35;
        BOOL v32 = v35 != 0;
        if (v35) {
          BOOL v36 = v34 == v31;
        }
        else {
          BOOL v36 = 1;
        }
      }
      while (!v36);
    }
    if (v31 == 16)
    {
      if (v8)
      {
        char v38 = 0;
        unsigned int v39 = 0;
        uint64_t v40 = 0;
        *(unsigned char *)(a1 + 56) |= 1u;
        while (1)
        {
          uint64_t v41 = *v18;
          uint64_t v42 = *(void *)(v3 + v41);
          unint64_t v43 = v42 + 1;
          if (v42 == -1 || v43 > *(void *)(v3 + *v6)) {
            break;
          }
          char v44 = *(unsigned char *)(*(void *)(v3 + *v20) + v42);
          *(void *)(v3 + v41) = v43;
          v40 |= (unint64_t)(v44 & 0x7F) << v38;
          if ((v44 & 0x80) == 0) {
            goto LABEL_67;
          }
          v38 += 7;
          BOOL v28 = v39++ >= 9;
          if (v28)
          {
            LODWORD(v40) = 0;
            goto LABEL_69;
          }
        }
        *(unsigned char *)(v3 + *v19) = 1;
LABEL_67:
        if (*(unsigned char *)(v3 + *v19)) {
          LODWORD(v40) = 0;
        }
LABEL_69:
        *(_DWORD *)(a1 + 52) = v40;
        goto LABEL_73;
      }
      goto LABEL_64;
    }
    if (v31 == 15) {
      break;
    }
    if (v31 == 11)
    {
      if (v32 && (*(unsigned char *)(a1 + 56) & 4) == 0)
      {
        int v37 = PBReaderReadString();
        if (v37) {
          -[GEOAddress _addNoFlagsFormattedAddressLine:](a1, v37);
        }

        goto LABEL_72;
      }
    }
    else if ((v58 & 1) != 0 && (*(unsigned char *)(a1 + 56) & 2) == 0)
    {
      if (!*(void *)(a1 + 16))
      {
        id v47 = objc_alloc_init(MEMORY[0x1E4F940B0]);
        uint64_t v48 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v47;
      }
      int v49 = PBUnknownFieldAdd();
      uint64_t v19 = (int *)MEMORY[0x1E4F940C8];
      if (!v49)
      {
        int v56 = 0;
        uint64_t v57 = &OBJC_IVAR___GEOPDSearchViewportInfo__mapRegion;
        goto LABEL_77;
      }
      goto LABEL_73;
    }
LABEL_64:
    char v50 = PBReaderSkipValueWithTag();
    uint64_t v19 = (int *)MEMORY[0x1E4F940C8];
    if ((v50 & 1) == 0)
    {
      int v56 = 0;
LABEL_75:
      uint64_t v57 = &OBJC_IVAR___GEOPDSearchViewportInfo__mapRegion;
      goto LABEL_76;
    }
LABEL_73:
    if (!(v59 & 1 | (v9 != 0))) {
      goto LABEL_74;
    }
  }
  if (!v32) {
    goto LABEL_64;
  }
  if ((*(unsigned char *)(a1 + 56) & 8) != 0)
  {
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      goto LABEL_95;
    }
    v9 += *(unsigned __int8 *)(a1 + 56) << 28 >> 31;
    goto LABEL_72;
  }
  if ((PBReaderPlaceMark() & 1) == 0) {
    goto LABEL_95;
  }
  unsigned int v45 = objc_alloc_init(GEOStructuredAddress);
  if (GEOStructuredAddressReadAllFrom(v45, (void *)v3))
  {
    PBReaderRecallMark();
    uint64_t v46 = *(void **)(a1 + 32);
    *(void *)(a1 + 32) = v45;

    --v9;
LABEL_72:
    uint64_t v19 = (int *)MEMORY[0x1E4F940C8];
    goto LABEL_73;
  }

LABEL_95:
  int v56 = 0;
  uint64_t v57 = &OBJC_IVAR___GEOPDSearchViewportInfo__mapRegion;
  uint64_t v19 = (int *)MEMORY[0x1E4F940C8];
LABEL_76:
  if ((v58 & 1) == 0) {
    goto LABEL_78;
  }
LABEL_77:
  *(unsigned char *)(a1 + v57[277]) |= 2u;
LABEL_78:
  if (v61 || (v56 & 1) == 0)
  {
    *(unsigned char *)(a1 + v57[277]) |= 4u;
    *(unsigned char *)(a1 + v57[277]) |= 8u;
    goto LABEL_88;
  }
  if (v17)
  {
    while (2)
    {
      while (1)
      {
        int v52 = *v17++;
        int v51 = v52;
        if (v52 == 11) {
          break;
        }
        if (v51 == 15)
        {
          char v53 = 8;
          goto LABEL_87;
        }
        if (!v51) {
          goto LABEL_88;
        }
      }
      char v53 = 4;
LABEL_87:
      *(unsigned char *)(a1 + v57[277]) |= v53;
      continue;
    }
  }
LABEL_88:
  if (v56) {
    unint64_t v3 = *(unsigned char *)(v3 + *v19) == 0;
  }
  else {
    unint64_t v3 = 0;
  }
  if (v61)
  {
    uint64_t v54 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  return v3;
}

BOOL GEOStructuredAddressReadAllFrom(void *a1, void *a2)
{
  unint64_t v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    int v4 = (int *)MEMORY[0x1E4F940E8];
    uint64_t v5 = (int *)MEMORY[0x1E4F940E0];
    double v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
      while (!v3[*v6])
      {
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          BOOL v15 = v9++ >= 9;
          if (v15)
          {
            unint64_t v10 = 0;
            int v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v16 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        int v17 = v10 & 7;
        if (v16 || v17 == 4) {
          break;
        }
        switch((v10 >> 3))
        {
          case 1u:
            uint64_t v19 = PBReaderReadString();
            uint64_t v20 = 9;
            goto LABEL_59;
          case 2u:
            uint64_t v19 = PBReaderReadString();
            uint64_t v20 = 8;
            goto LABEL_59;
          case 3u:
            uint64_t v19 = PBReaderReadString();
            uint64_t v20 = 6;
            goto LABEL_59;
          case 4u:
            uint64_t v19 = PBReaderReadString();
            uint64_t v20 = 5;
            goto LABEL_59;
          case 5u:
            uint64_t v19 = PBReaderReadString();
            uint64_t v20 = 20;
            goto LABEL_59;
          case 6u:
            uint64_t v19 = PBReaderReadString();
            uint64_t v20 = 13;
            goto LABEL_59;
          case 7u:
            uint64_t v19 = PBReaderReadString();
            uint64_t v20 = 17;
            goto LABEL_59;
          case 8u:
            uint64_t v19 = PBReaderReadString();
            uint64_t v20 = 21;
            goto LABEL_59;
          case 9u:
            uint64_t v19 = PBReaderReadString();
            uint64_t v20 = 18;
            goto LABEL_59;
          case 0xAu:
            uint64_t v19 = PBReaderReadString();
            uint64_t v20 = 24;
            goto LABEL_59;
          case 0xBu:
            uint64_t v19 = PBReaderReadString();
            uint64_t v20 = 23;
            goto LABEL_59;
          case 0xCu:
            uint64_t v19 = PBReaderReadString();
            uint64_t v20 = 11;
            goto LABEL_59;
          case 0xDu:
            uint64_t v19 = PBReaderReadString();
            uint64_t v20 = 15;
            goto LABEL_59;
          case 0xEu:
            PBReaderReadString();
            BOOL v28 = (GEOSubPremise *)objc_claimAutoreleasedReturnValue();
            if (v28) {
              [a1 addAreaOfInterest:v28];
            }
            goto LABEL_57;
          case 0xFu:
            uint64_t v19 = PBReaderReadString();
            uint64_t v20 = 12;
            goto LABEL_59;
          case 0x10u:
            uint64_t v19 = PBReaderReadString();
            uint64_t v20 = 14;
            goto LABEL_59;
          case 0x11u:
            PBReaderReadString();
            BOOL v28 = (GEOSubPremise *)objc_claimAutoreleasedReturnValue();
            if (v28) {
              [a1 addDependentLocality:v28];
            }
            goto LABEL_57;
          case 0x12u:
            uint64_t v19 = PBReaderReadString();
            uint64_t v20 = 19;
            goto LABEL_59;
          case 0x13u:
            if ((PBReaderPlaceMark() & 1) == 0) {
              goto LABEL_78;
            }
            BOOL v28 = objc_alloc_init(GEOSubPremise);
            if (!GEOSubPremiseReadAllFrom((uint64_t)v28, v3))
            {

              goto LABEL_78;
            }
            PBReaderRecallMark();
            objc_msgSend(a1, "addSubPremise:", v28, 0, 0);
LABEL_57:

LABEL_60:
            if (*(void *)&v3[*v4] >= *(void *)&v3[*v5]) {
              goto LABEL_76;
            }
            break;
          case 0x14u:
            uint64_t v19 = PBReaderReadString();
            uint64_t v20 = 16;
LABEL_59:
            int v29 = (void *)a1[v20];
            a1[v20] = v19;

            goto LABEL_60;
          default:
            if ((v10 >> 3) == 100)
            {
              if (v17 == 2)
              {
                if (!PBReaderPlaceMark()) {
                  goto LABEL_78;
                }
                while (*(void *)&v3[*v4] < *(void *)&v3[*v5] && !v3[*v6])
                {
                  char v21 = 0;
                  unsigned int v22 = 0;
                  uint64_t v23 = 0;
                  while (1)
                  {
                    uint64_t v24 = *v4;
                    uint64_t v25 = *(void *)&v3[v24];
                    unint64_t v26 = v25 + 1;
                    if (v25 == -1 || v26 > *(void *)&v3[*v5]) {
                      break;
                    }
                    char v27 = *(unsigned char *)(*(void *)&v3[*v7] + v25);
                    *(void *)&v3[v24] = v26;
                    v23 |= (unint64_t)(v27 & 0x7F) << v21;
                    if (v27 < 0)
                    {
                      v21 += 7;
                      BOOL v15 = v22++ >= 9;
                      if (!v15) {
                        continue;
                      }
                    }
                    goto LABEL_34;
                  }
                  v3[*v6] = 1;
LABEL_34:
                  PBRepeatedInt64Add();
                }
                PBReaderRecallMark();
              }
              else
              {
                char v32 = 0;
                unsigned int v33 = 0;
                uint64_t v34 = 0;
                while (1)
                {
                  uint64_t v35 = *v4;
                  uint64_t v36 = *(void *)&v3[v35];
                  unint64_t v37 = v36 + 1;
                  if (v36 == -1 || v37 > *(void *)&v3[*v5]) {
                    break;
                  }
                  char v38 = *(unsigned char *)(*(void *)&v3[*v7] + v36);
                  *(void *)&v3[v35] = v37;
                  v34 |= (unint64_t)(v38 & 0x7F) << v32;
                  if (v38 < 0)
                  {
                    v32 += 7;
                    BOOL v15 = v33++ >= 9;
                    if (!v15) {
                      continue;
                    }
                  }
                  goto LABEL_75;
                }
                v3[*v6] = 1;
LABEL_75:
                PBRepeatedInt64Add();
              }
            }
            else
            {
              if (!a1[1])
              {
                id v30 = objc_alloc_init(MEMORY[0x1E4F940B0]);
                unint64_t v31 = (void *)a1[1];
                a1[1] = v30;
              }
              if (!PBUnknownFieldAdd()) {
                goto LABEL_78;
              }
            }
            goto LABEL_60;
        }
      }
    }
LABEL_76:
    BOOL v39 = v3[*v6] == 0;
  }
  else
  {
LABEL_78:
    BOOL v39 = 0;
  }
  objc_sync_exit(v3);

  return v39;
}

void sub_188E90040(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void addr_obj::AddressObjectBase::toBytes(addr_obj::AddressObjectBase *this@<X0>, std::string *a2@<X8>)
{
  int v4 = (addr_obj::AddressObjectBase *)((char *)this + 136);
  addr_obj::AddressObjectProto::Clear((addr_obj::AddressObjectBase *)((char *)this + 136));
  (*(void (**)(addr_obj::AddressObjectBase *, AddrObjGoogle::protobuf::Message *))(*(void *)this + 304))(this, v4);
  long long v23 = 0uLL;
  std::string::size_type v24 = 0;
  uint64_t v5 = AddrObjGoogle::protobuf::MessageLite::SerializeToString((uint64_t)v4, (uint64_t)&v23);
  if (v5)
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v23;
    a2->__r_.__value_.__r.__words[2] = v24;
    std::string::size_type v24 = 0;
    long long v23 = 0uLL;
  }
  else
  {
    isInitialized = (addr_obj *)addr_obj::Logger::isInitialized((addr_obj::Logger *)v5);
    if (isInitialized)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v20);
      uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"failed SerializeToString() for :", 32);
      AddrObjGoogle::protobuf::Message::ShortDebugString(v4, (uint64_t)__p);
      if ((v19 & 0x80u) == 0) {
        char v8 = __p;
      }
      else {
        char v8 = (void **)__p[0];
      }
      if ((v19 & 0x80u) == 0) {
        uint64_t v9 = v19;
      }
      else {
        uint64_t v9 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
      if ((char)v19 < 0) {
        operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
      std::string::basic_string[abi:ne180100]<0>(v16, "toBytes");
      std::stringbuf::str();
      std::string::basic_string[abi:ne180100]<0>(v12, "");
      addr_obj::Logger::log(16, (uint64_t)__p, 50, (uint64_t)v16, (uint64_t)&v14, (uint64_t)v12);
      if (v13 < 0) {
        operator delete(v12[0]);
      }
      if (v15 < 0) {
        operator delete(v14);
      }
      if (v17 < 0) {
        operator delete(v16[0]);
      }
      if ((char)v19 < 0) {
        operator delete(__p[0]);
      }
      v20[0] = *MEMORY[0x1E4FBA418];
      *(void *)((char *)v20 + *(void *)(v20[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
      v20[1] = MEMORY[0x1E4FBA470] + 16;
      if (v21 < 0) {
        operator delete((void *)v20[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      isInitialized = (addr_obj *)MEMORY[0x18C11F4F0](&v22);
    }
    unint64_t v10 = addr_obj::emptyString(isInitialized);
    if (*((char *)v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v10, *((void *)v10 + 1));
    }
    else
    {
      long long v11 = *v10;
      a2->__r_.__value_.__r.__words[2] = *((void *)v10 + 2);
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v11;
    }
  }
  if (SHIBYTE(v24) < 0) {
    operator delete((void *)v23);
  }
}

void sub_188E90634(void *__p, int a2, int a3, __int16 a4, char a5, char a6, std::string *a7, void *a8, void *__pa, int a10, __int16 a11, char a12, char a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,long long a21,std::string::size_type a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (SHIBYTE(a14) < 0) {
    operator delete(__pa);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (SHIBYTE(a22) < 0) {
    operator delete((void *)a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  std::ostringstream::~ostringstream((uint64_t)&a34);
  uint64_t v41 = __cxa_begin_catch(__p);
  if (a2 == 2)
  {
    uint64_t v42 = v41;
    std::string::basic_string[abi:ne180100]<0>(&a34, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a27, "toBytes");
    std::string::basic_string[abi:ne180100]<0>(&a15, "Exception caught during formatting of the log line: ");
    unint64_t v43 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(void *)v42 + 16))(v42);
    char v44 = std::string::append((std::string *)&a15, v43);
    long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    a22 = v44->__r_.__value_.__r.__words[2];
    a21 = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a34, 50, (uint64_t)&a27, (uint64_t)&a21, (uint64_t)&__pa);
    if (SHIBYTE(a14) < 0) {
      operator delete(__pa);
    }
    if (SHIBYTE(a22) < 0) {
      operator delete((void *)a21);
    }
    if (a20 < 0) {
      operator delete(a15);
    }
    if (a32 < 0) {
      operator delete(a27);
    }
    if (a39 < 0) {
      operator delete(a34);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a34, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a27, "toBytes");
    std::string::basic_string[abi:ne180100]<0>(&a21, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a15, "");
    addr_obj::Logger::log(16, (uint64_t)&a34, 50, (uint64_t)&a27, (uint64_t)&a21, (uint64_t)&a15);
    if (a20 < 0) {
      operator delete(a15);
    }
    if (SHIBYTE(a22) < 0) {
      operator delete((void *)a21);
    }
    if (a32 < 0) {
      operator delete(a27);
    }
    if (a39 < 0) {
      operator delete(a34);
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x188E905E0);
}

void sub_188E90888(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x188E907DCLL);
}

void sub_188E9099C()
{
}

void sub_188E909AC()
{
}

void sub_188E90D4C(void *a1, int a2, uint64_t a3, void *__p, uint64_t a5, int a6, __int16 a7, char a8, char a9, std::string *a10, uint64_t a11, void *__pa, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,long long a25,std::string::size_type a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a17 < 0) {
    operator delete(__pa);
  }
  if (SHIBYTE(a20) < 0) {
    operator delete(a18);
  }
  if (SHIBYTE(a26) < 0) {
    operator delete((void *)a25);
  }
  if (*(char *)(v34 - 49) < 0) {
    operator delete(*(void **)(v34 - 72));
  }
  std::ostringstream::~ostringstream((uint64_t)&a28);
  unint64_t v37 = __cxa_begin_catch(a1);
  if (a2 == v33)
  {
    char v38 = v37;
    std::string::basic_string[abi:ne180100]<0>(&a28, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>((void *)(v34 - 72), "toBytes");
    std::string::basic_string[abi:ne180100]<0>(&a18, "Exception caught during formatting of the log line: ");
    BOOL v39 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(void *)v38 + 16))(v38);
    uint64_t v40 = std::string::append((std::string *)&a18, v39);
    long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
    a26 = v40->__r_.__value_.__r.__words[2];
    a25 = v41;
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a28, 55, v34 - 72, (uint64_t)&a25, (uint64_t)&__pa);
    if (a17 < 0) {
      operator delete(__pa);
    }
    if (SHIBYTE(a26) < 0) {
      operator delete((void *)a25);
    }
    if (SHIBYTE(a20) < 0) {
      operator delete(a18);
    }
    if (*(char *)(v34 - 49) < 0) {
      operator delete(*(void **)(v34 - 72));
    }
    if (a33 < 0) {
LABEL_27:
    }
      operator delete(a28);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a28, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>((void *)(v34 - 72), "toBytes");
    std::string::basic_string[abi:ne180100]<0>(&a25, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a18, "");
    addr_obj::Logger::log(16, (uint64_t)&a28, 55, v34 - 72, (uint64_t)&a25, (uint64_t)&a18);
    if (SHIBYTE(a20) < 0) {
      operator delete(a18);
    }
    if (SHIBYTE(a26) < 0) {
      operator delete((void *)a25);
    }
    if (*(char *)(v34 - 49) < 0) {
      operator delete(*(void **)(v34 - 72));
    }
    if (a33 < 0) {
      goto LABEL_27;
    }
  }
  __cxa_end_catch();
  __cxa_rethrow();
}

void sub_188E90EB4()
{
}

void sub_188E91074(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (*(char *)(v37 - 49) < 0) {
    operator delete(*(void **)(v37 - 72));
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x188E91180);
}

void sub_188E91164()
{
}

void sub_188E91190()
{
}

void sub_188E91354(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (*(char *)(v37 - 49) < 0) {
    operator delete(*(void **)(v37 - 72));
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x188E91460);
}

void sub_188E91444()
{
}

void sub_188E9146C()
{
}

uint64_t _MapItemPlaceTypeForPlaceType(int a1)
{
  if (a1 <= 15)
  {
    if (a1 == 4) {
      unsigned int v3 = 3;
    }
    else {
      unsigned int v3 = 0;
    }
    if (a1 == 2) {
      unsigned int v3 = 2;
    }
    if (a1 == 1) {
      return 1;
    }
    else {
      return v3;
    }
  }
  else
  {
    int v1 = a1 - 35;
    uint64_t result = 0;
    switch(v1)
    {
      case 0:
        uint64_t result = 5;
        break;
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 17:
      case 18:
      case 21:
      case 23:
      case 24:
      case 25:
        return result;
      case 8:
        uint64_t result = 6;
        break;
      case 9:
        uint64_t result = 7;
        break;
      case 10:
        uint64_t result = 8;
        break;
      case 11:
        uint64_t result = 9;
        break;
      case 12:
        uint64_t result = 10;
        break;
      case 13:
        uint64_t result = 11;
        break;
      case 14:
        uint64_t result = 12;
        break;
      case 15:
        uint64_t result = 13;
        break;
      case 16:
        uint64_t result = 14;
        break;
      case 19:
        uint64_t result = 15;
        break;
      case 20:
        uint64_t result = 16;
        break;
      case 22:
        uint64_t result = 17;
        break;
      case 26:
        uint64_t result = 18;
        break;
      default:
        uint64_t result = 0;
        break;
    }
  }
  return result;
}

uint64_t _PDPlaceTypeForMapItemPlaceType(int a1)
{
  if ((a1 - 1) > 0x13) {
    return 0;
  }
  else {
    return dword_18A639AC0[a1 - 1];
  }
}

void sub_188E91D20(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E92578(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E928A4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id GEOGetNetEventFileManagerLog()
{
  if (qword_1EB29F5F8 != -1) {
    dispatch_once(&qword_1EB29F5F8, &__block_literal_global_52_0);
  }
  uint64_t v0 = (void *)qword_1EB29F5F0;

  return v0;
}

id GEOGetAnalyticDataFileLog()
{
  if (qword_1EB29FF38 != -1) {
    dispatch_once(&qword_1EB29FF38, &__block_literal_global_128);
  }
  uint64_t v0 = (void *)_MergedGlobals_271;

  return v0;
}

void sub_188E940EC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E94884(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E94950(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E95220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t GEOPDPlaceRequestParametersHasSensitiveFields(id *a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  -[GEOPDPlaceRequestParameters searchParameters](a1);
  int v4 = (id *)objc_claimAutoreleasedReturnValue();
  if (GEOPDSearchParametersHasSensitiveFields(v4, a2))
  {
    uint64_t HasSensitiveFields = 1;
  }
  else
  {
    -[GEOPDPlaceRequestParameters reverseGeocodingParameters](a1);
    double v6 = (id *)objc_claimAutoreleasedReturnValue();
    if (GEOPDReverseGeocodingParametersHasSensitiveFields(v6))
    {
      uint64_t HasSensitiveFields = 1;
    }
    else
    {
      uint64_t v7 = -[GEOPDPlaceRequestParameters merchantLookupParameters](a1);
      if (GEOPDMerchantLookupParametersHasSensitiveFields(v7))
      {
        uint64_t HasSensitiveFields = 1;
      }
      else
      {
        char v8 = -[GEOPDPlaceRequestParameters autocompleteParameters](a1);
        if (GEOPDAutocompleteParametersHasSensitiveFields(v8, a2))
        {
          uint64_t HasSensitiveFields = 1;
        }
        else
        {
          -[GEOPDPlaceRequestParameters externalTransitLookupParameters](a1);
          uint64_t v9 = (id *)objc_claimAutoreleasedReturnValue();
          if (GEOPDExternalTransitLookupParametersHasSensitiveFields(v9))
          {
            uint64_t HasSensitiveFields = 1;
          }
          else
          {
            -[GEOPDPlaceRequestParameters batchReverseGeocodingParameters](a1);
            unint64_t v10 = (id *)objc_claimAutoreleasedReturnValue();
            if (GEOPDBatchReverseGeocodingParametersHasSensitiveFields(v10))
            {
              uint64_t HasSensitiveFields = 1;
            }
            else
            {
              long long v11 = -[GEOPDPlaceRequestParameters wifiFingerprintParameters](a1);
              if (GEOPDWifiFingerprintParametersHasSensitiveFields((uint64_t)v11))
              {
                uint64_t HasSensitiveFields = 1;
              }
              else
              {
                uint64_t v12 = -[GEOPDPlaceRequestParameters groundViewLabelParameters](a1);
                if (GEOPDGroundViewLabelParametersHasSensitiveFields((uint64_t)v12))
                {
                  uint64_t HasSensitiveFields = 1;
                }
                else
                {
                  -[GEOPDPlaceRequestParameters transitNearbyScheduleLookupParameters](a1);
                  char v15 = (id *)objc_claimAutoreleasedReturnValue();
                  if (GEOPDTransitNearbyScheduleLookupParametersHasSensitiveFields(v15))
                  {
                    uint64_t HasSensitiveFields = 1;
                  }
                  else
                  {
                    char v13 = -[GEOPDPlaceRequestParameters transitNearbyPaymentMethodLookupParameters](a1);
                    uint64_t HasSensitiveFields = GEOPDTransitNearbyPaymentMethodLookupParametersHasSensitiveFields((uint64_t)v13);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return HasSensitiveFields;
}

id *GEOPDSearchParametersHasSensitiveFields(id *result, uint64_t a2)
{
  if (result)
  {
    unsigned int v3 = -[GEOPDSearchParameters suggestionEntry](result);
    int v4 = GEOPDAutocompleteEntryHasSensitiveFields(v3, a2);

    return (id *)v4;
  }
  return result;
}

uint64_t GEOPDReverseGeocodingParametersHasSensitiveFields(id *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  int v1 = -[GEOPDReverseGeocodingParameters extendedLocations](a1);
  uint64_t v2 = [v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v9;
    while (2)
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v9 != v4) {
          objc_enumerationMutation(v1);
        }
        if (GEOLocationHasSensitiveFields(*(void *)(*((void *)&v8 + 1) + 8 * v5)))
        {
          uint64_t v6 = 1;
          goto LABEL_12;
        }
        ++v5;
      }
      while (v3 != v5);
      uint64_t v3 = [v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v3) {
        continue;
      }
      break;
    }
  }
  uint64_t v6 = 0;
LABEL_12:

  return v6;
}

void GEOPDPlaceRequestParametersClearSensitiveFields(uint64_t a1, uint64_t a2, int a3)
{
  if (a1) {
    int v5 = a3;
  }
  else {
    int v5 = 0;
  }
  if (v5 == 1
    && (-[GEOPDPlaceRequestParameters _readSearchParameters](a1), *(void *)(a1 + 376))
    && (-[GEOPDPlaceRequestParameters searchParameters]((id *)a1),
        uint64_t v6 = (id *)objc_claimAutoreleasedReturnValue(),
        unsigned int v7 = GEOPDSearchParametersHasSensitiveFields(v6, a2),
        v6,
        v7))
  {
    long long v8 = -[GEOPDPlaceRequestParameters searchParameters]((id *)a1);
    long long v9 = (void *)[v8 copy];

    GEOPDSearchParametersClearSensitiveFields((uint64_t)v9, a2, 0);
    -[GEOPDPlaceRequestParameters setSearchParameters:](a1, v9);
  }
  else
  {
    uint64_t v10 = -[GEOPDPlaceRequestParameters searchParameters]((id *)a1);
    long long v11 = (void *)v10;
    if (v10) {
      GEOPDSearchParametersClearSensitiveFields(v10, a2, 1);
    }

    if (!v5) {
      goto LABEL_17;
    }
  }
  -[GEOPDPlaceRequestParameters _readReverseGeocodingParameters](a1);
  if (*(void *)(a1 + 352))
  {
    -[GEOPDPlaceRequestParameters reverseGeocodingParameters]((id *)a1);
    uint64_t v12 = (id *)objc_claimAutoreleasedReturnValue();
    int HasSensitiveFields = GEOPDReverseGeocodingParametersHasSensitiveFields(v12);

    if (HasSensitiveFields)
    {
      char v14 = -[GEOPDPlaceRequestParameters reverseGeocodingParameters]((id *)a1);
      char v15 = (void *)[v14 copy];

      GEOPDReverseGeocodingParametersClearSensitiveFields((uint64_t)v15, a2, 0);
      -[GEOPDPlaceRequestParameters setReverseGeocodingParameters:](a1, v15);

      goto LABEL_14;
    }
  }
LABEL_17:
  uint64_t v20 = -[GEOPDPlaceRequestParameters reverseGeocodingParameters]((id *)a1);
  char v21 = (void *)v20;
  if (v20) {
    GEOPDReverseGeocodingParametersClearSensitiveFields(v20, a2, 1);
  }

  if (!v5)
  {
    uint64_t v22 = -[GEOPDPlaceRequestParameters merchantLookupParameters]((id *)a1);
    [v22 clearSensitiveFields:a2];

    goto LABEL_21;
  }
LABEL_14:
  -[GEOPDPlaceRequestParameters _readMerchantLookupParameters](a1);
  if (*(void *)(a1 + 248)
    && (-[GEOPDPlaceRequestParameters merchantLookupParameters]((id *)a1),
        int v16 = objc_claimAutoreleasedReturnValue(),
        int v17 = GEOPDMerchantLookupParametersHasSensitiveFields(v16),
        v16,
        v17))
  {
    uint64_t v18 = -[GEOPDPlaceRequestParameters merchantLookupParameters]((id *)a1);
    unsigned __int8 v19 = (void *)[v18 copy];

    GEOPDMerchantLookupParametersClearSensitiveFields(v19, a2, 0);
    -[GEOPDPlaceRequestParameters setMerchantLookupParameters:](a1, v19);
  }
  else
  {
    unsigned __int8 v19 = -[GEOPDPlaceRequestParameters merchantLookupParameters]((id *)a1);
    [v19 clearSensitiveFields:a2];
  }

  -[GEOPDPlaceRequestParameters _readAutocompleteParameters](a1);
  if (*(void *)(a1 + 64))
  {
    uint64_t v35 = -[GEOPDPlaceRequestParameters autocompleteParameters]((id *)a1);
    unsigned int v36 = GEOPDAutocompleteParametersHasSensitiveFields(v35, a2);

    if (v36)
    {
      uint64_t v37 = -[GEOPDPlaceRequestParameters autocompleteParameters]((id *)a1);
      char v38 = (void *)[v37 copy];

      BOOL v39 = [v38 allEntriesWithBrowse];
      [v39 clearSensitiveFields:a2];

      -[GEOPDPlaceRequestParameters setAutocompleteParameters:](a1, v38);
      goto LABEL_46;
    }
  }
LABEL_21:
  long long v23 = -[GEOPDPlaceRequestParameters autocompleteParameters]((id *)a1);
  [v23 clearSensitiveFields:a2];

  if (!v5) {
    goto LABEL_22;
  }
LABEL_46:
  -[GEOPDPlaceRequestParameters _readExternalTransitLookupParameters](a1);
  if (!*(void *)(a1 + 168)
    || (-[GEOPDPlaceRequestParameters externalTransitLookupParameters]((id *)a1),
        uint64_t v40 = (id *)objc_claimAutoreleasedReturnValue(),
        unsigned int v41 = GEOPDExternalTransitLookupParametersHasSensitiveFields(v40),
        v40,
        !v41))
  {
LABEL_22:
    uint64_t v24 = -[GEOPDPlaceRequestParameters externalTransitLookupParameters]((id *)a1);
    uint64_t v25 = (void *)v24;
    if (v24) {
      GEOPDExternalTransitLookupParametersClearSensitiveFields(v24, a2, 1);
    }

    if (!v5) {
      goto LABEL_25;
    }
    goto LABEL_49;
  }
  uint64_t v42 = -[GEOPDPlaceRequestParameters externalTransitLookupParameters]((id *)a1);
  unint64_t v43 = (void *)[v42 copy];

  GEOPDExternalTransitLookupParametersClearSensitiveFields((uint64_t)v43, a2, 0);
  -[GEOPDPlaceRequestParameters setExternalTransitLookupParameters:](a1, v43);

LABEL_49:
  -[GEOPDPlaceRequestParameters _readBatchReverseGeocodingParameters](a1);
  if (*(void *)(a1 + 96))
  {
    -[GEOPDPlaceRequestParameters batchReverseGeocodingParameters]((id *)a1);
    char v44 = (id *)objc_claimAutoreleasedReturnValue();
    int v45 = GEOPDBatchReverseGeocodingParametersHasSensitiveFields(v44);

    if (v45)
    {
      uint64_t v46 = -[GEOPDPlaceRequestParameters batchReverseGeocodingParameters]((id *)a1);
      id v47 = (void *)[v46 copy];

      GEOPDBatchReverseGeocodingParametersClearSensitiveFields((uint64_t)v47, a2, 0);
      -[GEOPDPlaceRequestParameters setBatchReverseGeocodingParameters:](a1, v47);

      goto LABEL_52;
    }
  }
LABEL_25:
  uint64_t v26 = -[GEOPDPlaceRequestParameters batchReverseGeocodingParameters]((id *)a1);
  char v27 = (void *)v26;
  if (v26) {
    GEOPDBatchReverseGeocodingParametersClearSensitiveFields(v26, a2, 1);
  }

  if (!v5)
  {
LABEL_28:
    uint64_t v28 = -[GEOPDPlaceRequestParameters wifiFingerprintParameters]((id *)a1);
    int v29 = (void *)v28;
    if (v28) {
      GEOPDWifiFingerprintParametersClearSensitiveFields(v28, a2, 1);
    }

    if (!v5) {
      goto LABEL_31;
    }
    goto LABEL_55;
  }
LABEL_52:
  -[GEOPDPlaceRequestParameters _readWifiFingerprintParameters](a1);
  if (!*(void *)(a1 + 456)) {
    goto LABEL_28;
  }
  uint64_t v48 = -[GEOPDPlaceRequestParameters wifiFingerprintParameters]((id *)a1);
  int v49 = GEOPDWifiFingerprintParametersHasSensitiveFields((uint64_t)v48);

  if (!v49) {
    goto LABEL_28;
  }
  char v50 = -[GEOPDPlaceRequestParameters wifiFingerprintParameters]((id *)a1);
  int v51 = (void *)[v50 copy];

  GEOPDWifiFingerprintParametersClearSensitiveFields((uint64_t)v51, a2, 0);
  -[GEOPDPlaceRequestParameters setWifiFingerprintParameters:](a1, v51);

LABEL_55:
  -[GEOPDPlaceRequestParameters _readGroundViewLabelParameters](a1);
  if (*(void *)(a1 + 192))
  {
    int v52 = -[GEOPDPlaceRequestParameters groundViewLabelParameters]((id *)a1);
    int v53 = GEOPDGroundViewLabelParametersHasSensitiveFields((uint64_t)v52);

    if (v53)
    {
      uint64_t v54 = -[GEOPDPlaceRequestParameters groundViewLabelParameters]((id *)a1);
      unint64_t v55 = (void *)[v54 copy];

      GEOPDGroundViewLabelParametersClearSensitiveFields((uint64_t)v55, a2, 0);
      -[GEOPDPlaceRequestParameters setGroundViewLabelParameters:](a1, v55);

      goto LABEL_58;
    }
  }
LABEL_31:
  uint64_t v30 = -[GEOPDPlaceRequestParameters groundViewLabelParameters]((id *)a1);
  unint64_t v31 = (void *)v30;
  if (v30) {
    GEOPDGroundViewLabelParametersClearSensitiveFields(v30, a2, 1);
  }

  if (!v5)
  {
LABEL_34:
    uint64_t v32 = -[GEOPDPlaceRequestParameters transitNearbyScheduleLookupParameters]((id *)a1);
    int v33 = (void *)v32;
    if (v32) {
      GEOPDTransitNearbyScheduleLookupParametersClearSensitiveFields(v32, a2, 1);
    }

    if (!v5) {
      goto LABEL_37;
    }
    goto LABEL_61;
  }
LABEL_58:
  -[GEOPDPlaceRequestParameters _readTransitNearbyScheduleLookupParameters](a1);
  if (!*(void *)(a1 + 424)) {
    goto LABEL_34;
  }
  -[GEOPDPlaceRequestParameters transitNearbyScheduleLookupParameters]((id *)a1);
  int v56 = (id *)objc_claimAutoreleasedReturnValue();
  int v57 = GEOPDTransitNearbyScheduleLookupParametersHasSensitiveFields(v56);

  if (!v57) {
    goto LABEL_34;
  }
  char v58 = -[GEOPDPlaceRequestParameters transitNearbyScheduleLookupParameters]((id *)a1);
  char v59 = (void *)[v58 copy];

  GEOPDTransitNearbyScheduleLookupParametersClearSensitiveFields((uint64_t)v59, a2, 0);
  -[GEOPDPlaceRequestParameters setTransitNearbyScheduleLookupParameters:](a1, v59);

LABEL_61:
  -[GEOPDPlaceRequestParameters _readTransitNearbyPaymentMethodLookupParameters](a1);
  if (*(void *)(a1 + 416))
  {
    char v60 = -[GEOPDPlaceRequestParameters transitNearbyPaymentMethodLookupParameters]((id *)a1);
    int v61 = GEOPDTransitNearbyPaymentMethodLookupParametersHasSensitiveFields((uint64_t)v60);

    if (v61)
    {
      uint64_t v62 = -[GEOPDPlaceRequestParameters transitNearbyPaymentMethodLookupParameters]((id *)a1);
      id v63 = (id)[v62 copy];

      GEOPDTransitNearbyPaymentMethodLookupParametersClearSensitiveFields((uint64_t)v63, a2, 0);
      -[GEOPDPlaceRequestParameters setTransitNearbyPaymentMethodLookupParameters:](a1, v63);
      goto LABEL_39;
    }
  }
LABEL_37:
  uint64_t v34 = -[GEOPDPlaceRequestParameters transitNearbyPaymentMethodLookupParameters]((id *)a1);
  if (v34)
  {
    id v63 = (id)v34;
    GEOPDTransitNearbyPaymentMethodLookupParametersClearSensitiveFields(v34, a2, 1);
  }
  else
  {
    id v63 = 0;
  }
LABEL_39:
}

void sub_188E95E4C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E95F60(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E96074(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E96188(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E9629C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E963B0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E964C4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E965D8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E966EC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E967FC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDReverseGeocodingParametersClearSensitiveFields(uint64_t a1, uint64_t a2, int a3)
{
  -[GEOPDReverseGeocodingParameters _readExtendedLocations](a1);
  unint64_t result = [*(id *)(a1 + 24) count];
  if (result)
  {
    for (unint64_t i = 0; i < result; ++i)
    {
      uint64_t v8 = [*(id *)(a1 + 24) objectAtIndexedSubscript:i];
      long long v9 = (void *)v8;
      if (a3 && GEOLocationHasSensitiveFields(v8))
      {
        uint64_t v10 = (_DWORD *)[v9 copy];
        GEOLocationClearSensitiveFields(v10);
        [*(id *)(a1 + 24) replaceObjectAtIndex:i withObject:v10];
      }
      else
      {
        [v9 clearSensitiveFields:a2];
      }

      unint64_t result = [*(id *)(a1 + 24) count];
    }
  }
  return result;
}

uint64_t GEOLocationClearSensitiveFields(_DWORD *a1)
{
  int v2 = a1[45];
  if ((v2 & 0x20) != 0)
  {
    a1[45] = v2 | 0x2000000;
    a1[45] &= ~0x20u;
    int v2 = a1[45];
    if ((v2 & 0x80000) == 0)
    {
LABEL_3:
      if ((v2 & 0x100000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((v2 & 0x80000) == 0)
  {
    goto LABEL_3;
  }
  a1[45] = v2 | 0x2000000;
  a1[45] &= ~0x80000u;
  int v2 = a1[45];
  if ((v2 & 0x100000) == 0)
  {
LABEL_4:
    if ((v2 & 0x100) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  a1[45] = v2 | 0x2000000;
  a1[45] &= ~0x100000u;
  int v2 = a1[45];
  if ((v2 & 0x100) == 0)
  {
LABEL_5:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_17:
  a1[45] = v2 | 0x2000000;
  a1[45] &= ~0x100u;
  int v2 = a1[45];
  if ((v2 & 0x8000) != 0)
  {
LABEL_6:
    a1[45] = v2 | 0x2000000;
    a1[45] &= ~0x8000u;
  }
LABEL_7:
  uint64_t result = [a1 setRawCoordinate:0];
  int v4 = a1[45];
  if ((v4 & 0x10) != 0)
  {
    a1[45] = v4 | 0x2000000;
    a1[45] &= ~0x10u;
    int v4 = a1[45];
    if ((v4 & 0x4000) == 0)
    {
LABEL_9:
      if ((v4 & 0x1000) == 0) {
        goto LABEL_10;
      }
      goto LABEL_21;
    }
  }
  else if ((v4 & 0x4000) == 0)
  {
    goto LABEL_9;
  }
  a1[45] = v4 | 0x2000000;
  a1[45] &= ~0x4000u;
  int v4 = a1[45];
  if ((v4 & 0x1000) == 0)
  {
LABEL_10:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
LABEL_21:
  a1[45] = v4 | 0x2000000;
  a1[45] &= ~0x1000u;
  int v4 = a1[45];
  if ((v4 & 0x10000) == 0)
  {
LABEL_11:
    if ((v4 & 0x20000) == 0) {
      return result;
    }
    goto LABEL_12;
  }
LABEL_22:
  a1[45] = v4 | 0x2000000;
  a1[45] &= ~0x10000u;
  int v4 = a1[45];
  if ((v4 & 0x20000) == 0) {
    return result;
  }
LABEL_12:
  a1[45] = v4 | 0x2000000;
  a1[45] &= ~0x20000u;
  return result;
}

void GEOLogMsgEventClearSensitiveFields(id *a1, uint64_t a2, int a3)
{
  -[GEOLogMsgEvent _readLogMsgStates]((uint64_t)a1);
  if ([a1[22] count])
  {
    unint64_t v6 = 0;
    do
    {
      unsigned int v7 = [a1[22] objectAtIndexedSubscript:v6];
      uint64_t v8 = v7;
      if (a3 && GEOLogMsgStateHasSensitiveFields(v7, a2))
      {
        long long v9 = (void *)[v8 copy];
        GEOLogMsgStateClearSensitiveFields(v9, a2, 0);
        [a1[22] replaceObjectAtIndex:v6 withObject:v9];
      }
      else
      {
        [v8 clearSensitiveFields:a2];
      }

      ++v6;
    }
    while (v6 < [a1[22] count]);
  }
  if (a3)
  {
    if ([a1 hasDirectionsEvent]
      && ([a1 directionsEvent],
          uint64_t v10 = objc_claimAutoreleasedReturnValue(),
          int HasSensitiveFields = GEOLogMsgEventDirectionsHasSensitiveFields(v10),
          v10,
          HasSensitiveFields))
    {
      uint64_t v12 = [a1 directionsEvent];
      uint64_t v13 = (void *)[v12 copy];

      GEOLogMsgEventDirectionsClearSensitiveFields(v13, a2, 0);
      [a1 setDirectionsEvent:v13];
    }
    else
    {
      uint64_t v13 = [a1 directionsEvent];
      [v13 clearSensitiveFields:a2];
    }

    if ([a1 hasWifiConnectionQualityProbeEvent])
    {
      char v15 = [a1 wifiConnectionQualityProbeEvent];
      unsigned int v16 = GEOLogMsgEventWifiConnectionQualityProbeHasSensitiveFields(v15);

      if (v16)
      {
        int v17 = [a1 wifiConnectionQualityProbeEvent];
        id v19 = (id)[v17 copy];

        uint64_t v18 = [v19 wifiConnectionQuality];
        [v18 clearSensitiveFields:a2];

        [a1 setWifiConnectionQualityProbeEvent:v19];
        goto LABEL_18;
      }
    }
  }
  else
  {
    char v14 = [a1 directionsEvent];
    [v14 clearSensitiveFields:a2];
  }
  id v19 = [a1 wifiConnectionQualityProbeEvent];
  [v19 clearSensitiveFields:a2];
LABEL_18:
}

uint64_t GEOLogMsgStateHasSensitiveFields(void *a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  int v4 = [a1 placeRequest];
  if (GEOLogMsgStatePlaceRequestHasSensitiveFields(v4, a2))
  {
    uint64_t v5 = 1;
  }
  else
  {
    unint64_t v6 = [a1 lookAroundView];
    uint64_t v5 = (uint64_t)GEOLogMsgStateLookAroundViewHasSensitiveFields(v6);
  }
  return v5;
}

void *GEOLogMsgStatePlaceRequestHasSensitiveFields(void *result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = [result placeDataRequest];
    uint64_t HasSensitiveFields = GEOPDPlaceRequestHasSensitiveFields(v3, a2);

    return (void *)HasSensitiveFields;
  }
  return result;
}

void *GEOLogMsgStateLookAroundViewHasSensitiveFields(void *result)
{
  if (result)
  {
    int v1 = [result location];
    uint64_t HasSensitiveFields = GEOLocationHasSensitiveFields((uint64_t)v1);

    return (void *)HasSensitiveFields;
  }
  return result;
}

void GEOLogMsgStateClearSensitiveFields(void *a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if ([a1 hasPlaceRequest]
      && ([a1 placeRequest],
          uint64_t v5 = objc_claimAutoreleasedReturnValue(),
          unsigned int v6 = GEOLogMsgStatePlaceRequestHasSensitiveFields(v5, a2),
          v5,
          v6))
    {
      unsigned int v7 = [a1 placeRequest];
      uint64_t v8 = (void *)[v7 copy];

      long long v9 = [v8 placeDataRequest];
      [v9 clearSensitiveFields:a2];

      [a1 setPlaceRequest:v8];
    }
    else
    {
      uint64_t v8 = [a1 placeRequest];
      [v8 clearSensitiveFields:a2];
    }

    if ([a1 hasLookAroundView])
    {
      long long v11 = [a1 lookAroundView];
      unsigned int v12 = GEOLogMsgStateLookAroundViewHasSensitiveFields(v11);

      if (v12)
      {
        uint64_t v13 = [a1 lookAroundView];
        id v15 = (id)[v13 copy];

        char v14 = [v15 location];
        [v14 clearSensitiveFields:a2];

        [a1 setLookAroundView:v15];
        goto LABEL_11;
      }
    }
  }
  else
  {
    uint64_t v10 = [a1 placeRequest];
    [v10 clearSensitiveFields:a2];
  }
  id v15 = [a1 lookAroundView];
  [v15 clearSensitiveFields:a2];
LABEL_11:
}

void sub_188E970B8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E971C8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E973D8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E975A4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E976E8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOPDWifiFingerprintParametersHasSensitiveFields(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v1 = *(id *)(a1 + 16);
  uint64_t v2 = [v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v9;
    while (2)
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v9 != v4) {
          objc_enumerationMutation(v1);
        }
        if (GEOPDWifiMeasurementHasSensitiveFields(*(id **)(*((void *)&v8 + 1) + 8 * v5)))
        {
          uint64_t v6 = 1;
          goto LABEL_12;
        }
        ++v5;
      }
      while (v3 != v5);
      uint64_t v3 = [v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v3) {
        continue;
      }
      break;
    }
  }
  uint64_t v6 = 0;
LABEL_12:

  return v6;
}

uint64_t GEOPDTransitNearbyScheduleLookupParametersHasSensitiveFields(id *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  uint64_t v2 = -[GEOPDTransitNearbyScheduleLookupParameters userLocation](a1);
  unsigned __int8 v3 = GEOWaypointTypedHasSensitiveFields(v2);

  if (v3) {
    return 1;
  }
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v5 = -[GEOPDTransitNearbyScheduleLookupParameters transitNearbyScheduleLookupOrigins](a1);
  uint64_t v6 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v12;
    while (2)
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v12 != v8) {
          objc_enumerationMutation(v5);
        }
        if ((GEOPDTransitNearbyScheduleLookupOriginHasSensitiveFields(*(void ***)(*((void *)&v11 + 1)
                                                                                                  + 8 * v9)) & 1) != 0)
        {
          uint64_t v4 = 1;
          goto LABEL_15;
        }
        ++v9;
      }
      while (v7 != v9);
      uint64_t v7 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
      if (v7) {
        continue;
      }
      break;
    }
  }
  uint64_t v4 = 0;
LABEL_15:

  return v4;
}

uint64_t GEOPDTransitNearbyPaymentMethodLookupParametersHasSensitiveFields(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v1 = *(id *)(a1 + 16);
  uint64_t v2 = [v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v9;
    while (2)
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v9 != v4) {
          objc_enumerationMutation(v1);
        }
        if (GEOPDTransitNearbyPaymentMethodLookupOriginHasSensitiveFields(*(void ***)(*((void *)&v8 + 1) + 8 * v5)))
        {
          uint64_t v6 = 1;
          goto LABEL_12;
        }
        ++v5;
      }
      while (v3 != v5);
      uint64_t v3 = [v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v3) {
        continue;
      }
      break;
    }
  }
  uint64_t v6 = 0;
LABEL_12:

  return v6;
}

uint64_t GEOPDMerchantLookupParametersHasSensitiveFields(void *a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = [a1 transactionLocation];
  if (GEOLocationHasSensitiveFields((uint64_t)v2))
  {
    uint64_t HasSensitiveFields = 1;
  }
  else
  {
    uint64_t v4 = [a1 bankTransactionInformation];
    uint64_t HasSensitiveFields = GEOPDBankTransactionInformationHasSensitiveFields(v4);
  }
  return HasSensitiveFields;
}

uint64_t GEOPDGroundViewLabelParametersHasSensitiveFields(uint64_t result)
{
  if (result) {
    return GEOLocationHasSensitiveFields(*(void *)(result + 24));
  }
  return result;
}

id *GEOPDExternalTransitLookupParametersHasSensitiveFields(id *result)
{
  if (result)
  {
    id v1 = -[GEOPDExternalTransitLookupParameters transactionLocation](result);
    uint64_t HasSensitiveFields = GEOLocationHasSensitiveFields((uint64_t)v1);

    return (id *)HasSensitiveFields;
  }
  return result;
}

uint64_t GEOPDBatchReverseGeocodingParametersHasSensitiveFields(id *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v1 = -[GEOPDBatchReverseGeocodingParameters assetLocations](a1);
  uint64_t v2 = [v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v9;
    while (2)
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v9 != v4) {
          objc_enumerationMutation(v1);
        }
        if (GEOLocationHasSensitiveFields(*(void *)(*((void *)&v8 + 1) + 8 * v5)))
        {
          uint64_t v6 = 1;
          goto LABEL_12;
        }
        ++v5;
      }
      while (v3 != v5);
      uint64_t v3 = [v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v3) {
        continue;
      }
      break;
    }
  }
  uint64_t v6 = 0;
LABEL_12:

  return v6;
}

void *GEOPDAutocompleteParametersHasSensitiveFields(void *result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = [result allEntriesWithBrowse];
    uint64_t HasSensitiveFields = GEOPDAutocompleteParametersAllEntriesWithBrowseHasSensitiveFields(v3, a2);

    return (void *)HasSensitiveFields;
  }
  return result;
}

void sub_188E97E98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

BOOL GEOModalityIsValid(char *a1)
{
  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  uint64_t v2 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          uint64_t v14 = *v4;
          int v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      uint64_t v14 = *v4;
      int v15 = a1[v14];
      if (a1[v14]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v16 = v8 & 7;
      if (v15 || v16 == 4) {
        break;
      }
      switch((v8 >> 3))
      {
        case 1u:
          if (v16 != 1) {
            goto LABEL_54;
          }
          uint64_t v18 = *v2;
          unint64_t v19 = *(void *)&a1[v18];
          if (v19 > 0xFFFFFFFFFFFFFFF7) {
            goto LABEL_50;
          }
          unint64_t v20 = v19 + 8;
          if (v20 > *(void *)&a1[*v3]) {
            goto LABEL_50;
          }
          *(void *)&a1[v18] = v20;
          continue;
        case 2u:
          if ((v8 & 7) != 0) {
            goto LABEL_54;
          }
          unsigned int v21 = 0;
          while (1)
          {
            uint64_t v22 = *v2;
            uint64_t v23 = *(void *)&a1[v22];
            unint64_t v24 = v23 + 1;
            if (v23 == -1 || v24 > *(void *)&a1[*v3]) {
              goto LABEL_49;
            }
            int v25 = *(char *)(*(void *)&a1[*v5] + v23);
            *(void *)&a1[v22] = v24;
            if (v25 < 0)
            {
              BOOL v26 = v21++ > 8;
              if (!v26) {
                continue;
              }
            }
            goto LABEL_51;
          }
        case 3u:
          if ((v8 & 7) != 0) {
            goto LABEL_54;
          }
          unsigned int v27 = 0;
          while (1)
          {
            uint64_t v28 = *v2;
            uint64_t v29 = *(void *)&a1[v28];
            unint64_t v30 = v29 + 1;
            if (v29 == -1 || v30 > *(void *)&a1[*v3]) {
              goto LABEL_49;
            }
            int v31 = *(char *)(*(void *)&a1[*v5] + v29);
            *(void *)&a1[v28] = v30;
            if (v31 < 0)
            {
              BOOL v26 = v27++ > 8;
              if (!v26) {
                continue;
              }
            }
            goto LABEL_51;
          }
        case 4u:
          if ((v8 & 7) != 0) {
            goto LABEL_54;
          }
          unsigned int v32 = 0;
          break;
        default:
          if (PBReaderSkipValueWithTag()) {
            continue;
          }
LABEL_54:
          BOOL v37 = 0;
          goto LABEL_53;
      }
      while (1)
      {
        uint64_t v33 = *v2;
        uint64_t v34 = *(void *)&a1[v33];
        unint64_t v35 = v34 + 1;
        if (v34 == -1 || v35 > *(void *)&a1[*v3]) {
          break;
        }
        int v36 = *(char *)(*(void *)&a1[*v5] + v34);
        *(void *)&a1[v33] = v35;
        if (v36 < 0)
        {
          BOOL v26 = v32++ > 8;
          if (!v26) {
            continue;
          }
        }
        goto LABEL_51;
      }
LABEL_49:
      uint64_t v14 = *v4;
LABEL_50:
      a1[v14] = 1;
LABEL_51:
      ;
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v37 = a1[*v4] == 0;
LABEL_53:
  PBReaderRecallMark();
  return v37;
}

void sub_188E98278(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188E983E8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDContainmentPlaceReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 44))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOPDContainmentPlaceReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = [v8 position];
  *(_DWORD *)(a1 + 44) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOPDContainmentPlaceReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOPDContainmentPlaceReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOPDContainmentPlaceReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
  {
    [*(id *)(a1 + 24) readAll:1];
    [*(id *)(a1 + 32) readAll:1];
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_188E985A0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDContainmentPlaceReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  char v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 44);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 40)];
  char v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  int v12 = ((*(unsigned __int8 *)(a1 + 52) >> 2) & 1)
      + (*(unsigned char *)(a1 + 52) & 1)
      + ((*(unsigned __int8 *)(a1 + 52) >> 1) & 1);
  while (2)
  {
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    switch(a3[v8])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        char v7 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v16 = v12 != 0;
        char v17 = v16 & ~(_BYTE)v11 | v9;
        unsigned __int8 v18 = v16 | v11;
        char v54 = v17;
        char v55 = v18 | v17;
        if ((v18 | v7)) {
          unint64_t v19 = 0;
        }
        else {
          unint64_t v19 = a3;
        }
        unint64_t v20 = (int *)MEMORY[0x1E4F940E8];
        char v56 = (v19 == 0) | v18;
        BOOL v57 = v18;
        unsigned int v21 = (int *)MEMORY[0x1E4F940C8];
        uint64_t v22 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v12;
LABEL_7:
        uint64_t v13 = v9;
LABEL_8:
        uint64_t v14 = v10;
        uint64_t v15 = v11;
LABEL_10:
        ++v8;
        uint64_t v9 = v13;
        uint64_t v10 = v14;
        uint64_t v11 = v15;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(void *)(v3 + *v20) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v21)) {
      goto LABEL_66;
    }
    char v23 = 0;
    unsigned int v24 = 0;
    unint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = *v20;
      uint64_t v27 = *(void *)(v3 + v26);
      unint64_t v28 = v27 + 1;
      if (v27 == -1 || v28 > *(void *)(v3 + *v6)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(v3 + *v22) + v27);
      *(void *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0) {
        goto LABEL_25;
      }
      v23 += 7;
      if (v24++ >= 9)
      {
        unint64_t v25 = 0;
        int v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v21) = 1;
LABEL_25:
    int v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(unsigned char *)(v3 + *v21)) {
      unint64_t v25 = 0;
    }
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_66:
      int v52 = 1;
      goto LABEL_67;
    }
    unint64_t v33 = v25 >> 3;
    BOOL v34 = v57;
    if ((v56 & 1) == 0)
    {
      unint64_t v35 = v19;
      do
      {
        int v37 = *v35++;
        int v36 = v37;
        BOOL v34 = v37 != 0;
        if (v37) {
          BOOL v38 = v36 == v33;
        }
        else {
          BOOL v38 = 1;
        }
      }
      while (!v38);
    }
    if (v33 == 2) {
      break;
    }
    if (v33 == 1)
    {
      if (v34)
      {
        if ((*(unsigned char *)(a1 + 52) & 2) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_87;
          }
          BOOL v39 = objc_alloc_init(GEOPDMapsIdentifier);
          if (!GEOPDMapsIdentifierReadAllFrom((uint64_t)v39, (void *)v3)) {
            goto LABEL_86;
          }
          PBReaderRecallMark();
          uint64_t v40 = 24;
LABEL_50:
          unsigned int v41 = *(void **)(a1 + v40);
          *(void *)(a1 + v40) = v39;

          --v8;
LABEL_64:
          unsigned int v21 = (int *)MEMORY[0x1E4F940C8];
          goto LABEL_65;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_87;
        }
        char v46 = *(unsigned char *)(a1 + 52) << 6;
LABEL_63:
        v8 += v46 >> 7;
        goto LABEL_64;
      }
    }
    else if ((v54 & 1) != 0 && (*(unsigned char *)(a1 + 52) & 1) == 0)
    {
      if (!*(void *)(a1 + 16))
      {
        id v42 = objc_alloc_init(MEMORY[0x1E4F940B0]);
        unint64_t v43 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v42;
      }
      int v44 = PBUnknownFieldAdd();
      unsigned int v21 = (int *)MEMORY[0x1E4F940C8];
      if (!v44)
      {
        int v52 = 0;
        int v53 = &OBJC_IVAR___GEOXPCReply__error;
        goto LABEL_69;
      }
      goto LABEL_65;
    }
LABEL_57:
    char v45 = PBReaderSkipValueWithTag();
    unsigned int v21 = (int *)MEMORY[0x1E4F940C8];
    if ((v45 & 1) == 0)
    {
      int v52 = 0;
LABEL_67:
      int v53 = &OBJC_IVAR___GEOXPCReply__error;
      goto LABEL_68;
    }
LABEL_65:
    if (!(v55 & 1 | (v8 != 0))) {
      goto LABEL_66;
    }
  }
  if (!v34) {
    goto LABEL_57;
  }
  if ((*(unsigned char *)(a1 + 52) & 4) != 0)
  {
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      goto LABEL_87;
    }
    char v46 = 32 * *(unsigned char *)(a1 + 52);
    goto LABEL_63;
  }
  if ((PBReaderPlaceMark() & 1) == 0) {
    goto LABEL_87;
  }
  BOOL v39 = objc_alloc_init(GEOFormattedString);
  if (GEOFormattedStringReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1))
  {
    PBReaderRecallMark();
    uint64_t v40 = 32;
    goto LABEL_50;
  }
LABEL_86:

LABEL_87:
  int v52 = 0;
  int v53 = &OBJC_IVAR___GEOXPCReply__error;
  unsigned int v21 = (int *)MEMORY[0x1E4F940C8];
LABEL_68:
  if ((v54 & 1) == 0) {
    goto LABEL_70;
  }
LABEL_69:
  *(unsigned char *)(a1 + v53[875]) |= 1u;
LABEL_70:
  if (v57 || (v52 & 1) == 0)
  {
    *(unsigned char *)(a1 + v53[875]) |= 2u;
    *(unsigned char *)(a1 + v53[875]) |= 4u;
    goto LABEL_80;
  }
  if (v19)
  {
    while (1)
    {
      int v49 = *v19++;
      int v48 = v49;
      if (v49 == 1) {
        break;
      }
      if (v48 == 2)
      {
        char v47 = 4;
LABEL_76:
        *(unsigned char *)(a1 + v53[875]) |= v47;
      }
      else if (!v48)
      {
        goto LABEL_80;
      }
    }
    char v47 = 2;
    goto LABEL_76;
  }
LABEL_80:
  if (v52) {
    unint64_t v3 = *(unsigned char *)(v3 + *v21) == 0;
  }
  else {
    unint64_t v3 = 0;
  }
  if (v57)
  {
    char v50 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  return v3;
}

unint64_t GEOPDAutocompleteEntryReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 156))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOPDAutocompleteEntryReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 152) = [v8 position];
  *(_DWORD *)(a1 + 156) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOPDAutocompleteEntryReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOPDAutocompleteEntryReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOPDAutocompleteEntryReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOPDAutocompleteEntryCallReadAllRecursiveWithoutSynchronized(a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 160));
  return Specified;
}

void sub_188E98CFC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDTransitPaymentMethodInfoReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  char v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 52);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 48)];
  char v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  int v12 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__flags;
  int v13 = ((*(unsigned __int8 *)(a1 + 60) >> 2) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 3) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 1) & 1);
  while (2)
  {
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    uint64_t v16 = 1;
    switch(a3[v8])
    {
      case -4:
        ++v13;
        goto LABEL_8;
      case -3:
        char v7 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v15 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v17 = v13 != 0;
        int v18 = v17 & ~v11 | v9;
        int v19 = v17 | v11;
        if (((v17 | v11) | v7)) {
          unint64_t v20 = 0;
        }
        else {
          unint64_t v20 = a3;
        }
        unsigned int v21 = (int *)MEMORY[0x1E4F940E8];
        BOOL v22 = v8 != 0;
        int v23 = 1;
        if (*(void *)(v3 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(v3 + *v6)) {
          goto LABEL_71;
        }
        char v53 = v17 & ~(_BYTE)v11 | v9;
        int v55 = v22 | v19 | v18;
        char v56 = (v20 == 0) | v19;
        unsigned int v24 = (int *)MEMORY[0x1E4F940C8];
        unint64_t v25 = (int *)MEMORY[0x1E4F940B8];
        char v54 = v17 | v11;
        break;
      default:
        ++v13;
LABEL_7:
        uint64_t v14 = v9;
LABEL_8:
        uint64_t v15 = v10;
        uint64_t v16 = v11;
LABEL_10:
        ++v8;
        uint64_t v9 = v14;
        uint64_t v10 = v15;
        uint64_t v11 = v16;
        continue;
    }
    break;
  }
  do
  {
    if (*(unsigned char *)(v3 + *v24)) {
      break;
    }
    char v26 = 0;
    unsigned int v27 = 0;
    unint64_t v28 = 0;
    while (1)
    {
      uint64_t v29 = *v21;
      uint64_t v30 = *(void *)(v3 + v29);
      unint64_t v31 = v30 + 1;
      if (v30 == -1 || v31 > *(void *)(v3 + *v6)) {
        break;
      }
      char v32 = *(unsigned char *)(*(void *)(v3 + *v25) + v30);
      *(void *)(v3 + v29) = v31;
      v28 |= (unint64_t)(v32 & 0x7F) << v26;
      if ((v32 & 0x80) == 0) {
        goto LABEL_25;
      }
      v26 += 7;
      if (v27++ >= 9)
      {
        unint64_t v28 = 0;
        int v34 = *(unsigned __int8 *)(v3 + *v24);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v24) = 1;
LABEL_25:
    int v34 = *(unsigned __int8 *)(v3 + *v24);
    if (*(unsigned char *)(v3 + *v24)) {
      unint64_t v28 = 0;
    }
LABEL_27:
    if (v34 || (v28 & 7) == 4) {
      break;
    }
    unint64_t v36 = v28 >> 3;
    BOOL v37 = v19;
    if ((v56 & 1) == 0)
    {
      BOOL v38 = v20;
      do
      {
        int v40 = *v38++;
        int v39 = v40;
        BOOL v37 = v40 != 0;
        if (v40) {
          BOOL v41 = v39 == v36;
        }
        else {
          BOOL v41 = 1;
        }
      }
      while (!v41);
    }
    switch(v36)
    {
      case 1:
        if (v37 && (*(unsigned char *)(a1 + 60) & 8) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_90;
          }
          id v42 = objc_alloc_init(GEOPBTransitPaymentMethod);
          if (!GEOPBTransitPaymentMethodReadAllFrom((uint64_t)v42, (void *)v3, v10 & 1))
          {
LABEL_89:

LABEL_90:
            int v23 = 0;
            int v12 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__flags;
            LOBYTE(v19) = v54;
            goto LABEL_70;
          }
          PBReaderRecallMark();
          -[GEOPDTransitPaymentMethodInfo _addNoFlagsPaymentMethod:](a1, v42);
LABEL_51:

          LOBYTE(v19) = v54;
          unsigned int v24 = (int *)MEMORY[0x1E4F940C8];
LABEL_66:
          if ((v55 & 1) == 0) {
            goto LABEL_68;
          }
          continue;
        }
        break;
      case 3:
        if (v7)
        {
          *(unsigned char *)(a1 + 60) |= 1u;
          uint64_t v43 = *v21;
          unint64_t v44 = *(void *)(v3 + v43);
          if (v44 <= 0xFFFFFFFFFFFFFFF7 && v44 + 8 <= *(void *)(v3 + *v6))
          {
            uint64_t v45 = *(void *)(*(void *)(v3 + *v25) + v44);
            *(void *)(v3 + v43) = v44 + 8;
          }
          else
          {
            *(unsigned char *)(v3 + *v24) = 1;
            uint64_t v45 = 0;
          }
          *(void *)(a1 + 24) = v45;
          goto LABEL_66;
        }
        break;
      case 2:
        if (v37 && (*(unsigned char *)(a1 + 60) & 4) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_90;
          }
          id v42 = objc_alloc_init(GEOPBTransitPaymentMethodSuggestion);
          if (!GEOPBTransitPaymentMethodSuggestionReadAllFrom((uint64_t)v42, (void *)v3, v10 & 1)) {
            goto LABEL_89;
          }
          PBReaderRecallMark();
          -[GEOPDTransitPaymentMethodInfo _addNoFlagsPaymentMethodSuggestion:](a1, v42);
          goto LABEL_51;
        }
        break;
      default:
        if ((v53 & 1) != 0 && (*(unsigned char *)(a1 + 60) & 2) == 0)
        {
          if (!*(void *)(a1 + 16))
          {
            id v46 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            char v47 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v46;
          }
          int v23 = PBUnknownFieldAdd();
          LOBYTE(v19) = v54;
          unsigned int v24 = (int *)MEMORY[0x1E4F940C8];
          if (!v23)
          {
            int v12 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__flags;
            goto LABEL_72;
          }
          goto LABEL_66;
        }
        break;
    }
    int v23 = PBReaderSkipValueWithTag();
    unsigned int v24 = (int *)MEMORY[0x1E4F940C8];
    LOBYTE(v19) = v54;
    if ((v23 & v55 & 1) == 0) {
      goto LABEL_69;
    }
  }
  while (*(void *)(v3 + *v21) < *(void *)(v3 + *v6));
LABEL_68:
  int v23 = 1;
LABEL_69:
  int v12 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__flags;
LABEL_70:
  LOBYTE(v18) = v53;
LABEL_71:
  if (v18) {
LABEL_72:
  }
    *(unsigned char *)(a1 + v12[518]) |= 2u;
  if (v19 & 1 | ((v23 & 1) == 0))
  {
    *(unsigned char *)(a1 + v12[518]) |= 4u;
    *(unsigned char *)(a1 + v12[518]) |= 8u;
    goto LABEL_83;
  }
  if (v20)
  {
    while (2)
    {
      while (1)
      {
        int v49 = *v20++;
        int v48 = v49;
        if (v49 == 1) {
          break;
        }
        if (v48 == 2)
        {
          char v50 = 4;
          goto LABEL_82;
        }
        if (!v48) {
          goto LABEL_83;
        }
      }
      char v50 = 8;
LABEL_82:
      *(unsigned char *)(a1 + v12[518]) |= v50;
      continue;
    }
  }
LABEL_83:
  if (v23)
  {
    unint64_t v3 = *(unsigned char *)(v3 + (int)*MEMORY[0x1E4F940C8]) == 0;
    if ((v19 & 1) == 0) {
      return v3;
    }
LABEL_87:
    int v51 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  else
  {
    unint64_t v3 = 0;
    if (v19) {
      goto LABEL_87;
    }
  }
  return v3;
}

BOOL GEODirectionsFeedbackIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  uint64_t v2 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        break;
      }
      switch((v8 >> 3))
      {
        case 1u:
          if (v15 != 2) {
            goto LABEL_54;
          }
          goto LABEL_20;
        case 3u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOStepFeedbackIsValid(a1)) {
            goto LABEL_54;
          }
          goto LABEL_41;
        case 4u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOTrafficRerouteFeedbackIsValid(a1)) {
            goto LABEL_54;
          }
          goto LABEL_41;
        case 5u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOAlightNotificationFeedbackIsValid(a1)) {
            goto LABEL_54;
          }
          goto LABEL_41;
        case 6u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOGuidanceEventFeedbackIsValid(a1)) {
            goto LABEL_54;
          }
          goto LABEL_41;
        case 7u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOModalityIsValid(a1)) {
            goto LABEL_54;
          }
LABEL_41:
          PBReaderRecallMark();
          continue;
        case 8u:
          if ((v8 & 7) != 0) {
            goto LABEL_54;
          }
          unsigned int v17 = 0;
          break;
        default:
LABEL_20:
          if (PBReaderSkipValueWithTag()) {
            continue;
          }
LABEL_54:
          PBReaderRecallMark();
          return 0;
      }
      while (1)
      {
        uint64_t v18 = *v2;
        uint64_t v19 = *(void *)&a1[v18];
        unint64_t v20 = v19 + 1;
        if (v19 == -1 || v20 > *(void *)&a1[*v3]) {
          break;
        }
        int v21 = *(char *)(*(void *)&a1[*v5] + v19);
        *(void *)&a1[v18] = v20;
        if (v21 < 0 && v17++ <= 8) {
          continue;
        }
        goto LABEL_42;
      }
      a1[*v4] = 1;
LABEL_42:
      ;
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v23 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v23;
}

unint64_t GEOTFTrafficSnapshotReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 88));
  char v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 84);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 80)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  unsigned int v11 = (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int16 *)(a1 + 96)), (uint16x4_t)0xFFFCFFF8FFFAFFFBLL), (int8x8_t)0x1000100010001))+ ((*(_WORD *)(a1 + 96) >> 3) & 1)+ ((*(_WORD *)(a1 + 96) >> 7) & 1));
  while (2)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    switch(a3[v7])
    {
      case -3:
        char v8 = 1;
        goto LABEL_6;
      case -2:
        uint64_t v12 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        BOOL v14 = v11 > 3;
        char v15 = v10 | v14;
        if (((v10 | v14) | v8)) {
          uint64_t v16 = 0;
        }
        else {
          uint64_t v16 = a3;
        }
        char v71 = (v16 == 0) | v15;
        unsigned int v17 = (int *)MEMORY[0x1E4F940E8];
        uint64_t v18 = (int *)MEMORY[0x1E4F940C8];
        uint64_t v19 = (int *)MEMORY[0x1E4F940B8];
        char v70 = v10 | v14;
        break;
      default:
        ++v11;
LABEL_6:
        uint64_t v12 = v9;
        uint64_t v13 = v10;
LABEL_8:
        ++v7;
        uint64_t v9 = v12;
        uint64_t v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v17) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v18)) {
      goto LABEL_113;
    }
    char v20 = 0;
    unsigned int v21 = 0;
    unint64_t v22 = 0;
    while (1)
    {
      uint64_t v23 = *v17;
      uint64_t v24 = *(void *)(v3 + v23);
      unint64_t v25 = v24 + 1;
      if (v24 == -1 || v25 > *(void *)(v3 + *v6)) {
        break;
      }
      char v26 = *(unsigned char *)(*(void *)(v3 + *v19) + v24);
      *(void *)(v3 + v23) = v25;
      v22 |= (unint64_t)(v26 & 0x7F) << v20;
      if ((v26 & 0x80) == 0) {
        goto LABEL_23;
      }
      v20 += 7;
      BOOL v27 = v21++ >= 9;
      if (v27)
      {
        unint64_t v22 = 0;
        int v28 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_25;
      }
    }
    *(unsigned char *)(v3 + *v18) = 1;
LABEL_23:
    int v28 = *(unsigned __int8 *)(v3 + *v18);
    if (*(unsigned char *)(v3 + *v18)) {
      unint64_t v22 = 0;
    }
LABEL_25:
    if (v28 || (v22 & 7) == 4)
    {
LABEL_113:
      if (v15)
      {
        char v64 = 1;
        goto LABEL_126;
      }
      if (v16)
      {
        while (1)
        {
          int v65 = *v16++;
          __int16 v66 = 64;
          switch(v65)
          {
            case 0:
              goto LABEL_127;
            case 1:
              goto LABEL_122;
            case 2:
              __int16 v66 = 32;
              goto LABEL_122;
            case 3:
              __int16 v66 = 256;
              goto LABEL_122;
            case 5:
              __int16 v66 = 16;
              goto LABEL_122;
            case 8:
              __int16 v66 = 8;
              goto LABEL_122;
            case 10:
              __int16 v66 = 128;
LABEL_122:
              *(_WORD *)(a1 + 96) |= v66;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_127;
    }
    unint64_t v30 = v22 >> 3;
    BOOL v31 = v15;
    if ((v71 & 1) == 0)
    {
      char v32 = v16;
      do
      {
        int v34 = *v32++;
        int v33 = v34;
        BOOL v31 = v34 != 0;
        if (v34) {
          BOOL v35 = v33 == v30;
        }
        else {
          BOOL v35 = 1;
        }
      }
      while (!v35);
    }
    switch((int)v30)
    {
      case 1:
        if (!v31 || (*(_WORD *)(a1 + 96) & 0x40) != 0) {
          goto LABEL_91;
        }
        PBReaderReadString();
        unint64_t v36 = (GEOTFIncident *)objc_claimAutoreleasedReturnValue();
        if (!v36) {
          goto LABEL_84;
        }
        int v69 = v36;
        -[GEOTFTrafficSnapshot _addNoFlagsRegion:](a1, v36);
        goto LABEL_83;
      case 2:
        if (!v31 || (*(_WORD *)(a1 + 96) & 0x20) != 0) {
          goto LABEL_91;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_125;
        }
        int v69 = objc_alloc_init(GEOTFIncident);
        if (!GEOTFIncidentReadAllFrom((uint64_t)v69, (void *)v3, v9 & 1)) {
          goto LABEL_124;
        }
        PBReaderRecallMark();
        -[GEOTFTrafficSnapshot _addNoFlagsIncidents:](a1, v69);
        goto LABEL_83;
      case 3:
        if (!v31 || (*(_WORD *)(a1 + 96) & 0x100) != 0) {
          goto LABEL_91;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_125;
        }
        int v69 = objc_alloc_init(GEOTFRoadSpeed);
        if (!GEOTFRoadSpeedReadAllFrom((uint64_t)v69, (void *)v3, v9 & 1)) {
          goto LABEL_124;
        }
        PBReaderRecallMark();
        -[GEOTFTrafficSnapshot _addNoFlagsSpeeds:](a1, v69);
        goto LABEL_83;
      case 4:
        if ((v8 & 1) == 0) {
          goto LABEL_91;
        }
        char v37 = 0;
        unsigned int v38 = 0;
        uint64_t v39 = 0;
        *(_WORD *)(a1 + 96) |= 2u;
        while (2)
        {
          uint64_t v40 = *v17;
          uint64_t v41 = *(void *)(v3 + v40);
          unint64_t v42 = v41 + 1;
          if (v41 == -1 || v42 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v18) = 1;
          }
          else
          {
            char v43 = *(unsigned char *)(*(void *)(v3 + *v19) + v41);
            *(void *)(v3 + v40) = v42;
            v39 |= (unint64_t)(v43 & 0x7F) << v37;
            if (v43 < 0)
            {
              v37 += 7;
              BOOL v27 = v38++ >= 9;
              if (v27)
              {
                uint64_t v39 = 0;
                goto LABEL_96;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v18)) {
          uint64_t v39 = 0;
        }
LABEL_96:
        uint64_t v62 = 40;
        goto LABEL_105;
      case 5:
        if (!v31) {
          goto LABEL_91;
        }
        if ((*(_WORD *)(a1 + 96) & 0x10) == 0)
        {
          uint64_t v44 = PBReaderReadString();
          uint64_t v45 = 24;
          goto LABEL_90;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_125;
        }
        __int16 v63 = *(_WORD *)(a1 + 96) << 11;
        goto LABEL_110;
      case 6:
        if ((v8 & 1) == 0) {
          goto LABEL_91;
        }
        char v46 = 0;
        unsigned int v47 = 0;
        uint64_t v48 = 0;
        *(_WORD *)(a1 + 96) |= 4u;
        while (2)
        {
          uint64_t v49 = *v17;
          uint64_t v50 = *(void *)(v3 + v49);
          unint64_t v51 = v50 + 1;
          if (v50 == -1 || v51 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v18) = 1;
          }
          else
          {
            char v52 = *(unsigned char *)(*(void *)(v3 + *v19) + v50);
            *(void *)(v3 + v49) = v51;
            v48 |= (unint64_t)(v52 & 0x7F) << v46;
            if (v52 < 0)
            {
              v46 += 7;
              BOOL v27 = v47++ >= 9;
              if (v27)
              {
                LODWORD(v48) = 0;
                goto LABEL_100;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v18)) {
          LODWORD(v48) = 0;
        }
LABEL_100:
        *(_DWORD *)(a1 + 92) = v48;
        goto LABEL_112;
      case 7:
        if ((v8 & 1) == 0) {
          goto LABEL_91;
        }
        char v53 = 0;
        unsigned int v54 = 0;
        uint64_t v39 = 0;
        *(_WORD *)(a1 + 96) |= 1u;
        while (2)
        {
          uint64_t v55 = *v17;
          uint64_t v56 = *(void *)(v3 + v55);
          unint64_t v57 = v56 + 1;
          if (v56 == -1 || v57 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v18) = 1;
          }
          else
          {
            char v58 = *(unsigned char *)(*(void *)(v3 + *v19) + v56);
            *(void *)(v3 + v55) = v57;
            v39 |= (unint64_t)(v58 & 0x7F) << v53;
            if (v58 < 0)
            {
              v53 += 7;
              BOOL v27 = v54++ >= 9;
              if (v27)
              {
                uint64_t v39 = 0;
                goto LABEL_104;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v18)) {
          uint64_t v39 = 0;
        }
LABEL_104:
        uint64_t v62 = 32;
LABEL_105:
        *(void *)(a1 + v62) = v39;
        goto LABEL_112;
      case 8:
        if (!v31 || (*(_WORD *)(a1 + 96) & 8) != 0) {
          goto LABEL_91;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_125;
        }
        int v69 = objc_alloc_init(GEOTFCompactRoadSpeeds);
        if (GEOTFCompactRoadSpeedsReadAllFrom((uint64_t)v69, (void *)v3, v9 & 1))
        {
          PBReaderRecallMark();
          -[GEOTFTrafficSnapshot _addNoFlagsCompactSpeeds:](a1, v69);
LABEL_83:
          unint64_t v36 = v69;
LABEL_84:

LABEL_111:
          char v15 = v70;
          uint64_t v18 = (int *)MEMORY[0x1E4F940C8];
LABEL_112:
          if (!(v15 & 1 | (v7 != 0))) {
            goto LABEL_113;
          }
          continue;
        }
LABEL_124:

LABEL_125:
        char v64 = 0;
        char v15 = v70;
        uint64_t v18 = (int *)MEMORY[0x1E4F940C8];
LABEL_126:
        *(_WORD *)(a1 + 96) |= 0x40u;
        *(_WORD *)(a1 + 96) |= 0x20u;
        *(_WORD *)(a1 + 96) |= 0x100u;
        *(_WORD *)(a1 + 96) |= 0x10u;
        *(_WORD *)(a1 + 96) |= 8u;
        *(_WORD *)(a1 + 96) |= 0x80u;
        if (v64)
        {
LABEL_127:
          unint64_t v3 = *(unsigned char *)(v3 + *v18) == 0;
          if (v15) {
            goto LABEL_128;
          }
        }
        else
        {
          unint64_t v3 = 0;
          if (v15)
          {
LABEL_128:
            uint64_t v67 = *(void **)(a1 + 8);
            *(void *)(a1 + 8) = 0;
          }
        }
        return v3;
      case 10:
        if (v31)
        {
          if ((*(_WORD *)(a1 + 96) & 0x80) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_125;
            }
            __int16 v63 = *(_WORD *)(a1 + 96) << 8;
LABEL_110:
            v7 += v63 >> 15;
          }
          else
          {
            uint64_t v44 = PBReaderReadString();
            uint64_t v45 = 64;
LABEL_90:
            char v60 = *(void **)(a1 + v45);
            *(void *)(a1 + v45) = v44;

            --v7;
          }
          goto LABEL_111;
        }
LABEL_91:
        char v61 = PBReaderSkipValueWithTag();
        uint64_t v18 = (int *)MEMORY[0x1E4F940C8];
        char v15 = v70;
        if ((v61 & 1) == 0)
        {
LABEL_123:
          char v64 = 0;
          goto LABEL_126;
        }
        goto LABEL_112;
      default:
        int v59 = PBReaderSkipValueWithTag();
        uint64_t v18 = (int *)MEMORY[0x1E4F940C8];
        char v15 = v70;
        if (!v59) {
          goto LABEL_123;
        }
        goto LABEL_112;
    }
  }
}

void maps::path_codec::Dijkstra<GEOPathMatcherRoadKey>::run(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _DWORD *a5@<X4>, uint64_t **a6@<X8>)
{
  v162.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  uint64_t v9 = *(void *)(a1 + 16);
  long long v171 = (unint64_t **)(a1 + 16);
  *(void *)(a1 + 48) = *(void *)(a1 + 40);
  *(void *)(a1 + 24) = v9;
  *(_DWORD *)(a1 + 64) = 0;
  std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::clear((void *)(a1 + 72));
  uint64_t v173 = (char **)(a1 + 112);
  *(void *)(a1 + 120) = *(void *)(a1 + 112);
  uint64_t v189 = 0;
  uint64_t v190 = 0;
  long long v191 = 0;
  uint64_t v10 = *(void *)(a2 + 16);
  uint64_t v169 = *(void *)(a2 + 24);
  if (v10 != v169)
  {
    uint64_t v170 = a1 + 128;
    long long v166 = a5;
    while (1)
    {
      (*(void (**)(void **__return_ptr))(**(void **)a1 + 32))(v179);
      if (v181)
      {
        if (maps::path_codec::Dijkstra<GEOPathMatcherRoadKey>::found_target(a1, (double *)v10, a3))
        {
          long long v187 = *(_OWORD *)v10;
          long long v188 = *(_OWORD *)(v10 + 16);
          a6[1] = 0;
          a6[2] = 0;
          *a6 = 0;
          unsigned int v11 = (uint64_t *)operator new(0x20uLL);
          a6[1] = v11 + 4;
          a6[2] = v11 + 4;
          long long v12 = v188;
          *(_OWORD *)unsigned int v11 = v187;
          *((_OWORD *)v11 + 1) = v12;
          *a6 = v11;
          int v13 = 1;
        }
        else
        {
          uint64_t v15 = *(void *)(a1 + 112);
          uint64_t v14 = *(void *)(a1 + 120);
          *(void *)&long long v187 = v10;
          *((_DWORD *)std::__hash_table<std::__hash_value_type<GEOPathMatcherRoadKey,unsigned int>,std::__unordered_map_hasher<GEOPathMatcherRoadKey,std::__hash_value_type<GEOPathMatcherRoadKey,unsigned int>,std::hash<GEOPathMatcherRoadKey>,std::equal_to<GEOPathMatcherRoadKey>,true>,std::__unordered_map_equal<GEOPathMatcherRoadKey,std::__hash_value_type<GEOPathMatcherRoadKey,unsigned int>,std::equal_to<GEOPathMatcherRoadKey>,std::hash<GEOPathMatcherRoadKey>,true>,std::allocator<std::__hash_value_type<GEOPathMatcherRoadKey,unsigned int>>>::__emplace_unique_key_args<GEOPathMatcherRoadKey,std::piecewise_construct_t const&,std::tuple<GEOPathMatcherRoadKey const&>,std::tuple<>>(a1 + 72, (uint64_t *)v10, (uint64_t)&std::piecewise_construct, (_OWORD **)&v187)+ 12) = 954437177 * ((unint64_t)(v14 - v15) >> 3);
          unint64_t v16 = *(void *)(a1 + 120);
          unint64_t v17 = *(void *)(a1 + 128);
          if (v16 >= v17)
          {
            unint64_t v20 = 0x8E38E38E38E38E39 * ((uint64_t)(v16 - (void)*v173) >> 3);
            unint64_t v21 = v20 + 1;
            if (v20 + 1 > 0x38E38E38E38E38ELL) {
              std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v22 = 0x8E38E38E38E38E39 * ((uint64_t)(v17 - (void)*v173) >> 3);
            if (2 * v22 > v21) {
              unint64_t v21 = 2 * v22;
            }
            if (v22 >= 0x1C71C71C71C71C7) {
              unint64_t v23 = 0x38E38E38E38E38ELL;
            }
            else {
              unint64_t v23 = v21;
            }
            uint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<maps::path_codec::Dijkstra<GEOPathMatcherRoadKey>::SearchData>>(v170, v23);
            char v26 = &v24[72 * v20];
            long long v27 = *(_OWORD *)(v10 + 16);
            *(_OWORD *)char v26 = *(_OWORD *)v10;
            *((_OWORD *)v26 + 1) = v27;
            *((_OWORD *)v26 + 2) = maps::path_codec::Dijkstra<GEOPathMatcherRoadKey>::INVALID_ROAD_ID;
            *((_OWORD *)v26 + 3) = unk_18A63AB10;
            *((void *)v26 + 8) = 0;
            uint64_t v29 = *(char **)(a1 + 112);
            int v28 = *(char **)(a1 + 120);
            unint64_t v30 = v26;
            if (v28 != v29)
            {
              do
              {
                *(_OWORD *)(v30 - 72) = *(_OWORD *)(v28 - 72);
                long long v31 = *(_OWORD *)(v28 - 56);
                long long v32 = *(_OWORD *)(v28 - 40);
                long long v33 = *(_OWORD *)(v28 - 24);
                *((void *)v30 - 1) = *((void *)v28 - 1);
                *(_OWORD *)(v30 - 24) = v33;
                *(_OWORD *)(v30 - 40) = v32;
                *(_OWORD *)(v30 - 56) = v31;
                v30 -= 72;
                v28 -= 72;
              }
              while (v28 != v29);
              int v28 = *v173;
            }
            uint64_t v19 = v26 + 72;
            *(void *)(a1 + 112) = v30;
            *(void *)(a1 + 120) = v26 + 72;
            *(void *)(a1 + 128) = &v24[72 * v25];
            if (v28) {
              operator delete(v28);
            }
          }
          else
          {
            long long v18 = *(_OWORD *)(v10 + 16);
            *(_OWORD *)unint64_t v16 = *(_OWORD *)v10;
            *(_OWORD *)(v16 + 16) = v18;
            *(_OWORD *)(v16 + 32) = maps::path_codec::Dijkstra<GEOPathMatcherRoadKey>::INVALID_ROAD_ID;
            *(_OWORD *)(v16 + 48) = unk_18A63AB10;
            *(void *)(v16 + 64) = 0;
            uint64_t v19 = (char *)(v16 + 72);
          }
          *(void *)(a1 + 120) = v19;
          maps::path_codec::Dijkstra<GEOPathMatcherRoadKey>::get_navigable_outgoing_roads((void *)a1, v10, &v189);
          int v34 = v189;
          BOOL v35 = v190;
          for (int64_t i = (char *)v190 - (char *)v189; v34 != v35; v34 += 4)
          {
            if (!std::__hash_table<std::__hash_value_type<GEOPathMatcherRoadKey,unsigned int>,std::__unordered_map_hasher<GEOPathMatcherRoadKey,std::__hash_value_type<GEOPathMatcherRoadKey,unsigned int>,std::hash<GEOPathMatcherRoadKey>,std::equal_to<GEOPathMatcherRoadKey>,true>,std::__unordered_map_equal<GEOPathMatcherRoadKey,std::__hash_value_type<GEOPathMatcherRoadKey,unsigned int>,std::equal_to<GEOPathMatcherRoadKey>,std::hash<GEOPathMatcherRoadKey>,true>,std::allocator<std::__hash_value_type<GEOPathMatcherRoadKey,unsigned int>>>::find<GEOPathMatcherRoadKey>((void *)(a1 + 72), v34))
            {
              uint64_t v37 = *(void *)(a1 + 112);
              uint64_t v38 = *(void *)(a1 + 120);
              *(void *)&long long v187 = v34;
              *((_DWORD *)std::__hash_table<std::__hash_value_type<GEOPathMatcherRoadKey,unsigned int>,std::__unordered_map_hasher<GEOPathMatcherRoadKey,std::__hash_value_type<GEOPathMatcherRoadKey,unsigned int>,std::hash<GEOPathMatcherRoadKey>,std::equal_to<GEOPathMatcherRoadKey>,true>,std::__unordered_map_equal<GEOPathMatcherRoadKey,std::__hash_value_type<GEOPathMatcherRoadKey,unsigned int>,std::equal_to<GEOPathMatcherRoadKey>,std::hash<GEOPathMatcherRoadKey>,true>,std::allocator<std::__hash_value_type<GEOPathMatcherRoadKey,unsigned int>>>::__emplace_unique_key_args<GEOPathMatcherRoadKey,std::piecewise_construct_t const&,std::tuple<GEOPathMatcherRoadKey const&>,std::tuple<>>(a1 + 72, v34, (uint64_t)&std::piecewise_construct, (_OWORD **)&v187)+ 12) = 954437177 * ((unint64_t)(v38 - v37) >> 3);
              unint64_t v39 = *(void *)(a1 + 120);
              unint64_t v40 = *(void *)(a1 + 128);
              if (v39 >= v40)
              {
                unint64_t v43 = 0x8E38E38E38E38E39 * ((uint64_t)(v39 - (void)*v173) >> 3);
                unint64_t v44 = v43 + 1;
                if (v43 + 1 > 0x38E38E38E38E38ELL) {
                  std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v45 = 0x8E38E38E38E38E39 * ((uint64_t)(v40 - (void)*v173) >> 3);
                if (2 * v45 > v44) {
                  unint64_t v44 = 2 * v45;
                }
                if (v45 >= 0x1C71C71C71C71C7) {
                  unint64_t v46 = 0x38E38E38E38E38ELL;
                }
                else {
                  unint64_t v46 = v44;
                }
                unsigned int v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<maps::path_codec::Dijkstra<GEOPathMatcherRoadKey>::SearchData>>(v170, v46);
                uint64_t v49 = &v47[72 * v43];
                long long v50 = *((_OWORD *)v34 + 1);
                *(_OWORD *)uint64_t v49 = *(_OWORD *)v34;
                *((_OWORD *)v49 + 1) = v50;
                *((_OWORD *)v49 + 2) = maps::path_codec::Dijkstra<GEOPathMatcherRoadKey>::INVALID_ROAD_ID;
                *((_OWORD *)v49 + 3) = unk_18A63AB10;
                *((void *)v49 + 8) = 0x7FFFFFFFFFFFFFFFLL;
                char v52 = *(char **)(a1 + 112);
                unint64_t v51 = *(char **)(a1 + 120);
                char v53 = v49;
                if (v51 != v52)
                {
                  do
                  {
                    *(_OWORD *)(v53 - 72) = *(_OWORD *)(v51 - 72);
                    long long v54 = *(_OWORD *)(v51 - 56);
                    long long v55 = *(_OWORD *)(v51 - 40);
                    long long v56 = *(_OWORD *)(v51 - 24);
                    *((void *)v53 - 1) = *((void *)v51 - 1);
                    *(_OWORD *)(v53 - 24) = v56;
                    *(_OWORD *)(v53 - 40) = v55;
                    *(_OWORD *)(v53 - 56) = v54;
                    v53 -= 72;
                    v51 -= 72;
                  }
                  while (v51 != v52);
                  unint64_t v51 = *v173;
                }
                unint64_t v42 = v49 + 72;
                *(void *)(a1 + 112) = v53;
                *(void *)(a1 + 120) = v49 + 72;
                *(void *)(a1 + 128) = &v47[72 * v48];
                if (v51) {
                  operator delete(v51);
                }
              }
              else
              {
                long long v41 = *((_OWORD *)v34 + 1);
                *(_OWORD *)unint64_t v39 = *(_OWORD *)v34;
                *(_OWORD *)(v39 + 16) = v41;
                *(_OWORD *)(v39 + 32) = maps::path_codec::Dijkstra<GEOPathMatcherRoadKey>::INVALID_ROAD_ID;
                *(_OWORD *)(v39 + 48) = unk_18A63AB10;
                *(void *)(v39 + 64) = 0x7FFFFFFFFFFFFFFFLL;
                unint64_t v42 = (char *)(v39 + 72);
              }
              *(void *)(a1 + 120) = v42;
            }
            *(void *)&long long v187 = v34;
            unint64_t v57 = *((unsigned int *)std::__hash_table<std::__hash_value_type<GEOPathMatcherRoadKey,unsigned int>,std::__unordered_map_hasher<GEOPathMatcherRoadKey,std::__hash_value_type<GEOPathMatcherRoadKey,unsigned int>,std::hash<GEOPathMatcherRoadKey>,std::equal_to<GEOPathMatcherRoadKey>,true>,std::__unordered_map_equal<GEOPathMatcherRoadKey,std::__hash_value_type<GEOPathMatcherRoadKey,unsigned int>,std::equal_to<GEOPathMatcherRoadKey>,std::hash<GEOPathMatcherRoadKey>,true>,std::allocator<std::__hash_value_type<GEOPathMatcherRoadKey,unsigned int>>>::__emplace_unique_key_args<GEOPathMatcherRoadKey,std::piecewise_construct_t const&,std::tuple<GEOPathMatcherRoadKey const&>,std::tuple<>>(a1 + 72, v34, (uint64_t)&std::piecewise_construct, (_OWORD **)&v187)+ 12);
            unint64_t cost = maps::path_codec::ArcEvaluator<GEOPathMatcherRoadKey>::get_cost((void *)(a1 + 8), 1.0 - *(double *)(v10 + 32), v10, (uint64_t)v34, a4, i == 32);
            *(void *)&long long v187 = cost;
            uint64_t v59 = (uint64_t)&(*v173)[72 * v57];
            unsigned int v62 = *(_DWORD *)(v59 + 64);
            char v60 = (unint64_t *)(v59 + 64);
            unsigned int v61 = v62;
            if (v62 != -1)
            {
              int v63 = *(_DWORD *)&(*v173)[72 * v57 + 68];
              if (v63 != 0x7FFFFFFF && v61 <= cost && (v61 < cost || v63 <= SHIDWORD(cost))) {
                continue;
              }
            }
            *char v60 = cost;
            uint64_t v66 = *(void *)(a1 + 112) + 72 * v57;
            long long v67 = *(_OWORD *)(v10 + 16);
            *(_OWORD *)(v66 + 32) = *(_OWORD *)v10;
            *(_OWORD *)(v66 + 48) = v67;
            uint64_t v68 = *(void *)(a1 + 40);
            if (v57 >= (*(void *)(a1 + 48) - v68) >> 2 || *(_DWORD *)(v68 + 4 * v57) == -1) {
              maps::path_codec::KHeap<unsigned int,2u,std::less<unsigned int>>::insert(v171, v57, (unsigned int *)&v187);
            }
            else {
              maps::path_codec::KHeap<unsigned int,2u,std::less<unsigned int>>::change_priority((uint64_t *)v171, v57, (unsigned int *)&v187);
            }
          }
          int v13 = 0;
          a5 = v166;
        }
      }
      else
      {
        int v13 = 3;
      }
      if (v183 < 0) {
        operator delete(__p);
      }
      if (v179[1])
      {
        *(void **)&long long v180 = v179[1];
        operator delete(v179[1]);
      }
      if (v13 != 3 && v13) {
        goto LABEL_132;
      }
      v10 += 56;
      if (v10 == v169) {
        break;
      }
    }
  }
  if (!*(_DWORD *)(a1 + 64))
  {
LABEL_131:
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
LABEL_132:
    if (v189)
    {
      uint64_t v190 = v189;
      operator delete(v189);
    }
    return;
  }
  int v163 = 0;
  uint64_t v164 = (void *)*MEMORY[0x1E4FBA418];
  uint64_t v165 = *(void **)(MEMORY[0x1E4FBA418] + 24);
  while (1)
  {
    int v69 = *v171;
    char v70 = *v173;
    uint64_t v71 = (uint64_t)&(*v173)[72 * *(unsigned int *)*v171];
    long long v72 = *(_OWORD *)(v71 + 16);
    long long v187 = *(_OWORD *)v71;
    long long v188 = v72;
    uint64_t v73 = *(void *)(v71 + 64);
    char v74 = a6;
    char v75 = *(uint64_t **)(a3 + 16);
    char v76 = *(uint64_t **)(a3 + 24);
    if (v75 != v76) {
      break;
    }
LABEL_66:
    uint64_t v79 = *(void *)(a1 + 40);
    *(_DWORD *)(v79 + 4 * *(unsigned int *)v69) = -1;
    unsigned int v80 = *(_DWORD *)(a1 + 64) - 1;
    *(_DWORD *)(a1 + 64) = v80;
    if (v80)
    {
      unint64_t v81 = v69[v80];
      *int v69 = v81;
      *(_DWORD *)(v79 + 4 * v81) = 0;
      unsigned int v82 = *(_DWORD *)(a1 + 64);
      if (v82 >= 2)
      {
        int v83 = 0;
        unsigned int v84 = 0;
        unsigned int v85 = 1;
        do
        {
          unsigned int v86 = v83 + 5;
          if (v86 >= v82) {
            uint64_t v87 = v82;
          }
          else {
            uint64_t v87 = v86;
          }
          if (v85 >= v87) {
            break;
          }
          uint64_t v88 = v84;
          unsigned int v89 = HIDWORD(v69[v84]);
          uint64_t v90 = v85;
          long long v91 = (unsigned int *)&v69[v85] + 1;
          unsigned int v84 = -1;
          unsigned int v92 = v89;
          do
          {
            unsigned int v94 = *v91;
            v91 += 2;
            unsigned int v93 = v94;
            if (v94 < v92)
            {
              unsigned int v92 = v93;
              unsigned int v84 = v90;
            }
            ++v90;
          }
          while (v87 != v90);
          if (v84 >= v82) {
            break;
          }
          uint64_t v95 = &v69[v84];
          unint64_t v96 = *v95;
          *(_DWORD *)uint64_t v95 = v69[v88];
          *((_DWORD *)v95 + 1) = v89;
          v69[v88] = v96;
          uint64_t v97 = *(unsigned int *)v95;
          int v98 = *(_DWORD *)(v79 + 4 * v97);
          *(_DWORD *)(v79 + 4 * v97) = *(_DWORD *)(v79 + 4 * v96);
          *(_DWORD *)(v79 + 4 * v96) = v98;
          int v83 = 4 * v84;
          unsigned int v85 = (4 * v84) | 1;
          unsigned int v82 = *(_DWORD *)(a1 + 64);
        }
        while (v85 < v82);
      }
    }
    *(void *)(a1 + 24) -= 8;
    if (!maps::path_codec::Logger::m_log_level)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v179);
      uint64_t v99 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v179, (uint64_t)"Exploring ", 10);
      operator<<(v99, &v187);
      std::string::basic_string[abi:ne180100]<0>(v177, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/path-codec/include/path-codec/Dijkstra.h");
      std::stringbuf::str();
      maps::path_codec::Logger::log_trace((uint64_t)v177, 214, (uint64_t)v175);
      if (v176 < 0) {
        operator delete(v175[0]);
      }
      if (v178 < 0) {
        operator delete(v177[0]);
      }
      v179[0] = v164;
      *(void **)((char *)v179 + *((void *)v164 - 3)) = v165;
      v179[1] = (void *)(MEMORY[0x1E4FBA470] + 16);
      if (v185 < 0) {
        operator delete(v184);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x18C11F4F0](v186);
    }
    ++v163;
    HIDWORD(v100) = 989560465 * v163;
    LODWORD(v100) = 989560465 * v163;
    if ((v100 >> 4) <= 0x68DB8
      && (std::chrono::steady_clock::now().__d_.__rep_ - v162.__d_.__rep_) / 1000000 > *(unsigned int *)(*(void *)(a1 + 136) + 76))
    {
      if (maps::path_codec::Logger::m_log_level <= 1u)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v179);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v179, (uint64_t)"Reached time limit for exploration.", 35);
        std::string::basic_string[abi:ne180100]<0>(v177, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/path-codec/include/path-codec/Dijkstra.h");
        std::stringbuf::str();
        maps::path_codec::Logger::log_debug((uint64_t)v177, 224, (uint64_t)v175);
        if (v176 < 0) {
          operator delete(v175[0]);
        }
        if (v178 < 0) {
          operator delete(v177[0]);
        }
        v179[0] = v164;
        *(void **)((char *)v179 + *((void *)v164 - 3)) = v165;
        v179[1] = (void *)(MEMORY[0x1E4FBA470] + 16);
        if (v185 < 0) {
          operator delete(v184);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x18C11F4F0](v186);
        char v74 = a6;
      }
      *char v74 = 0;
      v74[1] = 0;
      v74[2] = 0;
      goto LABEL_132;
    }
    maps::path_codec::Dijkstra<GEOPathMatcherRoadKey>::get_navigable_outgoing_roads((void *)a1, (uint64_t)&v187, &v189);
    long long v101 = v189;
    unsigned int v102 = v190;
    for (int64_t j = (char *)v190 - (char *)v189; v101 != v102; v101 += 4)
    {
      if (!std::__hash_table<std::__hash_value_type<GEOPathMatcherRoadKey,unsigned int>,std::__unordered_map_hasher<GEOPathMatcherRoadKey,std::__hash_value_type<GEOPathMatcherRoadKey,unsigned int>,std::hash<GEOPathMatcherRoadKey>,std::equal_to<GEOPathMatcherRoadKey>,true>,std::__unordered_map_equal<GEOPathMatcherRoadKey,std::__hash_value_type<GEOPathMatcherRoadKey,unsigned int>,std::equal_to<GEOPathMatcherRoadKey>,std::hash<GEOPathMatcherRoadKey>,true>,std::allocator<std::__hash_value_type<GEOPathMatcherRoadKey,unsigned int>>>::find<GEOPathMatcherRoadKey>((void *)(a1 + 72), v101))
      {
        uint64_t v105 = *(void *)(a1 + 112);
        uint64_t v104 = *(void *)(a1 + 120);
        v179[0] = v101;
        *((_DWORD *)std::__hash_table<std::__hash_value_type<GEOPathMatcherRoadKey,unsigned int>,std::__unordered_map_hasher<GEOPathMatcherRoadKey,std::__hash_value_type<GEOPathMatcherRoadKey,unsigned int>,std::hash<GEOPathMatcherRoadKey>,std::equal_to<GEOPathMatcherRoadKey>,true>,std::__unordered_map_equal<GEOPathMatcherRoadKey,std::__hash_value_type<GEOPathMatcherRoadKey,unsigned int>,std::equal_to<GEOPathMatcherRoadKey>,std::hash<GEOPathMatcherRoadKey>,true>,std::allocator<std::__hash_value_type<GEOPathMatcherRoadKey,unsigned int>>>::__emplace_unique_key_args<GEOPathMatcherRoadKey,std::piecewise_construct_t const&,std::tuple<GEOPathMatcherRoadKey const&>,std::tuple<>>(a1 + 72, v101, (uint64_t)&std::piecewise_construct, (_OWORD **)v179)+ 12) = 954437177 * ((unint64_t)(v104 - v105) >> 3);
        unint64_t v106 = *(void *)(a1 + 120);
        unint64_t v107 = *(void *)(a1 + 128);
        if (v106 >= v107)
        {
          unint64_t v110 = 0x8E38E38E38E38E39 * ((uint64_t)(v106 - (void)*v173) >> 3);
          unint64_t v111 = v110 + 1;
          if (v110 + 1 > 0x38E38E38E38E38ELL) {
            std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v112 = 0x8E38E38E38E38E39 * ((uint64_t)(v107 - (void)*v173) >> 3);
          if (2 * v112 > v111) {
            unint64_t v111 = 2 * v112;
          }
          if (v112 >= 0x1C71C71C71C71C7) {
            unint64_t v113 = 0x38E38E38E38E38ELL;
          }
          else {
            unint64_t v113 = v111;
          }
          uint64_t v114 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<maps::path_codec::Dijkstra<GEOPathMatcherRoadKey>::SearchData>>(a1 + 128, v113);
          long long v116 = &v114[72 * v110];
          long long v117 = *((_OWORD *)v101 + 1);
          *(_OWORD *)long long v116 = *(_OWORD *)v101;
          *((_OWORD *)v116 + 1) = v117;
          *((_OWORD *)v116 + 2) = maps::path_codec::Dijkstra<GEOPathMatcherRoadKey>::INVALID_ROAD_ID;
          *((_OWORD *)v116 + 3) = unk_18A63AB10;
          *((void *)v116 + 8) = 0x7FFFFFFFFFFFFFFFLL;
          uint64_t v119 = *(char **)(a1 + 112);
          uint64_t v118 = *(char **)(a1 + 120);
          uint64_t v120 = v116;
          if (v118 != v119)
          {
            do
            {
              *(_OWORD *)(v120 - 72) = *(_OWORD *)(v118 - 72);
              long long v121 = *(_OWORD *)(v118 - 56);
              long long v122 = *(_OWORD *)(v118 - 40);
              long long v123 = *(_OWORD *)(v118 - 24);
              *((void *)v120 - 1) = *((void *)v118 - 1);
              *(_OWORD *)(v120 - 24) = v123;
              *(_OWORD *)(v120 - 40) = v122;
              *(_OWORD *)(v120 - 56) = v121;
              v120 -= 72;
              v118 -= 72;
            }
            while (v118 != v119);
            uint64_t v118 = *v173;
          }
          uint64_t v109 = v116 + 72;
          *(void *)(a1 + 112) = v120;
          *(void *)(a1 + 120) = v116 + 72;
          *(void *)(a1 + 128) = &v114[72 * v115];
          if (v118) {
            operator delete(v118);
          }
        }
        else
        {
          long long v108 = *((_OWORD *)v101 + 1);
          *(_OWORD *)unint64_t v106 = *(_OWORD *)v101;
          *(_OWORD *)(v106 + 16) = v108;
          *(_OWORD *)(v106 + 32) = maps::path_codec::Dijkstra<GEOPathMatcherRoadKey>::INVALID_ROAD_ID;
          *(_OWORD *)(v106 + 48) = unk_18A63AB10;
          *(void *)(v106 + 64) = 0x7FFFFFFFFFFFFFFFLL;
          uint64_t v109 = (char *)(v106 + 72);
        }
        *(void *)(a1 + 120) = v109;
      }
      v179[0] = v101;
      unint64_t v124 = *((unsigned int *)std::__hash_table<std::__hash_value_type<GEOPathMatcherRoadKey,unsigned int>,std::__unordered_map_hasher<GEOPathMatcherRoadKey,std::__hash_value_type<GEOPathMatcherRoadKey,unsigned int>,std::hash<GEOPathMatcherRoadKey>,std::equal_to<GEOPathMatcherRoadKey>,true>,std::__unordered_map_equal<GEOPathMatcherRoadKey,std::__hash_value_type<GEOPathMatcherRoadKey,unsigned int>,std::equal_to<GEOPathMatcherRoadKey>,std::hash<GEOPathMatcherRoadKey>,true>,std::allocator<std::__hash_value_type<GEOPathMatcherRoadKey,unsigned int>>>::__emplace_unique_key_args<GEOPathMatcherRoadKey,std::piecewise_construct_t const&,std::tuple<GEOPathMatcherRoadKey const&>,std::tuple<>>(a1 + 72, v101, (uint64_t)&std::piecewise_construct, (_OWORD **)v179)+ 12);
      unint64_t v125 = maps::path_codec::ArcEvaluator<GEOPathMatcherRoadKey>::get_cost((void *)(a1 + 8), 1.0, (uint64_t)&v187, (uint64_t)v101, a4, j == 32);
      unsigned int v126 = v125 + v73;
      unint64_t v127 = (v125 & 0xFFFFFFFF00000000) + v73;
      unint64_t v128 = HIDWORD(v127);
      unint64_t v174 = v127 & 0xFFFFFFFF00000000 | (v125 + v73);
      if (*a5 == 0x7FFFFFFF || *a5 > SHIDWORD(v127))
      {
        unsigned int v129 = *(_DWORD *)&(*v173)[72 * v124 + 64];
        if (v129 == -1
          || ((int v130 = *(_DWORD *)&(*v173)[72 * v124 + 68], v130 != 0x7FFFFFFF)
            ? (BOOL v131 = v129 > v126)
            : (BOOL v131 = 1),
              v131 || (v129 >= v126 ? (BOOL v132 = v130 <= (int)v128) : (BOOL v132 = 1), !v132)))
        {
          uint64_t v133 = *(void *)(a1 + 40);
          if (v124 >= (*(void *)(a1 + 48) - v133) >> 2 || *(_DWORD *)(v133 + 4 * v124) == -1) {
            maps::path_codec::KHeap<unsigned int,2u,std::less<unsigned int>>::insert(v171, v124, (unsigned int *)&v174);
          }
          else {
            maps::path_codec::KHeap<unsigned int,2u,std::less<unsigned int>>::change_priority((uint64_t *)v171, v124, (unsigned int *)&v174);
          }
          *(void *)&(*v173)[72 * v124 + 64] = v174;
          long long v134 = v188;
          uint64_t v135 = (uint64_t)&(*v173)[72 * v124];
          *(_OWORD *)(v135 + 32) = v187;
          *(_OWORD *)(v135 + 48) = v134;
        }
      }
      else if (!maps::path_codec::Logger::m_log_level)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v179);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v179, (uint64_t)"Exceeding the search radius, pruning the search here.", 53);
        std::string::basic_string[abi:ne180100]<0>(v177, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/path-codec/include/path-codec/Dijkstra.h");
        std::stringbuf::str();
        maps::path_codec::Logger::log_trace((uint64_t)v177, 255, (uint64_t)v175);
        if (v176 < 0) {
          operator delete(v175[0]);
        }
        if (v178 < 0) {
          operator delete(v177[0]);
        }
        v179[0] = v164;
        *(void **)((char *)v179 + *((void *)v164 - 3)) = v165;
        v179[1] = (void *)(MEMORY[0x1E4FBA470] + 16);
        if (v185 < 0) {
          operator delete(v184);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x18C11F4F0](v186);
      }
    }
    if (!*(_DWORD *)(a1 + 64)) {
      goto LABEL_131;
    }
  }
  while (1)
  {
    uint64_t v77 = *v75;
    if (*v75)
    {
      uint64_t v78 = v187;
    }
    else
    {
      uint64_t v77 = v75[1];
      uint64_t v78 = *((void *)&v187 + 1);
    }
    if (v77 == v78) {
      break;
    }
    v75 += 7;
    if (v75 == v76) {
      goto LABEL_66;
    }
  }
  long long v136 = v189;
  uint64_t v190 = v189;
  uint64_t v137 = &v70[72 * *(unsigned int *)v69];
  long long v138 = *((_OWORD *)v137 + 1);
  *(_OWORD *)uint64_t v179 = *(_OWORD *)v137;
  long long v180 = v138;
  uint64_t v139 = v189;
  if (*(_OWORD *)v179 != 0)
  {
    do
    {
      uint64_t v140 = v190;
      if (v190 >= v191)
      {
        uint64_t v143 = v189;
        uint64_t v144 = ((char *)v190 - (char *)v189) >> 5;
        unint64_t v145 = v144 + 1;
        if ((unint64_t)(v144 + 1) >> 59) {
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v146 = (char *)v191 - (char *)v189;
        if (((char *)v191 - (char *)v189) >> 4 > v145) {
          unint64_t v145 = v146 >> 4;
        }
        if ((unint64_t)v146 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v147 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v147 = v145;
        }
        if (v147)
        {
          uint64_t v148 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::ControlPoint>>((uint64_t)&v191, v147);
          uint64_t v143 = v189;
          uint64_t v140 = v190;
        }
        else
        {
          uint64_t v148 = 0;
        }
        long long v149 = v180;
        uint64_t v150 = &v148[32 * v144];
        *(_OWORD *)uint64_t v150 = *(_OWORD *)v179;
        *((_OWORD *)v150 + 1) = v149;
        if (v140 == v143)
        {
          uint64_t v153 = (uint64_t *)&v148[32 * v144];
        }
        else
        {
          long long v151 = &v148[32 * v144];
          do
          {
            long long v152 = *((_OWORD *)v140 - 1);
            uint64_t v153 = (uint64_t *)(v151 - 32);
            *((_OWORD *)v151 - 2) = *((_OWORD *)v140 - 2);
            *((_OWORD *)v151 - 1) = v152;
            v140 -= 4;
            v151 -= 32;
          }
          while (v140 != v143);
        }
        unsigned int v142 = (uint64_t *)(v150 + 32);
        uint64_t v189 = v153;
        uint64_t v190 = (uint64_t *)(v150 + 32);
        long long v191 = (uint64_t *)&v148[32 * v147];
        if (v143) {
          operator delete(v143);
        }
      }
      else
      {
        long long v141 = v180;
        *(_OWORD *)uint64_t v190 = *(_OWORD *)v179;
        *((_OWORD *)v140 + 1) = v141;
        unsigned int v142 = v140 + 4;
      }
      uint64_t v190 = v142;
      *(void *)&long long v187 = v179;
      uint64_t v154 = (uint64_t)&(*v173)[72
                             * *((unsigned int *)std::__hash_table<std::__hash_value_type<GEOPathMatcherRoadKey,unsigned int>,std::__unordered_map_hasher<GEOPathMatcherRoadKey,std::__hash_value_type<GEOPathMatcherRoadKey,unsigned int>,std::hash<GEOPathMatcherRoadKey>,std::equal_to<GEOPathMatcherRoadKey>,true>,std::__unordered_map_equal<GEOPathMatcherRoadKey,std::__hash_value_type<GEOPathMatcherRoadKey,unsigned int>,std::equal_to<GEOPathMatcherRoadKey>,std::hash<GEOPathMatcherRoadKey>,true>,std::allocator<std::__hash_value_type<GEOPathMatcherRoadKey,unsigned int>>>::__emplace_unique_key_args<GEOPathMatcherRoadKey,std::piecewise_construct_t const&,std::tuple<GEOPathMatcherRoadKey const&>,std::tuple<>>(a1 + 72, (uint64_t *)v179, (uint64_t)&std::piecewise_construct, (_OWORD **)&v187)+ 12)];
      long long v155 = *(_OWORD *)(v154 + 48);
      *(_OWORD *)uint64_t v179 = *(_OWORD *)(v154 + 32);
      long long v180 = v155;
    }
    while (*(_OWORD *)v179 != 0);
    long long v136 = v189;
    uint64_t v139 = v190;
    if (v189 == v190)
    {
      char v74 = a6;
    }
    else
    {
      long long v156 = v190 - 4;
      char v74 = a6;
      if (v190 - 4 > v189)
      {
        int v157 = v189 + 4;
        do
        {
          long long v159 = *((_OWORD *)v157 - 2);
          long long v158 = *((_OWORD *)v157 - 1);
          long long v160 = *((_OWORD *)v156 + 1);
          *((_OWORD *)v157 - 2) = *(_OWORD *)v156;
          *((_OWORD *)v157 - 1) = v160;
          *(_OWORD *)long long v156 = v159;
          *((_OWORD *)v156 + 1) = v158;
          v156 -= 4;
          BOOL v161 = v157 >= v156;
          v157 += 4;
        }
        while (!v161);
      }
    }
  }
  *char v74 = v136;
  v74[1] = v139;
  v74[2] = v191;
}

void sub_188E9AF70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  std::ostringstream::~ostringstream((uint64_t)&a37);
  unint64_t v39 = *(void **)(v37 - 168);
  if (v39)
  {
    *(void *)(v37 - 160) = v39;
    operator delete(v39);
  }
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<maps::path_codec::Dijkstra<GEOPathMatcherRoadKey>::SearchData>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(72 * a2);
}

void GEOPathMatcherRoadNetwork::get_outgoing_roads(uint64_t a1, _OWORD *a2, void **a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void **)(a1 + 128);
  long long v6 = a2[1];
  v35[0] = *a2;
  v35[1] = v6;
  unint64_t v30 = [v5 findOutgoingRoadsFrom:v35];
  a3[1] = *a3;
  std::vector<GEOPathMatcherRoadKey>::reserve(a3, [v30 count]);
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  id v7 = v30;
  uint64_t v8 = [v7 countByEnumeratingWithState:&v31 objects:v37 count:16];
  if (v8)
  {
    uint64_t v9 = *(void *)v32;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v32 != v9) {
          objc_enumerationMutation(v7);
        }
        unsigned int v11 = *(void **)(*((void *)&v31 + 1) + 8 * i);
        if ((unint64_t)[v11 coordinateCount] < 2)
        {
          int v13 = GEOGetGEOPathMatcherLog();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            uint64_t v14 = [v11 coordinatesDescription];
            *(_DWORD *)buf = 138478083;
            *(void *)&uint8_t buf[4] = v11;
            *(_WORD *)&buf[12] = 2113;
            *(void *)&buf[14] = v14;
            _os_log_impl(&dword_188D96000, v13, OS_LOG_TYPE_ERROR, "Found a road that has fewer than 2 points. Not reporting this road to the path-codec library. %{private}@ | %{private}@", buf, 0x16u);
          }
        }
        else
        {
          long long v12 = *(void **)(a1 + 128);
          if (v12) {
            [v12 keyForRoad:v11];
          }
          else {
            memset(buf, 0, sizeof(buf));
          }
          uint64_t v15 = (char *)a3[1];
          unint64_t v16 = (unint64_t)a3[2];
          if ((unint64_t)v15 >= v16)
          {
            uint64_t v19 = (v15 - (unsigned char *)*a3) >> 5;
            unint64_t v20 = v19 + 1;
            if ((unint64_t)(v19 + 1) >> 59) {
              std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v21 = v16 - (void)*a3;
            if (v21 >> 4 > v20) {
              unint64_t v20 = v21 >> 4;
            }
            if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v22 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v22 = v20;
            }
            if (v22) {
              unint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::ControlPoint>>((uint64_t)(a3 + 2), v22);
            }
            else {
              unint64_t v23 = 0;
            }
            uint64_t v24 = &v23[32 * v19];
            long long v25 = *(_OWORD *)&buf[16];
            *(_OWORD *)uint64_t v24 = *(_OWORD *)buf;
            *((_OWORD *)v24 + 1) = v25;
            long long v27 = (char *)*a3;
            char v26 = (char *)a3[1];
            int v28 = v24;
            if (v26 != *a3)
            {
              do
              {
                long long v29 = *((_OWORD *)v26 - 1);
                *((_OWORD *)v28 - 2) = *((_OWORD *)v26 - 2);
                *((_OWORD *)v28 - 1) = v29;
                v28 -= 32;
                v26 -= 32;
              }
              while (v26 != v27);
              char v26 = (char *)*a3;
            }
            long long v18 = v24 + 32;
            *a3 = v28;
            a3[1] = v24 + 32;
            a3[2] = &v23[32 * v22];
            if (v26) {
              operator delete(v26);
            }
          }
          else
          {
            long long v17 = *(_OWORD *)&buf[16];
            *(_OWORD *)uint64_t v15 = *(_OWORD *)buf;
            *((_OWORD *)v15 + 1) = v17;
            long long v18 = v15 + 32;
          }
          a3[1] = v18;
        }
      }
      uint64_t v8 = [v7 countByEnumeratingWithState:&v31 objects:v37 count:16];
    }
    while (v8);
  }
}

void sub_188E9B354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]()
{
}

uint64_t MapsFeature_IsEnabled_RealTimeEVCharger()
{
  return GEOConfigGetBOOL(MapsFeaturesConfig_RealTimeEVCharger, (uint64_t)off_1E9111E18);
}

uint64_t MapsFeature_IsEnabled_Bakersfield()
{
  return GEOConfigGetBOOL(MapsFeaturesConfig_EnableBakersfield, (uint64_t)off_1E9111CD8);
}

void sub_188E9B644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_188E9B7D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_188E9CCD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188E9CF70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  _Unwind_Resume(a1);
}

void sub_188E9D6C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20,void *a21)
{
  _Unwind_Resume(a1);
}

uint64_t parseThrottlePolicy(NSDictionary *a1, NSString *a2, NSString *a3, NSString *a4, unint64_t *a5, double *a6)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = a1;
  unsigned int v11 = a2;
  long long v12 = a3;
  int v13 = a4;
  uint64_t v14 = v10;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v27 = v11;
  v32[0] = v11;
  v32[1] = v12;
  v32[2] = v13;
  uint64_t v15 = [MEMORY[0x1E4F1C978] arrayWithObjects:v32 count:3];
  long long v25 = a6;
  uint64_t v16 = [v15 countByEnumeratingWithState:&v28 objects:v33 count:16];
  long long v17 = v14;
  if (v16)
  {
    uint64_t v18 = *(void *)v29;
    long long v17 = v14;
    while (2)
    {
      uint64_t v19 = 0;
      unint64_t v20 = v17;
      do
      {
        if (*(void *)v29 != v18) {
          objc_enumerationMutation(v15);
        }
        long long v17 = [v20 objectForKeyedSubscript:*(void *)(*((void *)&v28 + 1) + 8 * v19)];

        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          uint64_t v23 = 0;
          goto LABEL_14;
        }
        ++v19;
        unint64_t v20 = v17;
      }
      while (v16 != v19);
      uint64_t v16 = [v15 countByEnumeratingWithState:&v28 objects:v33 count:16];
      if (v16) {
        continue;
      }
      break;
    }
  }

  uint64_t v15 = [v17 objectForKeyedSubscript:@"ResetInterval"];
  uint64_t v21 = [v17 objectForKeyedSubscript:@"AllowedRequests"];
  objc_opt_class();
  if (objc_opt_isKindOfClass() & 1) != 0 && (objc_opt_class(), (objc_opt_isKindOfClass()))
  {
    *a5 = [v21 integerValue];
    [v15 doubleValue];
    *(void *)long long v25 = v22;
    uint64_t v23 = 1;
  }
  else
  {
    uint64_t v23 = 0;
  }

LABEL_14:
  return v23;
}

void sub_188E9DA60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_188E9DBC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_188E9DD14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188E9E074(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id createThrottler(NSString *a1, NSString *a2, uint64_t a3, double a4)
{
  id v7 = a1;
  uint64_t v8 = a2;
  uint64_t v9 = objc_opt_class();
  uint64_t v10 = readSavedState();
  unsigned int v11 = (void *)[v9 alloc];
  long long v12 = [(NSString *)v7 stringByReplacingOccurrencesOfString:@"/" withString:@"_"];
  int v13 = [v10 objectForKeyedSubscript:v12];
  uint64_t v14 = (void *)[v11 initWithKeyPath:v8 requestCount:a3 interval:v13 savedState:a4];

  return v14;
}

void sub_188E9E220(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188E9E260()
{
}

void sub_188E9E304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  long long v12 = v11;

  _Unwind_Resume(a1);
}

void sub_188E9E494(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id readSavedState(void)
{
  uint64_t v0 = _getValue(GeoServicesConfig_ThrottlerState, (uint64_t)off_1E91139B8, 1, 0, 0, 0);
  id v1 = [v0 objectForKeyedSubscript:@"savedAtTime"];
  if (!v1
    || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
    && ([v1 doubleValue], double v3 = v2, GEOGetMonotonicTime(), v3 > v4))
  {

    uint64_t v0 = 0;
    _setValue(GeoServicesConfig_ThrottlerState, (uint64_t)off_1E91139B8, 0, 0, 0);
  }
  if (v0) {
    uint64_t v5 = v0;
  }
  else {
    uint64_t v5 = (void *)MEMORY[0x1E4F1CC08];
  }
  id v6 = v5;

  return v6;
}

void sub_188E9E5FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188E9E8D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188E9E9CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188E9EAE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_188E9EFA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_188E9F1A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _stateDescriptionForTask(void *a1, uint64_t a2)
{
  id v3 = a1;
  double v4 = [MEMORY[0x1E4F1CA60] dictionary];
  uint64_t v5 = (objc_class *)objc_opt_class();
  id v6 = NSStringFromClass(v5);
  [v4 setObject:v6 forKeyedSubscript:@"name"];

  id v7 = NSNumber;
  uint64_t v8 = [v3 progress];
  [v8 fractionCompleted];
  uint64_t v9 = objc_msgSend(v7, "numberWithDouble:");
  [v4 setObject:v9 forKeyedSubscript:@"progress"];

  if (objc_opt_respondsToSelector())
  {
    uint64_t v10 = [v3 stateWithHints:a2];
    if (v10) {
      [v4 addEntriesFromDictionary:v10];
    }
  }

  return v4;
}

double GEOConfigGetDouble(int a1, uint64_t a2)
{
  double v2 = _getValue(a1, a2, 1, 0, 0, 0);
  [v2 doubleValue];
  double v4 = v3;

  return v4;
}

void sub_188E9F808(_Unwind_Exception *exception_object)
{
}

void sub_188E9F8B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188E9FA50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

double GEODataRequestTimeout(uint64_t a1)
{
  if (qword_1EB29F900 != -1) {
    dispatch_once(&qword_1EB29F900, &__block_literal_global_61);
  }
  uint64_t v10 = 0;
  unsigned int v11 = &v10;
  uint64_t v12 = 0x3032000000;
  int v13 = __Block_byref_object_copy__32;
  uint64_t v14 = __Block_byref_object_dispose__32;
  id v15 = 0;
  geo_isolate_sync();
  double v2 = (void *)v11[5];
  double v3 = [NSNumber numberWithInt:HIDWORD(a1) | a1];
  double v4 = [v2 objectForKeyedSubscript:v3];

  if (v4) {
    goto LABEL_6;
  }
  uint64_t v5 = (void *)v11[5];
  id v6 = [NSNumber numberWithInt:a1];
  double v4 = [v5 objectForKeyedSubscript:v6];

  if (v4
    || ([(id)v11[5] objectForKeyedSubscript:&unk_1ED73DB88],
        (double v4 = objc_claimAutoreleasedReturnValue()) != 0))
  {
LABEL_6:
    [v4 doubleValue];
    double v8 = v7;
  }
  else
  {
    double v8 = 60.0;
  }

  _Block_object_dispose(&v10, 8);
  return v8;
}

void sub_188E9FF2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _GEOReadStoredCountryCodeWithFallback()
{
  uint64_t v0 = +[_GEOCountryConfigurationInfo get]();
  id v1 = v0;
  if (v0)
  {
    id v2 = v0;
  }
  else
  {
    double v3 = [MEMORY[0x1E4F1CA20] currentLocale];
    double v4 = [v3 objectForKey:*MEMORY[0x1E4F1C400]];

    +[_GEOCountryConfigurationInfo countryCode:source:]((uint64_t)_GEOCountryConfigurationInfo, v4, 0x103u);
    id v2 = (id)objc_claimAutoreleasedReturnValue();
  }

  return v2;
}

BOOL GEOCreateBodyDataForProtocolBufferRequest(void *a1, unsigned int a2, int a3, void *a4)
{
  v25[1] = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  id v8 = objc_alloc_init(MEMORY[0x1E4F94098]);
  [v7 writeTo:v8];
  id v9 = [v8 immutableData];

  BOOL v10 = 0;
  if (!v9) {
    goto LABEL_16;
  }
  uint64_t v11 = a2;
  if (a3 && a2 == 2560)
  {
    unint64_t v12 = [v9 length];
    if (v12 > GEOConfigGetUInteger(GeoServicesConfig_DataRequestMinLenForCompression, (uint64_t)off_1E9113C68))
    {
      if (compression_encode_scratch_buffer_size(COMPRESSION_LZ4))
      {
        int v13 = (char *)v25 - ((MEMORY[0x1F4188790]() + 15) & 0xFFFFFFFFFFFFFFF0);
        bzero(v13, v14);
      }
      else
      {
        int v13 = 0;
      }
      size_t v15 = (unint64_t)((double)(unint64_t)[v9 length] * 1.1);
      uint64_t v16 = (uint8_t *)malloc_type_malloc(v15, 0xCC9D6F81uLL);
      id v9 = v9;
      size_t v17 = compression_encode_buffer(v16, v15, (const uint8_t *)[v9 bytes], objc_msgSend(v9, "length"), v13, COMPRESSION_LZ4);
      if (v17)
      {
        LODWORD(v10) = 1;
        uint64_t v18 = [MEMORY[0x1E4F1C9B8] dataWithBytesNoCopy:v16 length:v17 freeWhenDone:1];

        id v9 = (id)v18;
        goto LABEL_12;
      }
      free(v16);
    }
    LODWORD(v10) = 0;
  }
LABEL_12:
  id v19 = v7;
  id v20 = v9;
  uint64_t v21 = (void *)MEMORY[0x18C1203C0]();
  id v22 = objc_alloc_init(MEMORY[0x1E4F94098]);
  writeARPCPreamble(v22, v10, v11 == 2560);
  objc_msgSend(v22, "writeBigEndianFixed32:", objc_msgSend(v19, "requestTypeCode"));
  [v22 writeProtoBuffer:v20];
  uint64_t v23 = [v22 immutableData];

  BOOL v10 = v23 != 0;
  if (a4 && v23) {
    *a4 = v23;
  }

LABEL_16:
  return v10;
}

void sub_188EA0FB4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EA1088(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void writeARPCPreamble(void *a1, int a2, int a3)
{
  id v5 = a1;
  int v6 = a2 | a3;
  if (a2 | a3) {
    uint64_t v7 = 2;
  }
  else {
    uint64_t v7 = 1;
  }
  id v24 = v5;
  [v5 writeBigEndianFixed16:v7];
  id v8 = [MEMORY[0x1E4F1CA20] preferredLanguages];
  if ([v8 count]
    && ([v8 objectAtIndex:0], (id v9 = objc_claimAutoreleasedReturnValue()) != 0))
  {
    id v10 = v9;
    uint64_t v11 = [MEMORY[0x1E4F1CA20] currentLocale];
    unint64_t v12 = [v11 objectForKey:*MEMORY[0x1E4F1C400]];

    if ([v12 length])
    {
      int v13 = [NSString stringWithFormat:@"%@_%@", v10, v12];
    }
    else
    {
      int v13 = v10;
    }
  }
  else
  {
    unint64_t v12 = [MEMORY[0x1E4F1CA20] currentLocale];
    int v13 = [v12 localeIdentifier];
    id v10 = 0;
  }

  id v14 = v13;
  [v24 writeBigEndianShortThenString:v14];

  size_t v15 = [MEMORY[0x1E4F28B50] mainBundle];
  uint64_t v16 = [v15 bundleIdentifier];

  [v24 writeBigEndianShortThenString:v16];
  size_t v17 = NSString;
  uint64_t v18 = +[GEOPlatform sharedPlatform];
  id v19 = [v18 osVersion];
  id v20 = +[GEOPlatform sharedPlatform];
  uint64_t v21 = [v20 buildVersion];
  id v22 = [v17 stringWithFormat:@"%@.%@", v19, v21];

  [v24 writeBigEndianShortThenString:v22];
  if (v6)
  {
    if (a2) {
      uint64_t v23 = @"LZ4";
    }
    else {
      uint64_t v23 = @"NONE";
    }
    [v24 writeBigEndianShortThenString:v23];
  }
}

id _protobufHTTPHeaders(void *a1, unint64_t a2, void *a3)
{
  id v5 = a1;
  id v6 = a3;
  uint64_t UInteger = GEOConfigGetUInteger(GeoServicesConfig_ProtobufSessionAdditionalHTTPHeaders, (uint64_t)off_1E9113988);
  if (!UInteger)
  {
    id v10 = v5;
    goto LABEL_22;
  }
  char v8 = UInteger;
  if (v5)
  {
    id v9 = (void *)[v5 mutableCopy];
  }
  else
  {
    id v9 = [MEMORY[0x1E4F1CA60] dictionary];
  }
  id v10 = v9;
  if (v8)
  {
    [v9 setObject:@"application/octet-stream" forKeyedSubscript:@"Content-Type"];
    if ((v8 & 2) == 0)
    {
LABEL_8:
      if ((v8 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_15;
    }
  }
  else if ((v8 & 2) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v11 = GEOThrottleKeyStringForRequest(a2);
  [v10 setObject:v11 forKeyedSubscript:@"X-Apple-Maps-Request-Type"];

  if ((v8 & 0x20) == 0)
  {
LABEL_9:
    if ((v8 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_16;
  }
LABEL_15:
  unint64_t v12 = +[GEOPlatform sharedPlatform];
  int v13 = [v12 productName];
  [v10 setObject:v13 forKeyedSubscript:@"X-Apple-Maps-OS-Name"];

  if ((v8 & 0x40) == 0)
  {
LABEL_10:
    if ((v8 & 0x80) == 0) {
      goto LABEL_11;
    }
LABEL_17:
    uint64_t v16 = +[GEOPlatform sharedPlatform];
    size_t v17 = [v16 buildVersion];
    [v10 setObject:v17 forKeyedSubscript:@"X-Apple-Maps-OS-Build"];

    if (!v6) {
      goto LABEL_22;
    }
    goto LABEL_18;
  }
LABEL_16:
  id v14 = +[GEOPlatform sharedPlatform];
  size_t v15 = [v14 osVersion];
  [v10 setObject:v15 forKeyedSubscript:@"X-Apple-Maps-OS-Version"];

  if (v8 < 0) {
    goto LABEL_17;
  }
LABEL_11:
  if (!v6) {
    goto LABEL_22;
  }
LABEL_18:
  if ((v8 & 4) != 0)
  {
    id v20 = [v6 appIdentifier];
    [v10 setObject:v20 forKeyedSubscript:@"X-Apple-Maps-App-Identifier"];

    if ((v8 & 8) == 0)
    {
LABEL_20:
      if ((v8 & 0x10) == 0) {
        goto LABEL_22;
      }
      goto LABEL_21;
    }
  }
  else if ((v8 & 8) == 0)
  {
    goto LABEL_20;
  }
  uint64_t v21 = [v6 appMajorVersion];
  [v10 setObject:v21 forKeyedSubscript:@"X-Apple-Maps-App-Version-Major"];

  if ((v8 & 0x10) != 0)
  {
LABEL_21:
    uint64_t v18 = [v6 appMinorVersion];
    [v10 setObject:v18 forKeyedSubscript:@"X-Apple-Maps-App-Version-Minor"];
  }
LABEL_22:

  return v10;
}

void sub_188EA1680(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EA17E4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EA18F4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EA2024(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOThrottleKeyStringForRequest(unint64_t a1)
{
  return objc_msgSend(NSString, "stringWithFormat:", @"%#x", GEOThrottleKeyMakeFromRequestKind(a1));
}

uint64_t _GEOPDPlaceRequestIsDirty(uint64_t a1)
{
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 120));
  if (*(__int16 *)(a1 + 132) < 0) {
    return 1;
  }
  unsigned int v2 = *(unsigned __int16 *)(a1 + 132);
  if ((v2 & 0x10) != 0)
  {
    if (GEOPDAnalyticMetadataIsDirty(*(os_unfair_lock_s **)(a1 + 24))) {
      return 1;
    }
    unsigned int v2 = *(unsigned __int16 *)(a1 + 132);
  }
  if ((v2 & 0x40) != 0)
  {
    if (GEOPDClientMetadataIsDirty(*(os_unfair_lock_s **)(a1 + 40))) {
      return 1;
    }
    unsigned int v2 = *(unsigned __int16 *)(a1 + 132);
  }
  if ((v2 & 0x6080) != 0) {
    return 1;
  }
  if ((v2 & 0x800) == 0) {
    goto LABEL_12;
  }
  if (GEOPDPlaceRequestParametersIsDirty(*(os_unfair_lock_s **)(a1 + 80))) {
    return 1;
  }
  unsigned int v2 = *(unsigned __int16 *)(a1 + 132);
LABEL_12:
  if ((v2 & 0x1520) != 0) {
    return 1;
  }
  return (v2 >> 9) & 1;
}

void sub_188EA23D4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _deleteOldEntitledKey(void *a1, uint64_t a2, void *a3)
{
  id v9 = a1;
  id v5 = a3;
  if (GEOConfig_keyRequiresEntitlement(v9, v6))
  {
    uint64_t v7 = GEOConfig_stripEntitlement(v9);
    char v8 = [v5 getConfigValueForKey:v7 countryCode:0 options:a2 source:0];
    if (v8) {
      [v5 setConfigValue:0 forKey:v7 options:a2 synchronous:1];
    }
  }
}

uint64_t GEOConfig_keyRequiresEntitlement(void *a1, const char *a2)
{
  return [a1 hasPrefix:@"entitled/"];
}

uint64_t _setValue(int a1, uint64_t a2, void *a3, int a4, uint64_t a5)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id v9 = a3;
  if (a1 && a2)
  {
    uint64_t MetadataStruct = _getMetadataStruct(a1, a2);
    if (MetadataStruct)
    {
      uint64_t v11 = MetadataStruct;
      id v12 = *(id *)(MetadataStruct + 8);
      uint64_t v13 = *(void *)(v11 + 24);
      if (*(unsigned char *)v11) {
        uint64_t v14 = *(void *)(v11 + 48);
      }
      else {
        uint64_t v14 = 0;
      }
      uint64_t v17 = *(void *)(v11 + 16);
      uint64_t v18 = (void (**)(void, void))MEMORY[0x18C120660](v14);
      id v19 = v9;
      id v9 = v19;
      if (!a4)
      {
        if (!v13)
        {
LABEL_77:
          long long v28 = 0;
LABEL_53:

          if (v28)
          {
            if (qword_1EB29FEE0 != -1) {
              dispatch_once(&qword_1EB29FEE0, &__block_literal_global_127);
            }
            if (_MergedGlobals_270 & 1) == 0 && (objc_opt_class(), (objc_opt_isKindOfClass()) && v18)
            {
              ((void (**)(void, void *))v18)[2](v18, v28);
              id v9 = (id)objc_claimAutoreleasedReturnValue();
            }
            else
            {
              id v9 = v28;
            }
          }
          else
          {
            id v9 = 0;
          }
          long long v29 = _GEOConfigProxy();
          long long v30 = [v29 configStoreForOptions:v17];

          [v30 setConfigValue:v9 forKey:v12 options:v17 synchronous:a5];
          if ((v17 & 6) == 0) {
            goto LABEL_72;
          }
          long long v31 = _GEOConfigProxy();
          long long v32 = [v31 configExpiryForOptions:v17];

          if (!v9)
          {
            [v32 setConfigKeyExpiry:v12 date:0 osVersion:0];
LABEL_71:

LABEL_72:
            uint64_t v16 = 1;
LABEL_73:

            goto LABEL_74;
          }
          if ((v17 & 2) != 0)
          {
            long long v33 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceNow:3600.0];
            if ((v17 & 4) != 0) {
              goto LABEL_66;
            }
          }
          else
          {
            long long v33 = 0;
            if ((v17 & 4) != 0)
            {
LABEL_66:
              uint64_t v34 = +[GEOPlatform sharedPlatform];
              BOOL v35 = [v34 buildVersion];

LABEL_70:
              [v32 setConfigKeyExpiry:v12 date:v33 osVersion:v35];

              goto LABEL_71;
            }
          }
          BOOL v35 = 0;
          goto LABEL_70;
        }
        if (!v19) {
          goto LABEL_51;
        }
LABEL_38:
        id v24 = [MEMORY[0x1E4F1CA98] null];

        if (v24 != v9)
        {
          switch(v13)
          {
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 9:
              objc_opt_class();
              if (objc_opt_isKindOfClass()) {
                long long v25 = v9;
              }
              else {
                long long v25 = 0;
              }
              id v26 = v25;
              goto LABEL_52;
            case 8:
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) == 0) {
                goto LABEL_77;
              }
              id v26 = [v9 allObjects];
              goto LABEL_52;
            case 10:
              objc_opt_class();
              if (objc_opt_isKindOfClass()) {
                goto LABEL_51;
              }
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) == 0)
              {
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) == 0) {
                  goto LABEL_77;
                }
              }
              long long v27 = (void *)MEMORY[0x1E4F1C9C8];
              [v9 doubleValue];
              objc_msgSend(v27, "dateWithTimeIntervalSinceReferenceDate:");
              id v26 = (id)objc_claimAutoreleasedReturnValue();
              break;
            case 11:
              objc_opt_class();
              if (objc_opt_isKindOfClass()) {
                goto LABEL_51;
              }
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) == 0) {
                goto LABEL_77;
              }
              id v26 = (id)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBase64EncodedString:v9 options:0];
              break;
            default:
              goto LABEL_77;
          }
          goto LABEL_52;
        }
LABEL_51:
        id v26 = v9;
LABEL_52:
        long long v28 = v26;
        goto LABEL_53;
      }
      if (v13)
      {
        id v20 = [MEMORY[0x1E4F1CA98] null];

        if (v20 == v9)
        {
LABEL_36:

          goto LABEL_37;
        }
        switch(v13)
        {
          case 1:
            if (!v9) {
              goto LABEL_36;
            }
            break;
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
            if (!v9) {
              goto LABEL_36;
            }
            break;
          case 7:
            if (!v9) {
              goto LABEL_36;
            }
            break;
          case 8:
            if (!v9) {
              goto LABEL_36;
            }
            break;
          case 9:
            if (!v9) {
              goto LABEL_36;
            }
            break;
          case 10:
            if (!v9) {
              goto LABEL_36;
            }
            break;
          case 11:
            if (!v9) {
              goto LABEL_36;
            }
            break;
          default:
            goto LABEL_21;
        }
        objc_opt_class();
        char isKindOfClass = objc_opt_isKindOfClass();

        if (isKindOfClass)
        {
LABEL_37:
          id v23 = v9;
          if (!v9) {
            goto LABEL_51;
          }
          goto LABEL_38;
        }
      }
      else
      {
LABEL_21:
      }
      id v22 = j__GEOGetUserDefaultsLog();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        int v37 = 138543362;
        id v38 = v12;
        _os_log_impl(&dword_188D96000, v22, OS_LOG_TYPE_ERROR, "invalid type given for key %{public}@", (uint8_t *)&v37, 0xCu);
      }

      uint64_t v16 = 0;
      goto LABEL_73;
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      LOWORD(v37) = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Assertion failed: metadataStruct != ((void *)0)", (uint8_t *)&v37, 2u);
    }
  }
  else
  {
    size_t v15 = j__GEOGetUserDefaultsLog();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v37) = 0;
      _os_log_impl(&dword_188D96000, v15, OS_LOG_TYPE_ERROR, "tried to set invalid config key", (uint8_t *)&v37, 2u);
    }
  }
  uint64_t v16 = 0;
LABEL_74:

  return v16;
}

void GEOConfig_createEntitledKeyPathForKey(void *a1, uint64_t a2, void *a3)
{
  id v10 = a1;
  id v5 = a3;
  if (v5 && [v10 hasPrefix:@"entitled/"])
  {
    id v6 = [v5 getConfigValueForKey:@"entitled" countryCode:0 options:a2 source:0];
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      [v5 setConfigValue:MEMORY[0x1E4F1CC08] forKey:@"entitled" options:a2 synchronous:1];
    }
    uint64_t v7 = GEOConfig_getRequiredEntitlement(v10);
    char v8 = [v6 objectForKeyedSubscript:v7];
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      id v9 = [@"entitled/" stringByAppendingString:v7];
      [v5 setConfigValue:MEMORY[0x1E4F1CC08] forKey:v9 options:a2 synchronous:1];
    }
  }
}

BOOL GEOPDAnalyticMetadataIsDirty(os_unfair_lock_s *a1)
{
  if (!a1) {
    return 0;
  }
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner(a1 + 36);
  BOOL v2 = (a1[41]._os_unfair_lock_opaque & 0x3FFC00) != 0;
  os_unfair_lock_unlock(a1 + 36);
  return v2;
}

os_unfair_lock_s *GEOPDClientMetadataIsDirty(os_unfair_lock_s *result)
{
  if (result)
  {
    id v1 = result;
    os_unfair_lock_lock_with_options();
    uint64_t IsDirty = _GEOPDClientMetadataIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 70);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

id GEOConfig_getRequiredEntitlement(void *a1)
{
  id v1 = a1;
  if ([v1 hasPrefix:@"entitled/"])
  {
    BOOL v2 = GEOConfig_splitKeyPathComponents(v1);
    if ((unint64_t)[v2 count] < 3)
    {
      double v3 = 0;
    }
    else
    {
      double v3 = [v2 objectAtIndexedSubscript:1];
    }
  }
  else
  {
    double v3 = 0;
  }

  return v3;
}

void sub_188EA3BE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  os_unfair_lock_unlock(v16);
  _Unwind_Resume(a1);
}

id GEOConfigGetDictionary(int a1, uint64_t a2)
{
  return _getValue(a1, a2, 1, 0, 0, 0);
}

void sub_188EA4360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188EA4500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188EA45DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_188EA4720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  _Unwind_Resume(a1);
}

void sub_188EA482C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16)
{
  _Unwind_Resume(a1);
}

void sub_188EA4938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id a18)
{
  _Unwind_Resume(a1);
}

BOOL GEODisplayStringReadAllFrom(void *a1, void *a2, int a3)
{
  id v5 = a2;
  objc_sync_enter(v5);
  if (v5)
  {
    id v6 = (int *)MEMORY[0x1E4F940E8];
    uint64_t v7 = (int *)MEMORY[0x1E4F940E0];
    char v8 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v5[*MEMORY[0x1E4F940E8]] < *(void *)&v5[*MEMORY[0x1E4F940E0]])
    {
      id v9 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v5[*v8]) {
          break;
        }
        char v10 = 0;
        unsigned int v11 = 0;
        unint64_t v12 = 0;
        while (1)
        {
          uint64_t v13 = *v6;
          unint64_t v14 = *(void *)&v5[v13];
          if (v14 == -1 || v14 >= *(void *)&v5[*v7]) {
            break;
          }
          char v15 = *(unsigned char *)(*(void *)&v5[*v9] + v14);
          *(void *)&v5[v13] = v14 + 1;
          v12 |= (unint64_t)(v15 & 0x7F) << v10;
          if ((v15 & 0x80) == 0) {
            goto LABEL_13;
          }
          v10 += 7;
          if (v11++ >= 9)
          {
            unint64_t v12 = 0;
            int v17 = v5[*v8];
            goto LABEL_15;
          }
        }
        v5[*v8] = 1;
LABEL_13:
        int v17 = v5[*v8];
        if (v5[*v8]) {
          unint64_t v12 = 0;
        }
LABEL_15:
        if (v17 || (v12 & 7) == 4) {
          break;
        }
        if ((v12 >> 3) == 1)
        {
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_29;
          }
          id v19 = objc_alloc_init(GEOLocalizedString);
          if (!GEOLocalizedStringReadAllFrom((uint64_t)v19, v5, a3))
          {

            goto LABEL_29;
          }
          PBReaderRecallMark();
          objc_msgSend(a1, "addLocalizedStrings:", v19, 0, 0);
        }
        else
        {
          if (!a1[1])
          {
            id v20 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            uint64_t v21 = (void *)a1[1];
            a1[1] = v20;
          }
          if (!PBUnknownFieldAdd()) {
            goto LABEL_29;
          }
        }
      }
      while (*(void *)&v5[*v6] < *(void *)&v5[*v7]);
    }
    BOOL v22 = v5[*v8] == 0;
  }
  else
  {
LABEL_29:
    BOOL v22 = 0;
  }
  objc_sync_exit(v5);

  return v22;
}

void sub_188EA4F64(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t __DeleteOfflineDataNotMatchingVersions_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 64);
  id v5 = *(void **)(a1 + 32);
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v6 + 40);
  int v7 = [v5 bindIntParameter:"@layer" toValue:v4 inStatement:a2 error:&obj];
  objc_storeStrong((id *)(v6 + 40), obj);
  if (!v7) {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 48);
  id v9 = *(void **)(a1 + 32);
  uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8);
  id v18 = *(id *)(v10 + 40);
  int v11 = [v9 bindInt64Parameter:"@versionA" toValue:v8 inStatement:a2 error:&v18];
  objc_storeStrong((id *)(v10 + 40), v18);
  if (!v11) {
    return 0;
  }
  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v13 = *(void **)(a1 + 32);
  uint64_t v14 = *(void *)(*(void *)(a1 + 40) + 8);
  id v17 = *(id *)(v14 + 40);
  uint64_t v15 = [v13 bindInt64Parameter:"@versionB" toValue:v12 inStatement:a2 error:&v17];
  objc_storeStrong((id *)(v14 + 40), v17);
  return v15;
}

uint64_t __DeleteOfflineDataBatchNotMatchingVersions_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 64);
  id v5 = *(void **)(a1 + 32);
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v6 + 40);
  int v7 = [v5 bindIntParameter:"@layer" toValue:v4 inStatement:a2 error:&obj];
  objc_storeStrong((id *)(v6 + 40), obj);
  if (!v7) {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 48);
  id v9 = *(void **)(a1 + 32);
  uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8);
  id v18 = *(id *)(v10 + 40);
  int v11 = [v9 bindInt64Parameter:"@versionA" toValue:v8 inStatement:a2 error:&v18];
  objc_storeStrong((id *)(v10 + 40), v18);
  if (!v11) {
    return 0;
  }
  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v13 = *(void **)(a1 + 32);
  uint64_t v14 = *(void *)(*(void *)(a1 + 40) + 8);
  id v17 = *(id *)(v14 + 40);
  uint64_t v15 = [v13 bindInt64Parameter:"@versionB" toValue:v12 inStatement:a2 error:&v17];
  objc_storeStrong((id *)(v14 + 40), v17);
  return v15;
}

uint64_t __SetSubscriptionShouldSyncToPairedDevice_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8);
  id obj = *(id *)(v6 + 40);
  int v7 = [v4 bindInt64Parameter:"@subscription_pk" toValue:v5 inStatement:a2 error:&obj];
  objc_storeStrong((id *)(v6 + 40), obj);
  if (!v7) {
    return 0;
  }
  uint64_t v8 = *(void **)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8);
  id v18 = *(id *)(v10 + 40);
  int v11 = [v8 bindUUIDParameter:"@device_id" toValue:v9 inStatement:a2 error:&v18];
  objc_storeStrong((id *)(v10 + 40), v18);
  if (!v11) {
    return 0;
  }
  uint64_t v12 = *(void **)(a1 + 32);
  uint64_t v13 = *(unsigned __int8 *)(a1 + 64);
  uint64_t v14 = *(void *)(*(void *)(a1 + 48) + 8);
  id v17 = *(id *)(v14 + 40);
  uint64_t v15 = [v12 bindIntParameter:"@should_sync" toValue:v13 inStatement:a2 error:&v17];
  objc_storeStrong((id *)(v14 + 40), v17);
  return v15;
}

uint64_t __ClearSubscriptionsForSyncToPairedDevice_block_invoke(void *a1, uint64_t a2)
{
  double v3 = (void *)a1[4];
  uint64_t v2 = a1[5];
  uint64_t v4 = *(void *)(a1[6] + 8);
  id obj = *(id *)(v4 + 40);
  uint64_t v5 = [v3 bindUUIDParameter:"@device_id" toValue:v2 inStatement:a2 error:&obj];
  objc_storeStrong((id *)(v4 + 40), obj);
  return v5;
}

uint64_t __ClearSubscriptionDownloadState_block_invoke(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[6];
  double v3 = (void *)a1[4];
  uint64_t v4 = *(void *)(a1[5] + 8);
  id obj = *(id *)(v4 + 40);
  uint64_t v5 = [v3 bindInt64Parameter:"@subscription_pk" toValue:v2 inStatement:a2 error:&obj];
  objc_storeStrong((id *)(v4 + 40), obj);
  return v5;
}

uint64_t __GetDataForOfflineKeyInFullyLoadedSubscription_block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(unsigned int *)(a1 + 72);
  uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8);
  id obj = *(id *)(v6 + 40);
  int v7 = [v4 bindIntParameter:"@offline_data_layer" toValue:v5 inStatement:a2 error:&obj];
  objc_storeStrong((id *)(v6 + 40), obj);
  if (!v7) {
    return 0;
  }
  uint64_t v8 = *(void **)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = *(void *)(*(void *)(a1 + 56) + 8);
  id v25 = *(id *)(v10 + 40);
  int v11 = [v8 bindInt64Parameter:"@offline_data_version" toValue:v9 inStatement:a2 error:&v25];
  objc_storeStrong((id *)(v10 + 40), v25);
  if (!v11) {
    return 0;
  }
  uint64_t v12 = *(void **)(a1 + 32);
  uint64_t v13 = *(void *)(a1 + 40);
  uint64_t v14 = *(void *)(*(void *)(a1 + 56) + 8);
  id v24 = *(id *)(v14 + 40);
  int v15 = [v12 bindBlobParameter:"@offline_data_key" toValue:v13 inStatement:a2 error:&v24];
  objc_storeStrong((id *)(v14 + 40), v24);
  if (!v15) {
    return 0;
  }
  uint64_t v16 = sqlite3_step(a2);
  while (v16 == 100)
  {
    [*(id *)(a1 + 32) int64ForColumn:0 inStatment:a2];
    uint64_t v17 = 1;
    id v18 = [*(id *)(a1 + 32) UUIDForColumn:1 inStatment:a2];
    if (!(*(unsigned int (**)(void))(*(void *)(a1 + 48) + 16))()) {
      goto LABEL_11;
    }
    uint64_t v16 = sqlite3_step(a2);
  }
  if (v16 == 101) {
    return 1;
  }
  id v19 = *(void **)(a1 + 32);
  uint64_t v20 = *(void *)(*(void *)(a1 + 56) + 8);
  id v23 = *(id *)(v20 + 40);
  [v19 reportSQLiteErrorCode:v16 method:@"step" error:&v23];
  id v21 = v23;
  uint64_t v17 = 0;
  id v18 = *(void **)(v20 + 40);
  *(void *)(v20 + 40) = v21;
LABEL_11:

  return v17;
}

uint64_t __GetBatchDataForOfflineDataPK_block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8);
  id obj = *(id *)(v6 + 40);
  int v7 = [v4 bindInt64Parameter:"@offline_data_batch_refs_offline_data_pk" toValue:v5 inStatement:a2 error:&obj];
  objc_storeStrong((id *)(v6 + 40), obj);
  if (!v7) {
    return 0;
  }
  uint64_t v8 = sqlite3_step(a2);
  while (v8 == 100)
  {
    [*(id *)(a1 + 32) int64ForColumn:0 inStatment:a2];
    uint64_t v9 = [*(id *)(a1 + 32) blobForColumn:1 inStatment:a2];
    uint64_t v10 = [*(id *)(a1 + 32) UUIDForColumn:2 inStatment:a2];
    [*(id *)(a1 + 32) int64ForColumn:3 inStatment:a2];
    [*(id *)(a1 + 32) int64ForColumn:4 inStatment:a2];
    [*(id *)(a1 + 32) int64ForColumn:5 inStatment:a2];
    if (((*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))() & 1) == 0)
    {

      uint64_t v11 = 1;
      goto LABEL_10;
    }
    uint64_t v8 = sqlite3_step(a2);
  }
  if (v8 == 101) {
    return 1;
  }
  uint64_t v12 = *(void **)(a1 + 32);
  uint64_t v13 = *(void *)(*(void *)(a1 + 48) + 8);
  id v16 = *(id *)(v13 + 40);
  [v12 reportSQLiteErrorCode:v8 method:@"step" error:&v16];
  id v14 = v16;
  uint64_t v11 = 0;
  uint64_t v9 = *(void **)(v13 + 40);
  *(void *)(v13 + 40) = v14;
LABEL_10:

  return v11;
}

unint64_t GEOPDResultRefinementSectionReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 52);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 48)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unsigned int v12 = ((*(unsigned __int8 *)(a1 + 60) >> 1) & 1)
      + (*(unsigned char *)(a1 + 60) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 2) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 3) & 1);
  while (2)
  {
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    switch(a3[v9])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v16 = v12 > 1;
        char v17 = v16 & ~(_BYTE)v11 | v7;
        unsigned __int8 v18 = v16 | v11;
        char v54 = v17;
        char v55 = v18 | v17;
        if ((v18 | v8)) {
          id v19 = 0;
        }
        else {
          id v19 = a3;
        }
        char v56 = (v19 == 0) | v18;
        BOOL v57 = v18;
        uint64_t v20 = (int *)MEMORY[0x1E4F940E8];
        id v21 = (int *)MEMORY[0x1E4F940C8];
        BOOL v22 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v12;
LABEL_7:
        uint64_t v13 = v7;
LABEL_8:
        uint64_t v14 = v10;
        uint64_t v15 = v11;
LABEL_10:
        ++v9;
        uint64_t v7 = v13;
        uint64_t v10 = v14;
        uint64_t v11 = v15;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(void *)(v3 + *v20) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v21)) {
      goto LABEL_68;
    }
    char v23 = 0;
    unsigned int v24 = 0;
    unint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = *v20;
      uint64_t v27 = *(void *)(v3 + v26);
      unint64_t v28 = v27 + 1;
      if (v27 == -1 || v28 > *(void *)(v3 + *v6)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(v3 + *v22) + v27);
      *(void *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0) {
        goto LABEL_25;
      }
      v23 += 7;
      if (v24++ >= 9)
      {
        unint64_t v25 = 0;
        int v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v21) = 1;
LABEL_25:
    int v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(unsigned char *)(v3 + *v21)) {
      unint64_t v25 = 0;
    }
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_68:
      int v52 = 1;
      goto LABEL_69;
    }
    unint64_t v33 = v25 >> 3;
    BOOL v34 = v57;
    if ((v56 & 1) == 0)
    {
      BOOL v35 = v19;
      do
      {
        int v37 = *v35++;
        int v36 = v37;
        BOOL v34 = v37 != 0;
        if (v37) {
          BOOL v38 = v36 == v33;
        }
        else {
          BOOL v38 = 1;
        }
      }
      while (!v38);
    }
    if (v33 != 3) {
      break;
    }
    if (v34)
    {
      if ((*(unsigned char *)(a1 + 60) & 8) == 0)
      {
        uint64_t v39 = PBReaderReadString();
        uint64_t v40 = 40;
        goto LABEL_47;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        goto LABEL_86;
      }
      char v47 = 16 * *(unsigned char *)(a1 + 60);
LABEL_65:
      v9 += v47 >> 7;
      goto LABEL_66;
    }
LABEL_59:
    char v46 = PBReaderSkipValueWithTag();
    id v21 = (int *)MEMORY[0x1E4F940C8];
    if ((v46 & 1) == 0)
    {
      int v52 = 0;
LABEL_69:
      char v53 = &OBJC_IVAR___GEOPDRelatedCollectionSection__collectionIds;
      goto LABEL_70;
    }
LABEL_67:
    if (!(v55 & 1 | (v9 != 0))) {
      goto LABEL_68;
    }
  }
  if (v33 != 2)
  {
    if (v33 == 1)
    {
      if (v34)
      {
        if ((*(unsigned char *)(a1 + 60) & 4) == 0)
        {
          uint64_t v39 = PBReaderReadString();
          uint64_t v40 = 32;
LABEL_47:
          long long v41 = *(void **)(a1 + v40);
          *(void *)(a1 + v40) = v39;

          --v9;
LABEL_66:
          id v21 = (int *)MEMORY[0x1E4F940C8];
          goto LABEL_67;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_86;
        }
        char v47 = 32 * *(unsigned char *)(a1 + 60);
        goto LABEL_65;
      }
    }
    else if ((v54 & 1) != 0 && (*(unsigned char *)(a1 + 60) & 1) == 0)
    {
      if (!*(void *)(a1 + 16))
      {
        id v43 = objc_alloc_init(MEMORY[0x1E4F940B0]);
        unint64_t v44 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v43;
      }
      int v45 = PBUnknownFieldAdd();
      id v21 = (int *)MEMORY[0x1E4F940C8];
      if (!v45)
      {
        int v52 = 0;
        char v53 = &OBJC_IVAR___GEOPDRelatedCollectionSection__collectionIds;
        goto LABEL_71;
      }
      goto LABEL_67;
    }
    goto LABEL_59;
  }
  if (!v34 || (*(unsigned char *)(a1 + 60) & 2) != 0) {
    goto LABEL_59;
  }
  if ((PBReaderPlaceMark() & 1) == 0) {
    goto LABEL_86;
  }
  unint64_t v42 = objc_alloc_init(GEOPDResultRefinement);
  if (GEOPDResultRefinementReadAllFrom((uint64_t)v42, (void *)v3, v10 & 1))
  {
    PBReaderRecallMark();
    -[GEOPDResultRefinementSection _addNoFlagsResultRefinement:](a1, v42);

    goto LABEL_66;
  }

LABEL_86:
  int v52 = 0;
  char v53 = &OBJC_IVAR___GEOPDRelatedCollectionSection__collectionIds;
  id v21 = (int *)MEMORY[0x1E4F940C8];
LABEL_70:
  if ((v54 & 1) == 0) {
    goto LABEL_72;
  }
LABEL_71:
  *(unsigned char *)(a1 + v53[98]) |= 1u;
LABEL_72:
  if (v57 || (v52 & 1) == 0)
  {
    *(unsigned char *)(a1 + v53[98]) |= 4u;
    *(unsigned char *)(a1 + v53[98]) |= 2u;
    *(unsigned char *)(a1 + v53[98]) |= 8u;
  }
  else if (v19)
  {
    while (1)
    {
      int v48 = *v19++;
      char v49 = 4;
      switch(v48)
      {
        case 0:
          goto LABEL_79;
        case 1:
          goto LABEL_78;
        case 2:
          char v49 = 2;
          goto LABEL_78;
        case 3:
          char v49 = 8;
LABEL_78:
          *(unsigned char *)(a1 + v53[98]) |= v49;
          break;
        default:
          continue;
      }
    }
  }
LABEL_79:
  if (v52) {
    unint64_t v3 = *(unsigned char *)(v3 + *v21) == 0;
  }
  else {
    unint64_t v3 = 0;
  }
  if (v57)
  {
    long long v50 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  return v3;
}

BOOL GEOPDResultRefinementGroupIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  uint64_t v2 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (a1[*v4]) {
        goto LABEL_81;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        BOOL v13 = v7++ >= 9;
        if (v13)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        goto LABEL_81;
      }
      unint64_t v17 = v8 >> 3;
      if ((v8 >> 3) == 3) {
        break;
      }
      if (v17 == 2)
      {
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_83;
        }
        objc_msgSend(a1, "position", 0, 0);
        [a1 length];
        while (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
        {
          char v28 = 0;
          unsigned int v29 = 0;
          unint64_t v30 = 0;
          while (1)
          {
            uint64_t v31 = *v2;
            uint64_t v32 = *(void *)&a1[v31];
            unint64_t v33 = v32 + 1;
            if (v32 == -1 || v33 > *(void *)&a1[*v3]) {
              break;
            }
            char v34 = *(unsigned char *)(*(void *)&a1[*v5] + v32);
            *(void *)&a1[v31] = v33;
            v30 |= (unint64_t)(v34 & 0x7F) << v28;
            if ((v34 & 0x80) == 0) {
              goto LABEL_64;
            }
            v28 += 7;
            BOOL v13 = v29++ >= 9;
            if (v13)
            {
              unint64_t v30 = 0;
              int v35 = a1[*v4];
              goto LABEL_66;
            }
          }
          a1[*v4] = 1;
LABEL_64:
          int v35 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v30 = 0;
          }
LABEL_66:
          int v36 = v30 & 7;
          if (v35 || v36 == 4) {
            break;
          }
          if ((v30 >> 3) == 1)
          {
            if (v36 != 2 || !PBReaderPlaceMark() || !GEOPDResultRefinementSectionIsValid(a1))
            {
LABEL_82:
              PBReaderRecallMark();
              goto LABEL_83;
            }
            PBReaderRecallMark();
          }
          else if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
            goto LABEL_82;
          }
        }
LABEL_77:
        int v38 = a1[*v4];
        PBReaderRecallMark();
        if (v38) {
          goto LABEL_83;
        }
LABEL_78:
        PBReaderRecallMark();
        goto LABEL_80;
      }
      if (v17 == 1)
      {
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_83;
        }
        objc_msgSend(a1, "position", 0, 0);
        [a1 length];
        while (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
        {
          char v18 = 0;
          unsigned int v19 = 0;
          unint64_t v20 = 0;
          while (1)
          {
            uint64_t v21 = *v2;
            uint64_t v22 = *(void *)&a1[v21];
            unint64_t v23 = v22 + 1;
            if (v22 == -1 || v23 > *(void *)&a1[*v3]) {
              break;
            }
            char v24 = *(unsigned char *)(*(void *)&a1[*v5] + v22);
            *(void *)&a1[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0) {
              goto LABEL_34;
            }
            v18 += 7;
            BOOL v13 = v19++ >= 9;
            if (v13)
            {
              unint64_t v20 = 0;
              int v25 = a1[*v4];
              goto LABEL_36;
            }
          }
          a1[*v4] = 1;
LABEL_34:
          int v25 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v20 = 0;
          }
LABEL_36:
          int v26 = v20 & 7;
          if (v25 || v26 == 4) {
            break;
          }
          if ((v20 >> 3) == 1)
          {
            if (v26 != 2 || !PBReaderPlaceMark() || !GEOPDResultRefinementIsValid(a1)) {
              goto LABEL_82;
            }
            PBReaderRecallMark();
          }
          else if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
            goto LABEL_82;
          }
        }
        goto LABEL_77;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        goto LABEL_83;
      }
LABEL_80:
      if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
        goto LABEL_81;
      }
    }
    if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDRefinementSessionStateIsValid(a1))
    {
LABEL_83:
      PBReaderRecallMark();
      return 0;
    }
    goto LABEL_78;
  }
LABEL_81:
  BOOL v39 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v39;
}

uint64_t __PruneCachedShiftEntriesByDate_block_invoke(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[6];
  unint64_t v3 = (void *)a1[4];
  uint64_t v4 = *(void *)(a1[5] + 8);
  id obj = *(id *)(v4 + 40);
  uint64_t v5 = [v3 bindInt64Parameter:"@time" toValue:v2 inStatement:a2 error:&obj];
  objc_storeStrong((id *)(v4 + 40), obj);
  return v5;
}

uint64_t __GetDataForOfflineKey_block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(unsigned int *)(a1 + 72);
  uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8);
  id obj = *(id *)(v6 + 40);
  int v7 = [v4 bindIntParameter:"@layer" toValue:v5 inStatement:a2 error:&obj];
  objc_storeStrong((id *)(v6 + 40), obj);
  if (!v7) {
    return 0;
  }
  unint64_t v8 = *(void **)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = *(void *)(*(void *)(a1 + 56) + 8);
  id v25 = *(id *)(v10 + 40);
  int v11 = [v8 bindInt64Parameter:"@version" toValue:v9 inStatement:a2 error:&v25];
  objc_storeStrong((id *)(v10 + 40), v25);
  if (!v11) {
    return 0;
  }
  char v12 = *(void **)(a1 + 32);
  uint64_t v13 = *(void *)(a1 + 40);
  uint64_t v14 = *(void *)(*(void *)(a1 + 56) + 8);
  id v24 = *(id *)(v14 + 40);
  int v15 = [v12 bindBlobParameter:"@key" toValue:v13 inStatement:a2 error:&v24];
  objc_storeStrong((id *)(v14 + 40), v24);
  if (!v15) {
    return 0;
  }
  uint64_t v16 = sqlite3_step(a2);
  while (v16 == 100)
  {
    [*(id *)(a1 + 32) int64ForColumn:0 inStatment:a2];
    uint64_t v17 = 1;
    char v18 = [*(id *)(a1 + 32) UUIDForColumn:1 inStatment:a2];
    if (!(*(unsigned int (**)(void))(*(void *)(a1 + 48) + 16))()) {
      goto LABEL_11;
    }
    uint64_t v16 = sqlite3_step(a2);
  }
  if (v16 == 101) {
    return 1;
  }
  unsigned int v19 = *(void **)(a1 + 32);
  uint64_t v20 = *(void *)(*(void *)(a1 + 56) + 8);
  id v23 = *(id *)(v20 + 40);
  [v19 reportSQLiteErrorCode:v16 method:@"step" error:&v23];
  id v21 = v23;
  uint64_t v17 = 0;
  char v18 = *(void **)(v20 + 40);
  *(void *)(v20 + 40) = v21;
LABEL_11:

  return v17;
}

uint64_t __MarkForDeletionExternalDataForOfflineDataNotMatchingVersions_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 64);
  uint64_t v5 = *(void **)(a1 + 32);
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v6 + 40);
  int v7 = [v5 bindIntParameter:"@layer" toValue:v4 inStatement:a2 error:&obj];
  objc_storeStrong((id *)(v6 + 40), obj);
  if (!v7) {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = *(void **)(a1 + 32);
  uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8);
  id v18 = *(id *)(v10 + 40);
  int v11 = [v9 bindInt64Parameter:"@versionA" toValue:v8 inStatement:a2 error:&v18];
  objc_storeStrong((id *)(v10 + 40), v18);
  if (!v11) {
    return 0;
  }
  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v13 = *(void **)(a1 + 32);
  uint64_t v14 = *(void *)(*(void *)(a1 + 40) + 8);
  id v17 = *(id *)(v14 + 40);
  uint64_t v15 = [v13 bindInt64Parameter:"@versionB" toValue:v12 inStatement:a2 error:&v17];
  objc_storeStrong((id *)(v14 + 40), v17);
  return v15;
}

uint64_t GEOPDSpatialEventLookupParametersReadSpecified(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 76));
  uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 72);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 68)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__flags;
  int v13 = ((*(unsigned __int8 *)(a1 + 88) >> 5) & 1)
      + ((*(unsigned __int8 *)(a1 + 88) >> 4) & 1)
      + ((*(unsigned __int8 *)(a1 + 88) >> 3) & 1);
  while (2)
  {
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    uint64_t v16 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v13;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v15 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v17 = v13 != 0;
        char v18 = v17 & ~(_BYTE)v11 | v9;
        char v19 = v17 | v11;
        if (((v17 | v11) | v8)) {
          uint64_t v20 = 0;
        }
        else {
          uint64_t v20 = a3;
        }
        id v21 = (int *)MEMORY[0x1E4F940E8];
        int v90 = 1;
        uint64_t v22 = (int *)MEMORY[0x1E4F940C8];
        char v23 = v17 & ~(_BYTE)v11 | v9;
        if (*(void *)(v3 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(v3 + *v6)) {
          goto LABEL_119;
        }
        char v88 = v18;
        char v91 = v19 | v18;
        char v92 = (v20 == 0) | v19;
        id v24 = (int *)MEMORY[0x1E4F940B8];
        char v89 = v19;
        break;
      default:
        ++v13;
LABEL_7:
        uint64_t v14 = v9;
LABEL_8:
        uint64_t v15 = v10;
        uint64_t v16 = v11;
LABEL_10:
        ++v7;
        uint64_t v9 = v14;
        uint64_t v10 = v15;
        uint64_t v11 = v16;
        continue;
    }
    break;
  }
  while (!*(unsigned char *)(v3 + *v22))
  {
    char v25 = 0;
    unsigned int v26 = 0;
    unint64_t v27 = 0;
    while (1)
    {
      uint64_t v28 = *v21;
      uint64_t v29 = *(void *)(v3 + v28);
      unint64_t v30 = v29 + 1;
      if (v29 == -1 || v30 > *(void *)(v3 + *v6)) {
        break;
      }
      char v31 = *(unsigned char *)(*(void *)(v3 + *v24) + v29);
      *(void *)(v3 + v28) = v30;
      v27 |= (unint64_t)(v31 & 0x7F) << v25;
      if ((v31 & 0x80) == 0) {
        goto LABEL_25;
      }
      v25 += 7;
      BOOL v32 = v26++ >= 9;
      if (v32)
      {
        unint64_t v27 = 0;
        int v33 = *(unsigned __int8 *)(v3 + *v22);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v22) = 1;
LABEL_25:
    int v33 = *(unsigned __int8 *)(v3 + *v22);
    if (*(unsigned char *)(v3 + *v22)) {
      unint64_t v27 = 0;
    }
LABEL_27:
    int v34 = v27 & 7;
    if (v33 || v34 == 4) {
      break;
    }
    int v36 = v6;
    int v37 = v22;
    unint64_t v38 = v27 >> 3;
    BOOL v39 = v19;
    if ((v92 & 1) == 0)
    {
      uint64_t v40 = v20;
      do
      {
        int v42 = *v40++;
        int v41 = v42;
        BOOL v39 = v42 != 0;
        if (v42) {
          BOOL v43 = v41 == v38;
        }
        else {
          BOOL v43 = 1;
        }
      }
      while (!v43);
    }
    switch((int)v38)
    {
      case 1:
        uint64_t v22 = v37;
        if (!v39) {
          goto LABEL_86;
        }
        uint64_t v6 = v36;
        if ((*(unsigned char *)(a1 + v12[364]) & 0x20) == 0)
        {
          char v44 = PBReaderPlaceMark();
          id v21 = (int *)MEMORY[0x1E4F940E8];
          if ((v44 & 1) == 0) {
            goto LABEL_139;
          }
          int v45 = objc_alloc_init(GEOLatLng);
          if (GEOLatLngReadAllFrom((uint64_t)v45, (void *)v3))
          {
            PBReaderRecallMark();
            char v46 = *(void **)(a1 + 48);
            *(void *)(a1 + 48) = v45;

            --v7;
            goto LABEL_112;
          }

          goto LABEL_139;
        }
        char v75 = PBReaderSkipValueWithTag();
        id v21 = (int *)MEMORY[0x1E4F940E8];
        if ((v75 & 1) == 0) {
          goto LABEL_139;
        }
        uint64_t v12 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__flags;
        v7 += *(unsigned __int8 *)(a1 + 88) << 26 >> 31;
        goto LABEL_113;
      case 2:
        uint64_t v22 = v37;
        if ((v8 & 1) == 0) {
          goto LABEL_86;
        }
        char v50 = 0;
        unsigned int v51 = 0;
        uint64_t v52 = 0;
        *(unsigned char *)(a1 + v12[364]) |= 4u;
        uint64_t v6 = v36;
        id v21 = (int *)MEMORY[0x1E4F940E8];
        while (2)
        {
          uint64_t v53 = *v21;
          uint64_t v54 = *(void *)(v3 + v53);
          unint64_t v55 = v54 + 1;
          if (v54 == -1 || v55 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v22) = 1;
          }
          else
          {
            char v56 = *(unsigned char *)(*(void *)(v3 + *v24) + v54);
            *(void *)(v3 + v53) = v55;
            v52 |= (unint64_t)(v56 & 0x7F) << v50;
            if (v56 < 0)
            {
              v50 += 7;
              BOOL v32 = v51++ >= 9;
              if (v32)
              {
                LODWORD(v52) = 0;
                goto LABEL_94;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v22)) {
          LODWORD(v52) = 0;
        }
LABEL_94:
        uint64_t v74 = 84;
        goto LABEL_99;
      case 3:
        uint64_t v22 = v37;
        if ((v8 & 1) == 0) {
          goto LABEL_86;
        }
        char v57 = 0;
        unsigned int v58 = 0;
        uint64_t v52 = 0;
        *(unsigned char *)(a1 + v12[364]) |= 2u;
        uint64_t v6 = v36;
        id v21 = (int *)MEMORY[0x1E4F940E8];
        while (2)
        {
          uint64_t v59 = *v21;
          uint64_t v60 = *(void *)(v3 + v59);
          unint64_t v61 = v60 + 1;
          if (v60 == -1 || v61 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v22) = 1;
          }
          else
          {
            char v62 = *(unsigned char *)(*(void *)(v3 + *v24) + v60);
            *(void *)(v3 + v59) = v61;
            v52 |= (unint64_t)(v62 & 0x7F) << v57;
            if (v62 < 0)
            {
              v57 += 7;
              BOOL v32 = v58++ >= 9;
              if (v32)
              {
                LODWORD(v52) = 0;
                goto LABEL_98;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v22)) {
          LODWORD(v52) = 0;
        }
LABEL_98:
        uint64_t v74 = 80;
LABEL_99:
        *(_DWORD *)(a1 + v74) = v52;
        goto LABEL_115;
      case 4:
        uint64_t v22 = v37;
        if (!v39 || (*(unsigned char *)(a1 + v12[364]) & 0x10) != 0)
        {
LABEL_86:
          char v72 = PBReaderSkipValueWithTag();
          id v24 = (int *)MEMORY[0x1E4F940B8];
          char v19 = v89;
          uint64_t v12 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__flags;
          goto LABEL_87;
        }
        uint64_t v6 = v36;
        if (v34 == 2)
        {
          int v63 = PBReaderPlaceMark();
          id v21 = (int *)MEMORY[0x1E4F940E8];
          if (!v63) {
            goto LABEL_139;
          }
          while (*(void *)(v3 + *v21) < *(void *)(v3 + *v6) && !*(unsigned char *)(v3 + *v22))
          {
            char v64 = 0;
            unsigned int v65 = 0;
            uint64_t v66 = 0;
            long long v67 = (int *)MEMORY[0x1E4F940B8];
            while (1)
            {
              uint64_t v68 = *v21;
              uint64_t v69 = *(void *)(v3 + v68);
              unint64_t v70 = v69 + 1;
              if (v69 == -1 || v70 > *(void *)(v3 + *v6)) {
                break;
              }
              char v71 = *(unsigned char *)(*(void *)(v3 + *v67) + v69);
              *(void *)(v3 + v68) = v70;
              v66 |= (unint64_t)(v71 & 0x7F) << v64;
              if (v71 < 0)
              {
                v64 += 7;
                BOOL v32 = v65++ >= 9;
                if (!v32) {
                  continue;
                }
              }
              goto LABEL_80;
            }
            *(unsigned char *)(v3 + *v22) = 1;
LABEL_80:
            PBRepeatedInt32Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          char v76 = 0;
          unsigned int v77 = 0;
          uint64_t v78 = 0;
          id v21 = (int *)MEMORY[0x1E4F940E8];
          while (1)
          {
            uint64_t v79 = *v21;
            uint64_t v80 = *(void *)(v3 + v79);
            unint64_t v81 = v80 + 1;
            if (v80 == -1 || v81 > *(void *)(v3 + *v6)) {
              break;
            }
            char v82 = *(unsigned char *)(*(void *)(v3 + *v24) + v80);
            *(void *)(v3 + v79) = v81;
            v78 |= (unint64_t)(v82 & 0x7F) << v76;
            if (v82 < 0)
            {
              v76 += 7;
              BOOL v32 = v77++ >= 9;
              if (!v32) {
                continue;
              }
            }
            goto LABEL_111;
          }
          *(unsigned char *)(v3 + *v22) = 1;
LABEL_111:
          PBRepeatedInt32Add();
        }
LABEL_112:
        uint64_t v12 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__flags;
LABEL_113:
        char v19 = v89;
        goto LABEL_114;
      case 5:
        uint64_t v22 = v37;
        if (v8)
        {
          if (!PBReaderPlaceMark() || (uint64_t v6 = v36, !GEOPDTimeRangeReadAllFrom(a1 + 56, v3)))
          {
LABEL_139:
            int v90 = 0;
            uint64_t v12 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__flags;
            char v19 = v89;
            goto LABEL_118;
          }
          PBReaderRecallMark();
          uint64_t v12 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__flags;
          *(unsigned char *)(a1 + 88) |= 1u;
          char v19 = v89;
          id v21 = (int *)MEMORY[0x1E4F940E8];
LABEL_114:
          id v24 = (int *)MEMORY[0x1E4F940B8];
        }
        else
        {
          char v73 = PBReaderSkipValueWithTag();
          uint64_t v12 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__flags;
          char v19 = v89;
          uint64_t v6 = v36;
          id v21 = (int *)MEMORY[0x1E4F940E8];
          id v24 = (int *)MEMORY[0x1E4F940B8];
          if ((v73 & 1) == 0)
          {
LABEL_137:
            int v90 = 0;
            goto LABEL_118;
          }
        }
LABEL_115:
        if (!(v91 & 1 | (v7 != 0)) || *(void *)(v3 + *v21) >= *(void *)(v3 + *v6)) {
          goto LABEL_117;
        }
        break;
      default:
        if ((v88 & 1) == 0 || (*(unsigned char *)(a1 + v12[364]) & 8) != 0)
        {
          char v72 = PBReaderSkipValueWithTag();
          id v24 = (int *)MEMORY[0x1E4F940B8];
          char v19 = v89;
          uint64_t v12 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__flags;
          uint64_t v22 = v37;
LABEL_87:
          uint64_t v6 = v36;
          id v21 = (int *)MEMORY[0x1E4F940E8];
          if ((v72 & 1) == 0) {
            goto LABEL_137;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v47 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            int v48 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v47;
          }
          int v49 = PBUnknownFieldAdd();
          uint64_t v12 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__flags;
          char v19 = v89;
          uint64_t v22 = v37;
          uint64_t v6 = v36;
          id v21 = (int *)MEMORY[0x1E4F940E8];
          id v24 = (int *)MEMORY[0x1E4F940B8];
          if (!v49)
          {
            int v90 = 0;
            goto LABEL_120;
          }
        }
        goto LABEL_115;
    }
  }
LABEL_117:
  int v90 = 1;
LABEL_118:
  char v23 = v88;
LABEL_119:
  if (v23) {
LABEL_120:
  }
    *(unsigned char *)(a1 + v12[364]) |= 8u;
  if (!(v19 & 1 | ((v90 & 1) == 0)))
  {
    if (!v20) {
      goto LABEL_131;
    }
    while (1)
    {
      int v85 = *v20++;
      int v84 = v85;
      if (v85 == 1) {
        break;
      }
      if (v84 == 4)
      {
        char v83 = 16;
LABEL_127:
        *(unsigned char *)(a1 + v12[364]) |= v83;
      }
      else if (!v84)
      {
        goto LABEL_131;
      }
    }
    char v83 = 32;
    goto LABEL_127;
  }
  *(unsigned char *)(a1 + v12[364]) |= 0x20u;
  *(unsigned char *)(a1 + v12[364]) |= 0x10u;
LABEL_131:
  if (v90)
  {
    uint64_t v3 = *(unsigned char *)(v3 + *v22) == 0;
    if ((v19 & 1) == 0) {
      return v3;
    }
    goto LABEL_135;
  }
  uint64_t v3 = 0;
  if (v19)
  {
LABEL_135:
    unsigned int v86 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  return v3;
}

void sub_188EA7184(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EA7674(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188EA7784(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EA793C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<unsigned int,_GEOAltitudeTriggerData>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,_GEOAltitudeTriggerData>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,_GEOAltitudeTriggerData>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,_GEOAltitudeTriggerData>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,_GEOAltitudeTriggerData>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,_GEOAltitudeTriggerData>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned int,_GEOAltitudeTriggerData>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,_GEOAltitudeTriggerData>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,_GEOAltitudeTriggerData>>>::destroy(a1[1]);
    uint64_t v2 = (void *)a1[11];
    if (v2)
    {
      a1[12] = v2;
      operator delete(v2);
    }
    uint64_t v3 = (void *)a1[8];
    if (v3)
    {
      a1[9] = v3;
      operator delete(v3);
    }

    operator delete(a1);
  }
}

void sub_188EA7D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_188EA87D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188EA888C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

id GEOResourceDevResourcesPath()
{
  return +[GEOFilePaths pathFor:12];
}

void sub_188EA8CA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id GEOExperimentConfigurationPath()
{
  return +[GEOFilePaths pathFor:29];
}

void sub_188EA9318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_188EA948C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_188EA95C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void ___loadAttributions_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = objc_msgSend(objc_alloc(MEMORY[0x1E4F28E10]), "initWithKeyOptions:valueOptions:capacity:", 0, 0, objc_msgSend(v3, "count"));
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v5 = v3;
  uint64_t v6 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v13;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v13 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = *(void *)(*((void *)&v12 + 1) + 8 * i);
        uint64_t v11 = objc_msgSend(v5, "objectForKeyedSubscript:", v10, (void)v12);
        [v4 setObject:v11 forKey:v10];
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v7);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_188EA9984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_188EA9CF8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

id _networkDefaultsURL()
{
  v19[3] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = GEOGetURLWithSource(0, 0);
  if (v0)
  {
    uint64_t v1 = [MEMORY[0x1E4F29088] componentsWithURL:v0 resolvingAgainstBaseURL:0];
    uint64_t v2 = [v1 queryItems];
    uint64_t v17 = v0;
    if (v2)
    {
      id v3 = [v1 queryItems];
      uint64_t v4 = (void *)[v3 mutableCopy];
    }
    else
    {
      uint64_t v4 = [MEMORY[0x1E4F1CA48] array];
    }

    id v5 = [MEMORY[0x1E4F290C8] queryItemWithName:@"os" value:@"ios"];
    v19[0] = v5;
    uint64_t v6 = (void *)MEMORY[0x1E4F290C8];
    uint64_t v7 = +[GEOPlatform sharedPlatform];
    uint64_t v8 = [v7 osVersion];
    uint64_t v9 = [v6 queryItemWithName:@"os_version" value:v8];
    v19[1] = v9;
    uint64_t v10 = (void *)MEMORY[0x1E4F290C8];
    uint64_t v11 = +[GEOPlatform sharedPlatform];
    long long v12 = [v11 hardwareIdentifier];
    long long v13 = [v10 queryItemWithName:@"hardware" value:v12];
    void v19[2] = v13;
    long long v14 = [MEMORY[0x1E4F1C978] arrayWithObjects:v19 count:3];
    [v4 addObjectsFromArray:v14];

    [v1 setQueryItems:v4];
    long long v15 = [v1 URL];

    uint64_t v0 = v17;
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Assertion failed: baseURL != ((void *)0)", buf, 2u);
    }
    long long v15 = 0;
  }

  return v15;
}

id GEOResourceManifestURLForConfiguration(void *a1)
{
  uint64_t v1 = a1;
  if (!v1) {
    uint64_t v1 = objc_alloc_init(GEOResourceManifestConfiguration);
  }
  uint64_t v2 = GEOResourceManifestURLTokenQueryItems(v1);
  id v3 = (void *)MEMORY[0x1E4F1CB10];
  uint64_t v4 = [(GEOResourceManifestConfiguration *)v1 urlTemplate];
  id v5 = objc_msgSend(v3, "_geo_URLWithString:tokenSubstitutions:", v4, v2);

  if (v5)
  {
    uint64_t v6 = [MEMORY[0x1E4F29088] componentsWithURL:v5 resolvingAgainstBaseURL:1];
    uint64_t v7 = _getValue(GeoServicesConfig_ResourceManifestRequestToken, (uint64_t)off_1E9114228, 1, 0, 0, 0);
    if ([v7 length])
    {
      double Current = CFAbsoluteTimeGetCurrent();
      double v9 = Current - GEOConfigGetDouble(GeoServicesConfig_ResourceManifestRequestTokenTimestamp, (uint64_t)off_1E9114238);
      if (v9 < GEOConfigGetDouble(GeoServicesConfig_ResourceManifestRequestTokenExpirationInterval, (uint64_t)off_1E91147F8))
      {
        uint64_t v10 = [MEMORY[0x1E4F1CA48] array];
        uint64_t v11 = [MEMORY[0x1E4F290C8] queryItemWithName:@"v" value:v7];
        [v10 addObject:v11];

LABEL_12:
        if (GEOConfigGetBOOL(GeoServicesConfig_ManifestSupportsAdditionalMarkets, (uint64_t)off_1E9113EB8))
        {
          long long v14 = +[GEOAdditionalEnabledMarkets additionalEnabledMarkets];
          long long v15 = [v14 queryItems];

          if ([v15 count])
          {
            if (!v10)
            {
              uint64_t v10 = [MEMORY[0x1E4F1CA48] array];
            }
            [v10 addObjectsFromArray:v15];
          }
        }
        if ([v10 count])
        {
          uint64_t v16 = [v6 queryItems];
          uint64_t v17 = [v16 count];

          if (v17)
          {
            char v18 = [v6 queryItems];
            char v19 = (void *)[v18 mutableCopy];

            [v19 addObjectsFromArray:v10];
            [v6 setQueryItems:v19];
          }
          else
          {
            [v6 setQueryItems:v10];
          }
        }
        long long v13 = [v6 URL];

        goto LABEL_23;
      }
      _setValue(GeoServicesConfig_ResourceManifestRequestToken, (uint64_t)off_1E9114228, 0, 0, 0);
      _setValue(GeoServicesConfig_ResourceManifestRequestTokenTimestamp, (uint64_t)off_1E9114238, 0, 0, 0);
    }
    uint64_t v10 = 0;
    goto LABEL_12;
  }
  long long v12 = GEOFindOrCreateLog("com.apple.GeoServices", "ResourceManifest");
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)id v21 = 0;
    _os_log_impl(&dword_188D96000, v12, OS_LOG_TYPE_ERROR, "Manifest URL value is not a valid URL", v21, 2u);
  }

  long long v13 = 0;
LABEL_23:

  return v13;
}

id GEOResourceManifestURLTokenQueryItems(void *a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  if (!v1) {
    uint64_t v1 = objc_alloc_init(GEOResourceManifestConfiguration);
  }
  uint64_t v2 = [(GEOResourceManifestConfiguration *)v1 manifestDictionaryRepresentation];
  id v3 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v2, "count"));
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v4 = v2;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v19 objects:v24 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v20;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v20 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void *)(*((void *)&v19 + 1) + 8 * i);
        uint64_t v10 = (void *)MEMORY[0x1E4F290C8];
        uint64_t v11 = objc_msgSend(v4, "objectForKeyedSubscript:", v9, (void)v19);
        long long v12 = [v10 queryItemWithName:v9 value:v11];

        [v3 addObject:v12];
      }
      uint64_t v6 = [v4 countByEnumeratingWithState:&v19 objects:v24 count:16];
    }
    while (v6);
  }

  [v3 sortUsingComparator:&__block_literal_global_85];
  long long v13 = [MEMORY[0x1E4F1CA60] dictionary];
  [v13 setObject:v3 forKeyedSubscript:@"%{DEVICE_QUERY}"];
  long long v14 = (void *)MEMORY[0x1E4F290C8];
  long long v15 = [(GEOResourceManifestConfiguration *)v1 environment];
  uint64_t v16 = [v14 queryItemWithName:@"environment" value:v15];

  if (v16)
  {
    char v23 = v16;
    uint64_t v17 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v23 count:1];
    [v13 setObject:v17 forKeyedSubscript:@"%{ENV_QUERY}"];
  }

  return v13;
}

id GEOGetNetworkDefaultsLog()
{
  if (qword_1EB29FC60 != -1) {
    dispatch_once(&qword_1EB29FC60, &__block_literal_global_221);
  }
  uint64_t v0 = (void *)qword_1EB29FC58;

  return v0;
}

NSObject *readNetworkDefaultsFromFile(uint64_t *a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = +[GEOFilePaths urlFor:23];
  if (v2)
  {
    id v3 = [MEMORY[0x1E4F1C9B8] dataWithContentsOfURL:v2 options:1 error:a1];
    if (v3)
    {
      id v4 = [MEMORY[0x1E4F28F98] propertyListWithData:v3 options:0 format:0 error:a1];
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        id v4 = v4;
        uint64_t v5 = v4;
LABEL_11:

        goto LABEL_12;
      }
      uint64_t v7 = GEOGetNetworkDefaultsLog();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        uint64_t v8 = *a1;
        int v10 = 138412290;
        uint64_t v11 = v8;
        _os_log_impl(&dword_188D96000, v7, OS_LOG_TYPE_ERROR, "Could not decode network defaults: %@", (uint8_t *)&v10, 0xCu);
      }
    }
    else
    {
      id v4 = GEOGetNetworkDefaultsLog();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        uint64_t v6 = *a1;
        int v10 = 138412290;
        uint64_t v11 = v6;
        _os_log_impl(&dword_188D96000, v4, OS_LOG_TYPE_ERROR, "Could not read network defaults: %@", (uint8_t *)&v10, 0xCu);
      }
    }
    uint64_t v5 = 0;
    goto LABEL_11;
  }
  uint64_t v5 = 0;
LABEL_12:

  return v5;
}

void ___initStorageReadOnly_block_invoke()
{
  if (+[GEOPlatform isRunningInGeod])
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT)) {
      return;
    }
    __int16 v12 = 0;
    uint64_t v7 = MEMORY[0x1E4F14500];
    uint64_t v8 = "Assertion failed: !GEOPlatform.isRunningInGeod";
    uint64_t v9 = (uint8_t *)&v12;
    goto LABEL_11;
  }
  if (_MergedGlobals_3_2)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT)) {
      return;
    }
    *(_WORD *)buf = 0;
    uint64_t v7 = MEMORY[0x1E4F14500];
    uint64_t v8 = "Assertion failed: _user_storage_readwrite == ((void *)0)";
    uint64_t v9 = buf;
LABEL_11:
    _os_log_fault_impl(&dword_188D96000, v7, OS_LOG_TYPE_FAULT, v8, v9, 2u);
    return;
  }
  uint64_t v0 = [GEOConfigStorageDirectReadOnly alloc];
  uint64_t v1 = +[GEOFilePaths urlFor:34];
  uint64_t v2 = [(GEOConfigStorageDirectReadOnly *)v0 initWithPath:v1 forSource:7];
  id v3 = (void *)_user_storage_readonly;
  _user_storage_readonly = v2;

  id v4 = [GEOConfigStorageDirectReadOnly alloc];
  id v10 = +[GEOFilePaths urlFor:33];
  uint64_t v5 = [(GEOConfigStorageDirectReadOnly *)v4 initWithPath:v10 forSource:6];
  uint64_t v6 = (void *)_system_storage_readonly;
  _system_storage_readonly = v5;
}

void _initStorageReadOnly()
{
  uint64_t v1 = _user_storage_readonly;
  if (_user_storage_readonly)
  {
    if (_system_storage_readonly) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v2 = +[GEOFilePaths urlFor:34];
    if (!v2) {
      return;
    }
    uint64_t v0 = v2;
    if (_system_storage_readonly)
    {

      goto LABEL_11;
    }
  }
  id v3 = +[GEOFilePaths urlFor:33];

  if (v1)
  {
    if (!v3) {
      return;
    }
  }
  else
  {

    if (!v3) {
      return;
    }
  }
LABEL_11:
  if (_initStorageReadOnly_onceToken != -1)
  {
    dispatch_once(&_initStorageReadOnly_onceToken, &__block_literal_global_92);
  }
}

BOOL GEOSupportsOfflineMaps()
{
  if (_registerSupportSourcesIfNecessary_once != -1) {
    dispatch_once(&_registerSupportSourcesIfNecessary_once, &__block_literal_global_78);
  }
  if (!GEOConfigGetBOOL(GeoOfflineConfig_SupportsOffline, (uint64_t)off_1E9115908)
    || (GEOConfigGetBOOL(GeoOfflineConfig_OfflineSupportDeprecated, (uint64_t)off_1E9115918) & 1) != 0)
  {
    return 0;
  }
  uint64_t v1 = GEOGetURLWithSource(62, 0);
  BOOL v0 = v1 != 0;

  return v0;
}

void sub_188EABDD4(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 160));
  _Unwind_Resume(a1);
}

id GEOURLLogFacility(uint64_t a1)
{
  long long v4 = 0u;
  long long v5 = 0u;
  long long v3 = 0u;
  _recordForType(a1, (uint64_t)&v3);
  id v1 = *((id *)&v4 + 1);

  return v1;
}

id GEOGetURLWithSource(uint64_t a1, void *a2)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __GEOGetURLWithSource_block_invoke;
  v4[3] = &__block_descriptor_40_e25___NSURL_16__0__NSString_8l;
  char v4[4] = a1;
  uint64_t v2 = _GEOGetURLWithSource(a1, a2, 1, v4);

  return v2;
}

void _GEORequestResponseLogRequest(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v7 = a1;
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  if ((GEOConfigGetBOOL(GeoServicesConfig_MapsRequestResponseLoggingPersisted, (uint64_t)off_1E9113ED8) & 1) != 0
    || os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v11 = _GEORequestResponseLogQueue();
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = ___GEORequestResponseLogRequest_block_invoke;
    v12[3] = &unk_1E53D8AF8;
    id v13 = v10;
    long long v14 = v7;
    id v15 = v8;
    id v16 = v9;
    dispatch_async(v11, v12);
  }
}

uint64_t GEOURLSupportsMPTCP(uint64_t a1)
{
  id v1 = _GEOURLInfoFromActiveTileGroup(a1);
  uint64_t v2 = [v1 supportsMultipathTCP];

  return v2;
}

uint64_t GEOURLNeedsAuthForURLType(uint64_t a1)
{
  uint64_t v2 = +[GEOResourceManifestManager modernManager];
  long long v3 = [v2 activeTileGroup];
  if (GEOAuthProxyEnabledForActiveTileGroup(v3))
  {
    long long v4 = _GEOURLInfoFromActiveTileGroup(a1);
    uint64_t v5 = [v4 useAuthProxy];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t GEOURLMultipathAlternatePort(uint64_t a1)
{
  id v1 = _GEOURLInfoFromActiveTileGroup(a1);
  if ([v1 supportsMultipathTCP]
    && [v1 hasAlternativeMultipathTCPPort])
  {
    uint64_t v2 = [v1 alternativeMultipathTCPPort];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

uint64_t GEOAuthProxyEnabledForActiveTileGroup(void *a1)
{
  id v1 = [a1 urlInfoSet];
  uint64_t v2 = GEOAuthProxyEnabledForURLInfoSet(v1);

  return v2;
}

uint64_t GEOAuthProxyEnabledForURLInfoSet(void *a1)
{
  id v1 = a1;
  uint64_t v2 = _getValue(GeoServicesConfig_MapsAuthUseProxy, (uint64_t)off_1E91155D8, 1, 0, 0, 0);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    goto LABEL_6;
  }
  if (([v2 isEqualToString:@"always"] & 1) == 0)
  {
    if ([v2 isEqualToString:@"never"])
    {
      uint64_t v3 = 0;
      goto LABEL_7;
    }
LABEL_6:
    uint64_t v3 = [v1 hasAuthProxyURL];
    goto LABEL_7;
  }
  uint64_t v3 = 1;
LABEL_7:

  return v3;
}

void sub_188EACF70(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EAD8E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t GEOThrottleKeyMakeFromRequestKind(unint64_t a1)
{
  uint64_t v1 = 0;
  if ((int)a1 > 1791)
  {
    if ((a1 - 2816) <= 0x29 && ((1 << a1) & 0x3F700000003) != 0 || a1 == 2560) {
      return HIDWORD(a1) | a1 | 0x20000;
    }
    if (a1 != 1792) {
      return v1;
    }
    goto LABEL_14;
  }
  if ((int)a1 <= 671)
  {
    if ((a1 - 1) >= 6 && a1 != 512) {
      return v1;
    }
    return HIDWORD(a1) | a1 | 0x20000;
  }
  if ((a1 - 672) < 2) {
    return HIDWORD(a1) | a1 | 0x20000;
  }
  if (a1 == 768 || a1 == 1280)
  {
LABEL_14:
    if (HIDWORD(a1) == 26) {
      return 133927;
    }
    return HIDWORD(a1) | a1 | 0x20000;
  }
  return v1;
}

uint64_t checkEntitlements(int a1, void *a2)
{
  id v3 = a2;
  long long v4 = v3;
  if (a1 == 1792) {
    uint64_t v5 = [v3 hasEntitlement:@"com.apple.geod.allow-user-initiated-request"];
  }
  else {
    uint64_t v5 = 1;
  }

  return v5;
}

void sub_188EADAC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void GEOWaitForURLsFromManifestAndThenOnQueue(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  uint64_t v6 = [[_GEOURLManifestListenerCallbackWithQueue alloc] initWithQueue:v4 handler:v3];

  uint64_t v5 = +[_GEOURLManifestListener sharedListener];
  [v5 waitForManifestWithCallback:v6];
}

void sub_188EAE788(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

id _GEOGetQueryForExperimentType(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v8 = objc_msgSend(NSString, "stringWithFormat:", @"%d", a3);
  id v9 = _getValue(a1, a2, 1, 0, 0, 0);
  id v10 = [v9 objectForKeyedSubscript:v8];
  if (a3 == 1)
  {
    if (a4 >= 0x3F)
    {
      objc_msgSend(NSString, "stringWithFormat:", @"(unknown: %i)", a4);
      uint64_t v11 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      uint64_t v11 = off_1E53EB3B8[(int)a4];
    }
    uint64_t v12 = [v10 objectForKeyedSubscript:v11];

    id v10 = (void *)v12;
  }

  return v10;
}

void sub_188EAF18C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188EAF87C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPGroundViewFeedbackIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  uint64_t v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  id v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (a1[*v4]) {
        goto LABEL_30;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        goto LABEL_30;
      }
      if ((v8 >> 3) == 2) {
        break;
      }
      if ((v8 >> 3) == 1)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEORPGroundViewFeedbackContextIsValid(a1)) {
          goto LABEL_31;
        }
LABEL_27:
        PBReaderRecallMark();
        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        goto LABEL_31;
      }
LABEL_29:
      if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
        goto LABEL_30;
      }
    }
    if (v15 != 2 || !PBReaderPlaceMark() || !GEORPGroundViewCorrectionsIsValid(a1))
    {
LABEL_31:
      PBReaderRecallMark();
      return 0;
    }
    goto LABEL_27;
  }
LABEL_30:
  BOOL v17 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v17;
}

BOOL GEORPGroundViewCorrectionsIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  uint64_t v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  id v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        break;
      }
      if ((v8 >> 3) == 2)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEORPFeedbackAddressFieldsIsValid(a1))
        {
LABEL_38:
          PBReaderRecallMark();
          return 0;
        }
        PBReaderRecallMark();
      }
      else if ((v8 >> 3) == 1)
      {
        if ((v8 & 7) != 0) {
          goto LABEL_38;
        }
        unsigned int v17 = 0;
        while (1)
        {
          uint64_t v18 = *v2;
          uint64_t v19 = *(void *)&a1[v18];
          unint64_t v20 = v19 + 1;
          if (v19 == -1 || v20 > *(void *)&a1[*v3]) {
            break;
          }
          int v21 = *(char *)(*(void *)&a1[*v5] + v19);
          *(void *)&a1[v18] = v20;
          if (v21 < 0 && v17++ <= 8) {
            continue;
          }
          goto LABEL_35;
        }
        a1[*v4] = 1;
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        goto LABEL_38;
      }
LABEL_35:
      ;
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v23 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v23;
}

id GEOGetReferenceTimeManagerLog()
{
  if (qword_1EB29FF58 != -1) {
    dispatch_once(&qword_1EB29FF58, &__block_literal_global_180);
  }
  BOOL v0 = (void *)qword_1EB29FF50;

  return v0;
}

uint64_t geoAnalyticsSendEventLazy(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  AnalyticsSendEventLazySymbolLoCC_SHA256_CTX c = (uint64_t (*)(id, id))getAnalyticsSendEventLazySymbolLoc();
  if (AnalyticsSendEventLazySymbolLoc)
  {
    uint64_t v6 = AnalyticsSendEventLazySymbolLoc(v3, v4);

    return v6;
  }
  else
  {
    dlerror();
    abort_report_np();
    return getAnalyticsSendEventLazySymbolLoc();
  }
}

uint64_t getAnalyticsSendEventLazySymbolLoc()
{
  uint64_t v3 = 0;
  id v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = getAnalyticsSendEventLazySymbolLoc_ptr;
  uint64_t v6 = getAnalyticsSendEventLazySymbolLoc_ptr;
  if (!getAnalyticsSendEventLazySymbolLoc_ptr)
  {
    uint64_t v1 = (void *)CoreAnalyticsLibrary();
    v4[3] = (uint64_t)dlsym(v1, "AnalyticsSendEventLazy");
    getAnalyticsSendEventLazySymbolLoc_ptr = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_188EB092C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CoreAnalyticsLibrary()
{
  uint64_t v0 = CoreAnalyticsLibraryCore();
  if (!v0)
  {
    uint64_t v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

uint64_t CoreAnalyticsLibraryCore()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = 0;
  uint64_t v3 = &v2;
  uint64_t v4 = 0x2020000000;
  uint64_t v0 = CoreAnalyticsLibraryCore_frameworkLibrary;
  uint64_t v5 = CoreAnalyticsLibraryCore_frameworkLibrary;
  if (!CoreAnalyticsLibraryCore_frameworkLibrary)
  {
    long long v6 = xmmword_1E53DFA70;
    long long v7 = *(_OWORD *)&off_1E53DFA80;
    v3[3] = _sl_dlopen();
    CoreAnalyticsLibraryCore_frameworkLibrary = v3[3];
    uint64_t v0 = v3[3];
  }
  _Block_object_dispose(&v2, 8);
  return v0;
}

void sub_188EB0AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188EB0F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t GEOConfigGetBOOLForCountryCode(int a1, uint64_t a2, void *a3)
{
  uint64_t v3 = _getValue(a1, a2, 1, a3, 0, 0);
  uint64_t v4 = [v3 BOOLValue];

  return v4;
}

Class __getAVExternalDeviceClass_block_invoke(uint64_t a1)
{
  if (!AVFoundationLibraryCore())
  {
    uint64_t v3 = (void *)abort_report_np();
    free(v3);
  }
  Class result = objc_getClass("AVExternalDevice");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAVExternalDeviceClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v4 = (void *)abort_report_np();
    return (Class)+[GEOIdealTransportTypeFinder idealTransportTypeForOrigin:v7 destination:v8 mapType:v6];
  }
  return result;
}

void sub_188EB1810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t GEOGetUserTransportTypePreference()
{
  if (_GEOConfigHasValue(GeoServicesConfig_TransportTypePreference, (uint64_t)off_1E9113898))
  {
    int v0 = GeoServicesConfig_TransportTypePreference;
    uint64_t v1 = off_1E9113898;
    return GEOConfigGetInteger(v0, (uint64_t)v1);
  }
  else if (_GEOConfigHasValue(GeoServicesConfig_DefaultMapMode, (uint64_t)off_1E9114868) {
         && GEOConfigGetInteger(GeoServicesConfig_DefaultMapMode, (uint64_t)off_1E9114868) == 3)
  }
  {
    return 2;
  }
  else
  {
    return 0;
  }
}

uint64_t AVFoundationLibraryCore()
{
  if (!AVFoundationLibraryCore_frameworkLibrary) {
    AVFoundationLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  return AVFoundationLibraryCore_frameworkLibrary;
}

BOOL _GEOConfigHasValue(int a1, uint64_t a2)
{
  uint64_t v2 = _getValue(a1, a2, 0, 0, 0, 0);
  BOOL v3 = v2 != 0;

  return v3;
}

uint64_t geoTMGetKernelMonotonicClock()
{
  uint64_t v4 = 0;
  SEL v5 = &v4;
  uint64_t v6 = 0x2020000000;
  int v0 = (uint64_t (*)(void))getTMGetKernelMonotonicClockSymbolLoc_ptr;
  $F24F406B2B787EFB06265DBA3D28CBD5 v7 = getTMGetKernelMonotonicClockSymbolLoc_ptr;
  if (!getTMGetKernelMonotonicClockSymbolLoc_ptr)
  {
    uint64_t v1 = (void *)CoreTimeLibrary();
    v5[3] = (uint64_t)dlsym(v1, "TMGetKernelMonotonicClock");
    getTMGetKernelMonotonicClockSymbolLoc_ptr = (_UNKNOWN *)v5[3];
    int v0 = (uint64_t (*)(void))v5[3];
  }
  _Block_object_dispose(&v4, 8);
  if (!v0)
  {
    dlerror();
    BOOL v3 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v4, 8);
    _Unwind_Resume(v3);
  }
  return v0();
}

void sub_188EB1E14(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t CoreTimeLibrary()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!CoreTimeLibraryCore_frameworkLibrary)
  {
    v3[1] = MEMORY[0x1E4F143A8];
    v3[2] = 3221225472;
    v3[3] = __CoreTimeLibraryCore_block_invoke;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    v3[5] = v3;
    long long v4 = xmmword_1E53E8810;
    uint64_t v5 = 0;
    CoreTimeLibraryCore_frameworkLibrary = _sl_dlopen();
    uint64_t v1 = (void *)v3[0];
    uint64_t v0 = CoreTimeLibraryCore_frameworkLibrary;
    if (CoreTimeLibraryCore_frameworkLibrary)
    {
      if (!v3[0]) {
        return v0;
      }
    }
    else
    {
      uint64_t v1 = (void *)abort_report_np();
    }
    free(v1);
    return v0;
  }
  return CoreTimeLibraryCore_frameworkLibrary;
}

void __destroy_helper_block_ea8_32c49_ZTSKZ36__GEOTileLoader__requestOnlineTiles_E3__4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
}

long double CAAPhysicalMoon::CalculateTopocentric@<D0>(double a1@<D0>, double a2@<D1>, double a3@<D2>, double *a4@<X8>)
{
  double v28 = a2 * 0.0174532925;
  __double2 v7 = __sincos_stret(a3 * 0.0174532925);
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  double v30 = 0.0;
  double v31 = 0.0;
  CAAPhysicalMoon::CalculateHelper((CAAMoon *)&v34, (double *)&v33, &v32, (uint64_t)&v30, a4, a1);
  double v9 = CAAMoon::RadiusVector(v8, a1);
  long double v27 = asin(6378.14 / v9) * 57.2957795;
  double v10 = v30 * 0.261799388;
  long double __x = v31 * 0.0174532925;
  __double2 v11 = __sincos_stret(v31 * 0.0174532925);
  CAASidereal::ApparentGreenwichSiderealTime(v12, a1);
  __double2 v14 = __sincos_stret(v13 * 0.261799388 - v28 - v10);
  long double v15 = atan2(v7.__cosval * v14.__sinval, -(v11.__sinval * v7.__cosval) * v14.__cosval + v11.__cosval * v7.__sinval);
  long double v16 = acos(v7.__cosval * v11.__cosval * v14.__cosval + v11.__sinval * v7.__sinval);
  double v17 = sin(v16);
  long double v18 = v27 * (v17 + sin(v16 + v16) * 0.0084);
  double v19 = a4[6];
  __double2 v20 = __sincos_stret(v15 - v19 * 0.0174532925);
  double v21 = a4[5];
  long double v22 = -(v18 * v20.__sinval) / cos(v21 * 0.0174532925);
  long double v23 = v21 + v18 * v20.__cosval;
  a4[4] = a4[4] + v22;
  a4[5] = v23;
  double v24 = sin(v23 * 0.0174532925);
  double v25 = sin(v15);
  long double result = v19 + -(v18 * v25) * tan(__x) + v22 * v24;
  a4[6] = result;
  return result;
}

long double CAAPhysicalMoon::CalculateHelper@<D0>(CAAMoon *a1@<X0>, double *a2@<X1>, double *a3@<X2>, uint64_t a4@<X3>, double *a5@<X8>, double a6@<D0>)
{
  CAAMoon::EclipticLongitude(a1, a6);
  *(void *)a1 = v12;
  long double v14 = CAAMoon::EclipticLatitude(v13, a6);
  *a2 = v14;
  double v82 = *(double *)a1 * 0.0174532925;
  __double2 v15 = __sincos_stret(v14 * 0.0174532925);
  double v90 = CAANutation::NutationInLongitude(v16, a6) / 3600.0 * 0.0174532925;
  double v17 = a6 + -2451545.0;
  double v18 = (a6 + -2451545.0) / 36525.0;
  double v19 = v18 * v18;
  double v20 = v18 * (v18 * v18);
  double v87 = v20;
  double v21 = v18 * v20;
  double v88 = v18 * v20;
  double v22 = fmod(v18 * 483202.018 + 93.272095 + v18 * v18 * -0.0036539 + v20 / -3526000.0 + v18 * v20 / 863310000.0, 360.0);
  if (v22 < 0.0) {
    double v22 = v22 + 360.0;
  }
  double v84 = v22 * 0.0174532925;
  double v24 = fmod(v18 * -1934.13629 + 125.044548 + v19 * 0.0020754 + v18 * (v18 * v18) / 467441.0 + v21 / -60616000.0, 360.0);
  if (v24 < 0.0) {
    double v24 = v24 + 360.0;
  }
  double v25 = v24 * 0.0174532925;
  double v89 = v24 * 0.0174532925;
  double v26 = v17 / 3652500.0;
  double v27 = v26 * (v26 * v26);
  double v28 = v17 / 3652500.0 * v27;
  double v29 = v17 / 3652500.0 * v28;
  double v30 = v17 / 3652500.0 * v29;
  double v31 = v17 / 3652500.0 * v30;
  double v83 = v17 / 3652500.0 * -1.30025833
      + 23.4392911
      + v26 * v26 * -0.000430555556
      + v27 * 0.555347222
      + v28 * -0.0142722222
      + v29 * -0.0693527778
      + v30 * -0.0108472222
      + v31 * 0.00197777778
      + v17 / 3652500.0 * v31 * 0.00774166667
      + v17 / 3652500.0 * (v17 / 3652500.0 * v31) * 0.00160833333
      + v17 / 3652500.0 * (v17 / 3652500.0 * (v17 / 3652500.0 * v31)) * 0.000680555556
      + CAANutation::NutationInObliquity(v23, a6) / 3600.0;
  *a3 = v83;
  __double2 v32 = __sincos_stret(v82 - v90 - v25);
  double v33 = atan2(v15.__sinval * -0.026917056 + v15.__cosval * v32.__sinval * 0.99963767, v15.__cosval * v32.__cosval);
  double v34 = fmod(v33 * 57.2957795 - v84 * 57.2957795, 360.0);
  if (v34 < 0.0) {
    double v34 = v34 + 360.0;
  }
  if (v34 > 180.0) {
    double v34 = v34 + -360.0;
  }
  double v81 = v34;
  *a5 = v34;
  __double2 v35 = __sincos_stret(v33);
  double v86 = v84 + v84;
  long double v80 = asin(v15.__sinval * -0.99963767 + v15.__cosval * v32.__sinval * -0.026917056);
  double v36 = fmod(v18 * 35999.0503 + 357.529109 + v19 * -0.0001536 + v87 / 24490000.0, 360.0);
  if (v36 < 0.0) {
    double v36 = v36 + 360.0;
  }
  double v79 = v36 * 0.0174532925;
  double v37 = fmod(v18 * 477198.868 + 134.963396 + v19 * 0.0087414 + v87 / 69699.0 + v88 / -14712000.0, 360.0);
  if (v37 < 0.0) {
    double v37 = v37 + 360.0;
  }
  double v38 = v37 * 0.0174532925;
  double v76 = v38 + v38;
  double v39 = fmod(v18 * 445267.111 + 297.850192 + v19 * -0.0018819 + v87 / 545868.0 + v88 / -113065000.0, 360.0);
  if (v39 < 0.0) {
    double v39 = v39 + 360.0;
  }
  double v78 = v39 * 0.0174532925;
  __double2 v40 = __sincos_stret(v38);
  __double2 v41 = __sincos_stret(v84);
  __double2 v42 = __sincos_stret(v38 - v86);
  __double2 v43 = __sincos_stret(v86);
  __double2 v44 = __sincos_stret(v86 - (v78 + v78));
  __double2 v45 = __sincos_stret(v38 - (v78 + v78));
  __double2 v46 = __sincos_stret(v84 + v38);
  __double2 v47 = __sincos_stret(v38 + v86);
  __double2 v48 = __sincos_stret(v38 - v84);
  __double2 v49 = __sincos_stret(v38 + v86 - (v78 + v78));
  double v77 = v41.__sinval * -0.02245
      + v40.__cosval * -0.02752
      + v42.__cosval * 0.00684
      + v43.__cosval * -0.00293
      + v44.__cosval * -0.00085
      + v45.__cosval * -0.00054
      + v46.__sinval * -0.0002
      + v47.__cosval * -0.0002
      + v48.__cosval * -0.0002
      + v49.__cosval * 0.00014;
  double v75 = sin(v76);
  long double v85 = v41.__cosval * 0.02244
      + v40.__sinval * -0.02816
      + v42.__sinval * -0.00682
      + v43.__sinval * -0.00279
      + v44.__sinval * -0.00083
      + v45.__sinval * 0.00069
      + v46.__cosval * 0.0004
      + v75 * -0.00025
      + v47.__sinval * -0.00023
      + v48.__cosval * 0.0002
      + v48.__sinval * 0.00019
      + v49.__sinval * 0.00013
      + cos(v38 + v84 * -3.0) * -0.0001;
  double v50 = sin(v79);
  __double2 v51 = __sincos_stret(v76 - v86);
  long double v52 = v51.__sinval * 0.00473
      + (v18 * -0.002516 + 1.0 + v19 * -0.0000074) * 0.0252 * v50
      + v40.__sinval * -0.00467
      + sin((v18 * 131.849 + 119.75) * 0.0174532925) * 0.00396;
  long double v53 = v52 + sin(v76 - (v78 + v78)) * 0.00276;
  long double v54 = v53 + sin(v89) * 0.00196 + v48.__cosval * -0.00183 + v45.__sinval * 0.00115;
  long double v55 = v54 + sin(v38 - v78) * -0.00096 + v44.__sinval * 0.00046 + v48.__sinval * -0.00039;
  long double v56 = v55 + sin(v38 - v79 - v78) * -0.00032;
  long double v57 = v56 + sin(v76 - v79 - (v78 + v78)) * 0.00027;
  long double v58 = v57 + sin((v18 * 20.186 + 72.56) * 0.0174532925) * 0.00023;
  long double v59 = v58 + sin(v78 + v78) * -0.00014 + v51.__cosval * 0.00014 + v42.__sinval * -0.00012 + v75 * -0.00012;
  long double v60 = -(v59 + sin(v76 + v79 * -2.0 - (v78 + v78)) * 0.00011 - v77 * v35.__cosval);
  long double v61 = v60 + v85 * v35.__sinval * tan(v80);
  a5[1] = v80 * 57.2957795;
  a5[2] = v61;
  long double v62 = v85 * v35.__cosval - v77 * v35.__sinval;
  a5[3] = v62;
  a5[4] = v61 + v81;
  a5[5] = v80 * 57.2957795 + v62;
  long double v63 = (v80 * 57.2957795 + v62) * 0.0174532925;
  __double2 v64 = __sincos_stret(v77 * 0.0174532925 + 0.0269203074);
  __double2 v65 = __sincos_stret(v85 * 0.0174532925 / 0.026917056 + v89 + v90);
  __double2 v66 = __sincos_stret(v83 * 0.0174532925);
  long double v67 = v64.__sinval * v65.__cosval * v66.__cosval - v64.__cosval * v66.__sinval;
  double v68 = atan2(v64.__sinval * v65.__sinval, v67);
  double v70 = CAACoordinateTransformation::Ecliptic2Equatorial(v69, *(double *)a1, *a2, v83);
  *(double *)a4 = v70;
  *(void *)(a4 + 8) = v71;
  long double v72 = sqrt(v67 * v67 + v64.__sinval * v65.__sinval * (v64.__sinval * v65.__sinval)) * cos(v70 * 0.261799388 - v68);
  long double v73 = cos(v63);
  long double result = asin(v72 / v73) * 57.2957795;
  a5[6] = result;
  return result;
}

void sub_188EB2ED8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

long double CAAParallactic::ParallacticAngle(CAAParallactic *this, double a2, double a3, double a4)
{
  long double v4 = a3 * 0.0174532925;
  double v5 = a4 * 0.0174532925;
  __double2 v6 = __sincos_stret(a2 * 0.261799388);
  double v7 = tan(v4);
  __double2 v8 = __sincos_stret(v5);
  return atan2(v6.__sinval, v7 * v8.__cosval - v8.__sinval * v6.__cosval) * 57.2957795;
}

void sub_188EB30C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188EB32A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double _GEORadiusVector(CAAMoon *a1, CAAUranus *this, double result)
{
  switch((unint64_t)a1)
  {
    case 0uLL:
    case 3uLL:
      long double result = CAAEarth::RadiusVector(this, result);
      break;
    case 1uLL:
      long double result = CAAMercury::RadiusVector(this, result);
      break;
    case 2uLL:
      long double result = CAAVenus::RadiusVector(this, result);
      break;
    case 4uLL:
      long double result = CAAMoon::RadiusVector(a1, result);
      break;
    case 5uLL:
      long double result = CAAMars::RadiusVector(this, result);
      break;
    case 6uLL:
      long double result = CAAJupiter::RadiusVector(this, result);
      break;
    case 7uLL:
      long double result = CAASaturn::RadiusVector(this, result);
      break;
    case 8uLL:
      long double result = CAAUranus::RadiusVector(this, result);
      break;
    case 9uLL:
      long double result = CAANeptune::RadiusVector(this, result);
      break;
    case 0xAuLL:
      long double result = CAAPluto::RadiusVector(a1, result);
      break;
    default:
      return result;
  }
  return result;
}

void sub_188EB3620(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EB421C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EB43E0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t ContactsLibrary()
{
  uint64_t v0 = ContactsLibraryCore();
  if (!v0)
  {
    uint64_t v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

void sub_188EB4524(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188EB46C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x188EB467CLL);
  }
  _Unwind_Resume(a1);
}

void addr_obj::V2AddressObject::getDisplayLocality(addr_obj::V2AddressObject *this@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  if ((*((char *)this + 751) & 0x80000000) == 0)
  {
    if (*((unsigned char *)this + 751)) {
      goto LABEL_3;
    }
LABEL_8:
    addr_obj::V1AddressObject::getDisplayLocality(this, 0, &v22);
    std::string::size_type size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
    if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v22.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      if (!addr_obj::Debugging::addChar(v9)
        || ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? (std::string::size_type v11 = HIBYTE(v22.__r_.__value_.__r.__words[2]))
          : (std::string::size_type v11 = v22.__r_.__value_.__l.__size_),
            !v11))
      {
        if ((*((unsigned char *)&v22.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          std::string::__init_copy_ctor_external(a3, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
LABEL_41:
          if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v22.__r_.__value_.__l.__data_);
          }
          return;
        }
        *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)&v22.__r_.__value_.__l.__data_;
        std::string::size_type v12 = v22.__r_.__value_.__r.__words[2];
LABEL_25:
        a3->__r_.__value_.__r.__words[2] = v12;
        return;
      }
LABEL_36:
      std::operator+<char>();
      double v19 = std::string::append(&__p, "]");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      a3->__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      goto LABEL_41;
    }
    if (!a2)
    {
      double v17 = addr_obj::emptyString(v9);
      if (*((char *)v17 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)v17, *((void *)v17 + 1));
      }
      else
      {
        long long v18 = *v17;
        a3->__r_.__value_.__r.__words[2] = *((void *)v17 + 2);
        *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v18;
      }
      goto LABEL_41;
    }
    if (addr_obj::Debugging::addChar(v9))
    {
      int v13 = *((char *)this + 775);
      if (v13 < 0) {
        uint64_t v14 = *((void *)this + 95);
      }
      else {
        uint64_t v14 = *((unsigned __int8 *)this + 775);
      }
      if (v14) {
        goto LABEL_36;
      }
    }
    else
    {
      LOBYTE(v13) = *((unsigned char *)this + 775);
    }
    if ((v13 & 0x80) != 0)
    {
      std::string::__init_copy_ctor_external(a3, *((const std::string::value_type **)this + 94), *((void *)this + 95));
    }
    else
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *((_OWORD *)this + 47);
      a3->__r_.__value_.__r.__words[2] = *((void *)this + 96);
    }
    goto LABEL_41;
  }
  if (!*((void *)this + 92)) {
    goto LABEL_8;
  }
LABEL_3:
  __double2 v6 = (_OWORD *)((char *)this + 728);
  if (addr_obj::Debugging::addChar(this))
  {
    if ((*((unsigned char *)this + 751) & 0x80) != 0)
    {
      if (*((void *)this + 92)) {
        goto LABEL_6;
      }
    }
    else if (*((unsigned char *)this + 751))
    {
LABEL_6:
      std::operator+<char>();
      double v7 = std::string::append(&v22, "]");
      long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      a3->__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      goto LABEL_41;
    }
  }
  if ((*((unsigned char *)this + 751) & 0x80) == 0)
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *v6;
    std::string::size_type v12 = *((void *)this + 93);
    goto LABEL_25;
  }
  __double2 v15 = (const std::string::value_type *)*((void *)this + 91);
  std::string::size_type v16 = *((void *)this + 92);

  std::string::__init_copy_ctor_external(a3, v15, v16);
}

void sub_188EB4998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id _buildCNPostalAddressFromStructuredAddress(void *a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (!ContactsLibraryCore())
  {
    double v21 = 0;
    goto LABEL_39;
  }
  uint64_t v2 = objc_msgSend(NSString, "stringWithFormat:", @"%s forbids %s to be nil", "CNPostalAddress *_buildCNPostalAddressFromStructuredAddress(GEOStructuredAddress *__strong)", "structuredAddress");
  id v3 = v2;
  if (v1)
  {

    id v4 = objc_alloc_init((Class)getCNMutablePostalAddressClass());
    double v5 = objc_msgSend(NSString, "stringWithFormat:", @"%s forbids %s to be nil", "CNPostalAddress *_buildCNPostalAddressFromStructuredAddress(GEOStructuredAddress *__strong)", "cnpostal");
    __double2 v6 = v5;
    if (v4)
    {

      double v7 = [v1 countryCode];
      if ([v7 length]) {
        [v4 setISOCountryCode:v7];
      }
      long long v8 = [v1 fullThoroughfare];
      if (![v8 length])
      {
        uint64_t v9 = [v1 thoroughfare];

        long long v8 = (void *)v9;
      }
      if (![v8 length])
      {
        double v10 = [v7 lowercaseString];
        int v11 = [v10 isEqualToString:@"jp"];

        if (v11)
        {
          uint64_t v12 = [v1 subLocality];

          long long v8 = (void *)v12;
        }
      }
      if ([v8 length]) {
        [v4 setStreet:v8];
      }
      int v13 = [v1 locality];
      if ([v13 length]) {
        [v4 setCity:v13];
      }
      uint64_t v14 = [v1 administrativeAreaCode];
      if (![v14 length])
      {
        uint64_t v15 = [v1 administrativeArea];

        uint64_t v14 = (void *)v15;
      }
      if ([v14 length]) {
        [v4 setState:v14];
      }
      std::string::size_type v16 = [v1 postCodeFull];
      if (![v16 length])
      {
        uint64_t v17 = [v1 postCode];

        std::string::size_type v16 = (void *)v17;
      }
      if ([v16 length]) {
        [v4 setPostalCode:v16];
      }
      long long v18 = [v1 subAdministrativeArea];
      if ([v18 length]) {
        [v4 setSubAdministrativeArea:v18];
      }
      double v19 = [v1 subLocality];
      if ([v19 length]) {
        [v4 setSubLocality:v19];
      }
      long long v20 = [v1 country];
      if ([v20 length]) {
        [v4 setCountry:v20];
      }
      id v3 = v4;

      double v21 = v3;
      goto LABEL_38;
    }
    long double v23 = GEOFindOrCreateLog("com.apple.GeoServices", "GEOAddressObject");
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      id v26 = v6;
      _os_log_impl(&dword_188D96000, v23, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }

    id v3 = 0;
  }
  else
  {
    std::string v22 = GEOFindOrCreateLog("com.apple.GeoServices", "GEOAddressObject");
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      id v26 = v3;
      _os_log_impl(&dword_188D96000, v22, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }
  }
  double v21 = 0;
LABEL_38:

LABEL_39:

  return v21;
}

void sub_188EB4DD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _Unwind_Exception *exception_object)
{
  _Unwind_Resume(a1);
}

void sub_188EB4E84()
{
}

id _buildGEODictionaryFromStructuredAddress(void *a1)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = objc_msgSend(NSString, "stringWithFormat:", @"%s forbids %s to be nil", "NSDictionary *_buildGEODictionaryFromStructuredAddress(GEOStructuredAddress *__strong)", "structuredAddress");
  id v3 = v2;
  if (v1)
  {

    id v4 = [MEMORY[0x1E4F1CA60] dictionary];
    double v5 = [v1 countryCode];
    double v30 = v5;
    if ([v5 length]) {
      [v4 setObject:v5 forKey:@"CountryCode"];
    }
    double v34 = [v1 fullThoroughfare];
    if ([v34 length])
    {
      __double2 v6 = v34;
    }
    else
    {
      uint64_t v8 = [v1 thoroughfare];

      __double2 v6 = (void *)v8;
    }
    __double2 v35 = v6;
    if (![v6 length])
    {
      uint64_t v9 = [v30 lowercaseString];
      int v10 = [v9 isEqualToString:@"jp"];

      if (v10)
      {
        uint64_t v11 = [v1 subLocality];

        __double2 v35 = (void *)v11;
      }
    }
    if ([v35 length]) {
      [v4 setObject:v35 forKey:@"Street"];
    }
    if ([v1 hasThoroughfare])
    {
      uint64_t v12 = [v1 thoroughfare];
      uint64_t v13 = [v12 length];

      if (v13)
      {
        uint64_t v14 = [v1 thoroughfare];
        [v4 setObject:v14 forKeyedSubscript:@"Thoroughfare"];
      }
    }
    double v31 = [v1 locality];
    if ([v31 length]) {
      [v4 setObject:v31 forKey:@"City"];
    }
    __double2 v32 = [v1 administrativeAreaCode];
    if ([v32 length])
    {
      uint64_t v15 = v32;
    }
    else
    {
      uint64_t v16 = [v1 administrativeArea];

      uint64_t v15 = (void *)v16;
    }
    double v33 = v15;
    if ([v15 length]) {
      [v4 setObject:v33 forKey:@"State"];
    }
    uint64_t v17 = [v1 postCodeFull];
    if (![v17 length])
    {
      uint64_t v18 = [v1 postCode];

      uint64_t v17 = (void *)v18;
    }
    if ([v17 length]) {
      [v4 setObject:v17 forKey:@"ZIP"];
    }
    if ([v1 hasPostCodeExtension])
    {
      double v19 = [v1 postCodeExtension];
      uint64_t v20 = [v19 length];

      if (v20)
      {
        double v21 = [v1 postCodeExtension];
        [v4 setObject:v21 forKeyedSubscript:@"PostCodeExtension"];
      }
    }
    std::string v22 = [v1 subAdministrativeArea];
    if ([v22 length]) {
      [v4 setObject:v22 forKey:@"SubAdministrativeArea"];
    }
    long double v23 = [v1 subLocality];
    if ([v23 length]) {
      [v4 setObject:v23 forKey:@"SubLocality"];
    }
    double v24 = [v1 premises];
    if ([v24 length]) {
      [v4 setObject:v24 forKey:@"Premises"];
    }
    double v25 = [v1 subThoroughfare];
    if ([v25 length]) {
      [v4 setObject:v25 forKey:@"SubThoroughfare"];
    }
    id v26 = [v1 inlandWater];
    if ([v26 length]) {
      [v4 setObject:v26 forKey:@"InlandWater"];
    }
    uint64_t v27 = [v1 ocean];
    if ([v27 length]) {
      [v4 setObject:v27 forKey:@"Ocean"];
    }
    double v28 = [v1 country];
    if ([v28 length]) {
      [v4 setObject:v28 forKey:@"Country"];
    }
  }
  else
  {
    double v7 = GEOFindOrCreateLog("com.apple.GeoServices", "GEOAddressObject");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      double v37 = v3;
      _os_log_impl(&dword_188D96000, v7, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
    }

    id v4 = 0;
  }

  return v4;
}

void sub_188EB53A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _Unwind_Exception *exception_object, void *a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

uint64_t ContactsLibraryCore()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = 0;
  id v3 = &v2;
  uint64_t v4 = 0x2020000000;
  uint64_t v0 = ContactsLibraryCore_frameworkLibrary;
  uint64_t v5 = ContactsLibraryCore_frameworkLibrary;
  if (!ContactsLibraryCore_frameworkLibrary)
  {
    long long v6 = __const__block__paths_1;
    long long v7 = *(_OWORD *)&off_1E53E0DD8;
    v3[3] = _sl_dlopen();
    ContactsLibraryCore_frameworkLibrary = v3[3];
    uint64_t v0 = v3[3];
  }
  _Block_object_dispose(&v2, 8);
  return v0;
}

void sub_188EB57B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getCNMutablePostalAddressClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getCNMutablePostalAddressClass_softClass;
  uint64_t v7 = getCNMutablePostalAddressClass_softClass;
  if (!getCNMutablePostalAddressClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getCNMutablePostalAddressClass_block_invoke;
    v3[3] = &unk_1E53DB3C8;
    v3[4] = &v4;
    __getCNMutablePostalAddressClass_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_188EB5898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getCNMutablePostalAddressClass_block_invoke(uint64_t a1)
{
  ContactsLibrary();
  Class result = objc_getClass("CNMutablePostalAddress");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCNMutablePostalAddressClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = abort_report_np();
    return (Class)__32__GEOPlatform_supportsMultiUser__block_invoke(v3);
  }
  return result;
}

uint64_t GEOCreatePhoneNumberForStringRepresentation(uint64_t a1)
{
  if (a1 && MEMORY[0x1E4F8A208]) {
    return CFPhoneNumberCreate();
  }
  else {
    return 0;
  }
}

void sub_188EB5F24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 64), 8);

  _Unwind_Resume(a1);
}

id __copy_helper_block_ea8_32c49_ZTSKZ36__GEOTileLoader__requestOnlineTiles_E3__4(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  id result = *(id *)(a2 + 56);
  *(void *)(a1 + 56) = result;
  return result;
}

uint64_t GEOBatchIDIsTelemetryData(uint64_t a1)
{
  return (WORD2(a1) < 0x14u) & (0x83C00u >> SBYTE4(a1));
}

unint64_t GEOMakeGEOAPBatchID(unsigned __int16 a1, uint64_t a2, unsigned int a3)
{
  return a3 | ((unint64_t)a1 << 32) | (a2 << 48);
}

void sub_188EB6954(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDTransitNearbyScheduleReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 44);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 40)];
  char v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  int v12 = ((*(unsigned __int8 *)(a1 + 52) >> 2) & 1)
      + (*(unsigned char *)(a1 + 52) & 1)
      + ((*(unsigned __int8 *)(a1 + 52) >> 1) & 1);
  while (2)
  {
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    switch(a3[v8])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        char v7 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v16 = v12 != 0;
        int v17 = v16 & ~v11 | v9;
        int v50 = v16 | v11;
        if (((v16 | v11) | v7)) {
          uint64_t v18 = 0;
        }
        else {
          uint64_t v18 = a3;
        }
        BOOL v19 = v8 != 0;
        uint64_t v20 = (int *)MEMORY[0x1E4F940E8];
        int v21 = 1;
        std::string v22 = (int *)MEMORY[0x1E4F940C8];
        if (*(void *)(v3 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(v3 + *v6)) {
          goto LABEL_62;
        }
        char v48 = v17;
        int v49 = v19 | v50 | v17;
        long double v23 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v12;
LABEL_7:
        uint64_t v13 = v9;
LABEL_8:
        uint64_t v14 = v10;
        uint64_t v15 = v11;
LABEL_10:
        ++v8;
        uint64_t v9 = v13;
        uint64_t v10 = v14;
        uint64_t v11 = v15;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(unsigned char *)(v3 + *v22)) {
      goto LABEL_60;
    }
    char v24 = 0;
    unsigned int v25 = 0;
    unint64_t v26 = 0;
    while (1)
    {
      uint64_t v27 = *v20;
      uint64_t v28 = *(void *)(v3 + v27);
      unint64_t v29 = v28 + 1;
      if (v28 == -1 || v29 > *(void *)(v3 + *v6)) {
        break;
      }
      char v30 = *(unsigned char *)(*(void *)(v3 + *v23) + v28);
      *(void *)(v3 + v27) = v29;
      v26 |= (unint64_t)(v30 & 0x7F) << v24;
      if ((v30 & 0x80) == 0) {
        goto LABEL_25;
      }
      v24 += 7;
      if (v25++ >= 9)
      {
        unint64_t v26 = 0;
        int v32 = *(unsigned __int8 *)(v3 + *v22);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v22) = 1;
LABEL_25:
    int v32 = *(unsigned __int8 *)(v3 + *v22);
    if (*(unsigned char *)(v3 + *v22)) {
      unint64_t v26 = 0;
    }
LABEL_27:
    if (v32 || (v26 & 7) == 4)
    {
LABEL_60:
      int v21 = 1;
      goto LABEL_61;
    }
    unint64_t v34 = v26 >> 3;
    BOOL v35 = v50;
    if (!((v18 == 0) | v50 & 1))
    {
      double v36 = v18;
      do
      {
        int v38 = *v36++;
        int v37 = v38;
        BOOL v35 = v38 != 0;
        if (v38) {
          BOOL v39 = v37 == v34;
        }
        else {
          BOOL v39 = 1;
        }
      }
      while (!v39);
    }
    if (v34 == 2) {
      break;
    }
    if (v34 == 1)
    {
      if (!v35 || (*(unsigned char *)(a1 + 52) & 2) != 0) {
        goto LABEL_58;
      }
      if ((PBReaderPlaceMark() & 1) == 0) {
        goto LABEL_81;
      }
      __double2 v40 = objc_alloc_init(GEOPDTransitScheduleCategory);
      if (!GEOPDTransitScheduleCategoryReadAllFrom((uint64_t)v40, (void *)v3, v10 & 1)) {
        goto LABEL_80;
      }
      PBReaderRecallMark();
      -[GEOPDTransitNearbySchedule _addNoFlagsCategory:](a1, v40);
      goto LABEL_50;
    }
    if (v48 & 1) == 0 || (*(unsigned char *)(a1 + 52)) {
      goto LABEL_58;
    }
    if (!*(void *)(a1 + 16))
    {
      id v41 = objc_alloc_init(MEMORY[0x1E4F940B0]);
      __double2 v42 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v41;
    }
    int v21 = PBUnknownFieldAdd();
    std::string v22 = (int *)MEMORY[0x1E4F940C8];
    if (!v21) {
      goto LABEL_63;
    }
LABEL_56:
    if ((v49 & 1) == 0) {
      goto LABEL_60;
    }
LABEL_59:
    if (*(void *)(v3 + *v20) >= *(void *)(v3 + *v6)) {
      goto LABEL_60;
    }
  }
  if (!v35 || (*(unsigned char *)(a1 + 52) & 4) != 0)
  {
LABEL_58:
    int v21 = PBReaderSkipValueWithTag();
    std::string v22 = (int *)MEMORY[0x1E4F940C8];
    if ((v21 & v49 & 1) == 0) {
      goto LABEL_61;
    }
    goto LABEL_59;
  }
  if ((PBReaderPlaceMark() & 1) == 0) {
    goto LABEL_81;
  }
  __double2 v40 = objc_alloc_init(GEOPDTransitScheduleGroup);
  if (GEOPDTransitScheduleGroupReadAllFrom((uint64_t)v40, (void *)v3, v10 & 1))
  {
    PBReaderRecallMark();
    -[GEOPDTransitNearbySchedule _addNoFlagsGroup:](a1, v40);
LABEL_50:

    std::string v22 = (int *)MEMORY[0x1E4F940C8];
    goto LABEL_56;
  }
LABEL_80:

LABEL_81:
  int v21 = 0;
  std::string v22 = (int *)MEMORY[0x1E4F940C8];
LABEL_61:
  LOBYTE(v17) = v48;
LABEL_62:
  if (v17) {
LABEL_63:
  }
    *(unsigned char *)(a1 + 52) |= 1u;
  if (v50 & 1 | ((v21 & 1) == 0))
  {
    *(unsigned char *)(a1 + 52) |= 2u;
    *(unsigned char *)(a1 + 52) |= 4u;
    goto LABEL_74;
  }
  if (v18)
  {
    while (1)
    {
      int v45 = *v18++;
      int v44 = v45;
      if (v45 == 1) {
        break;
      }
      if (v44 == 2)
      {
        char v43 = 4;
LABEL_70:
        *(unsigned char *)(a1 + 52) |= v43;
      }
      else if (!v44)
      {
        goto LABEL_74;
      }
    }
    char v43 = 2;
    goto LABEL_70;
  }
LABEL_74:
  if (v21) {
    unint64_t v3 = *(unsigned char *)(v3 + *v22) == 0;
  }
  else {
    unint64_t v3 = 0;
  }
  if (v50)
  {
    __double2 v46 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  return v3;
}

void sub_188EB7380(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EB7450(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPFeedbackImageIdMapEntryReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 44);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 40)];
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  int v11 = ((*(unsigned __int8 *)(a1 + 52) >> 2) & 1)
      + (*(unsigned char *)(a1 + 52) & 1)
      + ((*(unsigned __int8 *)(a1 + 52) >> 1) & 1);
  while (2)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    switch(a3[v10])
    {
      case -4:
        ++v11;
        uint64_t v12 = v7;
        goto LABEL_8;
      case -3:
        char v9 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_8;
      case 0:
        BOOL v14 = v11 != 0;
        char v15 = v14 & ~(_BYTE)v7;
        unsigned __int8 v16 = v14 | v7;
        char v51 = v15 | v8;
        if ((v16 | v9)) {
          int v17 = 0;
        }
        else {
          int v17 = a3;
        }
        BOOL v54 = v16;
        char v52 = v16 | v15 | v8;
        char v53 = (v17 == 0) | v16;
        uint64_t v18 = (int *)MEMORY[0x1E4F940E8];
        BOOL v19 = (int *)MEMORY[0x1E4F940C8];
        uint64_t v20 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v11;
LABEL_7:
        uint64_t v12 = v7;
        uint64_t v13 = v8;
LABEL_8:
        ++v10;
        uint64_t v7 = v12;
        uint64_t v8 = v13;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(void *)(v3 + *v18) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v19)) {
      goto LABEL_59;
    }
    char v21 = 0;
    unsigned int v22 = 0;
    unint64_t v23 = 0;
    while (1)
    {
      uint64_t v24 = *v18;
      uint64_t v25 = *(void *)(v3 + v24);
      unint64_t v26 = v25 + 1;
      if (v25 == -1 || v26 > *(void *)(v3 + *v6)) {
        break;
      }
      char v27 = *(unsigned char *)(*(void *)(v3 + *v20) + v25);
      *(void *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0) {
        goto LABEL_23;
      }
      v21 += 7;
      if (v22++ >= 9)
      {
        unint64_t v23 = 0;
        int v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_25;
      }
    }
    *(unsigned char *)(v3 + *v19) = 1;
LABEL_23:
    int v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(unsigned char *)(v3 + *v19)) {
      unint64_t v23 = 0;
    }
LABEL_25:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_59:
      int v50 = 1;
      goto LABEL_60;
    }
    unint64_t v31 = v23 >> 3;
    BOOL v32 = v54;
    if ((v53 & 1) == 0)
    {
      double v33 = v17;
      do
      {
        int v35 = *v33++;
        int v34 = v35;
        BOOL v32 = v35 != 0;
        if (v35) {
          BOOL v36 = v34 == v31;
        }
        else {
          BOOL v36 = 1;
        }
      }
      while (!v36);
    }
    if (v31 == 2) {
      break;
    }
    if (v31 == 1)
    {
      if (!v32) {
        goto LABEL_51;
      }
      if ((*(unsigned char *)(a1 + 52) & 2) != 0)
      {
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_78;
        }
        char v44 = *(unsigned char *)(a1 + 52) << 6;
        goto LABEL_57;
      }
      uint64_t v37 = PBReaderReadString();
      uint64_t v38 = 24;
      goto LABEL_44;
    }
    if (v51 & 1) == 0 || (*(unsigned char *)(a1 + 52))
    {
LABEL_51:
      char v43 = PBReaderSkipValueWithTag();
      BOOL v19 = (int *)MEMORY[0x1E4F940C8];
      if ((v43 & 1) == 0)
      {
        int v50 = 0;
        goto LABEL_60;
      }
      goto LABEL_58;
    }
    if (!*(void *)(a1 + 16))
    {
      id v40 = objc_alloc_init(MEMORY[0x1E4F940B0]);
      id v41 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v40;
    }
    int v42 = PBUnknownFieldAdd();
    BOOL v19 = (int *)MEMORY[0x1E4F940C8];
    if (!v42)
    {
      int v50 = 0;
      goto LABEL_61;
    }
LABEL_58:
    if (!(v52 & 1 | (v10 != 0))) {
      goto LABEL_59;
    }
  }
  if (!v32) {
    goto LABEL_51;
  }
  if ((*(unsigned char *)(a1 + 52) & 4) == 0)
  {
    uint64_t v37 = PBReaderReadString();
    uint64_t v38 = 32;
LABEL_44:
    BOOL v39 = *(void **)(a1 + v38);
    *(void *)(a1 + v38) = v37;

    BOOL v19 = (int *)MEMORY[0x1E4F940C8];
    --v10;
    goto LABEL_58;
  }
  if (PBReaderSkipValueWithTag())
  {
    char v44 = 32 * *(unsigned char *)(a1 + 52);
LABEL_57:
    v10 += v44 >> 7;
    BOOL v19 = (int *)MEMORY[0x1E4F940C8];
    goto LABEL_58;
  }
LABEL_78:
  int v50 = 0;
  BOOL v19 = (int *)MEMORY[0x1E4F940C8];
LABEL_60:
  if ((v51 & 1) == 0) {
    goto LABEL_62;
  }
LABEL_61:
  *(unsigned char *)(a1 + 52) |= 1u;
LABEL_62:
  if (v54 || (v50 & 1) == 0)
  {
    *(unsigned char *)(a1 + 52) |= 2u;
    *(unsigned char *)(a1 + 52) |= 4u;
    goto LABEL_72;
  }
  if (v17)
  {
    while (1)
    {
      int v47 = *v17++;
      int v46 = v47;
      if (v47 == 1) {
        break;
      }
      if (v46 == 2)
      {
        char v45 = 4;
LABEL_68:
        *(unsigned char *)(a1 + 52) |= v45;
      }
      else if (!v46)
      {
        goto LABEL_72;
      }
    }
    char v45 = 2;
    goto LABEL_68;
  }
LABEL_72:
  if (v50) {
    unint64_t v3 = *(unsigned char *)(v3 + *v19) == 0;
  }
  else {
    unint64_t v3 = 0;
  }
  if (v54)
  {
    char v48 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  return v3;
}

void sub_188EB7C80(_Unwind_Exception *a1)
{
  MEMORY[0x18C11F580](v2, 0x1020C40CBE26B1DLL);

  _Unwind_Resume(a1);
}

void sub_188EB8040(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

__CFString *GEOTileDBTileSetShortDescription(unsigned __int8 *a1)
{
  if (!a1)
  {
    uint64_t v8 = @"<null>";
    goto LABEL_251;
  }
  int v2 = *a1;
  if (v2 == 2)
  {
    char v9 = NSString;
    unsigned int v10 = *(unsigned __int16 *)(a1 + 1) | (a1[3] << 16);
    uint64_t v7 = @"RASTER_STANDARD";
    switch(*(_WORD *)(a1 + 1))
    {
      case 0u:
        break;
      case 1u:
        uint64_t v7 = @"VECTOR_STANDARD";
        break;
      case 2u:
        uint64_t v7 = @"VECTOR_TRAFFIC_SEGMENTS_FOR_RASTER";
        break;
      case 3u:
        uint64_t v7 = @"VECTOR_TRAFFIC_INCIDENTS_FOR_RASTER";
        break;
      case 4u:
        uint64_t v7 = @"VECTOR_TRAFFIC_SEGMENTS_AND_INCIDENTS_FOR_RASTER";
        break;
      case 5u:
        uint64_t v7 = @"RASTER_STANDARD_BACKGROUND";
        break;
      case 6u:
        uint64_t v7 = @"RASTER_HYBRID";
        break;
      case 7u:
        uint64_t v7 = @"RASTER_SATELLITE";
        break;
      case 8u:
        uint64_t v7 = @"RASTER_TERRAIN";
        break;
      case 0xBu:
        uint64_t v7 = @"VECTOR_BUILDINGS";
        break;
      case 0xCu:
        uint64_t v7 = @"VECTOR_TRAFFIC";
        break;
      case 0xDu:
        uint64_t v7 = @"VECTOR_POI";
        break;
      case 0xEu:
        uint64_t v7 = @"SPUTNIK_METADATA";
        break;
      case 0xFu:
        uint64_t v7 = @"SPUTNIK_C3M";
        break;
      case 0x10u:
        uint64_t v7 = @"SPUTNIK_DSM";
        break;
      case 0x11u:
        uint64_t v7 = @"SPUTNIK_DSM_GLOBAL";
        break;
      case 0x12u:
        uint64_t v7 = @"VECTOR_REALISTIC";
        break;
      case 0x13u:
        uint64_t v7 = @"VECTOR_LEGACY_REALISTIC";
        break;
      case 0x14u:
        uint64_t v7 = @"VECTOR_ROADS";
        break;
      case 0x15u:
        uint64_t v7 = @"RASTER_VEGETATION";
        break;
      case 0x16u:
        uint64_t v7 = @"VECTOR_TRAFFIC_SKELETON";
        break;
      case 0x17u:
        uint64_t v7 = @"RASTER_COASTLINE_MASK";
        break;
      case 0x18u:
        uint64_t v7 = @"RASTER_HILLSHADE";
        break;
      case 0x19u:
        uint64_t v7 = @"VECTOR_TRAFFIC_WITH_GREEN";
        break;
      case 0x1Au:
        uint64_t v7 = @"VECTOR_TRAFFIC_STATIC";
        break;
      case 0x1Bu:
        uint64_t v7 = @"RASTER_COASTLINE_DROP_MASK";
        break;
      case 0x1Cu:
        uint64_t v7 = @"VECTOR_TRAFFIC_SKELETON_WITH_HISTORICAL";
        break;
      case 0x1Du:
        uint64_t v7 = @"VECTOR_SPEED_PROFILES";
        break;
      case 0x1Eu:
        uint64_t v7 = @"VECTOR_VENUES";
        break;
      case 0x1Fu:
        uint64_t v7 = @"RASTER_DOWN_SAMPLED";
        break;
      case 0x20u:
        uint64_t v7 = @"RASTER_COLOR_BALANCED";
        break;
      case 0x21u:
        uint64_t v7 = @"RASTER_SATELLITE_NIGHT";
        break;
      case 0x22u:
        uint64_t v7 = @"SPUTNIK_VECTOR_BORDER";
        break;
      case 0x23u:
        uint64_t v7 = @"RASTER_SATELLITE_DIGITIZE";
        break;
      case 0x24u:
        uint64_t v7 = @"RASTER_HILLSHADE_PARKS";
        break;
      case 0x25u:
        uint64_t v7 = @"VECTOR_TRANSIT";
        break;
      case 0x26u:
        uint64_t v7 = @"RASTER_STANDARD_BASE";
        break;
      case 0x27u:
        uint64_t v7 = @"RASTER_STANDARD_LABELS";
        break;
      case 0x28u:
        uint64_t v7 = @"RASTER_HYBRID_ROADS";
        break;
      case 0x29u:
        uint64_t v7 = @"RASTER_HYBRID_LABELS";
        break;
      case 0x2Au:
        uint64_t v7 = @"FLYOVER_C3M_MESH";
        break;
      case 0x2Bu:
        uint64_t v7 = @"FLYOVER_C3M_JPEG_TEXTURE";
        break;
      case 0x2Cu:
        uint64_t v7 = @"FLYOVER_C3M_ASTC_TEXTURE";
        break;
      case 0x2Du:
        uint64_t v7 = @"RASTER_SATELLITE_ASTC";
        break;
      case 0x2Eu:
        uint64_t v7 = @"RASTER_HYBRID_ROADS_AND_LABELS";
        break;
      case 0x2Fu:
        uint64_t v7 = @"VECTOR_TRANSIT_SELECTION";
        break;
      case 0x30u:
        uint64_t v7 = @"VECTOR_COVERAGE";
        break;
      case 0x34u:
        uint64_t v7 = @"FLYOVER_METADATA";
        break;
      case 0x35u:
        uint64_t v7 = @"VECTOR_ROAD_NETWORK";
        break;
      case 0x36u:
        uint64_t v7 = @"VECTOR_LAND_COVER";
        break;
      case 0x37u:
        uint64_t v7 = @"VECTOR_DEBUG";
        break;
      case 0x38u:
        uint64_t v7 = @"VECTOR_STREET_POI";
        break;
      case 0x39u:
        uint64_t v7 = @"MUNIN_METADATA";
        break;
      case 0x3Au:
        uint64_t v7 = @"VECTOR_SPR_MERCATOR";
        break;
      case 0x3Bu:
        uint64_t v7 = @"VECTOR_SPR_MODELS";
        break;
      case 0x3Cu:
        uint64_t v7 = @"VECTOR_SPR_MATERIALS";
        break;
      case 0x3Du:
        uint64_t v7 = @"VECTOR_SPR_METADATA";
        break;
      case 0x3Eu:
        uint64_t v7 = @"VECTOR_TRACKS";
        break;
      case 0x3Fu:
        uint64_t v7 = @"VECTOR_RESERVED_2";
        break;
      case 0x40u:
        uint64_t v7 = @"VECTOR_STREET_LANDMARKS";
        break;
      case 0x41u:
        uint64_t v7 = @"COARSE_LOCATION_POLYGONS";
        break;
      case 0x42u:
        uint64_t v7 = @"VECTOR_SPR_ROADS";
        break;
      case 0x43u:
        uint64_t v7 = @"VECTOR_SPR_STANDARD";
        break;
      case 0x44u:
        uint64_t v7 = @"VECTOR_POI_V2";
        break;
      case 0x45u:
        uint64_t v7 = @"VECTOR_POLYGON_SELECTION";
        break;
      case 0x46u:
        uint64_t v7 = @"VL_METADATA";
        break;
      case 0x47u:
        uint64_t v7 = @"VL_DATA";
        break;
      case 0x48u:
        uint64_t v7 = @"PROACTIVE_APP_CLIP";
        break;
      case 0x49u:
        uint64_t v7 = @"VECTOR_BUILDINGS_V2";
        break;
      case 0x4Au:
        uint64_t v7 = @"POI_BUSYNESS";
        break;
      case 0x4Bu:
        uint64_t v7 = @"POI_DP_BUSYNESS";
        break;
      case 0x4Cu:
        uint64_t v7 = @"SMART_INTERFACE_SELECTION";
        break;
      case 0x4Du:
        uint64_t v7 = @"VECTOR_ASSETS";
        break;
      case 0x4Eu:
        uint64_t v7 = @"SPR_ASSET_METADATA";
        break;
      case 0x4Fu:
        uint64_t v7 = @"VECTOR_SPR_POLAR";
        break;
      case 0x50u:
        uint64_t v7 = @"SMART_DATA_MODE";
        break;
      case 0x51u:
        uint64_t v7 = @"CELLULAR_PERFORMANCE_SCORE";
        break;
      case 0x52u:
        uint64_t v7 = @"VECTOR_SPR_MODELS_OCCLUSION";
        break;
      case 0x53u:
        uint64_t v7 = @"VECTOR_TOPOGRAPHIC";
        break;
      case 0x54u:
        uint64_t v7 = @"VECTOR_POI_V2_UPDATE";
        break;
      case 0x55u:
        uint64_t v7 = @"VECTOR_LIVE_DATA_UPDATES";
        break;
      case 0x56u:
        uint64_t v7 = @"VECTOR_TRAFFIC_V2";
        break;
      case 0x57u:
        uint64_t v7 = @"VECTOR_ROAD_SELECTION";
        break;
      case 0x58u:
        uint64_t v7 = @"VECTOR_REGION_METADATA";
        break;
      case 0x59u:
        uint64_t v7 = @"RAY_TRACING";
        break;
      case 0x5Au:
        uint64_t v7 = @"VECTOR_CONTOURS";
        break;
      case 0x5Bu:
        uint64_t v7 = @"RASTER_SATELLITE_POLAR";
        break;
      case 0x5Cu:
        uint64_t v7 = @"VMAP4_ELEVATION";
        break;
      case 0x5Du:
        uint64_t v7 = @"VMAP4_ELEVATION_POLAR";
        break;
      case 0x5Eu:
        uint64_t v7 = @"CELLULAR_COVERAGE_PLMN";
        break;
      case 0x5Fu:
        uint64_t v7 = @"RASTER_SATELLITE_POLAR_NIGHT";
        break;
      case 0x60u:
        uint64_t v7 = @"UNUSED_96";
        break;
      case 0x61u:
        uint64_t v7 = @"UNUSED_97";
        break;
      case 0x62u:
        uint64_t v7 = @"UNUSED_98";
        break;
      case 0x63u:
        uint64_t v7 = @"UNUSED_99";
        break;
      case 0x64u:
        uint64_t v7 = @"UNUSED_100";
        break;
      case 0x65u:
        uint64_t v7 = @"UNUSED_101";
        break;
      case 0x66u:
        uint64_t v7 = @"UNUSED_102";
        break;
      case 0x67u:
        uint64_t v7 = @"UNUSED_103";
        break;
      case 0x68u:
        uint64_t v7 = @"UNUSED_104";
        break;
      case 0x69u:
        uint64_t v7 = @"UNUSED_105";
        break;
      case 0x6Au:
        uint64_t v7 = @"UNUSED_106";
        break;
      case 0x6Bu:
        uint64_t v7 = @"UNUSED_107";
        break;
      case 0x6Cu:
        uint64_t v7 = @"UNUSED_108";
        break;
      case 0x6Du:
        uint64_t v7 = @"UNUSED_109";
        break;
      case 0x6Eu:
        uint64_t v7 = @"UNUSED_110";
        break;
      case 0x6Fu:
        uint64_t v7 = @"UNUSED_111";
        break;
      case 0x70u:
        uint64_t v7 = @"UNUSED_112";
        break;
      case 0x71u:
        uint64_t v7 = @"UNUSED_113";
        break;
      case 0x72u:
        uint64_t v7 = @"UNUSED_114";
        break;
      case 0x73u:
        uint64_t v7 = @"UNUSED_115";
        break;
      case 0x74u:
        uint64_t v7 = @"UNUSED_116";
        break;
      case 0x75u:
        uint64_t v7 = @"UNUSED_117";
        break;
      case 0x76u:
        uint64_t v7 = @"UNUSED_118";
        break;
      case 0x77u:
        uint64_t v7 = @"UNUSED_119";
        break;
      default:
        objc_msgSend(NSString, "stringWithFormat:", @"(unknown: %i)", (char)*(_WORD *)(a1 + 1));
        uint64_t v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
        unsigned int v10 = *(unsigned __int16 *)(a1 + 1) | (a1[3] << 16);
        break;
    }
    uint64_t v8 = [v9 stringWithFormat:@"<%@|region: %d>", v7, (unsigned __int16)(v10 >> 8)];
  }
  else
  {
    if (v2 != 1)
    {
      objc_msgSend(NSString, "stringWithFormat:", @"<unknown: %d>", *(unsigned int *)a1);
      uint64_t v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
      goto LABEL_251;
    }
    unint64_t v3 = NSString;
    int v4 = *(unsigned __int16 *)(a1 + 1);
    uint64_t v5 = (v4 << 18 >> 18);
    int v6 = v4 | (a1[3] << 16);
    uint64_t v7 = @"RASTER_STANDARD";
    switch((int)v5)
    {
      case 0:
        break;
      case 1:
        uint64_t v7 = @"VECTOR_STANDARD";
        break;
      case 2:
        uint64_t v7 = @"VECTOR_TRAFFIC_SEGMENTS_FOR_RASTER";
        break;
      case 3:
        uint64_t v7 = @"VECTOR_TRAFFIC_INCIDENTS_FOR_RASTER";
        break;
      case 4:
        uint64_t v7 = @"VECTOR_TRAFFIC_SEGMENTS_AND_INCIDENTS_FOR_RASTER";
        break;
      case 5:
        uint64_t v7 = @"RASTER_STANDARD_BACKGROUND";
        break;
      case 6:
        uint64_t v7 = @"RASTER_HYBRID";
        break;
      case 7:
        uint64_t v7 = @"RASTER_SATELLITE";
        break;
      case 8:
        uint64_t v7 = @"RASTER_TERRAIN";
        break;
      case 11:
        uint64_t v7 = @"VECTOR_BUILDINGS";
        break;
      case 12:
        uint64_t v7 = @"VECTOR_TRAFFIC";
        break;
      case 13:
        uint64_t v7 = @"VECTOR_POI";
        break;
      case 14:
        uint64_t v7 = @"SPUTNIK_METADATA";
        break;
      case 15:
        uint64_t v7 = @"SPUTNIK_C3M";
        break;
      case 16:
        uint64_t v7 = @"SPUTNIK_DSM";
        break;
      case 17:
        uint64_t v7 = @"SPUTNIK_DSM_GLOBAL";
        break;
      case 18:
        uint64_t v7 = @"VECTOR_REALISTIC";
        break;
      case 19:
        uint64_t v7 = @"VECTOR_LEGACY_REALISTIC";
        break;
      case 20:
        uint64_t v7 = @"VECTOR_ROADS";
        break;
      case 21:
        uint64_t v7 = @"RASTER_VEGETATION";
        break;
      case 22:
        uint64_t v7 = @"VECTOR_TRAFFIC_SKELETON";
        break;
      case 23:
        uint64_t v7 = @"RASTER_COASTLINE_MASK";
        break;
      case 24:
        uint64_t v7 = @"RASTER_HILLSHADE";
        break;
      case 25:
        uint64_t v7 = @"VECTOR_TRAFFIC_WITH_GREEN";
        break;
      case 26:
        uint64_t v7 = @"VECTOR_TRAFFIC_STATIC";
        break;
      case 27:
        uint64_t v7 = @"RASTER_COASTLINE_DROP_MASK";
        break;
      case 28:
        uint64_t v7 = @"VECTOR_TRAFFIC_SKELETON_WITH_HISTORICAL";
        break;
      case 29:
        uint64_t v7 = @"VECTOR_SPEED_PROFILES";
        break;
      case 30:
        uint64_t v7 = @"VECTOR_VENUES";
        break;
      case 31:
        uint64_t v7 = @"RASTER_DOWN_SAMPLED";
        break;
      case 32:
        uint64_t v7 = @"RASTER_COLOR_BALANCED";
        break;
      case 33:
        uint64_t v7 = @"RASTER_SATELLITE_NIGHT";
        break;
      case 34:
        uint64_t v7 = @"SPUTNIK_VECTOR_BORDER";
        break;
      case 35:
        uint64_t v7 = @"RASTER_SATELLITE_DIGITIZE";
        break;
      case 36:
        uint64_t v7 = @"RASTER_HILLSHADE_PARKS";
        break;
      case 37:
        uint64_t v7 = @"VECTOR_TRANSIT";
        break;
      case 38:
        uint64_t v7 = @"RASTER_STANDARD_BASE";
        break;
      case 39:
        uint64_t v7 = @"RASTER_STANDARD_LABELS";
        break;
      case 40:
        uint64_t v7 = @"RASTER_HYBRID_ROADS";
        break;
      case 41:
        uint64_t v7 = @"RASTER_HYBRID_LABELS";
        break;
      case 42:
        uint64_t v7 = @"FLYOVER_C3M_MESH";
        break;
      case 43:
        uint64_t v7 = @"FLYOVER_C3M_JPEG_TEXTURE";
        break;
      case 44:
        uint64_t v7 = @"FLYOVER_C3M_ASTC_TEXTURE";
        break;
      case 45:
        uint64_t v7 = @"RASTER_SATELLITE_ASTC";
        break;
      case 46:
        uint64_t v7 = @"RASTER_HYBRID_ROADS_AND_LABELS";
        break;
      case 47:
        uint64_t v7 = @"VECTOR_TRANSIT_SELECTION";
        break;
      case 48:
        uint64_t v7 = @"VECTOR_COVERAGE";
        break;
      case 52:
        uint64_t v7 = @"FLYOVER_METADATA";
        break;
      case 53:
        uint64_t v7 = @"VECTOR_ROAD_NETWORK";
        break;
      case 54:
        uint64_t v7 = @"VECTOR_LAND_COVER";
        break;
      case 55:
        uint64_t v7 = @"VECTOR_DEBUG";
        break;
      case 56:
        uint64_t v7 = @"VECTOR_STREET_POI";
        break;
      case 57:
        uint64_t v7 = @"MUNIN_METADATA";
        break;
      case 58:
        uint64_t v7 = @"VECTOR_SPR_MERCATOR";
        break;
      case 59:
        uint64_t v7 = @"VECTOR_SPR_MODELS";
        break;
      case 60:
        uint64_t v7 = @"VECTOR_SPR_MATERIALS";
        break;
      case 61:
        uint64_t v7 = @"VECTOR_SPR_METADATA";
        break;
      case 62:
        uint64_t v7 = @"VECTOR_TRACKS";
        break;
      case 63:
        uint64_t v7 = @"VECTOR_RESERVED_2";
        break;
      case 64:
        uint64_t v7 = @"VECTOR_STREET_LANDMARKS";
        break;
      case 65:
        uint64_t v7 = @"COARSE_LOCATION_POLYGONS";
        break;
      case 66:
        uint64_t v7 = @"VECTOR_SPR_ROADS";
        break;
      case 67:
        uint64_t v7 = @"VECTOR_SPR_STANDARD";
        break;
      case 68:
        uint64_t v7 = @"VECTOR_POI_V2";
        break;
      case 69:
        uint64_t v7 = @"VECTOR_POLYGON_SELECTION";
        break;
      case 70:
        uint64_t v7 = @"VL_METADATA";
        break;
      case 71:
        uint64_t v7 = @"VL_DATA";
        break;
      case 72:
        uint64_t v7 = @"PROACTIVE_APP_CLIP";
        break;
      case 73:
        uint64_t v7 = @"VECTOR_BUILDINGS_V2";
        break;
      case 74:
        uint64_t v7 = @"POI_BUSYNESS";
        break;
      case 75:
        uint64_t v7 = @"POI_DP_BUSYNESS";
        break;
      case 76:
        uint64_t v7 = @"SMART_INTERFACE_SELECTION";
        break;
      case 77:
        uint64_t v7 = @"VECTOR_ASSETS";
        break;
      case 78:
        uint64_t v7 = @"SPR_ASSET_METADATA";
        break;
      case 79:
        uint64_t v7 = @"VECTOR_SPR_POLAR";
        break;
      case 80:
        uint64_t v7 = @"SMART_DATA_MODE";
        break;
      case 81:
        uint64_t v7 = @"CELLULAR_PERFORMANCE_SCORE";
        break;
      case 82:
        uint64_t v7 = @"VECTOR_SPR_MODELS_OCCLUSION";
        break;
      case 83:
        uint64_t v7 = @"VECTOR_TOPOGRAPHIC";
        break;
      case 84:
        uint64_t v7 = @"VECTOR_POI_V2_UPDATE";
        break;
      case 85:
        uint64_t v7 = @"VECTOR_LIVE_DATA_UPDATES";
        break;
      case 86:
        uint64_t v7 = @"VECTOR_TRAFFIC_V2";
        break;
      case 87:
        uint64_t v7 = @"VECTOR_ROAD_SELECTION";
        break;
      case 88:
        uint64_t v7 = @"VECTOR_REGION_METADATA";
        break;
      case 89:
        uint64_t v7 = @"RAY_TRACING";
        break;
      case 90:
        uint64_t v7 = @"VECTOR_CONTOURS";
        break;
      case 91:
        uint64_t v7 = @"RASTER_SATELLITE_POLAR";
        break;
      case 92:
        uint64_t v7 = @"VMAP4_ELEVATION";
        break;
      case 93:
        uint64_t v7 = @"VMAP4_ELEVATION_POLAR";
        break;
      case 94:
        uint64_t v7 = @"CELLULAR_COVERAGE_PLMN";
        break;
      case 95:
        uint64_t v7 = @"RASTER_SATELLITE_POLAR_NIGHT";
        break;
      case 96:
        uint64_t v7 = @"UNUSED_96";
        break;
      case 97:
        uint64_t v7 = @"UNUSED_97";
        break;
      case 98:
        uint64_t v7 = @"UNUSED_98";
        break;
      case 99:
        uint64_t v7 = @"UNUSED_99";
        break;
      case 100:
        uint64_t v7 = @"UNUSED_100";
        break;
      case 101:
        uint64_t v7 = @"UNUSED_101";
        break;
      case 102:
        uint64_t v7 = @"UNUSED_102";
        break;
      case 103:
        uint64_t v7 = @"UNUSED_103";
        break;
      case 104:
        uint64_t v7 = @"UNUSED_104";
        break;
      case 105:
        uint64_t v7 = @"UNUSED_105";
        break;
      case 106:
        uint64_t v7 = @"UNUSED_106";
        break;
      case 107:
        uint64_t v7 = @"UNUSED_107";
        break;
      case 108:
        uint64_t v7 = @"UNUSED_108";
        break;
      case 109:
        uint64_t v7 = @"UNUSED_109";
        break;
      case 110:
        uint64_t v7 = @"UNUSED_110";
        break;
      case 111:
        uint64_t v7 = @"UNUSED_111";
        break;
      case 112:
        uint64_t v7 = @"UNUSED_112";
        break;
      case 113:
        uint64_t v7 = @"UNUSED_113";
        break;
      case 114:
        uint64_t v7 = @"UNUSED_114";
        break;
      case 115:
        uint64_t v7 = @"UNUSED_115";
        break;
      case 116:
        uint64_t v7 = @"UNUSED_116";
        break;
      case 117:
        uint64_t v7 = @"UNUSED_117";
        break;
      case 118:
        uint64_t v7 = @"UNUSED_118";
        break;
      case 119:
        uint64_t v7 = @"UNUSED_119";
        break;
      default:
        objc_msgSend(NSString, "stringWithFormat:", @"(unknown: %i)", v5);
        uint64_t v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
        int v6 = *(unsigned __int16 *)(a1 + 1) | (a1[3] << 16);
        break;
    }
    int v11 = v6 << 14 >> 28;
    if (v11)
    {
      if (v11 == 2)
      {
        uint64_t v12 = @"PX512";
      }
      else if (v11 == 1)
      {
        uint64_t v12 = @"PX256";
      }
      else
      {
        objc_msgSend(NSString, "stringWithFormat:", @"(unknown: %i)", (v6 << 14 >> 28));
        uint64_t v12 = (__CFString *)objc_claimAutoreleasedReturnValue();
        int v6 = *(unsigned __int16 *)(a1 + 1) | (a1[3] << 16);
      }
    }
    else
    {
      uint64_t v12 = @"PX128";
    }
    int v13 = v6 << 10 >> 28;
    if (4 * (v6 & 0x3FFFFFu) >= 0x300000)
    {
      objc_msgSend(NSString, "stringWithFormat:", @"(unknown: %i)", v13);
      BOOL v14 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      BOOL v14 = off_1E53DA0D8[v13];
    }
    uint64_t v8 = [v3 stringWithFormat:@"<%@|%@|%@>", v7, v12, v14];
  }
LABEL_251:

  return v8;
}

id GEOStringForRequestCounterDictionary(void *a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = objc_alloc_init(MEMORY[0x1E4F28E78]);
  unint64_t v3 = [&stru_1ED51F370 stringByPaddingToLength:58 withString:@"-" startingAtIndex:0];
  int v4 = [NSString stringWithFormat:@"+%@+\n", v3];

  uint64_t v5 = [v1 allKeys];
  int v6 = [v5 sortedArrayUsingComparator:&__block_literal_global_65];

  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id obj = v6;
  uint64_t v7 = [obj countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v20;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v20 != v9) {
          objc_enumerationMutation(obj);
        }
        int v11 = *(void **)(*((void *)&v19 + 1) + 8 * i);
        uint64_t v12 = [v11 length];
        if ((unint64_t)(v12 + 5) >= 0x3C) {
          uint64_t v13 = 0;
        }
        else {
          uint64_t v13 = 55 - v12;
        }
        BOOL v14 = [&stru_1ED51F370 stringByPaddingToLength:v13 withString:@" " startingAtIndex:0];
        [v2 appendString:@"\n"];
        [v2 appendString:v4];
        [v2 appendFormat:@"| %@:%@ |\n", v11, v14];
        [v2 appendString:v4];
        char v15 = [v1 objectForKeyedSubscript:v11];
        [v15 _appendFormattedStringTo:v2];
      }
      uint64_t v8 = [obj countByEnumeratingWithState:&v19 objects:v23 count:16];
    }
    while (v8);
  }

  unsigned __int8 v16 = (void *)[v2 copy];

  return v16;
}

unint64_t GEOPDPlaceCollectionReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 224));
  int v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 220);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 216)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = (const float *)(a1 + 240);
  uint32x4_t v13 = (uint32x4_t)vld1q_dup_f32(v12);
  v14.i64[0] = 0x100000001;
  v14.i64[1] = 0x100000001;
  unsigned int v15 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v13, (uint32x4_t)xmmword_18A637440), v14), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v13, (uint32x4_t)xmmword_18A637450), v14)), vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v13, (uint32x4_t)xmmword_18A637420), v14), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v13, (uint32x4_t)xmmword_18A637430), v14))), vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v13, (uint32x4_t)xmmword_18A637460), v14), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v13, (uint32x4_t)xmmword_18A637470), v14))));
  while (2)
  {
    uint64_t v16 = 1;
    uint64_t v17 = 1;
    uint64_t v18 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v15;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v17 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v19 = v15 > 0x11;
        char v20 = v19 & ~(_BYTE)v11 | v9;
        unsigned __int8 v21 = v19 | v11;
        char v81 = v20;
        char v82 = v21 | v20;
        if ((v21 | v8)) {
          long long v22 = 0;
        }
        else {
          long long v22 = a3;
        }
        unint64_t v23 = (int *)MEMORY[0x1E4F940E8];
        uint64_t v24 = (int *)MEMORY[0x1E4F940C8];
        char v83 = (v22 == 0) | v21;
        BOOL v84 = v21;
        uint64_t v25 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v15;
LABEL_7:
        uint64_t v16 = v9;
LABEL_8:
        uint64_t v17 = v10;
        uint64_t v18 = v11;
LABEL_10:
        ++v7;
        uint64_t v9 = v16;
        uint64_t v10 = v17;
        uint64_t v11 = v18;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v23) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v24)) {
      goto LABEL_221;
    }
    char v26 = 0;
    unsigned int v27 = 0;
    unint64_t v28 = 0;
    while (1)
    {
      uint64_t v29 = *v23;
      uint64_t v30 = *(void *)(v3 + v29);
      unint64_t v31 = v30 + 1;
      if (v30 == -1 || v31 > *(void *)(v3 + *v6)) {
        break;
      }
      char v32 = *(unsigned char *)(*(void *)(v3 + *v25) + v30);
      *(void *)(v3 + v29) = v31;
      v28 |= (unint64_t)(v32 & 0x7F) << v26;
      if ((v32 & 0x80) == 0) {
        goto LABEL_25;
      }
      v26 += 7;
      BOOL v33 = v27++ >= 9;
      if (v33)
      {
        unint64_t v28 = 0;
        int v34 = *(unsigned __int8 *)(v3 + *v24);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v24) = 1;
LABEL_25:
    int v34 = *(unsigned __int8 *)(v3 + *v24);
    if (*(unsigned char *)(v3 + *v24)) {
      unint64_t v28 = 0;
    }
LABEL_27:
    if (v34 || (v28 & 7) == 4)
    {
LABEL_221:
      int v80 = 1;
      goto LABEL_222;
    }
    unint64_t v36 = v28 >> 3;
    BOOL v37 = v84;
    if ((v83 & 1) == 0)
    {
      uint64_t v38 = v22;
      do
      {
        int v40 = *v38++;
        int v39 = v40;
        BOOL v37 = v40 != 0;
        if (v40) {
          BOOL v41 = v39 == v36;
        }
        else {
          BOOL v41 = 1;
        }
      }
      while (!v41);
    }
    switch((int)v36)
    {
      case 1:
        if (!v37 || (*(unsigned char *)(a1 + 241) & 0x80) != 0) {
          goto LABEL_188;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_258;
        }
        int v42 = objc_alloc_init(GEOLocalizedString);
        if (!GEOLocalizedStringReadAllFrom((uint64_t)v42, (void *)v3, v10 & 1)) {
          goto LABEL_257;
        }
        PBReaderRecallMark();
        -[GEOPDPlaceCollection _addNoFlagsDisplayTitle:](a1, v42);
        goto LABEL_187;
      case 2:
        if (!v37 || (*(unsigned char *)(a1 + 241) & 8) != 0) {
          goto LABEL_188;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_258;
        }
        int v42 = objc_alloc_init(GEOLocalizedString);
        if (!GEOLocalizedStringReadAllFrom((uint64_t)v42, (void *)v3, v10 & 1)) {
          goto LABEL_257;
        }
        PBReaderRecallMark();
        -[GEOPDPlaceCollection _addNoFlagsCollectionDescription:](a1, v42);
        goto LABEL_187;
      case 3:
        if (!v37 || (*(unsigned char *)(a1 + 242) & 0x40) != 0) {
          goto LABEL_188;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_258;
        }
        int v42 = objc_alloc_init(GEOPDCaptionedPhoto);
        if (!GEOPDCaptionedPhotoReadAllFrom((uint64_t)v42, (void *)v3, v10 & 1)) {
          goto LABEL_257;
        }
        PBReaderRecallMark();
        -[GEOPDPlaceCollection _addNoFlagsPhoto:](a1, v42);
        goto LABEL_187;
      case 4:
        if (!v37) {
          goto LABEL_188;
        }
        if ((*(unsigned char *)(a1 + 241) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_258;
          }
          int v75 = (int)(*(_DWORD *)(a1 + 240) << 19) >> 31;
          goto LABEL_215;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_258;
        }
        int v42 = objc_alloc_init(GEOPDMapsIdentifier);
        if (!GEOPDMapsIdentifierReadAllFrom((uint64_t)v42, (void *)v3)) {
          goto LABEL_257;
        }
        PBReaderRecallMark();
        uint64_t v46 = 80;
        goto LABEL_132;
      case 5:
        if (!v37) {
          goto LABEL_188;
        }
        if (*(unsigned char *)(a1 + 243))
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_258;
          }
          int v75 = (int)(*(_DWORD *)(a1 + 240) << 7) >> 31;
          goto LABEL_215;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_258;
        }
        int v42 = objc_alloc_init(GEOPDMapsIdentifier);
        if (!GEOPDMapsIdentifierReadAllFrom((uint64_t)v42, (void *)v3)) {
          goto LABEL_257;
        }
        PBReaderRecallMark();
        uint64_t v46 = 184;
        goto LABEL_132;
      case 6:
        if (!v37 || (*(unsigned char *)(a1 + 242) & 0x80) != 0) {
          goto LABEL_188;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_258;
        }
        int v42 = objc_alloc_init(GEOPDPlaceCollectionItem);
        if (!GEOPDPlaceCollectionItemReadAllFrom((uint64_t)v42, (void *)v3, v10 & 1)) {
          goto LABEL_257;
        }
        PBReaderRecallMark();
        -[GEOPDPlaceCollection _addNoFlagsPlaceCollectionItem:](a1, v42);
        goto LABEL_187;
      case 7:
        if (!v37 || (*(unsigned char *)(a1 + 243) & 4) != 0) {
          goto LABEL_188;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_258;
        }
        int v42 = objc_alloc_init(GEOLocalizedString);
        if (!GEOLocalizedStringReadAllFrom((uint64_t)v42, (void *)v3, v10 & 1)) {
          goto LABEL_257;
        }
        PBReaderRecallMark();
        -[GEOPDPlaceCollection _addNoFlagsSpokenTitle:](a1, v42);
        goto LABEL_187;
      case 8:
        if (!v37 || (*(unsigned char *)(a1 + 242) & 1) != 0) {
          goto LABEL_188;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_258;
        }
        int v42 = objc_alloc_init(GEOPDMapsIdentifier);
        if (!GEOPDMapsIdentifierReadAllFrom((uint64_t)v42, (void *)v3)) {
          goto LABEL_257;
        }
        PBReaderRecallMark();
        -[GEOPDPlaceCollection _addNoFlagsItemId:](a1, v42);
        goto LABEL_187;
      case 9:
        if ((v8 & 1) == 0) {
          goto LABEL_188;
        }
        char v47 = 0;
        unsigned int v48 = 0;
        uint64_t v49 = 0;
        *(_DWORD *)(a1 + 240) |= 4u;
        while (2)
        {
          uint64_t v50 = *v23;
          uint64_t v51 = *(void *)(v3 + v50);
          unint64_t v52 = v51 + 1;
          if (v51 == -1 || v52 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v24) = 1;
          }
          else
          {
            char v53 = *(unsigned char *)(*(void *)(v3 + *v25) + v51);
            *(void *)(v3 + v50) = v52;
            v49 |= (unint64_t)(v53 & 0x7F) << v47;
            if (v53 < 0)
            {
              v47 += 7;
              BOOL v33 = v48++ >= 9;
              if (v33)
              {
                LODWORD(v49) = 0;
                goto LABEL_193;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v24)) {
          LODWORD(v49) = 0;
        }
LABEL_193:
        uint64_t v74 = 232;
        goto LABEL_202;
      case 10:
        if (!v37 || (*(unsigned char *)(a1 + 240) & 0x80) != 0) {
          goto LABEL_188;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_258;
        }
        int v42 = objc_alloc_init(GEOLocalizedString);
        if (!GEOLocalizedStringReadAllFrom((uint64_t)v42, (void *)v3, v10 & 1)) {
          goto LABEL_257;
        }
        PBReaderRecallMark();
        -[GEOPDPlaceCollection _addNoFlagsCollectionClassDisplayName:](a1, v42);
        goto LABEL_187;
      case 11:
        if (!v37 || (*(unsigned char *)(a1 + 241) & 1) != 0) {
          goto LABEL_188;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_258;
        }
        int v42 = objc_alloc_init(GEOLocalizedString);
        if (!GEOLocalizedStringReadAllFrom((uint64_t)v42, (void *)v3, v10 & 1)) {
          goto LABEL_257;
        }
        PBReaderRecallMark();
        -[GEOPDPlaceCollection _addNoFlagsCollectionClassSpokenName:](a1, v42);
        goto LABEL_187;
      case 12:
        if ((v8 & 1) == 0) {
          goto LABEL_188;
        }
        *(_DWORD *)(a1 + 240) |= 1u;
        uint64_t v54 = *v23;
        unint64_t v55 = *(void *)(v3 + v54);
        if (v55 <= 0xFFFFFFFFFFFFFFF7 && v55 + 8 <= *(void *)(v3 + *v6))
        {
          uint64_t v56 = *(void *)(*(void *)(v3 + *v25) + v55);
          *(void *)(v3 + v54) = v55 + 8;
        }
        else
        {
          *(unsigned char *)(v3 + *v24) = 1;
          uint64_t v56 = 0;
        }
        *(void *)(a1 + 160) = v56;
        goto LABEL_217;
      case 13:
        if (!v37) {
          goto LABEL_188;
        }
        if ((*(unsigned char *)(a1 + 243) & 8) == 0)
        {
          uint64_t v57 = PBReaderReadString();
          uint64_t v58 = 208;
          goto LABEL_113;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_258;
        }
        int v75 = (16 * *(_DWORD *)(a1 + 240)) >> 31;
        goto LABEL_215;
      case 14:
        if (!v37) {
          goto LABEL_188;
        }
        if ((*(unsigned char *)(a1 + 240) & 0x20) == 0)
        {
          uint64_t v57 = PBReaderReadString();
          uint64_t v58 = 24;
LABEL_113:
          long double v59 = *(void **)(a1 + v58);
          *(void *)(a1 + v58) = v57;
          goto LABEL_133;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_258;
        }
        int v75 = (int)(*(_DWORD *)(a1 + 240) << 26) >> 31;
        goto LABEL_215;
      case 15:
        if (!v37) {
          goto LABEL_188;
        }
        if ((*(unsigned char *)(a1 + 243) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_258;
          }
          int v75 = (int)(*(_DWORD *)(a1 + 240) << 6) >> 31;
          goto LABEL_215;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_258;
        }
        int v42 = objc_alloc_init(GEOPDPublisher);
        if (!GEOPDPublisherReadAllFrom((uint64_t)v42, (void *)v3, v10 & 1)) {
          goto LABEL_257;
        }
        PBReaderRecallMark();
        uint64_t v46 = 192;
        goto LABEL_132;
      case 16:
        if ((v8 & 1) == 0) {
          goto LABEL_188;
        }
        char v60 = 0;
        unsigned int v61 = 0;
        uint64_t v62 = 0;
        *(_DWORD *)(a1 + 240) |= 8u;
        while (2)
        {
          uint64_t v63 = *v23;
          uint64_t v64 = *(void *)(v3 + v63);
          unint64_t v65 = v64 + 1;
          if (v64 == -1 || v65 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v24) = 1;
          }
          else
          {
            char v66 = *(unsigned char *)(*(void *)(v3 + *v25) + v64);
            *(void *)(v3 + v63) = v65;
            v62 |= (unint64_t)(v66 & 0x7F) << v60;
            if (v66 < 0)
            {
              v60 += 7;
              BOOL v33 = v61++ >= 9;
              if (v33)
              {
                uint64_t v62 = 0;
                goto LABEL_197;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v24)) {
          uint64_t v62 = 0;
        }
LABEL_197:
        *(unsigned char *)(a1 + 236) = v62 != 0;
        goto LABEL_217;
      case 17:
        if (!v37) {
          goto LABEL_188;
        }
        if ((*(unsigned char *)(a1 + 240) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_258;
          }
          int v75 = (int)(*(_DWORD *)(a1 + 240) << 25) >> 31;
LABEL_215:
          v7 += v75;
LABEL_216:
          uint64_t v24 = (int *)MEMORY[0x1E4F940C8];
          unint64_t v23 = (int *)MEMORY[0x1E4F940E8];
          uint64_t v25 = (int *)MEMORY[0x1E4F940B8];
LABEL_217:
          if (!(v82 & 1 | (v7 != 0))) {
            goto LABEL_221;
          }
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_258;
        }
        int v42 = objc_alloc_init(GEOPDCaptionedPhoto);
        if (GEOPDCaptionedPhotoReadAllFrom((uint64_t)v42, (void *)v3, v10 & 1))
        {
          PBReaderRecallMark();
          uint64_t v46 = 32;
LABEL_132:
          long double v59 = *(void **)(a1 + v46);
          *(void *)(a1 + v46) = v42;
LABEL_133:

          --v7;
          goto LABEL_216;
        }
LABEL_257:

LABEL_258:
        int v80 = 0;
        uint64_t v24 = (int *)MEMORY[0x1E4F940C8];
LABEL_222:
        if (v81) {
LABEL_223:
        }
          *(_DWORD *)(a1 + 240) |= 0x10u;
        if (v84 || (v80 & 1) == 0)
        {
          *(_DWORD *)(a1 + 240) |= 0x8000u;
          *(_DWORD *)(a1 + 240) |= 0x800u;
          *(_DWORD *)(a1 + 240) |= 0x400000u;
          *(_DWORD *)(a1 + 240) |= 0x1000u;
          *(_DWORD *)(a1 + 240) |= 0x1000000u;
          *(_DWORD *)(a1 + 240) |= 0x800000u;
          *(_DWORD *)(a1 + 240) |= 0x4000000u;
          *(_DWORD *)(a1 + 240) |= 0x10000u;
          *(_DWORD *)(a1 + 240) |= 0x80u;
          *(_DWORD *)(a1 + 240) |= 0x100u;
          *(_DWORD *)(a1 + 240) |= 0x8000000u;
          *(_DWORD *)(a1 + 240) |= 0x20u;
          *(_DWORD *)(a1 + 240) |= 0x2000000u;
          *(_DWORD *)(a1 + 240) |= 0x40u;
          *(_DWORD *)(a1 + 240) |= 0x200u;
          *(_DWORD *)(a1 + 240) |= 0x400u;
          *(_DWORD *)(a1 + 240) |= 0x4000u;
          *(_DWORD *)(a1 + 240) |= 0x2000u;
          *(_DWORD *)(a1 + 240) |= 0x100000u;
          *(_DWORD *)(a1 + 240) |= 0x80000u;
          *(_DWORD *)(a1 + 240) |= 0x200000u;
          *(_DWORD *)(a1 + 240) |= 0x20000u;
          *(_DWORD *)(a1 + 240) |= 0x40000u;
        }
        else if (v22)
        {
          while (1)
          {
            int v76 = *v22++;
            int v77 = 0x8000;
            switch(v76)
            {
              case 0:
                goto LABEL_251;
              case 1:
                goto LABEL_250;
              case 2:
                int v77 = 2048;
                goto LABEL_250;
              case 3:
                int v77 = 0x400000;
                goto LABEL_250;
              case 4:
                int v77 = 4096;
                goto LABEL_250;
              case 5:
                int v77 = 0x1000000;
                goto LABEL_250;
              case 6:
                int v77 = 0x800000;
                goto LABEL_250;
              case 7:
                int v77 = 0x4000000;
                goto LABEL_250;
              case 8:
                int v77 = 0x10000;
                goto LABEL_250;
              case 10:
                int v77 = 128;
                goto LABEL_250;
              case 11:
                int v77 = 256;
                goto LABEL_250;
              case 13:
                int v77 = 0x8000000;
                goto LABEL_250;
              case 14:
                int v77 = 32;
                goto LABEL_250;
              case 15:
                int v77 = 0x2000000;
                goto LABEL_250;
              case 17:
                int v77 = 64;
                goto LABEL_250;
              case 19:
                int v77 = 512;
                goto LABEL_250;
              case 20:
                int v77 = 1024;
                goto LABEL_250;
              case 21:
                int v77 = 0x4000;
                goto LABEL_250;
              case 22:
                int v77 = 0x2000;
                goto LABEL_250;
              case 23:
                int v77 = 0x100000;
                goto LABEL_250;
              case 24:
                int v77 = 0x80000;
                goto LABEL_250;
              case 25:
                int v77 = 0x200000;
                goto LABEL_250;
              case 26:
                int v77 = 0x20000;
                goto LABEL_250;
              case 27:
                int v77 = 0x40000;
LABEL_250:
                *(_DWORD *)(a1 + 240) |= v77;
                break;
              default:
                continue;
            }
          }
        }
LABEL_251:
        if (v80) {
          unint64_t v3 = *(unsigned char *)(v3 + *v24) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v84)
        {
          double v78 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      case 18:
        if ((v8 & 1) == 0) {
          goto LABEL_188;
        }
        char v67 = 0;
        unsigned int v68 = 0;
        uint64_t v49 = 0;
        *(_DWORD *)(a1 + 240) |= 2u;
        while (2)
        {
          uint64_t v69 = *v23;
          uint64_t v70 = *(void *)(v3 + v69);
          unint64_t v71 = v70 + 1;
          if (v70 == -1 || v71 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v24) = 1;
          }
          else
          {
            char v72 = *(unsigned char *)(*(void *)(v3 + *v25) + v70);
            *(void *)(v3 + v69) = v71;
            v49 |= (unint64_t)(v72 & 0x7F) << v67;
            if (v72 < 0)
            {
              v67 += 7;
              BOOL v33 = v68++ >= 9;
              if (v33)
              {
                LODWORD(v49) = 0;
                goto LABEL_201;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v24)) {
          LODWORD(v49) = 0;
        }
LABEL_201:
        uint64_t v74 = 228;
LABEL_202:
        *(_DWORD *)(a1 + v74) = v49;
        goto LABEL_217;
      case 19:
        if (!v37 || (*(unsigned char *)(a1 + 241) & 2) != 0) {
          goto LABEL_188;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_258;
        }
        int v42 = objc_alloc_init(GEOLocalizedBytes);
        if (!GEOLocalizedBytesReadAllFrom((uint64_t)v42, (void *)v3, v10 & 1)) {
          goto LABEL_257;
        }
        PBReaderRecallMark();
        -[GEOPDPlaceCollection _addNoFlagsCollectionDescriptionBytes:](a1, v42);
        goto LABEL_187;
      case 20:
        if (!v37 || (*(unsigned char *)(a1 + 241) & 4) != 0) {
          goto LABEL_188;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_258;
        }
        int v42 = objc_alloc_init(GEOLocalizedString);
        if (!GEOLocalizedStringReadAllFrom((uint64_t)v42, (void *)v3, v10 & 1)) {
          goto LABEL_257;
        }
        PBReaderRecallMark();
        -[GEOPDPlaceCollection _addNoFlagsCollectionDescriptionHtml:](a1, v42);
        goto LABEL_187;
      case 21:
        if (!v37 || (*(unsigned char *)(a1 + 241) & 0x40) != 0) {
          goto LABEL_188;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_258;
        }
        int v42 = objc_alloc_init(GEOLocalizedString);
        if (!GEOLocalizedStringReadAllFrom((uint64_t)v42, (void *)v3, v10 & 1)) {
          goto LABEL_257;
        }
        PBReaderRecallMark();
        -[GEOPDPlaceCollection _addNoFlagsCollectionItemDescription:](a1, v42);
        goto LABEL_187;
      case 22:
        if (!v37 || (*(unsigned char *)(a1 + 241) & 0x20) != 0) {
          goto LABEL_188;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_258;
        }
        int v42 = objc_alloc_init(GEOLocalizedString);
        if (!GEOLocalizedStringReadAllFrom((uint64_t)v42, (void *)v3, v10 & 1)) {
          goto LABEL_257;
        }
        PBReaderRecallMark();
        -[GEOPDPlaceCollection _addNoFlagsCollectionItemDescriptionHtml:](a1, v42);
        goto LABEL_187;
      case 23:
        if (!v37 || (*(unsigned char *)(a1 + 242) & 0x10) != 0) {
          goto LABEL_188;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_258;
        }
        int v42 = objc_alloc_init(GEOLocalizedString);
        if (!GEOLocalizedStringReadAllFrom((uint64_t)v42, (void *)v3, v10 & 1)) {
          goto LABEL_257;
        }
        PBReaderRecallMark();
        -[GEOPDPlaceCollection _addNoFlagsLongTitle:](a1, v42);
        goto LABEL_187;
      case 24:
        if (!v37 || (*(unsigned char *)(a1 + 242) & 8) != 0) {
          goto LABEL_188;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_258;
        }
        int v42 = objc_alloc_init(GEOLocalizedString);
        if (!GEOLocalizedStringReadAllFrom((uint64_t)v42, (void *)v3, v10 & 1)) {
          goto LABEL_257;
        }
        PBReaderRecallMark();
        -[GEOPDPlaceCollection _addNoFlagsLongSpokenTitle:](a1, v42);
        goto LABEL_187;
      case 25:
        if (!v37 || (*(unsigned char *)(a1 + 242) & 0x20) != 0) {
          goto LABEL_188;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_258;
        }
        int v42 = objc_alloc_init(GEOPDMediaLink);
        if (!GEOPDMediaLinkReadAllFrom((uint64_t)v42, (void *)v3, v10 & 1)) {
          goto LABEL_257;
        }
        PBReaderRecallMark();
        -[GEOPDPlaceCollection _addNoFlagsMediaLink:](a1, v42);
        goto LABEL_187;
      case 26:
        if (!v37 || (*(unsigned char *)(a1 + 242) & 2) != 0) {
          goto LABEL_188;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_258;
        }
        int v42 = objc_alloc_init(GEOPDCaptionedPhoto);
        if (!GEOPDCaptionedPhotoReadAllFrom((uint64_t)v42, (void *)v3, v10 & 1)) {
          goto LABEL_257;
        }
        PBReaderRecallMark();
        -[GEOPDPlaceCollection _addNoFlagsItemPhoto:](a1, v42);
        goto LABEL_187;
      case 27:
        if (!v37 || (*(unsigned char *)(a1 + 242) & 4) != 0) {
          goto LABEL_188;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_258;
        }
        int v42 = objc_alloc_init(GEOLocalizedString);
        if (!GEOLocalizedStringReadAllFrom((uint64_t)v42, (void *)v3, v10 & 1)) {
          goto LABEL_257;
        }
        PBReaderRecallMark();
        -[GEOPDPlaceCollection _addNoFlagsLocalizedCategory:](a1, v42);
LABEL_187:

        goto LABEL_216;
      default:
        if ((v81 & 1) == 0 || (*(unsigned char *)(a1 + 240) & 0x10) != 0)
        {
LABEL_188:
          char v73 = PBReaderSkipValueWithTag();
          uint64_t v25 = (int *)MEMORY[0x1E4F940B8];
          unint64_t v23 = (int *)MEMORY[0x1E4F940E8];
          uint64_t v24 = (int *)MEMORY[0x1E4F940C8];
          if ((v73 & 1) == 0)
          {
            int v80 = 0;
            goto LABEL_222;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v43 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            char v44 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v43;
          }
          int v45 = PBUnknownFieldAdd();
          uint64_t v24 = (int *)MEMORY[0x1E4F940C8];
          unint64_t v23 = (int *)MEMORY[0x1E4F940E8];
          uint64_t v25 = (int *)MEMORY[0x1E4F940B8];
          if (!v45)
          {
            int v80 = 0;
            goto LABEL_223;
          }
        }
        goto LABEL_217;
    }
  }
}

uint64_t GEORequestCounterInfoResultToNWActivityCompletionReason(int a1)
{
  if ((a1 - 1) > 4) {
    return 2;
  }
  else {
    return dword_18A62D24C[(char)(a1 - 1)];
  }
}

void sub_188EBBF58(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPBTransitIncidentEntityFilterReadAllFrom(uint64_t a1, void *a2)
{
  unint64_t v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    int v4 = (int *)MEMORY[0x1E4F940E8];
    uint64_t v5 = (int *)MEMORY[0x1E4F940E0];
    int v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v3[*v6]) {
          break;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          BOOL v15 = v9++ >= 9;
          if (v15)
          {
            unint64_t v10 = 0;
            int v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v16 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        int v17 = v10 & 7;
        if (v16 || v17 == 4) {
          break;
        }
        if ((v10 >> 3) == 1)
        {
          if (v17 == 2)
          {
            if (!PBReaderPlaceMark()) {
              goto LABEL_49;
            }
            while (*(void *)&v3[*v4] < *(void *)&v3[*v5] && !v3[*v6])
            {
              char v19 = 0;
              unsigned int v20 = 0;
              uint64_t v21 = 0;
              while (1)
              {
                uint64_t v22 = *v4;
                uint64_t v23 = *(void *)&v3[v22];
                unint64_t v24 = v23 + 1;
                if (v23 == -1 || v24 > *(void *)&v3[*v5]) {
                  break;
                }
                char v25 = *(unsigned char *)(*(void *)&v3[*v7] + v23);
                *(void *)&v3[v22] = v24;
                v21 |= (unint64_t)(v25 & 0x7F) << v19;
                if (v25 < 0)
                {
                  v19 += 7;
                  BOOL v15 = v20++ >= 9;
                  if (!v15) {
                    continue;
                  }
                }
                goto LABEL_32;
              }
              v3[*v6] = 1;
LABEL_32:
              PBRepeatedUInt64Add();
            }
            PBReaderRecallMark();
          }
          else
          {
            char v28 = 0;
            unsigned int v29 = 0;
            uint64_t v30 = 0;
            while (1)
            {
              uint64_t v31 = *v4;
              uint64_t v32 = *(void *)&v3[v31];
              unint64_t v33 = v32 + 1;
              if (v32 == -1 || v33 > *(void *)&v3[*v5]) {
                break;
              }
              char v34 = *(unsigned char *)(*(void *)&v3[*v7] + v32);
              *(void *)&v3[v31] = v33;
              v30 |= (unint64_t)(v34 & 0x7F) << v28;
              if (v34 < 0)
              {
                v28 += 7;
                BOOL v15 = v29++ >= 9;
                if (!v15) {
                  continue;
                }
              }
              goto LABEL_46;
            }
            v3[*v6] = 1;
LABEL_46:
            PBRepeatedUInt64Add();
          }
        }
        else
        {
          if (!*(void *)(a1 + 8))
          {
            id v26 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            unsigned int v27 = *(void **)(a1 + 8);
            *(void *)(a1 + 8) = v26;
          }
          if (!PBUnknownFieldAdd()) {
            goto LABEL_49;
          }
        }
      }
      while (*(void *)&v3[*v4] < *(void *)&v3[*v5]);
    }
    BOOL v35 = v3[*v6] == 0;
  }
  else
  {
LABEL_49:
    BOOL v35 = 0;
  }
  objc_sync_exit(v3);

  return v35;
}

void sub_188EBC6A4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOMapRectIntersectsRect(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  double v8 = fabs(a2);
  if (fabs(a1) == INFINITY || v8 == INFINITY) {
    return 0;
  }
  double v10 = fabs(a6);
  if (fabs(a5) == INFINITY || v10 == INFINITY) {
    return 0;
  }
  if (a1 >= a5)
  {
    if (a5 + a7 <= a1) {
      return 0;
    }
  }
  else if (a1 + a3 <= a5)
  {
    return 0;
  }
  if (a2 >= a6)
  {
    if (a6 + a8 <= a2) {
      return 0;
    }
  }
  else if (a2 + a4 <= a6)
  {
    return 0;
  }
  return 1;
}

void sub_188EBC8DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188EBCA7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  _Unwind_Resume(a1);
}

void sub_188EBCCD4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 40))(a1[3], v2, a1[2] - v2);
  }
  return a1;
}

void sub_188EBD474(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EBD53C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOActiveTileGroupCallReadAllRecursiveWithoutSynchronized(id *a1)
{
  uint64_t v113 = *MEMORY[0x1E4F143B8];
  long long v98 = 0u;
  long long v99 = 0u;
  long long v100 = 0u;
  long long v101 = 0u;
  id v2 = a1[69];
  uint64_t v3 = [v2 countByEnumeratingWithState:&v98 objects:v112 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v99;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v99 != v5) {
          objc_enumerationMutation(v2);
        }
        [*(id *)(*((void *)&v98 + 1) + 8 * v6++) readAll:1];
      }
      while (v4 != v6);
      uint64_t v4 = [v2 countByEnumeratingWithState:&v98 objects:v112 count:16];
    }
    while (v4);
  }

  long long v96 = 0u;
  long long v97 = 0u;
  long long v94 = 0u;
  long long v95 = 0u;
  id v7 = a1[18];
  uint64_t v8 = [v7 countByEnumeratingWithState:&v94 objects:v111 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v95;
    do
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v95 != v10) {
          objc_enumerationMutation(v7);
        }
        [*(id *)(*((void *)&v94 + 1) + 8 * v11++) readAll:1];
      }
      while (v9 != v11);
      uint64_t v9 = [v7 countByEnumeratingWithState:&v94 objects:v111 count:16];
    }
    while (v9);
  }

  long long v92 = 0u;
  long long v93 = 0u;
  long long v90 = 0u;
  long long v91 = 0u;
  id v12 = a1[52];
  uint64_t v13 = [v12 countByEnumeratingWithState:&v90 objects:v110 count:16];
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = *(void *)v91;
    do
    {
      uint64_t v16 = 0;
      do
      {
        if (*(void *)v91 != v15) {
          objc_enumerationMutation(v12);
        }
        [*(id *)(*((void *)&v90 + 1) + 8 * v16++) readAll:1];
      }
      while (v14 != v16);
      uint64_t v14 = [v12 countByEnumeratingWithState:&v90 objects:v110 count:16];
    }
    while (v14);
  }

  long long v88 = 0u;
  long long v89 = 0u;
  long long v86 = 0u;
  long long v87 = 0u;
  id v17 = a1[51];
  uint64_t v18 = [v17 countByEnumeratingWithState:&v86 objects:v109 count:16];
  if (v18)
  {
    uint64_t v19 = v18;
    uint64_t v20 = *(void *)v87;
    do
    {
      uint64_t v21 = 0;
      do
      {
        if (*(void *)v87 != v20) {
          objc_enumerationMutation(v17);
        }
        [*(id *)(*((void *)&v86 + 1) + 8 * v21++) readAll:1];
      }
      while (v19 != v21);
      uint64_t v19 = [v17 countByEnumeratingWithState:&v86 objects:v109 count:16];
    }
    while (v19);
  }

  [a1[72] readAll:1];
  long long v84 = 0u;
  long long v85 = 0u;
  long long v82 = 0u;
  long long v83 = 0u;
  id v22 = a1[37];
  uint64_t v23 = [v22 countByEnumeratingWithState:&v82 objects:v108 count:16];
  if (v23)
  {
    uint64_t v24 = v23;
    uint64_t v25 = *(void *)v83;
    do
    {
      uint64_t v26 = 0;
      do
      {
        if (*(void *)v83 != v25) {
          objc_enumerationMutation(v22);
        }
        [*(id *)(*((void *)&v82 + 1) + 8 * v26++) readAll:1];
      }
      while (v24 != v26);
      uint64_t v24 = [v22 countByEnumeratingWithState:&v82 objects:v108 count:16];
    }
    while (v24);
  }

  long long v80 = 0u;
  long long v81 = 0u;
  long long v78 = 0u;
  long long v79 = 0u;
  id v27 = a1[13];
  uint64_t v28 = [v27 countByEnumeratingWithState:&v78 objects:v107 count:16];
  if (v28)
  {
    uint64_t v29 = v28;
    uint64_t v30 = *(void *)v79;
    do
    {
      uint64_t v31 = 0;
      do
      {
        if (*(void *)v79 != v30) {
          objc_enumerationMutation(v27);
        }
        [*(id *)(*((void *)&v78 + 1) + 8 * v31++) readAll:1];
      }
      while (v29 != v31);
      uint64_t v29 = [v27 countByEnumeratingWithState:&v78 objects:v107 count:16];
    }
    while (v29);
  }

  long long v76 = 0u;
  long long v77 = 0u;
  long long v74 = 0u;
  long long v75 = 0u;
  id v32 = a1[54];
  uint64_t v33 = [v32 countByEnumeratingWithState:&v74 objects:v106 count:16];
  if (v33)
  {
    uint64_t v34 = v33;
    uint64_t v35 = *(void *)v75;
    do
    {
      uint64_t v36 = 0;
      do
      {
        if (*(void *)v75 != v35) {
          objc_enumerationMutation(v32);
        }
        [*(id *)(*((void *)&v74 + 1) + 8 * v36++) readAll:1];
      }
      while (v34 != v36);
      uint64_t v34 = [v32 countByEnumeratingWithState:&v74 objects:v106 count:16];
    }
    while (v34);
  }

  long long v72 = 0u;
  long long v73 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  id v37 = a1[64];
  uint64_t v38 = [v37 countByEnumeratingWithState:&v70 objects:v105 count:16];
  if (v38)
  {
    uint64_t v39 = v38;
    uint64_t v40 = *(void *)v71;
    do
    {
      uint64_t v41 = 0;
      do
      {
        if (*(void *)v71 != v40) {
          objc_enumerationMutation(v37);
        }
        [*(id *)(*((void *)&v70 + 1) + 8 * v41++) readAll:1];
      }
      while (v39 != v41);
      uint64_t v39 = [v37 countByEnumeratingWithState:&v70 objects:v105 count:16];
    }
    while (v39);
  }

  [a1[25] readAll:1];
  [a1[71] readAll:1];
  long long v68 = 0u;
  long long v69 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  id v42 = a1[41];
  uint64_t v43 = [v42 countByEnumeratingWithState:&v66 objects:v104 count:16];
  if (v43)
  {
    uint64_t v44 = v43;
    uint64_t v45 = *(void *)v67;
    do
    {
      uint64_t v46 = 0;
      do
      {
        if (*(void *)v67 != v45) {
          objc_enumerationMutation(v42);
        }
        [*(id *)(*((void *)&v66 + 1) + 8 * v46++) readAll:1];
      }
      while (v44 != v46);
      uint64_t v44 = [v42 countByEnumeratingWithState:&v66 objects:v104 count:16];
    }
    while (v44);
  }

  long long v64 = 0u;
  long long v65 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  id v47 = a1[28];
  uint64_t v48 = [v47 countByEnumeratingWithState:&v62 objects:v103 count:16];
  if (v48)
  {
    uint64_t v49 = v48;
    uint64_t v50 = *(void *)v63;
    do
    {
      uint64_t v51 = 0;
      do
      {
        if (*(void *)v63 != v50) {
          objc_enumerationMutation(v47);
        }
        [*(id *)(*((void *)&v62 + 1) + 8 * v51++) readAll:1];
      }
      while (v49 != v51);
      uint64_t v49 = [v47 countByEnumeratingWithState:&v62 objects:v103 count:16];
    }
    while (v49);
  }

  long long v60 = 0u;
  long long v61 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  id v52 = a1[31];
  uint64_t v53 = [v52 countByEnumeratingWithState:&v58 objects:v102 count:16];
  if (v53)
  {
    uint64_t v54 = v53;
    uint64_t v55 = *(void *)v59;
    do
    {
      uint64_t v56 = 0;
      do
      {
        if (*(void *)v59 != v55) {
          objc_enumerationMutation(v52);
        }
        objc_msgSend(*(id *)(*((void *)&v58 + 1) + 8 * v56++), "readAll:", 1, (void)v58);
      }
      while (v54 != v56);
      uint64_t v54 = [v52 countByEnumeratingWithState:&v58 objects:v102 count:16];
    }
    while (v54);
  }

  return [a1[42] readAll:1];
}

void sub_188EBDD3C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EBDE04(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOActiveTileSetCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v2 = *(id *)(a1 + 80);
  uint64_t v3 = [v2 countByEnumeratingWithState:&v16 objects:v21 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v17;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v17 != v5) {
          objc_enumerationMutation(v2);
        }
        [*(id *)(*((void *)&v16 + 1) + 8 * v6++) readAll:1];
      }
      while (v4 != v6);
      uint64_t v4 = [v2 countByEnumeratingWithState:&v16 objects:v21 count:16];
    }
    while (v4);
  }

  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v7 = *(id *)(a1 + 56);
  uint64_t v8 = [v7 countByEnumeratingWithState:&v12 objects:v20 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v13;
    do
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v13 != v10) {
          objc_enumerationMutation(v7);
        }
        objc_msgSend(*(id *)(*((void *)&v12 + 1) + 8 * v11++), "readAll:", 1, (void)v12);
      }
      while (v9 != v11);
      uint64_t v9 = [v7 countByEnumeratingWithState:&v12 objects:v20 count:16];
    }
    while (v9);
  }
}

void sub_188EBE054(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EBE11C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOAttributionCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v1 = *(id *)(a1 + 104);
  uint64_t v2 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v7;
    do
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v7 != v4) {
          objc_enumerationMutation(v1);
        }
        objc_msgSend(*(id *)(*((void *)&v6 + 1) + 8 * v5++), "readAll:", 1, (void)v6);
      }
      while (v3 != v5);
      uint64_t v3 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
    }
    while (v3);
  }
}

uint64_t GEOAttributionReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 124))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOAttributionReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 128));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 120) = [v8 position];
  *(_DWORD *)(a1 + 124) = [v8 length];
  if (a3) {
    long long v9 = (int *)&GEOAttributionReadAllFrom_recursiveTag;
  }
  else {
    long long v9 = (int *)&GEOAttributionReadAllFrom_initialTag;
  }
  uint64_t Specified = GEOAttributionReadSpecified(a1, (uint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOAttributionCallReadAllRecursiveWithoutSynchronized(a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 128));
  return Specified;
}

void sub_188EBE3AC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOAttributionReadSpecified(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 128));
  long long v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 124);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 120)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint16x4_t v12 = (uint16x4_t)vdup_n_s16(*(unsigned __int16 *)(a1 + 140));
  unsigned int v13 = (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16(v12, (uint16x4_t)0xFFF4FFF8FFFBFFF9), (int8x8_t)0x1000100010001))+ ((*(_WORD *)(a1 + 140) >> 4) & 1)+ ((*(_WORD *)(a1 + 140) >> 6) & 1)+ ((*(_WORD *)(a1 + 140) >> 11) & 1))+ (unsigned __int16)vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16(v12, (uint16x4_t)0xFFFEFFF7FFF6FFFDLL), (int8x8_t)0x1000100010001));
  while (2)
  {
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    uint64_t v16 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v13;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v15 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v17 = v13 > 7;
        char v18 = v17 & ~(_BYTE)v11 | v9;
        unsigned __int8 v19 = v17 | v11;
        char v66 = v18;
        char v67 = v19 | v18;
        char v65 = v8;
        if ((v19 | v8)) {
          uint64_t v20 = 0;
        }
        else {
          uint64_t v20 = a3;
        }
        char v68 = (v20 == 0) | v19;
        BOOL v69 = v19;
        uint64_t v21 = (int *)MEMORY[0x1E4F940E8];
        uint64_t v22 = (int *)MEMORY[0x1E4F940C8];
        uint64_t v23 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v13;
LABEL_7:
        uint64_t v14 = v9;
LABEL_8:
        uint64_t v15 = v10;
        uint64_t v16 = v11;
LABEL_10:
        ++v7;
        uint64_t v9 = v14;
        uint64_t v10 = v15;
        uint64_t v11 = v16;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v21) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v22)) {
      goto LABEL_126;
    }
    char v24 = 0;
    unsigned int v25 = 0;
    unint64_t v26 = 0;
    while (1)
    {
      uint64_t v27 = *v21;
      unint64_t v28 = *(void *)(v3 + v27);
      if (v28 == -1 || v28 >= *(void *)(v3 + *v6)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(v3 + *v23) + v28);
      *(void *)(v3 + v27) = v28 + 1;
      v26 |= (unint64_t)(v29 & 0x7F) << v24;
      if ((v29 & 0x80) == 0) {
        goto LABEL_25;
      }
      v24 += 7;
      BOOL v30 = v25++ >= 9;
      if (v30)
      {
        unint64_t v26 = 0;
        int v31 = *(unsigned __int8 *)(v3 + *v22);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v22) = 1;
LABEL_25:
    int v31 = *(unsigned __int8 *)(v3 + *v22);
    if (*(unsigned char *)(v3 + *v22)) {
      unint64_t v26 = 0;
    }
LABEL_27:
    if (v31 || (v26 & 7) == 4)
    {
LABEL_126:
      int v64 = 1;
      goto LABEL_127;
    }
    unint64_t v33 = v26 >> 3;
    BOOL v34 = v69;
    if ((v68 & 1) == 0)
    {
      uint64_t v35 = v20;
      do
      {
        int v37 = *v35++;
        int v36 = v37;
        BOOL v34 = v37 != 0;
        if (v37) {
          BOOL v38 = v36 == v33;
        }
        else {
          BOOL v38 = 1;
        }
      }
      while (!v38);
    }
    switch((int)v33)
    {
      case 1:
        if (!v34) {
          goto LABEL_96;
        }
        if ((*(_WORD *)(a1 + 140) & 0x20) == 0)
        {
          uint64_t v39 = PBReaderReadString();
          uint64_t v40 = 56;
          goto LABEL_95;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_151;
        }
        __int16 v59 = *(_WORD *)(a1 + 140) << 10;
        goto LABEL_123;
      case 2:
        if (!v34) {
          goto LABEL_96;
        }
        if ((*(_WORD *)(a1 + 140) & 0x80) == 0)
        {
          uint64_t v39 = PBReaderReadString();
          uint64_t v40 = 72;
          goto LABEL_95;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_151;
        }
        __int16 v59 = *(_WORD *)(a1 + 140) << 8;
        goto LABEL_123;
      case 3:
        if (!v34) {
          goto LABEL_96;
        }
        if ((*(_WORD *)(a1 + 140) & 0x100) == 0)
        {
          uint64_t v39 = PBReaderReadString();
          uint64_t v40 = 80;
          goto LABEL_95;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_151;
        }
        __int16 v59 = *(_WORD *)(a1 + 140) << 7;
        goto LABEL_123;
      case 4:
        if (!v34) {
          goto LABEL_96;
        }
        if ((*(_WORD *)(a1 + 140) & 0x1000) == 0)
        {
          uint64_t v39 = PBReaderReadString();
          uint64_t v40 = 112;
          goto LABEL_95;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_151;
        }
        __int16 v59 = 8 * *(_WORD *)(a1 + 140);
        goto LABEL_123;
      case 5:
        if (!v34) {
          goto LABEL_96;
        }
        if ((*(_WORD *)(a1 + 140) & 0x10) == 0)
        {
          uint64_t v39 = PBReaderReadString();
          uint64_t v40 = 48;
          goto LABEL_95;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_151;
        }
        __int16 v59 = *(_WORD *)(a1 + 140) << 11;
        goto LABEL_123;
      case 6:
        if (!v34) {
          goto LABEL_96;
        }
        if ((*(_WORD *)(a1 + 140) & 0x40) == 0)
        {
          uint64_t v39 = PBReaderReadString();
          uint64_t v40 = 64;
          goto LABEL_95;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_151;
        }
        __int16 v59 = *(_WORD *)(a1 + 140) << 9;
        goto LABEL_123;
      case 7:
        if (!v34 || (*(_WORD *)(a1 + 140) & 0x800) != 0) {
          goto LABEL_96;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_151;
        }
        uint64_t v44 = objc_alloc_init(GEOResource);
        if (GEOResourceReadAllFrom((uint64_t)v44, (void *)v3, v10 & 1))
        {
          PBReaderRecallMark();
          -[GEOAttribution _addNoFlagsResource:](a1, v44);

LABEL_124:
          uint64_t v22 = (int *)MEMORY[0x1E4F940C8];
          uint64_t v23 = (int *)MEMORY[0x1E4F940B8];
LABEL_125:
          if (!(v67 & 1 | (v7 != 0))) {
            goto LABEL_126;
          }
          continue;
        }

LABEL_151:
        int v64 = 0;
        uint64_t v22 = (int *)MEMORY[0x1E4F940C8];
LABEL_127:
        if (v66) {
LABEL_128:
        }
          *(_WORD *)(a1 + 140) |= 4u;
        if (v69 || (v64 & 1) == 0)
        {
          *(_WORD *)(a1 + 140) |= 0x20u;
          *(_WORD *)(a1 + 140) |= 0x80u;
          *(_WORD *)(a1 + 140) |= 0x100u;
          *(_WORD *)(a1 + 140) |= 0x1000u;
          *(_WORD *)(a1 + 140) |= 0x10u;
          *(_WORD *)(a1 + 140) |= 0x40u;
          *(_WORD *)(a1 + 140) |= 0x800u;
          *(_WORD *)(a1 + 140) |= 8u;
          *(_WORD *)(a1 + 140) |= 0x400u;
          *(_WORD *)(a1 + 140) |= 0x200u;
        }
        else if (v20)
        {
          while (1)
          {
            int v61 = *v20++;
            __int16 v60 = 32;
            switch(v61)
            {
              case 0:
                goto LABEL_144;
              case 1:
                goto LABEL_142;
              case 2:
                __int16 v60 = 128;
                goto LABEL_142;
              case 3:
                __int16 v60 = 256;
                goto LABEL_142;
              case 4:
                __int16 v60 = 4096;
                goto LABEL_142;
              case 5:
                __int16 v60 = 16;
                goto LABEL_142;
              case 6:
                __int16 v60 = 64;
                goto LABEL_142;
              case 7:
                __int16 v60 = 2048;
                goto LABEL_142;
              case 8:
                __int16 v60 = 8;
                goto LABEL_142;
              case 11:
                __int16 v60 = 1024;
                goto LABEL_142;
              case 12:
                __int16 v60 = 512;
LABEL_142:
                *(_WORD *)(a1 + 140) |= v60;
                break;
              default:
                continue;
            }
          }
        }
LABEL_144:
        if (v64) {
          uint64_t v3 = *(unsigned char *)(v3 + *v22) == 0;
        }
        else {
          uint64_t v3 = 0;
        }
        if (v69)
        {
          long long v62 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      case 8:
        if (!v34 || (*(_WORD *)(a1 + 140) & 8) != 0) {
          goto LABEL_96;
        }
        if (!PBReaderPlaceMark()) {
          goto LABEL_151;
        }
        -[GEOAttribution _reserveRegions:](a1, 1uLL);
        if (!GEOTileSetRegionReadAllFrom((_DWORD *)(*(void *)(a1 + 24) + 24 * *(void *)(a1 + 32)), v3)) {
          goto LABEL_151;
        }
        PBReaderRecallMark();
        ++*(void *)(a1 + 32);
        goto LABEL_124;
      case 9:
        if ((v65 & 1) == 0) {
          goto LABEL_96;
        }
        char v45 = 0;
        unsigned int v46 = 0;
        uint64_t v47 = 0;
        *(_WORD *)(a1 + 140) |= 1u;
        while (2)
        {
          uint64_t v48 = *v21;
          unint64_t v49 = *(void *)(v3 + v48);
          if (v49 == -1 || v49 >= *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v22) = 1;
          }
          else
          {
            char v50 = *(unsigned char *)(*(void *)(v3 + *v23) + v49);
            *(void *)(v3 + v48) = v49 + 1;
            v47 |= (unint64_t)(v50 & 0x7F) << v45;
            if (v50 < 0)
            {
              v45 += 7;
              BOOL v30 = v46++ >= 9;
              if (v30)
              {
                LODWORD(v47) = 0;
                goto LABEL_101;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v22)) {
          LODWORD(v47) = 0;
        }
LABEL_101:
        uint64_t v58 = 132;
        goto LABEL_106;
      case 10:
        if ((v65 & 1) == 0) {
          goto LABEL_96;
        }
        char v51 = 0;
        unsigned int v52 = 0;
        uint64_t v47 = 0;
        *(_WORD *)(a1 + 140) |= 2u;
        while (2)
        {
          uint64_t v53 = *v21;
          unint64_t v54 = *(void *)(v3 + v53);
          if (v54 == -1 || v54 >= *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v22) = 1;
          }
          else
          {
            char v55 = *(unsigned char *)(*(void *)(v3 + *v23) + v54);
            *(void *)(v3 + v53) = v54 + 1;
            v47 |= (unint64_t)(v55 & 0x7F) << v51;
            if (v55 < 0)
            {
              v51 += 7;
              BOOL v30 = v52++ >= 9;
              if (v30)
              {
                LODWORD(v47) = 0;
                goto LABEL_105;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v22)) {
          LODWORD(v47) = 0;
        }
LABEL_105:
        uint64_t v58 = 136;
LABEL_106:
        *(_DWORD *)(a1 + v58) = v47;
        goto LABEL_125;
      case 11:
        if (!v34) {
          goto LABEL_96;
        }
        if ((*(_WORD *)(a1 + 140) & 0x400) == 0)
        {
          uint64_t v39 = PBReaderReadString();
          uint64_t v40 = 96;
          goto LABEL_95;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_151;
        }
        __int16 v59 = 32 * *(_WORD *)(a1 + 140);
        goto LABEL_123;
      case 12:
        if (!v34) {
          goto LABEL_96;
        }
        if ((*(_WORD *)(a1 + 140) & 0x200) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_151;
          }
          __int16 v59 = *(_WORD *)(a1 + 140) << 6;
LABEL_123:
          v7 += v59 >> 15;
        }
        else
        {
          uint64_t v39 = PBReaderReadData();
          uint64_t v40 = 88;
LABEL_95:
          uint64_t v56 = *(void **)(a1 + v40);
          *(void *)(a1 + v40) = v39;

          --v7;
        }
        goto LABEL_124;
      default:
        if ((v66 & 1) == 0 || (*(_WORD *)(a1 + 140) & 4) != 0)
        {
LABEL_96:
          char v57 = PBReaderSkipValueWithTag();
          uint64_t v23 = (int *)MEMORY[0x1E4F940B8];
          uint64_t v22 = (int *)MEMORY[0x1E4F940C8];
          if ((v57 & 1) == 0)
          {
            int v64 = 0;
            goto LABEL_127;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v41 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            id v42 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v41;
          }
          int v43 = PBUnknownFieldAdd();
          uint64_t v22 = (int *)MEMORY[0x1E4F940C8];
          uint64_t v23 = (int *)MEMORY[0x1E4F940B8];
          if (!v43)
          {
            int v64 = 0;
            goto LABEL_128;
          }
        }
        goto LABEL_125;
    }
  }
}

void sub_188EBF098(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188EBF348(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188EBF8FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_188EBFC4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_188EBFFC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_188EC0A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id location, uint64_t a12, uint64_t a13, uint64_t a14)
{
  unsigned __int8 v19 = v18;
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v19);

  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&a14);
  MEMORY[0x18C11F580](v16, 0x10A1C40CF014E3DLL);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_188EC0BDC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_188EC0C58(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_188EC0DB0(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void geo::detail::_GEOGenericContainer<_GEOTileKey,GEOTileData * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::_prune(uint64_t a1)
{
  uint64_t v1 = a1 + 64;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 != a1 + 64)
  {
    uint64_t v3 = (void *)(a1 + 88);
    do
    {
      id WeakRetained = objc_loadWeakRetained((id *)(v2 + 48));

      if (WeakRetained)
      {
        uint64_t v2 = *(void *)(v2 + 8);
      }
      else
      {
        std::__hash_table<std::__hash_value_type<_GEOTileKey,std::__list_iterator<geo::detail::_CacheItem<_GEOTileKey,GEOTileData * {__strong},geo::detail::_GEOGenericContainer<_GEOTileKey,GEOTileData * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::_value_ptr>,void *>>,std::__unordered_map_hasher<_GEOTileKey,std::__hash_value_type<_GEOTileKey,std::__list_iterator<geo::detail::_CacheItem<_GEOTileKey,GEOTileData * {__strong},geo::detail::_GEOGenericContainer<_GEOTileKey,GEOTileData * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::_value_ptr>,void *>>,std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,true>,std::__unordered_map_equal<_GEOTileKey,std::__hash_value_type<_GEOTileKey,std::__list_iterator<geo::detail::_CacheItem<_GEOTileKey,GEOTileData * {__strong},geo::detail::_GEOGenericContainer<_GEOTileKey,GEOTileData * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::_value_ptr>,void *>>,std::equal_to<_GEOTileKey>,std::hash<_GEOTileKey>,true>,std::allocator<std::__hash_value_type<_GEOTileKey,std::__list_iterator<geo::detail::_CacheItem<_GEOTileKey,GEOTileData * {__strong},geo::detail::_GEOGenericContainer<_GEOTileKey,GEOTileData * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::_value_ptr>,void *>>>>::__erase_unique<_GEOTileKey>(v3, (void *)(v2 + 16));
        uint64_t v5 = *(void *)(v2 + 8);
        std::list<geo::detail::_CacheItem<_GEOTileKey,GEOTileData * {__strong},geo::detail::_GEOGenericContainer<_GEOTileKey,GEOTileData * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::_value_ptr>>::erase(v1, (char *)v2);
        uint64_t v2 = v5;
      }
    }
    while (v2 != v1);
  }
}

void geo::detail::_GEOGenericContainer<_GEOTileKey,GEOTileData * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::_evictWithMaxCostAndCapacity(int64x2_t *a1, unint64_t a2, unint64_t a3)
{
  if (a2 && a3 && a1[5].i64[0])
  {
    do
    {
      if (a1[9].i64[0] <= a2 && a1[9].i64[1] <= a3) {
        break;
      }
      uint64_t v6 = a1[4].i64[0];
      std::__hash_table<std::__hash_value_type<_GEOTileKey,std::__list_iterator<geo::detail::_CacheItem<_GEOTileKey,GEOTileData * {__strong},geo::detail::_GEOGenericContainer<_GEOTileKey,GEOTileData * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::_value_ptr>,void *>>,std::__unordered_map_hasher<_GEOTileKey,std::__hash_value_type<_GEOTileKey,std::__list_iterator<geo::detail::_CacheItem<_GEOTileKey,GEOTileData * {__strong},geo::detail::_GEOGenericContainer<_GEOTileKey,GEOTileData * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::_value_ptr>,void *>>,std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,true>,std::__unordered_map_equal<_GEOTileKey,std::__hash_value_type<_GEOTileKey,std::__list_iterator<geo::detail::_CacheItem<_GEOTileKey,GEOTileData * {__strong},geo::detail::_GEOGenericContainer<_GEOTileKey,GEOTileData * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::_value_ptr>,void *>>,std::equal_to<_GEOTileKey>,std::hash<_GEOTileKey>,true>,std::allocator<std::__hash_value_type<_GEOTileKey,std::__list_iterator<geo::detail::_CacheItem<_GEOTileKey,GEOTileData * {__strong},geo::detail::_GEOGenericContainer<_GEOTileKey,GEOTileData * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::_value_ptr>,void *>>>>::__erase_unique<_GEOTileKey>(&a1[5].i64[1], (void *)(v6 + 16));
      int64x2_t v7 = a1[9];
      v8.i64[1] = -1;
      v8.i64[0] = *(void *)(v6 + 40);
      v8.i64[0] = vsubq_s64(v7, v8).u64[0];
      v9.i64[0] = -1;
      v9.i64[1] = -1;
      v8.i64[1] = vaddq_s64(v7, v9).i64[1];
      a1[9] = v8;
      uint64_t v10 = a1[4].i64[0];
      uint64_t v11 = *(void *)v10;
      *(void *)(v11 + 8) = *(void *)(v10 + 8);
      **(void **)(v10 + 8) = v11;
      --a1[5].i64[0];
      objc_storeWeak((id *)(v10 + 48), 0);
      objc_destroyWeak((id *)(v10 + 48));
      operator delete((void *)v10);
    }
    while (a1[5].i64[0]);
  }
}

void sub_188EC1270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  _Unwind_Resume(a1);
}

void sub_188EC1470(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188EC1A28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void _GEOConfigAddDelegateListenerForKey(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = ___GEOConfigAddDelegateListenerForKey_block_invoke;
  v12[3] = &unk_1E53E8588;
  id v13 = v7;
  id v14 = v8;
  id v9 = v8;
  id v10 = v7;
  id v11 = _GEOConfigAddListenerForKey(a1, a2, v12);
}

void __GEOApplicationIdentifierOrProcessName_block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F28B50] mainBundle];
  id v10 = [v0 bundleIdentifier];

  uint64_t v1 = [MEMORY[0x1E4F28B50] mainBundle];
  uint64_t v2 = [v1 objectForInfoDictionaryKey:*MEMORY[0x1E4F1CC60]];

  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    int v3 = [v2 isEqualToString:@"FMWK"];
    uint64_t v4 = v10;
    if (v3)
    {

      uint64_t v4 = 0;
    }
  }
  else
  {
    uint64_t v4 = v10;
  }
  id v11 = v4;
  if ([v4 length])
  {
    uint64_t v5 = v11;
  }
  else
  {
    uint64_t v6 = [MEMORY[0x1E4F28F80] processInfo];
    uint64_t v7 = [v6 processName];

    uint64_t v5 = (void *)v7;
  }
  id v12 = v5;
  uint64_t v8 = [v5 copy];
  id v9 = (void *)qword_1EB2A0170;
  qword_1EB2A0170 = v8;
}

void sub_188EC2340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id location)
{
  objc_destroyWeak(v29);
  objc_destroyWeak(v28);
  objc_destroyWeak(v27);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

__CFString *GEOActiveTileGroupChangedInternalDarwinNotificationName(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1 && ([v1 isDefaultConfiguration] & 1) == 0)
  {
    uint64_t v4 = [v2 directorySuffix];
    int v3 = [@"com.apple.GeoServices.ActiveTileGroupChanged.internal" stringByAppendingFormat:@".%@", v4];
  }
  else
  {
    int v3 = @"com.apple.GeoServices.ActiveTileGroupChanged.internal";
  }

  return v3;
}

void sub_188EC2624(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188EC2744(_Unwind_Exception *a1)
{
  int v3 = v2;

  _Unwind_Resume(a1);
}

void sub_188EC2A08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_188EC2BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_188EC3594(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPBTransitIncidentReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 100))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOPBTransitIncidentReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)id v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 104));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 96) = [v8 position];
  *(_DWORD *)(a1 + 100) = [v8 length];
  if (a3) {
    id v9 = (int *)&GEOPBTransitIncidentReadAllFrom_recursiveTag;
  }
  else {
    id v9 = (int *)&GEOPBTransitIncidentReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOPBTransitIncidentReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOPBTransitIncidentCallReadAllRecursiveWithoutSynchronized(a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 104));
  return Specified;
}

void sub_188EC3BF0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EC3CBC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTFRoadSpeedReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 124))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOTFRoadSpeedReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)id v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 128));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 120) = [v8 position];
  *(_DWORD *)(a1 + 124) = [v8 length];
  if (a3) {
    id v9 = (int *)&GEOTFRoadSpeedReadAllFrom_recursiveTag;
  }
  else {
    id v9 = (int *)&GEOTFRoadSpeedReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOTFRoadSpeedReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOTFRoadSpeedCallReadAllRecursiveWithoutSynchronized(a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 128));
  return Specified;
}

void sub_188EC3E58(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EC4138(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDPoiEventReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 84))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOPDPoiEventReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)id v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 88));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 80) = [v8 position];
  *(_DWORD *)(a1 + 84) = [v8 length];
  if (a3) {
    id v9 = (int *)&GEOPDPoiEventReadAllFrom_recursiveTag;
  }
  else {
    id v9 = (int *)&GEOPDPoiEventReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOPDPoiEventReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOPDPoiEventCallReadAllRecursiveWithoutSynchronized((id *)a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 88));
  return Specified;
}

void sub_188EC42D4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDPlugReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 60))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOPDPlugReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)id v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 56) = [v8 position];
  *(_DWORD *)(a1 + 60) = [v8 length];
  if (a3) {
    id v9 = (int *)&GEOPDPlugReadAllFrom_recursiveTag;
  }
  else {
    id v9 = (int *)&GEOPDPlugReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOPDPlugReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    -[GEOPDChargerInfo readAll:](*(void *)(a1 + 32), 1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return Specified;
}

void sub_188EC4478(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDPlaceContextMetadataIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  uint64_t v2 = (int *)MEMORY[0x1E4F940E8];
  int v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] >= *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
LABEL_349:
    BOOL v187 = a1[*v4] == 0;
    PBReaderRecallMark();
    return v187;
  }
  uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (a1[*v4]) {
      goto LABEL_349;
    }
    char v6 = 0;
    unsigned int v7 = 0;
    unint64_t v8 = 0;
    while (1)
    {
      uint64_t v9 = *v2;
      uint64_t v10 = *(void *)&a1[v9];
      unint64_t v11 = v10 + 1;
      if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
        break;
      }
      char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
      *(void *)&a1[v9] = v11;
      v8 |= (unint64_t)(v12 & 0x7F) << v6;
      if ((v12 & 0x80) == 0) {
        goto LABEL_12;
      }
      v6 += 7;
      BOOL v13 = v7++ >= 9;
      if (v13)
      {
        unint64_t v8 = 0;
        int v14 = a1[*v4];
        goto LABEL_14;
      }
    }
    a1[*v4] = 1;
LABEL_12:
    int v14 = a1[*v4];
    if (a1[*v4]) {
      unint64_t v8 = 0;
    }
LABEL_14:
    int v15 = v8 & 7;
    if (v14 || v15 == 4) {
      goto LABEL_349;
    }
    switch((v8 >> 3))
    {
      case 1u:
        if ((v8 & 7) != 0) {
          goto LABEL_353;
        }
        unsigned int v17 = 0;
        while (1)
        {
          uint64_t v18 = *v2;
          uint64_t v19 = *(void *)&a1[v18];
          unint64_t v20 = v19 + 1;
          if (v19 == -1 || v20 > *(void *)&a1[*v3]) {
            goto LABEL_37;
          }
          int v21 = *(char *)(*(void *)&a1[*v5] + v19);
          *(void *)&a1[v18] = v20;
          if (v21 < 0)
          {
            BOOL v22 = v17++ > 8;
            if (!v22) {
              continue;
            }
          }
          goto LABEL_348;
        }
      case 2u:
        if ((v8 & 7) != 0) {
          goto LABEL_353;
        }
        unsigned int v23 = 0;
        while (1)
        {
          uint64_t v24 = *v2;
          uint64_t v25 = *(void *)&a1[v24];
          unint64_t v26 = v25 + 1;
          if (v25 == -1 || v26 > *(void *)&a1[*v3]) {
            break;
          }
          int v27 = *(char *)(*(void *)&a1[*v5] + v25);
          *(void *)&a1[v24] = v26;
          if (v27 < 0)
          {
            BOOL v22 = v23++ > 8;
            if (!v22) {
              continue;
            }
          }
          goto LABEL_348;
        }
LABEL_37:
        a1[*v4] = 1;
        goto LABEL_348;
      case 3u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_353;
        }
        objc_msgSend(a1, "position", 0, 0);
        [a1 length];
LABEL_41:
        if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
          goto LABEL_346;
        }
        char v28 = 0;
        unsigned int v29 = 0;
        unint64_t v30 = 0;
        while (2)
        {
          uint64_t v31 = *v2;
          uint64_t v32 = *(void *)&a1[v31];
          unint64_t v33 = v32 + 1;
          if (v32 == -1 || v33 > *(void *)&a1[*v3])
          {
            a1[*v4] = 1;
          }
          else
          {
            char v34 = *(unsigned char *)(*(void *)&a1[*v5] + v32);
            *(void *)&a1[v31] = v33;
            v30 |= (unint64_t)(v34 & 0x7F) << v28;
            if (v34 < 0)
            {
              v28 += 7;
              BOOL v13 = v29++ >= 9;
              if (v13)
              {
                unint64_t v30 = 0;
                int v35 = a1[*v4];
                goto LABEL_53;
              }
              continue;
            }
          }
          break;
        }
        int v35 = a1[*v4];
        if (a1[*v4]) {
          unint64_t v30 = 0;
        }
LABEL_53:
        int v36 = v30 & 7;
        if (v35) {
          BOOL v37 = 1;
        }
        else {
          BOOL v37 = v36 == 4;
        }
        if (v37)
        {
LABEL_346:
          int v186 = a1[*v4];
          PBReaderRecallMark();
          if (v186) {
            goto LABEL_353;
          }
LABEL_347:
          PBReaderRecallMark();
LABEL_348:
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
            goto LABEL_349;
          }
          continue;
        }
        switch((v30 >> 3))
        {
          case 1u:
            if (v36 == 2) {
              goto LABEL_79;
            }
            goto LABEL_352;
          case 2u:
            if ((v30 & 7) != 0) {
              goto LABEL_352;
            }
            unsigned int v38 = 0;
            while (1)
            {
              uint64_t v39 = *v2;
              uint64_t v40 = *(void *)&a1[v39];
              unint64_t v41 = v40 + 1;
              if (v40 == -1 || v41 > *(void *)&a1[*v3]) {
                goto LABEL_202;
              }
              int v42 = *(char *)(*(void *)&a1[*v5] + v40);
              *(void *)&a1[v39] = v41;
              if (v42 < 0)
              {
                BOOL v22 = v38++ > 8;
                if (!v22) {
                  continue;
                }
              }
              goto LABEL_41;
            }
          case 3u:
            if (v36 == 2) {
              goto LABEL_79;
            }
            goto LABEL_352;
          case 4u:
            if (v36 == 2) {
              goto LABEL_79;
            }
            goto LABEL_352;
          case 5u:
            if (v36 == 2) {
              goto LABEL_79;
            }
            goto LABEL_352;
          case 6u:
            if (v36 == 2 && PBReaderPlaceMark() && GEOLocalizedStringIsValid(a1)) {
              goto LABEL_206;
            }
            goto LABEL_352;
          case 7u:
            if (v36 == 2) {
              goto LABEL_79;
            }
            goto LABEL_352;
          case 8u:
            if ((v30 & 7) != 0) {
              goto LABEL_352;
            }
            unsigned int v43 = 0;
            while (1)
            {
              uint64_t v44 = *v2;
              uint64_t v45 = *(void *)&a1[v44];
              unint64_t v46 = v45 + 1;
              if (v45 == -1 || v46 > *(void *)&a1[*v3]) {
                goto LABEL_202;
              }
              int v47 = *(char *)(*(void *)&a1[*v5] + v45);
              *(void *)&a1[v44] = v46;
              if (v47 < 0)
              {
                BOOL v22 = v43++ > 8;
                if (!v22) {
                  continue;
                }
              }
              goto LABEL_41;
            }
          case 9u:
            if (v36 != 2 || !PBReaderPlaceMark()) {
              goto LABEL_352;
            }
            [a1 position];
            [a1 length];
LABEL_92:
            while (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
            {
              char v48 = 0;
              unsigned int v49 = 0;
              unint64_t v50 = 0;
              while (2)
              {
                uint64_t v51 = *v2;
                uint64_t v52 = *(void *)&a1[v51];
                unint64_t v53 = v52 + 1;
                if (v52 == -1 || v53 > *(void *)&a1[*v3])
                {
                  a1[*v4] = 1;
                }
                else
                {
                  char v54 = *(unsigned char *)(*(void *)&a1[*v5] + v52);
                  *(void *)&a1[v51] = v53;
                  v50 |= (unint64_t)(v54 & 0x7F) << v48;
                  if (v54 < 0)
                  {
                    v48 += 7;
                    BOOL v13 = v49++ >= 9;
                    if (v13)
                    {
                      unint64_t v50 = 0;
                      int v55 = a1[*v4];
                      goto LABEL_104;
                    }
                    continue;
                  }
                }
                break;
              }
              int v55 = a1[*v4];
              if (a1[*v4]) {
                unint64_t v50 = 0;
              }
LABEL_104:
              int v56 = v50 & 7;
              if (v55) {
                BOOL v57 = 1;
              }
              else {
                BOOL v57 = v56 == 4;
              }
              if (!v57)
              {
                switch((v50 >> 3))
                {
                  case 1u:
                    if (v56 != 2) {
                      goto LABEL_351;
                    }
                    goto LABEL_110;
                  case 2u:
                    if ((v50 & 7) != 0) {
                      goto LABEL_351;
                    }
                    unsigned int v58 = 0;
                    while (1)
                    {
                      uint64_t v59 = *v2;
                      uint64_t v60 = *(void *)&a1[v59];
                      unint64_t v61 = v60 + 1;
                      if (v60 == -1 || v61 > *(void *)&a1[*v3]) {
                        goto LABEL_152;
                      }
                      int v62 = *(char *)(*(void *)&a1[*v5] + v60);
                      *(void *)&a1[v59] = v61;
                      if (v62 < 0)
                      {
                        BOOL v22 = v58++ > 8;
                        if (!v22) {
                          continue;
                        }
                      }
                      goto LABEL_92;
                    }
                  case 3u:
                    if ((v50 & 7) != 0) {
                      goto LABEL_351;
                    }
                    unsigned int v63 = 0;
                    while (1)
                    {
                      uint64_t v64 = *v2;
                      uint64_t v65 = *(void *)&a1[v64];
                      unint64_t v66 = v65 + 1;
                      if (v65 == -1 || v66 > *(void *)&a1[*v3]) {
                        goto LABEL_152;
                      }
                      int v67 = *(char *)(*(void *)&a1[*v5] + v65);
                      *(void *)&a1[v64] = v66;
                      if (v67 < 0)
                      {
                        BOOL v22 = v63++ > 8;
                        if (!v22) {
                          continue;
                        }
                      }
                      goto LABEL_92;
                    }
                  case 4u:
                    if ((v50 & 7) != 0) {
                      goto LABEL_351;
                    }
                    unsigned int v68 = 0;
                    while (1)
                    {
                      uint64_t v69 = *v2;
                      uint64_t v70 = *(void *)&a1[v69];
                      unint64_t v71 = v70 + 1;
                      if (v70 == -1 || v71 > *(void *)&a1[*v3]) {
                        goto LABEL_152;
                      }
                      int v72 = *(char *)(*(void *)&a1[*v5] + v70);
                      *(void *)&a1[v69] = v71;
                      if (v72 < 0)
                      {
                        BOOL v22 = v68++ > 8;
                        if (!v22) {
                          continue;
                        }
                      }
                      goto LABEL_92;
                    }
                  case 5u:
                    if ((v50 & 7) != 0) {
                      goto LABEL_351;
                    }
                    unsigned int v73 = 0;
                    while (1)
                    {
                      uint64_t v74 = *v2;
                      uint64_t v75 = *(void *)&a1[v74];
                      unint64_t v76 = v75 + 1;
                      if (v75 == -1 || v76 > *(void *)&a1[*v3]) {
                        goto LABEL_152;
                      }
                      int v77 = *(char *)(*(void *)&a1[*v5] + v75);
                      *(void *)&a1[v74] = v76;
                      if (v77 < 0)
                      {
                        BOOL v22 = v73++ > 8;
                        if (!v22) {
                          continue;
                        }
                      }
                      goto LABEL_92;
                    }
                  case 6u:
                    if ((v50 & 7) != 0) {
                      goto LABEL_351;
                    }
                    unsigned int v78 = 0;
                    do
                    {
                      uint64_t v79 = *v2;
                      uint64_t v80 = *(void *)&a1[v79];
                      unint64_t v81 = v80 + 1;
                      if (v80 == -1 || v81 > *(void *)&a1[*v3])
                      {
LABEL_152:
                        a1[*v4] = 1;
                        goto LABEL_92;
                      }
                      int v82 = *(char *)(*(void *)&a1[*v5] + v80);
                      *(void *)&a1[v79] = v81;
                      if ((v82 & 0x80000000) == 0) {
                        break;
                      }
                      BOOL v22 = v78++ > 8;
                    }
                    while (!v22);
                    break;
                  default:
LABEL_110:
                    if ((PBReaderSkipValueWithTag() & 1) == 0) {
                      goto LABEL_351;
                    }
                    continue;
                }
                continue;
              }
              break;
            }
            int v109 = a1[*v4];
            PBReaderRecallMark();
            if (!v109) {
              goto LABEL_206;
            }
            goto LABEL_352;
          case 0xAu:
            if (v36 != 2 || !PBReaderPlaceMark()) {
              goto LABEL_352;
            }
            [a1 position];
            [a1 length];
            break;
          case 0xBu:
            if ((v30 & 7) != 0) {
              goto LABEL_352;
            }
            unsigned int v103 = 0;
            do
            {
              uint64_t v104 = *v2;
              uint64_t v105 = *(void *)&a1[v104];
              unint64_t v106 = v105 + 1;
              if (v105 == -1 || v106 > *(void *)&a1[*v3])
              {
LABEL_202:
                a1[*v4] = 1;
                goto LABEL_41;
              }
              int v107 = *(char *)(*(void *)&a1[*v5] + v105);
              *(void *)&a1[v104] = v106;
              if ((v107 & 0x80000000) == 0) {
                break;
              }
              BOOL v22 = v103++ > 8;
            }
            while (!v22);
            goto LABEL_41;
          default:
LABEL_79:
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_352;
            }
            goto LABEL_41;
        }
LABEL_156:
        while (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
        {
          char v83 = 0;
          unsigned int v84 = 0;
          unint64_t v85 = 0;
          while (1)
          {
            uint64_t v86 = *v2;
            uint64_t v87 = *(void *)&a1[v86];
            unint64_t v88 = v87 + 1;
            if (v87 == -1 || v88 > *(void *)&a1[*v3]) {
              break;
            }
            char v89 = *(unsigned char *)(*(void *)&a1[*v5] + v87);
            *(void *)&a1[v86] = v88;
            v85 |= (unint64_t)(v89 & 0x7F) << v83;
            if ((v89 & 0x80) == 0) {
              goto LABEL_166;
            }
            v83 += 7;
            BOOL v13 = v84++ >= 9;
            if (v13)
            {
              unint64_t v85 = 0;
              int v90 = a1[*v4];
              goto LABEL_168;
            }
          }
          a1[*v4] = 1;
LABEL_166:
          int v90 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v85 = 0;
          }
LABEL_168:
          int v91 = v85 & 7;
          if (v90 || v91 == 4) {
            break;
          }
          if ((v85 >> 3) == 1)
          {
            if (v91 == 2)
            {
              if (PBReaderPlaceMark())
              {
                while (1)
                {
LABEL_183:
                  if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || (unsigned int v98 = a1[*v4], a1[*v4]))
                  {
                    PBReaderRecallMark();
                    goto LABEL_156;
                  }
                  while (1)
                  {
                    uint64_t v99 = *v2;
                    uint64_t v100 = *(void *)&a1[v99];
                    unint64_t v101 = v100 + 1;
                    if (v100 == -1 || v101 > *(void *)&a1[*v3]) {
                      break;
                    }
                    int v102 = *(char *)(*(void *)&a1[*v5] + v100);
                    *(void *)&a1[v99] = v101;
                    if (v102 < 0)
                    {
                      BOOL v13 = v98++ >= 9;
                      if (!v13) {
                        continue;
                      }
                    }
                    goto LABEL_183;
                  }
                  a1[*v4] = 1;
                }
              }
            }
            else if ((v85 & 7) == 0)
            {
              do
              {
                uint64_t v93 = *v2;
                uint64_t v94 = *(void *)&a1[v93];
                unint64_t v95 = v94 + 1;
                if (v94 == -1 || v95 > *(void *)&a1[*v3])
                {
                  a1[*v4] = 1;
                  goto LABEL_156;
                }
                int v96 = *(char *)(*(void *)&a1[*v5] + v94);
                *(void *)&a1[v93] = v95;
                if ((v96 & 0x80000000) == 0) {
                  break;
                }
                unsigned int v97 = v91++;
              }
              while (v97 <= 8);
              continue;
            }
LABEL_351:
            PBReaderRecallMark();
            goto LABEL_352;
          }
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_351;
          }
        }
        int v108 = a1[*v4];
        PBReaderRecallMark();
        if (!v108)
        {
LABEL_206:
          PBReaderRecallMark();
          goto LABEL_41;
        }
LABEL_352:
        PBReaderRecallMark();
LABEL_353:
        PBReaderRecallMark();
        return 0;
      case 4u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_353;
        }
        [a1 position];
        [a1 length];
LABEL_210:
        while (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
        {
          char v110 = 0;
          unsigned int v111 = 0;
          unint64_t v112 = 0;
          while (2)
          {
            uint64_t v113 = *v2;
            uint64_t v114 = *(void *)&a1[v113];
            unint64_t v115 = v114 + 1;
            if (v114 == -1 || v115 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              char v116 = *(unsigned char *)(*(void *)&a1[*v5] + v114);
              *(void *)&a1[v113] = v115;
              v112 |= (unint64_t)(v116 & 0x7F) << v110;
              if (v116 < 0)
              {
                v110 += 7;
                BOOL v13 = v111++ >= 9;
                if (v13)
                {
                  unint64_t v112 = 0;
                  int v117 = a1[*v4];
                  goto LABEL_222;
                }
                continue;
              }
            }
            break;
          }
          int v117 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v112 = 0;
          }
LABEL_222:
          int v118 = v112 & 7;
          if (v117) {
            BOOL v119 = 1;
          }
          else {
            BOOL v119 = v118 == 4;
          }
          if (!v119)
          {
            switch((v112 >> 3))
            {
              case 1u:
                if (v118 == 2) {
                  goto LABEL_323;
                }
                goto LABEL_352;
              case 2u:
                if ((v112 & 7) != 0) {
                  goto LABEL_352;
                }
                unsigned int v120 = 0;
                while (1)
                {
                  uint64_t v121 = *v2;
                  uint64_t v122 = *(void *)&a1[v121];
                  unint64_t v123 = v122 + 1;
                  if (v122 == -1 || v123 > *(void *)&a1[*v3]) {
                    goto LABEL_333;
                  }
                  int v124 = *(char *)(*(void *)&a1[*v5] + v122);
                  *(void *)&a1[v121] = v123;
                  if (v124 < 0)
                  {
                    BOOL v22 = v120++ > 8;
                    if (!v22) {
                      continue;
                    }
                  }
                  goto LABEL_210;
                }
              case 3u:
                if ((v112 & 7) != 0) {
                  goto LABEL_352;
                }
                unsigned int v125 = 0;
                while (1)
                {
                  uint64_t v126 = *v2;
                  uint64_t v127 = *(void *)&a1[v126];
                  unint64_t v128 = v127 + 1;
                  if (v127 == -1 || v128 > *(void *)&a1[*v3]) {
                    goto LABEL_333;
                  }
                  int v129 = *(char *)(*(void *)&a1[*v5] + v127);
                  *(void *)&a1[v126] = v128;
                  if (v129 < 0)
                  {
                    BOOL v22 = v125++ > 8;
                    if (!v22) {
                      continue;
                    }
                  }
                  goto LABEL_210;
                }
              case 4u:
                if (v118 == 2)
                {
                  if (PBReaderPlaceMark())
                  {
                    while (1)
                    {
LABEL_335:
                      if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || (unsigned int v180 = a1[*v4], a1[*v4]))
                      {
LABEL_273:
                        PBReaderRecallMark();
                        goto LABEL_210;
                      }
                      while (1)
                      {
                        uint64_t v181 = *v2;
                        uint64_t v182 = *(void *)&a1[v181];
                        unint64_t v183 = v182 + 1;
                        if (v182 == -1 || v183 > *(void *)&a1[*v3]) {
                          break;
                        }
                        int v184 = *(char *)(*(void *)&a1[*v5] + v182);
                        *(void *)&a1[v181] = v183;
                        if (v184 < 0)
                        {
                          BOOL v13 = v180++ >= 9;
                          if (!v13) {
                            continue;
                          }
                        }
                        goto LABEL_335;
                      }
                      a1[*v4] = 1;
                    }
                  }
                }
                else if ((v112 & 7) == 0)
                {
                  while (1)
                  {
                    uint64_t v130 = *v2;
                    uint64_t v131 = *(void *)&a1[v130];
                    unint64_t v132 = v131 + 1;
                    if (v131 == -1 || v132 > *(void *)&a1[*v3]) {
                      break;
                    }
                    int v133 = *(char *)(*(void *)&a1[*v5] + v131);
                    *(void *)&a1[v130] = v132;
                    if (v133 < 0)
                    {
                      unsigned int v134 = v118++;
                      if (v134 <= 8) {
                        continue;
                      }
                    }
                    goto LABEL_210;
                  }
LABEL_333:
                  a1[*v4] = 1;
                  continue;
                }
                break;
              case 5u:
                if (v118 == 2) {
                  goto LABEL_323;
                }
                goto LABEL_352;
              case 6u:
                if ((v112 & 7) != 0) {
                  goto LABEL_352;
                }
                unsigned int v135 = 0;
                while (1)
                {
                  uint64_t v136 = *v2;
                  uint64_t v137 = *(void *)&a1[v136];
                  unint64_t v138 = v137 + 1;
                  if (v137 == -1 || v138 > *(void *)&a1[*v3]) {
                    goto LABEL_333;
                  }
                  int v139 = *(char *)(*(void *)&a1[*v5] + v137);
                  *(void *)&a1[v136] = v138;
                  if (v139 < 0)
                  {
                    BOOL v22 = v135++ > 8;
                    if (!v22) {
                      continue;
                    }
                  }
                  goto LABEL_210;
                }
              case 7u:
                if ((v112 & 7) != 0) {
                  goto LABEL_352;
                }
                unsigned int v140 = 0;
                while (1)
                {
                  uint64_t v141 = *v2;
                  uint64_t v142 = *(void *)&a1[v141];
                  unint64_t v143 = v142 + 1;
                  if (v142 == -1 || v143 > *(void *)&a1[*v3]) {
                    goto LABEL_333;
                  }
                  int v144 = *(char *)(*(void *)&a1[*v5] + v142);
                  *(void *)&a1[v141] = v143;
                  if (v144 < 0)
                  {
                    BOOL v22 = v140++ > 8;
                    if (!v22) {
                      continue;
                    }
                  }
                  goto LABEL_210;
                }
              case 8u:
                if (v118 == 2 && PBReaderPlaceMark() && GEOLocalizedStringIsValid(a1)) {
                  goto LABEL_273;
                }
                goto LABEL_352;
              case 9u:
                if ((v112 & 7) != 0) {
                  goto LABEL_352;
                }
                unsigned int v145 = 0;
                while (1)
                {
                  uint64_t v146 = *v2;
                  uint64_t v147 = *(void *)&a1[v146];
                  unint64_t v148 = v147 + 1;
                  if (v147 == -1 || v148 > *(void *)&a1[*v3]) {
                    goto LABEL_333;
                  }
                  int v149 = *(char *)(*(void *)&a1[*v5] + v147);
                  *(void *)&a1[v146] = v148;
                  if (v149 < 0)
                  {
                    BOOL v22 = v145++ > 8;
                    if (!v22) {
                      continue;
                    }
                  }
                  goto LABEL_210;
                }
              case 0xAu:
                if ((v112 & 7) != 0) {
                  goto LABEL_352;
                }
                unsigned int v150 = 0;
                while (1)
                {
                  uint64_t v151 = *v2;
                  uint64_t v152 = *(void *)&a1[v151];
                  unint64_t v153 = v152 + 1;
                  if (v152 == -1 || v153 > *(void *)&a1[*v3]) {
                    goto LABEL_333;
                  }
                  int v154 = *(char *)(*(void *)&a1[*v5] + v152);
                  *(void *)&a1[v151] = v153;
                  if (v154 < 0)
                  {
                    BOOL v22 = v150++ > 8;
                    if (!v22) {
                      continue;
                    }
                  }
                  goto LABEL_210;
                }
              case 0xBu:
                if ((v112 & 7) != 0) {
                  goto LABEL_352;
                }
                unsigned int v155 = 0;
                while (1)
                {
                  uint64_t v156 = *v2;
                  uint64_t v157 = *(void *)&a1[v156];
                  unint64_t v158 = v157 + 1;
                  if (v157 == -1 || v158 > *(void *)&a1[*v3]) {
                    goto LABEL_333;
                  }
                  int v159 = *(char *)(*(void *)&a1[*v5] + v157);
                  *(void *)&a1[v156] = v158;
                  if (v159 < 0)
                  {
                    BOOL v22 = v155++ > 8;
                    if (!v22) {
                      continue;
                    }
                  }
                  goto LABEL_210;
                }
              case 0xCu:
                if ((v112 & 7) != 0) {
                  goto LABEL_352;
                }
                unsigned int v160 = 0;
                while (1)
                {
                  uint64_t v161 = *v2;
                  uint64_t v162 = *(void *)&a1[v161];
                  unint64_t v163 = v162 + 1;
                  if (v162 == -1 || v163 > *(void *)&a1[*v3]) {
                    goto LABEL_333;
                  }
                  int v164 = *(char *)(*(void *)&a1[*v5] + v162);
                  *(void *)&a1[v161] = v163;
                  if (v164 < 0)
                  {
                    BOOL v22 = v160++ > 8;
                    if (!v22) {
                      continue;
                    }
                  }
                  goto LABEL_210;
                }
              case 0xDu:
                if ((v112 & 7) != 0) {
                  goto LABEL_352;
                }
                unsigned int v165 = 0;
                while (1)
                {
                  uint64_t v166 = *v2;
                  uint64_t v167 = *(void *)&a1[v166];
                  unint64_t v168 = v167 + 1;
                  if (v167 == -1 || v168 > *(void *)&a1[*v3]) {
                    goto LABEL_333;
                  }
                  int v169 = *(char *)(*(void *)&a1[*v5] + v167);
                  *(void *)&a1[v166] = v168;
                  if (v169 < 0)
                  {
                    BOOL v22 = v165++ > 8;
                    if (!v22) {
                      continue;
                    }
                  }
                  goto LABEL_210;
                }
              case 0xEu:
                if ((v112 & 7) != 0) {
                  goto LABEL_352;
                }
                unsigned int v170 = 0;
                while (1)
                {
                  uint64_t v171 = *v2;
                  uint64_t v172 = *(void *)&a1[v171];
                  unint64_t v173 = v172 + 1;
                  if (v172 == -1 || v173 > *(void *)&a1[*v3]) {
                    goto LABEL_333;
                  }
                  int v174 = *(char *)(*(void *)&a1[*v5] + v172);
                  *(void *)&a1[v171] = v173;
                  if (v174 < 0)
                  {
                    BOOL v22 = v170++ > 8;
                    if (!v22) {
                      continue;
                    }
                  }
                  goto LABEL_210;
                }
              case 0xFu:
                if (v118 == 2) {
                  goto LABEL_323;
                }
                goto LABEL_352;
              case 0x10u:
                if ((v112 & 7) != 0) {
                  goto LABEL_352;
                }
                unsigned int v175 = 0;
                while (1)
                {
                  uint64_t v176 = *v2;
                  uint64_t v177 = *(void *)&a1[v176];
                  unint64_t v178 = v177 + 1;
                  if (v177 == -1 || v178 > *(void *)&a1[*v3]) {
                    goto LABEL_333;
                  }
                  int v179 = *(char *)(*(void *)&a1[*v5] + v177);
                  *(void *)&a1[v176] = v178;
                  if (v179 < 0)
                  {
                    BOOL v22 = v175++ > 8;
                    if (!v22) {
                      continue;
                    }
                  }
                  goto LABEL_210;
                }
              default:
LABEL_323:
                if ((PBReaderSkipValueWithTag() & 1) == 0) {
                  goto LABEL_352;
                }
                continue;
            }
            goto LABEL_352;
          }
          break;
        }
        int v185 = a1[*v4];
        PBReaderRecallMark();
        if (v185) {
          goto LABEL_353;
        }
        goto LABEL_347;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_353;
        }
        goto LABEL_348;
    }
  }
}

unint64_t GEOPDPlugReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  char v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 60);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 56)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unsigned int v12 = (vaddv_s16((int16x4_t)(*(void *)&vshl_u16((uint16x4_t)(*(void *)&vdup_n_s16(*(unsigned __int8 *)(a1 + 76)) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFCFFFDFFFBFFFALL) & 0xFF01FF01FF01FF01))+ ((*(unsigned char *)(a1 + 76) & 4) != 0));
  while (2)
  {
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v16 = v12 > 2;
        char v17 = v16 & ~(_BYTE)v11 | v9;
        unsigned __int8 v18 = v16 | v11;
        char v70 = v17;
        char v71 = v18 | v17;
        char v69 = v8;
        if ((v18 | v8)) {
          uint64_t v19 = 0;
        }
        else {
          uint64_t v19 = a3;
        }
        char v72 = (v19 == 0) | v18;
        BOOL v73 = v18;
        unint64_t v20 = (int *)MEMORY[0x1E4F940E8];
        int v21 = (int *)MEMORY[0x1E4F940C8];
        BOOL v22 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v12;
LABEL_7:
        uint64_t v13 = v9;
LABEL_8:
        uint64_t v14 = v10;
        uint64_t v15 = v11;
LABEL_10:
        ++v7;
        uint64_t v9 = v13;
        uint64_t v10 = v14;
        uint64_t v11 = v15;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v20) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v21)) {
      goto LABEL_102;
    }
    char v23 = 0;
    unsigned int v24 = 0;
    unint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = *v20;
      uint64_t v27 = *(void *)(v3 + v26);
      unint64_t v28 = v27 + 1;
      if (v27 == -1 || v28 > *(void *)(v3 + *v6)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(v3 + *v22) + v27);
      *(void *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0) {
        goto LABEL_25;
      }
      v23 += 7;
      BOOL v30 = v24++ >= 9;
      if (v30)
      {
        unint64_t v25 = 0;
        int v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v21) = 1;
LABEL_25:
    int v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(unsigned char *)(v3 + *v21)) {
      unint64_t v25 = 0;
    }
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_102:
      int v67 = 1;
      goto LABEL_103;
    }
    unint64_t v33 = v25 >> 3;
    BOOL v34 = v73;
    if ((v72 & 1) == 0)
    {
      int v35 = v19;
      do
      {
        int v37 = *v35++;
        int v36 = v37;
        BOOL v34 = v37 != 0;
        if (v37) {
          BOOL v38 = v36 == v33;
        }
        else {
          BOOL v38 = 1;
        }
      }
      while (!v38);
    }
    switch((int)v33)
    {
      case 1:
        if ((v69 & 1) == 0) {
          goto LABEL_80;
        }
        char v39 = 0;
        unsigned int v40 = 0;
        uint64_t v41 = 0;
        *(unsigned char *)(a1 + 76) |= 1u;
        while (1)
        {
          uint64_t v42 = *v20;
          uint64_t v43 = *(void *)(v3 + v42);
          unint64_t v44 = v43 + 1;
          if (v43 == -1 || v44 > *(void *)(v3 + *v6)) {
            break;
          }
          char v45 = *(unsigned char *)(*(void *)(v3 + *v22) + v43);
          *(void *)(v3 + v42) = v44;
          v41 |= (unint64_t)(v45 & 0x7F) << v39;
          if ((v45 & 0x80) == 0) {
            goto LABEL_83;
          }
          v39 += 7;
          BOOL v30 = v40++ >= 9;
          if (v30)
          {
            LODWORD(v41) = 0;
            goto LABEL_85;
          }
        }
        *(unsigned char *)(v3 + *v21) = 1;
LABEL_83:
        if (*(unsigned char *)(v3 + *v21)) {
          LODWORD(v41) = 0;
        }
LABEL_85:
        uint64_t v61 = 68;
        goto LABEL_90;
      case 2:
        if (!v34) {
          goto LABEL_80;
        }
        if ((*(unsigned char *)(a1 + 76) & 0x20) == 0)
        {
          uint64_t v49 = PBReaderReadString();
          uint64_t v50 = 40;
          goto LABEL_59;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_121;
        }
        char v62 = 4 * *(unsigned char *)(a1 + 76);
        goto LABEL_99;
      case 3:
        if (!v34) {
          goto LABEL_80;
        }
        if ((*(unsigned char *)(a1 + 76) & 0x40) == 0)
        {
          uint64_t v49 = PBReaderReadString();
          uint64_t v50 = 48;
LABEL_59:
          uint64_t v51 = *(void **)(a1 + v50);
          *(void *)(a1 + v50) = v49;
          goto LABEL_79;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_121;
        }
        char v62 = 2 * *(unsigned char *)(a1 + 76);
        goto LABEL_99;
      case 4:
        if ((v69 & 1) == 0) {
          goto LABEL_80;
        }
        char v52 = 0;
        unsigned int v53 = 0;
        uint64_t v41 = 0;
        *(unsigned char *)(a1 + 76) |= 2u;
        while (2)
        {
          uint64_t v54 = *v20;
          uint64_t v55 = *(void *)(v3 + v54);
          unint64_t v56 = v55 + 1;
          if (v55 == -1 || v56 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v21) = 1;
          }
          else
          {
            char v57 = *(unsigned char *)(*(void *)(v3 + *v22) + v55);
            *(void *)(v3 + v54) = v56;
            v41 |= (unint64_t)(v57 & 0x7F) << v52;
            if (v57 < 0)
            {
              v52 += 7;
              BOOL v30 = v53++ >= 9;
              if (v30)
              {
                LODWORD(v41) = 0;
                goto LABEL_89;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v21)) {
          LODWORD(v41) = 0;
        }
LABEL_89:
        uint64_t v61 = 72;
LABEL_90:
        *(_DWORD *)(a1 + v61) = v41;
        goto LABEL_101;
      case 5:
        if (!v34) {
          goto LABEL_80;
        }
        if ((*(unsigned char *)(a1 + 76) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_121;
          }
          char v62 = 16 * *(unsigned char *)(a1 + 76);
          goto LABEL_99;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_121;
        }
        unsigned int v58 = objc_alloc_init(GEOPDAvailabilityInfo);
        if (!GEOPDAvailabilityInfoReadAllFrom((uint64_t)v58, (void *)v3)) {
          goto LABEL_120;
        }
        PBReaderRecallMark();
        uint64_t v59 = 24;
        goto LABEL_78;
      case 6:
        if (!v34) {
          goto LABEL_80;
        }
        if ((*(unsigned char *)(a1 + 76) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_121;
          }
          char v62 = 8 * *(unsigned char *)(a1 + 76);
LABEL_99:
          v7 += v62 >> 7;
LABEL_100:
          int v21 = (int *)MEMORY[0x1E4F940C8];
          goto LABEL_101;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_121;
        }
        unsigned int v58 = objc_alloc_init(GEOPDChargerInfo);
        if (GEOPDChargerInfoReadAllFrom((uint64_t)v58, (void *)v3, v10 & 1))
        {
          PBReaderRecallMark();
          uint64_t v59 = 32;
LABEL_78:
          uint64_t v51 = *(void **)(a1 + v59);
          *(void *)(a1 + v59) = v58;
LABEL_79:

          --v7;
          goto LABEL_100;
        }
LABEL_120:

LABEL_121:
        int v67 = 0;
        unsigned int v68 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__flags;
        int v21 = (int *)MEMORY[0x1E4F940C8];
LABEL_104:
        if (v70) {
LABEL_105:
        }
          *(unsigned char *)(a1 + v68[240]) |= 4u;
        if (v73 || (v67 & 1) == 0)
        {
          *(unsigned char *)(a1 + v68[240]) |= 0x20u;
          *(unsigned char *)(a1 + v68[240]) |= 0x40u;
          *(unsigned char *)(a1 + v68[240]) |= 8u;
          *(unsigned char *)(a1 + v68[240]) |= 0x10u;
        }
        else if (v19)
        {
          while (1)
          {
            int v63 = *v19++;
            char v64 = 32;
            switch(v63)
            {
              case 0:
                goto LABEL_114;
              case 2:
                goto LABEL_113;
              case 3:
                char v64 = 64;
                goto LABEL_113;
              case 5:
                char v64 = 8;
                goto LABEL_113;
              case 6:
                char v64 = 16;
LABEL_113:
                *(unsigned char *)(a1 + v68[240]) |= v64;
                break;
              default:
                continue;
            }
          }
        }
LABEL_114:
        if (v67) {
          unint64_t v3 = *(unsigned char *)(v3 + *v21) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v73)
        {
          uint64_t v65 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      default:
        if ((v70 & 1) == 0 || (*(unsigned char *)(a1 + 76) & 4) != 0)
        {
LABEL_80:
          char v60 = PBReaderSkipValueWithTag();
          int v21 = (int *)MEMORY[0x1E4F940C8];
          if ((v60 & 1) == 0)
          {
            int v67 = 0;
LABEL_103:
            unsigned int v68 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__flags;
            goto LABEL_104;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v46 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            int v47 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v46;
          }
          int v48 = PBUnknownFieldAdd();
          int v21 = (int *)MEMORY[0x1E4F940C8];
          if (!v48)
          {
            int v67 = 0;
            unsigned int v68 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__flags;
            goto LABEL_105;
          }
        }
LABEL_101:
        if (!(v71 & 1 | (v7 != 0))) {
          goto LABEL_102;
        }
        continue;
    }
  }
}

void sub_188EC66E0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EC67D0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOBatchLogMessageType(uint64_t a1)
{
  if ((unsigned __int16)(WORD2(a1) - 1) > 0x12u) {
    return 0;
  }
  else {
    return dword_18A642FC4[(__int16)(WORD2(a1) - 1)];
  }
}

void sub_188EC6DF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_188EC762C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EC7B2C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EC7C2C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id uniqueIdentifierForTileGroup(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a5;
  id v10 = a4;
  id v11 = a2;
  id v12 = a1;
  uint64_t v13 = [a3 allObjects];
  uint64_t v14 = [v13 sortedArrayUsingSelector:sel_compare_];

  uint64_t v15 = [v10 allObjects];

  BOOL v16 = [v15 sortedArrayUsingSelector:sel_compare_];

  char v17 = NSString;
  uint64_t v18 = [v12 identifier];

  uint64_t v19 = [v14 componentsJoinedByString:@","];
  unint64_t v20 = [v16 componentsJoinedByString:@","];
  uint64_t v21 = [v9 identifier];

  BOOL v22 = [v17 stringWithFormat:@"%@:%i:%i:scl=%@&scn=%@&dsid=%u", v11, v18, 13, v19, v20, v21];

  return v22;
}

void sub_188EC80E4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EC83B8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EC8604(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EC89F4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOURLInfoSetCallReadAllRecursiveWithoutSynchronized(id *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  [a1[48] readAll:1];
  [a1[50] readAll:1];
  [a1[23] readAll:1];
  [a1[26] readAll:1];
  [a1[18] readAll:1];
  [a1[51] readAll:1];
  [a1[4] readAll:1];
  [a1[6] readAll:1];
  [a1[38] readAll:1];
  [a1[45] readAll:1];
  [a1[44] readAll:1];
  [a1[49] readAll:1];
  [a1[42] readAll:1];
  [a1[12] readAll:1];
  [a1[24] readAll:1];
  [a1[43] readAll:1];
  [a1[3] readAll:1];
  [a1[22] readAll:1];
  [a1[30] readAll:1];
  [a1[52] readAll:1];
  [a1[47] readAll:1];
  [a1[19] readAll:1];
  [a1[41] readAll:1];
  [a1[31] readAll:1];
  [a1[15] readAll:1];
  [a1[21] readAll:1];
  [a1[16] readAll:1];
  [a1[56] readAll:1];
  [a1[32] readAll:1];
  [a1[13] readAll:1];
  [a1[58] readAll:1];
  [a1[28] readAll:1];
  [a1[27] readAll:1];
  [a1[29] readAll:1];
  [a1[8] readAll:1];
  [a1[9] readAll:1];
  [a1[11] readAll:1];
  [a1[10] readAll:1];
  [a1[55] readAll:1];
  [a1[57] readAll:1];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v2 = a1[7];
  uint64_t v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        objc_msgSend(*(id *)(*((void *)&v8 + 1) + 8 * v6++), "readAll:", 1, (void)v8);
      }
      while (v4 != v6);
      uint64_t v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v4);
  }

  [a1[53] readAll:1];
  [a1[14] readAll:1];
  [a1[5] readAll:1];
  [a1[40] readAll:1];
  [a1[25] readAll:1];
  [a1[54] readAll:1];
  [a1[17] readAll:1];
  [a1[39] readAll:1];
  [a1[37] readAll:1];
  [a1[46] readAll:1];
  [a1[33] readAll:1];
  [a1[34] readAll:1];
  [a1[36] readAll:1];
  [a1[35] readAll:1];
  return [a1[20] readAll:1];
}

void sub_188EC981C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EC9E74(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EC9F40(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188ECA00C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void __daemonXPCUtilIsolater_block_invoke()
{
  uint64_t v0 = geo_isolater_create();
  id v1 = (void *)_MergedGlobals_228;
  _MergedGlobals_228 = v0;
}

uint64_t MapsFeature_IsEnabled_VKMLayout_SPR()
{
  return GEOConfigGetBOOL(MapsFeaturesConfig_VKMLayoutEnabled_SPR, (uint64_t)off_1E9111F08);
}

uint64_t MapsFeature_IsEnabled_MyPlacesFeatures()
{
  return GEOConfigGetBOOL(MapsFeaturesConfig_MyPlacesFeatures, (uint64_t)off_1E9111EC8);
}

uint64_t MapsFeature_IsEnabled_ElevatedPolygons()
{
  return GEOConfigGetBOOL(MapsFeaturesConfig_ElevatedPolygonsEnabled, (uint64_t)off_1E9111DD8);
}

void sub_188ECAB20(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id loadResource(void *a1, objc_class *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  id v17 = 0;
  uint64_t v4 = [MEMORY[0x1E4F1C9B8] dataWithContentsOfFile:v3 options:0 error:&v17];
  uint64_t v5 = v17;
  if (v4) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (!v6)
  {
    uint64_t v7 = v5;
    long long v8 = GEOGetPublisherAttributionLog();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      uint64_t v19 = v3;
      __int16 v20 = 2112;
      uint64_t v21 = v7;
      _os_log_impl(&dword_188D96000, v8, OS_LOG_TYPE_ERROR, "Couldn't read \"%@\": %@", buf, 0x16u);
    }
LABEL_21:
    long long v10 = 0;
    goto LABEL_22;
  }
  long long v9 = [v3 pathExtension];
  long long v8 = [v9 lowercaseString];

  if ([v8 isEqualToString:@"pb"])
  {
    long long v10 = (void *)[[a2 alloc] initWithData:v4];
    uint64_t v7 = 0;
    goto LABEL_22;
  }
  if (([v8 isEqualToString:@"json"] & 1) == 0
    && ![v3 containsString:@".json"])
  {
    uint64_t v14 = GEOGetPublisherAttributionLog();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      uint64_t v19 = v8;
      __int16 v20 = 2112;
      uint64_t v21 = v3;
      _os_log_impl(&dword_188D96000, v14, OS_LOG_TYPE_ERROR, "Unrecognized file extension \"%@\" on %@", buf, 0x16u);
    }

    uint64_t v7 = 0;
    goto LABEL_21;
  }
  id v16 = 0;
  long long v11 = [MEMORY[0x1E4F28D90] JSONObjectWithData:v4 options:0 error:&v16];
  id v12 = v16;
  uint64_t v7 = v12;
  if (!v11 || v12)
  {
    uint64_t v13 = GEOGetPublisherAttributionLog();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      uint64_t v19 = v3;
      __int16 v20 = 2112;
      uint64_t v21 = v7;
      _os_log_impl(&dword_188D96000, v13, OS_LOG_TYPE_ERROR, "Couldn't parse json \"%@\": %@", buf, 0x16u);
    }

    long long v10 = 0;
  }
  else
  {
    long long v10 = (void *)[[a2 alloc] initWithJSON:v11];
  }

LABEL_22:

  return v10;
}

void sub_188ECB968(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188ECBAB4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188ECBD64(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188ECC284(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPublisherAttributionManifestReadAllFrom(void *a1, void *a2, int a3)
{
  uint64_t v4 = a2;
  objc_sync_enter(v4);
  if (v4)
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940E8];
    BOOL v6 = (int *)MEMORY[0x1E4F940E0];
    uint64_t v7 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v4[*MEMORY[0x1E4F940E8]] < *(void *)&v4[*MEMORY[0x1E4F940E0]])
    {
      long long v8 = (int *)MEMORY[0x1E4F940B8];
      unint64_t v33 = a1;
      do
      {
        if (v4[*v7]) {
          break;
        }
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          uint64_t v12 = *v5;
          unint64_t v13 = *(void *)&v4[v12];
          if (v13 == -1 || v13 >= *(void *)&v4[*v6]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v4[*v8] + v13);
          *(void *)&v4[v12] = v13 + 1;
          v11 |= (unint64_t)(v14 & 0x7F) << v9;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v9 += 7;
          if (v10++ >= 9)
          {
            unint64_t v11 = 0;
            int v16 = v4[*v7];
            goto LABEL_15;
          }
        }
        v4[*v7] = 1;
LABEL_13:
        int v16 = v4[*v7];
        if (v4[*v7]) {
          unint64_t v11 = 0;
        }
LABEL_15:
        if (v16 || (v11 & 7) == 4) {
          break;
        }
        if ((v11 >> 3) == 1)
        {
          if (!PBReaderPlaceMark()) {
            goto LABEL_51;
          }
          if (*(void *)&v4[*v5] >= *(void *)&v4[*v6])
          {
            uint64_t v21 = 0;
            __int16 v20 = 0;
LABEL_50:

            goto LABEL_51;
          }
          char v18 = 0;
          char v19 = 0;
          __int16 v20 = 0;
          uint64_t v21 = 0;
          while (2)
          {
            if (!v4[*v7])
            {
              char v22 = 0;
              unsigned int v23 = 0;
              unint64_t v24 = 0;
              while (1)
              {
                uint64_t v25 = *v5;
                unint64_t v26 = *(void *)&v4[v25];
                if (v26 == -1 || v26 >= *(void *)&v4[*v6]) {
                  break;
                }
                char v27 = *(unsigned char *)(*(void *)&v4[*v8] + v26);
                *(void *)&v4[v25] = v26 + 1;
                v24 |= (unint64_t)(v27 & 0x7F) << v22;
                if ((v27 & 0x80) == 0) {
                  goto LABEL_32;
                }
                v22 += 7;
                if (v23++ > 8) {
                  goto LABEL_40;
                }
              }
              v4[*v7] = 1;
LABEL_32:
              if (v4[*v7]) {
                unint64_t v24 = 0;
              }
              if ((v24 >> 3) != 2)
              {
                if ((v24 >> 3) == 1)
                {
                  uint64_t v29 = PBReaderReadString();

                  char v19 = 1;
                  uint64_t v21 = (void *)v29;
                  goto LABEL_41;
                }
LABEL_40:
                if (!PBReaderSkipValueWithTag()) {
                  goto LABEL_50;
                }
                goto LABEL_41;
              }
              if (!PBReaderPlaceMark()) {
                goto LABEL_50;
              }
              BOOL v30 = objc_alloc_init(GEOPublisherAttributionSource);

              if ((GEOPublisherAttributionSourceReadAllFrom((uint64_t)v30, v4, a3) & 1) == 0)
              {
                __int16 v20 = v30;
                goto LABEL_50;
              }
              PBReaderRecallMark();
              char v18 = 1;
              __int16 v20 = v30;
LABEL_41:
              if (*(void *)&v4[*v5] < *(void *)&v4[*v6]) {
                continue;
              }
            }
            break;
          }
          if ((v19 & 1) == 0 || (v18 & 1) == 0) {
            goto LABEL_50;
          }
          [v33 setPublisherAttributionSourcesValue:v20 forKey:v21];
          PBReaderRecallMark();
        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_51;
        }
      }
      while (*(void *)&v4[*v5] < *(void *)&v4[*v6]);
    }
    BOOL v31 = v4[*v7] == 0;
  }
  else
  {
LABEL_51:
    BOOL v31 = 0;
  }
  objc_sync_exit(v4);

  return v31;
}

void sub_188ECC638(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPublisherAttributionSourceReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 52))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOPublisherAttributionSourceReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)unsigned int v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = [v8 position];
  *(_DWORD *)(a1 + 52) = [v8 length];
  if (a3) {
    char v9 = (int *)&GEOPublisherAttributionSourceReadAllFrom_recursiveTag;
  }
  else {
    char v9 = (int *)&GEOPublisherAttributionSourceReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOPublisherAttributionSourceReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOPublisherAttributionSourceCallReadAllRecursiveWithoutSynchronized(a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return Specified;
}

void sub_188ECC7D8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPublisherAttributionSourceReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  BOOL v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 52);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 48)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unsigned int v12 = ((*(unsigned __int8 *)(a1 + 60) >> 1) & 1)
      + (*(unsigned char *)(a1 + 60) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 2) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 3) & 1);
  while (2)
  {
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    switch(a3[v9])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v16 = v12 > 1;
        char v17 = v16 & ~(_BYTE)v11 | v7;
        unsigned __int8 v18 = v16 | v11;
        char v54 = v17;
        char v55 = v18 | v17;
        if ((v18 | v8)) {
          char v19 = 0;
        }
        else {
          char v19 = a3;
        }
        __int16 v20 = (int *)MEMORY[0x1E4F940E8];
        char v56 = (v19 == 0) | v18;
        BOOL v57 = v18;
        uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
        char v22 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v12;
LABEL_7:
        uint64_t v13 = v7;
LABEL_8:
        uint64_t v14 = v10;
        uint64_t v15 = v11;
LABEL_10:
        ++v9;
        uint64_t v7 = v13;
        uint64_t v10 = v14;
        uint64_t v11 = v15;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(void *)(v3 + *v20) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v21)) {
      goto LABEL_68;
    }
    char v23 = 0;
    unsigned int v24 = 0;
    unint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = *v20;
      uint64_t v27 = *(void *)(v3 + v26);
      unint64_t v28 = v27 + 1;
      if (v27 == -1 || v28 > *(void *)(v3 + *v6)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(v3 + *v22) + v27);
      *(void *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0) {
        goto LABEL_25;
      }
      v23 += 7;
      if (v24++ >= 9)
      {
        unint64_t v25 = 0;
        int v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v21) = 1;
LABEL_25:
    int v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(unsigned char *)(v3 + *v21)) {
      unint64_t v25 = 0;
    }
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_68:
      int v52 = 1;
      goto LABEL_69;
    }
    unint64_t v33 = v25 >> 3;
    BOOL v34 = v57;
    if ((v56 & 1) == 0)
    {
      int v35 = v19;
      do
      {
        int v37 = *v35++;
        int v36 = v37;
        BOOL v34 = v37 != 0;
        if (v37) {
          BOOL v38 = v36 == v33;
        }
        else {
          BOOL v38 = 1;
        }
      }
      while (!v38);
    }
    if (v33 == 5)
    {
      if (!v34) {
        goto LABEL_59;
      }
      if ((*(unsigned char *)(a1 + 60) & 8) == 0)
      {
        uint64_t v40 = PBReaderReadString();
        uint64_t v41 = 40;
LABEL_52:
        uint64_t v42 = *(void **)(a1 + v41);
        *(void *)(a1 + v41) = v40;

        --v9;
        goto LABEL_66;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        goto LABEL_85;
      }
      char v47 = 16 * *(unsigned char *)(a1 + 60);
LABEL_65:
      v9 += v47 >> 7;
      goto LABEL_66;
    }
    if (v33 == 4)
    {
      if (!v34) {
        goto LABEL_59;
      }
      if ((*(unsigned char *)(a1 + 60) & 2) == 0)
      {
        uint64_t v40 = PBReaderReadString();
        uint64_t v41 = 24;
        goto LABEL_52;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        goto LABEL_85;
      }
      char v47 = *(unsigned char *)(a1 + 60) << 6;
      goto LABEL_65;
    }
    if (v33 == 3) {
      break;
    }
    if (v54 & 1) == 0 || (*(unsigned char *)(a1 + 60))
    {
LABEL_59:
      char v46 = PBReaderSkipValueWithTag();
      uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
      if ((v46 & 1) == 0)
      {
        int v52 = 0;
        goto LABEL_69;
      }
      goto LABEL_67;
    }
    if (!*(void *)(a1 + 16))
    {
      id v43 = objc_alloc_init(MEMORY[0x1E4F940B0]);
      unint64_t v44 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v43;
    }
    int v45 = PBUnknownFieldAdd();
    uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
    if (!v45)
    {
      int v52 = 0;
      unsigned int v53 = &OBJC_IVAR___GEOMapItemStorage__readerMarkLength;
      goto LABEL_70;
    }
LABEL_67:
    if (!(v55 & 1 | (v9 != 0))) {
      goto LABEL_68;
    }
  }
  if (!v34 || (*(unsigned char *)(a1 + 60) & 4) != 0) {
    goto LABEL_59;
  }
  if ((PBReaderPlaceMark() & 1) == 0) {
    goto LABEL_85;
  }
  char v39 = objc_alloc_init(GEOLocalizedPublisherAttribution);
  if (GEOLocalizedPublisherAttributionReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1))
  {
    PBReaderRecallMark();
    -[GEOPublisherAttributionSource _addNoFlagsLocalizedAttribution:](a1, v39);

LABEL_66:
    uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
    goto LABEL_67;
  }

LABEL_85:
  int v52 = 0;
  uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
LABEL_69:
  unsigned int v53 = &OBJC_IVAR___GEOMapItemStorage__readerMarkLength;
  if ((v54 & 1) == 0) {
    goto LABEL_71;
  }
LABEL_70:
  *(unsigned char *)(a1 + v53[386]) |= 1u;
LABEL_71:
  if (v57 || (v52 & 1) == 0)
  {
    *(unsigned char *)(a1 + v53[386]) |= 4u;
    *(unsigned char *)(a1 + v53[386]) |= 2u;
    *(unsigned char *)(a1 + v53[386]) |= 8u;
  }
  else if (v19)
  {
    while (1)
    {
      int v48 = *v19++;
      char v49 = 4;
      switch(v48)
      {
        case 0:
          goto LABEL_78;
        case 3:
          goto LABEL_77;
        case 4:
          char v49 = 2;
          goto LABEL_77;
        case 5:
          char v49 = 8;
LABEL_77:
          *(unsigned char *)(a1 + v53[386]) |= v49;
          break;
        default:
          continue;
      }
    }
  }
LABEL_78:
  if (v52) {
    unint64_t v3 = *(unsigned char *)(v3 + *v21) == 0;
  }
  else {
    unint64_t v3 = 0;
  }
  if (v57)
  {
    uint64_t v50 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  return v3;
}

unint64_t GEOLocalizedPublisherAttributionReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 68))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOLocalizedPublisherAttributionReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 72));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 64) = [v8 position];
  *(_DWORD *)(a1 + 68) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOLocalizedPublisherAttributionReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOLocalizedPublisherAttributionReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOLocalizedPublisherAttributionReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 72));
  return Specified;
}

void sub_188ECCFF8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLocalizedPublisherAttributionReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 72));
  BOOL v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 68);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 64)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  unsigned int v11 = (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int16 *)(a1 + 96)), (uint16x4_t)0xFFF6FFF8FFF9FFFALL), (int8x8_t)0x1000100010001))+ ((*(_WORD *)(a1 + 96) >> 9) & 1)+ ((*(_WORD *)(a1 + 96) >> 5) & 1));
  while (2)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    switch(a3[v9])
    {
      case -4:
        ++v11;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_9;
      case 0:
        BOOL v14 = v11 > 3;
        char v15 = v14 & ~(_BYTE)v10 | v7;
        unsigned __int8 v16 = v14 | v10;
        char v83 = v15;
        char v84 = v16 | v15;
        if ((v16 | v8)) {
          char v17 = 0;
        }
        else {
          char v17 = a3;
        }
        char v85 = (v17 == 0) | v16;
        BOOL v86 = v16;
        unsigned __int8 v18 = (int *)MEMORY[0x1E4F940E8];
        char v19 = (int *)MEMORY[0x1E4F940C8];
        __int16 v20 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v11;
LABEL_7:
        uint64_t v12 = v7;
LABEL_8:
        uint64_t v13 = v10;
LABEL_9:
        ++v9;
        uint64_t v7 = v12;
        uint64_t v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v18) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v19)) {
      goto LABEL_135;
    }
    char v21 = 0;
    unsigned int v22 = 0;
    unint64_t v23 = 0;
    while (1)
    {
      uint64_t v24 = *v18;
      uint64_t v25 = *(void *)(v3 + v24);
      unint64_t v26 = v25 + 1;
      if (v25 == -1 || v26 > *(void *)(v3 + *v6)) {
        break;
      }
      char v27 = *(unsigned char *)(*(void *)(v3 + *v20) + v25);
      *(void *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0) {
        goto LABEL_24;
      }
      v21 += 7;
      BOOL v28 = v22++ >= 9;
      if (v28)
      {
        unint64_t v23 = 0;
        int v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_26;
      }
    }
    *(unsigned char *)(v3 + *v19) = 1;
LABEL_24:
    int v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(unsigned char *)(v3 + *v19)) {
      unint64_t v23 = 0;
    }
LABEL_26:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_135:
      int v81 = 1;
      goto LABEL_136;
    }
    unint64_t v31 = v23 >> 3;
    BOOL v32 = v86;
    if ((v85 & 1) == 0)
    {
      unint64_t v33 = v17;
      do
      {
        int v35 = *v33++;
        int v34 = v35;
        BOOL v32 = v35 != 0;
        if (v35) {
          BOOL v36 = v34 == v31;
        }
        else {
          BOOL v36 = 1;
        }
      }
      while (!v36);
    }
    switch((int)v31)
    {
      case 1:
        if (!v32) {
          goto LABEL_100;
        }
        if ((*(_WORD *)(a1 + 96) & 0x80) == 0)
        {
          uint64_t v37 = PBReaderReadString();
          uint64_t v38 = 32;
          goto LABEL_83;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_153;
        }
        __int16 v76 = *(_WORD *)(a1 + 96) << 8;
        goto LABEL_133;
      case 2:
        if (!v32) {
          goto LABEL_100;
        }
        if ((*(_WORD *)(a1 + 96) & 0x40) == 0)
        {
          uint64_t v37 = PBReaderReadString();
          uint64_t v38 = 24;
          goto LABEL_83;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_153;
        }
        __int16 v76 = *(_WORD *)(a1 + 96) << 9;
        goto LABEL_133;
      case 3:
        if (!v32) {
          goto LABEL_100;
        }
        if ((*(_WORD *)(a1 + 96) & 0x100) == 0)
        {
          uint64_t v37 = PBReaderReadString();
          uint64_t v38 = 40;
          goto LABEL_83;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_153;
        }
        __int16 v76 = *(_WORD *)(a1 + 96) << 7;
        goto LABEL_133;
      case 4:
        if ((v8 & 1) == 0) {
          goto LABEL_100;
        }
        char v42 = 0;
        unsigned int v43 = 0;
        uint64_t v44 = 0;
        *(_WORD *)(a1 + 96) |= 1u;
        while (2)
        {
          uint64_t v45 = *v18;
          uint64_t v46 = *(void *)(v3 + v45);
          unint64_t v47 = v46 + 1;
          if (v46 == -1 || v47 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v19) = 1;
          }
          else
          {
            char v48 = *(unsigned char *)(*(void *)(v3 + *v20) + v46);
            *(void *)(v3 + v45) = v47;
            v44 |= (unint64_t)(v48 & 0x7F) << v42;
            if (v48 < 0)
            {
              v42 += 7;
              BOOL v28 = v43++ >= 9;
              if (v28)
              {
                LODWORD(v44) = 0;
                goto LABEL_105;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v19)) {
          LODWORD(v44) = 0;
        }
LABEL_105:
        uint64_t v75 = 76;
        goto LABEL_122;
      case 5:
        if ((v8 & 1) == 0) {
          goto LABEL_100;
        }
        char v49 = 0;
        unsigned int v50 = 0;
        uint64_t v44 = 0;
        *(_WORD *)(a1 + 96) |= 8u;
        while (2)
        {
          uint64_t v51 = *v18;
          uint64_t v52 = *(void *)(v3 + v51);
          unint64_t v53 = v52 + 1;
          if (v52 == -1 || v53 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v19) = 1;
          }
          else
          {
            char v54 = *(unsigned char *)(*(void *)(v3 + *v20) + v52);
            *(void *)(v3 + v51) = v53;
            v44 |= (unint64_t)(v54 & 0x7F) << v49;
            if (v54 < 0)
            {
              v49 += 7;
              BOOL v28 = v50++ >= 9;
              if (v28)
              {
                LODWORD(v44) = 0;
                goto LABEL_109;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v19)) {
          LODWORD(v44) = 0;
        }
LABEL_109:
        uint64_t v75 = 88;
        goto LABEL_122;
      case 6:
        if ((v8 & 1) == 0) {
          goto LABEL_100;
        }
        char v55 = 0;
        unsigned int v56 = 0;
        uint64_t v44 = 0;
        *(_WORD *)(a1 + 96) |= 4u;
        while (2)
        {
          uint64_t v57 = *v18;
          uint64_t v58 = *(void *)(v3 + v57);
          unint64_t v59 = v58 + 1;
          if (v58 == -1 || v59 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v19) = 1;
          }
          else
          {
            char v60 = *(unsigned char *)(*(void *)(v3 + *v20) + v58);
            *(void *)(v3 + v57) = v59;
            v44 |= (unint64_t)(v60 & 0x7F) << v55;
            if (v60 < 0)
            {
              v55 += 7;
              BOOL v28 = v56++ >= 9;
              if (v28)
              {
                LODWORD(v44) = 0;
                goto LABEL_113;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v19)) {
          LODWORD(v44) = 0;
        }
LABEL_113:
        uint64_t v75 = 84;
        goto LABEL_122;
      case 7:
        if (!v32) {
          goto LABEL_100;
        }
        if ((*(_WORD *)(a1 + 96) & 0x400) == 0)
        {
          uint64_t v37 = PBReaderReadString();
          uint64_t v38 = 56;
          goto LABEL_83;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_153;
        }
        __int16 v76 = 32 * *(_WORD *)(a1 + 96);
        goto LABEL_133;
      case 8:
        if (!v32) {
          goto LABEL_100;
        }
        if ((*(_WORD *)(a1 + 96) & 0x200) == 0)
        {
          uint64_t v37 = PBReaderReadString();
          uint64_t v38 = 48;
LABEL_83:
          uint64_t v61 = *(void **)(a1 + v38);
          *(void *)(a1 + v38) = v37;

          char v19 = (int *)MEMORY[0x1E4F940C8];
          --v9;
LABEL_134:
          if (!(v84 & 1 | (v9 != 0))) {
            goto LABEL_135;
          }
          continue;
        }
        if (PBReaderSkipValueWithTag())
        {
          __int16 v76 = *(_WORD *)(a1 + 96) << 6;
LABEL_133:
          v9 += v76 >> 15;
          char v19 = (int *)MEMORY[0x1E4F940C8];
          goto LABEL_134;
        }
LABEL_153:
        int v81 = 0;
        char v19 = (int *)MEMORY[0x1E4F940C8];
LABEL_136:
        int v82 = &OBJC_IVAR___GEOMapItemStorage__readerMarkLength;
        if (v83) {
LABEL_137:
        }
          *(_WORD *)(a1 + v82[370]) |= 0x20u;
        if (v86 || (v81 & 1) == 0)
        {
          *(_WORD *)(a1 + v82[370]) |= 0x80u;
          *(_WORD *)(a1 + v82[370]) |= 0x40u;
          *(_WORD *)(a1 + v82[370]) |= 0x100u;
          *(_WORD *)(a1 + v82[370]) |= 0x400u;
          *(_WORD *)(a1 + v82[370]) |= 0x200u;
        }
        else if (v17)
        {
          while (1)
          {
            int v77 = *v17++;
            __int16 v78 = 128;
            switch(v77)
            {
              case 0:
                goto LABEL_147;
              case 1:
                goto LABEL_146;
              case 2:
                __int16 v78 = 64;
                goto LABEL_146;
              case 3:
                __int16 v78 = 256;
                goto LABEL_146;
              case 7:
                __int16 v78 = 1024;
                goto LABEL_146;
              case 8:
                __int16 v78 = 512;
LABEL_146:
                *(_WORD *)(a1 + v82[370]) |= v78;
                break;
              default:
                continue;
            }
          }
        }
LABEL_147:
        if (v81) {
          unint64_t v3 = *(unsigned char *)(v3 + *v19) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v86)
        {
          uint64_t v79 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      case 9:
        if ((v8 & 1) == 0) {
          goto LABEL_100;
        }
        char v62 = 0;
        unsigned int v63 = 0;
        uint64_t v44 = 0;
        *(_WORD *)(a1 + 96) |= 2u;
        while (2)
        {
          uint64_t v64 = *v18;
          uint64_t v65 = *(void *)(v3 + v64);
          unint64_t v66 = v65 + 1;
          if (v65 == -1 || v66 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v19) = 1;
          }
          else
          {
            char v67 = *(unsigned char *)(*(void *)(v3 + *v20) + v65);
            *(void *)(v3 + v64) = v66;
            v44 |= (unint64_t)(v67 & 0x7F) << v62;
            if (v67 < 0)
            {
              v62 += 7;
              BOOL v28 = v63++ >= 9;
              if (v28)
              {
                LODWORD(v44) = 0;
                goto LABEL_117;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v19)) {
          LODWORD(v44) = 0;
        }
LABEL_117:
        uint64_t v75 = 80;
        goto LABEL_122;
      case 10:
        if ((v8 & 1) == 0) {
          goto LABEL_100;
        }
        char v68 = 0;
        unsigned int v69 = 0;
        uint64_t v44 = 0;
        *(_WORD *)(a1 + 96) |= 0x10u;
        while (2)
        {
          uint64_t v70 = *v18;
          uint64_t v71 = *(void *)(v3 + v70);
          unint64_t v72 = v71 + 1;
          if (v71 == -1 || v72 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v19) = 1;
          }
          else
          {
            char v73 = *(unsigned char *)(*(void *)(v3 + *v20) + v71);
            *(void *)(v3 + v70) = v72;
            v44 |= (unint64_t)(v73 & 0x7F) << v68;
            if (v73 < 0)
            {
              v68 += 7;
              BOOL v28 = v69++ >= 9;
              if (v28)
              {
                LODWORD(v44) = 0;
                goto LABEL_121;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v19)) {
          LODWORD(v44) = 0;
        }
LABEL_121:
        uint64_t v75 = 92;
LABEL_122:
        *(_DWORD *)(a1 + v75) = v44;
        goto LABEL_134;
      default:
        if ((v83 & 1) == 0 || (*(_WORD *)(a1 + 96) & 0x20) != 0)
        {
LABEL_100:
          char v74 = PBReaderSkipValueWithTag();
          char v19 = (int *)MEMORY[0x1E4F940C8];
          if ((v74 & 1) == 0)
          {
            int v81 = 0;
            goto LABEL_136;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v39 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            uint64_t v40 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v39;
          }
          int v41 = PBUnknownFieldAdd();
          char v19 = (int *)MEMORY[0x1E4F940C8];
          if (!v41)
          {
            int v81 = 0;
            int v82 = &OBJC_IVAR___GEOMapItemStorage__readerMarkLength;
            goto LABEL_137;
          }
        }
        goto LABEL_134;
    }
  }
}

void sub_188ECDC84(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188ECDD50(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188ECDE1C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188ECE1BC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188ECE318(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188ECE3E4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188ECE4B0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188ECE57C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t mgcl::ints::IntDecompressor<unsigned char>::~IntDecompressor(uint64_t a1)
{
  std::unique_ptr<mgcl::iarray::Decoder>::reset[abi:ne180100]((mgcl::iarray::Decoder **)(a1 + 24), 0);
  id v2 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

mgcl::iarray::Decoder *std::unique_ptr<mgcl::iarray::Decoder>::reset[abi:ne180100](mgcl::iarray::Decoder **a1, mgcl::iarray::Decoder *a2)
{
  id result = *a1;
  *a1 = a2;
  if (result)
  {
    mgcl::iarray::Decoder::~Decoder(result);
    JUMPOUT(0x18C11F580);
  }
  return result;
}

void sub_188ECEAA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose(&a34, 8);
  _Block_object_dispose(&a38, 8);
  _Block_object_dispose(&a42, 8);
  _Block_object_dispose(&a48, 8);
  _Block_object_dispose((const void *)(v48 - 232), 8);
  _Block_object_dispose((const void *)(v48 - 200), 8);
  _Block_object_dispose((const void *)(v48 - 168), 8);
  _Block_object_dispose((const void *)(v48 - 120), 8);
  _Unwind_Resume(a1);
}

uint64_t GEOConfigGetUint64(int a1, uint64_t a2)
{
  id v2 = _getValue(a1, a2, 1, 0, 0, 0);
  uint64_t v3 = [v2 unsignedLongLongValue];

  return v3;
}

void sub_188ECF118(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_188ECF3C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v10 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_188ECFB34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

id GEOGetNetEventRecorderLog()
{
  if (qword_1EB29FE70 != -1) {
    dispatch_once(&qword_1EB29FE70, &__block_literal_global_24);
  }
  uint64_t v0 = (void *)qword_1EB29FE68;

  return v0;
}

__CFString *GEODataRequestKindAsString(uint64_t a1)
{
  if ((int)a1 > 2815)
  {
    switch((int)a1)
    {
      case 2848:
        id v1 = @"AddressCorrectionInit";
        break;
      case 2849:
        id v1 = @"AddressCorrectUpdate";
        break;
      case 2850:
        id v1 = @"ABAssign";
        break;
      case 2851:
        id v1 = @"LocationShift";
        break;
      case 2852:
        id v1 = @"SpatialLookup";
        break;
      case 2853:
        id v1 = @"ReportAProblem";
        break;
      case 2854:
        id v1 = @"ImageService";
        break;
      case 2855:
        id v1 = @"BatchRevGeo";
        break;
      case 2856:
        id v1 = @"WiFiQuality";
        break;
      case 2857:
        id v1 = @"TransitUpdate";
        break;
      case 2858:
        id v1 = @"WiFiTile";
        break;
      case 2859:
        id v1 = @"OfflineDataService";
        break;
      case 2860:
        id v1 = @"ConnectivityCheck";
        break;
      default:
        if (a1 == 2816)
        {
          id v1 = @"ProblemSubmission";
        }
        else
        {
          if (a1 != 2817) {
            goto LABEL_51;
          }
          id v1 = @"ProblemStatus";
        }
        break;
    }
  }
  else if ((int)a1 <= 255)
  {
    id v1 = @"CurrentCountry";
    switch((int)a1)
    {
      case 1:
        break;
      case 2:
        id v1 = @"SearchAttribution";
        break;
      case 3:
        id v1 = @"ResourceManifest";
        break;
      case 4:
        id v1 = @"ResourceData";
        break;
      case 5:
        id v1 = @"SearchAttributionData";
        break;
      case 6:
        id v1 = @"NetworkDefaults";
        break;
      case 15:
        id v1 = @"AnalyticsUpload";
        break;
      default:
        goto LABEL_51;
    }
  }
  else
  {
    if ((int)a1 > 767)
    {
      if ((int)a1 > 1791)
      {
        if (a1 != 1792)
        {
          if (a1 == 2560)
          {
            id v1 = @"LogMessageCollection";
            goto LABEL_174;
          }
          goto LABEL_51;
        }
        BOOL v6 = NSString;
        if (HIDWORD(a1) >= 0x3F)
        {
          objc_msgSend(NSString, "stringWithFormat:", @"(unknown: %i)", HIDWORD(a1));
          uint64_t v3 = (__CFString *)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          uint64_t v3 = off_1E53E0968[a1 >> 32];
        }
        [v6 stringWithFormat:@"UserInitiatedPlaceRequest.%@", v3];
      }
      else if (a1 == 768)
      {
        uint64_t v5 = NSString;
        if (HIDWORD(a1) >= 0x3F)
        {
          objc_msgSend(NSString, "stringWithFormat:", @"(unknown: %i)", HIDWORD(a1));
          uint64_t v3 = (__CFString *)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          uint64_t v3 = off_1E53E0968[a1 >> 32];
        }
        [v5 stringWithFormat:@"PlaceRequest.%@", v3];
      }
      else
      {
        if (a1 != 1280)
        {
LABEL_51:
          objc_msgSend(NSString, "stringWithFormat:", @"Unknown(%i.%i)", a1, HIDWORD(a1));
          id v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
          goto LABEL_174;
        }
        id v2 = NSString;
        if (HIDWORD(a1) >= 0x3F)
        {
          objc_msgSend(NSString, "stringWithFormat:", @"(unknown: %i)", HIDWORD(a1));
          uint64_t v3 = (__CFString *)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          uint64_t v3 = off_1E53E0968[a1 >> 32];
        }
        [v2 stringWithFormat:@"BackgroundPlaceRequest.%@", v3];
      }
    }
    else
    {
      if ((int)a1 > 671)
      {
        if (a1 == 672)
        {
          id v1 = @"ETA";
          goto LABEL_174;
        }
        if (a1 == 673)
        {
          id v1 = @"ETAU";
          goto LABEL_174;
        }
        goto LABEL_51;
      }
      if (a1 != 256)
      {
        if (a1 == 512)
        {
          id v1 = @"Directions";
          goto LABEL_174;
        }
        goto LABEL_51;
      }
      uint64_t v4 = NSString;
      uint64_t v3 = @"RASTER_STANDARD";
      switch(HIDWORD(a1))
      {
        case 0:
          break;
        case 1:
          uint64_t v3 = @"VECTOR_STANDARD";
          break;
        case 2:
          uint64_t v3 = @"VECTOR_TRAFFIC_SEGMENTS_FOR_RASTER";
          break;
        case 3:
          uint64_t v3 = @"VECTOR_TRAFFIC_INCIDENTS_FOR_RASTER";
          break;
        case 4:
          uint64_t v3 = @"VECTOR_TRAFFIC_SEGMENTS_AND_INCIDENTS_FOR_RASTER";
          break;
        case 5:
          uint64_t v3 = @"RASTER_STANDARD_BACKGROUND";
          break;
        case 6:
          uint64_t v3 = @"RASTER_HYBRID";
          break;
        case 7:
          uint64_t v3 = @"RASTER_SATELLITE";
          break;
        case 8:
          uint64_t v3 = @"RASTER_TERRAIN";
          break;
        case 0xB:
          uint64_t v3 = @"VECTOR_BUILDINGS";
          break;
        case 0xC:
          uint64_t v3 = @"VECTOR_TRAFFIC";
          break;
        case 0xD:
          uint64_t v3 = @"VECTOR_POI";
          break;
        case 0xE:
          uint64_t v3 = @"SPUTNIK_METADATA";
          break;
        case 0xF:
          uint64_t v3 = @"SPUTNIK_C3M";
          break;
        case 0x10:
          uint64_t v3 = @"SPUTNIK_DSM";
          break;
        case 0x11:
          uint64_t v3 = @"SPUTNIK_DSM_GLOBAL";
          break;
        case 0x12:
          uint64_t v3 = @"VECTOR_REALISTIC";
          break;
        case 0x13:
          uint64_t v3 = @"VECTOR_LEGACY_REALISTIC";
          break;
        case 0x14:
          uint64_t v3 = @"VECTOR_ROADS";
          break;
        case 0x15:
          uint64_t v3 = @"RASTER_VEGETATION";
          break;
        case 0x16:
          uint64_t v3 = @"VECTOR_TRAFFIC_SKELETON";
          break;
        case 0x17:
          uint64_t v3 = @"RASTER_COASTLINE_MASK";
          break;
        case 0x18:
          uint64_t v3 = @"RASTER_HILLSHADE";
          break;
        case 0x19:
          uint64_t v3 = @"VECTOR_TRAFFIC_WITH_GREEN";
          break;
        case 0x1A:
          uint64_t v3 = @"VECTOR_TRAFFIC_STATIC";
          break;
        case 0x1B:
          uint64_t v3 = @"RASTER_COASTLINE_DROP_MASK";
          break;
        case 0x1C:
          uint64_t v3 = @"VECTOR_TRAFFIC_SKELETON_WITH_HISTORICAL";
          break;
        case 0x1D:
          uint64_t v3 = @"VECTOR_SPEED_PROFILES";
          break;
        case 0x1E:
          uint64_t v3 = @"VECTOR_VENUES";
          break;
        case 0x1F:
          uint64_t v3 = @"RASTER_DOWN_SAMPLED";
          break;
        case 0x20:
          uint64_t v3 = @"RASTER_COLOR_BALANCED";
          break;
        case 0x21:
          uint64_t v3 = @"RASTER_SATELLITE_NIGHT";
          break;
        case 0x22:
          uint64_t v3 = @"SPUTNIK_VECTOR_BORDER";
          break;
        case 0x23:
          uint64_t v3 = @"RASTER_SATELLITE_DIGITIZE";
          break;
        case 0x24:
          uint64_t v3 = @"RASTER_HILLSHADE_PARKS";
          break;
        case 0x25:
          uint64_t v3 = @"VECTOR_TRANSIT";
          break;
        case 0x26:
          uint64_t v3 = @"RASTER_STANDARD_BASE";
          break;
        case 0x27:
          uint64_t v3 = @"RASTER_STANDARD_LABELS";
          break;
        case 0x28:
          uint64_t v3 = @"RASTER_HYBRID_ROADS";
          break;
        case 0x29:
          uint64_t v3 = @"RASTER_HYBRID_LABELS";
          break;
        case 0x2A:
          uint64_t v3 = @"FLYOVER_C3M_MESH";
          break;
        case 0x2B:
          uint64_t v3 = @"FLYOVER_C3M_JPEG_TEXTURE";
          break;
        case 0x2C:
          uint64_t v3 = @"FLYOVER_C3M_ASTC_TEXTURE";
          break;
        case 0x2D:
          uint64_t v3 = @"RASTER_SATELLITE_ASTC";
          break;
        case 0x2E:
          uint64_t v3 = @"RASTER_HYBRID_ROADS_AND_LABELS";
          break;
        case 0x2F:
          uint64_t v3 = @"VECTOR_TRANSIT_SELECTION";
          break;
        case 0x30:
          uint64_t v3 = @"VECTOR_COVERAGE";
          break;
        case 0x34:
          uint64_t v3 = @"FLYOVER_METADATA";
          break;
        case 0x35:
          uint64_t v3 = @"VECTOR_ROAD_NETWORK";
          break;
        case 0x36:
          uint64_t v3 = @"VECTOR_LAND_COVER";
          break;
        case 0x37:
          uint64_t v3 = @"VECTOR_DEBUG";
          break;
        case 0x38:
          uint64_t v3 = @"VECTOR_STREET_POI";
          break;
        case 0x39:
          uint64_t v3 = @"MUNIN_METADATA";
          break;
        case 0x3A:
          uint64_t v3 = @"VECTOR_SPR_MERCATOR";
          break;
        case 0x3B:
          uint64_t v3 = @"VECTOR_SPR_MODELS";
          break;
        case 0x3C:
          uint64_t v3 = @"VECTOR_SPR_MATERIALS";
          break;
        case 0x3D:
          uint64_t v3 = @"VECTOR_SPR_METADATA";
          break;
        case 0x3E:
          uint64_t v3 = @"VECTOR_TRACKS";
          break;
        case 0x3F:
          uint64_t v3 = @"VECTOR_RESERVED_2";
          break;
        case 0x40:
          uint64_t v3 = @"VECTOR_STREET_LANDMARKS";
          break;
        case 0x41:
          uint64_t v3 = @"COARSE_LOCATION_POLYGONS";
          break;
        case 0x42:
          uint64_t v3 = @"VECTOR_SPR_ROADS";
          break;
        case 0x43:
          uint64_t v3 = @"VECTOR_SPR_STANDARD";
          break;
        case 0x44:
          uint64_t v3 = @"VECTOR_POI_V2";
          break;
        case 0x45:
          uint64_t v3 = @"VECTOR_POLYGON_SELECTION";
          break;
        case 0x46:
          uint64_t v3 = @"VL_METADATA";
          break;
        case 0x47:
          uint64_t v3 = @"VL_DATA";
          break;
        case 0x48:
          uint64_t v3 = @"PROACTIVE_APP_CLIP";
          break;
        case 0x49:
          uint64_t v3 = @"VECTOR_BUILDINGS_V2";
          break;
        case 0x4A:
          uint64_t v3 = @"POI_BUSYNESS";
          break;
        case 0x4B:
          uint64_t v3 = @"POI_DP_BUSYNESS";
          break;
        case 0x4C:
          uint64_t v3 = @"SMART_INTERFACE_SELECTION";
          break;
        case 0x4D:
          uint64_t v3 = @"VECTOR_ASSETS";
          break;
        case 0x4E:
          uint64_t v3 = @"SPR_ASSET_METADATA";
          break;
        case 0x4F:
          uint64_t v3 = @"VECTOR_SPR_POLAR";
          break;
        case 0x50:
          uint64_t v3 = @"SMART_DATA_MODE";
          break;
        case 0x51:
          uint64_t v3 = @"CELLULAR_PERFORMANCE_SCORE";
          break;
        case 0x52:
          uint64_t v3 = @"VECTOR_SPR_MODELS_OCCLUSION";
          break;
        case 0x53:
          uint64_t v3 = @"VECTOR_TOPOGRAPHIC";
          break;
        case 0x54:
          uint64_t v3 = @"VECTOR_POI_V2_UPDATE";
          break;
        case 0x55:
          uint64_t v3 = @"VECTOR_LIVE_DATA_UPDATES";
          break;
        case 0x56:
          uint64_t v3 = @"VECTOR_TRAFFIC_V2";
          break;
        case 0x57:
          uint64_t v3 = @"VECTOR_ROAD_SELECTION";
          break;
        case 0x58:
          uint64_t v3 = @"VECTOR_REGION_METADATA";
          break;
        case 0x59:
          uint64_t v3 = @"RAY_TRACING";
          break;
        case 0x5A:
          uint64_t v3 = @"VECTOR_CONTOURS";
          break;
        case 0x5B:
          uint64_t v3 = @"RASTER_SATELLITE_POLAR";
          break;
        case 0x5C:
          uint64_t v3 = @"VMAP4_ELEVATION";
          break;
        case 0x5D:
          uint64_t v3 = @"VMAP4_ELEVATION_POLAR";
          break;
        case 0x5E:
          uint64_t v3 = @"CELLULAR_COVERAGE_PLMN";
          break;
        case 0x5F:
          uint64_t v3 = @"RASTER_SATELLITE_POLAR_NIGHT";
          break;
        case 0x60:
          uint64_t v3 = @"UNUSED_96";
          break;
        case 0x61:
          uint64_t v3 = @"UNUSED_97";
          break;
        case 0x62:
          uint64_t v3 = @"UNUSED_98";
          break;
        case 0x63:
          uint64_t v3 = @"UNUSED_99";
          break;
        case 0x64:
          uint64_t v3 = @"UNUSED_100";
          break;
        case 0x65:
          uint64_t v3 = @"UNUSED_101";
          break;
        case 0x66:
          uint64_t v3 = @"UNUSED_102";
          break;
        case 0x67:
          uint64_t v3 = @"UNUSED_103";
          break;
        case 0x68:
          uint64_t v3 = @"UNUSED_104";
          break;
        case 0x69:
          uint64_t v3 = @"UNUSED_105";
          break;
        case 0x6A:
          uint64_t v3 = @"UNUSED_106";
          break;
        case 0x6B:
          uint64_t v3 = @"UNUSED_107";
          break;
        case 0x6C:
          uint64_t v3 = @"UNUSED_108";
          break;
        case 0x6D:
          uint64_t v3 = @"UNUSED_109";
          break;
        case 0x6E:
          uint64_t v3 = @"UNUSED_110";
          break;
        case 0x6F:
          uint64_t v3 = @"UNUSED_111";
          break;
        case 0x70:
          uint64_t v3 = @"UNUSED_112";
          break;
        case 0x71:
          uint64_t v3 = @"UNUSED_113";
          break;
        case 0x72:
          uint64_t v3 = @"UNUSED_114";
          break;
        case 0x73:
          uint64_t v3 = @"UNUSED_115";
          break;
        case 0x74:
          uint64_t v3 = @"UNUSED_116";
          break;
        case 0x75:
          uint64_t v3 = @"UNUSED_117";
          break;
        case 0x76:
          uint64_t v3 = @"UNUSED_118";
          break;
        case 0x77:
          uint64_t v3 = @"UNUSED_119";
          break;
        default:
          objc_msgSend(NSString, "stringWithFormat:", @"(unknown: %i)", HIDWORD(a1));
          uint64_t v3 = (__CFString *)objc_claimAutoreleasedReturnValue();
          break;
      }
      [v4 stringWithFormat:@"Tile.%@", v3];
    }
    id v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
LABEL_174:

  return v1;
}

void sub_188ED08E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188ED0BCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_188ED1068(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188ED122C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188ED18F4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDCollectionSuggestionResultReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  BOOL v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 44);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 40)];
  char v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  int v12 = ((*(unsigned __int8 *)(a1 + 52) >> 2) & 1)
      + (*(unsigned char *)(a1 + 52) & 1)
      + ((*(unsigned __int8 *)(a1 + 52) >> 1) & 1);
  while (2)
  {
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    switch(a3[v8])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        char v7 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v16 = v12 != 0;
        char v17 = v16 & ~(_BYTE)v11 | v9;
        unsigned __int8 v18 = v16 | v11;
        char v52 = v17;
        char v53 = v18 | v17;
        if ((v18 | v7)) {
          char v19 = 0;
        }
        else {
          char v19 = a3;
        }
        char v54 = (v19 == 0) | v18;
        BOOL v55 = v18;
        __int16 v20 = (int *)MEMORY[0x1E4F940E8];
        char v21 = (int *)MEMORY[0x1E4F940C8];
        unsigned int v22 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v12;
LABEL_7:
        uint64_t v13 = v9;
LABEL_8:
        uint64_t v14 = v10;
        uint64_t v15 = v11;
LABEL_10:
        ++v8;
        uint64_t v9 = v13;
        uint64_t v10 = v14;
        uint64_t v11 = v15;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(void *)(v3 + *v20) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v21)) {
      goto LABEL_62;
    }
    char v23 = 0;
    unsigned int v24 = 0;
    unint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = *v20;
      uint64_t v27 = *(void *)(v3 + v26);
      unint64_t v28 = v27 + 1;
      if (v27 == -1 || v28 > *(void *)(v3 + *v6)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(v3 + *v22) + v27);
      *(void *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0) {
        goto LABEL_25;
      }
      v23 += 7;
      if (v24++ >= 9)
      {
        unint64_t v25 = 0;
        int v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v21) = 1;
LABEL_25:
    int v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(unsigned char *)(v3 + *v21)) {
      unint64_t v25 = 0;
    }
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_62:
      int v50 = 1;
      goto LABEL_63;
    }
    unint64_t v33 = v25 >> 3;
    BOOL v34 = v55;
    if ((v54 & 1) == 0)
    {
      int v35 = v19;
      do
      {
        int v37 = *v35++;
        int v36 = v37;
        BOOL v34 = v37 != 0;
        if (v37) {
          BOOL v38 = v36 == v33;
        }
        else {
          BOOL v38 = 1;
        }
      }
      while (!v38);
    }
    if (v33 == 2) {
      break;
    }
    if (v33 == 1)
    {
      if (v34 && (*(unsigned char *)(a1 + 52) & 2) == 0)
      {
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_83;
        }
        id v39 = objc_alloc_init(GEOPDMapsIdentifier);
        if (!GEOPDMapsIdentifierReadAllFrom((uint64_t)v39, (void *)v3)) {
          goto LABEL_82;
        }
        PBReaderRecallMark();
        -[GEOPDCollectionSuggestionResult _addNoFlagsCollectionId:](a1, v39);

        goto LABEL_60;
      }
    }
    else if ((v52 & 1) != 0 && (*(unsigned char *)(a1 + 52) & 1) == 0)
    {
      if (!*(void *)(a1 + 16))
      {
        id v41 = objc_alloc_init(MEMORY[0x1E4F940B0]);
        char v42 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v41;
      }
      int v43 = PBUnknownFieldAdd();
      char v21 = (int *)MEMORY[0x1E4F940C8];
      if (!v43)
      {
        int v50 = 0;
        uint64_t v51 = &OBJC_IVAR___GEOMapDataSubscriptionDownloadGroup__completedSubscriptions;
        goto LABEL_65;
      }
      goto LABEL_61;
    }
LABEL_56:
    char v44 = PBReaderSkipValueWithTag();
    char v21 = (int *)MEMORY[0x1E4F940C8];
    if ((v44 & 1) == 0)
    {
      int v50 = 0;
LABEL_63:
      uint64_t v51 = &OBJC_IVAR___GEOMapDataSubscriptionDownloadGroup__completedSubscriptions;
      goto LABEL_64;
    }
LABEL_61:
    if (!(v53 & 1 | (v8 != 0))) {
      goto LABEL_62;
    }
  }
  if (!v34) {
    goto LABEL_56;
  }
  if ((*(unsigned char *)(a1 + 52) & 4) != 0)
  {
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      goto LABEL_83;
    }
    v8 += *(unsigned __int8 *)(a1 + 52) << 29 >> 31;
    goto LABEL_60;
  }
  if ((PBReaderPlaceMark() & 1) == 0) {
    goto LABEL_83;
  }
  id v39 = objc_alloc_init(GEOPDExploreGuides);
  if (GEOPDExploreGuidesReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1))
  {
    PBReaderRecallMark();
    uint64_t v40 = *(void **)(a1 + 32);
    *(void *)(a1 + 32) = v39;

    --v8;
LABEL_60:
    char v21 = (int *)MEMORY[0x1E4F940C8];
    goto LABEL_61;
  }
LABEL_82:

LABEL_83:
  int v50 = 0;
  uint64_t v51 = &OBJC_IVAR___GEOMapDataSubscriptionDownloadGroup__completedSubscriptions;
  char v21 = (int *)MEMORY[0x1E4F940C8];
LABEL_64:
  if ((v52 & 1) == 0) {
    goto LABEL_66;
  }
LABEL_65:
  *(unsigned char *)(a1 + v51[255]) |= 1u;
LABEL_66:
  if (v55 || (v50 & 1) == 0)
  {
    *(unsigned char *)(a1 + v51[255]) |= 2u;
    *(unsigned char *)(a1 + v51[255]) |= 4u;
    goto LABEL_76;
  }
  if (v19)
  {
    while (1)
    {
      int v47 = *v19++;
      int v46 = v47;
      if (v47 == 1) {
        break;
      }
      if (v46 == 2)
      {
        char v45 = 4;
LABEL_72:
        *(unsigned char *)(a1 + v51[255]) |= v45;
      }
      else if (!v46)
      {
        goto LABEL_76;
      }
    }
    char v45 = 2;
    goto LABEL_72;
  }
LABEL_76:
  if (v50) {
    unint64_t v3 = *(unsigned char *)(v3 + *v21) == 0;
  }
  else {
    unint64_t v3 = 0;
  }
  if (v55)
  {
    uint64_t v48 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  return v3;
}

void sub_188ED2DD0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188ED2E9C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOMapItemHandleCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  -[GEOPDPlaceRefinementParameters readAll:](*(void *)(a1 + 24), 1);
  [*(id *)(a1 + 32) readAll:1];
  id v2 = *(void **)(a1 + 16);

  return [v2 readAll:1];
}

unint64_t GEOMapItemHandleReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 44))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOMapItemHandleReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = [v8 position];
  *(_DWORD *)(a1 + 44) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOMapItemHandleReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOMapItemHandleReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOMapItemHandleReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOMapItemHandleCallReadAllRecursiveWithoutSynchronized(a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_188ED309C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOMapItemHandleReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  BOOL v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 44);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 40)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  unsigned int v11 = ((*(unsigned __int8 *)(a1 + 56) >> 2) & 1)
      + ((*(unsigned __int8 *)(a1 + 56) >> 3) & 1)
      + ((*(unsigned __int8 *)(a1 + 56) >> 1) & 1);
  while (2)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    switch(a3[v7])
    {
      case -3:
        char v8 = 1;
        goto LABEL_6;
      case -2:
        uint64_t v12 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        int v14 = v10 | (v11 > 1);
        if ((v14 | v8)) {
          uint64_t v15 = 0;
        }
        else {
          uint64_t v15 = a3;
        }
        LODWORD(v16) = v14;
        char v17 = (int *)MEMORY[0x1E4F940E8];
        unsigned __int8 v18 = (int *)MEMORY[0x1E4F940C8];
        char v52 = (v15 == 0) | v14;
        char v19 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v11;
LABEL_6:
        uint64_t v12 = v9;
        uint64_t v13 = v10;
LABEL_8:
        ++v7;
        uint64_t v9 = v12;
        uint64_t v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v17) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v18)) {
      goto LABEL_78;
    }
    char v20 = 0;
    unsigned int v21 = 0;
    unint64_t v22 = 0;
    while (1)
    {
      uint64_t v23 = *v17;
      unint64_t v24 = *(void *)(v3 + v23);
      if (v24 == -1 || v24 >= *(void *)(v3 + *v6)) {
        break;
      }
      char v25 = *(unsigned char *)(*(void *)(v3 + *v19) + v24);
      *(void *)(v3 + v23) = v24 + 1;
      v22 |= (unint64_t)(v25 & 0x7F) << v20;
      if ((v25 & 0x80) == 0) {
        goto LABEL_23;
      }
      v20 += 7;
      BOOL v26 = v21++ >= 9;
      if (v26)
      {
        unint64_t v22 = 0;
        int v27 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_25;
      }
    }
    *(unsigned char *)(v3 + *v18) = 1;
LABEL_23:
    int v27 = *(unsigned __int8 *)(v3 + *v18);
    if (*(unsigned char *)(v3 + *v18)) {
      unint64_t v22 = 0;
    }
LABEL_25:
    if (v27 || (v22 & 7) == 4)
    {
LABEL_78:
      if (v16)
      {
        char v46 = 1;
        goto LABEL_89;
      }
      if (v15)
      {
        while (1)
        {
          int v47 = *v15++;
          char v48 = 4;
          switch(v47)
          {
            case 0:
              goto LABEL_90;
            case 2:
              goto LABEL_84;
            case 3:
              char v48 = 8;
              goto LABEL_84;
            case 5:
              char v48 = 2;
LABEL_84:
              *(unsigned char *)(a1 + 56) |= v48;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_90;
    }
    unint64_t v29 = v22 >> 3;
    BOOL v30 = (char)v16;
    if ((v52 & 1) == 0)
    {
      int v31 = v15;
      do
      {
        int v33 = *v31++;
        int v32 = v33;
        BOOL v30 = v33 != 0;
        if (v33) {
          BOOL v34 = v32 == v29;
        }
        else {
          BOOL v34 = 1;
        }
      }
      while (!v34);
    }
    switch((int)v29)
    {
      case 1:
        if ((v8 & 1) == 0) {
          goto LABEL_63;
        }
        char v35 = 0;
        unsigned int v36 = 0;
        uint64_t v37 = 0;
        *(unsigned char *)(a1 + 56) |= 1u;
        while (1)
        {
          uint64_t v38 = *v17;
          unint64_t v39 = *(void *)(v3 + v38);
          if (v39 == -1 || v39 >= *(void *)(v3 + *v6)) {
            break;
          }
          char v40 = *(unsigned char *)(*(void *)(v3 + *v19) + v39);
          *(void *)(v3 + v38) = v39 + 1;
          v37 |= (unint64_t)(v40 & 0x7F) << v35;
          if ((v40 & 0x80) == 0) {
            goto LABEL_66;
          }
          v35 += 7;
          BOOL v26 = v36++ >= 9;
          if (v26)
          {
            LODWORD(v37) = 0;
            goto LABEL_68;
          }
        }
        *(unsigned char *)(v3 + *v18) = 1;
LABEL_66:
        if (*(unsigned char *)(v3 + *v18)) {
          LODWORD(v37) = 0;
        }
LABEL_68:
        *(_DWORD *)(a1 + 52) = v37;
        goto LABEL_77;
      case 2:
        if (!v30) {
          goto LABEL_63;
        }
        if ((*(unsigned char *)(a1 + 56) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_86;
          }
          char v45 = 32 * *(unsigned char *)(a1 + 56);
          goto LABEL_75;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_86;
        }
        int v51 = (int)v16;
        BOOL v16 = objc_alloc_init(GEOPDPlaceRefinementParameters);
        if (!GEOPDPlaceRefinementParametersReadAllFrom((uint64_t)v16, (void *)v3, v9 & 1)) {
          goto LABEL_87;
        }
        PBReaderRecallMark();
        uint64_t v41 = 24;
        goto LABEL_62;
      case 3:
        if (!v30) {
          goto LABEL_63;
        }
        if ((*(unsigned char *)(a1 + 56) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_86;
          }
          char v45 = 16 * *(unsigned char *)(a1 + 56);
          goto LABEL_75;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_86;
        }
        int v51 = (int)v16;
        BOOL v16 = objc_alloc_init(GEOMapItemInitialRequestData);
        if (!GEOMapItemInitialRequestDataReadAllFrom((uint64_t)v16, (void *)v3, v9 & 1)) {
          goto LABEL_87;
        }
        PBReaderRecallMark();
        uint64_t v41 = 32;
        goto LABEL_62;
      case 5:
        if (!v30)
        {
LABEL_63:
          char v44 = PBReaderSkipValueWithTag();
          unsigned __int8 v18 = (int *)MEMORY[0x1E4F940C8];
          if ((v44 & 1) == 0)
          {
LABEL_85:
            char v46 = 0;
            goto LABEL_89;
          }
LABEL_77:
          if (!(v16 & 1 | (v7 != 0))) {
            goto LABEL_78;
          }
          continue;
        }
        if ((*(unsigned char *)(a1 + 56) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_86:
            char v46 = 0;
            goto LABEL_88;
          }
          char v45 = *(unsigned char *)(a1 + 56) << 6;
LABEL_75:
          v7 += v45 >> 7;
          goto LABEL_76;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_86;
        }
        int v51 = (int)v16;
        BOOL v16 = objc_alloc_init(GEOMapItemClientAttributes);
        if (GEOMapItemClientAttributesReadAllFrom((uint64_t)v16, (void *)v3, v9 & 1))
        {
          PBReaderRecallMark();
          uint64_t v41 = 16;
LABEL_62:
          int v43 = *(void **)(a1 + v41);
          *(void *)(a1 + v41) = v16;

          --v7;
          LODWORD(v16) = v51;
LABEL_76:
          unsigned __int8 v18 = (int *)MEMORY[0x1E4F940C8];
          goto LABEL_77;
        }
LABEL_87:

        char v46 = 0;
        LOBYTE(v16) = v51;
LABEL_88:
        unsigned __int8 v18 = (int *)MEMORY[0x1E4F940C8];
LABEL_89:
        *(unsigned char *)(a1 + 56) |= 4u;
        *(unsigned char *)(a1 + 56) |= 8u;
        *(unsigned char *)(a1 + 56) |= 2u;
        if (v46)
        {
LABEL_90:
          unint64_t v3 = *(unsigned char *)(v3 + *v18) == 0;
          if (v16) {
            goto LABEL_91;
          }
        }
        else
        {
          unint64_t v3 = 0;
          if (v16)
          {
LABEL_91:
            char v49 = *(void **)(a1 + 8);
            *(void *)(a1 + 8) = 0;
          }
        }
        return v3;
      default:
        int v42 = PBReaderSkipValueWithTag();
        unsigned __int8 v18 = (int *)MEMORY[0x1E4F940C8];
        if (!v42) {
          goto LABEL_85;
        }
        goto LABEL_77;
    }
  }
}

unint64_t GEOPDPlaceRefinementParametersReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 84))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOPDPlaceRefinementParametersReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 88));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 80) = [v8 position];
  *(_DWORD *)(a1 + 84) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOPDPlaceRefinementParametersReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOPDPlaceRefinementParametersReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOPDPlaceRefinementParametersReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
  {
    [*(id *)(a1 + 48) readAll:1];
    [*(id *)(a1 + 56) readAll:1];
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 88));
  return Specified;
}

void sub_188ED3898(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDPlaceRefinementParametersReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 88));
  BOOL v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 84);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 80)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unsigned int v12 = (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int16 *)(a1 + 108)), (uint16x4_t)0xFFF8FFF5FFF7FFFALL), (int8x8_t)0x1000100010001))+ ((*(_WORD *)(a1 + 108) >> 7) & 1)+ ((*(_WORD *)(a1 + 108) >> 10) & 1)+ ((*(_WORD *)(a1 + 108) >> 5) & 1));
  while (2)
  {
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v16 = v12 > 3;
        char v17 = v16 & ~(_BYTE)v11 | v9;
        unsigned __int8 v18 = v16 | v11;
        char v90 = v17;
        char v91 = v18 | v17;
        if ((v18 | v8)) {
          char v19 = 0;
        }
        else {
          char v19 = a3;
        }
        char v92 = (v19 == 0) | v18;
        BOOL v93 = v18;
        char v20 = (int *)MEMORY[0x1E4F940E8];
        unsigned int v21 = (int *)MEMORY[0x1E4F940C8];
        unint64_t v22 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v12;
LABEL_7:
        uint64_t v13 = v9;
LABEL_8:
        uint64_t v14 = v10;
        uint64_t v15 = v11;
LABEL_10:
        ++v7;
        uint64_t v9 = v13;
        uint64_t v10 = v14;
        uint64_t v11 = v15;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v20) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v21)) {
      goto LABEL_150;
    }
    char v23 = 0;
    unsigned int v24 = 0;
    unint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = *v20;
      uint64_t v27 = *(void *)(v3 + v26);
      unint64_t v28 = v27 + 1;
      if (v27 == -1 || v28 > *(void *)(v3 + *v6)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(v3 + *v22) + v27);
      *(void *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0) {
        goto LABEL_25;
      }
      v23 += 7;
      BOOL v30 = v24++ >= 9;
      if (v30)
      {
        unint64_t v25 = 0;
        int v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v21) = 1;
LABEL_25:
    int v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(unsigned char *)(v3 + *v21)) {
      unint64_t v25 = 0;
    }
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_150:
      int v88 = 1;
      goto LABEL_151;
    }
    unint64_t v33 = v25 >> 3;
    BOOL v34 = v93;
    if ((v92 & 1) == 0)
    {
      char v35 = v19;
      do
      {
        int v37 = *v35++;
        int v36 = v37;
        BOOL v34 = v37 != 0;
        if (v37) {
          BOOL v38 = v36 == v33;
        }
        else {
          BOOL v38 = 1;
        }
      }
      while (!v38);
    }
    switch((int)v33)
    {
      case 1:
        if ((v8 & 1) == 0) {
          goto LABEL_114;
        }
        char v39 = 0;
        unsigned int v40 = 0;
        uint64_t v41 = 0;
        *(_WORD *)(a1 + 108) |= 8u;
        while (1)
        {
          uint64_t v42 = *v20;
          uint64_t v43 = *(void *)(v3 + v42);
          unint64_t v44 = v43 + 1;
          if (v43 == -1 || v44 > *(void *)(v3 + *v6)) {
            break;
          }
          char v45 = *(unsigned char *)(*(void *)(v3 + *v22) + v43);
          *(void *)(v3 + v42) = v44;
          v41 |= (unint64_t)(v45 & 0x7F) << v39;
          if ((v45 & 0x80) == 0) {
            goto LABEL_117;
          }
          v39 += 7;
          BOOL v30 = v40++ >= 9;
          if (v30)
          {
            LODWORD(v41) = 0;
            goto LABEL_119;
          }
        }
        *(unsigned char *)(v3 + *v21) = 1;
LABEL_117:
        if (*(unsigned char *)(v3 + *v21)) {
          LODWORD(v41) = 0;
        }
LABEL_119:
        uint64_t v82 = 100;
        goto LABEL_132;
      case 2:
        if ((v8 & 1) == 0) {
          goto LABEL_114;
        }
        char v49 = 0;
        unsigned int v50 = 0;
        uint64_t v51 = 0;
        *(_WORD *)(a1 + 108) |= 1u;
        while (2)
        {
          uint64_t v52 = *v20;
          uint64_t v53 = *(void *)(v3 + v52);
          unint64_t v54 = v53 + 1;
          if (v53 == -1 || v54 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v21) = 1;
          }
          else
          {
            char v55 = *(unsigned char *)(*(void *)(v3 + *v22) + v53);
            *(void *)(v3 + v52) = v54;
            v51 |= (unint64_t)(v55 & 0x7F) << v49;
            if (v55 < 0)
            {
              v49 += 7;
              BOOL v30 = v50++ >= 9;
              if (v30)
              {
                uint64_t v51 = 0;
                goto LABEL_123;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v21)) {
          uint64_t v51 = 0;
        }
LABEL_123:
        *(void *)(a1 + 64) = v51;
        goto LABEL_149;
      case 3:
        if (!v34) {
          goto LABEL_114;
        }
        if ((*(_WORD *)(a1 + 108) & 0x200) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_171;
          }
          __int16 v83 = *(_WORD *)(a1 + 108) << 6;
          goto LABEL_147;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_171;
        }
        unsigned int v56 = objc_alloc_init(GEOLatLng);
        if (!GEOLatLngReadAllFrom((uint64_t)v56, (void *)v3)) {
          goto LABEL_170;
        }
        PBReaderRecallMark();
        uint64_t v57 = 48;
        goto LABEL_112;
      case 4:
        if (!v34) {
          goto LABEL_114;
        }
        if ((*(_WORD *)(a1 + 108) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_171;
          }
          __int16 v83 = *(_WORD *)(a1 + 108) << 9;
          goto LABEL_147;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_171;
        }
        unsigned int v56 = objc_alloc_init(GEOStructuredAddress);
        if (!GEOStructuredAddressReadAllFrom(v56, (void *)v3)) {
          goto LABEL_170;
        }
        PBReaderRecallMark();
        uint64_t v57 = 24;
        goto LABEL_112;
      case 5:
        if (!v34) {
          goto LABEL_114;
        }
        if ((*(_WORD *)(a1 + 108) & 0x800) == 0)
        {
          uint64_t v58 = PBReaderReadString();
          uint64_t v59 = 72;
          goto LABEL_98;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_171;
        }
        __int16 v83 = 16 * *(_WORD *)(a1 + 108);
        goto LABEL_147;
      case 6:
        if (!v34 || (*(_WORD *)(a1 + 108) & 0x100) != 0) {
          goto LABEL_114;
        }
        char v60 = PBReaderReadString();
        if (v60) {
          -[GEOPDPlaceRefinementParameters _addNoFlagsFormattedAddressLineHint:](a1, v60);
        }

        goto LABEL_148;
      case 7:
        if ((v8 & 1) == 0) {
          goto LABEL_114;
        }
        char v61 = 0;
        unsigned int v62 = 0;
        uint64_t v41 = 0;
        *(_WORD *)(a1 + 108) |= 4u;
        while (2)
        {
          uint64_t v63 = *v20;
          uint64_t v64 = *(void *)(v3 + v63);
          unint64_t v65 = v64 + 1;
          if (v64 == -1 || v65 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v21) = 1;
          }
          else
          {
            char v66 = *(unsigned char *)(*(void *)(v3 + *v22) + v64);
            *(void *)(v3 + v63) = v65;
            v41 |= (unint64_t)(v66 & 0x7F) << v61;
            if (v66 < 0)
            {
              v61 += 7;
              BOOL v30 = v62++ >= 9;
              if (v30)
              {
                LODWORD(v41) = 0;
                goto LABEL_127;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v21)) {
          LODWORD(v41) = 0;
        }
LABEL_127:
        uint64_t v82 = 96;
        goto LABEL_132;
      case 8:
        if ((v8 & 1) == 0) {
          goto LABEL_114;
        }
        char v67 = 0;
        unsigned int v68 = 0;
        uint64_t v41 = 0;
        *(_WORD *)(a1 + 108) |= 2u;
        while (2)
        {
          uint64_t v69 = *v20;
          uint64_t v70 = *(void *)(v3 + v69);
          unint64_t v71 = v70 + 1;
          if (v70 == -1 || v71 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v21) = 1;
          }
          else
          {
            char v72 = *(unsigned char *)(*(void *)(v3 + *v22) + v70);
            *(void *)(v3 + v69) = v71;
            v41 |= (unint64_t)(v72 & 0x7F) << v67;
            if (v72 < 0)
            {
              v67 += 7;
              BOOL v30 = v68++ >= 9;
              if (v30)
              {
                LODWORD(v41) = 0;
                goto LABEL_131;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v21)) {
          LODWORD(v41) = 0;
        }
LABEL_131:
        uint64_t v82 = 92;
LABEL_132:
        *(_DWORD *)(a1 + v82) = v41;
        goto LABEL_149;
      case 9:
        if (!v34) {
          goto LABEL_114;
        }
        if ((*(_WORD *)(a1 + 108) & 0x80) == 0)
        {
          uint64_t v58 = PBReaderReadData();
          uint64_t v59 = 32;
LABEL_98:
          char v73 = *(void **)(a1 + v59);
          *(void *)(a1 + v59) = v58;
          goto LABEL_113;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_171;
        }
        __int16 v83 = *(_WORD *)(a1 + 108) << 8;
        goto LABEL_147;
      case 10:
        if ((v8 & 1) == 0) {
          goto LABEL_114;
        }
        char v74 = 0;
        unsigned int v75 = 0;
        uint64_t v76 = 0;
        *(_WORD *)(a1 + 108) |= 0x10u;
        while (2)
        {
          uint64_t v77 = *v20;
          uint64_t v78 = *(void *)(v3 + v77);
          unint64_t v79 = v78 + 1;
          if (v78 == -1 || v79 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v21) = 1;
          }
          else
          {
            char v80 = *(unsigned char *)(*(void *)(v3 + *v22) + v78);
            *(void *)(v3 + v77) = v79;
            v76 |= (unint64_t)(v80 & 0x7F) << v74;
            if (v80 < 0)
            {
              v74 += 7;
              BOOL v30 = v75++ >= 9;
              if (v30)
              {
                uint64_t v76 = 0;
                goto LABEL_136;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v21)) {
          uint64_t v76 = 0;
        }
LABEL_136:
        *(unsigned char *)(a1 + 104) = v76 != 0;
        goto LABEL_149;
      case 11:
        if (!v34) {
          goto LABEL_114;
        }
        if ((*(_WORD *)(a1 + 108) & 0x400) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_171;
          }
          __int16 v83 = 32 * *(_WORD *)(a1 + 108);
LABEL_147:
          v7 += v83 >> 15;
LABEL_148:
          unsigned int v21 = (int *)MEMORY[0x1E4F940C8];
          unint64_t v22 = (int *)MEMORY[0x1E4F940B8];
          goto LABEL_149;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_171;
        }
        unsigned int v56 = objc_alloc_init(GEOPDMapsIdentifier);
        if (GEOPDMapsIdentifierReadAllFrom((uint64_t)v56, (void *)v3))
        {
          PBReaderRecallMark();
          uint64_t v57 = 56;
LABEL_112:
          char v73 = *(void **)(a1 + v57);
          *(void *)(a1 + v57) = v56;
LABEL_113:

          --v7;
          goto LABEL_148;
        }
LABEL_170:

LABEL_171:
        int v88 = 0;
        char v89 = &OBJC_IVAR___GEOMapDataSubscriptionDownloadGroup__completedSubscriptions;
        unsigned int v21 = (int *)MEMORY[0x1E4F940C8];
LABEL_152:
        if (v90) {
LABEL_153:
        }
          *(_WORD *)(a1 + v89[418]) |= 0x20u;
        if (v93 || (v88 & 1) == 0)
        {
          *(_WORD *)(a1 + v89[418]) |= 0x200u;
          *(_WORD *)(a1 + v89[418]) |= 0x40u;
          *(_WORD *)(a1 + v89[418]) |= 0x800u;
          *(_WORD *)(a1 + v89[418]) |= 0x100u;
          *(_WORD *)(a1 + v89[418]) |= 0x80u;
          *(_WORD *)(a1 + v89[418]) |= 0x400u;
        }
        else if (v19)
        {
          while (1)
          {
            int v84 = *v19++;
            __int16 v85 = 512;
            switch(v84)
            {
              case 0:
                goto LABEL_164;
              case 3:
                goto LABEL_163;
              case 4:
                __int16 v85 = 64;
                goto LABEL_163;
              case 5:
                __int16 v85 = 2048;
                goto LABEL_163;
              case 6:
                __int16 v85 = 256;
                goto LABEL_163;
              case 9:
                __int16 v85 = 128;
                goto LABEL_163;
              case 11:
                __int16 v85 = 1024;
LABEL_163:
                *(_WORD *)(a1 + v89[418]) |= v85;
                break;
              default:
                continue;
            }
          }
        }
LABEL_164:
        if (v88) {
          unint64_t v3 = *(unsigned char *)(v3 + *v21) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v93)
        {
          BOOL v86 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      default:
        if ((v90 & 1) == 0 || (*(_WORD *)(a1 + 108) & 0x20) != 0)
        {
LABEL_114:
          char v81 = PBReaderSkipValueWithTag();
          unint64_t v22 = (int *)MEMORY[0x1E4F940B8];
          unsigned int v21 = (int *)MEMORY[0x1E4F940C8];
          if ((v81 & 1) == 0)
          {
            int v88 = 0;
LABEL_151:
            char v89 = &OBJC_IVAR___GEOMapDataSubscriptionDownloadGroup__completedSubscriptions;
            goto LABEL_152;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v46 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            int v47 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v46;
          }
          int v48 = PBUnknownFieldAdd();
          unsigned int v21 = (int *)MEMORY[0x1E4F940C8];
          unint64_t v22 = (int *)MEMORY[0x1E4F940B8];
          if (!v48)
          {
            int v88 = 0;
            char v89 = &OBJC_IVAR___GEOMapDataSubscriptionDownloadGroup__completedSubscriptions;
            goto LABEL_153;
          }
        }
LABEL_149:
        if (!(v91 & 1 | (v7 != 0))) {
          goto LABEL_150;
        }
        continue;
    }
  }
}

BOOL GEOPDMapsIdentifierReadAllFrom(uint64_t a1, void *a2)
{
  unint64_t v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    uint64_t v4 = (int *)MEMORY[0x1E4F940E8];
    uint64_t v5 = (int *)MEMORY[0x1E4F940E0];
    BOOL v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v3[*v6]) {
          break;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          if (v9++ >= 9)
          {
            unint64_t v10 = 0;
            int v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v16 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v16 || (v10 & 7) == 4) {
          break;
        }
        if ((v10 >> 3) == 1)
        {
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_29;
          }
          unsigned __int8 v18 = objc_alloc_init(GEOPDShardedId);
          if (!GEOPDShardedIdReadAllFrom((uint64_t)v18, v3))
          {

            goto LABEL_29;
          }
          PBReaderRecallMark();
          char v19 = *(void **)(a1 + 16);
          *(void *)(a1 + 16) = v18;
        }
        else
        {
          if (!*(void *)(a1 + 8))
          {
            id v20 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            unsigned int v21 = *(void **)(a1 + 8);
            *(void *)(a1 + 8) = v20;
          }
          if (!PBUnknownFieldAdd()) {
            goto LABEL_29;
          }
        }
      }
      while (*(void *)&v3[*v4] < *(void *)&v3[*v5]);
    }
    BOOL v22 = v3[*v6] == 0;
  }
  else
  {
LABEL_29:
    BOOL v22 = 0;
  }
  objc_sync_exit(v3);

  return v22;
}

void sub_188ED4644(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDShardedIdReadAllFrom(uint64_t a1, void *a2)
{
  unint64_t v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    uint64_t v4 = (int *)MEMORY[0x1E4F940E8];
    uint64_t v5 = (int *)MEMORY[0x1E4F940E0];
    BOOL v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
      while (!v3[*v6])
      {
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          BOOL v15 = v9++ >= 9;
          if (v15)
          {
            unint64_t v10 = 0;
            int v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v16 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v16 || (v10 & 7) == 4) {
          break;
        }
        unint64_t v18 = v10 >> 3;
        switch((v10 >> 3))
        {
          case 1u:
            char v19 = 0;
            unsigned int v20 = 0;
            uint64_t v21 = 0;
            *(unsigned char *)(a1 + 56) |= 2u;
            while (1)
            {
              uint64_t v22 = *v4;
              uint64_t v23 = *(void *)&v3[v22];
              unint64_t v24 = v23 + 1;
              if (v23 == -1 || v24 > *(void *)&v3[*v5]) {
                break;
              }
              char v25 = *(unsigned char *)(*(void *)&v3[*v7] + v23);
              *(void *)&v3[v22] = v24;
              v21 |= (unint64_t)(v25 & 0x7F) << v19;
              if ((v25 & 0x80) == 0) {
                goto LABEL_72;
              }
              v19 += 7;
              BOOL v15 = v20++ >= 9;
              if (v15)
              {
                uint64_t v21 = 0;
                goto LABEL_74;
              }
            }
            v3[*v6] = 1;
LABEL_72:
            if (v3[*v6]) {
              uint64_t v21 = 0;
            }
LABEL_74:
            uint64_t v62 = 32;
            goto LABEL_87;
          case 2u:
            if ((PBReaderPlaceMark() & 1) == 0) {
              goto LABEL_100;
            }
            unint64_t v33 = objc_alloc_init(GEOLatLng);
            if (!GEOLatLngReadAllFrom((uint64_t)v33, v3))
            {

              goto LABEL_100;
            }
            PBReaderRecallMark();
            BOOL v34 = *(void **)(a1 + 24);
            *(void *)(a1 + 24) = v33;

LABEL_97:
            if (*(void *)&v3[*v4] >= *(void *)&v3[*v5]) {
              goto LABEL_98;
            }
            break;
          case 3u:
            char v35 = 0;
            unsigned int v36 = 0;
            uint64_t v37 = 0;
            *(unsigned char *)(a1 + 56) |= 8u;
            while (2)
            {
              uint64_t v38 = *v4;
              uint64_t v39 = *(void *)&v3[v38];
              unint64_t v40 = v39 + 1;
              if (v39 == -1 || v40 > *(void *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                char v41 = *(unsigned char *)(*(void *)&v3[*v7] + v39);
                *(void *)&v3[v38] = v40;
                v37 |= (unint64_t)(v41 & 0x7F) << v35;
                if (v41 < 0)
                {
                  v35 += 7;
                  BOOL v15 = v36++ >= 9;
                  if (v15)
                  {
                    LODWORD(v37) = 0;
                    goto LABEL_82;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6]) {
              LODWORD(v37) = 0;
            }
LABEL_82:
            uint64_t v63 = 44;
            goto LABEL_96;
          case 4u:
            char v42 = 0;
            unsigned int v43 = 0;
            uint64_t v21 = 0;
            *(unsigned char *)(a1 + 56) |= 1u;
            while (2)
            {
              uint64_t v44 = *v4;
              uint64_t v45 = *(void *)&v3[v44];
              unint64_t v46 = v45 + 1;
              if (v45 == -1 || v46 > *(void *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                char v47 = *(unsigned char *)(*(void *)&v3[*v7] + v45);
                *(void *)&v3[v44] = v46;
                v21 |= (unint64_t)(v47 & 0x7F) << v42;
                if (v47 < 0)
                {
                  v42 += 7;
                  BOOL v15 = v43++ >= 9;
                  if (v15)
                  {
                    uint64_t v21 = 0;
                    goto LABEL_86;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6]) {
              uint64_t v21 = 0;
            }
LABEL_86:
            uint64_t v62 = 16;
LABEL_87:
            *(void *)(a1 + v62) = v21;
            goto LABEL_97;
          case 5u:
            char v48 = 0;
            unsigned int v49 = 0;
            uint64_t v37 = 0;
            *(unsigned char *)(a1 + 56) |= 0x10u;
            while (2)
            {
              uint64_t v50 = *v4;
              uint64_t v51 = *(void *)&v3[v50];
              unint64_t v52 = v51 + 1;
              if (v51 == -1 || v52 > *(void *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                char v53 = *(unsigned char *)(*(void *)&v3[*v7] + v51);
                *(void *)&v3[v50] = v52;
                v37 |= (unint64_t)(v53 & 0x7F) << v48;
                if (v53 < 0)
                {
                  v48 += 7;
                  BOOL v15 = v49++ >= 9;
                  if (v15)
                  {
                    LODWORD(v37) = 0;
                    goto LABEL_91;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6]) {
              LODWORD(v37) = 0;
            }
LABEL_91:
            uint64_t v63 = 48;
            goto LABEL_96;
          default:
            if (v18 == 50)
            {
              char v54 = 0;
              unsigned int v55 = 0;
              uint64_t v37 = 0;
              *(unsigned char *)(a1 + 56) |= 4u;
              while (1)
              {
                uint64_t v56 = *v4;
                uint64_t v57 = *(void *)&v3[v56];
                unint64_t v58 = v57 + 1;
                if (v57 == -1 || v58 > *(void *)&v3[*v5]) {
                  break;
                }
                char v59 = *(unsigned char *)(*(void *)&v3[*v7] + v57);
                *(void *)&v3[v56] = v58;
                v37 |= (unint64_t)(v59 & 0x7F) << v54;
                if ((v59 & 0x80) == 0) {
                  goto LABEL_93;
                }
                v54 += 7;
                BOOL v15 = v55++ >= 9;
                if (v15)
                {
                  LODWORD(v37) = 0;
                  goto LABEL_95;
                }
              }
              v3[*v6] = 1;
LABEL_93:
              if (v3[*v6]) {
                LODWORD(v37) = 0;
              }
LABEL_95:
              uint64_t v63 = 40;
LABEL_96:
              *(_DWORD *)(a1 + v63) = v37;
            }
            else if (v18 == 51)
            {
              char v26 = 0;
              unsigned int v27 = 0;
              uint64_t v28 = 0;
              *(unsigned char *)(a1 + 56) |= 0x20u;
              while (1)
              {
                uint64_t v29 = *v4;
                uint64_t v30 = *(void *)&v3[v29];
                unint64_t v31 = v30 + 1;
                if (v30 == -1 || v31 > *(void *)&v3[*v5]) {
                  break;
                }
                char v32 = *(unsigned char *)(*(void *)&v3[*v7] + v30);
                *(void *)&v3[v29] = v31;
                v28 |= (unint64_t)(v32 & 0x7F) << v26;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_76;
                }
                v26 += 7;
                BOOL v15 = v27++ >= 9;
                if (v15)
                {
                  uint64_t v28 = 0;
                  goto LABEL_78;
                }
              }
              v3[*v6] = 1;
LABEL_76:
              if (v3[*v6]) {
                uint64_t v28 = 0;
              }
LABEL_78:
              *(unsigned char *)(a1 + 52) = v28 != 0;
            }
            else
            {
              if (!*(void *)(a1 + 8))
              {
                id v60 = objc_alloc_init(MEMORY[0x1E4F940B0]);
                char v61 = *(void **)(a1 + 8);
                *(void *)(a1 + 8) = v60;
              }
              if (!PBUnknownFieldAdd()) {
                goto LABEL_100;
              }
            }
            goto LABEL_97;
        }
      }
    }
LABEL_98:
    BOOL v64 = v3[*v6] == 0;
  }
  else
  {
LABEL_100:
    BOOL v64 = 0;
  }
  objc_sync_exit(v3);

  return v64;
}

void sub_188ED4C94(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void __GEOGetGEOFilePathsLog_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.GeoServices", "GEOFilePaths");
  id v1 = (void *)qword_1EB29FD30;
  qword_1EB29FD30 = (uint64_t)v0;
}

void __GEOGetGEOFilePathsLog_block_invoke_0()
{
  os_log_t v0 = os_log_create("com.apple.GeoServices", "GEOFilePaths");
  id v1 = (void *)_MergedGlobals_290;
  _MergedGlobals_290 = (uint64_t)v0;
}

void sub_188ED60F0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188ED63FC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188ED6C9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

long double GEOCalculateDistanceRadius(double a1, double a2, double a3, double a4, double a5)
{
  double v8 = (a4 - a2) * 0.0174532925;
  long double v9 = sin((a3 - a1) * 0.0174532925 * 0.5);
  long double v10 = v9 * v9;
  double v11 = cos(a1 * 0.0174532925);
  long double v12 = v11 * cos(a3 * 0.0174532925);
  long double v13 = sin(v8 * 0.5);
  long double v14 = atan2(sqrt(v10 + v12 * (v13 * v13)), sqrt(1.0 - (v10 + v12 * (v13 * v13))));
  return (v14 + v14) * a5;
}

unint64_t GEOPDPopularNearbySearchParametersReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  BOOL v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 44);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 40)];
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  int v12 = ((*(unsigned __int8 *)(a1 + 60) >> 4) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 3) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 2) & 1);
  while (2)
  {
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    switch(a3[v10])
    {
      case -4:
        ++v12;
        uint64_t v13 = v7;
        goto LABEL_8;
      case -3:
        char v9 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v13 = v7;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v16 = v12 != 0;
        char v17 = v16 & ~(_BYTE)v11 | v8;
        unsigned __int8 v18 = v16 | v11;
        char v68 = v17;
        char v69 = v9;
        char v70 = v18 | v17;
        if ((v18 | v9)) {
          char v19 = 0;
        }
        else {
          char v19 = a3;
        }
        unsigned int v20 = (int *)MEMORY[0x1E4F940E8];
        uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
        char v71 = (v19 == 0) | v18;
        BOOL v72 = v18;
        uint64_t v22 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v12;
LABEL_7:
        uint64_t v13 = v7;
        uint64_t v14 = v8;
LABEL_8:
        uint64_t v15 = v11;
LABEL_10:
        ++v10;
        uint64_t v7 = v13;
        uint64_t v8 = v14;
        uint64_t v11 = v15;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v20) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v21)) {
      goto LABEL_88;
    }
    char v23 = 0;
    unsigned int v24 = 0;
    unint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = *v20;
      uint64_t v27 = *(void *)(v3 + v26);
      unint64_t v28 = v27 + 1;
      if (v27 == -1 || v28 > *(void *)(v3 + *v6)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(v3 + *v22) + v27);
      *(void *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0) {
        goto LABEL_25;
      }
      v23 += 7;
      BOOL v30 = v24++ >= 9;
      if (v30)
      {
        unint64_t v25 = 0;
        int v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v21) = 1;
LABEL_25:
    int v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(unsigned char *)(v3 + *v21)) {
      unint64_t v25 = 0;
    }
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_88:
      int v66 = 1;
      goto LABEL_89;
    }
    unint64_t v33 = v25 >> 3;
    BOOL v34 = v72;
    if ((v71 & 1) == 0)
    {
      char v35 = v19;
      do
      {
        int v37 = *v35++;
        int v36 = v37;
        BOOL v34 = v37 != 0;
        if (v37) {
          BOOL v38 = v36 == v33;
        }
        else {
          BOOL v38 = 1;
        }
      }
      while (!v38);
    }
    switch((int)v33)
    {
      case 1:
        if ((v69 & 1) == 0) {
          goto LABEL_70;
        }
        char v39 = 0;
        unsigned int v40 = 0;
        uint64_t v41 = 0;
        *(unsigned char *)(a1 + 60) |= 1u;
        while (1)
        {
          uint64_t v42 = *v20;
          uint64_t v43 = *(void *)(v3 + v42);
          unint64_t v44 = v43 + 1;
          if (v43 == -1 || v44 > *(void *)(v3 + *v6)) {
            break;
          }
          char v45 = *(unsigned char *)(*(void *)(v3 + *v22) + v43);
          *(void *)(v3 + v42) = v44;
          v41 |= (unint64_t)(v45 & 0x7F) << v39;
          if ((v45 & 0x80) == 0) {
            goto LABEL_73;
          }
          v39 += 7;
          BOOL v30 = v40++ >= 9;
          if (v30)
          {
            LODWORD(v41) = 0;
            goto LABEL_75;
          }
        }
        *(unsigned char *)(v3 + *v21) = 1;
LABEL_73:
        if (*(unsigned char *)(v3 + *v21)) {
          LODWORD(v41) = 0;
        }
LABEL_75:
        uint64_t v59 = 52;
        goto LABEL_80;
      case 2:
        if (!v34) {
          goto LABEL_70;
        }
        if ((*(unsigned char *)(a1 + 60) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_108;
          }
          char v60 = 8 * *(unsigned char *)(a1 + 60);
LABEL_85:
          v10 += v60 >> 7;
          goto LABEL_86;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_108;
        }
        unsigned int v49 = objc_alloc_init(GEOPDViewportInfo);
        if (GEOPDViewportInfoReadAllFrom((uint64_t)v49, (void *)v3))
        {
          PBReaderRecallMark();
          uint64_t v50 = *(void **)(a1 + 32);
          *(void *)(a1 + 32) = v49;
LABEL_61:

          --v10;
LABEL_86:
          uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
LABEL_87:
          if (!(v70 & 1 | (v10 != 0))) {
            goto LABEL_88;
          }
          continue;
        }

LABEL_108:
        int v66 = 0;
        uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
LABEL_89:
        char v67 = &OBJC_IVAR___GEOPDAutocompleteParametersAllEntriesWithBrowse__querySuggestionEntry;
        if (v68) {
LABEL_90:
        }
          *(unsigned char *)(a1 + v67[629]) |= 4u;
        if (v72 || (v66 & 1) == 0)
        {
          *(unsigned char *)(a1 + v67[629]) |= 0x10u;
          *(unsigned char *)(a1 + v67[629]) |= 8u;
          goto LABEL_101;
        }
        if (v19)
        {
          while (2)
          {
            while (1)
            {
              int v62 = *v19++;
              int v61 = v62;
              if (v62 == 2) {
                break;
              }
              if (v61 == 3)
              {
                char v63 = 8;
                goto LABEL_100;
              }
              if (!v61) {
                goto LABEL_101;
              }
            }
            char v63 = 16;
LABEL_100:
            *(unsigned char *)(a1 + v67[629]) |= v63;
            continue;
          }
        }
LABEL_101:
        if (v66) {
          unint64_t v3 = *(unsigned char *)(v3 + *v21) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v72)
        {
          BOOL v64 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      case 3:
        if (!v34) {
          goto LABEL_70;
        }
        if ((*(unsigned char *)(a1 + 60) & 8) == 0)
        {
          uint64_t v51 = PBReaderReadData();
          uint64_t v50 = *(void **)(a1 + 24);
          *(void *)(a1 + 24) = v51;
          goto LABEL_61;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_108;
        }
        char v60 = 16 * *(unsigned char *)(a1 + 60);
        goto LABEL_85;
      case 4:
        if ((v69 & 1) == 0) {
          goto LABEL_70;
        }
        char v52 = 0;
        unsigned int v53 = 0;
        uint64_t v41 = 0;
        *(unsigned char *)(a1 + 60) |= 2u;
        while (2)
        {
          uint64_t v54 = *v20;
          uint64_t v55 = *(void *)(v3 + v54);
          unint64_t v56 = v55 + 1;
          if (v55 == -1 || v56 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v21) = 1;
          }
          else
          {
            char v57 = *(unsigned char *)(*(void *)(v3 + *v22) + v55);
            *(void *)(v3 + v54) = v56;
            v41 |= (unint64_t)(v57 & 0x7F) << v52;
            if (v57 < 0)
            {
              v52 += 7;
              BOOL v30 = v53++ >= 9;
              if (v30)
              {
                LODWORD(v41) = 0;
                goto LABEL_79;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v21)) {
          LODWORD(v41) = 0;
        }
LABEL_79:
        uint64_t v59 = 56;
LABEL_80:
        *(_DWORD *)(a1 + v59) = v41;
        goto LABEL_87;
      default:
        if ((v68 & 1) == 0 || (*(unsigned char *)(a1 + 60) & 4) != 0)
        {
LABEL_70:
          char v58 = PBReaderSkipValueWithTag();
          uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
          if ((v58 & 1) == 0)
          {
            int v66 = 0;
            goto LABEL_89;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v46 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            char v47 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v46;
          }
          int v48 = PBUnknownFieldAdd();
          uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
          if (!v48)
          {
            int v66 = 0;
            char v67 = &OBJC_IVAR___GEOPDAutocompleteParametersAllEntriesWithBrowse__querySuggestionEntry;
            goto LABEL_90;
          }
        }
        goto LABEL_87;
    }
  }
}

uint64_t __MarkForDeletionExternalDataForOfflineBatchesNotMatchingVersions_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 64);
  uint64_t v5 = *(void **)(a1 + 32);
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v6 + 40);
  int v7 = [v5 bindIntParameter:"@layer" toValue:v4 inStatement:a2 error:&obj];
  objc_storeStrong((id *)(v6 + 40), obj);
  if (!v7) {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 48);
  char v9 = *(void **)(a1 + 32);
  uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8);
  id v18 = *(id *)(v10 + 40);
  int v11 = [v9 bindInt64Parameter:"@versionA" toValue:v8 inStatement:a2 error:&v18];
  objc_storeStrong((id *)(v10 + 40), v18);
  if (!v11) {
    return 0;
  }
  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v13 = *(void **)(a1 + 32);
  uint64_t v14 = *(void *)(*(void *)(a1 + 40) + 8);
  id v17 = *(id *)(v14 + 40);
  uint64_t v15 = [v13 bindInt64Parameter:"@versionB" toValue:v12 inStatement:a2 error:&v17];
  objc_storeStrong((id *)(v14 + 40), v17);
  return v15;
}

void _GEOPDSiriSearchResultCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v2 = *(id *)(a1 + 24);
  uint64_t v3 = [v2 countByEnumeratingWithState:&v15 objects:v20 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v16;
    while (1)
    {
      if (*(void *)v16 != v5) {
        objc_enumerationMutation(v2);
      }
      if (!--v4)
      {
        uint64_t v4 = [v2 countByEnumeratingWithState:&v15 objects:v20 count:16];
        if (!v4) {
          break;
        }
      }
    }
  }

  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v6 = *(id *)(a1 + 32);
  uint64_t v7 = [v6 countByEnumeratingWithState:&v11 objects:v19 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v12;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v12 != v9) {
          objc_enumerationMutation(v6);
        }
        objc_msgSend(*(id *)(*((void *)&v11 + 1) + 8 * v10++), "readAll:", 1, (void)v11);
      }
      while (v8 != v10);
      uint64_t v8 = [v6 countByEnumeratingWithState:&v11 objects:v19 count:16];
    }
    while (v8);
  }
}

void sub_188ED960C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188ED997C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188ED9A68(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDClientRankingFeatureUnitReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 60))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOPDClientRankingFeatureUnitReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 56) = [v8 position];
  *(_DWORD *)(a1 + 60) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOPDClientRankingFeatureUnitReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOPDClientRankingFeatureUnitReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOPDClientRankingFeatureUnitReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return Specified;
}

void sub_188ED9BF4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188ED9FA4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDWifiAccessPointReadAllFrom(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    uint64_t v4 = (int *)MEMORY[0x1E4F940E8];
    uint64_t v5 = (int *)MEMORY[0x1E4F940E0];
    id v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v3[*v6]) {
          break;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          BOOL v15 = v9++ >= 9;
          if (v15)
          {
            unint64_t v10 = 0;
            int v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v16 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v16 || (v10 & 7) == 4) {
          break;
        }
        switch((v10 >> 3))
        {
          case 1u:
            uint64_t v18 = PBReaderReadString();
            char v19 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v18;

            continue;
          case 2u:
            char v22 = 0;
            unsigned int v23 = 0;
            uint64_t v24 = 0;
            *(unsigned char *)(a1 + 44) |= 8u;
            while (1)
            {
              uint64_t v25 = *v4;
              uint64_t v26 = *(void *)&v3[v25];
              unint64_t v27 = v26 + 1;
              if (v26 == -1 || v27 > *(void *)&v3[*v5]) {
                break;
              }
              char v28 = *(unsigned char *)(*(void *)&v3[*v7] + v26);
              *(void *)&v3[v25] = v27;
              v24 |= (unint64_t)(v28 & 0x7F) << v22;
              if ((v28 & 0x80) == 0) {
                goto LABEL_54;
              }
              v22 += 7;
              BOOL v15 = v23++ >= 9;
              if (v15)
              {
                LODWORD(v24) = 0;
                goto LABEL_56;
              }
            }
            v3[*v6] = 1;
LABEL_54:
            if (v3[*v6]) {
              LODWORD(v24) = 0;
            }
LABEL_56:
            uint64_t v48 = 40;
            goto LABEL_69;
          case 3u:
            char v29 = 0;
            unsigned int v30 = 0;
            uint64_t v24 = 0;
            *(unsigned char *)(a1 + 44) |= 4u;
            while (2)
            {
              uint64_t v31 = *v4;
              uint64_t v32 = *(void *)&v3[v31];
              unint64_t v33 = v32 + 1;
              if (v32 == -1 || v33 > *(void *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                char v34 = *(unsigned char *)(*(void *)&v3[*v7] + v32);
                *(void *)&v3[v31] = v33;
                v24 |= (unint64_t)(v34 & 0x7F) << v29;
                if (v34 < 0)
                {
                  v29 += 7;
                  BOOL v15 = v30++ >= 9;
                  if (v15)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_60;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6]) {
              LODWORD(v24) = 0;
            }
LABEL_60:
            uint64_t v48 = 36;
            goto LABEL_69;
          case 4u:
            char v35 = 0;
            unsigned int v36 = 0;
            uint64_t v37 = 0;
            *(unsigned char *)(a1 + 44) |= 1u;
            while (2)
            {
              uint64_t v38 = *v4;
              uint64_t v39 = *(void *)&v3[v38];
              unint64_t v40 = v39 + 1;
              if (v39 == -1 || v40 > *(void *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                char v41 = *(unsigned char *)(*(void *)&v3[*v7] + v39);
                *(void *)&v3[v38] = v40;
                v37 |= (unint64_t)(v41 & 0x7F) << v35;
                if (v41 < 0)
                {
                  v35 += 7;
                  BOOL v15 = v36++ >= 9;
                  if (v15)
                  {
                    uint64_t v37 = 0;
                    goto LABEL_64;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6]) {
              uint64_t v37 = 0;
            }
LABEL_64:
            *(void *)(a1 + 24) = v37;
            continue;
          case 5u:
            char v42 = 0;
            unsigned int v43 = 0;
            uint64_t v24 = 0;
            *(unsigned char *)(a1 + 44) |= 2u;
            break;
          default:
            if (!*(void *)(a1 + 8))
            {
              id v20 = objc_alloc_init(MEMORY[0x1E4F940B0]);
              uint64_t v21 = *(void **)(a1 + 8);
              *(void *)(a1 + 8) = v20;
            }
            if (!PBUnknownFieldAdd()) {
              goto LABEL_72;
            }
            continue;
        }
        while (1)
        {
          uint64_t v44 = *v4;
          uint64_t v45 = *(void *)&v3[v44];
          unint64_t v46 = v45 + 1;
          if (v45 == -1 || v46 > *(void *)&v3[*v5]) {
            break;
          }
          char v47 = *(unsigned char *)(*(void *)&v3[*v7] + v45);
          *(void *)&v3[v44] = v46;
          v24 |= (unint64_t)(v47 & 0x7F) << v42;
          if ((v47 & 0x80) == 0) {
            goto LABEL_66;
          }
          v42 += 7;
          BOOL v15 = v43++ >= 9;
          if (v15)
          {
            LODWORD(v24) = 0;
            goto LABEL_68;
          }
        }
        v3[*v6] = 1;
LABEL_66:
        if (v3[*v6]) {
          LODWORD(v24) = 0;
        }
LABEL_68:
        uint64_t v48 = 32;
LABEL_69:
        *(_DWORD *)(a1 + v48) = v24;
      }
      while (*(void *)&v3[*v4] < *(void *)&v3[*v5]);
    }
    BOOL v49 = v3[*v6] == 0;
  }
  else
  {
LABEL_72:
    BOOL v49 = 0;
  }
  objc_sync_exit(v3);

  return v49;
}

void sub_188EDA868(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EDAD00(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDClientRankingFeatureMetadataReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 72));
  id v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 68);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 64)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unsigned int v12 = (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int16 *)(a1 + 84)), (uint16x4_t)0xFFFAFFF9FFFBFFFCLL), (int8x8_t)0x1000100010001))+ ((*(_WORD *)(a1 + 84) >> 3) & 1)+ ((*(_WORD *)(a1 + 84) >> 2) & 1));
  while (2)
  {
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v16 = v12 > 3;
        char v17 = v16 & ~(_BYTE)v11 | v9;
        unsigned __int8 v18 = v16 | v11;
        char v67 = v17;
        char v68 = v18 | v17;
        if ((v18 | v8)) {
          char v19 = 0;
        }
        else {
          char v19 = a3;
        }
        id v20 = (int *)MEMORY[0x1E4F940E8];
        uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
        char v69 = (v19 == 0) | v18;
        BOOL v70 = v18;
        char v22 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v12;
LABEL_7:
        uint64_t v13 = v9;
LABEL_8:
        uint64_t v14 = v10;
        uint64_t v15 = v11;
LABEL_10:
        ++v7;
        uint64_t v9 = v13;
        uint64_t v10 = v14;
        uint64_t v11 = v15;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v20) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v21)) {
      goto LABEL_111;
    }
    char v23 = 0;
    unsigned int v24 = 0;
    unint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = *v20;
      uint64_t v27 = *(void *)(v3 + v26);
      unint64_t v28 = v27 + 1;
      if (v27 == -1 || v28 > *(void *)(v3 + *v6)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(v3 + *v22) + v27);
      *(void *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0) {
        goto LABEL_25;
      }
      v23 += 7;
      BOOL v30 = v24++ >= 9;
      if (v30)
      {
        unint64_t v25 = 0;
        int v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v21) = 1;
LABEL_25:
    int v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(unsigned char *)(v3 + *v21)) {
      unint64_t v25 = 0;
    }
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_111:
      int v65 = 1;
      goto LABEL_112;
    }
    unint64_t v33 = v25 >> 3;
    BOOL v34 = v70;
    if ((v69 & 1) == 0)
    {
      char v35 = v19;
      do
      {
        int v37 = *v35++;
        int v36 = v37;
        BOOL v34 = v37 != 0;
        if (v37) {
          BOOL v38 = v36 == v33;
        }
        else {
          BOOL v38 = 1;
        }
      }
      while (!v38);
    }
    switch((int)v33)
    {
      case 1:
        if ((v8 & 1) == 0) {
          goto LABEL_87;
        }
        char v39 = 0;
        unsigned int v40 = 0;
        uint64_t v41 = 0;
        *(_WORD *)(a1 + 84) |= 1u;
        while (1)
        {
          uint64_t v42 = *v20;
          uint64_t v43 = *(void *)(v3 + v42);
          unint64_t v44 = v43 + 1;
          if (v43 == -1 || v44 > *(void *)(v3 + *v6)) {
            break;
          }
          char v45 = *(unsigned char *)(*(void *)(v3 + *v22) + v43);
          *(void *)(v3 + v42) = v44;
          v41 |= (unint64_t)(v45 & 0x7F) << v39;
          if ((v45 & 0x80) == 0) {
            goto LABEL_90;
          }
          v39 += 7;
          BOOL v30 = v40++ >= 9;
          if (v30)
          {
            LODWORD(v41) = 0;
            goto LABEL_92;
          }
        }
        *(unsigned char *)(v3 + *v21) = 1;
LABEL_90:
        if (*(unsigned char *)(v3 + *v21)) {
          LODWORD(v41) = 0;
        }
LABEL_92:
        uint64_t v59 = 76;
        goto LABEL_97;
      case 2:
        if (!v34) {
          goto LABEL_87;
        }
        if ((*(_WORD *)(a1 + 84) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_132;
          }
          __int16 v60 = *(_WORD *)(a1 + 84) << 10;
          goto LABEL_108;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_132;
        }
        BOOL v49 = objc_alloc_init(GEOPDClientRankingFeatureTypeSource);
        if (!GEOPDClientRankingFeatureTypeSourceReadAllFrom((uint64_t)v49, (void *)v3)) {
          goto LABEL_131;
        }
        PBReaderRecallMark();
        uint64_t v50 = 40;
        goto LABEL_86;
      case 3:
        if (!v34) {
          goto LABEL_87;
        }
        if ((*(_WORD *)(a1 + 84) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_132;
          }
          __int16 v60 = *(_WORD *)(a1 + 84) << 11;
          goto LABEL_108;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_132;
        }
        BOOL v49 = objc_alloc_init(GEOPDClientRankingFeatureTypeResult);
        if (!GEOPDClientRankingFeatureTypeResultReadAllFrom((uint64_t)v49, (void *)v3)) {
          goto LABEL_131;
        }
        PBReaderRecallMark();
        uint64_t v50 = 32;
        goto LABEL_86;
      case 4:
        if ((v8 & 1) == 0) {
          goto LABEL_87;
        }
        char v51 = 0;
        unsigned int v52 = 0;
        uint64_t v41 = 0;
        *(_WORD *)(a1 + 84) |= 2u;
        while (2)
        {
          uint64_t v53 = *v20;
          uint64_t v54 = *(void *)(v3 + v53);
          unint64_t v55 = v54 + 1;
          if (v54 == -1 || v55 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v21) = 1;
          }
          else
          {
            char v56 = *(unsigned char *)(*(void *)(v3 + *v22) + v54);
            *(void *)(v3 + v53) = v55;
            v41 |= (unint64_t)(v56 & 0x7F) << v51;
            if (v56 < 0)
            {
              v51 += 7;
              BOOL v30 = v52++ >= 9;
              if (v30)
              {
                LODWORD(v41) = 0;
                goto LABEL_96;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v21)) {
          LODWORD(v41) = 0;
        }
LABEL_96:
        uint64_t v59 = 80;
LABEL_97:
        *(_DWORD *)(a1 + v59) = v41;
        goto LABEL_110;
      case 5:
        if (!v34) {
          goto LABEL_87;
        }
        if ((*(_WORD *)(a1 + 84) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_132;
          }
          __int16 v60 = *(_WORD *)(a1 + 84) << 8;
          goto LABEL_108;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_132;
        }
        BOOL v49 = objc_alloc_init(GEOPDClientRankingFeatureFunctionTypeLinear);
        if (!GEOPDClientRankingFeatureFunctionTypeLinearReadAllFrom((uint64_t)v49, (void *)v3)) {
          goto LABEL_131;
        }
        PBReaderRecallMark();
        uint64_t v50 = 56;
        goto LABEL_86;
      case 6:
        if (!v34) {
          goto LABEL_87;
        }
        if ((*(_WORD *)(a1 + 84) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_132;
          }
          __int16 v60 = *(_WORD *)(a1 + 84) << 9;
          goto LABEL_108;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_132;
        }
        BOOL v49 = objc_alloc_init(GEOPDClientRankingFeatureFunctionTypeDiscrete);
        if (!GEOPDClientRankingFeatureFunctionTypeDiscreteReadAllFrom((uint64_t)v49, (void *)v3)) {
          goto LABEL_131;
        }
        PBReaderRecallMark();
        uint64_t v50 = 48;
        goto LABEL_86;
      case 7:
        if (!v34) {
          goto LABEL_87;
        }
        if ((*(_WORD *)(a1 + 84) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_132;
          }
          __int16 v60 = *(_WORD *)(a1 + 84) << 12;
LABEL_108:
          v7 += v60 >> 15;
LABEL_109:
          uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
          char v22 = (int *)MEMORY[0x1E4F940B8];
          goto LABEL_110;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_132;
        }
        BOOL v49 = objc_alloc_init(GEOPDClientRankingFeatureTypeComposite);
        if (GEOPDClientRankingFeatureTypeCompositeReadAllFrom((uint64_t)v49, (void *)v3, v10 & 1))
        {
          PBReaderRecallMark();
          uint64_t v50 = 24;
LABEL_86:
          char v57 = *(void **)(a1 + v50);
          *(void *)(a1 + v50) = v49;

          --v7;
          goto LABEL_109;
        }
LABEL_131:

LABEL_132:
        int v65 = 0;
        int v66 = &OBJC_IVAR___GEOMapDataSubscriptionDownloadGroup__completedSubscriptions;
        uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
LABEL_113:
        if (v67) {
LABEL_114:
        }
          *(_WORD *)(a1 + v66[764]) |= 4u;
        if (v70 || (v65 & 1) == 0)
        {
          *(_WORD *)(a1 + v66[764]) |= 0x20u;
          *(_WORD *)(a1 + v66[764]) |= 0x10u;
          *(_WORD *)(a1 + v66[764]) |= 0x80u;
          *(_WORD *)(a1 + v66[764]) |= 0x40u;
          *(_WORD *)(a1 + v66[764]) |= 8u;
        }
        else if (v19)
        {
          while (1)
          {
            int v62 = *v19++;
            __int16 v61 = 32;
            switch(v62)
            {
              case 0:
                goto LABEL_125;
              case 2:
                goto LABEL_123;
              case 3:
                __int16 v61 = 16;
                goto LABEL_123;
              case 5:
                __int16 v61 = 128;
                goto LABEL_123;
              case 6:
                __int16 v61 = 64;
                goto LABEL_123;
              case 7:
                __int16 v61 = 8;
LABEL_123:
                *(_WORD *)(a1 + v66[764]) |= v61;
                break;
              default:
                continue;
            }
          }
        }
LABEL_125:
        if (v65) {
          unint64_t v3 = *(unsigned char *)(v3 + *v21) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v70)
        {
          char v63 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      default:
        if ((v67 & 1) == 0 || (*(_WORD *)(a1 + 84) & 4) != 0)
        {
LABEL_87:
          char v58 = PBReaderSkipValueWithTag();
          char v22 = (int *)MEMORY[0x1E4F940B8];
          uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
          if ((v58 & 1) == 0)
          {
            int v65 = 0;
LABEL_112:
            int v66 = &OBJC_IVAR___GEOMapDataSubscriptionDownloadGroup__completedSubscriptions;
            goto LABEL_113;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v46 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            char v47 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v46;
          }
          int v48 = PBUnknownFieldAdd();
          uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
          char v22 = (int *)MEMORY[0x1E4F940B8];
          if (!v48)
          {
            int v65 = 0;
            int v66 = &OBJC_IVAR___GEOMapDataSubscriptionDownloadGroup__completedSubscriptions;
            goto LABEL_114;
          }
        }
LABEL_110:
        if (!(v68 & 1 | (v7 != 0))) {
          goto LABEL_111;
        }
        continue;
    }
  }
}

void sub_188EDB950(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDParsecQueryRankingFeaturesReadAllFrom(uint64_t a1, void *a2)
{
  unint64_t v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    uint64_t v4 = (int *)MEMORY[0x1E4F940E8];
    uint64_t v5 = (int *)MEMORY[0x1E4F940E0];
    id v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
      while (1)
      {
        if (v3[*v6]) {
          goto LABEL_37;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          if (v9++ >= 9)
          {
            unint64_t v10 = 0;
            int v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v16 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v16 || (v10 & 7) == 4) {
          goto LABEL_37;
        }
        if ((v10 >> 3) == 2) {
          break;
        }
        if ((v10 >> 3) == 1)
        {
          *(unsigned char *)(a1 + 32) |= 2u;
          uint64_t v18 = *v4;
          unint64_t v19 = *(void *)&v3[v18];
          if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(void *)&v3[*v5])
          {
            uint64_t v20 = *(void *)(*(void *)&v3[*v7] + v19);
            *(void *)&v3[v18] = v19 + 8;
          }
          else
          {
            v3[*v6] = 1;
            uint64_t v20 = 0;
          }
          unint64_t v25 = &OBJC_IVAR___GEOPDParsecQueryRankingFeatures__poiScore;
LABEL_35:
          *(void *)(a1 + *v25) = v20;
          goto LABEL_36;
        }
        if (!*(void *)(a1 + 8))
        {
          id v23 = objc_alloc_init(MEMORY[0x1E4F940B0]);
          unsigned int v24 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = v23;
        }
        if ((PBUnknownFieldAdd() & 1) == 0) {
          goto LABEL_38;
        }
LABEL_36:
        if (*(void *)&v3[*v4] >= *(void *)&v3[*v5]) {
          goto LABEL_37;
        }
      }
      *(unsigned char *)(a1 + 32) |= 1u;
      uint64_t v21 = *v4;
      unint64_t v22 = *(void *)&v3[v21];
      if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(void *)&v3[*v5])
      {
        uint64_t v20 = *(void *)(*(void *)&v3[*v7] + v22);
        *(void *)&v3[v21] = v22 + 8;
      }
      else
      {
        v3[*v6] = 1;
        uint64_t v20 = 0;
      }
      unint64_t v25 = &OBJC_IVAR___GEOPDParsecQueryRankingFeatures__geoScore;
      goto LABEL_35;
    }
LABEL_37:
    BOOL v26 = v3[*v6] == 0;
  }
  else
  {
LABEL_38:
    BOOL v26 = 0;
  }
  objc_sync_exit(v3);

  return v26;
}

void sub_188EDBC04(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EDBCD0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDClientRankingFeatureMetadataReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 68))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOPDClientRankingFeatureMetadataReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)unint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 72));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 64) = [v8 position];
  *(_DWORD *)(a1 + 68) = [v8 length];
  if (a3) {
    unsigned int v9 = (int *)&GEOPDClientRankingFeatureMetadataReadAllFrom_recursiveTag;
  }
  else {
    unsigned int v9 = (int *)&GEOPDClientRankingFeatureMetadataReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOPDClientRankingFeatureMetadataReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 72));
  return Specified;
}

void sub_188EDDDA8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDClientRankingFeatureMetadataIsDirty(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 72));
  BOOL v2 = (*(_WORD *)(a1 + 84) & 0x1F8) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 72));
  return v2;
}

BOOL GEOPDTransitNearbyPaymentMethodLookupOriginReadAllFrom(uint64_t a1, void *a2, int a3)
{
  uint64_t v5 = a2;
  objc_sync_enter(v5);
  if (v5)
  {
    id v6 = (int *)MEMORY[0x1E4F940E8];
    uint64_t v7 = (int *)MEMORY[0x1E4F940E0];
    id v8 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v5[*MEMORY[0x1E4F940E8]] < *(void *)&v5[*MEMORY[0x1E4F940E0]])
    {
      unsigned int v9 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v5[*v8]) {
          break;
        }
        char v10 = 0;
        unsigned int v11 = 0;
        unint64_t v12 = 0;
        while (1)
        {
          uint64_t v13 = *v6;
          uint64_t v14 = *(void *)&v5[v13];
          unint64_t v15 = v14 + 1;
          if (v14 == -1 || v15 > *(void *)&v5[*v7]) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)&v5[*v9] + v14);
          *(void *)&v5[v13] = v15;
          v12 |= (unint64_t)(v16 & 0x7F) << v10;
          if ((v16 & 0x80) == 0) {
            goto LABEL_13;
          }
          v10 += 7;
          if (v11++ >= 9)
          {
            unint64_t v12 = 0;
            int v18 = v5[*v8];
            goto LABEL_15;
          }
        }
        v5[*v8] = 1;
LABEL_13:
        int v18 = v5[*v8];
        if (v5[*v8]) {
          unint64_t v12 = 0;
        }
LABEL_15:
        if (v18 || (v12 & 7) == 4) {
          break;
        }
        if ((v12 >> 3) == 1)
        {
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_29;
          }
          uint64_t v20 = objc_alloc_init(GEOWaypointTyped);
          if (!GEOWaypointTypedReadAllFrom((uint64_t)v20, v5, a3))
          {

            goto LABEL_29;
          }
          PBReaderRecallMark();
          uint64_t v21 = *(void **)(a1 + 16);
          *(void *)(a1 + 16) = v20;
        }
        else
        {
          if (!*(void *)(a1 + 8))
          {
            id v22 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            id v23 = *(void **)(a1 + 8);
            *(void *)(a1 + 8) = v22;
          }
          if (!PBUnknownFieldAdd()) {
            goto LABEL_29;
          }
        }
      }
      while (*(void *)&v5[*v6] < *(void *)&v5[*v7]);
    }
    BOOL v24 = v5[*v8] == 0;
  }
  else
  {
LABEL_29:
    BOOL v24 = 0;
  }
  objc_sync_exit(v5);

  return v24;
}

void sub_188EDE060(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EDE210(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EDE3A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_188EDE720(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EDEC00(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EDECD4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOCountryRegionTupleReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 44))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOCountryRegionTupleReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)char v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = [v8 position];
  *(_DWORD *)(a1 + 44) = [v8 length];
  if (a3) {
    unsigned int v9 = (int *)&GEOCountryRegionTupleReadAllFrom_recursiveTag;
  }
  else {
    unsigned int v9 = (int *)&GEOCountryRegionTupleReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOCountryRegionTupleReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_188EDF064(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOCountryRegionTupleReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  id v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 44);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 40)];
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  int v11 = ((*(unsigned __int8 *)(a1 + 52) >> 2) & 1)
      + (*(unsigned char *)(a1 + 52) & 1)
      + ((*(unsigned __int8 *)(a1 + 52) >> 1) & 1);
  while (2)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    switch(a3[v10])
    {
      case -4:
        ++v11;
        uint64_t v12 = v7;
        goto LABEL_8;
      case -3:
        char v9 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_8;
      case 0:
        BOOL v14 = v11 != 0;
        unsigned __int8 v15 = v14 | v7;
        unsigned __int8 v50 = v14 & ~(_BYTE)v7 | v8;
        if (((v14 | v7) | v9)) {
          char v16 = 0;
        }
        else {
          char v16 = a3;
        }
        char v17 = (int *)MEMORY[0x1E4F940E8];
        int v18 = (int *)MEMORY[0x1E4F940C8];
        unint64_t v19 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v11;
LABEL_7:
        uint64_t v12 = v7;
        uint64_t v13 = v8;
LABEL_8:
        ++v10;
        uint64_t v7 = v12;
        uint64_t v8 = v13;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(void *)(v3 + *v17) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v18)) {
      goto LABEL_59;
    }
    char v20 = 0;
    unsigned int v21 = 0;
    unint64_t v22 = 0;
    while (1)
    {
      uint64_t v23 = *v17;
      unint64_t v24 = *(void *)(v3 + v23);
      if (v24 == -1 || v24 >= *(void *)(v3 + *v6)) {
        break;
      }
      char v25 = *(unsigned char *)(*(void *)(v3 + *v19) + v24);
      *(void *)(v3 + v23) = v24 + 1;
      v22 |= (unint64_t)(v25 & 0x7F) << v20;
      if ((v25 & 0x80) == 0) {
        goto LABEL_23;
      }
      v20 += 7;
      if (v21++ >= 9)
      {
        unint64_t v22 = 0;
        int v27 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_25;
      }
    }
    *(unsigned char *)(v3 + *v18) = 1;
LABEL_23:
    int v27 = *(unsigned __int8 *)(v3 + *v18);
    if (*(unsigned char *)(v3 + *v18)) {
      unint64_t v22 = 0;
    }
LABEL_25:
    if (v27 || (v22 & 7) == 4)
    {
LABEL_59:
      int v48 = 1;
      goto LABEL_60;
    }
    unint64_t v29 = v22 >> 3;
    BOOL v30 = v15;
    if (!((v16 == 0) | v15 & 1))
    {
      int v31 = v16;
      do
      {
        int v33 = *v31++;
        int v32 = v33;
        BOOL v30 = v33 != 0;
        if (v33) {
          BOOL v34 = v32 == v29;
        }
        else {
          BOOL v34 = 1;
        }
      }
      while (!v34);
    }
    if (v29 == 2) {
      break;
    }
    if (v29 == 1)
    {
      if (v30)
      {
        if ((*(unsigned char *)(a1 + 52) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_79;
          }
          char v42 = *(unsigned char *)(a1 + 52) << 6;
          goto LABEL_57;
        }
        uint64_t v35 = PBReaderReadString();
        uint64_t v36 = 24;
        goto LABEL_44;
      }
    }
    else if ((v50 & 1) != 0 && (*(unsigned char *)(a1 + 52) & 1) == 0)
    {
      if (!*(void *)(a1 + 16))
      {
        id v38 = objc_alloc_init(MEMORY[0x1E4F940B0]);
        char v39 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v38;
      }
      int v40 = PBUnknownFieldAdd();
      int v18 = (int *)MEMORY[0x1E4F940C8];
      if (!v40)
      {
        int v48 = 0;
        BOOL v49 = &OBJC_IVAR___GEOArrivalTimeAndDistanceInfo__distanceRemainingToEndOfRoute;
        goto LABEL_62;
      }
      goto LABEL_58;
    }
LABEL_51:
    char v41 = PBReaderSkipValueWithTag();
    int v18 = (int *)MEMORY[0x1E4F940C8];
    if ((v41 & 1) == 0)
    {
      int v48 = 0;
LABEL_60:
      BOOL v49 = &OBJC_IVAR___GEOArrivalTimeAndDistanceInfo__distanceRemainingToEndOfRoute;
      goto LABEL_61;
    }
LABEL_58:
    if (!((v15 | v50) & 1 | (v10 != 0))) {
      goto LABEL_59;
    }
  }
  if (!v30) {
    goto LABEL_51;
  }
  if ((*(unsigned char *)(a1 + 52) & 4) == 0)
  {
    uint64_t v35 = PBReaderReadString();
    uint64_t v36 = 32;
LABEL_44:
    int v37 = *(void **)(a1 + v36);
    *(void *)(a1 + v36) = v35;

    int v18 = (int *)MEMORY[0x1E4F940C8];
    --v10;
    goto LABEL_58;
  }
  if (PBReaderSkipValueWithTag())
  {
    char v42 = 32 * *(unsigned char *)(a1 + 52);
LABEL_57:
    v10 += v42 >> 7;
    int v18 = (int *)MEMORY[0x1E4F940C8];
    goto LABEL_58;
  }
LABEL_79:
  int v48 = 0;
  BOOL v49 = &OBJC_IVAR___GEOArrivalTimeAndDistanceInfo__distanceRemainingToEndOfRoute;
  int v18 = (int *)MEMORY[0x1E4F940C8];
LABEL_61:
  if ((v50 & 1) == 0) {
    goto LABEL_63;
  }
LABEL_62:
  *(unsigned char *)(a1 + v49[61]) |= 1u;
LABEL_63:
  if (v15 & 1 | ((v48 & 1) == 0))
  {
    *(unsigned char *)(a1 + v49[61]) |= 2u;
    *(unsigned char *)(a1 + v49[61]) |= 4u;
    goto LABEL_73;
  }
  if (v16)
  {
    while (1)
    {
      int v45 = *v16++;
      int v44 = v45;
      if (v45 == 1) {
        break;
      }
      if (v44 == 2)
      {
        char v43 = 4;
LABEL_69:
        *(unsigned char *)(a1 + v49[61]) |= v43;
      }
      else if (!v44)
      {
        goto LABEL_73;
      }
    }
    char v43 = 2;
    goto LABEL_69;
  }
LABEL_73:
  if (v48)
  {
    unint64_t v3 = *(unsigned char *)(v3 + *v18) == 0;
    if ((v15 & 1) == 0) {
      return v3;
    }
LABEL_77:
    id v46 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  else
  {
    unint64_t v3 = 0;
    if (v15) {
      goto LABEL_77;
    }
  }
  return v3;
}

void sub_188EDF620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_188EDF6C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_188EE08DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47)
{
  _Block_object_dispose(&a36, 8);
  _Block_object_dispose(&a40, 8);
  std::__tree<std::__value_type<std::pair<google::protobuf::Descriptor const*,int>,google::protobuf::FieldDescriptor const*>,std::__map_value_compare<std::pair<google::protobuf::Descriptor const*,int>,std::__value_type<std::pair<google::protobuf::Descriptor const*,int>,google::protobuf::FieldDescriptor const*>,std::less<std::pair<google::protobuf::Descriptor const*,int>>,true>,std::allocator<std::__value_type<std::pair<google::protobuf::Descriptor const*,int>,google::protobuf::FieldDescriptor const*>>>::destroy(a47);

  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::pair<google::protobuf::Descriptor const*,int>,google::protobuf::FieldDescriptor const*>,std::__map_value_compare<std::pair<google::protobuf::Descriptor const*,int>,std::__value_type<std::pair<google::protobuf::Descriptor const*,int>,google::protobuf::FieldDescriptor const*>,std::less<std::pair<google::protobuf::Descriptor const*,int>>,true>,std::allocator<std::__value_type<std::pair<google::protobuf::Descriptor const*,int>,google::protobuf::FieldDescriptor const*>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::pair<google::protobuf::Descriptor const*,int>,google::protobuf::FieldDescriptor const*>,std::__map_value_compare<std::pair<google::protobuf::Descriptor const*,int>,std::__value_type<std::pair<google::protobuf::Descriptor const*,int>,google::protobuf::FieldDescriptor const*>,std::less<std::pair<google::protobuf::Descriptor const*,int>>,true>,std::allocator<std::__value_type<std::pair<google::protobuf::Descriptor const*,int>,google::protobuf::FieldDescriptor const*>>>::destroy(*a1);
    std::__tree<std::__value_type<std::pair<google::protobuf::Descriptor const*,int>,google::protobuf::FieldDescriptor const*>,std::__map_value_compare<std::pair<google::protobuf::Descriptor const*,int>,std::__value_type<std::pair<google::protobuf::Descriptor const*,int>,google::protobuf::FieldDescriptor const*>,std::less<std::pair<google::protobuf::Descriptor const*,int>>,true>,std::allocator<std::__value_type<std::pair<google::protobuf::Descriptor const*,int>,google::protobuf::FieldDescriptor const*>>>::destroy(a1[1]);
    operator delete(a1);
  }
}

void *___ZL7_getRTSINSt3__116reverse_iteratorINS0_21__tree_const_iteratorI23_GEORiseTransitSetEventPNS0_11__tree_nodeIS3_PvEElEEEEPFbjjEEP24GEOAlmanacRiseTransitSetT_SE_T0__block_invoke(void *result, uint64_t a2, void *a3)
{
  uint64_t v3 = *a3;
  if (*a3)
  {
    do
    {
      uint64_t v4 = v3;
      uint64_t v3 = *(void *)(v3 + 8);
    }
    while (v3);
  }
  else
  {
    uint64_t v5 = a3;
    do
    {
      uint64_t v4 = v5[2];
      BOOL v6 = *(void *)v4 == (void)v5;
      uint64_t v5 = (void *)v4;
    }
    while (v6);
  }
  int v7 = *(_DWORD *)(v4 + 40);
  switch(v7)
  {
    case 32:
      uint64_t v8 = result[5];
      break;
    case 16:
      uint64_t v8 = result[6];
      break;
    case 8:
      uint64_t v8 = result[4];
      break;
    default:
      return result;
  }
  uint64_t v9 = *(void *)(v8 + 8);
  *(void *)(v9 + 48) = a2;
  *(void *)(v9 + 56) = a3;
  *(unsigned char *)(*(void *)(result[7] + 8) + 24) = 1;
  return result;
}

void sub_188EE0C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
}

void sub_188EE0CC0()
{
}

uint64_t std::__tree<_GEORiseTransitSetEvent,_GEORiseTransitSetEventIsLessThan,std::allocator<_GEORiseTransitSetEvent>>::__emplace_unique_key_args<_GEORiseTransitSetEvent,_GEORiseTransitSetEvent const&>(uint64_t **a1, int a2, _OWORD *a3, double a4)
{
  int v7 = a1 + 1;
  BOOL v6 = a1[1];
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v10 = (uint64_t **)v6;
        double v11 = *((double *)v6 + 4);
        int v12 = *((_DWORD *)v6 + 10);
        if (!_GEORiseTransitSetEventIsLessThan::operator()(a2, v12, a4, v11)) {
          break;
        }
        BOOL v6 = *v10;
        int v7 = v10;
        if (!*v10) {
          goto LABEL_9;
        }
      }
      if (!_GEORiseTransitSetEventIsLessThan::operator()(v12, a2, v11, a4)) {
        return 0;
      }
      BOOL v6 = v10[1];
      if (!v6)
      {
        int v7 = v10 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v10 = a1 + 1;
LABEL_9:
    uint64_t v13 = operator new(0x30uLL);
    v13[2] = *a3;
    *(void *)uint64_t v13 = 0;
    *((void *)v13 + 1) = 0;
    *((void *)v13 + 2) = v10;
    int *v7 = (uint64_t *)v13;
    BOOL v14 = (uint64_t *)**a1;
    if (v14)
    {
      *a1 = v14;
      unsigned __int8 v15 = *v7;
    }
    else
    {
      unsigned __int8 v15 = (uint64_t *)v13;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v15);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return 1;
  }
}

BOOL _GEORiseTransitSetEventIsLessThan::operator()(int a1, int a2, double a3, double a4)
{
  if (a1 == a2 && vabdd_f64(a3, a4) < 0.007) {
    return 0;
  }
  if (a3 != a4) {
    return a3 < a4;
  }
  int v6 = GEOSolarEventTypeToOrdinal(a1);
  return v6 < (int)GEOSolarEventTypeToOrdinal(a2);
}

void _GEORiseTransitSetEvent::_GEORiseTransitSetEvent(_GEORiseTransitSetEvent *this, GEORiseTransitSet *a2, unsigned int a3)
{
  GEORiseTransitSet::eventOfType(a2, a3);
  this->JD = v5;
  this->type = a3;
  if (v5 <= -10.0)
  {
    int v6 = GEOGetAlmanacLog();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)int v7 = 0;
      _os_log_impl(&dword_188D96000, v6, OS_LOG_TYPE_FAULT, "umm, what?", v7, 2u);
    }
  }
}

id GEOGetAlmanacLog(void)
{
  if (qword_1EB2A05E0 != -1) {
    dispatch_once(&qword_1EB2A05E0, &__block_literal_global_180);
  }
  os_log_t v0 = (void *)_MergedGlobals_318;

  return v0;
}

GEOAlmanacRiseTransitSet *_getRTS<std::__tree_const_iterator<_GEORiseTransitSetEvent,std::__tree_node<_GEORiseTransitSetEvent,void *> *,long>,BOOL (*)(unsigned int,unsigned int)>(uint64_t a1, void *a2)
{
  uint64_t v49 = 0;
  unsigned __int8 v50 = &v49;
  uint64_t v51 = 0x3812000000;
  unsigned int v52 = __Block_byref_object_copy__128;
  uint64_t v53 = __Block_byref_object_dispose__129;
  uint64_t v54 = "";
  unint64_t v55 = a2;
  uint64_t v42 = 0;
  char v43 = &v42;
  uint64_t v44 = 0x3812000000;
  int v45 = __Block_byref_object_copy__128;
  id v46 = __Block_byref_object_dispose__129;
  char v47 = "";
  int v48 = a2;
  uint64_t v35 = 0;
  uint64_t v36 = &v35;
  uint64_t v37 = 0x3812000000;
  id v38 = __Block_byref_object_copy__128;
  char v39 = __Block_byref_object_dispose__129;
  int v40 = "";
  char v41 = a2;
  v33[0] = 0;
  v33[1] = v33;
  v33[2] = 0x2020000000;
  char v34 = 0;
  v32[0] = MEMORY[0x1E4F143A8];
  v32[1] = 3221225472;
  v32[2] = ___ZL7_getRTSINSt3__121__tree_const_iteratorI23_GEORiseTransitSetEventPNS0_11__tree_nodeIS2_PvEElEEPFbjjEEP24GEOAlmanacRiseTransitSetT_SC_T0__block_invoke;
  void v32[3] = &unk_1E53ED578;
  void v32[4] = &v49;
  v32[5] = &v35;
  v32[6] = &v42;
  v32[7] = v33;
  uint64_t v4 = MEMORY[0x18C120660](v32);
  double v5 = (void (**)(void, void))v4;
  if ((void *)a1 != a2)
  {
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v4, a1);
    int v6 = *(void **)(a1 + 8);
    if (v6)
    {
      do
      {
        int v7 = v6;
        int v6 = (void *)*v6;
      }
      while (v6);
    }
    else
    {
      uint64_t v8 = (void *)a1;
      do
      {
        int v7 = (void *)v8[2];
        BOOL v9 = *v7 == (void)v8;
        uint64_t v8 = v7;
      }
      while (!v9);
    }
    if (v7 != a2)
    {
      int v10 = *(_DWORD *)(a1 + 40);
      int v11 = *((_DWORD *)v7 + 10);
      if (v10 == 8)
      {
        if (v11 != 16) {
          goto LABEL_33;
        }
      }
      else if (v10 == 32)
      {
        if (v11 != 8) {
          goto LABEL_33;
        }
      }
      else if (v10 != 16 || v11 != 32)
      {
        goto LABEL_33;
      }
      ((void (**)(void, void *))v5)[2](v5, v7);
      int v12 = (void *)v7[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          int v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        BOOL v14 = v7;
        do
        {
          uint64_t v13 = (void *)v14[2];
          BOOL v9 = *v13 == (void)v14;
          BOOL v14 = v13;
        }
        while (!v9);
      }
      if (v13 != a2)
      {
        int v15 = *((_DWORD *)v7 + 10);
        int v16 = *((_DWORD *)v13 + 10);
        if (v15 != 8)
        {
          if (v15 == 32)
          {
            if (v16 != 8) {
              goto LABEL_33;
            }
          }
          else if (v15 != 16 || v16 != 32)
          {
            goto LABEL_33;
          }
          goto LABEL_32;
        }
        if (v16 == 16) {
LABEL_32:
        }
          ((void (*)(void (**)(void, void)))v5[2])(v5);
      }
    }
  }
LABEL_33:
  char v17 = [GEOAlmanacRiseTransitSet alloc];
  uint64_t v18 = v50[6];
  if ((void *)v18 == a2)
  {
    unint64_t v30 = 0xBFF0000000000000;
    int v19 = -1;
  }
  else
  {
    unint64_t v30 = *(void *)(v18 + 32);
    int v19 = *(_DWORD *)(v18 + 40);
  }
  int v31 = v19;
  uint64_t v20 = v43[6];
  if ((void *)v20 == a2)
  {
    unint64_t v28 = 0xBFF0000000000000;
    int v21 = -1;
  }
  else
  {
    unint64_t v28 = *(void *)(v20 + 32);
    int v21 = *(_DWORD *)(v20 + 40);
  }
  int v29 = v21;
  uint64_t v22 = v36[6];
  if ((void *)v22 == a2)
  {
    unint64_t v26 = 0xBFF0000000000000;
    int v23 = -1;
  }
  else
  {
    unint64_t v26 = *(void *)(v22 + 32);
    int v23 = *(_DWORD *)(v22 + 40);
  }
  int v27 = v23;
  unint64_t v24 = [(GEOAlmanacRiseTransitSet *)v17 initWithRise:&v30 transit:&v28 set:&v26];

  _Block_object_dispose(v33, 8);
  _Block_object_dispose(&v35, 8);
  _Block_object_dispose(&v42, 8);
  _Block_object_dispose(&v49, 8);

  return v24;
}

void sub_188EE12BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Block_object_dispose(&a24, 8);
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose((const void *)(v29 - 160), 8);
  _Block_object_dispose((const void *)(v29 - 104), 8);
  _Unwind_Resume(a1);
}

void *___ZL7_getRTSINSt3__121__tree_const_iteratorI23_GEORiseTransitSetEventPNS0_11__tree_nodeIS2_PvEElEEPFbjjEEP24GEOAlmanacRiseTransitSetT_SC_T0__block_invoke(void *result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 40);
  switch(v2)
  {
    case 32:
      uint64_t v3 = result[5];
      break;
    case 16:
      uint64_t v3 = result[6];
      break;
    case 8:
      uint64_t v3 = result[4];
      break;
    default:
      return result;
  }
  *(void *)(*(void *)(v3 + 8) + 48) = a2;
  *(unsigned char *)(*(void *)(result[7] + 8) + 24) = 1;
  return result;
}

BOOL GEOPDPlacecardLayoutDataIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  int v2 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] >= *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
LABEL_600:
    BOOL v280 = a1[*v4] == 0;
    PBReaderRecallMark();
    return v280;
  }
  double v5 = (int *)MEMORY[0x1E4F940B8];
  while (1)
  {
    if (a1[*v4]) {
      goto LABEL_600;
    }
    char v6 = 0;
    unsigned int v7 = 0;
    unint64_t v8 = 0;
    while (1)
    {
      uint64_t v9 = *v2;
      uint64_t v10 = *(void *)&a1[v9];
      unint64_t v11 = v10 + 1;
      if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
        break;
      }
      char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
      *(void *)&a1[v9] = v11;
      v8 |= (unint64_t)(v12 & 0x7F) << v6;
      if ((v12 & 0x80) == 0) {
        goto LABEL_12;
      }
      v6 += 7;
      BOOL v13 = v7++ >= 9;
      if (v13)
      {
        unint64_t v8 = 0;
        int v14 = a1[*v4];
        goto LABEL_14;
      }
    }
    a1[*v4] = 1;
LABEL_12:
    int v14 = a1[*v4];
    if (a1[*v4]) {
      unint64_t v8 = 0;
    }
LABEL_14:
    int v15 = v8 & 7;
    if (v14 || v15 == 4) {
      goto LABEL_600;
    }
    if ((v8 >> 3) != 2) {
      break;
    }
    if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDPlacecardLayoutConfigurationIsValid(a1)) {
      goto LABEL_610;
    }
LABEL_598:
    PBReaderRecallMark();
LABEL_599:
    if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
      goto LABEL_600;
    }
  }
  if ((v8 >> 3) != 1)
  {
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      goto LABEL_610;
    }
    goto LABEL_599;
  }
  if (v15 != 2 || !PBReaderPlaceMark()) {
    goto LABEL_610;
  }
  objc_msgSend(a1, "position", 0, 0);
  [a1 length];
  while (1)
  {
    while (1)
    {
LABEL_23:
      if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
        goto LABEL_597;
      }
      char v17 = 0;
      unsigned int v18 = 0;
      unint64_t v19 = 0;
      while (1)
      {
        uint64_t v20 = *v2;
        uint64_t v21 = *(void *)&a1[v20];
        unint64_t v22 = v21 + 1;
        if (v21 == -1 || v22 > *(void *)&a1[*v3]) {
          break;
        }
        char v23 = *(unsigned char *)(*(void *)&a1[*v5] + v21);
        *(void *)&a1[v20] = v22;
        v19 |= (unint64_t)(v23 & 0x7F) << v17;
        if ((v23 & 0x80) == 0) {
          goto LABEL_33;
        }
        v17 += 7;
        BOOL v13 = v18++ >= 9;
        if (v13)
        {
          unint64_t v19 = 0;
          int v24 = a1[*v4];
          goto LABEL_35;
        }
      }
      a1[*v4] = 1;
LABEL_33:
      int v24 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v19 = 0;
      }
LABEL_35:
      int v25 = v19 & 7;
      if (v24 || v25 == 4)
      {
LABEL_597:
        int v279 = a1[*v4];
        PBReaderRecallMark();
        if (v279) {
          goto LABEL_610;
        }
        goto LABEL_598;
      }
      if ((v19 >> 3) == 2) {
        break;
      }
      if ((v19 >> 3) == 1)
      {
        if ((v19 & 7) != 0) {
          goto LABEL_609;
        }
        unsigned int v27 = 0;
        while (1)
        {
          uint64_t v28 = *v2;
          uint64_t v29 = *(void *)&a1[v28];
          unint64_t v30 = v29 + 1;
          if (v29 == -1 || v30 > *(void *)&a1[*v3]) {
            break;
          }
          int v31 = *(char *)(*(void *)&a1[*v5] + v29);
          *(void *)&a1[v28] = v30;
          if (v31 < 0)
          {
            BOOL v32 = v27++ > 8;
            if (!v32) {
              continue;
            }
          }
          goto LABEL_23;
        }
        a1[*v4] = 1;
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        goto LABEL_609;
      }
    }
    if (v25 != 2 || !PBReaderPlaceMark()) {
      goto LABEL_609;
    }
    [a1 position];
    [a1 length];
LABEL_52:
    if (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
    {
      char v33 = 0;
      unsigned int v34 = 0;
      unint64_t v35 = 0;
      while (1)
      {
        uint64_t v36 = *v2;
        uint64_t v37 = *(void *)&a1[v36];
        unint64_t v38 = v37 + 1;
        if (v37 == -1 || v38 > *(void *)&a1[*v3]) {
          break;
        }
        char v39 = *(unsigned char *)(*(void *)&a1[*v5] + v37);
        *(void *)&a1[v36] = v38;
        v35 |= (unint64_t)(v39 & 0x7F) << v33;
        if ((v39 & 0x80) == 0) {
          goto LABEL_62;
        }
        v33 += 7;
        BOOL v13 = v34++ >= 9;
        if (v13)
        {
          unint64_t v35 = 0;
          int v40 = a1[*v4];
          goto LABEL_64;
        }
      }
      a1[*v4] = 1;
LABEL_62:
      int v40 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v35 = 0;
      }
LABEL_64:
      int v41 = v35 & 7;
      if (!v40 && v41 != 4) {
        break;
      }
    }
    int v278 = a1[*v4];
    PBReaderRecallMark();
    if (v278) {
      goto LABEL_609;
    }
    PBReaderRecallMark();
  }
  switch((v35 >> 3))
  {
    case 1u:
      if (v41 != 2 || !PBReaderPlaceMark()) {
        goto LABEL_608;
      }
      [a1 position];
      [a1 length];
LABEL_72:
      while (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
      {
        char v43 = 0;
        unsigned int v44 = 0;
        unint64_t v45 = 0;
        while (2)
        {
          uint64_t v46 = *v2;
          uint64_t v47 = *(void *)&a1[v46];
          unint64_t v48 = v47 + 1;
          if (v47 == -1 || v48 > *(void *)&a1[*v3])
          {
            a1[*v4] = 1;
          }
          else
          {
            char v49 = *(unsigned char *)(*(void *)&a1[*v5] + v47);
            *(void *)&a1[v46] = v48;
            v45 |= (unint64_t)(v49 & 0x7F) << v43;
            if (v49 < 0)
            {
              v43 += 7;
              BOOL v13 = v44++ >= 9;
              if (v13)
              {
                unint64_t v45 = 0;
                int v50 = a1[*v4];
                goto LABEL_84;
              }
              continue;
            }
          }
          break;
        }
        int v50 = a1[*v4];
        if (a1[*v4]) {
          unint64_t v45 = 0;
        }
LABEL_84:
        int v51 = v45 & 7;
        if (v50) {
          BOOL v52 = 1;
        }
        else {
          BOOL v52 = v51 == 4;
        }
        if (!v52)
        {
          if ((v45 >> 3) != 1)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_607;
            }
            continue;
          }
          if (v51 != 2 || !PBReaderPlaceMark()) {
            goto LABEL_607;
          }
          [a1 position];
          [a1 length];
          while (1)
          {
            while (1)
            {
LABEL_92:
              if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
                goto LABEL_200;
              }
              char v53 = 0;
              unsigned int v54 = 0;
              unint64_t v55 = 0;
              while (1)
              {
                uint64_t v56 = *v2;
                uint64_t v57 = *(void *)&a1[v56];
                unint64_t v58 = v57 + 1;
                if (v57 == -1 || v58 > *(void *)&a1[*v3]) {
                  break;
                }
                char v59 = *(unsigned char *)(*(void *)&a1[*v5] + v57);
                *(void *)&a1[v56] = v58;
                v55 |= (unint64_t)(v59 & 0x7F) << v53;
                if ((v59 & 0x80) == 0) {
                  goto LABEL_102;
                }
                v53 += 7;
                BOOL v13 = v54++ >= 9;
                if (v13)
                {
                  unint64_t v55 = 0;
                  int v60 = a1[*v4];
                  goto LABEL_104;
                }
              }
              a1[*v4] = 1;
LABEL_102:
              int v60 = a1[*v4];
              if (a1[*v4]) {
                unint64_t v55 = 0;
              }
LABEL_104:
              int v61 = v55 & 7;
              if (v60 || v61 == 4)
              {
LABEL_200:
                int v105 = a1[*v4];
                PBReaderRecallMark();
                if (v105) {
                  goto LABEL_607;
                }
                PBReaderRecallMark();
                goto LABEL_72;
              }
              unint64_t v63 = v55 >> 3;
              if ((v55 >> 3) != 3) {
                break;
              }
              if (v61 != 2 || !PBReaderPlaceMark()) {
                goto LABEL_603;
              }
              [a1 position];
              [a1 length];
LABEL_122:
              while (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
              {
                char v69 = 0;
                unsigned int v70 = 0;
                unint64_t v71 = 0;
                while (1)
                {
                  uint64_t v72 = *v2;
                  uint64_t v73 = *(void *)&a1[v72];
                  unint64_t v74 = v73 + 1;
                  if (v73 == -1 || v74 > *(void *)&a1[*v3]) {
                    break;
                  }
                  char v75 = *(unsigned char *)(*(void *)&a1[*v5] + v73);
                  *(void *)&a1[v72] = v74;
                  v71 |= (unint64_t)(v75 & 0x7F) << v69;
                  if ((v75 & 0x80) == 0) {
                    goto LABEL_132;
                  }
                  v69 += 7;
                  BOOL v13 = v70++ >= 9;
                  if (v13)
                  {
                    unint64_t v71 = 0;
                    int v76 = a1[*v4];
                    goto LABEL_134;
                  }
                }
                a1[*v4] = 1;
LABEL_132:
                int v76 = a1[*v4];
                if (a1[*v4]) {
                  unint64_t v71 = 0;
                }
LABEL_134:
                int v77 = v71 & 7;
                if (v76 || v77 == 4) {
                  break;
                }
                if ((v71 >> 3) == 1)
                {
                  if (v77 == 2)
                  {
                    if (!PBReaderPlaceMark())
                    {
LABEL_602:
                      PBReaderRecallMark();
                      goto LABEL_603;
                    }
LABEL_149:
                    while (*(void *)&a1[*v2] < *(void *)&a1[*v3])
                    {
                      unsigned int v84 = a1[*v4];
                      if (a1[*v4]) {
                        break;
                      }
                      while (1)
                      {
                        uint64_t v85 = *v2;
                        uint64_t v86 = *(void *)&a1[v85];
                        unint64_t v87 = v86 + 1;
                        if (v86 == -1 || v87 > *(void *)&a1[*v3]) {
                          break;
                        }
                        int v88 = *(char *)(*(void *)&a1[*v5] + v86);
                        *(void *)&a1[v85] = v87;
                        if (v88 < 0)
                        {
                          BOOL v13 = v84++ >= 9;
                          if (!v13) {
                            continue;
                          }
                        }
                        goto LABEL_149;
                      }
                      a1[*v4] = 1;
                    }
                    PBReaderRecallMark();
                  }
                  else
                  {
                    if ((v71 & 7) != 0) {
                      goto LABEL_602;
                    }
                    while (1)
                    {
                      uint64_t v79 = *v2;
                      uint64_t v80 = *(void *)&a1[v79];
                      unint64_t v81 = v80 + 1;
                      if (v80 == -1 || v81 > *(void *)&a1[*v3]) {
                        break;
                      }
                      int v82 = *(char *)(*(void *)&a1[*v5] + v80);
                      *(void *)&a1[v79] = v81;
                      if (v82 < 0)
                      {
                        unsigned int v83 = v77++;
                        if (v83 <= 8) {
                          continue;
                        }
                      }
                      goto LABEL_122;
                    }
                    a1[*v4] = 1;
                  }
                }
                else if ((PBReaderSkipValueWithTag() & 1) == 0)
                {
                  goto LABEL_602;
                }
              }
              int v103 = a1[*v4];
              PBReaderRecallMark();
              if (v103)
              {
LABEL_603:
                PBReaderRecallMark();
                goto LABEL_607;
              }
LABEL_196:
              PBReaderRecallMark();
            }
            if (v63 == 2)
            {
              if (v61 != 2 || !PBReaderPlaceMark()) {
                goto LABEL_603;
              }
              [a1 position];
              [a1 length];
LABEL_163:
              while (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
              {
                char v89 = 0;
                unsigned int v90 = 0;
                unint64_t v91 = 0;
                while (1)
                {
                  uint64_t v92 = *v2;
                  uint64_t v93 = *(void *)&a1[v92];
                  unint64_t v94 = v93 + 1;
                  if (v93 == -1 || v94 > *(void *)&a1[*v3]) {
                    break;
                  }
                  char v95 = *(unsigned char *)(*(void *)&a1[*v5] + v93);
                  *(void *)&a1[v92] = v94;
                  v91 |= (unint64_t)(v95 & 0x7F) << v89;
                  if ((v95 & 0x80) == 0) {
                    goto LABEL_173;
                  }
                  v89 += 7;
                  BOOL v13 = v90++ >= 9;
                  if (v13)
                  {
                    unint64_t v91 = 0;
                    int v96 = a1[*v4];
                    goto LABEL_175;
                  }
                }
                a1[*v4] = 1;
LABEL_173:
                int v96 = a1[*v4];
                if (a1[*v4]) {
                  unint64_t v91 = 0;
                }
LABEL_175:
                if (v96 || (v91 & 7) == 4) {
                  break;
                }
                if ((v91 >> 3) == 2)
                {
                  if ((v91 & 7) != 0) {
                    goto LABEL_602;
                  }
                  unsigned int v98 = 0;
                  while (1)
                  {
                    uint64_t v99 = *v2;
                    uint64_t v100 = *(void *)&a1[v99];
                    unint64_t v101 = v100 + 1;
                    if (v100 == -1 || v101 > *(void *)&a1[*v3]) {
                      break;
                    }
                    int v102 = *(char *)(*(void *)&a1[*v5] + v100);
                    *(void *)&a1[v99] = v101;
                    if (v102 < 0)
                    {
                      BOOL v32 = v98++ > 8;
                      if (!v32) {
                        continue;
                      }
                    }
                    goto LABEL_163;
                  }
                  a1[*v4] = 1;
                }
                else if (!PBReaderSkipValueWithTag())
                {
                  goto LABEL_602;
                }
              }
              int v104 = a1[*v4];
              PBReaderRecallMark();
              if (v104) {
                goto LABEL_603;
              }
              goto LABEL_196;
            }
            if (v63 == 1)
            {
              if ((v55 & 7) != 0) {
                goto LABEL_603;
              }
              unsigned int v64 = 0;
              while (1)
              {
                uint64_t v65 = *v2;
                uint64_t v66 = *(void *)&a1[v65];
                unint64_t v67 = v66 + 1;
                if (v66 == -1 || v67 > *(void *)&a1[*v3]) {
                  break;
                }
                int v68 = *(char *)(*(void *)&a1[*v5] + v66);
                *(void *)&a1[v65] = v67;
                if (v68 < 0)
                {
                  BOOL v32 = v64++ > 8;
                  if (!v32) {
                    continue;
                  }
                }
                goto LABEL_92;
              }
              a1[*v4] = 1;
            }
            else if ((PBReaderSkipValueWithTag() & 1) == 0)
            {
              goto LABEL_603;
            }
          }
        }
        break;
      }
      int v277 = a1[*v4];
      PBReaderRecallMark();
      if (v277) {
        goto LABEL_608;
      }
      goto LABEL_581;
    case 2u:
      if (v41 != 2 || !PBReaderPlaceMark()) {
        goto LABEL_608;
      }
      [a1 position];
      [a1 length];
      while (2)
      {
        while (2)
        {
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
            goto LABEL_580;
          }
          char v106 = 0;
          unsigned int v107 = 0;
          unint64_t v108 = 0;
          while (1)
          {
            uint64_t v109 = *v2;
            uint64_t v110 = *(void *)&a1[v109];
            unint64_t v111 = v110 + 1;
            if (v110 == -1 || v111 > *(void *)&a1[*v3]) {
              break;
            }
            char v112 = *(unsigned char *)(*(void *)&a1[*v5] + v110);
            *(void *)&a1[v109] = v111;
            v108 |= (unint64_t)(v112 & 0x7F) << v106;
            if ((v112 & 0x80) == 0) {
              goto LABEL_217;
            }
            v106 += 7;
            BOOL v13 = v107++ >= 9;
            if (v13)
            {
              unint64_t v108 = 0;
              int v113 = a1[*v4];
              goto LABEL_219;
            }
          }
          a1[*v4] = 1;
LABEL_217:
          int v113 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v108 = 0;
          }
LABEL_219:
          int v114 = v108 & 7;
          if (v113 || v114 == 4) {
            goto LABEL_580;
          }
          if ((v108 >> 3) != 1)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_607;
            }
            continue;
          }
          break;
        }
        if (v114 == 2 && PBReaderPlaceMark() && GEOPDButtonItemIsValid(a1))
        {
          PBReaderRecallMark();
          continue;
        }
        goto LABEL_607;
      }
    case 3u:
      if (v41 != 2 || !PBReaderPlaceMark()) {
        goto LABEL_608;
      }
      [a1 position];
      [a1 length];
LABEL_233:
      while (2)
      {
        while (2)
        {
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
            goto LABEL_580;
          }
          char v116 = 0;
          unsigned int v117 = 0;
          unint64_t v118 = 0;
          while (1)
          {
            uint64_t v119 = *v2;
            uint64_t v120 = *(void *)&a1[v119];
            unint64_t v121 = v120 + 1;
            if (v120 == -1 || v121 > *(void *)&a1[*v3]) {
              break;
            }
            char v122 = *(unsigned char *)(*(void *)&a1[*v5] + v120);
            *(void *)&a1[v119] = v121;
            v118 |= (unint64_t)(v122 & 0x7F) << v116;
            if ((v122 & 0x80) == 0) {
              goto LABEL_243;
            }
            v116 += 7;
            BOOL v13 = v117++ >= 9;
            if (v13)
            {
              unint64_t v118 = 0;
              int v123 = a1[*v4];
              goto LABEL_245;
            }
          }
          a1[*v4] = 1;
LABEL_243:
          int v123 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v118 = 0;
          }
LABEL_245:
          int v124 = v118 & 7;
          if (v123 || v124 == 4) {
            goto LABEL_580;
          }
          unint64_t v126 = v118 >> 3;
          if ((v118 >> 3) == 3)
          {
            if ((v118 & 7) != 0) {
              goto LABEL_607;
            }
            unsigned int v132 = 0;
            while (1)
            {
              uint64_t v133 = *v2;
              uint64_t v134 = *(void *)&a1[v133];
              unint64_t v135 = v134 + 1;
              if (v134 == -1 || v135 > *(void *)&a1[*v3]) {
                break;
              }
              int v136 = *(char *)(*(void *)&a1[*v5] + v134);
              *(void *)&a1[v133] = v135;
              if (v136 < 0)
              {
                BOOL v32 = v132++ > 8;
                if (!v32) {
                  continue;
                }
              }
              goto LABEL_233;
            }
          }
          else
          {
            if (v126 == 2)
            {
              if (v124 == 2 && PBReaderPlaceMark() && GEOLocalizedStringIsValid(a1))
              {
                PBReaderRecallMark();
                continue;
              }
              goto LABEL_607;
            }
            if (v126 != 1)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0) {
                goto LABEL_607;
              }
              continue;
            }
            if ((v118 & 7) != 0) {
              goto LABEL_607;
            }
            unsigned int v127 = 0;
            while (1)
            {
              uint64_t v128 = *v2;
              uint64_t v129 = *(void *)&a1[v128];
              unint64_t v130 = v129 + 1;
              if (v129 == -1 || v130 > *(void *)&a1[*v3]) {
                break;
              }
              int v131 = *(char *)(*(void *)&a1[*v5] + v129);
              *(void *)&a1[v128] = v130;
              if (v131 < 0)
              {
                BOOL v32 = v127++ > 8;
                if (!v32) {
                  continue;
                }
              }
              goto LABEL_233;
            }
          }
          break;
        }
        a1[*v4] = 1;
        continue;
      }
    case 4u:
      if (v41 != 2 || !PBReaderPlaceMark()) {
        goto LABEL_608;
      }
      [a1 position];
      [a1 length];
LABEL_278:
      while (2)
      {
        while (2)
        {
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
            goto LABEL_526;
          }
          char v137 = 0;
          unsigned int v138 = 0;
          unint64_t v139 = 0;
          while (1)
          {
            uint64_t v140 = *v2;
            uint64_t v141 = *(void *)&a1[v140];
            unint64_t v142 = v141 + 1;
            if (v141 == -1 || v142 > *(void *)&a1[*v3]) {
              break;
            }
            char v143 = *(unsigned char *)(*(void *)&a1[*v5] + v141);
            *(void *)&a1[v140] = v142;
            v139 |= (unint64_t)(v143 & 0x7F) << v137;
            if ((v143 & 0x80) == 0) {
              goto LABEL_288;
            }
            v137 += 7;
            BOOL v13 = v138++ >= 9;
            if (v13)
            {
              unint64_t v139 = 0;
              int v144 = a1[*v4];
              goto LABEL_290;
            }
          }
          a1[*v4] = 1;
LABEL_288:
          int v144 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v139 = 0;
          }
LABEL_290:
          int v145 = v139 & 7;
          if (v144 || v145 == 4) {
            goto LABEL_526;
          }
          unint64_t v147 = v139 >> 3;
          if ((v139 >> 3) == 3)
          {
            if ((v139 & 7) != 0) {
              goto LABEL_607;
            }
            unsigned int v148 = 0;
            while (1)
            {
              uint64_t v149 = *v2;
              uint64_t v150 = *(void *)&a1[v149];
              unint64_t v151 = v150 + 1;
              if (v150 == -1 || v151 > *(void *)&a1[*v3]) {
                break;
              }
              int v152 = *(char *)(*(void *)&a1[*v5] + v150);
              *(void *)&a1[v149] = v151;
              if (v152 < 0)
              {
                BOOL v32 = v148++ > 8;
                if (!v32) {
                  continue;
                }
              }
              goto LABEL_278;
            }
          }
          else
          {
            if (v147 != 2)
            {
              if (v147 == 1 && v145 != 2 || (PBReaderSkipValueWithTag() & 1) == 0) {
                goto LABEL_607;
              }
              continue;
            }
            if ((v139 & 7) != 0) {
              goto LABEL_607;
            }
            unsigned int v153 = 0;
            while (1)
            {
              uint64_t v154 = *v2;
              uint64_t v155 = *(void *)&a1[v154];
              unint64_t v156 = v155 + 1;
              if (v155 == -1 || v156 > *(void *)&a1[*v3]) {
                break;
              }
              int v157 = *(char *)(*(void *)&a1[*v5] + v155);
              *(void *)&a1[v154] = v156;
              if (v157 < 0)
              {
                BOOL v32 = v153++ > 8;
                if (!v32) {
                  continue;
                }
              }
              goto LABEL_278;
            }
          }
          break;
        }
        a1[*v4] = 1;
        continue;
      }
    case 5u:
      if (v41 == 2 && PBReaderPlaceMark() && GEOPDTemplatePlaceModuleConfigurationIsValid(a1)) {
        goto LABEL_581;
      }
      goto LABEL_608;
    case 6u:
      if (v41 != 2 || !PBReaderPlaceMark()) {
        goto LABEL_608;
      }
      [a1 position];
      [a1 length];
LABEL_325:
      while (2)
      {
        while (2)
        {
          while (2)
          {
            if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
              goto LABEL_582;
            }
            char v158 = 0;
            unsigned int v159 = 0;
            unint64_t v160 = 0;
            while (1)
            {
              uint64_t v161 = *v2;
              uint64_t v162 = *(void *)&a1[v161];
              unint64_t v163 = v162 + 1;
              if (v162 == -1 || v163 > *(void *)&a1[*v3]) {
                break;
              }
              char v164 = *(unsigned char *)(*(void *)&a1[*v5] + v162);
              *(void *)&a1[v161] = v163;
              v160 |= (unint64_t)(v164 & 0x7F) << v158;
              if ((v164 & 0x80) == 0) {
                goto LABEL_335;
              }
              v158 += 7;
              BOOL v13 = v159++ >= 9;
              if (v13)
              {
                unint64_t v160 = 0;
                int v165 = a1[*v4];
                goto LABEL_337;
              }
            }
            a1[*v4] = 1;
LABEL_335:
            int v165 = a1[*v4];
            if (a1[*v4]) {
              unint64_t v160 = 0;
            }
LABEL_337:
            int v166 = v160 & 7;
            if (v165 || v166 == 4)
            {
LABEL_582:
              int v276 = a1[*v4];
              PBReaderRecallMark();
              if (v276) {
                goto LABEL_608;
              }
LABEL_581:
              PBReaderRecallMark();
              goto LABEL_52;
            }
            unint64_t v168 = v160 >> 3;
            if ((v160 >> 3) == 3)
            {
              if ((v160 & 7) == 0)
              {
                unsigned int v183 = 0;
                do
                {
                  uint64_t v184 = *v2;
                  uint64_t v185 = *(void *)&a1[v184];
                  unint64_t v186 = v185 + 1;
                  if (v185 == -1 || v186 > *(void *)&a1[*v3])
                  {
                    a1[*v4] = 1;
                    goto LABEL_325;
                  }
                  int v187 = *(char *)(*(void *)&a1[*v5] + v185);
                  *(void *)&a1[v184] = v186;
                  if ((v187 & 0x80000000) == 0) {
                    break;
                  }
                  BOOL v32 = v183++ > 8;
                }
                while (!v32);
                continue;
              }
              goto LABEL_607;
            }
            break;
          }
          if (v168 == 2)
          {
            if (v166 != 2 || !PBReaderPlaceMark()) {
              goto LABEL_607;
            }
            [a1 position];
            [a1 length];
LABEL_386:
            while (2)
            {
              if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
                goto LABEL_451;
              }
              char v188 = 0;
              unsigned int v189 = 0;
              unint64_t v190 = 0;
              while (1)
              {
                uint64_t v191 = *v2;
                uint64_t v192 = *(void *)&a1[v191];
                unint64_t v193 = v192 + 1;
                if (v192 == -1 || v193 > *(void *)&a1[*v3]) {
                  break;
                }
                char v194 = *(unsigned char *)(*(void *)&a1[*v5] + v192);
                *(void *)&a1[v191] = v193;
                v190 |= (unint64_t)(v194 & 0x7F) << v188;
                if ((v194 & 0x80) == 0) {
                  goto LABEL_396;
                }
                v188 += 7;
                BOOL v13 = v189++ >= 9;
                if (v13)
                {
                  unint64_t v190 = 0;
                  int v195 = a1[*v4];
                  goto LABEL_398;
                }
              }
              a1[*v4] = 1;
LABEL_396:
              int v195 = a1[*v4];
              if (a1[*v4]) {
                unint64_t v190 = 0;
              }
LABEL_398:
              int v196 = v190 & 7;
              if (v195 || v196 == 4)
              {
LABEL_451:
                int v219 = a1[*v4];
                PBReaderRecallMark();
                if (!v219) {
                  goto LABEL_452;
                }
                goto LABEL_607;
              }
              if ((v190 >> 3) == 2)
              {
                if (v196 == 2 && PBReaderPlaceMark())
                {
                  [a1 position];
                  [a1 length];
                  while (1)
                  {
                    while (1)
                    {
LABEL_406:
                      if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
                        goto LABEL_445;
                      }
                      char v198 = 0;
                      unsigned int v199 = 0;
                      unint64_t v200 = 0;
                      while (1)
                      {
                        uint64_t v201 = *v2;
                        uint64_t v202 = *(void *)&a1[v201];
                        unint64_t v203 = v202 + 1;
                        if (v202 == -1 || v203 > *(void *)&a1[*v3]) {
                          break;
                        }
                        char v204 = *(unsigned char *)(*(void *)&a1[*v5] + v202);
                        *(void *)&a1[v201] = v203;
                        v200 |= (unint64_t)(v204 & 0x7F) << v198;
                        if ((v204 & 0x80) == 0) {
                          goto LABEL_416;
                        }
                        v198 += 7;
                        BOOL v13 = v199++ >= 9;
                        if (v13)
                        {
                          unint64_t v200 = 0;
                          int v205 = a1[*v4];
                          goto LABEL_418;
                        }
                      }
                      a1[*v4] = 1;
LABEL_416:
                      int v205 = a1[*v4];
                      if (a1[*v4]) {
                        unint64_t v200 = 0;
                      }
LABEL_418:
                      if (v205 || (v200 & 7) == 4)
                      {
LABEL_445:
                        int v217 = a1[*v4];
                        PBReaderRecallMark();
                        if (v217) {
                          goto LABEL_606;
                        }
                        PBReaderRecallMark();
                        goto LABEL_386;
                      }
                      if ((v200 >> 3) != 2) {
                        break;
                      }
                      if ((v200 & 7) != 0) {
                        goto LABEL_605;
                      }
                      unsigned int v212 = 0;
                      while (1)
                      {
                        uint64_t v213 = *v2;
                        uint64_t v214 = *(void *)&a1[v213];
                        unint64_t v215 = v214 + 1;
                        if (v214 == -1 || v215 > *(void *)&a1[*v3]) {
                          break;
                        }
                        int v216 = *(char *)(*(void *)&a1[*v5] + v214);
                        *(void *)&a1[v213] = v215;
                        if (v216 < 0)
                        {
                          BOOL v32 = v212++ > 8;
                          if (!v32) {
                            continue;
                          }
                        }
                        goto LABEL_406;
                      }
LABEL_440:
                      a1[*v4] = 1;
                    }
                    if ((v200 >> 3) == 1)
                    {
                      if ((v200 & 7) != 0) {
                        goto LABEL_605;
                      }
                      unsigned int v207 = 0;
                      while (1)
                      {
                        uint64_t v208 = *v2;
                        uint64_t v209 = *(void *)&a1[v208];
                        unint64_t v210 = v209 + 1;
                        if (v209 == -1 || v210 > *(void *)&a1[*v3]) {
                          goto LABEL_440;
                        }
                        int v211 = *(char *)(*(void *)&a1[*v5] + v209);
                        *(void *)&a1[v208] = v210;
                        if (v211 < 0)
                        {
                          BOOL v32 = v207++ > 8;
                          if (!v32) {
                            continue;
                          }
                        }
                        goto LABEL_406;
                      }
                    }
                    if ((PBReaderSkipValueWithTag() & 1) == 0)
                    {
LABEL_605:
                      PBReaderRecallMark();
                      break;
                    }
                  }
                }
              }
              else if (PBReaderSkipValueWithTag())
              {
                continue;
              }
              break;
            }
LABEL_606:
            PBReaderRecallMark();
            goto LABEL_607;
          }
          if (v168 != 1)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_607;
            }
            continue;
          }
          break;
        }
        if (v166 == 2 && PBReaderPlaceMark())
        {
          [a1 position];
          [a1 length];
LABEL_347:
          while (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
          {
            char v169 = 0;
            unsigned int v170 = 0;
            unint64_t v171 = 0;
            while (1)
            {
              uint64_t v172 = *v2;
              uint64_t v173 = *(void *)&a1[v172];
              unint64_t v174 = v173 + 1;
              if (v173 == -1 || v174 > *(void *)&a1[*v3]) {
                break;
              }
              char v175 = *(unsigned char *)(*(void *)&a1[*v5] + v173);
              *(void *)&a1[v172] = v174;
              v171 |= (unint64_t)(v175 & 0x7F) << v169;
              if ((v175 & 0x80) == 0) {
                goto LABEL_357;
              }
              v169 += 7;
              BOOL v13 = v170++ >= 9;
              if (v13)
              {
                unint64_t v171 = 0;
                int v176 = a1[*v4];
                goto LABEL_359;
              }
            }
            a1[*v4] = 1;
LABEL_357:
            int v176 = a1[*v4];
            if (a1[*v4]) {
              unint64_t v171 = 0;
            }
LABEL_359:
            if (v176 || (v171 & 7) == 4) {
              break;
            }
            if ((v171 >> 3) == 1)
            {
              if ((v171 & 7) != 0) {
                goto LABEL_606;
              }
              unsigned int v178 = 0;
              while (1)
              {
                uint64_t v179 = *v2;
                uint64_t v180 = *(void *)&a1[v179];
                unint64_t v181 = v180 + 1;
                if (v180 == -1 || v181 > *(void *)&a1[*v3]) {
                  break;
                }
                int v182 = *(char *)(*(void *)&a1[*v5] + v180);
                *(void *)&a1[v179] = v181;
                if (v182 < 0)
                {
                  BOOL v32 = v178++ > 8;
                  if (!v32) {
                    continue;
                  }
                }
                goto LABEL_347;
              }
              a1[*v4] = 1;
            }
            else if (!PBReaderSkipValueWithTag())
            {
              goto LABEL_606;
            }
          }
          int v218 = a1[*v4];
          PBReaderRecallMark();
          if (!v218)
          {
LABEL_452:
            PBReaderRecallMark();
            continue;
          }
        }
        break;
      }
LABEL_607:
      PBReaderRecallMark();
LABEL_608:
      PBReaderRecallMark();
LABEL_609:
      PBReaderRecallMark();
LABEL_610:
      PBReaderRecallMark();
      return 0;
    case 7u:
      if (v41 != 2 || !PBReaderPlaceMark()) {
        goto LABEL_608;
      }
      [a1 position];
      [a1 length];
LABEL_457:
      while (2)
      {
        while (2)
        {
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
            goto LABEL_580;
          }
          char v220 = 0;
          unsigned int v221 = 0;
          unint64_t v222 = 0;
          while (1)
          {
            uint64_t v223 = *v2;
            uint64_t v224 = *(void *)&a1[v223];
            unint64_t v225 = v224 + 1;
            if (v224 == -1 || v225 > *(void *)&a1[*v3]) {
              break;
            }
            char v226 = *(unsigned char *)(*(void *)&a1[*v5] + v224);
            *(void *)&a1[v223] = v225;
            v222 |= (unint64_t)(v226 & 0x7F) << v220;
            if ((v226 & 0x80) == 0) {
              goto LABEL_467;
            }
            v220 += 7;
            BOOL v13 = v221++ >= 9;
            if (v13)
            {
              unint64_t v222 = 0;
              int v227 = a1[*v4];
              goto LABEL_469;
            }
          }
          a1[*v4] = 1;
LABEL_467:
          int v227 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v222 = 0;
          }
LABEL_469:
          int v228 = v222 & 7;
          if (v227 || v228 == 4) {
            goto LABEL_580;
          }
          if ((v222 >> 3) != 1)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_607;
            }
            continue;
          }
          break;
        }
        if (v228 == 2)
        {
          if (PBReaderPlaceMark())
          {
            while (1)
            {
LABEL_484:
              if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || (unsigned int v235 = a1[*v4], a1[*v4]))
              {
                PBReaderRecallMark();
                goto LABEL_457;
              }
              while (1)
              {
                uint64_t v236 = *v2;
                uint64_t v237 = *(void *)&a1[v236];
                unint64_t v238 = v237 + 1;
                if (v237 == -1 || v238 > *(void *)&a1[*v3]) {
                  break;
                }
                int v239 = *(char *)(*(void *)&a1[*v5] + v237);
                *(void *)&a1[v236] = v238;
                if (v239 < 0)
                {
                  BOOL v13 = v235++ >= 9;
                  if (!v13) {
                    continue;
                  }
                }
                goto LABEL_484;
              }
              a1[*v4] = 1;
            }
          }
        }
        else if ((v222 & 7) == 0)
        {
          do
          {
            uint64_t v230 = *v2;
            uint64_t v231 = *(void *)&a1[v230];
            unint64_t v232 = v231 + 1;
            if (v231 == -1 || v232 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
              goto LABEL_457;
            }
            int v233 = *(char *)(*(void *)&a1[*v5] + v231);
            *(void *)&a1[v230] = v232;
            if ((v233 & 0x80000000) == 0) {
              break;
            }
            unsigned int v234 = v228++;
          }
          while (v234 <= 8);
          continue;
        }
        goto LABEL_607;
      }
    case 8u:
      if (v41 != 2 || !PBReaderPlaceMark()) {
        goto LABEL_608;
      }
      [a1 position];
      [a1 length];
LABEL_498:
      while (2)
      {
        if (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
        {
          char v240 = 0;
          unsigned int v241 = 0;
          unint64_t v242 = 0;
          while (1)
          {
            uint64_t v243 = *v2;
            uint64_t v244 = *(void *)&a1[v243];
            unint64_t v245 = v244 + 1;
            if (v244 == -1 || v245 > *(void *)&a1[*v3]) {
              break;
            }
            char v246 = *(unsigned char *)(*(void *)&a1[*v5] + v244);
            *(void *)&a1[v243] = v245;
            v242 |= (unint64_t)(v246 & 0x7F) << v240;
            if ((v246 & 0x80) == 0) {
              goto LABEL_508;
            }
            v240 += 7;
            BOOL v13 = v241++ >= 9;
            if (v13)
            {
              unint64_t v242 = 0;
              int v247 = a1[*v4];
              goto LABEL_510;
            }
          }
          a1[*v4] = 1;
LABEL_508:
          int v247 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v242 = 0;
          }
LABEL_510:
          if (!v247 && (v242 & 7) != 4)
          {
            if ((v242 >> 3) != 1)
            {
              if (!PBReaderSkipValueWithTag()) {
                goto LABEL_607;
              }
              continue;
            }
            if ((v242 & 7) == 0)
            {
              unsigned int v249 = 0;
              do
              {
                uint64_t v250 = *v2;
                uint64_t v251 = *(void *)&a1[v250];
                unint64_t v252 = v251 + 1;
                if (v251 == -1 || v252 > *(void *)&a1[*v3])
                {
                  a1[*v4] = 1;
                  goto LABEL_498;
                }
                int v253 = *(char *)(*(void *)&a1[*v5] + v251);
                *(void *)&a1[v250] = v252;
                if ((v253 & 0x80000000) == 0) {
                  break;
                }
                BOOL v32 = v249++ > 8;
              }
              while (!v32);
              continue;
            }
            goto LABEL_607;
          }
        }
        break;
      }
LABEL_526:
      int v254 = a1[*v4];
      PBReaderRecallMark();
      if (v254) {
        goto LABEL_608;
      }
      goto LABEL_581;
    case 9u:
      if (v41 != 2 || !PBReaderPlaceMark()) {
        goto LABEL_608;
      }
      [a1 position];
      [a1 length];
      while (2)
      {
        while (2)
        {
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
            goto LABEL_580;
          }
          char v255 = 0;
          unsigned int v256 = 0;
          unint64_t v257 = 0;
          while (1)
          {
            uint64_t v258 = *v2;
            uint64_t v259 = *(void *)&a1[v258];
            unint64_t v260 = v259 + 1;
            if (v259 == -1 || v260 > *(void *)&a1[*v3]) {
              break;
            }
            char v261 = *(unsigned char *)(*(void *)&a1[*v5] + v259);
            *(void *)&a1[v258] = v260;
            v257 |= (unint64_t)(v261 & 0x7F) << v255;
            if ((v261 & 0x80) == 0) {
              goto LABEL_541;
            }
            v255 += 7;
            BOOL v13 = v256++ >= 9;
            if (v13)
            {
              unint64_t v257 = 0;
              int v262 = a1[*v4];
              goto LABEL_543;
            }
          }
          a1[*v4] = 1;
LABEL_541:
          int v262 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v257 = 0;
          }
LABEL_543:
          int v263 = v257 & 7;
          if (v262 || v263 == 4) {
            goto LABEL_580;
          }
          if ((v257 >> 3) != 1)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_607;
            }
            continue;
          }
          break;
        }
        if (v263 == 2 && PBReaderPlaceMark() && GEOPDButtonItemIsValid(a1))
        {
          PBReaderRecallMark();
          continue;
        }
        goto LABEL_607;
      }
    case 0xAu:
      if (v41 != 2 || !PBReaderPlaceMark()) {
        goto LABEL_608;
      }
      [a1 position];
      [a1 length];
      while (2)
      {
        if (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
        {
          char v265 = 0;
          unsigned int v266 = 0;
          unint64_t v267 = 0;
          while (1)
          {
            uint64_t v268 = *v2;
            uint64_t v269 = *(void *)&a1[v268];
            unint64_t v270 = v269 + 1;
            if (v269 == -1 || v270 > *(void *)&a1[*v3]) {
              break;
            }
            char v271 = *(unsigned char *)(*(void *)&a1[*v5] + v269);
            *(void *)&a1[v268] = v270;
            v267 |= (unint64_t)(v271 & 0x7F) << v265;
            if ((v271 & 0x80) == 0) {
              goto LABEL_567;
            }
            v265 += 7;
            BOOL v13 = v266++ >= 9;
            if (v13)
            {
              unint64_t v267 = 0;
              int v272 = a1[*v4];
              goto LABEL_569;
            }
          }
          a1[*v4] = 1;
LABEL_567:
          int v272 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v267 = 0;
          }
LABEL_569:
          int v273 = v267 & 7;
          if (!v272 && v273 != 4)
          {
            if ((v267 >> 3) != 1)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0) {
                goto LABEL_607;
              }
              continue;
            }
            if (v273 == 2 && PBReaderPlaceMark() && GEOPDTemplatePlaceModuleConfigurationIsValid(a1))
            {
              PBReaderRecallMark();
              continue;
            }
            goto LABEL_607;
          }
        }
        break;
      }
LABEL_580:
      int v275 = a1[*v4];
      PBReaderRecallMark();
      if (v275) {
        goto LABEL_608;
      }
      goto LABEL_581;
    default:
      if (PBReaderSkipValueWithTag()) {
        goto LABEL_52;
      }
      goto LABEL_608;
  }
}

void GEOPathMatcherRoadNetwork::find_roads(uint64_t a1, _DWORD *a2, int a3, void **a4, double a5)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  LODWORD(a5) = a2[1];
  long double v9 = (double)*(unint64_t *)&a5 * -6.28318531 / 4294967300.0 + 3.14159265;
  double v10 = exp(v9);
  long double v11 = exp(-v9);
  long double v12 = atan((v10 - v11) * 0.5);
  HIDWORD(v13) = 1078765020;
  LODWORD(v13) = *a2;
  uint64_t v37 = objc_msgSend(*(id *)(a1 + 128), "findRoadsNearCoordinate:radius:", (double)(v12 * 57.2957795), (double)v13 * 360.0 / 4294967300.0 + -180.0, (double)a3 / 100.0);
  a4[1] = *a4;
  std::vector<GEOPathMatcherRoadKey>::reserve(a4, [v37 count]);
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  id v14 = v37;
  uint64_t v15 = [v14 countByEnumeratingWithState:&v38 objects:v43 count:16];
  if (v15)
  {
    uint64_t v16 = *(void *)v39;
    do
    {
      for (uint64_t i = 0; i != v15; ++i)
      {
        if (*(void *)v39 != v16) {
          objc_enumerationMutation(v14);
        }
        unsigned int v18 = *(void **)(*((void *)&v38 + 1) + 8 * i);
        if ((unint64_t)[v18 coordinateCount] < 2)
        {
          uint64_t v20 = GEOGetGEOPathMatcherLog();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
          {
            uint64_t v21 = [v18 coordinatesDescription];
            *(_DWORD *)buf = 138478083;
            *(void *)&uint8_t buf[4] = v18;
            *(_WORD *)&buf[12] = 2113;
            *(void *)&buf[14] = v21;
            _os_log_impl(&dword_188D96000, v20, OS_LOG_TYPE_ERROR, "Found a road that has fewer than 2 points. Not reporting this road to the path-codec library. %{private}@ | %{private}@", buf, 0x16u);
          }
        }
        else
        {
          unint64_t v19 = *(void **)(a1 + 128);
          if (v19) {
            [v19 keyForRoad:v18];
          }
          else {
            memset(buf, 0, sizeof(buf));
          }
          unint64_t v22 = (char *)a4[1];
          unint64_t v23 = (unint64_t)a4[2];
          if ((unint64_t)v22 >= v23)
          {
            uint64_t v26 = (v22 - (unsigned char *)*a4) >> 5;
            unint64_t v27 = v26 + 1;
            if ((unint64_t)(v26 + 1) >> 59) {
              std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v28 = v23 - (void)*a4;
            if (v28 >> 4 > v27) {
              unint64_t v27 = v28 >> 4;
            }
            if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v29 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v29 = v27;
            }
            if (v29) {
              unint64_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::ControlPoint>>((uint64_t)(a4 + 2), v29);
            }
            else {
              unint64_t v30 = 0;
            }
            int v31 = &v30[32 * v26];
            long long v32 = *(_OWORD *)&buf[16];
            *(_OWORD *)int v31 = *(_OWORD *)buf;
            *((_OWORD *)v31 + 1) = v32;
            unsigned int v34 = (char *)*a4;
            char v33 = (char *)a4[1];
            unint64_t v35 = v31;
            if (v33 != *a4)
            {
              do
              {
                long long v36 = *((_OWORD *)v33 - 1);
                *((_OWORD *)v35 - 2) = *((_OWORD *)v33 - 2);
                *((_OWORD *)v35 - 1) = v36;
                v35 -= 32;
                v33 -= 32;
              }
              while (v33 != v34);
              char v33 = (char *)*a4;
            }
            int v25 = v31 + 32;
            *a4 = v35;
            a4[1] = v31 + 32;
            a4[2] = &v30[32 * v29];
            if (v33) {
              operator delete(v33);
            }
          }
          else
          {
            long long v24 = *(_OWORD *)&buf[16];
            *(_OWORD *)unint64_t v22 = *(_OWORD *)buf;
            *((_OWORD *)v22 + 1) = v24;
            int v25 = v22 + 32;
          }
          a4[1] = v25;
        }
      }
      uint64_t v15 = [v14 countByEnumeratingWithState:&v38 objects:v43 count:16];
    }
    while (v15);
  }
}

void sub_188EE3E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

id GEOStringForExternalRequestCounterInfoArray(void *a1)
{
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v79 = objc_alloc_init(MEMORY[0x1E4F28E78]);
  long long v81 = 0u;
  long long v82 = 0u;
  long long v83 = 0u;
  long long v84 = 0u;
  id obj = v1;
  uint64_t v80 = [obj countByEnumeratingWithState:&v81 objects:v85 count:16];
  if (v80)
  {
    uint64_t v78 = *(void *)v82;
    do
    {
      for (uint64_t i = 0; i != v80; ++i)
      {
        if (*(void *)v82 != v78) {
          objc_enumerationMutation(obj);
        }
        id v3 = *(id *)(*((void *)&v81 + 1) + 8 * i);
        id v4 = v79;
        double v5 = [v3 requestType];
        char v6 = [v3 appId];
        id v7 = v5;
        id v8 = v4;
        [v8 appendString:&stru_1ED51F370];
        [v8 appendString:&stru_1ED51F370];
        [v8 appendString:v7];
        uint64_t v9 = [&stru_1ED51F370 length];
        uint64_t v10 = [&stru_1ED51F370 length] + v9;
        uint64_t v11 = [v7 length];

        uint64_t v12 = v10 + [@" " length];
        unint64_t v13 = v12 + [v6 length] + v11;
        BOOL v14 = v13 <= 0x3C;
        unint64_t v15 = 60 - v13;
        if (v14) {
          unint64_t v16 = v15;
        }
        else {
          unint64_t v16 = 0;
        }
        char v17 = [&stru_1ED51F370 stringByPaddingToLength:v16 withString:@" " startingAtIndex:0];
        [v8 appendString:v17];

        [v8 appendString:@" "];
        [v8 appendString:v6];
        [v8 appendString:@"\n"];

        unsigned int v18 = [&stru_1ED51F370 stringByPaddingToLength:60 withString:@"-" startingAtIndex:0];
        [v8 appendString:v18];

        [v8 appendString:@"\n"];
        uint64_t v19 = [v3 startTime];
        if (v19
          && (uint64_t v20 = (void *)v19,
              [v3 endTime],
              uint64_t v21 = objc_claimAutoreleasedReturnValue(),
              v21,
              v20,
              v21))
        {
          unint64_t v22 = [v3 endTime];
          unint64_t v23 = [v3 startTime];
          [v22 timeIntervalSinceDate:v23];
          double v25 = v24;

          objc_msgSend(NSString, "stringWithFormat:", @"%.03fs", fmax(v25, 0.0));
          uint64_t v26 = (__CFString *)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          uint64_t v26 = &stru_1ED51F370;
        }
        unint64_t v27 = [v3 requestSubtype];
        uint64_t v28 = v26;
        id v29 = v8;
        [v29 appendString:&stru_1ED51F370];
        [v29 appendString:@"Subtype: "];
        [v29 appendString:v27];
        uint64_t v30 = [&stru_1ED51F370 length];
        uint64_t v31 = [@"Subtype: " length] + v30;
        uint64_t v32 = [v27 length];
        uint64_t v33 = v31 + [@" " length];
        unint64_t v34 = v33 + [(__CFString *)v28 length] + v32;
        BOOL v14 = v34 <= 0x3C;
        unint64_t v35 = 60 - v34;
        if (v14) {
          unint64_t v36 = v35;
        }
        else {
          unint64_t v36 = 0;
        }
        uint64_t v37 = [&stru_1ED51F370 stringByPaddingToLength:v36 withString:@" " startingAtIndex:0];
        [v29 appendString:v37];

        [v29 appendString:@" "];
        [v29 appendString:v28];

        [v29 appendString:@"\n"];
        if ([v3 usedInterface])
        {
          long long v38 = GEORequestCounterInterfaceTypesToStrings([v3 usedInterface]);
          long long v39 = [v38 componentsJoinedByString:@", "];
        }
        else
        {
          long long v39 = &stru_1ED51F370;
        }
        long long v40 = [v3 source];
        long long v41 = v39;
        id v42 = v29;
        [v42 appendString:&stru_1ED51F370];
        [v42 appendString:@"Source: "];
        [v42 appendString:v40];
        uint64_t v43 = [&stru_1ED51F370 length];
        uint64_t v44 = [@"Source: " length] + v43;
        uint64_t v45 = [v40 length];
        uint64_t v46 = v44 + [@" " length];
        unint64_t v47 = v46 + [(__CFString *)v41 length] + v45;
        BOOL v14 = v47 <= 0x3C;
        unint64_t v48 = 60 - v47;
        if (v14) {
          unint64_t v49 = v48;
        }
        else {
          unint64_t v49 = 0;
        }
        int v50 = [&stru_1ED51F370 stringByPaddingToLength:v49 withString:@" " startingAtIndex:0];
        [v42 appendString:v50];

        [v42 appendString:@" "];
        [v42 appendString:v41];

        [v42 appendString:@"\n"];
        if ([v3 xmitBytes])
        {
          int v51 = _byteFormatter();
          BOOL v52 = objc_msgSend(v51, "stringFromByteCount:", objc_msgSend(v3, "xmitBytes"));

          id v53 = v52;
          id v54 = v42;
          [v54 appendString:&stru_1ED51F370];
          [v54 appendString:@"Xmit: "];
          [v54 appendString:v53];
          uint64_t v55 = [&stru_1ED51F370 length];
          uint64_t v56 = [@"Xmit: " length] + v55;
          uint64_t v57 = [v53 length];

          uint64_t v58 = v56 + [&stru_1ED51F370 length];
          unint64_t v59 = v58 + [&stru_1ED51F370 length] + v57;
          BOOL v14 = v59 <= 0x3C;
          unint64_t v60 = 60 - v59;
          if (v14) {
            unint64_t v61 = v60;
          }
          else {
            unint64_t v61 = 0;
          }
          int v62 = [&stru_1ED51F370 stringByPaddingToLength:v61 withString:@" " startingAtIndex:0];
          [v54 appendString:v62];

          [v54 appendString:&stru_1ED51F370];
          [v54 appendString:&stru_1ED51F370];
          [v54 appendString:@"\n"];
        }
        if ([v3 recvBytes])
        {
          unint64_t v63 = _byteFormatter();
          unsigned int v64 = objc_msgSend(v63, "stringFromByteCount:", objc_msgSend(v3, "recvBytes"));

          id v65 = v64;
          id v66 = v42;
          [v66 appendString:&stru_1ED51F370];
          [v66 appendString:@"Recv: "];
          [v66 appendString:v65];
          uint64_t v67 = [&stru_1ED51F370 length];
          uint64_t v68 = [@"Recv: " length] + v67;
          uint64_t v69 = [v65 length];

          uint64_t v70 = v68 + [&stru_1ED51F370 length];
          unint64_t v71 = v70 + [&stru_1ED51F370 length] + v69;
          BOOL v14 = v71 <= 0x3C;
          unint64_t v72 = 60 - v71;
          if (v14) {
            unint64_t v73 = v72;
          }
          else {
            unint64_t v73 = 0;
          }
          unint64_t v74 = [&stru_1ED51F370 stringByPaddingToLength:v73 withString:@" " startingAtIndex:0];
          [v66 appendString:v74];

          [v66 appendString:&stru_1ED51F370];
          [v66 appendString:&stru_1ED51F370];
          [v66 appendString:@"\n"];
        }
        [v42 appendString:@"\n"];
      }
      uint64_t v80 = [obj countByEnumeratingWithState:&v81 objects:v85 count:16];
    }
    while (v80);
  }

  char v75 = (void *)[v79 copy];

  return v75;
}

void sub_188EE4E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
}

id GEOCSVStringForRequestCounterLogArray(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = objc_alloc_init(MEMORY[0x1E4F28E78]);
  [v2 appendString:@"App ID, Type, Result, Bytes Sent, Bytes Recieved, Start Time, End Time, "];
  id v3 = GEORequestCounterInterfaceTypesToStrings(287);
  id v4 = [v3 componentsJoinedByString:@", "];
  [v2 appendString:v4];

  [v2 appendString:@"\n"];
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v5 = v1;
  uint64_t v6 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v13;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v13 != v8) {
          objc_enumerationMutation(v5);
        }
        objc_msgSend(*(id *)(*((void *)&v12 + 1) + 8 * i), "_appendFormattedCSVStringTo:", v2, (void)v12);
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v7);
  }

  uint64_t v10 = (void *)[v2 copy];

  return v10;
}

BOOL GEOPDSimpleRestaurantMenuTextFilterReadAllFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    id v4 = (int *)MEMORY[0x1E4F940E8];
    id v5 = (int *)MEMORY[0x1E4F940E0];
    uint64_t v6 = (int *)MEMORY[0x1E4F940C8];
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      int v8 = v3[*v6];
      if (*(void *)&v3[*v4] >= *(void *)&v3[*v5]) {
        break;
      }
      if (v3[*v6])
      {
        int v8 = 1;
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      uint64_t v11 = 0;
      while (1)
      {
        uint64_t v12 = *v4;
        uint64_t v13 = *(void *)&v3[v12];
        unint64_t v14 = v13 + 1;
        if (v13 == -1 || v14 > *(void *)&v3[*v5]) {
          break;
        }
        char v15 = *(unsigned char *)(*(void *)&v3[*v7] + v13);
        *(void *)&v3[v12] = v14;
        v11 |= (unint64_t)(v15 & 0x7F) << v9;
        if ((v15 & 0x80) == 0) {
          goto LABEL_13;
        }
        v9 += 7;
        if (v10++ >= 9)
        {
          char v17 = 0;
          int v8 = v3[*v6];
          goto LABEL_16;
        }
      }
      v3[*v6] = 1;
LABEL_13:
      int v8 = v3[*v6];
      if (v3[*v6]) {
        char v17 = 0;
      }
      else {
        char v17 = v11;
      }
LABEL_16:
      if (v8) {
        BOOL v18 = 1;
      }
      else {
        BOOL v18 = (v17 & 7) == 4;
      }
      if (v18) {
        break;
      }
      if (!*(void *)(a1 + 8))
      {
        id v19 = objc_alloc_init(MEMORY[0x1E4F940B0]);
        uint64_t v20 = *(void **)(a1 + 8);
        *(void *)(a1 + 8) = v19;
      }
      if ((PBUnknownFieldAdd() & 1) == 0) {
        goto LABEL_23;
      }
    }
    BOOL v21 = v8 == 0;
  }
  else
  {
LABEL_23:
    BOOL v21 = 0;
  }
  objc_sync_exit(v3);

  return v21;
}

void sub_188EE5168(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EE54CC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EE5638(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EE5B40(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDVehiclePositionFilterReadAllFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    id v4 = (int *)MEMORY[0x1E4F940E8];
    id v5 = (int *)MEMORY[0x1E4F940E0];
    uint64_t v6 = (int *)MEMORY[0x1E4F940C8];
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      int v8 = v3[*v6];
      if (*(void *)&v3[*v4] >= *(void *)&v3[*v5]) {
        break;
      }
      if (v3[*v6])
      {
        int v8 = 1;
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      uint64_t v11 = 0;
      while (1)
      {
        uint64_t v12 = *v4;
        uint64_t v13 = *(void *)&v3[v12];
        unint64_t v14 = v13 + 1;
        if (v13 == -1 || v14 > *(void *)&v3[*v5]) {
          break;
        }
        char v15 = *(unsigned char *)(*(void *)&v3[*v7] + v13);
        *(void *)&v3[v12] = v14;
        v11 |= (unint64_t)(v15 & 0x7F) << v9;
        if ((v15 & 0x80) == 0) {
          goto LABEL_13;
        }
        v9 += 7;
        if (v10++ >= 9)
        {
          char v17 = 0;
          int v8 = v3[*v6];
          goto LABEL_16;
        }
      }
      v3[*v6] = 1;
LABEL_13:
      int v8 = v3[*v6];
      if (v3[*v6]) {
        char v17 = 0;
      }
      else {
        char v17 = v11;
      }
LABEL_16:
      if (v8) {
        BOOL v18 = 1;
      }
      else {
        BOOL v18 = (v17 & 7) == 4;
      }
      if (v18) {
        break;
      }
      if (!*(void *)(a1 + 8))
      {
        id v19 = objc_alloc_init(MEMORY[0x1E4F940B0]);
        uint64_t v20 = *(void **)(a1 + 8);
        *(void *)(a1 + 8) = v19;
      }
      if ((PBUnknownFieldAdd() & 1) == 0) {
        goto LABEL_23;
      }
    }
    BOOL v21 = v8 == 0;
  }
  else
  {
LABEL_23:
    BOOL v21 = 0;
  }
  objc_sync_exit(v3);

  return v21;
}

void sub_188EE5DA8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EE6224(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<unsigned long long,geo::StdAllocator<unsigned long long,geo::codec::Allocator>>::~vector[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 40))(a1[3], v2, a1[2] - v2);
  }
  return a1;
}

void sub_188EE6B8C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EE6ED8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EE70FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _GEOPDPlaceRequestParametersCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  -[GEOPDSearchParameters readAll:](*(void *)(a1 + 376), 1);
  -[GEOPDGeocodingParameters readAll:](*(void *)(a1 + 184), 1);
  -[GEOPDReverseGeocodingParameters readAll:](*(void *)(a1 + 352), 1);
  -[GEOPDPlaceLookupParameters readAll:](*(void *)(a1 + 280), 1);
  [*(id *)(a1 + 248) readAll:1];
  -[GEOPDPlaceRefinementParameters readAll:](*(void *)(a1 + 296), 1);
  -[GEOPDSiriSearchParameters readAll:](*(void *)(a1 + 400), 1);
  -[GEOPDLocationDirectedSearchParameters readAll:](*(void *)(a1 + 216), 1);
  [*(id *)(a1 + 64) readAll:1];
  -[GEOPDSearchBrowseCategorySuggestionParameters readAll:](*(void *)(a1 + 120), 1);
  -[GEOPDCategorySearchParameters readAll:](*(void *)(a1 + 136), 1);
  -[GEOPDPopularNearbySearchParameters readAll:](*(void *)(a1 + 320), 1);
  -[GEOPDBatchPopularNearbySearchParameters readAll:](*(void *)(a1 + 88), 1);
  -[GEOPDVendorSpecificPlaceRefinementParameters readAll:](*(void *)(a1 + 448), 1);
  -[GEOPDNearbySearchParameters readAll:](*(void *)(a1 + 256), 1);
  -[GEOPDAddressObjectGeocodingParameters readAll:](*(void *)(a1 + 24), 1);
  -[GEOPDExternalTransitLookupParameters readAll:](*(void *)(a1 + 168), 1);
  -[GEOPDFeatureIdGeocodingParameters readAll:](*(void *)(a1 + 176), 1);
  -[GEOPDBatchReverseGeocodingParameters readAll:](*(void *)(a1 + 96), 1);
  -[GEOPDBatchSpatialLookupParameters readAll:](*(void *)(a1 + 104), 1);
  -[GEOPDPlaceCollectionLookupParameters readAll:](*(void *)(a1 + 272), 1);
  [*(id *)(a1 + 432) readAll:1];
  -[GEOPDCollectionSuggestionParameters readAll:](*(void *)(a1 + 152), 1);
  -[GEOPDMapsSearchHomeParameters readAll:](*(void *)(a1 + 240), 1);
  -[GEOPDPublisherViewParameters readAll:](*(void *)(a1 + 328), 1);
  -[GEOPDAllCollectionsViewParameters readAll:](*(void *)(a1 + 48), 1);
  -[GEOPDAirportEntityPlaceLookupParameters readAll:](*(void *)(a1 + 40), 1);
  -[GEOPDTransitNearbyScheduleLookupParameters readAll:](*(void *)(a1 + 424), 1);
  -[GEOPDGuidesHomeParameters readAll:](*(void *)(a1 + 200), 1);
  -[GEOPDExtendedGeoLookupParameters readAll:](*(void *)(a1 + 160), 1);
  -[GEOPDQueryUnderstandingParameters readAll:](*(void *)(a1 + 336), 1);
  -[GEOPDPlacecardEnrichmentParameters readAll:](*(void *)(a1 + 304), 1);
  uint64_t v2 = *(void *)(a1 + 32);

  -[GEOPDAddressRecommendationParameters readAll:](v2, 1);
}

void sub_188EE7830(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EE7B58(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EE7C44(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EE7E00(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOPDReverseGeocodingParametersCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v2 = *(id *)(a1 + 32);
  uint64_t v3 = [v2 countByEnumeratingWithState:&v16 objects:v21 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v17;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v17 != v5) {
          objc_enumerationMutation(v2);
        }
        [*(id *)(*((void *)&v16 + 1) + 8 * v6++) readAll:1];
      }
      while (v4 != v6);
      uint64_t v4 = [v2 countByEnumeratingWithState:&v16 objects:v21 count:16];
    }
    while (v4);
  }

  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v7 = *(id *)(a1 + 24);
  uint64_t v8 = [v7 countByEnumeratingWithState:&v12 objects:v20 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v13;
    do
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v13 != v10) {
          objc_enumerationMutation(v7);
        }
        objc_msgSend(*(id *)(*((void *)&v12 + 1) + 8 * v11++), "readAll:", 1, (void)v12);
      }
      while (v9 != v11);
      uint64_t v9 = [v7 countByEnumeratingWithState:&v12 objects:v20 count:16];
    }
    while (v9);
  }
}

void sub_188EE850C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EE8A08(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EE8B00(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EE8C44(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EE8D34(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EE8E18(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EE8F04(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EE8FE8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EE90C8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EE91AC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EE9290(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EE9370(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EE9450(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EE9534(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EE9618(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EE96F8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EE97E4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EE98C8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EE99AC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EE9A90(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EE9B70(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EE9C5C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EE9D4C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EE9E5C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EE9F40(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EEA024(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EEA110(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EEA210(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EEA2E4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EEA858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_188EEAC1C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EEAD2C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EEAE7C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void __GEOGetNetworkDefaultsLog_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.GeoServices", "NetworkDefaults");
  id v1 = (void *)qword_1EB29FC58;
  qword_1EB29FC58 = (uint64_t)v0;
}

void sub_188EEB4A4(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_188EEB658(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EEB814(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EEB9DC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EEBD38(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EEBDF4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOMapItemClientAttributesCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  [*(id *)(a1 + 24) readAll:1];
  [*(id *)(a1 + 48) readAll:1];
  [*(id *)(a1 + 32) readAll:1];
  id v2 = *(void **)(a1 + 40);

  return [v2 readAll:1];
}

void sub_188EEC3F0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOPDPlaceIsDirty(uint64_t a1)
{
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 112));
  unsigned int v2 = *(_DWORD *)(a1 + 140);
  if ((v2 & 0x46000) != 0) {
    return 1;
  }
  if ((v2 & 0x10000) != 0)
  {
    if (GEOPDPlacecardLayoutDataIsDirty(*(void *)(a1 + 72))) {
      return 1;
    }
    unsigned int v2 = *(_DWORD *)(a1 + 140);
  }
  if ((v2 & 0x21000) != 0) {
    return 1;
  }
  return (v2 >> 15) & 1;
}

void sub_188EEC898(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOPDPlaceCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  [*(id *)(a1 + 48) readAll:1];
  -[GEOPDPlacecardLayoutData readAll:](*(void *)(a1 + 72), 1);
  unsigned int v2 = *(void **)(a1 + 88);

  return [v2 readAll:1];
}

void sub_188EEC9E4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EED508(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOStepFeedbackIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  unsigned int v2 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          uint64_t v14 = *v4;
          int v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      uint64_t v14 = *v4;
      int v15 = a1[v14];
      if (a1[v14]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v16 = v8 & 7;
      if (v15 || v16 == 4) {
        break;
      }
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0) {
            goto LABEL_120;
          }
          unsigned int v21 = 0;
          while (1)
          {
            uint64_t v22 = *v2;
            uint64_t v23 = *(void *)&a1[v22];
            unint64_t v24 = v23 + 1;
            if (v23 == -1 || v24 > *(void *)&a1[*v3]) {
              goto LABEL_113;
            }
            int v25 = *(char *)(*(void *)&a1[*v5] + v23);
            *(void *)&a1[v22] = v24;
            if (v25 < 0)
            {
              BOOL v26 = v21++ > 8;
              if (!v26) {
                continue;
              }
            }
            goto LABEL_117;
          }
        case 2u:
        case 0x11u:
          if (v16 != 1) {
            goto LABEL_120;
          }
          uint64_t v18 = *v2;
          unint64_t v19 = *(void *)&a1[v18];
          if (v19 > 0xFFFFFFFFFFFFFFF7) {
            goto LABEL_114;
          }
          unint64_t v20 = v19 + 8;
          if (v20 > *(void *)&a1[*v3]) {
            goto LABEL_114;
          }
          *(void *)&a1[v18] = v20;
          continue;
        case 3u:
          if ((v8 & 7) != 0) {
            goto LABEL_120;
          }
          unsigned int v27 = 0;
          while (1)
          {
            uint64_t v28 = *v2;
            uint64_t v29 = *(void *)&a1[v28];
            unint64_t v30 = v29 + 1;
            if (v29 == -1 || v30 > *(void *)&a1[*v3]) {
              goto LABEL_113;
            }
            int v31 = *(char *)(*(void *)&a1[*v5] + v29);
            *(void *)&a1[v28] = v30;
            if (v31 < 0)
            {
              BOOL v26 = v27++ > 8;
              if (!v26) {
                continue;
              }
            }
            goto LABEL_117;
          }
        case 4u:
          if (v16 == 2) {
            goto LABEL_116;
          }
          goto LABEL_120;
        case 5u:
          if ((v8 & 7) != 0) {
            goto LABEL_120;
          }
          unsigned int v32 = 0;
          while (1)
          {
            uint64_t v33 = *v2;
            uint64_t v34 = *(void *)&a1[v33];
            unint64_t v35 = v34 + 1;
            if (v34 == -1 || v35 > *(void *)&a1[*v3]) {
              goto LABEL_113;
            }
            int v36 = *(char *)(*(void *)&a1[*v5] + v34);
            *(void *)&a1[v33] = v35;
            if (v36 < 0)
            {
              BOOL v26 = v32++ > 8;
              if (!v26) {
                continue;
              }
            }
            goto LABEL_117;
          }
        case 7u:
          if ((v8 & 7) != 0) {
            goto LABEL_120;
          }
          unsigned int v37 = 0;
          while (1)
          {
            uint64_t v38 = *v2;
            uint64_t v39 = *(void *)&a1[v38];
            unint64_t v40 = v39 + 1;
            if (v39 == -1 || v40 > *(void *)&a1[*v3]) {
              goto LABEL_113;
            }
            int v41 = *(char *)(*(void *)&a1[*v5] + v39);
            *(void *)&a1[v38] = v40;
            if (v41 < 0)
            {
              BOOL v26 = v37++ > 8;
              if (!v26) {
                continue;
              }
            }
            goto LABEL_117;
          }
        case 8u:
          if (v16 == 2) {
            goto LABEL_116;
          }
          goto LABEL_120;
        case 9u:
          if ((v8 & 7) != 0) {
            goto LABEL_120;
          }
          unsigned int v42 = 0;
          while (1)
          {
            uint64_t v43 = *v2;
            uint64_t v44 = *(void *)&a1[v43];
            unint64_t v45 = v44 + 1;
            if (v44 == -1 || v45 > *(void *)&a1[*v3]) {
              goto LABEL_113;
            }
            int v46 = *(char *)(*(void *)&a1[*v5] + v44);
            *(void *)&a1[v43] = v45;
            if (v46 < 0)
            {
              BOOL v26 = v42++ > 8;
              if (!v26) {
                continue;
              }
            }
            goto LABEL_117;
          }
        case 0xAu:
          if ((v8 & 7) != 0) {
            goto LABEL_120;
          }
          unsigned int v47 = 0;
          while (1)
          {
            uint64_t v48 = *v2;
            uint64_t v49 = *(void *)&a1[v48];
            unint64_t v50 = v49 + 1;
            if (v49 == -1 || v50 > *(void *)&a1[*v3]) {
              goto LABEL_113;
            }
            int v51 = *(char *)(*(void *)&a1[*v5] + v49);
            *(void *)&a1[v48] = v50;
            if (v51 < 0)
            {
              BOOL v26 = v47++ > 8;
              if (!v26) {
                continue;
              }
            }
            goto LABEL_117;
          }
        case 0xBu:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOEVStepFeedbackInfoIsValid(a1)) {
            goto LABEL_120;
          }
          PBReaderRecallMark();
          continue;
        case 0xCu:
          if ((v8 & 7) != 0) {
            goto LABEL_120;
          }
          unsigned int v52 = 0;
          while (1)
          {
            uint64_t v53 = *v2;
            uint64_t v54 = *(void *)&a1[v53];
            unint64_t v55 = v54 + 1;
            if (v54 == -1 || v55 > *(void *)&a1[*v3]) {
              goto LABEL_113;
            }
            int v56 = *(char *)(*(void *)&a1[*v5] + v54);
            *(void *)&a1[v53] = v55;
            if (v56 < 0)
            {
              BOOL v26 = v52++ > 8;
              if (!v26) {
                continue;
              }
            }
            goto LABEL_117;
          }
        case 0xDu:
          if ((v8 & 7) != 0) {
            goto LABEL_120;
          }
          unsigned int v57 = 0;
          while (1)
          {
            uint64_t v58 = *v2;
            uint64_t v59 = *(void *)&a1[v58];
            unint64_t v60 = v59 + 1;
            if (v59 == -1 || v60 > *(void *)&a1[*v3]) {
              goto LABEL_113;
            }
            int v61 = *(char *)(*(void *)&a1[*v5] + v59);
            *(void *)&a1[v58] = v60;
            if (v61 < 0)
            {
              BOOL v26 = v57++ > 8;
              if (!v26) {
                continue;
              }
            }
            goto LABEL_117;
          }
        case 0xEu:
          if ((v8 & 7) != 0) {
            goto LABEL_120;
          }
          unsigned int v62 = 0;
          while (1)
          {
            uint64_t v63 = *v2;
            uint64_t v64 = *(void *)&a1[v63];
            unint64_t v65 = v64 + 1;
            if (v64 == -1 || v65 > *(void *)&a1[*v3]) {
              goto LABEL_113;
            }
            int v66 = *(char *)(*(void *)&a1[*v5] + v64);
            *(void *)&a1[v63] = v65;
            if (v66 < 0)
            {
              BOOL v26 = v62++ > 8;
              if (!v26) {
                continue;
              }
            }
            goto LABEL_117;
          }
        case 0xFu:
          if (v16 == 2) {
            goto LABEL_116;
          }
          goto LABEL_120;
        case 0x10u:
          if ((v8 & 7) != 0) {
            goto LABEL_120;
          }
          unsigned int v67 = 0;
          break;
        case 0x12u:
          if (v16 == 2) {
            goto LABEL_116;
          }
          goto LABEL_120;
        default:
LABEL_116:
          if (PBReaderSkipValueWithTag()) {
            continue;
          }
LABEL_120:
          PBReaderRecallMark();
          return 0;
      }
      while (1)
      {
        uint64_t v68 = *v2;
        uint64_t v69 = *(void *)&a1[v68];
        unint64_t v70 = v69 + 1;
        if (v69 == -1 || v70 > *(void *)&a1[*v3]) {
          break;
        }
        int v71 = *(char *)(*(void *)&a1[*v5] + v69);
        *(void *)&a1[v68] = v70;
        if (v71 < 0)
        {
          BOOL v26 = v67++ > 8;
          if (!v26) {
            continue;
          }
        }
        goto LABEL_117;
      }
LABEL_113:
      uint64_t v14 = *v4;
LABEL_114:
      a1[v14] = 1;
LABEL_117:
      ;
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v72 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v72;
}

uint64_t _GEOPDPlaceCollectionItemIsDirty(uint64_t a1)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 96));
  __int16 v2 = *(_WORD *)(a1 + 104);
  if ((v2 & 0xFF0) != 0) {
    return 1;
  }
  if ((v2 & 8) == 0)
  {
LABEL_6:
    if ((v2 & 0x100) != 0)
    {
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      id v4 = *(id *)(a1 + 64);
      uint64_t v5 = [v4 countByEnumeratingWithState:&v40 objects:v48 count:16];
      if (v5)
      {
        uint64_t v6 = v5;
        uint64_t v7 = *(void *)v41;
LABEL_9:
        uint64_t v8 = 0;
        while (1)
        {
          if (*(void *)v41 != v7) {
            objc_enumerationMutation(v4);
          }
          if (GEOPDCaptionedPhotoIsDirty(*(os_unfair_lock_s **)(*((void *)&v40 + 1) + 8 * v8))) {
            goto LABEL_57;
          }
          if (v6 == ++v8)
          {
            uint64_t v6 = [v4 countByEnumeratingWithState:&v40 objects:v48 count:16];
            if (v6) {
              goto LABEL_9;
            }
            break;
          }
        }
      }

      __int16 v2 = *(_WORD *)(a1 + 104);
    }
    if ((v2 & 0x40) != 0)
    {
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      id v4 = *(id *)(a1 + 48);
      uint64_t v9 = [v4 countByEnumeratingWithState:&v36 objects:v47 count:16];
      if (v9)
      {
        uint64_t v10 = v9;
        uint64_t v11 = *(void *)v37;
LABEL_19:
        uint64_t v12 = 0;
        while (1)
        {
          if (*(void *)v37 != v11) {
            objc_enumerationMutation(v4);
          }
          if (GEOLocalizedStringIsDirty(*(void *)(*((void *)&v36 + 1) + 8 * v12))) {
            goto LABEL_57;
          }
          if (v10 == ++v12)
          {
            uint64_t v10 = [v4 countByEnumeratingWithState:&v36 objects:v47 count:16];
            if (v10) {
              goto LABEL_19;
            }
            break;
          }
        }
      }

      __int16 v2 = *(_WORD *)(a1 + 104);
    }
    if ((v2 & 0x200) != 0)
    {
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      id v4 = *(id *)(a1 + 72);
      uint64_t v13 = [v4 countByEnumeratingWithState:&v32 objects:v46 count:16];
      if (v13)
      {
        uint64_t v14 = v13;
        uint64_t v15 = *(void *)v33;
LABEL_29:
        uint64_t v16 = 0;
        while (1)
        {
          if (*(void *)v33 != v15) {
            objc_enumerationMutation(v4);
          }
          if (GEOLocalizedStringIsDirty(*(void *)(*((void *)&v32 + 1) + 8 * v16))) {
            goto LABEL_57;
          }
          if (v14 == ++v16)
          {
            uint64_t v14 = [v4 countByEnumeratingWithState:&v32 objects:v46 count:16];
            if (v14) {
              goto LABEL_29;
            }
            break;
          }
        }
      }

      __int16 v2 = *(_WORD *)(a1 + 104);
    }
    if ((v2 & 0x10) != 0)
    {
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      id v4 = *(id *)(a1 + 32);
      uint64_t v17 = [v4 countByEnumeratingWithState:&v28 objects:v45 count:16];
      if (v17)
      {
        uint64_t v18 = v17;
        uint64_t v19 = *(void *)v29;
LABEL_39:
        uint64_t v20 = 0;
        while (1)
        {
          if (*(void *)v29 != v19) {
            objc_enumerationMutation(v4);
          }
          if (GEOLocalizedBytesIsDirty(*(void *)(*((void *)&v28 + 1) + 8 * v20))) {
            goto LABEL_57;
          }
          if (v18 == ++v20)
          {
            uint64_t v18 = [v4 countByEnumeratingWithState:&v28 objects:v45 count:16];
            if (v18) {
              goto LABEL_39;
            }
            break;
          }
        }
      }

      __int16 v2 = *(_WORD *)(a1 + 104);
    }
    if ((v2 & 0x20) == 0) {
      return 0;
    }
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    id v4 = *(id *)(a1 + 40);
    uint64_t v3 = [v4 countByEnumeratingWithState:&v24 objects:v44 count:16];
    if (!v3)
    {
LABEL_58:

      return v3;
    }
    uint64_t v21 = *(void *)v25;
LABEL_50:
    uint64_t v22 = 0;
    while (1)
    {
      if (*(void *)v25 != v21) {
        objc_enumerationMutation(v4);
      }
      if (GEOLocalizedStringIsDirty(*(void *)(*((void *)&v24 + 1) + 8 * v22))) {
        break;
      }
      if (v3 == ++v22)
      {
        uint64_t v3 = [v4 countByEnumeratingWithState:&v24 objects:v44 count:16];
        if (v3) {
          goto LABEL_50;
        }
        goto LABEL_58;
      }
    }
LABEL_57:
    uint64_t v3 = 1;
    goto LABEL_58;
  }
  if (!GEOPDQuickLinkItemIsDirty(*(void *)(a1 + 24)))
  {
    __int16 v2 = *(_WORD *)(a1 + 104);
    goto LABEL_6;
  }
  return 1;
}

uint64_t MapsFeature_IsEnabled_Maps298()
{
  return GEOConfigGetBOOL(MapsFeaturesConfig_Maps298Enabled, (uint64_t)off_1E9111D08);
}

void sub_188EEF8B0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EEF9C0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void addr_obj::V2AddressObject::toProto(addr_obj::V2AddressObject *this, addr_obj::VenueInfoProto **a2)
{
  addr_obj::V1AddressObject::toProto(this, a2);
  if (*((char *)this + 751) < 0)
  {
    if (!*((void *)this + 92)) {
      goto LABEL_10;
    }
  }
  else if (!*((unsigned char *)this + 751))
  {
    goto LABEL_10;
  }
  *((_DWORD *)a2 + 22) |= 0x20u;
  uint64_t v5 = a2[8];
  if (!v5) {
    operator new();
  }
  uint64_t v6 = (addr_obj::V2AddressObjectProto *)addr_obj::V2AddressObjectProto::v2address((addr_obj::V2AddressObjectProto *)v4);
  int v7 = *(_DWORD *)v6;
  uint64_t v8 = addr_obj::V2AddressObjectProto::default_instance(v6);
  uint64_t v9 = AddrObjGoogle::protobuf::internal::ExtensionSet::MutableMessage((uint64_t **)v5 + 1, v7, 11, v8, 0);
  *(_DWORD *)(v9 + 140) |= 1u;
  uint64_t v10 = *(uint64_t **)(v9 + 40);
  if (v10 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v9)) {
    operator new();
  }
  id v4 = std::string::operator=(*(std::string **)(v9 + 40), (const std::string *)((char *)this + 728));
LABEL_10:
  if (*((char *)this + 847) < 0)
  {
    if (!*((void *)this + 104)) {
      goto LABEL_19;
    }
  }
  else if (!*((unsigned char *)this + 847))
  {
    goto LABEL_19;
  }
  *((_DWORD *)a2 + 22) |= 0x20u;
  uint64_t v11 = a2[8];
  if (!v11) {
    operator new();
  }
  uint64_t v12 = (addr_obj::V2AddressObjectProto *)addr_obj::V2AddressObjectProto::v2address((addr_obj::V2AddressObjectProto *)v4);
  int v13 = *(_DWORD *)v12;
  uint64_t v14 = addr_obj::V2AddressObjectProto::default_instance(v12);
  uint64_t v15 = AddrObjGoogle::protobuf::internal::ExtensionSet::MutableMessage((uint64_t **)v11 + 1, v13, 11, v14, 0);
  *(_DWORD *)(v15 + 140) |= 2u;
  uint64_t v16 = *(uint64_t **)(v15 + 48);
  if (v16 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v15)) {
    operator new();
  }
  id v4 = std::string::operator=(*(std::string **)(v15 + 48), (const std::string *)((char *)this + 824));
LABEL_19:
  if (*((char *)this + 775) < 0)
  {
    if (!*((void *)this + 95)) {
      goto LABEL_28;
    }
  }
  else if (!*((unsigned char *)this + 775))
  {
    goto LABEL_28;
  }
  *((_DWORD *)a2 + 22) |= 0x20u;
  uint64_t v17 = a2[8];
  if (!v17) {
    operator new();
  }
  uint64_t v18 = (addr_obj::V2AddressObjectProto *)addr_obj::V2AddressObjectProto::v2address((addr_obj::V2AddressObjectProto *)v4);
  int v19 = *(_DWORD *)v18;
  uint64_t v20 = addr_obj::V2AddressObjectProto::default_instance(v18);
  uint64_t v21 = AddrObjGoogle::protobuf::internal::ExtensionSet::MutableMessage((uint64_t **)v17 + 1, v19, 11, v20, 0);
  *(_DWORD *)(v21 + 140) |= 4u;
  uint64_t v22 = *(uint64_t **)(v21 + 56);
  if (v22 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v21)) {
    operator new();
  }
  id v4 = std::string::operator=(*(std::string **)(v21 + 56), (const std::string *)((char *)this + 752));
LABEL_28:
  if (*((char *)this + 871) < 0)
  {
    if (!*((void *)this + 107)) {
      goto LABEL_37;
    }
  }
  else if (!*((unsigned char *)this + 871))
  {
    goto LABEL_37;
  }
  *((_DWORD *)a2 + 22) |= 0x20u;
  uint64_t v23 = a2[8];
  if (!v23) {
    operator new();
  }
  long long v24 = (addr_obj::V2AddressObjectProto *)addr_obj::V2AddressObjectProto::v2address((addr_obj::V2AddressObjectProto *)v4);
  int v25 = *(_DWORD *)v24;
  uint64_t v26 = addr_obj::V2AddressObjectProto::default_instance(v24);
  uint64_t v27 = AddrObjGoogle::protobuf::internal::ExtensionSet::MutableMessage((uint64_t **)v23 + 1, v25, 11, v26, 0);
  *(_DWORD *)(v27 + 140) |= 8u;
  long long v28 = *(uint64_t **)(v27 + 64);
  if (v28 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v27)) {
    operator new();
  }
  id v4 = std::string::operator=(*(std::string **)(v27 + 64), (const std::string *)((char *)this + 848));
LABEL_37:
  if (*((char *)this + 895) < 0)
  {
    if (!*((void *)this + 110)) {
      goto LABEL_46;
    }
  }
  else if (!*((unsigned char *)this + 895))
  {
    goto LABEL_46;
  }
  *((_DWORD *)a2 + 22) |= 0x20u;
  long long v29 = a2[8];
  if (!v29) {
    operator new();
  }
  long long v30 = (addr_obj::V2AddressObjectProto *)addr_obj::V2AddressObjectProto::v2address((addr_obj::V2AddressObjectProto *)v4);
  int v31 = *(_DWORD *)v30;
  uint64_t v32 = addr_obj::V2AddressObjectProto::default_instance(v30);
  uint64_t v33 = AddrObjGoogle::protobuf::internal::ExtensionSet::MutableMessage((uint64_t **)v29 + 1, v31, 11, v32, 0);
  *(_DWORD *)(v33 + 140) |= 0x10u;
  long long v34 = *(uint64_t **)(v33 + 72);
  if (v34 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v33)) {
    operator new();
  }
  id v4 = std::string::operator=(*(std::string **)(v33 + 72), (const std::string *)((char *)this + 872));
LABEL_46:
  if (*((char *)this + 919) < 0)
  {
    if (!*((void *)this + 113)) {
      goto LABEL_55;
    }
  }
  else if (!*((unsigned char *)this + 919))
  {
    goto LABEL_55;
  }
  *((_DWORD *)a2 + 22) |= 0x20u;
  long long v35 = a2[8];
  if (!v35) {
    operator new();
  }
  long long v36 = (addr_obj::V2AddressObjectProto *)addr_obj::V2AddressObjectProto::v2address((addr_obj::V2AddressObjectProto *)v4);
  int v37 = *(_DWORD *)v36;
  uint64_t v38 = addr_obj::V2AddressObjectProto::default_instance(v36);
  uint64_t v39 = AddrObjGoogle::protobuf::internal::ExtensionSet::MutableMessage((uint64_t **)v35 + 1, v37, 11, v38, 0);
  *(_DWORD *)(v39 + 140) |= 0x20u;
  long long v40 = *(uint64_t **)(v39 + 80);
  if (v40 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v39)) {
    operator new();
  }
  id v4 = std::string::operator=(*(std::string **)(v39 + 80), (const std::string *)((char *)this + 896));
LABEL_55:
  if (*((char *)this + 799) < 0)
  {
    if (!*((void *)this + 98)) {
      goto LABEL_64;
    }
  }
  else if (!*((unsigned char *)this + 799))
  {
    goto LABEL_64;
  }
  *((_DWORD *)a2 + 22) |= 0x20u;
  long long v41 = a2[8];
  if (!v41) {
    operator new();
  }
  long long v42 = (addr_obj::V2AddressObjectProto *)addr_obj::V2AddressObjectProto::v2address((addr_obj::V2AddressObjectProto *)v4);
  int v43 = *(_DWORD *)v42;
  uint64_t v44 = addr_obj::V2AddressObjectProto::default_instance(v42);
  uint64_t v45 = AddrObjGoogle::protobuf::internal::ExtensionSet::MutableMessage((uint64_t **)v41 + 1, v43, 11, v44, 0);
  *(_DWORD *)(v45 + 140) |= 0x40u;
  int v46 = *(uint64_t **)(v45 + 88);
  if (v46 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v45)) {
    operator new();
  }
  id v4 = std::string::operator=(*(std::string **)(v45 + 88), (const std::string *)((char *)this + 776));
LABEL_64:
  if (*((char *)this + 823) < 0)
  {
    if (!*((void *)this + 101)) {
      goto LABEL_73;
    }
  }
  else if (!*((unsigned char *)this + 823))
  {
    goto LABEL_73;
  }
  *((_DWORD *)a2 + 22) |= 0x20u;
  unsigned int v47 = a2[8];
  if (!v47) {
    operator new();
  }
  uint64_t v48 = (addr_obj::V2AddressObjectProto *)addr_obj::V2AddressObjectProto::v2address((addr_obj::V2AddressObjectProto *)v4);
  int v49 = *(_DWORD *)v48;
  uint64_t v50 = addr_obj::V2AddressObjectProto::default_instance(v48);
  uint64_t v51 = AddrObjGoogle::protobuf::internal::ExtensionSet::MutableMessage((uint64_t **)v47 + 1, v49, 11, v50, 0);
  *(_DWORD *)(v51 + 140) |= 0x80u;
  unsigned int v52 = *(uint64_t **)(v51 + 96);
  if (v52 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v51)) {
    operator new();
  }
  id v4 = std::string::operator=(*(std::string **)(v51 + 96), (const std::string *)((char *)this + 800));
LABEL_73:
  if (*((char *)this + 943) < 0)
  {
    if (!*((void *)this + 116)) {
      goto LABEL_82;
    }
  }
  else if (!*((unsigned char *)this + 943))
  {
    goto LABEL_82;
  }
  *((_DWORD *)a2 + 22) |= 0x20u;
  uint64_t v53 = a2[8];
  if (!v53) {
    operator new();
  }
  uint64_t v54 = (addr_obj::V2AddressObjectProto *)addr_obj::V2AddressObjectProto::v2address((addr_obj::V2AddressObjectProto *)v4);
  int v55 = *(_DWORD *)v54;
  uint64_t v56 = addr_obj::V2AddressObjectProto::default_instance(v54);
  uint64_t v57 = AddrObjGoogle::protobuf::internal::ExtensionSet::MutableMessage((uint64_t **)v53 + 1, v55, 11, v56, 0);
  *(_DWORD *)(v57 + 140) |= 0x100u;
  uint64_t v58 = *(uint64_t **)(v57 + 104);
  if (v58 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v57)) {
    operator new();
  }
  id v4 = std::string::operator=(*(std::string **)(v57 + 104), (const std::string *)((char *)this + 920));
LABEL_82:
  if (*((char *)this + 967) < 0)
  {
    if (!*((void *)this + 119)) {
      goto LABEL_91;
    }
  }
  else if (!*((unsigned char *)this + 967))
  {
    goto LABEL_91;
  }
  *((_DWORD *)a2 + 22) |= 0x20u;
  uint64_t v59 = a2[8];
  if (!v59) {
    operator new();
  }
  unint64_t v60 = (addr_obj::V2AddressObjectProto *)addr_obj::V2AddressObjectProto::v2address((addr_obj::V2AddressObjectProto *)v4);
  int v61 = *(_DWORD *)v60;
  uint64_t v62 = addr_obj::V2AddressObjectProto::default_instance(v60);
  uint64_t v63 = AddrObjGoogle::protobuf::internal::ExtensionSet::MutableMessage((uint64_t **)v59 + 1, v61, 11, v62, 0);
  *(_DWORD *)(v63 + 140) |= 0x200u;
  uint64_t v64 = *(uint64_t **)(v63 + 112);
  if (v64 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v63)) {
    operator new();
  }
  id v4 = std::string::operator=(*(std::string **)(v63 + 112), (const std::string *)((char *)this + 944));
LABEL_91:
  if (*((char *)this + 991) < 0)
  {
    if (!*((void *)this + 122)) {
      goto LABEL_100;
    }
  }
  else if (!*((unsigned char *)this + 991))
  {
    goto LABEL_100;
  }
  *((_DWORD *)a2 + 22) |= 0x20u;
  unint64_t v65 = a2[8];
  if (!v65) {
    operator new();
  }
  int v66 = (addr_obj::V2AddressObjectProto *)addr_obj::V2AddressObjectProto::v2address((addr_obj::V2AddressObjectProto *)v4);
  int v67 = *(_DWORD *)v66;
  uint64_t v68 = addr_obj::V2AddressObjectProto::default_instance(v66);
  uint64_t v69 = AddrObjGoogle::protobuf::internal::ExtensionSet::MutableMessage((uint64_t **)v65 + 1, v67, 11, v68, 0);
  *(_DWORD *)(v69 + 140) |= 0x400u;
  unint64_t v70 = *(uint64_t **)(v69 + 120);
  if (v70 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v69)) {
    operator new();
  }
  id v4 = std::string::operator=(*(std::string **)(v69 + 120), (const std::string *)((char *)this + 968));
LABEL_100:
  if (*((char *)this + 1015) < 0)
  {
    if (!*((void *)this + 125)) {
      return;
    }
  }
  else if (!*((unsigned char *)this + 1015))
  {
    return;
  }
  *((_DWORD *)a2 + 22) |= 0x20u;
  int v71 = a2[8];
  if (!v71) {
    operator new();
  }
  BOOL v72 = (const std::string *)((char *)this + 992);
  unint64_t v73 = (addr_obj::V2AddressObjectProto *)addr_obj::V2AddressObjectProto::v2address((addr_obj::V2AddressObjectProto *)v4);
  int v74 = *(_DWORD *)v73;
  uint64_t v75 = addr_obj::V2AddressObjectProto::default_instance(v73);
  uint64_t v76 = AddrObjGoogle::protobuf::internal::ExtensionSet::MutableMessage((uint64_t **)v71 + 1, v74, 11, v75, 0);
  *(_DWORD *)(v76 + 140) |= 0x800u;
  int v77 = *(uint64_t **)(v76 + 128);
  if (v77 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v76)) {
    operator new();
  }
  uint64_t v78 = *(std::string **)(v76 + 128);

  std::string::operator=(v78, v72);
}

void sub_188EF0918(_Unwind_Exception *a1)
{
  MEMORY[0x18C11F580](v1, 0x10A1C40D9981018);
  _Unwind_Resume(a1);
}

uint64_t AddrObjGoogle::protobuf::internal::ExtensionSet::ParseField(uint64_t **this, uint64_t a2, AddrObjGoogle::protobuf::io::CodedInputStream *a3, const AddrObjGoogle::protobuf::Message *a4, AddrObjGoogle::protobuf::UnknownFieldSet *a5)
{
  v18[0] = &unk_1ED5134F8;
  v18[1] = a5;
  uint64_t v8 = (const AddrObjGoogle::protobuf::Message *)*((void *)a3 + 8);
  if (v8)
  {
    uint64_t v9 = *((void *)a3 + 9);
    uint64_t v10 = (*(uint64_t (**)(const AddrObjGoogle::protobuf::Message *))(*(void *)a4 + 152))(a4);
    uint64_t v14 = &unk_1ED513530;
    uint64_t v15 = v8;
    uint64_t v16 = v9;
    uint64_t v17 = v10;
    uint64_t v11 = AddrObjGoogle::protobuf::internal::ExtensionSet::ParseField(this, a2, (char **)a3, (uint64_t)&v14, (uint64_t)v18);
  }
  else
  {
    uint64_t v14 = &unk_1ED513298;
    uint64_t v15 = a4;
    uint64_t v11 = AddrObjGoogle::protobuf::internal::ExtensionSet::ParseField(this, a2, (char **)a3, (uint64_t)&v14, (uint64_t)v18);
  }
  uint64_t v12 = v11;
  addr_obj::Localization::getDisplayLanguage((addr_obj::Localization *)&v14);
  return v12;
}

void sub_188EF0A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t AddrObjGoogle::protobuf::internal::ExtensionSet::ParseField(uint64_t **a1, uint64_t a2, char **a3, uint64_t a4, uint64_t a5)
{
  unsigned int v11 = 0;
  if (AddrObjGoogle::protobuf::internal::ExtensionSet::FindExtensionInfoFromTag((uint64_t)a1, a2, a4, &v11, v10)) {
    return AddrObjGoogle::protobuf::internal::ExtensionSet::ParseFieldWithExtensionInfo(a1, v11, (uint64_t)v10, a3, a5);
  }
  else {
    return (*(uint64_t (**)(uint64_t, char **, uint64_t))(*(void *)a5 + 16))(a5, a3, a2);
  }
}

uint64_t AddrObjGoogle::protobuf::internal::ExtensionSet::ParseFieldWithExtensionInfo(uint64_t **a1, uint64_t a2, uint64_t a3, char **this, uint64_t a5)
{
  if (!*(unsigned char *)(a3 + 2))
  {
    switch(*(unsigned char *)a3)
    {
      case 1:
        v54[0].__r_.__value_.__r.__words[0] = 0;
        uint64_t result = AddrObjGoogle::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((AddrObjGoogle::protobuf::io::CodedInputStream *)this, (unint64_t *)v54);
        if (!result) {
          return result;
        }
        if (*(unsigned char *)(a3 + 1)) {
          AddrObjGoogle::protobuf::internal::ExtensionSet::AddDouble(a1, a2, 1, 0, *(void *)(a3 + 24), *(double *)&v54[0].__r_.__value_.__l.__data_);
        }
        else {
          AddrObjGoogle::protobuf::internal::ExtensionSet::SetDouble(a1, a2, 1, *(uint64_t **)(a3 + 24), *(double *)&v54[0].__r_.__value_.__l.__data_);
        }
        return 1;
      case 2:
        LODWORD(v54[0].__r_.__value_.__l.__data_) = 0;
        uint64_t result = AddrObjGoogle::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((AddrObjGoogle::protobuf::io::CodedInputStream *)this, (unsigned int *)v54);
        if (!result) {
          return result;
        }
        if (*(unsigned char *)(a3 + 1)) {
          AddrObjGoogle::protobuf::internal::ExtensionSet::AddFloat(a1, a2, 2, 0, *(void *)(a3 + 24), *(float *)&v54[0].__r_.__value_.__l.__data_);
        }
        else {
          AddrObjGoogle::protobuf::internal::ExtensionSet::SetFloat(a1, a2, 2, *(uint64_t **)(a3 + 24), *(float *)&v54[0].__r_.__value_.__l.__data_);
        }
        return 1;
      case 3:
        v54[0].__r_.__value_.__r.__words[0] = 0;
        uint64_t result = AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint64((AddrObjGoogle::protobuf::io::CodedInputStream *)this, (unint64_t *)v54);
        if (!result) {
          return result;
        }
        long long v30 = (uint64_t *)v54[0].__r_.__value_.__r.__words[0];
        int v31 = *(uint64_t **)(a3 + 24);
        uint64_t v32 = a1;
        int v33 = a2;
        char v34 = 3;
        if (!*(unsigned char *)(a3 + 1)) {
          goto LABEL_113;
        }
        goto LABEL_119;
      case 4:
        v54[0].__r_.__value_.__r.__words[0] = 0;
        uint64_t result = AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint64((AddrObjGoogle::protobuf::io::CodedInputStream *)this, (unint64_t *)v54);
        if (!result) {
          return result;
        }
        long long v30 = (uint64_t *)v54[0].__r_.__value_.__r.__words[0];
        int v31 = *(uint64_t **)(a3 + 24);
        uint64_t v32 = a1;
        int v33 = a2;
        char v34 = 4;
        if (!*(unsigned char *)(a3 + 1)) {
          goto LABEL_113;
        }
        goto LABEL_119;
      case 5:
        LODWORD(v54[0].__r_.__value_.__l.__data_) = 0;
        uint64_t result = AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32((AddrObjGoogle::protobuf::io::CodedInputStream *)this, (unsigned int *)v54);
        if (!result) {
          return result;
        }
        int data = (int)v54[0].__r_.__value_.__l.__data_;
        long long v36 = *(uint64_t **)(a3 + 24);
        int v37 = a1;
        int v38 = a2;
        char v39 = 5;
        if (!*(unsigned char *)(a3 + 1)) {
          goto LABEL_136;
        }
        goto LABEL_122;
      case 6:
        v54[0].__r_.__value_.__r.__words[0] = 0;
        uint64_t result = AddrObjGoogle::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((AddrObjGoogle::protobuf::io::CodedInputStream *)this, (unint64_t *)v54);
        if (!result) {
          return result;
        }
        long long v30 = (uint64_t *)v54[0].__r_.__value_.__r.__words[0];
        int v31 = *(uint64_t **)(a3 + 24);
        uint64_t v32 = a1;
        int v33 = a2;
        char v34 = 6;
        if (*(unsigned char *)(a3 + 1)) {
          goto LABEL_119;
        }
        goto LABEL_113;
      case 7:
        LODWORD(v54[0].__r_.__value_.__l.__data_) = 0;
        uint64_t result = AddrObjGoogle::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((AddrObjGoogle::protobuf::io::CodedInputStream *)this, (unsigned int *)v54);
        if (!result) {
          return result;
        }
        int data = (int)v54[0].__r_.__value_.__l.__data_;
        long long v36 = *(uint64_t **)(a3 + 24);
        int v37 = a1;
        int v38 = a2;
        char v39 = 7;
        if (*(unsigned char *)(a3 + 1)) {
          goto LABEL_122;
        }
        goto LABEL_136;
      case 8:
        LODWORD(v54[0].__r_.__value_.__l.__data_) = 0;
        uint64_t result = AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32((AddrObjGoogle::protobuf::io::CodedInputStream *)this, (unsigned int *)v54);
        if (!result) {
          return result;
        }
        if (*(unsigned char *)(a3 + 1)) {
          AddrObjGoogle::protobuf::internal::ExtensionSet::AddBool(a1, a2, 8, 0, LODWORD(v54[0].__r_.__value_.__l.__data_) != 0, *(void *)(a3 + 24));
        }
        else {
          AddrObjGoogle::protobuf::internal::ExtensionSet::SetBool(a1, a2, 8, LODWORD(v54[0].__r_.__value_.__l.__data_) != 0, *(uint64_t **)(a3 + 24));
        }
        return 1;
      case 9:
        long long v40 = *(uint64_t **)(a3 + 24);
        if (*(unsigned char *)(a3 + 1)) {
          long long v41 = (std::string *)AddrObjGoogle::protobuf::internal::ExtensionSet::AddString(a1, a2, 9, (uint64_t)v40);
        }
        else {
          long long v41 = (std::string *)AddrObjGoogle::protobuf::internal::ExtensionSet::MutableString(a1, a2, 9, v40);
        }
        return AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((AddrObjGoogle::protobuf::io::CodedInputStream *)this, v41);
      case 0xA:
        uint64_t v42 = *(void *)(a3 + 8);
        int v43 = *(uint64_t **)(a3 + 24);
        if (*(unsigned char *)(a3 + 1)) {
          uint64_t v44 = AddrObjGoogle::protobuf::internal::ExtensionSet::AddMessage(a1, a2, 10, v42, v43);
        }
        else {
          uint64_t v44 = AddrObjGoogle::protobuf::internal::ExtensionSet::MutableMessage(a1, a2, 10, v42, v43);
        }
        return (AddrObjGoogle::protobuf::internal::WireFormatLite::ReadGroup(a2, this, v44) & 1) != 0;
      case 0xB:
        uint64_t v45 = *(void *)(a3 + 8);
        int v46 = *(uint64_t **)(a3 + 24);
        if (*(unsigned char *)(a3 + 1)) {
          unsigned int v47 = (AddrObjGoogle::protobuf::io::CodedInputStream *)AddrObjGoogle::protobuf::internal::ExtensionSet::AddMessage(a1, a2, 11, v45, v46);
        }
        else {
          unsigned int v47 = (AddrObjGoogle::protobuf::io::CodedInputStream *)AddrObjGoogle::protobuf::internal::ExtensionSet::MutableMessage(a1, a2, 11, v45, v46);
        }
        uint64_t result = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadMessage((AddrObjGoogle::protobuf::internal::WireFormatLite *)this, v47, v48);
        if (result) {
          return 1;
        }
        return result;
      case 0xC:
        int v49 = *(uint64_t **)(a3 + 24);
        if (*(unsigned char *)(a3 + 1)) {
          uint64_t v50 = (std::string *)AddrObjGoogle::protobuf::internal::ExtensionSet::AddString(a1, a2, 12, (uint64_t)v49);
        }
        else {
          uint64_t v50 = (std::string *)AddrObjGoogle::protobuf::internal::ExtensionSet::MutableString(a1, a2, 12, v49);
        }
        return AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((AddrObjGoogle::protobuf::io::CodedInputStream *)this, v50);
      case 0xD:
        LODWORD(v54[0].__r_.__value_.__l.__data_) = 0;
        uint64_t result = AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32((AddrObjGoogle::protobuf::io::CodedInputStream *)this, (unsigned int *)v54);
        if (!result) {
          return result;
        }
        int data = (int)v54[0].__r_.__value_.__l.__data_;
        long long v36 = *(uint64_t **)(a3 + 24);
        int v37 = a1;
        int v38 = a2;
        char v39 = 13;
        if (!*(unsigned char *)(a3 + 1)) {
          goto LABEL_136;
        }
        goto LABEL_122;
      case 0xE:
        LODWORD(v54[0].__r_.__value_.__l.__data_) = 0;
        uint64_t result = AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32((AddrObjGoogle::protobuf::io::CodedInputStream *)this, (unsigned int *)v54);
        if (!result) {
          return result;
        }
        uint64_t data_low = LODWORD(v54[0].__r_.__value_.__l.__data_);
        if ((*(uint64_t (**)(void, void))(a3 + 8))(*(void *)(a3 + 16), LODWORD(v54[0].__r_.__value_.__l.__data_)))
        {
          if (*(unsigned char *)(a3 + 1)) {
            AddrObjGoogle::protobuf::internal::ExtensionSet::AddInt32(a1, a2, 14, 0, data_low, *(void *)(a3 + 24));
          }
          else {
            AddrObjGoogle::protobuf::internal::ExtensionSet::SetInt32(a1, a2, 14, data_low, *(uint64_t **)(a3 + 24));
          }
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a5 + 32))(a5, a2, data_low);
        }
        return 1;
      case 0xF:
        LODWORD(v54[0].__r_.__value_.__l.__data_) = 0;
        uint64_t result = AddrObjGoogle::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((AddrObjGoogle::protobuf::io::CodedInputStream *)this, (unsigned int *)v54);
        if (!result) {
          return result;
        }
        int data = (int)v54[0].__r_.__value_.__l.__data_;
        long long v36 = *(uint64_t **)(a3 + 24);
        int v37 = a1;
        int v38 = a2;
        char v39 = 15;
        if (!*(unsigned char *)(a3 + 1)) {
          goto LABEL_136;
        }
        goto LABEL_122;
      case 0x10:
        v54[0].__r_.__value_.__r.__words[0] = 0;
        uint64_t result = AddrObjGoogle::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((AddrObjGoogle::protobuf::io::CodedInputStream *)this, (unint64_t *)v54);
        if (!result) {
          return result;
        }
        long long v30 = (uint64_t *)v54[0].__r_.__value_.__r.__words[0];
        int v31 = *(uint64_t **)(a3 + 24);
        uint64_t v32 = a1;
        int v33 = a2;
        char v34 = 16;
        if (!*(unsigned char *)(a3 + 1)) {
          goto LABEL_113;
        }
        goto LABEL_119;
      case 0x11:
        LODWORD(v54[0].__r_.__value_.__l.__data_) = 0;
        uint64_t result = AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32((AddrObjGoogle::protobuf::io::CodedInputStream *)this, (unsigned int *)v54);
        if (!result) {
          return result;
        }
        int data = -(v54[0].__r_.__value_.__s.__data_[0] & 1) ^ (LODWORD(v54[0].__r_.__value_.__l.__data_) >> 1);
        long long v36 = *(uint64_t **)(a3 + 24);
        int v37 = a1;
        int v38 = a2;
        char v39 = 17;
        if (*(unsigned char *)(a3 + 1)) {
LABEL_122:
        }
          AddrObjGoogle::protobuf::internal::ExtensionSet::AddInt32(v37, v38, v39, 0, data, (uint64_t)v36);
        else {
LABEL_136:
        }
          AddrObjGoogle::protobuf::internal::ExtensionSet::SetInt32(v37, v38, v39, data, v36);
        break;
      case 0x12:
        v54[0].__r_.__value_.__r.__words[0] = 0;
        uint64_t result = AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint64((AddrObjGoogle::protobuf::io::CodedInputStream *)this, (unint64_t *)v54);
        if (!result) {
          return result;
        }
        long long v30 = (uint64_t *)(-(uint64_t)(v54[0].__r_.__value_.__s.__data_[0] & 1) ^ (v54[0].__r_.__value_.__r.__words[0] >> 1));
        int v31 = *(uint64_t **)(a3 + 24);
        uint64_t v32 = a1;
        int v33 = a2;
        char v34 = 18;
        if (*(unsigned char *)(a3 + 1)) {
LABEL_119:
        }
          AddrObjGoogle::protobuf::internal::ExtensionSet::AddInt64(v32, v33, v34, 0, (uint64_t)v30, (uint64_t)v31);
        else {
LABEL_113:
        }
          AddrObjGoogle::protobuf::internal::ExtensionSet::SetInt64(v32, v33, v34, v30, v31);
        break;
      default:
        return 1;
    }
    return 1;
  }
  unsigned int v55 = 0;
  uint64_t v9 = this[1];
  if (v9 < this[2] && (*v9 & 0x80000000) == 0)
  {
    unsigned int v10 = *v9;
    unsigned int v55 = v10;
    this[1] = v9 + 1;
LABEL_11:
    int v12 = AddrObjGoogle::protobuf::io::CodedInputStream::PushLimit((AddrObjGoogle::protobuf::io::CodedInputStream *)this, v10);
    switch(*(unsigned char *)a3)
    {
      case 1:
        if ((int)AddrObjGoogle::protobuf::io::CodedInputStream::BytesUntilLimit((AddrObjGoogle::protobuf::io::CodedInputStream *)this) < 1) {
          goto LABEL_13;
        }
        do
        {
          v54[0].__r_.__value_.__r.__words[0] = 0;
          if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((AddrObjGoogle::protobuf::io::CodedInputStream *)this, (unint64_t *)v54))return 0; {
          AddrObjGoogle::protobuf::internal::ExtensionSet::AddDouble(a1, a2, 1, 1, *(void *)(a3 + 24), *(double *)&v54[0].__r_.__value_.__l.__data_);
          }
        }
        while ((int)AddrObjGoogle::protobuf::io::CodedInputStream::BytesUntilLimit((AddrObjGoogle::protobuf::io::CodedInputStream *)this) > 0);
        goto LABEL_13;
      case 2:
        if ((int)AddrObjGoogle::protobuf::io::CodedInputStream::BytesUntilLimit((AddrObjGoogle::protobuf::io::CodedInputStream *)this) < 1) {
          goto LABEL_13;
        }
        while (1)
        {
          LODWORD(v54[0].__r_.__value_.__l.__data_) = 0;
          if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((AddrObjGoogle::protobuf::io::CodedInputStream *)this, (unsigned int *)v54))return 0; {
          AddrObjGoogle::protobuf::internal::ExtensionSet::AddFloat(a1, a2, 2, 1, *(void *)(a3 + 24), *(float *)&v54[0].__r_.__value_.__l.__data_);
          }
          if ((int)AddrObjGoogle::protobuf::io::CodedInputStream::BytesUntilLimit((AddrObjGoogle::protobuf::io::CodedInputStream *)this) <= 0) {
            goto LABEL_13;
          }
        }
      case 3:
        if ((int)AddrObjGoogle::protobuf::io::CodedInputStream::BytesUntilLimit((AddrObjGoogle::protobuf::io::CodedInputStream *)this) < 1) {
          goto LABEL_13;
        }
        do
        {
          v54[0].__r_.__value_.__r.__words[0] = 0;
          uint64_t v20 = this[1];
          if (v20 >= this[2] || *v20 < 0)
          {
            if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint64Fallback((AddrObjGoogle::protobuf::io::CodedInputStream *)this, (unint64_t *)v54))return 0; {
            uint64_t v21 = v54[0].__r_.__value_.__r.__words[0];
            }
          }
          else
          {
            uint64_t v21 = *v20;
            this[1] = v20 + 1;
          }
          AddrObjGoogle::protobuf::internal::ExtensionSet::AddInt64(a1, a2, 3, 1, v21, *(void *)(a3 + 24));
        }
        while ((int)AddrObjGoogle::protobuf::io::CodedInputStream::BytesUntilLimit((AddrObjGoogle::protobuf::io::CodedInputStream *)this) > 0);
        goto LABEL_13;
      case 4:
        if ((int)AddrObjGoogle::protobuf::io::CodedInputStream::BytesUntilLimit((AddrObjGoogle::protobuf::io::CodedInputStream *)this) < 1) {
          goto LABEL_13;
        }
        do
        {
          v54[0].__r_.__value_.__r.__words[0] = 0;
          uint64_t v22 = this[1];
          if (v22 >= this[2] || *v22 < 0)
          {
            if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint64Fallback((AddrObjGoogle::protobuf::io::CodedInputStream *)this, (unint64_t *)v54))return 0; {
            uint64_t v23 = v54[0].__r_.__value_.__r.__words[0];
            }
          }
          else
          {
            uint64_t v23 = *v22;
            v54[0].__r_.__value_.__r.__words[0] = v23;
            this[1] = v22 + 1;
          }
          AddrObjGoogle::protobuf::internal::ExtensionSet::AddInt64(a1, a2, 4, 1, v23, *(void *)(a3 + 24));
        }
        while ((int)AddrObjGoogle::protobuf::io::CodedInputStream::BytesUntilLimit((AddrObjGoogle::protobuf::io::CodedInputStream *)this) > 0);
        goto LABEL_13;
      case 5:
        if ((int)AddrObjGoogle::protobuf::io::CodedInputStream::BytesUntilLimit((AddrObjGoogle::protobuf::io::CodedInputStream *)this) < 1) {
          goto LABEL_13;
        }
        do
        {
          LODWORD(v54[0].__r_.__value_.__l.__data_) = 0;
          uint64_t v14 = this[1];
          if (v14 >= this[2] || *v14 < 0)
          {
            if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback((AddrObjGoogle::protobuf::io::CodedInputStream *)this, (unsigned int *)v54))return 0; {
            int v15 = (int)v54[0].__r_.__value_.__l.__data_;
            }
          }
          else
          {
            int v15 = *v14;
            this[1] = v14 + 1;
          }
          AddrObjGoogle::protobuf::internal::ExtensionSet::AddInt32(a1, a2, 5, 1, v15, *(void *)(a3 + 24));
        }
        while ((int)AddrObjGoogle::protobuf::io::CodedInputStream::BytesUntilLimit((AddrObjGoogle::protobuf::io::CodedInputStream *)this) > 0);
        goto LABEL_13;
      case 6:
        if ((int)AddrObjGoogle::protobuf::io::CodedInputStream::BytesUntilLimit((AddrObjGoogle::protobuf::io::CodedInputStream *)this) < 1) {
          goto LABEL_13;
        }
        while (1)
        {
          v54[0].__r_.__value_.__r.__words[0] = 0;
          if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((AddrObjGoogle::protobuf::io::CodedInputStream *)this, (unint64_t *)v54))return 0; {
          AddrObjGoogle::protobuf::internal::ExtensionSet::AddInt64(a1, a2, 6, 1, (uint64_t)v54[0].__r_.__value_.__l.__data_, *(void *)(a3 + 24));
          }
          if ((int)AddrObjGoogle::protobuf::io::CodedInputStream::BytesUntilLimit((AddrObjGoogle::protobuf::io::CodedInputStream *)this) <= 0) {
            goto LABEL_13;
          }
        }
      case 7:
        if ((int)AddrObjGoogle::protobuf::io::CodedInputStream::BytesUntilLimit((AddrObjGoogle::protobuf::io::CodedInputStream *)this) < 1) {
          goto LABEL_13;
        }
        while (1)
        {
          LODWORD(v54[0].__r_.__value_.__l.__data_) = 0;
          if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((AddrObjGoogle::protobuf::io::CodedInputStream *)this, (unsigned int *)v54))return 0; {
          AddrObjGoogle::protobuf::internal::ExtensionSet::AddInt32(a1, a2, 7, 1, (int)v54[0].__r_.__value_.__l.__data_, *(void *)(a3 + 24));
          }
          if ((int)AddrObjGoogle::protobuf::io::CodedInputStream::BytesUntilLimit((AddrObjGoogle::protobuf::io::CodedInputStream *)this) <= 0) {
            goto LABEL_13;
          }
        }
      case 8:
        if ((int)AddrObjGoogle::protobuf::io::CodedInputStream::BytesUntilLimit((AddrObjGoogle::protobuf::io::CodedInputStream *)this) < 1) {
          goto LABEL_13;
        }
        do
        {
          LODWORD(v54[0].__r_.__value_.__l.__data_) = 0;
          long long v24 = this[1];
          if (v24 >= this[2] || *v24 < 0)
          {
            if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback((AddrObjGoogle::protobuf::io::CodedInputStream *)this, (unsigned int *)v54))return 0; {
            int v25 = (int)v54[0].__r_.__value_.__l.__data_;
            }
          }
          else
          {
            int v25 = *v24;
            this[1] = v24 + 1;
          }
          AddrObjGoogle::protobuf::internal::ExtensionSet::AddBool(a1, a2, 8, 1, v25 != 0, *(void *)(a3 + 24));
        }
        while ((int)AddrObjGoogle::protobuf::io::CodedInputStream::BytesUntilLimit((AddrObjGoogle::protobuf::io::CodedInputStream *)this) > 0);
        goto LABEL_13;
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)v54, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/AddrObjGoogle/protobuf/extension_set.cc", 943);
        int v13 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v54, "Non-primitive types can't be packed.");
        AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v53, (AddrObjGoogle::protobuf::internal::LogMessage *)v13);
        AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&v54[0].__r_.__value_.__l.__data_);
        goto LABEL_13;
      case 0xD:
        if ((int)AddrObjGoogle::protobuf::io::CodedInputStream::BytesUntilLimit((AddrObjGoogle::protobuf::io::CodedInputStream *)this) < 1) {
          goto LABEL_13;
        }
        do
        {
          LODWORD(v54[0].__r_.__value_.__l.__data_) = 0;
          uint64_t v16 = this[1];
          if (v16 >= this[2] || *v16 < 0)
          {
            if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback((AddrObjGoogle::protobuf::io::CodedInputStream *)this, (unsigned int *)v54))return 0; {
            int v17 = (int)v54[0].__r_.__value_.__l.__data_;
            }
          }
          else
          {
            int v17 = *v16;
            LODWORD(v54[0].__r_.__value_.__l.__data_) = v17;
            this[1] = v16 + 1;
          }
          AddrObjGoogle::protobuf::internal::ExtensionSet::AddInt32(a1, a2, 13, 1, v17, *(void *)(a3 + 24));
        }
        while ((int)AddrObjGoogle::protobuf::io::CodedInputStream::BytesUntilLimit((AddrObjGoogle::protobuf::io::CodedInputStream *)this) > 0);
        goto LABEL_13;
      case 0xE:
        if ((int)AddrObjGoogle::protobuf::io::CodedInputStream::BytesUntilLimit((AddrObjGoogle::protobuf::io::CodedInputStream *)this) < 1) {
          goto LABEL_13;
        }
        do
        {
          LODWORD(v54[0].__r_.__value_.__l.__data_) = 0;
          uint64_t v26 = this[1];
          if (v26 >= this[2] || *v26 < 0)
          {
            if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback((AddrObjGoogle::protobuf::io::CodedInputStream *)this, (unsigned int *)v54))return 0; {
            uint64_t v27 = LODWORD(v54[0].__r_.__value_.__l.__data_);
            }
          }
          else
          {
            uint64_t v27 = *v26;
            this[1] = v26 + 1;
          }
          if ((*(unsigned int (**)(void, uint64_t))(a3 + 8))(*(void *)(a3 + 16), v27)) {
            AddrObjGoogle::protobuf::internal::ExtensionSet::AddInt32(a1, a2, 14, 1, v27, *(void *)(a3 + 24));
          }
        }
        while ((int)AddrObjGoogle::protobuf::io::CodedInputStream::BytesUntilLimit((AddrObjGoogle::protobuf::io::CodedInputStream *)this) > 0);
        goto LABEL_13;
      case 0xF:
        if ((int)AddrObjGoogle::protobuf::io::CodedInputStream::BytesUntilLimit((AddrObjGoogle::protobuf::io::CodedInputStream *)this) < 1) {
          goto LABEL_13;
        }
        while (1)
        {
          LODWORD(v54[0].__r_.__value_.__l.__data_) = 0;
          if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((AddrObjGoogle::protobuf::io::CodedInputStream *)this, (unsigned int *)v54))return 0; {
          AddrObjGoogle::protobuf::internal::ExtensionSet::AddInt32(a1, a2, 15, 1, (int)v54[0].__r_.__value_.__l.__data_, *(void *)(a3 + 24));
          }
          if ((int)AddrObjGoogle::protobuf::io::CodedInputStream::BytesUntilLimit((AddrObjGoogle::protobuf::io::CodedInputStream *)this) <= 0) {
            goto LABEL_13;
          }
        }
      case 0x10:
        if ((int)AddrObjGoogle::protobuf::io::CodedInputStream::BytesUntilLimit((AddrObjGoogle::protobuf::io::CodedInputStream *)this) < 1) {
          goto LABEL_13;
        }
        while (1)
        {
          v54[0].__r_.__value_.__r.__words[0] = 0;
          if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((AddrObjGoogle::protobuf::io::CodedInputStream *)this, (unint64_t *)v54))return 0; {
          AddrObjGoogle::protobuf::internal::ExtensionSet::AddInt64(a1, a2, 16, 1, (uint64_t)v54[0].__r_.__value_.__l.__data_, *(void *)(a3 + 24));
          }
          if ((int)AddrObjGoogle::protobuf::io::CodedInputStream::BytesUntilLimit((AddrObjGoogle::protobuf::io::CodedInputStream *)this) <= 0) {
            goto LABEL_13;
          }
        }
      case 0x11:
        if ((int)AddrObjGoogle::protobuf::io::CodedInputStream::BytesUntilLimit((AddrObjGoogle::protobuf::io::CodedInputStream *)this) < 1) {
          goto LABEL_13;
        }
        do
        {
          LODWORD(v54[0].__r_.__value_.__l.__data_) = 0;
          uint64_t v18 = this[1];
          if (v18 >= this[2] || *v18 < 0)
          {
            if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback((AddrObjGoogle::protobuf::io::CodedInputStream *)this, (unsigned int *)v54))return 0; {
            unsigned int v19 = v54[0].__r_.__value_.__l.__data_;
            }
          }
          else
          {
            unsigned int v19 = *v18;
            this[1] = v18 + 1;
          }
          AddrObjGoogle::protobuf::internal::ExtensionSet::AddInt32(a1, a2, 17, 1, -(v19 & 1) ^ (v19 >> 1), *(void *)(a3 + 24));
        }
        while ((int)AddrObjGoogle::protobuf::io::CodedInputStream::BytesUntilLimit((AddrObjGoogle::protobuf::io::CodedInputStream *)this) > 0);
        goto LABEL_13;
      case 0x12:
        if ((int)AddrObjGoogle::protobuf::io::CodedInputStream::BytesUntilLimit((AddrObjGoogle::protobuf::io::CodedInputStream *)this) < 1) {
          goto LABEL_13;
        }
        break;
      default:
        goto LABEL_13;
    }
    do
    {
      v54[0].__r_.__value_.__r.__words[0] = 0;
      long long v28 = this[1];
      if (v28 >= this[2] || *v28 < 0)
      {
        if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint64Fallback((AddrObjGoogle::protobuf::io::CodedInputStream *)this, (unint64_t *)v54))return 0; {
        std::string::size_type v29 = v54[0].__r_.__value_.__r.__words[0];
        }
      }
      else
      {
        std::string::size_type v29 = *v28;
        this[1] = v28 + 1;
      }
      AddrObjGoogle::protobuf::internal::ExtensionSet::AddInt64(a1, a2, 18, 1, -(uint64_t)(v29 & 1) ^ (v29 >> 1), *(void *)(a3 + 24));
    }
    while ((int)AddrObjGoogle::protobuf::io::CodedInputStream::BytesUntilLimit((AddrObjGoogle::protobuf::io::CodedInputStream *)this) > 0);
LABEL_13:
    AddrObjGoogle::protobuf::io::CodedInputStream::PopLimit((uint64_t)this, v12);
    return 1;
  }
  if (AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback((AddrObjGoogle::protobuf::io::CodedInputStream *)this, &v55))
  {
    unsigned int v10 = v55;
    goto LABEL_11;
  }
  return 0;
}

void sub_188EF1768(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t AddrObjGoogle::protobuf::internal::ExtensionSet::MutableMessage(uint64_t **a1, int a2, char a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  int v13 = a2;
  uint64_t v8 = std::__tree<std::__value_type<int,AddrObjGoogle::protobuf::internal::ExtensionSet::Extension>,std::__map_value_compare<int,std::__value_type<int,AddrObjGoogle::protobuf::internal::ExtensionSet::Extension>,std::less<int>,true>,std::allocator<std::__value_type<int,AddrObjGoogle::protobuf::internal::ExtensionSet::Extension>>>::__emplace_unique_key_args<int,std::pair<int,AddrObjGoogle::protobuf::internal::ExtensionSet::Extension>>(a1, &v13, (uint64_t)&v13);
  uint64_t v9 = v8;
  v8[7] = a5;
  if (v10)
  {
    *((unsigned char *)v8 + 48) = a3;
    *((unsigned char *)v8 + 49) = 0;
    *((unsigned char *)v8 + 50) &= 0xFu;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 24))(a4);
    v9[5] = (uint64_t *)result;
    *((unsigned char *)v9 + 50) &= 0xF0u;
  }
  else
  {
    char v12 = *((unsigned char *)v8 + 50);
    *((unsigned char *)v8 + 50) = v12 & 0xF0;
    uint64_t result = (uint64_t)v8[5];
    if ((v12 & 0x10) != 0) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 32))(result, a4);
    }
  }
  return result;
}

uint64_t **std::__tree<std::__value_type<int,AddrObjGoogle::protobuf::internal::ExtensionSet::Extension>,std::__map_value_compare<int,std::__value_type<int,AddrObjGoogle::protobuf::internal::ExtensionSet::Extension>,std::less<int>,true>,std::allocator<std::__value_type<int,AddrObjGoogle::protobuf::internal::ExtensionSet::Extension>>>::__emplace_unique_key_args<int,std::pair<int,AddrObjGoogle::protobuf::internal::ExtensionSet::Extension>>(uint64_t **a1, int *a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    int v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        int v9 = *((_DWORD *)v5 + 8);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    char v10 = (char *)operator new(0x40uLL);
    *((_DWORD *)v10 + 8) = *(_DWORD *)a3;
    *(_OWORD *)(v10 + 40) = *(_OWORD *)(a3 + 8);
    *((void *)v10 + 7) = *(void *)(a3 + 24);
    std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::__insert_node_at(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void addr_obj::V2AddressObjectProto::New(addr_obj::V2AddressObjectProto *this)
{
}

void sub_188EF1978(_Unwind_Exception *a1)
{
  MEMORY[0x18C11F580](v1, 0x10A1C40BACA7D59);
  _Unwind_Resume(a1);
}

uint64_t AddrObjGoogle::protobuf::internal::WireFormatLite::ReadMessage(AddrObjGoogle::protobuf::internal::WireFormatLite *this, AddrObjGoogle::protobuf::io::CodedInputStream *a2, AddrObjGoogle::protobuf::MessageLite *a3)
{
  unsigned int v13 = 0;
  uint64_t v5 = (char *)*((void *)this + 1);
  if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
  {
    uint64_t result = AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v13);
    if (!result) {
      return result;
    }
  }
  else
  {
    unsigned int v13 = *v5;
    *((void *)this + 1) = v5 + 1;
  }
  int v7 = *((_DWORD *)this + 14);
  int v8 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 14) = v7 + 1;
  if (v7 >= v8) {
    return 0;
  }
  int v9 = AddrObjGoogle::protobuf::io::CodedInputStream::PushLimit(this, v13);
  uint64_t result = (*(uint64_t (**)(AddrObjGoogle::protobuf::io::CodedInputStream *, AddrObjGoogle::protobuf::internal::WireFormatLite *))(*(void *)a2 + 64))(a2, this);
  if (!result) {
    return result;
  }
  if (!*((unsigned char *)this + 36)) {
    return 0;
  }
  AddrObjGoogle::protobuf::io::CodedInputStream::PopLimit((uint64_t)this, v9);
  int v10 = *((_DWORD *)this + 14);
  BOOL v11 = __OFSUB__(v10, 1);
  int v12 = v10 - 1;
  if (v12 < 0 == v11) {
    *((_DWORD *)this + 14) = v12;
  }
  return 1;
}

uint64_t AddrObjGoogle::protobuf::internal::ExtensionSet::FindExtensionInfoFromTag(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int *a4, unsigned __int8 *a5)
{
  char v6 = a2;
  *a4 = a2 >> 3;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a3 + 16))(a3))
  {
    int v7 = v6 & 7;
    if (a5[2]) {
      BOOL v8 = v7 == 2;
    }
    else {
      BOOL v8 = v7 == AddrObjGoogle::protobuf::internal::WireFormatLite::kWireTypeForFieldType[*a5];
    }
    int v9 = !v8;
  }
  else
  {
    int v9 = 1;
  }
  return v9 ^ 1u;
}

uint64_t AddrObjGoogle::protobuf::internal::GeneratedExtensionFinder::Find(uint64_t a1, unsigned int a2, _OWORD *a3)
{
  if (!qword_1E9117580) {
    return 0;
  }
  v7[0] = *(void *)(a1 + 8);
  v7[1] = a2;
  id v4 = std::__hash_table<std::__hash_value_type<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>,AddrObjGoogle::protobuf::internal::ExtensionInfo>,std::__unordered_map_hasher<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>,std::__hash_value_type<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>,AddrObjGoogle::protobuf::internal::ExtensionInfo>,AddrObjGoogle::protobuf::hash<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>>,std::equal_to<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>>,true>,std::__unordered_map_equal<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>,std::__hash_value_type<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>,AddrObjGoogle::protobuf::internal::ExtensionInfo>,std::equal_to<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>>,AddrObjGoogle::protobuf::hash<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>>,true>,std::allocator<std::__hash_value_type<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>,AddrObjGoogle::protobuf::internal::ExtensionInfo>>>::find<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>>((void *)qword_1E9117580, (uint64_t)v7);
  if (!v4) {
    return 0;
  }
  long long v5 = *((_OWORD *)v4 + 3);
  *a3 = *((_OWORD *)v4 + 2);
  a3[1] = v5;
  return 1;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>,AddrObjGoogle::protobuf::internal::ExtensionInfo>,std::__unordered_map_hasher<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>,std::__hash_value_type<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>,AddrObjGoogle::protobuf::internal::ExtensionInfo>,AddrObjGoogle::protobuf::hash<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>>,std::equal_to<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>>,true>,std::__unordered_map_equal<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>,std::__hash_value_type<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>,AddrObjGoogle::protobuf::internal::ExtensionInfo>,std::equal_to<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>>,AddrObjGoogle::protobuf::hash<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>>,true>,std::allocator<std::__hash_value_type<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>,AddrObjGoogle::protobuf::internal::ExtensionInfo>>>::find<std::pair<AddrObjGoogle::protobuf::MessageLite const*,int>>(void *a1, uint64_t a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint64_t v3 = *(int *)(a2 + 8);
  unint64_t v4 = v3 - *(void *)a2 + (*(void *)a2 << 16);
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    uint64_t v6 = v3 - *(void *)a2 + (*(void *)a2 << 16);
    if (v4 >= *(void *)&v2) {
      uint64_t v6 = v4 % *(void *)&v2;
    }
  }
  else
  {
    uint64_t v6 = (*(void *)&v2 - 1) & v4;
  }
  int v7 = *(uint64_t ***)(*a1 + 8 * v6);
  if (!v7) {
    return 0;
  }
  for (uint64_t result = *v7; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v9 = result[1];
    if (v4 == v9)
    {
      if (result[2] == *(void *)a2 && *((_DWORD *)result + 6) == v3) {
        return result;
      }
    }
    else
    {
      if (v5.u32[0] > 1uLL)
      {
        if (v9 >= *(void *)&v2) {
          v9 %= *(void *)&v2;
        }
      }
      else
      {
        v9 &= *(void *)&v2 - 1;
      }
      if (v9 != v6) {
        return 0;
      }
    }
  }
  return result;
}

char *std::vector<GEOLocationCoordinate3D>::__assign_with_size[abi:ne180100]<GEOLocationCoordinate3D*,GEOLocationCoordinate3D*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  int v7 = result;
  uint64_t v8 = *((void *)result + 2);
  unint64_t v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)result) >> 3) < a4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t result = std::vector<zilch::TrafficDynamicTile::Flow>::__vallocate[abi:ne180100](v7, v12);
    uint64_t v14 = (char *)v7[1];
    unsigned int v13 = (void **)(v7 + 1);
    unint64_t v9 = v14;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      unsigned int v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  unsigned int v13 = (void **)(result + 8);
  uint64_t v15 = (unsigned char *)*((void *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 3) >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[8 * ((v15 - v9) >> 3)];
  if (v15 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v15 - v9);
    unint64_t v9 = (char *)*v13;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    unsigned int v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *unsigned int v13 = &v9[v17];
  return result;
}

uint64_t MapsFeature_IsAvailable_SSAO()
{
  return 1;
}

uint64_t MapsFeature_IsAvailable_ElevatedPolygons()
{
  return 1;
}

void sub_188EF3374(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<geo::codec::VectorTile,geo::StdAllocator<geo::codec::VectorTile,geo::codec::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a1, 3840);
}

void sub_188EF35F0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EF3F58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_188EF4378(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 120));
  _Unwind_Resume(a1);
}

void sub_188EF4C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::__shared_weak_count::~__shared_weak_count(v26);
  operator delete(v28);
  if (a16 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_188EF5184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location)
{
  objc_destroyWeak(v24);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_188EF5360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t gloria::DbReaderDisk::DbReaderDisk(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = &unk_1ED5142C0;
  *(void *)(a1 + 8) = 0;
  unint64_t v4 = (std::string *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  uint8x8_t v5 = (const char *)a2;
  if (*(char *)(a2 + 23) < 0) {
    uint8x8_t v5 = *(const char **)a2;
  }
  if (realpath_DARWIN_EXTSN(v5, __s))
  {
    std::string::basic_string[abi:ne180100]<0>(&v7, __s);
    if (*(char *)(a1 + 31) < 0) {
      operator delete(v4->__r_.__value_.__l.__data_);
    }
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
    v4->__r_.__value_.__r.__words[2] = v8;
  }
  else
  {
    std::string::operator=(v4, (const std::string *)a2);
  }
  return a1;
}

void sub_188EF5554(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_188EF59C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  gloria::DbOptions::~DbOptions((gloria::DbOptions *)&a20);

  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<gloria::DbReaderDisk,std::allocator<gloria::DbReaderDisk>,char const(&)[1],void>@<X0>(char *a1@<X1>, void *a2@<X8>)
{
  unint64_t v4 = operator new(0x38uLL);
  uint64_t result = std::__shared_ptr_emplace<gloria::DbReaderDisk>::__shared_ptr_emplace[abi:ne180100]<char const(&)[1],std::allocator<gloria::DbReaderDisk>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_188EF5A90(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<gloria::DbReaderDisk>::__shared_ptr_emplace[abi:ne180100]<char const(&)[1],std::allocator<gloria::DbReaderDisk>,0>(void *a1, char *__s)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1ED518860;
  std::allocator<gloria::DbReaderDisk>::construct[abi:ne180100]<gloria::DbReaderDisk,char const(&)[1]>((int)&v4, (uint64_t)(a1 + 3), __s);
  return a1;
}

void sub_188EF5B00(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<gloria::DbReaderDisk>::construct[abi:ne180100]<gloria::DbReaderDisk,char const(&)[1]>(int a1, uint64_t a2, char *__s)
{
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  gloria::DbReaderDisk::DbReaderDisk(a2, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_188EF5B64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void gloria::DB::Open(gloria::DB *this, const gloria::DbOptions *a2, gloria::Status *a3)
{
}

void sub_188EF5C40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  *uint64_t v16 = 0;
  (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  _Unwind_Resume(a1);
}

uint64_t gloria::GloriaDB::GloriaDB(uint64_t result, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  *(void *)uint64_t result = &unk_1ED514520;
  *(void *)(result + 8) = v3;
  *(void *)(result + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(result + 24) = *((_OWORD *)a2 + 1);
  uint64_t v4 = a2[5];
  *(void *)(result + 40) = a2[4];
  *(void *)(result + 48) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  char v5 = *((unsigned char *)a2 + 56);
  *(void *)(result + 56) = a2[6];
  *(unsigned char *)(result + 64) = v5;
  uint64_t v6 = *(void *)(result + 16);
  *(void *)(result + 72) = *(void *)(result + 8);
  *(void *)(result + 80) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(result + 88) = *(_OWORD *)(result + 24);
  uint64_t v7 = *(void *)(result + 48);
  *(void *)(result + 104) = *(void *)(result + 40);
  *(void *)(result + 112) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(result + 120) = *(void *)(result + 56);
  *(unsigned char *)(result + 128) = *(unsigned char *)(result + 64);
  *(void *)(result + 144) = 0;
  *(void *)(result + 136) = result + 144;
  *(void *)(result + 168) = 0;
  *(void *)(result + 152) = 0;
  *(void *)(result + 160) = result + 168;
  *(void *)(result + 184) = 0;
  *(void *)(result + 192) = 0;
  *(void *)(result + 176) = 0;
  return result;
}

void gloria::GloriaDB::Initialize(gloria::GloriaDB *this@<X0>, gloria::Status *a2@<X8>)
{
  gloria::ShardManager::Prepare((gloria::GloriaDB *)((char *)this + 72), (gloria::GloriaDB *)((char *)this + 136), a2);
  if (!*(_DWORD *)a2)
  {
    memset(v4, 0, sizeof(v4));
    gloria::ShardPool::AllShards((void *)this + 17, v4);
    gloria::RecordDecompressor::decompressor((_DWORD *)(*(void *)(*(void *)v4[0] + 128) + 8), &v5);
  }
}

void sub_188EF5FD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a17 < 0)
  {
    operator delete(a12);
    if ((v27 & 1) == 0)
    {
LABEL_8:
      uint64_t v29 = *v25;
      *int v25 = 0;
      if (v29) {
        (*(void (**)(uint64_t))(*(void *)v29 + 24))(v29);
      }
      MEMORY[0x18C11F580](v25, 0x20C4093837F09);
      operator delete(v23);
      if (*(char *)(v24 + 31) < 0) {
        operator delete(*(void **)(v24 + 8));
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void gloria::ShardPool::AllShards(void *a1, char **a2)
{
  uint64_t v2 = a1 + 1;
  uint64_t v3 = (void *)*a1;
  if ((void *)*a1 != a1 + 1)
  {
    std::string v5 = a2[1];
    do
    {
      uint64_t v6 = v3 + 5;
      unint64_t v7 = (unint64_t)a2[2];
      if ((unint64_t)v5 >= v7)
      {
        std::string::size_type v8 = *a2;
        uint64_t v9 = (v5 - *a2) >> 3;
        unint64_t v10 = v9 + 1;
        if ((unint64_t)(v9 + 1) >> 61) {
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v11 = v7 - (void)v8;
        if (v11 >> 2 > v10) {
          unint64_t v10 = v11 >> 2;
        }
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v10;
        }
        if (v12)
        {
          if (v12 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unsigned int v13 = (char *)operator new(8 * v12);
        }
        else
        {
          unsigned int v13 = 0;
        }
        uint64_t v14 = &v13[8 * v9];
        *(void *)uint64_t v14 = v6;
        uint64_t v15 = v14 + 8;
        if (v5 != v8)
        {
          do
          {
            uint64_t v16 = *((void *)v5 - 1);
            v5 -= 8;
            *((void *)v14 - 1) = v16;
            v14 -= 8;
          }
          while (v5 != v8);
          std::string v5 = *a2;
        }
        *a2 = v14;
        a2[1] = v15;
        a2[2] = &v13[8 * v12];
        if (v5) {
          operator delete(v5);
        }
        std::string v5 = v15;
      }
      else
      {
        *(void *)std::string v5 = v6;
        v5 += 8;
      }
      a2[1] = v5;
      size_t v17 = (void *)v3[1];
      if (v17)
      {
        do
        {
          uint64_t v18 = v17;
          size_t v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          uint64_t v18 = (void *)v3[2];
          BOOL v19 = *v18 == (void)v3;
          uint64_t v3 = v18;
        }
        while (!v19);
      }
      uint64_t v3 = v18;
    }
    while (v18 != v2);
  }
}

void gloria::RecordDecompressor::decompressor(_DWORD *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  if ((*a1 - 1) <= 1) {
    operator new();
  }
  operator new();
}

void sub_188EF62A0(_Unwind_Exception *a1)
{
  void *v1 = 0;
  _Unwind_Resume(a1);
}

void sub_188EF6578(_Unwind_Exception *a1)
{
}

void sub_188EF6ACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_188EF6B68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t GEOGloriaPopulateAvailableZoomRange(void *a1, unint64_t *a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = (uint64_t)v3;
  if (v3) {
    size_t v5 = v3[2];
  }
  else {
    size_t v5 = 0;
  }
  std::vector<unsigned char>::reserve(a2, v5);
  if (!v4) {
    goto LABEL_37;
  }
  int v6 = *(_DWORD *)(v4 + 32);
  if (!v6)
  {
    if (*(void *)(v4 + 16))
    {
      char v26 = -[GEOGloriaTessellationOptions zoomLevelsAtIndex:](v4, 0);
      char v27 = v26;
      uint64_t v29 = (unsigned char *)a2[1];
      unint64_t v28 = a2[2];
      if ((unint64_t)v29 >= v28)
      {
        unint64_t v35 = *a2;
        long long v36 = &v29[-*a2];
        unint64_t v37 = (unint64_t)(v36 + 1);
        if ((uint64_t)(v36 + 1) < 0) {
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v38 = v28 - v35;
        if (2 * v38 > v37) {
          unint64_t v37 = 2 * v38;
        }
        if (v38 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v39 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v39 = v37;
        }
        if (v39) {
          unint64_t v40 = (unint64_t)operator new(v39);
        }
        else {
          unint64_t v40 = 0;
        }
        uint64_t v54 = (char *)(v40 + v39);
        v36[v40] = v27;
        uint64_t v30 = (uint64_t)&v36[v40 + 1];
        if (v29 == (unsigned char *)v35)
        {
          v40 += (unint64_t)v36;
        }
        else
        {
          unsigned int v55 = &v29[~v35];
          do
          {
            char v56 = *--v29;
            (v55--)[v40] = v56;
          }
          while (v29 != (unsigned char *)v35);
          uint64_t v29 = (unsigned char *)*a2;
        }
        *a2 = v40;
        a2[1] = v30;
        a2[2] = (unint64_t)v54;
        if (v29) {
          operator delete(v29);
        }
      }
      else
      {
        *uint64_t v29 = v26;
        uint64_t v30 = (uint64_t)(v29 + 1);
      }
      a2[1] = v30;
      goto LABEL_80;
    }
LABEL_37:
    uint64_t v23 = GEOGetGloriaUtilLog();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      uint64_t v24 = "Invalid tessellation options: SINGLE_ZOOM with no zoom_levels";
      int v25 = buf;
      goto LABEL_39;
    }
    goto LABEL_40;
  }
  if (v6 != 1)
  {
    if (v6 == 2)
    {
      if (*(void *)(v4 + 16))
      {
        unint64_t v7 = 0;
        do
        {
          char v8 = -[GEOGloriaTessellationOptions zoomLevelsAtIndex:](v4, v7);
          char v9 = v8;
          uint64_t v11 = (unsigned char *)a2[1];
          unint64_t v10 = a2[2];
          if ((unint64_t)v11 >= v10)
          {
            unint64_t v13 = *a2;
            uint64_t v14 = &v11[-*a2];
            unint64_t v15 = (unint64_t)(v14 + 1);
            if ((uint64_t)(v14 + 1) < 0) {
              std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v16 = v10 - v13;
            if (2 * v16 > v15) {
              unint64_t v15 = 2 * v16;
            }
            if (v16 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v17 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v17 = v15;
            }
            if (v17) {
              uint64_t v18 = (char *)operator new(v17);
            }
            else {
              uint64_t v18 = 0;
            }
            BOOL v19 = &v14[(void)v18];
            uint64_t v20 = &v14[(void)v18];
            *uint64_t v20 = v9;
            unint64_t v12 = v20 + 1;
            if (v11 != (unsigned char *)v13)
            {
              uint64_t v21 = &v11[~v13];
              do
              {
                char v22 = *--v11;
                (v21--)[(void)v18] = v22;
              }
              while (v11 != (unsigned char *)v13);
              uint64_t v11 = (unsigned char *)*a2;
              BOOL v19 = v18;
            }
            *a2 = (unint64_t)v19;
            a2[1] = (unint64_t)v12;
            a2[2] = (unint64_t)&v18[v17];
            if (v11) {
              operator delete(v11);
            }
          }
          else
          {
            *uint64_t v11 = v8;
            unint64_t v12 = v11 + 1;
          }
          a2[1] = (unint64_t)v12;
          ++v7;
        }
        while (v7 < *(void *)(v4 + 16));
      }
      goto LABEL_80;
    }
    goto LABEL_41;
  }
  if (*(void *)(v4 + 16) <= 1uLL)
  {
    uint64_t v23 = GEOGetGloriaUtilLog();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      __int16 v59 = 0;
      uint64_t v24 = "Invalid tessellation options: RANGED_ZOOM with too few zoom_levels";
      int v25 = (uint8_t *)&v59;
LABEL_39:
      _os_log_impl(&dword_188D96000, v23, OS_LOG_TYPE_ERROR, v24, v25, 2u);
      goto LABEL_40;
    }
    goto LABEL_40;
  }
  unsigned int v31 = -[GEOGloriaTessellationOptions zoomLevelsAtIndex:](v4, 0);
  unsigned int v32 = -[GEOGloriaTessellationOptions zoomLevelsAtIndex:](v4, *(void *)(v4 + 16) - 1);
  unsigned int v33 = v32;
  if (v32 < v31)
  {
    uint64_t v23 = GEOGetGloriaUtilLog();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      __int16 v58 = 0;
      uint64_t v24 = "Invalid tessellation options: RANGED_ZOOM end zoom level is less than start zoom level";
      int v25 = (uint8_t *)&v58;
      goto LABEL_39;
    }
LABEL_40:

LABEL_41:
    uint64_t v34 = 0;
    goto LABEL_81;
  }
  if (v31 >= v32)
  {
LABEL_80:
    uint64_t v34 = 1;
    goto LABEL_81;
  }
  long long v41 = (unsigned char *)a2[1];
  do
  {
    unint64_t v42 = a2[2];
    if ((unint64_t)v41 >= v42)
    {
      unint64_t v44 = *a2;
      uint64_t v45 = &v41[-*a2];
      unint64_t v46 = (unint64_t)(v45 + 1);
      if ((uint64_t)(v45 + 1) < 0) {
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v47 = v42 - v44;
      if (2 * v47 > v46) {
        unint64_t v46 = 2 * v47;
      }
      if (v47 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v48 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v48 = v46;
      }
      if (v48) {
        int v49 = (char *)operator new(v48);
      }
      else {
        int v49 = 0;
      }
      uint64_t v50 = &v45[(void)v49];
      uint64_t v51 = &v45[(void)v49];
      *uint64_t v51 = v31;
      int v43 = v51 + 1;
      if (v41 != (unsigned char *)v44)
      {
        unsigned int v52 = &v41[~v44];
        do
        {
          char v53 = *--v41;
          (v52--)[(void)v49] = v53;
        }
        while (v41 != (unsigned char *)v44);
        long long v41 = (unsigned char *)*a2;
        uint64_t v50 = v49;
      }
      *a2 = (unint64_t)v50;
      a2[1] = (unint64_t)v43;
      a2[2] = (unint64_t)&v49[v48];
      if (v41) {
        operator delete(v41);
      }
    }
    else
    {
      *long long v41 = v31;
      int v43 = v41 + 1;
    }
    a2[1] = (unint64_t)v43;
    ++v31;
    uint64_t v34 = 1;
    long long v41 = v43;
  }
  while (v31 != v33);
LABEL_81:

  return v34;
}

void sub_188EF6FD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<unsigned char>::reserve(unint64_t *a1, size_t __sz)
{
  unint64_t v2 = *a1;
  if (a1[2] - *a1 < __sz)
  {
    if ((__sz & 0x8000000000000000) != 0) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    size_t v5 = (char *)a1[1];
    int v6 = operator new(__sz);
    unint64_t v7 = &v5[(void)v6 - v2];
    char v8 = v7;
    if (v5 != (char *)v2)
    {
      char v9 = &v5[~v2];
      do
      {
        char v10 = *--v5;
        (v9--)[(void)v6] = v10;
      }
      while (v5 != (char *)v2);
      char v8 = v6;
    }
    *a1 = (unint64_t)v8;
    a1[1] = (unint64_t)v7;
    a1[2] = (unint64_t)&v6[__sz];
    if (v2)
    {
      operator delete((void *)v2);
    }
  }
}

void sub_188EF749C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  gloria::ManagedSlice::~ManagedSlice(&a16);
  _Unwind_Resume(a1);
}

id GEOAddressObjectOfGEOPlace(void *a1)
{
  id v1 = a1;
  if ([v1 hasAddress])
  {
    unint64_t v2 = objc_alloc_init(GEOPDAddress);
    uint64_t v3 = objc_alloc_init(GEOPDLocalizedAddress);
    uint64_t v4 = [v1 address];
    -[GEOPDLocalizedAddress setAddress:]((uint64_t)v3, v4);

    size_t v5 = [MEMORY[0x1E4F1CA48] arrayWithObject:v3];
    -[GEOPDAddress setLocalizedAddress:]((uint64_t)v2, v5);

    int v6 = objc_alloc_init(GEOLocalizedString);
    unint64_t v7 = [v1 spokenAddress];
    [(GEOLocalizedString *)v6 setStringValue:v7];

    char v8 = [MEMORY[0x1E4F1CA48] arrayWithObject:v6];
    -[GEOPDAddress setSpokenNavigationAddress:]((uint64_t)v2, v8);

    char v9 = objc_alloc_init(GEOPDLocalizedSpokenStructuredAddress);
    char v10 = [v1 spokenStructuredAddress];
    -[GEOPDLocalizedSpokenStructuredAddress setSpokenStructuredAddress:]((uint64_t)v9, v10);

    uint64_t v11 = [MEMORY[0x1E4F1CA48] arrayWithObject:v9];
    -[GEOPDAddress setSpokenStructuredAddress:]((uint64_t)v2, v11);

    unint64_t v12 = +[GEOAddressObject addressObjectWithPlaceDataAddressObject:0 placeDataAddress:v2 placeDataInfo:0 placeDataEntity:0];
  }
  else
  {
    unint64_t v12 = 0;
  }

  return v12;
}

void sub_188EF7A50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188EF7BDC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EF7CE0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188EF824C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188EF9128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id GEOOfflineStateAsString(unint64_t a1)
{
  int v1 = a1;
  unint64_t v2 = a1 >> 8;
  unint64_t v3 = a1 >> 16;
  uint64_t v4 = NSString;
  size_t v5 = GEOOfflineModeAsString(a1);
  int v6 = GEOOfflineReasonAsString(BYTE1(v1));
  unint64_t v7 = GEOOfflineDeviceAsString(BYTE2(v1));
  char v8 = [v4 stringWithFormat:@"%@:%@:%@(0x%06x)", v5, v6, v7, v1 & 0xFF0000FF | (v3 << 16) | (v2 << 8)];

  return v8;
}

id GEOOfflineReasonAsString(unsigned int a1)
{
  if (a1 >= 3)
  {
    int v1 = objc_msgSend(NSString, "stringWithFormat:", @"Invalid(%d)", a1);
  }
  else
  {
    int v1 = (void *)*((void *)&off_1E53E32B8 + (char)a1);
  }

  return v1;
}

id GEOOfflineModeAsString(unsigned int a1)
{
  if (a1 >= 3)
  {
    int v1 = objc_msgSend(NSString, "stringWithFormat:", @"Invalid(%d)", a1);
  }
  else
  {
    int v1 = (void *)*((void *)&off_1E53E32A0 + (char)a1);
  }

  return v1;
}

__CFString *GEOOfflineDeviceAsString(unsigned int a1)
{
  if (a1)
  {
    if (a1 == 1)
    {
      unint64_t v2 = @"Local";
    }
    else
    {
      objc_msgSend(NSString, "stringWithFormat:", @"Invalid(%d)", a1);
      unint64_t v2 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    unint64_t v2 = @"Unset";
  }
  return v2;
}

void sub_188EF9514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188EF968C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id GEOOfflineSuggestedStateAsString(unint64_t a1)
{
  if (a1 >= 3)
  {
    uint64_t v1 = objc_msgSend(NSString, "stringWithFormat:", @"Invalid(%d)", a1);
  }
  else
  {
    uint64_t v1 = (void *)*((void *)&off_1E53E10C0 + a1);
  }

  return v1;
}

void sub_188EF9C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id GEOXPCErrorFromReply(void *a1)
{
  std::string v9[2] = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (MEMORY[0x18C1213B0]() == MEMORY[0x1E4F145A8])
  {
    string = xpc_dictionary_get_string(v1, (const char *)*MEMORY[0x1E4F14530]);
    if (string) {
      uint64_t v4 = (__CFString *)[[NSString alloc] initWithCString:string encoding:1];
    }
    else {
      uint64_t v4 = @"unknown";
    }
    id v5 = (id)*MEMORY[0x1E4F1D138];
    v8[0] = v5;
    v8[1] = @"com.apple.geo.UnderlyingXPCError";
    v9[0] = @"Unable to connect to geod";
    v9[1] = v4;
    int v6 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v9 forKeys:v8 count:2];

    unint64_t v2 = [MEMORY[0x1E4F28C58] GEOErrorWithCode:-15 userInfo:v6];
  }
  else
  {
    unint64_t v2 = 0;
  }

  return v2;
}

void sub_188EFA880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_188EFBA1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL GEOPDAddressObjectFilterReadAllFrom(uint64_t a1, void *a2)
{
  unint64_t v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    uint64_t v4 = (int *)MEMORY[0x1E4F940E8];
    id v5 = (int *)MEMORY[0x1E4F940E0];
    int v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v3[*v6]) {
          break;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          BOOL v15 = v9++ >= 9;
          if (v15)
          {
            unint64_t v10 = 0;
            int v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v16 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v16 || (v10 & 7) == 4) {
          break;
        }
        if ((v10 >> 3) == 2)
        {
          char v19 = 0;
          unsigned int v20 = 0;
          uint64_t v21 = 0;
          *(unsigned char *)(a1 + 28) |= 1u;
          while (1)
          {
            uint64_t v22 = *v4;
            uint64_t v23 = *(void *)&v3[v22];
            unint64_t v24 = v23 + 1;
            if (v23 == -1 || v24 > *(void *)&v3[*v5]) {
              break;
            }
            char v25 = *(unsigned char *)(*(void *)&v3[*v7] + v23);
            *(void *)&v3[v22] = v24;
            v21 |= (unint64_t)(v25 & 0x7F) << v19;
            if ((v25 & 0x80) == 0) {
              goto LABEL_36;
            }
            v19 += 7;
            BOOL v15 = v20++ >= 9;
            if (v15)
            {
              uint64_t v21 = 0;
              goto LABEL_38;
            }
          }
          v3[*v6] = 1;
LABEL_36:
          if (v3[*v6]) {
            uint64_t v21 = 0;
          }
LABEL_38:
          *(unsigned char *)(a1 + 24) = v21 != 0;
        }
        else if ((v10 >> 3) == 1)
        {
          uint64_t v18 = PBReaderReadString();
          if (v18) {
            -[GEOPDAddressObjectFilter addLibraryVersion:](a1, v18);
          }
        }
        else
        {
          if (!*(void *)(a1 + 8))
          {
            id v26 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            char v27 = *(void **)(a1 + 8);
            *(void *)(a1 + 8) = v26;
          }
          if (!PBUnknownFieldAdd()) {
            goto LABEL_41;
          }
        }
      }
      while (*(void *)&v3[*v4] < *(void *)&v3[*v5]);
    }
    BOOL v28 = v3[*v6] == 0;
  }
  else
  {
LABEL_41:
    BOOL v28 = 0;
  }
  objc_sync_exit(v3);

  return v28;
}

void sub_188EFC034(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t geo::codec::_readPolygons(uint64_t *a1, uint64_t *a2)
{
  if (!geo::codec::_readPolygonsofType((uint64_t)a1, 32, a2))
  {
    int v8 = 2640;
    goto LABEL_24;
  }
  uint64_t v4 = a1[1];
  if (v4)
  {
    uint64_t v5 = *a1;
    if (v4 == 1)
    {
      unint64_t v6 = 0;
      uint64_t v7 = 0;
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      unint64_t v6 = v4 & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v11 = (unsigned __int16 *)(v5 + 16);
      unint64_t v12 = v4 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        int v13 = *(v11 - 8);
        int v15 = *v11;
        v11 += 16;
        int v14 = v15;
        if (v13 == 104) {
          ++v9;
        }
        if (v14 == 104) {
          ++v10;
        }
        v12 -= 2;
      }
      while (v12);
      uint64_t v7 = v10 + v9;
      if (v4 == v6)
      {
LABEL_17:
        if (v7)
        {
          if (geo::codec::_readModernBuildings(a1, 104, (geo::codec::Allocator **)(*a2 + 816), (unint64_t *)(*a2 + 280), a2))return 1; {
          int v8 = 2644;
          }
          goto LABEL_24;
        }
        goto LABEL_20;
      }
    }
    uint64_t v16 = v4 - v6;
    size_t v17 = (unsigned __int16 *)(v5 + 16 * v6);
    do
    {
      int v18 = *v17;
      v17 += 8;
      if (v18 == 104) {
        ++v7;
      }
      --v16;
    }
    while (v16);
    goto LABEL_17;
  }
LABEL_20:
  if (geo::codec::_readPolygonsofType((uint64_t)a1, 33, a2)) {
    return 1;
  }
  int v8 = 2646;
LABEL_24:
  fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v8);
  return 0;
}

uint64_t geo::codec::_readPolygonsofType(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v172 = 0;
  uint64_t v173 = 0;
  uint64_t v6 = *a3;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint64_t v8 = 0;
    unsigned int v9 = 0;
    while (*(unsigned __int16 *)(*(void *)a1 + 16 * v8) != a2)
    {
      uint64_t v8 = ++v9;
      if (v7 <= v9) {
        goto LABEL_5;
      }
    }
    uint64_t v10 = geo::codec::chapterAt(a1, v9, a2, v6 + 1912);
    uint64_t v6 = *a3;
  }
  else
  {
LABEL_5:
    uint64_t v10 = 0;
  }
  uint64_t v11 = chapterTypeAsString(a2);
  unint64_t v168 = v11;
  uint64_t v169 = v6;
  uint64_t v12 = a3[1];
  unsigned int v170 = (std::__shared_weak_count *)v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  v13.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = v13.__d_.__rep_;
  int v14 = (double *)&unk_18A632000;
  if (!v10)
  {
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v13.__d_.__rep_;
    char v24 = 1;
    v25.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    uint64_t v164 = (uint64_t)v11;
    if (v11) {
      goto LABEL_38;
    }
    goto LABEL_39;
  }
  uint64_t v166 = 0;
  uint64_t v167 = 0;
  uint64_t v164 = 0;
  int v165 = 0;
  uint64_t v163 = 0;
  uint64_t v15 = *(void *)(*a3 + 856);
  uint64_t v16 = *(void *)(*a3 + 864);
  if ((geo::codec::chapterReadVarUint32((void *)v10, (unsigned int *)&v167 + 1) & 1) == 0)
  {
    id v26 = (FILE *)*MEMORY[0x1E4F143C8];
    int v27 = 2679;
LABEL_21:
    uint64_t v28 = fprintf(v26, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v27);
    uint64_t v29 = 0;
    goto LABEL_22;
  }
  if ((geo::codec::chapterReadVarUint32((void *)v10, (unsigned int *)&v167) & 1) == 0)
  {
    id v26 = (FILE *)*MEMORY[0x1E4F143C8];
    int v27 = 2680;
    goto LABEL_21;
  }
  uint64_t v154 = v15;
  uint64_t v156 = v16;
  int v17 = v167;
  uint64_t v19 = *a3;
  int v18 = (std::__shared_weak_count *)a3[1];
  *(void *)&long long v160 = "ChapterVertices";
  *((void *)&v160 + 1) = v19;
  uint64_t v161 = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v20.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v162 = v20.__d_.__rep_;
  uint64_t v21 = geo::codec::chapterAt(a1, HIDWORD(v167), 20, *a3 + 1912);
  uint64_t v158 = v21;
  int v153 = v17;
  if (!v21)
  {
    int v49 = 2685;
LABEL_47:
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v49);
    int v22 = 6;
    goto LABEL_48;
  }
  if ((geo::codec::decodeVertices(v21, &v173, (uint64_t *)&v172, *(_DWORD *)(v21 + 64) > 0x43u) & 1) == 0)
  {
    int v49 = 2687;
    goto LABEL_47;
  }
  int v22 = 0;
LABEL_48:
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v50 = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v174 = "ChapterVertices";
  v159[0] = (uint64_t *)&v174;
  uint64_t v28 = (uint64_t)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v19 + 1912, (uint64_t *)&v174, (uint64_t)&std::piecewise_construct, v159);
  *(double *)(v28 + 32) = (double)((v50 - v20.__d_.__rep_) / 1000) * 0.001;
  uint64_t v51 = v156;
  uint64_t v29 = v158;
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  if (v22 == 6) {
    goto LABEL_22;
  }
  uint64_t v52 = v154;
  if (a2 == 32)
  {
    uint64_t v54 = *a3;
    char v53 = (std::__shared_weak_count *)a3[1];
    *(void *)&long long v160 = "ChapterPolygonFeatures";
    *((void *)&v160 + 1) = v54;
    uint64_t v161 = v53;
    if (v53) {
      atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v55.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    char v56 = (void *)*a3;
    uint64_t v57 = (uint64_t *)(*a3 + 1216);
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v162 = v55.__d_.__rep_;
    if (geo::codec::decodePointCharacteristics((void *)a1, 52, v57, v56 + 153, v56 + 156, v56 + 157, (uint64_t)(v56 + 239)))
    {
      int v58 = 0;
    }
    else
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 2692);
      int v58 = 6;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v59 = std::chrono::steady_clock::now().__d_.__rep_;
    unint64_t v174 = "ChapterPolygonFeatures";
    v159[0] = (uint64_t *)&v174;
    uint64_t v28 = (uint64_t)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v54 + 1912, (uint64_t *)&v174, (uint64_t)&std::piecewise_construct, v159);
    *(double *)(v28 + 32) = (double)((v59 - v55.__d_.__rep_) / 1000) * 0.001;
    uint64_t v51 = v156;
    uint64_t v29 = v158;
    if (v53 && !atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
    if (v58 != 6)
    {
      uint64_t v52 = v154;
      goto LABEL_63;
    }
LABEL_22:
    char v24 = 0;
    if (!v173) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
LABEL_63:
  unint64_t v60 = v173;
  if (v173 || (unint64_t v60 = v172) != 0) {
    unint64_t v61 = *((void *)v60 + 5);
  }
  else {
    unint64_t v61 = 0;
  }
  if ((geo::codec::chapterReadVarUint32((void *)v10, (unsigned int *)&v166 + 1) & 1) == 0)
  {
    uint64_t v63 = (FILE *)*MEMORY[0x1E4F143C8];
    int v64 = 2702;
    goto LABEL_79;
  }
  if (HIDWORD(v166) >= 0x10000)
  {
    uint64_t v63 = (FILE *)*MEMORY[0x1E4F143C8];
    int v64 = 2705;
    goto LABEL_79;
  }
  if ((geo::codec::_makeSpaceForLabels((geo::codec::Allocator *)HIDWORD(v166), &v163, a3) & 1) == 0)
  {
    uint64_t v63 = (FILE *)*MEMORY[0x1E4F143C8];
    int v64 = 2706;
    goto LABEL_79;
  }
  if ((geo::codec::chapterReadVarUint32((void *)v10, (unsigned int *)&v166) & 1) == 0)
  {
    uint64_t v63 = (FILE *)*MEMORY[0x1E4F143C8];
    int v64 = 2709;
    goto LABEL_79;
  }
  if (v166 >= 0x10000)
  {
    uint64_t v63 = (FILE *)*MEMORY[0x1E4F143C8];
    int v64 = 2711;
LABEL_79:
    uint64_t v28 = fprintf(v63, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v64);
    char v24 = 0;
    if (!v173) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (a2 == 32)
  {
    std::vector<GeoCodecsPolygonFeature,geo::StdAllocator<GeoCodecsPolygonFeature,geo::codec::Allocator>>::resize((uint64_t *)(*a3 + 96), v166);
    _ZNSt3__115allocate_sharedB8ne180100I22FeatureStyleAttributesNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v160);
    uint64_t v62 = v160;
    **(void **)long long v160 = 0x200000005;
    *(_WORD *)(v62 + 33) = 513;
    std::shared_ptr<FeatureStyleAttributes const>::operator=[abi:ne180100]<FeatureStyleAttributes,void>((uint64_t)&v164, &v160);
    std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)&v160);
    uint64_t v143 = 0;
  }
  else
  {
    if (!v61)
    {
      uint64_t v63 = (FILE *)*MEMORY[0x1E4F143C8];
      int v64 = 2716;
      goto LABEL_79;
    }
    std::vector<GeoCodecsBuildingFootprintFeature,geo::StdAllocator<GeoCodecsBuildingFootprintFeature,geo::codec::Allocator>>::resize((unint64_t *)(*a3 + 280), v166);
    uint64_t v143 = *(void *)(*a3 + 312);
    if (!v143)
    {
      uint64_t v63 = (FILE *)*MEMORY[0x1E4F143C8];
      int v64 = 2721;
      goto LABEL_79;
    }
    _ZNSt3__115allocate_sharedB8ne180100I22FeatureStyleAttributesNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v160);
    uint64_t v65 = v160;
    **(void **)long long v160 = 0x400000005;
    *(_WORD *)(v65 + 33) = 1025;
    std::shared_ptr<FeatureStyleAttributes const>::operator=[abi:ne180100]<FeatureStyleAttributes,void>((uint64_t)&v164, &v160);
    std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)&v160);
  }
  int v66 = v153;
  int v67 = FeatureStyleAttributesSet::insert(*a3 + 1112, &v164);
  uint64_t v68 = v67[1];
  *(void *)&long long v160 = *v67;
  *((void *)&v160 + 1) = v68;
  if (v68) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v68 + 8), 1uLL, memory_order_relaxed);
  }
  std::shared_ptr<FeatureStyleAttributes const>::operator=[abi:ne180100]<FeatureStyleAttributes,void>((uint64_t)&v164, &v160);
  uint64_t v28 = std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)&v160);
  if (v166)
  {
    uint64_t v69 = 0;
    uint64_t v144 = 0;
    unint64_t v146 = v51 - v52;
    do
    {
      uint64_t v70 = *a3;
      if (a2 == 32)
      {
        uint64_t v157 = 0;
        uint64_t v71 = *(void *)(v70 + 96) + (v69 << 7);
      }
      else
      {
        uint64_t v71 = *(void *)(v70 + 280) + 136 * v69;
        *(void *)(v71 + 112) = 0;
        uint64_t v157 = v71;
      }
      uint64_t v155 = v69;
      uint64_t v72 = a3[1];
      if (v72) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v72 + 16), 1uLL, memory_order_relaxed);
      }
      unint64_t v73 = *(std::__shared_weak_count **)(v71 + 8);
      *(void *)uint64_t v71 = v70;
      *(void *)(v71 + 8) = v72;
      if (v73) {
        std::__shared_weak_count::__release_weak(v73);
      }
      if ((geo::codec::hp_readLabel(v71, (void *)v10, &v163, v146, a3) & 1) == 0)
      {
        uint64_t v63 = (FILE *)*MEMORY[0x1E4F143C8];
        int v64 = 2747;
        goto LABEL_79;
      }
      uint64_t v74 = *(void *)(v10 + 48);
      if ((unint64_t)(v74 + 1) <= *(void *)(v10 + 56))
      {
        unint64_t v75 = 0;
        *(unsigned char *)(v10 + 32) = 1;
        *(void *)(v10 + 8) = *(void *)(v10 + 40) + v74;
        *(_OWORD *)(v10 + 16) = xmmword_18A628440;
        uint64_t v76 = 1;
      }
      else
      {
        uint64_t v76 = *(void *)(v10 + 16);
        unint64_t v75 = *(void *)(v10 + 24);
      }
      unint64_t v77 = v75 + 1;
      unint64_t v78 = 8 * v76;
      if (v75 + 1 > 8 * v76)
      {
        uint64_t v63 = (FILE *)*MEMORY[0x1E4F143C8];
        int v64 = 2759;
        goto LABEL_79;
      }
      uint64_t v79 = *(void *)(v10 + 8);
      int v80 = *(unsigned __int8 *)(v79 + (v75 >> 3));
      *(void *)(v10 + 24) = v77;
      unint64_t v81 = v75 + 2;
      if (v75 + 2 > v78)
      {
        uint64_t v63 = (FILE *)*MEMORY[0x1E4F143C8];
        int v64 = 2760;
        goto LABEL_79;
      }
      int v152 = *(unsigned __int8 *)(v79 + (v77 >> 3));
      *(void *)(v10 + 24) = v81;
      unint64_t v82 = v75 + 3;
      if (v75 + 3 > v78)
      {
        uint64_t v63 = (FILE *)*MEMORY[0x1E4F143C8];
        int v64 = 2761;
        goto LABEL_79;
      }
      int v151 = *(unsigned __int8 *)(v79 + (v81 >> 3));
      *(void *)(v10 + 24) = v82;
      unint64_t v83 = v75 + 4;
      if (v75 + 4 > v78)
      {
        uint64_t v63 = (FILE *)*MEMORY[0x1E4F143C8];
        int v64 = 2762;
        goto LABEL_79;
      }
      char v150 = v75 + 3;
      int v149 = *(unsigned __int8 *)(v79 + (v82 >> 3));
      *(void *)(v10 + 24) = v83;
      unint64_t v84 = v75 + 5;
      if (v75 + 5 > v78)
      {
        uint64_t v63 = (FILE *)*MEMORY[0x1E4F143C8];
        int v64 = 2763;
        goto LABEL_79;
      }
      char v148 = v75 + 4;
      int v147 = *(unsigned __int8 *)(v79 + (v83 >> 3));
      *(void *)(v10 + 24) = v84;
      if (a2 == 33)
      {
        if (v75 + 6 > v78)
        {
          int v128 = 2767;
          goto LABEL_185;
        }
        unsigned int v85 = *(unsigned __int8 *)(v79 + (v84 >> 3));
        *(void *)(v10 + 24) = v75 + 6;
        *(unsigned char *)(v157 + 128) = (v85 >> (~(_BYTE)v84 & 7)) & 1;
        unint64_t v86 = v75 + 8;
        if (v75 + 8 > v78)
        {
          int v128 = 2770;
          goto LABEL_185;
        }
      }
      else
      {
        unint64_t v86 = v75 + 8;
        if (v75 + 8 > v78)
        {
          uint64_t v63 = (FILE *)*MEMORY[0x1E4F143C8];
          int v64 = 2772;
          goto LABEL_79;
        }
      }
      int v87 = 1 << (~(_BYTE)v75 & 7);
      *(void *)(v10 + 24) = v86;
      uint64_t v88 = v74 + (v86 >> 3);
      if ((v86 & 7) != 0) {
        ++v88;
      }
      *(void *)(v10 + 48) = v88;
      *(unsigned char *)(v10 + 32) = 0;
      unsigned int v89 = 1;
      LODWORD(v160) = 1;
      if ((v87 & v80) != 0)
      {
        if (!geo::codec::chapterReadVarUint32((void *)v10, (unsigned int *)&v160))
        {
          uint64_t v63 = (FILE *)*MEMORY[0x1E4F143C8];
          int v64 = 2779;
          goto LABEL_79;
        }
        unsigned int v89 = v160;
      }
      *(_DWORD *)(v71 + 96) = v66;
      *(_DWORD *)(v71 + 100) = v89;
      *(_OWORD *)(v71 + 80) = xmmword_18A62BFC0;
      unsigned int v145 = v89;
      if (a2 == 33)
      {
        *(void *)(v157 + 112) = v144;
        if (v144 + (unint64_t)v89 > v61)
        {
          uint64_t v63 = (FILE *)*MEMORY[0x1E4F143C8];
          int v64 = 2789;
          goto LABEL_79;
        }
        if (v89)
        {
          uint64_t v90 = 0;
          do
          {
            LODWORD(v159[0]) = 0;
            if ((geo::codec::chapterReadVarUint32((void *)v10, (unsigned int *)v159) & 1) == 0)
            {
              int v104 = (FILE *)*MEMORY[0x1E4F143C8];
              int v128 = 2792;
              goto LABEL_190;
            }
            *(float *)(v143 + 4 * v144 + 4 * v90++) = (float)SLODWORD(v159[0]) * 0.00048852;
          }
          while (v90 < v160);
          v144 += v90;
          uint64_t v29 = v158;
        }
      }
      if (((1 << (~(_BYTE)v77 & 7)) & v152) != 0)
      {
        uint64_t v91 = *(void *)(v10 + 48);
        uint64_t v92 = v91 + 8;
        if ((unint64_t)(v91 + 8) > *(void *)(v10 + 56))
        {
          uint64_t v63 = (FILE *)*MEMORY[0x1E4F143C8];
          int v64 = 2801;
          goto LABEL_79;
        }
        uint64_t v93 = *(void *)(*(void *)(v10 + 40) + v91);
        *(void *)(v10 + 48) = v92;
        *(void *)(v71 + 40) = v93;
      }
      if (((1 << (~(_BYTE)v81 & 7)) & v151) != 0)
      {
        LODWORD(v159[0]) = 0;
        if (!geo::codec::chapterReadVarUint32((void *)v10, (unsigned int *)v159))
        {
          uint64_t v63 = (FILE *)*MEMORY[0x1E4F143C8];
          int v64 = 2807;
          goto LABEL_79;
        }
      }
      if (((1 << (~v150 & 7)) & v149) != 0)
      {
        uint64_t v94 = *(void *)(v10 + 48);
        if ((unint64_t)(v94 + 4) > *(void *)(v10 + 56))
        {
          uint64_t v63 = (FILE *)*MEMORY[0x1E4F143C8];
          int v64 = 2813;
          goto LABEL_79;
        }
        int v95 = *(_DWORD *)(*(void *)(v10 + 40) + v94);
        *(void *)(v10 + 48) = v94 + 4;
        *(_DWORD *)(v71 + 68) = v95;
      }
      if (((1 << (~v148 & 7)) & v147) != 0)
      {
        uint64_t v28 = geo::codec::accumulateStyleAttributes(*a3 + 1112, &v164, (void *)v10, v71);
        if ((v28 & 1) == 0)
        {
          uint64_t v63 = (FILE *)*MEMORY[0x1E4F143C8];
          int v64 = 2821;
          goto LABEL_79;
        }
      }
      else
      {
        uint64_t v28 = (uint64_t)std::shared_ptr<FeatureStyleAttributes const>::operator=[abi:ne180100]((void *)(v71 + 24), v164, (uint64_t)v165);
      }
      v66 += v145;
      uint64_t v69 = v155 + 1;
    }
    while (v155 + 1 < (unint64_t)v166);
  }
  if (v173)
  {
    uint64_t v96 = geo::codec::Allocator::instance((geo::codec::Allocator *)v28);
    unsigned int v97 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v96 + 24))(v96, 1, 72);
    uint64_t v172 = v97;
    if (!v97)
    {
      uint64_t v63 = (FILE *)*MEMORY[0x1E4F143C8];
      int v64 = 2831;
      goto LABEL_79;
    }
    unsigned int v98 = v173;
    *((void *)v97 + 5) = *((void *)v173 + 5);
    if (a2 == 32)
    {
      uint64_t v99 = *a3;
      uint64_t v100 = *(void *)(*a3 + 1224);
      uint64_t v101 = *(void *)(*a3 + 1216);
      int v102 = *(uint64_t **)(*a3 + 1256);
      int v103 = *(uint64_t **)(*a3 + 1248);
    }
    else
    {
      uint64_t v100 = 0;
      uint64_t v101 = 0;
      int v102 = 0;
      int v103 = 0;
      uint64_t v99 = *a3;
    }
    *(void *)&long long v160 = v100;
    *((void *)&v160 + 1) = v101;
    v159[0] = v102;
    v159[1] = v103;
    uint64_t v28 = geo::codec::_createLOD(v98, v97, 0, (*(void *)(v99 + 4) & 0x3F00uLL) > 0xE00, 0, 0, &v160, v159);
    uint64_t v29 = v158;
  }
  if (v172)
  {
    uint64_t v105 = 816;
    if (a2 == 32) {
      uint64_t v105 = 800;
    }
    *(void *)(*a3 + v105) = v172;
    uint64_t v172 = 0;
  }
  unsigned int v106 = *(_DWORD *)(v10 + 64);
  if (a2 == 32 && v106 >= 0x19)
  {
    unint64_t v108 = *(void *)(v10 + 48);
    unint64_t v107 = *(void *)(v10 + 56);
    BOOL v109 = v107 >= v108;
    unint64_t v110 = v107 - v108;
    if (v109)
    {
      *(unsigned char *)(v10 + 32) = 1;
      unint64_t v111 = *(void *)(v10 + 40) + v108;
      *(void *)(v10 + 16) = v110;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 8) = v111;
    }
    uint64_t v28 = geo::codec::decodeGhostPointEncoding((uint64_t *)(v10 + 8), *(void *)(*a3 + 800), (uint64_t)(*(void *)(*a3 + 104) - *(void *)(*a3 + 96)) >> 7, *(void *)(*a3 + 96));
    if ((v28 & 1) == 0)
    {
      int v104 = (FILE *)*MEMORY[0x1E4F143C8];
      int v128 = 2898;
      goto LABEL_190;
    }
    uint64_t v112 = *(void *)(v10 + 48) + (*(void *)(v10 + 24) >> 3);
    if ((*(void *)(v10 + 24) & 7) != 0) {
      ++v112;
    }
    *(void *)(v10 + 48) = v112;
    *(unsigned char *)(v10 + 32) = 0;
    unsigned int v106 = *(_DWORD *)(v10 + 64);
    uint64_t v29 = v158;
  }
  if (a2 != 32 || v106 < 0x25) {
    goto LABEL_209;
  }
  unint64_t v113 = *(void *)(v10 + 48);
  unint64_t v114 = *(void *)(v10 + 56);
  BOOL v109 = v114 >= v113;
  unint64_t v115 = v114 - v113;
  if (v109)
  {
    unint64_t v116 = 0;
    *(unsigned char *)(v10 + 32) = 1;
    unint64_t v117 = *(void *)(v10 + 40) + v113;
    *(void *)(v10 + 16) = v115;
    *(void *)(v10 + 24) = 0;
    *(void *)(v10 + 8) = v117;
  }
  else
  {
    unint64_t v115 = *(void *)(v10 + 16);
    unint64_t v116 = *(void *)(v10 + 24);
  }
  unint64_t v118 = v116 + 1;
  unint64_t v119 = 8 * v115;
  if (v116 + 1 > 8 * v115)
  {
    int v104 = (FILE *)*MEMORY[0x1E4F143C8];
    int v128 = 2908;
    goto LABEL_190;
  }
  uint64_t v120 = *(void *)(v10 + 8);
  unsigned int v121 = *(unsigned __int8 *)(v120 + (v116 >> 3));
  *(void *)(v10 + 24) = v118;
  if (((v121 >> (~(_BYTE)v116 & 7)) & 1) != 0 && v166)
  {
    uint64_t v122 = 0;
    uint64_t v123 = *a3;
    unint64_t v124 = (unint64_t)v166 << 7;
    do
    {
      unint64_t v125 = v118 + 1;
      if (v118 + 1 > v119)
      {
        int v104 = (FILE *)*MEMORY[0x1E4F143C8];
        int v128 = 2914;
        goto LABEL_190;
      }
      unsigned int v126 = *(unsigned __int8 *)(v120 + (v118 >> 3));
      *(void *)(v10 + 24) = v125;
      char v127 = (v126 >> (~(_BYTE)v118 & 7)) & 1;
      uint64_t v28 = *(void *)(v123 + 96) + v122;
      *(unsigned char *)(v28 + 127) = v127;
      v122 += 128;
      unint64_t v118 = v125;
    }
    while (v124 != v122);
  }
  else
  {
    unint64_t v125 = v116 + 1;
  }
  if (v106 < 0x26) {
    goto LABEL_206;
  }
  if (v125 + 1 > v119)
  {
    int v104 = (FILE *)*MEMORY[0x1E4F143C8];
    int v128 = 2929;
    goto LABEL_190;
  }
  unsigned int v129 = *(unsigned __int8 *)(v120 + (v125 >> 3));
  *(void *)(v10 + 24) = v125 + 1;
  unsigned int v130 = v129 >> (~(_BYTE)v125++ & 7);
  if ((v130 & 1) == 0)
  {
LABEL_206:
    unint64_t v141 = v113 + (v125 >> 3);
    if ((v125 & 7) != 0) {
      ++v141;
    }
    *(void *)(v10 + 48) = v141;
    *(unsigned char *)(v10 + 32) = 0;
    uint64_t v29 = v158;
LABEL_209:
    *(_DWORD *)(a1 + 40) = HIDWORD(v167);
    unint64_t v142 = v173;
    *(unsigned char *)(a1 + 44) = v173 != 0;
    char v24 = 1;
    if (!v142) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  LODWORD(v160) = 0;
  uint64_t v28 = BitstreamUnpack((uint64_t *)(v10 + 8), (int *)&v160, 5uLL);
  if ((v28 & 1) == 0)
  {
    int v104 = (FILE *)*MEMORY[0x1E4F143C8];
    int v128 = 2933;
    goto LABEL_190;
  }
  unint64_t v131 = v166;
  if (!v166)
  {
LABEL_205:
    unint64_t v125 = *(void *)(v10 + 24);
    unint64_t v113 = *(void *)(v10 + 48);
    goto LABEL_206;
  }
  uint64_t v132 = 0;
  unint64_t v133 = 0;
  unint64_t v134 = (v160 + 1);
  while (1)
  {
    unint64_t v135 = *(void *)(v10 + 24);
    if (v135 + 1 > 8 * *(void *)(v10 + 16))
    {
      int v104 = (FILE *)*MEMORY[0x1E4F143C8];
      int v128 = 2938;
      goto LABEL_190;
    }
    unsigned int v136 = *(unsigned __int8 *)(*(void *)(v10 + 8) + (v135 >> 3));
    *(void *)(v10 + 24) = v135 + 1;
    if ((v136 >> (~(_BYTE)v135 & 7))) {
      break;
    }
LABEL_197:
    ++v133;
    v132 += 128;
    if (v133 >= v131) {
      goto LABEL_205;
    }
  }
  LODWORD(v159[0]) = 0;
  LODWORD(v174) = 0;
  if (!BitstreamUnpackSigned((uint64_t *)(v10 + 8), (int *)v159, v134))
  {
    int v128 = 2943;
    goto LABEL_185;
  }
  uint64_t v28 = BitstreamUnpackSigned((uint64_t *)(v10 + 8), (int *)&v174, v134);
  if (v28)
  {
    uint64_t v138 = *a3;
    unint64_t v139 = (float32x2_t *)(*(void *)(*a3 + 96) + v132);
    v139[15].i8[6] = 1;
    uint64_t v140 = *(unsigned char **)(v138 + 800);
    if (!v140)
    {
      int v128 = 2947;
      goto LABEL_185;
    }
    *(float *)v137.i32 = (float)~(-1 << *v140);
    v139[13] = vdiv_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(v174, v159[0])), (float32x2_t)vdup_lane_s32(v137, 0));
    unint64_t v131 = v166;
    goto LABEL_197;
  }
  int v128 = 2944;
LABEL_185:
  int v104 = (FILE *)*MEMORY[0x1E4F143C8];
LABEL_190:
  uint64_t v28 = fprintf(v104, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v128);
  uint64_t v29 = v158;
  char v24 = 0;
  if (v173)
  {
LABEL_23:
    uint64_t v30 = geo::codec::Allocator::instance((geo::codec::Allocator *)v28);
    unsigned int v31 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v30 + 40))(v30, *((void *)v173 + 1), 0);
    uint64_t v32 = geo::codec::Allocator::instance(v31);
    unsigned int v33 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v32 + 40))(v32, *((void *)v173 + 4), 0);
    uint64_t v34 = geo::codec::Allocator::instance(v33);
    uint64_t v28 = (*(uint64_t (**)(uint64_t, geo::codec::Allocator *, void))(*(void *)v34 + 40))(v34, v173, 0);
  }
LABEL_24:
  if (v172)
  {
    uint64_t v35 = geo::codec::Allocator::instance((geo::codec::Allocator *)v28);
    long long v36 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v35 + 40))(v35, *((void *)v172 + 1), 0);
    uint64_t v37 = geo::codec::Allocator::instance(v36);
    unint64_t v38 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v37 + 40))(v37, *((void *)v172 + 4), 0);
    uint64_t v39 = geo::codec::Allocator::instance(v38);
    uint64_t v28 = (*(uint64_t (**)(uint64_t, geo::codec::Allocator *, void))(*(void *)v39 + 40))(v39, v172, 0);
  }
  if (a1 && v29)
  {
    if (*(unsigned char *)v29)
    {
      uint64_t v40 = geo::codec::Allocator::instance((geo::codec::Allocator *)v28);
      uint64_t v28 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v40 + 40))(v40, *(void *)(v29 + 40), 0);
    }
    uint64_t v41 = geo::codec::Allocator::instance((geo::codec::Allocator *)v28);
    uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v41 + 40))(v41, v29, 0);
LABEL_32:
    if (*(unsigned char *)v10)
    {
      uint64_t v42 = geo::codec::Allocator::instance((geo::codec::Allocator *)v28);
      uint64_t v28 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v42 + 40))(v42, *(void *)(v10 + 40), 0);
    }
    uint64_t v43 = geo::codec::Allocator::instance((geo::codec::Allocator *)v28);
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)v43 + 40))(v43, v10, 0);
  }
  else if (a1)
  {
    goto LABEL_32;
  }
  unint64_t v44 = v165;
  if (v165 && !atomic_fetch_add(&v165->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
    uint64_t v48 = (uint64_t)v168;
    uint64_t v6 = v169;
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = rep;
    int v14 = (double *)&unk_18A632000;
    v25.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    uint64_t v164 = v48;
    if (v48)
    {
LABEL_38:
      *(void *)&long long v160 = &v164;
      *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v6 + 1912, &v164, (uint64_t)&std::piecewise_construct, (uint64_t **)&v160)+ 4) = (double)((v25.__d_.__rep_ - v23) / 1000) * v14[60];
    }
  }
  else
  {
    uint64_t v45 = (uint64_t)v168;
    uint64_t v6 = v169;
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = rep;
    int v14 = (double *)&unk_18A632000;
    v25.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    uint64_t v164 = v45;
    if (v45) {
      goto LABEL_38;
    }
  }
LABEL_39:
  unint64_t v46 = v170;
  if (v170 && !atomic_fetch_add(&v170->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
  }
  return v24 & 1;
}

void sub_188EFD620(_Unwind_Exception *a1)
{
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100](v1 - 200);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v1 - 168));
  _Unwind_Resume(a1);
}

uint64_t geo::codec::_readLabels(void *a1, void *a2)
{
  uint64_t v212 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a2;
  unint64_t v5 = a1[1];
  if (!v5)
  {
    uint64_t v8 = 0;
LABEL_11:
    uint64_t v11 = 0;
    unint64_t v190 = "ChapterLabels";
    uint64_t v191 = v4;
    uint64_t v12 = (std::__shared_weak_count *)a2[1];
    uint64_t v192 = v12;
    if (!v12) {
      goto LABEL_13;
    }
LABEL_12:
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_13;
  }
  uint64_t v6 = 0;
  unsigned int v7 = 0;
  while (*(_WORD *)(*a1 + 16 * v6) != 10)
  {
    uint64_t v6 = ++v7;
    if (v5 <= v7)
    {
      uint64_t v8 = 0;
      goto LABEL_8;
    }
  }
  uint64_t v8 = geo::codec::chapterAt((uint64_t)a1, v7, 10, v4 + 1912);
  unint64_t v5 = a1[1];
  uint64_t v4 = *a2;
  if (!v5) {
    goto LABEL_11;
  }
LABEL_8:
  uint64_t v9 = 0;
  unsigned int v10 = 0;
  while (*(_WORD *)(*a1 + 16 * v9) != 11)
  {
    uint64_t v9 = ++v10;
    if (v5 <= v10) {
      goto LABEL_11;
    }
  }
  uint64_t v11 = (void *)geo::codec::chapterAt((uint64_t)a1, v10, 11, v4 + 1912);
  uint64_t v25 = *a2;
  unint64_t v190 = "ChapterLabels";
  uint64_t v191 = v25;
  uint64_t v12 = (std::__shared_weak_count *)a2[1];
  uint64_t v192 = v12;
  if (v12) {
    goto LABEL_12;
  }
LABEL_13:
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = std::chrono::steady_clock::now().__d_.__rep_;
  uint64_t v14 = *a2;
  std::chrono::steady_clock::time_point v13 = (std::__shared_weak_count *)a2[1];
  unint64_t v186 = "ChapterLabelLanguages";
  uint64_t v187 = v14;
  char v188 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v15.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v189 = v15.__d_.__rep_;
  unsigned int v185 = 0;
  uint64_t v16 = 1;
  int v17 = (double *)&unk_18A632000;
  if (!v8 || !v11)
  {
LABEL_26:
    if (!a1) {
      goto LABEL_31;
    }
    goto LABEL_27;
  }
  std::vector<char,geo::StdAllocator<char,geo::codec::Allocator>>::reserve(*a2 + 856, *(void *)(v8 + 56));
  std::vector<char,geo::StdAllocator<char,geo::codec::Allocator>>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(*a2 + 856, *(char **)(*a2 + 864), *(char **)(v8 + 40), (char *)(*(void *)(v8 + 40) + *(void *)(v8 + 56)), *(void *)(v8 + 56));
  uint64_t v18 = geo::codec::chapterReadVarUint32(v11, &v185);
  if ((v18 & 1) == 0)
  {
    id v26 = (FILE *)*MEMORY[0x1E4F143C8];
    int v27 = 470;
LABEL_25:
    v15.__d_.__rep_ = fprintf(v26, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v27);
    uint64_t v16 = 0;
    goto LABEL_26;
  }
  unsigned int v19 = v185;
  *(void *)(*a2 + 896) = v185;
  if (!v19) {
    goto LABEL_68;
  }
  uint64_t v20 = geo::codec::Allocator::instance((geo::codec::Allocator *)v18);
  uint64_t v21 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v20 + 24))(v20, *(void *)(*a2 + 896), 24);
  int v22 = (unint64_t *)v21;
  uint64_t v23 = *a2;
  *(void *)(*a2 + 888) = v21;
  if (!v21)
  {
    id v26 = (FILE *)*MEMORY[0x1E4F143C8];
    int v27 = 474;
    goto LABEL_25;
  }
  if (!*(void *)(v23 + 896))
  {
    int64_t v48 = 0;
    unint64_t v46 = (__n128 *)v21;
LABEL_67:
    std::__stable_sort<std::_ClassicAlgPolicy,geo::codec::_readLabels(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_0 &,GeoCodecsLabelLanguageLocale *>(v46, v22, v48, 0, 0);
    goto LABEL_68;
  }
  unint64_t v24 = 0;
  do
  {
    LODWORD(v202) = 0;
    LODWORD(v207) = 0;
    int v17 = (double *)&unk_18A632000;
    if ((geo::codec::chapterReadVarUint32(v11, (unsigned int *)&v202) & 1) == 0)
    {
      int v27 = 478;
      goto LABEL_89;
    }
    if (!geo::codec::chapterReadVarUint32(v11, (unsigned int *)&v207))
    {
      int v27 = 479;
      goto LABEL_89;
    }
    unint64_t v50 = v11[6];
    unint64_t v49 = v11[7];
    unint64_t v51 = v50 + 1;
    if (v50 + 1 > v49)
    {
      int v27 = 480;
LABEL_89:
      id v26 = (FILE *)*MEMORY[0x1E4F143C8];
      goto LABEL_25;
    }
    uint64_t v52 = v11[5];
    if (v50 >= v49)
    {
      __s1[0] = 0;
      if (v51 < v49) {
        goto LABEL_48;
      }
    }
    else
    {
      unint64_t v53 = 0;
      while (*(unsigned char *)(v52 + v50))
      {
        if (v53 <= 0x1E) {
          __s1[v53++] = *(unsigned char *)(v52 + v50);
        }
        if (v49 == ++v50)
        {
          unint64_t v50 = v49;
          break;
        }
      }
      unint64_t v51 = v50 + 1;
      __s1[v53] = 0;
      if (v50 + 1 < v49)
      {
LABEL_48:
        v11[6] = v51;
        goto LABEL_49;
      }
    }
    v11[6] = v49;
    if (*(unsigned char *)(v49 + v52 - 1))
    {
      int v27 = 480;
      int v17 = (double *)&unk_18A632000;
      goto LABEL_89;
    }
LABEL_49:
    uint64_t v45 = *a2;
    unint64_t v46 = *(__n128 **)(*a2 + 888);
    unint64_t v47 = &v46->n128_u64[3 * v24];
    *unint64_t v47 = v202;
    v47[1] = v207;
    v47[2] = (unint64_t)strdup(__s1);
    ++v24;
    int64_t v48 = *(void *)(v45 + 896);
  }
  while (v24 < v48);
  int v22 = &v46->n128_u64[3 * v48];
  if (v48 < 129) {
    goto LABEL_67;
  }
  uint64_t v63 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
  unint64_t v64 = v48;
  while (1)
  {
    uint64_t v65 = operator new(24 * v64, v63);
    if (v65) {
      break;
    }
    BOOL v66 = v64 > 1;
    v64 >>= 1;
    if (!v66) {
      goto LABEL_67;
    }
  }
  uint64_t v74 = v65;
  std::__stable_sort<std::_ClassicAlgPolicy,geo::codec::_readLabels(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_0 &,GeoCodecsLabelLanguageLocale *>(v46, &v46->n128_u64[3 * v48], v48, (uint64_t)v65, v64);
  operator delete(v74);
LABEL_68:
  *(void *)__s1 = 0;
  uint64_t v209 = 0;
  uint64_t v210 = 0;
  uint64_t v211 = geo::codec::Allocator::instance((geo::codec::Allocator *)v18);
  uint64_t v54 = *a2;
  unint64_t v55 = a1[1];
  if (!v55)
  {
LABEL_72:
    uint64_t v58 = 0;
    uint64_t v202 = "ChapterLabelLocalizations2";
    uint64_t v203 = v54;
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v59 = (std::__shared_weak_count *)a2[1];
    char v204 = v59;
    if (!v59) {
      goto LABEL_74;
    }
    goto LABEL_73;
  }
  uint64_t v56 = 0;
  unsigned int v57 = 0;
  while (*(_WORD *)(*a1 + 16 * v56) != 13)
  {
    uint64_t v56 = ++v57;
    if (v55 <= v57) {
      goto LABEL_72;
    }
  }
  uint64_t v58 = geo::codec::chapterAt((uint64_t)a1, v57, 13, v54 + 1912);
  uint64_t v61 = *a2;
  uint64_t v202 = "ChapterLabelLocalizations2";
  uint64_t v203 = v61;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v59 = (std::__shared_weak_count *)a2[1];
  char v204 = v59;
  if (v59) {
LABEL_73:
  }
    atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_74:
  v60.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v205 = v60.__d_.__rep_;
  if (!v58)
  {
    uint64_t v16 = 1;
    goto LABEL_102;
  }
  if (*(void *)(*a2 + 904) != *(void *)(*a2 + 912))
  {
    uint64_t v16 = 1;
    goto LABEL_98;
  }
  if ((geo::codec::chapterReadVarUint32((void *)v58, (unsigned int *)(v58 + 64)) & 1) == 0)
  {
    int v62 = 526;
    goto LABEL_97;
  }
  unsigned int v201 = 0;
  if (!geo::codec::chapterReadVarUint32((void *)v58, &v201))
  {
    int v62 = 529;
    goto LABEL_97;
  }
  unsigned int v200 = 0;
  if (!geo::codec::chapterReadVarUint32((void *)v58, &v200))
  {
    int v62 = 532;
    goto LABEL_97;
  }
  if (*(void *)(v58 + 48) + (unint64_t)v201 > *(void *)(v58 + 56))
  {
    int v62 = 534;
LABEL_97:
    v60.__d_.__rep_ = fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v62);
    uint64_t v16 = 0;
    goto LABEL_98;
  }
  std::vector<char,geo::StdAllocator<char,geo::codec::Allocator>>::reserve(*a2 + 936, v201);
  unint64_t v75 = (char *)(*(void *)(v58 + 40) + *(void *)(v58 + 48));
  uint64_t v76 = (geo::codec::Allocator *)std::vector<char,geo::StdAllocator<char,geo::codec::Allocator>>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(*a2 + 936, *(char **)(*a2 + 944), v75, &v75[v201], v201);
  uint64_t v77 = geo::codec::Allocator::instance(v76);
  uint64_t v184 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v77 + 16))(v77, 4 * v200, 8);
  if (v200)
  {
    uint64_t v78 = 0;
    unsigned int v79 = 0;
    uint64_t v80 = *(void *)(v58 + 48);
    unint64_t v81 = v80 + v201;
    while (v81 > v79)
    {
      *(_DWORD *)(v184 + 4 * v78) = v79;
      size_t v82 = strnlen((const char *)(*(void *)(v58 + 40) + v80), v81 - v80);
      if (v82 + 1 < v81 - v80) {
        size_t v83 = v82 + 1;
      }
      else {
        size_t v83 = v81 - v80;
      }
      v80 += v83;
      *(void *)(v58 + 48) = v80;
      v79 += v83;
      if (++v78 >= (unint64_t)v200) {
        goto LABEL_119;
      }
    }
    int v85 = 547;
LABEL_126:
    v60.__d_.__rep_ = fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v85);
    uint64_t v16 = 0;
    uint64_t v86 = 0;
    goto LABEL_127;
  }
LABEL_119:
  unsigned int v199 = 0;
  if (!geo::codec::chapterReadVarUint32((void *)v58, &v199))
  {
    int v85 = 560;
    goto LABEL_126;
  }
  unsigned int v198 = 0;
  if (!geo::codec::chapterReadVarUint32((void *)v58, &v198))
  {
    int v85 = 563;
    goto LABEL_126;
  }
  unint64_t v84 = *(void *)(v58 + 48) + v199;
  if (v84 > *(void *)(v58 + 56))
  {
    int v85 = 565;
    goto LABEL_126;
  }
  *(void *)(v58 + 48) = v84;
  unsigned int v197 = 0;
  if (!geo::codec::chapterReadVarUint32((void *)v58, &v197))
  {
    int v85 = 569;
    goto LABEL_126;
  }
  unsigned int v196 = 0;
  if (!geo::codec::chapterReadVarUint32((void *)v58, &v196))
  {
    int v85 = 572;
    goto LABEL_126;
  }
  if (*(void *)(v58 + 48) + (unint64_t)v197 > *(void *)(v58 + 56))
  {
    int v85 = 574;
    goto LABEL_126;
  }
  std::vector<char,geo::StdAllocator<char,geo::codec::Allocator>>::reserve(*a2 + 904, v197);
  unsigned int v89 = (char *)(*(void *)(v58 + 40) + *(void *)(v58 + 48));
  uint64_t v90 = (geo::codec::Allocator *)std::vector<char,geo::StdAllocator<char,geo::codec::Allocator>>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(*a2 + 904, *(char **)(*a2 + 912), v89, &v89[v197], v197);
  uint64_t v91 = geo::codec::Allocator::instance(v90);
  uint64_t v181 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v91 + 16))(v91, 4 * v196, 8);
  uint64_t v92 = *(void *)(v58 + 48);
  if (v196)
  {
    uint64_t v93 = 0;
    unsigned int v94 = 0;
    unint64_t v182 = v92 + v197;
    while (v182 > v94)
    {
      *(_DWORD *)(v181 + 4 * v93) = v94;
      size_t v95 = strnlen((const char *)(*(void *)(v58 + 40) + v92), v182 - v92);
      if (v95 + 1 < v182 - v92) {
        size_t v96 = v95 + 1;
      }
      else {
        size_t v96 = v182 - v92;
      }
      v92 += v96;
      *(void *)(v58 + 48) = v92;
      v94 += v96;
      if (++v93 >= (unint64_t)v196) {
        goto LABEL_144;
      }
    }
    uint64_t v99 = (FILE *)*MEMORY[0x1E4F143C8];
    int v100 = 586;
LABEL_168:
    v60.__d_.__rep_ = fprintf(v99, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v100);
    uint64_t v86 = 0;
    uint64_t v16 = 0;
    if (!v181) {
      goto LABEL_127;
    }
LABEL_169:
    uint64_t v121 = geo::codec::Allocator::instance((geo::codec::Allocator *)v60.__d_.__rep_);
    v60.__d_.__rep_ = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v121 + 40))(v121, v181, 0);
    goto LABEL_127;
  }
LABEL_144:
  uint64_t v97 = v92 + 1;
  unint64_t v98 = *(void *)(v58 + 56);
  if (v92 + 1 > v98)
  {
    uint64_t v99 = (FILE *)*MEMORY[0x1E4F143C8];
    int v100 = 598;
    goto LABEL_168;
  }
  uint64_t v101 = *(void *)(v58 + 40);
  unint64_t v183 = *(unsigned __int8 *)(v101 + v92);
  *(void *)(v58 + 48) = v97;
  uint64_t v102 = v92 + 2;
  if (v92 + 2 > v98)
  {
    uint64_t v99 = (FILE *)*MEMORY[0x1E4F143C8];
    int v100 = 601;
    goto LABEL_168;
  }
  uint64_t v180 = *(unsigned __int8 *)(v101 + v97);
  *(void *)(v58 + 48) = v102;
  uint64_t v103 = v92 + 3;
  if (v92 + 3 > v98)
  {
    uint64_t v99 = (FILE *)*MEMORY[0x1E4F143C8];
    int v100 = 604;
    goto LABEL_168;
  }
  unint64_t v179 = *(unsigned __int8 *)(v101 + v102);
  *(void *)(v58 + 48) = v103;
  uint64_t v104 = v92 + 4;
  if (v92 + 4 > v98)
  {
    uint64_t v99 = (FILE *)*MEMORY[0x1E4F143C8];
    int v100 = 607;
    goto LABEL_168;
  }
  unint64_t v176 = *(unsigned __int8 *)(v101 + v103);
  *(void *)(v58 + 48) = v104;
  uint64_t v105 = v92 + 5;
  if (v92 + 5 > v98)
  {
    uint64_t v99 = (FILE *)*MEMORY[0x1E4F143C8];
    int v100 = 610;
    goto LABEL_168;
  }
  unsigned int v175 = *(unsigned __int8 *)(v101 + v104);
  *(void *)(v58 + 48) = v105;
  if (v92 + 6 > v98)
  {
    uint64_t v99 = (FILE *)*MEMORY[0x1E4F143C8];
    int v100 = 613;
    goto LABEL_168;
  }
  unint64_t v172 = *(unsigned __int8 *)(v101 + v105);
  *(void *)(v58 + 48) = v92 + 6;
  unsigned int v195 = 0;
  uint64_t v106 = geo::codec::chapterReadVarUint32((void *)v58, &v195);
  if ((v106 & 1) == 0)
  {
    uint64_t v99 = (FILE *)*MEMORY[0x1E4F143C8];
    int v100 = 616;
    goto LABEL_168;
  }
  uint64_t v107 = geo::codec::Allocator::instance((geo::codec::Allocator *)v106);
  uint64_t v86 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v107 + 16))(v107, 4 * v195, 8);
  uint64_t v173 = (void *)*a2;
  unsigned int v108 = v195;
  if (v195)
  {
    unint64_t v109 = 0;
    unsigned int v110 = 0;
    size_t __n = v173[107];
    unint64_t v111 = v173[108];
    do
    {
      if (v110 >= v111)
      {
        unint64_t v119 = (FILE *)*MEMORY[0x1E4F143C8];
        int v120 = 624;
        goto LABEL_243;
      }
      *(_DWORD *)(v86 + 4 * v109) = v110;
      size_t v112 = v111 - (__n + v110);
      size_t v113 = strnlen((const char *)(__n + v110), v112);
      if (v113 + 1 < v112) {
        int v114 = v113 + 1;
      }
      else {
        int v114 = v112;
      }
      v110 += v114;
      ++v109;
      unsigned int v108 = v195;
    }
    while (v109 < v195);
  }
  std::vector<GeoCodecsLocalizationTableEntry,geo::StdAllocator<GeoCodecsLocalizationTableEntry,geo::codec::Allocator>>::resize(v173 + 135, v108);
  unint64_t v115 = *(void *)(v58 + 48);
  unint64_t v116 = *(void *)(v58 + 56);
  BOOL v117 = v116 >= v115;
  unint64_t v118 = v116 - v115;
  if (!v117)
  {
    unint64_t v119 = (FILE *)*MEMORY[0x1E4F143C8];
    int v120 = 637;
    goto LABEL_243;
  }
  *(void *)(v58 + 8) = *(void *)(v58 + 40) + v115;
  *(unsigned char *)(v58 + 32) = 1;
  *(void *)(v58 + 16) = v118;
  *(void *)(v58 + 24) = 0;
  uint64_t v122 = *a2;
  if (*(char *)(*a2 + 1015) < 0) {
    size_t v123 = *(void *)(v122 + 1000);
  }
  else {
    size_t v123 = *(unsigned __int8 *)(*a2 + 1015);
  }
  size_t __na = v123;
  if (!v195)
  {
    unint64_t v159 = 0;
LABEL_236:
    unint64_t v160 = v115 + (v159 >> 3);
    if ((v159 & 7) != 0) {
      ++v160;
    }
    *(void *)(v58 + 48) = v160;
    *(unsigned char *)(v58 + 32) = 0;
    v60.__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)std::vector<char,geo::StdAllocator<char,geo::codec::Allocator>>::__assign_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>((unint64_t *)(v122 + 1016), *(char **)__s1, v209, (unint64_t)&v209[-*(void *)__s1]);
    uint64_t v16 = 1;
    if (!v181) {
      goto LABEL_127;
    }
    goto LABEL_169;
  }
  uint64_t v169 = 0;
  while (2)
  {
    unint64_t v124 = *(void *)(v58 + 24);
    unint64_t v125 = v124 + 1;
    unint64_t v126 = 8 * *(void *)(v58 + 16);
    if (v124 + 1 > v126)
    {
      int v120 = 644;
LABEL_242:
      unint64_t v119 = (FILE *)*MEMORY[0x1E4F143C8];
      goto LABEL_243;
    }
    unsigned int v127 = *(unsigned __int8 *)(*(void *)(v58 + 8) + (v124 >> 3));
    *(void *)(v58 + 24) = v125;
    if (((v127 >> (~(_BYTE)v124 & 7)) & 1) == 0) {
      goto LABEL_180;
    }
    unint64_t v128 = v125 + v180;
    if (v128 > v126)
    {
      int v120 = 647;
      goto LABEL_242;
    }
    *(void *)(v58 + 24) = v128;
LABEL_180:
    LODWORD(v207) = 0;
    if (BitstreamUnpack((uint64_t *)(v58 + 8), (int *)&v207, v176))
    {
      int v165 = (int)v207;
      BOOL v117 = __CFADD__(v207, 1);
      LODWORD(v207) = v207 + 1;
      if (!v117)
      {
        int v164 = 0;
        int v174 = 0;
        uint64_t v168 = 0;
        uint64_t v171 = 0;
        BOOL v135 = 0;
        while (1)
        {
          unint64_t v136 = *(void *)(v58 + 24);
          unint64_t v137 = v136 + 1;
          unint64_t v138 = 8 * *(void *)(v58 + 16);
          if (v136 + 1 > v138)
          {
            unint64_t v119 = (FILE *)*MEMORY[0x1E4F143C8];
            int v120 = 667;
            goto LABEL_243;
          }
          unsigned int v139 = *(unsigned __int8 *)(*(void *)(v58 + 8) + (v136 >> 3));
          *(void *)(v58 + 24) = v137;
          if ((v139 >> (~(_BYTE)v136 & 7)))
          {
            LODWORD(v206) = 0;
            if (!BitstreamUnpack((uint64_t *)(v58 + 8), (int *)&v206, v179))
            {
              int v120 = 670;
              goto LABEL_242;
            }
            if (v206 >= v196)
            {
              int v120 = 671;
              goto LABEL_242;
            }
            uint64_t v163 = *(unsigned int *)(v181 + 4 * v206);
            unint64_t v137 = *(void *)(v58 + 24);
            unint64_t v138 = 8 * *(void *)(v58 + 16);
          }
          else
          {
            uint64_t v163 = -1;
          }
          unint64_t v140 = v137 + 1;
          if (v137 + 1 > v138)
          {
            unint64_t v119 = (FILE *)*MEMORY[0x1E4F143C8];
            int v120 = 677;
            goto LABEL_243;
          }
          unsigned int v141 = *(unsigned __int8 *)(*(void *)(v58 + 8) + (v137 >> 3));
          *(void *)(v58 + 24) = v140;
          if ((v141 >> (~(_BYTE)v137 & 7)))
          {
            LODWORD(v206) = 0;
            if (!BitstreamUnpack((uint64_t *)(v58 + 8), (int *)&v206, v183))
            {
              int v120 = 680;
              goto LABEL_242;
            }
            if (v206 >= v200)
            {
              int v120 = 681;
              goto LABEL_242;
            }
            uint64_t v162 = *(unsigned int *)(v184 + 4 * v206);
            unint64_t v140 = *(void *)(v58 + 24);
            unint64_t v138 = 8 * *(void *)(v58 + 16);
          }
          else
          {
            uint64_t v162 = -1;
          }
          unint64_t v142 = v140 + 1;
          if (v140 + 1 > v138)
          {
            int v120 = 687;
            goto LABEL_242;
          }
          uint64_t v143 = *(void *)(v58 + 8);
          unsigned int v144 = *(unsigned __int8 *)(v143 + (v140 >> 3));
          *(void *)(v58 + 24) = v142;
          if ((v144 >> (~(_BYTE)v140 & 7)))
          {
            if (!v175)
            {
              int v120 = 689;
              goto LABEL_242;
            }
            unint64_t v145 = v140 + 2;
            if (v145 > v138)
            {
              int v120 = 690;
              goto LABEL_242;
            }
            unsigned int v146 = *(unsigned __int8 *)(v143 + (v142 >> 3));
            *(void *)(v58 + 24) = v145;
            int v161 = (v146 >> (~(_BYTE)v142 & 7)) & 1;
            if (v175 >= 2)
            {
              unint64_t v147 = v145 + v175 - 1;
              if (v147 > v138)
              {
                int v120 = 695;
                goto LABEL_242;
              }
              *(void *)(v58 + 24) = v147;
            }
          }
          else
          {
            int v161 = 0;
          }
          LODWORD(v206) = 0;
          if (!BitstreamUnpack((uint64_t *)(v58 + 8), (int *)&v206, v172))
          {
            unint64_t v119 = (FILE *)*MEMORY[0x1E4F143C8];
            int v120 = 709;
            goto LABEL_243;
          }
          int v148 = (int)v206;
          if (v206) {
            break;
          }
          BOOL __dst = 0;
LABEL_221:
          int v153 = v164;
          uint64_t v154 = v171;
          if (v164 == 0 || __dst) {
            uint64_t v154 = v163;
          }
          uint64_t v171 = v154;
          uint64_t v155 = v168;
          if (v164 == 0 || __dst) {
            uint64_t v155 = v162;
          }
          uint64_t v168 = v155;
          int v156 = v174;
          if (v164 == 0 || __dst) {
            int v156 = v161;
          }
          int v174 = v156;
          ++v164;
          if (v153 == v165) {
            goto LABEL_184;
          }
        }
        BOOL __dst = 0;
        while (1)
        {
          unsigned int v194 = 0;
          if (!BitstreamUnpack((uint64_t *)(v58 + 8), (int *)&v194, v183))
          {
            int v120 = 712;
            goto LABEL_242;
          }
          if (v194 >= v200) {
            break;
          }
          if (v135)
          {
            BOOL v135 = 1;
          }
          else
          {
            uint64_t v149 = *a2;
            char v150 = (const char *)(*(void *)(*a2 + 936) + *(unsigned int *)(v184 + 4 * v194));
            int v151 = v150;
            if (strnlen(v150, *(void *)(*a2 + 944) - (void)v150) == __na)
            {
              int v152 = (const char *)(v149 + 992);
              if (*(char *)(v149 + 1015) < 0) {
                int v152 = *(const char **)v152;
              }
              BOOL v135 = strncmp(v152, v151, __na) == 0;
              BOOL __dst = v135;
            }
            else
            {
              BOOL v135 = 0;
            }
          }
          if (!--v148) {
            goto LABEL_221;
          }
        }
        int v120 = 713;
        goto LABEL_242;
      }
      uint64_t v171 = 0;
      uint64_t v168 = 0;
      LOBYTE(v174) = 0;
LABEL_184:
      uint64_t v129 = *(unsigned int *)(v86 + 4 * v169);
      unsigned int v130 = (void *)*a2;
      uint64_t v131 = *(void *)(*a2 + 1080);
      *(void *)(v131 + 32 * v169) = v129;
      if ((v174 & 1) == 0 || v171 == -1)
      {
        *(void *)(v131 + 32 * v169 + 8) = v171;
      }
      else
      {
        __dsta = v209;
        *(void *)(v131 + 32 * v169 + 8) = &v209[-*(void *)__s1];
        uint64_t v132 = (char *)(v130[113] + v171);
        size_t v170 = strnlen(v132, v130[114] - (void)v132);
        unint64_t v133 = (char *)(v130[107] + v129);
        size_t v134 = strnlen(v133, v130[108] - (void)v133);
        std::vector<char,geo::StdAllocator<char,geo::codec::Allocator>>::__insert_with_size[abi:ne180100]<char const*,char const*>((uint64_t)__s1, __dsta, v132, &v132[v170], v170);
        LOBYTE(v206) = 10;
        std::vector<char,geo::StdAllocator<char,geo::codec::Allocator>>::push_back[abi:ne180100]((uint64_t)__s1, &v206);
        std::vector<char,geo::StdAllocator<char,geo::codec::Allocator>>::__insert_with_size[abi:ne180100]<char const*,char const*>((uint64_t)__s1, v209, v133, &v133[v134], v134);
        LOBYTE(v206) = 0;
        std::vector<char,geo::StdAllocator<char,geo::codec::Allocator>>::push_back[abi:ne180100]((uint64_t)__s1, &v206);
        unsigned int v130 = (void *)*a2;
      }
      if (v168 == -1) {
        uint64_t v157 = 0;
      }
      else {
        uint64_t v157 = v130[117] + v168;
      }
      uint64_t v158 = v130[135] + 32 * v169;
      *(void *)(v158 + 16) = v157;
      *(unsigned char *)(v158 + 24) = *(unsigned char *)(v158 + 24) & 0xFE | v174 & 1;
      if (++v169 >= (unint64_t)v195)
      {
        unint64_t v159 = *(void *)(v58 + 24);
        unint64_t v115 = *(void *)(v58 + 48);
        uint64_t v122 = *a2;
        goto LABEL_236;
      }
      continue;
    }
    break;
  }
  unint64_t v119 = (FILE *)*MEMORY[0x1E4F143C8];
  int v120 = 651;
LABEL_243:
  v60.__d_.__rep_ = fprintf(v119, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v120);
  uint64_t v16 = 0;
  if (v181) {
    goto LABEL_169;
  }
LABEL_127:
  if (v184)
  {
    uint64_t v87 = geo::codec::Allocator::instance((geo::codec::Allocator *)v60.__d_.__rep_);
    v60.__d_.__rep_ = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v87 + 40))(v87, v184, 0);
  }
  if (v86)
  {
    uint64_t v88 = geo::codec::Allocator::instance((geo::codec::Allocator *)v60.__d_.__rep_);
    v60.__d_.__rep_ = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v88 + 40))(v88, v86, 0);
  }
LABEL_98:
  if (a1)
  {
    if (*(unsigned char *)v58)
    {
      uint64_t v67 = geo::codec::Allocator::instance((geo::codec::Allocator *)v60.__d_.__rep_);
      v60.__d_.__rep_ = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v67 + 40))(v67, *(void *)(v58 + 40), 0);
    }
    uint64_t v68 = geo::codec::Allocator::instance((geo::codec::Allocator *)v60.__d_.__rep_);
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)v68 + 40))(v68, v58, 0);
  }
LABEL_102:
  uint64_t v70 = v202;
  uint64_t v69 = v203;
  v15.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v71 = v205;
  long long v206 = v70;
  if (v70)
  {
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v72 = v15.__d_.__rep_;
    unsigned int v207 = &v206;
    v15.__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v69 + 1912, (uint64_t *)&v206, (uint64_t)&std::piecewise_construct, (uint64_t **)&v207);
    *(double *)(v15.__d_.__rep_ + 32) = (double)((v72 - v71) / 1000) * 0.001;
  }
  unint64_t v73 = v204;
  if (v204 && !atomic_fetch_add(&v204->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
    std::__shared_weak_count::__release_weak(v73);
  }
  if (*(void *)__s1)
  {
    uint64_t v209 = *(char **)__s1;
    v15.__d_.__rep_ = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v211 + 40))(v211, *(void *)__s1, v210 - *(void *)__s1);
  }
  int v17 = (double *)&unk_18A632000;
  if (a1)
  {
LABEL_27:
    if (v8)
    {
      if (*(unsigned char *)v8)
      {
        uint64_t v28 = geo::codec::Allocator::instance((geo::codec::Allocator *)v15.__d_.__rep_);
        v15.__d_.__rep_ = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v28 + 40))(v28, *(void *)(v8 + 40), 0);
      }
      uint64_t v29 = geo::codec::Allocator::instance((geo::codec::Allocator *)v15.__d_.__rep_);
      v15.__d_.__rep_ = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v29 + 40))(v29, v8, 0);
    }
  }
LABEL_31:
  if (a1 && v11)
  {
    if (*(unsigned char *)v11)
    {
      uint64_t v30 = geo::codec::Allocator::instance((geo::codec::Allocator *)v15.__d_.__rep_);
      v15.__d_.__rep_ = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v30 + 40))(v30, v11[5], 0);
    }
    uint64_t v31 = geo::codec::Allocator::instance((geo::codec::Allocator *)v15.__d_.__rep_);
    (*(void (**)(uint64_t, void *, void))(*(void *)v31 + 40))(v31, v11, 0);
  }
  unsigned int v33 = v186;
  uint64_t v32 = v187;
  v34.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v35 = v189;
  double v36 = v17[60];
  uint64_t v202 = v33;
  if (v33)
  {
    *(void *)__s1 = &v202;
    *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v32 + 1912, (uint64_t *)&v202, (uint64_t)&std::piecewise_construct, (uint64_t **)__s1)+ 4) = (double)((v34.__d_.__rep_ - v35) / 1000) * v36;
  }
  uint64_t v37 = v188;
  if (v188 && !atomic_fetch_add(&v188->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
    unint64_t v44 = v190;
    uint64_t v38 = v191;
    v40.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v41 = rep;
    uint64_t v202 = v44;
    if (v44)
    {
LABEL_41:
      *(void *)__s1 = &v202;
      *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v38 + 1912, (uint64_t *)&v202, (uint64_t)&std::piecewise_construct, (uint64_t **)__s1)+ 4) = (double)((v40.__d_.__rep_ - v41) / 1000) * v36;
    }
  }
  else
  {
    uint64_t v39 = v190;
    uint64_t v38 = v191;
    v40.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v41 = rep;
    uint64_t v202 = v39;
    if (v39) {
      goto LABEL_41;
    }
  }
  uint64_t v42 = v192;
  if (v192 && !atomic_fetch_add(&v192->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
  }
  return v16;
}

void sub_188EFEBA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v35 - 192));
  std::vector<char,geo::StdAllocator<char,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)(v35 - 144));
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)&a31);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)&a35);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = *a2;
  unint64_t v8 = HIDWORD(*a2);
  unint64_t v9 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v8);
  unint64_t v10 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = v10 & (v11 - 1);
    }
    std::chrono::steady_clock::time_point v13 = *(void **)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      uint64_t v14 = (void *)*v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = v14[1];
            if (v16 == v10)
            {
              if (v14[2] == v7) {
                return v14;
              }
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            uint64_t v14 = (void *)*v14;
            if (!v14) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v10)
          {
            if (v14[2] == v7) {
              return v14;
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v4) {
              break;
            }
          }
          uint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  uint64_t v18 = operator new(0x28uLL);
  *uint64_t v18 = 0;
  v18[1] = v10;
  uint64_t v19 = **a4;
  v18[3] = 0;
  void v18[4] = 0;
  void v18[2] = v19;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (v11 && (float)(v21 * (float)v11) >= v20)
  {
    uint64_t v22 = *(void *)a1;
    uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
    if (v23)
    {
LABEL_26:
      *uint64_t v18 = *v23;
LABEL_61:
      *uint64_t v23 = v18;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v24 = 1;
    if (v11 >= 3) {
      BOOL v24 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v11);
    unint64_t v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26) {
      size_t prime = v26;
    }
    else {
      size_t prime = v25;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v11 = *(void *)(a1 + 8);
    }
    if (prime > v11) {
      goto LABEL_37;
    }
    if (prime < v11)
    {
      unint64_t v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (prime <= v28) {
        size_t prime = v28;
      }
      if (prime < v11) {
LABEL_37:
      }
        std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v31 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v4 = v10 % v11;
        uint64_t v22 = *(void *)a1;
        uint64_t v23 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v23) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v4 = v10;
        uint64_t v22 = *(void *)a1;
        uint64_t v23 = *(void **)(*(void *)a1 + 8 * v10);
        if (v23) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v4 = v31 & v10;
      uint64_t v22 = *(void *)a1;
      uint64_t v23 = *(void **)(*(void *)a1 + 8 * (v31 & v10));
      if (v23) {
        goto LABEL_26;
      }
    }
  }
  *uint64_t v18 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v18;
  *(void *)(v22 + 8 * v4) = a1 + 16;
  if (*v18)
  {
    unint64_t v32 = *(void *)(*v18 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v32 >= v11) {
        v32 %= v11;
      }
    }
    else
    {
      v32 &= v11 - 1;
    }
    uint64_t v23 = (void *)(*(void *)a1 + 8 * v32);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v18;
}

void sub_188EFEF70(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t geo::codec::chapterAt(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v4 = a2;
  if (*(void *)(a1 + 8) <= (unint64_t)a2) {
    return 0;
  }
  unint64_t v7 = *(void *)a1;
  if (*(unsigned __int16 *)(*(void *)a1 + 16 * a2) != a3) {
    return 0;
  }
  unint64_t v8 = v7 + 16 * a2;
  unsigned int v10 = *(_DWORD *)(v8 + 4);
  unint64_t v9 = (unsigned int *)(v8 + 4);
  if (*(void *)(a1 + 32) < v9[1] + (unint64_t)v10) {
    return 0;
  }
  uint64_t v14 = geo::codec::Allocator::instance((geo::codec::Allocator *)a1);
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v14 + 24))(v14, 1, 72);
  uint64_t v11 = v15;
  if (!v15) {
    return v11;
  }
  uint64_t v16 = (unsigned __int8 *)(*(void *)(a1 + 24) + *v9);
  uint64_t v17 = v9[1];
  int v18 = *v16;
  *(unsigned char *)uint64_t v15 = v18;
  int v19 = *(_DWORD *)(v7 + 16 * v4 + 12);
  if (v19 == -1) {
    int v19 = *(_DWORD *)(a1 + 20);
  }
  *(_DWORD *)(v15 + 64) = v19;
  if (v18 != 1)
  {
    if (!v18)
    {
      *(void *)(v15 + 40) = v16 + 1;
      *(void *)(v15 + 56) = v17 - 1;
    }
    goto LABEL_16;
  }
  if ((unint64_t)(v17 - 1) <= 4)
  {
LABEL_15:
    *(void *)(v11 + 40) = 0;
    *(void *)(v11 + 56) = 0;
    goto LABEL_16;
  }
  uint64_t v20 = *(unsigned int *)(v16 + 1);
  if (v20 > 0x400000)
  {
    uint64_t v15 = fprintf((FILE *)*MEMORY[0x1E4F143C8], "Cowardly refusing to uncompress to %d bytes\n", *(_DWORD *)(v16 + 1));
    goto LABEL_15;
  }
  *(void *)(v15 + 56) = v20;
  if (v20)
  {
    uint64_t v23 = geo::codec::Allocator::instance((geo::codec::Allocator *)v15);
    BOOL v24 = (Bytef *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v23 + 16))(v23, v20, 8);
    *(void *)(v11 + 40) = v24;
    uLongf destLen = *(void *)(v11 + 56);
    uint64_t v15 = uncompress(v24, &destLen, v16 + 5, v17 - 1);
    if (v15) {
      uint64_t v15 = fprintf((FILE *)*MEMORY[0x1E4F143C8], "uncompress returned %d\n", v15);
    }
  }
  else
  {
    *(void *)(v15 + 40) = 0;
  }
LABEL_16:
  if (!*(void *)(v11 + 40))
  {
    uint64_t v22 = geo::codec::Allocator::instance((geo::codec::Allocator *)v15);
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)v22 + 40))(v22, v11, 0);
    return 0;
  }
  float v21 = "ChapterGlobal";
  switch(a3)
  {
    case 1:
      break;
    case 10:
      float v21 = "ChapterLabels";
      break;
    case 11:
      float v21 = "ChapterLabelLanguages";
      break;
    case 13:
      float v21 = "ChapterLabelLocalizations2";
      break;
    case 20:
      float v21 = "ChapterVertices";
      break;
    case 30:
      float v21 = "ChapterPointFeatures";
      break;
    case 31:
      float v21 = "ChapterLineFeatures";
      break;
    case 32:
      float v21 = "ChapterPolygonFeatures";
      break;
    case 33:
      float v21 = "ChapterBuildingFeatures";
      break;
    case 34:
      float v21 = "ChapterCoastlineFeatures";
      break;
    case 38:
      float v21 = "ChapterWrappingCoastlineFeatures";
      break;
    case 39:
      float v21 = "ChapterBuildingMeshes";
      break;
    case 51:
      float v21 = "ChapterLinePointCharacteristics";
      break;
    case 52:
      float v21 = "ChapterPolygonPointCharacteristics";
      break;
    case 55:
      float v21 = "ChapterPolygonPointLabelPositions";
      break;
    case 60:
      float v21 = "ChapterConnectivity";
      break;
    case 80:
      float v21 = "ChapterGeoIDSegments";
      break;
    case 90:
      float v21 = "ChapterAddressRanges";
      break;
    case 93:
      float v21 = "ChapterTileReferences";
      break;
    case 96:
      float v21 = "ChapterHighResBuildings";
      break;
    case 100:
      float v21 = "ChapterDebugBlob";
      break;
    case 101:
      float v21 = "ChapterElevationRaster";
      break;
    case 102:
      float v21 = "ChapterStyleAttributeRaster";
      break;
    case 103:
      float v21 = "ChapterDaVinciMetadata";
      break;
    case 104:
      float v21 = "ChapterLowResBuildings";
      break;
    case 112:
      float v21 = "ChapterTransitMZROverride";
      break;
    case 119:
      float v21 = "ChapterCoverage";
      break;
    case 128:
      float v21 = "ChapterTransitSystems";
      break;
    case 129:
      float v21 = "ChapterTransitNetwork";
      break;
    case 135:
      float v21 = "ChapterRoadNetwork";
      break;
    case 136:
      float v21 = "ChapterVenueMZROverride";
      break;
    case 137:
      float v21 = "ChapterVenues";
      break;
    case 138:
      float v21 = "ChapterStorefronts";
      break;
    case 139:
      float v21 = "ChapterLowResBorderBuildings";
      break;
    case 140:
      float v21 = "ChapterBorderBuildingMeshes";
      break;
    case 141:
      float v21 = "ChapterLabelPlacementMetadata";
      break;
    case 142:
      float v21 = "ChapterDaVinciBuildings";
      break;
    case 144:
      float v21 = "ChapterPointFeaturesAddendum";
      break;
    case 145:
      float v21 = "ChapterLinesExtended";
      break;
    case 146:
      float v21 = "ChapterTrafficSkeleton1";
      break;
    case 147:
      float v21 = "ChapterDaVinciLandmarks";
      break;
    case 148:
      float v21 = "ChapterLineWidths1";
      break;
    case 149:
      float v21 = "ChapterPointLabelAnnotations";
      break;
    case 151:
      float v21 = "ChapterPOIMzrOverrides";
      break;
    case 152:
      float v21 = "ChapterTrafficSkeleton2";
      break;
    case 153:
      float v21 = "ChapterLineWidths2";
      break;
    case 154:
      float v21 = "ChapterStyleAttributeRaster2";
      break;
    case 155:
      float v21 = "ChapterMaterialRaster";
      break;
    case 156:
      float v21 = "ChapterDaVinciAssetMetadata";
      break;
    case 157:
      float v21 = "ChapterRunningTracks";
      break;
    case 158:
      float v21 = "ChapterHikingHillShadeRaster";
      break;
    case 159:
      float v21 = "ChapterLiveFeatures";
      break;
    case 160:
      float v21 = "ChapterAnnotationLabels";
      break;
    case 161:
      float v21 = "ChapterContourLinesFeet";
      break;
    case 162:
      float v21 = "ChapterSupplementalFeatureIDs";
      break;
    case 164:
      float v21 = "ChapterContourLinesMeters";
      break;
    case 165:
      float v21 = "ChapterLiveFeaturesMetadatas";
      break;
    case 166:
      float v21 = "ChapterPOIUpdates";
      break;
    case 168:
      float v21 = "ChapterRegionMetadata";
      break;
    case 169:
      float v21 = "ChapterCompressedPolygons";
      break;
    case 170:
      float v21 = "ChapterDTMRaster";
      break;
    case 171:
      float v21 = "ChapterGlobalContourLinesFeet";
      break;
    case 172:
      float v21 = "ChapterGlobalContourLinesMeters";
      break;
    default:
      float v21 = "unknown";
      break;
  }
  unint64_t v25 = 0x9DDFEA08EB382D69 * (((8 * v21) + 8) ^ ((unint64_t)v21 >> 32));
  unint64_t v26 = 0x9DDFEA08EB382D69 * (((unint64_t)v21 >> 32) ^ (v25 >> 47) ^ v25);
  unint64_t v27 = 0x9DDFEA08EB382D69 * (v26 ^ (v26 >> 47));
  unint64_t v28 = *(void *)(a4 + 8);
  if (v28)
  {
    uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v28);
    v29.i16[0] = vaddlv_u8(v29);
    if (v29.u32[0] > 1uLL)
    {
      unint64_t v7 = 0x9DDFEA08EB382D69 * (v26 ^ (v26 >> 47));
      if (v27 >= v28) {
        unint64_t v7 = v27 % v28;
      }
    }
    else
    {
      unint64_t v7 = v27 & (v28 - 1);
    }
    uint64_t v30 = *(void ***)(*(void *)a4 + 8 * v7);
    if (v30)
    {
      unint64_t v31 = *v30;
      if (*v30)
      {
        if (v29.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v33 = v31[1];
            if (v33 == v27)
            {
              if ((const char *)v31[2] == v21) {
                goto LABEL_145;
              }
            }
            else if ((v33 & (v28 - 1)) != v7)
            {
              goto LABEL_107;
            }
            unint64_t v31 = (void *)*v31;
            if (!v31) {
              goto LABEL_107;
            }
          }
        }
        do
        {
          unint64_t v32 = v31[1];
          if (v32 == v27)
          {
            if ((const char *)v31[2] == v21) {
              goto LABEL_145;
            }
          }
          else
          {
            if (v32 >= v28) {
              v32 %= v28;
            }
            if (v32 != v7) {
              break;
            }
          }
          unint64_t v31 = (void *)*v31;
        }
        while (v31);
      }
    }
  }
LABEL_107:
  unint64_t v31 = operator new(0x28uLL);
  *unint64_t v31 = 0;
  v31[1] = v27;
  v31[3] = 0;
  void v31[4] = 0;
  v31[2] = v21;
  float v34 = (float)(unint64_t)(*(void *)(a4 + 24) + 1);
  float v35 = *(float *)(a4 + 32);
  if (!v28 || (float)(v35 * (float)v28) < v34)
  {
    BOOL v36 = 1;
    if (v28 >= 3) {
      BOOL v36 = (v28 & (v28 - 1)) != 0;
    }
    unint64_t v37 = v36 | (2 * v28);
    unint64_t v38 = vcvtps_u32_f32(v34 / v35);
    if (v37 <= v38) {
      size_t prime = v38;
    }
    else {
      size_t prime = v37;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v28 = *(void *)(a4 + 8);
    }
    if (prime > v28) {
      goto LABEL_119;
    }
    if (prime < v28)
    {
      unint64_t v40 = vcvtps_u32_f32((float)*(unint64_t *)(a4 + 24) / *(float *)(a4 + 32));
      if (v28 < 3 || (uint8x8_t v41 = (uint8x8_t)vcnt_s8((int8x8_t)v28), v41.i16[0] = vaddlv_u8(v41), v41.u32[0] > 1uLL))
      {
        unint64_t v40 = std::__next_prime(v40);
      }
      else
      {
        uint64_t v42 = 1 << -(char)__clz(v40 - 1);
        if (v40 >= 2) {
          unint64_t v40 = v42;
        }
      }
      if (prime <= v40) {
        size_t prime = v40;
      }
      if (prime < v28) {
LABEL_119:
      }
        std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a4, prime);
    }
    unint64_t v28 = *(void *)(a4 + 8);
    if ((v28 & (v28 - 1)) != 0)
    {
      if (v27 >= v28) {
        unint64_t v7 = v27 % v28;
      }
      else {
        unint64_t v7 = v27;
      }
    }
    else
    {
      unint64_t v7 = (v28 - 1) & v27;
    }
  }
  uint64_t v43 = *(void *)a4;
  unint64_t v44 = *(void **)(*(void *)a4 + 8 * v7);
  if (v44)
  {
    *unint64_t v31 = *v44;
  }
  else
  {
    *unint64_t v31 = *(void *)(a4 + 16);
    *(void *)(a4 + 16) = v31;
    *(void *)(v43 + 8 * v7) = a4 + 16;
    if (!*v31) {
      goto LABEL_144;
    }
    unint64_t v45 = *(void *)(*v31 + 8);
    if ((v28 & (v28 - 1)) != 0)
    {
      if (v45 >= v28) {
        v45 %= v28;
      }
    }
    else
    {
      v45 &= v28 - 1;
    }
    unint64_t v44 = (void *)(*(void *)a4 + 8 * v45);
  }
  void *v44 = v31;
LABEL_144:
  ++*(void *)(a4 + 24);
LABEL_145:
  v31[3] = v17;
  return v11;
}

void sub_188EFF798(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *geo::MallocZoneAllocator::callocate(geo::MallocZoneAllocator *this, size_t a2, size_t a3)
{
  uint8x8_t v12 = (pthread_rwlock_t *)((char *)this + 56);
  uint64_t v6 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)((char *)this + 56));
  if (v6) {
    geo::read_write_lock::logFailure(v6, (uint64_t)"read lock", v7);
  }
  unint64_t v8 = malloc_type_zone_calloc(*((malloc_zone_t **)this + 6), a2, a3, 0x2C8B3229uLL);
  atomic_fetch_add((atomic_ullong *volatile)this + 5, 1uLL);
  unint64_t v9 = (geo::read_write_lock *)pthread_rwlock_unlock(v12);
  if (v9) {
    geo::read_write_lock::logFailure(v9, (uint64_t)"unlock", v10);
  }
  return v8;
}

void sub_188EFF848(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  geo::read_lock_guard::~read_lock_guard((pthread_rwlock_t **)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (!a2)
  {
    uint64_t v15 = *(void **)a1;
    *(void *)a1 = 0;
    if (v15) {
      operator delete(v15);
    }
    *(void *)(a1 + 8) = 0;
    return;
  }
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v4 = operator new(8 * a2);
  unint64_t v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = 0;
  *(void *)(a1 + 8) = a2;
  do
    *(void *)(*(void *)a1 + 8 * v6++) = 0;
  while (a2 != v6);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void **)(a1 + 16);
  if (v7)
  {
    unint64_t v9 = v7[1];
    unint64_t v10 = a2 - 1;
    if ((a2 & (a2 - 1)) == 0)
    {
      uint64_t v11 = v9 & v10;
      *(void *)(*(void *)a1 + 8 * v11) = v8;
      while (1)
      {
        uint8x8_t v12 = (void *)*v7;
        if (!*v7) {
          break;
        }
        uint64_t v13 = v12[1] & v10;
        if (v13 == v11)
        {
          unint64_t v7 = (void *)*v7;
        }
        else if (*(void *)(*(void *)a1 + 8 * v13))
        {
          void *v7 = *v12;
          uint64_t v14 = 8 * v13;
          *uint8x8_t v12 = **(void **)(*(void *)a1 + v14);
          **(void **)(*(void *)a1 + v14) = v12;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v13) = v7;
          unint64_t v7 = v12;
          uint64_t v11 = v13;
        }
      }
      return;
    }
    if (v9 >= a2) {
      v9 %= a2;
    }
    *(void *)(*(void *)a1 + 8 * v9) = v8;
    uint64_t v16 = (void *)*v7;
    if (*v7)
    {
      while (1)
      {
        unint64_t v18 = v16[1];
        if (v18 >= a2) {
          v18 %= a2;
        }
        if (v18 == v9) {
          goto LABEL_25;
        }
        if (*(void *)(*(void *)a1 + 8 * v18))
        {
          void *v7 = *v16;
          uint64_t v17 = 8 * v18;
          *uint64_t v16 = **(void **)(*(void *)a1 + v17);
          **(void **)(*(void *)a1 + v17) = v16;
          uint64_t v16 = v7;
LABEL_25:
          unint64_t v7 = v16;
          uint64_t v16 = (void *)*v16;
          if (!v16) {
            return;
          }
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v18) = v7;
          unint64_t v7 = v16;
          uint64_t v16 = (void *)*v16;
          unint64_t v9 = v18;
          if (!v16) {
            return;
          }
        }
      }
    }
  }
}

uint64_t std::vector<char,geo::StdAllocator<char,geo::codec::Allocator>>::reserve(uint64_t result, unint64_t a2)
{
  uint64_t v2 = *(void *)result;
  if (*(void *)(result + 16) - *(void *)result < a2)
  {
    uint64_t v4 = result;
    if ((a2 & 0x8000000000000000) != 0) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = *(void *)(result + 8);
    uint64_t v6 = v5 - v2;
    uint64_t result = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(result + 24) + 16))(*(void *)(result + 24), a2, 1);
    uint64_t v7 = result + v5 - v2;
    unint64_t v8 = result + a2;
    uint64_t v10 = *(void *)v4;
    uint64_t v9 = *(void *)(v4 + 8);
    unint64_t v11 = v9 - *(void *)v4;
    if (v9 == *(void *)v4)
    {
      *(void *)uint64_t v4 = v7;
      *(void *)(v4 + 8) = v7;
      uint64_t v13 = *(void *)(v4 + 16);
      *(void *)(v4 + 16) = v8;
      if (!v9) {
        return result;
      }
      return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v4 + 24) + 40))(*(void *)(v4 + 24), v9, v13 - v9);
    }
    if (v11 >= 0x20)
    {
      unint64_t v12 = result + v6;
      if ((unint64_t)(v2 - v5 - result + v9) >= 0x20)
      {
        unint64_t v12 = v7 - (v11 & 0xFFFFFFFFFFFFFFE0);
        uint64_t v14 = (_OWORD *)(v6 + result - 16);
        uint64_t v15 = (long long *)(v9 - 16);
        unint64_t v16 = v11 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v17 = *v15;
          *(v14 - 1) = *(v15 - 1);
          *uint64_t v14 = v17;
          v14 -= 2;
          v15 -= 2;
          v16 -= 32;
        }
        while (v16);
        v9 -= v11 & 0xFFFFFFFFFFFFFFE0;
        if (v11 == (v11 & 0xFFFFFFFFFFFFFFE0))
        {
LABEL_13:
          uint64_t v9 = *(void *)v4;
          *(void *)uint64_t v4 = v12;
          *(void *)(v4 + 8) = v7;
          uint64_t v13 = *(void *)(v4 + 16);
          *(void *)(v4 + 16) = v8;
          if (!v9) {
            return result;
          }
          return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v4 + 24) + 40))(*(void *)(v4 + 24), v9, v13 - v9);
        }
      }
    }
    else
    {
      unint64_t v12 = result + v6;
    }
    do
    {
      char v18 = *(unsigned char *)--v9;
      *(unsigned char *)--unint64_t v12 = v18;
    }
    while (v9 != v10);
    goto LABEL_13;
  }
  return result;
}

uint64_t std::vector<char,geo::StdAllocator<char,geo::codec::Allocator>>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(uint64_t result, char *__dst, char *__src, char *a4, uint64_t a5)
{
  if (a5 < 1) {
    return result;
  }
  uint64_t v6 = __src;
  uint64_t v7 = __dst;
  uint64_t v8 = result;
  unint64_t v9 = *(void *)(result + 8);
  uint64_t v10 = *(void *)(result + 16);
  if ((uint64_t)(v10 - v9) < a5)
  {
    uint64_t v11 = *(void *)result;
    uint64_t v12 = v9 - *(void *)result + a5;
    if (v12 < 0) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = &__dst[-v11];
    unint64_t v14 = v10 - v11;
    if (2 * v14 > v12) {
      uint64_t v12 = 2 * v14;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      uint64_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v15 = v12;
    }
    if (v15) {
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(result + 24) + 16))(*(void *)(result + 24), v15, 1);
    }
    else {
      uint64_t result = 0;
    }
    float v21 = &v13[result];
    uint64_t v22 = &v13[result + a5];
    uint64_t v23 = a5;
    BOOL v24 = &v13[result];
    do
    {
      if (v24) {
        *BOOL v24 = *v6;
      }
      ++v24;
      ++v6;
      --v23;
    }
    while (v23);
    unint64_t v25 = *(char **)v8;
    if (*(char **)v8 == v7) {
      goto LABEL_31;
    }
    unint64_t v26 = v7 - v25;
    if ((unint64_t)(v7 - v25) >= 0x20)
    {
      unint64_t v27 = v7;
      if ((unint64_t)(v11 - result) >= 0x20)
      {
        unint64_t v27 = &v7[-(v26 & 0xFFFFFFFFFFFFFFE0)];
        v21 -= v26 & 0xFFFFFFFFFFFFFFE0;
        unint64_t v28 = (long long *)(v7 - 16);
        uint8x8_t v29 = &v7[result - 16 - v11];
        unint64_t v30 = v26 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v31 = *v28;
          *((_OWORD *)v29 - 1) = *(v28 - 1);
          *(_OWORD *)uint8x8_t v29 = v31;
          v29 -= 32;
          v28 -= 2;
          v30 -= 32;
        }
        while (v30);
        if (v26 == (v26 & 0xFFFFFFFFFFFFFFE0)) {
          goto LABEL_31;
        }
      }
    }
    else
    {
      unint64_t v27 = v7;
    }
    do
    {
      char v32 = *--v27;
      *--float v21 = v32;
    }
    while (v27 != v25);
LABEL_31:
    uint64_t v33 = *(char **)(v8 + 8);
    unint64_t v34 = v33 - v7;
    if (v33 != v7)
    {
      if (v34 < 0x20) {
        goto LABEL_57;
      }
      if ((unint64_t)(a5 + result - v11) < 0x20) {
        goto LABEL_57;
      }
      v22 += v34 & 0xFFFFFFFFFFFFFFE0;
      float v35 = &v7[a5 - v11 + 16 + result];
      BOOL v36 = (long long *)(v7 + 16);
      unint64_t v37 = v34 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v38 = *v36;
        *((_OWORD *)v35 - 1) = *(v36 - 1);
        *(_OWORD *)float v35 = v38;
        v35 += 32;
        v36 += 2;
        v37 -= 32;
      }
      while (v37);
      v7 += v34 & 0xFFFFFFFFFFFFFFE0;
      if (v34 != (v34 & 0xFFFFFFFFFFFFFFE0))
      {
LABEL_57:
        do
        {
          char v39 = *v7++;
          *v22++ = v39;
        }
        while (v7 != v33);
      }
    }
    unint64_t v40 = *(char **)v8;
    *(void *)uint64_t v8 = v21;
    *(void *)(v8 + 8) = v22;
    uint64_t v41 = *(void *)(v8 + 16);
    *(void *)(v8 + 16) = result + v15;
    if (v40) {
      return (*(uint64_t (**)(void, char *, uint64_t))(**(void **)(v8 + 24) + 40))(*(void *)(v8 + 24), v40, v41 - (void)v40);
    }
    return result;
  }
  uint64_t v16 = v9 - (void)__dst;
  if ((uint64_t)(v9 - (void)__dst) >= a5)
  {
    long long v17 = &__src[a5];
    int v19 = *(unsigned char **)(result + 8);
LABEL_42:
    uint64_t v42 = &__dst[a5];
    uint64_t v43 = &v19[-a5];
    unint64_t v44 = v19;
    if ((unint64_t)&v19[-a5] < v9)
    {
      unint64_t v44 = v19;
      do
      {
        if (v44) {
          unsigned char *v44 = *v43;
        }
        ++v43;
        ++v44;
      }
      while ((unint64_t)v43 < v9);
    }
    *(void *)(result + 8) = v44;
    if (v19 != v42) {
      uint64_t result = (uint64_t)memmove(&__dst[a5], __dst, v19 - v42);
    }
    if (v17 != v6)
    {
      return (uint64_t)memmove(v7, v6, v17 - v6);
    }
    return result;
  }
  long long v17 = &__src[v16];
  if (&__src[v16] == a4)
  {
    int v19 = *(unsigned char **)(result + 8);
  }
  else
  {
    int64_t v18 = __src - __dst;
    int v19 = *(unsigned char **)(result + 8);
    uint64_t v20 = v19;
    do
    {
      if (v20) {
        *uint64_t v20 = v19[v18];
      }
      ++v20;
      ++v19;
    }
    while (&v19[v18] != a4);
  }
  *(void *)(result + 8) = v19;
  if (v16 >= 1) {
    goto LABEL_42;
  }
  return result;
}

unint64_t *std::vector<char,geo::StdAllocator<char,geo::codec::Allocator>>::__assign_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(unint64_t *result, char *__src, char *a3, unint64_t a4)
{
  uint64_t v6 = __src;
  uint64_t v7 = result;
  unint64_t v8 = result[2];
  unint64_t v9 = (unsigned char *)*result;
  if (v8 - *result >= a4)
  {
    uint64_t v12 = (unsigned char *)result[1];
    if (v12 - v9 >= a4)
    {
      size_t v16 = a3 - __src;
      if (a3 != __src) {
        uint64_t result = (unint64_t *)memmove((void *)*result, __src, v16);
      }
      v7[1] = &v9[v16];
    }
    else
    {
      uint64_t v13 = &__src[v12 - v9];
      if (v12 != v9)
      {
        uint64_t result = (unint64_t *)memmove((void *)*result, __src, v12 - v9);
        unint64_t v9 = (unsigned char *)v7[1];
      }
      unint64_t v14 = v9;
      if (v13 != a3)
      {
        unint64_t v14 = v9;
        uint64_t v15 = v9;
        do
        {
          if (v15) {
            *uint64_t v15 = *v13;
          }
          ++v13;
          ++v15;
          ++v14;
        }
        while (v13 != a3);
      }
      v7[1] = v14;
    }
  }
  else
  {
    if (v9)
    {
      result[1] = (unint64_t)v9;
      (*(void (**)(unint64_t, unsigned char *))(*(void *)result[3] + 40))(result[3], v9);
      unint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0) {
      goto LABEL_29;
    }
    uint64_t v10 = 2 * v8;
    if (2 * v8 <= a4) {
      uint64_t v10 = a4;
    }
    uint64_t v11 = v8 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v10;
    if (v11 < 0) {
LABEL_29:
    }
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    uint64_t result = (unint64_t *)(*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)v7[3] + 16))(v7[3], v11, 1);
    void *v7 = result;
    v7[1] = result;
    void v7[2] = (char *)result + v11;
    while (v6 != a3)
    {
      if (result) {
        *(unsigned char *)uint64_t result = *v6;
      }
      ++v6;
      uint64_t result = (unint64_t *)((char *)result + 1);
    }
    v7[1] = result;
  }
  return result;
}

uint64_t std::vector<GeoCodecsLocalizationTableEntry,geo::StdAllocator<GeoCodecsLocalizationTableEntry,geo::codec::Allocator>>::__append(uint64_t result, unint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(_OWORD **)(result + 8);
  uint64_t v5 = *(void *)(result + 16);
  if (a2 <= (v5 - (uint64_t)v4) >> 5)
  {
    if (a2)
    {
      uint64_t v10 = 32 * a2;
      uint64_t v11 = &v4[2 * a2];
      do
      {
        if (v4)
        {
          *uint64_t v4 = 0uLL;
          v4[1] = 0uLL;
        }
        v4 += 2;
        v10 -= 32;
      }
      while (v10);
      uint64_t v4 = v11;
    }
    *(void *)(result + 8) = v4;
  }
  else
  {
    uint64_t v6 = ((uint64_t)v4 - *(void *)result) >> 5;
    unint64_t v7 = v6 + a2;
    if ((v6 + a2) >> 59) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = v5 - *(void *)result;
    if (v8 >> 4 > v7) {
      unint64_t v7 = v8 >> 4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
      uint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9) {
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(result + 24) + 16))(*(void *)(result + 24), 32 * v9, 8);
    }
    else {
      uint64_t result = 0;
    }
    uint64_t v12 = (_OWORD *)(result + 32 * v6);
    uint64_t v13 = 32 * a2;
    unint64_t v14 = &v12[2 * a2];
    uint64_t v15 = v12;
    do
    {
      if (v15)
      {
        *uint64_t v15 = 0uLL;
        v15[1] = 0uLL;
      }
      v15 += 2;
      v13 -= 32;
    }
    while (v13);
    uint64_t v17 = *(void *)v3;
    uint64_t v16 = *(void *)(v3 + 8);
    if (v16 != *(void *)v3)
    {
      do
      {
        long long v18 = *(_OWORD *)(v16 - 16);
        *(v12 - 2) = *(_OWORD *)(v16 - 32);
        *(v12 - 1) = v18;
        v12 -= 2;
        v16 -= 32;
      }
      while (v16 != v17);
      uint64_t v16 = *(void *)v3;
    }
    *(void *)uint64_t v3 = v12;
    *(void *)(v3 + 8) = v14;
    uint64_t v19 = *(void *)(v3 + 16);
    *(void *)(v3 + 16) = result + 32 * v9;
    if (v16) {
      return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 24) + 40))(*(void *)(v3 + 24), v16, v19 - v16);
    }
  }
  return result;
}

void *std::vector<GeoCodecsLocalizationTableEntry,geo::StdAllocator<GeoCodecsLocalizationTableEntry,geo::codec::Allocator>>::resize(void *result, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(result[1] - *result) >> 5;
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3) {
    return (void *)std::vector<GeoCodecsLocalizationTableEntry,geo::StdAllocator<GeoCodecsLocalizationTableEntry,geo::codec::Allocator>>::__append((uint64_t)result, v4);
  }
  if (!v3) {
    result[1] = *result + 32 * a2;
  }
  return result;
}

__n128 std::__stable_sort<std::_ClassicAlgPolicy,geo::codec::_readLabels(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_0 &,GeoCodecsLabelLanguageLocale *>(__n128 *a1, unint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3 >= 2)
  {
    uint64_t v6 = a1;
    if (a3 == 2)
    {
      unint64_t v7 = (__n128 *)(a2 - 3);
      if (*(a2 - 3) < a1->n128_u64[0])
      {
        unint64_t v8 = a1[1].n128_u64[0];
        __n128 result = *a1;
        unint64_t v10 = *(a2 - 1);
        *a1 = *v7;
        a1[1].n128_u64[0] = v10;
        __n128 *v7 = result;
        *(a2 - 1) = v8;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      uint64_t v21 = a4;
      unint64_t v22 = a3 >> 1;
      uint64_t v23 = &a1->n128_u64[3 * (a3 >> 1)];
      unint64_t v24 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,geo::codec::_readLabels(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_0 &,GeoCodecsLabelLanguageLocale *>((uint64_t)a1, v23, v24, a4);
        uint64_t v25 = v21 + 24 * v22;
        std::__stable_sort_move<std::_ClassicAlgPolicy,geo::codec::_readLabels(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_0 &,GeoCodecsLabelLanguageLocale *>((uint64_t)v6 + 24 * (a3 >> 1), a2, a3 - (a3 >> 1), v25);
        unint64_t v26 = (__n128 *)(v21 + 24 * a3);
        unint64_t v27 = (__n128 *)v25;
        while (v27 != v26)
        {
          if (v27->n128_u64[0] >= *(void *)v21)
          {
            __n128 result = *(__n128 *)v21;
            v6[1].n128_u64[0] = *(void *)(v21 + 16);
            __n128 *v6 = result;
            uint64_t v6 = (__n128 *)((char *)v6 + 24);
            v21 += 24;
            if (v21 == v25) {
              goto LABEL_26;
            }
          }
          else
          {
            __n128 result = *v27;
            v6[1].n128_u64[0] = v27[1].n128_u64[0];
            __n128 *v6 = result;
            uint64_t v6 = (__n128 *)((char *)v6 + 24);
            unint64_t v27 = (__n128 *)((char *)v27 + 24);
            if (v21 == v25)
            {
LABEL_26:
              if (v27 != v26)
              {
                unint64_t v28 = 0;
                do
                {
                  uint8x8_t v29 = (__n128 *)((char *)v6 + v28);
                  __n128 result = *(__n128 *)((char *)v27 + v28);
                  v29[1].n128_u64[0] = v27[1].n128_u64[v28 / 8];
                  *uint8x8_t v29 = result;
                  v28 += 24;
                }
                while ((__n128 *)((char *)v27 + v28) != v26);
              }
              return result;
            }
          }
        }
        if (v21 != v25)
        {
          uint64_t v30 = 0;
          do
          {
            long long v31 = (__n128 *)((char *)v6 + v30);
            __n128 result = *(__n128 *)(v21 + v30);
            v31[1].n128_u64[0] = *(void *)(v21 + v30 + 16);
            *long long v31 = result;
            v30 += 24;
          }
          while (v21 + v30 != v25);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,geo::codec::_readLabels(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_0 &,GeoCodecsLabelLanguageLocale *>(a1, v23, v24, a4, a5);
        std::__stable_sort<std::_ClassicAlgPolicy,geo::codec::_readLabels(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_0 &,GeoCodecsLabelLanguageLocale *>((char *)v6 + 24 * (a3 >> 1), a2, a3 - (a3 >> 1), v21, a5);
        std::__inplace_merge<std::_ClassicAlgPolicy,geo::codec::_readLabels(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_0 &,GeoCodecsLabelLanguageLocale *>((char *)v6, (char *)v6 + 24 * (a3 >> 1), (char *)a2, a3 >> 1, a3 - (a3 >> 1), (char *)v21, a5);
      }
    }
    else if (a1 != (__n128 *)a2)
    {
      uint64_t v12 = &a1[1].n128_i8[8];
      if (&a1[1].n128_i8[8] != (__int8 *)a2)
      {
        uint64_t v13 = 0;
        unint64_t v14 = a1;
        do
        {
          uint64_t v16 = (__n128 *)v12;
          unint64_t v17 = v14[1].n128_u64[1];
          if (v17 < v14->n128_u64[0])
          {
            __n128 v32 = v14[2];
            uint64_t v18 = v13;
            do
            {
              uint64_t v19 = (char *)a1 + v18;
              *(__n128 *)(v19 + 24) = *(__n128 *)((char *)a1 + v18);
              *((void *)v19 + 5) = *(unint64_t *)((char *)a1[1].n128_u64 + v18);
              if (!v18)
              {
                uint64_t v15 = (uint64_t)a1;
                goto LABEL_10;
              }
              v18 -= 24;
            }
            while (v17 < *((void *)v19 - 3));
            uint64_t v15 = (uint64_t)&a1[1].n128_i64[1] + v18;
LABEL_10:
            *(void *)uint64_t v15 = v17;
            __n128 result = v32;
            *(__n128 *)(v15 + 8) = v32;
          }
          uint64_t v12 = &v16[1].n128_i8[8];
          v13 += 24;
          unint64_t v14 = v16;
        }
        while (&v16[1].n128_i8[8] != (__int8 *)a2);
      }
    }
  }
  return result;
}

void sub_188F0077C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188F00BEC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F00CC0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id GEOGetDecodedDefaultWithSource(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  uint64_t v9 = a4;
  if (!v7)
  {
    id v11 = 0;
    goto LABEL_21;
  }
  uint64_t v20 = 0;
  unint64_t v10 = _GEOConfigStorageCFProfile();
  id v11 = [v10 getConfigValueForKey:v7 countryCode:0 options:0 source:&v20];

  if (v9 && v11)
  {
    uint64_t v12 = v9[2](v9, v11);

    id v11 = (id)v12;
  }
  if (!v20)
  {
    uint64_t v13 = _GEOConfigProxy();
    unint64_t v14 = [v13 configStoreForOptions:983040];

    uint64_t v15 = [v14 getConfigValueForKey:v7 countryCode:0 options:983040 source:&v20];

    if (v9 && v15)
    {
      uint64_t v16 = v9[2](v9, v15);

      uint64_t v15 = (void *)v16;
    }

    id v11 = v15;
    if (v15) {
      goto LABEL_18;
    }
    goto LABEL_12;
  }
  if (!v11)
  {
LABEL_12:
    unint64_t v17 = _GEOGetConfigStorageRemote();
    id v11 = [v17 getConfigValueForKey:v7 countryCode:0 options:0 source:&v20];

    if (v9 && v11)
    {
      uint64_t v18 = v9[2](v9, v11);

      id v11 = (id)v18;
    }
    if (v8 && !v11) {
      id v11 = v8;
    }
  }
LABEL_18:
  if (a3 && v11) {
    *a3 = 0;
  }
LABEL_21:

  return v11;
}

uint64_t ___ZN3geo13DispatchTimer8scheduleEyy11qos_class_t_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  dispatch_source_set_timer(*(dispatch_source_t *)(v1 + 8), 0xFFFFFFFFFFFFFFFFLL, 0, 0);
  uint64_t v2 = *(void *)(v1 + 40);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  BOOL v3 = *(uint64_t (**)(void))(*(void *)v2 + 48);

  return v3();
}

void sub_188F024EC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void ___ZL13_cacheMissErrv_block_invoke()
{
  os_log_t v0 = (void *)MEMORY[0x1E4F28C58];
  GEOErrorReason(@"Tile Loader cache miss");
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v1 = objc_msgSend(v0, "GEOErrorWithCode:userInfo:", -8);
  uint64_t v2 = (void *)qword_1EB29F430;
  qword_1EB29F430 = v1;
}

void sub_188F027F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id _geo_NSErrorXPCSafeRepresentationCopy(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 userInfo];
  id v3 = _NSDictionarySafeEncodingCopy(v2, 1);

  unint64_t v4 = (void *)MEMORY[0x1E4F28C58];
  uint64_t v5 = [v1 domain];
  uint64_t v6 = [v1 code];

  id v7 = [v4 errorWithDomain:v5 code:v6 userInfo:v3];

  return v7;
}

id _NSDictionarySafeEncodingCopy(void *a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id v5 = v3;
  uint64_t v6 = [v5 countByEnumeratingWithState:&v22 objects:v26 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v23;
    unint64_t v9 = 0x1E4F1C000uLL;
    unsigned int v20 = a2;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v23 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v11 = *(void *)(*((void *)&v22 + 1) + 8 * v10);
        uint64_t v12 = [v5 objectForKey:v11];
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          uint64_t v13 = [v12 absoluteString];
          goto LABEL_8;
        }
        objc_opt_class();
        if (objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass()))
        {
          [v4 setObject:v12 forKey:v11];
        }
        else
        {
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            if (a2)
            {
              unint64_t v14 = _geo_NSErrorXPCSafeRepresentationCopy(v12);
              if (v14) {
                goto LABEL_9;
              }
              goto LABEL_10;
            }
            uint64_t v21 = _geo_NSErrorDictionaryRepresentationCopy(v12);
            uint64_t v15 = (void *)[objc_alloc(MEMORY[0x1E4F1CA60]) initWithDictionary:v21];
            [NSNumber numberWithBool:1];
            v17 = unint64_t v16 = v9;
            [v15 setObject:v17 forKey:@"_geo_SerializedError"];

            unint64_t v9 = v16;
            [v4 setObject:v15 forKey:v11];

            a2 = v20;
          }
          else
          {
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              uint64_t v13 = _NSDictionarySafeEncodingCopy(v12, a2);
              goto LABEL_8;
            }
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              uint64_t v13 = (uint64_t)_NSArraySafeEncodingCopy(v12, a2);
LABEL_8:
              unint64_t v14 = (void *)v13;
LABEL_9:
              [v4 setObject:v14 forKey:v11];
LABEL_10:
            }
          }
        }

        ++v10;
      }
      while (v7 != v10);
      uint64_t v18 = [v5 countByEnumeratingWithState:&v22 objects:v26 count:16];
      uint64_t v7 = v18;
    }
    while (v18);
  }

  return v4;
}

__CFString *GEOStringForError(__CFString *a1)
{
  if ((uint64_t)a1 > -301)
  {
    uint64_t v2 = (char *)&a1->length + 6;
    a1 = @"None";
    switch((unint64_t)v2)
    {
      case 0uLL:
        a1 = @"No Offline Service";
        return a1;
      case 1uLL:
        a1 = @"Unknown signed resource type";
        return a1;
      case 2uLL:
        a1 = @"Client data version does not match server";
        return a1;
      case 3uLL:
        a1 = @"Disallowed due to active assertion";
        return a1;
      case 4uLL:
        a1 = @"Device Not Unlocked Since Last Reboot";
        return a1;
      case 5uLL:
        a1 = @"Insufficient Available Filesystem Capacity";
        return a1;
      case 6uLL:
        a1 = @"Wrong Content Type";
        return a1;
      case 7uLL:
        a1 = @"Map Data Extension";
        return a1;
      case 8uLL:
        a1 = @"Closed";
        return a1;
      case 9uLL:
        a1 = @"Needs Reload";
        return a1;
      case 0xAuLL:
        a1 = @"Not Done Yet";
        return a1;
      case 0xBuLL:
        a1 = @"Timeout";
        return a1;
      case 0xCuLL:
        a1 = @"Filesystem error";
        return a1;
      case 0xDuLL:
        a1 = @"Database error";
        return a1;
      case 0xEuLL:
        a1 = @"Protobuf error";
        return a1;
      case 0xFuLL:
        a1 = @"XPC error";
        return a1;
      case 0x10uLL:
        a1 = @"Invalid Country Code";
        return a1;
      case 0x11uLL:
        a1 = @"Invalid State";
        return a1;
      case 0x12uLL:
        a1 = @"Invalid Parameter";
        return a1;
      case 0x13uLL:
        a1 = @"Invalid Response";
        return a1;
      case 0x14uLL:
        a1 = @"Invalid Request";
        return a1;
      case 0x15uLL:
        a1 = @"No Network";
        return a1;
      case 0x16uLL:
        a1 = @"No Results";
        return a1;
      case 0x17uLL:
        a1 = @"Server Error";
        return a1;
      case 0x18uLL:
        a1 = @"Not Supported";
        return a1;
      case 0x19uLL:
        a1 = @"Missing Entitlement";
        return a1;
      case 0x1AuLL:
        a1 = @"Missing URL";
        return a1;
      case 0x1BuLL:
        a1 = @"Throttled";
        return a1;
      case 0x1CuLL:
        a1 = @"Cancelled";
        return a1;
      case 0x1DuLL:
        a1 = @"Connection Lost";
        return a1;
      case 0x1EuLL:
        goto LABEL_163;
      default:
        if (@"None" == (__CFString *)-300)
        {
          a1 = @"XPC Interrupted";
        }
        else
        {
          if (@"None" != (__CFString *)-213) {
            goto LABEL_162;
          }
          a1 = @"No Active Tile Group";
        }
        break;
    }
    return a1;
  }
  if ((uint64_t)a1 <= -1503)
  {
    switch((unint64_t)a1)
    {
      case 0xFFFFFFFFFFFFF827:
        a1 = @"DB lookup returned invalid data";
        break;
      case 0xFFFFFFFFFFFFF828:
        a1 = @"DB lookup returned no data";
        break;
      case 0xFFFFFFFFFFFFF829:
        a1 = @"No/invalid radii provided";
        break;
      case 0xFFFFFFFFFFFFF82ALL:
        a1 = @"Tile zoom invalid";
        break;
      case 0xFFFFFFFFFFFFF82BLL:
        a1 = @"DB Metadata invalid";
        break;
      case 0xFFFFFFFFFFFFF82CLL:
        a1 = @"DB Metadata missing";
        break;
      case 0xFFFFFFFFFFFFF82DLL:
        a1 = @"DB Open returned nil";
        break;
      case 0xFFFFFFFFFFFFF82ELL:
        a1 = @"DB Open failed";
        break;
      case 0xFFFFFFFFFFFFF82FLL:
        a1 = @"Data/URL missing for tile";
        break;
      case 0xFFFFFFFFFFFFF830:
        a1 = @"Unable to fetch Geographic Metadata tiles";
        break;
      default:
        goto LABEL_162;
    }
    return a1;
  }
  if ((uint64_t)a1 <= -404)
  {
    if (a1 == (__CFString *)-1502)
    {
      a1 = @"No Location Authorization";
    }
    else if (a1 == (__CFString *)-1501)
    {
      a1 = @"Failed Permanently";
    }
    else
    {
      if (a1 != (__CFString *)-1500) {
        goto LABEL_162;
      }
      a1 = @"Failed Temporarily";
    }
  }
  else
  {
    if ((uint64_t)a1 <= -402)
    {
      if (a1 == (__CFString *)-403)
      {
        a1 = @"Route Not Navigable";
      }
      else
      {
        a1 = @"End Not Found";
      }
      return a1;
    }
    if (a1 != (__CFString *)-401)
    {
      if (a1 == (__CFString *)-301)
      {
        a1 = @"XPC Invalid";
        return a1;
      }
LABEL_162:
      objc_msgSend(NSString, "stringWithFormat:", @"Unknown error code encountered: %ld", a1);
      a1 = (__CFString *)objc_claimAutoreleasedReturnValue();
LABEL_163:
      return a1;
    }
    a1 = @"Start Not Found";
  }
  return a1;
}

id GEOErrorReason(void *a1)
{
  v6[1] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *MEMORY[0x1E4F1D138];
  v6[0] = a1;
  uint64_t v1 = (void *)MEMORY[0x1E4F1C9E8];
  id v2 = a1;
  id v3 = [v1 dictionaryWithObjects:v6 forKeys:&v5 count:1];

  return v3;
}

void sub_188F0342C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t maps::path_codec::ArcEvaluator<GEOPathMatcherRoadKey>::get_cost(void *a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  int v11 = (*(uint64_t (**)(void))(*(void *)*a1 + 56))(*a1);
  int v12 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a1 + 48))(*a1, a4);
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 32))(&v35);
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 32))(&v30);
  int v15 = (unsigned __int16)v35;
  double v16 = 1.0;
  if ((unsigned __int16)v35 <= 7u)
  {
    LODWORD(v14) = *(_DWORD *)(a5 + 4 * (unsigned __int16)v35 + 28);
    double v16 = (double)v14;
  }
  int v17 = HIDWORD(v35);
  if (a6)
  {
    turn_unint64_t cost = 0;
  }
  else
  {
    int v19 = v12 + 360 * ((unsigned __int16)(v11 + 180) / 0x168u) - (v11 + 180);
    if ((__int16)(v12 + 360 * ((unsigned __int16)(v11 + 180) / 0x168u) - (v11 + 180)) > 180) {
      LOWORD(v19) = v19 - 360;
    }
    if ((__int16)v19 < -179) {
      LOWORD(v19) = v19 + 360;
    }
    if ((v19 & 0x8000u) == 0) {
      LOWORD(v20) = v19;
    }
    else {
      int v20 = -(__int16)v19;
    }
    turn_unint64_t cost = maps::path_codec::CostFunction::get_turn_cost((uint64_t *)a5, v20);
    int v15 = (unsigned __int16)v35;
  }
  int v21 = (unsigned __int16)v30;
  int v22 = WORD1(v35);
  int v23 = WORD1(v30);
  int v25 = *(_DWORD *)(a5 + 60);
  int v24 = *(_DWORD *)(a5 + 64);
  if (v34 < 0) {
    operator delete(__p);
  }
  if (v31)
  {
    __n128 v32 = v31;
    operator delete(v31);
  }
  if (v39 < 0) {
    operator delete(v38);
  }
  if (v36)
  {
    unint64_t v37 = v36;
    operator delete(v36);
  }
  if (v15 == v21) {
    int v26 = 0;
  }
  else {
    int v26 = v25;
  }
  LODWORD(v13) = llround((double)v17 * a2);
  unsigned int v27 = fmax(round((double)(int)llround((double)(int)v13 / 100.0) / v16), 1.0);
  if (v22 == v23) {
    int v28 = 0;
  }
  else {
    int v28 = v24;
  }
  return (turn_cost + v26 + v28 + v27) | (unint64_t)(v13 << 32);
}

void sub_188F03694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
}

void sub_188F03D20(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F042D8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F044B4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F046AC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOPDBoundsIsDirty(uint64_t a1)
{
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  if ((*(unsigned char *)(a1 + 68) & 0x58) != 0) {
    return 1;
  }
  if ((*(unsigned char *)(a1 + 68) & 0x20) == 0) {
    return 0;
  }
  id v3 = *(os_unfair_lock_s **)(a1 + 40);
  if (!v3) {
    return 0;
  }
  os_unfair_lock_lock_with_options();
  uint64_t IsDirty = _GEOPDViewportFrameIsDirty((uint64_t)v3);
  os_unfair_lock_unlock(v3 + 12);
  return IsDirty;
}

void sub_188F04B3C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F04C04(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F04DD4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F05104(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F05FF8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F06294(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F06398(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOPDBoundsCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  [*(id *)(a1 + 32) readAll:1];
  [*(id *)(a1 + 24) readAll:1];
  uint64_t v2 = *(void *)(a1 + 40);

  -[GEOPDViewportFrame readAll:](v2, 1);
}

void sub_188F0692C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDISO3166CodeReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 52))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOPDISO3166CodeReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = [v8 position];
  *(_DWORD *)(a1 + 52) = [v8 length];
  if (a3) {
    unint64_t v9 = (int *)&GEOPDISO3166CodeReadAllFrom_recursiveTag;
  }
  else {
    unint64_t v9 = (int *)&GEOPDISO3166CodeReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOPDISO3166CodeReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    [*(id *)(a1 + 32) readAll:1];
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return Specified;
}

void sub_188F06AD0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDISO3166CodeReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 52);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 48)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unsigned int v12 = vaddv_s16((int16x4_t)(*(void *)&vshl_u16((uint16x4_t)(*(void *)&vdup_n_s16(*(unsigned __int8 *)(a1 + 64)) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFFFFFCFFFDFFFELL) & 0xFF01FF01FF01FF01));
  while (2)
  {
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    switch(a3[v9])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v16 = v12 > 1;
        char v17 = v16 & ~(_BYTE)v11 | v7;
        unsigned __int8 v18 = v16 | v11;
        char v62 = v17;
        char v63 = v18 | v17;
        char v61 = v8;
        if ((v18 | v8)) {
          int v19 = 0;
        }
        else {
          int v19 = a3;
        }
        char v64 = (v19 == 0) | v18;
        BOOL v65 = v18;
        int v20 = (int *)MEMORY[0x1E4F940E8];
        int v21 = (int *)MEMORY[0x1E4F940C8];
        int v22 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v12;
LABEL_7:
        uint64_t v13 = v7;
LABEL_8:
        uint64_t v14 = v10;
        uint64_t v15 = v11;
LABEL_10:
        ++v9;
        uint64_t v7 = v13;
        uint64_t v10 = v14;
        uint64_t v11 = v15;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v20) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v21)) {
      goto LABEL_81;
    }
    char v23 = 0;
    unsigned int v24 = 0;
    unint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = *v20;
      uint64_t v27 = *(void *)(v3 + v26);
      unint64_t v28 = v27 + 1;
      if (v27 == -1 || v28 > *(void *)(v3 + *v6)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(v3 + *v22) + v27);
      *(void *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0) {
        goto LABEL_25;
      }
      v23 += 7;
      BOOL v30 = v24++ >= 9;
      if (v30)
      {
        unint64_t v25 = 0;
        int v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v21) = 1;
LABEL_25:
    int v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(unsigned char *)(v3 + *v21)) {
      unint64_t v25 = 0;
    }
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_81:
      int v59 = 1;
      goto LABEL_82;
    }
    unint64_t v33 = v25 >> 3;
    BOOL v34 = v65;
    if ((v64 & 1) == 0)
    {
      uint64_t v35 = v19;
      do
      {
        int v37 = *v35++;
        int v36 = v37;
        BOOL v34 = v37 != 0;
        if (v37) {
          BOOL v38 = v36 == v33;
        }
        else {
          BOOL v38 = 1;
        }
      }
      while (!v38);
    }
    switch((int)v33)
    {
      case 1:
        if (!v34) {
          goto LABEL_66;
        }
        if ((*(unsigned char *)(a1 + 64) & 8) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_99;
          }
          char v39 = objc_alloc_init(GEOLatLngE7);
          if (GEOLatLngE7ReadAllFrom((uint64_t)v39, (void *)v3))
          {
            PBReaderRecallMark();
            unint64_t v40 = *(void **)(a1 + 32);
            *(void *)(a1 + 32) = v39;
            goto LABEL_57;
          }

          goto LABEL_99;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_99;
        }
        char v54 = 16 * *(unsigned char *)(a1 + 64);
        goto LABEL_78;
      case 2:
        if (!v34) {
          goto LABEL_66;
        }
        if ((*(unsigned char *)(a1 + 64) & 4) == 0)
        {
          uint64_t v44 = PBReaderReadString();
          uint64_t v45 = 24;
          goto LABEL_56;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_99;
        }
        char v54 = 32 * *(unsigned char *)(a1 + 64);
        goto LABEL_78;
      case 3:
        if (!v34) {
          goto LABEL_66;
        }
        if ((*(unsigned char *)(a1 + 64) & 0x10) == 0)
        {
          uint64_t v44 = PBReaderReadString();
          uint64_t v45 = 40;
LABEL_56:
          unint64_t v40 = *(void **)(a1 + v45);
          *(void *)(a1 + v45) = v44;
LABEL_57:

          --v9;
LABEL_79:
          int v21 = (int *)MEMORY[0x1E4F940C8];
          goto LABEL_80;
        }
        if (PBReaderSkipValueWithTag())
        {
          char v54 = 8 * *(unsigned char *)(a1 + 64);
LABEL_78:
          v9 += v54 >> 7;
          goto LABEL_79;
        }
LABEL_99:
        int v59 = 0;
        std::chrono::steady_clock::time_point v60 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__flags;
        int v21 = (int *)MEMORY[0x1E4F940C8];
LABEL_83:
        if (v62) {
LABEL_84:
        }
          *(unsigned char *)(a1 + v60[38]) |= 2u;
        if (v65 || (v59 & 1) == 0)
        {
          *(unsigned char *)(a1 + v60[38]) |= 8u;
          *(unsigned char *)(a1 + v60[38]) |= 4u;
          *(unsigned char *)(a1 + v60[38]) |= 0x10u;
        }
        else if (v19)
        {
          while (1)
          {
            int v55 = *v19++;
            char v56 = 8;
            switch(v55)
            {
              case 0:
                goto LABEL_92;
              case 1:
                goto LABEL_91;
              case 2:
                char v56 = 4;
                goto LABEL_91;
              case 3:
                char v56 = 16;
LABEL_91:
                *(unsigned char *)(a1 + v60[38]) |= v56;
                break;
              default:
                continue;
            }
          }
        }
LABEL_92:
        if (v59) {
          unint64_t v3 = *(unsigned char *)(v3 + *v21) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v65)
        {
          unsigned int v57 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      case 4:
        if ((v61 & 1) == 0) {
          goto LABEL_66;
        }
        char v46 = 0;
        unsigned int v47 = 0;
        uint64_t v48 = 0;
        *(unsigned char *)(a1 + 64) |= 1u;
        while (2)
        {
          uint64_t v49 = *v20;
          uint64_t v50 = *(void *)(v3 + v49);
          unint64_t v51 = v50 + 1;
          if (v50 == -1 || v51 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v21) = 1;
          }
          else
          {
            char v52 = *(unsigned char *)(*(void *)(v3 + *v22) + v50);
            *(void *)(v3 + v49) = v51;
            v48 |= (unint64_t)(v52 & 0x7F) << v46;
            if (v52 < 0)
            {
              v46 += 7;
              BOOL v30 = v47++ >= 9;
              if (v30)
              {
                uint64_t v48 = 0;
                goto LABEL_71;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v21)) {
          uint64_t v48 = 0;
        }
LABEL_71:
        *(unsigned char *)(a1 + 60) = v48 != 0;
        goto LABEL_80;
      default:
        if ((v62 & 1) == 0 || (*(unsigned char *)(a1 + 64) & 2) != 0)
        {
LABEL_66:
          char v53 = PBReaderSkipValueWithTag();
          int v21 = (int *)MEMORY[0x1E4F940C8];
          if ((v53 & 1) == 0)
          {
            int v59 = 0;
LABEL_82:
            std::chrono::steady_clock::time_point v60 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__flags;
            goto LABEL_83;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v41 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            uint64_t v42 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v41;
          }
          int v43 = PBUnknownFieldAdd();
          int v21 = (int *)MEMORY[0x1E4F940C8];
          if (!v43)
          {
            int v59 = 0;
            std::chrono::steady_clock::time_point v60 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__flags;
            goto LABEL_84;
          }
        }
LABEL_80:
        if (!(v63 & 1 | (v9 != 0))) {
          goto LABEL_81;
        }
        continue;
    }
  }
}

BOOL GEOLatLngE7ReadAllFrom(uint64_t a1, void *a2)
{
  unint64_t v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    id v4 = (int *)MEMORY[0x1E4F940E8];
    uint64_t v5 = (int *)MEMORY[0x1E4F940E0];
    uint64_t v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
      while (1)
      {
        if (v3[*v6]) {
          goto LABEL_37;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          if (v9++ >= 9)
          {
            unint64_t v10 = 0;
            uint64_t v16 = *v6;
            int v17 = v3[v16];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        uint64_t v16 = *v6;
        int v17 = v3[v16];
        if (v3[v16]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v17 || (v10 & 7) == 4) {
          goto LABEL_37;
        }
        if ((v10 >> 3) == 2) {
          break;
        }
        if ((v10 >> 3) == 1)
        {
          uint64_t v19 = *v4;
          unint64_t v20 = *(void *)&v3[v19];
          if (v20 <= 0xFFFFFFFFFFFFFFFBLL && (unint64_t v21 = v20 + 4, v20 + 4 <= *(void *)&v3[*v5]))
          {
            int v22 = *(_DWORD *)(*(void *)&v3[*v7] + v20);
            *(void *)&v3[v19] = v21;
          }
          else
          {
            int v22 = 0;
            v3[v16] = 1;
          }
          unint64_t v28 = &OBJC_IVAR___GEOLatLngE7__latE7;
LABEL_35:
          *(_DWORD *)(a1 + *v28) = v22;
          goto LABEL_36;
        }
        if (!*(void *)(a1 + 8))
        {
          id v26 = objc_alloc_init(MEMORY[0x1E4F940B0]);
          uint64_t v27 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = v26;
        }
        if ((PBUnknownFieldAdd() & 1) == 0) {
          goto LABEL_38;
        }
LABEL_36:
        if (*(void *)&v3[*v4] >= *(void *)&v3[*v5]) {
          goto LABEL_37;
        }
      }
      uint64_t v23 = *v4;
      unint64_t v24 = *(void *)&v3[v23];
      if (v24 <= 0xFFFFFFFFFFFFFFFBLL && (unint64_t v25 = v24 + 4, v24 + 4 <= *(void *)&v3[*v5]))
      {
        int v22 = *(_DWORD *)(*(void *)&v3[*v7] + v24);
        *(void *)&v3[v23] = v25;
      }
      else
      {
        int v22 = 0;
        v3[v16] = 1;
      }
      unint64_t v28 = &OBJC_IVAR___GEOLatLngE7__lngE7;
      goto LABEL_35;
    }
LABEL_37:
    BOOL v29 = v3[*v6] == 0;
  }
  else
  {
LABEL_38:
    BOOL v29 = 0;
  }
  objc_sync_exit(v3);

  return v29;
}

void sub_188F0751C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t geo::codec::_readPois(void *a1, uint64_t a2, uint64_t *a3)
{
  v181[4] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a3;
  unint64_t v7 = a1[1];
  if (!v7)
  {
LABEL_5:
    uint64_t v10 = 0;
    uint64_t v177 = "ChapterPointFeatures";
    uint64_t v178 = v6;
    uint64_t v11 = a3[1];
    unint64_t v179 = (std::__shared_weak_count *)v11;
    if (!v11) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v8 = 0;
  unsigned int v9 = 0;
  while (*(_WORD *)(*a1 + 16 * v8) != 30)
  {
    uint64_t v8 = ++v9;
    if (v7 <= v9) {
      goto LABEL_5;
    }
  }
  uint64_t v10 = geo::codec::chapterAt((uint64_t)a1, v9, 30, v6 + 1912);
  uint64_t v6 = *a3;
  uint64_t v177 = "ChapterPointFeatures";
  uint64_t v178 = v6;
  uint64_t v11 = a3[1];
  unint64_t v179 = (std::__shared_weak_count *)v11;
  if (v11) {
LABEL_6:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
LABEL_7:
  v12.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = v12.__d_.__rep_;
  if (!v10)
  {
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v22 = v12.__d_.__rep_;
    uint64_t v23 = 1;
    v24.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    v162[0] = (uint64_t)"ChapterPointFeatures";
    if (!"ChapterPointFeatures") {
      goto LABEL_39;
    }
    goto LABEL_38;
  }
  uint64_t v175 = 0;
  unint64_t v176 = 0;
  uint64_t v174 = 0;
  unsigned int v173 = 0;
  unsigned int v172 = 0;
  uint64_t v171 = 0;
  uint64_t v13 = *(void *)(*a3 + 856);
  uint64_t v14 = *(void *)(*a3 + 864);
  if ((geo::codec::chapterReadVarUint32((void *)v10, (unsigned int *)&v174 + 1) & 1) == 0)
  {
    uint64_t v16 = 0;
    int v25 = 806;
LABEL_27:
    id v26 = (geo::codec::Allocator *)fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v25);
    uint64_t v23 = 0;
    goto LABEL_28;
  }
  uint64_t v15 = geo::codec::chapterAt((uint64_t)a1, HIDWORD(v174), 20, *a3 + 1912);
  uint64_t v16 = v15;
  if (!v15)
  {
    int v25 = 808;
    goto LABEL_27;
  }
  int v17 = (geo::codec::Allocator *)geo::codec::decodePointVertices(v15);
  if (!v17)
  {
    int v25 = 813;
    goto LABEL_27;
  }
  if ((geo::codec::chapterReadVarUint32((void *)v10, (unsigned int *)&v174) & 1) == 0)
  {
    int v37 = (FILE *)*MEMORY[0x1E4F143C8];
    int v38 = 815;
    goto LABEL_50;
  }
  if ((geo::codec::chapterReadVarUint32((void *)v10, &v173) & 1) == 0)
  {
    int v37 = (FILE *)*MEMORY[0x1E4F143C8];
    int v38 = 816;
    goto LABEL_50;
  }
  if (v173 >= 0x10000)
  {
    int v37 = (FILE *)*MEMORY[0x1E4F143C8];
    int v38 = 818;
    goto LABEL_50;
  }
  if ((geo::codec::_makeSpaceForLabels((geo::codec::Allocator *)v173, &v171, a3) & 1) == 0)
  {
    int v37 = (FILE *)*MEMORY[0x1E4F143C8];
    int v38 = 819;
    goto LABEL_50;
  }
  if ((geo::codec::chapterReadVarUint32((void *)v10, &v172) & 1) == 0)
  {
    int v37 = (FILE *)*MEMORY[0x1E4F143C8];
    int v38 = 821;
    goto LABEL_50;
  }
  unint64_t v19 = *((void *)v17 + 2);
  BOOL v20 = v19 > v174;
  unint64_t v21 = v19 - v174;
  if (!v20)
  {
    int v37 = (FILE *)*MEMORY[0x1E4F143C8];
    int v38 = 823;
    goto LABEL_50;
  }
  if (v21 < v172)
  {
    int v37 = (FILE *)*MEMORY[0x1E4F143C8];
    int v38 = 824;
    goto LABEL_50;
  }
  if (!v172) {
    goto LABEL_205;
  }
  _ZNSt3__115allocate_sharedB8ne180100I22FeatureStyleAttributesNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v163);
  uint64_t v39 = v163;
  **(void **)long long v163 = 0x300000005;
  *(_WORD *)(v39 + 33) = 769;
  std::shared_ptr<FeatureStyleAttributes const>::operator=[abi:ne180100]<FeatureStyleAttributes,void>((uint64_t)&v175, &v163);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)&v163);
  unint64_t v40 = FeatureStyleAttributesSet::insert(*a3 + 1112, &v175);
  uint64_t v41 = v40[1];
  *(void *)&long long v163 = *v40;
  *((void *)&v163 + 1) = v41;
  if (v41) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v41 + 8), 1uLL, memory_order_relaxed);
  }
  std::shared_ptr<FeatureStyleAttributes const>::operator=[abi:ne180100]<FeatureStyleAttributes,void>((uint64_t)&v175, &v163);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)&v163);
  std::vector<GeoCodecsPointFeature,geo::StdAllocator<GeoCodecsPointFeature,geo::codec::Allocator>>::resize((uint64_t *)(*a3 + 504), v172);
  uint64_t v43 = geo::codec::Allocator::instance(v42);
  uint64_t v44 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v43 + 24))(v43, v172, 16);
  uint64_t v45 = *a3;
  *(void *)(*a3 + 664) = v44;
  if (!v44)
  {
    int v37 = (FILE *)*MEMORY[0x1E4F143C8];
    int v38 = 838;
    goto LABEL_50;
  }
  unsigned int v46 = v172;
  *(_DWORD *)(v45 + 672) = v172;
  if (v46)
  {
    unint64_t v145 = v14 - v13;
    uint64_t v47 = 0;
    uint64_t v48 = 160;
    int32x2_t v49 = vdup_n_s32(0x42CA0000u);
    uint64_t v151 = 2;
    do
    {
      uint64_t v50 = *a3;
      uint64_t v51 = a3[1];
      uint64_t v52 = *(void *)(*a3 + 504);
      if (v51) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v51 + 16), 1uLL, memory_order_relaxed);
      }
      int v152 = (uint64_t *)(v52 + v48 - 160);
      *int v152 = v50;
      char v53 = *(std::__shared_weak_count **)(v52 + v48 - 152);
      *(void *)(v52 + v48 - 152) = v51;
      if (v53) {
        std::__shared_weak_count::__release_weak(v53);
      }
      uint64_t v54 = v47 + v174;
      int v55 = (int32x2_t *)(v52 + v48);
      *(void *)(v52 + v48 - 72) = *(void *)(*((void *)v17 + 1) + 8 * v54);
      uint64_t v56 = *((void *)v17 + 3);
      if (v56)
      {
        float v57 = *(float *)(v56 + 4 * v54);
        if (v57 != 3.4028e38)
        {
          uint64_t v58 = v52 + v48;
          *(unsigned char *)(v58 + 52) = 1;
          *(float *)(v58 - 64) = v57;
        }
      }
      v55[-10] = 0;
      v55[6].i8[3] = 0;
      v55->i32[0] = 1120534528;
      v55[1] = v49;
      if ((geo::codec::hp_readLabel((uint64_t)v152, (void *)v10, &v171, v145, a3) & 1) == 0)
      {
        int v37 = (FILE *)*MEMORY[0x1E4F143C8];
        int v38 = 860;
        goto LABEL_50;
      }
      uint64_t v60 = *(void *)(v10 + 48);
      unint64_t v59 = *(void *)(v10 + 56);
      if (v60 + 1 <= v59)
      {
        unint64_t v62 = 0;
        *(unsigned char *)(v10 + 32) = 1;
        *(void *)(v10 + 8) = *(void *)(v10 + 40) + v60;
        *(_OWORD *)(v10 + 16) = xmmword_18A628440;
        uint64_t v61 = 1;
      }
      else
      {
        uint64_t v61 = *(void *)(v10 + 16);
        unint64_t v62 = *(void *)(v10 + 24);
      }
      unint64_t v63 = v62 + 1;
      unint64_t v64 = 8 * v61;
      if (v62 + 1 > 8 * v61)
      {
        int v37 = (FILE *)*MEMORY[0x1E4F143C8];
        int v38 = 873;
        goto LABEL_50;
      }
      uint64_t v65 = *(void *)(v10 + 8);
      int v66 = *(unsigned __int8 *)(v65 + (v62 >> 3));
      *(void *)(v10 + 24) = v63;
      unint64_t v67 = v62 + 2;
      if (v62 + 2 > v64)
      {
        int v37 = (FILE *)*MEMORY[0x1E4F143C8];
        int v38 = 874;
        goto LABEL_50;
      }
      uint64_t v149 = v47;
      int v68 = *(unsigned __int8 *)(v65 + (v63 >> 3));
      *(void *)(v10 + 24) = v67;
      unint64_t v69 = v62 + 3;
      if (v62 + 3 > v64)
      {
        int v37 = (FILE *)*MEMORY[0x1E4F143C8];
        int v38 = 875;
        goto LABEL_50;
      }
      uint64_t v155 = v52;
      uint64_t v158 = v48;
      int v70 = *(unsigned __int8 *)(v65 + (v67 >> 3));
      *(void *)(v10 + 24) = v69;
      unint64_t v71 = v62 + 4;
      if (v62 + 4 > v64)
      {
        int v37 = (FILE *)*MEMORY[0x1E4F143C8];
        int v38 = 876;
        goto LABEL_50;
      }
      int v72 = *(unsigned __int8 *)(v65 + (v69 >> 3));
      *(void *)(v10 + 24) = v71;
      unint64_t v73 = v62 + 5;
      if (v62 + 5 > v64)
      {
        int v37 = (FILE *)*MEMORY[0x1E4F143C8];
        int v38 = 877;
        goto LABEL_50;
      }
      int v74 = *(unsigned __int8 *)(v65 + (v71 >> 3));
      *(void *)(v10 + 24) = v73;
      if (v62 + 6 > v64)
      {
        int v37 = (FILE *)*MEMORY[0x1E4F143C8];
        int v38 = 878;
        goto LABEL_50;
      }
      int v147 = *(unsigned __int8 *)(v65 + (v73 >> 3));
      *(void *)(v10 + 24) = v62 + 6;
      unint64_t v75 = v62 + 8;
      if (v62 + 8 > v64)
      {
        int v37 = (FILE *)*MEMORY[0x1E4F143C8];
        int v38 = 879;
        goto LABEL_50;
      }
      *(void *)(v10 + 24) = v75;
      uint64_t v76 = v60 + (v75 >> 3);
      if ((v62 & 7) != 0) {
        ++v76;
      }
      *(void *)(v10 + 48) = v76;
      *(unsigned char *)(v10 + 32) = 0;
      if (((1 << (~(_BYTE)v62 & 7)) & v66) != 0)
      {
        uint64_t v77 = v76 + 8;
        if (v76 + 8 > v59)
        {
          int v37 = (FILE *)*MEMORY[0x1E4F143C8];
          int v38 = 885;
          goto LABEL_50;
        }
        uint64_t v78 = *(void *)(*(void *)(v10 + 40) + v76);
        *(void *)(v10 + 48) = v77;
        *(void *)(v155 + v158 - 120) = v78;
        uint64_t v76 = v77;
      }
      if (((1 << (~(_BYTE)v63 & 7)) & v68) != 0)
      {
        uint64_t v79 = v76 + 8;
        if (v76 + 8 > v59)
        {
          int v37 = (FILE *)*MEMORY[0x1E4F143C8];
          int v38 = 891;
          goto LABEL_50;
        }
        uint64_t v80 = *(void *)(*(void *)(v10 + 40) + v76);
        *(void *)(v10 + 48) = v79;
        uint64_t v81 = v155 + v158;
        *(unsigned char *)(v81 - 85) = 1;
        *(void *)(v81 - 112) = v80;
        uint64_t v76 = v79;
      }
      if (((1 << (~(_BYTE)v67 & 7)) & v70) != 0)
      {
        if (v76 + 4 > v59)
        {
          int v37 = (FILE *)*MEMORY[0x1E4F143C8];
          int v38 = 898;
          goto LABEL_50;
        }
        int v82 = *(_DWORD *)(*(void *)(v10 + 40) + v76);
        *(void *)(v10 + 48) = v76 + 4;
        size_t v83 = (_DWORD *)(v155 + v158);
        *(v83 - 23) = v82;
        *size_t v83 = v82;
      }
      if (((1 << (~(_BYTE)v69 & 7)) & v72) != 0)
      {
        LODWORD(v163) = 0;
        if (!geo::codec::chapterReadVarUint32((void *)v10, (unsigned int *)&v163))
        {
          int v37 = (FILE *)*MEMORY[0x1E4F143C8];
          int v38 = 905;
          goto LABEL_50;
        }
      }
      if (((1 << (~(_BYTE)v71 & 7)) & v74) != 0)
      {
        LODWORD(v163) = 0;
        if ((geo::codec::chapterReadVarUint32((void *)v10, (unsigned int *)&v163) & 1) == 0)
        {
          int v37 = (FILE *)*MEMORY[0x1E4F143C8];
          int v38 = 911;
          goto LABEL_50;
        }
        char v84 = __clz(__rbit32(v163));
        if ((_BYTE)v163) {
          char v85 = v84 + 1;
        }
        else {
          char v85 = 0;
        }
        *(unsigned char *)(*(void *)(*a3 + 664) + v151) = v85;
        uint64_t v86 = v155 + v158;
        *(unsigned char *)(v86 + 45) = 1;
        *(_DWORD *)(v86 + 24) = v149;
      }
      if (((1 << (~(_BYTE)v73 & 7)) & v147) != 0)
      {
        uint64_t v87 = v158;
        if ((geo::codec::accumulateStyleAttributes(*a3 + 1112, &v175, (void *)v10, (uint64_t)v152) & 1) == 0)
        {
          int v37 = (FILE *)*MEMORY[0x1E4F143C8];
          int v38 = 921;
          goto LABEL_50;
        }
      }
      else
      {
        uint64_t v87 = v158;
        std::shared_ptr<FeatureStyleAttributes const>::operator=[abi:ne180100]((void *)(v155 + v158 - 136), v175, (uint64_t)v176);
      }
      uint64_t v47 = v149 + 1;
      uint64_t v48 = v87 + 224;
      v151 += 16;
    }
    while (v149 + 1 < (unint64_t)v172);
  }
  unsigned int v88 = *(_DWORD *)(v10 + 64);
  if (v88 < 8) {
    goto LABEL_205;
  }
  unint64_t v90 = *(void *)(v10 + 48);
  unint64_t v89 = *(void *)(v10 + 56);
  unint64_t v91 = v89 - v90;
  if (v89 >= v90)
  {
    unint64_t v92 = 0;
    *(unsigned char *)(v10 + 32) = 1;
    unint64_t v93 = *(void *)(v10 + 40) + v90;
    *(void *)(v10 + 16) = v91;
    *(void *)(v10 + 24) = 0;
    *(void *)(v10 + 8) = v93;
  }
  else
  {
    unint64_t v91 = *(void *)(v10 + 16);
    unint64_t v92 = *(void *)(v10 + 24);
  }
  unint64_t v94 = v92 + 1;
  if (v92 + 1 > 8 * v91)
  {
    int v37 = (FILE *)*MEMORY[0x1E4F143C8];
    int v38 = 933;
    goto LABEL_50;
  }
  unint64_t v159 = (uint64_t *)(v10 + 8);
  unsigned int v95 = *(unsigned __int8 *)(*(void *)(v10 + 8) + (v92 >> 3));
  *(void *)(v10 + 24) = v94;
  if (((v95 >> (~(_BYTE)v92 & 7)) & 1) == 0)
  {
LABEL_139:
    unint64_t v102 = v90 + (v94 >> 3);
    if ((v94 & 7) != 0) {
      ++v102;
    }
    *(void *)(v10 + 48) = v102;
    *(unsigned char *)(v10 + 32) = 0;
    if (v88 >= 0x29)
    {
      unint64_t v103 = *(void *)(v10 + 56);
      unint64_t v104 = v103 - v102;
      if (v103 >= v102)
      {
        unint64_t v94 = 0;
        *(unsigned char *)(v10 + 32) = 1;
        unint64_t v105 = *(void *)(v10 + 40) + v102;
        *(void *)(v10 + 16) = v104;
        *(void *)(v10 + 24) = 0;
        *(void *)(v10 + 8) = v105;
      }
      else
      {
        unint64_t v104 = *(void *)(v10 + 16);
      }
      unint64_t v106 = v94 + 1;
      if (v94 + 1 > 8 * v104)
      {
        int v37 = (FILE *)*MEMORY[0x1E4F143C8];
        int v38 = 988;
        goto LABEL_50;
      }
      unsigned int v107 = *(unsigned __int8 *)(*(void *)(v10 + 8) + (v94 >> 3));
      *(void *)(v10 + 24) = v106;
      if ((v107 >> (~(_BYTE)v94 & 7)))
      {
        LODWORD(v163) = 0;
        if (!BitstreamUnpack(v159, (int *)&v163, 5uLL))
        {
          int v37 = (FILE *)*MEMORY[0x1E4F143C8];
          int v38 = 992;
          goto LABEL_50;
        }
        unint64_t v108 = v172;
        if (v172)
        {
          uint64_t v109 = 0;
          unint64_t v110 = 0;
          unint64_t v111 = (v163 + 1);
          do
          {
            unint64_t v113 = *(void *)(v10 + 24);
            if (v113 + 1 > 8 * *(void *)(v10 + 16))
            {
              int v37 = (FILE *)*MEMORY[0x1E4F143C8];
              int v38 = 997;
              goto LABEL_50;
            }
            unsigned int v114 = *(unsigned __int8 *)(*(void *)(v10 + 8) + (v113 >> 3));
            *(void *)(v10 + 24) = v113 + 1;
            if ((v114 >> (~(_BYTE)v113 & 7)))
            {
              LODWORD(v162[0]) = 0;
              unsigned int v160 = 0;
              if (!BitstreamUnpackSigned(v159, (int *)v162, v111))
              {
                int v38 = 1002;
                goto LABEL_179;
              }
              if (!BitstreamUnpackSigned(v159, (int *)&v160, v111))
              {
                int v38 = 1003;
                goto LABEL_179;
              }
              uint64_t v112 = *(void *)(*a3 + 504) + v109;
              *(unsigned char *)(v112 + 210) = 1;
              *(float *)v115.i32 = (float)~(-1 << *(unsigned char *)v17);
              *(float32x2_t *)(v112 + 108) = vdiv_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(v160, v162[0])), (float32x2_t)vdup_lane_s32(v115, 0));
              unint64_t v108 = v172;
            }
            ++v110;
            v109 += 224;
          }
          while (v110 < v108);
        }
        unint64_t v106 = *(void *)(v10 + 24);
        unint64_t v102 = *(void *)(v10 + 48);
        unsigned int v88 = *(_DWORD *)(v10 + 64);
      }
      unint64_t v116 = v102 + (v106 >> 3);
      if ((v106 & 7) != 0) {
        ++v116;
      }
      *(void *)(v10 + 48) = v116;
      *(unsigned char *)(v10 + 32) = 0;
      if (v88 >= 0x39)
      {
        unint64_t v117 = *(void *)(v10 + 56);
        BOOL v118 = v117 >= v116;
        unint64_t v119 = v117 - v116;
        if (v118)
        {
          *(unsigned char *)(v10 + 32) = 1;
          unint64_t v120 = *(void *)(v10 + 40) + v116;
          *(void *)(v10 + 16) = v119;
          *(void *)(v10 + 24) = 0;
          *(void *)(v10 + 8) = v120;
        }
        v181[0] = &unk_1ED517EF0;
        v181[1] = a3;
        v181[3] = v181;
        geo::codec::decodeZoomRanks(v159, v172, (uint64_t)v181);
        std::function<void ()(unsigned long,float)>::~function(v181);
        uint64_t v121 = *(void *)(v10 + 48) + (*(void *)(v10 + 24) >> 3);
        if ((*(void *)(v10 + 24) & 7) != 0) {
          ++v121;
        }
        *(void *)(v10 + 48) = v121;
        *(unsigned char *)(v10 + 32) = 0;
        if (*(_DWORD *)(v10 + 64) > 0x3Fu)
        {
          uint64_t v122 = v121 + 1;
          unint64_t v123 = *(void *)(v10 + 56);
          if (v121 + 1 > v123)
          {
            int v37 = (FILE *)*MEMORY[0x1E4F143C8];
            int v38 = 1048;
            goto LABEL_50;
          }
          uint64_t v124 = *(void *)(v10 + 40);
          int v125 = *(unsigned __int8 *)(v124 + v121);
          *(void *)(v10 + 48) = v122;
          if (v125 == 1)
          {
            uint64_t v126 = v121 + 5;
            if (v121 + 5 > v123)
            {
              int v37 = (FILE *)*MEMORY[0x1E4F143C8];
              int v38 = 1051;
              goto LABEL_50;
            }
            int v127 = *(_DWORD *)(v124 + v122);
            *(void *)(v10 + 48) = v126;
            uint64_t v128 = v121 + 6;
            if (v121 + 6 > v123)
            {
              int v38 = 1054;
LABEL_179:
              int v37 = (FILE *)*MEMORY[0x1E4F143C8];
              goto LABEL_50;
            }
            unint64_t v129 = *(unsigned __int8 *)(v124 + v126);
            *(void *)(v10 + 48) = v128;
            if (!v129)
            {
              int v38 = 1055;
              goto LABEL_179;
            }
            uint64_t v130 = v121 + 7;
            if (v121 + 7 > v123)
            {
              int v38 = 1058;
              goto LABEL_179;
            }
            unsigned int v131 = *(unsigned __int8 *)(v124 + v128);
            *(void *)(v10 + 48) = v130;
            unsigned int v157 = v131;
            if (!v131)
            {
              int v38 = 1059;
              goto LABEL_179;
            }
            unint64_t v132 = v121 + 8;
            if (v132 > v123)
            {
              int v38 = 1063;
              goto LABEL_179;
            }
            unint64_t v133 = *(unsigned __int8 *)(v124 + v130);
            *(void *)(v10 + 48) = v132;
            unint64_t v154 = v133;
            if (!v133)
            {
              int v38 = 1064;
              goto LABEL_179;
            }
            LODWORD(v163) = 0;
            if ((geo::codec::chapterReadVarUint32((void *)v10, (unsigned int *)&v163) & 1) == 0)
            {
              int v37 = (FILE *)*MEMORY[0x1E4F143C8];
              int v38 = 1067;
              goto LABEL_50;
            }
            unint64_t v134 = *(void *)(v10 + 48);
            unint64_t v135 = *(void *)(v10 + 56);
            BOOL v118 = v135 >= v134;
            unint64_t v136 = v135 - v134;
            if (v118)
            {
              *(unsigned char *)(v10 + 32) = 1;
              unint64_t v137 = *(void *)(v10 + 40) + v134;
              *(void *)(v10 + 16) = v136;
              *(void *)(v10 + 24) = 0;
              *(void *)(v10 + 8) = v137;
            }
            LODWORD(v162[0]) = 0;
            unsigned int v160 = 0;
            if (v163)
            {
              int v138 = 0;
              unsigned int v139 = 0;
              float v140 = (float)v127;
              while (1)
              {
                if (!BitstreamUnpack(v159, (int *)v162, v154))
                {
                  int v38 = 1075;
                  goto LABEL_179;
                }
                v139 += LODWORD(v162[0]);
                if (v139 >= v172)
                {
                  int v38 = 1077;
                  goto LABEL_179;
                }
                uint64_t v141 = *(void *)(*a3 + 504);
                if (!BitstreamUnpack(v159, (int *)&v160, v129)) {
                  break;
                }
                uint64_t v142 = v141 + 224 * v139;
                *(float *)(v142 + 96) = v140 + (float)((float)v160 * (float)(1.0 / (float)v157));
                *(unsigned char *)(v142 + 212) = 1;
                if (++v138 >= v163)
                {
                  unint64_t v134 = *(void *)(v10 + 48);
                  goto LABEL_202;
                }
              }
              int v38 = 1080;
              goto LABEL_179;
            }
LABEL_202:
            unint64_t v143 = *(void *)(v10 + 24);
            unint64_t v144 = v134 + (v143 >> 3);
            if ((v143 & 7) != 0) {
              ++v144;
            }
            *(void *)(v10 + 48) = v144;
            *(unsigned char *)(v10 + 32) = 0;
          }
        }
      }
    }
LABEL_205:
    uint64_t v23 = 1;
    goto LABEL_51;
  }
  int v170 = 0;
  if ((BitstreamUnpackVar32(v159, &v170) & 1) == 0)
  {
    int v37 = (FILE *)*MEMORY[0x1E4F143C8];
    int v38 = 936;
    goto LABEL_50;
  }
  int v169 = 0;
  if (BitstreamUnpack(v159, &v169, 5uLL))
  {
    int v96 = v169;
    int v168 = 0;
    if (BitstreamUnpack(v159, &v168, 6uLL))
    {
      int v156 = v170;
      if (v170)
      {
        unint64_t v150 = (v168 + 1);
        while (1)
        {
          unsigned int v167 = 0;
          if (!BitstreamUnpack(v159, (int *)&v167, (v96 + 1)))
          {
            int v38 = 945;
            goto LABEL_179;
          }
          unsigned int v153 = v167;
          if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(*a3 + 512) - *(void *)(*a3 + 504)) >> 5) <= (unint64_t)v167)
          {
            int v38 = 946;
            goto LABEL_179;
          }
          unint64_t v166 = 0;
          if (!BitstreamUnpack64(v159, &v166, v150)) {
            break;
          }
          long long v163 = 0u;
          long long v164 = 0u;
          int v165 = 1065353216;
          uint64_t v97 = *(void *)(a2 + 64);
          if (v97)
          {
            (*(void (**)(uint64_t *__return_ptr))(*(void *)v97 + 48))(v162);
            std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__move_assign((uint64_t)&v163, v162);
            std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::~__hash_table((uint64_t)v162);
            if (*((void *)&v164 + 1))
            {
              long long v98 = v163;
              unint64_t v146 = v166;
              unint64_t v148 = (unint64_t)std::unordered_set<unsigned long long>::find[abi:ne180100](v163, *((unint64_t *)&v163 + 1), v166);
              if (v148 | (unint64_t)std::unordered_set<unsigned long long>::find[abi:ne180100](v98, *((unint64_t *)&v98 + 1), HIDWORD(v146)))
              {
                uint64_t v99 = *(void *)(*a3 + 504) + 224 * v153;
                *(void *)(v99 + 80) = v146;
                unsigned int v160 = 65553;
                uint64_t v161 = 1;
                uint64_t v101 = *(void *)(v99 + 24);
                uint64_t v100 = v99 + 24;
                if (v101)
                {
                  std::make_shared[abi:ne180100]<FeatureStyleAttributes,std::shared_ptr<FeatureStyleAttributes const> &,GeoCodecsFeatureStylePairExt *,int,void>(v162, v100, &v160, 1u);
                  std::vector<std::shared_ptr<FeatureStyleAttributes const>,geo::StdAllocator<std::shared_ptr<FeatureStyleAttributes const>,geo::codec::Allocator>>::emplace_back<std::shared_ptr<FeatureStyleAttributes> &>(*a3 + 1168, v162);
                  std::shared_ptr<FeatureStyleAttributes const>::operator=[abi:ne180100]((void *)(*(void *)(*a3 + 504) + 224 * v153 + 24), v162[0], v162[1]);
                  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)v162);
                }
              }
            }
          }
          std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::~__hash_table((uint64_t)&v163);
          if (!--v156) {
            goto LABEL_138;
          }
        }
        int v37 = (FILE *)*MEMORY[0x1E4F143C8];
        int v38 = 949;
        goto LABEL_50;
      }
LABEL_138:
      unint64_t v94 = *(void *)(v10 + 24);
      unint64_t v90 = *(void *)(v10 + 48);
      unsigned int v88 = *(_DWORD *)(v10 + 64);
      goto LABEL_139;
    }
    int v37 = (FILE *)*MEMORY[0x1E4F143C8];
    int v38 = 941;
  }
  else
  {
    int v37 = (FILE *)*MEMORY[0x1E4F143C8];
    int v38 = 938;
  }
LABEL_50:
  fprintf(v37, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v38);
  uint64_t v23 = 0;
LABEL_51:
  id v26 = geo::codec::VertexPoolDealloc(v17, v18);
LABEL_28:
  if (a1)
  {
    if (*(unsigned char *)v10)
    {
      uint64_t v27 = geo::codec::Allocator::instance(v26);
      id v26 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v27 + 40))(v27, *(void *)(v10 + 40), 0);
    }
    uint64_t v28 = geo::codec::Allocator::instance(v26);
    BOOL v29 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v28 + 40))(v28, v10, 0);
    if (v16)
    {
      if (*(unsigned char *)v16)
      {
        uint64_t v30 = geo::codec::Allocator::instance(v29);
        BOOL v29 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v30 + 40))(v30, *(void *)(v16 + 40), 0);
      }
      uint64_t v31 = geo::codec::Allocator::instance(v29);
      (*(void (**)(uint64_t, uint64_t, void))(*(void *)v31 + 40))(v31, v16, 0);
    }
  }
  __n128 v32 = v176;
  if (v176 && !atomic_fetch_add(&v176->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v22 = rep;
    uint64_t v36 = (uint64_t)v177;
    uint64_t v6 = v178;
    v24.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    v162[0] = v36;
    if (!v36) {
      goto LABEL_39;
    }
    goto LABEL_38;
  }
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v22 = rep;
  uint64_t v33 = (uint64_t)v177;
  uint64_t v6 = v178;
  v24.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v162[0] = v33;
  if (v33)
  {
LABEL_38:
    *(void *)&long long v163 = v162;
    *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v6 + 1912, v162, (uint64_t)&std::piecewise_construct, (uint64_t **)&v163)+ 4) = (double)((v24.__d_.__rep_ - v22) / 1000) * 0.001;
  }
LABEL_39:
  BOOL v34 = v179;
  if (v179 && !atomic_fetch_add(&v179->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
  return v23;
}

void sub_188F08AA4(_Unwind_Exception *a1)
{
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100](v1 - 200);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v1 - 184));
  _Unwind_Resume(a1);
}

uint64_t geo::codec::hp_readLabel(uint64_t a1, void *a2, uint64_t *a3, unint64_t a4, uint64_t *a5)
{
  uint64_t v10 = *a3;
  unsigned int v24 = 0;
  if ((geo::codec::chapterReadVarUint32(a2, &v24) & 1) == 0)
  {
    unint64_t v19 = (FILE *)*MEMORY[0x1E4F143C8];
    int v20 = 1133;
LABEL_19:
    fprintf(v19, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v20);
    return 0;
  }
  unsigned int v11 = v24;
  *(unsigned char *)(a1 + 73) = v24;
  *(_DWORD *)(a1 + 56) = *a3;
  if (!v11)
  {
LABEL_12:
    uint64_t v18 = 0;
    goto LABEL_13;
  }
  unsigned int v12 = 0;
  do
  {
    unsigned int v22 = 0;
    unsigned int v23 = 0;
    if (!geo::codec::chapterReadVarUint32(a2, &v23))
    {
      int v20 = 1139;
LABEL_18:
      unint64_t v19 = (FILE *)*MEMORY[0x1E4F143C8];
      goto LABEL_19;
    }
    if (!geo::codec::chapterReadVarUint32(a2, &v22))
    {
      int v20 = 1140;
      goto LABEL_18;
    }
    uint64_t v13 = v23;
    if (v23 >= a4)
    {
      int v20 = 1141;
      goto LABEL_18;
    }
    uint64_t v14 = *a5;
    if ((unint64_t)*a3 >= *(void *)(*a5 + 1056))
    {
      int v20 = 1142;
      goto LABEL_18;
    }
    *(void *)(*(void *)(v14 + 1048) + 24 * *a3) = *(void *)(v14 + 856) + v23;
    uint64_t v15 = geo::codec::langLocaleForOffset(v13, *(const void **)(v14 + 888), *(void *)(v14 + 896));
    uint64_t v16 = *(void *)(*a5 + 1048);
    uint64_t v17 = *a3;
    *(void *)(v16 + 24 * *a3 + 8) = v15;
    *a3 = v17 + 1;
    ++v12;
  }
  while (v12 < v24);
  if (!*(unsigned char *)(a1 + 73)) {
    goto LABEL_12;
  }
  uint64_t v18 = *(void *)(v16 + 24 * v10);
LABEL_13:
  *(void *)(a1 + 16) = v18;
  return 1;
}

uint64_t std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100](uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t std::shared_ptr<FeatureStyleAttributes const>::operator=[abi:ne180100]<FeatureStyleAttributes,void>(uint64_t result, long long *a2)
{
  uint64_t v2 = result;
  long long v3 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  id v4 = *(std::__shared_weak_count **)(result + 8);
  *(_OWORD *)__n128 result = v3;
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      return v2;
    }
  }
  return result;
}

BOOL BitstreamUnpack64(uint64_t *a1, unint64_t *a2, unint64_t a3)
{
  unint64_t v3 = a1[2];
  unint64_t v4 = v3 + a3;
  unint64_t v5 = 8 * a1[1];
  if (v3 + a3 <= v5)
  {
    unint64_t v6 = 0;
    if (a3)
    {
      uint64_t v7 = *a1;
      do
      {
        unint64_t v8 = 8 - (v3 & 7);
        if (a3 < v8) {
          unint64_t v8 = a3;
        }
        unint64_t v6 = (*(unsigned __int8 *)(v7 + (v3 >> 3)) >> (8 - (v3 & 7) - v8)) & (unint64_t)~(-1 << v8) | (v6 << v8);
        v3 += v8;
        a1[2] = v3;
        a3 -= v8;
      }
      while (a3);
    }
    *a2 = v6;
  }
  return v4 <= v5;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t geo::codec::decodeZoomRanks(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = a1[2];
  unint64_t v4 = v3 + 1;
  unint64_t v5 = 8 * a1[1];
  if (v3 + 1 <= v5)
  {
    uint64_t v9 = *a1;
    unsigned int v10 = *(unsigned __int8 *)(*a1 + (v3 >> 3));
    a1[2] = v4;
    if (((v10 >> (~(_BYTE)v3 & 7)) & 1) == 0)
    {
      if (a2)
      {
        for (uint64_t i = 0; i != a2; ++i)
        {
          uint64_t v44 = i;
          float v43 = 100.0;
          uint64_t v19 = *(void *)(a3 + 24);
          if (!v19) {
LABEL_55:
          }
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, uint64_t *, float *))(*(void *)v19 + 48))(v19, &v44, &v43);
        }
      }
      return 1;
    }
    if (v3 + 6 > v5) {
      return 0;
    }
    int v11 = 0;
    unint64_t v12 = 5;
    do
    {
      unint64_t v13 = 8 - (v4 & 7);
      if (v12 < v13) {
        unint64_t v13 = v12;
      }
      int v11 = (*(unsigned __int8 *)(v9 + (v4 >> 3)) >> (8 - (v4 & 7) - v13)) & ~(-1 << v13) | (v11 << v13);
      v4 += v13;
      a1[2] = v4;
      v12 -= v13;
    }
    while (v12);
    unint64_t v14 = (v11 + 1);
    if (v4 + v14 > v5) {
      return 0;
    }
    if (v11 != -1)
    {
      unsigned int v15 = 0;
      do
      {
        unint64_t v16 = 8 - (v4 & 7);
        if (v14 < v16) {
          unint64_t v16 = v14;
        }
        unsigned int v15 = (*(unsigned __int8 *)(v9 + (v4 >> 3)) >> (8 - (v4 & 7) - v16)) & ~(-1 << v16) | (v15 << v16);
        v4 += v16;
        a1[2] = v4;
        v14 -= v16;
      }
      while (v14);
      float v17 = (float)v15;
      if (v4 + 5 > v5) {
        return 0;
      }
      goto LABEL_22;
    }
    float v17 = 0.0;
    if (v4 + 5 <= v5)
    {
LABEL_22:
      int v21 = 0;
      unint64_t v22 = 5;
      do
      {
        unint64_t v23 = 8 - (v4 & 7);
        if (v22 < v23) {
          unint64_t v23 = v22;
        }
        int v21 = (*(unsigned __int8 *)(v9 + (v4 >> 3)) >> (8 - (v4 & 7) - v23)) & ~(-1 << v23) | (v21 << v23);
        v4 += v23;
        a1[2] = v4;
        v22 -= v23;
      }
      while (v22);
      unint64_t v24 = (v21 + 1);
      if (v4 + v24 > v5) {
        return 0;
      }
      if (v21 == -1)
      {
        float v27 = 0.0;
      }
      else
      {
        unsigned int v25 = 0;
        do
        {
          unint64_t v26 = 8 - (v4 & 7);
          if (v24 < v26) {
            unint64_t v26 = v24;
          }
          unsigned int v25 = (*(unsigned __int8 *)(v9 + (v4 >> 3)) >> (8 - (v4 & 7) - v26)) & ~(-1 << v26) | (v25 << v26);
          v4 += v26;
          a1[2] = v4;
          v24 -= v26;
        }
        while (v24);
        float v27 = (float)v25;
      }
      if (v4 + 5 > v5) {
        return 0;
      }
      int v28 = 0;
      unint64_t v29 = 5;
      do
      {
        unint64_t v30 = 8 - (v4 & 7);
        if (v29 < v30) {
          unint64_t v30 = v29;
        }
        int v28 = (*(unsigned __int8 *)(v9 + (v4 >> 3)) >> (8 - (v4 & 7) - v30)) & ~(-1 << v30) | (v28 << v30);
        v4 += v30;
        a1[2] = v4;
        v29 -= v30;
      }
      while (v29);
      if (a2)
      {
        uint64_t v31 = 0;
        unint64_t v32 = (v28 + 1);
        float v33 = 1.0 / v17;
        while (1)
        {
          unint64_t v34 = a1[2];
          unint64_t v35 = v34 + 1;
          unint64_t v36 = 8 * a1[1];
          if (v34 + 1 > v36) {
            return 0;
          }
          uint64_t v37 = *a1;
          unsigned int v38 = *(unsigned __int8 *)(*a1 + (v34 >> 3));
          a1[2] = v35;
          if ((v38 >> (~(_BYTE)v34 & 7)))
          {
            if (v35 + v32 > v36) {
              return 0;
            }
            unsigned int v39 = 0;
            if (v32)
            {
              unint64_t v40 = v32;
              do
              {
                unint64_t v41 = 8 - (v35 & 7);
                if (v40 < v41) {
                  unint64_t v41 = v40;
                }
                unsigned int v39 = (*(unsigned __int8 *)(v37 + (v35 >> 3)) >> (8 - (v35 & 7) - v41)) & ~(-1 << v41) | (v39 << v41);
                v35 += v41;
                a1[2] = v35;
                v40 -= v41;
              }
              while (v40);
            }
            uint64_t v44 = v31;
            float v43 = (float)(v27 + (float)v39) * v33;
          }
          else
          {
            uint64_t v44 = v31;
            float v43 = 100.0;
          }
          uint64_t v42 = *(void *)(a3 + 24);
          if (!v42) {
            goto LABEL_55;
          }
          (*(void (**)(uint64_t, uint64_t *, float *))(*(void *)v42 + 48))(v42, &v44, &v43);
          ++v31;
          uint64_t result = 1;
          if (v31 == a2) {
            return result;
          }
        }
      }
      return 1;
    }
  }
  return 0;
}

float std::__function::__func<geo::codec::_readPois(VMP4Tile *,GeoCodecsVMP4DecodingOptions const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_readPois(VMP4Tile *,GeoCodecsVMP4DecodingOptions const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(unsigned long,float)>::operator()(uint64_t a1, void *a2, float *a3)
{
  float result = *a3;
  *(float *)(*(void *)(**(void **)(a1 + 8) + 504) + 224 * *a2 + 164) = *a3;
  return result;
}

float std::__function::__func<geo::codec::_readLinesExtendedChapter(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_1,std::allocator<geo::codec::_readLinesExtendedChapter(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_1>,void ()(unsigned long,float)>::operator()(uint64_t a1, void *a2, float *a3)
{
  float result = *a3;
  *(float *)(*(void *)(**(void **)(a1 + 8) + 152) + 176 * *a2 + 164) = *a3;
  return result;
}

float std::__function::__func<geo::codec::_readLinesExtendedChapter(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_readLinesExtendedChapter(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(unsigned long,float)>::operator()(uint64_t a1, void *a2, float *a3)
{
  float result = *a3;
  *(float *)(*(void *)(**(void **)(a1 + 8) + 152) + 176 * *a2 + 68) = *a3;
  return result;
}

uint64_t geo::codec::_makeSpaceForLabels(geo::codec::Allocator *a1, void *a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = *(void *)(*a3 + 1056);
  if (!a1) {
    goto LABEL_5;
  }
  *(void *)(v4 + 1056) = (char *)a1 + v5;
  uint64_t v8 = *(void *)(v4 + 1048);
  uint64_t v9 = geo::codec::Allocator::instance(a1);
  uint64_t v10 = *a3;
  if (!v8)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v9 + 24))(v9, *(void *)(v10 + 1056), 24);
    *(void *)(*a3 + 1048) = result;
    if (result) {
      goto LABEL_5;
    }
LABEL_7:
    *a2 = 0;
    return result;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v9 + 32))(v9, *(void *)(v10 + 1048), 24 * *(void *)(v10 + 1056));
  if (v11)
  {
    *(void *)(*a3 + 1048) = v11;
    bzero((void *)(v11 + 24 * v5), 24 * (void)a1);
    uint64_t result = *(void *)(*a3 + 1048);
    if (result)
    {
LABEL_5:
      uint64_t result = 1;
      *a2 = v5;
      return result;
    }
    goto LABEL_7;
  }
  uint64_t v13 = geo::codec::Allocator::instance(0);
  (*(void (**)(uint64_t, void, void))(*(void *)v13 + 40))(v13, *(void *)(*a3 + 1048), 0);
  uint64_t result = 0;
  *(void *)(*a3 + 1048) = 0;
  *a2 = 0;
  return result;
}

void *std::function<void ()(unsigned long,float)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void *std::unordered_set<unsigned long long>::find[abi:ne180100](uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (!a2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a3;
    if (a3 >= a2) {
      unint64_t v4 = a3 % a2;
    }
  }
  else
  {
    unint64_t v4 = (a2 - 1) & a3;
  }
  uint64_t v5 = *(void **)(a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  uint64_t result = (void *)*v5;
  if (*v5)
  {
    if (v3.u32[0] < 2uLL)
    {
      while (1)
      {
        uint64_t v8 = result[1];
        if (v8 == a3)
        {
          if (result[2] == a3) {
            return result;
          }
        }
        else if ((v8 & (a2 - 1)) != v4)
        {
          return 0;
        }
        uint64_t result = (void *)*result;
        if (!result) {
          return result;
        }
      }
    }
    do
    {
      unint64_t v7 = result[1];
      if (v7 == a3)
      {
        if (result[2] == a3) {
          return result;
        }
      }
      else
      {
        if (v7 >= a2) {
          v7 %= a2;
        }
        if (v7 != v4) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void std::vector<GeoCodecsPointFeature,geo::StdAllocator<GeoCodecsPointFeature,geo::codec::Allocator>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (_OWORD *)a1[1];
  unint64_t v6 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v5 - *a1) >> 5);
  unint64_t v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 >= v6) {
      return;
    }
    uint64_t v18 = (_OWORD *)(v4 + 224 * a2);
    if (v5 == v18)
    {
LABEL_27:
      a1[1] = (uint64_t)v18;
      return;
    }
    while (1)
    {
      uint64_t v19 = (std::__shared_weak_count *)*((void *)v5 - 24);
      if (v19)
      {
        if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          break;
        }
      }
      int v20 = (std::__shared_weak_count *)*((void *)v5 - 27);
      if (v20) {
        goto LABEL_20;
      }
LABEL_16:
      v5 -= 14;
      if (v5 == v18) {
        goto LABEL_27;
      }
    }
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    int v20 = (std::__shared_weak_count *)*((void *)v5 - 27);
    if (!v20) {
      goto LABEL_16;
    }
LABEL_20:
    std::__shared_weak_count::__release_weak(v20);
    goto LABEL_16;
  }
  uint64_t v8 = a1[2];
  if (0x6DB6DB6DB6DB6DB7 * ((v8 - (uint64_t)v5) >> 5) >= v7)
  {
    uint64_t v18 = &v5[14 * v7];
    uint64_t v21 = 224 * a2 - 32 * (((uint64_t)v5 - *a1) >> 5);
    do
    {
      if (v5)
      {
        v5[12] = 0uLL;
        v5[13] = 0uLL;
        v5[10] = 0uLL;
        v5[11] = 0uLL;
        v5[8] = 0uLL;
        unsigned char v5[9] = 0uLL;
        v5[6] = 0uLL;
        v5[7] = 0uLL;
        v5[4] = 0uLL;
        v5[5] = 0uLL;
        v5[2] = 0uLL;
        v5[3] = 0uLL;
        _OWORD *v5 = 0uLL;
        v5[1] = 0uLL;
      }
      v5 += 14;
      v21 -= 224;
    }
    while (v21);
    goto LABEL_27;
  }
  if (a2 > 0x124924924924924) {
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v9 = 0x6DB6DB6DB6DB6DB7 * ((v8 - v4) >> 5);
  uint64_t v10 = 2 * v9;
  if (2 * v9 <= a2) {
    uint64_t v10 = a2;
  }
  if (v9 >= 0x92492492492492) {
    uint64_t v11 = 0x124924924924924;
  }
  else {
    uint64_t v11 = v10;
  }
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 16))(a1[3], 224 * v11, 8);
  uint64_t v13 = (_OWORD *)(v12 + 224 * v6);
  unint64_t v14 = v12 + 224 * a2;
  uint64_t v15 = 224 * a2 - 224 * v6;
  __n128 v16 = 0uLL;
  float v17 = v13;
  do
  {
    if (v17)
    {
      v17[12] = 0uLL;
      v17[13] = 0uLL;
      v17[10] = 0uLL;
      v17[11] = 0uLL;
      v17[8] = 0uLL;
      v17[9] = 0uLL;
      v17[6] = 0uLL;
      v17[7] = 0uLL;
      void v17[4] = 0uLL;
      v17[5] = 0uLL;
      std::string v17[2] = 0uLL;
      v17[3] = 0uLL;
      *float v17 = 0uLL;
      v17[1] = 0uLL;
    }
    v17 += 14;
    v15 -= 224;
  }
  while (v15);
  uint64_t v22 = v12 + 224 * v11;
  uint64_t v23 = *a1;
  uint64_t v24 = a1[1];
  if (v24 == *a1)
  {
    *a1 = (uint64_t)v13;
    a1[1] = v14;
    uint64_t v38 = a1[2];
    a1[2] = v22;
  }
  else
  {
    unint64_t v25 = 0;
    do
    {
      uint64_t v26 = v24 + v25;
      float v27 = &v13[v25 / 0x10];
      *(v27 - 14) = *(_OWORD *)(v24 + v25 - 224);
      *(void *)(v26 - 224) = 0;
      *(void *)(v26 - 216) = 0;
      *(v27 - 13) = *(_OWORD *)(v24 + v25 - 208);
      *((void *)v27 - 24) = *(void *)(v24 + v25 - 192);
      long long v28 = *(_OWORD *)(v24 + v25 - 184);
      long long v29 = *(_OWORD *)(v24 + v25 - 168);
      int v30 = *(_DWORD *)(v24 + v25 - 152);
      *(void *)(v26 - 200) = 0;
      *(void *)(v26 - 192) = 0;
      *((_DWORD *)v27 - 38) = v30;
      *(_OWORD *)((char *)v27 - 168) = v29;
      *(_OWORD *)((char *)v27 - 184) = v28;
      long long v31 = *(_OWORD *)(v24 + v25 - 80);
      long long v33 = *(_OWORD *)(v24 + v25 - 128);
      long long v32 = *(_OWORD *)(v24 + v25 - 112);
      *(v27 - 6) = *(_OWORD *)(v24 + v25 - 96);
      *(v27 - 5) = v31;
      *(v27 - 8) = v33;
      *(v27 - 7) = v32;
      long long v35 = *(_OWORD *)(v24 + v25 - 48);
      long long v34 = *(_OWORD *)(v24 + v25 - 32);
      long long v36 = *(_OWORD *)(v24 + v25 - 64);
      *(_OWORD *)((char *)v27 - 23) = *(_OWORD *)(v24 + v25 - 23);
      *(v27 - 3) = v35;
      *(v27 - 2) = v34;
      *(v27 - 4) = v36;
      __n128 v16 = *(__n128 *)(v24 + v25 - 144);
      *(v27 - 9) = v16;
      v25 -= 224;
    }
    while (v24 + v25 != v23);
    uint64_t v24 = *a1;
    uint64_t v37 = a1[1];
    *a1 = (uint64_t)&v13[v25 / 0x10];
    a1[1] = v14;
    uint64_t v38 = a1[2];
    a1[2] = v22;
    if (v37 != v24)
    {
      while (1)
      {
        unsigned int v39 = *(std::__shared_weak_count **)(v37 - 192);
        if (v39)
        {
          if (!atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
            break;
          }
        }
        unint64_t v40 = *(std::__shared_weak_count **)(v37 - 216);
        if (v40) {
          goto LABEL_37;
        }
LABEL_33:
        v37 -= 224;
        if (v37 == v24) {
          goto LABEL_41;
        }
      }
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
      unint64_t v40 = *(std::__shared_weak_count **)(v37 - 216);
      if (!v40) {
        goto LABEL_33;
      }
LABEL_37:
      std::__shared_weak_count::__release_weak(v40);
      goto LABEL_33;
    }
  }
LABEL_41:
  if (v24) {
    (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(void *)a1[3] + 40))(a1[3], v24, v38 - v24, v16);
  }
}

void *geo::MallocZoneAllocator::reallocate(geo::MallocZoneAllocator *this, void *a2, size_t a3)
{
  uint64_t v12 = (pthread_rwlock_t *)((char *)this + 56);
  unint64_t v6 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)((char *)this + 56));
  if (v6) {
    geo::read_write_lock::logFailure(v6, (uint64_t)"read lock", v7);
  }
  if (a2) {
    atomic_fetch_add((atomic_ullong *volatile)this + 5, 0xFFFFFFFFFFFFFFFFLL);
  }
  uint64_t v8 = malloc_type_zone_realloc(*((malloc_zone_t **)this + 6), a2, a3, 0x975057C8uLL);
  atomic_fetch_add((atomic_ullong *volatile)this + 5, 1uLL);
  unint64_t v9 = (geo::read_write_lock *)pthread_rwlock_unlock(v12);
  if (v9) {
    geo::read_write_lock::logFailure(v9, (uint64_t)"unlock", v10);
  }
  return v8;
}

void sub_188F09A30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  geo::read_lock_guard::~read_lock_guard((pthread_rwlock_t **)va);
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<FeatureStyleAttributes const>,geo::StdAllocator<std::shared_ptr<FeatureStyleAttributes const>,geo::codec::Allocator>>::emplace_back<std::shared_ptr<FeatureStyleAttributes> &>(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  if ((unint64_t)v4 < v5)
  {
    if (v4)
    {
      uint64_t v6 = a2[1];
      *uint64_t v4 = *a2;
      v4[1] = v6;
      if (v6) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
      }
    }
    uint64_t v7 = (uint64_t)(v4 + 2);
    goto LABEL_28;
  }
  uint64_t v8 = ((uint64_t)v4 - *(void *)a1) >> 4;
  unint64_t v9 = v8 + 1;
  if ((unint64_t)(v8 + 1) >> 60) {
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v10 = v5 - *(void *)a1;
  if (v10 >> 3 > v9) {
    unint64_t v9 = v10 >> 3;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  if (v9)
  {
    uint64_t v11 = 16 * v9;
    uint64_t v12 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24), 16 * v9, 8);
    uint64_t v13 = (_OWORD *)(v12 + 16 * v8);
    unint64_t v9 = v12 + v11;
    if (v12)
    {
      long long v14 = *(_OWORD *)a2;
      *uint64_t v13 = *(_OWORD *)a2;
      if (*((void *)&v14 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v14 + 1) + 8), 1uLL, memory_order_relaxed);
      }
    }
    uint64_t v7 = (uint64_t)(v13 + 1);
    uint64_t v15 = *(void **)a1;
    __n128 v16 = *(void **)(a1 + 8);
    if (v16 == *(void **)a1) {
      goto LABEL_25;
    }
    do
    {
LABEL_18:
      long long v17 = *((_OWORD *)v16 - 1);
      v16 -= 2;
      *--uint64_t v13 = v17;
      *__n128 v16 = 0;
      v16[1] = 0;
    }
    while (v16 != v15);
    __n128 v16 = *(void **)a1;
    uint64_t v18 = *(void **)(a1 + 8);
    *(void *)a1 = v13;
    *(void *)(a1 + 8) = v7;
    uint64_t v19 = *(void *)(a1 + 16);
    for (*(void *)(a1 + 16) = v9; v18 != v16; v18 -= 2)
    {
      int v20 = (std::__shared_weak_count *)*(v18 - 1);
      if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    goto LABEL_26;
  }
  uint64_t v13 = (_OWORD *)(16 * v8);
  uint64_t v7 = 16 * v8 + 16;
  uint64_t v15 = *(void **)a1;
  __n128 v16 = *(void **)(a1 + 8);
  if (v16 != *(void **)a1) {
    goto LABEL_18;
  }
LABEL_25:
  *(void *)a1 = v13;
  *(void *)(a1 + 8) = v7;
  uint64_t v19 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v9;
LABEL_26:
  if (v16) {
    (*(void (**)(void, void *, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v16, v19 - (void)v16);
  }
LABEL_28:
  *(void *)(a1 + 8) = v7;
}

void std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 24))
  {
    uint64_t v4 = *(void **)(a1 + 16);
    if (v4)
    {
      do
      {
        unint64_t v5 = (void *)*v4;
        operator delete(v4);
        uint64_t v4 = v5;
      }
      while (v5);
    }
    *(void *)(a1 + 16) = 0;
    uint64_t v6 = *(void *)(a1 + 8);
    if (v6)
    {
      for (uint64_t i = 0; i != v6; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v8 = *a2;
  *a2 = 0;
  unint64_t v9 = *(void **)a1;
  *(void *)a1 = v8;
  if (v9) {
    operator delete(v9);
  }
  uint64_t v12 = a2[2];
  uint64_t v11 = a2 + 2;
  uint64_t v10 = v12;
  uint64_t v13 = *(v11 - 1);
  *(void *)(a1 + 16) = v12;
  *(void *)(a1 + 8) = v13;
  *(v11 - 1) = 0;
  uint64_t v14 = v11[1];
  *(void *)(a1 + 24) = v14;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v11 + 4);
  if (v14)
  {
    unint64_t v15 = *(void *)(v10 + 8);
    unint64_t v16 = *(void *)(a1 + 8);
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v15 >= v16) {
        v15 %= v16;
      }
    }
    else
    {
      v15 &= v16 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v15) = a1 + 16;
    *uint64_t v11 = 0;
    v11[1] = 0;
  }
}

char *std::make_shared[abi:ne180100]<FeatureStyleAttributes,std::shared_ptr<FeatureStyleAttributes const> &,GeoCodecsFeatureStylePairExt *,int,void>(void *a1, uint64_t a2, const void *a3, unsigned __int8 a4)
{
  uint64_t result = (char *)operator new(0x40uLL);
  unint64_t v9 = result;
  *((void *)result + 1) = 0;
  *((void *)result + 2) = 0;
  *(void *)uint64_t result = &unk_1ED5185C0;
  uint64_t v10 = *(void **)a2;
  uint64_t v11 = *(void *)(a2 + 8);
  *((void *)result + 3) = **(void **)a2;
  uint64_t v12 = result + 24;
  *((void *)result + 4) = v10;
  *((void *)result + 5) = v11;
  if (v11)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    uint64_t v10 = *(void **)a2;
  }
  *((void *)result + 6) = 0;
  result[56] = 0;
  *(_WORD *)(result + 57) = *((unsigned __int8 *)v10 + 33);
  if (a3)
  {
    if (a4)
    {
      uint64_t result = (char *)malloc_type_malloc(12 * a4, 0x10000403E1C8BA9uLL);
      *((void *)v9 + 6) = result;
      if (result)
      {
        v9[56] = a4;
        uint64_t result = (char *)memcpy(result, a3, 12 * a4);
      }
    }
  }
  *a1 = v12;
  a1[1] = v9;
  return result;
}

void sub_188F09E28(_Unwind_Exception *a1)
{
  shared_weak_owners = (std::__shared_weak_count *)v1[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (!atomic_fetch_add(&shared_weak_owners->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void sub_188F09EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_188F0A004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::~__hash_table(v8);
  _Unwind_Resume(a1);
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
}

uint64_t BitstreamUnpackVar32(uint64_t *a1, int *a2)
{
  unint64_t v2 = a1[2];
  unint64_t v3 = 8 * a1[1];
  if (v2 + 5 > v3) {
    return 0;
  }
  int v5 = 0;
  uint64_t v6 = *a1;
  unint64_t v7 = 5;
  do
  {
    unint64_t v8 = 8 - (v2 & 7);
    if (v7 < v8) {
      unint64_t v8 = v7;
    }
    int v5 = (*(unsigned __int8 *)(v6 + (v2 >> 3)) >> (8 - (v2 & 7) - v8)) & ~(-1 << v8) | (v5 << v8);
    v2 += v8;
    a1[2] = v2;
    v7 -= v8;
  }
  while (v7);
  unint64_t v9 = (v5 + 1);
  if (v2 + v9 > v3) {
    return 0;
  }
  int v10 = 0;
  if (v9)
  {
    do
    {
      unint64_t v11 = 8 - (v2 & 7);
      if (v9 < v11) {
        unint64_t v11 = v9;
      }
      int v10 = (*(unsigned __int8 *)(v6 + (v2 >> 3)) >> (8 - (v2 & 7) - v11)) & ~(-1 << v11) | (v10 << v11);
      v2 += v11;
      a1[2] = v2;
      v9 -= v11;
    }
    while (v9);
  }
  *a2 = v10;
  return 1;
}

void sub_188F0A978(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPBTransitHallReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 72));
  uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 68);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 64)];
  unint64_t v7 = v6;
  uint64_t v8 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  unsigned int v13 = (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int16 *)(a1 + 84)), (uint16x4_t)0xFFFBFFFAFFFCFFF9), (int8x8_t)0x1000100010001))+ ((*(_WORD *)(a1 + 84) >> 3) & 1));
  while (2)
  {
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    uint64_t v16 = 1;
    switch(a3[v8])
    {
      case -4:
        ++v13;
        goto LABEL_8;
      case -3:
        char v9 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v15 = v11;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v17 = v13 > 2;
        char v18 = v17 & ~(_BYTE)v12 | v10;
        unsigned __int8 v19 = v17 | v12;
        char v76 = v18;
        char v77 = v19 | v18;
        if ((v19 | v9)) {
          int v20 = 0;
        }
        else {
          int v20 = a3;
        }
        char v78 = (v20 == 0) | v19;
        BOOL v79 = v19;
        uint64_t v21 = (int *)MEMORY[0x1E4F940E8];
        uint64_t v22 = (int *)MEMORY[0x1E4F940C8];
        uint64_t v23 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v13;
LABEL_7:
        uint64_t v14 = v10;
LABEL_8:
        uint64_t v15 = v11;
        uint64_t v16 = v12;
LABEL_10:
        ++v8;
        uint64_t v10 = v14;
        uint64_t v11 = v15;
        uint64_t v12 = v16;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v21) >= *(void *)(v3 + *v7) || *(unsigned char *)(v3 + *v22)) {
      goto LABEL_114;
    }
    char v24 = 0;
    unsigned int v25 = 0;
    unint64_t v26 = 0;
    while (1)
    {
      uint64_t v27 = *v21;
      uint64_t v28 = *(void *)(v3 + v27);
      unint64_t v29 = v28 + 1;
      if (v28 == -1 || v29 > *(void *)(v3 + *v7)) {
        break;
      }
      char v30 = *(unsigned char *)(*(void *)(v3 + *v23) + v28);
      *(void *)(v3 + v27) = v29;
      v26 |= (unint64_t)(v30 & 0x7F) << v24;
      if ((v30 & 0x80) == 0) {
        goto LABEL_25;
      }
      v24 += 7;
      BOOL v31 = v25++ >= 9;
      if (v31)
      {
        unint64_t v26 = 0;
        int v32 = *(unsigned __int8 *)(v3 + *v22);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v22) = 1;
LABEL_25:
    int v32 = *(unsigned __int8 *)(v3 + *v22);
    if (*(unsigned char *)(v3 + *v22)) {
      unint64_t v26 = 0;
    }
LABEL_27:
    if (v32 || (v26 & 7) == 4)
    {
LABEL_114:
      int v74 = 1;
      goto LABEL_115;
    }
    unint64_t v34 = v26 >> 3;
    BOOL v35 = v79;
    if ((v78 & 1) == 0)
    {
      long long v36 = v20;
      do
      {
        int v38 = *v36++;
        int v37 = v38;
        BOOL v35 = v38 != 0;
        if (v38) {
          BOOL v39 = v37 == v34;
        }
        else {
          BOOL v39 = 1;
        }
      }
      while (!v39);
    }
    switch((int)v34)
    {
      case 1:
        if ((v9 & 1) == 0) {
          goto LABEL_90;
        }
        char v40 = 0;
        unsigned int v41 = 0;
        uint64_t v42 = 0;
        *(_WORD *)(a1 + 84) |= 1u;
        while (1)
        {
          uint64_t v43 = *v21;
          uint64_t v44 = *(void *)(v3 + v43);
          unint64_t v45 = v44 + 1;
          if (v44 == -1 || v45 > *(void *)(v3 + *v7)) {
            break;
          }
          char v46 = *(unsigned char *)(*(void *)(v3 + *v23) + v44);
          *(void *)(v3 + v43) = v45;
          v42 |= (unint64_t)(v46 & 0x7F) << v40;
          if ((v46 & 0x80) == 0) {
            goto LABEL_93;
          }
          v40 += 7;
          BOOL v31 = v41++ >= 9;
          if (v31)
          {
            uint64_t v42 = 0;
            goto LABEL_95;
          }
        }
        *(unsigned char *)(v3 + *v22) = 1;
LABEL_93:
        if (*(unsigned char *)(v3 + *v22)) {
          uint64_t v42 = 0;
        }
LABEL_95:
        *(void *)(a1 + 32) = v42;
        goto LABEL_113;
      case 2:
        if ((v9 & 1) == 0) {
          goto LABEL_90;
        }
        char v57 = 0;
        unsigned int v58 = 0;
        uint64_t v49 = 0;
        *(_WORD *)(a1 + 84) |= 4u;
        while (2)
        {
          uint64_t v59 = *v21;
          uint64_t v60 = *(void *)(v3 + v59);
          unint64_t v61 = v60 + 1;
          if (v60 == -1 || v61 > *(void *)(v3 + *v7))
          {
            *(unsigned char *)(v3 + *v22) = 1;
          }
          else
          {
            char v62 = *(unsigned char *)(*(void *)(v3 + *v23) + v60);
            *(void *)(v3 + v59) = v61;
            v49 |= (unint64_t)(v62 & 0x7F) << v57;
            if (v62 < 0)
            {
              v57 += 7;
              BOOL v31 = v58++ >= 9;
              if (v31)
              {
                LODWORD(v49) = 0;
                goto LABEL_99;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v22)) {
          LODWORD(v49) = 0;
        }
LABEL_99:
        uint64_t v68 = 80;
        goto LABEL_112;
      case 3:
        if (!v35) {
          goto LABEL_90;
        }
        if ((*(_WORD *)(a1 + 84) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_133;
          }
          __int16 v69 = *(_WORD *)(a1 + 84) << 11;
          goto LABEL_106;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_133;
        }
        unint64_t v63 = objc_alloc_init(GEOLatLng);
        if (!GEOLatLngReadAllFrom((uint64_t)v63, (void *)v3)) {
          goto LABEL_132;
        }
        PBReaderRecallMark();
        uint64_t v64 = 24;
        goto LABEL_85;
      case 4:
      case 5:
        goto LABEL_56;
      case 6:
        if (!v35 || (*(_WORD *)(a1 + 84) & 0x80) != 0) {
          goto LABEL_90;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_133;
        }
        unint64_t v63 = objc_alloc_init(GEOPBTransitZoomRangeString);
        if (!GEOPBTransitZoomRangeStringReadAllFrom((uint64_t)v63, (void *)v3, v11 & 1)) {
          goto LABEL_132;
        }
        PBReaderRecallMark();
        -[GEOPBTransitHall _addNoFlagsZoomName:](a1, v63);

        goto LABEL_107;
      case 7:
        if (!v35) {
          goto LABEL_90;
        }
        if ((*(_WORD *)(a1 + 84) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_133;
          }
          __int16 v69 = *(_WORD *)(a1 + 84) << 9;
LABEL_106:
          v8 += v69 >> 15;
LABEL_107:
          uint64_t v22 = (int *)MEMORY[0x1E4F940C8];
          unint64_t v7 = (int *)MEMORY[0x1E4F940E0];
          goto LABEL_113;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_133;
        }
        unint64_t v63 = objc_alloc_init(GEOStyleAttributes);
        if (GEOStyleAttributesReadAllFrom((uint64_t)v63, (void *)v3))
        {
          PBReaderRecallMark();
          uint64_t v64 = 48;
LABEL_85:
          uint64_t v65 = *(void **)(a1 + v64);
          *(void *)(a1 + v64) = v63;
LABEL_89:

          --v8;
          goto LABEL_107;
        }
LABEL_132:

LABEL_133:
        int v74 = 0;
        unint64_t v75 = &OBJC_IVAR___GEOPDRelatedCollectionSection__collectionIds;
        uint64_t v22 = (int *)MEMORY[0x1E4F940C8];
LABEL_116:
        if (v76) {
LABEL_117:
        }
          *(_WORD *)(a1 + v75[195]) |= 8u;
        if (v79 || (v74 & 1) == 0)
        {
          *(_WORD *)(a1 + v75[195]) |= 0x10u;
          *(_WORD *)(a1 + v75[195]) |= 0x80u;
          *(_WORD *)(a1 + v75[195]) |= 0x40u;
          *(_WORD *)(a1 + v75[195]) |= 0x20u;
        }
        else if (v20)
        {
          while (1)
          {
            int v70 = *v20++;
            __int16 v71 = 16;
            switch(v70)
            {
              case 0:
                goto LABEL_126;
              case 3:
                goto LABEL_125;
              case 6:
                __int16 v71 = 128;
                goto LABEL_125;
              case 7:
                __int16 v71 = 64;
                goto LABEL_125;
              case 8:
                __int16 v71 = 32;
LABEL_125:
                *(_WORD *)(a1 + v75[195]) |= v71;
                break;
              default:
                continue;
            }
          }
        }
LABEL_126:
        if (v74) {
          unint64_t v3 = *(unsigned char *)(v3 + *v22) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v79)
        {
          int v72 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      case 8:
        if (!v35) {
          goto LABEL_90;
        }
        if ((*(_WORD *)(a1 + 84) & 0x20) == 0)
        {
          uint64_t v66 = PBReaderReadString();
          uint64_t v65 = *(void **)(a1 + 40);
          *(void *)(a1 + 40) = v66;
          goto LABEL_89;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_133;
        }
        __int16 v69 = *(_WORD *)(a1 + 84) << 10;
        goto LABEL_106;
      default:
        if (v34 == 2047)
        {
          if (v9)
          {
            char v47 = 0;
            unsigned int v48 = 0;
            uint64_t v49 = 0;
            *(_WORD *)(a1 + 84) |= 2u;
            while (1)
            {
              uint64_t v50 = *v21;
              uint64_t v51 = *(void *)(v3 + v50);
              unint64_t v52 = v51 + 1;
              if (v51 == -1 || v52 > *(void *)(v3 + *v7)) {
                break;
              }
              char v53 = *(unsigned char *)(*(void *)(v3 + *v23) + v51);
              *(void *)(v3 + v50) = v52;
              v49 |= (unint64_t)(v53 & 0x7F) << v47;
              if ((v53 & 0x80) == 0) {
                goto LABEL_109;
              }
              v47 += 7;
              BOOL v31 = v48++ >= 9;
              if (v31)
              {
                LODWORD(v49) = 0;
                goto LABEL_111;
              }
            }
            *(unsigned char *)(v3 + *v22) = 1;
LABEL_109:
            if (*(unsigned char *)(v3 + *v22)) {
              LODWORD(v49) = 0;
            }
LABEL_111:
            uint64_t v68 = 76;
LABEL_112:
            *(_DWORD *)(a1 + v68) = v49;
            goto LABEL_113;
          }
        }
        else
        {
LABEL_56:
          if ((v76 & 1) != 0 && (*(_WORD *)(a1 + 84) & 8) == 0)
          {
            if (!*(void *)(a1 + 16))
            {
              id v54 = objc_alloc_init(MEMORY[0x1E4F940B0]);
              int v55 = *(void **)(a1 + 16);
              *(void *)(a1 + 16) = v54;
            }
            int v56 = PBUnknownFieldAdd();
            uint64_t v22 = (int *)MEMORY[0x1E4F940C8];
            unint64_t v7 = (int *)MEMORY[0x1E4F940E0];
            if (!v56)
            {
              int v74 = 0;
              unint64_t v75 = &OBJC_IVAR___GEOPDRelatedCollectionSection__collectionIds;
              goto LABEL_117;
            }
            goto LABEL_113;
          }
        }
LABEL_90:
        char v67 = PBReaderSkipValueWithTag();
        unint64_t v7 = (int *)MEMORY[0x1E4F940E0];
        uint64_t v22 = (int *)MEMORY[0x1E4F940C8];
        if ((v67 & 1) == 0)
        {
          int v74 = 0;
LABEL_115:
          unint64_t v75 = &OBJC_IVAR___GEOPDRelatedCollectionSection__collectionIds;
          goto LABEL_116;
        }
LABEL_113:
        if (!(v77 & 1 | (v8 != 0))) {
          goto LABEL_114;
        }
        continue;
    }
  }
}

unint64_t GEOPBTransitBrandReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 52);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 48)];
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  int v12 = ((*(unsigned __int8 *)(a1 + 64) >> 4) & 1)
      + ((*(unsigned __int8 *)(a1 + 64) >> 3) & 1)
      + ((*(unsigned __int8 *)(a1 + 64) >> 2) & 1);
  while (2)
  {
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    switch(a3[v10])
    {
      case -4:
        ++v12;
        uint64_t v13 = v7;
        goto LABEL_8;
      case -3:
        char v9 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v13 = v7;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v16 = v12 != 0;
        char v17 = v16 & ~(_BYTE)v11 | v8;
        unsigned __int8 v18 = v16 | v11;
        char v68 = v17;
        char v69 = v9;
        char v70 = v18 | v17;
        if ((v18 | v9)) {
          unsigned __int8 v19 = 0;
        }
        else {
          unsigned __int8 v19 = a3;
        }
        int v20 = (int *)MEMORY[0x1E4F940E8];
        uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
        char v71 = (v19 == 0) | v18;
        BOOL v72 = v18;
        uint64_t v22 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v12;
LABEL_7:
        uint64_t v13 = v7;
        uint64_t v14 = v8;
LABEL_8:
        uint64_t v15 = v11;
LABEL_10:
        ++v10;
        uint64_t v7 = v13;
        uint64_t v8 = v14;
        uint64_t v11 = v15;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(void *)(v3 + *v20) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v21)) {
      goto LABEL_91;
    }
    char v23 = 0;
    unsigned int v24 = 0;
    unint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = *v20;
      uint64_t v27 = *(void *)(v3 + v26);
      unint64_t v28 = v27 + 1;
      if (v27 == -1 || v28 > *(void *)(v3 + *v6)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(v3 + *v22) + v27);
      *(void *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0) {
        goto LABEL_25;
      }
      v23 += 7;
      BOOL v30 = v24++ >= 9;
      if (v30)
      {
        unint64_t v25 = 0;
        int v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v21) = 1;
LABEL_25:
    int v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(unsigned char *)(v3 + *v21)) {
      unint64_t v25 = 0;
    }
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_91:
      int v66 = 1;
      goto LABEL_92;
    }
    unint64_t v33 = v25 >> 3;
    BOOL v34 = v72;
    if ((v71 & 1) == 0)
    {
      BOOL v35 = v19;
      do
      {
        int v37 = *v35++;
        int v36 = v37;
        BOOL v34 = v37 != 0;
        if (v37) {
          BOOL v38 = v36 == v33;
        }
        else {
          BOOL v38 = 1;
        }
      }
      while (!v38);
    }
    if ((int)v33 > 9)
    {
      if (v33 == 10)
      {
        if (!v34) {
          goto LABEL_74;
        }
        if ((*(unsigned char *)(a1 + 64) & 8) == 0)
        {
          uint64_t v55 = PBReaderReadString();
          char v40 = *(void **)(a1 + 32);
          *(void *)(a1 + 32) = v55;
LABEL_67:

          --v10;
LABEL_89:
          uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
          goto LABEL_90;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_111;
        }
        char v60 = 16 * *(unsigned char *)(a1 + 64);
LABEL_88:
        v10 += v60 >> 7;
        goto LABEL_89;
      }
      if (v33 == 2047)
      {
        if ((v69 & 1) == 0) {
          goto LABEL_74;
        }
        char v41 = 0;
        unsigned int v42 = 0;
        uint64_t v43 = 0;
        *(unsigned char *)(a1 + 64) |= 2u;
        while (1)
        {
          uint64_t v44 = *v20;
          uint64_t v45 = *(void *)(v3 + v44);
          unint64_t v46 = v45 + 1;
          if (v45 == -1 || v46 > *(void *)(v3 + *v6)) {
            break;
          }
          char v47 = *(unsigned char *)(*(void *)(v3 + *v22) + v45);
          *(void *)(v3 + v44) = v46;
          v43 |= (unint64_t)(v47 & 0x7F) << v41;
          if ((v47 & 0x80) == 0) {
            goto LABEL_77;
          }
          v41 += 7;
          BOOL v30 = v42++ >= 9;
          if (v30)
          {
            LODWORD(v43) = 0;
            goto LABEL_79;
          }
        }
        *(unsigned char *)(v3 + *v21) = 1;
LABEL_77:
        if (*(unsigned char *)(v3 + *v21)) {
          LODWORD(v43) = 0;
        }
LABEL_79:
        *(_DWORD *)(a1 + 60) = v43;
        goto LABEL_90;
      }
      goto LABEL_68;
    }
    if (v33 == 4)
    {
      if ((v69 & 1) == 0) {
        goto LABEL_74;
      }
      char v48 = 0;
      unsigned int v49 = 0;
      uint64_t v50 = 0;
      *(unsigned char *)(a1 + 64) |= 1u;
      while (1)
      {
        uint64_t v51 = *v20;
        uint64_t v52 = *(void *)(v3 + v51);
        unint64_t v53 = v52 + 1;
        if (v52 == -1 || v53 > *(void *)(v3 + *v6)) {
          break;
        }
        char v54 = *(unsigned char *)(*(void *)(v3 + *v22) + v52);
        *(void *)(v3 + v51) = v53;
        v50 |= (unint64_t)(v54 & 0x7F) << v48;
        if ((v54 & 0x80) == 0) {
          goto LABEL_81;
        }
        v48 += 7;
        BOOL v30 = v49++ >= 9;
        if (v30)
        {
          uint64_t v50 = 0;
          goto LABEL_83;
        }
      }
      *(unsigned char *)(v3 + *v21) = 1;
LABEL_81:
      if (*(unsigned char *)(v3 + *v21)) {
        uint64_t v50 = 0;
      }
LABEL_83:
      *(void *)(a1 + 24) = v50;
      goto LABEL_90;
    }
    if (v33 == 9) {
      break;
    }
LABEL_68:
    if ((v68 & 1) == 0 || (*(unsigned char *)(a1 + 64) & 4) != 0)
    {
LABEL_74:
      char v59 = PBReaderSkipValueWithTag();
      uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
      if ((v59 & 1) == 0)
      {
        int v66 = 0;
        goto LABEL_92;
      }
      goto LABEL_90;
    }
    if (!*(void *)(a1 + 16))
    {
      id v56 = objc_alloc_init(MEMORY[0x1E4F940B0]);
      char v57 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v56;
    }
    int v58 = PBUnknownFieldAdd();
    uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
    if (!v58)
    {
      int v66 = 0;
      char v67 = &OBJC_IVAR___GEONonTiledAssets__flags;
      goto LABEL_93;
    }
LABEL_90:
    if (!(v70 & 1 | (v10 != 0))) {
      goto LABEL_91;
    }
  }
  if (!v34) {
    goto LABEL_74;
  }
  if ((*(unsigned char *)(a1 + 64) & 0x10) != 0)
  {
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      goto LABEL_111;
    }
    char v60 = 8 * *(unsigned char *)(a1 + 64);
    goto LABEL_88;
  }
  if ((PBReaderPlaceMark() & 1) == 0) {
    goto LABEL_111;
  }
  BOOL v39 = objc_alloc_init(GEOStyleAttributes);
  if (GEOStyleAttributesReadAllFrom((uint64_t)v39, (void *)v3))
  {
    PBReaderRecallMark();
    char v40 = *(void **)(a1 + 40);
    *(void *)(a1 + 40) = v39;
    goto LABEL_67;
  }

LABEL_111:
  int v66 = 0;
  uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
LABEL_92:
  char v67 = &OBJC_IVAR___GEONonTiledAssets__flags;
  if ((v68 & 1) == 0) {
    goto LABEL_94;
  }
LABEL_93:
  *(unsigned char *)(a1 + v67[428]) |= 4u;
LABEL_94:
  if (v72 || (v66 & 1) == 0)
  {
    *(unsigned char *)(a1 + v67[428]) |= 0x10u;
    *(unsigned char *)(a1 + v67[428]) |= 8u;
    goto LABEL_104;
  }
  if (v19)
  {
    while (2)
    {
      while (1)
      {
        int v62 = *v19++;
        int v61 = v62;
        if (v62 == 9) {
          break;
        }
        if (v61 == 10)
        {
          char v63 = 8;
          goto LABEL_103;
        }
        if (!v61) {
          goto LABEL_104;
        }
      }
      char v63 = 16;
LABEL_103:
      *(unsigned char *)(a1 + v67[428]) |= v63;
      continue;
    }
  }
LABEL_104:
  if (v66) {
    unint64_t v3 = *(unsigned char *)(v3 + *v21) == 0;
  }
  else {
    unint64_t v3 = 0;
  }
  if (v72)
  {
    uint64_t v64 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  return v3;
}

void sub_188F0C194(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOPDStorefrontPresentationIsDirty(uint64_t a1)
{
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  unsigned int v2 = *(unsigned __int8 *)(a1 + 52);
  if ((v2 & 8) != 0) {
    return 1;
  }
  if (v2)
  {
    if (GEOPDStorefrontViewIsDirty(*(os_unfair_lock_s **)(a1 + 16))) {
      return 1;
    }
    unsigned int v2 = *(unsigned __int8 *)(a1 + 52);
  }
  if ((v2 & 4) != 0)
  {
    if (GEOPDStorefrontViewIsDirty(*(os_unfair_lock_s **)(a1 + 32))) {
      return 1;
    }
    unsigned int v2 = *(unsigned __int8 *)(a1 + 52);
  }
  return (v2 >> 1) & 1;
}

void sub_188F0C424(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F0C6A0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F0C85C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F0D364(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOPDEntityIsDirty(uint64_t a1)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 288));
  uint64_t v2 = *(void *)(a1 + 328);
  if ((v2 & 0x55214F00000) != 0) {
    return 1;
  }
  if ((v2 & 0x400000000) != 0)
  {
    if (GEOLocalizedStringIsDirty(*(void *)(a1 + 216))) {
      return 1;
    }
    uint64_t v2 = *(void *)(a1 + 328);
  }
  if ((v2 & 0x800000000) != 0)
  {
    if (GEOLocalizedStringIsDirty(*(void *)(a1 + 224))) {
      return 1;
    }
    uint64_t v2 = *(void *)(a1 + 328);
  }
  if ((v2 & 0x221E9080000) == 0)
  {
    if ((v2 & 0x2000000) != 0)
    {
      if (GEOLocalizedStringIsDirty(*(void *)(a1 + 128))) {
        return 1;
      }
      uint64_t v2 = *(void *)(a1 + 328);
    }
    if ((v2 & 0x8000000000) == 0) {
      goto LABEL_17;
    }
    if ((GEOPDURLDataIsDirty(*(os_unfair_lock_s **)(a1 + 256)) & 1) == 0)
    {
      uint64_t v2 = *(void *)(a1 + 328);
LABEL_17:
      if ((v2 & 0x200000000) != 0)
      {
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        id v5 = *(id *)(a1 + 208);
        uint64_t v6 = [v5 countByEnumeratingWithState:&v40 objects:v48 count:16];
        if (v6)
        {
          uint64_t v7 = v6;
          uint64_t v8 = *(void *)v41;
LABEL_20:
          uint64_t v9 = 0;
          while (1)
          {
            if (*(void *)v41 != v8) {
              objc_enumerationMutation(v5);
            }
            if (GEOLocalizedStringIsDirty(*(void *)(*((void *)&v40 + 1) + 8 * v9))) {
              goto LABEL_68;
            }
            if (v7 == ++v9)
            {
              uint64_t v7 = [v5 countByEnumeratingWithState:&v40 objects:v48 count:16];
              if (v7) {
                goto LABEL_20;
              }
              break;
            }
          }
        }

        uint64_t v2 = *(void *)(a1 + 328);
      }
      if ((v2 & 0x1000000000) != 0)
      {
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        id v5 = *(id *)(a1 + 232);
        uint64_t v10 = [v5 countByEnumeratingWithState:&v36 objects:v47 count:16];
        if (v10)
        {
          uint64_t v11 = v10;
          uint64_t v12 = *(void *)v37;
LABEL_30:
          uint64_t v13 = 0;
          while (1)
          {
            if (*(void *)v37 != v12) {
              objc_enumerationMutation(v5);
            }
            if (GEOLocalizedStringIsDirty(*(void *)(*((void *)&v36 + 1) + 8 * v13))) {
              goto LABEL_68;
            }
            if (v11 == ++v13)
            {
              uint64_t v11 = [v5 countByEnumeratingWithState:&v36 objects:v47 count:16];
              if (v11) {
                goto LABEL_30;
              }
              break;
            }
          }
        }

        uint64_t v2 = *(void *)(a1 + 328);
      }
      if ((v2 & 0x10000000) != 0)
      {
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        id v5 = *(id *)(a1 + 160);
        uint64_t v14 = [v5 countByEnumeratingWithState:&v32 objects:v46 count:16];
        if (v14)
        {
          uint64_t v15 = v14;
          uint64_t v16 = *(void *)v33;
LABEL_40:
          uint64_t v17 = 0;
          while (1)
          {
            if (*(void *)v33 != v16) {
              objc_enumerationMutation(v5);
            }
            if (GEOPDCategoryIsDirty(*(void *)(*((void *)&v32 + 1) + 8 * v17))) {
              goto LABEL_68;
            }
            if (v15 == ++v17)
            {
              uint64_t v15 = [v5 countByEnumeratingWithState:&v32 objects:v46 count:16];
              if (v15) {
                goto LABEL_40;
              }
              break;
            }
          }
        }

        uint64_t v2 = *(void *)(a1 + 328);
      }
      if ((v2 & 0x1000000) != 0)
      {
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        id v5 = *(id *)(a1 + 96);
        uint64_t v18 = [v5 countByEnumeratingWithState:&v28 objects:v45 count:16];
        if (v18)
        {
          uint64_t v19 = v18;
          uint64_t v20 = *(void *)v29;
LABEL_50:
          uint64_t v21 = 0;
          while (1)
          {
            if (*(void *)v29 != v20) {
              objc_enumerationMutation(v5);
            }
            if (GEOLocalizedStringIsDirty(*(void *)(*((void *)&v28 + 1) + 8 * v21))) {
              goto LABEL_68;
            }
            if (v19 == ++v21)
            {
              uint64_t v19 = [v5 countByEnumeratingWithState:&v28 objects:v45 count:16];
              if (v19) {
                goto LABEL_50;
              }
              break;
            }
          }
        }

        uint64_t v2 = *(void *)(a1 + 328);
      }
      if ((v2 & 0x80000000) == 0) {
        return 0;
      }
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      id v5 = *(id *)(a1 + 192);
      uint64_t v3 = [v5 countByEnumeratingWithState:&v24 objects:v44 count:16];
      if (!v3)
      {
LABEL_69:

        return v3;
      }
      uint64_t v22 = *(void *)v25;
LABEL_61:
      uint64_t v23 = 0;
      while (1)
      {
        if (*(void *)v25 != v22) {
          objc_enumerationMutation(v5);
        }
        if (GEOPDCategoryIsDirty(*(void *)(*((void *)&v24 + 1) + 8 * v23))) {
          break;
        }
        if (v3 == ++v23)
        {
          uint64_t v3 = [v5 countByEnumeratingWithState:&v24 objects:v44 count:16];
          if (v3) {
            goto LABEL_61;
          }
          goto LABEL_69;
        }
      }
LABEL_68:
      uint64_t v3 = 1;
      goto LABEL_69;
    }
  }
  return 1;
}

void sub_188F0DAB8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F0DB8C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOABSecondPartyPlaceRequestClientMetaDataIsDirty(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  if ((*(unsigned char *)(a1 + 60) & 0x1E) != 0) {
    return 1;
  }
  if ((*(unsigned char *)(a1 + 60) & 2) == 0) {
    return 0;
  }
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  id v3 = *(id *)(a1 + 24);
  uint64_t v2 = [v3 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v2)
  {
    uint64_t v4 = *(void *)v8;
    while (2)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v8 != v4) {
          objc_enumerationMutation(v3);
        }
        if (GEOABClientConfigIsDirty(*(os_unfair_lock_s **)(*((void *)&v7 + 1) + 8 * i)))
        {
          uint64_t v2 = 1;
          goto LABEL_15;
        }
      }
      uint64_t v2 = [v3 countByEnumeratingWithState:&v7 objects:v11 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
LABEL_15:

  return v2;
}

void sub_188F0DEDC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOPDMapsResultIsDirty(uint64_t a1)
{
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 72));
  int v2 = *(char *)(a1 + 80);
  if (v2 < 0) {
    return 1;
  }
  if ((v2 & 0x20) != 0)
  {
    if (GEOPDPlaceIsDirty(*(os_unfair_lock_s **)(a1 + 48))) {
      return 1;
    }
    LOBYTE(v2) = *(unsigned char *)(a1 + 80);
  }
  if ((v2 & 8) != 0)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      os_unfair_lock_lock_with_options();
      os_unfair_lock_assert_owner((const os_unfair_lock *)(v3 + 48));
      int v4 = *(unsigned char *)(v3 + 56) & 0x1C;
      os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 48));
      if (v4) {
        return 1;
      }
    }
    LOBYTE(v2) = *(unsigned char *)(a1 + 80);
  }
  if ((v2 & 0x40) != 0)
  {
    uint64_t v5 = *(void *)(a1 + 56);
    if (v5)
    {
      os_unfair_lock_lock_with_options();
      os_unfair_lock_assert_owner((const os_unfair_lock *)(v5 + 48));
      int v6 = *(unsigned char *)(v5 + 56) & 0x1C;
      os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 48));
      if (v6) {
        return 1;
      }
    }
    LOBYTE(v2) = *(unsigned char *)(a1 + 80);
  }
  if ((v2 & 0x10) != 0)
  {
    if (GEOPDPlaceQuestionnaireResultIsDirty(*(os_unfair_lock_s **)(a1 + 40))) {
      return 1;
    }
    LOBYTE(v2) = *(unsigned char *)(a1 + 80);
  }
  if ((v2 & 4) == 0) {
    return 0;
  }
  long long v8 = *(os_unfair_lock_s **)(a1 + 24);
  if (!v8) {
    return 0;
  }
  os_unfair_lock_lock_with_options();
  uint64_t IsDirty = _GEOPDBatchReverseGeocodeResultIsDirty((uint64_t)v8);
  os_unfair_lock_unlock(v8 + 12);
  return IsDirty;
}

void sub_188F0E148(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

os_unfair_lock_s *GEOPDPlaceIsDirty(os_unfair_lock_s *result)
{
  if (result)
  {
    uint64_t v1 = result;
    os_unfair_lock_lock_with_options();
    uint64_t IsDirty = _GEOPDPlaceIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 28);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_188F0E45C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F0E524(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F0ED48(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F0F4F0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOPDPlaceGlobalResultIsDirty(uint64_t a1)
{
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 440));
  unint64_t v2 = *(void *)(a1 + 444);
  if ((v2 & 0x10000000000000) != 0) {
    return 1;
  }
  if ((v2 & 0x100000000000) != 0)
  {
    uint64_t v3 = *(os_unfair_lock_s **)(a1 + 368);
    if (v3)
    {
      os_unfair_lock_lock_with_options();
      char IsDirty = _GEOPDSearchResultIsDirty((uint64_t)v3);
      os_unfair_lock_unlock(v3 + 54);
      if (IsDirty) {
        return 1;
      }
      unint64_t v2 = *(void *)(a1 + 444);
    }
  }
  if ((v2 & 0x20C20204000) != 0) {
    return 1;
  }
  if ((v2 & 0x800000000000) != 0)
  {
    uint64_t v6 = *(void *)(a1 + 392);
    if (v6)
    {
      os_unfair_lock_lock_with_options();
      os_unfair_lock_assert_owner((const os_unfair_lock *)(v6 + 48));
      int v7 = *(unsigned char *)(v6 + 56) & 0x1C;
      os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 48));
      if (v7) {
        return 1;
      }
    }
    unint64_t v2 = *(void *)(a1 + 444);
  }
  if ((v2 & 0x2000000) != 0)
  {
    long long v8 = *(os_unfair_lock_s **)(a1 + 216);
    if (v8)
    {
      os_unfair_lock_lock_with_options();
      BOOL v9 = _GEOPDLocationDirectedSearchResultIsDirty((uint64_t)v8);
      os_unfair_lock_unlock(v8 + 14);
      if (v9) {
        return 1;
      }
    }
    unint64_t v2 = *(void *)(a1 + 444);
  }
  if ((v2 & 0x40) != 0)
  {
    long long v10 = *(os_unfair_lock_s **)(a1 + 64);
    if (v10)
    {
      os_unfair_lock_lock_with_options();
      char v11 = _GEOPDAutocompleteResultIsDirty((uint64_t)v10);
      os_unfair_lock_unlock(v10 + 20);
      if (v11) {
        return 1;
      }
    }
    unint64_t v2 = *(void *)(a1 + 444);
  }
  if ((v2 & 0x2000) != 0) {
    return 1;
  }
  if ((v2 & 0x8000) != 0)
  {
    if (GEOPDCategorySearchResultIsDirty(*(os_unfair_lock_s **)(a1 + 136))) {
      return 1;
    }
    unint64_t v2 = *(void *)(a1 + 444);
  }
  if ((v2 & 0x4000000000) != 0)
  {
    if (GEOPDPopularNearbySearchResultIsDirty(*(void *)(a1 + 320))) {
      return 1;
    }
    unint64_t v2 = *(void *)(a1 + 444);
  }
  if ((v2 & 0x200000000000) != 0)
  {
    if (GEOPDSearchZeroKeywordCategorySuggestionResultIsDirty(*(void *)(a1 + 376))) {
      return 1;
    }
    unint64_t v2 = *(void *)(a1 + 444);
  }
  if ((v2 & 0xC480048181602) != 0) {
    return 1;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if (GEOPDIpGeoLookupResultIsDirty(*(void *)(a1 + 208))) {
      return 1;
    }
    unint64_t v2 = *(void *)(a1 + 444);
  }
  if ((v2 & 0x400000) != 0) {
    return 1;
  }
  if ((v2 & 0x800) != 0)
  {
    if (GEOPDBatchSpatialLookupResultIsDirty(*(os_unfair_lock_s **)(a1 + 104))) {
      return 1;
    }
    unint64_t v2 = *(void *)(a1 + 444);
  }
  if ((v2 & 0x2000310010180) != 0) {
    return 1;
  }
  if ((v2 & 0x20000) != 0)
  {
    if (GEOPDCollectionSuggestionResultIsDirty(*(os_unfair_lock_s **)(a1 + 152))) {
      return 1;
    }
    unint64_t v2 = *(void *)(a1 + 444);
  }
  if ((v2 & 0x8000000000) != 0)
  {
    if (GEOPDPublisherViewResultIsDirty(*(void *)(a1 + 328))) {
      return 1;
    }
    unint64_t v2 = *(void *)(a1 + 444);
  }
  if ((v2 & 0x10) != 0)
  {
    if (GEOPDAllCollectionsViewResultIsDirty(*(void *)(a1 + 48))) {
      return 1;
    }
    unint64_t v2 = *(void *)(a1 + 444);
  }
  if ((v2 & 0x1000004000008) != 0) {
    return 1;
  }
  if ((v2 & 0x20) != 0)
  {
    if (GEOPDAllGuidesLocationsViewResultIsDirty(*(os_unfair_lock_s **)(a1 + 56))) {
      return 1;
    }
    unint64_t v2 = *(void *)(a1 + 444);
  }
  if ((v2 & 0x800000) != 0)
  {
    if (GEOPDGuidesHomeResultIsDirty(*(os_unfair_lock_s **)(a1 + 200))) {
      return 1;
    }
    unint64_t v2 = *(void *)(a1 + 444);
  }
  if ((v2 & 0x40000) != 0) {
    return 1;
  }
  if ((v2 & 0x10000000000) == 0) {
    goto LABEL_59;
  }
  if (GEOPDQueryUnderstandingResultIsDirty(*(void *)(a1 + 336))) {
    return 1;
  }
  unint64_t v2 = *(void *)(a1 + 444);
LABEL_59:
  if ((v2 & 0x43080000000) != 0) {
    return 1;
  }
  return (v2 >> 2) & 1;
}

uint64_t _GEOPDPlaceRequestParametersIsDirty(uint64_t a1)
{
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 472));
  uint64_t v2 = *(void *)(a1 + 476);
  if ((v2 & 0x100000000000000) != 0) {
    return 1;
  }
  if ((v2 & 0x200000000000) != 0)
  {
    uint64_t v3 = *(os_unfair_lock_s **)(a1 + 376);
    if (v3)
    {
      os_unfair_lock_lock_with_options();
      char IsDirty = _GEOPDSearchParametersIsDirty((uint64_t)v3);
      os_unfair_lock_unlock(v3 + 84);
      if (IsDirty) {
        return 1;
      }
      uint64_t v2 = *(void *)(a1 + 476);
    }
  }
  if ((v2 & 0x200000) != 0)
  {
    uint64_t v5 = *(os_unfair_lock_s **)(a1 + 184);
    if (v5)
    {
      os_unfair_lock_lock_with_options();
      BOOL v6 = _GEOPDGeocodingParametersIsDirty((uint64_t)v5);
      os_unfair_lock_unlock(v5 + 18);
      if (v6) {
        return 1;
      }
    }
    uint64_t v2 = *(void *)(a1 + 476);
  }
  if ((v2 & 0x4000) != 0) {
    return 1;
  }
  if ((v2 & 0x40000000000) != 0)
  {
    int v7 = *(os_unfair_lock_s **)(a1 + 352);
    if (v7)
    {
      os_unfair_lock_lock_with_options();
      char v8 = _GEOPDReverseGeocodingParametersIsDirty((uint64_t)v7);
      os_unfair_lock_unlock(v7 + 12);
      if (v8) {
        return 1;
      }
    }
    uint64_t v2 = *(void *)(a1 + 476);
  }
  if ((v2 & 0x200000000) != 0)
  {
    uint64_t v9 = *(void *)(a1 + 280);
    if (v9)
    {
      os_unfair_lock_lock_with_options();
      os_unfair_lock_assert_owner((const os_unfair_lock *)(v9 + 64));
      int v10 = *(unsigned char *)(v9 + 76) & 0x38;
      os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 64));
      if (v10) {
        return 1;
      }
    }
    uint64_t v2 = *(void *)(a1 + 476);
  }
  if ((v2 & 0x20000000) != 0)
  {
    if (GEOPDMerchantLookupParametersIsDirty(*(os_unfair_lock_s **)(a1 + 248))) {
      return 1;
    }
    uint64_t v2 = *(void *)(a1 + 476);
  }
  if ((v2 & 0x800000000) != 0)
  {
    if (GEOPDPlaceRefinementParametersIsDirty(*(void *)(a1 + 296))) {
      return 1;
    }
    uint64_t v2 = *(void *)(a1 + 476);
  }
  if ((v2 & 0x1000000000000) != 0)
  {
    char v11 = *(os_unfair_lock_s **)(a1 + 400);
    if (v11)
    {
      os_unfair_lock_lock_with_options();
      BOOL v12 = _GEOPDSiriSearchParametersIsDirty((uint64_t)v11);
      os_unfair_lock_unlock(v11 + 22);
      if (v12) {
        return 1;
      }
    }
    uint64_t v2 = *(void *)(a1 + 476);
  }
  if ((v2 & 0x2000000) != 0)
  {
    if (GEOPDLocationDirectedSearchParametersIsDirty(*(os_unfair_lock_s **)(a1 + 216))) {
      return 1;
    }
    uint64_t v2 = *(void *)(a1 + 476);
  }
  if ((v2 & 0x40) != 0)
  {
    if (GEOPDAutocompleteParametersIsDirty(*(os_unfair_lock_s **)(a1 + 64))) {
      return 1;
    }
    uint64_t v2 = *(void *)(a1 + 476);
  }
  if ((v2 & 0x2000) != 0)
  {
    if (GEOPDSearchBrowseCategorySuggestionParametersIsDirty(*(os_unfair_lock_s **)(a1 + 120))) {
      return 1;
    }
    uint64_t v2 = *(void *)(a1 + 476);
  }
  if ((v2 & 0x8000) != 0)
  {
    if (GEOPDCategorySearchParametersIsDirty(*(os_unfair_lock_s **)(a1 + 136))) {
      return 1;
    }
    uint64_t v2 = *(void *)(a1 + 476);
  }
  if ((v2 & 0x4000000000) == 0) {
    goto LABEL_44;
  }
  if (GEOPDPopularNearbySearchParametersIsDirty(*(void *)(a1 + 320))) {
    return 1;
  }
  uint64_t v2 = *(void *)(a1 + 476);
LABEL_44:
  if ((v2 & 0x500000000000) != 0) {
    return 1;
  }
  if ((v2 & 0x200) != 0)
  {
    if (GEOPDBatchPopularNearbySearchParametersIsDirty(*(void *)(a1 + 88))) {
      return 1;
    }
    uint64_t v2 = *(void *)(a1 + 476);
  }
  if ((v2 & 0x40000000000000) != 0)
  {
    if (GEOPDVendorSpecificPlaceRefinementParametersIsDirty(*(void *)(a1 + 448))) {
      return 1;
    }
    uint64_t v2 = *(void *)(a1 + 476);
  }
  if ((v2 & 0x40000000) != 0)
  {
    if (GEOPDNearbySearchParametersIsDirty(*(void *)(a1 + 256))) {
      return 1;
    }
    uint64_t v2 = *(void *)(a1 + 476);
  }
  if ((v2 & 2) != 0)
  {
    if (GEOPDAddressObjectGeocodingParametersIsDirty(*(void *)(a1 + 24))) {
      return 1;
    }
    uint64_t v2 = *(void *)(a1 + 476);
  }
  if ((v2 & 0x800000000000) != 0) {
    return 1;
  }
  if ((v2 & 0x80000) != 0)
  {
    if (GEOPDExternalTransitLookupParametersIsDirty(*(os_unfair_lock_s **)(a1 + 168))) {
      return 1;
    }
    uint64_t v2 = *(void *)(a1 + 476);
  }
  if ((v2 & 0x100000) != 0)
  {
    if (GEOPDFeatureIdGeocodingParametersIsDirty(*(void *)(a1 + 176))) {
      return 1;
    }
    uint64_t v2 = *(void *)(a1 + 476);
  }
  if ((v2 & 0x8000000) != 0) {
    return 1;
  }
  if ((v2 & 0x400) != 0)
  {
    if (GEOPDBatchReverseGeocodingParametersIsDirty(*(void *)(a1 + 96))) {
      return 1;
    }
    uint64_t v2 = *(void *)(a1 + 476);
  }
  if ((v2 & 0x80000001401000) != 0) {
    return 1;
  }
  if ((v2 & 0x800) != 0)
  {
    if (GEOPDBatchSpatialLookupParametersIsDirty(*(os_unfair_lock_s **)(a1 + 104))) {
      return 1;
    }
    uint64_t v2 = *(void *)(a1 + 476);
  }
  if ((v2 & 0x20000000000000) != 0) {
    return 1;
  }
  if ((v2 & 0x100000000) != 0)
  {
    if (GEOPDPlaceCollectionLookupParametersIsDirty(*(void *)(a1 + 272))) {
      return 1;
    }
    uint64_t v2 = *(void *)(a1 + 476);
  }
  if ((v2 & 0x10000000010180) != 0) {
    return 1;
  }
  if ((v2 & 0x20000) != 0)
  {
    if (GEOPDCollectionSuggestionParametersIsDirty(*(void *)(a1 + 152))) {
      return 1;
    }
    uint64_t v2 = *(void *)(a1 + 476);
  }
  if ((v2 & 0x10000000) != 0)
  {
    if (GEOPDMapsSearchHomeParametersIsDirty(*(os_unfair_lock_s **)(a1 + 240))) {
      return 1;
    }
    uint64_t v2 = *(void *)(a1 + 476);
  }
  if ((v2 & 0x400000000) != 0) {
    return 1;
  }
  if ((v2 & 0x8000000000) != 0)
  {
    if (GEOPDPublisherViewParametersIsDirty(*(os_unfair_lock_s **)(a1 + 328))) {
      return 1;
    }
    uint64_t v2 = *(void *)(a1 + 476);
  }
  if ((v2 & 0x10) != 0)
  {
    if (GEOPDAllCollectionsViewParametersIsDirty(*(os_unfair_lock_s **)(a1 + 48))) {
      return 1;
    }
    uint64_t v2 = *(void *)(a1 + 476);
  }
  if ((v2 & 8) != 0)
  {
    if (GEOPDAirportEntityPlaceLookupParametersIsDirty(*(void *)(a1 + 40))) {
      return 1;
    }
    uint64_t v2 = *(void *)(a1 + 476);
  }
  if ((v2 & 0x2000000000000) != 0) {
    return 1;
  }
  if ((v2 & 0x8000000000000) != 0)
  {
    if (GEOPDTransitNearbyScheduleLookupParametersIsDirty(*(os_unfair_lock_s **)(a1 + 424))) {
      return 1;
    }
    uint64_t v2 = *(void *)(a1 + 476);
  }
  if ((v2 & 0x4000020) != 0) {
    return 1;
  }
  if ((v2 & 0x800000) != 0)
  {
    if (GEOPDGuidesHomeParametersIsDirty(*(os_unfair_lock_s **)(a1 + 200))) {
      return 1;
    }
    uint64_t v2 = *(void *)(a1 + 476);
  }
  if ((v2 & 0x40000) != 0)
  {
    if (GEOPDExtendedGeoLookupParametersIsDirty(*(os_unfair_lock_s **)(a1 + 160))) {
      return 1;
    }
    uint64_t v2 = *(void *)(a1 + 476);
  }
  if ((v2 & 0x10000000000) != 0)
  {
    if (GEOPDQueryUnderstandingParametersIsDirty(*(os_unfair_lock_s **)(a1 + 336))) {
      return 1;
    }
    uint64_t v2 = *(void *)(a1 + 476);
  }
  if ((v2 & 0x4002000000000) != 0) {
    return 1;
  }
  if ((v2 & 0x1000000000) != 0)
  {
    if (GEOPDPlacecardEnrichmentParametersIsDirty(*(os_unfair_lock_s **)(a1 + 304))) {
      return 1;
    }
    uint64_t v2 = *(void *)(a1 + 476);
  }
  if ((v2 & 0xA0080000000) != 0) {
    return 1;
  }
  if ((v2 & 4) == 0) {
    return 0;
  }
  uint64_t v14 = *(os_unfair_lock_s **)(a1 + 32);

  return (uint64_t)GEOPDAddressRecommendationParametersIsDirty(v14);
}

void sub_188F0FF44(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEODoesUserHaveValidAccountForMakingContributions()
{
  return +[GEOUserAccountInfo hasValidICloudAccountForAddingRatingsAndPhotos];
}

void sub_188F100E4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F10278(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F10978(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F10C58(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F112C4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F11834(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOPDPlaceCollectionCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  uint64_t v172 = *MEMORY[0x1E4F143B8];
  long long v151 = 0u;
  long long v152 = 0u;
  long long v153 = 0u;
  long long v154 = 0u;
  id v2 = *(id *)(a1 + 104);
  uint64_t v3 = [v2 countByEnumeratingWithState:&v151 objects:v171 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v152;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v152 != v5) {
          objc_enumerationMutation(v2);
        }
        [*(id *)(*((void *)&v151 + 1) + 8 * v6++) readAll:1];
      }
      while (v4 != v6);
      uint64_t v4 = [v2 countByEnumeratingWithState:&v151 objects:v171 count:16];
    }
    while (v4);
  }

  long long v149 = 0u;
  long long v150 = 0u;
  long long v147 = 0u;
  long long v148 = 0u;
  id v7 = *(id *)(a1 + 72);
  uint64_t v8 = [v7 countByEnumeratingWithState:&v147 objects:v170 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v148;
    do
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v148 != v10) {
          objc_enumerationMutation(v7);
        }
        [*(id *)(*((void *)&v147 + 1) + 8 * v11++) readAll:1];
      }
      while (v9 != v11);
      uint64_t v9 = [v7 countByEnumeratingWithState:&v147 objects:v170 count:16];
    }
    while (v9);
  }

  long long v145 = 0u;
  long long v146 = 0u;
  long long v143 = 0u;
  long long v144 = 0u;
  id v12 = *(id *)(a1 + 168);
  uint64_t v13 = [v12 countByEnumeratingWithState:&v143 objects:v169 count:16];
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = *(void *)v144;
    do
    {
      uint64_t v16 = 0;
      do
      {
        if (*(void *)v144 != v15) {
          objc_enumerationMutation(v12);
        }
        -[GEOPDCaptionedPhoto readAll:](*(void *)(*((void *)&v143 + 1) + 8 * v16++), 1);
      }
      while (v14 != v16);
      uint64_t v14 = [v12 countByEnumeratingWithState:&v143 objects:v169 count:16];
    }
    while (v14);
  }

  [*(id *)(a1 + 80) readAll:1];
  [*(id *)(a1 + 184) readAll:1];
  long long v141 = 0u;
  long long v142 = 0u;
  long long v139 = 0u;
  long long v140 = 0u;
  id v17 = *(id *)(a1 + 176);
  uint64_t v18 = [v17 countByEnumeratingWithState:&v139 objects:v168 count:16];
  if (v18)
  {
    uint64_t v19 = v18;
    uint64_t v20 = *(void *)v140;
    do
    {
      uint64_t v21 = 0;
      do
      {
        if (*(void *)v140 != v20) {
          objc_enumerationMutation(v17);
        }
        -[GEOPDPlaceCollectionItem readAll:](*(void *)(*((void *)&v139 + 1) + 8 * v21++), 1);
      }
      while (v19 != v21);
      uint64_t v19 = [v17 countByEnumeratingWithState:&v139 objects:v168 count:16];
    }
    while (v19);
  }

  long long v137 = 0u;
  long long v138 = 0u;
  long long v135 = 0u;
  long long v136 = 0u;
  id v22 = *(id *)(a1 + 200);
  uint64_t v23 = [v22 countByEnumeratingWithState:&v135 objects:v167 count:16];
  if (v23)
  {
    uint64_t v24 = v23;
    uint64_t v25 = *(void *)v136;
    do
    {
      uint64_t v26 = 0;
      do
      {
        if (*(void *)v136 != v25) {
          objc_enumerationMutation(v22);
        }
        [*(id *)(*((void *)&v135 + 1) + 8 * v26++) readAll:1];
      }
      while (v24 != v26);
      uint64_t v24 = [v22 countByEnumeratingWithState:&v135 objects:v167 count:16];
    }
    while (v24);
  }

  long long v133 = 0u;
  long long v134 = 0u;
  long long v131 = 0u;
  long long v132 = 0u;
  id v27 = *(id *)(a1 + 112);
  uint64_t v28 = [v27 countByEnumeratingWithState:&v131 objects:v166 count:16];
  if (v28)
  {
    uint64_t v29 = v28;
    uint64_t v30 = *(void *)v132;
    do
    {
      uint64_t v31 = 0;
      do
      {
        if (*(void *)v132 != v30) {
          objc_enumerationMutation(v27);
        }
        [*(id *)(*((void *)&v131 + 1) + 8 * v31++) readAll:1];
      }
      while (v29 != v31);
      uint64_t v29 = [v27 countByEnumeratingWithState:&v131 objects:v166 count:16];
    }
    while (v29);
  }

  long long v129 = 0u;
  long long v130 = 0u;
  long long v127 = 0u;
  long long v128 = 0u;
  id v32 = *(id *)(a1 + 40);
  uint64_t v33 = [v32 countByEnumeratingWithState:&v127 objects:v165 count:16];
  if (v33)
  {
    uint64_t v34 = v33;
    uint64_t v35 = *(void *)v128;
    do
    {
      uint64_t v36 = 0;
      do
      {
        if (*(void *)v128 != v35) {
          objc_enumerationMutation(v32);
        }
        [*(id *)(*((void *)&v127 + 1) + 8 * v36++) readAll:1];
      }
      while (v34 != v36);
      uint64_t v34 = [v32 countByEnumeratingWithState:&v127 objects:v165 count:16];
    }
    while (v34);
  }

  long long v125 = 0u;
  long long v126 = 0u;
  long long v123 = 0u;
  long long v124 = 0u;
  id v37 = *(id *)(a1 + 48);
  uint64_t v38 = [v37 countByEnumeratingWithState:&v123 objects:v164 count:16];
  if (v38)
  {
    uint64_t v39 = v38;
    uint64_t v40 = *(void *)v124;
    do
    {
      uint64_t v41 = 0;
      do
      {
        if (*(void *)v124 != v40) {
          objc_enumerationMutation(v37);
        }
        [*(id *)(*((void *)&v123 + 1) + 8 * v41++) readAll:1];
      }
      while (v39 != v41);
      uint64_t v39 = [v37 countByEnumeratingWithState:&v123 objects:v164 count:16];
    }
    while (v39);
  }

  -[GEOPDPublisher readAll:](*(void *)(a1 + 192), 1);
  -[GEOPDCaptionedPhoto readAll:](*(void *)(a1 + 32), 1);
  long long v121 = 0u;
  long long v122 = 0u;
  long long v119 = 0u;
  long long v120 = 0u;
  id v42 = *(id *)(a1 + 56);
  uint64_t v43 = [v42 countByEnumeratingWithState:&v119 objects:v163 count:16];
  if (v43)
  {
    uint64_t v44 = v43;
    uint64_t v45 = *(void *)v120;
    do
    {
      uint64_t v46 = 0;
      do
      {
        if (*(void *)v120 != v45) {
          objc_enumerationMutation(v42);
        }
        [*(id *)(*((void *)&v119 + 1) + 8 * v46++) readAll:1];
      }
      while (v44 != v46);
      uint64_t v44 = [v42 countByEnumeratingWithState:&v119 objects:v163 count:16];
    }
    while (v44);
  }

  long long v117 = 0u;
  long long v118 = 0u;
  long long v115 = 0u;
  long long v116 = 0u;
  id v47 = *(id *)(a1 + 64);
  uint64_t v48 = [v47 countByEnumeratingWithState:&v115 objects:v162 count:16];
  if (v48)
  {
    uint64_t v49 = v48;
    uint64_t v50 = *(void *)v116;
    do
    {
      uint64_t v51 = 0;
      do
      {
        if (*(void *)v116 != v50) {
          objc_enumerationMutation(v47);
        }
        [*(id *)(*((void *)&v115 + 1) + 8 * v51++) readAll:1];
      }
      while (v49 != v51);
      uint64_t v49 = [v47 countByEnumeratingWithState:&v115 objects:v162 count:16];
    }
    while (v49);
  }

  long long v113 = 0u;
  long long v114 = 0u;
  long long v111 = 0u;
  long long v112 = 0u;
  id v52 = *(id *)(a1 + 96);
  uint64_t v53 = [v52 countByEnumeratingWithState:&v111 objects:v161 count:16];
  if (v53)
  {
    uint64_t v54 = v53;
    uint64_t v55 = *(void *)v112;
    do
    {
      uint64_t v56 = 0;
      do
      {
        if (*(void *)v112 != v55) {
          objc_enumerationMutation(v52);
        }
        [*(id *)(*((void *)&v111 + 1) + 8 * v56++) readAll:1];
      }
      while (v54 != v56);
      uint64_t v54 = [v52 countByEnumeratingWithState:&v111 objects:v161 count:16];
    }
    while (v54);
  }

  long long v109 = 0u;
  long long v110 = 0u;
  long long v107 = 0u;
  long long v108 = 0u;
  id v57 = *(id *)(a1 + 88);
  uint64_t v58 = [v57 countByEnumeratingWithState:&v107 objects:v160 count:16];
  if (v58)
  {
    uint64_t v59 = v58;
    uint64_t v60 = *(void *)v108;
    do
    {
      uint64_t v61 = 0;
      do
      {
        if (*(void *)v108 != v60) {
          objc_enumerationMutation(v57);
        }
        [*(id *)(*((void *)&v107 + 1) + 8 * v61++) readAll:1];
      }
      while (v59 != v61);
      uint64_t v59 = [v57 countByEnumeratingWithState:&v107 objects:v160 count:16];
    }
    while (v59);
  }

  long long v105 = 0u;
  long long v106 = 0u;
  long long v103 = 0u;
  long long v104 = 0u;
  id v62 = *(id *)(a1 + 144);
  uint64_t v63 = [v62 countByEnumeratingWithState:&v103 objects:v159 count:16];
  if (v63)
  {
    uint64_t v64 = v63;
    uint64_t v65 = *(void *)v104;
    do
    {
      uint64_t v66 = 0;
      do
      {
        if (*(void *)v104 != v65) {
          objc_enumerationMutation(v62);
        }
        [*(id *)(*((void *)&v103 + 1) + 8 * v66++) readAll:1];
      }
      while (v64 != v66);
      uint64_t v64 = [v62 countByEnumeratingWithState:&v103 objects:v159 count:16];
    }
    while (v64);
  }

  long long v101 = 0u;
  long long v102 = 0u;
  long long v99 = 0u;
  long long v100 = 0u;
  id v67 = *(id *)(a1 + 136);
  uint64_t v68 = [v67 countByEnumeratingWithState:&v99 objects:v158 count:16];
  if (v68)
  {
    uint64_t v69 = v68;
    uint64_t v70 = *(void *)v100;
    do
    {
      uint64_t v71 = 0;
      do
      {
        if (*(void *)v100 != v70) {
          objc_enumerationMutation(v67);
        }
        [*(id *)(*((void *)&v99 + 1) + 8 * v71++) readAll:1];
      }
      while (v69 != v71);
      uint64_t v69 = [v67 countByEnumeratingWithState:&v99 objects:v158 count:16];
    }
    while (v69);
  }

  long long v97 = 0u;
  long long v98 = 0u;
  long long v95 = 0u;
  long long v96 = 0u;
  id v72 = *(id *)(a1 + 152);
  uint64_t v73 = [v72 countByEnumeratingWithState:&v95 objects:v157 count:16];
  if (v73)
  {
    uint64_t v74 = v73;
    uint64_t v75 = *(void *)v96;
    do
    {
      uint64_t v76 = 0;
      do
      {
        if (*(void *)v96 != v75) {
          objc_enumerationMutation(v72);
        }
        -[GEOPDMediaLink readAll:](*(void *)(*((void *)&v95 + 1) + 8 * v76++), 1);
      }
      while (v74 != v76);
      uint64_t v74 = [v72 countByEnumeratingWithState:&v95 objects:v157 count:16];
    }
    while (v74);
  }

  long long v93 = 0u;
  long long v94 = 0u;
  long long v91 = 0u;
  long long v92 = 0u;
  id v77 = *(id *)(a1 + 120);
  uint64_t v78 = [v77 countByEnumeratingWithState:&v91 objects:v156 count:16];
  if (v78)
  {
    uint64_t v79 = v78;
    uint64_t v80 = *(void *)v92;
    do
    {
      uint64_t v81 = 0;
      do
      {
        if (*(void *)v92 != v80) {
          objc_enumerationMutation(v77);
        }
        -[GEOPDCaptionedPhoto readAll:](*(void *)(*((void *)&v91 + 1) + 8 * v81++), 1);
      }
      while (v79 != v81);
      uint64_t v79 = [v77 countByEnumeratingWithState:&v91 objects:v156 count:16];
    }
    while (v79);
  }

  long long v89 = 0u;
  long long v90 = 0u;
  long long v87 = 0u;
  long long v88 = 0u;
  id v82 = *(id *)(a1 + 128);
  uint64_t v83 = [v82 countByEnumeratingWithState:&v87 objects:v155 count:16];
  if (v83)
  {
    uint64_t v84 = v83;
    uint64_t v85 = *(void *)v88;
    do
    {
      uint64_t v86 = 0;
      do
      {
        if (*(void *)v88 != v85) {
          objc_enumerationMutation(v82);
        }
        objc_msgSend(*(id *)(*((void *)&v87 + 1) + 8 * v86++), "readAll:", 1, (void)v87);
      }
      while (v84 != v86);
      uint64_t v84 = [v82 countByEnumeratingWithState:&v87 objects:v155 count:16];
    }
    while (v84);
  }
}

void sub_188F123EC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOPDCaptionedPhotoCallReadAllRecursiveWithoutSynchronized(void *a1)
{
  -[GEOPDPhoto readAll:](a1[10], 1);
  -[GEOPDJoeColor readAll:](a1[7], 1);
  uint64_t v2 = a1[3];

  -[GEOPDAttribution readAll:](v2, 1);
}

void sub_188F12538(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F1261C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOPDPhotoCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  long long v5 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  id v1 = *(id *)(a1 + 32);
  uint64_t v2 = [v1 countByEnumeratingWithState:&v5 objects:v9 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v6;
    while (1)
    {
      if (*(void *)v6 != v4) {
        objc_enumerationMutation(v1);
      }
      if (!--v3)
      {
        uint64_t v3 = [v1 countByEnumeratingWithState:&v5 objects:v9 count:16];
        if (!v3) {
          break;
        }
      }
    }
  }
}

void sub_188F127CC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F128A4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F13050(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOPDEntityCallReadAllRecursiveWithoutSynchronized(id *a1)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  id v2 = a1[26];
  uint64_t v3 = [v2 countByEnumeratingWithState:&v44 objects:v52 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v45;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v45 != v5) {
          objc_enumerationMutation(v2);
        }
        [*(id *)(*((void *)&v44 + 1) + 8 * v6++) readAll:1];
      }
      while (v4 != v6);
      uint64_t v4 = [v2 countByEnumeratingWithState:&v44 objects:v52 count:16];
    }
    while (v4);
  }

  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  id v7 = a1[29];
  uint64_t v8 = [v7 countByEnumeratingWithState:&v40 objects:v51 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v41;
    do
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v41 != v10) {
          objc_enumerationMutation(v7);
        }
        [*(id *)(*((void *)&v40 + 1) + 8 * v11++) readAll:1];
      }
      while (v9 != v11);
      uint64_t v9 = [v7 countByEnumeratingWithState:&v40 objects:v51 count:16];
    }
    while (v9);
  }

  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  id v12 = a1[20];
  uint64_t v13 = [v12 countByEnumeratingWithState:&v36 objects:v50 count:16];
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = *(void *)v37;
    do
    {
      uint64_t v16 = 0;
      do
      {
        if (*(void *)v37 != v15) {
          objc_enumerationMutation(v12);
        }
        [*(id *)(*((void *)&v36 + 1) + 8 * v16++) readAll:1];
      }
      while (v14 != v16);
      uint64_t v14 = [v12 countByEnumeratingWithState:&v36 objects:v50 count:16];
    }
    while (v14);
  }

  [a1[27] readAll:1];
  [a1[28] readAll:1];
  [a1[30] readAll:1];
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  id v17 = a1[12];
  uint64_t v18 = [v17 countByEnumeratingWithState:&v32 objects:v49 count:16];
  if (v18)
  {
    uint64_t v19 = v18;
    uint64_t v20 = *(void *)v33;
    do
    {
      uint64_t v21 = 0;
      do
      {
        if (*(void *)v33 != v20) {
          objc_enumerationMutation(v17);
        }
        [*(id *)(*((void *)&v32 + 1) + 8 * v21++) readAll:1];
      }
      while (v19 != v21);
      uint64_t v19 = [v17 countByEnumeratingWithState:&v32 objects:v49 count:16];
    }
    while (v19);
  }

  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  id v22 = a1[24];
  uint64_t v23 = [v22 countByEnumeratingWithState:&v28 objects:v48 count:16];
  if (v23)
  {
    uint64_t v24 = v23;
    uint64_t v25 = *(void *)v29;
    do
    {
      uint64_t v26 = 0;
      do
      {
        if (*(void *)v29 != v25) {
          objc_enumerationMutation(v22);
        }
        objc_msgSend(*(id *)(*((void *)&v28 + 1) + 8 * v26++), "readAll:", 1, (void)v28);
      }
      while (v24 != v26);
      uint64_t v24 = [v22 countByEnumeratingWithState:&v28 objects:v48 count:16];
    }
    while (v24);
  }

  [a1[19] readAll:1];
  [a1[16] readAll:1];
  return [a1[32] readAll:1];
}

void sub_188F1358C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F136A0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F1389C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F13CC0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id GEOGetGEOFilePathsLog()
{
  if (qword_1EB29FD38 != -1) {
    dispatch_once(&qword_1EB29FD38, &__block_literal_global_258);
  }
  os_log_t v0 = (void *)qword_1EB29FD30;

  return v0;
}

id GEOGetGEOFilePathsLog_0()
{
  if (qword_1EB2A01C0 != -1) {
    dispatch_once(&qword_1EB2A01C0, &__block_literal_global_18);
  }
  os_log_t v0 = (void *)_MergedGlobals_290;

  return v0;
}

void GEOConfigRemoveDelegateListenerForKey(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  std::string v9[2] = __GEOConfigRemoveDelegateListenerForKey_block_invoke;
  void v9[3] = &unk_1E53E8600;
  uint64_t v11 = a1;
  uint64_t v12 = a2;
  id v10 = v5;
  uint64_t v6 = v9;
  uint64_t v7 = qword_1EB29FF28;
  id v8 = v5;
  if (v7 != -1) {
    dispatch_once(&qword_1EB29FF28, &__block_literal_global_128);
  }
  uint64_t v13 = MEMORY[0x1E4F143A8];
  uint64_t v14 = 3221225472;
  uint64_t v15 = ___withKeyListeners_block_invoke;
  uint64_t v16 = &unk_1E53DA028;
  id v17 = v6;
  geo_isolate_sync();
}

uint64_t GEOPBTransitLineReadSpecified(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 128));
  uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 124);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 120)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unsigned int v12 = *(_DWORD *)(a1 + 156);
  uint32x4_t v13 = (uint32x4_t)vdupq_n_s32(v12);
  v14.i64[0] = 0x100000001;
  v14.i64[1] = 0x100000001;
  unsigned int v15 = vaddvq_s32(vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v13, (uint32x4_t)xmmword_18A63ABA0), v14), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v13, (uint32x4_t)xmmword_18A63ABB0), v14)))+ ((v12 >> 15) & 1)+ ((v12 >> 7) & 1);
  while (2)
  {
    uint64_t v16 = 1;
    uint64_t v17 = 1;
    uint64_t v18 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v15;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v17 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v19 = v15 > 6;
        char v20 = v19 & ~(_BYTE)v11 | v9;
        unsigned __int8 v21 = v19 | v11;
        char v104 = v20;
        char v105 = v21 | v20;
        if ((v21 | v8)) {
          id v22 = 0;
        }
        else {
          id v22 = a3;
        }
        char v106 = (v22 == 0) | v21;
        BOOL v107 = v21;
        uint64_t v23 = (int *)MEMORY[0x1E4F940E8];
        uint64_t v24 = (int *)MEMORY[0x1E4F940C8];
        uint64_t v25 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v15;
LABEL_7:
        uint64_t v16 = v9;
LABEL_8:
        uint64_t v17 = v10;
        uint64_t v18 = v11;
LABEL_10:
        ++v7;
        uint64_t v9 = v16;
        uint64_t v10 = v17;
        uint64_t v11 = v18;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v23) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v24)) {
      goto LABEL_196;
    }
    char v26 = 0;
    unsigned int v27 = 0;
    unint64_t v28 = 0;
    while (1)
    {
      uint64_t v29 = *v23;
      uint64_t v30 = *(void *)(v3 + v29);
      unint64_t v31 = v30 + 1;
      if (v30 == -1 || v31 > *(void *)(v3 + *v6)) {
        break;
      }
      char v32 = *(unsigned char *)(*(void *)(v3 + *v25) + v30);
      *(void *)(v3 + v29) = v31;
      v28 |= (unint64_t)(v32 & 0x7F) << v26;
      if ((v32 & 0x80) == 0) {
        goto LABEL_25;
      }
      v26 += 7;
      BOOL v33 = v27++ >= 9;
      if (v33)
      {
        unint64_t v28 = 0;
        int v34 = *(unsigned __int8 *)(v3 + *v24);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v24) = 1;
LABEL_25:
    int v34 = *(unsigned __int8 *)(v3 + *v24);
    if (*(unsigned char *)(v3 + *v24)) {
      unint64_t v28 = 0;
    }
LABEL_27:
    if (v34 || (v28 & 7) == 4)
    {
LABEL_196:
      int v102 = 1;
      goto LABEL_197;
    }
    unint64_t v36 = v28 >> 3;
    BOOL v37 = v107;
    if ((v106 & 1) == 0)
    {
      long long v38 = v22;
      do
      {
        int v40 = *v38++;
        int v39 = v40;
        BOOL v37 = v40 != 0;
        if (v40) {
          BOOL v41 = v39 == v36;
        }
        else {
          BOOL v41 = 1;
        }
      }
      while (!v41);
    }
    switch((int)v36)
    {
      case 3:
        if (!v37) {
          goto LABEL_146;
        }
        if ((*(unsigned char *)(a1 + 157) & 4) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_225;
          }
          long long v42 = objc_alloc_init(GEOPBTransitArtwork);
          if (GEOPBTransitArtworkReadAllFrom((uint64_t)v42, (void *)v3, v10 & 1))
          {
            PBReaderRecallMark();
            uint64_t v43 = 56;
            goto LABEL_144;
          }
          goto LABEL_224;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_225;
        }
        int v96 = (int)(*(_DWORD *)(a1 + 156) << 21) >> 31;
        goto LABEL_188;
      case 4:
        if (!v37) {
          goto LABEL_146;
        }
        if ((*(unsigned char *)(a1 + 157) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_225;
          }
          int v96 = (int)(*(_DWORD *)(a1 + 156) << 17) >> 31;
          goto LABEL_188;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_225;
        }
        long long v42 = objc_alloc_init(GEOPBTransitArtwork);
        if (!GEOPBTransitArtworkReadAllFrom((uint64_t)v42, (void *)v3, v10 & 1)) {
          goto LABEL_224;
        }
        PBReaderRecallMark();
        uint64_t v43 = 88;
        goto LABEL_144;
      case 5:
      case 6:
      case 8:
      case 9:
      case 12:
      case 13:
      case 14:
      case 17:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
        goto LABEL_53;
      case 7:
        if ((v8 & 1) == 0) {
          goto LABEL_146;
        }
        char v54 = 0;
        unsigned int v55 = 0;
        uint64_t v56 = 0;
        *(_DWORD *)(a1 + 156) |= 1u;
        while (2)
        {
          uint64_t v57 = *v23;
          uint64_t v58 = *(void *)(v3 + v57);
          unint64_t v59 = v58 + 1;
          if (v58 == -1 || v59 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v24) = 1;
          }
          else
          {
            char v60 = *(unsigned char *)(*(void *)(v3 + *v25) + v58);
            *(void *)(v3 + v57) = v59;
            v56 |= (unint64_t)(v60 & 0x7F) << v54;
            if (v60 < 0)
            {
              v54 += 7;
              BOOL v33 = v55++ >= 9;
              if (v33)
              {
                uint64_t v56 = 0;
                goto LABEL_151;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v24)) {
          uint64_t v56 = 0;
        }
LABEL_151:
        *(void *)(a1 + 96) = v56;
        goto LABEL_195;
      case 10:
        if ((v8 & 1) == 0) {
          goto LABEL_146;
        }
        char v61 = 0;
        unsigned int v62 = 0;
        uint64_t v46 = 0;
        *(_DWORD *)(a1 + 156) |= 2u;
        while (2)
        {
          uint64_t v63 = *v23;
          uint64_t v64 = *(void *)(v3 + v63);
          unint64_t v65 = v64 + 1;
          if (v64 == -1 || v65 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v24) = 1;
          }
          else
          {
            char v66 = *(unsigned char *)(*(void *)(v3 + *v25) + v64);
            *(void *)(v3 + v63) = v65;
            v46 |= (unint64_t)(v66 & 0x7F) << v61;
            if (v66 < 0)
            {
              v61 += 7;
              BOOL v33 = v62++ >= 9;
              if (v33)
              {
                LODWORD(v46) = 0;
                goto LABEL_155;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v24)) {
          LODWORD(v46) = 0;
        }
LABEL_155:
        uint64_t v95 = 132;
        goto LABEL_194;
      case 11:
        if (!v37) {
          goto LABEL_146;
        }
        if ((*(unsigned char *)(a1 + 157) & 0x20) == 0)
        {
          uint64_t v67 = PBReaderReadString();
          uint64_t v68 = 80;
          goto LABEL_125;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_225;
        }
        int v96 = (int)(*(_DWORD *)(a1 + 156) << 18) >> 31;
        goto LABEL_188;
      case 15:
        if ((v8 & 1) == 0) {
          goto LABEL_146;
        }
        char v69 = 0;
        unsigned int v70 = 0;
        uint64_t v46 = 0;
        *(_DWORD *)(a1 + 156) |= 0x20u;
        while (2)
        {
          uint64_t v71 = *v23;
          uint64_t v72 = *(void *)(v3 + v71);
          unint64_t v73 = v72 + 1;
          if (v72 == -1 || v73 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v24) = 1;
          }
          else
          {
            char v74 = *(unsigned char *)(*(void *)(v3 + *v25) + v72);
            *(void *)(v3 + v71) = v73;
            v46 |= (unint64_t)(v74 & 0x7F) << v69;
            if (v74 < 0)
            {
              v69 += 7;
              BOOL v33 = v70++ >= 9;
              if (v33)
              {
                LODWORD(v46) = 0;
                goto LABEL_159;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v24)) {
          LODWORD(v46) = 0;
        }
LABEL_159:
        uint64_t v95 = 148;
        goto LABEL_194;
      case 16:
        if ((v8 & 1) == 0) {
          goto LABEL_146;
        }
        char v75 = 0;
        unsigned int v76 = 0;
        uint64_t v46 = 0;
        *(_DWORD *)(a1 + 156) |= 0x40u;
        while (2)
        {
          uint64_t v77 = *v23;
          uint64_t v78 = *(void *)(v3 + v77);
          unint64_t v79 = v78 + 1;
          if (v78 == -1 || v79 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v24) = 1;
          }
          else
          {
            char v80 = *(unsigned char *)(*(void *)(v3 + *v25) + v78);
            *(void *)(v3 + v77) = v79;
            v46 |= (unint64_t)(v80 & 0x7F) << v75;
            if (v80 < 0)
            {
              v75 += 7;
              BOOL v33 = v76++ >= 9;
              if (v33)
              {
                LODWORD(v46) = 0;
                goto LABEL_163;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v24)) {
          LODWORD(v46) = 0;
        }
LABEL_163:
        uint64_t v95 = 152;
        goto LABEL_194;
      case 18:
        if ((v8 & 1) == 0) {
          goto LABEL_146;
        }
        char v81 = 0;
        unsigned int v82 = 0;
        uint64_t v46 = 0;
        *(_DWORD *)(a1 + 156) |= 0x10u;
        while (2)
        {
          uint64_t v83 = *v23;
          uint64_t v84 = *(void *)(v3 + v83);
          unint64_t v85 = v84 + 1;
          if (v84 == -1 || v85 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v24) = 1;
          }
          else
          {
            char v86 = *(unsigned char *)(*(void *)(v3 + *v25) + v84);
            *(void *)(v3 + v83) = v85;
            v46 |= (unint64_t)(v86 & 0x7F) << v81;
            if (v86 < 0)
            {
              v81 += 7;
              BOOL v33 = v82++ >= 9;
              if (v33)
              {
                LODWORD(v46) = 0;
                goto LABEL_167;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v24)) {
          LODWORD(v46) = 0;
        }
LABEL_167:
        uint64_t v95 = 144;
        goto LABEL_194;
      case 25:
        if (!v37) {
          goto LABEL_146;
        }
        if (*(unsigned char *)(a1 + 158))
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_225;
          }
          int v96 = (int)(*(_DWORD *)(a1 + 156) << 15) >> 31;
          goto LABEL_188;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_225;
        }
        long long v42 = objc_alloc_init(GEOStyleAttributes);
        if (!GEOStyleAttributesReadAllFrom((uint64_t)v42, (void *)v3)) {
          goto LABEL_224;
        }
        PBReaderRecallMark();
        uint64_t v43 = 112;
        goto LABEL_144;
      case 26:
        if (!v37 || (*(unsigned char *)(a1 + 157) & 1) != 0) {
          goto LABEL_146;
        }
        if (!PBReaderPlaceMark()) {
          goto LABEL_225;
        }
        -[GEOPBTransitLine _reserveOperatingHours:](a1, 1uLL);
        if (!GEOPBTransitTimeRangeReadAllFrom(*(void *)(a1 + 24) + 12 * *(void *)(a1 + 32), v3)) {
          goto LABEL_225;
        }
        PBReaderRecallMark();
        ++*(void *)(a1 + 32);
        goto LABEL_189;
      case 27:
        if (!v37) {
          goto LABEL_146;
        }
        if ((*(unsigned char *)(a1 + 157) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_225;
          }
          int v96 = (int)(*(_DWORD *)(a1 + 156) << 20) >> 31;
          goto LABEL_188;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_225;
        }
        long long v42 = objc_alloc_init(GEOPBTransitLineDisplayHints);
        if (!GEOPBTransitLineDisplayHintsReadAllFrom((uint64_t)v42, (void *)v3)) {
          goto LABEL_224;
        }
        PBReaderRecallMark();
        uint64_t v43 = 64;
        goto LABEL_144;
      case 28:
        if (!v37) {
          goto LABEL_146;
        }
        if ((*(unsigned char *)(a1 + 157) & 0x80) == 0)
        {
          uint64_t v67 = PBReaderReadString();
          uint64_t v68 = 104;
LABEL_125:
          long long v87 = *(void **)(a1 + v68);
          *(void *)(a1 + v68) = v67;
          goto LABEL_145;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_225;
        }
        int v96 = (int)(*(_DWORD *)(a1 + 156) << 16) >> 31;
        goto LABEL_188;
      case 29:
        if ((v8 & 1) == 0) {
          goto LABEL_146;
        }
        char v88 = 0;
        unsigned int v89 = 0;
        uint64_t v46 = 0;
        *(_DWORD *)(a1 + 156) |= 8u;
        while (2)
        {
          uint64_t v90 = *v23;
          uint64_t v91 = *(void *)(v3 + v90);
          unint64_t v92 = v91 + 1;
          if (v91 == -1 || v92 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v24) = 1;
          }
          else
          {
            char v93 = *(unsigned char *)(*(void *)(v3 + *v25) + v91);
            *(void *)(v3 + v90) = v92;
            v46 |= (unint64_t)(v93 & 0x7F) << v88;
            if (v93 < 0)
            {
              v88 += 7;
              BOOL v33 = v89++ >= 9;
              if (v33)
              {
                LODWORD(v46) = 0;
                goto LABEL_171;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v24)) {
          LODWORD(v46) = 0;
        }
LABEL_171:
        uint64_t v95 = 140;
        goto LABEL_194;
      case 30:
        if (!v37) {
          goto LABEL_146;
        }
        if ((*(unsigned char *)(a1 + 157) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_225;
          }
          int v96 = (int)(*(_DWORD *)(a1 + 156) << 22) >> 31;
          goto LABEL_188;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_225;
        }
        long long v42 = objc_alloc_init(GEOPBTransitArtwork);
        if (!GEOPBTransitArtworkReadAllFrom((uint64_t)v42, (void *)v3, v10 & 1)) {
          goto LABEL_224;
        }
        PBReaderRecallMark();
        uint64_t v43 = 48;
        goto LABEL_144;
      case 31:
        if (!v37) {
          goto LABEL_146;
        }
        if ((*(unsigned char *)(a1 + 157) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_225;
          }
          int v96 = (int)(*(_DWORD *)(a1 + 156) << 19) >> 31;
LABEL_188:
          v7 += v96;
LABEL_189:
          uint64_t v24 = (int *)MEMORY[0x1E4F940C8];
          uint64_t v25 = (int *)MEMORY[0x1E4F940B8];
LABEL_195:
          if (!(v105 & 1 | (v7 != 0))) {
            goto LABEL_196;
          }
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_225;
        }
        long long v42 = objc_alloc_init(GEOPBTransitArtwork);
        if (GEOPBTransitArtworkReadAllFrom((uint64_t)v42, (void *)v3, v10 & 1))
        {
          PBReaderRecallMark();
          uint64_t v43 = 72;
LABEL_144:
          long long v87 = *(void **)(a1 + v43);
          *(void *)(a1 + v43) = v42;
LABEL_145:

          --v7;
          goto LABEL_189;
        }
LABEL_224:

LABEL_225:
        int v102 = 0;
        uint64_t v24 = (int *)MEMORY[0x1E4F940C8];
LABEL_197:
        long long v103 = &OBJC_IVAR___GEONonTiledAssets__flags;
        if (v104) {
LABEL_198:
        }
          *(_DWORD *)(a1 + v103[451]) |= 0x80u;
        if (v107 || (v102 & 1) == 0)
        {
          *(_DWORD *)(a1 + v103[451]) |= 0x400u;
          *(_DWORD *)(a1 + v103[451]) |= 0x4000u;
          *(_DWORD *)(a1 + v103[451]) |= 0x200u;
          *(_DWORD *)(a1 + v103[451]) |= 0x1000u;
          *(_DWORD *)(a1 + v103[451]) |= 0x2000u;
          *(_DWORD *)(a1 + v103[451]) |= 0x10000u;
          *(_DWORD *)(a1 + v103[451]) |= 0x100u;
          *(_DWORD *)(a1 + v103[451]) |= 0x800u;
          *(_DWORD *)(a1 + v103[451]) |= 0x8000u;
          goto LABEL_218;
        }
        if (v22)
        {
          while (1)
          {
            int v98 = *v22++;
            int v97 = v98;
            if (v98 > 10)
            {
              switch(v97)
              {
                case 25:
                  int v99 = 0x10000;
                  goto LABEL_216;
                case 26:
                  int v99 = 256;
                  goto LABEL_216;
                case 27:
                  int v99 = 2048;
                  goto LABEL_216;
                case 28:
                  int v99 = 0x8000;
                  goto LABEL_216;
                case 29:
                  continue;
                case 30:
                  int v99 = 512;
                  goto LABEL_216;
                case 31:
                  int v99 = 4096;
                  goto LABEL_216;
                default:
                  if (v97 != 11) {
                    continue;
                  }
                  int v99 = 0x2000;
                  break;
              }
              goto LABEL_216;
            }
            if (v97 == 3) {
              break;
            }
            if (v97 == 4)
            {
              int v99 = 0x4000;
LABEL_216:
              *(_DWORD *)(a1 + v103[451]) |= v99;
              continue;
            }
            if (!v97) {
              goto LABEL_218;
            }
          }
          int v99 = 1024;
          goto LABEL_216;
        }
LABEL_218:
        if (v102) {
          uint64_t v3 = *(unsigned char *)(v3 + *v24) == 0;
        }
        else {
          uint64_t v3 = 0;
        }
        if (v107)
        {
          long long v100 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      default:
        if (v36 == 2047)
        {
          if (v8)
          {
            char v44 = 0;
            unsigned int v45 = 0;
            uint64_t v46 = 0;
            *(_DWORD *)(a1 + 156) |= 4u;
            while (1)
            {
              uint64_t v47 = *v23;
              uint64_t v48 = *(void *)(v3 + v47);
              unint64_t v49 = v48 + 1;
              if (v48 == -1 || v49 > *(void *)(v3 + *v6)) {
                break;
              }
              char v50 = *(unsigned char *)(*(void *)(v3 + *v25) + v48);
              *(void *)(v3 + v47) = v49;
              v46 |= (unint64_t)(v50 & 0x7F) << v44;
              if ((v50 & 0x80) == 0) {
                goto LABEL_191;
              }
              v44 += 7;
              BOOL v33 = v45++ >= 9;
              if (v33)
              {
                LODWORD(v46) = 0;
                goto LABEL_193;
              }
            }
            *(unsigned char *)(v3 + *v24) = 1;
LABEL_191:
            if (*(unsigned char *)(v3 + *v24)) {
              LODWORD(v46) = 0;
            }
LABEL_193:
            uint64_t v95 = 136;
LABEL_194:
            *(_DWORD *)(a1 + v95) = v46;
            goto LABEL_195;
          }
LABEL_146:
          char v94 = PBReaderSkipValueWithTag();
          uint64_t v25 = (int *)MEMORY[0x1E4F940B8];
          uint64_t v24 = (int *)MEMORY[0x1E4F940C8];
          if ((v94 & 1) == 0)
          {
            int v102 = 0;
            goto LABEL_197;
          }
          goto LABEL_195;
        }
LABEL_53:
        if ((v104 & 1) == 0 || (*(unsigned char *)(a1 + 156) & 0x80) != 0) {
          goto LABEL_146;
        }
        if (!*(void *)(a1 + 16))
        {
          id v51 = objc_alloc_init(MEMORY[0x1E4F940B0]);
          id v52 = *(void **)(a1 + 16);
          *(void *)(a1 + 16) = v51;
        }
        int v53 = PBUnknownFieldAdd();
        uint64_t v24 = (int *)MEMORY[0x1E4F940C8];
        uint64_t v25 = (int *)MEMORY[0x1E4F940B8];
        if (!v53)
        {
          int v102 = 0;
          long long v103 = &OBJC_IVAR___GEONonTiledAssets__flags;
          goto LABEL_198;
        }
        goto LABEL_195;
    }
  }
}

uint64_t MurmurHash3_x64_128(uint64_t result, int a2, unsigned int a3, unint64_t *a4)
{
  uint64_t v4 = a3;
  if (a2 < 16)
  {
    uint64_t v7 = a3;
  }
  else
  {
    id v5 = (void *)(result + 8);
    uint64_t v6 = (a2 / 16);
    uint64_t v7 = v4;
    do
    {
      uint64_t v7 = 5
         * (__ROR8__((0x4CF5AD432745937FLL * ((0x88A129EA80000000 * *(v5 - 1)) | ((0x87C37B91114253D5 * *(v5 - 1)) >> 33))) ^ v7, 37)+ v4)+ 1390208809;
      uint64_t v4 = 5
         * (v7
          + __ROR8__((0x87C37B91114253D5* ((0x4E8B26FE00000000 * *v5) | ((unint64_t)(0x4CF5AD432745937FLL * *v5) >> 31))) ^ v4, 33))+ 944331445;
      v5 += 2;
      --v6;
    }
    while (v6);
  }
  unint64_t v8 = 0;
  unint64_t v9 = 0;
  unint64_t v10 = 0;
  unint64_t v11 = 0;
  unint64_t v12 = 0;
  unint64_t v13 = 0;
  unint64_t v14 = 0;
  unint64_t v15 = 0;
  unint64_t v16 = 0;
  unint64_t v17 = 0;
  unint64_t v18 = 0;
  unint64_t v19 = 0;
  unint64_t v20 = 0;
  unsigned __int8 v21 = (unsigned __int8 *)(result + 16 * (a2 / 16));
  switch(a2 & 0xF)
  {
    case 1:
      goto LABEL_21;
    case 2:
      goto LABEL_20;
    case 3:
      goto LABEL_19;
    case 4:
      goto LABEL_18;
    case 5:
      goto LABEL_17;
    case 6:
      goto LABEL_16;
    case 7:
      goto LABEL_15;
    case 8:
      goto LABEL_14;
    case 9:
      goto LABEL_13;
    case 0xA:
      goto LABEL_12;
    case 0xB:
      goto LABEL_11;
    case 0xC:
      goto LABEL_10;
    case 0xD:
      goto LABEL_9;
    case 0xE:
      goto LABEL_8;
    case 0xF:
      unint64_t v8 = (unint64_t)v21[14] << 48;
LABEL_8:
      unint64_t v9 = v8 | ((unint64_t)v21[13] << 40);
LABEL_9:
      unint64_t v10 = v9 ^ ((unint64_t)v21[12] << 32);
LABEL_10:
      unint64_t v11 = v10 ^ ((unint64_t)v21[11] << 24);
LABEL_11:
      unint64_t v12 = v11 ^ ((unint64_t)v21[10] << 16);
LABEL_12:
      unint64_t v13 = v12 ^ ((unint64_t)v21[9] << 8);
LABEL_13:
      v4 ^= 0x87C37B91114253D5
          * ((0x4E8B26FE00000000 * (v13 ^ v21[8])) | ((0x4CF5AD432745937FLL * (v13 ^ v21[8])) >> 31));
LABEL_14:
      unint64_t v14 = (unint64_t)v21[7] << 56;
LABEL_15:
      unint64_t v15 = v14 | ((unint64_t)v21[6] << 48);
LABEL_16:
      unint64_t v16 = v15 ^ ((unint64_t)v21[5] << 40);
LABEL_17:
      unint64_t v17 = v16 ^ ((unint64_t)v21[4] << 32);
LABEL_18:
      unint64_t v18 = v17 ^ ((unint64_t)v21[3] << 24);
LABEL_19:
      unint64_t v19 = v18 ^ ((unint64_t)v21[2] << 16);
LABEL_20:
      unint64_t v20 = v19 ^ ((unint64_t)v21[1] << 8);
LABEL_21:
      v7 ^= 0x4CF5AD432745937FLL
          * ((0x88A129EA80000000 * (v20 ^ *v21)) | ((0x87C37B91114253D5 * (v20 ^ *v21)) >> 33));
      break;
    default:
      break;
  }
  uint64_t v22 = v4 ^ a2;
  unint64_t v23 = v22 + (v7 ^ a2);
  unint64_t v24 = v23 + v22;
  unint64_t v25 = 0xC4CEB9FE1A85EC53
      * ((0xFF51AFD7ED558CCDLL * (v23 ^ (v23 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v23 ^ (v23 >> 33))) >> 33));
  unint64_t v26 = 0xC4CEB9FE1A85EC53
      * ((0xFF51AFD7ED558CCDLL * (v24 ^ (v24 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v24 ^ (v24 >> 33))) >> 33));
  unint64_t v27 = v26 ^ (v26 >> 33);
  unint64_t v28 = v27 + (v25 ^ (v25 >> 33));
  *a4 = v28;
  a4[1] = v28 + v27;
  return result;
}

void ___initKeyChangeListeners_block_invoke_3(uint64_t a1, void *a2)
{
  id v9 = [a2 userInfo];
  id v2 = [v9 objectForKeyedSubscript:@"DeviceCountryCode"];
  if (([v2 isEqualToString:qword_1EB29FEE8] & 1) == 0)
  {
    uint64_t v3 = _getValue(GeoServicesConfig_CountryProviders, (uint64_t)off_1E9113978, 1, 0, 0, 0);
    if (![v3 count])
    {
LABEL_9:

      goto LABEL_10;
    }
    if (qword_1EB29FEE8)
    {
      uint64_t v4 = objc_msgSend(v3, "objectForKeyedSubscript:");
      if (v2)
      {
LABEL_5:
        id v5 = [v3 objectForKeyedSubscript:v2];
LABEL_8:
        uint64_t v6 = GEOCalculateChangedKeys(v4, v5, 0);
        uint64_t v7 = [v2 copy];
        unint64_t v8 = (void *)qword_1EB29FEE8;
        qword_1EB29FEE8 = v7;

        _notifyListenersOfKeyChange(v6);
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v4 = (void *)MEMORY[0x1E4F1CC08];
      if (v2) {
        goto LABEL_5;
      }
    }
    id v5 = (void *)MEMORY[0x1E4F1CC08];
    goto LABEL_8;
  }
LABEL_10:
}

void sub_188F15AC8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F15C30(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F168C0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F16E34(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F17CE8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F17FE8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F183CC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F187AC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F188B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188F18CF4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F18E10(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F19008(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F193F0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F19548(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F19618(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F196E8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F1A3B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_188F1AE80(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F1B34C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_188F1B42C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188F1B800(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F1BBF8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F1BD3C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id GEOResourceManifestPath(void *a1)
{
  id v1 = GEOResourceCachesDirectory(a1);
  id v2 = [v1 stringByAppendingPathComponent:@"ResourceManifest.pbd"];

  return v2;
}

void _GEORequestResponseLogError(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  if (GEOConfigGetBOOL(GeoServicesConfig_MapsRequestResponseLoggingPersisted, (uint64_t)off_1E9113ED8))
  {
    uint64_t v6 = _GEORequestResponseLogQueue();
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    void v7[2] = ___GEORequestResponseLogError_block_invoke;
    v7[3] = &unk_1E53D8998;
    id v8 = v5;
    id v9 = v4;
    dispatch_async(v6, v7);
  }
}

void GEOOnce(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  if (!*(unsigned char *)(a1 + 4))
  {
    *(unsigned char *)(a1 + 4) = 1;
    v3[2]();
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

void sub_188F1DBE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_188F1DCDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t GEOMapServiceTraitsReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 612))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOMapServiceTraitsReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)unint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 616));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 608) = [v8 position];
  *(_DWORD *)(a1 + 612) = [v8 length];
  if (a3) {
    id v9 = (int *)&GEOMapServiceTraitsReadAllFrom_recursiveTag;
  }
  else {
    id v9 = (int *)&GEOMapServiceTraitsReadAllFrom_initialTag;
  }
  uint64_t Specified = GEOMapServiceTraitsReadSpecified(a1, (uint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOMapServiceTraitsCallReadAllRecursiveWithoutSynchronized(a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 616));
  return Specified;
}

void sub_188F1DF00(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPTransitPoiFeedbackIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  id v2 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v3 = (int *)MEMORY[0x1E4F940E0];
  id v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    id v5 = (int *)MEMORY[0x1E4F940B8];
    while (!a1[*v4])
    {
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        break;
      }
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0) {
            goto LABEL_57;
          }
          unsigned int v17 = 0;
          do
          {
            uint64_t v18 = *v2;
            uint64_t v19 = *(void *)&a1[v18];
            unint64_t v20 = v19 + 1;
            if (v19 == -1 || v20 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
              goto LABEL_53;
            }
            int v21 = *(char *)(*(void *)&a1[*v5] + v19);
            *(void *)&a1[v18] = v20;
            if ((v21 & 0x80000000) == 0) {
              break;
            }
          }
          while (v17++ <= 8);
          goto LABEL_53;
        case 2u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEORPTransitPoiCorrectionsIsValid(a1)) {
            goto LABEL_57;
          }
          goto LABEL_52;
        case 3u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDPlaceIsValid(a1)) {
            goto LABEL_57;
          }
          goto LABEL_52;
        case 4u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEORPTransitLineTileInfoIsValid(a1)) {
            goto LABEL_57;
          }
          goto LABEL_52;
        case 5u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDPlaceRequestIsValid(a1)) {
            goto LABEL_57;
          }
          goto LABEL_52;
        case 6u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEODirectionsRequestIsValid(a1)) {
            goto LABEL_57;
          }
          goto LABEL_52;
        case 7u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEODirectionsResponseIsValid(a1)) {
            goto LABEL_57;
          }
LABEL_52:
          PBReaderRecallMark();
          goto LABEL_53;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_57:
            PBReaderRecallMark();
            return 0;
          }
LABEL_53:
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
            goto LABEL_56;
          }
          break;
      }
    }
  }
LABEL_56:
  BOOL v23 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v23;
}

BOOL GEODirectionsRequestIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  id v2 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v3 = (int *)MEMORY[0x1E4F940E0];
  id v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    id v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          uint64_t v14 = *v4;
          int v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      uint64_t v14 = *v4;
      int v15 = a1[v14];
      if (a1[v14]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v16 = v8 & 7;
      if (v15 || v16 == 4) {
        break;
      }
      unint64_t v18 = v8 >> 3;
      switch((v8 >> 3))
      {
        case 1u:
          if (v16 == 2 && PBReaderPlaceMark() && GEORouteAttributesIsValid(a1)) {
            goto LABEL_185;
          }
          goto LABEL_203;
        case 2u:
        case 0xBu:
        case 0xCu:
        case 0xDu:
        case 0xEu:
        case 0xFu:
        case 0x11u:
        case 0x29u:
          goto LABEL_189;
        case 3u:
          if ((v8 & 7) != 0) {
            goto LABEL_203;
          }
          unsigned int v22 = 0;
          while (1)
          {
            uint64_t v23 = *v2;
            uint64_t v24 = *(void *)&a1[v23];
            unint64_t v25 = v24 + 1;
            if (v24 == -1 || v25 > *(void *)&a1[*v3]) {
              goto LABEL_166;
            }
            int v26 = *(char *)(*(void *)&a1[*v5] + v24);
            *(void *)&a1[v23] = v25;
            if (v26 < 0)
            {
              BOOL v27 = v22++ > 8;
              if (!v27) {
                continue;
              }
            }
            goto LABEL_190;
          }
        case 4u:
        case 0x1Du:
        case 0x20u:
          if (v16 != 2 || !PBReaderPlaceMark() || (GEOLocationIsValid(a1) & 1) == 0) {
            goto LABEL_203;
          }
          goto LABEL_185;
        case 5u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOMapRegionIsValid(a1)) {
            goto LABEL_203;
          }
          goto LABEL_185;
        case 6u:
          if (v16 == 2) {
            goto LABEL_189;
          }
          goto LABEL_203;
        case 7u:
          if (v16 == 2) {
            goto LABEL_189;
          }
          goto LABEL_203;
        case 8u:
          if ((v8 & 7) != 0) {
            goto LABEL_203;
          }
          unsigned int v28 = 0;
          while (1)
          {
            uint64_t v29 = *v2;
            uint64_t v30 = *(void *)&a1[v29];
            unint64_t v31 = v30 + 1;
            if (v30 == -1 || v31 > *(void *)&a1[*v3]) {
              goto LABEL_166;
            }
            int v32 = *(char *)(*(void *)&a1[*v5] + v30);
            *(void *)&a1[v29] = v31;
            if (v32 < 0)
            {
              BOOL v27 = v28++ > 8;
              if (!v27) {
                continue;
              }
            }
            goto LABEL_190;
          }
        case 9u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOClientCapabilitiesIsValid(a1)) {
            goto LABEL_203;
          }
          goto LABEL_185;
        case 0xAu:
          if (v16 == 2) {
            goto LABEL_189;
          }
          goto LABEL_203;
        case 0x10u:
          if (v16 != 5) {
            goto LABEL_203;
          }
          uint64_t v19 = *v2;
          unint64_t v33 = *(void *)&a1[v19];
          if (v33 > 0xFFFFFFFFFFFFFFFBLL) {
            goto LABEL_167;
          }
          unint64_t v21 = v33 + 4;
          goto LABEL_148;
        case 0x12u:
          if ((v8 & 7) != 0) {
            goto LABEL_203;
          }
          unsigned int v34 = 0;
          while (1)
          {
            uint64_t v35 = *v2;
            uint64_t v36 = *(void *)&a1[v35];
            unint64_t v37 = v36 + 1;
            if (v36 == -1 || v37 > *(void *)&a1[*v3]) {
              goto LABEL_166;
            }
            int v38 = *(char *)(*(void *)&a1[*v5] + v36);
            *(void *)&a1[v35] = v37;
            if (v38 < 0)
            {
              BOOL v27 = v34++ > 8;
              if (!v27) {
                continue;
              }
            }
            goto LABEL_190;
          }
        case 0x13u:
          if (v16 != 2 || !PBReaderPlaceMark() || (GEOSessionIDIsValid(a1) & 1) == 0) {
            goto LABEL_203;
          }
          goto LABEL_185;
        case 0x14u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEODirectionsRequestFeedbackIsValid(a1)) {
            goto LABEL_203;
          }
          goto LABEL_185;
        case 0x15u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOAdditionalEnabledMarketsIsValid(a1)) {
            goto LABEL_203;
          }
          goto LABEL_185;
        case 0x16u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOWaypointTypedIsValid(a1)) {
            goto LABEL_203;
          }
          goto LABEL_185;
        case 0x17u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOOriginalRouteIsValid(a1)) {
            goto LABEL_203;
          }
          goto LABEL_185;
        case 0x18u:
          if ((v8 & 7) != 0) {
            goto LABEL_203;
          }
          unsigned int v39 = 0;
          while (1)
          {
            uint64_t v40 = *v2;
            uint64_t v41 = *(void *)&a1[v40];
            unint64_t v42 = v41 + 1;
            if (v41 == -1 || v42 > *(void *)&a1[*v3]) {
              goto LABEL_166;
            }
            int v43 = *(char *)(*(void *)&a1[*v5] + v41);
            *(void *)&a1[v40] = v42;
            if (v43 < 0)
            {
              BOOL v27 = v39++ > 8;
              if (!v27) {
                continue;
              }
            }
            goto LABEL_190;
          }
        case 0x19u:
          if (v16 == 2) {
            goto LABEL_189;
          }
          goto LABEL_203;
        case 0x1Au:
          if ((v8 & 7) != 0) {
            goto LABEL_203;
          }
          unsigned int v44 = 0;
          while (1)
          {
            uint64_t v45 = *v2;
            uint64_t v46 = *(void *)&a1[v45];
            unint64_t v47 = v46 + 1;
            if (v46 == -1 || v47 > *(void *)&a1[*v3]) {
              goto LABEL_166;
            }
            int v48 = *(char *)(*(void *)&a1[*v5] + v46);
            *(void *)&a1[v45] = v47;
            if (v48 < 0)
            {
              BOOL v27 = v44++ > 8;
              if (!v27) {
                continue;
              }
            }
            goto LABEL_190;
          }
        case 0x1Bu:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOCommonOptionsIsValid(a1)) {
            goto LABEL_203;
          }
          goto LABEL_185;
        case 0x1Cu:
          if (v16 == 2) {
            goto LABEL_189;
          }
          goto LABEL_203;
        case 0x1Eu:
          if ((v8 & 7) != 0) {
            goto LABEL_203;
          }
          unsigned int v49 = 0;
          while (1)
          {
            uint64_t v50 = *v2;
            uint64_t v51 = *(void *)&a1[v50];
            unint64_t v52 = v51 + 1;
            if (v51 == -1 || v52 > *(void *)&a1[*v3]) {
              goto LABEL_166;
            }
            int v53 = *(char *)(*(void *)&a1[*v5] + v51);
            *(void *)&a1[v50] = v52;
            if (v53 < 0)
            {
              BOOL v27 = v49++ > 8;
              if (!v27) {
                continue;
              }
            }
            goto LABEL_190;
          }
        case 0x1Fu:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOPDABClientDatasetMetadataIsValid(a1)) {
            goto LABEL_203;
          }
          goto LABEL_185;
        case 0x21u:
          if ((v8 & 7) != 0) {
            goto LABEL_203;
          }
          unsigned int v54 = 0;
          while (1)
          {
            uint64_t v55 = *v2;
            uint64_t v56 = *(void *)&a1[v55];
            unint64_t v57 = v56 + 1;
            if (v56 == -1 || v57 > *(void *)&a1[*v3]) {
              goto LABEL_166;
            }
            int v58 = *(char *)(*(void *)&a1[*v5] + v56);
            *(void *)&a1[v55] = v57;
            if (v58 < 0)
            {
              BOOL v27 = v54++ > 8;
              if (!v27) {
                continue;
              }
            }
            goto LABEL_190;
          }
        case 0x22u:
          if (v16 == 2) {
            goto LABEL_189;
          }
          goto LABEL_203;
        case 0x23u:
          if (v16 != 1) {
            goto LABEL_203;
          }
          uint64_t v19 = *v2;
          unint64_t v59 = *(void *)&a1[v19];
          if (v59 > 0xFFFFFFFFFFFFFFF7) {
            goto LABEL_167;
          }
          unint64_t v21 = v59 + 8;
LABEL_148:
          if (v21 > *(void *)&a1[*v3]) {
            goto LABEL_167;
          }
LABEL_149:
          *(void *)&a1[v19] = v21;
          continue;
        case 0x24u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOStopStepEVInfoIsValid(a1)) {
            goto LABEL_203;
          }
          goto LABEL_185;
        case 0x25u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOOriginalWaypointRouteIsValid(a1)) {
            goto LABEL_203;
          }
          goto LABEL_185;
        case 0x26u:
          if ((v8 & 7) != 0) {
            goto LABEL_203;
          }
          unsigned int v60 = 0;
          while (1)
          {
            uint64_t v61 = *v2;
            uint64_t v62 = *(void *)&a1[v61];
            unint64_t v63 = v62 + 1;
            if (v62 == -1 || v63 > *(void *)&a1[*v3]) {
              break;
            }
            int v64 = *(char *)(*(void *)&a1[*v5] + v62);
            *(void *)&a1[v61] = v63;
            if (v64 < 0)
            {
              BOOL v27 = v60++ > 8;
              if (!v27) {
                continue;
              }
            }
            goto LABEL_190;
          }
LABEL_166:
          uint64_t v14 = *v4;
LABEL_167:
          a1[v14] = 1;
          continue;
        case 0x27u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEORecentLocationHistoryIsValid(a1)) {
            goto LABEL_203;
          }
          goto LABEL_185;
        case 0x28u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOPrivacyMetadataIsValid(a1)) {
            goto LABEL_203;
          }
          goto LABEL_185;
        case 0x2Au:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOTripInfoIsValid(a1)) {
            goto LABEL_203;
          }
          goto LABEL_185;
        case 0x2Bu:
          if (v16 != 2) {
            goto LABEL_203;
          }
LABEL_189:
          if (PBReaderSkipValueWithTag()) {
            continue;
          }
LABEL_203:
          PBReaderRecallMark();
          return 0;
        case 0x2Cu:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOClientFeedbackInfoIsValid(a1)) {
            goto LABEL_203;
          }
LABEL_185:
          PBReaderRecallMark();
          continue;
        default:
          switch((int)v18)
          {
            case 'd':
              if (v16 != 2 || !PBReaderPlaceMark() || (GEOGeoServiceTagIsValid(a1) & 1) == 0) {
                goto LABEL_203;
              }
              goto LABEL_185;
            case 'e':
              if (v16 == 2) {
                goto LABEL_189;
              }
              goto LABEL_203;
            case 'f':
              if (v16 == 2) {
                goto LABEL_189;
              }
              goto LABEL_203;
            case 'g':
              if ((v8 & 7) != 0) {
                goto LABEL_203;
              }
              unsigned int v65 = 0;
              break;
            default:
              if (v18 != 1025) {
                goto LABEL_189;
              }
              if (v16 != 1) {
                goto LABEL_203;
              }
              uint64_t v19 = *v2;
              unint64_t v20 = *(void *)&a1[v19];
              if (v20 > 0xFFFFFFFFFFFFFFF7) {
                goto LABEL_201;
              }
              unint64_t v21 = v20 + 8;
              if (v21 > *(void *)&a1[*v3]) {
                goto LABEL_201;
              }
              goto LABEL_149;
          }
          break;
      }
      while (1)
      {
        uint64_t v66 = *v2;
        uint64_t v67 = *(void *)&a1[v66];
        unint64_t v68 = v67 + 1;
        if (v67 == -1 || v68 > *(void *)&a1[*v3]) {
          break;
        }
        int v69 = *(char *)(*(void *)&a1[*v5] + v67);
        *(void *)&a1[v66] = v68;
        if (v69 < 0)
        {
          BOOL v27 = v65++ > 8;
          if (!v27) {
            continue;
          }
        }
        goto LABEL_190;
      }
      uint64_t v14 = *v4;
LABEL_201:
      a1[v14] = 1;
LABEL_190:
      ;
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v70 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v70;
}

void sub_188F1F328(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F1F3FC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void ___setDefaultArray_block_invoke_2(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  unsigned int v7 = NSString;
  id v8 = a2;
  objc_msgSend(v7, "stringWithFormat:", @"%u", a3);
  id v13 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v9 = [*(id *)(a1 + 32) arrayByAddingObject:v13];
  char v10 = _setDefault(*(void *)(a1 + 40), v8, v9);

  uint64_t v11 = *(void *)(*(void *)(a1 + 48) + 8);
  if (*(unsigned char *)(v11 + 24)) {
    char v12 = v10;
  }
  else {
    char v12 = 0;
  }
  *(unsigned char *)(v11 + 24) = v12;
  *a4 = *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) ^ 1;
}

unint64_t GEOPDAllCollectionsViewParametersReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 52))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOPDAllCollectionsViewParametersReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)char v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = [v8 position];
  *(_DWORD *)(a1 + 52) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOPDAllCollectionsViewParametersReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOPDAllCollectionsViewParametersReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOPDAllCollectionsViewParametersReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
  {
    -[GEOPDAllCollectionsViewResultFilter readAll:](*(void *)(a1 + 32), 1);
    [*(id *)(a1 + 40) readAll:1];
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return Specified;
}

void sub_188F1F7F8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F1FAF0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOGuidanceEventFeedbackReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  char v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 60);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 56)];
  uint64_t v7 = 0;
  char v8 = 0;
  char v9 = 0;
  unsigned int v10 = (unsigned __int16)(vaddv_s16((int16x4_t)(*(void *)&vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int16 *)(a1 + 100)), (uint16x4_t)0xFFF8FFF5FFF7FFF6) & 0xFF01FF01FF01FF01))+ ((*(_WORD *)(a1 + 100) >> 12) & 1));
  while (1)
  {
    unsigned int v11 = a3[v7];
    if (v11 >= 0xFFFFFFFE)
    {
      char v9 = 1;
      goto LABEL_9;
    }
    if (v11 != -3) {
      break;
    }
    char v8 = 1;
LABEL_9:
    ++v7;
  }
  if (v11)
  {
    ++v10;
    goto LABEL_9;
  }
  char v12 = v9 | (v10 > 3);
  if (v9 & 1 | (v10 > 3) | v8 & 1) {
    id v13 = 0;
  }
  else {
    id v13 = a3;
  }
  uint64_t v14 = (int *)MEMORY[0x1E4F940E8];
  int v15 = (int *)MEMORY[0x1E4F940C8];
  int v16 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(void *)(v3 + *v14) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v15)) {
      goto LABEL_154;
    }
    char v17 = 0;
    unsigned int v18 = 0;
    unint64_t v19 = 0;
    while (1)
    {
      uint64_t v20 = *v14;
      uint64_t v21 = *(void *)(v3 + v20);
      unint64_t v22 = v21 + 1;
      if (v21 == -1 || v22 > *(void *)(v3 + *v6)) {
        break;
      }
      char v23 = *(unsigned char *)(*(void *)(v3 + *v16) + v21);
      *(void *)(v3 + v20) = v22;
      v19 |= (unint64_t)(v23 & 0x7F) << v17;
      if ((v23 & 0x80) == 0) {
        goto LABEL_24;
      }
      v17 += 7;
      BOOL v24 = v18++ >= 9;
      if (v24)
      {
        unint64_t v19 = 0;
        int v25 = *(unsigned __int8 *)(v3 + *v15);
        goto LABEL_26;
      }
    }
    *(unsigned char *)(v3 + *v15) = 1;
LABEL_24:
    int v25 = *(unsigned __int8 *)(v3 + *v15);
    if (*(unsigned char *)(v3 + *v15)) {
      unint64_t v19 = 0;
    }
LABEL_26:
    if (v25 || (v19 & 7) == 4)
    {
LABEL_154:
      if (v12)
      {
        char v75 = 1;
        goto LABEL_156;
      }
      if (v13)
      {
        while (1)
        {
          int v76 = *v13++;
          __int16 v77 = 512;
          switch(v76)
          {
            case 0:
              goto LABEL_166;
            case 1:
              goto LABEL_165;
            case 10:
              __int16 v77 = 1024;
              goto LABEL_165;
            case 11:
              __int16 v77 = 2048;
              goto LABEL_165;
            case 12:
              __int16 v77 = 256;
              goto LABEL_165;
            case 13:
              __int16 v77 = 4096;
LABEL_165:
              *(_WORD *)(a1 + 100) |= v77;
              break;
            default:
              continue;
          }
        }
      }
LABEL_166:
      unint64_t v3 = *(unsigned char *)(v3 + *v15) == 0;
      if (v12) {
        goto LABEL_167;
      }
      return v3;
    }
    unint64_t v27 = v19 >> 3;
    BOOL v28 = v12;
    if (!((v13 == 0) | v12 & 1))
    {
      uint64_t v29 = v13;
      do
      {
        int v31 = *v29++;
        int v30 = v31;
        BOOL v28 = v31 != 0;
        if (v31) {
          BOOL v32 = v30 == v27;
        }
        else {
          BOOL v32 = 1;
        }
      }
      while (!v32);
    }
    switch((int)v27)
    {
      case 1:
        if (!v28) {
          goto LABEL_113;
        }
        if ((*(_WORD *)(a1 + 100) & 0x200) == 0)
        {
          uint64_t v33 = PBReaderReadData();
          unsigned int v34 = *(void **)(a1 + 24);
          *(void *)(a1 + 24) = v33;
          goto LABEL_112;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_171;
        }
        __int16 v73 = *(_WORD *)(a1 + 100) << 6;
        goto LABEL_142;
      case 2:
        if ((v8 & 1) == 0) {
          goto LABEL_113;
        }
        char v36 = 0;
        unsigned int v37 = 0;
        uint64_t v38 = 0;
        *(_WORD *)(a1 + 100) |= 0x10u;
        while (2)
        {
          uint64_t v39 = *v14;
          uint64_t v40 = *(void *)(v3 + v39);
          unint64_t v41 = v40 + 1;
          if (v40 == -1 || v41 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v15) = 1;
          }
          else
          {
            char v42 = *(unsigned char *)(*(void *)(v3 + *v16) + v40);
            *(void *)(v3 + v39) = v41;
            v38 |= (unint64_t)(v42 & 0x7F) << v36;
            if (v42 < 0)
            {
              v36 += 7;
              BOOL v24 = v37++ >= 9;
              if (v24)
              {
                LODWORD(v38) = 0;
                goto LABEL_118;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v15)) {
          LODWORD(v38) = 0;
        }
LABEL_118:
        uint64_t v72 = 84;
        goto LABEL_131;
      case 3:
        if ((v8 & 1) == 0) {
          goto LABEL_113;
        }
        char v43 = 0;
        unsigned int v44 = 0;
        uint64_t v38 = 0;
        *(_WORD *)(a1 + 100) |= 4u;
        while (2)
        {
          uint64_t v45 = *v14;
          uint64_t v46 = *(void *)(v3 + v45);
          unint64_t v47 = v46 + 1;
          if (v46 == -1 || v47 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v15) = 1;
          }
          else
          {
            char v48 = *(unsigned char *)(*(void *)(v3 + *v16) + v46);
            *(void *)(v3 + v45) = v47;
            v38 |= (unint64_t)(v48 & 0x7F) << v43;
            if (v48 < 0)
            {
              v43 += 7;
              BOOL v24 = v44++ >= 9;
              if (v24)
              {
                LODWORD(v38) = 0;
                goto LABEL_122;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v15)) {
          LODWORD(v38) = 0;
        }
LABEL_122:
        uint64_t v72 = 76;
        goto LABEL_131;
      case 4:
        if ((v8 & 1) == 0) {
          goto LABEL_113;
        }
        char v49 = 0;
        unsigned int v50 = 0;
        uint64_t v38 = 0;
        *(_WORD *)(a1 + 100) |= 8u;
        while (2)
        {
          uint64_t v51 = *v14;
          uint64_t v52 = *(void *)(v3 + v51);
          unint64_t v53 = v52 + 1;
          if (v52 == -1 || v53 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v15) = 1;
          }
          else
          {
            char v54 = *(unsigned char *)(*(void *)(v3 + *v16) + v52);
            *(void *)(v3 + v51) = v53;
            v38 |= (unint64_t)(v54 & 0x7F) << v49;
            if (v54 < 0)
            {
              v49 += 7;
              BOOL v24 = v50++ >= 9;
              if (v24)
              {
                LODWORD(v38) = 0;
                goto LABEL_126;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v15)) {
          LODWORD(v38) = 0;
        }
LABEL_126:
        uint64_t v72 = 80;
        goto LABEL_131;
      case 5:
        if ((v8 & 1) == 0) {
          goto LABEL_113;
        }
        *(_WORD *)(a1 + 100) |= 1u;
        uint64_t v55 = *v14;
        unint64_t v56 = *(void *)(v3 + v55);
        if (v56 <= 0xFFFFFFFFFFFFFFFBLL && v56 + 4 <= *(void *)(v3 + *v6))
        {
          int v57 = *(_DWORD *)(*(void *)(v3 + *v16) + v56);
          *(void *)(v3 + v55) = v56 + 4;
        }
        else
        {
          *(unsigned char *)(v3 + *v15) = 1;
          int v57 = 0;
        }
        uint64_t v74 = 68;
        goto LABEL_152;
      case 6:
        if ((v8 & 1) == 0) {
          goto LABEL_113;
        }
        *(_WORD *)(a1 + 100) |= 0x20u;
        uint64_t v58 = *v14;
        unint64_t v59 = *(void *)(v3 + v58);
        if (v59 <= 0xFFFFFFFFFFFFFFFBLL && v59 + 4 <= *(void *)(v3 + *v6))
        {
          int v57 = *(_DWORD *)(*(void *)(v3 + *v16) + v59);
          *(void *)(v3 + v58) = v59 + 4;
        }
        else
        {
          *(unsigned char *)(v3 + *v15) = 1;
          int v57 = 0;
        }
        uint64_t v74 = 88;
        goto LABEL_152;
      case 7:
        if ((v8 & 1) == 0) {
          goto LABEL_113;
        }
        *(_WORD *)(a1 + 100) |= 0x80u;
        uint64_t v60 = *v14;
        unint64_t v61 = *(void *)(v3 + v60);
        if (v61 <= 0xFFFFFFFFFFFFFFFBLL && v61 + 4 <= *(void *)(v3 + *v6))
        {
          int v57 = *(_DWORD *)(*(void *)(v3 + *v16) + v61);
          *(void *)(v3 + v60) = v61 + 4;
        }
        else
        {
          *(unsigned char *)(v3 + *v15) = 1;
          int v57 = 0;
        }
        uint64_t v74 = 96;
        goto LABEL_152;
      case 8:
        if ((v8 & 1) == 0) {
          goto LABEL_113;
        }
        char v62 = 0;
        unsigned int v63 = 0;
        uint64_t v38 = 0;
        *(_WORD *)(a1 + 100) |= 0x40u;
        while (2)
        {
          uint64_t v64 = *v14;
          uint64_t v65 = *(void *)(v3 + v64);
          unint64_t v66 = v65 + 1;
          if (v65 == -1 || v66 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v15) = 1;
          }
          else
          {
            char v67 = *(unsigned char *)(*(void *)(v3 + *v16) + v65);
            *(void *)(v3 + v64) = v66;
            v38 |= (unint64_t)(v67 & 0x7F) << v62;
            if (v67 < 0)
            {
              v62 += 7;
              BOOL v24 = v63++ >= 9;
              if (v24)
              {
                LODWORD(v38) = 0;
                goto LABEL_130;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v15)) {
          LODWORD(v38) = 0;
        }
LABEL_130:
        uint64_t v72 = 92;
LABEL_131:
        *(_DWORD *)(a1 + v72) = v38;
        goto LABEL_153;
      case 9:
        if ((v8 & 1) == 0) {
          goto LABEL_113;
        }
        *(_WORD *)(a1 + 100) |= 2u;
        uint64_t v68 = *v14;
        unint64_t v69 = *(void *)(v3 + v68);
        if (v69 <= 0xFFFFFFFFFFFFFFFBLL && v69 + 4 <= *(void *)(v3 + *v6))
        {
          int v57 = *(_DWORD *)(*(void *)(v3 + *v16) + v69);
          *(void *)(v3 + v68) = v69 + 4;
        }
        else
        {
          *(unsigned char *)(v3 + *v15) = 1;
          int v57 = 0;
        }
        uint64_t v74 = 72;
LABEL_152:
        *(_DWORD *)(a1 + v74) = v57;
        goto LABEL_153;
      case 10:
        if (!v28) {
          goto LABEL_113;
        }
        if ((*(_WORD *)(a1 + 100) & 0x400) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_171;
          }
          __int16 v73 = 32 * *(_WORD *)(a1 + 100);
          goto LABEL_142;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_171;
        }
        char v80 = objc_alloc_init(GEOSignGuidanceFeedback);
        if (!GEOSignGuidanceFeedbackReadAllFrom((uint64_t)v80, (void *)v3)) {
          goto LABEL_170;
        }
        PBReaderRecallMark();
        uint64_t v70 = 32;
        goto LABEL_111;
      case 11:
        if (!v28) {
          goto LABEL_113;
        }
        if ((*(_WORD *)(a1 + 100) & 0x800) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_171;
          }
          __int16 v73 = 16 * *(_WORD *)(a1 + 100);
          goto LABEL_142;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_171;
        }
        char v80 = objc_alloc_init(GEOSpokenGuidanceFeedback);
        if (!GEOSpokenGuidanceFeedbackReadAllFrom((uint64_t)v80, (void *)v3)) {
          goto LABEL_170;
        }
        PBReaderRecallMark();
        uint64_t v70 = 40;
        goto LABEL_111;
      case 12:
        if (!v28) {
          goto LABEL_113;
        }
        if ((*(_WORD *)(a1 + 100) & 0x100) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_171;
          }
          __int16 v73 = *(_WORD *)(a1 + 100) << 7;
          goto LABEL_142;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_171;
        }
        char v80 = objc_alloc_init(GEOJunctionViewGuidanceFeedback);
        if (!GEOJunctionViewGuidanceFeedbackReadAllFrom(v80, (void *)v3)) {
          goto LABEL_170;
        }
        PBReaderRecallMark();
        uint64_t v70 = 16;
        goto LABEL_111;
      case 13:
        if (!v28)
        {
LABEL_113:
          char v71 = PBReaderSkipValueWithTag();
          int v15 = (int *)MEMORY[0x1E4F940C8];
          if ((v71 & 1) == 0)
          {
LABEL_169:
            char v75 = 0;
            goto LABEL_156;
          }
          goto LABEL_153;
        }
        if ((*(_WORD *)(a1 + 100) & 0x1000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_171;
          }
          __int16 v73 = 8 * *(_WORD *)(a1 + 100);
LABEL_142:
          v7 += v73 >> 15;
LABEL_143:
          int v15 = (int *)MEMORY[0x1E4F940C8];
LABEL_153:
          if (!(v12 & 1 | (v7 != 0))) {
            goto LABEL_154;
          }
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_171;
        }
        char v80 = objc_alloc_init(GEOTrafficCameraInformation);
        if (GEOTrafficCameraInformationReadAllFrom((uint64_t)v80, (void *)v3))
        {
          PBReaderRecallMark();
          uint64_t v70 = 48;
LABEL_111:
          unsigned int v34 = *(void **)(a1 + v70);
          *(void *)(a1 + v70) = v80;
LABEL_112:

          --v7;
          goto LABEL_143;
        }
LABEL_170:

LABEL_171:
        char v75 = 0;
        int v15 = (int *)MEMORY[0x1E4F940C8];
LABEL_156:
        *(_WORD *)(a1 + 100) |= 0x200u;
        *(_WORD *)(a1 + 100) |= 0x400u;
        *(_WORD *)(a1 + 100) |= 0x800u;
        *(_WORD *)(a1 + 100) |= 0x100u;
        *(_WORD *)(a1 + 100) |= 0x1000u;
        if (v75) {
          goto LABEL_166;
        }
        unint64_t v3 = 0;
        if ((v12 & 1) == 0) {
          return v3;
        }
LABEL_167:
        uint64_t v78 = *(void **)(a1 + 8);
        *(void *)(a1 + 8) = 0;

        return v3;
      default:
        int v35 = PBReaderSkipValueWithTag();
        int v15 = (int *)MEMORY[0x1E4F940C8];
        if (!v35) {
          goto LABEL_169;
        }
        goto LABEL_153;
    }
  }
}

unint64_t GEOPDAllCollectionsViewParametersReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  char v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 52);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 48)];
  uint64_t v7 = v6;
  uint64_t v8 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  unsigned int v13 = vaddv_s16((int16x4_t)(*(void *)&vshl_u16((uint16x4_t)(*(void *)&vdup_n_s16(*(unsigned __int8 *)(a1 + 64)) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFFFFFCFFFEFFFDLL) & 0xFF01FF01FF01FF01));
  while (2)
  {
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    uint64_t v16 = 1;
    switch(a3[v8])
    {
      case -4:
        ++v13;
        goto LABEL_8;
      case -3:
        char v9 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v15 = v11;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v17 = v13 > 1;
        char v18 = v17 & ~(_BYTE)v12 | v10;
        unsigned __int8 v19 = v17 | v12;
        char v61 = v18;
        char v62 = v19 | v18;
        if ((v19 | v9)) {
          uint64_t v20 = 0;
        }
        else {
          uint64_t v20 = a3;
        }
        char v63 = (v20 == 0) | v19;
        BOOL v64 = v19;
        uint64_t v21 = (int *)MEMORY[0x1E4F940E8];
        unint64_t v22 = (int *)MEMORY[0x1E4F940C8];
        char v23 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v13;
LABEL_7:
        uint64_t v14 = v10;
LABEL_8:
        uint64_t v15 = v11;
        uint64_t v16 = v12;
LABEL_10:
        ++v8;
        uint64_t v10 = v14;
        uint64_t v11 = v15;
        uint64_t v12 = v16;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v21) >= *(void *)(v3 + *v7) || *(unsigned char *)(v3 + *v22)) {
      goto LABEL_84;
    }
    char v24 = 0;
    unsigned int v25 = 0;
    unint64_t v26 = 0;
    while (1)
    {
      uint64_t v27 = *v21;
      uint64_t v28 = *(void *)(v3 + v27);
      unint64_t v29 = v28 + 1;
      if (v28 == -1 || v29 > *(void *)(v3 + *v7)) {
        break;
      }
      char v30 = *(unsigned char *)(*(void *)(v3 + *v23) + v28);
      *(void *)(v3 + v27) = v29;
      v26 |= (unint64_t)(v30 & 0x7F) << v24;
      if ((v30 & 0x80) == 0) {
        goto LABEL_25;
      }
      v24 += 7;
      BOOL v31 = v25++ >= 9;
      if (v31)
      {
        unint64_t v26 = 0;
        int v32 = *(unsigned __int8 *)(v3 + *v22);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v22) = 1;
LABEL_25:
    int v32 = *(unsigned __int8 *)(v3 + *v22);
    if (*(unsigned char *)(v3 + *v22)) {
      unint64_t v26 = 0;
    }
LABEL_27:
    if (v32 || (v26 & 7) == 4)
    {
LABEL_84:
      int v59 = 1;
      goto LABEL_85;
    }
    unint64_t v34 = v26 >> 3;
    BOOL v35 = v64;
    if ((v63 & 1) == 0)
    {
      char v36 = v20;
      do
      {
        int v38 = *v36++;
        int v37 = v38;
        BOOL v35 = v38 != 0;
        if (v38) {
          BOOL v39 = v37 == v34;
        }
        else {
          BOOL v39 = 1;
        }
      }
      while (!v39);
    }
    switch((int)v34)
    {
      case 1:
        if (!v35) {
          goto LABEL_69;
        }
        if ((*(unsigned char *)(a1 + 64) & 4) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_102;
          }
          uint64_t v40 = objc_alloc_init(GEOPDPublisherSuggestionParameters);
          if (GEOPDPublisherSuggestionParametersReadAllFrom((uint64_t)v40, (void *)v3))
          {
            PBReaderRecallMark();
            uint64_t v41 = 24;
            goto LABEL_68;
          }
          goto LABEL_101;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_102;
        }
        char v54 = 32 * *(unsigned char *)(a1 + 64);
        goto LABEL_81;
      case 2:
        if ((v9 & 1) == 0) {
          goto LABEL_69;
        }
        char v45 = 0;
        unsigned int v46 = 0;
        uint64_t v47 = 0;
        *(unsigned char *)(a1 + 64) |= 1u;
        while (2)
        {
          uint64_t v48 = *v21;
          uint64_t v49 = *(void *)(v3 + v48);
          unint64_t v50 = v49 + 1;
          if (v49 == -1 || v50 > *(void *)(v3 + *v7))
          {
            *(unsigned char *)(v3 + *v22) = 1;
          }
          else
          {
            char v51 = *(unsigned char *)(*(void *)(v3 + *v23) + v49);
            *(void *)(v3 + v48) = v50;
            v47 |= (unint64_t)(v51 & 0x7F) << v45;
            if (v51 < 0)
            {
              v45 += 7;
              BOOL v31 = v46++ >= 9;
              if (v31)
              {
                LODWORD(v47) = 0;
                goto LABEL_74;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v22)) {
          LODWORD(v47) = 0;
        }
LABEL_74:
        *(_DWORD *)(a1 + 60) = v47;
        goto LABEL_83;
      case 3:
        if (!v35) {
          goto LABEL_69;
        }
        if ((*(unsigned char *)(a1 + 64) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_102;
          }
          char v54 = 16 * *(unsigned char *)(a1 + 64);
          goto LABEL_81;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_102;
        }
        uint64_t v40 = objc_alloc_init(GEOPDAllCollectionsViewResultFilter);
        if (!GEOPDAllCollectionsViewResultFilterReadAllFrom((uint64_t)v40, (void *)v3, v11 & 1)) {
          goto LABEL_101;
        }
        PBReaderRecallMark();
        uint64_t v41 = 32;
        goto LABEL_68;
      case 4:
        if (!v35) {
          goto LABEL_69;
        }
        if ((*(unsigned char *)(a1 + 64) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_102;
          }
          char v54 = 8 * *(unsigned char *)(a1 + 64);
LABEL_81:
          v8 += v54 >> 7;
LABEL_82:
          unint64_t v22 = (int *)MEMORY[0x1E4F940C8];
          uint64_t v7 = (int *)MEMORY[0x1E4F940E0];
          goto LABEL_83;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_102;
        }
        uint64_t v40 = objc_alloc_init(GEOPDViewportInfo);
        if (GEOPDViewportInfoReadAllFrom((uint64_t)v40, (void *)v3))
        {
          PBReaderRecallMark();
          uint64_t v41 = 40;
LABEL_68:
          uint64_t v52 = *(void **)(a1 + v41);
          *(void *)(a1 + v41) = v40;

          --v8;
          goto LABEL_82;
        }
LABEL_101:

LABEL_102:
        int v59 = 0;
        uint64_t v60 = &OBJC_IVAR___GEOMapDataSubscriptionDownloadGroup__completedSubscriptions;
        unint64_t v22 = (int *)MEMORY[0x1E4F940C8];
LABEL_86:
        if (v61) {
LABEL_87:
        }
          *(unsigned char *)(a1 + v60[110]) |= 2u;
        if (v64 || (v59 & 1) == 0)
        {
          *(unsigned char *)(a1 + v60[110]) |= 4u;
          *(unsigned char *)(a1 + v60[110]) |= 8u;
          *(unsigned char *)(a1 + v60[110]) |= 0x10u;
        }
        else if (v20)
        {
          while (1)
          {
            int v55 = *v20++;
            char v56 = 4;
            switch(v55)
            {
              case 0:
                goto LABEL_95;
              case 1:
                goto LABEL_94;
              case 3:
                char v56 = 8;
                goto LABEL_94;
              case 4:
                char v56 = 16;
LABEL_94:
                *(unsigned char *)(a1 + v60[110]) |= v56;
                break;
              default:
                continue;
            }
          }
        }
LABEL_95:
        if (v59) {
          unint64_t v3 = *(unsigned char *)(v3 + *v22) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v64)
        {
          int v57 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      default:
        if ((v61 & 1) == 0 || (*(unsigned char *)(a1 + 64) & 2) != 0)
        {
LABEL_69:
          char v53 = PBReaderSkipValueWithTag();
          uint64_t v7 = (int *)MEMORY[0x1E4F940E0];
          unint64_t v22 = (int *)MEMORY[0x1E4F940C8];
          if ((v53 & 1) == 0)
          {
            int v59 = 0;
LABEL_85:
            uint64_t v60 = &OBJC_IVAR___GEOMapDataSubscriptionDownloadGroup__completedSubscriptions;
            goto LABEL_86;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v42 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            char v43 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v42;
          }
          int v44 = PBUnknownFieldAdd();
          unint64_t v22 = (int *)MEMORY[0x1E4F940C8];
          uint64_t v7 = (int *)MEMORY[0x1E4F940E0];
          if (!v44)
          {
            int v59 = 0;
            uint64_t v60 = &OBJC_IVAR___GEOMapDataSubscriptionDownloadGroup__completedSubscriptions;
            goto LABEL_87;
          }
        }
LABEL_83:
        if (!(v62 & 1 | (v8 != 0))) {
          goto LABEL_84;
        }
        continue;
    }
  }
}

void sub_188F21358(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F21AA4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F21B90(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F21D4C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

os_unfair_lock_s *GEORPFeedbackResultIsDirty(os_unfair_lock_s *result)
{
  if (result)
  {
    id v1 = result;
    os_unfair_lock_lock_with_options();
    uint64_t IsDirty = _GEORPFeedbackResultIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 22);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

uint64_t _GEORPFeedbackResultIsDirty(uint64_t a1)
{
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 88));
  unsigned int v2 = *(unsigned __int16 *)(a1 + 92);
  if ((v2 & 0x100) != 0) {
    return 1;
  }
  if ((v2 & 0x40) != 0)
  {
    if (GEORPFeedbackSubmissionResultIsDirty(*(os_unfair_lock_s **)(a1 + 64))) {
      return 1;
    }
    unsigned int v2 = *(unsigned __int16 *)(a1 + 92);
  }
  if ((v2 & 0xAE) != 0) {
    return 1;
  }
  return (v2 >> 4) & 1;
}

os_unfair_lock_s *GEORPFeedbackSubmissionResultIsDirty(os_unfair_lock_s *result)
{
  if (result)
  {
    id v1 = result;
    os_unfair_lock_lock_with_options();
    uint64_t IsDirty = _GEORPFeedbackSubmissionResultIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 20);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

unint64_t GEORPTdmFraudNotificationParametersReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 72));
  char v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 68);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 64)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  unsigned int v11 = (vaddv_s16((int16x4_t)(*(void *)&vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int8 *)(a1 + 76)), (uint16x4_t)0xFFFEFFFCFFFDFFFFLL) & 0xFF01FF01FF01FF01))+ (*(unsigned char *)(a1 + 76) & 1)+ ((*(unsigned char *)(a1 + 76) & 0x20) != 0));
  while (2)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    switch(a3[v9])
    {
      case -4:
        ++v11;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_9;
      case 0:
        BOOL v14 = v11 > 3;
        char v15 = v14 & ~(_BYTE)v10 | v7;
        unsigned __int8 v16 = v14 | v10;
        char v50 = v15;
        char v51 = v16 | v15;
        if ((v16 | v8)) {
          BOOL v17 = 0;
        }
        else {
          BOOL v17 = a3;
        }
        char v18 = (int *)MEMORY[0x1E4F940E8];
        unsigned __int8 v19 = (int *)MEMORY[0x1E4F940C8];
        char v52 = (v17 == 0) | v16;
        BOOL v53 = v16;
        uint64_t v20 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v11;
LABEL_7:
        uint64_t v12 = v7;
LABEL_8:
        uint64_t v13 = v10;
LABEL_9:
        ++v9;
        uint64_t v7 = v12;
        uint64_t v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v18) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v19)) {
      goto LABEL_75;
    }
    char v21 = 0;
    unsigned int v22 = 0;
    unint64_t v23 = 0;
    while (1)
    {
      uint64_t v24 = *v18;
      uint64_t v25 = *(void *)(v3 + v24);
      unint64_t v26 = v25 + 1;
      if (v25 == -1 || v26 > *(void *)(v3 + *v6)) {
        break;
      }
      char v27 = *(unsigned char *)(*(void *)(v3 + *v20) + v25);
      *(void *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0) {
        goto LABEL_24;
      }
      v21 += 7;
      if (v22++ >= 9)
      {
        unint64_t v23 = 0;
        int v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_26;
      }
    }
    *(unsigned char *)(v3 + *v19) = 1;
LABEL_24:
    int v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(unsigned char *)(v3 + *v19)) {
      unint64_t v23 = 0;
    }
LABEL_26:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_75:
      int v49 = 1;
      goto LABEL_76;
    }
    unint64_t v31 = v23 >> 3;
    BOOL v32 = v53;
    if ((v52 & 1) == 0)
    {
      uint64_t v33 = v17;
      do
      {
        int v35 = *v33++;
        int v34 = v35;
        BOOL v32 = v35 != 0;
        if (v35) {
          BOOL v36 = v34 == v31;
        }
        else {
          BOOL v36 = 1;
        }
      }
      while (!v36);
    }
    switch((int)v31)
    {
      case 1:
        if (!v32) {
          goto LABEL_60;
        }
        if ((*(unsigned char *)(a1 + 76) & 8) == 0)
        {
          uint64_t v37 = PBReaderReadString();
          uint64_t v38 = 40;
          goto LABEL_59;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_93;
        }
        char v44 = 16 * *(unsigned char *)(a1 + 76);
        goto LABEL_72;
      case 2:
        if (!v32) {
          goto LABEL_60;
        }
        if ((*(unsigned char *)(a1 + 76) & 2) == 0)
        {
          uint64_t v37 = PBReaderReadString();
          uint64_t v38 = 24;
          goto LABEL_59;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_93;
        }
        char v44 = *(unsigned char *)(a1 + 76) << 6;
        goto LABEL_72;
      case 3:
        if (!v32) {
          goto LABEL_60;
        }
        if ((*(unsigned char *)(a1 + 76) & 0x10) == 0)
        {
          uint64_t v37 = PBReaderReadString();
          uint64_t v38 = 48;
          goto LABEL_59;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_93;
        }
        char v44 = 8 * *(unsigned char *)(a1 + 76);
        goto LABEL_72;
      case 4:
        if (!v32) {
          goto LABEL_60;
        }
        if ((*(unsigned char *)(a1 + 76) & 4) == 0)
        {
          uint64_t v37 = PBReaderReadString();
          uint64_t v38 = 32;
          goto LABEL_59;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_93;
        }
        char v44 = 32 * *(unsigned char *)(a1 + 76);
        goto LABEL_72;
      case 5:
        if (!v32) {
          goto LABEL_60;
        }
        if ((*(unsigned char *)(a1 + 76) & 0x20) == 0)
        {
          uint64_t v37 = PBReaderReadString();
          uint64_t v38 = 56;
LABEL_59:
          id v42 = *(void **)(a1 + v38);
          *(void *)(a1 + v38) = v37;

          --v9;
LABEL_73:
          unsigned __int8 v19 = (int *)MEMORY[0x1E4F940C8];
LABEL_74:
          if (!(v51 & 1 | (v9 != 0))) {
            goto LABEL_75;
          }
          continue;
        }
        if (PBReaderSkipValueWithTag())
        {
          char v44 = 4 * *(unsigned char *)(a1 + 76);
LABEL_72:
          v9 += v44 >> 7;
          goto LABEL_73;
        }
LABEL_93:
        int v49 = 0;
        unsigned __int8 v19 = (int *)MEMORY[0x1E4F940C8];
LABEL_76:
        if (v50) {
LABEL_77:
        }
          *(unsigned char *)(a1 + 76) |= 1u;
        if (v53 || (v49 & 1) == 0)
        {
          *(unsigned char *)(a1 + 76) |= 8u;
          *(unsigned char *)(a1 + 76) |= 2u;
          *(unsigned char *)(a1 + 76) |= 0x10u;
          *(unsigned char *)(a1 + 76) |= 4u;
          *(unsigned char *)(a1 + 76) |= 0x20u;
        }
        else if (v17)
        {
          while (1)
          {
            int v45 = *v17++;
            char v46 = 8;
            switch(v45)
            {
              case 0:
                goto LABEL_87;
              case 1:
                goto LABEL_86;
              case 2:
                char v46 = 2;
                goto LABEL_86;
              case 3:
                char v46 = 16;
                goto LABEL_86;
              case 4:
                char v46 = 4;
                goto LABEL_86;
              case 5:
                char v46 = 32;
LABEL_86:
                *(unsigned char *)(a1 + 76) |= v46;
                break;
              default:
                continue;
            }
          }
        }
LABEL_87:
        if (v49) {
          unint64_t v3 = *(unsigned char *)(v3 + *v19) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v53)
        {
          uint64_t v47 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      default:
        if (v50 & 1) == 0 || (*(unsigned char *)(a1 + 76))
        {
LABEL_60:
          char v43 = PBReaderSkipValueWithTag();
          unsigned __int8 v19 = (int *)MEMORY[0x1E4F940C8];
          if ((v43 & 1) == 0)
          {
            int v49 = 0;
            goto LABEL_76;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v39 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            uint64_t v40 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v39;
          }
          int v41 = PBUnknownFieldAdd();
          unsigned __int8 v19 = (int *)MEMORY[0x1E4F940C8];
          if (!v41)
          {
            int v49 = 0;
            goto LABEL_77;
          }
        }
        goto LABEL_74;
    }
  }
}

void sub_188F23370(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F24C68(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F24D6C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F24F20(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F24FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  _Unwind_Resume(a1);
}

void sub_188F250E0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F251E8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F252F0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F253F8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F25500(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F25608(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F25A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

uint64_t MapsFeature_IsEnabled_VKMLayout_Navigation()
{
  return GEOConfigGetBOOL(MapsFeaturesConfig_VKMLayoutEnabled_Navigation, (uint64_t)off_1E9111F18);
}

uint64_t MapsFeature_IsEnabled_VKMLayout_Flyover()
{
  return GEOConfigGetBOOL(MapsFeaturesConfig_VKMLayoutEnabled_Flyover, (uint64_t)off_1E9111F28);
}

uint64_t MapsFeature_IsEnabled_TransitPay()
{
  return GEOConfigGetBOOL(MapsFeaturesConfig_TransitPayEnabled, (uint64_t)off_1E9111D88);
}

uint64_t MapsFeature_IsEnabled_ShelbyvilleRoundedBuildings()
{
  return GEOConfigGetBOOL(MapsFeaturesConfig_ShelbyvilleRoundedBuildings, (uint64_t)off_1E9111C68);
}

uint64_t MapsFeature_IsEnabled_ShelbyvilleColorizedBuildings()
{
  return GEOConfigGetBOOL(MapsFeaturesConfig_ShelbyvilleColorizedBuildings, (uint64_t)off_1E9111C78);
}

uint64_t MapsFeature_IsEnabled_ShelbyvilleBuildingHeights()
{
  return GEOConfigGetBOOL(MapsFeaturesConfig_ShelbyvilleBuildingHeights, (uint64_t)off_1E9111C88);
}

uint64_t MapsFeature_IsEnabled_ShelbyvilleAdvancedWater()
{
  return GEOConfigGetBOOL(MapsFeaturesConfig_ShelbyvilleAdvancedWater, (uint64_t)off_1E9111C48);
}

uint64_t MapsFeature_IsEnabled_ShelbyvilleAdvancedLighting()
{
  return GEOConfigGetBOOL(MapsFeaturesConfig_ShelbyvilleAdvancedLighting, (uint64_t)off_1E9111C58);
}

uint64_t MapsFeature_IsEnabled_LagunaBeach()
{
  return GEOConfigGetBOOL(MapsFeaturesConfig_ShouldEnableLagunaBeach, (uint64_t)off_1E9111C08);
}

uint64_t MapsFeature_IsEnabled_EVRoutingEnhancements()
{
  return GEOConfigGetBOOL(MapsFeaturesConfig_EVRoutingEnhancements, (uint64_t)off_1E9111E48);
}

void sub_188F25DC0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F25ED0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F25FE0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F260F0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F26200(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F26310(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F26420(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F26530(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F27518(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F2768C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDQuickLinkItemIsValid(char *a1)
{
  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  unsigned int v2 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v3 = (int *)MEMORY[0x1E4F940E0];
  id v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    id v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        break;
      }
      switch((v8 >> 3))
      {
        case 1u:
          if (v15 != 2) {
            goto LABEL_49;
          }
          goto LABEL_45;
        case 2u:
          if (v15 == 2) {
            goto LABEL_45;
          }
          goto LABEL_49;
        case 3u:
          if (v15 == 2) {
            goto LABEL_45;
          }
          goto LABEL_49;
        case 4u:
          if (v15 == 2) {
            goto LABEL_45;
          }
          goto LABEL_49;
        case 5u:
          if ((v8 & 7) != 0) {
            goto LABEL_49;
          }
          unsigned int v17 = 0;
          while (1)
          {
            uint64_t v18 = *v2;
            uint64_t v19 = *(void *)&a1[v18];
            unint64_t v20 = v19 + 1;
            if (v19 == -1 || v20 > *(void *)&a1[*v3]) {
              goto LABEL_43;
            }
            int v21 = *(char *)(*(void *)&a1[*v5] + v19);
            *(void *)&a1[v18] = v20;
            if (v21 < 0)
            {
              BOOL v22 = v17++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_46;
          }
        case 6u:
          if ((v8 & 7) != 0) {
            goto LABEL_49;
          }
          unsigned int v23 = 0;
          break;
        case 7u:
          if (v15 == 2) {
            goto LABEL_45;
          }
          goto LABEL_49;
        default:
LABEL_45:
          if (PBReaderSkipValueWithTag()) {
            continue;
          }
LABEL_49:
          BOOL v28 = 0;
          goto LABEL_48;
      }
      while (1)
      {
        uint64_t v24 = *v2;
        uint64_t v25 = *(void *)&a1[v24];
        unint64_t v26 = v25 + 1;
        if (v25 == -1 || v26 > *(void *)&a1[*v3]) {
          break;
        }
        int v27 = *(char *)(*(void *)&a1[*v5] + v25);
        *(void *)&a1[v24] = v26;
        if (v27 < 0)
        {
          BOOL v22 = v23++ > 8;
          if (!v22) {
            continue;
          }
        }
        goto LABEL_46;
      }
LABEL_43:
      a1[*v4] = 1;
LABEL_46:
      ;
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v28 = a1[*v4] == 0;
LABEL_48:
  PBReaderRecallMark();
  return v28;
}

void sub_188F29F6C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDComponentFilterReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 756))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOPDComponentFilterReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 760));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 752) = [v8 position];
  *(_DWORD *)(a1 + 756) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOPDComponentFilterReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOPDComponentFilterReadAllFrom_initialTag;
  }
  BOOL Specified = GEOPDComponentFilterReadSpecified(a1, (char *)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOPDComponentFilterCallReadAllRecursiveWithoutSynchronized((uint64_t *)a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 760));
  return Specified;
}

void sub_188F2A108(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDComponentFilterReadSpecified(uint64_t a1, char *a2, int *a3)
{
  if (!a2) {
    return 0;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 760));
  *(void *)&a2[*MEMORY[0x1E4F940E0]] = *(unsigned int *)(a1 + 756);
  [a2 seekToOffset:*(unsigned int *)(a1 + 752)];
  uint64_t v6 = 0;
  char v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  unint64_t v11 = *(void *)(a1 + 764);
  unint64_t v12 = *(unsigned int *)(a1 + 772);
  *((void *)&v13 + 1) = v12;
  *(void *)&long long v13 = v11;
  int32x2_t v14 = (int32x2_t)(v13 >> 43);
  *((void *)&v13 + 1) = v12;
  *(void *)&long long v13 = v11;
  int32x2_t v15 = (int32x2_t)(v13 >> 35);
  v16.i64[0] = 0x100000001;
  v16.i64[1] = 0x100000001;
  *((void *)&v13 + 1) = v12;
  *(void *)&long long v13 = v11;
  int32x2_t v17 = (int32x2_t)(v13 >> 49);
  *((void *)&v13 + 1) = v12;
  *(void *)&long long v13 = v11;
  int32x2_t v18 = (int32x2_t)(v13 >> 61);
  *((void *)&v13 + 1) = v12;
  *(void *)&long long v13 = v11;
  int32x2_t v19 = (int32x2_t)(v13 >> 42);
  *((void *)&v13 + 1) = v12;
  *(void *)&long long v13 = v11;
  int32x2_t v20 = (int32x2_t)(v13 >> 40);
  *((void *)&v13 + 1) = v12;
  *(void *)&long long v13 = v11;
  int32x2_t v21 = (int32x2_t)(v13 >> 39);
  *((void *)&v13 + 1) = v12;
  *(void *)&long long v13 = v11;
  int32x2_t v22 = (int32x2_t)(v13 >> 48);
  *((void *)&v13 + 1) = v12;
  *(void *)&long long v13 = v11;
  int32x2_t v23 = (int32x2_t)(v13 >> 53);
  *((void *)&v13 + 1) = v12;
  *(void *)&long long v13 = v11;
  int32x2_t v24 = (int32x2_t)(v13 >> 47);
  *((void *)&v13 + 1) = v12;
  *(void *)&long long v13 = v11;
  int32x2_t v25 = v24;
  int32x2_t v26 = (int32x2_t)(v13 >> 54);
  *((void *)&v13 + 1) = v12;
  *(void *)&long long v13 = v11;
  int32x2_t v27 = (int32x2_t)(v13 >> 60);
  *((void *)&v13 + 1) = v12;
  *(void *)&long long v13 = v11;
  *(int32x2_t *)v28.i8 = vzip1_s32((int32x2_t)(v13 >> 44), v27);
  v28.u64[1] = (unint64_t)vzip1_s32((int32x2_t)(v12 >> 21), (int32x2_t)(v12 >> 22));
  int32x2_t v29 = vzip1_s32(v26, v25);
  *(int32x2_t *)v30.i8 = vzip1_s32((int32x2_t)(v12 >> 20), (int32x2_t)(v12 >> 26));
  v30.u64[1] = (unint64_t)v29;
  int32x4_t v31 = (int32x4_t)vandq_s8(v30, v16);
  int32x4_t v32 = (int32x4_t)vandq_s8(v28, v16);
  *((void *)&v13 + 1) = v12;
  *(void *)&long long v13 = v11;
  v30.i64[0] = v13 >> 38;
  *((void *)&v13 + 1) = v12;
  *(void *)&long long v13 = v11;
  v28.i64[0] = v13 >> 37;
  *((void *)&v13 + 1) = v12;
  *(void *)&long long v13 = v11;
  int32x2_t v33 = (int32x2_t)(v13 >> 33);
  *((void *)&v13 + 1) = v12;
  *(void *)&long long v13 = v11;
  int32x2_t v34 = (int32x2_t)(v13 >> 34);
  *((void *)&v13 + 1) = v12;
  *(void *)&long long v13 = v11;
  int32x2_t v35 = (int32x2_t)(v13 >> 32);
  uint32x4_t v36 = (uint32x4_t)vdupq_n_s32(v11);
  int32x4_t v37 = vaddq_s32(vaddq_s32(v32, v31), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v36, (uint32x4_t)xmmword_18A6373A0), v16));
  *((void *)&v13 + 1) = v12;
  *(void *)&long long v13 = v11;
  int32x2_t v38 = (int32x2_t)(v13 >> 55);
  uint64_t v39 = a1;
  *((void *)&v13 + 1) = v12;
  *(void *)&long long v13 = v11;
  uint64_t v40 = v13 >> 58;
  v32.i32[0] = v11;
  v32.i32[1] = (v11 >> 46) | (v12 << 18);
  v32.i32[2] = (v11 >> 57) | (v12 << 7);
  v32.i32[3] = (v11 >> 63) | (2 * v12);
  *((void *)&v13 + 1) = v12;
  *(void *)&long long v13 = v11;
  int32x2_t v41 = (int32x2_t)(v13 >> 51);
  *((void *)&v13 + 1) = v12;
  *(void *)&long long v13 = v11;
  int32x2_t v42 = (int32x2_t)(v13 >> 62);
  *((void *)&v13 + 1) = v12;
  *(void *)&long long v13 = v11;
  int32x2_t v43 = vzip1_s32(v15, v14);
  *(int32x2_t *)v44.i8 = vzip1_s32((int32x2_t)(v12 >> 19), (int32x2_t)(v12 >> 16));
  v44.u64[1] = (unint64_t)v43;
  *(int32x2_t *)v45.i8 = vzip1_s32((int32x2_t)(v12 >> 9), (int32x2_t)(v12 >> 13));
  v45.u64[1] = (unint64_t)vzip1_s32((int32x2_t)(v12 >> 15), (int32x2_t)(v12 >> 6));
  *(int32x2_t *)v46.i8 = vzip1_s32(v17, (int32x2_t)(v12 >> 10));
  v46.u64[1] = (unint64_t)vzip1_s32((int32x2_t)(v12 >> 2), v18);
  *(int32x2_t *)v47.i8 = vzip1_s32((int32x2_t)(v12 >> 25), (int32x2_t)(v12 >> 7));
  v47.u64[1] = (unint64_t)vzip1_s32(v20, v19);
  *(int32x2_t *)v48.i8 = vzip1_s32(v21, (int32x2_t)(v12 >> 23));
  v48.u64[1] = (unint64_t)vzip1_s32(v23, v22);
  int32x4_t v49 = (int32x4_t)vandq_s8(v44, v16);
  int32x4_t v50 = (int32x4_t)vandq_s8(v45, v16);
  int32x4_t v51 = (int32x4_t)vandq_s8(v46, v16);
  int32x4_t v52 = (int32x4_t)vandq_s8(v47, v16);
  int32x4_t v53 = (int32x4_t)vandq_s8(v48, v16);
  *(int32x2_t *)v54.i8 = vzip1_s32(*(int32x2_t *)v30.i8, (int32x2_t)(v12 >> 3));
  v54.u64[1] = (unint64_t)vzip1_s32((int32x2_t)(v12 >> 24), *(int32x2_t *)v28.i8);
  *(int32x2_t *)v48.i8 = vzip1_s32(v35, v34);
  v48.u64[1] = (unint64_t)vzip1_s32(v33, (int32x2_t)(v12 >> 11));
  int v55 = ((v11 & 0x800000000000000) != 0)
      + ((v11 >> 4) & 1)
      + (v12 & 1)
      + ((v11 >> 29) & 1)
      + vaddvq_s32(vaddq_s32(vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v36, (uint32x4_t)xmmword_18A637390), v16), v49), vaddq_s32(v50, v51)));
  unsigned int v56 = vaddvq_s32(vaddq_s32(vaddq_s32(v52, (int32x4_t)vandq_s8(v54, v16)), vaddq_s32(v53, (int32x4_t)vandq_s8(v48, v16))))
      + vaddvq_s32(v37)
      + (v11 >> 31);
  v16.i32[0] = vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)v32, v16));
  v50.i64[0] = v40;
  uint64_t v57 = v39;
  v48.i32[0] = v11 >> 28;
  v48.i32[1] = HIBYTE(v11) | (v12 << 8);
  v54.i32[0] = v11 >> 7;
  v54.i32[1] = (v11 >> 36) | (v12 << 28);
  v58.i32[0] = v11 >> 27;
  v58.i32[1] = (v11 >> 52) | (v12 << 12);
  v17.i32[0] = v11 >> 26;
  v17.i32[1] = v12 >> 5;
  v19.i32[0] = v12 >> 17;
  v19.i32[1] = v11 >> 8;
  v59.i32[0] = (v11 >> 41) | (v12 << 23);
  v59.i32[1] = v11 >> 19;
  v16.i32[1] = (v12 >> 27) & 1;
  *(int32x2_t *)v16.i8 = vadd_s32(vadd_s32(vadd_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)vzip1_s32(*(int32x2_t *)v50.i8, v38), (int8x8_t)0x100000001), (int32x2_t)vand_s8(*(int8x8_t *)v48.i8, (int8x8_t)0x100000001)), vadd_s32(vadd_s32((int32x2_t)vand_s8(*(int8x8_t *)v54.i8, (int8x8_t)0x100000001), (int32x2_t)vand_s8(v58, (int8x8_t)0x100000001)), vadd_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v36.i8, (uint32x2_t)0xFFFFFFF5FFFFFFF4), (int8x8_t)0x100000001), (int32x2_t)vand_s8((int8x8_t)vzip1_s32((int32x2_t)(v12 >> 14), (int32x2_t)(v12 >> 4)),
                                                (int8x8_t)0x100000001)))),
                             vadd_s32(vadd_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v36.i8, (uint32x2_t)0xFFFFFFE2FFFFFFF2), (int8x8_t)0x100000001), (int32x2_t)vand_s8((int8x8_t)v19, (int8x8_t)0x100000001)), vadd_s32((int32x2_t)vand_s8((int8x8_t)vzip1_s32(v42, v41), (int8x8_t)0x100000001), (int32x2_t)vand_s8((int8x8_t)v17, (int8x8_t)0x100000001))), vadd_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v36.i8, (uint32x2_t)0xFFFFFFF3FFFFFFFALL), (int8x8_t)0x100000001), (int32x2_t)vand_s8(
                                                (int8x8_t)vzip1_s32((int32x2_t)(v12 >> 1), (int32x2_t)(v13 >> 45)),
                                                (int8x8_t)0x100000001)),
                                 vadd_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v36.i8, (uint32x2_t)0xFFFFFFF0FFFFFFF7), (int8x8_t)0x100000001), (int32x2_t)vand_s8(v59, (int8x8_t)0x100000001))))), vadd_s32(*(int32x2_t *)v16.i8, (int32x2_t)vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v36.i8, (uint32x2_t)0xFFFFFFEFFFFFFFE9), (int8x8_t)0x100000001)));
  unsigned int v60 = vadd_s32(*(int32x2_t *)v16.i8, vdup_lane_s32(*(int32x2_t *)v16.i8, 1)).u32[0]
      + ((v12 >> 8) & 1)
      + ((v12 >> 18) & 1)
      + ((v11 >> 21) & 1)
      + ((v11 >> 3) & 1)
      + ((v11 >> 20) & 1)
      + ((v11 >> 50) & 1)
      + (BYTE3(v11) & 1)
      + ((v12 >> 12) & 1)
      + v55
      + v56;
  while (2)
  {
    uint64_t v61 = 1;
    uint64_t v62 = 1;
    uint64_t v63 = 1;
    switch(a3[v6])
    {
      case -4:
        ++v60;
        goto LABEL_8;
      case -3:
        char v7 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v62 = v9;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v64 = v60 > 0x49;
        char v65 = v64 | v10;
        char v134 = v64 & ~(_BYTE)v10 | v8;
        char v136 = v64 | v10 | v134;
        if (((v64 | v10) | v7)) {
          unint64_t v66 = 0;
        }
        else {
          unint64_t v66 = a3;
        }
        long long v135 = v66;
        char v67 = (int *)MEMORY[0x1E4F940E8];
        uint64_t v68 = (int *)MEMORY[0x1E4F940C8];
        char v137 = (v66 == 0) | v65;
        unint64_t v69 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v60;
LABEL_7:
        uint64_t v61 = v8;
LABEL_8:
        uint64_t v62 = v9;
        uint64_t v63 = v10;
LABEL_10:
        ++v6;
        uint64_t v8 = v61;
        uint64_t v9 = v62;
        uint64_t v10 = v63;
        continue;
    }
    break;
  }
  while (2)
  {
    uint64_t v70 = (int *)MEMORY[0x1E4F940E0];
    if (*(void *)&a2[*v67] >= *(void *)&a2[*MEMORY[0x1E4F940E0]] || a2[*v68]) {
      goto LABEL_716;
    }
    char v71 = 0;
    unsigned int v72 = 0;
    unint64_t v73 = 0;
    while (1)
    {
      uint64_t v74 = *v67;
      uint64_t v75 = *(void *)&a2[v74];
      unint64_t v76 = v75 + 1;
      if (v75 == -1 || v76 > *(void *)&a2[*v70]) {
        break;
      }
      char v77 = *(unsigned char *)(*(void *)&a2[*v69] + v75);
      *(void *)&a2[v74] = v76;
      v73 |= (unint64_t)(v77 & 0x7F) << v71;
      if ((v77 & 0x80) == 0) {
        goto LABEL_25;
      }
      v71 += 7;
      if (v72++ >= 9)
      {
        unint64_t v73 = 0;
        int v79 = a2[*v68];
        goto LABEL_27;
      }
    }
    a2[*v68] = 1;
LABEL_25:
    int v79 = a2[*v68];
    if (a2[*v68]) {
      unint64_t v73 = 0;
    }
LABEL_27:
    if (v79 || (v73 & 7) == 4)
    {
LABEL_716:
      int v133 = 1;
      goto LABEL_717;
    }
    unint64_t v81 = v73 >> 3;
    BOOL v82 = v65;
    if ((v137 & 1) == 0)
    {
      uint64_t v83 = v135;
      do
      {
        int v85 = *v83++;
        int v84 = v85;
        BOOL v82 = v85 != 0;
        if (v85) {
          BOOL v86 = v84 == v81;
        }
        else {
          BOOL v86 = 1;
        }
      }
      while (!v86);
    }
    switch((int)v81)
    {
      case 1:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 0x400000) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_825;
          }
          long long v87 = objc_alloc_init(GEOPDEntityFilter);
          if (GEOPDEntityFilterReadAllFrom((uint64_t)v87, a2))
          {
            PBReaderRecallMark();
            uint64_t v88 = 192;
            goto LABEL_500;
          }
          goto LABEL_824;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_825;
        }
        int v94 = *(_DWORD *)(v57 + 764);
        goto LABEL_632;
      case 2:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 0x400000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          uint64_t v95 = (int)(*(uint64_t *)(v57 + 764) >> 15);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDPlaceInfoFilter);
        if (!GEOPDPlaceInfoFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 384;
        goto LABEL_500;
      case 3:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          int v96 = *(_DWORD *)(v57 + 764);
          goto LABEL_565;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDRoadAccessInfoFilter);
        if (!GEOPDRoadAccessInfoFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 32;
        goto LABEL_500;
      case 4:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 0x400) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          int v97 = *(_DWORD *)(v57 + 764);
          goto LABEL_568;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDBoundsFilter);
        if (!GEOPDBoundsFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 96;
        goto LABEL_500;
      case 5:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          int v98 = *(_DWORD *)(v57 + 764);
          goto LABEL_611;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDAddressFilter);
        if (!GEOPDAddressFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 56;
        goto LABEL_500;
      case 6:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 0x200000000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          uint64_t v95 = (int)(*(uint64_t *)(v57 + 764) >> 26);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDRatingFilter);
        if (!GEOPDRatingFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 472;
        goto LABEL_500;
      case 7:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 0x8000000000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          uint64_t v95 = *(int *)(v57 + 768);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDReviewFilter);
        if (!GEOPDReviewFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 520;
        goto LABEL_500;
      case 8:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 0x80000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          uint64_t v95 = (int)(*(uint64_t *)(v57 + 764) >> 12);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDPhotoFilter);
        if (!GEOPDPhotoFilterReadAllFrom(v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 360;
        goto LABEL_500;
      case 9:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 0x800000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          uint64_t v95 = (int)(*(uint64_t *)(v57 + 764) >> 4);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDHoursFilter);
        if (!GEOPDHoursFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 296;
        goto LABEL_500;
      case 10:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(_DWORD *)(v57 + 772) & 0x10000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          int v99 = *(_DWORD *)(v57 + 772);
          goto LABEL_646;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDTransitInfoFilter);
        if (!GEOPDTransitInfoFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 656;
        goto LABEL_500;
      case 11:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(_DWORD *)(v57 + 772) & 0x80000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          int v100 = *(_DWORD *)(v57 + 772);
          goto LABEL_670;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDTransitScheduleFilter);
        if (!GEOPDTransitScheduleFilterReadAllFrom((uint64_t)v87, a2, v9 & 1)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 680;
        goto LABEL_500;
      case 12:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 0x800000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          int v101 = *(_DWORD *)(v57 + 764);
          goto LABEL_618;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDETAFilter);
        if (!GEOPDETAFilterReadAllFrom((uint64_t)v87, a2, v9 & 1)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 200;
        goto LABEL_500;
      case 13:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 0x10000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          LODWORD(v95) = 8 * *(_DWORD *)(v57 + 764);
          goto LABEL_712;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDFlyoverFilter);
        if (!GEOPDFlyoverFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 240;
        goto LABEL_500;
      case 14:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 0x400000000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          uint64_t v95 = (int)(*(uint64_t *)(v57 + 764) >> 27);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDRawAttributeFilter);
        if (!GEOPDRawAttributeFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 480;
        goto LABEL_500;
      case 15:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          int v102 = *(_DWORD *)(v57 + 764);
          goto LABEL_586;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDAmenitiesFilter);
        if (!GEOPDAmenitiesFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 72;
        goto LABEL_500;
      case 16:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(_DWORD *)(v57 + 772) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          int v103 = *(_DWORD *)(v57 + 772);
          goto LABEL_558;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDStyleAttributesFilter);
        if (!GEOPDStyleAttributesFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 576;
        goto LABEL_500;
      case 20:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(_DWORD *)(v57 + 772) & 0x8000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          int v104 = *(_DWORD *)(v57 + 772);
          goto LABEL_659;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDTransitIncidentFilter);
        if (!GEOPDTransitIncidentFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 648;
        goto LABEL_500;
      case 21:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(_DWORD *)(v57 + 772) & 0x2000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          int v105 = *(_DWORD *)(v57 + 772);
          goto LABEL_623;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDTransitAssociatedInfoFilter);
        if (!GEOPDTransitAssociatedInfoFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 632;
        goto LABEL_500;
      case 22:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(_DWORD *)(v57 + 772) & 0x200) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          int v106 = *(_DWORD *)(v57 + 772);
          goto LABEL_573;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDTextBlockFilter);
        if (!GEOPDTextBlockFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 600;
        goto LABEL_500;
      case 23:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 0x8000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          int v107 = *(_DWORD *)(v57 + 764);
          goto LABEL_594;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDFactoidFilter);
        if (!GEOPDFactoidFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 232;
        goto LABEL_500;
      case 24:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(_DWORD *)(v57 + 772) & 0x4000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          int v108 = *(_DWORD *)(v57 + 772);
          goto LABEL_549;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDTransitAttributionFilter);
        if (!GEOPDTransitAttributionFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 640;
        goto LABEL_500;
      case 25:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 0x1000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          int v109 = *(_DWORD *)(v57 + 764);
          goto LABEL_693;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDBusinessClaimFilter);
        if (!GEOPDBusinessClaimFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 112;
        goto LABEL_500;
      case 26:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 0x4000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          int v108 = *(_DWORD *)(v57 + 764);
LABEL_549:
          LODWORD(v95) = v108 << 17;
          goto LABEL_712;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDCaptionedPhotoFilter);
        if (!GEOPDCaptionedPhotoFilterReadAllFrom((uint64_t)v87, a2, v9 & 1)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 128;
        goto LABEL_500;
      case 27:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(_DWORD *)(v57 + 772) & 0x20000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          int v110 = *(_DWORD *)(v57 + 772);
          goto LABEL_591;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDTransitInfoSnippetFilter);
        if (!GEOPDTransitInfoSnippetFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 664;
        goto LABEL_500;
      case 29:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 0x4000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          int v111 = *(_DWORD *)(v57 + 764);
          goto LABEL_637;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDExternalActionFilter);
        if (!GEOPDExternalActionFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 224;
        goto LABEL_500;
      case 30:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 0x4000000000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          uint64_t v95 = (int)(*(uint64_t *)(v57 + 764) >> 31);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDResultSnippetFilter);
        if (!GEOPDResultSnippetFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 512;
        goto LABEL_500;
      case 31:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          int v103 = *(_DWORD *)(v57 + 764);
LABEL_558:
          LODWORD(v95) = v103 << 25;
          goto LABEL_712;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDAddressObjectFilter);
        if (!GEOPDAddressObjectFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 64;
        goto LABEL_500;
      case 32:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(_DWORD *)(v57 + 772) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          int v112 = *(_DWORD *)(v57 + 772);
          goto LABEL_665;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDSimpleRestaurantMenuTextFilter);
        if (!GEOPDSimpleRestaurantMenuTextFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 536;
        goto LABEL_500;
      case 33:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 0x2000000000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          uint64_t v95 = (int)(*(uint64_t *)(v57 + 764) >> 30);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDRestaurantReservationLinkFilter);
        if (!GEOPDRestaurantReservationLinkFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 504;
        goto LABEL_500;
      case 34:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(_DWORD *)(v57 + 772) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          int v96 = *(_DWORD *)(v57 + 772);
LABEL_565:
          LODWORD(v95) = v96 << 29;
          goto LABEL_712;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDSpatialLookupFilter);
        if (!GEOPDSpatialLookupFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 544;
        goto LABEL_500;
      case 36:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(_DWORD *)(v57 + 772) & 0x400) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          int v97 = *(_DWORD *)(v57 + 772);
LABEL_568:
          LODWORD(v95) = v97 << 21;
          goto LABEL_712;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDTipFilter);
        if (!GEOPDTipFilterReadAllFrom(v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 608;
        goto LABEL_500;
      case 37:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 0x2000000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          uint64_t v95 = (int)(*(uint64_t *)(v57 + 764) >> 18);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDPlacecardURLFilter);
        if (!GEOPDPlacecardURLFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 408;
        goto LABEL_500;
      case 38:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 0x200) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          int v106 = *(_DWORD *)(v57 + 764);
LABEL_573:
          LODWORD(v95) = v106 << 22;
          goto LABEL_712;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDAssociatedAppFilter);
        if (!GEOPDAssociatedAppFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 88;
        goto LABEL_500;
      case 39:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 0x20000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          uint64_t v95 = (int)(*(uint64_t *)(v57 + 764) >> 10);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDMessageLinkFilter);
        if (!GEOPDMessageLinkFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 344;
        goto LABEL_500;
      case 40:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 0x80000000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          uint64_t v95 = *(int *)(v57 + 767);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDQuickLinkFilter);
        if (!GEOPDQuickLinkFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 456;
        goto LABEL_500;
      case 41:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 0x100000000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          uint64_t v95 = (int)(*(uint64_t *)(v57 + 764) >> 25);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDRapFilter);
        if (!GEOPDRapFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 464;
        goto LABEL_500;
      case 42:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 0x40000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          uint64_t v95 = (int)(*(uint64_t *)(v57 + 764) >> 11);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDOfflineAreaFilter);
        if (!GEOPDOfflineAreaFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 352;
        goto LABEL_500;
      case 43:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 0x10000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          uint64_t v95 = (int)(*(uint64_t *)(v57 + 764) >> 9);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDLocationEventFilter);
        if (!GEOPDLocationEventFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 336;
        goto LABEL_500;
      case 44:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(_DWORD *)(v57 + 772) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          int v102 = *(_DWORD *)(v57 + 772);
LABEL_586:
          LODWORD(v95) = v102 << 24;
          goto LABEL_712;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDSupportsOfflineMapsFilter);
        if (!GEOPDSupportsOfflineMapsFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 584;
        goto LABEL_500;
      case 48:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(_DWORD *)(v57 + 772) & 0x2000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          int v113 = *(_DWORD *)(v57 + 772);
          goto LABEL_662;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDVenueInfoFilter);
        if (!GEOPDVenueInfoFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 728;
        goto LABEL_500;
      case 50:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 0x20000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          int v110 = *(_DWORD *)(v57 + 764);
LABEL_591:
          LODWORD(v95) = v110 << 14;
          goto LABEL_712;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDContainedPlaceFilter);
        if (!GEOPDContainedPlaceFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 152;
        goto LABEL_500;
      case 51:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(_DWORD *)(v57 + 772) & 0x8000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          int v107 = *(_DWORD *)(v57 + 772);
LABEL_594:
          LODWORD(v95) = 16 * v107;
          goto LABEL_712;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDWifiFingerprintFilter);
        if (!GEOPDWifiFingerprintFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 744;
        goto LABEL_500;
      case 52:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 0x1000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          uint64_t v95 = (int)(*(uint64_t *)(v57 + 764) >> 5);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDIconFilter);
        if (!GEOPDIconFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 304;
        goto LABEL_500;
      case 53:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 0x10000000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          uint64_t v95 = (int)(*(uint64_t *)(v57 + 764) >> 21);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDPriceDescriptionFilter);
        if (!GEOPDPriceDescriptionFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 432;
        goto LABEL_500;
      case 54:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 0x800) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          int v114 = *(_DWORD *)(v57 + 764);
          goto LABEL_711;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDBrowseCategoriesFilter);
        if (!GEOPDBrowseCategoriesFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 104;
        goto LABEL_500;
      case 55:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(_DWORD *)(v57 + 772) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          int v115 = *(_DWORD *)(v57 + 772);
          goto LABEL_698;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDStorefrontFilter);
        if (!GEOPDStorefrontFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 560;
        goto LABEL_500;
      case 56:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 0x40000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          LODWORD(v95) = 2 * *(_DWORD *)(v57 + 764);
          goto LABEL_712;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDGroundViewLabelFilter);
        if (!GEOPDGroundViewLabelFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 256;
        goto LABEL_500;
      case 57:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 0x100) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          int v116 = *(_DWORD *)(v57 + 764);
          goto LABEL_673;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDAnnotatedItemListFilter);
        if (!GEOPDAnnotatedItemListFilterReadAllFrom(v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 80;
        goto LABEL_500;
      case 58:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 0x8000000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          uint64_t v95 = (int)(*(uint64_t *)(v57 + 764) >> 20);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDPoiEventFilter);
        if (!GEOPDPoiEventFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 424;
        goto LABEL_500;
      case 59:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(_DWORD *)(v57 + 772) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          int v98 = *(_DWORD *)(v57 + 772);
LABEL_611:
          LODWORD(v95) = v98 << 26;
          goto LABEL_712;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDStorefrontPresentationFilter);
        if (!GEOPDStorefrontPresentationFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 568;
        goto LABEL_500;
      case 60:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 0x1000000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          uint64_t v95 = (int)(*(uint64_t *)(v57 + 764) >> 17);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDPlacecardLayoutConfigurationFilter);
        if (!GEOPDPlacecardLayoutConfigurationFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 400;
        goto LABEL_500;
      case 61:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 0x20000000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          uint64_t v95 = (int)(*(uint64_t *)(v57 + 764) >> 22);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDPrototypeContainerFilter);
        if (!GEOPDPrototypeContainerFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 440;
        goto LABEL_500;
      case 62:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(_DWORD *)(v57 + 772) & 0x800000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          int v101 = *(_DWORD *)(v57 + 772);
LABEL_618:
          LODWORD(v95) = v101 << 8;
          goto LABEL_712;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDVehiclePositionFilter);
        if (!GEOPDVehiclePositionFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 712;
        goto LABEL_500;
      case 63:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 0x8000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          uint64_t v95 = *(int *)(v57 + 765);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDLinkedServiceFilter);
        if (!GEOPDLinkedServiceFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 328;
        goto LABEL_500;
      case 64:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 0x2000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          int v105 = *(_DWORD *)(v57 + 764);
LABEL_623:
          LODWORD(v95) = v105 << 18;
          goto LABEL_712;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDBusinessHoursFilter);
        if (!GEOPDBusinessHoursFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 120;
        goto LABEL_500;
      case 65:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 0x100000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          uint64_t v95 = (int)(*(uint64_t *)(v57 + 764) >> 13);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDPlaceCollectionFilter);
        if (!GEOPDPlaceCollectionFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 368;
        goto LABEL_500;
      case 66:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 0x1000000000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          uint64_t v95 = (int)(*(uint64_t *)(v57 + 764) >> 29);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDRelatedPlaceFilter);
        if (!GEOPDRelatedPlaceFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 496;
        goto LABEL_500;
      case 67:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(_DWORD *)(v57 + 772) & 0x200000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          int v117 = *(_DWORD *)(v57 + 772);
          goto LABEL_679;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDTransitTripStopFilter);
        if (!GEOPDTransitTripStopFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 696;
        goto LABEL_500;
      case 68:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(_DWORD *)(v57 + 772) & 0x400000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          int v94 = *(_DWORD *)(v57 + 772);
LABEL_632:
          LODWORD(v95) = v94 << 9;
          goto LABEL_712;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDTransitTripStopTimeFilter);
        if (!GEOPDTransitTripStopTimeFilterReadAllFrom((uint64_t)v87, a2, v9 & 1)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 704;
        goto LABEL_500;
      case 69:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(_DWORD *)(v57 + 772) & 0x100000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          int v118 = *(_DWORD *)(v57 + 772);
          goto LABEL_685;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDTransitTripGeometryFilter);
        if (!GEOPDTransitTripGeometryFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 688;
        goto LABEL_500;
      case 70:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(_DWORD *)(v57 + 772) & 0x4000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          int v111 = *(_DWORD *)(v57 + 772);
LABEL_637:
          LODWORD(v95) = 32 * v111;
          goto LABEL_712;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDWalletCategoryInformationFilter);
        if (!GEOPDWalletCategoryInformationFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 736;
        goto LABEL_500;
      case 71:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 0x40000000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          uint64_t v95 = (int)(*(uint64_t *)(v57 + 764) >> 23);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDPublisherFilter);
        if (!GEOPDPublisherFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 448;
        goto LABEL_500;
      case 73:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 0x800000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          uint64_t v95 = *(int *)(v57 + 766);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDPlaceQuestionnaireFilter);
        if (!GEOPDPlaceQuestionnaireFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 392;
        goto LABEL_500;
      case 74:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 0x200000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          uint64_t v95 = (int)(*(uint64_t *)(v57 + 764) >> 14);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDPlaceCollectionItemFilter);
        if (!GEOPDPlaceCollectionItemFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 376;
        goto LABEL_500;
      case 76:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 0x10000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          int v99 = *(_DWORD *)(v57 + 764);
LABEL_646:
          LODWORD(v95) = v99 << 15;
          goto LABEL_712;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDCollectionIdsFilter);
        if (!GEOPDCollectionIdsFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 144;
        goto LABEL_500;
      case 77:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 0x2000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          uint64_t v95 = (int)(*(uint64_t *)(v57 + 764) >> 6);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDISO3166CodeFilter);
        if (!GEOPDISO3166CodeFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 312;
        goto LABEL_500;
      case 78:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(_DWORD *)(v57 + 772) & 0x1000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          int v119 = *(_DWORD *)(v57 + 772);
          goto LABEL_690;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDVendorAmenitiesFilter);
        if (!GEOPDVendorAmenitiesFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 720;
        goto LABEL_500;
      case 81:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(_DWORD *)(v57 + 772) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          int v120 = *(_DWORD *)(v57 + 772);
          goto LABEL_682;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDStorefrontFacesFilter);
        if (!GEOPDStorefrontFacesFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 552;
        goto LABEL_500;
      case 82:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(_DWORD *)(v57 + 764) & 0x80000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          uint64_t v95 = *(int *)(v57 + 764);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDGuideGroupFilter);
        if (!GEOPDGuideGroupFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 264;
        goto LABEL_500;
      case 83:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 0x40000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          int v121 = *(_DWORD *)(v57 + 764);
          goto LABEL_676;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDContainmentPlaceFilter);
        if (!GEOPDContainmentPlaceFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 160;
        goto LABEL_500;
      case 84:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 0x8000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          int v104 = *(_DWORD *)(v57 + 764);
LABEL_659:
          LODWORD(v95) = v104 << 16;
          goto LABEL_712;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDCategorizedPhotosFilter);
        if (!GEOPDCategorizedPhotosFilterReadAllFrom((uint64_t)v87, a2, v9 & 1)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 136;
        goto LABEL_500;
      case 85:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 0x2000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          int v113 = *(_DWORD *)(v57 + 764);
LABEL_662:
          LODWORD(v95) = v113 << 6;
          goto LABEL_712;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDExploreGuidesFilter);
        if (!GEOPDExploreGuidesFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 216;
        goto LABEL_500;
      case 86:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          int v112 = *(_DWORD *)(v57 + 764);
LABEL_665:
          LODWORD(v95) = v112 << 30;
          goto LABEL_712;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDAboutFilter);
        if (!GEOPDAboutFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 24;
        goto LABEL_500;
      case 87:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 0x4000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          uint64_t v95 = (int)(*(uint64_t *)(v57 + 764) >> 7);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDLabelGeometryFilter);
        if (!GEOPDLabelGeometryFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 320;
        goto LABEL_500;
      case 88:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 0x80000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          int v100 = *(_DWORD *)(v57 + 764);
LABEL_670:
          LODWORD(v95) = v100 << 12;
          goto LABEL_712;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDEnhancedPlacementFilter);
        if (!GEOPDEnhancedPlacementFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 168;
        goto LABEL_500;
      case 89:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(_DWORD *)(v57 + 772) & 0x100) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          int v116 = *(_DWORD *)(v57 + 772);
LABEL_673:
          LODWORD(v95) = v116 << 23;
          goto LABEL_712;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDTemplatePlaceFilter);
        if (!GEOPDTemplatePlaceFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 592;
        goto LABEL_500;
      case 91:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(_DWORD *)(v57 + 772) & 0x40000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          int v121 = *(_DWORD *)(v57 + 772);
LABEL_676:
          LODWORD(v95) = v121 << 13;
          goto LABEL_712;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDTransitPaymentMethodInfoFilter);
        if (!GEOPDTransitPaymentMethodInfoFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 672;
        goto LABEL_500;
      case 93:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 0x200000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          int v117 = *(_DWORD *)(v57 + 764);
LABEL_679:
          LODWORD(v95) = v117 << 10;
          goto LABEL_712;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDEnrichmentInfoFilter);
        if (!GEOPDEnrichmentInfoFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 184;
        goto LABEL_500;
      case 94:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          int v120 = *(_DWORD *)(v57 + 764);
LABEL_682:
          LODWORD(v95) = v120 << 28;
          goto LABEL_712;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDActionDataFilter);
        if (!GEOPDActionDataFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 40;
        goto LABEL_500;
      case 95:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 0x100000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          int v118 = *(_DWORD *)(v57 + 764);
LABEL_685:
          LODWORD(v95) = v118 << 11;
          goto LABEL_712;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDEnrichmentDataFilter);
        if (!GEOPDEnrichmentDataFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 176;
        goto LABEL_500;
      case 96:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 0x4000000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          uint64_t v95 = (int)(*(uint64_t *)(v57 + 764) >> 19);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDPOIClaimFilter);
        if (!GEOPDPOIClaimFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 416;
        goto LABEL_500;
      case 97:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 0x1000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          int v119 = *(_DWORD *)(v57 + 764);
LABEL_690:
          LODWORD(v95) = v119 << 7;
          goto LABEL_712;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDEVChargerFilter);
        if (!GEOPDEVChargerFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 208;
        goto LABEL_500;
      case 98:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(_DWORD *)(v57 + 772) & 0x1000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          int v109 = *(_DWORD *)(v57 + 772);
LABEL_693:
          LODWORD(v95) = v109 << 19;
          goto LABEL_712;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDTrailHeadFilter);
        if (!GEOPDTrailHeadFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 624;
        goto LABEL_500;
      case 100:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 0x800000000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          uint64_t v95 = (int)(*(uint64_t *)(v57 + 764) >> 28);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDRefreshIdFilter);
        if (!GEOPDRefreshIdFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 488;
        goto LABEL_500;
      case 101:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          int v115 = *(_DWORD *)(v57 + 764);
LABEL_698:
          LODWORD(v95) = v115 << 27;
          goto LABEL_712;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDAddressWithComponentsFilter);
        if (!GEOPDAddressWithComponentsFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 48;
        goto LABEL_500;
      case 102:
        if (!v82) {
          goto LABEL_501;
        }
        if (*(_DWORD *)(v57 + 772))
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          LODWORD(v95) = *(_DWORD *)(v57 + 772) << 31;
          goto LABEL_712;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDSearchResultPlacePhotoFilter);
        if (!GEOPDSearchResultPlacePhotoFilterReadAllFrom(v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 528;
        goto LABEL_500;
      case 103:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 0x20000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          LODWORD(v95) = 4 * *(_DWORD *)(v57 + 764);
          goto LABEL_712;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDForwardInfoFilter);
        if (!GEOPDForwardInfoFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 248;
        goto LABEL_500;
      case 104:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 0x100000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          uint64_t v95 = (int)(*(uint64_t *)(v57 + 764) >> 1);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDHikeAssociatedInfoFilter);
        if (!GEOPDHikeAssociatedInfoFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 272;
        goto LABEL_500;
      case 105:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 0x400000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          uint64_t v95 = (int)(*(uint64_t *)(v57 + 764) >> 3);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDHikeSummaryFilter);
        if (!GEOPDHikeSummaryFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 288;
        goto LABEL_500;
      case 106:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(void *)(v57 + 764) & 0x200000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          uint64_t v95 = (int)(*(uint64_t *)(v57 + 764) >> 2);
          goto LABEL_713;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDHikeGeometryFilter);
        if (!GEOPDHikeGeometryFilterReadAllFrom((uint64_t)v87, a2)) {
          goto LABEL_824;
        }
        PBReaderRecallMark();
        uint64_t v88 = 280;
        goto LABEL_500;
      case 107:
        if (!v82) {
          goto LABEL_501;
        }
        if ((*(_DWORD *)(v57 + 772) & 0x800) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_825;
          }
          int v114 = *(_DWORD *)(v57 + 772);
LABEL_711:
          LODWORD(v95) = v114 << 20;
LABEL_712:
          uint64_t v95 = (int)v95;
LABEL_713:
          v6 += v95 >> 31;
LABEL_714:
          uint64_t v68 = (int *)MEMORY[0x1E4F940C8];
LABEL_715:
          if (!(v136 & 1 | (v6 != 0))) {
            goto LABEL_716;
          }
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_825;
        }
        long long v87 = objc_alloc_init(GEOPDTooltipFilter);
        if (GEOPDTooltipFilterReadAllFrom((uint64_t)v87, a2))
        {
          PBReaderRecallMark();
          uint64_t v88 = 616;
LABEL_500:
          unint64_t v92 = *(void **)(v57 + v88);
          *(void *)(v57 + v88) = v87;

          --v6;
          goto LABEL_714;
        }
LABEL_824:

LABEL_825:
        int v133 = 0;
        uint64_t v68 = (int *)MEMORY[0x1E4F940C8];
LABEL_717:
        if (v134) {
LABEL_718:
        }
          *(void *)(v57 + 764) |= 1uLL;
        if (v65 & 1 | ((v133 & 1) == 0))
        {
          int v122 = *(_DWORD *)(v57 + 772) | 0xFFFFFFF;
          *(void *)(v57 + 764) |= 0xFFFFFFFFFFFFFFFELL;
          *(_DWORD *)(v57 + 772) = v122;
        }
        else if (v135)
        {
          int v124 = *v135;
          if (*v135)
          {
            long long v125 = v135 + 1;
            do
            {
              int v126 = v124 - 1;
              int v127 = 0;
              unint64_t v128 = 0x400000;
              switch(v126)
              {
                case 0:
                  goto LABEL_816;
                case 1:
                  int v127 = 0;
                  unint64_t v128 = 0x400000000000;
                  goto LABEL_816;
                case 2:
                  int v127 = 0;
                  unint64_t v128 = 4;
                  goto LABEL_816;
                case 3:
                  int v127 = 0;
                  unint64_t v128 = 1024;
                  goto LABEL_816;
                case 4:
                  int v127 = 0;
                  unint64_t v128 = 32;
                  goto LABEL_816;
                case 5:
                  int v127 = 0;
                  unint64_t v128 = 0x200000000000000;
                  goto LABEL_816;
                case 6:
                  int v127 = 0;
                  unint64_t v128 = 0x8000000000000000;
                  goto LABEL_816;
                case 7:
                  int v127 = 0;
                  unint64_t v128 = 0x80000000000;
                  goto LABEL_816;
                case 8:
                  int v127 = 0;
                  unint64_t v128 = 0x800000000;
                  goto LABEL_816;
                case 9:
                  unint64_t v128 = 0;
                  int v127 = 0x10000;
                  goto LABEL_816;
                case 10:
                  unint64_t v128 = 0;
                  int v127 = 0x80000;
                  goto LABEL_816;
                case 11:
                  int v127 = 0;
                  unint64_t v128 = 0x800000;
                  goto LABEL_816;
                case 12:
                  int v127 = 0;
                  unint64_t v128 = 0x10000000;
                  goto LABEL_816;
                case 13:
                  int v127 = 0;
                  unint64_t v128 = 0x400000000000000;
                  goto LABEL_816;
                case 14:
                  int v127 = 0;
                  unint64_t v128 = 128;
                  goto LABEL_816;
                case 15:
                  unint64_t v128 = 0;
                  int v127 = 64;
                  goto LABEL_816;
                case 19:
                  unint64_t v128 = 0;
                  int v127 = 0x8000;
                  goto LABEL_816;
                case 20:
                  unint64_t v128 = 0;
                  int v127 = 0x2000;
                  goto LABEL_816;
                case 21:
                  unint64_t v128 = 0;
                  int v127 = 512;
                  goto LABEL_816;
                case 22:
                  int v127 = 0;
                  unint64_t v128 = 0x8000000;
                  goto LABEL_816;
                case 23:
                  unint64_t v128 = 0;
                  int v127 = 0x4000;
                  goto LABEL_816;
                case 24:
                  int v127 = 0;
                  unint64_t v128 = 4096;
                  goto LABEL_816;
                case 25:
                  int v127 = 0;
                  unint64_t v128 = 0x4000;
                  goto LABEL_816;
                case 26:
                  unint64_t v128 = 0;
                  int v127 = 0x20000;
                  goto LABEL_816;
                case 28:
                  int v127 = 0;
                  unint64_t v128 = 0x4000000;
                  goto LABEL_816;
                case 29:
                  int v127 = 0;
                  unint64_t v128 = 0x4000000000000000;
                  goto LABEL_816;
                case 30:
                  int v127 = 0;
                  unint64_t v128 = 64;
                  goto LABEL_816;
                case 31:
                  unint64_t v128 = 0;
                  int v127 = 2;
                  goto LABEL_816;
                case 32:
                  int v127 = 0;
                  unint64_t v128 = 0x2000000000000000;
                  goto LABEL_816;
                case 33:
                  unint64_t v128 = 0;
                  int v127 = 4;
                  goto LABEL_816;
                case 35:
                  unint64_t v128 = 0;
                  int v127 = 1024;
                  goto LABEL_816;
                case 36:
                  int v127 = 0;
                  unint64_t v128 = 0x2000000000000;
                  goto LABEL_816;
                case 37:
                  int v127 = 0;
                  unint64_t v128 = 512;
                  goto LABEL_816;
                case 38:
                  int v127 = 0;
                  unint64_t v128 = 0x20000000000;
                  goto LABEL_816;
                case 39:
                  int v127 = 0;
                  unint64_t v128 = 0x80000000000000;
                  goto LABEL_816;
                case 40:
                  int v127 = 0;
                  unint64_t v128 = 0x100000000000000;
                  goto LABEL_816;
                case 41:
                  int v127 = 0;
                  unint64_t v128 = 0x40000000000;
                  goto LABEL_816;
                case 42:
                  int v127 = 0;
                  unint64_t v128 = 0x10000000000;
                  goto LABEL_816;
                case 43:
                  unint64_t v128 = 0;
                  int v127 = 128;
                  goto LABEL_816;
                case 47:
                  unint64_t v128 = 0;
                  int v127 = 0x2000000;
                  goto LABEL_816;
                case 49:
                  int v127 = 0;
                  unint64_t v128 = 0x20000;
                  goto LABEL_816;
                case 50:
                  unint64_t v128 = 0;
                  int v127 = 0x8000000;
                  goto LABEL_816;
                case 51:
                  int v127 = 0;
                  unint64_t v128 = 0x1000000000;
                  goto LABEL_816;
                case 52:
                  int v127 = 0;
                  unint64_t v128 = 0x10000000000000;
                  goto LABEL_816;
                case 53:
                  int v127 = 0;
                  unint64_t v128 = 2048;
                  goto LABEL_816;
                case 54:
                  unint64_t v128 = 0;
                  int v127 = 16;
                  goto LABEL_816;
                case 55:
                  int v127 = 0;
                  unint64_t v128 = 0x40000000;
                  goto LABEL_816;
                case 56:
                  int v127 = 0;
                  unint64_t v128 = 256;
                  goto LABEL_816;
                case 57:
                  int v127 = 0;
                  unint64_t v128 = 0x8000000000000;
                  goto LABEL_816;
                case 58:
                  unint64_t v128 = 0;
                  int v127 = 32;
                  goto LABEL_816;
                case 59:
                  int v127 = 0;
                  unint64_t v128 = 0x1000000000000;
                  goto LABEL_816;
                case 60:
                  int v127 = 0;
                  unint64_t v128 = 0x20000000000000;
                  goto LABEL_816;
                case 61:
                  unint64_t v128 = 0;
                  int v127 = 0x800000;
                  goto LABEL_816;
                case 62:
                  int v127 = 0;
                  unint64_t v128 = 0x8000000000;
                  goto LABEL_816;
                case 63:
                  int v127 = 0;
                  unint64_t v128 = 0x2000;
                  goto LABEL_816;
                case 64:
                  int v127 = 0;
                  unint64_t v128 = 0x100000000000;
                  goto LABEL_816;
                case 65:
                  int v127 = 0;
                  unint64_t v128 = 0x1000000000000000;
                  goto LABEL_816;
                case 66:
                  unint64_t v128 = 0;
                  int v127 = 0x200000;
                  goto LABEL_816;
                case 67:
                  unint64_t v128 = 0;
                  int v127 = 0x400000;
                  goto LABEL_816;
                case 68:
                  unint64_t v128 = 0;
                  int v127 = 0x100000;
                  goto LABEL_816;
                case 69:
                  unint64_t v128 = 0;
                  int v127 = 0x4000000;
                  goto LABEL_816;
                case 70:
                  int v127 = 0;
                  unint64_t v128 = 0x40000000000000;
                  goto LABEL_816;
                case 72:
                  int v127 = 0;
                  unint64_t v128 = 0x800000000000;
                  goto LABEL_816;
                case 73:
                  int v127 = 0;
                  unint64_t v128 = 0x200000000000;
                  goto LABEL_816;
                case 75:
                  int v127 = 0;
                  unint64_t v128 = 0x10000;
                  goto LABEL_816;
                case 76:
                  int v127 = 0;
                  unint64_t v128 = 0x2000000000;
                  goto LABEL_816;
                case 77:
                  unint64_t v128 = 0;
                  int v127 = 0x1000000;
                  goto LABEL_816;
                case 80:
                  unint64_t v128 = 0;
                  int v127 = 8;
                  goto LABEL_816;
                case 81:
                  int v127 = 0;
                  unint64_t v128 = 0x80000000;
                  goto LABEL_816;
                case 82:
                  int v127 = 0;
                  unint64_t v128 = 0x40000;
                  goto LABEL_816;
                case 83:
                  int v127 = 0;
                  unint64_t v128 = 0x8000;
                  goto LABEL_816;
                case 84:
                  int v127 = 0;
                  unint64_t v128 = 0x2000000;
                  goto LABEL_816;
                case 85:
                  int v127 = 0;
                  unint64_t v128 = 2;
                  goto LABEL_816;
                case 86:
                  int v127 = 0;
                  unint64_t v128 = 0x4000000000;
                  goto LABEL_816;
                case 87:
                  int v127 = 0;
                  unint64_t v128 = 0x80000;
                  goto LABEL_816;
                case 88:
                  unint64_t v128 = 0;
                  int v127 = 256;
                  goto LABEL_816;
                case 90:
                  unint64_t v128 = 0;
                  int v127 = 0x40000;
                  goto LABEL_816;
                case 92:
                  int v127 = 0;
                  unint64_t v128 = 0x200000;
                  goto LABEL_816;
                case 93:
                  int v127 = 0;
                  unint64_t v128 = 8;
                  goto LABEL_816;
                case 94:
                  int v127 = 0;
                  unint64_t v128 = 0x100000;
                  goto LABEL_816;
                case 95:
                  int v127 = 0;
                  unint64_t v128 = 0x4000000000000;
                  goto LABEL_816;
                case 96:
                  int v127 = 0;
                  unint64_t v128 = 0x1000000;
                  goto LABEL_816;
                case 97:
                  unint64_t v128 = 0;
                  int v127 = 4096;
                  goto LABEL_816;
                case 99:
                  int v127 = 0;
                  unint64_t v128 = 0x800000000000000;
                  goto LABEL_816;
                case 100:
                  int v127 = 0;
                  unint64_t v128 = 16;
                  goto LABEL_816;
                case 101:
                  unint64_t v128 = 0;
                  int v127 = 1;
                  goto LABEL_816;
                case 102:
                  int v127 = 0;
                  unint64_t v128 = 0x20000000;
                  goto LABEL_816;
                case 103:
                  int v127 = 0;
                  unint64_t v128 = 0x100000000;
                  goto LABEL_816;
                case 104:
                  int v127 = 0;
                  unint64_t v128 = 0x400000000;
                  goto LABEL_816;
                case 105:
                  int v127 = 0;
                  unint64_t v128 = 0x200000000;
                  goto LABEL_816;
                case 106:
                  unint64_t v128 = 0;
                  int v127 = 2048;
LABEL_816:
                  int v129 = *(_DWORD *)(v57 + 772) | v127;
                  *(void *)(v57 + 764) |= v128;
                  *(_DWORD *)(v57 + 772) = v129;
                  break;
                default:
                  break;
              }
              int v130 = *v125++;
              int v124 = v130;
            }
            while (v130);
          }
        }
        if (v133)
        {
          BOOL v123 = a2[*v68] == 0;
          if ((v65 & 1) == 0) {
            return v123;
          }
LABEL_822:
          long long v131 = *(void **)(v57 + 8);
          *(void *)(v57 + 8) = 0;
        }
        else
        {
          BOOL v123 = 0;
          if (v65) {
            goto LABEL_822;
          }
        }
        return v123;
      default:
        if (v134 & 1) == 0 || (*(void *)(v57 + 764))
        {
LABEL_501:
          char v93 = PBReaderSkipValueWithTag();
          uint64_t v68 = (int *)MEMORY[0x1E4F940C8];
          if ((v93 & 1) == 0)
          {
            int v133 = 0;
            goto LABEL_717;
          }
        }
        else
        {
          if (!*(void *)(v57 + 16))
          {
            id v89 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            uint64_t v90 = *(void **)(v57 + 16);
            *(void *)(v57 + 16) = v89;
          }
          int v91 = PBUnknownFieldAdd();
          uint64_t v68 = (int *)MEMORY[0x1E4F940C8];
          if (!v91)
          {
            int v133 = 0;
            goto LABEL_718;
          }
        }
        goto LABEL_715;
    }
  }
}

BOOL GEOPDPublisherFilterReadAllFrom(uint64_t a1, void *a2)
{
  unint64_t v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    id v4 = (int *)MEMORY[0x1E4F940E8];
    id v5 = (int *)MEMORY[0x1E4F940E0];
    uint64_t v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      char v7 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v3[*v6]) {
          break;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          BOOL v15 = v9++ >= 9;
          if (v15)
          {
            unint64_t v10 = 0;
            int v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v16 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v16 || (v10 & 7) == 4) {
          break;
        }
        if ((v10 >> 3) == 1)
        {
          char v18 = 0;
          unsigned int v19 = 0;
          uint64_t v20 = 0;
          *(unsigned char *)(a1 + 20) |= 1u;
          while (1)
          {
            uint64_t v21 = *v4;
            uint64_t v22 = *(void *)&v3[v21];
            unint64_t v23 = v22 + 1;
            if (v22 == -1 || v23 > *(void *)&v3[*v5]) {
              break;
            }
            char v24 = *(unsigned char *)(*(void *)&v3[*v7] + v22);
            *(void *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0) {
              goto LABEL_32;
            }
            v18 += 7;
            BOOL v15 = v19++ >= 9;
            if (v15)
            {
              uint64_t v20 = 0;
              goto LABEL_34;
            }
          }
          v3[*v6] = 1;
LABEL_32:
          if (v3[*v6]) {
            uint64_t v20 = 0;
          }
LABEL_34:
          *(unsigned char *)(a1 + 16) = v20 != 0;
        }
        else
        {
          if (!*(void *)(a1 + 8))
          {
            id v25 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            int32x2_t v26 = *(void **)(a1 + 8);
            *(void *)(a1 + 8) = v25;
          }
          if (!PBUnknownFieldAdd()) {
            goto LABEL_37;
          }
        }
      }
      while (*(void *)&v3[*v4] < *(void *)&v3[*v5]);
    }
    BOOL v27 = v3[*v6] == 0;
  }
  else
  {
LABEL_37:
    BOOL v27 = 0;
  }
  objc_sync_exit(v3);

  return v27;
}

void sub_188F2E1D4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDPlaceCollectionFilterReadAllFrom(uint64_t a1, void *a2)
{
  unint64_t v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    id v4 = (int *)MEMORY[0x1E4F940E8];
    id v5 = (int *)MEMORY[0x1E4F940E0];
    uint64_t v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      char v7 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v3[*v6]) {
          break;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          BOOL v15 = v9++ >= 9;
          if (v15)
          {
            unint64_t v10 = 0;
            int v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v16 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v16 || (v10 & 7) == 4) {
          break;
        }
        switch((v10 >> 3))
        {
          case 1u:
            char v18 = 0;
            unsigned int v19 = 0;
            uint64_t v20 = 0;
            *(unsigned char *)(a1 + 28) |= 1u;
            while (2)
            {
              uint64_t v21 = *v4;
              uint64_t v22 = *(void *)&v3[v21];
              unint64_t v23 = v22 + 1;
              if (v22 == -1 || v23 > *(void *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                char v24 = *(unsigned char *)(*(void *)&v3[*v7] + v22);
                *(void *)&v3[v21] = v23;
                v20 |= (unint64_t)(v24 & 0x7F) << v18;
                if (v24 < 0)
                {
                  v18 += 7;
                  BOOL v15 = v19++ >= 9;
                  if (v15)
                  {
                    LODWORD(v20) = 0;
                    goto LABEL_76;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6]) {
              LODWORD(v20) = 0;
            }
LABEL_76:
            *(_DWORD *)(a1 + 16) = v20;
            continue;
          case 2u:
            char v27 = 0;
            unsigned int v28 = 0;
            uint64_t v29 = 0;
            *(unsigned char *)(a1 + 28) |= 0x40u;
            while (1)
            {
              uint64_t v30 = *v4;
              uint64_t v31 = *(void *)&v3[v30];
              unint64_t v32 = v31 + 1;
              if (v31 == -1 || v32 > *(void *)&v3[*v5]) {
                break;
              }
              char v33 = *(unsigned char *)(*(void *)&v3[*v7] + v31);
              *(void *)&v3[v30] = v32;
              v29 |= (unint64_t)(v33 & 0x7F) << v27;
              if ((v33 & 0x80) == 0) {
                goto LABEL_78;
              }
              v27 += 7;
              BOOL v15 = v28++ >= 9;
              if (v15)
              {
                uint64_t v29 = 0;
                goto LABEL_80;
              }
            }
            v3[*v6] = 1;
LABEL_78:
            if (v3[*v6]) {
              uint64_t v29 = 0;
            }
LABEL_80:
            BOOL v69 = v29 != 0;
            uint64_t v70 = 25;
            goto LABEL_101;
          case 3u:
            char v34 = 0;
            unsigned int v35 = 0;
            uint64_t v36 = 0;
            *(unsigned char *)(a1 + 28) |= 0x10u;
            while (2)
            {
              uint64_t v37 = *v4;
              uint64_t v38 = *(void *)&v3[v37];
              unint64_t v39 = v38 + 1;
              if (v38 == -1 || v39 > *(void *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                char v40 = *(unsigned char *)(*(void *)&v3[*v7] + v38);
                *(void *)&v3[v37] = v39;
                v36 |= (unint64_t)(v40 & 0x7F) << v34;
                if (v40 < 0)
                {
                  v34 += 7;
                  BOOL v15 = v35++ >= 9;
                  if (v15)
                  {
                    uint64_t v36 = 0;
                    goto LABEL_84;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6]) {
              uint64_t v36 = 0;
            }
LABEL_84:
            BOOL v69 = v36 != 0;
            uint64_t v70 = 23;
            goto LABEL_101;
          case 4u:
            char v41 = 0;
            unsigned int v42 = 0;
            uint64_t v43 = 0;
            *(unsigned char *)(a1 + 28) |= 2u;
            while (2)
            {
              uint64_t v44 = *v4;
              uint64_t v45 = *(void *)&v3[v44];
              unint64_t v46 = v45 + 1;
              if (v45 == -1 || v46 > *(void *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                char v47 = *(unsigned char *)(*(void *)&v3[*v7] + v45);
                *(void *)&v3[v44] = v46;
                v43 |= (unint64_t)(v47 & 0x7F) << v41;
                if (v47 < 0)
                {
                  v41 += 7;
                  BOOL v15 = v42++ >= 9;
                  if (v15)
                  {
                    uint64_t v43 = 0;
                    goto LABEL_88;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6]) {
              uint64_t v43 = 0;
            }
LABEL_88:
            BOOL v69 = v43 != 0;
            uint64_t v70 = 20;
            goto LABEL_101;
          case 5u:
            char v48 = 0;
            unsigned int v49 = 0;
            uint64_t v50 = 0;
            *(unsigned char *)(a1 + 28) |= 0x20u;
            while (2)
            {
              uint64_t v51 = *v4;
              uint64_t v52 = *(void *)&v3[v51];
              unint64_t v53 = v52 + 1;
              if (v52 == -1 || v53 > *(void *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                char v54 = *(unsigned char *)(*(void *)&v3[*v7] + v52);
                *(void *)&v3[v51] = v53;
                v50 |= (unint64_t)(v54 & 0x7F) << v48;
                if (v54 < 0)
                {
                  v48 += 7;
                  BOOL v15 = v49++ >= 9;
                  if (v15)
                  {
                    uint64_t v50 = 0;
                    goto LABEL_92;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6]) {
              uint64_t v50 = 0;
            }
LABEL_92:
            BOOL v69 = v50 != 0;
            uint64_t v70 = 24;
            goto LABEL_101;
          case 6u:
            char v55 = 0;
            unsigned int v56 = 0;
            uint64_t v57 = 0;
            *(unsigned char *)(a1 + 28) |= 4u;
            while (2)
            {
              uint64_t v58 = *v4;
              uint64_t v59 = *(void *)&v3[v58];
              unint64_t v60 = v59 + 1;
              if (v59 == -1 || v60 > *(void *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                char v61 = *(unsigned char *)(*(void *)&v3[*v7] + v59);
                *(void *)&v3[v58] = v60;
                v57 |= (unint64_t)(v61 & 0x7F) << v55;
                if (v61 < 0)
                {
                  v55 += 7;
                  BOOL v15 = v56++ >= 9;
                  if (v15)
                  {
                    uint64_t v57 = 0;
                    goto LABEL_96;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6]) {
              uint64_t v57 = 0;
            }
LABEL_96:
            BOOL v69 = v57 != 0;
            uint64_t v70 = 21;
            goto LABEL_101;
          case 7u:
            char v62 = 0;
            unsigned int v63 = 0;
            uint64_t v64 = 0;
            *(unsigned char *)(a1 + 28) |= 8u;
            break;
          default:
            if (!*(void *)(a1 + 8))
            {
              id v25 = objc_alloc_init(MEMORY[0x1E4F940B0]);
              int32x2_t v26 = *(void **)(a1 + 8);
              *(void *)(a1 + 8) = v25;
            }
            if (!PBUnknownFieldAdd()) {
              goto LABEL_104;
            }
            continue;
        }
        while (1)
        {
          uint64_t v65 = *v4;
          uint64_t v66 = *(void *)&v3[v65];
          unint64_t v67 = v66 + 1;
          if (v66 == -1 || v67 > *(void *)&v3[*v5]) {
            break;
          }
          char v68 = *(unsigned char *)(*(void *)&v3[*v7] + v66);
          *(void *)&v3[v65] = v67;
          v64 |= (unint64_t)(v68 & 0x7F) << v62;
          if ((v68 & 0x80) == 0) {
            goto LABEL_98;
          }
          v62 += 7;
          BOOL v15 = v63++ >= 9;
          if (v15)
          {
            uint64_t v64 = 0;
            goto LABEL_100;
          }
        }
        v3[*v6] = 1;
LABEL_98:
        if (v3[*v6]) {
          uint64_t v64 = 0;
        }
LABEL_100:
        BOOL v69 = v64 != 0;
        uint64_t v70 = 22;
LABEL_101:
        *(unsigned char *)(a1 + v70) = v69;
      }
      while (*(void *)&v3[*v4] < *(void *)&v3[*v5]);
    }
    BOOL v71 = v3[*v6] == 0;
  }
  else
  {
LABEL_104:
    BOOL v71 = 0;
  }
  objc_sync_exit(v3);

  return v71;
}

void sub_188F2E870(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDTipFilterReadAllFrom(void *a1, void *a2)
{
  unint64_t v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    id v4 = (int *)MEMORY[0x1E4F940E8];
    id v5 = (int *)MEMORY[0x1E4F940E0];
    uint64_t v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      char v7 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v3[*v6]) {
          break;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          if (v9++ >= 9)
          {
            unint64_t v10 = 0;
            int v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v16 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v16 || (v10 & 7) == 4) {
          break;
        }
        if ((v10 >> 3) == 1)
        {
          if (!PBReaderPlaceMark()) {
            goto LABEL_28;
          }
          -[GEOPDTipFilter _reservePhotoSizeFilters:]((uint64_t)a1, 1uLL);
          if (!GEOPDPhotoSizeFilterValueReadAllFrom(a1[2] + 12 * a1[3], (uint64_t)v3)) {
            goto LABEL_28;
          }
          PBReaderRecallMark();
          ++a1[3];
        }
        else
        {
          if (!a1[1])
          {
            id v18 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            unsigned int v19 = (void *)a1[1];
            a1[1] = v18;
          }
          if (!PBUnknownFieldAdd()) {
            goto LABEL_28;
          }
        }
      }
      while (*(void *)&v3[*v4] < *(void *)&v3[*v5]);
    }
    BOOL v20 = v3[*v6] == 0;
  }
  else
  {
LABEL_28:
    BOOL v20 = 0;
  }
  objc_sync_exit(v3);

  return v20;
}

void sub_188F2EABC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDSupportsOfflineMapsFilterReadAllFrom(uint64_t a1, void *a2)
{
  unint64_t v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    id v4 = (int *)MEMORY[0x1E4F940E8];
    id v5 = (int *)MEMORY[0x1E4F940E0];
    uint64_t v6 = (int *)MEMORY[0x1E4F940C8];
    char v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      int v8 = v3[*v6];
      if (*(void *)&v3[*v4] >= *(void *)&v3[*v5]) {
        break;
      }
      if (v3[*v6])
      {
        int v8 = 1;
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      uint64_t v11 = 0;
      while (1)
      {
        uint64_t v12 = *v4;
        uint64_t v13 = *(void *)&v3[v12];
        unint64_t v14 = v13 + 1;
        if (v13 == -1 || v14 > *(void *)&v3[*v5]) {
          break;
        }
        char v15 = *(unsigned char *)(*(void *)&v3[*v7] + v13);
        *(void *)&v3[v12] = v14;
        v11 |= (unint64_t)(v15 & 0x7F) << v9;
        if ((v15 & 0x80) == 0) {
          goto LABEL_13;
        }
        v9 += 7;
        if (v10++ >= 9)
        {
          char v17 = 0;
          int v8 = v3[*v6];
          goto LABEL_16;
        }
      }
      v3[*v6] = 1;
LABEL_13:
      int v8 = v3[*v6];
      if (v3[*v6]) {
        char v17 = 0;
      }
      else {
        char v17 = v11;
      }
LABEL_16:
      if (v8) {
        BOOL v18 = 1;
      }
      else {
        BOOL v18 = (v17 & 7) == 4;
      }
      if (v18) {
        break;
      }
      if (!*(void *)(a1 + 8))
      {
        id v19 = objc_alloc_init(MEMORY[0x1E4F940B0]);
        BOOL v20 = *(void **)(a1 + 8);
        *(void *)(a1 + 8) = v19;
      }
      if ((PBUnknownFieldAdd() & 1) == 0) {
        goto LABEL_23;
      }
    }
    BOOL v21 = v8 == 0;
  }
  else
  {
LABEL_23:
    BOOL v21 = 0;
  }
  objc_sync_exit(v3);

  return v21;
}

void sub_188F2EC6C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDStorefrontPresentationFilterReadAllFrom(uint64_t a1, void *a2)
{
  unsigned int v2 = a2;
  objc_sync_enter(v2);
  if (v2)
  {
    unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
    id v4 = (int *)MEMORY[0x1E4F940E0];
    id v5 = (int *)MEMORY[0x1E4F940C8];
    uint64_t v6 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      int v7 = v2[*v5];
      if (*(void *)&v2[*v3] >= *(void *)&v2[*v4]) {
        break;
      }
      if (v2[*v5])
      {
        int v7 = 1;
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      uint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)&v2[v11];
        if (v12 == -1 || v12 >= *(void *)&v2[*v4]) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)&v2[*v6] + v12);
        *(void *)&v2[v11] = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_13;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          LOBYTE(v10) = 0;
          int v7 = v2[*v5];
          goto LABEL_15;
        }
      }
      v2[*v5] = 1;
LABEL_13:
      int v7 = v2[*v5];
      if (v2[*v5]) {
        LOBYTE(v10) = 0;
      }
LABEL_15:
      if (v7) {
        BOOL v15 = 1;
      }
      else {
        BOOL v15 = (v10 & 7) == 4;
      }
      if (v15) {
        break;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        goto LABEL_20;
      }
    }
    BOOL v16 = v7 == 0;
  }
  else
  {
LABEL_20:
    BOOL v16 = 0;
  }
  objc_sync_exit(v2);

  return v16;
}

void sub_188F2EDD4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDStorefrontFilterReadAllFrom(uint64_t a1, void *a2)
{
  unsigned int v2 = a2;
  objc_sync_enter(v2);
  if (v2)
  {
    unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
    id v4 = (int *)MEMORY[0x1E4F940E0];
    id v5 = (int *)MEMORY[0x1E4F940C8];
    uint64_t v6 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      int v7 = v2[*v5];
      if (*(void *)&v2[*v3] >= *(void *)&v2[*v4]) {
        break;
      }
      if (v2[*v5])
      {
        int v7 = 1;
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      uint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)&v2[v11];
        if (v12 == -1 || v12 >= *(void *)&v2[*v4]) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)&v2[*v6] + v12);
        *(void *)&v2[v11] = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_13;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          LOBYTE(v10) = 0;
          int v7 = v2[*v5];
          goto LABEL_15;
        }
      }
      v2[*v5] = 1;
LABEL_13:
      int v7 = v2[*v5];
      if (v2[*v5]) {
        LOBYTE(v10) = 0;
      }
LABEL_15:
      if (v7) {
        BOOL v15 = 1;
      }
      else {
        BOOL v15 = (v10 & 7) == 4;
      }
      if (v15) {
        break;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        goto LABEL_20;
      }
    }
    BOOL v16 = v7 == 0;
  }
  else
  {
LABEL_20:
    BOOL v16 = 0;
  }
  objc_sync_exit(v2);

  return v16;
}

void sub_188F2EF3C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDReviewFilterReadAllFrom(uint64_t a1, void *a2)
{
  unint64_t v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    id v4 = (int *)MEMORY[0x1E4F940E8];
    id v5 = (int *)MEMORY[0x1E4F940E0];
    uint64_t v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      int v7 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v3[*v6]) {
          break;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          BOOL v15 = v9++ >= 9;
          if (v15)
          {
            unint64_t v10 = 0;
            int v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v16 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v16 || (v10 & 7) == 4) {
          break;
        }
        if ((v10 >> 3) == 2)
        {
          char v18 = 0;
          unsigned int v19 = 0;
          uint64_t v20 = 0;
          *(unsigned char *)(a1 + 44) |= 1u;
          while (1)
          {
            uint64_t v21 = *v4;
            uint64_t v22 = *(void *)&v3[v21];
            unint64_t v23 = v22 + 1;
            if (v22 == -1 || v23 > *(void *)&v3[*v5]) {
              break;
            }
            char v24 = *(unsigned char *)(*(void *)&v3[*v7] + v22);
            *(void *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0) {
              goto LABEL_36;
            }
            v18 += 7;
            BOOL v15 = v19++ >= 9;
            if (v15)
            {
              uint64_t v20 = 0;
              goto LABEL_38;
            }
          }
          v3[*v6] = 1;
LABEL_36:
          if (v3[*v6]) {
            uint64_t v20 = 0;
          }
LABEL_38:
          *(unsigned char *)(a1 + 40) = v20 != 0;
        }
        else if ((v10 >> 3) == 1)
        {
          if (!PBReaderPlaceMark()) {
            goto LABEL_41;
          }
          -[GEOPDReviewFilter _reservePhotoSizeFilters:](a1, 1uLL);
          if (!GEOPDPhotoSizeFilterValueReadAllFrom(*(void *)(a1 + 16) + 12 * *(void *)(a1 + 24), (uint64_t)v3)) {
            goto LABEL_41;
          }
          PBReaderRecallMark();
          ++*(void *)(a1 + 24);
        }
        else
        {
          if (!*(void *)(a1 + 8))
          {
            id v25 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            int32x2_t v26 = *(void **)(a1 + 8);
            *(void *)(a1 + 8) = v25;
          }
          if (!PBUnknownFieldAdd()) {
            goto LABEL_41;
          }
        }
      }
      while (*(void *)&v3[*v4] < *(void *)&v3[*v5]);
    }
    BOOL v27 = v3[*v6] == 0;
  }
  else
  {
LABEL_41:
    BOOL v27 = 0;
  }
  objc_sync_exit(v3);

  return v27;
}

void sub_188F2F244(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDResultSnippetFilterReadAllFrom(uint64_t a1, void *a2)
{
  unint64_t v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    id v4 = (int *)MEMORY[0x1E4F940E8];
    id v5 = (int *)MEMORY[0x1E4F940E0];
    uint64_t v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      int v7 = (int *)MEMORY[0x1E4F940B8];
      while (2)
      {
        if (!v3[*v6])
        {
          char v8 = 0;
          unsigned int v9 = 0;
          unint64_t v10 = 0;
          while (1)
          {
            uint64_t v11 = *v4;
            uint64_t v12 = *(void *)&v3[v11];
            unint64_t v13 = v12 + 1;
            if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
              break;
            }
            char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
            *(void *)&v3[v11] = v13;
            v10 |= (unint64_t)(v14 & 0x7F) << v8;
            if ((v14 & 0x80) == 0) {
              goto LABEL_13;
            }
            v8 += 7;
            BOOL v15 = v9++ >= 9;
            if (v15)
            {
              unint64_t v10 = 0;
              int v16 = v3[*v6];
              goto LABEL_15;
            }
          }
          v3[*v6] = 1;
LABEL_13:
          int v16 = v3[*v6];
          if (v3[*v6]) {
            unint64_t v10 = 0;
          }
LABEL_15:
          int v17 = v10 & 7;
          if (!v16 && v17 != 4)
          {
            switch((v10 >> 3))
            {
              case 1u:
                char v19 = 0;
                unsigned int v20 = 0;
                uint64_t v21 = 0;
                *(unsigned char *)(a1 + 52) |= 2u;
                while (1)
                {
                  uint64_t v22 = *v4;
                  uint64_t v23 = *(void *)&v3[v22];
                  unint64_t v24 = v23 + 1;
                  if (v23 == -1 || v24 > *(void *)&v3[*v5]) {
                    break;
                  }
                  char v25 = *(unsigned char *)(*(void *)&v3[*v7] + v23);
                  *(void *)&v3[v22] = v24;
                  v21 |= (unint64_t)(v25 & 0x7F) << v19;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_59;
                  }
                  v19 += 7;
                  BOOL v15 = v20++ >= 9;
                  if (v15)
                  {
                    LODWORD(v21) = 0;
                    goto LABEL_61;
                  }
                }
                v3[*v6] = 1;
LABEL_59:
                if (v3[*v6]) {
                  LODWORD(v21) = 0;
                }
LABEL_61:
                uint64_t v48 = 44;
                goto LABEL_70;
              case 2u:
                char v28 = 0;
                unsigned int v29 = 0;
                uint64_t v30 = 0;
                *(unsigned char *)(a1 + 52) |= 4u;
                while (2)
                {
                  uint64_t v31 = *v4;
                  uint64_t v32 = *(void *)&v3[v31];
                  unint64_t v33 = v32 + 1;
                  if (v32 == -1 || v33 > *(void *)&v3[*v5])
                  {
                    v3[*v6] = 1;
                  }
                  else
                  {
                    char v34 = *(unsigned char *)(*(void *)&v3[*v7] + v32);
                    *(void *)&v3[v31] = v33;
                    v30 |= (unint64_t)(v34 & 0x7F) << v28;
                    if (v34 < 0)
                    {
                      v28 += 7;
                      BOOL v15 = v29++ >= 9;
                      if (v15)
                      {
                        uint64_t v30 = 0;
                        goto LABEL_65;
                      }
                      continue;
                    }
                  }
                  break;
                }
                if (v3[*v6]) {
                  uint64_t v30 = 0;
                }
LABEL_65:
                *(unsigned char *)(a1 + 48) = v30 != 0;
                goto LABEL_71;
              case 3u:
                char v35 = 0;
                unsigned int v36 = 0;
                uint64_t v21 = 0;
                *(unsigned char *)(a1 + 52) |= 1u;
                while (2)
                {
                  uint64_t v37 = *v4;
                  uint64_t v38 = *(void *)&v3[v37];
                  unint64_t v39 = v38 + 1;
                  if (v38 == -1 || v39 > *(void *)&v3[*v5])
                  {
                    v3[*v6] = 1;
                  }
                  else
                  {
                    char v40 = *(unsigned char *)(*(void *)&v3[*v7] + v38);
                    *(void *)&v3[v37] = v39;
                    v21 |= (unint64_t)(v40 & 0x7F) << v35;
                    if (v40 < 0)
                    {
                      v35 += 7;
                      BOOL v15 = v36++ >= 9;
                      if (v15)
                      {
                        LODWORD(v21) = 0;
                        goto LABEL_69;
                      }
                      continue;
                    }
                  }
                  break;
                }
                if (v3[*v6]) {
                  LODWORD(v21) = 0;
                }
LABEL_69:
                uint64_t v48 = 40;
LABEL_70:
                *(_DWORD *)(a1 + v48) = v21;
                goto LABEL_71;
              case 4u:
                if (v17 == 2)
                {
                  if (!PBReaderPlaceMark()) {
                    goto LABEL_84;
                  }
                  while (*(void *)&v3[*v4] < *(void *)&v3[*v5] && !v3[*v6])
                  {
                    char v41 = 0;
                    unsigned int v42 = 0;
                    uint64_t v43 = 0;
                    while (1)
                    {
                      uint64_t v44 = *v4;
                      uint64_t v45 = *(void *)&v3[v44];
                      unint64_t v46 = v45 + 1;
                      if (v45 == -1 || v46 > *(void *)&v3[*v5]) {
                        break;
                      }
                      char v47 = *(unsigned char *)(*(void *)&v3[*v7] + v45);
                      *(void *)&v3[v44] = v46;
                      v43 |= (unint64_t)(v47 & 0x7F) << v41;
                      if (v47 < 0)
                      {
                        v41 += 7;
                        BOOL v15 = v42++ >= 9;
                        if (!v15) {
                          continue;
                        }
                      }
                      goto LABEL_57;
                    }
                    v3[*v6] = 1;
LABEL_57:
                    PBRepeatedInt32Add();
                  }
                  PBReaderRecallMark();
                }
                else
                {
                  char v49 = 0;
                  unsigned int v50 = 0;
                  uint64_t v51 = 0;
                  while (1)
                  {
                    uint64_t v52 = *v4;
                    uint64_t v53 = *(void *)&v3[v52];
                    unint64_t v54 = v53 + 1;
                    if (v53 == -1 || v54 > *(void *)&v3[*v5]) {
                      break;
                    }
                    char v55 = *(unsigned char *)(*(void *)&v3[*v7] + v53);
                    *(void *)&v3[v52] = v54;
                    v51 |= (unint64_t)(v55 & 0x7F) << v49;
                    if (v55 < 0)
                    {
                      v49 += 7;
                      BOOL v15 = v50++ >= 9;
                      if (!v15) {
                        continue;
                      }
                    }
                    goto LABEL_82;
                  }
                  v3[*v6] = 1;
LABEL_82:
                  PBRepeatedInt32Add();
                }
LABEL_71:
                if (*(void *)&v3[*v4] >= *(void *)&v3[*v5]) {
                  break;
                }
                continue;
              default:
                if (!*(void *)(a1 + 8))
                {
                  id v26 = objc_alloc_init(MEMORY[0x1E4F940B0]);
                  BOOL v27 = *(void **)(a1 + 8);
                  *(void *)(a1 + 8) = v26;
                }
                if (!PBUnknownFieldAdd()) {
                  goto LABEL_84;
                }
                goto LABEL_71;
            }
          }
        }
        break;
      }
    }
    BOOL v56 = v3[*v6] == 0;
  }
  else
  {
LABEL_84:
    BOOL v56 = 0;
  }
  objc_sync_exit(v3);

  return v56;
}

void sub_188F2F7BC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDRelatedPlaceFilterReadAllFrom(uint64_t a1, void *a2)
{
  unint64_t v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    id v4 = (int *)MEMORY[0x1E4F940E8];
    id v5 = (int *)MEMORY[0x1E4F940E0];
    uint64_t v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      int v7 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v3[*v6]) {
          break;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          BOOL v15 = v9++ >= 9;
          if (v15)
          {
            unint64_t v10 = 0;
            int v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v16 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v16 || (v10 & 7) == 4) {
          break;
        }
        if ((v10 >> 3) == 2)
        {
          char v25 = 0;
          unsigned int v26 = 0;
          uint64_t v27 = 0;
          *(unsigned char *)(a1 + 24) |= 2u;
          while (1)
          {
            uint64_t v28 = *v4;
            uint64_t v29 = *(void *)&v3[v28];
            unint64_t v30 = v29 + 1;
            if (v29 == -1 || v30 > *(void *)&v3[*v5]) {
              break;
            }
            char v31 = *(unsigned char *)(*(void *)&v3[*v7] + v29);
            *(void *)&v3[v28] = v30;
            v27 |= (unint64_t)(v31 & 0x7F) << v25;
            if ((v31 & 0x80) == 0) {
              goto LABEL_44;
            }
            v25 += 7;
            BOOL v15 = v26++ >= 9;
            if (v15)
            {
              uint64_t v27 = 0;
              goto LABEL_46;
            }
          }
          v3[*v6] = 1;
LABEL_44:
          if (v3[*v6]) {
            uint64_t v27 = 0;
          }
LABEL_46:
          *(unsigned char *)(a1 + 20) = v27 != 0;
        }
        else if ((v10 >> 3) == 1)
        {
          char v18 = 0;
          unsigned int v19 = 0;
          uint64_t v20 = 0;
          *(unsigned char *)(a1 + 24) |= 1u;
          while (1)
          {
            uint64_t v21 = *v4;
            uint64_t v22 = *(void *)&v3[v21];
            unint64_t v23 = v22 + 1;
            if (v22 == -1 || v23 > *(void *)&v3[*v5]) {
              break;
            }
            char v24 = *(unsigned char *)(*(void *)&v3[*v7] + v22);
            *(void *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0) {
              goto LABEL_40;
            }
            v18 += 7;
            BOOL v15 = v19++ >= 9;
            if (v15)
            {
              LODWORD(v20) = 0;
              goto LABEL_42;
            }
          }
          v3[*v6] = 1;
LABEL_40:
          if (v3[*v6]) {
            LODWORD(v20) = 0;
          }
LABEL_42:
          *(_DWORD *)(a1 + 16) = v20;
        }
        else
        {
          if (!*(void *)(a1 + 8))
          {
            id v32 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            unint64_t v33 = *(void **)(a1 + 8);
            *(void *)(a1 + 8) = v32;
          }
          if (!PBUnknownFieldAdd()) {
            goto LABEL_49;
          }
        }
      }
      while (*(void *)&v3[*v4] < *(void *)&v3[*v5]);
    }
    BOOL v34 = v3[*v6] == 0;
  }
  else
  {
LABEL_49:
    BOOL v34 = 0;
  }
  objc_sync_exit(v3);

  return v34;
}

void sub_188F2FAF4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDQuickLinkFilterReadAllFrom(uint64_t a1, void *a2)
{
  unint64_t v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    id v4 = (int *)MEMORY[0x1E4F940E8];
    id v5 = (int *)MEMORY[0x1E4F940E0];
    uint64_t v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      int v7 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v3[*v6]) {
          break;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          BOOL v15 = v9++ >= 9;
          if (v15)
          {
            unint64_t v10 = 0;
            int v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v16 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v16 || (v10 & 7) == 4) {
          break;
        }
        if ((v10 >> 3) == 1)
        {
          char v18 = 0;
          unsigned int v19 = 0;
          uint64_t v20 = 0;
          *(unsigned char *)(a1 + 20) |= 1u;
          while (1)
          {
            uint64_t v21 = *v4;
            uint64_t v22 = *(void *)&v3[v21];
            unint64_t v23 = v22 + 1;
            if (v22 == -1 || v23 > *(void *)&v3[*v5]) {
              break;
            }
            char v24 = *(unsigned char *)(*(void *)&v3[*v7] + v22);
            *(void *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0) {
              goto LABEL_32;
            }
            v18 += 7;
            BOOL v15 = v19++ >= 9;
            if (v15)
            {
              LODWORD(v20) = 0;
              goto LABEL_34;
            }
          }
          v3[*v6] = 1;
LABEL_32:
          if (v3[*v6]) {
            LODWORD(v20) = 0;
          }
LABEL_34:
          *(_DWORD *)(a1 + 16) = v20;
        }
        else
        {
          if (!*(void *)(a1 + 8))
          {
            id v25 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            unsigned int v26 = *(void **)(a1 + 8);
            *(void *)(a1 + 8) = v25;
          }
          if (!PBUnknownFieldAdd()) {
            goto LABEL_37;
          }
        }
      }
      while (*(void *)&v3[*v4] < *(void *)&v3[*v5]);
    }
    BOOL v27 = v3[*v6] == 0;
  }
  else
  {
LABEL_37:
    BOOL v27 = 0;
  }
  objc_sync_exit(v3);

  return v27;
}

void sub_188F2FD70(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDOfflineAreaFilterReadAllFrom(uint64_t a1, void *a2)
{
  unint64_t v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    id v4 = (int *)MEMORY[0x1E4F940E8];
    id v5 = (int *)MEMORY[0x1E4F940E0];
    uint64_t v6 = (int *)MEMORY[0x1E4F940C8];
    int v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      int v8 = v3[*v6];
      if (*(void *)&v3[*v4] >= *(void *)&v3[*v5]) {
        break;
      }
      if (v3[*v6])
      {
        int v8 = 1;
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      uint64_t v11 = 0;
      while (1)
      {
        uint64_t v12 = *v4;
        uint64_t v13 = *(void *)&v3[v12];
        unint64_t v14 = v13 + 1;
        if (v13 == -1 || v14 > *(void *)&v3[*v5]) {
          break;
        }
        char v15 = *(unsigned char *)(*(void *)&v3[*v7] + v13);
        *(void *)&v3[v12] = v14;
        v11 |= (unint64_t)(v15 & 0x7F) << v9;
        if ((v15 & 0x80) == 0) {
          goto LABEL_13;
        }
        v9 += 7;
        if (v10++ >= 9)
        {
          char v17 = 0;
          int v8 = v3[*v6];
          goto LABEL_16;
        }
      }
      v3[*v6] = 1;
LABEL_13:
      int v8 = v3[*v6];
      if (v3[*v6]) {
        char v17 = 0;
      }
      else {
        char v17 = v11;
      }
LABEL_16:
      if (v8) {
        BOOL v18 = 1;
      }
      else {
        BOOL v18 = (v17 & 7) == 4;
      }
      if (v18) {
        break;
      }
      if (!*(void *)(a1 + 8))
      {
        id v19 = objc_alloc_init(MEMORY[0x1E4F940B0]);
        uint64_t v20 = *(void **)(a1 + 8);
        *(void *)(a1 + 8) = v19;
      }
      if ((PBUnknownFieldAdd() & 1) == 0) {
        goto LABEL_23;
      }
    }
    BOOL v21 = v8 == 0;
  }
  else
  {
LABEL_23:
    BOOL v21 = 0;
  }
  objc_sync_exit(v3);

  return v21;
}

void sub_188F2FF20(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDForwardInfoFilterReadAllFrom(uint64_t a1, void *a2)
{
  unint64_t v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    id v4 = (int *)MEMORY[0x1E4F940E8];
    id v5 = (int *)MEMORY[0x1E4F940E0];
    uint64_t v6 = (int *)MEMORY[0x1E4F940C8];
    int v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      int v8 = v3[*v6];
      if (*(void *)&v3[*v4] >= *(void *)&v3[*v5]) {
        break;
      }
      if (v3[*v6])
      {
        int v8 = 1;
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      uint64_t v11 = 0;
      while (1)
      {
        uint64_t v12 = *v4;
        uint64_t v13 = *(void *)&v3[v12];
        unint64_t v14 = v13 + 1;
        if (v13 == -1 || v14 > *(void *)&v3[*v5]) {
          break;
        }
        char v15 = *(unsigned char *)(*(void *)&v3[*v7] + v13);
        *(void *)&v3[v12] = v14;
        v11 |= (unint64_t)(v15 & 0x7F) << v9;
        if ((v15 & 0x80) == 0) {
          goto LABEL_13;
        }
        v9 += 7;
        if (v10++ >= 9)
        {
          char v17 = 0;
          int v8 = v3[*v6];
          goto LABEL_16;
        }
      }
      v3[*v6] = 1;
LABEL_13:
      int v8 = v3[*v6];
      if (v3[*v6]) {
        char v17 = 0;
      }
      else {
        char v17 = v11;
      }
LABEL_16:
      if (v8) {
        BOOL v18 = 1;
      }
      else {
        BOOL v18 = (v17 & 7) == 4;
      }
      if (v18) {
        break;
      }
      if (!*(void *)(a1 + 8))
      {
        id v19 = objc_alloc_init(MEMORY[0x1E4F940B0]);
        uint64_t v20 = *(void **)(a1 + 8);
        *(void *)(a1 + 8) = v19;
      }
      if ((PBUnknownFieldAdd() & 1) == 0) {
        goto LABEL_23;
      }
    }
    BOOL v21 = v8 == 0;
  }
  else
  {
LABEL_23:
    BOOL v21 = 0;
  }
  objc_sync_exit(v3);

  return v21;
}

void sub_188F300D0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDFactoidFilterReadAllFrom(uint64_t a1, void *a2)
{
  unint64_t v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    id v4 = (int *)MEMORY[0x1E4F940E8];
    id v5 = (int *)MEMORY[0x1E4F940E0];
    uint64_t v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      int v7 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v3[*v6]) {
          break;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          BOOL v15 = v9++ >= 9;
          if (v15)
          {
            unint64_t v10 = 0;
            int v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v16 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v16 || (v10 & 7) == 4) {
          break;
        }
        if ((v10 >> 3) == 1)
        {
          char v18 = 0;
          unsigned int v19 = 0;
          uint64_t v20 = 0;
          *(unsigned char *)(a1 + 20) |= 1u;
          while (1)
          {
            uint64_t v21 = *v4;
            uint64_t v22 = *(void *)&v3[v21];
            unint64_t v23 = v22 + 1;
            if (v22 == -1 || v23 > *(void *)&v3[*v5]) {
              break;
            }
            char v24 = *(unsigned char *)(*(void *)&v3[*v7] + v22);
            *(void *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0) {
              goto LABEL_32;
            }
            v18 += 7;
            BOOL v15 = v19++ >= 9;
            if (v15)
            {
              uint64_t v20 = 0;
              goto LABEL_34;
            }
          }
          v3[*v6] = 1;
LABEL_32:
          if (v3[*v6]) {
            uint64_t v20 = 0;
          }
LABEL_34:
          *(unsigned char *)(a1 + 16) = v20 != 0;
        }
        else
        {
          if (!*(void *)(a1 + 8))
          {
            id v25 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            unsigned int v26 = *(void **)(a1 + 8);
            *(void *)(a1 + 8) = v25;
          }
          if (!PBUnknownFieldAdd()) {
            goto LABEL_37;
          }
        }
      }
      while (*(void *)&v3[*v4] < *(void *)&v3[*v5]);
    }
    BOOL v27 = v3[*v6] == 0;
  }
  else
  {
LABEL_37:
    BOOL v27 = 0;
  }
  objc_sync_exit(v3);

  return v27;
}

void sub_188F30354(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDAmenitiesFilterReadAllFrom(uint64_t a1, void *a2)
{
  unint64_t v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    id v4 = (int *)MEMORY[0x1E4F940E8];
    id v5 = (int *)MEMORY[0x1E4F940E0];
    uint64_t v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      int v7 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v3[*v6]) {
          break;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          BOOL v15 = v9++ >= 9;
          if (v15)
          {
            unint64_t v10 = 0;
            int v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v16 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v16 || (v10 & 7) == 4) {
          break;
        }
        if ((v10 >> 3) == 1)
        {
          char v18 = 0;
          unsigned int v19 = 0;
          uint64_t v20 = 0;
          *(unsigned char *)(a1 + 20) |= 1u;
          while (1)
          {
            uint64_t v21 = *v4;
            uint64_t v22 = *(void *)&v3[v21];
            unint64_t v23 = v22 + 1;
            if (v22 == -1 || v23 > *(void *)&v3[*v5]) {
              break;
            }
            char v24 = *(unsigned char *)(*(void *)&v3[*v7] + v22);
            *(void *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0) {
              goto LABEL_32;
            }
            v18 += 7;
            BOOL v15 = v19++ >= 9;
            if (v15)
            {
              uint64_t v20 = 0;
              goto LABEL_34;
            }
          }
          v3[*v6] = 1;
LABEL_32:
          if (v3[*v6]) {
            uint64_t v20 = 0;
          }
LABEL_34:
          *(unsigned char *)(a1 + 16) = v20 != 0;
        }
        else
        {
          if (!*(void *)(a1 + 8))
          {
            id v25 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            unsigned int v26 = *(void **)(a1 + 8);
            *(void *)(a1 + 8) = v25;
          }
          if (!PBUnknownFieldAdd()) {
            goto LABEL_37;
          }
        }
      }
      while (*(void *)&v3[*v4] < *(void *)&v3[*v5]);
    }
    BOOL v27 = v3[*v6] == 0;
  }
  else
  {
LABEL_37:
    BOOL v27 = 0;
  }
  objc_sync_exit(v3);

  return v27;
}

void sub_188F305D8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F308C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28)
{
  _Unwind_Resume(a1);
}

void std::__list_imp<NSString * {__strong}>::clear(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    unint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        id v5 = (uint64_t *)v3[1];

        operator delete(v3);
        unint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void sub_188F31470(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F31574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188F31688(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F31960(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F31B54(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F31CD8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F31F44(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDRelatedPlaceReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 60))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOPDRelatedPlaceReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)unint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 56) = [v8 position];
  *(_DWORD *)(a1 + 60) = [v8 length];
  if (a3) {
    unsigned int v9 = (int *)&GEOPDRelatedPlaceReadAllFrom_recursiveTag;
  }
  else {
    unsigned int v9 = (int *)&GEOPDRelatedPlaceReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOPDRelatedPlaceReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOPDRelatedPlaceCallReadAllRecursiveWithoutSynchronized(a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return Specified;
}

void sub_188F320E4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDRelatedPlaceReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 60);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 56)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__flags;
  int v13 = ((*(unsigned __int8 *)(a1 + 72) >> 3) & 1)
      + ((*(unsigned __int8 *)(a1 + 72) >> 2) & 1)
      + ((*(unsigned __int8 *)(a1 + 72) >> 1) & 1);
  while (2)
  {
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    uint64_t v16 = 1;
    switch(a3[v9])
    {
      case -4:
        ++v13;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v15 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v17 = v13 != 0;
        int v18 = v17 & ~v11 | v7;
        int v19 = v17 | v11;
        if (((v17 | v11) | v8)) {
          uint64_t v20 = 0;
        }
        else {
          uint64_t v20 = a3;
        }
        uint64_t v21 = (int *)MEMORY[0x1E4F940E8];
        int v22 = 1;
        unint64_t v23 = (int *)MEMORY[0x1E4F940C8];
        if (*(void *)(v3 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(v3 + *v6)) {
          goto LABEL_97;
        }
        char v71 = v18;
        int v73 = (v9 != 0) | v19 | v18;
        char v74 = (v20 == 0) | v19;
        char v24 = (int *)MEMORY[0x1E4F940B8];
        char v72 = v17 | v11;
        break;
      default:
        ++v13;
LABEL_7:
        uint64_t v14 = v7;
LABEL_8:
        uint64_t v15 = v10;
        uint64_t v16 = v11;
LABEL_10:
        ++v9;
        uint64_t v7 = v14;
        uint64_t v10 = v15;
        uint64_t v11 = v16;
        continue;
    }
    break;
  }
  do
  {
    if (*(unsigned char *)(v3 + *v23)) {
      break;
    }
    char v25 = 0;
    unsigned int v26 = 0;
    unint64_t v27 = 0;
    while (1)
    {
      uint64_t v28 = *v21;
      uint64_t v29 = *(void *)(v3 + v28);
      unint64_t v30 = v29 + 1;
      if (v29 == -1 || v30 > *(void *)(v3 + *v6)) {
        break;
      }
      char v31 = *(unsigned char *)(*(void *)(v3 + *v24) + v29);
      *(void *)(v3 + v28) = v30;
      v27 |= (unint64_t)(v31 & 0x7F) << v25;
      if ((v31 & 0x80) == 0) {
        goto LABEL_25;
      }
      v25 += 7;
      BOOL v32 = v26++ >= 9;
      if (v32)
      {
        unint64_t v27 = 0;
        int v33 = *(unsigned __int8 *)(v3 + *v23);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v23) = 1;
LABEL_25:
    int v33 = *(unsigned __int8 *)(v3 + *v23);
    if (*(unsigned char *)(v3 + *v23)) {
      unint64_t v27 = 0;
    }
LABEL_27:
    int v34 = v27 & 7;
    if (v33 || v34 == 4) {
      break;
    }
    unint64_t v36 = v27 >> 3;
    BOOL v37 = v19;
    if ((v74 & 1) == 0)
    {
      uint64_t v38 = v20;
      do
      {
        int v40 = *v38++;
        int v39 = v40;
        BOOL v37 = v40 != 0;
        if (v40) {
          BOOL v41 = v39 == v36;
        }
        else {
          BOOL v41 = 1;
        }
      }
      while (!v41);
    }
    switch(v36)
    {
      case 3:
        if (v37 && (*(unsigned char *)(a1 + 72) & 4) == 0)
        {
          if (v34 == 2)
          {
            int v22 = PBReaderPlaceMark();
            unint64_t v23 = (int *)MEMORY[0x1E4F940C8];
            if (!v22)
            {
              uint64_t v12 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__flags;
              LOBYTE(v19) = v72;
              goto LABEL_96;
            }
            while (*(void *)(v3 + *v21) < *(void *)(v3 + *v6) && !*(unsigned char *)(v3 + *v23))
            {
              char v43 = 0;
              unsigned int v44 = 0;
              uint64_t v45 = 0;
              while (1)
              {
                uint64_t v46 = *v21;
                uint64_t v47 = *(void *)(v3 + v46);
                unint64_t v48 = v47 + 1;
                if (v47 == -1 || v48 > *(void *)(v3 + *v6)) {
                  break;
                }
                char v49 = *(unsigned char *)(*(void *)(v3 + *v24) + v47);
                *(void *)(v3 + v46) = v48;
                v45 |= (unint64_t)(v49 & 0x7F) << v43;
                if (v49 < 0)
                {
                  v43 += 7;
                  BOOL v32 = v44++ >= 9;
                  if (!v32) {
                    continue;
                  }
                }
                goto LABEL_60;
              }
              *(unsigned char *)(v3 + *v23) = 1;
LABEL_60:
              PBRepeatedUInt32Add();
            }
            PBReaderRecallMark();
          }
          else
          {
            char v59 = 0;
            unsigned int v60 = 0;
            uint64_t v61 = 0;
            unint64_t v23 = (int *)MEMORY[0x1E4F940C8];
            while (1)
            {
              uint64_t v62 = *v21;
              uint64_t v63 = *(void *)(v3 + v62);
              unint64_t v64 = v63 + 1;
              if (v63 == -1 || v64 > *(void *)(v3 + *v6)) {
                break;
              }
              char v65 = *(unsigned char *)(*(void *)(v3 + *v24) + v63);
              *(void *)(v3 + v62) = v64;
              v61 |= (unint64_t)(v65 & 0x7F) << v59;
              if (v65 < 0)
              {
                v59 += 7;
                BOOL v32 = v60++ >= 9;
                if (!v32) {
                  continue;
                }
              }
              goto LABEL_90;
            }
            *(unsigned char *)(v3 + *v23) = 1;
LABEL_90:
            PBRepeatedUInt32Add();
          }
          LOBYTE(v19) = v72;
          goto LABEL_92;
        }
        break;
      case 2:
        if (v8)
        {
          char v50 = 0;
          unsigned int v51 = 0;
          uint64_t v52 = 0;
          *(unsigned char *)(a1 + 72) |= 1u;
          unint64_t v23 = (int *)MEMORY[0x1E4F940C8];
          while (1)
          {
            uint64_t v53 = *v21;
            uint64_t v54 = *(void *)(v3 + v53);
            unint64_t v55 = v54 + 1;
            if (v54 == -1 || v55 > *(void *)(v3 + *v6)) {
              break;
            }
            char v56 = *(unsigned char *)(*(void *)(v3 + *v24) + v54);
            *(void *)(v3 + v53) = v55;
            v52 |= (unint64_t)(v56 & 0x7F) << v50;
            if ((v56 & 0x80) == 0) {
              goto LABEL_78;
            }
            v50 += 7;
            BOOL v32 = v51++ >= 9;
            if (v32)
            {
              LODWORD(v52) = 0;
              goto LABEL_80;
            }
          }
          *(unsigned char *)(v3 + *v23) = 1;
LABEL_78:
          if (*(unsigned char *)(v3 + *v23)) {
            LODWORD(v52) = 0;
          }
LABEL_80:
          *(_DWORD *)(a1 + 68) = v52;
LABEL_92:
          if ((v73 & 1) == 0) {
            goto LABEL_94;
          }
          continue;
        }
        break;
      case 1:
        if (v37 && (*(unsigned char *)(a1 + 72) & 8) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_116;
          }
          unsigned int v42 = objc_alloc_init(GEOPDMapsIdentifier);
          if (!GEOPDMapsIdentifierReadAllFrom((uint64_t)v42, (void *)v3))
          {

LABEL_116:
            int v22 = 0;
            uint64_t v12 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__flags;
            LOBYTE(v19) = v72;
            unint64_t v23 = (int *)MEMORY[0x1E4F940C8];
            goto LABEL_96;
          }
          PBReaderRecallMark();
          -[GEOPDRelatedPlace _addNoFlagsMapsId:](a1, v42);

          LOBYTE(v19) = v72;
          unint64_t v23 = (int *)MEMORY[0x1E4F940C8];
          goto LABEL_92;
        }
        break;
      default:
        if ((v71 & 1) != 0 && (*(unsigned char *)(a1 + 72) & 2) == 0)
        {
          if (!*(void *)(a1 + 16))
          {
            id v57 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            uint64_t v58 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v57;
          }
          int v22 = PBUnknownFieldAdd();
          LOBYTE(v19) = v72;
          unint64_t v23 = (int *)MEMORY[0x1E4F940C8];
          if (!v22)
          {
            uint64_t v12 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__flags;
            goto LABEL_98;
          }
          goto LABEL_92;
        }
        break;
    }
    int v22 = PBReaderSkipValueWithTag();
    LOBYTE(v19) = v72;
    unint64_t v23 = (int *)MEMORY[0x1E4F940C8];
    if ((v22 & v73 & 1) == 0) {
      goto LABEL_95;
    }
  }
  while (*(void *)(v3 + *v21) < *(void *)(v3 + *v6));
LABEL_94:
  int v22 = 1;
LABEL_95:
  uint64_t v12 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__flags;
LABEL_96:
  LOBYTE(v18) = v71;
LABEL_97:
  if (v18) {
LABEL_98:
  }
    *(unsigned char *)(a1 + v12[308]) |= 2u;
  if (v19 & 1 | ((v22 & 1) == 0))
  {
    *(unsigned char *)(a1 + v12[308]) |= 8u;
    *(unsigned char *)(a1 + v12[308]) |= 4u;
    goto LABEL_109;
  }
  if (v20)
  {
    while (2)
    {
      while (1)
      {
        int v67 = *v20++;
        int v66 = v67;
        if (v67 == 1) {
          break;
        }
        if (v66 == 3)
        {
          char v68 = 4;
          goto LABEL_108;
        }
        if (!v66) {
          goto LABEL_109;
        }
      }
      char v68 = 8;
LABEL_108:
      *(unsigned char *)(a1 + v12[308]) |= v68;
      continue;
    }
  }
LABEL_109:
  if (v22)
  {
    unint64_t v3 = *(unsigned char *)(v3 + *v23) == 0;
    if ((v19 & 1) == 0) {
      return v3;
    }
LABEL_113:
    BOOL v69 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  else
  {
    unint64_t v3 = 0;
    if (v19) {
      goto LABEL_113;
    }
  }
  return v3;
}

void sub_188F332D4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F3339C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F334A8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F338D8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDGroundViewLabelReadAllFrom(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  objc_sync_enter(v5);
  if (v5)
  {
    uint64_t v6 = (int *)MEMORY[0x1E4F940E8];
    uint64_t v7 = (int *)MEMORY[0x1E4F940E0];
    char v8 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v5[*MEMORY[0x1E4F940E8]] < *(void *)&v5[*MEMORY[0x1E4F940E0]])
    {
      uint64_t v9 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v5[*v8]) {
          break;
        }
        char v10 = 0;
        unsigned int v11 = 0;
        unint64_t v12 = 0;
        while (1)
        {
          uint64_t v13 = *v6;
          uint64_t v14 = *(void *)&v5[v13];
          unint64_t v15 = v14 + 1;
          if (v14 == -1 || v15 > *(void *)&v5[*v7]) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)&v5[*v9] + v14);
          *(void *)&v5[v13] = v15;
          v12 |= (unint64_t)(v16 & 0x7F) << v10;
          if ((v16 & 0x80) == 0) {
            goto LABEL_13;
          }
          v10 += 7;
          BOOL v17 = v11++ >= 9;
          if (v17)
          {
            unint64_t v12 = 0;
            int v18 = v5[*v8];
            goto LABEL_15;
          }
        }
        v5[*v8] = 1;
LABEL_13:
        int v18 = v5[*v8];
        if (v5[*v8]) {
          unint64_t v12 = 0;
        }
LABEL_15:
        if (v18 || (v12 & 7) == 4) {
          break;
        }
        if ((v12 >> 3) == 2)
        {
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_42;
          }
          unint64_t v27 = objc_alloc_init(GEOPDGroundViewLabelInfo);
          if (!GEOPDGroundViewLabelInfoReadAllFrom((uint64_t)v27, v5, a3))
          {

            goto LABEL_42;
          }
          PBReaderRecallMark();
          -[GEOPDGroundViewLabel addGroundViewLabelInfo:](a1, v27);
        }
        else if ((v12 >> 3) == 1)
        {
          char v20 = 0;
          unsigned int v21 = 0;
          uint64_t v22 = 0;
          *(unsigned char *)(a1 + 32) |= 1u;
          while (1)
          {
            uint64_t v23 = *v6;
            uint64_t v24 = *(void *)&v5[v23];
            unint64_t v25 = v24 + 1;
            if (v24 == -1 || v25 > *(void *)&v5[*v7]) {
              break;
            }
            char v26 = *(unsigned char *)(*(void *)&v5[*v9] + v24);
            *(void *)&v5[v23] = v25;
            v22 |= (unint64_t)(v26 & 0x7F) << v20;
            if ((v26 & 0x80) == 0) {
              goto LABEL_36;
            }
            v20 += 7;
            BOOL v17 = v21++ >= 9;
            if (v17)
            {
              uint64_t v22 = 0;
              goto LABEL_38;
            }
          }
          v5[*v8] = 1;
LABEL_36:
          if (v5[*v8]) {
            uint64_t v22 = 0;
          }
LABEL_38:
          *(void *)(a1 + 24) = v22;
        }
        else
        {
          if (!*(void *)(a1 + 8))
          {
            id v28 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            uint64_t v29 = *(void **)(a1 + 8);
            *(void *)(a1 + 8) = v28;
          }
          if (!PBUnknownFieldAdd()) {
            goto LABEL_42;
          }
        }
      }
      while (*(void *)&v5[*v6] < *(void *)&v5[*v7]);
    }
    BOOL v30 = v5[*v8] == 0;
  }
  else
  {
LABEL_42:
    BOOL v30 = 0;
  }
  objc_sync_exit(v5);

  return v30;
}

void sub_188F33BC8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDGroundViewLabelInfoReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 68))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOPDGroundViewLabelInfoReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)char v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 72));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 64) = [v8 position];
  *(_DWORD *)(a1 + 68) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOPDGroundViewLabelInfoReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOPDGroundViewLabelInfoReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOPDGroundViewLabelInfoReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 72));
  return Specified;
}

void sub_188F33D54(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDGroundViewLabelInfoReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 72));
  uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 68);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 64)];
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  unsigned int v11 = vaddv_s16((int16x4_t)(*(void *)&vshl_u16((uint16x4_t)(*(void *)&vdup_n_s16(*(unsigned __int8 *)(a1 + 76)) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFEFFFDFFFCFFFBLL) & 0xFF01FF01FF01FF01));
  while (2)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    switch(a3[v10])
    {
      case -4:
        ++v11;
        uint64_t v12 = v7;
        goto LABEL_8;
      case -3:
        char v9 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_8;
      case 0:
        BOOL v14 = v11 > 1;
        char v15 = v14 & ~(_BYTE)v7;
        unsigned __int8 v16 = v14 | v7;
        char v57 = v15 | v8;
        char v58 = v16 | v15 | v8;
        if ((v16 | v9)) {
          BOOL v17 = 0;
        }
        else {
          BOOL v17 = a3;
        }
        char v59 = (v17 == 0) | v16;
        BOOL v60 = v16;
        int v18 = (int *)MEMORY[0x1E4F940E8];
        int v19 = (int *)MEMORY[0x1E4F940C8];
        char v20 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v11;
LABEL_7:
        uint64_t v12 = v7;
        uint64_t v13 = v8;
LABEL_8:
        ++v10;
        uint64_t v7 = v12;
        uint64_t v8 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v18) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v19)) {
      goto LABEL_77;
    }
    char v21 = 0;
    unsigned int v22 = 0;
    unint64_t v23 = 0;
    while (1)
    {
      uint64_t v24 = *v18;
      uint64_t v25 = *(void *)(v3 + v24);
      unint64_t v26 = v25 + 1;
      if (v25 == -1 || v26 > *(void *)(v3 + *v6)) {
        break;
      }
      char v27 = *(unsigned char *)(*(void *)(v3 + *v20) + v25);
      *(void *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0) {
        goto LABEL_23;
      }
      v21 += 7;
      if (v22++ >= 9)
      {
        unint64_t v23 = 0;
        int v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_25;
      }
    }
    *(unsigned char *)(v3 + *v19) = 1;
LABEL_23:
    int v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(unsigned char *)(v3 + *v19)) {
      unint64_t v23 = 0;
    }
LABEL_25:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_77:
      int v55 = 1;
      goto LABEL_78;
    }
    unint64_t v31 = v23 >> 3;
    BOOL v32 = v60;
    if ((v59 & 1) == 0)
    {
      int v33 = v17;
      do
      {
        int v35 = *v33++;
        int v34 = v35;
        BOOL v32 = v35 != 0;
        if (v35) {
          BOOL v36 = v34 == v31;
        }
        else {
          BOOL v36 = 1;
        }
      }
      while (!v36);
    }
    switch((int)v31)
    {
      case 1:
        if (!v32) {
          goto LABEL_61;
        }
        if ((*(unsigned char *)(a1 + 76) & 0x10) == 0)
        {
          uint64_t v37 = PBReaderReadString();
          uint64_t v38 = 40;
          goto LABEL_60;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_95;
        }
        char v49 = 8 * *(unsigned char *)(a1 + 76);
        goto LABEL_69;
      case 2:
        if (!v32) {
          goto LABEL_61;
        }
        if ((*(unsigned char *)(a1 + 76) & 0x20) == 0)
        {
          uint64_t v37 = PBReaderReadString();
          uint64_t v38 = 48;
          goto LABEL_60;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_95;
        }
        char v49 = 4 * *(unsigned char *)(a1 + 76);
        goto LABEL_69;
      case 3:
        if ((v9 & 1) == 0) {
          goto LABEL_61;
        }
        *(unsigned char *)(a1 + 76) |= 2u;
        uint64_t v42 = *v18;
        unint64_t v43 = *(void *)(v3 + v42);
        if (v43 <= 0xFFFFFFFFFFFFFFF7 && v43 + 8 <= *(void *)(v3 + *v6))
        {
          uint64_t v44 = *(void *)(*(void *)(v3 + *v20) + v43);
          *(void *)(v3 + v42) = v43 + 8;
        }
        else
        {
          *(unsigned char *)(v3 + *v19) = 1;
          uint64_t v44 = 0;
        }
        uint64_t v50 = 56;
        goto LABEL_75;
      case 4:
        if ((v9 & 1) == 0) {
          goto LABEL_61;
        }
        *(unsigned char *)(a1 + 76) |= 1u;
        uint64_t v45 = *v18;
        unint64_t v46 = *(void *)(v3 + v45);
        if (v46 <= 0xFFFFFFFFFFFFFFF7 && v46 + 8 <= *(void *)(v3 + *v6))
        {
          uint64_t v44 = *(void *)(*(void *)(v3 + *v20) + v46);
          *(void *)(v3 + v45) = v46 + 8;
        }
        else
        {
          *(unsigned char *)(v3 + *v19) = 1;
          uint64_t v44 = 0;
        }
        uint64_t v50 = 24;
LABEL_75:
        *(void *)(a1 + v50) = v44;
        goto LABEL_76;
      case 5:
        if (!v32) {
          goto LABEL_61;
        }
        if ((*(unsigned char *)(a1 + 76) & 8) == 0)
        {
          uint64_t v37 = PBReaderReadString();
          uint64_t v38 = 32;
LABEL_60:
          uint64_t v47 = *(void **)(a1 + v38);
          *(void *)(a1 + v38) = v37;

          --v10;
LABEL_70:
          int v19 = (int *)MEMORY[0x1E4F940C8];
          goto LABEL_76;
        }
        if (PBReaderSkipValueWithTag())
        {
          char v49 = 16 * *(unsigned char *)(a1 + 76);
LABEL_69:
          v10 += v49 >> 7;
          goto LABEL_70;
        }
LABEL_95:
        int v55 = 0;
        char v56 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__flags;
        int v19 = (int *)MEMORY[0x1E4F940C8];
LABEL_79:
        if (v57) {
LABEL_80:
        }
          *(unsigned char *)(a1 + *v56) |= 4u;
        if (v60 || (v55 & 1) == 0)
        {
          *(unsigned char *)(a1 + *v56) |= 0x10u;
          *(unsigned char *)(a1 + *v56) |= 0x20u;
          *(unsigned char *)(a1 + *v56) |= 8u;
        }
        else if (v17)
        {
          while (1)
          {
            int v52 = *v17++;
            char v51 = 16;
            switch(v52)
            {
              case 0:
                goto LABEL_89;
              case 1:
                goto LABEL_87;
              case 2:
                char v51 = 32;
                goto LABEL_87;
              case 5:
                char v51 = 8;
LABEL_87:
                *(unsigned char *)(a1 + *v56) |= v51;
                break;
              default:
                continue;
            }
          }
        }
LABEL_89:
        if (v55) {
          unint64_t v3 = *(unsigned char *)(v3 + *v19) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v60)
        {
          uint64_t v53 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      default:
        if ((v57 & 1) == 0 || (*(unsigned char *)(a1 + 76) & 4) != 0)
        {
LABEL_61:
          char v48 = PBReaderSkipValueWithTag();
          int v19 = (int *)MEMORY[0x1E4F940C8];
          if ((v48 & 1) == 0)
          {
            int v55 = 0;
LABEL_78:
            char v56 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__flags;
            goto LABEL_79;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v39 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            int v40 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v39;
          }
          int v41 = PBUnknownFieldAdd();
          int v19 = (int *)MEMORY[0x1E4F940C8];
          if (!v41)
          {
            int v55 = 0;
            char v56 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__flags;
            goto LABEL_80;
          }
        }
LABEL_76:
        if (!(v58 & 1 | (v10 != 0))) {
          goto LABEL_77;
        }
        continue;
    }
  }
}

void sub_188F356F0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F35AB8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F36718(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F37B00(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F37C30(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F37ED4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F37F9C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F38064(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F38190(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDPlaceRequestReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 116))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOPDPlaceRequestReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 120));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 112) = [v8 position];
  *(_DWORD *)(a1 + 116) = [v8 length];
  if (a3) {
    char v9 = (int *)&GEOPDPlaceRequestReadAllFrom_recursiveTag;
  }
  else {
    char v9 = (int *)&GEOPDPlaceRequestReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOPDPlaceRequestReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOPDPlaceRequestCallReadAllRecursiveWithoutSynchronized(a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 120));
  return Specified;
}

void sub_188F38388(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(56 * a2);
}

void std::vector<GEOPathMatcherRoadKey>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 5)
  {
    if (a2 >> 59) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::ControlPoint>>(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFE0];
    char v9 = &v6[32 * v8];
    unsigned int v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v12 - 1) = v13;
        v12 -= 32;
        v10 -= 32;
      }
      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::ControlPoint>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(32 * a2);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  id v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E4FBA350], MEMORY[0x1E4FBA1F8]);
}

void sub_188F38C50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

os_log_t GEOGreenTeaGetLog()
{
  return GEOFindOrCreateLog("com.apple.greentea", "GEO");
}

id GEOConfigGetValueWithSourceString(int a1, uint64_t a2, void *a3)
{
  return _getValue(a1, a2, 1, 0, a3, 0);
}

void sub_188F3951C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F395F0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOPDPlaceResponseIsDirty(uint64_t a1)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 128));
  int v2 = *(__int16 *)(a1 + 140);
  if (v2 < 0) {
    return 1;
  }
  if ((v2 & 0x800) == 0 || (uint64_t v3 = *(os_unfair_lock_s **)(a1 + 88)) == 0)
  {
LABEL_6:
    if ((v2 & 0x77F0) != 0) {
      return 1;
    }
    if ((v2 & 0x2000) != 0)
    {
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      id v7 = *(id *)(a1 + 104);
      uint64_t v8 = [v7 countByEnumeratingWithState:&v26 objects:v32 count:16];
      if (v8)
      {
        uint64_t v9 = v8;
        uint64_t v10 = *(void *)v27;
LABEL_12:
        uint64_t v11 = 0;
        while (1)
        {
          if (*(void *)v27 != v10) {
            objc_enumerationMutation(v7);
          }
          if (GEOPDPlaceIsDirty(*(os_unfair_lock_s **)(*((void *)&v26 + 1) + 8 * v11))) {
            goto LABEL_40;
          }
          if (v9 == ++v11)
          {
            uint64_t v9 = [v7 countByEnumeratingWithState:&v26 objects:v32 count:16];
            if (v9) {
              goto LABEL_12;
            }
            break;
          }
        }
      }

      LOWORD(v2) = *(_WORD *)(a1 + 140);
    }
    if ((v2 & 0x1000) != 0)
    {
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      id v7 = *(id *)(a1 + 96);
      uint64_t v12 = [v7 countByEnumeratingWithState:&v22 objects:v31 count:16];
      if (v12)
      {
        uint64_t v13 = v12;
        uint64_t v14 = *(void *)v23;
LABEL_22:
        uint64_t v15 = 0;
        while (1)
        {
          if (*(void *)v23 != v14) {
            objc_enumerationMutation(v7);
          }
          if (GEOPDMapsResultIsDirty(*(os_unfair_lock_s **)(*((void *)&v22 + 1) + 8 * v15))) {
            goto LABEL_40;
          }
          if (v13 == ++v15)
          {
            uint64_t v13 = [v7 countByEnumeratingWithState:&v22 objects:v31 count:16];
            if (v13) {
              goto LABEL_22;
            }
            break;
          }
        }
      }

      LOWORD(v2) = *(_WORD *)(a1 + 140);
    }
    if ((v2 & 0x400) == 0) {
      return 0;
    }
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    id v7 = *(id *)(a1 + 80);
    uint64_t v5 = [v7 countByEnumeratingWithState:&v18 objects:v30 count:16];
    if (!v5)
    {
LABEL_41:

      return v5;
    }
    uint64_t v16 = *(void *)v19;
LABEL_33:
    uint64_t v17 = 0;
    while (1)
    {
      if (*(void *)v19 != v16) {
        objc_enumerationMutation(v7);
      }
      if (GEOPDDotPlaceIsDirty(*(void *)(*((void *)&v18 + 1) + 8 * v17))) {
        break;
      }
      if (v5 == ++v17)
      {
        uint64_t v5 = [v7 countByEnumeratingWithState:&v18 objects:v30 count:16];
        if (v5) {
          goto LABEL_33;
        }
        goto LABEL_41;
      }
    }
LABEL_40:
    uint64_t v5 = 1;
    goto LABEL_41;
  }
  os_unfair_lock_lock_with_options();
  char IsDirty = _GEOPDPlaceGlobalResultIsDirty((uint64_t)v3);
  os_unfair_lock_unlock(v3 + 110);
  if ((IsDirty & 1) == 0)
  {
    LOWORD(v2) = *(_WORD *)(a1 + 140);
    goto LABEL_6;
  }
  return 1;
}

void sub_188F39A78(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F39B80(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F39E9C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F39FA8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F3A0E4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F3A1F4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F3A304(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F3A414(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F3A524(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F3A94C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F3AA20(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F3AD78(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F3AE90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t geo::codec::decodeIntCompressorArray<unsigned short>(void *a1, uint64_t *a2, char a3, char a4, uint64_t a5)
{
  uint64_t v5 = *(uint16x8_t **)a5;
  uint64_t v6 = *(void *)(a5 + 8);
  int v16 = 0;
  if (!a2) {
    return 0;
  }
  uint64_t result = geo::codec::chapterReadVarUint32(a1, (unsigned int *)&v16);
  if (result)
  {
    uint64_t v12 = v16;
    uint64_t v13 = a1[6];
    unint64_t v14 = v13 + v16;
    if (v14 <= a1[7])
    {
      uint64_t v15 = (unsigned __int8 *)(a1[5] + v13);
      a1[6] = v14;
      return mgcl::ints::IntDecompressor<unsigned short>::decompress(a2, v15, v12, a3, a4, (v6 - (uint64_t)v5) >> 1, v5) == 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t geo::codec::decodeIntCompressorArray<unsigned short>(void *a1, uint64_t *a2, char a3, char a4, unint64_t a5, uint16x8_t *a6)
{
  int v17 = 0;
  if (!a2) {
    return 0;
  }
  uint64_t result = geo::codec::chapterReadVarUint32(a1, (unsigned int *)&v17);
  if (result)
  {
    uint64_t v13 = v17;
    uint64_t v14 = a1[6];
    unint64_t v15 = v14 + v17;
    if (v15 <= a1[7])
    {
      int v16 = (unsigned __int8 *)(a1[5] + v14);
      a1[6] = v15;
      return mgcl::ints::IntDecompressor<unsigned short>::decompress(a2, v16, v13, a3, a4, a5, a6) == 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t mgcl::ints::IntDecompressor<unsigned short>::decompress(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, char a4, char a5, unint64_t a6, uint16x8_t *a7)
{
  uint64_t v376 = *MEMORY[0x1E4F143B8];
  if (!a6) {
    return 0;
  }
  bzero(a7, 2 * a6);
  size_t v12 = *a2;
  if ((v12 - 66) < 0xFFFFFFBF) {
    return 3;
  }
  if (v12 <= 0x40) {
    size_t v14 = 65 - v12;
  }
  else {
    size_t v14 = 0;
  }
  bzero(&__dst[v12], v14);
  unint64_t v15 = a6;
  memcpy(__dst, a2 + 1, v12);
  uint64_t v16 = 0;
  uint64_t v17 = v12 + 1;
  unint64_t __sz = 8 * a6;
  unint64_t v354 = 4 * a6;
  uint64_t v359 = 8 * a3 - 24;
  v360 = a1;
  v361 = a2;
  size_t v358 = v12;
  while (2)
  {
    while (1)
    {
      unsigned int v18 = __dst[v16];
      int v19 = a2[v17];
      uint64_t v20 = v17 + 1;
      uint64_t v362 = v16;
      char v21 = 0;
      unint64_t v22 = 0;
      if (!__dst[v16]) {
        break;
      }
      uint64_t v23 = v17;
      unint64_t v24 = 0;
      long long v25 = &a2[v20];
      uint64_t v26 = 1;
      uint64_t v363 = v23;
      uint64_t v27 = v359 - 8 * v23;
      do
      {
        uint64_t v28 = v26;
        uint64_t v29 = v27;
        int v30 = (char)v25[v22];
        v24 |= (unint64_t)(v25[v22] & 0x7F) << v21;
        if (v22 > 8) {
          break;
        }
        ++v22;
        v21 += 7;
        ++v26;
        v27 -= 8;
      }
      while (v30 < 0);
      char v31 = 0;
      unint64_t v32 = 0;
      unint64_t v33 = 0;
      int v34 = &a2[v363];
      do
      {
        int v35 = (char)v34[v28 + 1];
        v33 |= (unint64_t)(v34[++v28] & 0x7F) << v31;
        if (v32 > 8) {
          break;
        }
        ++v32;
        v31 += 7;
        v29 -= 8;
      }
      while (v35 < 0);
      switch(v19)
      {
        case 1:
          if (!a1[3]) {
            operator new();
          }
          BOOL v36 = v18 == 1;
          unsigned int v37 = v33 - 2;
          if (v33 < 2) {
            return 3;
          }
          uint64_t v38 = &a2[v363 + v28];
          unsigned int v39 = v38[1];
          int v40 = v38[2];
          uint64_t v41 = *a1;
          uint64_t v42 = (char *)a1[1];
          unint64_t v43 = &v42[-*a1];
          if (v18 != 1)
          {
            size_t v146 = v354 - (void)v43;
            if (v354 <= (unint64_t)v43)
            {
              long long v147 = v360;
              unsigned int v153 = a6;
              if (v354 < (unint64_t)v43) {
                v360[1] = v41 + v354;
              }
              goto LABEL_309;
            }
            long long v147 = v360;
            uint64_t v148 = v360[2];
            if (v148 - (uint64_t)v42 >= v146)
            {
              v350 = &v42[v146];
              int v165 = v42;
              int v166 = v40;
              unsigned int v167 = v39;
              bzero(v165, v354 - (void)v43);
              unsigned int v39 = v167;
              BOOL v36 = v18 == 1;
              int v40 = v166;
              unsigned int v37 = v33 - 2;
              v360[1] = (uint64_t)v350;
              unsigned int v153 = a6;
LABEL_309:
              v324 = (int32x4_t *)*v147;
              v325 = *(uint64_t **)v147[3];
              LODWORD(v366) = 0;
              BYTE4(v366) = a4;
              BYTE5(v366) = a5;
              WORD3(v366) = 0;
              uint64_t v367 = 1;
              __int16 v368 = 0;
              char v369 = v36;
              int v370 = 0;
              if (v39 >= 4) {
                char v326 = 1;
              }
              else {
                char v326 = v39;
              }
              char v371 = v326;
              if (v40 == 2) {
                char v327 = 4;
              }
              else {
                char v327 = 1;
              }
              if (!v40) {
                char v327 = 0;
              }
              char v372 = v327;
              *((void *)&v366 + 1) = __PAIR64__(v153, v37);
              uint64_t v328 = *v325;
              uint64_t v373 = (uint64_t)&v361[v363 + 3 + v28];
              uint64_t v374 = v37;
              uint64_t result = gcl::polyline::DecoderImpl::decompressAttributes(v328, (uint64_t)&v373, v324, 0, &v366);
              if (result) {
                goto LABEL_323;
              }
              v329 = a7;
              unint64_t v15 = a6;
              unint64_t v330 = a6;
              a1 = v360;
              do
              {
                __int32 v331 = v324->i32[0];
                v324 = (int32x4_t *)((char *)v324 + 4);
                __int16 v332 = v24 + v331;
                if (v18 < 0x40) {
                  __int16 v332 = ((unint64_t)v329->u16[0] << v18) | v332 & ~(-1 << v18);
                }
                v329->i16[0] = v332;
                v329 = (uint16x8_t *)((char *)v329 + 2);
                --v330;
              }
              while (v330);
              goto LABEL_301;
            }
            unsigned int v341 = v39;
            int v345 = v40;
            if ((v354 & 0x8000000000000000) != 0) {
LABEL_326:
            }
              std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
            unint64_t v149 = (unint64_t)v43;
            unint64_t v150 = v148 - v41;
            uint64_t v151 = 2 * v150;
            if (2 * v150 <= v354) {
              uint64_t v151 = 4 * a6;
            }
            if (v150 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v152 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v152 = v151;
            }
            size_t v338 = v152;
            v335 = (char *)operator new(v152);
            v333 = &v335[v149];
            bzero(&v335[v149], v146);
            if (v42 == (char *)v41)
            {
              long long v147 = v360;
              unsigned int v153 = a6;
              unsigned int v37 = v33 - 2;
              int v40 = v345;
              BOOL v36 = v18 == 1;
              unsigned int v39 = v341;
              uint64_t v155 = v335;
              size_t v154 = v338;
              uint64_t v177 = v333;
              goto LABEL_307;
            }
            if (v149 < 8)
            {
              long long v147 = v360;
              unsigned int v153 = a6;
              unsigned int v37 = v33 - 2;
              int v40 = v345;
              BOOL v36 = v18 == 1;
              unsigned int v39 = v341;
              uint64_t v155 = v335;
              size_t v154 = v338;
              int v156 = v333;
              goto LABEL_304;
            }
            unint64_t v187 = v149;
            uint64_t v155 = v335;
            size_t v154 = v338;
            long long v147 = v360;
            unsigned int v153 = a6;
            unsigned int v37 = v33 - 2;
            int v40 = v345;
            BOOL v36 = v18 == 1;
            unsigned int v39 = v341;
            int v156 = v333;
            if ((unint64_t)(v41 - (void)v335) >= 0x20)
            {
              if (v187 < 0x20)
              {
                unint64_t v188 = 0;
                goto LABEL_219;
              }
              unint64_t v188 = v187 & 0xFFFFFFFFFFFFFFE0;
              uint64_t v229 = &v335[v187 - 16];
              uint64_t v230 = v42 - 16;
              unint64_t v231 = v187 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                long long v232 = *(_OWORD *)v230;
                *((_OWORD *)v229 - 1) = *((_OWORD *)v230 - 1);
                *(_OWORD *)uint64_t v229 = v232;
                v229 -= 32;
                v230 -= 32;
                v231 -= 32;
              }
              while (v231);
              if (v187 == v188) {
                goto LABEL_306;
              }
              if ((v187 & 0x18) != 0)
              {
LABEL_219:
                int v156 = &v333[-(v187 & 0xFFFFFFFFFFFFFFF8)];
                int v233 = &v42[-v188 - v41 - 8 + (void)v335];
                unsigned int v234 = &v42[-v188 - 8];
                unint64_t v235 = v188 - (v187 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  uint64_t v236 = *(void *)v234;
                  v234 -= 8;
                  *(void *)int v233 = v236;
                  v233 -= 8;
                  v235 += 8;
                }
                while (v235);
                v42 -= v187 & 0xFFFFFFFFFFFFFFF8;
                if (v187 == (v187 & 0xFFFFFFFFFFFFFFF8)) {
                  goto LABEL_306;
                }
                goto LABEL_304;
              }
              int v156 = &v333[-v188];
              v42 -= v188;
            }
LABEL_304:
            v322 = v156 - 1;
            do
            {
              char v323 = *--v42;
              *v322-- = v323;
            }
            while (v42 != (char *)v41);
LABEL_306:
            uint64_t v42 = (char *)v41;
            uint64_t v177 = v155;
LABEL_307:
            *long long v147 = (uint64_t)v177;
            v147[1] = (uint64_t)&v155[v354];
            v147[2] = (uint64_t)&v155[v154];
            if (v42)
            {
              operator delete(v42);
              unsigned int v39 = v341;
              BOOL v36 = v18 == 1;
              int v40 = v345;
              unsigned int v37 = v33 - 2;
            }
            goto LABEL_309;
          }
          LODWORD(v44) = a6;
          size_t v45 = a6 - (void)v43;
          if (a6 > (unint64_t)v43)
          {
            unint64_t v46 = v360;
            uint64_t v47 = v360[2];
            if (v47 - (uint64_t)v42 < v45)
            {
              unsigned int v339 = v39;
              BOOL v351 = v36;
              int v342 = v40;
              if ((a6 & 0x8000000000000000) != 0) {
                goto LABEL_326;
              }
              unint64_t v48 = (unint64_t)v43;
              unint64_t v49 = v47 - v41;
              uint64_t v50 = 2 * v49;
              if (2 * v49 <= a6) {
                uint64_t v50 = a6;
              }
              if (v49 >= 0x3FFFFFFFFFFFFFFFLL) {
                size_t v51 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                size_t v51 = v50;
              }
              v336 = (char *)operator new(v51);
              v334 = &v336[v48];
              bzero(&v336[v48], v45);
              size_t v52 = v51;
              if (v42 == (char *)v41)
              {
                unint64_t v46 = v360;
                unint64_t v44 = a6;
                unsigned int v37 = v33 - 2;
                int v40 = v342;
                BOOL v36 = v351;
                unsigned int v39 = v339;
                uint64_t v175 = &v336[v48];
                uint64_t v53 = v336;
                goto LABEL_276;
              }
              if (v48 < 8)
              {
                unint64_t v46 = v360;
                unint64_t v44 = a6;
                unsigned int v37 = v33 - 2;
                int v40 = v342;
                BOOL v36 = v351;
                unsigned int v39 = v339;
                uint64_t v54 = &v336[v48];
                uint64_t v53 = v336;
                goto LABEL_273;
              }
              uint64_t v54 = &v336[v48];
              uint64_t v53 = v336;
              unint64_t v46 = v360;
              unint64_t v44 = a6;
              unsigned int v37 = v33 - 2;
              int v40 = v342;
              BOOL v36 = v351;
              unsigned int v39 = v339;
              if ((unint64_t)(v41 - (void)v336) >= 0x20)
              {
                if (v48 < 0x20)
                {
                  unint64_t v186 = 0;
                  goto LABEL_211;
                }
                unint64_t v186 = v48 & 0xFFFFFFFFFFFFFFE0;
                unsigned int v221 = &v336[v48 - 16];
                unint64_t v222 = v42 - 16;
                unint64_t v223 = v48 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  long long v224 = *(_OWORD *)v222;
                  *((_OWORD *)v221 - 1) = *((_OWORD *)v222 - 1);
                  *(_OWORD *)unsigned int v221 = v224;
                  v221 -= 32;
                  v222 -= 32;
                  v223 -= 32;
                }
                while (v223);
                if (v48 == v186) {
                  goto LABEL_275;
                }
                if ((v48 & 0x18) != 0)
                {
LABEL_211:
                  uint64_t v54 = &v334[-(v48 & 0xFFFFFFFFFFFFFFF8)];
                  unint64_t v225 = &v42[-v186 - v41 - 8 + (void)v336];
                  char v226 = &v42[-v186 - 8];
                  unint64_t v227 = v186 - (v48 & 0xFFFFFFFFFFFFFFF8);
                  do
                  {
                    uint64_t v228 = *(void *)v226;
                    v226 -= 8;
                    *(void *)unint64_t v225 = v228;
                    v225 -= 8;
                    v227 += 8;
                  }
                  while (v227);
                  v42 -= v48 & 0xFFFFFFFFFFFFFFF8;
                  if (v48 == (v48 & 0xFFFFFFFFFFFFFFF8)) {
                    goto LABEL_275;
                  }
                  goto LABEL_273;
                }
                uint64_t v54 = &v334[-v186];
                v42 -= v186;
              }
LABEL_273:
              int v262 = v54 - 1;
              do
              {
                char v263 = *--v42;
                *v262-- = v263;
              }
              while (v42 != (char *)v41);
LABEL_275:
              uint64_t v42 = (char *)v41;
              uint64_t v175 = v53;
LABEL_276:
              *unint64_t v46 = (uint64_t)v175;
              v46[1] = (uint64_t)&v53[v44];
              v46[2] = (uint64_t)&v53[v52];
              if (v42)
              {
                int v264 = v44;
                operator delete(v42);
                LODWORD(v44) = v264;
                unsigned int v39 = v339;
                BOOL v36 = v351;
                int v40 = v342;
                unsigned int v37 = v33 - 2;
              }
              goto LABEL_278;
            }
            v349 = &v42[v45];
            uint64_t v161 = v42;
            int v162 = v40;
            BOOL v163 = v36;
            unsigned int v164 = v39;
            bzero(v161, a6 - (void)v43);
            LODWORD(v44) = a6;
            unsigned int v39 = v164;
            BOOL v36 = v163;
            int v40 = v162;
            unsigned int v37 = v33 - 2;
            unint64_t v157 = (unint64_t)v349;
            goto LABEL_141;
          }
          unint64_t v46 = v360;
          if (a6 < (unint64_t)v43)
          {
            unint64_t v157 = v41 + a6;
LABEL_141:
            v46[1] = v157;
          }
LABEL_278:
          uint64_t v265 = *v46;
          unsigned int v266 = *(uint64_t **)v46[3];
          LODWORD(v366) = 0;
          BYTE4(v366) = a4;
          BYTE5(v366) = a5;
          WORD3(v366) = 0;
          uint64_t v367 = 1;
          __int16 v368 = 0;
          char v369 = v36;
          int v370 = 0;
          if (v39 >= 4) {
            char v267 = 1;
          }
          else {
            char v267 = v39;
          }
          char v371 = v267;
          if (v40 == 2) {
            char v268 = 4;
          }
          else {
            char v268 = 1;
          }
          if (!v40) {
            char v268 = 0;
          }
          char v372 = v268;
          *((void *)&v366 + 1) = __PAIR64__(v44, v37);
          uint64_t v269 = *v266;
          uint64_t v373 = (uint64_t)&v361[v363 + 3 + v28];
          uint64_t v374 = v37;
          uint64_t result = gcl::polyline::DecoderImpl::decompressAttributes(v269, (uint64_t)&v373, v265, 0, &v366);
          if (result) {
            goto LABEL_323;
          }
          unint64_t v15 = a6;
          if (a6 < 8)
          {
            unint64_t v271 = 0;
            a1 = v360;
LABEL_299:
            unint64_t v318 = a6 - v271;
            v319 = &a7->i8[2 * v271];
            v320 = (char *)(v265 + v271);
            do
            {
              char v321 = *v320++;
              *(_WORD *)v319 = ((_BYTE)v24 + v321) & 1 | (2 * *(_WORD *)v319);
              v319 += 2;
              --v318;
            }
            while (v318);
            goto LABEL_301;
          }
          uint64x2_t v272 = (uint64x2_t)vdupq_n_s64(v24);
          a1 = v360;
          if (a6 >= 0x10)
          {
            unint64_t v288 = a6 & 0xFFFFFFFFFFFFFFF0;
            int v289 = a7;
            uint64_t v290 = (int8x16_t *)v265;
            do
            {
              int8x16_t v291 = *v290++;
              uint32x4_t v292 = (uint32x4_t)vqtbl1q_s8(v291, (int8x16_t)xmmword_18A643780);
              uint32x4_t v293 = (uint32x4_t)vqtbl1q_s8(v291, (int8x16_t)xmmword_18A643790);
              uint32x4_t v294 = (uint32x4_t)vqtbl1q_s8(v291, (int8x16_t)xmmword_18A643760);
              uint32x4_t v295 = (uint32x4_t)vqtbl1q_s8(v291, (int8x16_t)xmmword_18A643770);
              uint16x8_t v296 = v289[1];
              int8x16_t v297 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v289->i8);
              int32x2_t v298 = (int32x2_t)vextq_s8(v297, v297, 8uLL).u64[0];
              int8x16_t v299 = (int8x16_t)vmovl_high_u16(*v289);
              int32x2_t v300 = (int32x2_t)vextq_s8(v299, v299, 8uLL).u64[0];
              int8x16_t v301 = (int8x16_t)vmovl_high_u16(v296);
              int32x2_t v302 = (int32x2_t)vextq_s8(v301, v301, 8uLL).u64[0];
              int8x16_t v303 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v296.i8);
              int32x2_t v304 = (int32x2_t)vextq_s8(v303, v303, 8uLL).u64[0];
              int32x2_t v305 = vadd_s32(v304, v304);
              v306.i64[0] = v305.u32[0];
              v306.i64[1] = v305.u32[1];
              int8x16_t v307 = v306;
              *(int32x2_t *)v303.i8 = vadd_s32(*(int32x2_t *)v303.i8, *(int32x2_t *)v303.i8);
              v306.i64[0] = v303.u32[0];
              v306.i64[1] = v303.u32[1];
              int8x16_t v308 = v306;
              int32x2_t v309 = vadd_s32(v302, v302);
              v306.i64[0] = v309.u32[0];
              v306.i64[1] = v309.u32[1];
              int8x16_t v310 = v306;
              *(int32x2_t *)v301.i8 = vadd_s32(*(int32x2_t *)v301.i8, *(int32x2_t *)v301.i8);
              v306.i64[0] = v301.u32[0];
              v306.i64[1] = v301.u32[1];
              int8x16_t v311 = v306;
              int32x2_t v312 = vadd_s32(v300, v300);
              v306.i64[0] = v312.u32[0];
              v306.i64[1] = v312.u32[1];
              int8x16_t v313 = v306;
              *(int32x2_t *)v299.i8 = vadd_s32(*(int32x2_t *)v299.i8, *(int32x2_t *)v299.i8);
              v306.i64[0] = v299.u32[0];
              v306.i64[1] = v299.u32[1];
              int8x16_t v314 = v306;
              int32x2_t v315 = vadd_s32(v298, v298);
              v306.i64[0] = v315.u32[0];
              v306.i64[1] = v315.u32[1];
              int8x16_t v316 = v306;
              *(int32x2_t *)v297.i8 = vadd_s32(*(int32x2_t *)v297.i8, *(int32x2_t *)v297.i8);
              v306.i64[0] = v297.u32[0];
              v306.i64[1] = v297.u32[1];
              int8x16_t v317 = (int8x16_t)vdupq_n_s64(1uLL);
              int8x16_t v270 = (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vorrq_s8(v308, vandq_s8((int8x16_t)vaddw_u32(v272, *(uint32x2_t *)v295.i8), v317)), (int32x4_t)vorrq_s8(v307, vandq_s8((int8x16_t)vaddw_high_u32(v272, v295), v317))), (int16x8_t)vuzp1q_s32((int32x4_t)vorrq_s8(v311, vandq_s8((int8x16_t)vaddw_u32(v272, *(uint32x2_t *)v294.i8), v317)), (int32x4_t)vorrq_s8(v310, vandq_s8((int8x16_t)vaddw_high_u32(v272, v294), v317))));
              *(int16x8_t *)int v289 = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vorrq_s8(v306, vandq_s8((int8x16_t)vaddw_u32(v272, *(uint32x2_t *)v292.i8), v317)), (int32x4_t)vorrq_s8(v316, vandq_s8((int8x16_t)vaddw_high_u32(v272, v292), v317))), (int16x8_t)vuzp1q_s32((int32x4_t)vorrq_s8(v314, vandq_s8((int8x16_t)vaddw_u32(v272, *(uint32x2_t *)v293.i8), v317)), (int32x4_t)vorrq_s8(v313, vandq_s8((int8x16_t)vaddw_high_u32(v272, v293), v317))));
              v289[1] = (uint16x8_t)v270;
              v289 += 2;
              v288 -= 16;
            }
            while (v288);
            if ((a6 & 0xFFFFFFFFFFFFFFF0) == a6) {
              goto LABEL_301;
            }
            unint64_t v271 = a6 & 0xFFFFFFFFFFFFFFF0;
            unint64_t v273 = a6 & 0xFFFFFFFFFFFFFFF0;
            if ((a6 & 8) == 0) {
              goto LABEL_299;
            }
          }
          else
          {
            unint64_t v273 = 0;
          }
          uint64_t v274 = (uint64_t *)(v265 + v273);
          int v275 = (int16x8_t *)((char *)a7 + 2 * v273);
          unint64_t v276 = v273 - (a6 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v277 = *v274++;
            v270.i64[0] = v277;
            uint32x4_t v278 = (uint32x4_t)vqtbl1q_s8(v270, (int8x16_t)xmmword_18A643780);
            uint32x4_t v279 = (uint32x4_t)vqtbl1q_s8(v270, (int8x16_t)xmmword_18A643790);
            uint16x8_t v280 = (uint16x8_t)vaddq_s16(*v275, *v275);
            uint32x4_t v281 = vmovl_high_u16(v280);
            v282.i64[0] = v281.u32[0];
            v282.i64[1] = v281.u32[1];
            int8x16_t v283 = v282;
            v282.i64[0] = v281.u32[2];
            v282.i64[1] = v281.u32[3];
            int8x16_t v284 = v282;
            uint32x4_t v285 = vmovl_u16(*(uint16x4_t *)v280.i8);
            v282.i64[0] = v285.u32[0];
            v282.i64[1] = v285.u32[1];
            int8x16_t v286 = v282;
            v282.i64[0] = v285.u32[2];
            v282.i64[1] = v285.u32[3];
            int8x16_t v287 = (int8x16_t)vdupq_n_s64(1uLL);
            int8x16_t v270 = (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vorrq_s8(v286, vandq_s8((int8x16_t)vaddw_u32(v272, *(uint32x2_t *)v278.i8), v287)), (int32x4_t)vorrq_s8(v282, vandq_s8((int8x16_t)vaddw_high_u32(v272, v278), v287))), (int16x8_t)vuzp1q_s32((int32x4_t)vorrq_s8(v283, vandq_s8((int8x16_t)vaddw_u32(v272, *(uint32x2_t *)v279.i8), v287)), (int32x4_t)vorrq_s8(v284, vandq_s8((int8x16_t)vaddw_high_u32(v272, v279), v287))));
            *v275++ = (int16x8_t)v270;
            v276 += 8;
          }
          while (v276);
          unint64_t v271 = a6 & 0xFFFFFFFFFFFFFFF8;
          if ((a6 & 0xFFFFFFFFFFFFFFF8) != a6) {
            goto LABEL_299;
          }
LABEL_301:
          uint64_t v17 = v363 + v33 + v28 + 1;
          a2 = v361;
          uint64_t v16 = v362 + 1;
          if (v362 + 1 == v358) {
            return 0;
          }
          continue;
        case 2:
          int v104 = (unsigned __int8 *)*a1;
          int v105 = (unsigned __int8 *)a1[1];
          int v106 = (char *)&v105[-*a1];
          size_t v107 = __sz - (void)v106;
          if (__sz > (unint64_t)v106)
          {
            int v108 = (unsigned __int8 *)a1[2];
            if (v108 - v105 >= v107)
            {
              bzero((void *)a1[1], __sz - (void)v106);
              a1[1] = (uint64_t)&v105[v107];
              unint64_t v113 = a6;
              goto LABEL_231;
            }
            unint64_t v352 = (unint64_t)&v105[-*a1];
            if ((__sz & 0x8000000000000000) != 0) {
              goto LABEL_326;
            }
            unint64_t v109 = v108 - v104;
            uint64_t v110 = 2 * v109;
            if (2 * v109 <= __sz) {
              uint64_t v110 = 8 * a6;
            }
            if (v109 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v111 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v111 = v110;
            }
            v347 = (char *)operator new(v111);
            v344 = &v347[v352];
            bzero(&v347[v352], v107);
            size_t v112 = v111;
            if (v105 == v104)
            {
              a1 = v360;
              unint64_t v113 = a6;
              int v168 = &v347[v352];
              int v114 = v347;
              goto LABEL_229;
            }
            if (v352 < 8)
            {
              a1 = v360;
              unint64_t v113 = a6;
              int v115 = &v347[v352];
              int v114 = v347;
              goto LABEL_226;
            }
            int v115 = &v347[v352];
            int v114 = v347;
            a1 = v360;
            unint64_t v113 = a6;
            if ((unint64_t)(v104 - (unsigned __int8 *)v347) >= 0x20)
            {
              if (v352 < 0x20)
              {
                unint64_t v170 = 0;
                goto LABEL_187;
              }
              unint64_t v170 = v352 & 0xFFFFFFFFFFFFFFE0;
              unsigned int v197 = &v347[v352 - 16];
              unsigned int v198 = (char *)(v105 - 16);
              unint64_t v199 = v352 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                long long v200 = *(_OWORD *)v198;
                *((_OWORD *)v197 - 1) = *((_OWORD *)v198 - 1);
                *(_OWORD *)unsigned int v197 = v200;
                v197 -= 32;
                v198 -= 32;
                v199 -= 32;
              }
              while (v199);
              if (v352 == v170) {
                goto LABEL_228;
              }
              if ((v352 & 0x18) != 0)
              {
LABEL_187:
                int v115 = &v344[-(v352 & 0xFFFFFFFFFFFFFFF8)];
                unsigned int v201 = &v347[&v105[-v170] - v104 - 8];
                uint64_t v202 = (char *)&v105[-v170 - 8];
                unint64_t v203 = v170 - (v352 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  uint64_t v204 = *(void *)v202;
                  v202 -= 8;
                  *(void *)unsigned int v201 = v204;
                  v201 -= 8;
                  v203 += 8;
                }
                while (v203);
                v105 -= v352 & 0xFFFFFFFFFFFFFFF8;
                if (v352 == (v352 & 0xFFFFFFFFFFFFFFF8)) {
                  goto LABEL_228;
                }
                goto LABEL_226;
              }
              int v115 = &v344[-v170];
              v105 -= v170;
            }
LABEL_226:
            uint64_t v237 = v115 - 1;
            do
            {
              char v238 = *--v105;
              *v237-- = v238;
            }
            while (v105 != v104);
LABEL_228:
            int v105 = v104;
            int v168 = v114;
LABEL_229:
            *a1 = (uint64_t)v168;
            a1[1] = (uint64_t)&v114[__sz];
            a1[2] = (uint64_t)&v114[v112];
            if (v105) {
              operator delete(v105);
            }
            goto LABEL_231;
          }
          unint64_t v113 = a6;
          if (__sz < (unint64_t)v106) {
            a1[1] = (uint64_t)&v104[__sz];
          }
LABEL_231:
          int v239 = (uint64_t *)*a1;
          uint64_t result = mgcl::muid::decompress((mgcl::muid *)&v361[v363 + 1 + v28], (const char *)v33, 0, 0, *a1, (unint64_t *)8, v113);
          if (result) {
            return result;
          }
          char v240 = a7;
          a2 = v361;
          unint64_t v15 = a6;
          unint64_t v241 = a6;
          do
          {
            uint64_t v242 = *v239++;
            __int16 v243 = v242 + v24;
            if (v18 < 0x40) {
              __int16 v243 = ((unint64_t)v240->u16[0] << v18) | v243 & ~(-1 << v18);
            }
            v240->i16[0] = v243;
            char v240 = (uint16x8_t *)((char *)v240 + 2);
            --v241;
          }
          while (v241);
          uint64_t v244 = (const char *)(v363 + v33 + v28);
          goto LABEL_270;
        case 3:
          uint64_t v83 = (unsigned __int8 *)*a1;
          BOOL v82 = (unsigned __int8 *)a1[1];
          if (v82 != (unsigned __int8 *)*a1)
          {
            a1[1] = (uint64_t)v83;
            BOOL v82 = v83;
          }
          if (a1[2] - (uint64_t)v83 >= __sz) {
            goto LABEL_65;
          }
          if ((__sz & 0x8000000000000000) != 0) {
            goto LABEL_326;
          }
          int v84 = operator new(__sz);
          unint64_t v85 = v82 - v83;
          BOOL v86 = &v84[v82 - v83];
          long long v87 = v86;
          a1 = v360;
          a2 = v361;
          unint64_t v15 = a6;
          if (v82 == v83) {
            goto LABEL_63;
          }
          long long v87 = v84;
          if (v85 < 8 || (unint64_t)(v83 - v84) < 0x20)
          {
            uint64_t v88 = v82;
            id v89 = &v84[v82 - v83];
            goto LABEL_61;
          }
          if (v85 >= 0x20)
          {
            unint64_t v169 = v85 & 0xFFFFFFFFFFFFFFE0;
            uint64_t v178 = &v84[v85 - 16];
            unint64_t v179 = v82 - 16;
            unint64_t v180 = v85 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v181 = *(_OWORD *)v179;
              *(v178 - 1) = *((_OWORD *)v179 - 1);
              *uint64_t v178 = v181;
              v178 -= 2;
              v179 -= 32;
              v180 -= 32;
            }
            while (v180);
            if (v85 == v169) {
              goto LABEL_63;
            }
            if ((v85 & 0x18) == 0)
            {
              id v89 = &v86[-v169];
              uint64_t v88 = &v82[-v169];
LABEL_61:
              uint64_t v90 = v89 - 1;
              do
              {
                char v91 = *--v88;
                *v90-- = v91;
              }
              while (v88 != v83);
              goto LABEL_63;
            }
          }
          else
          {
            unint64_t v169 = 0;
          }
          uint64_t v88 = &v82[-(v85 & 0xFFFFFFFFFFFFFFF8)];
          id v89 = &v86[-(v85 & 0xFFFFFFFFFFFFFFF8)];
          unint64_t v182 = &v84[&v82[-v169] - v83 - 8];
          unint64_t v183 = &v82[-v169 - 8];
          unint64_t v184 = v169 - (v85 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v185 = *(void *)v183;
            v183 -= 8;
            *v182-- = v185;
            v184 += 8;
          }
          while (v184);
          if (v85 != (v85 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_61;
          }
LABEL_63:
          uint64_t *v360 = (uint64_t)v87;
          v360[1] = (uint64_t)v86;
          v360[2] = (uint64_t)&v84[__sz];
          if (v83) {
            operator delete(v83);
          }
LABEL_65:
          uint64_t v92 = 0;
          uint64_t v93 = v362;
          uint64_t v94 = v363 + v28 + 1;
          size_t v95 = v358;
          do
          {
            while (1)
            {
              char v96 = 0;
              unint64_t v97 = 0;
              uint64_t v98 = 0;
              uint64_t v99 = v94;
              int v100 = &a2[v94];
              do
              {
                int v101 = (char)v100[v97];
                v98 |= (unint64_t)(v100[v97] & 0x7F) << v96;
                unint64_t v102 = v97 + 1;
                if (v97 > 8) {
                  break;
                }
                v96 += 7;
                ++v97;
              }
              while (v101 < 0);
              __int16 v103 = v98 + v24;
              if (v18 >= 0x40) {
                break;
              }
              a7->i16[v92] = ((unint64_t)a7->u16[v92] << v18) | v103 & ~(-1 << v18);
              uint64_t v94 = v99 + v102;
              if (++v92 == v15) {
                goto LABEL_8;
              }
            }
            a7->i16[v92] = v103;
            uint64_t v94 = v99 + v102;
            ++v92;
          }
          while (v92 != v15);
          break;
        case 4:
          operator new();
        default:
          return 3;
      }
LABEL_8:
      uint64_t v17 = v99 + v102;
      uint64_t v16 = v93 + 1;
      if (v16 == v95) {
        return 0;
      }
    }
    uint64_t v55 = 0;
    char v56 = &a2[v20];
    uint64_t v57 = 1;
    uint64_t v58 = v359 - 8 * v17;
    do
    {
      uint64_t v59 = v57;
      uint64_t v60 = v58;
      int v61 = (char)v56[v22];
      v55 |= (unint64_t)(v56[v22] & 0x7F) << v21;
      if (v22 > 8) {
        break;
      }
      ++v22;
      v21 += 7;
      ++v57;
      v58 -= 8;
    }
    while (v61 < 0);
    char v62 = 0;
    unint64_t v63 = 0;
    unint64_t v64 = 0;
    char v65 = &a2[v17];
    do
    {
      int v66 = (char)v65[v59 + 1];
      v64 |= (unint64_t)(v65[++v59] & 0x7F) << v62;
      if (v63 > 8) {
        break;
      }
      ++v63;
      v62 += 7;
      v60 -= 8;
    }
    while (v66 < 0);
    switch(a2[v17])
    {
      case 1u:
        if (!a1[3]) {
          operator new();
        }
        uint64_t v364 = v17;
        unsigned int v67 = v64 - 2;
        if (v64 < 2) {
          return 3;
        }
        char v68 = &a2[v17 + v59];
        unsigned int v69 = v68[1];
        int v70 = v68[2];
        uint64_t v71 = *a1;
        char v72 = (char *)a1[1];
        unint64_t v73 = (unint64_t)&v72[-*a1];
        size_t v74 = a6 - v73;
        if (a6 > v73)
        {
          uint64_t v75 = (unsigned __int8 *)a1[2];
          if (v75 - (unsigned __int8 *)v72 >= v74)
          {
            uint64_t v158 = (unsigned __int8 *)&v72[v74];
            int v159 = v70;
            unsigned int v160 = v69;
            bzero((void *)a1[1], v74);
            unsigned int v69 = v160;
            int v70 = v159;
            unsigned int v67 = v64 - 2;
            a1[1] = (uint64_t)v158;
            LODWORD(v74) = a6;
            goto LABEL_255;
          }
          unsigned int v343 = v69;
          int v346 = v70;
          if ((a6 & 0x8000000000000000) != 0) {
            goto LABEL_327;
          }
          unint64_t v76 = (unint64_t)&v75[-v71];
          uint64_t v77 = 2 * v76;
          if (2 * v76 <= a6) {
            uint64_t v77 = a6;
          }
          if (v76 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v78 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v78 = v77;
          }
          v340 = (char *)operator new(v78);
          v337 = &v340[v73];
          bzero(&v340[v73], v74);
          size_t v79 = v78;
          if (v72 == (char *)v71)
          {
            a1 = v360;
            size_t v74 = a6;
            unsigned int v67 = v64 - 2;
            int v70 = v346;
            unsigned int v69 = v343;
            uint64_t v172 = &v340[v73];
            unint64_t v81 = v340;
            goto LABEL_253;
          }
          if (v73 < 8)
          {
            a1 = v360;
            size_t v74 = a6;
            unsigned int v67 = v64 - 2;
            int v70 = v346;
            unsigned int v69 = v343;
            char v80 = &v340[v73];
            unint64_t v81 = v340;
            goto LABEL_250;
          }
          char v80 = &v340[v73];
          unint64_t v81 = v340;
          a1 = v360;
          size_t v74 = a6;
          unsigned int v67 = v64 - 2;
          int v70 = v346;
          unsigned int v69 = v343;
          if ((unint64_t)(v71 - (void)v340) >= 0x20)
          {
            if (v73 < 0x20)
            {
              unint64_t v176 = 0;
              goto LABEL_203;
            }
            unint64_t v176 = v73 & 0xFFFFFFFFFFFFFFE0;
            uint64_t v213 = &v340[v73 - 16];
            uint64_t v214 = v72 - 16;
            unint64_t v215 = v73 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v216 = *(_OWORD *)v214;
              *((_OWORD *)v213 - 1) = *((_OWORD *)v214 - 1);
              *(_OWORD *)uint64_t v213 = v216;
              v213 -= 32;
              v214 -= 32;
              v215 -= 32;
            }
            while (v215);
            if (v73 == v176) {
              goto LABEL_252;
            }
            if ((v73 & 0x18) != 0)
            {
LABEL_203:
              char v80 = &v337[-(v73 & 0xFFFFFFFFFFFFFFF8)];
              int v217 = &v72[-v176 - v71 - 8 + (void)v340];
              int v218 = &v72[-v176 - 8];
              unint64_t v219 = v176 - (v73 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                uint64_t v220 = *(void *)v218;
                v218 -= 8;
                *(void *)int v217 = v220;
                v217 -= 8;
                v219 += 8;
              }
              while (v219);
              v72 -= v73 & 0xFFFFFFFFFFFFFFF8;
              if (v73 == (v73 & 0xFFFFFFFFFFFFFFF8)) {
                goto LABEL_252;
              }
              goto LABEL_250;
            }
            char v80 = &v337[-v176];
            v72 -= v176;
          }
LABEL_250:
          unint64_t v252 = v80 - 1;
          do
          {
            char v253 = *--v72;
            *v252-- = v253;
          }
          while (v72 != (char *)v71);
LABEL_252:
          char v72 = (char *)v71;
          uint64_t v172 = v81;
LABEL_253:
          *a1 = (uint64_t)v172;
          a1[1] = (uint64_t)&v81[v74];
          a1[2] = (uint64_t)&v81[v79];
          if (v72)
          {
            operator delete(v72);
            unsigned int v69 = v343;
            int v70 = v346;
            unsigned int v67 = v64 - 2;
          }
          goto LABEL_255;
        }
        LODWORD(v74) = a6;
        if (a6 < v73) {
          a1[1] = v71 + a6;
        }
LABEL_255:
        int v254 = (unsigned __int8 *)*a1;
        char v255 = *(uint64_t **)a1[3];
        LODWORD(v366) = 0;
        BYTE4(v366) = a4;
        BYTE5(v366) = a5;
        WORD3(v366) = 0;
        uint64_t v367 = 1;
        __int16 v368 = 0;
        char v369 = 1;
        int v370 = 0;
        if (v69 >= 4) {
          char v256 = 1;
        }
        else {
          char v256 = v69;
        }
        char v371 = v256;
        if (v70 == 2) {
          char v257 = 4;
        }
        else {
          char v257 = 1;
        }
        if (!v70) {
          char v257 = 0;
        }
        char v372 = v257;
        *((void *)&v366 + 1) = __PAIR64__(v74, v67);
        uint64_t v258 = *v255;
        uint64_t v373 = (uint64_t)&v361[v364 + 3 + v59];
        uint64_t v374 = v67;
        uint64_t result = gcl::polyline::DecoderImpl::decompressAttributes(v258, (uint64_t)&v373, (uint64_t)v254, 0, &v366);
        if (!result)
        {
          uint64_t v259 = a7;
          a2 = v361;
          unint64_t v15 = a6;
          unint64_t v260 = a6;
          do
          {
            unsigned int v261 = *v254++;
            if (v55 + v261) {
              v259->i16[0] = -v259->i16[0];
            }
            uint64_t v259 = (uint16x8_t *)((char *)v259 + 2);
            --v260;
          }
          while (v260);
          uint64_t v251 = (const char *)(v364 + v64);
LABEL_269:
          uint64_t v244 = &v251[v59];
LABEL_270:
          uint64_t v17 = (uint64_t)(v244 + 1);
          a1 = v360;
          uint64_t v16 = v362 + 1;
          if (v362 + 1 == v358) {
            return 0;
          }
          continue;
        }
LABEL_323:
        if ((result - 1) >= 4) {
          return 5;
        }
        return result;
      case 2u:
        uint64_t v365 = v17;
        uint64_t v133 = *a1;
        char v134 = (char *)a1[1];
        unint64_t v135 = (unint64_t)&v134[-*a1];
        char v136 = a1;
        size_t v137 = __sz - v135;
        if (__sz <= v135)
        {
          long long v143 = v136;
          if (__sz < v135) {
            v136[1] = v133 + __sz;
          }
LABEL_243:
          int v247 = (uint64_t *)*v143;
          uint64_t result = mgcl::muid::decompress((mgcl::muid *)&v361[v365 + 1 + v59], (const char *)v64, 0, 0, *v143, (unint64_t *)8, a6);
          if (result) {
            return result;
          }
          uint64_t v248 = a7;
          a2 = v361;
          unint64_t v15 = a6;
          unint64_t v249 = a6;
          do
          {
            uint64_t v250 = *v247++;
            if (v250 != -v55) {
              v248->i16[0] = -v248->i16[0];
            }
            uint64_t v248 = (uint16x8_t *)((char *)v248 + 2);
            --v249;
          }
          while (v249);
          uint64_t v251 = (const char *)(v365 + v64);
          goto LABEL_269;
        }
        uint64_t v138 = v136[2];
        if (v138 - (uint64_t)v134 >= v137)
        {
          bzero(v134, __sz - v135);
          v136[1] = (uint64_t)&v134[v137];
          long long v143 = v136;
          goto LABEL_243;
        }
        if ((__sz & 0x8000000000000000) != 0) {
LABEL_327:
        }
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        unint64_t v139 = v138 - v133;
        uint64_t v140 = 2 * v139;
        if (2 * v139 <= __sz) {
          uint64_t v140 = 8 * a6;
        }
        if (v139 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v141 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v141 = v140;
        }
        size_t v142 = v141;
        v353 = (char *)operator new(v141);
        v348 = &v353[v135];
        bzero(&v353[v135], v137);
        if (v134 == (char *)v133)
        {
          long long v143 = v360;
          long long v144 = v353;
          uint64_t v171 = &v353[v135];
          goto LABEL_241;
        }
        if (v135 < 8)
        {
          long long v143 = v360;
          long long v144 = v353;
          long long v145 = &v353[v135];
          goto LABEL_238;
        }
        long long v144 = v353;
        long long v143 = v360;
        long long v145 = &v353[v135];
        if ((unint64_t)(v133 - (void)v353) < 0x20) {
          goto LABEL_238;
        }
        if (v135 >= 0x20)
        {
          unint64_t v174 = v135 & 0xFFFFFFFFFFFFFFE0;
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v205 = &v353[v135 - 16];
          long long v206 = v134 - 16;
          unint64_t v207 = v135 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v208 = *(_OWORD *)v206;
            *((_OWORD *)v205 - 1) = *((_OWORD *)v206 - 1);
            *(_OWORD *)std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v205 = v208;
            v205 -= 32;
            v206 -= 32;
            v207 -= 32;
          }
          while (v207);
          if (v135 == v174) {
            goto LABEL_240;
          }
          if ((v135 & 0x18) == 0)
          {
            long long v145 = &v348[-v174];
            v134 -= v174;
LABEL_238:
            unint64_t v245 = v145 - 1;
            do
            {
              char v246 = *--v134;
              *v245-- = v246;
            }
            while (v134 != (char *)v133);
LABEL_240:
            char v134 = (char *)v133;
            uint64_t v171 = v144;
LABEL_241:
            *long long v143 = (uint64_t)v171;
            v143[1] = (uint64_t)&v144[__sz];
            v143[2] = (uint64_t)&v144[v142];
            if (v134) {
              operator delete(v134);
            }
            goto LABEL_243;
          }
        }
        else
        {
          unint64_t v174 = 0;
        }
        long long v145 = &v348[-(v135 & 0xFFFFFFFFFFFFFFF8)];
        uint64_t v209 = &v134[-v174 - v133 - 8 + (void)v353];
        uint64_t v210 = &v134[-v174 - 8];
        unint64_t v211 = v174 - (v135 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v212 = *(void *)v210;
          v210 -= 8;
          *(void *)uint64_t v209 = v212;
          v209 -= 8;
          v211 += 8;
        }
        while (v211);
        v134 -= v135 & 0xFFFFFFFFFFFFFFF8;
        if (v135 == (v135 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_240;
        }
        goto LABEL_238;
      case 3u:
        int v117 = (unsigned __int8 *)*a1;
        int v116 = (unsigned __int8 *)a1[1];
        if (v116 != (unsigned __int8 *)*a1)
        {
          a1[1] = (uint64_t)v117;
          int v116 = v117;
        }
        if (a1[2] - (uint64_t)v117 >= __sz) {
          goto LABEL_97;
        }
        if ((__sz & 0x8000000000000000) != 0) {
          goto LABEL_327;
        }
        int v118 = operator new(__sz);
        unint64_t v119 = v116 - v117;
        int v120 = &v118[v116 - v117];
        int v121 = v120;
        a1 = v360;
        a2 = v361;
        unint64_t v15 = a6;
        if (v116 == v117) {
          goto LABEL_95;
        }
        int v121 = v118;
        if (v119 < 8 || (unint64_t)(v117 - v118) < 0x20)
        {
          int v122 = v116;
          BOOL v123 = &v118[v116 - v117];
          goto LABEL_93;
        }
        if (v119 >= 0x20)
        {
          unint64_t v173 = v119 & 0xFFFFFFFFFFFFFFE0;
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v189 = &v118[v119 - 16];
          unint64_t v190 = v116 - 16;
          unint64_t v191 = v119 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v192 = *(_OWORD *)v190;
            *(v189 - 1) = *((_OWORD *)v190 - 1);
            *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v189 = v192;
            v189 -= 2;
            v190 -= 32;
            v191 -= 32;
          }
          while (v191);
          if (v119 == v173)
          {
LABEL_95:
            uint64_t *v360 = (uint64_t)v121;
            v360[1] = (uint64_t)v120;
            v360[2] = (uint64_t)&v118[__sz];
            if (v117) {
              operator delete(v117);
            }
LABEL_97:
            uint64_t v126 = 0;
            uint64_t v127 = v17 + v59 + 1;
            size_t v95 = v358;
            uint64_t v93 = v362;
            do
            {
              char v128 = 0;
              unint64_t v129 = 0;
              uint64_t v130 = 0;
              uint64_t v99 = v127;
              long long v131 = &a2[v127];
              do
              {
                int v132 = (char)v131[v129];
                v130 |= (unint64_t)(v131[v129] & 0x7F) << v128;
                unint64_t v102 = v129 + 1;
                if (v129 > 8) {
                  break;
                }
                v128 += 7;
                ++v129;
              }
              while (v132 < 0);
              if (v130 != -v55) {
                a7->i16[v126] = -a7->i16[v126];
              }
              uint64_t v127 = v99 + v102;
              ++v126;
            }
            while (v126 != v15);
            goto LABEL_8;
          }
          if ((v119 & 0x18) == 0)
          {
            BOOL v123 = &v120[-v173];
            int v122 = &v116[-v173];
LABEL_93:
            int v124 = v123 - 1;
            do
            {
              char v125 = *--v122;
              *v124-- = v125;
            }
            while (v122 != v117);
            goto LABEL_95;
          }
        }
        else
        {
          unint64_t v173 = 0;
        }
        int v122 = &v116[-(v119 & 0xFFFFFFFFFFFFFFF8)];
        BOOL v123 = &v120[-(v119 & 0xFFFFFFFFFFFFFFF8)];
        unint64_t v193 = &v118[&v116[-v173] - v117 - 8];
        unsigned int v194 = &v116[-v173 - 8];
        unint64_t v195 = v173 - (v119 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v196 = *(void *)v194;
          v194 -= 8;
          *v193-- = v196;
          v195 += 8;
        }
        while (v195);
        if (v119 != (v119 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_93;
        }
        goto LABEL_95;
      case 4u:
        operator new();
      default:
        return 3;
    }
  }
}

void sub_188F3D7EC(_Unwind_Exception *a1)
{
  MEMORY[0x18C11F580](v2, 0x20C4093837F09);
  MEMORY[0x18C11F580](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t geo::ReadBitstream::unpackRice2(uint64_t *a1, _DWORD *a2)
{
  uint64_t v2 = a2[1];
  uint64_t v4 = a1[1];
  unint64_t v3 = a1[2];
  unint64_t v5 = 8 * v4;
  if (v3 + 1 > 8 * v4)
  {
    int v6 = 0;
    if (v2) {
      BOOL v7 = v3 + v2 > v5;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_6;
    }
LABEL_21:
    int v11 = 0;
    uint64_t v12 = a2[2];
    if (v3 + 1 > v5) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
  uint64_t v15 = 0;
  uint64_t v16 = *a1;
  int v6 = 8 * v4 - v3;
  while (1)
  {
    uint64_t v17 = v15;
    unint64_t v18 = v3 + v15;
    unsigned int v19 = *(unsigned __int8 *)(v16 + (v18 >> 3));
    a1[2] = v18 + 1;
    if (((v19 >> (~(_BYTE)v18 & 7)) & 1) == 0) {
      break;
    }
    uint64_t v15 = v17 + 1;
    if (!(v3 - 8 * v4 + v17 + 1)) {
      goto LABEL_16;
    }
  }
  int v6 = v17;
LABEL_16:
  v3 += v17 + 1;
  if (v2) {
    BOOL v20 = v3 + v2 > v5;
  }
  else {
    BOOL v20 = 1;
  }
  if (v20) {
    goto LABEL_21;
  }
LABEL_6:
  int v8 = 0;
  uint64_t v9 = *a1;
  uint64_t v10 = v2;
  do
  {
    int v11 = (*(unsigned __int8 *)(v9 + (v3 >> 3)) >> (~(_BYTE)v3 & 7)) & 1 | (2 * v8);
    a1[2] = ++v3;
    int v8 = v11;
    --v10;
  }
  while (v10);
  uint64_t v12 = a2[2];
  if (v3 + 1 > v5)
  {
LABEL_9:
    int v13 = 0;
    int v14 = 0;
    if (!v12) {
      return ((v11 | (v6 << v2)) << *a2) + (v14 | (v13 << v12));
    }
    goto LABEL_28;
  }
LABEL_22:
  uint64_t v21 = 0;
  uint64_t v22 = *a1;
  int v13 = 8 * v4 - v3;
  unint64_t v23 = v3 - 8 * v4;
  while (1)
  {
    uint64_t v24 = v21;
    unint64_t v25 = v3 + v21;
    unsigned int v26 = *(unsigned __int8 *)(v22 + (v25 >> 3));
    a1[2] = v25 + 1;
    if (((v26 >> (~(_BYTE)v25 & 7)) & 1) == 0) {
      break;
    }
    uint64_t v21 = v24 + 1;
    if (!(v23 + v24 + 1))
    {
      v3 += v24 + 1;
      int v14 = 0;
      if (v12) {
        goto LABEL_28;
      }
      return ((v11 | (v6 << v2)) << *a2) + (v14 | (v13 << v12));
    }
  }
  int v13 = v24;
  v3 += v24 + 1;
  int v14 = 0;
  if (!v12) {
    return ((v11 | (v6 << v2)) << *a2) + (v14 | (v13 << v12));
  }
LABEL_28:
  if (v3 + v12 <= v5)
  {
    int v27 = 0;
    uint64_t v28 = *a1;
    uint64_t v29 = v12;
    do
    {
      int v14 = (*(unsigned __int8 *)(v28 + (v3 >> 3)) >> (~(_BYTE)v3 & 7)) & 1 | (2 * v27);
      a1[2] = ++v3;
      int v27 = v14;
      --v29;
    }
    while (v29);
  }
  return ((v11 | (v6 << v2)) << *a2) + (v14 | (v13 << v12));
}

void sub_188F3DF90(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDPlaceResponseReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 124))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOPDPlaceResponseReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 128));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 120) = [v8 position];
  *(_DWORD *)(a1 + 124) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOPDPlaceResponseReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOPDPlaceResponseReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOPDPlaceResponseReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOPDPlaceResponseCallReadAllRecursiveWithoutSynchronized(a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 128));
  return Specified;
}

void sub_188F3E128(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDPlaceResponseReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 128));
  int v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 124);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 120)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint16x4_t v12 = (uint16x4_t)vdup_n_s16(*(unsigned __int16 *)(a1 + 140));
  unsigned int v13 = (unsigned __int16)(vaddv_s16((int16x4_t)(*(void *)&vshl_u16(v12, (uint16x4_t)0xFFF7FFF8FFF5FFF3) & 0xFF01FF01FF01FF01))
                         + ((*(_WORD *)(a1 + 140) >> 14) & 1)
                         + ((*(_WORD *)(a1 + 140) >> 7) & 1)
                         + ((*(_WORD *)(a1 + 140) >> 6) & 1))
      + (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16(v12, (uint16x4_t)0xFFFBFFFCFFF6FFF4), (int8x8_t)0x1000100010001))+ ((*(_WORD *)(a1 + 140) >> 3) & 1));
  while (2)
  {
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    uint64_t v16 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v13;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v15 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v17 = v13 > 7;
        char v18 = v17 & ~(_BYTE)v11 | v9;
        unsigned __int8 v19 = v17 | v11;
        char v78 = v18;
        char v79 = v19 | v18;
        char v77 = v8;
        if ((v19 | v8)) {
          BOOL v20 = 0;
        }
        else {
          BOOL v20 = a3;
        }
        uint64_t v21 = (int *)MEMORY[0x1E4F940E8];
        char v80 = (v20 == 0) | v19;
        BOOL v81 = v19;
        uint64_t v22 = (int *)MEMORY[0x1E4F940C8];
        unint64_t v23 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v13;
LABEL_7:
        uint64_t v14 = v9;
LABEL_8:
        uint64_t v15 = v10;
        uint64_t v16 = v11;
LABEL_10:
        ++v7;
        uint64_t v9 = v14;
        uint64_t v10 = v15;
        uint64_t v11 = v16;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v21) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v22)) {
      goto LABEL_154;
    }
    char v24 = 0;
    unsigned int v25 = 0;
    unint64_t v26 = 0;
    while (1)
    {
      uint64_t v27 = *v21;
      uint64_t v28 = *(void *)(v3 + v27);
      unint64_t v29 = v28 + 1;
      if (v28 == -1 || v29 > *(void *)(v3 + *v6)) {
        break;
      }
      char v30 = *(unsigned char *)(*(void *)(v3 + *v23) + v28);
      *(void *)(v3 + v27) = v29;
      v26 |= (unint64_t)(v30 & 0x7F) << v24;
      if ((v30 & 0x80) == 0) {
        goto LABEL_25;
      }
      v24 += 7;
      BOOL v31 = v25++ >= 9;
      if (v31)
      {
        unint64_t v26 = 0;
        int v32 = *(unsigned __int8 *)(v3 + *v22);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v22) = 1;
LABEL_25:
    int v32 = *(unsigned __int8 *)(v3 + *v22);
    if (*(unsigned char *)(v3 + *v22)) {
      unint64_t v26 = 0;
    }
LABEL_27:
    if (v32 || (v26 & 7) == 4)
    {
LABEL_154:
      int v76 = 1;
      goto LABEL_155;
    }
    unint64_t v34 = v26 >> 3;
    BOOL v35 = v81;
    if ((v80 & 1) == 0)
    {
      BOOL v36 = v20;
      do
      {
        int v38 = *v36++;
        int v37 = v38;
        BOOL v35 = v38 != 0;
        if (v38) {
          BOOL v39 = v37 == v34;
        }
        else {
          BOOL v39 = 1;
        }
      }
      while (!v39);
    }
    switch((int)v34)
    {
      case 1:
        if ((v77 & 1) == 0) {
          goto LABEL_124;
        }
        char v40 = 0;
        unsigned int v41 = 0;
        uint64_t v42 = 0;
        *(_WORD *)(a1 + 140) |= 4u;
        while (1)
        {
          uint64_t v43 = *v21;
          uint64_t v44 = *(void *)(v3 + v43);
          unint64_t v45 = v44 + 1;
          if (v44 == -1 || v45 > *(void *)(v3 + *v6)) {
            break;
          }
          char v46 = *(unsigned char *)(*(void *)(v3 + *v23) + v44);
          *(void *)(v3 + v43) = v45;
          v42 |= (unint64_t)(v46 & 0x7F) << v40;
          if ((v46 & 0x80) == 0) {
            goto LABEL_127;
          }
          v40 += 7;
          BOOL v31 = v41++ >= 9;
          if (v31)
          {
            LODWORD(v42) = 0;
            goto LABEL_129;
          }
        }
        *(unsigned char *)(v3 + *v22) = 1;
LABEL_127:
        if (*(unsigned char *)(v3 + *v22)) {
          LODWORD(v42) = 0;
        }
LABEL_129:
        uint64_t v69 = 136;
        goto LABEL_134;
      case 2:
        if ((v77 & 1) == 0) {
          goto LABEL_124;
        }
        char v49 = 0;
        unsigned int v50 = 0;
        uint64_t v42 = 0;
        *(_WORD *)(a1 + 140) |= 2u;
        while (2)
        {
          uint64_t v51 = *v21;
          uint64_t v52 = *(void *)(v3 + v51);
          unint64_t v53 = v52 + 1;
          if (v52 == -1 || v53 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v22) = 1;
          }
          else
          {
            char v54 = *(unsigned char *)(*(void *)(v3 + *v23) + v52);
            *(void *)(v3 + v51) = v53;
            v42 |= (unint64_t)(v54 & 0x7F) << v49;
            if (v54 < 0)
            {
              v49 += 7;
              BOOL v31 = v50++ >= 9;
              if (v31)
              {
                LODWORD(v42) = 0;
                goto LABEL_133;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v22)) {
          LODWORD(v42) = 0;
        }
LABEL_133:
        uint64_t v69 = 132;
LABEL_134:
        *(_DWORD *)(a1 + v69) = v42;
        goto LABEL_153;
      case 3:
        if (!v35) {
          goto LABEL_124;
        }
        if ((*(_WORD *)(a1 + 140) & 0x800) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_180;
          }
          __int16 v70 = 16 * *(_WORD *)(a1 + 140);
          goto LABEL_151;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_180;
        }
        uint64_t v47 = objc_alloc_init(GEOPDPlaceGlobalResult);
        if (!GEOPDPlaceGlobalResultReadAllFrom((uint64_t)v47, (void *)v3, v10 & 1)) {
          goto LABEL_179;
        }
        PBReaderRecallMark();
        uint64_t v48 = 88;
        goto LABEL_108;
      case 4:
        if (!v35 || (*(_WORD *)(a1 + 140) & 0x2000) != 0) {
          goto LABEL_124;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_180;
        }
        uint64_t v47 = objc_alloc_init(GEOPDPlace);
        if (!GEOPDPlaceReadAllFrom((uint64_t)v47, (void *)v3, v10 & 1)) {
          goto LABEL_179;
        }
        PBReaderRecallMark();
        -[GEOPDPlaceResponse _addNoFlagsLegacyPlaceResult:](a1, v47);
        goto LABEL_102;
      case 5:
        if (!v35 || (*(_WORD *)(a1 + 140) & 0x100) != 0) {
          goto LABEL_124;
        }
        PBReaderReadString();
        uint64_t v47 = (GEOPDPlaceGlobalResult *)objc_claimAutoreleasedReturnValue();
        if (v47) {
          -[GEOPDPlaceResponse _addNoFlagsDisplayLanguage:](a1, v47);
        }
        goto LABEL_102;
      case 6:
        if (!v35) {
          goto LABEL_124;
        }
        if ((*(_WORD *)(a1 + 140) & 0x200) == 0)
        {
          uint64_t v55 = PBReaderReadString();
          uint64_t v56 = 72;
          goto LABEL_86;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_180;
        }
        __int16 v70 = *(_WORD *)(a1 + 140) << 6;
        goto LABEL_151;
      case 7:
        if (!v35 || (*(_WORD *)(a1 + 140) & 0x4000) != 0) {
          goto LABEL_124;
        }
        PBReaderReadString();
        uint64_t v47 = (GEOPDPlaceGlobalResult *)objc_claimAutoreleasedReturnValue();
        if (v47) {
          -[GEOPDPlaceResponse _addNoFlagsSpokenLanguage:](a1, v47);
        }
        goto LABEL_102;
      case 8:
        if (!v35) {
          goto LABEL_124;
        }
        if ((*(_WORD *)(a1 + 140) & 0x80) == 0)
        {
          uint64_t v55 = PBReaderReadString();
          uint64_t v56 = 48;
LABEL_86:
          uint64_t v57 = *(void **)(a1 + v56);
          *(void *)(a1 + v56) = v55;
          goto LABEL_109;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_180;
        }
        __int16 v70 = *(_WORD *)(a1 + 140) << 8;
        goto LABEL_151;
      case 9:
        if (!v35) {
          goto LABEL_124;
        }
        if ((*(_WORD *)(a1 + 140) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_180;
          }
          __int16 v70 = *(_WORD *)(a1 + 140) << 9;
          goto LABEL_151;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_180;
        }
        uint64_t v47 = objc_alloc_init(GEOPDDatasetABStatus);
        if (!GEOPDDatasetABStatusReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_179;
        }
        PBReaderRecallMark();
        uint64_t v48 = 40;
        goto LABEL_108;
      case 10:
        if (!v35 || (*(_WORD *)(a1 + 140) & 0x1000) != 0) {
          goto LABEL_124;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_180;
        }
        uint64_t v47 = objc_alloc_init(GEOPDMapsResult);
        if (!GEOPDMapsResultReadAllFrom((uint64_t)v47, (void *)v3, v10 & 1)) {
          goto LABEL_179;
        }
        PBReaderRecallMark();
        -[GEOPDPlaceResponse _addNoFlagsMapsResult:](a1, v47);
        goto LABEL_102;
      case 11:
        if (!v35 || (*(_WORD *)(a1 + 140) & 0x400) != 0) {
          goto LABEL_124;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_180;
        }
        uint64_t v47 = objc_alloc_init(GEOPDDotPlace);
        if (!GEOPDDotPlaceReadAllFrom((uint64_t)v47, (void *)v3, v10 & 1)) {
          goto LABEL_179;
        }
        PBReaderRecallMark();
        -[GEOPDPlaceResponse _addNoFlagsDotPlace:](a1, v47);
LABEL_102:

        goto LABEL_152;
      case 12:
        if (!v35) {
          goto LABEL_124;
        }
        if ((*(_WORD *)(a1 + 140) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_180;
          }
          __int16 v70 = *(_WORD *)(a1 + 140) << 11;
LABEL_151:
          v7 += v70 >> 15;
LABEL_152:
          uint64_t v22 = (int *)MEMORY[0x1E4F940C8];
          unint64_t v23 = (int *)MEMORY[0x1E4F940B8];
LABEL_153:
          if (!(v79 & 1 | (v7 != 0))) {
            goto LABEL_154;
          }
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_180;
        }
        uint64_t v47 = objc_alloc_init(GEOPDPlacesRequestResponseAnalyticsData);
        if (GEOPDPlacesRequestResponseAnalyticsDataReadAllFrom((uint64_t)v47, (void *)v3))
        {
          PBReaderRecallMark();
          uint64_t v48 = 24;
LABEL_108:
          uint64_t v57 = *(void **)(a1 + v48);
          *(void *)(a1 + v48) = v47;
LABEL_109:

          --v7;
          goto LABEL_152;
        }
LABEL_179:

LABEL_180:
        int v76 = 0;
        uint64_t v22 = (int *)MEMORY[0x1E4F940C8];
LABEL_155:
        if (v78) {
LABEL_156:
        }
          *(_WORD *)(a1 + 140) |= 8u;
        if (v81 || (v76 & 1) == 0)
        {
          *(_WORD *)(a1 + 140) |= 0x800u;
          *(_WORD *)(a1 + 140) |= 0x2000u;
          *(_WORD *)(a1 + 140) |= 0x100u;
          *(_WORD *)(a1 + 140) |= 0x200u;
          *(_WORD *)(a1 + 140) |= 0x4000u;
          *(_WORD *)(a1 + 140) |= 0x80u;
          *(_WORD *)(a1 + 140) |= 0x40u;
          *(_WORD *)(a1 + 140) |= 0x1000u;
          *(_WORD *)(a1 + 140) |= 0x400u;
          *(_WORD *)(a1 + 140) |= 0x10u;
          *(_WORD *)(a1 + 140) |= 0x20u;
        }
        else if (v20)
        {
          while (1)
          {
            int v72 = *v20++;
            int v71 = v72;
            __int16 v73 = 2048;
            switch(v72)
            {
              case 0:
                goto LABEL_173;
              case 1:
              case 2:
                continue;
              case 3:
                goto LABEL_172;
              case 4:
                __int16 v73 = 0x2000;
                goto LABEL_172;
              case 5:
                __int16 v73 = 256;
                goto LABEL_172;
              case 6:
                __int16 v73 = 512;
                goto LABEL_172;
              case 7:
                __int16 v73 = 0x4000;
                goto LABEL_172;
              case 8:
                __int16 v73 = 128;
                goto LABEL_172;
              case 9:
                __int16 v73 = 64;
                goto LABEL_172;
              case 10:
                __int16 v73 = 4096;
                goto LABEL_172;
              case 11:
                __int16 v73 = 1024;
                goto LABEL_172;
              case 12:
                __int16 v73 = 16;
                goto LABEL_172;
              default:
                if (v71 != 1051) {
                  continue;
                }
                __int16 v73 = 32;
LABEL_172:
                *(_WORD *)(a1 + 140) |= v73;
                break;
            }
          }
        }
LABEL_173:
        if (v76) {
          unint64_t v3 = *(unsigned char *)(v3 + *v22) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v81)
        {
          size_t v74 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      default:
        if (v34 == 1000)
        {
          if (v77)
          {
            char v58 = 0;
            unsigned int v59 = 0;
            uint64_t v60 = 0;
            *(_WORD *)(a1 + 140) |= 1u;
            while (1)
            {
              uint64_t v61 = *v21;
              uint64_t v62 = *(void *)(v3 + v61);
              unint64_t v63 = v62 + 1;
              if (v62 == -1 || v63 > *(void *)(v3 + *v6)) {
                break;
              }
              char v64 = *(unsigned char *)(*(void *)(v3 + *v23) + v62);
              *(void *)(v3 + v61) = v63;
              v60 |= (unint64_t)(v64 & 0x7F) << v58;
              if ((v64 & 0x80) == 0) {
                goto LABEL_136;
              }
              v58 += 7;
              BOOL v31 = v59++ >= 9;
              if (v31)
              {
                uint64_t v60 = 0;
                goto LABEL_138;
              }
            }
            *(unsigned char *)(v3 + *v22) = 1;
LABEL_136:
            if (*(unsigned char *)(v3 + *v22)) {
              uint64_t v60 = 0;
            }
LABEL_138:
            *(void *)(a1 + 56) = v60;
            goto LABEL_153;
          }
LABEL_124:
          char v68 = PBReaderSkipValueWithTag();
          unint64_t v23 = (int *)MEMORY[0x1E4F940B8];
          uint64_t v22 = (int *)MEMORY[0x1E4F940C8];
          if ((v68 & 1) == 0)
          {
            int v76 = 0;
            goto LABEL_155;
          }
          goto LABEL_153;
        }
        if (v34 == 1051)
        {
          if (!v35) {
            goto LABEL_124;
          }
          if ((*(_WORD *)(a1 + 140) & 0x20) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_180;
            }
            __int16 v70 = *(_WORD *)(a1 + 140) << 10;
            goto LABEL_151;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_180;
          }
          uint64_t v47 = objc_alloc_init(GEOClientMetrics);
          if (!GEOClientMetricsReadAllFrom((uint64_t)v47, (void *)v3, v10 & 1)) {
            goto LABEL_179;
          }
          PBReaderRecallMark();
          uint64_t v48 = 32;
          goto LABEL_108;
        }
        if ((v78 & 1) == 0 || (*(_WORD *)(a1 + 140) & 8) != 0) {
          goto LABEL_124;
        }
        if (!*(void *)(a1 + 16))
        {
          id v65 = objc_alloc_init(MEMORY[0x1E4F940B0]);
          int v66 = *(void **)(a1 + 16);
          *(void *)(a1 + 16) = v65;
        }
        int v67 = PBUnknownFieldAdd();
        uint64_t v22 = (int *)MEMORY[0x1E4F940C8];
        unint64_t v23 = (int *)MEMORY[0x1E4F940B8];
        if (!v67)
        {
          int v76 = 0;
          goto LABEL_156;
        }
        goto LABEL_153;
    }
  }
}

unint64_t GEOPDMapsResultReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 68))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOPDMapsResultReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 72));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 64) = [v8 position];
  *(_DWORD *)(a1 + 68) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOPDMapsResultReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOPDMapsResultReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOPDMapsResultReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOPDMapsResultCallReadAllRecursiveWithoutSynchronized(a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 72));
  return Specified;
}

void sub_188F3EFA4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDMapsResultReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 72));
  int v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 68);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 64)];
  uint64_t v7 = v6;
  uint64_t v8 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  unsigned int v13 = (vaddv_s16((int16x4_t)(*(void *)&vshl_u16((uint16x4_t)(*(void *)&vdup_n_s16(*(unsigned __int8 *)(a1 + 80)) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFCFFFAFFFBFFFDLL) & 0xFF01FF01FF01FF01))+ ((*(unsigned char *)(a1 + 80) & 4) != 0)+ ((*(unsigned char *)(a1 + 80) & 2) != 0));
  while (2)
  {
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    uint64_t v16 = 1;
    switch(a3[v8])
    {
      case -4:
        ++v13;
        goto LABEL_8;
      case -3:
        char v9 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v15 = v11;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v17 = v13 > 3;
        char v18 = v17 & ~(_BYTE)v12 | v10;
        unsigned __int8 v19 = v17 | v12;
        char v62 = v18;
        char v63 = v19 | v18;
        if ((v19 | v9)) {
          BOOL v20 = 0;
        }
        else {
          BOOL v20 = a3;
        }
        uint64_t v21 = (int *)MEMORY[0x1E4F940E8];
        uint64_t v22 = (int *)MEMORY[0x1E4F940C8];
        char v64 = (v20 == 0) | v19;
        BOOL v65 = v19;
        unint64_t v23 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v13;
LABEL_7:
        uint64_t v14 = v10;
LABEL_8:
        uint64_t v15 = v11;
        uint64_t v16 = v12;
LABEL_10:
        ++v8;
        uint64_t v10 = v14;
        uint64_t v11 = v15;
        uint64_t v12 = v16;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v21) >= *(void *)(v3 + *v7) || *(unsigned char *)(v3 + *v22)) {
      goto LABEL_100;
    }
    char v24 = 0;
    unsigned int v25 = 0;
    unint64_t v26 = 0;
    while (1)
    {
      uint64_t v27 = *v21;
      uint64_t v28 = *(void *)(v3 + v27);
      unint64_t v29 = v28 + 1;
      if (v28 == -1 || v29 > *(void *)(v3 + *v7)) {
        break;
      }
      char v30 = *(unsigned char *)(*(void *)(v3 + *v23) + v28);
      *(void *)(v3 + v27) = v29;
      v26 |= (unint64_t)(v30 & 0x7F) << v24;
      if ((v30 & 0x80) == 0) {
        goto LABEL_25;
      }
      v24 += 7;
      BOOL v31 = v25++ >= 9;
      if (v31)
      {
        unint64_t v26 = 0;
        int v32 = *(unsigned __int8 *)(v3 + *v22);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v22) = 1;
LABEL_25:
    int v32 = *(unsigned __int8 *)(v3 + *v22);
    if (*(unsigned char *)(v3 + *v22)) {
      unint64_t v26 = 0;
    }
LABEL_27:
    if (v32 || (v26 & 7) == 4)
    {
LABEL_100:
      int v60 = 1;
      goto LABEL_101;
    }
    unint64_t v34 = v26 >> 3;
    BOOL v35 = v65;
    if ((v64 & 1) == 0)
    {
      BOOL v36 = v20;
      do
      {
        int v38 = *v36++;
        int v37 = v38;
        BOOL v35 = v38 != 0;
        if (v38) {
          BOOL v39 = v37 == v34;
        }
        else {
          BOOL v39 = 1;
        }
      }
      while (!v39);
    }
    switch((int)v34)
    {
      case 1:
        if ((v9 & 1) == 0) {
          goto LABEL_81;
        }
        char v40 = 0;
        unsigned int v41 = 0;
        uint64_t v42 = 0;
        *(unsigned char *)(a1 + 80) |= 1u;
        while (1)
        {
          uint64_t v43 = *v21;
          uint64_t v44 = *(void *)(v3 + v43);
          unint64_t v45 = v44 + 1;
          if (v44 == -1 || v45 > *(void *)(v3 + *v7)) {
            break;
          }
          char v46 = *(unsigned char *)(*(void *)(v3 + *v23) + v44);
          *(void *)(v3 + v43) = v45;
          v42 |= (unint64_t)(v46 & 0x7F) << v40;
          if ((v46 & 0x80) == 0) {
            goto LABEL_84;
          }
          v40 += 7;
          BOOL v31 = v41++ >= 9;
          if (v31)
          {
            LODWORD(v42) = 0;
            goto LABEL_86;
          }
        }
        *(unsigned char *)(v3 + *v22) = 1;
LABEL_84:
        if (*(unsigned char *)(v3 + *v22)) {
          LODWORD(v42) = 0;
        }
LABEL_86:
        *(_DWORD *)(a1 + 76) = v42;
        goto LABEL_99;
      case 2:
        if (!v35) {
          goto LABEL_81;
        }
        if ((*(unsigned char *)(a1 + 80) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_121;
          }
          char v54 = 4 * *(unsigned char *)(a1 + 80);
          goto LABEL_97;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_121;
        }
        uint64_t v47 = objc_alloc_init(GEOPDPlace);
        if (!GEOPDPlaceReadAllFrom((uint64_t)v47, (void *)v3, v11 & 1)) {
          goto LABEL_120;
        }
        PBReaderRecallMark();
        uint64_t v48 = 48;
        goto LABEL_74;
      case 3:
        if (!v35) {
          goto LABEL_81;
        }
        if ((*(unsigned char *)(a1 + 80) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_121;
          }
          char v54 = 16 * *(unsigned char *)(a1 + 80);
          goto LABEL_97;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_121;
        }
        uint64_t v47 = objc_alloc_init(GEOPDCollectionResult);
        if (!GEOPDCollectionResultReadAllFrom((uint64_t)v47, (void *)v3, v11 & 1)) {
          goto LABEL_120;
        }
        PBReaderRecallMark();
        uint64_t v48 = 32;
        goto LABEL_74;
      case 4:
        if (!v35) {
          goto LABEL_81;
        }
        if ((*(unsigned char *)(a1 + 80) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_121;
          }
          char v54 = 2 * *(unsigned char *)(a1 + 80);
          goto LABEL_97;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_121;
        }
        uint64_t v47 = objc_alloc_init(GEOPDPublisherResult);
        if (!GEOPDPublisherResultReadAllFrom((uint64_t)v47, (void *)v3, v11 & 1)) {
          goto LABEL_120;
        }
        PBReaderRecallMark();
        uint64_t v48 = 56;
        goto LABEL_74;
      default:
        if (v34 != 100)
        {
          if (v34 == 101)
          {
            if (v35)
            {
              if ((*(unsigned char *)(a1 + 80) & 4) == 0)
              {
                if ((PBReaderPlaceMark() & 1) == 0) {
                  goto LABEL_121;
                }
                uint64_t v47 = objc_alloc_init(GEOPDBatchReverseGeocodeResult);
                if (!GEOPDBatchReverseGeocodeResultReadAllFrom((uint64_t)v47, (void *)v3, v11 & 1)) {
                  goto LABEL_120;
                }
                PBReaderRecallMark();
                uint64_t v48 = 24;
LABEL_74:
                char v49 = *(void **)(a1 + v48);
                *(void *)(a1 + v48) = v47;

                --v8;
LABEL_98:
                uint64_t v22 = (int *)MEMORY[0x1E4F940C8];
                uint64_t v7 = (int *)MEMORY[0x1E4F940E0];
                goto LABEL_99;
              }
              if ((PBReaderSkipValueWithTag() & 1) == 0) {
                goto LABEL_121;
              }
              char v54 = 32 * *(unsigned char *)(a1 + 80);
LABEL_97:
              v8 += v54 >> 7;
              goto LABEL_98;
            }
            goto LABEL_81;
          }
          if ((v62 & 1) == 0 || (*(unsigned char *)(a1 + 80) & 2) != 0) {
            goto LABEL_81;
          }
          if (!*(void *)(a1 + 16))
          {
            id v50 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            uint64_t v51 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v50;
          }
          int v52 = PBUnknownFieldAdd();
          uint64_t v22 = (int *)MEMORY[0x1E4F940C8];
          uint64_t v7 = (int *)MEMORY[0x1E4F940E0];
          if (!v52)
          {
            int v60 = 0;
            uint64_t v61 = &OBJC_IVAR___GEOPDAddressComponent__unknownFields;
            goto LABEL_102;
          }
LABEL_99:
          if (!(v63 & 1 | (v8 != 0))) {
            goto LABEL_100;
          }
          continue;
        }
        if (!v35)
        {
LABEL_81:
          char v53 = PBReaderSkipValueWithTag();
          uint64_t v7 = (int *)MEMORY[0x1E4F940E0];
          uint64_t v22 = (int *)MEMORY[0x1E4F940C8];
          if ((v53 & 1) == 0)
          {
            int v60 = 0;
            goto LABEL_101;
          }
          goto LABEL_99;
        }
        if ((*(unsigned char *)(a1 + 80) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_121;
          }
          char v54 = 8 * *(unsigned char *)(a1 + 80);
          goto LABEL_97;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_121;
        }
        uint64_t v47 = objc_alloc_init(GEOPDPlaceQuestionnaireResult);
        if (GEOPDPlaceQuestionnaireResultReadAllFrom((uint64_t)v47, (void *)v3, v11 & 1))
        {
          PBReaderRecallMark();
          uint64_t v48 = 40;
          goto LABEL_74;
        }
LABEL_120:

LABEL_121:
        int v60 = 0;
        uint64_t v22 = (int *)MEMORY[0x1E4F940C8];
LABEL_101:
        uint64_t v61 = &OBJC_IVAR___GEOPDAddressComponent__unknownFields;
        if (v62) {
LABEL_102:
        }
          *(unsigned char *)(a1 + v61[580]) |= 2u;
        if (v65 || (v60 & 1) == 0)
        {
          *(unsigned char *)(a1 + v61[580]) |= 0x20u;
          *(unsigned char *)(a1 + v61[580]) |= 8u;
          *(unsigned char *)(a1 + v61[580]) |= 0x40u;
          *(unsigned char *)(a1 + v61[580]) |= 0x10u;
          *(unsigned char *)(a1 + v61[580]) |= 4u;
          goto LABEL_114;
        }
        if (v20)
        {
          while (1)
          {
            int v56 = *v20++;
            int v55 = v56;
            char v57 = 32;
            switch(v56)
            {
              case 0:
                goto LABEL_114;
              case 1:
                continue;
              case 2:
                goto LABEL_113;
              case 3:
                char v57 = 8;
                goto LABEL_113;
              case 4:
                char v57 = 64;
                goto LABEL_113;
              default:
                if (v55 == 100)
                {
                  char v57 = 16;
                }
                else
                {
                  if (v55 != 101) {
                    continue;
                  }
                  char v57 = 4;
                }
LABEL_113:
                *(unsigned char *)(a1 + v61[580]) |= v57;
                break;
            }
          }
        }
LABEL_114:
        if (v60) {
          unint64_t v3 = *(unsigned char *)(v3 + *v22) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v65)
        {
          char v58 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
    }
  }
}

unint64_t GEOPDPlaceGlobalResultReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 436))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOPDPlaceGlobalResultReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 440));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 432) = [v8 position];
  *(_DWORD *)(a1 + 436) = [v8 length];
  if (a3) {
    char v9 = (int *)&GEOPDPlaceGlobalResultReadAllFrom_recursiveTag;
  }
  else {
    char v9 = (int *)&GEOPDPlaceGlobalResultReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOPDPlaceGlobalResultReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOPDPlaceGlobalResultCallReadAllRecursiveWithoutSynchronized(a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 440));
  return Specified;
}

void sub_188F3FA64(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDPlaceGlobalResultReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 440));
  int v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 436);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 432)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unint64_t v12 = *(void *)(a1 + 444);
  uint32x4_t v13 = (uint32x4_t)vdupq_n_s32(v12);
  v14.i64[0] = 0x100000001;
  v14.i64[1] = 0x100000001;
  int32x4_t v15 = (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v13, (uint32x4_t)xmmword_18A62F690), v14);
  uint64x2_t v16 = (uint64x2_t)vdupq_n_s64(v12);
  int32x4_t v17 = (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v13, (uint32x4_t)xmmword_18A62F6C0), v14);
  unsigned int v18 = vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vshlq_u64(v16, (uint64x2_t)xmmword_18A62F700), (int32x4_t)vshlq_u64(v16, (uint64x2_t)xmmword_18A62F6F0)), v14))+ (v12 >> 31)+ vaddvq_s32(vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v13, (uint32x4_t)xmmword_18A62F6E0), v14), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v13, (uint32x4_t)xmmword_18A62F6D0), v14)));
  *(int32x2_t *)v13.i8 = vadd_s32(vadd_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)vmovn_s64((int64x2_t)vshlq_u64(v16, (uint64x2_t)xmmword_18A62F730)), (int8x8_t)0x100000001), (int32x2_t)vand_s8((int8x8_t)__PAIR64__(v12 >> 33, v12 >> 3), (int8x8_t)0x100000001)), vadd_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v13.i8, (uint32x2_t)0xFFFFFFE8FFFFFFFCLL), (int8x8_t)0x100000001), (int32x2_t)vand_s8((int8x8_t)vmovn_s64((int64x2_t)vshlq_u64(v16, (uint64x2_t)xmmword_18A62F720)),
                                              (int8x8_t)0x100000001)),
                               vadd_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v13.i8, (uint32x2_t)0xFFFFFFF4FFFFFFEFLL), (int8x8_t)0x100000001), (int32x2_t)vand_s8((int8x8_t)vmovn_s64((int64x2_t)vshlq_u64(v16, (uint64x2_t)xmmword_18A62F710)), (int8x8_t)0x100000001)))), vadd_s32((int32x2_t)__PAIR64__((v12 >> 22) & 1, vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vshlq_u64(v16, (uint64x2_t)xmmword_18A62F6B0), (int32x4_t)vshlq_u64(
                                                                                            v16,
                                                                                            (uint64x2_t)xmmword_18A62F6A0)),
                                                                  v14))),
                             (int32x2_t)vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v13.i8, (uint32x2_t)0xFFFFFFF5FFFFFFFELL), (int8x8_t)0x100000001)));
  unsigned int v19 = vadd_s32(*(int32x2_t *)v13.i8, vdup_lane_s32(*(int32x2_t *)v13.i8, 1)).u32[0]
      + ((v12 >> 1) & 1)
      + ((v12 >> 30) & 1)
      + ((v12 >> 50) & 1)
      + ((v12 >> 9) & 1)
      + ((v12 >> 35) & 1)
      + ((v12 >> 29) & 1)
      + ((v12 >> 34) & 1)
      + ((v12 >> 41) & 1)
      + ((v12 >> 14) & 1)
      + ((v12 >> 44) & 1)
      + ((v12 >> 21) & 1)
      + (v12 & 1)
      + v18
      + vaddvq_s32(vaddq_s32(v15, v17));
  while (2)
  {
    uint64_t v20 = 1;
    uint64_t v21 = 1;
    uint64_t v22 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v19;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v21 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v23 = v19 > 0x27;
        char v24 = v23 & ~(_BYTE)v11;
        unsigned __int8 v25 = v23 | v11;
        char v59 = v24 | v9;
        char v60 = v25 | v24 | v9;
        if ((v25 | v8)) {
          unint64_t v26 = 0;
        }
        else {
          unint64_t v26 = a3;
        }
        uint64_t v27 = (int *)MEMORY[0x1E4F940E8];
        uint64_t v28 = (int *)MEMORY[0x1E4F940C8];
        char v61 = (v26 == 0) | v25;
        BOOL v62 = v25;
        unint64_t v29 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v19;
LABEL_7:
        uint64_t v20 = v9;
LABEL_8:
        uint64_t v21 = v10;
        uint64_t v22 = v11;
LABEL_10:
        ++v7;
        uint64_t v9 = v20;
        uint64_t v10 = v21;
        uint64_t v11 = v22;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v27) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v28)) {
      goto LABEL_408;
    }
    char v30 = 0;
    unsigned int v31 = 0;
    unint64_t v32 = 0;
    while (1)
    {
      uint64_t v33 = *v27;
      uint64_t v34 = *(void *)(v3 + v33);
      unint64_t v35 = v34 + 1;
      if (v34 == -1 || v35 > *(void *)(v3 + *v6)) {
        break;
      }
      char v36 = *(unsigned char *)(*(void *)(v3 + *v29) + v34);
      *(void *)(v3 + v33) = v35;
      v32 |= (unint64_t)(v36 & 0x7F) << v30;
      if ((v36 & 0x80) == 0) {
        goto LABEL_25;
      }
      v30 += 7;
      if (v31++ >= 9)
      {
        unint64_t v32 = 0;
        int v38 = *(unsigned __int8 *)(v3 + *v28);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v28) = 1;
LABEL_25:
    int v38 = *(unsigned __int8 *)(v3 + *v28);
    if (*(unsigned char *)(v3 + *v28)) {
      unint64_t v32 = 0;
    }
LABEL_27:
    if (v38 || (v32 & 7) == 4)
    {
LABEL_408:
      int v58 = 1;
      goto LABEL_409;
    }
    unint64_t v40 = v32 >> 3;
    BOOL v41 = v62;
    if ((v61 & 1) == 0)
    {
      uint64_t v42 = v26;
      do
      {
        int v44 = *v42++;
        int v43 = v44;
        BOOL v41 = v44 != 0;
        if (v44) {
          BOOL v45 = v43 == v40;
        }
        else {
          BOOL v45 = 1;
        }
      }
      while (!v45);
    }
    switch((int)v40)
    {
      case 1:
        if (!v41) {
          goto LABEL_301;
        }
        if ((*(unsigned char *)(a1 + 449) & 0x10) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_474;
          }
          char v46 = objc_alloc_init(GEOPDSearchResult);
          if (GEOPDSearchResultReadAllFrom((uint64_t)v46, (void *)v3, v10 & 1))
          {
            PBReaderRecallMark();
            uint64_t v47 = 368;
            goto LABEL_300;
          }
          goto LABEL_473;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_474;
        }
        uint64_t v53 = *(void *)(a1 + 444) << 19;
        goto LABEL_405;
      case 2:
        if (!v41) {
          goto LABEL_301;
        }
        if ((*(unsigned char *)(a1 + 446) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_474;
          }
          uint64_t v53 = *(void *)(a1 + 444) << 42;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_474;
        }
        char v46 = objc_alloc_init(GEOPDGeocodingResult);
        if (!GEOPDGeocodingResultReadAllFrom((uint64_t)v46, (void *)v3, v10 & 1)) {
          goto LABEL_473;
        }
        PBReaderRecallMark();
        uint64_t v47 = 184;
        goto LABEL_300;
      case 3:
        if (!v41) {
          goto LABEL_301;
        }
        if ((*(unsigned char *)(a1 + 445) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_474;
          }
          uint64_t v53 = *(void *)(a1 + 444) << 49;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_474;
        }
        char v46 = objc_alloc_init(GEOPDCanonicalLocationSearchResult);
        if (!GEOPDCanonicalLocationSearchResultReadAllFrom((uint64_t)v46, (void *)v3)) {
          goto LABEL_473;
        }
        PBReaderRecallMark();
        uint64_t v47 = 128;
        goto LABEL_300;
      case 4:
        if (!v41) {
          goto LABEL_301;
        }
        if ((*(unsigned char *)(a1 + 449) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_474;
          }
          uint64_t v53 = *(void *)(a1 + 444) << 22;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_474;
        }
        char v46 = objc_alloc_init(GEOPDReverseGeocodingResult);
        if (!GEOPDReverseGeocodingResultReadAllFrom((uint64_t)v46, (void *)v3)) {
          goto LABEL_473;
        }
        PBReaderRecallMark();
        uint64_t v47 = 344;
        goto LABEL_300;
      case 5:
        if (!v41) {
          goto LABEL_301;
        }
        if ((*(unsigned char *)(a1 + 448) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_474;
          }
          uint64_t v53 = *(void *)(a1 + 444) << 29;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_474;
        }
        char v46 = objc_alloc_init(GEOPDPlaceLookupResult);
        if (!GEOPDPlaceLookupResultReadAllFrom((uint64_t)v46, (void *)v3)) {
          goto LABEL_473;
        }
        PBReaderRecallMark();
        uint64_t v47 = 288;
        goto LABEL_300;
      case 6:
        if (!v41) {
          goto LABEL_301;
        }
        if ((*(unsigned char *)(a1 + 447) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_474;
          }
          uint64_t v53 = *(void *)(a1 + 444) << 34;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_474;
        }
        char v46 = objc_alloc_init(GEOPDMerchantLookupResult);
        if (!GEOPDMerchantLookupResultReadAllFrom((uint64_t)v46, (void *)v3, v10 & 1)) {
          goto LABEL_473;
        }
        PBReaderRecallMark();
        uint64_t v47 = 248;
        goto LABEL_300;
      case 7:
        if (!v41) {
          goto LABEL_301;
        }
        if ((*(unsigned char *)(a1 + 448) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_474;
          }
          uint64_t v53 = *(void *)(a1 + 444) << 28;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_474;
        }
        char v46 = objc_alloc_init(GEOPDPlaceRefinementResult);
        if (!GEOPDPlaceRefinementResultReadAllFrom((uint64_t)v46, (void *)v3)) {
          goto LABEL_473;
        }
        PBReaderRecallMark();
        uint64_t v47 = 296;
        goto LABEL_300;
      case 8:
        if (!v41) {
          goto LABEL_301;
        }
        if ((*(unsigned char *)(a1 + 449) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_474;
          }
          uint64_t v53 = *(void *)(a1 + 444) << 16;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_474;
        }
        char v46 = objc_alloc_init(GEOPDSiriSearchResult);
        if (!GEOPDSiriSearchResultReadAllFrom((uint64_t)v46, (void *)v3, v10 & 1)) {
          goto LABEL_473;
        }
        PBReaderRecallMark();
        uint64_t v47 = 392;
        goto LABEL_300;
      case 9:
        if (!v41) {
          goto LABEL_301;
        }
        if ((*(unsigned char *)(a1 + 447) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_474;
          }
          uint64_t v53 = *(void *)(a1 + 444) << 38;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_474;
        }
        char v46 = objc_alloc_init(GEOPDLocationDirectedSearchResult);
        if (!GEOPDLocationDirectedSearchResultReadAllFrom((uint64_t)v46, (void *)v3, v10 & 1)) {
          goto LABEL_473;
        }
        PBReaderRecallMark();
        uint64_t v47 = 216;
        goto LABEL_300;
      case 10:
        if (!v41) {
          goto LABEL_301;
        }
        if ((*(unsigned char *)(a1 + 444) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_474;
          }
          uint64_t v53 = *(void *)(a1 + 444) << 57;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_474;
        }
        char v46 = objc_alloc_init(GEOPDAutocompleteResult);
        if (!GEOPDAutocompleteResultReadAllFrom((uint64_t)v46, (void *)v3, v10 & 1)) {
          goto LABEL_473;
        }
        PBReaderRecallMark();
        uint64_t v47 = 64;
        goto LABEL_300;
      case 11:
        if (!v41) {
          goto LABEL_301;
        }
        if ((*(unsigned char *)(a1 + 445) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_474;
          }
          uint64_t v53 = *(void *)(a1 + 444) << 50;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_474;
        }
        char v46 = objc_alloc_init(GEOPDSearchBrowseCategorySuggestionResult);
        if (!GEOPDSearchBrowseCategorySuggestionResultReadAllFrom((uint64_t)v46, (void *)v3, v10 & 1)) {
          goto LABEL_473;
        }
        PBReaderRecallMark();
        uint64_t v47 = 120;
        goto LABEL_300;
      case 12:
        if (!v41) {
          goto LABEL_301;
        }
        if ((*(unsigned char *)(a1 + 445) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_474;
          }
          uint64_t v53 = *(void *)(a1 + 444) << 48;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_474;
        }
        char v46 = objc_alloc_init(GEOPDCategorySearchResult);
        if (!GEOPDCategorySearchResultReadAllFrom((uint64_t)v46, (void *)v3, v10 & 1)) {
          goto LABEL_473;
        }
        PBReaderRecallMark();
        uint64_t v47 = 136;
        goto LABEL_300;
      case 13:
        if (!v41) {
          goto LABEL_301;
        }
        if ((*(unsigned char *)(a1 + 448) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_474;
          }
          uint64_t v53 = *(void *)(a1 + 444) << 25;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_474;
        }
        char v46 = objc_alloc_init(GEOPDPopularNearbySearchResult);
        if (!GEOPDPopularNearbySearchResultReadAllFrom((uint64_t)v46, (void *)v3, v10 & 1)) {
          goto LABEL_473;
        }
        PBReaderRecallMark();
        uint64_t v47 = 320;
        goto LABEL_300;
      case 14:
        if (!v41) {
          goto LABEL_301;
        }
        if ((*(unsigned char *)(a1 + 449) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_474;
          }
          uint64_t v53 = *(void *)(a1 + 444) << 18;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_474;
        }
        char v46 = objc_alloc_init(GEOPDSearchZeroKeywordCategorySuggestionResult);
        if (!GEOPDSearchZeroKeywordCategorySuggestionResultReadAllFrom((uint64_t)v46, (void *)v3, v10 & 1)) {
          goto LABEL_473;
        }
        PBReaderRecallMark();
        uint64_t v47 = 376;
        goto LABEL_300;
      case 15:
        if (!v41) {
          goto LABEL_301;
        }
        if ((*(unsigned char *)(a1 + 449) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_474;
          }
          uint64_t v53 = *(void *)(a1 + 444) << 20;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_474;
        }
        char v46 = objc_alloc_init(GEOPDSearchFieldPlaceholderResult);
        if (!GEOPDSearchFieldPlaceholderResultReadAllFrom((uint64_t)v46, (void *)v3)) {
          goto LABEL_473;
        }
        PBReaderRecallMark();
        uint64_t v47 = 360;
        goto LABEL_300;
      case 16:
        if (!v41) {
          goto LABEL_301;
        }
        if ((*(unsigned char *)(a1 + 445) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_474;
          }
          uint64_t v53 = *(void *)(a1 + 444) << 54;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_474;
        }
        char v46 = objc_alloc_init(GEOPDBatchPopularNearbySearchResult);
        if (!GEOPDBatchPopularNearbySearchResultReadAllFrom((uint64_t)v46, (void *)v3, v10 & 1)) {
          goto LABEL_473;
        }
        PBReaderRecallMark();
        uint64_t v47 = 88;
        goto LABEL_300;
      case 17:
        if (!v41) {
          goto LABEL_301;
        }
        if ((*(unsigned char *)(a1 + 450) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_474;
          }
          uint64_t v53 = *(void *)(a1 + 444) << 13;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_474;
        }
        char v46 = objc_alloc_init(GEOPDVendorSpecificPlaceRefinementResult);
        if (!GEOPDVendorSpecificPlaceRefinementResultReadAllFrom((uint64_t)v46, (void *)v3)) {
          goto LABEL_473;
        }
        PBReaderRecallMark();
        uint64_t v47 = 416;
        goto LABEL_300;
      case 18:
        if (!v41) {
          goto LABEL_301;
        }
        if ((*(unsigned char *)(a1 + 447) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_474;
          }
          uint64_t v53 = *(void *)(a1 + 444) << 33;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_474;
        }
        char v46 = objc_alloc_init(GEOPDNearbySearchResult);
        if (!GEOPDNearbySearchResultReadAllFrom((uint64_t)v46, (void *)v3)) {
          goto LABEL_473;
        }
        PBReaderRecallMark();
        uint64_t v47 = 256;
        goto LABEL_300;
      case 19:
        if (!v41) {
          goto LABEL_301;
        }
        if ((*(unsigned char *)(a1 + 444) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_474;
          }
          uint64_t v53 = *(void *)(a1 + 444) << 62;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_474;
        }
        char v46 = objc_alloc_init(GEOPDAddressObjectGeocodingResult);
        if (!GEOPDAddressObjectGeocodingResultReadAllFrom((uint64_t)v46, (void *)v3, v10 & 1)) {
          goto LABEL_473;
        }
        PBReaderRecallMark();
        uint64_t v47 = 24;
        goto LABEL_300;
      case 20:
        if (!v41) {
          goto LABEL_301;
        }
        if ((*(unsigned char *)(a1 + 449) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_474;
          }
          uint64_t v53 = *(void *)(a1 + 444) << 17;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_474;
        }
        char v46 = objc_alloc_init(GEOPDSearchZeroKeywordWithSearchResultsSuggestionResult);
        if (!GEOPDSearchZeroKeywordWithSearchResultsSuggestionResultReadAllFrom((uint64_t)v46, (void *)v3, v10 & 1)) {
          goto LABEL_473;
        }
        PBReaderRecallMark();
        uint64_t v47 = 384;
        goto LABEL_300;
      case 21:
        if (!v41) {
          goto LABEL_301;
        }
        if ((*(unsigned char *)(a1 + 446) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_474;
          }
          uint64_t v53 = *(void *)(a1 + 444) << 44;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_474;
        }
        char v46 = objc_alloc_init(GEOPDExternalTransitLookupResult);
        if (!GEOPDExternalTransitLookupResultReadAllFrom((uint64_t)v46, (void *)v3)) {
          goto LABEL_473;
        }
        PBReaderRecallMark();
        uint64_t v47 = 168;
        goto LABEL_300;
      case 22:
        if (!v41) {
          goto LABEL_301;
        }
        if ((*(unsigned char *)(a1 + 446) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_474;
          }
          uint64_t v53 = *(void *)(a1 + 444) << 43;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_474;
        }
        char v46 = objc_alloc_init(GEOPDFeatureIdGeocodingResult);
        if (!GEOPDFeatureIdGeocodingResultReadAllFrom((uint64_t)v46, (void *)v3)) {
          goto LABEL_473;
        }
        PBReaderRecallMark();
        uint64_t v47 = 176;
        goto LABEL_300;
      case 23:
        if (!v41) {
          goto LABEL_301;
        }
        if ((*(unsigned char *)(a1 + 447) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_474;
          }
          uint64_t v53 = *(void *)(a1 + 444) << 36;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_474;
        }
        char v46 = objc_alloc_init(GEOPDMapsIdentifierPlaceLookupResult);
        if (!GEOPDMapsIdentifierPlaceLookupResultReadAllFrom((uint64_t)v46, (void *)v3)) {
          goto LABEL_473;
        }
        PBReaderRecallMark();
        uint64_t v47 = 232;
        goto LABEL_300;
      case 25:
        if (!v41) {
          goto LABEL_301;
        }
        if ((*(unsigned char *)(a1 + 445) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_474;
          }
          uint64_t v53 = *(void *)(a1 + 444) << 53;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_474;
        }
        char v46 = objc_alloc_init(GEOPDBatchReverseGeocodingResult);
        if (!GEOPDBatchReverseGeocodingResultReadAllFrom((uint64_t)v46, (void *)v3)) {
          goto LABEL_473;
        }
        PBReaderRecallMark();
        uint64_t v47 = 96;
        goto LABEL_300;
      case 30:
        if (!v41) {
          goto LABEL_301;
        }
        if ((*(unsigned char *)(a1 + 445) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_474;
          }
          uint64_t v53 = *(void *)(a1 + 444) << 51;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_474;
        }
        char v46 = objc_alloc_init(GEOPDBrandLookupResult);
        if (!GEOPDBrandLookupResultReadAllFrom((uint64_t)v46, (void *)v3)) {
          goto LABEL_473;
        }
        PBReaderRecallMark();
        uint64_t v47 = 112;
        goto LABEL_300;
      case 32:
        if (!v41) {
          goto LABEL_301;
        }
        if ((*(unsigned char *)(a1 + 450) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_474;
          }
          uint64_t v53 = *(void *)(a1 + 444) << 12;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_474;
        }
        char v46 = objc_alloc_init(GEOPDWifiFingerprintResult);
        if (!GEOPDWifiFingerprintResultReadAllFrom((uint64_t)v46, (void *)v3)) {
          goto LABEL_473;
        }
        PBReaderRecallMark();
        uint64_t v47 = 424;
        goto LABEL_300;
      case 34:
        if (!v41) {
          goto LABEL_301;
        }
        if (*(unsigned char *)(a1 + 447))
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_474;
          }
          uint64_t v53 = *(void *)(a1 + 444) << 39;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_474;
        }
        char v46 = objc_alloc_init(GEOPDIpGeoLookupResult);
        if (!GEOPDIpGeoLookupResultReadAllFrom((uint64_t)v46, (void *)v3, v10 & 1)) {
          goto LABEL_473;
        }
        PBReaderRecallMark();
        uint64_t v47 = 208;
        goto LABEL_300;
      case 35:
        if (!v41) {
          goto LABEL_301;
        }
        if ((*(unsigned char *)(a1 + 446) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_474;
          }
          uint64_t v53 = *(void *)(a1 + 444) << 41;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_474;
        }
        char v46 = objc_alloc_init(GEOPDGroundViewLabelResult);
        if (!GEOPDGroundViewLabelResultReadAllFrom((uint64_t)v46, (void *)v3)) {
          goto LABEL_473;
        }
        PBReaderRecallMark();
        uint64_t v47 = 192;
        goto LABEL_300;
      case 36:
        if (!v41) {
          goto LABEL_301;
        }
        if ((*(unsigned char *)(a1 + 445) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_474;
          }
          uint64_t v53 = *(void *)(a1 + 444) << 52;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_474;
        }
        char v46 = objc_alloc_init(GEOPDBatchSpatialLookupResult);
        if (!GEOPDBatchSpatialLookupResultReadAllFrom((uint64_t)v46, (void *)v3, v10 & 1)) {
          goto LABEL_473;
        }
        PBReaderRecallMark();
        uint64_t v47 = 104;
        goto LABEL_300;
      case 37:
        if (!v41) {
          goto LABEL_301;
        }
        if ((*(unsigned char *)(a1 + 448) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_474;
          }
          uint64_t v53 = *(void *)(a1 + 444) << 30;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_474;
        }
        char v46 = objc_alloc_init(GEOPDPlaceGlobalCommonResult);
        if (!GEOPDPlaceGlobalCommonResultReadAllFrom((uint64_t)v46, (void *)v3, v10 & 1)) {
          goto LABEL_473;
        }
        PBReaderRecallMark();
        uint64_t v47 = 280;
        goto LABEL_300;
      case 38:
        if (!v41) {
          goto LABEL_301;
        }
        if (*(unsigned char *)(a1 + 448))
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_474;
          }
          uint64_t v53 = *(void *)(a1 + 444) << 31;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_474;
        }
        char v46 = objc_alloc_init(GEOPDPlaceCollectionLookupResult);
        if (!GEOPDPlaceCollectionLookupResultReadAllFrom((uint64_t)v46, (void *)v3, v10 & 1)) {
          goto LABEL_473;
        }
        PBReaderRecallMark();
        uint64_t v47 = 272;
        goto LABEL_300;
      case 39:
        if (!v41) {
          goto LABEL_301;
        }
        if ((*(unsigned char *)(a1 + 450) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_474;
          }
          uint64_t v53 = *(void *)(a1 + 444) << 14;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_474;
        }
        char v46 = objc_alloc_init(GEOPDTransitScheduleLookupResult);
        if (!GEOPDTransitScheduleLookupResultReadAllFrom((uint64_t)v46, (void *)v3)) {
          goto LABEL_473;
        }
        PBReaderRecallMark();
        uint64_t v47 = 408;
        goto LABEL_300;
      case 40:
        if (!v41) {
          goto LABEL_301;
        }
        if ((*(unsigned char *)(a1 + 444) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_474;
          }
          uint64_t v53 = *(void *)(a1 + 444) << 56;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_474;
        }
        char v46 = objc_alloc_init(GEOPDBatchCategoryLookupResult);
        if (!GEOPDBatchCategoryLookupResultReadAllFrom((uint64_t)v46, (void *)v3, v10 & 1)) {
          goto LABEL_473;
        }
        PBReaderRecallMark();
        uint64_t v47 = 72;
        goto LABEL_300;
      case 41:
        if (!v41) {
          goto LABEL_301;
        }
        if (*(unsigned char *)(a1 + 445))
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_474;
          }
          uint64_t v53 = *(void *)(a1 + 444) << 55;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_474;
        }
        char v46 = objc_alloc_init(GEOPDBatchMerchantLookupBrandResult);
        if (!GEOPDBatchMerchantLookupBrandResultReadAllFrom((uint64_t)v46, (void *)v3, v10 & 1)) {
          goto LABEL_473;
        }
        PBReaderRecallMark();
        uint64_t v47 = 80;
        goto LABEL_300;
      case 42:
        if (!v41) {
          goto LABEL_301;
        }
        if (*(unsigned char *)(a1 + 446))
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_474;
          }
          uint64_t v53 = *(void *)(a1 + 444) << 47;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_474;
        }
        char v46 = objc_alloc_init(GEOPDChildPlaceLookupByCategoryResult);
        if (!GEOPDChildPlaceLookupByCategoryResultReadAllFrom((uint64_t)v46, (void *)v3)) {
          goto LABEL_473;
        }
        PBReaderRecallMark();
        uint64_t v47 = 144;
        goto LABEL_300;
      case 43:
        if (!v41) {
          goto LABEL_301;
        }
        if ((*(unsigned char *)(a1 + 447) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_474;
          }
          uint64_t v53 = *(void *)(a1 + 444) << 35;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_474;
        }
        char v46 = objc_alloc_init(GEOPDMapsSearchHomeResult);
        if (!GEOPDMapsSearchHomeResultReadAllFrom((uint64_t)v46, (void *)v3, v10 & 1)) {
          goto LABEL_473;
        }
        PBReaderRecallMark();
        uint64_t v47 = 240;
        goto LABEL_300;
      case 44:
        if (!v41) {
          goto LABEL_301;
        }
        if ((*(unsigned char *)(a1 + 446) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_474;
          }
          uint64_t v53 = *(void *)(a1 + 444) << 46;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_474;
        }
        char v46 = objc_alloc_init(GEOPDCollectionSuggestionResult);
        if (!GEOPDCollectionSuggestionResultReadAllFrom((uint64_t)v46, (void *)v3, v10 & 1)) {
          goto LABEL_473;
        }
        PBReaderRecallMark();
        uint64_t v47 = 152;
        goto LABEL_300;
      case 45:
        if (!v41) {
          goto LABEL_301;
        }
        if ((*(unsigned char *)(a1 + 448) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_474;
          }
          uint64_t v53 = *(void *)(a1 + 444) << 24;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_474;
        }
        char v46 = objc_alloc_init(GEOPDPublisherViewResult);
        if (!GEOPDPublisherViewResultReadAllFrom((uint64_t)v46, (void *)v3, v10 & 1)) {
          goto LABEL_473;
        }
        PBReaderRecallMark();
        uint64_t v47 = 328;
        goto LABEL_300;
      case 46:
        if (!v41) {
          goto LABEL_301;
        }
        if ((*(unsigned char *)(a1 + 444) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_474;
          }
          uint64_t v53 = *(void *)(a1 + 444) << 59;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_474;
        }
        char v46 = objc_alloc_init(GEOPDAllCollectionsViewResult);
        if (!GEOPDAllCollectionsViewResultReadAllFrom((uint64_t)v46, (void *)v3, v10 & 1)) {
          goto LABEL_473;
        }
        PBReaderRecallMark();
        uint64_t v47 = 48;
        goto LABEL_300;
      case 47:
        if (!v41) {
          goto LABEL_301;
        }
        if ((*(unsigned char *)(a1 + 444) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_474;
          }
          uint64_t v53 = *(void *)(a1 + 444) << 60;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_474;
        }
        char v46 = objc_alloc_init(GEOPDAirportEntityPlaceLookupResult);
        if (!GEOPDAirportEntityPlaceLookupResultReadAllFrom((uint64_t)v46, (void *)v3)) {
          goto LABEL_473;
        }
        PBReaderRecallMark();
        uint64_t v47 = 40;
        goto LABEL_300;
      case 48:
        if (!v41) {
          goto LABEL_301;
        }
        if (*(unsigned char *)(a1 + 450))
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_474;
          }
          uint64_t v53 = *(void *)(a1 + 444) << 15;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_474;
        }
        char v46 = objc_alloc_init(GEOPDTerritoryLookupResult);
        if (!GEOPDTerritoryLookupResultReadAllFrom((uint64_t)v46, (void *)v3)) {
          goto LABEL_473;
        }
        PBReaderRecallMark();
        uint64_t v47 = 400;
        goto LABEL_300;
      case 49:
        if (!v41) {
          goto LABEL_301;
        }
        if ((*(unsigned char *)(a1 + 447) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_474;
          }
          uint64_t v53 = *(void *)(a1 + 444) << 37;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_474;
        }
        char v46 = objc_alloc_init(GEOPDMapsHomeResult);
        if (!GEOPDMapsHomeResultReadAllFrom((uint64_t)v46, (void *)v3, v10 & 1)) {
          goto LABEL_473;
        }
        PBReaderRecallMark();
        uint64_t v47 = 224;
        goto LABEL_300;
      case 50:
        if (!v41) {
          goto LABEL_301;
        }
        if ((*(unsigned char *)(a1 + 444) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_474;
          }
          uint64_t v53 = *(void *)(a1 + 444) << 58;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_474;
        }
        char v46 = objc_alloc_init(GEOPDAllGuidesLocationsViewResult);
        if (!GEOPDAllGuidesLocationsViewResultReadAllFrom((uint64_t)v46, (void *)v3, v10 & 1)) {
          goto LABEL_473;
        }
        PBReaderRecallMark();
        uint64_t v47 = 56;
        goto LABEL_300;
      case 51:
        if (!v41) {
          goto LABEL_301;
        }
        if ((*(unsigned char *)(a1 + 446) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_474;
          }
          uint64_t v53 = *(void *)(a1 + 444) << 40;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_474;
        }
        char v46 = objc_alloc_init(GEOPDGuidesHomeResult);
        if (!GEOPDGuidesHomeResultReadAllFrom((uint64_t)v46, (void *)v3, v10 & 1)) {
          goto LABEL_473;
        }
        PBReaderRecallMark();
        uint64_t v47 = 200;
        goto LABEL_300;
      case 54:
        if (!v41) {
          goto LABEL_301;
        }
        if ((*(unsigned char *)(a1 + 446) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_474;
          }
          uint64_t v53 = *(void *)(a1 + 444) << 45;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_474;
        }
        char v46 = objc_alloc_init(GEOPDExtendedGeoLookupResult);
        if (!GEOPDExtendedGeoLookupResultReadAllFrom((uint64_t)v46, (void *)v3)) {
          goto LABEL_473;
        }
        PBReaderRecallMark();
        uint64_t v47 = 160;
        goto LABEL_300;
      case 55:
        if (!v41) {
          goto LABEL_301;
        }
        if (*(unsigned char *)(a1 + 449))
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_474;
          }
          uint64_t v53 = *(void *)(a1 + 444) << 23;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_474;
        }
        char v46 = objc_alloc_init(GEOPDQueryUnderstandingResult);
        if (!GEOPDQueryUnderstandingResultReadAllFrom((uint64_t)v46, (void *)v3, v10 & 1)) {
          goto LABEL_473;
        }
        PBReaderRecallMark();
        uint64_t v47 = 336;
        goto LABEL_300;
      case 56:
        if (!v41) {
          goto LABEL_301;
        }
        if ((*(unsigned char *)(a1 + 448) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_474;
          }
          uint64_t v53 = *(void *)(a1 + 444) << 26;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_474;
        }
        char v46 = objc_alloc_init(GEOPDPoiAtAddressLookupResult);
        if (!GEOPDPoiAtAddressLookupResultReadAllFrom((uint64_t)v46, (void *)v3)) {
          goto LABEL_473;
        }
        PBReaderRecallMark();
        uint64_t v47 = 312;
        goto LABEL_300;
      case 58:
        if (!v41) {
          goto LABEL_301;
        }
        if ((*(unsigned char *)(a1 + 448) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_474;
          }
          uint64_t v53 = *(void *)(a1 + 444) << 27;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_474;
        }
        char v46 = objc_alloc_init(GEOPDPlacecardEnrichmentResult);
        if (!GEOPDPlacecardEnrichmentResultReadAllFrom((uint64_t)v46, (void *)v3)) {
          goto LABEL_473;
        }
        PBReaderRecallMark();
        uint64_t v47 = 304;
        goto LABEL_300;
      case 59:
        if (!v41) {
          goto LABEL_301;
        }
        if ((*(unsigned char *)(a1 + 447) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_474;
          }
          uint64_t v53 = *(void *)(a1 + 444) << 32;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_474;
        }
        char v46 = objc_alloc_init(GEOPDOfflineRegionNameResult);
        if (!GEOPDOfflineRegionNameResultReadAllFrom((uint64_t)v46, (void *)v3, v10 & 1)) {
          goto LABEL_473;
        }
        PBReaderRecallMark();
        uint64_t v47 = 264;
        goto LABEL_300;
      case 60:
        if (!v41) {
          goto LABEL_301;
        }
        if ((*(unsigned char *)(a1 + 449) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_474;
          }
          uint64_t v53 = *(void *)(a1 + 444) << 21;
          goto LABEL_405;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_474;
        }
        char v46 = objc_alloc_init(GEOPDSearchCapabilitiesResult);
        if (!GEOPDSearchCapabilitiesResultReadAllFrom((uint64_t)v46, (void *)v3)) {
          goto LABEL_473;
        }
        PBReaderRecallMark();
        uint64_t v47 = 352;
        goto LABEL_300;
      case 62:
        if (!v41) {
          goto LABEL_301;
        }
        if ((*(unsigned char *)(a1 + 444) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_474;
          }
          uint64_t v53 = *(void *)(a1 + 444) << 61;
LABEL_405:
          v7 += v53 >> 63;
LABEL_406:
          uint64_t v28 = (int *)MEMORY[0x1E4F940C8];
LABEL_407:
          unint64_t v29 = (int *)MEMORY[0x1E4F940B8];
          if (!(v60 & 1 | (v7 != 0))) {
            goto LABEL_408;
          }
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_474;
        }
        char v46 = objc_alloc_init(GEOPDAddressRecommendationResult);
        if (GEOPDAddressRecommendationResultReadAllFrom((uint64_t)v46, (void *)v3))
        {
          PBReaderRecallMark();
          uint64_t v47 = 32;
LABEL_300:
          uint64_t v51 = *(void **)(a1 + v47);
          *(void *)(a1 + v47) = v46;

          --v7;
          goto LABEL_406;
        }
LABEL_473:

LABEL_474:
        int v58 = 0;
        uint64_t v28 = (int *)MEMORY[0x1E4F940C8];
LABEL_409:
        if (v59) {
LABEL_410:
        }
          *(void *)(a1 + 444) |= 1uLL;
        if (v62 || (v58 & 1) == 0)
        {
          *(void *)(a1 + 444) |= 0xFFFFFFFFFFFFEuLL;
        }
        else if (v26)
        {
          while (1)
          {
            int v55 = *v26++;
            uint64_t v54 = 0x100000000000;
            switch(v55)
            {
              case 0:
                goto LABEL_467;
              case 1:
                goto LABEL_465;
              case 2:
                uint64_t v54 = 0x200000;
                goto LABEL_465;
              case 3:
                uint64_t v54 = 0x4000;
                goto LABEL_465;
              case 4:
                uint64_t v54 = 0x20000000000;
                goto LABEL_465;
              case 5:
                uint64_t v54 = 0x400000000;
                goto LABEL_465;
              case 6:
                uint64_t v54 = 0x20000000;
                goto LABEL_465;
              case 7:
                uint64_t v54 = 0x800000000;
                goto LABEL_465;
              case 8:
                uint64_t v54 = 0x800000000000;
                goto LABEL_465;
              case 9:
                uint64_t v54 = 0x2000000;
                goto LABEL_465;
              case 10:
                uint64_t v54 = 64;
                goto LABEL_465;
              case 11:
                uint64_t v54 = 0x2000;
                goto LABEL_465;
              case 12:
                uint64_t v54 = 0x8000;
                goto LABEL_465;
              case 13:
                uint64_t v54 = 0x4000000000;
                goto LABEL_465;
              case 14:
                uint64_t v54 = 0x200000000000;
                goto LABEL_465;
              case 15:
                uint64_t v54 = 0x80000000000;
                goto LABEL_465;
              case 16:
                uint64_t v54 = 512;
                goto LABEL_465;
              case 17:
                uint64_t v54 = 0x4000000000000;
                goto LABEL_465;
              case 18:
                uint64_t v54 = 0x40000000;
                goto LABEL_465;
              case 19:
                uint64_t v54 = 2;
                goto LABEL_465;
              case 20:
                uint64_t v54 = 0x400000000000;
                goto LABEL_465;
              case 21:
                uint64_t v54 = 0x80000;
                goto LABEL_465;
              case 22:
                uint64_t v54 = 0x100000;
                goto LABEL_465;
              case 23:
                uint64_t v54 = 0x8000000;
                goto LABEL_465;
              case 25:
                uint64_t v54 = 1024;
                goto LABEL_465;
              case 30:
                uint64_t v54 = 4096;
                goto LABEL_465;
              case 32:
                uint64_t v54 = 0x8000000000000;
                goto LABEL_465;
              case 34:
                uint64_t v54 = 0x1000000;
                goto LABEL_465;
              case 35:
                uint64_t v54 = 0x400000;
                goto LABEL_465;
              case 36:
                uint64_t v54 = 2048;
                goto LABEL_465;
              case 37:
                uint64_t v54 = 0x200000000;
                goto LABEL_465;
              case 38:
                uint64_t v54 = 0x100000000;
                goto LABEL_465;
              case 39:
                uint64_t v54 = 0x2000000000000;
                goto LABEL_465;
              case 40:
                uint64_t v54 = 128;
                goto LABEL_465;
              case 41:
                uint64_t v54 = 256;
                goto LABEL_465;
              case 42:
                uint64_t v54 = 0x10000;
                goto LABEL_465;
              case 43:
                uint64_t v54 = 0x10000000;
                goto LABEL_465;
              case 44:
                uint64_t v54 = 0x20000;
                goto LABEL_465;
              case 45:
                uint64_t v54 = 0x8000000000;
                goto LABEL_465;
              case 46:
                uint64_t v54 = 16;
                goto LABEL_465;
              case 47:
                uint64_t v54 = 8;
                goto LABEL_465;
              case 48:
                uint64_t v54 = 0x1000000000000;
                goto LABEL_465;
              case 49:
                uint64_t v54 = 0x4000000;
                goto LABEL_465;
              case 50:
                uint64_t v54 = 32;
                goto LABEL_465;
              case 51:
                uint64_t v54 = 0x800000;
                goto LABEL_465;
              case 54:
                uint64_t v54 = 0x40000;
                goto LABEL_465;
              case 55:
                uint64_t v54 = 0x10000000000;
                goto LABEL_465;
              case 56:
                uint64_t v54 = 0x2000000000;
                goto LABEL_465;
              case 58:
                uint64_t v54 = 0x1000000000;
                goto LABEL_465;
              case 59:
                uint64_t v54 = 0x80000000;
                goto LABEL_465;
              case 60:
                uint64_t v54 = 0x40000000000;
                goto LABEL_465;
              case 62:
                uint64_t v54 = 4;
LABEL_465:
                *(void *)(a1 + 444) |= v54;
                break;
              default:
                continue;
            }
          }
        }
LABEL_467:
        if (v58) {
          unint64_t v3 = *(unsigned char *)(v3 + *v28) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v62)
        {
          int v56 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      default:
        if (v59 & 1) == 0 || (*(unsigned char *)(a1 + 444))
        {
LABEL_301:
          char v52 = PBReaderSkipValueWithTag();
          uint64_t v28 = (int *)MEMORY[0x1E4F940C8];
          if ((v52 & 1) == 0)
          {
            int v58 = 0;
            goto LABEL_409;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v48 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            char v49 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v48;
          }
          int v50 = PBUnknownFieldAdd();
          uint64_t v28 = (int *)MEMORY[0x1E4F940C8];
          if (!v50)
          {
            int v58 = 0;
            goto LABEL_410;
          }
        }
        goto LABEL_407;
    }
  }
}

BOOL GEOPDDatasetABStatusReadAllFrom(uint64_t a1, void *a2)
{
  unint64_t v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    uint64_t v4 = (int *)MEMORY[0x1E4F940E8];
    unint64_t v5 = (int *)MEMORY[0x1E4F940E0];
    int v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v3[*v6]) {
          break;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          unint64_t v12 = *(void *)&v3[v11];
          if (v12 == -1 || v12 >= *(void *)&v3[*v5]) {
            break;
          }
          char v13 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          BOOL v14 = v9++ >= 9;
          if (v14)
          {
            unint64_t v10 = 0;
            int v15 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v15 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v15 || (v10 & 7) == 4) {
          break;
        }
        if ((v10 >> 3) == 1)
        {
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 20) |= 1u;
          while (1)
          {
            uint64_t v20 = *v4;
            unint64_t v21 = *(void *)&v3[v20];
            if (v21 == -1 || v21 >= *(void *)&v3[*v5]) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)&v3[*v7] + v21);
            *(void *)&v3[v20] = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_32;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_34;
            }
          }
          v3[*v6] = 1;
LABEL_32:
          if (v3[*v6]) {
            LODWORD(v19) = 0;
          }
LABEL_34:
          *(_DWORD *)(a1 + 16) = v19;
        }
        else
        {
          if (!*(void *)(a1 + 8))
          {
            id v23 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            char v24 = *(void **)(a1 + 8);
            *(void *)(a1 + 8) = v23;
          }
          if (!PBUnknownFieldAdd()) {
            goto LABEL_37;
          }
        }
      }
      while (*(void *)&v3[*v4] < *(void *)&v3[*v5]);
    }
    BOOL v25 = v3[*v6] == 0;
  }
  else
  {
LABEL_37:
    BOOL v25 = 0;
  }
  objc_sync_exit(v3);

  return v25;
}

void sub_188F421A0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDSearchFieldPlaceholderResultReadAllFrom(uint64_t a1, void *a2)
{
  unint64_t v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    uint64_t v4 = (int *)MEMORY[0x1E4F940E8];
    unint64_t v5 = (int *)MEMORY[0x1E4F940E0];
    int v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v3[*v6]) {
          break;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          if (v9++ >= 9)
          {
            unint64_t v10 = 0;
            int v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v16 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v16 || (v10 & 7) == 4) {
          break;
        }
        if ((v10 >> 3) == 1)
        {
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = *(void **)(a1 + 16);
          *(void *)(a1 + 16) = v18;
        }
        else
        {
          if (!*(void *)(a1 + 8))
          {
            id v20 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            unint64_t v21 = *(void **)(a1 + 8);
            *(void *)(a1 + 8) = v20;
          }
          if (!PBUnknownFieldAdd()) {
            goto LABEL_26;
          }
        }
      }
      while (*(void *)&v3[*v4] < *(void *)&v3[*v5]);
    }
    BOOL v22 = v3[*v6] == 0;
  }
  else
  {
LABEL_26:
    BOOL v22 = 0;
  }
  objc_sync_exit(v3);

  return v22;
}

void sub_188F423FC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F425AC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDClientRankingFeatureUnitReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  int v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 60);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 56)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  unsigned int v11 = (vaddv_s16((int16x4_t)(*(void *)&vshl_u16((uint16x4_t)(*(void *)&vdup_n_s16(*(unsigned __int8 *)(a1 + 76)) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFBFFFAFFFCFFFDLL) & 0xFF01FF01FF01FF01))+ ((*(unsigned char *)(a1 + 76) & 4) != 0));
  while (2)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v11;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_9;
      case 0:
        BOOL v14 = v11 > 2;
        char v15 = v14 & ~(_BYTE)v10 | v9;
        unsigned __int8 v16 = v14 | v10;
        char v65 = v15;
        char v66 = v16 | v15;
        if ((v16 | v8)) {
          char v17 = 0;
        }
        else {
          char v17 = a3;
        }
        uint64_t v18 = (int *)MEMORY[0x1E4F940E8];
        char v67 = (v17 == 0) | v16;
        BOOL v68 = v16;
        uint64_t v19 = (int *)MEMORY[0x1E4F940C8];
        id v20 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v11;
LABEL_7:
        uint64_t v12 = v9;
LABEL_8:
        uint64_t v13 = v10;
LABEL_9:
        ++v7;
        uint64_t v9 = v12;
        uint64_t v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v18) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v19)) {
      goto LABEL_103;
    }
    char v21 = 0;
    unsigned int v22 = 0;
    unint64_t v23 = 0;
    while (1)
    {
      uint64_t v24 = *v18;
      uint64_t v25 = *(void *)(v3 + v24);
      unint64_t v26 = v25 + 1;
      if (v25 == -1 || v26 > *(void *)(v3 + *v6)) {
        break;
      }
      char v27 = *(unsigned char *)(*(void *)(v3 + *v20) + v25);
      *(void *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0) {
        goto LABEL_24;
      }
      v21 += 7;
      BOOL v28 = v22++ >= 9;
      if (v28)
      {
        unint64_t v23 = 0;
        int v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_26;
      }
    }
    *(unsigned char *)(v3 + *v19) = 1;
LABEL_24:
    int v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(unsigned char *)(v3 + *v19)) {
      unint64_t v23 = 0;
    }
LABEL_26:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_103:
      int v63 = 1;
      goto LABEL_104;
    }
    unint64_t v31 = v23 >> 3;
    BOOL v32 = v68;
    if ((v67 & 1) == 0)
    {
      uint64_t v33 = v17;
      do
      {
        int v35 = *v33++;
        int v34 = v35;
        BOOL v32 = v35 != 0;
        if (v35) {
          BOOL v36 = v34 == v31;
        }
        else {
          BOOL v36 = 1;
        }
      }
      while (!v36);
    }
    switch((int)v31)
    {
      case 1:
        if ((v8 & 1) == 0) {
          goto LABEL_81;
        }
        char v37 = 0;
        unsigned int v38 = 0;
        uint64_t v39 = 0;
        *(unsigned char *)(a1 + 76) |= 1u;
        while (1)
        {
          uint64_t v40 = *v18;
          uint64_t v41 = *(void *)(v3 + v40);
          unint64_t v42 = v41 + 1;
          if (v41 == -1 || v42 > *(void *)(v3 + *v6)) {
            break;
          }
          char v43 = *(unsigned char *)(*(void *)(v3 + *v20) + v41);
          *(void *)(v3 + v40) = v42;
          v39 |= (unint64_t)(v43 & 0x7F) << v37;
          if ((v43 & 0x80) == 0) {
            goto LABEL_84;
          }
          v37 += 7;
          BOOL v28 = v38++ >= 9;
          if (v28)
          {
            LODWORD(v39) = 0;
            goto LABEL_86;
          }
        }
        *(unsigned char *)(v3 + *v19) = 1;
LABEL_84:
        if (*(unsigned char *)(v3 + *v19)) {
          LODWORD(v39) = 0;
        }
LABEL_86:
        uint64_t v57 = 68;
        goto LABEL_91;
      case 2:
        if (!v32) {
          goto LABEL_81;
        }
        if ((*(unsigned char *)(a1 + 76) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_122;
          }
          char v58 = 8 * *(unsigned char *)(a1 + 76);
          goto LABEL_100;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_122;
        }
        uint64_t v47 = objc_alloc_init(GEOPDClientRankingFeatureTypeSource);
        if (!GEOPDClientRankingFeatureTypeSourceReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_121;
        }
        PBReaderRecallMark();
        uint64_t v48 = 32;
        goto LABEL_80;
      case 3:
        if (!v32) {
          goto LABEL_81;
        }
        if ((*(unsigned char *)(a1 + 76) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_122;
          }
          char v58 = 16 * *(unsigned char *)(a1 + 76);
          goto LABEL_100;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_122;
        }
        uint64_t v47 = objc_alloc_init(GEOPDClientRankingFeatureTypeResult);
        if (!GEOPDClientRankingFeatureTypeResultReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_121;
        }
        PBReaderRecallMark();
        uint64_t v48 = 24;
        goto LABEL_80;
      case 4:
        if ((v8 & 1) == 0) {
          goto LABEL_81;
        }
        char v49 = 0;
        unsigned int v50 = 0;
        uint64_t v39 = 0;
        *(unsigned char *)(a1 + 76) |= 2u;
        while (2)
        {
          uint64_t v51 = *v18;
          uint64_t v52 = *(void *)(v3 + v51);
          unint64_t v53 = v52 + 1;
          if (v52 == -1 || v53 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v19) = 1;
          }
          else
          {
            char v54 = *(unsigned char *)(*(void *)(v3 + *v20) + v52);
            *(void *)(v3 + v51) = v53;
            v39 |= (unint64_t)(v54 & 0x7F) << v49;
            if (v54 < 0)
            {
              v49 += 7;
              BOOL v28 = v50++ >= 9;
              if (v28)
              {
                LODWORD(v39) = 0;
                goto LABEL_90;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v19)) {
          LODWORD(v39) = 0;
        }
LABEL_90:
        uint64_t v57 = 72;
LABEL_91:
        *(_DWORD *)(a1 + v57) = v39;
        goto LABEL_102;
      case 5:
        if (!v32) {
          goto LABEL_81;
        }
        if ((*(unsigned char *)(a1 + 76) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_122;
          }
          char v58 = 2 * *(unsigned char *)(a1 + 76);
          goto LABEL_100;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_122;
        }
        uint64_t v47 = objc_alloc_init(GEOPDClientRankingFeatureFunctionTypeLinear);
        if (!GEOPDClientRankingFeatureFunctionTypeLinearReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_121;
        }
        PBReaderRecallMark();
        uint64_t v48 = 48;
        goto LABEL_80;
      case 6:
        if (!v32) {
          goto LABEL_81;
        }
        if ((*(unsigned char *)(a1 + 76) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_122;
          }
          char v58 = 4 * *(unsigned char *)(a1 + 76);
LABEL_100:
          v7 += v58 >> 7;
LABEL_101:
          uint64_t v19 = (int *)MEMORY[0x1E4F940C8];
          goto LABEL_102;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_122;
        }
        uint64_t v47 = objc_alloc_init(GEOPDClientRankingFeatureFunctionTypeDiscrete);
        if (GEOPDClientRankingFeatureFunctionTypeDiscreteReadAllFrom((uint64_t)v47, (void *)v3))
        {
          PBReaderRecallMark();
          uint64_t v48 = 40;
LABEL_80:
          int v55 = *(void **)(a1 + v48);
          *(void *)(a1 + v48) = v47;

          --v7;
          goto LABEL_101;
        }
LABEL_121:

LABEL_122:
        int v63 = 0;
        char v64 = &OBJC_IVAR___GEOMapDataSubscriptionDownloadGroup__completedSubscriptions;
        uint64_t v19 = (int *)MEMORY[0x1E4F940C8];
LABEL_105:
        if (v65) {
LABEL_106:
        }
          *(unsigned char *)(a1 + v64[785]) |= 4u;
        if (v68 || (v63 & 1) == 0)
        {
          *(unsigned char *)(a1 + v64[785]) |= 0x10u;
          *(unsigned char *)(a1 + v64[785]) |= 8u;
          *(unsigned char *)(a1 + v64[785]) |= 0x40u;
          *(unsigned char *)(a1 + v64[785]) |= 0x20u;
        }
        else if (v17)
        {
          while (1)
          {
            int v59 = *v17++;
            char v60 = 16;
            switch(v59)
            {
              case 0:
                goto LABEL_115;
              case 2:
                goto LABEL_114;
              case 3:
                char v60 = 8;
                goto LABEL_114;
              case 5:
                char v60 = 64;
                goto LABEL_114;
              case 6:
                char v60 = 32;
LABEL_114:
                *(unsigned char *)(a1 + v64[785]) |= v60;
                break;
              default:
                continue;
            }
          }
        }
LABEL_115:
        if (v63) {
          unint64_t v3 = *(unsigned char *)(v3 + *v19) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v68)
        {
          char v61 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      default:
        if ((v65 & 1) == 0 || (*(unsigned char *)(a1 + 76) & 4) != 0)
        {
LABEL_81:
          char v56 = PBReaderSkipValueWithTag();
          uint64_t v19 = (int *)MEMORY[0x1E4F940C8];
          if ((v56 & 1) == 0)
          {
            int v63 = 0;
LABEL_104:
            char v64 = &OBJC_IVAR___GEOMapDataSubscriptionDownloadGroup__completedSubscriptions;
            goto LABEL_105;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v44 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            BOOL v45 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v44;
          }
          int v46 = PBUnknownFieldAdd();
          uint64_t v19 = (int *)MEMORY[0x1E4F940C8];
          if (!v46)
          {
            int v63 = 0;
            char v64 = &OBJC_IVAR___GEOMapDataSubscriptionDownloadGroup__completedSubscriptions;
            goto LABEL_106;
          }
        }
LABEL_102:
        if (!(v66 & 1 | (v7 != 0))) {
          goto LABEL_103;
        }
        continue;
    }
  }
}

BOOL GEOPDRoadAccessInfoReadAllFrom(uint64_t a1, void *a2)
{
  unint64_t v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    uint64_t v4 = (int *)MEMORY[0x1E4F940E8];
    unint64_t v5 = (int *)MEMORY[0x1E4F940E0];
    int v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v3[*v6]) {
          break;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          if (v9++ >= 9)
          {
            unint64_t v10 = 0;
            int v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v16 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v16 || (v10 & 7) == 4) {
          break;
        }
        if ((v10 >> 3) == 1)
        {
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_29;
          }
          uint64_t v18 = objc_alloc_init(GEORoadAccessPoint);
          if (!GEORoadAccessPointReadAllFrom((uint64_t)v18, v3))
          {

            goto LABEL_29;
          }
          PBReaderRecallMark();
          -[GEOPDRoadAccessInfo addRoadAccessPoint:](a1, v18);
        }
        else
        {
          if (!*(void *)(a1 + 8))
          {
            id v19 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            id v20 = *(void **)(a1 + 8);
            *(void *)(a1 + 8) = v19;
          }
          if (!PBUnknownFieldAdd()) {
            goto LABEL_29;
          }
        }
      }
      while (*(void *)&v3[*v4] < *(void *)&v3[*v5]);
    }
    BOOL v21 = v3[*v6] == 0;
  }
  else
  {
LABEL_29:
    BOOL v21 = 0;
  }
  objc_sync_exit(v3);

  return v21;
}

void sub_188F4317C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORoadAccessPointReadAllFrom(uint64_t a1, void *a2)
{
  unint64_t v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    uint64_t v4 = (int *)MEMORY[0x1E4F940E8];
    unint64_t v5 = (int *)MEMORY[0x1E4F940E0];
    int v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v3[*v6]) {
          break;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          BOOL v15 = v9++ >= 9;
          if (v15)
          {
            unint64_t v10 = 0;
            int v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v16 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v16 || (v10 & 7) == 4) {
          break;
        }
        switch((v10 >> 3))
        {
          case 1u:
            if ((PBReaderPlaceMark() & 1) == 0) {
              goto LABEL_119;
            }
            uint64_t v18 = objc_alloc_init(GEOLatLng);
            if (GEOLatLngReadAllFrom((uint64_t)v18, v3))
            {
              PBReaderRecallMark();
              id v19 = *(void **)(a1 + 16);
              *(void *)(a1 + 16) = v18;

              continue;
            }

            goto LABEL_119;
          case 2u:
            char v20 = 0;
            unsigned int v21 = 0;
            uint64_t v22 = 0;
            *(unsigned char *)(a1 + 56) |= 0x80u;
            while (2)
            {
              uint64_t v23 = *v4;
              uint64_t v24 = *(void *)&v3[v23];
              unint64_t v25 = v24 + 1;
              if (v24 == -1 || v25 > *(void *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                char v26 = *(unsigned char *)(*(void *)&v3[*v7] + v24);
                *(void *)&v3[v23] = v25;
                v22 |= (unint64_t)(v26 & 0x7F) << v20;
                if (v26 < 0)
                {
                  v20 += 7;
                  BOOL v15 = v21++ >= 9;
                  if (v15)
                  {
                    uint64_t v22 = 0;
                    goto LABEL_86;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6]) {
              uint64_t v22 = 0;
            }
LABEL_86:
            *(unsigned char *)(a1 + 52) = v22 != 0;
            continue;
          case 3u:
            char v27 = 0;
            unsigned int v28 = 0;
            uint64_t v29 = 0;
            *(unsigned char *)(a1 + 56) |= 0x40u;
            while (2)
            {
              uint64_t v30 = *v4;
              uint64_t v31 = *(void *)&v3[v30];
              unint64_t v32 = v31 + 1;
              if (v31 == -1 || v32 > *(void *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                char v33 = *(unsigned char *)(*(void *)&v3[*v7] + v31);
                *(void *)&v3[v30] = v32;
                v29 |= (unint64_t)(v33 & 0x7F) << v27;
                if (v33 < 0)
                {
                  v27 += 7;
                  BOOL v15 = v28++ >= 9;
                  if (v15)
                  {
                    LODWORD(v29) = 0;
                    goto LABEL_90;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6]) {
              LODWORD(v29) = 0;
            }
LABEL_90:
            uint64_t v72 = 48;
            goto LABEL_115;
          case 4u:
            char v34 = 0;
            unsigned int v35 = 0;
            uint64_t v29 = 0;
            *(unsigned char *)(a1 + 56) |= 2u;
            while (2)
            {
              uint64_t v36 = *v4;
              uint64_t v37 = *(void *)&v3[v36];
              unint64_t v38 = v37 + 1;
              if (v37 == -1 || v38 > *(void *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                char v39 = *(unsigned char *)(*(void *)&v3[*v7] + v37);
                *(void *)&v3[v36] = v38;
                v29 |= (unint64_t)(v39 & 0x7F) << v34;
                if (v39 < 0)
                {
                  v34 += 7;
                  BOOL v15 = v35++ >= 9;
                  if (v15)
                  {
                    LODWORD(v29) = 0;
                    goto LABEL_94;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6]) {
              LODWORD(v29) = 0;
            }
LABEL_94:
            uint64_t v72 = 28;
            goto LABEL_115;
          case 5u:
            char v40 = 0;
            unsigned int v41 = 0;
            uint64_t v29 = 0;
            *(unsigned char *)(a1 + 56) |= 8u;
            while (2)
            {
              uint64_t v42 = *v4;
              uint64_t v43 = *(void *)&v3[v42];
              unint64_t v44 = v43 + 1;
              if (v43 == -1 || v44 > *(void *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                char v45 = *(unsigned char *)(*(void *)&v3[*v7] + v43);
                *(void *)&v3[v42] = v44;
                v29 |= (unint64_t)(v45 & 0x7F) << v40;
                if (v45 < 0)
                {
                  v40 += 7;
                  BOOL v15 = v41++ >= 9;
                  if (v15)
                  {
                    LODWORD(v29) = 0;
                    goto LABEL_98;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6]) {
              LODWORD(v29) = 0;
            }
LABEL_98:
            uint64_t v72 = 36;
            goto LABEL_115;
          case 0xBu:
            char v48 = 0;
            unsigned int v49 = 0;
            uint64_t v29 = 0;
            *(unsigned char *)(a1 + 56) |= 0x20u;
            while (2)
            {
              uint64_t v50 = *v4;
              uint64_t v51 = *(void *)&v3[v50];
              unint64_t v52 = v51 + 1;
              if (v51 == -1 || v52 > *(void *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                char v53 = *(unsigned char *)(*(void *)&v3[*v7] + v51);
                *(void *)&v3[v50] = v52;
                v29 |= (unint64_t)(v53 & 0x7F) << v48;
                if (v53 < 0)
                {
                  v48 += 7;
                  BOOL v15 = v49++ >= 9;
                  if (v15)
                  {
                    LODWORD(v29) = 0;
                    goto LABEL_102;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6]) {
              LODWORD(v29) = 0;
            }
LABEL_102:
            uint64_t v72 = 44;
            goto LABEL_115;
          case 0xCu:
            char v54 = 0;
            unsigned int v55 = 0;
            uint64_t v29 = 0;
            *(unsigned char *)(a1 + 56) |= 1u;
            while (2)
            {
              uint64_t v56 = *v4;
              uint64_t v57 = *(void *)&v3[v56];
              unint64_t v58 = v57 + 1;
              if (v57 == -1 || v58 > *(void *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                char v59 = *(unsigned char *)(*(void *)&v3[*v7] + v57);
                *(void *)&v3[v56] = v58;
                v29 |= (unint64_t)(v59 & 0x7F) << v54;
                if (v59 < 0)
                {
                  v54 += 7;
                  BOOL v15 = v55++ >= 9;
                  if (v15)
                  {
                    LODWORD(v29) = 0;
                    goto LABEL_106;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6]) {
              LODWORD(v29) = 0;
            }
LABEL_106:
            uint64_t v72 = 24;
            goto LABEL_115;
          case 0xDu:
            char v60 = 0;
            unsigned int v61 = 0;
            uint64_t v29 = 0;
            *(unsigned char *)(a1 + 56) |= 0x10u;
            while (2)
            {
              uint64_t v62 = *v4;
              uint64_t v63 = *(void *)&v3[v62];
              unint64_t v64 = v63 + 1;
              if (v63 == -1 || v64 > *(void *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                char v65 = *(unsigned char *)(*(void *)&v3[*v7] + v63);
                *(void *)&v3[v62] = v64;
                v29 |= (unint64_t)(v65 & 0x7F) << v60;
                if (v65 < 0)
                {
                  v60 += 7;
                  BOOL v15 = v61++ >= 9;
                  if (v15)
                  {
                    LODWORD(v29) = 0;
                    goto LABEL_110;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6]) {
              LODWORD(v29) = 0;
            }
LABEL_110:
            uint64_t v72 = 40;
            goto LABEL_115;
          case 0xEu:
            char v66 = 0;
            unsigned int v67 = 0;
            uint64_t v29 = 0;
            *(unsigned char *)(a1 + 56) |= 4u;
            break;
          default:
            if (!*(void *)(a1 + 8))
            {
              id v46 = objc_alloc_init(MEMORY[0x1E4F940B0]);
              uint64_t v47 = *(void **)(a1 + 8);
              *(void *)(a1 + 8) = v46;
            }
            if (!PBUnknownFieldAdd()) {
              goto LABEL_119;
            }
            continue;
        }
        while (1)
        {
          uint64_t v68 = *v4;
          uint64_t v69 = *(void *)&v3[v68];
          unint64_t v70 = v69 + 1;
          if (v69 == -1 || v70 > *(void *)&v3[*v5]) {
            break;
          }
          char v71 = *(unsigned char *)(*(void *)&v3[*v7] + v69);
          *(void *)&v3[v68] = v70;
          v29 |= (unint64_t)(v71 & 0x7F) << v66;
          if ((v71 & 0x80) == 0) {
            goto LABEL_112;
          }
          v66 += 7;
          BOOL v15 = v67++ >= 9;
          if (v15)
          {
            LODWORD(v29) = 0;
            goto LABEL_114;
          }
        }
        v3[*v6] = 1;
LABEL_112:
        if (v3[*v6]) {
          LODWORD(v29) = 0;
        }
LABEL_114:
        uint64_t v72 = 32;
LABEL_115:
        *(_DWORD *)(a1 + v72) = v29;
      }
      while (*(void *)&v3[*v4] < *(void *)&v3[*v5]);
    }
    BOOL v73 = v3[*v6] == 0;
  }
  else
  {
LABEL_119:
    BOOL v73 = 0;
  }
  objc_sync_exit(v3);

  return v73;
}

void sub_188F4397C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOPDTransitScheduleFilterReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 56))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOPDTransitScheduleFilterReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)unint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 60));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 52) = [v8 position];
  *(_DWORD *)(a1 + 56) = [v8 length];
  if (a3) {
    unsigned int v9 = (int *)&GEOPDTransitScheduleFilterReadAllFrom_recursiveTag;
  }
  else {
    unsigned int v9 = (int *)&GEOPDTransitScheduleFilterReadAllFrom_initialTag;
  }
  uint64_t Specified = GEOPDTransitScheduleFilterReadSpecified(a1, (uint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 60));
  return Specified;
}

void sub_188F43CD8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOPDTransitScheduleFilterReadSpecified(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 60));
  int v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 56);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 52)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  int v11 = ((*(unsigned __int8 *)(a1 + 68) >> 3) & 1)
      + ((*(unsigned __int8 *)(a1 + 68) >> 4) & 1)
      + ((*(unsigned __int8 *)(a1 + 68) >> 2) & 1);
  while (2)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v11;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_9;
      case 0:
        BOOL v14 = v11 != 0;
        char v15 = v14 & ~(_BYTE)v10 | v9;
        unsigned __int8 v16 = v14 | v10;
        char v59 = v15;
        char v60 = v16 | v15;
        if ((v16 | v8)) {
          char v17 = 0;
        }
        else {
          char v17 = a3;
        }
        char v61 = (v17 == 0) | v16;
        BOOL v62 = v16;
        uint64_t v18 = (int *)MEMORY[0x1E4F940E8];
        id v19 = (int *)MEMORY[0x1E4F940C8];
        char v20 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v11;
LABEL_7:
        uint64_t v12 = v9;
LABEL_8:
        uint64_t v13 = v10;
LABEL_9:
        ++v7;
        uint64_t v9 = v12;
        uint64_t v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v18) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v19)) {
      goto LABEL_80;
    }
    char v21 = 0;
    unsigned int v22 = 0;
    unint64_t v23 = 0;
    while (1)
    {
      uint64_t v24 = *v18;
      uint64_t v25 = *(void *)(v3 + v24);
      unint64_t v26 = v25 + 1;
      if (v25 == -1 || v26 > *(void *)(v3 + *v6)) {
        break;
      }
      char v27 = *(unsigned char *)(*(void *)(v3 + *v20) + v25);
      *(void *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0) {
        goto LABEL_24;
      }
      v21 += 7;
      BOOL v28 = v22++ >= 9;
      if (v28)
      {
        unint64_t v23 = 0;
        int v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_26;
      }
    }
    *(unsigned char *)(v3 + *v19) = 1;
LABEL_24:
    int v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(unsigned char *)(v3 + *v19)) {
      unint64_t v23 = 0;
    }
LABEL_26:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_80:
      int v57 = 1;
      goto LABEL_81;
    }
    unint64_t v31 = v23 >> 3;
    BOOL v32 = v62;
    if ((v61 & 1) == 0)
    {
      char v33 = v17;
      do
      {
        int v35 = *v33++;
        int v34 = v35;
        BOOL v32 = v35 != 0;
        if (v35) {
          BOOL v36 = v34 == v31;
        }
        else {
          BOOL v36 = 1;
        }
      }
      while (!v36);
    }
    switch((int)v31)
    {
      case 5:
        if (!v32) {
          goto LABEL_67;
        }
        if ((*(unsigned char *)(a1 + 68) & 8) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_101;
          }
          uint64_t v37 = objc_alloc_init(GEOPDDeparturePredicate);
          if (GEOPDDeparturePredicateReadAllFrom((uint64_t)v37, (void *)v3))
          {
            PBReaderRecallMark();
            uint64_t v38 = 24;
            goto LABEL_54;
          }
          goto LABEL_100;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_101;
        }
        char v51 = 16 * *(unsigned char *)(a1 + 68);
        goto LABEL_77;
      case 6:
        if (!v32) {
          goto LABEL_67;
        }
        if ((*(unsigned char *)(a1 + 68) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_101;
          }
          char v51 = 8 * *(unsigned char *)(a1 + 68);
LABEL_77:
          v7 += v51 >> 7;
          goto LABEL_78;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_101;
        }
        uint64_t v37 = objc_alloc_init(GEOPDDeparturePredicate);
        if (GEOPDDeparturePredicateReadAllFrom((uint64_t)v37, (void *)v3))
        {
          PBReaderRecallMark();
          uint64_t v38 = 32;
LABEL_54:
          uint64_t v42 = *(void **)(a1 + v38);
          *(void *)(a1 + v38) = v37;

          --v7;
LABEL_78:
          id v19 = (int *)MEMORY[0x1E4F940C8];
          goto LABEL_79;
        }
LABEL_100:

LABEL_101:
        int v57 = 0;
        unint64_t v58 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__flags;
        id v19 = (int *)MEMORY[0x1E4F940C8];
LABEL_82:
        if (v59) {
LABEL_83:
        }
          *(unsigned char *)(a1 + v58[538]) |= 4u;
        if (v62 || (v57 & 1) == 0)
        {
          *(unsigned char *)(a1 + v58[538]) |= 8u;
          *(unsigned char *)(a1 + v58[538]) |= 0x10u;
          goto LABEL_94;
        }
        if (v17)
        {
          while (1)
          {
            int v54 = *v17++;
            int v53 = v54;
            if (v54 == 5) {
              break;
            }
            if (v53 == 6)
            {
              char v52 = 16;
LABEL_90:
              *(unsigned char *)(a1 + v58[538]) |= v52;
            }
            else if (!v53)
            {
              goto LABEL_94;
            }
          }
          char v52 = 8;
          goto LABEL_90;
        }
LABEL_94:
        if (v57) {
          uint64_t v3 = *(unsigned char *)(v3 + *v19) == 0;
        }
        else {
          uint64_t v3 = 0;
        }
        if (v62)
        {
          unsigned int v55 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      case 7:
        if ((v8 & 1) == 0) {
          goto LABEL_67;
        }
        if (!PBReaderPlaceMark() || !GEOPDTimeRangeReadAllFrom(a1 + 40, v3)) {
          goto LABEL_101;
        }
        PBReaderRecallMark();
        *(unsigned char *)(a1 + 68) |= 1u;
        goto LABEL_78;
      case 8:
        if ((v8 & 1) == 0) {
          goto LABEL_67;
        }
        char v43 = 0;
        unsigned int v44 = 0;
        uint64_t v45 = 0;
        *(unsigned char *)(a1 + 68) |= 2u;
        while (2)
        {
          uint64_t v46 = *v18;
          uint64_t v47 = *(void *)(v3 + v46);
          unint64_t v48 = v47 + 1;
          if (v47 == -1 || v48 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v19) = 1;
          }
          else
          {
            char v49 = *(unsigned char *)(*(void *)(v3 + *v20) + v47);
            *(void *)(v3 + v46) = v48;
            v45 |= (unint64_t)(v49 & 0x7F) << v43;
            if (v49 < 0)
            {
              v43 += 7;
              BOOL v28 = v44++ >= 9;
              if (v28)
              {
                uint64_t v45 = 0;
                goto LABEL_72;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v19)) {
          uint64_t v45 = 0;
        }
LABEL_72:
        *(unsigned char *)(a1 + 64) = v45 != 0;
        goto LABEL_79;
      default:
        if ((v59 & 1) == 0 || (*(unsigned char *)(a1 + 68) & 4) != 0)
        {
LABEL_67:
          char v50 = PBReaderSkipValueWithTag();
          id v19 = (int *)MEMORY[0x1E4F940C8];
          if ((v50 & 1) == 0)
          {
            int v57 = 0;
LABEL_81:
            unint64_t v58 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__flags;
            goto LABEL_82;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v39 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            char v40 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v39;
          }
          int v41 = PBUnknownFieldAdd();
          id v19 = (int *)MEMORY[0x1E4F940C8];
          if (!v41)
          {
            int v57 = 0;
            unint64_t v58 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__flags;
            goto LABEL_83;
          }
        }
LABEL_79:
        if (!(v60 & 1 | (v7 != 0))) {
          goto LABEL_80;
        }
        continue;
    }
  }
}

BOOL GEOPDDeparturePredicateReadAllFrom(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    uint64_t v4 = (int *)MEMORY[0x1E4F940E8];
    unint64_t v5 = (int *)MEMORY[0x1E4F940E0];
    int v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v3[*v6]) {
          break;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          BOOL v15 = v9++ >= 9;
          if (v15)
          {
            unint64_t v10 = 0;
            int v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v16 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v16 || (v10 & 7) == 4) {
          break;
        }
        if ((v10 >> 3) == 2)
        {
          char v18 = 0;
          unsigned int v19 = 0;
          uint64_t v20 = 0;
          *(unsigned char *)(a1 + 32) |= 2u;
          while (1)
          {
            uint64_t v21 = *v4;
            uint64_t v22 = *(void *)&v3[v21];
            unint64_t v23 = v22 + 1;
            if (v22 == -1 || v23 > *(void *)&v3[*v5]) {
              break;
            }
            char v24 = *(unsigned char *)(*(void *)&v3[*v7] + v22);
            *(void *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0) {
              goto LABEL_36;
            }
            v18 += 7;
            BOOL v15 = v19++ >= 9;
            if (v15)
            {
              LODWORD(v20) = 0;
              goto LABEL_38;
            }
          }
          v3[*v6] = 1;
LABEL_36:
          if (v3[*v6]) {
            LODWORD(v20) = 0;
          }
LABEL_38:
          *(_DWORD *)(a1 + 28) = v20;
        }
        else if ((v10 >> 3) == 1)
        {
          if (!PBReaderPlaceMark() || !GEOPDTimeRangeReadAllFrom(a1 + 16, (uint64_t)v3)) {
            goto LABEL_41;
          }
          PBReaderRecallMark();
          *(unsigned char *)(a1 + 32) |= 1u;
        }
        else
        {
          if (!*(void *)(a1 + 8))
          {
            id v25 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            unint64_t v26 = *(void **)(a1 + 8);
            *(void *)(a1 + 8) = v25;
          }
          if (!PBUnknownFieldAdd()) {
            goto LABEL_41;
          }
        }
      }
      while (*(void *)&v3[*v4] < *(void *)&v3[*v5]);
    }
    BOOL v27 = v3[*v6] == 0;
  }
  else
  {
LABEL_41:
    BOOL v27 = 0;
  }
  objc_sync_exit(v3);

  return v27;
}

void sub_188F4463C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDTimeRangeReadAllFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  unint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (_DWORD *)(a1 + 4);
    char v8 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        uint64_t v12 = *v3;
        uint64_t v13 = *(void *)(a2 + v12);
        unint64_t v14 = v13 + 1;
        if (v13 == -1 || v14 > *(void *)(a2 + *v4)) {
          break;
        }
        char v15 = *(unsigned char *)(*(void *)(a2 + *v8) + v13);
        *(void *)(a2 + v12) = v14;
        v11 |= (unint64_t)(v15 & 0x7F) << v9;
        if ((v15 & 0x80) == 0) {
          goto LABEL_12;
        }
        v9 += 7;
        if (v10++ >= 9)
        {
          unint64_t v11 = 0;
          int v17 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v17 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v11 = 0;
      }
LABEL_14:
      if (v17 || (v11 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v11 >> 3) == 2) {
        break;
      }
      if ((v11 >> 3) == 1)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        *(unsigned char *)(a1 + 8) |= 2u;
        while (1)
        {
          uint64_t v22 = *v3;
          uint64_t v23 = *(void *)(a2 + v22);
          unint64_t v24 = v23 + 1;
          if (v23 == -1 || v24 > *(void *)(a2 + *v4))
          {
            BOOL v27 = v7;
            goto LABEL_38;
          }
          char v25 = *(unsigned char *)(*(void *)(a2 + *v8) + v23);
          *(void *)(a2 + v22) = v24;
          v21 |= (unint64_t)(v25 & 0x7F) << v19;
          if ((v25 & 0x80) == 0) {
            break;
          }
          v19 += 7;
          BOOL v26 = v20++ > 8;
          if (v26)
          {
            LODWORD(v21) = 0;
            BOOL v27 = v7;
            goto LABEL_41;
          }
        }
        BOOL v27 = v7;
LABEL_39:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v21) = 0;
        }
LABEL_41:
        *BOOL v27 = v21;
        goto LABEL_42;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_42:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v28 = 0;
    unsigned int v29 = 0;
    uint64_t v21 = 0;
    *(unsigned char *)(a1 + 8) |= 1u;
    while (1)
    {
      uint64_t v30 = *v3;
      uint64_t v31 = *(void *)(a2 + v30);
      unint64_t v32 = v31 + 1;
      if (v31 == -1 || v32 > *(void *)(a2 + *v4)) {
        break;
      }
      char v33 = *(unsigned char *)(*(void *)(a2 + *v8) + v31);
      *(void *)(a2 + v30) = v32;
      v21 |= (unint64_t)(v33 & 0x7F) << v28;
      if ((v33 & 0x80) == 0)
      {
        BOOL v27 = (_DWORD *)a1;
        goto LABEL_39;
      }
      v28 += 7;
      BOOL v26 = v29++ > 8;
      if (v26)
      {
        LODWORD(v21) = 0;
        BOOL v27 = (_DWORD *)a1;
        goto LABEL_41;
      }
    }
    BOOL v27 = (_DWORD *)a1;
LABEL_38:
    *(unsigned char *)(a2 + *v5) = 1;
    goto LABEL_39;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_188F44DB0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F44F7C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t geo::codec::_readLabelPlacementMetadata(void *a1, void *a2)
{
  unint64_t v2 = a1[1];
  if (!v2) {
    return 1;
  }
  uint64_t v4 = 0;
  unsigned int v5 = 0;
  while (*(_WORD *)(*a1 + 16 * v4) != 141)
  {
    uint64_t v4 = ++v5;
    if (v2 <= v5) {
      return 1;
    }
  }
  uint64_t v6 = geo::codec::chapterAt((uint64_t)a1, v5, 141, *a2 + 1912);
  if (!v6) {
    return 1;
  }
  uint64_t v7 = v6;
  uint64_t v9 = *a2;
  char v8 = (std::__shared_weak_count *)a2[1];
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v10.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v11 = *(void *)(v7 + 48);
  unint64_t v12 = *(void *)(v7 + 56);
  unint64_t v13 = v12 - v11;
  if (v12 < v11)
  {
    unint64_t v14 = (FILE *)*MEMORY[0x1E4F143C8];
    int v15 = 6674;
    goto LABEL_27;
  }
  char v18 = (unsigned __int8 *)(*(void *)(v7 + 40) + v11);
  *(void *)(v7 + 8) = v18;
  *(unsigned char *)(v7 + 32) = 1;
  *(void *)(v7 + 16) = v13;
  *(void *)(v7 + 24) = 0;
  unint64_t v19 = 8 * v13;
  if (!(8 * v13) || (unint64_t v20 = *v18, *(void *)(v7 + 24) = 5, v21 = v20 >> 3, v21 + 6 > v19))
  {
    unint64_t v14 = (FILE *)*MEMORY[0x1E4F143C8];
    int v15 = 6678;
    goto LABEL_27;
  }
  int v22 = 0;
  unint64_t v23 = v21 + 1;
  unint64_t v24 = 5;
  do
  {
    unint64_t v25 = 8 - (v24 & 7);
    if (v23 < v25) {
      unint64_t v25 = v23;
    }
    int v22 = (v18[v24 >> 3] >> (8 - (v24 & 7) - v25)) & ~(-1 << v25) | (v22 << v25);
    v24 += v25;
    *(void *)(v7 + 24) = v24;
    v23 -= v25;
  }
  while (v23);
  *(_DWORD *)(v7 + 64) = v22;
  if (v24 + 5 > v19) {
    goto LABEL_26;
  }
  int v26 = 0;
  unint64_t v27 = 5;
  do
  {
    unint64_t v28 = 8 - (v24 & 7);
    if (v27 < v28) {
      unint64_t v28 = v27;
    }
    int v26 = (v18[v24 >> 3] >> (8 - (v24 & 7) - v28)) & ~(-1 << v28) | (v26 << v28);
    v24 += v28;
    *(void *)(v7 + 24) = v24;
    v27 -= v28;
  }
  while (v27);
  unint64_t v29 = (v26 + 1);
  if (v24 + v29 > v19)
  {
LABEL_26:
    unint64_t v14 = (FILE *)*MEMORY[0x1E4F143C8];
    int v15 = 6680;
    goto LABEL_27;
  }
  if (v26 != -1)
  {
    do
    {
      unint64_t v32 = 8 - (v24 & 7);
      if (v29 < v32) {
        unint64_t v32 = v29;
      }
      v24 += v32;
      v29 -= v32;
    }
    while (v29);
    *(void *)(v7 + 24) = v24;
  }
  if (v24 + 5 > v19) {
    goto LABEL_47;
  }
  int v33 = 0;
  unint64_t v34 = 5;
  do
  {
    unint64_t v35 = 8 - (v24 & 7);
    if (v34 < v35) {
      unint64_t v35 = v34;
    }
    int v33 = (v18[v24 >> 3] >> (8 - (v24 & 7) - v35)) & ~(-1 << v35) | (v33 << v35);
    v24 += v35;
    *(void *)(v7 + 24) = v24;
    v34 -= v35;
  }
  while (v34);
  unint64_t v36 = (v33 + 1);
  if (v24 + v36 > v19)
  {
LABEL_47:
    unint64_t v14 = (FILE *)*MEMORY[0x1E4F143C8];
    int v15 = 6682;
    goto LABEL_27;
  }
  if (v33 == -1) {
    goto LABEL_54;
  }
  int v37 = 0;
  do
  {
    unint64_t v38 = 8 - (v24 & 7);
    if (v36 < v38) {
      unint64_t v38 = v36;
    }
    int v37 = (v18[v24 >> 3] >> (8 - (v24 & 7) - v38)) & ~(-1 << v38) | (v37 << v38);
    v24 += v38;
    *(void *)(v7 + 24) = v24;
    v36 -= v38;
  }
  while (v36);
  if ((v37 - 5) < 0xFFFFFFFE)
  {
LABEL_54:
    uint64_t v16 = 1;
    goto LABEL_33;
  }
  if (v24 + 5 > v19) {
    goto LABEL_61;
  }
  int v39 = 0;
  unint64_t v40 = 5;
  do
  {
    unint64_t v41 = 8 - (v24 & 7);
    if (v40 < v41) {
      unint64_t v41 = v40;
    }
    int v39 = (v18[v24 >> 3] >> (8 - (v24 & 7) - v41)) & ~(-1 << v41) | (v39 << v41);
    v24 += v41;
    *(void *)(v7 + 24) = v24;
    v40 -= v41;
  }
  while (v40);
  unint64_t v42 = (v39 + 1);
  if (v24 + v42 > v19)
  {
LABEL_61:
    unint64_t v14 = (FILE *)*MEMORY[0x1E4F143C8];
    int v15 = 6688;
    goto LABEL_27;
  }
  if (v39 != -1)
  {
    int v43 = 0;
    do
    {
      unint64_t v44 = 8 - (v24 & 7);
      if (v42 < v44) {
        unint64_t v44 = v42;
      }
      int v43 = (v18[v24 >> 3] >> (8 - (v24 & 7) - v44)) & ~(-1 << v44) | (v43 << v44);
      v24 += v44;
      *(void *)(v7 + 24) = v24;
      v42 -= v44;
    }
    while (v42);
    if (v43) {
      goto LABEL_54;
    }
  }
  char v255 = (uint64_t *)(v7 + 8);
  uint64_t v45 = a2;
  uint64_t v47 = *(void *)(*a2 + 32);
  uint64_t v46 = *(void *)(*a2 + 40);
  {
    operator new();
  }
  unint64_t v48 = (unsigned char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)geo::codec::Allocator::instance(void)::alloc
                                                                      + 24))(geo::codec::Allocator::instance(void)::alloc, 24, 1);
  uint64_t v49 = *v45;
  *(void *)(*v45 + 1808) = v48;
  if (!v48)
  {
    unint64_t v14 = (FILE *)*MEMORY[0x1E4F143C8];
    int v15 = 6696;
LABEL_27:
    fprintf(v14, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v15);
    uint64_t v16 = 0;
    uint64_t v30 = 0;
    goto LABEL_28;
  }
  uint64_t v256 = v9;
  *unint64_t v48 = 0;
  unint64_t v50 = *(void *)(v7 + 24);
  unint64_t v51 = v50 + 1;
  unint64_t v52 = 8 * *(void *)(v7 + 16);
  if (v50 + 1 > v52)
  {
    int v53 = (FILE *)*MEMORY[0x1E4F143C8];
    int v54 = 6700;
LABEL_118:
    fprintf(v53, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v54);
    uint64_t v16 = 0;
    uint64_t v30 = 0;
    goto LABEL_119;
  }
  uint64_t v55 = *(void *)(v7 + 8);
  unsigned int v56 = *(unsigned __int8 *)(v55 + (v50 >> 3));
  *(void *)(v7 + 24) = v51;
  if (((v56 >> (~(_BYTE)v50 & 7)) & 1) == 0)
  {
    uint64_t v16 = 1;
    goto LABEL_33;
  }
  if (v50 + 65 > v52)
  {
    int v53 = (FILE *)*MEMORY[0x1E4F143C8];
    int v54 = 6706;
    goto LABEL_118;
  }
  unint64_t v57 = 0;
  unsigned int v58 = 1022611261 * ((unint64_t)(v46 - v47) >> 3);
  unint64_t v59 = 64;
  do
  {
    unint64_t v60 = 8 - (v51 & 7);
    if (v59 < v60) {
      unint64_t v60 = v59;
    }
    unint64_t v57 = (*(unsigned __int8 *)(v55 + (v51 >> 3)) >> (8 - (v51 & 7) - v60)) & (unint64_t)~(-1 << v60) | (v57 << v60);
    v51 += v60;
    *(void *)(v7 + 24) = v51;
    v59 -= v60;
  }
  while (v59);
  if (v51 + 6 > v52)
  {
    int v53 = (FILE *)*MEMORY[0x1E4F143C8];
    int v54 = 6708;
    goto LABEL_118;
  }
  int v61 = 0;
  unint64_t v62 = 6;
  do
  {
    unint64_t v63 = 8 - (v51 & 7);
    if (v62 < v63) {
      unint64_t v63 = v62;
    }
    int v61 = (*(unsigned __int8 *)(v55 + (v51 >> 3)) >> (8 - (v51 & 7) - v63)) & ~(-1 << v63) | (v61 << v63);
    v51 += v63;
    *(void *)(v7 + 24) = v51;
    v62 -= v63;
  }
  while (v62);
  if (v51 + 5 > v52)
  {
    int v53 = (FILE *)*MEMORY[0x1E4F143C8];
    int v54 = 6710;
    goto LABEL_118;
  }
  int v64 = 0;
  unint64_t v252 = (v61 + 1);
  unint64_t v65 = 5;
  do
  {
    unint64_t v66 = 8 - (v51 & 7);
    if (v65 < v66) {
      unint64_t v66 = v65;
    }
    int v64 = (*(unsigned __int8 *)(v55 + (v51 >> 3)) >> (8 - (v51 & 7) - v66)) & ~(-1 << v66) | (v64 << v66);
    v51 += v66;
    *(void *)(v7 + 24) = v51;
    v65 -= v66;
  }
  while (v65);
  if (v51 + 5 > v52)
  {
    int v53 = (FILE *)*MEMORY[0x1E4F143C8];
    int v54 = 6712;
    goto LABEL_118;
  }
  int v67 = 0;
  unint64_t v249 = (v64 + 1);
  unint64_t v68 = 5;
  do
  {
    unint64_t v69 = 8 - (v51 & 7);
    if (v68 < v69) {
      unint64_t v69 = v68;
    }
    int v67 = (*(unsigned __int8 *)(v55 + (v51 >> 3)) >> (8 - (v51 & 7) - v69)) & ~(-1 << v69) | (v67 << v69);
    v51 += v69;
    *(void *)(v7 + 24) = v51;
    v68 -= v69;
  }
  while (v68);
  if (v51 + 5 > v52)
  {
    int v53 = (FILE *)*MEMORY[0x1E4F143C8];
    int v54 = 6714;
    goto LABEL_118;
  }
  int v70 = 0;
  char v245 = v67 + 1;
  unint64_t v71 = 5;
  do
  {
    unint64_t v72 = 8 - (v51 & 7);
    if (v71 < v72) {
      unint64_t v72 = v71;
    }
    int v70 = (*(unsigned __int8 *)(v55 + (v51 >> 3)) >> (8 - (v51 & 7) - v72)) & ~(-1 << v72) | (v70 << v72);
    v51 += v72;
    *(void *)(v7 + 24) = v51;
    v71 -= v72;
  }
  while (v71);
  if (v51 + 5 > v52)
  {
    int v53 = (FILE *)*MEMORY[0x1E4F143C8];
    int v54 = 6716;
    goto LABEL_118;
  }
  int v73 = 0;
  unsigned int v74 = v70 + 1;
  unint64_t v75 = 5;
  do
  {
    unint64_t v76 = 8 - (v51 & 7);
    if (v75 < v76) {
      unint64_t v76 = v75;
    }
    int v73 = (*(unsigned __int8 *)(v55 + (v51 >> 3)) >> (8 - (v51 & 7) - v76)) & ~(-1 << v76) | (v73 << v76);
    v51 += v76;
    *(void *)(v7 + 24) = v51;
    v75 -= v76;
  }
  while (v75);
  if (v51 + 5 > v52) {
    goto LABEL_117;
  }
  int v77 = 0;
  char v240 = v73 + 1;
  unint64_t v78 = 5;
  do
  {
    unint64_t v79 = 8 - (v51 & 7);
    if (v78 < v79) {
      unint64_t v79 = v78;
    }
    int v77 = (*(unsigned __int8 *)(v55 + (v51 >> 3)) >> (8 - (v51 & 7) - v79)) & ~(-1 << v79) | (v77 << v79);
    v51 += v79;
    *(void *)(v7 + 24) = v51;
    v78 -= v79;
  }
  while (v78);
  unint64_t v80 = (v77 + 1);
  if (v51 + v80 > v52)
  {
LABEL_117:
    int v53 = (FILE *)*MEMORY[0x1E4F143C8];
    int v54 = 6720;
    goto LABEL_118;
  }
  unsigned int v81 = 0;
  if (v80)
  {
    do
    {
      unint64_t v82 = 8 - (v51 & 7);
      if (v80 < v82) {
        unint64_t v82 = v80;
      }
      unsigned int v81 = (*(unsigned __int8 *)(v55 + (v51 >> 3)) >> (8 - (v51 & 7) - v82)) & ~(-1 << v82) | (v81 << v82);
      v51 += v82;
      *(void *)(v7 + 24) = v51;
      v80 -= v82;
    }
    while (v80);
  }
  unint64_t v83 = v51 + v81;
  if (v83 > v52)
  {
    int v53 = (FILE *)*MEMORY[0x1E4F143C8];
    int v54 = 6721;
    goto LABEL_118;
  }
  *(void *)(v7 + 24) = v83;
  unsigned int v257 = v74;
  if (v83 + 5 > v52) {
    goto LABEL_138;
  }
  int v84 = 0;
  unint64_t v85 = 5;
  do
  {
    unint64_t v86 = 8 - (v83 & 7);
    if (v85 < v86) {
      unint64_t v86 = v85;
    }
    int v84 = (*(unsigned __int8 *)(v55 + (v83 >> 3)) >> (8 - (v83 & 7) - v86)) & ~(-1 << v86) | (v84 << v86);
    v83 += v86;
    *(void *)(v7 + 24) = v83;
    v85 -= v86;
  }
  while (v85);
  unint64_t v87 = (v84 + 1);
  if (v83 + v87 > v52)
  {
LABEL_138:
    int v53 = (FILE *)*MEMORY[0x1E4F143C8];
    int v54 = 6729;
    goto LABEL_118;
  }
  if (v84 == -1) {
    goto LABEL_191;
  }
  LODWORD(v244) = 0;
  do
  {
    unint64_t v88 = 8 - (v83 & 7);
    if (v87 < v88) {
      unint64_t v88 = v87;
    }
    uint64_t v244 = (*(unsigned __int8 *)(v55 + (v83 >> 3)) >> (8 - (v83 & 7) - v88)) & ~(-1 << v88) | (v244 << v88);
    v83 += v88;
    *(void *)(v7 + 24) = v83;
    v87 -= v88;
  }
  while (v87);
  if (!v244)
  {
LABEL_191:
    int v53 = (FILE *)*MEMORY[0x1E4F143C8];
    int v54 = 6730;
    goto LABEL_118;
  }
  *(_DWORD *)(v49 + 1816) = v244;
  {
    operator new();
  }
  uint64_t v89 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)geo::codec::Allocator::instance(void)::alloc
                                                             + 24))(geo::codec::Allocator::instance(void)::alloc, v244, 48);
  *(void *)(*v45 + 1824) = v89;
  if (!v89)
  {
    int v53 = (FILE *)*MEMORY[0x1E4F143C8];
    int v54 = 6733;
    goto LABEL_118;
  }
  {
    operator new();
  }
  uint64_t v90 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)geo::codec::Allocator::instance(void)::alloc
                                                             + 24))(geo::codec::Allocator::instance(void)::alloc, v244, 24);
  uint64_t v30 = v90;
  if (!v90)
  {
    int v120 = (FILE *)*MEMORY[0x1E4F143C8];
    int v121 = 6736;
    goto LABEL_201;
  }
  int v237 = 0;
  double v91 = 1.0 / (double)(unint64_t)~(-1 << v240);
  uint64_t v92 = *v45;
  *(double *)(*(void *)(*v45 + 1808) + 8) = v91;
  uint64_t v241 = *(void *)(v92 + 1824);
  uint64_t v94 = *(void *)(v7 + 16);
  unint64_t v93 = *(void *)(v7 + 24);
  double v95 = 1.0 / (double)(unint64_t)~(-1 << v245);
  uint64_t v246 = v90;
  do
  {
    unint64_t v96 = 8 * v94;
    if (v93 + v252 > 8 * v94)
    {
      int v120 = (FILE *)*MEMORY[0x1E4F143C8];
      int v121 = 6747;
      goto LABEL_201;
    }
    if (v252)
    {
      unint64_t v97 = 0;
      unint64_t v98 = v252;
      uint64_t v99 = *v255;
      do
      {
        unint64_t v100 = 8 - (v93 & 7);
        if (v98 < v100) {
          unint64_t v100 = v98;
        }
        unint64_t v97 = (*(unsigned __int8 *)(v99 + (v93 >> 3)) >> (8 - (v93 & 7) - v100)) & (unint64_t)~(-1 << v100) | (v97 << v100);
        v93 += v100;
        *(void *)(v7 + 24) = v93;
        v98 -= v100;
      }
      while (v98);
    }
    else
    {
      unint64_t v97 = 0;
    }
    v57 += v97;
    *(void *)(v241 + 24) = v57;
    if (v93 + v249 > v96)
    {
      int v120 = (FILE *)*MEMORY[0x1E4F143C8];
      int v121 = 6752;
      goto LABEL_201;
    }
    if (v249)
    {
      unsigned int v101 = 0;
      uint64_t v102 = *v255;
      unint64_t v103 = v249;
      do
      {
        unint64_t v104 = 8 - (v93 & 7);
        if (v103 < v104) {
          unint64_t v104 = v103;
        }
        unsigned int v101 = (*(unsigned __int8 *)(v102 + (v93 >> 3)) >> (8 - (v93 & 7) - v104)) & ~(-1 << v104) | (v101 << v104);
        v93 += v104;
        *(void *)(v7 + 24) = v93;
        v103 -= v104;
      }
      while (v103);
    }
    else
    {
      unsigned int v101 = 0;
    }
    double v105 = (double)v101 * v95;
    *(double *)uint64_t v241 = v105;
    *(void *)uint64_t v246 = v241;
    if (v105 > 0.0) {
      *(double *)(v246 + 16) = v91 / v105;
    }
    unint64_t v106 = v93 + 1;
    if (v93 + 1 > v96)
    {
      int v121 = 6761;
LABEL_200:
      int v120 = (FILE *)*MEMORY[0x1E4F143C8];
      goto LABEL_201;
    }
    unsigned int v107 = *(unsigned __int8 *)(*(void *)(v7 + 8) + (v93 >> 3));
    *(void *)(v7 + 24) = v106;
    int v108 = (double *)(v241 + 8);
    if ((v107 >> (~(_BYTE)v93 & 7)))
    {
      if (!geo::codec::decodeLabelLineRange(v255, v108, &v257, v246))
      {
        int v121 = 6763;
        goto LABEL_200;
      }
      uint64_t v94 = *(void *)(v7 + 16);
      unint64_t v106 = *(void *)(v7 + 24);
      unint64_t v96 = 8 * v94;
    }
    else
    {
      *(_OWORD *)int v108 = xmmword_18A6446A0;
    }
    if (v106 + 5 > v96)
    {
      int v121 = 6769;
      goto LABEL_200;
    }
    int v109 = 0;
    uint64_t v110 = *v255;
    unint64_t v111 = 5;
    do
    {
      unint64_t v112 = 8 - (v106 & 7);
      if (v111 < v112) {
        unint64_t v112 = v111;
      }
      int v109 = (*(unsigned __int8 *)(v110 + (v106 >> 3)) >> (8 - (v106 & 7) - v112)) & ~(-1 << v112) | (v109 << v112);
      v106 += v112;
      *(void *)(v7 + 24) = v106;
      v111 -= v112;
    }
    while (v111);
    *(_DWORD *)(v246 + 8) = v109 + 1;
    if (v106 + 5 > v96)
    {
      int v121 = 6770;
      goto LABEL_200;
    }
    int v113 = 0;
    unint64_t v93 = v106;
    unint64_t v114 = 5;
    do
    {
      unint64_t v115 = 8 - (v93 & 7);
      if (v114 < v115) {
        unint64_t v115 = v114;
      }
      int v113 = (*(unsigned __int8 *)(v110 + (v93 >> 3)) >> (8 - (v93 & 7) - v115)) & ~(-1 << v115) | (v113 << v115);
      v93 += v115;
      *(void *)(v7 + 24) = v93;
      v114 -= v115;
    }
    while (v114);
    *(_DWORD *)(v246 + 12) = v113 + 1;
    v241 += 48;
    v246 += 24;
    ++v237;
  }
  while (v237 != v244);
  if (v93 + 5 > v96) {
    goto LABEL_190;
  }
  int v116 = 0;
  unint64_t v117 = 5;
  do
  {
    unint64_t v118 = 8 - (v93 & 7);
    if (v117 < v118) {
      unint64_t v118 = v117;
    }
    int v116 = (*(unsigned __int8 *)(v110 + (v93 >> 3)) >> (8 - (v93 & 7) - v118)) & ~(-1 << v118) | (v116 << v118);
    v93 += v118;
    *(void *)(v7 + 24) = v93;
    v117 -= v118;
  }
  while (v117);
  unint64_t v119 = (v116 + 1);
  if (v93 + v119 > v96)
  {
LABEL_190:
    int v120 = (FILE *)*MEMORY[0x1E4F143C8];
    int v121 = 6775;
    goto LABEL_201;
  }
  unsigned int v122 = 0;
  if (v116 != -1)
  {
    do
    {
      unint64_t v123 = 8 - (v93 & 7);
      if (v119 < v123) {
        unint64_t v123 = v119;
      }
      unsigned int v122 = (*(unsigned __int8 *)(v110 + (v93 >> 3)) >> (8 - (v93 & 7) - v123)) & ~(-1 << v123) | (v122 << v123);
      v93 += v123;
      *(void *)(v7 + 24) = v93;
      v119 -= v123;
    }
    while (v119);
  }
  *(_DWORD *)(*v45 + 1832) = v122;
  {
    operator new();
  }
  uint64_t v253 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)geo::codec::Allocator::instance(void)::alloc
                                                             + 24))(geo::codec::Allocator::instance(void)::alloc, v122, 40);
  uint64_t v124 = *v45;
  *(void *)(*v45 + 1840) = v253;
  if (!v253)
  {
    int v120 = (FILE *)*MEMORY[0x1E4F143C8];
    int v121 = 6778;
    goto LABEL_201;
  }
  uint64_t v126 = *(void *)(v7 + 16);
  unint64_t v125 = *(void *)(v7 + 24);
  unint64_t v127 = 8 * v126;
  if (v125 + 5 > 8 * v126)
  {
    int v120 = (FILE *)*MEMORY[0x1E4F143C8];
    int v121 = 6781;
    goto LABEL_201;
  }
  int v128 = 0;
  uint64_t v129 = *v255;
  unint64_t v130 = 5;
  do
  {
    unint64_t v131 = 8 - (v125 & 7);
    if (v130 < v131) {
      unint64_t v131 = v130;
    }
    int v128 = (*(unsigned __int8 *)(v129 + (v125 >> 3)) >> (8 - (v125 & 7) - v131)) & ~(-1 << v131) | (v128 << v131);
    v125 += v131;
    *(void *)(v7 + 24) = v125;
    v130 -= v131;
  }
  while (v130);
  if (v125 + 5 > v127)
  {
    int v120 = (FILE *)*MEMORY[0x1E4F143C8];
    int v121 = 6783;
    goto LABEL_201;
  }
  int v132 = 0;
  unint64_t v250 = (v128 + 1);
  unint64_t v133 = 5;
  do
  {
    unint64_t v134 = 8 - (v125 & 7);
    if (v133 < v134) {
      unint64_t v134 = v133;
    }
    int v132 = (*(unsigned __int8 *)(v129 + (v125 >> 3)) >> (8 - (v125 & 7) - v134)) & ~(-1 << v134) | (v132 << v134);
    v125 += v134;
    *(void *)(v7 + 24) = v125;
    v133 -= v134;
  }
  while (v133);
  if (v125 + 5 > v127)
  {
    int v120 = (FILE *)*MEMORY[0x1E4F143C8];
    int v121 = 6785;
    goto LABEL_201;
  }
  int v135 = 0;
  unint64_t v238 = (v132 + 1);
  unint64_t v136 = 5;
  do
  {
    unint64_t v137 = 8 - (v125 & 7);
    if (v136 < v137) {
      unint64_t v137 = v136;
    }
    int v135 = (*(unsigned __int8 *)(v129 + (v125 >> 3)) >> (8 - (v125 & 7) - v137)) & ~(-1 << v137) | (v135 << v137);
    v125 += v137;
    *(void *)(v7 + 24) = v125;
    v136 -= v137;
  }
  while (v136);
  if (v125 + 5 > v127)
  {
    int v120 = (FILE *)*MEMORY[0x1E4F143C8];
    int v121 = 6787;
    goto LABEL_201;
  }
  int v138 = 0;
  unint64_t v235 = (v135 + 1);
  unint64_t v139 = 5;
  do
  {
    unint64_t v140 = 8 - (v125 & 7);
    if (v139 < v140) {
      unint64_t v140 = v139;
    }
    int v138 = (*(unsigned __int8 *)(v129 + (v125 >> 3)) >> (8 - (v125 & 7) - v140)) & ~(-1 << v140) | (v138 << v140);
    v125 += v140;
    *(void *)(v7 + 24) = v125;
    v139 -= v140;
  }
  while (v139);
  int v227 = 0;
  unsigned int v242 = 0;
  uint64_t v231 = v30;
  unint64_t v233 = (v138 + 1);
  uint64_t v247 = *(void *)(v124 + 1824);
  do
  {
    *(_DWORD *)(v247 + 32) = v242;
    if (v125 + v250 > 8 * v126)
    {
      int v120 = (FILE *)*MEMORY[0x1E4F143C8];
      int v121 = 6796;
      goto LABEL_201;
    }
    if (v250)
    {
      unsigned int v141 = 0;
      unint64_t v142 = v250;
      do
      {
        unint64_t v143 = 8 - (v125 & 7);
        if (v142 < v143) {
          unint64_t v143 = v142;
        }
        unsigned int v141 = (*(unsigned __int8 *)(v129 + (v125 >> 3)) >> (8 - (v125 & 7) - v143)) & ~(-1 << v143) | (v141 << v143);
        v125 += v143;
        *(void *)(v7 + 24) = v125;
        v142 -= v143;
      }
      while (v142);
      if (v141 + v242 > v122)
      {
LABEL_297:
        int v120 = (FILE *)*MEMORY[0x1E4F143C8];
        int v121 = 6797;
        goto LABEL_201;
      }
      if (v141 >= 0x10000)
      {
        int v120 = (FILE *)*MEMORY[0x1E4F143C8];
        int v121 = 6798;
        goto LABEL_201;
      }
      *(_WORD *)(v247 + 42) = v141;
      if (v141)
      {
        for (int i = 0; i != v141; ++i)
        {
          unint64_t v144 = 8 * v126;
          if (v125 + v238 > v144)
          {
            int v121 = 6803;
            goto LABEL_200;
          }
          unsigned int v145 = v238;
          if (v238)
          {
            unsigned int v145 = 0;
            unint64_t v146 = v238;
            do
            {
              unint64_t v147 = 8 - (v125 & 7);
              if (v146 < v147) {
                unint64_t v147 = v146;
              }
              unsigned int v145 = (*(unsigned __int8 *)(v129 + (v125 >> 3)) >> (8 - (v125 & 7) - v147)) & ~(-1 << v147) | (v145 << v147);
              v125 += v147;
              *(void *)(v7 + 24) = v125;
              v146 -= v147;
            }
            while (v146);
          }
          if (v145 >= v58)
          {
            int v121 = 6804;
            goto LABEL_200;
          }
          *(_DWORD *)uint64_t v253 = v145;
          if (v125 + v235 > v144)
          {
            int v121 = 6808;
            goto LABEL_200;
          }
          LOWORD(v148) = v235;
          if (v235)
          {
            unsigned int v148 = 0;
            unint64_t v149 = v235;
            do
            {
              unint64_t v150 = 8 - (v125 & 7);
              if (v149 < v150) {
                unint64_t v150 = v149;
              }
              unsigned int v148 = (*(unsigned __int8 *)(v129 + (v125 >> 3)) >> (8 - (v125 & 7) - v150)) & ~(-1 << v150) | (v148 << v150);
              v125 += v150;
              *(void *)(v7 + 24) = v125;
              v149 -= v150;
            }
            while (v149);
            if (HIWORD(v148))
            {
              int v121 = 6809;
              goto LABEL_200;
            }
          }
          *(_WORD *)(v253 + 24) = v148;
          unint64_t v151 = v125 + 1;
          if (v125 + 1 > v144)
          {
            int v120 = (FILE *)*MEMORY[0x1E4F143C8];
            int v121 = 6813;
            goto LABEL_201;
          }
          unsigned int v152 = *(unsigned __int8 *)(v129 + (v125 >> 3));
          *(void *)(v7 + 24) = v151;
          *(unsigned char *)(v253 + 31) = (v152 >> (~(_BYTE)v125 & 7)) & 1;
          unint64_t v153 = v125 + 2;
          if (v125 + 2 > v144)
          {
            int v120 = (FILE *)*MEMORY[0x1E4F143C8];
            int v121 = 6817;
            goto LABEL_201;
          }
          unsigned int v154 = *(unsigned __int8 *)(v129 + (v151 >> 3));
          *(void *)(v7 + 24) = v153;
          *(unsigned char *)(v253 + 30) = (v154 >> (~(_BYTE)v151 & 7)) & 1;
          unint64_t v155 = v125 + 3;
          if (v155 > v144)
          {
            int v121 = 6821;
            goto LABEL_200;
          }
          unsigned int v156 = *(unsigned __int8 *)(v129 + (v153 >> 3));
          *(void *)(v7 + 24) = v155;
          unint64_t v157 = (double *)(v253 + 8);
          if ((v156 >> (~(_BYTE)v153 & 7)))
          {
            if ((geo::codec::decodeLabelLineRangeUsingTileLine(v255, v157, (uint64_t)&v257, v231) & 1) == 0)
            {
              int v121 = 6823;
              goto LABEL_200;
            }
          }
          else
          {
            *(_OWORD *)unint64_t v157 = *(_OWORD *)(v247 + 8);
          }
          uint64_t v126 = *(void *)(v7 + 16);
          unint64_t v158 = *(void *)(v7 + 24);
          unint64_t v125 = v158 + 1;
          unint64_t v159 = 8 * v126;
          if (v158 + 1 > 8 * v126)
          {
            int v120 = (FILE *)*MEMORY[0x1E4F143C8];
            int v121 = 6829;
            goto LABEL_201;
          }
          uint64_t v129 = *(void *)(v7 + 8);
          unsigned int v160 = *(unsigned __int8 *)(v129 + (v158 >> 3));
          *(void *)(v7 + 24) = v125;
          if ((v160 >> (~(_BYTE)v158 & 7)))
          {
            *(unsigned char *)(v253 + 32) = 1;
            if (v125 + v233 > v159)
            {
              int v121 = 6834;
              goto LABEL_200;
            }
            if (!v233)
            {
              *(_WORD *)(v253 + 26) = 0;
              int v121 = 6841;
              goto LABEL_200;
            }
            unsigned int v161 = 0;
            unint64_t v162 = v233;
            do
            {
              unint64_t v163 = 8 - (v125 & 7);
              if (v162 < v163) {
                unint64_t v163 = v162;
              }
              unsigned int v161 = (*(unsigned __int8 *)(v129 + (v125 >> 3)) >> (8 - (v125 & 7) - v163)) & ~(-1 << v163) | (v161 << v163);
              v125 += v163;
              *(void *)(v7 + 24) = v125;
              v162 -= v163;
            }
            while (v162);
            if (HIWORD(v161))
            {
              int v121 = 6835;
              goto LABEL_200;
            }
            *(_WORD *)(v253 + 26) = v161;
            if (v125 + v233 > v159)
            {
              int v121 = 6839;
              goto LABEL_200;
            }
            unsigned int v164 = 0;
            unint64_t v165 = v233;
            do
            {
              unint64_t v166 = 8 - (v125 & 7);
              if (v165 < v166) {
                unint64_t v166 = v165;
              }
              unsigned int v164 = (*(unsigned __int8 *)(v129 + (v125 >> 3)) >> (8 - (v125 & 7) - v166)) & ~(-1 << v166) | (v164 << v166);
              v125 += v166;
              *(void *)(v7 + 24) = v125;
              v165 -= v166;
            }
            while (v165);
            if (HIWORD(v164))
            {
              int v121 = 6840;
              goto LABEL_200;
            }
            BOOL v167 = v164 >= v161;
            unsigned int v168 = v164 - v161;
            if (v168 == 0 || !v167)
            {
              int v121 = 6841;
              goto LABEL_200;
            }
            *(_WORD *)(v253 + 28) = v168 + 1;
          }
          v253 += 40;
        }
      }
    }
    else
    {
      if (v242 > v122) {
        goto LABEL_297;
      }
      unsigned int v141 = 0;
      *(_WORD *)(v247 + 42) = 0;
    }
    v242 += v141;
    v247 += 48;
    v231 += 24;
    ++v227;
  }
  while (v227 != v244);
  if (v242 != v122)
  {
    int v120 = (FILE *)*MEMORY[0x1E4F143C8];
    int v121 = 6847;
    goto LABEL_201;
  }
  unint64_t v169 = v125 + 1;
  unint64_t v170 = 8 * v126;
  if (v125 + 1 > 8 * v126)
  {
    int v120 = (FILE *)*MEMORY[0x1E4F143C8];
    int v121 = 6851;
    goto LABEL_201;
  }
  int v171 = *(unsigned __int8 *)(v129 + (v125 >> 3));
  *(void *)(v7 + 24) = v169;
  int v172 = (1 << (~(_BYTE)v125 & 7)) & v171;
  uint64_t v173 = *v45;
  *(unsigned char *)(*(void *)(*v45 + 1808) + 1) = v172 != 0;
  if (!v172)
  {
LABEL_324:
    unint64_t v180 = *(void *)(v7 + 48) + (v169 >> 3);
    if ((v169 & 7) != 0) {
      ++v180;
    }
    *(void *)(v7 + 48) = v180;
    *(unsigned char *)(v7 + 32) = 0;
    uint64_t v16 = 1;
    goto LABEL_119;
  }
  unint64_t v174 = v125 + 2;
  if (v125 + 2 > v170)
  {
    int v120 = (FILE *)*MEMORY[0x1E4F143C8];
    int v121 = 6855;
    goto LABEL_201;
  }
  unsigned int v175 = *(unsigned __int8 *)(v129 + (v169 >> 3));
  *(void *)(v7 + 24) = v174;
  if (((v175 >> (~(_BYTE)v169 & 7)) & 1) == 0)
  {
    unint64_t v169 = v125 + 2;
    goto LABEL_324;
  }
  if (v125 + 7 > v170) {
    goto LABEL_320;
  }
  int v176 = 0;
  unint64_t v177 = 5;
  do
  {
    unint64_t v178 = 8 - (v174 & 7);
    if (v177 < v178) {
      unint64_t v178 = v177;
    }
    int v176 = (*(unsigned __int8 *)(v129 + (v174 >> 3)) >> (8 - (v174 & 7) - v178)) & ~(-1 << v178) | (v176 << v178);
    v174 += v178;
    *(void *)(v7 + 24) = v174;
    v177 -= v178;
  }
  while (v177);
  unint64_t v179 = (v176 + 1);
  if (v174 + v179 > v170)
  {
LABEL_320:
    int v121 = 6859;
    goto LABEL_200;
  }
  unsigned int v181 = 0;
  if (v176 != -1)
  {
    do
    {
      unint64_t v182 = 8 - (v174 & 7);
      if (v179 < v182) {
        unint64_t v182 = v179;
      }
      unsigned int v181 = (*(unsigned __int8 *)(v129 + (v174 >> 3)) >> (8 - (v174 & 7) - v182)) & ~(-1 << v182) | (v181 << v182);
      v174 += v182;
      *(void *)(v7 + 24) = v174;
      v179 -= v182;
    }
    while (v179);
  }
  *(_DWORD *)(v173 + 1848) = v181;
  {
    operator new();
  }
  uint64_t v183 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)geo::codec::Allocator::instance(void)::alloc
                                                             + 24))(geo::codec::Allocator::instance(void)::alloc, v181, 24);
  uint64_t v184 = *v45;
  *(void *)(*v45 + 1856) = v183;
  if (!v183)
  {
    int v121 = 6862;
    goto LABEL_200;
  }
  uint64_t v185 = *(void *)(v7 + 16);
  unint64_t v186 = *(void *)(v7 + 24);
  unint64_t v187 = 8 * v185;
  if (v186 + 5 > 8 * v185)
  {
    int v120 = (FILE *)*MEMORY[0x1E4F143C8];
    int v121 = 6865;
    goto LABEL_201;
  }
  int v188 = 0;
  uint64_t v189 = *v255;
  unint64_t v190 = 5;
  do
  {
    unint64_t v191 = 8 - (v186 & 7);
    if (v190 < v191) {
      unint64_t v191 = v190;
    }
    int v188 = (*(unsigned __int8 *)(v189 + (v186 >> 3)) >> (8 - (v186 & 7) - v191)) & ~(-1 << v191) | (v188 << v191);
    v186 += v191;
    *(void *)(v7 + 24) = v186;
    v190 -= v191;
  }
  while (v190);
  if (v186 + 5 > v187)
  {
    int v120 = (FILE *)*MEMORY[0x1E4F143C8];
    int v121 = 6867;
    goto LABEL_201;
  }
  int v192 = 0;
  uint64_t v251 = (v188 + 1);
  unint64_t v193 = 5;
  do
  {
    unint64_t v194 = 8 - (v186 & 7);
    if (v193 < v194) {
      unint64_t v194 = v193;
    }
    int v192 = (*(unsigned __int8 *)(v189 + (v186 >> 3)) >> (8 - (v186 & 7) - v194)) & ~(-1 << v194) | (v192 << v194);
    v186 += v194;
    *(void *)(v7 + 24) = v186;
    v193 -= v194;
  }
  while (v193);
  if (v186 + 5 > v187)
  {
    int v120 = (FILE *)*MEMORY[0x1E4F143C8];
    int v121 = 6869;
    goto LABEL_201;
  }
  int v195 = 0;
  uint64_t v248 = (v192 + 1);
  unint64_t v196 = 5;
  do
  {
    unint64_t v197 = 8 - (v186 & 7);
    if (v196 < v197) {
      unint64_t v197 = v196;
    }
    int v195 = (*(unsigned __int8 *)(v189 + (v186 >> 3)) >> (8 - (v186 & 7) - v197)) & ~(-1 << v197) | (v195 << v197);
    v186 += v197;
    *(void *)(v7 + 24) = v186;
    v196 -= v197;
  }
  while (v196);
  if (v186 + 3 > v187)
  {
    int v120 = (FILE *)*MEMORY[0x1E4F143C8];
    int v121 = 6871;
    goto LABEL_201;
  }
  int v198 = 0;
  uint64_t v236 = (v195 + 1);
  unint64_t v199 = 3;
  do
  {
    unint64_t v200 = 8 - (v186 & 7);
    if (v199 < v200) {
      unint64_t v200 = v199;
    }
    int v198 = (*(unsigned __int8 *)(v189 + (v186 >> 3)) >> (8 - (v186 & 7) - v200)) & ~(-1 << v200) | (v198 << v200);
    v186 += v200;
    *(void *)(v7 + 24) = v186;
    v199 -= v200;
  }
  while (v199);
  if (v186 + 5 > v187) {
    goto LABEL_368;
  }
  int v201 = 0;
  uint64_t v243 = (v198 + 1);
  unint64_t v202 = 5;
  do
  {
    unint64_t v203 = 8 - (v186 & 7);
    if (v202 < v203) {
      unint64_t v203 = v202;
    }
    int v201 = (*(unsigned __int8 *)(v189 + (v186 >> 3)) >> (8 - (v186 & 7) - v203)) & ~(-1 << v203) | (v201 << v203);
    v186 += v203;
    *(void *)(v7 + 24) = v186;
    v202 -= v203;
  }
  while (v202);
  unint64_t v204 = (v201 + 1);
  if (v186 + v204 > v187)
  {
LABEL_368:
    int v120 = (FILE *)*MEMORY[0x1E4F143C8];
    int v121 = 6875;
    goto LABEL_201;
  }
  unsigned int v205 = 0;
  if (v201 != -1)
  {
    do
    {
      unint64_t v206 = 8 - (v186 & 7);
      if (v204 < v206) {
        unint64_t v206 = v204;
      }
      unsigned int v205 = (*(unsigned __int8 *)(v189 + (v186 >> 3)) >> (8 - (v186 & 7) - v206)) & ~(-1 << v206) | (v205 << v206);
      v186 += v206;
      *(void *)(v7 + 24) = v186;
      v204 -= v206;
    }
    while (v204);
  }
  unint64_t v207 = v186 + v205;
  if (v207 > v187)
  {
    int v120 = (FILE *)*MEMORY[0x1E4F143C8];
    int v121 = 6876;
    goto LABEL_201;
  }
  int v230 = 0;
  int v239 = 0;
  *(void *)(v7 + 24) = v207;
  uint64_t v232 = *(void *)(v184 + 1824);
  uint64_t v234 = v30;
  while (2)
  {
    unint64_t v169 = v207 + 1;
    unint64_t v209 = 8 * v185;
    if (v207 + 1 > 8 * v185)
    {
      int v120 = (FILE *)*MEMORY[0x1E4F143C8];
      int v121 = 6884;
      goto LABEL_201;
    }
    uint64_t v210 = *(void *)(v7 + 8);
    unsigned int v211 = *(unsigned __int8 *)(v210 + (v207 >> 3));
    *(void *)(v7 + 24) = v169;
    if (((v211 >> (~(_BYTE)v207 & 7)) & 1) == 0)
    {
LABEL_379:
      v232 += 48;
      v234 += 24;
      unint64_t v207 = v169;
      if (++v230 == v244) {
        goto LABEL_324;
      }
      continue;
    }
    break;
  }
  *(_DWORD *)(v232 + 36) = v239;
  if (v169 + v251 > v209)
  {
    int v121 = 6891;
    goto LABEL_200;
  }
  if (v251)
  {
    unsigned int v212 = 0;
    unint64_t v213 = v251;
    do
    {
      unint64_t v214 = 8 - (v169 & 7);
      if (v213 < v214) {
        unint64_t v214 = v213;
      }
      unsigned int v212 = (*(unsigned __int8 *)(v210 + (v169 >> 3)) >> (8 - (v169 & 7) - v214)) & ~(-1 << v214) | (v212 << v214);
      v169 += v214;
      *(void *)(v7 + 24) = v169;
      v213 -= v214;
    }
    while (v213);
    if (HIWORD(v212))
    {
      int v121 = 6892;
      goto LABEL_200;
    }
  }
  else
  {
    unsigned int v212 = 0;
  }
  int v228 = v212 + v239;
  if (v212 + v239 > v181)
  {
    int v121 = 6893;
    goto LABEL_200;
  }
  if (v169 + v236 > v209)
  {
    int v120 = (FILE *)*MEMORY[0x1E4F143C8];
    int v121 = 6896;
    goto LABEL_201;
  }
  if (v236)
  {
    unsigned int v254 = 0;
    unint64_t v215 = v236;
    do
    {
      unint64_t v216 = 8 - (v169 & 7);
      if (v215 < v216) {
        unint64_t v216 = v215;
      }
      unsigned int v254 = (*(unsigned __int8 *)(v210 + (v169 >> 3)) >> (8 - (v169 & 7) - v216)) & ~(-1 << v216) | (v254 << v216);
      v169 += v216;
      *(void *)(v7 + 24) = v169;
      v215 -= v216;
    }
    while (v215);
  }
  else
  {
    unsigned int v254 = 0;
  }
  if (!v212)
  {
    int v208 = v239;
LABEL_377:
    *(_WORD *)(v232 + 40) = v208 - v239;
    *(void *)(v7 + 24) = v169;
    v169 += v254;
    if (v169 > 8 * v185)
    {
      int v120 = (FILE *)*MEMORY[0x1E4F143C8];
      int v121 = 6920;
      goto LABEL_201;
    }
    *(void *)(v7 + 24) = v169;
    int v239 = v208;
    goto LABEL_379;
  }
  int v217 = 0;
  unint64_t v218 = v169;
  while (1)
  {
    if (v218 + v248 > 8 * v185)
    {
      int v120 = (FILE *)*MEMORY[0x1E4F143C8];
      int v121 = 6902;
      goto LABEL_201;
    }
    if (v248)
    {
      int v220 = 0;
      uint64_t v221 = *v255;
      unint64_t v222 = v248;
      do
      {
        unint64_t v223 = 8 - (v218 & 7);
        if (v222 < v223) {
          unint64_t v223 = v222;
        }
        int v220 = (*(unsigned __int8 *)(v221 + (v218 >> 3)) >> (8 - (v218 & 7) - v223)) & ~(-1 << v223) | (v220 << v223);
        v218 += v223;
        *(void *)(v7 + 24) = v218;
        v222 -= v223;
      }
      while (v222);
      if (v220) {
        goto LABEL_420;
      }
    }
    *(unsigned char *)uint64_t v183 = 0;
    if ((geo::codec::decodeLabelLineRangeUsingTileLine(v255, (double *)(v183 + 8), (uint64_t)&v257, v234) & 1) == 0)
    {
      int v120 = (FILE *)*MEMORY[0x1E4F143C8];
      int v121 = 6908;
      goto LABEL_201;
    }
    uint64_t v185 = *(void *)(v7 + 16);
    unint64_t v218 = *(void *)(v7 + 24);
    if (v218 + v243 > 8 * v185) {
      break;
    }
    if (v243)
    {
      int v219 = 0;
      uint64_t v224 = *v255;
      unint64_t v225 = v243;
      do
      {
        unint64_t v226 = 8 - (v218 & 7);
        if (v225 < v226) {
          unint64_t v226 = v225;
        }
        int v219 = (*(unsigned __int8 *)(v224 + (v218 >> 3)) >> (8 - (v218 & 7) - v226)) & ~(-1 << v226) | (v219 << v226);
        v218 += v226;
        *(void *)(v7 + 24) = v218;
        v225 -= v226;
      }
      while (v225);
    }
    else
    {
      LOBYTE(v219) = 0;
    }
    *(unsigned char *)(v183 + 1) = v219;
    v183 += 24;
    ++v239;
    if (++v217 == v212)
    {
      int v239 = v228;
LABEL_420:
      int v208 = v239;
      int v239 = *(_DWORD *)(v232 + 36);
      goto LABEL_377;
    }
  }
  int v120 = (FILE *)*MEMORY[0x1E4F143C8];
  int v121 = 6910;
LABEL_201:
  fprintf(v120, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v121);
  uint64_t v16 = 0;
LABEL_119:
  uint64_t v9 = v256;
  {
LABEL_120:
      operator new();
  }
LABEL_28:
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)geo::codec::Allocator::instance(void)::alloc + 40))(geo::codec::Allocator::instance(void)::alloc, v30, 0);
  if (*(unsigned char *)v7)
  {
    {
      operator new();
    }
    (*(void (**)(uint64_t, void, void))(*(void *)geo::codec::Allocator::instance(void)::alloc + 40))(geo::codec::Allocator::instance(void)::alloc, *(void *)(v7 + 40), 0);
  }
  {
    operator new();
  }
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)geo::codec::Allocator::instance(void)::alloc + 40))(geo::codec::Allocator::instance(void)::alloc, v7, 0);
LABEL_33:
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = std::chrono::steady_clock::now().__d_.__rep_;
  uint64_t v258 = "ChapterLabelPlacementMetadata";
  uint64_t v259 = &v258;
  *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v9 + 1912, (uint64_t *)&v258, (uint64_t)&std::piecewise_construct, (uint64_t **)&v259)+ 4) = (double)((rep - v10.__d_.__rep_) / 1000) * 0.001;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  return v16;
}

void sub_188F47944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,geo::read_write_lock *a23,uint64_t a24,uint64_t a25)
{
  MEMORY[0x18C11F580](v27, 0x10F1C40DA10AB66);
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = std::chrono::steady_clock::now().__d_.__rep_;
  *(void *)(v28 - 128) = "ChapterLabelPlacementMetadata";
  *(void *)(v28 - 112) = v28 - 128;
  *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(a25 + 1912, (uint64_t *)(v28 - 128), (uint64_t)&std::piecewise_construct, (uint64_t **)(v28 - 112))+ 4) = (double)((rep - v26) / 1000) * 0.001;
  if (v25)
  {
    if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t geo::codec::decodeLabelLineRange(uint64_t *a1, double *a2, unsigned int *a3, uint64_t a4)
{
  unint64_t v4 = *a3;
  unint64_t v5 = a1[2];
  unint64_t v6 = 8 * a1[1];
  if (v5 + v4 > v6) {
    return 0;
  }
  if (v4)
  {
    unsigned int v8 = 0;
    uint64_t v9 = *a1;
    unint64_t v10 = *a3;
    do
    {
      unint64_t v11 = 8 - (v5 & 7);
      if (v10 < v11) {
        unint64_t v11 = v10;
      }
      unsigned int v8 = (*(unsigned __int8 *)(v9 + (v5 >> 3)) >> (8 - (v5 & 7) - v11)) & ~(-1 << v11) | (v8 << v11);
      v5 += v11;
      a1[2] = v5;
      v10 -= v11;
    }
    while (v10);
    double v12 = *(double *)(a4 + 16) * (double)v8;
    *a2 = v12;
    unint64_t v13 = a2 + 1;
    if (v5 + v4 > v6) {
      return 0;
    }
    unsigned int v16 = 0;
    do
    {
      unint64_t v17 = 8 - (v5 & 7);
      if (v4 < v17) {
        unint64_t v17 = v4;
      }
      unsigned int v16 = (*(unsigned __int8 *)(v9 + (v5 >> 3)) >> (8 - (v5 & 7) - v17)) & ~(-1 << v17) | (v16 << v17);
      v5 += v17;
      a1[2] = v5;
      v4 -= v17;
    }
    while (v4);
    double v18 = *(double *)(a4 + 16) * (double)v16;
    *unint64_t v13 = v18;
    double v15 = v12 + -1.0;
    double v14 = v18 + -1.0;
  }
  else
  {
    a2[1] = 0.0;
    unint64_t v13 = a2 + 1;
    *a2 = 0.0;
    double v14 = -1.0;
    double v15 = -1.0;
  }
  double v19 = *(double *)(a4 + 16) * 0.6;
  if (fabs(v15) < v19)
  {
    *a2 = 1.0;
    if (fabs(v14) >= v19) {
      return 1;
    }
  }
  else if (fabs(v14) >= v19)
  {
    return 1;
  }
  *unint64_t v13 = 1.0;
  return 1;
}

uint64_t geo::codec::decodeLabelLineRangeUsingTileLine(uint64_t *a1, double *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(unsigned int *)(a4 + 8);
  unint64_t v5 = a1[2];
  unint64_t v6 = 8 * a1[1];
  if (v5 + v4 > v6) {
    return 0;
  }
  if (v4)
  {
    int v8 = 0;
    uint64_t v9 = *a1;
    unint64_t v10 = *(unsigned int *)(a4 + 8);
    do
    {
      unint64_t v11 = 8 - (v5 & 7);
      if (v10 < v11) {
        unint64_t v11 = v10;
      }
      int v8 = (*(unsigned __int8 *)(v9 + (v5 >> 3)) >> (8 - (v5 & 7) - v11)) & ~(-1 << v11) | (v8 << v11);
      v5 += v11;
      a1[2] = v5;
      v10 -= v11;
    }
    while (v10);
    double v12 = *(double *)(*(void *)a4 + 8) + *(double *)(a4 + 16) * (double)(v8 << -(char)v4 >> -(char)v4);
    *a2 = v12;
    unint64_t v13 = *(unsigned int *)(a4 + 12);
    if (v5 + v13 > v6) {
      return 0;
    }
  }
  else
  {
    double v12 = *(double *)(*(void *)a4 + 8);
    *a2 = v12;
    unint64_t v13 = *(unsigned int *)(a4 + 12);
    if (v5 + v13 > v6) {
      return 0;
    }
  }
  if (v13)
  {
    unsigned int v14 = 0;
    uint64_t v15 = *a1;
    do
    {
      unint64_t v16 = 8 - (v5 & 7);
      if (v13 < v16) {
        unint64_t v16 = v13;
      }
      unsigned int v14 = (*(unsigned __int8 *)(v15 + (v5 >> 3)) >> (8 - (v5 & 7) - v16)) & ~(-1 << v16) | (v14 << v16);
      v5 += v16;
      a1[2] = v5;
      v13 -= v16;
    }
    while (v13);
    double v17 = *(double *)(a4 + 16);
    double v18 = v17 * (double)v14;
  }
  else
  {
    double v17 = *(double *)(a4 + 16);
    double v18 = 0.0;
  }
  double v19 = v18 + v12;
  a2[1] = v19;
  double v20 = v17 * 0.6;
  if (fabs(v12 + -1.0) < v20)
  {
    *a2 = 1.0;
    if (fabs(v19 + -1.0) >= v20) {
      return 1;
    }
  }
  else if (fabs(v19 + -1.0) >= v20)
  {
    return 1;
  }
  a2[1] = 1.0;
  return 1;
}

unint64_t GEOActiveTileGroupReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 612))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOActiveTileGroupReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)unint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 616));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 608) = [v8 position];
  *(_DWORD *)(a1 + 612) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOActiveTileGroupReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOActiveTileGroupReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOActiveTileGroupReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOActiveTileGroupCallReadAllRecursiveWithoutSynchronized((id *)a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 616));
  return Specified;
}

void sub_188F48550(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id GEOStringForPhoneNumber(void *String)
{
  if (String)
  {
    BOOL v2 = *MEMORY[0x1E4F1D260] == (void)String;
    String = 0;
    BOOL v2 = v2 || MEMORY[0x1E4F8A210] == 0;
    if (!v2) {
      String = (void *)CFPhoneNumberCreateString();
    }
    uint64_t v1 = vars8;
  }
  return String;
}

void sub_188F4909C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F491AC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDCollectionResultReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 44))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOPDCollectionResultReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)unint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = [v8 position];
  *(_DWORD *)(a1 + 44) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOPDCollectionResultReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOPDCollectionResultReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOPDCollectionResultReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    [*(id *)(a1 + 24) readAll:1];
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_188F49350(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDCollectionResultReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  unint64_t v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 44);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 40)];
  char v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  int v12 = ((*(unsigned __int8 *)(a1 + 56) >> 2) & 1)
      + ((*(unsigned __int8 *)(a1 + 56) >> 3) & 1)
      + ((*(unsigned __int8 *)(a1 + 56) >> 1) & 1);
  while (2)
  {
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    switch(a3[v8])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        char v7 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v16 = v12 != 0;
        char v17 = v16 & ~(_BYTE)v11 | v9;
        unsigned __int8 v18 = v16 | v11;
        char v61 = v17;
        char v62 = v18 | v17;
        if ((v18 | v7)) {
          double v19 = 0;
        }
        else {
          double v19 = a3;
        }
        double v20 = (int *)MEMORY[0x1E4F940E8];
        char v63 = (v19 == 0) | v18;
        BOOL v64 = v18;
        unint64_t v21 = (int *)MEMORY[0x1E4F940C8];
        int v22 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v12;
LABEL_7:
        uint64_t v13 = v9;
LABEL_8:
        uint64_t v14 = v10;
        uint64_t v15 = v11;
LABEL_10:
        ++v8;
        uint64_t v9 = v13;
        uint64_t v10 = v14;
        uint64_t v11 = v15;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(void *)(v3 + *v20) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v21)) {
      goto LABEL_75;
    }
    char v23 = 0;
    unsigned int v24 = 0;
    unint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = *v20;
      uint64_t v27 = *(void *)(v3 + v26);
      unint64_t v28 = v27 + 1;
      if (v27 == -1 || v28 > *(void *)(v3 + *v6)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(v3 + *v22) + v27);
      *(void *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0) {
        goto LABEL_25;
      }
      v23 += 7;
      BOOL v30 = v24++ >= 9;
      if (v30)
      {
        unint64_t v25 = 0;
        int v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v21) = 1;
LABEL_25:
    int v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(unsigned char *)(v3 + *v21)) {
      unint64_t v25 = 0;
    }
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_75:
      int v59 = 1;
      goto LABEL_76;
    }
    unint64_t v33 = v25 >> 3;
    BOOL v34 = v64;
    if ((v63 & 1) == 0)
    {
      unint64_t v35 = v19;
      do
      {
        int v37 = *v35++;
        int v36 = v37;
        BOOL v34 = v37 != 0;
        if (v37) {
          BOOL v38 = v36 == v33;
        }
        else {
          BOOL v38 = 1;
        }
      }
      while (!v38);
    }
    if (v33 == 3) {
      break;
    }
    if (v33 == 2)
    {
      if (v7)
      {
        char v42 = 0;
        unsigned int v43 = 0;
        uint64_t v44 = 0;
        *(unsigned char *)(a1 + 56) |= 1u;
        unint64_t v6 = (int *)MEMORY[0x1E4F940E0];
        while (1)
        {
          uint64_t v45 = *v20;
          uint64_t v46 = *(void *)(v3 + v45);
          unint64_t v47 = v46 + 1;
          if (v46 == -1 || v47 > *(void *)(v3 + *v6)) {
            break;
          }
          char v48 = *(unsigned char *)(*(void *)(v3 + *v22) + v46);
          *(void *)(v3 + v45) = v47;
          v44 |= (unint64_t)(v48 & 0x7F) << v42;
          if ((v48 & 0x80) == 0) {
            goto LABEL_69;
          }
          v42 += 7;
          BOOL v30 = v43++ >= 9;
          if (v30)
          {
            LODWORD(v44) = 0;
            goto LABEL_71;
          }
        }
        *(unsigned char *)(v3 + *v21) = 1;
LABEL_69:
        if (*(unsigned char *)(v3 + *v21)) {
          LODWORD(v44) = 0;
        }
LABEL_71:
        *(_DWORD *)(a1 + 52) = v44;
        goto LABEL_66;
      }
      goto LABEL_65;
    }
    if (v33 != 1)
    {
      if ((v61 & 1) != 0 && (*(unsigned char *)(a1 + 56) & 2) == 0)
      {
        if (!*(void *)(a1 + 16))
        {
          id v49 = objc_alloc_init(MEMORY[0x1E4F940B0]);
          unint64_t v50 = *(void **)(a1 + 16);
          *(void *)(a1 + 16) = v49;
        }
        int v51 = PBUnknownFieldAdd();
        unint64_t v21 = (int *)MEMORY[0x1E4F940C8];
        unint64_t v6 = (int *)MEMORY[0x1E4F940E0];
        if (!v51)
        {
          int v59 = 0;
          unint64_t v60 = &OBJC_IVAR___GEOXPCReply__error;
          goto LABEL_78;
        }
        goto LABEL_66;
      }
LABEL_65:
      char v52 = PBReaderSkipValueWithTag();
      unint64_t v21 = (int *)MEMORY[0x1E4F940C8];
      unint64_t v6 = (int *)MEMORY[0x1E4F940E0];
      if (v52) {
        goto LABEL_66;
      }
      int v59 = 0;
LABEL_76:
      unint64_t v60 = &OBJC_IVAR___GEOXPCReply__error;
      goto LABEL_77;
    }
    if (!v34) {
      goto LABEL_65;
    }
    if ((*(unsigned char *)(a1 + 56) & 4) != 0)
    {
      char v53 = PBReaderSkipValueWithTag();
      unint64_t v6 = (int *)MEMORY[0x1E4F940E0];
      if ((v53 & 1) == 0) {
        goto LABEL_97;
      }
      v8 += *(unsigned __int8 *)(a1 + 56) << 29 >> 31;
    }
    else
    {
      char v39 = PBReaderPlaceMark();
      unint64_t v6 = (int *)MEMORY[0x1E4F940E0];
      if ((v39 & 1) == 0) {
        goto LABEL_97;
      }
      unint64_t v40 = objc_alloc_init(GEOPDMapsIdentifier);
      if (!GEOPDMapsIdentifierReadAllFrom((uint64_t)v40, (void *)v3)) {
        goto LABEL_96;
      }
      PBReaderRecallMark();
      unint64_t v41 = *(void **)(a1 + 24);
      *(void *)(a1 + 24) = v40;

      --v8;
    }
    unint64_t v21 = (int *)MEMORY[0x1E4F940C8];
LABEL_66:
    if (!(v62 & 1 | (v8 != 0))) {
      goto LABEL_75;
    }
  }
  if (!v34 || (*(unsigned char *)(a1 + 56) & 8) != 0) {
    goto LABEL_65;
  }
  if ((PBReaderPlaceMark() & 1) == 0) {
    goto LABEL_97;
  }
  unint64_t v40 = objc_alloc_init(GEOPDComponent);
  if (GEOPDComponentReadAllFrom((uint64_t)v40, (void *)v3, v10 & 1))
  {
    PBReaderRecallMark();
    -[GEOPDCollectionResult _addNoFlagsComponent:](a1, v40);

    unint64_t v21 = (int *)MEMORY[0x1E4F940C8];
    unint64_t v6 = (int *)MEMORY[0x1E4F940E0];
    goto LABEL_66;
  }
LABEL_96:

LABEL_97:
  int v59 = 0;
  unint64_t v60 = &OBJC_IVAR___GEOXPCReply__error;
  unint64_t v21 = (int *)MEMORY[0x1E4F940C8];
LABEL_77:
  if ((v61 & 1) == 0) {
    goto LABEL_79;
  }
LABEL_78:
  *(unsigned char *)(a1 + v60[729]) |= 2u;
LABEL_79:
  if (v64 || (v59 & 1) == 0)
  {
    *(unsigned char *)(a1 + v60[729]) |= 4u;
    *(unsigned char *)(a1 + v60[729]) |= 8u;
    goto LABEL_89;
  }
  if (v19)
  {
    while (2)
    {
      while (1)
      {
        int v55 = *v19++;
        int v54 = v55;
        if (v55 == 1) {
          break;
        }
        if (v54 == 3)
        {
          char v56 = 8;
          goto LABEL_88;
        }
        if (!v54) {
          goto LABEL_89;
        }
      }
      char v56 = 4;
LABEL_88:
      *(unsigned char *)(a1 + v60[729]) |= v56;
      continue;
    }
  }
LABEL_89:
  if (v59) {
    unint64_t v3 = *(unsigned char *)(v3 + *v21) == 0;
  }
  else {
    unint64_t v3 = 0;
  }
  if (v64)
  {
    unint64_t v57 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  return v3;
}

void sub_188F49AE4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F49C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188F49DA4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F49F04(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F4A014(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPPoiImageFeedbackIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  BOOL v2 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    unint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (a1[*v4]) {
        goto LABEL_30;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        goto LABEL_30;
      }
      if ((v8 >> 3) == 2) {
        break;
      }
      if ((v8 >> 3) == 1)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEORPPoiImageFeedbackContextIsValid(a1)) {
          goto LABEL_31;
        }
LABEL_27:
        PBReaderRecallMark();
        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        goto LABEL_31;
      }
LABEL_29:
      if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
        goto LABEL_30;
      }
    }
    if (v15 != 2 || !PBReaderPlaceMark() || !GEORPPoiImageFeedbackCorrectionsIsValid(a1))
    {
LABEL_31:
      PBReaderRecallMark();
      return 0;
    }
    goto LABEL_27;
  }
LABEL_30:
  BOOL v17 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v17;
}

void sub_188F4A964(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F4AB14(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDSearchKey64ValueDoublePairReadAllFrom(uint64_t a1, void *a2)
{
  unint64_t v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    uint64_t v4 = (int *)MEMORY[0x1E4F940E8];
    unint64_t v5 = (int *)MEMORY[0x1E4F940E0];
    char v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      unsigned int v7 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v3[*v6]) {
          break;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          BOOL v15 = v9++ >= 9;
          if (v15)
          {
            unint64_t v10 = 0;
            int v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v16 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v16 || (v10 & 7) == 4) {
          break;
        }
        if ((v10 >> 3) == 2)
        {
          *(unsigned char *)(a1 + 24) |= 2u;
          uint64_t v25 = *v4;
          unint64_t v26 = *(void *)&v3[v25];
          if (v26 <= 0xFFFFFFFFFFFFFFF7 && v26 + 8 <= *(void *)&v3[*v5])
          {
            uint64_t v27 = *(void *)(*(void *)&v3[*v7] + v26);
            *(void *)&v3[v25] = v26 + 8;
          }
          else
          {
            v3[*v6] = 1;
            uint64_t v27 = 0;
          }
          *(void *)(a1 + 16) = v27;
        }
        else if ((v10 >> 3) == 1)
        {
          char v18 = 0;
          unsigned int v19 = 0;
          uint64_t v20 = 0;
          *(unsigned char *)(a1 + 24) |= 1u;
          while (1)
          {
            uint64_t v21 = *v4;
            uint64_t v22 = *(void *)&v3[v21];
            unint64_t v23 = v22 + 1;
            if (v22 == -1 || v23 > *(void *)&v3[*v5]) {
              break;
            }
            char v24 = *(unsigned char *)(*(void *)&v3[*v7] + v22);
            *(void *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0) {
              goto LABEL_34;
            }
            v18 += 7;
            BOOL v15 = v19++ >= 9;
            if (v15)
            {
              uint64_t v20 = 0;
              goto LABEL_36;
            }
          }
          v3[*v6] = 1;
LABEL_34:
          if (v3[*v6]) {
            uint64_t v20 = 0;
          }
LABEL_36:
          *(void *)(a1 + 8) = v20;
        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_41;
        }
      }
      while (*(void *)&v3[*v4] < *(void *)&v3[*v5]);
    }
    BOOL v28 = v3[*v6] == 0;
  }
  else
  {
LABEL_41:
    BOOL v28 = 0;
  }
  objc_sync_exit(v3);

  return v28;
}

void sub_188F4ADC0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDPopularNearbySearchResultReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 44))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOPDPopularNearbySearchResultReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)unint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = [v8 position];
  *(_DWORD *)(a1 + 44) = [v8 length];
  if (a3) {
    unsigned int v9 = (int *)&GEOPDPopularNearbySearchResultReadAllFrom_recursiveTag;
  }
  else {
    unsigned int v9 = (int *)&GEOPDPopularNearbySearchResultReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOPDPopularNearbySearchResultReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    [*(id *)(a1 + 24) readAll:1];
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_188F4AF64(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F4B134(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F4B390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t _GEOPDBatchSpatialLookupResultIsDirty(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  if ((*(unsigned char *)(a1 + 56) & 0x1C) != 0) {
    return 1;
  }
  if ((*(unsigned char *)(a1 + 56) & 4) == 0) {
    return 0;
  }
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v3 = *(id *)(a1 + 24);
  uint64_t v2 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v2)
  {
    uint64_t v4 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v3);
        }
        uint64_t v6 = *(void *)(*((void *)&v9 + 1) + 8 * i);
        if (v6)
        {
          os_unfair_lock_lock_with_options();
          os_unfair_lock_assert_owner((const os_unfair_lock *)(v6 + 48));
          int v7 = *(unsigned char *)(v6 + 56) & 0x1C;
          os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 48));
          if (v7)
          {
            uint64_t v2 = 1;
            goto LABEL_16;
          }
        }
      }
      uint64_t v2 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
LABEL_16:

  return v2;
}

unint64_t GEORPRapProfileInfoReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 44);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 40)];
  char v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  int v12 = ((*(unsigned __int8 *)(a1 + 52) >> 1) & 1)
      + (*(unsigned char *)(a1 + 52) & 1)
      + ((*(unsigned __int8 *)(a1 + 52) >> 2) & 1);
  while (2)
  {
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    switch(a3[v8])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        char v7 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v16 = v12 != 0;
        char v17 = v16 & ~(_BYTE)v11 | v9;
        unsigned __int8 v18 = v16 | v11;
        char v53 = v17;
        char v54 = v18 | v17;
        if ((v18 | v7)) {
          unsigned int v19 = 0;
        }
        else {
          unsigned int v19 = a3;
        }
        uint64_t v20 = (int *)MEMORY[0x1E4F940E8];
        char v55 = (v19 == 0) | v18;
        BOOL v56 = v18;
        uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
        uint64_t v22 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v12;
LABEL_7:
        uint64_t v13 = v9;
LABEL_8:
        uint64_t v14 = v10;
        uint64_t v15 = v11;
LABEL_10:
        ++v8;
        uint64_t v9 = v13;
        uint64_t v10 = v14;
        uint64_t v11 = v15;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(void *)(v3 + *v20) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v21)) {
      goto LABEL_66;
    }
    char v23 = 0;
    unsigned int v24 = 0;
    unint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = *v20;
      uint64_t v27 = *(void *)(v3 + v26);
      unint64_t v28 = v27 + 1;
      if (v27 == -1 || v28 > *(void *)(v3 + *v6)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(v3 + *v22) + v27);
      *(void *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0) {
        goto LABEL_25;
      }
      v23 += 7;
      if (v24++ >= 9)
      {
        unint64_t v25 = 0;
        int v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v21) = 1;
LABEL_25:
    int v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(unsigned char *)(v3 + *v21)) {
      unint64_t v25 = 0;
    }
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_66:
      int v51 = 1;
      goto LABEL_67;
    }
    unint64_t v33 = v25 >> 3;
    BOOL v34 = v56;
    if ((v55 & 1) == 0)
    {
      unint64_t v35 = v19;
      do
      {
        int v37 = *v35++;
        int v36 = v37;
        BOOL v34 = v37 != 0;
        if (v37) {
          BOOL v38 = v36 == v33;
        }
        else {
          BOOL v38 = 1;
        }
      }
      while (!v38);
    }
    if (v33 == 2) {
      break;
    }
    if (v33 == 1)
    {
      if (!v34) {
        goto LABEL_57;
      }
      if ((*(unsigned char *)(a1 + 52) & 4) == 0)
      {
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_85;
        }
        char v39 = objc_alloc_init(GEOLocalizedString);
        if (!GEOLocalizedStringReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1)) {
          goto LABEL_84;
        }
        PBReaderRecallMark();
        uint64_t v40 = 32;
LABEL_50:
        unint64_t v41 = *(void **)(a1 + v40);
        *(void *)(a1 + v40) = v39;

        --v8;
LABEL_64:
        uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
        goto LABEL_65;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        goto LABEL_85;
      }
      char v46 = 32 * *(unsigned char *)(a1 + 52);
LABEL_63:
      v8 += v46 >> 7;
      goto LABEL_64;
    }
    if (v53 & 1) == 0 || (*(unsigned char *)(a1 + 52))
    {
LABEL_57:
      char v45 = PBReaderSkipValueWithTag();
      uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
      if ((v45 & 1) == 0)
      {
        int v51 = 0;
        goto LABEL_67;
      }
      goto LABEL_65;
    }
    if (!*(void *)(a1 + 16))
    {
      id v42 = objc_alloc_init(MEMORY[0x1E4F940B0]);
      unsigned int v43 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v42;
    }
    int v44 = PBUnknownFieldAdd();
    uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
    if (!v44)
    {
      int v51 = 0;
      char v52 = &OBJC_IVAR___GEOTransitSectionOption__defaultSectionIndex;
      goto LABEL_68;
    }
LABEL_65:
    if (!(v54 & 1 | (v8 != 0))) {
      goto LABEL_66;
    }
  }
  if (!v34) {
    goto LABEL_57;
  }
  if ((*(unsigned char *)(a1 + 52) & 2) != 0)
  {
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      goto LABEL_85;
    }
    char v46 = *(unsigned char *)(a1 + 52) << 6;
    goto LABEL_63;
  }
  if ((PBReaderPlaceMark() & 1) == 0) {
    goto LABEL_85;
  }
  char v39 = objc_alloc_init(GEOLocalizedString);
  if (GEOLocalizedStringReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1))
  {
    PBReaderRecallMark();
    uint64_t v40 = 24;
    goto LABEL_50;
  }
LABEL_84:

LABEL_85:
  int v51 = 0;
  uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
LABEL_67:
  char v52 = &OBJC_IVAR___GEOTransitSectionOption__defaultSectionIndex;
  if ((v53 & 1) == 0) {
    goto LABEL_69;
  }
LABEL_68:
  *(unsigned char *)(a1 + v52[757]) |= 1u;
LABEL_69:
  if (v56 || (v51 & 1) == 0)
  {
    *(unsigned char *)(a1 + v52[757]) |= 4u;
    *(unsigned char *)(a1 + v52[757]) |= 2u;
    goto LABEL_78;
  }
  if (v19)
  {
    while (1)
    {
      int v48 = *v19++;
      int v47 = v48;
      if (v48 == 1) {
        break;
      }
      if (v47 == 2)
      {
LABEL_74:
        *(unsigned char *)(a1 + v52[757]) |= v47;
      }
      else if (!v47)
      {
        goto LABEL_78;
      }
    }
    LOBYTE(v47) = 4;
    goto LABEL_74;
  }
LABEL_78:
  if (v51) {
    unint64_t v3 = *(unsigned char *)(v3 + *v21) == 0;
  }
  else {
    unint64_t v3 = 0;
  }
  if (v56)
  {
    id v49 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  return v3;
}

unint64_t GEOGuidanceEventFeedbackReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 60))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOGuidanceEventFeedbackReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 56) = [v8 position];
  *(_DWORD *)(a1 + 60) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOGuidanceEventFeedbackReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOGuidanceEventFeedbackReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOGuidanceEventFeedbackReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOGuidanceEventFeedbackCallReadAllRecursiveWithoutSynchronized(a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return Specified;
}

void sub_188F4BCCC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDResultRefinementOpenOptionsReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 52);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 48)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unsigned int v12 = ((*(unsigned __int8 *)(a1 + 60) >> 3) & 1)
      + (*(unsigned char *)(a1 + 60) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 1) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 2) & 1);
  while (2)
  {
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v16 = v12 > 1;
        char v17 = v16 & ~(_BYTE)v11 | v9;
        unsigned __int8 v18 = v16 | v11;
        char v54 = v17;
        char v55 = v18 | v17;
        if ((v18 | v8)) {
          unsigned int v19 = 0;
        }
        else {
          unsigned int v19 = a3;
        }
        char v56 = (v19 == 0) | v18;
        BOOL v57 = v18;
        uint64_t v20 = (int *)MEMORY[0x1E4F940E8];
        uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
        uint64_t v22 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v12;
LABEL_7:
        uint64_t v13 = v9;
LABEL_8:
        uint64_t v14 = v10;
        uint64_t v15 = v11;
LABEL_10:
        ++v7;
        uint64_t v9 = v13;
        uint64_t v10 = v14;
        uint64_t v11 = v15;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(void *)(v3 + *v20) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v21)) {
      goto LABEL_73;
    }
    char v23 = 0;
    unsigned int v24 = 0;
    unint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = *v20;
      uint64_t v27 = *(void *)(v3 + v26);
      unint64_t v28 = v27 + 1;
      if (v27 == -1 || v28 > *(void *)(v3 + *v6)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(v3 + *v22) + v27);
      *(void *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0) {
        goto LABEL_25;
      }
      v23 += 7;
      if (v24++ >= 9)
      {
        unint64_t v25 = 0;
        int v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v21) = 1;
LABEL_25:
    int v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(unsigned char *)(v3 + *v21)) {
      unint64_t v25 = 0;
    }
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_73:
      int v52 = 1;
      goto LABEL_74;
    }
    unint64_t v33 = v25 >> 3;
    BOOL v34 = v57;
    if ((v56 & 1) == 0)
    {
      unint64_t v35 = v19;
      do
      {
        int v37 = *v35++;
        int v36 = v37;
        BOOL v34 = v37 != 0;
        if (v37) {
          BOOL v38 = v36 == v33;
        }
        else {
          BOOL v38 = 1;
        }
      }
      while (!v38);
    }
    if (v33 != 3) {
      break;
    }
    if (v34)
    {
      if ((*(unsigned char *)(a1 + 60) & 4) == 0)
      {
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_91;
        }
        unint64_t v41 = objc_alloc_init(GEOPDResultRefinementTime);
        if (!GEOPDResultRefinementTimeReadAllFrom((uint64_t)v41, (void *)v3, v10 & 1)) {
          goto LABEL_90;
        }
        PBReaderRecallMark();
        uint64_t v42 = 32;
LABEL_54:
        uint64_t v40 = *(void **)(a1 + v42);
        *(void *)(a1 + v42) = v41;
        goto LABEL_55;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        goto LABEL_91;
      }
      char v47 = 32 * *(unsigned char *)(a1 + 60);
LABEL_70:
      v7 += v47 >> 7;
      goto LABEL_71;
    }
LABEL_62:
    char v46 = PBReaderSkipValueWithTag();
    uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
    if ((v46 & 1) == 0)
    {
      int v52 = 0;
LABEL_74:
      char v53 = &OBJC_IVAR___GEOPDRelatedCollectionSection__collectionIds;
      goto LABEL_75;
    }
LABEL_72:
    if (!(v55 & 1 | (v7 != 0))) {
      goto LABEL_73;
    }
  }
  if (v33 != 2)
  {
    if (v33 == 1)
    {
      if (v34)
      {
        if ((*(unsigned char *)(a1 + 60) & 2) == 0)
        {
          uint64_t v39 = PBReaderReadString();
          uint64_t v40 = *(void **)(a1 + 24);
          *(void *)(a1 + 24) = v39;
LABEL_55:

          --v7;
LABEL_71:
          uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
          goto LABEL_72;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_91;
        }
        char v47 = *(unsigned char *)(a1 + 60) << 6;
        goto LABEL_70;
      }
    }
    else if ((v54 & 1) != 0 && (*(unsigned char *)(a1 + 60) & 1) == 0)
    {
      if (!*(void *)(a1 + 16))
      {
        id v43 = objc_alloc_init(MEMORY[0x1E4F940B0]);
        int v44 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v43;
      }
      int v45 = PBUnknownFieldAdd();
      uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
      if (!v45)
      {
        int v52 = 0;
        char v53 = &OBJC_IVAR___GEOPDRelatedCollectionSection__collectionIds;
        goto LABEL_76;
      }
      goto LABEL_72;
    }
    goto LABEL_62;
  }
  if (!v34) {
    goto LABEL_62;
  }
  if ((*(unsigned char *)(a1 + 60) & 8) != 0)
  {
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      goto LABEL_91;
    }
    char v47 = 16 * *(unsigned char *)(a1 + 60);
    goto LABEL_70;
  }
  if ((PBReaderPlaceMark() & 1) == 0) {
    goto LABEL_91;
  }
  unint64_t v41 = objc_alloc_init(GEOPDResultRefinementToggle);
  if (GEOPDResultRefinementToggleReadAllFrom((uint64_t)v41, (void *)v3, v10 & 1))
  {
    PBReaderRecallMark();
    uint64_t v42 = 40;
    goto LABEL_54;
  }
LABEL_90:

LABEL_91:
  int v52 = 0;
  char v53 = &OBJC_IVAR___GEOPDRelatedCollectionSection__collectionIds;
  uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
LABEL_75:
  if ((v54 & 1) == 0) {
    goto LABEL_77;
  }
LABEL_76:
  *(unsigned char *)(a1 + v53[74]) |= 1u;
LABEL_77:
  if (v57 || (v52 & 1) == 0)
  {
    *(unsigned char *)(a1 + v53[74]) |= 2u;
    *(unsigned char *)(a1 + v53[74]) |= 8u;
    *(unsigned char *)(a1 + v53[74]) |= 4u;
  }
  else if (v19)
  {
    while (1)
    {
      int v48 = *v19++;
      char v49 = 2;
      switch(v48)
      {
        case 0:
          goto LABEL_84;
        case 1:
          goto LABEL_83;
        case 2:
          char v49 = 8;
          goto LABEL_83;
        case 3:
          char v49 = 4;
LABEL_83:
          *(unsigned char *)(a1 + v53[74]) |= v49;
          break;
        default:
          continue;
      }
    }
  }
LABEL_84:
  if (v52) {
    unint64_t v3 = *(unsigned char *)(v3 + *v21) == 0;
  }
  else {
    unint64_t v3 = 0;
  }
  if (v57)
  {
    unint64_t v50 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  return v3;
}

unint64_t GEODirectionsFeedbackReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 72));
  uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 68);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 64)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  unsigned int v11 = (vaddv_s16((int16x4_t)(*(void *)&vshl_u16((uint16x4_t)(*(void *)&vdup_n_s16(*(unsigned __int8 *)(a1 + 80)) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFFFFFAFFFEFFFBLL) & 0xFF01FF01FF01FF01))+ ((*(unsigned char *)(a1 + 80) & 8) != 0)+ ((*(unsigned char *)(a1 + 80) & 0x10) != 0));
  while (2)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    switch(a3[v7])
    {
      case -3:
        char v8 = 1;
        goto LABEL_6;
      case -2:
        uint64_t v12 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        BOOL v14 = v11 > 3;
        char v15 = v10 | v14;
        if (((v10 | v14) | v8)) {
          BOOL v16 = 0;
        }
        else {
          BOOL v16 = a3;
        }
        char v54 = (v16 == 0) | v15;
        char v17 = (int *)MEMORY[0x1E4F940E8];
        unsigned __int8 v18 = (int *)MEMORY[0x1E4F940C8];
        unsigned int v19 = (int *)MEMORY[0x1E4F940B8];
        char v53 = v10 | v14;
        break;
      default:
        ++v11;
LABEL_6:
        uint64_t v12 = v9;
        uint64_t v13 = v10;
LABEL_8:
        ++v7;
        uint64_t v9 = v12;
        uint64_t v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v17) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v18)) {
      goto LABEL_86;
    }
    char v20 = 0;
    unsigned int v21 = 0;
    unint64_t v22 = 0;
    while (1)
    {
      uint64_t v23 = *v17;
      uint64_t v24 = *(void *)(v3 + v23);
      unint64_t v25 = v24 + 1;
      if (v24 == -1 || v25 > *(void *)(v3 + *v6)) {
        break;
      }
      char v26 = *(unsigned char *)(*(void *)(v3 + *v19) + v24);
      *(void *)(v3 + v23) = v25;
      v22 |= (unint64_t)(v26 & 0x7F) << v20;
      if ((v26 & 0x80) == 0) {
        goto LABEL_23;
      }
      v20 += 7;
      BOOL v27 = v21++ >= 9;
      if (v27)
      {
        unint64_t v22 = 0;
        int v28 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_25;
      }
    }
    *(unsigned char *)(v3 + *v18) = 1;
LABEL_23:
    int v28 = *(unsigned __int8 *)(v3 + *v18);
    if (*(unsigned char *)(v3 + *v18)) {
      unint64_t v22 = 0;
    }
LABEL_25:
    if (v28 || (v22 & 7) == 4)
    {
LABEL_86:
      if (v15)
      {
        char v47 = 1;
        goto LABEL_99;
      }
      if (v16)
      {
        while (1)
        {
          int v48 = *v16++;
          char v49 = 4;
          switch(v48)
          {
            case 0:
              goto LABEL_100;
            case 1:
              goto LABEL_95;
            case 3:
              char v49 = 32;
              goto LABEL_95;
            case 4:
              char v49 = 64;
              goto LABEL_95;
            case 5:
              char v49 = 2;
              goto LABEL_95;
            case 6:
              char v49 = 8;
              goto LABEL_95;
            case 7:
              char v49 = 16;
LABEL_95:
              *(unsigned char *)(a1 + 80) |= v49;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_100;
    }
    unint64_t v30 = v22 >> 3;
    BOOL v31 = v15;
    if ((v54 & 1) == 0)
    {
      unint64_t v32 = v16;
      do
      {
        int v34 = *v32++;
        int v33 = v34;
        BOOL v31 = v34 != 0;
        if (v34) {
          BOOL v35 = v33 == v30;
        }
        else {
          BOOL v35 = 1;
        }
      }
      while (!v35);
    }
    switch((int)v30)
    {
      case 1:
        if (!v31) {
          goto LABEL_77;
        }
        if ((*(unsigned char *)(a1 + 80) & 4) == 0)
        {
          uint64_t v36 = PBReaderReadData();
          int v37 = *(void **)(a1 + 24);
          *(void *)(a1 + 24) = v36;

          --v7;
          goto LABEL_68;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_98;
        }
        v7 += *(unsigned __int8 *)(a1 + 80) << 29 >> 31;
        goto LABEL_68;
      case 3:
        if (!v31 || (*(unsigned char *)(a1 + 80) & 0x20) != 0) {
          goto LABEL_77;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_98;
        }
        int v52 = objc_alloc_init(GEOStepFeedback);
        if (!GEOStepFeedbackReadAllFrom((uint64_t)v52, (void *)v3, v9 & 1)) {
          goto LABEL_97;
        }
        PBReaderRecallMark();
        -[GEODirectionsFeedback _addNoFlagsStepFeedback:](a1, v52);
        goto LABEL_67;
      case 4:
        if (!v31 || (*(unsigned char *)(a1 + 80) & 0x40) != 0) {
          goto LABEL_77;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_98;
        }
        int v52 = objc_alloc_init(GEOTrafficRerouteFeedback);
        if (!GEOTrafficRerouteFeedbackReadAllFrom((uint64_t)v52, (void *)v3, v9 & 1)) {
          goto LABEL_97;
        }
        PBReaderRecallMark();
        -[GEODirectionsFeedback _addNoFlagsTrafficRerouteFeedback:](a1, v52);
        goto LABEL_67;
      case 5:
        if (!v31 || (*(unsigned char *)(a1 + 80) & 2) != 0) {
          goto LABEL_77;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_98;
        }
        int v52 = objc_alloc_init(GEOAlightNotificationFeedback);
        if (!GEOAlightNotificationFeedbackReadAllFrom((uint64_t)v52, (void *)v3)) {
          goto LABEL_97;
        }
        PBReaderRecallMark();
        -[GEODirectionsFeedback _addNoFlagsAlightNotificationFeedback:](a1, v52);
        goto LABEL_67;
      case 6:
        if (!v31 || (*(unsigned char *)(a1 + 80) & 8) != 0) {
          goto LABEL_77;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_98;
        }
        int v52 = objc_alloc_init(GEOGuidanceEventFeedback);
        if (!GEOGuidanceEventFeedbackReadAllFrom((uint64_t)v52, (void *)v3, v9 & 1)) {
          goto LABEL_97;
        }
        PBReaderRecallMark();
        -[GEODirectionsFeedback _addNoFlagsGuidanceFeedback:](a1, v52);
        goto LABEL_67;
      case 7:
        if (!v31 || (*(unsigned char *)(a1 + 80) & 0x10) != 0) {
          goto LABEL_77;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_98;
        }
        int v52 = objc_alloc_init(GEOModality);
        if (GEOModalityReadAllFrom((uint64_t)v52, (void *)v3))
        {
          PBReaderRecallMark();
          -[GEODirectionsFeedback _addNoFlagsModality:](a1, v52);
LABEL_67:

LABEL_68:
          char v15 = v53;
          unsigned __int8 v18 = (int *)MEMORY[0x1E4F940C8];
LABEL_78:
          if (!(v15 & 1 | (v7 != 0))) {
            goto LABEL_86;
          }
          continue;
        }
LABEL_97:

LABEL_98:
        char v47 = 0;
        char v15 = v53;
        unsigned __int8 v18 = (int *)MEMORY[0x1E4F940C8];
LABEL_99:
        *(unsigned char *)(a1 + 80) |= 4u;
        *(unsigned char *)(a1 + 80) |= 0x20u;
        *(unsigned char *)(a1 + 80) |= 0x40u;
        *(unsigned char *)(a1 + 80) |= 2u;
        *(unsigned char *)(a1 + 80) |= 8u;
        *(unsigned char *)(a1 + 80) |= 0x10u;
        if (v47)
        {
LABEL_100:
          unint64_t v3 = *(unsigned char *)(v3 + *v18) == 0;
          if (v15) {
            goto LABEL_101;
          }
        }
        else
        {
          unint64_t v3 = 0;
          if (v15)
          {
LABEL_101:
            unint64_t v50 = *(void **)(a1 + 8);
            *(void *)(a1 + 8) = 0;
          }
        }
        return v3;
      case 8:
        if (v8)
        {
          char v39 = 0;
          unsigned int v40 = 0;
          uint64_t v41 = 0;
          *(unsigned char *)(a1 + 80) |= 1u;
          while (1)
          {
            uint64_t v42 = *v17;
            uint64_t v43 = *(void *)(v3 + v42);
            unint64_t v44 = v43 + 1;
            if (v43 == -1 || v44 > *(void *)(v3 + *v6)) {
              break;
            }
            char v45 = *(unsigned char *)(*(void *)(v3 + *v19) + v43);
            *(void *)(v3 + v42) = v44;
            v41 |= (unint64_t)(v45 & 0x7F) << v39;
            if ((v45 & 0x80) == 0) {
              goto LABEL_81;
            }
            v39 += 7;
            BOOL v27 = v40++ >= 9;
            if (v27)
            {
              uint64_t v41 = 0;
              goto LABEL_83;
            }
          }
          *(unsigned char *)(v3 + *v18) = 1;
LABEL_81:
          if (*(unsigned char *)(v3 + *v18)) {
            uint64_t v41 = 0;
          }
LABEL_83:
          *(unsigned char *)(a1 + 76) = v41 != 0;
        }
        else
        {
LABEL_77:
          char v46 = PBReaderSkipValueWithTag();
          unsigned __int8 v18 = (int *)MEMORY[0x1E4F940C8];
          char v15 = v53;
          if ((v46 & 1) == 0)
          {
LABEL_96:
            char v47 = 0;
            goto LABEL_99;
          }
        }
        goto LABEL_78;
      default:
        int v38 = PBReaderSkipValueWithTag();
        unsigned __int8 v18 = (int *)MEMORY[0x1E4F940C8];
        char v15 = v53;
        if (!v38) {
          goto LABEL_96;
        }
        goto LABEL_78;
    }
  }
}

long double GEOCoordinateRegionForMapRect(double a1, double a2, double a3, double a4)
{
  double v10 = a2 + a4;
  long double v5 = exp(((a2 + a4 * 0.5) * 0.0078125 + -1048576.0) / 333772.107);
  long double v9 = (atan(v5) * -2.0 + 1.57079633) * 57.2957795;
  long double v6 = exp((a2 * 0.0078125 + -1048576.0) / 333772.107);
  atan(v6);
  long double v7 = exp((v10 * 0.0078125 + -1048576.0) / 333772.107);
  atan(v7);
  return v9;
}

void sub_188F4D084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_188F4D268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_188F4D428(_Unwind_Exception *a1)
{
}

uint64_t AddrObjGoogle::protobuf::internal::WireFormatLite::MessageSize(uint64_t a1)
{
  uint64_t v1 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  int v2 = (int)v1;
  if (v1 >= 0x80) {
    int v3 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v1);
  }
  else {
    int v3 = 1;
  }
  return (v3 + v2);
}

uint64_t addr_obj::V2AddressObjectProto::ByteSize(addr_obj::V2AddressObjectProto *this)
{
  int v2 = *((_DWORD *)this + 35);
  if (!(_BYTE)v2)
  {
    int v3 = 0;
    goto LABEL_85;
  }
  if ((v2 & 1) == 0)
  {
    int v3 = 0;
    if ((v2 & 2) == 0) {
      goto LABEL_24;
    }
    goto LABEL_15;
  }
  uint64_t v4 = *((void *)this + 5);
  int v5 = *(unsigned __int8 *)(v4 + 23);
  char v6 = v5;
  uint64_t v7 = *(void *)(v4 + 8);
  if ((v5 & 0x80u) == 0) {
    unint64_t v8 = *(unsigned __int8 *)(v4 + 23);
  }
  else {
    unint64_t v8 = v7;
  }
  if (v8 >= 0x80)
  {
    int v9 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v8);
    int v5 = *(unsigned __int8 *)(v4 + 23);
    uint64_t v7 = *(void *)(v4 + 8);
    int v2 = *((_DWORD *)this + 35);
    char v6 = *(unsigned char *)(v4 + 23);
  }
  else
  {
    int v9 = 1;
  }
  if (v6 < 0) {
    int v5 = v7;
  }
  int v3 = v9 + v5 + 1;
  if ((v2 & 2) != 0)
  {
LABEL_15:
    uint64_t v10 = *((void *)this + 6);
    int v11 = *(unsigned __int8 *)(v10 + 23);
    char v12 = v11;
    uint64_t v13 = *(void *)(v10 + 8);
    if ((v11 & 0x80u) == 0) {
      unint64_t v14 = *(unsigned __int8 *)(v10 + 23);
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14 >= 0x80)
    {
      int v15 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v14);
      int v11 = *(unsigned __int8 *)(v10 + 23);
      uint64_t v13 = *(void *)(v10 + 8);
      int v2 = *((_DWORD *)this + 35);
      char v12 = *(unsigned char *)(v10 + 23);
    }
    else
    {
      int v15 = 1;
    }
    if (v12 < 0) {
      int v11 = v13;
    }
    v3 += v15 + v11 + 1;
  }
LABEL_24:
  if ((v2 & 4) != 0)
  {
    uint64_t v16 = *((void *)this + 7);
    int v17 = *(unsigned __int8 *)(v16 + 23);
    char v18 = v17;
    uint64_t v19 = *(void *)(v16 + 8);
    if ((v17 & 0x80u) == 0) {
      unint64_t v20 = *(unsigned __int8 *)(v16 + 23);
    }
    else {
      unint64_t v20 = v19;
    }
    if (v20 >= 0x80)
    {
      int v21 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v20);
      int v17 = *(unsigned __int8 *)(v16 + 23);
      uint64_t v19 = *(void *)(v16 + 8);
      int v2 = *((_DWORD *)this + 35);
      char v18 = *(unsigned char *)(v16 + 23);
    }
    else
    {
      int v21 = 1;
    }
    if (v18 < 0) {
      int v17 = v19;
    }
    v3 += v21 + v17 + 1;
    if ((v2 & 8) == 0)
    {
LABEL_26:
      if ((v2 & 0x10) == 0) {
        goto LABEL_27;
      }
      goto LABEL_49;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_26;
  }
  uint64_t v22 = *((void *)this + 8);
  int v23 = *(unsigned __int8 *)(v22 + 23);
  char v24 = v23;
  uint64_t v25 = *(void *)(v22 + 8);
  if ((v23 & 0x80u) == 0) {
    unint64_t v26 = *(unsigned __int8 *)(v22 + 23);
  }
  else {
    unint64_t v26 = v25;
  }
  if (v26 >= 0x80)
  {
    int v27 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v26);
    int v23 = *(unsigned __int8 *)(v22 + 23);
    uint64_t v25 = *(void *)(v22 + 8);
    int v2 = *((_DWORD *)this + 35);
    char v24 = *(unsigned char *)(v22 + 23);
  }
  else
  {
    int v27 = 1;
  }
  if (v24 < 0) {
    int v23 = v25;
  }
  v3 += v27 + v23 + 1;
  if ((v2 & 0x10) == 0)
  {
LABEL_27:
    if ((v2 & 0x20) == 0) {
      goto LABEL_28;
    }
    goto LABEL_58;
  }
LABEL_49:
  uint64_t v28 = *((void *)this + 9);
  int v29 = *(unsigned __int8 *)(v28 + 23);
  char v30 = v29;
  uint64_t v31 = *(void *)(v28 + 8);
  if ((v29 & 0x80u) == 0) {
    unint64_t v32 = *(unsigned __int8 *)(v28 + 23);
  }
  else {
    unint64_t v32 = v31;
  }
  if (v32 >= 0x80)
  {
    int v33 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v32);
    int v29 = *(unsigned __int8 *)(v28 + 23);
    uint64_t v31 = *(void *)(v28 + 8);
    int v2 = *((_DWORD *)this + 35);
    char v30 = *(unsigned char *)(v28 + 23);
  }
  else
  {
    int v33 = 1;
  }
  if (v30 < 0) {
    int v29 = v31;
  }
  v3 += v33 + v29 + 1;
  if ((v2 & 0x20) == 0)
  {
LABEL_28:
    if ((v2 & 0x40) == 0) {
      goto LABEL_29;
    }
    goto LABEL_67;
  }
LABEL_58:
  uint64_t v34 = *((void *)this + 10);
  int v35 = *(unsigned __int8 *)(v34 + 23);
  char v36 = v35;
  uint64_t v37 = *(void *)(v34 + 8);
  if ((v35 & 0x80u) == 0) {
    unint64_t v38 = *(unsigned __int8 *)(v34 + 23);
  }
  else {
    unint64_t v38 = v37;
  }
  if (v38 >= 0x80)
  {
    int v39 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v38);
    int v35 = *(unsigned __int8 *)(v34 + 23);
    uint64_t v37 = *(void *)(v34 + 8);
    int v2 = *((_DWORD *)this + 35);
    char v36 = *(unsigned char *)(v34 + 23);
  }
  else
  {
    int v39 = 1;
  }
  if (v36 < 0) {
    int v35 = v37;
  }
  v3 += v39 + v35 + 1;
  if ((v2 & 0x40) == 0)
  {
LABEL_29:
    if ((v2 & 0x80) == 0) {
      goto LABEL_85;
    }
    goto LABEL_76;
  }
LABEL_67:
  uint64_t v40 = *((void *)this + 11);
  int v41 = *(unsigned __int8 *)(v40 + 23);
  char v42 = v41;
  uint64_t v43 = *(void *)(v40 + 8);
  if ((v41 & 0x80u) == 0) {
    unint64_t v44 = *(unsigned __int8 *)(v40 + 23);
  }
  else {
    unint64_t v44 = v43;
  }
  if (v44 >= 0x80)
  {
    int v45 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v44);
    int v41 = *(unsigned __int8 *)(v40 + 23);
    uint64_t v43 = *(void *)(v40 + 8);
    int v2 = *((_DWORD *)this + 35);
    char v42 = *(unsigned char *)(v40 + 23);
  }
  else
  {
    int v45 = 1;
  }
  if (v42 < 0) {
    int v41 = v43;
  }
  v3 += v45 + v41 + 1;
  if ((v2 & 0x80) != 0)
  {
LABEL_76:
    uint64_t v46 = *((void *)this + 12);
    int v47 = *(unsigned __int8 *)(v46 + 23);
    char v48 = v47;
    uint64_t v49 = *(void *)(v46 + 8);
    if ((v47 & 0x80u) == 0) {
      unint64_t v50 = *(unsigned __int8 *)(v46 + 23);
    }
    else {
      unint64_t v50 = v49;
    }
    if (v50 >= 0x80)
    {
      int v51 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v50);
      int v47 = *(unsigned __int8 *)(v46 + 23);
      uint64_t v49 = *(void *)(v46 + 8);
      int v2 = *((_DWORD *)this + 35);
      char v48 = *(unsigned char *)(v46 + 23);
    }
    else
    {
      int v51 = 1;
    }
    if (v48 < 0) {
      int v47 = v49;
    }
    v3 += v51 + v47 + 1;
  }
LABEL_85:
  if ((v2 & 0xFF00) == 0) {
    goto LABEL_127;
  }
  if ((v2 & 0x100) != 0)
  {
    uint64_t v52 = *((void *)this + 13);
    int v53 = *(unsigned __int8 *)(v52 + 23);
    char v54 = v53;
    uint64_t v55 = *(void *)(v52 + 8);
    if ((v53 & 0x80u) == 0) {
      unint64_t v56 = *(unsigned __int8 *)(v52 + 23);
    }
    else {
      unint64_t v56 = v55;
    }
    if (v56 >= 0x80)
    {
      int v57 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v56);
      int v53 = *(unsigned __int8 *)(v52 + 23);
      uint64_t v55 = *(void *)(v52 + 8);
      int v2 = *((_DWORD *)this + 35);
      char v54 = *(unsigned char *)(v52 + 23);
    }
    else
    {
      int v57 = 1;
    }
    if (v54 < 0) {
      int v53 = v55;
    }
    v3 += v57 + v53 + 1;
    if ((v2 & 0x200) == 0)
    {
LABEL_88:
      if ((v2 & 0x400) == 0) {
        goto LABEL_89;
      }
      goto LABEL_109;
    }
  }
  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_88;
  }
  uint64_t v58 = *((void *)this + 14);
  int v59 = *(unsigned __int8 *)(v58 + 23);
  char v60 = v59;
  uint64_t v61 = *(void *)(v58 + 8);
  if ((v59 & 0x80u) == 0) {
    unint64_t v62 = *(unsigned __int8 *)(v58 + 23);
  }
  else {
    unint64_t v62 = v61;
  }
  if (v62 >= 0x80)
  {
    int v63 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v62);
    int v59 = *(unsigned __int8 *)(v58 + 23);
    uint64_t v61 = *(void *)(v58 + 8);
    int v2 = *((_DWORD *)this + 35);
    char v60 = *(unsigned char *)(v58 + 23);
  }
  else
  {
    int v63 = 1;
  }
  if (v60 < 0) {
    int v59 = v61;
  }
  v3 += v63 + v59 + 1;
  if ((v2 & 0x400) == 0)
  {
LABEL_89:
    if ((v2 & 0x800) == 0) {
      goto LABEL_127;
    }
    goto LABEL_118;
  }
LABEL_109:
  uint64_t v64 = *((void *)this + 15);
  int v65 = *(unsigned __int8 *)(v64 + 23);
  char v66 = v65;
  uint64_t v67 = *(void *)(v64 + 8);
  if ((v65 & 0x80u) == 0) {
    unint64_t v68 = *(unsigned __int8 *)(v64 + 23);
  }
  else {
    unint64_t v68 = v67;
  }
  if (v68 >= 0x80)
  {
    int v69 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v68);
    int v65 = *(unsigned __int8 *)(v64 + 23);
    uint64_t v67 = *(void *)(v64 + 8);
    int v2 = *((_DWORD *)this + 35);
    char v66 = *(unsigned char *)(v64 + 23);
  }
  else
  {
    int v69 = 1;
  }
  if (v66 < 0) {
    int v65 = v67;
  }
  v3 += v69 + v65 + 1;
  if ((v2 & 0x800) != 0)
  {
LABEL_118:
    uint64_t v70 = *((void *)this + 16);
    int v71 = *(unsigned __int8 *)(v70 + 23);
    char v72 = v71;
    uint64_t v73 = *(void *)(v70 + 8);
    if ((v71 & 0x80u) == 0) {
      unint64_t v74 = *(unsigned __int8 *)(v70 + 23);
    }
    else {
      unint64_t v74 = v73;
    }
    if (v74 >= 0x80)
    {
      int v75 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v74);
      int v71 = *(unsigned __int8 *)(v70 + 23);
      uint64_t v73 = *(void *)(v70 + 8);
      char v72 = *(unsigned char *)(v70 + 23);
    }
    else
    {
      int v75 = 1;
    }
    if (v72 < 0) {
      int v71 = v73;
    }
    v3 += v75 + v71 + 1;
  }
LABEL_127:
  uint64_t v77 = AddrObjGoogle::protobuf::internal::ExtensionSet::ByteSize((AddrObjGoogle::protobuf::internal::ExtensionSet **)this + 1)
      + v3;
  unint64_t v78 = (void *)*((void *)this + 4);
  if (v78 && *v78 != v78[1]) {
    uint64_t v77 = AddrObjGoogle::protobuf::internal::WireFormat::ComputeUnknownFieldsSize((uint64_t **)this + 4, v76)+ v77;
  }
  *((_DWORD *)this + 34) = v77;
  return v77;
}

uint64_t addr_obj::AddressObjectProto::ByteSize(addr_obj::AddressObjectProto *this, const AddrObjGoogle::protobuf::UnknownFieldSet *a2)
{
  LOBYTE(v3) = *((unsigned char *)this + 88);
  if (!(_BYTE)v3)
  {
    int v4 = 0;
    goto LABEL_50;
  }
  if (*((unsigned char *)this + 88))
  {
    int v5 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 20);
    if ((v5 & 0x80000000) != 0)
    {
      int v6 = 10;
    }
    else if (v5 >= 0x80)
    {
      int v6 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5);
      int v3 = *((_DWORD *)this + 22);
    }
    else
    {
      int v6 = 1;
    }
    int v4 = v6 + 1;
    if ((v3 & 2) == 0) {
      goto LABEL_21;
    }
  }
  else
  {
    int v4 = 0;
    if ((*((unsigned char *)this + 88) & 2) == 0) {
      goto LABEL_21;
    }
  }
  uint64_t v7 = *((void *)this + 2);
  int v8 = *(unsigned __int8 *)(v7 + 23);
  char v9 = v8;
  uint64_t v10 = *(void *)(v7 + 8);
  if ((v8 & 0x80u) == 0) {
    unint64_t v11 = *(unsigned __int8 *)(v7 + 23);
  }
  else {
    unint64_t v11 = v10;
  }
  if (v11 >= 0x80)
  {
    int v12 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v11);
    int v8 = *(unsigned __int8 *)(v7 + 23);
    uint64_t v10 = *(void *)(v7 + 8);
    int v3 = *((_DWORD *)this + 22);
    char v9 = *(unsigned char *)(v7 + 23);
  }
  else
  {
    int v12 = 1;
  }
  if (v9 < 0) {
    int v8 = v10;
  }
  v4 += v12 + v8 + 1;
LABEL_21:
  if ((v3 & 4) != 0)
  {
    uint64_t v13 = (addr_obj::LocalizationProto *)*((void *)this + 3);
    if (!v13) {
      uint64_t v13 = *(addr_obj::LocalizationProto **)(addr_obj::AddressObjectProto::default_instance_(0) + 24);
    }
    unint64_t v14 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)addr_obj::LocalizationProto::ByteSize(v13, a2);
    int v15 = (int)v14;
    if (v14 >= 0x80) {
      int v16 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14);
    }
    else {
      int v16 = 1;
    }
    v4 += v15 + v16 + 1;
    int v3 = *((_DWORD *)this + 22);
    if ((v3 & 0x10) == 0)
    {
LABEL_23:
      if ((v3 & 0x20) == 0) {
        goto LABEL_24;
      }
      goto LABEL_38;
    }
  }
  else if ((v3 & 0x10) == 0)
  {
    goto LABEL_23;
  }
  int v17 = (addr_obj::V0AddressObjectProto *)*((void *)this + 7);
  if (!v17) {
    int v17 = *(addr_obj::V0AddressObjectProto **)(addr_obj::AddressObjectProto::default_instance_(0) + 56);
  }
  char v18 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)addr_obj::V0AddressObjectProto::ByteSize(v17, a2);
  int v19 = (int)v18;
  if (v18 >= 0x80) {
    int v20 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18);
  }
  else {
    int v20 = 1;
  }
  v4 += v19 + v20 + 2;
  int v3 = *((_DWORD *)this + 22);
  if ((v3 & 0x20) == 0)
  {
LABEL_24:
    if ((v3 & 0x40) == 0) {
      goto LABEL_50;
    }
    goto LABEL_44;
  }
LABEL_38:
  int v21 = (addr_obj::V1AddressObjectProto *)*((void *)this + 8);
  if (!v21) {
    int v21 = *(addr_obj::V1AddressObjectProto **)(addr_obj::AddressObjectProto::default_instance_(0) + 64);
  }
  uint64_t v22 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)addr_obj::V1AddressObjectProto::ByteSize(v21, a2);
  int v23 = (int)v22;
  if (v22 >= 0x80) {
    int v24 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v22);
  }
  else {
    int v24 = 1;
  }
  v4 += v23 + v24 + 2;
  if ((*((_DWORD *)this + 22) & 0x40) != 0)
  {
LABEL_44:
    uint64_t v25 = (addr_obj::VenueInfoProto *)*((void *)this + 9);
    if (!v25) {
      uint64_t v25 = *(addr_obj::VenueInfoProto **)(addr_obj::AddressObjectProto::default_instance_(0) + 72);
    }
    unint64_t v26 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)addr_obj::VenueInfoProto::ByteSize(v25, a2);
    int v27 = (int)v26;
    if (v26 >= 0x80) {
      int v28 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v26);
    }
    else {
      int v28 = 1;
    }
    v4 += v27 + v28 + 1;
  }
LABEL_50:
  int v29 = *((_DWORD *)this + 10);
  uint64_t v30 = (v29 + v4);
  if (v29 >= 1)
  {
    uint64_t v31 = 0;
    do
    {
      unint64_t v32 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)addr_obj::FingerprintProto::ByteSize(*(addr_obj::FingerprintProto **)(*((void *)this + 4)+ 8 * v31), a2);
      int v33 = (int)v32;
      if (v32 >= 0x80) {
        int v34 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v32);
      }
      else {
        int v34 = 1;
      }
      uint64_t v30 = (v33 + v30 + v34);
      ++v31;
    }
    while (v31 < *((int *)this + 10));
  }
  int v35 = (void *)*((void *)this + 1);
  if (v35 && *v35 != v35[1]) {
    uint64_t v30 = AddrObjGoogle::protobuf::internal::WireFormat::ComputeUnknownFieldsSize((uint64_t **)this + 1, a2)+ v30;
  }
  *((_DWORD *)this + 21) = v30;
  return v30;
}

uint64_t addr_obj::V1AddressObjectProto::ByteSize(addr_obj::V1AddressObjectProto *this, const AddrObjGoogle::protobuf::UnknownFieldSet *a2)
{
  LOBYTE(v3) = *((unsigned char *)this + 100);
  if (!(_BYTE)v3)
  {
    int v4 = 0;
    goto LABEL_66;
  }
  if ((*((unsigned char *)this + 100) & 1) == 0)
  {
    int v4 = 0;
    if ((*((unsigned char *)this + 100) & 2) == 0) {
      goto LABEL_21;
    }
    goto LABEL_15;
  }
  uint64_t v5 = *((void *)this + 5);
  int v6 = *(unsigned __int8 *)(v5 + 23);
  char v7 = v6;
  uint64_t v8 = *(void *)(v5 + 8);
  if ((v6 & 0x80u) == 0) {
    unint64_t v9 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    unint64_t v9 = v8;
  }
  if (v9 >= 0x80)
  {
    int v10 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v9);
    int v6 = *(unsigned __int8 *)(v5 + 23);
    uint64_t v8 = *(void *)(v5 + 8);
    int v3 = *((_DWORD *)this + 25);
    char v7 = *(unsigned char *)(v5 + 23);
  }
  else
  {
    int v10 = 1;
  }
  if (v7 < 0) {
    int v6 = v8;
  }
  int v4 = v10 + v6 + 1;
  if ((v3 & 2) != 0)
  {
LABEL_15:
    unint64_t v11 = (addr_obj::geo3::Address *)*((void *)this + 6);
    if (!v11) {
      unint64_t v11 = *(addr_obj::geo3::Address **)(addr_obj::V1AddressObjectProto::default_instance_(0) + 48);
    }
    int v12 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)addr_obj::geo3::Address::ByteSize(v11, a2);
    int v13 = (int)v12;
    if (v12 >= 0x80) {
      int v14 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12);
    }
    else {
      int v14 = 1;
    }
    v4 += v13 + v14 + 1;
    int v3 = *((_DWORD *)this + 25);
  }
LABEL_21:
  if ((v3 & 4) != 0)
  {
    uint64_t v15 = *((void *)this + 7);
    int v16 = *(unsigned __int8 *)(v15 + 23);
    char v17 = v16;
    uint64_t v18 = *(void *)(v15 + 8);
    if ((v16 & 0x80u) == 0) {
      unint64_t v19 = *(unsigned __int8 *)(v15 + 23);
    }
    else {
      unint64_t v19 = v18;
    }
    if (v19 >= 0x80)
    {
      int v20 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v19);
      int v16 = *(unsigned __int8 *)(v15 + 23);
      uint64_t v18 = *(void *)(v15 + 8);
      int v3 = *((_DWORD *)this + 25);
      char v17 = *(unsigned char *)(v15 + 23);
    }
    else
    {
      int v20 = 1;
    }
    if (v17 < 0) {
      int v16 = v18;
    }
    v4 += v20 + v16 + 1;
    if ((v3 & 8) == 0)
    {
LABEL_23:
      if ((v3 & 0x10) == 0) {
        goto LABEL_24;
      }
      goto LABEL_45;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_23;
  }
  uint64_t v21 = *((void *)this + 8);
  int v22 = *(unsigned __int8 *)(v21 + 23);
  char v23 = v22;
  uint64_t v24 = *(void *)(v21 + 8);
  if ((v22 & 0x80u) == 0) {
    unint64_t v25 = *(unsigned __int8 *)(v21 + 23);
  }
  else {
    unint64_t v25 = v24;
  }
  if (v25 >= 0x80)
  {
    int v26 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v25);
    int v22 = *(unsigned __int8 *)(v21 + 23);
    uint64_t v24 = *(void *)(v21 + 8);
    int v3 = *((_DWORD *)this + 25);
    char v23 = *(unsigned char *)(v21 + 23);
  }
  else
  {
    int v26 = 1;
  }
  if (v23 < 0) {
    int v22 = v24;
  }
  v4 += v26 + v22 + 1;
  if ((v3 & 0x10) == 0)
  {
LABEL_24:
    if ((v3 & 0x20) == 0) {
      goto LABEL_25;
    }
    goto LABEL_51;
  }
LABEL_45:
  int v27 = (addr_obj::geo3::StructuredAddress *)*((void *)this + 9);
  if (!v27) {
    int v27 = *(addr_obj::geo3::StructuredAddress **)(addr_obj::V1AddressObjectProto::default_instance_(0) + 72);
  }
  int v28 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)addr_obj::geo3::StructuredAddress::ByteSize(v27, a2);
  int v29 = (int)v28;
  if (v28 >= 0x80) {
    int v30 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v28);
  }
  else {
    int v30 = 1;
  }
  v4 += v29 + v30 + 1;
  int v3 = *((_DWORD *)this + 25);
  if ((v3 & 0x20) == 0)
  {
LABEL_25:
    if ((v3 & 0x40) == 0) {
      goto LABEL_66;
    }
    goto LABEL_60;
  }
LABEL_51:
  uint64_t v31 = *((void *)this + 10);
  int v32 = *(unsigned __int8 *)(v31 + 23);
  char v33 = v32;
  uint64_t v34 = *(void *)(v31 + 8);
  if ((v32 & 0x80u) == 0) {
    unint64_t v35 = *(unsigned __int8 *)(v31 + 23);
  }
  else {
    unint64_t v35 = v34;
  }
  if (v35 >= 0x80)
  {
    int v36 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v35);
    int v32 = *(unsigned __int8 *)(v31 + 23);
    uint64_t v34 = *(void *)(v31 + 8);
    int v3 = *((_DWORD *)this + 25);
    char v33 = *(unsigned char *)(v31 + 23);
  }
  else
  {
    int v36 = 1;
  }
  if (v33 < 0) {
    int v32 = v34;
  }
  v4 += v36 + v32 + 1;
  if ((v3 & 0x40) != 0)
  {
LABEL_60:
    uint64_t v37 = (addr_obj::geo3::Address *)*((void *)this + 11);
    if (!v37) {
      uint64_t v37 = *(addr_obj::geo3::Address **)(addr_obj::V1AddressObjectProto::default_instance_(0) + 88);
    }
    unint64_t v38 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)addr_obj::geo3::Address::ByteSize(v37, a2);
    int v39 = (int)v38;
    if (v38 >= 0x80) {
      int v40 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v38);
    }
    else {
      int v40 = 1;
    }
    v4 += v39 + v40 + 1;
  }
LABEL_66:
  uint64_t v42 = AddrObjGoogle::protobuf::internal::ExtensionSet::ByteSize((AddrObjGoogle::protobuf::internal::ExtensionSet **)this + 1)
      + v4;
  uint64_t v43 = (void *)*((void *)this + 4);
  if (v43 && *v43 != v43[1]) {
    uint64_t v42 = AddrObjGoogle::protobuf::internal::WireFormat::ComputeUnknownFieldsSize((uint64_t **)this + 4, v41)+ v42;
  }
  *((_DWORD *)this + 24) = v42;
  return v42;
}

uint64_t AddrObjGoogle::protobuf::internal::ExtensionSet::ByteSize(AddrObjGoogle::protobuf::internal::ExtensionSet **this)
{
  uint64_t v1 = this + 1;
  int v2 = *this;
  if (*this == (AddrObjGoogle::protobuf::internal::ExtensionSet *)(this + 1)) {
    return 0;
  }
  LODWORD(v3) = 0;
  do
  {
    int v4 = AddrObjGoogle::protobuf::internal::ExtensionSet::Extension::ByteSize((AddrObjGoogle::protobuf::internal::ExtensionSet *)((char *)v2 + 40), *((_DWORD *)v2 + 8));
    uint64_t v5 = (AddrObjGoogle::protobuf::internal::ExtensionSet *)*((void *)v2 + 1);
    if (v5)
    {
      do
      {
        int v6 = (AddrObjGoogle::protobuf::internal::ExtensionSet **)v5;
        uint64_t v5 = *(AddrObjGoogle::protobuf::internal::ExtensionSet **)v5;
      }
      while (v5);
    }
    else
    {
      do
      {
        int v6 = (AddrObjGoogle::protobuf::internal::ExtensionSet **)*((void *)v2 + 2);
        BOOL v7 = *v6 == v2;
        int v2 = (AddrObjGoogle::protobuf::internal::ExtensionSet *)v6;
      }
      while (!v7);
    }
    uint64_t v3 = (v4 + v3);
    int v2 = (AddrObjGoogle::protobuf::internal::ExtensionSet *)v6;
  }
  while (v6 != v1);
  return v3;
}

uint64_t addr_obj::LocalizationProto::ByteSize(addr_obj::LocalizationProto *this, const AddrObjGoogle::protobuf::UnknownFieldSet *a2)
{
  LOBYTE(v3) = *((unsigned char *)this + 44);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0;
    goto LABEL_34;
  }
  if (*((unsigned char *)this + 44))
  {
    uint64_t v5 = *((void *)this + 2);
    int v6 = *(unsigned __int8 *)(v5 + 23);
    char v7 = v6;
    uint64_t v8 = *(void *)(v5 + 8);
    if ((v6 & 0x80u) == 0) {
      unint64_t v9 = *(unsigned __int8 *)(v5 + 23);
    }
    else {
      unint64_t v9 = v8;
    }
    if (v9 >= 0x80)
    {
      int v11 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v9);
      int v6 = *(unsigned __int8 *)(v5 + 23);
      uint64_t v8 = *(void *)(v5 + 8);
      int v10 = v11 + 1;
      int v3 = *((_DWORD *)this + 11);
      char v7 = *(unsigned char *)(v5 + 23);
    }
    else
    {
      int v10 = 2;
    }
    if (v7 < 0) {
      int v6 = v8;
    }
    uint64_t v4 = (v10 + v6);
    if ((v3 & 2) == 0) {
      goto LABEL_24;
    }
    goto LABEL_15;
  }
  uint64_t v4 = 0;
  if ((*((unsigned char *)this + 44) & 2) != 0)
  {
LABEL_15:
    uint64_t v12 = *((void *)this + 3);
    int v13 = *(unsigned __int8 *)(v12 + 23);
    char v14 = v13;
    uint64_t v15 = *(void *)(v12 + 8);
    if ((v13 & 0x80u) == 0) {
      unint64_t v16 = *(unsigned __int8 *)(v12 + 23);
    }
    else {
      unint64_t v16 = v15;
    }
    if (v16 >= 0x80)
    {
      int v17 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v16);
      int v13 = *(unsigned __int8 *)(v12 + 23);
      uint64_t v15 = *(void *)(v12 + 8);
      int v3 = *((_DWORD *)this + 11);
      char v14 = *(unsigned char *)(v12 + 23);
    }
    else
    {
      int v17 = 1;
    }
    if (v14 < 0) {
      int v13 = v15;
    }
    uint64_t v4 = (v4 + v17 + v13 + 1);
  }
LABEL_24:
  if ((v3 & 4) != 0)
  {
    uint64_t v18 = *((void *)this + 4);
    int v19 = *(unsigned __int8 *)(v18 + 23);
    char v20 = v19;
    uint64_t v21 = *(void *)(v18 + 8);
    if ((v19 & 0x80u) == 0) {
      unint64_t v22 = *(unsigned __int8 *)(v18 + 23);
    }
    else {
      unint64_t v22 = v21;
    }
    if (v22 >= 0x80)
    {
      int v23 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v22);
      int v19 = *(unsigned __int8 *)(v18 + 23);
      uint64_t v21 = *(void *)(v18 + 8);
      char v20 = *(unsigned char *)(v18 + 23);
    }
    else
    {
      int v23 = 1;
    }
    if (v20 < 0) {
      int v19 = v21;
    }
    uint64_t v4 = (v4 + v23 + v19 + 1);
  }
LABEL_34:
  uint64_t v24 = (void *)*((void *)this + 1);
  if (v24 && *v24 != v24[1]) {
    uint64_t v4 = AddrObjGoogle::protobuf::internal::WireFormat::ComputeUnknownFieldsSize((uint64_t **)this + 1, a2)
  }
       + v4;
  *((_DWORD *)this + 10) = v4;
  return v4;
}

uint64_t addr_obj::FingerprintProto::ByteSize(addr_obj::FingerprintProto *this, const AddrObjGoogle::protobuf::UnknownFieldSet *a2)
{
  LOBYTE(v3) = *((unsigned char *)this + 52);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0;
    goto LABEL_37;
  }
  if ((*((unsigned char *)this + 52) & 1) == 0)
  {
    uint64_t v4 = 0;
    if ((*((unsigned char *)this + 52) & 2) == 0) {
      goto LABEL_16;
    }
LABEL_15:
    uint64_t v4 = v4
       + AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize64((2 * *((void *)this + 3)) ^ (*((uint64_t *)this + 3) >> 63))
       + 1;
    int v3 = *((_DWORD *)this + 13);
    goto LABEL_16;
  }
  uint64_t v5 = *((void *)this + 2);
  int v6 = *(unsigned __int8 *)(v5 + 23);
  char v7 = v6;
  uint64_t v8 = *(void *)(v5 + 8);
  if ((v6 & 0x80u) == 0) {
    unint64_t v9 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    unint64_t v9 = v8;
  }
  if (v9 >= 0x80)
  {
    int v11 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v9);
    int v6 = *(unsigned __int8 *)(v5 + 23);
    uint64_t v8 = *(void *)(v5 + 8);
    int v10 = v11 + 1;
    int v3 = *((_DWORD *)this + 13);
    char v7 = *(unsigned char *)(v5 + 23);
  }
  else
  {
    int v10 = 2;
  }
  if (v7 < 0) {
    int v6 = v8;
  }
  uint64_t v4 = (v10 + v6);
  if ((v3 & 2) != 0) {
    goto LABEL_15;
  }
LABEL_16:
  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0) {
      goto LABEL_37;
    }
    goto LABEL_28;
  }
  uint64_t v12 = *((void *)this + 4);
  int v13 = *(unsigned __int8 *)(v12 + 23);
  char v14 = v13;
  uint64_t v15 = *(void *)(v12 + 8);
  if ((v13 & 0x80u) == 0) {
    unint64_t v16 = *(unsigned __int8 *)(v12 + 23);
  }
  else {
    unint64_t v16 = v15;
  }
  if (v16 >= 0x80)
  {
    int v17 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v16);
    int v13 = *(unsigned __int8 *)(v12 + 23);
    uint64_t v15 = *(void *)(v12 + 8);
    int v3 = *((_DWORD *)this + 13);
    char v14 = *(unsigned char *)(v12 + 23);
  }
  else
  {
    int v17 = 1;
  }
  if (v14 < 0) {
    int v13 = v15;
  }
  uint64_t v4 = (v4 + v17 + v13 + 1);
  if ((v3 & 8) != 0)
  {
LABEL_28:
    uint64_t v18 = *((void *)this + 5);
    int v19 = *(unsigned __int8 *)(v18 + 23);
    char v20 = v19;
    uint64_t v21 = *(void *)(v18 + 8);
    if ((v19 & 0x80u) == 0) {
      unint64_t v22 = *(unsigned __int8 *)(v18 + 23);
    }
    else {
      unint64_t v22 = v21;
    }
    if (v22 >= 0x80)
    {
      int v23 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v22);
      int v19 = *(unsigned __int8 *)(v18 + 23);
      uint64_t v21 = *(void *)(v18 + 8);
      char v20 = *(unsigned char *)(v18 + 23);
    }
    else
    {
      int v23 = 1;
    }
    if (v20 < 0) {
      int v19 = v21;
    }
    uint64_t v4 = (v4 + v23 + v19 + 1);
  }
LABEL_37:
  uint64_t v24 = (void *)*((void *)this + 1);
  if (v24 && *v24 != v24[1]) {
    uint64_t v4 = AddrObjGoogle::protobuf::internal::WireFormat::ComputeUnknownFieldsSize((uint64_t **)this + 1, a2)
  }
       + v4;
  *((_DWORD *)this + 12) = v4;
  return v4;
}

uint64_t AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize64(unint64_t this)
{
  if ((this & 0x8000000000000000) == 0) {
    int v1 = 9;
  }
  else {
    int v1 = 10;
  }
  if (HIBYTE(this)) {
    int v2 = v1;
  }
  else {
    int v2 = 8;
  }
  if (this >> 49) {
    int v3 = v2;
  }
  else {
    int v3 = 7;
  }
  if (this >> 42) {
    unsigned int v4 = v3;
  }
  else {
    unsigned int v4 = 6;
  }
  if (this >> 28) {
    int v5 = 5;
  }
  else {
    int v5 = 4;
  }
  if (this >= 0x200000) {
    int v6 = v5;
  }
  else {
    int v6 = 3;
  }
  if (this >= 0x4000) {
    int v7 = v6;
  }
  else {
    int v7 = 2;
  }
  if (this >= 0x80) {
    unsigned int v8 = v7;
  }
  else {
    unsigned int v8 = 1;
  }
  if (this >> 35) {
    return v4;
  }
  else {
    return v8;
  }
}

unint64_t AddrObjGoogle::protobuf::internal::ExtensionSet::Extension::ByteSize(AddrObjGoogle::protobuf::internal::ExtensionSet::Extension *this, int a2)
{
  if (*((unsigned char *)this + 9))
  {
    int v4 = *((unsigned __int8 *)this + 8);
    if (*((unsigned char *)this + 11))
    {
      switch(*((unsigned char *)this + 8))
      {
        case 1:
        case 6:
        case 0x10:
          unint64_t v6 = (8 * *(_DWORD *)(*(void *)this + 8));
          goto LABEL_67;
        case 2:
        case 7:
        case 0xF:
          unint64_t v6 = (4 * *(_DWORD *)(*(void *)this + 8));
          goto LABEL_67;
        case 3:
          unint64_t v22 = *(void **)this;
          if (*(int *)(*(void *)this + 8) < 1) {
            goto LABEL_5;
          }
          uint64_t v23 = 0;
          LODWORD(v6) = 0;
          do
          {
            unint64_t v6 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize64(*(void *)(*v22 + 8 * v23++))
               + v6;
            unint64_t v22 = *(void **)this;
          }
          while (v23 < *(int *)(*(void *)this + 8));
          goto LABEL_67;
        case 4:
          uint64_t v24 = *(void **)this;
          if (*(int *)(*(void *)this + 8) < 1) {
            goto LABEL_5;
          }
          uint64_t v25 = 0;
          LODWORD(v6) = 0;
          do
          {
            unint64_t v6 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize64(*(void *)(*v24 + 8 * v25++))
               + v6;
            uint64_t v24 = *(void **)this;
          }
          while (v25 < *(int *)(*(void *)this + 8));
          goto LABEL_67;
        case 5:
          uint64_t v26 = *(void *)this;
          if (*(int *)(*(void *)this + 8) < 1) {
            goto LABEL_5;
          }
          uint64_t v27 = 0;
          LODWORD(v6) = 0;
          do
          {
            int v28 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned int *)(*(void *)v26 + 4 * v27);
            if ((v28 & 0x80000000) != 0)
            {
              int v29 = 10;
            }
            else if (v28 >= 0x80)
            {
              int v29 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v28);
              uint64_t v26 = *(void *)this;
            }
            else
            {
              int v29 = 1;
            }
            unint64_t v6 = (v29 + v6);
            ++v27;
          }
          while (v27 < *(int *)(v26 + 8));
          goto LABEL_67;
        case 8:
          unint64_t v6 = *(unsigned int *)(*(void *)this + 8);
          goto LABEL_67;
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
          AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)v105, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/AddrObjGoogle/protobuf/extension_set.cc", 1294);
          int v5 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v105, "Non-primitive types can't be packed.");
          AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v104, (AddrObjGoogle::protobuf::internal::LogMessage *)v5);
          AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&v105[0].__r_.__value_.__l.__data_);
          goto LABEL_5;
        case 0xD:
          uint64_t v14 = *(void *)this;
          if (*(int *)(*(void *)this + 8) < 1) {
            goto LABEL_5;
          }
          uint64_t v15 = 0;
          LODWORD(v6) = 0;
          do
          {
            unint64_t v16 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned int *)(*(void *)v14 + 4 * v15);
            if (v16 >= 0x80)
            {
              int v17 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v16);
              uint64_t v14 = *(void *)this;
            }
            else
            {
              int v17 = 1;
            }
            unint64_t v6 = (v17 + v6);
            ++v15;
          }
          while (v15 < *(int *)(v14 + 8));
          goto LABEL_67;
        case 0xE:
          uint64_t v30 = *(void *)this;
          if (*(int *)(*(void *)this + 8) < 1) {
            goto LABEL_5;
          }
          uint64_t v31 = 0;
          LODWORD(v6) = 0;
          do
          {
            int v32 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned int *)(*(void *)v30 + 4 * v31);
            if ((v32 & 0x80000000) != 0)
            {
              int v33 = 10;
            }
            else if (v32 >= 0x80)
            {
              int v33 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v32);
              uint64_t v30 = *(void *)this;
            }
            else
            {
              int v33 = 1;
            }
            unint64_t v6 = (v33 + v6);
            ++v31;
          }
          while (v31 < *(int *)(v30 + 8));
          goto LABEL_67;
        case 0x11:
          uint64_t v18 = *(void *)this;
          if (*(int *)(*(void *)this + 8) < 1) {
            goto LABEL_5;
          }
          uint64_t v19 = 0;
          LODWORD(v6) = 0;
          do
          {
            char v20 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)((2 * *(_DWORD *)(*(void *)v18 + 4 * v19)) ^ (*(int *)(*(void *)v18 + 4 * v19) >> 31));
            if (v20 >= 0x80)
            {
              int v21 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v20);
              uint64_t v18 = *(void *)this;
            }
            else
            {
              int v21 = 1;
            }
            unint64_t v6 = (v21 + v6);
            ++v19;
          }
          while (v19 < *(int *)(v18 + 8));
          goto LABEL_67;
        case 0x12:
          uint64_t v34 = *(void **)this;
          if (*(int *)(*(void *)this + 8) < 1) {
            goto LABEL_5;
          }
          uint64_t v35 = 0;
          LODWORD(v6) = 0;
          do
          {
            unint64_t v6 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize64((2
                                                                                           * *(void *)(*v34 + 8 * v35)) ^ (*(uint64_t *)(*v34 + 8 * v35) >> 63))
               + v6;
            ++v35;
            uint64_t v34 = *(void **)this;
          }
          while (v35 < *(int *)(*(void *)this + 8));
LABEL_67:
          *((_DWORD *)this + 3) = v6;
          if ((int)v6 >= 1)
          {
            if (v6 >= 0x80) {
              int v36 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v6);
            }
            else {
              int v36 = 1;
            }
            int v37 = v36 + v6;
            unint64_t v38 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)((8 * a2) | 2u);
            if (v38 >= 0x80) {
              int v39 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v38);
            }
            else {
              int v39 = 1;
            }
            unint64_t v6 = (v37 + v39);
          }
          break;
        default:
LABEL_5:
          unint64_t v6 = 0;
          *((_DWORD *)this + 3) = 0;
          break;
      }
    }
    else
    {
      int v10 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)(8 * a2);
      if (v10 >= 0x80) {
        int v11 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10);
      }
      else {
        int v11 = 1;
      }
      int v12 = v11 << (v4 == 10);
      switch(*((unsigned char *)this + 8))
      {
        case 1:
        case 6:
        case 0x10:
          int v13 = v12 + 8;
          goto LABEL_21;
        case 2:
        case 7:
        case 0xF:
          int v13 = v12 + 4;
LABEL_21:
          unint64_t v6 = (*(_DWORD *)(*(void *)this + 8) * v13);
          break;
        case 3:
          uint64_t v43 = *(void **)this;
          int v44 = *(_DWORD *)(*(void *)this + 8);
          unint64_t v6 = (v44 * v12);
          if (v44 >= 1)
          {
            uint64_t v45 = 0;
            do
            {
              unint64_t v6 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize64(*(void *)(*v43 + 8 * v45++))
                 + v6;
              uint64_t v43 = *(void **)this;
            }
            while (v45 < *(int *)(*(void *)this + 8));
          }
          break;
        case 4:
          uint64_t v46 = *(void **)this;
          int v47 = *(_DWORD *)(*(void *)this + 8);
          unint64_t v6 = (v47 * v12);
          if (v47 >= 1)
          {
            uint64_t v48 = 0;
            do
            {
              unint64_t v6 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize64(*(void *)(*v46 + 8 * v48++))
                 + v6;
              uint64_t v46 = *(void **)this;
            }
            while (v48 < *(int *)(*(void *)this + 8));
          }
          break;
        case 5:
          uint64_t v49 = *(void *)this;
          int v50 = *(_DWORD *)(*(void *)this + 8);
          unint64_t v6 = (v50 * v12);
          if (v50 >= 1)
          {
            uint64_t v51 = 0;
            do
            {
              uint64_t v52 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned int *)(*(void *)v49 + 4 * v51);
              if ((v52 & 0x80000000) != 0)
              {
                int v53 = 10;
              }
              else if (v52 >= 0x80)
              {
                int v53 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v52);
                uint64_t v49 = *(void *)this;
              }
              else
              {
                int v53 = 1;
              }
              unint64_t v6 = (v53 + v6);
              ++v51;
            }
            while (v51 < *(int *)(v49 + 8));
          }
          break;
        case 8:
          unint64_t v6 = (*(_DWORD *)(*(void *)this + 8) + *(_DWORD *)(*(void *)this + 8) * v12);
          break;
        case 9:
          uint64_t v54 = *(void *)this;
          int v55 = *(_DWORD *)(*(void *)this + 8);
          unint64_t v6 = (v55 * v12);
          if (v55 >= 1)
          {
            uint64_t v56 = 0;
            do
            {
              uint64_t v57 = *(void *)(*(void *)v54 + 8 * v56);
              int v58 = *(unsigned __int8 *)(v57 + 23);
              char v59 = v58;
              uint64_t v60 = *(void *)(v57 + 8);
              if ((v58 & 0x80u) == 0) {
                unint64_t v61 = *(unsigned __int8 *)(v57 + 23);
              }
              else {
                unint64_t v61 = v60;
              }
              if (v61 >= 0x80)
              {
                int v62 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v61);
                int v58 = *(unsigned __int8 *)(v57 + 23);
                uint64_t v60 = *(void *)(v57 + 8);
                uint64_t v54 = *(void *)this;
                char v59 = *(unsigned char *)(v57 + 23);
              }
              else
              {
                int v62 = 1;
              }
              if (v59 < 0) {
                int v58 = v60;
              }
              unint64_t v6 = (v62 + v6 + v58);
              ++v56;
            }
            while (v56 < *(int *)(v54 + 8));
          }
          break;
        case 0xA:
          int v63 = *(void **)this;
          int v64 = *(_DWORD *)(*(void *)this + 8);
          unint64_t v6 = (v64 * v12);
          if (v64 >= 1)
          {
            uint64_t v65 = 0;
            do
            {
              unint64_t v6 = (*(unsigned int (**)(void))(**(void **)(*v63 + 8 * v65) + 72))(*(void *)(*v63 + 8 * v65))
                 + v6;
              ++v65;
              int v63 = *(void **)this;
            }
            while (v65 < *(int *)(*(void *)this + 8));
          }
          break;
        case 0xB:
          char v66 = *(void **)this;
          int v67 = *(_DWORD *)(*(void *)this + 8);
          unint64_t v6 = (v67 * v12);
          if (v67 >= 1)
          {
            uint64_t v68 = 0;
            do
            {
              int v69 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)(*(uint64_t (**)(void))(**(void **)(*v66 + 8 * v68) + 72))(*(void *)(*v66 + 8 * v68));
              int v70 = (int)v69;
              if (v69 >= 0x80) {
                int v71 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v69);
              }
              else {
                int v71 = 1;
              }
              unint64_t v6 = (v70 + v6 + v71);
              ++v68;
              char v66 = *(void **)this;
            }
            while (v68 < *(int *)(*(void *)this + 8));
          }
          break;
        case 0xC:
          uint64_t v72 = *(void *)this;
          int v73 = *(_DWORD *)(*(void *)this + 8);
          unint64_t v6 = (v73 * v12);
          if (v73 >= 1)
          {
            uint64_t v74 = 0;
            do
            {
              uint64_t v75 = *(void *)(*(void *)v72 + 8 * v74);
              int v76 = *(unsigned __int8 *)(v75 + 23);
              char v77 = v76;
              uint64_t v78 = *(void *)(v75 + 8);
              if ((v76 & 0x80u) == 0) {
                unint64_t v79 = *(unsigned __int8 *)(v75 + 23);
              }
              else {
                unint64_t v79 = v78;
              }
              if (v79 >= 0x80)
              {
                int v80 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v79);
                int v76 = *(unsigned __int8 *)(v75 + 23);
                uint64_t v78 = *(void *)(v75 + 8);
                uint64_t v72 = *(void *)this;
                char v77 = *(unsigned char *)(v75 + 23);
              }
              else
              {
                int v80 = 1;
              }
              if (v77 < 0) {
                int v76 = v78;
              }
              unint64_t v6 = (v80 + v6 + v76);
              ++v74;
            }
            while (v74 < *(int *)(v72 + 8));
          }
          break;
        case 0xD:
          uint64_t v81 = *(void *)this;
          int v82 = *(_DWORD *)(*(void *)this + 8);
          unint64_t v6 = (v82 * v12);
          if (v82 >= 1)
          {
            uint64_t v83 = 0;
            do
            {
              int v84 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned int *)(*(void *)v81 + 4 * v83);
              if (v84 >= 0x80)
              {
                int v85 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v84);
                uint64_t v81 = *(void *)this;
              }
              else
              {
                int v85 = 1;
              }
              unint64_t v6 = (v85 + v6);
              ++v83;
            }
            while (v83 < *(int *)(v81 + 8));
          }
          break;
        case 0xE:
          uint64_t v86 = *(void *)this;
          int v87 = *(_DWORD *)(*(void *)this + 8);
          unint64_t v6 = (v87 * v12);
          if (v87 >= 1)
          {
            uint64_t v88 = 0;
            do
            {
              uint64_t v89 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned int *)(*(void *)v86 + 4 * v88);
              if ((v89 & 0x80000000) != 0)
              {
                int v90 = 10;
              }
              else if (v89 >= 0x80)
              {
                int v90 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v89);
                uint64_t v86 = *(void *)this;
              }
              else
              {
                int v90 = 1;
              }
              unint64_t v6 = (v90 + v6);
              ++v88;
            }
            while (v88 < *(int *)(v86 + 8));
          }
          break;
        case 0x11:
          uint64_t v91 = *(void *)this;
          int v92 = *(_DWORD *)(*(void *)this + 8);
          unint64_t v6 = (v92 * v12);
          if (v92 >= 1)
          {
            uint64_t v93 = 0;
            do
            {
              uint64_t v94 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)((2 * *(_DWORD *)(*(void *)v91 + 4 * v93)) ^ (*(int *)(*(void *)v91 + 4 * v93) >> 31));
              if (v94 >= 0x80)
              {
                int v95 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v94);
                uint64_t v91 = *(void *)this;
              }
              else
              {
                int v95 = 1;
              }
              unint64_t v6 = (v95 + v6);
              ++v93;
            }
            while (v93 < *(int *)(v91 + 8));
          }
          break;
        case 0x12:
          unint64_t v96 = *(void **)this;
          int v97 = *(_DWORD *)(*(void *)this + 8);
          unint64_t v6 = (v97 * v12);
          if (v97 >= 1)
          {
            uint64_t v98 = 0;
            do
            {
              unint64_t v6 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize64((2
                                                                                             * *(void *)(*v96 + 8 * v98)) ^ (*(uint64_t *)(*v96 + 8 * v98) >> 63))
                 + v6;
              ++v98;
              unint64_t v96 = *(void **)this;
            }
            while (v98 < *(int *)(*(void *)this + 8));
          }
          break;
        default:
          return 0;
      }
    }
  }
  else if (*((unsigned char *)this + 10))
  {
    return 0;
  }
  else
  {
    int v7 = *((unsigned __int8 *)this + 8);
    unsigned int v8 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)(8 * a2);
    if (v8 >= 0x80) {
      int v9 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8);
    }
    else {
      int v9 = 1;
    }
    unint64_t v6 = (v9 << (v7 == 10));
    switch(*((unsigned char *)this + 8))
    {
      case 1:
      case 6:
      case 0x10:
        return (v6 + 8);
      case 2:
      case 7:
      case 0xF:
        return (v6 + 4);
      case 3:
      case 4:
        unint64_t v40 = *(void *)this;
        goto LABEL_169;
      case 5:
      case 0xE:
        int v41 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned int *)this;
        if ((v41 & 0x80000000) == 0) {
          goto LABEL_165;
        }
        int v42 = 10;
        goto LABEL_170;
      case 8:
        return (v6 + 1);
      case 9:
      case 0xC:
        int v42 = AddrObjGoogle::protobuf::internal::WireFormatLite::StringSize(*(void *)this);
        goto LABEL_170;
      case 0xA:
        int v42 = (*(uint64_t (**)(void))(**(void **)this + 72))();
        goto LABEL_170;
      case 0xB:
        uint64_t v99 = *(void *)this;
        if ((*((unsigned char *)this + 10) & 0x10) != 0)
        {
          unsigned int v101 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)(*(uint64_t (**)(uint64_t))(*(void *)v99 + 64))(v99);
          int v102 = (int)v101;
          if (v101 >= 0x80) {
            int v103 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v101);
          }
          else {
            int v103 = 1;
          }
          unint64_t v6 = (v102 + v6 + v103);
        }
        else
        {
          int v42 = AddrObjGoogle::protobuf::internal::WireFormatLite::MessageSize(v99);
LABEL_170:
          unint64_t v6 = (v42 + v6);
        }
        break;
      case 0xD:
        int v41 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned int *)this;
        goto LABEL_165;
      case 0x11:
        int v41 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)((2 * *(_DWORD *)this) ^ (*(int *)this >> 31));
LABEL_165:
        if (v41 >= 0x80) {
          int v42 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v41);
        }
        else {
          int v42 = 1;
        }
        goto LABEL_170;
      case 0x12:
        unint64_t v40 = (2 * *(void *)this) ^ (*(uint64_t *)this >> 63);
LABEL_169:
        int v42 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize64(v40);
        goto LABEL_170;
      default:
        return v6;
    }
  }
  return v6;
}

void sub_188F4ECD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

BOOL GEOPDPhotoPositionIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  int v2 = (int *)MEMORY[0x1E4F940E8];
  int v3 = (int *)MEMORY[0x1E4F940E0];
  int v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] >= *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
LABEL_140:
    BOOL v69 = a1[*v4] == 0;
    PBReaderRecallMark();
    return v69;
  }
  int v5 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (a1[*v4]) {
      goto LABEL_140;
    }
    char v6 = 0;
    unsigned int v7 = 0;
    unint64_t v8 = 0;
    while (1)
    {
      uint64_t v9 = *v2;
      uint64_t v10 = *(void *)&a1[v9];
      unint64_t v11 = v10 + 1;
      if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
        break;
      }
      char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
      *(void *)&a1[v9] = v11;
      v8 |= (unint64_t)(v12 & 0x7F) << v6;
      if ((v12 & 0x80) == 0) {
        goto LABEL_12;
      }
      v6 += 7;
      BOOL v13 = v7++ >= 9;
      if (v13)
      {
        unint64_t v8 = 0;
        int v14 = a1[*v4];
        goto LABEL_14;
      }
    }
    a1[*v4] = 1;
LABEL_12:
    int v14 = a1[*v4];
    if (a1[*v4]) {
      unint64_t v8 = 0;
    }
LABEL_14:
    int v15 = v8 & 7;
    if (v14 || v15 == 4) {
      goto LABEL_140;
    }
    switch((v8 >> 3))
    {
      case 1u:
        if ((v8 & 7) != 0) {
          goto LABEL_142;
        }
        unsigned int v17 = 0;
        while (1)
        {
          uint64_t v18 = *v2;
          uint64_t v19 = *(void *)&a1[v18];
          unint64_t v20 = v19 + 1;
          if (v19 == -1 || v20 > *(void *)&a1[*v3]) {
            goto LABEL_76;
          }
          int v21 = *(char *)(*(void *)&a1[*v5] + v19);
          *(void *)&a1[v18] = v20;
          if (v21 < 0)
          {
            BOOL v22 = v17++ > 8;
            if (!v22) {
              continue;
            }
          }
          goto LABEL_85;
        }
      case 2u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDCameraMetadataIsValid(a1)) {
          goto LABEL_142;
        }
        goto LABEL_84;
      case 3u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDOrientedPositionIsValid(a1)) {
          goto LABEL_142;
        }
        goto LABEL_84;
      case 4u:
        if ((v8 & 7) != 0) {
          goto LABEL_142;
        }
        unsigned int v23 = 0;
        while (1)
        {
          uint64_t v24 = *v2;
          uint64_t v25 = *(void *)&a1[v24];
          unint64_t v26 = v25 + 1;
          if (v25 == -1 || v26 > *(void *)&a1[*v3]) {
            goto LABEL_76;
          }
          int v27 = *(char *)(*(void *)&a1[*v5] + v25);
          *(void *)&a1[v24] = v26;
          if (v27 < 0)
          {
            BOOL v22 = v23++ > 8;
            if (!v22) {
              continue;
            }
          }
          goto LABEL_85;
        }
      case 5u:
        if ((v8 & 7) != 0) {
          goto LABEL_142;
        }
        unsigned int v28 = 0;
        while (1)
        {
          uint64_t v29 = *v2;
          uint64_t v30 = *(void *)&a1[v29];
          unint64_t v31 = v30 + 1;
          if (v30 == -1 || v31 > *(void *)&a1[*v3]) {
            goto LABEL_76;
          }
          int v32 = *(char *)(*(void *)&a1[*v5] + v30);
          *(void *)&a1[v29] = v31;
          if (v32 < 0)
          {
            BOOL v22 = v28++ > 8;
            if (!v22) {
              continue;
            }
          }
          goto LABEL_85;
        }
      case 6u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDGeographicCoordinateIsValid(a1)) {
          goto LABEL_142;
        }
        goto LABEL_84;
      case 7u:
        if ((v8 & 7) != 0) {
          goto LABEL_142;
        }
        unsigned int v33 = 0;
        while (1)
        {
          uint64_t v34 = *v2;
          uint64_t v35 = *(void *)&a1[v34];
          unint64_t v36 = v35 + 1;
          if (v35 == -1 || v36 > *(void *)&a1[*v3]) {
            goto LABEL_76;
          }
          int v37 = *(char *)(*(void *)&a1[*v5] + v35);
          *(void *)&a1[v34] = v36;
          if (v37 < 0)
          {
            BOOL v22 = v33++ > 8;
            if (!v22) {
              continue;
            }
          }
          goto LABEL_85;
        }
      case 8u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDGroundDataBuildIsValid(a1)) {
          goto LABEL_142;
        }
        goto LABEL_84;
      case 9u:
        if (v15 != 2)
        {
          if ((v8 & 7) != 0) {
            goto LABEL_142;
          }
          while (1)
          {
            uint64_t v38 = *v2;
            uint64_t v39 = *(void *)&a1[v38];
            unint64_t v40 = v39 + 1;
            if (v39 == -1 || v40 > *(void *)&a1[*v3]) {
              break;
            }
            int v41 = *(char *)(*(void *)&a1[*v5] + v39);
            *(void *)&a1[v38] = v40;
            if (v41 < 0)
            {
              unsigned int v42 = v15++;
              if (v42 <= 8) {
                continue;
              }
            }
            goto LABEL_85;
          }
LABEL_76:
          a1[*v4] = 1;
          goto LABEL_85;
        }
        if (!PBReaderPlaceMark()) {
          goto LABEL_142;
        }
LABEL_131:
        while (*(void *)&a1[*v2] < *(void *)&a1[*v3])
        {
          unsigned int v64 = a1[*v4];
          if (a1[*v4]) {
            break;
          }
          while (1)
          {
            uint64_t v65 = *v2;
            uint64_t v66 = *(void *)&a1[v65];
            unint64_t v67 = v66 + 1;
            if (v66 == -1 || v67 > *(void *)&a1[*v3]) {
              break;
            }
            int v68 = *(char *)(*(void *)&a1[*v5] + v66);
            *(void *)&a1[v65] = v67;
            if (v68 < 0)
            {
              BOOL v13 = v64++ >= 9;
              if (!v13) {
                continue;
              }
            }
            goto LABEL_131;
          }
          a1[*v4] = 1;
        }
        goto LABEL_84;
      case 0xAu:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDOrientedTilePositionIsValid(a1)) {
          goto LABEL_142;
        }
        goto LABEL_84;
      case 0xBu:
        if (v15 == 2 && PBReaderPlaceMark() && GEOTileCoordinateIsValid(a1)) {
          goto LABEL_84;
        }
        goto LABEL_142;
      case 0xCu:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_142;
        }
        objc_msgSend(a1, "position", 0, 0);
        [a1 length];
LABEL_90:
        if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
          goto LABEL_128;
        }
        char v43 = 0;
        unsigned int v44 = 0;
        unint64_t v45 = 0;
        while (1)
        {
          uint64_t v46 = *v2;
          uint64_t v47 = *(void *)&a1[v46];
          unint64_t v48 = v47 + 1;
          if (v47 == -1 || v48 > *(void *)&a1[*v3]) {
            break;
          }
          char v49 = *(unsigned char *)(*(void *)&a1[*v5] + v47);
          *(void *)&a1[v46] = v48;
          v45 |= (unint64_t)(v49 & 0x7F) << v43;
          if ((v49 & 0x80) == 0) {
            goto LABEL_100;
          }
          v43 += 7;
          BOOL v13 = v44++ >= 9;
          if (v13)
          {
            unint64_t v45 = 0;
            int v50 = a1[*v4];
            goto LABEL_102;
          }
        }
        a1[*v4] = 1;
LABEL_100:
        int v50 = a1[*v4];
        if (a1[*v4]) {
          unint64_t v45 = 0;
        }
LABEL_102:
        int v51 = v45 & 7;
        if (v50 || v51 == 4)
        {
LABEL_128:
          int v63 = a1[*v4];
          PBReaderRecallMark();
          if (v63) {
            goto LABEL_142;
          }
LABEL_84:
          PBReaderRecallMark();
LABEL_85:
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
            goto LABEL_140;
          }
          continue;
        }
        if ((v45 >> 3) != 1)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_141;
          }
          goto LABEL_90;
        }
        if (v51 == 2)
        {
          if (PBReaderPlaceMark())
          {
            while (1)
            {
LABEL_117:
              if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || (unsigned int v58 = a1[*v4], a1[*v4]))
              {
                PBReaderRecallMark();
                goto LABEL_90;
              }
              while (1)
              {
                uint64_t v59 = *v2;
                uint64_t v60 = *(void *)&a1[v59];
                unint64_t v61 = v60 + 1;
                if (v60 == -1 || v61 > *(void *)&a1[*v3]) {
                  break;
                }
                int v62 = *(char *)(*(void *)&a1[*v5] + v60);
                *(void *)&a1[v59] = v61;
                if (v62 < 0)
                {
                  BOOL v13 = v58++ >= 9;
                  if (!v13) {
                    continue;
                  }
                }
                goto LABEL_117;
              }
              a1[*v4] = 1;
            }
          }
        }
        else if ((v45 & 7) == 0)
        {
          do
          {
            uint64_t v53 = *v2;
            uint64_t v54 = *(void *)&a1[v53];
            unint64_t v55 = v54 + 1;
            if (v54 == -1 || v55 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
              goto LABEL_90;
            }
            int v56 = *(char *)(*(void *)&a1[*v5] + v54);
            *(void *)&a1[v53] = v55;
            if ((v56 & 0x80000000) == 0) {
              break;
            }
            unsigned int v57 = v51++;
          }
          while (v57 <= 8);
          goto LABEL_90;
        }
LABEL_141:
        PBReaderRecallMark();
LABEL_142:
        PBReaderRecallMark();
        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_142;
        }
        goto LABEL_85;
    }
  }
}

BOOL GEOPDCameraMetadataIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  int v2 = (int *)MEMORY[0x1E4F940E8];
  int v3 = (int *)MEMORY[0x1E4F940E0];
  int v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    int v5 = (int *)MEMORY[0x1E4F940B8];
    while (!a1[*v4])
    {
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        BOOL v13 = v7++ >= 9;
        if (v13)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        break;
      }
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0) {
            goto LABEL_109;
          }
          unsigned int v17 = 0;
          while (1)
          {
            uint64_t v18 = *v2;
            uint64_t v19 = *(void *)&a1[v18];
            unint64_t v20 = v19 + 1;
            if (v19 == -1 || v20 > *(void *)&a1[*v3]) {
              goto LABEL_92;
            }
            int v21 = *(char *)(*(void *)&a1[*v5] + v19);
            *(void *)&a1[v18] = v20;
            if (v21 < 0)
            {
              BOOL v22 = v17++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_95;
          }
        case 2u:
          if ((v8 & 7) != 0) {
            goto LABEL_109;
          }
          unsigned int v23 = 0;
          while (1)
          {
            uint64_t v24 = *v2;
            uint64_t v25 = *(void *)&a1[v24];
            unint64_t v26 = v25 + 1;
            if (v25 == -1 || v26 > *(void *)&a1[*v3]) {
              goto LABEL_92;
            }
            int v27 = *(char *)(*(void *)&a1[*v5] + v25);
            *(void *)&a1[v24] = v26;
            if (v27 < 0)
            {
              BOOL v22 = v23++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_95;
          }
        case 3u:
          if ((v8 & 7) != 0) {
            goto LABEL_109;
          }
          unsigned int v28 = 0;
          while (1)
          {
            uint64_t v29 = *v2;
            uint64_t v30 = *(void *)&a1[v29];
            unint64_t v31 = v30 + 1;
            if (v30 == -1 || v31 > *(void *)&a1[*v3]) {
              goto LABEL_92;
            }
            int v32 = *(char *)(*(void *)&a1[*v5] + v30);
            *(void *)&a1[v29] = v31;
            if (v32 < 0)
            {
              BOOL v22 = v28++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_95;
          }
        case 4u:
          if (v15 != 2 || !PBReaderPlaceMark()) {
            goto LABEL_109;
          }
          objc_msgSend(a1, "position", 0, 0);
          [a1 length];
          while (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
          {
            char v33 = 0;
            unsigned int v34 = 0;
            unint64_t v35 = 0;
            while (2)
            {
              uint64_t v36 = *v2;
              uint64_t v37 = *(void *)&a1[v36];
              unint64_t v38 = v37 + 1;
              if (v37 == -1 || v38 > *(void *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                char v39 = *(unsigned char *)(*(void *)&a1[*v5] + v37);
                *(void *)&a1[v36] = v38;
                v35 |= (unint64_t)(v39 & 0x7F) << v33;
                if (v39 < 0)
                {
                  v33 += 7;
                  BOOL v13 = v34++ >= 9;
                  if (v13)
                  {
                    unint64_t v35 = 0;
                    uint64_t v40 = *v4;
                    int v41 = a1[v40];
                    goto LABEL_60;
                  }
                  continue;
                }
              }
              break;
            }
            uint64_t v40 = *v4;
            int v41 = a1[v40];
            if (a1[v40]) {
              unint64_t v35 = 0;
            }
LABEL_60:
            int v42 = v35 & 7;
            if (v41) {
              BOOL v43 = 1;
            }
            else {
              BOOL v43 = v42 == 4;
            }
            if (!v43)
            {
              switch((v35 >> 3))
              {
                case 1u:
                  if ((v35 & 7) != 0) {
                    goto LABEL_108;
                  }
                  unsigned int v47 = 0;
                  do
                  {
                    uint64_t v48 = *v2;
                    uint64_t v49 = *(void *)&a1[v48];
                    unint64_t v50 = v49 + 1;
                    if (v49 == -1 || v50 > *(void *)&a1[*v3])
                    {
                      uint64_t v40 = *v4;
                      goto LABEL_80;
                    }
                    int v51 = *(char *)(*(void *)&a1[*v5] + v49);
                    *(void *)&a1[v48] = v50;
                    if ((v51 & 0x80000000) == 0) {
                      break;
                    }
                    BOOL v22 = v47++ > 8;
                  }
                  while (!v22);
                  continue;
                case 2u:
                case 3u:
                case 4u:
                case 5u:
                case 6u:
                case 7u:
                case 8u:
                case 9u:
                case 0xAu:
                  if (v42 != 1) {
                    goto LABEL_108;
                  }
                  uint64_t v44 = *v2;
                  unint64_t v45 = *(void *)&a1[v44];
                  if (v45 > 0xFFFFFFFFFFFFFFF7 || (unint64_t v46 = v45 + 8, v46 > *(void *)&a1[*v3])) {
LABEL_80:
                  }
                    a1[v40] = 1;
                  else {
                    *(void *)&a1[v44] = v46;
                  }
                  continue;
                default:
                  if (PBReaderSkipValueWithTag()) {
                    continue;
                  }
LABEL_108:
                  PBReaderRecallMark();
                  goto LABEL_109;
              }
            }
            break;
          }
          int v57 = a1[*v4];
          PBReaderRecallMark();
          if (!v57) {
            goto LABEL_94;
          }
          goto LABEL_109;
        case 5u:
          if (v15 == 2 && PBReaderPlaceMark() && GEOPDOrientedPositionIsValid(a1)) {
            goto LABEL_94;
          }
          goto LABEL_109;
        case 6u:
          if (v15 == 2)
          {
            if (!PBReaderPlaceMark())
            {
LABEL_109:
              PBReaderRecallMark();
              return 0;
            }
LABEL_98:
            while (*(void *)&a1[*v2] < *(void *)&a1[*v3])
            {
              unsigned int v58 = a1[*v4];
              if (a1[*v4]) {
                break;
              }
              while (1)
              {
                uint64_t v59 = *v2;
                uint64_t v60 = *(void *)&a1[v59];
                unint64_t v61 = v60 + 1;
                if (v60 == -1 || v61 > *(void *)&a1[*v3]) {
                  break;
                }
                int v62 = *(char *)(*(void *)&a1[*v5] + v60);
                *(void *)&a1[v59] = v61;
                if (v62 < 0)
                {
                  BOOL v13 = v58++ >= 9;
                  if (!v13) {
                    continue;
                  }
                }
                goto LABEL_98;
              }
              a1[*v4] = 1;
            }
LABEL_94:
            PBReaderRecallMark();
          }
          else
          {
            if ((v8 & 7) != 0) {
              goto LABEL_109;
            }
            while (1)
            {
              uint64_t v52 = *v2;
              uint64_t v53 = *(void *)&a1[v52];
              unint64_t v54 = v53 + 1;
              if (v53 == -1 || v54 > *(void *)&a1[*v3]) {
                break;
              }
              int v55 = *(char *)(*(void *)&a1[*v5] + v53);
              *(void *)&a1[v52] = v54;
              if (v55 < 0)
              {
                unsigned int v56 = v15++;
                if (v56 <= 8) {
                  continue;
                }
              }
              goto LABEL_95;
            }
LABEL_92:
            a1[*v4] = 1;
          }
LABEL_95:
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
            goto LABEL_107;
          }
          break;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_109;
          }
          goto LABEL_95;
      }
    }
  }
LABEL_107:
  BOOL v63 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v63;
}